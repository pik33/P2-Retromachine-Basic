00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic0492.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C0 4D A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 14 52 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed D0 4E 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 1C C9 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 B0 41 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 08 3D 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 D0 91 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 F0 48 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 40 C3 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 F0 02 04 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa A8 00 04 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 80 12 04 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 94 6E 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     D4 5E B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     54 73 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     E0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     E0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00840     52 00 00 FF 
00844     38 E5 05 F1 | 	add	objptr, ##42296
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     38 E5 85 F1 | 	sub	objptr, ##42296
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     5C E5 05 F1 | 	add	objptr, ##41308
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     5C E5 85 F1 | 	sub	objptr, ##41308
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     40 76 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     04 7E B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     8C 77 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     5C E5 05 F1 | 	add	objptr, ##41308
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     5C E5 85 F1 | 	sub	objptr, ##41308
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     FC E4 05 F1 | 	add	objptr, ##42236
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     47 00 00 FF 
009bc     2C E4 85 F1 | 	sub	objptr, ##36396
009c0     50 75 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     48 43 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     38 E5 05 F1 | 	add	objptr, ##42296
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     38 E5 85 F1 | 	sub	objptr, ##42296
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     20 E5 05 F1 | 	add	objptr, ##42272
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     20 E5 85 F1 | 	sub	objptr, ##42272
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     40 41 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     E0 40 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     40 E5 05 F1 | 	add	objptr, ##42304
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     02 E5 85 F1 | 	sub	objptr, ##42242
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     04 E5 05 F1 | 	add	objptr, ##42244
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     02 E5 85 F1 | 	sub	objptr, ##42242
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     70 40 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     D8 58 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     40 E5 05 F1 | 	add	objptr, ##42304
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     40 E5 85 F1 | 	sub	objptr, ##42304
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     68 5C B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     5C E5 05 A1 |  if_e	add	objptr, ##41308
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     5C E5 85 A1 |  if_e	sub	objptr, ##41308
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     7C 72 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     40 7A B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     CC 73 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     BF 01 00 FF 
00ccc     A2 51 06 F6 | 	mov	local22, ##@LR__5567
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     54 E4 05 F1 | 	add	objptr, ##28244
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     54 E4 85 F1 | 	sub	objptr, ##28244
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     04 3F B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     20 99 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     2C 77 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     20 E5 05 F1 | 	add	objptr, ##42272
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     20 E5 85 F1 | 	sub	objptr, ##42272
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     88 60 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     88 62 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     5C E5 05 F1 | 	add	objptr, ##41308
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     5C E5 85 F1 | 	sub	objptr, ##41308
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     08 71 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     CC 78 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     58 72 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     A0 3D B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     F8 57 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     EC 57 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     54 E4 05 F1 | 	add	objptr, ##28244
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     54 E4 85 F1 | 	sub	objptr, ##28244
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     54 E4 05 F1 | 	add	objptr, ##28244
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     54 E4 85 F1 | 	sub	objptr, ##28244
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     54 E4 05 F1 | 	add	objptr, ##28244
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     54 E4 85 F1 | 	sub	objptr, ##28244
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     7C 57 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     54 E4 05 F1 | 	add	objptr, ##28244
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     54 E4 85 F1 | 	sub	objptr, ##28244
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     48 57 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     68 57 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     58 57 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     44 3C B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     F0 3B B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     C0 3B B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     40 E5 05 F1 | 	add	objptr, ##42304
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     02 E5 85 F1 | 	sub	objptr, ##42242
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     04 E5 05 F1 | 	add	objptr, ##42244
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     02 E5 85 F1 | 	sub	objptr, ##42242
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     58 3B B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     C0 53 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     40 E5 05 F1 | 	add	objptr, ##42304
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     40 E5 85 F1 | 	sub	objptr, ##42304
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     37 00 00 FF 
01138     18 E4 05 F1 | 	add	objptr, ##28184
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     54 E4 85 F1 | 	sub	objptr, ##28244
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     E0 54 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     40 3A B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     EC 39 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     BC 39 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     40 E5 05 F1 | 	add	objptr, ##42304
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     02 E5 85 F1 | 	sub	objptr, ##42242
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     04 E5 05 F1 | 	add	objptr, ##42244
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     02 E5 85 F1 | 	sub	objptr, ##42242
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     54 39 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     BC 51 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     40 E5 05 F1 | 	add	objptr, ##42304
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     40 E5 85 F1 | 	sub	objptr, ##42304
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     BF 01 00 FF 
01328     A3 51 06 F6 | 	mov	local22, ##@LR__5568
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     E6 E4 05 F1 | 	add	objptr, ##42214
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     24 E5 85 F1 | 	sub	objptr, ##42276
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     24 E5 05 C1 |  if_b	add	objptr, ##42276
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     24 E5 85 C1 |  if_b	sub	objptr, ##42276
0137c     52 00 00 FF 
01380     24 E5 05 F1 | 	add	objptr, ##42276
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     24 E5 85 F1 | 	sub	objptr, ##42276
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     28 53 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     E6 E4 05 F1 | 	add	objptr, ##42214
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     24 E5 85 F1 | 	sub	objptr, ##42276
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     24 E5 05 31 |  if_ae	add	objptr, ##42276
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     24 E5 85 31 |  if_ae	sub	objptr, ##42276
013dc     52 00 00 FF 
013e0     24 E5 05 F1 | 	add	objptr, ##42276
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     24 E5 85 F1 | 	sub	objptr, ##42276
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     C8 52 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     EC E4 05 F1 | 	add	objptr, ##42220
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     D4 E4 85 F1 | 	sub	objptr, ##14036
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     54 E4 85 F1 | 	sub	objptr, ##28244
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     54 E4 05 C1 |  if_b	add	objptr, ##28244
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     D4 E4 05 C1 |  if_b	add	objptr, ##14036
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     28 E5 85 C1 |  if_b	sub	objptr, ##42280
01458     52 00 00 FF 
0145c     28 E5 05 F1 | 	add	objptr, ##42280
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     28 E5 85 F1 | 	sub	objptr, ##42280
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     1C 52 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     EC E4 05 F1 | 	add	objptr, ##42220
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     28 E5 85 F1 | 	sub	objptr, ##42280
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     28 E5 05 31 |  if_ae	add	objptr, ##42280
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     28 E5 85 31 |  if_ae	sub	objptr, ##42280
014b8     52 00 00 FF 
014bc     28 E5 05 F1 | 	add	objptr, ##42280
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     28 E5 85 F1 | 	sub	objptr, ##42280
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     C0 51 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     20 E5 05 F1 | 	add	objptr, ##42272
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     20 E5 85 F1 | 	sub	objptr, ##42272
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     E0 3F B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     D0 3F B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     A3 E4 05 F1 | 	add	objptr, ##42147
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     EC E4 85 F1 | 	sub	objptr, ##42220
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     80 71 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     EC E4 05 F1 | 	add	objptr, ##42220
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     EC E4 85 F1 | 	sub	objptr, ##42220
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     58 71 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     EC E4 05 F1 | 	add	objptr, ##42220
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     EC E4 85 F1 | 	sub	objptr, ##42220
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     30 71 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     EC E4 05 F1 | 	add	objptr, ##42220
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     EC E4 85 F1 | 	sub	objptr, ##42220
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     0A 4A 05 F6 | 	mov	COUNT_, #10
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     68 E5 05 F1 | 	add	objptr, ##41832
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     ED F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     70 E5 85 F1 | 	sub	objptr, ##41840
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01650     13 00 00 FF 
01654     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
01658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0165c     05 12 66 F0 | 	shl	arg01, #5
01660     09 FB 01 F1 | 	add	result1, arg01
01664     FD FA 01 FB | 	rdlong	result1, result1
01668     13 00 00 FF 
0166c     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
01670     01 FA 55 F2 | 	cmps	result1, #1 wc
01674     B4 01 90 CD |  if_b	jmp	#LR__0061
01678     14 13 02 F6 | 	mov	arg01, local02
0167c     00 14 06 F6 | 	mov	arg02, #0
01680     1C 66 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01684     FD 2A 02 F6 | 	mov	local03, result1
01688     14 13 02 F6 | 	mov	arg01, local02
0168c     01 14 06 F6 | 	mov	arg02, #1
01690     0C 66 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01694     FD 2C 02 F6 | 	mov	local04, result1
01698     14 13 02 F6 | 	mov	arg01, local02
0169c     02 14 06 F6 | 	mov	arg02, #2
016a0     FC 65 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a4     FD 2E 02 F6 | 	mov	local05, result1
016a8     14 13 02 F6 | 	mov	arg01, local02
016ac     00 14 06 F6 | 	mov	arg02, #0
016b0     30 66 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
016b4     FD 30 02 F6 | 	mov	local06, result1
016b8     14 13 02 F6 | 	mov	arg01, local02
016bc     03 14 06 F6 | 	mov	arg02, #3
016c0     DC 65 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c4     FD 32 02 F6 | 	mov	local07, result1
016c8     14 13 02 F6 | 	mov	arg01, local02
016cc     04 14 06 F6 | 	mov	arg02, #4
016d0     CC 65 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016d4     FD 34 02 F6 | 	mov	local08, result1
016d8     14 13 02 F6 | 	mov	arg01, local02
016dc     05 14 06 F6 | 	mov	arg02, #5
016e0     BC 65 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016e4     FD 36 02 F6 | 	mov	local09, result1
016e8     14 13 02 F6 | 	mov	arg01, local02
016ec     06 14 06 F6 | 	mov	arg02, #6
016f0     AC 65 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016f4     FD 38 02 F6 | 	mov	local10, result1
016f8     14 13 02 F6 | 	mov	arg01, local02
016fc     07 14 06 F6 | 	mov	arg02, #7
01700     9C 65 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01704     FD 14 02 F6 | 	mov	arg02, result1
01708     13 FB 01 F6 | 	mov	result1, local01
0170c     02 FA 65 F0 | 	shl	result1, #2
01710     51 00 00 FF 
01714     78 E5 05 F1 | 	add	objptr, ##41848
01718     F2 FA 01 F1 | 	add	result1, objptr
0171c     FD 2A 62 FC | 	wrlong	local03, result1
01720     13 FB 01 F6 | 	mov	result1, local01
01724     02 FA 65 F0 | 	shl	result1, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 FA 01 F1 | 	add	result1, objptr
01730     FD 2C 62 FC | 	wrlong	local04, result1
01734     13 FB 01 F6 | 	mov	result1, local01
01738     02 FA 65 F0 | 	shl	result1, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 FA 01 F1 | 	add	result1, objptr
01744     FD 2E 62 FC | 	wrlong	local05, result1
01748     13 2F 02 F6 | 	mov	local05, local01
0174c     02 2E 66 F0 | 	shl	local05, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 2E 02 F1 | 	add	local05, objptr
01758     17 31 62 FC | 	wrlong	local06, local05
0175c     13 31 02 F6 | 	mov	local06, local01
01760     02 30 66 F0 | 	shl	local06, #2
01764     1C E4 05 F1 | 	add	objptr, #28
01768     F2 30 02 F1 | 	add	local06, objptr
0176c     18 33 62 FC | 	wrlong	local07, local06
01770     13 33 02 F6 | 	mov	local07, local01
01774     02 32 66 F0 | 	shl	local07, #2
01778     1C E4 05 F1 | 	add	objptr, #28
0177c     F2 32 02 F1 | 	add	local07, objptr
01780     19 35 62 FC | 	wrlong	local08, local07
01784     13 35 02 F6 | 	mov	local08, local01
01788     02 34 66 F0 | 	shl	local08, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 34 02 F1 | 	add	local08, objptr
01794     1A 37 62 FC | 	wrlong	local09, local08
01798     13 37 02 F6 | 	mov	local09, local01
0179c     02 36 66 F0 | 	shl	local09, #2
017a0     1C E4 05 F1 | 	add	objptr, #28
017a4     F2 36 02 F1 | 	add	local09, objptr
017a8     1B 39 62 FC | 	wrlong	local10, local09
017ac     13 39 02 F6 | 	mov	local10, local01
017b0     02 38 66 F0 | 	shl	local10, #2
017b4     1C E4 05 F1 | 	add	objptr, #28
017b8     F2 38 02 F1 | 	add	local10, objptr
017bc     1C 15 62 FC | 	wrlong	arg02, local10
017c0     60 00 00 FF 
017c4     00 2A 06 F1 | 	add	local03, ##49152
017c8     0F 2A 46 F0 | 	shr	local03, #15
017cc     01 38 06 F6 | 	mov	local10, #1
017d0     15 39 02 F1 | 	add	local10, local03
017d4     60 00 00 FF 
017d8     00 2C 06 F1 | 	add	local04, ##49152
017dc     0F 2C 46 F0 | 	shr	local04, #15
017e0     01 36 06 F6 | 	mov	local09, #1
017e4     16 37 02 F1 | 	add	local09, local04
017e8     13 35 02 F6 | 	mov	local08, local01
017ec     02 34 66 F0 | 	shl	local08, #2
017f0     1C E4 05 F1 | 	add	objptr, #28
017f4     F2 34 02 F1 | 	add	local08, objptr
017f8     02 36 66 F0 | 	shl	local09, #2
017fc     1B 39 02 F1 | 	add	local10, local09
01800     1A 39 62 FC | 	wrlong	local10, local08
01804     13 39 02 F6 | 	mov	local10, local01
01808     02 38 66 F0 | 	shl	local10, #2
0180c     1C E4 05 F1 | 	add	objptr, #28
01810     F2 38 02 F1 | 	add	local10, objptr
01814     14 13 02 F6 | 	mov	arg01, local02
01818     52 00 00 FF 
0181c     90 E4 85 F1 | 	sub	objptr, ##42128
01820     54 64 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01824     1C FB 61 FC | 	wrlong	result1, local10
01828     01 26 06 F1 | 	add	local01, #1
0182c                 | LR__0061
0182c     01 28 06 F1 | 	add	local02, #1
01830     07 28 16 F2 | 	cmp	local02, #7 wc
01834     14 FE 9F CD |  if_b	jmp	#LR__0060
01838     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0183c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0183c                 | LR__0062
0183c     07 26 16 F2 | 	cmp	local01, #7 wc
01840     3C 00 90 3D |  if_ae	jmp	#LR__0064
01844     13 39 02 F6 | 	mov	local10, local01
01848     02 38 66 F0 | 	shl	local10, #2
0184c     52 00 00 FF 
01850     74 E4 05 F1 | 	add	objptr, ##42100
01854     F2 38 02 F1 | 	add	local10, objptr
01858     1C 01 68 FC | 	wrlong	#0, local10
0185c     13 39 02 F6 | 	mov	local10, local01
01860     02 38 66 F0 | 	shl	local10, #2
01864     1C E4 05 F1 | 	add	objptr, #28
01868     F2 38 02 F1 | 	add	local10, objptr
0186c     1C 01 68 FC | 	wrlong	#0, local10
01870     01 26 06 F1 | 	add	local01, #1
01874     52 00 00 FF 
01878     90 E4 85 F1 | 	sub	objptr, ##42128
0187c     BC FF 9F FD | 	jmp	#LR__0062
01880                 | LR__0063
01880                 | LR__0064
01880     A7 F0 03 F6 | 	mov	ptra, fp
01884     B2 00 A0 FD | 	call	#popregs_
01888                 | _gethdi_ret
01888     2D 00 64 FD | 	ret
0188c                 | 
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '
0188c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0188c                 | ' '
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' 
0188c                 | ' sub interpret
0188c                 | _interpret
0188c     35 4A 05 F6 | 	mov	COUNT_, #53
01890     A8 00 A0 FD | 	call	#pushregs_
01894     01 00 00 FF 
01898     84 F0 07 F1 | 	add	ptra, ##644
0189c     37 00 00 FF 
018a0     3C E4 05 F1 | 	add	objptr, ##28220
018a4     F2 12 02 FB | 	rdlong	arg01, objptr
018a8     37 00 00 FF 
018ac     3C E4 85 F1 | 	sub	objptr, ##28220
018b0     50 90 B2 FD | 	call	#__system__RTrim_S
018b4     FD 12 02 F6 | 	mov	arg01, result1
018b8     88 8F B2 FD | 	call	#__system__LTrim_S
018bc     37 00 00 FF 
018c0     40 E4 05 F1 | 	add	objptr, ##28224
018c4     F2 FA 61 FC | 	wrlong	result1, objptr
018c8     04 E4 05 F1 | 	add	objptr, #4
018cc     FF FF FF FF 
018d0     F2 FE 6B FC | 	wrlong	##-1, objptr
018d4     1B 00 00 FF 
018d8     C4 E4 05 F1 | 	add	objptr, ##14020
018dc     F2 00 68 FC | 	wrlong	#0, objptr
018e0     08 00 00 FF 
018e4     6C E4 85 F1 | 	sub	objptr, ##4204
018e8     F2 00 68 FC | 	wrlong	#0, objptr
018ec     4A 00 00 FF 
018f0     9C E4 85 F1 | 	sub	objptr, ##38044
018f4     00 26 06 F6 | 	mov	local01, #0
018f8                 | LR__0070
018f8                 | ' 
018f8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
018f8                 | ' 
018f8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
018f8                 | ' 
018f8                 | ' 108 
018f8                 | ' for i=0 to 125: separators(i)=0 :next i
018f8     00 28 06 F6 | 	mov	local02, #0
018fc     38 4E 05 F1 | 	add	fp, #56
01900     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01904                 | LR__0071
01904     14 2B 02 F6 | 	mov	local03, local02
01908     02 2A 66 F0 | 	shl	local03, #2
0190c     A7 2A 02 F1 | 	add	local03, fp
01910     15 01 68 FC | 	wrlong	#0, local03
01914     01 28 06 F1 | 	add	local02, #1
01918     7E 28 56 F2 | 	cmps	local02, #126 wc
0191c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01920                 | LR__0072
01920     38 4E 85 F1 | 	sub	fp, #56
01924                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01924     00 28 06 F6 | 	mov	local02, #0
01928     35 00 00 FF 
0192c     2C E4 05 F1 | 	add	objptr, ##27180
01930     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01934                 | LR__0073
01934     14 2D 02 F6 | 	mov	local04, local02
01938     03 2C 66 F0 | 	shl	local04, #3
0193c     F2 2C 02 F1 | 	add	local04, objptr
01940     BF 01 00 FF 
01944     A4 17 06 F6 | 	mov	arg03, ##@LR__5569
01948     16 17 62 FC | 	wrlong	arg03, local04
0194c     14 2D 02 F6 | 	mov	local04, local02
01950     03 2C 66 F0 | 	shl	local04, #3
01954     F2 2E 02 F6 | 	mov	local05, objptr
01958     F2 2C 02 F1 | 	add	local04, objptr
0195c     00 30 06 F6 | 	mov	local06, #0
01960     04 2C 06 F1 | 	add	local04, #4
01964     16 01 68 FC | 	wrlong	#0, local04
01968     01 28 06 F1 | 	add	local02, #1
0196c     7E 28 56 F2 | 	cmps	local02, #126 wc
01970     C0 FF 9F CD |  if_b	jmp	#LR__0073
01974                 | LR__0074
01974     02 00 00 FF 
01978     10 E4 05 F1 | 	add	objptr, ##1040
0197c     F2 12 02 FB | 	rdlong	arg01, objptr
01980     37 00 00 FF 
01984     3C E4 85 F1 | 	sub	objptr, ##28220
01988     78 8F B2 FD | 	call	#__system__RTrim_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     B0 8E B2 FD | 	call	#__system__LTrim_S
01994     37 00 00 FF 
01998     3C E4 05 F1 | 	add	objptr, ##28220
0199c     F2 FA 61 FC | 	wrlong	result1, objptr
019a0     BF 01 00 FF 
019a4     A5 2D 06 F6 | 	mov	local04, ##@LR__5570
019a8     1B 00 00 FF 
019ac     08 E5 05 F1 | 	add	objptr, ##14088
019b0     F2 2C 62 FC | 	wrlong	local04, objptr
019b4     1B 00 00 FF 
019b8     08 E5 85 F1 | 	sub	objptr, ##14088
019bc     F2 12 02 FB | 	rdlong	arg01, objptr
019c0     37 00 00 FF 
019c4     3C E4 85 F1 | 	sub	objptr, ##28220
019c8     09 33 02 F6 | 	mov	local07, arg01
019cc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
019d0                 | LR__0075
019d0     19 FB C9 FA | 	rdbyte	result1, local07 wz
019d4     01 32 06 51 |  if_ne	add	local07, #1
019d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
019dc                 | LR__0076
019dc     09 33 8A F1 | 	sub	local07, arg01 wz
019e0     52 00 00 FF 
019e4     48 E5 05 F1 | 	add	objptr, ##42312
019e8     F2 32 62 FC | 	wrlong	local07, objptr
019ec                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
019ec     52 00 00 FF 
019f0     48 E5 85 F1 | 	sub	objptr, ##42312
019f4     40 2A 90 AD |  if_e	jmp	#LR__0210
019f8     00 34 06 F6 | 	mov	local08, #0
019fc                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
019fc                 | ' for i=1 to len(line$)
019fc     01 28 06 F6 | 	mov	local02, #1
01a00     37 00 00 FF 
01a04     3C E4 05 F1 | 	add	objptr, ##28220
01a08     F2 12 02 FB | 	rdlong	arg01, objptr
01a0c     37 00 00 FF 
01a10     3C E4 85 F1 | 	sub	objptr, ##28220
01a14     09 33 02 F6 | 	mov	local07, arg01
01a18     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01a1c                 | LR__0077
01a1c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a20     01 32 06 51 |  if_ne	add	local07, #1
01a24     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01a28                 | LR__0078
01a28     09 33 82 F1 | 	sub	local07, arg01
01a2c     19 37 02 F6 | 	mov	local09, local07
01a30     01 36 06 F1 | 	add	local09, #1
01a34                 | LR__0079
01a34     1B 29 52 F2 | 	cmps	local02, local09 wc
01a38     AC 00 90 3D |  if_ae	jmp	#LR__0081
01a3c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01a3c     37 00 00 FF 
01a40     3C E4 05 F1 | 	add	objptr, ##28220
01a44     F2 12 02 FB | 	rdlong	arg01, objptr
01a48     37 00 00 FF 
01a4c     3C E4 85 F1 | 	sub	objptr, ##28220
01a50     14 15 02 F6 | 	mov	arg02, local02
01a54     01 16 06 F6 | 	mov	arg03, #1
01a58     30 8B B2 FD | 	call	#__system__Mid_S
01a5c     FD 12 02 F6 | 	mov	arg01, result1
01a60     BF 01 00 FF 
01a64     A6 15 06 F6 | 	mov	arg02, ##@LR__5571
01a68     B0 69 B2 FD | 	call	#__system___string_cmp
01a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a70     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a74     01 34 06 A6 |  if_e	mov	local08, #1
01a78     3C 00 90 AD |  if_e	jmp	#LR__0080
01a7c     37 00 00 FF 
01a80     3C E4 05 F1 | 	add	objptr, ##28220
01a84     F2 12 02 FB | 	rdlong	arg01, objptr
01a88     37 00 00 FF 
01a8c     3C E4 85 F1 | 	sub	objptr, ##28220
01a90     14 15 02 F6 | 	mov	arg02, local02
01a94     01 16 06 F6 | 	mov	arg03, #1
01a98     F0 8A B2 FD | 	call	#__system__Mid_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     BF 01 00 FF 
01aa4     A8 15 06 F6 | 	mov	arg02, ##@LR__5572
01aa8     70 69 B2 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01ab4     00 34 06 A6 |  if_e	mov	local08, #0
01ab8                 | LR__0080
01ab8     14 2D 02 F6 | 	mov	local04, local02
01abc     03 2C 66 F0 | 	shl	local04, #3
01ac0     35 00 00 FF 
01ac4     2C E4 05 F1 | 	add	objptr, ##27180
01ac8     F2 2E 02 F6 | 	mov	local05, objptr
01acc     F2 2C 02 F1 | 	add	local04, objptr
01ad0     04 2C 06 F1 | 	add	local04, #4
01ad4     16 35 62 FC | 	wrlong	local08, local04
01ad8     01 28 06 F1 | 	add	local02, #1
01adc     35 00 00 FF 
01ae0     2C E4 85 F1 | 	sub	objptr, ##27180
01ae4     4C FF 9F FD | 	jmp	#LR__0079
01ae8                 | LR__0081
01ae8     01 28 06 F6 | 	mov	local02, #1
01aec                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01aec                 | LR__0082
01aec     37 00 00 FF 
01af0     3C E4 05 F1 | 	add	objptr, ##28220
01af4     F2 12 02 FB | 	rdlong	arg01, objptr
01af8     37 00 00 FF 
01afc     3C E4 85 F1 | 	sub	objptr, ##28220
01b00     14 15 02 F6 | 	mov	arg02, local02
01b04     01 16 06 F6 | 	mov	arg03, #1
01b08     80 8A B2 FD | 	call	#__system__Mid_S
01b0c     FD 12 02 F6 | 	mov	arg01, result1
01b10     BF 01 00 FF 
01b14     AA 39 06 F6 | 	mov	local10, ##@LR__5573
01b18     1C 15 02 F6 | 	mov	arg02, local10
01b1c     FC 68 B2 FD | 	call	#__system___string_cmp
01b20     00 FA 0D F2 | 	cmp	result1, #0 wz
01b24     34 00 90 5D |  if_ne	jmp	#LR__0083
01b28     14 2F 02 F6 | 	mov	local05, local02
01b2c     03 2E 66 F0 | 	shl	local05, #3
01b30     35 00 00 FF 
01b34     2C E4 05 F1 | 	add	objptr, ##27180
01b38     F2 30 02 F6 | 	mov	local06, objptr
01b3c     F2 2E 02 F1 | 	add	local05, objptr
01b40     04 2E 06 F1 | 	add	local05, #4
01b44     17 3B 02 FB | 	rdlong	local11, local05
01b48     04 2E 86 F1 | 	sub	local05, #4
01b4c     1D 3D 0A F6 | 	mov	local12, local11 wz
01b50     35 00 00 FF 
01b54     2C E4 85 F1 | 	sub	objptr, ##27180
01b58     24 00 90 AD |  if_e	jmp	#LR__0084
01b5c                 | LR__0083
01b5c     52 00 00 FF 
01b60     48 E5 05 F1 | 	add	objptr, ##42312
01b64     F2 3E 02 FB | 	rdlong	local13, objptr
01b68     52 00 00 FF 
01b6c     48 E5 85 F1 | 	sub	objptr, ##42312
01b70     1F 41 02 F6 | 	mov	local14, local13
01b74     20 29 52 F2 | 	cmps	local02, local14 wc
01b78     01 28 06 C1 |  if_b	add	local02, #1
01b7c     6C FF 9F CD |  if_b	jmp	#LR__0082
01b80                 | LR__0084
01b80                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b80     52 00 00 FF 
01b84     48 E5 05 F1 | 	add	objptr, ##42312
01b88     F2 2C 02 FB | 	rdlong	local04, objptr
01b8c     52 00 00 FF 
01b90     48 E5 85 F1 | 	sub	objptr, ##42312
01b94     16 29 52 F2 | 	cmps	local02, local04 wc
01b98     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b9c     37 00 00 FF 
01ba0     3C E4 05 F1 | 	add	objptr, ##28220
01ba4     F2 30 02 FB | 	rdlong	local06, objptr
01ba8     37 00 00 FF 
01bac     3C E4 85 F1 | 	sub	objptr, ##28220
01bb0     18 13 02 F6 | 	mov	arg01, local06
01bb4     09 33 02 F6 | 	mov	local07, arg01
01bb8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01bbc                 | LR__0085
01bbc     19 FB C9 FA | 	rdbyte	result1, local07 wz
01bc0     01 32 06 51 |  if_ne	add	local07, #1
01bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01bc8                 | LR__0086
01bc8     09 33 82 F1 | 	sub	local07, arg01
01bcc     19 2F 02 F6 | 	mov	local05, local07
01bd0     17 15 02 F6 | 	mov	arg02, local05
01bd4     14 15 82 F1 | 	sub	arg02, local02
01bd8     18 13 02 F6 | 	mov	arg01, local06
01bdc     1C 89 B2 FD | 	call	#__system__Right_S
01be0     FD 12 02 F6 | 	mov	arg01, result1
01be4     1C 8D B2 FD | 	call	#__system__RTrim_S
01be8     FD 12 02 F6 | 	mov	arg01, result1
01bec     54 8C B2 FD | 	call	#__system__LTrim_S
01bf0     52 00 00 FF 
01bf4     4C E5 05 F1 | 	add	objptr, ##42316
01bf8     F2 FA 61 FC | 	wrlong	result1, objptr
01bfc     1B 00 00 FF 
01c00     10 E5 85 F1 | 	sub	objptr, ##14096
01c04     F2 12 02 FB | 	rdlong	arg01, objptr
01c08     37 00 00 FF 
01c0c     3C E4 85 F1 | 	sub	objptr, ##28220
01c10     01 28 86 F1 | 	sub	local02, #1
01c14     14 15 02 F6 | 	mov	arg02, local02
01c18     58 88 B2 FD | 	call	#__system__Left_S
01c1c     FD 12 02 F6 | 	mov	arg01, result1
01c20     E0 8C B2 FD | 	call	#__system__RTrim_S
01c24     FD 12 02 F6 | 	mov	arg01, result1
01c28     18 8C B2 FD | 	call	#__system__LTrim_S
01c2c     37 00 00 FF 
01c30     3C E4 05 F1 | 	add	objptr, ##28220
01c34     F2 FA 61 FC | 	wrlong	result1, objptr
01c38     37 00 00 FF 
01c3c     3C E4 85 F1 | 	sub	objptr, ##28220
01c40     1C 00 90 FD | 	jmp	#LR__0088
01c44                 | LR__0087
01c44     BF 01 00 FF 
01c48     AC 2D 06 F6 | 	mov	local04, ##@LR__5574
01c4c     52 00 00 FF 
01c50     4C E5 05 F1 | 	add	objptr, ##42316
01c54     F2 2C 62 FC | 	wrlong	local04, objptr
01c58     52 00 00 FF 
01c5c     4C E5 85 F1 | 	sub	objptr, ##42316
01c60                 | LR__0088
01c60                 | ' 
01c60                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01c60     37 00 00 FF 
01c64     44 E4 05 F1 | 	add	objptr, ##28228
01c68     F2 2C 02 FB | 	rdlong	local04, objptr
01c6c     37 00 00 FF 
01c70     44 E4 85 F1 | 	sub	objptr, ##28228
01c74     FF FF 7F FF 
01c78     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c7c     40 00 90 5D |  if_ne	jmp	#LR__0089
01c80     52 00 00 FF 
01c84     4C E5 05 F1 | 	add	objptr, ##42316
01c88     F2 12 02 FB | 	rdlong	arg01, objptr
01c8c     52 00 00 FF 
01c90     4C E5 85 F1 | 	sub	objptr, ##42316
01c94     BF 01 00 FF 
01c98     AD 31 06 F6 | 	mov	local06, ##@LR__5575
01c9c     18 15 02 F6 | 	mov	arg02, local06
01ca0     78 67 B2 FD | 	call	#__system___string_cmp
01ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca8     37 00 00 5F 
01cac     44 E4 05 51 |  if_ne	add	objptr, ##28228
01cb0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01cb4     37 00 00 5F 
01cb8     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01cbc     08 01 90 5D |  if_ne	jmp	#LR__0093
01cc0                 | LR__0089
01cc0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01cc0     37 00 00 FF 
01cc4     44 E4 05 F1 | 	add	objptr, ##28228
01cc8     F2 2C 02 FB | 	rdlong	local04, objptr
01ccc     37 00 00 FF 
01cd0     44 E4 85 F1 | 	sub	objptr, ##28228
01cd4     FF FF 7F FF 
01cd8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01cdc     3C 00 90 5D |  if_ne	jmp	#LR__0090
01ce0     52 00 00 FF 
01ce4     4C E5 05 F1 | 	add	objptr, ##42316
01ce8     F2 12 02 FB | 	rdlong	arg01, objptr
01cec     52 00 00 FF 
01cf0     4C E5 85 F1 | 	sub	objptr, ##42316
01cf4     BF 01 00 FF 
01cf8     AE 15 06 F6 | 	mov	arg02, ##@LR__5576
01cfc     1C 67 B2 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     37 00 00 AF 
01d08     44 E4 05 A1 |  if_e	add	objptr, ##28228
01d0c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01d10     37 00 00 AF 
01d14     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01d18     AC 00 90 AD |  if_e	jmp	#LR__0093
01d1c                 | LR__0090
01d1c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01d1c     37 00 00 FF 
01d20     44 E4 05 F1 | 	add	objptr, ##28228
01d24     F2 2C 02 FB | 	rdlong	local04, objptr
01d28     37 00 00 FF 
01d2c     44 E4 85 F1 | 	sub	objptr, ##28228
01d30     04 2C 0E F2 | 	cmp	local04, #4 wz
01d34     3C 00 90 5D |  if_ne	jmp	#LR__0091
01d38     52 00 00 FF 
01d3c     4C E5 05 F1 | 	add	objptr, ##42316
01d40     F2 12 02 FB | 	rdlong	arg01, objptr
01d44     52 00 00 FF 
01d48     4C E5 85 F1 | 	sub	objptr, ##42316
01d4c     BF 01 00 FF 
01d50     AF 15 06 F6 | 	mov	arg02, ##@LR__5577
01d54     C4 66 B2 FD | 	call	#__system___string_cmp
01d58     00 FA 0D F2 | 	cmp	result1, #0 wz
01d5c     37 00 00 5F 
01d60     44 E4 05 51 |  if_ne	add	objptr, ##28228
01d64     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d68     37 00 00 5F 
01d6c     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01d70     54 00 90 5D |  if_ne	jmp	#LR__0093
01d74                 | LR__0091
01d74                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d74     37 00 00 FF 
01d78     44 E4 05 F1 | 	add	objptr, ##28228
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     37 00 00 FF 
01d84     44 E4 85 F1 | 	sub	objptr, ##28228
01d88     04 2C 0E F2 | 	cmp	local04, #4 wz
01d8c     38 00 90 5D |  if_ne	jmp	#LR__0092
01d90     52 00 00 FF 
01d94     4C E5 05 F1 | 	add	objptr, ##42316
01d98     F2 12 02 FB | 	rdlong	arg01, objptr
01d9c     52 00 00 FF 
01da0     4C E5 85 F1 | 	sub	objptr, ##42316
01da4     BF 01 00 FF 
01da8     B0 15 06 F6 | 	mov	arg02, ##@LR__5578
01dac     6C 66 B2 FD | 	call	#__system___string_cmp
01db0     00 FA 0D F2 | 	cmp	result1, #0 wz
01db4     37 00 00 AF 
01db8     44 E4 05 A1 |  if_e	add	objptr, ##28228
01dbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
01dc0     37 00 00 AF 
01dc4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01dc8                 | LR__0092
01dc8                 | LR__0093
01dc8     38 4E 05 F1 | 	add	fp, #56
01dcc     A7 00 68 FC | 	wrlong	#0, fp
01dd0     38 4E 85 F1 | 	sub	fp, #56
01dd4     00 28 06 F6 | 	mov	local02, #0
01dd8     01 42 06 F6 | 	mov	local15, #1
01ddc                 | ' 
01ddc                 | ' ' 1b: find separators
01ddc                 | ' 
01ddc                 | ' 107
01ddc                 | ' separators(0)=0
01ddc                 | ' i=0: j=1
01ddc                 | ' do: 
01ddc                 | LR__0094
01ddc     01 28 06 F1 | 	add	local02, #1
01de0     37 00 00 FF 
01de4     3C E4 05 F1 | 	add	objptr, ##28220
01de8     F2 12 02 FB | 	rdlong	arg01, objptr
01dec     37 00 00 FF 
01df0     3C E4 85 F1 | 	sub	objptr, ##28220
01df4     14 15 02 F6 | 	mov	arg02, local02
01df8     01 16 06 F6 | 	mov	arg03, #1
01dfc     8C 87 B2 FD | 	call	#__system__Mid_S
01e00     FD 44 02 F6 | 	mov	local16, result1
01e04                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01e04     22 13 02 F6 | 	mov	arg01, local16
01e08     94 2E B0 FD | 	call	#_isseparator
01e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
01e10     1C 00 90 AD |  if_e	jmp	#LR__0095
01e14     21 2B 02 F6 | 	mov	local03, local15
01e18     02 2A 66 F0 | 	shl	local03, #2
01e1c     38 4E 05 F1 | 	add	fp, #56
01e20     A7 2A 02 F1 | 	add	local03, fp
01e24     15 29 62 FC | 	wrlong	local02, local03
01e28     01 42 06 F1 | 	add	local15, #1
01e2c     38 4E 85 F1 | 	sub	fp, #56
01e30                 | LR__0095
01e30     52 00 00 FF 
01e34     48 E5 05 F1 | 	add	objptr, ##42312
01e38     F2 2C 02 FB | 	rdlong	local04, objptr
01e3c     52 00 00 FF 
01e40     48 E5 85 F1 | 	sub	objptr, ##42312
01e44     16 29 5A F2 | 	cmps	local02, local04 wcz
01e48     90 FF 9F ED |  if_be	jmp	#LR__0094
01e4c     21 2B 02 F6 | 	mov	local03, local15
01e50     02 2A 66 F0 | 	shl	local03, #2
01e54     38 4E 05 F1 | 	add	fp, #56
01e58     A7 38 02 F6 | 	mov	local10, fp
01e5c     A7 2A 02 F1 | 	add	local03, fp
01e60     15 29 62 FC | 	wrlong	local02, local03
01e64     00 46 06 F6 | 	mov	local17, #0
01e68                 | ' for i=0 to j-1 
01e68     00 28 06 F6 | 	mov	local02, #0
01e6c     21 49 02 F6 | 	mov	local18, local15
01e70     38 4E 85 F1 | 	sub	fp, #56
01e74                 | LR__0096
01e74     24 29 52 F2 | 	cmps	local02, local18 wc
01e78     50 01 90 3D |  if_ae	jmp	#LR__0100
01e7c     14 2B 02 F6 | 	mov	local03, local02
01e80     02 2A 66 F0 | 	shl	local03, #2
01e84     38 4E 05 F1 | 	add	fp, #56
01e88     A7 2A 02 F1 | 	add	local03, fp
01e8c     15 2F 02 FB | 	rdlong	local05, local03
01e90     52 00 00 FF 
01e94     54 E5 05 F1 | 	add	objptr, ##42324
01e98     F2 2E 62 FC | 	wrlong	local05, objptr
01e9c     14 2B 02 F6 | 	mov	local03, local02
01ea0     01 2A 06 F1 | 	add	local03, #1
01ea4     02 2A 66 F0 | 	shl	local03, #2
01ea8     A7 38 02 F6 | 	mov	local10, fp
01eac     A7 2A 02 F1 | 	add	local03, fp
01eb0     15 2F 02 FB | 	rdlong	local05, local03
01eb4     04 E4 05 F1 | 	add	objptr, #4
01eb8     F2 2E 62 FC | 	wrlong	local05, objptr
01ebc                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ebc     04 E4 85 F1 | 	sub	objptr, #4
01ec0     F2 2C 02 FB | 	rdlong	local04, objptr
01ec4     52 00 00 FF 
01ec8     54 E5 85 F1 | 	sub	objptr, ##42324
01ecc     01 2C 56 F2 | 	cmps	local04, #1 wc
01ed0     38 4E 85 F1 | 	sub	fp, #56
01ed4     68 00 90 CD |  if_b	jmp	#LR__0098
01ed8     37 00 00 FF 
01edc     3C E4 05 F1 | 	add	objptr, ##28220
01ee0     F2 12 02 FB | 	rdlong	arg01, objptr
01ee4     1B 00 00 FF 
01ee8     18 E5 05 F1 | 	add	objptr, ##14104
01eec     F2 14 02 FB | 	rdlong	arg02, objptr
01ef0     52 00 00 FF 
01ef4     54 E5 85 F1 | 	sub	objptr, ##42324
01ef8     01 16 06 F6 | 	mov	arg03, #1
01efc     8C 86 B2 FD | 	call	#__system__Mid_S
01f00     FD 4A 02 F6 | 	mov	local19, result1
01f04     BF 01 00 FF 
01f08     B1 15 06 F6 | 	mov	arg02, ##@LR__5579
01f0c     25 13 02 F6 | 	mov	arg01, local19
01f10     08 65 B2 FD | 	call	#__system___string_cmp
01f14     00 FA 0D F2 | 	cmp	result1, #0 wz
01f18     24 00 90 AD |  if_e	jmp	#LR__0097
01f1c     23 39 02 F6 | 	mov	local10, local17
01f20     03 38 66 F0 | 	shl	local10, #3
01f24     35 00 00 FF 
01f28     2C E4 05 F1 | 	add	objptr, ##27180
01f2c     F2 38 02 F1 | 	add	local10, objptr
01f30     1C 4B 62 FC | 	wrlong	local19, local10
01f34     01 46 06 F1 | 	add	local17, #1
01f38     35 00 00 FF 
01f3c     2C E4 85 F1 | 	sub	objptr, ##27180
01f40                 | LR__0097
01f40                 | LR__0098
01f40     37 00 00 FF 
01f44     3C E4 05 F1 | 	add	objptr, ##28220
01f48     F2 12 02 FB | 	rdlong	arg01, objptr
01f4c     1B 00 00 FF 
01f50     18 E5 05 F1 | 	add	objptr, ##14104
01f54     F2 14 02 FB | 	rdlong	arg02, objptr
01f58     01 14 06 F1 | 	add	arg02, #1
01f5c     04 E4 05 F1 | 	add	objptr, #4
01f60     F2 16 02 FB | 	rdlong	arg03, objptr
01f64     04 E4 85 F1 | 	sub	objptr, #4
01f68     F2 3A 02 FB | 	rdlong	local11, objptr
01f6c     52 00 00 FF 
01f70     54 E5 85 F1 | 	sub	objptr, ##42324
01f74     1D 3D 02 F6 | 	mov	local12, local11
01f78     1E 17 82 F1 | 	sub	arg03, local12
01f7c     01 16 86 F1 | 	sub	arg03, #1
01f80     08 86 B2 FD | 	call	#__system__Mid_S
01f84     FD 4A 02 F6 | 	mov	local19, result1
01f88                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f88     BF 01 00 FF 
01f8c     B2 15 06 F6 | 	mov	arg02, ##@LR__5580
01f90     25 13 02 F6 | 	mov	arg01, local19
01f94     84 64 B2 FD | 	call	#__system___string_cmp
01f98     00 FA 0D F2 | 	cmp	result1, #0 wz
01f9c     24 00 90 AD |  if_e	jmp	#LR__0099
01fa0     23 39 02 F6 | 	mov	local10, local17
01fa4     03 38 66 F0 | 	shl	local10, #3
01fa8     35 00 00 FF 
01fac     2C E4 05 F1 | 	add	objptr, ##27180
01fb0     F2 38 02 F1 | 	add	local10, objptr
01fb4     1C 4B 62 FC | 	wrlong	local19, local10
01fb8     01 46 06 F1 | 	add	local17, #1
01fbc     35 00 00 FF 
01fc0     2C E4 85 F1 | 	sub	objptr, ##27180
01fc4                 | LR__0099
01fc4     01 28 06 F1 | 	add	local02, #1
01fc8     A8 FE 9F FD | 	jmp	#LR__0096
01fcc                 | LR__0100
01fcc                 | ' 
01fcc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01fcc                 | ' 
01fcc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01fcc     37 00 00 FF 
01fd0     44 E4 05 F1 | 	add	objptr, ##28228
01fd4     F2 2C 0A FB | 	rdlong	local04, objptr wz
01fd8     37 00 00 FF 
01fdc     44 E4 85 F1 | 	sub	objptr, ##28228
01fe0     37 00 00 5F 
01fe4     44 E4 05 51 |  if_ne	add	objptr, ##28228
01fe8     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01fec     37 00 00 5F 
01ff0     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01ff4     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01ff8     B8 00 90 5D |  if_ne	jmp	#LR__0103
01ffc     35 00 00 FF 
02000     2C E4 05 F1 | 	add	objptr, ##27180
02004     F2 3A 02 FB | 	rdlong	local11, objptr
02008     35 00 00 FF 
0200c     2C E4 85 F1 | 	sub	objptr, ##27180
02010     1D 13 02 F6 | 	mov	arg01, local11
02014     6C 51 B0 FD | 	call	#_isdec
02018     FD 3C 02 F6 | 	mov	local12, result1
0201c     1E 31 22 F6 | 	not	local06, local12
02020     00 30 0E F2 | 	cmp	local06, #0 wz
02024     8C 00 90 AD |  if_e	jmp	#LR__0103
02028     23 29 02 F6 | 	mov	local02, local17
0202c     35 00 00 FF 
02030     2C E4 05 F1 | 	add	objptr, ##27180
02034     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
02038                 | LR__0101
02038     14 2F 02 F6 | 	mov	local05, local02
0203c     01 2E 86 F1 | 	sub	local05, #1
02040     03 2E 66 F0 | 	shl	local05, #3
02044     F2 2E 02 F1 | 	add	local05, objptr
02048     17 2D 02 FB | 	rdlong	local04, local05
0204c     14 31 02 F6 | 	mov	local06, local02
02050     01 30 86 F1 | 	sub	local06, #1
02054     03 30 66 F0 | 	shl	local06, #3
02058     F2 30 02 F1 | 	add	local06, objptr
0205c     04 30 06 F1 | 	add	local06, #4
02060     18 2B 02 FB | 	rdlong	local03, local06
02064     14 31 02 F6 | 	mov	local06, local02
02068     03 30 66 F0 | 	shl	local06, #3
0206c     F2 3C 02 F6 | 	mov	local12, objptr
02070     F2 30 02 F1 | 	add	local06, objptr
02074     18 2D 62 FC | 	wrlong	local04, local06
02078     14 3B 02 F6 | 	mov	local11, local02
0207c     1D 3F 02 F6 | 	mov	local13, local11
02080     03 3E 66 F0 | 	shl	local13, #3
02084     F2 3E 02 F1 | 	add	local13, objptr
02088     04 3E 06 F1 | 	add	local13, #4
0208c     1F 2B 62 FC | 	wrlong	local03, local13
02090     01 28 86 F1 | 	sub	local02, #1
02094     01 28 56 F2 | 	cmps	local02, #1 wc
02098     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0209c                 | LR__0102
0209c     BF 01 00 FF 
020a0     B3 2D 06 F6 | 	mov	local04, ##@LR__5581
020a4     F2 2C 62 FC | 	wrlong	local04, objptr
020a8     35 00 00 FF 
020ac     2C E4 85 F1 | 	sub	objptr, ##27180
020b0     01 46 06 F1 | 	add	local17, #1
020b4                 | LR__0103
020b4     00 28 06 F6 | 	mov	local02, #0
020b8                 | ' 
020b8                 | ' ' 1e : find strings
020b8                 | ' 
020b8                 | ' i=0
020b8                 | ' do
020b8                 | LR__0104
020b8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
020b8     14 2F 02 F6 | 	mov	local05, local02
020bc     03 2E 66 F0 | 	shl	local05, #3
020c0     35 00 00 FF 
020c4     2C E4 05 F1 | 	add	objptr, ##27180
020c8     F2 2E 02 F1 | 	add	local05, objptr
020cc     17 13 02 FB | 	rdlong	arg01, local05
020d0     BF 01 00 FF 
020d4     B5 15 06 F6 | 	mov	arg02, ##@LR__5582
020d8     35 00 00 FF 
020dc     2C E4 85 F1 | 	sub	objptr, ##27180
020e0     38 63 B2 FD | 	call	#__system___string_cmp
020e4     00 FA 0D F2 | 	cmp	result1, #0 wz
020e8     01 28 06 51 |  if_ne	add	local02, #1
020ec     20 01 90 5D |  if_ne	jmp	#LR__0109
020f0     14 4D 02 F6 | 	mov	local20, local02
020f4                 | LR__0105
020f4     14 39 02 F6 | 	mov	local10, local02
020f8     01 38 06 F1 | 	add	local10, #1
020fc     03 38 66 F0 | 	shl	local10, #3
02100     35 00 00 FF 
02104     2C E4 05 F1 | 	add	objptr, ##27180
02108     F2 38 02 F1 | 	add	local10, objptr
0210c     1C 4B 02 FB | 	rdlong	local19, local10
02110     26 39 02 F6 | 	mov	local10, local20
02114     03 38 66 F0 | 	shl	local10, #3
02118     F2 38 02 F1 | 	add	local10, objptr
0211c     26 3B 02 F6 | 	mov	local11, local20
02120     1D 41 02 F6 | 	mov	local14, local11
02124     03 40 66 F0 | 	shl	local14, #3
02128     F2 40 02 F1 | 	add	local14, objptr
0212c     20 13 02 FB | 	rdlong	arg01, local14
02130     25 3D 02 F6 | 	mov	local12, local19
02134     1E 15 02 F6 | 	mov	arg02, local12
02138     35 00 00 FF 
0213c     2C E4 85 F1 | 	sub	objptr, ##27180
02140     0C 63 B2 FD | 	call	#__system___string_concat
02144     1C FB 61 FC | 	wrlong	result1, local10
02148     14 43 02 F6 | 	mov	local15, local02
0214c     01 42 06 F1 | 	add	local15, #1
02150     23 4F 02 F6 | 	mov	local21, local17
02154     01 4E 06 F1 | 	add	local21, #1
02158     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0215c                 | LR__0106
0215c     27 43 52 F2 | 	cmps	local15, local21 wc
02160     70 00 90 3D |  if_ae	jmp	#LR__0108
02164     21 2F 02 F6 | 	mov	local05, local15
02168     01 2E 06 F1 | 	add	local05, #1
0216c     03 2E 66 F0 | 	shl	local05, #3
02170     35 00 00 FF 
02174     2C E4 05 F1 | 	add	objptr, ##27180
02178     F2 2E 02 F1 | 	add	local05, objptr
0217c     17 2D 02 FB | 	rdlong	local04, local05
02180     21 31 02 F6 | 	mov	local06, local15
02184     01 30 06 F1 | 	add	local06, #1
02188     03 30 66 F0 | 	shl	local06, #3
0218c     F2 30 02 F1 | 	add	local06, objptr
02190     04 30 06 F1 | 	add	local06, #4
02194     18 2B 02 FB | 	rdlong	local03, local06
02198     21 31 02 F6 | 	mov	local06, local15
0219c     03 30 66 F0 | 	shl	local06, #3
021a0     F2 3C 02 F6 | 	mov	local12, objptr
021a4     F2 30 02 F1 | 	add	local06, objptr
021a8     18 2D 62 FC | 	wrlong	local04, local06
021ac     21 3B 02 F6 | 	mov	local11, local15
021b0     1D 3F 02 F6 | 	mov	local13, local11
021b4     03 3E 66 F0 | 	shl	local13, #3
021b8     F2 3E 02 F1 | 	add	local13, objptr
021bc     04 3E 06 F1 | 	add	local13, #4
021c0     1F 2B 62 FC | 	wrlong	local03, local13
021c4     01 42 06 F1 | 	add	local15, #1
021c8     35 00 00 FF 
021cc     2C E4 85 F1 | 	sub	objptr, ##27180
021d0     88 FF 9F FD | 	jmp	#LR__0106
021d4                 | LR__0107
021d4                 | LR__0108
021d4     01 46 86 F1 | 	sub	local17, #1
021d8     BF 01 00 FF 
021dc     B7 15 06 F6 | 	mov	arg02, ##@LR__5583
021e0     25 13 02 F6 | 	mov	arg01, local19
021e4     34 62 B2 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     23 29 52 52 |  if_ne	cmps	local02, local17 wc
021f0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
021f4                 | '   if p$<>"""" then k+=1:i+=1
021f4     BF 01 00 FF 
021f8     B9 15 06 F6 | 	mov	arg02, ##@LR__5584
021fc     25 13 02 F6 | 	mov	arg01, local19
02200     18 62 B2 FD | 	call	#__system___string_cmp
02204     00 FA 0D F2 | 	cmp	result1, #0 wz
02208     01 46 06 51 |  if_ne	add	local17, #1
0220c     01 28 06 51 |  if_ne	add	local02, #1
02210                 | LR__0109
02210     23 29 52 F2 | 	cmps	local02, local17 wc
02214     A0 FE 9F CD |  if_b	jmp	#LR__0104
02218     00 28 06 F6 | 	mov	local02, #0
0221c                 | ' 
0221c                 | ' ' 1f : concatenate strings if "" detected between
0221c                 | '  
0221c                 | ' i=0
0221c                 | ' do
0221c                 | LR__0110
0221c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0221c     14 2F 02 F6 | 	mov	local05, local02
02220     03 2E 66 F0 | 	shl	local05, #3
02224     35 00 00 FF 
02228     2C E4 05 F1 | 	add	objptr, ##27180
0222c     F2 30 02 F6 | 	mov	local06, objptr
02230     F2 2E 02 F1 | 	add	local05, objptr
02234     17 13 02 FB | 	rdlong	arg01, local05
02238     01 14 06 F6 | 	mov	arg02, #1
0223c     35 00 00 FF 
02240     2C E4 85 F1 | 	sub	objptr, ##27180
02244     B4 82 B2 FD | 	call	#__system__Right_S
02248     FD 12 02 F6 | 	mov	arg01, result1
0224c     BF 01 00 FF 
02250     BB 15 06 F6 | 	mov	arg02, ##@LR__5585
02254     C4 61 B2 FD | 	call	#__system___string_cmp
02258     00 FA 0D F2 | 	cmp	result1, #0 wz
0225c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02260     14 31 02 F6 | 	mov	local06, local02
02264     01 30 06 F1 | 	add	local06, #1
02268     03 30 66 F0 | 	shl	local06, #3
0226c     35 00 00 FF 
02270     2C E4 05 F1 | 	add	objptr, ##27180
02274     F2 3C 02 F6 | 	mov	local12, objptr
02278     F2 30 02 F1 | 	add	local06, objptr
0227c     18 13 02 FB | 	rdlong	arg01, local06
02280     01 14 06 F6 | 	mov	arg02, #1
02284     35 00 00 FF 
02288     2C E4 85 F1 | 	sub	objptr, ##27180
0228c     E4 81 B2 FD | 	call	#__system__Left_S
02290     FD 12 02 F6 | 	mov	arg01, result1
02294     BF 01 00 FF 
02298     BD 15 06 F6 | 	mov	arg02, ##@LR__5586
0229c     7C 61 B2 FD | 	call	#__system___string_cmp
022a0     00 FA 0D F2 | 	cmp	result1, #0 wz
022a4     34 01 90 5D |  if_ne	jmp	#LR__0116
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     2C E4 05 F1 | 	add	objptr, ##27180
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     14 41 02 F6 | 	mov	local14, local02
022c0     03 40 66 F0 | 	shl	local14, #3
022c4     F2 40 02 F1 | 	add	local14, objptr
022c8     20 31 02 FB | 	rdlong	local06, local14
022cc     14 3F 02 F6 | 	mov	local13, local02
022d0     01 3E 06 F1 | 	add	local13, #1
022d4     03 3E 66 F0 | 	shl	local13, #3
022d8     F2 3E 02 F1 | 	add	local13, objptr
022dc     1F 3D 02 FB | 	rdlong	local12, local13
022e0     14 51 02 F6 | 	mov	local22, local02
022e4     01 50 06 F1 | 	add	local22, #1
022e8     28 53 02 F6 | 	mov	local23, local22
022ec     03 52 66 F0 | 	shl	local23, #3
022f0     F2 54 02 F6 | 	mov	local24, objptr
022f4     F2 52 02 F1 | 	add	local23, objptr
022f8     29 13 02 FB | 	rdlong	arg01, local23
022fc     35 00 00 FF 
02300     2C E4 85 F1 | 	sub	objptr, ##27180
02304     09 33 02 F6 | 	mov	local07, arg01
02308     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0230c                 | LR__0111
0230c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02310     01 32 06 51 |  if_ne	add	local07, #1
02314     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02318                 | LR__0112
02318     09 33 82 F1 | 	sub	local07, arg01
0231c     19 3B 02 F6 | 	mov	local11, local07
02320     01 3A 86 F1 | 	sub	local11, #1
02324     1E 13 02 F6 | 	mov	arg01, local12
02328     1D 15 02 F6 | 	mov	arg02, local11
0232c     CC 81 B2 FD | 	call	#__system__Right_S
02330     FD 3C 02 F6 | 	mov	local12, result1
02334     18 13 02 F6 | 	mov	arg01, local06
02338     1E 15 02 F6 | 	mov	arg02, local12
0233c     10 61 B2 FD | 	call	#__system___string_concat
02340     FD 30 02 F6 | 	mov	local06, result1
02344     1C 31 62 FC | 	wrlong	local06, local10
02348                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02348     14 43 02 F6 | 	mov	local15, local02
0234c     01 42 06 F1 | 	add	local15, #1
02350     23 57 02 F6 | 	mov	local25, local17
02354     01 56 06 F1 | 	add	local25, #1
02358     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0235c                 | LR__0113
0235c     2B 43 52 F2 | 	cmps	local15, local25 wc
02360     70 00 90 3D |  if_ae	jmp	#LR__0115
02364     21 2F 02 F6 | 	mov	local05, local15
02368     01 2E 06 F1 | 	add	local05, #1
0236c     03 2E 66 F0 | 	shl	local05, #3
02370     35 00 00 FF 
02374     2C E4 05 F1 | 	add	objptr, ##27180
02378     F2 2E 02 F1 | 	add	local05, objptr
0237c     17 2D 02 FB | 	rdlong	local04, local05
02380     21 31 02 F6 | 	mov	local06, local15
02384     01 30 06 F1 | 	add	local06, #1
02388     03 30 66 F0 | 	shl	local06, #3
0238c     F2 30 02 F1 | 	add	local06, objptr
02390     04 30 06 F1 | 	add	local06, #4
02394     18 2B 02 FB | 	rdlong	local03, local06
02398     21 31 02 F6 | 	mov	local06, local15
0239c     03 30 66 F0 | 	shl	local06, #3
023a0     F2 3C 02 F6 | 	mov	local12, objptr
023a4     F2 30 02 F1 | 	add	local06, objptr
023a8     18 2D 62 FC | 	wrlong	local04, local06
023ac     21 3B 02 F6 | 	mov	local11, local15
023b0     1D 3F 02 F6 | 	mov	local13, local11
023b4     03 3E 66 F0 | 	shl	local13, #3
023b8     F2 3E 02 F1 | 	add	local13, objptr
023bc     04 3E 06 F1 | 	add	local13, #4
023c0     1F 2B 62 FC | 	wrlong	local03, local13
023c4     01 42 06 F1 | 	add	local15, #1
023c8     35 00 00 FF 
023cc     2C E4 85 F1 | 	sub	objptr, ##27180
023d0     88 FF 9F FD | 	jmp	#LR__0113
023d4                 | LR__0114
023d4                 | LR__0115
023d4     01 28 86 F1 | 	sub	local02, #1
023d8     01 46 86 F1 | 	sub	local17, #1
023dc                 | LR__0116
023dc     01 28 06 F1 | 	add	local02, #1
023e0     23 29 52 F2 | 	cmps	local02, local17 wc
023e4     34 FE 9F CD |  if_b	jmp	#LR__0110
023e8     00 28 06 F6 | 	mov	local02, #0
023ec                 | '  
023ec                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
023ec                 | '  
023ec                 | ' i=0 
023ec                 | ' do
023ec                 | LR__0117
023ec     14 39 02 F6 | 	mov	local10, local02
023f0     03 38 66 F0 | 	shl	local10, #3
023f4     35 00 00 FF 
023f8     2C E4 05 F1 | 	add	objptr, ##27180
023fc     F2 38 02 F1 | 	add	local10, objptr
02400     1C 59 02 FB | 	rdlong	local26, local10
02404     14 39 02 F6 | 	mov	local10, local02
02408     01 38 06 F1 | 	add	local10, #1
0240c     03 38 66 F0 | 	shl	local10, #3
02410     F2 38 02 F1 | 	add	local10, objptr
02414     1C 5B 02 FB | 	rdlong	local27, local10
02418                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02418                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02418     BF 01 00 FF 
0241c     BF 15 06 F6 | 	mov	arg02, ##@LR__5587
02420     2C 13 02 F6 | 	mov	arg01, local26
02424     35 00 00 FF 
02428     2C E4 85 F1 | 	sub	objptr, ##27180
0242c     EC 5F B2 FD | 	call	#__system___string_cmp
02430     00 FA 0D F2 | 	cmp	result1, #0 wz
02434     A8 00 90 AD |  if_e	jmp	#LR__0118
02438     BF 01 00 FF 
0243c     C1 15 06 F6 | 	mov	arg02, ##@LR__5588
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     D4 5F B2 FD | 	call	#__system___string_cmp
02448     FD 2A 0A F6 | 	mov	local03, result1 wz
0244c     90 00 90 AD |  if_e	jmp	#LR__0118
02450     BF 01 00 FF 
02454     C3 31 06 F6 | 	mov	local06, ##@LR__5589
02458     2C 13 02 F6 | 	mov	arg01, local26
0245c     18 15 02 F6 | 	mov	arg02, local06
02460     B8 5F B2 FD | 	call	#__system___string_cmp
02464     00 FA 0D F2 | 	cmp	result1, #0 wz
02468     74 00 90 AD |  if_e	jmp	#LR__0118
0246c     BF 01 00 FF 
02470     C5 3D 06 F6 | 	mov	local12, ##@LR__5590
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     1E 15 02 F6 | 	mov	arg02, local12
0247c     9C 5F B2 FD | 	call	#__system___string_cmp
02480     00 FA 0D F2 | 	cmp	result1, #0 wz
02484     58 00 90 AD |  if_e	jmp	#LR__0118
02488     BF 01 00 FF 
0248c     C7 3B 06 F6 | 	mov	local11, ##@LR__5591
02490     1D 3D 02 F6 | 	mov	local12, local11
02494     2C 13 02 F6 | 	mov	arg01, local26
02498     1E 15 02 F6 | 	mov	arg02, local12
0249c     7C 5F B2 FD | 	call	#__system___string_cmp
024a0     FD 30 0A F6 | 	mov	local06, result1 wz
024a4     38 00 90 AD |  if_e	jmp	#LR__0118
024a8     BF 01 00 FF 
024ac     C9 3B 06 F6 | 	mov	local11, ##@LR__5592
024b0     2C 13 02 F6 | 	mov	arg01, local26
024b4     1D 15 02 F6 | 	mov	arg02, local11
024b8     60 5F B2 FD | 	call	#__system___string_cmp
024bc     FD 3C 0A F6 | 	mov	local12, result1 wz
024c0     1C 00 90 AD |  if_e	jmp	#LR__0118
024c4     BF 01 00 FF 
024c8     CB 41 06 F6 | 	mov	local14, ##@LR__5593
024cc     2C 13 02 F6 | 	mov	arg01, local26
024d0     20 15 02 F6 | 	mov	arg02, local14
024d4     44 5F B2 FD | 	call	#__system___string_cmp
024d8     FD 3A 0A F6 | 	mov	local11, result1 wz
024dc     20 00 90 5D |  if_ne	jmp	#LR__0119
024e0                 | LR__0118
024e0     BF 01 00 FF 
024e4     CD 5D 06 F6 | 	mov	local28, ##@LR__5594
024e8     2E 3F 02 F6 | 	mov	local13, local28
024ec     2D 13 02 F6 | 	mov	arg01, local27
024f0     1F 15 02 F6 | 	mov	arg02, local13
024f4     24 5F B2 FD | 	call	#__system___string_cmp
024f8     FD 40 0A F6 | 	mov	local14, result1 wz
024fc     B8 00 90 AD |  if_e	jmp	#LR__0122
02500                 | LR__0119
02500     BF 01 00 FF 
02504     CF 5D 06 F6 | 	mov	local28, ##@LR__5595
02508     2C 13 02 F6 | 	mov	arg01, local26
0250c     2E 15 02 F6 | 	mov	arg02, local28
02510     08 5F B2 FD | 	call	#__system___string_cmp
02514     FD 3E 0A F6 | 	mov	local13, result1 wz
02518     20 00 90 5D |  if_ne	jmp	#LR__0120
0251c     BF 01 00 FF 
02520     D1 53 06 F6 | 	mov	local23, ##@LR__5596
02524     29 51 02 F6 | 	mov	local22, local23
02528     2D 13 02 F6 | 	mov	arg01, local27
0252c     28 15 02 F6 | 	mov	arg02, local22
02530     E8 5E B2 FD | 	call	#__system___string_cmp
02534     FD 5C 0A F6 | 	mov	local28, result1 wz
02538     7C 00 90 AD |  if_e	jmp	#LR__0122
0253c                 | LR__0120
0253c     BF 01 00 FF 
02540     D3 53 06 F6 | 	mov	local23, ##@LR__5597
02544     2C 13 02 F6 | 	mov	arg01, local26
02548     29 15 02 F6 | 	mov	arg02, local23
0254c     CC 5E B2 FD | 	call	#__system___string_cmp
02550     FD 50 0A F6 | 	mov	local22, result1 wz
02554     20 00 90 5D |  if_ne	jmp	#LR__0121
02558     BF 01 00 FF 
0255c     D5 5F 06 F6 | 	mov	local29, ##@LR__5598
02560     2F 55 02 F6 | 	mov	local24, local29
02564     2D 13 02 F6 | 	mov	arg01, local27
02568     2A 15 02 F6 | 	mov	arg02, local24
0256c     AC 5E B2 FD | 	call	#__system___string_cmp
02570     FD 52 0A F6 | 	mov	local23, result1 wz
02574     40 00 90 AD |  if_e	jmp	#LR__0122
02578                 | LR__0121
02578     BF 01 00 FF 
0257c     D7 61 06 F6 | 	mov	local30, ##@LR__5599
02580     30 5F 02 F6 | 	mov	local29, local30
02584     2C 13 02 F6 | 	mov	arg01, local26
02588     2F 15 02 F6 | 	mov	arg02, local29
0258c     8C 5E B2 FD | 	call	#__system___string_cmp
02590     FD 54 0A F6 | 	mov	local24, result1 wz
02594     F0 00 90 5D |  if_ne	jmp	#LR__0126
02598     BF 01 00 FF 
0259c     D9 63 06 F6 | 	mov	local31, ##@LR__5600
025a0     31 61 02 F6 | 	mov	local30, local31
025a4     2D 13 02 F6 | 	mov	arg01, local27
025a8     30 15 02 F6 | 	mov	arg02, local30
025ac     6C 5E B2 FD | 	call	#__system___string_cmp
025b0     FD 5E 0A F6 | 	mov	local29, result1 wz
025b4     D0 00 90 5D |  if_ne	jmp	#LR__0126
025b8                 | LR__0122
025b8     14 39 02 F6 | 	mov	local10, local02
025bc     03 38 66 F0 | 	shl	local10, #3
025c0     35 00 00 FF 
025c4     2C E4 05 F1 | 	add	objptr, ##27180
025c8     F2 38 02 F1 | 	add	local10, objptr
025cc     2D 3D 02 F6 | 	mov	local12, local27
025d0     2C 13 02 F6 | 	mov	arg01, local26
025d4     1E 15 02 F6 | 	mov	arg02, local12
025d8     35 00 00 FF 
025dc     2C E4 85 F1 | 	sub	objptr, ##27180
025e0     6C 5E B2 FD | 	call	#__system___string_concat
025e4     1C FB 61 FC | 	wrlong	result1, local10
025e8                 | '     lparts(i).part$=s1$+s2$
025e8                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
025e8     14 43 02 F6 | 	mov	local15, local02
025ec     01 42 06 F1 | 	add	local15, #1
025f0     23 65 02 F6 | 	mov	local32, local17
025f4     01 64 06 F1 | 	add	local32, #1
025f8     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
025fc                 | LR__0123
025fc     32 43 52 F2 | 	cmps	local15, local32 wc
02600     7C 00 90 3D |  if_ae	jmp	#LR__0125
02604     21 2F 02 F6 | 	mov	local05, local15
02608     01 2E 06 F1 | 	add	local05, #1
0260c     03 2E 66 F0 | 	shl	local05, #3
02610     35 00 00 FF 
02614     2C E4 05 F1 | 	add	objptr, ##27180
02618     F2 2E 02 F1 | 	add	local05, objptr
0261c     17 2D 02 FB | 	rdlong	local04, local05
02620     21 31 02 F6 | 	mov	local06, local15
02624     01 30 06 F1 | 	add	local06, #1
02628     03 30 66 F0 | 	shl	local06, #3
0262c     F2 30 02 F1 | 	add	local06, objptr
02630     04 30 06 F1 | 	add	local06, #4
02634     18 2B 02 FB | 	rdlong	local03, local06
02638     21 31 02 F6 | 	mov	local06, local15
0263c     03 30 66 F0 | 	shl	local06, #3
02640     F2 3C 02 F6 | 	mov	local12, objptr
02644     F2 30 02 F1 | 	add	local06, objptr
02648     18 2D 62 FC | 	wrlong	local04, local06
0264c     21 3B 02 F6 | 	mov	local11, local15
02650     1D 41 02 F6 | 	mov	local14, local11
02654     20 3F 02 F6 | 	mov	local13, local14
02658     03 3E 66 F0 | 	shl	local13, #3
0265c     F2 5C 02 F6 | 	mov	local28, objptr
02660     F2 3E 02 F1 | 	add	local13, objptr
02664     04 3E 06 F1 | 	add	local13, #4
02668     1F 2B 62 FC | 	wrlong	local03, local13
0266c     04 3E 86 F1 | 	sub	local13, #4
02670     01 42 06 F1 | 	add	local15, #1
02674     35 00 00 FF 
02678     2C E4 85 F1 | 	sub	objptr, ##27180
0267c     7C FF 9F FD | 	jmp	#LR__0123
02680                 | LR__0124
02680                 | LR__0125
02680     01 28 86 F1 | 	sub	local02, #1
02684     01 46 86 F1 | 	sub	local17, #1
02688                 | LR__0126
02688     01 28 06 F1 | 	add	local02, #1
0268c     23 29 52 F2 | 	cmps	local02, local17 wc
02690     58 FD 9F CD |  if_b	jmp	#LR__0117
02694                 | '  
02694                 | ' ' 1h : now remove parts that are spaces
02694                 | ' 
02694                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02694     00 28 06 F6 | 	mov	local02, #0
02698     23 67 02 F6 | 	mov	local33, local17
0269c     01 66 06 F1 | 	add	local33, #1
026a0                 | LR__0127
026a0     33 29 52 F2 | 	cmps	local02, local33 wc
026a4     50 00 90 3D |  if_ae	jmp	#LR__0128
026a8     14 39 02 F6 | 	mov	local10, local02
026ac     03 38 66 F0 | 	shl	local10, #3
026b0     35 00 00 FF 
026b4     2C E4 05 F1 | 	add	objptr, ##27180
026b8     F2 38 02 F1 | 	add	local10, objptr
026bc     14 3D 02 F6 | 	mov	local12, local02
026c0     1E 3B 02 F6 | 	mov	local11, local12
026c4     1D 41 02 F6 | 	mov	local14, local11
026c8     03 40 66 F0 | 	shl	local14, #3
026cc     F2 3E 02 F6 | 	mov	local13, objptr
026d0     F2 40 02 F1 | 	add	local14, objptr
026d4     20 13 02 FB | 	rdlong	arg01, local14
026d8     35 00 00 FF 
026dc     2C E4 85 F1 | 	sub	objptr, ##27180
026e0     20 82 B2 FD | 	call	#__system__RTrim_S
026e4     FD 12 02 F6 | 	mov	arg01, result1
026e8     58 81 B2 FD | 	call	#__system__LTrim_S
026ec     1C FB 61 FC | 	wrlong	result1, local10
026f0     01 28 06 F1 | 	add	local02, #1
026f4     A8 FF 9F FD | 	jmp	#LR__0127
026f8                 | LR__0128
026f8     00 28 06 F6 | 	mov	local02, #0
026fc     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02700                 | ' i=0
02700                 | ' do 
02700                 | LR__0129
02700                 | '   if len(lparts(i).part$)=0 then 
02700     14 2F 02 F6 | 	mov	local05, local02
02704     03 2E 66 F0 | 	shl	local05, #3
02708     35 00 00 FF 
0270c     2C E4 05 F1 | 	add	objptr, ##27180
02710     F2 2E 02 F1 | 	add	local05, objptr
02714     17 13 02 FB | 	rdlong	arg01, local05
02718     35 00 00 FF 
0271c     2C E4 85 F1 | 	sub	objptr, ##27180
02720     09 33 02 F6 | 	mov	local07, arg01
02724                 | LR__0130
02724     19 FB C9 FA | 	rdbyte	result1, local07 wz
02728     01 32 06 51 |  if_ne	add	local07, #1
0272c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02730     09 33 8A F1 | 	sub	local07, arg01 wz
02734     C4 00 90 5D |  if_ne	jmp	#LR__0134
02738                 | '     if i=k-1 then k-=1  :  exit
02738     23 2D 02 F6 | 	mov	local04, local17
0273c     01 2C 86 F1 | 	sub	local04, #1
02740     16 29 0A F2 | 	cmp	local02, local04 wz
02744     01 46 86 A1 |  if_e	sub	local17, #1
02748     C4 00 90 AD |  if_e	jmp	#LR__0136
0274c                 | '     if i<k-1 then 
0274c     23 2D 02 F6 | 	mov	local04, local17
02750     01 2C 86 F1 | 	sub	local04, #1
02754     16 29 52 F2 | 	cmps	local02, local04 wc
02758     A0 00 90 3D |  if_ae	jmp	#LR__0133
0275c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0275c     14 43 02 F6 | 	mov	local15, local02
02760     23 69 02 F6 | 	mov	local34, local17
02764     01 68 86 F1 | 	sub	local34, #1
02768                 | LR__0131
02768     34 43 52 F2 | 	cmps	local15, local34 wc
0276c     80 00 90 3D |  if_ae	jmp	#LR__0132
02770     21 2F 02 F6 | 	mov	local05, local15
02774     01 2E 06 F1 | 	add	local05, #1
02778     03 2E 66 F0 | 	shl	local05, #3
0277c     35 00 00 FF 
02780     2C E4 05 F1 | 	add	objptr, ##27180
02784     F2 2E 02 F1 | 	add	local05, objptr
02788     17 2D 02 FB | 	rdlong	local04, local05
0278c     21 31 02 F6 | 	mov	local06, local15
02790     01 30 06 F1 | 	add	local06, #1
02794     03 30 66 F0 | 	shl	local06, #3
02798     F2 30 02 F1 | 	add	local06, objptr
0279c     04 30 06 F1 | 	add	local06, #4
027a0     18 2B 02 FB | 	rdlong	local03, local06
027a4     21 39 02 F6 | 	mov	local10, local15
027a8     1C 31 02 F6 | 	mov	local06, local10
027ac     03 30 66 F0 | 	shl	local06, #3
027b0     F2 3C 02 F6 | 	mov	local12, objptr
027b4     F2 30 02 F1 | 	add	local06, objptr
027b8     18 2D 62 FC | 	wrlong	local04, local06
027bc     21 3B 02 F6 | 	mov	local11, local15
027c0     1D 41 02 F6 | 	mov	local14, local11
027c4     20 3F 02 F6 | 	mov	local13, local14
027c8     03 3E 66 F0 | 	shl	local13, #3
027cc     F2 5C 02 F6 | 	mov	local28, objptr
027d0     F2 3E 02 F1 | 	add	local13, objptr
027d4     04 3E 06 F1 | 	add	local13, #4
027d8     1F 2B 62 FC | 	wrlong	local03, local13
027dc     04 3E 86 F1 | 	sub	local13, #4
027e0     01 42 06 F1 | 	add	local15, #1
027e4     35 00 00 FF 
027e8     2C E4 85 F1 | 	sub	objptr, ##27180
027ec     78 FF 9F FD | 	jmp	#LR__0131
027f0                 | LR__0132
027f0     01 46 86 F1 | 	sub	local17, #1
027f4                 | '       if i>0 then i-=1 
027f4     01 28 56 F2 | 	cmps	local02, #1 wc
027f8     01 28 86 31 |  if_ae	sub	local02, #1
027fc                 | LR__0133
027fc                 | LR__0134
027fc     01 28 06 F1 | 	add	local02, #1
02800     23 2D 02 F6 | 	mov	local04, local17
02804     01 2C 86 F1 | 	sub	local04, #1
02808     16 29 5A F2 | 	cmps	local02, local04 wcz
0280c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02810                 | LR__0135
02810                 | LR__0136
02810                 | ' 
02810                 | ' ' 1i: lowercase all that is not a string
02810                 | ' 
02810                 | ' for j=0 to k-1
02810     00 42 06 F6 | 	mov	local15, #0
02814     23 6B 02 F6 | 	mov	local35, local17
02818                 | LR__0137
02818     35 43 52 F2 | 	cmps	local15, local35 wc
0281c     CC 00 90 3D |  if_ae	jmp	#LR__0140
02820                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02820     21 2F 02 F6 | 	mov	local05, local15
02824     03 2E 66 F0 | 	shl	local05, #3
02828     35 00 00 FF 
0282c     2C E4 05 F1 | 	add	objptr, ##27180
02830     F2 2E 02 F1 | 	add	local05, objptr
02834     17 13 02 FB | 	rdlong	arg01, local05
02838     01 14 06 F6 | 	mov	arg02, #1
0283c     35 00 00 FF 
02840     2C E4 85 F1 | 	sub	objptr, ##27180
02844     2C 7C B2 FD | 	call	#__system__Left_S
02848     FD 12 02 F6 | 	mov	arg01, result1
0284c     BF 01 00 FF 
02850     DB 15 06 F6 | 	mov	arg02, ##@LR__5601
02854     C4 5B B2 FD | 	call	#__system___string_cmp
02858     00 FA 0D F2 | 	cmp	result1, #0 wz
0285c     44 00 90 5D |  if_ne	jmp	#LR__0138
02860     21 31 02 F6 | 	mov	local06, local15
02864     03 30 66 F0 | 	shl	local06, #3
02868     35 00 00 FF 
0286c     2C E4 05 F1 | 	add	objptr, ##27180
02870     F2 3C 02 F6 | 	mov	local12, objptr
02874     F2 30 02 F1 | 	add	local06, objptr
02878     18 13 02 FB | 	rdlong	arg01, local06
0287c     01 14 06 F6 | 	mov	arg02, #1
02880     35 00 00 FF 
02884     2C E4 85 F1 | 	sub	objptr, ##27180
02888     70 7C B2 FD | 	call	#__system__Right_S
0288c     FD 12 02 F6 | 	mov	arg01, result1
02890     BF 01 00 FF 
02894     DD 15 06 F6 | 	mov	arg02, ##@LR__5602
02898     80 5B B2 FD | 	call	#__system___string_cmp
0289c     00 FA 0D F2 | 	cmp	result1, #0 wz
028a0     40 00 90 AD |  if_e	jmp	#LR__0139
028a4                 | LR__0138
028a4     21 39 02 F6 | 	mov	local10, local15
028a8     03 38 66 F0 | 	shl	local10, #3
028ac     35 00 00 FF 
028b0     2C E4 05 F1 | 	add	objptr, ##27180
028b4     F2 38 02 F1 | 	add	local10, objptr
028b8     21 3D 02 F6 | 	mov	local12, local15
028bc     1E 3B 02 F6 | 	mov	local11, local12
028c0     1D 41 02 F6 | 	mov	local14, local11
028c4     03 40 66 F0 | 	shl	local14, #3
028c8     F2 3E 02 F6 | 	mov	local13, objptr
028cc     F2 40 02 F1 | 	add	local14, objptr
028d0     20 13 02 FB | 	rdlong	arg01, local14
028d4     35 00 00 FF 
028d8     2C E4 85 F1 | 	sub	objptr, ##27180
028dc     A4 7E B2 FD | 	call	#__system__LCase_S
028e0     1C FB 61 FC | 	wrlong	result1, local10
028e4                 | LR__0139
028e4     01 42 06 F1 | 	add	local15, #1
028e8     2C FF 9F FD | 	jmp	#LR__0137
028ec                 | LR__0140
028ec                 | ' 
028ec                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
028ec                 | ' 
028ec                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
028ec     00 28 06 F6 | 	mov	local02, #0
028f0     23 6D 02 F6 | 	mov	local36, local17
028f4     01 6C 06 F1 | 	add	local36, #1
028f8     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
028fc                 | LR__0141
028fc     36 29 52 F2 | 	cmps	local02, local36 wc
02900     30 00 90 3D |  if_ae	jmp	#LR__0143
02904     14 39 02 F6 | 	mov	local10, local02
02908     03 38 66 F0 | 	shl	local10, #3
0290c     35 00 00 FF 
02910     2C E4 05 F1 | 	add	objptr, ##27180
02914     F2 38 02 F1 | 	add	local10, objptr
02918     04 38 06 F1 | 	add	local10, #4
0291c     FF FF FF FF 
02920     1C FF 6B FC | 	wrlong	##-1, local10
02924     01 28 06 F1 | 	add	local02, #1
02928     35 00 00 FF 
0292c     2C E4 85 F1 | 	sub	objptr, ##27180
02930     C8 FF 9F FD | 	jmp	#LR__0141
02934                 | LR__0142
02934                 | LR__0143
02934                 | ' 
02934                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02934     35 00 00 FF 
02938     2C E4 05 F1 | 	add	objptr, ##27180
0293c     F2 12 02 FB | 	rdlong	arg01, objptr
02940     35 00 00 FF 
02944     2C E4 85 F1 | 	sub	objptr, ##27180
02948     38 48 B0 FD | 	call	#_isdec
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     01 6E 06 56 |  if_ne	mov	local37, #1
02954     00 6E 06 A6 |  if_e	mov	local37, #0
02958                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02958     35 00 00 FF 
0295c     2C E4 05 F1 | 	add	objptr, ##27180
02960     F2 12 02 FB | 	rdlong	arg01, objptr
02964     35 00 00 FF 
02968     2C E4 85 F1 | 	sub	objptr, ##27180
0296c     BF 01 00 FF 
02970     DF 15 06 F6 | 	mov	arg02, ##@LR__5603
02974     A4 5A B2 FD | 	call	#__system___string_cmp
02978     00 FA 0D F2 | 	cmp	result1, #0 wz
0297c     01 6E 06 A6 |  if_e	mov	local37, #1
02980     00 28 06 F6 | 	mov	local02, #0
02984                 | ' i=0 : do 
02984                 | LR__0144
02984                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02984     14 2F 02 F6 | 	mov	local05, local02
02988     03 2E 66 F0 | 	shl	local05, #3
0298c     35 00 00 FF 
02990     2C E4 05 F1 | 	add	objptr, ##27180
02994     F2 2E 02 F1 | 	add	local05, objptr
02998     17 13 02 FB | 	rdlong	arg01, local05
0299c     BF 01 00 FF 
029a0     E4 15 06 F6 | 	mov	arg02, ##@LR__5604
029a4     35 00 00 FF 
029a8     2C E4 85 F1 | 	sub	objptr, ##27180
029ac     6C 5A B2 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     0C 00 90 AD |  if_e	jmp	#LR__0145
029b8     01 28 06 F1 | 	add	local02, #1
029bc     23 29 5A F2 | 	cmps	local02, local17 wcz
029c0     C0 FF 9F ED |  if_be	jmp	#LR__0144
029c4                 | LR__0145
029c4                 | ' if i<k then addptr=i+1	 							' then found
029c4     23 29 52 F2 | 	cmps	local02, local17 wc
029c8     14 6F 02 C6 |  if_b	mov	local37, local02
029cc     01 6E 06 C1 |  if_b	add	local37, #1
029d0     35 00 00 FF 
029d4     2C E4 05 F1 | 	add	objptr, ##27180
029d8                 | ' lp$=lparts(addptr).part$ 
029d8                 | ' 
029d8                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
029d8     37 2F 02 F6 | 	mov	local05, local37
029dc     03 2E 66 F0 | 	shl	local05, #3
029e0     F2 2E 02 F1 | 	add	local05, objptr
029e4     17 13 02 FB | 	rdlong	arg01, local05
029e8     01 14 06 F6 | 	mov	arg02, #1
029ec     35 00 00 FF 
029f0     2C E4 85 F1 | 	sub	objptr, ##27180
029f4     7C 7A B2 FD | 	call	#__system__Left_S
029f8     FD 12 02 F6 | 	mov	arg01, result1
029fc     BF 01 00 FF 
02a00     E9 15 06 F6 | 	mov	arg02, ##@LR__5605
02a04     14 5A B2 FD | 	call	#__system___string_cmp
02a08     00 FA 0D F2 | 	cmp	result1, #0 wz
02a0c     60 01 90 5D |  if_ne	jmp	#LR__0152
02a10     37 31 02 F6 | 	mov	local06, local37
02a14     03 30 66 F0 | 	shl	local06, #3
02a18     35 00 00 FF 
02a1c     2C E4 05 F1 | 	add	objptr, ##27180
02a20     F2 30 02 F1 | 	add	local06, objptr
02a24     18 13 02 FB | 	rdlong	arg01, local06
02a28     35 00 00 FF 
02a2c     2C E4 85 F1 | 	sub	objptr, ##27180
02a30     09 33 02 F6 | 	mov	local07, arg01
02a34     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02a38                 | LR__0146
02a38     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a3c     01 32 06 51 |  if_ne	add	local07, #1
02a40     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02a44                 | LR__0147
02a44     09 33 82 F1 | 	sub	local07, arg01
02a48     02 32 56 F2 | 	cmps	local07, #2 wc
02a4c     20 01 90 CD |  if_b	jmp	#LR__0152
02a50     01 46 06 F1 | 	add	local17, #1
02a54                 | '   k+=1
02a54                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02a54     23 29 02 F6 | 	mov	local02, local17
02a58     37 71 02 F6 | 	mov	local38, local37
02a5c     01 70 06 F1 | 	add	local38, #1
02a60     35 00 00 FF 
02a64     2C E4 05 F1 | 	add	objptr, ##27180
02a68     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a6c                 | LR__0148
02a6c     14 2F 02 F6 | 	mov	local05, local02
02a70     01 2E 86 F1 | 	sub	local05, #1
02a74     03 2E 66 F0 | 	shl	local05, #3
02a78     F2 2E 02 F1 | 	add	local05, objptr
02a7c     17 2D 02 FB | 	rdlong	local04, local05
02a80     14 31 02 F6 | 	mov	local06, local02
02a84     01 30 86 F1 | 	sub	local06, #1
02a88     03 30 66 F0 | 	shl	local06, #3
02a8c     F2 30 02 F1 | 	add	local06, objptr
02a90     04 30 06 F1 | 	add	local06, #4
02a94     18 2B 02 FB | 	rdlong	local03, local06
02a98     14 31 02 F6 | 	mov	local06, local02
02a9c     03 30 66 F0 | 	shl	local06, #3
02aa0     F2 30 02 F1 | 	add	local06, objptr
02aa4     18 2D 62 FC | 	wrlong	local04, local06
02aa8     14 3F 02 F6 | 	mov	local13, local02
02aac     03 3E 66 F0 | 	shl	local13, #3
02ab0     F2 3E 02 F1 | 	add	local13, objptr
02ab4     04 3E 06 F1 | 	add	local13, #4
02ab8     1F 2B 62 FC | 	wrlong	local03, local13
02abc     01 28 86 F1 | 	sub	local02, #1
02ac0     38 29 52 F2 | 	cmps	local02, local38 wc
02ac4     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02ac8                 | LR__0149
02ac8     37 39 02 F6 | 	mov	local10, local37
02acc     01 38 06 F1 | 	add	local10, #1
02ad0     03 38 66 F0 | 	shl	local10, #3
02ad4     F2 38 02 F1 | 	add	local10, objptr
02ad8     37 41 02 F6 | 	mov	local14, local37
02adc     03 40 66 F0 | 	shl	local14, #3
02ae0     F2 40 02 F1 | 	add	local14, objptr
02ae4     20 31 02 FB | 	rdlong	local06, local14
02ae8     37 3F 02 F6 | 	mov	local13, local37
02aec     1F 5D 02 F6 | 	mov	local28, local13
02af0     2E 51 02 F6 | 	mov	local22, local28
02af4     03 50 66 F0 | 	shl	local22, #3
02af8     F2 52 02 F6 | 	mov	local23, objptr
02afc     F2 50 02 F1 | 	add	local22, objptr
02b00     28 13 02 FB | 	rdlong	arg01, local22
02b04     35 00 00 FF 
02b08     2C E4 85 F1 | 	sub	objptr, ##27180
02b0c     09 33 02 F6 | 	mov	local07, arg01
02b10     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b14                 | LR__0150
02b14     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b18     01 32 06 51 |  if_ne	add	local07, #1
02b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b20                 | LR__0151
02b20     09 33 82 F1 | 	sub	local07, arg01
02b24     19 41 02 F6 | 	mov	local14, local07
02b28     20 3B 02 F6 | 	mov	local11, local14
02b2c     01 3A 86 F1 | 	sub	local11, #1
02b30     1D 3D 02 F6 | 	mov	local12, local11
02b34     18 13 02 F6 | 	mov	arg01, local06
02b38     1E 15 02 F6 | 	mov	arg02, local12
02b3c     BC 79 B2 FD | 	call	#__system__Right_S
02b40     1C FB 61 FC | 	wrlong	result1, local10
02b44     37 39 02 F6 | 	mov	local10, local37
02b48     03 38 66 F0 | 	shl	local10, #3
02b4c     35 00 00 FF 
02b50     2C E4 05 F1 | 	add	objptr, ##27180
02b54     F2 38 02 F1 | 	add	local10, objptr
02b58     BF 01 00 FF 
02b5c     EB 31 06 F6 | 	mov	local06, ##@LR__5606
02b60     1C 31 62 FC | 	wrlong	local06, local10
02b64     35 00 00 FF 
02b68     2C E4 85 F1 | 	sub	objptr, ##27180
02b6c     A8 01 90 FD | 	jmp	#LR__0160
02b70                 | LR__0152
02b70     37 31 02 F6 | 	mov	local06, local37
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     35 00 00 FF 
02b7c     2C E4 05 F1 | 	add	objptr, ##27180
02b80     F2 3C 02 F6 | 	mov	local12, objptr
02b84     F2 30 02 F1 | 	add	local06, objptr
02b88     18 15 02 FB | 	rdlong	arg02, local06
02b8c     BF 01 00 FF 
02b90     ED 17 06 F6 | 	mov	arg03, ##@LR__5607
02b94     01 12 06 F6 | 	mov	arg01, #1
02b98     35 00 00 FF 
02b9c     2C E4 85 F1 | 	sub	objptr, ##27180
02ba0     18 7E B2 FD | 	call	#__system__Instr
02ba4     FD 72 02 F6 | 	mov	local39, result1
02ba8                 | ' 
02ba8                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02ba8                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02ba8     01 72 56 F2 | 	cmps	local39, #1 wc
02bac     68 01 90 CD |  if_b	jmp	#LR__0159
02bb0     37 2F 02 F6 | 	mov	local05, local37
02bb4     03 2E 66 F0 | 	shl	local05, #3
02bb8     35 00 00 FF 
02bbc     2C E4 05 F1 | 	add	objptr, ##27180
02bc0     F2 2E 02 F1 | 	add	local05, objptr
02bc4     17 13 02 FB | 	rdlong	arg01, local05
02bc8     35 00 00 FF 
02bcc     2C E4 85 F1 | 	sub	objptr, ##27180
02bd0     09 33 02 F6 | 	mov	local07, arg01
02bd4     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02bd8                 | LR__0153
02bd8     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bdc     01 32 06 51 |  if_ne	add	local07, #1
02be0     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02be4                 | LR__0154
02be4     09 33 82 F1 | 	sub	local07, arg01
02be8     19 73 52 F2 | 	cmps	local39, local07 wc
02bec     28 01 90 3D |  if_ae	jmp	#LR__0159
02bf0     01 46 06 F1 | 	add	local17, #1
02bf4                 | '   k+=1
02bf4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02bf4     23 29 02 F6 | 	mov	local02, local17
02bf8     37 75 02 F6 | 	mov	local40, local37
02bfc     01 74 06 F1 | 	add	local40, #1
02c00     35 00 00 FF 
02c04     2C E4 05 F1 | 	add	objptr, ##27180
02c08     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c0c                 | LR__0155
02c0c     14 2F 02 F6 | 	mov	local05, local02
02c10     01 2E 86 F1 | 	sub	local05, #1
02c14     03 2E 66 F0 | 	shl	local05, #3
02c18     F2 2E 02 F1 | 	add	local05, objptr
02c1c     17 2D 02 FB | 	rdlong	local04, local05
02c20     14 31 02 F6 | 	mov	local06, local02
02c24     01 30 86 F1 | 	sub	local06, #1
02c28     03 30 66 F0 | 	shl	local06, #3
02c2c     F2 30 02 F1 | 	add	local06, objptr
02c30     04 30 06 F1 | 	add	local06, #4
02c34     18 2B 02 FB | 	rdlong	local03, local06
02c38     14 31 02 F6 | 	mov	local06, local02
02c3c     03 30 66 F0 | 	shl	local06, #3
02c40     F2 30 02 F1 | 	add	local06, objptr
02c44     18 2D 62 FC | 	wrlong	local04, local06
02c48     14 3F 02 F6 | 	mov	local13, local02
02c4c     03 3E 66 F0 | 	shl	local13, #3
02c50     F2 3E 02 F1 | 	add	local13, objptr
02c54     04 3E 06 F1 | 	add	local13, #4
02c58     1F 2B 62 FC | 	wrlong	local03, local13
02c5c     01 28 86 F1 | 	sub	local02, #1
02c60     3A 29 52 F2 | 	cmps	local02, local40 wc
02c64     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c68                 | LR__0156
02c68     37 39 02 F6 | 	mov	local10, local37
02c6c     01 38 06 F1 | 	add	local10, #1
02c70     03 38 66 F0 | 	shl	local10, #3
02c74     F2 38 02 F1 | 	add	local10, objptr
02c78     37 41 02 F6 | 	mov	local14, local37
02c7c     03 40 66 F0 | 	shl	local14, #3
02c80     F2 40 02 F1 | 	add	local14, objptr
02c84     20 31 02 FB | 	rdlong	local06, local14
02c88     37 5D 02 F6 | 	mov	local28, local37
02c8c     2E 51 02 F6 | 	mov	local22, local28
02c90     03 50 66 F0 | 	shl	local22, #3
02c94     F2 52 02 F6 | 	mov	local23, objptr
02c98     F2 50 02 F1 | 	add	local22, objptr
02c9c     28 13 02 FB | 	rdlong	arg01, local22
02ca0     35 00 00 FF 
02ca4     2C E4 85 F1 | 	sub	objptr, ##27180
02ca8     09 33 02 F6 | 	mov	local07, arg01
02cac     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02cb0                 | LR__0157
02cb0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02cb4     01 32 06 51 |  if_ne	add	local07, #1
02cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02cbc                 | LR__0158
02cbc     09 33 82 F1 | 	sub	local07, arg01
02cc0     19 15 02 F6 | 	mov	arg02, local07
02cc4     39 15 82 F1 | 	sub	arg02, local39
02cc8     18 13 02 F6 | 	mov	arg01, local06
02ccc     2C 78 B2 FD | 	call	#__system__Right_S
02cd0     1C FB 61 FC | 	wrlong	result1, local10
02cd4     37 39 02 F6 | 	mov	local10, local37
02cd8     03 38 66 F0 | 	shl	local10, #3
02cdc     35 00 00 FF 
02ce0     2C E4 05 F1 | 	add	objptr, ##27180
02ce4     F2 38 02 F1 | 	add	local10, objptr
02ce8     37 3B 02 F6 | 	mov	local11, local37
02cec     1D 41 02 F6 | 	mov	local14, local11
02cf0     03 40 66 F0 | 	shl	local14, #3
02cf4     F2 3E 02 F6 | 	mov	local13, objptr
02cf8     F2 40 02 F1 | 	add	local14, objptr
02cfc     20 13 02 FB | 	rdlong	arg01, local14
02d00     39 3D 02 F6 | 	mov	local12, local39
02d04     1E 15 02 F6 | 	mov	arg02, local12
02d08     35 00 00 FF 
02d0c     2C E4 85 F1 | 	sub	objptr, ##27180
02d10     60 77 B2 FD | 	call	#__system__Left_S
02d14     1C FB 61 FC | 	wrlong	result1, local10
02d18                 | LR__0159
02d18                 | LR__0160
02d18     37 39 02 F6 | 	mov	local10, local37
02d1c     03 38 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     2C E4 05 F1 | 	add	objptr, ##27180
02d28     F2 38 02 F1 | 	add	local10, objptr
02d2c     1C 77 02 FB | 	rdlong	local41, local10
02d30                 | ' 
02d30                 | ' 825
02d30                 | ' lp$=lparts(addptr).part$ 
02d30                 | ' 
02d30                 | ' ' process mouse/cursor/click on/off
02d30                 | ' 
02d30                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d30     BF 01 00 FF 
02d34     EF 15 06 F6 | 	mov	arg02, ##@LR__5608
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     35 00 00 FF 
02d40     2C E4 85 F1 | 	sub	objptr, ##27180
02d44     D4 56 B2 FD | 	call	#__system___string_cmp
02d48     00 FA 0D F2 | 	cmp	result1, #0 wz
02d4c     30 00 90 AD |  if_e	jmp	#LR__0161
02d50     BF 01 00 FF 
02d54     F5 15 06 F6 | 	mov	arg02, ##@LR__5609
02d58     3B 13 02 F6 | 	mov	arg01, local41
02d5c     BC 56 B2 FD | 	call	#__system___string_cmp
02d60     00 FA 0D F2 | 	cmp	result1, #0 wz
02d64     18 00 90 AD |  if_e	jmp	#LR__0161
02d68     BF 01 00 FF 
02d6c     FC 15 06 F6 | 	mov	arg02, ##@LR__5610
02d70     3B 13 02 F6 | 	mov	arg01, local41
02d74     A4 56 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d80                 | LR__0161
02d80                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d80     37 2F 02 F6 | 	mov	local05, local37
02d84     01 2E 06 F1 | 	add	local05, #1
02d88     03 2E 66 F0 | 	shl	local05, #3
02d8c     35 00 00 FF 
02d90     2C E4 05 F1 | 	add	objptr, ##27180
02d94     F2 2E 02 F1 | 	add	local05, objptr
02d98     17 13 02 FB | 	rdlong	arg01, local05
02d9c     C0 01 00 FF 
02da0     02 14 06 F6 | 	mov	arg02, ##@LR__5611
02da4     35 00 00 FF 
02da8     2C E4 85 F1 | 	sub	objptr, ##27180
02dac     6C 56 B2 FD | 	call	#__system___string_cmp
02db0     00 FA 0D F2 | 	cmp	result1, #0 wz
02db4     38 00 90 5D |  if_ne	jmp	#LR__0162
02db8     37 39 02 F6 | 	mov	local10, local37
02dbc     01 38 06 F1 | 	add	local10, #1
02dc0     03 38 66 F0 | 	shl	local10, #3
02dc4     35 00 00 FF 
02dc8     2C E4 05 F1 | 	add	objptr, ##27180
02dcc     F2 38 02 F1 | 	add	local10, objptr
02dd0     C0 01 00 FF 
02dd4     05 30 06 F6 | 	mov	local06, ##@LR__5612
02dd8     1C 31 62 FC | 	wrlong	local06, local10
02ddc     14 E4 05 F1 | 	add	objptr, #20
02de0     01 00 80 FF 
02de4     F2 00 68 FC | 	wrlong	##512, objptr
02de8     35 00 00 FF 
02dec     40 E4 85 F1 | 	sub	objptr, ##27200
02df0                 | LR__0162
02df0                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02df0     37 2F 02 F6 | 	mov	local05, local37
02df4     01 2E 06 F1 | 	add	local05, #1
02df8     03 2E 66 F0 | 	shl	local05, #3
02dfc     35 00 00 FF 
02e00     2C E4 05 F1 | 	add	objptr, ##27180
02e04     F2 2E 02 F1 | 	add	local05, objptr
02e08     17 13 02 FB | 	rdlong	arg01, local05
02e0c     C0 01 00 FF 
02e10     07 14 06 F6 | 	mov	arg02, ##@LR__5613
02e14     35 00 00 FF 
02e18     2C E4 85 F1 | 	sub	objptr, ##27180
02e1c     FC 55 B2 FD | 	call	#__system___string_cmp
02e20     00 FA 0D F2 | 	cmp	result1, #0 wz
02e24     38 00 90 5D |  if_ne	jmp	#LR__0163
02e28     37 39 02 F6 | 	mov	local10, local37
02e2c     01 38 06 F1 | 	add	local10, #1
02e30     03 38 66 F0 | 	shl	local10, #3
02e34     35 00 00 FF 
02e38     2C E4 05 F1 | 	add	objptr, ##27180
02e3c     F2 38 02 F1 | 	add	local10, objptr
02e40     C0 01 00 FF 
02e44     0B 30 06 F6 | 	mov	local06, ##@LR__5614
02e48     1C 31 62 FC | 	wrlong	local06, local10
02e4c     14 E4 05 F1 | 	add	objptr, #20
02e50     01 00 80 FF 
02e54     F2 00 68 FC | 	wrlong	##512, objptr
02e58     35 00 00 FF 
02e5c     40 E4 85 F1 | 	sub	objptr, ##27200
02e60                 | LR__0163
02e60                 | LR__0164
02e60                 | ' 		
02e60                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02e60                 | ' 
02e60                 | ' if (lp$="mode" orelse lp$="m.") then 
02e60     C0 01 00 FF 
02e64     0D 14 06 F6 | 	mov	arg02, ##@LR__5615
02e68     3B 13 02 F6 | 	mov	arg01, local41
02e6c     AC 55 B2 FD | 	call	#__system___string_cmp
02e70     00 FA 0D F2 | 	cmp	result1, #0 wz
02e74     18 00 90 AD |  if_e	jmp	#LR__0165
02e78     C0 01 00 FF 
02e7c     12 14 06 F6 | 	mov	arg02, ##@LR__5616
02e80     3B 13 02 F6 | 	mov	arg01, local41
02e84     94 55 B2 FD | 	call	#__system___string_cmp
02e88     00 FA 0D F2 | 	cmp	result1, #0 wz
02e8c     58 02 90 5D |  if_ne	jmp	#LR__0172
02e90                 | LR__0165
02e90                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     2C E4 05 F1 | 	add	objptr, ##27180
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     C0 01 00 FF 
02eb0     15 14 06 F6 | 	mov	arg02, ##@LR__5617
02eb4     35 00 00 FF 
02eb8     2C E4 85 F1 | 	sub	objptr, ##27180
02ebc     5C 55 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0166
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     2C E4 05 F1 | 	add	objptr, ##27180
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     C0 01 00 FF 
02ee4     1B 30 06 F6 | 	mov	local06, ##@LR__5618
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     2C E4 85 F1 | 	sub	objptr, ##27180
02ef4                 | LR__0166
02ef4                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     2C E4 05 F1 | 	add	objptr, ##27180
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     C0 01 00 FF 
02f14     1D 14 06 F6 | 	mov	arg02, ##@LR__5619
02f18     35 00 00 FF 
02f1c     2C E4 85 F1 | 	sub	objptr, ##27180
02f20     F8 54 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0167
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     2C E4 05 F1 | 	add	objptr, ##27180
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     C0 01 00 FF 
02f48     26 30 06 F6 | 	mov	local06, ##@LR__5620
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     2C E4 85 F1 | 	sub	objptr, ##27180
02f58                 | LR__0167
02f58                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     2C E4 05 F1 | 	add	objptr, ##27180
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     C0 01 00 FF 
02f78     28 14 06 F6 | 	mov	arg02, ##@LR__5621
02f7c     35 00 00 FF 
02f80     2C E4 85 F1 | 	sub	objptr, ##27180
02f84     94 54 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     2C E4 05 F1 | 	add	objptr, ##27180
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     C0 01 00 FF 
02fac     31 30 06 F6 | 	mov	local06, ##@LR__5622
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     2C E4 85 F1 | 	sub	objptr, ##27180
02fbc                 | LR__0168
02fbc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     2C E4 05 F1 | 	add	objptr, ##27180
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     C0 01 00 FF 
02fdc     33 14 06 F6 | 	mov	arg02, ##@LR__5623
02fe0     35 00 00 FF 
02fe4     2C E4 85 F1 | 	sub	objptr, ##27180
02fe8     30 54 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0169
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     2C E4 05 F1 | 	add	objptr, ##27180
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     C0 01 00 FF 
03010     3C 30 06 F6 | 	mov	local06, ##@LR__5624
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     2C E4 85 F1 | 	sub	objptr, ##27180
03020                 | LR__0169
03020                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     2C E4 05 F1 | 	add	objptr, ##27180
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     C0 01 00 FF 
03040     3E 14 06 F6 | 	mov	arg02, ##@LR__5625
03044     35 00 00 FF 
03048     2C E4 85 F1 | 	sub	objptr, ##27180
0304c     CC 53 B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0170
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     2C E4 05 F1 | 	add	objptr, ##27180
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     C0 01 00 FF 
03074     41 30 06 F6 | 	mov	local06, ##@LR__5626
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     2C E4 85 F1 | 	sub	objptr, ##27180
03084                 | LR__0170
03084                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03084     37 2F 02 F6 | 	mov	local05, local37
03088     01 2E 06 F1 | 	add	local05, #1
0308c     03 2E 66 F0 | 	shl	local05, #3
03090     35 00 00 FF 
03094     2C E4 05 F1 | 	add	objptr, ##27180
03098     F2 2E 02 F1 | 	add	local05, objptr
0309c     17 13 02 FB | 	rdlong	arg01, local05
030a0     C0 01 00 FF 
030a4     43 14 06 F6 | 	mov	arg02, ##@LR__5627
030a8     35 00 00 FF 
030ac     2C E4 85 F1 | 	sub	objptr, ##27180
030b0     68 53 B2 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     2C 00 90 5D |  if_ne	jmp	#LR__0171
030bc     37 39 02 F6 | 	mov	local10, local37
030c0     01 38 06 F1 | 	add	local10, #1
030c4     03 38 66 F0 | 	shl	local10, #3
030c8     35 00 00 FF 
030cc     2C E4 05 F1 | 	add	objptr, ##27180
030d0     F2 38 02 F1 | 	add	local10, objptr
030d4     C0 01 00 FF 
030d8     49 30 06 F6 | 	mov	local06, ##@LR__5628
030dc     1C 31 62 FC | 	wrlong	local06, local10
030e0     35 00 00 FF 
030e4     2C E4 85 F1 | 	sub	objptr, ##27180
030e8                 | LR__0171
030e8                 | LR__0172
030e8                 | ' 
030e8                 | ' ' find part types 
030e8                 | ' 
030e8                 | ' for i=0 to k-1
030e8     00 28 06 F6 | 	mov	local02, #0
030ec     23 79 02 F6 | 	mov	local42, local17
030f0                 | LR__0173
030f0     3C 29 52 F2 | 	cmps	local02, local42 wc
030f4     A4 07 90 3D |  if_ae	jmp	#LR__0185
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     2C E4 05 F1 | 	add	objptr, ##27180
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     14 3B 02 F6 | 	mov	local11, local02
03110     1D 41 02 F6 | 	mov	local14, local11
03114     20 3F 02 F6 | 	mov	local13, local14
03118     03 3E 66 F0 | 	shl	local13, #3
0311c     F2 3E 02 F1 | 	add	local13, objptr
03120     1F 13 02 FB | 	rdlong	arg01, local13
03124     35 00 00 FF 
03128     2C E4 85 F1 | 	sub	objptr, ##27180
0312c     70 1B B0 FD | 	call	#_isseparator
03130     FD FA E1 F8 | 	getbyte	result1, result1, #0
03134     04 38 06 F1 | 	add	local10, #4
03138     1C FB 61 FC | 	wrlong	result1, local10
0313c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0313c     14 39 02 F6 | 	mov	local10, local02
03140     03 38 66 F0 | 	shl	local10, #3
03144     35 00 00 FF 
03148     2C E4 05 F1 | 	add	objptr, ##27180
0314c     F2 38 02 F1 | 	add	local10, objptr
03150     04 38 06 F1 | 	add	local10, #4
03154     1C 3D 02 FB | 	rdlong	local12, local10
03158     01 3C 56 F2 | 	cmps	local12, #1 wc
0315c     35 00 00 FF 
03160     2C E4 85 F1 | 	sub	objptr, ##27180
03164     2C 07 90 3D |  if_ae	jmp	#LR__0184
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     2C E4 05 F1 | 	add	objptr, ##27180
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     14 3B 02 F6 | 	mov	local11, local02
03180     1D 41 02 F6 | 	mov	local14, local11
03184     20 3F 02 F6 | 	mov	local13, local14
03188     03 3E 66 F0 | 	shl	local13, #3
0318c     F2 3E 02 F1 | 	add	local13, objptr
03190     1F 13 02 FB | 	rdlong	arg01, local13
03194     35 00 00 FF 
03198     2C E4 85 F1 | 	sub	objptr, ##27180
0319c     4C 13 B0 FD | 	call	#_isoperator
031a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031a4     04 38 06 F1 | 	add	local10, #4
031a8     1C FB 61 FC | 	wrlong	result1, local10
031ac                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031ac     14 39 02 F6 | 	mov	local10, local02
031b0     03 38 66 F0 | 	shl	local10, #3
031b4     35 00 00 FF 
031b8     2C E4 05 F1 | 	add	objptr, ##27180
031bc     F2 38 02 F1 | 	add	local10, objptr
031c0     04 38 06 F1 | 	add	local10, #4
031c4     1C 3D 02 FB | 	rdlong	local12, local10
031c8     01 3C 56 F2 | 	cmps	local12, #1 wc
031cc     35 00 00 FF 
031d0     2C E4 85 F1 | 	sub	objptr, ##27180
031d4     BC 06 90 3D |  if_ae	jmp	#LR__0184
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     2C E4 05 F1 | 	add	objptr, ##27180
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     14 3B 02 F6 | 	mov	local11, local02
031f0     1D 41 02 F6 | 	mov	local14, local11
031f4     20 3F 02 F6 | 	mov	local13, local14
031f8     03 3E 66 F0 | 	shl	local13, #3
031fc     F2 3E 02 F1 | 	add	local13, objptr
03200     1F 13 02 FB | 	rdlong	arg01, local13
03204     35 00 00 FF 
03208     2C E4 85 F1 | 	sub	objptr, ##27180
0320c                 | ' 
0320c                 | ' select case s
0320c     C0 01 00 FF 
03210     4E 15 06 F6 | 	mov	arg02, ##@LR__5719
03214     04 52 B2 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     1B FA 05 A6 |  if_e	mov	result1, #27
03220     00 FA 05 56 |  if_ne	mov	result1, #0
03224     FD FA E1 F8 | 	getbyte	result1, result1, #0
03228     04 38 06 F1 | 	add	local10, #4
0322c     1C FB 61 FC | 	wrlong	result1, local10
03230                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     2C E4 05 F1 | 	add	objptr, ##27180
03240     F2 38 02 F1 | 	add	local10, objptr
03244     04 38 06 F1 | 	add	local10, #4
03248     1C 3D 02 FB | 	rdlong	local12, local10
0324c     01 3C 56 F2 | 	cmps	local12, #1 wc
03250     35 00 00 FF 
03254     2C E4 85 F1 | 	sub	objptr, ##27180
03258     38 06 90 3D |  if_ae	jmp	#LR__0184
0325c     14 39 02 F6 | 	mov	local10, local02
03260     03 38 66 F0 | 	shl	local10, #3
03264     35 00 00 FF 
03268     2C E4 05 F1 | 	add	objptr, ##27180
0326c     F2 38 02 F1 | 	add	local10, objptr
03270     14 3B 02 F6 | 	mov	local11, local02
03274     1D 41 02 F6 | 	mov	local14, local11
03278     20 3F 02 F6 | 	mov	local13, local14
0327c     03 3E 66 F0 | 	shl	local13, #3
03280     F2 3E 02 F1 | 	add	local13, objptr
03284     1F 13 02 FB | 	rdlong	arg01, local13
03288     35 00 00 FF 
0328c     2C E4 85 F1 | 	sub	objptr, ##27180
03290     0C 1C B0 FD | 	call	#_iscommand
03294     FD FA E1 F8 | 	getbyte	result1, result1, #0
03298     04 38 06 F1 | 	add	local10, #4
0329c     1C FB 61 FC | 	wrlong	result1, local10
032a0                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032a0     14 39 02 F6 | 	mov	local10, local02
032a4     03 38 66 F0 | 	shl	local10, #3
032a8     35 00 00 FF 
032ac     2C E4 05 F1 | 	add	objptr, ##27180
032b0     F2 38 02 F1 | 	add	local10, objptr
032b4     04 38 06 F1 | 	add	local10, #4
032b8     1C 3D 02 FB | 	rdlong	local12, local10
032bc     01 3C 56 F2 | 	cmps	local12, #1 wc
032c0     35 00 00 FF 
032c4     2C E4 85 F1 | 	sub	objptr, ##27180
032c8     C8 05 90 3D |  if_ae	jmp	#LR__0184
032cc     14 39 02 F6 | 	mov	local10, local02
032d0     03 38 66 F0 | 	shl	local10, #3
032d4     35 00 00 FF 
032d8     2C E4 05 F1 | 	add	objptr, ##27180
032dc     F2 38 02 F1 | 	add	local10, objptr
032e0     14 3B 02 F6 | 	mov	local11, local02
032e4     1D 41 02 F6 | 	mov	local14, local11
032e8     20 3F 02 F6 | 	mov	local13, local14
032ec     03 3E 66 F0 | 	shl	local13, #3
032f0     F2 5C 02 F6 | 	mov	local28, objptr
032f4     F2 3E 02 F1 | 	add	local13, objptr
032f8     1F 13 02 FB | 	rdlong	arg01, local13
032fc     35 00 00 FF 
03300     2C E4 85 F1 | 	sub	objptr, ##27180
03304     58 2D B0 FD | 	call	#_isfunction
03308     FD FA E1 F8 | 	getbyte	result1, result1, #0
0330c     04 38 06 F1 | 	add	local10, #4
03310     1C FB 61 FC | 	wrlong	result1, local10
03314                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     2C E4 05 F1 | 	add	objptr, ##27180
03324     F2 38 02 F1 | 	add	local10, objptr
03328     04 38 06 F1 | 	add	local10, #4
0332c     1C 3D 02 FB | 	rdlong	local12, local10
03330     01 3C 56 F2 | 	cmps	local12, #1 wc
03334     35 00 00 FF 
03338     2C E4 85 F1 | 	sub	objptr, ##27180
0333c     54 05 90 3D |  if_ae	jmp	#LR__0184
03340     14 39 02 F6 | 	mov	local10, local02
03344     03 38 66 F0 | 	shl	local10, #3
03348     35 00 00 FF 
0334c     2C E4 05 F1 | 	add	objptr, ##27180
03350     F2 38 02 F1 | 	add	local10, objptr
03354     14 3B 02 F6 | 	mov	local11, local02
03358     1D 41 02 F6 | 	mov	local14, local11
0335c     03 40 66 F0 | 	shl	local14, #3
03360     F2 3E 02 F6 | 	mov	local13, objptr
03364     F2 40 02 F1 | 	add	local14, objptr
03368     20 13 02 FB | 	rdlong	arg01, local14
0336c     35 00 00 FF 
03370     2C E4 85 F1 | 	sub	objptr, ##27180
03374     BC 15 B0 FD | 	call	#_isnotename
03378     04 38 06 F1 | 	add	local10, #4
0337c     1C FB 61 FC | 	wrlong	result1, local10
03380                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03380                 | ' if lparts(i).token>0 then 
03380     14 39 02 F6 | 	mov	local10, local02
03384     03 38 66 F0 | 	shl	local10, #3
03388     35 00 00 FF 
0338c     2C E4 05 F1 | 	add	objptr, ##27180
03390     F2 38 02 F1 | 	add	local10, objptr
03394     04 38 06 F1 | 	add	local10, #4
03398     1C 31 02 FB | 	rdlong	local06, local10
0339c     01 30 56 F2 | 	cmps	local06, #1 wc
033a0     35 00 00 FF 
033a4     2C E4 85 F1 | 	sub	objptr, ##27180
033a8     8C 00 90 CD |  if_b	jmp	#LR__0174
033ac     14 2F 02 F6 | 	mov	local05, local02
033b0     03 2E 66 F0 | 	shl	local05, #3
033b4     35 00 00 FF 
033b8     2C E4 05 F1 | 	add	objptr, ##27180
033bc     F2 2E 02 F1 | 	add	local05, objptr
033c0     04 2E 06 F1 | 	add	local05, #4
033c4     17 3D 02 FB | 	rdlong	local12, local05
033c8     1E 13 02 F6 | 	mov	arg01, local12
033cc     35 00 00 FF 
033d0     2C E4 85 F1 | 	sub	objptr, ##27180
033d4     D0 3E B0 FD | 	call	#_getnoteval
033d8     FD 7A 02 F6 | 	mov	local43, result1
033dc     14 39 02 F6 | 	mov	local10, local02
033e0     03 38 66 F0 | 	shl	local10, #3
033e4     35 00 00 FF 
033e8     2C E4 05 F1 | 	add	objptr, ##27180
033ec     F2 38 02 F1 | 	add	local10, objptr
033f0     3D 13 02 F6 | 	mov	arg01, local43
033f4     35 00 00 FF 
033f8     2C E4 85 F1 | 	sub	objptr, ##27180
033fc     6C 72 B2 FD | 	call	#__system__str_S
03400     1C FB 61 FC | 	wrlong	result1, local10
03404     14 2D 02 F6 | 	mov	local04, local02
03408     16 2B 02 F6 | 	mov	local03, local04
0340c     15 39 02 F6 | 	mov	local10, local03
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     2C E4 05 F1 | 	add	objptr, ##27180
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     01 00 80 FF 
03428     1C 05 68 FC | 	wrlong	##514, local10
0342c     35 00 00 FF 
03430     2C E4 85 F1 | 	sub	objptr, ##27180
03434     5C 04 90 FD | 	jmp	#LR__0184
03438                 | LR__0174
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     2C E4 05 F1 | 	add	objptr, ##27180
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 41 02 F6 | 	mov	local14, local02
03450     03 40 66 F0 | 	shl	local14, #3
03454     F2 40 02 F1 | 	add	local14, objptr
03458     20 13 02 FB | 	rdlong	arg01, local14
0345c     35 00 00 FF 
03460     2C E4 85 F1 | 	sub	objptr, ##27180
03464     64 13 B0 FD | 	call	#_ischannel
03468     04 38 06 F1 | 	add	local10, #4
0346c     1C FB 61 FC | 	wrlong	result1, local10
03470                 | ' 
03470                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03470                 | ' 
03470                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03470     14 39 02 F6 | 	mov	local10, local02
03474     03 38 66 F0 | 	shl	local10, #3
03478     35 00 00 FF 
0347c     2C E4 05 F1 | 	add	objptr, ##27180
03480     F2 38 02 F1 | 	add	local10, objptr
03484     04 38 06 F1 | 	add	local10, #4
03488     1C 31 02 FB | 	rdlong	local06, local10
0348c     01 30 56 F2 | 	cmps	local06, #1 wc
03490     35 00 00 FF 
03494     2C E4 85 F1 | 	sub	objptr, ##27180
03498     74 00 90 CD |  if_b	jmp	#LR__0175
0349c     14 39 02 F6 | 	mov	local10, local02
034a0     03 38 66 F0 | 	shl	local10, #3
034a4     35 00 00 FF 
034a8     2C E4 05 F1 | 	add	objptr, ##27180
034ac     F2 38 02 F1 | 	add	local10, objptr
034b0     14 3B 02 F6 | 	mov	local11, local02
034b4     1D 41 02 F6 | 	mov	local14, local11
034b8     03 40 66 F0 | 	shl	local14, #3
034bc     F2 3E 02 F6 | 	mov	local13, objptr
034c0     F2 40 02 F1 | 	add	local14, objptr
034c4     20 13 02 FB | 	rdlong	arg01, local14
034c8     01 3C 06 F6 | 	mov	local12, #1
034cc     01 14 06 F6 | 	mov	arg02, #1
034d0     35 00 00 FF 
034d4     2C E4 85 F1 | 	sub	objptr, ##27180
034d8     20 70 B2 FD | 	call	#__system__Right_S
034dc     1C FB 61 FC | 	wrlong	result1, local10
034e0     14 2D 02 F6 | 	mov	local04, local02
034e4     16 2B 02 F6 | 	mov	local03, local04
034e8     15 39 02 F6 | 	mov	local10, local03
034ec     03 38 66 F0 | 	shl	local10, #3
034f0     35 00 00 FF 
034f4     2C E4 05 F1 | 	add	objptr, ##27180
034f8     F2 38 02 F1 | 	add	local10, objptr
034fc     04 38 06 F1 | 	add	local10, #4
03500     1C 59 68 FC | 	wrlong	#44, local10
03504     35 00 00 FF 
03508     2C E4 85 F1 | 	sub	objptr, ##27180
0350c     84 03 90 FD | 	jmp	#LR__0184
03510                 | LR__0175
03510     14 39 02 F6 | 	mov	local10, local02
03514     03 38 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     2C E4 05 F1 | 	add	objptr, ##27180
03520     F2 38 02 F1 | 	add	local10, objptr
03524     14 3B 02 F6 | 	mov	local11, local02
03528     1D 41 02 F6 | 	mov	local14, local11
0352c     03 40 66 F0 | 	shl	local14, #3
03530     F2 3E 02 F6 | 	mov	local13, objptr
03534     F2 40 02 F1 | 	add	local14, objptr
03538     20 13 02 FB | 	rdlong	arg01, local14
0353c     35 00 00 FF 
03540     2C E4 85 F1 | 	sub	objptr, ##27180
03544     6C 13 B0 FD | 	call	#_isconstant
03548     04 38 06 F1 | 	add	local10, #4
0354c     1C FB 61 FC | 	wrlong	result1, local10
03550                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03550     14 39 02 F6 | 	mov	local10, local02
03554     03 38 66 F0 | 	shl	local10, #3
03558     35 00 00 FF 
0355c     2C E4 05 F1 | 	add	objptr, ##27180
03560     F2 38 02 F1 | 	add	local10, objptr
03564     04 38 06 F1 | 	add	local10, #4
03568     1C 3D 02 FB | 	rdlong	local12, local10
0356c     01 3C 56 F2 | 	cmps	local12, #1 wc
03570     35 00 00 FF 
03574     2C E4 85 F1 | 	sub	objptr, ##27180
03578     94 00 90 CD |  if_b	jmp	#LR__0176
0357c     14 39 02 F6 | 	mov	local10, local02
03580     03 38 66 F0 | 	shl	local10, #3
03584     35 00 00 FF 
03588     2C E4 05 F1 | 	add	objptr, ##27180
0358c     F2 38 02 F1 | 	add	local10, objptr
03590     14 3D 02 F6 | 	mov	local12, local02
03594     1E 3B 02 F6 | 	mov	local11, local12
03598     1D 41 02 F6 | 	mov	local14, local11
0359c     03 40 66 F0 | 	shl	local14, #3
035a0     F2 3E 02 F6 | 	mov	local13, objptr
035a4     F2 40 02 F1 | 	add	local14, objptr
035a8     04 40 06 F1 | 	add	local14, #4
035ac     20 13 02 FB | 	rdlong	arg01, local14
035b0     04 40 86 F1 | 	sub	local14, #4
035b4     35 00 00 FF 
035b8     2C E4 85 F1 | 	sub	objptr, ##27180
035bc     09 13 52 F6 | 	abs	arg01, arg01 wc
035c0     1F 7C C6 C9 |  if_b	decod	local44, #31
035c4     00 7C 06 36 |  if_ae	mov	local44, #0
035c8     A0 78 B2 FD | 	call	#__system___float_fromuns
035cc     3E FB 61 F5 | 	xor	result1, local44
035d0     FD 12 02 F6 | 	mov	arg01, result1
035d4     94 70 B2 FD | 	call	#__system__str_S
035d8     1C FB 61 FC | 	wrlong	result1, local10
035dc     14 2D 02 F6 | 	mov	local04, local02
035e0     16 2B 02 F6 | 	mov	local03, local04
035e4     15 39 02 F6 | 	mov	local10, local03
035e8     03 38 66 F0 | 	shl	local10, #3
035ec     35 00 00 FF 
035f0     2C E4 05 F1 | 	add	objptr, ##27180
035f4     F2 38 02 F1 | 	add	local10, objptr
035f8     04 38 06 F1 | 	add	local10, #4
035fc     01 00 80 FF 
03600     1C 03 68 FC | 	wrlong	##513, local10
03604     35 00 00 FF 
03608     2C E4 85 F1 | 	sub	objptr, ##27180
0360c     84 02 90 FD | 	jmp	#LR__0184
03610                 | LR__0176
03610     14 2F 02 F6 | 	mov	local05, local02
03614     03 2E 66 F0 | 	shl	local05, #3
03618     35 00 00 FF 
0361c     2C E4 05 F1 | 	add	objptr, ##27180
03620     F2 2E 02 F1 | 	add	local05, objptr
03624     17 13 02 FB | 	rdlong	arg01, local05
03628     35 00 00 FF 
0362c     2C E4 85 F1 | 	sub	objptr, ##27180
03630     C0 34 B0 FD | 	call	#_isnum
03634     FD 7E 02 F6 | 	mov	local45, result1
03638     14 2F 02 F6 | 	mov	local05, local02
0363c     03 2E 66 F0 | 	shl	local05, #3
03640     35 00 00 FF 
03644     2C E4 05 F1 | 	add	objptr, ##27180
03648     F2 2E 02 F1 | 	add	local05, objptr
0364c     17 13 02 FB | 	rdlong	arg01, local05
03650     35 00 00 FF 
03654     2C E4 85 F1 | 	sub	objptr, ##27180
03658     84 38 B0 FD | 	call	#_isint
0365c     FD 80 02 F6 | 	mov	local46, result1
03660     14 2F 02 F6 | 	mov	local05, local02
03664     03 2E 66 F0 | 	shl	local05, #3
03668     35 00 00 FF 
0366c     2C E4 05 F1 | 	add	objptr, ##27180
03670     F2 2E 02 F1 | 	add	local05, objptr
03674     17 13 02 FB | 	rdlong	arg01, local05
03678     35 00 00 FF 
0367c     2C E4 85 F1 | 	sub	objptr, ##27180
03680     00 3B B0 FD | 	call	#_isdec
03684     FD 82 02 F6 | 	mov	local47, result1
03688                 | ' 
03688                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03688                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03688     00 7E 0E F2 | 	cmp	local45, #0 wz
0368c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03690     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03694     34 00 90 AD |  if_e	jmp	#LR__0177
03698     14 2D 02 F6 | 	mov	local04, local02
0369c     16 2B 02 F6 | 	mov	local03, local04
036a0     15 39 02 F6 | 	mov	local10, local03
036a4     03 38 66 F0 | 	shl	local10, #3
036a8     35 00 00 FF 
036ac     2C E4 05 F1 | 	add	objptr, ##27180
036b0     F2 38 02 F1 | 	add	local10, objptr
036b4     04 38 06 F1 | 	add	local10, #4
036b8     01 00 80 FF 
036bc     1C 01 68 FC | 	wrlong	##512, local10
036c0     35 00 00 FF 
036c4     2C E4 85 F1 | 	sub	objptr, ##27180
036c8     C8 01 90 FD | 	jmp	#LR__0184
036cc                 | LR__0177
036cc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036cc     00 7E 0E F2 | 	cmp	local45, #0 wz
036d0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
036d4     41 2D 22 56 |  if_ne	not	local04, local47
036d8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036dc     34 00 90 AD |  if_e	jmp	#LR__0178
036e0     14 2D 02 F6 | 	mov	local04, local02
036e4     16 2B 02 F6 | 	mov	local03, local04
036e8     15 39 02 F6 | 	mov	local10, local03
036ec     03 38 66 F0 | 	shl	local10, #3
036f0     35 00 00 FF 
036f4     2C E4 05 F1 | 	add	objptr, ##27180
036f8     F2 38 02 F1 | 	add	local10, objptr
036fc     04 38 06 F1 | 	add	local10, #4
03700     01 00 80 FF 
03704     1C 03 68 FC | 	wrlong	##513, local10
03708     35 00 00 FF 
0370c     2C E4 85 F1 | 	sub	objptr, ##27180
03710     80 01 90 FD | 	jmp	#LR__0184
03714                 | LR__0178
03714                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03714     00 7E 0E F2 | 	cmp	local45, #0 wz
03718     40 2D 22 56 |  if_ne	not	local04, local46
0371c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03720     41 2B 22 56 |  if_ne	not	local03, local47
03724     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03728     34 00 90 AD |  if_e	jmp	#LR__0179
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     2C E4 05 F1 | 	add	objptr, ##27180
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 05 68 FC | 	wrlong	##514, local10
03754     35 00 00 FF 
03758     2C E4 85 F1 | 	sub	objptr, ##27180
0375c     34 01 90 FD | 	jmp	#LR__0184
03760                 | LR__0179
03760                 | ' 
03760                 | ' if isstring(lparts(i).part$) then 
03760     14 2F 02 F6 | 	mov	local05, local02
03764     03 2E 66 F0 | 	shl	local05, #3
03768     35 00 00 FF 
0376c     2C E4 05 F1 | 	add	objptr, ##27180
03770     F2 2E 02 F1 | 	add	local05, objptr
03774     17 13 02 FB | 	rdlong	arg01, local05
03778     35 00 00 FF 
0377c     2C E4 85 F1 | 	sub	objptr, ##27180
03780     C0 3A B0 FD | 	call	#_isstring
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     A8 00 90 AD |  if_e	jmp	#LR__0182
0378c     14 39 02 F6 | 	mov	local10, local02
03790     03 38 66 F0 | 	shl	local10, #3
03794     35 00 00 FF 
03798     2C E4 05 F1 | 	add	objptr, ##27180
0379c     F2 38 02 F1 | 	add	local10, objptr
037a0     04 38 06 F1 | 	add	local10, #4
037a4     01 00 80 FF 
037a8     1C 07 68 FC | 	wrlong	##515, local10
037ac     14 2D 02 F6 | 	mov	local04, local02
037b0     16 2B 02 F6 | 	mov	local03, local04
037b4     15 39 02 F6 | 	mov	local10, local03
037b8     03 38 66 F0 | 	shl	local10, #3
037bc     F2 38 02 F1 | 	add	local10, objptr
037c0     14 41 02 F6 | 	mov	local14, local02
037c4     03 40 66 F0 | 	shl	local14, #3
037c8     F2 40 02 F1 | 	add	local14, objptr
037cc     20 31 02 FB | 	rdlong	local06, local14
037d0     02 3C 06 F6 | 	mov	local12, #2
037d4     14 51 02 F6 | 	mov	local22, local02
037d8     28 53 02 F6 | 	mov	local23, local22
037dc     03 52 66 F0 | 	shl	local23, #3
037e0     F2 54 02 F6 | 	mov	local24, objptr
037e4     F2 52 02 F1 | 	add	local23, objptr
037e8     29 13 02 FB | 	rdlong	arg01, local23
037ec     35 00 00 FF 
037f0     2C E4 85 F1 | 	sub	objptr, ##27180
037f4     09 33 02 F6 | 	mov	local07, arg01
037f8     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037fc                 | LR__0180
037fc     19 FB C9 FA | 	rdbyte	result1, local07 wz
03800     01 32 06 51 |  if_ne	add	local07, #1
03804     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03808                 | LR__0181
03808     09 33 82 F1 | 	sub	local07, arg01
0380c     19 3F 02 F6 | 	mov	local13, local07
03810     1F 41 02 F6 | 	mov	local14, local13
03814     02 40 86 F1 | 	sub	local14, #2
03818     20 3B 02 F6 | 	mov	local11, local14
0381c     18 13 02 F6 | 	mov	arg01, local06
03820     1E 15 02 F6 | 	mov	arg02, local12
03824     1D 17 02 F6 | 	mov	arg03, local11
03828     60 6D B2 FD | 	call	#__system__Mid_S
0382c     1C FB 61 FC | 	wrlong	result1, local10
03830     60 00 90 FD | 	jmp	#LR__0184
03834                 | LR__0182
03834                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03834     14 2B 02 F6 | 	mov	local03, local02
03838     15 2F 02 F6 | 	mov	local05, local03
0383c     03 2E 66 F0 | 	shl	local05, #3
03840     35 00 00 FF 
03844     2C E4 05 F1 | 	add	objptr, ##27180
03848     F2 2E 02 F1 | 	add	local05, objptr
0384c     17 13 02 FB | 	rdlong	arg01, local05
03850     35 00 00 FF 
03854     2C E4 85 F1 | 	sub	objptr, ##27180
03858     24 30 B0 FD | 	call	#_isname
0385c     FD 2C 0A F6 | 	mov	local04, result1 wz
03860     30 00 90 AD |  if_e	jmp	#LR__0183
03864     14 2D 02 F6 | 	mov	local04, local02
03868     16 2B 02 F6 | 	mov	local03, local04
0386c     15 39 02 F6 | 	mov	local10, local03
03870     03 38 66 F0 | 	shl	local10, #3
03874     35 00 00 FF 
03878     2C E4 05 F1 | 	add	objptr, ##27180
0387c     F2 38 02 F1 | 	add	local10, objptr
03880     04 38 06 F1 | 	add	local10, #4
03884     01 00 80 FF 
03888     1C 09 68 FC | 	wrlong	##516, local10
0388c     35 00 00 FF 
03890     2C E4 85 F1 | 	sub	objptr, ##27180
03894                 | LR__0183
03894                 | LR__0184
03894     01 28 06 F1 | 	add	local02, #1
03898     54 F8 9F FD | 	jmp	#LR__0173
0389c                 | LR__0185
0389c     23 39 02 F6 | 	mov	local10, local17
038a0     03 38 66 F0 | 	shl	local10, #3
038a4     35 00 00 FF 
038a8     2C E4 05 F1 | 	add	objptr, ##27180
038ac     F2 38 02 F1 | 	add	local10, objptr
038b0     04 38 06 F1 | 	add	local10, #4
038b4     1C FD 6B FC | 	wrlong	#510, local10
038b8     23 39 02 F6 | 	mov	local10, local17
038bc     03 38 66 F0 | 	shl	local10, #3
038c0     F2 38 02 F1 | 	add	local10, objptr
038c4     C0 01 00 FF 
038c8     4B 30 06 F6 | 	mov	local06, ##@LR__5629
038cc     1C 31 62 FC | 	wrlong	local06, local10
038d0     10 00 00 FF 
038d4     54 E4 05 F1 | 	add	objptr, ##8276
038d8     F2 46 62 FC | 	wrlong	local17, objptr
038dc     45 00 00 FF 
038e0     80 E4 85 F1 | 	sub	objptr, ##35456
038e4                 | ' 
038e4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038e4                 | ' 
038e4                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038e4                 | '  
038e4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038e4     C0 01 00 FF 
038e8     4C 14 06 F6 | 	mov	arg02, ##@LR__5630
038ec     3B 13 02 F6 | 	mov	arg01, local41
038f0     28 4B B2 FD | 	call	#__system___string_cmp
038f4     00 FA 0D F2 | 	cmp	result1, #0 wz
038f8     F0 00 90 AD |  if_e	jmp	#LR__0186
038fc     C0 01 00 FF 
03900     51 14 06 F6 | 	mov	arg02, ##@LR__5631
03904     3B 13 02 F6 | 	mov	arg01, local41
03908     10 4B B2 FD | 	call	#__system___string_cmp
0390c     00 FA 0D F2 | 	cmp	result1, #0 wz
03910     D8 00 90 AD |  if_e	jmp	#LR__0186
03914     C0 01 00 FF 
03918     56 30 06 F6 | 	mov	local06, ##@LR__5632
0391c     3B 13 02 F6 | 	mov	arg01, local41
03920     18 15 02 F6 | 	mov	arg02, local06
03924     F4 4A B2 FD | 	call	#__system___string_cmp
03928     00 FA 0D F2 | 	cmp	result1, #0 wz
0392c     BC 00 90 AD |  if_e	jmp	#LR__0186
03930     C0 01 00 FF 
03934     5B 3C 06 F6 | 	mov	local12, ##@LR__5633
03938     1E 31 02 F6 | 	mov	local06, local12
0393c     3B 13 02 F6 | 	mov	arg01, local41
03940     18 15 02 F6 | 	mov	arg02, local06
03944     D4 4A B2 FD | 	call	#__system___string_cmp
03948     00 FA 0D F2 | 	cmp	result1, #0 wz
0394c     9C 00 90 AD |  if_e	jmp	#LR__0186
03950     C0 01 00 FF 
03954     5F 3A 06 F6 | 	mov	local11, ##@LR__5634
03958     1D 3D 02 F6 | 	mov	local12, local11
0395c     3B 13 02 F6 | 	mov	arg01, local41
03960     1E 15 02 F6 | 	mov	arg02, local12
03964     B4 4A B2 FD | 	call	#__system___string_cmp
03968     FD 30 0A F6 | 	mov	local06, result1 wz
0396c     7C 00 90 AD |  if_e	jmp	#LR__0186
03970     C0 01 00 FF 
03974     63 40 06 F6 | 	mov	local14, ##@LR__5635
03978     20 3B 02 F6 | 	mov	local11, local14
0397c     3B 13 02 F6 | 	mov	arg01, local41
03980     1D 15 02 F6 | 	mov	arg02, local11
03984     94 4A B2 FD | 	call	#__system___string_cmp
03988     FD 3C 0A F6 | 	mov	local12, result1 wz
0398c     5C 00 90 AD |  if_e	jmp	#LR__0186
03990     C0 01 00 FF 
03994     66 3E 06 F6 | 	mov	local13, ##@LR__5636
03998     1F 41 02 F6 | 	mov	local14, local13
0399c     3B 13 02 F6 | 	mov	arg01, local41
039a0     20 15 02 F6 | 	mov	arg02, local14
039a4     74 4A B2 FD | 	call	#__system___string_cmp
039a8     FD 3A 0A F6 | 	mov	local11, result1 wz
039ac     3C 00 90 AD |  if_e	jmp	#LR__0186
039b0     C0 01 00 FF 
039b4     6A 3E 06 F6 | 	mov	local13, ##@LR__5637
039b8     3B 13 02 F6 | 	mov	arg01, local41
039bc     1F 15 02 F6 | 	mov	arg02, local13
039c0     58 4A B2 FD | 	call	#__system___string_cmp
039c4     FD 40 0A F6 | 	mov	local14, result1 wz
039c8     20 00 90 AD |  if_e	jmp	#LR__0186
039cc     C0 01 00 FF 
039d0     70 50 06 F6 | 	mov	local22, ##@LR__5638
039d4     28 5D 02 F6 | 	mov	local28, local22
039d8     3B 13 02 F6 | 	mov	arg01, local41
039dc     2E 15 02 F6 | 	mov	arg02, local28
039e0     38 4A B2 FD | 	call	#__system___string_cmp
039e4     FD 3E 0A F6 | 	mov	local13, result1 wz
039e8     CC 00 90 5D |  if_ne	jmp	#LR__0187
039ec                 | LR__0186
039ec     37 5D 02 F6 | 	mov	local28, local37
039f0     01 5C 06 F1 | 	add	local28, #1
039f4     2E 51 02 F6 | 	mov	local22, local28
039f8     28 53 02 F6 | 	mov	local23, local22
039fc     03 52 66 F0 | 	shl	local23, #3
03a00     35 00 00 FF 
03a04     2C E4 05 F1 | 	add	objptr, ##27180
03a08     F2 54 02 F6 | 	mov	local24, objptr
03a0c     F2 52 02 F1 | 	add	local23, objptr
03a10     04 52 06 F1 | 	add	local23, #4
03a14     29 61 02 FB | 	rdlong	local30, local23
03a18     04 52 86 F1 | 	sub	local23, #4
03a1c     30 5F 02 F6 | 	mov	local29, local30
03a20     01 00 00 FF 
03a24     04 5E 0E F2 | 	cmp	local29, ##516 wz
03a28     35 00 00 FF 
03a2c     2C E4 85 F1 | 	sub	objptr, ##27180
03a30     84 00 90 5D |  if_ne	jmp	#LR__0187
03a34     37 85 02 F6 | 	mov	local48, local37
03a38     01 84 06 F1 | 	add	local48, #1
03a3c     03 84 66 F0 | 	shl	local48, #3
03a40     35 00 00 FF 
03a44     2C E4 05 F1 | 	add	objptr, ##27180
03a48     F2 86 02 F6 | 	mov	local49, objptr
03a4c     F2 84 02 F1 | 	add	local48, objptr
03a50     42 13 02 FB | 	rdlong	arg01, local48
03a54     01 14 06 F6 | 	mov	arg02, #1
03a58     35 00 00 FF 
03a5c     2C E4 85 F1 | 	sub	objptr, ##27180
03a60     98 6A B2 FD | 	call	#__system__Right_S
03a64     FD 12 02 F6 | 	mov	arg01, result1
03a68     C0 01 00 FF 
03a6c     73 88 06 F6 | 	mov	local50, ##@LR__5639
03a70     44 8B 02 F6 | 	mov	local51, local50
03a74     45 15 02 F6 | 	mov	arg02, local51
03a78     A0 49 B2 FD | 	call	#__system___string_cmp
03a7c     FD 62 0A F6 | 	mov	local31, result1 wz
03a80     34 00 90 AD |  if_e	jmp	#LR__0187
03a84     37 39 02 F6 | 	mov	local10, local37
03a88     01 38 06 F1 | 	add	local10, #1
03a8c     03 38 66 F0 | 	shl	local10, #3
03a90     35 00 00 FF 
03a94     2C E4 05 F1 | 	add	objptr, ##27180
03a98     F2 38 02 F1 | 	add	local10, objptr
03a9c     01 00 00 FF 
03aa0     03 30 06 F6 | 	mov	local06, ##515
03aa4     04 38 06 F1 | 	add	local10, #4
03aa8     01 00 80 FF 
03aac     1C 07 68 FC | 	wrlong	##515, local10
03ab0     35 00 00 FF 
03ab4     2C E4 85 F1 | 	sub	objptr, ##27180
03ab8                 | LR__0187
03ab8                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ab8     C0 01 00 FF 
03abc     75 14 06 F6 | 	mov	arg02, ##@LR__5640
03ac0     3B 13 02 F6 | 	mov	arg01, local41
03ac4     54 49 B2 FD | 	call	#__system___string_cmp
03ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
03acc     1C 00 90 AD |  if_e	jmp	#LR__0188
03ad0     C0 01 00 FF 
03ad4     7C 2E 06 F6 | 	mov	local05, ##@LR__5641
03ad8     3B 13 02 F6 | 	mov	arg01, local41
03adc     17 15 02 F6 | 	mov	arg02, local05
03ae0     38 49 B2 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     CC 00 90 5D |  if_ne	jmp	#LR__0189
03aec                 | LR__0188
03aec     37 2F 02 F6 | 	mov	local05, local37
03af0     01 2E 06 F1 | 	add	local05, #1
03af4     17 31 02 F6 | 	mov	local06, local05
03af8     03 30 66 F0 | 	shl	local06, #3
03afc     35 00 00 FF 
03b00     2C E4 05 F1 | 	add	objptr, ##27180
03b04     F2 3C 02 F6 | 	mov	local12, objptr
03b08     F2 30 02 F1 | 	add	local06, objptr
03b0c     04 30 06 F1 | 	add	local06, #4
03b10     18 41 02 FB | 	rdlong	local14, local06
03b14     04 30 86 F1 | 	sub	local06, #4
03b18     20 3B 02 F6 | 	mov	local11, local14
03b1c     01 00 00 FF 
03b20     04 3A 0E F2 | 	cmp	local11, ##516 wz
03b24     35 00 00 FF 
03b28     2C E4 85 F1 | 	sub	objptr, ##27180
03b2c     88 00 90 5D |  if_ne	jmp	#LR__0189
03b30     37 53 02 F6 | 	mov	local23, local37
03b34     01 52 06 F1 | 	add	local23, #1
03b38     03 52 66 F0 | 	shl	local23, #3
03b3c     35 00 00 FF 
03b40     2C E4 05 F1 | 	add	objptr, ##27180
03b44     F2 54 02 F6 | 	mov	local24, objptr
03b48     F2 52 02 F1 | 	add	local23, objptr
03b4c     29 13 02 FB | 	rdlong	arg01, local23
03b50     01 14 06 F6 | 	mov	arg02, #1
03b54     35 00 00 FF 
03b58     2C E4 85 F1 | 	sub	objptr, ##27180
03b5c     9C 69 B2 FD | 	call	#__system__Right_S
03b60     FD 12 02 F6 | 	mov	arg01, result1
03b64     C0 01 00 FF 
03b68     82 50 06 F6 | 	mov	local22, ##@LR__5642
03b6c     28 5D 02 F6 | 	mov	local28, local22
03b70     2E 15 02 F6 | 	mov	arg02, local28
03b74     A4 48 B2 FD | 	call	#__system___string_cmp
03b78     FD 3E 0A F6 | 	mov	local13, result1 wz
03b7c     38 00 90 AD |  if_e	jmp	#LR__0189
03b80     37 39 02 F6 | 	mov	local10, local37
03b84     01 38 06 F1 | 	add	local10, #1
03b88     03 38 66 F0 | 	shl	local10, #3
03b8c     35 00 00 FF 
03b90     2C E4 05 F1 | 	add	objptr, ##27180
03b94     F2 2E 02 F6 | 	mov	local05, objptr
03b98     F2 38 02 F1 | 	add	local10, objptr
03b9c     01 00 00 FF 
03ba0     03 30 06 F6 | 	mov	local06, ##515
03ba4     04 38 06 F1 | 	add	local10, #4
03ba8     01 00 80 FF 
03bac     1C 07 68 FC | 	wrlong	##515, local10
03bb0     35 00 00 FF 
03bb4     2C E4 85 F1 | 	sub	objptr, ##27180
03bb8                 | LR__0189
03bb8                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03bb8     C0 01 00 FF 
03bbc     84 14 06 F6 | 	mov	arg02, ##@LR__5643
03bc0     3B 13 02 F6 | 	mov	arg01, local41
03bc4     54 48 B2 FD | 	call	#__system___string_cmp
03bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bcc     C8 00 90 5D |  if_ne	jmp	#LR__0190
03bd0     37 2F 02 F6 | 	mov	local05, local37
03bd4     01 2E 06 F1 | 	add	local05, #1
03bd8     03 2E 66 F0 | 	shl	local05, #3
03bdc     35 00 00 FF 
03be0     2C E4 05 F1 | 	add	objptr, ##27180
03be4     F2 30 02 F6 | 	mov	local06, objptr
03be8     F2 2E 02 F1 | 	add	local05, objptr
03bec     04 2E 06 F1 | 	add	local05, #4
03bf0     17 3B 02 FB | 	rdlong	local11, local05
03bf4     04 2E 86 F1 | 	sub	local05, #4
03bf8     1D 3D 02 F6 | 	mov	local12, local11
03bfc     01 00 00 FF 
03c00     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c04     35 00 00 FF 
03c08     2C E4 85 F1 | 	sub	objptr, ##27180
03c0c     88 00 90 5D |  if_ne	jmp	#LR__0190
03c10     37 51 02 F6 | 	mov	local22, local37
03c14     01 50 06 F1 | 	add	local22, #1
03c18     03 50 66 F0 | 	shl	local22, #3
03c1c     35 00 00 FF 
03c20     2C E4 05 F1 | 	add	objptr, ##27180
03c24     F2 52 02 F6 | 	mov	local23, objptr
03c28     F2 50 02 F1 | 	add	local22, objptr
03c2c     28 13 02 FB | 	rdlong	arg01, local22
03c30     01 14 06 F6 | 	mov	arg02, #1
03c34     35 00 00 FF 
03c38     2C E4 85 F1 | 	sub	objptr, ##27180
03c3c     BC 68 B2 FD | 	call	#__system__Right_S
03c40     FD 12 02 F6 | 	mov	arg01, result1
03c44     C0 01 00 FF 
03c48     89 5C 06 F6 | 	mov	local28, ##@LR__5644
03c4c     2E 3F 02 F6 | 	mov	local13, local28
03c50     1F 15 02 F6 | 	mov	arg02, local13
03c54     C4 47 B2 FD | 	call	#__system___string_cmp
03c58     FD 40 0A F6 | 	mov	local14, result1 wz
03c5c     38 00 90 AD |  if_e	jmp	#LR__0190
03c60     37 39 02 F6 | 	mov	local10, local37
03c64     01 38 06 F1 | 	add	local10, #1
03c68     03 38 66 F0 | 	shl	local10, #3
03c6c     35 00 00 FF 
03c70     2C E4 05 F1 | 	add	objptr, ##27180
03c74     F2 2E 02 F6 | 	mov	local05, objptr
03c78     F2 38 02 F1 | 	add	local10, objptr
03c7c     01 00 00 FF 
03c80     03 30 06 F6 | 	mov	local06, ##515
03c84     04 38 06 F1 | 	add	local10, #4
03c88     01 00 80 FF 
03c8c     1C 07 68 FC | 	wrlong	##515, local10
03c90     35 00 00 FF 
03c94     2C E4 85 F1 | 	sub	objptr, ##27180
03c98                 | LR__0190
03c98                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c98     C0 01 00 FF 
03c9c     8B 14 06 F6 | 	mov	arg02, ##@LR__5645
03ca0     3B 13 02 F6 | 	mov	arg01, local41
03ca4     74 47 B2 FD | 	call	#__system___string_cmp
03ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cac     C8 00 90 5D |  if_ne	jmp	#LR__0191
03cb0     37 2F 02 F6 | 	mov	local05, local37
03cb4     03 2E 06 F1 | 	add	local05, #3
03cb8     03 2E 66 F0 | 	shl	local05, #3
03cbc     35 00 00 FF 
03cc0     2C E4 05 F1 | 	add	objptr, ##27180
03cc4     F2 30 02 F6 | 	mov	local06, objptr
03cc8     F2 2E 02 F1 | 	add	local05, objptr
03ccc     04 2E 06 F1 | 	add	local05, #4
03cd0     17 3B 02 FB | 	rdlong	local11, local05
03cd4     04 2E 86 F1 | 	sub	local05, #4
03cd8     1D 3D 02 F6 | 	mov	local12, local11
03cdc     01 00 00 FF 
03ce0     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ce4     35 00 00 FF 
03ce8     2C E4 85 F1 | 	sub	objptr, ##27180
03cec     88 00 90 5D |  if_ne	jmp	#LR__0191
03cf0     37 51 02 F6 | 	mov	local22, local37
03cf4     03 50 06 F1 | 	add	local22, #3
03cf8     03 50 66 F0 | 	shl	local22, #3
03cfc     35 00 00 FF 
03d00     2C E4 05 F1 | 	add	objptr, ##27180
03d04     F2 52 02 F6 | 	mov	local23, objptr
03d08     F2 50 02 F1 | 	add	local22, objptr
03d0c     28 13 02 FB | 	rdlong	arg01, local22
03d10     01 14 06 F6 | 	mov	arg02, #1
03d14     35 00 00 FF 
03d18     2C E4 85 F1 | 	sub	objptr, ##27180
03d1c     DC 67 B2 FD | 	call	#__system__Right_S
03d20     FD 12 02 F6 | 	mov	arg01, result1
03d24     C0 01 00 FF 
03d28     90 5C 06 F6 | 	mov	local28, ##@LR__5646
03d2c     2E 3F 02 F6 | 	mov	local13, local28
03d30     1F 15 02 F6 | 	mov	arg02, local13
03d34     E4 46 B2 FD | 	call	#__system___string_cmp
03d38     FD 40 0A F6 | 	mov	local14, result1 wz
03d3c     38 00 90 AD |  if_e	jmp	#LR__0191
03d40     37 39 02 F6 | 	mov	local10, local37
03d44     03 38 06 F1 | 	add	local10, #3
03d48     03 38 66 F0 | 	shl	local10, #3
03d4c     35 00 00 FF 
03d50     2C E4 05 F1 | 	add	objptr, ##27180
03d54     F2 2E 02 F6 | 	mov	local05, objptr
03d58     F2 38 02 F1 | 	add	local10, objptr
03d5c     01 00 00 FF 
03d60     03 30 06 F6 | 	mov	local06, ##515
03d64     04 38 06 F1 | 	add	local10, #4
03d68     01 00 80 FF 
03d6c     1C 07 68 FC | 	wrlong	##515, local10
03d70     35 00 00 FF 
03d74     2C E4 85 F1 | 	sub	objptr, ##27180
03d78                 | LR__0191
03d78                 | ' 
03d78                 | ' ' cd needs special treatment..
03d78                 | ' 
03d78                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d78     C0 01 00 FF 
03d7c     92 14 06 F6 | 	mov	arg02, ##@LR__5647
03d80     3B 13 02 F6 | 	mov	arg01, local41
03d84     94 46 B2 FD | 	call	#__system___string_cmp
03d88     00 FA 0D F2 | 	cmp	result1, #0 wz
03d8c     38 00 90 5D |  if_ne	jmp	#LR__0192
03d90     37 39 02 F6 | 	mov	local10, local37
03d94     01 38 06 F1 | 	add	local10, #1
03d98     03 38 66 F0 | 	shl	local10, #3
03d9c     35 00 00 FF 
03da0     2C E4 05 F1 | 	add	objptr, ##27180
03da4     F2 2E 02 F6 | 	mov	local05, objptr
03da8     F2 38 02 F1 | 	add	local10, objptr
03dac     01 00 00 FF 
03db0     03 30 06 F6 | 	mov	local06, ##515
03db4     04 38 06 F1 | 	add	local10, #4
03db8     01 00 80 FF 
03dbc     1C 07 68 FC | 	wrlong	##515, local10
03dc0     35 00 00 FF 
03dc4     2C E4 85 F1 | 	sub	objptr, ##27180
03dc8                 | LR__0192
03dc8                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03dc8     C0 01 00 FF 
03dcc     95 14 06 F6 | 	mov	arg02, ##@LR__5648
03dd0     3B 13 02 F6 | 	mov	arg01, local41
03dd4     44 46 B2 FD | 	call	#__system___string_cmp
03dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ddc     A4 00 90 5D |  if_ne	jmp	#LR__0193
03de0     37 31 02 F6 | 	mov	local06, local37
03de4     01 30 06 F1 | 	add	local06, #1
03de8     03 30 66 F0 | 	shl	local06, #3
03dec     35 00 00 FF 
03df0     2C E4 05 F1 | 	add	objptr, ##27180
03df4     F2 3C 02 F6 | 	mov	local12, objptr
03df8     F2 30 02 F1 | 	add	local06, objptr
03dfc     18 13 02 FB | 	rdlong	arg01, local06
03e00     C0 01 00 FF 
03e04     99 2E 06 F6 | 	mov	local05, ##@LR__5649
03e08     17 15 02 F6 | 	mov	arg02, local05
03e0c     35 00 00 FF 
03e10     2C E4 85 F1 | 	sub	objptr, ##27180
03e14     04 46 B2 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     64 00 90 5D |  if_ne	jmp	#LR__0193
03e20     37 39 02 F6 | 	mov	local10, local37
03e24     01 38 06 F1 | 	add	local10, #1
03e28     03 38 66 F0 | 	shl	local10, #3
03e2c     35 00 00 FF 
03e30     2C E4 05 F1 | 	add	objptr, ##27180
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     04 38 06 F1 | 	add	local10, #4
03e3c     01 00 80 FF 
03e40     1C 07 68 FC | 	wrlong	##515, local10
03e44     37 39 02 F6 | 	mov	local10, local37
03e48     01 38 06 F1 | 	add	local10, #1
03e4c     03 38 66 F0 | 	shl	local10, #3
03e50     F2 38 02 F1 | 	add	local10, objptr
03e54     C0 01 00 FF 
03e58     9B 30 06 F6 | 	mov	local06, ##@LR__5650
03e5c     1C 31 62 FC | 	wrlong	local06, local10
03e60     37 39 02 F6 | 	mov	local10, local37
03e64     03 38 66 F0 | 	shl	local10, #3
03e68     F2 2E 02 F6 | 	mov	local05, objptr
03e6c     F2 38 02 F1 | 	add	local10, objptr
03e70     C3 30 06 F6 | 	mov	local06, #195
03e74     04 38 06 F1 | 	add	local10, #4
03e78     1C 87 69 FC | 	wrlong	#195, local10
03e7c     35 00 00 FF 
03e80     2C E4 85 F1 | 	sub	objptr, ##27180
03e84                 | LR__0193
03e84                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e84     C0 01 00 FF 
03e88     9E 38 06 F6 | 	mov	local10, ##@LR__5651
03e8c     3B 13 02 F6 | 	mov	arg01, local41
03e90     1C 15 02 F6 | 	mov	arg02, local10
03e94     84 45 B2 FD | 	call	#__system___string_cmp
03e98     00 FA 0D F2 | 	cmp	result1, #0 wz
03e9c     04 01 90 5D |  if_ne	jmp	#LR__0196
03ea0     37 31 02 F6 | 	mov	local06, local37
03ea4     01 30 06 F1 | 	add	local06, #1
03ea8     03 30 66 F0 | 	shl	local06, #3
03eac     35 00 00 FF 
03eb0     2C E4 05 F1 | 	add	objptr, ##27180
03eb4     F2 3C 02 F6 | 	mov	local12, objptr
03eb8     F2 30 02 F1 | 	add	local06, objptr
03ebc     18 13 02 FB | 	rdlong	arg01, local06
03ec0     C0 01 00 FF 
03ec4     A1 2E 06 F6 | 	mov	local05, ##@LR__5652
03ec8     17 39 02 F6 | 	mov	local10, local05
03ecc     1C 15 02 F6 | 	mov	arg02, local10
03ed0     35 00 00 FF 
03ed4     2C E4 85 F1 | 	sub	objptr, ##27180
03ed8     40 45 B2 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     C0 00 90 5D |  if_ne	jmp	#LR__0196
03ee4     37 39 02 F6 | 	mov	local10, local37
03ee8     01 38 06 F1 | 	add	local10, #1
03eec     03 38 66 F0 | 	shl	local10, #3
03ef0     35 00 00 FF 
03ef4     2C E4 05 F1 | 	add	objptr, ##27180
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     01 00 00 FF 
03f04     03 30 06 F6 | 	mov	local06, ##515
03f08     04 38 06 F1 | 	add	local10, #4
03f0c     01 00 80 FF 
03f10     1C 07 68 FC | 	wrlong	##515, local10
03f14     04 38 86 F1 | 	sub	local10, #4
03f18     37 29 02 F6 | 	mov	local02, local37
03f1c     02 28 06 F1 | 	add	local02, #2
03f20     23 8D 02 F6 | 	mov	local52, local17
03f24     01 8C 06 F1 | 	add	local52, #1
03f28     35 00 00 FF 
03f2c     2C E4 85 F1 | 	sub	objptr, ##27180
03f30                 | LR__0194
03f30     46 29 52 F2 | 	cmps	local02, local52 wc
03f34     6C 00 90 3D |  if_ae	jmp	#LR__0195
03f38     14 39 02 F6 | 	mov	local10, local02
03f3c     03 38 66 F0 | 	shl	local10, #3
03f40     35 00 00 FF 
03f44     2C E4 05 F1 | 	add	objptr, ##27180
03f48     F2 38 02 F1 | 	add	local10, objptr
03f4c     1C 8F 02 FB | 	rdlong	local53, local10
03f50     37 39 02 F6 | 	mov	local10, local37
03f54     01 38 06 F1 | 	add	local10, #1
03f58     03 38 66 F0 | 	shl	local10, #3
03f5c     F2 2E 02 F6 | 	mov	local05, objptr
03f60     F2 38 02 F1 | 	add	local10, objptr
03f64     37 3B 02 F6 | 	mov	local11, local37
03f68     01 3A 06 F1 | 	add	local11, #1
03f6c     1D 41 02 F6 | 	mov	local14, local11
03f70     03 40 66 F0 | 	shl	local14, #3
03f74     F2 3E 02 F6 | 	mov	local13, objptr
03f78     F2 40 02 F1 | 	add	local14, objptr
03f7c     20 13 02 FB | 	rdlong	arg01, local14
03f80     47 3D 02 F6 | 	mov	local12, local53
03f84     1E 15 02 F6 | 	mov	arg02, local12
03f88     35 00 00 FF 
03f8c     2C E4 85 F1 | 	sub	objptr, ##27180
03f90     BC 44 B2 FD | 	call	#__system___string_concat
03f94     FD 30 02 F6 | 	mov	local06, result1
03f98     1C 31 62 FC | 	wrlong	local06, local10
03f9c     01 28 06 F1 | 	add	local02, #1
03fa0     8C FF 9F FD | 	jmp	#LR__0194
03fa4                 | LR__0195
03fa4                 | LR__0196
03fa4                 | ' 
03fa4                 | ' ' determine a type of the line and compile it
03fa4                 | ' 
03fa4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03fa4     35 00 00 FF 
03fa8     2C E4 05 F1 | 	add	objptr, ##27180
03fac     F2 12 02 FB | 	rdlong	arg01, objptr
03fb0     35 00 00 FF 
03fb4     2C E4 85 F1 | 	sub	objptr, ##27180
03fb8     C8 31 B0 FD | 	call	#_isdec
03fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc0     30 00 90 AD |  if_e	jmp	#LR__0197
03fc4     35 00 00 FF 
03fc8     2C E4 05 F1 | 	add	objptr, ##27180
03fcc     F2 12 02 FB | 	rdlong	arg01, objptr
03fd0     35 00 00 FF 
03fd4     2C E4 85 F1 | 	sub	objptr, ##27180
03fd8     00 14 06 F6 | 	mov	arg02, #0
03fdc     08 79 B2 FD | 	call	#__system____builtin_atoi
03fe0     52 00 00 FF 
03fe4     08 E5 05 F1 | 	add	objptr, ##42248
03fe8     F2 FA 61 FC | 	wrlong	result1, objptr
03fec     52 00 00 FF 
03ff0     08 E5 85 F1 | 	sub	objptr, ##42248
03ff4                 | LR__0197
03ff4                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ff4     52 00 00 FF 
03ff8     08 E5 05 F1 | 	add	objptr, ##42248
03ffc     F2 2C 02 FB | 	rdlong	local04, objptr
04000     52 00 00 FF 
04004     08 E5 85 F1 | 	sub	objptr, ##42248
04008     01 2C 16 F2 | 	cmp	local04, #1 wc
0400c     40 00 90 CD |  if_b	jmp	#LR__0198
04010     01 46 0E F2 | 	cmp	local17, #1 wz
04014     37 00 00 AF 
04018     44 E4 05 A1 |  if_e	add	objptr, ##28228
0401c     F2 2E 02 AB |  if_e	rdlong	local05, objptr
04020     37 00 00 AF 
04024     44 E4 85 A1 |  if_e	sub	objptr, ##28228
04028     17 39 02 A6 |  if_e	mov	local10, local05
0402c     03 38 0E A2 |  if_e	cmp	local10, #3 wz
04030     1C 00 90 5D |  if_ne	jmp	#LR__0198
04034     52 00 00 FF 
04038     08 E5 05 F1 | 	add	objptr, ##42248
0403c     F2 12 02 FB | 	rdlong	arg01, objptr
04040     52 00 00 FF 
04044     08 E5 85 F1 | 	sub	objptr, ##42248
04048     E4 32 B0 FD | 	call	#_deleteline
0404c     C8 03 90 FD | 	jmp	#LR__0209
04050                 | LR__0198
04050                 | ' 
04050                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
04050     37 00 00 FF 
04054     44 E4 05 F1 | 	add	objptr, ##28228
04058     F2 2C 0A FB | 	rdlong	local04, objptr wz
0405c     37 00 00 FF 
04060     44 E4 85 F1 | 	sub	objptr, ##28228
04064     20 00 90 AD |  if_e	jmp	#LR__0199
04068     37 00 00 FF 
0406c     44 E4 05 F1 | 	add	objptr, ##28228
04070     F2 2E 02 FB | 	rdlong	local05, objptr
04074     37 00 00 FF 
04078     44 E4 85 F1 | 	sub	objptr, ##28228
0407c     17 39 02 F6 | 	mov	local10, local05
04080     03 38 0E F2 | 	cmp	local10, #3 wz
04084     C0 00 90 5D |  if_ne	jmp	#LR__0201
04088                 | LR__0199
04088     35 00 00 FF 
0408c     40 E4 05 F1 | 	add	objptr, ##27200
04090     F2 3C 02 FB | 	rdlong	local12, objptr
04094     35 00 00 FF 
04098     40 E4 85 F1 | 	sub	objptr, ##27200
0409c     1B 3C 0E F2 | 	cmp	local12, #27 wz
040a0     A4 00 90 AD |  if_e	jmp	#LR__0201
040a4     52 00 00 FF 
040a8     08 E5 05 F1 | 	add	objptr, ##42248
040ac     F2 12 02 FB | 	rdlong	arg01, objptr
040b0     1B 00 00 FF 
040b4     C4 E4 85 F1 | 	sub	objptr, ##14020
040b8     F2 16 02 FB | 	rdlong	arg03, objptr
040bc     37 00 00 FF 
040c0     44 E4 85 F1 | 	sub	objptr, ##28228
040c4     00 14 06 F6 | 	mov	arg02, #0
040c8     08 47 B0 FD | 	call	#_compile
040cc     FD 26 0A F6 | 	mov	local01, result1 wz
040d0                 | '   err=compile(linenum,0,cont) 
040d0                 | '   if err<>0 then printerror(err,linenum): goto 101
040d0     20 00 90 AD |  if_e	jmp	#LR__0200
040d4     52 00 00 FF 
040d8     08 E5 05 F1 | 	add	objptr, ##42248
040dc     F2 14 02 FB | 	rdlong	arg02, objptr
040e0     52 00 00 FF 
040e4     08 E5 85 F1 | 	sub	objptr, ##42248
040e8     13 13 02 F6 | 	mov	arg01, local01
040ec     AC 08 B2 FD | 	call	#_printerror
040f0     44 03 90 FD | 	jmp	#LR__0210
040f4                 | LR__0200
040f4                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
040f4     52 00 00 FF 
040f8     4C E5 05 F1 | 	add	objptr, ##42316
040fc     F2 12 02 FB | 	rdlong	arg01, objptr
04100     52 00 00 FF 
04104     4C E5 85 F1 | 	sub	objptr, ##42316
04108     C0 01 00 FF 
0410c     A3 14 06 F6 | 	mov	arg02, ##@LR__5653
04110     08 43 B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     FC 02 90 AD |  if_e	jmp	#LR__0209
0411c     52 00 00 FF 
04120     4C E5 05 F1 | 	add	objptr, ##42316
04124     F2 2C 02 FB | 	rdlong	local04, objptr
04128     1B 00 00 FF 
0412c     10 E5 85 F1 | 	sub	objptr, ##14096
04130     F2 2C 62 FC | 	wrlong	local04, objptr
04134     08 E4 05 F1 | 	add	objptr, #8
04138     F2 08 68 FC | 	wrlong	#4, objptr
0413c     37 00 00 FF 
04140     44 E4 85 F1 | 	sub	objptr, ##28228
04144     B0 D7 9F FD | 	jmp	#LR__0070
04148                 | LR__0201
04148                 | '       							
04148                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04148     37 00 00 FF 
0414c     44 E4 05 F1 | 	add	objptr, ##28228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     37 00 00 FF 
04158     44 E4 85 F1 | 	sub	objptr, ##28228
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     37 00 00 5F 
04164     44 E4 05 51 |  if_ne	add	objptr, ##28228
04168     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0416c     37 00 00 5F 
04170     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04174     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04178     C0 00 90 5D |  if_ne	jmp	#LR__0203
0417c     35 00 00 FF 
04180     38 E4 05 F1 | 	add	objptr, ##27192
04184     F2 3C 02 FB | 	rdlong	local12, objptr
04188     35 00 00 FF 
0418c     38 E4 85 F1 | 	sub	objptr, ##27192
04190     1B 3C 0E F2 | 	cmp	local12, #27 wz
04194     A4 00 90 AD |  if_e	jmp	#LR__0203
04198     52 00 00 FF 
0419c     08 E5 05 F1 | 	add	objptr, ##42248
041a0     F2 12 02 FB | 	rdlong	arg01, objptr
041a4     1B 00 00 FF 
041a8     C4 E4 85 F1 | 	sub	objptr, ##14020
041ac     F2 16 02 FB | 	rdlong	arg03, objptr
041b0     37 00 00 FF 
041b4     44 E4 85 F1 | 	sub	objptr, ##28228
041b8     00 14 06 F6 | 	mov	arg02, #0
041bc     14 46 B0 FD | 	call	#_compile
041c0     FD 26 0A F6 | 	mov	local01, result1 wz
041c4                 | '   err=compile(linenum,0,cont) 
041c4                 | '   if err<>0 then printerror(err,linenum): goto 101
041c4     20 00 90 AD |  if_e	jmp	#LR__0202
041c8     52 00 00 FF 
041cc     08 E5 05 F1 | 	add	objptr, ##42248
041d0     F2 14 02 FB | 	rdlong	arg02, objptr
041d4     52 00 00 FF 
041d8     08 E5 85 F1 | 	sub	objptr, ##42248
041dc     13 13 02 F6 | 	mov	arg01, local01
041e0     B8 07 B2 FD | 	call	#_printerror
041e4     50 02 90 FD | 	jmp	#LR__0210
041e8                 | LR__0202
041e8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
041e8     52 00 00 FF 
041ec     4C E5 05 F1 | 	add	objptr, ##42316
041f0     F2 12 02 FB | 	rdlong	arg01, objptr
041f4     52 00 00 FF 
041f8     4C E5 85 F1 | 	sub	objptr, ##42316
041fc     C0 01 00 FF 
04200     A4 14 06 F6 | 	mov	arg02, ##@LR__5654
04204     14 42 B2 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     08 02 90 AD |  if_e	jmp	#LR__0209
04210     52 00 00 FF 
04214     4C E5 05 F1 | 	add	objptr, ##42316
04218     F2 2C 02 FB | 	rdlong	local04, objptr
0421c     1B 00 00 FF 
04220     10 E5 85 F1 | 	sub	objptr, ##14096
04224     F2 2C 62 FC | 	wrlong	local04, objptr
04228     08 E4 05 F1 | 	add	objptr, #8
0422c     F2 08 68 FC | 	wrlong	#4, objptr
04230     37 00 00 FF 
04234     44 E4 85 F1 | 	sub	objptr, ##28228
04238     BC D6 9F FD | 	jmp	#LR__0070
0423c                 | LR__0203
0423c                 | ' 							 
0423c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0423c     37 00 00 FF 
04240     44 E4 05 F1 | 	add	objptr, ##28228
04244     F2 2C 0A FB | 	rdlong	local04, objptr wz
04248     37 00 00 FF 
0424c     44 E4 85 F1 | 	sub	objptr, ##28228
04250     37 00 00 5F 
04254     44 E4 05 51 |  if_ne	add	objptr, ##28228
04258     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0425c     37 00 00 5F 
04260     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04264     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04268     35 00 00 AF 
0426c     40 E4 05 A1 |  if_e	add	objptr, ##27200
04270     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04274     35 00 00 AF 
04278     40 E4 85 A1 |  if_e	sub	objptr, ##27200
0427c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04280     A4 00 90 5D |  if_ne	jmp	#LR__0205
04284     52 00 00 FF 
04288     08 E5 05 F1 | 	add	objptr, ##42248
0428c     F2 12 02 FB | 	rdlong	arg01, objptr
04290     1B 00 00 FF 
04294     C4 E4 85 F1 | 	sub	objptr, ##14020
04298     F2 16 02 FB | 	rdlong	arg03, objptr
0429c     37 00 00 FF 
042a0     44 E4 85 F1 | 	sub	objptr, ##28228
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     F0 45 B0 FD | 	call	#_compile_assign
042ac     FD 26 0A F6 | 	mov	local01, result1 wz
042b0                 | '   err=compile_assign(linenum,0,cont)
042b0                 | '   if err<>0 then printerror(err,linenum): goto 101
042b0     20 00 90 AD |  if_e	jmp	#LR__0204
042b4     52 00 00 FF 
042b8     08 E5 05 F1 | 	add	objptr, ##42248
042bc     F2 14 02 FB | 	rdlong	arg02, objptr
042c0     52 00 00 FF 
042c4     08 E5 85 F1 | 	sub	objptr, ##42248
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     CC 06 B2 FD | 	call	#_printerror
042d0     64 01 90 FD | 	jmp	#LR__0210
042d4                 | LR__0204
042d4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
042d4     52 00 00 FF 
042d8     4C E5 05 F1 | 	add	objptr, ##42316
042dc     F2 12 02 FB | 	rdlong	arg01, objptr
042e0     52 00 00 FF 
042e4     4C E5 85 F1 | 	sub	objptr, ##42316
042e8     C0 01 00 FF 
042ec     A5 14 06 F6 | 	mov	arg02, ##@LR__5655
042f0     28 41 B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     1C 01 90 AD |  if_e	jmp	#LR__0209
042fc     52 00 00 FF 
04300     4C E5 05 F1 | 	add	objptr, ##42316
04304     F2 2C 02 FB | 	rdlong	local04, objptr
04308     1B 00 00 FF 
0430c     10 E5 85 F1 | 	sub	objptr, ##14096
04310     F2 2C 62 FC | 	wrlong	local04, objptr
04314     08 E4 05 F1 | 	add	objptr, #8
04318     F2 08 68 FC | 	wrlong	#4, objptr
0431c     37 00 00 FF 
04320     44 E4 85 F1 | 	sub	objptr, ##28228
04324     D0 D5 9F FD | 	jmp	#LR__0070
04328                 | LR__0205
04328                 | '     							 
04328                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04328     37 00 00 FF 
0432c     44 E4 05 F1 | 	add	objptr, ##28228
04330     F2 2C 02 FB | 	rdlong	local04, objptr
04334     37 00 00 FF 
04338     44 E4 85 F1 | 	sub	objptr, ##28228
0433c     01 2C 0E F2 | 	cmp	local04, #1 wz
04340     37 00 00 5F 
04344     44 E4 05 51 |  if_ne	add	objptr, ##28228
04348     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0434c     37 00 00 5F 
04350     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04354     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04358     35 00 00 AF 
0435c     38 E4 05 A1 |  if_e	add	objptr, ##27192
04360     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04364     35 00 00 AF 
04368     38 E4 85 A1 |  if_e	sub	objptr, ##27192
0436c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04370     A4 00 90 5D |  if_ne	jmp	#LR__0208
04374     52 00 00 FF 
04378     08 E5 05 F1 | 	add	objptr, ##42248
0437c     F2 12 02 FB | 	rdlong	arg01, objptr
04380     1B 00 00 FF 
04384     C4 E4 85 F1 | 	sub	objptr, ##14020
04388     F2 16 02 FB | 	rdlong	arg03, objptr
0438c     37 00 00 FF 
04390     44 E4 85 F1 | 	sub	objptr, ##28228
04394     00 14 06 F6 | 	mov	arg02, #0
04398     00 45 B0 FD | 	call	#_compile_assign
0439c     FD 26 0A F6 | 	mov	local01, result1 wz
043a0                 | '   err=compile_assign(linenum,0,cont) 
043a0                 | '   if err<>0 then printerror(err,linenum): goto 101
043a0     20 00 90 AD |  if_e	jmp	#LR__0206
043a4     52 00 00 FF 
043a8     08 E5 05 F1 | 	add	objptr, ##42248
043ac     F2 14 02 FB | 	rdlong	arg02, objptr
043b0     52 00 00 FF 
043b4     08 E5 85 F1 | 	sub	objptr, ##42248
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     DC 05 B2 FD | 	call	#_printerror
043c0     74 00 90 FD | 	jmp	#LR__0210
043c4                 | LR__0206
043c4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
043c4     52 00 00 FF 
043c8     4C E5 05 F1 | 	add	objptr, ##42316
043cc     F2 12 02 FB | 	rdlong	arg01, objptr
043d0     52 00 00 FF 
043d4     4C E5 85 F1 | 	sub	objptr, ##42316
043d8     C0 01 00 FF 
043dc     A6 14 06 F6 | 	mov	arg02, ##@LR__5656
043e0     38 40 B2 FD | 	call	#__system___string_cmp
043e4     00 FA 4D F2 | 	cmps	result1, #0 wz
043e8     2C 00 90 AD |  if_e	jmp	#LR__0207
043ec     52 00 00 FF 
043f0     4C E5 05 F1 | 	add	objptr, ##42316
043f4     F2 2C 02 FB | 	rdlong	local04, objptr
043f8     1B 00 00 FF 
043fc     10 E5 85 F1 | 	sub	objptr, ##14096
04400     F2 2C 62 FC | 	wrlong	local04, objptr
04404     08 E4 05 F1 | 	add	objptr, #8
04408     F2 08 68 FC | 	wrlong	#4, objptr
0440c     37 00 00 FF 
04410     44 E4 85 F1 | 	sub	objptr, ##28228
04414     E0 D4 9F FD | 	jmp	#LR__0070
04418                 | LR__0207
04418                 | LR__0208
04418                 | LR__0209
04418                 | ' 
04418                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04418     52 00 00 FF 
0441c     08 E5 05 F1 | 	add	objptr, ##42248
04420     F2 2C 0A FB | 	rdlong	local04, objptr wz
04424     52 00 00 FF 
04428     08 E5 85 F1 | 	sub	objptr, ##42248
0442c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04430     02 12 06 F6 | 	mov	arg01, #2
04434     78 93 B0 FD | 	call	#_execute_line
04438                 | LR__0210
04438                 | '   execute_line(2)
04438                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04438     52 00 00 FF 
0443c     2C E5 05 F1 | 	add	objptr, ##42284
04440     F2 2C 0A FB | 	rdlong	local04, objptr wz
04444     52 00 00 FF 
04448     2C E5 85 F1 | 	sub	objptr, ##42284
0444c     20 00 90 5D |  if_ne	jmp	#LR__0211
04450     C0 01 00 FF 
04454     A7 12 06 F6 | 	mov	arg01, ##@LR__5657
04458                 | ' 
04458                 | ' write(text)
04458     FC 26 B2 FD | 	call	#_hg010b_spin2_write
0445c                 | ' crlf
0445c     98 2B B2 FD | 	call	#_hg010b_spin2_crlf
04460     C0 01 00 FF 
04464     A8 12 06 F6 | 	mov	arg01, ##@LR__5658
04468                 | ' 
04468                 | ' write(text)
04468     EC 26 B2 FD | 	call	#_hg010b_spin2_write
0446c                 | ' crlf
0446c     88 2B B2 FD | 	call	#_hg010b_spin2_crlf
04470                 | LR__0211
04470                 | '     if inload=1 andalso err>0 then print fullline$
04470     52 00 00 FF 
04474     2C E5 05 F1 | 	add	objptr, ##42284
04478     F2 2C 02 FB | 	rdlong	local04, objptr
0447c     52 00 00 FF 
04480     2C E5 85 F1 | 	sub	objptr, ##42284
04484     01 2C 0E F2 | 	cmp	local04, #1 wz
04488     54 00 90 5D |  if_ne	jmp	#LR__0212
0448c     01 26 56 F2 | 	cmps	local01, #1 wc
04490     4C 00 90 CD |  if_b	jmp	#LR__0212
04494     00 12 06 F6 | 	mov	arg01, #0
04498     08 9C B2 FD | 	call	#__system___getiolock_0625
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     50 3F B2 FD | 	call	#__system___lockmem
044a4     37 00 00 FF 
044a8     40 E4 05 F1 | 	add	objptr, ##28224
044ac     F2 14 02 FB | 	rdlong	arg02, objptr
044b0     37 00 00 FF 
044b4     40 E4 85 F1 | 	sub	objptr, ##28224
044b8     00 12 06 F6 | 	mov	arg01, #0
044bc     00 16 06 F6 | 	mov	arg03, #0
044c0     28 4C B2 FD | 	call	#__system___basic_print_string
044c4     00 12 06 F6 | 	mov	arg01, #0
044c8     0A 14 06 F6 | 	mov	arg02, #10
044cc     00 16 06 F6 | 	mov	arg03, #0
044d0     C0 4B B2 FD | 	call	#__system___basic_print_char
044d4     00 12 06 F6 | 	mov	arg01, #0
044d8     C8 9B B2 FD | 	call	#__system___getiolock_0625
044dc     FD 00 68 FC | 	wrlong	#0, result1
044e0                 | LR__0212
044e0                 | LR__0213
044e0     A7 F0 03 F6 | 	mov	ptra, fp
044e4     B2 00 A0 FD | 	call	#popregs_
044e8                 | _interpret_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '
044ec                 | ' '                          END OF TOKENIZER MAIN CODE
044ec                 | ' '
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' ' Check if the part is an operator, return a token or 0 if not found
044ec                 | ' 
044ec                 | ' function isoperator(s as string) as ubyte
044ec                 | _isoperator
044ec     01 4A 05 F6 | 	mov	COUNT_, #1
044f0     A8 00 A0 FD | 	call	#pushregs_
044f4                 | ' 
044f4                 | ' select case s
044f4     09 27 02 F6 | 	mov	local01, arg01
044f8     C0 01 00 FF 
044fc     AE 14 06 F6 | 	mov	arg02, ##@LR__5659
04500     13 13 02 F6 | 	mov	arg01, local01
04504     14 3F B2 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     FC 01 90 AD |  if_e	jmp	#LR__0220
04510     C0 01 00 FF 
04514     B0 14 06 F6 | 	mov	arg02, ##@LR__5660
04518     13 13 02 F6 | 	mov	arg01, local01
0451c     FC 3E B2 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     EC 01 90 AD |  if_e	jmp	#LR__0221
04528     C0 01 00 FF 
0452c     B2 14 06 F6 | 	mov	arg02, ##@LR__5661
04530     13 13 02 F6 | 	mov	arg01, local01
04534     E4 3E B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     DC 01 90 AD |  if_e	jmp	#LR__0222
04540     C0 01 00 FF 
04544     B5 14 06 F6 | 	mov	arg02, ##@LR__5662
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     CC 3E B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     CC 01 90 AD |  if_e	jmp	#LR__0223
04558     C0 01 00 FF 
0455c     B9 14 06 F6 | 	mov	arg02, ##@LR__5663
04560     13 13 02 F6 | 	mov	arg01, local01
04564     B4 3E B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     BC 01 90 AD |  if_e	jmp	#LR__0224
04570     C0 01 00 FF 
04574     BB 14 06 F6 | 	mov	arg02, ##@LR__5664
04578     13 13 02 F6 | 	mov	arg01, local01
0457c     9C 3E B2 FD | 	call	#__system___string_cmp
04580     00 FA 0D F2 | 	cmp	result1, #0 wz
04584     AC 01 90 AD |  if_e	jmp	#LR__0225
04588     C0 01 00 FF 
0458c     BD 14 06 F6 | 	mov	arg02, ##@LR__5665
04590     13 13 02 F6 | 	mov	arg01, local01
04594     84 3E B2 FD | 	call	#__system___string_cmp
04598     00 FA 0D F2 | 	cmp	result1, #0 wz
0459c     9C 01 90 AD |  if_e	jmp	#LR__0226
045a0     C0 01 00 FF 
045a4     C1 14 06 F6 | 	mov	arg02, ##@LR__5666
045a8     13 13 02 F6 | 	mov	arg01, local01
045ac     6C 3E B2 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     8C 01 90 AD |  if_e	jmp	#LR__0227
045b8     C0 01 00 FF 
045bc     C5 14 06 F6 | 	mov	arg02, ##@LR__5667
045c0     13 13 02 F6 | 	mov	arg01, local01
045c4     54 3E B2 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     7C 01 90 AD |  if_e	jmp	#LR__0228
045d0     C0 01 00 FF 
045d4     C9 14 06 F6 | 	mov	arg02, ##@LR__5668
045d8     13 13 02 F6 | 	mov	arg01, local01
045dc     3C 3E B2 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     6C 01 90 AD |  if_e	jmp	#LR__0229
045e8     C0 01 00 FF 
045ec     CD 14 06 F6 | 	mov	arg02, ##@LR__5669
045f0     13 13 02 F6 | 	mov	arg01, local01
045f4     24 3E B2 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     5C 01 90 AD |  if_e	jmp	#LR__0230
04600     C0 01 00 FF 
04604     D1 14 06 F6 | 	mov	arg02, ##@LR__5670
04608     13 13 02 F6 | 	mov	arg01, local01
0460c     0C 3E B2 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     4C 01 90 AD |  if_e	jmp	#LR__0231
04618     C0 01 00 FF 
0461c     D3 14 06 F6 | 	mov	arg02, ##@LR__5671
04620     13 13 02 F6 | 	mov	arg01, local01
04624     F4 3D B2 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     3C 01 90 AD |  if_e	jmp	#LR__0232
04630     C0 01 00 FF 
04634     D7 14 06 F6 | 	mov	arg02, ##@LR__5672
04638     13 13 02 F6 | 	mov	arg01, local01
0463c     DC 3D B2 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     2C 01 90 AD |  if_e	jmp	#LR__0233
04648     C0 01 00 FF 
0464c     D9 14 06 F6 | 	mov	arg02, ##@LR__5673
04650     13 13 02 F6 | 	mov	arg01, local01
04654     C4 3D B2 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     1C 01 90 AD |  if_e	jmp	#LR__0234
04660     C0 01 00 FF 
04664     DB 14 06 F6 | 	mov	arg02, ##@LR__5674
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     AC 3D B2 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     0C 01 90 AD |  if_e	jmp	#LR__0235
04678     C0 01 00 FF 
0467c     DE 14 06 F6 | 	mov	arg02, ##@LR__5675
04680     13 13 02 F6 | 	mov	arg01, local01
04684     94 3D B2 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     FC 00 90 AD |  if_e	jmp	#LR__0236
04690     C0 01 00 FF 
04694     E1 14 06 F6 | 	mov	arg02, ##@LR__5676
04698     13 13 02 F6 | 	mov	arg01, local01
0469c     7C 3D B2 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     EC 00 90 AD |  if_e	jmp	#LR__0237
046a8     C0 01 00 FF 
046ac     E3 14 06 F6 | 	mov	arg02, ##@LR__5677
046b0     13 13 02 F6 | 	mov	arg01, local01
046b4     64 3D B2 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     DC 00 90 AD |  if_e	jmp	#LR__0238
046c0     C0 01 00 FF 
046c4     E5 14 06 F6 | 	mov	arg02, ##@LR__5678
046c8     13 13 02 F6 | 	mov	arg01, local01
046cc     4C 3D B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     CC 00 90 AD |  if_e	jmp	#LR__0239
046d8     C0 01 00 FF 
046dc     E8 14 06 F6 | 	mov	arg02, ##@LR__5679
046e0     13 13 02 F6 | 	mov	arg01, local01
046e4     34 3D B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     BC 00 90 AD |  if_e	jmp	#LR__0240
046f0     C0 01 00 FF 
046f4     EB 14 06 F6 | 	mov	arg02, ##@LR__5680
046f8     13 13 02 F6 | 	mov	arg01, local01
046fc     1C 3D B2 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     AC 00 90 AD |  if_e	jmp	#LR__0241
04708     B0 00 90 FD | 	jmp	#LR__0242
0470c                 | LR__0220
0470c     01 FA 05 F6 | 	mov	result1, #1
04710     AC 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0221
04714     02 FA 05 F6 | 	mov	result1, #2
04718     A4 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0222
0471c     03 FA 05 F6 | 	mov	result1, #3
04720     9C 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0223
04724     04 FA 05 F6 | 	mov	result1, #4
04728     94 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0224
0472c     05 FA 05 F6 | 	mov	result1, #5
04730     8C 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0225
04734     06 FA 05 F6 | 	mov	result1, #6
04738     84 00 90 FD | 	jmp	#LR__0243
0473c                 | LR__0226
0473c     07 FA 05 F6 | 	mov	result1, #7
04740     7C 00 90 FD | 	jmp	#LR__0243
04744                 | LR__0227
04744     08 FA 05 F6 | 	mov	result1, #8
04748     74 00 90 FD | 	jmp	#LR__0243
0474c                 | LR__0228
0474c     09 FA 05 F6 | 	mov	result1, #9
04750     6C 00 90 FD | 	jmp	#LR__0243
04754                 | LR__0229
04754     0A FA 05 F6 | 	mov	result1, #10
04758     64 00 90 FD | 	jmp	#LR__0243
0475c                 | LR__0230
0475c     0B FA 05 F6 | 	mov	result1, #11
04760     5C 00 90 FD | 	jmp	#LR__0243
04764                 | LR__0231
04764     0C FA 05 F6 | 	mov	result1, #12
04768     54 00 90 FD | 	jmp	#LR__0243
0476c                 | LR__0232
0476c     0D FA 05 F6 | 	mov	result1, #13
04770     4C 00 90 FD | 	jmp	#LR__0243
04774                 | LR__0233
04774     0E FA 05 F6 | 	mov	result1, #14
04778     44 00 90 FD | 	jmp	#LR__0243
0477c                 | LR__0234
0477c     1B FA 05 F6 | 	mov	result1, #27
04780     3C 00 90 FD | 	jmp	#LR__0243
04784                 | LR__0235
04784     27 FA 05 F6 | 	mov	result1, #39
04788     34 00 90 FD | 	jmp	#LR__0243
0478c                 | LR__0236
0478c     26 FA 05 F6 | 	mov	result1, #38
04790     2C 00 90 FD | 	jmp	#LR__0243
04794                 | LR__0237
04794     10 FA 05 F6 | 	mov	result1, #16
04798     24 00 90 FD | 	jmp	#LR__0243
0479c                 | LR__0238
0479c     0F FA 05 F6 | 	mov	result1, #15
047a0     1C 00 90 FD | 	jmp	#LR__0243
047a4                 | LR__0239
047a4     2A FA 05 F6 | 	mov	result1, #42
047a8     14 00 90 FD | 	jmp	#LR__0243
047ac                 | LR__0240
047ac     28 FA 05 F6 | 	mov	result1, #40
047b0     0C 00 90 FD | 	jmp	#LR__0243
047b4                 | LR__0241
047b4     29 FA 05 F6 | 	mov	result1, #41
047b8     04 00 90 FD | 	jmp	#LR__0243
047bc                 | LR__0242
047bc     00 FA 05 F6 | 	mov	result1, #0
047c0                 | LR__0243
047c0     A7 F0 03 F6 | 	mov	ptra, fp
047c4     B2 00 A0 FD | 	call	#popregs_
047c8                 | _isoperator_ret
047c8     2D 00 64 FD | 	ret
047cc                 | 
047cc                 | ' 
047cc                 | ' ' Check if the part is a channel#, return a token or 0 if not found
047cc                 | ' 
047cc                 | ' function ischannel(s as string) as ulong
047cc                 | _ischannel
047cc     02 4A 05 F6 | 	mov	COUNT_, #2
047d0     A8 00 A0 FD | 	call	#pushregs_
047d4                 | ' if left$(s,1)<>"#" then return 0
047d4     09 27 02 F6 | 	mov	local01, arg01
047d8     01 14 06 F6 | 	mov	arg02, #1
047dc     94 5C B2 FD | 	call	#__system__Left_S
047e0     FD 12 02 F6 | 	mov	arg01, result1
047e4     C0 01 00 FF 
047e8     EE 14 06 F6 | 	mov	arg02, ##@LR__5681
047ec     2C 3C B2 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     00 FA 05 56 |  if_ne	mov	result1, #0
047f8     AC 00 90 5D |  if_ne	jmp	#LR__0254
047fc                 | ' if len(s)<>2 then return 0
047fc     13 13 02 F6 | 	mov	arg01, local01
04800     09 29 02 F6 | 	mov	local02, arg01
04804     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04808                 | LR__0250
04808     14 FB C9 FA | 	rdbyte	result1, local02 wz
0480c     01 28 06 51 |  if_ne	add	local02, #1
04810     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04814                 | LR__0251
04814     09 29 82 F1 | 	sub	local02, arg01
04818     14 FB 01 F6 | 	mov	result1, local02
0481c     02 FA 0D F2 | 	cmp	result1, #2 wz
04820     00 FA 05 56 |  if_ne	mov	result1, #0
04824     80 00 90 5D |  if_ne	jmp	#LR__0254
04828                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04828     13 13 02 F6 | 	mov	arg01, local01
0482c     01 14 06 F6 | 	mov	arg02, #1
04830     C8 5C B2 FD | 	call	#__system__Right_S
04834     FD 12 02 F6 | 	mov	arg01, result1
04838     C0 01 00 FF 
0483c     F0 14 06 F6 | 	mov	arg02, ##@LR__5682
04840     D8 3B B2 FD | 	call	#__system___string_cmp
04844     00 FA 55 F2 | 	cmps	result1, #0 wc
04848     24 00 90 CD |  if_b	jmp	#LR__0252
0484c     13 13 02 F6 | 	mov	arg01, local01
04850     01 14 06 F6 | 	mov	arg02, #1
04854     A4 5C B2 FD | 	call	#__system__Right_S
04858     FD 12 02 F6 | 	mov	arg01, result1
0485c     C0 01 00 FF 
04860     F2 14 06 F6 | 	mov	arg02, ##@LR__5683
04864     B4 3B B2 FD | 	call	#__system___string_cmp
04868     01 FA 55 F2 | 	cmps	result1, #1 wc
0486c     08 00 90 CD |  if_b	jmp	#LR__0253
04870                 | LR__0252
04870     00 FA 05 F6 | 	mov	result1, #0
04874     30 00 90 FD | 	jmp	#LR__0254
04878                 | LR__0253
04878                 | ' return token_channel+val(right$(s,1))
04878     13 13 02 F6 | 	mov	arg01, local01
0487c     01 14 06 F6 | 	mov	arg02, #1
04880     78 5C B2 FD | 	call	#__system__Right_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     F4 71 B2 FD | 	call	#__system____builtin_atof
0488c     FD 14 02 F6 | 	mov	arg02, result1
04890     00 18 21 FF 
04894     00 12 06 F6 | 	mov	arg01, ##1110441984
04898     04 66 B2 FD | 	call	#__system___float_add
0489c     FD 12 02 F6 | 	mov	arg01, result1
048a0     00 14 06 F6 | 	mov	arg02, #0
048a4     90 6E B2 FD | 	call	#__system___float_tointeger
048a8                 | LR__0254
048a8     A7 F0 03 F6 | 	mov	ptra, fp
048ac     B2 00 A0 FD | 	call	#popregs_
048b0                 | _ischannel_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | ' 
048b4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
048b4                 | ' ' todo: add spin2/pasm constants for pin control
048b4                 | ' 
048b4                 | ' function isconstant(s as string) as integer
048b4                 | _isconstant
048b4     01 4A 05 F6 | 	mov	COUNT_, #1
048b8     A8 00 A0 FD | 	call	#pushregs_
048bc                 | ' 
048bc                 | ' select case s
048bc     09 27 02 F6 | 	mov	local01, arg01
048c0     C0 01 00 FF 
048c4     F4 14 06 F6 | 	mov	arg02, ##@LR__5684
048c8     13 13 02 F6 | 	mov	arg01, local01
048cc     4C 3B B2 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     34 00 90 AD |  if_e	jmp	#LR__0260
048d8     C0 01 00 FF 
048dc     FA 14 06 F6 | 	mov	arg02, ##@LR__5685
048e0     13 13 02 F6 | 	mov	arg01, local01
048e4     34 3B B2 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     24 00 90 AD |  if_e	jmp	#LR__0261
048f0     C0 01 00 FF 
048f4     01 15 06 F6 | 	mov	arg02, ##@LR__5686
048f8     13 13 02 F6 | 	mov	arg01, local01
048fc     1C 3B B2 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     14 00 90 AD |  if_e	jmp	#LR__0262
04908     18 00 90 FD | 	jmp	#LR__0263
0490c                 | LR__0260
0490c     01 FA 05 F6 | 	mov	result1, #1
04910     14 00 90 FD | 	jmp	#LR__0264
04914                 | LR__0261
04914     02 FA 05 F6 | 	mov	result1, #2
04918     0C 00 90 FD | 	jmp	#LR__0264
0491c                 | LR__0262
0491c     04 FA 05 F6 | 	mov	result1, #4
04920     04 00 90 FD | 	jmp	#LR__0264
04924                 | LR__0263
04924     00 FA 05 F6 | 	mov	result1, #0
04928                 | LR__0264
04928     A7 F0 03 F6 | 	mov	ptra, fp
0492c     B2 00 A0 FD | 	call	#popregs_
04930                 | _isconstant_ret
04930     2D 00 64 FD | 	ret
04934                 | 
04934                 | ' 
04934                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04934                 | ' 
04934                 | ' function isnotename(s as string) as ulong
04934                 | _isnotename
04934     07 4A 05 F6 | 	mov	COUNT_, #7
04938     A8 00 A0 FD | 	call	#pushregs_
0493c                 | ' if left$(s,1)<>"#" then return 0
0493c     09 27 02 F6 | 	mov	local01, arg01
04940     01 14 06 F6 | 	mov	arg02, #1
04944     2C 5B B2 FD | 	call	#__system__Left_S
04948     FD 12 02 F6 | 	mov	arg01, result1
0494c     C0 01 00 FF 
04950     09 15 06 F6 | 	mov	arg02, ##@LR__5687
04954     C4 3A B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     00 FA 05 56 |  if_ne	mov	result1, #0
04960     30 03 90 5D |  if_ne	jmp	#LR__0293
04964                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04964     13 13 02 F6 | 	mov	arg01, local01
04968     03 14 06 F6 | 	mov	arg02, #3
0496c     01 16 06 F6 | 	mov	arg03, #1
04970     18 5C B2 FD | 	call	#__system__Mid_S
04974     FD 12 02 F6 | 	mov	arg01, result1
04978     C0 01 00 FF 
0497c     0B 15 06 F6 | 	mov	arg02, ##@LR__5688
04980     98 3A B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     18 00 90 5D |  if_ne	jmp	#LR__0270
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     02 14 06 F6 | 	mov	arg02, #2
04994     02 16 06 F6 | 	mov	arg03, #2
04998     F0 5B B2 FD | 	call	#__system__Mid_S
0499c     FD 28 02 F6 | 	mov	local02, result1
049a0     14 00 90 FD | 	jmp	#LR__0271
049a4                 | LR__0270
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     02 14 06 F6 | 	mov	arg02, #2
049ac     01 16 06 F6 | 	mov	arg03, #1
049b0     D8 5B B2 FD | 	call	#__system__Mid_S
049b4     FD 28 02 F6 | 	mov	local02, result1
049b8                 | LR__0271
049b8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
049b8     13 13 02 F6 | 	mov	arg01, local01
049bc     09 2B 02 F6 | 	mov	local03, arg01
049c0     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
049c4                 | LR__0272
049c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
049c8     01 2A 06 51 |  if_ne	add	local03, #1
049cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
049d0                 | LR__0273
049d0     09 2B 82 F1 | 	sub	local03, arg01
049d4     15 15 02 F6 | 	mov	arg02, local03
049d8     01 14 86 F1 | 	sub	arg02, #1
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     01 16 06 F6 | 	mov	arg03, #1
049e4     A4 5B B2 FD | 	call	#__system__Mid_S
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     C0 01 00 FF 
049f0     0D 15 06 F6 | 	mov	arg02, ##@LR__5689
049f4     24 3A B2 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     28 00 90 AD |  if_e	jmp	#LR__0274
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     F0 5A B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     6C 70 B2 FD | 	call	#__system____builtin_atof
04a14     FD 12 02 F6 | 	mov	arg01, result1
04a18     00 14 06 F6 | 	mov	arg02, #0
04a1c     18 6D B2 FD | 	call	#__system___float_tointeger
04a20     FD 2C 02 F6 | 	mov	local04, result1
04a24     34 00 90 FD | 	jmp	#LR__0275
04a28                 | LR__0274
04a28     13 13 02 F6 | 	mov	arg01, local01
04a2c     01 14 06 F6 | 	mov	arg02, #1
04a30     C8 5A B2 FD | 	call	#__system__Right_S
04a34     FD 12 02 F6 | 	mov	arg01, result1
04a38     44 70 B2 FD | 	call	#__system____builtin_atof
04a3c     FD 14 02 F6 | 	mov	arg02, result1
04a40     00 C0 5F FF 
04a44     00 12 06 F6 | 	mov	arg01, ##-1082130432
04a48     24 68 B2 FD | 	call	#__system___float_mul
04a4c     FD 12 02 F6 | 	mov	arg01, result1
04a50     00 14 06 F6 | 	mov	arg02, #0
04a54     E0 6C B2 FD | 	call	#__system___float_tointeger
04a58     FD 2C 02 F6 | 	mov	local04, result1
04a5c                 | LR__0275
04a5c                 | ' 
04a5c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04a5c     00 2C 0E F2 | 	cmp	local04, #0 wz
04a60     24 00 90 5D |  if_ne	jmp	#LR__0276
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     01 14 06 F6 | 	mov	arg02, #1
04a6c     8C 5A B2 FD | 	call	#__system__Right_S
04a70     FD 12 02 F6 | 	mov	arg01, result1
04a74     C0 01 00 FF 
04a78     0F 15 06 F6 | 	mov	arg02, ##@LR__5690
04a7c     9C 39 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     04 2C 06 56 |  if_ne	mov	local04, #4
04a88                 | LR__0276
04a88                 | ' 
04a88                 | ' select case s1
04a88     14 2F 02 F6 | 	mov	local05, local02
04a8c     C0 01 00 FF 
04a90     11 15 06 F6 | 	mov	arg02, ##@LR__5691
04a94     17 13 02 F6 | 	mov	arg01, local05
04a98     80 39 B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     24 01 90 AD |  if_e	jmp	#LR__0277
04aa4     C0 01 00 FF 
04aa8     13 15 06 F6 | 	mov	arg02, ##@LR__5692
04aac     17 13 02 F6 | 	mov	arg01, local05
04ab0     68 39 B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     18 01 90 AD |  if_e	jmp	#LR__0278
04abc     C0 01 00 FF 
04ac0     16 15 06 F6 | 	mov	arg02, ##@LR__5693
04ac4     17 13 02 F6 | 	mov	arg01, local05
04ac8     50 39 B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     0C 01 90 AD |  if_e	jmp	#LR__0279
04ad4     C0 01 00 FF 
04ad8     18 15 06 F6 | 	mov	arg02, ##@LR__5694
04adc     17 13 02 F6 | 	mov	arg01, local05
04ae0     38 39 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     00 01 90 AD |  if_e	jmp	#LR__0280
04aec     C0 01 00 FF 
04af0     1B 15 06 F6 | 	mov	arg02, ##@LR__5695
04af4     17 13 02 F6 | 	mov	arg01, local05
04af8     20 39 B2 FD | 	call	#__system___string_cmp
04afc     00 FA 0D F2 | 	cmp	result1, #0 wz
04b00     F4 00 90 AD |  if_e	jmp	#LR__0281
04b04     C0 01 00 FF 
04b08     1D 15 06 F6 | 	mov	arg02, ##@LR__5696
04b0c     17 13 02 F6 | 	mov	arg01, local05
04b10     08 39 B2 FD | 	call	#__system___string_cmp
04b14     00 FA 0D F2 | 	cmp	result1, #0 wz
04b18     E8 00 90 AD |  if_e	jmp	#LR__0282
04b1c     C0 01 00 FF 
04b20     1F 15 06 F6 | 	mov	arg02, ##@LR__5697
04b24     17 13 02 F6 | 	mov	arg01, local05
04b28     F0 38 B2 FD | 	call	#__system___string_cmp
04b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b30     DC 00 90 AD |  if_e	jmp	#LR__0283
04b34     C0 01 00 FF 
04b38     22 15 06 F6 | 	mov	arg02, ##@LR__5698
04b3c     17 13 02 F6 | 	mov	arg01, local05
04b40     D8 38 B2 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     D0 00 90 AD |  if_e	jmp	#LR__0284
04b4c     C0 01 00 FF 
04b50     24 15 06 F6 | 	mov	arg02, ##@LR__5699
04b54     17 13 02 F6 | 	mov	arg01, local05
04b58     C0 38 B2 FD | 	call	#__system___string_cmp
04b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b60     C4 00 90 AD |  if_e	jmp	#LR__0285
04b64     C0 01 00 FF 
04b68     27 15 06 F6 | 	mov	arg02, ##@LR__5700
04b6c     17 13 02 F6 | 	mov	arg01, local05
04b70     A8 38 B2 FD | 	call	#__system___string_cmp
04b74     00 FA 0D F2 | 	cmp	result1, #0 wz
04b78     B8 00 90 AD |  if_e	jmp	#LR__0286
04b7c     C0 01 00 FF 
04b80     29 15 06 F6 | 	mov	arg02, ##@LR__5701
04b84     17 13 02 F6 | 	mov	arg01, local05
04b88     90 38 B2 FD | 	call	#__system___string_cmp
04b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b90     AC 00 90 AD |  if_e	jmp	#LR__0287
04b94     C0 01 00 FF 
04b98     2C 15 06 F6 | 	mov	arg02, ##@LR__5702
04b9c     17 13 02 F6 | 	mov	arg01, local05
04ba0     78 38 B2 FD | 	call	#__system___string_cmp
04ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba8     A0 00 90 AD |  if_e	jmp	#LR__0288
04bac     C0 01 00 FF 
04bb0     2E 15 06 F6 | 	mov	arg02, ##@LR__5703
04bb4     17 13 02 F6 | 	mov	arg01, local05
04bb8     60 38 B2 FD | 	call	#__system___string_cmp
04bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc0     94 00 90 AD |  if_e	jmp	#LR__0289
04bc4     9C 00 90 FD | 	jmp	#LR__0290
04bc8                 | LR__0277
04bc8     01 00 00 FF 
04bcc     00 31 06 F6 | 	mov	local06, ##768
04bd0     98 00 90 FD | 	jmp	#LR__0291
04bd4                 | LR__0278
04bd4     01 00 00 FF 
04bd8     01 31 06 F6 | 	mov	local06, ##769
04bdc     8C 00 90 FD | 	jmp	#LR__0291
04be0                 | LR__0279
04be0     01 00 00 FF 
04be4     02 31 06 F6 | 	mov	local06, ##770
04be8     80 00 90 FD | 	jmp	#LR__0291
04bec                 | LR__0280
04bec     01 00 00 FF 
04bf0     03 31 06 F6 | 	mov	local06, ##771
04bf4     74 00 90 FD | 	jmp	#LR__0291
04bf8                 | LR__0281
04bf8     01 00 00 FF 
04bfc     04 31 06 F6 | 	mov	local06, ##772
04c00     68 00 90 FD | 	jmp	#LR__0291
04c04                 | LR__0282
04c04     01 00 00 FF 
04c08     05 31 06 F6 | 	mov	local06, ##773
04c0c     5C 00 90 FD | 	jmp	#LR__0291
04c10                 | LR__0283
04c10     01 00 00 FF 
04c14     06 31 06 F6 | 	mov	local06, ##774
04c18     50 00 90 FD | 	jmp	#LR__0291
04c1c                 | LR__0284
04c1c     01 00 00 FF 
04c20     07 31 06 F6 | 	mov	local06, ##775
04c24     44 00 90 FD | 	jmp	#LR__0291
04c28                 | LR__0285
04c28     01 00 00 FF 
04c2c     08 31 06 F6 | 	mov	local06, ##776
04c30     38 00 90 FD | 	jmp	#LR__0291
04c34                 | LR__0286
04c34     01 00 00 FF 
04c38     09 31 06 F6 | 	mov	local06, ##777
04c3c     2C 00 90 FD | 	jmp	#LR__0291
04c40                 | LR__0287
04c40     01 00 00 FF 
04c44     0A 31 06 F6 | 	mov	local06, ##778
04c48     20 00 90 FD | 	jmp	#LR__0291
04c4c                 | LR__0288
04c4c     01 00 00 FF 
04c50     0B 31 06 F6 | 	mov	local06, ##779
04c54     14 00 90 FD | 	jmp	#LR__0291
04c58                 | LR__0289
04c58     01 00 00 FF 
04c5c     0B 31 06 F6 | 	mov	local06, ##779
04c60     08 00 90 FD | 	jmp	#LR__0291
04c64                 | LR__0290
04c64     00 FA 05 F6 | 	mov	result1, #0
04c68     28 00 90 FD | 	jmp	#LR__0293
04c6c                 | LR__0291
04c6c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c6c     FF FF 7F FF 
04c70     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c74     18 00 90 CD |  if_b	jmp	#LR__0292
04c78     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c7c     16 33 02 C6 |  if_b	mov	local07, local04
04c80     01 32 66 C0 |  if_b	shl	local07, #1
04c84     16 33 02 C1 |  if_b	add	local07, local04
04c88     02 32 66 C0 |  if_b	shl	local07, #2
04c8c     19 31 02 C1 |  if_b	add	local06, local07
04c90                 | LR__0292
04c90                 | ' return token
04c90     18 FB 01 F6 | 	mov	result1, local06
04c94                 | LR__0293
04c94     A7 F0 03 F6 | 	mov	ptra, fp
04c98     B2 00 A0 FD | 	call	#popregs_
04c9c                 | _isnotename_ret
04c9c     2D 00 64 FD | 	ret
04ca0                 | 
04ca0                 | ' 
04ca0                 | ' ' Check if the part is a separator, return a token or 0 if not found
04ca0                 | ' 
04ca0                 | ' function isseparator(s as string) as ubyte
04ca0                 | _isseparator
04ca0     01 4A 05 F6 | 	mov	COUNT_, #1
04ca4     A8 00 A0 FD | 	call	#pushregs_
04ca8                 | ' 
04ca8                 | ' select case s
04ca8     09 27 02 F6 | 	mov	local01, arg01
04cac     C0 01 00 FF 
04cb0     30 15 06 F6 | 	mov	arg02, ##@LR__5704
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     60 37 B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 01 90 AD |  if_e	jmp	#LR__0300
04cc4     C0 01 00 FF 
04cc8     32 15 06 F6 | 	mov	arg02, ##@LR__5705
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     48 37 B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 01 90 AD |  if_e	jmp	#LR__0301
04cdc     C0 01 00 FF 
04ce0     34 15 06 F6 | 	mov	arg02, ##@LR__5706
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     30 37 B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 01 90 AD |  if_e	jmp	#LR__0302
04cf4     C0 01 00 FF 
04cf8     36 15 06 F6 | 	mov	arg02, ##@LR__5707
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     18 37 B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 01 90 AD |  if_e	jmp	#LR__0303
04d0c     C0 01 00 FF 
04d10     38 15 06 F6 | 	mov	arg02, ##@LR__5708
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     00 37 B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 01 90 AD |  if_e	jmp	#LR__0304
04d24     C0 01 00 FF 
04d28     3A 15 06 F6 | 	mov	arg02, ##@LR__5709
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     E8 36 B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 01 90 AD |  if_e	jmp	#LR__0305
04d3c     C0 01 00 FF 
04d40     3C 15 06 F6 | 	mov	arg02, ##@LR__5710
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     D0 36 B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 00 90 AD |  if_e	jmp	#LR__0306
04d54     C0 01 00 FF 
04d58     3E 15 06 F6 | 	mov	arg02, ##@LR__5711
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     B8 36 B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 00 90 AD |  if_e	jmp	#LR__0307
04d6c     C0 01 00 FF 
04d70     40 15 06 F6 | 	mov	arg02, ##@LR__5712
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     A0 36 B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 00 90 AD |  if_e	jmp	#LR__0308
04d84     C0 01 00 FF 
04d88     42 15 06 F6 | 	mov	arg02, ##@LR__5713
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     88 36 B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 00 90 AD |  if_e	jmp	#LR__0309
04d9c     C0 01 00 FF 
04da0     44 15 06 F6 | 	mov	arg02, ##@LR__5714
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     70 36 B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 00 90 AD |  if_e	jmp	#LR__0310
04db4     C0 01 00 FF 
04db8     46 15 06 F6 | 	mov	arg02, ##@LR__5715
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     58 36 B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 00 90 AD |  if_e	jmp	#LR__0311
04dcc     C0 01 00 FF 
04dd0     48 15 06 F6 | 	mov	arg02, ##@LR__5716
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     40 36 B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 00 90 AD |  if_e	jmp	#LR__0312
04de4     C0 01 00 FF 
04de8     4A 15 06 F6 | 	mov	arg02, ##@LR__5717
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     28 36 B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 00 90 AD |  if_e	jmp	#LR__0313
04dfc     C0 01 00 FF 
04e00     4C 15 06 F6 | 	mov	arg02, ##@LR__5718
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     10 36 B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 00 90 AD |  if_e	jmp	#LR__0314
04e14     78 00 90 FD | 	jmp	#LR__0315
04e18                 | LR__0300
04e18     01 FA 05 F6 | 	mov	result1, #1
04e1c     74 00 90 FD | 	jmp	#LR__0316
04e20                 | LR__0301
04e20     02 FA 05 F6 | 	mov	result1, #2
04e24     6C 00 90 FD | 	jmp	#LR__0316
04e28                 | LR__0302
04e28     1B FA 05 F6 | 	mov	result1, #27
04e2c     64 00 90 FD | 	jmp	#LR__0316
04e30                 | LR__0303
04e30     11 FA 05 F6 | 	mov	result1, #17
04e34     5C 00 90 FD | 	jmp	#LR__0316
04e38                 | LR__0304
04e38     05 FA 05 F6 | 	mov	result1, #5
04e3c     54 00 90 FD | 	jmp	#LR__0316
04e40                 | LR__0305
04e40     06 FA 05 F6 | 	mov	result1, #6
04e44     4C 00 90 FD | 	jmp	#LR__0316
04e48                 | LR__0306
04e48     12 FA 05 F6 | 	mov	result1, #18
04e4c     44 00 90 FD | 	jmp	#LR__0316
04e50                 | LR__0307
04e50     13 FA 05 F6 | 	mov	result1, #19
04e54     3C 00 90 FD | 	jmp	#LR__0316
04e58                 | LR__0308
04e58     0C FA 05 F6 | 	mov	result1, #12
04e5c     34 00 90 FD | 	jmp	#LR__0316
04e60                 | LR__0309
04e60     14 FA 05 F6 | 	mov	result1, #20
04e64     2C 00 90 FD | 	jmp	#LR__0316
04e68                 | LR__0310
04e68     15 FA 05 F6 | 	mov	result1, #21
04e6c     24 00 90 FD | 	jmp	#LR__0316
04e70                 | LR__0311
04e70     16 FA 05 F6 | 	mov	result1, #22
04e74     1C 00 90 FD | 	jmp	#LR__0316
04e78                 | LR__0312
04e78     FF FB 05 F6 | 	mov	result1, #511
04e7c     14 00 90 FD | 	jmp	#LR__0316
04e80                 | LR__0313
04e80     0F FA 05 F6 | 	mov	result1, #15
04e84     0C 00 90 FD | 	jmp	#LR__0316
04e88                 | LR__0314
04e88     10 FA 05 F6 | 	mov	result1, #16
04e8c     04 00 90 FD | 	jmp	#LR__0316
04e90                 | LR__0315
04e90     00 FA 05 F6 | 	mov	result1, #0
04e94                 | LR__0316
04e94     A7 F0 03 F6 | 	mov	ptra, fp
04e98     B2 00 A0 FD | 	call	#popregs_
04e9c                 | _isseparator_ret
04e9c     2D 00 64 FD | 	ret
04ea0                 | 
04ea0                 | ' 
04ea0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04ea0                 | ' 
04ea0                 | ' function iscommand(s as string) as ubyte
04ea0                 | _iscommand
04ea0     01 4A 05 F6 | 	mov	COUNT_, #1
04ea4     A8 00 A0 FD | 	call	#pushregs_
04ea8                 | ' 
04ea8                 | ' select case s
04ea8     09 27 02 F6 | 	mov	local01, arg01
04eac     C0 01 00 FF 
04eb0     50 15 06 F6 | 	mov	arg02, ##@LR__5720
04eb4     13 13 02 F6 | 	mov	arg01, local01
04eb8     60 35 B2 FD | 	call	#__system___string_cmp
04ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec0     24 0D 90 AD |  if_e	jmp	#LR__0320
04ec4     C0 01 00 FF 
04ec8     55 15 06 F6 | 	mov	arg02, ##@LR__5721
04ecc     13 13 02 F6 | 	mov	arg01, local01
04ed0     48 35 B2 FD | 	call	#__system___string_cmp
04ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed8     14 0D 90 AD |  if_e	jmp	#LR__0321
04edc     C0 01 00 FF 
04ee0     58 15 06 F6 | 	mov	arg02, ##@LR__5722
04ee4     13 13 02 F6 | 	mov	arg01, local01
04ee8     30 35 B2 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     04 0D 90 AD |  if_e	jmp	#LR__0322
04ef4     C0 01 00 FF 
04ef8     5D 15 06 F6 | 	mov	arg02, ##@LR__5723
04efc     13 13 02 F6 | 	mov	arg01, local01
04f00     18 35 B2 FD | 	call	#__system___string_cmp
04f04     00 FA 0D F2 | 	cmp	result1, #0 wz
04f08     F4 0C 90 AD |  if_e	jmp	#LR__0323
04f0c     C0 01 00 FF 
04f10     61 15 06 F6 | 	mov	arg02, ##@LR__5724
04f14     13 13 02 F6 | 	mov	arg01, local01
04f18     00 35 B2 FD | 	call	#__system___string_cmp
04f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f20     E4 0C 90 AD |  if_e	jmp	#LR__0324
04f24     C0 01 00 FF 
04f28     66 15 06 F6 | 	mov	arg02, ##@LR__5725
04f2c     13 13 02 F6 | 	mov	arg01, local01
04f30     E8 34 B2 FD | 	call	#__system___string_cmp
04f34     00 FA 0D F2 | 	cmp	result1, #0 wz
04f38     D4 0C 90 AD |  if_e	jmp	#LR__0325
04f3c     C0 01 00 FF 
04f40     6A 15 06 F6 | 	mov	arg02, ##@LR__5726
04f44     13 13 02 F6 | 	mov	arg01, local01
04f48     D0 34 B2 FD | 	call	#__system___string_cmp
04f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f50     C4 0C 90 AD |  if_e	jmp	#LR__0326
04f54     C0 01 00 FF 
04f58     6D 15 06 F6 | 	mov	arg02, ##@LR__5727
04f5c     13 13 02 F6 | 	mov	arg01, local01
04f60     B8 34 B2 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     B4 0C 90 AD |  if_e	jmp	#LR__0327
04f6c     C0 01 00 FF 
04f70     78 15 06 F6 | 	mov	arg02, ##@LR__5728
04f74     13 13 02 F6 | 	mov	arg01, local01
04f78     A0 34 B2 FD | 	call	#__system___string_cmp
04f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f80     A4 0C 90 AD |  if_e	jmp	#LR__0328
04f84     C0 01 00 FF 
04f88     7C 15 06 F6 | 	mov	arg02, ##@LR__5729
04f8c     13 13 02 F6 | 	mov	arg01, local01
04f90     88 34 B2 FD | 	call	#__system___string_cmp
04f94     00 FA 0D F2 | 	cmp	result1, #0 wz
04f98     94 0C 90 AD |  if_e	jmp	#LR__0329
04f9c     C0 01 00 FF 
04fa0     86 15 06 F6 | 	mov	arg02, ##@LR__5730
04fa4     13 13 02 F6 | 	mov	arg01, local01
04fa8     70 34 B2 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     84 0C 90 AD |  if_e	jmp	#LR__0330
04fb4     C0 01 00 FF 
04fb8     8A 15 06 F6 | 	mov	arg02, ##@LR__5731
04fbc     13 13 02 F6 | 	mov	arg01, local01
04fc0     58 34 B2 FD | 	call	#__system___string_cmp
04fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc8     74 0C 90 AD |  if_e	jmp	#LR__0331
04fcc     C0 01 00 FF 
04fd0     94 15 06 F6 | 	mov	arg02, ##@LR__5732
04fd4     13 13 02 F6 | 	mov	arg01, local01
04fd8     40 34 B2 FD | 	call	#__system___string_cmp
04fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe0     64 0C 90 AD |  if_e	jmp	#LR__0332
04fe4     C0 01 00 FF 
04fe8     98 15 06 F6 | 	mov	arg02, ##@LR__5733
04fec     13 13 02 F6 | 	mov	arg01, local01
04ff0     28 34 B2 FD | 	call	#__system___string_cmp
04ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff8     54 0C 90 AD |  if_e	jmp	#LR__0333
04ffc     C0 01 00 FF 
05000     A3 15 06 F6 | 	mov	arg02, ##@LR__5734
05004     13 13 02 F6 | 	mov	arg01, local01
05008     10 34 B2 FD | 	call	#__system___string_cmp
0500c     00 FA 0D F2 | 	cmp	result1, #0 wz
05010     44 0C 90 AD |  if_e	jmp	#LR__0334
05014     C0 01 00 FF 
05018     A7 15 06 F6 | 	mov	arg02, ##@LR__5735
0501c     13 13 02 F6 | 	mov	arg01, local01
05020     F8 33 B2 FD | 	call	#__system___string_cmp
05024     00 FA 0D F2 | 	cmp	result1, #0 wz
05028     34 0C 90 AD |  if_e	jmp	#LR__0335
0502c     C0 01 00 FF 
05030     AE 15 06 F6 | 	mov	arg02, ##@LR__5736
05034     13 13 02 F6 | 	mov	arg01, local01
05038     E0 33 B2 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     24 0C 90 AD |  if_e	jmp	#LR__0336
05044     C0 01 00 FF 
05048     B2 15 06 F6 | 	mov	arg02, ##@LR__5737
0504c     13 13 02 F6 | 	mov	arg01, local01
05050     C8 33 B2 FD | 	call	#__system___string_cmp
05054     00 FA 0D F2 | 	cmp	result1, #0 wz
05058     14 0C 90 AD |  if_e	jmp	#LR__0337
0505c     C0 01 00 FF 
05060     B8 15 06 F6 | 	mov	arg02, ##@LR__5738
05064     13 13 02 F6 | 	mov	arg01, local01
05068     B0 33 B2 FD | 	call	#__system___string_cmp
0506c     00 FA 0D F2 | 	cmp	result1, #0 wz
05070     04 0C 90 AD |  if_e	jmp	#LR__0338
05074     C0 01 00 FF 
05078     BE 15 06 F6 | 	mov	arg02, ##@LR__5739
0507c     13 13 02 F6 | 	mov	arg01, local01
05080     98 33 B2 FD | 	call	#__system___string_cmp
05084     00 FA 0D F2 | 	cmp	result1, #0 wz
05088     F4 0B 90 AD |  if_e	jmp	#LR__0339
0508c     C0 01 00 FF 
05090     C2 15 06 F6 | 	mov	arg02, ##@LR__5740
05094     13 13 02 F6 | 	mov	arg01, local01
05098     80 33 B2 FD | 	call	#__system___string_cmp
0509c     00 FA 0D F2 | 	cmp	result1, #0 wz
050a0     E4 0B 90 AD |  if_e	jmp	#LR__0340
050a4     C0 01 00 FF 
050a8     CA 15 06 F6 | 	mov	arg02, ##@LR__5741
050ac     13 13 02 F6 | 	mov	arg01, local01
050b0     68 33 B2 FD | 	call	#__system___string_cmp
050b4     00 FA 0D F2 | 	cmp	result1, #0 wz
050b8     D4 0B 90 AD |  if_e	jmp	#LR__0341
050bc     C0 01 00 FF 
050c0     D0 15 06 F6 | 	mov	arg02, ##@LR__5742
050c4     13 13 02 F6 | 	mov	arg01, local01
050c8     50 33 B2 FD | 	call	#__system___string_cmp
050cc     00 FA 0D F2 | 	cmp	result1, #0 wz
050d0     C4 0B 90 AD |  if_e	jmp	#LR__0342
050d4     C0 01 00 FF 
050d8     D3 15 06 F6 | 	mov	arg02, ##@LR__5743
050dc     13 13 02 F6 | 	mov	arg01, local01
050e0     38 33 B2 FD | 	call	#__system___string_cmp
050e4     00 FA 0D F2 | 	cmp	result1, #0 wz
050e8     B4 0B 90 AD |  if_e	jmp	#LR__0343
050ec     C0 01 00 FF 
050f0     D8 15 06 F6 | 	mov	arg02, ##@LR__5744
050f4     13 13 02 F6 | 	mov	arg01, local01
050f8     20 33 B2 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     A4 0B 90 AD |  if_e	jmp	#LR__0344
05104     C0 01 00 FF 
05108     DF 15 06 F6 | 	mov	arg02, ##@LR__5745
0510c     13 13 02 F6 | 	mov	arg01, local01
05110     08 33 B2 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     94 0B 90 AD |  if_e	jmp	#LR__0345
0511c     C0 01 00 FF 
05120     E4 15 06 F6 | 	mov	arg02, ##@LR__5746
05124     13 13 02 F6 | 	mov	arg01, local01
05128     F0 32 B2 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     84 0B 90 AD |  if_e	jmp	#LR__0346
05134     C0 01 00 FF 
05138     EC 15 06 F6 | 	mov	arg02, ##@LR__5747
0513c     13 13 02 F6 | 	mov	arg01, local01
05140     D8 32 B2 FD | 	call	#__system___string_cmp
05144     00 FA 0D F2 | 	cmp	result1, #0 wz
05148     74 0B 90 AD |  if_e	jmp	#LR__0347
0514c     C0 01 00 FF 
05150     F3 15 06 F6 | 	mov	arg02, ##@LR__5748
05154     13 13 02 F6 | 	mov	arg01, local01
05158     C0 32 B2 FD | 	call	#__system___string_cmp
0515c     00 FA 0D F2 | 	cmp	result1, #0 wz
05160     64 0B 90 AD |  if_e	jmp	#LR__0348
05164     C0 01 00 FF 
05168     FA 15 06 F6 | 	mov	arg02, ##@LR__5749
0516c     13 13 02 F6 | 	mov	arg01, local01
05170     A8 32 B2 FD | 	call	#__system___string_cmp
05174     00 FA 0D F2 | 	cmp	result1, #0 wz
05178     54 0B 90 AD |  if_e	jmp	#LR__0349
0517c     C1 01 00 FF 
05180     04 14 06 F6 | 	mov	arg02, ##@LR__5750
05184     13 13 02 F6 | 	mov	arg01, local01
05188     90 32 B2 FD | 	call	#__system___string_cmp
0518c     00 FA 0D F2 | 	cmp	result1, #0 wz
05190     44 0B 90 AD |  if_e	jmp	#LR__0350
05194     C1 01 00 FF 
05198     08 14 06 F6 | 	mov	arg02, ##@LR__5751
0519c     13 13 02 F6 | 	mov	arg01, local01
051a0     78 32 B2 FD | 	call	#__system___string_cmp
051a4     00 FA 0D F2 | 	cmp	result1, #0 wz
051a8     34 0B 90 AD |  if_e	jmp	#LR__0351
051ac     C1 01 00 FF 
051b0     0C 14 06 F6 | 	mov	arg02, ##@LR__5752
051b4     13 13 02 F6 | 	mov	arg01, local01
051b8     60 32 B2 FD | 	call	#__system___string_cmp
051bc     00 FA 0D F2 | 	cmp	result1, #0 wz
051c0     24 0B 90 AD |  if_e	jmp	#LR__0352
051c4     C1 01 00 FF 
051c8     13 14 06 F6 | 	mov	arg02, ##@LR__5753
051cc     13 13 02 F6 | 	mov	arg01, local01
051d0     48 32 B2 FD | 	call	#__system___string_cmp
051d4     00 FA 0D F2 | 	cmp	result1, #0 wz
051d8     14 0B 90 AD |  if_e	jmp	#LR__0353
051dc     C1 01 00 FF 
051e0     17 14 06 F6 | 	mov	arg02, ##@LR__5754
051e4     13 13 02 F6 | 	mov	arg01, local01
051e8     30 32 B2 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     04 0B 90 AD |  if_e	jmp	#LR__0354
051f4     C1 01 00 FF 
051f8     1B 14 06 F6 | 	mov	arg02, ##@LR__5755
051fc     13 13 02 F6 | 	mov	arg01, local01
05200     18 32 B2 FD | 	call	#__system___string_cmp
05204     00 FA 0D F2 | 	cmp	result1, #0 wz
05208     F4 0A 90 AD |  if_e	jmp	#LR__0355
0520c     C1 01 00 FF 
05210     21 14 06 F6 | 	mov	arg02, ##@LR__5756
05214     13 13 02 F6 | 	mov	arg01, local01
05218     00 32 B2 FD | 	call	#__system___string_cmp
0521c     00 FA 0D F2 | 	cmp	result1, #0 wz
05220     E4 0A 90 AD |  if_e	jmp	#LR__0356
05224     C1 01 00 FF 
05228     26 14 06 F6 | 	mov	arg02, ##@LR__5757
0522c     13 13 02 F6 | 	mov	arg01, local01
05230     E8 31 B2 FD | 	call	#__system___string_cmp
05234     00 FA 0D F2 | 	cmp	result1, #0 wz
05238     D4 0A 90 AD |  if_e	jmp	#LR__0357
0523c     C1 01 00 FF 
05240     2D 14 06 F6 | 	mov	arg02, ##@LR__5758
05244     13 13 02 F6 | 	mov	arg01, local01
05248     D0 31 B2 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     C4 0A 90 AD |  if_e	jmp	#LR__0358
05254     C1 01 00 FF 
05258     31 14 06 F6 | 	mov	arg02, ##@LR__5759
0525c     13 13 02 F6 | 	mov	arg01, local01
05260     B8 31 B2 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     B4 0A 90 AD |  if_e	jmp	#LR__0359
0526c     C1 01 00 FF 
05270     36 14 06 F6 | 	mov	arg02, ##@LR__5760
05274     13 13 02 F6 | 	mov	arg01, local01
05278     A0 31 B2 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     A4 0A 90 AD |  if_e	jmp	#LR__0360
05284     C1 01 00 FF 
05288     3A 14 06 F6 | 	mov	arg02, ##@LR__5761
0528c     13 13 02 F6 | 	mov	arg01, local01
05290     88 31 B2 FD | 	call	#__system___string_cmp
05294     00 FA 0D F2 | 	cmp	result1, #0 wz
05298     94 0A 90 AD |  if_e	jmp	#LR__0361
0529c     C1 01 00 FF 
052a0     40 14 06 F6 | 	mov	arg02, ##@LR__5762
052a4     13 13 02 F6 | 	mov	arg01, local01
052a8     70 31 B2 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     84 0A 90 AD |  if_e	jmp	#LR__0362
052b4     C1 01 00 FF 
052b8     43 14 06 F6 | 	mov	arg02, ##@LR__5763
052bc     13 13 02 F6 | 	mov	arg01, local01
052c0     58 31 B2 FD | 	call	#__system___string_cmp
052c4     00 FA 0D F2 | 	cmp	result1, #0 wz
052c8     74 0A 90 AD |  if_e	jmp	#LR__0363
052cc     C1 01 00 FF 
052d0     4B 14 06 F6 | 	mov	arg02, ##@LR__5764
052d4     13 13 02 F6 | 	mov	arg01, local01
052d8     40 31 B2 FD | 	call	#__system___string_cmp
052dc     00 FA 0D F2 | 	cmp	result1, #0 wz
052e0     64 0A 90 AD |  if_e	jmp	#LR__0364
052e4     C1 01 00 FF 
052e8     4F 14 06 F6 | 	mov	arg02, ##@LR__5765
052ec     13 13 02 F6 | 	mov	arg01, local01
052f0     28 31 B2 FD | 	call	#__system___string_cmp
052f4     00 FA 0D F2 | 	cmp	result1, #0 wz
052f8     54 0A 90 AD |  if_e	jmp	#LR__0365
052fc     C1 01 00 FF 
05300     54 14 06 F6 | 	mov	arg02, ##@LR__5766
05304     13 13 02 F6 | 	mov	arg01, local01
05308     10 31 B2 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     44 0A 90 AD |  if_e	jmp	#LR__0366
05314     C1 01 00 FF 
05318     58 14 06 F6 | 	mov	arg02, ##@LR__5767
0531c     13 13 02 F6 | 	mov	arg01, local01
05320     F8 30 B2 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     34 0A 90 AD |  if_e	jmp	#LR__0367
0532c     C1 01 00 FF 
05330     5D 14 06 F6 | 	mov	arg02, ##@LR__5768
05334     13 13 02 F6 | 	mov	arg01, local01
05338     E0 30 B2 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     24 0A 90 AD |  if_e	jmp	#LR__0368
05344     C1 01 00 FF 
05348     61 14 06 F6 | 	mov	arg02, ##@LR__5769
0534c     13 13 02 F6 | 	mov	arg01, local01
05350     C8 30 B2 FD | 	call	#__system___string_cmp
05354     00 FA 0D F2 | 	cmp	result1, #0 wz
05358     14 0A 90 AD |  if_e	jmp	#LR__0369
0535c     C1 01 00 FF 
05360     64 14 06 F6 | 	mov	arg02, ##@LR__5770
05364     13 13 02 F6 | 	mov	arg01, local01
05368     B0 30 B2 FD | 	call	#__system___string_cmp
0536c     00 FA 0D F2 | 	cmp	result1, #0 wz
05370     04 0A 90 AD |  if_e	jmp	#LR__0370
05374     C1 01 00 FF 
05378     6A 14 06 F6 | 	mov	arg02, ##@LR__5771
0537c     13 13 02 F6 | 	mov	arg01, local01
05380     98 30 B2 FD | 	call	#__system___string_cmp
05384     00 FA 0D F2 | 	cmp	result1, #0 wz
05388     F4 09 90 AD |  if_e	jmp	#LR__0371
0538c     C1 01 00 FF 
05390     6E 14 06 F6 | 	mov	arg02, ##@LR__5772
05394     13 13 02 F6 | 	mov	arg01, local01
05398     80 30 B2 FD | 	call	#__system___string_cmp
0539c     00 FA 0D F2 | 	cmp	result1, #0 wz
053a0     E4 09 90 AD |  if_e	jmp	#LR__0372
053a4     C1 01 00 FF 
053a8     72 14 06 F6 | 	mov	arg02, ##@LR__5773
053ac     13 13 02 F6 | 	mov	arg01, local01
053b0     68 30 B2 FD | 	call	#__system___string_cmp
053b4     00 FA 0D F2 | 	cmp	result1, #0 wz
053b8     D4 09 90 AD |  if_e	jmp	#LR__0373
053bc     C1 01 00 FF 
053c0     78 14 06 F6 | 	mov	arg02, ##@LR__5774
053c4     13 13 02 F6 | 	mov	arg01, local01
053c8     50 30 B2 FD | 	call	#__system___string_cmp
053cc     00 FA 0D F2 | 	cmp	result1, #0 wz
053d0     C4 09 90 AD |  if_e	jmp	#LR__0374
053d4     C1 01 00 FF 
053d8     7D 14 06 F6 | 	mov	arg02, ##@LR__5775
053dc     13 13 02 F6 | 	mov	arg01, local01
053e0     38 30 B2 FD | 	call	#__system___string_cmp
053e4     00 FA 0D F2 | 	cmp	result1, #0 wz
053e8     B4 09 90 AD |  if_e	jmp	#LR__0375
053ec     C1 01 00 FF 
053f0     80 14 06 F6 | 	mov	arg02, ##@LR__5776
053f4     13 13 02 F6 | 	mov	arg01, local01
053f8     20 30 B2 FD | 	call	#__system___string_cmp
053fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05400     A4 09 90 AD |  if_e	jmp	#LR__0376
05404     C1 01 00 FF 
05408     83 14 06 F6 | 	mov	arg02, ##@LR__5777
0540c     13 13 02 F6 | 	mov	arg01, local01
05410     08 30 B2 FD | 	call	#__system___string_cmp
05414     00 FA 0D F2 | 	cmp	result1, #0 wz
05418     94 09 90 AD |  if_e	jmp	#LR__0377
0541c     C1 01 00 FF 
05420     87 14 06 F6 | 	mov	arg02, ##@LR__5778
05424     13 13 02 F6 | 	mov	arg01, local01
05428     F0 2F B2 FD | 	call	#__system___string_cmp
0542c     00 FA 0D F2 | 	cmp	result1, #0 wz
05430     84 09 90 AD |  if_e	jmp	#LR__0378
05434     C1 01 00 FF 
05438     8A 14 06 F6 | 	mov	arg02, ##@LR__5779
0543c     13 13 02 F6 | 	mov	arg01, local01
05440     D8 2F B2 FD | 	call	#__system___string_cmp
05444     00 FA 0D F2 | 	cmp	result1, #0 wz
05448     74 09 90 AD |  if_e	jmp	#LR__0379
0544c     C1 01 00 FF 
05450     90 14 06 F6 | 	mov	arg02, ##@LR__5780
05454     13 13 02 F6 | 	mov	arg01, local01
05458     C0 2F B2 FD | 	call	#__system___string_cmp
0545c     00 FA 0D F2 | 	cmp	result1, #0 wz
05460     64 09 90 AD |  if_e	jmp	#LR__0380
05464     C1 01 00 FF 
05468     95 14 06 F6 | 	mov	arg02, ##@LR__5781
0546c     13 13 02 F6 | 	mov	arg01, local01
05470     A8 2F B2 FD | 	call	#__system___string_cmp
05474     00 FA 0D F2 | 	cmp	result1, #0 wz
05478     54 09 90 AD |  if_e	jmp	#LR__0381
0547c     C1 01 00 FF 
05480     98 14 06 F6 | 	mov	arg02, ##@LR__5782
05484     13 13 02 F6 | 	mov	arg01, local01
05488     90 2F B2 FD | 	call	#__system___string_cmp
0548c     00 FA 0D F2 | 	cmp	result1, #0 wz
05490     44 09 90 AD |  if_e	jmp	#LR__0382
05494     C1 01 00 FF 
05498     9D 14 06 F6 | 	mov	arg02, ##@LR__5783
0549c     13 13 02 F6 | 	mov	arg01, local01
054a0     78 2F B2 FD | 	call	#__system___string_cmp
054a4     00 FA 0D F2 | 	cmp	result1, #0 wz
054a8     34 09 90 AD |  if_e	jmp	#LR__0383
054ac     C1 01 00 FF 
054b0     A1 14 06 F6 | 	mov	arg02, ##@LR__5784
054b4     13 13 02 F6 | 	mov	arg01, local01
054b8     60 2F B2 FD | 	call	#__system___string_cmp
054bc     00 FA 0D F2 | 	cmp	result1, #0 wz
054c0     24 09 90 AD |  if_e	jmp	#LR__0384
054c4     C1 01 00 FF 
054c8     A7 14 06 F6 | 	mov	arg02, ##@LR__5785
054cc     13 13 02 F6 | 	mov	arg01, local01
054d0     48 2F B2 FD | 	call	#__system___string_cmp
054d4     00 FA 0D F2 | 	cmp	result1, #0 wz
054d8     14 09 90 AD |  if_e	jmp	#LR__0385
054dc     C1 01 00 FF 
054e0     AD 14 06 F6 | 	mov	arg02, ##@LR__5786
054e4     13 13 02 F6 | 	mov	arg01, local01
054e8     30 2F B2 FD | 	call	#__system___string_cmp
054ec     00 FA 0D F2 | 	cmp	result1, #0 wz
054f0     04 09 90 AD |  if_e	jmp	#LR__0386
054f4     C1 01 00 FF 
054f8     B2 14 06 F6 | 	mov	arg02, ##@LR__5787
054fc     13 13 02 F6 | 	mov	arg01, local01
05500     18 2F B2 FD | 	call	#__system___string_cmp
05504     00 FA 0D F2 | 	cmp	result1, #0 wz
05508     F4 08 90 AD |  if_e	jmp	#LR__0387
0550c     C1 01 00 FF 
05510     B5 14 06 F6 | 	mov	arg02, ##@LR__5788
05514     13 13 02 F6 | 	mov	arg01, local01
05518     00 2F B2 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     E4 08 90 AD |  if_e	jmp	#LR__0388
05524     C1 01 00 FF 
05528     BB 14 06 F6 | 	mov	arg02, ##@LR__5789
0552c     13 13 02 F6 | 	mov	arg01, local01
05530     E8 2E B2 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     D4 08 90 AD |  if_e	jmp	#LR__0389
0553c     C1 01 00 FF 
05540     BF 14 06 F6 | 	mov	arg02, ##@LR__5790
05544     13 13 02 F6 | 	mov	arg01, local01
05548     D0 2E B2 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     C4 08 90 AD |  if_e	jmp	#LR__0390
05554     C1 01 00 FF 
05558     C4 14 06 F6 | 	mov	arg02, ##@LR__5791
0555c     13 13 02 F6 | 	mov	arg01, local01
05560     B8 2E B2 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     B4 08 90 AD |  if_e	jmp	#LR__0391
0556c     C1 01 00 FF 
05570     C7 14 06 F6 | 	mov	arg02, ##@LR__5792
05574     13 13 02 F6 | 	mov	arg01, local01
05578     A0 2E B2 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     A4 08 90 AD |  if_e	jmp	#LR__0392
05584     C1 01 00 FF 
05588     CA 14 06 F6 | 	mov	arg02, ##@LR__5793
0558c     13 13 02 F6 | 	mov	arg01, local01
05590     88 2E B2 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     94 08 90 AD |  if_e	jmp	#LR__0393
0559c     C1 01 00 FF 
055a0     CF 14 06 F6 | 	mov	arg02, ##@LR__5794
055a4     13 13 02 F6 | 	mov	arg01, local01
055a8     70 2E B2 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     84 08 90 AD |  if_e	jmp	#LR__0394
055b4     C1 01 00 FF 
055b8     D5 14 06 F6 | 	mov	arg02, ##@LR__5795
055bc     13 13 02 F6 | 	mov	arg01, local01
055c0     58 2E B2 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     74 08 90 AD |  if_e	jmp	#LR__0395
055cc     C1 01 00 FF 
055d0     D9 14 06 F6 | 	mov	arg02, ##@LR__5796
055d4     13 13 02 F6 | 	mov	arg01, local01
055d8     40 2E B2 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     64 08 90 AD |  if_e	jmp	#LR__0396
055e4     C1 01 00 FF 
055e8     E2 14 06 F6 | 	mov	arg02, ##@LR__5797
055ec     13 13 02 F6 | 	mov	arg01, local01
055f0     28 2E B2 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     54 08 90 AD |  if_e	jmp	#LR__0397
055fc     C1 01 00 FF 
05600     E8 14 06 F6 | 	mov	arg02, ##@LR__5798
05604     13 13 02 F6 | 	mov	arg01, local01
05608     10 2E B2 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     44 08 90 AD |  if_e	jmp	#LR__0398
05614     C1 01 00 FF 
05618     EE 14 06 F6 | 	mov	arg02, ##@LR__5799
0561c     13 13 02 F6 | 	mov	arg01, local01
05620     F8 2D B2 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     34 08 90 AD |  if_e	jmp	#LR__0399
0562c     C1 01 00 FF 
05630     F7 14 06 F6 | 	mov	arg02, ##@LR__5800
05634     13 13 02 F6 | 	mov	arg01, local01
05638     E0 2D B2 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     24 08 90 AD |  if_e	jmp	#LR__0400
05644     C1 01 00 FF 
05648     01 15 06 F6 | 	mov	arg02, ##@LR__5801
0564c     13 13 02 F6 | 	mov	arg01, local01
05650     C8 2D B2 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     14 08 90 AD |  if_e	jmp	#LR__0401
0565c     C1 01 00 FF 
05660     0A 15 06 F6 | 	mov	arg02, ##@LR__5802
05664     13 13 02 F6 | 	mov	arg01, local01
05668     B0 2D B2 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     04 08 90 AD |  if_e	jmp	#LR__0402
05674     C1 01 00 FF 
05678     0F 15 06 F6 | 	mov	arg02, ##@LR__5803
0567c     13 13 02 F6 | 	mov	arg01, local01
05680     98 2D B2 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     F4 07 90 AD |  if_e	jmp	#LR__0403
0568c     C1 01 00 FF 
05690     12 15 06 F6 | 	mov	arg02, ##@LR__5804
05694     13 13 02 F6 | 	mov	arg01, local01
05698     80 2D B2 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     E4 07 90 AD |  if_e	jmp	#LR__0404
056a4     C1 01 00 FF 
056a8     17 15 06 F6 | 	mov	arg02, ##@LR__5805
056ac     13 13 02 F6 | 	mov	arg01, local01
056b0     68 2D B2 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     D4 07 90 AD |  if_e	jmp	#LR__0405
056bc     C1 01 00 FF 
056c0     1B 15 06 F6 | 	mov	arg02, ##@LR__5806
056c4     13 13 02 F6 | 	mov	arg01, local01
056c8     50 2D B2 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     C4 07 90 AD |  if_e	jmp	#LR__0406
056d4     C1 01 00 FF 
056d8     20 15 06 F6 | 	mov	arg02, ##@LR__5807
056dc     13 13 02 F6 | 	mov	arg01, local01
056e0     38 2D B2 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     B4 07 90 AD |  if_e	jmp	#LR__0407
056ec     C1 01 00 FF 
056f0     24 15 06 F6 | 	mov	arg02, ##@LR__5808
056f4     13 13 02 F6 | 	mov	arg01, local01
056f8     20 2D B2 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     A4 07 90 AD |  if_e	jmp	#LR__0408
05704     C1 01 00 FF 
05708     2D 15 06 F6 | 	mov	arg02, ##@LR__5809
0570c     13 13 02 F6 | 	mov	arg01, local01
05710     08 2D B2 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     94 07 90 AD |  if_e	jmp	#LR__0409
0571c     C1 01 00 FF 
05720     32 15 06 F6 | 	mov	arg02, ##@LR__5810
05724     13 13 02 F6 | 	mov	arg01, local01
05728     F0 2C B2 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     84 07 90 AD |  if_e	jmp	#LR__0410
05734     C1 01 00 FF 
05738     38 15 06 F6 | 	mov	arg02, ##@LR__5811
0573c     13 13 02 F6 | 	mov	arg01, local01
05740     D8 2C B2 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     74 07 90 AD |  if_e	jmp	#LR__0411
0574c     C1 01 00 FF 
05750     3A 15 06 F6 | 	mov	arg02, ##@LR__5812
05754     13 13 02 F6 | 	mov	arg01, local01
05758     C0 2C B2 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     64 07 90 AD |  if_e	jmp	#LR__0412
05764     C1 01 00 FF 
05768     3E 15 06 F6 | 	mov	arg02, ##@LR__5813
0576c     13 13 02 F6 | 	mov	arg01, local01
05770     A8 2C B2 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     54 07 90 AD |  if_e	jmp	#LR__0413
0577c     C1 01 00 FF 
05780     42 15 06 F6 | 	mov	arg02, ##@LR__5814
05784     13 13 02 F6 | 	mov	arg01, local01
05788     90 2C B2 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     44 07 90 AD |  if_e	jmp	#LR__0414
05794     C1 01 00 FF 
05798     47 15 06 F6 | 	mov	arg02, ##@LR__5815
0579c     13 13 02 F6 | 	mov	arg01, local01
057a0     78 2C B2 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     34 07 90 AD |  if_e	jmp	#LR__0415
057ac     C1 01 00 FF 
057b0     4F 15 06 F6 | 	mov	arg02, ##@LR__5816
057b4     13 13 02 F6 | 	mov	arg01, local01
057b8     60 2C B2 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     24 07 90 AD |  if_e	jmp	#LR__0416
057c4     C1 01 00 FF 
057c8     53 15 06 F6 | 	mov	arg02, ##@LR__5817
057cc     13 13 02 F6 | 	mov	arg01, local01
057d0     48 2C B2 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     14 07 90 AD |  if_e	jmp	#LR__0417
057dc     C1 01 00 FF 
057e0     55 15 06 F6 | 	mov	arg02, ##@LR__5818
057e4     13 13 02 F6 | 	mov	arg01, local01
057e8     30 2C B2 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     04 07 90 AD |  if_e	jmp	#LR__0418
057f4     C1 01 00 FF 
057f8     5D 15 06 F6 | 	mov	arg02, ##@LR__5819
057fc     13 13 02 F6 | 	mov	arg01, local01
05800     18 2C B2 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     F4 06 90 AD |  if_e	jmp	#LR__0419
0580c     C1 01 00 FF 
05810     6C 15 06 F6 | 	mov	arg02, ##@LR__5820
05814     13 13 02 F6 | 	mov	arg01, local01
05818     00 2C B2 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     E4 06 90 AD |  if_e	jmp	#LR__0420
05824     C1 01 00 FF 
05828     70 15 06 F6 | 	mov	arg02, ##@LR__5821
0582c     13 13 02 F6 | 	mov	arg01, local01
05830     E8 2B B2 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     D4 06 90 AD |  if_e	jmp	#LR__0421
0583c     C1 01 00 FF 
05840     77 15 06 F6 | 	mov	arg02, ##@LR__5822
05844     13 13 02 F6 | 	mov	arg01, local01
05848     D0 2B B2 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     C4 06 90 AD |  if_e	jmp	#LR__0422
05854     C1 01 00 FF 
05858     7B 15 06 F6 | 	mov	arg02, ##@LR__5823
0585c     13 13 02 F6 | 	mov	arg01, local01
05860     B8 2B B2 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     B4 06 90 AD |  if_e	jmp	#LR__0423
0586c     C1 01 00 FF 
05870     7E 15 06 F6 | 	mov	arg02, ##@LR__5824
05874     13 13 02 F6 | 	mov	arg01, local01
05878     A0 2B B2 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     A4 06 90 AD |  if_e	jmp	#LR__0424
05884     C1 01 00 FF 
05888     83 15 06 F6 | 	mov	arg02, ##@LR__5825
0588c     13 13 02 F6 | 	mov	arg01, local01
05890     88 2B B2 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     94 06 90 AD |  if_e	jmp	#LR__0425
0589c     C1 01 00 FF 
058a0     86 15 06 F6 | 	mov	arg02, ##@LR__5826
058a4     13 13 02 F6 | 	mov	arg01, local01
058a8     70 2B B2 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     84 06 90 AD |  if_e	jmp	#LR__0426
058b4     C1 01 00 FF 
058b8     8F 15 06 F6 | 	mov	arg02, ##@LR__5827
058bc     13 13 02 F6 | 	mov	arg01, local01
058c0     58 2B B2 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     74 06 90 AD |  if_e	jmp	#LR__0427
058cc     C1 01 00 FF 
058d0     93 15 06 F6 | 	mov	arg02, ##@LR__5828
058d4     13 13 02 F6 | 	mov	arg01, local01
058d8     40 2B B2 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     64 06 90 AD |  if_e	jmp	#LR__0428
058e4     C1 01 00 FF 
058e8     9C 15 06 F6 | 	mov	arg02, ##@LR__5829
058ec     13 13 02 F6 | 	mov	arg01, local01
058f0     28 2B B2 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     54 06 90 AD |  if_e	jmp	#LR__0429
058fc     C1 01 00 FF 
05900     A0 15 06 F6 | 	mov	arg02, ##@LR__5830
05904     13 13 02 F6 | 	mov	arg01, local01
05908     10 2B B2 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     44 06 90 AD |  if_e	jmp	#LR__0430
05914     C1 01 00 FF 
05918     A9 15 06 F6 | 	mov	arg02, ##@LR__5831
0591c     13 13 02 F6 | 	mov	arg01, local01
05920     F8 2A B2 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     34 06 90 AD |  if_e	jmp	#LR__0431
0592c     C1 01 00 FF 
05930     AD 15 06 F6 | 	mov	arg02, ##@LR__5832
05934     13 13 02 F6 | 	mov	arg01, local01
05938     E0 2A B2 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     24 06 90 AD |  if_e	jmp	#LR__0432
05944     C1 01 00 FF 
05948     B4 15 06 F6 | 	mov	arg02, ##@LR__5833
0594c     13 13 02 F6 | 	mov	arg01, local01
05950     C8 2A B2 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     14 06 90 AD |  if_e	jmp	#LR__0433
0595c     C1 01 00 FF 
05960     B8 15 06 F6 | 	mov	arg02, ##@LR__5834
05964     13 13 02 F6 | 	mov	arg01, local01
05968     B0 2A B2 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     04 06 90 AD |  if_e	jmp	#LR__0434
05974     C1 01 00 FF 
05978     BF 15 06 F6 | 	mov	arg02, ##@LR__5835
0597c     13 13 02 F6 | 	mov	arg01, local01
05980     98 2A B2 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     F4 05 90 AD |  if_e	jmp	#LR__0435
0598c     C1 01 00 FF 
05990     C3 15 06 F6 | 	mov	arg02, ##@LR__5836
05994     13 13 02 F6 | 	mov	arg01, local01
05998     80 2A B2 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     E4 05 90 AD |  if_e	jmp	#LR__0436
059a4     C1 01 00 FF 
059a8     CA 15 06 F6 | 	mov	arg02, ##@LR__5837
059ac     13 13 02 F6 | 	mov	arg01, local01
059b0     68 2A B2 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     D4 05 90 AD |  if_e	jmp	#LR__0437
059bc     C1 01 00 FF 
059c0     CE 15 06 F6 | 	mov	arg02, ##@LR__5838
059c4     13 13 02 F6 | 	mov	arg01, local01
059c8     50 2A B2 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     C4 05 90 AD |  if_e	jmp	#LR__0438
059d4     C1 01 00 FF 
059d8     D9 15 06 F6 | 	mov	arg02, ##@LR__5839
059dc     13 13 02 F6 | 	mov	arg01, local01
059e0     38 2A B2 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     B4 05 90 AD |  if_e	jmp	#LR__0439
059ec     C1 01 00 FF 
059f0     DD 15 06 F6 | 	mov	arg02, ##@LR__5840
059f4     13 13 02 F6 | 	mov	arg01, local01
059f8     20 2A B2 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     A4 05 90 AD |  if_e	jmp	#LR__0440
05a04     C1 01 00 FF 
05a08     E4 15 06 F6 | 	mov	arg02, ##@LR__5841
05a0c     13 13 02 F6 | 	mov	arg01, local01
05a10     08 2A B2 FD | 	call	#__system___string_cmp
05a14     00 FA 0D F2 | 	cmp	result1, #0 wz
05a18     94 05 90 AD |  if_e	jmp	#LR__0441
05a1c     C1 01 00 FF 
05a20     E8 15 06 F6 | 	mov	arg02, ##@LR__5842
05a24     13 13 02 F6 | 	mov	arg01, local01
05a28     F0 29 B2 FD | 	call	#__system___string_cmp
05a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a30     84 05 90 AD |  if_e	jmp	#LR__0442
05a34     C1 01 00 FF 
05a38     F0 15 06 F6 | 	mov	arg02, ##@LR__5843
05a3c     13 13 02 F6 | 	mov	arg01, local01
05a40     D8 29 B2 FD | 	call	#__system___string_cmp
05a44     00 FA 0D F2 | 	cmp	result1, #0 wz
05a48     74 05 90 AD |  if_e	jmp	#LR__0443
05a4c     C1 01 00 FF 
05a50     F4 15 06 F6 | 	mov	arg02, ##@LR__5844
05a54     13 13 02 F6 | 	mov	arg01, local01
05a58     C0 29 B2 FD | 	call	#__system___string_cmp
05a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a60     64 05 90 AD |  if_e	jmp	#LR__0444
05a64     C1 01 00 FF 
05a68     FB 15 06 F6 | 	mov	arg02, ##@LR__5845
05a6c     13 13 02 F6 | 	mov	arg01, local01
05a70     A8 29 B2 FD | 	call	#__system___string_cmp
05a74     00 FA 0D F2 | 	cmp	result1, #0 wz
05a78     54 05 90 AD |  if_e	jmp	#LR__0445
05a7c     C2 01 00 FF 
05a80     02 14 06 F6 | 	mov	arg02, ##@LR__5846
05a84     13 13 02 F6 | 	mov	arg01, local01
05a88     90 29 B2 FD | 	call	#__system___string_cmp
05a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a90     44 05 90 AD |  if_e	jmp	#LR__0446
05a94     C2 01 00 FF 
05a98     06 14 06 F6 | 	mov	arg02, ##@LR__5847
05a9c     13 13 02 F6 | 	mov	arg01, local01
05aa0     78 29 B2 FD | 	call	#__system___string_cmp
05aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa8     34 05 90 AD |  if_e	jmp	#LR__0447
05aac     C2 01 00 FF 
05ab0     0C 14 06 F6 | 	mov	arg02, ##@LR__5848
05ab4     13 13 02 F6 | 	mov	arg01, local01
05ab8     60 29 B2 FD | 	call	#__system___string_cmp
05abc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ac0     24 05 90 AD |  if_e	jmp	#LR__0448
05ac4     C2 01 00 FF 
05ac8     10 14 06 F6 | 	mov	arg02, ##@LR__5849
05acc     13 13 02 F6 | 	mov	arg01, local01
05ad0     48 29 B2 FD | 	call	#__system___string_cmp
05ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad8     14 05 90 AD |  if_e	jmp	#LR__0449
05adc     C2 01 00 FF 
05ae0     17 14 06 F6 | 	mov	arg02, ##@LR__5850
05ae4     13 13 02 F6 | 	mov	arg01, local01
05ae8     30 29 B2 FD | 	call	#__system___string_cmp
05aec     00 FA 0D F2 | 	cmp	result1, #0 wz
05af0     04 05 90 AD |  if_e	jmp	#LR__0450
05af4     C2 01 00 FF 
05af8     1C 14 06 F6 | 	mov	arg02, ##@LR__5851
05afc     13 13 02 F6 | 	mov	arg01, local01
05b00     18 29 B2 FD | 	call	#__system___string_cmp
05b04     00 FA 0D F2 | 	cmp	result1, #0 wz
05b08     F4 04 90 AD |  if_e	jmp	#LR__0451
05b0c     C2 01 00 FF 
05b10     21 14 06 F6 | 	mov	arg02, ##@LR__5852
05b14     13 13 02 F6 | 	mov	arg01, local01
05b18     00 29 B2 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     E4 04 90 AD |  if_e	jmp	#LR__0452
05b24     C2 01 00 FF 
05b28     28 14 06 F6 | 	mov	arg02, ##@LR__5853
05b2c     13 13 02 F6 | 	mov	arg01, local01
05b30     E8 28 B2 FD | 	call	#__system___string_cmp
05b34     00 FA 0D F2 | 	cmp	result1, #0 wz
05b38     D4 04 90 AD |  if_e	jmp	#LR__0453
05b3c     C2 01 00 FF 
05b40     2B 14 06 F6 | 	mov	arg02, ##@LR__5854
05b44     13 13 02 F6 | 	mov	arg01, local01
05b48     D0 28 B2 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     C4 04 90 AD |  if_e	jmp	#LR__0454
05b54     C2 01 00 FF 
05b58     35 14 06 F6 | 	mov	arg02, ##@LR__5855
05b5c     13 13 02 F6 | 	mov	arg01, local01
05b60     B8 28 B2 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     B4 04 90 AD |  if_e	jmp	#LR__0455
05b6c     C2 01 00 FF 
05b70     39 14 06 F6 | 	mov	arg02, ##@LR__5856
05b74     13 13 02 F6 | 	mov	arg01, local01
05b78     A0 28 B2 FD | 	call	#__system___string_cmp
05b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b80     A4 04 90 AD |  if_e	jmp	#LR__0456
05b84     C2 01 00 FF 
05b88     41 14 06 F6 | 	mov	arg02, ##@LR__5857
05b8c     13 13 02 F6 | 	mov	arg01, local01
05b90     88 28 B2 FD | 	call	#__system___string_cmp
05b94     00 FA 0D F2 | 	cmp	result1, #0 wz
05b98     94 04 90 AD |  if_e	jmp	#LR__0457
05b9c     C2 01 00 FF 
05ba0     45 14 06 F6 | 	mov	arg02, ##@LR__5858
05ba4     13 13 02 F6 | 	mov	arg01, local01
05ba8     70 28 B2 FD | 	call	#__system___string_cmp
05bac     00 FA 0D F2 | 	cmp	result1, #0 wz
05bb0     84 04 90 AD |  if_e	jmp	#LR__0458
05bb4     C2 01 00 FF 
05bb8     4B 14 06 F6 | 	mov	arg02, ##@LR__5859
05bbc     13 13 02 F6 | 	mov	arg01, local01
05bc0     58 28 B2 FD | 	call	#__system___string_cmp
05bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05bc8     74 04 90 AD |  if_e	jmp	#LR__0459
05bcc     C2 01 00 FF 
05bd0     51 14 06 F6 | 	mov	arg02, ##@LR__5860
05bd4     13 13 02 F6 | 	mov	arg01, local01
05bd8     40 28 B2 FD | 	call	#__system___string_cmp
05bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
05be0     64 04 90 AD |  if_e	jmp	#LR__0460
05be4     68 04 90 FD | 	jmp	#LR__0461
05be8                 | LR__0320
05be8     5C FA 05 F6 | 	mov	result1, #92
05bec     64 04 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0321
05bf0     5C FA 05 F6 | 	mov	result1, #92
05bf4     5C 04 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0322
05bf8     B9 FA 05 F6 | 	mov	result1, #185
05bfc     54 04 90 FD | 	jmp	#LR__0462
05c00                 | LR__0323
05c00     47 FA 05 F6 | 	mov	result1, #71
05c04     4C 04 90 FD | 	jmp	#LR__0462
05c08                 | LR__0324
05c08     59 FA 05 F6 | 	mov	result1, #89
05c0c     44 04 90 FD | 	jmp	#LR__0462
05c10                 | LR__0325
05c10     59 FA 05 F6 | 	mov	result1, #89
05c14     3C 04 90 FD | 	jmp	#LR__0462
05c18                 | LR__0326
05c18     C3 FA 05 F6 | 	mov	result1, #195
05c1c     34 04 90 FD | 	jmp	#LR__0462
05c20                 | LR__0327
05c20     AE FA 05 F6 | 	mov	result1, #174
05c24     2C 04 90 FD | 	jmp	#LR__0462
05c28                 | LR__0328
05c28     AE FA 05 F6 | 	mov	result1, #174
05c2c     24 04 90 FD | 	jmp	#LR__0462
05c30                 | LR__0329
05c30     B1 FA 05 F6 | 	mov	result1, #177
05c34     1C 04 90 FD | 	jmp	#LR__0462
05c38                 | LR__0330
05c38     B1 FA 05 F6 | 	mov	result1, #177
05c3c     14 04 90 FD | 	jmp	#LR__0462
05c40                 | LR__0331
05c40     AF FA 05 F6 | 	mov	result1, #175
05c44     0C 04 90 FD | 	jmp	#LR__0462
05c48                 | LR__0332
05c48     AF FA 05 F6 | 	mov	result1, #175
05c4c     04 04 90 FD | 	jmp	#LR__0462
05c50                 | LR__0333
05c50     B0 FA 05 F6 | 	mov	result1, #176
05c54     FC 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0334
05c58     B0 FA 05 F6 | 	mov	result1, #176
05c5c     F4 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0335
05c60     45 FA 05 F6 | 	mov	result1, #69
05c64     EC 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0336
05c68     45 FA 05 F6 | 	mov	result1, #69
05c6c     E4 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0337
05c70     69 FA 05 F6 | 	mov	result1, #105
05c74     DC 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0338
05c78     B4 FA 05 F6 | 	mov	result1, #180
05c7c     D4 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0339
05c80     40 FA 05 F6 | 	mov	result1, #64
05c84     CC 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0340
05c88     CF FA 05 F6 | 	mov	result1, #207
05c8c     C4 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0341
05c90     49 FA 05 F6 | 	mov	result1, #73
05c94     BC 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0342
05c98     49 FA 05 F6 | 	mov	result1, #73
05c9c     B4 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0343
05ca0     C4 FA 05 F6 | 	mov	result1, #196
05ca4     AC 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0344
05ca8     68 FA 05 F6 | 	mov	result1, #104
05cac     A4 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0345
05cb0     B7 FA 05 F6 | 	mov	result1, #183
05cb4     9C 03 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0346
05cb8     D9 FA 05 F6 | 	mov	result1, #217
05cbc     94 03 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0347
05cc0     73 FA 05 F6 | 	mov	result1, #115
05cc4     8C 03 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0348
05cc8     74 FA 05 F6 | 	mov	result1, #116
05ccc     84 03 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0349
05cd0     6C FA 05 F6 | 	mov	result1, #108
05cd4     7C 03 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0350
05cd8     6C FA 05 F6 | 	mov	result1, #108
05cdc     74 03 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0351
05ce0     89 FA 05 F6 | 	mov	result1, #137
05ce4     6C 03 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0352
05ce8     C2 FA 05 F6 | 	mov	result1, #194
05cec     64 03 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0353
05cf0     72 FA 05 F6 | 	mov	result1, #114
05cf4     5C 03 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0354
05cf8     5D FA 05 F6 | 	mov	result1, #93
05cfc     54 03 90 FD | 	jmp	#LR__0462
05d00                 | LR__0355
05d00     96 FA 05 F6 | 	mov	result1, #150
05d04     4C 03 90 FD | 	jmp	#LR__0462
05d08                 | LR__0356
05d08     43 FA 05 F6 | 	mov	result1, #67
05d0c     44 03 90 FD | 	jmp	#LR__0462
05d10                 | LR__0357
05d10     43 FA 05 F6 | 	mov	result1, #67
05d14     3C 03 90 FD | 	jmp	#LR__0462
05d18                 | LR__0358
05d18     43 FA 05 F6 | 	mov	result1, #67
05d1c     34 03 90 FD | 	jmp	#LR__0462
05d20                 | LR__0359
05d20     5A FA 05 F6 | 	mov	result1, #90
05d24     2C 03 90 FD | 	jmp	#LR__0462
05d28                 | LR__0360
05d28     AB FA 05 F6 | 	mov	result1, #171
05d2c     24 03 90 FD | 	jmp	#LR__0462
05d30                 | LR__0361
05d30     BD FA 05 F6 | 	mov	result1, #189
05d34     1C 03 90 FD | 	jmp	#LR__0462
05d38                 | LR__0362
05d38     BD FA 05 F6 | 	mov	result1, #189
05d3c     14 03 90 FD | 	jmp	#LR__0462
05d40                 | LR__0363
05d40     46 FA 05 F6 | 	mov	result1, #70
05d44     0C 03 90 FD | 	jmp	#LR__0462
05d48                 | LR__0364
05d48     46 FA 05 F6 | 	mov	result1, #70
05d4c     04 03 90 FD | 	jmp	#LR__0462
05d50                 | LR__0365
05d50     71 FA 05 F6 | 	mov	result1, #113
05d54     FC 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0366
05d58     71 FA 05 F6 | 	mov	result1, #113
05d5c     F4 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0367
05d60     60 FA 05 F6 | 	mov	result1, #96
05d64     EC 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0368
05d68     4A FA 05 F6 | 	mov	result1, #74
05d6c     E4 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0369
05d70     4A FA 05 F6 | 	mov	result1, #74
05d74     DC 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0370
05d78     48 FA 05 F6 | 	mov	result1, #72
05d7c     D4 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0371
05d80     48 FA 05 F6 | 	mov	result1, #72
05d84     CC 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0372
05d88     BB FA 05 F6 | 	mov	result1, #187
05d8c     C4 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0373
05d90     A9 FA 05 F6 | 	mov	result1, #169
05d94     BC 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0374
05d98     4E FA 05 F6 | 	mov	result1, #78
05d9c     B4 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0375
05da0     4E FA 05 F6 | 	mov	result1, #78
05da4     AC 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0376
05da8     58 FA 05 F6 | 	mov	result1, #88
05dac     A4 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0377
05db0     5F FA 05 F6 | 	mov	result1, #95
05db4     9C 02 90 FD | 	jmp	#LR__0462
05db8                 | LR__0378
05db8     5F FA 05 F6 | 	mov	result1, #95
05dbc     94 02 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0379
05dc0     B5 FA 05 F6 | 	mov	result1, #181
05dc4     8C 02 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0380
05dc8     4C FA 05 F6 | 	mov	result1, #76
05dcc     84 02 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0381
05dd0     4C FA 05 F6 | 	mov	result1, #76
05dd4     7C 02 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0382
05dd8     52 FA 05 F6 | 	mov	result1, #82
05ddc     74 02 90 FD | 	jmp	#LR__0462
05de0                 | LR__0383
05de0     52 FA 05 F6 | 	mov	result1, #82
05de4     6C 02 90 FD | 	jmp	#LR__0462
05de8                 | LR__0384
05de8     97 FA 05 F6 | 	mov	result1, #151
05dec     64 02 90 FD | 	jmp	#LR__0462
05df0                 | LR__0385
05df0     C6 FA 05 F6 | 	mov	result1, #198
05df4     5C 02 90 FD | 	jmp	#LR__0462
05df8                 | LR__0386
05df8     61 FA 05 F6 | 	mov	result1, #97
05dfc     54 02 90 FD | 	jmp	#LR__0462
05e00                 | LR__0387
05e00     61 FA 05 F6 | 	mov	result1, #97
05e04     4C 02 90 FD | 	jmp	#LR__0462
05e08                 | LR__0388
05e08     63 FA 05 F6 | 	mov	result1, #99
05e0c     44 02 90 FD | 	jmp	#LR__0462
05e10                 | LR__0389
05e10     41 FA 05 F6 | 	mov	result1, #65
05e14     3C 02 90 FD | 	jmp	#LR__0462
05e18                 | LR__0390
05e18     4B FA 05 F6 | 	mov	result1, #75
05e1c     34 02 90 FD | 	jmp	#LR__0462
05e20                 | LR__0391
05e20     4B FA 05 F6 | 	mov	result1, #75
05e24     2C 02 90 FD | 	jmp	#LR__0462
05e28                 | LR__0392
05e28     C1 FA 05 F6 | 	mov	result1, #193
05e2c     24 02 90 FD | 	jmp	#LR__0462
05e30                 | LR__0393
05e30     B3 FA 05 F6 | 	mov	result1, #179
05e34     1C 02 90 FD | 	jmp	#LR__0462
05e38                 | LR__0394
05e38     5E FA 05 F6 | 	mov	result1, #94
05e3c     14 02 90 FD | 	jmp	#LR__0462
05e40                 | LR__0395
05e40     5E FA 05 F6 | 	mov	result1, #94
05e44     0C 02 90 FD | 	jmp	#LR__0462
05e48                 | LR__0396
05e48     7C FA 05 F6 | 	mov	result1, #124
05e4c     04 02 90 FD | 	jmp	#LR__0462
05e50                 | LR__0397
05e50     7E FA 05 F6 | 	mov	result1, #126
05e54     FC 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0398
05e58     7D FA 05 F6 | 	mov	result1, #125
05e5c     F4 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0399
05e60     7F FA 05 F6 | 	mov	result1, #127
05e64     EC 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0400
05e68     80 FA 05 F6 | 	mov	result1, #128
05e6c     E4 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0401
05e70     55 FA 05 F6 | 	mov	result1, #85
05e74     DC 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0402
05e78     75 FA 05 F6 | 	mov	result1, #117
05e7c     D4 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0403
05e80     75 FA 05 F6 | 	mov	result1, #117
05e84     CC 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0404
05e88     42 FA 05 F6 | 	mov	result1, #66
05e8c     C4 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0405
05e90     42 FA 05 F6 | 	mov	result1, #66
05e94     BC 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0406
05e98     95 FA 05 F6 | 	mov	result1, #149
05e9c     B4 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0407
05ea0     AC FA 05 F6 | 	mov	result1, #172
05ea4     AC 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0408
05ea8     81 FA 05 F6 | 	mov	result1, #129
05eac     A4 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0409
05eb0     81 FA 05 F6 | 	mov	result1, #129
05eb4     9C 01 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0410
05eb8     44 FA 05 F6 | 	mov	result1, #68
05ebc     94 01 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0411
05ec0     44 FA 05 F6 | 	mov	result1, #68
05ec4     8C 01 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0412
05ec8     BC FA 05 F6 | 	mov	result1, #188
05ecc     84 01 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0413
05ed0     88 FA 05 F6 | 	mov	result1, #136
05ed4     7C 01 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0414
05ed8     B6 FA 05 F6 | 	mov	result1, #182
05edc     74 01 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0415
05ee0     92 FA 05 F6 | 	mov	result1, #146
05ee4     6C 01 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0416
05ee8     BE FA 05 F6 | 	mov	result1, #190
05eec     64 01 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0417
05ef0     BE FA 05 F6 | 	mov	result1, #190
05ef4     5C 01 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0418
05ef8     C7 FA 05 F6 | 	mov	result1, #199
05efc     54 01 90 FD | 	jmp	#LR__0462
05f00                 | LR__0419
05f00     D4 FA 05 F6 | 	mov	result1, #212
05f04     4C 01 90 FD | 	jmp	#LR__0462
05f08                 | LR__0420
05f08     D4 FA 05 F6 | 	mov	result1, #212
05f0c     44 01 90 FD | 	jmp	#LR__0462
05f10                 | LR__0421
05f10     AA FA 05 F6 | 	mov	result1, #170
05f14     3C 01 90 FD | 	jmp	#LR__0462
05f18                 | LR__0422
05f18     4D FA 05 F6 | 	mov	result1, #77
05f1c     34 01 90 FD | 	jmp	#LR__0462
05f20                 | LR__0423
05f20     4D FA 05 F6 | 	mov	result1, #77
05f24     2C 01 90 FD | 	jmp	#LR__0462
05f28                 | LR__0424
05f28     51 FA 05 F6 | 	mov	result1, #81
05f2c     24 01 90 FD | 	jmp	#LR__0462
05f30                 | LR__0425
05f30     51 FA 05 F6 | 	mov	result1, #81
05f34     1C 01 90 FD | 	jmp	#LR__0462
05f38                 | LR__0426
05f38     D2 FA 05 F6 | 	mov	result1, #210
05f3c     14 01 90 FD | 	jmp	#LR__0462
05f40                 | LR__0427
05f40     D2 FA 05 F6 | 	mov	result1, #210
05f44     0C 01 90 FD | 	jmp	#LR__0462
05f48                 | LR__0428
05f48     DA FA 05 F6 | 	mov	result1, #218
05f4c     04 01 90 FD | 	jmp	#LR__0462
05f50                 | LR__0429
05f50     DA FA 05 F6 | 	mov	result1, #218
05f54     FC 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0430
05f58     8E FA 05 F6 | 	mov	result1, #142
05f5c     F4 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0431
05f60     8E FA 05 F6 | 	mov	result1, #142
05f64     EC 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0432
05f68     90 FA 05 F6 | 	mov	result1, #144
05f6c     E4 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0433
05f70     90 FA 05 F6 | 	mov	result1, #144
05f74     DC 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0434
05f78     8D FA 05 F6 | 	mov	result1, #141
05f7c     D4 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0435
05f80     8D FA 05 F6 | 	mov	result1, #141
05f84     CC 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0436
05f88     8C FA 05 F6 | 	mov	result1, #140
05f8c     C4 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0437
05f90     8C FA 05 F6 | 	mov	result1, #140
05f94     BC 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0438
05f98     91 FA 05 F6 | 	mov	result1, #145
05f9c     B4 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0439
05fa0     91 FA 05 F6 | 	mov	result1, #145
05fa4     AC 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0440
05fa8     8B FA 05 F6 | 	mov	result1, #139
05fac     A4 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0441
05fb0     8B FA 05 F6 | 	mov	result1, #139
05fb4     9C 00 90 FD | 	jmp	#LR__0462
05fb8                 | LR__0442
05fb8     8F FA 05 F6 | 	mov	result1, #143
05fbc     94 00 90 FD | 	jmp	#LR__0462
05fc0                 | LR__0443
05fc0     8F FA 05 F6 | 	mov	result1, #143
05fc4     8C 00 90 FD | 	jmp	#LR__0462
05fc8                 | LR__0444
05fc8     8F FA 05 F6 | 	mov	result1, #143
05fcc     84 00 90 FD | 	jmp	#LR__0462
05fd0                 | LR__0445
05fd0     B2 FA 05 F6 | 	mov	result1, #178
05fd4     7C 00 90 FD | 	jmp	#LR__0462
05fd8                 | LR__0446
05fd8     B2 FA 05 F6 | 	mov	result1, #178
05fdc     74 00 90 FD | 	jmp	#LR__0462
05fe0                 | LR__0447
05fe0     75 FA 05 F6 | 	mov	result1, #117
05fe4     6C 00 90 FD | 	jmp	#LR__0462
05fe8                 | LR__0448
05fe8     75 FA 05 F6 | 	mov	result1, #117
05fec     64 00 90 FD | 	jmp	#LR__0462
05ff0                 | LR__0449
05ff0     6D FA 05 F6 | 	mov	result1, #109
05ff4     5C 00 90 FD | 	jmp	#LR__0462
05ff8                 | LR__0450
05ff8     6D FA 05 F6 | 	mov	result1, #109
05ffc     54 00 90 FD | 	jmp	#LR__0462
06000                 | LR__0451
06000     5B FA 05 F6 | 	mov	result1, #91
06004     4C 00 90 FD | 	jmp	#LR__0462
06008                 | LR__0452
06008     56 FA 05 F6 | 	mov	result1, #86
0600c     44 00 90 FD | 	jmp	#LR__0462
06010                 | LR__0453
06010     56 FA 05 F6 | 	mov	result1, #86
06014     3C 00 90 FD | 	jmp	#LR__0462
06018                 | LR__0454
06018     70 FA 05 F6 | 	mov	result1, #112
0601c     34 00 90 FD | 	jmp	#LR__0462
06020                 | LR__0455
06020     70 FA 05 F6 | 	mov	result1, #112
06024     2C 00 90 FD | 	jmp	#LR__0462
06028                 | LR__0456
06028     57 FA 05 F6 | 	mov	result1, #87
0602c     24 00 90 FD | 	jmp	#LR__0462
06030                 | LR__0457
06030     57 FA 05 F6 | 	mov	result1, #87
06034     1C 00 90 FD | 	jmp	#LR__0462
06038                 | LR__0458
06038     79 FA 05 F6 | 	mov	result1, #121
0603c     14 00 90 FD | 	jmp	#LR__0462
06040                 | LR__0459
06040     77 FA 05 F6 | 	mov	result1, #119
06044     0C 00 90 FD | 	jmp	#LR__0462
06048                 | LR__0460
06048     78 FA 05 F6 | 	mov	result1, #120
0604c     04 00 90 FD | 	jmp	#LR__0462
06050                 | LR__0461
06050     00 FA 05 F6 | 	mov	result1, #0
06054                 | LR__0462
06054     A7 F0 03 F6 | 	mov	ptra, fp
06058     B2 00 A0 FD | 	call	#popregs_
0605c                 | _iscommand_ret
0605c     2D 00 64 FD | 	ret
06060                 | 
06060                 | ' 
06060                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
06060                 | ' 
06060                 | ' function isfunction(s as string) as ubyte
06060                 | _isfunction
06060     01 4A 05 F6 | 	mov	COUNT_, #1
06064     A8 00 A0 FD | 	call	#pushregs_
06068                 | ' 
06068                 | ' select case s
06068     09 27 02 F6 | 	mov	local01, arg01
0606c     C2 01 00 FF 
06070     57 14 06 F6 | 	mov	arg02, ##@LR__5861
06074     13 13 02 F6 | 	mov	arg01, local01
06078     A0 23 B2 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     EC 05 90 AD |  if_e	jmp	#LR__0470
06084     C2 01 00 FF 
06088     5B 14 06 F6 | 	mov	arg02, ##@LR__5862
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     88 23 B2 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     DC 05 90 AD |  if_e	jmp	#LR__0471
0609c     C2 01 00 FF 
060a0     60 14 06 F6 | 	mov	arg02, ##@LR__5863
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     70 23 B2 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     CC 05 90 AD |  if_e	jmp	#LR__0472
060b4     C2 01 00 FF 
060b8     64 14 06 F6 | 	mov	arg02, ##@LR__5864
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     58 23 B2 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     BC 05 90 AD |  if_e	jmp	#LR__0473
060cc     C2 01 00 FF 
060d0     69 14 06 F6 | 	mov	arg02, ##@LR__5865
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     40 23 B2 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     AC 05 90 AD |  if_e	jmp	#LR__0474
060e4     C2 01 00 FF 
060e8     6D 14 06 F6 | 	mov	arg02, ##@LR__5866
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     28 23 B2 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     9C 05 90 AD |  if_e	jmp	#LR__0475
060fc     C2 01 00 FF 
06100     72 14 06 F6 | 	mov	arg02, ##@LR__5867
06104     13 13 02 F6 | 	mov	arg01, local01
06108     10 23 B2 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     8C 05 90 AD |  if_e	jmp	#LR__0476
06114     C2 01 00 FF 
06118     76 14 06 F6 | 	mov	arg02, ##@LR__5868
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     F8 22 B2 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     7C 05 90 AD |  if_e	jmp	#LR__0477
0612c     C2 01 00 FF 
06130     7B 14 06 F6 | 	mov	arg02, ##@LR__5869
06134     13 13 02 F6 | 	mov	arg01, local01
06138     E0 22 B2 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     6C 05 90 AD |  if_e	jmp	#LR__0478
06144     C2 01 00 FF 
06148     80 14 06 F6 | 	mov	arg02, ##@LR__5870
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     C8 22 B2 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     5C 05 90 AD |  if_e	jmp	#LR__0479
0615c     C2 01 00 FF 
06160     88 14 06 F6 | 	mov	arg02, ##@LR__5871
06164     13 13 02 F6 | 	mov	arg01, local01
06168     B0 22 B2 FD | 	call	#__system___string_cmp
0616c     00 FA 0D F2 | 	cmp	result1, #0 wz
06170     4C 05 90 AD |  if_e	jmp	#LR__0480
06174     C2 01 00 FF 
06178     8C 14 06 F6 | 	mov	arg02, ##@LR__5872
0617c     13 13 02 F6 | 	mov	arg01, local01
06180     98 22 B2 FD | 	call	#__system___string_cmp
06184     00 FA 0D F2 | 	cmp	result1, #0 wz
06188     3C 05 90 AD |  if_e	jmp	#LR__0481
0618c     C2 01 00 FF 
06190     92 14 06 F6 | 	mov	arg02, ##@LR__5873
06194     13 13 02 F6 | 	mov	arg01, local01
06198     80 22 B2 FD | 	call	#__system___string_cmp
0619c     00 FA 0D F2 | 	cmp	result1, #0 wz
061a0     2C 05 90 AD |  if_e	jmp	#LR__0482
061a4     C2 01 00 FF 
061a8     9C 14 06 F6 | 	mov	arg02, ##@LR__5874
061ac     13 13 02 F6 | 	mov	arg01, local01
061b0     68 22 B2 FD | 	call	#__system___string_cmp
061b4     00 FA 0D F2 | 	cmp	result1, #0 wz
061b8     1C 05 90 AD |  if_e	jmp	#LR__0483
061bc     C2 01 00 FF 
061c0     A5 14 06 F6 | 	mov	arg02, ##@LR__5875
061c4     13 13 02 F6 | 	mov	arg01, local01
061c8     50 22 B2 FD | 	call	#__system___string_cmp
061cc     00 FA 0D F2 | 	cmp	result1, #0 wz
061d0     0C 05 90 AD |  if_e	jmp	#LR__0484
061d4     C2 01 00 FF 
061d8     AE 14 06 F6 | 	mov	arg02, ##@LR__5876
061dc     13 13 02 F6 | 	mov	arg01, local01
061e0     38 22 B2 FD | 	call	#__system___string_cmp
061e4     00 FA 0D F2 | 	cmp	result1, #0 wz
061e8     FC 04 90 AD |  if_e	jmp	#LR__0485
061ec     C2 01 00 FF 
061f0     B2 14 06 F6 | 	mov	arg02, ##@LR__5877
061f4     13 13 02 F6 | 	mov	arg01, local01
061f8     20 22 B2 FD | 	call	#__system___string_cmp
061fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06200     EC 04 90 AD |  if_e	jmp	#LR__0486
06204     C2 01 00 FF 
06208     B6 14 06 F6 | 	mov	arg02, ##@LR__5878
0620c     13 13 02 F6 | 	mov	arg01, local01
06210     08 22 B2 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     DC 04 90 AD |  if_e	jmp	#LR__0487
0621c     C2 01 00 FF 
06220     BA 14 06 F6 | 	mov	arg02, ##@LR__5879
06224     13 13 02 F6 | 	mov	arg01, local01
06228     F0 21 B2 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     CC 04 90 AD |  if_e	jmp	#LR__0488
06234     C2 01 00 FF 
06238     C3 14 06 F6 | 	mov	arg02, ##@LR__5880
0623c     13 13 02 F6 | 	mov	arg01, local01
06240     D8 21 B2 FD | 	call	#__system___string_cmp
06244     00 FA 0D F2 | 	cmp	result1, #0 wz
06248     BC 04 90 AD |  if_e	jmp	#LR__0489
0624c     C2 01 00 FF 
06250     CC 14 06 F6 | 	mov	arg02, ##@LR__5881
06254     13 13 02 F6 | 	mov	arg01, local01
06258     C0 21 B2 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     AC 04 90 AD |  if_e	jmp	#LR__0490
06264     C2 01 00 FF 
06268     D0 14 06 F6 | 	mov	arg02, ##@LR__5882
0626c     13 13 02 F6 | 	mov	arg01, local01
06270     A8 21 B2 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     9C 04 90 AD |  if_e	jmp	#LR__0491
0627c     C2 01 00 FF 
06280     DE 14 06 F6 | 	mov	arg02, ##@LR__5883
06284     13 13 02 F6 | 	mov	arg01, local01
06288     90 21 B2 FD | 	call	#__system___string_cmp
0628c     00 FA 0D F2 | 	cmp	result1, #0 wz
06290     8C 04 90 AD |  if_e	jmp	#LR__0492
06294     C2 01 00 FF 
06298     EB 14 06 F6 | 	mov	arg02, ##@LR__5884
0629c     13 13 02 F6 | 	mov	arg01, local01
062a0     78 21 B2 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     7C 04 90 AD |  if_e	jmp	#LR__0493
062ac     C2 01 00 FF 
062b0     F7 14 06 F6 | 	mov	arg02, ##@LR__5885
062b4     13 13 02 F6 | 	mov	arg01, local01
062b8     60 21 B2 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     6C 04 90 AD |  if_e	jmp	#LR__0494
062c4     C2 01 00 FF 
062c8     FF 14 06 F6 | 	mov	arg02, ##@LR__5886
062cc     13 13 02 F6 | 	mov	arg01, local01
062d0     48 21 B2 FD | 	call	#__system___string_cmp
062d4     00 FA 0D F2 | 	cmp	result1, #0 wz
062d8     5C 04 90 AD |  if_e	jmp	#LR__0495
062dc     C2 01 00 FF 
062e0     03 15 06 F6 | 	mov	arg02, ##@LR__5887
062e4     13 13 02 F6 | 	mov	arg01, local01
062e8     30 21 B2 FD | 	call	#__system___string_cmp
062ec     00 FA 0D F2 | 	cmp	result1, #0 wz
062f0     4C 04 90 AD |  if_e	jmp	#LR__0496
062f4     C2 01 00 FF 
062f8     08 15 06 F6 | 	mov	arg02, ##@LR__5888
062fc     13 13 02 F6 | 	mov	arg01, local01
06300     18 21 B2 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     3C 04 90 AD |  if_e	jmp	#LR__0497
0630c     C2 01 00 FF 
06310     0F 15 06 F6 | 	mov	arg02, ##@LR__5889
06314     13 13 02 F6 | 	mov	arg01, local01
06318     00 21 B2 FD | 	call	#__system___string_cmp
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     2C 04 90 AD |  if_e	jmp	#LR__0498
06324     C2 01 00 FF 
06328     13 15 06 F6 | 	mov	arg02, ##@LR__5890
0632c     13 13 02 F6 | 	mov	arg01, local01
06330     E8 20 B2 FD | 	call	#__system___string_cmp
06334     00 FA 0D F2 | 	cmp	result1, #0 wz
06338     1C 04 90 AD |  if_e	jmp	#LR__0499
0633c     C2 01 00 FF 
06340     19 15 06 F6 | 	mov	arg02, ##@LR__5891
06344     13 13 02 F6 | 	mov	arg01, local01
06348     D0 20 B2 FD | 	call	#__system___string_cmp
0634c     00 FA 0D F2 | 	cmp	result1, #0 wz
06350     0C 04 90 AD |  if_e	jmp	#LR__0500
06354     C2 01 00 FF 
06358     1D 15 06 F6 | 	mov	arg02, ##@LR__5892
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     B8 20 B2 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     FC 03 90 AD |  if_e	jmp	#LR__0501
0636c     C2 01 00 FF 
06370     21 15 06 F6 | 	mov	arg02, ##@LR__5893
06374     13 13 02 F6 | 	mov	arg01, local01
06378     A0 20 B2 FD | 	call	#__system___string_cmp
0637c     00 FA 0D F2 | 	cmp	result1, #0 wz
06380     EC 03 90 AD |  if_e	jmp	#LR__0502
06384     C2 01 00 FF 
06388     27 15 06 F6 | 	mov	arg02, ##@LR__5894
0638c     13 13 02 F6 | 	mov	arg01, local01
06390     88 20 B2 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     DC 03 90 AD |  if_e	jmp	#LR__0503
0639c     C2 01 00 FF 
063a0     2E 15 06 F6 | 	mov	arg02, ##@LR__5895
063a4     13 13 02 F6 | 	mov	arg01, local01
063a8     70 20 B2 FD | 	call	#__system___string_cmp
063ac     00 FA 0D F2 | 	cmp	result1, #0 wz
063b0     CC 03 90 AD |  if_e	jmp	#LR__0504
063b4     C2 01 00 FF 
063b8     34 15 06 F6 | 	mov	arg02, ##@LR__5896
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     58 20 B2 FD | 	call	#__system___string_cmp
063c4     00 FA 0D F2 | 	cmp	result1, #0 wz
063c8     BC 03 90 AD |  if_e	jmp	#LR__0505
063cc     C2 01 00 FF 
063d0     39 15 06 F6 | 	mov	arg02, ##@LR__5897
063d4     13 13 02 F6 | 	mov	arg01, local01
063d8     40 20 B2 FD | 	call	#__system___string_cmp
063dc     00 FA 0D F2 | 	cmp	result1, #0 wz
063e0     AC 03 90 AD |  if_e	jmp	#LR__0506
063e4     C2 01 00 FF 
063e8     40 15 06 F6 | 	mov	arg02, ##@LR__5898
063ec     13 13 02 F6 | 	mov	arg01, local01
063f0     28 20 B2 FD | 	call	#__system___string_cmp
063f4     00 FA 0D F2 | 	cmp	result1, #0 wz
063f8     9C 03 90 AD |  if_e	jmp	#LR__0507
063fc     C2 01 00 FF 
06400     47 15 06 F6 | 	mov	arg02, ##@LR__5899
06404     13 13 02 F6 | 	mov	arg01, local01
06408     10 20 B2 FD | 	call	#__system___string_cmp
0640c     00 FA 0D F2 | 	cmp	result1, #0 wz
06410     8C 03 90 AD |  if_e	jmp	#LR__0508
06414     C2 01 00 FF 
06418     4E 15 06 F6 | 	mov	arg02, ##@LR__5900
0641c     13 13 02 F6 | 	mov	arg01, local01
06420     F8 1F B2 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     7C 03 90 AD |  if_e	jmp	#LR__0509
0642c     C2 01 00 FF 
06430     55 15 06 F6 | 	mov	arg02, ##@LR__5901
06434     13 13 02 F6 | 	mov	arg01, local01
06438     E0 1F B2 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     6C 03 90 AD |  if_e	jmp	#LR__0510
06444     C2 01 00 FF 
06448     5A 15 06 F6 | 	mov	arg02, ##@LR__5902
0644c     13 13 02 F6 | 	mov	arg01, local01
06450     C8 1F B2 FD | 	call	#__system___string_cmp
06454     00 FA 0D F2 | 	cmp	result1, #0 wz
06458     5C 03 90 AD |  if_e	jmp	#LR__0511
0645c     C2 01 00 FF 
06460     5F 15 06 F6 | 	mov	arg02, ##@LR__5903
06464     13 13 02 F6 | 	mov	arg01, local01
06468     B0 1F B2 FD | 	call	#__system___string_cmp
0646c     00 FA 0D F2 | 	cmp	result1, #0 wz
06470     4C 03 90 AD |  if_e	jmp	#LR__0512
06474     C2 01 00 FF 
06478     64 15 06 F6 | 	mov	arg02, ##@LR__5904
0647c     13 13 02 F6 | 	mov	arg01, local01
06480     98 1F B2 FD | 	call	#__system___string_cmp
06484     00 FA 0D F2 | 	cmp	result1, #0 wz
06488     3C 03 90 AD |  if_e	jmp	#LR__0513
0648c     C2 01 00 FF 
06490     69 15 06 F6 | 	mov	arg02, ##@LR__5905
06494     13 13 02 F6 | 	mov	arg01, local01
06498     80 1F B2 FD | 	call	#__system___string_cmp
0649c     00 FA 0D F2 | 	cmp	result1, #0 wz
064a0     2C 03 90 AD |  if_e	jmp	#LR__0514
064a4     C2 01 00 FF 
064a8     6E 15 06 F6 | 	mov	arg02, ##@LR__5906
064ac     13 13 02 F6 | 	mov	arg01, local01
064b0     68 1F B2 FD | 	call	#__system___string_cmp
064b4     00 FA 0D F2 | 	cmp	result1, #0 wz
064b8     1C 03 90 AD |  if_e	jmp	#LR__0515
064bc     C2 01 00 FF 
064c0     74 15 06 F6 | 	mov	arg02, ##@LR__5907
064c4     13 13 02 F6 | 	mov	arg01, local01
064c8     50 1F B2 FD | 	call	#__system___string_cmp
064cc     00 FA 0D F2 | 	cmp	result1, #0 wz
064d0     0C 03 90 AD |  if_e	jmp	#LR__0516
064d4     C2 01 00 FF 
064d8     7A 15 06 F6 | 	mov	arg02, ##@LR__5908
064dc     13 13 02 F6 | 	mov	arg01, local01
064e0     38 1F B2 FD | 	call	#__system___string_cmp
064e4     00 FA 0D F2 | 	cmp	result1, #0 wz
064e8     FC 02 90 AD |  if_e	jmp	#LR__0517
064ec     C2 01 00 FF 
064f0     80 15 06 F6 | 	mov	arg02, ##@LR__5909
064f4     13 13 02 F6 | 	mov	arg01, local01
064f8     20 1F B2 FD | 	call	#__system___string_cmp
064fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06500     EC 02 90 AD |  if_e	jmp	#LR__0518
06504     C2 01 00 FF 
06508     85 15 06 F6 | 	mov	arg02, ##@LR__5910
0650c     13 13 02 F6 | 	mov	arg01, local01
06510     08 1F B2 FD | 	call	#__system___string_cmp
06514     00 FA 0D F2 | 	cmp	result1, #0 wz
06518     DC 02 90 AD |  if_e	jmp	#LR__0519
0651c     C2 01 00 FF 
06520     8A 15 06 F6 | 	mov	arg02, ##@LR__5911
06524     13 13 02 F6 | 	mov	arg01, local01
06528     F0 1E B2 FD | 	call	#__system___string_cmp
0652c     00 FA 0D F2 | 	cmp	result1, #0 wz
06530     CC 02 90 AD |  if_e	jmp	#LR__0520
06534     C2 01 00 FF 
06538     92 15 06 F6 | 	mov	arg02, ##@LR__5912
0653c     13 13 02 F6 | 	mov	arg01, local01
06540     D8 1E B2 FD | 	call	#__system___string_cmp
06544     00 FA 0D F2 | 	cmp	result1, #0 wz
06548     BC 02 90 AD |  if_e	jmp	#LR__0521
0654c     C2 01 00 FF 
06550     98 15 06 F6 | 	mov	arg02, ##@LR__5913
06554     13 13 02 F6 | 	mov	arg01, local01
06558     C0 1E B2 FD | 	call	#__system___string_cmp
0655c     00 FA 0D F2 | 	cmp	result1, #0 wz
06560     AC 02 90 AD |  if_e	jmp	#LR__0522
06564     C2 01 00 FF 
06568     9F 15 06 F6 | 	mov	arg02, ##@LR__5914
0656c     13 13 02 F6 | 	mov	arg01, local01
06570     A8 1E B2 FD | 	call	#__system___string_cmp
06574     00 FA 0D F2 | 	cmp	result1, #0 wz
06578     9C 02 90 AD |  if_e	jmp	#LR__0523
0657c     C2 01 00 FF 
06580     A5 15 06 F6 | 	mov	arg02, ##@LR__5915
06584     13 13 02 F6 | 	mov	arg01, local01
06588     90 1E B2 FD | 	call	#__system___string_cmp
0658c     00 FA 0D F2 | 	cmp	result1, #0 wz
06590     8C 02 90 AD |  if_e	jmp	#LR__0524
06594     C2 01 00 FF 
06598     AB 15 06 F6 | 	mov	arg02, ##@LR__5916
0659c     13 13 02 F6 | 	mov	arg01, local01
065a0     78 1E B2 FD | 	call	#__system___string_cmp
065a4     00 FA 0D F2 | 	cmp	result1, #0 wz
065a8     7C 02 90 AD |  if_e	jmp	#LR__0525
065ac     C2 01 00 FF 
065b0     AF 15 06 F6 | 	mov	arg02, ##@LR__5917
065b4     13 13 02 F6 | 	mov	arg01, local01
065b8     60 1E B2 FD | 	call	#__system___string_cmp
065bc     00 FA 0D F2 | 	cmp	result1, #0 wz
065c0     6C 02 90 AD |  if_e	jmp	#LR__0526
065c4     C2 01 00 FF 
065c8     B3 15 06 F6 | 	mov	arg02, ##@LR__5918
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     48 1E B2 FD | 	call	#__system___string_cmp
065d4     00 FA 0D F2 | 	cmp	result1, #0 wz
065d8     5C 02 90 AD |  if_e	jmp	#LR__0527
065dc     C2 01 00 FF 
065e0     B7 15 06 F6 | 	mov	arg02, ##@LR__5919
065e4     13 13 02 F6 | 	mov	arg01, local01
065e8     30 1E B2 FD | 	call	#__system___string_cmp
065ec     00 FA 0D F2 | 	cmp	result1, #0 wz
065f0     4C 02 90 AD |  if_e	jmp	#LR__0528
065f4     C2 01 00 FF 
065f8     BD 15 06 F6 | 	mov	arg02, ##@LR__5920
065fc     13 13 02 F6 | 	mov	arg01, local01
06600     18 1E B2 FD | 	call	#__system___string_cmp
06604     00 FA 0D F2 | 	cmp	result1, #0 wz
06608     3C 02 90 AD |  if_e	jmp	#LR__0529
0660c     C2 01 00 FF 
06610     C3 15 06 F6 | 	mov	arg02, ##@LR__5921
06614     13 13 02 F6 | 	mov	arg01, local01
06618     00 1E B2 FD | 	call	#__system___string_cmp
0661c     00 FA 0D F2 | 	cmp	result1, #0 wz
06620     2C 02 90 AD |  if_e	jmp	#LR__0530
06624     C2 01 00 FF 
06628     C8 15 06 F6 | 	mov	arg02, ##@LR__5922
0662c     13 13 02 F6 | 	mov	arg01, local01
06630     E8 1D B2 FD | 	call	#__system___string_cmp
06634     00 FA 0D F2 | 	cmp	result1, #0 wz
06638     1C 02 90 AD |  if_e	jmp	#LR__0531
0663c     C2 01 00 FF 
06640     CC 15 06 F6 | 	mov	arg02, ##@LR__5923
06644     13 13 02 F6 | 	mov	arg01, local01
06648     D0 1D B2 FD | 	call	#__system___string_cmp
0664c     00 FA 0D F2 | 	cmp	result1, #0 wz
06650     0C 02 90 AD |  if_e	jmp	#LR__0532
06654     C2 01 00 FF 
06658     D0 15 06 F6 | 	mov	arg02, ##@LR__5924
0665c     13 13 02 F6 | 	mov	arg01, local01
06660     B8 1D B2 FD | 	call	#__system___string_cmp
06664     00 FA 0D F2 | 	cmp	result1, #0 wz
06668     FC 01 90 AD |  if_e	jmp	#LR__0533
0666c     00 02 90 FD | 	jmp	#LR__0534
06670                 | LR__0470
06670     9E FA 05 F6 | 	mov	result1, #158
06674     FC 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0471
06678     85 FA 05 F6 | 	mov	result1, #133
0667c     F4 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0472
06680     9B FA 05 F6 | 	mov	result1, #155
06684     EC 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0473
06688     9B FA 05 F6 | 	mov	result1, #155
0668c     E4 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0474
06690     A7 FA 05 F6 | 	mov	result1, #167
06694     DC 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0475
06698     84 FA 05 F6 | 	mov	result1, #132
0669c     D4 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0476
066a0     86 FA 05 F6 | 	mov	result1, #134
066a4     CC 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0477
066a8     A2 FA 05 F6 | 	mov	result1, #162
066ac     C4 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0478
066b0     9F FA 05 F6 | 	mov	result1, #159
066b4     BC 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0479
066b8     C0 FA 05 F6 | 	mov	result1, #192
066bc     B4 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0480
066c0     82 FA 05 F6 | 	mov	result1, #130
066c4     AC 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0481
066c8     99 FA 05 F6 | 	mov	result1, #153
066cc     A4 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0482
066d0     D7 FA 05 F6 | 	mov	result1, #215
066d4     9C 01 90 FD | 	jmp	#LR__0535
066d8                 | LR__0483
066d8     D8 FA 05 F6 | 	mov	result1, #216
066dc     94 01 90 FD | 	jmp	#LR__0535
066e0                 | LR__0484
066e0     C5 FA 05 F6 | 	mov	result1, #197
066e4     8C 01 90 FD | 	jmp	#LR__0535
066e8                 | LR__0485
066e8     C5 FA 05 F6 | 	mov	result1, #197
066ec     84 01 90 FD | 	jmp	#LR__0535
066f0                 | LR__0486
066f0     9C FA 05 F6 | 	mov	result1, #156
066f4     7C 01 90 FD | 	jmp	#LR__0535
066f8                 | LR__0487
066f8     D3 FA 05 F6 | 	mov	result1, #211
066fc     74 01 90 FD | 	jmp	#LR__0535
06700                 | LR__0488
06700     D3 FA 05 F6 | 	mov	result1, #211
06704     6C 01 90 FD | 	jmp	#LR__0535
06708                 | LR__0489
06708     6F FA 05 F6 | 	mov	result1, #111
0670c     64 01 90 FD | 	jmp	#LR__0535
06710                 | LR__0490
06710     6F FA 05 F6 | 	mov	result1, #111
06714     5C 01 90 FD | 	jmp	#LR__0535
06718                 | LR__0491
06718     93 FA 05 F6 | 	mov	result1, #147
0671c     54 01 90 FD | 	jmp	#LR__0535
06720                 | LR__0492
06720     94 FA 05 F6 | 	mov	result1, #148
06724     4C 01 90 FD | 	jmp	#LR__0535
06728                 | LR__0493
06728     DB FA 05 F6 | 	mov	result1, #219
0672c     44 01 90 FD | 	jmp	#LR__0535
06730                 | LR__0494
06730     62 FA 05 F6 | 	mov	result1, #98
06734     3C 01 90 FD | 	jmp	#LR__0535
06738                 | LR__0495
06738     62 FA 05 F6 | 	mov	result1, #98
0673c     34 01 90 FD | 	jmp	#LR__0535
06740                 | LR__0496
06740     A3 FA 05 F6 | 	mov	result1, #163
06744     2C 01 90 FD | 	jmp	#LR__0535
06748                 | LR__0497
06748     9D FA 05 F6 | 	mov	result1, #157
0674c     24 01 90 FD | 	jmp	#LR__0535
06750                 | LR__0498
06750     8A FA 05 F6 | 	mov	result1, #138
06754     1C 01 90 FD | 	jmp	#LR__0535
06758                 | LR__0499
06758     A4 FA 05 F6 | 	mov	result1, #164
0675c     14 01 90 FD | 	jmp	#LR__0535
06760                 | LR__0500
06760     A8 FA 05 F6 | 	mov	result1, #168
06764     0C 01 90 FD | 	jmp	#LR__0535
06768                 | LR__0501
06768     AD FA 05 F6 | 	mov	result1, #173
0676c     04 01 90 FD | 	jmp	#LR__0535
06770                 | LR__0502
06770     9A FA 05 F6 | 	mov	result1, #154
06774     FC 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0503
06778     D1 FA 05 F6 | 	mov	result1, #209
0677c     F4 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0504
06780     D0 FA 05 F6 | 	mov	result1, #208
06784     EC 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0505
06788     A6 FA 05 F6 | 	mov	result1, #166
0678c     E4 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0506
06790     66 FA 05 F6 | 	mov	result1, #102
06794     DC 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0507
06798     67 FA 05 F6 | 	mov	result1, #103
0679c     D4 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0508
067a0     64 FA 05 F6 | 	mov	result1, #100
067a4     CC 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0509
067a8     65 FA 05 F6 | 	mov	result1, #101
067ac     C4 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0510
067b0     D5 FA 05 F6 | 	mov	result1, #213
067b4     BC 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0511
067b8     D6 FA 05 F6 | 	mov	result1, #214
067bc     B4 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0512
067c0     C8 FA 05 F6 | 	mov	result1, #200
067c4     AC 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0513
067c8     C9 FA 05 F6 | 	mov	result1, #201
067cc     A4 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0514
067d0     CA FA 05 F6 | 	mov	result1, #202
067d4     9C 00 90 FD | 	jmp	#LR__0535
067d8                 | LR__0515
067d8     CC FA 05 F6 | 	mov	result1, #204
067dc     94 00 90 FD | 	jmp	#LR__0535
067e0                 | LR__0516
067e0     CD FA 05 F6 | 	mov	result1, #205
067e4     8C 00 90 FD | 	jmp	#LR__0535
067e8                 | LR__0517
067e8     CE FA 05 F6 | 	mov	result1, #206
067ec     84 00 90 FD | 	jmp	#LR__0535
067f0                 | LR__0518
067f0     CB FA 05 F6 | 	mov	result1, #203
067f4     7C 00 90 FD | 	jmp	#LR__0535
067f8                 | LR__0519
067f8     98 FA 05 F6 | 	mov	result1, #152
067fc     74 00 90 FD | 	jmp	#LR__0535
06800                 | LR__0520
06800     7B FA 05 F6 | 	mov	result1, #123
06804     6C 00 90 FD | 	jmp	#LR__0535
06808                 | LR__0521
06808     76 FA 05 F6 | 	mov	result1, #118
0680c     64 00 90 FD | 	jmp	#LR__0535
06810                 | LR__0522
06810     A5 FA 05 F6 | 	mov	result1, #165
06814     5C 00 90 FD | 	jmp	#LR__0535
06818                 | LR__0523
06818     7A FA 05 F6 | 	mov	result1, #122
0681c     54 00 90 FD | 	jmp	#LR__0535
06820                 | LR__0524
06820     BF FA 05 F6 | 	mov	result1, #191
06824     4C 00 90 FD | 	jmp	#LR__0535
06828                 | LR__0525
06828     54 FA 05 F6 | 	mov	result1, #84
0682c     44 00 90 FD | 	jmp	#LR__0535
06830                 | LR__0526
06830     6B FA 05 F6 | 	mov	result1, #107
06834     3C 00 90 FD | 	jmp	#LR__0535
06838                 | LR__0527
06838     87 FA 05 F6 | 	mov	result1, #135
0683c     34 00 90 FD | 	jmp	#LR__0535
06840                 | LR__0528
06840     6A FA 05 F6 | 	mov	result1, #106
06844     2C 00 90 FD | 	jmp	#LR__0535
06848                 | LR__0529
06848     6E FA 05 F6 | 	mov	result1, #110
0684c     24 00 90 FD | 	jmp	#LR__0535
06850                 | LR__0530
06850     A1 FA 05 F6 | 	mov	result1, #161
06854     1C 00 90 FD | 	jmp	#LR__0535
06858                 | LR__0531
06858     83 FA 05 F6 | 	mov	result1, #131
0685c     14 00 90 FD | 	jmp	#LR__0535
06860                 | LR__0532
06860     A0 FA 05 F6 | 	mov	result1, #160
06864     0C 00 90 FD | 	jmp	#LR__0535
06868                 | LR__0533
06868     9B FA 05 F6 | 	mov	result1, #155
0686c     04 00 90 FD | 	jmp	#LR__0535
06870                 | LR__0534
06870     00 FA 05 F6 | 	mov	result1, #0
06874                 | LR__0535
06874     A7 F0 03 F6 | 	mov	ptra, fp
06878     B2 00 A0 FD | 	call	#popregs_
0687c                 | _isfunction_ret
0687c     2D 00 64 FD | 	ret
06880                 | 
06880                 | ' 
06880                 | ' ' Check if the part is a name
06880                 | ' 
06880                 | ' function isname(s as string) as boolean
06880                 | _isname
06880     0D 4A 05 F6 | 	mov	COUNT_, #13
06884     A8 00 A0 FD | 	call	#pushregs_
06888     09 27 02 F6 | 	mov	local01, arg01
0688c     09 29 02 F6 | 	mov	local02, arg01
06890     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
06894                 | LR__0540
06894     14 FB C9 FA | 	rdbyte	result1, local02 wz
06898     01 28 06 51 |  if_ne	add	local02, #1
0689c     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
068a0                 | LR__0541
068a0     09 29 82 F1 | 	sub	local02, arg01
068a4     14 FB 01 F6 | 	mov	result1, local02
068a8     FD 2A 0A F6 | 	mov	local03, result1 wz
068ac     00 FA 05 A6 |  if_e	mov	result1, #0
068b0     34 02 90 AD |  if_e	jmp	#LR__0553
068b4     13 13 02 F6 | 	mov	arg01, local01
068b8     01 14 06 F6 | 	mov	arg02, #1
068bc     01 16 06 F6 | 	mov	arg03, #1
068c0     C8 3C B2 FD | 	call	#__system__Mid_S
068c4     FD 2C 02 F6 | 	mov	local04, result1
068c8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
068c8     C2 01 00 FF 
068cc     D7 15 06 F6 | 	mov	arg02, ##@LR__5925
068d0     16 13 02 F6 | 	mov	arg01, local04
068d4     44 1B B2 FD | 	call	#__system___string_cmp
068d8     00 FA 55 F2 | 	cmps	result1, #0 wc
068dc     18 00 90 CD |  if_b	jmp	#LR__0542
068e0     C2 01 00 FF 
068e4     D9 15 06 F6 | 	mov	arg02, ##@LR__5926
068e8     16 13 02 F6 | 	mov	arg01, local04
068ec     2C 1B B2 FD | 	call	#__system___string_cmp
068f0     01 FA 55 F2 | 	cmps	result1, #1 wc
068f4     1C 00 90 CD |  if_b	jmp	#LR__0543
068f8                 | LR__0542
068f8     C2 01 00 FF 
068fc     DB 15 06 F6 | 	mov	arg02, ##@LR__5927
06900     16 13 02 F6 | 	mov	arg01, local04
06904     14 1B B2 FD | 	call	#__system___string_cmp
06908     00 FA 0D F2 | 	cmp	result1, #0 wz
0690c     00 FA 05 56 |  if_ne	mov	result1, #0
06910     D4 01 90 5D |  if_ne	jmp	#LR__0553
06914                 | LR__0543
06914                 | ' if l>2 then 
06914     03 2A 56 F2 | 	cmps	local03, #3 wc
06918     C8 01 90 CD |  if_b	jmp	#LR__0552
0691c                 | '   for i=2 to l
0691c     02 2E 06 F6 | 	mov	local05, #2
06920     15 31 02 F6 | 	mov	local06, local03
06924     01 30 06 F1 | 	add	local06, #1
06928                 | LR__0544
06928     18 2F 52 F2 | 	cmps	local05, local06 wc
0692c     B4 01 90 3D |  if_ae	jmp	#LR__0551
06930     13 13 02 F6 | 	mov	arg01, local01
06934     17 15 02 F6 | 	mov	arg02, local05
06938     01 16 06 F6 | 	mov	arg03, #1
0693c     4C 3C B2 FD | 	call	#__system__Mid_S
06940     FD 2C 02 F6 | 	mov	local04, result1
06944                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06944     15 2F 52 F2 | 	cmps	local05, local03 wc
06948     9C 00 90 3D |  if_ae	jmp	#LR__0547
0694c     C2 01 00 FF 
06950     DD 15 06 F6 | 	mov	arg02, ##@LR__5928
06954     16 13 02 F6 | 	mov	arg01, local04
06958     C0 1A B2 FD | 	call	#__system___string_cmp
0695c     00 FA 55 F2 | 	cmps	result1, #0 wc
06960     18 00 90 CD |  if_b	jmp	#LR__0545
06964     C2 01 00 FF 
06968     DF 15 06 F6 | 	mov	arg02, ##@LR__5929
0696c     16 13 02 F6 | 	mov	arg01, local04
06970     A8 1A B2 FD | 	call	#__system___string_cmp
06974     01 FA 55 F2 | 	cmps	result1, #1 wc
06978     6C 00 90 CD |  if_b	jmp	#LR__0547
0697c                 | LR__0545
0697c     C2 01 00 FF 
06980     E1 15 06 F6 | 	mov	arg02, ##@LR__5930
06984     16 13 02 F6 | 	mov	arg01, local04
06988     90 1A B2 FD | 	call	#__system___string_cmp
0698c     00 FA 55 F2 | 	cmps	result1, #0 wc
06990     18 00 90 CD |  if_b	jmp	#LR__0546
06994     C2 01 00 FF 
06998     E3 15 06 F6 | 	mov	arg02, ##@LR__5931
0699c     16 13 02 F6 | 	mov	arg01, local04
069a0     78 1A B2 FD | 	call	#__system___string_cmp
069a4     01 FA 55 F2 | 	cmps	result1, #1 wc
069a8     3C 00 90 CD |  if_b	jmp	#LR__0547
069ac                 | LR__0546
069ac     C2 01 00 FF 
069b0     E5 33 06 F6 | 	mov	local07, ##@LR__5932
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     19 15 02 F6 | 	mov	arg02, local07
069bc     5C 1A B2 FD | 	call	#__system___string_cmp
069c0     00 FA 0D F2 | 	cmp	result1, #0 wz
069c4     20 00 90 AD |  if_e	jmp	#LR__0547
069c8     C2 01 00 FF 
069cc     E7 35 06 F6 | 	mov	local08, ##@LR__5933
069d0     16 13 02 F6 | 	mov	arg01, local04
069d4     1A 15 02 F6 | 	mov	arg02, local08
069d8     40 1A B2 FD | 	call	#__system___string_cmp
069dc     FD 36 0A F6 | 	mov	local09, result1 wz
069e0     00 FA 05 56 |  if_ne	mov	result1, #0
069e4     00 01 90 5D |  if_ne	jmp	#LR__0553
069e8                 | LR__0547
069e8                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
069e8     15 2F 0A F2 | 	cmp	local05, local03 wz
069ec     EC 00 90 5D |  if_ne	jmp	#LR__0550
069f0     C2 01 00 FF 
069f4     E9 39 06 F6 | 	mov	local10, ##@LR__5934
069f8     16 13 02 F6 | 	mov	arg01, local04
069fc     1C 15 02 F6 | 	mov	arg02, local10
06a00     18 1A B2 FD | 	call	#__system___string_cmp
06a04     FD 3A 02 F6 | 	mov	local11, result1
06a08     00 3A 56 F2 | 	cmps	local11, #0 wc
06a0c     1C 00 90 CD |  if_b	jmp	#LR__0548
06a10     C2 01 00 FF 
06a14     EB 15 06 F6 | 	mov	arg02, ##@LR__5935
06a18     16 13 02 F6 | 	mov	arg01, local04
06a1c     FC 19 B2 FD | 	call	#__system___string_cmp
06a20     FD 38 02 F6 | 	mov	local10, result1
06a24     01 38 56 F2 | 	cmps	local10, #1 wc
06a28     B0 00 90 CD |  if_b	jmp	#LR__0550
06a2c                 | LR__0548
06a2c     C2 01 00 FF 
06a30     ED 15 06 F6 | 	mov	arg02, ##@LR__5936
06a34     16 13 02 F6 | 	mov	arg01, local04
06a38     E0 19 B2 FD | 	call	#__system___string_cmp
06a3c     00 FA 55 F2 | 	cmps	result1, #0 wc
06a40     1C 00 90 CD |  if_b	jmp	#LR__0549
06a44     C2 01 00 FF 
06a48     EF 37 06 F6 | 	mov	local09, ##@LR__5937
06a4c     16 13 02 F6 | 	mov	arg01, local04
06a50     1B 15 02 F6 | 	mov	arg02, local09
06a54     C4 19 B2 FD | 	call	#__system___string_cmp
06a58     01 FA 55 F2 | 	cmps	result1, #1 wc
06a5c     7C 00 90 CD |  if_b	jmp	#LR__0550
06a60                 | LR__0549
06a60     C2 01 00 FF 
06a64     F1 37 06 F6 | 	mov	local09, ##@LR__5938
06a68     16 13 02 F6 | 	mov	arg01, local04
06a6c     1B 15 02 F6 | 	mov	arg02, local09
06a70     A8 19 B2 FD | 	call	#__system___string_cmp
06a74     00 FA 4D F2 | 	cmps	result1, #0 wz
06a78     60 00 90 AD |  if_e	jmp	#LR__0550
06a7c     C2 01 00 FF 
06a80     F3 35 06 F6 | 	mov	local08, ##@LR__5939
06a84     16 13 02 F6 | 	mov	arg01, local04
06a88     1A 15 02 F6 | 	mov	arg02, local08
06a8c     8C 19 B2 FD | 	call	#__system___string_cmp
06a90     FD 36 0A F6 | 	mov	local09, result1 wz
06a94     44 00 90 AD |  if_e	jmp	#LR__0550
06a98     C2 01 00 FF 
06a9c     F5 3D 06 F6 | 	mov	local12, ##@LR__5940
06aa0     1E 35 02 F6 | 	mov	local08, local12
06aa4     16 13 02 F6 | 	mov	arg01, local04
06aa8     1A 15 02 F6 | 	mov	arg02, local08
06aac     6C 19 B2 FD | 	call	#__system___string_cmp
06ab0     FD 32 0A F6 | 	mov	local07, result1 wz
06ab4     24 00 90 AD |  if_e	jmp	#LR__0550
06ab8     C2 01 00 FF 
06abc     F7 3F 06 F6 | 	mov	local13, ##@LR__5941
06ac0     1F 3D 02 F6 | 	mov	local12, local13
06ac4     16 13 02 F6 | 	mov	arg01, local04
06ac8     1E 15 02 F6 | 	mov	arg02, local12
06acc     4C 19 B2 FD | 	call	#__system___string_cmp
06ad0     FD 34 0A F6 | 	mov	local08, result1 wz
06ad4     00 FA 05 56 |  if_ne	mov	result1, #0
06ad8     0C 00 90 5D |  if_ne	jmp	#LR__0553
06adc                 | LR__0550
06adc     01 2E 06 F1 | 	add	local05, #1
06ae0     44 FE 9F FD | 	jmp	#LR__0544
06ae4                 | LR__0551
06ae4                 | LR__0552
06ae4                 | ' return true
06ae4     01 FA 65 F6 | 	neg	result1, #1
06ae8                 | LR__0553
06ae8     A7 F0 03 F6 | 	mov	ptra, fp
06aec     B2 00 A0 FD | 	call	#popregs_
06af0                 | _isname_ret
06af0     2D 00 64 FD | 	ret
06af4                 | 
06af4                 | ' 
06af4                 | ' ' Check if the part is a number.  
06af4                 | ' 
06af4                 | ' function isnum(s as string) as boolean 
06af4                 | _isnum
06af4     13 4A 05 F6 | 	mov	COUNT_, #19
06af8     A8 00 A0 FD | 	call	#pushregs_
06afc     09 27 02 F6 | 	mov	local01, arg01
06b00     00 28 06 F6 | 	mov	local02, #0
06b04     00 2A 06 F6 | 	mov	local03, #0
06b08     13 13 02 F6 | 	mov	arg01, local01
06b0c     09 2D 02 F6 | 	mov	local04, arg01
06b10     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06b14                 | LR__0560
06b14     16 FB C9 FA | 	rdbyte	result1, local04 wz
06b18     01 2C 06 51 |  if_ne	add	local04, #1
06b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06b20                 | LR__0561
06b20     09 2D 82 F1 | 	sub	local04, arg01
06b24     16 FB 01 F6 | 	mov	result1, local04
06b28     FD 2E 0A F6 | 	mov	local05, result1 wz
06b2c     00 FA 05 A6 |  if_e	mov	result1, #0
06b30     A0 03 90 AD |  if_e	jmp	#LR__0576
06b34     13 13 02 F6 | 	mov	arg01, local01
06b38     01 14 06 F6 | 	mov	arg02, #1
06b3c     01 16 06 F6 | 	mov	arg03, #1
06b40     48 3A B2 FD | 	call	#__system__Mid_S
06b44     FD 30 02 F6 | 	mov	local06, result1
06b48                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06b48     C2 01 00 FF 
06b4c     F9 15 06 F6 | 	mov	arg02, ##@LR__5942
06b50     18 13 02 F6 | 	mov	arg01, local06
06b54     C4 18 B2 FD | 	call	#__system___string_cmp
06b58     00 FA 55 F2 | 	cmps	result1, #0 wc
06b5c     1C 00 90 CD |  if_b	jmp	#LR__0562
06b60     C2 01 00 FF 
06b64     FB 33 06 F6 | 	mov	local07, ##@LR__5943
06b68     18 13 02 F6 | 	mov	arg01, local06
06b6c     19 15 02 F6 | 	mov	arg02, local07
06b70     A8 18 B2 FD | 	call	#__system___string_cmp
06b74     01 FA 55 F2 | 	cmps	result1, #1 wc
06b78     84 00 90 CD |  if_b	jmp	#LR__0563
06b7c                 | LR__0562
06b7c     C2 01 00 FF 
06b80     FD 35 06 F6 | 	mov	local08, ##@LR__5944
06b84     1A 33 02 F6 | 	mov	local07, local08
06b88     18 13 02 F6 | 	mov	arg01, local06
06b8c     19 15 02 F6 | 	mov	arg02, local07
06b90     88 18 B2 FD | 	call	#__system___string_cmp
06b94     00 FA 0D F2 | 	cmp	result1, #0 wz
06b98     64 00 90 AD |  if_e	jmp	#LR__0563
06b9c     C2 01 00 FF 
06ba0     FF 37 06 F6 | 	mov	local09, ##@LR__5945
06ba4     1B 35 02 F6 | 	mov	local08, local09
06ba8     18 13 02 F6 | 	mov	arg01, local06
06bac     1A 15 02 F6 | 	mov	arg02, local08
06bb0     68 18 B2 FD | 	call	#__system___string_cmp
06bb4     FD 32 0A F6 | 	mov	local07, result1 wz
06bb8     44 00 90 AD |  if_e	jmp	#LR__0563
06bbc     C3 01 00 FF 
06bc0     01 38 06 F6 | 	mov	local10, ##@LR__5946
06bc4     1C 37 02 F6 | 	mov	local09, local10
06bc8     18 13 02 F6 | 	mov	arg01, local06
06bcc     1B 15 02 F6 | 	mov	arg02, local09
06bd0     48 18 B2 FD | 	call	#__system___string_cmp
06bd4     FD 34 0A F6 | 	mov	local08, result1 wz
06bd8     24 00 90 AD |  if_e	jmp	#LR__0563
06bdc     C3 01 00 FF 
06be0     03 3A 06 F6 | 	mov	local11, ##@LR__5947
06be4     1D 39 02 F6 | 	mov	local10, local11
06be8     18 13 02 F6 | 	mov	arg01, local06
06bec     1C 15 02 F6 | 	mov	arg02, local10
06bf0     28 18 B2 FD | 	call	#__system___string_cmp
06bf4     FD 36 0A F6 | 	mov	local09, result1 wz
06bf8     00 FA 05 56 |  if_ne	mov	result1, #0
06bfc     D4 02 90 5D |  if_ne	jmp	#LR__0576
06c00                 | LR__0563
06c00                 | ' if m$="." then ds=1
06c00     C3 01 00 FF 
06c04     05 14 06 F6 | 	mov	arg02, ##@LR__5948
06c08     18 13 02 F6 | 	mov	arg01, local06
06c0c     0C 18 B2 FD | 	call	#__system___string_cmp
06c10     00 FA 0D F2 | 	cmp	result1, #0 wz
06c14     01 28 06 A6 |  if_e	mov	local02, #1
06c18                 | ' if m$="$" then hex=1 else hex=0
06c18     C3 01 00 FF 
06c1c     07 14 06 F6 | 	mov	arg02, ##@LR__5949
06c20     18 13 02 F6 | 	mov	arg01, local06
06c24     F4 17 B2 FD | 	call	#__system___string_cmp
06c28     00 FA 0D F2 | 	cmp	result1, #0 wz
06c2c     01 3C 06 A6 |  if_e	mov	local12, #1
06c30     00 3C 06 56 |  if_ne	mov	local12, #0
06c34                 | ' if m$="%" then bin=1 else bin=0
06c34     C3 01 00 FF 
06c38     09 14 06 F6 | 	mov	arg02, ##@LR__5950
06c3c     18 13 02 F6 | 	mov	arg01, local06
06c40     D8 17 B2 FD | 	call	#__system___string_cmp
06c44     00 FA 0D F2 | 	cmp	result1, #0 wz
06c48     01 3E 06 A6 |  if_e	mov	local13, #1
06c4c     00 3E 06 56 |  if_ne	mov	local13, #0
06c50                 | ' if l>1 then 
06c50     02 2E 56 F2 | 	cmps	local05, #2 wc
06c54     78 02 90 CD |  if_b	jmp	#LR__0575
06c58                 | '   for i=2 to l
06c58     02 40 06 F6 | 	mov	local14, #2
06c5c     17 43 02 F6 | 	mov	local15, local05
06c60     01 42 06 F1 | 	add	local15, #1
06c64                 | LR__0564
06c64     21 41 52 F2 | 	cmps	local14, local15 wc
06c68     64 02 90 3D |  if_ae	jmp	#LR__0574
06c6c     13 13 02 F6 | 	mov	arg01, local01
06c70     20 15 02 F6 | 	mov	arg02, local14
06c74     01 16 06 F6 | 	mov	arg03, #1
06c78     10 39 B2 FD | 	call	#__system__Mid_S
06c7c     FD 30 02 F6 | 	mov	local06, result1
06c80     00 44 06 F6 | 	mov	local16, #0
06c84                 | '     m$=mid$(s,i,1) : b=false
06c84                 | '     if m$>="0" andalso m$<="9" then b=true  
06c84     C3 01 00 FF 
06c88     0B 14 06 F6 | 	mov	arg02, ##@LR__5951
06c8c     18 13 02 F6 | 	mov	arg01, local06
06c90     88 17 B2 FD | 	call	#__system___string_cmp
06c94     00 FA 55 F2 | 	cmps	result1, #0 wc
06c98     1C 00 90 CD |  if_b	jmp	#LR__0565
06c9c     C3 01 00 FF 
06ca0     0D 32 06 F6 | 	mov	local07, ##@LR__5952
06ca4     18 13 02 F6 | 	mov	arg01, local06
06ca8     19 15 02 F6 | 	mov	arg02, local07
06cac     6C 17 B2 FD | 	call	#__system___string_cmp
06cb0     01 FA 55 F2 | 	cmps	result1, #1 wc
06cb4     01 44 66 C6 |  if_b	neg	local16, #1
06cb8                 | LR__0565
06cb8                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06cb8     C3 01 00 FF 
06cbc     0F 14 06 F6 | 	mov	arg02, ##@LR__5953
06cc0     18 13 02 F6 | 	mov	arg01, local06
06cc4     54 17 B2 FD | 	call	#__system___string_cmp
06cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
06ccc     7C 00 90 AD |  if_e	jmp	#LR__0566
06cd0     C3 01 00 FF 
06cd4     11 32 06 F6 | 	mov	local07, ##@LR__5954
06cd8     18 13 02 F6 | 	mov	arg01, local06
06cdc     19 15 02 F6 | 	mov	arg02, local07
06ce0     38 17 B2 FD | 	call	#__system___string_cmp
06ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ce8     60 00 90 AD |  if_e	jmp	#LR__0566
06cec     C3 01 00 FF 
06cf0     13 34 06 F6 | 	mov	local08, ##@LR__5955
06cf4     1A 33 02 F6 | 	mov	local07, local08
06cf8     18 13 02 F6 | 	mov	arg01, local06
06cfc     19 15 02 F6 | 	mov	arg02, local07
06d00     18 17 B2 FD | 	call	#__system___string_cmp
06d04     00 FA 0D F2 | 	cmp	result1, #0 wz
06d08     40 00 90 AD |  if_e	jmp	#LR__0566
06d0c     C3 01 00 FF 
06d10     15 36 06 F6 | 	mov	local09, ##@LR__5956
06d14     1B 35 02 F6 | 	mov	local08, local09
06d18     18 13 02 F6 | 	mov	arg01, local06
06d1c     1A 15 02 F6 | 	mov	arg02, local08
06d20     F8 16 B2 FD | 	call	#__system___string_cmp
06d24     FD 32 0A F6 | 	mov	local07, result1 wz
06d28     20 00 90 AD |  if_e	jmp	#LR__0566
06d2c     C3 01 00 FF 
06d30     17 38 06 F6 | 	mov	local10, ##@LR__5957
06d34     1C 37 02 F6 | 	mov	local09, local10
06d38     18 13 02 F6 | 	mov	arg01, local06
06d3c     1B 15 02 F6 | 	mov	arg02, local09
06d40     D8 16 B2 FD | 	call	#__system___string_cmp
06d44     FD 34 0A F6 | 	mov	local08, result1 wz
06d48     04 00 90 5D |  if_ne	jmp	#LR__0567
06d4c                 | LR__0566
06d4c     01 44 66 F6 | 	neg	local16, #1
06d50                 | LR__0567
06d50                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06d50     01 3C 0E F2 | 	cmp	local12, #1 wz
06d54     34 00 90 5D |  if_ne	jmp	#LR__0568
06d58     C3 01 00 FF 
06d5c     19 14 06 F6 | 	mov	arg02, ##@LR__5958
06d60     18 13 02 F6 | 	mov	arg01, local06
06d64     B4 16 B2 FD | 	call	#__system___string_cmp
06d68     00 FA 55 F2 | 	cmps	result1, #0 wc
06d6c     1C 00 90 CD |  if_b	jmp	#LR__0568
06d70     C3 01 00 FF 
06d74     1B 32 06 F6 | 	mov	local07, ##@LR__5959
06d78     18 13 02 F6 | 	mov	arg01, local06
06d7c     19 15 02 F6 | 	mov	arg02, local07
06d80     98 16 B2 FD | 	call	#__system___string_cmp
06d84     01 FA 55 F2 | 	cmps	result1, #1 wc
06d88     01 44 66 C6 |  if_b	neg	local16, #1
06d8c                 | LR__0568
06d8c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06d8c     01 3E 0E F2 | 	cmp	local13, #1 wz
06d90     58 00 90 5D |  if_ne	jmp	#LR__0570
06d94     C3 01 00 FF 
06d98     1D 14 06 F6 | 	mov	arg02, ##@LR__5960
06d9c     18 13 02 F6 | 	mov	arg01, local06
06da0     78 16 B2 FD | 	call	#__system___string_cmp
06da4     00 FA 55 F2 | 	cmps	result1, #0 wc
06da8     1C 00 90 CD |  if_b	jmp	#LR__0569
06dac     C3 01 00 FF 
06db0     1F 32 06 F6 | 	mov	local07, ##@LR__5961
06db4     18 13 02 F6 | 	mov	arg01, local06
06db8     19 15 02 F6 | 	mov	arg02, local07
06dbc     5C 16 B2 FD | 	call	#__system___string_cmp
06dc0     01 FA 55 F2 | 	cmps	result1, #1 wc
06dc4     24 00 90 CD |  if_b	jmp	#LR__0570
06dc8                 | LR__0569
06dc8     C3 01 00 FF 
06dcc     21 34 06 F6 | 	mov	local08, ##@LR__5962
06dd0     1A 33 02 F6 | 	mov	local07, local08
06dd4     18 13 02 F6 | 	mov	arg01, local06
06dd8     19 15 02 F6 | 	mov	arg02, local07
06ddc     3C 16 B2 FD | 	call	#__system___string_cmp
06de0     00 FA 0D F2 | 	cmp	result1, #0 wz
06de4     00 FA 05 56 |  if_ne	mov	result1, #0
06de8     E8 00 90 5D |  if_ne	jmp	#LR__0576
06dec                 | LR__0570
06dec                 | '     if not b then return false
06dec     22 45 22 F6 | 	not	local16, local16
06df0     00 44 0E F2 | 	cmp	local16, #0 wz
06df4     00 FA 05 56 |  if_ne	mov	result1, #0
06df8     D8 00 90 5D |  if_ne	jmp	#LR__0576
06dfc                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06dfc     C3 01 00 FF 
06e00     23 14 06 F6 | 	mov	arg02, ##@LR__5963
06e04     18 13 02 F6 | 	mov	arg01, local06
06e08     10 16 B2 FD | 	call	#__system___string_cmp
06e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e10     3C 00 90 5D |  if_ne	jmp	#LR__0571
06e14     20 15 02 F6 | 	mov	arg02, local14
06e18     01 14 86 F1 | 	sub	arg02, #1
06e1c     13 13 02 F6 | 	mov	arg01, local01
06e20     01 16 06 F6 | 	mov	arg03, #1
06e24     64 37 B2 FD | 	call	#__system__Mid_S
06e28     FD 12 02 F6 | 	mov	arg01, result1
06e2c     54 39 B2 FD | 	call	#__system__LCase_S
06e30     FD 12 02 F6 | 	mov	arg01, result1
06e34     C3 01 00 FF 
06e38     25 32 06 F6 | 	mov	local07, ##@LR__5964
06e3c     19 15 02 F6 | 	mov	arg02, local07
06e40     D8 15 B2 FD | 	call	#__system___string_cmp
06e44     00 FA 0D F2 | 	cmp	result1, #0 wz
06e48     00 FA 05 56 |  if_ne	mov	result1, #0
06e4c     84 00 90 5D |  if_ne	jmp	#LR__0576
06e50                 | LR__0571
06e50                 | '     if m$="." then ds+=1: if ds>1 then return false
06e50     C3 01 00 FF 
06e54     27 14 06 F6 | 	mov	arg02, ##@LR__5965
06e58     18 13 02 F6 | 	mov	arg01, local06
06e5c     BC 15 B2 FD | 	call	#__system___string_cmp
06e60     00 FA 0D F2 | 	cmp	result1, #0 wz
06e64     01 28 06 A1 |  if_e	add	local02, #1
06e68     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06e6c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06e70     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e74                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06e74     C3 01 00 FF 
06e78     29 46 06 F6 | 	mov	local17, ##@LR__5966
06e7c     23 49 02 F6 | 	mov	local18, local17
06e80     18 13 02 F6 | 	mov	arg01, local06
06e84     24 15 02 F6 | 	mov	arg02, local18
06e88     90 15 B2 FD | 	call	#__system___string_cmp
06e8c     FD 4A 0A F6 | 	mov	local19, result1 wz
06e90     20 00 90 AD |  if_e	jmp	#LR__0572
06e94     C3 01 00 FF 
06e98     2B 32 06 F6 | 	mov	local07, ##@LR__5967
06e9c     19 47 02 F6 | 	mov	local17, local07
06ea0     18 13 02 F6 | 	mov	arg01, local06
06ea4     23 15 02 F6 | 	mov	arg02, local17
06ea8     70 15 B2 FD | 	call	#__system___string_cmp
06eac     FD 48 0A F6 | 	mov	local18, result1 wz
06eb0     14 00 90 5D |  if_ne	jmp	#LR__0573
06eb4                 | LR__0572
06eb4     01 2A 06 F1 | 	add	local03, #1
06eb8     00 3C 0E F2 | 	cmp	local12, #0 wz
06ebc     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06ec0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06ec4     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06ec8                 | LR__0573
06ec8     01 40 06 F1 | 	add	local14, #1
06ecc     94 FD 9F FD | 	jmp	#LR__0564
06ed0                 | LR__0574
06ed0                 | LR__0575
06ed0                 | ' return true
06ed0     01 FA 65 F6 | 	neg	result1, #1
06ed4                 | LR__0576
06ed4     A7 F0 03 F6 | 	mov	ptra, fp
06ed8     B2 00 A0 FD | 	call	#popregs_
06edc                 | _isnum_ret
06edc     2D 00 64 FD | 	ret
06ee0                 | 
06ee0                 | '   
06ee0                 | ' ' Check if the part is an integer number.    
06ee0                 | '   
06ee0                 | ' function isint(s as string) as boolean
06ee0                 | _isint
06ee0     0E 4A 05 F6 | 	mov	COUNT_, #14
06ee4     A8 00 A0 FD | 	call	#pushregs_
06ee8     09 27 02 F6 | 	mov	local01, arg01
06eec     09 29 02 F6 | 	mov	local02, arg01
06ef0     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06ef4                 | LR__0580
06ef4     14 FB C9 FA | 	rdbyte	result1, local02 wz
06ef8     01 28 06 51 |  if_ne	add	local02, #1
06efc     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06f00                 | LR__0581
06f00     09 29 82 F1 | 	sub	local02, arg01
06f04     14 FB 01 F6 | 	mov	result1, local02
06f08     FD 2A 0A F6 | 	mov	local03, result1 wz
06f0c     00 FA 05 A6 |  if_e	mov	result1, #0
06f10     64 02 90 AD |  if_e	jmp	#LR__0594
06f14     13 13 02 F6 | 	mov	arg01, local01
06f18     01 14 06 F6 | 	mov	arg02, #1
06f1c     01 16 06 F6 | 	mov	arg03, #1
06f20     68 36 B2 FD | 	call	#__system__Mid_S
06f24     FD 2C 02 F6 | 	mov	local04, result1
06f28                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06f28     C3 01 00 FF 
06f2c     2D 14 06 F6 | 	mov	arg02, ##@LR__5968
06f30     16 13 02 F6 | 	mov	arg01, local04
06f34     E4 14 B2 FD | 	call	#__system___string_cmp
06f38     00 FA 55 F2 | 	cmps	result1, #0 wc
06f3c     1C 00 90 CD |  if_b	jmp	#LR__0582
06f40     C3 01 00 FF 
06f44     2F 2E 06 F6 | 	mov	local05, ##@LR__5969
06f48     16 13 02 F6 | 	mov	arg01, local04
06f4c     17 15 02 F6 | 	mov	arg02, local05
06f50     C8 14 B2 FD | 	call	#__system___string_cmp
06f54     01 FA 55 F2 | 	cmps	result1, #1 wc
06f58     64 00 90 CD |  if_b	jmp	#LR__0583
06f5c                 | LR__0582
06f5c     C3 01 00 FF 
06f60     31 30 06 F6 | 	mov	local06, ##@LR__5970
06f64     18 2F 02 F6 | 	mov	local05, local06
06f68     16 13 02 F6 | 	mov	arg01, local04
06f6c     17 15 02 F6 | 	mov	arg02, local05
06f70     A8 14 B2 FD | 	call	#__system___string_cmp
06f74     00 FA 0D F2 | 	cmp	result1, #0 wz
06f78     44 00 90 AD |  if_e	jmp	#LR__0583
06f7c     C3 01 00 FF 
06f80     33 32 06 F6 | 	mov	local07, ##@LR__5971
06f84     19 31 02 F6 | 	mov	local06, local07
06f88     16 13 02 F6 | 	mov	arg01, local04
06f8c     18 15 02 F6 | 	mov	arg02, local06
06f90     88 14 B2 FD | 	call	#__system___string_cmp
06f94     FD 2E 0A F6 | 	mov	local05, result1 wz
06f98     24 00 90 AD |  if_e	jmp	#LR__0583
06f9c     C3 01 00 FF 
06fa0     35 34 06 F6 | 	mov	local08, ##@LR__5972
06fa4     1A 33 02 F6 | 	mov	local07, local08
06fa8     16 13 02 F6 | 	mov	arg01, local04
06fac     19 15 02 F6 | 	mov	arg02, local07
06fb0     68 14 B2 FD | 	call	#__system___string_cmp
06fb4     FD 30 0A F6 | 	mov	local06, result1 wz
06fb8     00 FA 05 56 |  if_ne	mov	result1, #0
06fbc     B8 01 90 5D |  if_ne	jmp	#LR__0594
06fc0                 | LR__0583
06fc0                 | ' if m$="$" then hex=1 else hex=0
06fc0     C3 01 00 FF 
06fc4     37 14 06 F6 | 	mov	arg02, ##@LR__5973
06fc8     16 13 02 F6 | 	mov	arg01, local04
06fcc     4C 14 B2 FD | 	call	#__system___string_cmp
06fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
06fd4     01 36 06 A6 |  if_e	mov	local09, #1
06fd8     00 36 06 56 |  if_ne	mov	local09, #0
06fdc                 | ' if m$="%" then bin=1 else bin=0
06fdc     C3 01 00 FF 
06fe0     39 14 06 F6 | 	mov	arg02, ##@LR__5974
06fe4     16 13 02 F6 | 	mov	arg01, local04
06fe8     30 14 B2 FD | 	call	#__system___string_cmp
06fec     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff0     01 38 06 A6 |  if_e	mov	local10, #1
06ff4     00 38 06 56 |  if_ne	mov	local10, #0
06ff8                 | ' if l>1 then 
06ff8     02 2A 56 F2 | 	cmps	local03, #2 wc
06ffc     74 01 90 CD |  if_b	jmp	#LR__0593
07000                 | '   for i=2 to l
07000     02 3A 06 F6 | 	mov	local11, #2
07004     15 3D 02 F6 | 	mov	local12, local03
07008     01 3C 06 F1 | 	add	local12, #1
0700c                 | LR__0584
0700c     1E 3B 52 F2 | 	cmps	local11, local12 wc
07010     60 01 90 3D |  if_ae	jmp	#LR__0592
07014     13 13 02 F6 | 	mov	arg01, local01
07018     1D 15 02 F6 | 	mov	arg02, local11
0701c     01 16 06 F6 | 	mov	arg03, #1
07020     68 35 B2 FD | 	call	#__system__Mid_S
07024     FD 2C 02 F6 | 	mov	local04, result1
07028                 | '     m$=mid$(s,i,1) 
07028                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07028     00 36 0E F2 | 	cmp	local09, #0 wz
0702c     50 00 90 5D |  if_ne	jmp	#LR__0586
07030     C3 01 00 FF 
07034     3B 14 06 F6 | 	mov	arg02, ##@LR__5975
07038     16 13 02 F6 | 	mov	arg01, local04
0703c     DC 13 B2 FD | 	call	#__system___string_cmp
07040     00 FA 55 F2 | 	cmps	result1, #0 wc
07044     18 00 90 CD |  if_b	jmp	#LR__0585
07048     C3 01 00 FF 
0704c     3D 14 06 F6 | 	mov	arg02, ##@LR__5976
07050     16 13 02 F6 | 	mov	arg01, local04
07054     C4 13 B2 FD | 	call	#__system___string_cmp
07058     01 FA 55 F2 | 	cmps	result1, #1 wc
0705c     20 00 90 CD |  if_b	jmp	#LR__0586
07060                 | LR__0585
07060     C3 01 00 FF 
07064     3F 30 06 F6 | 	mov	local06, ##@LR__5977
07068     16 13 02 F6 | 	mov	arg01, local04
0706c     18 15 02 F6 | 	mov	arg02, local06
07070     A8 13 B2 FD | 	call	#__system___string_cmp
07074     00 FA 0D F2 | 	cmp	result1, #0 wz
07078     00 FA 05 56 |  if_ne	mov	result1, #0
0707c     F8 00 90 5D |  if_ne	jmp	#LR__0594
07080                 | LR__0586
07080                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
07080     01 36 0E F2 | 	cmp	local09, #1 wz
07084     90 00 90 5D |  if_ne	jmp	#LR__0589
07088     C3 01 00 FF 
0708c     41 14 06 F6 | 	mov	arg02, ##@LR__5978
07090     16 13 02 F6 | 	mov	arg01, local04
07094     84 13 B2 FD | 	call	#__system___string_cmp
07098     00 FA 55 F2 | 	cmps	result1, #0 wc
0709c     1C 00 90 CD |  if_b	jmp	#LR__0587
070a0     C3 01 00 FF 
070a4     43 14 06 F6 | 	mov	arg02, ##@LR__5979
070a8     16 13 02 F6 | 	mov	arg01, local04
070ac     6C 13 B2 FD | 	call	#__system___string_cmp
070b0     FD 3E 02 F6 | 	mov	local13, result1
070b4     01 3E 56 F2 | 	cmps	local13, #1 wc
070b8     5C 00 90 CD |  if_b	jmp	#LR__0589
070bc                 | LR__0587
070bc     C3 01 00 FF 
070c0     45 2E 06 F6 | 	mov	local05, ##@LR__5980
070c4     16 13 02 F6 | 	mov	arg01, local04
070c8     17 15 02 F6 | 	mov	arg02, local05
070cc     4C 13 B2 FD | 	call	#__system___string_cmp
070d0     FD 40 02 F6 | 	mov	local14, result1
070d4     00 40 56 F2 | 	cmps	local14, #0 wc
070d8     1C 00 90 CD |  if_b	jmp	#LR__0588
070dc     C3 01 00 FF 
070e0     47 32 06 F6 | 	mov	local07, ##@LR__5981
070e4     16 13 02 F6 | 	mov	arg01, local04
070e8     19 15 02 F6 | 	mov	arg02, local07
070ec     2C 13 B2 FD | 	call	#__system___string_cmp
070f0     01 FA 55 F2 | 	cmps	result1, #1 wc
070f4     20 00 90 CD |  if_b	jmp	#LR__0589
070f8                 | LR__0588
070f8     C3 01 00 FF 
070fc     49 34 06 F6 | 	mov	local08, ##@LR__5982
07100     16 13 02 F6 | 	mov	arg01, local04
07104     1A 15 02 F6 | 	mov	arg02, local08
07108     10 13 B2 FD | 	call	#__system___string_cmp
0710c     00 FA 0D F2 | 	cmp	result1, #0 wz
07110     00 FA 05 56 |  if_ne	mov	result1, #0
07114     60 00 90 5D |  if_ne	jmp	#LR__0594
07118                 | LR__0589
07118                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07118     01 38 0E F2 | 	cmp	local10, #1 wz
0711c     4C 00 90 5D |  if_ne	jmp	#LR__0591
07120     C3 01 00 FF 
07124     4B 14 06 F6 | 	mov	arg02, ##@LR__5983
07128     16 13 02 F6 | 	mov	arg01, local04
0712c     EC 12 B2 FD | 	call	#__system___string_cmp
07130     00 FA 55 F2 | 	cmps	result1, #0 wc
07134     18 00 90 CD |  if_b	jmp	#LR__0590
07138     C3 01 00 FF 
0713c     4D 14 06 F6 | 	mov	arg02, ##@LR__5984
07140     16 13 02 F6 | 	mov	arg01, local04
07144     D4 12 B2 FD | 	call	#__system___string_cmp
07148     01 FA 55 F2 | 	cmps	result1, #1 wc
0714c     1C 00 90 CD |  if_b	jmp	#LR__0591
07150                 | LR__0590
07150     C3 01 00 FF 
07154     4F 14 06 F6 | 	mov	arg02, ##@LR__5985
07158     16 13 02 F6 | 	mov	arg01, local04
0715c     BC 12 B2 FD | 	call	#__system___string_cmp
07160     00 FA 0D F2 | 	cmp	result1, #0 wz
07164     00 FA 05 56 |  if_ne	mov	result1, #0
07168     0C 00 90 5D |  if_ne	jmp	#LR__0594
0716c                 | LR__0591
0716c     01 3A 06 F1 | 	add	local11, #1
07170     98 FE 9F FD | 	jmp	#LR__0584
07174                 | LR__0592
07174                 | LR__0593
07174                 | ' return true
07174     01 FA 65 F6 | 	neg	result1, #1
07178                 | LR__0594
07178     A7 F0 03 F6 | 	mov	ptra, fp
0717c     B2 00 A0 FD | 	call	#popregs_
07180                 | _isint_ret
07180     2D 00 64 FD | 	ret
07184                 | 
07184                 | ' 
07184                 | ' ' Check if the part is a positive decimal number.  
07184                 | ' 
07184                 | ' function isdec(s as string) as boolean
07184                 | _isdec
07184     05 4A 05 F6 | 	mov	COUNT_, #5
07188     A8 00 A0 FD | 	call	#pushregs_
0718c     09 27 02 F6 | 	mov	local01, arg01
07190     09 29 02 F6 | 	mov	local02, arg01
07194     97 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
07198                 | LR__0600
07198     14 FB C9 FA | 	rdbyte	result1, local02 wz
0719c     01 28 06 51 |  if_ne	add	local02, #1
071a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
071a4                 | LR__0601
071a4     09 29 82 F1 | 	sub	local02, arg01
071a8     14 FB 01 F6 | 	mov	result1, local02
071ac     FD 28 0A F6 | 	mov	local02, result1 wz
071b0     00 FA 05 A6 |  if_e	mov	result1, #0
071b4     80 00 90 AD |  if_e	jmp	#LR__0606
071b8                 | ' for i=1 to l
071b8     01 2A 06 F6 | 	mov	local03, #1
071bc     14 2D 02 F6 | 	mov	local04, local02
071c0     01 2C 06 F1 | 	add	local04, #1
071c4                 | LR__0602
071c4     16 2B 52 F2 | 	cmps	local03, local04 wc
071c8     68 00 90 3D |  if_ae	jmp	#LR__0605
071cc     13 13 02 F6 | 	mov	arg01, local01
071d0     15 15 02 F6 | 	mov	arg02, local03
071d4     01 16 06 F6 | 	mov	arg03, #1
071d8     B0 33 B2 FD | 	call	#__system__Mid_S
071dc     FD 2E 02 F6 | 	mov	local05, result1
071e0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
071e0     C3 01 00 FF 
071e4     51 14 06 F6 | 	mov	arg02, ##@LR__5986
071e8     17 13 02 F6 | 	mov	arg01, local05
071ec     2C 12 B2 FD | 	call	#__system___string_cmp
071f0     00 FA 55 F2 | 	cmps	result1, #0 wc
071f4     18 00 90 CD |  if_b	jmp	#LR__0603
071f8     C3 01 00 FF 
071fc     53 14 06 F6 | 	mov	arg02, ##@LR__5987
07200     17 13 02 F6 | 	mov	arg01, local05
07204     14 12 B2 FD | 	call	#__system___string_cmp
07208     01 FA 55 F2 | 	cmps	result1, #1 wc
0720c     1C 00 90 CD |  if_b	jmp	#LR__0604
07210                 | LR__0603
07210     C3 01 00 FF 
07214     55 14 06 F6 | 	mov	arg02, ##@LR__5988
07218     17 13 02 F6 | 	mov	arg01, local05
0721c     FC 11 B2 FD | 	call	#__system___string_cmp
07220     00 FA 0D F2 | 	cmp	result1, #0 wz
07224     00 FA 05 56 |  if_ne	mov	result1, #0
07228     0C 00 90 5D |  if_ne	jmp	#LR__0606
0722c                 | LR__0604
0722c     01 2A 06 F1 | 	add	local03, #1
07230     90 FF 9F FD | 	jmp	#LR__0602
07234                 | LR__0605
07234                 | ' return true
07234     01 FA 65 F6 | 	neg	result1, #1
07238                 | LR__0606
07238     A7 F0 03 F6 | 	mov	ptra, fp
0723c     B2 00 A0 FD | 	call	#popregs_
07240                 | _isdec_ret
07240     2D 00 64 FD | 	ret
07244                 | 
07244                 | ' 
07244                 | ' ' Check if the part is a string.  
07244                 | ' 
07244                 | ' function isstring(s as string) as boolean
07244                 | _isstring
07244     01 4A 05 F6 | 	mov	COUNT_, #1
07248     A8 00 A0 FD | 	call	#pushregs_
0724c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
0724c     09 27 02 F6 | 	mov	local01, arg01
07250     01 14 06 F6 | 	mov	arg02, #1
07254     1C 32 B2 FD | 	call	#__system__Left_S
07258     FD 12 02 F6 | 	mov	arg01, result1
0725c     C3 01 00 FF 
07260     57 14 06 F6 | 	mov	arg02, ##@LR__5989
07264     B4 11 B2 FD | 	call	#__system___string_cmp
07268     00 FA 4D F2 | 	cmps	result1, #0 wz
0726c     28 00 90 5D |  if_ne	jmp	#LR__0610
07270     13 13 02 F6 | 	mov	arg01, local01
07274     01 14 06 F6 | 	mov	arg02, #1
07278     80 32 B2 FD | 	call	#__system__Right_S
0727c     FD 12 02 F6 | 	mov	arg01, result1
07280     C3 01 00 FF 
07284     59 14 06 F6 | 	mov	arg02, ##@LR__5990
07288     90 11 B2 FD | 	call	#__system___string_cmp
0728c     00 FA 4D F2 | 	cmps	result1, #0 wz
07290     01 FA 65 A6 |  if_e	neg	result1, #1
07294     04 00 90 AD |  if_e	jmp	#LR__0611
07298                 | LR__0610
07298     00 FA 05 F6 | 	mov	result1, #0
0729c                 | LR__0611
0729c     A7 F0 03 F6 | 	mov	ptra, fp
072a0     B2 00 A0 FD | 	call	#popregs_
072a4                 | _isstring_ret
072a4     2D 00 64 FD | 	ret
072a8                 | 
072a8                 | ' 
072a8                 | ' ' getnoteval. Returns the frequency of note token
072a8                 | ' 
072a8                 | ' function getnoteval(token) as single
072a8                 | _getnoteval
072a8     02 4A 05 F6 | 	mov	COUNT_, #2
072ac     A8 00 A0 FD | 	call	#pushregs_
072b0     01 00 00 FF 
072b4     00 13 86 F1 | 	sub	arg01, ##768
072b8     09 15 52 F6 | 	abs	arg02, arg01 wc
072bc     0C 14 16 FD | 	qdiv	arg02, #12
072c0     14 00 00 FF 
072c4     D8 E4 05 F1 | 	add	objptr, ##10456
072c8     19 14 62 FD | 	getqy	arg02
072cc     0A 15 82 F6 | 	negc	arg02, arg02
072d0     02 14 66 F0 | 	shl	arg02, #2
072d4     F2 14 02 F1 | 	add	arg02, objptr
072d8     0A 27 02 FB | 	rdlong	local01, arg02
072dc     09 15 52 F6 | 	abs	arg02, arg01 wc
072e0     0C 14 16 FD | 	qdiv	arg02, #12
072e4     14 00 00 FF 
072e8     D8 E4 85 F1 | 	sub	objptr, ##10456
072ec     01 12 06 F6 | 	mov	arg01, #1
072f0                 | ' noteexp=1+(note/12) 
072f0                 | ' return (2.0^noteexp)*notebase
072f0     18 14 62 FD | 	getqx	arg02
072f4     0A 13 82 F3 | 	sumc	arg01, arg02
072f8     09 13 52 F6 | 	abs	arg01, arg01 wc
072fc     1F 28 C6 C9 |  if_b	decod	local02, #31
07300     00 28 06 36 |  if_ae	mov	local02, #0
07304     64 3B B2 FD | 	call	#__system___float_fromuns
07308     14 FB 61 F5 | 	xor	result1, local02
0730c     FD 14 02 F6 | 	mov	arg02, result1
07310     1E 12 C6 F9 | 	decod	arg01, #30
07314     64 4E B2 FD | 	call	#__system____builtin_powf
07318     FD 12 02 F6 | 	mov	arg01, result1
0731c     13 15 02 F6 | 	mov	arg02, local01
07320     4C 3F B2 FD | 	call	#__system___float_mul
07324     A7 F0 03 F6 | 	mov	ptra, fp
07328     B2 00 A0 FD | 	call	#popregs_
0732c                 | _getnoteval_ret
0732c     2D 00 64 FD | 	ret
07330                 | 
07330                 | ' 
07330                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07330                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
07330                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07330                 | ' 
07330                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07330                 | ' '
07330                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
07330                 | ' '
07330                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
07330                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
07330                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
07330                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
07330                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
07330                 | ' ' 
07330                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07330                 | ' 
07330                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07330                 | ' ' Helper functions to manage program lines
07330                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07330                 | ' 
07330                 | ' '----- delete a line from a program
07330                 | ' 
07330                 | ' function deleteline(aline as ulong) as integer
07330                 | _deleteline
07330     02 4A 05 F6 | 	mov	COUNT_, #2
07334     A8 00 A0 FD | 	call	#pushregs_
07338     2C F0 07 F1 | 	add	ptra, #44
0733c     04 4E 05 F1 | 	add	fp, #4
07340     A7 12 62 FC | 	wrlong	arg01, fp
07344     4A 00 00 FF 
07348     A8 E4 05 F1 | 	add	objptr, ##38056
0734c     F2 26 02 FB | 	rdlong	local01, objptr
07350     0C 4E 05 F1 | 	add	fp, #12
07354     A7 26 62 FC | 	wrlong	local01, fp
07358     10 4E 85 F1 | 	sub	fp, #16
0735c                 | ' 
0735c                 | ' searchptr=programstart
0735c                 | ' do
0735c     3E 00 00 FF 
07360     DC E5 85 F1 | 	sub	objptr, ##32220
07364                 | LR__0620
07364     14 4E 05 F1 | 	add	fp, #20
07368     A7 12 02 F6 | 	mov	arg01, fp
0736c     04 4E 85 F1 | 	sub	fp, #4
07370     A7 14 02 FB | 	rdlong	arg02, fp
07374     10 4E 85 F1 | 	sub	fp, #16
07378     18 16 06 F6 | 	mov	arg03, #24
0737c     D0 03 B2 FD | 	call	#_psram_spin2_read1
07380     10 4E 05 F1 | 	add	fp, #16
07384     A7 26 02 FB | 	rdlong	local01, fp
07388     08 4E 85 F1 | 	sub	fp, #8
0738c     A7 26 62 FC | 	wrlong	local01, fp
07390     20 4E 05 F1 | 	add	fp, #32
07394     A7 26 02 FB | 	rdlong	local01, fp
07398     18 4E 85 F1 | 	sub	fp, #24
0739c     A7 26 62 FC | 	wrlong	local01, fp
073a0     04 4E 05 F1 | 	add	fp, #4
073a4     A7 26 02 FB | 	rdlong	local01, fp
073a8     10 4E 85 F1 | 	sub	fp, #16
073ac     A7 16 02 FB | 	rdlong	arg03, fp
073b0     04 4E 85 F1 | 	sub	fp, #4
073b4     0B 27 12 F2 | 	cmp	local01, arg03 wc
073b8     28 4E 05 C1 |  if_b	add	fp, #40
073bc     A7 28 02 CB |  if_b	rdlong	local02, fp
073c0     28 4E 85 C1 |  if_b	sub	fp, #40
073c4     FF FF 3F CF 
073c8     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
073cc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
073d0     0B 00 00 FF 
073d4     CC E4 85 F1 | 	sub	objptr, ##5836
073d8                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
073d8     14 4E 05 F1 | 	add	fp, #20
073dc     A7 26 02 FB | 	rdlong	local01, fp
073e0     10 4E 85 F1 | 	sub	fp, #16
073e4     A7 28 02 FB | 	rdlong	local02, fp
073e8     04 4E 85 F1 | 	sub	fp, #4
073ec     14 27 0A F2 | 	cmp	local01, local02 wz
073f0     01 FA 65 56 |  if_ne	neg	result1, #1
073f4     34 02 90 5D |  if_ne	jmp	#LR__0625
073f8     08 4E 05 F1 | 	add	fp, #8
073fc     A7 12 02 FB | 	rdlong	arg01, fp
07400     08 4E 85 F1 | 	sub	fp, #8
07404     01 14 66 F6 | 	neg	arg02, #1
07408     30 D7 B1 FD | 	call	#_pslpoke
0740c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0740c                 | ' 
0740c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0740c     28 4E 05 F1 | 	add	fp, #40
07410     A7 26 02 FB | 	rdlong	local01, fp
07414     28 4E 85 F1 | 	sub	fp, #40
07418     FF FF 3F FF 
0741c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07420     24 4E 05 A1 |  if_e	add	fp, #36
07424     A7 28 02 AB |  if_e	rdlong	local02, fp
07428     24 4E 85 A1 |  if_e	sub	fp, #36
0742c     FF FF 7F AF 
07430     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
07434     88 00 90 5D |  if_ne	jmp	#LR__0621
07438     4A 00 00 FF 
0743c     A8 E4 05 F1 | 	add	objptr, ##38056
07440     00 04 80 FF 
07444     F2 00 68 FC | 	wrlong	##524288, objptr
07448     07 00 00 FF 
0744c     2C E4 85 F1 | 	sub	objptr, ##3628
07450     00 04 80 FF 
07454     F2 00 68 FC | 	wrlong	##524288, objptr
07458     07 00 00 FF 
0745c     30 E4 05 F1 | 	add	objptr, ##3632
07460     F2 00 68 FC | 	wrlong	#0, objptr
07464     04 E4 05 F1 | 	add	objptr, #4
07468     FF FF FF FF 
0746c     F2 FE 6B FC | 	wrlong	##-1, objptr
07470     4A 00 00 FF 
07474     B0 E4 85 F1 | 	sub	objptr, ##38064
07478     00 12 06 F6 | 	mov	arg01, #0
0747c     01 14 66 F6 | 	neg	arg02, #1
07480     B8 D6 B1 FD | 	call	#_pslpoke
07484     10 12 06 F6 | 	mov	arg01, #16
07488     01 14 66 F6 | 	neg	arg02, #1
0748c     AC D6 B1 FD | 	call	#_pslpoke
07490     14 12 06 F6 | 	mov	arg01, #20
07494     1E 14 CE F9 | 	bmask	arg02, #30
07498     A0 D6 B1 FD | 	call	#_pslpoke
0749c     50 00 00 FF 
074a0     D8 E4 05 F1 | 	add	objptr, ##41176
074a4     00 04 80 FF 
074a8     F2 00 68 FC | 	wrlong	##524288, objptr
074ac     04 E4 05 F1 | 	add	objptr, #4
074b0     00 04 80 FF 
074b4     F2 00 68 FC | 	wrlong	##524288, objptr
074b8     50 00 00 FF 
074bc     DC E4 85 F1 | 	sub	objptr, ##41180
074c0                 | LR__0621
074c0                 | ' 
074c0                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
074c0     28 4E 05 F1 | 	add	fp, #40
074c4     A7 26 02 FB | 	rdlong	local01, fp
074c8     28 4E 85 F1 | 	sub	fp, #40
074cc     FF FF 3F FF 
074d0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
074d4     74 00 90 5D |  if_ne	jmp	#LR__0622
074d8     24 4E 05 F1 | 	add	fp, #36
074dc     A7 28 02 FB | 	rdlong	local02, fp
074e0     24 4E 85 F1 | 	sub	fp, #36
074e4     FF FF 7F FF 
074e8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
074ec     5C 00 90 AD |  if_e	jmp	#LR__0622
074f0     24 4E 05 F1 | 	add	fp, #36
074f4     A7 12 02 FB | 	rdlong	arg01, fp
074f8     24 4E 85 F1 | 	sub	fp, #36
074fc     14 12 06 F1 | 	add	arg01, #20
07500     1E 14 CE F9 | 	bmask	arg02, #30
07504     34 D6 B1 FD | 	call	#_pslpoke
07508     24 4E 05 F1 | 	add	fp, #36
0750c     A7 26 02 FB | 	rdlong	local01, fp
07510     4A 00 00 FF 
07514     B0 E4 05 F1 | 	add	objptr, ##38064
07518     F2 26 62 FC | 	wrlong	local01, objptr
0751c     4A 00 00 FF 
07520     B0 E4 85 F1 | 	sub	objptr, ##38064
07524     A7 12 02 FB | 	rdlong	arg01, fp
07528     24 4E 85 F1 | 	sub	fp, #36
0752c     3C D7 B1 FD | 	call	#_pslpeek
07530     4A 00 00 FF 
07534     AC E4 05 F1 | 	add	objptr, ##38060
07538     F2 FA 61 FC | 	wrlong	result1, objptr
0753c     4A 00 00 FF 
07540     AC E4 85 F1 | 	sub	objptr, ##38060
07544                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
07544                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
07544                 | '   lastline=pslpeek(header(4))
07544                 | '   return 0
07544     00 FA 05 F6 | 	mov	result1, #0
07548     E0 00 90 FD | 	jmp	#LR__0625
0754c                 | LR__0622
0754c                 | ' 
0754c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
0754c     28 4E 05 F1 | 	add	fp, #40
07550     A7 26 02 FB | 	rdlong	local01, fp
07554     28 4E 85 F1 | 	sub	fp, #40
07558     FF FF 3F FF 
0755c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07560     58 00 90 AD |  if_e	jmp	#LR__0623
07564     24 4E 05 F1 | 	add	fp, #36
07568     A7 28 02 FB | 	rdlong	local02, fp
0756c     24 4E 85 F1 | 	sub	fp, #36
07570     FF FF 7F FF 
07574     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07578     40 00 90 5D |  if_ne	jmp	#LR__0623
0757c     28 4E 05 F1 | 	add	fp, #40
07580     A7 12 02 FB | 	rdlong	arg01, fp
07584     28 4E 85 F1 | 	sub	fp, #40
07588     10 12 06 F1 | 	add	arg01, #16
0758c     01 14 66 F6 | 	neg	arg02, #1
07590     A8 D5 B1 FD | 	call	#_pslpoke
07594     28 4E 05 F1 | 	add	fp, #40
07598     A7 26 02 FB | 	rdlong	local01, fp
0759c     28 4E 85 F1 | 	sub	fp, #40
075a0     4A 00 00 FF 
075a4     A8 E4 05 F1 | 	add	objptr, ##38056
075a8     F2 26 62 FC | 	wrlong	local01, objptr
075ac     4A 00 00 FF 
075b0     A8 E4 85 F1 | 	sub	objptr, ##38056
075b4                 | ' '   print "deleted first line"
075b4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
075b4                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
075b4                 | '   return 0
075b4     00 FA 05 F6 | 	mov	result1, #0
075b8     70 00 90 FD | 	jmp	#LR__0625
075bc                 | LR__0623
075bc                 | ' 
075bc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
075bc     28 4E 05 F1 | 	add	fp, #40
075c0     A7 26 02 FB | 	rdlong	local01, fp
075c4     28 4E 85 F1 | 	sub	fp, #40
075c8     FF FF 3F FF 
075cc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
075d0     24 4E 05 51 |  if_ne	add	fp, #36
075d4     A7 28 02 5B |  if_ne	rdlong	local02, fp
075d8     24 4E 85 51 |  if_ne	sub	fp, #36
075dc     FF FF 7F 5F 
075e0     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
075e4     40 00 90 AD |  if_e	jmp	#LR__0624
075e8     28 4E 05 F1 | 	add	fp, #40
075ec     A7 12 02 FB | 	rdlong	arg01, fp
075f0     10 12 06 F1 | 	add	arg01, #16
075f4     04 4E 85 F1 | 	sub	fp, #4
075f8     A7 14 02 FB | 	rdlong	arg02, fp
075fc     24 4E 85 F1 | 	sub	fp, #36
07600     38 D5 B1 FD | 	call	#_pslpoke
07604     24 4E 05 F1 | 	add	fp, #36
07608     A7 12 02 FB | 	rdlong	arg01, fp
0760c     14 12 06 F1 | 	add	arg01, #20
07610     04 4E 05 F1 | 	add	fp, #4
07614     A7 14 02 FB | 	rdlong	arg02, fp
07618     28 4E 85 F1 | 	sub	fp, #40
0761c     1C D5 B1 FD | 	call	#_pslpoke
07620                 | '    pslpoke(header(5)+16,header(4))  
07620                 | '    pslpoke(header(4)+20, header(5))
07620                 | '    return 0
07620     00 FA 05 F6 | 	mov	result1, #0
07624     04 00 90 FD | 	jmp	#LR__0625
07628                 | LR__0624
07628     00 FA 05 F6 | 	mov	result1, #0
0762c                 | LR__0625
0762c     A7 F0 03 F6 | 	mov	ptra, fp
07630     B2 00 A0 FD | 	call	#popregs_
07634                 | _deleteline_ret
07634     2D 00 64 FD | 	ret
07638                 | 
07638                 | ' 
07638                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07638                 | ' 
07638                 | ' sub save_line
07638                 | _save_line
07638     03 4A 05 F6 | 	mov	COUNT_, #3
0763c     A8 00 A0 FD | 	call	#pushregs_
07640     4A 00 00 FF 
07644     9C E4 05 F1 | 	add	objptr, ##38044
07648     F2 16 02 FB | 	rdlong	arg03, objptr
0764c     01 16 06 F1 | 	add	arg03, #1
07650     05 00 00 FF 
07654     18 E4 85 F1 | 	sub	objptr, ##2584
07658     F2 14 02 FB | 	rdlong	arg02, objptr
0765c     0B 15 02 FD | 	qmul	arg02, arg03
07660     0E 00 00 FF 
07664     44 E4 85 F1 | 	sub	objptr, ##7236
07668     F2 12 02 FB | 	rdlong	arg01, objptr
0766c     37 00 00 FF 
07670     40 E4 85 F1 | 	sub	objptr, ##28224
07674     09 27 02 F6 | 	mov	local01, arg01
07678     18 28 62 FD | 	getqx	local02
0767c     97 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
07680                 | LR__0630
07680     13 FB C9 FA | 	rdbyte	result1, local01 wz
07684     01 26 06 51 |  if_ne	add	local01, #1
07688     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
0768c                 | LR__0631
0768c     09 27 82 F1 | 	sub	local01, arg01
07690     03 26 CE F7 | 	test	local01, #3 wz
07694     02 26 46 50 |  if_ne	shr	local01, #2
07698     01 26 06 51 |  if_ne	add	local01, #1
0769c     02 26 66 50 |  if_ne	shl	local01, #2
076a0     14 2B 02 F6 | 	mov	local03, local02
076a4     13 2B 02 F1 | 	add	local03, local01
076a8     43 00 00 FF 
076ac     7C E4 05 F1 | 	add	objptr, ##34428
076b0     F2 16 02 FB | 	rdlong	arg03, objptr
076b4     14 17 02 F1 | 	add	arg03, local02
076b8     04 00 00 FF 
076bc     28 E4 05 F1 | 	add	objptr, ##2088
076c0     F2 16 62 FC | 	wrlong	arg03, objptr
076c4     04 E4 05 F1 | 	add	objptr, #4
076c8     F2 26 62 FC | 	wrlong	local01, objptr
076cc     0C E4 85 F1 | 	sub	objptr, #12
076d0     F2 12 02 F6 | 	mov	arg01, objptr
076d4     04 00 00 FF 
076d8     20 E4 85 F1 | 	sub	objptr, ##2080
076dc     F2 14 02 FB | 	rdlong	arg02, objptr
076e0     14 17 02 F6 | 	mov	arg03, local02
076e4     37 00 00 FF 
076e8     B0 E5 85 F1 | 	sub	objptr, ##28592
076ec     FC 00 B2 FD | 	call	#_psram_spin2_write
076f0     2B 00 00 FF 
076f4     74 E5 05 F1 | 	add	objptr, ##22388
076f8     F2 12 02 FB | 	rdlong	arg01, objptr
076fc     0C 00 00 FF 
07700     3C E4 05 F1 | 	add	objptr, ##6204
07704     F2 14 02 FB | 	rdlong	arg02, objptr
07708     14 15 02 F1 | 	add	arg02, local02
0770c     13 17 02 F6 | 	mov	arg03, local01
07710     37 00 00 FF 
07714     B0 E5 85 F1 | 	sub	objptr, ##28592
07718     D0 00 B2 FD | 	call	#_psram_spin2_write
0771c     37 00 00 FF 
07720     B0 E5 05 F1 | 	add	objptr, ##28592
07724     F2 26 02 FB | 	rdlong	local01, objptr
07728     15 27 02 F1 | 	add	local01, local03
0772c     F2 26 62 FC | 	wrlong	local01, objptr
07730     43 00 00 FF 
07734     7C E4 85 F1 | 	sub	objptr, ##34428
07738     A7 F0 03 F6 | 	mov	ptra, fp
0773c     B2 00 A0 FD | 	call	#popregs_
07740                 | _save_line_ret
07740     2D 00 64 FD | 	ret
07744                 | 
07744                 | ' 
07744                 | ' '----- Insert a new line into the middle of the program
07744                 | ' 
07744                 | ' function insertline(aline as ulong) as integer
07744                 | _insertline
07744     02 4A 05 F6 | 	mov	COUNT_, #2
07748     A8 00 A0 FD | 	call	#pushregs_
0774c     28 F0 07 F1 | 	add	ptra, #40
07750     04 4E 05 F1 | 	add	fp, #4
07754     A7 12 62 FC | 	wrlong	arg01, fp
07758     4A 00 00 FF 
0775c     A8 E4 05 F1 | 	add	objptr, ##38056
07760     F2 26 02 FB | 	rdlong	local01, objptr
07764     04 4E 05 F1 | 	add	fp, #4
07768     A7 26 62 FC | 	wrlong	local01, fp
0776c     08 4E 85 F1 | 	sub	fp, #8
07770                 | ' 
07770                 | ' do
07770     3E 00 00 FF 
07774     DC E5 85 F1 | 	sub	objptr, ##32220
07778                 | LR__0640
07778     10 4E 05 F1 | 	add	fp, #16
0777c     A7 12 02 F6 | 	mov	arg01, fp
07780     08 4E 85 F1 | 	sub	fp, #8
07784     A7 14 02 FB | 	rdlong	arg02, fp
07788     08 4E 85 F1 | 	sub	fp, #8
0778c     18 16 06 F6 | 	mov	arg03, #24
07790     BC FF B1 FD | 	call	#_psram_spin2_read1
07794     08 4E 05 F1 | 	add	fp, #8
07798     A7 26 02 FB | 	rdlong	local01, fp
0779c     04 4E 05 F1 | 	add	fp, #4
077a0     A7 26 62 FC | 	wrlong	local01, fp
077a4     18 4E 05 F1 | 	add	fp, #24
077a8     A7 26 02 FB | 	rdlong	local01, fp
077ac     1C 4E 85 F1 | 	sub	fp, #28
077b0     A7 26 62 FC | 	wrlong	local01, fp
077b4     08 4E 05 F1 | 	add	fp, #8
077b8     A7 26 02 FB | 	rdlong	local01, fp
077bc     0C 4E 85 F1 | 	sub	fp, #12
077c0     A7 16 02 FB | 	rdlong	arg03, fp
077c4     04 4E 85 F1 | 	sub	fp, #4
077c8     0B 27 12 F2 | 	cmp	local01, arg03 wc
077cc     24 4E 05 C1 |  if_b	add	fp, #36
077d0     A7 28 02 CB |  if_b	rdlong	local02, fp
077d4     24 4E 85 C1 |  if_b	sub	fp, #36
077d8     FF FF 3F CF 
077dc     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
077e0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
077e4     0B 00 00 FF 
077e8     CC E4 85 F1 | 	sub	objptr, ##5836
077ec                 | ' 
077ec                 | ' if header(0)=aline then return -1 				' delete it first
077ec     10 4E 05 F1 | 	add	fp, #16
077f0     A7 26 02 FB | 	rdlong	local01, fp
077f4     0C 4E 85 F1 | 	sub	fp, #12
077f8     A7 28 02 FB | 	rdlong	local02, fp
077fc     04 4E 85 F1 | 	sub	fp, #4
07800     14 27 0A F2 | 	cmp	local01, local02 wz
07804     01 FA 65 A6 |  if_e	neg	result1, #1
07808     48 01 90 AD |  if_e	jmp	#LR__0643
0780c                 | ' if header(0)<aline then return -2 				' end of program reached
0780c     10 4E 05 F1 | 	add	fp, #16
07810     A7 26 02 FB | 	rdlong	local01, fp
07814     0C 4E 85 F1 | 	sub	fp, #12
07818     A7 16 02 FB | 	rdlong	arg03, fp
0781c     04 4E 85 F1 | 	sub	fp, #4
07820     0B 27 12 F2 | 	cmp	local01, arg03 wc
07824     02 FA 65 C6 |  if_b	neg	result1, #2
07828     28 01 90 CD |  if_b	jmp	#LR__0643
0782c                 | ' 
0782c                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
0782c     20 4E 05 F1 | 	add	fp, #32
07830     A7 26 02 FB | 	rdlong	local01, fp
07834     20 4E 85 F1 | 	sub	fp, #32
07838     FF FF 7F FF 
0783c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07840     78 00 90 5D |  if_ne	jmp	#LR__0641
07844     43 00 00 FF 
07848     7C E4 05 F1 | 	add	objptr, ##34428
0784c     F2 26 02 FB | 	rdlong	local01, objptr
07850     07 00 00 FF 
07854     2C E4 05 F1 | 	add	objptr, ##3628
07858     F2 26 62 FC | 	wrlong	local01, objptr
0785c     0C 4E 05 F1 | 	add	fp, #12
07860     A7 12 02 FB | 	rdlong	arg01, fp
07864     0C 4E 85 F1 | 	sub	fp, #12
07868     10 12 06 F1 | 	add	arg01, #16
0786c     07 00 00 FF 
07870     2C E4 85 F1 | 	sub	objptr, ##3628
07874     F2 14 02 FB | 	rdlong	arg02, objptr
07878     43 00 00 FF 
0787c     7C E4 85 F1 | 	sub	objptr, ##34428
07880     B8 D2 B1 FD | 	call	#_pslpoke
07884     47 00 00 FF 
07888     AC E4 05 F1 | 	add	objptr, ##36524
0788c     FF FF FF FF 
07890     F2 FE 6B FC | 	wrlong	##-1, objptr
07894     0C 4E 05 F1 | 	add	fp, #12
07898     A7 26 02 FB | 	rdlong	local01, fp
0789c     0C 4E 85 F1 | 	sub	fp, #12
078a0     04 E4 05 F1 | 	add	objptr, #4
078a4     F2 26 62 FC | 	wrlong	local01, objptr
078a8     47 00 00 FF 
078ac     B0 E4 85 F1 | 	sub	objptr, ##36528
078b0     84 FD BF FD | 	call	#_save_line
078b4                 | '   programstart=programptr
078b4                 | '   pslpoke(lineptr2+16,programptr)
078b4                 | '   ucompiledline(4)=$FFFF_FFFF
078b4                 | '   ucompiledline(5)=lineptr2
078b4                 | '   save_line
078b4                 | '   return 0
078b4     00 FA 05 F6 | 	mov	result1, #0
078b8     98 00 90 FD | 	jmp	#LR__0643
078bc                 | LR__0641
078bc                 | ' 
078bc                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
078bc     20 4E 05 F1 | 	add	fp, #32
078c0     A7 26 02 FB | 	rdlong	local01, fp
078c4     20 4E 85 F1 | 	sub	fp, #32
078c8     FF FF 7F FF 
078cc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
078d0     7C 00 90 AD |  if_e	jmp	#LR__0642
078d4     20 4E 05 F1 | 	add	fp, #32
078d8     A7 26 02 FB | 	rdlong	local01, fp
078dc     47 00 00 FF 
078e0     AC E4 05 F1 | 	add	objptr, ##36524
078e4     F2 26 62 FC | 	wrlong	local01, objptr
078e8     14 4E 85 F1 | 	sub	fp, #20
078ec     A7 26 02 FB | 	rdlong	local01, fp
078f0     04 E4 05 F1 | 	add	objptr, #4
078f4     F2 26 62 FC | 	wrlong	local01, objptr
078f8     A7 12 02 FB | 	rdlong	arg01, fp
078fc     0C 4E 85 F1 | 	sub	fp, #12
07900     10 12 06 F1 | 	add	arg01, #16
07904     04 00 00 FF 
07908     34 E4 85 F1 | 	sub	objptr, ##2100
0790c     F2 14 02 FB | 	rdlong	arg02, objptr
07910     43 00 00 FF 
07914     7C E4 85 F1 | 	sub	objptr, ##34428
07918     20 D2 B1 FD | 	call	#_pslpoke
0791c     20 4E 05 F1 | 	add	fp, #32
07920     A7 12 02 FB | 	rdlong	arg01, fp
07924     20 4E 85 F1 | 	sub	fp, #32
07928     14 12 06 F1 | 	add	arg01, #20
0792c     43 00 00 FF 
07930     7C E4 05 F1 | 	add	objptr, ##34428
07934     F2 14 02 FB | 	rdlong	arg02, objptr
07938     43 00 00 FF 
0793c     7C E4 85 F1 | 	sub	objptr, ##34428
07940     F8 D1 B1 FD | 	call	#_pslpoke
07944     F0 FC BF FD | 	call	#_save_line
07948                 | '   ucompiledline(4)=header(4)
07948                 | '   ucompiledline(5)=lineptr2
07948                 | '   pslpoke(lineptr2+16,programptr)
07948                 | '   pslpoke(header(4)+20,programptr)
07948                 | '   save_line
07948                 | '   return 0
07948     00 FA 05 F6 | 	mov	result1, #0
0794c     04 00 90 FD | 	jmp	#LR__0643
07950                 | LR__0642
07950     00 FA 05 F6 | 	mov	result1, #0
07954                 | LR__0643
07954     A7 F0 03 F6 | 	mov	ptra, fp
07958     B2 00 A0 FD | 	call	#popregs_
0795c                 | _insertline_ret
0795c     2D 00 64 FD | 	ret
07960                 | 
07960                 | ' 
07960                 | ' '----- Adds a new line at the end of the program
07960                 | ' 
07960                 | ' sub add_line_at_end(aline) 
07960                 | _add_line_at_end
07960     4A 00 00 FF 
07964     AC E4 05 F1 | 	add	objptr, ##38060
07968     F2 12 62 FC | 	wrlong	arg01, objptr
0796c     04 E4 05 F1 | 	add	objptr, #4
07970     F2 14 02 FB | 	rdlong	arg02, objptr
07974     03 00 00 FF 
07978     04 E4 85 F1 | 	sub	objptr, ##1540
0797c     F2 14 62 FC | 	wrlong	arg02, objptr
07980     03 00 00 FF 
07984     04 E4 05 F1 | 	add	objptr, ##1540
07988     F2 12 02 FB | 	rdlong	arg01, objptr
0798c     14 12 06 F1 | 	add	arg01, #20
07990     07 00 00 FF 
07994     34 E4 85 F1 | 	sub	objptr, ##3636
07998     F2 14 02 FB | 	rdlong	arg02, objptr
0799c     43 00 00 FF 
079a0     7C E4 85 F1 | 	sub	objptr, ##34428
079a4     94 D1 B1 FD | 	call	#_pslpoke
079a8     43 00 00 FF 
079ac     7C E4 05 F1 | 	add	objptr, ##34428
079b0     F2 14 02 FB | 	rdlong	arg02, objptr
079b4     07 00 00 FF 
079b8     34 E4 05 F1 | 	add	objptr, ##3636
079bc     F2 14 62 FC | 	wrlong	arg02, objptr
079c0     03 00 00 FF 
079c4     00 E4 85 F1 | 	sub	objptr, ##1536
079c8     FF FF BF FF 
079cc     F2 FE 6B FC | 	wrlong	##2147483647, objptr
079d0                 | ' 
079d0                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
079d0                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
079d0     04 00 00 FF 
079d4     34 E4 85 F1 | 	sub	objptr, ##2100
079d8     F2 14 02 FB | 	rdlong	arg02, objptr
079dc     43 00 00 FF 
079e0     7C E4 85 F1 | 	sub	objptr, ##34428
079e4     00 04 00 FF 
079e8     00 14 0E F2 | 	cmp	arg02, ##524288 wz
079ec     47 00 00 AF 
079f0     AC E4 05 A1 |  if_e	add	objptr, ##36524
079f4     FF FF FF AF 
079f8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
079fc     47 00 00 AF 
07a00     AC E4 85 A1 |  if_e	sub	objptr, ##36524
07a04     30 FC BF FD | 	call	#_save_line
07a08     43 00 00 FF 
07a0c     7C E4 05 F1 | 	add	objptr, ##34428
07a10     F2 12 02 FB | 	rdlong	arg01, objptr
07a14     43 00 00 FF 
07a18     7C E4 85 F1 | 	sub	objptr, ##34428
07a1c     01 14 66 F6 | 	neg	arg02, #1
07a20     18 D1 B1 FD | 	call	#_pslpoke
07a24                 | _add_line_at_end_ret
07a24     2D 00 64 FD | 	ret
07a28                 | 
07a28                 | ' 
07a28                 | ' '--------------------------------------------------------------------------------------------------------------------------
07a28                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07a28                 | ' '--------------------------------------------------------------------------------------------------------------------------
07a28                 | ' 
07a28                 | ' '--------------------------------------------------------------------------------------------------------------------------
07a28                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07a28                 | ' '--------------------------------------------------------------------------------------------------------------------------
07a28                 | ' 
07a28                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07a28                 | ' 
07a28                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07a28                 | _compile_immediate
07a28     0A 4A 05 F6 | 	mov	COUNT_, #10
07a2c     A8 00 A0 FD | 	call	#pushregs_
07a30                 | _compile_immediate_enter
07a30     09 2D 02 F6 | 	mov	local04, arg01
07a34     0A 2F 02 F6 | 	mov	local05, arg02
07a38     00 30 06 F6 | 	mov	local06, #0
07a3c     00 32 06 F6 | 	mov	local07, #0
07a40     00 34 06 F6 | 	mov	local08, #0
07a44                 | ' 
07a44                 | ' ' linetype=cont+1
07a44                 | ' ' 1 : this is the first part of the line that will continue
07a44                 | ' ' 2 - this is the continuation of the line
07a44                 | ' ' 3 - this is the last continued line
07a44                 | ' ' 4 - this is the one and only part
07a44                 | ' ' 5 - continued after if/else
07a44                 | ' 
07a44                 | ' err=0
07a44                 | ' cmd=0
07a44                 | ' vars=0
07a44                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07a44     02 2C 0E F2 | 	cmp	local04, #2 wz
07a48     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07a4c     24 00 90 5D |  if_ne	jmp	#LR__0650
07a50     35 00 00 FF 
07a54     30 E4 05 F1 | 	add	objptr, ##27184
07a58     F2 32 02 FB | 	rdlong	local07, objptr
07a5c     01 36 06 F6 | 	mov	local09, #1
07a60     02 00 00 FF 
07a64     34 E4 05 F1 | 	add	objptr, ##1076
07a68     F2 02 68 FC | 	wrlong	#1, objptr
07a6c     37 00 00 FF 
07a70     64 E4 85 F1 | 	sub	objptr, ##28260
07a74                 | LR__0650
07a74                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07a74     04 2C 0E F2 | 	cmp	local04, #4 wz
07a78     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07a7c     30 00 90 5D |  if_ne	jmp	#LR__0651
07a80     35 00 00 FF 
07a84     38 E4 05 F1 | 	add	objptr, ##27192
07a88     F2 32 02 FB | 	rdlong	local07, objptr
07a8c     02 36 06 F6 | 	mov	local09, #2
07a90     02 00 00 FF 
07a94     2C E4 05 F1 | 	add	objptr, ##1068
07a98     F2 04 68 FC | 	wrlong	#2, objptr
07a9c     13 00 00 FF 
07aa0     38 E4 05 F1 | 	add	objptr, ##9784
07aa4     F2 04 68 FC | 	wrlong	#2, objptr
07aa8     4A 00 00 FF 
07aac     9C E4 85 F1 | 	sub	objptr, ##38044
07ab0                 | LR__0651
07ab0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07ab0     05 2C 0E F2 | 	cmp	local04, #5 wz
07ab4     40 00 90 5D |  if_ne	jmp	#LR__0652
07ab8     37 00 00 FF 
07abc     64 E4 05 F1 | 	add	objptr, ##28260
07ac0     F2 FC 01 FB | 	rdlong	result2, objptr
07ac4     FE 36 02 F6 | 	mov	local09, result2
07ac8     03 36 66 F0 | 	shl	local09, #3
07acc     02 00 00 FF 
07ad0     38 E4 85 F1 | 	sub	objptr, ##1080
07ad4     F2 36 02 F1 | 	add	local09, objptr
07ad8     04 36 06 F1 | 	add	local09, #4
07adc     1B 33 02 FB | 	rdlong	local07, local09
07ae0     01 FC 05 F1 | 	add	result2, #1
07ae4     02 00 00 FF 
07ae8     38 E4 05 F1 | 	add	objptr, ##1080
07aec     F2 FC 61 FC | 	wrlong	result2, objptr
07af0     37 00 00 FF 
07af4     64 E4 85 F1 | 	sub	objptr, ##28260
07af8                 | LR__0652
07af8                 | ' 
07af8                 | ' 'print  "In compile_immediate cmd=:", cmd
07af8                 | ' 451 select case cmd
07af8     5C 32 0E F2 | 	cmp	local07, #92 wz
07afc     E8 02 90 AD |  if_e	jmp	#LR__0653
07b00     B9 32 0E F2 | 	cmp	local07, #185 wz
07b04     EC 02 90 AD |  if_e	jmp	#LR__0654
07b08     47 32 0E F2 | 	cmp	local07, #71 wz
07b0c     F4 02 90 AD |  if_e	jmp	#LR__0655
07b10     59 32 0E F2 | 	cmp	local07, #89 wz
07b14     FC 02 90 AD |  if_e	jmp	#LR__0656
07b18     C3 32 0E F2 | 	cmp	local07, #195 wz
07b1c     04 03 90 AD |  if_e	jmp	#LR__0657
07b20     45 32 0E F2 | 	cmp	local07, #69 wz
07b24     08 03 90 AD |  if_e	jmp	#LR__0658
07b28     69 32 0E F2 | 	cmp	local07, #105 wz
07b2c     10 03 90 AD |  if_e	jmp	#LR__0659
07b30     40 32 0E F2 | 	cmp	local07, #64 wz
07b34     18 07 90 AD |  if_e	jmp	#LR__0736
07b38     B4 32 0E F2 | 	cmp	local07, #180 wz
07b3c     0C 03 90 AD |  if_e	jmp	#LR__0660
07b40     49 32 0E F2 | 	cmp	local07, #73 wz
07b44     10 03 90 AD |  if_e	jmp	#LR__0661
07b48     C4 32 0E F2 | 	cmp	local07, #196 wz
07b4c     14 03 90 AD |  if_e	jmp	#LR__0662
07b50     AE 32 0E F2 | 	cmp	local07, #174 wz
07b54     18 03 90 AD |  if_e	jmp	#LR__0663
07b58     B0 32 0E F2 | 	cmp	local07, #176 wz
07b5c     1C 03 90 AD |  if_e	jmp	#LR__0664
07b60     AF 32 0E F2 | 	cmp	local07, #175 wz
07b64     20 03 90 AD |  if_e	jmp	#LR__0665
07b68     B1 32 0E F2 | 	cmp	local07, #177 wz
07b6c     24 03 90 AD |  if_e	jmp	#LR__0666
07b70     CF 32 0E F2 | 	cmp	local07, #207 wz
07b74     28 03 90 AD |  if_e	jmp	#LR__0667
07b78     68 32 0E F2 | 	cmp	local07, #104 wz
07b7c     2C 03 90 AD |  if_e	jmp	#LR__0668
07b80     B7 32 0E F2 | 	cmp	local07, #183 wz
07b84     C8 06 90 AD |  if_e	jmp	#LR__0736
07b88     D9 32 0E F2 | 	cmp	local07, #217 wz
07b8c     28 03 90 AD |  if_e	jmp	#LR__0669
07b90     74 32 0E F2 | 	cmp	local07, #116 wz
07b94     2C 03 90 AD |  if_e	jmp	#LR__0670
07b98     73 32 0E F2 | 	cmp	local07, #115 wz
07b9c     34 03 90 AD |  if_e	jmp	#LR__0671
07ba0     6C 32 0E F2 | 	cmp	local07, #108 wz
07ba4     3C 03 90 AD |  if_e	jmp	#LR__0672
07ba8     89 32 0E F2 | 	cmp	local07, #137 wz
07bac     A0 06 90 AD |  if_e	jmp	#LR__0736
07bb0     C2 32 0E F2 | 	cmp	local07, #194 wz
07bb4     3C 03 90 AD |  if_e	jmp	#LR__0673
07bb8     72 32 0E F2 | 	cmp	local07, #114 wz
07bbc     40 03 90 AD |  if_e	jmp	#LR__0674
07bc0     5D 32 0E F2 | 	cmp	local07, #93 wz
07bc4     44 03 90 AD |  if_e	jmp	#LR__0675
07bc8     96 32 0E F2 | 	cmp	local07, #150 wz
07bcc     4C 03 90 AD |  if_e	jmp	#LR__0676
07bd0     43 32 0E F2 | 	cmp	local07, #67 wz
07bd4     50 03 90 AD |  if_e	jmp	#LR__0677
07bd8     5A 32 0E F2 | 	cmp	local07, #90 wz
07bdc     58 03 90 AD |  if_e	jmp	#LR__0678
07be0     AB 32 0E F2 | 	cmp	local07, #171 wz
07be4     68 06 90 AD |  if_e	jmp	#LR__0736
07be8     BD 32 0E F2 | 	cmp	local07, #189 wz
07bec     58 03 90 AD |  if_e	jmp	#LR__0679
07bf0     BB 32 0E F2 | 	cmp	local07, #187 wz
07bf4     60 03 90 AD |  if_e	jmp	#LR__0680
07bf8     4E 32 0E F2 | 	cmp	local07, #78 wz
07bfc     68 03 90 AD |  if_e	jmp	#LR__0681
07c00     A9 32 0E F2 | 	cmp	local07, #169 wz
07c04     80 03 90 AD |  if_e	jmp	#LR__0683
07c08     46 32 0E F2 | 	cmp	local07, #70 wz
07c0c     98 03 90 AD |  if_e	jmp	#LR__0685
07c10     71 32 0E F2 | 	cmp	local07, #113 wz
07c14     A0 03 90 AD |  if_e	jmp	#LR__0686
07c18     60 32 0E F2 | 	cmp	local07, #96 wz
07c1c     A4 03 90 AD |  if_e	jmp	#LR__0687
07c20     4A 32 0E F2 | 	cmp	local07, #74 wz
07c24     A8 03 90 AD |  if_e	jmp	#LR__0688
07c28     48 32 0E F2 | 	cmp	local07, #72 wz
07c2c     AC 03 90 AD |  if_e	jmp	#LR__0689
07c30     58 32 0E F2 | 	cmp	local07, #88 wz
07c34     B4 03 90 AD |  if_e	jmp	#LR__0690
07c38     5F 32 0E F2 | 	cmp	local07, #95 wz
07c3c     BC 03 90 AD |  if_e	jmp	#LR__0691
07c40     B5 32 0E F2 | 	cmp	local07, #181 wz
07c44     C0 03 90 AD |  if_e	jmp	#LR__0692
07c48     8A 32 0E F2 | 	cmp	local07, #138 wz
07c4c     C8 03 90 AD |  if_e	jmp	#LR__0693
07c50     4C 32 0E F2 | 	cmp	local07, #76 wz
07c54     CC 03 90 AD |  if_e	jmp	#LR__0694
07c58     52 32 0E F2 | 	cmp	local07, #82 wz
07c5c     D4 03 90 AD |  if_e	jmp	#LR__0695
07c60     97 32 0E F2 | 	cmp	local07, #151 wz
07c64     DC 03 90 AD |  if_e	jmp	#LR__0696
07c68     C6 32 0E F2 | 	cmp	local07, #198 wz
07c6c     E0 03 90 AD |  if_e	jmp	#LR__0697
07c70     61 32 0E F2 | 	cmp	local07, #97 wz
07c74     E4 03 90 AD |  if_e	jmp	#LR__0698
07c78     63 32 0E F2 | 	cmp	local07, #99 wz
07c7c     E8 03 90 AD |  if_e	jmp	#LR__0699
07c80     41 32 0E F2 | 	cmp	local07, #65 wz
07c84     C8 05 90 AD |  if_e	jmp	#LR__0736
07c88     4B 32 0E F2 | 	cmp	local07, #75 wz
07c8c     E4 03 90 AD |  if_e	jmp	#LR__0700
07c90     C1 32 0E F2 | 	cmp	local07, #193 wz
07c94     E8 03 90 AD |  if_e	jmp	#LR__0701
07c98     B3 32 0E F2 | 	cmp	local07, #179 wz
07c9c     EC 03 90 AD |  if_e	jmp	#LR__0702
07ca0     5E 32 0E F2 | 	cmp	local07, #94 wz
07ca4     F0 03 90 AD |  if_e	jmp	#LR__0703
07ca8     7C 32 0E F2 | 	cmp	local07, #124 wz
07cac     F4 03 90 AD |  if_e	jmp	#LR__0704
07cb0     7D 32 0E F2 | 	cmp	local07, #125 wz
07cb4     F8 03 90 AD |  if_e	jmp	#LR__0705
07cb8     7E 32 0E F2 | 	cmp	local07, #126 wz
07cbc     FC 03 90 AD |  if_e	jmp	#LR__0706
07cc0     7F 32 0E F2 | 	cmp	local07, #127 wz
07cc4     00 04 90 AD |  if_e	jmp	#LR__0707
07cc8     80 32 0E F2 | 	cmp	local07, #128 wz
07ccc     04 04 90 AD |  if_e	jmp	#LR__0708
07cd0     55 32 0E F2 | 	cmp	local07, #85 wz
07cd4     08 04 90 AD |  if_e	jmp	#LR__0709
07cd8     75 32 0E F2 | 	cmp	local07, #117 wz
07cdc     0C 04 90 AD |  if_e	jmp	#LR__0710
07ce0     42 32 0E F2 | 	cmp	local07, #66 wz
07ce4     14 04 90 AD |  if_e	jmp	#LR__0711
07ce8     95 32 0E F2 | 	cmp	local07, #149 wz
07cec     1C 04 90 AD |  if_e	jmp	#LR__0712
07cf0     AC 32 0E F2 | 	cmp	local07, #172 wz
07cf4     58 05 90 AD |  if_e	jmp	#LR__0736
07cf8     81 32 0E F2 | 	cmp	local07, #129 wz
07cfc     18 04 90 AD |  if_e	jmp	#LR__0713
07d00     44 32 0E F2 | 	cmp	local07, #68 wz
07d04     1C 04 90 AD |  if_e	jmp	#LR__0714
07d08     BC 32 0E F2 | 	cmp	local07, #188 wz
07d0c     20 04 90 AD |  if_e	jmp	#LR__0715
07d10     88 32 0E F2 | 	cmp	local07, #136 wz
07d14     38 05 90 AD |  if_e	jmp	#LR__0736
07d18     B6 32 0E F2 | 	cmp	local07, #182 wz
07d1c     20 04 90 AD |  if_e	jmp	#LR__0716
07d20     92 32 0E F2 | 	cmp	local07, #146 wz
07d24     28 04 90 AD |  if_e	jmp	#LR__0717
07d28     BE 32 0E F2 | 	cmp	local07, #190 wz
07d2c     DC 05 90 AD |  if_e	jmp	#LR__0737
07d30     C7 32 0E F2 | 	cmp	local07, #199 wz
07d34     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07d38     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07d3c     10 05 90 AD |  if_e	jmp	#LR__0736
07d40     4D 32 0E F2 | 	cmp	local07, #77 wz
07d44     14 04 90 AD |  if_e	jmp	#LR__0718
07d48     51 32 0E F2 | 	cmp	local07, #81 wz
07d4c     1C 04 90 AD |  if_e	jmp	#LR__0719
07d50     DA 32 0E F2 | 	cmp	local07, #218 wz
07d54     24 04 90 AD |  if_e	jmp	#LR__0720
07d58     D2 32 0E F2 | 	cmp	local07, #210 wz
07d5c     28 04 90 AD |  if_e	jmp	#LR__0721
07d60     8E 32 0E F2 | 	cmp	local07, #142 wz
07d64     30 04 90 AD |  if_e	jmp	#LR__0722
07d68     90 32 0E F2 | 	cmp	local07, #144 wz
07d6c     34 04 90 AD |  if_e	jmp	#LR__0723
07d70     8D 32 0E F2 | 	cmp	local07, #141 wz
07d74     38 04 90 AD |  if_e	jmp	#LR__0724
07d78     8C 32 0E F2 | 	cmp	local07, #140 wz
07d7c     3C 04 90 AD |  if_e	jmp	#LR__0725
07d80     91 32 0E F2 | 	cmp	local07, #145 wz
07d84     40 04 90 AD |  if_e	jmp	#LR__0726
07d88     8B 32 0E F2 | 	cmp	local07, #139 wz
07d8c     44 04 90 AD |  if_e	jmp	#LR__0727
07d90     8F 32 0E F2 | 	cmp	local07, #143 wz
07d94     48 04 90 AD |  if_e	jmp	#LR__0728
07d98     B2 32 0E F2 | 	cmp	local07, #178 wz
07d9c     4C 04 90 AD |  if_e	jmp	#LR__0729
07da0     6D 32 0E F2 | 	cmp	local07, #109 wz
07da4     54 04 90 AD |  if_e	jmp	#LR__0730
07da8     70 32 0E F2 | 	cmp	local07, #112 wz
07dac     A0 04 90 AD |  if_e	jmp	#LR__0736
07db0     56 32 0E F2 | 	cmp	local07, #86 wz
07db4     50 04 90 AD |  if_e	jmp	#LR__0731
07db8     57 32 0E F2 | 	cmp	local07, #87 wz
07dbc     90 04 90 AD |  if_e	jmp	#LR__0736
07dc0     79 32 0E F2 | 	cmp	local07, #121 wz
07dc4     4C 04 90 AD |  if_e	jmp	#LR__0732
07dc8     77 32 0E F2 | 	cmp	local07, #119 wz
07dcc     50 04 90 AD |  if_e	jmp	#LR__0733
07dd0     78 32 0E F2 | 	cmp	local07, #120 wz
07dd4     54 04 90 AD |  if_e	jmp	#LR__0734
07dd8     01 00 00 FF 
07ddc     04 32 0E F2 | 	cmp	local07, ##516 wz
07de0     54 04 90 AD |  if_e	jmp	#LR__0735
07de4     24 05 90 FD | 	jmp	#LR__0737
07de8                 | LR__0653
07de8     70 0B B0 FD | 	call	#_compile_fun_2p
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     5C 04 90 FD | 	jmp	#LR__0736
07df4                 | LR__0654
07df4     34 0E B0 FD | 	call	#_compile_fun_varp
07df8     FD 34 02 F6 | 	mov	local08, result1
07dfc     FE 30 02 F6 | 	mov	local06, result2
07e00     4C 04 90 FD | 	jmp	#LR__0736
07e04                 | LR__0655
07e04     24 0E B0 FD | 	call	#_compile_fun_varp
07e08     FD 34 02 F6 | 	mov	local08, result1
07e0c     FE 30 02 F6 | 	mov	local06, result2
07e10     3C 04 90 FD | 	jmp	#LR__0736
07e14                 | LR__0656
07e14     14 0E B0 FD | 	call	#_compile_fun_varp
07e18     FD 34 02 F6 | 	mov	local08, result1
07e1c     FE 30 02 F6 | 	mov	local06, result2
07e20     2C 04 90 FD | 	jmp	#LR__0736
07e24                 | LR__0657
07e24                 | ' return expr()
07e24     70 42 B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     20 04 90 FD | 	jmp	#LR__0736
07e30                 | LR__0658
07e30     F8 0D B0 FD | 	call	#_compile_fun_varp
07e34     FD 34 02 F6 | 	mov	local08, result1
07e38     FE 30 02 F6 | 	mov	local06, result2
07e3c     10 04 90 FD | 	jmp	#LR__0736
07e40                 | LR__0659
07e40                 | ' return expr()
07e40     54 42 B0 FD | 	call	#_expr
07e44     FD 30 02 F6 | 	mov	local06, result1
07e48     04 04 90 FD | 	jmp	#LR__0736
07e4c                 | LR__0660
07e4c                 | ' return expr()
07e4c     48 42 B0 FD | 	call	#_expr
07e50     FD 30 02 F6 | 	mov	local06, result1
07e54     F8 03 90 FD | 	jmp	#LR__0736
07e58                 | LR__0661
07e58                 | ' return expr()
07e58     3C 42 B0 FD | 	call	#_expr
07e5c     FD 30 02 F6 | 	mov	local06, result1
07e60     EC 03 90 FD | 	jmp	#LR__0736
07e64                 | LR__0662
07e64     F4 0A B0 FD | 	call	#_compile_fun_2p
07e68     FD 30 02 F6 | 	mov	local06, result1
07e6c     E0 03 90 FD | 	jmp	#LR__0736
07e70                 | LR__0663
07e70     E8 0A B0 FD | 	call	#_compile_fun_2p
07e74     FD 30 02 F6 | 	mov	local06, result1
07e78     D4 03 90 FD | 	jmp	#LR__0736
07e7c                 | LR__0664
07e7c     DC 0A B0 FD | 	call	#_compile_fun_2p
07e80     FD 30 02 F6 | 	mov	local06, result1
07e84     C8 03 90 FD | 	jmp	#LR__0736
07e88                 | LR__0665
07e88     D0 0A B0 FD | 	call	#_compile_fun_2p
07e8c     FD 30 02 F6 | 	mov	local06, result1
07e90     BC 03 90 FD | 	jmp	#LR__0736
07e94                 | LR__0666
07e94     C4 0A B0 FD | 	call	#_compile_fun_2p
07e98     FD 30 02 F6 | 	mov	local06, result1
07e9c     B0 03 90 FD | 	jmp	#LR__0736
07ea0                 | LR__0667
07ea0                 | ' return expr()
07ea0     F4 41 B0 FD | 	call	#_expr
07ea4     FD 30 02 F6 | 	mov	local06, result1
07ea8     A4 03 90 FD | 	jmp	#LR__0736
07eac                 | LR__0668
07eac                 | ' return expr()
07eac     E8 41 B0 FD | 	call	#_expr
07eb0     FD 30 02 F6 | 	mov	local06, result1
07eb4     98 03 90 FD | 	jmp	#LR__0736
07eb8                 | LR__0669
07eb8     A0 0A B0 FD | 	call	#_compile_fun_2p
07ebc     FD 30 02 F6 | 	mov	local06, result1
07ec0     8C 03 90 FD | 	jmp	#LR__0736
07ec4                 | LR__0670
07ec4     64 0D B0 FD | 	call	#_compile_fun_varp
07ec8     FD 34 02 F6 | 	mov	local08, result1
07ecc     FE 30 02 F6 | 	mov	local06, result2
07ed0     7C 03 90 FD | 	jmp	#LR__0736
07ed4                 | LR__0671
07ed4     54 0D B0 FD | 	call	#_compile_fun_varp
07ed8     FD 34 02 F6 | 	mov	local08, result1
07edc     FE 30 02 F6 | 	mov	local06, result2
07ee0     6C 03 90 FD | 	jmp	#LR__0736
07ee4                 | LR__0672
07ee4     44 0D B0 FD | 	call	#_compile_fun_varp
07ee8     FD 34 02 F6 | 	mov	local08, result1
07eec     FE 30 02 F6 | 	mov	local06, result2
07ef0     5C 03 90 FD | 	jmp	#LR__0736
07ef4                 | LR__0673
07ef4                 | ' return expr()
07ef4     A0 41 B0 FD | 	call	#_expr
07ef8     FD 30 02 F6 | 	mov	local06, result1
07efc     50 03 90 FD | 	jmp	#LR__0736
07f00                 | LR__0674
07f00     4C 22 B0 FD | 	call	#_compile_dim
07f04     FD 30 02 F6 | 	mov	local06, result1
07f08     00 04 90 FD | 	jmp	#LR__0737
07f0c                 | LR__0675
07f0c     1C 0D B0 FD | 	call	#_compile_fun_varp
07f10     FD 34 02 F6 | 	mov	local08, result1
07f14     FE 30 02 F6 | 	mov	local06, result2
07f18     34 03 90 FD | 	jmp	#LR__0736
07f1c                 | LR__0676
07f1c     3C 0A B0 FD | 	call	#_compile_fun_2p
07f20     FD 30 02 F6 | 	mov	local06, result1
07f24     28 03 90 FD | 	jmp	#LR__0736
07f28                 | LR__0677
07f28     00 0D B0 FD | 	call	#_compile_fun_varp
07f2c     FD 34 02 F6 | 	mov	local08, result1
07f30     FE 30 02 F6 | 	mov	local06, result2
07f34     18 03 90 FD | 	jmp	#LR__0736
07f38                 | LR__0678
07f38     17 13 02 F6 | 	mov	arg01, local05
07f3c     D8 20 B0 FD | 	call	#_compile_else
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     C4 03 90 FD | 	jmp	#LR__0737
07f48                 | LR__0679
07f48     E0 0C B0 FD | 	call	#_compile_fun_varp
07f4c     FD 34 02 F6 | 	mov	local08, result1
07f50     FE 30 02 F6 | 	mov	local06, result2
07f54     F8 02 90 FD | 	jmp	#LR__0736
07f58                 | LR__0680
07f58     D0 0C B0 FD | 	call	#_compile_fun_varp
07f5c     FD 34 02 F6 | 	mov	local08, result1
07f60     FE 30 02 F6 | 	mov	local06, result2
07f64     E8 02 90 FD | 	jmp	#LR__0736
07f68                 | LR__0681
07f68     01 2E 16 F2 | 	cmp	local05, #1 wc
07f6c     08 00 90 CD |  if_b	jmp	#LR__0682
07f70     78 33 B0 FD | 	call	#_compile_goto
07f74     94 03 90 FD | 	jmp	#LR__0737
07f78                 | LR__0682
07f78     19 12 06 F6 | 	mov	arg01, #25
07f7c     00 14 06 F6 | 	mov	arg02, #0
07f80     18 CA B1 FD | 	call	#_printerror
07f84     84 03 90 FD | 	jmp	#LR__0737
07f88                 | LR__0683
07f88     01 2E 16 F2 | 	cmp	local05, #1 wc
07f8c     08 00 90 CD |  if_b	jmp	#LR__0684
07f90     F4 32 B0 FD | 	call	#_compile_gosub
07f94     74 03 90 FD | 	jmp	#LR__0737
07f98                 | LR__0684
07f98     19 12 06 F6 | 	mov	arg01, #25
07f9c     00 14 06 F6 | 	mov	arg02, #0
07fa0     F8 C9 B1 FD | 	call	#_printerror
07fa4     64 03 90 FD | 	jmp	#LR__0737
07fa8                 | LR__0685
07fa8     80 0C B0 FD | 	call	#_compile_fun_varp
07fac     FD 34 02 F6 | 	mov	local08, result1
07fb0     FE 30 02 F6 | 	mov	local06, result2
07fb4     98 02 90 FD | 	jmp	#LR__0736
07fb8                 | LR__0686
07fb8     18 0B B0 FD | 	call	#_compile_fun_4p
07fbc     FD 30 02 F6 | 	mov	local06, result1
07fc0     8C 02 90 FD | 	jmp	#LR__0736
07fc4                 | LR__0687
07fc4                 | ' return expr()
07fc4     D0 40 B0 FD | 	call	#_expr
07fc8     FD 30 02 F6 | 	mov	local06, result1
07fcc     80 02 90 FD | 	jmp	#LR__0736
07fd0                 | LR__0688
07fd0     50 28 B0 FD | 	call	#_compile_for
07fd4     FD 30 02 F6 | 	mov	local06, result1
07fd8     30 03 90 FD | 	jmp	#LR__0737
07fdc                 | LR__0689
07fdc     4C 0C B0 FD | 	call	#_compile_fun_varp
07fe0     FD 34 02 F6 | 	mov	local08, result1
07fe4     FE 30 02 F6 | 	mov	local06, result2
07fe8     64 02 90 FD | 	jmp	#LR__0736
07fec                 | LR__0690
07fec     17 13 02 F6 | 	mov	arg01, local05
07ff0     9C 1E B0 FD | 	call	#_compile_if
07ff4     FD 30 02 F6 | 	mov	local06, result1
07ff8     10 03 90 FD | 	jmp	#LR__0737
07ffc                 | LR__0691
07ffc                 | ' return expr()
07ffc     98 40 B0 FD | 	call	#_expr
08000     FD 30 02 F6 | 	mov	local06, result1
08004     48 02 90 FD | 	jmp	#LR__0736
08008                 | LR__0692
08008     EC 0D B0 FD | 	call	#_compile_input
0800c     FD 34 02 F6 | 	mov	local08, result1
08010     FE 30 02 F6 | 	mov	local06, result2
08014     38 02 90 FD | 	jmp	#LR__0736
08018                 | LR__0693
08018                 | ' return expr()
08018     7C 40 B0 FD | 	call	#_expr
0801c     FD 30 02 F6 | 	mov	local06, result1
08020     2C 02 90 FD | 	jmp	#LR__0736
08024                 | LR__0694
08024     04 0C B0 FD | 	call	#_compile_fun_varp
08028     FD 34 02 F6 | 	mov	local08, result1
0802c     FE 30 02 F6 | 	mov	local06, result2
08030     1C 02 90 FD | 	jmp	#LR__0736
08034                 | LR__0695
08034     F4 0B B0 FD | 	call	#_compile_fun_varp
08038     FD 34 02 F6 | 	mov	local08, result1
0803c     FE 30 02 F6 | 	mov	local06, result2
08040     0C 02 90 FD | 	jmp	#LR__0736
08044                 | LR__0696
08044     14 09 B0 FD | 	call	#_compile_fun_2p
08048     FD 30 02 F6 | 	mov	local06, result1
0804c     00 02 90 FD | 	jmp	#LR__0736
08050                 | LR__0697
08050                 | ' return expr()
08050     44 40 B0 FD | 	call	#_expr
08054     FD 30 02 F6 | 	mov	local06, result1
08058     F4 01 90 FD | 	jmp	#LR__0736
0805c                 | LR__0698
0805c                 | ' return expr()
0805c     38 40 B0 FD | 	call	#_expr
08060     FD 30 02 F6 | 	mov	local06, result1
08064     E8 01 90 FD | 	jmp	#LR__0736
08068                 | LR__0699
08068                 | ' return expr()
08068     2C 40 B0 FD | 	call	#_expr
0806c     FD 30 02 F6 | 	mov	local06, result1
08070     DC 01 90 FD | 	jmp	#LR__0736
08074                 | LR__0700
08074     78 30 B0 FD | 	call	#_compile_next
08078     FD 30 02 F6 | 	mov	local06, result1
0807c     8C 02 90 FD | 	jmp	#LR__0737
08080                 | LR__0701
08080     58 36 B0 FD | 	call	#_compile_on
08084     FD 30 02 F6 | 	mov	local06, result1
08088     80 02 90 FD | 	jmp	#LR__0737
0808c                 | LR__0702
0808c     54 09 B0 FD | 	call	#_compile_fun_3p
08090     FD 30 02 F6 | 	mov	local06, result1
08094     B8 01 90 FD | 	jmp	#LR__0736
08098                 | LR__0703
08098                 | ' return expr()
08098     FC 3F B0 FD | 	call	#_expr
0809c     FD 30 02 F6 | 	mov	local06, result1
080a0     AC 01 90 FD | 	jmp	#LR__0736
080a4                 | LR__0704
080a4                 | ' return expr()
080a4     F0 3F B0 FD | 	call	#_expr
080a8     FD 30 02 F6 | 	mov	local06, result1
080ac     A0 01 90 FD | 	jmp	#LR__0736
080b0                 | LR__0705
080b0                 | ' return expr()
080b0     E4 3F B0 FD | 	call	#_expr
080b4     FD 30 02 F6 | 	mov	local06, result1
080b8     94 01 90 FD | 	jmp	#LR__0736
080bc                 | LR__0706
080bc                 | ' return expr()
080bc     D8 3F B0 FD | 	call	#_expr
080c0     FD 30 02 F6 | 	mov	local06, result1
080c4     88 01 90 FD | 	jmp	#LR__0736
080c8                 | LR__0707
080c8     08 0A B0 FD | 	call	#_compile_fun_4p
080cc     FD 30 02 F6 | 	mov	local06, result1
080d0     7C 01 90 FD | 	jmp	#LR__0736
080d4                 | LR__0708
080d4                 | ' return expr()
080d4     C0 3F B0 FD | 	call	#_expr
080d8     FD 30 02 F6 | 	mov	local06, result1
080dc     70 01 90 FD | 	jmp	#LR__0736
080e0                 | LR__0709
080e0     78 08 B0 FD | 	call	#_compile_fun_2p
080e4     FD 30 02 F6 | 	mov	local06, result1
080e8     64 01 90 FD | 	jmp	#LR__0736
080ec                 | LR__0710
080ec     3C 0B B0 FD | 	call	#_compile_fun_varp
080f0     FD 34 02 F6 | 	mov	local08, result1
080f4     FE 30 02 F6 | 	mov	local06, result2
080f8     54 01 90 FD | 	jmp	#LR__0736
080fc                 | LR__0711
080fc     2C 0B B0 FD | 	call	#_compile_fun_varp
08100     FD 34 02 F6 | 	mov	local08, result1
08104     FE 30 02 F6 | 	mov	local06, result2
08108     44 01 90 FD | 	jmp	#LR__0736
0810c                 | LR__0712
0810c     4C 08 B0 FD | 	call	#_compile_fun_2p
08110     FD 30 02 F6 | 	mov	local06, result1
08114     38 01 90 FD | 	jmp	#LR__0736
08118                 | LR__0713
08118     40 08 B0 FD | 	call	#_compile_fun_2p
0811c     FD 30 02 F6 | 	mov	local06, result1
08120     2C 01 90 FD | 	jmp	#LR__0736
08124                 | LR__0714
08124     90 16 B0 FD | 	call	#_compile_print
08128     FD 30 02 F6 | 	mov	local06, result1
0812c     DC 01 90 FD | 	jmp	#LR__0737
08130                 | LR__0715
08130     F8 0A B0 FD | 	call	#_compile_fun_varp
08134     FD 34 02 F6 | 	mov	local08, result1
08138     FE 30 02 F6 | 	mov	local06, result2
0813c     10 01 90 FD | 	jmp	#LR__0736
08140                 | LR__0716
08140     C4 0B B0 FD | 	call	#_compile_read
08144     FD 34 02 F6 | 	mov	local08, result1
08148     FE 30 02 F6 | 	mov	local06, result2
0814c     00 01 90 FD | 	jmp	#LR__0736
08150                 | LR__0717
08150                 | ' return expr()
08150     44 3F B0 FD | 	call	#_expr
08154     FD 30 02 F6 | 	mov	local06, result1
08158     F4 00 90 FD | 	jmp	#LR__0736
0815c                 | LR__0718
0815c     CC 0A B0 FD | 	call	#_compile_fun_varp
08160     FD 34 02 F6 | 	mov	local08, result1
08164     FE 30 02 F6 | 	mov	local06, result2
08168     E4 00 90 FD | 	jmp	#LR__0736
0816c                 | LR__0719
0816c     BC 0A B0 FD | 	call	#_compile_fun_varp
08170     FD 34 02 F6 | 	mov	local08, result1
08174     FE 30 02 F6 | 	mov	local06, result2
08178     D4 00 90 FD | 	jmp	#LR__0736
0817c                 | LR__0720
0817c     DC 07 B0 FD | 	call	#_compile_fun_2p
08180     FD 30 02 F6 | 	mov	local06, result1
08184     C8 00 90 FD | 	jmp	#LR__0736
08188                 | LR__0721
08188     A0 0A B0 FD | 	call	#_compile_fun_varp
0818c     FD 34 02 F6 | 	mov	local08, result1
08190     FE 30 02 F6 | 	mov	local06, result2
08194     B8 00 90 FD | 	jmp	#LR__0736
08198                 | LR__0722
08198     C0 07 B0 FD | 	call	#_compile_fun_2p
0819c     FD 30 02 F6 | 	mov	local06, result1
081a0     AC 00 90 FD | 	jmp	#LR__0736
081a4                 | LR__0723
081a4     B4 07 B0 FD | 	call	#_compile_fun_2p
081a8     FD 30 02 F6 | 	mov	local06, result1
081ac     A0 00 90 FD | 	jmp	#LR__0736
081b0                 | LR__0724
081b0     A8 07 B0 FD | 	call	#_compile_fun_2p
081b4     FD 30 02 F6 | 	mov	local06, result1
081b8     94 00 90 FD | 	jmp	#LR__0736
081bc                 | LR__0725
081bc     9C 07 B0 FD | 	call	#_compile_fun_2p
081c0     FD 30 02 F6 | 	mov	local06, result1
081c4     88 00 90 FD | 	jmp	#LR__0736
081c8                 | LR__0726
081c8     90 07 B0 FD | 	call	#_compile_fun_2p
081cc     FD 30 02 F6 | 	mov	local06, result1
081d0     7C 00 90 FD | 	jmp	#LR__0736
081d4                 | LR__0727
081d4     84 07 B0 FD | 	call	#_compile_fun_2p
081d8     FD 30 02 F6 | 	mov	local06, result1
081dc     70 00 90 FD | 	jmp	#LR__0736
081e0                 | LR__0728
081e0     78 07 B0 FD | 	call	#_compile_fun_2p
081e4     FD 30 02 F6 | 	mov	local06, result1
081e8     64 00 90 FD | 	jmp	#LR__0736
081ec                 | LR__0729
081ec     3C 0A B0 FD | 	call	#_compile_fun_varp
081f0     FD 34 02 F6 | 	mov	local08, result1
081f4     FE 30 02 F6 | 	mov	local06, result2
081f8     54 00 90 FD | 	jmp	#LR__0736
081fc                 | LR__0730
081fc     E4 07 B0 FD | 	call	#_compile_fun_3p
08200     FD 30 02 F6 | 	mov	local06, result1
08204     48 00 90 FD | 	jmp	#LR__0736
08208                 | LR__0731
08208                 | ' return expr()
08208     8C 3E B0 FD | 	call	#_expr
0820c     FD 30 02 F6 | 	mov	local06, result1
08210     3C 00 90 FD | 	jmp	#LR__0736
08214                 | LR__0732
08214     44 07 B0 FD | 	call	#_compile_fun_2p
08218     FD 30 02 F6 | 	mov	local06, result1
0821c     30 00 90 FD | 	jmp	#LR__0736
08220                 | LR__0733
08220     38 07 B0 FD | 	call	#_compile_fun_2p
08224     FD 30 02 F6 | 	mov	local06, result1
08228     24 00 90 FD | 	jmp	#LR__0736
0822c                 | LR__0734
0822c     2C 07 B0 FD | 	call	#_compile_fun_2p
08230     FD 30 02 F6 | 	mov	local06, result1
08234     18 00 90 FD | 	jmp	#LR__0736
08238                 | LR__0735
08238     1C 13 B0 FD | 	call	#_compile_array_assign
0823c     FD 30 02 F6 | 	mov	local06, result1
08240     0E 30 0E F2 | 	cmp	local06, #14 wz
08244     C4 00 90 5D |  if_ne	jmp	#LR__0737
08248                 | ' return 23
08248     17 30 06 F6 | 	mov	local06, #23
0824c     BC 00 90 FD | 	jmp	#LR__0737
08250                 | ' return 23
08250                 | LR__0736
08250     19 2B 02 F6 | 	mov	local03, local07
08254     1A 27 02 F6 | 	mov	local01, local08
08258     13 37 02 F6 | 	mov	local09, local01
0825c     14 39 02 F6 | 	mov	local10, local02
08260     15 33 02 F6 | 	mov	local07, local03
08264     4A 00 00 FF 
08268     9C E4 05 F1 | 	add	objptr, ##38044
0826c     F2 26 02 FB | 	rdlong	local01, objptr
08270     13 35 02 F6 | 	mov	local08, local01
08274     01 34 66 F0 | 	shl	local08, #1
08278     13 35 02 F1 | 	add	local08, local01
0827c     02 34 66 F0 | 	shl	local08, #2
08280     03 00 00 FF 
08284     00 E4 85 F1 | 	sub	objptr, ##1536
08288     F2 34 02 F1 | 	add	local08, objptr
0828c     1A 37 62 FC | 	wrlong	local09, local08
08290     03 00 00 FF 
08294     00 E4 05 F1 | 	add	objptr, ##1536
08298     F2 26 02 FB | 	rdlong	local01, objptr
0829c     13 37 02 F6 | 	mov	local09, local01
082a0     01 36 66 F0 | 	shl	local09, #1
082a4     13 37 02 F1 | 	add	local09, local01
082a8     02 36 66 F0 | 	shl	local09, #2
082ac     03 00 00 FF 
082b0     00 E4 85 F1 | 	sub	objptr, ##1536
082b4     F2 36 02 F1 | 	add	local09, objptr
082b8     04 36 06 F1 | 	add	local09, #4
082bc     1B 39 62 FC | 	wrlong	local10, local09
082c0     03 00 00 FF 
082c4     00 E4 05 F1 | 	add	objptr, ##1536
082c8     F2 26 02 FB | 	rdlong	local01, objptr
082cc     13 39 02 F6 | 	mov	local10, local01
082d0     01 38 66 F0 | 	shl	local10, #1
082d4     13 39 02 F1 | 	add	local10, local01
082d8     02 38 66 F0 | 	shl	local10, #2
082dc     03 00 00 FF 
082e0     00 E4 85 F1 | 	sub	objptr, ##1536
082e4     F2 38 02 F1 | 	add	local10, objptr
082e8     08 38 06 F1 | 	add	local10, #8
082ec     1C 33 62 FC | 	wrlong	local07, local10
082f0     03 00 00 FF 
082f4     00 E4 05 F1 | 	add	objptr, ##1536
082f8     F2 36 02 FB | 	rdlong	local09, objptr
082fc     01 36 06 F1 | 	add	local09, #1
08300     F2 36 62 FC | 	wrlong	local09, objptr
08304     4A 00 00 FF 
08308     9C E4 85 F1 | 	sub	objptr, ##38044
0830c                 | LR__0737
0830c                 | ' 
0830c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0830c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
0830c     03 2C 0E F2 | 	cmp	local04, #3 wz
08310     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08314     38 00 90 5D |  if_ne	jmp	#LR__0738
08318     4A 00 00 FF 
0831c     9C E4 05 F1 | 	add	objptr, ##38044
08320     F2 38 02 FB | 	rdlong	local10, objptr
08324     1C 27 02 F6 | 	mov	local01, local10
08328     01 26 66 F0 | 	shl	local01, #1
0832c     1C 27 02 F1 | 	add	local01, local10
08330     02 26 66 F0 | 	shl	local01, #2
08334     03 00 00 FF 
08338     00 E4 85 F1 | 	sub	objptr, ##1536
0833c     F2 26 02 F1 | 	add	local01, objptr
08340     08 26 06 F1 | 	add	local01, #8
08344     13 FD 6B FC | 	wrlong	#510, local01
08348     47 00 00 FF 
0834c     9C E4 85 F1 | 	sub	objptr, ##36508
08350                 | LR__0738
08350                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08350                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08350     4A 00 00 FF 
08354     9C E4 05 F1 | 	add	objptr, ##38044
08358     F2 26 02 FB | 	rdlong	local01, objptr
0835c     4A 00 00 FF 
08360     9C E4 85 F1 | 	sub	objptr, ##38044
08364     97 58 48 FB | 	callpa	#(@LR__0741-@LR__0739)>>2,fcache_load_ptr_
08368                 | LR__0739
08368     13 39 02 F6 | 	mov	local10, local01
0836c     01 38 66 F0 | 	shl	local10, #1
08370     13 39 02 F1 | 	add	local10, local01
08374     02 38 66 F0 | 	shl	local10, #2
08378     47 00 00 FF 
0837c     9C E4 05 F1 | 	add	objptr, ##36508
08380     F2 38 02 F1 | 	add	local10, objptr
08384     08 38 06 F1 | 	add	local10, #8
08388     1C 39 02 FB | 	rdlong	local10, local10
0838c     9B 38 0E F2 | 	cmp	local10, #155 wz
08390     47 00 00 FF 
08394     9C E4 85 F1 | 	sub	objptr, ##36508
08398     70 00 90 5D |  if_ne	jmp	#LR__0740
0839c     13 37 02 F6 | 	mov	local09, local01
083a0     01 36 86 F1 | 	sub	local09, #1
083a4     1B 39 02 F6 | 	mov	local10, local09
083a8     01 38 66 F0 | 	shl	local10, #1
083ac     1B 39 02 F1 | 	add	local10, local09
083b0     02 38 66 F0 | 	shl	local10, #2
083b4     47 00 00 FF 
083b8     9C E4 05 F1 | 	add	objptr, ##36508
083bc     F2 38 02 F1 | 	add	local10, objptr
083c0     08 38 06 F1 | 	add	local10, #8
083c4     1C 39 02 FB | 	rdlong	local10, local10
083c8     11 38 0E F2 | 	cmp	local10, #17 wz
083cc     47 00 00 FF 
083d0     9C E4 85 F1 | 	sub	objptr, ##36508
083d4     34 00 90 5D |  if_ne	jmp	#LR__0740
083d8     13 37 02 F6 | 	mov	local09, local01
083dc     01 36 86 F1 | 	sub	local09, #1
083e0     1B 39 02 F6 | 	mov	local10, local09
083e4     01 38 66 F0 | 	shl	local10, #1
083e8     1B 39 02 F1 | 	add	local10, local09
083ec     02 38 66 F0 | 	shl	local10, #2
083f0     47 00 00 FF 
083f4     9C E4 05 F1 | 	add	objptr, ##36508
083f8     F2 38 02 F1 | 	add	local10, objptr
083fc     08 38 06 F1 | 	add	local10, #8
08400     1C 25 68 FC | 	wrlong	#18, local10
08404     47 00 00 FF 
08408     9C E4 85 F1 | 	sub	objptr, ##36508
0840c                 | LR__0740
0840c     01 26 86 F1 | 	sub	local01, #1
08410     01 26 56 F2 | 	cmps	local01, #1 wc
08414     50 FF 9F 3D |  if_ae	jmp	#LR__0739
08418                 | LR__0741
08418                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08418                 | ' return err
08418     18 FB 01 F6 | 	mov	result1, local06
0841c     A7 F0 03 F6 | 	mov	ptra, fp
08420     B2 00 A0 FD | 	call	#popregs_
08424                 | _compile_immediate_ret
08424     2D 00 64 FD | 	ret
08428                 | 
08428                 | ' 
08428                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08428                 | ' 
08428                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08428                 | _compile_immediate_assign
08428     0C 4A 05 F6 | 	mov	COUNT_, #12
0842c     A8 00 A0 FD | 	call	#pushregs_
08430     09 2D 02 F6 | 	mov	local04, arg01
08434     FF 2A 06 F6 | 	mov	local03, #255
08438     01 2E 66 F6 | 	neg	local05, #1
0843c     00 30 06 F6 | 	mov	local06, #0
08440                 | ' 
08440                 | ' t1.result_type=result_error : t1.result.uresult=0
08440                 | ' i=-1: j=-1 : err=0
08440                 | ' 
08440                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08440     02 2C 0E F2 | 	cmp	local04, #2 wz
08444     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
08448     35 00 00 AF 
0844c     2C E4 05 A1 |  if_e	add	objptr, ##27180
08450     F2 32 02 AB |  if_e	rdlong	local07, objptr
08454     02 00 00 AF 
08458     38 E4 05 A1 |  if_e	add	objptr, ##1080
0845c     F2 04 68 AC |  if_e	wrlong	#2, objptr
08460     37 00 00 AF 
08464     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08468                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08468     04 2C 0E F2 | 	cmp	local04, #4 wz
0846c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08470     2C 00 90 5D |  if_ne	jmp	#LR__0750
08474     35 00 00 FF 
08478     34 E4 05 F1 | 	add	objptr, ##27188
0847c     F2 32 02 FB | 	rdlong	local07, objptr
08480     02 00 00 FF 
08484     30 E4 05 F1 | 	add	objptr, ##1072
08488     F2 06 68 FC | 	wrlong	#3, objptr
0848c     13 00 00 FF 
08490     38 E4 05 F1 | 	add	objptr, ##9784
08494     F2 04 68 FC | 	wrlong	#2, objptr
08498     4A 00 00 FF 
0849c     9C E4 85 F1 | 	sub	objptr, ##38044
084a0                 | LR__0750
084a0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
084a0     05 2C 0E F2 | 	cmp	local04, #5 wz
084a4     3C 00 90 5D |  if_ne	jmp	#LR__0751
084a8     37 00 00 FF 
084ac     64 E4 05 F1 | 	add	objptr, ##28260
084b0     F2 FA 01 FB | 	rdlong	result1, objptr
084b4     FD 32 02 F6 | 	mov	local07, result1
084b8     03 32 66 F0 | 	shl	local07, #3
084bc     02 00 00 FF 
084c0     38 E4 85 F1 | 	sub	objptr, ##1080
084c4     F2 32 02 F1 | 	add	local07, objptr
084c8     19 33 02 FB | 	rdlong	local07, local07
084cc     02 FA 05 F1 | 	add	result1, #2
084d0     02 00 00 FF 
084d4     38 E4 05 F1 | 	add	objptr, ##1080
084d8     F2 FA 61 FC | 	wrlong	result1, objptr
084dc     37 00 00 FF 
084e0     64 E4 85 F1 | 	sub	objptr, ##28260
084e4                 | LR__0751
084e4     19 13 02 F6 | 	mov	arg01, local07
084e8     01 14 06 F6 | 	mov	arg02, #1
084ec     0C 20 B2 FD | 	call	#__system__Right_S
084f0     FD 34 02 F6 | 	mov	local08, result1
084f4     A0 3B B0 FD | 	call	#_expr
084f8                 | ' 
084f8                 | ' suffix2$=right$(varname2$,1)
084f8                 | ' expr()
084f8                 | ' if varnum>0 then					' try to find a variable
084f8     35 00 00 FF 
084fc     28 E4 05 F1 | 	add	objptr, ##27176
08500     F2 36 02 FB | 	rdlong	local09, objptr
08504     35 00 00 FF 
08508     28 E4 85 F1 | 	sub	objptr, ##27176
0850c     01 36 56 F2 | 	cmps	local09, #1 wc
08510     58 00 90 CD |  if_b	jmp	#LR__0754
08514                 | '   for i=0 to varnum-1
08514     00 38 06 F6 | 	mov	local10, #0
08518     35 00 00 FF 
0851c     28 E4 05 F1 | 	add	objptr, ##27176
08520     F2 3A 02 FB | 	rdlong	local11, objptr
08524     35 00 00 FF 
08528     28 E4 85 F1 | 	sub	objptr, ##27176
0852c                 | LR__0752
0852c     1D 39 52 F2 | 	cmps	local10, local11 wc
08530     38 00 90 3D |  if_ae	jmp	#LR__0753
08534                 | '     if variables(i).name=varname2$ then j=i : exit
08534     1C 37 02 F6 | 	mov	local09, local10
08538     04 36 66 F0 | 	shl	local09, #4
0853c     15 00 00 FF 
08540     18 E4 05 F1 | 	add	objptr, ##10776
08544     F2 36 02 F1 | 	add	local09, objptr
08548     1B 13 02 FB | 	rdlong	arg01, local09
0854c     19 15 02 F6 | 	mov	arg02, local07
08550     15 00 00 FF 
08554     18 E4 85 F1 | 	sub	objptr, ##10776
08558     C0 FE B1 FD | 	call	#__system___string_cmp
0855c     00 FA 0D F2 | 	cmp	result1, #0 wz
08560     1C 2F 02 A6 |  if_e	mov	local05, local10
08564     01 38 06 51 |  if_ne	add	local10, #1
08568     C0 FF 9F 5D |  if_ne	jmp	#LR__0752
0856c                 | LR__0753
0856c                 | LR__0754
0856c                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
0856c     FF FF 7F FF 
08570     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
08574     60 00 90 5D |  if_ne	jmp	#LR__0755
08578     35 00 00 FF 
0857c     28 E4 05 F1 | 	add	objptr, ##27176
08580     F2 36 02 FB | 	rdlong	local09, objptr
08584     35 00 00 FF 
08588     28 E4 85 F1 | 	sub	objptr, ##27176
0858c     02 00 00 FF 
08590     00 36 56 F2 | 	cmps	local09, ##1024 wc
08594     40 00 90 3D |  if_ae	jmp	#LR__0755
08598     35 00 00 FF 
0859c     28 E4 05 F1 | 	add	objptr, ##27176
085a0     F2 3A 02 FB | 	rdlong	local11, objptr
085a4     04 3A 66 F0 | 	shl	local11, #4
085a8     20 00 00 FF 
085ac     10 E4 85 F1 | 	sub	objptr, ##16400
085b0     F2 3A 02 F1 | 	add	local11, objptr
085b4     1D 33 62 FC | 	wrlong	local07, local11
085b8     20 00 00 FF 
085bc     10 E4 05 F1 | 	add	objptr, ##16400
085c0     F2 36 02 FB | 	rdlong	local09, objptr
085c4     1B 2F 02 F6 | 	mov	local05, local09
085c8     01 36 06 F1 | 	add	local09, #1
085cc     F2 36 62 FC | 	wrlong	local09, objptr
085d0     35 00 00 FF 
085d4     28 E4 85 F1 | 	sub	objptr, ##27176
085d8                 | LR__0755
085d8                 | ' if varnum>=maxvars then
085d8     35 00 00 FF 
085dc     28 E4 05 F1 | 	add	objptr, ##27176
085e0     F2 36 02 FB | 	rdlong	local09, objptr
085e4     35 00 00 FF 
085e8     28 E4 85 F1 | 	sub	objptr, ##27176
085ec     02 00 00 FF 
085f0     00 36 56 F2 | 	cmps	local09, ##1024 wc
085f4     2D 30 06 36 |  if_ae	mov	local06, #45
085f8     C8 01 90 3D |  if_ae	jmp	#LR__0760
085fc     17 27 02 F6 | 	mov	local01, local05
08600     17 2A 06 F6 | 	mov	local03, #23
08604     13 37 02 F6 | 	mov	local09, local01
08608     14 3D 02 F6 | 	mov	local12, local02
0860c     15 27 02 F6 | 	mov	local01, local03
08610     4A 00 00 FF 
08614     9C E4 05 F1 | 	add	objptr, ##38044
08618     F2 3A 02 FB | 	rdlong	local11, objptr
0861c     1D 39 02 F6 | 	mov	local10, local11
08620     01 38 66 F0 | 	shl	local10, #1
08624     1D 39 02 F1 | 	add	local10, local11
08628     02 38 66 F0 | 	shl	local10, #2
0862c     03 00 00 FF 
08630     00 E4 85 F1 | 	sub	objptr, ##1536
08634     F2 38 02 F1 | 	add	local10, objptr
08638     1C 37 62 FC | 	wrlong	local09, local10
0863c     03 00 00 FF 
08640     00 E4 05 F1 | 	add	objptr, ##1536
08644     F2 36 02 FB | 	rdlong	local09, objptr
08648     1B 3B 02 F6 | 	mov	local11, local09
0864c     01 3A 66 F0 | 	shl	local11, #1
08650     1B 3B 02 F1 | 	add	local11, local09
08654     02 3A 66 F0 | 	shl	local11, #2
08658     03 00 00 FF 
0865c     00 E4 85 F1 | 	sub	objptr, ##1536
08660     F2 3A 02 F1 | 	add	local11, objptr
08664     04 3A 06 F1 | 	add	local11, #4
08668     1D 3D 62 FC | 	wrlong	local12, local11
0866c     03 00 00 FF 
08670     00 E4 05 F1 | 	add	objptr, ##1536
08674     F2 36 02 FB | 	rdlong	local09, objptr
08678     1B 3D 02 F6 | 	mov	local12, local09
0867c     01 3C 66 F0 | 	shl	local12, #1
08680     1B 3D 02 F1 | 	add	local12, local09
08684     02 3C 66 F0 | 	shl	local12, #2
08688     03 00 00 FF 
0868c     00 E4 85 F1 | 	sub	objptr, ##1536
08690     F2 3C 02 F1 | 	add	local12, objptr
08694     08 3C 06 F1 | 	add	local12, #8
08698     1E 27 62 FC | 	wrlong	local01, local12
0869c     03 00 00 FF 
086a0     00 E4 05 F1 | 	add	objptr, ##1536
086a4     F2 36 02 FB | 	rdlong	local09, objptr
086a8     01 36 06 F1 | 	add	local09, #1
086ac     F2 36 62 FC | 	wrlong	local09, objptr
086b0     4A 00 00 FF 
086b4     9C E4 85 F1 | 	sub	objptr, ##38044
086b8                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
086b8                 | '   compiledline(lineptr)=t1:  lineptr+=1 
086b8                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
086b8     03 2C 0E F2 | 	cmp	local04, #3 wz
086bc     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
086c0     38 00 90 5D |  if_ne	jmp	#LR__0756
086c4     4A 00 00 FF 
086c8     9C E4 05 F1 | 	add	objptr, ##38044
086cc     F2 3C 02 FB | 	rdlong	local12, objptr
086d0     1E 27 02 F6 | 	mov	local01, local12
086d4     01 26 66 F0 | 	shl	local01, #1
086d8     1E 27 02 F1 | 	add	local01, local12
086dc     02 26 66 F0 | 	shl	local01, #2
086e0     03 00 00 FF 
086e4     00 E4 85 F1 | 	sub	objptr, ##1536
086e8     F2 26 02 F1 | 	add	local01, objptr
086ec     08 26 06 F1 | 	add	local01, #8
086f0     13 FD 6B FC | 	wrlong	#510, local01
086f4     47 00 00 FF 
086f8     9C E4 85 F1 | 	sub	objptr, ##36508
086fc                 | LR__0756
086fc                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
086fc     4A 00 00 FF 
08700     9C E4 05 F1 | 	add	objptr, ##38044
08704     F2 38 02 FB | 	rdlong	local10, objptr
08708     4A 00 00 FF 
0870c     9C E4 85 F1 | 	sub	objptr, ##38044
08710     97 58 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
08714                 | LR__0757
08714     1C 3D 02 F6 | 	mov	local12, local10
08718     01 3C 66 F0 | 	shl	local12, #1
0871c     1C 3D 02 F1 | 	add	local12, local10
08720     02 3C 66 F0 | 	shl	local12, #2
08724     47 00 00 FF 
08728     9C E4 05 F1 | 	add	objptr, ##36508
0872c     F2 3C 02 F1 | 	add	local12, objptr
08730     08 3C 06 F1 | 	add	local12, #8
08734     1E 3D 02 FB | 	rdlong	local12, local12
08738     9B 3C 0E F2 | 	cmp	local12, #155 wz
0873c     47 00 00 FF 
08740     9C E4 85 F1 | 	sub	objptr, ##36508
08744     70 00 90 5D |  if_ne	jmp	#LR__0758
08748     1C 3D 02 F6 | 	mov	local12, local10
0874c     01 3C 86 F1 | 	sub	local12, #1
08750     1E 27 02 F6 | 	mov	local01, local12
08754     01 26 66 F0 | 	shl	local01, #1
08758     1E 27 02 F1 | 	add	local01, local12
0875c     02 26 66 F0 | 	shl	local01, #2
08760     47 00 00 FF 
08764     9C E4 05 F1 | 	add	objptr, ##36508
08768     F2 26 02 F1 | 	add	local01, objptr
0876c     08 26 06 F1 | 	add	local01, #8
08770     13 27 02 FB | 	rdlong	local01, local01
08774     11 26 0E F2 | 	cmp	local01, #17 wz
08778     47 00 00 FF 
0877c     9C E4 85 F1 | 	sub	objptr, ##36508
08780     34 00 90 5D |  if_ne	jmp	#LR__0758
08784     1C 3D 02 F6 | 	mov	local12, local10
08788     01 3C 86 F1 | 	sub	local12, #1
0878c     1E 27 02 F6 | 	mov	local01, local12
08790     01 26 66 F0 | 	shl	local01, #1
08794     1E 27 02 F1 | 	add	local01, local12
08798     02 26 66 F0 | 	shl	local01, #2
0879c     47 00 00 FF 
087a0     9C E4 05 F1 | 	add	objptr, ##36508
087a4     F2 26 02 F1 | 	add	local01, objptr
087a8     08 26 06 F1 | 	add	local01, #8
087ac     13 25 68 FC | 	wrlong	#18, local01
087b0     47 00 00 FF 
087b4     9C E4 85 F1 | 	sub	objptr, ##36508
087b8                 | LR__0758
087b8     01 38 86 F1 | 	sub	local10, #1
087bc     01 38 56 F2 | 	cmps	local10, #1 wc
087c0     50 FF 9F 3D |  if_ae	jmp	#LR__0757
087c4                 | LR__0759
087c4                 | LR__0760
087c4                 | ' return err
087c4     18 FB 01 F6 | 	mov	result1, local06
087c8     A7 F0 03 F6 | 	mov	ptra, fp
087cc     B2 00 A0 FD | 	call	#popregs_
087d0                 | _compile_immediate_assign_ret
087d0     2D 00 64 FD | 	ret
087d4                 | 
087d4                 | ' 
087d4                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
087d4                 | ' 
087d4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
087d4                 | _compile
087d4     03 4A 05 F6 | 	mov	COUNT_, #3
087d8     A8 00 A0 FD | 	call	#pushregs_
087dc     09 27 02 F6 | 	mov	local01, arg01
087e0     0B 29 02 F6 | 	mov	local02, arg03
087e4     47 00 00 FF 
087e8     9C E4 05 F1 | 	add	objptr, ##36508
087ec     F2 26 62 FC | 	wrlong	local01, objptr
087f0     04 E4 05 F1 | 	add	objptr, #4
087f4     F2 14 62 FC | 	wrlong	arg02, objptr
087f8     47 00 00 FF 
087fc     A0 E4 85 F1 | 	sub	objptr, ##36512
08800     14 13 02 F6 | 	mov	arg01, local02
08804     01 12 06 F1 | 	add	arg01, #1
08808     13 15 02 F6 | 	mov	arg02, local01
0880c     18 F2 BF FD | 	call	#_compile_immediate
08810     FD 2A 0A F6 | 	mov	local03, result1 wz
08814                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08814                 | ' ucompiledline(0)=alinemajor
08814                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08814                 | ' 
08814                 | ' ' cont: 
08814                 | ' ' 0 - this is the first part of the line that will continue
08814                 | ' ' 1 - this is the continuation of the line
08814                 | ' ' 2 - this is the last continued line
08814                 | ' ' 3 - this is the one and only part
08814                 | ' 
08814                 | ' err=compile_immediate(cont+1,alinemajor) 
08814                 | ' if err=0 andalso alinemajor>0 then
08814     74 00 90 5D |  if_ne	jmp	#LR__0775
08818     01 26 16 F2 | 	cmp	local01, #1 wc
0881c     6C 00 90 CD |  if_b	jmp	#LR__0775
08820                 | '   if cont=3 orelse cont=2 then 
08820     03 28 0E F2 | 	cmp	local02, #3 wz
08824     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08828     60 00 90 5D |  if_ne	jmp	#LR__0774
0882c                 | '     if alinemajor >lastline then 
0882c     4A 00 00 FF 
08830     AC E4 05 F1 | 	add	objptr, ##38060
08834     F2 14 02 FB | 	rdlong	arg02, objptr
08838     4A 00 00 FF 
0883c     AC E4 85 F1 | 	sub	objptr, ##38060
08840     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08844     0C 00 90 ED |  if_be	jmp	#LR__0770
08848     13 13 02 F6 | 	mov	arg01, local01
0884c     10 F1 BF FD | 	call	#_add_line_at_end
08850     38 00 90 FD | 	jmp	#LR__0773
08854                 | LR__0770
08854     13 13 02 F6 | 	mov	arg01, local01
08858     D4 EA BF FD | 	call	#_deleteline
0885c                 | '       deleteline(alinemajor)  
0885c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
0885c     4A 00 00 FF 
08860     AC E4 05 F1 | 	add	objptr, ##38060
08864     F2 14 02 FB | 	rdlong	arg02, objptr
08868     4A 00 00 FF 
0886c     AC E4 85 F1 | 	sub	objptr, ##38060
08870     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08874     0C 00 90 ED |  if_be	jmp	#LR__0771
08878     13 13 02 F6 | 	mov	arg01, local01
0887c     E0 F0 BF FD | 	call	#_add_line_at_end
08880     08 00 90 FD | 	jmp	#LR__0772
08884                 | LR__0771
08884     13 13 02 F6 | 	mov	arg01, local01
08888     B8 EE BF FD | 	call	#_insertline
0888c                 | LR__0772
0888c                 | LR__0773
0888c                 | LR__0774
0888c                 | LR__0775
0888c                 | ' return err
0888c     15 FB 01 F6 | 	mov	result1, local03
08890     A7 F0 03 F6 | 	mov	ptra, fp
08894     B2 00 A0 FD | 	call	#popregs_
08898                 | _compile_ret
08898     2D 00 64 FD | 	ret
0889c                 | 
0889c                 | ' 
0889c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0889c                 | ' 
0889c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0889c                 | _compile_assign
0889c     03 4A 05 F6 | 	mov	COUNT_, #3
088a0     A8 00 A0 FD | 	call	#pushregs_
088a4     09 27 02 F6 | 	mov	local01, arg01
088a8     0B 29 02 F6 | 	mov	local02, arg03
088ac     47 00 00 FF 
088b0     9C E4 05 F1 | 	add	objptr, ##36508
088b4     F2 26 62 FC | 	wrlong	local01, objptr
088b8     04 E4 05 F1 | 	add	objptr, #4
088bc     F2 14 62 FC | 	wrlong	arg02, objptr
088c0     47 00 00 FF 
088c4     A0 E4 85 F1 | 	sub	objptr, ##36512
088c8     14 13 02 F6 | 	mov	arg01, local02
088cc     01 12 06 F1 | 	add	arg01, #1
088d0     54 FB BF FD | 	call	#_compile_immediate_assign
088d4     FD 2A 02 F6 | 	mov	local03, result1
088d8                 | ' 
088d8                 | ' ucompiledline(0)=alinemajor
088d8                 | ' ucompiledline(1)=alineminor
088d8                 | ' 
088d8                 | ' err=compile_immediate_assign(cont+1) 
088d8                 | ' if alinemajor>0 then
088d8     01 26 16 F2 | 	cmp	local01, #1 wc
088dc     6C 00 90 CD |  if_b	jmp	#LR__0785
088e0                 | '   if cont=3 orelse cont=2 then 
088e0     03 28 0E F2 | 	cmp	local02, #3 wz
088e4     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
088e8     60 00 90 5D |  if_ne	jmp	#LR__0784
088ec                 | '     if alinemajor >lastline then 
088ec     4A 00 00 FF 
088f0     AC E4 05 F1 | 	add	objptr, ##38060
088f4     F2 14 02 FB | 	rdlong	arg02, objptr
088f8     4A 00 00 FF 
088fc     AC E4 85 F1 | 	sub	objptr, ##38060
08900     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08904     0C 00 90 ED |  if_be	jmp	#LR__0780
08908     13 13 02 F6 | 	mov	arg01, local01
0890c     50 F0 BF FD | 	call	#_add_line_at_end
08910     38 00 90 FD | 	jmp	#LR__0783
08914                 | LR__0780
08914     13 13 02 F6 | 	mov	arg01, local01
08918     14 EA BF FD | 	call	#_deleteline
0891c                 | '       deleteline(alinemajor)  
0891c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0891c     4A 00 00 FF 
08920     AC E4 05 F1 | 	add	objptr, ##38060
08924     F2 14 02 FB | 	rdlong	arg02, objptr
08928     4A 00 00 FF 
0892c     AC E4 85 F1 | 	sub	objptr, ##38060
08930     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08934     0C 00 90 ED |  if_be	jmp	#LR__0781
08938     13 13 02 F6 | 	mov	arg01, local01
0893c     20 F0 BF FD | 	call	#_add_line_at_end
08940     08 00 90 FD | 	jmp	#LR__0782
08944                 | LR__0781
08944     13 13 02 F6 | 	mov	arg01, local01
08948     F8 ED BF FD | 	call	#_insertline
0894c                 | LR__0782
0894c                 | LR__0783
0894c                 | LR__0784
0894c                 | LR__0785
0894c                 | ' return err
0894c     15 FB 01 F6 | 	mov	result1, local03
08950     A7 F0 03 F6 | 	mov	ptra, fp
08954     B2 00 A0 FD | 	call	#popregs_
08958                 | _compile_assign_ret
08958     2D 00 64 FD | 	ret
0895c                 | 
0895c                 | ' 
0895c                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
0895c                 | ' 
0895c                 | ' function compile_fun_2p() as ulong
0895c                 | _compile_fun_2p
0895c     01 4A 05 F6 | 	mov	COUNT_, #1
08960     A8 00 A0 FD | 	call	#pushregs_
08964     30 37 B0 FD | 	call	#_expr
08968     FD 26 02 F6 | 	mov	local01, result1
0896c                 | ' err=expr() : if err>0 then return err
0896c     01 26 16 F2 | 	cmp	local01, #1 wc
08970     13 FB 01 36 |  if_ae	mov	result1, local01
08974     60 00 90 3D |  if_ae	jmp	#LR__0790
08978                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08978     37 00 00 FF 
0897c     64 E4 05 F1 | 	add	objptr, ##28260
08980     F2 26 02 FB | 	rdlong	local01, objptr
08984     03 26 66 F0 | 	shl	local01, #3
08988     02 00 00 FF 
0898c     38 E4 85 F1 | 	sub	objptr, ##1080
08990     F2 26 02 F1 | 	add	local01, objptr
08994     04 26 06 F1 | 	add	local01, #4
08998     13 27 02 FB | 	rdlong	local01, local01
0899c     11 26 0E F2 | 	cmp	local01, #17 wz
089a0     35 00 00 FF 
089a4     2C E4 85 F1 | 	sub	objptr, ##27180
089a8     15 FA 05 56 |  if_ne	mov	result1, #21
089ac     28 00 90 5D |  if_ne	jmp	#LR__0790
089b0     37 00 00 FF 
089b4     64 E4 05 F1 | 	add	objptr, ##28260
089b8     F2 26 02 FB | 	rdlong	local01, objptr
089bc     01 26 06 F1 | 	add	local01, #1
089c0     F2 26 62 FC | 	wrlong	local01, objptr
089c4     37 00 00 FF 
089c8     64 E4 85 F1 | 	sub	objptr, ##28260
089cc     C8 36 B0 FD | 	call	#_expr
089d0                 | ' err=expr() : if err>0 then return err
089d0     01 FA 15 F2 | 	cmp	result1, #1 wc
089d4                 | ' return 0
089d4     00 FA 05 C6 |  if_b	mov	result1, #0
089d8                 | LR__0790
089d8     A7 F0 03 F6 | 	mov	ptra, fp
089dc     B2 00 A0 FD | 	call	#popregs_
089e0                 | _compile_fun_2p_ret
089e0     2D 00 64 FD | 	ret
089e4                 | 
089e4                 | ' 
089e4                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
089e4                 | ' 
089e4                 | ' function compile_fun_3p() as ulong
089e4                 | _compile_fun_3p
089e4     01 4A 05 F6 | 	mov	COUNT_, #1
089e8     A8 00 A0 FD | 	call	#pushregs_
089ec     A8 36 B0 FD | 	call	#_expr
089f0     FD 26 02 F6 | 	mov	local01, result1
089f4                 | ' err=expr() : if err>0 then return err
089f4     01 26 16 F2 | 	cmp	local01, #1 wc
089f8     13 FB 01 36 |  if_ae	mov	result1, local01
089fc     C8 00 90 3D |  if_ae	jmp	#LR__0800
08a00                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08a00     37 00 00 FF 
08a04     64 E4 05 F1 | 	add	objptr, ##28260
08a08     F2 26 02 FB | 	rdlong	local01, objptr
08a0c     03 26 66 F0 | 	shl	local01, #3
08a10     02 00 00 FF 
08a14     38 E4 85 F1 | 	sub	objptr, ##1080
08a18     F2 26 02 F1 | 	add	local01, objptr
08a1c     04 26 06 F1 | 	add	local01, #4
08a20     13 27 02 FB | 	rdlong	local01, local01
08a24     11 26 0E F2 | 	cmp	local01, #17 wz
08a28     35 00 00 FF 
08a2c     2C E4 85 F1 | 	sub	objptr, ##27180
08a30     15 FA 05 56 |  if_ne	mov	result1, #21
08a34     90 00 90 5D |  if_ne	jmp	#LR__0800
08a38     37 00 00 FF 
08a3c     64 E4 05 F1 | 	add	objptr, ##28260
08a40     F2 26 02 FB | 	rdlong	local01, objptr
08a44     01 26 06 F1 | 	add	local01, #1
08a48     F2 26 62 FC | 	wrlong	local01, objptr
08a4c     37 00 00 FF 
08a50     64 E4 85 F1 | 	sub	objptr, ##28260
08a54     40 36 B0 FD | 	call	#_expr
08a58     FD 26 02 F6 | 	mov	local01, result1
08a5c                 | ' err=expr() : if err>0 then return err
08a5c     01 26 16 F2 | 	cmp	local01, #1 wc
08a60     13 FB 01 36 |  if_ae	mov	result1, local01
08a64     60 00 90 3D |  if_ae	jmp	#LR__0800
08a68                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08a68     37 00 00 FF 
08a6c     64 E4 05 F1 | 	add	objptr, ##28260
08a70     F2 26 02 FB | 	rdlong	local01, objptr
08a74     03 26 66 F0 | 	shl	local01, #3
08a78     02 00 00 FF 
08a7c     38 E4 85 F1 | 	sub	objptr, ##1080
08a80     F2 26 02 F1 | 	add	local01, objptr
08a84     04 26 06 F1 | 	add	local01, #4
08a88     13 27 02 FB | 	rdlong	local01, local01
08a8c     11 26 0E F2 | 	cmp	local01, #17 wz
08a90     35 00 00 FF 
08a94     2C E4 85 F1 | 	sub	objptr, ##27180
08a98     15 FA 05 56 |  if_ne	mov	result1, #21
08a9c     28 00 90 5D |  if_ne	jmp	#LR__0800
08aa0     37 00 00 FF 
08aa4     64 E4 05 F1 | 	add	objptr, ##28260
08aa8     F2 26 02 FB | 	rdlong	local01, objptr
08aac     01 26 06 F1 | 	add	local01, #1
08ab0     F2 26 62 FC | 	wrlong	local01, objptr
08ab4     37 00 00 FF 
08ab8     64 E4 85 F1 | 	sub	objptr, ##28260
08abc     D8 35 B0 FD | 	call	#_expr
08ac0                 | ' err=expr() : if err>0 then return err
08ac0     01 FA 15 F2 | 	cmp	result1, #1 wc
08ac4                 | ' return 0
08ac4     00 FA 05 C6 |  if_b	mov	result1, #0
08ac8                 | LR__0800
08ac8     A7 F0 03 F6 | 	mov	ptra, fp
08acc     B2 00 A0 FD | 	call	#popregs_
08ad0                 | _compile_fun_3p_ret
08ad0     2D 00 64 FD | 	ret
08ad4                 | 
08ad4                 | ' 
08ad4                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08ad4                 | ' 
08ad4                 | ' function compile_fun_4p() as ulong
08ad4                 | _compile_fun_4p
08ad4     01 4A 05 F6 | 	mov	COUNT_, #1
08ad8     A8 00 A0 FD | 	call	#pushregs_
08adc     B8 35 B0 FD | 	call	#_expr
08ae0     FD 26 02 F6 | 	mov	local01, result1
08ae4                 | ' err=expr() : if err>0 then return err
08ae4     01 26 16 F2 | 	cmp	local01, #1 wc
08ae8     13 FB 01 36 |  if_ae	mov	result1, local01
08aec     30 01 90 3D |  if_ae	jmp	#LR__0810
08af0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08af0     37 00 00 FF 
08af4     64 E4 05 F1 | 	add	objptr, ##28260
08af8     F2 26 02 FB | 	rdlong	local01, objptr
08afc     03 26 66 F0 | 	shl	local01, #3
08b00     02 00 00 FF 
08b04     38 E4 85 F1 | 	sub	objptr, ##1080
08b08     F2 26 02 F1 | 	add	local01, objptr
08b0c     04 26 06 F1 | 	add	local01, #4
08b10     13 27 02 FB | 	rdlong	local01, local01
08b14     11 26 0E F2 | 	cmp	local01, #17 wz
08b18     35 00 00 FF 
08b1c     2C E4 85 F1 | 	sub	objptr, ##27180
08b20     15 FA 05 56 |  if_ne	mov	result1, #21
08b24     F8 00 90 5D |  if_ne	jmp	#LR__0810
08b28     37 00 00 FF 
08b2c     64 E4 05 F1 | 	add	objptr, ##28260
08b30     F2 26 02 FB | 	rdlong	local01, objptr
08b34     01 26 06 F1 | 	add	local01, #1
08b38     F2 26 62 FC | 	wrlong	local01, objptr
08b3c     37 00 00 FF 
08b40     64 E4 85 F1 | 	sub	objptr, ##28260
08b44     50 35 B0 FD | 	call	#_expr
08b48     FD 26 02 F6 | 	mov	local01, result1
08b4c                 | ' err=expr() : if err>0 then return err
08b4c     01 26 16 F2 | 	cmp	local01, #1 wc
08b50     13 FB 01 36 |  if_ae	mov	result1, local01
08b54     C8 00 90 3D |  if_ae	jmp	#LR__0810
08b58                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08b58     37 00 00 FF 
08b5c     64 E4 05 F1 | 	add	objptr, ##28260
08b60     F2 26 02 FB | 	rdlong	local01, objptr
08b64     03 26 66 F0 | 	shl	local01, #3
08b68     02 00 00 FF 
08b6c     38 E4 85 F1 | 	sub	objptr, ##1080
08b70     F2 26 02 F1 | 	add	local01, objptr
08b74     04 26 06 F1 | 	add	local01, #4
08b78     13 27 02 FB | 	rdlong	local01, local01
08b7c     11 26 0E F2 | 	cmp	local01, #17 wz
08b80     35 00 00 FF 
08b84     2C E4 85 F1 | 	sub	objptr, ##27180
08b88     15 FA 05 56 |  if_ne	mov	result1, #21
08b8c     90 00 90 5D |  if_ne	jmp	#LR__0810
08b90     37 00 00 FF 
08b94     64 E4 05 F1 | 	add	objptr, ##28260
08b98     F2 26 02 FB | 	rdlong	local01, objptr
08b9c     01 26 06 F1 | 	add	local01, #1
08ba0     F2 26 62 FC | 	wrlong	local01, objptr
08ba4     37 00 00 FF 
08ba8     64 E4 85 F1 | 	sub	objptr, ##28260
08bac     E8 34 B0 FD | 	call	#_expr
08bb0     FD 26 02 F6 | 	mov	local01, result1
08bb4                 | ' err=expr() : if err>0 then return err
08bb4     01 26 16 F2 | 	cmp	local01, #1 wc
08bb8     13 FB 01 36 |  if_ae	mov	result1, local01
08bbc     60 00 90 3D |  if_ae	jmp	#LR__0810
08bc0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08bc0     37 00 00 FF 
08bc4     64 E4 05 F1 | 	add	objptr, ##28260
08bc8     F2 26 02 FB | 	rdlong	local01, objptr
08bcc     03 26 66 F0 | 	shl	local01, #3
08bd0     02 00 00 FF 
08bd4     38 E4 85 F1 | 	sub	objptr, ##1080
08bd8     F2 26 02 F1 | 	add	local01, objptr
08bdc     04 26 06 F1 | 	add	local01, #4
08be0     13 27 02 FB | 	rdlong	local01, local01
08be4     11 26 0E F2 | 	cmp	local01, #17 wz
08be8     35 00 00 FF 
08bec     2C E4 85 F1 | 	sub	objptr, ##27180
08bf0     15 FA 05 56 |  if_ne	mov	result1, #21
08bf4     28 00 90 5D |  if_ne	jmp	#LR__0810
08bf8     37 00 00 FF 
08bfc     64 E4 05 F1 | 	add	objptr, ##28260
08c00     F2 26 02 FB | 	rdlong	local01, objptr
08c04     01 26 06 F1 | 	add	local01, #1
08c08     F2 26 62 FC | 	wrlong	local01, objptr
08c0c     37 00 00 FF 
08c10     64 E4 85 F1 | 	sub	objptr, ##28260
08c14     80 34 B0 FD | 	call	#_expr
08c18                 | ' err=expr() : if err>0 then return err
08c18     01 FA 15 F2 | 	cmp	result1, #1 wc
08c1c                 | ' return 0
08c1c     00 FA 05 C6 |  if_b	mov	result1, #0
08c20                 | LR__0810
08c20     A7 F0 03 F6 | 	mov	ptra, fp
08c24     B2 00 A0 FD | 	call	#popregs_
08c28                 | _compile_fun_4p_ret
08c28     2D 00 64 FD | 	ret
08c2c                 | 
08c2c                 | ' 
08c2c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08c2c                 | ' 
08c2c                 | ' function compile_fun_varp() as ulong,ulong 
08c2c                 | _compile_fun_varp
08c2c     03 4A 05 F6 | 	mov	COUNT_, #3
08c30     A8 00 A0 FD | 	call	#pushregs_
08c34     00 26 06 F6 | 	mov	local01, #0
08c38                 | ' 
08c38                 | ' i=0 : err=0
08c38                 | ' if lparts(ct).token<>token_end then
08c38     37 00 00 FF 
08c3c     64 E4 05 F1 | 	add	objptr, ##28260
08c40     F2 28 02 FB | 	rdlong	local02, objptr
08c44     03 28 66 F0 | 	shl	local02, #3
08c48     02 00 00 FF 
08c4c     38 E4 85 F1 | 	sub	objptr, ##1080
08c50     F2 28 02 F1 | 	add	local02, objptr
08c54     04 28 06 F1 | 	add	local02, #4
08c58     14 29 02 FB | 	rdlong	local02, local02
08c5c     FE 29 0E F2 | 	cmp	local02, #510 wz
08c60     35 00 00 FF 
08c64     2C E4 85 F1 | 	sub	objptr, ##27180
08c68     88 00 90 AD |  if_e	jmp	#LR__0821
08c6c                 | '   do
08c6c                 | LR__0820
08c6c     28 34 B0 FD | 	call	#_expr
08c70     01 26 06 F1 | 	add	local01, #1
08c74                 | '     expr()
08c74                 | '     i+=1
08c74                 | '     if lparts(ct).token=token_comma then ct+=1
08c74     37 00 00 FF 
08c78     64 E4 05 F1 | 	add	objptr, ##28260
08c7c     F2 28 02 FB | 	rdlong	local02, objptr
08c80     03 28 66 F0 | 	shl	local02, #3
08c84     02 00 00 FF 
08c88     38 E4 85 F1 | 	sub	objptr, ##1080
08c8c     F2 28 02 F1 | 	add	local02, objptr
08c90     04 28 06 F1 | 	add	local02, #4
08c94     14 29 02 FB | 	rdlong	local02, local02
08c98     11 28 0E F2 | 	cmp	local02, #17 wz
08c9c     35 00 00 FF 
08ca0     2C E4 85 F1 | 	sub	objptr, ##27180
08ca4     37 00 00 AF 
08ca8     64 E4 05 A1 |  if_e	add	objptr, ##28260
08cac     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08cb0     01 2A 06 A1 |  if_e	add	local03, #1
08cb4     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08cb8     37 00 00 AF 
08cbc     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08cc0                 | '     if lparts(ct).token=token_end then exit loop
08cc0     37 00 00 FF 
08cc4     64 E4 05 F1 | 	add	objptr, ##28260
08cc8     F2 28 02 FB | 	rdlong	local02, objptr
08ccc     03 28 66 F0 | 	shl	local02, #3
08cd0     02 00 00 FF 
08cd4     38 E4 85 F1 | 	sub	objptr, ##1080
08cd8     F2 28 02 F1 | 	add	local02, objptr
08cdc     04 28 06 F1 | 	add	local02, #4
08ce0     14 29 02 FB | 	rdlong	local02, local02
08ce4     FE 29 0E F2 | 	cmp	local02, #510 wz
08ce8     35 00 00 FF 
08cec     2C E4 85 F1 | 	sub	objptr, ##27180
08cf0     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08cf4                 | LR__0821
08cf4                 | ' return i,err
08cf4     13 FB 01 F6 | 	mov	result1, local01
08cf8     00 FC 05 F6 | 	mov	result2, #0
08cfc     A7 F0 03 F6 | 	mov	ptra, fp
08d00     B2 00 A0 FD | 	call	#popregs_
08d04                 | _compile_fun_varp_ret
08d04     2D 00 64 FD | 	ret
08d08                 | 
08d08                 | ' 
08d08                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08d08                 | ' 
08d08                 | ' function compile_read() as ulong,ulong 
08d08                 | _compile_read
08d08     04 4A 05 F6 | 	mov	COUNT_, #4
08d0c     A8 00 A0 FD | 	call	#pushregs_
08d10     00 26 06 F6 | 	mov	local01, #0
08d14                 | ' 
08d14                 | ' i=0 : err=0
08d14                 | ' if lparts(ct).token<>token_end then
08d14     37 00 00 FF 
08d18     64 E4 05 F1 | 	add	objptr, ##28260
08d1c     F2 28 02 FB | 	rdlong	local02, objptr
08d20     03 28 66 F0 | 	shl	local02, #3
08d24     02 00 00 FF 
08d28     38 E4 85 F1 | 	sub	objptr, ##1080
08d2c     F2 28 02 F1 | 	add	local02, objptr
08d30     04 28 06 F1 | 	add	local02, #4
08d34     14 29 02 FB | 	rdlong	local02, local02
08d38     FE 29 0E F2 | 	cmp	local02, #510 wz
08d3c     35 00 00 FF 
08d40     2C E4 85 F1 | 	sub	objptr, ##27180
08d44     98 00 90 AD |  if_e	jmp	#LR__0831
08d48                 | '   do
08d48                 | LR__0830
08d48     B8 2F B0 FD | 	call	#_getaddr
08d4c     FD 2A 02 F6 | 	mov	local03, result1
08d50     37 00 00 FF 
08d54     64 E4 05 F1 | 	add	objptr, ##28260
08d58     F2 28 02 FB | 	rdlong	local02, objptr
08d5c     01 28 06 F1 | 	add	local02, #1
08d60     F2 28 62 FC | 	wrlong	local02, objptr
08d64     01 26 06 F1 | 	add	local01, #1
08d68                 | '     err=getaddr() :ct+=1
08d68                 | '     i+=1 
08d68                 | '     if lparts(ct).token=token_comma then ct+=1 
08d68     03 28 66 F0 | 	shl	local02, #3
08d6c     02 00 00 FF 
08d70     38 E4 85 F1 | 	sub	objptr, ##1080
08d74     F2 28 02 F1 | 	add	local02, objptr
08d78     04 28 06 F1 | 	add	local02, #4
08d7c     14 29 02 FB | 	rdlong	local02, local02
08d80     11 28 0E F2 | 	cmp	local02, #17 wz
08d84     35 00 00 FF 
08d88     2C E4 85 F1 | 	sub	objptr, ##27180
08d8c     37 00 00 AF 
08d90     64 E4 05 A1 |  if_e	add	objptr, ##28260
08d94     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08d98     01 2C 06 A1 |  if_e	add	local04, #1
08d9c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08da0     37 00 00 AF 
08da4     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08da8                 | '     if lparts(ct).token=token_end then exit loop
08da8     37 00 00 FF 
08dac     64 E4 05 F1 | 	add	objptr, ##28260
08db0     F2 28 02 FB | 	rdlong	local02, objptr
08db4     03 28 66 F0 | 	shl	local02, #3
08db8     02 00 00 FF 
08dbc     38 E4 85 F1 | 	sub	objptr, ##1080
08dc0     F2 28 02 F1 | 	add	local02, objptr
08dc4     04 28 06 F1 | 	add	local02, #4
08dc8     14 29 02 FB | 	rdlong	local02, local02
08dcc     FE 29 0E F2 | 	cmp	local02, #510 wz
08dd0     35 00 00 FF 
08dd4     2C E4 85 F1 | 	sub	objptr, ##27180
08dd8     08 00 90 AD |  if_e	jmp	#LR__0832
08ddc     68 FF 9F FD | 	jmp	#LR__0830
08de0                 | LR__0831
08de0     36 2A 06 F6 | 	mov	local03, #54
08de4                 | LR__0832
08de4                 | ' return i,err
08de4     13 FB 01 F6 | 	mov	result1, local01
08de8     15 FD 01 F6 | 	mov	result2, local03
08dec     A7 F0 03 F6 | 	mov	ptra, fp
08df0     B2 00 A0 FD | 	call	#popregs_
08df4                 | _compile_read_ret
08df4     2D 00 64 FD | 	ret
08df8                 | 
08df8                 | ' 
08df8                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08df8                 | ' 
08df8                 | ' function compile_input() as ulong,ulong 
08df8                 | _compile_input
08df8     0F 4A 05 F6 | 	mov	COUNT_, #15
08dfc     A8 00 A0 FD | 	call	#pushregs_
08e00                 | ' 
08e00                 | ' if lparts(ct).token=token_string then
08e00     37 00 00 FF 
08e04     64 E4 05 F1 | 	add	objptr, ##28260
08e08     F2 16 02 FB | 	rdlong	arg03, objptr
08e0c     03 16 66 F0 | 	shl	arg03, #3
08e10     02 00 00 FF 
08e14     38 E4 85 F1 | 	sub	objptr, ##1080
08e18     F2 16 02 F1 | 	add	arg03, objptr
08e1c     04 16 06 F1 | 	add	arg03, #4
08e20     0B FD 01 FB | 	rdlong	result2, arg03
08e24     01 00 00 FF 
08e28     03 FC 0D F2 | 	cmp	result2, ##515 wz
08e2c     35 00 00 FF 
08e30     2C E4 85 F1 | 	sub	objptr, ##27180
08e34     38 06 90 5D |  if_ne	jmp	#LR__0847
08e38     37 00 00 FF 
08e3c     64 E4 05 F1 | 	add	objptr, ##28260
08e40     F2 14 02 FB | 	rdlong	arg02, objptr
08e44     03 14 66 F0 | 	shl	arg02, #3
08e48     02 00 00 FF 
08e4c     38 E4 85 F1 | 	sub	objptr, ##1080
08e50     F2 14 02 F1 | 	add	arg02, objptr
08e54     0A 13 02 FB | 	rdlong	arg01, arg02
08e58     35 00 00 FF 
08e5c     2C E4 85 F1 | 	sub	objptr, ##27180
08e60     09 2D 02 F6 | 	mov	local04, arg01
08e64     97 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08e68                 | LR__0840
08e68     16 FB C9 FA | 	rdbyte	result1, local04 wz
08e6c     01 2C 06 51 |  if_ne	add	local04, #1
08e70     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08e74                 | LR__0841
08e74     09 2D 82 F1 | 	sub	local04, arg01
08e78     16 FB 01 F6 | 	mov	result1, local04
08e7c     52 00 00 FF 
08e80     48 E5 05 F1 | 	add	objptr, ##42312
08e84     F2 FA 61 FC | 	wrlong	result1, objptr
08e88     58 E4 85 F1 | 	sub	objptr, #88
08e8c     F2 12 02 FB | 	rdlong	arg01, objptr
08e90     FD 12 82 F1 | 	sub	arg01, result1
08e94     04 12 86 F1 | 	sub	arg01, #4
08e98     03 12 26 F5 | 	andn	arg01, #3
08e9c     F2 12 62 FC | 	wrlong	arg01, objptr
08ea0     58 E4 05 F1 | 	add	objptr, #88
08ea4     F2 14 02 FB | 	rdlong	arg02, objptr
08ea8     52 00 00 FF 
08eac     48 E5 85 F1 | 	sub	objptr, ##42312
08eb0     88 BC B1 FD | 	call	#_pslpoke
08eb4                 | '   pslpoke memtop,l
08eb4                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08eb4     01 2E 06 F6 | 	mov	local05, #1
08eb8     52 00 00 FF 
08ebc     48 E5 05 F1 | 	add	objptr, ##42312
08ec0     F2 30 02 FB | 	rdlong	local06, objptr
08ec4     52 00 00 FF 
08ec8     48 E5 85 F1 | 	sub	objptr, ##42312
08ecc     01 30 06 F1 | 	add	local06, #1
08ed0                 | LR__0842
08ed0     18 2F 52 F2 | 	cmps	local05, local06 wc
08ed4     5C 00 90 3D |  if_ae	jmp	#LR__0843
08ed8     52 00 00 FF 
08edc     F0 E4 05 F1 | 	add	objptr, ##42224
08ee0     F2 32 02 FB | 	rdlong	local07, objptr
08ee4     03 32 06 F1 | 	add	local07, #3
08ee8     17 33 02 F1 | 	add	local07, local05
08eec     1B 00 00 FF 
08ef0     8C E4 85 F1 | 	sub	objptr, ##13964
08ef4     F2 14 02 FB | 	rdlong	arg02, objptr
08ef8     03 14 66 F0 | 	shl	arg02, #3
08efc     02 00 00 FF 
08f00     38 E4 85 F1 | 	sub	objptr, ##1080
08f04     F2 14 02 F1 | 	add	arg02, objptr
08f08     0A 13 02 FB | 	rdlong	arg01, arg02
08f0c     17 15 02 F6 | 	mov	arg02, local05
08f10     01 16 06 F6 | 	mov	arg03, #1
08f14     35 00 00 FF 
08f18     2C E4 85 F1 | 	sub	objptr, ##27180
08f1c     6C 16 B2 FD | 	call	#__system__Mid_S
08f20     FD 14 C2 FA | 	rdbyte	arg02, result1
08f24     19 13 02 F6 | 	mov	arg01, local07
08f28     A0 BC B1 FD | 	call	#_pspoke
08f2c     01 2E 06 F1 | 	add	local05, #1
08f30     9C FF 9F FD | 	jmp	#LR__0842
08f34                 | LR__0843
08f34     52 00 00 FF 
08f38     F0 E4 05 F1 | 	add	objptr, ##42224
08f3c     F2 26 02 FB | 	rdlong	local01, objptr
08f40     2B 2A 06 F6 | 	mov	local03, #43
08f44     13 35 02 F6 | 	mov	local08, local01
08f48     14 33 02 F6 | 	mov	local07, local02
08f4c     15 37 02 F6 | 	mov	local09, local03
08f50     08 00 00 FF 
08f54     54 E4 85 F1 | 	sub	objptr, ##4180
08f58     F2 30 02 FB | 	rdlong	local06, objptr
08f5c     18 2F 02 F6 | 	mov	local05, local06
08f60     01 2E 66 F0 | 	shl	local05, #1
08f64     18 2F 02 F1 | 	add	local05, local06
08f68     02 2E 66 F0 | 	shl	local05, #2
08f6c     03 00 00 FF 
08f70     00 E4 85 F1 | 	sub	objptr, ##1536
08f74     F2 2E 02 F1 | 	add	local05, objptr
08f78     17 35 62 FC | 	wrlong	local08, local05
08f7c     03 00 00 FF 
08f80     00 E4 05 F1 | 	add	objptr, ##1536
08f84     F2 34 02 FB | 	rdlong	local08, objptr
08f88     1A 31 02 F6 | 	mov	local06, local08
08f8c     01 30 66 F0 | 	shl	local06, #1
08f90     1A 31 02 F1 | 	add	local06, local08
08f94     02 30 66 F0 | 	shl	local06, #2
08f98     03 00 00 FF 
08f9c     00 E4 85 F1 | 	sub	objptr, ##1536
08fa0     F2 30 02 F1 | 	add	local06, objptr
08fa4     04 30 06 F1 | 	add	local06, #4
08fa8     18 33 62 FC | 	wrlong	local07, local06
08fac     03 00 00 FF 
08fb0     00 E4 05 F1 | 	add	objptr, ##1536
08fb4     F2 34 02 FB | 	rdlong	local08, objptr
08fb8     1A 33 02 F6 | 	mov	local07, local08
08fbc     01 32 66 F0 | 	shl	local07, #1
08fc0     1A 33 02 F1 | 	add	local07, local08
08fc4     02 32 66 F0 | 	shl	local07, #2
08fc8     03 00 00 FF 
08fcc     00 E4 85 F1 | 	sub	objptr, ##1536
08fd0     F2 32 02 F1 | 	add	local07, objptr
08fd4     08 32 06 F1 | 	add	local07, #8
08fd8     19 37 62 FC | 	wrlong	local09, local07
08fdc     03 00 00 FF 
08fe0     00 E4 05 F1 | 	add	objptr, ##1536
08fe4     F2 34 02 FB | 	rdlong	local08, objptr
08fe8     01 34 06 F1 | 	add	local08, #1
08fec     F2 34 62 FC | 	wrlong	local08, objptr
08ff0     13 00 00 FF 
08ff4     38 E4 85 F1 | 	sub	objptr, ##9784
08ff8     F2 34 02 FB | 	rdlong	local08, objptr
08ffc     01 34 06 F1 | 	add	local08, #1
09000     F2 34 62 FC | 	wrlong	local08, objptr
09004                 | '   t1.result.uresult=memtop
09004                 | '   t1.result_type=result_string2  
09004                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
09004                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09004     03 34 66 F0 | 	shl	local08, #3
09008     02 00 00 FF 
0900c     38 E4 85 F1 | 	sub	objptr, ##1080
09010     F2 34 02 F1 | 	add	local08, objptr
09014     04 34 06 F1 | 	add	local08, #4
09018     1A 35 02 FB | 	rdlong	local08, local08
0901c     11 34 0E F2 | 	cmp	local08, #17 wz
09020     35 00 00 FF 
09024     2C E4 85 F1 | 	sub	objptr, ##27180
09028     60 01 90 5D |  if_ne	jmp	#LR__0844
0902c     21 2A 06 F6 | 	mov	local03, #33
09030     13 35 02 F6 | 	mov	local08, local01
09034     14 33 02 F6 | 	mov	local07, local02
09038     15 39 02 F6 | 	mov	local10, local03
0903c     4A 00 00 FF 
09040     9C E4 05 F1 | 	add	objptr, ##38044
09044     F2 3A 02 FB | 	rdlong	local11, objptr
09048     1D 3D 02 F6 | 	mov	local12, local11
0904c     01 3C 66 F0 | 	shl	local12, #1
09050     1D 3D 02 F1 | 	add	local12, local11
09054     02 3C 66 F0 | 	shl	local12, #2
09058     03 00 00 FF 
0905c     00 E4 85 F1 | 	sub	objptr, ##1536
09060     F2 3C 02 F1 | 	add	local12, objptr
09064     1E 35 62 FC | 	wrlong	local08, local12
09068     03 00 00 FF 
0906c     00 E4 05 F1 | 	add	objptr, ##1536
09070     F2 3E 02 FB | 	rdlong	local13, objptr
09074     1F 35 02 F6 | 	mov	local08, local13
09078     01 34 66 F0 | 	shl	local08, #1
0907c     1F 35 02 F1 | 	add	local08, local13
09080     02 34 66 F0 | 	shl	local08, #2
09084     03 00 00 FF 
09088     00 E4 85 F1 | 	sub	objptr, ##1536
0908c     F2 34 02 F1 | 	add	local08, objptr
09090     04 34 06 F1 | 	add	local08, #4
09094     1A 33 62 FC | 	wrlong	local07, local08
09098     03 00 00 FF 
0909c     00 E4 05 F1 | 	add	objptr, ##1536
090a0     F2 34 02 FB | 	rdlong	local08, objptr
090a4     1A 41 02 F6 | 	mov	local14, local08
090a8     01 40 66 F0 | 	shl	local14, #1
090ac     1A 41 02 F1 | 	add	local14, local08
090b0     02 40 66 F0 | 	shl	local14, #2
090b4     03 00 00 FF 
090b8     00 E4 85 F1 | 	sub	objptr, ##1536
090bc     F2 40 02 F1 | 	add	local14, objptr
090c0     08 40 06 F1 | 	add	local14, #8
090c4     20 39 62 FC | 	wrlong	local10, local14
090c8     03 00 00 FF 
090cc     00 E4 05 F1 | 	add	objptr, ##1536
090d0     F2 34 02 FB | 	rdlong	local08, objptr
090d4     01 34 06 F1 | 	add	local08, #1
090d8     F2 34 62 FC | 	wrlong	local08, objptr
090dc     44 2A 06 F6 | 	mov	local03, #68
090e0     13 35 02 F6 | 	mov	local08, local01
090e4     14 33 02 F6 | 	mov	local07, local02
090e8     15 39 02 F6 | 	mov	local10, local03
090ec     F2 40 02 FB | 	rdlong	local14, objptr
090f0     20 3F 02 F6 | 	mov	local13, local14
090f4     01 3E 66 F0 | 	shl	local13, #1
090f8     20 3F 02 F1 | 	add	local13, local14
090fc     02 3E 66 F0 | 	shl	local13, #2
09100     03 00 00 FF 
09104     00 E4 85 F1 | 	sub	objptr, ##1536
09108     F2 3E 02 F1 | 	add	local13, objptr
0910c     1F 35 62 FC | 	wrlong	local08, local13
09110     03 00 00 FF 
09114     00 E4 05 F1 | 	add	objptr, ##1536
09118     F2 40 02 FB | 	rdlong	local14, objptr
0911c     20 3F 02 F6 | 	mov	local13, local14
09120     01 3E 66 F0 | 	shl	local13, #1
09124     20 3F 02 F1 | 	add	local13, local14
09128     02 3E 66 F0 | 	shl	local13, #2
0912c     03 00 00 FF 
09130     00 E4 85 F1 | 	sub	objptr, ##1536
09134     F2 3E 02 F1 | 	add	local13, objptr
09138     04 3E 06 F1 | 	add	local13, #4
0913c     1F 33 62 FC | 	wrlong	local07, local13
09140     03 00 00 FF 
09144     00 E4 05 F1 | 	add	objptr, ##1536
09148     F2 3E 02 FB | 	rdlong	local13, objptr
0914c     1F 41 02 F6 | 	mov	local14, local13
09150     01 40 66 F0 | 	shl	local14, #1
09154     1F 41 02 F1 | 	add	local14, local13
09158     02 40 66 F0 | 	shl	local14, #2
0915c     03 00 00 FF 
09160     00 E4 85 F1 | 	sub	objptr, ##1536
09164     F2 40 02 F1 | 	add	local14, objptr
09168     08 40 06 F1 | 	add	local14, #8
0916c     20 39 62 FC | 	wrlong	local10, local14
09170     03 00 00 FF 
09174     00 E4 05 F1 | 	add	objptr, ##1536
09178     F2 34 02 FB | 	rdlong	local08, objptr
0917c     01 34 06 F1 | 	add	local08, #1
09180     F2 34 62 FC | 	wrlong	local08, objptr
09184     4A 00 00 FF 
09188     9C E4 85 F1 | 	sub	objptr, ##38044
0918c                 | LR__0844
0918c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0918c     37 00 00 FF 
09190     64 E4 05 F1 | 	add	objptr, ##28260
09194     F2 34 02 FB | 	rdlong	local08, objptr
09198     03 34 66 F0 | 	shl	local08, #3
0919c     02 00 00 FF 
091a0     38 E4 85 F1 | 	sub	objptr, ##1080
091a4     F2 34 02 F1 | 	add	local08, objptr
091a8     04 34 06 F1 | 	add	local08, #4
091ac     1A 41 02 FB | 	rdlong	local14, local08
091b0     12 40 0E F2 | 	cmp	local14, #18 wz
091b4     35 00 00 FF 
091b8     2C E4 85 F1 | 	sub	objptr, ##27180
091bc     60 01 90 5D |  if_ne	jmp	#LR__0845
091c0     22 2A 06 F6 | 	mov	local03, #34
091c4     13 35 02 F6 | 	mov	local08, local01
091c8     14 33 02 F6 | 	mov	local07, local02
091cc     15 39 02 F6 | 	mov	local10, local03
091d0     4A 00 00 FF 
091d4     9C E4 05 F1 | 	add	objptr, ##38044
091d8     F2 40 02 FB | 	rdlong	local14, objptr
091dc     20 3F 02 F6 | 	mov	local13, local14
091e0     01 3E 66 F0 | 	shl	local13, #1
091e4     20 3F 02 F1 | 	add	local13, local14
091e8     02 3E 66 F0 | 	shl	local13, #2
091ec     03 00 00 FF 
091f0     00 E4 85 F1 | 	sub	objptr, ##1536
091f4     F2 3E 02 F1 | 	add	local13, objptr
091f8     1F 35 62 FC | 	wrlong	local08, local13
091fc     03 00 00 FF 
09200     00 E4 05 F1 | 	add	objptr, ##1536
09204     F2 40 02 FB | 	rdlong	local14, objptr
09208     20 35 02 F6 | 	mov	local08, local14
0920c     01 34 66 F0 | 	shl	local08, #1
09210     20 35 02 F1 | 	add	local08, local14
09214     02 34 66 F0 | 	shl	local08, #2
09218     03 00 00 FF 
0921c     00 E4 85 F1 | 	sub	objptr, ##1536
09220     F2 34 02 F1 | 	add	local08, objptr
09224     04 34 06 F1 | 	add	local08, #4
09228     1A 33 62 FC | 	wrlong	local07, local08
0922c     03 00 00 FF 
09230     00 E4 05 F1 | 	add	objptr, ##1536
09234     F2 34 02 FB | 	rdlong	local08, objptr
09238     1A 41 02 F6 | 	mov	local14, local08
0923c     01 40 66 F0 | 	shl	local14, #1
09240     1A 41 02 F1 | 	add	local14, local08
09244     02 40 66 F0 | 	shl	local14, #2
09248     03 00 00 FF 
0924c     00 E4 85 F1 | 	sub	objptr, ##1536
09250     F2 40 02 F1 | 	add	local14, objptr
09254     08 40 06 F1 | 	add	local14, #8
09258     20 39 62 FC | 	wrlong	local10, local14
0925c     03 00 00 FF 
09260     00 E4 05 F1 | 	add	objptr, ##1536
09264     F2 34 02 FB | 	rdlong	local08, objptr
09268     01 34 06 F1 | 	add	local08, #1
0926c     F2 34 62 FC | 	wrlong	local08, objptr
09270     44 2A 06 F6 | 	mov	local03, #68
09274     13 35 02 F6 | 	mov	local08, local01
09278     14 33 02 F6 | 	mov	local07, local02
0927c     15 39 02 F6 | 	mov	local10, local03
09280     F2 40 02 FB | 	rdlong	local14, objptr
09284     20 3F 02 F6 | 	mov	local13, local14
09288     01 3E 66 F0 | 	shl	local13, #1
0928c     20 3F 02 F1 | 	add	local13, local14
09290     02 3E 66 F0 | 	shl	local13, #2
09294     03 00 00 FF 
09298     00 E4 85 F1 | 	sub	objptr, ##1536
0929c     F2 3E 02 F1 | 	add	local13, objptr
092a0     1F 35 62 FC | 	wrlong	local08, local13
092a4     03 00 00 FF 
092a8     00 E4 05 F1 | 	add	objptr, ##1536
092ac     F2 40 02 FB | 	rdlong	local14, objptr
092b0     20 3F 02 F6 | 	mov	local13, local14
092b4     01 3E 66 F0 | 	shl	local13, #1
092b8     20 3F 02 F1 | 	add	local13, local14
092bc     02 3E 66 F0 | 	shl	local13, #2
092c0     03 00 00 FF 
092c4     00 E4 85 F1 | 	sub	objptr, ##1536
092c8     F2 3E 02 F1 | 	add	local13, objptr
092cc     04 3E 06 F1 | 	add	local13, #4
092d0     1F 33 62 FC | 	wrlong	local07, local13
092d4     03 00 00 FF 
092d8     00 E4 05 F1 | 	add	objptr, ##1536
092dc     F2 3E 02 FB | 	rdlong	local13, objptr
092e0     1F 41 02 F6 | 	mov	local14, local13
092e4     01 40 66 F0 | 	shl	local14, #1
092e8     1F 41 02 F1 | 	add	local14, local13
092ec     02 40 66 F0 | 	shl	local14, #2
092f0     03 00 00 FF 
092f4     00 E4 85 F1 | 	sub	objptr, ##1536
092f8     F2 40 02 F1 | 	add	local14, objptr
092fc     08 40 06 F1 | 	add	local14, #8
09300     20 39 62 FC | 	wrlong	local10, local14
09304     03 00 00 FF 
09308     00 E4 05 F1 | 	add	objptr, ##1536
0930c     F2 34 02 FB | 	rdlong	local08, objptr
09310     01 34 06 F1 | 	add	local08, #1
09314     F2 34 62 FC | 	wrlong	local08, objptr
09318     4A 00 00 FF 
0931c     9C E4 85 F1 | 	sub	objptr, ##38044
09320                 | LR__0845
09320                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
09320     37 00 00 FF 
09324     64 E4 05 F1 | 	add	objptr, ##28260
09328     F2 34 02 FB | 	rdlong	local08, objptr
0932c     03 34 66 F0 | 	shl	local08, #3
09330     02 00 00 FF 
09334     38 E4 85 F1 | 	sub	objptr, ##1080
09338     F2 34 02 F1 | 	add	local08, objptr
0933c     04 34 06 F1 | 	add	local08, #4
09340     1A 41 02 FB | 	rdlong	local14, local08
09344     12 40 0E F2 | 	cmp	local14, #18 wz
09348     35 00 00 FF 
0934c     2C E4 85 F1 | 	sub	objptr, ##27180
09350     00 01 90 AD |  if_e	jmp	#LR__0846
09354     37 00 00 FF 
09358     64 E4 05 F1 | 	add	objptr, ##28260
0935c     F2 34 02 FB | 	rdlong	local08, objptr
09360     03 34 66 F0 | 	shl	local08, #3
09364     02 00 00 FF 
09368     38 E4 85 F1 | 	sub	objptr, ##1080
0936c     F2 34 02 F1 | 	add	local08, objptr
09370     04 34 06 F1 | 	add	local08, #4
09374     1A 41 02 FB | 	rdlong	local14, local08
09378     11 40 0E F2 | 	cmp	local14, #17 wz
0937c     35 00 00 FF 
09380     2C E4 85 F1 | 	sub	objptr, ##27180
09384     CC 00 90 AD |  if_e	jmp	#LR__0846
09388     44 2A 06 F6 | 	mov	local03, #68
0938c     13 35 02 F6 | 	mov	local08, local01
09390     14 33 02 F6 | 	mov	local07, local02
09394     15 39 02 F6 | 	mov	local10, local03
09398     4A 00 00 FF 
0939c     9C E4 05 F1 | 	add	objptr, ##38044
093a0     F2 40 02 FB | 	rdlong	local14, objptr
093a4     20 3F 02 F6 | 	mov	local13, local14
093a8     01 3E 66 F0 | 	shl	local13, #1
093ac     20 3F 02 F1 | 	add	local13, local14
093b0     02 3E 66 F0 | 	shl	local13, #2
093b4     03 00 00 FF 
093b8     00 E4 85 F1 | 	sub	objptr, ##1536
093bc     F2 3E 02 F1 | 	add	local13, objptr
093c0     1F 35 62 FC | 	wrlong	local08, local13
093c4     03 00 00 FF 
093c8     00 E4 05 F1 | 	add	objptr, ##1536
093cc     F2 40 02 FB | 	rdlong	local14, objptr
093d0     20 3F 02 F6 | 	mov	local13, local14
093d4     01 3E 66 F0 | 	shl	local13, #1
093d8     20 3F 02 F1 | 	add	local13, local14
093dc     02 3E 66 F0 | 	shl	local13, #2
093e0     03 00 00 FF 
093e4     00 E4 85 F1 | 	sub	objptr, ##1536
093e8     F2 3E 02 F1 | 	add	local13, objptr
093ec     04 3E 06 F1 | 	add	local13, #4
093f0     1F 33 62 FC | 	wrlong	local07, local13
093f4     03 00 00 FF 
093f8     00 E4 05 F1 | 	add	objptr, ##1536
093fc     F2 3E 02 FB | 	rdlong	local13, objptr
09400     1F 41 02 F6 | 	mov	local14, local13
09404     01 40 66 F0 | 	shl	local14, #1
09408     1F 41 02 F1 | 	add	local14, local13
0940c     02 40 66 F0 | 	shl	local14, #2
09410     03 00 00 FF 
09414     00 E4 85 F1 | 	sub	objptr, ##1536
09418     F2 40 02 F1 | 	add	local14, objptr
0941c     08 40 06 F1 | 	add	local14, #8
09420     20 39 62 FC | 	wrlong	local10, local14
09424     03 00 00 FF 
09428     00 E4 05 F1 | 	add	objptr, ##1536
0942c     F2 34 02 FB | 	rdlong	local08, objptr
09430     01 34 06 F1 | 	add	local08, #1
09434     F2 34 62 FC | 	wrlong	local08, objptr
09438     13 00 00 FF 
0943c     38 E4 85 F1 | 	sub	objptr, ##9784
09440     F2 34 02 FB | 	rdlong	local08, objptr
09444     01 34 86 F1 | 	sub	local08, #1
09448     F2 34 62 FC | 	wrlong	local08, objptr
0944c     37 00 00 FF 
09450     64 E4 85 F1 | 	sub	objptr, ##28260
09454                 | LR__0846
09454     37 00 00 FF 
09458     64 E4 05 F1 | 	add	objptr, ##28260
0945c     F2 34 02 FB | 	rdlong	local08, objptr
09460     01 34 06 F1 | 	add	local08, #1
09464     F2 34 62 FC | 	wrlong	local08, objptr
09468     37 00 00 FF 
0946c     64 E4 85 F1 | 	sub	objptr, ##28260
09470                 | LR__0847
09470     00 2E 06 F6 | 	mov	local05, #0
09474                 | ' i=0 : err=0
09474                 | ' if lparts(ct).token<>token_end then
09474     37 00 00 FF 
09478     64 E4 05 F1 | 	add	objptr, ##28260
0947c     F2 40 02 FB | 	rdlong	local14, objptr
09480     03 40 66 F0 | 	shl	local14, #3
09484     02 00 00 FF 
09488     38 E4 85 F1 | 	sub	objptr, ##1080
0948c     F2 40 02 F1 | 	add	local14, objptr
09490     04 40 06 F1 | 	add	local14, #4
09494     20 41 02 FB | 	rdlong	local14, local14
09498     FE 41 0E F2 | 	cmp	local14, #510 wz
0949c     35 00 00 FF 
094a0     2C E4 85 F1 | 	sub	objptr, ##27180
094a4     98 00 90 AD |  if_e	jmp	#LR__0849
094a8                 | '   do
094a8                 | LR__0848
094a8     58 28 B0 FD | 	call	#_getaddr
094ac     FD 42 02 F6 | 	mov	local15, result1
094b0     37 00 00 FF 
094b4     64 E4 05 F1 | 	add	objptr, ##28260
094b8     F2 40 02 FB | 	rdlong	local14, objptr
094bc     01 40 06 F1 | 	add	local14, #1
094c0     F2 40 62 FC | 	wrlong	local14, objptr
094c4     01 2E 06 F1 | 	add	local05, #1
094c8                 | '     err=getaddr() :ct+=1
094c8                 | '     i+=1 
094c8                 | '     if lparts(ct).token=token_comma then ct+=1 
094c8     03 40 66 F0 | 	shl	local14, #3
094cc     02 00 00 FF 
094d0     38 E4 85 F1 | 	sub	objptr, ##1080
094d4     F2 40 02 F1 | 	add	local14, objptr
094d8     04 40 06 F1 | 	add	local14, #4
094dc     20 41 02 FB | 	rdlong	local14, local14
094e0     11 40 0E F2 | 	cmp	local14, #17 wz
094e4     35 00 00 FF 
094e8     2C E4 85 F1 | 	sub	objptr, ##27180
094ec     37 00 00 AF 
094f0     64 E4 05 A1 |  if_e	add	objptr, ##28260
094f4     F2 34 02 AB |  if_e	rdlong	local08, objptr
094f8     01 34 06 A1 |  if_e	add	local08, #1
094fc     F2 34 62 AC |  if_e	wrlong	local08, objptr
09500     37 00 00 AF 
09504     64 E4 85 A1 |  if_e	sub	objptr, ##28260
09508                 | '     if lparts(ct).token=token_end then exit loop
09508     37 00 00 FF 
0950c     64 E4 05 F1 | 	add	objptr, ##28260
09510     F2 40 02 FB | 	rdlong	local14, objptr
09514     03 40 66 F0 | 	shl	local14, #3
09518     02 00 00 FF 
0951c     38 E4 85 F1 | 	sub	objptr, ##1080
09520     F2 40 02 F1 | 	add	local14, objptr
09524     04 40 06 F1 | 	add	local14, #4
09528     20 41 02 FB | 	rdlong	local14, local14
0952c     FE 41 0E F2 | 	cmp	local14, #510 wz
09530     35 00 00 FF 
09534     2C E4 85 F1 | 	sub	objptr, ##27180
09538     08 00 90 AD |  if_e	jmp	#LR__0850
0953c     68 FF 9F FD | 	jmp	#LR__0848
09540                 | LR__0849
09540     36 42 06 F6 | 	mov	local15, #54
09544                 | LR__0850
09544                 | ' return i,err
09544     17 FB 01 F6 | 	mov	result1, local05
09548     21 FD 01 F6 | 	mov	result2, local15
0954c     A7 F0 03 F6 | 	mov	ptra, fp
09550     B2 00 A0 FD | 	call	#popregs_
09554                 | _compile_input_ret
09554     2D 00 64 FD | 	ret
09558                 | 
09558                 | ' 
09558                 | ' '----- compile assign to an array element
09558                 | ' 
09558                 | ' function compile_array_assign() as ulong 
09558                 | _compile_array_assign
09558     0B 4A 05 F6 | 	mov	COUNT_, #11
0955c     A8 00 A0 FD | 	call	#pushregs_
09560     00 2C 06 F6 | 	mov	local04, #0
09564     00 2E 06 F6 | 	mov	local05, #0
09568     37 00 00 FF 
0956c     64 E4 05 F1 | 	add	objptr, ##28260
09570     F2 30 02 FB | 	rdlong	local06, objptr
09574     18 FB 01 F6 | 	mov	result1, local06
09578     01 FA 85 F1 | 	sub	result1, #1
0957c     03 FA 65 F0 | 	shl	result1, #3
09580     02 00 00 FF 
09584     38 E4 85 F1 | 	sub	objptr, ##1080
09588     F2 FA 01 F1 | 	add	result1, objptr
0958c     FD 32 02 FB | 	rdlong	local07, result1
09590                 | ' numpar=0 : err=0
09590                 | ' varname$=lparts(ct-1).part$
09590                 | ' if lparts(ct).token=token_lpar then
09590     03 30 66 F0 | 	shl	local06, #3
09594     F2 30 02 F1 | 	add	local06, objptr
09598     04 30 06 F1 | 	add	local06, #4
0959c     18 31 02 FB | 	rdlong	local06, local06
095a0     15 30 0E F2 | 	cmp	local06, #21 wz
095a4     35 00 00 FF 
095a8     2C E4 85 F1 | 	sub	objptr, ##27180
095ac     F4 01 90 5D |  if_ne	jmp	#LR__0864
095b0     37 00 00 FF 
095b4     64 E4 05 F1 | 	add	objptr, ##28260
095b8     F2 34 02 FB | 	rdlong	local08, objptr
095bc     01 34 06 F1 | 	add	local08, #1
095c0     F2 34 62 FC | 	wrlong	local08, objptr
095c4     37 00 00 FF 
095c8     64 E4 85 F1 | 	sub	objptr, ##28260
095cc                 | '   ct+=1 											' omit this lpar, this is for expr list
095cc                 | '   do
095cc                 | LR__0860
095cc     C8 2A B0 FD | 	call	#_expr
095d0     37 00 00 FF 
095d4     64 E4 05 F1 | 	add	objptr, ##28260
095d8     F2 30 02 FB | 	rdlong	local06, objptr
095dc     01 30 06 F1 | 	add	local06, #1
095e0     F2 30 62 FC | 	wrlong	local06, objptr
095e4     01 2C 06 F1 | 	add	local04, #1
095e8     01 30 86 F1 | 	sub	local06, #1
095ec     03 30 66 F0 | 	shl	local06, #3
095f0     02 00 00 FF 
095f4     38 E4 85 F1 | 	sub	objptr, ##1080
095f8     F2 30 02 F1 | 	add	local06, objptr
095fc     04 30 06 F1 | 	add	local06, #4
09600     18 35 02 FB | 	rdlong	local08, local06
09604     14 34 0E F2 | 	cmp	local08, #20 wz
09608     35 00 00 FF 
0960c     2C E4 85 F1 | 	sub	objptr, ##27180
09610     34 00 90 AD |  if_e	jmp	#LR__0861
09614     37 00 00 FF 
09618     64 E4 05 F1 | 	add	objptr, ##28260
0961c     F2 34 02 FB | 	rdlong	local08, objptr
09620     03 34 66 F0 | 	shl	local08, #3
09624     02 00 00 FF 
09628     38 E4 85 F1 | 	sub	objptr, ##1080
0962c     F2 34 02 F1 | 	add	local08, objptr
09630     04 34 06 F1 | 	add	local08, #4
09634     1A 35 02 FB | 	rdlong	local08, local08
09638     FE 35 0E F2 | 	cmp	local08, #510 wz
0963c     35 00 00 FF 
09640     2C E4 85 F1 | 	sub	objptr, ##27180
09644     84 FF 9F 5D |  if_ne	jmp	#LR__0860
09648                 | LR__0861
09648     37 00 00 FF 
0964c     64 E4 05 F1 | 	add	objptr, ##28260
09650     F2 34 02 FB | 	rdlong	local08, objptr
09654     01 34 06 F1 | 	add	local08, #1
09658     F2 34 62 FC | 	wrlong	local08, objptr
0965c     37 00 00 FF 
09660     64 E4 85 F1 | 	sub	objptr, ##28260
09664     30 2A B0 FD | 	call	#_expr
09668     01 36 66 F6 | 	neg	local09, #1
0966c     00 38 06 F6 | 	mov	local10, #0
09670                 | '   ct+=1 : expr()
09670                 | '   j=-1 : i=0 
09670                 | '   do 
09670                 | LR__0862
09670                 | '     if variables(i).name=varname$ then j=i: exit loop
09670     1C 31 02 F6 | 	mov	local06, local10
09674     04 30 66 F0 | 	shl	local06, #4
09678     15 00 00 FF 
0967c     18 E4 05 F1 | 	add	objptr, ##10776
09680     F2 30 02 F1 | 	add	local06, objptr
09684     18 13 02 FB | 	rdlong	arg01, local06
09688     19 15 02 F6 | 	mov	arg02, local07
0968c     15 00 00 FF 
09690     18 E4 85 F1 | 	sub	objptr, ##10776
09694     84 ED B1 FD | 	call	#__system___string_cmp
09698     00 FA 0D F2 | 	cmp	result1, #0 wz
0969c     1C 37 02 A6 |  if_e	mov	local09, local10
096a0     20 00 90 AD |  if_e	jmp	#LR__0863
096a4     01 38 06 F1 | 	add	local10, #1
096a8     35 00 00 FF 
096ac     28 E4 05 F1 | 	add	objptr, ##27176
096b0     F2 34 02 FB | 	rdlong	local08, objptr
096b4     35 00 00 FF 
096b8     28 E4 85 F1 | 	sub	objptr, ##27176
096bc     1A 39 5A F2 | 	cmps	local10, local08 wcz
096c0     AC FF 9F ED |  if_be	jmp	#LR__0862
096c4                 | LR__0863
096c4     1B 27 02 F6 | 	mov	local01, local09
096c8     16 29 02 F6 | 	mov	local02, local04
096cc     17 2A 06 F6 | 	mov	local03, #23
096d0     13 35 02 F6 | 	mov	local08, local01
096d4     14 3B 02 F6 | 	mov	local11, local02
096d8     15 33 02 F6 | 	mov	local07, local03
096dc     4A 00 00 FF 
096e0     9C E4 05 F1 | 	add	objptr, ##38044
096e4     F2 26 02 FB | 	rdlong	local01, objptr
096e8     13 37 02 F6 | 	mov	local09, local01
096ec     01 36 66 F0 | 	shl	local09, #1
096f0     13 37 02 F1 | 	add	local09, local01
096f4     02 36 66 F0 | 	shl	local09, #2
096f8     03 00 00 FF 
096fc     00 E4 85 F1 | 	sub	objptr, ##1536
09700     F2 36 02 F1 | 	add	local09, objptr
09704     1B 35 62 FC | 	wrlong	local08, local09
09708     03 00 00 FF 
0970c     00 E4 05 F1 | 	add	objptr, ##1536
09710     F2 26 02 FB | 	rdlong	local01, objptr
09714     13 37 02 F6 | 	mov	local09, local01
09718     01 36 66 F0 | 	shl	local09, #1
0971c     13 37 02 F1 | 	add	local09, local01
09720     02 36 66 F0 | 	shl	local09, #2
09724     03 00 00 FF 
09728     00 E4 85 F1 | 	sub	objptr, ##1536
0972c     F2 36 02 F1 | 	add	local09, objptr
09730     04 36 06 F1 | 	add	local09, #4
09734     1B 3B 62 FC | 	wrlong	local11, local09
09738     03 00 00 FF 
0973c     00 E4 05 F1 | 	add	objptr, ##1536
09740     F2 3A 02 FB | 	rdlong	local11, objptr
09744     1D 27 02 F6 | 	mov	local01, local11
09748     01 26 66 F0 | 	shl	local01, #1
0974c     1D 27 02 F1 | 	add	local01, local11
09750     02 26 66 F0 | 	shl	local01, #2
09754     03 00 00 FF 
09758     00 E4 85 F1 | 	sub	objptr, ##1536
0975c     F2 26 02 F1 | 	add	local01, objptr
09760     08 26 06 F1 | 	add	local01, #8
09764     13 33 62 FC | 	wrlong	local07, local01
09768     03 00 00 FF 
0976c     00 E4 05 F1 | 	add	objptr, ##1536
09770     F2 34 02 FB | 	rdlong	local08, objptr
09774     01 34 06 F1 | 	add	local08, #1
09778     F2 34 62 FC | 	wrlong	local08, objptr
0977c                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
0977c                 | '   if numpar>3 then err=45
0977c     04 2C 16 F2 | 	cmp	local04, #4 wc
09780     2D 2E 06 36 |  if_ae	mov	local05, #45
09784                 | '   if i>varnum then err=20
09784     15 00 00 FF 
09788     74 E4 85 F1 | 	sub	objptr, ##10868
0978c     F2 34 02 FB | 	rdlong	local08, objptr
09790     35 00 00 FF 
09794     28 E4 85 F1 | 	sub	objptr, ##27176
09798     1A 39 5A F2 | 	cmps	local10, local08 wcz
0979c     14 2E 06 16 |  if_a	mov	local05, #20
097a0     04 00 90 FD | 	jmp	#LR__0865
097a4                 | LR__0864
097a4     0E 2E 06 F6 | 	mov	local05, #14
097a8                 | LR__0865
097a8                 | ' return err
097a8     17 FB 01 F6 | 	mov	result1, local05
097ac     A7 F0 03 F6 | 	mov	ptra, fp
097b0     B2 00 A0 FD | 	call	#popregs_
097b4                 | _compile_array_assign_ret
097b4     2D 00 64 FD | 	ret
097b8                 | 
097b8                 | ' 
097b8                 | ' '----- compile print command with its ";" and "," modifiers
097b8                 | ' 
097b8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
097b8                 | _compile_print
097b8     0B 4A 05 F6 | 	mov	COUNT_, #11
097bc     A8 00 A0 FD | 	call	#pushregs_
097c0     00 26 06 F6 | 	mov	local01, #0
097c4     1D 2A 06 F6 | 	mov	local03, #29
097c8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
097c8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
097c8     37 00 00 FF 
097cc     64 E4 05 F1 | 	add	objptr, ##28260
097d0     F2 2C 02 FB | 	rdlong	local04, objptr
097d4     03 2C 66 F0 | 	shl	local04, #3
097d8     02 00 00 FF 
097dc     38 E4 85 F1 | 	sub	objptr, ##1080
097e0     F2 2C 02 F1 | 	add	local04, objptr
097e4     04 2C 06 F1 | 	add	local04, #4
097e8     16 2D 02 FB | 	rdlong	local04, local04
097ec     FE 2D 0E F2 | 	cmp	local04, #510 wz
097f0     35 00 00 FF 
097f4     2C E4 85 F1 | 	sub	objptr, ##27180
097f8     68 01 90 5D |  if_ne	jmp	#LR__0870
097fc     20 2A 06 F6 | 	mov	local03, #32
09800     13 2F 02 F6 | 	mov	local05, local01
09804     14 31 02 F6 | 	mov	local06, local02
09808     15 33 02 F6 | 	mov	local07, local03
0980c     4A 00 00 FF 
09810     9C E4 05 F1 | 	add	objptr, ##38044
09814     F2 34 02 FB | 	rdlong	local08, objptr
09818     1A 37 02 F6 | 	mov	local09, local08
0981c     01 36 66 F0 | 	shl	local09, #1
09820     1A 37 02 F1 | 	add	local09, local08
09824     02 36 66 F0 | 	shl	local09, #2
09828     03 00 00 FF 
0982c     00 E4 85 F1 | 	sub	objptr, ##1536
09830     F2 36 02 F1 | 	add	local09, objptr
09834     1B 2F 62 FC | 	wrlong	local05, local09
09838     03 00 00 FF 
0983c     00 E4 05 F1 | 	add	objptr, ##1536
09840     F2 2E 02 FB | 	rdlong	local05, objptr
09844     17 39 02 F6 | 	mov	local10, local05
09848     01 38 66 F0 | 	shl	local10, #1
0984c     17 39 02 F1 | 	add	local10, local05
09850     02 38 66 F0 | 	shl	local10, #2
09854     03 00 00 FF 
09858     00 E4 85 F1 | 	sub	objptr, ##1536
0985c     F2 38 02 F1 | 	add	local10, objptr
09860     04 38 06 F1 | 	add	local10, #4
09864     1C 31 62 FC | 	wrlong	local06, local10
09868     03 00 00 FF 
0986c     00 E4 05 F1 | 	add	objptr, ##1536
09870     F2 2E 02 FB | 	rdlong	local05, objptr
09874     17 3B 02 F6 | 	mov	local11, local05
09878     01 3A 66 F0 | 	shl	local11, #1
0987c     17 3B 02 F1 | 	add	local11, local05
09880     02 3A 66 F0 | 	shl	local11, #2
09884     03 00 00 FF 
09888     00 E4 85 F1 | 	sub	objptr, ##1536
0988c     F2 3A 02 F1 | 	add	local11, objptr
09890     08 3A 06 F1 | 	add	local11, #8
09894     1D 33 62 FC | 	wrlong	local07, local11
09898     03 00 00 FF 
0989c     00 E4 05 F1 | 	add	objptr, ##1536
098a0     F2 2E 02 FB | 	rdlong	local05, objptr
098a4     01 2E 06 F1 | 	add	local05, #1
098a8     F2 2E 62 FC | 	wrlong	local05, objptr
098ac     44 2A 06 F6 | 	mov	local03, #68
098b0     13 2F 02 F6 | 	mov	local05, local01
098b4     14 31 02 F6 | 	mov	local06, local02
098b8     15 33 02 F6 | 	mov	local07, local03
098bc     F2 34 02 FB | 	rdlong	local08, objptr
098c0     1A 37 02 F6 | 	mov	local09, local08
098c4     01 36 66 F0 | 	shl	local09, #1
098c8     1A 37 02 F1 | 	add	local09, local08
098cc     02 36 66 F0 | 	shl	local09, #2
098d0     03 00 00 FF 
098d4     00 E4 85 F1 | 	sub	objptr, ##1536
098d8     F2 36 02 F1 | 	add	local09, objptr
098dc     1B 2F 62 FC | 	wrlong	local05, local09
098e0     03 00 00 FF 
098e4     00 E4 05 F1 | 	add	objptr, ##1536
098e8     F2 3A 02 FB | 	rdlong	local11, objptr
098ec     1D 39 02 F6 | 	mov	local10, local11
098f0     01 38 66 F0 | 	shl	local10, #1
098f4     1D 39 02 F1 | 	add	local10, local11
098f8     02 38 66 F0 | 	shl	local10, #2
098fc     03 00 00 FF 
09900     00 E4 85 F1 | 	sub	objptr, ##1536
09904     F2 38 02 F1 | 	add	local10, objptr
09908     04 38 06 F1 | 	add	local10, #4
0990c     1C 31 62 FC | 	wrlong	local06, local10
09910     03 00 00 FF 
09914     00 E4 05 F1 | 	add	objptr, ##1536
09918     F2 38 02 FB | 	rdlong	local10, objptr
0991c     1C 3B 02 F6 | 	mov	local11, local10
09920     01 3A 66 F0 | 	shl	local11, #1
09924     1C 3B 02 F1 | 	add	local11, local10
09928     02 3A 66 F0 | 	shl	local11, #2
0992c     03 00 00 FF 
09930     00 E4 85 F1 | 	sub	objptr, ##1536
09934     F2 3A 02 F1 | 	add	local11, objptr
09938     08 3A 06 F1 | 	add	local11, #8
0993c     1D 33 62 FC | 	wrlong	local07, local11
09940     03 00 00 FF 
09944     00 E4 05 F1 | 	add	objptr, ##1536
09948     F2 2E 02 FB | 	rdlong	local05, objptr
0994c     01 2E 06 F1 | 	add	local05, #1
09950     F2 2E 62 FC | 	wrlong	local05, objptr
09954     4A 00 00 FF 
09958     9C E4 85 F1 | 	sub	objptr, ##38044
0995c     00 FA 05 F6 | 	mov	result1, #0
09960     20 05 90 FD | 	jmp	#LR__0877
09964                 | LR__0870
09964                 | ' do
09964                 | LR__0871
09964     30 27 B0 FD | 	call	#_expr
09968                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09968                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09968     37 00 00 FF 
0996c     64 E4 05 F1 | 	add	objptr, ##28260
09970     F2 2C 02 FB | 	rdlong	local04, objptr
09974     03 2C 66 F0 | 	shl	local04, #3
09978     02 00 00 FF 
0997c     38 E4 85 F1 | 	sub	objptr, ##1080
09980     F2 2C 02 F1 | 	add	local04, objptr
09984     04 2C 06 F1 | 	add	local04, #4
09988     16 35 02 FB | 	rdlong	local08, local04
0998c     11 34 0E F2 | 	cmp	local08, #17 wz
09990     35 00 00 FF 
09994     2C E4 85 F1 | 	sub	objptr, ##27180
09998     60 01 90 5D |  if_ne	jmp	#LR__0872
0999c     21 2A 06 F6 | 	mov	local03, #33
099a0     13 2F 02 F6 | 	mov	local05, local01
099a4     14 31 02 F6 | 	mov	local06, local02
099a8     15 33 02 F6 | 	mov	local07, local03
099ac     4A 00 00 FF 
099b0     9C E4 05 F1 | 	add	objptr, ##38044
099b4     F2 34 02 FB | 	rdlong	local08, objptr
099b8     1A 37 02 F6 | 	mov	local09, local08
099bc     01 36 66 F0 | 	shl	local09, #1
099c0     1A 37 02 F1 | 	add	local09, local08
099c4     02 36 66 F0 | 	shl	local09, #2
099c8     03 00 00 FF 
099cc     00 E4 85 F1 | 	sub	objptr, ##1536
099d0     F2 36 02 F1 | 	add	local09, objptr
099d4     1B 2F 62 FC | 	wrlong	local05, local09
099d8     03 00 00 FF 
099dc     00 E4 05 F1 | 	add	objptr, ##1536
099e0     F2 3A 02 FB | 	rdlong	local11, objptr
099e4     1D 39 02 F6 | 	mov	local10, local11
099e8     01 38 66 F0 | 	shl	local10, #1
099ec     1D 39 02 F1 | 	add	local10, local11
099f0     02 38 66 F0 | 	shl	local10, #2
099f4     03 00 00 FF 
099f8     00 E4 85 F1 | 	sub	objptr, ##1536
099fc     F2 38 02 F1 | 	add	local10, objptr
09a00     04 38 06 F1 | 	add	local10, #4
09a04     1C 31 62 FC | 	wrlong	local06, local10
09a08     03 00 00 FF 
09a0c     00 E4 05 F1 | 	add	objptr, ##1536
09a10     F2 2E 02 FB | 	rdlong	local05, objptr
09a14     17 3B 02 F6 | 	mov	local11, local05
09a18     01 3A 66 F0 | 	shl	local11, #1
09a1c     17 3B 02 F1 | 	add	local11, local05
09a20     02 3A 66 F0 | 	shl	local11, #2
09a24     03 00 00 FF 
09a28     00 E4 85 F1 | 	sub	objptr, ##1536
09a2c     F2 3A 02 F1 | 	add	local11, objptr
09a30     08 3A 06 F1 | 	add	local11, #8
09a34     1D 33 62 FC | 	wrlong	local07, local11
09a38     03 00 00 FF 
09a3c     00 E4 05 F1 | 	add	objptr, ##1536
09a40     F2 2E 02 FB | 	rdlong	local05, objptr
09a44     01 2E 06 F1 | 	add	local05, #1
09a48     F2 2E 62 FC | 	wrlong	local05, objptr
09a4c     44 2A 06 F6 | 	mov	local03, #68
09a50     13 2F 02 F6 | 	mov	local05, local01
09a54     14 31 02 F6 | 	mov	local06, local02
09a58     15 33 02 F6 | 	mov	local07, local03
09a5c     F2 34 02 FB | 	rdlong	local08, objptr
09a60     1A 37 02 F6 | 	mov	local09, local08
09a64     01 36 66 F0 | 	shl	local09, #1
09a68     1A 37 02 F1 | 	add	local09, local08
09a6c     02 36 66 F0 | 	shl	local09, #2
09a70     03 00 00 FF 
09a74     00 E4 85 F1 | 	sub	objptr, ##1536
09a78     F2 36 02 F1 | 	add	local09, objptr
09a7c     1B 2F 62 FC | 	wrlong	local05, local09
09a80     03 00 00 FF 
09a84     00 E4 05 F1 | 	add	objptr, ##1536
09a88     F2 3A 02 FB | 	rdlong	local11, objptr
09a8c     1D 39 02 F6 | 	mov	local10, local11
09a90     01 38 66 F0 | 	shl	local10, #1
09a94     1D 39 02 F1 | 	add	local10, local11
09a98     02 38 66 F0 | 	shl	local10, #2
09a9c     03 00 00 FF 
09aa0     00 E4 85 F1 | 	sub	objptr, ##1536
09aa4     F2 38 02 F1 | 	add	local10, objptr
09aa8     04 38 06 F1 | 	add	local10, #4
09aac     1C 31 62 FC | 	wrlong	local06, local10
09ab0     03 00 00 FF 
09ab4     00 E4 05 F1 | 	add	objptr, ##1536
09ab8     F2 38 02 FB | 	rdlong	local10, objptr
09abc     1C 3B 02 F6 | 	mov	local11, local10
09ac0     01 3A 66 F0 | 	shl	local11, #1
09ac4     1C 3B 02 F1 | 	add	local11, local10
09ac8     02 3A 66 F0 | 	shl	local11, #2
09acc     03 00 00 FF 
09ad0     00 E4 85 F1 | 	sub	objptr, ##1536
09ad4     F2 3A 02 F1 | 	add	local11, objptr
09ad8     08 3A 06 F1 | 	add	local11, #8
09adc     1D 33 62 FC | 	wrlong	local07, local11
09ae0     03 00 00 FF 
09ae4     00 E4 05 F1 | 	add	objptr, ##1536
09ae8     F2 2E 02 FB | 	rdlong	local05, objptr
09aec     01 2E 06 F1 | 	add	local05, #1
09af0     F2 2E 62 FC | 	wrlong	local05, objptr
09af4     4A 00 00 FF 
09af8     9C E4 85 F1 | 	sub	objptr, ##38044
09afc                 | LR__0872
09afc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09afc     37 00 00 FF 
09b00     64 E4 05 F1 | 	add	objptr, ##28260
09b04     F2 2C 02 FB | 	rdlong	local04, objptr
09b08     03 2C 66 F0 | 	shl	local04, #3
09b0c     02 00 00 FF 
09b10     38 E4 85 F1 | 	sub	objptr, ##1080
09b14     F2 2C 02 F1 | 	add	local04, objptr
09b18     04 2C 06 F1 | 	add	local04, #4
09b1c     16 35 02 FB | 	rdlong	local08, local04
09b20     12 34 0E F2 | 	cmp	local08, #18 wz
09b24     35 00 00 FF 
09b28     2C E4 85 F1 | 	sub	objptr, ##27180
09b2c     60 01 90 5D |  if_ne	jmp	#LR__0873
09b30     22 2A 06 F6 | 	mov	local03, #34
09b34     13 2F 02 F6 | 	mov	local05, local01
09b38     14 31 02 F6 | 	mov	local06, local02
09b3c     15 33 02 F6 | 	mov	local07, local03
09b40     4A 00 00 FF 
09b44     9C E4 05 F1 | 	add	objptr, ##38044
09b48     F2 34 02 FB | 	rdlong	local08, objptr
09b4c     1A 37 02 F6 | 	mov	local09, local08
09b50     01 36 66 F0 | 	shl	local09, #1
09b54     1A 37 02 F1 | 	add	local09, local08
09b58     02 36 66 F0 | 	shl	local09, #2
09b5c     03 00 00 FF 
09b60     00 E4 85 F1 | 	sub	objptr, ##1536
09b64     F2 36 02 F1 | 	add	local09, objptr
09b68     1B 2F 62 FC | 	wrlong	local05, local09
09b6c     03 00 00 FF 
09b70     00 E4 05 F1 | 	add	objptr, ##1536
09b74     F2 3A 02 FB | 	rdlong	local11, objptr
09b78     1D 39 02 F6 | 	mov	local10, local11
09b7c     01 38 66 F0 | 	shl	local10, #1
09b80     1D 39 02 F1 | 	add	local10, local11
09b84     02 38 66 F0 | 	shl	local10, #2
09b88     03 00 00 FF 
09b8c     00 E4 85 F1 | 	sub	objptr, ##1536
09b90     F2 38 02 F1 | 	add	local10, objptr
09b94     04 38 06 F1 | 	add	local10, #4
09b98     1C 31 62 FC | 	wrlong	local06, local10
09b9c     03 00 00 FF 
09ba0     00 E4 05 F1 | 	add	objptr, ##1536
09ba4     F2 2E 02 FB | 	rdlong	local05, objptr
09ba8     17 3B 02 F6 | 	mov	local11, local05
09bac     01 3A 66 F0 | 	shl	local11, #1
09bb0     17 3B 02 F1 | 	add	local11, local05
09bb4     02 3A 66 F0 | 	shl	local11, #2
09bb8     03 00 00 FF 
09bbc     00 E4 85 F1 | 	sub	objptr, ##1536
09bc0     F2 3A 02 F1 | 	add	local11, objptr
09bc4     08 3A 06 F1 | 	add	local11, #8
09bc8     1D 33 62 FC | 	wrlong	local07, local11
09bcc     03 00 00 FF 
09bd0     00 E4 05 F1 | 	add	objptr, ##1536
09bd4     F2 2E 02 FB | 	rdlong	local05, objptr
09bd8     01 2E 06 F1 | 	add	local05, #1
09bdc     F2 2E 62 FC | 	wrlong	local05, objptr
09be0     44 2A 06 F6 | 	mov	local03, #68
09be4     13 2F 02 F6 | 	mov	local05, local01
09be8     14 31 02 F6 | 	mov	local06, local02
09bec     15 33 02 F6 | 	mov	local07, local03
09bf0     F2 34 02 FB | 	rdlong	local08, objptr
09bf4     1A 37 02 F6 | 	mov	local09, local08
09bf8     01 36 66 F0 | 	shl	local09, #1
09bfc     1A 37 02 F1 | 	add	local09, local08
09c00     02 36 66 F0 | 	shl	local09, #2
09c04     03 00 00 FF 
09c08     00 E4 85 F1 | 	sub	objptr, ##1536
09c0c     F2 36 02 F1 | 	add	local09, objptr
09c10     1B 2F 62 FC | 	wrlong	local05, local09
09c14     03 00 00 FF 
09c18     00 E4 05 F1 | 	add	objptr, ##1536
09c1c     F2 3A 02 FB | 	rdlong	local11, objptr
09c20     1D 39 02 F6 | 	mov	local10, local11
09c24     01 38 66 F0 | 	shl	local10, #1
09c28     1D 39 02 F1 | 	add	local10, local11
09c2c     02 38 66 F0 | 	shl	local10, #2
09c30     03 00 00 FF 
09c34     00 E4 85 F1 | 	sub	objptr, ##1536
09c38     F2 38 02 F1 | 	add	local10, objptr
09c3c     04 38 06 F1 | 	add	local10, #4
09c40     1C 31 62 FC | 	wrlong	local06, local10
09c44     03 00 00 FF 
09c48     00 E4 05 F1 | 	add	objptr, ##1536
09c4c     F2 38 02 FB | 	rdlong	local10, objptr
09c50     1C 3B 02 F6 | 	mov	local11, local10
09c54     01 3A 66 F0 | 	shl	local11, #1
09c58     1C 3B 02 F1 | 	add	local11, local10
09c5c     02 3A 66 F0 | 	shl	local11, #2
09c60     03 00 00 FF 
09c64     00 E4 85 F1 | 	sub	objptr, ##1536
09c68     F2 3A 02 F1 | 	add	local11, objptr
09c6c     08 3A 06 F1 | 	add	local11, #8
09c70     1D 33 62 FC | 	wrlong	local07, local11
09c74     03 00 00 FF 
09c78     00 E4 05 F1 | 	add	objptr, ##1536
09c7c     F2 2E 02 FB | 	rdlong	local05, objptr
09c80     01 2E 06 F1 | 	add	local05, #1
09c84     F2 2E 62 FC | 	wrlong	local05, objptr
09c88     4A 00 00 FF 
09c8c     9C E4 85 F1 | 	sub	objptr, ##38044
09c90                 | LR__0873
09c90                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09c90     37 00 00 FF 
09c94     64 E4 05 F1 | 	add	objptr, ##28260
09c98     F2 2C 02 FB | 	rdlong	local04, objptr
09c9c     03 2C 66 F0 | 	shl	local04, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 2C 02 F1 | 	add	local04, objptr
09cac     04 2C 06 F1 | 	add	local04, #4
09cb0     16 35 02 FB | 	rdlong	local08, local04
09cb4     FE 35 0E F2 | 	cmp	local08, #510 wz
09cb8     35 00 00 FF 
09cbc     2C E4 85 F1 | 	sub	objptr, ##27180
09cc0     B8 00 90 5D |  if_ne	jmp	#LR__0874
09cc4     44 2A 06 F6 | 	mov	local03, #68
09cc8     13 2F 02 F6 | 	mov	local05, local01
09ccc     14 31 02 F6 | 	mov	local06, local02
09cd0     15 33 02 F6 | 	mov	local07, local03
09cd4     4A 00 00 FF 
09cd8     9C E4 05 F1 | 	add	objptr, ##38044
09cdc     F2 34 02 FB | 	rdlong	local08, objptr
09ce0     1A 37 02 F6 | 	mov	local09, local08
09ce4     01 36 66 F0 | 	shl	local09, #1
09ce8     1A 37 02 F1 | 	add	local09, local08
09cec     02 36 66 F0 | 	shl	local09, #2
09cf0     03 00 00 FF 
09cf4     00 E4 85 F1 | 	sub	objptr, ##1536
09cf8     F2 36 02 F1 | 	add	local09, objptr
09cfc     1B 2F 62 FC | 	wrlong	local05, local09
09d00     03 00 00 FF 
09d04     00 E4 05 F1 | 	add	objptr, ##1536
09d08     F2 3A 02 FB | 	rdlong	local11, objptr
09d0c     1D 39 02 F6 | 	mov	local10, local11
09d10     01 38 66 F0 | 	shl	local10, #1
09d14     1D 39 02 F1 | 	add	local10, local11
09d18     02 38 66 F0 | 	shl	local10, #2
09d1c     03 00 00 FF 
09d20     00 E4 85 F1 | 	sub	objptr, ##1536
09d24     F2 38 02 F1 | 	add	local10, objptr
09d28     04 38 06 F1 | 	add	local10, #4
09d2c     1C 31 62 FC | 	wrlong	local06, local10
09d30     03 00 00 FF 
09d34     00 E4 05 F1 | 	add	objptr, ##1536
09d38     F2 38 02 FB | 	rdlong	local10, objptr
09d3c     1C 3B 02 F6 | 	mov	local11, local10
09d40     01 3A 66 F0 | 	shl	local11, #1
09d44     1C 3B 02 F1 | 	add	local11, local10
09d48     02 3A 66 F0 | 	shl	local11, #2
09d4c     03 00 00 FF 
09d50     00 E4 85 F1 | 	sub	objptr, ##1536
09d54     F2 3A 02 F1 | 	add	local11, objptr
09d58     08 3A 06 F1 | 	add	local11, #8
09d5c     1D 33 62 FC | 	wrlong	local07, local11
09d60     03 00 00 FF 
09d64     00 E4 05 F1 | 	add	objptr, ##1536
09d68     F2 2E 02 FB | 	rdlong	local05, objptr
09d6c     01 2E 06 F1 | 	add	local05, #1
09d70     F2 2E 62 FC | 	wrlong	local05, objptr
09d74     4A 00 00 FF 
09d78     9C E4 85 F1 | 	sub	objptr, ##38044
09d7c                 | LR__0874
09d7c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09d7c     37 00 00 FF 
09d80     64 E4 05 F1 | 	add	objptr, ##28260
09d84     F2 2C 02 FB | 	rdlong	local04, objptr
09d88     03 2C 66 F0 | 	shl	local04, #3
09d8c     02 00 00 FF 
09d90     38 E4 85 F1 | 	sub	objptr, ##1080
09d94     F2 2C 02 F1 | 	add	local04, objptr
09d98     04 2C 06 F1 | 	add	local04, #4
09d9c     16 35 02 FB | 	rdlong	local08, local04
09da0     11 34 0E F2 | 	cmp	local08, #17 wz
09da4     35 00 00 FF 
09da8     2C E4 85 F1 | 	sub	objptr, ##27180
09dac     6C 00 90 AD |  if_e	jmp	#LR__0875
09db0     37 00 00 FF 
09db4     64 E4 05 F1 | 	add	objptr, ##28260
09db8     F2 34 02 FB | 	rdlong	local08, objptr
09dbc     03 34 66 F0 | 	shl	local08, #3
09dc0     02 00 00 FF 
09dc4     38 E4 85 F1 | 	sub	objptr, ##1080
09dc8     F2 34 02 F1 | 	add	local08, objptr
09dcc     04 34 06 F1 | 	add	local08, #4
09dd0     1A 35 02 FB | 	rdlong	local08, local08
09dd4     12 34 0E F2 | 	cmp	local08, #18 wz
09dd8     35 00 00 FF 
09ddc     2C E4 85 F1 | 	sub	objptr, ##27180
09de0     38 00 90 AD |  if_e	jmp	#LR__0875
09de4     37 00 00 FF 
09de8     64 E4 05 F1 | 	add	objptr, ##28260
09dec     F2 3A 02 FB | 	rdlong	local11, objptr
09df0     03 3A 66 F0 | 	shl	local11, #3
09df4     02 00 00 FF 
09df8     38 E4 85 F1 | 	sub	objptr, ##1080
09dfc     F2 3A 02 F1 | 	add	local11, objptr
09e00     04 3A 06 F1 | 	add	local11, #4
09e04     1D 3B 02 FB | 	rdlong	local11, local11
09e08     FE 3B 0E F2 | 	cmp	local11, #510 wz
09e0c     35 00 00 FF 
09e10     2C E4 85 F1 | 	sub	objptr, ##27180
09e14     16 FA 05 56 |  if_ne	mov	result1, #22
09e18     68 00 90 5D |  if_ne	jmp	#LR__0877
09e1c                 | LR__0875
09e1c     37 00 00 FF 
09e20     64 E4 05 F1 | 	add	objptr, ##28260
09e24     F2 2C 02 FB | 	rdlong	local04, objptr
09e28     01 2C 06 F1 | 	add	local04, #1
09e2c     F2 2C 62 FC | 	wrlong	local04, objptr
09e30     03 2C 66 F0 | 	shl	local04, #3
09e34     02 00 00 FF 
09e38     38 E4 85 F1 | 	sub	objptr, ##1080
09e3c     F2 2C 02 F1 | 	add	local04, objptr
09e40     04 2C 06 F1 | 	add	local04, #4
09e44     16 35 02 FB | 	rdlong	local08, local04
09e48     FE 35 0E F2 | 	cmp	local08, #510 wz
09e4c     35 00 00 FF 
09e50     2C E4 85 F1 | 	sub	objptr, ##27180
09e54     28 00 90 AD |  if_e	jmp	#LR__0876
09e58     37 00 00 FF 
09e5c     64 E4 05 F1 | 	add	objptr, ##28260
09e60     F2 3A 02 FB | 	rdlong	local11, objptr
09e64     0E 00 00 FF 
09e68     1C E4 05 F1 | 	add	objptr, ##7196
09e6c     F2 38 02 FB | 	rdlong	local10, objptr
09e70     45 00 00 FF 
09e74     80 E4 85 F1 | 	sub	objptr, ##35456
09e78     1C 3B 52 F2 | 	cmps	local11, local10 wc
09e7c     E4 FA 9F CD |  if_b	jmp	#LR__0871
09e80                 | LR__0876
09e80                 | ' return 0
09e80     00 FA 05 F6 | 	mov	result1, #0
09e84                 | LR__0877
09e84     A7 F0 03 F6 | 	mov	ptra, fp
09e88     B2 00 A0 FD | 	call	#popregs_
09e8c                 | _compile_print_ret
09e8c     2D 00 64 FD | 	ret
09e90                 | 
09e90                 | ' 
09e90                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09e90                 | ' 
09e90                 | ' function compile_if(aline as ulong) as ulong  
09e90                 | _compile_if
09e90     09 4A 05 F6 | 	mov	COUNT_, #9
09e94     A8 00 A0 FD | 	call	#pushregs_
09e98                 | _compile_if_enter
09e98     09 2D 02 F6 | 	mov	local04, arg01
09e9c                 | ' return expr()
09e9c     F8 21 B0 FD | 	call	#_expr
09ea0     37 00 00 FF 
09ea4     64 E4 05 F1 | 	add	objptr, ##28260
09ea8     F2 14 02 FB | 	rdlong	arg02, objptr
09eac     0A 2F 02 F6 | 	mov	local05, arg02
09eb0     03 2E 66 F0 | 	shl	local05, #3
09eb4     02 00 00 FF 
09eb8     38 E4 85 F1 | 	sub	objptr, ##1080
09ebc     F2 2E 02 F1 | 	add	local05, objptr
09ec0     04 2E 06 F1 | 	add	local05, #4
09ec4     17 2F 02 FB | 	rdlong	local05, local05
09ec8     01 14 06 F1 | 	add	arg02, #1
09ecc     02 00 00 FF 
09ed0     38 E4 05 F1 | 	add	objptr, ##1080
09ed4     F2 14 62 FC | 	wrlong	arg02, objptr
09ed8     37 00 00 FF 
09edc     64 E4 85 F1 | 	sub	objptr, ##28260
09ee0                 | ' 
09ee0                 | ' err=compile_fun_1p()
09ee0                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09ee0     5B 2E 0E F2 | 	cmp	local05, #91 wz
09ee4     34 FA 05 56 |  if_ne	mov	result1, #52
09ee8     20 01 90 5D |  if_ne	jmp	#LR__0882
09eec     58 2A 06 F6 | 	mov	local03, #88
09ef0     13 31 02 F6 | 	mov	local06, local01
09ef4     14 33 02 F6 | 	mov	local07, local02
09ef8     15 15 02 F6 | 	mov	arg02, local03
09efc     4A 00 00 FF 
09f00     9C E4 05 F1 | 	add	objptr, ##38044
09f04     F2 12 02 FB | 	rdlong	arg01, objptr
09f08     09 35 02 F6 | 	mov	local08, arg01
09f0c     01 34 66 F0 | 	shl	local08, #1
09f10     09 35 02 F1 | 	add	local08, arg01
09f14     02 34 66 F0 | 	shl	local08, #2
09f18     03 00 00 FF 
09f1c     00 E4 85 F1 | 	sub	objptr, ##1536
09f20     F2 34 02 F1 | 	add	local08, objptr
09f24     1A 31 62 FC | 	wrlong	local06, local08
09f28     03 00 00 FF 
09f2c     00 E4 05 F1 | 	add	objptr, ##1536
09f30     F2 30 02 FB | 	rdlong	local06, objptr
09f34     18 13 02 F6 | 	mov	arg01, local06
09f38     01 12 66 F0 | 	shl	arg01, #1
09f3c     18 13 02 F1 | 	add	arg01, local06
09f40     02 12 66 F0 | 	shl	arg01, #2
09f44     03 00 00 FF 
09f48     00 E4 85 F1 | 	sub	objptr, ##1536
09f4c     F2 12 02 F1 | 	add	arg01, objptr
09f50     04 12 06 F1 | 	add	arg01, #4
09f54     09 33 62 FC | 	wrlong	local07, arg01
09f58     03 00 00 FF 
09f5c     00 E4 05 F1 | 	add	objptr, ##1536
09f60     F2 30 02 FB | 	rdlong	local06, objptr
09f64     18 13 02 F6 | 	mov	arg01, local06
09f68     01 12 66 F0 | 	shl	arg01, #1
09f6c     18 13 02 F1 | 	add	arg01, local06
09f70     02 12 66 F0 | 	shl	arg01, #2
09f74     03 00 00 FF 
09f78     00 E4 85 F1 | 	sub	objptr, ##1536
09f7c     F2 12 02 F1 | 	add	arg01, objptr
09f80     08 12 06 F1 | 	add	arg01, #8
09f84     09 15 62 FC | 	wrlong	arg02, arg01
09f88     03 00 00 FF 
09f8c     00 E4 05 F1 | 	add	objptr, ##1536
09f90     F2 30 02 FB | 	rdlong	local06, objptr
09f94     01 30 06 F1 | 	add	local06, #1
09f98     F2 30 62 FC | 	wrlong	local06, objptr
09f9c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09f9c                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f9c     13 00 00 FF 
09fa0     38 E4 85 F1 | 	sub	objptr, ##9784
09fa4     F2 14 02 FB | 	rdlong	arg02, objptr
09fa8     01 14 06 F1 | 	add	arg02, #1
09fac     03 14 66 F0 | 	shl	arg02, #3
09fb0     02 00 00 FF 
09fb4     38 E4 85 F1 | 	sub	objptr, ##1080
09fb8     F2 14 02 F1 | 	add	arg02, objptr
09fbc     0A 13 02 FB | 	rdlong	arg01, arg02
09fc0     35 00 00 FF 
09fc4     2C E4 85 F1 | 	sub	objptr, ##27180
09fc8                 | ' 
09fc8                 | ' select case s
09fc8     C0 01 00 FF 
09fcc     4E 15 06 F6 | 	mov	arg02, ##@LR__5719
09fd0     48 E4 B1 FD | 	call	#__system___string_cmp
09fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
09fd8     1B FA 05 A6 |  if_e	mov	result1, #27
09fdc     00 FA 05 56 |  if_ne	mov	result1, #0
09fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fe4     10 00 90 AD |  if_e	jmp	#LR__0880
09fe8     05 12 06 F6 | 	mov	arg01, #5
09fec     38 E4 BF FD | 	call	#_compile_immediate_assign
09ff0     FD 36 02 F6 | 	mov	local09, result1
09ff4     10 00 90 FD | 	jmp	#LR__0881
09ff8                 | LR__0880
09ff8     05 12 06 F6 | 	mov	arg01, #5
09ffc     16 15 02 F6 | 	mov	arg02, local04
0a000     24 DA BF FD | 	call	#_compile_immediate
0a004     FD 36 02 F6 | 	mov	local09, result1
0a008                 | LR__0881
0a008                 | ' return err
0a008     1B FB 01 F6 | 	mov	result1, local09
0a00c                 | LR__0882
0a00c     A7 F0 03 F6 | 	mov	ptra, fp
0a010     B2 00 A0 FD | 	call	#popregs_
0a014                 | _compile_if_ret
0a014     2D 00 64 FD | 	ret
0a018                 | 
0a018                 | ' 
0a018                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0a018                 | ' 
0a018                 | ' function compile_else(aline as ulong) as ulong  
0a018                 | _compile_else
0a018     07 4A 05 F6 | 	mov	COUNT_, #7
0a01c     A8 00 A0 FD | 	call	#pushregs_
0a020                 | _compile_else_enter
0a020     09 2D 02 F6 | 	mov	local04, arg01
0a024     5A 2A 06 F6 | 	mov	local03, #90
0a028     13 2F 02 F6 | 	mov	local05, local01
0a02c     14 31 02 F6 | 	mov	local06, local02
0a030     15 27 02 F6 | 	mov	local01, local03
0a034     4A 00 00 FF 
0a038     9C E4 05 F1 | 	add	objptr, ##38044
0a03c     F2 14 02 FB | 	rdlong	arg02, objptr
0a040     0A 13 02 F6 | 	mov	arg01, arg02
0a044     01 12 66 F0 | 	shl	arg01, #1
0a048     0A 13 02 F1 | 	add	arg01, arg02
0a04c     02 12 66 F0 | 	shl	arg01, #2
0a050     03 00 00 FF 
0a054     00 E4 85 F1 | 	sub	objptr, ##1536
0a058     F2 12 02 F1 | 	add	arg01, objptr
0a05c     09 2F 62 FC | 	wrlong	local05, arg01
0a060     03 00 00 FF 
0a064     00 E4 05 F1 | 	add	objptr, ##1536
0a068     F2 2E 02 FB | 	rdlong	local05, objptr
0a06c     17 15 02 F6 | 	mov	arg02, local05
0a070     01 14 66 F0 | 	shl	arg02, #1
0a074     17 15 02 F1 | 	add	arg02, local05
0a078     02 14 66 F0 | 	shl	arg02, #2
0a07c     03 00 00 FF 
0a080     00 E4 85 F1 | 	sub	objptr, ##1536
0a084     F2 14 02 F1 | 	add	arg02, objptr
0a088     04 14 06 F1 | 	add	arg02, #4
0a08c     0A 31 62 FC | 	wrlong	local06, arg02
0a090     03 00 00 FF 
0a094     00 E4 05 F1 | 	add	objptr, ##1536
0a098     F2 30 02 FB | 	rdlong	local06, objptr
0a09c     18 2F 02 F6 | 	mov	local05, local06
0a0a0     01 2E 66 F0 | 	shl	local05, #1
0a0a4     18 2F 02 F1 | 	add	local05, local06
0a0a8     02 2E 66 F0 | 	shl	local05, #2
0a0ac     03 00 00 FF 
0a0b0     00 E4 85 F1 | 	sub	objptr, ##1536
0a0b4     F2 2E 02 F1 | 	add	local05, objptr
0a0b8     08 2E 06 F1 | 	add	local05, #8
0a0bc     17 27 62 FC | 	wrlong	local01, local05
0a0c0     03 00 00 FF 
0a0c4     00 E4 05 F1 | 	add	objptr, ##1536
0a0c8     F2 2E 02 FB | 	rdlong	local05, objptr
0a0cc     01 2E 06 F1 | 	add	local05, #1
0a0d0     F2 2E 62 FC | 	wrlong	local05, objptr
0a0d4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0a0d4                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
0a0d4     13 00 00 FF 
0a0d8     38 E4 85 F1 | 	sub	objptr, ##9784
0a0dc     F2 30 02 FB | 	rdlong	local06, objptr
0a0e0     01 30 06 F1 | 	add	local06, #1
0a0e4     03 30 66 F0 | 	shl	local06, #3
0a0e8     02 00 00 FF 
0a0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a0f0     F2 30 02 F1 | 	add	local06, objptr
0a0f4     18 13 02 FB | 	rdlong	arg01, local06
0a0f8     35 00 00 FF 
0a0fc     2C E4 85 F1 | 	sub	objptr, ##27180
0a100                 | ' 
0a100                 | ' select case s
0a100     C0 01 00 FF 
0a104     4E 15 06 F6 | 	mov	arg02, ##@LR__5719
0a108     10 E3 B1 FD | 	call	#__system___string_cmp
0a10c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a110     1B FA 05 A6 |  if_e	mov	result1, #27
0a114     00 FA 05 56 |  if_ne	mov	result1, #0
0a118     00 FA 0D F2 | 	cmp	result1, #0 wz
0a11c     10 00 90 AD |  if_e	jmp	#LR__0890
0a120     05 12 06 F6 | 	mov	arg01, #5
0a124     00 E3 BF FD | 	call	#_compile_immediate_assign
0a128     FD 32 02 F6 | 	mov	local07, result1
0a12c     10 00 90 FD | 	jmp	#LR__0891
0a130                 | LR__0890
0a130     05 12 06 F6 | 	mov	arg01, #5
0a134     16 15 02 F6 | 	mov	arg02, local04
0a138     EC D8 BF FD | 	call	#_compile_immediate
0a13c     FD 32 02 F6 | 	mov	local07, result1
0a140                 | LR__0891
0a140                 | ' return err
0a140     19 FB 01 F6 | 	mov	result1, local07
0a144     A7 F0 03 F6 | 	mov	ptra, fp
0a148     B2 00 A0 FD | 	call	#popregs_
0a14c                 | _compile_else_ret
0a14c     2D 00 64 FD | 	ret
0a150                 | 
0a150                 | ' 
0a150                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0a150                 | ' 
0a150                 | ' function compile_dim() as ulong  
0a150                 | _compile_dim
0a150     11 4A 05 F6 | 	mov	COUNT_, #17
0a154     A8 00 A0 FD | 	call	#pushregs_
0a158     01 26 06 F6 | 	mov	local01, #1
0a15c     01 28 06 F6 | 	mov	local02, #1
0a160     01 2A 06 F6 | 	mov	local03, #1
0a164                 | ' 
0a164                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a164                 | ' if isname(lparts(ct).part$) then 
0a164     37 00 00 FF 
0a168     64 E4 05 F1 | 	add	objptr, ##28260
0a16c     F2 18 02 FB | 	rdlong	arg04, objptr
0a170     03 18 66 F0 | 	shl	arg04, #3
0a174     02 00 00 FF 
0a178     38 E4 85 F1 | 	sub	objptr, ##1080
0a17c     F2 18 02 F1 | 	add	arg04, objptr
0a180     0C 13 02 FB | 	rdlong	arg01, arg04
0a184     35 00 00 FF 
0a188     2C E4 85 F1 | 	sub	objptr, ##27180
0a18c     F0 C6 BF FD | 	call	#_isname
0a190     00 FA 0D F2 | 	cmp	result1, #0 wz
0a194     78 05 90 AD |  if_e	jmp	#LR__0923
0a198     37 00 00 FF 
0a19c     64 E4 05 F1 | 	add	objptr, ##28260
0a1a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1a4     03 2C 66 F0 | 	shl	local04, #3
0a1a8     02 00 00 FF 
0a1ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a1b0     F2 2C 02 F1 | 	add	local04, objptr
0a1b4     16 2F 02 FB | 	rdlong	local05, local04
0a1b8     01 30 66 F6 | 	neg	local06, #1
0a1bc                 | '   varname2$=lparts(ct).part$ 
0a1bc                 | '   j=-1
0a1bc                 | '   if varnum>0 then
0a1bc     04 E4 85 F1 | 	sub	objptr, #4
0a1c0     F2 32 02 FB | 	rdlong	local07, objptr
0a1c4     35 00 00 FF 
0a1c8     28 E4 85 F1 | 	sub	objptr, ##27176
0a1cc     01 32 56 F2 | 	cmps	local07, #1 wc
0a1d0     58 00 90 CD |  if_b	jmp	#LR__0902
0a1d4                 | '     for i=0 to varnum-1
0a1d4     00 34 06 F6 | 	mov	local08, #0
0a1d8     35 00 00 FF 
0a1dc     28 E4 05 F1 | 	add	objptr, ##27176
0a1e0     F2 36 02 FB | 	rdlong	local09, objptr
0a1e4     35 00 00 FF 
0a1e8     28 E4 85 F1 | 	sub	objptr, ##27176
0a1ec                 | LR__0900
0a1ec     1B 35 52 F2 | 	cmps	local08, local09 wc
0a1f0     38 00 90 3D |  if_ae	jmp	#LR__0901
0a1f4                 | '       if variables(i).name=varname2$ then j=i : exit
0a1f4     1A 2D 02 F6 | 	mov	local04, local08
0a1f8     04 2C 66 F0 | 	shl	local04, #4
0a1fc     15 00 00 FF 
0a200     18 E4 05 F1 | 	add	objptr, ##10776
0a204     F2 2C 02 F1 | 	add	local04, objptr
0a208     16 13 02 FB | 	rdlong	arg01, local04
0a20c     17 15 02 F6 | 	mov	arg02, local05
0a210     15 00 00 FF 
0a214     18 E4 85 F1 | 	sub	objptr, ##10776
0a218     00 E2 B1 FD | 	call	#__system___string_cmp
0a21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a220     1A 31 02 A6 |  if_e	mov	local06, local08
0a224     01 34 06 51 |  if_ne	add	local08, #1
0a228     C0 FF 9F 5D |  if_ne	jmp	#LR__0900
0a22c                 | LR__0901
0a22c                 | LR__0902
0a22c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a22c     FF FF 7F FF 
0a230     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a234     35 00 00 AF 
0a238     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a23c     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a240     35 00 00 AF 
0a244     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a248     78 00 90 AD |  if_e	jmp	#LR__0903
0a24c     00 12 06 F6 | 	mov	arg01, #0
0a250     50 3E B2 FD | 	call	#__system___getiolock_0625
0a254     FD 12 02 F6 | 	mov	arg01, result1
0a258     98 E1 B1 FD | 	call	#__system___lockmem
0a25c     C3 01 00 FF 
0a260     5B 14 06 F6 | 	mov	arg02, ##@LR__5991
0a264     00 12 06 F6 | 	mov	arg01, #0
0a268     00 16 06 F6 | 	mov	arg03, #0
0a26c     7C EE B1 FD | 	call	#__system___basic_print_string
0a270     52 00 00 FF 
0a274     08 E5 05 F1 | 	add	objptr, ##42248
0a278     F2 14 02 FB | 	rdlong	arg02, objptr
0a27c     52 00 00 FF 
0a280     08 E5 85 F1 | 	sub	objptr, ##42248
0a284     00 12 06 F6 | 	mov	arg01, #0
0a288     00 16 06 F6 | 	mov	arg03, #0
0a28c     0A 18 06 F6 | 	mov	arg04, #10
0a290     DC EE B1 FD | 	call	#__system___basic_print_unsigned
0a294     C3 01 00 FF 
0a298     69 14 06 F6 | 	mov	arg02, ##@LR__5992
0a29c     00 12 06 F6 | 	mov	arg01, #0
0a2a0     00 16 06 F6 | 	mov	arg03, #0
0a2a4     44 EE B1 FD | 	call	#__system___basic_print_string
0a2a8     00 12 06 F6 | 	mov	arg01, #0
0a2ac     0A 14 06 F6 | 	mov	arg02, #10
0a2b0     00 16 06 F6 | 	mov	arg03, #0
0a2b4     DC ED B1 FD | 	call	#__system___basic_print_char
0a2b8     00 12 06 F6 | 	mov	arg01, #0
0a2bc     E4 3D B2 FD | 	call	#__system___getiolock_0625
0a2c0     FD 00 68 FC | 	wrlong	#0, result1
0a2c4                 | LR__0903
0a2c4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a2c4     37 00 00 FF 
0a2c8     64 E4 05 F1 | 	add	objptr, ##28260
0a2cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a2d0     01 14 06 F1 | 	add	arg02, #1
0a2d4     03 14 66 F0 | 	shl	arg02, #3
0a2d8     02 00 00 FF 
0a2dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a2e0     F2 14 02 F1 | 	add	arg02, objptr
0a2e4     0A 13 02 FB | 	rdlong	arg01, arg02
0a2e8     C3 01 00 FF 
0a2ec     8A 14 06 F6 | 	mov	arg02, ##@LR__5993
0a2f0     35 00 00 FF 
0a2f4     2C E4 85 F1 | 	sub	objptr, ##27180
0a2f8     20 E1 B1 FD | 	call	#__system___string_cmp
0a2fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a300     44 00 90 AD |  if_e	jmp	#LR__0904
0a304     37 00 00 FF 
0a308     64 E4 05 F1 | 	add	objptr, ##28260
0a30c     F2 36 02 FB | 	rdlong	local09, objptr
0a310     01 36 06 F1 | 	add	local09, #1
0a314     03 36 66 F0 | 	shl	local09, #3
0a318     02 00 00 FF 
0a31c     38 E4 85 F1 | 	sub	objptr, ##1080
0a320     F2 36 02 F1 | 	add	local09, objptr
0a324     1B 13 02 FB | 	rdlong	arg01, local09
0a328     C3 01 00 FF 
0a32c     8C 14 06 F6 | 	mov	arg02, ##@LR__5994
0a330     35 00 00 FF 
0a334     2C E4 85 F1 | 	sub	objptr, ##27180
0a338     E0 E0 B1 FD | 	call	#__system___string_cmp
0a33c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a340     2B FA 05 56 |  if_ne	mov	result1, #43
0a344     D0 04 90 5D |  if_ne	jmp	#LR__0925
0a348                 | LR__0904
0a348                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a348     37 00 00 FF 
0a34c     64 E4 05 F1 | 	add	objptr, ##28260
0a350     F2 14 02 FB | 	rdlong	arg02, objptr
0a354     01 14 06 F1 | 	add	arg02, #1
0a358     03 14 66 F0 | 	shl	arg02, #3
0a35c     02 00 00 FF 
0a360     38 E4 85 F1 | 	sub	objptr, ##1080
0a364     F2 14 02 F1 | 	add	arg02, objptr
0a368     0A 13 02 FB | 	rdlong	arg01, arg02
0a36c     C3 01 00 FF 
0a370     8F 14 06 F6 | 	mov	arg02, ##@LR__5995
0a374     35 00 00 FF 
0a378     2C E4 85 F1 | 	sub	objptr, ##27180
0a37c     9C E0 B1 FD | 	call	#__system___string_cmp
0a380     00 FA 0D F2 | 	cmp	result1, #0 wz
0a384     37 00 00 AF 
0a388     64 E4 05 A1 |  if_e	add	objptr, ##28260
0a38c     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a390     37 00 00 AF 
0a394     64 E4 85 A1 |  if_e	sub	objptr, ##28260
0a398     01 38 06 A1 |  if_e	add	local10, #1
0a39c     5C 01 90 AD |  if_e	jmp	#LR__0909
0a3a0     37 00 00 FF 
0a3a4     64 E4 05 F1 | 	add	objptr, ##28260
0a3a8     F2 38 02 FB | 	rdlong	local10, objptr
0a3ac     37 00 00 FF 
0a3b0     64 E4 85 F1 | 	sub	objptr, ##28260
0a3b4     02 38 06 F1 | 	add	local10, #2
0a3b8     00 3A 06 F6 | 	mov	local11, #0
0a3bc                 | '   l=ct+2 : m=0 : do
0a3bc                 | LR__0905
0a3bc                 | '   if isdec(lparts(l).part$) then 
0a3bc     1C 2D 02 F6 | 	mov	local04, local10
0a3c0     03 2C 66 F0 | 	shl	local04, #3
0a3c4     35 00 00 FF 
0a3c8     2C E4 05 F1 | 	add	objptr, ##27180
0a3cc     F2 2C 02 F1 | 	add	local04, objptr
0a3d0     16 13 02 FB | 	rdlong	arg01, local04
0a3d4     35 00 00 FF 
0a3d8     2C E4 85 F1 | 	sub	objptr, ##27180
0a3dc     A4 CD BF FD | 	call	#_isdec
0a3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3e4     44 00 90 AD |  if_e	jmp	#LR__0906
0a3e8     1D 3D 02 F6 | 	mov	local12, local11
0a3ec     13 3D 06 F1 | 	add	local12, #local01
0a3f0     1C 37 02 F6 | 	mov	local09, local10
0a3f4     03 36 66 F0 | 	shl	local09, #3
0a3f8     35 00 00 FF 
0a3fc     2C E4 05 F1 | 	add	objptr, ##27180
0a400     F2 36 02 F1 | 	add	local09, objptr
0a404     1B 13 02 FB | 	rdlong	arg01, local09
0a408     00 14 06 F6 | 	mov	arg02, #0
0a40c     35 00 00 FF 
0a410     2C E4 85 F1 | 	sub	objptr, ##27180
0a414     D0 14 B2 FD | 	call	#__system____builtin_atoi
0a418     FD 3E 02 F6 | 	mov	local13, result1
0a41c                 | 	'.live	local13
0a41c                 | 	'.live	local12
0a41c     00 3C 8E F9 | 	altd	local12, #0
0a420     1F 3D 02 F6 | 	mov	local12, local13
0a424     01 3A 06 F1 | 	add	local11, #1
0a428     08 00 90 FD | 	jmp	#LR__0907
0a42c                 | LR__0906
0a42c                 | '     return(17)
0a42c     11 FA 05 F6 | 	mov	result1, #17
0a430     E4 03 90 FD | 	jmp	#LR__0925
0a434                 | LR__0907
0a434                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a434     1C 2D 02 F6 | 	mov	local04, local10
0a438     01 2C 06 F1 | 	add	local04, #1
0a43c     03 2C 66 F0 | 	shl	local04, #3
0a440     35 00 00 FF 
0a444     2C E4 05 F1 | 	add	objptr, ##27180
0a448     F2 2C 02 F1 | 	add	local04, objptr
0a44c     16 13 02 FB | 	rdlong	arg01, local04
0a450     C3 01 00 FF 
0a454     92 14 06 F6 | 	mov	arg02, ##@LR__5996
0a458     35 00 00 FF 
0a45c     2C E4 85 F1 | 	sub	objptr, ##27180
0a460     B8 DF B1 FD | 	call	#__system___string_cmp
0a464     00 FA 0D F2 | 	cmp	result1, #0 wz
0a468     3C 00 90 AD |  if_e	jmp	#LR__0908
0a46c     1C 3F 02 F6 | 	mov	local13, local10
0a470     01 3E 06 F1 | 	add	local13, #1
0a474     03 3E 66 F0 | 	shl	local13, #3
0a478     35 00 00 FF 
0a47c     2C E4 05 F1 | 	add	objptr, ##27180
0a480     F2 3E 02 F1 | 	add	local13, objptr
0a484     1F 13 02 FB | 	rdlong	arg01, local13
0a488     C3 01 00 FF 
0a48c     94 14 06 F6 | 	mov	arg02, ##@LR__5997
0a490     35 00 00 FF 
0a494     2C E4 85 F1 | 	sub	objptr, ##27180
0a498     80 DF B1 FD | 	call	#__system___string_cmp
0a49c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4a0     2C FA 05 56 |  if_ne	mov	result1, #44
0a4a4     70 03 90 5D |  if_ne	jmp	#LR__0925
0a4a8                 | LR__0908
0a4a8     02 38 06 F1 | 	add	local10, #2
0a4ac     1C 2D 02 F6 | 	mov	local04, local10
0a4b0     01 2C 86 F1 | 	sub	local04, #1
0a4b4     03 2C 66 F0 | 	shl	local04, #3
0a4b8     35 00 00 FF 
0a4bc     2C E4 05 F1 | 	add	objptr, ##27180
0a4c0     F2 2C 02 F1 | 	add	local04, objptr
0a4c4     16 13 02 FB | 	rdlong	arg01, local04
0a4c8     C3 01 00 FF 
0a4cc     96 14 06 F6 | 	mov	arg02, ##@LR__5998
0a4d0     35 00 00 FF 
0a4d4     2C E4 85 F1 | 	sub	objptr, ##27180
0a4d8     40 DF B1 FD | 	call	#__system___string_cmp
0a4dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4e0     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a4e4     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a4e8                 | '   if m>3 then return 45
0a4e8     04 3A 56 F2 | 	cmps	local11, #4 wc
0a4ec     2D FA 05 36 |  if_ae	mov	result1, #45
0a4f0     24 03 90 3D |  if_ae	jmp	#LR__0925
0a4f4     00 41 06 F6 | 	mov	local14, #256
0a4f8     0C 42 06 F6 | 	mov	local15, #12
0a4fc                 | LR__0909
0a4fc                 | '   arraytype=array_no_type : esize=12
0a4fc                 | ' 1350 
0a4fc                 | '   if lparts(l).part$="as" then
0a4fc     1C 2D 02 F6 | 	mov	local04, local10
0a500     03 2C 66 F0 | 	shl	local04, #3
0a504     35 00 00 FF 
0a508     2C E4 05 F1 | 	add	objptr, ##27180
0a50c     F2 2C 02 F1 | 	add	local04, objptr
0a510     16 13 02 FB | 	rdlong	arg01, local04
0a514     C3 01 00 FF 
0a518     98 14 06 F6 | 	mov	arg02, ##@LR__5999
0a51c     35 00 00 FF 
0a520     2C E4 85 F1 | 	sub	objptr, ##27180
0a524     F4 DE B1 FD | 	call	#__system___string_cmp
0a528     00 FA 0D F2 | 	cmp	result1, #0 wz
0a52c     E8 01 90 5D |  if_ne	jmp	#LR__0924
0a530                 | '     select case lparts(l+1).part$
0a530     1C 3D 02 F6 | 	mov	local12, local10
0a534     01 3C 06 F1 | 	add	local12, #1
0a538     03 3C 66 F0 | 	shl	local12, #3
0a53c     35 00 00 FF 
0a540     2C E4 05 F1 | 	add	objptr, ##27180
0a544     F2 3C 02 F1 | 	add	local12, objptr
0a548     1E 45 02 FB | 	rdlong	local16, local12
0a54c     C3 01 00 FF 
0a550     9B 14 06 F6 | 	mov	arg02, ##@LR__6000
0a554     22 13 02 F6 | 	mov	arg01, local16
0a558     35 00 00 FF 
0a55c     2C E4 85 F1 | 	sub	objptr, ##27180
0a560     B8 DE B1 FD | 	call	#__system___string_cmp
0a564     00 FA 0D F2 | 	cmp	result1, #0 wz
0a568     0C 01 90 AD |  if_e	jmp	#LR__0910
0a56c     C3 01 00 FF 
0a570     A0 14 06 F6 | 	mov	arg02, ##@LR__6001
0a574     22 13 02 F6 | 	mov	arg01, local16
0a578     A0 DE B1 FD | 	call	#__system___string_cmp
0a57c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a580     00 01 90 AD |  if_e	jmp	#LR__0911
0a584     C3 01 00 FF 
0a588     A6 14 06 F6 | 	mov	arg02, ##@LR__6002
0a58c     22 13 02 F6 | 	mov	arg01, local16
0a590     88 DE B1 FD | 	call	#__system___string_cmp
0a594     00 FA 0D F2 | 	cmp	result1, #0 wz
0a598     F4 00 90 AD |  if_e	jmp	#LR__0912
0a59c     C3 01 00 FF 
0a5a0     AC 14 06 F6 | 	mov	arg02, ##@LR__6003
0a5a4     22 13 02 F6 | 	mov	arg01, local16
0a5a8     70 DE B1 FD | 	call	#__system___string_cmp
0a5ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5b0     E8 00 90 AD |  if_e	jmp	#LR__0913
0a5b4     C3 01 00 FF 
0a5b8     B3 14 06 F6 | 	mov	arg02, ##@LR__6004
0a5bc     22 13 02 F6 | 	mov	arg01, local16
0a5c0     58 DE B1 FD | 	call	#__system___string_cmp
0a5c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5c8     DC 00 90 AD |  if_e	jmp	#LR__0914
0a5cc     C3 01 00 FF 
0a5d0     B8 14 06 F6 | 	mov	arg02, ##@LR__6005
0a5d4     22 13 02 F6 | 	mov	arg01, local16
0a5d8     40 DE B1 FD | 	call	#__system___string_cmp
0a5dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5e0     D0 00 90 AD |  if_e	jmp	#LR__0915
0a5e4     C3 01 00 FF 
0a5e8     C0 14 06 F6 | 	mov	arg02, ##@LR__6006
0a5ec     22 13 02 F6 | 	mov	arg01, local16
0a5f0     28 DE B1 FD | 	call	#__system___string_cmp
0a5f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5f8     C4 00 90 AD |  if_e	jmp	#LR__0916
0a5fc     C3 01 00 FF 
0a600     C6 14 06 F6 | 	mov	arg02, ##@LR__6007
0a604     22 13 02 F6 | 	mov	arg01, local16
0a608     10 DE B1 FD | 	call	#__system___string_cmp
0a60c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a610     B8 00 90 AD |  if_e	jmp	#LR__0917
0a614     C3 01 00 FF 
0a618     CC 14 06 F6 | 	mov	arg02, ##@LR__6008
0a61c     22 13 02 F6 | 	mov	arg01, local16
0a620     F8 DD B1 FD | 	call	#__system___string_cmp
0a624     00 FA 0D F2 | 	cmp	result1, #0 wz
0a628     AC 00 90 AD |  if_e	jmp	#LR__0918
0a62c     C3 01 00 FF 
0a630     D3 14 06 F6 | 	mov	arg02, ##@LR__6009
0a634     22 13 02 F6 | 	mov	arg01, local16
0a638     E0 DD B1 FD | 	call	#__system___string_cmp
0a63c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a640     A0 00 90 AD |  if_e	jmp	#LR__0919
0a644     C3 01 00 FF 
0a648     DA 14 06 F6 | 	mov	arg02, ##@LR__6010
0a64c     22 13 02 F6 | 	mov	arg01, local16
0a650     C8 DD B1 FD | 	call	#__system___string_cmp
0a654     00 FA 0D F2 | 	cmp	result1, #0 wz
0a658     94 00 90 AD |  if_e	jmp	#LR__0920
0a65c     C3 01 00 FF 
0a660     E1 14 06 F6 | 	mov	arg02, ##@LR__6011
0a664     22 13 02 F6 | 	mov	arg01, local16
0a668     B0 DD B1 FD | 	call	#__system___string_cmp
0a66c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a670     88 00 90 AD |  if_e	jmp	#LR__0921
0a674     90 00 90 FD | 	jmp	#LR__0922
0a678                 | LR__0910
0a678     01 41 06 F6 | 	mov	local14, #257
0a67c     01 42 06 F6 | 	mov	local15, #1
0a680     94 00 90 FD | 	jmp	#LR__0924
0a684                 | LR__0911
0a684     02 41 06 F6 | 	mov	local14, #258
0a688     01 42 06 F6 | 	mov	local15, #1
0a68c     88 00 90 FD | 	jmp	#LR__0924
0a690                 | LR__0912
0a690     03 41 06 F6 | 	mov	local14, #259
0a694     02 42 06 F6 | 	mov	local15, #2
0a698     7C 00 90 FD | 	jmp	#LR__0924
0a69c                 | LR__0913
0a69c     04 41 06 F6 | 	mov	local14, #260
0a6a0     02 42 06 F6 | 	mov	local15, #2
0a6a4     70 00 90 FD | 	jmp	#LR__0924
0a6a8                 | LR__0914
0a6a8     05 41 06 F6 | 	mov	local14, #261
0a6ac     04 42 06 F6 | 	mov	local15, #4
0a6b0     64 00 90 FD | 	jmp	#LR__0924
0a6b4                 | LR__0915
0a6b4     05 41 06 F6 | 	mov	local14, #261
0a6b8     04 42 06 F6 | 	mov	local15, #4
0a6bc     58 00 90 FD | 	jmp	#LR__0924
0a6c0                 | LR__0916
0a6c0     06 41 06 F6 | 	mov	local14, #262
0a6c4     04 42 06 F6 | 	mov	local15, #4
0a6c8     4C 00 90 FD | 	jmp	#LR__0924
0a6cc                 | LR__0917
0a6cc     07 41 06 F6 | 	mov	local14, #263
0a6d0     08 42 06 F6 | 	mov	local15, #8
0a6d4     40 00 90 FD | 	jmp	#LR__0924
0a6d8                 | LR__0918
0a6d8     08 41 06 F6 | 	mov	local14, #264
0a6dc     08 42 06 F6 | 	mov	local15, #8
0a6e0     34 00 90 FD | 	jmp	#LR__0924
0a6e4                 | LR__0919
0a6e4     09 41 06 F6 | 	mov	local14, #265
0a6e8     04 42 06 F6 | 	mov	local15, #4
0a6ec     28 00 90 FD | 	jmp	#LR__0924
0a6f0                 | LR__0920
0a6f0     0A 41 06 F6 | 	mov	local14, #266
0a6f4     08 42 06 F6 | 	mov	local15, #8
0a6f8     1C 00 90 FD | 	jmp	#LR__0924
0a6fc                 | LR__0921
0a6fc     0B 41 06 F6 | 	mov	local14, #267
0a700     04 42 06 F6 | 	mov	local15, #4
0a704     10 00 90 FD | 	jmp	#LR__0924
0a708                 | LR__0922
0a708     2F FA 05 F6 | 	mov	result1, #47
0a70c     08 01 90 FD | 	jmp	#LR__0925
0a710                 | LR__0923
0a710                 | '   return 46
0a710     2E FA 05 F6 | 	mov	result1, #46
0a714     00 01 90 FD | 	jmp	#LR__0925
0a718                 | LR__0924
0a718     13 43 02 FD | 	qmul	local15, local01
0a71c     18 32 62 FD | 	getqx	local07
0a720     14 33 02 FD | 	qmul	local07, local02
0a724     18 44 62 FD | 	getqx	local16
0a728     15 45 02 FD | 	qmul	local16, local03
0a72c     52 00 00 FF 
0a730     F0 E4 05 F1 | 	add	objptr, ##42224
0a734     F2 46 02 FB | 	rdlong	local17, objptr
0a738     20 15 02 F6 | 	mov	arg02, local14
0a73c     18 44 62 FD | 	getqx	local16
0a740     22 47 82 F1 | 	sub	local17, local16
0a744     10 46 86 F1 | 	sub	local17, #16
0a748     0F 46 26 F5 | 	andn	local17, #15
0a74c     F2 46 62 FC | 	wrlong	local17, objptr
0a750     52 00 00 FF 
0a754     F0 E4 85 F1 | 	sub	objptr, ##42224
0a758     23 13 02 F6 | 	mov	arg01, local17
0a75c     24 A4 B1 FD | 	call	#_psdpoke
0a760     23 13 02 F6 | 	mov	arg01, local17
0a764     02 12 06 F1 | 	add	arg01, #2
0a768     21 15 02 F6 | 	mov	arg02, local15
0a76c     14 A4 B1 FD | 	call	#_psdpoke
0a770     23 13 02 F6 | 	mov	arg01, local17
0a774     04 12 06 F1 | 	add	arg01, #4
0a778     13 15 02 F6 | 	mov	arg02, local01
0a77c     BC A3 B1 FD | 	call	#_pslpoke
0a780     23 13 02 F6 | 	mov	arg01, local17
0a784     08 12 06 F1 | 	add	arg01, #8
0a788     14 15 02 F6 | 	mov	arg02, local02
0a78c     AC A3 B1 FD | 	call	#_pslpoke
0a790     23 13 02 F6 | 	mov	arg01, local17
0a794     0C 12 06 F1 | 	add	arg01, #12
0a798     15 15 02 F6 | 	mov	arg02, local03
0a79c     9C A3 B1 FD | 	call	#_pslpoke
0a7a0     18 3D 02 F6 | 	mov	local12, local06
0a7a4     04 3C 66 F0 | 	shl	local12, #4
0a7a8     15 00 00 FF 
0a7ac     18 E4 05 F1 | 	add	objptr, ##10776
0a7b0     F2 3C 02 F1 | 	add	local12, objptr
0a7b4     1E 2F 62 FC | 	wrlong	local05, local12
0a7b8     18 3D 02 F6 | 	mov	local12, local06
0a7bc     04 3C 66 F0 | 	shl	local12, #4
0a7c0     F2 3C 02 F1 | 	add	local12, objptr
0a7c4     04 3C 06 F1 | 	add	local12, #4
0a7c8     1E 47 62 FC | 	wrlong	local17, local12
0a7cc     18 3D 02 F6 | 	mov	local12, local06
0a7d0     04 3C 66 F0 | 	shl	local12, #4
0a7d4     F2 3C 02 F1 | 	add	local12, objptr
0a7d8     0C 3C 06 F1 | 	add	local12, #12
0a7dc     1E 41 62 FC | 	wrlong	local14, local12
0a7e0                 | ' memtop=arrayptr
0a7e0                 | ' psdpoke arrayptr,arraytype 
0a7e0                 | ' psdpoke arrayptr+2,esize 
0a7e0                 | ' pslpoke arrayptr+4,dims(0)
0a7e0                 | ' pslpoke arrayptr+8,dims(1)
0a7e0                 | ' pslpoke arrayptr+12,dims(2)
0a7e0                 | ' variables(j).name=varname2$
0a7e0                 | ' variables(j).value.uresult=arrayptr
0a7e0                 | ' variables(j).vartype=arraytype
0a7e0                 | ' if j=varnum then varnum+=1
0a7e0     20 00 00 FF 
0a7e4     10 E4 05 F1 | 	add	objptr, ##16400
0a7e8     F2 32 02 FB | 	rdlong	local07, objptr
0a7ec     35 00 00 FF 
0a7f0     28 E4 85 F1 | 	sub	objptr, ##27176
0a7f4     19 31 0A F2 | 	cmp	local06, local07 wz
0a7f8     35 00 00 AF 
0a7fc     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a800     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a804     01 32 06 A1 |  if_e	add	local07, #1
0a808     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a80c     35 00 00 AF 
0a810     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a814                 | ' return 0
0a814     00 FA 05 F6 | 	mov	result1, #0
0a818                 | LR__0925
0a818     A7 F0 03 F6 | 	mov	ptra, fp
0a81c     B2 00 A0 FD | 	call	#popregs_
0a820                 | _compile_dim_ret
0a820     2D 00 64 FD | 	ret
0a824                 | 
0a824                 | ' 
0a824                 | ' '----- compile 'for' command. 
0a824                 | ' 
0a824                 | ' function compile_for() as ulong  
0a824                 | _compile_for
0a824     0E 4A 05 F6 | 	mov	COUNT_, #14
0a828     A8 00 A0 FD | 	call	#pushregs_
0a82c                 | ' 
0a82c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a82c     37 00 00 FF 
0a830     64 E4 05 F1 | 	add	objptr, ##28260
0a834     F2 14 02 FB | 	rdlong	arg02, objptr
0a838     01 14 06 F1 | 	add	arg02, #1
0a83c     03 14 66 F0 | 	shl	arg02, #3
0a840     02 00 00 FF 
0a844     38 E4 85 F1 | 	sub	objptr, ##1080
0a848     F2 14 02 F1 | 	add	arg02, objptr
0a84c     0A 13 02 FB | 	rdlong	arg01, arg02
0a850     35 00 00 FF 
0a854     2C E4 85 F1 | 	sub	objptr, ##27180
0a858                 | ' 
0a858                 | ' select case s
0a858     C0 01 00 FF 
0a85c     4E 15 06 F6 | 	mov	arg02, ##@LR__5719
0a860     B8 DB B1 FD | 	call	#__system___string_cmp
0a864     00 FA 0D F2 | 	cmp	result1, #0 wz
0a868     1B FA 05 A6 |  if_e	mov	result1, #27
0a86c     00 FA 05 56 |  if_ne	mov	result1, #0
0a870     00 FA 0D F2 | 	cmp	result1, #0 wz
0a874     0C 00 90 AD |  if_e	jmp	#LR__0930
0a878     05 12 06 F6 | 	mov	arg01, #5
0a87c     A8 DB BF FD | 	call	#_compile_immediate_assign
0a880     08 00 90 FD | 	jmp	#LR__0931
0a884                 | LR__0930
0a884     20 FA 05 F6 | 	mov	result1, #32
0a888     58 08 90 FD | 	jmp	#LR__0947
0a88c                 | LR__0931
0a88c     4A 00 00 FF 
0a890     9C E4 05 F1 | 	add	objptr, ##38044
0a894     F2 14 02 FB | 	rdlong	arg02, objptr
0a898     0A 13 02 F6 | 	mov	arg01, arg02
0a89c     01 12 86 F1 | 	sub	arg01, #1
0a8a0     09 2D 02 F6 | 	mov	local04, arg01
0a8a4     01 2C 66 F0 | 	shl	local04, #1
0a8a8     09 2D 02 F1 | 	add	local04, arg01
0a8ac     02 2C 66 F0 | 	shl	local04, #2
0a8b0     03 00 00 FF 
0a8b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a8b8     F2 2C 02 F1 | 	add	local04, objptr
0a8bc     16 27 02 FB | 	rdlong	local01, local04
0a8c0     04 2C 06 F1 | 	add	local04, #4
0a8c4     16 2F 02 FB | 	rdlong	local05, local04
0a8c8     01 14 86 F1 | 	sub	arg02, #1
0a8cc     0A 2D 02 F6 | 	mov	local04, arg02
0a8d0     01 2C 66 F0 | 	shl	local04, #1
0a8d4     0A 2D 02 F1 | 	add	local04, arg02
0a8d8     02 2C 66 F0 | 	shl	local04, #2
0a8dc     F2 30 02 F6 | 	mov	local06, objptr
0a8e0     F2 2C 02 F1 | 	add	local04, objptr
0a8e4     08 2C 06 F1 | 	add	local04, #8
0a8e8     16 2D 02 FB | 	rdlong	local04, local04
0a8ec     17 29 02 F6 | 	mov	local02, local05
0a8f0     16 2B 02 F6 | 	mov	local03, local04
0a8f4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a8f4     17 2A 0E F2 | 	cmp	local03, #23 wz
0a8f8     47 00 00 FF 
0a8fc     9C E4 85 F1 | 	sub	objptr, ##36508
0a900     22 FA 05 56 |  if_ne	mov	result1, #34
0a904     DC 07 90 5D |  if_ne	jmp	#LR__0947
0a908     13 33 02 F6 | 	mov	local07, local01
0a90c                 | ' varnum=t1.result.uresult
0a90c                 | ' if lparts(ct).part$<>"to" then return 33
0a90c     37 00 00 FF 
0a910     64 E4 05 F1 | 	add	objptr, ##28260
0a914     F2 2C 02 FB | 	rdlong	local04, objptr
0a918     03 2C 66 F0 | 	shl	local04, #3
0a91c     02 00 00 FF 
0a920     38 E4 85 F1 | 	sub	objptr, ##1080
0a924     F2 2C 02 F1 | 	add	local04, objptr
0a928     16 13 02 FB | 	rdlong	arg01, local04
0a92c     C3 01 00 FF 
0a930     E8 14 06 F6 | 	mov	arg02, ##@LR__6012
0a934     35 00 00 FF 
0a938     2C E4 85 F1 | 	sub	objptr, ##27180
0a93c     DC DA B1 FD | 	call	#__system___string_cmp
0a940     00 FA 0D F2 | 	cmp	result1, #0 wz
0a944     21 FA 05 56 |  if_ne	mov	result1, #33
0a948     98 07 90 5D |  if_ne	jmp	#LR__0947
0a94c     37 00 00 FF 
0a950     64 E4 05 F1 | 	add	objptr, ##28260
0a954     F2 34 02 FB | 	rdlong	local08, objptr
0a958     01 34 06 F1 | 	add	local08, #1
0a95c     F2 34 62 FC | 	wrlong	local08, objptr
0a960     37 00 00 FF 
0a964     64 E4 85 F1 | 	sub	objptr, ##28260
0a968     2C 17 B0 FD | 	call	#_expr
0a96c                 | ' ct+=1
0a96c                 | ' expr()  										' there is "to" value pushed on the stack
0a96c                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a96c     37 00 00 FF 
0a970     64 E4 05 F1 | 	add	objptr, ##28260
0a974     F2 2C 02 FB | 	rdlong	local04, objptr
0a978     03 2C 66 F0 | 	shl	local04, #3
0a97c     02 00 00 FF 
0a980     38 E4 85 F1 | 	sub	objptr, ##1080
0a984     F2 2C 02 F1 | 	add	local04, objptr
0a988     16 13 02 FB | 	rdlong	arg01, local04
0a98c     C3 01 00 FF 
0a990     EB 14 06 F6 | 	mov	arg02, ##@LR__6013
0a994     35 00 00 FF 
0a998     2C E4 85 F1 | 	sub	objptr, ##27180
0a99c     7C DA B1 FD | 	call	#__system___string_cmp
0a9a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9a4     48 00 90 AD |  if_e	jmp	#LR__0932
0a9a8     37 00 00 FF 
0a9ac     64 E4 05 F1 | 	add	objptr, ##28260
0a9b0     F2 2C 02 FB | 	rdlong	local04, objptr
0a9b4     03 2C 66 F0 | 	shl	local04, #3
0a9b8     02 00 00 FF 
0a9bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c0     F2 2C 02 F1 | 	add	local04, objptr
0a9c4     16 13 02 FB | 	rdlong	arg01, local04
0a9c8     02 14 06 F6 | 	mov	arg02, #2
0a9cc     35 00 00 FF 
0a9d0     2C E4 85 F1 | 	sub	objptr, ##27180
0a9d4     9C FA B1 FD | 	call	#__system__Left_S
0a9d8     FD 12 02 F6 | 	mov	arg01, result1
0a9dc     C3 01 00 FF 
0a9e0     F0 14 06 F6 | 	mov	arg02, ##@LR__6014
0a9e4     34 DA B1 FD | 	call	#__system___string_cmp
0a9e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9ec     9C 05 90 5D |  if_ne	jmp	#LR__0945
0a9f0                 | LR__0932
0a9f0                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a9f0     37 00 00 FF 
0a9f4     64 E4 05 F1 | 	add	objptr, ##28260
0a9f8     F2 2C 02 FB | 	rdlong	local04, objptr
0a9fc     03 2C 66 F0 | 	shl	local04, #3
0aa00     02 00 00 FF 
0aa04     38 E4 85 F1 | 	sub	objptr, ##1080
0aa08     F2 2C 02 F1 | 	add	local04, objptr
0aa0c     16 13 02 FB | 	rdlong	arg01, local04
0aa10     02 14 06 F6 | 	mov	arg02, #2
0aa14     35 00 00 FF 
0aa18     2C E4 85 F1 | 	sub	objptr, ##27180
0aa1c     54 FA B1 FD | 	call	#__system__Left_S
0aa20     FD 12 02 F6 | 	mov	arg01, result1
0aa24     C3 01 00 FF 
0aa28     F3 14 06 F6 | 	mov	arg02, ##@LR__6015
0aa2c     EC D9 B1 FD | 	call	#__system___string_cmp
0aa30     00 FA 0D F2 | 	cmp	result1, #0 wz
0aa34     30 05 90 5D |  if_ne	jmp	#LR__0944
0aa38     37 00 00 FF 
0aa3c     64 E4 05 F1 | 	add	objptr, ##28260
0aa40     F2 2C 02 FB | 	rdlong	local04, objptr
0aa44     03 2C 66 F0 | 	shl	local04, #3
0aa48     02 00 00 FF 
0aa4c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa50     F2 2C 02 F1 | 	add	local04, objptr
0aa54     16 13 02 FB | 	rdlong	arg01, local04
0aa58     35 00 00 FF 
0aa5c     2C E4 85 F1 | 	sub	objptr, ##27180
0aa60     09 37 02 F6 | 	mov	local09, arg01
0aa64     97 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0aa68                 | LR__0933
0aa68     1B FB C9 FA | 	rdbyte	result1, local09 wz
0aa6c     01 36 06 51 |  if_ne	add	local09, #1
0aa70     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0aa74                 | LR__0934
0aa74     09 37 82 F1 | 	sub	local09, arg01
0aa78     03 36 56 F2 | 	cmps	local09, #3 wc
0aa7c     E8 04 90 CD |  if_b	jmp	#LR__0944
0aa80     37 00 00 FF 
0aa84     64 E4 05 F1 | 	add	objptr, ##28260
0aa88     F2 2C 02 FB | 	rdlong	local04, objptr
0aa8c     16 39 02 F6 | 	mov	local10, local04
0aa90     03 38 66 F0 | 	shl	local10, #3
0aa94     02 00 00 FF 
0aa98     38 E4 85 F1 | 	sub	objptr, ##1080
0aa9c     F2 38 02 F1 | 	add	local10, objptr
0aaa0     03 2C 66 F0 | 	shl	local04, #3
0aaa4     F2 2C 02 F1 | 	add	local04, objptr
0aaa8     16 2D 02 FB | 	rdlong	local04, local04
0aaac     02 00 00 FF 
0aab0     38 E4 05 F1 | 	add	objptr, ##1080
0aab4     F2 12 02 FB | 	rdlong	arg01, objptr
0aab8     03 12 66 F0 | 	shl	arg01, #3
0aabc     02 00 00 FF 
0aac0     38 E4 85 F1 | 	sub	objptr, ##1080
0aac4     F2 12 02 F1 | 	add	arg01, objptr
0aac8     09 13 02 FB | 	rdlong	arg01, arg01
0aacc     35 00 00 FF 
0aad0     2C E4 85 F1 | 	sub	objptr, ##27180
0aad4     09 37 02 F6 | 	mov	local09, arg01
0aad8     97 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0aadc                 | LR__0935
0aadc     1B FB C9 FA | 	rdbyte	result1, local09 wz
0aae0     01 36 06 51 |  if_ne	add	local09, #1
0aae4     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0aae8                 | LR__0936
0aae8     09 37 82 F1 | 	sub	local09, arg01
0aaec     1B 15 02 F6 | 	mov	arg02, local09
0aaf0     02 14 86 F1 | 	sub	arg02, #2
0aaf4     16 13 02 F6 | 	mov	arg01, local04
0aaf8     00 FA B1 FD | 	call	#__system__Right_S
0aafc     1C FB 61 FC | 	wrlong	result1, local10
0ab00     37 00 00 FF 
0ab04     64 E4 05 F1 | 	add	objptr, ##28260
0ab08     F2 2C 02 FB | 	rdlong	local04, objptr
0ab0c     16 39 02 F6 | 	mov	local10, local04
0ab10     03 38 66 F0 | 	shl	local10, #3
0ab14     02 00 00 FF 
0ab18     38 E4 85 F1 | 	sub	objptr, ##1080
0ab1c     F2 38 02 F1 | 	add	local10, objptr
0ab20     03 2C 66 F0 | 	shl	local04, #3
0ab24     F2 2C 02 F1 | 	add	local04, objptr
0ab28     16 13 02 FB | 	rdlong	arg01, local04
0ab2c     35 00 00 FF 
0ab30     2C E4 85 F1 | 	sub	objptr, ##27180
0ab34     28 B5 BF FD | 	call	#_isfunction
0ab38     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ab3c     04 38 06 F1 | 	add	local10, #4
0ab40     1C FB 61 FC | 	wrlong	result1, local10
0ab44                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0ab44     37 00 00 FF 
0ab48     64 E4 05 F1 | 	add	objptr, ##28260
0ab4c     F2 38 02 FB | 	rdlong	local10, objptr
0ab50     03 38 66 F0 | 	shl	local10, #3
0ab54     02 00 00 FF 
0ab58     38 E4 85 F1 | 	sub	objptr, ##1080
0ab5c     F2 38 02 F1 | 	add	local10, objptr
0ab60     04 38 06 F1 | 	add	local10, #4
0ab64     1C 2D 02 FB | 	rdlong	local04, local10
0ab68     01 2C 56 F2 | 	cmps	local04, #1 wc
0ab6c     35 00 00 FF 
0ab70     2C E4 85 F1 | 	sub	objptr, ##27180
0ab74     D4 03 90 3D |  if_ae	jmp	#LR__0943
0ab78     37 00 00 FF 
0ab7c     64 E4 05 F1 | 	add	objptr, ##28260
0ab80     F2 2C 02 FB | 	rdlong	local04, objptr
0ab84     16 39 02 F6 | 	mov	local10, local04
0ab88     03 38 66 F0 | 	shl	local10, #3
0ab8c     02 00 00 FF 
0ab90     38 E4 85 F1 | 	sub	objptr, ##1080
0ab94     F2 38 02 F1 | 	add	local10, objptr
0ab98     03 2C 66 F0 | 	shl	local04, #3
0ab9c     F2 2C 02 F1 | 	add	local04, objptr
0aba0     16 13 02 FB | 	rdlong	arg01, local04
0aba4     35 00 00 FF 
0aba8     2C E4 85 F1 | 	sub	objptr, ##27180
0abac     84 9D BF FD | 	call	#_isnotename
0abb0     04 38 06 F1 | 	add	local10, #4
0abb4     1C FB 61 FC | 	wrlong	result1, local10
0abb8                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0abb8                 | '     if lparts(ct).token>0 then 
0abb8     37 00 00 FF 
0abbc     64 E4 05 F1 | 	add	objptr, ##28260
0abc0     F2 38 02 FB | 	rdlong	local10, objptr
0abc4     03 38 66 F0 | 	shl	local10, #3
0abc8     02 00 00 FF 
0abcc     38 E4 85 F1 | 	sub	objptr, ##1080
0abd0     F2 38 02 F1 | 	add	local10, objptr
0abd4     04 38 06 F1 | 	add	local10, #4
0abd8     1C 2D 02 FB | 	rdlong	local04, local10
0abdc     01 2C 56 F2 | 	cmps	local04, #1 wc
0abe0     35 00 00 FF 
0abe4     2C E4 85 F1 | 	sub	objptr, ##27180
0abe8     94 00 90 CD |  if_b	jmp	#LR__0937
0abec     37 00 00 FF 
0abf0     64 E4 05 F1 | 	add	objptr, ##28260
0abf4     F2 38 02 FB | 	rdlong	local10, objptr
0abf8     03 38 66 F0 | 	shl	local10, #3
0abfc     02 00 00 FF 
0ac00     38 E4 85 F1 | 	sub	objptr, ##1080
0ac04     F2 38 02 F1 | 	add	local10, objptr
0ac08     04 38 06 F1 | 	add	local10, #4
0ac0c     1C 13 02 FB | 	rdlong	arg01, local10
0ac10     35 00 00 FF 
0ac14     2C E4 85 F1 | 	sub	objptr, ##27180
0ac18     8C C6 BF FD | 	call	#_getnoteval
0ac1c     FD 12 02 F6 | 	mov	arg01, result1
0ac20     37 00 00 FF 
0ac24     64 E4 05 F1 | 	add	objptr, ##28260
0ac28     F2 38 02 FB | 	rdlong	local10, objptr
0ac2c     03 38 66 F0 | 	shl	local10, #3
0ac30     02 00 00 FF 
0ac34     38 E4 85 F1 | 	sub	objptr, ##1080
0ac38     F2 38 02 F1 | 	add	local10, objptr
0ac3c     35 00 00 FF 
0ac40     2C E4 85 F1 | 	sub	objptr, ##27180
0ac44     24 FA B1 FD | 	call	#__system__str_S
0ac48     1C FB 61 FC | 	wrlong	result1, local10
0ac4c     37 00 00 FF 
0ac50     64 E4 05 F1 | 	add	objptr, ##28260
0ac54     F2 38 02 FB | 	rdlong	local10, objptr
0ac58     03 38 66 F0 | 	shl	local10, #3
0ac5c     02 00 00 FF 
0ac60     38 E4 85 F1 | 	sub	objptr, ##1080
0ac64     F2 38 02 F1 | 	add	local10, objptr
0ac68     04 38 06 F1 | 	add	local10, #4
0ac6c     01 00 80 FF 
0ac70     1C 05 68 FC | 	wrlong	##514, local10
0ac74     35 00 00 FF 
0ac78     2C E4 85 F1 | 	sub	objptr, ##27180
0ac7c     CC 02 90 FD | 	jmp	#LR__0943
0ac80                 | LR__0937
0ac80     37 00 00 FF 
0ac84     64 E4 05 F1 | 	add	objptr, ##28260
0ac88     F2 2C 02 FB | 	rdlong	local04, objptr
0ac8c     16 39 02 F6 | 	mov	local10, local04
0ac90     03 38 66 F0 | 	shl	local10, #3
0ac94     02 00 00 FF 
0ac98     38 E4 85 F1 | 	sub	objptr, ##1080
0ac9c     F2 38 02 F1 | 	add	local10, objptr
0aca0     03 2C 66 F0 | 	shl	local04, #3
0aca4     F2 2C 02 F1 | 	add	local04, objptr
0aca8     16 13 02 FB | 	rdlong	arg01, local04
0acac     35 00 00 FF 
0acb0     2C E4 85 F1 | 	sub	objptr, ##27180
0acb4     FC 9B BF FD | 	call	#_isconstant
0acb8     04 38 06 F1 | 	add	local10, #4
0acbc     1C FB 61 FC | 	wrlong	result1, local10
0acc0                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0acc0     37 00 00 FF 
0acc4     64 E4 05 F1 | 	add	objptr, ##28260
0acc8     F2 38 02 FB | 	rdlong	local10, objptr
0accc     03 38 66 F0 | 	shl	local10, #3
0acd0     02 00 00 FF 
0acd4     38 E4 85 F1 | 	sub	objptr, ##1080
0acd8     F2 38 02 F1 | 	add	local10, objptr
0acdc     04 38 06 F1 | 	add	local10, #4
0ace0     1C 2D 02 FB | 	rdlong	local04, local10
0ace4     01 2C 56 F2 | 	cmps	local04, #1 wc
0ace8     35 00 00 FF 
0acec     2C E4 85 F1 | 	sub	objptr, ##27180
0acf0     8C 00 90 CD |  if_b	jmp	#LR__0938
0acf4     37 00 00 FF 
0acf8     64 E4 05 F1 | 	add	objptr, ##28260
0acfc     F2 34 02 FB | 	rdlong	local08, objptr
0ad00     1A 39 02 F6 | 	mov	local10, local08
0ad04     03 38 66 F0 | 	shl	local10, #3
0ad08     02 00 00 FF 
0ad0c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad10     F2 38 02 F1 | 	add	local10, objptr
0ad14     03 34 66 F0 | 	shl	local08, #3
0ad18     F2 34 02 F1 | 	add	local08, objptr
0ad1c     04 34 06 F1 | 	add	local08, #4
0ad20     1A 13 02 FB | 	rdlong	arg01, local08
0ad24     35 00 00 FF 
0ad28     2C E4 85 F1 | 	sub	objptr, ##27180
0ad2c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ad30     1F 3A C6 C9 |  if_b	decod	local11, #31
0ad34     00 3A 06 36 |  if_ae	mov	local11, #0
0ad38     30 01 B2 FD | 	call	#__system___float_fromuns
0ad3c     1D FB 61 F5 | 	xor	result1, local11
0ad40     FD 12 02 F6 | 	mov	arg01, result1
0ad44     24 F9 B1 FD | 	call	#__system__str_S
0ad48     1C FB 61 FC | 	wrlong	result1, local10
0ad4c     37 00 00 FF 
0ad50     64 E4 05 F1 | 	add	objptr, ##28260
0ad54     F2 38 02 FB | 	rdlong	local10, objptr
0ad58     03 38 66 F0 | 	shl	local10, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 38 02 F1 | 	add	local10, objptr
0ad68     04 38 06 F1 | 	add	local10, #4
0ad6c     01 00 80 FF 
0ad70     1C 03 68 FC | 	wrlong	##513, local10
0ad74     35 00 00 FF 
0ad78     2C E4 85 F1 | 	sub	objptr, ##27180
0ad7c     CC 01 90 FD | 	jmp	#LR__0943
0ad80                 | LR__0938
0ad80     37 00 00 FF 
0ad84     64 E4 05 F1 | 	add	objptr, ##28260
0ad88     F2 38 02 FB | 	rdlong	local10, objptr
0ad8c     03 38 66 F0 | 	shl	local10, #3
0ad90     02 00 00 FF 
0ad94     38 E4 85 F1 | 	sub	objptr, ##1080
0ad98     F2 38 02 F1 | 	add	local10, objptr
0ad9c     1C 13 02 FB | 	rdlong	arg01, local10
0ada0     35 00 00 FF 
0ada4     2C E4 85 F1 | 	sub	objptr, ##27180
0ada8     48 BD BF FD | 	call	#_isnum
0adac     FD 3C 02 F6 | 	mov	local12, result1
0adb0     37 00 00 FF 
0adb4     64 E4 05 F1 | 	add	objptr, ##28260
0adb8     F2 38 02 FB | 	rdlong	local10, objptr
0adbc     03 38 66 F0 | 	shl	local10, #3
0adc0     02 00 00 FF 
0adc4     38 E4 85 F1 | 	sub	objptr, ##1080
0adc8     F2 38 02 F1 | 	add	local10, objptr
0adcc     1C 13 02 FB | 	rdlong	arg01, local10
0add0     35 00 00 FF 
0add4     2C E4 85 F1 | 	sub	objptr, ##27180
0add8     04 C1 BF FD | 	call	#_isint
0addc     FD 3E 02 F6 | 	mov	local13, result1
0ade0     37 00 00 FF 
0ade4     64 E4 05 F1 | 	add	objptr, ##28260
0ade8     F2 38 02 FB | 	rdlong	local10, objptr
0adec     03 38 66 F0 | 	shl	local10, #3
0adf0     02 00 00 FF 
0adf4     38 E4 85 F1 | 	sub	objptr, ##1080
0adf8     F2 38 02 F1 | 	add	local10, objptr
0adfc     1C 13 02 FB | 	rdlong	arg01, local10
0ae00     35 00 00 FF 
0ae04     2C E4 85 F1 | 	sub	objptr, ##27180
0ae08     78 C3 BF FD | 	call	#_isdec
0ae0c     FD 40 02 F6 | 	mov	local14, result1
0ae10                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ae10                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ae10     00 3C 0E F2 | 	cmp	local12, #0 wz
0ae14     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ae18     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ae1c     34 00 90 AD |  if_e	jmp	#LR__0939
0ae20     37 00 00 FF 
0ae24     64 E4 05 F1 | 	add	objptr, ##28260
0ae28     F2 38 02 FB | 	rdlong	local10, objptr
0ae2c     03 38 66 F0 | 	shl	local10, #3
0ae30     02 00 00 FF 
0ae34     38 E4 85 F1 | 	sub	objptr, ##1080
0ae38     F2 38 02 F1 | 	add	local10, objptr
0ae3c     04 38 06 F1 | 	add	local10, #4
0ae40     01 00 80 FF 
0ae44     1C 01 68 FC | 	wrlong	##512, local10
0ae48     35 00 00 FF 
0ae4c     2C E4 85 F1 | 	sub	objptr, ##27180
0ae50     F8 00 90 FD | 	jmp	#LR__0943
0ae54                 | LR__0939
0ae54                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ae54     00 3C 0E F2 | 	cmp	local12, #0 wz
0ae58     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ae5c     20 35 22 56 |  if_ne	not	local08, local14
0ae60     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ae64     34 00 90 AD |  if_e	jmp	#LR__0940
0ae68     37 00 00 FF 
0ae6c     64 E4 05 F1 | 	add	objptr, ##28260
0ae70     F2 38 02 FB | 	rdlong	local10, objptr
0ae74     03 38 66 F0 | 	shl	local10, #3
0ae78     02 00 00 FF 
0ae7c     38 E4 85 F1 | 	sub	objptr, ##1080
0ae80     F2 38 02 F1 | 	add	local10, objptr
0ae84     04 38 06 F1 | 	add	local10, #4
0ae88     01 00 80 FF 
0ae8c     1C 03 68 FC | 	wrlong	##513, local10
0ae90     35 00 00 FF 
0ae94     2C E4 85 F1 | 	sub	objptr, ##27180
0ae98     B0 00 90 FD | 	jmp	#LR__0943
0ae9c                 | LR__0940
0ae9c                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ae9c     00 3C 0E F2 | 	cmp	local12, #0 wz
0aea0     1F 3F 22 56 |  if_ne	not	local13, local13
0aea4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0aea8     20 41 22 56 |  if_ne	not	local14, local14
0aeac     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0aeb0     34 00 90 AD |  if_e	jmp	#LR__0941
0aeb4     37 00 00 FF 
0aeb8     64 E4 05 F1 | 	add	objptr, ##28260
0aebc     F2 38 02 FB | 	rdlong	local10, objptr
0aec0     03 38 66 F0 | 	shl	local10, #3
0aec4     02 00 00 FF 
0aec8     38 E4 85 F1 | 	sub	objptr, ##1080
0aecc     F2 38 02 F1 | 	add	local10, objptr
0aed0     04 38 06 F1 | 	add	local10, #4
0aed4     01 00 80 FF 
0aed8     1C 05 68 FC | 	wrlong	##514, local10
0aedc     35 00 00 FF 
0aee0     2C E4 85 F1 | 	sub	objptr, ##27180
0aee4     64 00 90 FD | 	jmp	#LR__0943
0aee8                 | LR__0941
0aee8                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0aee8     37 00 00 FF 
0aeec     64 E4 05 F1 | 	add	objptr, ##28260
0aef0     F2 38 02 FB | 	rdlong	local10, objptr
0aef4     03 38 66 F0 | 	shl	local10, #3
0aef8     02 00 00 FF 
0aefc     38 E4 85 F1 | 	sub	objptr, ##1080
0af00     F2 38 02 F1 | 	add	local10, objptr
0af04     1C 13 02 FB | 	rdlong	arg01, local10
0af08     35 00 00 FF 
0af0c     2C E4 85 F1 | 	sub	objptr, ##27180
0af10     6C B9 BF FD | 	call	#_isname
0af14     00 FA 0D F2 | 	cmp	result1, #0 wz
0af18     30 00 90 AD |  if_e	jmp	#LR__0942
0af1c     37 00 00 FF 
0af20     64 E4 05 F1 | 	add	objptr, ##28260
0af24     F2 38 02 FB | 	rdlong	local10, objptr
0af28     03 38 66 F0 | 	shl	local10, #3
0af2c     02 00 00 FF 
0af30     38 E4 85 F1 | 	sub	objptr, ##1080
0af34     F2 38 02 F1 | 	add	local10, objptr
0af38     04 38 06 F1 | 	add	local10, #4
0af3c     01 00 80 FF 
0af40     1C 09 68 FC | 	wrlong	##516, local10
0af44     35 00 00 FF 
0af48     2C E4 85 F1 | 	sub	objptr, ##27180
0af4c                 | LR__0942
0af4c                 | LR__0943
0af4c     37 00 00 FF 
0af50     64 E4 05 F1 | 	add	objptr, ##28260
0af54     F2 34 02 FB | 	rdlong	local08, objptr
0af58     01 34 86 F1 | 	sub	local08, #1
0af5c     F2 34 62 FC | 	wrlong	local08, objptr
0af60     37 00 00 FF 
0af64     64 E4 85 F1 | 	sub	objptr, ##28260
0af68                 | LR__0944
0af68     37 00 00 FF 
0af6c     64 E4 05 F1 | 	add	objptr, ##28260
0af70     F2 34 02 FB | 	rdlong	local08, objptr
0af74     01 34 06 F1 | 	add	local08, #1
0af78     F2 34 62 FC | 	wrlong	local08, objptr
0af7c     37 00 00 FF 
0af80     64 E4 85 F1 | 	sub	objptr, ##28260
0af84     10 11 B0 FD | 	call	#_expr
0af88     78 00 90 FD | 	jmp	#LR__0946
0af8c                 | LR__0945
0af8c     4A 00 00 FF 
0af90     9C E4 05 F1 | 	add	objptr, ##38044
0af94     F2 40 02 FB | 	rdlong	local14, objptr
0af98     20 39 02 F6 | 	mov	local10, local14
0af9c     01 38 66 F0 | 	shl	local10, #1
0afa0     20 39 02 F1 | 	add	local10, local14
0afa4     02 38 66 F0 | 	shl	local10, #2
0afa8     03 00 00 FF 
0afac     00 E4 85 F1 | 	sub	objptr, ##1536
0afb0     F2 38 02 F1 | 	add	local10, objptr
0afb4     08 38 06 F1 | 	add	local10, #8
0afb8     1C 39 68 FC | 	wrlong	#28, local10
0afbc     03 00 00 FF 
0afc0     00 E4 05 F1 | 	add	objptr, ##1536
0afc4     F2 40 02 FB | 	rdlong	local14, objptr
0afc8     20 39 02 F6 | 	mov	local10, local14
0afcc     01 38 66 F0 | 	shl	local10, #1
0afd0     20 39 02 F1 | 	add	local10, local14
0afd4     02 38 66 F0 | 	shl	local10, #2
0afd8     03 00 00 FF 
0afdc     00 E4 85 F1 | 	sub	objptr, ##1536
0afe0     F2 38 02 F1 | 	add	local10, objptr
0afe4     1C 03 68 FC | 	wrlong	#1, local10
0afe8     03 00 00 FF 
0afec     00 E4 05 F1 | 	add	objptr, ##1536
0aff0     F2 34 02 FB | 	rdlong	local08, objptr
0aff4     01 34 06 F1 | 	add	local08, #1
0aff8     F2 34 62 FC | 	wrlong	local08, objptr
0affc     4A 00 00 FF 
0b000     9C E4 85 F1 | 	sub	objptr, ##38044
0b004                 | LR__0946
0b004     4A 00 00 FF 
0b008     9C E4 05 F1 | 	add	objptr, ##38044
0b00c     F2 40 02 FB | 	rdlong	local14, objptr
0b010     20 39 02 F6 | 	mov	local10, local14
0b014     01 38 66 F0 | 	shl	local10, #1
0b018     20 39 02 F1 | 	add	local10, local14
0b01c     02 38 66 F0 | 	shl	local10, #2
0b020     03 00 00 FF 
0b024     00 E4 85 F1 | 	sub	objptr, ##1536
0b028     F2 38 02 F1 | 	add	local10, objptr
0b02c     08 38 06 F1 | 	add	local10, #8
0b030     1C 39 68 FC | 	wrlong	#28, local10
0b034     03 00 00 FF 
0b038     00 E4 05 F1 | 	add	objptr, ##1536
0b03c     F2 40 02 FB | 	rdlong	local14, objptr
0b040     20 39 02 F6 | 	mov	local10, local14
0b044     01 38 66 F0 | 	shl	local10, #1
0b048     20 39 02 F1 | 	add	local10, local14
0b04c     02 38 66 F0 | 	shl	local10, #2
0b050     03 00 00 FF 
0b054     00 E4 85 F1 | 	sub	objptr, ##1536
0b058     F2 38 02 F1 | 	add	local10, objptr
0b05c     1C 33 62 FC | 	wrlong	local07, local10
0b060     03 00 00 FF 
0b064     00 E4 05 F1 | 	add	objptr, ##1536
0b068     F2 40 02 FB | 	rdlong	local14, objptr
0b06c     01 40 06 F1 | 	add	local14, #1
0b070     F2 40 62 FC | 	wrlong	local14, objptr
0b074     20 39 02 F6 | 	mov	local10, local14
0b078     01 38 66 F0 | 	shl	local10, #1
0b07c     20 39 02 F1 | 	add	local10, local14
0b080     02 38 66 F0 | 	shl	local10, #2
0b084     03 00 00 FF 
0b088     00 E4 85 F1 | 	sub	objptr, ##1536
0b08c     F2 38 02 F1 | 	add	local10, objptr
0b090     08 38 06 F1 | 	add	local10, #8
0b094     1C 95 68 FC | 	wrlong	#74, local10
0b098     03 00 00 FF 
0b09c     00 E4 05 F1 | 	add	objptr, ##1536
0b0a0     F2 40 02 FB | 	rdlong	local14, objptr
0b0a4     20 39 02 F6 | 	mov	local10, local14
0b0a8     01 38 66 F0 | 	shl	local10, #1
0b0ac     20 39 02 F1 | 	add	local10, local14
0b0b0     02 38 66 F0 | 	shl	local10, #2
0b0b4     03 00 00 FF 
0b0b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b0bc     F2 38 02 F1 | 	add	local10, objptr
0b0c0     1C 01 68 FC | 	wrlong	#0, local10
0b0c4     03 00 00 FF 
0b0c8     00 E4 05 F1 | 	add	objptr, ##1536
0b0cc     F2 34 02 FB | 	rdlong	local08, objptr
0b0d0     01 34 06 F1 | 	add	local08, #1
0b0d4     F2 34 62 FC | 	wrlong	local08, objptr
0b0d8     4A 00 00 FF 
0b0dc     9C E4 85 F1 | 	sub	objptr, ##38044
0b0e0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0b0e0                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0e0                 | ' return 0
0b0e0     00 FA 05 F6 | 	mov	result1, #0
0b0e4                 | LR__0947
0b0e4     A7 F0 03 F6 | 	mov	ptra, fp
0b0e8     B2 00 A0 FD | 	call	#popregs_
0b0ec                 | _compile_for_ret
0b0ec     2D 00 64 FD | 	ret
0b0f0                 | 
0b0f0                 | ' 
0b0f0                 | ' '----- compile 'next' command. 
0b0f0                 | ' 
0b0f0                 | ' function compile_next() as ulong
0b0f0                 | _compile_next
0b0f0     04 4A 05 F6 | 	mov	COUNT_, #4
0b0f4     A8 00 A0 FD | 	call	#pushregs_
0b0f8     37 00 00 FF 
0b0fc     64 E4 05 F1 | 	add	objptr, ##28260
0b100     F2 14 02 FB | 	rdlong	arg02, objptr
0b104     03 14 66 F0 | 	shl	arg02, #3
0b108     02 00 00 FF 
0b10c     38 E4 85 F1 | 	sub	objptr, ##1080
0b110     F2 14 02 F1 | 	add	arg02, objptr
0b114     0A 27 02 FB | 	rdlong	local01, arg02
0b118                 | ' 
0b118                 | ' varname$=lparts(ct).part$ 
0b118                 | ' if varnum=0 then return 35
0b118     04 E4 85 F1 | 	sub	objptr, #4
0b11c     F2 14 0A FB | 	rdlong	arg02, objptr wz
0b120     35 00 00 FF 
0b124     28 E4 85 F1 | 	sub	objptr, ##27176
0b128     23 FA 05 A6 |  if_e	mov	result1, #35
0b12c     4C 01 90 AD |  if_e	jmp	#LR__0952
0b130     01 28 66 F6 | 	neg	local02, #1
0b134                 | ' j=-1
0b134                 | ' for i=0 to varnum-1
0b134     00 2A 06 F6 | 	mov	local03, #0
0b138     35 00 00 FF 
0b13c     28 E4 05 F1 | 	add	objptr, ##27176
0b140     F2 2C 02 FB | 	rdlong	local04, objptr
0b144     35 00 00 FF 
0b148     28 E4 85 F1 | 	sub	objptr, ##27176
0b14c                 | LR__0950
0b14c     16 2B 12 F2 | 	cmp	local03, local04 wc
0b150     38 00 90 3D |  if_ae	jmp	#LR__0951
0b154                 | '   if variables(i).name=varname$ then j=i : exit
0b154     15 15 02 F6 | 	mov	arg02, local03
0b158     04 14 66 F0 | 	shl	arg02, #4
0b15c     15 00 00 FF 
0b160     18 E4 05 F1 | 	add	objptr, ##10776
0b164     F2 14 02 F1 | 	add	arg02, objptr
0b168     0A 13 02 FB | 	rdlong	arg01, arg02
0b16c     13 15 02 F6 | 	mov	arg02, local01
0b170     15 00 00 FF 
0b174     18 E4 85 F1 | 	sub	objptr, ##10776
0b178     A0 D2 B1 FD | 	call	#__system___string_cmp
0b17c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b180     15 29 02 A6 |  if_e	mov	local02, local03
0b184     01 2A 06 51 |  if_ne	add	local03, #1
0b188     C0 FF 9F 5D |  if_ne	jmp	#LR__0950
0b18c                 | LR__0951
0b18c                 | ' if j=-1 then return 35
0b18c     FF FF 7F FF 
0b190     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0b194     23 FA 05 A6 |  if_e	mov	result1, #35
0b198     E0 00 90 AD |  if_e	jmp	#LR__0952
0b19c     4A 00 00 FF 
0b1a0     9C E4 05 F1 | 	add	objptr, ##38044
0b1a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1a8     16 2B 02 F6 | 	mov	local03, local04
0b1ac     01 2A 66 F0 | 	shl	local03, #1
0b1b0     16 2B 02 F1 | 	add	local03, local04
0b1b4     02 2A 66 F0 | 	shl	local03, #2
0b1b8     03 00 00 FF 
0b1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b1c0     F2 2A 02 F1 | 	add	local03, objptr
0b1c4     08 2A 06 F1 | 	add	local03, #8
0b1c8     15 39 68 FC | 	wrlong	#28, local03
0b1cc     03 00 00 FF 
0b1d0     00 E4 05 F1 | 	add	objptr, ##1536
0b1d4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1d8     16 2B 02 F6 | 	mov	local03, local04
0b1dc     01 2A 66 F0 | 	shl	local03, #1
0b1e0     16 2B 02 F1 | 	add	local03, local04
0b1e4     02 2A 66 F0 | 	shl	local03, #2
0b1e8     03 00 00 FF 
0b1ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b1f0     F2 2A 02 F1 | 	add	local03, objptr
0b1f4     15 29 62 FC | 	wrlong	local02, local03
0b1f8     03 00 00 FF 
0b1fc     00 E4 05 F1 | 	add	objptr, ##1536
0b200     F2 2C 02 FB | 	rdlong	local04, objptr
0b204     01 2C 06 F1 | 	add	local04, #1
0b208     F2 2C 62 FC | 	wrlong	local04, objptr
0b20c     16 2B 02 F6 | 	mov	local03, local04
0b210     01 2A 66 F0 | 	shl	local03, #1
0b214     16 2B 02 F1 | 	add	local03, local04
0b218     02 2A 66 F0 | 	shl	local03, #2
0b21c     03 00 00 FF 
0b220     00 E4 85 F1 | 	sub	objptr, ##1536
0b224     F2 2A 02 F1 | 	add	local03, objptr
0b228     08 2A 06 F1 | 	add	local03, #8
0b22c     15 97 68 FC | 	wrlong	#75, local03
0b230     03 00 00 FF 
0b234     00 E4 05 F1 | 	add	objptr, ##1536
0b238     F2 2C 02 FB | 	rdlong	local04, objptr
0b23c     16 2B 02 F6 | 	mov	local03, local04
0b240     01 2A 66 F0 | 	shl	local03, #1
0b244     16 2B 02 F1 | 	add	local03, local04
0b248     02 2A 66 F0 | 	shl	local03, #2
0b24c     03 00 00 FF 
0b250     00 E4 85 F1 | 	sub	objptr, ##1536
0b254     F2 2A 02 F1 | 	add	local03, objptr
0b258     15 01 68 FC | 	wrlong	#0, local03
0b25c     03 00 00 FF 
0b260     00 E4 05 F1 | 	add	objptr, ##1536
0b264     F2 2C 02 FB | 	rdlong	local04, objptr
0b268     01 2C 06 F1 | 	add	local04, #1
0b26c     F2 2C 62 FC | 	wrlong	local04, objptr
0b270     4A 00 00 FF 
0b274     9C E4 85 F1 | 	sub	objptr, ##38044
0b278                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b278                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b278                 | ' return 0
0b278     00 FA 05 F6 | 	mov	result1, #0
0b27c                 | LR__0952
0b27c     A7 F0 03 F6 | 	mov	ptra, fp
0b280     B2 00 A0 FD | 	call	#popregs_
0b284                 | _compile_next_ret
0b284     2D 00 64 FD | 	ret
0b288                 | 
0b288                 | ' 
0b288                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b288                 | ' 
0b288                 | ' function compile_gosub() as ulong
0b288                 | _compile_gosub
0b288     02 4A 05 F6 | 	mov	COUNT_, #2
0b28c     A8 00 A0 FD | 	call	#pushregs_
0b290     4A 00 00 FF 
0b294     9C E4 05 F1 | 	add	objptr, ##38044
0b298     F2 26 02 FB | 	rdlong	local01, objptr
0b29c     13 29 02 F6 | 	mov	local02, local01
0b2a0     01 28 66 F0 | 	shl	local02, #1
0b2a4     13 29 02 F1 | 	add	local02, local01
0b2a8     02 28 66 F0 | 	shl	local02, #2
0b2ac     03 00 00 FF 
0b2b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b2b4     F2 28 02 F1 | 	add	local02, objptr
0b2b8     08 28 06 F1 | 	add	local02, #8
0b2bc     14 53 69 FC | 	wrlong	#169, local02
0b2c0     03 00 00 FF 
0b2c4     00 E4 05 F1 | 	add	objptr, ##1536
0b2c8     F2 28 02 FB | 	rdlong	local02, objptr
0b2cc     01 28 06 F1 | 	add	local02, #1
0b2d0     F2 28 62 FC | 	wrlong	local02, objptr
0b2d4     4A 00 00 FF 
0b2d8     9C E4 85 F1 | 	sub	objptr, ##38044
0b2dc     0C 00 B0 FD | 	call	#_compile_goto
0b2e0                 | ' compiledline(lineptr).result_type=token_gosub
0b2e0                 | ' lineptr+=1
0b2e0                 | ' err=compile_goto()
0b2e0                 | ' return err
0b2e0     A7 F0 03 F6 | 	mov	ptra, fp
0b2e4     B2 00 A0 FD | 	call	#popregs_
0b2e8                 | _compile_gosub_ret
0b2e8     2D 00 64 FD | 	ret
0b2ec                 | 
0b2ec                 | ' 
0b2ec                 | ' '----- compile 'goto' 
0b2ec                 | ' 
0b2ec                 | ' function compile_goto() as ulong
0b2ec                 | _compile_goto
0b2ec     03 4A 05 F6 | 	mov	COUNT_, #3
0b2f0     A8 00 A0 FD | 	call	#pushregs_
0b2f4     34 F0 07 F1 | 	add	ptra, #52
0b2f8                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b2f8     37 00 00 FF 
0b2fc     64 E4 05 F1 | 	add	objptr, ##28260
0b300     F2 16 02 FB | 	rdlong	arg03, objptr
0b304     03 16 66 F0 | 	shl	arg03, #3
0b308     02 00 00 FF 
0b30c     38 E4 85 F1 | 	sub	objptr, ##1080
0b310     F2 16 02 F1 | 	add	arg03, objptr
0b314     04 16 06 F1 | 	add	arg03, #4
0b318     0B 17 02 FB | 	rdlong	arg03, arg03
0b31c     01 00 00 FF 
0b320     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b324     35 00 00 FF 
0b328     2C E4 85 F1 | 	sub	objptr, ##27180
0b32c     CC 02 90 5D |  if_ne	jmp	#LR__0965
0b330     37 00 00 FF 
0b334     64 E4 05 F1 | 	add	objptr, ##28260
0b338     F2 16 02 FB | 	rdlong	arg03, objptr
0b33c     01 16 06 F1 | 	add	arg03, #1
0b340     03 16 66 F0 | 	shl	arg03, #3
0b344     02 00 00 FF 
0b348     38 E4 85 F1 | 	sub	objptr, ##1080
0b34c     F2 16 02 F1 | 	add	arg03, objptr
0b350     04 16 06 F1 | 	add	arg03, #4
0b354     0B 17 02 FB | 	rdlong	arg03, arg03
0b358     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b35c     35 00 00 FF 
0b360     2C E4 85 F1 | 	sub	objptr, ##27180
0b364     94 02 90 5D |  if_ne	jmp	#LR__0965
0b368     37 00 00 FF 
0b36c     64 E4 05 F1 | 	add	objptr, ##28260
0b370     F2 16 02 FB | 	rdlong	arg03, objptr
0b374     03 16 66 F0 | 	shl	arg03, #3
0b378     02 00 00 FF 
0b37c     38 E4 85 F1 | 	sub	objptr, ##1080
0b380     F2 16 02 F1 | 	add	arg03, objptr
0b384     0B 13 02 FB | 	rdlong	arg01, arg03
0b388     00 14 06 F6 | 	mov	arg02, #0
0b38c     35 00 00 FF 
0b390     2C E4 85 F1 | 	sub	objptr, ##27180
0b394     50 05 B2 FD | 	call	#__system____builtin_atoi
0b398     04 4E 05 F1 | 	add	fp, #4
0b39c     A7 FA 61 FC | 	wrlong	result1, fp
0b3a0     4A 00 00 FF 
0b3a4     9C E4 05 F1 | 	add	objptr, ##38044
0b3a8     F2 26 02 FB | 	rdlong	local01, objptr
0b3ac     13 29 02 F6 | 	mov	local02, local01
0b3b0     01 28 66 F0 | 	shl	local02, #1
0b3b4     13 29 02 F1 | 	add	local02, local01
0b3b8     02 28 66 F0 | 	shl	local02, #2
0b3bc     03 00 00 FF 
0b3c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3c4     F2 28 02 F1 | 	add	local02, objptr
0b3c8     08 28 06 F1 | 	add	local02, #8
0b3cc     14 9D 68 FC | 	wrlong	#78, local02
0b3d0     03 00 00 FF 
0b3d4     0C E4 05 F1 | 	add	objptr, ##1548
0b3d8     F2 2A 02 FB | 	rdlong	local03, objptr
0b3dc     4A 00 00 FF 
0b3e0     A8 E4 85 F1 | 	sub	objptr, ##38056
0b3e4     04 4E 05 F1 | 	add	fp, #4
0b3e8     A7 2A 62 FC | 	wrlong	local03, fp
0b3ec     08 4E 85 F1 | 	sub	fp, #8
0b3f0                 | '   gotoline=val%(lparts(ct).part$) 
0b3f0                 | '   compiledline(lineptr).result_type=token_fast_goto
0b3f0                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b3f0                 | '   do
0b3f0                 | LR__0960
0b3f0     10 4E 05 F1 | 	add	fp, #16
0b3f4     A7 12 02 F6 | 	mov	arg01, fp
0b3f8     08 4E 85 F1 | 	sub	fp, #8
0b3fc     A7 14 02 FB | 	rdlong	arg02, fp
0b400     08 4E 85 F1 | 	sub	fp, #8
0b404     18 16 06 F6 | 	mov	arg03, #24
0b408     0B 00 00 FF 
0b40c     CC E4 05 F1 | 	add	objptr, ##5836
0b410     3C C3 B1 FD | 	call	#_psram_spin2_read1
0b414     0B 00 00 FF 
0b418     CC E4 85 F1 | 	sub	objptr, ##5836
0b41c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b41c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b41c     10 4E 05 F1 | 	add	fp, #16
0b420     A7 2A 02 FB | 	rdlong	local03, fp
0b424     10 4E 85 F1 | 	sub	fp, #16
0b428     FF FF 7F FF 
0b42c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b430     24 00 90 AD |  if_e	jmp	#LR__0961
0b434     08 4E 05 F1 | 	add	fp, #8
0b438     A7 2A 02 FB | 	rdlong	local03, fp
0b43c     04 4E 05 F1 | 	add	fp, #4
0b440     A7 2A 62 FC | 	wrlong	local03, fp
0b444     18 4E 05 F1 | 	add	fp, #24
0b448     A7 2A 02 FB | 	rdlong	local03, fp
0b44c     1C 4E 85 F1 | 	sub	fp, #28
0b450     A7 2A 62 FC | 	wrlong	local03, fp
0b454     08 4E 85 F1 | 	sub	fp, #8
0b458                 | LR__0961
0b458     24 4E 05 F1 | 	add	fp, #36
0b45c     A7 2A 02 FB | 	rdlong	local03, fp
0b460     24 4E 85 F1 | 	sub	fp, #36
0b464     FF FF 3F FF 
0b468     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b46c     10 4E 05 51 |  if_ne	add	fp, #16
0b470     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b474     10 4E 85 51 |  if_ne	sub	fp, #16
0b478     FF FF 7F 5F 
0b47c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b480     1C 00 90 AD |  if_e	jmp	#LR__0962
0b484     10 4E 05 F1 | 	add	fp, #16
0b488     A7 2A 02 FB | 	rdlong	local03, fp
0b48c     0C 4E 85 F1 | 	sub	fp, #12
0b490     A7 28 02 FB | 	rdlong	local02, fp
0b494     04 4E 85 F1 | 	sub	fp, #4
0b498     14 2B 0A F2 | 	cmp	local03, local02 wz
0b49c     50 FF 9F 5D |  if_ne	jmp	#LR__0960
0b4a0                 | LR__0962
0b4a0                 | '   if gotoheader(0)=gotoline then
0b4a0     10 4E 05 F1 | 	add	fp, #16
0b4a4     A7 2A 02 FB | 	rdlong	local03, fp
0b4a8     0C 4E 85 F1 | 	sub	fp, #12
0b4ac     A7 26 02 FB | 	rdlong	local01, fp
0b4b0     04 4E 85 F1 | 	sub	fp, #4
0b4b4     13 2B 0A F2 | 	cmp	local03, local01 wz
0b4b8     7C 00 90 5D |  if_ne	jmp	#LR__0963
0b4bc     4A 00 00 FF 
0b4c0     9C E4 05 F1 | 	add	objptr, ##38044
0b4c4     F2 26 02 FB | 	rdlong	local01, objptr
0b4c8     13 29 02 F6 | 	mov	local02, local01
0b4cc     01 28 66 F0 | 	shl	local02, #1
0b4d0     13 29 02 F1 | 	add	local02, local01
0b4d4     02 28 66 F0 | 	shl	local02, #2
0b4d8     03 00 00 FF 
0b4dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4e0     F2 28 02 F1 | 	add	local02, objptr
0b4e4     0C 4E 05 F1 | 	add	fp, #12
0b4e8     A7 2A 02 FB | 	rdlong	local03, fp
0b4ec     14 2B 62 FC | 	wrlong	local03, local02
0b4f0     03 00 00 FF 
0b4f4     00 E4 05 F1 | 	add	objptr, ##1536
0b4f8     F2 26 02 FB | 	rdlong	local01, objptr
0b4fc     13 29 02 F6 | 	mov	local02, local01
0b500     01 28 66 F0 | 	shl	local02, #1
0b504     13 29 02 F1 | 	add	local02, local01
0b508     02 28 66 F0 | 	shl	local02, #2
0b50c     03 00 00 FF 
0b510     00 E4 85 F1 | 	sub	objptr, ##1536
0b514     F2 28 02 F1 | 	add	local02, objptr
0b518     08 4E 85 F1 | 	sub	fp, #8
0b51c     A7 2A 02 FB | 	rdlong	local03, fp
0b520     04 4E 85 F1 | 	sub	fp, #4
0b524     04 28 06 F1 | 	add	local02, #4
0b528     14 2B 62 FC | 	wrlong	local03, local02
0b52c     47 00 00 FF 
0b530     9C E4 85 F1 | 	sub	objptr, ##36508
0b534     A4 00 90 FD | 	jmp	#LR__0964
0b538                 | LR__0963
0b538     4A 00 00 FF 
0b53c     9C E4 05 F1 | 	add	objptr, ##38044
0b540     F2 26 02 FB | 	rdlong	local01, objptr
0b544     13 29 02 F6 | 	mov	local02, local01
0b548     01 28 66 F0 | 	shl	local02, #1
0b54c     13 29 02 F1 | 	add	local02, local01
0b550     02 28 66 F0 | 	shl	local02, #2
0b554     03 00 00 FF 
0b558     00 E4 85 F1 | 	sub	objptr, ##1536
0b55c     F2 28 02 F1 | 	add	local02, objptr
0b560     00 00 C0 FF 
0b564     14 01 68 FC | 	wrlong	##-2147483648, local02
0b568     03 00 00 FF 
0b56c     00 E4 05 F1 | 	add	objptr, ##1536
0b570     F2 26 02 FB | 	rdlong	local01, objptr
0b574     13 29 02 F6 | 	mov	local02, local01
0b578     01 28 66 F0 | 	shl	local02, #1
0b57c     13 29 02 F1 | 	add	local02, local01
0b580     02 28 66 F0 | 	shl	local02, #2
0b584     03 00 00 FF 
0b588     00 E4 85 F1 | 	sub	objptr, ##1536
0b58c     F2 28 02 F1 | 	add	local02, objptr
0b590     04 4E 05 F1 | 	add	fp, #4
0b594     A7 2A 02 FB | 	rdlong	local03, fp
0b598     04 4E 85 F1 | 	sub	fp, #4
0b59c     04 28 06 F1 | 	add	local02, #4
0b5a0     14 2B 62 FC | 	wrlong	local03, local02
0b5a4     03 00 00 FF 
0b5a8     00 E4 05 F1 | 	add	objptr, ##1536
0b5ac     F2 26 02 FB | 	rdlong	local01, objptr
0b5b0     13 29 02 F6 | 	mov	local02, local01
0b5b4     01 28 66 F0 | 	shl	local02, #1
0b5b8     13 29 02 F1 | 	add	local02, local01
0b5bc     02 28 66 F0 | 	shl	local02, #2
0b5c0     03 00 00 FF 
0b5c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b5c8     F2 28 02 F1 | 	add	local02, objptr
0b5cc     08 28 06 F1 | 	add	local02, #8
0b5d0     14 A7 68 FC | 	wrlong	#83, local02
0b5d4     47 00 00 FF 
0b5d8     9C E4 85 F1 | 	sub	objptr, ##36508
0b5dc                 | LR__0964
0b5dc     4A 00 00 FF 
0b5e0     9C E4 05 F1 | 	add	objptr, ##38044
0b5e4     F2 2A 02 FB | 	rdlong	local03, objptr
0b5e8     01 2A 06 F1 | 	add	local03, #1
0b5ec     F2 2A 62 FC | 	wrlong	local03, objptr
0b5f0     4A 00 00 FF 
0b5f4     9C E4 85 F1 | 	sub	objptr, ##38044
0b5f8     D0 00 90 FD | 	jmp	#LR__0966
0b5fc                 | LR__0965
0b5fc     98 0A B0 FD | 	call	#_expr
0b600     30 4E 05 F1 | 	add	fp, #48
0b604     A7 9E 68 FC | 	wrlong	#79, fp
0b608     08 4E 85 F1 | 	sub	fp, #8
0b60c     A7 00 68 FC | 	wrlong	#0, fp
0b610     04 4E 05 F1 | 	add	fp, #4
0b614     A7 2A 02 FB | 	rdlong	local03, fp
0b618     04 4E 05 F1 | 	add	fp, #4
0b61c     A7 26 02 FB | 	rdlong	local01, fp
0b620     30 4E 85 F1 | 	sub	fp, #48
0b624     4A 00 00 FF 
0b628     9C E4 05 F1 | 	add	objptr, ##38044
0b62c     F2 28 02 FB | 	rdlong	local02, objptr
0b630     14 17 02 F6 | 	mov	arg03, local02
0b634     01 16 66 F0 | 	shl	arg03, #1
0b638     14 17 02 F1 | 	add	arg03, local02
0b63c     02 16 66 F0 | 	shl	arg03, #2
0b640     03 00 00 FF 
0b644     00 E4 85 F1 | 	sub	objptr, ##1536
0b648     F2 16 02 F1 | 	add	arg03, objptr
0b64c     0B 01 68 FC | 	wrlong	#0, arg03
0b650     03 00 00 FF 
0b654     00 E4 05 F1 | 	add	objptr, ##1536
0b658     F2 28 02 FB | 	rdlong	local02, objptr
0b65c     14 17 02 F6 | 	mov	arg03, local02
0b660     01 16 66 F0 | 	shl	arg03, #1
0b664     14 17 02 F1 | 	add	arg03, local02
0b668     02 16 66 F0 | 	shl	arg03, #2
0b66c     03 00 00 FF 
0b670     00 E4 85 F1 | 	sub	objptr, ##1536
0b674     F2 16 02 F1 | 	add	arg03, objptr
0b678     04 16 06 F1 | 	add	arg03, #4
0b67c     0B 2B 62 FC | 	wrlong	local03, arg03
0b680     03 00 00 FF 
0b684     00 E4 05 F1 | 	add	objptr, ##1536
0b688     F2 2A 02 FB | 	rdlong	local03, objptr
0b68c     15 29 02 F6 | 	mov	local02, local03
0b690     01 28 66 F0 | 	shl	local02, #1
0b694     15 29 02 F1 | 	add	local02, local03
0b698     02 28 66 F0 | 	shl	local02, #2
0b69c     03 00 00 FF 
0b6a0     00 E4 85 F1 | 	sub	objptr, ##1536
0b6a4     F2 28 02 F1 | 	add	local02, objptr
0b6a8     08 28 06 F1 | 	add	local02, #8
0b6ac     14 27 62 FC | 	wrlong	local01, local02
0b6b0     03 00 00 FF 
0b6b4     00 E4 05 F1 | 	add	objptr, ##1536
0b6b8     F2 2A 02 FB | 	rdlong	local03, objptr
0b6bc     01 2A 06 F1 | 	add	local03, #1
0b6c0     F2 2A 62 FC | 	wrlong	local03, objptr
0b6c4     4A 00 00 FF 
0b6c8     9C E4 85 F1 | 	sub	objptr, ##38044
0b6cc                 | LR__0966
0b6cc                 | ' return 0
0b6cc     00 FA 05 F6 | 	mov	result1, #0
0b6d0     A7 F0 03 F6 | 	mov	ptra, fp
0b6d4     B2 00 A0 FD | 	call	#popregs_
0b6d8                 | _compile_goto_ret
0b6d8     2D 00 64 FD | 	ret
0b6dc                 | 
0b6dc                 | ' 
0b6dc                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b6dc                 | ' 
0b6dc                 | ' function compile_on() as ulong
0b6dc                 | _compile_on
0b6dc     04 4A 05 F6 | 	mov	COUNT_, #4
0b6e0     A8 00 A0 FD | 	call	#pushregs_
0b6e4     B0 09 B0 FD | 	call	#_expr
0b6e8     00 26 06 F6 | 	mov	local01, #0
0b6ec     4A 00 00 FF 
0b6f0     9C E4 05 F1 | 	add	objptr, ##38044
0b6f4     F2 14 02 FB | 	rdlong	arg02, objptr
0b6f8     0A 13 02 F6 | 	mov	arg01, arg02
0b6fc     01 12 66 F0 | 	shl	arg01, #1
0b700     0A 13 02 F1 | 	add	arg01, arg02
0b704     02 12 66 F0 | 	shl	arg01, #2
0b708     03 00 00 FF 
0b70c     00 E4 85 F1 | 	sub	objptr, ##1536
0b710     F2 12 02 F1 | 	add	arg01, objptr
0b714     08 12 06 F1 | 	add	arg01, #8
0b718     09 83 69 FC | 	wrlong	#193, arg01
0b71c     03 00 00 FF 
0b720     00 E4 05 F1 | 	add	objptr, ##1536
0b724     F2 14 02 FB | 	rdlong	arg02, objptr
0b728     0A 29 02 F6 | 	mov	local02, arg02
0b72c     01 14 06 F1 | 	add	arg02, #1
0b730     F2 14 62 FC | 	wrlong	arg02, objptr
0b734                 | ' expr()
0b734                 | ' 'print lparts(ct).part$ 'ok
0b734                 | ' numpar=0
0b734                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b734                 | ' if lparts(ct).part$="goto" then
0b734     13 00 00 FF 
0b738     38 E4 85 F1 | 	sub	objptr, ##9784
0b73c     F2 14 02 FB | 	rdlong	arg02, objptr
0b740     03 14 66 F0 | 	shl	arg02, #3
0b744     02 00 00 FF 
0b748     38 E4 85 F1 | 	sub	objptr, ##1080
0b74c     F2 14 02 F1 | 	add	arg02, objptr
0b750     0A 13 02 FB | 	rdlong	arg01, arg02
0b754     C3 01 00 FF 
0b758     F6 14 06 F6 | 	mov	arg02, ##@LR__6016
0b75c     35 00 00 FF 
0b760     2C E4 85 F1 | 	sub	objptr, ##27180
0b764     B4 CC B1 FD | 	call	#__system___string_cmp
0b768     00 FA 0D F2 | 	cmp	result1, #0 wz
0b76c     14 02 90 5D |  if_ne	jmp	#LR__0975
0b770     37 00 00 FF 
0b774     64 E4 05 F1 | 	add	objptr, ##28260
0b778     F2 2A 02 FB | 	rdlong	local03, objptr
0b77c     37 00 00 FF 
0b780     64 E4 85 F1 | 	sub	objptr, ##28260
0b784     01 2A 06 F1 | 	add	local03, #1
0b788                 | '   i=ct+1
0b788                 | '   do
0b788                 | LR__0970
0b788                 | '     if lparts(i).token=token_decimal then
0b788     15 FB 01 F6 | 	mov	result1, local03
0b78c     03 FA 65 F0 | 	shl	result1, #3
0b790     35 00 00 FF 
0b794     2C E4 05 F1 | 	add	objptr, ##27180
0b798     F2 FA 01 F1 | 	add	result1, objptr
0b79c     04 FA 05 F1 | 	add	result1, #4
0b7a0     FD FA 01 FB | 	rdlong	result1, result1
0b7a4     01 00 00 FF 
0b7a8     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b7ac     35 00 00 FF 
0b7b0     2C E4 85 F1 | 	sub	objptr, ##27180
0b7b4     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b7b8     4A 00 00 FF 
0b7bc     9C E4 05 F1 | 	add	objptr, ##38044
0b7c0     F2 FA 01 FB | 	rdlong	result1, objptr
0b7c4     FD 14 02 F6 | 	mov	arg02, result1
0b7c8     01 14 66 F0 | 	shl	arg02, #1
0b7cc     FD 14 02 F1 | 	add	arg02, result1
0b7d0     02 14 66 F0 | 	shl	arg02, #2
0b7d4     03 00 00 FF 
0b7d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b7dc     F2 14 02 F1 | 	add	arg02, objptr
0b7e0     00 00 C0 FF 
0b7e4     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b7e8     03 00 00 FF 
0b7ec     00 E4 05 F1 | 	add	objptr, ##1536
0b7f0     F2 14 02 FB | 	rdlong	arg02, objptr
0b7f4     0A 2D 02 F6 | 	mov	local04, arg02
0b7f8     01 2C 66 F0 | 	shl	local04, #1
0b7fc     0A 2D 02 F1 | 	add	local04, arg02
0b800     02 2C 66 F0 | 	shl	local04, #2
0b804     03 00 00 FF 
0b808     00 E4 85 F1 | 	sub	objptr, ##1536
0b80c     F2 2C 02 F1 | 	add	local04, objptr
0b810     15 15 02 F6 | 	mov	arg02, local03
0b814     03 14 66 F0 | 	shl	arg02, #3
0b818     12 00 00 FF 
0b81c     70 E4 85 F1 | 	sub	objptr, ##9328
0b820     F2 14 02 F1 | 	add	arg02, objptr
0b824     0A 13 02 FB | 	rdlong	arg01, arg02
0b828     00 14 06 F6 | 	mov	arg02, #0
0b82c     35 00 00 FF 
0b830     2C E4 85 F1 | 	sub	objptr, ##27180
0b834     B0 00 B2 FD | 	call	#__system____builtin_atoi
0b838     04 2C 06 F1 | 	add	local04, #4
0b83c     16 FB 61 FC | 	wrlong	result1, local04
0b840     4A 00 00 FF 
0b844     9C E4 05 F1 | 	add	objptr, ##38044
0b848     F2 14 02 FB | 	rdlong	arg02, objptr
0b84c     0A 2D 02 F6 | 	mov	local04, arg02
0b850     01 2C 66 F0 | 	shl	local04, #1
0b854     0A 2D 02 F1 | 	add	local04, arg02
0b858     02 2C 66 F0 | 	shl	local04, #2
0b85c     03 00 00 FF 
0b860     00 E4 85 F1 | 	sub	objptr, ##1536
0b864     F2 2C 02 F1 | 	add	local04, objptr
0b868     08 2C 06 F1 | 	add	local04, #8
0b86c     16 A7 68 FC | 	wrlong	#83, local04
0b870     03 00 00 FF 
0b874     00 E4 05 F1 | 	add	objptr, ##1536
0b878     F2 2C 02 FB | 	rdlong	local04, objptr
0b87c     01 2C 06 F1 | 	add	local04, #1
0b880     F2 2C 62 FC | 	wrlong	local04, objptr
0b884     4A 00 00 FF 
0b888     9C E4 85 F1 | 	sub	objptr, ##38044
0b88c     01 26 06 F1 | 	add	local01, #1
0b890     08 00 90 FD | 	jmp	#LR__0972
0b894                 | LR__0971
0b894                 | '       return 17
0b894     11 FA 05 F6 | 	mov	result1, #17
0b898     5C 04 90 FD | 	jmp	#LR__0985
0b89c                 | LR__0972
0b89c     01 2A 06 F1 | 	add	local03, #1
0b8a0                 | '     i+=1
0b8a0                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b8a0     15 2D 02 F6 | 	mov	local04, local03
0b8a4     03 2C 66 F0 | 	shl	local04, #3
0b8a8     35 00 00 FF 
0b8ac     2C E4 05 F1 | 	add	objptr, ##27180
0b8b0     F2 2C 02 F1 | 	add	local04, objptr
0b8b4     04 2C 06 F1 | 	add	local04, #4
0b8b8     16 2D 02 FB | 	rdlong	local04, local04
0b8bc     11 2C 0E F2 | 	cmp	local04, #17 wz
0b8c0     35 00 00 FF 
0b8c4     2C E4 85 F1 | 	sub	objptr, ##27180
0b8c8     30 00 90 AD |  if_e	jmp	#LR__0973
0b8cc     15 2D 02 F6 | 	mov	local04, local03
0b8d0     03 2C 66 F0 | 	shl	local04, #3
0b8d4     35 00 00 FF 
0b8d8     2C E4 05 F1 | 	add	objptr, ##27180
0b8dc     F2 2C 02 F1 | 	add	local04, objptr
0b8e0     04 2C 06 F1 | 	add	local04, #4
0b8e4     16 2D 02 FB | 	rdlong	local04, local04
0b8e8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8ec     35 00 00 FF 
0b8f0     2C E4 85 F1 | 	sub	objptr, ##27180
0b8f4     15 FA 05 56 |  if_ne	mov	result1, #21
0b8f8     FC 03 90 5D |  if_ne	jmp	#LR__0985
0b8fc                 | LR__0973
0b8fc                 | '     if lparts(i).token=token_end then exit loop
0b8fc     15 2D 02 F6 | 	mov	local04, local03
0b900     03 2C 66 F0 | 	shl	local04, #3
0b904     35 00 00 FF 
0b908     2C E4 05 F1 | 	add	objptr, ##27180
0b90c     F2 2C 02 F1 | 	add	local04, objptr
0b910     04 2C 06 F1 | 	add	local04, #4
0b914     16 2D 02 FB | 	rdlong	local04, local04
0b918     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b91c     35 00 00 FF 
0b920     2C E4 85 F1 | 	sub	objptr, ##27180
0b924     30 00 90 AD |  if_e	jmp	#LR__0974
0b928     01 2A 06 F1 | 	add	local03, #1
0b92c     15 2D 02 F6 | 	mov	local04, local03
0b930     03 2C 66 F0 | 	shl	local04, #3
0b934     35 00 00 FF 
0b938     2C E4 05 F1 | 	add	objptr, ##27180
0b93c     F2 2C 02 F1 | 	add	local04, objptr
0b940     04 2C 06 F1 | 	add	local04, #4
0b944     16 2D 02 FB | 	rdlong	local04, local04
0b948     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b94c     35 00 00 FF 
0b950     2C E4 85 F1 | 	sub	objptr, ##27180
0b954     30 FE 9F 5D |  if_ne	jmp	#LR__0970
0b958                 | LR__0974
0b958     14 2D 02 F6 | 	mov	local04, local02
0b95c     01 2C 66 F0 | 	shl	local04, #1
0b960     14 2D 02 F1 | 	add	local04, local02
0b964     02 2C 66 F0 | 	shl	local04, #2
0b968     47 00 00 FF 
0b96c     9C E4 05 F1 | 	add	objptr, ##36508
0b970     F2 2C 02 F1 | 	add	local04, objptr
0b974     04 2C 06 F1 | 	add	local04, #4
0b978     16 03 68 FC | 	wrlong	#1, local04
0b97c     47 00 00 FF 
0b980     9C E4 85 F1 | 	sub	objptr, ##36508
0b984                 | LR__0975
0b984                 | ' 
0b984                 | ' if lparts(ct).part$="gosub" then
0b984     37 00 00 FF 
0b988     64 E4 05 F1 | 	add	objptr, ##28260
0b98c     F2 2A 02 FB | 	rdlong	local03, objptr
0b990     03 2A 66 F0 | 	shl	local03, #3
0b994     02 00 00 FF 
0b998     38 E4 85 F1 | 	sub	objptr, ##1080
0b99c     F2 2A 02 F1 | 	add	local03, objptr
0b9a0     15 13 02 FB | 	rdlong	arg01, local03
0b9a4     C3 01 00 FF 
0b9a8     FB 14 06 F6 | 	mov	arg02, ##@LR__6017
0b9ac     35 00 00 FF 
0b9b0     2C E4 85 F1 | 	sub	objptr, ##27180
0b9b4     64 CA B1 FD | 	call	#__system___string_cmp
0b9b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b9bc     84 02 90 5D |  if_ne	jmp	#LR__0981
0b9c0     37 00 00 FF 
0b9c4     64 E4 05 F1 | 	add	objptr, ##28260
0b9c8     F2 2A 02 FB | 	rdlong	local03, objptr
0b9cc     37 00 00 FF 
0b9d0     64 E4 85 F1 | 	sub	objptr, ##28260
0b9d4     01 2A 06 F1 | 	add	local03, #1
0b9d8                 | '   i=ct+1
0b9d8                 | '   do
0b9d8                 | LR__0976
0b9d8                 | '     if lparts(i).token=token_decimal then
0b9d8     15 2D 02 F6 | 	mov	local04, local03
0b9dc     03 2C 66 F0 | 	shl	local04, #3
0b9e0     35 00 00 FF 
0b9e4     2C E4 05 F1 | 	add	objptr, ##27180
0b9e8     F2 2C 02 F1 | 	add	local04, objptr
0b9ec     04 2C 06 F1 | 	add	local04, #4
0b9f0     16 2D 02 FB | 	rdlong	local04, local04
0b9f4     01 00 00 FF 
0b9f8     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b9fc     35 00 00 FF 
0ba00     2C E4 85 F1 | 	sub	objptr, ##27180
0ba04     4C 01 90 5D |  if_ne	jmp	#LR__0977
0ba08     4A 00 00 FF 
0ba0c     9C E4 05 F1 | 	add	objptr, ##38044
0ba10     F2 FA 01 FB | 	rdlong	result1, objptr
0ba14     FD 2C 02 F6 | 	mov	local04, result1
0ba18     01 2C 66 F0 | 	shl	local04, #1
0ba1c     FD 2C 02 F1 | 	add	local04, result1
0ba20     02 2C 66 F0 | 	shl	local04, #2
0ba24     03 00 00 FF 
0ba28     00 E4 85 F1 | 	sub	objptr, ##1536
0ba2c     F2 2C 02 F1 | 	add	local04, objptr
0ba30     08 2C 06 F1 | 	add	local04, #8
0ba34     16 53 69 FC | 	wrlong	#169, local04
0ba38     03 00 00 FF 
0ba3c     00 E4 05 F1 | 	add	objptr, ##1536
0ba40     F2 FA 01 FB | 	rdlong	result1, objptr
0ba44     01 FA 05 F1 | 	add	result1, #1
0ba48     F2 FA 61 FC | 	wrlong	result1, objptr
0ba4c     FD 2C 02 F6 | 	mov	local04, result1
0ba50     01 2C 66 F0 | 	shl	local04, #1
0ba54     FD 2C 02 F1 | 	add	local04, result1
0ba58     02 2C 66 F0 | 	shl	local04, #2
0ba5c     03 00 00 FF 
0ba60     00 E4 85 F1 | 	sub	objptr, ##1536
0ba64     F2 2C 02 F1 | 	add	local04, objptr
0ba68     00 00 C0 FF 
0ba6c     16 01 68 FC | 	wrlong	##-2147483648, local04
0ba70     03 00 00 FF 
0ba74     00 E4 05 F1 | 	add	objptr, ##1536
0ba78     F2 FA 01 FB | 	rdlong	result1, objptr
0ba7c     FD 2C 02 F6 | 	mov	local04, result1
0ba80     01 2C 66 F0 | 	shl	local04, #1
0ba84     FD 2C 02 F1 | 	add	local04, result1
0ba88     02 2C 66 F0 | 	shl	local04, #2
0ba8c     03 00 00 FF 
0ba90     00 E4 85 F1 | 	sub	objptr, ##1536
0ba94     F2 2C 02 F1 | 	add	local04, objptr
0ba98     15 13 02 F6 | 	mov	arg01, local03
0ba9c     03 12 66 F0 | 	shl	arg01, #3
0baa0     12 00 00 FF 
0baa4     70 E4 85 F1 | 	sub	objptr, ##9328
0baa8     F2 12 02 F1 | 	add	arg01, objptr
0baac     09 13 02 FB | 	rdlong	arg01, arg01
0bab0     00 14 06 F6 | 	mov	arg02, #0
0bab4     35 00 00 FF 
0bab8     2C E4 85 F1 | 	sub	objptr, ##27180
0babc     28 FE B1 FD | 	call	#__system____builtin_atoi
0bac0     04 2C 06 F1 | 	add	local04, #4
0bac4     16 FB 61 FC | 	wrlong	result1, local04
0bac8     4A 00 00 FF 
0bacc     9C E4 05 F1 | 	add	objptr, ##38044
0bad0     F2 12 02 FB | 	rdlong	arg01, objptr
0bad4     09 2D 02 F6 | 	mov	local04, arg01
0bad8     01 2C 66 F0 | 	shl	local04, #1
0badc     09 2D 02 F1 | 	add	local04, arg01
0bae0     02 2C 66 F0 | 	shl	local04, #2
0bae4     03 00 00 FF 
0bae8     00 E4 85 F1 | 	sub	objptr, ##1536
0baec     F2 2C 02 F1 | 	add	local04, objptr
0baf0     08 2C 06 F1 | 	add	local04, #8
0baf4     16 A7 68 FC | 	wrlong	#83, local04
0baf8     03 00 00 FF 
0bafc     00 E4 05 F1 | 	add	objptr, ##1536
0bb00     F2 12 02 FB | 	rdlong	arg01, objptr
0bb04     01 12 06 F1 | 	add	arg01, #1
0bb08     F2 12 62 FC | 	wrlong	arg01, objptr
0bb0c     01 26 06 F1 | 	add	local01, #1
0bb10     09 2D 02 F6 | 	mov	local04, arg01
0bb14     01 2C 66 F0 | 	shl	local04, #1
0bb18     09 2D 02 F1 | 	add	local04, arg01
0bb1c     02 2C 66 F0 | 	shl	local04, #2
0bb20     03 00 00 FF 
0bb24     00 E4 85 F1 | 	sub	objptr, ##1536
0bb28     F2 2C 02 F1 | 	add	local04, objptr
0bb2c     08 2C 06 F1 | 	add	local04, #8
0bb30     16 5B 68 FC | 	wrlong	#45, local04
0bb34     03 00 00 FF 
0bb38     00 E4 05 F1 | 	add	objptr, ##1536
0bb3c     F2 2C 02 FB | 	rdlong	local04, objptr
0bb40     01 2C 06 F1 | 	add	local04, #1
0bb44     F2 2C 62 FC | 	wrlong	local04, objptr
0bb48     4A 00 00 FF 
0bb4c     9C E4 85 F1 | 	sub	objptr, ##38044
0bb50     08 00 90 FD | 	jmp	#LR__0978
0bb54                 | LR__0977
0bb54                 | '       return 17
0bb54     11 FA 05 F6 | 	mov	result1, #17
0bb58     9C 01 90 FD | 	jmp	#LR__0985
0bb5c                 | LR__0978
0bb5c     01 2A 06 F1 | 	add	local03, #1
0bb60                 | '     i+=1
0bb60                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0bb60     15 2D 02 F6 | 	mov	local04, local03
0bb64     03 2C 66 F0 | 	shl	local04, #3
0bb68     35 00 00 FF 
0bb6c     2C E4 05 F1 | 	add	objptr, ##27180
0bb70     F2 2C 02 F1 | 	add	local04, objptr
0bb74     04 2C 06 F1 | 	add	local04, #4
0bb78     16 2D 02 FB | 	rdlong	local04, local04
0bb7c     11 2C 0E F2 | 	cmp	local04, #17 wz
0bb80     35 00 00 FF 
0bb84     2C E4 85 F1 | 	sub	objptr, ##27180
0bb88     30 00 90 AD |  if_e	jmp	#LR__0979
0bb8c     15 2D 02 F6 | 	mov	local04, local03
0bb90     03 2C 66 F0 | 	shl	local04, #3
0bb94     35 00 00 FF 
0bb98     2C E4 05 F1 | 	add	objptr, ##27180
0bb9c     F2 2C 02 F1 | 	add	local04, objptr
0bba0     04 2C 06 F1 | 	add	local04, #4
0bba4     16 2D 02 FB | 	rdlong	local04, local04
0bba8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bbac     35 00 00 FF 
0bbb0     2C E4 85 F1 | 	sub	objptr, ##27180
0bbb4     15 FA 05 56 |  if_ne	mov	result1, #21
0bbb8     3C 01 90 5D |  if_ne	jmp	#LR__0985
0bbbc                 | LR__0979
0bbbc                 | '     if lparts(i).token=token_end then exit loop
0bbbc     15 2D 02 F6 | 	mov	local04, local03
0bbc0     03 2C 66 F0 | 	shl	local04, #3
0bbc4     35 00 00 FF 
0bbc8     2C E4 05 F1 | 	add	objptr, ##27180
0bbcc     F2 2C 02 F1 | 	add	local04, objptr
0bbd0     04 2C 06 F1 | 	add	local04, #4
0bbd4     16 2D 02 FB | 	rdlong	local04, local04
0bbd8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bbdc     35 00 00 FF 
0bbe0     2C E4 85 F1 | 	sub	objptr, ##27180
0bbe4     30 00 90 AD |  if_e	jmp	#LR__0980
0bbe8     01 2A 06 F1 | 	add	local03, #1
0bbec     15 2D 02 F6 | 	mov	local04, local03
0bbf0     03 2C 66 F0 | 	shl	local04, #3
0bbf4     35 00 00 FF 
0bbf8     2C E4 05 F1 | 	add	objptr, ##27180
0bbfc     F2 2C 02 F1 | 	add	local04, objptr
0bc00     04 2C 06 F1 | 	add	local04, #4
0bc04     16 2D 02 FB | 	rdlong	local04, local04
0bc08     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bc0c     35 00 00 FF 
0bc10     2C E4 85 F1 | 	sub	objptr, ##27180
0bc14     C0 FD 9F 5D |  if_ne	jmp	#LR__0976
0bc18                 | LR__0980
0bc18     14 2D 02 F6 | 	mov	local04, local02
0bc1c     01 2C 66 F0 | 	shl	local04, #1
0bc20     14 2D 02 F1 | 	add	local04, local02
0bc24     02 2C 66 F0 | 	shl	local04, #2
0bc28     47 00 00 FF 
0bc2c     9C E4 05 F1 | 	add	objptr, ##36508
0bc30     F2 2C 02 F1 | 	add	local04, objptr
0bc34     04 2C 06 F1 | 	add	local04, #4
0bc38     16 07 68 FC | 	wrlong	#3, local04
0bc3c     47 00 00 FF 
0bc40     9C E4 85 F1 | 	sub	objptr, ##36508
0bc44                 | LR__0981
0bc44     14 2B 02 F6 | 	mov	local03, local02
0bc48     01 2A 66 F0 | 	shl	local03, #1
0bc4c     14 2B 02 F1 | 	add	local03, local02
0bc50     02 2A 66 F0 | 	shl	local03, #2
0bc54     47 00 00 FF 
0bc58     9C E4 05 F1 | 	add	objptr, ##36508
0bc5c     F2 2A 02 F1 | 	add	local03, objptr
0bc60     15 27 62 FC | 	wrlong	local01, local03
0bc64                 | ' compiledline(onlineptr).result.uresult=numpar
0bc64                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bc64     03 00 00 FF 
0bc68     00 E4 05 F1 | 	add	objptr, ##1536
0bc6c     F2 2A 02 FB | 	rdlong	local03, objptr
0bc70     4A 00 00 FF 
0bc74     9C E4 85 F1 | 	sub	objptr, ##38044
0bc78     97 3C 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0bc7c                 | LR__0982
0bc7c     15 2D 02 F6 | 	mov	local04, local03
0bc80     01 2C 66 F0 | 	shl	local04, #1
0bc84     15 2D 02 F1 | 	add	local04, local03
0bc88     02 2C 66 F0 | 	shl	local04, #2
0bc8c     47 00 00 FF 
0bc90     9C E4 05 F1 | 	add	objptr, ##36508
0bc94     F2 2C 02 F1 | 	add	local04, objptr
0bc98     08 2C 06 F1 | 	add	local04, #8
0bc9c     16 2D 02 FB | 	rdlong	local04, local04
0bca0     2D 2C 0E F2 | 	cmp	local04, #45 wz
0bca4     47 00 00 FF 
0bca8     9C E4 85 F1 | 	sub	objptr, ##36508
0bcac     38 00 90 5D |  if_ne	jmp	#LR__0983
0bcb0     15 2D 02 F6 | 	mov	local04, local03
0bcb4     01 2C 66 F0 | 	shl	local04, #1
0bcb8     15 2D 02 F1 | 	add	local04, local03
0bcbc     02 2C 66 F0 | 	shl	local04, #2
0bcc0     47 00 00 FF 
0bcc4     9C E4 05 F1 | 	add	objptr, ##36508
0bcc8     F2 2C 02 F1 | 	add	local04, objptr
0bccc     03 00 00 FF 
0bcd0     00 E4 05 F1 | 	add	objptr, ##1536
0bcd4     F2 26 02 FB | 	rdlong	local01, objptr
0bcd8     4A 00 00 FF 
0bcdc     9C E4 85 F1 | 	sub	objptr, ##38044
0bce0     02 26 86 F1 | 	sub	local01, #2
0bce4     16 27 62 FC | 	wrlong	local01, local04
0bce8                 | LR__0983
0bce8     01 2A 86 F1 | 	sub	local03, #1
0bcec     14 2B 52 F2 | 	cmps	local03, local02 wc
0bcf0     88 FF 9F 3D |  if_ae	jmp	#LR__0982
0bcf4                 | LR__0984
0bcf4                 | ' return 0
0bcf4     00 FA 05 F6 | 	mov	result1, #0
0bcf8                 | LR__0985
0bcf8     A7 F0 03 F6 | 	mov	ptra, fp
0bcfc     B2 00 A0 FD | 	call	#popregs_
0bd00                 | _compile_on_ret
0bd00     2D 00 64 FD | 	ret
0bd04                 | 
0bd04                 | ' 
0bd04                 | ' '----- A helper for compile_input and compile_read
0bd04                 | '  
0bd04                 | ' function getaddr() as ulong
0bd04                 | _getaddr
0bd04     0B 4A 05 F6 | 	mov	COUNT_, #11
0bd08     A8 00 A0 FD | 	call	#pushregs_
0bd0c     37 00 00 FF 
0bd10     64 E4 05 F1 | 	add	objptr, ##28260
0bd14     F2 2C 02 FB | 	rdlong	local04, objptr
0bd18     03 2C 66 F0 | 	shl	local04, #3
0bd1c     02 00 00 FF 
0bd20     38 E4 85 F1 | 	sub	objptr, ##1080
0bd24     F2 2C 02 F1 | 	add	local04, objptr
0bd28     16 2F 02 FB | 	rdlong	local05, local04
0bd2c     01 30 66 F6 | 	neg	local06, #1
0bd30                 | ' 
0bd30                 | ' varname$=lparts(ct).part$
0bd30                 | ' j=-1
0bd30                 | ' 
0bd30                 | ' for i=0 to varnum-1
0bd30     00 32 06 F6 | 	mov	local07, #0
0bd34     04 E4 85 F1 | 	sub	objptr, #4
0bd38     F2 34 02 FB | 	rdlong	local08, objptr
0bd3c     35 00 00 FF 
0bd40     28 E4 85 F1 | 	sub	objptr, ##27176
0bd44                 | LR__0990
0bd44     1A 33 52 F2 | 	cmps	local07, local08 wc
0bd48     38 00 90 3D |  if_ae	jmp	#LR__0991
0bd4c                 | '   if variables(i).name=varname$ then j=i : exit
0bd4c     19 2D 02 F6 | 	mov	local04, local07
0bd50     04 2C 66 F0 | 	shl	local04, #4
0bd54     15 00 00 FF 
0bd58     18 E4 05 F1 | 	add	objptr, ##10776
0bd5c     F2 2C 02 F1 | 	add	local04, objptr
0bd60     16 13 02 FB | 	rdlong	arg01, local04
0bd64     17 15 02 F6 | 	mov	arg02, local05
0bd68     15 00 00 FF 
0bd6c     18 E4 85 F1 | 	sub	objptr, ##10776
0bd70     A8 C6 B1 FD | 	call	#__system___string_cmp
0bd74     00 FA 0D F2 | 	cmp	result1, #0 wz
0bd78     19 31 02 A6 |  if_e	mov	local06, local07
0bd7c     01 32 06 51 |  if_ne	add	local07, #1
0bd80     C0 FF 9F 5D |  if_ne	jmp	#LR__0990
0bd84                 | LR__0991
0bd84                 | ' if  j=-1 andalso varnum<maxvars then   
0bd84     FF FF 7F FF 
0bd88     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bd8c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bd90     35 00 00 FF 
0bd94     28 E4 05 F1 | 	add	objptr, ##27176
0bd98     F2 34 02 FB | 	rdlong	local08, objptr
0bd9c     35 00 00 FF 
0bda0     28 E4 85 F1 | 	sub	objptr, ##27176
0bda4     02 00 00 FF 
0bda8     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bdac     88 00 90 3D |  if_ae	jmp	#LR__0992
0bdb0     35 00 00 FF 
0bdb4     28 E4 05 F1 | 	add	objptr, ##27176
0bdb8     F2 2C 02 FB | 	rdlong	local04, objptr
0bdbc     04 2C 66 F0 | 	shl	local04, #4
0bdc0     20 00 00 FF 
0bdc4     10 E4 85 F1 | 	sub	objptr, ##16400
0bdc8     F2 2C 02 F1 | 	add	local04, objptr
0bdcc     16 2F 62 FC | 	wrlong	local05, local04
0bdd0     20 00 00 FF 
0bdd4     10 E4 05 F1 | 	add	objptr, ##16400
0bdd8     F2 2C 02 FB | 	rdlong	local04, objptr
0bddc     04 2C 66 F0 | 	shl	local04, #4
0bde0     20 00 00 FF 
0bde4     10 E4 85 F1 | 	sub	objptr, ##16400
0bde8     F2 2C 02 F1 | 	add	local04, objptr
0bdec     04 2C 06 F1 | 	add	local04, #4
0bdf0     16 01 68 FC | 	wrlong	#0, local04
0bdf4     20 00 00 FF 
0bdf8     10 E4 05 F1 | 	add	objptr, ##16400
0bdfc     F2 2C 02 FB | 	rdlong	local04, objptr
0be00     04 2C 66 F0 | 	shl	local04, #4
0be04     20 00 00 FF 
0be08     10 E4 85 F1 | 	sub	objptr, ##16400
0be0c     F2 2C 02 F1 | 	add	local04, objptr
0be10     0C 2C 06 F1 | 	add	local04, #12
0be14     16 39 68 FC | 	wrlong	#28, local04
0be18     20 00 00 FF 
0be1c     10 E4 05 F1 | 	add	objptr, ##16400
0be20     F2 34 02 FB | 	rdlong	local08, objptr
0be24     1A 31 02 F6 | 	mov	local06, local08
0be28     01 34 06 F1 | 	add	local08, #1
0be2c     F2 34 62 FC | 	wrlong	local08, objptr
0be30     35 00 00 FF 
0be34     28 E4 85 F1 | 	sub	objptr, ##27176
0be38                 | LR__0992
0be38     00 34 06 F6 | 	mov	local08, #0
0be3c                 | ' numpar=0
0be3c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0be3c     37 00 00 FF 
0be40     64 E4 05 F1 | 	add	objptr, ##28260
0be44     F2 2C 02 FB | 	rdlong	local04, objptr
0be48     01 2C 06 F1 | 	add	local04, #1
0be4c     03 2C 66 F0 | 	shl	local04, #3
0be50     02 00 00 FF 
0be54     38 E4 85 F1 | 	sub	objptr, ##1080
0be58     F2 2C 02 F1 | 	add	local04, objptr
0be5c     04 2C 06 F1 | 	add	local04, #4
0be60     16 33 02 FB | 	rdlong	local07, local04
0be64     15 32 0E F2 | 	cmp	local07, #21 wz
0be68     35 00 00 FF 
0be6c     2C E4 85 F1 | 	sub	objptr, ##27180
0be70     54 01 90 5D |  if_ne	jmp	#LR__0997
0be74     37 00 00 FF 
0be78     64 E4 05 F1 | 	add	objptr, ##28260
0be7c     F2 36 02 FB | 	rdlong	local09, objptr
0be80     01 36 06 F1 | 	add	local09, #1
0be84     F2 36 62 FC | 	wrlong	local09, objptr
0be88     37 00 00 FF 
0be8c     64 E4 85 F1 | 	sub	objptr, ##28260
0be90                 | '   ct+=1 											' omit this lpar, this is for expr list
0be90                 | '   do
0be90                 | LR__0993
0be90     37 00 00 FF 
0be94     64 E4 05 F1 | 	add	objptr, ##28260
0be98     F2 2C 02 FB | 	rdlong	local04, objptr
0be9c     01 2C 06 F1 | 	add	local04, #1
0bea0     F2 2C 62 FC | 	wrlong	local04, objptr
0bea4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bea4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bea4     03 2C 66 F0 | 	shl	local04, #3
0bea8     02 00 00 FF 
0beac     38 E4 85 F1 | 	sub	objptr, ##1080
0beb0     F2 2C 02 F1 | 	add	local04, objptr
0beb4     04 2C 06 F1 | 	add	local04, #4
0beb8     16 37 02 FB | 	rdlong	local09, local04
0bebc     15 36 0E F2 | 	cmp	local09, #21 wz
0bec0     35 00 00 FF 
0bec4     2C E4 85 F1 | 	sub	objptr, ##27180
0bec8     44 00 90 5D |  if_ne	jmp	#LR__0994
0becc     37 00 00 FF 
0bed0     64 E4 05 F1 | 	add	objptr, ##28260
0bed4     F2 36 02 FB | 	rdlong	local09, objptr
0bed8     01 36 06 F1 | 	add	local09, #1
0bedc     F2 36 62 FC | 	wrlong	local09, objptr
0bee0     37 00 00 FF 
0bee4     64 E4 85 F1 | 	sub	objptr, ##28260
0bee8     AC 01 B0 FD | 	call	#_expr
0beec     FD 38 02 F6 | 	mov	local10, result1
0bef0     37 00 00 FF 
0bef4     64 E4 05 F1 | 	add	objptr, ##28260
0bef8     F2 36 02 FB | 	rdlong	local09, objptr
0befc     01 36 06 F1 | 	add	local09, #1
0bf00     F2 36 62 FC | 	wrlong	local09, objptr
0bf04     37 00 00 FF 
0bf08     64 E4 85 F1 | 	sub	objptr, ##28260
0bf0c     08 00 90 FD | 	jmp	#LR__0995
0bf10                 | LR__0994
0bf10     84 01 B0 FD | 	call	#_expr
0bf14     FD 38 02 F6 | 	mov	local10, result1
0bf18                 | LR__0995
0bf18                 | '     if err>0 then return err
0bf18     01 38 56 F2 | 	cmps	local10, #1 wc
0bf1c     1C FB 01 36 |  if_ae	mov	result1, local10
0bf20     68 01 90 3D |  if_ae	jmp	#LR__0998
0bf24     01 34 06 F1 | 	add	local08, #1
0bf28     37 00 00 FF 
0bf2c     64 E4 05 F1 | 	add	objptr, ##28260
0bf30     F2 2C 02 FB | 	rdlong	local04, objptr
0bf34     03 2C 66 F0 | 	shl	local04, #3
0bf38     02 00 00 FF 
0bf3c     38 E4 85 F1 | 	sub	objptr, ##1080
0bf40     F2 2C 02 F1 | 	add	local04, objptr
0bf44     04 2C 06 F1 | 	add	local04, #4
0bf48     16 39 02 FB | 	rdlong	local10, local04
0bf4c     14 38 0E F2 | 	cmp	local10, #20 wz
0bf50     35 00 00 FF 
0bf54     2C E4 85 F1 | 	sub	objptr, ##27180
0bf58     34 00 90 AD |  if_e	jmp	#LR__0996
0bf5c     37 00 00 FF 
0bf60     64 E4 05 F1 | 	add	objptr, ##28260
0bf64     F2 38 02 FB | 	rdlong	local10, objptr
0bf68     03 38 66 F0 | 	shl	local10, #3
0bf6c     02 00 00 FF 
0bf70     38 E4 85 F1 | 	sub	objptr, ##1080
0bf74     F2 38 02 F1 | 	add	local10, objptr
0bf78     04 38 06 F1 | 	add	local10, #4
0bf7c     1C 39 02 FB | 	rdlong	local10, local10
0bf80     FE 39 0E F2 | 	cmp	local10, #510 wz
0bf84     35 00 00 FF 
0bf88     2C E4 85 F1 | 	sub	objptr, ##27180
0bf8c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bf90                 | LR__0996
0bf90                 | '     if lparts(ct).token=token_end then return 14
0bf90     37 00 00 FF 
0bf94     64 E4 05 F1 | 	add	objptr, ##28260
0bf98     F2 2C 02 FB | 	rdlong	local04, objptr
0bf9c     03 2C 66 F0 | 	shl	local04, #3
0bfa0     02 00 00 FF 
0bfa4     38 E4 85 F1 | 	sub	objptr, ##1080
0bfa8     F2 2C 02 F1 | 	add	local04, objptr
0bfac     04 2C 06 F1 | 	add	local04, #4
0bfb0     16 39 02 FB | 	rdlong	local10, local04
0bfb4     FE 39 0E F2 | 	cmp	local10, #510 wz
0bfb8     35 00 00 FF 
0bfbc     2C E4 85 F1 | 	sub	objptr, ##27180
0bfc0     0E FA 05 A6 |  if_e	mov	result1, #14
0bfc4     C4 00 90 AD |  if_e	jmp	#LR__0998
0bfc8                 | LR__0997
0bfc8     1A 29 02 F6 | 	mov	local02, local08
0bfcc     12 2A 06 F6 | 	mov	local03, #18
0bfd0     18 27 02 F6 | 	mov	local01, local06
0bfd4     13 37 02 F6 | 	mov	local09, local01
0bfd8     14 3B 02 F6 | 	mov	local11, local02
0bfdc     15 27 02 F6 | 	mov	local01, local03
0bfe0     4A 00 00 FF 
0bfe4     9C E4 05 F1 | 	add	objptr, ##38044
0bfe8     F2 38 02 FB | 	rdlong	local10, objptr
0bfec     1C 35 02 F6 | 	mov	local08, local10
0bff0     01 34 66 F0 | 	shl	local08, #1
0bff4     1C 35 02 F1 | 	add	local08, local10
0bff8     02 34 66 F0 | 	shl	local08, #2
0bffc     03 00 00 FF 
0c000     00 E4 85 F1 | 	sub	objptr, ##1536
0c004     F2 34 02 F1 | 	add	local08, objptr
0c008     1A 37 62 FC | 	wrlong	local09, local08
0c00c     03 00 00 FF 
0c010     00 E4 05 F1 | 	add	objptr, ##1536
0c014     F2 38 02 FB | 	rdlong	local10, objptr
0c018     1C 37 02 F6 | 	mov	local09, local10
0c01c     01 36 66 F0 | 	shl	local09, #1
0c020     1C 37 02 F1 | 	add	local09, local10
0c024     02 36 66 F0 | 	shl	local09, #2
0c028     03 00 00 FF 
0c02c     00 E4 85 F1 | 	sub	objptr, ##1536
0c030     F2 36 02 F1 | 	add	local09, objptr
0c034     04 36 06 F1 | 	add	local09, #4
0c038     1B 3B 62 FC | 	wrlong	local11, local09
0c03c     03 00 00 FF 
0c040     00 E4 05 F1 | 	add	objptr, ##1536
0c044     F2 3A 02 FB | 	rdlong	local11, objptr
0c048     1D 39 02 F6 | 	mov	local10, local11
0c04c     01 38 66 F0 | 	shl	local10, #1
0c050     1D 39 02 F1 | 	add	local10, local11
0c054     02 38 66 F0 | 	shl	local10, #2
0c058     03 00 00 FF 
0c05c     00 E4 85 F1 | 	sub	objptr, ##1536
0c060     F2 38 02 F1 | 	add	local10, objptr
0c064     08 38 06 F1 | 	add	local10, #8
0c068     1C 27 62 FC | 	wrlong	local01, local10
0c06c     03 00 00 FF 
0c070     00 E4 05 F1 | 	add	objptr, ##1536
0c074     F2 36 02 FB | 	rdlong	local09, objptr
0c078     01 36 06 F1 | 	add	local09, #1
0c07c     F2 36 62 FC | 	wrlong	local09, objptr
0c080     4A 00 00 FF 
0c084     9C E4 85 F1 | 	sub	objptr, ##38044
0c088                 | ' t2.result.twowords(1)=numpar
0c088                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0c088                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c088                 | ' return 0
0c088     00 FA 05 F6 | 	mov	result1, #0
0c08c                 | LR__0998
0c08c     A7 F0 03 F6 | 	mov	ptra, fp
0c090     B2 00 A0 FD | 	call	#popregs_
0c094                 | _getaddr_ret
0c094     2D 00 64 FD | 	ret
0c098                 | 
0c098                 | ' 
0c098                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c098                 | ' '--------------------------------------------- 
0c098                 | ' 
0c098                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c098                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0c098                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c098                 | ' 
0c098                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c098                 | ' '
0c098                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0c098                 | ' '
0c098                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c098                 | ' 
0c098                 | ' function expr() as ulong 
0c098                 | _expr
0c098     07 4A 05 F6 | 	mov	COUNT_, #7
0c09c     A8 00 A0 FD | 	call	#pushregs_
0c0a0                 | _expr_enter
0c0a0     37 00 00 FF 
0c0a4     64 E4 05 F1 | 	add	objptr, ##28260
0c0a8     F2 2C 02 FB | 	rdlong	local04, objptr
0c0ac     03 2C 66 F0 | 	shl	local04, #3
0c0b0     02 00 00 FF 
0c0b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c0b8     F2 2C 02 F1 | 	add	local04, objptr
0c0bc     04 2C 06 F1 | 	add	local04, #4
0c0c0     16 2F 02 FB | 	rdlong	local05, local04
0c0c4                 | ' 
0c0c4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0c0c4     FE 2F 0E F2 | 	cmp	local05, #510 wz
0c0c8     35 00 00 FF 
0c0cc     2C E4 85 F1 | 	sub	objptr, ##27180
0c0d0     C4 00 90 5D |  if_ne	jmp	#LR__1000
0c0d4     1D 26 06 F6 | 	mov	local01, #29
0c0d8     FF 2A 06 F6 | 	mov	local03, #255
0c0dc     13 31 02 F6 | 	mov	local06, local01
0c0e0     14 33 02 F6 | 	mov	local07, local02
0c0e4     15 27 02 F6 | 	mov	local01, local03
0c0e8     4A 00 00 FF 
0c0ec     9C E4 05 F1 | 	add	objptr, ##38044
0c0f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c0f4     17 2D 02 F6 | 	mov	local04, local05
0c0f8     01 2C 66 F0 | 	shl	local04, #1
0c0fc     17 2D 02 F1 | 	add	local04, local05
0c100     02 2C 66 F0 | 	shl	local04, #2
0c104     03 00 00 FF 
0c108     00 E4 85 F1 | 	sub	objptr, ##1536
0c10c     F2 2C 02 F1 | 	add	local04, objptr
0c110     16 31 62 FC | 	wrlong	local06, local04
0c114     03 00 00 FF 
0c118     00 E4 05 F1 | 	add	objptr, ##1536
0c11c     F2 30 02 FB | 	rdlong	local06, objptr
0c120     18 2F 02 F6 | 	mov	local05, local06
0c124     01 2E 66 F0 | 	shl	local05, #1
0c128     18 2F 02 F1 | 	add	local05, local06
0c12c     02 2E 66 F0 | 	shl	local05, #2
0c130     03 00 00 FF 
0c134     00 E4 85 F1 | 	sub	objptr, ##1536
0c138     F2 2E 02 F1 | 	add	local05, objptr
0c13c     04 2E 06 F1 | 	add	local05, #4
0c140     17 33 62 FC | 	wrlong	local07, local05
0c144     03 00 00 FF 
0c148     00 E4 05 F1 | 	add	objptr, ##1536
0c14c     F2 32 02 FB | 	rdlong	local07, objptr
0c150     19 31 02 F6 | 	mov	local06, local07
0c154     01 30 66 F0 | 	shl	local06, #1
0c158     19 31 02 F1 | 	add	local06, local07
0c15c     02 30 66 F0 | 	shl	local06, #2
0c160     03 00 00 FF 
0c164     00 E4 85 F1 | 	sub	objptr, ##1536
0c168     F2 30 02 F1 | 	add	local06, objptr
0c16c     08 30 06 F1 | 	add	local06, #8
0c170     18 27 62 FC | 	wrlong	local01, local06
0c174     03 00 00 FF 
0c178     00 E4 05 F1 | 	add	objptr, ##1536
0c17c     F2 30 02 FB | 	rdlong	local06, objptr
0c180     01 30 06 F1 | 	add	local06, #1
0c184     F2 30 62 FC | 	wrlong	local06, objptr
0c188     4A 00 00 FF 
0c18c     9C E4 85 F1 | 	sub	objptr, ##38044
0c190     1D FA 05 F6 | 	mov	result1, #29
0c194     64 01 90 FD | 	jmp	#LR__1003
0c198                 | LR__1000
0c198     00 26 06 F6 | 	mov	local01, #0
0c19c     68 01 B0 FD | 	call	#_addsub
0c1a0                 | ' t3.result.uresult=0
0c1a0                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0c1a0                 | ' if err>0 then return err
0c1a0     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1a4     54 01 90 3D |  if_ae	jmp	#LR__1003
0c1a8     37 00 00 FF 
0c1ac     64 E4 05 F1 | 	add	objptr, ##28260
0c1b0     F2 2C 02 FB | 	rdlong	local04, objptr
0c1b4     03 2C 66 F0 | 	shl	local04, #3
0c1b8     02 00 00 FF 
0c1bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c1c0     F2 2C 02 F1 | 	add	local04, objptr
0c1c4     04 2C 06 F1 | 	add	local04, #4
0c1c8     16 2F 02 FB | 	rdlong	local05, local04
0c1cc                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c1cc                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c1cc     35 00 00 FF 
0c1d0     2C E4 85 F1 | 	sub	objptr, ##27180
0c1d4                 | LR__1001
0c1d4     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c1d8     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c1dc     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c1e0     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c1e4     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c1e8     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c1ec     08 01 90 5D |  if_ne	jmp	#LR__1002
0c1f0     37 00 00 FF 
0c1f4     64 E4 05 F1 | 	add	objptr, ##28260
0c1f8     F2 30 02 FB | 	rdlong	local06, objptr
0c1fc     01 30 06 F1 | 	add	local06, #1
0c200     F2 30 62 FC | 	wrlong	local06, objptr
0c204     37 00 00 FF 
0c208     64 E4 85 F1 | 	sub	objptr, ##28260
0c20c     F8 00 B0 FD | 	call	#_addsub
0c210                 | '   ct+=1
0c210                 | '   err=addsub() : if err>0 then return err
0c210     01 FA 15 F2 | 	cmp	result1, #1 wc
0c214     E4 00 90 3D |  if_ae	jmp	#LR__1003
0c218     17 2B 02 F6 | 	mov	local03, local05
0c21c     13 31 02 F6 | 	mov	local06, local01
0c220     14 33 02 F6 | 	mov	local07, local02
0c224     15 2F 02 F6 | 	mov	local05, local03
0c228     4A 00 00 FF 
0c22c     9C E4 05 F1 | 	add	objptr, ##38044
0c230     F2 2C 02 FB | 	rdlong	local04, objptr
0c234     16 FB 01 F6 | 	mov	result1, local04
0c238     01 FA 65 F0 | 	shl	result1, #1
0c23c     16 FB 01 F1 | 	add	result1, local04
0c240     02 FA 65 F0 | 	shl	result1, #2
0c244     03 00 00 FF 
0c248     00 E4 85 F1 | 	sub	objptr, ##1536
0c24c     F2 FA 01 F1 | 	add	result1, objptr
0c250     FD 30 62 FC | 	wrlong	local06, result1
0c254     03 00 00 FF 
0c258     00 E4 05 F1 | 	add	objptr, ##1536
0c25c     F2 30 02 FB | 	rdlong	local06, objptr
0c260     18 2D 02 F6 | 	mov	local04, local06
0c264     01 2C 66 F0 | 	shl	local04, #1
0c268     18 2D 02 F1 | 	add	local04, local06
0c26c     02 2C 66 F0 | 	shl	local04, #2
0c270     03 00 00 FF 
0c274     00 E4 85 F1 | 	sub	objptr, ##1536
0c278     F2 2C 02 F1 | 	add	local04, objptr
0c27c     04 2C 06 F1 | 	add	local04, #4
0c280     16 33 62 FC | 	wrlong	local07, local04
0c284     03 00 00 FF 
0c288     00 E4 05 F1 | 	add	objptr, ##1536
0c28c     F2 32 02 FB | 	rdlong	local07, objptr
0c290     19 31 02 F6 | 	mov	local06, local07
0c294     01 30 66 F0 | 	shl	local06, #1
0c298     19 31 02 F1 | 	add	local06, local07
0c29c     02 30 66 F0 | 	shl	local06, #2
0c2a0     03 00 00 FF 
0c2a4     00 E4 85 F1 | 	sub	objptr, ##1536
0c2a8     F2 30 02 F1 | 	add	local06, objptr
0c2ac     08 30 06 F1 | 	add	local06, #8
0c2b0     18 2F 62 FC | 	wrlong	local05, local06
0c2b4     03 00 00 FF 
0c2b8     00 E4 05 F1 | 	add	objptr, ##1536
0c2bc     F2 30 02 FB | 	rdlong	local06, objptr
0c2c0     01 30 06 F1 | 	add	local06, #1
0c2c4     F2 30 62 FC | 	wrlong	local06, objptr
0c2c8     13 00 00 FF 
0c2cc     38 E4 85 F1 | 	sub	objptr, ##9784
0c2d0     F2 2C 02 FB | 	rdlong	local04, objptr
0c2d4     03 2C 66 F0 | 	shl	local04, #3
0c2d8     02 00 00 FF 
0c2dc     38 E4 85 F1 | 	sub	objptr, ##1080
0c2e0     F2 2C 02 F1 | 	add	local04, objptr
0c2e4     04 2C 06 F1 | 	add	local04, #4
0c2e8     16 2F 02 FB | 	rdlong	local05, local04
0c2ec     35 00 00 FF 
0c2f0     2C E4 85 F1 | 	sub	objptr, ##27180
0c2f4     DC FE 9F FD | 	jmp	#LR__1001
0c2f8                 | LR__1002
0c2f8                 | ' return 0  
0c2f8     00 FA 05 F6 | 	mov	result1, #0
0c2fc                 | LR__1003
0c2fc     A7 F0 03 F6 | 	mov	ptra, fp
0c300     B2 00 A0 FD | 	call	#popregs_
0c304                 | _expr_ret
0c304     2D 00 64 FD | 	ret
0c308                 | 
0c308                 | ' 
0c308                 | ' ' Second level operators : add, sub, logic
0c308                 | ' 
0c308                 | ' function addsub() as ulong
0c308                 | _addsub
0c308     07 4A 05 F6 | 	mov	COUNT_, #7
0c30c     A8 00 A0 FD | 	call	#pushregs_
0c310                 | _addsub_enter
0c310     00 26 06 F6 | 	mov	local01, #0
0c314     60 01 B0 FD | 	call	#_muldiv
0c318                 | ' 
0c318                 | ' t3.result.uresult=0
0c318                 | ' err=muldiv() : if err>0 then return err           			 
0c318     01 FA 15 F2 | 	cmp	result1, #1 wc
0c31c     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c320     37 00 00 FF 
0c324     64 E4 05 F1 | 	add	objptr, ##28260
0c328     F2 2C 02 FB | 	rdlong	local04, objptr
0c32c     03 2C 66 F0 | 	shl	local04, #3
0c330     02 00 00 FF 
0c334     38 E4 85 F1 | 	sub	objptr, ##1080
0c338     F2 2C 02 F1 | 	add	local04, objptr
0c33c     04 2C 06 F1 | 	add	local04, #4
0c340     16 2F 02 FB | 	rdlong	local05, local04
0c344                 | ' op = lparts(ct).token				 
0c344                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c344     35 00 00 FF 
0c348     2C E4 85 F1 | 	sub	objptr, ##27180
0c34c                 | LR__1010
0c34c     01 2E 0E F2 | 	cmp	local05, #1 wz
0c350     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c354     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c358     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c35c     08 01 90 5D |  if_ne	jmp	#LR__1011
0c360     37 00 00 FF 
0c364     64 E4 05 F1 | 	add	objptr, ##28260
0c368     F2 2C 02 FB | 	rdlong	local04, objptr
0c36c     01 2C 06 F1 | 	add	local04, #1
0c370     F2 2C 62 FC | 	wrlong	local04, objptr
0c374     37 00 00 FF 
0c378     64 E4 85 F1 | 	sub	objptr, ##28260
0c37c     F8 00 B0 FD | 	call	#_muldiv
0c380                 | '   ct+=1
0c380                 | '   err=muldiv() : if err>0 then return err   
0c380     01 FA 15 F2 | 	cmp	result1, #1 wc
0c384     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c388     17 2B 02 F6 | 	mov	local03, local05
0c38c     13 31 02 F6 | 	mov	local06, local01
0c390     14 33 02 F6 | 	mov	local07, local02
0c394     15 2F 02 F6 | 	mov	local05, local03
0c398     4A 00 00 FF 
0c39c     9C E4 05 F1 | 	add	objptr, ##38044
0c3a0     F2 2C 02 FB | 	rdlong	local04, objptr
0c3a4     16 FB 01 F6 | 	mov	result1, local04
0c3a8     01 FA 65 F0 | 	shl	result1, #1
0c3ac     16 FB 01 F1 | 	add	result1, local04
0c3b0     02 FA 65 F0 | 	shl	result1, #2
0c3b4     03 00 00 FF 
0c3b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c3bc     F2 FA 01 F1 | 	add	result1, objptr
0c3c0     FD 30 62 FC | 	wrlong	local06, result1
0c3c4     03 00 00 FF 
0c3c8     00 E4 05 F1 | 	add	objptr, ##1536
0c3cc     F2 30 02 FB | 	rdlong	local06, objptr
0c3d0     18 2D 02 F6 | 	mov	local04, local06
0c3d4     01 2C 66 F0 | 	shl	local04, #1
0c3d8     18 2D 02 F1 | 	add	local04, local06
0c3dc     02 2C 66 F0 | 	shl	local04, #2
0c3e0     03 00 00 FF 
0c3e4     00 E4 85 F1 | 	sub	objptr, ##1536
0c3e8     F2 2C 02 F1 | 	add	local04, objptr
0c3ec     04 2C 06 F1 | 	add	local04, #4
0c3f0     16 33 62 FC | 	wrlong	local07, local04
0c3f4     03 00 00 FF 
0c3f8     00 E4 05 F1 | 	add	objptr, ##1536
0c3fc     F2 32 02 FB | 	rdlong	local07, objptr
0c400     19 31 02 F6 | 	mov	local06, local07
0c404     01 30 66 F0 | 	shl	local06, #1
0c408     19 31 02 F1 | 	add	local06, local07
0c40c     02 30 66 F0 | 	shl	local06, #2
0c410     03 00 00 FF 
0c414     00 E4 85 F1 | 	sub	objptr, ##1536
0c418     F2 30 02 F1 | 	add	local06, objptr
0c41c     08 30 06 F1 | 	add	local06, #8
0c420     18 2F 62 FC | 	wrlong	local05, local06
0c424     03 00 00 FF 
0c428     00 E4 05 F1 | 	add	objptr, ##1536
0c42c     F2 30 02 FB | 	rdlong	local06, objptr
0c430     01 30 06 F1 | 	add	local06, #1
0c434     F2 30 62 FC | 	wrlong	local06, objptr
0c438     13 00 00 FF 
0c43c     38 E4 85 F1 | 	sub	objptr, ##9784
0c440     F2 2C 02 FB | 	rdlong	local04, objptr
0c444     03 2C 66 F0 | 	shl	local04, #3
0c448     02 00 00 FF 
0c44c     38 E4 85 F1 | 	sub	objptr, ##1080
0c450     F2 2C 02 F1 | 	add	local04, objptr
0c454     04 2C 06 F1 | 	add	local04, #4
0c458     16 2F 02 FB | 	rdlong	local05, local04
0c45c     35 00 00 FF 
0c460     2C E4 85 F1 | 	sub	objptr, ##27180
0c464     E4 FE 9F FD | 	jmp	#LR__1010
0c468                 | LR__1011
0c468                 | ' return 0
0c468     00 FA 05 F6 | 	mov	result1, #0
0c46c                 | LR__1012
0c46c     A7 F0 03 F6 | 	mov	ptra, fp
0c470     B2 00 A0 FD | 	call	#popregs_
0c474                 | _addsub_ret
0c474     2D 00 64 FD | 	ret
0c478                 | 
0c478                 | ' 
0c478                 | ' ' Third level operators : mul,div,shift,power
0c478                 | ' 
0c478                 | ' function muldiv() as ulong
0c478                 | _muldiv
0c478     07 4A 05 F6 | 	mov	COUNT_, #7
0c47c     A8 00 A0 FD | 	call	#pushregs_
0c480                 | _muldiv_enter
0c480     00 26 06 F6 | 	mov	local01, #0
0c484     6C 01 B0 FD | 	call	#_getvalue
0c488                 | ' 
0c488                 | ' t3.result.uresult=0
0c488                 | ' err=getvalue() : if err>0 then return err     
0c488     01 FA 15 F2 | 	cmp	result1, #1 wc
0c48c     58 01 90 3D |  if_ae	jmp	#LR__1022
0c490     37 00 00 FF 
0c494     64 E4 05 F1 | 	add	objptr, ##28260
0c498     F2 2C 02 FB | 	rdlong	local04, objptr
0c49c     03 2C 66 F0 | 	shl	local04, #3
0c4a0     02 00 00 FF 
0c4a4     38 E4 85 F1 | 	sub	objptr, ##1080
0c4a8     F2 2C 02 F1 | 	add	local04, objptr
0c4ac     04 2C 06 F1 | 	add	local04, #4
0c4b0     16 2F 02 FB | 	rdlong	local05, local04
0c4b4                 | ' op = lparts(ct).token
0c4b4                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c4b4     35 00 00 FF 
0c4b8     2C E4 85 F1 | 	sub	objptr, ##27180
0c4bc                 | LR__1020
0c4bc     05 2E 0E F2 | 	cmp	local05, #5 wz
0c4c0     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c4c4     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c4c8     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c4cc     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c4d0     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c4d4     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c4d8     08 01 90 5D |  if_ne	jmp	#LR__1021
0c4dc     37 00 00 FF 
0c4e0     64 E4 05 F1 | 	add	objptr, ##28260
0c4e4     F2 2C 02 FB | 	rdlong	local04, objptr
0c4e8     01 2C 06 F1 | 	add	local04, #1
0c4ec     F2 2C 62 FC | 	wrlong	local04, objptr
0c4f0     37 00 00 FF 
0c4f4     64 E4 85 F1 | 	sub	objptr, ##28260
0c4f8     F8 00 B0 FD | 	call	#_getvalue
0c4fc                 | '   ct+=1
0c4fc                 | '   err=getvalue() :if err>0 then return err   
0c4fc     01 FA 15 F2 | 	cmp	result1, #1 wc
0c500     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c504     17 2B 02 F6 | 	mov	local03, local05
0c508     13 31 02 F6 | 	mov	local06, local01
0c50c     14 33 02 F6 | 	mov	local07, local02
0c510     15 2F 02 F6 | 	mov	local05, local03
0c514     4A 00 00 FF 
0c518     9C E4 05 F1 | 	add	objptr, ##38044
0c51c     F2 2C 02 FB | 	rdlong	local04, objptr
0c520     16 FB 01 F6 | 	mov	result1, local04
0c524     01 FA 65 F0 | 	shl	result1, #1
0c528     16 FB 01 F1 | 	add	result1, local04
0c52c     02 FA 65 F0 | 	shl	result1, #2
0c530     03 00 00 FF 
0c534     00 E4 85 F1 | 	sub	objptr, ##1536
0c538     F2 FA 01 F1 | 	add	result1, objptr
0c53c     FD 30 62 FC | 	wrlong	local06, result1
0c540     03 00 00 FF 
0c544     00 E4 05 F1 | 	add	objptr, ##1536
0c548     F2 30 02 FB | 	rdlong	local06, objptr
0c54c     18 2D 02 F6 | 	mov	local04, local06
0c550     01 2C 66 F0 | 	shl	local04, #1
0c554     18 2D 02 F1 | 	add	local04, local06
0c558     02 2C 66 F0 | 	shl	local04, #2
0c55c     03 00 00 FF 
0c560     00 E4 85 F1 | 	sub	objptr, ##1536
0c564     F2 2C 02 F1 | 	add	local04, objptr
0c568     04 2C 06 F1 | 	add	local04, #4
0c56c     16 33 62 FC | 	wrlong	local07, local04
0c570     03 00 00 FF 
0c574     00 E4 05 F1 | 	add	objptr, ##1536
0c578     F2 32 02 FB | 	rdlong	local07, objptr
0c57c     19 31 02 F6 | 	mov	local06, local07
0c580     01 30 66 F0 | 	shl	local06, #1
0c584     19 31 02 F1 | 	add	local06, local07
0c588     02 30 66 F0 | 	shl	local06, #2
0c58c     03 00 00 FF 
0c590     00 E4 85 F1 | 	sub	objptr, ##1536
0c594     F2 30 02 F1 | 	add	local06, objptr
0c598     08 30 06 F1 | 	add	local06, #8
0c59c     18 2F 62 FC | 	wrlong	local05, local06
0c5a0     03 00 00 FF 
0c5a4     00 E4 05 F1 | 	add	objptr, ##1536
0c5a8     F2 30 02 FB | 	rdlong	local06, objptr
0c5ac     01 30 06 F1 | 	add	local06, #1
0c5b0     F2 30 62 FC | 	wrlong	local06, objptr
0c5b4     13 00 00 FF 
0c5b8     38 E4 85 F1 | 	sub	objptr, ##9784
0c5bc     F2 2C 02 FB | 	rdlong	local04, objptr
0c5c0     03 2C 66 F0 | 	shl	local04, #3
0c5c4     02 00 00 FF 
0c5c8     38 E4 85 F1 | 	sub	objptr, ##1080
0c5cc     F2 2C 02 F1 | 	add	local04, objptr
0c5d0     04 2C 06 F1 | 	add	local04, #4
0c5d4     16 2F 02 FB | 	rdlong	local05, local04
0c5d8     35 00 00 FF 
0c5dc     2C E4 85 F1 | 	sub	objptr, ##27180
0c5e0     D8 FE 9F FD | 	jmp	#LR__1020
0c5e4                 | LR__1021
0c5e4                 | ' return 0
0c5e4     00 FA 05 F6 | 	mov	result1, #0
0c5e8                 | LR__1022
0c5e8     A7 F0 03 F6 | 	mov	ptra, fp
0c5ec     B2 00 A0 FD | 	call	#popregs_
0c5f0                 | _muldiv_ret
0c5f0     2D 00 64 FD | 	ret
0c5f4                 | 
0c5f4                 | ' 
0c5f4                 | ' ' Get a value for operations
0c5f4                 | ' 
0c5f4                 | ' function getvalue()  as ulong
0c5f4                 | _getvalue
0c5f4     0B 4A 05 F6 | 	mov	COUNT_, #11
0c5f8     A8 00 A0 FD | 	call	#pushregs_
0c5fc                 | _getvalue_enter
0c5fc     01 2C 06 F6 | 	mov	local04, #1
0c600     00 26 06 F6 | 	mov	local01, #0
0c604     1D 2A 06 F6 | 	mov	local03, #29
0c608     37 00 00 FF 
0c60c     64 E4 05 F1 | 	add	objptr, ##28260
0c610     F2 16 02 FB | 	rdlong	arg03, objptr
0c614     03 16 66 F0 | 	shl	arg03, #3
0c618     02 00 00 FF 
0c61c     38 E4 85 F1 | 	sub	objptr, ##1080
0c620     F2 16 02 F1 | 	add	arg03, objptr
0c624     04 16 06 F1 | 	add	arg03, #4
0c628     0B 2F 02 FB | 	rdlong	local05, arg03
0c62c                 | ' 
0c62c                 | ' m=1											' for negative numbers
0c62c                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c62c                 | ' op=lparts(ct).token
0c62c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c62c     02 2E 0E F2 | 	cmp	local05, #2 wz
0c630     35 00 00 FF 
0c634     2C E4 85 F1 | 	sub	objptr, ##27180
0c638     38 00 90 5D |  if_ne	jmp	#LR__1030
0c63c     01 2C 66 F6 | 	neg	local04, #1
0c640     37 00 00 FF 
0c644     64 E4 05 F1 | 	add	objptr, ##28260
0c648     F2 2E 02 FB | 	rdlong	local05, objptr
0c64c     01 2E 06 F1 | 	add	local05, #1
0c650     F2 2E 62 FC | 	wrlong	local05, objptr
0c654     03 2E 66 F0 | 	shl	local05, #3
0c658     02 00 00 FF 
0c65c     38 E4 85 F1 | 	sub	objptr, ##1080
0c660     F2 2E 02 F1 | 	add	local05, objptr
0c664     04 2E 06 F1 | 	add	local05, #4
0c668     17 2F 02 FB | 	rdlong	local05, local05
0c66c     35 00 00 FF 
0c670     2C E4 85 F1 | 	sub	objptr, ##27180
0c674                 | LR__1030
0c674                 | ' select case op
0c674     01 00 00 FF 
0c678     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c67c     44 00 90 AD |  if_e	jmp	#LR__1031
0c680     01 00 00 FF 
0c684     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c688     90 01 90 AD |  if_e	jmp	#LR__1034
0c68c     01 00 00 FF 
0c690     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c694     44 04 90 AD |  if_e	jmp	#LR__1041
0c698     01 00 00 FF 
0c69c     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c6a0     A8 05 90 AD |  if_e	jmp	#LR__1044
0c6a4     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c6a8     78 07 90 AD |  if_e	jmp	#LR__1049
0c6ac     01 00 00 FF 
0c6b0     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c6b4     70 08 90 AD |  if_e	jmp	#LR__1050
0c6b8     15 2E 0E F2 | 	cmp	local05, #21 wz
0c6bc     98 08 90 AD |  if_e	jmp	#LR__1051
0c6c0     10 09 90 FD | 	jmp	#LR__1052
0c6c4                 | LR__1031
0c6c4                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c6c4     01 2C 0E F2 | 	cmp	local04, #1 wz
0c6c8     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c6cc     37 00 00 FF 
0c6d0     64 E4 05 F1 | 	add	objptr, ##28260
0c6d4     F2 2E 02 FB | 	rdlong	local05, objptr
0c6d8     03 2E 66 F0 | 	shl	local05, #3
0c6dc     02 00 00 FF 
0c6e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c6e4     F2 2E 02 F1 | 	add	local05, objptr
0c6e8     17 13 02 FB | 	rdlong	arg01, local05
0c6ec     00 14 06 F6 | 	mov	arg02, #0
0c6f0     35 00 00 FF 
0c6f4     2C E4 85 F1 | 	sub	objptr, ##27180
0c6f8     EC F1 B1 FD | 	call	#__system____builtin_atoi
0c6fc     FD 2C 02 FD | 	qmul	local04, result1
0c700     18 26 62 FD | 	getqx	local01
0c704     1C 2A 06 F6 | 	mov	local03, #28
0c708                 | LR__1032
0c708                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c708     FF FF 7F FF 
0c70c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c710     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c714     37 00 00 FF 
0c718     64 E4 05 F1 | 	add	objptr, ##28260
0c71c     F2 2E 02 FB | 	rdlong	local05, objptr
0c720     03 2E 66 F0 | 	shl	local05, #3
0c724     02 00 00 FF 
0c728     38 E4 85 F1 | 	sub	objptr, ##1080
0c72c     F2 2E 02 F1 | 	add	local05, objptr
0c730     17 13 02 FB | 	rdlong	arg01, local05
0c734     00 14 06 F6 | 	mov	arg02, #0
0c738     35 00 00 FF 
0c73c     2C E4 85 F1 | 	sub	objptr, ##27180
0c740     A4 F1 B1 FD | 	call	#__system____builtin_atoi
0c744     FD 2C 02 FD | 	qmul	local04, result1
0c748     18 26 62 FD | 	getqx	local01
0c74c     1C 2A 06 F6 | 	mov	local03, #28
0c750                 | LR__1033
0c750     13 31 02 F6 | 	mov	local06, local01
0c754     14 33 02 F6 | 	mov	local07, local02
0c758     15 2F 02 F6 | 	mov	local05, local03
0c75c     4A 00 00 FF 
0c760     9C E4 05 F1 | 	add	objptr, ##38044
0c764     F2 26 02 FB | 	rdlong	local01, objptr
0c768     13 2D 02 F6 | 	mov	local04, local01
0c76c     01 2C 66 F0 | 	shl	local04, #1
0c770     13 2D 02 F1 | 	add	local04, local01
0c774     02 2C 66 F0 | 	shl	local04, #2
0c778     03 00 00 FF 
0c77c     00 E4 85 F1 | 	sub	objptr, ##1536
0c780     F2 2C 02 F1 | 	add	local04, objptr
0c784     16 31 62 FC | 	wrlong	local06, local04
0c788     03 00 00 FF 
0c78c     00 E4 05 F1 | 	add	objptr, ##1536
0c790     F2 30 02 FB | 	rdlong	local06, objptr
0c794     18 27 02 F6 | 	mov	local01, local06
0c798     01 26 66 F0 | 	shl	local01, #1
0c79c     18 27 02 F1 | 	add	local01, local06
0c7a0     02 26 66 F0 | 	shl	local01, #2
0c7a4     03 00 00 FF 
0c7a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c7ac     F2 26 02 F1 | 	add	local01, objptr
0c7b0     04 26 06 F1 | 	add	local01, #4
0c7b4     13 33 62 FC | 	wrlong	local07, local01
0c7b8     03 00 00 FF 
0c7bc     00 E4 05 F1 | 	add	objptr, ##1536
0c7c0     F2 32 02 FB | 	rdlong	local07, objptr
0c7c4     19 31 02 F6 | 	mov	local06, local07
0c7c8     01 30 66 F0 | 	shl	local06, #1
0c7cc     19 31 02 F1 | 	add	local06, local07
0c7d0     02 30 66 F0 | 	shl	local06, #2
0c7d4     03 00 00 FF 
0c7d8     00 E4 85 F1 | 	sub	objptr, ##1536
0c7dc     F2 30 02 F1 | 	add	local06, objptr
0c7e0     08 30 06 F1 | 	add	local06, #8
0c7e4     18 2F 62 FC | 	wrlong	local05, local06
0c7e8     03 00 00 FF 
0c7ec     00 E4 05 F1 | 	add	objptr, ##1536
0c7f0     F2 30 02 FB | 	rdlong	local06, objptr
0c7f4     01 30 06 F1 | 	add	local06, #1
0c7f8     F2 30 62 FC | 	wrlong	local06, objptr
0c7fc     13 00 00 FF 
0c800     38 E4 85 F1 | 	sub	objptr, ##9784
0c804     F2 30 02 FB | 	rdlong	local06, objptr
0c808     01 30 06 F1 | 	add	local06, #1
0c80c     F2 30 62 FC | 	wrlong	local06, objptr
0c810     37 00 00 FF 
0c814     64 E4 85 F1 | 	sub	objptr, ##28260
0c818     E4 07 90 FD | 	jmp	#LR__1053
0c81c                 | LR__1034
0c81c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c81c     37 00 00 FF 
0c820     64 E4 05 F1 | 	add	objptr, ##28260
0c824     F2 16 02 FB | 	rdlong	arg03, objptr
0c828     03 16 66 F0 | 	shl	arg03, #3
0c82c     02 00 00 FF 
0c830     38 E4 85 F1 | 	sub	objptr, ##1080
0c834     F2 16 02 F1 | 	add	arg03, objptr
0c838     0B 13 02 FB | 	rdlong	arg01, arg03
0c83c     01 14 06 F6 | 	mov	arg02, #1
0c840     35 00 00 FF 
0c844     2C E4 85 F1 | 	sub	objptr, ##27180
0c848     28 DC B1 FD | 	call	#__system__Left_S
0c84c     FD 12 02 F6 | 	mov	arg01, result1
0c850     C3 01 00 FF 
0c854     01 15 06 F6 | 	mov	arg02, ##@LR__6018
0c858     C0 BB B1 FD | 	call	#__system___string_cmp
0c85c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c860     94 00 90 5D |  if_ne	jmp	#LR__1037
0c864     37 00 00 FF 
0c868     64 E4 05 F1 | 	add	objptr, ##28260
0c86c     F2 32 02 FB | 	rdlong	local07, objptr
0c870     19 31 02 F6 | 	mov	local06, local07
0c874     03 30 66 F0 | 	shl	local06, #3
0c878     02 00 00 FF 
0c87c     38 E4 85 F1 | 	sub	objptr, ##1080
0c880     F2 30 02 F1 | 	add	local06, objptr
0c884     C3 01 00 FF 
0c888     03 2F 06 F6 | 	mov	local05, ##@LR__6019
0c88c     03 32 66 F0 | 	shl	local07, #3
0c890     F2 32 02 F1 | 	add	local07, objptr
0c894     19 33 02 FB | 	rdlong	local07, local07
0c898     02 00 00 FF 
0c89c     38 E4 05 F1 | 	add	objptr, ##1080
0c8a0     F2 26 02 FB | 	rdlong	local01, objptr
0c8a4     03 26 66 F0 | 	shl	local01, #3
0c8a8     02 00 00 FF 
0c8ac     38 E4 85 F1 | 	sub	objptr, ##1080
0c8b0     F2 26 02 F1 | 	add	local01, objptr
0c8b4     13 13 02 FB | 	rdlong	arg01, local01
0c8b8     35 00 00 FF 
0c8bc     2C E4 85 F1 | 	sub	objptr, ##27180
0c8c0     09 35 02 F6 | 	mov	local08, arg01
0c8c4     97 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c8c8                 | LR__1035
0c8c8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c8cc     01 34 06 51 |  if_ne	add	local08, #1
0c8d0     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c8d4                 | LR__1036
0c8d4     09 35 82 F1 | 	sub	local08, arg01
0c8d8     1A 15 02 F6 | 	mov	arg02, local08
0c8dc     01 14 86 F1 | 	sub	arg02, #1
0c8e0     19 13 02 F6 | 	mov	arg01, local07
0c8e4     14 DC B1 FD | 	call	#__system__Right_S
0c8e8     FD 14 02 F6 | 	mov	arg02, result1
0c8ec     17 13 02 F6 | 	mov	arg01, local05
0c8f0     5C BB B1 FD | 	call	#__system___string_concat
0c8f4     18 FB 61 FC | 	wrlong	result1, local06
0c8f8                 | LR__1037
0c8f8                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c8f8     37 00 00 FF 
0c8fc     64 E4 05 F1 | 	add	objptr, ##28260
0c900     F2 16 02 FB | 	rdlong	arg03, objptr
0c904     03 16 66 F0 | 	shl	arg03, #3
0c908     02 00 00 FF 
0c90c     38 E4 85 F1 | 	sub	objptr, ##1080
0c910     F2 16 02 F1 | 	add	arg03, objptr
0c914     0B 13 02 FB | 	rdlong	arg01, arg03
0c918     01 14 06 F6 | 	mov	arg02, #1
0c91c     35 00 00 FF 
0c920     2C E4 85 F1 | 	sub	objptr, ##27180
0c924     4C DB B1 FD | 	call	#__system__Left_S
0c928     FD 12 02 F6 | 	mov	arg01, result1
0c92c     C3 01 00 FF 
0c930     06 15 06 F6 | 	mov	arg02, ##@LR__6020
0c934     E4 BA B1 FD | 	call	#__system___string_cmp
0c938     00 FA 0D F2 | 	cmp	result1, #0 wz
0c93c     94 00 90 5D |  if_ne	jmp	#LR__1040
0c940     37 00 00 FF 
0c944     64 E4 05 F1 | 	add	objptr, ##28260
0c948     F2 32 02 FB | 	rdlong	local07, objptr
0c94c     19 31 02 F6 | 	mov	local06, local07
0c950     03 30 66 F0 | 	shl	local06, #3
0c954     02 00 00 FF 
0c958     38 E4 85 F1 | 	sub	objptr, ##1080
0c95c     F2 30 02 F1 | 	add	local06, objptr
0c960     C3 01 00 FF 
0c964     08 2F 06 F6 | 	mov	local05, ##@LR__6021
0c968     03 32 66 F0 | 	shl	local07, #3
0c96c     F2 32 02 F1 | 	add	local07, objptr
0c970     19 33 02 FB | 	rdlong	local07, local07
0c974     02 00 00 FF 
0c978     38 E4 05 F1 | 	add	objptr, ##1080
0c97c     F2 26 02 FB | 	rdlong	local01, objptr
0c980     03 26 66 F0 | 	shl	local01, #3
0c984     02 00 00 FF 
0c988     38 E4 85 F1 | 	sub	objptr, ##1080
0c98c     F2 26 02 F1 | 	add	local01, objptr
0c990     13 13 02 FB | 	rdlong	arg01, local01
0c994     35 00 00 FF 
0c998     2C E4 85 F1 | 	sub	objptr, ##27180
0c99c     09 35 02 F6 | 	mov	local08, arg01
0c9a0     97 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c9a4                 | LR__1038
0c9a4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c9a8     01 34 06 51 |  if_ne	add	local08, #1
0c9ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c9b0                 | LR__1039
0c9b0     09 35 82 F1 | 	sub	local08, arg01
0c9b4     1A 15 02 F6 | 	mov	arg02, local08
0c9b8     01 14 86 F1 | 	sub	arg02, #1
0c9bc     19 13 02 F6 | 	mov	arg01, local07
0c9c0     38 DB B1 FD | 	call	#__system__Right_S
0c9c4     FD 14 02 F6 | 	mov	arg02, result1
0c9c8     17 13 02 F6 | 	mov	arg01, local05
0c9cc     80 BA B1 FD | 	call	#__system___string_concat
0c9d0     18 FB 61 FC | 	wrlong	result1, local06
0c9d4                 | LR__1040
0c9d4     37 00 00 FF 
0c9d8     64 E4 05 F1 | 	add	objptr, ##28260
0c9dc     F2 30 02 FB | 	rdlong	local06, objptr
0c9e0     03 30 66 F0 | 	shl	local06, #3
0c9e4     02 00 00 FF 
0c9e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9ec     F2 30 02 F1 | 	add	local06, objptr
0c9f0     18 13 02 FB | 	rdlong	arg01, local06
0c9f4     00 14 06 F6 | 	mov	arg02, #0
0c9f8     35 00 00 FF 
0c9fc     2C E4 85 F1 | 	sub	objptr, ##27180
0ca00     E4 EE B1 FD | 	call	#__system____builtin_atoi
0ca04     FD 2C 02 FD | 	qmul	local04, result1
0ca08     4A 00 00 FF 
0ca0c     9C E4 05 F1 | 	add	objptr, ##38044
0ca10     F2 30 02 FB | 	rdlong	local06, objptr
0ca14     18 37 02 F6 | 	mov	local09, local06
0ca18     01 36 66 F0 | 	shl	local09, #1
0ca1c     18 37 02 F1 | 	add	local09, local06
0ca20     02 36 66 F0 | 	shl	local09, #2
0ca24     03 00 00 FF 
0ca28     00 E4 85 F1 | 	sub	objptr, ##1536
0ca2c     F2 36 02 F1 | 	add	local09, objptr
0ca30     03 00 00 FF 
0ca34     00 E4 05 F1 | 	add	objptr, ##1536
0ca38     18 26 62 FD | 	getqx	local01
0ca3c     1C 2A 06 F6 | 	mov	local03, #28
0ca40     13 31 02 F6 | 	mov	local06, local01
0ca44     14 33 02 F6 | 	mov	local07, local02
0ca48     1B 31 62 FC | 	wrlong	local06, local09
0ca4c     15 37 02 F6 | 	mov	local09, local03
0ca50     F2 30 02 FB | 	rdlong	local06, objptr
0ca54     18 2F 02 F6 | 	mov	local05, local06
0ca58     01 2E 66 F0 | 	shl	local05, #1
0ca5c     18 2F 02 F1 | 	add	local05, local06
0ca60     02 2E 66 F0 | 	shl	local05, #2
0ca64     03 00 00 FF 
0ca68     00 E4 85 F1 | 	sub	objptr, ##1536
0ca6c     F2 2E 02 F1 | 	add	local05, objptr
0ca70     04 2E 06 F1 | 	add	local05, #4
0ca74     17 33 62 FC | 	wrlong	local07, local05
0ca78     03 00 00 FF 
0ca7c     00 E4 05 F1 | 	add	objptr, ##1536
0ca80     F2 32 02 FB | 	rdlong	local07, objptr
0ca84     19 31 02 F6 | 	mov	local06, local07
0ca88     01 30 66 F0 | 	shl	local06, #1
0ca8c     19 31 02 F1 | 	add	local06, local07
0ca90     02 30 66 F0 | 	shl	local06, #2
0ca94     03 00 00 FF 
0ca98     00 E4 85 F1 | 	sub	objptr, ##1536
0ca9c     F2 30 02 F1 | 	add	local06, objptr
0caa0     08 30 06 F1 | 	add	local06, #8
0caa4     18 37 62 FC | 	wrlong	local09, local06
0caa8     03 00 00 FF 
0caac     00 E4 05 F1 | 	add	objptr, ##1536
0cab0     F2 30 02 FB | 	rdlong	local06, objptr
0cab4     01 30 06 F1 | 	add	local06, #1
0cab8     F2 30 62 FC | 	wrlong	local06, objptr
0cabc     13 00 00 FF 
0cac0     38 E4 85 F1 | 	sub	objptr, ##9784
0cac4     F2 30 02 FB | 	rdlong	local06, objptr
0cac8     01 30 06 F1 | 	add	local06, #1
0cacc     F2 30 62 FC | 	wrlong	local06, objptr
0cad0     37 00 00 FF 
0cad4     64 E4 85 F1 | 	sub	objptr, ##28260
0cad8     24 05 90 FD | 	jmp	#LR__1053
0cadc                 | LR__1041
0cadc                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0cadc     01 2C 0E F2 | 	cmp	local04, #1 wz
0cae0     48 00 90 5D |  if_ne	jmp	#LR__1042
0cae4     00 C0 1F FF 
0cae8     00 30 06 F6 | 	mov	local06, ##1065353216
0caec     37 00 00 FF 
0caf0     64 E4 05 F1 | 	add	objptr, ##28260
0caf4     F2 36 02 FB | 	rdlong	local09, objptr
0caf8     03 36 66 F0 | 	shl	local09, #3
0cafc     02 00 00 FF 
0cb00     38 E4 85 F1 | 	sub	objptr, ##1080
0cb04     F2 36 02 F1 | 	add	local09, objptr
0cb08     1B 13 02 FB | 	rdlong	arg01, local09
0cb0c     35 00 00 FF 
0cb10     2C E4 85 F1 | 	sub	objptr, ##27180
0cb14     68 EF B1 FD | 	call	#__system____builtin_atof
0cb18     FD 14 02 F6 | 	mov	arg02, result1
0cb1c     18 13 02 F6 | 	mov	arg01, local06
0cb20     4C E7 B1 FD | 	call	#__system___float_mul
0cb24     FD 26 02 F6 | 	mov	local01, result1
0cb28     1E 2A 06 F6 | 	mov	local03, #30
0cb2c                 | LR__1042
0cb2c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0cb2c     FF FF 7F FF 
0cb30     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cb34     48 00 90 5D |  if_ne	jmp	#LR__1043
0cb38     00 C0 5F FF 
0cb3c     00 30 06 F6 | 	mov	local06, ##-1082130432
0cb40     37 00 00 FF 
0cb44     64 E4 05 F1 | 	add	objptr, ##28260
0cb48     F2 36 02 FB | 	rdlong	local09, objptr
0cb4c     03 36 66 F0 | 	shl	local09, #3
0cb50     02 00 00 FF 
0cb54     38 E4 85 F1 | 	sub	objptr, ##1080
0cb58     F2 36 02 F1 | 	add	local09, objptr
0cb5c     1B 13 02 FB | 	rdlong	arg01, local09
0cb60     35 00 00 FF 
0cb64     2C E4 85 F1 | 	sub	objptr, ##27180
0cb68     14 EF B1 FD | 	call	#__system____builtin_atof
0cb6c     FD 14 02 F6 | 	mov	arg02, result1
0cb70     18 13 02 F6 | 	mov	arg01, local06
0cb74     F8 E6 B1 FD | 	call	#__system___float_mul
0cb78     FD 26 02 F6 | 	mov	local01, result1
0cb7c     1E 2A 06 F6 | 	mov	local03, #30
0cb80                 | LR__1043
0cb80     13 31 02 F6 | 	mov	local06, local01
0cb84     14 33 02 F6 | 	mov	local07, local02
0cb88     15 2F 02 F6 | 	mov	local05, local03
0cb8c     4A 00 00 FF 
0cb90     9C E4 05 F1 | 	add	objptr, ##38044
0cb94     F2 26 02 FB | 	rdlong	local01, objptr
0cb98     13 37 02 F6 | 	mov	local09, local01
0cb9c     01 36 66 F0 | 	shl	local09, #1
0cba0     13 37 02 F1 | 	add	local09, local01
0cba4     02 36 66 F0 | 	shl	local09, #2
0cba8     03 00 00 FF 
0cbac     00 E4 85 F1 | 	sub	objptr, ##1536
0cbb0     F2 36 02 F1 | 	add	local09, objptr
0cbb4     1B 31 62 FC | 	wrlong	local06, local09
0cbb8     03 00 00 FF 
0cbbc     00 E4 05 F1 | 	add	objptr, ##1536
0cbc0     F2 36 02 FB | 	rdlong	local09, objptr
0cbc4     1B 31 02 F6 | 	mov	local06, local09
0cbc8     01 30 66 F0 | 	shl	local06, #1
0cbcc     1B 31 02 F1 | 	add	local06, local09
0cbd0     02 30 66 F0 | 	shl	local06, #2
0cbd4     03 00 00 FF 
0cbd8     00 E4 85 F1 | 	sub	objptr, ##1536
0cbdc     F2 30 02 F1 | 	add	local06, objptr
0cbe0     04 30 06 F1 | 	add	local06, #4
0cbe4     18 33 62 FC | 	wrlong	local07, local06
0cbe8     03 00 00 FF 
0cbec     00 E4 05 F1 | 	add	objptr, ##1536
0cbf0     F2 36 02 FB | 	rdlong	local09, objptr
0cbf4     1B 33 02 F6 | 	mov	local07, local09
0cbf8     01 32 66 F0 | 	shl	local07, #1
0cbfc     1B 33 02 F1 | 	add	local07, local09
0cc00     02 32 66 F0 | 	shl	local07, #2
0cc04     03 00 00 FF 
0cc08     00 E4 85 F1 | 	sub	objptr, ##1536
0cc0c     F2 32 02 F1 | 	add	local07, objptr
0cc10     08 32 06 F1 | 	add	local07, #8
0cc14     19 2F 62 FC | 	wrlong	local05, local07
0cc18     03 00 00 FF 
0cc1c     00 E4 05 F1 | 	add	objptr, ##1536
0cc20     F2 30 02 FB | 	rdlong	local06, objptr
0cc24     01 30 06 F1 | 	add	local06, #1
0cc28     F2 30 62 FC | 	wrlong	local06, objptr
0cc2c     13 00 00 FF 
0cc30     38 E4 85 F1 | 	sub	objptr, ##9784
0cc34     F2 30 02 FB | 	rdlong	local06, objptr
0cc38     01 30 06 F1 | 	add	local06, #1
0cc3c     F2 30 62 FC | 	wrlong	local06, objptr
0cc40     37 00 00 FF 
0cc44     64 E4 85 F1 | 	sub	objptr, ##28260
0cc48     B4 03 90 FD | 	jmp	#LR__1053
0cc4c                 | LR__1044
0cc4c     37 00 00 FF 
0cc50     64 E4 05 F1 | 	add	objptr, ##28260
0cc54     F2 16 02 FB | 	rdlong	arg03, objptr
0cc58     03 16 66 F0 | 	shl	arg03, #3
0cc5c     02 00 00 FF 
0cc60     38 E4 85 F1 | 	sub	objptr, ##1080
0cc64     F2 16 02 F1 | 	add	arg03, objptr
0cc68     0B 13 02 FB | 	rdlong	arg01, arg03
0cc6c     35 00 00 FF 
0cc70     2C E4 85 F1 | 	sub	objptr, ##27180
0cc74     09 35 02 F6 | 	mov	local08, arg01
0cc78     97 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0cc7c                 | LR__1045
0cc7c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cc80     01 34 06 51 |  if_ne	add	local08, #1
0cc84     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0cc88                 | LR__1046
0cc88     09 35 82 F1 | 	sub	local08, arg01
0cc8c     1A FB 01 F6 | 	mov	result1, local08
0cc90     52 00 00 FF 
0cc94     48 E5 05 F1 | 	add	objptr, ##42312
0cc98     F2 FA 61 FC | 	wrlong	result1, objptr
0cc9c     58 E4 85 F1 | 	sub	objptr, #88
0cca0     F2 12 02 FB | 	rdlong	arg01, objptr
0cca4     FD 12 82 F1 | 	sub	arg01, result1
0cca8     04 12 86 F1 | 	sub	arg01, #4
0ccac     03 12 26 F5 | 	andn	arg01, #3
0ccb0     F2 12 62 FC | 	wrlong	arg01, objptr
0ccb4     58 E4 05 F1 | 	add	objptr, #88
0ccb8     F2 14 02 FB | 	rdlong	arg02, objptr
0ccbc     52 00 00 FF 
0ccc0     48 E5 85 F1 | 	sub	objptr, ##42312
0ccc4     74 7E B1 FD | 	call	#_pslpoke
0ccc8                 | '     pslpoke memtop,l
0ccc8                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ccc8     01 38 06 F6 | 	mov	local10, #1
0cccc     52 00 00 FF 
0ccd0     48 E5 05 F1 | 	add	objptr, ##42312
0ccd4     F2 3A 02 FB | 	rdlong	local11, objptr
0ccd8     52 00 00 FF 
0ccdc     48 E5 85 F1 | 	sub	objptr, ##42312
0cce0     01 3A 06 F1 | 	add	local11, #1
0cce4                 | LR__1047
0cce4     1D 39 52 F2 | 	cmps	local10, local11 wc
0cce8     5C 00 90 3D |  if_ae	jmp	#LR__1048
0ccec     52 00 00 FF 
0ccf0     F0 E4 05 F1 | 	add	objptr, ##42224
0ccf4     F2 32 02 FB | 	rdlong	local07, objptr
0ccf8     03 32 06 F1 | 	add	local07, #3
0ccfc     1C 33 02 F1 | 	add	local07, local10
0cd00     1B 00 00 FF 
0cd04     8C E4 85 F1 | 	sub	objptr, ##13964
0cd08     F2 36 02 FB | 	rdlong	local09, objptr
0cd0c     03 36 66 F0 | 	shl	local09, #3
0cd10     02 00 00 FF 
0cd14     38 E4 85 F1 | 	sub	objptr, ##1080
0cd18     F2 36 02 F1 | 	add	local09, objptr
0cd1c     1B 13 02 FB | 	rdlong	arg01, local09
0cd20     1C 15 02 F6 | 	mov	arg02, local10
0cd24     01 16 06 F6 | 	mov	arg03, #1
0cd28     35 00 00 FF 
0cd2c     2C E4 85 F1 | 	sub	objptr, ##27180
0cd30     58 D8 B1 FD | 	call	#__system__Mid_S
0cd34     FD 14 C2 FA | 	rdbyte	arg02, result1
0cd38     19 13 02 F6 | 	mov	arg01, local07
0cd3c     8C 7E B1 FD | 	call	#_pspoke
0cd40     01 38 06 F1 | 	add	local10, #1
0cd44     9C FF 9F FD | 	jmp	#LR__1047
0cd48                 | LR__1048
0cd48     52 00 00 FF 
0cd4c     F0 E4 05 F1 | 	add	objptr, ##42224
0cd50     F2 26 02 FB | 	rdlong	local01, objptr
0cd54     2B 2A 06 F6 | 	mov	local03, #43
0cd58     13 31 02 F6 | 	mov	local06, local01
0cd5c     14 33 02 F6 | 	mov	local07, local02
0cd60     15 3B 02 F6 | 	mov	local11, local03
0cd64     08 00 00 FF 
0cd68     54 E4 85 F1 | 	sub	objptr, ##4180
0cd6c     F2 38 02 FB | 	rdlong	local10, objptr
0cd70     1C 37 02 F6 | 	mov	local09, local10
0cd74     01 36 66 F0 | 	shl	local09, #1
0cd78     1C 37 02 F1 | 	add	local09, local10
0cd7c     02 36 66 F0 | 	shl	local09, #2
0cd80     03 00 00 FF 
0cd84     00 E4 85 F1 | 	sub	objptr, ##1536
0cd88     F2 36 02 F1 | 	add	local09, objptr
0cd8c     1B 31 62 FC | 	wrlong	local06, local09
0cd90     03 00 00 FF 
0cd94     00 E4 05 F1 | 	add	objptr, ##1536
0cd98     F2 38 02 FB | 	rdlong	local10, objptr
0cd9c     1C 37 02 F6 | 	mov	local09, local10
0cda0     01 36 66 F0 | 	shl	local09, #1
0cda4     1C 37 02 F1 | 	add	local09, local10
0cda8     02 36 66 F0 | 	shl	local09, #2
0cdac     03 00 00 FF 
0cdb0     00 E4 85 F1 | 	sub	objptr, ##1536
0cdb4     F2 36 02 F1 | 	add	local09, objptr
0cdb8     04 36 06 F1 | 	add	local09, #4
0cdbc     1B 33 62 FC | 	wrlong	local07, local09
0cdc0     03 00 00 FF 
0cdc4     00 E4 05 F1 | 	add	objptr, ##1536
0cdc8     F2 38 02 FB | 	rdlong	local10, objptr
0cdcc     1C 37 02 F6 | 	mov	local09, local10
0cdd0     01 36 66 F0 | 	shl	local09, #1
0cdd4     1C 37 02 F1 | 	add	local09, local10
0cdd8     02 36 66 F0 | 	shl	local09, #2
0cddc     03 00 00 FF 
0cde0     00 E4 85 F1 | 	sub	objptr, ##1536
0cde4     F2 36 02 F1 | 	add	local09, objptr
0cde8     08 36 06 F1 | 	add	local09, #8
0cdec     1B 3B 62 FC | 	wrlong	local11, local09
0cdf0     03 00 00 FF 
0cdf4     00 E4 05 F1 | 	add	objptr, ##1536
0cdf8     F2 30 02 FB | 	rdlong	local06, objptr
0cdfc     01 30 06 F1 | 	add	local06, #1
0ce00     F2 30 62 FC | 	wrlong	local06, objptr
0ce04     13 00 00 FF 
0ce08     38 E4 85 F1 | 	sub	objptr, ##9784
0ce0c     F2 30 02 FB | 	rdlong	local06, objptr
0ce10     01 30 06 F1 | 	add	local06, #1
0ce14     F2 30 62 FC | 	wrlong	local06, objptr
0ce18     37 00 00 FF 
0ce1c     64 E4 85 F1 | 	sub	objptr, ##28260
0ce20     DC 01 90 FD | 	jmp	#LR__1053
0ce24                 | LR__1049
0ce24     2C 2A 06 F6 | 	mov	local03, #44
0ce28     37 00 00 FF 
0ce2c     64 E4 05 F1 | 	add	objptr, ##28260
0ce30     F2 30 02 FB | 	rdlong	local06, objptr
0ce34     03 30 66 F0 | 	shl	local06, #3
0ce38     02 00 00 FF 
0ce3c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce40     F2 30 02 F1 | 	add	local06, objptr
0ce44     18 13 02 FB | 	rdlong	arg01, local06
0ce48     00 14 06 F6 | 	mov	arg02, #0
0ce4c     35 00 00 FF 
0ce50     2C E4 85 F1 | 	sub	objptr, ##27180
0ce54     90 EA B1 FD | 	call	#__system____builtin_atoi
0ce58     FD 26 02 F6 | 	mov	local01, result1
0ce5c     13 31 02 F6 | 	mov	local06, local01
0ce60     14 33 02 F6 | 	mov	local07, local02
0ce64     15 3B 02 F6 | 	mov	local11, local03
0ce68     4A 00 00 FF 
0ce6c     9C E4 05 F1 | 	add	objptr, ##38044
0ce70     F2 38 02 FB | 	rdlong	local10, objptr
0ce74     1C 37 02 F6 | 	mov	local09, local10
0ce78     01 36 66 F0 | 	shl	local09, #1
0ce7c     1C 37 02 F1 | 	add	local09, local10
0ce80     02 36 66 F0 | 	shl	local09, #2
0ce84     03 00 00 FF 
0ce88     00 E4 85 F1 | 	sub	objptr, ##1536
0ce8c     F2 36 02 F1 | 	add	local09, objptr
0ce90     1B 31 62 FC | 	wrlong	local06, local09
0ce94     03 00 00 FF 
0ce98     00 E4 05 F1 | 	add	objptr, ##1536
0ce9c     F2 38 02 FB | 	rdlong	local10, objptr
0cea0     1C 37 02 F6 | 	mov	local09, local10
0cea4     01 36 66 F0 | 	shl	local09, #1
0cea8     1C 37 02 F1 | 	add	local09, local10
0ceac     02 36 66 F0 | 	shl	local09, #2
0ceb0     03 00 00 FF 
0ceb4     00 E4 85 F1 | 	sub	objptr, ##1536
0ceb8     F2 36 02 F1 | 	add	local09, objptr
0cebc     04 36 06 F1 | 	add	local09, #4
0cec0     1B 33 62 FC | 	wrlong	local07, local09
0cec4     03 00 00 FF 
0cec8     00 E4 05 F1 | 	add	objptr, ##1536
0cecc     F2 38 02 FB | 	rdlong	local10, objptr
0ced0     1C 37 02 F6 | 	mov	local09, local10
0ced4     01 36 66 F0 | 	shl	local09, #1
0ced8     1C 37 02 F1 | 	add	local09, local10
0cedc     02 36 66 F0 | 	shl	local09, #2
0cee0     03 00 00 FF 
0cee4     00 E4 85 F1 | 	sub	objptr, ##1536
0cee8     F2 36 02 F1 | 	add	local09, objptr
0ceec     08 36 06 F1 | 	add	local09, #8
0cef0     1B 3B 62 FC | 	wrlong	local11, local09
0cef4     03 00 00 FF 
0cef8     00 E4 05 F1 | 	add	objptr, ##1536
0cefc     F2 30 02 FB | 	rdlong	local06, objptr
0cf00     01 30 06 F1 | 	add	local06, #1
0cf04     F2 30 62 FC | 	wrlong	local06, objptr
0cf08     13 00 00 FF 
0cf0c     38 E4 85 F1 | 	sub	objptr, ##9784
0cf10     F2 30 02 FB | 	rdlong	local06, objptr
0cf14     01 30 06 F1 | 	add	local06, #1
0cf18     F2 30 62 FC | 	wrlong	local06, objptr
0cf1c     37 00 00 FF 
0cf20     64 E4 85 F1 | 	sub	objptr, ##28260
0cf24     D8 00 90 FD | 	jmp	#LR__1053
0cf28                 | LR__1050
0cf28     16 13 02 F6 | 	mov	arg01, local04
0cf2c     24 04 B0 FD | 	call	#_getvar
0cf30     37 00 00 FF 
0cf34     64 E4 05 F1 | 	add	objptr, ##28260
0cf38     F2 30 02 FB | 	rdlong	local06, objptr
0cf3c     01 30 06 F1 | 	add	local06, #1
0cf40     F2 30 62 FC | 	wrlong	local06, objptr
0cf44     37 00 00 FF 
0cf48     64 E4 85 F1 | 	sub	objptr, ##28260
0cf4c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cf4c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf50     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cf54     A8 00 90 FD | 	jmp	#LR__1053
0cf58                 | LR__1051
0cf58     37 00 00 FF 
0cf5c     64 E4 05 F1 | 	add	objptr, ##28260
0cf60     F2 30 02 FB | 	rdlong	local06, objptr
0cf64     01 30 06 F1 | 	add	local06, #1
0cf68     F2 30 62 FC | 	wrlong	local06, objptr
0cf6c     37 00 00 FF 
0cf70     64 E4 85 F1 | 	sub	objptr, ##28260
0cf74     20 F1 BF FD | 	call	#_expr
0cf78                 | '     ct+=1
0cf78                 | '     err=expr() : if err>0 then return err 
0cf78     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf7c     84 00 90 3D |  if_ae	jmp	#LR__1054
0cf80                 | '     if lparts(ct).token=token_rpar then ct+=1
0cf80     37 00 00 FF 
0cf84     64 E4 05 F1 | 	add	objptr, ##28260
0cf88     F2 3A 02 FB | 	rdlong	local11, objptr
0cf8c     03 3A 66 F0 | 	shl	local11, #3
0cf90     02 00 00 FF 
0cf94     38 E4 85 F1 | 	sub	objptr, ##1080
0cf98     F2 3A 02 F1 | 	add	local11, objptr
0cf9c     04 3A 06 F1 | 	add	local11, #4
0cfa0     1D 3B 02 FB | 	rdlong	local11, local11
0cfa4     14 3A 0E F2 | 	cmp	local11, #20 wz
0cfa8     35 00 00 FF 
0cfac     2C E4 85 F1 | 	sub	objptr, ##27180
0cfb0     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cfb4     37 00 00 FF 
0cfb8     64 E4 05 F1 | 	add	objptr, ##28260
0cfbc     F2 30 02 FB | 	rdlong	local06, objptr
0cfc0     01 30 06 F1 | 	add	local06, #1
0cfc4     F2 30 62 FC | 	wrlong	local06, objptr
0cfc8     37 00 00 FF 
0cfcc     64 E4 85 F1 | 	sub	objptr, ##28260
0cfd0     2C 00 90 FD | 	jmp	#LR__1053
0cfd4                 | LR__1052
0cfd4     16 13 02 F6 | 	mov	arg01, local04
0cfd8     34 00 B0 FD | 	call	#_getfun
0cfdc     37 00 00 FF 
0cfe0     64 E4 05 F1 | 	add	objptr, ##28260
0cfe4     F2 30 02 FB | 	rdlong	local06, objptr
0cfe8     01 30 06 F1 | 	add	local06, #1
0cfec     F2 30 62 FC | 	wrlong	local06, objptr
0cff0     37 00 00 FF 
0cff4     64 E4 85 F1 | 	sub	objptr, ##28260
0cff8                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cff8     01 FA 55 F2 | 	cmps	result1, #1 wc
0cffc     04 00 90 3D |  if_ae	jmp	#LR__1054
0d000                 | LR__1053
0d000                 | ' return 0  
0d000     00 FA 05 F6 | 	mov	result1, #0
0d004                 | LR__1054
0d004     A7 F0 03 F6 | 	mov	ptra, fp
0d008     B2 00 A0 FD | 	call	#popregs_
0d00c                 | _getvalue_ret
0d00c     2D 00 64 FD | 	ret
0d010                 | 
0d010                 | ' 
0d010                 | ' ' Get a function result 
0d010                 | ' 
0d010                 | ' function getfun(m as integer) as ulong
0d010                 | _getfun
0d010     0F 4A 05 F6 | 	mov	COUNT_, #15
0d014     A8 00 A0 FD | 	call	#pushregs_
0d018                 | _getfun_enter
0d018     09 2D 02 F6 | 	mov	local04, arg01
0d01c     37 00 00 FF 
0d020     64 E4 05 F1 | 	add	objptr, ##28260
0d024     F2 2E 02 FB | 	rdlong	local05, objptr
0d028     17 31 02 F6 | 	mov	local06, local05
0d02c     00 32 06 F6 | 	mov	local07, #0
0d030                 | ' oldct=ct
0d030                 | ' numpar=0
0d030                 | ' if lparts(ct+1).token=token_lpar then
0d030     01 2E 06 F1 | 	add	local05, #1
0d034     03 2E 66 F0 | 	shl	local05, #3
0d038     02 00 00 FF 
0d03c     38 E4 85 F1 | 	sub	objptr, ##1080
0d040     F2 2E 02 F1 | 	add	local05, objptr
0d044     04 2E 06 F1 | 	add	local05, #4
0d048     17 2F 02 FB | 	rdlong	local05, local05
0d04c     15 2E 0E F2 | 	cmp	local05, #21 wz
0d050     35 00 00 FF 
0d054     2C E4 85 F1 | 	sub	objptr, ##27180
0d058     54 01 90 5D |  if_ne	jmp	#LR__1064
0d05c     37 00 00 FF 
0d060     64 E4 05 F1 | 	add	objptr, ##28260
0d064     F2 34 02 FB | 	rdlong	local08, objptr
0d068     01 34 06 F1 | 	add	local08, #1
0d06c     F2 34 62 FC | 	wrlong	local08, objptr
0d070     37 00 00 FF 
0d074     64 E4 85 F1 | 	sub	objptr, ##28260
0d078                 | '   ct+=1 											' omit this lpar, this is for expr list
0d078                 | '   do
0d078                 | LR__1060
0d078     37 00 00 FF 
0d07c     64 E4 05 F1 | 	add	objptr, ##28260
0d080     F2 2E 02 FB | 	rdlong	local05, objptr
0d084     01 2E 06 F1 | 	add	local05, #1
0d088     F2 2E 62 FC | 	wrlong	local05, objptr
0d08c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d08c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d08c     03 2E 66 F0 | 	shl	local05, #3
0d090     02 00 00 FF 
0d094     38 E4 85 F1 | 	sub	objptr, ##1080
0d098     F2 2E 02 F1 | 	add	local05, objptr
0d09c     04 2E 06 F1 | 	add	local05, #4
0d0a0     17 35 02 FB | 	rdlong	local08, local05
0d0a4     15 34 0E F2 | 	cmp	local08, #21 wz
0d0a8     35 00 00 FF 
0d0ac     2C E4 85 F1 | 	sub	objptr, ##27180
0d0b0     44 00 90 5D |  if_ne	jmp	#LR__1061
0d0b4     37 00 00 FF 
0d0b8     64 E4 05 F1 | 	add	objptr, ##28260
0d0bc     F2 34 02 FB | 	rdlong	local08, objptr
0d0c0     01 34 06 F1 | 	add	local08, #1
0d0c4     F2 34 62 FC | 	wrlong	local08, objptr
0d0c8     37 00 00 FF 
0d0cc     64 E4 85 F1 | 	sub	objptr, ##28260
0d0d0     C4 EF BF FD | 	call	#_expr
0d0d4     FD 36 02 F6 | 	mov	local09, result1
0d0d8     37 00 00 FF 
0d0dc     64 E4 05 F1 | 	add	objptr, ##28260
0d0e0     F2 34 02 FB | 	rdlong	local08, objptr
0d0e4     01 34 06 F1 | 	add	local08, #1
0d0e8     F2 34 62 FC | 	wrlong	local08, objptr
0d0ec     37 00 00 FF 
0d0f0     64 E4 85 F1 | 	sub	objptr, ##28260
0d0f4     08 00 90 FD | 	jmp	#LR__1062
0d0f8                 | LR__1061
0d0f8     9C EF BF FD | 	call	#_expr
0d0fc     FD 36 02 F6 | 	mov	local09, result1
0d100                 | LR__1062
0d100                 | '     if err>0 then return err
0d100     01 36 16 F2 | 	cmp	local09, #1 wc
0d104     1B FB 01 36 |  if_ae	mov	result1, local09
0d108     3C 02 90 3D |  if_ae	jmp	#LR__1066
0d10c     01 32 06 F1 | 	add	local07, #1
0d110     37 00 00 FF 
0d114     64 E4 05 F1 | 	add	objptr, ##28260
0d118     F2 2E 02 FB | 	rdlong	local05, objptr
0d11c     03 2E 66 F0 | 	shl	local05, #3
0d120     02 00 00 FF 
0d124     38 E4 85 F1 | 	sub	objptr, ##1080
0d128     F2 2E 02 F1 | 	add	local05, objptr
0d12c     04 2E 06 F1 | 	add	local05, #4
0d130     17 37 02 FB | 	rdlong	local09, local05
0d134     14 36 0E F2 | 	cmp	local09, #20 wz
0d138     35 00 00 FF 
0d13c     2C E4 85 F1 | 	sub	objptr, ##27180
0d140     34 00 90 AD |  if_e	jmp	#LR__1063
0d144     37 00 00 FF 
0d148     64 E4 05 F1 | 	add	objptr, ##28260
0d14c     F2 36 02 FB | 	rdlong	local09, objptr
0d150     03 36 66 F0 | 	shl	local09, #3
0d154     02 00 00 FF 
0d158     38 E4 85 F1 | 	sub	objptr, ##1080
0d15c     F2 36 02 F1 | 	add	local09, objptr
0d160     04 36 06 F1 | 	add	local09, #4
0d164     1B 37 02 FB | 	rdlong	local09, local09
0d168     FE 37 0E F2 | 	cmp	local09, #510 wz
0d16c     35 00 00 FF 
0d170     2C E4 85 F1 | 	sub	objptr, ##27180
0d174     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0d178                 | LR__1063
0d178                 | '   if lparts(ct).token=token_end then return 14
0d178     37 00 00 FF 
0d17c     64 E4 05 F1 | 	add	objptr, ##28260
0d180     F2 2E 02 FB | 	rdlong	local05, objptr
0d184     03 2E 66 F0 | 	shl	local05, #3
0d188     02 00 00 FF 
0d18c     38 E4 85 F1 | 	sub	objptr, ##1080
0d190     F2 2E 02 F1 | 	add	local05, objptr
0d194     04 2E 06 F1 | 	add	local05, #4
0d198     17 37 02 FB | 	rdlong	local09, local05
0d19c     FE 37 0E F2 | 	cmp	local09, #510 wz
0d1a0     35 00 00 FF 
0d1a4     2C E4 85 F1 | 	sub	objptr, ##27180
0d1a8     0E FA 05 A6 |  if_e	mov	result1, #14
0d1ac     98 01 90 AD |  if_e	jmp	#LR__1066
0d1b0                 | LR__1064
0d1b0     19 27 02 F6 | 	mov	local01, local07
0d1b4     03 30 66 F0 | 	shl	local06, #3
0d1b8     35 00 00 FF 
0d1bc     2C E4 05 F1 | 	add	objptr, ##27180
0d1c0     F2 30 02 F1 | 	add	local06, objptr
0d1c4     04 30 06 F1 | 	add	local06, #4
0d1c8     18 2B 02 FB | 	rdlong	local03, local06
0d1cc     13 35 02 F6 | 	mov	local08, local01
0d1d0     14 39 02 F6 | 	mov	local10, local02
0d1d4     15 3B 02 F6 | 	mov	local11, local03
0d1d8     15 00 00 FF 
0d1dc     70 E4 05 F1 | 	add	objptr, ##10864
0d1e0     F2 3C 02 FB | 	rdlong	local12, objptr
0d1e4     1E 3F 02 F6 | 	mov	local13, local12
0d1e8     01 3E 66 F0 | 	shl	local13, #1
0d1ec     1E 3F 02 F1 | 	add	local13, local12
0d1f0     02 3E 66 F0 | 	shl	local13, #2
0d1f4     03 00 00 FF 
0d1f8     00 E4 85 F1 | 	sub	objptr, ##1536
0d1fc     F2 3E 02 F1 | 	add	local13, objptr
0d200     1F 35 62 FC | 	wrlong	local08, local13
0d204     03 00 00 FF 
0d208     00 E4 05 F1 | 	add	objptr, ##1536
0d20c     F2 34 02 FB | 	rdlong	local08, objptr
0d210     1A 41 02 F6 | 	mov	local14, local08
0d214     01 40 66 F0 | 	shl	local14, #1
0d218     1A 41 02 F1 | 	add	local14, local08
0d21c     02 40 66 F0 | 	shl	local14, #2
0d220     03 00 00 FF 
0d224     00 E4 85 F1 | 	sub	objptr, ##1536
0d228     F2 40 02 F1 | 	add	local14, objptr
0d22c     04 40 06 F1 | 	add	local14, #4
0d230     20 39 62 FC | 	wrlong	local10, local14
0d234     03 00 00 FF 
0d238     00 E4 05 F1 | 	add	objptr, ##1536
0d23c     F2 34 02 FB | 	rdlong	local08, objptr
0d240     1A 43 02 F6 | 	mov	local15, local08
0d244     01 42 66 F0 | 	shl	local15, #1
0d248     1A 43 02 F1 | 	add	local15, local08
0d24c     02 42 66 F0 | 	shl	local15, #2
0d250     03 00 00 FF 
0d254     00 E4 85 F1 | 	sub	objptr, ##1536
0d258     F2 42 02 F1 | 	add	local15, objptr
0d25c     08 42 06 F1 | 	add	local15, #8
0d260     21 3B 62 FC | 	wrlong	local11, local15
0d264     03 00 00 FF 
0d268     00 E4 05 F1 | 	add	objptr, ##1536
0d26c     F2 34 02 FB | 	rdlong	local08, objptr
0d270     01 34 06 F1 | 	add	local08, #1
0d274     F2 34 62 FC | 	wrlong	local08, objptr
0d278     4A 00 00 FF 
0d27c     9C E4 85 F1 | 	sub	objptr, ##38044
0d280                 | ' t2.result.uresult=numpar
0d280                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d280                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d280                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d280     FF FF 7F FF 
0d284     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d288     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d28c     15 2A 06 F6 | 	mov	local03, #21
0d290     13 35 02 F6 | 	mov	local08, local01
0d294     14 39 02 F6 | 	mov	local10, local02
0d298     15 3B 02 F6 | 	mov	local11, local03
0d29c     4A 00 00 FF 
0d2a0     9C E4 05 F1 | 	add	objptr, ##38044
0d2a4     F2 3C 02 FB | 	rdlong	local12, objptr
0d2a8     1E 3F 02 F6 | 	mov	local13, local12
0d2ac     01 3E 66 F0 | 	shl	local13, #1
0d2b0     1E 3F 02 F1 | 	add	local13, local12
0d2b4     02 3E 66 F0 | 	shl	local13, #2
0d2b8     03 00 00 FF 
0d2bc     00 E4 85 F1 | 	sub	objptr, ##1536
0d2c0     F2 3E 02 F1 | 	add	local13, objptr
0d2c4     1F 35 62 FC | 	wrlong	local08, local13
0d2c8     03 00 00 FF 
0d2cc     00 E4 05 F1 | 	add	objptr, ##1536
0d2d0     F2 42 02 FB | 	rdlong	local15, objptr
0d2d4     21 41 02 F6 | 	mov	local14, local15
0d2d8     01 40 66 F0 | 	shl	local14, #1
0d2dc     21 41 02 F1 | 	add	local14, local15
0d2e0     02 40 66 F0 | 	shl	local14, #2
0d2e4     03 00 00 FF 
0d2e8     00 E4 85 F1 | 	sub	objptr, ##1536
0d2ec     F2 40 02 F1 | 	add	local14, objptr
0d2f0     04 40 06 F1 | 	add	local14, #4
0d2f4     20 39 62 FC | 	wrlong	local10, local14
0d2f8     03 00 00 FF 
0d2fc     00 E4 05 F1 | 	add	objptr, ##1536
0d300     F2 40 02 FB | 	rdlong	local14, objptr
0d304     20 43 02 F6 | 	mov	local15, local14
0d308     01 42 66 F0 | 	shl	local15, #1
0d30c     20 43 02 F1 | 	add	local15, local14
0d310     02 42 66 F0 | 	shl	local15, #2
0d314     03 00 00 FF 
0d318     00 E4 85 F1 | 	sub	objptr, ##1536
0d31c     F2 42 02 F1 | 	add	local15, objptr
0d320     08 42 06 F1 | 	add	local15, #8
0d324     21 3B 62 FC | 	wrlong	local11, local15
0d328     03 00 00 FF 
0d32c     00 E4 05 F1 | 	add	objptr, ##1536
0d330     F2 34 02 FB | 	rdlong	local08, objptr
0d334     01 34 06 F1 | 	add	local08, #1
0d338     F2 34 62 FC | 	wrlong	local08, objptr
0d33c     4A 00 00 FF 
0d340     9C E4 85 F1 | 	sub	objptr, ##38044
0d344                 | LR__1065
0d344                 | ' return 0
0d344     00 FA 05 F6 | 	mov	result1, #0
0d348                 | LR__1066
0d348     A7 F0 03 F6 | 	mov	ptra, fp
0d34c     B2 00 A0 FD | 	call	#popregs_
0d350                 | _getfun_ret
0d350     2D 00 64 FD | 	ret
0d354                 | 
0d354                 | '   
0d354                 | '   
0d354                 | ' function getvar(m as integer) as ulong
0d354                 | _getvar
0d354     11 4A 05 F6 | 	mov	COUNT_, #17
0d358     A8 00 A0 FD | 	call	#pushregs_
0d35c                 | _getvar_enter
0d35c     09 2D 02 F6 | 	mov	local04, arg01
0d360     37 00 00 FF 
0d364     64 E4 05 F1 | 	add	objptr, ##28260
0d368     F2 2E 02 FB | 	rdlong	local05, objptr
0d36c     03 2E 66 F0 | 	shl	local05, #3
0d370     02 00 00 FF 
0d374     38 E4 85 F1 | 	sub	objptr, ##1080
0d378     F2 2E 02 F1 | 	add	local05, objptr
0d37c     17 31 02 FB | 	rdlong	local06, local05
0d380     01 32 66 F6 | 	neg	local07, #1
0d384                 | ' 
0d384                 | ' varname$=lparts(ct).part$
0d384                 | ' j=-1
0d384                 | ' 
0d384                 | ' for i=0 to varnum-1
0d384     00 34 06 F6 | 	mov	local08, #0
0d388     04 E4 85 F1 | 	sub	objptr, #4
0d38c     F2 36 02 FB | 	rdlong	local09, objptr
0d390     35 00 00 FF 
0d394     28 E4 85 F1 | 	sub	objptr, ##27176
0d398                 | LR__1070
0d398     1B 35 52 F2 | 	cmps	local08, local09 wc
0d39c     38 00 90 3D |  if_ae	jmp	#LR__1071
0d3a0                 | '   if variables(i).name=varname$ then j=i : exit
0d3a0     1A 2F 02 F6 | 	mov	local05, local08
0d3a4     04 2E 66 F0 | 	shl	local05, #4
0d3a8     15 00 00 FF 
0d3ac     18 E4 05 F1 | 	add	objptr, ##10776
0d3b0     F2 2E 02 F1 | 	add	local05, objptr
0d3b4     17 13 02 FB | 	rdlong	arg01, local05
0d3b8     18 15 02 F6 | 	mov	arg02, local06
0d3bc     15 00 00 FF 
0d3c0     18 E4 85 F1 | 	sub	objptr, ##10776
0d3c4     54 B0 B1 FD | 	call	#__system___string_cmp
0d3c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d3cc     1A 33 02 A6 |  if_e	mov	local07, local08
0d3d0     01 34 06 51 |  if_ne	add	local08, #1
0d3d4     C0 FF 9F 5D |  if_ne	jmp	#LR__1070
0d3d8                 | LR__1071
0d3d8                 | ' if  j=-1 andalso varnum<maxvars then   
0d3d8     FF FF 7F FF 
0d3dc     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d3e0     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d3e4     35 00 00 FF 
0d3e8     28 E4 05 F1 | 	add	objptr, ##27176
0d3ec     F2 36 02 FB | 	rdlong	local09, objptr
0d3f0     35 00 00 FF 
0d3f4     28 E4 85 F1 | 	sub	objptr, ##27176
0d3f8     02 00 00 FF 
0d3fc     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d400     88 00 90 3D |  if_ae	jmp	#LR__1072
0d404     35 00 00 FF 
0d408     28 E4 05 F1 | 	add	objptr, ##27176
0d40c     F2 2E 02 FB | 	rdlong	local05, objptr
0d410     04 2E 66 F0 | 	shl	local05, #4
0d414     20 00 00 FF 
0d418     10 E4 85 F1 | 	sub	objptr, ##16400
0d41c     F2 2E 02 F1 | 	add	local05, objptr
0d420     17 31 62 FC | 	wrlong	local06, local05
0d424     20 00 00 FF 
0d428     10 E4 05 F1 | 	add	objptr, ##16400
0d42c     F2 2E 02 FB | 	rdlong	local05, objptr
0d430     04 2E 66 F0 | 	shl	local05, #4
0d434     20 00 00 FF 
0d438     10 E4 85 F1 | 	sub	objptr, ##16400
0d43c     F2 2E 02 F1 | 	add	local05, objptr
0d440     04 2E 06 F1 | 	add	local05, #4
0d444     17 01 68 FC | 	wrlong	#0, local05
0d448     20 00 00 FF 
0d44c     10 E4 05 F1 | 	add	objptr, ##16400
0d450     F2 2E 02 FB | 	rdlong	local05, objptr
0d454     04 2E 66 F0 | 	shl	local05, #4
0d458     20 00 00 FF 
0d45c     10 E4 85 F1 | 	sub	objptr, ##16400
0d460     F2 2E 02 F1 | 	add	local05, objptr
0d464     0C 2E 06 F1 | 	add	local05, #12
0d468     17 39 68 FC | 	wrlong	#28, local05
0d46c     20 00 00 FF 
0d470     10 E4 05 F1 | 	add	objptr, ##16400
0d474     F2 36 02 FB | 	rdlong	local09, objptr
0d478     1B 33 02 F6 | 	mov	local07, local09
0d47c     01 36 06 F1 | 	add	local09, #1
0d480     F2 36 62 FC | 	wrlong	local09, objptr
0d484     35 00 00 FF 
0d488     28 E4 85 F1 | 	sub	objptr, ##27176
0d48c                 | LR__1072
0d48c     00 36 06 F6 | 	mov	local09, #0
0d490                 | ' numpar=0
0d490                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d490     37 00 00 FF 
0d494     64 E4 05 F1 | 	add	objptr, ##28260
0d498     F2 2E 02 FB | 	rdlong	local05, objptr
0d49c     01 2E 06 F1 | 	add	local05, #1
0d4a0     03 2E 66 F0 | 	shl	local05, #3
0d4a4     02 00 00 FF 
0d4a8     38 E4 85 F1 | 	sub	objptr, ##1080
0d4ac     F2 2E 02 F1 | 	add	local05, objptr
0d4b0     04 2E 06 F1 | 	add	local05, #4
0d4b4     17 35 02 FB | 	rdlong	local08, local05
0d4b8     15 34 0E F2 | 	cmp	local08, #21 wz
0d4bc     35 00 00 FF 
0d4c0     2C E4 85 F1 | 	sub	objptr, ##27180
0d4c4     54 01 90 5D |  if_ne	jmp	#LR__1077
0d4c8     37 00 00 FF 
0d4cc     64 E4 05 F1 | 	add	objptr, ##28260
0d4d0     F2 38 02 FB | 	rdlong	local10, objptr
0d4d4     01 38 06 F1 | 	add	local10, #1
0d4d8     F2 38 62 FC | 	wrlong	local10, objptr
0d4dc     37 00 00 FF 
0d4e0     64 E4 85 F1 | 	sub	objptr, ##28260
0d4e4                 | '   ct+=1 											' omit this lpar, this is for expr list
0d4e4                 | '   do
0d4e4                 | LR__1073
0d4e4     37 00 00 FF 
0d4e8     64 E4 05 F1 | 	add	objptr, ##28260
0d4ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d4f0     01 2E 06 F1 | 	add	local05, #1
0d4f4     F2 2E 62 FC | 	wrlong	local05, objptr
0d4f8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d4f8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d4f8     03 2E 66 F0 | 	shl	local05, #3
0d4fc     02 00 00 FF 
0d500     38 E4 85 F1 | 	sub	objptr, ##1080
0d504     F2 2E 02 F1 | 	add	local05, objptr
0d508     04 2E 06 F1 | 	add	local05, #4
0d50c     17 39 02 FB | 	rdlong	local10, local05
0d510     15 38 0E F2 | 	cmp	local10, #21 wz
0d514     35 00 00 FF 
0d518     2C E4 85 F1 | 	sub	objptr, ##27180
0d51c     44 00 90 5D |  if_ne	jmp	#LR__1074
0d520     37 00 00 FF 
0d524     64 E4 05 F1 | 	add	objptr, ##28260
0d528     F2 38 02 FB | 	rdlong	local10, objptr
0d52c     01 38 06 F1 | 	add	local10, #1
0d530     F2 38 62 FC | 	wrlong	local10, objptr
0d534     37 00 00 FF 
0d538     64 E4 85 F1 | 	sub	objptr, ##28260
0d53c     58 EB BF FD | 	call	#_expr
0d540     FD 3A 02 F6 | 	mov	local11, result1
0d544     37 00 00 FF 
0d548     64 E4 05 F1 | 	add	objptr, ##28260
0d54c     F2 38 02 FB | 	rdlong	local10, objptr
0d550     01 38 06 F1 | 	add	local10, #1
0d554     F2 38 62 FC | 	wrlong	local10, objptr
0d558     37 00 00 FF 
0d55c     64 E4 85 F1 | 	sub	objptr, ##28260
0d560     08 00 90 FD | 	jmp	#LR__1075
0d564                 | LR__1074
0d564     30 EB BF FD | 	call	#_expr
0d568     FD 3A 02 F6 | 	mov	local11, result1
0d56c                 | LR__1075
0d56c                 | '     if err>0 then return err
0d56c     01 3A 56 F2 | 	cmps	local11, #1 wc
0d570     1D FB 01 36 |  if_ae	mov	result1, local11
0d574     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d578     01 36 06 F1 | 	add	local09, #1
0d57c     37 00 00 FF 
0d580     64 E4 05 F1 | 	add	objptr, ##28260
0d584     F2 2E 02 FB | 	rdlong	local05, objptr
0d588     03 2E 66 F0 | 	shl	local05, #3
0d58c     02 00 00 FF 
0d590     38 E4 85 F1 | 	sub	objptr, ##1080
0d594     F2 2E 02 F1 | 	add	local05, objptr
0d598     04 2E 06 F1 | 	add	local05, #4
0d59c     17 3B 02 FB | 	rdlong	local11, local05
0d5a0     14 3A 0E F2 | 	cmp	local11, #20 wz
0d5a4     35 00 00 FF 
0d5a8     2C E4 85 F1 | 	sub	objptr, ##27180
0d5ac     34 00 90 AD |  if_e	jmp	#LR__1076
0d5b0     37 00 00 FF 
0d5b4     64 E4 05 F1 | 	add	objptr, ##28260
0d5b8     F2 3A 02 FB | 	rdlong	local11, objptr
0d5bc     03 3A 66 F0 | 	shl	local11, #3
0d5c0     02 00 00 FF 
0d5c4     38 E4 85 F1 | 	sub	objptr, ##1080
0d5c8     F2 3A 02 F1 | 	add	local11, objptr
0d5cc     04 3A 06 F1 | 	add	local11, #4
0d5d0     1D 3B 02 FB | 	rdlong	local11, local11
0d5d4     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d5d8     35 00 00 FF 
0d5dc     2C E4 85 F1 | 	sub	objptr, ##27180
0d5e0     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d5e4                 | LR__1076
0d5e4                 | '     if lparts(ct).token=token_end then return 14
0d5e4     37 00 00 FF 
0d5e8     64 E4 05 F1 | 	add	objptr, ##28260
0d5ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d5f0     03 2E 66 F0 | 	shl	local05, #3
0d5f4     02 00 00 FF 
0d5f8     38 E4 85 F1 | 	sub	objptr, ##1080
0d5fc     F2 2E 02 F1 | 	add	local05, objptr
0d600     04 2E 06 F1 | 	add	local05, #4
0d604     17 3B 02 FB | 	rdlong	local11, local05
0d608     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d60c     35 00 00 FF 
0d610     2C E4 85 F1 | 	sub	objptr, ##27180
0d614     0E FA 05 A6 |  if_e	mov	result1, #14
0d618     88 01 90 AD |  if_e	jmp	#LR__1079
0d61c                 | LR__1077
0d61c     1B 29 02 F6 | 	mov	local02, local09
0d620     11 2A 06 F6 | 	mov	local03, #17
0d624     19 27 02 F6 | 	mov	local01, local07
0d628     13 39 02 F6 | 	mov	local10, local01
0d62c     14 3D 02 F6 | 	mov	local12, local02
0d630     15 3F 02 F6 | 	mov	local13, local03
0d634     4A 00 00 FF 
0d638     9C E4 05 F1 | 	add	objptr, ##38044
0d63c     F2 40 02 FB | 	rdlong	local14, objptr
0d640     20 43 02 F6 | 	mov	local15, local14
0d644     01 42 66 F0 | 	shl	local15, #1
0d648     20 43 02 F1 | 	add	local15, local14
0d64c     02 42 66 F0 | 	shl	local15, #2
0d650     03 00 00 FF 
0d654     00 E4 85 F1 | 	sub	objptr, ##1536
0d658     F2 42 02 F1 | 	add	local15, objptr
0d65c     21 39 62 FC | 	wrlong	local10, local15
0d660     03 00 00 FF 
0d664     00 E4 05 F1 | 	add	objptr, ##1536
0d668     F2 38 02 FB | 	rdlong	local10, objptr
0d66c     1C 45 02 F6 | 	mov	local16, local10
0d670     01 44 66 F0 | 	shl	local16, #1
0d674     1C 45 02 F1 | 	add	local16, local10
0d678     02 44 66 F0 | 	shl	local16, #2
0d67c     03 00 00 FF 
0d680     00 E4 85 F1 | 	sub	objptr, ##1536
0d684     F2 44 02 F1 | 	add	local16, objptr
0d688     04 44 06 F1 | 	add	local16, #4
0d68c     22 3D 62 FC | 	wrlong	local12, local16
0d690     03 00 00 FF 
0d694     00 E4 05 F1 | 	add	objptr, ##1536
0d698     F2 38 02 FB | 	rdlong	local10, objptr
0d69c     1C 47 02 F6 | 	mov	local17, local10
0d6a0     01 46 66 F0 | 	shl	local17, #1
0d6a4     1C 47 02 F1 | 	add	local17, local10
0d6a8     02 46 66 F0 | 	shl	local17, #2
0d6ac     03 00 00 FF 
0d6b0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6b4     F2 46 02 F1 | 	add	local17, objptr
0d6b8     08 46 06 F1 | 	add	local17, #8
0d6bc     23 3F 62 FC | 	wrlong	local13, local17
0d6c0     03 00 00 FF 
0d6c4     00 E4 05 F1 | 	add	objptr, ##1536
0d6c8     F2 38 02 FB | 	rdlong	local10, objptr
0d6cc     01 38 06 F1 | 	add	local10, #1
0d6d0     F2 38 62 FC | 	wrlong	local10, objptr
0d6d4     4A 00 00 FF 
0d6d8     9C E4 85 F1 | 	sub	objptr, ##38044
0d6dc                 | ' t2.result.twowords(1)=numpar
0d6dc                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d6dc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d6dc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d6dc     FF FF 7F FF 
0d6e0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d6e4     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d6e8     15 2A 06 F6 | 	mov	local03, #21
0d6ec     13 39 02 F6 | 	mov	local10, local01
0d6f0     14 3D 02 F6 | 	mov	local12, local02
0d6f4     15 3F 02 F6 | 	mov	local13, local03
0d6f8     4A 00 00 FF 
0d6fc     9C E4 05 F1 | 	add	objptr, ##38044
0d700     F2 40 02 FB | 	rdlong	local14, objptr
0d704     20 43 02 F6 | 	mov	local15, local14
0d708     01 42 66 F0 | 	shl	local15, #1
0d70c     20 43 02 F1 | 	add	local15, local14
0d710     02 42 66 F0 | 	shl	local15, #2
0d714     03 00 00 FF 
0d718     00 E4 85 F1 | 	sub	objptr, ##1536
0d71c     F2 42 02 F1 | 	add	local15, objptr
0d720     21 39 62 FC | 	wrlong	local10, local15
0d724     03 00 00 FF 
0d728     00 E4 05 F1 | 	add	objptr, ##1536
0d72c     F2 46 02 FB | 	rdlong	local17, objptr
0d730     23 45 02 F6 | 	mov	local16, local17
0d734     01 44 66 F0 | 	shl	local16, #1
0d738     23 45 02 F1 | 	add	local16, local17
0d73c     02 44 66 F0 | 	shl	local16, #2
0d740     03 00 00 FF 
0d744     00 E4 85 F1 | 	sub	objptr, ##1536
0d748     F2 44 02 F1 | 	add	local16, objptr
0d74c     04 44 06 F1 | 	add	local16, #4
0d750     22 3D 62 FC | 	wrlong	local12, local16
0d754     03 00 00 FF 
0d758     00 E4 05 F1 | 	add	objptr, ##1536
0d75c     F2 44 02 FB | 	rdlong	local16, objptr
0d760     22 47 02 F6 | 	mov	local17, local16
0d764     01 46 66 F0 | 	shl	local17, #1
0d768     22 47 02 F1 | 	add	local17, local16
0d76c     02 46 66 F0 | 	shl	local17, #2
0d770     03 00 00 FF 
0d774     00 E4 85 F1 | 	sub	objptr, ##1536
0d778     F2 46 02 F1 | 	add	local17, objptr
0d77c     08 46 06 F1 | 	add	local17, #8
0d780     23 3F 62 FC | 	wrlong	local13, local17
0d784     03 00 00 FF 
0d788     00 E4 05 F1 | 	add	objptr, ##1536
0d78c     F2 38 02 FB | 	rdlong	local10, objptr
0d790     01 38 06 F1 | 	add	local10, #1
0d794     F2 38 62 FC | 	wrlong	local10, objptr
0d798     4A 00 00 FF 
0d79c     9C E4 85 F1 | 	sub	objptr, ##38044
0d7a0                 | LR__1078
0d7a0                 | ' return 0
0d7a0     00 FA 05 F6 | 	mov	result1, #0
0d7a4                 | LR__1079
0d7a4     A7 F0 03 F6 | 	mov	ptra, fp
0d7a8     B2 00 A0 FD | 	call	#popregs_
0d7ac                 | _getvar_ret
0d7ac     2D 00 64 FD | 	ret
0d7b0                 | 
0d7b0                 | ' 
0d7b0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d7b0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d7b0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d7b0                 | ' 
0d7b0                 | ' 
0d7b0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d7b0                 | ' '                                                                                                                                       -
0d7b0                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d7b0                 | ' '                                                                                                                                       -
0d7b0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d7b0                 | ' 
0d7b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d7b0                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d7b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d7b0                 | ' 
0d7b0                 | ' function execute_line (astart=0 as integer) as integer
0d7b0                 | _execute_line
0d7b0     04 4A 05 F6 | 	mov	COUNT_, #4
0d7b4     A8 00 A0 FD | 	call	#pushregs_
0d7b8     50 00 00 FF 
0d7bc     DC E4 05 F1 | 	add	objptr, ##41180
0d7c0     F2 00 68 FC | 	wrlong	#0, objptr
0d7c4                 | ' 
0d7c4                 | ' runptr2=0
0d7c4                 | ' for lineptr_e=astart to lineptr-1
0d7c4     06 00 00 FF 
0d7c8     3C E4 85 F1 | 	sub	objptr, ##3132
0d7cc     F2 12 62 FC | 	wrlong	arg01, objptr
0d7d0     04 E4 85 F1 | 	sub	objptr, #4
0d7d4     F2 26 02 FB | 	rdlong	local01, objptr
0d7d8     4A 00 00 FF 
0d7dc     9C E4 85 F1 | 	sub	objptr, ##38044
0d7e0                 | LR__1080
0d7e0     4A 00 00 FF 
0d7e4     A0 E4 05 F1 | 	add	objptr, ##38048
0d7e8     F2 FA 01 FB | 	rdlong	result1, objptr
0d7ec     4A 00 00 FF 
0d7f0     A0 E4 85 F1 | 	sub	objptr, ##38048
0d7f4     13 FB 51 F2 | 	cmps	result1, local01 wc
0d7f8     98 00 90 3D |  if_ae	jmp	#LR__1081
0d7fc     4A 00 00 FF 
0d800     A0 E4 05 F1 | 	add	objptr, ##38048
0d804     F2 FA 01 FB | 	rdlong	result1, objptr
0d808     FD 28 02 F6 | 	mov	local02, result1
0d80c     01 28 66 F0 | 	shl	local02, #1
0d810     FD 28 02 F1 | 	add	local02, result1
0d814     02 28 66 F0 | 	shl	local02, #2
0d818     03 00 00 FF 
0d81c     04 E4 85 F1 | 	sub	objptr, ##1540
0d820     F2 28 02 F1 | 	add	local02, objptr
0d824     08 28 06 F1 | 	add	local02, #8
0d828     14 29 02 FB | 	rdlong	local02, local02
0d82c     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d830     02 28 66 F0 | 	shl	local02, #2
0d834     04 00 00 FF 
0d838     1C E4 85 F1 | 	sub	objptr, ##2076
0d83c     F2 28 02 F1 | 	add	local02, objptr
0d840     14 29 02 FB | 	rdlong	local02, local02
0d844     14 2B 02 F6 | 	mov	local03, local02
0d848     13 28 46 F7 | 	zerox	local02, #19
0d84c     14 2A 46 F0 | 	shr	local03, #20
0d850     02 2A 66 F0 | 	shl	local03, #2
0d854     ED 2A 02 F1 | 	add	local03, __methods__
0d858     15 2B 02 FB | 	rdlong	local03, local03
0d85c     43 00 00 FF 
0d860     80 E4 85 F1 | 	sub	objptr, ##34432
0d864     F2 2C 02 F6 | 	mov	local04, objptr
0d868     14 E5 01 F6 | 	mov	objptr, local02
0d86c     2D 2A 62 FD | 	call	local03
0d870     16 E5 01 F6 | 	mov	objptr, local04
0d874     4A 00 00 FF 
0d878     A0 E4 05 F1 | 	add	objptr, ##38048
0d87c     F2 2C 02 FB | 	rdlong	local04, objptr
0d880     01 2C 06 F1 | 	add	local04, #1
0d884     F2 2C 62 FC | 	wrlong	local04, objptr
0d888     4A 00 00 FF 
0d88c     A0 E4 85 F1 | 	sub	objptr, ##38048
0d890     4C FF 9F FD | 	jmp	#LR__1080
0d894                 | LR__1081
0d894                 | ' return runptr2
0d894     50 00 00 FF 
0d898     DC E4 05 F1 | 	add	objptr, ##41180
0d89c     F2 FA 01 FB | 	rdlong	result1, objptr
0d8a0     50 00 00 FF 
0d8a4     DC E4 85 F1 | 	sub	objptr, ##41180
0d8a8     A7 F0 03 F6 | 	mov	ptra, fp
0d8ac     B2 00 A0 FD | 	call	#popregs_
0d8b0                 | _execute_line_ret
0d8b0     2D 00 64 FD | 	ret
0d8b4                 | 
0d8b4                 | ' 
0d8b4                 | ' 
0d8b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8b4                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d8b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8b4                 | ' 
0d8b4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d8b4                 | ' 
0d8b4                 | ' function pop() as expr_result
0d8b4                 | _pop
0d8b4                 | ' if stackpointer=0 then
0d8b4     43 00 00 FF 
0d8b8     78 E4 05 F1 | 	add	objptr, ##34424
0d8bc     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d8c0     43 00 00 FF 
0d8c4     78 E4 85 F1 | 	sub	objptr, ##34424
0d8c8     FF 04 06 A6 |  if_e	mov	_var03, #255
0d8cc     18 00 06 A6 |  if_e	mov	_var01, #24
0d8d0     68 00 90 AD |  if_e	jmp	#LR__1090
0d8d4     43 00 00 FF 
0d8d8     78 E4 05 F1 | 	add	objptr, ##34424
0d8dc     F2 FA 01 FB | 	rdlong	result1, objptr
0d8e0     01 FA 85 F1 | 	sub	result1, #1
0d8e4     F2 FA 61 FC | 	wrlong	result1, objptr
0d8e8     FD FE 01 F6 | 	mov	result3, result1
0d8ec     01 FE 65 F0 | 	shl	result3, #1
0d8f0     FD FE 01 F1 | 	add	result3, result1
0d8f4     02 FE 65 F0 | 	shl	result3, #2
0d8f8     0C 00 00 FF 
0d8fc     0C E4 85 F1 | 	sub	objptr, ##6156
0d900     F2 FE 01 F1 | 	add	result3, objptr
0d904     FF 00 02 FB | 	rdlong	_var01, result3
0d908     04 FE 05 F1 | 	add	result3, #4
0d90c     FF FE 01 FB | 	rdlong	result3, result3
0d910     FD FC 01 F6 | 	mov	result2, result1
0d914     01 FC 65 F0 | 	shl	result2, #1
0d918     FD FC 01 F1 | 	add	result2, result1
0d91c     02 FC 65 F0 | 	shl	result2, #2
0d920     F2 FC 01 F1 | 	add	result2, objptr
0d924     08 FC 05 F1 | 	add	result2, #8
0d928     FE FA 01 FB | 	rdlong	result1, result2
0d92c     FF 02 02 F6 | 	mov	_var02, result3
0d930     FD 04 02 F6 | 	mov	_var03, result1
0d934     37 00 00 FF 
0d938     6C E4 85 F1 | 	sub	objptr, ##28268
0d93c                 | LR__1090
0d93c                 | ' return t1
0d93c     01 FD 01 F6 | 	mov	result2, _var02
0d940     02 FF 01 F6 | 	mov	result3, _var03
0d944     00 FB 01 F6 | 	mov	result1, _var01
0d948                 | _pop_ret
0d948     2D 00 64 FD | 	ret
0d94c                 | 
0d94c                 | ' 
0d94c                 | ' sub push(t1 as expr_result )
0d94c                 | _push
0d94c                 | ' if stackpointer<maxstack then 
0d94c     43 00 00 FF 
0d950     78 E4 05 F1 | 	add	objptr, ##34424
0d954     F2 00 02 FB | 	rdlong	_var01, objptr
0d958     43 00 00 FF 
0d95c     78 E4 85 F1 | 	sub	objptr, ##34424
0d960     01 00 00 FF 
0d964     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d968     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d96c     09 01 02 FB | 	rdlong	_var01, arg01
0d970     04 12 06 F1 | 	add	arg01, #4
0d974     09 03 02 FB | 	rdlong	_var02, arg01
0d978     04 12 06 F1 | 	add	arg01, #4
0d97c     09 13 02 FB | 	rdlong	arg01, arg01
0d980     43 00 00 FF 
0d984     78 E4 05 F1 | 	add	objptr, ##34424
0d988     F2 04 02 FB | 	rdlong	_var03, objptr
0d98c     02 07 02 F6 | 	mov	_var04, _var03
0d990     01 06 66 F0 | 	shl	_var04, #1
0d994     02 07 02 F1 | 	add	_var04, _var03
0d998     02 06 66 F0 | 	shl	_var04, #2
0d99c     0C 00 00 FF 
0d9a0     0C E4 85 F1 | 	sub	objptr, ##6156
0d9a4     F2 06 02 F1 | 	add	_var04, objptr
0d9a8     03 01 62 FC | 	wrlong	_var01, _var04
0d9ac     0C 00 00 FF 
0d9b0     0C E4 05 F1 | 	add	objptr, ##6156
0d9b4     F2 06 02 FB | 	rdlong	_var04, objptr
0d9b8     03 05 02 F6 | 	mov	_var03, _var04
0d9bc     01 04 66 F0 | 	shl	_var03, #1
0d9c0     03 05 02 F1 | 	add	_var03, _var04
0d9c4     02 04 66 F0 | 	shl	_var03, #2
0d9c8     0C 00 00 FF 
0d9cc     0C E4 85 F1 | 	sub	objptr, ##6156
0d9d0     F2 04 02 F1 | 	add	_var03, objptr
0d9d4     04 04 06 F1 | 	add	_var03, #4
0d9d8     02 03 62 FC | 	wrlong	_var02, _var03
0d9dc     0C 00 00 FF 
0d9e0     0C E4 05 F1 | 	add	objptr, ##6156
0d9e4     F2 06 02 FB | 	rdlong	_var04, objptr
0d9e8     03 05 02 F6 | 	mov	_var03, _var04
0d9ec     01 04 66 F0 | 	shl	_var03, #1
0d9f0     03 05 02 F1 | 	add	_var03, _var04
0d9f4     02 04 66 F0 | 	shl	_var03, #2
0d9f8     0C 00 00 FF 
0d9fc     0C E4 85 F1 | 	sub	objptr, ##6156
0da00     F2 04 02 F1 | 	add	_var03, objptr
0da04     08 04 06 F1 | 	add	_var03, #8
0da08     02 13 62 FC | 	wrlong	arg01, _var03
0da0c     0C 00 00 FF 
0da10     0C E4 05 F1 | 	add	objptr, ##6156
0da14     F2 00 02 FB | 	rdlong	_var01, objptr
0da18     01 00 06 F1 | 	add	_var01, #1
0da1c     F2 00 62 FC | 	wrlong	_var01, objptr
0da20     43 00 00 FF 
0da24     78 E4 85 F1 | 	sub	objptr, ##34424
0da28                 | LR__1100
0da28                 | _push_ret
0da28     2D 00 64 FD | 	ret
0da2c                 | 
0da2c                 | ' 
0da2c                 | ' ' -------------------------------- Runtime converting functions
0da2c                 | ' 
0da2c                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0da2c                 | ' 
0da2c                 | ' function  convertstring(psaddr as ulong) as string
0da2c                 | _convertstring
0da2c     04 4A 05 F6 | 	mov	COUNT_, #4
0da30     A8 00 A0 FD | 	call	#pushregs_
0da34     09 27 02 F6 | 	mov	local01, arg01
0da38     30 72 B1 FD | 	call	#_pslpeek
0da3c     FD 28 02 F6 | 	mov	local02, result1
0da40     C3 01 00 FF 
0da44     0B 2B 06 F6 | 	mov	local03, ##@LR__6022
0da48                 | ' l=pslpeek(psaddr) 
0da48                 | ' s="" 
0da48                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0da48     01 2C 06 F6 | 	mov	local04, #1
0da4c     01 28 06 F1 | 	add	local02, #1
0da50                 | LR__1110
0da50     14 2D 52 F2 | 	cmps	local04, local02 wc
0da54     30 00 90 3D |  if_ae	jmp	#LR__1111
0da58     13 13 02 F6 | 	mov	arg01, local01
0da5c     03 12 06 F1 | 	add	arg01, #3
0da60     16 13 02 F1 | 	add	arg01, local04
0da64     AC 71 B1 FD | 	call	#_pspeek
0da68     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0da6c     C8 CB B1 FD | 	call	#__system__Chr_S
0da70     FD 14 02 F6 | 	mov	arg02, result1
0da74     15 13 02 F6 | 	mov	arg01, local03
0da78     D4 A9 B1 FD | 	call	#__system___string_concat
0da7c     FD 2A 02 F6 | 	mov	local03, result1
0da80     01 2C 06 F1 | 	add	local04, #1
0da84     C8 FF 9F FD | 	jmp	#LR__1110
0da88                 | LR__1111
0da88                 | ' return s
0da88     15 FB 01 F6 | 	mov	result1, local03
0da8c     A7 F0 03 F6 | 	mov	ptra, fp
0da90     B2 00 A0 FD | 	call	#popregs_
0da94                 | _convertstring_ret
0da94     2D 00 64 FD | 	ret
0da98                 | 
0da98                 | ' 
0da98                 | ' ' converts a variable to an integer
0da98                 | ' 
0da98                 | ' function converttoint (t1 as expr_result) as integer 
0da98                 | _converttoint
0da98     02 4A 05 F6 | 	mov	COUNT_, #2
0da9c     A8 00 A0 FD | 	call	#pushregs_
0daa0     09 27 02 F6 | 	mov	local01, arg01
0daa4                 | ' 
0daa4                 | ' select case t1.result_type
0daa4     08 26 06 F1 | 	add	local01, #8
0daa8     13 29 02 FB | 	rdlong	local02, local01
0daac     08 26 86 F1 | 	sub	local01, #8
0dab0     1C 28 0E F2 | 	cmp	local02, #28 wz
0dab4     2C 00 90 AD |  if_e	jmp	#LR__1120
0dab8     1D 28 0E F2 | 	cmp	local02, #29 wz
0dabc     2C 00 90 AD |  if_e	jmp	#LR__1121
0dac0     1E 28 0E F2 | 	cmp	local02, #30 wz
0dac4     2C 00 90 AD |  if_e	jmp	#LR__1122
0dac8     1F 28 0E F2 | 	cmp	local02, #31 wz
0dacc     34 00 90 AD |  if_e	jmp	#LR__1123
0dad0     2B 28 0E F2 | 	cmp	local02, #43 wz
0dad4     44 00 90 AD |  if_e	jmp	#LR__1124
0dad8     2C 28 0E F2 | 	cmp	local02, #44 wz
0dadc     5C 00 90 AD |  if_e	jmp	#LR__1125
0dae0     60 00 90 FD | 	jmp	#LR__1126
0dae4                 | LR__1120
0dae4     13 FB 01 FB | 	rdlong	result1, local01
0dae8     5C 00 90 FD | 	jmp	#LR__1127
0daec                 | LR__1121
0daec     13 FB 01 FB | 	rdlong	result1, local01
0daf0     54 00 90 FD | 	jmp	#LR__1127
0daf4                 | LR__1122
0daf4     13 13 02 FB | 	rdlong	arg01, local01
0daf8     01 14 06 F6 | 	mov	arg02, #1
0dafc     38 DC B1 FD | 	call	#__system___float_tointeger
0db00     44 00 90 FD | 	jmp	#LR__1127
0db04                 | LR__1123
0db04     13 13 02 FB | 	rdlong	arg01, local01
0db08     74 DF B1 FD | 	call	#__system____builtin_atof
0db0c     FD 12 02 F6 | 	mov	arg01, result1
0db10     01 14 06 F6 | 	mov	arg02, #1
0db14     20 DC B1 FD | 	call	#__system___float_tointeger
0db18     2C 00 90 FD | 	jmp	#LR__1127
0db1c                 | LR__1124
0db1c     13 13 02 FB | 	rdlong	arg01, local01
0db20     08 FF BF FD | 	call	#_convertstring
0db24     FD 12 02 F6 | 	mov	arg01, result1
0db28     54 DF B1 FD | 	call	#__system____builtin_atof
0db2c     FD 12 02 F6 | 	mov	arg01, result1
0db30     01 14 06 F6 | 	mov	arg02, #1
0db34     00 DC B1 FD | 	call	#__system___float_tointeger
0db38     0C 00 90 FD | 	jmp	#LR__1127
0db3c                 | LR__1125
0db3c     13 FB 01 FB | 	rdlong	result1, local01
0db40     04 00 90 FD | 	jmp	#LR__1127
0db44                 | LR__1126
0db44     00 FA 05 F6 | 	mov	result1, #0
0db48                 | LR__1127
0db48     A7 F0 03 F6 | 	mov	ptra, fp
0db4c     B2 00 A0 FD | 	call	#popregs_
0db50                 | _converttoint_ret
0db50     2D 00 64 FD | 	ret
0db54                 | 
0db54                 | ' 
0db54                 | ' ' converts a variable to float
0db54                 | ' 
0db54                 | ' function converttofloat (t1 as expr_result) as single
0db54                 | _converttofloat
0db54     03 4A 05 F6 | 	mov	COUNT_, #3
0db58     A8 00 A0 FD | 	call	#pushregs_
0db5c     09 27 02 F6 | 	mov	local01, arg01
0db60                 | ' 
0db60                 | ' select case t1.result_type
0db60     08 26 06 F1 | 	add	local01, #8
0db64     13 29 02 FB | 	rdlong	local02, local01
0db68     08 26 86 F1 | 	sub	local01, #8
0db6c     1C 28 0E F2 | 	cmp	local02, #28 wz
0db70     24 00 90 AD |  if_e	jmp	#LR__1130
0db74     1D 28 0E F2 | 	cmp	local02, #29 wz
0db78     38 00 90 AD |  if_e	jmp	#LR__1131
0db7c     1E 28 0E F2 | 	cmp	local02, #30 wz
0db80     3C 00 90 AD |  if_e	jmp	#LR__1132
0db84     1F 28 0E F2 | 	cmp	local02, #31 wz
0db88     3C 00 90 AD |  if_e	jmp	#LR__1133
0db8c     2B 28 0E F2 | 	cmp	local02, #43 wz
0db90     40 00 90 AD |  if_e	jmp	#LR__1134
0db94     50 00 90 FD | 	jmp	#LR__1135
0db98                 | LR__1130
0db98     13 13 02 FB | 	rdlong	arg01, local01
0db9c     09 13 52 F6 | 	abs	arg01, arg01 wc
0dba0     1F 2A C6 C9 |  if_b	decod	local03, #31
0dba4     00 2A 06 36 |  if_ae	mov	local03, #0
0dba8     C0 D2 B1 FD | 	call	#__system___float_fromuns
0dbac     15 FB 61 F5 | 	xor	result1, local03
0dbb0     38 00 90 FD | 	jmp	#LR__1136
0dbb4                 | LR__1131
0dbb4     13 13 02 FB | 	rdlong	arg01, local01
0dbb8     B0 D2 B1 FD | 	call	#__system___float_fromuns
0dbbc     2C 00 90 FD | 	jmp	#LR__1136
0dbc0                 | LR__1132
0dbc0     13 FB 01 FB | 	rdlong	result1, local01
0dbc4     24 00 90 FD | 	jmp	#LR__1136
0dbc8                 | LR__1133
0dbc8     13 13 02 FB | 	rdlong	arg01, local01
0dbcc     B0 DE B1 FD | 	call	#__system____builtin_atof
0dbd0     18 00 90 FD | 	jmp	#LR__1136
0dbd4                 | LR__1134
0dbd4     13 13 02 FB | 	rdlong	arg01, local01
0dbd8     50 FE BF FD | 	call	#_convertstring
0dbdc     FD 12 02 F6 | 	mov	arg01, result1
0dbe0     9C DE B1 FD | 	call	#__system____builtin_atof
0dbe4     04 00 90 FD | 	jmp	#LR__1136
0dbe8                 | LR__1135
0dbe8     00 FA 05 F6 | 	mov	result1, #0
0dbec                 | LR__1136
0dbec     A7 F0 03 F6 | 	mov	ptra, fp
0dbf0     B2 00 A0 FD | 	call	#popregs_
0dbf4                 | _converttofloat_ret
0dbf4     2D 00 64 FD | 	ret
0dbf8                 | 
0dbf8                 | ' 
0dbf8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0dbf8                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0dbf8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0dbf8                 | ' 
0dbf8                 | ' 
0dbf8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0dbf8                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0dbf8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0dbf8                 | ' 
0dbf8                 | ' '-------------------- abs
0dbf8                 | ' 
0dbf8                 | ' sub do_abs
0dbf8                 | _do_abs
0dbf8     01 4A 05 F6 | 	mov	COUNT_, #1
0dbfc     A8 00 A0 FD | 	call	#pushregs_
0dc00     0C F0 07 F1 | 	add	ptra, #12
0dc04     AC FC BF FD | 	call	#_pop
0dc08     FF 26 02 F6 | 	mov	local01, result3
0dc0c     A7 FA 61 FC | 	wrlong	result1, fp
0dc10     04 4E 05 F1 | 	add	fp, #4
0dc14     A7 FC 61 FC | 	wrlong	result2, fp
0dc18     04 4E 05 F1 | 	add	fp, #4
0dc1c     A7 26 62 FC | 	wrlong	local01, fp
0dc20                 | ' 
0dc20                 | ' t1=pop()
0dc20                 | ' if t1.result_type=result_int then 
0dc20     08 4E 85 F1 | 	sub	fp, #8
0dc24     1C 26 0E F2 | 	cmp	local01, #28 wz
0dc28     A7 12 02 AB |  if_e	rdlong	arg01, fp
0dc2c     09 27 42 A6 |  if_e	abs	local01, arg01
0dc30     A7 26 62 AC |  if_e	wrlong	local01, fp
0dc34     2C 00 90 AD |  if_e	jmp	#LR__1140
0dc38     08 4E 05 F1 | 	add	fp, #8
0dc3c     A7 26 02 FB | 	rdlong	local01, fp
0dc40     08 4E 85 F1 | 	sub	fp, #8
0dc44     1E 26 0E F2 | 	cmp	local01, #30 wz
0dc48     A7 FA 01 AB |  if_e	rdlong	result1, fp
0dc4c     1F FA 05 A4 |  if_e	bitl	result1, #31
0dc50     A7 FA 61 AC |  if_e	wrlong	result1, fp
0dc54     08 4E 05 51 |  if_ne	add	fp, #8
0dc58     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dc5c     08 4E 85 51 |  if_ne	sub	fp, #8
0dc60     A7 50 68 5C |  if_ne	wrlong	#40, fp
0dc64                 | LR__1140
0dc64     A7 12 02 F6 | 	mov	arg01, fp
0dc68     E0 FC BF FD | 	call	#_push
0dc6c     A7 F0 03 F6 | 	mov	ptra, fp
0dc70     B2 00 A0 FD | 	call	#popregs_
0dc74                 | _do_abs_ret
0dc74     2D 00 64 FD | 	ret
0dc78                 | 
0dc78                 | ' 
0dc78                 | ' '-------------------- acos
0dc78                 | ' 
0dc78                 | ' sub do_acos
0dc78                 | _do_acos
0dc78     01 4A 05 F6 | 	mov	COUNT_, #1
0dc7c     A8 00 A0 FD | 	call	#pushregs_
0dc80     10 F0 07 F1 | 	add	ptra, #16
0dc84     4A 00 00 FF 
0dc88     A0 E4 05 F1 | 	add	objptr, ##38048
0dc8c     F2 26 02 FB | 	rdlong	local01, objptr
0dc90     13 17 02 F6 | 	mov	arg03, local01
0dc94     01 16 66 F0 | 	shl	arg03, #1
0dc98     13 17 02 F1 | 	add	arg03, local01
0dc9c     02 16 66 F0 | 	shl	arg03, #2
0dca0     03 00 00 FF 
0dca4     04 E4 85 F1 | 	sub	objptr, ##1540
0dca8     F2 16 02 F1 | 	add	arg03, objptr
0dcac     0B 17 02 FB | 	rdlong	arg03, arg03
0dcb0     0C 4E 05 F1 | 	add	fp, #12
0dcb4     A7 16 62 FC | 	wrlong	arg03, fp
0dcb8                 | ' 
0dcb8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcb8                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0dcb8     0C 4E 85 F1 | 	sub	fp, #12
0dcbc     02 16 16 F2 | 	cmp	arg03, #2 wc
0dcc0     47 00 00 FF 
0dcc4     9C E4 85 F1 | 	sub	objptr, ##36508
0dcc8     0C 4E 05 C1 |  if_b	add	fp, #12
0dccc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dcd0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dcd4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dcd8     00 12 06 F6 | 	mov	arg01, #0
0dcdc     C4 03 B2 FD | 	call	#__system___getiolock_0625
0dce0     FD 12 02 F6 | 	mov	arg01, result1
0dce4     0C A7 B1 FD | 	call	#__system___lockmem
0dce8     C3 01 00 FF 
0dcec     0C 15 06 F6 | 	mov	arg02, ##@LR__6023
0dcf0     00 12 06 F6 | 	mov	arg01, #0
0dcf4     00 16 06 F6 | 	mov	arg03, #0
0dcf8     F0 B3 B1 FD | 	call	#__system___basic_print_string
0dcfc     00 12 06 F6 | 	mov	arg01, #0
0dd00     A0 03 B2 FD | 	call	#__system___getiolock_0625
0dd04     FD 00 68 FC | 	wrlong	#0, result1
0dd08     27 12 06 F6 | 	mov	arg01, #39
0dd0c     00 14 06 F6 | 	mov	arg02, #0
0dd10     88 6C B1 FD | 	call	#_printerror
0dd14     64 00 90 FD | 	jmp	#LR__1151
0dd18                 | LR__1150
0dd18     98 FB BF FD | 	call	#_pop
0dd1c     FF 26 02 F6 | 	mov	local01, result3
0dd20     A7 FA 61 FC | 	wrlong	result1, fp
0dd24     04 4E 05 F1 | 	add	fp, #4
0dd28     A7 FC 61 FC | 	wrlong	result2, fp
0dd2c     04 4E 05 F1 | 	add	fp, #4
0dd30     A7 26 62 FC | 	wrlong	local01, fp
0dd34     08 4E 85 F1 | 	sub	fp, #8
0dd38     A7 12 02 F6 | 	mov	arg01, fp
0dd3c     14 FE BF FD | 	call	#_converttofloat
0dd40     FD 12 02 F6 | 	mov	arg01, result1
0dd44     6C E0 B1 FD | 	call	#__system____builtin_acosf
0dd48     FD 12 02 F6 | 	mov	arg01, result1
0dd4c     52 00 00 FF 
0dd50     04 E5 05 F1 | 	add	objptr, ##42244
0dd54     F2 14 02 FB | 	rdlong	arg02, objptr
0dd58     52 00 00 FF 
0dd5c     04 E5 85 F1 | 	sub	objptr, ##42244
0dd60     0C D5 B1 FD | 	call	#__system___float_mul
0dd64     A7 FA 61 FC | 	wrlong	result1, fp
0dd68     08 4E 05 F1 | 	add	fp, #8
0dd6c     A7 3C 68 FC | 	wrlong	#30, fp
0dd70     08 4E 85 F1 | 	sub	fp, #8
0dd74     A7 12 02 F6 | 	mov	arg01, fp
0dd78     D0 FB BF FD | 	call	#_push
0dd7c                 | LR__1151
0dd7c     A7 F0 03 F6 | 	mov	ptra, fp
0dd80     B2 00 A0 FD | 	call	#popregs_
0dd84                 | _do_acos_ret
0dd84     2D 00 64 FD | 	ret
0dd88                 | 
0dd88                 | ' 
0dd88                 | ' '-------------------- asc
0dd88                 | ' 
0dd88                 | ' sub do_asc
0dd88                 | _do_asc
0dd88     01 4A 05 F6 | 	mov	COUNT_, #1
0dd8c     A8 00 A0 FD | 	call	#pushregs_
0dd90     14 F0 07 F1 | 	add	ptra, #20
0dd94     4A 00 00 FF 
0dd98     A0 E4 05 F1 | 	add	objptr, ##38048
0dd9c     F2 26 02 FB | 	rdlong	local01, objptr
0dda0     13 17 02 F6 | 	mov	arg03, local01
0dda4     01 16 66 F0 | 	shl	arg03, #1
0dda8     13 17 02 F1 | 	add	arg03, local01
0ddac     02 16 66 F0 | 	shl	arg03, #2
0ddb0     03 00 00 FF 
0ddb4     04 E4 85 F1 | 	sub	objptr, ##1540
0ddb8     F2 16 02 F1 | 	add	arg03, objptr
0ddbc     0B 17 02 FB | 	rdlong	arg03, arg03
0ddc0     0C 4E 05 F1 | 	add	fp, #12
0ddc4     A7 16 62 FC | 	wrlong	arg03, fp
0ddc8                 | ' 
0ddc8                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddc8                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0ddc8     0C 4E 85 F1 | 	sub	fp, #12
0ddcc     02 16 16 F2 | 	cmp	arg03, #2 wc
0ddd0     47 00 00 FF 
0ddd4     9C E4 85 F1 | 	sub	objptr, ##36508
0ddd8     0C 4E 05 C1 |  if_b	add	fp, #12
0dddc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dde0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dde4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0dde8     00 12 06 F6 | 	mov	arg01, #0
0ddec     B4 02 B2 FD | 	call	#__system___getiolock_0625
0ddf0     FD 12 02 F6 | 	mov	arg01, result1
0ddf4     FC A5 B1 FD | 	call	#__system___lockmem
0ddf8     C3 01 00 FF 
0ddfc     13 15 06 F6 | 	mov	arg02, ##@LR__6024
0de00     00 12 06 F6 | 	mov	arg01, #0
0de04     00 16 06 F6 | 	mov	arg03, #0
0de08     E0 B2 B1 FD | 	call	#__system___basic_print_string
0de0c     00 12 06 F6 | 	mov	arg01, #0
0de10     90 02 B2 FD | 	call	#__system___getiolock_0625
0de14     FD 00 68 FC | 	wrlong	#0, result1
0de18     27 12 06 F6 | 	mov	arg01, #39
0de1c     00 14 06 F6 | 	mov	arg02, #0
0de20     78 6B B1 FD | 	call	#_printerror
0de24     B4 00 90 FD | 	jmp	#LR__1163
0de28                 | LR__1160
0de28     88 FA BF FD | 	call	#_pop
0de2c     FF 16 02 F6 | 	mov	arg03, result3
0de30     A7 FA 61 FC | 	wrlong	result1, fp
0de34     04 4E 05 F1 | 	add	fp, #4
0de38     A7 FC 61 FC | 	wrlong	result2, fp
0de3c     04 4E 05 F1 | 	add	fp, #4
0de40     A7 16 62 FC | 	wrlong	arg03, fp
0de44                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0de44     08 4E 85 F1 | 	sub	fp, #8
0de48     2B 16 0E F2 | 	cmp	arg03, #43 wz
0de4c     18 00 90 5D |  if_ne	jmp	#LR__1161
0de50     A7 12 02 FB | 	rdlong	arg01, fp
0de54     D4 FB BF FD | 	call	#_convertstring
0de58     A7 FA 61 FC | 	wrlong	result1, fp
0de5c     08 4E 05 F1 | 	add	fp, #8
0de60     A7 3E 68 FC | 	wrlong	#31, fp
0de64     08 4E 85 F1 | 	sub	fp, #8
0de68                 | LR__1161
0de68                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0de68     08 4E 05 F1 | 	add	fp, #8
0de6c     A7 16 02 FB | 	rdlong	arg03, fp
0de70     08 4E 85 F1 | 	sub	fp, #8
0de74     1F 16 0E F2 | 	cmp	arg03, #31 wz
0de78     40 00 90 AD |  if_e	jmp	#LR__1162
0de7c     00 12 06 F6 | 	mov	arg01, #0
0de80     20 02 B2 FD | 	call	#__system___getiolock_0625
0de84     FD 12 02 F6 | 	mov	arg01, result1
0de88     68 A5 B1 FD | 	call	#__system___lockmem
0de8c     C3 01 00 FF 
0de90     19 15 06 F6 | 	mov	arg02, ##@LR__6025
0de94     00 12 06 F6 | 	mov	arg01, #0
0de98     00 16 06 F6 | 	mov	arg03, #0
0de9c     4C B2 B1 FD | 	call	#__system___basic_print_string
0dea0     00 12 06 F6 | 	mov	arg01, #0
0dea4     FC 01 B2 FD | 	call	#__system___getiolock_0625
0dea8     FD 00 68 FC | 	wrlong	#0, result1
0deac     0F 12 06 F6 | 	mov	arg01, #15
0deb0     00 14 06 F6 | 	mov	arg02, #0
0deb4     E4 6A B1 FD | 	call	#_printerror
0deb8     20 00 90 FD | 	jmp	#LR__1163
0debc                 | LR__1162
0debc     A7 26 02 FB | 	rdlong	local01, fp
0dec0     13 27 C2 FA | 	rdbyte	local01, local01
0dec4     A7 26 62 FC | 	wrlong	local01, fp
0dec8     08 4E 05 F1 | 	add	fp, #8
0decc     A7 38 68 FC | 	wrlong	#28, fp
0ded0     08 4E 85 F1 | 	sub	fp, #8
0ded4     A7 12 02 F6 | 	mov	arg01, fp
0ded8     70 FA BF FD | 	call	#_push
0dedc                 | LR__1163
0dedc     A7 F0 03 F6 | 	mov	ptra, fp
0dee0     B2 00 A0 FD | 	call	#popregs_
0dee4                 | _do_asc_ret
0dee4     2D 00 64 FD | 	ret
0dee8                 | 
0dee8                 | ' 
0dee8                 | ' '-------------------- asin
0dee8                 | ' 
0dee8                 | ' sub do_asin
0dee8                 | _do_asin
0dee8     01 4A 05 F6 | 	mov	COUNT_, #1
0deec     A8 00 A0 FD | 	call	#pushregs_
0def0     10 F0 07 F1 | 	add	ptra, #16
0def4     4A 00 00 FF 
0def8     A0 E4 05 F1 | 	add	objptr, ##38048
0defc     F2 26 02 FB | 	rdlong	local01, objptr
0df00     13 17 02 F6 | 	mov	arg03, local01
0df04     01 16 66 F0 | 	shl	arg03, #1
0df08     13 17 02 F1 | 	add	arg03, local01
0df0c     02 16 66 F0 | 	shl	arg03, #2
0df10     03 00 00 FF 
0df14     04 E4 85 F1 | 	sub	objptr, ##1540
0df18     F2 16 02 F1 | 	add	arg03, objptr
0df1c     0B 17 02 FB | 	rdlong	arg03, arg03
0df20     0C 4E 05 F1 | 	add	fp, #12
0df24     A7 16 62 FC | 	wrlong	arg03, fp
0df28                 | ' 
0df28                 | ' numpar=compiledline(lineptr_e).result.uresult
0df28                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0df28     0C 4E 85 F1 | 	sub	fp, #12
0df2c     02 16 16 F2 | 	cmp	arg03, #2 wc
0df30     47 00 00 FF 
0df34     9C E4 85 F1 | 	sub	objptr, ##36508
0df38     0C 4E 05 C1 |  if_b	add	fp, #12
0df3c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0df40     0C 4E 85 C1 |  if_b	sub	fp, #12
0df44     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0df48     00 12 06 F6 | 	mov	arg01, #0
0df4c     54 01 B2 FD | 	call	#__system___getiolock_0625
0df50     FD 12 02 F6 | 	mov	arg01, result1
0df54     9C A4 B1 FD | 	call	#__system___lockmem
0df58     C3 01 00 FF 
0df5c     1F 15 06 F6 | 	mov	arg02, ##@LR__6026
0df60     00 12 06 F6 | 	mov	arg01, #0
0df64     00 16 06 F6 | 	mov	arg03, #0
0df68     80 B1 B1 FD | 	call	#__system___basic_print_string
0df6c     00 12 06 F6 | 	mov	arg01, #0
0df70     30 01 B2 FD | 	call	#__system___getiolock_0625
0df74     FD 00 68 FC | 	wrlong	#0, result1
0df78     27 12 06 F6 | 	mov	arg01, #39
0df7c     00 14 06 F6 | 	mov	arg02, #0
0df80     18 6A B1 FD | 	call	#_printerror
0df84     64 00 90 FD | 	jmp	#LR__1171
0df88                 | LR__1170
0df88     28 F9 BF FD | 	call	#_pop
0df8c     FF 26 02 F6 | 	mov	local01, result3
0df90     A7 FA 61 FC | 	wrlong	result1, fp
0df94     04 4E 05 F1 | 	add	fp, #4
0df98     A7 FC 61 FC | 	wrlong	result2, fp
0df9c     04 4E 05 F1 | 	add	fp, #4
0dfa0     A7 26 62 FC | 	wrlong	local01, fp
0dfa4     08 4E 85 F1 | 	sub	fp, #8
0dfa8     A7 12 02 F6 | 	mov	arg01, fp
0dfac     A4 FB BF FD | 	call	#_converttofloat
0dfb0     FD 12 02 F6 | 	mov	arg01, result1
0dfb4     B0 DD B1 FD | 	call	#__system____builtin_asinf
0dfb8     FD 12 02 F6 | 	mov	arg01, result1
0dfbc     52 00 00 FF 
0dfc0     04 E5 05 F1 | 	add	objptr, ##42244
0dfc4     F2 14 02 FB | 	rdlong	arg02, objptr
0dfc8     52 00 00 FF 
0dfcc     04 E5 85 F1 | 	sub	objptr, ##42244
0dfd0     9C D2 B1 FD | 	call	#__system___float_mul
0dfd4     A7 FA 61 FC | 	wrlong	result1, fp
0dfd8     08 4E 05 F1 | 	add	fp, #8
0dfdc     A7 3C 68 FC | 	wrlong	#30, fp
0dfe0     08 4E 85 F1 | 	sub	fp, #8
0dfe4     A7 12 02 F6 | 	mov	arg01, fp
0dfe8     60 F9 BF FD | 	call	#_push
0dfec                 | LR__1171
0dfec     A7 F0 03 F6 | 	mov	ptra, fp
0dff0     B2 00 A0 FD | 	call	#popregs_
0dff4                 | _do_asin_ret
0dff4     2D 00 64 FD | 	ret
0dff8                 | 
0dff8                 | ' 
0dff8                 | ' '-------------------- atn
0dff8                 | ' 
0dff8                 | ' sub do_atn
0dff8                 | _do_atn
0dff8     01 4A 05 F6 | 	mov	COUNT_, #1
0dffc     A8 00 A0 FD | 	call	#pushregs_
0e000     10 F0 07 F1 | 	add	ptra, #16
0e004     4A 00 00 FF 
0e008     A0 E4 05 F1 | 	add	objptr, ##38048
0e00c     F2 26 02 FB | 	rdlong	local01, objptr
0e010     13 17 02 F6 | 	mov	arg03, local01
0e014     01 16 66 F0 | 	shl	arg03, #1
0e018     13 17 02 F1 | 	add	arg03, local01
0e01c     02 16 66 F0 | 	shl	arg03, #2
0e020     03 00 00 FF 
0e024     04 E4 85 F1 | 	sub	objptr, ##1540
0e028     F2 16 02 F1 | 	add	arg03, objptr
0e02c     0B 17 02 FB | 	rdlong	arg03, arg03
0e030     0C 4E 05 F1 | 	add	fp, #12
0e034     A7 16 62 FC | 	wrlong	arg03, fp
0e038                 | ' 
0e038                 | ' numpar=compiledline(lineptr_e).result.uresult
0e038                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0e038     0C 4E 85 F1 | 	sub	fp, #12
0e03c     02 16 16 F2 | 	cmp	arg03, #2 wc
0e040     47 00 00 FF 
0e044     9C E4 85 F1 | 	sub	objptr, ##36508
0e048     0C 4E 05 C1 |  if_b	add	fp, #12
0e04c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e050     0C 4E 85 C1 |  if_b	sub	fp, #12
0e054     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0e058     00 12 06 F6 | 	mov	arg01, #0
0e05c     44 00 B2 FD | 	call	#__system___getiolock_0625
0e060     FD 12 02 F6 | 	mov	arg01, result1
0e064     8C A3 B1 FD | 	call	#__system___lockmem
0e068     C3 01 00 FF 
0e06c     26 15 06 F6 | 	mov	arg02, ##@LR__6027
0e070     00 12 06 F6 | 	mov	arg01, #0
0e074     00 16 06 F6 | 	mov	arg03, #0
0e078     70 B0 B1 FD | 	call	#__system___basic_print_string
0e07c     00 12 06 F6 | 	mov	arg01, #0
0e080     20 00 B2 FD | 	call	#__system___getiolock_0625
0e084     FD 00 68 FC | 	wrlong	#0, result1
0e088     27 12 06 F6 | 	mov	arg01, #39
0e08c     00 14 06 F6 | 	mov	arg02, #0
0e090     08 69 B1 FD | 	call	#_printerror
0e094     6C 00 90 FD | 	jmp	#LR__1181
0e098                 | LR__1180
0e098     18 F8 BF FD | 	call	#_pop
0e09c     FF 26 02 F6 | 	mov	local01, result3
0e0a0     A7 FA 61 FC | 	wrlong	result1, fp
0e0a4     04 4E 05 F1 | 	add	fp, #4
0e0a8     A7 FC 61 FC | 	wrlong	result2, fp
0e0ac     04 4E 05 F1 | 	add	fp, #4
0e0b0     A7 26 62 FC | 	wrlong	local01, fp
0e0b4     08 4E 85 F1 | 	sub	fp, #8
0e0b8     A7 12 02 F6 | 	mov	arg01, fp
0e0bc     94 FA BF FD | 	call	#_converttofloat
0e0c0     FD 12 02 F6 | 	mov	arg01, result1
0e0c4     00 C0 1F FF 
0e0c8     00 14 06 F6 | 	mov	arg02, ##1065353216
0e0cc     30 DD B1 FD | 	call	#__system____builtin_atan2f
0e0d0     FD 12 02 F6 | 	mov	arg01, result1
0e0d4     52 00 00 FF 
0e0d8     04 E5 05 F1 | 	add	objptr, ##42244
0e0dc     F2 14 02 FB | 	rdlong	arg02, objptr
0e0e0     52 00 00 FF 
0e0e4     04 E5 85 F1 | 	sub	objptr, ##42244
0e0e8     84 D1 B1 FD | 	call	#__system___float_mul
0e0ec     A7 FA 61 FC | 	wrlong	result1, fp
0e0f0     08 4E 05 F1 | 	add	fp, #8
0e0f4     A7 3C 68 FC | 	wrlong	#30, fp
0e0f8     08 4E 85 F1 | 	sub	fp, #8
0e0fc     A7 12 02 F6 | 	mov	arg01, fp
0e100     48 F8 BF FD | 	call	#_push
0e104                 | LR__1181
0e104     A7 F0 03 F6 | 	mov	ptra, fp
0e108     B2 00 A0 FD | 	call	#popregs_
0e10c                 | _do_atn_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | ' 
0e110                 | ' '-------------------- beep
0e110                 | ' 
0e110                 | ' sub do_beep
0e110                 | _do_beep
0e110     02 4A 05 F6 | 	mov	COUNT_, #2
0e114     A8 00 A0 FD | 	call	#pushregs_
0e118     20 F0 07 F1 | 	add	ptra, #32
0e11c     94 F7 BF FD | 	call	#_pop
0e120     FD 26 02 F6 | 	mov	local01, result1
0e124     FE 1C 02 F6 | 	mov	arg06, result2
0e128     FF 28 02 F6 | 	mov	local02, result3
0e12c     0C 4E 05 F1 | 	add	fp, #12
0e130     A7 26 62 FC | 	wrlong	local01, fp
0e134     04 4E 05 F1 | 	add	fp, #4
0e138     A7 1C 62 FC | 	wrlong	arg06, fp
0e13c     04 4E 05 F1 | 	add	fp, #4
0e140     A7 28 62 FC | 	wrlong	local02, fp
0e144     14 4E 85 F1 | 	sub	fp, #20
0e148     68 F7 BF FD | 	call	#_pop
0e14c     A7 FA 61 FC | 	wrlong	result1, fp
0e150     04 4E 05 F1 | 	add	fp, #4
0e154     A7 FC 61 FC | 	wrlong	result2, fp
0e158     04 4E 05 F1 | 	add	fp, #4
0e15c     A7 FE 61 FC | 	wrlong	result3, fp
0e160                 | ' 
0e160                 | ' t2=pop()
0e160                 | ' t1=pop()
0e160                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0e160     08 4E 85 F1 | 	sub	fp, #8
0e164     1C FE 0D F2 | 	cmp	result3, #28 wz
0e168     08 4E 05 51 |  if_ne	add	fp, #8
0e16c     A7 28 02 5B |  if_ne	rdlong	local02, fp
0e170     08 4E 85 51 |  if_ne	sub	fp, #8
0e174     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0e178     A7 26 02 AB |  if_e	rdlong	local01, fp
0e17c     18 4E 05 A1 |  if_e	add	fp, #24
0e180     A7 26 62 AC |  if_e	wrlong	local01, fp
0e184     18 4E 85 A1 |  if_e	sub	fp, #24
0e188     14 00 90 AD |  if_e	jmp	#LR__1190
0e18c     A7 12 02 F6 | 	mov	arg01, fp
0e190     04 F9 BF FD | 	call	#_converttoint
0e194     18 4E 05 F1 | 	add	fp, #24
0e198     A7 FA 61 FC | 	wrlong	result1, fp
0e19c     18 4E 85 F1 | 	sub	fp, #24
0e1a0                 | LR__1190
0e1a0     1C 4E 05 F1 | 	add	fp, #28
0e1a4     A7 FE 48 FC | 	wrbyte	#127, fp
0e1a8     01 4E 05 F1 | 	add	fp, #1
0e1ac     A7 00 49 FC | 	wrbyte	#128, fp
0e1b0     01 4E 85 F1 | 	sub	fp, #1
0e1b4     A7 14 02 F6 | 	mov	arg02, fp
0e1b8     04 4E 85 F1 | 	sub	fp, #4
0e1bc     A7 16 02 FB | 	rdlong	arg03, fp
0e1c0     18 4E 85 F1 | 	sub	fp, #24
0e1c4     01 16 66 F0 | 	shl	arg03, #1
0e1c8     07 12 06 F6 | 	mov	arg01, #7
0e1cc     0E 18 C6 F9 | 	decod	arg04, #14
0e1d0     02 1A 06 F6 | 	mov	arg05, #2
0e1d4     00 1C 06 F6 | 	mov	arg06, #0
0e1d8     0B 00 00 FF 
0e1dc     CC E4 05 F1 | 	add	objptr, ##5836
0e1e0     FC 9D B1 FD | 	call	#_audio096_spin2_play8
0e1e4     0B 00 00 FF 
0e1e8     CC E4 85 F1 | 	sub	objptr, ##5836
0e1ec     0C 4E 05 F1 | 	add	fp, #12
0e1f0     A7 12 02 F6 | 	mov	arg01, fp
0e1f4     0C 4E 85 F1 | 	sub	fp, #12
0e1f8     50 F7 BF FD | 	call	#_push
0e1fc     74 FB B0 FD | 	call	#_do_waitms
0e200     07 12 06 F6 | 	mov	arg01, #7
0e204     0B 00 00 FF 
0e208     CC E4 05 F1 | 	add	objptr, ##5836
0e20c     74 9E B1 FD | 	call	#_audio096_spin2_stop
0e210     0B 00 00 FF 
0e214     CC E4 85 F1 | 	sub	objptr, ##5836
0e218     A7 F0 03 F6 | 	mov	ptra, fp
0e21c     B2 00 A0 FD | 	call	#popregs_
0e220                 | _do_beep_ret
0e220     2D 00 64 FD | 	ret
0e224                 | 
0e224                 | ' 
0e224                 | ' '-------------------- blit
0e224                 | ' 
0e224                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e224                 | ' sub do_blit
0e224                 | _do_blit
0e224     02 4A 05 F6 | 	mov	COUNT_, #2
0e228     A8 00 A0 FD | 	call	#pushregs_
0e22c     3C F0 07 F1 | 	add	ptra, #60
0e230     4A 00 00 FF 
0e234     A0 E4 05 F1 | 	add	objptr, ##38048
0e238     F2 26 02 FB | 	rdlong	local01, objptr
0e23c     13 25 02 F6 | 	mov	arg10, local01
0e240     01 24 66 F0 | 	shl	arg10, #1
0e244     13 25 02 F1 | 	add	arg10, local01
0e248     02 24 66 F0 | 	shl	arg10, #2
0e24c     03 00 00 FF 
0e250     04 E4 85 F1 | 	sub	objptr, ##1540
0e254     F2 24 02 F1 | 	add	arg10, objptr
0e258     12 25 02 FB | 	rdlong	arg10, arg10
0e25c     38 4E 05 F1 | 	add	fp, #56
0e260     A7 24 62 FC | 	wrlong	arg10, fp
0e264                 | ' 
0e264                 | ' numpar=compiledline(lineptr_e).result.uresult
0e264                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e264     38 4E 85 F1 | 	sub	fp, #56
0e268     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e26c     47 00 00 FF 
0e270     9C E4 85 F1 | 	sub	objptr, ##36508
0e274     38 4E 05 51 |  if_ne	add	fp, #56
0e278     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e27c     38 4E 85 51 |  if_ne	sub	fp, #56
0e280     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e284     50 00 90 AD |  if_e	jmp	#LR__1200
0e288     00 12 06 F6 | 	mov	arg01, #0
0e28c     14 FE B1 FD | 	call	#__system___getiolock_0625
0e290     FD 12 02 F6 | 	mov	arg01, result1
0e294     5C A1 B1 FD | 	call	#__system___lockmem
0e298     C3 01 00 FF 
0e29c     2C 15 06 F6 | 	mov	arg02, ##@LR__6028
0e2a0     00 12 06 F6 | 	mov	arg01, #0
0e2a4     00 16 06 F6 | 	mov	arg03, #0
0e2a8     40 AE B1 FD | 	call	#__system___basic_print_string
0e2ac     00 12 06 F6 | 	mov	arg01, #0
0e2b0     F0 FD B1 FD | 	call	#__system___getiolock_0625
0e2b4     FD 00 68 FC | 	wrlong	#0, result1
0e2b8     50 00 00 FF 
0e2bc     10 E5 05 F1 | 	add	objptr, ##41232
0e2c0     F2 14 02 FB | 	rdlong	arg02, objptr
0e2c4     50 00 00 FF 
0e2c8     10 E5 85 F1 | 	sub	objptr, ##41232
0e2cc     27 12 06 F6 | 	mov	arg01, #39
0e2d0     C8 66 B1 FD | 	call	#_printerror
0e2d4     44 01 90 FD | 	jmp	#LR__1205
0e2d8                 | LR__1200
0e2d8                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e2d8     38 4E 05 F1 | 	add	fp, #56
0e2dc     A7 28 02 FB | 	rdlong	local02, fp
0e2e0     01 28 86 F1 | 	sub	local02, #1
0e2e4     04 4E 85 F1 | 	sub	fp, #4
0e2e8     A7 28 62 FC | 	wrlong	local02, fp
0e2ec     34 4E 85 F1 | 	sub	fp, #52
0e2f0                 | LR__1201
0e2f0     38 4E 05 F1 | 	add	fp, #56
0e2f4     A7 26 02 FB | 	rdlong	local01, fp
0e2f8     01 26 86 F1 | 	sub	local01, #1
0e2fc     04 4E 85 F1 | 	sub	fp, #4
0e300     A7 24 02 FB | 	rdlong	arg10, fp
0e304     34 4E 85 F1 | 	sub	fp, #52
0e308     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e30c     54 00 90 1D |  if_a	jmp	#LR__1202
0e310     A0 F5 BF FD | 	call	#_pop
0e314     A7 FA 61 FC | 	wrlong	result1, fp
0e318     04 4E 05 F1 | 	add	fp, #4
0e31c     A7 FC 61 FC | 	wrlong	result2, fp
0e320     04 4E 05 F1 | 	add	fp, #4
0e324     A7 FE 61 FC | 	wrlong	result3, fp
0e328     2C 4E 05 F1 | 	add	fp, #44
0e32c     A7 28 02 FB | 	rdlong	local02, fp
0e330     02 28 66 F0 | 	shl	local02, #2
0e334     28 4E 85 F1 | 	sub	fp, #40
0e338     A7 28 02 F1 | 	add	local02, fp
0e33c     0C 4E 85 F1 | 	sub	fp, #12
0e340     A7 12 02 F6 | 	mov	arg01, fp
0e344     50 F7 BF FD | 	call	#_converttoint
0e348     14 FB 61 FC | 	wrlong	result1, local02
0e34c     34 4E 05 F1 | 	add	fp, #52
0e350     A7 28 02 FB | 	rdlong	local02, fp
0e354     01 28 86 F1 | 	sub	local02, #1
0e358     A7 28 62 FC | 	wrlong	local02, fp
0e35c     34 4E 85 F1 | 	sub	fp, #52
0e360     8C FF 9F FD | 	jmp	#LR__1201
0e364                 | LR__1202
0e364                 | ' if numpar=10 then 
0e364     38 4E 05 F1 | 	add	fp, #56
0e368     A7 28 02 FB | 	rdlong	local02, fp
0e36c     38 4E 85 F1 | 	sub	fp, #56
0e370     0A 28 0E F2 | 	cmp	local02, #10 wz
0e374     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e378     0C 4E 05 F1 | 	add	fp, #12
0e37c     A7 12 02 FB | 	rdlong	arg01, fp
0e380     04 4E 05 F1 | 	add	fp, #4
0e384     A7 14 02 FB | 	rdlong	arg02, fp
0e388     04 4E 05 F1 | 	add	fp, #4
0e38c     A7 16 02 FB | 	rdlong	arg03, fp
0e390     04 4E 05 F1 | 	add	fp, #4
0e394     A7 18 02 FB | 	rdlong	arg04, fp
0e398     04 4E 05 F1 | 	add	fp, #4
0e39c     A7 1A 02 FB | 	rdlong	arg05, fp
0e3a0     04 4E 05 F1 | 	add	fp, #4
0e3a4     A7 1C 02 FB | 	rdlong	arg06, fp
0e3a8     04 4E 05 F1 | 	add	fp, #4
0e3ac     A7 1E 02 FB | 	rdlong	arg07, fp
0e3b0     04 4E 05 F1 | 	add	fp, #4
0e3b4     A7 20 02 FB | 	rdlong	arg08, fp
0e3b8     04 4E 05 F1 | 	add	fp, #4
0e3bc     A7 22 02 FB | 	rdlong	arg09, fp
0e3c0     04 4E 05 F1 | 	add	fp, #4
0e3c4     A7 24 02 FB | 	rdlong	arg10, fp
0e3c8     30 4E 85 F1 | 	sub	fp, #48
0e3cc     D8 8D B1 FD | 	call	#_hg010b_spin2_blit
0e3d0     48 00 90 FD | 	jmp	#LR__1204
0e3d4                 | LR__1203
0e3d4     F2 1E 02 FB | 	rdlong	arg07, objptr
0e3d8     0C 4E 05 F1 | 	add	fp, #12
0e3dc     A7 14 02 FB | 	rdlong	arg02, fp
0e3e0     04 4E 05 F1 | 	add	fp, #4
0e3e4     A7 16 02 FB | 	rdlong	arg03, fp
0e3e8     04 4E 05 F1 | 	add	fp, #4
0e3ec     A7 18 02 FB | 	rdlong	arg04, fp
0e3f0     04 4E 05 F1 | 	add	fp, #4
0e3f4     A7 1A 02 FB | 	rdlong	arg05, fp
0e3f8     04 4E 05 F1 | 	add	fp, #4
0e3fc     A7 20 02 FB | 	rdlong	arg08, fp
0e400     04 4E 05 F1 | 	add	fp, #4
0e404     A7 22 02 FB | 	rdlong	arg09, fp
0e408     20 4E 85 F1 | 	sub	fp, #32
0e40c     0F 13 02 F6 | 	mov	arg01, arg07
0e410     0A 1C C6 F9 | 	decod	arg06, #10
0e414     0A 24 C6 F9 | 	decod	arg10, #10
0e418     8C 8D B1 FD | 	call	#_hg010b_spin2_blit
0e41c                 | LR__1204
0e41c                 | LR__1205
0e41c     A7 F0 03 F6 | 	mov	ptra, fp
0e420     B2 00 A0 FD | 	call	#popregs_
0e424                 | _do_blit_ret
0e424     2D 00 64 FD | 	ret
0e428                 | 
0e428                 | ' 
0e428                 | ' 
0e428                 | ' '-------------------- bin$
0e428                 | ' 
0e428                 | ' sub do_bin
0e428                 | _do_bin
0e428     01 4A 05 F6 | 	mov	COUNT_, #1
0e42c     A8 00 A0 FD | 	call	#pushregs_
0e430     18 F0 07 F1 | 	add	ptra, #24
0e434     4A 00 00 FF 
0e438     A0 E4 05 F1 | 	add	objptr, ##38048
0e43c     F2 26 02 FB | 	rdlong	local01, objptr
0e440     13 17 02 F6 | 	mov	arg03, local01
0e444     01 16 66 F0 | 	shl	arg03, #1
0e448     13 17 02 F1 | 	add	arg03, local01
0e44c     02 16 66 F0 | 	shl	arg03, #2
0e450     03 00 00 FF 
0e454     04 E4 85 F1 | 	sub	objptr, ##1540
0e458     F2 16 02 F1 | 	add	arg03, objptr
0e45c     0B 17 02 FB | 	rdlong	arg03, arg03
0e460     0C 4E 05 F1 | 	add	fp, #12
0e464     A7 16 62 FC | 	wrlong	arg03, fp
0e468                 | ' 
0e468                 | ' numpar=compiledline(lineptr_e).result.uresult
0e468                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e468     0C 4E 85 F1 | 	sub	fp, #12
0e46c     03 16 16 F2 | 	cmp	arg03, #3 wc
0e470     47 00 00 FF 
0e474     9C E4 85 F1 | 	sub	objptr, ##36508
0e478     0C 4E 05 C1 |  if_b	add	fp, #12
0e47c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e480     0C 4E 85 C1 |  if_b	sub	fp, #12
0e484     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e488     00 12 06 F6 | 	mov	arg01, #0
0e48c     14 FC B1 FD | 	call	#__system___getiolock_0625
0e490     FD 12 02 F6 | 	mov	arg01, result1
0e494     5C 9F B1 FD | 	call	#__system___lockmem
0e498     C3 01 00 FF 
0e49c     33 15 06 F6 | 	mov	arg02, ##@LR__6029
0e4a0     00 12 06 F6 | 	mov	arg01, #0
0e4a4     00 16 06 F6 | 	mov	arg03, #0
0e4a8     40 AC B1 FD | 	call	#__system___basic_print_string
0e4ac     00 12 06 F6 | 	mov	arg01, #0
0e4b0     F0 FB B1 FD | 	call	#__system___getiolock_0625
0e4b4     FD 00 68 FC | 	wrlong	#0, result1
0e4b8     27 12 06 F6 | 	mov	arg01, #39
0e4bc     00 14 06 F6 | 	mov	arg02, #0
0e4c0     D8 64 B1 FD | 	call	#_printerror
0e4c4     B8 00 90 FD | 	jmp	#LR__1213
0e4c8                 | LR__1210
0e4c8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e4c8     0C 4E 05 F1 | 	add	fp, #12
0e4cc     A7 26 02 FB | 	rdlong	local01, fp
0e4d0     0C 4E 85 F1 | 	sub	fp, #12
0e4d4     02 26 0E F2 | 	cmp	local01, #2 wz
0e4d8     38 00 90 5D |  if_ne	jmp	#LR__1211
0e4dc     D4 F3 BF FD | 	call	#_pop
0e4e0     FF 26 02 F6 | 	mov	local01, result3
0e4e4     A7 FA 61 FC | 	wrlong	result1, fp
0e4e8     04 4E 05 F1 | 	add	fp, #4
0e4ec     A7 FC 61 FC | 	wrlong	result2, fp
0e4f0     04 4E 05 F1 | 	add	fp, #4
0e4f4     A7 26 62 FC | 	wrlong	local01, fp
0e4f8     08 4E 85 F1 | 	sub	fp, #8
0e4fc     A7 12 02 F6 | 	mov	arg01, fp
0e500     94 F5 BF FD | 	call	#_converttoint
0e504     14 4E 05 F1 | 	add	fp, #20
0e508     A7 FA 61 FC | 	wrlong	result1, fp
0e50c     14 4E 85 F1 | 	sub	fp, #20
0e510     0C 00 90 FD | 	jmp	#LR__1212
0e514                 | LR__1211
0e514     14 4E 05 F1 | 	add	fp, #20
0e518     A7 00 68 FC | 	wrlong	#0, fp
0e51c     14 4E 85 F1 | 	sub	fp, #20
0e520                 | LR__1212
0e520     90 F3 BF FD | 	call	#_pop
0e524     FF 26 02 F6 | 	mov	local01, result3
0e528     A7 FA 61 FC | 	wrlong	result1, fp
0e52c     04 4E 05 F1 | 	add	fp, #4
0e530     A7 FC 61 FC | 	wrlong	result2, fp
0e534     04 4E 05 F1 | 	add	fp, #4
0e538     A7 26 62 FC | 	wrlong	local01, fp
0e53c     08 4E 85 F1 | 	sub	fp, #8
0e540     A7 12 02 F6 | 	mov	arg01, fp
0e544     50 F5 BF FD | 	call	#_converttoint
0e548     10 4E 05 F1 | 	add	fp, #16
0e54c     A7 FA 61 FC | 	wrlong	result1, fp
0e550     FD 12 02 F6 | 	mov	arg01, result1
0e554     04 4E 05 F1 | 	add	fp, #4
0e558     A7 14 02 FB | 	rdlong	arg02, fp
0e55c     14 4E 85 F1 | 	sub	fp, #20
0e560     02 16 06 F6 | 	mov	arg03, #2
0e564     60 C1 B1 FD | 	call	#__system__Number_S
0e568     A7 FA 61 FC | 	wrlong	result1, fp
0e56c     08 4E 05 F1 | 	add	fp, #8
0e570     A7 3E 68 FC | 	wrlong	#31, fp
0e574     08 4E 85 F1 | 	sub	fp, #8
0e578     A7 12 02 F6 | 	mov	arg01, fp
0e57c     CC F3 BF FD | 	call	#_push
0e580                 | LR__1213
0e580     A7 F0 03 F6 | 	mov	ptra, fp
0e584     B2 00 A0 FD | 	call	#popregs_
0e588                 | _do_bin_ret
0e588     2D 00 64 FD | 	ret
0e58c                 | 
0e58c                 | ' 
0e58c                 | ' '-------------------- box
0e58c                 | ' 
0e58c                 | ' sub do_box
0e58c                 | _do_box
0e58c     03 4A 05 F6 | 	mov	COUNT_, #3
0e590     A8 00 A0 FD | 	call	#pushregs_
0e594     30 F0 07 F1 | 	add	ptra, #48
0e598     18 F3 BF FD | 	call	#_pop
0e59c     FD 1A 02 F6 | 	mov	arg05, result1
0e5a0     FE 18 02 F6 | 	mov	arg04, result2
0e5a4     FF 16 02 F6 | 	mov	arg03, result3
0e5a8     24 4E 05 F1 | 	add	fp, #36
0e5ac     A7 1A 62 FC | 	wrlong	arg05, fp
0e5b0     04 4E 05 F1 | 	add	fp, #4
0e5b4     A7 18 62 FC | 	wrlong	arg04, fp
0e5b8     04 4E 05 F1 | 	add	fp, #4
0e5bc     A7 16 62 FC | 	wrlong	arg03, fp
0e5c0     2C 4E 85 F1 | 	sub	fp, #44
0e5c4     EC F2 BF FD | 	call	#_pop
0e5c8     FD 1A 02 F6 | 	mov	arg05, result1
0e5cc     FE 18 02 F6 | 	mov	arg04, result2
0e5d0     FF 16 02 F6 | 	mov	arg03, result3
0e5d4     18 4E 05 F1 | 	add	fp, #24
0e5d8     A7 1A 62 FC | 	wrlong	arg05, fp
0e5dc     04 4E 05 F1 | 	add	fp, #4
0e5e0     A7 18 62 FC | 	wrlong	arg04, fp
0e5e4     04 4E 05 F1 | 	add	fp, #4
0e5e8     A7 16 62 FC | 	wrlong	arg03, fp
0e5ec     20 4E 85 F1 | 	sub	fp, #32
0e5f0     C0 F2 BF FD | 	call	#_pop
0e5f4     FD 1A 02 F6 | 	mov	arg05, result1
0e5f8     FE 18 02 F6 | 	mov	arg04, result2
0e5fc     FF 26 02 F6 | 	mov	local01, result3
0e600     0C 4E 05 F1 | 	add	fp, #12
0e604     A7 1A 62 FC | 	wrlong	arg05, fp
0e608     04 4E 05 F1 | 	add	fp, #4
0e60c     A7 18 62 FC | 	wrlong	arg04, fp
0e610     04 4E 05 F1 | 	add	fp, #4
0e614     A7 26 62 FC | 	wrlong	local01, fp
0e618     14 4E 85 F1 | 	sub	fp, #20
0e61c     94 F2 BF FD | 	call	#_pop
0e620     A7 FA 61 FC | 	wrlong	result1, fp
0e624     04 4E 05 F1 | 	add	fp, #4
0e628     A7 FC 61 FC | 	wrlong	result2, fp
0e62c     04 4E 05 F1 | 	add	fp, #4
0e630     A7 FE 61 FC | 	wrlong	result3, fp
0e634                 | ' 
0e634                 | ' t4=pop()
0e634                 | ' t3=pop()
0e634                 | ' t2=pop()
0e634                 | ' t1=pop()
0e634                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e634     FF 1A 02 F6 | 	mov	arg05, result3
0e638     08 4E 85 F1 | 	sub	fp, #8
0e63c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e640     08 4E 05 51 |  if_ne	add	fp, #8
0e644     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e648     08 4E 85 51 |  if_ne	sub	fp, #8
0e64c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e650     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e654     14 4E 05 F1 | 	add	fp, #20
0e658     A7 26 02 FB | 	rdlong	local01, fp
0e65c     14 4E 85 F1 | 	sub	fp, #20
0e660     1C 26 0E F2 | 	cmp	local01, #28 wz
0e664     14 4E 05 51 |  if_ne	add	fp, #20
0e668     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e66c     14 4E 85 51 |  if_ne	sub	fp, #20
0e670     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e674     84 00 90 5D |  if_ne	jmp	#LR__1220
0e678     20 4E 05 F1 | 	add	fp, #32
0e67c     A7 26 02 FB | 	rdlong	local01, fp
0e680     20 4E 85 F1 | 	sub	fp, #32
0e684     1C 26 0E F2 | 	cmp	local01, #28 wz
0e688     20 4E 05 51 |  if_ne	add	fp, #32
0e68c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e690     20 4E 85 51 |  if_ne	sub	fp, #32
0e694     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e698     60 00 90 5D |  if_ne	jmp	#LR__1220
0e69c     2C 4E 05 F1 | 	add	fp, #44
0e6a0     A7 26 02 FB | 	rdlong	local01, fp
0e6a4     2C 4E 85 F1 | 	sub	fp, #44
0e6a8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e6ac     2C 4E 05 51 |  if_ne	add	fp, #44
0e6b0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e6b4     2C 4E 85 51 |  if_ne	sub	fp, #44
0e6b8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e6bc     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e6c0     A7 12 02 FB | 	rdlong	arg01, fp
0e6c4     0C 4E 05 F1 | 	add	fp, #12
0e6c8     A7 14 02 FB | 	rdlong	arg02, fp
0e6cc     0C 4E 05 F1 | 	add	fp, #12
0e6d0     A7 16 02 FB | 	rdlong	arg03, fp
0e6d4     0C 4E 05 F1 | 	add	fp, #12
0e6d8     A7 18 02 FB | 	rdlong	arg04, fp
0e6dc     24 4E 85 F1 | 	sub	fp, #36
0e6e0     37 00 00 FF 
0e6e4     48 E4 05 F1 | 	add	objptr, ##28232
0e6e8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e6ec     37 00 00 FF 
0e6f0     48 E4 85 F1 | 	sub	objptr, ##28232
0e6f4     64 7D B1 FD | 	call	#_hg010b_spin2_box
0e6f8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e6f8     6C 00 90 FD | 	jmp	#LR__1221
0e6fc                 | LR__1220
0e6fc     A7 12 02 F6 | 	mov	arg01, fp
0e700     94 F3 BF FD | 	call	#_converttoint
0e704     FD 28 02 F6 | 	mov	local02, result1
0e708     0C 4E 05 F1 | 	add	fp, #12
0e70c     A7 12 02 F6 | 	mov	arg01, fp
0e710     0C 4E 85 F1 | 	sub	fp, #12
0e714     80 F3 BF FD | 	call	#_converttoint
0e718     FD 2A 02 F6 | 	mov	local03, result1
0e71c     18 4E 05 F1 | 	add	fp, #24
0e720     A7 12 02 F6 | 	mov	arg01, fp
0e724     18 4E 85 F1 | 	sub	fp, #24
0e728     6C F3 BF FD | 	call	#_converttoint
0e72c     FD 26 02 F6 | 	mov	local01, result1
0e730     24 4E 05 F1 | 	add	fp, #36
0e734     A7 12 02 F6 | 	mov	arg01, fp
0e738     24 4E 85 F1 | 	sub	fp, #36
0e73c     58 F3 BF FD | 	call	#_converttoint
0e740     FD 18 02 F6 | 	mov	arg04, result1
0e744     37 00 00 FF 
0e748     48 E4 05 F1 | 	add	objptr, ##28232
0e74c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e750     37 00 00 FF 
0e754     48 E4 85 F1 | 	sub	objptr, ##28232
0e758     14 13 02 F6 | 	mov	arg01, local02
0e75c     15 15 02 F6 | 	mov	arg02, local03
0e760     13 17 02 F6 | 	mov	arg03, local01
0e764     F4 7C B1 FD | 	call	#_hg010b_spin2_box
0e768                 | LR__1221
0e768     A7 F0 03 F6 | 	mov	ptra, fp
0e76c     B2 00 A0 FD | 	call	#popregs_
0e770                 | _do_box_ret
0e770     2D 00 64 FD | 	ret
0e774                 | 
0e774                 | ' 
0e774                 | ' '-------------------- brun
0e774                 | ' 
0e774                 | ' sub do_brun
0e774                 | _do_brun
0e774     08 4A 05 F6 | 	mov	COUNT_, #8
0e778     A8 00 A0 FD | 	call	#pushregs_
0e77c     34 F1 BF FD | 	call	#_pop
0e780     FE 1A 02 F6 | 	mov	arg05, result2
0e784     FF 18 02 F6 | 	mov	arg04, result3
0e788     FD 26 02 F6 | 	mov	local01, result1
0e78c     0D 29 02 F6 | 	mov	local02, arg05
0e790     0C 2B 02 F6 | 	mov	local03, arg04
0e794                 | ' 
0e794                 | ' t1=pop() 
0e794                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e794     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e798     10 00 90 5D |  if_ne	jmp	#LR__1230
0e79c     13 13 02 F6 | 	mov	arg01, local01
0e7a0     88 F2 BF FD | 	call	#_convertstring
0e7a4     FD 26 02 F6 | 	mov	local01, result1
0e7a8     1F 2A 06 F6 | 	mov	local03, #31
0e7ac                 | LR__1230
0e7ac                 | ' if t1.result_type=result_string then
0e7ac     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e7b0     F0 01 90 5D |  if_ne	jmp	#LR__1234
0e7b4     13 2D 02 F6 | 	mov	local04, local01
0e7b8                 | '   filename=t1.result.sresult
0e7b8                 | '   if left$(filename,1)="/" then 
0e7b8     16 13 02 F6 | 	mov	arg01, local04
0e7bc     01 14 06 F6 | 	mov	arg02, #1
0e7c0     B0 BC B1 FD | 	call	#__system__Left_S
0e7c4     FD 12 02 F6 | 	mov	arg01, result1
0e7c8     C3 01 00 FF 
0e7cc     3A 15 06 F6 | 	mov	arg02, ##@LR__6030
0e7d0     48 9C B1 FD | 	call	#__system___string_cmp
0e7d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e7d8     16 2F 02 A6 |  if_e	mov	local05, local04
0e7dc     14 00 90 AD |  if_e	jmp	#LR__1231
0e7e0     C3 01 00 FF 
0e7e4     3C 13 06 F6 | 	mov	arg01, ##@LR__6031
0e7e8     16 15 02 F6 | 	mov	arg02, local04
0e7ec     60 9C B1 FD | 	call	#__system___string_concat
0e7f0     FD 2E 02 F6 | 	mov	local05, result1
0e7f4                 | LR__1231
0e7f4                 | '   open fullfilename for input as #9
0e7f4     09 12 06 F6 | 	mov	arg01, #9
0e7f8     17 15 02 F6 | 	mov	arg02, local05
0e7fc     00 16 06 F6 | 	mov	arg03, #0
0e800     F4 A7 B1 FD | 	call	#__system___basic_open_string
0e804     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e808     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e80c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e810     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e814     FD 30 0A F6 | 	mov	local06, result1 wz
0e818                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e818     8C 00 90 AD |  if_e	jmp	#LR__1232
0e81c     00 12 06 F6 | 	mov	arg01, #0
0e820     80 F8 B1 FD | 	call	#__system___getiolock_0625
0e824     FD 12 02 F6 | 	mov	arg01, result1
0e828     C8 9B B1 FD | 	call	#__system___lockmem
0e82c     C3 01 00 FF 
0e830     45 15 06 F6 | 	mov	arg02, ##@LR__6032
0e834     00 12 06 F6 | 	mov	arg01, #0
0e838     00 16 06 F6 | 	mov	arg03, #0
0e83c     AC A8 B1 FD | 	call	#__system___basic_print_string
0e840     00 12 06 F6 | 	mov	arg01, #0
0e844     18 15 02 F6 | 	mov	arg02, local06
0e848     00 16 06 F6 | 	mov	arg03, #0
0e84c     0A 18 06 F6 | 	mov	arg04, #10
0e850     DC A8 B1 FD | 	call	#__system___basic_print_integer
0e854     C3 01 00 FF 
0e858     53 15 06 F6 | 	mov	arg02, ##@LR__6033
0e85c     00 12 06 F6 | 	mov	arg01, #0
0e860     00 16 06 F6 | 	mov	arg03, #0
0e864     84 A8 B1 FD | 	call	#__system___basic_print_string
0e868     18 13 02 F6 | 	mov	arg01, local06
0e86c     14 C5 B1 FD | 	call	#__system___strerror
0e870     FD 14 02 F6 | 	mov	arg02, result1
0e874     00 12 06 F6 | 	mov	arg01, #0
0e878     00 16 06 F6 | 	mov	arg03, #0
0e87c     6C A8 B1 FD | 	call	#__system___basic_print_string
0e880     00 12 06 F6 | 	mov	arg01, #0
0e884     0A 14 06 F6 | 	mov	arg02, #10
0e888     00 16 06 F6 | 	mov	arg03, #0
0e88c     04 A8 B1 FD | 	call	#__system___basic_print_char
0e890     00 12 06 F6 | 	mov	arg01, #0
0e894     0C F8 B1 FD | 	call	#__system___getiolock_0625
0e898     FD 00 68 FC | 	wrlong	#0, result1
0e89c     09 12 06 F6 | 	mov	arg01, #9
0e8a0     B0 EE B1 FD | 	call	#__system__close
0e8a4     FC 00 90 FD | 	jmp	#LR__1235
0e8a8                 | LR__1232
0e8a8     01 32 06 F6 | 	mov	local07, #1
0e8ac     00 34 06 F6 | 	mov	local08, #0
0e8b0                 | '   do
0e8b0                 | LR__1233
0e8b0                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e8b0     4E 00 00 FF 
0e8b4     D4 E4 05 F1 | 	add	objptr, ##40148
0e8b8     F2 16 02 F6 | 	mov	arg03, objptr
0e8bc     4E 00 00 FF 
0e8c0     D4 E4 85 F1 | 	sub	objptr, ##40148
0e8c4     09 12 06 F6 | 	mov	arg01, #9
0e8c8     19 15 02 F6 | 	mov	arg02, local07
0e8cc     0A 18 C6 F9 | 	decod	arg04, #10
0e8d0     01 1A 06 F6 | 	mov	arg05, #1
0e8d4     90 A9 B1 FD | 	call	#__system___basic_get
0e8d8     FD 30 02 F6 | 	mov	local06, result1
0e8dc     FD 32 02 F1 | 	add	local07, result1
0e8e0     4E 00 00 FF 
0e8e4     D4 E4 05 F1 | 	add	objptr, ##40148
0e8e8     F2 12 02 F6 | 	mov	arg01, objptr
0e8ec     1A 15 02 F6 | 	mov	arg02, local08
0e8f0     0A 16 C6 F9 | 	decod	arg03, #10
0e8f4     43 00 00 FF 
0e8f8     08 E4 85 F1 | 	sub	objptr, ##34312
0e8fc     EC 8E B1 FD | 	call	#_psram_spin2_write
0e900     0B 00 00 FF 
0e904     CC E4 85 F1 | 	sub	objptr, ##5836
0e908     18 35 02 F1 | 	add	local08, local06
0e90c     02 00 00 FF 
0e910     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e914     E0 03 00 AF 
0e918     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e91c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e920     37 00 00 FF 
0e924     1C E4 05 F1 | 	add	objptr, ##28188
0e928     F2 12 02 FB | 	rdlong	arg01, objptr
0e92c     03 12 62 FD | 	cogstop	arg01
0e930     04 E4 05 F1 | 	add	objptr, #4
0e934     F2 12 02 FB | 	rdlong	arg01, objptr
0e938     03 12 62 FD | 	cogstop	arg01
0e93c     04 E4 05 F1 | 	add	objptr, #4
0e940     F2 12 02 FB | 	rdlong	arg01, objptr
0e944     03 12 62 FD | 	cogstop	arg01
0e948     19 00 00 FF 
0e94c     3C E5 05 F1 | 	add	objptr, ##13116
0e950     F2 12 02 FB | 	rdlong	arg01, objptr
0e954     03 12 62 FD | 	cogstop	arg01
0e958     18 00 00 FF 
0e95c     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e960     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e964     18 00 00 FF 
0e968     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e96c     19 00 00 FF 
0e970     34 E5 85 F1 | 	sub	objptr, ##13108
0e974     1E 34 06 F6 | 	mov	local08, #30
0e978     28 E4 61 FD | 	setq	objptr
0e97c     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e980     01 34 66 C6 |  if_b	neg	local08, #1
0e984     1B 00 00 FF 
0e988     44 E5 05 F1 | 	add	objptr, ##14148
0e98c     F2 34 62 FC | 	wrlong	local08, objptr
0e990     52 00 00 FF 
0e994     70 E5 85 F1 | 	sub	objptr, ##42352
0e998     00 12 06 F6 | 	mov	arg01, #0
0e99c     01 12 62 FD | 	cogid	arg01
0e9a0     03 12 62 FD | 	cogstop	arg01
0e9a4                 | LR__1234
0e9a4                 | LR__1235
0e9a4     A7 F0 03 F6 | 	mov	ptra, fp
0e9a8     B2 00 A0 FD | 	call	#popregs_
0e9ac                 | _do_brun_ret
0e9ac     2D 00 64 FD | 	ret
0e9b0                 | 
0e9b0                 | ' 
0e9b0                 | ' '-------------------- cd
0e9b0                 | ' 
0e9b0                 | ' sub do_cd
0e9b0                 | _do_cd
0e9b0     06 4A 05 F6 | 	mov	COUNT_, #6
0e9b4     A8 00 A0 FD | 	call	#pushregs_
0e9b8     C3 01 00 FF 
0e9bc     56 13 06 F6 | 	mov	arg01, ##@LR__6034
0e9c0     31 14 06 F6 | 	mov	arg02, #49
0e9c4     9C F8 B1 FD | 	call	#__system___basic_dir
0e9c8     E8 EE BF FD | 	call	#_pop
0e9cc     FE 18 02 F6 | 	mov	arg04, result2
0e9d0     FF 16 02 F6 | 	mov	arg03, result3
0e9d4     FD 26 02 F6 | 	mov	local01, result1
0e9d8     0C 29 02 F6 | 	mov	local02, arg04
0e9dc     0B 2B 02 F6 | 	mov	local03, arg03
0e9e0                 | ' t1=pop()
0e9e0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e9e0     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e9e4     10 00 90 5D |  if_ne	jmp	#LR__1240
0e9e8     13 13 02 F6 | 	mov	arg01, local01
0e9ec     3C F0 BF FD | 	call	#_convertstring
0e9f0     FD 26 02 F6 | 	mov	local01, result1
0e9f4     1F 2A 06 F6 | 	mov	local03, #31
0e9f8                 | LR__1240
0e9f8                 | ' if t1.result_type<>result_string then printerror(15): return
0e9f8     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e9fc     10 00 90 AD |  if_e	jmp	#LR__1241
0ea00     0F 12 06 F6 | 	mov	arg01, #15
0ea04     00 14 06 F6 | 	mov	arg02, #0
0ea08     90 5F B1 FD | 	call	#_printerror
0ea0c     54 05 90 FD | 	jmp	#LR__1259
0ea10                 | LR__1241
0ea10     13 2D 02 F6 | 	mov	local04, local01
0ea14                 | ' newdir$=t1.result.sresult
0ea14                 | ' if newdir$=".." then 
0ea14     C3 01 00 FF 
0ea18     58 15 06 F6 | 	mov	arg02, ##@LR__6035
0ea1c     16 13 02 F6 | 	mov	arg01, local04
0ea20     F8 99 B1 FD | 	call	#__system___string_cmp
0ea24     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea28     C8 01 90 5D |  if_ne	jmp	#LR__1248
0ea2c     4A 00 00 FF 
0ea30     B4 E4 05 F1 | 	add	objptr, ##38068
0ea34     F2 12 02 FB | 	rdlong	arg01, objptr
0ea38     4A 00 00 FF 
0ea3c     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea40     09 2F 02 F6 | 	mov	local05, arg01
0ea44     97 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0ea48                 | LR__1242
0ea48     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ea4c     01 2E 06 51 |  if_ne	add	local05, #1
0ea50     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0ea54                 | LR__1243
0ea54     17 13 C2 F2 | 	subr	arg01, local05
0ea58     4A 00 00 FF 
0ea5c     B4 E4 05 F1 | 	add	objptr, ##38068
0ea60     F2 14 02 FB | 	rdlong	arg02, objptr
0ea64     4A 00 00 FF 
0ea68     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea6c     C3 01 00 FF 
0ea70     5B 17 06 F6 | 	mov	arg03, ##@LR__6036
0ea74     48 C0 B1 FD | 	call	#__system__InstrRev
0ea78     FD 2C 02 F6 | 	mov	local04, result1
0ea7c                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0ea7c     02 2C 56 F2 | 	cmps	local04, #2 wc
0ea80     28 00 90 CD |  if_b	jmp	#LR__1244
0ea84     4A 00 00 FF 
0ea88     B4 E4 05 F1 | 	add	objptr, ##38068
0ea8c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea90     4A 00 00 FF 
0ea94     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea98     01 2C 86 F1 | 	sub	local04, #1
0ea9c     16 15 02 F6 | 	mov	arg02, local04
0eaa0     D0 B9 B1 FD | 	call	#__system__Left_S
0eaa4     FD 2C 02 F6 | 	mov	local04, result1
0eaa8     08 00 90 FD | 	jmp	#LR__1245
0eaac                 | LR__1244
0eaac     C3 01 00 FF 
0eab0     5D 2D 06 F6 | 	mov	local04, ##@LR__6037
0eab4                 | LR__1245
0eab4     16 13 02 F6 | 	mov	arg01, local04
0eab8     C4 9F B1 FD | 	call	#__system___chdir
0eabc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eac0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eac4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eac8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eacc     FD 30 0A F6 | 	mov	local06, result1 wz
0ead0                 | '   chdir newdir$
0ead0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ead0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ead4     A4 00 90 AD |  if_e	jmp	#LR__1246
0ead8     00 12 06 F6 | 	mov	arg01, #0
0eadc     C4 F5 B1 FD | 	call	#__system___getiolock_0625
0eae0     FD 12 02 F6 | 	mov	arg01, result1
0eae4     0C 99 B1 FD | 	call	#__system___lockmem
0eae8     C3 01 00 FF 
0eaec     5F 15 06 F6 | 	mov	arg02, ##@LR__6038
0eaf0     00 12 06 F6 | 	mov	arg01, #0
0eaf4     00 16 06 F6 | 	mov	arg03, #0
0eaf8     F0 A5 B1 FD | 	call	#__system___basic_print_string
0eafc     00 12 06 F6 | 	mov	arg01, #0
0eb00     18 15 02 F6 | 	mov	arg02, local06
0eb04     00 16 06 F6 | 	mov	arg03, #0
0eb08     0A 18 06 F6 | 	mov	arg04, #10
0eb0c     20 A6 B1 FD | 	call	#__system___basic_print_integer
0eb10     C3 01 00 FF 
0eb14     6D 15 06 F6 | 	mov	arg02, ##@LR__6039
0eb18     00 12 06 F6 | 	mov	arg01, #0
0eb1c     00 16 06 F6 | 	mov	arg03, #0
0eb20     C8 A5 B1 FD | 	call	#__system___basic_print_string
0eb24     45 00 00 FF 
0eb28     70 E5 05 F1 | 	add	objptr, ##35696
0eb2c     F2 14 02 FB | 	rdlong	arg02, objptr
0eb30     45 00 00 FF 
0eb34     70 E5 85 F1 | 	sub	objptr, ##35696
0eb38     00 12 06 F6 | 	mov	arg01, #0
0eb3c     00 16 06 F6 | 	mov	arg03, #0
0eb40     A8 A5 B1 FD | 	call	#__system___basic_print_string
0eb44     00 12 06 F6 | 	mov	arg01, #0
0eb48     0A 14 06 F6 | 	mov	arg02, #10
0eb4c     00 16 06 F6 | 	mov	arg03, #0
0eb50     40 A5 B1 FD | 	call	#__system___basic_print_char
0eb54     00 12 06 F6 | 	mov	arg01, #0
0eb58     48 F5 B1 FD | 	call	#__system___getiolock_0625
0eb5c     FD 00 68 FC | 	wrlong	#0, result1
0eb60     4A 00 00 FF 
0eb64     B4 E4 05 F1 | 	add	objptr, ##38068
0eb68     F2 12 02 FB | 	rdlong	arg01, objptr
0eb6c     4A 00 00 FF 
0eb70     B4 E4 85 F1 | 	sub	objptr, ##38068
0eb74     08 9F B1 FD | 	call	#__system___chdir
0eb78     14 00 90 FD | 	jmp	#LR__1247
0eb7c                 | LR__1246
0eb7c     4A 00 00 FF 
0eb80     B4 E4 05 F1 | 	add	objptr, ##38068
0eb84     F2 2C 62 FC | 	wrlong	local04, objptr
0eb88     4A 00 00 FF 
0eb8c     B4 E4 85 F1 | 	sub	objptr, ##38068
0eb90                 | LR__1247
0eb90                 | '   print "Current directory: ";currentdir$
0eb90     00 12 06 F6 | 	mov	arg01, #0
0eb94     0C F5 B1 FD | 	call	#__system___getiolock_0625
0eb98     FD 12 02 F6 | 	mov	arg01, result1
0eb9c     54 98 B1 FD | 	call	#__system___lockmem
0eba0     C3 01 00 FF 
0eba4     70 15 06 F6 | 	mov	arg02, ##@LR__6040
0eba8     00 12 06 F6 | 	mov	arg01, #0
0ebac     00 16 06 F6 | 	mov	arg03, #0
0ebb0     38 A5 B1 FD | 	call	#__system___basic_print_string
0ebb4     4A 00 00 FF 
0ebb8     B4 E4 05 F1 | 	add	objptr, ##38068
0ebbc     F2 14 02 FB | 	rdlong	arg02, objptr
0ebc0     4A 00 00 FF 
0ebc4     B4 E4 85 F1 | 	sub	objptr, ##38068
0ebc8     00 12 06 F6 | 	mov	arg01, #0
0ebcc     00 16 06 F6 | 	mov	arg03, #0
0ebd0     18 A5 B1 FD | 	call	#__system___basic_print_string
0ebd4     00 12 06 F6 | 	mov	arg01, #0
0ebd8     0A 14 06 F6 | 	mov	arg02, #10
0ebdc     00 16 06 F6 | 	mov	arg03, #0
0ebe0     B0 A4 B1 FD | 	call	#__system___basic_print_char
0ebe4     00 12 06 F6 | 	mov	arg01, #0
0ebe8     B8 F4 B1 FD | 	call	#__system___getiolock_0625
0ebec     FD 00 68 FC | 	wrlong	#0, result1
0ebf0                 | '   return
0ebf0     70 03 90 FD | 	jmp	#LR__1259
0ebf4                 | LR__1248
0ebf4                 | ' if left$(newdir$,1)="/" then 
0ebf4     16 13 02 F6 | 	mov	arg01, local04
0ebf8     01 14 06 F6 | 	mov	arg02, #1
0ebfc     74 B8 B1 FD | 	call	#__system__Left_S
0ec00     FD 12 02 F6 | 	mov	arg01, result1
0ec04     C3 01 00 FF 
0ec08     84 15 06 F6 | 	mov	arg02, ##@LR__6041
0ec0c     0C 98 B1 FD | 	call	#__system___string_cmp
0ec10     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec14     40 01 90 5D |  if_ne	jmp	#LR__1251
0ec18     16 13 02 F6 | 	mov	arg01, local04
0ec1c     60 9E B1 FD | 	call	#__system___chdir
0ec20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ec24     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ec28     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ec2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ec30     FD 30 0A F6 | 	mov	local06, result1 wz
0ec34                 | '   chdir(newdir$)
0ec34                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ec34     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ec38     A4 00 90 AD |  if_e	jmp	#LR__1249
0ec3c     00 12 06 F6 | 	mov	arg01, #0
0ec40     60 F4 B1 FD | 	call	#__system___getiolock_0625
0ec44     FD 12 02 F6 | 	mov	arg01, result1
0ec48     A8 97 B1 FD | 	call	#__system___lockmem
0ec4c     C3 01 00 FF 
0ec50     86 15 06 F6 | 	mov	arg02, ##@LR__6042
0ec54     00 12 06 F6 | 	mov	arg01, #0
0ec58     00 16 06 F6 | 	mov	arg03, #0
0ec5c     8C A4 B1 FD | 	call	#__system___basic_print_string
0ec60     00 12 06 F6 | 	mov	arg01, #0
0ec64     18 15 02 F6 | 	mov	arg02, local06
0ec68     00 16 06 F6 | 	mov	arg03, #0
0ec6c     0A 18 06 F6 | 	mov	arg04, #10
0ec70     BC A4 B1 FD | 	call	#__system___basic_print_integer
0ec74     C3 01 00 FF 
0ec78     94 15 06 F6 | 	mov	arg02, ##@LR__6043
0ec7c     00 12 06 F6 | 	mov	arg01, #0
0ec80     00 16 06 F6 | 	mov	arg03, #0
0ec84     64 A4 B1 FD | 	call	#__system___basic_print_string
0ec88     45 00 00 FF 
0ec8c     70 E5 05 F1 | 	add	objptr, ##35696
0ec90     F2 14 02 FB | 	rdlong	arg02, objptr
0ec94     45 00 00 FF 
0ec98     70 E5 85 F1 | 	sub	objptr, ##35696
0ec9c     00 12 06 F6 | 	mov	arg01, #0
0eca0     00 16 06 F6 | 	mov	arg03, #0
0eca4     44 A4 B1 FD | 	call	#__system___basic_print_string
0eca8     00 12 06 F6 | 	mov	arg01, #0
0ecac     0A 14 06 F6 | 	mov	arg02, #10
0ecb0     00 16 06 F6 | 	mov	arg03, #0
0ecb4     DC A3 B1 FD | 	call	#__system___basic_print_char
0ecb8     00 12 06 F6 | 	mov	arg01, #0
0ecbc     E4 F3 B1 FD | 	call	#__system___getiolock_0625
0ecc0     FD 00 68 FC | 	wrlong	#0, result1
0ecc4     4A 00 00 FF 
0ecc8     B4 E4 05 F1 | 	add	objptr, ##38068
0eccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ecd0     4A 00 00 FF 
0ecd4     B4 E4 85 F1 | 	sub	objptr, ##38068
0ecd8     A4 9D B1 FD | 	call	#__system___chdir
0ecdc     14 00 90 FD | 	jmp	#LR__1250
0ece0                 | LR__1249
0ece0     4A 00 00 FF 
0ece4     B4 E4 05 F1 | 	add	objptr, ##38068
0ece8     F2 2C 62 FC | 	wrlong	local04, objptr
0ecec     4A 00 00 FF 
0ecf0     B4 E4 85 F1 | 	sub	objptr, ##38068
0ecf4                 | LR__1250
0ecf4                 | '   print "Current directory: ";currentdir$
0ecf4     00 12 06 F6 | 	mov	arg01, #0
0ecf8     A8 F3 B1 FD | 	call	#__system___getiolock_0625
0ecfc     FD 12 02 F6 | 	mov	arg01, result1
0ed00     F0 96 B1 FD | 	call	#__system___lockmem
0ed04     C3 01 00 FF 
0ed08     97 15 06 F6 | 	mov	arg02, ##@LR__6044
0ed0c     00 12 06 F6 | 	mov	arg01, #0
0ed10     00 16 06 F6 | 	mov	arg03, #0
0ed14     D4 A3 B1 FD | 	call	#__system___basic_print_string
0ed18     4A 00 00 FF 
0ed1c     B4 E4 05 F1 | 	add	objptr, ##38068
0ed20     F2 14 02 FB | 	rdlong	arg02, objptr
0ed24     4A 00 00 FF 
0ed28     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed2c     00 12 06 F6 | 	mov	arg01, #0
0ed30     00 16 06 F6 | 	mov	arg03, #0
0ed34     B4 A3 B1 FD | 	call	#__system___basic_print_string
0ed38     00 12 06 F6 | 	mov	arg01, #0
0ed3c     0A 14 06 F6 | 	mov	arg02, #10
0ed40     00 16 06 F6 | 	mov	arg03, #0
0ed44     4C A3 B1 FD | 	call	#__system___basic_print_char
0ed48     00 12 06 F6 | 	mov	arg01, #0
0ed4c     54 F3 B1 FD | 	call	#__system___getiolock_0625
0ed50     FD 00 68 FC | 	wrlong	#0, result1
0ed54                 | '   return
0ed54     0C 02 90 FD | 	jmp	#LR__1259
0ed58                 | LR__1251
0ed58                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ed58     4A 00 00 FF 
0ed5c     B4 E4 05 F1 | 	add	objptr, ##38068
0ed60     F2 12 02 FB | 	rdlong	arg01, objptr
0ed64     4A 00 00 FF 
0ed68     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed6c     C3 01 00 FF 
0ed70     AB 15 06 F6 | 	mov	arg02, ##@LR__6045
0ed74     A4 96 B1 FD | 	call	#__system___string_cmp
0ed78     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed7c     34 00 90 AD |  if_e	jmp	#LR__1252
0ed80     4A 00 00 FF 
0ed84     B4 E4 05 F1 | 	add	objptr, ##38068
0ed88     F2 12 02 FB | 	rdlong	arg01, objptr
0ed8c     4A 00 00 FF 
0ed90     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed94     C3 01 00 FF 
0ed98     AD 15 06 F6 | 	mov	arg02, ##@LR__6046
0ed9c     B0 96 B1 FD | 	call	#__system___string_concat
0eda0     FD 12 02 F6 | 	mov	arg01, result1
0eda4     16 15 02 F6 | 	mov	arg02, local04
0eda8     A4 96 B1 FD | 	call	#__system___string_concat
0edac     FD 2C 02 F6 | 	mov	local04, result1
0edb0     20 00 90 FD | 	jmp	#LR__1253
0edb4                 | LR__1252
0edb4     4A 00 00 FF 
0edb8     B4 E4 05 F1 | 	add	objptr, ##38068
0edbc     F2 12 02 FB | 	rdlong	arg01, objptr
0edc0     4A 00 00 FF 
0edc4     B4 E4 85 F1 | 	sub	objptr, ##38068
0edc8     16 15 02 F6 | 	mov	arg02, local04
0edcc     80 96 B1 FD | 	call	#__system___string_concat
0edd0     FD 2C 02 F6 | 	mov	local04, result1
0edd4                 | LR__1253
0edd4                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0edd4     16 13 02 F6 | 	mov	arg01, local04
0edd8     01 14 06 F6 | 	mov	arg02, #1
0eddc     1C B7 B1 FD | 	call	#__system__Right_S
0ede0     FD 12 02 F6 | 	mov	arg01, result1
0ede4     C3 01 00 FF 
0ede8     AF 15 06 F6 | 	mov	arg02, ##@LR__6047
0edec     2C 96 B1 FD | 	call	#__system___string_cmp
0edf0     00 FA 0D F2 | 	cmp	result1, #0 wz
0edf4     30 00 90 5D |  if_ne	jmp	#LR__1256
0edf8     16 13 02 F6 | 	mov	arg01, local04
0edfc     09 2F 02 F6 | 	mov	local05, arg01
0ee00     97 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0ee04                 | LR__1254
0ee04     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ee08     01 2E 06 51 |  if_ne	add	local05, #1
0ee0c     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0ee10                 | LR__1255
0ee10     09 2F 82 F1 | 	sub	local05, arg01
0ee14     17 15 02 F6 | 	mov	arg02, local05
0ee18     01 14 86 F1 | 	sub	arg02, #1
0ee1c     16 13 02 F6 | 	mov	arg01, local04
0ee20     50 B6 B1 FD | 	call	#__system__Left_S
0ee24     FD 2C 02 F6 | 	mov	local04, result1
0ee28                 | LR__1256
0ee28     16 13 02 F6 | 	mov	arg01, local04
0ee2c     50 9C B1 FD | 	call	#__system___chdir
0ee30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ee34     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ee38     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ee3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ee40     FD 30 0A F6 | 	mov	local06, result1 wz
0ee44                 | '   chdir(newdir$)
0ee44                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ee44     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ee48     A4 00 90 AD |  if_e	jmp	#LR__1257
0ee4c     00 12 06 F6 | 	mov	arg01, #0
0ee50     50 F2 B1 FD | 	call	#__system___getiolock_0625
0ee54     FD 12 02 F6 | 	mov	arg01, result1
0ee58     98 95 B1 FD | 	call	#__system___lockmem
0ee5c     C3 01 00 FF 
0ee60     B1 15 06 F6 | 	mov	arg02, ##@LR__6048
0ee64     00 12 06 F6 | 	mov	arg01, #0
0ee68     00 16 06 F6 | 	mov	arg03, #0
0ee6c     7C A2 B1 FD | 	call	#__system___basic_print_string
0ee70     00 12 06 F6 | 	mov	arg01, #0
0ee74     18 15 02 F6 | 	mov	arg02, local06
0ee78     00 16 06 F6 | 	mov	arg03, #0
0ee7c     0A 18 06 F6 | 	mov	arg04, #10
0ee80     AC A2 B1 FD | 	call	#__system___basic_print_integer
0ee84     C3 01 00 FF 
0ee88     BF 15 06 F6 | 	mov	arg02, ##@LR__6049
0ee8c     00 12 06 F6 | 	mov	arg01, #0
0ee90     00 16 06 F6 | 	mov	arg03, #0
0ee94     54 A2 B1 FD | 	call	#__system___basic_print_string
0ee98     45 00 00 FF 
0ee9c     70 E5 05 F1 | 	add	objptr, ##35696
0eea0     F2 14 02 FB | 	rdlong	arg02, objptr
0eea4     45 00 00 FF 
0eea8     70 E5 85 F1 | 	sub	objptr, ##35696
0eeac     00 12 06 F6 | 	mov	arg01, #0
0eeb0     00 16 06 F6 | 	mov	arg03, #0
0eeb4     34 A2 B1 FD | 	call	#__system___basic_print_string
0eeb8     00 12 06 F6 | 	mov	arg01, #0
0eebc     0A 14 06 F6 | 	mov	arg02, #10
0eec0     00 16 06 F6 | 	mov	arg03, #0
0eec4     CC A1 B1 FD | 	call	#__system___basic_print_char
0eec8     00 12 06 F6 | 	mov	arg01, #0
0eecc     D4 F1 B1 FD | 	call	#__system___getiolock_0625
0eed0     FD 00 68 FC | 	wrlong	#0, result1
0eed4     4A 00 00 FF 
0eed8     B4 E4 05 F1 | 	add	objptr, ##38068
0eedc     F2 12 02 FB | 	rdlong	arg01, objptr
0eee0     4A 00 00 FF 
0eee4     B4 E4 85 F1 | 	sub	objptr, ##38068
0eee8     94 9B B1 FD | 	call	#__system___chdir
0eeec     14 00 90 FD | 	jmp	#LR__1258
0eef0                 | LR__1257
0eef0     4A 00 00 FF 
0eef4     B4 E4 05 F1 | 	add	objptr, ##38068
0eef8     F2 2C 62 FC | 	wrlong	local04, objptr
0eefc     4A 00 00 FF 
0ef00     B4 E4 85 F1 | 	sub	objptr, ##38068
0ef04                 | LR__1258
0ef04                 | '   print "Current directory: ";currentdir$
0ef04     00 12 06 F6 | 	mov	arg01, #0
0ef08     98 F1 B1 FD | 	call	#__system___getiolock_0625
0ef0c     FD 12 02 F6 | 	mov	arg01, result1
0ef10     E0 94 B1 FD | 	call	#__system___lockmem
0ef14     C3 01 00 FF 
0ef18     C2 15 06 F6 | 	mov	arg02, ##@LR__6050
0ef1c     00 12 06 F6 | 	mov	arg01, #0
0ef20     00 16 06 F6 | 	mov	arg03, #0
0ef24     C4 A1 B1 FD | 	call	#__system___basic_print_string
0ef28     4A 00 00 FF 
0ef2c     B4 E4 05 F1 | 	add	objptr, ##38068
0ef30     F2 14 02 FB | 	rdlong	arg02, objptr
0ef34     4A 00 00 FF 
0ef38     B4 E4 85 F1 | 	sub	objptr, ##38068
0ef3c     00 12 06 F6 | 	mov	arg01, #0
0ef40     00 16 06 F6 | 	mov	arg03, #0
0ef44     A4 A1 B1 FD | 	call	#__system___basic_print_string
0ef48     00 12 06 F6 | 	mov	arg01, #0
0ef4c     0A 14 06 F6 | 	mov	arg02, #10
0ef50     00 16 06 F6 | 	mov	arg03, #0
0ef54     3C A1 B1 FD | 	call	#__system___basic_print_char
0ef58     00 12 06 F6 | 	mov	arg01, #0
0ef5c     44 F1 B1 FD | 	call	#__system___getiolock_0625
0ef60     FD 00 68 FC | 	wrlong	#0, result1
0ef64                 | LR__1259
0ef64     A7 F0 03 F6 | 	mov	ptra, fp
0ef68     B2 00 A0 FD | 	call	#popregs_
0ef6c                 | _do_cd_ret
0ef6c     2D 00 64 FD | 	ret
0ef70                 | 
0ef70                 | ' 
0ef70                 | ' '-------------------- changefreq
0ef70                 | ' 
0ef70                 | ' sub do_changefreq
0ef70                 | _do_changefreq
0ef70     04 4A 05 F6 | 	mov	COUNT_, #4
0ef74     A8 00 A0 FD | 	call	#pushregs_
0ef78     2C F0 07 F1 | 	add	ptra, #44
0ef7c     34 E9 BF FD | 	call	#_pop
0ef80     FF 14 02 F6 | 	mov	arg02, result3
0ef84     A7 FA 61 FC | 	wrlong	result1, fp
0ef88     04 4E 05 F1 | 	add	fp, #4
0ef8c     A7 FC 61 FC | 	wrlong	result2, fp
0ef90     04 4E 05 F1 | 	add	fp, #4
0ef94     A7 14 62 FC | 	wrlong	arg02, fp
0ef98     08 4E 85 F1 | 	sub	fp, #8
0ef9c     A7 12 02 F6 | 	mov	arg01, fp
0efa0     B0 EB BF FD | 	call	#_converttofloat
0efa4     FD 14 02 F6 | 	mov	arg02, result1
0efa8     28 4E 05 F1 | 	add	fp, #40
0efac     A7 14 62 FC | 	wrlong	arg02, fp
0efb0     28 4E 85 F1 | 	sub	fp, #40
0efb4     FC E8 BF FD | 	call	#_pop
0efb8     FF 14 02 F6 | 	mov	arg02, result3
0efbc     A7 FA 61 FC | 	wrlong	result1, fp
0efc0     04 4E 05 F1 | 	add	fp, #4
0efc4     A7 FC 61 FC | 	wrlong	result2, fp
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 14 62 FC | 	wrlong	arg02, fp
0efd0     08 4E 85 F1 | 	sub	fp, #8
0efd4     A7 12 02 F6 | 	mov	arg01, fp
0efd8     BC EA BF FD | 	call	#_converttoint
0efdc     FD 14 52 F6 | 	abs	arg02, result1 wc
0efe0     07 14 06 F5 | 	and	arg02, #7
0efe4     0A 15 82 F6 | 	negc	arg02, arg02
0efe8     0C 4E 05 F1 | 	add	fp, #12
0efec     A7 14 62 FC | 	wrlong	arg02, fp
0eff0     0A 13 02 F6 | 	mov	arg01, arg02
0eff4     03 12 66 F0 | 	shl	arg01, #3
0eff8     0A 13 82 F1 | 	sub	arg01, arg02
0effc     02 12 66 F0 | 	shl	arg01, #2
0f000     14 00 00 FF 
0f004     38 E5 05 F1 | 	add	objptr, ##10552
0f008     F2 12 02 F1 | 	add	arg01, objptr
0f00c     16 12 06 F1 | 	add	arg01, #22
0f010     09 15 E2 FA | 	rdword	arg02, arg01
0f014     14 4E 05 F1 | 	add	fp, #20
0f018     A7 14 62 FC | 	wrlong	arg02, fp
0f01c                 | ' amode=channels(channel).amode
0f01c                 | ' if amode>0 then
0f01c     20 4E 85 F1 | 	sub	fp, #32
0f020     01 14 56 F2 | 	cmps	arg02, #1 wc
0f024     14 00 00 FF 
0f028     38 E5 85 F1 | 	sub	objptr, ##10552
0f02c     38 02 90 CD |  if_b	jmp	#LR__1262
0f030     28 4E 05 F1 | 	add	fp, #40
0f034     A7 14 02 FB | 	rdlong	arg02, fp
0f038     28 4E 85 F1 | 	sub	fp, #40
0f03c     FC 16 20 FF 
0f040     54 12 06 F6 | 	mov	arg01, ##1076754516
0f044     FC D1 B1 FD | 	call	#__system____builtin_logbase
0f048     FD 26 02 F6 | 	mov	local01, result1
0f04c     1E 14 C6 F9 | 	decod	arg02, #30
0f050     FC 16 20 FF 
0f054     54 12 06 F6 | 	mov	arg01, ##1076754516
0f058     E8 D1 B1 FD | 	call	#__system____builtin_logbase
0f05c     FD 14 02 F6 | 	mov	arg02, result1
0f060     13 13 02 F6 | 	mov	arg01, local01
0f064     0C C4 B1 FD | 	call	#__system___float_div
0f068     FD 12 02 F6 | 	mov	arg01, result1
0f06c     00 14 06 F6 | 	mov	arg02, #0
0f070     C4 C6 B1 FD | 	call	#__system___float_tointeger
0f074     10 4E 05 F1 | 	add	fp, #16
0f078     A7 FA 61 FC | 	wrlong	result1, fp
0f07c     1E 26 C6 F9 | 	decod	local01, #30
0f080     FD 12 02 F6 | 	mov	arg01, result1
0f084     10 4E 05 F1 | 	add	fp, #16
0f088     A7 14 02 FB | 	rdlong	arg02, fp
0f08c     20 4E 85 F1 | 	sub	fp, #32
0f090     0A 13 02 F1 | 	add	arg01, arg02
0f094     09 13 52 F6 | 	abs	arg01, arg01 wc
0f098     1F 28 C6 C9 |  if_b	decod	local02, #31
0f09c     00 28 06 36 |  if_ae	mov	local02, #0
0f0a0     C8 BD B1 FD | 	call	#__system___float_fromuns
0f0a4     14 FB 61 F5 | 	xor	result1, local02
0f0a8     FD 14 02 F6 | 	mov	arg02, result1
0f0ac     13 13 02 F6 | 	mov	arg01, local01
0f0b0     C8 D0 B1 FD | 	call	#__system____builtin_powf
0f0b4     FD 12 02 F6 | 	mov	arg01, result1
0f0b8     01 14 06 F6 | 	mov	arg02, #1
0f0bc     78 C6 B1 FD | 	call	#__system___float_tointeger
0f0c0     14 4E 05 F1 | 	add	fp, #20
0f0c4     A7 FA 61 FC | 	wrlong	result1, fp
0f0c8                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0f0c8                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0f0c8     14 4E 85 F1 | 	sub	fp, #20
0f0cc     40 00 00 FF 
0f0d0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0f0d4     30 00 90 CD |  if_b	jmp	#LR__1260
0f0d8     14 4E 05 F1 | 	add	fp, #20
0f0dc     A7 26 02 FB | 	rdlong	local01, fp
0f0e0     13 27 52 F6 | 	abs	local01, local01 wc
0f0e4     0F 26 46 F0 | 	shr	local01, #15
0f0e8     13 27 82 F6 | 	negc	local01, local01
0f0ec     04 4E 05 F1 | 	add	fp, #4
0f0f0     A7 26 62 FC | 	wrlong	local01, fp
0f0f4     04 4E 85 F1 | 	sub	fp, #4
0f0f8     40 00 80 FF 
0f0fc     A7 00 68 FC | 	wrlong	##32768, fp
0f100     14 4E 85 F1 | 	sub	fp, #20
0f104     0C 00 90 FD | 	jmp	#LR__1261
0f108                 | LR__1260
0f108     18 4E 05 F1 | 	add	fp, #24
0f10c     A7 02 68 FC | 	wrlong	#1, fp
0f110     18 4E 85 F1 | 	sub	fp, #24
0f114                 | LR__1261
0f114     28 4E 05 F1 | 	add	fp, #40
0f118     A7 14 02 FB | 	rdlong	arg02, fp
0f11c     28 4E 85 F1 | 	sub	fp, #40
0f120     AA 2B 25 FF 
0f124     00 13 06 F6 | 	mov	arg01, ##1247237376
0f128     48 C3 B1 FD | 	call	#__system___float_div
0f12c     FD 26 02 F6 | 	mov	local01, result1
0f130     18 4E 05 F1 | 	add	fp, #24
0f134     A7 12 02 FB | 	rdlong	arg01, fp
0f138     18 4E 85 F1 | 	sub	fp, #24
0f13c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f140     1F 28 C6 C9 |  if_b	decod	local02, #31
0f144     00 28 06 36 |  if_ae	mov	local02, #0
0f148     20 BD B1 FD | 	call	#__system___float_fromuns
0f14c     14 FB 61 F5 | 	xor	result1, local02
0f150     FD 2A 02 F6 | 	mov	local03, result1
0f154     1E 2C C6 F9 | 	decod	local04, #30
0f158     12 12 06 F6 | 	mov	arg01, #18
0f15c     20 4E 05 F1 | 	add	fp, #32
0f160     A7 14 02 FB | 	rdlong	arg02, fp
0f164     0A 13 82 F1 | 	sub	arg01, arg02
0f168     10 4E 85 F1 | 	sub	fp, #16
0f16c     A7 14 02 FB | 	rdlong	arg02, fp
0f170     10 4E 85 F1 | 	sub	fp, #16
0f174     0A 13 82 F1 | 	sub	arg01, arg02
0f178     09 13 52 F6 | 	abs	arg01, arg01 wc
0f17c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f180     00 28 06 36 |  if_ae	mov	local02, #0
0f184     E4 BC B1 FD | 	call	#__system___float_fromuns
0f188     14 FB 61 F5 | 	xor	result1, local02
0f18c     FD 14 02 F6 | 	mov	arg02, result1
0f190     16 13 02 F6 | 	mov	arg01, local04
0f194     E4 CF B1 FD | 	call	#__system____builtin_powf
0f198     FD 14 02 F6 | 	mov	arg02, result1
0f19c     15 13 02 F6 | 	mov	arg01, local03
0f1a0     CC C0 B1 FD | 	call	#__system___float_mul
0f1a4     FD 14 02 F6 | 	mov	arg02, result1
0f1a8     13 13 02 F6 | 	mov	arg01, local01
0f1ac     C4 C2 B1 FD | 	call	#__system___float_div
0f1b0     FD 12 02 F6 | 	mov	arg01, result1
0f1b4     01 14 06 F6 | 	mov	arg02, #1
0f1b8     7C C5 B1 FD | 	call	#__system___float_tointeger
0f1bc     1C 4E 05 F1 | 	add	fp, #28
0f1c0     A7 FA 61 FC | 	wrlong	result1, fp
0f1c4     10 4E 85 F1 | 	sub	fp, #16
0f1c8     A7 2C 02 FB | 	rdlong	local04, fp
0f1cc     16 2B 02 F6 | 	mov	local03, local04
0f1d0     03 2A 66 F0 | 	shl	local03, #3
0f1d4     16 2B 82 F1 | 	sub	local03, local04
0f1d8     02 2A 66 F0 | 	shl	local03, #2
0f1dc     14 00 00 FF 
0f1e0     38 E5 05 F1 | 	add	objptr, ##10552
0f1e4     F2 2A 02 F1 | 	add	local03, objptr
0f1e8     AA 2B 25 FF 
0f1ec     00 2D 06 F6 | 	mov	local04, ##1247237376
0f1f0     0C 4E 85 F1 | 	sub	fp, #12
0f1f4     14 00 00 FF 
0f1f8     38 E5 85 F1 | 	sub	objptr, ##10552
0f1fc     FD 12 52 F6 | 	abs	arg01, result1 wc
0f200     1F 28 C6 C9 |  if_b	decod	local02, #31
0f204     00 28 06 36 |  if_ae	mov	local02, #0
0f208     60 BC B1 FD | 	call	#__system___float_fromuns
0f20c     14 FB 61 F5 | 	xor	result1, local02
0f210     FD 14 02 F6 | 	mov	arg02, result1
0f214     16 13 02 F6 | 	mov	arg01, local04
0f218     58 C2 B1 FD | 	call	#__system___float_div
0f21c     FD 2C 02 F6 | 	mov	local04, result1
0f220     14 4E 05 F1 | 	add	fp, #20
0f224     A7 12 02 FB | 	rdlong	arg01, fp
0f228     14 4E 85 F1 | 	sub	fp, #20
0f22c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f230     1F 28 C6 C9 |  if_b	decod	local02, #31
0f234     00 28 06 36 |  if_ae	mov	local02, #0
0f238     30 BC B1 FD | 	call	#__system___float_fromuns
0f23c     14 FB 61 F5 | 	xor	result1, local02
0f240     FD 12 02 F6 | 	mov	arg01, result1
0f244     00 40 24 FF 
0f248     00 14 06 F6 | 	mov	arg02, ##1216348160
0f24c     24 C2 B1 FD | 	call	#__system___float_div
0f250     FD 14 02 F6 | 	mov	arg02, result1
0f254     16 13 02 F6 | 	mov	arg01, local04
0f258     14 C0 B1 FD | 	call	#__system___float_mul
0f25c     18 2A 06 F1 | 	add	local03, #24
0f260     15 FB 61 FC | 	wrlong	result1, local03
0f264     F0 00 90 FD | 	jmp	#LR__1263
0f268                 | LR__1262
0f268     1C 4E 05 F1 | 	add	fp, #28
0f26c     A7 30 68 FC | 	wrlong	#24, fp
0f270     00 40 24 FF 
0f274     00 26 06 F6 | 	mov	local01, ##1216348160
0f278     0C 4E 05 F1 | 	add	fp, #12
0f27c     A7 12 02 FB | 	rdlong	arg01, fp
0f280     28 4E 85 F1 | 	sub	fp, #40
0f284     C7 07 24 FF 
0f288     00 14 06 F6 | 	mov	arg02, ##1208978944
0f28c     E4 C1 B1 FD | 	call	#__system___float_div
0f290     FD 14 02 F6 | 	mov	arg02, result1
0f294     13 13 02 F6 | 	mov	arg01, local01
0f298     D4 BF B1 FD | 	call	#__system___float_mul
0f29c     FD 12 02 F6 | 	mov	arg01, result1
0f2a0     01 14 06 F6 | 	mov	arg02, #1
0f2a4     90 C4 B1 FD | 	call	#__system___float_tointeger
0f2a8     14 4E 05 F1 | 	add	fp, #20
0f2ac     A7 FA 61 FC | 	wrlong	result1, fp
0f2b0     08 4E 85 F1 | 	sub	fp, #8
0f2b4     A7 2C 02 FB | 	rdlong	local04, fp
0f2b8     16 2B 02 F6 | 	mov	local03, local04
0f2bc     03 2A 66 F0 | 	shl	local03, #3
0f2c0     16 2B 82 F1 | 	sub	local03, local04
0f2c4     02 2A 66 F0 | 	shl	local03, #2
0f2c8     14 00 00 FF 
0f2cc     38 E5 05 F1 | 	add	objptr, ##10552
0f2d0     F2 2A 02 F1 | 	add	local03, objptr
0f2d4     AA 2B 25 FF 
0f2d8     00 2D 06 F6 | 	mov	local04, ##1247237376
0f2dc     10 4E 05 F1 | 	add	fp, #16
0f2e0     A7 12 02 FB | 	rdlong	arg01, fp
0f2e4     1C 4E 85 F1 | 	sub	fp, #28
0f2e8     14 00 00 FF 
0f2ec     38 E5 85 F1 | 	sub	objptr, ##10552
0f2f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f2f4     1F 28 C6 C9 |  if_b	decod	local02, #31
0f2f8     00 28 06 36 |  if_ae	mov	local02, #0
0f2fc     6C BB B1 FD | 	call	#__system___float_fromuns
0f300     14 FB 61 F5 | 	xor	result1, local02
0f304     FD 14 02 F6 | 	mov	arg02, result1
0f308     16 13 02 F6 | 	mov	arg01, local04
0f30c     64 C1 B1 FD | 	call	#__system___float_div
0f310     FD 2C 02 F6 | 	mov	local04, result1
0f314     14 4E 05 F1 | 	add	fp, #20
0f318     A7 12 02 FB | 	rdlong	arg01, fp
0f31c     14 4E 85 F1 | 	sub	fp, #20
0f320     09 13 52 F6 | 	abs	arg01, arg01 wc
0f324     1F 28 C6 C9 |  if_b	decod	local02, #31
0f328     00 28 06 36 |  if_ae	mov	local02, #0
0f32c     3C BB B1 FD | 	call	#__system___float_fromuns
0f330     14 FB 61 F5 | 	xor	result1, local02
0f334     FD 12 02 F6 | 	mov	arg01, result1
0f338     00 40 24 FF 
0f33c     00 14 06 F6 | 	mov	arg02, ##1216348160
0f340     30 C1 B1 FD | 	call	#__system___float_div
0f344     FD 14 02 F6 | 	mov	arg02, result1
0f348     16 13 02 F6 | 	mov	arg01, local04
0f34c     20 BF B1 FD | 	call	#__system___float_mul
0f350     18 2A 06 F1 | 	add	local03, #24
0f354     15 FB 61 FC | 	wrlong	result1, local03
0f358                 | LR__1263
0f358     14 4E 05 F1 | 	add	fp, #20
0f35c     A7 26 02 FB | 	rdlong	local01, fp
0f360     10 26 66 F0 | 	shl	local01, #16
0f364     08 4E 05 F1 | 	add	fp, #8
0f368     A7 2C 02 FB | 	rdlong	local04, fp
0f36c     16 27 02 F1 | 	add	local01, local04
0f370     08 4E 05 F1 | 	add	fp, #8
0f374     A7 26 62 FC | 	wrlong	local01, fp
0f378                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0f378     37 00 00 FF 
0f37c     30 E4 05 F1 | 	add	objptr, ##28208
0f380     F2 12 02 FB | 	rdlong	arg01, objptr
0f384     37 00 00 FF 
0f388     30 E4 85 F1 | 	sub	objptr, ##28208
0f38c     18 4E 85 F1 | 	sub	fp, #24
0f390     A7 2C 02 FB | 	rdlong	local04, fp
0f394     0C 4E 85 F1 | 	sub	fp, #12
0f398     06 2C 66 F0 | 	shl	local04, #6
0f39c     16 13 02 F1 | 	add	arg01, local04
0f3a0     08 12 06 F1 | 	add	arg01, #8
0f3a4     09 FB 01 FB | 	rdlong	result1, arg01
0f3a8     1B FA 2D F4 | 	testbn	result1, #27 wz
0f3ac     3C 00 90 5D |  if_ne	jmp	#LR__1264
0f3b0     37 00 00 FF 
0f3b4     30 E4 05 F1 | 	add	objptr, ##28208
0f3b8     F2 12 02 FB | 	rdlong	arg01, objptr
0f3bc     37 00 00 FF 
0f3c0     30 E4 85 F1 | 	sub	objptr, ##28208
0f3c4     0C 4E 05 F1 | 	add	fp, #12
0f3c8     A7 2C 02 FB | 	rdlong	local04, fp
0f3cc     06 2C 66 F0 | 	shl	local04, #6
0f3d0     16 13 02 F1 | 	add	arg01, local04
0f3d4     18 12 06 F1 | 	add	arg01, #24
0f3d8     18 4E 05 F1 | 	add	fp, #24
0f3dc     A7 14 02 FB | 	rdlong	arg02, fp
0f3e0     24 4E 85 F1 | 	sub	fp, #36
0f3e4     09 15 62 FC | 	wrlong	arg02, arg01
0f3e8     80 00 90 FD | 	jmp	#LR__1265
0f3ec                 | LR__1264
0f3ec     37 00 00 FF 
0f3f0     30 E4 05 F1 | 	add	objptr, ##28208
0f3f4     F2 26 02 FB | 	rdlong	local01, objptr
0f3f8     37 00 00 FF 
0f3fc     30 E4 85 F1 | 	sub	objptr, ##28208
0f400     0C 4E 05 F1 | 	add	fp, #12
0f404     A7 2C 02 FB | 	rdlong	local04, fp
0f408     06 2C 66 F0 | 	shl	local04, #6
0f40c     16 27 02 F1 | 	add	local01, local04
0f410     18 26 06 F1 | 	add	local01, #24
0f414     1C 4E 05 F1 | 	add	fp, #28
0f418     A7 14 02 FB | 	rdlong	arg02, fp
0f41c     28 4E 85 F1 | 	sub	fp, #40
0f420     3E 2C 25 FF 
0f424     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f428     48 C0 B1 FD | 	call	#__system___float_div
0f42c     FD 12 02 F6 | 	mov	arg01, result1
0f430     01 14 06 F6 | 	mov	arg02, #1
0f434     00 C3 B1 FD | 	call	#__system___float_tointeger
0f438     13 FB 51 FC | 	wrword	result1, local01
0f43c     37 00 00 FF 
0f440     30 E4 05 F1 | 	add	objptr, ##28208
0f444     F2 12 02 FB | 	rdlong	arg01, objptr
0f448     37 00 00 FF 
0f44c     30 E4 85 F1 | 	sub	objptr, ##28208
0f450     0C 4E 05 F1 | 	add	fp, #12
0f454     A7 2C 02 FB | 	rdlong	local04, fp
0f458     0C 4E 85 F1 | 	sub	fp, #12
0f45c     06 2C 66 F0 | 	shl	local04, #6
0f460     16 13 02 F1 | 	add	arg01, local04
0f464     1A 12 06 F1 | 	add	arg01, #26
0f468     09 01 5A FC | 	wrword	#256, arg01
0f46c                 | LR__1265
0f46c     A7 F0 03 F6 | 	mov	ptra, fp
0f470     B2 00 A0 FD | 	call	#popregs_
0f474                 | _do_changefreq_ret
0f474     2D 00 64 FD | 	ret
0f478                 | 
0f478                 | ' 
0f478                 | ' '-------------------- changepan
0f478                 | ' 
0f478                 | ' sub do_changepan
0f478                 | _do_changepan
0f478     01 4A 05 F6 | 	mov	COUNT_, #1
0f47c     A8 00 A0 FD | 	call	#pushregs_
0f480     14 F0 07 F1 | 	add	ptra, #20
0f484     2C E4 BF FD | 	call	#_pop
0f488     A7 FA 61 FC | 	wrlong	result1, fp
0f48c     04 4E 05 F1 | 	add	fp, #4
0f490     A7 FC 61 FC | 	wrlong	result2, fp
0f494     04 4E 05 F1 | 	add	fp, #4
0f498     A7 FE 61 FC | 	wrlong	result3, fp
0f49c     08 4E 85 F1 | 	sub	fp, #8
0f4a0     00 00 23 FF 
0f4a4     00 26 06 F6 | 	mov	local01, ##1174405120
0f4a8     A7 12 02 F6 | 	mov	arg01, fp
0f4ac     A4 E6 BF FD | 	call	#_converttofloat
0f4b0     FD 14 02 F6 | 	mov	arg02, result1
0f4b4     13 13 02 F6 | 	mov	arg01, local01
0f4b8     B4 BD B1 FD | 	call	#__system___float_mul
0f4bc     FD 12 02 F6 | 	mov	arg01, result1
0f4c0     01 14 06 F6 | 	mov	arg02, #1
0f4c4     70 C2 B1 FD | 	call	#__system___float_tointeger
0f4c8     0D 26 C6 F9 | 	decod	local01, #13
0f4cc     FD 26 02 F1 | 	add	local01, result1
0f4d0     10 4E 05 F1 | 	add	fp, #16
0f4d4     A7 26 62 FC | 	wrlong	local01, fp
0f4d8                 | ' 
0f4d8                 | ' t1=pop()
0f4d8                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f4d8                 | ' if pan<0 then pan=0
0f4d8     10 4E 85 F1 | 	sub	fp, #16
0f4dc     00 26 56 F2 | 	cmps	local01, #0 wc
0f4e0     10 4E 05 C1 |  if_b	add	fp, #16
0f4e4     A7 00 68 CC |  if_b	wrlong	#0, fp
0f4e8     10 4E 85 C1 |  if_b	sub	fp, #16
0f4ec                 | ' if pan>16384 then pan=16384
0f4ec     10 4E 05 F1 | 	add	fp, #16
0f4f0     A7 26 02 FB | 	rdlong	local01, fp
0f4f4     10 4E 85 F1 | 	sub	fp, #16
0f4f8     20 00 00 FF 
0f4fc     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f500     10 4E 05 31 |  if_ae	add	fp, #16
0f504     20 00 80 3F 
0f508     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f50c     10 4E 85 31 |  if_ae	sub	fp, #16
0f510     A0 E3 BF FD | 	call	#_pop
0f514     FF 26 02 F6 | 	mov	local01, result3
0f518     A7 FA 61 FC | 	wrlong	result1, fp
0f51c     04 4E 05 F1 | 	add	fp, #4
0f520     A7 FC 61 FC | 	wrlong	result2, fp
0f524     04 4E 05 F1 | 	add	fp, #4
0f528     A7 26 62 FC | 	wrlong	local01, fp
0f52c     08 4E 85 F1 | 	sub	fp, #8
0f530     A7 12 02 F6 | 	mov	arg01, fp
0f534     60 E5 BF FD | 	call	#_converttoint
0f538     FD 26 52 F6 | 	abs	local01, result1 wc
0f53c     07 26 06 F5 | 	and	local01, #7
0f540     13 27 82 F6 | 	negc	local01, local01
0f544     0C 4E 05 F1 | 	add	fp, #12
0f548     A7 26 62 FC | 	wrlong	local01, fp
0f54c     37 00 00 FF 
0f550     30 E4 05 F1 | 	add	objptr, ##28208
0f554     F2 12 02 FB | 	rdlong	arg01, objptr
0f558     37 00 00 FF 
0f55c     30 E4 85 F1 | 	sub	objptr, ##28208
0f560     06 26 66 F0 | 	shl	local01, #6
0f564     13 13 02 F1 | 	add	arg01, local01
0f568     16 12 06 F1 | 	add	arg01, #22
0f56c     04 4E 05 F1 | 	add	fp, #4
0f570     A7 14 02 FB | 	rdlong	arg02, fp
0f574     10 4E 85 F1 | 	sub	fp, #16
0f578     09 15 52 FC | 	wrword	arg02, arg01
0f57c     A7 F0 03 F6 | 	mov	ptra, fp
0f580     B2 00 A0 FD | 	call	#popregs_
0f584                 | _do_changepan_ret
0f584     2D 00 64 FD | 	ret
0f588                 | 
0f588                 | ' 
0f588                 | ' '-------------------- changevol
0f588                 | ' 
0f588                 | ' sub do_changevol
0f588                 | _do_changevol
0f588     00 4A 05 F6 | 	mov	COUNT_, #0
0f58c     A8 00 A0 FD | 	call	#pushregs_
0f590     14 F0 07 F1 | 	add	ptra, #20
0f594     1C E3 BF FD | 	call	#_pop
0f598     FF 14 02 F6 | 	mov	arg02, result3
0f59c     A7 FA 61 FC | 	wrlong	result1, fp
0f5a0     04 4E 05 F1 | 	add	fp, #4
0f5a4     A7 FC 61 FC | 	wrlong	result2, fp
0f5a8     04 4E 05 F1 | 	add	fp, #4
0f5ac     A7 14 62 FC | 	wrlong	arg02, fp
0f5b0     08 4E 85 F1 | 	sub	fp, #8
0f5b4     A7 12 02 F6 | 	mov	arg01, fp
0f5b8     98 E5 BF FD | 	call	#_converttofloat
0f5bc     FD 12 02 F6 | 	mov	arg01, result1
0f5c0     00 3D 22 FF 
0f5c4     00 14 06 F6 | 	mov	arg02, ##1148846080
0f5c8     A4 BC B1 FD | 	call	#__system___float_mul
0f5cc     FD 12 02 F6 | 	mov	arg01, result1
0f5d0     01 14 06 F6 | 	mov	arg02, #1
0f5d4     60 C1 B1 FD | 	call	#__system___float_tointeger
0f5d8     FD 14 52 F6 | 	abs	arg02, result1 wc
0f5dc     0D 14 46 F7 | 	zerox	arg02, #13
0f5e0     0A 15 82 F6 | 	negc	arg02, arg02
0f5e4     10 4E 05 F1 | 	add	fp, #16
0f5e8     A7 14 62 FC | 	wrlong	arg02, fp
0f5ec     10 4E 85 F1 | 	sub	fp, #16
0f5f0     C0 E2 BF FD | 	call	#_pop
0f5f4     FF 14 02 F6 | 	mov	arg02, result3
0f5f8     A7 FA 61 FC | 	wrlong	result1, fp
0f5fc     04 4E 05 F1 | 	add	fp, #4
0f600     A7 FC 61 FC | 	wrlong	result2, fp
0f604     04 4E 05 F1 | 	add	fp, #4
0f608     A7 14 62 FC | 	wrlong	arg02, fp
0f60c     08 4E 85 F1 | 	sub	fp, #8
0f610     A7 12 02 F6 | 	mov	arg01, fp
0f614     80 E4 BF FD | 	call	#_converttoint
0f618     FD 14 52 F6 | 	abs	arg02, result1 wc
0f61c     07 14 06 F5 | 	and	arg02, #7
0f620     0A 15 82 F6 | 	negc	arg02, arg02
0f624     0C 4E 05 F1 | 	add	fp, #12
0f628     A7 14 62 FC | 	wrlong	arg02, fp
0f62c     37 00 00 FF 
0f630     30 E4 05 F1 | 	add	objptr, ##28208
0f634     F2 12 02 FB | 	rdlong	arg01, objptr
0f638     37 00 00 FF 
0f63c     30 E4 85 F1 | 	sub	objptr, ##28208
0f640     06 14 66 F0 | 	shl	arg02, #6
0f644     0A 13 02 F1 | 	add	arg01, arg02
0f648     14 12 06 F1 | 	add	arg01, #20
0f64c     04 4E 05 F1 | 	add	fp, #4
0f650     A7 14 02 FB | 	rdlong	arg02, fp
0f654     10 4E 85 F1 | 	sub	fp, #16
0f658     09 15 52 FC | 	wrword	arg02, arg01
0f65c     A7 F0 03 F6 | 	mov	ptra, fp
0f660     B2 00 A0 FD | 	call	#popregs_
0f664                 | _do_changevol_ret
0f664     2D 00 64 FD | 	ret
0f668                 | 
0f668                 | ' 
0f668                 | ' '-------------------- changewav
0f668                 | ' 
0f668                 | ' sub do_changewav
0f668                 | _do_changewav
0f668     00 4A 05 F6 | 	mov	COUNT_, #0
0f66c     A8 00 A0 FD | 	call	#pushregs_
0f670     14 F0 07 F1 | 	add	ptra, #20
0f674     3C E2 BF FD | 	call	#_pop
0f678     FF 14 02 F6 | 	mov	arg02, result3
0f67c     A7 FA 61 FC | 	wrlong	result1, fp
0f680     04 4E 05 F1 | 	add	fp, #4
0f684     A7 FC 61 FC | 	wrlong	result2, fp
0f688     04 4E 05 F1 | 	add	fp, #4
0f68c     A7 14 62 FC | 	wrlong	arg02, fp
0f690     08 4E 85 F1 | 	sub	fp, #8
0f694     A7 12 02 F6 | 	mov	arg01, fp
0f698     FC E3 BF FD | 	call	#_converttoint
0f69c     10 4E 05 F1 | 	add	fp, #16
0f6a0     A7 FA 61 FC | 	wrlong	result1, fp
0f6a4                 | ' 
0f6a4                 | ' t1=pop()
0f6a4                 | ' wave=converttoint(t1)
0f6a4                 | ' if wave<0 then wave=0
0f6a4     FD 14 02 F6 | 	mov	arg02, result1
0f6a8     10 4E 85 F1 | 	sub	fp, #16
0f6ac     00 14 56 F2 | 	cmps	arg02, #0 wc
0f6b0     10 4E 05 C1 |  if_b	add	fp, #16
0f6b4     A7 00 68 CC |  if_b	wrlong	#0, fp
0f6b8     10 4E 85 C1 |  if_b	sub	fp, #16
0f6bc     F4 E1 BF FD | 	call	#_pop
0f6c0     FF 14 02 F6 | 	mov	arg02, result3
0f6c4     A7 FA 61 FC | 	wrlong	result1, fp
0f6c8     04 4E 05 F1 | 	add	fp, #4
0f6cc     A7 FC 61 FC | 	wrlong	result2, fp
0f6d0     04 4E 05 F1 | 	add	fp, #4
0f6d4     A7 14 62 FC | 	wrlong	arg02, fp
0f6d8     08 4E 85 F1 | 	sub	fp, #8
0f6dc     A7 12 02 F6 | 	mov	arg01, fp
0f6e0     B4 E3 BF FD | 	call	#_converttoint
0f6e4     FD 14 52 F6 | 	abs	arg02, result1 wc
0f6e8     07 14 06 F5 | 	and	arg02, #7
0f6ec     0A 15 82 F6 | 	negc	arg02, arg02
0f6f0     0C 4E 05 F1 | 	add	fp, #12
0f6f4     A7 14 62 FC | 	wrlong	arg02, fp
0f6f8                 | ' if wave <32 then 
0f6f8     04 4E 05 F1 | 	add	fp, #4
0f6fc     A7 14 02 FB | 	rdlong	arg02, fp
0f700     10 4E 85 F1 | 	sub	fp, #16
0f704     20 14 56 F2 | 	cmps	arg02, #32 wc
0f708     48 00 90 3D |  if_ae	jmp	#LR__1270
0f70c     37 00 00 FF 
0f710     30 E4 05 F1 | 	add	objptr, ##28208
0f714     F2 12 02 FB | 	rdlong	arg01, objptr
0f718     37 00 00 FF 
0f71c     30 E4 85 F1 | 	sub	objptr, ##28208
0f720     0C 4E 05 F1 | 	add	fp, #12
0f724     A7 14 02 FB | 	rdlong	arg02, fp
0f728     06 14 66 F0 | 	shl	arg02, #6
0f72c     0A 13 02 F1 | 	add	arg01, arg02
0f730     08 12 06 F1 | 	add	arg01, #8
0f734     04 4E 05 F1 | 	add	fp, #4
0f738     A7 14 02 FB | 	rdlong	arg02, fp
0f73c     10 4E 85 F1 | 	sub	fp, #16
0f740     0B 14 66 F0 | 	shl	arg02, #11
0f744     00 00 40 FF 
0f748     00 14 06 F1 | 	add	arg02, ##-2147483648
0f74c     09 15 62 FC | 	wrlong	arg02, arg01
0f750     34 00 90 FD | 	jmp	#LR__1271
0f754                 | LR__1270
0f754     37 00 00 FF 
0f758     30 E4 05 F1 | 	add	objptr, ##28208
0f75c     F2 12 02 FB | 	rdlong	arg01, objptr
0f760     37 00 00 FF 
0f764     30 E4 85 F1 | 	sub	objptr, ##28208
0f768     0C 4E 05 F1 | 	add	fp, #12
0f76c     A7 14 02 FB | 	rdlong	arg02, fp
0f770     0C 4E 85 F1 | 	sub	fp, #12
0f774     06 14 66 F0 | 	shl	arg02, #6
0f778     0A 13 02 F1 | 	add	arg01, arg02
0f77c     08 12 06 F1 | 	add	arg01, #8
0f780     00 00 C4 FF 
0f784     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f788                 | LR__1271
0f788     A7 F0 03 F6 | 	mov	ptra, fp
0f78c     B2 00 A0 FD | 	call	#popregs_
0f790                 | _do_changewav_ret
0f790     2D 00 64 FD | 	ret
0f794                 | 
0f794                 | ' 
0f794                 | ' '-------------------- chr$
0f794                 | ' 
0f794                 | ' sub do_chr
0f794                 | _do_chr
0f794     01 4A 05 F6 | 	mov	COUNT_, #1
0f798     A8 00 A0 FD | 	call	#pushregs_
0f79c     14 F0 07 F1 | 	add	ptra, #20
0f7a0     4A 00 00 FF 
0f7a4     A0 E4 05 F1 | 	add	objptr, ##38048
0f7a8     F2 26 02 FB | 	rdlong	local01, objptr
0f7ac     13 17 02 F6 | 	mov	arg03, local01
0f7b0     01 16 66 F0 | 	shl	arg03, #1
0f7b4     13 17 02 F1 | 	add	arg03, local01
0f7b8     02 16 66 F0 | 	shl	arg03, #2
0f7bc     03 00 00 FF 
0f7c0     04 E4 85 F1 | 	sub	objptr, ##1540
0f7c4     F2 16 02 F1 | 	add	arg03, objptr
0f7c8     0B 17 02 FB | 	rdlong	arg03, arg03
0f7cc     0C 4E 05 F1 | 	add	fp, #12
0f7d0     A7 16 62 FC | 	wrlong	arg03, fp
0f7d4                 | ' 
0f7d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f7d4                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f7d4     0C 4E 85 F1 | 	sub	fp, #12
0f7d8     02 16 16 F2 | 	cmp	arg03, #2 wc
0f7dc     47 00 00 FF 
0f7e0     9C E4 85 F1 | 	sub	objptr, ##36508
0f7e4     0C 4E 05 C1 |  if_b	add	fp, #12
0f7e8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f7ec     0C 4E 85 C1 |  if_b	sub	fp, #12
0f7f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f7f4     00 12 06 F6 | 	mov	arg01, #0
0f7f8     A8 E8 B1 FD | 	call	#__system___getiolock_0625
0f7fc     FD 12 02 F6 | 	mov	arg01, result1
0f800     F0 8B B1 FD | 	call	#__system___lockmem
0f804     C3 01 00 FF 
0f808     D6 15 06 F6 | 	mov	arg02, ##@LR__6051
0f80c     00 12 06 F6 | 	mov	arg01, #0
0f810     00 16 06 F6 | 	mov	arg03, #0
0f814     D4 98 B1 FD | 	call	#__system___basic_print_string
0f818     00 12 06 F6 | 	mov	arg01, #0
0f81c     84 E8 B1 FD | 	call	#__system___getiolock_0625
0f820     FD 00 68 FC | 	wrlong	#0, result1
0f824     27 12 06 F6 | 	mov	arg01, #39
0f828     00 14 06 F6 | 	mov	arg02, #0
0f82c     6C 51 B1 FD | 	call	#_printerror
0f830     54 00 90 FD | 	jmp	#LR__1281
0f834                 | LR__1280
0f834     7C E0 BF FD | 	call	#_pop
0f838     FF 26 02 F6 | 	mov	local01, result3
0f83c     A7 FA 61 FC | 	wrlong	result1, fp
0f840     04 4E 05 F1 | 	add	fp, #4
0f844     A7 FC 61 FC | 	wrlong	result2, fp
0f848     04 4E 05 F1 | 	add	fp, #4
0f84c     A7 26 62 FC | 	wrlong	local01, fp
0f850     08 4E 85 F1 | 	sub	fp, #8
0f854     A7 12 02 F6 | 	mov	arg01, fp
0f858     3C E2 BF FD | 	call	#_converttoint
0f85c     10 4E 05 F1 | 	add	fp, #16
0f860     A7 FA 61 FC | 	wrlong	result1, fp
0f864     FD 12 02 F6 | 	mov	arg01, result1
0f868     10 4E 85 F1 | 	sub	fp, #16
0f86c     C8 AD B1 FD | 	call	#__system__Chr_S
0f870     A7 FA 61 FC | 	wrlong	result1, fp
0f874     08 4E 05 F1 | 	add	fp, #8
0f878     A7 3E 68 FC | 	wrlong	#31, fp
0f87c     08 4E 85 F1 | 	sub	fp, #8
0f880     A7 12 02 F6 | 	mov	arg01, fp
0f884     C4 E0 BF FD | 	call	#_push
0f888                 | LR__1281
0f888     A7 F0 03 F6 | 	mov	ptra, fp
0f88c     B2 00 A0 FD | 	call	#popregs_
0f890                 | _do_chr_ret
0f890     2D 00 64 FD | 	ret
0f894                 | 
0f894                 | ' 
0f894                 | ' '-------------------- circle
0f894                 | ' 
0f894                 | ' sub do_circle
0f894                 | _do_circle
0f894     02 4A 05 F6 | 	mov	COUNT_, #2
0f898     A8 00 A0 FD | 	call	#pushregs_
0f89c     24 F0 07 F1 | 	add	ptra, #36
0f8a0     10 E0 BF FD | 	call	#_pop
0f8a4     FD 18 02 F6 | 	mov	arg04, result1
0f8a8     FE 16 02 F6 | 	mov	arg03, result2
0f8ac     FF 14 02 F6 | 	mov	arg02, result3
0f8b0     18 4E 05 F1 | 	add	fp, #24
0f8b4     A7 18 62 FC | 	wrlong	arg04, fp
0f8b8     04 4E 05 F1 | 	add	fp, #4
0f8bc     A7 16 62 FC | 	wrlong	arg03, fp
0f8c0     04 4E 05 F1 | 	add	fp, #4
0f8c4     A7 14 62 FC | 	wrlong	arg02, fp
0f8c8     20 4E 85 F1 | 	sub	fp, #32
0f8cc     E4 DF BF FD | 	call	#_pop
0f8d0     FD 18 02 F6 | 	mov	arg04, result1
0f8d4     FE 16 02 F6 | 	mov	arg03, result2
0f8d8     FF 26 02 F6 | 	mov	local01, result3
0f8dc     0C 4E 05 F1 | 	add	fp, #12
0f8e0     A7 18 62 FC | 	wrlong	arg04, fp
0f8e4     04 4E 05 F1 | 	add	fp, #4
0f8e8     A7 16 62 FC | 	wrlong	arg03, fp
0f8ec     04 4E 05 F1 | 	add	fp, #4
0f8f0     A7 26 62 FC | 	wrlong	local01, fp
0f8f4     14 4E 85 F1 | 	sub	fp, #20
0f8f8     B8 DF BF FD | 	call	#_pop
0f8fc     A7 FA 61 FC | 	wrlong	result1, fp
0f900     04 4E 05 F1 | 	add	fp, #4
0f904     A7 FC 61 FC | 	wrlong	result2, fp
0f908     04 4E 05 F1 | 	add	fp, #4
0f90c     A7 FE 61 FC | 	wrlong	result3, fp
0f910                 | ' 
0f910                 | ' t3=pop()
0f910                 | ' t2=pop()
0f910                 | ' t1=pop()
0f910                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f910     FF 18 02 F6 | 	mov	arg04, result3
0f914     08 4E 85 F1 | 	sub	fp, #8
0f918     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f91c     08 4E 05 51 |  if_ne	add	fp, #8
0f920     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f924     08 4E 85 51 |  if_ne	sub	fp, #8
0f928     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f92c     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f930     14 4E 05 F1 | 	add	fp, #20
0f934     A7 26 02 FB | 	rdlong	local01, fp
0f938     14 4E 85 F1 | 	sub	fp, #20
0f93c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f940     14 4E 05 51 |  if_ne	add	fp, #20
0f944     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f948     14 4E 85 51 |  if_ne	sub	fp, #20
0f94c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f950     58 00 90 5D |  if_ne	jmp	#LR__1290
0f954     20 4E 05 F1 | 	add	fp, #32
0f958     A7 26 02 FB | 	rdlong	local01, fp
0f95c     20 4E 85 F1 | 	sub	fp, #32
0f960     1C 26 0E F2 | 	cmp	local01, #28 wz
0f964     20 4E 05 51 |  if_ne	add	fp, #32
0f968     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f96c     20 4E 85 51 |  if_ne	sub	fp, #32
0f970     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f974     34 00 90 5D |  if_ne	jmp	#LR__1290
0f978     A7 12 02 FB | 	rdlong	arg01, fp
0f97c     0C 4E 05 F1 | 	add	fp, #12
0f980     A7 14 02 FB | 	rdlong	arg02, fp
0f984     0C 4E 05 F1 | 	add	fp, #12
0f988     A7 16 02 FB | 	rdlong	arg03, fp
0f98c     18 4E 85 F1 | 	sub	fp, #24
0f990     37 00 00 FF 
0f994     48 E4 05 F1 | 	add	objptr, ##28232
0f998     F2 18 02 FB | 	rdlong	arg04, objptr
0f99c     37 00 00 FF 
0f9a0     48 E4 85 F1 | 	sub	objptr, ##28232
0f9a4     E8 68 B1 FD | 	call	#_hg010b_spin2_circle
0f9a8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f9a8     54 00 90 FD | 	jmp	#LR__1291
0f9ac                 | LR__1290
0f9ac     A7 12 02 F6 | 	mov	arg01, fp
0f9b0     E4 E0 BF FD | 	call	#_converttoint
0f9b4     FD 26 02 F6 | 	mov	local01, result1
0f9b8     0C 4E 05 F1 | 	add	fp, #12
0f9bc     A7 12 02 F6 | 	mov	arg01, fp
0f9c0     0C 4E 85 F1 | 	sub	fp, #12
0f9c4     D0 E0 BF FD | 	call	#_converttoint
0f9c8     FD 28 02 F6 | 	mov	local02, result1
0f9cc     18 4E 05 F1 | 	add	fp, #24
0f9d0     A7 12 02 F6 | 	mov	arg01, fp
0f9d4     18 4E 85 F1 | 	sub	fp, #24
0f9d8     BC E0 BF FD | 	call	#_converttoint
0f9dc     FD 16 02 F6 | 	mov	arg03, result1
0f9e0     37 00 00 FF 
0f9e4     48 E4 05 F1 | 	add	objptr, ##28232
0f9e8     F2 18 02 FB | 	rdlong	arg04, objptr
0f9ec     37 00 00 FF 
0f9f0     48 E4 85 F1 | 	sub	objptr, ##28232
0f9f4     13 13 02 F6 | 	mov	arg01, local01
0f9f8     14 15 02 F6 | 	mov	arg02, local02
0f9fc     90 68 B1 FD | 	call	#_hg010b_spin2_circle
0fa00                 | LR__1291
0fa00     A7 F0 03 F6 | 	mov	ptra, fp
0fa04     B2 00 A0 FD | 	call	#popregs_
0fa08                 | _do_circle_ret
0fa08     2D 00 64 FD | 	ret
0fa0c                 | 
0fa0c                 | ' 
0fa0c                 | ' '-------------------- click
0fa0c                 | ' 
0fa0c                 | ' sub do_click
0fa0c                 | _do_click
0fa0c     A4 DE BF FD | 	call	#_pop
0fa10     00 FA 4D F2 | 	cmps	result1, #0 wz
0fa14                 | ' 
0fa14                 | ' t1=pop()
0fa14                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0fa14     50 00 00 AF 
0fa18     5C E5 05 A1 |  if_e	add	objptr, ##41308
0fa1c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0fa20     50 00 00 FF 
0fa24     5C E5 C5 F3 | 	sumz	objptr, ##41308
0fa28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0fa2c     50 00 00 5F 
0fa30     5C E5 85 51 |  if_ne	sub	objptr, ##41308
0fa34                 | _do_click_ret
0fa34     2D 00 64 FD | 	ret
0fa38                 | 
0fa38                 | ' 
0fa38                 | ' '-------------------- close
0fa38                 | ' 
0fa38                 | ' sub do_close
0fa38                 | _do_close
0fa38     03 4A 05 F6 | 	mov	COUNT_, #3
0fa3c     A8 00 A0 FD | 	call	#pushregs_
0fa40     70 DE BF FD | 	call	#_pop
0fa44     FD 26 02 F6 | 	mov	local01, result1
0fa48     FF 16 02 F6 | 	mov	arg03, result3
0fa4c     FE 28 02 F6 | 	mov	local02, result2
0fa50     0B 2B 02 F6 | 	mov	local03, arg03
0fa54                 | ' 
0fa54                 | ' numpar=compiledline(lineptr_e).result.uresult
0fa54                 | ' t1=pop()
0fa54                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0fa54     2C 2A 0E F2 | 	cmp	local03, #44 wz
0fa58     44 00 90 AD |  if_e	jmp	#LR__1300
0fa5c     00 12 06 F6 | 	mov	arg01, #0
0fa60     40 E6 B1 FD | 	call	#__system___getiolock_0625
0fa64     FD 12 02 F6 | 	mov	arg01, result1
0fa68     88 89 B1 FD | 	call	#__system___lockmem
0fa6c     C3 01 00 FF 
0fa70     DD 15 06 F6 | 	mov	arg02, ##@LR__6052
0fa74     00 12 06 F6 | 	mov	arg01, #0
0fa78     00 16 06 F6 | 	mov	arg03, #0
0fa7c     6C 96 B1 FD | 	call	#__system___basic_print_string
0fa80     00 12 06 F6 | 	mov	arg01, #0
0fa84     0A 14 06 F6 | 	mov	arg02, #10
0fa88     00 16 06 F6 | 	mov	arg03, #0
0fa8c     04 96 B1 FD | 	call	#__system___basic_print_char
0fa90     00 12 06 F6 | 	mov	arg01, #0
0fa94     0C E6 B1 FD | 	call	#__system___getiolock_0625
0fa98     FD 00 68 FC | 	wrlong	#0, result1
0fa9c     08 00 90 FD | 	jmp	#LR__1301
0faa0                 | LR__1300
0faa0                 | ' channel  = t1.result.iresult
0faa0                 | ' close #channel
0faa0     13 13 02 F6 | 	mov	arg01, local01
0faa4     AC DC B1 FD | 	call	#__system__close
0faa8                 | LR__1301
0faa8     A7 F0 03 F6 | 	mov	ptra, fp
0faac     B2 00 A0 FD | 	call	#popregs_
0fab0                 | _do_close_ret
0fab0     2D 00 64 FD | 	ret
0fab4                 | 
0fab4                 | ' 
0fab4                 | ' '-------------------- cls
0fab4                 | ' 
0fab4                 | ' sub do_cls
0fab4                 | _do_cls
0fab4     37 00 00 FF 
0fab8     5C E4 05 F1 | 	add	objptr, ##28252
0fabc     F2 12 02 FB | 	rdlong	arg01, objptr
0fac0     04 E4 85 F1 | 	sub	objptr, #4
0fac4     F2 14 02 FB | 	rdlong	arg02, objptr
0fac8     37 00 00 FF 
0facc     58 E4 85 F1 | 	sub	objptr, ##28248
0fad0     C4 6C B1 FD | 	call	#_hg010b_spin2_cls
0fad4     37 00 00 FF 
0fad8     5C E4 05 F1 | 	add	objptr, ##28252
0fadc     F2 14 02 FB | 	rdlong	arg02, objptr
0fae0     14 E4 85 F1 | 	sub	objptr, #20
0fae4     F2 14 62 FC | 	wrlong	arg02, objptr
0fae8     37 00 00 FF 
0faec     48 E4 85 F1 | 	sub	objptr, ##28232
0faf0                 | _do_cls_ret
0faf0     2D 00 64 FD | 	ret
0faf4                 | 
0faf4                 | ' 
0faf4                 | ' sub do_coginit
0faf4                 | _do_coginit
0faf4     00 4A 05 F6 | 	mov	COUNT_, #0
0faf8     A8 00 A0 FD | 	call	#pushregs_
0fafc     08 00 00 FF 
0fb00     1C F0 07 F1 | 	add	ptra, ##4124
0fb04     4A 00 00 FF 
0fb08     A0 E4 05 F1 | 	add	objptr, ##38048
0fb0c     F2 FA 01 FB | 	rdlong	result1, objptr
0fb10     FD FC 01 F6 | 	mov	result2, result1
0fb14     01 FC 65 F0 | 	shl	result2, #1
0fb18     FD FC 01 F1 | 	add	result2, result1
0fb1c     02 FC 65 F0 | 	shl	result2, #2
0fb20     03 00 00 FF 
0fb24     04 E4 85 F1 | 	sub	objptr, ##1540
0fb28     F2 FC 01 F1 | 	add	result2, objptr
0fb2c     FE FC 01 FB | 	rdlong	result2, result2
0fb30     A7 FC 61 FC | 	wrlong	result2, fp
0fb34                 | ' numpar=compiledline(lineptr_e).result.uresult
0fb34                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0fb34     02 FC 55 F2 | 	cmps	result2, #2 wc
0fb38     47 00 00 FF 
0fb3c     9C E4 85 F1 | 	sub	objptr, ##36508
0fb40     0C 00 90 CD |  if_b	jmp	#LR__1310
0fb44     A7 FA 01 FB | 	rdlong	result1, fp
0fb48     04 FA 55 F2 | 	cmps	result1, #4 wc
0fb4c     40 00 90 CD |  if_b	jmp	#LR__1311
0fb50                 | LR__1310
0fb50     00 12 06 F6 | 	mov	arg01, #0
0fb54     4C E5 B1 FD | 	call	#__system___getiolock_0625
0fb58     FD 12 02 F6 | 	mov	arg01, result1
0fb5c     94 88 B1 FD | 	call	#__system___lockmem
0fb60     C3 01 00 FF 
0fb64     EF 15 06 F6 | 	mov	arg02, ##@LR__6053
0fb68     00 12 06 F6 | 	mov	arg01, #0
0fb6c     00 16 06 F6 | 	mov	arg03, #0
0fb70     78 95 B1 FD | 	call	#__system___basic_print_string
0fb74     00 12 06 F6 | 	mov	arg01, #0
0fb78     28 E5 B1 FD | 	call	#__system___getiolock_0625
0fb7c     FD 00 68 FC | 	wrlong	#0, result1
0fb80     27 12 06 F6 | 	mov	arg01, #39
0fb84     00 14 06 F6 | 	mov	arg02, #0
0fb88     10 4E B1 FD | 	call	#_printerror
0fb8c     94 01 90 FD | 	jmp	#LR__1315
0fb90                 | LR__1311
0fb90     20 DD BF FD | 	call	#_pop
0fb94     FF 16 02 F6 | 	mov	arg03, result3
0fb98     08 00 00 FF 
0fb9c     10 4E 05 F1 | 	add	fp, ##4112
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     04 4E 05 F1 | 	add	fp, #4
0fba8     A7 FC 61 FC | 	wrlong	result2, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 16 62 FC | 	wrlong	arg03, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     08 00 00 FF 
0fbc0     10 4E 85 F1 | 	sub	fp, ##4112
0fbc4     D0 DE BF FD | 	call	#_converttoint
0fbc8     FD 16 02 F6 | 	mov	arg03, result1
0fbcc     04 4E 05 F1 | 	add	fp, #4
0fbd0     A7 16 62 FC | 	wrlong	arg03, fp
0fbd4     04 4E 85 F1 | 	sub	fp, #4
0fbd8     D8 DC BF FD | 	call	#_pop
0fbdc     FF 16 02 F6 | 	mov	arg03, result3
0fbe0     08 00 00 FF 
0fbe4     10 4E 05 F1 | 	add	fp, ##4112
0fbe8     A7 FA 61 FC | 	wrlong	result1, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 FC 61 FC | 	wrlong	result2, fp
0fbf4     04 4E 05 F1 | 	add	fp, #4
0fbf8     A7 16 62 FC | 	wrlong	arg03, fp
0fbfc     08 4E 85 F1 | 	sub	fp, #8
0fc00     A7 12 02 F6 | 	mov	arg01, fp
0fc04     08 00 00 FF 
0fc08     10 4E 85 F1 | 	sub	fp, ##4112
0fc0c     88 DE BF FD | 	call	#_converttoint
0fc10     08 4E 05 F1 | 	add	fp, #8
0fc14     A7 FA 61 FC | 	wrlong	result1, fp
0fc18     08 4E 85 F1 | 	sub	fp, #8
0fc1c                 | ' t1=pop()
0fc1c                 | ' ptra_val=converttoint(t1)
0fc1c                 | ' t1=pop()
0fc1c                 | ' addrval=converttoint(t1)
0fc1c                 | ' if numpar=3 then 
0fc1c     A7 FA 01 FB | 	rdlong	result1, fp
0fc20     03 FA 0D F2 | 	cmp	result1, #3 wz
0fc24     48 00 90 5D |  if_ne	jmp	#LR__1312
0fc28     88 DC BF FD | 	call	#_pop
0fc2c     FF 16 02 F6 | 	mov	arg03, result3
0fc30     08 00 00 FF 
0fc34     10 4E 05 F1 | 	add	fp, ##4112
0fc38     A7 FA 61 FC | 	wrlong	result1, fp
0fc3c     04 4E 05 F1 | 	add	fp, #4
0fc40     A7 FC 61 FC | 	wrlong	result2, fp
0fc44     04 4E 05 F1 | 	add	fp, #4
0fc48     A7 16 62 FC | 	wrlong	arg03, fp
0fc4c     08 4E 85 F1 | 	sub	fp, #8
0fc50     A7 12 02 F6 | 	mov	arg01, fp
0fc54     08 00 00 FF 
0fc58     10 4E 85 F1 | 	sub	fp, ##4112
0fc5c     38 DE BF FD | 	call	#_converttoint
0fc60     0C 4E 05 F1 | 	add	fp, #12
0fc64     A7 FA 61 FC | 	wrlong	result1, fp
0fc68     0C 4E 85 F1 | 	sub	fp, #12
0fc6c     0C 00 90 FD | 	jmp	#LR__1313
0fc70                 | LR__1312
0fc70     0C 4E 05 F1 | 	add	fp, #12
0fc74     A7 20 68 FC | 	wrlong	#16, fp
0fc78     0C 4E 85 F1 | 	sub	fp, #12
0fc7c                 | LR__1313
0fc7c                 | '     
0fc7c                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0fc7c     08 4E 05 F1 | 	add	fp, #8
0fc80     A7 16 02 FB | 	rdlong	arg03, fp
0fc84     08 4E 85 F1 | 	sub	fp, #8
0fc88     00 04 00 FF 
0fc8c     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0fc90     40 00 90 CD |  if_b	jmp	#LR__1314
0fc94     10 4E 05 F1 | 	add	fp, #16
0fc98     A7 12 02 F6 | 	mov	arg01, fp
0fc9c     08 4E 85 F1 | 	sub	fp, #8
0fca0     A7 14 02 FB | 	rdlong	arg02, fp
0fca4     08 4E 85 F1 | 	sub	fp, #8
0fca8     0C 16 C6 F9 | 	decod	arg03, #12
0fcac     0B 00 00 FF 
0fcb0     CC E4 05 F1 | 	add	objptr, ##5836
0fcb4     98 7A B1 FD | 	call	#_psram_spin2_read1
0fcb8     0B 00 00 FF 
0fcbc     CC E4 85 F1 | 	sub	objptr, ##5836
0fcc0     10 4E 05 F1 | 	add	fp, #16
0fcc4     A7 FA 01 F6 | 	mov	result1, fp
0fcc8     08 4E 85 F1 | 	sub	fp, #8
0fccc     A7 FA 61 FC | 	wrlong	result1, fp
0fcd0     08 4E 85 F1 | 	sub	fp, #8
0fcd4                 | LR__1314
0fcd4     0C 4E 05 F1 | 	add	fp, #12
0fcd8     A7 FA 01 FB | 	rdlong	result1, fp
0fcdc     04 4E 85 F1 | 	sub	fp, #4
0fce0     A7 14 02 FB | 	rdlong	arg02, fp
0fce4     04 4E 85 F1 | 	sub	fp, #4
0fce8     A7 16 02 FB | 	rdlong	arg03, fp
0fcec                 | ' 
0fcec                 | '  asm
0fcec     28 16 62 FD | 	setq	arg03
0fcf0     0A FB F1 FC | 	coginit	result1, arg02 wc
0fcf4                 | '  
0fcf4                 | ' return cog 
0fcf4     08 4E 05 F1 | 	add	fp, #8
0fcf8     A7 FA 61 FC | 	wrlong	result1, fp
0fcfc     08 00 00 FF 
0fd00     04 4E 05 F1 | 	add	fp, ##4100
0fd04     A7 FA 61 FC | 	wrlong	result1, fp
0fd08     08 4E 05 F1 | 	add	fp, #8
0fd0c     A7 38 68 FC | 	wrlong	#28, fp
0fd10     08 4E 85 F1 | 	sub	fp, #8
0fd14     A7 12 02 F6 | 	mov	arg01, fp
0fd18     08 00 00 FF 
0fd1c     10 4E 85 F1 | 	sub	fp, ##4112
0fd20     28 DC BF FD | 	call	#_push
0fd24                 | LR__1315
0fd24     A7 F0 03 F6 | 	mov	ptra, fp
0fd28     B2 00 A0 FD | 	call	#popregs_
0fd2c                 | _do_coginit_ret
0fd2c     2D 00 64 FD | 	ret
0fd30                 | 
0fd30                 | ' 
0fd30                 | ' '-------------------- cogstop
0fd30                 | ' 
0fd30                 | ' sub do_cogstop
0fd30                 | _do_cogstop
0fd30     00 4A 05 F6 | 	mov	COUNT_, #0
0fd34     A8 00 A0 FD | 	call	#pushregs_
0fd38     0C F0 07 F1 | 	add	ptra, #12
0fd3c     74 DB BF FD | 	call	#_pop
0fd40     A7 FA 61 FC | 	wrlong	result1, fp
0fd44     04 4E 05 F1 | 	add	fp, #4
0fd48     A7 FC 61 FC | 	wrlong	result2, fp
0fd4c     04 4E 05 F1 | 	add	fp, #4
0fd50     A7 FE 61 FC | 	wrlong	result3, fp
0fd54     08 4E 85 F1 | 	sub	fp, #8
0fd58     A7 12 02 F6 | 	mov	arg01, fp
0fd5c     38 DD BF FD | 	call	#_converttoint
0fd60     03 FA 61 FD | 	cogstop	result1
0fd64     A7 F0 03 F6 | 	mov	ptra, fp
0fd68     B2 00 A0 FD | 	call	#popregs_
0fd6c                 | _do_cogstop_ret
0fd6c     2D 00 64 FD | 	ret
0fd70                 | 
0fd70                 | ' 
0fd70                 | ' '-------------------- color
0fd70                 | ' 
0fd70                 | ' sub do_color
0fd70                 | _do_color
0fd70     03 4A 05 F6 | 	mov	COUNT_, #3
0fd74     A8 00 A0 FD | 	call	#pushregs_
0fd78     38 DB BF FD | 	call	#_pop
0fd7c     FD 26 02 F6 | 	mov	local01, result1
0fd80     FE 28 02 F6 | 	mov	local02, result2
0fd84     FF 2A 02 F6 | 	mov	local03, result3
0fd88     37 00 00 FF 
0fd8c     48 E4 05 F1 | 	add	objptr, ##28232
0fd90     F2 26 62 FC | 	wrlong	local01, objptr
0fd94     37 00 00 FF 
0fd98     48 E4 85 F1 | 	sub	objptr, ##28232
0fd9c     A7 F0 03 F6 | 	mov	ptra, fp
0fda0     B2 00 A0 FD | 	call	#popregs_
0fda4                 | _do_color_ret
0fda4     2D 00 64 FD | 	ret
0fda8                 | 
0fda8                 | ' 
0fda8                 | ' '-------------------- copy
0fda8                 | ' 
0fda8                 | ' sub do_copy
0fda8                 | _do_copy
0fda8     08 4A 05 F6 | 	mov	COUNT_, #8
0fdac     A8 00 A0 FD | 	call	#pushregs_
0fdb0     00 DB BF FD | 	call	#_pop
0fdb4     FD 26 02 F6 | 	mov	local01, result1
0fdb8     FE 1A 02 F6 | 	mov	arg05, result2
0fdbc     FF 18 02 F6 | 	mov	arg04, result3
0fdc0     0D 29 02 F6 | 	mov	local02, arg05
0fdc4     0C 2B 02 F6 | 	mov	local03, arg04
0fdc8     E8 DA BF FD | 	call	#_pop
0fdcc     FE 1A 02 F6 | 	mov	arg05, result2
0fdd0     FF 18 02 F6 | 	mov	arg04, result3
0fdd4     FD 2C 02 F6 | 	mov	local04, result1
0fdd8     0D 2F 02 F6 | 	mov	local05, arg05
0fddc     0C 31 02 F6 | 	mov	local06, arg04
0fde0                 | ' 
0fde0                 | ' t1=pop()
0fde0                 | ' t2=pop()
0fde0                 | ' if t2.result_type=result_string2 then 
0fde0     2B 30 0E F2 | 	cmp	local06, #43 wz
0fde4     10 00 90 5D |  if_ne	jmp	#LR__1320
0fde8     16 13 02 F6 | 	mov	arg01, local04
0fdec     3C DC BF FD | 	call	#_convertstring
0fdf0     FD 32 02 F6 | 	mov	local07, result1
0fdf4     2C 00 90 FD | 	jmp	#LR__1322
0fdf8                 | LR__1320
0fdf8     1F 30 0E F2 | 	cmp	local06, #31 wz
0fdfc     16 33 02 A6 |  if_e	mov	local07, local04
0fe00     20 00 90 AD |  if_e	jmp	#LR__1321
0fe04     50 00 00 FF 
0fe08     10 E5 05 F1 | 	add	objptr, ##41232
0fe0c     F2 14 02 FB | 	rdlong	arg02, objptr
0fe10     50 00 00 FF 
0fe14     10 E5 85 F1 | 	sub	objptr, ##41232
0fe18     0F 12 06 F6 | 	mov	arg01, #15
0fe1c     7C 4B B1 FD | 	call	#_printerror
0fe20                 | '   printerror(15,runheader(0)) : return
0fe20     58 03 90 FD | 	jmp	#LR__1329
0fe24                 | LR__1321
0fe24                 | LR__1322
0fe24                 | ' if t1.result_type=result_string2 then 
0fe24     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fe28     10 00 90 5D |  if_ne	jmp	#LR__1323
0fe2c     13 13 02 F6 | 	mov	arg01, local01
0fe30     F8 DB BF FD | 	call	#_convertstring
0fe34     FD 34 02 F6 | 	mov	local08, result1
0fe38     2C 00 90 FD | 	jmp	#LR__1325
0fe3c                 | LR__1323
0fe3c     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fe40     13 35 02 A6 |  if_e	mov	local08, local01
0fe44     20 00 90 AD |  if_e	jmp	#LR__1324
0fe48     50 00 00 FF 
0fe4c     10 E5 05 F1 | 	add	objptr, ##41232
0fe50     F2 14 02 FB | 	rdlong	arg02, objptr
0fe54     50 00 00 FF 
0fe58     10 E5 85 F1 | 	sub	objptr, ##41232
0fe5c     0F 12 06 F6 | 	mov	arg01, #15
0fe60     38 4B B1 FD | 	call	#_printerror
0fe64                 | '   printerror(15,runheader(0)) : return
0fe64     14 03 90 FD | 	jmp	#LR__1329
0fe68                 | LR__1324
0fe68                 | LR__1325
0fe68                 | ' 
0fe68                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fe68     09 12 06 F6 | 	mov	arg01, #9
0fe6c     19 15 02 F6 | 	mov	arg02, local07
0fe70     00 16 06 F6 | 	mov	arg03, #0
0fe74     80 91 B1 FD | 	call	#__system___basic_open_string
0fe78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fe7c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fe80     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fe84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fe88     52 00 00 FF 
0fe8c     30 E5 05 F1 | 	add	objptr, ##42288
0fe90     F2 FA 61 FC | 	wrlong	result1, objptr
0fe94     52 00 00 FF 
0fe98     30 E5 85 F1 | 	sub	objptr, ##42288
0fe9c     0C 01 90 AD |  if_e	jmp	#LR__1326
0fea0     00 12 06 F6 | 	mov	arg01, #0
0fea4     FC E1 B1 FD | 	call	#__system___getiolock_0625
0fea8     FD 12 02 F6 | 	mov	arg01, result1
0feac     44 85 B1 FD | 	call	#__system___lockmem
0feb0     C3 01 00 FF 
0feb4     F9 15 06 F6 | 	mov	arg02, ##@LR__6054
0feb8     00 12 06 F6 | 	mov	arg01, #0
0febc     00 16 06 F6 | 	mov	arg03, #0
0fec0     28 92 B1 FD | 	call	#__system___basic_print_string
0fec4     52 00 00 FF 
0fec8     30 E5 05 F1 | 	add	objptr, ##42288
0fecc     F2 14 02 FB | 	rdlong	arg02, objptr
0fed0     52 00 00 FF 
0fed4     30 E5 85 F1 | 	sub	objptr, ##42288
0fed8     00 12 06 F6 | 	mov	arg01, #0
0fedc     00 16 06 F6 | 	mov	arg03, #0
0fee0     0A 18 06 F6 | 	mov	arg04, #10
0fee4     48 92 B1 FD | 	call	#__system___basic_print_integer
0fee8     C4 01 00 FF 
0feec     09 14 06 F6 | 	mov	arg02, ##@LR__6055
0fef0     00 12 06 F6 | 	mov	arg01, #0
0fef4     00 16 06 F6 | 	mov	arg03, #0
0fef8     F0 91 B1 FD | 	call	#__system___basic_print_string
0fefc     50 00 00 FF 
0ff00     10 E5 05 F1 | 	add	objptr, ##41232
0ff04     F2 14 02 FB | 	rdlong	arg02, objptr
0ff08     50 00 00 FF 
0ff0c     10 E5 85 F1 | 	sub	objptr, ##41232
0ff10     00 12 06 F6 | 	mov	arg01, #0
0ff14     00 16 06 F6 | 	mov	arg03, #0
0ff18     0A 18 06 F6 | 	mov	arg04, #10
0ff1c     50 92 B1 FD | 	call	#__system___basic_print_unsigned
0ff20     C4 01 00 FF 
0ff24     13 14 06 F6 | 	mov	arg02, ##@LR__6056
0ff28     00 12 06 F6 | 	mov	arg01, #0
0ff2c     00 16 06 F6 | 	mov	arg03, #0
0ff30     B8 91 B1 FD | 	call	#__system___basic_print_string
0ff34     00 34 06 F6 | 	mov	local08, #0
0ff38     52 00 00 FF 
0ff3c     30 E5 05 F1 | 	add	objptr, ##42288
0ff40     F2 12 02 FB | 	rdlong	arg01, objptr
0ff44     52 00 00 FF 
0ff48     30 E5 85 F1 | 	sub	objptr, ##42288
0ff4c     34 AE B1 FD | 	call	#__system___strerror
0ff50     FD 14 02 F6 | 	mov	arg02, result1
0ff54     1A 13 02 F6 | 	mov	arg01, local08
0ff58     00 16 06 F6 | 	mov	arg03, #0
0ff5c     8C 91 B1 FD | 	call	#__system___basic_print_string
0ff60     C4 01 00 FF 
0ff64     16 14 06 F6 | 	mov	arg02, ##@LR__6057
0ff68     00 12 06 F6 | 	mov	arg01, #0
0ff6c     00 16 06 F6 | 	mov	arg03, #0
0ff70     78 91 B1 FD | 	call	#__system___basic_print_string
0ff74     00 12 06 F6 | 	mov	arg01, #0
0ff78     19 15 02 F6 | 	mov	arg02, local07
0ff7c     00 16 06 F6 | 	mov	arg03, #0
0ff80     68 91 B1 FD | 	call	#__system___basic_print_string
0ff84     00 12 06 F6 | 	mov	arg01, #0
0ff88     0A 14 06 F6 | 	mov	arg02, #10
0ff8c     00 16 06 F6 | 	mov	arg03, #0
0ff90     00 91 B1 FD | 	call	#__system___basic_print_char
0ff94     00 12 06 F6 | 	mov	arg01, #0
0ff98     08 E1 B1 FD | 	call	#__system___getiolock_0625
0ff9c     FD 00 68 FC | 	wrlong	#0, result1
0ffa0     09 12 06 F6 | 	mov	arg01, #9
0ffa4     AC D7 B1 FD | 	call	#__system__close
0ffa8     D0 01 90 FD | 	jmp	#LR__1329
0ffac                 | LR__1326
0ffac                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0ffac     08 12 06 F6 | 	mov	arg01, #8
0ffb0     1A 15 02 F6 | 	mov	arg02, local08
0ffb4     0D 16 06 F6 | 	mov	arg03, #13
0ffb8     3C 90 B1 FD | 	call	#__system___basic_open_string
0ffbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ffc0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ffc4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ffc8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ffcc     52 00 00 FF 
0ffd0     30 E5 05 F1 | 	add	objptr, ##42288
0ffd4     F2 FA 61 FC | 	wrlong	result1, objptr
0ffd8     52 00 00 FF 
0ffdc     30 E5 85 F1 | 	sub	objptr, ##42288
0ffe0     0C 01 90 AD |  if_e	jmp	#LR__1327
0ffe4     00 12 06 F6 | 	mov	arg01, #0
0ffe8     B8 E0 B1 FD | 	call	#__system___getiolock_0625
0ffec     FD 12 02 F6 | 	mov	arg01, result1
0fff0     00 84 B1 FD | 	call	#__system___lockmem
0fff4     C4 01 00 FF 
0fff8     24 14 06 F6 | 	mov	arg02, ##@LR__6058
0fffc     00 12 06 F6 | 	mov	arg01, #0
10000     00 16 06 F6 | 	mov	arg03, #0
10004     E4 90 B1 FD | 	call	#__system___basic_print_string
10008     52 00 00 FF 
1000c     30 E5 05 F1 | 	add	objptr, ##42288
10010     F2 14 02 FB | 	rdlong	arg02, objptr
10014     52 00 00 FF 
10018     30 E5 85 F1 | 	sub	objptr, ##42288
1001c     00 12 06 F6 | 	mov	arg01, #0
10020     00 16 06 F6 | 	mov	arg03, #0
10024     0A 18 06 F6 | 	mov	arg04, #10
10028     04 91 B1 FD | 	call	#__system___basic_print_integer
1002c     C4 01 00 FF 
10030     34 14 06 F6 | 	mov	arg02, ##@LR__6059
10034     00 12 06 F6 | 	mov	arg01, #0
10038     00 16 06 F6 | 	mov	arg03, #0
1003c     AC 90 B1 FD | 	call	#__system___basic_print_string
10040     50 00 00 FF 
10044     10 E5 05 F1 | 	add	objptr, ##41232
10048     F2 14 02 FB | 	rdlong	arg02, objptr
1004c     50 00 00 FF 
10050     10 E5 85 F1 | 	sub	objptr, ##41232
10054     00 12 06 F6 | 	mov	arg01, #0
10058     00 16 06 F6 | 	mov	arg03, #0
1005c     0A 18 06 F6 | 	mov	arg04, #10
10060     0C 91 B1 FD | 	call	#__system___basic_print_unsigned
10064     C4 01 00 FF 
10068     3E 14 06 F6 | 	mov	arg02, ##@LR__6060
1006c     00 12 06 F6 | 	mov	arg01, #0
10070     00 16 06 F6 | 	mov	arg03, #0
10074     74 90 B1 FD | 	call	#__system___basic_print_string
10078     00 32 06 F6 | 	mov	local07, #0
1007c     52 00 00 FF 
10080     30 E5 05 F1 | 	add	objptr, ##42288
10084     F2 12 02 FB | 	rdlong	arg01, objptr
10088     52 00 00 FF 
1008c     30 E5 85 F1 | 	sub	objptr, ##42288
10090     F0 AC B1 FD | 	call	#__system___strerror
10094     FD 14 02 F6 | 	mov	arg02, result1
10098     19 13 02 F6 | 	mov	arg01, local07
1009c     00 16 06 F6 | 	mov	arg03, #0
100a0     48 90 B1 FD | 	call	#__system___basic_print_string
100a4     C4 01 00 FF 
100a8     41 14 06 F6 | 	mov	arg02, ##@LR__6061
100ac     00 12 06 F6 | 	mov	arg01, #0
100b0     00 16 06 F6 | 	mov	arg03, #0
100b4     34 90 B1 FD | 	call	#__system___basic_print_string
100b8     00 12 06 F6 | 	mov	arg01, #0
100bc     1A 15 02 F6 | 	mov	arg02, local08
100c0     00 16 06 F6 | 	mov	arg03, #0
100c4     24 90 B1 FD | 	call	#__system___basic_print_string
100c8     00 12 06 F6 | 	mov	arg01, #0
100cc     0A 14 06 F6 | 	mov	arg02, #10
100d0     00 16 06 F6 | 	mov	arg03, #0
100d4     BC 8F B1 FD | 	call	#__system___basic_print_char
100d8     00 12 06 F6 | 	mov	arg01, #0
100dc     C4 DF B1 FD | 	call	#__system___getiolock_0625
100e0     FD 00 68 FC | 	wrlong	#0, result1
100e4     08 12 06 F6 | 	mov	arg01, #8
100e8     68 D6 B1 FD | 	call	#__system__close
100ec     8C 00 90 FD | 	jmp	#LR__1329
100f0                 | LR__1327
100f0                 | ' 
100f0                 | ' do
100f0                 | LR__1328
100f0                 | '   get #9,,block(0),1024,r
100f0     4E 00 00 FF 
100f4     D4 E4 05 F1 | 	add	objptr, ##40148
100f8     F2 16 02 F6 | 	mov	arg03, objptr
100fc     4E 00 00 FF 
10100     D4 E4 85 F1 | 	sub	objptr, ##40148
10104     09 12 06 F6 | 	mov	arg01, #9
10108     00 14 06 F6 | 	mov	arg02, #0
1010c     0A 18 C6 F9 | 	decod	arg04, #10
10110     01 1A 06 F6 | 	mov	arg05, #1
10114     50 91 B1 FD | 	call	#__system___basic_get
10118     52 00 00 FF 
1011c     68 E5 05 F1 | 	add	objptr, ##42344
10120     F2 FA 61 FC | 	wrlong	result1, objptr
10124                 | '   put #8,,block(0),r
10124     04 00 00 FF 
10128     94 E4 85 F1 | 	sub	objptr, ##2196
1012c     F2 16 02 F6 | 	mov	arg03, objptr
10130     FD 18 02 F6 | 	mov	arg04, result1
10134     4E 00 00 FF 
10138     D4 E4 85 F1 | 	sub	objptr, ##40148
1013c     08 12 06 F6 | 	mov	arg01, #8
10140     00 14 06 F6 | 	mov	arg02, #0
10144     01 1A 06 F6 | 	mov	arg05, #1
10148     B0 90 B1 FD | 	call	#__system___basic_put
1014c     52 00 00 FF 
10150     68 E5 05 F1 | 	add	objptr, ##42344
10154     F2 34 02 FB | 	rdlong	local08, objptr
10158     52 00 00 FF 
1015c     68 E5 85 F1 | 	sub	objptr, ##42344
10160     02 00 00 FF 
10164     00 34 0E F2 | 	cmp	local08, ##1024 wz
10168     84 FF 9F AD |  if_e	jmp	#LR__1328
1016c                 | ' close #8
1016c     08 12 06 F6 | 	mov	arg01, #8
10170     E0 D5 B1 FD | 	call	#__system__close
10174                 | ' close #9
10174     09 12 06 F6 | 	mov	arg01, #9
10178     D8 D5 B1 FD | 	call	#__system__close
1017c                 | LR__1329
1017c     A7 F0 03 F6 | 	mov	ptra, fp
10180     B2 00 A0 FD | 	call	#popregs_
10184                 | _do_copy_ret
10184     2D 00 64 FD | 	ret
10188                 | 
10188                 | ' 
10188                 | ' '-------------------- cos
10188                 | ' 
10188                 | ' sub do_cos
10188                 | _do_cos
10188     01 4A 05 F6 | 	mov	COUNT_, #1
1018c     A8 00 A0 FD | 	call	#pushregs_
10190     10 F0 07 F1 | 	add	ptra, #16
10194     4A 00 00 FF 
10198     A0 E4 05 F1 | 	add	objptr, ##38048
1019c     F2 26 02 FB | 	rdlong	local01, objptr
101a0     13 17 02 F6 | 	mov	arg03, local01
101a4     01 16 66 F0 | 	shl	arg03, #1
101a8     13 17 02 F1 | 	add	arg03, local01
101ac     02 16 66 F0 | 	shl	arg03, #2
101b0     03 00 00 FF 
101b4     04 E4 85 F1 | 	sub	objptr, ##1540
101b8     F2 16 02 F1 | 	add	arg03, objptr
101bc     0B 17 02 FB | 	rdlong	arg03, arg03
101c0     0C 4E 05 F1 | 	add	fp, #12
101c4     A7 16 62 FC | 	wrlong	arg03, fp
101c8                 | ' 
101c8                 | ' numpar=compiledline(lineptr_e).result.uresult
101c8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
101c8     0C 4E 85 F1 | 	sub	fp, #12
101cc     02 16 16 F2 | 	cmp	arg03, #2 wc
101d0     47 00 00 FF 
101d4     9C E4 85 F1 | 	sub	objptr, ##36508
101d8     0C 4E 05 C1 |  if_b	add	fp, #12
101dc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
101e0     0C 4E 85 C1 |  if_b	sub	fp, #12
101e4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
101e8     00 12 06 F6 | 	mov	arg01, #0
101ec     B4 DE B1 FD | 	call	#__system___getiolock_0625
101f0     FD 12 02 F6 | 	mov	arg01, result1
101f4     FC 81 B1 FD | 	call	#__system___lockmem
101f8     C4 01 00 FF 
101fc     4F 14 06 F6 | 	mov	arg02, ##@LR__6062
10200     00 12 06 F6 | 	mov	arg01, #0
10204     00 16 06 F6 | 	mov	arg03, #0
10208     E0 8E B1 FD | 	call	#__system___basic_print_string
1020c     00 12 06 F6 | 	mov	arg01, #0
10210     90 DE B1 FD | 	call	#__system___getiolock_0625
10214     FD 00 68 FC | 	wrlong	#0, result1
10218     27 12 06 F6 | 	mov	arg01, #39
1021c     00 14 06 F6 | 	mov	arg02, #0
10220     78 47 B1 FD | 	call	#_printerror
10224     78 00 90 FD | 	jmp	#LR__1331
10228                 | LR__1330
10228     88 D6 BF FD | 	call	#_pop
1022c     A7 FA 61 FC | 	wrlong	result1, fp
10230     04 4E 05 F1 | 	add	fp, #4
10234     A7 FC 61 FC | 	wrlong	result2, fp
10238     04 4E 05 F1 | 	add	fp, #4
1023c     A7 FE 61 FC | 	wrlong	result3, fp
10240     08 4E 85 F1 | 	sub	fp, #8
10244     52 00 00 FF 
10248     00 E5 05 F1 | 	add	objptr, ##42240
1024c     F2 26 02 FB | 	rdlong	local01, objptr
10250     52 00 00 FF 
10254     00 E5 85 F1 | 	sub	objptr, ##42240
10258     A7 12 02 F6 | 	mov	arg01, fp
1025c     F4 D8 BF FD | 	call	#_converttofloat
10260     FD 14 02 F6 | 	mov	arg02, result1
10264     13 13 02 F6 | 	mov	arg01, local01
10268     04 B0 B1 FD | 	call	#__system___float_mul
1026c     FD 14 02 F6 | 	mov	arg02, result1
10270     87 E4 1F FF 
10274     DB 13 06 F6 | 	mov	arg01, ##1070141403
10278     1F 14 E6 F4 | 	bitnot	arg02, #31
1027c     20 AC B1 FD | 	call	#__system___float_add
10280     FD 12 02 F6 | 	mov	arg01, result1
10284     4C B9 B1 FD | 	call	#__system____builtin_sinf
10288     A7 FA 61 FC | 	wrlong	result1, fp
1028c     08 4E 05 F1 | 	add	fp, #8
10290     A7 3C 68 FC | 	wrlong	#30, fp
10294     08 4E 85 F1 | 	sub	fp, #8
10298     A7 12 02 F6 | 	mov	arg01, fp
1029c     AC D6 BF FD | 	call	#_push
102a0                 | LR__1331
102a0     A7 F0 03 F6 | 	mov	ptra, fp
102a4     B2 00 A0 FD | 	call	#popregs_
102a8                 | _do_cos_ret
102a8     2D 00 64 FD | 	ret
102ac                 | 
102ac                 | ' 
102ac                 | ' '-------------------- cursor
102ac                 | ' 
102ac                 | ' sub do_cursor
102ac                 | _do_cursor
102ac     04 D6 BF FD | 	call	#_pop
102b0     00 FA 4D F2 | 	cmps	result1, #0 wz
102b4                 | ' t1=pop()
102b4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
102b4     14 00 90 5D |  if_ne	jmp	#LR__1340
102b8     11 12 06 F6 | 	mov	arg01, #17
102bc     00 14 06 F6 | 	mov	arg02, #0
102c0     00 16 06 F6 | 	mov	arg03, #0
102c4     3C 57 B1 FD | 	call	#_hg010b_spin2_setspritesize
102c8     10 00 90 FD | 	jmp	#LR__1341
102cc                 | LR__1340
102cc     11 12 06 F6 | 	mov	arg01, #17
102d0     08 14 06 F6 | 	mov	arg02, #8
102d4     10 16 06 F6 | 	mov	arg03, #16
102d8     28 57 B1 FD | 	call	#_hg010b_spin2_setspritesize
102dc                 | LR__1341
102dc                 | _do_cursor_ret
102dc     2D 00 64 FD | 	ret
102e0                 | 
102e0                 | ' 
102e0                 | ' '-------------------- defchar
102e0                 | ' 
102e0                 | ' sub do_defchar
102e0                 | _do_defchar
102e0     01 4A 05 F6 | 	mov	COUNT_, #1
102e4     A8 00 A0 FD | 	call	#pushregs_
102e8     28 F0 07 F1 | 	add	ptra, #40
102ec     C4 D5 BF FD | 	call	#_pop
102f0     FF 14 02 F6 | 	mov	arg02, result3
102f4     A7 FA 61 FC | 	wrlong	result1, fp
102f8     04 4E 05 F1 | 	add	fp, #4
102fc     A7 FC 61 FC | 	wrlong	result2, fp
10300     04 4E 05 F1 | 	add	fp, #4
10304     A7 14 62 FC | 	wrlong	arg02, fp
10308     08 4E 85 F1 | 	sub	fp, #8
1030c     A7 12 02 F6 | 	mov	arg01, fp
10310     84 D7 BF FD | 	call	#_converttoint
10314     FD 14 02 F6 | 	mov	arg02, result1
10318     10 4E 05 F1 | 	add	fp, #16
1031c     A7 14 62 FC | 	wrlong	arg02, fp
10320     10 4E 85 F1 | 	sub	fp, #16
10324     8C D5 BF FD | 	call	#_pop
10328     FF 14 02 F6 | 	mov	arg02, result3
1032c     A7 FA 61 FC | 	wrlong	result1, fp
10330     04 4E 05 F1 | 	add	fp, #4
10334     A7 FC 61 FC | 	wrlong	result2, fp
10338     04 4E 05 F1 | 	add	fp, #4
1033c     A7 14 62 FC | 	wrlong	arg02, fp
10340     08 4E 85 F1 | 	sub	fp, #8
10344     A7 12 02 F6 | 	mov	arg01, fp
10348     4C D7 BF FD | 	call	#_converttoint
1034c     0C 4E 05 F1 | 	add	fp, #12
10350     A7 FA 61 FC | 	wrlong	result1, fp
10354                 | ' 
10354                 | ' t1=pop() : cptr=converttoint(t1)
10354                 | ' t1=pop() : c=converttoint(t1)
10354                 | ' if cptr<$80000 then 
10354     04 4E 05 F1 | 	add	fp, #4
10358     A7 14 02 FB | 	rdlong	arg02, fp
1035c     10 4E 85 F1 | 	sub	fp, #16
10360     00 04 00 FF 
10364     00 14 16 F2 | 	cmp	arg02, ##524288 wc
10368     1C 00 90 3D |  if_ae	jmp	#LR__1350
1036c     0C 4E 05 F1 | 	add	fp, #12
10370     A7 12 02 FB | 	rdlong	arg01, fp
10374     04 4E 05 F1 | 	add	fp, #4
10378     A7 14 02 FB | 	rdlong	arg02, fp
1037c     10 4E 85 F1 | 	sub	fp, #16
10380     90 62 B1 FD | 	call	#_hg010b_spin2_defchar
10384     60 00 90 FD | 	jmp	#LR__1352
10388                 | LR__1350
10388                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
10388     24 4E 05 F1 | 	add	fp, #36
1038c     A7 00 68 FC | 	wrlong	#0, fp
10390                 | LR__1351
10390     A7 14 02 FB | 	rdlong	arg02, fp
10394     0A 27 02 F6 | 	mov	local01, arg02
10398     10 4E 85 F1 | 	sub	fp, #16
1039c     A7 26 02 F1 | 	add	local01, fp
103a0     04 4E 85 F1 | 	sub	fp, #4
103a4     A7 12 02 FB | 	rdlong	arg01, fp
103a8     10 4E 85 F1 | 	sub	fp, #16
103ac     0A 13 02 F1 | 	add	arg01, arg02
103b0     60 48 B1 FD | 	call	#_pspeek
103b4     13 FB 41 FC | 	wrbyte	result1, local01
103b8     24 4E 05 F1 | 	add	fp, #36
103bc     A7 26 02 FB | 	rdlong	local01, fp
103c0     01 26 06 F1 | 	add	local01, #1
103c4     A7 26 62 FC | 	wrlong	local01, fp
103c8     10 26 56 F2 | 	cmps	local01, #16 wc
103cc     C0 FF 9F CD |  if_b	jmp	#LR__1351
103d0     18 4E 85 F1 | 	sub	fp, #24
103d4     A7 12 02 FB | 	rdlong	arg01, fp
103d8     08 4E 05 F1 | 	add	fp, #8
103dc     A7 14 02 F6 | 	mov	arg02, fp
103e0     14 4E 85 F1 | 	sub	fp, #20
103e4     2C 62 B1 FD | 	call	#_hg010b_spin2_defchar
103e8                 | LR__1352
103e8     A7 F0 03 F6 | 	mov	ptra, fp
103ec     B2 00 A0 FD | 	call	#popregs_
103f0                 | _do_defchar_ret
103f0     2D 00 64 FD | 	ret
103f4                 | 
103f4                 | ' 
103f4                 | ' '-------------------- defenv
103f4                 | ' 
103f4                 | ' sub do_defenv
103f4                 | _do_defenv
103f4     08 4A 05 F6 | 	mov	COUNT_, #8
103f8     A8 00 A0 FD | 	call	#pushregs_
103fc     58 F0 07 F1 | 	add	ptra, #88
10400     4A 00 00 FF 
10404     A0 E4 05 F1 | 	add	objptr, ##38048
10408     F2 26 02 FB | 	rdlong	local01, objptr
1040c     13 1B 02 F6 | 	mov	arg05, local01
10410     01 1A 66 F0 | 	shl	arg05, #1
10414     13 1B 02 F1 | 	add	arg05, local01
10418     02 1A 66 F0 | 	shl	arg05, #2
1041c     03 00 00 FF 
10420     04 E4 85 F1 | 	sub	objptr, ##1540
10424     F2 1A 02 F1 | 	add	arg05, objptr
10428     0D 1B 02 FB | 	rdlong	arg05, arg05
1042c     10 4E 05 F1 | 	add	fp, #16
10430     A7 1A 62 FC | 	wrlong	arg05, fp
10434                 | ' 
10434                 | ' numpar=compiledline(lineptr_e).result.uresult
10434                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
10434     10 4E 85 F1 | 	sub	fp, #16
10438     02 1A 0E F2 | 	cmp	arg05, #2 wz
1043c     47 00 00 FF 
10440     9C E4 85 F1 | 	sub	objptr, ##36508
10444     10 4E 05 51 |  if_ne	add	fp, #16
10448     A7 26 02 5B |  if_ne	rdlong	local01, fp
1044c     10 4E 85 51 |  if_ne	sub	fp, #16
10450     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
10454     90 0A 90 5D |  if_ne	jmp	#LR__1381
10458                 | ' 
10458                 | ' if numpar=2 then						' env from .h2 or from a pointer
10458     10 4E 05 F1 | 	add	fp, #16
1045c     A7 26 02 FB | 	rdlong	local01, fp
10460     10 4E 85 F1 | 	sub	fp, #16
10464     02 26 0E F2 | 	cmp	local01, #2 wz
10468     28 04 90 5D |  if_ne	jmp	#LR__1373
1046c     44 D4 BF FD | 	call	#_pop
10470     FF 1A 02 F6 | 	mov	arg05, result3
10474     40 4E 05 F1 | 	add	fp, #64
10478     A7 FA 61 FC | 	wrlong	result1, fp
1047c     04 4E 05 F1 | 	add	fp, #4
10480     A7 FC 61 FC | 	wrlong	result2, fp
10484     04 4E 05 F1 | 	add	fp, #4
10488     A7 1A 62 FC | 	wrlong	arg05, fp
1048c                 | '   t1=pop()
1048c                 | '   if t1.result_type=result_string2 then 
1048c     48 4E 85 F1 | 	sub	fp, #72
10490     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10494     20 00 90 5D |  if_ne	jmp	#LR__1360
10498     40 4E 05 F1 | 	add	fp, #64
1049c     A7 12 02 FB | 	rdlong	arg01, fp
104a0     40 4E 85 F1 | 	sub	fp, #64
104a4     84 D5 BF FD | 	call	#_convertstring
104a8     4C 4E 05 F1 | 	add	fp, #76
104ac     A7 FA 61 FC | 	wrlong	result1, fp
104b0     4C 4E 85 F1 | 	sub	fp, #76
104b4     58 00 90 FD | 	jmp	#LR__1363
104b8                 | LR__1360
104b8     48 4E 05 F1 | 	add	fp, #72
104bc     A7 26 02 FB | 	rdlong	local01, fp
104c0     48 4E 85 F1 | 	sub	fp, #72
104c4     1F 26 0E F2 | 	cmp	local01, #31 wz
104c8     18 00 90 5D |  if_ne	jmp	#LR__1361
104cc     40 4E 05 F1 | 	add	fp, #64
104d0     A7 26 02 FB | 	rdlong	local01, fp
104d4     0C 4E 05 F1 | 	add	fp, #12
104d8     A7 26 62 FC | 	wrlong	local01, fp
104dc     4C 4E 85 F1 | 	sub	fp, #76
104e0     2C 00 90 FD | 	jmp	#LR__1362
104e4                 | LR__1361
104e4     C4 01 00 FF 
104e8     55 26 06 F6 | 	mov	local01, ##@LR__6063
104ec     4C 4E 05 F1 | 	add	fp, #76
104f0     A7 26 62 FC | 	wrlong	local01, fp
104f4     0C 4E 85 F1 | 	sub	fp, #12
104f8     A7 12 02 F6 | 	mov	arg01, fp
104fc     40 4E 85 F1 | 	sub	fp, #64
10500     94 D5 BF FD | 	call	#_converttoint
10504     1C 4E 05 F1 | 	add	fp, #28
10508     A7 FA 61 FC | 	wrlong	result1, fp
1050c     1C 4E 85 F1 | 	sub	fp, #28
10510                 | LR__1362
10510                 | LR__1363
10510                 | '   if s1<>"" then 
10510     4C 4E 05 F1 | 	add	fp, #76
10514     A7 12 02 FB | 	rdlong	arg01, fp
10518     4C 4E 85 F1 | 	sub	fp, #76
1051c     C4 01 00 FF 
10520     56 14 06 F6 | 	mov	arg02, ##@LR__6064
10524     F4 7E B1 FD | 	call	#__system___string_cmp
10528     00 FA 0D F2 | 	cmp	result1, #0 wz
1052c     28 02 90 AD |  if_e	jmp	#LR__1367
10530     80 D3 BF FD | 	call	#_pop
10534     FF 26 02 F6 | 	mov	local01, result3
10538     40 4E 05 F1 | 	add	fp, #64
1053c     A7 FA 61 FC | 	wrlong	result1, fp
10540     04 4E 05 F1 | 	add	fp, #4
10544     A7 FC 61 FC | 	wrlong	result2, fp
10548     04 4E 05 F1 | 	add	fp, #4
1054c     A7 26 62 FC | 	wrlong	local01, fp
10550     08 4E 85 F1 | 	sub	fp, #8
10554     A7 12 02 F6 | 	mov	arg01, fp
10558     40 4E 85 F1 | 	sub	fp, #64
1055c     38 D5 BF FD | 	call	#_converttoint
10560     18 4E 05 F1 | 	add	fp, #24
10564     A7 FA 61 FC | 	wrlong	result1, fp
10568     18 4E 85 F1 | 	sub	fp, #24
1056c                 | '     t1=pop()
1056c                 | '     channel=converttoint(t1) 
1056c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
1056c     09 12 06 F6 | 	mov	arg01, #9
10570     E0 D1 B1 FD | 	call	#__system__close
10574     09 26 06 F6 | 	mov	local01, #9
10578     C4 01 00 FF 
1057c     57 12 06 F6 | 	mov	arg01, ##@LR__6065
10580     4C 4E 05 F1 | 	add	fp, #76
10584     A7 14 02 FB | 	rdlong	arg02, fp
10588     4C 4E 85 F1 | 	sub	fp, #76
1058c     C0 7E B1 FD | 	call	#__system___string_concat
10590     FD 14 02 F6 | 	mov	arg02, result1
10594     13 13 02 F6 | 	mov	arg01, local01
10598     00 16 06 F6 | 	mov	arg03, #0
1059c     58 8A B1 FD | 	call	#__system___basic_open_string
105a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
105a4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
105a8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
105ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
105b0     0C 4E 05 F1 | 	add	fp, #12
105b4     A7 FA 61 FC | 	wrlong	result1, fp
105b8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
105b8     0C 4E 85 F1 | 	sub	fp, #12
105bc     A0 00 90 AD |  if_e	jmp	#LR__1364
105c0     00 12 06 F6 | 	mov	arg01, #0
105c4     DC DA B1 FD | 	call	#__system___getiolock_0625
105c8     FD 12 02 F6 | 	mov	arg01, result1
105cc     24 7E B1 FD | 	call	#__system___lockmem
105d0     C4 01 00 FF 
105d4     64 14 06 F6 | 	mov	arg02, ##@LR__6066
105d8     00 12 06 F6 | 	mov	arg01, #0
105dc     00 16 06 F6 | 	mov	arg03, #0
105e0     08 8B B1 FD | 	call	#__system___basic_print_string
105e4     0C 4E 05 F1 | 	add	fp, #12
105e8     A7 14 02 FB | 	rdlong	arg02, fp
105ec     0C 4E 85 F1 | 	sub	fp, #12
105f0     00 12 06 F6 | 	mov	arg01, #0
105f4     00 16 06 F6 | 	mov	arg03, #0
105f8     0A 18 06 F6 | 	mov	arg04, #10
105fc     30 8B B1 FD | 	call	#__system___basic_print_integer
10600     C4 01 00 FF 
10604     72 14 06 F6 | 	mov	arg02, ##@LR__6067
10608     00 12 06 F6 | 	mov	arg01, #0
1060c     00 16 06 F6 | 	mov	arg03, #0
10610     D8 8A B1 FD | 	call	#__system___basic_print_string
10614     00 26 06 F6 | 	mov	local01, #0
10618     0C 4E 05 F1 | 	add	fp, #12
1061c     A7 12 02 FB | 	rdlong	arg01, fp
10620     0C 4E 85 F1 | 	sub	fp, #12
10624     5C A7 B1 FD | 	call	#__system___strerror
10628     FD 14 02 F6 | 	mov	arg02, result1
1062c     13 13 02 F6 | 	mov	arg01, local01
10630     00 16 06 F6 | 	mov	arg03, #0
10634     B4 8A B1 FD | 	call	#__system___basic_print_string
10638     00 12 06 F6 | 	mov	arg01, #0
1063c     0A 14 06 F6 | 	mov	arg02, #10
10640     00 16 06 F6 | 	mov	arg03, #0
10644     4C 8A B1 FD | 	call	#__system___basic_print_char
10648     00 12 06 F6 | 	mov	arg01, #0
1064c     54 DA B1 FD | 	call	#__system___getiolock_0625
10650     FD 00 68 FC | 	wrlong	#0, result1
10654     09 12 06 F6 | 	mov	arg01, #9
10658     F8 D0 B1 FD | 	call	#__system__close
1065c     88 08 90 FD | 	jmp	#LR__1381
10660                 | LR__1364
10660                 | '     get #9,17,envbuf8(channel,0),256
10660     18 4E 05 F1 | 	add	fp, #24
10664     A7 1A 02 FB | 	rdlong	arg05, fp
10668     18 4E 85 F1 | 	sub	fp, #24
1066c     0D 17 02 F6 | 	mov	arg03, arg05
10670     09 16 66 F0 | 	shl	arg03, #9
10674     0D 17 02 F1 | 	add	arg03, arg05
10678     0C 00 00 FF 
1067c     D8 E4 05 F1 | 	add	objptr, ##6360
10680     F2 16 02 F1 | 	add	arg03, objptr
10684     09 12 06 F6 | 	mov	arg01, #9
10688     11 14 06 F6 | 	mov	arg02, #17
1068c     00 19 06 F6 | 	mov	arg04, #256
10690     01 1A 06 F6 | 	mov	arg05, #1
10694     0C 00 00 FF 
10698     D8 E4 85 F1 | 	sub	objptr, ##6360
1069c     C8 8B B1 FD | 	call	#__system___basic_get
106a0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
106a0     14 4E 05 F1 | 	add	fp, #20
106a4     A7 FE 69 FC | 	wrlong	#255, fp
106a8     14 4E 85 F1 | 	sub	fp, #20
106ac     0C 00 00 FF 
106b0     D8 E4 05 F1 | 	add	objptr, ##6360
106b4     97 30 48 FB | 	callpa	#(@LR__1366-@LR__1365)>>2,fcache_load_ptr_
106b8                 | LR__1365
106b8     18 4E 05 F1 | 	add	fp, #24
106bc     A7 16 02 FB | 	rdlong	arg03, fp
106c0     0B 27 02 F6 | 	mov	local01, arg03
106c4     09 26 66 F0 | 	shl	local01, #9
106c8     F2 26 02 F1 | 	add	local01, objptr
106cc     04 4E 85 F1 | 	sub	fp, #4
106d0     A7 1A 02 FB | 	rdlong	arg05, fp
106d4     0D 19 02 F6 | 	mov	arg04, arg05
106d8     01 18 66 F0 | 	shl	arg04, #1
106dc     13 19 02 F1 | 	add	arg04, local01
106e0     0B 27 02 F6 | 	mov	local01, arg03
106e4     09 26 66 F0 | 	shl	local01, #9
106e8     0B 27 02 F1 | 	add	local01, arg03
106ec     F2 26 02 F1 | 	add	local01, objptr
106f0     13 1B 02 F1 | 	add	arg05, local01
106f4     0D 27 C2 FA | 	rdbyte	local01, arg05
106f8     00 27 06 FA | 	mul	local01, #256
106fc     0C 27 52 FC | 	wrword	local01, arg04
10700     A7 26 02 FB | 	rdlong	local01, fp
10704     01 26 86 F1 | 	sub	local01, #1
10708     A7 26 62 FC | 	wrlong	local01, fp
1070c     14 4E 85 F1 | 	sub	fp, #20
10710     00 26 56 F2 | 	cmps	local01, #0 wc
10714     A0 FF 9F 3D |  if_ae	jmp	#LR__1365
10718                 | LR__1366
10718     0C 00 00 FF 
1071c     D8 E4 85 F1 | 	sub	objptr, ##6360
10720                 | '     close #9
10720     09 12 06 F6 | 	mov	arg01, #9
10724     2C D0 B1 FD | 	call	#__system__close
10728     18 4E 05 F1 | 	add	fp, #24
1072c     A7 26 02 FB | 	rdlong	local01, fp
10730     18 4E 85 F1 | 	sub	fp, #24
10734     09 26 66 F0 | 	shl	local01, #9
10738     0C 00 00 FF 
1073c     D8 E4 05 F1 | 	add	objptr, ##6360
10740     F2 26 02 F1 | 	add	local01, objptr
10744     FE 27 06 F1 | 	add	local01, #510
10748     13 01 58 FC | 	wrword	#0, local01
1074c                 | '     envbuf(channel,255)=0                                                              
1074c                 | '     return
1074c     0C 00 00 FF 
10750     D8 E4 85 F1 | 	sub	objptr, ##6360
10754     90 07 90 FD | 	jmp	#LR__1381
10758                 | LR__1367
10758                 | '     if wptr < $80000 then 
10758     1C 4E 05 F1 | 	add	fp, #28
1075c     A7 28 02 FB | 	rdlong	local02, fp
10760     1C 4E 85 F1 | 	sub	fp, #28
10764     00 04 00 FF 
10768     00 28 56 F2 | 	cmps	local02, ##524288 wc
1076c     7C 00 90 3D |  if_ae	jmp	#LR__1370
10770                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10770     14 4E 05 F1 | 	add	fp, #20
10774     A7 00 68 FC | 	wrlong	#0, fp
10778     14 4E 85 F1 | 	sub	fp, #20
1077c     0C 00 00 FF 
10780     D8 E4 05 F1 | 	add	objptr, ##6360
10784     97 2C 48 FB | 	callpa	#(@LR__1369-@LR__1368)>>2,fcache_load_ptr_
10788                 | LR__1368
10788     18 4E 05 F1 | 	add	fp, #24
1078c     A7 28 02 FB | 	rdlong	local02, fp
10790     09 28 66 F0 | 	shl	local02, #9
10794     F2 28 02 F1 | 	add	local02, objptr
10798     04 4E 85 F1 | 	sub	fp, #4
1079c     A7 26 02 FB | 	rdlong	local01, fp
107a0     13 1B 02 F6 | 	mov	arg05, local01
107a4     01 1A 66 F0 | 	shl	arg05, #1
107a8     14 1B 02 F1 | 	add	arg05, local02
107ac     08 4E 05 F1 | 	add	fp, #8
107b0     A7 12 02 FB | 	rdlong	arg01, fp
107b4     01 26 66 F0 | 	shl	local01, #1
107b8     13 13 02 F1 | 	add	arg01, local01
107bc     09 FB E1 FA | 	rdword	result1, arg01
107c0     0D FB 51 FC | 	wrword	result1, arg05
107c4     08 4E 85 F1 | 	sub	fp, #8
107c8     A7 28 02 FB | 	rdlong	local02, fp
107cc     01 28 06 F1 | 	add	local02, #1
107d0     A7 28 62 FC | 	wrlong	local02, fp
107d4     14 4E 85 F1 | 	sub	fp, #20
107d8     00 29 56 F2 | 	cmps	local02, #256 wc
107dc     A8 FF 9F CD |  if_b	jmp	#LR__1368
107e0                 | LR__1369
107e0     0C 00 00 FF 
107e4     D8 E4 85 F1 | 	sub	objptr, ##6360
107e8     78 00 90 FD | 	jmp	#LR__1372
107ec                 | LR__1370
107ec                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
107ec     14 4E 05 F1 | 	add	fp, #20
107f0     A7 00 68 FC | 	wrlong	#0, fp
107f4     14 4E 85 F1 | 	sub	fp, #20
107f8                 | LR__1371
107f8     18 4E 05 F1 | 	add	fp, #24
107fc     A7 28 02 FB | 	rdlong	local02, fp
10800     09 28 66 F0 | 	shl	local02, #9
10804     0C 00 00 FF 
10808     D8 E4 05 F1 | 	add	objptr, ##6360
1080c     F2 28 02 F1 | 	add	local02, objptr
10810     04 4E 85 F1 | 	sub	fp, #4
10814     A7 26 02 FB | 	rdlong	local01, fp
10818     13 2B 02 F6 | 	mov	local03, local01
1081c     01 2A 66 F0 | 	shl	local03, #1
10820     14 2B 02 F1 | 	add	local03, local02
10824     08 4E 05 F1 | 	add	fp, #8
10828     A7 12 02 FB | 	rdlong	arg01, fp
1082c     1C 4E 85 F1 | 	sub	fp, #28
10830     01 26 66 F0 | 	shl	local01, #1
10834     13 13 02 F1 | 	add	arg01, local01
10838     0C 00 00 FF 
1083c     D8 E4 85 F1 | 	sub	objptr, ##6360
10840     80 44 B1 FD | 	call	#_psdpeek
10844     15 FB 51 FC | 	wrword	result1, local03
10848     14 4E 05 F1 | 	add	fp, #20
1084c     A7 2A 02 FB | 	rdlong	local03, fp
10850     01 2A 06 F1 | 	add	local03, #1
10854     A7 2A 62 FC | 	wrlong	local03, fp
10858     14 4E 85 F1 | 	sub	fp, #20
1085c     00 2B 56 F2 | 	cmps	local03, #256 wc
10860     94 FF 9F CD |  if_b	jmp	#LR__1371
10864                 | LR__1372
10864     18 4E 05 F1 | 	add	fp, #24
10868     A7 2A 02 FB | 	rdlong	local03, fp
1086c     18 4E 85 F1 | 	sub	fp, #24
10870     09 2A 66 F0 | 	shl	local03, #9
10874     0C 00 00 FF 
10878     D8 E4 05 F1 | 	add	objptr, ##6360
1087c     F2 2A 02 F1 | 	add	local03, objptr
10880     FE 2B 06 F1 | 	add	local03, #510
10884     15 01 58 FC | 	wrword	#0, local03
10888                 | '     envbuf(channel,255)=0
10888                 | '     return   
10888     0C 00 00 FF 
1088c     D8 E4 85 F1 | 	sub	objptr, ##6360
10890     54 06 90 FD | 	jmp	#LR__1381
10894                 | LR__1373
10894                 | ' 
10894                 | ' if numpar=5 then   						 'simple adsr
10894     10 4E 05 F1 | 	add	fp, #16
10898     A7 28 02 FB | 	rdlong	local02, fp
1089c     10 4E 85 F1 | 	sub	fp, #16
108a0     05 28 0E F2 | 	cmp	local02, #5 wz
108a4     14 06 90 5D |  if_ne	jmp	#LR__1380
108a8     08 D0 BF FD | 	call	#_pop
108ac     FF 26 02 F6 | 	mov	local01, result3
108b0     40 4E 05 F1 | 	add	fp, #64
108b4     A7 FA 61 FC | 	wrlong	result1, fp
108b8     04 4E 05 F1 | 	add	fp, #4
108bc     A7 FC 61 FC | 	wrlong	result2, fp
108c0     04 4E 05 F1 | 	add	fp, #4
108c4     A7 26 62 FC | 	wrlong	local01, fp
108c8     08 4E 85 F1 | 	sub	fp, #8
108cc     A7 12 02 F6 | 	mov	arg01, fp
108d0     40 4E 85 F1 | 	sub	fp, #64
108d4     7C D2 BF FD | 	call	#_converttofloat
108d8     FD 28 02 F6 | 	mov	local02, result1
108dc     2C 4E 05 F1 | 	add	fp, #44
108e0     A7 28 62 FC | 	wrlong	local02, fp
108e4     2C 4E 85 F1 | 	sub	fp, #44
108e8     C8 CF BF FD | 	call	#_pop
108ec     FF 26 02 F6 | 	mov	local01, result3
108f0     40 4E 05 F1 | 	add	fp, #64
108f4     A7 FA 61 FC | 	wrlong	result1, fp
108f8     04 4E 05 F1 | 	add	fp, #4
108fc     A7 FC 61 FC | 	wrlong	result2, fp
10900     04 4E 05 F1 | 	add	fp, #4
10904     A7 26 62 FC | 	wrlong	local01, fp
10908     08 4E 85 F1 | 	sub	fp, #8
1090c     A7 12 02 F6 | 	mov	arg01, fp
10910     40 4E 85 F1 | 	sub	fp, #64
10914     3C D2 BF FD | 	call	#_converttofloat
10918     FD 28 02 F6 | 	mov	local02, result1
1091c     28 4E 05 F1 | 	add	fp, #40
10920     A7 28 62 FC | 	wrlong	local02, fp
10924     28 4E 85 F1 | 	sub	fp, #40
10928     88 CF BF FD | 	call	#_pop
1092c     FF 26 02 F6 | 	mov	local01, result3
10930     40 4E 05 F1 | 	add	fp, #64
10934     A7 FA 61 FC | 	wrlong	result1, fp
10938     04 4E 05 F1 | 	add	fp, #4
1093c     A7 FC 61 FC | 	wrlong	result2, fp
10940     04 4E 05 F1 | 	add	fp, #4
10944     A7 26 62 FC | 	wrlong	local01, fp
10948     08 4E 85 F1 | 	sub	fp, #8
1094c     A7 12 02 F6 | 	mov	arg01, fp
10950     40 4E 85 F1 | 	sub	fp, #64
10954     FC D1 BF FD | 	call	#_converttofloat
10958     FD 28 02 F6 | 	mov	local02, result1
1095c     24 4E 05 F1 | 	add	fp, #36
10960     A7 28 62 FC | 	wrlong	local02, fp
10964     24 4E 85 F1 | 	sub	fp, #36
10968     48 CF BF FD | 	call	#_pop
1096c     FF 26 02 F6 | 	mov	local01, result3
10970     40 4E 05 F1 | 	add	fp, #64
10974     A7 FA 61 FC | 	wrlong	result1, fp
10978     04 4E 05 F1 | 	add	fp, #4
1097c     A7 FC 61 FC | 	wrlong	result2, fp
10980     04 4E 05 F1 | 	add	fp, #4
10984     A7 26 62 FC | 	wrlong	local01, fp
10988     08 4E 85 F1 | 	sub	fp, #8
1098c     A7 12 02 F6 | 	mov	arg01, fp
10990     40 4E 85 F1 | 	sub	fp, #64
10994     BC D1 BF FD | 	call	#_converttofloat
10998     FD 28 02 F6 | 	mov	local02, result1
1099c     20 4E 05 F1 | 	add	fp, #32
109a0     A7 28 62 FC | 	wrlong	local02, fp
109a4     20 4E 85 F1 | 	sub	fp, #32
109a8     08 CF BF FD | 	call	#_pop
109ac     FF 26 02 F6 | 	mov	local01, result3
109b0     40 4E 05 F1 | 	add	fp, #64
109b4     A7 FA 61 FC | 	wrlong	result1, fp
109b8     04 4E 05 F1 | 	add	fp, #4
109bc     A7 FC 61 FC | 	wrlong	result2, fp
109c0     04 4E 05 F1 | 	add	fp, #4
109c4     A7 26 62 FC | 	wrlong	local01, fp
109c8     08 4E 85 F1 | 	sub	fp, #8
109cc     A7 12 02 F6 | 	mov	arg01, fp
109d0     40 4E 85 F1 | 	sub	fp, #64
109d4     C0 D0 BF FD | 	call	#_converttoint
109d8     18 4E 05 F1 | 	add	fp, #24
109dc     A7 FA 61 FC | 	wrlong	result1, fp
109e0                 | '   t1=pop() : rr=converttofloat(t1)
109e0                 | '   t1=pop() : ss=converttofloat(t1) 
109e0                 | '   t1=pop() : dd=converttofloat(t1)
109e0                 | '   t1=pop() : aa=converttofloat(t1)
109e0                 | '   t1=pop() : channel=converttoint(t1)
109e0                 | '   if ss<0.0 then ss=0.0 
109e0     10 4E 05 F1 | 	add	fp, #16
109e4     A7 12 02 FB | 	rdlong	arg01, fp
109e8     28 4E 85 F1 | 	sub	fp, #40
109ec     00 14 06 F6 | 	mov	arg02, #0
109f0     01 16 06 F6 | 	mov	arg03, #1
109f4     AC AC B1 FD | 	call	#__system___float_cmp
109f8     00 FA 55 F2 | 	cmps	result1, #0 wc
109fc     28 4E 05 C1 |  if_b	add	fp, #40
10a00     A7 00 68 CC |  if_b	wrlong	#0, fp
10a04     28 4E 85 C1 |  if_b	sub	fp, #40
10a08                 | '   if ss>1.0 then ss=1.0
10a08     28 4E 05 F1 | 	add	fp, #40
10a0c     A7 12 02 FB | 	rdlong	arg01, fp
10a10     28 4E 85 F1 | 	sub	fp, #40
10a14     00 C0 1F FF 
10a18     00 14 06 F6 | 	mov	arg02, ##1065353216
10a1c     01 16 66 F6 | 	neg	arg03, #1
10a20     80 AC B1 FD | 	call	#__system___float_cmp
10a24     01 FA 55 F2 | 	cmps	result1, #1 wc
10a28     28 4E 05 31 |  if_ae	add	fp, #40
10a2c     00 C0 9F 3F 
10a30     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
10a34     28 4E 85 31 |  if_ae	sub	fp, #40
10a38     20 4E 05 F1 | 	add	fp, #32
10a3c     A7 12 02 FB | 	rdlong	arg01, fp
10a40     04 4E 05 F1 | 	add	fp, #4
10a44     A7 14 02 FB | 	rdlong	arg02, fp
10a48     24 4E 85 F1 | 	sub	fp, #36
10a4c     50 A4 B1 FD | 	call	#__system___float_add
10a50     FD 12 02 F6 | 	mov	arg01, result1
10a54     2C 4E 05 F1 | 	add	fp, #44
10a58     A7 14 02 FB | 	rdlong	arg02, fp
10a5c     2C 4E 85 F1 | 	sub	fp, #44
10a60     3C A4 B1 FD | 	call	#__system___float_add
10a64     30 4E 05 F1 | 	add	fp, #48
10a68     A7 FA 61 FC | 	wrlong	result1, fp
10a6c     FD 14 02 F6 | 	mov	arg02, result1
10a70     30 4E 85 F1 | 	sub	fp, #48
10a74     00 C0 21 FF 
10a78     00 12 06 F6 | 	mov	arg01, ##1132462080
10a7c     F4 A9 B1 FD | 	call	#__system___float_div
10a80     34 4E 05 F1 | 	add	fp, #52
10a84     A7 FA 61 FC | 	wrlong	result1, fp
10a88     14 4E 85 F1 | 	sub	fp, #20
10a8c     A7 12 02 FB | 	rdlong	arg01, fp
10a90     FD 14 02 F6 | 	mov	arg02, result1
10a94     20 4E 85 F1 | 	sub	fp, #32
10a98     D4 A7 B1 FD | 	call	#__system___float_mul
10a9c     FD 12 02 F6 | 	mov	arg01, result1
10aa0     01 14 06 F6 | 	mov	arg02, #1
10aa4     90 AC B1 FD | 	call	#__system___float_tointeger
10aa8     A7 FA 61 FC | 	wrlong	result1, fp
10aac     24 4E 05 F1 | 	add	fp, #36
10ab0     A7 12 02 FB | 	rdlong	arg01, fp
10ab4     10 4E 05 F1 | 	add	fp, #16
10ab8     A7 14 02 FB | 	rdlong	arg02, fp
10abc     34 4E 85 F1 | 	sub	fp, #52
10ac0     AC A7 B1 FD | 	call	#__system___float_mul
10ac4     FD 12 02 F6 | 	mov	arg01, result1
10ac8     01 14 06 F6 | 	mov	arg02, #1
10acc     68 AC B1 FD | 	call	#__system___float_tointeger
10ad0     04 4E 05 F1 | 	add	fp, #4
10ad4     A7 FA 61 FC | 	wrlong	result1, fp
10ad8     28 4E 05 F1 | 	add	fp, #40
10adc     A7 12 02 FB | 	rdlong	arg01, fp
10ae0     08 4E 05 F1 | 	add	fp, #8
10ae4     A7 14 02 FB | 	rdlong	arg02, fp
10ae8     34 4E 85 F1 | 	sub	fp, #52
10aec     80 A7 B1 FD | 	call	#__system___float_mul
10af0     FD 12 02 F6 | 	mov	arg01, result1
10af4     01 14 06 F6 | 	mov	arg02, #1
10af8     3C AC B1 FD | 	call	#__system___float_tointeger
10afc     0C 4E 05 F1 | 	add	fp, #12
10b00     A7 FA 61 FC | 	wrlong	result1, fp
10b04     0C 4E 85 F1 | 	sub	fp, #12
10b08     F8 BF 23 FF 
10b0c     00 28 06 F6 | 	mov	local02, ##1199566848
10b10     A7 12 02 FB | 	rdlong	arg01, fp
10b14     09 13 52 F6 | 	abs	arg01, arg01 wc
10b18     1F 2C C6 C9 |  if_b	decod	local04, #31
10b1c     00 2C 06 36 |  if_ae	mov	local04, #0
10b20     48 A3 B1 FD | 	call	#__system___float_fromuns
10b24     16 FB 61 F5 | 	xor	result1, local04
10b28     FD 14 02 F6 | 	mov	arg02, result1
10b2c     14 13 02 F6 | 	mov	arg01, local02
10b30     40 A9 B1 FD | 	call	#__system___float_div
10b34     38 4E 05 F1 | 	add	fp, #56
10b38     A7 FA 61 FC | 	wrlong	result1, fp
10b3c     F8 BF 23 FF 
10b40     00 28 06 F6 | 	mov	local02, ##1199566848
10b44     10 4E 85 F1 | 	sub	fp, #16
10b48     A7 14 02 FB | 	rdlong	arg02, fp
10b4c     28 4E 85 F1 | 	sub	fp, #40
10b50     F8 BF 23 FF 
10b54     00 12 06 F6 | 	mov	arg01, ##1199566848
10b58     14 A7 B1 FD | 	call	#__system___float_mul
10b5c     FD 14 02 F6 | 	mov	arg02, result1
10b60     14 13 02 F6 | 	mov	arg01, local02
10b64     1F 14 E6 F4 | 	bitnot	arg02, #31
10b68     34 A3 B1 FD | 	call	#__system___float_add
10b6c     FD 28 02 F6 | 	mov	local02, result1
10b70     04 4E 05 F1 | 	add	fp, #4
10b74     A7 12 02 FB | 	rdlong	arg01, fp
10b78     04 4E 85 F1 | 	sub	fp, #4
10b7c     09 13 52 F6 | 	abs	arg01, arg01 wc
10b80     1F 2C C6 C9 |  if_b	decod	local04, #31
10b84     00 2C 06 36 |  if_ae	mov	local04, #0
10b88     E0 A2 B1 FD | 	call	#__system___float_fromuns
10b8c     16 FB 61 F5 | 	xor	result1, local04
10b90     FD 14 02 F6 | 	mov	arg02, result1
10b94     14 13 02 F6 | 	mov	arg01, local02
10b98     D8 A8 B1 FD | 	call	#__system___float_div
10b9c     24 4E 05 F1 | 	add	fp, #36
10ba0     A7 FA 61 FC | 	wrlong	result1, fp
10ba4     04 4E 05 F1 | 	add	fp, #4
10ba8     A7 14 02 FB | 	rdlong	arg02, fp
10bac     28 4E 85 F1 | 	sub	fp, #40
10bb0     F8 BF 23 FF 
10bb4     00 12 06 F6 | 	mov	arg01, ##1199566848
10bb8     B4 A6 B1 FD | 	call	#__system___float_mul
10bbc     FD 28 02 F6 | 	mov	local02, result1
10bc0     0C 4E 05 F1 | 	add	fp, #12
10bc4     A7 12 02 FB | 	rdlong	arg01, fp
10bc8     0C 4E 85 F1 | 	sub	fp, #12
10bcc     09 13 52 F6 | 	abs	arg01, arg01 wc
10bd0     1F 2C C6 C9 |  if_b	decod	local04, #31
10bd4     00 2C 06 36 |  if_ae	mov	local04, #0
10bd8     90 A2 B1 FD | 	call	#__system___float_fromuns
10bdc     16 FB 61 F5 | 	xor	result1, local04
10be0     FD 14 02 F6 | 	mov	arg02, result1
10be4     14 13 02 F6 | 	mov	arg01, local02
10be8     88 A8 B1 FD | 	call	#__system___float_div
10bec     3C 4E 05 F1 | 	add	fp, #60
10bf0     A7 FA 61 FC | 	wrlong	result1, fp
10bf4     24 4E 85 F1 | 	sub	fp, #36
10bf8     A7 2E 02 FB | 	rdlong	local05, fp
10bfc     18 4E 85 F1 | 	sub	fp, #24
10c00     01 2E 66 F0 | 	shl	local05, #1
10c04     52 00 00 FF 
10c08     0C E5 05 F1 | 	add	objptr, ##42252
10c0c     F2 2E 02 F1 | 	add	local05, objptr
10c10     A7 30 02 FB | 	rdlong	local06, fp
10c14     04 4E 05 F1 | 	add	fp, #4
10c18     A7 2A 02 FB | 	rdlong	local03, fp
10c1c     15 31 02 F1 | 	add	local06, local03
10c20     17 31 52 FC | 	wrword	local06, local05
10c24     1C 4E 05 F1 | 	add	fp, #28
10c28     A7 00 68 FC | 	wrlong	#0, fp
10c2c                 | '   fulltime=aa+dd+rr
10c2c                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10c2c                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10c2c                 | '   suspoints(channel)=a+d
10c2c                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10c2c     0C 4E 85 F1 | 	sub	fp, #12
10c30     A7 00 68 FC | 	wrlong	#0, fp
10c34     14 4E 85 F1 | 	sub	fp, #20
10c38     A7 32 02 FB | 	rdlong	local07, fp
10c3c     52 00 00 FF 
10c40     0C E5 85 F1 | 	sub	objptr, ##42252
10c44                 | LR__1374
10c44     14 4E 05 F1 | 	add	fp, #20
10c48     A7 28 02 FB | 	rdlong	local02, fp
10c4c     14 4E 85 F1 | 	sub	fp, #20
10c50     19 29 52 F2 | 	cmps	local02, local07 wc
10c54     80 00 90 3D |  if_ae	jmp	#LR__1375
10c58     18 4E 05 F1 | 	add	fp, #24
10c5c     A7 30 02 FB | 	rdlong	local06, fp
10c60     09 30 66 F0 | 	shl	local06, #9
10c64     0C 00 00 FF 
10c68     D8 E4 05 F1 | 	add	objptr, ##6360
10c6c     F2 30 02 F1 | 	add	local06, objptr
10c70     04 4E 85 F1 | 	sub	fp, #4
10c74     A7 2E 02 FB | 	rdlong	local05, fp
10c78     01 2E 66 F0 | 	shl	local05, #1
10c7c     18 2F 02 F1 | 	add	local05, local06
10c80     0C 4E 05 F1 | 	add	fp, #12
10c84     A7 12 02 FB | 	rdlong	arg01, fp
10c88     20 4E 85 F1 | 	sub	fp, #32
10c8c     0C 00 00 FF 
10c90     D8 E4 85 F1 | 	sub	objptr, ##6360
10c94     01 14 06 F6 | 	mov	arg02, #1
10c98     9C AA B1 FD | 	call	#__system___float_tointeger
10c9c     17 FB 51 FC | 	wrword	result1, local05
10ca0     20 4E 05 F1 | 	add	fp, #32
10ca4     A7 12 02 FB | 	rdlong	arg01, fp
10ca8     18 4E 05 F1 | 	add	fp, #24
10cac     A7 14 02 FB | 	rdlong	arg02, fp
10cb0     38 4E 85 F1 | 	sub	fp, #56
10cb4     E8 A1 B1 FD | 	call	#__system___float_add
10cb8     20 4E 05 F1 | 	add	fp, #32
10cbc     A7 FA 61 FC | 	wrlong	result1, fp
10cc0     0C 4E 85 F1 | 	sub	fp, #12
10cc4     A7 30 02 FB | 	rdlong	local06, fp
10cc8     01 30 06 F1 | 	add	local06, #1
10ccc     A7 30 62 FC | 	wrlong	local06, fp
10cd0     14 4E 85 F1 | 	sub	fp, #20
10cd4     6C FF 9F FD | 	jmp	#LR__1374
10cd8                 | LR__1375
10cd8                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10cd8     A7 28 02 FB | 	rdlong	local02, fp
10cdc     14 4E 05 F1 | 	add	fp, #20
10ce0     A7 28 62 FC | 	wrlong	local02, fp
10ce4     14 4E 85 F1 | 	sub	fp, #20
10ce8     A7 34 02 FB | 	rdlong	local08, fp
10cec     04 4E 05 F1 | 	add	fp, #4
10cf0     A7 28 02 FB | 	rdlong	local02, fp
10cf4     04 4E 85 F1 | 	sub	fp, #4
10cf8     14 35 02 F1 | 	add	local08, local02
10cfc                 | LR__1376
10cfc     14 4E 05 F1 | 	add	fp, #20
10d00     A7 28 02 FB | 	rdlong	local02, fp
10d04     14 4E 85 F1 | 	sub	fp, #20
10d08     1A 29 52 F2 | 	cmps	local02, local08 wc
10d0c     A8 00 90 3D |  if_ae	jmp	#LR__1377
10d10     18 4E 05 F1 | 	add	fp, #24
10d14     A7 32 02 FB | 	rdlong	local07, fp
10d18     09 32 66 F0 | 	shl	local07, #9
10d1c     0C 00 00 FF 
10d20     D8 E4 05 F1 | 	add	objptr, ##6360
10d24     F2 32 02 F1 | 	add	local07, objptr
10d28     04 4E 85 F1 | 	sub	fp, #4
10d2c     A7 30 02 FB | 	rdlong	local06, fp
10d30     01 30 66 F0 | 	shl	local06, #1
10d34     19 31 02 F1 | 	add	local06, local07
10d38     0C 4E 05 F1 | 	add	fp, #12
10d3c     A7 12 02 FB | 	rdlong	arg01, fp
10d40     20 4E 85 F1 | 	sub	fp, #32
10d44     0C 00 00 FF 
10d48     D8 E4 85 F1 | 	sub	objptr, ##6360
10d4c     01 14 06 F6 | 	mov	arg02, #1
10d50     E4 A9 B1 FD | 	call	#__system___float_tointeger
10d54     18 FB 51 FC | 	wrword	result1, local06
10d58     20 4E 05 F1 | 	add	fp, #32
10d5c     A7 12 02 FB | 	rdlong	arg01, fp
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 14 02 FB | 	rdlong	arg02, fp
10d68     24 4E 85 F1 | 	sub	fp, #36
10d6c     1F 14 E6 F4 | 	bitnot	arg02, #31
10d70     2C A1 B1 FD | 	call	#__system___float_add
10d74     20 4E 05 F1 | 	add	fp, #32
10d78     A7 FA 61 FC | 	wrlong	result1, fp
10d7c     20 4E 85 F1 | 	sub	fp, #32
10d80     FD 12 02 F6 | 	mov	arg01, result1
10d84     00 14 06 F6 | 	mov	arg02, #0
10d88     01 16 06 F6 | 	mov	arg03, #1
10d8c     14 A9 B1 FD | 	call	#__system___float_cmp
10d90     00 FA 55 F2 | 	cmps	result1, #0 wc
10d94     20 4E 05 C1 |  if_b	add	fp, #32
10d98     A7 00 68 CC |  if_b	wrlong	#0, fp
10d9c     20 4E 85 C1 |  if_b	sub	fp, #32
10da0     14 4E 05 F1 | 	add	fp, #20
10da4     A7 32 02 FB | 	rdlong	local07, fp
10da8     01 32 06 F1 | 	add	local07, #1
10dac     A7 32 62 FC | 	wrlong	local07, fp
10db0     14 4E 85 F1 | 	sub	fp, #20
10db4     44 FF 9F FD | 	jmp	#LR__1376
10db8                 | LR__1377
10db8                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10db8     A7 28 02 FB | 	rdlong	local02, fp
10dbc     04 4E 05 F1 | 	add	fp, #4
10dc0     A7 34 02 FB | 	rdlong	local08, fp
10dc4     1A 29 02 F1 | 	add	local02, local08
10dc8     10 4E 05 F1 | 	add	fp, #16
10dcc     A7 28 62 FC | 	wrlong	local02, fp
10dd0     14 4E 85 F1 | 	sub	fp, #20
10dd4                 | LR__1378
10dd4     14 4E 05 F1 | 	add	fp, #20
10dd8     A7 2E 02 FB | 	rdlong	local05, fp
10ddc     14 4E 85 F1 | 	sub	fp, #20
10de0     00 2F 56 F2 | 	cmps	local05, #256 wc
10de4     A8 00 90 3D |  if_ae	jmp	#LR__1379
10de8     18 4E 05 F1 | 	add	fp, #24
10dec     A7 34 02 FB | 	rdlong	local08, fp
10df0     09 34 66 F0 | 	shl	local08, #9
10df4     0C 00 00 FF 
10df8     D8 E4 05 F1 | 	add	objptr, ##6360
10dfc     F2 34 02 F1 | 	add	local08, objptr
10e00     04 4E 85 F1 | 	sub	fp, #4
10e04     A7 32 02 FB | 	rdlong	local07, fp
10e08     01 32 66 F0 | 	shl	local07, #1
10e0c     1A 33 02 F1 | 	add	local07, local08
10e10     0C 4E 05 F1 | 	add	fp, #12
10e14     A7 12 02 FB | 	rdlong	arg01, fp
10e18     20 4E 85 F1 | 	sub	fp, #32
10e1c     0C 00 00 FF 
10e20     D8 E4 85 F1 | 	sub	objptr, ##6360
10e24     01 14 06 F6 | 	mov	arg02, #1
10e28     0C A9 B1 FD | 	call	#__system___float_tointeger
10e2c     19 FB 51 FC | 	wrword	result1, local07
10e30     20 4E 05 F1 | 	add	fp, #32
10e34     A7 12 02 FB | 	rdlong	arg01, fp
10e38     1C 4E 05 F1 | 	add	fp, #28
10e3c     A7 14 02 FB | 	rdlong	arg02, fp
10e40     3C 4E 85 F1 | 	sub	fp, #60
10e44     1F 14 E6 F4 | 	bitnot	arg02, #31
10e48     54 A0 B1 FD | 	call	#__system___float_add
10e4c     20 4E 05 F1 | 	add	fp, #32
10e50     A7 FA 61 FC | 	wrlong	result1, fp
10e54     20 4E 85 F1 | 	sub	fp, #32
10e58     FD 12 02 F6 | 	mov	arg01, result1
10e5c     00 14 06 F6 | 	mov	arg02, #0
10e60     01 16 06 F6 | 	mov	arg03, #1
10e64     3C A8 B1 FD | 	call	#__system___float_cmp
10e68     00 FA 55 F2 | 	cmps	result1, #0 wc
10e6c     20 4E 05 C1 |  if_b	add	fp, #32
10e70     A7 00 68 CC |  if_b	wrlong	#0, fp
10e74     20 4E 85 C1 |  if_b	sub	fp, #32
10e78     14 4E 05 F1 | 	add	fp, #20
10e7c     A7 34 02 FB | 	rdlong	local08, fp
10e80     01 34 06 F1 | 	add	local08, #1
10e84     A7 34 62 FC | 	wrlong	local08, fp
10e88     14 4E 85 F1 | 	sub	fp, #20
10e8c     44 FF 9F FD | 	jmp	#LR__1378
10e90                 | LR__1379
10e90     18 4E 05 F1 | 	add	fp, #24
10e94     A7 2E 02 FB | 	rdlong	local05, fp
10e98     18 4E 85 F1 | 	sub	fp, #24
10e9c     09 2E 66 F0 | 	shl	local05, #9
10ea0     0C 00 00 FF 
10ea4     D8 E4 05 F1 | 	add	objptr, ##6360
10ea8     F2 2E 02 F1 | 	add	local05, objptr
10eac     FE 2F 06 F1 | 	add	local05, #510
10eb0     17 01 58 FC | 	wrword	#0, local05
10eb4     0C 00 00 FF 
10eb8     D8 E4 85 F1 | 	sub	objptr, ##6360
10ebc                 | LR__1380
10ebc     18 4E 05 F1 | 	add	fp, #24
10ec0     A7 2E 02 FB | 	rdlong	local05, fp
10ec4     18 4E 85 F1 | 	sub	fp, #24
10ec8     09 2E 66 F0 | 	shl	local05, #9
10ecc     0C 00 00 FF 
10ed0     D8 E4 05 F1 | 	add	objptr, ##6360
10ed4     F2 2E 02 F1 | 	add	local05, objptr
10ed8     FE 2F 06 F1 | 	add	local05, #510
10edc     17 01 58 FC | 	wrword	#0, local05
10ee0     0C 00 00 FF 
10ee4     D8 E4 85 F1 | 	sub	objptr, ##6360
10ee8                 | LR__1381
10ee8     A7 F0 03 F6 | 	mov	ptra, fp
10eec     B2 00 A0 FD | 	call	#popregs_
10ef0                 | _do_defenv_ret
10ef0     2D 00 64 FD | 	ret
10ef4                 | 
10ef4                 | ' 
10ef4                 | ' '-------------------- defsnd
10ef4                 | ' 
10ef4                 | ' sub do_defsnd
10ef4                 | _do_defsnd
10ef4     04 4A 05 F6 | 	mov	COUNT_, #4
10ef8     A8 00 A0 FD | 	call	#pushregs_
10efc     88 F0 07 F1 | 	add	ptra, #136
10f00     4A 00 00 FF 
10f04     A0 E4 05 F1 | 	add	objptr, ##38048
10f08     F2 1A 02 FB | 	rdlong	arg05, objptr
10f0c     0D 19 02 F6 | 	mov	arg04, arg05
10f10     01 18 66 F0 | 	shl	arg04, #1
10f14     0D 19 02 F1 | 	add	arg04, arg05
10f18     02 18 66 F0 | 	shl	arg04, #2
10f1c     03 00 00 FF 
10f20     04 E4 85 F1 | 	sub	objptr, ##1540
10f24     F2 18 02 F1 | 	add	arg04, objptr
10f28     0C 1B 02 FB | 	rdlong	arg05, arg04
10f2c     A7 1A 62 FC | 	wrlong	arg05, fp
10f30                 | ' 
10f30                 | ' numpar=compiledline(lineptr_e).result.uresult
10f30                 | ' 
10f30                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10f30                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10f30                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10f30                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10f30                 | ' 
10f30                 | ' if numpar<2 then return
10f30     02 1A 56 F2 | 	cmps	arg05, #2 wc
10f34     47 00 00 FF 
10f38     9C E4 85 F1 | 	sub	objptr, ##36508
10f3c     98 08 90 CD |  if_b	jmp	#LR__1413
10f40                 | '  
10f40                 | ' if numpar=2 then
10f40     A7 1A 02 FB | 	rdlong	arg05, fp
10f44     02 1A 0E F2 | 	cmp	arg05, #2 wz
10f48     A4 03 90 5D |  if_ne	jmp	#LR__1400
10f4c     64 C9 BF FD | 	call	#_pop
10f50     FF 1A 02 F6 | 	mov	arg05, result3
10f54     2C 4E 05 F1 | 	add	fp, #44
10f58     A7 FA 61 FC | 	wrlong	result1, fp
10f5c     04 4E 05 F1 | 	add	fp, #4
10f60     A7 FC 61 FC | 	wrlong	result2, fp
10f64     04 4E 05 F1 | 	add	fp, #4
10f68     A7 1A 62 FC | 	wrlong	arg05, fp
10f6c                 | '   t1=pop()
10f6c                 | '   if t1.result_type=result_string2 then 
10f6c     34 4E 85 F1 | 	sub	fp, #52
10f70     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10f74     20 00 90 5D |  if_ne	jmp	#LR__1390
10f78     2C 4E 05 F1 | 	add	fp, #44
10f7c     A7 12 02 FB | 	rdlong	arg01, fp
10f80     2C 4E 85 F1 | 	sub	fp, #44
10f84     A4 CA BF FD | 	call	#_convertstring
10f88     38 4E 05 F1 | 	add	fp, #56
10f8c     A7 FA 61 FC | 	wrlong	result1, fp
10f90     38 4E 85 F1 | 	sub	fp, #56
10f94     58 00 90 FD | 	jmp	#LR__1393
10f98                 | LR__1390
10f98     34 4E 05 F1 | 	add	fp, #52
10f9c     A7 1A 02 FB | 	rdlong	arg05, fp
10fa0     34 4E 85 F1 | 	sub	fp, #52
10fa4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10fa8     18 00 90 5D |  if_ne	jmp	#LR__1391
10fac     2C 4E 05 F1 | 	add	fp, #44
10fb0     A7 1A 02 FB | 	rdlong	arg05, fp
10fb4     0C 4E 05 F1 | 	add	fp, #12
10fb8     A7 1A 62 FC | 	wrlong	arg05, fp
10fbc     38 4E 85 F1 | 	sub	fp, #56
10fc0     2C 00 90 FD | 	jmp	#LR__1392
10fc4                 | LR__1391
10fc4     C4 01 00 FF 
10fc8     75 1A 06 F6 | 	mov	arg05, ##@LR__6068
10fcc     38 4E 05 F1 | 	add	fp, #56
10fd0     A7 1A 62 FC | 	wrlong	arg05, fp
10fd4     0C 4E 85 F1 | 	sub	fp, #12
10fd8     A7 12 02 F6 | 	mov	arg01, fp
10fdc     2C 4E 85 F1 | 	sub	fp, #44
10fe0     B4 CA BF FD | 	call	#_converttoint
10fe4     14 4E 05 F1 | 	add	fp, #20
10fe8     A7 FA 61 FC | 	wrlong	result1, fp
10fec     14 4E 85 F1 | 	sub	fp, #20
10ff0                 | LR__1392
10ff0                 | LR__1393
10ff0                 | '   if s<>"" then 
10ff0     38 4E 05 F1 | 	add	fp, #56
10ff4     A7 12 02 FB | 	rdlong	arg01, fp
10ff8     38 4E 85 F1 | 	sub	fp, #56
10ffc     C4 01 00 FF 
11000     76 14 06 F6 | 	mov	arg02, ##@LR__6069
11004     14 74 B1 FD | 	call	#__system___string_cmp
11008     00 FA 0D F2 | 	cmp	result1, #0 wz
1100c     E4 01 90 AD |  if_e	jmp	#LR__1396
11010     A0 C8 BF FD | 	call	#_pop
11014     FF 1A 02 F6 | 	mov	arg05, result3
11018     2C 4E 05 F1 | 	add	fp, #44
1101c     A7 FA 61 FC | 	wrlong	result1, fp
11020     04 4E 05 F1 | 	add	fp, #4
11024     A7 FC 61 FC | 	wrlong	result2, fp
11028     04 4E 05 F1 | 	add	fp, #4
1102c     A7 1A 62 FC | 	wrlong	arg05, fp
11030     08 4E 85 F1 | 	sub	fp, #8
11034     A7 12 02 F6 | 	mov	arg01, fp
11038     2C 4E 85 F1 | 	sub	fp, #44
1103c     58 CA BF FD | 	call	#_converttoint
11040     10 4E 05 F1 | 	add	fp, #16
11044     A7 FA 61 FC | 	wrlong	result1, fp
11048                 | '     t1=pop()
11048                 | '     channel=converttoint(t1) : if channel>31 then return
11048     FD 1A 02 F6 | 	mov	arg05, result1
1104c     10 4E 85 F1 | 	sub	fp, #16
11050     20 1A 56 F2 | 	cmps	arg05, #32 wc
11054     80 07 90 3D |  if_ae	jmp	#LR__1413
11058                 | '     close #9 : open "/sd/media/s/"+s for input as #9
11058     09 12 06 F6 | 	mov	arg01, #9
1105c     F4 C6 B1 FD | 	call	#__system__close
11060     09 26 06 F6 | 	mov	local01, #9
11064     C4 01 00 FF 
11068     77 12 06 F6 | 	mov	arg01, ##@LR__6070
1106c     38 4E 05 F1 | 	add	fp, #56
11070     A7 14 02 FB | 	rdlong	arg02, fp
11074     38 4E 85 F1 | 	sub	fp, #56
11078     D4 73 B1 FD | 	call	#__system___string_concat
1107c     FD 14 02 F6 | 	mov	arg02, result1
11080     13 13 02 F6 | 	mov	arg01, local01
11084     00 16 06 F6 | 	mov	arg03, #0
11088     6C 7F B1 FD | 	call	#__system___basic_open_string
1108c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11090     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11094     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11098     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1109c     52 00 00 FF 
110a0     68 E5 05 F1 | 	add	objptr, ##42344
110a4     F2 FA 61 FC | 	wrlong	result1, objptr
110a8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
110a8     52 00 00 FF 
110ac     68 E5 85 F1 | 	sub	objptr, ##42344
110b0     B0 00 90 AD |  if_e	jmp	#LR__1394
110b4     00 12 06 F6 | 	mov	arg01, #0
110b8     E8 CF B1 FD | 	call	#__system___getiolock_0625
110bc     FD 12 02 F6 | 	mov	arg01, result1
110c0     30 73 B1 FD | 	call	#__system___lockmem
110c4     C4 01 00 FF 
110c8     84 14 06 F6 | 	mov	arg02, ##@LR__6071
110cc     00 12 06 F6 | 	mov	arg01, #0
110d0     00 16 06 F6 | 	mov	arg03, #0
110d4     14 80 B1 FD | 	call	#__system___basic_print_string
110d8     52 00 00 FF 
110dc     68 E5 05 F1 | 	add	objptr, ##42344
110e0     F2 14 02 FB | 	rdlong	arg02, objptr
110e4     52 00 00 FF 
110e8     68 E5 85 F1 | 	sub	objptr, ##42344
110ec     00 12 06 F6 | 	mov	arg01, #0
110f0     00 16 06 F6 | 	mov	arg03, #0
110f4     0A 18 06 F6 | 	mov	arg04, #10
110f8     34 80 B1 FD | 	call	#__system___basic_print_integer
110fc     C4 01 00 FF 
11100     92 14 06 F6 | 	mov	arg02, ##@LR__6072
11104     00 12 06 F6 | 	mov	arg01, #0
11108     00 16 06 F6 | 	mov	arg03, #0
1110c     DC 7F B1 FD | 	call	#__system___basic_print_string
11110     00 26 06 F6 | 	mov	local01, #0
11114     52 00 00 FF 
11118     68 E5 05 F1 | 	add	objptr, ##42344
1111c     F2 12 02 FB | 	rdlong	arg01, objptr
11120     52 00 00 FF 
11124     68 E5 85 F1 | 	sub	objptr, ##42344
11128     58 9C B1 FD | 	call	#__system___strerror
1112c     FD 14 02 F6 | 	mov	arg02, result1
11130     13 13 02 F6 | 	mov	arg01, local01
11134     00 16 06 F6 | 	mov	arg03, #0
11138     B0 7F B1 FD | 	call	#__system___basic_print_string
1113c     00 12 06 F6 | 	mov	arg01, #0
11140     0A 14 06 F6 | 	mov	arg02, #10
11144     00 16 06 F6 | 	mov	arg03, #0
11148     48 7F B1 FD | 	call	#__system___basic_print_char
1114c     00 12 06 F6 | 	mov	arg01, #0
11150     50 CF B1 FD | 	call	#__system___getiolock_0625
11154     FD 00 68 FC | 	wrlong	#0, result1
11158     09 12 06 F6 | 	mov	arg01, #9
1115c     F4 C5 B1 FD | 	call	#__system__close
11160     74 06 90 FD | 	jmp	#LR__1413
11164                 | LR__1394
11164                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
11164     04 4E 05 F1 | 	add	fp, #4
11168     A7 00 68 FC | 	wrlong	#0, fp
1116c                 | LR__1395
1116c     A7 26 02 FB | 	rdlong	local01, fp
11170     01 26 66 F0 | 	shl	local01, #1
11174     11 14 06 F6 | 	mov	arg02, #17
11178     13 15 02 F1 | 	add	arg02, local01
1117c     78 4E 05 F1 | 	add	fp, #120
11180     A7 16 02 F6 | 	mov	arg03, fp
11184     7C 4E 85 F1 | 	sub	fp, #124
11188     09 12 06 F6 | 	mov	arg01, #9
1118c     01 18 06 F6 | 	mov	arg04, #1
11190     02 1A 06 F6 | 	mov	arg05, #2
11194     D0 80 B1 FD | 	call	#__system___basic_get
11198     10 4E 05 F1 | 	add	fp, #16
1119c     A7 12 02 FB | 	rdlong	arg01, fp
111a0     0B 12 66 F0 | 	shl	arg01, #11
111a4     0C 4E 85 F1 | 	sub	fp, #12
111a8     A7 26 02 FB | 	rdlong	local01, fp
111ac     01 26 66 F0 | 	shl	local01, #1
111b0     13 13 02 F1 | 	add	arg01, local01
111b4     78 4E 05 F1 | 	add	fp, #120
111b8     A7 14 E2 FA | 	rdword	arg02, fp
111bc     7C 4E 85 F1 | 	sub	fp, #124
111c0     0F 14 66 F7 | 	signx	arg02, #15
111c4     BC 39 B1 FD | 	call	#_psdpoke
111c8     04 4E 05 F1 | 	add	fp, #4
111cc     A7 26 02 FB | 	rdlong	local01, fp
111d0     01 26 06 F1 | 	add	local01, #1
111d4     A7 26 62 FC | 	wrlong	local01, fp
111d8     02 00 00 FF 
111dc     01 26 56 F2 | 	cmps	local01, ##1025 wc
111e0     88 FF 9F CD |  if_b	jmp	#LR__1395
111e4     04 4E 85 F1 | 	sub	fp, #4
111e8                 | '     close #9
111e8     09 12 06 F6 | 	mov	arg01, #9
111ec     64 C5 B1 FD | 	call	#__system__close
111f0                 | '     return
111f0     E4 05 90 FD | 	jmp	#LR__1413
111f4                 | LR__1396
111f4                 | '     if wptr < ($80000 - 2048) then 
111f4     14 4E 05 F1 | 	add	fp, #20
111f8     A7 26 02 FB | 	rdlong	local01, fp
111fc     14 4E 85 F1 | 	sub	fp, #20
11200     FC 03 00 FF 
11204     00 26 56 F2 | 	cmps	local01, ##522240 wc
11208     70 00 90 3D |  if_ae	jmp	#LR__1398
1120c                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
1120c     04 4E 05 F1 | 	add	fp, #4
11210     A7 00 68 FC | 	wrlong	#0, fp
11214     04 4E 85 F1 | 	sub	fp, #4
11218                 | LR__1397
11218     10 4E 05 F1 | 	add	fp, #16
1121c     A7 26 02 FB | 	rdlong	local01, fp
11220     0B 26 66 F0 | 	shl	local01, #11
11224     0C 4E 85 F1 | 	sub	fp, #12
11228     A7 1A 02 FB | 	rdlong	arg05, fp
1122c     0D 19 02 F6 | 	mov	arg04, arg05
11230     01 18 66 F0 | 	shl	arg04, #1
11234     0C 27 02 F1 | 	add	local01, arg04
11238     10 4E 05 F1 | 	add	fp, #16
1123c     A7 12 02 FB | 	rdlong	arg01, fp
11240     14 4E 85 F1 | 	sub	fp, #20
11244     01 1A 66 F0 | 	shl	arg05, #1
11248     0D 13 02 F1 | 	add	arg01, arg05
1124c     09 15 E2 FA | 	rdword	arg02, arg01
11250     13 13 02 F6 | 	mov	arg01, local01
11254     2C 39 B1 FD | 	call	#_psdpoke
11258     04 4E 05 F1 | 	add	fp, #4
1125c     A7 26 02 FB | 	rdlong	local01, fp
11260     01 26 06 F1 | 	add	local01, #1
11264     A7 26 62 FC | 	wrlong	local01, fp
11268     04 4E 85 F1 | 	sub	fp, #4
1126c     02 00 00 FF 
11270     00 26 56 F2 | 	cmps	local01, ##1024 wc
11274     A0 FF 9F CD |  if_b	jmp	#LR__1397
11278     5C 05 90 FD | 	jmp	#LR__1413
1127c                 | LR__1398
1127c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
1127c     04 4E 05 F1 | 	add	fp, #4
11280     A7 00 68 FC | 	wrlong	#0, fp
11284     04 4E 85 F1 | 	sub	fp, #4
11288                 | LR__1399
11288     10 4E 05 F1 | 	add	fp, #16
1128c     A7 26 02 FB | 	rdlong	local01, fp
11290     0B 26 66 F0 | 	shl	local01, #11
11294     0C 4E 85 F1 | 	sub	fp, #12
11298     A7 1A 02 FB | 	rdlong	arg05, fp
1129c     0D 19 02 F6 | 	mov	arg04, arg05
112a0     01 18 66 F0 | 	shl	arg04, #1
112a4     0C 27 02 F1 | 	add	local01, arg04
112a8     10 4E 05 F1 | 	add	fp, #16
112ac     A7 12 02 FB | 	rdlong	arg01, fp
112b0     14 4E 85 F1 | 	sub	fp, #20
112b4     01 1A 66 F0 | 	shl	arg05, #1
112b8     0D 13 02 F1 | 	add	arg01, arg05
112bc     04 3A B1 FD | 	call	#_psdpeek
112c0     FD 14 02 F6 | 	mov	arg02, result1
112c4     13 13 02 F6 | 	mov	arg01, local01
112c8     B8 38 B1 FD | 	call	#_psdpoke
112cc     04 4E 05 F1 | 	add	fp, #4
112d0     A7 26 02 FB | 	rdlong	local01, fp
112d4     01 26 06 F1 | 	add	local01, #1
112d8     A7 26 62 FC | 	wrlong	local01, fp
112dc     04 4E 85 F1 | 	sub	fp, #4
112e0     02 00 00 FF 
112e4     00 26 56 F2 | 	cmps	local01, ##1024 wc
112e8     9C FF 9F CD |  if_b	jmp	#LR__1399
112ec                 | '     return 
112ec     E8 04 90 FD | 	jmp	#LR__1413
112f0                 | '   return
112f0                 | LR__1400
112f0                 | ' for i=0 to 15 : harm(i)=0: next i  
112f0     04 4E 05 F1 | 	add	fp, #4
112f4     A7 00 68 FC | 	wrlong	#0, fp
112f8     97 16 48 FB | 	callpa	#(@LR__1402-@LR__1401)>>2,fcache_load_ptr_
112fc                 | LR__1401
112fc     A7 26 02 FB | 	rdlong	local01, fp
11300     02 26 66 F0 | 	shl	local01, #2
11304     38 4E 05 F1 | 	add	fp, #56
11308     A7 26 02 F1 | 	add	local01, fp
1130c     13 01 68 FC | 	wrlong	#0, local01
11310     38 4E 85 F1 | 	sub	fp, #56
11314     A7 26 02 FB | 	rdlong	local01, fp
11318     01 26 06 F1 | 	add	local01, #1
1131c     A7 26 62 FC | 	wrlong	local01, fp
11320     10 26 56 F2 | 	cmps	local01, #16 wc
11324     D4 FF 9F CD |  if_b	jmp	#LR__1401
11328                 | LR__1402
11328     04 4E 85 F1 | 	sub	fp, #4
1132c                 | ' for i=numpar to 2 step -1 
1132c     A7 26 02 FB | 	rdlong	local01, fp
11330     04 4E 05 F1 | 	add	fp, #4
11334     A7 26 62 FC | 	wrlong	local01, fp
11338     04 4E 85 F1 | 	sub	fp, #4
1133c                 | LR__1403
1133c     74 C5 BF FD | 	call	#_pop
11340     2C 4E 05 F1 | 	add	fp, #44
11344     A7 FA 61 FC | 	wrlong	result1, fp
11348     04 4E 05 F1 | 	add	fp, #4
1134c     A7 FC 61 FC | 	wrlong	result2, fp
11350     04 4E 05 F1 | 	add	fp, #4
11354     A7 FE 61 FC | 	wrlong	result3, fp
11358     30 4E 85 F1 | 	sub	fp, #48
1135c     A7 26 02 FB | 	rdlong	local01, fp
11360     02 26 86 F1 | 	sub	local01, #2
11364     02 26 66 F0 | 	shl	local01, #2
11368     38 4E 05 F1 | 	add	fp, #56
1136c     A7 26 02 F1 | 	add	local01, fp
11370     10 4E 85 F1 | 	sub	fp, #16
11374     A7 12 02 F6 | 	mov	arg01, fp
11378     2C 4E 85 F1 | 	sub	fp, #44
1137c     D4 C7 BF FD | 	call	#_converttofloat
11380     13 FB 61 FC | 	wrlong	result1, local01
11384     04 4E 05 F1 | 	add	fp, #4
11388     A7 26 02 FB | 	rdlong	local01, fp
1138c     01 26 86 F1 | 	sub	local01, #1
11390     A7 26 62 FC | 	wrlong	local01, fp
11394     04 4E 85 F1 | 	sub	fp, #4
11398     02 26 56 F2 | 	cmps	local01, #2 wc
1139c     9C FF 9F 3D |  if_ae	jmp	#LR__1403
113a0     10 C5 BF FD | 	call	#_pop
113a4     FF 26 02 F6 | 	mov	local01, result3
113a8     2C 4E 05 F1 | 	add	fp, #44
113ac     A7 FA 61 FC | 	wrlong	result1, fp
113b0     04 4E 05 F1 | 	add	fp, #4
113b4     A7 FC 61 FC | 	wrlong	result2, fp
113b8     04 4E 05 F1 | 	add	fp, #4
113bc     A7 26 62 FC | 	wrlong	local01, fp
113c0     08 4E 85 F1 | 	sub	fp, #8
113c4     A7 12 02 F6 | 	mov	arg01, fp
113c8     2C 4E 85 F1 | 	sub	fp, #44
113cc     C8 C6 BF FD | 	call	#_converttoint
113d0     10 4E 05 F1 | 	add	fp, #16
113d4     A7 FA 61 FC | 	wrlong	result1, fp
113d8                 | ' t1=pop()
113d8                 | ' channel=converttoint(t1) : : if channel>31 then return
113d8     FD 26 02 F6 | 	mov	local01, result1
113dc     10 4E 85 F1 | 	sub	fp, #16
113e0     20 26 56 F2 | 	cmps	local01, #32 wc
113e4     F0 03 90 3D |  if_ae	jmp	#LR__1413
113e8     20 4E 05 F1 | 	add	fp, #32
113ec     A7 00 68 FC | 	wrlong	#0, fp
113f0                 | ' max=0
113f0                 | ' if harm(0)<0 then
113f0     1C 4E 05 F1 | 	add	fp, #28
113f4     A7 12 02 FB | 	rdlong	arg01, fp
113f8     3C 4E 85 F1 | 	sub	fp, #60
113fc     00 14 06 F6 | 	mov	arg02, #0
11400     01 16 06 F6 | 	mov	arg03, #1
11404     9C A2 B1 FD | 	call	#__system___float_cmp
11408     00 FA 55 F2 | 	cmps	result1, #0 wc
1140c     04 01 90 3D |  if_ae	jmp	#LR__1406
11410     3C 4E 05 F1 | 	add	fp, #60
11414     A7 FA 01 FB | 	rdlong	result1, fp
11418     1F FA 05 F4 | 	bitl	result1, #31
1141c     24 4E 85 F1 | 	sub	fp, #36
11420     A7 FA 61 FC | 	wrlong	result1, fp
11424     28 4E 05 F1 | 	add	fp, #40
11428     A7 FA 01 FB | 	rdlong	result1, fp
1142c     1F FA 05 F4 | 	bitl	result1, #31
11430     24 4E 85 F1 | 	sub	fp, #36
11434     A7 FA 61 FC | 	wrlong	result1, fp
11438     20 4E 05 F1 | 	add	fp, #32
1143c     00 C0 9F FF 
11440     A7 00 68 FC | 	wrlong	##1065353216, fp
11444     24 4E 85 F1 | 	sub	fp, #36
11448     A7 26 02 FB | 	rdlong	local01, fp
1144c     28 4E 05 F1 | 	add	fp, #40
11450     A7 26 62 FC | 	wrlong	local01, fp
11454     24 4E 85 F1 | 	sub	fp, #36
11458     A7 26 02 FB | 	rdlong	local01, fp
1145c     28 4E 05 F1 | 	add	fp, #40
11460     A7 26 62 FC | 	wrlong	local01, fp
11464                 | '   harm(0)=1
11464                 | '   harm(1)=even
11464                 | '   harm(2)=odd
11464                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
11464     40 4E 85 F1 | 	sub	fp, #64
11468     A7 06 68 FC | 	wrlong	#3, fp
1146c                 | LR__1404
1146c     A7 1A 02 FB | 	rdlong	arg05, fp
11470     0D 29 02 F6 | 	mov	local02, arg05
11474     02 28 66 F0 | 	shl	local02, #2
11478     38 4E 05 F1 | 	add	fp, #56
1147c     A7 28 02 F1 | 	add	local02, fp
11480     02 1A 86 F1 | 	sub	arg05, #2
11484     02 1A 66 F0 | 	shl	arg05, #2
11488     A7 1A 02 F1 | 	add	arg05, fp
1148c     0D 13 02 FB | 	rdlong	arg01, arg05
11490     24 4E 85 F1 | 	sub	fp, #36
11494     A7 14 02 FB | 	rdlong	arg02, fp
11498     18 4E 85 F1 | 	sub	fp, #24
1149c     D0 9D B1 FD | 	call	#__system___float_mul
114a0     14 FB 61 FC | 	wrlong	result1, local02
114a4     04 4E 05 F1 | 	add	fp, #4
114a8     A7 2A 02 FB | 	rdlong	local03, fp
114ac     02 2A 06 F1 | 	add	local03, #2
114b0     A7 2A 62 FC | 	wrlong	local03, fp
114b4     10 2A 56 F2 | 	cmps	local03, #16 wc
114b8     B0 FF 9F CD |  if_b	jmp	#LR__1404
114bc                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
114bc     A7 08 68 FC | 	wrlong	#4, fp
114c0                 | LR__1405
114c0     A7 2A 02 FB | 	rdlong	local03, fp
114c4     15 29 02 F6 | 	mov	local02, local03
114c8     02 28 66 F0 | 	shl	local02, #2
114cc     38 4E 05 F1 | 	add	fp, #56
114d0     A7 28 02 F1 | 	add	local02, fp
114d4     02 2A 86 F1 | 	sub	local03, #2
114d8     02 2A 66 F0 | 	shl	local03, #2
114dc     A7 2A 02 F1 | 	add	local03, fp
114e0     15 13 02 FB | 	rdlong	arg01, local03
114e4     20 4E 85 F1 | 	sub	fp, #32
114e8     A7 14 02 FB | 	rdlong	arg02, fp
114ec     1C 4E 85 F1 | 	sub	fp, #28
114f0     7C 9D B1 FD | 	call	#__system___float_mul
114f4     14 FB 61 FC | 	wrlong	result1, local02
114f8     04 4E 05 F1 | 	add	fp, #4
114fc     A7 2A 02 FB | 	rdlong	local03, fp
11500     02 2A 06 F1 | 	add	local03, #2
11504     A7 2A 62 FC | 	wrlong	local03, fp
11508     0F 2A 56 F2 | 	cmps	local03, #15 wc
1150c     B0 FF 9F CD |  if_b	jmp	#LR__1405
11510     04 4E 85 F1 | 	sub	fp, #4
11514                 | LR__1406
11514                 | ' if harm(0)>=0 then ' synthesize with harmonics
11514     3C 4E 05 F1 | 	add	fp, #60
11518     A7 12 02 FB | 	rdlong	arg01, fp
1151c     3C 4E 85 F1 | 	sub	fp, #60
11520     00 14 06 F6 | 	mov	arg02, #0
11524     01 16 66 F6 | 	neg	arg03, #1
11528     78 A1 B1 FD | 	call	#__system___float_cmp
1152c     00 FA 55 F2 | 	cmps	result1, #0 wc
11530     A4 02 90 CD |  if_b	jmp	#LR__1412
11534                 | '   for i=0 to 1023
11534     04 4E 05 F1 | 	add	fp, #4
11538     A7 00 68 FC | 	wrlong	#0, fp
1153c     04 4E 85 F1 | 	sub	fp, #4
11540                 | LR__1407
11540     24 4E 05 F1 | 	add	fp, #36
11544     A7 00 68 FC | 	wrlong	#0, fp
11548                 | '     spl=0
11548                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
11548     1C 4E 85 F1 | 	sub	fp, #28
1154c     A7 00 68 FC | 	wrlong	#0, fp
11550                 | LR__1408
11550     A7 28 02 FB | 	rdlong	local02, fp
11554     02 28 66 F0 | 	shl	local02, #2
11558     34 4E 05 F1 | 	add	fp, #52
1155c     A7 28 02 F1 | 	add	local02, fp
11560     14 2B 02 FB | 	rdlong	local03, local02
11564     87 E4 1D FF 
11568     DB 29 06 F6 | 	mov	local02, ##1003032539
1156c     38 4E 85 F1 | 	sub	fp, #56
11570     A7 12 02 FB | 	rdlong	arg01, fp
11574     04 4E 85 F1 | 	sub	fp, #4
11578     09 13 52 F6 | 	abs	arg01, arg01 wc
1157c     1F 2C C6 C9 |  if_b	decod	local04, #31
11580     00 2C 06 36 |  if_ae	mov	local04, #0
11584     E4 98 B1 FD | 	call	#__system___float_fromuns
11588     16 FB 61 F5 | 	xor	result1, local04
1158c     FD 14 02 F6 | 	mov	arg02, result1
11590     14 13 02 F6 | 	mov	arg01, local02
11594     D8 9C B1 FD | 	call	#__system___float_mul
11598     FD 28 02 F6 | 	mov	local02, result1
1159c     08 4E 05 F1 | 	add	fp, #8
115a0     A7 12 02 FB | 	rdlong	arg01, fp
115a4     08 4E 85 F1 | 	sub	fp, #8
115a8     01 12 06 F1 | 	add	arg01, #1
115ac     09 13 52 F6 | 	abs	arg01, arg01 wc
115b0     1F 2C C6 C9 |  if_b	decod	local04, #31
115b4     00 2C 06 36 |  if_ae	mov	local04, #0
115b8     B0 98 B1 FD | 	call	#__system___float_fromuns
115bc     16 FB 61 F5 | 	xor	result1, local04
115c0     FD 14 02 F6 | 	mov	arg02, result1
115c4     14 13 02 F6 | 	mov	arg01, local02
115c8     A4 9C B1 FD | 	call	#__system___float_mul
115cc     FD 12 02 F6 | 	mov	arg01, result1
115d0     00 A6 B1 FD | 	call	#__system____builtin_sinf
115d4     FD 14 02 F6 | 	mov	arg02, result1
115d8     15 13 02 F6 | 	mov	arg01, local03
115dc     90 9C B1 FD | 	call	#__system___float_mul
115e0     FD 14 02 F6 | 	mov	arg02, result1
115e4     24 4E 05 F1 | 	add	fp, #36
115e8     A7 12 02 FB | 	rdlong	arg01, fp
115ec     24 4E 85 F1 | 	sub	fp, #36
115f0     AC 98 B1 FD | 	call	#__system___float_add
115f4     24 4E 05 F1 | 	add	fp, #36
115f8     A7 FA 61 FC | 	wrlong	result1, fp
115fc     1C 4E 85 F1 | 	sub	fp, #28
11600     A7 16 02 FB | 	rdlong	arg03, fp
11604     01 16 06 F1 | 	add	arg03, #1
11608     A7 16 62 FC | 	wrlong	arg03, fp
1160c     10 16 56 F2 | 	cmps	arg03, #16 wc
11610     3C FF 9F CD |  if_b	jmp	#LR__1408
11614                 | '     if abs(spl)>max then max=abs(spl)  
11614     1C 4E 05 F1 | 	add	fp, #28
11618     A7 12 02 FB | 	rdlong	arg01, fp
1161c     1F 12 06 F4 | 	bitl	arg01, #31
11620     04 4E 85 F1 | 	sub	fp, #4
11624     A7 14 02 FB | 	rdlong	arg02, fp
11628     20 4E 85 F1 | 	sub	fp, #32
1162c     01 16 66 F6 | 	neg	arg03, #1
11630     70 A0 B1 FD | 	call	#__system___float_cmp
11634     01 FA 55 F2 | 	cmps	result1, #1 wc
11638     18 00 90 CD |  if_b	jmp	#LR__1409
1163c     24 4E 05 F1 | 	add	fp, #36
11640     A7 FA 01 FB | 	rdlong	result1, fp
11644     1F FA 05 F4 | 	bitl	result1, #31
11648     04 4E 85 F1 | 	sub	fp, #4
1164c     A7 FA 61 FC | 	wrlong	result1, fp
11650     20 4E 85 F1 | 	sub	fp, #32
11654                 | LR__1409
11654     04 4E 05 F1 | 	add	fp, #4
11658     A7 2A 02 FB | 	rdlong	local03, fp
1165c     01 2A 06 F1 | 	add	local03, #1
11660     A7 2A 62 FC | 	wrlong	local03, fp
11664     04 4E 85 F1 | 	sub	fp, #4
11668     02 00 00 FF 
1166c     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11670     CC FE 9F CD |  if_b	jmp	#LR__1407
11674                 | '   for i=0 to 1023
11674     04 4E 05 F1 | 	add	fp, #4
11678     A7 00 68 FC | 	wrlong	#0, fp
1167c     04 4E 85 F1 | 	sub	fp, #4
11680                 | LR__1410
11680     24 4E 05 F1 | 	add	fp, #36
11684     A7 00 68 FC | 	wrlong	#0, fp
11688                 | '     spl=0
11688                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
11688     1C 4E 85 F1 | 	sub	fp, #28
1168c     A7 00 68 FC | 	wrlong	#0, fp
11690                 | LR__1411
11690     A7 2A 02 FB | 	rdlong	local03, fp
11694     02 2A 66 F0 | 	shl	local03, #2
11698     34 4E 05 F1 | 	add	fp, #52
1169c     A7 2A 02 F1 | 	add	local03, fp
116a0     15 2B 02 FB | 	rdlong	local03, local03
116a4     1C 4E 85 F1 | 	sub	fp, #28
116a8     A7 14 02 FB | 	rdlong	arg02, fp
116ac     20 4E 85 F1 | 	sub	fp, #32
116b0     58 7F 23 FF 
116b4     00 12 06 F6 | 	mov	arg01, ##1191096320
116b8     B8 9D B1 FD | 	call	#__system___float_div
116bc     FD 14 02 F6 | 	mov	arg02, result1
116c0     15 13 02 F6 | 	mov	arg01, local03
116c4     A8 9B B1 FD | 	call	#__system___float_mul
116c8     FD 2A 02 F6 | 	mov	local03, result1
116cc     87 E4 1D FF 
116d0     DB 29 06 F6 | 	mov	local02, ##1003032539
116d4     04 4E 05 F1 | 	add	fp, #4
116d8     A7 12 02 FB | 	rdlong	arg01, fp
116dc     04 4E 85 F1 | 	sub	fp, #4
116e0     09 13 52 F6 | 	abs	arg01, arg01 wc
116e4     1F 2C C6 C9 |  if_b	decod	local04, #31
116e8     00 2C 06 36 |  if_ae	mov	local04, #0
116ec     7C 97 B1 FD | 	call	#__system___float_fromuns
116f0     16 FB 61 F5 | 	xor	result1, local04
116f4     FD 14 02 F6 | 	mov	arg02, result1
116f8     14 13 02 F6 | 	mov	arg01, local02
116fc     70 9B B1 FD | 	call	#__system___float_mul
11700     FD 28 02 F6 | 	mov	local02, result1
11704     08 4E 05 F1 | 	add	fp, #8
11708     A7 12 02 FB | 	rdlong	arg01, fp
1170c     08 4E 85 F1 | 	sub	fp, #8
11710     01 12 06 F1 | 	add	arg01, #1
11714     09 13 52 F6 | 	abs	arg01, arg01 wc
11718     1F 2C C6 C9 |  if_b	decod	local04, #31
1171c     00 2C 06 36 |  if_ae	mov	local04, #0
11720     48 97 B1 FD | 	call	#__system___float_fromuns
11724     16 FB 61 F5 | 	xor	result1, local04
11728     FD 14 02 F6 | 	mov	arg02, result1
1172c     14 13 02 F6 | 	mov	arg01, local02
11730     3C 9B B1 FD | 	call	#__system___float_mul
11734     FD 12 02 F6 | 	mov	arg01, result1
11738     98 A4 B1 FD | 	call	#__system____builtin_sinf
1173c     FD 14 02 F6 | 	mov	arg02, result1
11740     15 13 02 F6 | 	mov	arg01, local03
11744     28 9B B1 FD | 	call	#__system___float_mul
11748     FD 14 02 F6 | 	mov	arg02, result1
1174c     24 4E 05 F1 | 	add	fp, #36
11750     A7 12 02 FB | 	rdlong	arg01, fp
11754     24 4E 85 F1 | 	sub	fp, #36
11758     44 97 B1 FD | 	call	#__system___float_add
1175c     24 4E 05 F1 | 	add	fp, #36
11760     A7 FA 61 FC | 	wrlong	result1, fp
11764     1C 4E 85 F1 | 	sub	fp, #28
11768     A7 2A 02 FB | 	rdlong	local03, fp
1176c     01 2A 06 F1 | 	add	local03, #1
11770     A7 2A 62 FC | 	wrlong	local03, fp
11774     10 2A 56 F2 | 	cmps	local03, #16 wc
11778     14 FF 9F CD |  if_b	jmp	#LR__1411
1177c     08 4E 05 F1 | 	add	fp, #8
11780     A7 2A 02 FB | 	rdlong	local03, fp
11784     0B 2A 66 F0 | 	shl	local03, #11
11788     0C 4E 85 F1 | 	sub	fp, #12
1178c     A7 28 02 FB | 	rdlong	local02, fp
11790     01 28 66 F0 | 	shl	local02, #1
11794     14 2B 02 F1 | 	add	local03, local02
11798     20 4E 05 F1 | 	add	fp, #32
1179c     A7 12 02 FB | 	rdlong	arg01, fp
117a0     24 4E 85 F1 | 	sub	fp, #36
117a4     01 14 06 F6 | 	mov	arg02, #1
117a8     8C 9F B1 FD | 	call	#__system___float_tointeger
117ac     FD 14 02 F6 | 	mov	arg02, result1
117b0     15 13 02 F6 | 	mov	arg01, local03
117b4     CC 33 B1 FD | 	call	#_psdpoke
117b8     04 4E 05 F1 | 	add	fp, #4
117bc     A7 2A 02 FB | 	rdlong	local03, fp
117c0     01 2A 06 F1 | 	add	local03, #1
117c4     A7 2A 62 FC | 	wrlong	local03, fp
117c8     04 4E 85 F1 | 	sub	fp, #4
117cc     02 00 00 FF 
117d0     00 2A 56 F2 | 	cmps	local03, ##1024 wc
117d4     A8 FE 9F CD |  if_b	jmp	#LR__1410
117d8                 | LR__1412
117d8                 | LR__1413
117d8     A7 F0 03 F6 | 	mov	ptra, fp
117dc     B2 00 A0 FD | 	call	#popregs_
117e0                 | _do_defsnd_ret
117e0     2D 00 64 FD | 	ret
117e4                 | 
117e4                 | ' 
117e4                 | ' '-------------------- defsprite
117e4                 | ' 
117e4                 | ' sub do_defsprite
117e4                 | _do_defsprite
117e4     07 4A 05 F6 | 	mov	COUNT_, #7
117e8     A8 00 A0 FD | 	call	#pushregs_
117ec     60 F0 07 F1 | 	add	ptra, #96
117f0     C0 C0 BF FD | 	call	#_pop
117f4     FD 16 02 F6 | 	mov	arg03, result1
117f8     FE 14 02 F6 | 	mov	arg02, result2
117fc     FF 12 02 F6 | 	mov	arg01, result3
11800     30 4E 05 F1 | 	add	fp, #48
11804     A7 16 62 FC | 	wrlong	arg03, fp
11808     04 4E 05 F1 | 	add	fp, #4
1180c     A7 14 62 FC | 	wrlong	arg02, fp
11810     04 4E 05 F1 | 	add	fp, #4
11814     A7 12 62 FC | 	wrlong	arg01, fp
11818     38 4E 85 F1 | 	sub	fp, #56
1181c     94 C0 BF FD | 	call	#_pop
11820     FD 16 02 F6 | 	mov	arg03, result1
11824     FE 14 02 F6 | 	mov	arg02, result2
11828     FF 12 02 F6 | 	mov	arg01, result3
1182c     24 4E 05 F1 | 	add	fp, #36
11830     A7 16 62 FC | 	wrlong	arg03, fp
11834     04 4E 05 F1 | 	add	fp, #4
11838     A7 14 62 FC | 	wrlong	arg02, fp
1183c     04 4E 05 F1 | 	add	fp, #4
11840     A7 12 62 FC | 	wrlong	arg01, fp
11844     2C 4E 85 F1 | 	sub	fp, #44
11848     68 C0 BF FD | 	call	#_pop
1184c     FD 16 02 F6 | 	mov	arg03, result1
11850     FE 14 02 F6 | 	mov	arg02, result2
11854     FF 12 02 F6 | 	mov	arg01, result3
11858     18 4E 05 F1 | 	add	fp, #24
1185c     A7 16 62 FC | 	wrlong	arg03, fp
11860     04 4E 05 F1 | 	add	fp, #4
11864     A7 14 62 FC | 	wrlong	arg02, fp
11868     04 4E 05 F1 | 	add	fp, #4
1186c     A7 12 62 FC | 	wrlong	arg01, fp
11870     20 4E 85 F1 | 	sub	fp, #32
11874     3C C0 BF FD | 	call	#_pop
11878     FD 16 02 F6 | 	mov	arg03, result1
1187c     FE 14 02 F6 | 	mov	arg02, result2
11880     FF 12 02 F6 | 	mov	arg01, result3
11884     0C 4E 05 F1 | 	add	fp, #12
11888     A7 16 62 FC | 	wrlong	arg03, fp
1188c     04 4E 05 F1 | 	add	fp, #4
11890     A7 14 62 FC | 	wrlong	arg02, fp
11894     04 4E 05 F1 | 	add	fp, #4
11898     A7 12 62 FC | 	wrlong	arg01, fp
1189c     14 4E 85 F1 | 	sub	fp, #20
118a0     10 C0 BF FD | 	call	#_pop
118a4     FF 16 02 F6 | 	mov	arg03, result3
118a8     A7 FA 61 FC | 	wrlong	result1, fp
118ac     04 4E 05 F1 | 	add	fp, #4
118b0     A7 FC 61 FC | 	wrlong	result2, fp
118b4     04 4E 05 F1 | 	add	fp, #4
118b8     A7 16 62 FC | 	wrlong	arg03, fp
118bc     08 4E 85 F1 | 	sub	fp, #8
118c0     A7 12 02 F6 | 	mov	arg01, fp
118c4     D0 C1 BF FD | 	call	#_converttoint
118c8     3C 4E 05 F1 | 	add	fp, #60
118cc     A7 FA 61 FC | 	wrlong	result1, fp
118d0     30 4E 85 F1 | 	sub	fp, #48
118d4     A7 12 02 F6 | 	mov	arg01, fp
118d8     0C 4E 85 F1 | 	sub	fp, #12
118dc     B8 C1 BF FD | 	call	#_converttoint
118e0     40 4E 05 F1 | 	add	fp, #64
118e4     A7 FA 61 FC | 	wrlong	result1, fp
118e8     28 4E 85 F1 | 	sub	fp, #40
118ec     A7 12 02 F6 | 	mov	arg01, fp
118f0     18 4E 85 F1 | 	sub	fp, #24
118f4     A0 C1 BF FD | 	call	#_converttoint
118f8     44 4E 05 F1 | 	add	fp, #68
118fc     A7 FA 61 FC | 	wrlong	result1, fp
11900     20 4E 85 F1 | 	sub	fp, #32
11904     A7 12 02 F6 | 	mov	arg01, fp
11908     24 4E 85 F1 | 	sub	fp, #36
1190c     88 C1 BF FD | 	call	#_converttoint
11910     48 4E 05 F1 | 	add	fp, #72
11914     A7 FA 61 FC | 	wrlong	result1, fp
11918     18 4E 85 F1 | 	sub	fp, #24
1191c     A7 12 02 F6 | 	mov	arg01, fp
11920     30 4E 85 F1 | 	sub	fp, #48
11924     70 C1 BF FD | 	call	#_converttoint
11928     4C 4E 05 F1 | 	add	fp, #76
1192c     A7 FA 61 FC | 	wrlong	result1, fp
11930                 | ' 
11930                 | ' t5=pop()
11930                 | ' t4=pop()
11930                 | ' t3=pop()
11930                 | ' t2=pop()
11930                 | ' t1=pop()
11930                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11930                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11930     10 4E 85 F1 | 	sub	fp, #16
11934     A7 16 02 FB | 	rdlong	arg03, fp
11938     3C 4E 85 F1 | 	sub	fp, #60
1193c     02 16 66 F0 | 	shl	arg03, #2
11940     52 00 00 FF 
11944     AC E4 05 F1 | 	add	objptr, ##42156
11948     F2 16 02 F1 | 	add	arg03, objptr
1194c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11950     52 00 00 FF 
11954     AC E4 85 F1 | 	sub	objptr, ##42156
11958     2C 00 90 AD |  if_e	jmp	#LR__1420
1195c     3C 4E 05 F1 | 	add	fp, #60
11960     A7 16 02 FB | 	rdlong	arg03, fp
11964     3C 4E 85 F1 | 	sub	fp, #60
11968     02 16 66 F0 | 	shl	arg03, #2
1196c     52 00 00 FF 
11970     AC E4 05 F1 | 	add	objptr, ##42156
11974     F2 16 02 F1 | 	add	arg03, objptr
11978     0B 13 02 FB | 	rdlong	arg01, arg03
1197c     52 00 00 FF 
11980     AC E4 85 F1 | 	sub	objptr, ##42156
11984     50 AD B1 FD | 	call	#__system___gc_free
11988                 | LR__1420
11988     3C 4E 05 F1 | 	add	fp, #60
1198c     A7 26 02 FB | 	rdlong	local01, fp
11990     0C 4E 05 F1 | 	add	fp, #12
11994     A7 16 02 FB | 	rdlong	arg03, fp
11998     04 4E 05 F1 | 	add	fp, #4
1199c     A7 14 02 FB | 	rdlong	arg02, fp
119a0     0A 17 02 FD | 	qmul	arg03, arg02
119a4     02 26 66 F0 | 	shl	local01, #2
119a8     52 00 00 FF 
119ac     AC E4 05 F1 | 	add	objptr, ##42156
119b0     F2 26 02 F1 | 	add	local01, objptr
119b4     4C 4E 85 F1 | 	sub	fp, #76
119b8     52 00 00 FF 
119bc     AC E4 85 F1 | 	sub	objptr, ##42156
119c0     18 12 62 FD | 	getqx	arg01
119c4     D4 AB B1 FD | 	call	#__system___gc_alloc_managed
119c8     13 FB 61 FC | 	wrlong	result1, local01
119cc                 | ' for y=a3 to a3+a5-1
119cc     44 4E 05 F1 | 	add	fp, #68
119d0     A7 28 02 FB | 	rdlong	local02, fp
119d4     0C 4E 05 F1 | 	add	fp, #12
119d8     A7 28 62 FC | 	wrlong	local02, fp
119dc     0C 4E 85 F1 | 	sub	fp, #12
119e0     A7 2A 02 FB | 	rdlong	local03, fp
119e4     08 4E 05 F1 | 	add	fp, #8
119e8     A7 2C 02 FB | 	rdlong	local04, fp
119ec     4C 4E 85 F1 | 	sub	fp, #76
119f0     16 2B 02 F1 | 	add	local03, local04
119f4                 | LR__1421
119f4     50 4E 05 F1 | 	add	fp, #80
119f8     A7 28 02 FB | 	rdlong	local02, fp
119fc     50 4E 85 F1 | 	sub	fp, #80
11a00     15 29 52 F2 | 	cmps	local02, local03 wc
11a04     F4 00 90 3D |  if_ae	jmp	#LR__1424
11a08                 | '   for x=a2 to a4+a2-1
11a08     40 4E 05 F1 | 	add	fp, #64
11a0c     A7 26 02 FB | 	rdlong	local01, fp
11a10     14 4E 05 F1 | 	add	fp, #20
11a14     A7 26 62 FC | 	wrlong	local01, fp
11a18     0C 4E 85 F1 | 	sub	fp, #12
11a1c     A7 2E 02 FB | 	rdlong	local05, fp
11a20     08 4E 85 F1 | 	sub	fp, #8
11a24     A7 30 02 FB | 	rdlong	local06, fp
11a28     40 4E 85 F1 | 	sub	fp, #64
11a2c     18 2F 02 F1 | 	add	local05, local06
11a30                 | LR__1422
11a30     54 4E 05 F1 | 	add	fp, #84
11a34     A7 26 02 FB | 	rdlong	local01, fp
11a38     54 4E 85 F1 | 	sub	fp, #84
11a3c     17 27 52 F2 | 	cmps	local01, local05 wc
11a40     A0 00 90 3D |  if_ae	jmp	#LR__1423
11a44     3C 4E 05 F1 | 	add	fp, #60
11a48     A7 30 02 FB | 	rdlong	local06, fp
11a4c     18 4E 05 F1 | 	add	fp, #24
11a50     A7 2C 02 FB | 	rdlong	local04, fp
11a54     14 4E 85 F1 | 	sub	fp, #20
11a58     A7 28 02 FB | 	rdlong	local02, fp
11a5c     10 4E 05 F1 | 	add	fp, #16
11a60     A7 26 02 FB | 	rdlong	local01, fp
11a64     13 17 02 F6 | 	mov	arg03, local01
11a68     0C 4E 85 F1 | 	sub	fp, #12
11a6c     A7 14 02 FB | 	rdlong	arg02, fp
11a70     0A 17 82 F1 | 	sub	arg03, arg02
11a74     04 4E 05 F1 | 	add	fp, #4
11a78     A7 14 02 FB | 	rdlong	arg02, fp
11a7c     0A 17 02 FD | 	qmul	arg03, arg02
11a80     02 30 66 F0 | 	shl	local06, #2
11a84     52 00 00 FF 
11a88     AC E4 05 F1 | 	add	objptr, ##42156
11a8c     F2 30 02 F1 | 	add	local06, objptr
11a90     18 31 02 FB | 	rdlong	local06, local06
11a94     16 33 02 F6 | 	mov	local07, local04
11a98     14 33 82 F1 | 	sub	local07, local02
11a9c     52 00 00 FF 
11aa0     AC E4 85 F1 | 	sub	objptr, ##42156
11aa4     F2 12 02 FB | 	rdlong	arg01, objptr
11aa8     16 13 02 F1 | 	add	arg01, local04
11aac     48 4E 85 F1 | 	sub	fp, #72
11ab0     0A 26 66 F0 | 	shl	local01, #10
11ab4     13 13 02 F1 | 	add	arg01, local01
11ab8     18 2C 62 FD | 	getqx	local04
11abc     16 33 02 F1 | 	add	local07, local04
11ac0     18 33 02 F1 | 	add	local07, local06
11ac4     4C 31 B1 FD | 	call	#_pspeek
11ac8     19 FB 41 FC | 	wrbyte	result1, local07
11acc     54 4E 05 F1 | 	add	fp, #84
11ad0     A7 32 02 FB | 	rdlong	local07, fp
11ad4     01 32 06 F1 | 	add	local07, #1
11ad8     A7 32 62 FC | 	wrlong	local07, fp
11adc     54 4E 85 F1 | 	sub	fp, #84
11ae0     4C FF 9F FD | 	jmp	#LR__1422
11ae4                 | LR__1423
11ae4     50 4E 05 F1 | 	add	fp, #80
11ae8     A7 32 02 FB | 	rdlong	local07, fp
11aec     01 32 06 F1 | 	add	local07, #1
11af0     A7 32 62 FC | 	wrlong	local07, fp
11af4     50 4E 85 F1 | 	sub	fp, #80
11af8     F8 FE 9F FD | 	jmp	#LR__1421
11afc                 | LR__1424
11afc     3C 4E 05 F1 | 	add	fp, #60
11b00     A7 32 02 FB | 	rdlong	local07, fp
11b04     19 13 02 F6 | 	mov	arg01, local07
11b08     3C 4E 85 F1 | 	sub	fp, #60
11b0c     02 32 66 F0 | 	shl	local07, #2
11b10     52 00 00 FF 
11b14     AC E4 05 F1 | 	add	objptr, ##42156
11b18     F2 32 02 F1 | 	add	local07, objptr
11b1c     19 15 02 FB | 	rdlong	arg02, local07
11b20     52 00 00 FF 
11b24     AC E4 85 F1 | 	sub	objptr, ##42156
11b28     48 3E B1 FD | 	call	#_hg010b_spin2_setspriteptr
11b2c     3C 4E 05 F1 | 	add	fp, #60
11b30     A7 12 02 FB | 	rdlong	arg01, fp
11b34     0C 4E 05 F1 | 	add	fp, #12
11b38     A7 14 02 FB | 	rdlong	arg02, fp
11b3c     04 4E 05 F1 | 	add	fp, #4
11b40     A7 16 02 FB | 	rdlong	arg03, fp
11b44     4C 4E 85 F1 | 	sub	fp, #76
11b48     B8 3E B1 FD | 	call	#_hg010b_spin2_setspritesize
11b4c     A7 F0 03 F6 | 	mov	ptra, fp
11b50     B2 00 A0 FD | 	call	#popregs_
11b54                 | _do_defsprite_ret
11b54     2D 00 64 FD | 	ret
11b58                 | 
11b58                 | ' 
11b58                 | ' '-------------------- deg
11b58                 | ' 
11b58                 | ' sub do_deg
11b58                 | _do_deg
11b58     52 00 00 FF 
11b5c     00 E5 05 F1 | 	add	objptr, ##42240
11b60     7D 47 9E FF 
11b64     F2 6A 68 FC | 	wrlong	##1016003125, objptr
11b68     04 E4 05 F1 | 	add	objptr, #4
11b6c     97 32 A1 FF 
11b70     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11b74     52 00 00 FF 
11b78     04 E5 85 F1 | 	sub	objptr, ##42244
11b7c                 | _do_deg_ret
11b7c     2D 00 64 FD | 	ret
11b80                 | 
11b80                 | ' 
11b80                 | ' '-------------------- delete
11b80                 | ' 
11b80                 | ' sub do_delete
11b80                 | _do_delete
11b80     05 4A 05 F6 | 	mov	COUNT_, #5
11b84     A8 00 A0 FD | 	call	#pushregs_
11b88     28 BD BF FD | 	call	#_pop
11b8c     FE 18 02 F6 | 	mov	arg04, result2
11b90     FF 16 02 F6 | 	mov	arg03, result3
11b94     FD 26 02 F6 | 	mov	local01, result1
11b98     0C 29 02 F6 | 	mov	local02, arg04
11b9c     0B 2B 02 F6 | 	mov	local03, arg03
11ba0                 | ' 
11ba0                 | ' t1=pop()
11ba0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11ba0     2B 2A 0E F2 | 	cmp	local03, #43 wz
11ba4     10 00 90 5D |  if_ne	jmp	#LR__1430
11ba8     13 13 02 F6 | 	mov	arg01, local01
11bac     7C BE BF FD | 	call	#_convertstring
11bb0     FD 26 02 F6 | 	mov	local01, result1
11bb4     1F 2A 06 F6 | 	mov	local03, #31
11bb8                 | LR__1430
11bb8                 | ' if t1.result_type<>result_string then printerror(15): return
11bb8     1F 2A 0E F2 | 	cmp	local03, #31 wz
11bbc     10 00 90 AD |  if_e	jmp	#LR__1431
11bc0     0F 12 06 F6 | 	mov	arg01, #15
11bc4     00 14 06 F6 | 	mov	arg02, #0
11bc8     D0 2D B1 FD | 	call	#_printerror
11bcc     E4 00 90 FD | 	jmp	#LR__1435
11bd0                 | LR__1431
11bd0                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11bd0     4A 00 00 FF 
11bd4     B4 E4 05 F1 | 	add	objptr, ##38068
11bd8     F2 12 02 FB | 	rdlong	arg01, objptr
11bdc     4A 00 00 FF 
11be0     B4 E4 85 F1 | 	sub	objptr, ##38068
11be4     C4 01 00 FF 
11be8     95 14 06 F6 | 	mov	arg02, ##@LR__6073
11bec     2C 68 B1 FD | 	call	#__system___string_cmp
11bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
11bf4     34 00 90 AD |  if_e	jmp	#LR__1432
11bf8     4A 00 00 FF 
11bfc     B4 E4 05 F1 | 	add	objptr, ##38068
11c00     F2 12 02 FB | 	rdlong	arg01, objptr
11c04     4A 00 00 FF 
11c08     B4 E4 85 F1 | 	sub	objptr, ##38068
11c0c     C4 01 00 FF 
11c10     97 14 06 F6 | 	mov	arg02, ##@LR__6074
11c14     38 68 B1 FD | 	call	#__system___string_concat
11c18     FD 12 02 F6 | 	mov	arg01, result1
11c1c     13 15 02 F6 | 	mov	arg02, local01
11c20     2C 68 B1 FD | 	call	#__system___string_concat
11c24     FD 2C 02 F6 | 	mov	local04, result1
11c28     14 00 90 FD | 	jmp	#LR__1433
11c2c                 | LR__1432
11c2c     C4 01 00 FF 
11c30     99 12 06 F6 | 	mov	arg01, ##@LR__6075
11c34     13 15 02 F6 | 	mov	arg02, local01
11c38     14 68 B1 FD | 	call	#__system___string_concat
11c3c     FD 2C 02 F6 | 	mov	local04, result1
11c40                 | LR__1433
11c40     16 13 02 F6 | 	mov	arg01, local04
11c44     7C 8F B1 FD | 	call	#__system___remove
11c48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11c4c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11c50     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11c54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11c58     FD 2E 0A F6 | 	mov	local05, result1 wz
11c5c                 | ' kill filename$
11c5c                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11c5c     54 00 90 AD |  if_e	jmp	#LR__1434
11c60     00 12 06 F6 | 	mov	arg01, #0
11c64     3C C4 B1 FD | 	call	#__system___getiolock_0625
11c68     FD 12 02 F6 | 	mov	arg01, result1
11c6c     84 67 B1 FD | 	call	#__system___lockmem
11c70     C4 01 00 FF 
11c74     9B 14 06 F6 | 	mov	arg02, ##@LR__6076
11c78     00 12 06 F6 | 	mov	arg01, #0
11c7c     00 16 06 F6 | 	mov	arg03, #0
11c80     68 74 B1 FD | 	call	#__system___basic_print_string
11c84     00 12 06 F6 | 	mov	arg01, #0
11c88     17 15 02 F6 | 	mov	arg02, local05
11c8c     00 16 06 F6 | 	mov	arg03, #0
11c90     0A 18 06 F6 | 	mov	arg04, #10
11c94     98 74 B1 FD | 	call	#__system___basic_print_integer
11c98     00 12 06 F6 | 	mov	arg01, #0
11c9c     0A 14 06 F6 | 	mov	arg02, #10
11ca0     00 16 06 F6 | 	mov	arg03, #0
11ca4     EC 73 B1 FD | 	call	#__system___basic_print_char
11ca8     00 12 06 F6 | 	mov	arg01, #0
11cac     F4 C3 B1 FD | 	call	#__system___getiolock_0625
11cb0     FD 00 68 FC | 	wrlong	#0, result1
11cb4                 | LR__1434
11cb4                 | LR__1435
11cb4     A7 F0 03 F6 | 	mov	ptra, fp
11cb8     B2 00 A0 FD | 	call	#popregs_
11cbc                 | _do_delete_ret
11cbc     2D 00 64 FD | 	ret
11cc0                 | 
11cc0                 | ' 
11cc0                 | ' '-------------------- dir
11cc0                 | ' 
11cc0                 | ' sub do_dir
11cc0                 | _do_dir
11cc0     13 4A 05 F6 | 	mov	COUNT_, #19
11cc4     A8 00 A0 FD | 	call	#pushregs_
11cc8     01 00 00 FF 
11ccc     38 F0 07 F1 | 	add	ptra, ##568
11cd0                 | ' 
11cd0                 | ' print "Current directory: "; currentdir$ 
11cd0     00 12 06 F6 | 	mov	arg01, #0
11cd4     CC C3 B1 FD | 	call	#__system___getiolock_0625
11cd8     FD 12 02 F6 | 	mov	arg01, result1
11cdc     14 67 B1 FD | 	call	#__system___lockmem
11ce0     C4 01 00 FF 
11ce4     D3 14 06 F6 | 	mov	arg02, ##@LR__6077
11ce8     00 12 06 F6 | 	mov	arg01, #0
11cec     00 16 06 F6 | 	mov	arg03, #0
11cf0     F8 73 B1 FD | 	call	#__system___basic_print_string
11cf4     4A 00 00 FF 
11cf8     B4 E4 05 F1 | 	add	objptr, ##38068
11cfc     F2 14 02 FB | 	rdlong	arg02, objptr
11d00     4A 00 00 FF 
11d04     B4 E4 85 F1 | 	sub	objptr, ##38068
11d08     00 12 06 F6 | 	mov	arg01, #0
11d0c     00 16 06 F6 | 	mov	arg03, #0
11d10     D8 73 B1 FD | 	call	#__system___basic_print_string
11d14     00 12 06 F6 | 	mov	arg01, #0
11d18     0A 14 06 F6 | 	mov	arg02, #10
11d1c     00 16 06 F6 | 	mov	arg03, #0
11d20     70 73 B1 FD | 	call	#__system___basic_print_char
11d24     01 26 06 F6 | 	mov	local01, #1
11d28     00 12 06 F6 | 	mov	arg01, #0
11d2c     74 C3 B1 FD | 	call	#__system___getiolock_0625
11d30     FD 00 68 FC | 	wrlong	#0, result1
11d34     00 28 06 F6 | 	mov	local02, #0
11d38     00 2A 06 F6 | 	mov	local03, #0
11d3c                 | ' px=0
11d3c                 | ' for i=0 to 127: filelist(i)="" : next i
11d3c     00 2C 06 F6 | 	mov	local04, #0
11d40     1C 4E 05 F1 | 	add	fp, #28
11d44     97 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
11d48                 | LR__1440
11d48     16 2F 02 F6 | 	mov	local05, local04
11d4c     02 2E 66 F0 | 	shl	local05, #2
11d50     A7 2E 02 F1 | 	add	local05, fp
11d54     C4 01 00 FF 
11d58     E7 30 06 F6 | 	mov	local06, ##@LR__6078
11d5c     17 31 62 FC | 	wrlong	local06, local05
11d60     01 2C 06 F1 | 	add	local04, #1
11d64     80 2C 56 F2 | 	cmps	local04, #128 wc
11d68     DC FF 9F CD |  if_b	jmp	#LR__1440
11d6c                 | LR__1441
11d6c     1C 4E 85 F1 | 	sub	fp, #28
11d70     C4 01 00 FF 
11d74     E8 12 06 F6 | 	mov	arg01, ##@LR__6079
11d78     10 14 06 F6 | 	mov	arg02, #16
11d7c     E4 C4 B1 FD | 	call	#__system___basic_dir
11d80     FD 32 02 F6 | 	mov	local07, result1
11d84     00 34 06 F6 | 	mov	local08, #0
11d88                 | ' filename=dir$("*", fbDirectory)
11d88                 | ' n=0
11d88                 | ' while filename <> "" andalso filename <> nil andalso n<128
11d88                 | LR__1442
11d88     C4 01 00 FF 
11d8c     EA 36 06 F6 | 	mov	local09, ##@LR__6080
11d90     19 13 02 F6 | 	mov	arg01, local07
11d94     1B 15 02 F6 | 	mov	arg02, local09
11d98     80 66 B1 FD | 	call	#__system___string_cmp
11d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
11da0     68 00 90 AD |  if_e	jmp	#LR__1443
11da4     00 36 06 F6 | 	mov	local09, #0
11da8     19 13 02 F6 | 	mov	arg01, local07
11dac     00 14 06 F6 | 	mov	arg02, #0
11db0     68 66 B1 FD | 	call	#__system___string_cmp
11db4     00 FA 0D F2 | 	cmp	result1, #0 wz
11db8     50 00 90 AD |  if_e	jmp	#LR__1443
11dbc     80 34 56 F2 | 	cmps	local08, #128 wc
11dc0     48 00 90 3D |  if_ae	jmp	#LR__1443
11dc4     C4 01 00 FF 
11dc8     EB 12 06 F6 | 	mov	arg01, ##@LR__6081
11dcc     19 15 02 F6 | 	mov	arg02, local07
11dd0     7C 66 B1 FD | 	call	#__system___string_concat
11dd4     FD 32 02 F6 | 	mov	local07, result1
11dd8     1A 2F 02 F6 | 	mov	local05, local08
11ddc     02 2E 66 F0 | 	shl	local05, #2
11de0     1C 4E 05 F1 | 	add	fp, #28
11de4     A7 2E 02 F1 | 	add	local05, fp
11de8     17 33 62 FC | 	wrlong	local07, local05
11dec     01 34 06 F1 | 	add	local08, #1
11df0     00 2E 06 F6 | 	mov	local05, #0
11df4     00 12 06 F6 | 	mov	arg01, #0
11df8     00 14 06 F6 | 	mov	arg02, #0
11dfc     1C 4E 85 F1 | 	sub	fp, #28
11e00     60 C4 B1 FD | 	call	#__system___basic_dir
11e04     FD 32 02 F6 | 	mov	local07, result1
11e08     7C FF 9F FD | 	jmp	#LR__1442
11e0c                 | LR__1443
11e0c                 | ' for i=0 to n-1			' now sort this
11e0c     00 2C 06 F6 | 	mov	local04, #0
11e10     1A 39 02 F6 | 	mov	local10, local08
11e14                 | LR__1444
11e14     1C 2D 52 F2 | 	cmps	local04, local10 wc
11e18     DC 00 90 3D |  if_ae	jmp	#LR__1448
11e1c     00 3A 06 F6 | 	mov	local11, #0
11e20                 | '   swapped=false
11e20                 | '   for j=0 to n-i-2
11e20     00 3C 06 F6 | 	mov	local12, #0
11e24     1A 3F 02 F6 | 	mov	local13, local08
11e28     16 3F 82 F1 | 	sub	local13, local04
11e2c     01 3E 86 F1 | 	sub	local13, #1
11e30                 | LR__1445
11e30     1F 3D 52 F2 | 	cmps	local12, local13 wc
11e34     B0 00 90 3D |  if_ae	jmp	#LR__1447
11e38                 | '     if filelist(j) > filelist(j+1) then
11e38     1E 37 02 F6 | 	mov	local09, local12
11e3c     02 36 66 F0 | 	shl	local09, #2
11e40     1C 4E 05 F1 | 	add	fp, #28
11e44     A7 36 02 F1 | 	add	local09, fp
11e48     1B 13 02 FB | 	rdlong	arg01, local09
11e4c     1E 37 02 F6 | 	mov	local09, local12
11e50     01 36 06 F1 | 	add	local09, #1
11e54     1B 31 02 F6 | 	mov	local06, local09
11e58     02 30 66 F0 | 	shl	local06, #2
11e5c     A7 26 02 F6 | 	mov	local01, fp
11e60     A7 30 02 F1 | 	add	local06, fp
11e64     18 2F 02 FB | 	rdlong	local05, local06
11e68     17 15 02 F6 | 	mov	arg02, local05
11e6c     1C 4E 85 F1 | 	sub	fp, #28
11e70     A8 65 B1 FD | 	call	#__system___string_cmp
11e74     01 FA 55 F2 | 	cmps	result1, #1 wc
11e78     64 00 90 CD |  if_b	jmp	#LR__1446
11e7c     1E 37 02 F6 | 	mov	local09, local12
11e80     01 36 06 F1 | 	add	local09, #1
11e84     02 36 66 F0 | 	shl	local09, #2
11e88     1C 4E 05 F1 | 	add	fp, #28
11e8c     A7 36 02 F1 | 	add	local09, fp
11e90     1B 3B 02 FB | 	rdlong	local11, local09
11e94     1E 31 02 F6 | 	mov	local06, local12
11e98     02 30 66 F0 | 	shl	local06, #2
11e9c     A7 30 02 F1 | 	add	local06, fp
11ea0     18 2F 02 FB | 	rdlong	local05, local06
11ea4     1E 37 02 F6 | 	mov	local09, local12
11ea8     1B 31 02 F6 | 	mov	local06, local09
11eac     02 30 66 F0 | 	shl	local06, #2
11eb0     A7 26 02 F6 | 	mov	local01, fp
11eb4     A7 30 02 F1 | 	add	local06, fp
11eb8     18 3B 62 FC | 	wrlong	local11, local06
11ebc     1E 29 02 F6 | 	mov	local02, local12
11ec0     01 28 06 F1 | 	add	local02, #1
11ec4     14 41 02 F6 | 	mov	local14, local02
11ec8     02 40 66 F0 | 	shl	local14, #2
11ecc     A7 42 02 F6 | 	mov	local15, fp
11ed0     A7 40 02 F1 | 	add	local14, fp
11ed4     20 2F 62 FC | 	wrlong	local05, local14
11ed8     01 3A 66 F6 | 	neg	local11, #1
11edc     1C 4E 85 F1 | 	sub	fp, #28
11ee0                 | LR__1446
11ee0     01 3C 06 F1 | 	add	local12, #1
11ee4     48 FF 9F FD | 	jmp	#LR__1445
11ee8                 | LR__1447
11ee8                 | ' if not swapped then exit for
11ee8     1D 45 22 F6 | 	not	local16, local11
11eec     00 44 0E F2 | 	cmp	local16, #0 wz
11ef0     01 2C 06 A1 |  if_e	add	local04, #1
11ef4     1C FF 9F AD |  if_e	jmp	#LR__1444
11ef8                 | LR__1448
11ef8                 | ' for i=0 to n-1
11ef8     00 2C 06 F6 | 	mov	local04, #0
11efc     1A 47 02 F6 | 	mov	local17, local08
11f00                 | LR__1449
11f00     23 2D 52 F2 | 	cmps	local04, local17 wc
11f04     94 00 90 3D |  if_ae	jmp	#LR__1451
11f08                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11f08     00 12 06 F6 | 	mov	arg01, #0
11f0c     94 C1 B1 FD | 	call	#__system___getiolock_0625
11f10     FD 12 02 F6 | 	mov	arg01, result1
11f14     DC 64 B1 FD | 	call	#__system___lockmem
11f18     16 29 02 F6 | 	mov	local02, local04
11f1c     02 28 66 F0 | 	shl	local02, #2
11f20     1C 4E 05 F1 | 	add	fp, #28
11f24     A7 40 02 F6 | 	mov	local14, fp
11f28     A7 28 02 F1 | 	add	local02, fp
11f2c     14 15 02 FB | 	rdlong	arg02, local02
11f30     00 26 06 F6 | 	mov	local01, #0
11f34     00 12 06 F6 | 	mov	arg01, #0
11f38     00 16 06 F6 | 	mov	arg03, #0
11f3c     1C 4E 85 F1 | 	sub	fp, #28
11f40     A8 71 B1 FD | 	call	#__system___basic_print_string
11f44     00 12 06 F6 | 	mov	arg01, #0
11f48     58 C1 B1 FD | 	call	#__system___getiolock_0625
11f4c     FD 00 68 FC | 	wrlong	#0, result1
11f50     40 2A 06 F1 | 	add	local03, #64
11f54     15 13 02 F6 | 	mov	arg01, local03
11f58     38 47 B1 FD | 	call	#_hg010b_spin2_setcursorx
11f5c     00 2B 56 F2 | 	cmps	local03, #256 wc
11f60     30 00 90 CD |  if_b	jmp	#LR__1450
11f64     00 2A 06 F6 | 	mov	local03, #0
11f68     00 12 06 F6 | 	mov	arg01, #0
11f6c     34 C1 B1 FD | 	call	#__system___getiolock_0625
11f70     FD 12 02 F6 | 	mov	arg01, result1
11f74     7C 64 B1 FD | 	call	#__system___lockmem
11f78     00 12 06 F6 | 	mov	arg01, #0
11f7c     0A 14 06 F6 | 	mov	arg02, #10
11f80     00 16 06 F6 | 	mov	arg03, #0
11f84     0C 71 B1 FD | 	call	#__system___basic_print_char
11f88     00 12 06 F6 | 	mov	arg01, #0
11f8c     14 C1 B1 FD | 	call	#__system___getiolock_0625
11f90     FD 00 68 FC | 	wrlong	#0, result1
11f94                 | LR__1450
11f94     01 2C 06 F1 | 	add	local04, #1
11f98     64 FF 9F FD | 	jmp	#LR__1449
11f9c                 | LR__1451
11f9c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11f9c     80 34 56 F2 | 	cmps	local08, #128 wc
11fa0     44 00 90 CD |  if_b	jmp	#LR__1452
11fa4     00 12 06 F6 | 	mov	arg01, #0
11fa8     F8 C0 B1 FD | 	call	#__system___getiolock_0625
11fac     FD 12 02 F6 | 	mov	arg01, result1
11fb0     40 64 B1 FD | 	call	#__system___lockmem
11fb4     C4 01 00 FF 
11fb8     F2 14 06 F6 | 	mov	arg02, ##@LR__6082
11fbc     00 12 06 F6 | 	mov	arg01, #0
11fc0     00 16 06 F6 | 	mov	arg03, #0
11fc4     24 71 B1 FD | 	call	#__system___basic_print_string
11fc8     00 12 06 F6 | 	mov	arg01, #0
11fcc     0A 14 06 F6 | 	mov	arg02, #10
11fd0     00 16 06 F6 | 	mov	arg03, #0
11fd4     BC 70 B1 FD | 	call	#__system___basic_print_char
11fd8     00 12 06 F6 | 	mov	arg01, #0
11fdc     C4 C0 B1 FD | 	call	#__system___getiolock_0625
11fe0     FD 00 68 FC | 	wrlong	#0, result1
11fe4     00 26 06 F6 | 	mov	local01, #0
11fe8                 | LR__1452
11fe8                 | ' print
11fe8     00 12 06 F6 | 	mov	arg01, #0
11fec     B4 C0 B1 FD | 	call	#__system___getiolock_0625
11ff0     FD 12 02 F6 | 	mov	arg01, result1
11ff4     FC 63 B1 FD | 	call	#__system___lockmem
11ff8     00 12 06 F6 | 	mov	arg01, #0
11ffc     0A 14 06 F6 | 	mov	arg02, #10
12000     00 16 06 F6 | 	mov	arg03, #0
12004     8C 70 B1 FD | 	call	#__system___basic_print_char
12008     00 12 06 F6 | 	mov	arg01, #0
1200c     94 C0 B1 FD | 	call	#__system___getiolock_0625
12010     FD 00 68 FC | 	wrlong	#0, result1
12014     00 30 06 F6 | 	mov	local06, #0
12018     00 34 06 F6 | 	mov	local08, #0
1201c     00 2A 06 F6 | 	mov	local03, #0
12020                 | ' return cursor_y
12020     3E E4 05 F1 | 	add	objptr, #62
12024     F2 48 C2 FA | 	rdbyte	local18, objptr
12028     3E E4 85 F1 | 	sub	objptr, #62
1202c     C4 01 00 FF 
12030     24 13 06 F6 | 	mov	arg01, ##@LR__6083
12034     21 14 06 F6 | 	mov	arg02, #33
12038     28 C2 B1 FD | 	call	#__system___basic_dir
1203c     FD 32 02 F6 | 	mov	local07, result1
12040                 | ' n=0
12040                 | ' px=0: py=v.getcursory()
12040                 | ' filename = dir$("*", fbNormal )   
12040                 | ' do while filename <> "" andalso filename <> nil andalso n<128
12040                 | LR__1453
12040     C4 01 00 FF 
12044     26 37 06 F6 | 	mov	local09, ##@LR__6084
12048     19 13 02 F6 | 	mov	arg01, local07
1204c     1B 15 02 F6 | 	mov	arg02, local09
12050     C8 63 B1 FD | 	call	#__system___string_cmp
12054     00 FA 0D F2 | 	cmp	result1, #0 wz
12058     54 00 90 AD |  if_e	jmp	#LR__1454
1205c     00 36 06 F6 | 	mov	local09, #0
12060     19 13 02 F6 | 	mov	arg01, local07
12064     00 14 06 F6 | 	mov	arg02, #0
12068     B0 63 B1 FD | 	call	#__system___string_cmp
1206c     00 FA 0D F2 | 	cmp	result1, #0 wz
12070     3C 00 90 AD |  if_e	jmp	#LR__1454
12074     80 34 56 F2 | 	cmps	local08, #128 wc
12078     34 00 90 3D |  if_ae	jmp	#LR__1454
1207c     1A 2F 02 F6 | 	mov	local05, local08
12080     02 2E 66 F0 | 	shl	local05, #2
12084     1C 4E 05 F1 | 	add	fp, #28
12088     A7 2E 02 F1 | 	add	local05, fp
1208c     17 33 62 FC | 	wrlong	local07, local05
12090     01 34 06 F1 | 	add	local08, #1
12094     00 2E 06 F6 | 	mov	local05, #0
12098     00 12 06 F6 | 	mov	arg01, #0
1209c     00 14 06 F6 | 	mov	arg02, #0
120a0     1C 4E 85 F1 | 	sub	fp, #28
120a4     BC C1 B1 FD | 	call	#__system___basic_dir
120a8     FD 32 02 F6 | 	mov	local07, result1
120ac     90 FF 9F FD | 	jmp	#LR__1453
120b0                 | LR__1454
120b0                 | ' for i =0 to n-1
120b0     00 2C 06 F6 | 	mov	local04, #0
120b4                 | LR__1455
120b4     1A 2D 52 F2 | 	cmps	local04, local08 wc
120b8     D8 00 90 3D |  if_ae	jmp	#LR__1459
120bc     00 3A 06 F6 | 	mov	local11, #0
120c0                 | '   swapped=false
120c0                 | '   for j=0 to n-i-2
120c0     00 3C 06 F6 | 	mov	local12, #0
120c4     1A 4B 02 F6 | 	mov	local19, local08
120c8     16 4B 82 F1 | 	sub	local19, local04
120cc     01 4A 86 F1 | 	sub	local19, #1
120d0                 | LR__1456
120d0     25 3D 52 F2 | 	cmps	local12, local19 wc
120d4     AC 00 90 3D |  if_ae	jmp	#LR__1458
120d8                 | '     if filelist(j) > filelist(j+1) then
120d8     1E 37 02 F6 | 	mov	local09, local12
120dc     02 36 66 F0 | 	shl	local09, #2
120e0     1C 4E 05 F1 | 	add	fp, #28
120e4     A7 36 02 F1 | 	add	local09, fp
120e8     1B 13 02 FB | 	rdlong	arg01, local09
120ec     1E 37 02 F6 | 	mov	local09, local12
120f0     01 36 06 F1 | 	add	local09, #1
120f4     1B 31 02 F6 | 	mov	local06, local09
120f8     02 30 66 F0 | 	shl	local06, #2
120fc     A7 26 02 F6 | 	mov	local01, fp
12100     A7 30 02 F1 | 	add	local06, fp
12104     18 2F 02 FB | 	rdlong	local05, local06
12108     17 15 02 F6 | 	mov	arg02, local05
1210c     1C 4E 85 F1 | 	sub	fp, #28
12110     08 63 B1 FD | 	call	#__system___string_cmp
12114     01 FA 55 F2 | 	cmps	result1, #1 wc
12118     60 00 90 CD |  if_b	jmp	#LR__1457
1211c     1E 37 02 F6 | 	mov	local09, local12
12120     01 36 06 F1 | 	add	local09, #1
12124     02 36 66 F0 | 	shl	local09, #2
12128     1C 4E 05 F1 | 	add	fp, #28
1212c     A7 36 02 F1 | 	add	local09, fp
12130     1B 45 02 FB | 	rdlong	local16, local09
12134     1E 31 02 F6 | 	mov	local06, local12
12138     02 30 66 F0 | 	shl	local06, #2
1213c     A7 30 02 F1 | 	add	local06, fp
12140     18 2F 02 FB | 	rdlong	local05, local06
12144     1E 37 02 F6 | 	mov	local09, local12
12148     1B 31 02 F6 | 	mov	local06, local09
1214c     02 30 66 F0 | 	shl	local06, #2
12150     A7 26 02 F6 | 	mov	local01, fp
12154     A7 30 02 F1 | 	add	local06, fp
12158     18 45 62 FC | 	wrlong	local16, local06
1215c     1E 41 02 F6 | 	mov	local14, local12
12160     01 40 06 F1 | 	add	local14, #1
12164     02 40 66 F0 | 	shl	local14, #2
12168     A7 42 02 F6 | 	mov	local15, fp
1216c     A7 40 02 F1 | 	add	local14, fp
12170     20 2F 62 FC | 	wrlong	local05, local14
12174     01 3A 66 F6 | 	neg	local11, #1
12178     1C 4E 85 F1 | 	sub	fp, #28
1217c                 | LR__1457
1217c     01 3C 06 F1 | 	add	local12, #1
12180     4C FF 9F FD | 	jmp	#LR__1456
12184                 | LR__1458
12184                 | ' if not swapped then exit for
12184     1D 45 22 F6 | 	not	local16, local11
12188     00 44 0E F2 | 	cmp	local16, #0 wz
1218c     01 2C 06 A1 |  if_e	add	local04, #1
12190     20 FF 9F AD |  if_e	jmp	#LR__1455
12194                 | LR__1459
12194                 | ' for i=0 to n-1
12194     00 2C 06 F6 | 	mov	local04, #0
12198                 | LR__1460
12198     1A 2D 52 F2 | 	cmps	local04, local08 wc
1219c     8C 00 90 3D |  if_ae	jmp	#LR__1462
121a0                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
121a0     00 12 06 F6 | 	mov	arg01, #0
121a4     FC BE B1 FD | 	call	#__system___getiolock_0625
121a8     FD 12 02 F6 | 	mov	arg01, result1
121ac     44 62 B1 FD | 	call	#__system___lockmem
121b0     16 29 02 F6 | 	mov	local02, local04
121b4     02 28 66 F0 | 	shl	local02, #2
121b8     1C 4E 05 F1 | 	add	fp, #28
121bc     A7 28 02 F1 | 	add	local02, fp
121c0     14 15 02 FB | 	rdlong	arg02, local02
121c4     00 12 06 F6 | 	mov	arg01, #0
121c8     00 16 06 F6 | 	mov	arg03, #0
121cc     1C 4E 85 F1 | 	sub	fp, #28
121d0     18 6F B1 FD | 	call	#__system___basic_print_string
121d4     00 12 06 F6 | 	mov	arg01, #0
121d8     C8 BE B1 FD | 	call	#__system___getiolock_0625
121dc     FD 00 68 FC | 	wrlong	#0, result1
121e0     40 2A 06 F1 | 	add	local03, #64
121e4     15 13 02 F6 | 	mov	arg01, local03
121e8     A8 44 B1 FD | 	call	#_hg010b_spin2_setcursorx
121ec     00 2B 56 F2 | 	cmps	local03, #256 wc
121f0     30 00 90 CD |  if_b	jmp	#LR__1461
121f4     00 2A 06 F6 | 	mov	local03, #0
121f8     00 12 06 F6 | 	mov	arg01, #0
121fc     A4 BE B1 FD | 	call	#__system___getiolock_0625
12200     FD 12 02 F6 | 	mov	arg01, result1
12204     EC 61 B1 FD | 	call	#__system___lockmem
12208     00 12 06 F6 | 	mov	arg01, #0
1220c     0A 14 06 F6 | 	mov	arg02, #10
12210     00 16 06 F6 | 	mov	arg03, #0
12214     7C 6E B1 FD | 	call	#__system___basic_print_char
12218     00 12 06 F6 | 	mov	arg01, #0
1221c     84 BE B1 FD | 	call	#__system___getiolock_0625
12220     FD 00 68 FC | 	wrlong	#0, result1
12224                 | LR__1461
12224     01 2C 06 F1 | 	add	local04, #1
12228     6C FF 9F FD | 	jmp	#LR__1460
1222c                 | LR__1462
1222c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1222c     80 34 56 F2 | 	cmps	local08, #128 wc
12230     40 00 90 CD |  if_b	jmp	#LR__1463
12234     00 12 06 F6 | 	mov	arg01, #0
12238     68 BE B1 FD | 	call	#__system___getiolock_0625
1223c     FD 12 02 F6 | 	mov	arg01, result1
12240     B0 61 B1 FD | 	call	#__system___lockmem
12244     C4 01 00 FF 
12248     27 15 06 F6 | 	mov	arg02, ##@LR__6085
1224c     00 12 06 F6 | 	mov	arg01, #0
12250     00 16 06 F6 | 	mov	arg03, #0
12254     94 6E B1 FD | 	call	#__system___basic_print_string
12258     00 12 06 F6 | 	mov	arg01, #0
1225c     0A 14 06 F6 | 	mov	arg02, #10
12260     00 16 06 F6 | 	mov	arg03, #0
12264     2C 6E B1 FD | 	call	#__system___basic_print_char
12268     00 12 06 F6 | 	mov	arg01, #0
1226c     34 BE B1 FD | 	call	#__system___getiolock_0625
12270     FD 00 68 FC | 	wrlong	#0, result1
12274                 | LR__1463
12274                 | ' print
12274     00 12 06 F6 | 	mov	arg01, #0
12278     28 BE B1 FD | 	call	#__system___getiolock_0625
1227c     FD 12 02 F6 | 	mov	arg01, result1
12280     70 61 B1 FD | 	call	#__system___lockmem
12284     00 12 06 F6 | 	mov	arg01, #0
12288     0A 14 06 F6 | 	mov	arg02, #10
1228c     00 16 06 F6 | 	mov	arg03, #0
12290     00 6E B1 FD | 	call	#__system___basic_print_char
12294     00 12 06 F6 | 	mov	arg01, #0
12298     08 BE B1 FD | 	call	#__system___getiolock_0625
1229c     FD 00 68 FC | 	wrlong	#0, result1
122a0     A7 F0 03 F6 | 	mov	ptra, fp
122a4     B2 00 A0 FD | 	call	#popregs_
122a8                 | _do_dir_ret
122a8     2D 00 64 FD | 	ret
122ac                 | 
122ac                 | ' 
122ac                 | ' '-------------------- dpeek
122ac                 | ' 
122ac                 | ' sub do_dpeek
122ac                 | _do_dpeek
122ac     00 4A 05 F6 | 	mov	COUNT_, #0
122b0     A8 00 A0 FD | 	call	#pushregs_
122b4     14 F0 07 F1 | 	add	ptra, #20
122b8     F8 B5 BF FD | 	call	#_pop
122bc     A7 FA 61 FC | 	wrlong	result1, fp
122c0     04 4E 05 F1 | 	add	fp, #4
122c4     A7 FC 61 FC | 	wrlong	result2, fp
122c8     04 4E 05 F1 | 	add	fp, #4
122cc     A7 FE 61 FC | 	wrlong	result3, fp
122d0     08 4E 85 F1 | 	sub	fp, #8
122d4     A7 12 02 F6 | 	mov	arg01, fp
122d8     BC B7 BF FD | 	call	#_converttoint
122dc     0C 4E 05 F1 | 	add	fp, #12
122e0     A7 FA 61 FC | 	wrlong	result1, fp
122e4                 | ' 
122e4                 | ' t1=pop()
122e4                 | ' a=converttoint(t1)
122e4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
122e4     0C 4E 85 F1 | 	sub	fp, #12
122e8     00 04 00 FF 
122ec     00 FA 15 F2 | 	cmp	result1, ##524288 wc
122f0     1C 00 90 3D |  if_ae	jmp	#LR__1470
122f4     0C 4E 05 F1 | 	add	fp, #12
122f8     A7 12 02 FB | 	rdlong	arg01, fp
122fc     09 FB E1 FA | 	rdword	result1, arg01
12300     04 4E 05 F1 | 	add	fp, #4
12304     A7 FA 61 FC | 	wrlong	result1, fp
12308     10 4E 85 F1 | 	sub	fp, #16
1230c     1C 00 90 FD | 	jmp	#LR__1471
12310                 | LR__1470
12310     0C 4E 05 F1 | 	add	fp, #12
12314     A7 12 02 FB | 	rdlong	arg01, fp
12318     0C 4E 85 F1 | 	sub	fp, #12
1231c     A4 29 B1 FD | 	call	#_psdpeek
12320     10 4E 05 F1 | 	add	fp, #16
12324     A7 FA 61 FC | 	wrlong	result1, fp
12328     10 4E 85 F1 | 	sub	fp, #16
1232c                 | LR__1471
1232c     08 4E 05 F1 | 	add	fp, #8
12330     A7 3A 68 FC | 	wrlong	#29, fp
12334     08 4E 05 F1 | 	add	fp, #8
12338     A7 12 02 FB | 	rdlong	arg01, fp
1233c     10 4E 85 F1 | 	sub	fp, #16
12340     A7 12 62 FC | 	wrlong	arg01, fp
12344     A7 12 02 F6 | 	mov	arg01, fp
12348     00 B6 BF FD | 	call	#_push
1234c     A7 F0 03 F6 | 	mov	ptra, fp
12350     B2 00 A0 FD | 	call	#popregs_
12354                 | _do_dpeek_ret
12354     2D 00 64 FD | 	ret
12358                 | 
12358                 | ' 
12358                 | ' '-------------------- dpoke
12358                 | ' 
12358                 | ' sub do_dpoke
12358                 | _do_dpoke
12358     01 4A 05 F6 | 	mov	COUNT_, #1
1235c     A8 00 A0 FD | 	call	#pushregs_
12360     20 F0 07 F1 | 	add	ptra, #32
12364     4C B5 BF FD | 	call	#_pop
12368     FD 14 02 F6 | 	mov	arg02, result1
1236c     FE 12 02 F6 | 	mov	arg01, result2
12370     FF 26 02 F6 | 	mov	local01, result3
12374     A7 14 62 FC | 	wrlong	arg02, fp
12378     04 4E 05 F1 | 	add	fp, #4
1237c     A7 12 62 FC | 	wrlong	arg01, fp
12380     04 4E 05 F1 | 	add	fp, #4
12384     A7 26 62 FC | 	wrlong	local01, fp
12388     08 4E 85 F1 | 	sub	fp, #8
1238c     24 B5 BF FD | 	call	#_pop
12390     FF 26 02 F6 | 	mov	local01, result3
12394     0C 4E 05 F1 | 	add	fp, #12
12398     A7 FA 61 FC | 	wrlong	result1, fp
1239c     04 4E 05 F1 | 	add	fp, #4
123a0     A7 FC 61 FC | 	wrlong	result2, fp
123a4     04 4E 05 F1 | 	add	fp, #4
123a8     A7 26 62 FC | 	wrlong	local01, fp
123ac     08 4E 85 F1 | 	sub	fp, #8
123b0     A7 12 02 F6 | 	mov	arg01, fp
123b4     0C 4E 85 F1 | 	sub	fp, #12
123b8     DC B6 BF FD | 	call	#_converttoint
123bc     18 4E 05 F1 | 	add	fp, #24
123c0     A7 FA 61 FC | 	wrlong	result1, fp
123c4     18 4E 85 F1 | 	sub	fp, #24
123c8     A7 12 02 F6 | 	mov	arg01, fp
123cc     C8 B6 BF FD | 	call	#_converttoint
123d0     1C 4E 05 F1 | 	add	fp, #28
123d4     A7 FA 61 FC | 	wrlong	result1, fp
123d8                 | ' 
123d8                 | ' t1=pop() 'value
123d8                 | ' t2=pop() 
123d8                 | ' a=converttoint(t2) : v=converttoint(t1)
123d8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
123d8     04 4E 85 F1 | 	sub	fp, #4
123dc     A7 26 02 FB | 	rdlong	local01, fp
123e0     18 4E 85 F1 | 	sub	fp, #24
123e4     00 04 00 FF 
123e8     00 26 16 F2 | 	cmp	local01, ##524288 wc
123ec     1C 00 90 3D |  if_ae	jmp	#LR__1480
123f0     18 4E 05 F1 | 	add	fp, #24
123f4     A7 12 02 FB | 	rdlong	arg01, fp
123f8     04 4E 05 F1 | 	add	fp, #4
123fc     A7 14 02 FB | 	rdlong	arg02, fp
12400     1C 4E 85 F1 | 	sub	fp, #28
12404     09 15 52 FC | 	wrword	arg02, arg01
12408     18 00 90 FD | 	jmp	#LR__1481
1240c                 | LR__1480
1240c     18 4E 05 F1 | 	add	fp, #24
12410     A7 12 02 FB | 	rdlong	arg01, fp
12414     04 4E 05 F1 | 	add	fp, #4
12418     A7 14 02 FB | 	rdlong	arg02, fp
1241c     1C 4E 85 F1 | 	sub	fp, #28
12420     60 27 B1 FD | 	call	#_psdpoke
12424                 | LR__1481
12424     A7 F0 03 F6 | 	mov	ptra, fp
12428     B2 00 A0 FD | 	call	#popregs_
1242c                 | _do_dpoke_ret
1242c     2D 00 64 FD | 	ret
12430                 | 
12430                 | ' '-------------------- draw
12430                 | ' 
12430                 | ' sub do_draw
12430                 | _do_draw
12430     00 4A 05 F6 | 	mov	COUNT_, #0
12434     A8 00 A0 FD | 	call	#pushregs_
12438     20 F0 07 F1 | 	add	ptra, #32
1243c     74 B4 BF FD | 	call	#_pop
12440     FD 1A 02 F6 | 	mov	arg05, result1
12444     FE 18 02 F6 | 	mov	arg04, result2
12448     FF 16 02 F6 | 	mov	arg03, result3
1244c     0C 4E 05 F1 | 	add	fp, #12
12450     A7 1A 62 FC | 	wrlong	arg05, fp
12454     04 4E 05 F1 | 	add	fp, #4
12458     A7 18 62 FC | 	wrlong	arg04, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 16 62 FC | 	wrlong	arg03, fp
12464     14 4E 85 F1 | 	sub	fp, #20
12468     48 B4 BF FD | 	call	#_pop
1246c     FF 1A 02 F6 | 	mov	arg05, result3
12470     A7 FA 61 FC | 	wrlong	result1, fp
12474     04 4E 05 F1 | 	add	fp, #4
12478     A7 FC 61 FC | 	wrlong	result2, fp
1247c     04 4E 05 F1 | 	add	fp, #4
12480     A7 1A 62 FC | 	wrlong	arg05, fp
12484     08 4E 85 F1 | 	sub	fp, #8
12488     A7 12 02 F6 | 	mov	arg01, fp
1248c     08 B6 BF FD | 	call	#_converttoint
12490     18 4E 05 F1 | 	add	fp, #24
12494     A7 FA 61 FC | 	wrlong	result1, fp
12498     0C 4E 85 F1 | 	sub	fp, #12
1249c     A7 12 02 F6 | 	mov	arg01, fp
124a0     0C 4E 85 F1 | 	sub	fp, #12
124a4     F0 B5 BF FD | 	call	#_converttoint
124a8     1C 4E 05 F1 | 	add	fp, #28
124ac     A7 FA 61 FC | 	wrlong	result1, fp
124b0     37 00 00 FF 
124b4     4C E4 05 F1 | 	add	objptr, ##28236
124b8     F2 12 02 FB | 	rdlong	arg01, objptr
124bc     04 E4 05 F1 | 	add	objptr, #4
124c0     F2 14 02 FB | 	rdlong	arg02, objptr
124c4     04 4E 85 F1 | 	sub	fp, #4
124c8     A7 16 02 FB | 	rdlong	arg03, fp
124cc     FD 18 02 F6 | 	mov	arg04, result1
124d0     18 4E 85 F1 | 	sub	fp, #24
124d4     08 E4 85 F1 | 	sub	objptr, #8
124d8     F2 1A 02 FB | 	rdlong	arg05, objptr
124dc     37 00 00 FF 
124e0     48 E4 85 F1 | 	sub	objptr, ##28232
124e4     18 38 B1 FD | 	call	#_hg010b_spin2_draw
124e8     18 4E 05 F1 | 	add	fp, #24
124ec     A7 1A 02 FB | 	rdlong	arg05, fp
124f0     37 00 00 FF 
124f4     4C E4 05 F1 | 	add	objptr, ##28236
124f8     F2 1A 62 FC | 	wrlong	arg05, objptr
124fc     04 4E 05 F1 | 	add	fp, #4
12500     A7 1A 02 FB | 	rdlong	arg05, fp
12504     1C 4E 85 F1 | 	sub	fp, #28
12508     04 E4 05 F1 | 	add	objptr, #4
1250c     F2 1A 62 FC | 	wrlong	arg05, objptr
12510     37 00 00 FF 
12514     50 E4 85 F1 | 	sub	objptr, ##28240
12518     A7 F0 03 F6 | 	mov	ptra, fp
1251c     B2 00 A0 FD | 	call	#popregs_
12520                 | _do_draw_ret
12520     2D 00 64 FD | 	ret
12524                 | 
12524                 | ' 
12524                 | ' '-------------------- else
12524                 | ' 
12524                 | ' sub do_else
12524                 | _do_else
12524     4A 00 00 FF 
12528     9C E4 05 F1 | 	add	objptr, ##38044
1252c     F2 00 02 FB | 	rdlong	_var01, objptr
12530     01 00 86 F1 | 	sub	_var01, #1
12534     04 E4 05 F1 | 	add	objptr, #4
12538     F2 00 62 FC | 	wrlong	_var01, objptr
1253c     4A 00 00 FF 
12540     A0 E4 85 F1 | 	sub	objptr, ##38048
12544                 | _do_else_ret
12544     2D 00 64 FD | 	ret
12548                 | 
12548                 | ' 
12548                 | ' '-------------------- end
12548                 | ' 
12548                 | ' sub do_end
12548                 | _do_end
12548     4A 00 00 FF 
1254c     9C E4 05 F1 | 	add	objptr, ##38044
12550     F2 00 02 FB | 	rdlong	_var01, objptr
12554     01 00 86 F1 | 	sub	_var01, #1
12558     04 E4 05 F1 | 	add	objptr, #4
1255c     F2 00 62 FC | 	wrlong	_var01, objptr
12560     06 00 00 FF 
12564     38 E4 05 F1 | 	add	objptr, ##3128
12568     FF FF BF FF 
1256c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
12570     50 00 00 FF 
12574     D8 E4 85 F1 | 	sub	objptr, ##41176
12578                 | _do_end_ret
12578     2D 00 64 FD | 	ret
1257c                 | 
1257c                 | ' 
1257c                 | ' '-------------------- enter
1257c                 | ' 
1257c                 | ' sub do_enter
1257c                 | _do_enter
1257c     02 00 00 FF 
12580     D2 12 06 F6 | 	mov	arg01, ##1234
12584     1C 35 B0 FD | 	call	#_do_load
12588                 | _do_enter_ret
12588     2D 00 64 FD | 	ret
1258c                 | 
1258c                 | ' 
1258c                 | ' '------------------- error processing
1258c                 | ' 
1258c                 | ' sub do_error
1258c                 | _do_error
1258c     01 4A 05 F6 | 	mov	COUNT_, #1
12590     A8 00 A0 FD | 	call	#pushregs_
12594     4A 00 00 FF 
12598     A0 E4 05 F1 | 	add	objptr, ##38048
1259c     F2 18 02 FB | 	rdlong	arg04, objptr
125a0     0C 17 02 F6 | 	mov	arg03, arg04
125a4     01 16 66 F0 | 	shl	arg03, #1
125a8     0C 17 02 F1 | 	add	arg03, arg04
125ac     02 16 66 F0 | 	shl	arg03, #2
125b0     03 00 00 FF 
125b4     04 E4 85 F1 | 	sub	objptr, ##1540
125b8     F2 16 02 F1 | 	add	arg03, objptr
125bc     0B 27 02 FB | 	rdlong	local01, arg03
125c0                 | ' r=compiledline(lineptr_e).result.uresult
125c0                 | ' print "Error ";r;": ";errors$(r)
125c0     00 12 06 F6 | 	mov	arg01, #0
125c4     47 00 00 FF 
125c8     9C E4 85 F1 | 	sub	objptr, ##36508
125cc     D4 BA B1 FD | 	call	#__system___getiolock_0625
125d0     FD 12 02 F6 | 	mov	arg01, result1
125d4     1C 5E B1 FD | 	call	#__system___lockmem
125d8     C4 01 00 FF 
125dc     59 15 06 F6 | 	mov	arg02, ##@LR__6086
125e0     00 12 06 F6 | 	mov	arg01, #0
125e4     00 16 06 F6 | 	mov	arg03, #0
125e8     00 6B B1 FD | 	call	#__system___basic_print_string
125ec     00 12 06 F6 | 	mov	arg01, #0
125f0     13 15 02 F6 | 	mov	arg02, local01
125f4     00 16 06 F6 | 	mov	arg03, #0
125f8     0A 18 06 F6 | 	mov	arg04, #10
125fc     70 6B B1 FD | 	call	#__system___basic_print_unsigned
12600     C4 01 00 FF 
12604     60 15 06 F6 | 	mov	arg02, ##@LR__6087
12608     00 12 06 F6 | 	mov	arg01, #0
1260c     00 16 06 F6 | 	mov	arg03, #0
12610     D8 6A B1 FD | 	call	#__system___basic_print_string
12614     02 26 66 F0 | 	shl	local01, #2
12618     45 00 00 FF 
1261c     9C E4 05 F1 | 	add	objptr, ##35484
12620     F2 26 02 F1 | 	add	local01, objptr
12624     13 15 02 FB | 	rdlong	arg02, local01
12628     00 12 06 F6 | 	mov	arg01, #0
1262c     00 16 06 F6 | 	mov	arg03, #0
12630     45 00 00 FF 
12634     9C E4 85 F1 | 	sub	objptr, ##35484
12638     B0 6A B1 FD | 	call	#__system___basic_print_string
1263c     00 12 06 F6 | 	mov	arg01, #0
12640     0A 14 06 F6 | 	mov	arg02, #10
12644     00 16 06 F6 | 	mov	arg03, #0
12648     48 6A B1 FD | 	call	#__system___basic_print_char
1264c     00 12 06 F6 | 	mov	arg01, #0
12650     50 BA B1 FD | 	call	#__system___getiolock_0625
12654     FD 00 68 FC | 	wrlong	#0, result1
12658     A7 F0 03 F6 | 	mov	ptra, fp
1265c     B2 00 A0 FD | 	call	#popregs_
12660                 | _do_error_ret
12660     2D 00 64 FD | 	ret
12664                 | 
12664                 | ' 
12664                 | ' '-------------------- fcircle
12664                 | ' 
12664                 | ' sub do_fcircle
12664                 | _do_fcircle
12664     02 4A 05 F6 | 	mov	COUNT_, #2
12668     A8 00 A0 FD | 	call	#pushregs_
1266c     24 F0 07 F1 | 	add	ptra, #36
12670     40 B2 BF FD | 	call	#_pop
12674     FD 14 02 F6 | 	mov	arg02, result1
12678     FE 18 02 F6 | 	mov	arg04, result2
1267c     FF 16 02 F6 | 	mov	arg03, result3
12680     18 4E 05 F1 | 	add	fp, #24
12684     A7 14 62 FC | 	wrlong	arg02, fp
12688     04 4E 05 F1 | 	add	fp, #4
1268c     A7 18 62 FC | 	wrlong	arg04, fp
12690     04 4E 05 F1 | 	add	fp, #4
12694     A7 16 62 FC | 	wrlong	arg03, fp
12698     20 4E 85 F1 | 	sub	fp, #32
1269c     14 B2 BF FD | 	call	#_pop
126a0     FD 14 02 F6 | 	mov	arg02, result1
126a4     FE 18 02 F6 | 	mov	arg04, result2
126a8     FF 16 02 F6 | 	mov	arg03, result3
126ac     0C 4E 05 F1 | 	add	fp, #12
126b0     A7 14 62 FC | 	wrlong	arg02, fp
126b4     04 4E 05 F1 | 	add	fp, #4
126b8     A7 18 62 FC | 	wrlong	arg04, fp
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 16 62 FC | 	wrlong	arg03, fp
126c4     14 4E 85 F1 | 	sub	fp, #20
126c8     E8 B1 BF FD | 	call	#_pop
126cc     FF 14 02 F6 | 	mov	arg02, result3
126d0     A7 FA 61 FC | 	wrlong	result1, fp
126d4     04 4E 05 F1 | 	add	fp, #4
126d8     A7 FC 61 FC | 	wrlong	result2, fp
126dc     04 4E 05 F1 | 	add	fp, #4
126e0     A7 14 62 FC | 	wrlong	arg02, fp
126e4     08 4E 85 F1 | 	sub	fp, #8
126e8     A7 12 02 F6 | 	mov	arg01, fp
126ec     A8 B3 BF FD | 	call	#_converttoint
126f0     FD 26 02 F6 | 	mov	local01, result1
126f4     0C 4E 05 F1 | 	add	fp, #12
126f8     A7 12 02 F6 | 	mov	arg01, fp
126fc     0C 4E 85 F1 | 	sub	fp, #12
12700     94 B3 BF FD | 	call	#_converttoint
12704     FD 28 02 F6 | 	mov	local02, result1
12708     18 4E 05 F1 | 	add	fp, #24
1270c     A7 12 02 F6 | 	mov	arg01, fp
12710     18 4E 85 F1 | 	sub	fp, #24
12714     80 B3 BF FD | 	call	#_converttoint
12718     FD 16 02 F6 | 	mov	arg03, result1
1271c     37 00 00 FF 
12720     48 E4 05 F1 | 	add	objptr, ##28232
12724     F2 18 02 FB | 	rdlong	arg04, objptr
12728     37 00 00 FF 
1272c     48 E4 85 F1 | 	sub	objptr, ##28232
12730     13 13 02 F6 | 	mov	arg01, local01
12734     14 15 02 F6 | 	mov	arg02, local02
12738     48 3A B1 FD | 	call	#_hg010b_spin2_fcircle
1273c     A7 F0 03 F6 | 	mov	ptra, fp
12740     B2 00 A0 FD | 	call	#popregs_
12744                 | _do_fcircle_ret
12744     2D 00 64 FD | 	ret
12748                 | 
12748                 | ' 
12748                 | ' '-------------------- fill
12748                 | ' 
12748                 | ' sub do_fill
12748                 | _do_fill
12748     03 4A 05 F6 | 	mov	COUNT_, #3
1274c     A8 00 A0 FD | 	call	#pushregs_
12750     30 F0 07 F1 | 	add	ptra, #48
12754     5C B1 BF FD | 	call	#_pop
12758     FD 16 02 F6 | 	mov	arg03, result1
1275c     FE 14 02 F6 | 	mov	arg02, result2
12760     FF 18 02 F6 | 	mov	arg04, result3
12764     24 4E 05 F1 | 	add	fp, #36
12768     A7 16 62 FC | 	wrlong	arg03, fp
1276c     04 4E 05 F1 | 	add	fp, #4
12770     A7 14 62 FC | 	wrlong	arg02, fp
12774     04 4E 05 F1 | 	add	fp, #4
12778     A7 18 62 FC | 	wrlong	arg04, fp
1277c     2C 4E 85 F1 | 	sub	fp, #44
12780     30 B1 BF FD | 	call	#_pop
12784     FD 16 02 F6 | 	mov	arg03, result1
12788     FE 14 02 F6 | 	mov	arg02, result2
1278c     FF 18 02 F6 | 	mov	arg04, result3
12790     18 4E 05 F1 | 	add	fp, #24
12794     A7 16 62 FC | 	wrlong	arg03, fp
12798     04 4E 05 F1 | 	add	fp, #4
1279c     A7 14 62 FC | 	wrlong	arg02, fp
127a0     04 4E 05 F1 | 	add	fp, #4
127a4     A7 18 62 FC | 	wrlong	arg04, fp
127a8     20 4E 85 F1 | 	sub	fp, #32
127ac     04 B1 BF FD | 	call	#_pop
127b0     FD 16 02 F6 | 	mov	arg03, result1
127b4     FE 14 02 F6 | 	mov	arg02, result2
127b8     FF 18 02 F6 | 	mov	arg04, result3
127bc     0C 4E 05 F1 | 	add	fp, #12
127c0     A7 16 62 FC | 	wrlong	arg03, fp
127c4     04 4E 05 F1 | 	add	fp, #4
127c8     A7 14 62 FC | 	wrlong	arg02, fp
127cc     04 4E 05 F1 | 	add	fp, #4
127d0     A7 18 62 FC | 	wrlong	arg04, fp
127d4     14 4E 85 F1 | 	sub	fp, #20
127d8     D8 B0 BF FD | 	call	#_pop
127dc     FF 16 02 F6 | 	mov	arg03, result3
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 FC 61 FC | 	wrlong	result2, fp
127ec     04 4E 05 F1 | 	add	fp, #4
127f0     A7 16 62 FC | 	wrlong	arg03, fp
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     A7 12 02 F6 | 	mov	arg01, fp
127fc     98 B2 BF FD | 	call	#_converttoint
12800     FD 26 02 F6 | 	mov	local01, result1
12804     0C 4E 05 F1 | 	add	fp, #12
12808     A7 12 02 F6 | 	mov	arg01, fp
1280c     0C 4E 85 F1 | 	sub	fp, #12
12810     84 B2 BF FD | 	call	#_converttoint
12814     FD 28 02 F6 | 	mov	local02, result1
12818     18 4E 05 F1 | 	add	fp, #24
1281c     A7 12 02 F6 | 	mov	arg01, fp
12820     18 4E 85 F1 | 	sub	fp, #24
12824     70 B2 BF FD | 	call	#_converttoint
12828     FD 2A 02 F6 | 	mov	local03, result1
1282c     24 4E 05 F1 | 	add	fp, #36
12830     A7 12 02 F6 | 	mov	arg01, fp
12834     24 4E 85 F1 | 	sub	fp, #36
12838     5C B2 BF FD | 	call	#_converttoint
1283c     FD 18 02 F6 | 	mov	arg04, result1
12840     13 13 02 F6 | 	mov	arg01, local01
12844     14 15 02 F6 | 	mov	arg02, local02
12848     15 17 02 F6 | 	mov	arg03, local03
1284c     A0 36 B1 FD | 	call	#_hg010b_spin2_fill
12850     A7 F0 03 F6 | 	mov	ptra, fp
12854     B2 00 A0 FD | 	call	#popregs_
12858                 | _do_fill_ret
12858     2D 00 64 FD | 	ret
1285c                 | 
1285c                 | ' 
1285c                 | ' '-------------------- findfirst
1285c                 | ' 
1285c                 | ' sub do_findfirst
1285c                 | _do_findfirst
1285c     00 4A 05 F6 | 	mov	COUNT_, #0
12860     A8 00 A0 FD | 	call	#pushregs_
12864     1C F0 07 F1 | 	add	ptra, #28
12868     4A 00 00 FF 
1286c     A0 E4 05 F1 | 	add	objptr, ##38048
12870     F2 16 02 FB | 	rdlong	arg03, objptr
12874     0B 15 02 F6 | 	mov	arg02, arg03
12878     01 14 66 F0 | 	shl	arg02, #1
1287c     0B 15 02 F1 | 	add	arg02, arg03
12880     02 14 66 F0 | 	shl	arg02, #2
12884     03 00 00 FF 
12888     04 E4 85 F1 | 	sub	objptr, ##1540
1288c     F2 14 02 F1 | 	add	arg02, objptr
12890     0A 17 02 FB | 	rdlong	arg03, arg02
12894     A7 16 62 FC | 	wrlong	arg03, fp
12898                 | ' 
12898                 | ' numpar=compiledline(lineptr_e).result.uresult
12898                 | ' if numpar=2 then
12898     02 16 0E F2 | 	cmp	arg03, #2 wz
1289c     47 00 00 FF 
128a0     9C E4 85 F1 | 	sub	objptr, ##36508
128a4     70 01 90 5D |  if_ne	jmp	#LR__1496
128a8     08 B0 BF FD | 	call	#_pop
128ac     FF 16 02 F6 | 	mov	arg03, result3
128b0     08 4E 05 F1 | 	add	fp, #8
128b4     A7 FA 61 FC | 	wrlong	result1, fp
128b8     04 4E 05 F1 | 	add	fp, #4
128bc     A7 FC 61 FC | 	wrlong	result2, fp
128c0     04 4E 05 F1 | 	add	fp, #4
128c4     A7 16 62 FC | 	wrlong	arg03, fp
128c8                 | '   t1=pop()
128c8                 | '   if t1.result_type=result_string2 then 
128c8     10 4E 85 F1 | 	sub	fp, #16
128cc     2B 16 0E F2 | 	cmp	arg03, #43 wz
128d0     20 00 90 5D |  if_ne	jmp	#LR__1490
128d4     08 4E 05 F1 | 	add	fp, #8
128d8     A7 12 02 FB | 	rdlong	arg01, fp
128dc     08 4E 85 F1 | 	sub	fp, #8
128e0     48 B1 BF FD | 	call	#_convertstring
128e4     18 4E 05 F1 | 	add	fp, #24
128e8     A7 FA 61 FC | 	wrlong	result1, fp
128ec     18 4E 85 F1 | 	sub	fp, #24
128f0     6C 00 90 FD | 	jmp	#LR__1493
128f4                 | LR__1490
128f4     10 4E 05 F1 | 	add	fp, #16
128f8     A7 16 02 FB | 	rdlong	arg03, fp
128fc     10 4E 85 F1 | 	sub	fp, #16
12900     1F 16 0E F2 | 	cmp	arg03, #31 wz
12904     18 00 90 5D |  if_ne	jmp	#LR__1491
12908     08 4E 05 F1 | 	add	fp, #8
1290c     A7 16 02 FB | 	rdlong	arg03, fp
12910     10 4E 05 F1 | 	add	fp, #16
12914     A7 16 62 FC | 	wrlong	arg03, fp
12918     18 4E 85 F1 | 	sub	fp, #24
1291c     40 00 90 FD | 	jmp	#LR__1492
12920                 | LR__1491
12920                 | '     print "findfirst: "; : printerror(30) : return  
12920     00 12 06 F6 | 	mov	arg01, #0
12924     7C B7 B1 FD | 	call	#__system___getiolock_0625
12928     FD 12 02 F6 | 	mov	arg01, result1
1292c     C4 5A B1 FD | 	call	#__system___lockmem
12930     C4 01 00 FF 
12934     63 15 06 F6 | 	mov	arg02, ##@LR__6088
12938     00 12 06 F6 | 	mov	arg01, #0
1293c     00 16 06 F6 | 	mov	arg03, #0
12940     A8 67 B1 FD | 	call	#__system___basic_print_string
12944     00 12 06 F6 | 	mov	arg01, #0
12948     58 B7 B1 FD | 	call	#__system___getiolock_0625
1294c     FD 00 68 FC | 	wrlong	#0, result1
12950     1E 12 06 F6 | 	mov	arg01, #30
12954     00 14 06 F6 | 	mov	arg02, #0
12958     40 20 B1 FD | 	call	#_printerror
1295c     7C 02 90 FD | 	jmp	#LR__1505
12960                 | LR__1492
12960                 | LR__1493
12960     50 AF BF FD | 	call	#_pop
12964     FF 16 02 F6 | 	mov	arg03, result3
12968     08 4E 05 F1 | 	add	fp, #8
1296c     A7 FA 61 FC | 	wrlong	result1, fp
12970     04 4E 05 F1 | 	add	fp, #4
12974     A7 FC 61 FC | 	wrlong	result2, fp
12978     04 4E 05 F1 | 	add	fp, #4
1297c     A7 16 62 FC | 	wrlong	arg03, fp
12980                 | '   t1=pop()
12980                 | '   if t1.result_type=result_string2 then 
12980     10 4E 85 F1 | 	sub	fp, #16
12984     2B 16 0E F2 | 	cmp	arg03, #43 wz
12988     20 00 90 5D |  if_ne	jmp	#LR__1494
1298c     08 4E 05 F1 | 	add	fp, #8
12990     A7 12 02 FB | 	rdlong	arg01, fp
12994     08 4E 85 F1 | 	sub	fp, #8
12998     90 B0 BF FD | 	call	#_convertstring
1299c     14 4E 05 F1 | 	add	fp, #20
129a0     A7 FA 61 FC | 	wrlong	result1, fp
129a4     14 4E 85 F1 | 	sub	fp, #20
129a8     88 01 90 FD | 	jmp	#LR__1503
129ac                 | LR__1494
129ac     10 4E 05 F1 | 	add	fp, #16
129b0     A7 16 02 FB | 	rdlong	arg03, fp
129b4     10 4E 85 F1 | 	sub	fp, #16
129b8     1F 16 0E F2 | 	cmp	arg03, #31 wz
129bc     18 00 90 5D |  if_ne	jmp	#LR__1495
129c0     08 4E 05 F1 | 	add	fp, #8
129c4     A7 16 02 FB | 	rdlong	arg03, fp
129c8     0C 4E 05 F1 | 	add	fp, #12
129cc     A7 16 62 FC | 	wrlong	arg03, fp
129d0     14 4E 85 F1 | 	sub	fp, #20
129d4     5C 01 90 FD | 	jmp	#LR__1503
129d8                 | LR__1495
129d8                 | '     print "findfirst: "; : printerror(30) : return  
129d8     00 12 06 F6 | 	mov	arg01, #0
129dc     C4 B6 B1 FD | 	call	#__system___getiolock_0625
129e0     FD 12 02 F6 | 	mov	arg01, result1
129e4     0C 5A B1 FD | 	call	#__system___lockmem
129e8     C4 01 00 FF 
129ec     6F 15 06 F6 | 	mov	arg02, ##@LR__6089
129f0     00 12 06 F6 | 	mov	arg01, #0
129f4     00 16 06 F6 | 	mov	arg03, #0
129f8     F0 66 B1 FD | 	call	#__system___basic_print_string
129fc     00 12 06 F6 | 	mov	arg01, #0
12a00     A0 B6 B1 FD | 	call	#__system___getiolock_0625
12a04     FD 00 68 FC | 	wrlong	#0, result1
12a08     1E 12 06 F6 | 	mov	arg01, #30
12a0c     00 14 06 F6 | 	mov	arg02, #0
12a10     88 1F B1 FD | 	call	#_printerror
12a14     C4 01 90 FD | 	jmp	#LR__1505
12a18                 | LR__1496
12a18     A7 16 02 FB | 	rdlong	arg03, fp
12a1c     01 16 0E F2 | 	cmp	arg03, #1 wz
12a20     D0 00 90 5D |  if_ne	jmp	#LR__1501
12a24     8C AE BF FD | 	call	#_pop
12a28     FF 16 02 F6 | 	mov	arg03, result3
12a2c     08 4E 05 F1 | 	add	fp, #8
12a30     A7 FA 61 FC | 	wrlong	result1, fp
12a34     04 4E 05 F1 | 	add	fp, #4
12a38     A7 FC 61 FC | 	wrlong	result2, fp
12a3c     04 4E 05 F1 | 	add	fp, #4
12a40     A7 16 62 FC | 	wrlong	arg03, fp
12a44                 | '   t1=pop()
12a44                 | '   if t1.result_type=result_string2 then 
12a44     10 4E 85 F1 | 	sub	fp, #16
12a48     2B 16 0E F2 | 	cmp	arg03, #43 wz
12a4c     20 00 90 5D |  if_ne	jmp	#LR__1497
12a50     08 4E 05 F1 | 	add	fp, #8
12a54     A7 12 02 FB | 	rdlong	arg01, fp
12a58     08 4E 85 F1 | 	sub	fp, #8
12a5c     CC AF BF FD | 	call	#_convertstring
12a60     14 4E 05 F1 | 	add	fp, #20
12a64     A7 FA 61 FC | 	wrlong	result1, fp
12a68     14 4E 85 F1 | 	sub	fp, #20
12a6c     6C 00 90 FD | 	jmp	#LR__1500
12a70                 | LR__1497
12a70     10 4E 05 F1 | 	add	fp, #16
12a74     A7 16 02 FB | 	rdlong	arg03, fp
12a78     10 4E 85 F1 | 	sub	fp, #16
12a7c     1F 16 0E F2 | 	cmp	arg03, #31 wz
12a80     18 00 90 5D |  if_ne	jmp	#LR__1498
12a84     08 4E 05 F1 | 	add	fp, #8
12a88     A7 16 02 FB | 	rdlong	arg03, fp
12a8c     0C 4E 05 F1 | 	add	fp, #12
12a90     A7 16 62 FC | 	wrlong	arg03, fp
12a94     14 4E 85 F1 | 	sub	fp, #20
12a98     40 00 90 FD | 	jmp	#LR__1499
12a9c                 | LR__1498
12a9c                 | '     print "findfirst: "; : printerror(30) : return  
12a9c     00 12 06 F6 | 	mov	arg01, #0
12aa0     00 B6 B1 FD | 	call	#__system___getiolock_0625
12aa4     FD 12 02 F6 | 	mov	arg01, result1
12aa8     48 59 B1 FD | 	call	#__system___lockmem
12aac     C4 01 00 FF 
12ab0     7B 15 06 F6 | 	mov	arg02, ##@LR__6090
12ab4     00 12 06 F6 | 	mov	arg01, #0
12ab8     00 16 06 F6 | 	mov	arg03, #0
12abc     2C 66 B1 FD | 	call	#__system___basic_print_string
12ac0     00 12 06 F6 | 	mov	arg01, #0
12ac4     DC B5 B1 FD | 	call	#__system___getiolock_0625
12ac8     FD 00 68 FC | 	wrlong	#0, result1
12acc     1E 12 06 F6 | 	mov	arg01, #30
12ad0     00 14 06 F6 | 	mov	arg02, #0
12ad4     C4 1E B1 FD | 	call	#_printerror
12ad8     00 01 90 FD | 	jmp	#LR__1505
12adc                 | LR__1499
12adc                 | LR__1500
12adc     C4 01 00 FF 
12ae0     87 17 06 F6 | 	mov	arg03, ##@LR__6091
12ae4     18 4E 05 F1 | 	add	fp, #24
12ae8     A7 16 62 FC | 	wrlong	arg03, fp
12aec     18 4E 85 F1 | 	sub	fp, #24
12af0     40 00 90 FD | 	jmp	#LR__1502
12af4                 | LR__1501
12af4                 | '   print "findfirst: "; : printerror(39) : return     
12af4     00 12 06 F6 | 	mov	arg01, #0
12af8     A8 B5 B1 FD | 	call	#__system___getiolock_0625
12afc     FD 12 02 F6 | 	mov	arg01, result1
12b00     F0 58 B1 FD | 	call	#__system___lockmem
12b04     C4 01 00 FF 
12b08     88 15 06 F6 | 	mov	arg02, ##@LR__6092
12b0c     00 12 06 F6 | 	mov	arg01, #0
12b10     00 16 06 F6 | 	mov	arg03, #0
12b14     D4 65 B1 FD | 	call	#__system___basic_print_string
12b18     00 12 06 F6 | 	mov	arg01, #0
12b1c     84 B5 B1 FD | 	call	#__system___getiolock_0625
12b20     FD 00 68 FC | 	wrlong	#0, result1
12b24     27 12 06 F6 | 	mov	arg01, #39
12b28     00 14 06 F6 | 	mov	arg02, #0
12b2c     6C 1E B1 FD | 	call	#_printerror
12b30     A8 00 90 FD | 	jmp	#LR__1505
12b34                 | LR__1502
12b34                 | LR__1503
12b34                 | ' 
12b34                 | ' if s2="" then
12b34     18 4E 05 F1 | 	add	fp, #24
12b38     A7 12 02 FB | 	rdlong	arg01, fp
12b3c     18 4E 85 F1 | 	sub	fp, #24
12b40     C4 01 00 FF 
12b44     94 15 06 F6 | 	mov	arg02, ##@LR__6093
12b48     D0 58 B1 FD | 	call	#__system___string_cmp
12b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
12b50     04 4E 05 A1 |  if_e	add	fp, #4
12b54     A7 62 68 AC |  if_e	wrlong	#49, fp
12b58     04 4E 85 A1 |  if_e	sub	fp, #4
12b5c     38 00 90 AD |  if_e	jmp	#LR__1504
12b60     18 4E 05 F1 | 	add	fp, #24
12b64     A7 12 02 FB | 	rdlong	arg01, fp
12b68     18 4E 85 F1 | 	sub	fp, #24
12b6c     14 7C B1 FD | 	call	#__system__LCase_S
12b70     FD 12 02 F6 | 	mov	arg01, result1
12b74     C4 01 00 FF 
12b78     95 15 06 F6 | 	mov	arg02, ##@LR__6094
12b7c     9C 58 B1 FD | 	call	#__system___string_cmp
12b80     00 FA 0D F2 | 	cmp	result1, #0 wz
12b84     04 4E 05 A1 |  if_e	add	fp, #4
12b88     A7 20 68 AC |  if_e	wrlong	#16, fp
12b8c     04 4E C5 F3 | 	sumz	fp, #4
12b90     A7 42 68 5C |  if_ne	wrlong	#33, fp
12b94     04 4E 85 51 |  if_ne	sub	fp, #4
12b98                 | LR__1504
12b98     14 4E 05 F1 | 	add	fp, #20
12b9c     A7 12 02 FB | 	rdlong	arg01, fp
12ba0     10 4E 85 F1 | 	sub	fp, #16
12ba4     A7 14 02 FB | 	rdlong	arg02, fp
12ba8     04 4E 85 F1 | 	sub	fp, #4
12bac     B4 B6 B1 FD | 	call	#__system___basic_dir
12bb0     18 4E 05 F1 | 	add	fp, #24
12bb4     A7 FA 61 FC | 	wrlong	result1, fp
12bb8     08 4E 85 F1 | 	sub	fp, #8
12bbc     A7 3E 68 FC | 	wrlong	#31, fp
12bc0     08 4E 05 F1 | 	add	fp, #8
12bc4     A7 16 02 FB | 	rdlong	arg03, fp
12bc8     10 4E 85 F1 | 	sub	fp, #16
12bcc     A7 16 62 FC | 	wrlong	arg03, fp
12bd0     A7 12 02 F6 | 	mov	arg01, fp
12bd4     08 4E 85 F1 | 	sub	fp, #8
12bd8     70 AD BF FD | 	call	#_push
12bdc                 | LR__1505
12bdc     A7 F0 03 F6 | 	mov	ptra, fp
12be0     B2 00 A0 FD | 	call	#popregs_
12be4                 | _do_findfirst_ret
12be4     2D 00 64 FD | 	ret
12be8                 | 
12be8                 | ' 
12be8                 | ' '-------------------- findnext
12be8                 | ' 
12be8                 | ' sub do_findnext
12be8                 | _do_findnext
12be8     00 4A 05 F6 | 	mov	COUNT_, #0
12bec     A8 00 A0 FD | 	call	#pushregs_
12bf0     10 F0 07 F1 | 	add	ptra, #16
12bf4                 | ' 
12bf4                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
12bf4     4A 00 00 FF 
12bf8     A0 E4 05 F1 | 	add	objptr, ##38048
12bfc     F2 16 02 FB | 	rdlong	arg03, objptr
12c00     0B 15 02 F6 | 	mov	arg02, arg03
12c04     01 14 66 F0 | 	shl	arg02, #1
12c08     0B 15 02 F1 | 	add	arg02, arg03
12c0c     02 14 66 F0 | 	shl	arg02, #2
12c10     03 00 00 FF 
12c14     04 E4 85 F1 | 	sub	objptr, ##1540
12c18     F2 14 02 F1 | 	add	arg02, objptr
12c1c     0A FB 01 FB | 	rdlong	result1, arg02
12c20     01 FA 15 F2 | 	cmp	result1, #1 wc
12c24     47 00 00 FF 
12c28     9C E4 85 F1 | 	sub	objptr, ##36508
12c2c     40 00 90 CD |  if_b	jmp	#LR__1510
12c30     00 12 06 F6 | 	mov	arg01, #0
12c34     6C B4 B1 FD | 	call	#__system___getiolock_0625
12c38     FD 12 02 F6 | 	mov	arg01, result1
12c3c     B4 57 B1 FD | 	call	#__system___lockmem
12c40     C4 01 00 FF 
12c44     99 15 06 F6 | 	mov	arg02, ##@LR__6095
12c48     00 12 06 F6 | 	mov	arg01, #0
12c4c     00 16 06 F6 | 	mov	arg03, #0
12c50     98 64 B1 FD | 	call	#__system___basic_print_string
12c54     00 12 06 F6 | 	mov	arg01, #0
12c58     48 B4 B1 FD | 	call	#__system___getiolock_0625
12c5c     FD 00 68 FC | 	wrlong	#0, result1
12c60     27 12 06 F6 | 	mov	arg01, #39
12c64     00 14 06 F6 | 	mov	arg02, #0
12c68     30 1D B1 FD | 	call	#_printerror
12c6c     34 00 90 FD | 	jmp	#LR__1511
12c70                 | LR__1510
12c70     00 12 06 F6 | 	mov	arg01, #0
12c74     00 14 06 F6 | 	mov	arg02, #0
12c78     E8 B5 B1 FD | 	call	#__system___basic_dir
12c7c     0C 4E 05 F1 | 	add	fp, #12
12c80     A7 FA 61 FC | 	wrlong	result1, fp
12c84     04 4E 85 F1 | 	sub	fp, #4
12c88     A7 3E 68 FC | 	wrlong	#31, fp
12c8c     04 4E 05 F1 | 	add	fp, #4
12c90     A7 16 02 FB | 	rdlong	arg03, fp
12c94     0C 4E 85 F1 | 	sub	fp, #12
12c98     A7 16 62 FC | 	wrlong	arg03, fp
12c9c     A7 12 02 F6 | 	mov	arg01, fp
12ca0     A8 AC BF FD | 	call	#_push
12ca4                 | LR__1511
12ca4     A7 F0 03 F6 | 	mov	ptra, fp
12ca8     B2 00 A0 FD | 	call	#popregs_
12cac                 | _do_findnext_ret
12cac     2D 00 64 FD | 	ret
12cb0                 | 
12cb0                 | ' 
12cb0                 | ' '-------------------- font
12cb0                 | ' 
12cb0                 | ' sub do_font
12cb0                 | _do_font
12cb0     03 4A 05 F6 | 	mov	COUNT_, #3
12cb4     A8 00 A0 FD | 	call	#pushregs_
12cb8     F8 AB BF FD | 	call	#_pop
12cbc     FD 26 02 F6 | 	mov	local01, result1
12cc0     FE 28 02 F6 | 	mov	local02, result2
12cc4     FF 2A 02 F6 | 	mov	local03, result3
12cc8                 | ' 
12cc8                 | ' t1=pop() 
12cc8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12cc8     1E 2A 0E F2 | 	cmp	local03, #30 wz
12ccc     10 00 90 5D |  if_ne	jmp	#LR__1520
12cd0     13 13 02 F6 | 	mov	arg01, local01
12cd4     00 14 06 F6 | 	mov	arg02, #0
12cd8     5C 8A B1 FD | 	call	#__system___float_tointeger
12cdc     FD 26 02 F6 | 	mov	local01, result1
12ce0                 | LR__1520
12ce0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12ce0     1F 2A 0E F2 | 	cmp	local03, #31 wz
12ce4     18 00 90 5D |  if_ne	jmp	#LR__1521
12ce8     13 13 02 F6 | 	mov	arg01, local01
12cec     90 8D B1 FD | 	call	#__system____builtin_atof
12cf0     FD 12 02 F6 | 	mov	arg01, result1
12cf4     00 14 06 F6 | 	mov	arg02, #0
12cf8     3C 8A B1 FD | 	call	#__system___float_tointeger
12cfc     FD 26 02 F6 | 	mov	local01, result1
12d00                 | LR__1521
12d00     37 00 00 FF 
12d04     60 E4 05 F1 | 	add	objptr, ##28256
12d08     F2 26 62 FC | 	wrlong	local01, objptr
12d0c     37 00 00 FF 
12d10     60 E4 85 F1 | 	sub	objptr, ##28256
12d14     02 26 66 F0 | 	shl	local01, #2
12d18     13 13 02 F6 | 	mov	arg01, local01
12d1c     B4 38 B1 FD | 	call	#_hg010b_spin2_setfontfamily
12d20     A7 F0 03 F6 | 	mov	ptra, fp
12d24     B2 00 A0 FD | 	call	#popregs_
12d28                 | _do_font_ret
12d28     2D 00 64 FD | 	ret
12d2c                 | 
12d2c                 | ' 
12d2c                 | ' '-------------------- for
12d2c                 | ' 
12d2c                 | ' sub do_for()
12d2c                 | _do_for
12d2c     01 4A 05 F6 | 	mov	COUNT_, #1
12d30     A8 00 A0 FD | 	call	#pushregs_
12d34     10 F0 07 F1 | 	add	ptra, #16
12d38     50 00 00 FF 
12d3c     50 E5 05 F1 | 	add	objptr, ##41296
12d40     F2 12 02 FB | 	rdlong	arg01, objptr
12d44     01 12 06 F1 | 	add	arg01, #1
12d48     F2 12 62 FC | 	wrlong	arg01, objptr
12d4c     50 00 00 FF 
12d50     50 E5 85 F1 | 	sub	objptr, ##41296
12d54     5C AB BF FD | 	call	#_pop
12d58     A7 FA 61 FC | 	wrlong	result1, fp
12d5c     04 4E 05 F1 | 	add	fp, #4
12d60     A7 FC 61 FC | 	wrlong	result2, fp
12d64     04 4E 05 F1 | 	add	fp, #4
12d68     A7 FE 61 FC | 	wrlong	result3, fp
12d6c     08 4E 85 F1 | 	sub	fp, #8
12d70     50 00 00 FF 
12d74     50 E5 05 F1 | 	add	objptr, ##41296
12d78     F2 12 02 FB | 	rdlong	arg01, objptr
12d7c     09 27 02 F6 | 	mov	local01, arg01
12d80     02 26 66 F0 | 	shl	local01, #2
12d84     09 27 02 F1 | 	add	local01, arg01
12d88     02 26 66 F0 | 	shl	local01, #2
12d8c     06 00 00 FF 
12d90     98 E4 85 F1 | 	sub	objptr, ##3224
12d94     F2 26 02 F1 | 	add	local01, objptr
12d98     A7 12 02 FB | 	rdlong	arg01, fp
12d9c     08 26 06 F1 | 	add	local01, #8
12da0     13 13 62 FC | 	wrlong	arg01, local01
12da4     4A 00 00 FF 
12da8     B8 E4 85 F1 | 	sub	objptr, ##38072
12dac     04 AB BF FD | 	call	#_pop
12db0     A7 FA 61 FC | 	wrlong	result1, fp
12db4     04 4E 05 F1 | 	add	fp, #4
12db8     A7 FC 61 FC | 	wrlong	result2, fp
12dbc     04 4E 05 F1 | 	add	fp, #4
12dc0     A7 FE 61 FC | 	wrlong	result3, fp
12dc4     08 4E 85 F1 | 	sub	fp, #8
12dc8     50 00 00 FF 
12dcc     50 E5 05 F1 | 	add	objptr, ##41296
12dd0     F2 12 02 FB | 	rdlong	arg01, objptr
12dd4     09 27 02 F6 | 	mov	local01, arg01
12dd8     02 26 66 F0 | 	shl	local01, #2
12ddc     09 27 02 F1 | 	add	local01, arg01
12de0     02 26 66 F0 | 	shl	local01, #2
12de4     06 00 00 FF 
12de8     98 E4 85 F1 | 	sub	objptr, ##3224
12dec     F2 26 02 F1 | 	add	local01, objptr
12df0     A7 12 02 F6 | 	mov	arg01, fp
12df4     4A 00 00 FF 
12df8     B8 E4 85 F1 | 	sub	objptr, ##38072
12dfc     98 AC BF FD | 	call	#_converttoint
12e00     FD 12 02 F6 | 	mov	arg01, result1
12e04     0C 26 06 F1 | 	add	local01, #12
12e08     13 13 62 FC | 	wrlong	arg01, local01
12e0c     A4 AA BF FD | 	call	#_pop
12e10     A7 FA 61 FC | 	wrlong	result1, fp
12e14     04 4E 05 F1 | 	add	fp, #4
12e18     A7 FC 61 FC | 	wrlong	result2, fp
12e1c     04 4E 05 F1 | 	add	fp, #4
12e20     A7 FE 61 FC | 	wrlong	result3, fp
12e24     08 4E 85 F1 | 	sub	fp, #8
12e28     50 00 00 FF 
12e2c     50 E5 05 F1 | 	add	objptr, ##41296
12e30     F2 12 02 FB | 	rdlong	arg01, objptr
12e34     09 27 02 F6 | 	mov	local01, arg01
12e38     02 26 66 F0 | 	shl	local01, #2
12e3c     09 27 02 F1 | 	add	local01, arg01
12e40     02 26 66 F0 | 	shl	local01, #2
12e44     06 00 00 FF 
12e48     98 E4 85 F1 | 	sub	objptr, ##3224
12e4c     F2 26 02 F1 | 	add	local01, objptr
12e50     A7 12 02 F6 | 	mov	arg01, fp
12e54     4A 00 00 FF 
12e58     B8 E4 85 F1 | 	sub	objptr, ##38072
12e5c     38 AC BF FD | 	call	#_converttoint
12e60     10 26 06 F1 | 	add	local01, #16
12e64     13 FB 61 FC | 	wrlong	result1, local01
12e68                 | ' fortop+=1
12e68                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12e68                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12e68                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12e68                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12e68     4A 00 00 FF 
12e6c     A0 E4 05 F1 | 	add	objptr, ##38048
12e70     F2 12 02 FB | 	rdlong	arg01, objptr
12e74     09 27 02 F6 | 	mov	local01, arg01
12e78     01 26 66 F0 | 	shl	local01, #1
12e7c     09 27 02 F1 | 	add	local01, arg01
12e80     02 26 66 F0 | 	shl	local01, #2
12e84     03 00 00 FF 
12e88     04 E4 85 F1 | 	sub	objptr, ##1540
12e8c     F2 26 02 F1 | 	add	local01, objptr
12e90     08 26 06 F1 | 	add	local01, #8
12e94     13 27 02 FB | 	rdlong	local01, local01
12e98     FE 27 0E F2 | 	cmp	local01, #510 wz
12e9c     47 00 00 FF 
12ea0     9C E4 85 F1 | 	sub	objptr, ##36508
12ea4     70 00 90 5D |  if_ne	jmp	#LR__1530
12ea8     50 00 00 FF 
12eac     50 E5 05 F1 | 	add	objptr, ##41296
12eb0     F2 12 02 FB | 	rdlong	arg01, objptr
12eb4     09 27 02 F6 | 	mov	local01, arg01
12eb8     02 26 66 F0 | 	shl	local01, #2
12ebc     09 27 02 F1 | 	add	local01, arg01
12ec0     02 26 66 F0 | 	shl	local01, #2
12ec4     06 00 00 FF 
12ec8     98 E4 85 F1 | 	sub	objptr, ##3224
12ecc     F2 26 02 F1 | 	add	local01, objptr
12ed0     06 00 00 FF 
12ed4     20 E4 05 F1 | 	add	objptr, ##3104
12ed8     F2 12 02 FB | 	rdlong	arg01, objptr
12edc     13 13 62 FC | 	wrlong	arg01, local01
12ee0     78 E4 05 F1 | 	add	objptr, #120
12ee4     F2 12 02 FB | 	rdlong	arg01, objptr
12ee8     09 27 02 F6 | 	mov	local01, arg01
12eec     02 26 66 F0 | 	shl	local01, #2
12ef0     09 27 02 F1 | 	add	local01, arg01
12ef4     02 26 66 F0 | 	shl	local01, #2
12ef8     06 00 00 FF 
12efc     98 E4 85 F1 | 	sub	objptr, ##3224
12f00     F2 26 02 F1 | 	add	local01, objptr
12f04     04 26 06 F1 | 	add	local01, #4
12f08     13 01 68 FC | 	wrlong	#0, local01
12f0c     4A 00 00 FF 
12f10     B8 E4 85 F1 | 	sub	objptr, ##38072
12f14     78 00 90 FD | 	jmp	#LR__1531
12f18                 | LR__1530
12f18     50 00 00 FF 
12f1c     50 E5 05 F1 | 	add	objptr, ##41296
12f20     F2 12 02 FB | 	rdlong	arg01, objptr
12f24     09 27 02 F6 | 	mov	local01, arg01
12f28     02 26 66 F0 | 	shl	local01, #2
12f2c     09 27 02 F1 | 	add	local01, arg01
12f30     02 26 66 F0 | 	shl	local01, #2
12f34     06 00 00 FF 
12f38     98 E4 85 F1 | 	sub	objptr, ##3224
12f3c     F2 26 02 F1 | 	add	local01, objptr
12f40     06 00 00 FF 
12f44     28 E4 05 F1 | 	add	objptr, ##3112
12f48     F2 12 02 FB | 	rdlong	arg01, objptr
12f4c     13 13 62 FC | 	wrlong	arg01, local01
12f50     70 E4 05 F1 | 	add	objptr, #112
12f54     F2 12 02 FB | 	rdlong	arg01, objptr
12f58     09 27 02 F6 | 	mov	local01, arg01
12f5c     02 26 66 F0 | 	shl	local01, #2
12f60     09 27 02 F1 | 	add	local01, arg01
12f64     02 26 66 F0 | 	shl	local01, #2
12f68     06 00 00 FF 
12f6c     98 E4 85 F1 | 	sub	objptr, ##3224
12f70     F2 26 02 F1 | 	add	local01, objptr
12f74     18 E4 85 F1 | 	sub	objptr, #24
12f78     F2 12 02 FB | 	rdlong	arg01, objptr
12f7c     4A 00 00 FF 
12f80     A0 E4 85 F1 | 	sub	objptr, ##38048
12f84     01 12 06 F1 | 	add	arg01, #1
12f88     04 26 06 F1 | 	add	local01, #4
12f8c     13 13 62 FC | 	wrlong	arg01, local01
12f90                 | LR__1531
12f90     A7 F0 03 F6 | 	mov	ptra, fp
12f94     B2 00 A0 FD | 	call	#popregs_
12f98                 | _do_for_ret
12f98     2D 00 64 FD | 	ret
12f9c                 | 
12f9c                 | ' 
12f9c                 | ' '-------------------- frame
12f9c                 | ' 
12f9c                 | ' sub do_frame
12f9c                 | _do_frame
12f9c     03 4A 05 F6 | 	mov	COUNT_, #3
12fa0     A8 00 A0 FD | 	call	#pushregs_
12fa4     30 F0 07 F1 | 	add	ptra, #48
12fa8     08 A9 BF FD | 	call	#_pop
12fac     FD 16 02 F6 | 	mov	arg03, result1
12fb0     FE 14 02 F6 | 	mov	arg02, result2
12fb4     FF 1A 02 F6 | 	mov	arg05, result3
12fb8     24 4E 05 F1 | 	add	fp, #36
12fbc     A7 16 62 FC | 	wrlong	arg03, fp
12fc0     04 4E 05 F1 | 	add	fp, #4
12fc4     A7 14 62 FC | 	wrlong	arg02, fp
12fc8     04 4E 05 F1 | 	add	fp, #4
12fcc     A7 1A 62 FC | 	wrlong	arg05, fp
12fd0     2C 4E 85 F1 | 	sub	fp, #44
12fd4     DC A8 BF FD | 	call	#_pop
12fd8     FD 16 02 F6 | 	mov	arg03, result1
12fdc     FE 14 02 F6 | 	mov	arg02, result2
12fe0     FF 1A 02 F6 | 	mov	arg05, result3
12fe4     18 4E 05 F1 | 	add	fp, #24
12fe8     A7 16 62 FC | 	wrlong	arg03, fp
12fec     04 4E 05 F1 | 	add	fp, #4
12ff0     A7 14 62 FC | 	wrlong	arg02, fp
12ff4     04 4E 05 F1 | 	add	fp, #4
12ff8     A7 1A 62 FC | 	wrlong	arg05, fp
12ffc     20 4E 85 F1 | 	sub	fp, #32
13000     B0 A8 BF FD | 	call	#_pop
13004     FD 16 02 F6 | 	mov	arg03, result1
13008     FE 14 02 F6 | 	mov	arg02, result2
1300c     FF 1A 02 F6 | 	mov	arg05, result3
13010     0C 4E 05 F1 | 	add	fp, #12
13014     A7 16 62 FC | 	wrlong	arg03, fp
13018     04 4E 05 F1 | 	add	fp, #4
1301c     A7 14 62 FC | 	wrlong	arg02, fp
13020     04 4E 05 F1 | 	add	fp, #4
13024     A7 1A 62 FC | 	wrlong	arg05, fp
13028     14 4E 85 F1 | 	sub	fp, #20
1302c     84 A8 BF FD | 	call	#_pop
13030     FF 16 02 F6 | 	mov	arg03, result3
13034     A7 FA 61 FC | 	wrlong	result1, fp
13038     04 4E 05 F1 | 	add	fp, #4
1303c     A7 FC 61 FC | 	wrlong	result2, fp
13040     04 4E 05 F1 | 	add	fp, #4
13044     A7 16 62 FC | 	wrlong	arg03, fp
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     A7 12 02 F6 | 	mov	arg01, fp
13050     44 AA BF FD | 	call	#_converttoint
13054     FD 26 02 F6 | 	mov	local01, result1
13058     0C 4E 05 F1 | 	add	fp, #12
1305c     A7 12 02 F6 | 	mov	arg01, fp
13060     0C 4E 85 F1 | 	sub	fp, #12
13064     30 AA BF FD | 	call	#_converttoint
13068     FD 28 02 F6 | 	mov	local02, result1
1306c     18 4E 05 F1 | 	add	fp, #24
13070     A7 12 02 F6 | 	mov	arg01, fp
13074     18 4E 85 F1 | 	sub	fp, #24
13078     1C AA BF FD | 	call	#_converttoint
1307c     FD 2A 02 F6 | 	mov	local03, result1
13080     24 4E 05 F1 | 	add	fp, #36
13084     A7 12 02 F6 | 	mov	arg01, fp
13088     24 4E 85 F1 | 	sub	fp, #36
1308c     08 AA BF FD | 	call	#_converttoint
13090     FD 18 02 F6 | 	mov	arg04, result1
13094     37 00 00 FF 
13098     48 E4 05 F1 | 	add	objptr, ##28232
1309c     F2 1A 02 FB | 	rdlong	arg05, objptr
130a0     37 00 00 FF 
130a4     48 E4 85 F1 | 	sub	objptr, ##28232
130a8     13 13 02 F6 | 	mov	arg01, local01
130ac     14 15 02 F6 | 	mov	arg02, local02
130b0     15 17 02 F6 | 	mov	arg03, local03
130b4     24 33 B1 FD | 	call	#_hg010b_spin2_frame
130b8     A7 F0 03 F6 | 	mov	ptra, fp
130bc     B2 00 A0 FD | 	call	#popregs_
130c0                 | _do_frame_ret
130c0     2D 00 64 FD | 	ret
130c4                 | 
130c4                 | ' 
130c4                 | ' '-------------------- framebuf
130c4                 | ' 
130c4                 | ' sub do_framebuf
130c4                 | _do_framebuf
130c4     00 4A 05 F6 | 	mov	COUNT_, #0
130c8     A8 00 A0 FD | 	call	#pushregs_
130cc     0C F0 07 F1 | 	add	ptra, #12
130d0     08 4E 05 F1 | 	add	fp, #8
130d4     A7 3A 68 FC | 	wrlong	#29, fp
130d8     F2 12 02 FB | 	rdlong	arg01, objptr
130dc     08 4E 85 F1 | 	sub	fp, #8
130e0     A7 12 62 FC | 	wrlong	arg01, fp
130e4     A7 12 02 F6 | 	mov	arg01, fp
130e8     60 A8 BF FD | 	call	#_push
130ec     A7 F0 03 F6 | 	mov	ptra, fp
130f0     B2 00 A0 FD | 	call	#popregs_
130f4                 | _do_framebuf_ret
130f4     2D 00 64 FD | 	ret
130f8                 | 
130f8                 | ' '-------------------- fre
130f8                 | ' 
130f8                 | ' sub do_fre
130f8                 | _do_fre
130f8     01 4A 05 F6 | 	mov	COUNT_, #1
130fc     A8 00 A0 FD | 	call	#pushregs_
13100     0C F0 07 F1 | 	add	ptra, #12
13104     52 00 00 FF 
13108     F0 E4 05 F1 | 	add	objptr, ##42224
1310c     F2 12 02 FB | 	rdlong	arg01, objptr
13110     0F 00 00 FF 
13114     74 E4 85 F1 | 	sub	objptr, ##7796
13118     F2 26 02 FB | 	rdlong	local01, objptr
1311c     13 13 82 F1 | 	sub	arg01, local01
13120     0F 00 00 FF 
13124     EC E4 05 F1 | 	add	objptr, ##7916
13128     F2 12 62 FC | 	wrlong	arg01, objptr
1312c     08 4E 05 F1 | 	add	fp, #8
13130     A7 3A 68 FC | 	wrlong	#29, fp
13134     08 4E 85 F1 | 	sub	fp, #8
13138     F2 26 02 FB | 	rdlong	local01, objptr
1313c     52 00 00 FF 
13140     68 E5 85 F1 | 	sub	objptr, ##42344
13144     A7 26 62 FC | 	wrlong	local01, fp
13148     A7 12 02 F6 | 	mov	arg01, fp
1314c     FC A7 BF FD | 	call	#_push
13150     A7 F0 03 F6 | 	mov	ptra, fp
13154     B2 00 A0 FD | 	call	#popregs_
13158                 | _do_fre_ret
13158     2D 00 64 FD | 	ret
1315c                 | 
1315c                 | ' 
1315c                 | ' '-------------------- get
1315c                 | ' 
1315c                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
1315c                 | _do_get
1315c     09 4A 05 F6 | 	mov	COUNT_, #9
13160     A8 00 A0 FD | 	call	#pushregs_
13164     40 F0 07 F1 | 	add	ptra, #64
13168     4A 00 00 FF 
1316c     A0 E4 05 F1 | 	add	objptr, ##38048
13170     F2 1A 02 FB | 	rdlong	arg05, objptr
13174     0D 19 02 F6 | 	mov	arg04, arg05
13178     01 18 66 F0 | 	shl	arg04, #1
1317c     0D 19 02 F1 | 	add	arg04, arg05
13180     02 18 66 F0 | 	shl	arg04, #2
13184     03 00 00 FF 
13188     04 E4 85 F1 | 	sub	objptr, ##1540
1318c     F2 18 02 F1 | 	add	arg04, objptr
13190     0C 1B 02 FB | 	rdlong	arg05, arg04
13194     A7 1A 62 FC | 	wrlong	arg05, fp
13198                 | ' 
13198                 | ' numpar=compiledline(lineptr_e).result.uresult
13198                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
13198     04 1A 0E F2 | 	cmp	arg05, #4 wz
1319c     47 00 00 FF 
131a0     9C E4 85 F1 | 	sub	objptr, ##36508
131a4     48 00 90 5D |  if_ne	jmp	#LR__1540
131a8     08 A7 BF FD | 	call	#_pop
131ac     FF 1A 02 F6 | 	mov	arg05, result3
131b0     1C 4E 05 F1 | 	add	fp, #28
131b4     A7 FA 61 FC | 	wrlong	result1, fp
131b8     04 4E 05 F1 | 	add	fp, #4
131bc     A7 FC 61 FC | 	wrlong	result2, fp
131c0     04 4E 05 F1 | 	add	fp, #4
131c4     A7 1A 62 FC | 	wrlong	arg05, fp
131c8     08 4E 85 F1 | 	sub	fp, #8
131cc     A7 12 02 F6 | 	mov	arg01, fp
131d0     1C 4E 85 F1 | 	sub	fp, #28
131d4     C0 A8 BF FD | 	call	#_converttoint
131d8     52 00 00 FF 
131dc     64 E5 05 F1 | 	add	objptr, ##42340
131e0     F2 FA 61 FC | 	wrlong	result1, objptr
131e4     52 00 00 FF 
131e8     64 E5 85 F1 | 	sub	objptr, ##42340
131ec     18 00 90 FD | 	jmp	#LR__1541
131f0                 | LR__1540
131f0     52 00 00 FF 
131f4     64 E5 05 F1 | 	add	objptr, ##42340
131f8     FF FF FF FF 
131fc     F2 FE 6B FC | 	wrlong	##-1, objptr
13200     52 00 00 FF 
13204     64 E5 85 F1 | 	sub	objptr, ##42340
13208                 | LR__1541
13208                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
13208     A7 16 02 FB | 	rdlong	arg03, fp
1320c     03 16 56 F2 | 	cmps	arg03, #3 wc
13210     40 00 90 CD |  if_b	jmp	#LR__1542
13214     9C A6 BF FD | 	call	#_pop
13218     FF 16 02 F6 | 	mov	arg03, result3
1321c     1C 4E 05 F1 | 	add	fp, #28
13220     A7 FA 61 FC | 	wrlong	result1, fp
13224     04 4E 05 F1 | 	add	fp, #4
13228     A7 FC 61 FC | 	wrlong	result2, fp
1322c     04 4E 05 F1 | 	add	fp, #4
13230     A7 16 62 FC | 	wrlong	arg03, fp
13234     08 4E 85 F1 | 	sub	fp, #8
13238     A7 12 02 F6 | 	mov	arg01, fp
1323c     1C 4E 85 F1 | 	sub	fp, #28
13240     54 A8 BF FD | 	call	#_converttoint
13244     08 4E 05 F1 | 	add	fp, #8
13248     A7 FA 61 FC | 	wrlong	result1, fp
1324c     08 4E 85 F1 | 	sub	fp, #8
13250     0C 00 90 FD | 	jmp	#LR__1543
13254                 | LR__1542
13254     08 4E 05 F1 | 	add	fp, #8
13258     A7 02 68 FC | 	wrlong	#1, fp
1325c     08 4E 85 F1 | 	sub	fp, #8
13260                 | LR__1543
13260                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
13260     A7 16 02 FB | 	rdlong	arg03, fp
13264     02 16 56 F2 | 	cmps	arg03, #2 wc
13268     3C 00 90 CD |  if_b	jmp	#LR__1544
1326c     44 A6 BF FD | 	call	#_pop
13270     FF 16 02 F6 | 	mov	arg03, result3
13274     1C 4E 05 F1 | 	add	fp, #28
13278     A7 FA 61 FC | 	wrlong	result1, fp
1327c     04 4E 05 F1 | 	add	fp, #4
13280     A7 FC 61 FC | 	wrlong	result2, fp
13284     04 4E 05 F1 | 	add	fp, #4
13288     A7 16 62 FC | 	wrlong	arg03, fp
1328c     08 4E 85 F1 | 	sub	fp, #8
13290     A7 12 02 F6 | 	mov	arg01, fp
13294     1C 4E 85 F1 | 	sub	fp, #28
13298     FC A7 BF FD | 	call	#_converttoint
1329c     0C 4E 05 F1 | 	add	fp, #12
132a0     A7 FA 61 FC | 	wrlong	result1, fp
132a4     0C 4E 85 F1 | 	sub	fp, #12
132a8                 | LR__1544
132a8     08 A6 BF FD | 	call	#_pop
132ac     FF 16 02 F6 | 	mov	arg03, result3
132b0     1C 4E 05 F1 | 	add	fp, #28
132b4     A7 FA 61 FC | 	wrlong	result1, fp
132b8     04 4E 05 F1 | 	add	fp, #4
132bc     A7 FC 61 FC | 	wrlong	result2, fp
132c0     04 4E 05 F1 | 	add	fp, #4
132c4     A7 16 62 FC | 	wrlong	arg03, fp
132c8     08 4E 85 F1 | 	sub	fp, #8
132cc     A7 12 02 F6 | 	mov	arg01, fp
132d0     1C 4E 85 F1 | 	sub	fp, #28
132d4     C0 A7 BF FD | 	call	#_converttoint
132d8     04 4E 05 F1 | 	add	fp, #4
132dc     A7 FA 61 FC | 	wrlong	result1, fp
132e0     10 4E 05 F1 | 	add	fp, #16
132e4     A7 16 02 FB | 	rdlong	arg03, fp
132e8     14 4E 85 F1 | 	sub	fp, #20
132ec     02 16 66 F0 | 	shl	arg03, #2
132f0     50 00 00 FF 
132f4     E4 E4 05 F1 | 	add	objptr, ##41188
132f8     F2 26 02 F6 | 	mov	local01, objptr
132fc     F2 16 02 F1 | 	add	arg03, objptr
13300     0B 01 68 FC | 	wrlong	#0, arg03
13304                 | ' t1=pop() : channel=converttoint(t1)
13304                 | ' getres(j)=0
13304                 | ' if pos>=0 then
13304     02 00 00 FF 
13308     80 E4 05 F1 | 	add	objptr, ##1152
1330c     F2 28 02 FB | 	rdlong	local02, objptr
13310     52 00 00 FF 
13314     64 E5 85 F1 | 	sub	objptr, ##42340
13318     00 28 56 F2 | 	cmps	local02, #0 wc
1331c     F0 01 90 CD |  if_b	jmp	#LR__1551
13320                 | '   for i=0 to  amount/1024
13320     10 4E 05 F1 | 	add	fp, #16
13324     A7 00 68 FC | 	wrlong	#0, fp
13328     08 4E 85 F1 | 	sub	fp, #8
1332c     A7 2A 02 FB | 	rdlong	local03, fp
13330     08 4E 85 F1 | 	sub	fp, #8
13334     15 2D 52 F6 | 	abs	local04, local03 wc
13338     0A 2C 46 F0 | 	shr	local04, #10
1333c     16 2D 82 F6 | 	negc	local04, local04
13340     01 2C 06 F1 | 	add	local04, #1
13344                 | LR__1545
13344     10 4E 05 F1 | 	add	fp, #16
13348     A7 2A 02 FB | 	rdlong	local03, fp
1334c     10 4E 85 F1 | 	sub	fp, #16
13350     16 2B 52 F2 | 	cmps	local03, local04 wc
13354     9C 03 90 3D |  if_ae	jmp	#LR__1559
13358                 | '     get #channel,pos+1,block(0),amount,r
13358     04 4E 05 F1 | 	add	fp, #4
1335c     A7 12 02 FB | 	rdlong	arg01, fp
13360     52 00 00 FF 
13364     64 E5 05 F1 | 	add	objptr, ##42340
13368     F2 14 02 FB | 	rdlong	arg02, objptr
1336c     01 14 06 F1 | 	add	arg02, #1
13370     04 00 00 FF 
13374     90 E4 85 F1 | 	sub	objptr, ##2192
13378     F2 16 02 F6 | 	mov	arg03, objptr
1337c     4E 00 00 FF 
13380     D4 E4 85 F1 | 	sub	objptr, ##40148
13384     04 4E 05 F1 | 	add	fp, #4
13388     A7 18 02 FB | 	rdlong	arg04, fp
1338c     08 4E 85 F1 | 	sub	fp, #8
13390     01 1A 06 F6 | 	mov	arg05, #1
13394     D0 5E B1 FD | 	call	#__system___basic_get
13398     18 4E 05 F1 | 	add	fp, #24
1339c     A7 FA 61 FC | 	wrlong	result1, fp
133a0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
133a0     0C 4E 85 F1 | 	sub	fp, #12
133a4     A7 28 02 FB | 	rdlong	local02, fp
133a8     0C 4E 85 F1 | 	sub	fp, #12
133ac     00 04 00 FF 
133b0     00 28 56 F2 | 	cmps	local02, ##524288 wc
133b4     7C 00 90 3D |  if_ae	jmp	#LR__1547
133b8     14 4E 05 F1 | 	add	fp, #20
133bc     A7 00 68 FC | 	wrlong	#0, fp
133c0     04 4E 05 F1 | 	add	fp, #4
133c4     A7 2E 02 FB | 	rdlong	local05, fp
133c8     18 4E 85 F1 | 	sub	fp, #24
133cc                 | LR__1546
133cc     14 4E 05 F1 | 	add	fp, #20
133d0     A7 28 02 FB | 	rdlong	local02, fp
133d4     14 4E 85 F1 | 	sub	fp, #20
133d8     17 29 52 F2 | 	cmps	local02, local05 wc
133dc     D8 00 90 3D |  if_ae	jmp	#LR__1550
133e0     0C 4E 05 F1 | 	add	fp, #12
133e4     A7 12 02 FB | 	rdlong	arg01, fp
133e8     04 4E 05 F1 | 	add	fp, #4
133ec     A7 2A 02 FB | 	rdlong	local03, fp
133f0     0A 2A 66 F0 | 	shl	local03, #10
133f4     15 13 02 F1 | 	add	arg01, local03
133f8     04 4E 05 F1 | 	add	fp, #4
133fc     A7 2A 02 FB | 	rdlong	local03, fp
13400     15 13 02 F1 | 	add	arg01, local03
13404     4E 00 00 FF 
13408     D4 E4 05 F1 | 	add	objptr, ##40148
1340c     F2 2A 02 F1 | 	add	local03, objptr
13410     15 15 C2 FA | 	rdbyte	arg02, local03
13414     09 15 42 FC | 	wrbyte	arg02, arg01
13418     4E 00 00 FF 
1341c     D4 E4 85 F1 | 	sub	objptr, ##40148
13420     A7 2A 02 FB | 	rdlong	local03, fp
13424     01 2A 06 F1 | 	add	local03, #1
13428     A7 2A 62 FC | 	wrlong	local03, fp
1342c     14 4E 85 F1 | 	sub	fp, #20
13430     98 FF 9F FD | 	jmp	#LR__1546
13434                 | LR__1547
13434     14 4E 05 F1 | 	add	fp, #20
13438     A7 00 68 FC | 	wrlong	#0, fp
1343c     04 4E 05 F1 | 	add	fp, #4
13440     A7 30 02 FB | 	rdlong	local06, fp
13444     18 4E 85 F1 | 	sub	fp, #24
13448                 | LR__1548
13448     14 4E 05 F1 | 	add	fp, #20
1344c     A7 28 02 FB | 	rdlong	local02, fp
13450     14 4E 85 F1 | 	sub	fp, #20
13454     18 29 52 F2 | 	cmps	local02, local06 wc
13458     5C 00 90 3D |  if_ae	jmp	#LR__1549
1345c     0C 4E 05 F1 | 	add	fp, #12
13460     A7 12 02 FB | 	rdlong	arg01, fp
13464     04 4E 05 F1 | 	add	fp, #4
13468     A7 2E 02 FB | 	rdlong	local05, fp
1346c     0A 2E 66 F0 | 	shl	local05, #10
13470     17 13 02 F1 | 	add	arg01, local05
13474     04 4E 05 F1 | 	add	fp, #4
13478     A7 2E 02 FB | 	rdlong	local05, fp
1347c     17 13 02 F1 | 	add	arg01, local05
13480     14 4E 85 F1 | 	sub	fp, #20
13484     4E 00 00 FF 
13488     D4 E4 05 F1 | 	add	objptr, ##40148
1348c     F2 2E 02 F1 | 	add	local05, objptr
13490     17 15 C2 FA | 	rdbyte	arg02, local05
13494     4E 00 00 FF 
13498     D4 E4 85 F1 | 	sub	objptr, ##40148
1349c     2C 17 B1 FD | 	call	#_pspoke
134a0     14 4E 05 F1 | 	add	fp, #20
134a4     A7 2E 02 FB | 	rdlong	local05, fp
134a8     01 2E 06 F1 | 	add	local05, #1
134ac     A7 2E 62 FC | 	wrlong	local05, fp
134b0     14 4E 85 F1 | 	sub	fp, #20
134b4     90 FF 9F FD | 	jmp	#LR__1548
134b8                 | LR__1549
134b8                 | LR__1550
134b8     14 4E 05 F1 | 	add	fp, #20
134bc     A7 30 02 FB | 	rdlong	local06, fp
134c0     18 2B 02 F6 | 	mov	local03, local06
134c4     02 2A 66 F0 | 	shl	local03, #2
134c8     50 00 00 FF 
134cc     E4 E4 05 F1 | 	add	objptr, ##41188
134d0     F2 2A 02 F1 | 	add	local03, objptr
134d4     02 30 66 F0 | 	shl	local06, #2
134d8     F2 30 02 F1 | 	add	local06, objptr
134dc     18 31 02 FB | 	rdlong	local06, local06
134e0     04 4E 05 F1 | 	add	fp, #4
134e4     A7 2E 02 FB | 	rdlong	local05, fp
134e8     17 31 02 F1 | 	add	local06, local05
134ec     15 31 62 FC | 	wrlong	local06, local03
134f0     08 4E 85 F1 | 	sub	fp, #8
134f4     A7 30 02 FB | 	rdlong	local06, fp
134f8     01 30 06 F1 | 	add	local06, #1
134fc     A7 30 62 FC | 	wrlong	local06, fp
13500     10 4E 85 F1 | 	sub	fp, #16
13504     50 00 00 FF 
13508     E4 E4 85 F1 | 	sub	objptr, ##41188
1350c     34 FE 9F FD | 	jmp	#LR__1545
13510                 | LR__1551
13510                 | '   for i=0 to  amount/1024
13510     10 4E 05 F1 | 	add	fp, #16
13514     A7 00 68 FC | 	wrlong	#0, fp
13518     08 4E 85 F1 | 	sub	fp, #8
1351c     A7 2A 02 FB | 	rdlong	local03, fp
13520     08 4E 85 F1 | 	sub	fp, #8
13524     15 33 52 F6 | 	abs	local07, local03 wc
13528     0A 32 46 F0 | 	shr	local07, #10
1352c     19 33 82 F6 | 	negc	local07, local07
13530     01 32 06 F1 | 	add	local07, #1
13534                 | LR__1552
13534     10 4E 05 F1 | 	add	fp, #16
13538     A7 2A 02 FB | 	rdlong	local03, fp
1353c     10 4E 85 F1 | 	sub	fp, #16
13540     19 2B 52 F2 | 	cmps	local03, local07 wc
13544     AC 01 90 3D |  if_ae	jmp	#LR__1558
13548                 | '     get #channel,,block(0),amount,r
13548     04 4E 05 F1 | 	add	fp, #4
1354c     A7 12 02 FB | 	rdlong	arg01, fp
13550     4E 00 00 FF 
13554     D4 E4 05 F1 | 	add	objptr, ##40148
13558     F2 16 02 F6 | 	mov	arg03, objptr
1355c     4E 00 00 FF 
13560     D4 E4 85 F1 | 	sub	objptr, ##40148
13564     04 4E 05 F1 | 	add	fp, #4
13568     A7 18 02 FB | 	rdlong	arg04, fp
1356c     08 4E 85 F1 | 	sub	fp, #8
13570     00 14 06 F6 | 	mov	arg02, #0
13574     01 1A 06 F6 | 	mov	arg05, #1
13578     EC 5C B1 FD | 	call	#__system___basic_get
1357c     18 4E 05 F1 | 	add	fp, #24
13580     A7 FA 61 FC | 	wrlong	result1, fp
13584                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
13584     0C 4E 85 F1 | 	sub	fp, #12
13588     A7 28 02 FB | 	rdlong	local02, fp
1358c     0C 4E 85 F1 | 	sub	fp, #12
13590     00 04 00 FF 
13594     00 28 56 F2 | 	cmps	local02, ##524288 wc
13598     7C 00 90 3D |  if_ae	jmp	#LR__1554
1359c     14 4E 05 F1 | 	add	fp, #20
135a0     A7 00 68 FC | 	wrlong	#0, fp
135a4     04 4E 05 F1 | 	add	fp, #4
135a8     A7 34 02 FB | 	rdlong	local08, fp
135ac     18 4E 85 F1 | 	sub	fp, #24
135b0                 | LR__1553
135b0     14 4E 05 F1 | 	add	fp, #20
135b4     A7 28 02 FB | 	rdlong	local02, fp
135b8     14 4E 85 F1 | 	sub	fp, #20
135bc     1A 29 52 F2 | 	cmps	local02, local08 wc
135c0     D8 00 90 3D |  if_ae	jmp	#LR__1557
135c4     0C 4E 05 F1 | 	add	fp, #12
135c8     A7 12 02 FB | 	rdlong	arg01, fp
135cc     04 4E 05 F1 | 	add	fp, #4
135d0     A7 30 02 FB | 	rdlong	local06, fp
135d4     0A 30 66 F0 | 	shl	local06, #10
135d8     18 13 02 F1 | 	add	arg01, local06
135dc     04 4E 05 F1 | 	add	fp, #4
135e0     A7 30 02 FB | 	rdlong	local06, fp
135e4     18 13 02 F1 | 	add	arg01, local06
135e8     4E 00 00 FF 
135ec     D4 E4 05 F1 | 	add	objptr, ##40148
135f0     F2 30 02 F1 | 	add	local06, objptr
135f4     18 15 C2 FA | 	rdbyte	arg02, local06
135f8     09 15 42 FC | 	wrbyte	arg02, arg01
135fc     4E 00 00 FF 
13600     D4 E4 85 F1 | 	sub	objptr, ##40148
13604     A7 30 02 FB | 	rdlong	local06, fp
13608     01 30 06 F1 | 	add	local06, #1
1360c     A7 30 62 FC | 	wrlong	local06, fp
13610     14 4E 85 F1 | 	sub	fp, #20
13614     98 FF 9F FD | 	jmp	#LR__1553
13618                 | LR__1554
13618     14 4E 05 F1 | 	add	fp, #20
1361c     A7 00 68 FC | 	wrlong	#0, fp
13620     04 4E 05 F1 | 	add	fp, #4
13624     A7 36 02 FB | 	rdlong	local09, fp
13628     18 4E 85 F1 | 	sub	fp, #24
1362c                 | LR__1555
1362c     14 4E 05 F1 | 	add	fp, #20
13630     A7 28 02 FB | 	rdlong	local02, fp
13634     14 4E 85 F1 | 	sub	fp, #20
13638     1B 29 52 F2 | 	cmps	local02, local09 wc
1363c     5C 00 90 3D |  if_ae	jmp	#LR__1556
13640     0C 4E 05 F1 | 	add	fp, #12
13644     A7 12 02 FB | 	rdlong	arg01, fp
13648     04 4E 05 F1 | 	add	fp, #4
1364c     A7 34 02 FB | 	rdlong	local08, fp
13650     0A 34 66 F0 | 	shl	local08, #10
13654     1A 13 02 F1 | 	add	arg01, local08
13658     04 4E 05 F1 | 	add	fp, #4
1365c     A7 34 02 FB | 	rdlong	local08, fp
13660     1A 13 02 F1 | 	add	arg01, local08
13664     14 4E 85 F1 | 	sub	fp, #20
13668     4E 00 00 FF 
1366c     D4 E4 05 F1 | 	add	objptr, ##40148
13670     F2 34 02 F1 | 	add	local08, objptr
13674     1A 15 C2 FA | 	rdbyte	arg02, local08
13678     4E 00 00 FF 
1367c     D4 E4 85 F1 | 	sub	objptr, ##40148
13680     48 15 B1 FD | 	call	#_pspoke
13684     14 4E 05 F1 | 	add	fp, #20
13688     A7 34 02 FB | 	rdlong	local08, fp
1368c     01 34 06 F1 | 	add	local08, #1
13690     A7 34 62 FC | 	wrlong	local08, fp
13694     14 4E 85 F1 | 	sub	fp, #20
13698     90 FF 9F FD | 	jmp	#LR__1555
1369c                 | LR__1556
1369c                 | LR__1557
1369c     14 4E 05 F1 | 	add	fp, #20
136a0     A7 36 02 FB | 	rdlong	local09, fp
136a4     1B 31 02 F6 | 	mov	local06, local09
136a8     02 30 66 F0 | 	shl	local06, #2
136ac     50 00 00 FF 
136b0     E4 E4 05 F1 | 	add	objptr, ##41188
136b4     F2 30 02 F1 | 	add	local06, objptr
136b8     02 36 66 F0 | 	shl	local09, #2
136bc     F2 36 02 F1 | 	add	local09, objptr
136c0     1B 37 02 FB | 	rdlong	local09, local09
136c4     04 4E 05 F1 | 	add	fp, #4
136c8     A7 34 02 FB | 	rdlong	local08, fp
136cc     1A 37 02 F1 | 	add	local09, local08
136d0     18 37 62 FC | 	wrlong	local09, local06
136d4     08 4E 85 F1 | 	sub	fp, #8
136d8     A7 36 02 FB | 	rdlong	local09, fp
136dc     01 36 06 F1 | 	add	local09, #1
136e0     A7 36 62 FC | 	wrlong	local09, fp
136e4     10 4E 85 F1 | 	sub	fp, #16
136e8     50 00 00 FF 
136ec     E4 E4 85 F1 | 	sub	objptr, ##41188
136f0     40 FE 9F FD | 	jmp	#LR__1552
136f4                 | LR__1558
136f4                 | LR__1559
136f4     A7 F0 03 F6 | 	mov	ptra, fp
136f8     B2 00 A0 FD | 	call	#popregs_
136fc                 | _do_get_ret
136fc     2D 00 64 FD | 	ret
13700                 | 
13700                 | ' 
13700                 | ' '-------------------- getcolor
13700                 | ' 
13700                 | ' sub do_getcolor
13700                 | _do_getcolor
13700     01 4A 05 F6 | 	mov	COUNT_, #1
13704     A8 00 A0 FD | 	call	#pushregs_
13708     10 F0 07 F1 | 	add	ptra, #16
1370c     4A 00 00 FF 
13710     A0 E4 05 F1 | 	add	objptr, ##38048
13714     F2 26 02 FB | 	rdlong	local01, objptr
13718     13 17 02 F6 | 	mov	arg03, local01
1371c     01 16 66 F0 | 	shl	arg03, #1
13720     13 17 02 F1 | 	add	arg03, local01
13724     02 16 66 F0 | 	shl	arg03, #2
13728     03 00 00 FF 
1372c     04 E4 85 F1 | 	sub	objptr, ##1540
13730     F2 16 02 F1 | 	add	arg03, objptr
13734     0B 17 02 FB | 	rdlong	arg03, arg03
13738     0C 4E 05 F1 | 	add	fp, #12
1373c     A7 16 62 FC | 	wrlong	arg03, fp
13740                 | ' 
13740                 | ' numpar=compiledline(lineptr_e).result.uresult
13740                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
13740     0C 4E 85 F1 | 	sub	fp, #12
13744     02 16 16 F2 | 	cmp	arg03, #2 wc
13748     47 00 00 FF 
1374c     9C E4 85 F1 | 	sub	objptr, ##36508
13750     0C 4E 05 C1 |  if_b	add	fp, #12
13754     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13758     0C 4E 85 C1 |  if_b	sub	fp, #12
1375c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
13760     00 12 06 F6 | 	mov	arg01, #0
13764     3C A9 B1 FD | 	call	#__system___getiolock_0625
13768     FD 12 02 F6 | 	mov	arg01, result1
1376c     84 4C B1 FD | 	call	#__system___lockmem
13770     C4 01 00 FF 
13774     A4 15 06 F6 | 	mov	arg02, ##@LR__6096
13778     00 12 06 F6 | 	mov	arg01, #0
1377c     00 16 06 F6 | 	mov	arg03, #0
13780     68 59 B1 FD | 	call	#__system___basic_print_string
13784     00 12 06 F6 | 	mov	arg01, #0
13788     18 A9 B1 FD | 	call	#__system___getiolock_0625
1378c     FD 00 68 FC | 	wrlong	#0, result1
13790     27 12 06 F6 | 	mov	arg01, #39
13794     00 14 06 F6 | 	mov	arg02, #0
13798     00 12 B1 FD | 	call	#_printerror
1379c     60 00 90 FD | 	jmp	#LR__1561
137a0                 | LR__1560
137a0     10 A1 BF FD | 	call	#_pop
137a4     A7 FA 61 FC | 	wrlong	result1, fp
137a8     04 4E 05 F1 | 	add	fp, #4
137ac     A7 FC 61 FC | 	wrlong	result2, fp
137b0     04 4E 05 F1 | 	add	fp, #4
137b4     A7 FE 61 FC | 	wrlong	result3, fp
137b8     08 4E 85 F1 | 	sub	fp, #8
137bc     A7 12 02 F6 | 	mov	arg01, fp
137c0     D4 A2 BF FD | 	call	#_converttoint
137c4     FD 12 02 F6 | 	mov	arg01, result1
137c8                 | ' 
137c8                 | ' return long[palette_ptr+4*color]
137c8     1C E4 05 F1 | 	add	objptr, #28
137cc     F2 FA 01 FB | 	rdlong	result1, objptr
137d0     1C E4 85 F1 | 	sub	objptr, #28
137d4     02 12 66 F0 | 	shl	arg01, #2
137d8     09 FB 01 F1 | 	add	result1, arg01
137dc     FD FA 01 FB | 	rdlong	result1, result1
137e0     08 FA C5 F0 | 	sar	result1, #8
137e4     F8 FA 05 F4 | 	bitl	result1, #248
137e8     A7 FA 61 FC | 	wrlong	result1, fp
137ec     08 4E 05 F1 | 	add	fp, #8
137f0     A7 3A 68 FC | 	wrlong	#29, fp
137f4     08 4E 85 F1 | 	sub	fp, #8
137f8     A7 12 02 F6 | 	mov	arg01, fp
137fc     4C A1 BF FD | 	call	#_push
13800                 | LR__1561
13800     A7 F0 03 F6 | 	mov	ptra, fp
13804     B2 00 A0 FD | 	call	#popregs_
13808                 | _do_getcolor_ret
13808     2D 00 64 FD | 	ret
1380c                 | 
1380c                 | ' 
1380c                 | ' '-------------------- getenvsustain
1380c                 | ' 
1380c                 | ' sub do_getenvsustain
1380c                 | _do_getenvsustain
1380c     01 4A 05 F6 | 	mov	COUNT_, #1
13810     A8 00 A0 FD | 	call	#pushregs_
13814     10 F0 07 F1 | 	add	ptra, #16
13818     4A 00 00 FF 
1381c     A0 E4 05 F1 | 	add	objptr, ##38048
13820     F2 26 02 FB | 	rdlong	local01, objptr
13824     13 17 02 F6 | 	mov	arg03, local01
13828     01 16 66 F0 | 	shl	arg03, #1
1382c     13 17 02 F1 | 	add	arg03, local01
13830     02 16 66 F0 | 	shl	arg03, #2
13834     03 00 00 FF 
13838     04 E4 85 F1 | 	sub	objptr, ##1540
1383c     F2 16 02 F1 | 	add	arg03, objptr
13840     0B 17 02 FB | 	rdlong	arg03, arg03
13844     0C 4E 05 F1 | 	add	fp, #12
13848     A7 16 62 FC | 	wrlong	arg03, fp
1384c                 | ' 
1384c                 | ' numpar=compiledline(lineptr_e).result.uresult
1384c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1384c     0C 4E 85 F1 | 	sub	fp, #12
13850     02 16 16 F2 | 	cmp	arg03, #2 wc
13854     47 00 00 FF 
13858     9C E4 85 F1 | 	sub	objptr, ##36508
1385c     0C 4E 05 C1 |  if_b	add	fp, #12
13860     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13864     0C 4E 85 C1 |  if_b	sub	fp, #12
13868     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
1386c     00 12 06 F6 | 	mov	arg01, #0
13870     30 A8 B1 FD | 	call	#__system___getiolock_0625
13874     FD 12 02 F6 | 	mov	arg01, result1
13878     78 4B B1 FD | 	call	#__system___lockmem
1387c     C4 01 00 FF 
13880     AE 15 06 F6 | 	mov	arg02, ##@LR__6097
13884     00 12 06 F6 | 	mov	arg01, #0
13888     00 16 06 F6 | 	mov	arg03, #0
1388c     5C 58 B1 FD | 	call	#__system___basic_print_string
13890     00 12 06 F6 | 	mov	arg01, #0
13894     0C A8 B1 FD | 	call	#__system___getiolock_0625
13898     FD 00 68 FC | 	wrlong	#0, result1
1389c     27 12 06 F6 | 	mov	arg01, #39
138a0     00 14 06 F6 | 	mov	arg02, #0
138a4     F4 10 B1 FD | 	call	#_printerror
138a8     64 00 90 FD | 	jmp	#LR__1571
138ac                 | LR__1570
138ac     04 A0 BF FD | 	call	#_pop
138b0     FD 26 02 F6 | 	mov	local01, result1
138b4     FE 16 02 F6 | 	mov	arg03, result2
138b8     A7 26 62 FC | 	wrlong	local01, fp
138bc     04 4E 05 F1 | 	add	fp, #4
138c0     A7 16 62 FC | 	wrlong	arg03, fp
138c4     04 4E 05 F1 | 	add	fp, #4
138c8     A7 FE 61 FC | 	wrlong	result3, fp
138cc     08 4E 85 F1 | 	sub	fp, #8
138d0     A7 12 02 F6 | 	mov	arg01, fp
138d4     C0 A1 BF FD | 	call	#_converttoint
138d8     FD 26 02 F6 | 	mov	local01, result1
138dc     01 26 66 F0 | 	shl	local01, #1
138e0     52 00 00 FF 
138e4     0C E5 05 F1 | 	add	objptr, ##42252
138e8     F2 26 02 F1 | 	add	local01, objptr
138ec     13 27 E2 FA | 	rdword	local01, local01
138f0     A7 26 62 FC | 	wrlong	local01, fp
138f4     08 4E 05 F1 | 	add	fp, #8
138f8     A7 38 68 FC | 	wrlong	#28, fp
138fc     08 4E 85 F1 | 	sub	fp, #8
13900     A7 12 02 F6 | 	mov	arg01, fp
13904     52 00 00 FF 
13908     0C E5 85 F1 | 	sub	objptr, ##42252
1390c     3C A0 BF FD | 	call	#_push
13910                 | LR__1571
13910     A7 F0 03 F6 | 	mov	ptra, fp
13914     B2 00 A0 FD | 	call	#popregs_
13918                 | _do_getenvsustain_ret
13918     2D 00 64 FD | 	ret
1391c                 | 
1391c                 | ' 
1391c                 | ' '-------------------- getnotevalue
1391c                 | ' 
1391c                 | ' sub do_getnotevalue
1391c                 | _do_getnotevalue
1391c     01 4A 05 F6 | 	mov	COUNT_, #1
13920     A8 00 A0 FD | 	call	#pushregs_
13924     1C F0 07 F1 | 	add	ptra, #28
13928     88 9F BF FD | 	call	#_pop
1392c     FF 14 02 F6 | 	mov	arg02, result3
13930     10 4E 05 F1 | 	add	fp, #16
13934     A7 FA 61 FC | 	wrlong	result1, fp
13938     04 4E 05 F1 | 	add	fp, #4
1393c     A7 FC 61 FC | 	wrlong	result2, fp
13940     04 4E 05 F1 | 	add	fp, #4
13944     A7 14 62 FC | 	wrlong	arg02, fp
13948     08 4E 85 F1 | 	sub	fp, #8
1394c     A7 12 02 F6 | 	mov	arg01, fp
13950     10 4E 85 F1 | 	sub	fp, #16
13954     40 A1 BF FD | 	call	#_converttoint
13958     FD 14 52 F6 | 	abs	arg02, result1 wc
1395c     0C 14 16 FD | 	qdiv	arg02, #12
13960     0C 4E 05 F1 | 	add	fp, #12
13964     A7 FA 61 FC | 	wrlong	result1, fp
13968     14 00 00 FF 
1396c     D8 E4 05 F1 | 	add	objptr, ##10456
13970     08 4E 85 F1 | 	sub	fp, #8
13974     19 14 62 FD | 	getqy	arg02
13978     0A 15 82 F6 | 	negc	arg02, arg02
1397c     02 14 66 F0 | 	shl	arg02, #2
13980     F2 14 02 F1 | 	add	arg02, objptr
13984     0A 15 02 FB | 	rdlong	arg02, arg02
13988     A7 14 62 FC | 	wrlong	arg02, fp
1398c     08 4E 05 F1 | 	add	fp, #8
13990     A7 14 02 FB | 	rdlong	arg02, fp
13994     0A 15 52 F6 | 	abs	arg02, arg02 wc
13998     0C 14 16 FD | 	qdiv	arg02, #12
1399c     0C 4E 85 F1 | 	sub	fp, #12
139a0     14 00 00 FF 
139a4     D8 E4 85 F1 | 	sub	objptr, ##10456
139a8     18 14 62 FD | 	getqx	arg02
139ac     0A 13 82 F6 | 	negc	arg01, arg02
139b0     09 13 52 F6 | 	abs	arg01, arg01 wc
139b4     1F 26 C6 C9 |  if_b	decod	local01, #31
139b8     00 26 06 36 |  if_ae	mov	local01, #0
139bc     AC 74 B1 FD | 	call	#__system___float_fromuns
139c0     13 FB 61 F5 | 	xor	result1, local01
139c4     08 4E 05 F1 | 	add	fp, #8
139c8     A7 FA 61 FC | 	wrlong	result1, fp
139cc     FD 14 02 F6 | 	mov	arg02, result1
139d0     08 4E 85 F1 | 	sub	fp, #8
139d4     1E 12 C6 F9 | 	decod	arg01, #30
139d8     A0 87 B1 FD | 	call	#__system____builtin_powf
139dc     FD 12 02 F6 | 	mov	arg01, result1
139e0     04 4E 05 F1 | 	add	fp, #4
139e4     A7 14 02 FB | 	rdlong	arg02, fp
139e8     04 4E 85 F1 | 	sub	fp, #4
139ec     80 78 B1 FD | 	call	#__system___float_mul
139f0     A7 FA 61 FC | 	wrlong	result1, fp
139f4     10 4E 05 F1 | 	add	fp, #16
139f8     A7 FA 61 FC | 	wrlong	result1, fp
139fc     08 4E 05 F1 | 	add	fp, #8
13a00     A7 3C 68 FC | 	wrlong	#30, fp
13a04     08 4E 85 F1 | 	sub	fp, #8
13a08     A7 12 02 F6 | 	mov	arg01, fp
13a0c     10 4E 85 F1 | 	sub	fp, #16
13a10     38 9F BF FD | 	call	#_push
13a14     A7 F0 03 F6 | 	mov	ptra, fp
13a18     B2 00 A0 FD | 	call	#popregs_
13a1c                 | _do_getnotevalue_ret
13a1c     2D 00 64 FD | 	ret
13a20                 | 
13a20                 | ' 
13a20                 | ' '-------------------- getpixel
13a20                 | ' 
13a20                 | ' sub do_getpixel
13a20                 | _do_getpixel
13a20     00 4A 05 F6 | 	mov	COUNT_, #0
13a24     A8 00 A0 FD | 	call	#pushregs_
13a28     24 F0 07 F1 | 	add	ptra, #36
13a2c     4A 00 00 FF 
13a30     A0 E4 05 F1 | 	add	objptr, ##38048
13a34     F2 16 02 FB | 	rdlong	arg03, objptr
13a38     0B 15 02 F6 | 	mov	arg02, arg03
13a3c     01 14 66 F0 | 	shl	arg02, #1
13a40     0B 15 02 F1 | 	add	arg02, arg03
13a44     02 14 66 F0 | 	shl	arg02, #2
13a48     03 00 00 FF 
13a4c     04 E4 85 F1 | 	sub	objptr, ##1540
13a50     F2 14 02 F1 | 	add	arg02, objptr
13a54     0A 17 02 FB | 	rdlong	arg03, arg02
13a58     18 4E 05 F1 | 	add	fp, #24
13a5c     A7 16 62 FC | 	wrlong	arg03, fp
13a60                 | ' 
13a60                 | ' numpar=compiledline(lineptr_e).result.uresult
13a60                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13a60     18 4E 85 F1 | 	sub	fp, #24
13a64     02 16 0E F2 | 	cmp	arg03, #2 wz
13a68     47 00 00 FF 
13a6c     9C E4 85 F1 | 	sub	objptr, ##36508
13a70     40 00 90 AD |  if_e	jmp	#LR__1580
13a74     00 12 06 F6 | 	mov	arg01, #0
13a78     28 A6 B1 FD | 	call	#__system___getiolock_0625
13a7c     FD 12 02 F6 | 	mov	arg01, result1
13a80     70 49 B1 FD | 	call	#__system___lockmem
13a84     C4 01 00 FF 
13a88     BE 15 06 F6 | 	mov	arg02, ##@LR__6098
13a8c     00 12 06 F6 | 	mov	arg01, #0
13a90     00 16 06 F6 | 	mov	arg03, #0
13a94     54 56 B1 FD | 	call	#__system___basic_print_string
13a98     00 12 06 F6 | 	mov	arg01, #0
13a9c     04 A6 B1 FD | 	call	#__system___getiolock_0625
13aa0     FD 00 68 FC | 	wrlong	#0, result1
13aa4     27 12 06 F6 | 	mov	arg01, #39
13aa8     00 14 06 F6 | 	mov	arg02, #0
13aac     EC 0E B1 FD | 	call	#_printerror
13ab0     B4 00 90 FD | 	jmp	#LR__1581
13ab4                 | LR__1580
13ab4     FC 9D BF FD | 	call	#_pop
13ab8     FD 16 02 F6 | 	mov	arg03, result1
13abc     FE 14 02 F6 | 	mov	arg02, result2
13ac0     FF 12 02 F6 | 	mov	arg01, result3
13ac4     0C 4E 05 F1 | 	add	fp, #12
13ac8     A7 16 62 FC | 	wrlong	arg03, fp
13acc     04 4E 05 F1 | 	add	fp, #4
13ad0     A7 14 62 FC | 	wrlong	arg02, fp
13ad4     04 4E 05 F1 | 	add	fp, #4
13ad8     A7 12 62 FC | 	wrlong	arg01, fp
13adc     14 4E 85 F1 | 	sub	fp, #20
13ae0     D0 9D BF FD | 	call	#_pop
13ae4     FF 16 02 F6 | 	mov	arg03, result3
13ae8     A7 FA 61 FC | 	wrlong	result1, fp
13aec     04 4E 05 F1 | 	add	fp, #4
13af0     A7 FC 61 FC | 	wrlong	result2, fp
13af4     04 4E 05 F1 | 	add	fp, #4
13af8     A7 16 62 FC | 	wrlong	arg03, fp
13afc     08 4E 85 F1 | 	sub	fp, #8
13b00     A7 12 02 F6 | 	mov	arg01, fp
13b04     90 9F BF FD | 	call	#_converttoint
13b08     1C 4E 05 F1 | 	add	fp, #28
13b0c     A7 FA 61 FC | 	wrlong	result1, fp
13b10     10 4E 85 F1 | 	sub	fp, #16
13b14     A7 12 02 F6 | 	mov	arg01, fp
13b18     0C 4E 85 F1 | 	sub	fp, #12
13b1c     78 9F BF FD | 	call	#_converttoint
13b20     FD 16 02 F6 | 	mov	arg03, result1
13b24     20 4E 05 F1 | 	add	fp, #32
13b28     A7 16 62 FC | 	wrlong	arg03, fp
13b2c     F2 12 02 FB | 	rdlong	arg01, objptr
13b30     04 4E 85 F1 | 	sub	fp, #4
13b34     A7 FE 01 FB | 	rdlong	result3, fp
13b38     FF 12 02 F1 | 	add	arg01, result3
13b3c     1C 4E 85 F1 | 	sub	fp, #28
13b40     0A 16 66 F0 | 	shl	arg03, #10
13b44     0B 13 02 F1 | 	add	arg01, arg03
13b48     C8 10 B1 FD | 	call	#_pspeek
13b4c     FD FA E1 F8 | 	getbyte	result1, result1, #0
13b50     A7 FA 61 FC | 	wrlong	result1, fp
13b54     08 4E 05 F1 | 	add	fp, #8
13b58     A7 3A 68 FC | 	wrlong	#29, fp
13b5c     08 4E 85 F1 | 	sub	fp, #8
13b60     A7 12 02 F6 | 	mov	arg01, fp
13b64     E4 9D BF FD | 	call	#_push
13b68                 | LR__1581
13b68     A7 F0 03 F6 | 	mov	ptra, fp
13b6c     B2 00 A0 FD | 	call	#popregs_
13b70                 | _do_getpixel_ret
13b70     2D 00 64 FD | 	ret
13b74                 | 
13b74                 | ' 
13b74                 | ' 
13b74                 | ' sub do_getrealfreq
13b74                 | _do_getrealfreq
13b74     00 4A 05 F6 | 	mov	COUNT_, #0
13b78     A8 00 A0 FD | 	call	#pushregs_
13b7c     14 F0 07 F1 | 	add	ptra, #20
13b80     4A 00 00 FF 
13b84     A0 E4 05 F1 | 	add	objptr, ##38048
13b88     F2 16 02 FB | 	rdlong	arg03, objptr
13b8c     0B 15 02 F6 | 	mov	arg02, arg03
13b90     01 14 66 F0 | 	shl	arg02, #1
13b94     0B 15 02 F1 | 	add	arg02, arg03
13b98     02 14 66 F0 | 	shl	arg02, #2
13b9c     03 00 00 FF 
13ba0     04 E4 85 F1 | 	sub	objptr, ##1540
13ba4     F2 14 02 F1 | 	add	arg02, objptr
13ba8     0A 17 02 FB | 	rdlong	arg03, arg02
13bac     A7 16 62 FC | 	wrlong	arg03, fp
13bb0                 | ' 
13bb0                 | ' numpar=compiledline(lineptr_e).result.uresult
13bb0                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
13bb0     01 16 0E F2 | 	cmp	arg03, #1 wz
13bb4     47 00 00 FF 
13bb8     9C E4 85 F1 | 	sub	objptr, ##36508
13bbc     40 00 90 AD |  if_e	jmp	#LR__1590
13bc0     00 12 06 F6 | 	mov	arg01, #0
13bc4     DC A4 B1 FD | 	call	#__system___getiolock_0625
13bc8     FD 12 02 F6 | 	mov	arg01, result1
13bcc     24 48 B1 FD | 	call	#__system___lockmem
13bd0     C4 01 00 FF 
13bd4     C9 15 06 F6 | 	mov	arg02, ##@LR__6099
13bd8     00 12 06 F6 | 	mov	arg01, #0
13bdc     00 16 06 F6 | 	mov	arg03, #0
13be0     08 55 B1 FD | 	call	#__system___basic_print_string
13be4     00 12 06 F6 | 	mov	arg01, #0
13be8     B8 A4 B1 FD | 	call	#__system___getiolock_0625
13bec     FD 00 68 FC | 	wrlong	#0, result1
13bf0     27 12 06 F6 | 	mov	arg01, #39
13bf4     00 14 06 F6 | 	mov	arg02, #0
13bf8     A0 0D B1 FD | 	call	#_printerror
13bfc     84 00 90 FD | 	jmp	#LR__1591
13c00                 | LR__1590
13c00     B0 9C BF FD | 	call	#_pop
13c04     FD 16 02 F6 | 	mov	arg03, result1
13c08     04 4E 05 F1 | 	add	fp, #4
13c0c     A7 16 62 FC | 	wrlong	arg03, fp
13c10     04 4E 05 F1 | 	add	fp, #4
13c14     A7 FC 61 FC | 	wrlong	result2, fp
13c18     04 4E 05 F1 | 	add	fp, #4
13c1c     A7 FE 61 FC | 	wrlong	result3, fp
13c20     08 4E 85 F1 | 	sub	fp, #8
13c24     A7 12 02 F6 | 	mov	arg01, fp
13c28     04 4E 85 F1 | 	sub	fp, #4
13c2c     68 9E BF FD | 	call	#_converttoint
13c30     FD 14 02 F6 | 	mov	arg02, result1
13c34     03 14 66 F0 | 	shl	arg02, #3
13c38     FD 14 82 F1 | 	sub	arg02, result1
13c3c     02 14 66 F0 | 	shl	arg02, #2
13c40     14 00 00 FF 
13c44     38 E5 05 F1 | 	add	objptr, ##10552
13c48     F2 14 02 F1 | 	add	arg02, objptr
13c4c     18 14 06 F1 | 	add	arg02, #24
13c50     0A 17 02 FB | 	rdlong	arg03, arg02
13c54     10 4E 05 F1 | 	add	fp, #16
13c58     A7 16 62 FC | 	wrlong	arg03, fp
13c5c     0C 4E 85 F1 | 	sub	fp, #12
13c60     A7 16 62 FC | 	wrlong	arg03, fp
13c64     08 4E 05 F1 | 	add	fp, #8
13c68     A7 3C 68 FC | 	wrlong	#30, fp
13c6c     08 4E 85 F1 | 	sub	fp, #8
13c70     A7 12 02 F6 | 	mov	arg01, fp
13c74     04 4E 85 F1 | 	sub	fp, #4
13c78     14 00 00 FF 
13c7c     38 E5 85 F1 | 	sub	objptr, ##10552
13c80     C8 9C BF FD | 	call	#_push
13c84                 | LR__1591
13c84     A7 F0 03 F6 | 	mov	ptra, fp
13c88     B2 00 A0 FD | 	call	#popregs_
13c8c                 | _do_getrealfreq_ret
13c8c     2D 00 64 FD | 	ret
13c90                 | 
13c90                 | ' 
13c90                 | ' 
13c90                 | ' '-------------------- gettime
13c90                 | ' 
13c90                 | ' sub do_gettime
13c90                 | _do_gettime
13c90     02 4A 05 F6 | 	mov	COUNT_, #2
13c94     A8 00 A0 FD | 	call	#pushregs_
13c98     14 F0 07 F1 | 	add	ptra, #20
13c9c                 | ' 
13c9c                 | ' const asm 
13c9c     1A 26 72 FD | 	getct	local01 wc
13ca0     1A 28 62 FD | 	getct	local02
13ca4                 | ' return hi1, lo1
13ca4     14 FD 01 F6 | 	mov	result2, local02
13ca8     A7 26 62 FC | 	wrlong	local01, fp
13cac     04 4E 05 F1 | 	add	fp, #4
13cb0     A7 FC 61 FC | 	wrlong	result2, fp
13cb4     0C 4E 05 F1 | 	add	fp, #12
13cb8     A7 3A 68 FC | 	wrlong	#29, fp
13cbc     0C 4E 85 F1 | 	sub	fp, #12
13cc0     A7 12 02 FB | 	rdlong	arg01, fp
13cc4     04 4E 05 F1 | 	add	fp, #4
13cc8     A7 12 62 FC | 	wrlong	arg01, fp
13ccc     08 4E 85 F1 | 	sub	fp, #8
13cd0     A7 12 02 FB | 	rdlong	arg01, fp
13cd4     0C 4E 05 F1 | 	add	fp, #12
13cd8     A7 12 62 FC | 	wrlong	arg01, fp
13cdc     04 4E 85 F1 | 	sub	fp, #4
13ce0     A7 12 02 F6 | 	mov	arg01, fp
13ce4     08 4E 85 F1 | 	sub	fp, #8
13ce8     60 9C BF FD | 	call	#_push
13cec     A7 F0 03 F6 | 	mov	ptra, fp
13cf0     B2 00 A0 FD | 	call	#popregs_
13cf4                 | _do_gettime_ret
13cf4     2D 00 64 FD | 	ret
13cf8                 | 
13cf8                 | ' 
13cf8                 | ' '-------------------- gosub
13cf8                 | ' 
13cf8                 | ' sub do_gosub()
13cf8                 | _do_gosub
13cf8     50 00 00 FF 
13cfc     54 E5 05 F1 | 	add	objptr, ##41300
13d00     F2 00 02 FB | 	rdlong	_var01, objptr
13d04     01 00 06 F1 | 	add	_var01, #1
13d08     F2 00 62 FC | 	wrlong	_var01, objptr
13d0c                 | ' gosubtop+=1
13d0c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13d0c     06 00 00 FF 
13d10     B4 E4 85 F1 | 	sub	objptr, ##3252
13d14     F2 00 02 FB | 	rdlong	_var01, objptr
13d18     01 00 06 F1 | 	add	_var01, #1
13d1c     00 03 02 F6 | 	mov	_var02, _var01
13d20     01 02 66 F0 | 	shl	_var02, #1
13d24     00 03 02 F1 | 	add	_var02, _var01
13d28     02 02 66 F0 | 	shl	_var02, #2
13d2c     03 00 00 FF 
13d30     04 E4 85 F1 | 	sub	objptr, ##1540
13d34     F2 02 02 F1 | 	add	_var02, objptr
13d38     08 02 06 F1 | 	add	_var02, #8
13d3c     01 03 02 FB | 	rdlong	_var02, _var02
13d40     FE 03 0E F2 | 	cmp	_var02, #510 wz
13d44     47 00 00 FF 
13d48     9C E4 85 F1 | 	sub	objptr, ##36508
13d4c     58 00 90 5D |  if_ne	jmp	#LR__1600
13d50     50 00 00 FF 
13d54     54 E5 05 F1 | 	add	objptr, ##41300
13d58     F2 02 02 FB | 	rdlong	_var02, objptr
13d5c     03 02 66 F0 | 	shl	_var02, #3
13d60     03 00 00 FF 
13d64     88 E5 85 F1 | 	sub	objptr, ##1928
13d68     F2 02 02 F1 | 	add	_var02, objptr
13d6c     03 00 00 FF 
13d70     0C E5 05 F1 | 	add	objptr, ##1804
13d74     F2 00 02 FB | 	rdlong	_var01, objptr
13d78     01 01 62 FC | 	wrlong	_var01, _var02
13d7c     7C E4 05 F1 | 	add	objptr, #124
13d80     F2 02 02 FB | 	rdlong	_var02, objptr
13d84     03 02 66 F0 | 	shl	_var02, #3
13d88     03 00 00 FF 
13d8c     88 E5 85 F1 | 	sub	objptr, ##1928
13d90     F2 02 02 F1 | 	add	_var02, objptr
13d94     04 02 06 F1 | 	add	_var02, #4
13d98     01 01 68 FC | 	wrlong	#0, _var02
13d9c     4C 00 00 FF 
13da0     CC E5 85 F1 | 	sub	objptr, ##39372
13da4     64 00 90 FD | 	jmp	#LR__1601
13da8                 | LR__1600
13da8     50 00 00 FF 
13dac     54 E5 05 F1 | 	add	objptr, ##41300
13db0     F2 02 02 FB | 	rdlong	_var02, objptr
13db4     03 02 66 F0 | 	shl	_var02, #3
13db8     03 00 00 FF 
13dbc     88 E5 85 F1 | 	sub	objptr, ##1928
13dc0     F2 02 02 F1 | 	add	_var02, objptr
13dc4     03 00 00 FF 
13dc8     14 E5 05 F1 | 	add	objptr, ##1812
13dcc     F2 00 02 FB | 	rdlong	_var01, objptr
13dd0     01 01 62 FC | 	wrlong	_var01, _var02
13dd4     74 E4 05 F1 | 	add	objptr, #116
13dd8     F2 02 02 FB | 	rdlong	_var02, objptr
13ddc     03 02 66 F0 | 	shl	_var02, #3
13de0     03 00 00 FF 
13de4     88 E5 85 F1 | 	sub	objptr, ##1928
13de8     F2 02 02 F1 | 	add	_var02, objptr
13dec     02 00 00 FF 
13df0     2C E5 85 F1 | 	sub	objptr, ##1324
13df4     F2 00 02 FB | 	rdlong	_var01, objptr
13df8     4A 00 00 FF 
13dfc     A0 E4 85 F1 | 	sub	objptr, ##38048
13e00     02 00 06 F1 | 	add	_var01, #2
13e04     04 02 06 F1 | 	add	_var02, #4
13e08     01 01 62 FC | 	wrlong	_var01, _var02
13e0c                 | LR__1601
13e0c                 | _do_gosub_ret
13e0c     2D 00 64 FD | 	ret
13e10                 | 
13e10                 | ' 
13e10                 | ' '--------------------- goto
13e10                 | ' 
13e10                 | ' '------- fast goto
13e10                 | ' 
13e10                 | ' sub do_fast_goto
13e10                 | _do_fast_goto
13e10     02 4A 05 F6 | 	mov	COUNT_, #2
13e14     A8 00 A0 FD | 	call	#pushregs_
13e18                 | _do_fast_goto_enter
13e18     4A 00 00 FF 
13e1c     A0 E4 05 F1 | 	add	objptr, ##38048
13e20     F2 12 02 FB | 	rdlong	arg01, objptr
13e24     09 27 02 F6 | 	mov	local01, arg01
13e28     01 26 66 F0 | 	shl	local01, #1
13e2c     09 27 02 F1 | 	add	local01, arg01
13e30     02 26 66 F0 | 	shl	local01, #2
13e34     03 00 00 FF 
13e38     04 E4 85 F1 | 	sub	objptr, ##1540
13e3c     F2 26 02 F1 | 	add	local01, objptr
13e40     13 29 02 FB | 	rdlong	local02, local01
13e44     14 13 02 F6 | 	mov	arg01, local02
13e48     47 00 00 FF 
13e4c     9C E4 85 F1 | 	sub	objptr, ##36508
13e50     18 0E B1 FD | 	call	#_pslpeek
13e54     FD 12 02 F6 | 	mov	arg01, result1
13e58                 | ' 
13e58                 | ' testptr=compiledline(lineptr_e).result.uresult
13e58                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13e58                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13e58     4A 00 00 FF 
13e5c     A0 E4 05 F1 | 	add	objptr, ##38048
13e60     F2 FA 01 FB | 	rdlong	result1, objptr
13e64     FD 26 02 F6 | 	mov	local01, result1
13e68     01 26 66 F0 | 	shl	local01, #1
13e6c     FD 26 02 F1 | 	add	local01, result1
13e70     02 26 66 F0 | 	shl	local01, #2
13e74     03 00 00 FF 
13e78     04 E4 85 F1 | 	sub	objptr, ##1540
13e7c     F2 26 02 F1 | 	add	local01, objptr
13e80     04 26 06 F1 | 	add	local01, #4
13e84     13 27 02 FB | 	rdlong	local01, local01
13e88     13 13 0A F2 | 	cmp	arg01, local01 wz
13e8c     47 00 00 FF 
13e90     9C E4 85 F1 | 	sub	objptr, ##36508
13e94     58 00 90 5D |  if_ne	jmp	#LR__1610
13e98     50 00 00 FF 
13e9c     D8 E4 05 F1 | 	add	objptr, ##41176
13ea0     F2 28 62 FC | 	wrlong	local02, objptr
13ea4     06 00 00 FF 
13ea8     3C E4 85 F1 | 	sub	objptr, ##3132
13eac     F2 28 02 FB | 	rdlong	local02, objptr
13eb0     01 28 86 F1 | 	sub	local02, #1
13eb4     04 E4 05 F1 | 	add	objptr, #4
13eb8     F2 28 62 FC | 	wrlong	local02, objptr
13ebc                 | '   runptr=testptr
13ebc                 | '   lineptr_e=lineptr-1
13ebc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13ebc     06 00 00 FF 
13ec0     84 E4 05 F1 | 	add	objptr, ##3204
13ec4     F2 28 02 FB | 	rdlong	local02, objptr
13ec8     50 00 00 FF 
13ecc     24 E5 85 F1 | 	sub	objptr, ##41252
13ed0     FF FF 3F FF 
13ed4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13ed8     50 00 00 AF 
13edc     24 E5 05 A1 |  if_e	add	objptr, ##41252
13ee0     F2 00 68 AC |  if_e	wrlong	#0, objptr
13ee4     50 00 00 AF 
13ee8     24 E5 85 A1 |  if_e	sub	objptr, ##41252
13eec     04 00 90 FD | 	jmp	#LR__1611
13ef0                 | LR__1610
13ef0     0C 00 B0 FD | 	call	#_do_find_goto
13ef4                 | LR__1611
13ef4     A7 F0 03 F6 | 	mov	ptra, fp
13ef8     B2 00 A0 FD | 	call	#popregs_
13efc                 | _do_fast_goto_ret
13efc     2D 00 64 FD | 	ret
13f00                 | 
13f00                 | ' 
13f00                 | ' '------- find goto  
13f00                 | ' 
13f00                 | ' sub do_find_goto
13f00                 | _do_find_goto
13f00     03 4A 05 F6 | 	mov	COUNT_, #3
13f04     A8 00 A0 FD | 	call	#pushregs_
13f08     24 F0 07 F1 | 	add	ptra, #36
13f0c                 | _do_find_goto_enter
13f0c     4A 00 00 FF 
13f10     A0 E4 05 F1 | 	add	objptr, ##38048
13f14     F2 26 02 FB | 	rdlong	local01, objptr
13f18     13 29 02 F6 | 	mov	local02, local01
13f1c     01 28 66 F0 | 	shl	local02, #1
13f20     13 29 02 F1 | 	add	local02, local01
13f24     02 28 66 F0 | 	shl	local02, #2
13f28     03 00 00 FF 
13f2c     04 E4 85 F1 | 	sub	objptr, ##1540
13f30     F2 28 02 F1 | 	add	local02, objptr
13f34     04 28 06 F1 | 	add	local02, #4
13f38     14 29 02 FB | 	rdlong	local02, local02
13f3c     A7 28 62 FC | 	wrlong	local02, fp
13f40     03 00 00 FF 
13f44     0C E4 05 F1 | 	add	objptr, ##1548
13f48     F2 2A 02 FB | 	rdlong	local03, objptr
13f4c     4A 00 00 FF 
13f50     A8 E4 85 F1 | 	sub	objptr, ##38056
13f54     04 4E 05 F1 | 	add	fp, #4
13f58     A7 2A 62 FC | 	wrlong	local03, fp
13f5c     04 4E 85 F1 | 	sub	fp, #4
13f60                 | ' 
13f60                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13f60                 | ' gotoptr=programstart
13f60                 | ' do
13f60                 | LR__1620
13f60     0C 4E 05 F1 | 	add	fp, #12
13f64     A7 12 02 F6 | 	mov	arg01, fp
13f68     08 4E 85 F1 | 	sub	fp, #8
13f6c     A7 14 02 FB | 	rdlong	arg02, fp
13f70     04 4E 85 F1 | 	sub	fp, #4
13f74     18 16 06 F6 | 	mov	arg03, #24
13f78     0B 00 00 FF 
13f7c     CC E4 05 F1 | 	add	objptr, ##5836
13f80     CC 37 B1 FD | 	call	#_psram_spin2_read1
13f84     0B 00 00 FF 
13f88     CC E4 85 F1 | 	sub	objptr, ##5836
13f8c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13f8c                 | '   if gotoheader(0)<>$FFFFFFFF then
13f8c     0C 4E 05 F1 | 	add	fp, #12
13f90     A7 2A 02 FB | 	rdlong	local03, fp
13f94     0C 4E 85 F1 | 	sub	fp, #12
13f98     FF FF 7F FF 
13f9c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13fa0     24 00 90 AD |  if_e	jmp	#LR__1621
13fa4     04 4E 05 F1 | 	add	fp, #4
13fa8     A7 2A 02 FB | 	rdlong	local03, fp
13fac     04 4E 05 F1 | 	add	fp, #4
13fb0     A7 2A 62 FC | 	wrlong	local03, fp
13fb4     18 4E 05 F1 | 	add	fp, #24
13fb8     A7 2A 02 FB | 	rdlong	local03, fp
13fbc     1C 4E 85 F1 | 	sub	fp, #28
13fc0     A7 2A 62 FC | 	wrlong	local03, fp
13fc4     04 4E 85 F1 | 	sub	fp, #4
13fc8                 | LR__1621
13fc8     20 4E 05 F1 | 	add	fp, #32
13fcc     A7 2A 02 FB | 	rdlong	local03, fp
13fd0     20 4E 85 F1 | 	sub	fp, #32
13fd4     FF FF 3F FF 
13fd8     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13fdc     0C 4E 05 51 |  if_ne	add	fp, #12
13fe0     A7 26 02 5B |  if_ne	rdlong	local01, fp
13fe4     0C 4E 85 51 |  if_ne	sub	fp, #12
13fe8     FF FF 7F 5F 
13fec     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13ff0     18 00 90 AD |  if_e	jmp	#LR__1622
13ff4     0C 4E 05 F1 | 	add	fp, #12
13ff8     A7 2A 02 FB | 	rdlong	local03, fp
13ffc     0C 4E 85 F1 | 	sub	fp, #12
14000     A7 28 02 FB | 	rdlong	local02, fp
14004     14 2B 0A F2 | 	cmp	local03, local02 wz
14008     54 FF 9F 5D |  if_ne	jmp	#LR__1620
1400c                 | LR__1622
1400c                 | ' 
1400c                 | ' if gotoheader(0)=gotoline then
1400c     0C 4E 05 F1 | 	add	fp, #12
14010     A7 2A 02 FB | 	rdlong	local03, fp
14014     0C 4E 85 F1 | 	sub	fp, #12
14018     A7 26 02 FB | 	rdlong	local01, fp
1401c     13 2B 0A F2 | 	cmp	local03, local01 wz
14020     D8 00 90 5D |  if_ne	jmp	#LR__1623
14024     4A 00 00 FF 
14028     A0 E4 05 F1 | 	add	objptr, ##38048
1402c     F2 26 02 FB | 	rdlong	local01, objptr
14030     13 29 02 F6 | 	mov	local02, local01
14034     01 28 66 F0 | 	shl	local02, #1
14038     13 29 02 F1 | 	add	local02, local01
1403c     02 28 66 F0 | 	shl	local02, #2
14040     03 00 00 FF 
14044     04 E4 85 F1 | 	sub	objptr, ##1540
14048     F2 28 02 F1 | 	add	local02, objptr
1404c     08 4E 05 F1 | 	add	fp, #8
14050     A7 2A 02 FB | 	rdlong	local03, fp
14054     14 2B 62 FC | 	wrlong	local03, local02
14058     03 00 00 FF 
1405c     04 E4 05 F1 | 	add	objptr, ##1540
14060     F2 26 02 FB | 	rdlong	local01, objptr
14064     13 29 02 F6 | 	mov	local02, local01
14068     01 28 66 F0 | 	shl	local02, #1
1406c     13 29 02 F1 | 	add	local02, local01
14070     02 28 66 F0 | 	shl	local02, #2
14074     03 00 00 FF 
14078     04 E4 85 F1 | 	sub	objptr, ##1540
1407c     F2 28 02 F1 | 	add	local02, objptr
14080     08 28 06 F1 | 	add	local02, #8
14084     14 9D 68 FC | 	wrlong	#78, local02
14088     03 00 00 FF 
1408c     04 E4 05 F1 | 	add	objptr, ##1540
14090     F2 28 02 FB | 	rdlong	local02, objptr
14094     14 13 02 F6 | 	mov	arg01, local02
14098     01 12 66 F0 | 	shl	arg01, #1
1409c     14 13 02 F1 | 	add	arg01, local02
140a0     02 12 66 F0 | 	shl	arg01, #2
140a4     03 00 00 FF 
140a8     04 E4 85 F1 | 	sub	objptr, ##1540
140ac     F2 12 02 F1 | 	add	arg01, objptr
140b0     09 00 00 FF 
140b4     44 E4 05 F1 | 	add	objptr, ##4676
140b8     F2 14 02 FB | 	rdlong	arg02, objptr
140bc     02 2A 06 F6 | 	mov	local03, #2
140c0     14 2B 02 F1 | 	add	local03, local02
140c4     0B 00 00 FF 
140c8     5C E4 85 F1 | 	sub	objptr, ##5724
140cc     F2 16 02 FB | 	rdlong	arg03, objptr
140d0     0B 2B 02 FD | 	qmul	local03, arg03
140d4     08 4E 85 F1 | 	sub	fp, #8
140d8     39 00 00 FF 
140dc     B8 E5 85 F1 | 	sub	objptr, ##29624
140e0     18 2A 62 FD | 	getqx	local03
140e4     15 15 02 F1 | 	add	arg02, local03
140e8     00 37 B1 FD | 	call	#_psram_spin2_write
140ec     0B 00 00 FF 
140f0     CC E4 85 F1 | 	sub	objptr, ##5836
140f4     18 FD BF FD | 	call	#_do_fast_goto
140f8     0C 00 90 FD | 	jmp	#LR__1624
140fc                 | LR__1623
140fc     26 12 06 F6 | 	mov	arg01, #38
14100     00 14 06 F6 | 	mov	arg02, #0
14104     94 08 B1 FD | 	call	#_printerror
14108                 | LR__1624
14108     A7 F0 03 F6 | 	mov	ptra, fp
1410c     B2 00 A0 FD | 	call	#popregs_
14110                 | _do_find_goto_ret
14110     2D 00 64 FD | 	ret
14114                 | 
14114                 | ' 
14114                 | ' '------- slow goto  
14114                 | ' 
14114                 | ' sub do_slow_goto
14114                 | _do_slow_goto
14114     02 4A 05 F6 | 	mov	COUNT_, #2
14118     A8 00 A0 FD | 	call	#pushregs_
1411c     30 F0 07 F1 | 	add	ptra, #48
14120     90 97 BF FD | 	call	#_pop
14124     FF 26 02 F6 | 	mov	local01, result3
14128     24 4E 05 F1 | 	add	fp, #36
1412c     A7 FA 61 FC | 	wrlong	result1, fp
14130     04 4E 05 F1 | 	add	fp, #4
14134     A7 FC 61 FC | 	wrlong	result2, fp
14138     04 4E 05 F1 | 	add	fp, #4
1413c     A7 26 62 FC | 	wrlong	local01, fp
14140     08 4E 85 F1 | 	sub	fp, #8
14144     A7 12 02 F6 | 	mov	arg01, fp
14148     24 4E 85 F1 | 	sub	fp, #36
1414c     48 99 BF FD | 	call	#_converttoint
14150     A7 FA 61 FC | 	wrlong	result1, fp
14154     4A 00 00 FF 
14158     A8 E4 05 F1 | 	add	objptr, ##38056
1415c     F2 28 02 FB | 	rdlong	local02, objptr
14160     4A 00 00 FF 
14164     A8 E4 85 F1 | 	sub	objptr, ##38056
14168     04 4E 05 F1 | 	add	fp, #4
1416c     A7 28 62 FC | 	wrlong	local02, fp
14170     04 4E 85 F1 | 	sub	fp, #4
14174                 | ' 
14174                 | ' t1=pop() : gotoline=converttoint(t1)
14174                 | ' gotoptr=programstart
14174                 | ' do
14174                 | LR__1630
14174     0C 4E 05 F1 | 	add	fp, #12
14178     A7 12 02 F6 | 	mov	arg01, fp
1417c     08 4E 85 F1 | 	sub	fp, #8
14180     A7 14 02 FB | 	rdlong	arg02, fp
14184     04 4E 85 F1 | 	sub	fp, #4
14188     18 16 06 F6 | 	mov	arg03, #24
1418c     0B 00 00 FF 
14190     CC E4 05 F1 | 	add	objptr, ##5836
14194     B8 35 B1 FD | 	call	#_psram_spin2_read1
14198     0B 00 00 FF 
1419c     CC E4 85 F1 | 	sub	objptr, ##5836
141a0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
141a0                 | '   if gotoheader(0)<>$FFFFFFFF then
141a0     0C 4E 05 F1 | 	add	fp, #12
141a4     A7 28 02 FB | 	rdlong	local02, fp
141a8     0C 4E 85 F1 | 	sub	fp, #12
141ac     FF FF 7F FF 
141b0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
141b4     24 00 90 AD |  if_e	jmp	#LR__1631
141b8     04 4E 05 F1 | 	add	fp, #4
141bc     A7 28 02 FB | 	rdlong	local02, fp
141c0     04 4E 05 F1 | 	add	fp, #4
141c4     A7 28 62 FC | 	wrlong	local02, fp
141c8     18 4E 05 F1 | 	add	fp, #24
141cc     A7 28 02 FB | 	rdlong	local02, fp
141d0     1C 4E 85 F1 | 	sub	fp, #28
141d4     A7 28 62 FC | 	wrlong	local02, fp
141d8     04 4E 85 F1 | 	sub	fp, #4
141dc                 | LR__1631
141dc     20 4E 05 F1 | 	add	fp, #32
141e0     A7 28 02 FB | 	rdlong	local02, fp
141e4     20 4E 85 F1 | 	sub	fp, #32
141e8     FF FF 3F FF 
141ec     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
141f0     0C 4E 05 51 |  if_ne	add	fp, #12
141f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
141f8     0C 4E 85 51 |  if_ne	sub	fp, #12
141fc     FF FF 7F 5F 
14200     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14204     18 00 90 AD |  if_e	jmp	#LR__1632
14208     0C 4E 05 F1 | 	add	fp, #12
1420c     A7 28 02 FB | 	rdlong	local02, fp
14210     0C 4E 85 F1 | 	sub	fp, #12
14214     A7 16 02 FB | 	rdlong	arg03, fp
14218     0B 29 0A F2 | 	cmp	local02, arg03 wz
1421c     54 FF 9F 5D |  if_ne	jmp	#LR__1630
14220                 | LR__1632
14220                 | ' if gotoheader(0)=gotoline then  
14220     0C 4E 05 F1 | 	add	fp, #12
14224     A7 28 02 FB | 	rdlong	local02, fp
14228     0C 4E 85 F1 | 	sub	fp, #12
1422c     A7 26 02 FB | 	rdlong	local01, fp
14230     13 29 0A F2 | 	cmp	local02, local01 wz
14234     60 00 90 5D |  if_ne	jmp	#LR__1633
14238     08 4E 05 F1 | 	add	fp, #8
1423c     A7 28 02 FB | 	rdlong	local02, fp
14240     08 4E 85 F1 | 	sub	fp, #8
14244     50 00 00 FF 
14248     D8 E4 05 F1 | 	add	objptr, ##41176
1424c     F2 28 62 FC | 	wrlong	local02, objptr
14250     06 00 00 FF 
14254     3C E4 85 F1 | 	sub	objptr, ##3132
14258     F2 28 02 FB | 	rdlong	local02, objptr
1425c     01 28 86 F1 | 	sub	local02, #1
14260     04 E4 05 F1 | 	add	objptr, #4
14264     F2 28 62 FC | 	wrlong	local02, objptr
14268                 | '    runptr=oldgotoptr
14268                 | '    lineptr_e=lineptr-1
14268                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
14268     06 00 00 FF 
1426c     84 E4 05 F1 | 	add	objptr, ##3204
14270     F2 28 02 FB | 	rdlong	local02, objptr
14274     50 00 00 FF 
14278     24 E5 85 F1 | 	sub	objptr, ##41252
1427c     FF FF 3F FF 
14280     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14284     50 00 00 AF 
14288     24 E5 05 A1 |  if_e	add	objptr, ##41252
1428c     F2 00 68 AC |  if_e	wrlong	#0, objptr
14290     50 00 00 AF 
14294     24 E5 85 A1 |  if_e	sub	objptr, ##41252
14298                 | LR__1633
14298     A7 F0 03 F6 | 	mov	ptra, fp
1429c     B2 00 A0 FD | 	call	#popregs_
142a0                 | _do_slow_goto_ret
142a0     2D 00 64 FD | 	ret
142a4                 | 
142a4                 | ' 
142a4                 | ' ' ----------------  hex$
142a4                 | ' 
142a4                 | ' sub do_hex
142a4                 | _do_hex
142a4     01 4A 05 F6 | 	mov	COUNT_, #1
142a8     A8 00 A0 FD | 	call	#pushregs_
142ac     18 F0 07 F1 | 	add	ptra, #24
142b0     4A 00 00 FF 
142b4     A0 E4 05 F1 | 	add	objptr, ##38048
142b8     F2 26 02 FB | 	rdlong	local01, objptr
142bc     13 17 02 F6 | 	mov	arg03, local01
142c0     01 16 66 F0 | 	shl	arg03, #1
142c4     13 17 02 F1 | 	add	arg03, local01
142c8     02 16 66 F0 | 	shl	arg03, #2
142cc     03 00 00 FF 
142d0     04 E4 85 F1 | 	sub	objptr, ##1540
142d4     F2 16 02 F1 | 	add	arg03, objptr
142d8     0B 17 02 FB | 	rdlong	arg03, arg03
142dc     0C 4E 05 F1 | 	add	fp, #12
142e0     A7 16 62 FC | 	wrlong	arg03, fp
142e4                 | ' 
142e4                 | ' numpar=compiledline(lineptr_e).result.uresult
142e4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
142e4     0C 4E 85 F1 | 	sub	fp, #12
142e8     03 16 16 F2 | 	cmp	arg03, #3 wc
142ec     47 00 00 FF 
142f0     9C E4 85 F1 | 	sub	objptr, ##36508
142f4     0C 4E 05 C1 |  if_b	add	fp, #12
142f8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
142fc     0C 4E 85 C1 |  if_b	sub	fp, #12
14300     40 00 90 4D |  if_c_and_nz	jmp	#LR__1640
14304     00 12 06 F6 | 	mov	arg01, #0
14308     98 9D B1 FD | 	call	#__system___getiolock_0625
1430c     FD 12 02 F6 | 	mov	arg01, result1
14310     E0 40 B1 FD | 	call	#__system___lockmem
14314     C4 01 00 FF 
14318     D7 15 06 F6 | 	mov	arg02, ##@LR__6100
1431c     00 12 06 F6 | 	mov	arg01, #0
14320     00 16 06 F6 | 	mov	arg03, #0
14324     C4 4D B1 FD | 	call	#__system___basic_print_string
14328     00 12 06 F6 | 	mov	arg01, #0
1432c     74 9D B1 FD | 	call	#__system___getiolock_0625
14330     FD 00 68 FC | 	wrlong	#0, result1
14334     27 12 06 F6 | 	mov	arg01, #39
14338     00 14 06 F6 | 	mov	arg02, #0
1433c     5C 06 B1 FD | 	call	#_printerror
14340     B8 00 90 FD | 	jmp	#LR__1643
14344                 | LR__1640
14344                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14344     0C 4E 05 F1 | 	add	fp, #12
14348     A7 26 02 FB | 	rdlong	local01, fp
1434c     0C 4E 85 F1 | 	sub	fp, #12
14350     02 26 0E F2 | 	cmp	local01, #2 wz
14354     38 00 90 5D |  if_ne	jmp	#LR__1641
14358     58 95 BF FD | 	call	#_pop
1435c     FF 26 02 F6 | 	mov	local01, result3
14360     A7 FA 61 FC | 	wrlong	result1, fp
14364     04 4E 05 F1 | 	add	fp, #4
14368     A7 FC 61 FC | 	wrlong	result2, fp
1436c     04 4E 05 F1 | 	add	fp, #4
14370     A7 26 62 FC | 	wrlong	local01, fp
14374     08 4E 85 F1 | 	sub	fp, #8
14378     A7 12 02 F6 | 	mov	arg01, fp
1437c     18 97 BF FD | 	call	#_converttoint
14380     14 4E 05 F1 | 	add	fp, #20
14384     A7 FA 61 FC | 	wrlong	result1, fp
14388     14 4E 85 F1 | 	sub	fp, #20
1438c     0C 00 90 FD | 	jmp	#LR__1642
14390                 | LR__1641
14390     14 4E 05 F1 | 	add	fp, #20
14394     A7 10 68 FC | 	wrlong	#8, fp
14398     14 4E 85 F1 | 	sub	fp, #20
1439c                 | LR__1642
1439c     14 95 BF FD | 	call	#_pop
143a0     FF 26 02 F6 | 	mov	local01, result3
143a4     A7 FA 61 FC | 	wrlong	result1, fp
143a8     04 4E 05 F1 | 	add	fp, #4
143ac     A7 FC 61 FC | 	wrlong	result2, fp
143b0     04 4E 05 F1 | 	add	fp, #4
143b4     A7 26 62 FC | 	wrlong	local01, fp
143b8     08 4E 85 F1 | 	sub	fp, #8
143bc     A7 12 02 F6 | 	mov	arg01, fp
143c0     D4 96 BF FD | 	call	#_converttoint
143c4     10 4E 05 F1 | 	add	fp, #16
143c8     A7 FA 61 FC | 	wrlong	result1, fp
143cc     FD 12 02 F6 | 	mov	arg01, result1
143d0     04 4E 05 F1 | 	add	fp, #4
143d4     A7 14 02 FB | 	rdlong	arg02, fp
143d8     14 4E 85 F1 | 	sub	fp, #20
143dc     10 16 06 F6 | 	mov	arg03, #16
143e0     E4 62 B1 FD | 	call	#__system__Number_S
143e4     A7 FA 61 FC | 	wrlong	result1, fp
143e8     08 4E 05 F1 | 	add	fp, #8
143ec     A7 3E 68 FC | 	wrlong	#31, fp
143f0     08 4E 85 F1 | 	sub	fp, #8
143f4     A7 12 02 F6 | 	mov	arg01, fp
143f8     50 95 BF FD | 	call	#_push
143fc                 | LR__1643
143fc     A7 F0 03 F6 | 	mov	ptra, fp
14400     B2 00 A0 FD | 	call	#popregs_
14404                 | _do_hex_ret
14404     2D 00 64 FD | 	ret
14408                 | 
14408                 | ' 
14408                 | ' ' ----------------  if
14408                 | ' 
14408                 | ' sub do_if
14408                 | _do_if
14408     05 4A 05 F6 | 	mov	COUNT_, #5
1440c     A8 00 A0 FD | 	call	#pushregs_
14410     A0 94 BF FD | 	call	#_pop
14414     FD 26 0A F6 | 	mov	local01, result1 wz
14418     FE 28 02 F6 | 	mov	local02, result2
1441c     FF 2A 02 F6 | 	mov	local03, result3
14420                 | ' t1=pop()
14420                 | ' ' if uresult=0, jump over else
14420                 | ' if t1.result.uresult = 0 then 
14420     BC 00 90 5D |  if_ne	jmp	#LR__1652
14424                 | '   for i=lineptr_e to lineptr-1
14424     4A 00 00 FF 
14428     A0 E4 05 F1 | 	add	objptr, ##38048
1442c     F2 2C 02 FB | 	rdlong	local04, objptr
14430     04 E4 85 F1 | 	sub	objptr, #4
14434     F2 2E 02 FB | 	rdlong	local05, objptr
14438     4A 00 00 FF 
1443c     9C E4 85 F1 | 	sub	objptr, ##38044
14440                 | LR__1650
14440     17 2D 52 F2 | 	cmps	local04, local05 wc
14444     78 00 90 3D |  if_ae	jmp	#LR__1651
14448     16 FF 01 F6 | 	mov	result3, local04
1444c     01 FE 65 F0 | 	shl	result3, #1
14450     16 FF 01 F1 | 	add	result3, local04
14454     02 FE 65 F0 | 	shl	result3, #2
14458     47 00 00 FF 
1445c     9C E4 05 F1 | 	add	objptr, ##36508
14460     F2 FE 01 F1 | 	add	result3, objptr
14464     FF 26 02 FB | 	rdlong	local01, result3
14468     04 FE 05 F1 | 	add	result3, #4
1446c     FF FC 01 FB | 	rdlong	result2, result3
14470     16 FF 01 F6 | 	mov	result3, local04
14474     01 FE 65 F0 | 	shl	result3, #1
14478     16 FF 01 F1 | 	add	result3, local04
1447c     02 FE 65 F0 | 	shl	result3, #2
14480     F2 FE 01 F1 | 	add	result3, objptr
14484     08 FE 05 F1 | 	add	result3, #8
14488     FF FE 01 FB | 	rdlong	result3, result3
1448c     FE 28 02 F6 | 	mov	local02, result2
14490     FF 2A 02 F6 | 	mov	local03, result3
14494                 | '     t1=compiledline(i)
14494                 | '     if t1.result_type=token_else then lineptr_e=i : return
14494     5A 2A 0E F2 | 	cmp	local03, #90 wz
14498     47 00 00 FF 
1449c     9C E4 85 F1 | 	sub	objptr, ##36508
144a0     4A 00 00 AF 
144a4     A0 E4 05 A1 |  if_e	add	objptr, ##38048
144a8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
144ac     4A 00 00 AF 
144b0     A0 E4 85 A1 |  if_e	sub	objptr, ##38048
144b4     28 00 90 AD |  if_e	jmp	#LR__1653
144b8     01 2C 06 F1 | 	add	local04, #1
144bc     80 FF 9F FD | 	jmp	#LR__1650
144c0                 | LR__1651
144c0     4A 00 00 FF 
144c4     9C E4 05 F1 | 	add	objptr, ##38044
144c8     F2 2E 02 FB | 	rdlong	local05, objptr
144cc     01 2E 86 F1 | 	sub	local05, #1
144d0     04 E4 05 F1 | 	add	objptr, #4
144d4     F2 2E 62 FC | 	wrlong	local05, objptr
144d8     4A 00 00 FF 
144dc     A0 E4 85 F1 | 	sub	objptr, ##38048
144e0                 | LR__1652
144e0                 | LR__1653
144e0     A7 F0 03 F6 | 	mov	ptra, fp
144e4     B2 00 A0 FD | 	call	#popregs_
144e8                 | _do_if_ret
144e8     2D 00 64 FD | 	ret
144ec                 | 
144ec                 | ' 
144ec                 | ' ' ----------------  inkey$
144ec                 | ' 
144ec                 | ' sub do_inkey
144ec                 | _do_inkey
144ec     02 4A 05 F6 | 	mov	COUNT_, #2
144f0     A8 00 A0 FD | 	call	#pushregs_
144f4     0C F0 07 F1 | 	add	ptra, #12
144f8     80 36 B1 FD | 	call	#_usbnew_spin2_get_key
144fc     45 00 00 FF 
14500     94 E4 05 F1 | 	add	objptr, ##35476
14504     F2 FA 61 FC | 	wrlong	result1, objptr
14508                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
14508     45 00 00 FF 
1450c     94 E4 85 F1 | 	sub	objptr, ##35476
14510     00 FA 0D F2 | 	cmp	result1, #0 wz
14514     94 00 90 AD |  if_e	jmp	#LR__1661
14518     45 00 00 FF 
1451c     94 E4 05 F1 | 	add	objptr, ##35476
14520     F2 1C 02 FB | 	rdlong	arg06, objptr
14524     45 00 00 FF 
14528     94 E4 85 F1 | 	sub	objptr, ##35476
1452c     00 00 40 FF 
14530     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14534     45 00 00 CF 
14538     94 E4 05 C1 |  if_b	add	objptr, ##35476
1453c     F2 26 02 CB |  if_b	rdlong	local01, objptr
14540     45 00 00 CF 
14544     94 E4 85 C1 |  if_b	sub	objptr, ##35476
14548     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1454c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
14550     58 00 90 3D |  if_ae	jmp	#LR__1661
14554                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
14554     50 00 00 FF 
14558     5C E5 05 F1 | 	add	objptr, ##41308
1455c     F2 1C 02 FB | 	rdlong	arg06, objptr
14560     50 00 00 FF 
14564     5C E5 85 F1 | 	sub	objptr, ##41308
14568     01 1C 0E F2 | 	cmp	arg06, #1 wz
1456c     3C 00 90 5D |  if_ne	jmp	#LR__1660
14570     52 00 00 FF 
14574     FC E4 05 F1 | 	add	objptr, ##42236
14578     F2 14 02 FB | 	rdlong	arg02, objptr
1457c     04 E4 85 F1 | 	sub	objptr, #4
14580     F2 1A 02 FB | 	rdlong	arg05, objptr
14584     07 12 06 F6 | 	mov	arg01, #7
14588     56 00 00 FF 
1458c     44 16 06 F6 | 	mov	arg03, ##44100
14590     0C 18 C6 F9 | 	decod	arg04, #12
14594     01 1C 66 F6 | 	neg	arg06, #1
14598     47 00 00 FF 
1459c     2C E4 85 F1 | 	sub	objptr, ##36396
145a0     70 39 B1 FD | 	call	#_audio096_spin2_play
145a4     0B 00 00 FF 
145a8     CC E4 85 F1 | 	sub	objptr, ##5836
145ac                 | LR__1660
145ac                 | LR__1661
145ac                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
145ac     45 00 00 FF 
145b0     94 E4 05 F1 | 	add	objptr, ##35476
145b4     F2 1C 0A FB | 	rdlong	arg06, objptr wz
145b8     45 00 00 FF 
145bc     94 E4 85 F1 | 	sub	objptr, ##35476
145c0     D4 01 90 AD |  if_e	jmp	#LR__1670
145c4     45 00 00 FF 
145c8     94 E4 05 F1 | 	add	objptr, ##35476
145cc     F2 1C 02 FB | 	rdlong	arg06, objptr
145d0     45 00 00 FF 
145d4     94 E4 85 F1 | 	sub	objptr, ##35476
145d8     00 00 40 FF 
145dc     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
145e0     45 00 00 CF 
145e4     94 E4 05 C1 |  if_b	add	objptr, ##35476
145e8     F2 26 02 CB |  if_b	rdlong	local01, objptr
145ec     45 00 00 CF 
145f0     94 E4 85 C1 |  if_b	sub	objptr, ##35476
145f4     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
145f8     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
145fc     98 01 90 3D |  if_ae	jmp	#LR__1670
14600                 | '   if leds and 2 = 2 then 
14600     52 00 00 FF 
14604     38 E5 05 F1 | 	add	objptr, ##42296
14608     F2 26 0A FB | 	rdlong	local01, objptr wz
1460c     52 00 00 FF 
14610     38 E5 85 F1 | 	sub	objptr, ##42296
14614     58 01 90 AD |  if_e	jmp	#LR__1669
14618                 | '     if key>96 andalso key<123 then
14618     45 00 00 FF 
1461c     94 E4 05 F1 | 	add	objptr, ##35476
14620     F2 26 02 FB | 	rdlong	local01, objptr
14624     45 00 00 FF 
14628     94 E4 85 F1 | 	sub	objptr, ##35476
1462c     61 26 16 F2 | 	cmp	local01, #97 wc
14630     3C 00 90 CD |  if_b	jmp	#LR__1662
14634     45 00 00 FF 
14638     94 E4 05 F1 | 	add	objptr, ##35476
1463c     F2 26 02 FB | 	rdlong	local01, objptr
14640     45 00 00 FF 
14644     94 E4 85 F1 | 	sub	objptr, ##35476
14648     7B 26 16 F2 | 	cmp	local01, #123 wc
1464c     20 00 90 3D |  if_ae	jmp	#LR__1662
14650     45 00 00 FF 
14654     94 E4 05 F1 | 	add	objptr, ##35476
14658     F2 26 02 FB | 	rdlong	local01, objptr
1465c     20 26 86 F1 | 	sub	local01, #32
14660     F2 26 62 FC | 	wrlong	local01, objptr
14664     45 00 00 FF 
14668     94 E4 85 F1 | 	sub	objptr, ##35476
1466c     00 01 90 FD | 	jmp	#LR__1668
14670                 | LR__1662
14670     45 00 00 FF 
14674     94 E4 05 F1 | 	add	objptr, ##35476
14678     F2 26 02 FB | 	rdlong	local01, objptr
1467c     45 00 00 FF 
14680     94 E4 85 F1 | 	sub	objptr, ##35476
14684     41 26 16 F2 | 	cmp	local01, #65 wc
14688     3C 00 90 CD |  if_b	jmp	#LR__1663
1468c     45 00 00 FF 
14690     94 E4 05 F1 | 	add	objptr, ##35476
14694     F2 26 02 FB | 	rdlong	local01, objptr
14698     45 00 00 FF 
1469c     94 E4 85 F1 | 	sub	objptr, ##35476
146a0     5B 26 16 F2 | 	cmp	local01, #91 wc
146a4     20 00 90 3D |  if_ae	jmp	#LR__1663
146a8     45 00 00 FF 
146ac     94 E4 05 F1 | 	add	objptr, ##35476
146b0     F2 26 02 FB | 	rdlong	local01, objptr
146b4     20 26 06 F1 | 	add	local01, #32
146b8     F2 26 62 FC | 	wrlong	local01, objptr
146bc     45 00 00 FF 
146c0     94 E4 85 F1 | 	sub	objptr, ##35476
146c4     A8 00 90 FD | 	jmp	#LR__1667
146c8                 | LR__1663
146c8     45 00 00 FF 
146cc     94 E4 05 F1 | 	add	objptr, ##35476
146d0     F2 26 02 FB | 	rdlong	local01, objptr
146d4     45 00 00 FF 
146d8     94 E4 85 F1 | 	sub	objptr, ##35476
146dc     17 26 16 F2 | 	cmp	local01, #23 wc
146e0     3C 00 90 CD |  if_b	jmp	#LR__1664
146e4     45 00 00 FF 
146e8     94 E4 05 F1 | 	add	objptr, ##35476
146ec     F2 26 02 FB | 	rdlong	local01, objptr
146f0     45 00 00 FF 
146f4     94 E4 85 F1 | 	sub	objptr, ##35476
146f8     20 26 16 F2 | 	cmp	local01, #32 wc
146fc     20 00 90 3D |  if_ae	jmp	#LR__1664
14700     45 00 00 FF 
14704     94 E4 05 F1 | 	add	objptr, ##35476
14708     F2 26 02 FB | 	rdlong	local01, objptr
1470c     09 26 86 F1 | 	sub	local01, #9
14710     F2 26 62 FC | 	wrlong	local01, objptr
14714     45 00 00 FF 
14718     94 E4 85 F1 | 	sub	objptr, ##35476
1471c     50 00 90 FD | 	jmp	#LR__1666
14720                 | LR__1664
14720     45 00 00 FF 
14724     94 E4 05 F1 | 	add	objptr, ##35476
14728     F2 28 02 FB | 	rdlong	local02, objptr
1472c     45 00 00 FF 
14730     94 E4 85 F1 | 	sub	objptr, ##35476
14734     0E 28 16 F2 | 	cmp	local02, #14 wc
14738     34 00 90 CD |  if_b	jmp	#LR__1665
1473c     45 00 00 FF 
14740     94 E4 05 F1 | 	add	objptr, ##35476
14744     F2 26 02 FB | 	rdlong	local01, objptr
14748     45 00 00 FF 
1474c     94 E4 85 F1 | 	sub	objptr, ##35476
14750     17 26 16 F2 | 	cmp	local01, #23 wc
14754     52 00 00 CF 
14758     3C E5 05 C1 |  if_b	add	objptr, ##42300
1475c     F2 28 02 CB |  if_b	rdlong	local02, objptr
14760     27 28 06 C1 |  if_b	add	local02, #39
14764     F2 28 62 CC |  if_b	wrlong	local02, objptr
14768     52 00 00 CF 
1476c     3C E5 85 C1 |  if_b	sub	objptr, ##42300
14770                 | LR__1665
14770                 | LR__1666
14770                 | LR__1667
14770                 | LR__1668
14770                 | LR__1669
14770     45 00 00 FF 
14774     94 E4 05 F1 | 	add	objptr, ##35476
14778     F2 12 02 FB | 	rdlong	arg01, objptr
1477c     45 00 00 FF 
14780     94 E4 85 F1 | 	sub	objptr, ##35476
14784     94 05 B1 FD | 	call	#_scantochar
14788     FD 12 02 F6 | 	mov	arg01, result1
1478c     A8 5E B1 FD | 	call	#__system__Chr_S
14790     A7 FA 61 FC | 	wrlong	result1, fp
14794     0C 00 90 FD | 	jmp	#LR__1671
14798                 | LR__1670
14798     C4 01 00 FF 
1479c     DE 29 06 F6 | 	mov	local02, ##@LR__6101
147a0     A7 28 62 FC | 	wrlong	local02, fp
147a4                 | LR__1671
147a4     08 4E 05 F1 | 	add	fp, #8
147a8     A7 3E 68 FC | 	wrlong	#31, fp
147ac     08 4E 85 F1 | 	sub	fp, #8
147b0     A7 12 02 F6 | 	mov	arg01, fp
147b4     94 91 BF FD | 	call	#_push
147b8     A7 F0 03 F6 | 	mov	ptra, fp
147bc     B2 00 A0 FD | 	call	#popregs_
147c0                 | _do_inkey_ret
147c0     2D 00 64 FD | 	ret
147c4                 | 
147c4                 | ' 
147c4                 | ' ' ----------------  ink
147c4                 | ' 
147c4                 | ' sub do_ink
147c4                 | _do_ink
147c4     00 4A 05 F6 | 	mov	COUNT_, #0
147c8     A8 00 A0 FD | 	call	#pushregs_
147cc     0C F0 07 F1 | 	add	ptra, #12
147d0     E0 90 BF FD | 	call	#_pop
147d4     FF 14 02 F6 | 	mov	arg02, result3
147d8     A7 FA 61 FC | 	wrlong	result1, fp
147dc     04 4E 05 F1 | 	add	fp, #4
147e0     A7 FC 61 FC | 	wrlong	result2, fp
147e4     04 4E 05 F1 | 	add	fp, #4
147e8     A7 14 62 FC | 	wrlong	arg02, fp
147ec     08 4E 85 F1 | 	sub	fp, #8
147f0     A7 12 02 F6 | 	mov	arg01, fp
147f4     A0 92 BF FD | 	call	#_converttoint
147f8     37 00 00 FF 
147fc     5C E4 05 F1 | 	add	objptr, ##28252
14800     F2 FA 61 FC | 	wrlong	result1, objptr
14804     04 E4 85 F1 | 	sub	objptr, #4
14808     F2 14 02 FB | 	rdlong	arg02, objptr
1480c                 | ' 
1480c                 | ' write_color:=ff
1480c     37 00 00 FF 
14810     17 E4 85 F1 | 	sub	objptr, ##28183
14814     F2 FA 61 FC | 	wrlong	result1, objptr
14818                 | ' write_background:=bb
14818     04 E4 05 F1 | 	add	objptr, #4
1481c     F2 14 62 FC | 	wrlong	arg02, objptr
14820     37 00 00 FF 
14824     17 E4 05 F1 | 	add	objptr, ##28183
14828     F2 12 02 FB | 	rdlong	arg01, objptr
1482c     37 00 00 FF 
14830     5C E4 85 F1 | 	sub	objptr, ##28252
14834     70 0D B1 FD | 	call	#_hg010b_spin2_setcursorcolor
14838     A7 F0 03 F6 | 	mov	ptra, fp
1483c     B2 00 A0 FD | 	call	#popregs_
14840                 | _do_ink_ret
14840     2D 00 64 FD | 	ret
14844                 | 
14844                 | ' 
14844                 | ' ' ----------------  int
14844                 | ' 
14844                 | ' sub do_int
14844                 | _do_int
14844     02 4A 05 F6 | 	mov	COUNT_, #2
14848     A8 00 A0 FD | 	call	#pushregs_
1484c     10 F0 07 F1 | 	add	ptra, #16
14850     60 90 BF FD | 	call	#_pop
14854     FE 26 02 F6 | 	mov	local01, result2
14858     FF 28 02 F6 | 	mov	local02, result3
1485c     A7 FA 61 FC | 	wrlong	result1, fp
14860     04 4E 05 F1 | 	add	fp, #4
14864     A7 26 62 FC | 	wrlong	local01, fp
14868     04 4E 05 F1 | 	add	fp, #4
1486c     A7 28 62 FC | 	wrlong	local02, fp
14870                 | ' 
14870                 | ' t1=pop()
14870                 | ' select case t1.result_type
14870     08 4E 85 F1 | 	sub	fp, #8
14874     1E 28 0E F2 | 	cmp	local02, #30 wz
14878     14 00 90 AD |  if_e	jmp	#LR__1680
1487c     1F 28 0E F2 | 	cmp	local02, #31 wz
14880     20 00 90 AD |  if_e	jmp	#LR__1681
14884     2B 28 0E F2 | 	cmp	local02, #43 wz
14888     34 00 90 AD |  if_e	jmp	#LR__1682
1488c     50 00 90 FD | 	jmp	#LR__1683
14890                 | LR__1680
14890     A7 12 02 FB | 	rdlong	arg01, fp
14894     00 14 06 F6 | 	mov	arg02, #0
14898     9C 6E B1 FD | 	call	#__system___float_tointeger
1489c     A7 FA 61 FC | 	wrlong	result1, fp
148a0     3C 00 90 FD | 	jmp	#LR__1683
148a4                 | LR__1681
148a4     A7 12 02 FB | 	rdlong	arg01, fp
148a8     D4 71 B1 FD | 	call	#__system____builtin_atof
148ac     FD 12 02 F6 | 	mov	arg01, result1
148b0     00 14 06 F6 | 	mov	arg02, #0
148b4     80 6E B1 FD | 	call	#__system___float_tointeger
148b8     A7 FA 61 FC | 	wrlong	result1, fp
148bc     20 00 90 FD | 	jmp	#LR__1683
148c0                 | LR__1682
148c0     A7 12 02 FB | 	rdlong	arg01, fp
148c4     64 91 BF FD | 	call	#_convertstring
148c8     FD 12 02 F6 | 	mov	arg01, result1
148cc     B0 71 B1 FD | 	call	#__system____builtin_atof
148d0     FD 12 02 F6 | 	mov	arg01, result1
148d4     00 14 06 F6 | 	mov	arg02, #0
148d8     5C 6E B1 FD | 	call	#__system___float_tointeger
148dc     A7 FA 61 FC | 	wrlong	result1, fp
148e0                 | LR__1683
148e0     08 4E 05 F1 | 	add	fp, #8
148e4     A7 38 68 FC | 	wrlong	#28, fp
148e8     08 4E 85 F1 | 	sub	fp, #8
148ec     A7 12 02 F6 | 	mov	arg01, fp
148f0     58 90 BF FD | 	call	#_push
148f4     A7 F0 03 F6 | 	mov	ptra, fp
148f8     B2 00 A0 FD | 	call	#popregs_
148fc                 | _do_int_ret
148fc     2D 00 64 FD | 	ret
14900                 | 
14900                 | ' 
14900                 | ' ' ----------------  input
14900                 | ' 
14900                 | ' sub do_input
14900                 | _do_input
14900     11 4A 05 F6 | 	mov	COUNT_, #17
14904     A8 00 A0 FD | 	call	#pushregs_
14908     50 F1 07 F1 | 	add	ptra, #336
1490c     4A 00 00 FF 
14910     A0 E4 05 F1 | 	add	objptr, ##38048
14914     F2 FE 01 FB | 	rdlong	result3, objptr
14918     FF FC 01 F6 | 	mov	result2, result3
1491c     01 FC 65 F0 | 	shl	result2, #1
14920     FF FC 01 F1 | 	add	result2, result3
14924     02 FC 65 F0 | 	shl	result2, #2
14928     03 00 00 FF 
1492c     04 E4 85 F1 | 	sub	objptr, ##1540
14930     F2 FC 01 F1 | 	add	result2, objptr
14934     FE FC 01 FB | 	rdlong	result2, result2
14938     08 4E 05 F1 | 	add	fp, #8
1493c     A7 FC 61 FC | 	wrlong	result2, fp
14940                 | ' 
14940                 | ' numpar=compiledline(lineptr_e).result.uresult
14940                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
14940     08 4E 85 F1 | 	sub	fp, #8
14944     01 FC 15 F2 | 	cmp	result2, #1 wc
14948     47 00 00 FF 
1494c     9C E4 85 F1 | 	sub	objptr, ##36508
14950     14 00 90 CD |  if_b	jmp	#LR__1690
14954     08 4E 05 F1 | 	add	fp, #8
14958     A7 FC 01 FB | 	rdlong	result2, fp
1495c     08 4E 85 F1 | 	sub	fp, #8
14960     41 FC 15 F2 | 	cmp	result2, #65 wc
14964     50 00 90 CD |  if_b	jmp	#LR__1691
14968                 | LR__1690
14968     00 12 06 F6 | 	mov	arg01, #0
1496c     34 97 B1 FD | 	call	#__system___getiolock_0625
14970     FD 12 02 F6 | 	mov	arg01, result1
14974     7C 3A B1 FD | 	call	#__system___lockmem
14978     C4 01 00 FF 
1497c     DF 15 06 F6 | 	mov	arg02, ##@LR__6102
14980     00 12 06 F6 | 	mov	arg01, #0
14984     00 16 06 F6 | 	mov	arg03, #0
14988     60 47 B1 FD | 	call	#__system___basic_print_string
1498c     00 12 06 F6 | 	mov	arg01, #0
14990     10 97 B1 FD | 	call	#__system___getiolock_0625
14994     FD 00 68 FC | 	wrlong	#0, result1
14998     50 00 00 FF 
1499c     10 E5 05 F1 | 	add	objptr, ##41232
149a0     F2 14 02 FB | 	rdlong	arg02, objptr
149a4     50 00 00 FF 
149a8     10 E5 85 F1 | 	sub	objptr, ##41232
149ac     27 12 06 F6 | 	mov	arg01, #39
149b0     E8 FF B0 FD | 	call	#_printerror
149b4     44 0B 90 FD | 	jmp	#LR__1740
149b8                 | LR__1691
149b8     08 4E 05 F1 | 	add	fp, #8
149bc     A7 FC 01 FB | 	rdlong	result2, fp
149c0     01 FC 85 F1 | 	sub	result2, #1
149c4     28 4F 05 F1 | 	add	fp, #296
149c8     A7 FC 61 FC | 	wrlong	result2, fp
149cc     3C E4 05 F1 | 	add	objptr, #60
149d0     F2 FC E1 FA | 	rdword	result2, objptr
149d4     FE FC 51 F6 | 	abs	result2, result2 wc
149d8     01 FC 45 F0 | 	shr	result2, #1
149dc     FE FC 81 F6 | 	negc	result2, result2
149e0     0C 4E 05 F1 | 	add	fp, #12
149e4     A7 FC 61 FC | 	wrlong	result2, fp
149e8     02 E4 05 F1 | 	add	objptr, #2
149ec     F2 26 C2 FA | 	rdbyte	local01, objptr
149f0     3E E4 85 F1 | 	sub	objptr, #62
149f4     04 4E 05 F1 | 	add	fp, #4
149f8     A7 26 62 FC | 	wrlong	local01, fp
149fc     40 4F 85 F1 | 	sub	fp, #320
14a00                 | ' i=numpar-1
14a00                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
14a00                 | ' do
14a00                 | LR__1692
14a00     00 BE BE FD | 	call	#_edit
14a04     A7 FA 61 FC | 	wrlong	result1, fp
14a08                 | ' 
14a08                 | '   line$=edit()
14a08                 | ' 
14a08                 | '   if v.cursor_y=cpy+1 then
14a08     3E E4 05 F1 | 	add	objptr, #62
14a0c     F2 26 C2 FA | 	rdbyte	local01, objptr
14a10     3E E4 85 F1 | 	sub	objptr, #62
14a14     40 4F 05 F1 | 	add	fp, #320
14a18     A7 16 02 FB | 	rdlong	arg03, fp
14a1c     40 4F 85 F1 | 	sub	fp, #320
14a20     01 16 06 F1 | 	add	arg03, #1
14a24     0B 27 0A F2 | 	cmp	local01, arg03 wz
14a28     6C 00 90 5D |  if_ne	jmp	#LR__1695
14a2c     A7 26 02 FB | 	rdlong	local01, fp
14a30     13 13 02 F6 | 	mov	arg01, local01
14a34     09 29 02 F6 | 	mov	local02, arg01
14a38     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
14a3c                 | LR__1693
14a3c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14a40     01 28 06 51 |  if_ne	add	local02, #1
14a44     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14a48                 | LR__1694
14a48     09 29 82 F1 | 	sub	local02, arg01
14a4c     14 15 02 F6 | 	mov	arg02, local02
14a50     3C 4F 05 F1 | 	add	fp, #316
14a54     A7 16 02 FB | 	rdlong	arg03, fp
14a58     3C 4F 85 F1 | 	sub	fp, #316
14a5c     0B 15 82 F1 | 	sub	arg02, arg03
14a60     37 00 00 FF 
14a64     54 E4 05 F1 | 	add	objptr, ##28244
14a68     F2 16 02 FB | 	rdlong	arg03, objptr
14a6c     37 00 00 FF 
14a70     54 E4 85 F1 | 	sub	objptr, ##28244
14a74     0B 15 02 F1 | 	add	arg02, arg03
14a78     13 13 02 F6 | 	mov	arg01, local01
14a7c     7C 5A B1 FD | 	call	#__system__Right_S
14a80     FD 12 02 F6 | 	mov	arg01, result1
14a84     7C 5E B1 FD | 	call	#__system__RTrim_S
14a88     FD 12 02 F6 | 	mov	arg01, result1
14a8c     B4 5D B1 FD | 	call	#__system__LTrim_S
14a90     A7 FA 61 FC | 	wrlong	result1, fp
14a94     14 00 90 FD | 	jmp	#LR__1696
14a98                 | LR__1695
14a98     A7 12 02 FB | 	rdlong	arg01, fp
14a9c     64 5E B1 FD | 	call	#__system__RTrim_S
14aa0     FD 12 02 F6 | 	mov	arg01, result1
14aa4     9C 5D B1 FD | 	call	#__system__LTrim_S
14aa8     A7 FA 61 FC | 	wrlong	result1, fp
14aac                 | LR__1696
14aac                 | '   do
14aac                 | LR__1697
14aac     A7 14 02 FB | 	rdlong	arg02, fp
14ab0     C4 01 00 FF 
14ab4     EA 17 06 F6 | 	mov	arg03, ##@LR__6103
14ab8     01 12 06 F6 | 	mov	arg01, #1
14abc     FC 5E B1 FD | 	call	#__system__Instr
14ac0     0C 4E 05 F1 | 	add	fp, #12
14ac4     A7 FA 61 FC | 	wrlong	result1, fp
14ac8                 | '    comma=instr(1,line$,",")  
14ac8                 | '    if comma>0  then 
14ac8     0C 4E 85 F1 | 	sub	fp, #12
14acc     01 FA 15 F2 | 	cmp	result1, #1 wc
14ad0     68 00 90 CD |  if_b	jmp	#LR__1700
14ad4     A7 12 02 FB | 	rdlong	arg01, fp
14ad8     0C 4E 05 F1 | 	add	fp, #12
14adc     A7 14 02 FB | 	rdlong	arg02, fp
14ae0     0C 4E 85 F1 | 	sub	fp, #12
14ae4     01 14 86 F1 | 	sub	arg02, #1
14ae8     88 59 B1 FD | 	call	#__system__Left_S
14aec     04 4E 05 F1 | 	add	fp, #4
14af0     A7 FA 61 FC | 	wrlong	result1, fp
14af4     04 4E 85 F1 | 	sub	fp, #4
14af8     A7 26 02 FB | 	rdlong	local01, fp
14afc     13 13 02 F6 | 	mov	arg01, local01
14b00     09 29 02 F6 | 	mov	local02, arg01
14b04     97 06 48 FB | 	callpa	#(@LR__1699-@LR__1698)>>2,fcache_load_ptr_
14b08                 | LR__1698
14b08     14 FB C9 FA | 	rdbyte	result1, local02 wz
14b0c     01 28 06 51 |  if_ne	add	local02, #1
14b10     F4 FF 9F 5D |  if_ne	jmp	#LR__1698
14b14                 | LR__1699
14b14     09 29 82 F1 | 	sub	local02, arg01
14b18     14 15 02 F6 | 	mov	arg02, local02
14b1c     0C 4E 05 F1 | 	add	fp, #12
14b20     A7 16 02 FB | 	rdlong	arg03, fp
14b24     0C 4E 85 F1 | 	sub	fp, #12
14b28     0B 15 82 F1 | 	sub	arg02, arg03
14b2c     13 13 02 F6 | 	mov	arg01, local01
14b30     C8 59 B1 FD | 	call	#__system__Right_S
14b34     A7 FA 61 FC | 	wrlong	result1, fp
14b38     28 00 90 FD | 	jmp	#LR__1701
14b3c                 | LR__1700
14b3c     A7 12 02 FB | 	rdlong	arg01, fp
14b40     C0 5D B1 FD | 	call	#__system__RTrim_S
14b44     FD 12 02 F6 | 	mov	arg01, result1
14b48     F8 5C B1 FD | 	call	#__system__LTrim_S
14b4c     04 4E 05 F1 | 	add	fp, #4
14b50     A7 FA 61 FC | 	wrlong	result1, fp
14b54     04 4E 85 F1 | 	sub	fp, #4
14b58     C4 01 00 FF 
14b5c     EC 27 06 F6 | 	mov	local01, ##@LR__6104
14b60     A7 26 62 FC | 	wrlong	local01, fp
14b64                 | LR__1701
14b64     30 4F 05 F1 | 	add	fp, #304
14b68     A7 26 02 FB | 	rdlong	local01, fp
14b6c     02 26 66 F0 | 	shl	local01, #2
14b70     04 4F 85 F1 | 	sub	fp, #260
14b74     A7 26 02 F1 | 	add	local01, fp
14b78     28 4E 85 F1 | 	sub	fp, #40
14b7c     A7 FA 01 FB | 	rdlong	result1, fp
14b80     13 FB 61 FC | 	wrlong	result1, local01
14b84     2C 4F 05 F1 | 	add	fp, #300
14b88     A7 26 02 FB | 	rdlong	local01, fp
14b8c     01 26 86 F1 | 	sub	local01, #1
14b90     A7 26 62 FC | 	wrlong	local01, fp
14b94     30 4F 85 F1 | 	sub	fp, #304
14b98     00 26 56 F2 | 	cmps	local01, #0 wc
14b9c     18 00 90 CD |  if_b	jmp	#LR__1702
14ba0     A7 12 02 FB | 	rdlong	arg01, fp
14ba4     C4 01 00 FF 
14ba8     ED 15 06 F6 | 	mov	arg02, ##@LR__6105
14bac     6C 38 B1 FD | 	call	#__system___string_cmp
14bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
14bb4     F4 FE 9F 5D |  if_ne	jmp	#LR__1697
14bb8                 | LR__1702
14bb8     30 4F 05 F1 | 	add	fp, #304
14bbc     A7 26 02 FB | 	rdlong	local01, fp
14bc0     30 4F 85 F1 | 	sub	fp, #304
14bc4     00 26 56 F2 | 	cmps	local01, #0 wc
14bc8     34 FE 9F 3D |  if_ae	jmp	#LR__1692
14bcc                 | ' 
14bcc                 | ' for i=0 to numpar-1
14bcc     30 4F 05 F1 | 	add	fp, #304
14bd0     A7 00 68 FC | 	wrlong	#0, fp
14bd4     28 4F 85 F1 | 	sub	fp, #296
14bd8     A7 2A 02 FB | 	rdlong	local03, fp
14bdc     08 4E 85 F1 | 	sub	fp, #8
14be0                 | LR__1703
14be0     30 4F 05 F1 | 	add	fp, #304
14be4     A7 2C 02 FB | 	rdlong	local04, fp
14be8     30 4F 85 F1 | 	sub	fp, #304
14bec     16 27 02 F6 | 	mov	local01, local04
14bf0     15 27 52 F2 | 	cmps	local01, local03 wc
14bf4     04 09 90 3D |  if_ae	jmp	#LR__1739
14bf8                 | ' 
14bf8                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
14bf8     30 4F 05 F1 | 	add	fp, #304
14bfc     A7 16 02 FB | 	rdlong	arg03, fp
14c00     02 16 66 F0 | 	shl	arg03, #2
14c04     04 4F 85 F1 | 	sub	fp, #260
14c08     A7 16 02 F1 | 	add	arg03, fp
14c0c     0B 13 02 FB | 	rdlong	arg01, arg03
14c10     2C 4E 85 F1 | 	sub	fp, #44
14c14     DC 1E BF FD | 	call	#_isnum
14c18     FD 2E 02 F6 | 	mov	local05, result1
14c1c     30 4F 05 F1 | 	add	fp, #304
14c20     A7 16 02 FB | 	rdlong	arg03, fp
14c24     02 16 66 F0 | 	shl	arg03, #2
14c28     04 4F 85 F1 | 	sub	fp, #260
14c2c     A7 30 02 F6 | 	mov	local06, fp
14c30     A7 16 02 F1 | 	add	arg03, fp
14c34     0B 13 02 FB | 	rdlong	arg01, arg03
14c38     2C 4E 85 F1 | 	sub	fp, #44
14c3c     A0 22 BF FD | 	call	#_isint
14c40     FD 2E 2A F5 | 	andn	local05, result1 wz
14c44     52 00 00 5F 
14c48     68 E5 05 51 |  if_ne	add	objptr, ##42344
14c4c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
14c50     52 00 00 5F 
14c54     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14c58                 | '   if isint(args(i)) then r=result_int 
14c58     30 4F 05 F1 | 	add	fp, #304
14c5c     A7 2E 02 FB | 	rdlong	local05, fp
14c60     02 2E 66 F0 | 	shl	local05, #2
14c64     04 4F 85 F1 | 	sub	fp, #260
14c68     A7 2E 02 F1 | 	add	local05, fp
14c6c     17 13 02 FB | 	rdlong	arg01, local05
14c70     2C 4E 85 F1 | 	sub	fp, #44
14c74     68 22 BF FD | 	call	#_isint
14c78     00 FA 0D F2 | 	cmp	result1, #0 wz
14c7c     52 00 00 5F 
14c80     68 E5 05 51 |  if_ne	add	objptr, ##42344
14c84     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14c88     52 00 00 5F 
14c8c     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14c90                 | '   if isdec(args(i)) then r=result_uint 
14c90     30 4F 05 F1 | 	add	fp, #304
14c94     A7 2E 02 FB | 	rdlong	local05, fp
14c98     02 2E 66 F0 | 	shl	local05, #2
14c9c     04 4F 85 F1 | 	sub	fp, #260
14ca0     A7 2E 02 F1 | 	add	local05, fp
14ca4     17 13 02 FB | 	rdlong	arg01, local05
14ca8     2C 4E 85 F1 | 	sub	fp, #44
14cac     D4 24 BF FD | 	call	#_isdec
14cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
14cb4     52 00 00 5F 
14cb8     68 E5 05 51 |  if_ne	add	objptr, ##42344
14cbc     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14cc0     52 00 00 5F 
14cc4     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14cc8                 | '   if not isnum(args(i)) then 
14cc8     30 4F 05 F1 | 	add	fp, #304
14ccc     A7 32 02 FB | 	rdlong	local07, fp
14cd0     19 35 02 F6 | 	mov	local08, local07
14cd4     02 34 66 F0 | 	shl	local08, #2
14cd8     04 4F 85 F1 | 	sub	fp, #260
14cdc     A7 36 02 F6 | 	mov	local09, fp
14ce0     A7 34 02 F1 | 	add	local08, fp
14ce4     1A 13 02 FB | 	rdlong	arg01, local08
14ce8     2C 4E 85 F1 | 	sub	fp, #44
14cec     04 1E BF FD | 	call	#_isnum
14cf0     FD 2E 22 F6 | 	not	local05, result1
14cf4     00 2E 0E F2 | 	cmp	local05, #0 wz
14cf8     44 01 90 AD |  if_e	jmp	#LR__1708
14cfc     52 00 00 FF 
14d00     68 E5 05 F1 | 	add	objptr, ##42344
14d04     F2 56 68 FC | 	wrlong	#43, objptr
14d08     52 00 00 FF 
14d0c     68 E5 85 F1 | 	sub	objptr, ##42344
14d10     04 4E 05 F1 | 	add	fp, #4
14d14     A7 12 02 FB | 	rdlong	arg01, fp
14d18     04 4E 85 F1 | 	sub	fp, #4
14d1c     09 29 02 F6 | 	mov	local02, arg01
14d20     97 06 48 FB | 	callpa	#(@LR__1705-@LR__1704)>>2,fcache_load_ptr_
14d24                 | LR__1704
14d24     14 FB C9 FA | 	rdbyte	result1, local02 wz
14d28     01 28 06 51 |  if_ne	add	local02, #1
14d2c     F4 FF 9F 5D |  if_ne	jmp	#LR__1704
14d30                 | LR__1705
14d30     09 29 82 F1 | 	sub	local02, arg01
14d34     14 33 02 F6 | 	mov	local07, local02
14d38     38 4F 05 F1 | 	add	fp, #312
14d3c     A7 32 62 FC | 	wrlong	local07, fp
14d40     52 00 00 FF 
14d44     F0 E4 05 F1 | 	add	objptr, ##42224
14d48     F2 12 02 FB | 	rdlong	arg01, objptr
14d4c     19 13 82 F1 | 	sub	arg01, local07
14d50     04 12 86 F1 | 	sub	arg01, #4
14d54     03 12 26 F5 | 	andn	arg01, #3
14d58     F2 12 62 FC | 	wrlong	arg01, objptr
14d5c     52 00 00 FF 
14d60     F0 E4 85 F1 | 	sub	objptr, ##42224
14d64     A7 14 02 FB | 	rdlong	arg02, fp
14d68     38 4F 85 F1 | 	sub	fp, #312
14d6c     CC FD B0 FD | 	call	#_pslpoke
14d70                 | '     pslpoke memtop,l
14d70                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
14d70     34 4F 05 F1 | 	add	fp, #308
14d74     A7 02 68 FC | 	wrlong	#1, fp
14d78     04 4E 05 F1 | 	add	fp, #4
14d7c     A7 38 02 FB | 	rdlong	local10, fp
14d80     38 4F 85 F1 | 	sub	fp, #312
14d84     01 38 06 F1 | 	add	local10, #1
14d88                 | LR__1706
14d88     34 4F 05 F1 | 	add	fp, #308
14d8c     A7 2E 02 FB | 	rdlong	local05, fp
14d90     34 4F 85 F1 | 	sub	fp, #308
14d94     1C 2F 52 F2 | 	cmps	local05, local10 wc
14d98     84 00 90 3D |  if_ae	jmp	#LR__1707
14d9c     52 00 00 FF 
14da0     F0 E4 05 F1 | 	add	objptr, ##42224
14da4     F2 32 02 FB | 	rdlong	local07, objptr
14da8     52 00 00 FF 
14dac     F0 E4 85 F1 | 	sub	objptr, ##42224
14db0     03 32 06 F1 | 	add	local07, #3
14db4     34 4F 05 F1 | 	add	fp, #308
14db8     A7 3A 02 FB | 	rdlong	local11, fp
14dbc     1D 33 02 F1 | 	add	local07, local11
14dc0     04 4E 85 F1 | 	sub	fp, #4
14dc4     A7 3C 02 FB | 	rdlong	local12, fp
14dc8     02 3C 66 F0 | 	shl	local12, #2
14dcc     04 4F 85 F1 | 	sub	fp, #260
14dd0     A7 3E 02 F6 | 	mov	local13, fp
14dd4     A7 3C 02 F1 | 	add	local12, fp
14dd8     1E 13 02 FB | 	rdlong	arg01, local12
14ddc     2C 4E 85 F1 | 	sub	fp, #44
14de0     01 40 06 F6 | 	mov	local14, #1
14de4     1D 15 02 F6 | 	mov	arg02, local11
14de8     01 16 06 F6 | 	mov	arg03, #1
14dec     9C 57 B1 FD | 	call	#__system__Mid_S
14df0     FD 14 C2 FA | 	rdbyte	arg02, result1
14df4     19 13 02 F6 | 	mov	arg01, local07
14df8     D0 FD B0 FD | 	call	#_pspoke
14dfc     34 4F 05 F1 | 	add	fp, #308
14e00     A7 34 02 FB | 	rdlong	local08, fp
14e04     1A 33 02 F6 | 	mov	local07, local08
14e08     1A 31 02 F6 | 	mov	local06, local08
14e0c     18 37 02 F6 | 	mov	local09, local06
14e10     01 36 06 F1 | 	add	local09, #1
14e14     A7 36 62 FC | 	wrlong	local09, fp
14e18     34 4F 85 F1 | 	sub	fp, #308
14e1c     68 FF 9F FD | 	jmp	#LR__1706
14e20                 | LR__1707
14e20     52 00 00 FF 
14e24     F0 E4 05 F1 | 	add	objptr, ##42224
14e28     F2 2E 02 FB | 	rdlong	local05, objptr
14e2c     52 00 00 FF 
14e30     F0 E4 85 F1 | 	sub	objptr, ##42224
14e34     10 4E 05 F1 | 	add	fp, #16
14e38     A7 2E 62 FC | 	wrlong	local05, fp
14e3c     10 4E 85 F1 | 	sub	fp, #16
14e40                 | LR__1708
14e40     70 8A BF FD | 	call	#_pop
14e44     FE 2E 02 F6 | 	mov	local05, result2
14e48     FF 42 02 F6 | 	mov	local15, result3
14e4c     1C 4E 05 F1 | 	add	fp, #28
14e50     A7 FA 61 FC | 	wrlong	result1, fp
14e54     04 4E 05 F1 | 	add	fp, #4
14e58     A7 2E 62 FC | 	wrlong	local05, fp
14e5c     04 4E 05 F1 | 	add	fp, #4
14e60     A7 42 62 FC | 	wrlong	local15, fp
14e64     04 4E 85 F1 | 	sub	fp, #4
14e68     A7 44 02 FB | 	rdlong	local16, fp
14e6c     0C 4E 85 F1 | 	sub	fp, #12
14e70     A7 44 62 FC | 	wrlong	local16, fp
14e74                 | '   t1=pop() : vartype=t1.result.twowords(1)
14e74                 | '   select case vartype
14e74     14 4E 85 F1 | 	sub	fp, #20
14e78     22 47 0A F6 | 	mov	local17, local16 wz
14e7c     64 00 90 AD |  if_e	jmp	#LR__1709
14e80     00 47 0E F2 | 	cmp	local17, #256 wz
14e84     6C 00 90 AD |  if_e	jmp	#LR__1710
14e88     01 47 0E F2 | 	cmp	local17, #257 wz
14e8c     74 00 90 AD |  if_e	jmp	#LR__1711
14e90     02 47 0E F2 | 	cmp	local17, #258 wz
14e94     7C 00 90 AD |  if_e	jmp	#LR__1712
14e98     03 47 0E F2 | 	cmp	local17, #259 wz
14e9c     84 00 90 AD |  if_e	jmp	#LR__1713
14ea0     04 47 0E F2 | 	cmp	local17, #260 wz
14ea4     8C 00 90 AD |  if_e	jmp	#LR__1714
14ea8     05 47 0E F2 | 	cmp	local17, #261 wz
14eac     94 00 90 AD |  if_e	jmp	#LR__1715
14eb0     06 47 0E F2 | 	cmp	local17, #262 wz
14eb4     9C 00 90 AD |  if_e	jmp	#LR__1716
14eb8     07 47 0E F2 | 	cmp	local17, #263 wz
14ebc     A4 00 90 AD |  if_e	jmp	#LR__1717
14ec0     08 47 0E F2 | 	cmp	local17, #264 wz
14ec4     AC 00 90 AD |  if_e	jmp	#LR__1718
14ec8     09 47 0E F2 | 	cmp	local17, #265 wz
14ecc     B4 00 90 AD |  if_e	jmp	#LR__1719
14ed0     0A 47 0E F2 | 	cmp	local17, #266 wz
14ed4     BC 00 90 AD |  if_e	jmp	#LR__1720
14ed8     0B 47 0E F2 | 	cmp	local17, #267 wz
14edc     C4 00 90 AD |  if_e	jmp	#LR__1721
14ee0     D0 00 90 FD | 	jmp	#LR__1722
14ee4                 | LR__1709
14ee4     18 4E 05 F1 | 	add	fp, #24
14ee8     A7 18 68 FC | 	wrlong	#12, fp
14eec     18 4E 85 F1 | 	sub	fp, #24
14ef0     CC 00 90 FD | 	jmp	#LR__1723
14ef4                 | LR__1710
14ef4     18 4E 05 F1 | 	add	fp, #24
14ef8     A7 18 68 FC | 	wrlong	#12, fp
14efc     18 4E 85 F1 | 	sub	fp, #24
14f00     BC 00 90 FD | 	jmp	#LR__1723
14f04                 | LR__1711
14f04     18 4E 05 F1 | 	add	fp, #24
14f08     A7 02 68 FC | 	wrlong	#1, fp
14f0c     18 4E 85 F1 | 	sub	fp, #24
14f10     AC 00 90 FD | 	jmp	#LR__1723
14f14                 | LR__1712
14f14     18 4E 05 F1 | 	add	fp, #24
14f18     A7 02 68 FC | 	wrlong	#1, fp
14f1c     18 4E 85 F1 | 	sub	fp, #24
14f20     9C 00 90 FD | 	jmp	#LR__1723
14f24                 | LR__1713
14f24     18 4E 05 F1 | 	add	fp, #24
14f28     A7 04 68 FC | 	wrlong	#2, fp
14f2c     18 4E 85 F1 | 	sub	fp, #24
14f30     8C 00 90 FD | 	jmp	#LR__1723
14f34                 | LR__1714
14f34     18 4E 05 F1 | 	add	fp, #24
14f38     A7 04 68 FC | 	wrlong	#2, fp
14f3c     18 4E 85 F1 | 	sub	fp, #24
14f40     7C 00 90 FD | 	jmp	#LR__1723
14f44                 | LR__1715
14f44     18 4E 05 F1 | 	add	fp, #24
14f48     A7 08 68 FC | 	wrlong	#4, fp
14f4c     18 4E 85 F1 | 	sub	fp, #24
14f50     6C 00 90 FD | 	jmp	#LR__1723
14f54                 | LR__1716
14f54     18 4E 05 F1 | 	add	fp, #24
14f58     A7 08 68 FC | 	wrlong	#4, fp
14f5c     18 4E 85 F1 | 	sub	fp, #24
14f60     5C 00 90 FD | 	jmp	#LR__1723
14f64                 | LR__1717
14f64     18 4E 05 F1 | 	add	fp, #24
14f68     A7 10 68 FC | 	wrlong	#8, fp
14f6c     18 4E 85 F1 | 	sub	fp, #24
14f70     4C 00 90 FD | 	jmp	#LR__1723
14f74                 | LR__1718
14f74     18 4E 05 F1 | 	add	fp, #24
14f78     A7 10 68 FC | 	wrlong	#8, fp
14f7c     18 4E 85 F1 | 	sub	fp, #24
14f80     3C 00 90 FD | 	jmp	#LR__1723
14f84                 | LR__1719
14f84     18 4E 05 F1 | 	add	fp, #24
14f88     A7 0C 68 FC | 	wrlong	#6, fp
14f8c     18 4E 85 F1 | 	sub	fp, #24
14f90     2C 00 90 FD | 	jmp	#LR__1723
14f94                 | LR__1720
14f94     18 4E 05 F1 | 	add	fp, #24
14f98     A7 10 68 FC | 	wrlong	#8, fp
14f9c     18 4E 85 F1 | 	sub	fp, #24
14fa0     1C 00 90 FD | 	jmp	#LR__1723
14fa4                 | LR__1721
14fa4     18 4E 05 F1 | 	add	fp, #24
14fa8     A7 0A 68 FC | 	wrlong	#5, fp
14fac     18 4E 85 F1 | 	sub	fp, #24
14fb0     0C 00 90 FD | 	jmp	#LR__1723
14fb4                 | LR__1722
14fb4     18 4E 05 F1 | 	add	fp, #24
14fb8     A7 18 68 FC | 	wrlong	#12, fp
14fbc     18 4E 85 F1 | 	sub	fp, #24
14fc0                 | LR__1723
14fc0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14fc0     18 4E 05 F1 | 	add	fp, #24
14fc4     A7 44 02 FB | 	rdlong	local16, fp
14fc8     18 4E 85 F1 | 	sub	fp, #24
14fcc     0C 44 0E F2 | 	cmp	local16, #12 wz
14fd0     74 01 90 5D |  if_ne	jmp	#LR__1728
14fd4     1C 4E 05 F1 | 	add	fp, #28
14fd8     A7 32 02 FB | 	rdlong	local07, fp
14fdc     1C 4E 85 F1 | 	sub	fp, #28
14fe0     00 04 00 FF 
14fe4     00 32 16 F2 | 	cmp	local07, ##524288 wc
14fe8     5C 01 90 3D |  if_ae	jmp	#LR__1728
14fec                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14fec     52 00 00 FF 
14ff0     68 E5 05 F1 | 	add	objptr, ##42344
14ff4     F2 44 02 FB | 	rdlong	local16, objptr
14ff8     52 00 00 FF 
14ffc     68 E5 85 F1 | 	sub	objptr, ##42344
15000     1C 44 0E F2 | 	cmp	local16, #28 wz
15004     38 00 90 5D |  if_ne	jmp	#LR__1724
15008     1C 4E 05 F1 | 	add	fp, #28
1500c     A7 44 02 FB | 	rdlong	local16, fp
15010     14 4F 05 F1 | 	add	fp, #276
15014     A7 32 02 FB | 	rdlong	local07, fp
15018     19 35 02 F6 | 	mov	local08, local07
1501c     02 34 66 F0 | 	shl	local08, #2
15020     04 4F 85 F1 | 	sub	fp, #260
15024     A7 36 02 F6 | 	mov	local09, fp
15028     A7 34 02 F1 | 	add	local08, fp
1502c     1A 13 02 FB | 	rdlong	arg01, local08
15030     00 14 06 F6 | 	mov	arg02, #0
15034     2C 4E 85 F1 | 	sub	fp, #44
15038     AC 68 B1 FD | 	call	#__system____builtin_atoi
1503c     22 FB 61 FC | 	wrlong	result1, local16
15040                 | LR__1724
15040                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
15040     52 00 00 FF 
15044     68 E5 05 F1 | 	add	objptr, ##42344
15048     F2 44 02 FB | 	rdlong	local16, objptr
1504c     52 00 00 FF 
15050     68 E5 85 F1 | 	sub	objptr, ##42344
15054     1D 44 0E F2 | 	cmp	local16, #29 wz
15058     38 00 90 5D |  if_ne	jmp	#LR__1725
1505c     1C 4E 05 F1 | 	add	fp, #28
15060     A7 44 02 FB | 	rdlong	local16, fp
15064     14 4F 05 F1 | 	add	fp, #276
15068     A7 32 02 FB | 	rdlong	local07, fp
1506c     19 35 02 F6 | 	mov	local08, local07
15070     02 34 66 F0 | 	shl	local08, #2
15074     04 4F 85 F1 | 	sub	fp, #260
15078     A7 36 02 F6 | 	mov	local09, fp
1507c     A7 34 02 F1 | 	add	local08, fp
15080     1A 13 02 FB | 	rdlong	arg01, local08
15084     00 14 06 F6 | 	mov	arg02, #0
15088     2C 4E 85 F1 | 	sub	fp, #44
1508c     58 68 B1 FD | 	call	#__system____builtin_atoi
15090     22 FB 61 FC | 	wrlong	result1, local16
15094                 | LR__1725
15094                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
15094     52 00 00 FF 
15098     68 E5 05 F1 | 	add	objptr, ##42344
1509c     F2 44 02 FB | 	rdlong	local16, objptr
150a0     52 00 00 FF 
150a4     68 E5 85 F1 | 	sub	objptr, ##42344
150a8     1E 44 0E F2 | 	cmp	local16, #30 wz
150ac     3C 00 90 5D |  if_ne	jmp	#LR__1726
150b0     30 4F 05 F1 | 	add	fp, #304
150b4     A7 32 02 FB | 	rdlong	local07, fp
150b8     02 32 66 F0 | 	shl	local07, #2
150bc     04 4F 85 F1 | 	sub	fp, #260
150c0     A7 34 02 F6 | 	mov	local08, fp
150c4     A7 32 02 F1 | 	add	local07, fp
150c8     19 13 02 FB | 	rdlong	arg01, local07
150cc     2C 4E 85 F1 | 	sub	fp, #44
150d0     AC 69 B1 FD | 	call	#__system____builtin_atof
150d4     28 4E 05 F1 | 	add	fp, #40
150d8     A7 FA 61 FC | 	wrlong	result1, fp
150dc     0C 4E 85 F1 | 	sub	fp, #12
150e0     A7 44 02 FB | 	rdlong	local16, fp
150e4     1C 4E 85 F1 | 	sub	fp, #28
150e8     22 FB 61 FC | 	wrlong	result1, local16
150ec                 | LR__1726
150ec                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
150ec     52 00 00 FF 
150f0     68 E5 05 F1 | 	add	objptr, ##42344
150f4     F2 44 02 FB | 	rdlong	local16, objptr
150f8     52 00 00 FF 
150fc     68 E5 85 F1 | 	sub	objptr, ##42344
15100     2B 44 0E F2 | 	cmp	local16, #43 wz
15104     18 00 90 5D |  if_ne	jmp	#LR__1727
15108     1C 4E 05 F1 | 	add	fp, #28
1510c     A7 12 02 FB | 	rdlong	arg01, fp
15110     0C 4E 85 F1 | 	sub	fp, #12
15114     A7 14 02 FB | 	rdlong	arg02, fp
15118     10 4E 85 F1 | 	sub	fp, #16
1511c     09 15 62 FC | 	wrlong	arg02, arg01
15120                 | LR__1727
15120     1C 4E 05 F1 | 	add	fp, #28
15124     A7 12 02 FB | 	rdlong	arg01, fp
15128     1C 4E 85 F1 | 	sub	fp, #28
1512c     08 12 06 F1 | 	add	arg01, #8
15130     52 00 00 FF 
15134     68 E5 05 F1 | 	add	objptr, ##42344
15138     F2 14 02 FB | 	rdlong	arg02, objptr
1513c     52 00 00 FF 
15140     68 E5 85 F1 | 	sub	objptr, ##42344
15144     09 15 62 FC | 	wrlong	arg02, arg01
15148                 | LR__1728
15148                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
15148     18 4E 05 F1 | 	add	fp, #24
1514c     A7 44 02 FB | 	rdlong	local16, fp
15150     18 4E 85 F1 | 	sub	fp, #24
15154     0C 44 0E F2 | 	cmp	local16, #12 wz
15158     94 01 90 5D |  if_ne	jmp	#LR__1733
1515c     1C 4E 05 F1 | 	add	fp, #28
15160     A7 32 02 FB | 	rdlong	local07, fp
15164     1C 4E 85 F1 | 	sub	fp, #28
15168     00 04 00 FF 
1516c     00 32 16 F2 | 	cmp	local07, ##524288 wc
15170     7C 01 90 CD |  if_b	jmp	#LR__1733
15174                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
15174     52 00 00 FF 
15178     68 E5 05 F1 | 	add	objptr, ##42344
1517c     F2 44 02 FB | 	rdlong	local16, objptr
15180     52 00 00 FF 
15184     68 E5 85 F1 | 	sub	objptr, ##42344
15188     1C 44 0E F2 | 	cmp	local16, #28 wz
1518c     40 00 90 5D |  if_ne	jmp	#LR__1729
15190     1C 4E 05 F1 | 	add	fp, #28
15194     A7 44 02 FB | 	rdlong	local16, fp
15198     14 4F 05 F1 | 	add	fp, #276
1519c     A7 32 02 FB | 	rdlong	local07, fp
151a0     19 35 02 F6 | 	mov	local08, local07
151a4     02 34 66 F0 | 	shl	local08, #2
151a8     04 4F 85 F1 | 	sub	fp, #260
151ac     A7 36 02 F6 | 	mov	local09, fp
151b0     A7 34 02 F1 | 	add	local08, fp
151b4     1A 13 02 FB | 	rdlong	arg01, local08
151b8     00 14 06 F6 | 	mov	arg02, #0
151bc     2C 4E 85 F1 | 	sub	fp, #44
151c0     24 67 B1 FD | 	call	#__system____builtin_atoi
151c4     FD 14 02 F6 | 	mov	arg02, result1
151c8     22 13 02 F6 | 	mov	arg01, local16
151cc     6C F9 B0 FD | 	call	#_pslpoke
151d0                 | LR__1729
151d0                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
151d0     52 00 00 FF 
151d4     68 E5 05 F1 | 	add	objptr, ##42344
151d8     F2 44 02 FB | 	rdlong	local16, objptr
151dc     52 00 00 FF 
151e0     68 E5 85 F1 | 	sub	objptr, ##42344
151e4     1D 44 0E F2 | 	cmp	local16, #29 wz
151e8     40 00 90 5D |  if_ne	jmp	#LR__1730
151ec     1C 4E 05 F1 | 	add	fp, #28
151f0     A7 44 02 FB | 	rdlong	local16, fp
151f4     14 4F 05 F1 | 	add	fp, #276
151f8     A7 32 02 FB | 	rdlong	local07, fp
151fc     19 35 02 F6 | 	mov	local08, local07
15200     02 34 66 F0 | 	shl	local08, #2
15204     04 4F 85 F1 | 	sub	fp, #260
15208     A7 36 02 F6 | 	mov	local09, fp
1520c     A7 34 02 F1 | 	add	local08, fp
15210     1A 13 02 FB | 	rdlong	arg01, local08
15214     00 14 06 F6 | 	mov	arg02, #0
15218     2C 4E 85 F1 | 	sub	fp, #44
1521c     C8 66 B1 FD | 	call	#__system____builtin_atoi
15220     FD 14 02 F6 | 	mov	arg02, result1
15224     22 13 02 F6 | 	mov	arg01, local16
15228     10 F9 B0 FD | 	call	#_pslpoke
1522c                 | LR__1730
1522c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1522c     52 00 00 FF 
15230     68 E5 05 F1 | 	add	objptr, ##42344
15234     F2 44 02 FB | 	rdlong	local16, objptr
15238     52 00 00 FF 
1523c     68 E5 85 F1 | 	sub	objptr, ##42344
15240     1E 44 0E F2 | 	cmp	local16, #30 wz
15244     4C 00 90 5D |  if_ne	jmp	#LR__1731
15248     30 4F 05 F1 | 	add	fp, #304
1524c     A7 32 02 FB | 	rdlong	local07, fp
15250     02 32 66 F0 | 	shl	local07, #2
15254     04 4F 85 F1 | 	sub	fp, #260
15258     A7 34 02 F6 | 	mov	local08, fp
1525c     A7 32 02 F1 | 	add	local07, fp
15260     19 13 02 FB | 	rdlong	arg01, local07
15264     2C 4E 85 F1 | 	sub	fp, #44
15268     14 68 B1 FD | 	call	#__system____builtin_atof
1526c     28 4E 05 F1 | 	add	fp, #40
15270     A7 FA 61 FC | 	wrlong	result1, fp
15274     0C 4E 85 F1 | 	sub	fp, #12
15278     A7 44 02 FB | 	rdlong	local16, fp
1527c     0C 4E 05 F1 | 	add	fp, #12
15280     A7 12 02 F6 | 	mov	arg01, fp
15284     28 4E 85 F1 | 	sub	fp, #40
15288     09 15 02 FB | 	rdlong	arg02, arg01
1528c     22 13 02 F6 | 	mov	arg01, local16
15290     A8 F8 B0 FD | 	call	#_pslpoke
15294                 | LR__1731
15294                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
15294     52 00 00 FF 
15298     68 E5 05 F1 | 	add	objptr, ##42344
1529c     F2 44 02 FB | 	rdlong	local16, objptr
152a0     52 00 00 FF 
152a4     68 E5 85 F1 | 	sub	objptr, ##42344
152a8     2B 44 0E F2 | 	cmp	local16, #43 wz
152ac     18 00 90 5D |  if_ne	jmp	#LR__1732
152b0     1C 4E 05 F1 | 	add	fp, #28
152b4     A7 12 02 FB | 	rdlong	arg01, fp
152b8     0C 4E 85 F1 | 	sub	fp, #12
152bc     A7 14 02 FB | 	rdlong	arg02, fp
152c0     10 4E 85 F1 | 	sub	fp, #16
152c4     74 F8 B0 FD | 	call	#_pslpoke
152c8                 | LR__1732
152c8     1C 4E 05 F1 | 	add	fp, #28
152cc     A7 12 02 FB | 	rdlong	arg01, fp
152d0     1C 4E 85 F1 | 	sub	fp, #28
152d4     08 12 06 F1 | 	add	arg01, #8
152d8     52 00 00 FF 
152dc     68 E5 05 F1 | 	add	objptr, ##42344
152e0     F2 14 02 FB | 	rdlong	arg02, objptr
152e4     52 00 00 FF 
152e8     68 E5 85 F1 | 	sub	objptr, ##42344
152ec     4C F8 B0 FD | 	call	#_pslpoke
152f0                 | LR__1733
152f0                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
152f0     18 4E 05 F1 | 	add	fp, #24
152f4     A7 44 02 FB | 	rdlong	local16, fp
152f8     18 4E 85 F1 | 	sub	fp, #24
152fc     05 44 0E F2 | 	cmp	local16, #5 wz
15300     52 00 00 AF 
15304     68 E5 05 A1 |  if_e	add	objptr, ##42344
15308     F2 42 02 AB |  if_e	rdlong	local15, objptr
1530c     52 00 00 AF 
15310     68 E5 85 A1 |  if_e	sub	objptr, ##42344
15314     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
15318     18 00 90 5D |  if_ne	jmp	#LR__1734
1531c     1C 4E 05 F1 | 	add	fp, #28
15320     A7 12 02 FB | 	rdlong	arg01, fp
15324     0C 4E 85 F1 | 	sub	fp, #12
15328     A7 14 02 FB | 	rdlong	arg02, fp
1532c     10 4E 85 F1 | 	sub	fp, #16
15330     08 F8 B0 FD | 	call	#_pslpoke
15334                 | LR__1734
15334                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
15334     18 4E 05 F1 | 	add	fp, #24
15338     A7 44 02 FB | 	rdlong	local16, fp
1533c     18 4E 85 F1 | 	sub	fp, #24
15340     04 44 0E F2 | 	cmp	local16, #4 wz
15344     54 00 90 5D |  if_ne	jmp	#LR__1735
15348     52 00 00 FF 
1534c     68 E5 05 F1 | 	add	objptr, ##42344
15350     F2 42 02 FB | 	rdlong	local15, objptr
15354     52 00 00 FF 
15358     68 E5 85 F1 | 	sub	objptr, ##42344
1535c     2B 42 0E F2 | 	cmp	local15, #43 wz
15360     38 00 90 AD |  if_e	jmp	#LR__1735
15364     1C 4E 05 F1 | 	add	fp, #28
15368     A7 44 02 FB | 	rdlong	local16, fp
1536c     14 4F 05 F1 | 	add	fp, #276
15370     A7 34 02 FB | 	rdlong	local08, fp
15374     02 34 66 F0 | 	shl	local08, #2
15378     04 4F 85 F1 | 	sub	fp, #260
1537c     A7 34 02 F1 | 	add	local08, fp
15380     1A 13 02 FB | 	rdlong	arg01, local08
15384     00 14 06 F6 | 	mov	arg02, #0
15388     2C 4E 85 F1 | 	sub	fp, #44
1538c     58 65 B1 FD | 	call	#__system____builtin_atoi
15390     FD 14 02 F6 | 	mov	arg02, result1
15394     22 13 02 F6 | 	mov	arg01, local16
15398     A0 F7 B0 FD | 	call	#_pslpoke
1539c                 | LR__1735
1539c                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1539c     18 4E 05 F1 | 	add	fp, #24
153a0     A7 44 02 FB | 	rdlong	local16, fp
153a4     18 4E 85 F1 | 	sub	fp, #24
153a8     02 44 0E F2 | 	cmp	local16, #2 wz
153ac     54 00 90 5D |  if_ne	jmp	#LR__1736
153b0     52 00 00 FF 
153b4     68 E5 05 F1 | 	add	objptr, ##42344
153b8     F2 42 02 FB | 	rdlong	local15, objptr
153bc     52 00 00 FF 
153c0     68 E5 85 F1 | 	sub	objptr, ##42344
153c4     2B 42 0E F2 | 	cmp	local15, #43 wz
153c8     38 00 90 AD |  if_e	jmp	#LR__1736
153cc     1C 4E 05 F1 | 	add	fp, #28
153d0     A7 44 02 FB | 	rdlong	local16, fp
153d4     14 4F 05 F1 | 	add	fp, #276
153d8     A7 34 02 FB | 	rdlong	local08, fp
153dc     02 34 66 F0 | 	shl	local08, #2
153e0     04 4F 85 F1 | 	sub	fp, #260
153e4     A7 34 02 F1 | 	add	local08, fp
153e8     1A 13 02 FB | 	rdlong	arg01, local08
153ec     00 14 06 F6 | 	mov	arg02, #0
153f0     2C 4E 85 F1 | 	sub	fp, #44
153f4     F0 64 B1 FD | 	call	#__system____builtin_atoi
153f8     FD 14 02 F6 | 	mov	arg02, result1
153fc     22 13 02 F6 | 	mov	arg01, local16
15400     80 F7 B0 FD | 	call	#_psdpoke
15404                 | LR__1736
15404                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
15404     18 4E 05 F1 | 	add	fp, #24
15408     A7 44 02 FB | 	rdlong	local16, fp
1540c     18 4E 85 F1 | 	sub	fp, #24
15410     01 44 0E F2 | 	cmp	local16, #1 wz
15414     54 00 90 5D |  if_ne	jmp	#LR__1737
15418     52 00 00 FF 
1541c     68 E5 05 F1 | 	add	objptr, ##42344
15420     F2 42 02 FB | 	rdlong	local15, objptr
15424     52 00 00 FF 
15428     68 E5 85 F1 | 	sub	objptr, ##42344
1542c     2B 42 0E F2 | 	cmp	local15, #43 wz
15430     38 00 90 AD |  if_e	jmp	#LR__1737
15434     1C 4E 05 F1 | 	add	fp, #28
15438     A7 44 02 FB | 	rdlong	local16, fp
1543c     14 4F 05 F1 | 	add	fp, #276
15440     A7 34 02 FB | 	rdlong	local08, fp
15444     02 34 66 F0 | 	shl	local08, #2
15448     04 4F 85 F1 | 	sub	fp, #260
1544c     A7 34 02 F1 | 	add	local08, fp
15450     1A 13 02 FB | 	rdlong	arg01, local08
15454     00 14 06 F6 | 	mov	arg02, #0
15458     2C 4E 85 F1 | 	sub	fp, #44
1545c     88 64 B1 FD | 	call	#__system____builtin_atoi
15460     FD 14 02 F6 | 	mov	arg02, result1
15464     22 13 02 F6 | 	mov	arg01, local16
15468     60 F7 B0 FD | 	call	#_pspoke
1546c                 | LR__1737
1546c                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1546c     18 4E 05 F1 | 	add	fp, #24
15470     A7 44 02 FB | 	rdlong	local16, fp
15474     18 4E 85 F1 | 	sub	fp, #24
15478     06 44 0E F2 | 	cmp	local16, #6 wz
1547c     64 00 90 5D |  if_ne	jmp	#LR__1738
15480     52 00 00 FF 
15484     68 E5 05 F1 | 	add	objptr, ##42344
15488     F2 42 02 FB | 	rdlong	local15, objptr
1548c     52 00 00 FF 
15490     68 E5 85 F1 | 	sub	objptr, ##42344
15494     2B 42 0E F2 | 	cmp	local15, #43 wz
15498     48 00 90 AD |  if_e	jmp	#LR__1738
1549c     30 4F 05 F1 | 	add	fp, #304
154a0     A7 32 02 FB | 	rdlong	local07, fp
154a4     02 32 66 F0 | 	shl	local07, #2
154a8     04 4F 85 F1 | 	sub	fp, #260
154ac     A7 32 02 F1 | 	add	local07, fp
154b0     19 13 02 FB | 	rdlong	arg01, local07
154b4     2C 4E 85 F1 | 	sub	fp, #44
154b8     C4 65 B1 FD | 	call	#__system____builtin_atof
154bc     28 4E 05 F1 | 	add	fp, #40
154c0     A7 FA 61 FC | 	wrlong	result1, fp
154c4     0C 4E 85 F1 | 	sub	fp, #12
154c8     A7 44 02 FB | 	rdlong	local16, fp
154cc     0C 4E 05 F1 | 	add	fp, #12
154d0     A7 12 02 F6 | 	mov	arg01, fp
154d4     28 4E 85 F1 | 	sub	fp, #40
154d8     09 15 02 FB | 	rdlong	arg02, arg01
154dc     22 13 02 F6 | 	mov	arg01, local16
154e0     58 F6 B0 FD | 	call	#_pslpoke
154e4                 | LR__1738
154e4     30 4F 05 F1 | 	add	fp, #304
154e8     A7 42 02 FB | 	rdlong	local15, fp
154ec     01 42 06 F1 | 	add	local15, #1
154f0     A7 42 62 FC | 	wrlong	local15, fp
154f4     30 4F 85 F1 | 	sub	fp, #304
154f8     E4 F6 9F FD | 	jmp	#LR__1703
154fc                 | LR__1739
154fc                 | LR__1740
154fc     A7 F0 03 F6 | 	mov	ptra, fp
15500     B2 00 A0 FD | 	call	#popregs_
15504                 | _do_input_ret
15504     2D 00 64 FD | 	ret
15508                 | 
15508                 | ' 
15508                 | ' ' ----------------  left$
15508                 | ' 
15508                 | ' sub do_left
15508                 | _do_left
15508     00 4A 05 F6 | 	mov	COUNT_, #0
1550c     A8 00 A0 FD | 	call	#pushregs_
15510     14 F0 07 F1 | 	add	ptra, #20
15514     4A 00 00 FF 
15518     A0 E4 05 F1 | 	add	objptr, ##38048
1551c     F2 16 02 FB | 	rdlong	arg03, objptr
15520     0B 15 02 F6 | 	mov	arg02, arg03
15524     01 14 66 F0 | 	shl	arg02, #1
15528     0B 15 02 F1 | 	add	arg02, arg03
1552c     02 14 66 F0 | 	shl	arg02, #2
15530     03 00 00 FF 
15534     04 E4 85 F1 | 	sub	objptr, ##1540
15538     F2 14 02 F1 | 	add	arg02, objptr
1553c     0A 17 02 FB | 	rdlong	arg03, arg02
15540     0C 4E 05 F1 | 	add	fp, #12
15544     A7 16 62 FC | 	wrlong	arg03, fp
15548                 | ' 
15548                 | ' numpar=compiledline(lineptr_e).result.uresult
15548                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
15548     0C 4E 85 F1 | 	sub	fp, #12
1554c     02 16 0E F2 | 	cmp	arg03, #2 wz
15550     47 00 00 FF 
15554     9C E4 85 F1 | 	sub	objptr, ##36508
15558     40 00 90 AD |  if_e	jmp	#LR__1750
1555c     00 12 06 F6 | 	mov	arg01, #0
15560     40 8B B1 FD | 	call	#__system___getiolock_0625
15564     FD 12 02 F6 | 	mov	arg01, result1
15568     88 2E B1 FD | 	call	#__system___lockmem
1556c     C4 01 00 FF 
15570     EE 15 06 F6 | 	mov	arg02, ##@LR__6106
15574     00 12 06 F6 | 	mov	arg01, #0
15578     00 16 06 F6 | 	mov	arg03, #0
1557c     6C 3B B1 FD | 	call	#__system___basic_print_string
15580     00 12 06 F6 | 	mov	arg01, #0
15584     1C 8B B1 FD | 	call	#__system___getiolock_0625
15588     FD 00 68 FC | 	wrlong	#0, result1
1558c     27 12 06 F6 | 	mov	arg01, #39
15590     00 14 06 F6 | 	mov	arg02, #0
15594     04 F4 B0 FD | 	call	#_printerror
15598     EC 00 90 FD | 	jmp	#LR__1753
1559c                 | LR__1750
1559c     14 83 BF FD | 	call	#_pop
155a0     FF 16 02 F6 | 	mov	arg03, result3
155a4     A7 FA 61 FC | 	wrlong	result1, fp
155a8     04 4E 05 F1 | 	add	fp, #4
155ac     A7 FC 61 FC | 	wrlong	result2, fp
155b0     04 4E 05 F1 | 	add	fp, #4
155b4     A7 16 62 FC | 	wrlong	arg03, fp
155b8     08 4E 85 F1 | 	sub	fp, #8
155bc     A7 12 02 F6 | 	mov	arg01, fp
155c0     D4 84 BF FD | 	call	#_converttoint
155c4     FD 16 02 F6 | 	mov	arg03, result1
155c8     10 4E 05 F1 | 	add	fp, #16
155cc     A7 16 62 FC | 	wrlong	arg03, fp
155d0     10 4E 85 F1 | 	sub	fp, #16
155d4     DC 82 BF FD | 	call	#_pop
155d8     FF 16 02 F6 | 	mov	arg03, result3
155dc     A7 FA 61 FC | 	wrlong	result1, fp
155e0     04 4E 05 F1 | 	add	fp, #4
155e4     A7 FC 61 FC | 	wrlong	result2, fp
155e8     04 4E 05 F1 | 	add	fp, #4
155ec     A7 16 62 FC | 	wrlong	arg03, fp
155f0                 | ' t1=pop() : arg=converttoint(t1)
155f0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
155f0     08 4E 85 F1 | 	sub	fp, #8
155f4     2B 16 0E F2 | 	cmp	arg03, #43 wz
155f8     18 00 90 5D |  if_ne	jmp	#LR__1751
155fc     A7 12 02 FB | 	rdlong	arg01, fp
15600     28 84 BF FD | 	call	#_convertstring
15604     A7 FA 61 FC | 	wrlong	result1, fp
15608     08 4E 05 F1 | 	add	fp, #8
1560c     A7 3E 68 FC | 	wrlong	#31, fp
15610     08 4E 85 F1 | 	sub	fp, #8
15614                 | LR__1751
15614                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
15614     08 4E 05 F1 | 	add	fp, #8
15618     A7 16 02 FB | 	rdlong	arg03, fp
1561c     08 4E 85 F1 | 	sub	fp, #8
15620     1F 16 0E F2 | 	cmp	arg03, #31 wz
15624     40 00 90 AD |  if_e	jmp	#LR__1752
15628     00 12 06 F6 | 	mov	arg01, #0
1562c     74 8A B1 FD | 	call	#__system___getiolock_0625
15630     FD 12 02 F6 | 	mov	arg01, result1
15634     BC 2D B1 FD | 	call	#__system___lockmem
15638     C4 01 00 FF 
1563c     F6 15 06 F6 | 	mov	arg02, ##@LR__6107
15640     00 12 06 F6 | 	mov	arg01, #0
15644     00 16 06 F6 | 	mov	arg03, #0
15648     A0 3A B1 FD | 	call	#__system___basic_print_string
1564c     00 12 06 F6 | 	mov	arg01, #0
15650     50 8A B1 FD | 	call	#__system___getiolock_0625
15654     FD 00 68 FC | 	wrlong	#0, result1
15658     0F 12 06 F6 | 	mov	arg01, #15
1565c     00 14 06 F6 | 	mov	arg02, #0
15660     38 F3 B0 FD | 	call	#_printerror
15664     20 00 90 FD | 	jmp	#LR__1753
15668                 | LR__1752
15668     A7 12 02 FB | 	rdlong	arg01, fp
1566c     10 4E 05 F1 | 	add	fp, #16
15670     A7 14 02 FB | 	rdlong	arg02, fp
15674     10 4E 85 F1 | 	sub	fp, #16
15678     F8 4D B1 FD | 	call	#__system__Left_S
1567c     A7 FA 61 FC | 	wrlong	result1, fp
15680     A7 12 02 F6 | 	mov	arg01, fp
15684     C4 82 BF FD | 	call	#_push
15688                 | LR__1753
15688     A7 F0 03 F6 | 	mov	ptra, fp
1568c     B2 00 A0 FD | 	call	#popregs_
15690                 | _do_left_ret
15690     2D 00 64 FD | 	ret
15694                 | 
15694                 | ' 
15694                 | ' ' ----------------  len
15694                 | ' 
15694                 | ' sub do_len
15694                 | _do_len
15694     02 4A 05 F6 | 	mov	COUNT_, #2
15698     A8 00 A0 FD | 	call	#pushregs_
1569c     14 F0 07 F1 | 	add	ptra, #20
156a0     4A 00 00 FF 
156a4     A0 E4 05 F1 | 	add	objptr, ##38048
156a8     F2 26 02 FB | 	rdlong	local01, objptr
156ac     13 17 02 F6 | 	mov	arg03, local01
156b0     01 16 66 F0 | 	shl	arg03, #1
156b4     13 17 02 F1 | 	add	arg03, local01
156b8     02 16 66 F0 | 	shl	arg03, #2
156bc     03 00 00 FF 
156c0     04 E4 85 F1 | 	sub	objptr, ##1540
156c4     F2 16 02 F1 | 	add	arg03, objptr
156c8     0B 17 02 FB | 	rdlong	arg03, arg03
156cc     0C 4E 05 F1 | 	add	fp, #12
156d0     A7 16 62 FC | 	wrlong	arg03, fp
156d4                 | ' 
156d4                 | ' numpar=compiledline(lineptr_e).result.uresult
156d4                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
156d4     0C 4E 85 F1 | 	sub	fp, #12
156d8     02 16 16 F2 | 	cmp	arg03, #2 wc
156dc     47 00 00 FF 
156e0     9C E4 85 F1 | 	sub	objptr, ##36508
156e4     0C 4E 05 C1 |  if_b	add	fp, #12
156e8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
156ec     0C 4E 85 C1 |  if_b	sub	fp, #12
156f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1760
156f4     00 12 06 F6 | 	mov	arg01, #0
156f8     A8 89 B1 FD | 	call	#__system___getiolock_0625
156fc     FD 12 02 F6 | 	mov	arg01, result1
15700     F0 2C B1 FD | 	call	#__system___lockmem
15704     C4 01 00 FF 
15708     FE 15 06 F6 | 	mov	arg02, ##@LR__6108
1570c     00 12 06 F6 | 	mov	arg01, #0
15710     00 16 06 F6 | 	mov	arg03, #0
15714     D4 39 B1 FD | 	call	#__system___basic_print_string
15718     00 12 06 F6 | 	mov	arg01, #0
1571c     84 89 B1 FD | 	call	#__system___getiolock_0625
15720     FD 00 68 FC | 	wrlong	#0, result1
15724     27 12 06 F6 | 	mov	arg01, #39
15728     00 14 06 F6 | 	mov	arg02, #0
1572c     6C F2 B0 FD | 	call	#_printerror
15730     C8 00 90 FD | 	jmp	#LR__1765
15734                 | LR__1760
15734     7C 81 BF FD | 	call	#_pop
15738     FF 16 02 F6 | 	mov	arg03, result3
1573c     A7 FA 61 FC | 	wrlong	result1, fp
15740     04 4E 05 F1 | 	add	fp, #4
15744     A7 FC 61 FC | 	wrlong	result2, fp
15748     04 4E 05 F1 | 	add	fp, #4
1574c     A7 16 62 FC | 	wrlong	arg03, fp
15750                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15750     08 4E 85 F1 | 	sub	fp, #8
15754     2B 16 0E F2 | 	cmp	arg03, #43 wz
15758     18 00 90 5D |  if_ne	jmp	#LR__1761
1575c     A7 12 02 FB | 	rdlong	arg01, fp
15760     C8 82 BF FD | 	call	#_convertstring
15764     A7 FA 61 FC | 	wrlong	result1, fp
15768     08 4E 05 F1 | 	add	fp, #8
1576c     A7 3E 68 FC | 	wrlong	#31, fp
15770     08 4E 85 F1 | 	sub	fp, #8
15774                 | LR__1761
15774                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
15774     08 4E 05 F1 | 	add	fp, #8
15778     A7 16 02 FB | 	rdlong	arg03, fp
1577c     08 4E 85 F1 | 	sub	fp, #8
15780     1F 16 0E F2 | 	cmp	arg03, #31 wz
15784     40 00 90 AD |  if_e	jmp	#LR__1762
15788     00 12 06 F6 | 	mov	arg01, #0
1578c     14 89 B1 FD | 	call	#__system___getiolock_0625
15790     FD 12 02 F6 | 	mov	arg01, result1
15794     5C 2C B1 FD | 	call	#__system___lockmem
15798     C5 01 00 FF 
1579c     04 14 06 F6 | 	mov	arg02, ##@LR__6109
157a0     00 12 06 F6 | 	mov	arg01, #0
157a4     00 16 06 F6 | 	mov	arg03, #0
157a8     40 39 B1 FD | 	call	#__system___basic_print_string
157ac     00 12 06 F6 | 	mov	arg01, #0
157b0     F0 88 B1 FD | 	call	#__system___getiolock_0625
157b4     FD 00 68 FC | 	wrlong	#0, result1
157b8     0F 12 06 F6 | 	mov	arg01, #15
157bc     00 14 06 F6 | 	mov	arg02, #0
157c0     D8 F1 B0 FD | 	call	#_printerror
157c4     34 00 90 FD | 	jmp	#LR__1765
157c8                 | LR__1762
157c8     A7 12 02 FB | 	rdlong	arg01, fp
157cc     09 29 02 F6 | 	mov	local02, arg01
157d0     97 06 48 FB | 	callpa	#(@LR__1764-@LR__1763)>>2,fcache_load_ptr_
157d4                 | LR__1763
157d4     14 FB C9 FA | 	rdbyte	result1, local02 wz
157d8     01 28 06 51 |  if_ne	add	local02, #1
157dc     F4 FF 9F 5D |  if_ne	jmp	#LR__1763
157e0                 | LR__1764
157e0     09 29 82 F1 | 	sub	local02, arg01
157e4     A7 28 62 FC | 	wrlong	local02, fp
157e8     08 4E 05 F1 | 	add	fp, #8
157ec     A7 38 68 FC | 	wrlong	#28, fp
157f0     08 4E 85 F1 | 	sub	fp, #8
157f4     A7 12 02 F6 | 	mov	arg01, fp
157f8     50 81 BF FD | 	call	#_push
157fc                 | LR__1765
157fc     A7 F0 03 F6 | 	mov	ptra, fp
15800     B2 00 A0 FD | 	call	#popregs_
15804                 | _do_len_ret
15804     2D 00 64 FD | 	ret
15808                 | 
15808                 | ' 
15808                 | ' ' ----------------  list
15808                 | ' 
15808                 | ' sub do_list
15808                 | _do_list
15808     02 4A 05 F6 | 	mov	COUNT_, #2
1580c     A8 00 A0 FD | 	call	#pushregs_
15810     B8 F0 07 F1 | 	add	ptra, #184
15814     04 4E 05 F1 | 	add	fp, #4
15818     A7 00 68 FC | 	wrlong	#0, fp
1581c     04 4E 05 F1 | 	add	fp, #4
15820     FF FF BF FF 
15824     A7 FE 6B FC | 	wrlong	##2147483647, fp
15828     08 4E 85 F1 | 	sub	fp, #8
1582c     4A 00 00 FF 
15830     A0 E4 05 F1 | 	add	objptr, ##38048
15834     F2 26 02 FB | 	rdlong	local01, objptr
15838     13 17 02 F6 | 	mov	arg03, local01
1583c     01 16 66 F0 | 	shl	arg03, #1
15840     13 17 02 F1 | 	add	arg03, local01
15844     02 16 66 F0 | 	shl	arg03, #2
15848     03 00 00 FF 
1584c     04 E4 85 F1 | 	sub	objptr, ##1540
15850     F2 16 02 F1 | 	add	arg03, objptr
15854     0B 17 02 FB | 	rdlong	arg03, arg03
15858     A7 16 62 FC | 	wrlong	arg03, fp
1585c                 | ' 
1585c                 | ' startline=0 : endline=$7FFFFFFF
1585c                 | ' numpar=compiledline(lineptr_e).result.uresult
1585c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
1585c     01 16 0E F2 | 	cmp	arg03, #1 wz
15860     47 00 00 FF 
15864     9C E4 85 F1 | 	sub	objptr, ##36508
15868     3C 00 90 5D |  if_ne	jmp	#LR__1770
1586c     44 80 BF FD | 	call	#_pop
15870     FF 26 02 F6 | 	mov	local01, result3
15874     0C 4E 05 F1 | 	add	fp, #12
15878     A7 FA 61 FC | 	wrlong	result1, fp
1587c     04 4E 05 F1 | 	add	fp, #4
15880     A7 FC 61 FC | 	wrlong	result2, fp
15884     04 4E 05 F1 | 	add	fp, #4
15888     A7 26 62 FC | 	wrlong	local01, fp
1588c     08 4E 85 F1 | 	sub	fp, #8
15890     A7 12 02 F6 | 	mov	arg01, fp
15894     0C 4E 85 F1 | 	sub	fp, #12
15898     FC 81 BF FD | 	call	#_converttoint
1589c     04 4E 05 F1 | 	add	fp, #4
158a0     A7 FA 61 FC | 	wrlong	result1, fp
158a4     04 4E 85 F1 | 	sub	fp, #4
158a8                 | LR__1770
158a8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
158a8     A7 16 02 FB | 	rdlong	arg03, fp
158ac     02 16 0E F2 | 	cmp	arg03, #2 wz
158b0     7C 00 90 5D |  if_ne	jmp	#LR__1771
158b4     FC 7F BF FD | 	call	#_pop
158b8     FF 26 02 F6 | 	mov	local01, result3
158bc     0C 4E 05 F1 | 	add	fp, #12
158c0     A7 FA 61 FC | 	wrlong	result1, fp
158c4     04 4E 05 F1 | 	add	fp, #4
158c8     A7 FC 61 FC | 	wrlong	result2, fp
158cc     04 4E 05 F1 | 	add	fp, #4
158d0     A7 26 62 FC | 	wrlong	local01, fp
158d4     08 4E 85 F1 | 	sub	fp, #8
158d8     A7 12 02 F6 | 	mov	arg01, fp
158dc     0C 4E 85 F1 | 	sub	fp, #12
158e0     B4 81 BF FD | 	call	#_converttoint
158e4     FD 26 02 F6 | 	mov	local01, result1
158e8     08 4E 05 F1 | 	add	fp, #8
158ec     A7 26 62 FC | 	wrlong	local01, fp
158f0     08 4E 85 F1 | 	sub	fp, #8
158f4     BC 7F BF FD | 	call	#_pop
158f8     FF 26 02 F6 | 	mov	local01, result3
158fc     0C 4E 05 F1 | 	add	fp, #12
15900     A7 FA 61 FC | 	wrlong	result1, fp
15904     04 4E 05 F1 | 	add	fp, #4
15908     A7 FC 61 FC | 	wrlong	result2, fp
1590c     04 4E 05 F1 | 	add	fp, #4
15910     A7 26 62 FC | 	wrlong	local01, fp
15914     08 4E 85 F1 | 	sub	fp, #8
15918     A7 12 02 F6 | 	mov	arg01, fp
1591c     0C 4E 85 F1 | 	sub	fp, #12
15920     74 81 BF FD | 	call	#_converttoint
15924     04 4E 05 F1 | 	add	fp, #4
15928     A7 FA 61 FC | 	wrlong	result1, fp
1592c     04 4E 85 F1 | 	sub	fp, #4
15930                 | LR__1771
15930                 | ' 
15930                 | ' 
15930                 | ' print
15930     00 12 06 F6 | 	mov	arg01, #0
15934     6C 87 B1 FD | 	call	#__system___getiolock_0625
15938     FD 12 02 F6 | 	mov	arg01, result1
1593c     B4 2A B1 FD | 	call	#__system___lockmem
15940     00 12 06 F6 | 	mov	arg01, #0
15944     0A 14 06 F6 | 	mov	arg02, #10
15948     00 16 06 F6 | 	mov	arg03, #0
1594c     44 37 B1 FD | 	call	#__system___basic_print_char
15950     00 12 06 F6 | 	mov	arg01, #0
15954     4C 87 B1 FD | 	call	#__system___getiolock_0625
15958     FD 00 68 FC | 	wrlong	#0, result1
1595c     4A 00 00 FF 
15960     A8 E4 05 F1 | 	add	objptr, ##38056
15964     F2 28 02 FB | 	rdlong	local02, objptr
15968     08 00 00 FF 
1596c     CC E4 05 F1 | 	add	objptr, ##4300
15970     F2 28 62 FC | 	wrlong	local02, objptr
15974     52 00 00 FF 
15978     74 E5 85 F1 | 	sub	objptr, ##42356
1597c                 | ' do 
1597c                 | LR__1772
1597c     20 4E 05 F1 | 	add	fp, #32
15980     A7 12 02 F6 | 	mov	arg01, fp
15984     20 4E 85 F1 | 	sub	fp, #32
15988     52 00 00 FF 
1598c     74 E5 05 F1 | 	add	objptr, ##42356
15990     F2 14 02 FB | 	rdlong	arg02, objptr
15994     18 16 06 F6 | 	mov	arg03, #24
15998     47 00 00 FF 
1599c     A8 E4 85 F1 | 	sub	objptr, ##36520
159a0     AC 1D B1 FD | 	call	#_psram_spin2_read1
159a4     0B 00 00 FF 
159a8     CC E4 85 F1 | 	sub	objptr, ##5836
159ac                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
159ac                 | '   
159ac                 | '   if header(0)<> $FFFFFFFF then
159ac     20 4E 05 F1 | 	add	fp, #32
159b0     A7 28 02 FB | 	rdlong	local02, fp
159b4     20 4E 85 F1 | 	sub	fp, #32
159b8     FF FF 7F FF 
159bc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
159c0     A8 00 90 AD |  if_e	jmp	#LR__1774
159c4     38 4E 05 F1 | 	add	fp, #56
159c8     3F 16 06 F6 | 	mov	arg03, #63
159cc     28 16 62 FD | 	setq	arg03
159d0     A7 00 68 FC | 	wrlong	#0, fp
159d4     A7 12 02 F6 | 	mov	arg01, fp
159d8     10 4E 85 F1 | 	sub	fp, #16
159dc     A7 14 02 FB | 	rdlong	arg02, fp
159e0     04 4E 05 F1 | 	add	fp, #4
159e4     A7 16 02 FB | 	rdlong	arg03, fp
159e8     2C 4E 85 F1 | 	sub	fp, #44
159ec     0B 00 00 FF 
159f0     CC E4 05 F1 | 	add	objptr, ##5836
159f4     58 1D B1 FD | 	call	#_psram_spin2_read1
159f8     0B 00 00 FF 
159fc     CC E4 85 F1 | 	sub	objptr, ##5836
15a00                 | '     longfill(linebuf,0,64)
15a00                 | '     psram.read1(varptr(linebuf),header(2),header(3))
15a00                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
15a00     20 4E 05 F1 | 	add	fp, #32
15a04     A7 28 02 FB | 	rdlong	local02, fp
15a08     1C 4E 85 F1 | 	sub	fp, #28
15a0c     A7 26 02 FB | 	rdlong	local01, fp
15a10     04 4E 85 F1 | 	sub	fp, #4
15a14     13 29 52 F2 | 	cmps	local02, local01 wc
15a18     30 00 90 CD |  if_b	jmp	#LR__1773
15a1c     20 4E 05 F1 | 	add	fp, #32
15a20     A7 28 02 FB | 	rdlong	local02, fp
15a24     18 4E 85 F1 | 	sub	fp, #24
15a28     A7 16 02 FB | 	rdlong	arg03, fp
15a2c     08 4E 85 F1 | 	sub	fp, #8
15a30     0B 29 5A F2 | 	cmps	local02, arg03 wcz
15a34     14 00 90 1D |  if_a	jmp	#LR__1773
15a38     38 4E 05 F1 | 	add	fp, #56
15a3c     A7 12 02 F6 | 	mov	arg01, fp
15a40     38 4E 85 F1 | 	sub	fp, #56
15a44                 | ' 
15a44                 | ' write(text)
15a44     10 11 B1 FD | 	call	#_hg010b_spin2_write
15a48                 | ' crlf
15a48     AC 15 B1 FD | 	call	#_hg010b_spin2_crlf
15a4c                 | LR__1773
15a4c     34 4E 05 F1 | 	add	fp, #52
15a50     A7 28 02 FB | 	rdlong	local02, fp
15a54     34 4E 85 F1 | 	sub	fp, #52
15a58     52 00 00 FF 
15a5c     74 E5 05 F1 | 	add	objptr, ##42356
15a60     F2 28 62 FC | 	wrlong	local02, objptr
15a64     52 00 00 FF 
15a68     74 E5 85 F1 | 	sub	objptr, ##42356
15a6c                 | LR__1774
15a6c     34 4E 05 F1 | 	add	fp, #52
15a70     A7 28 02 FB | 	rdlong	local02, fp
15a74     34 4E 85 F1 | 	sub	fp, #52
15a78     FF FF 3F FF 
15a7c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
15a80     20 4E 05 51 |  if_ne	add	fp, #32
15a84     A7 26 02 5B |  if_ne	rdlong	local01, fp
15a88     20 4E 85 51 |  if_ne	sub	fp, #32
15a8c     FF FF 7F 5F 
15a90     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
15a94     E4 FE 9F 5D |  if_ne	jmp	#LR__1772
15a98     A7 F0 03 F6 | 	mov	ptra, fp
15a9c     B2 00 A0 FD | 	call	#popregs_
15aa0                 | _do_list_ret
15aa0     2D 00 64 FD | 	ret
15aa4                 | 
15aa4                 | ' 
15aa4                 | ' '-------------------- load
15aa4                 | ' 
15aa4                 | ' sub do_load(amode=0 as integer)  
15aa4                 | _do_load
15aa4     01 4A 05 F6 | 	mov	COUNT_, #1
15aa8     A8 00 A0 FD | 	call	#pushregs_
15aac     AC F0 07 F1 | 	add	ptra, #172
15ab0     A7 12 62 FC | 	wrlong	arg01, fp
15ab4     52 00 00 FF 
15ab8     2C E5 05 F1 | 	add	objptr, ##42284
15abc     F2 02 68 FC | 	wrlong	#1, objptr
15ac0     08 00 00 FF 
15ac4     8C E4 85 F1 | 	sub	objptr, ##4236
15ac8     F2 14 02 FB | 	rdlong	arg02, objptr
15acc     0A 13 02 F6 | 	mov	arg01, arg02
15ad0     01 12 66 F0 | 	shl	arg01, #1
15ad4     0A 13 02 F1 | 	add	arg01, arg02
15ad8     02 12 66 F0 | 	shl	arg01, #2
15adc     03 00 00 FF 
15ae0     04 E4 85 F1 | 	sub	objptr, ##1540
15ae4     F2 12 02 F1 | 	add	arg01, objptr
15ae8     09 15 02 FB | 	rdlong	arg02, arg01
15aec     1C 4E 05 F1 | 	add	fp, #28
15af0     A7 14 62 FC | 	wrlong	arg02, fp
15af4     8C 4E 05 F1 | 	add	fp, #140
15af8     A7 12 02 F6 | 	mov	arg01, fp
15afc     47 00 00 FF 
15b00     9C E4 85 F1 | 	sub	objptr, ##36508
15b04     80 4E 85 F1 | 	sub	fp, #128
15b08     09 4F 61 FC | 	wrlong	fp, arg01
15b0c                 | ' 
15b0c                 | ' inload=1
15b0c                 | ' numpar=compiledline(lineptr_e).result.uresult
15b0c                 | ' lpoke varptr(line2$),varptr(line2)
15b0c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
15b0c     0C 4E 85 F1 | 	sub	fp, #12
15b10     A7 26 02 FB | 	rdlong	local01, fp
15b14     1C 4E 85 F1 | 	sub	fp, #28
15b18     01 26 56 F2 | 	cmps	local01, #1 wc
15b1c     24 00 90 CD |  if_b	jmp	#LR__1780
15b20     90 7D BF FD | 	call	#_pop
15b24     04 4E 05 F1 | 	add	fp, #4
15b28     A7 FA 61 FC | 	wrlong	result1, fp
15b2c     04 4E 05 F1 | 	add	fp, #4
15b30     A7 FC 61 FC | 	wrlong	result2, fp
15b34     04 4E 05 F1 | 	add	fp, #4
15b38     A7 FE 61 FC | 	wrlong	result3, fp
15b3c     0C 4E 85 F1 | 	sub	fp, #12
15b40     28 00 90 FD | 	jmp	#LR__1781
15b44                 | LR__1780
15b44     52 00 00 FF 
15b48     1C E5 05 F1 | 	add	objptr, ##42268
15b4c     F2 26 02 FB | 	rdlong	local01, objptr
15b50     52 00 00 FF 
15b54     1C E5 85 F1 | 	sub	objptr, ##42268
15b58     04 4E 05 F1 | 	add	fp, #4
15b5c     A7 26 62 FC | 	wrlong	local01, fp
15b60     08 4E 05 F1 | 	add	fp, #8
15b64     A7 3E 68 FC | 	wrlong	#31, fp
15b68     0C 4E 85 F1 | 	sub	fp, #12
15b6c                 | LR__1781
15b6c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
15b6c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
15b6c     0C 4E 05 F1 | 	add	fp, #12
15b70     A7 26 02 FB | 	rdlong	local01, fp
15b74     0C 4E 85 F1 | 	sub	fp, #12
15b78     2B 26 0E F2 | 	cmp	local01, #43 wz
15b7c     24 00 90 5D |  if_ne	jmp	#LR__1782
15b80     04 4E 05 F1 | 	add	fp, #4
15b84     A7 12 02 FB | 	rdlong	arg01, fp
15b88     04 4E 85 F1 | 	sub	fp, #4
15b8c     9C 7E BF FD | 	call	#_convertstring
15b90     04 4E 05 F1 | 	add	fp, #4
15b94     A7 FA 61 FC | 	wrlong	result1, fp
15b98     08 4E 05 F1 | 	add	fp, #8
15b9c     A7 3E 68 FC | 	wrlong	#31, fp
15ba0     0C 4E 85 F1 | 	sub	fp, #12
15ba4                 | LR__1782
15ba4                 | ' if t1.result_type=result_string then
15ba4     0C 4E 05 F1 | 	add	fp, #12
15ba8     A7 26 02 FB | 	rdlong	local01, fp
15bac     0C 4E 85 F1 | 	sub	fp, #12
15bb0     1F 26 0E F2 | 	cmp	local01, #31 wz
15bb4     E8 02 90 5D |  if_ne	jmp	#LR__1788
15bb8                 | '   if amode<>1234 then do_new
15bb8     A7 26 02 FB | 	rdlong	local01, fp
15bbc     02 00 00 FF 
15bc0     D2 26 0E F2 | 	cmp	local01, ##1234 wz
15bc4     34 0F B0 5D |  if_ne	call	#_do_new
15bc8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15bc8     04 4E 05 F1 | 	add	fp, #4
15bcc     A7 12 02 FB | 	rdlong	arg01, fp
15bd0     04 4E 85 F1 | 	sub	fp, #4
15bd4     C5 01 00 FF 
15bd8     0A 14 06 F6 | 	mov	arg02, ##@LR__6110
15bdc     3C 28 B1 FD | 	call	#__system___string_cmp
15be0     00 FA 0D F2 | 	cmp	result1, #0 wz
15be4     24 00 90 5D |  if_ne	jmp	#LR__1783
15be8     52 00 00 FF 
15bec     1C E5 05 F1 | 	add	objptr, ##42268
15bf0     F2 26 02 FB | 	rdlong	local01, objptr
15bf4     52 00 00 FF 
15bf8     1C E5 85 F1 | 	sub	objptr, ##42268
15bfc     04 4E 05 F1 | 	add	fp, #4
15c00     A7 26 62 FC | 	wrlong	local01, fp
15c04     04 4E 85 F1 | 	sub	fp, #4
15c08     20 00 90 FD | 	jmp	#LR__1784
15c0c                 | LR__1783
15c0c     04 4E 05 F1 | 	add	fp, #4
15c10     A7 26 02 FB | 	rdlong	local01, fp
15c14     04 4E 85 F1 | 	sub	fp, #4
15c18     52 00 00 FF 
15c1c     1C E5 05 F1 | 	add	objptr, ##42268
15c20     F2 26 62 FC | 	wrlong	local01, objptr
15c24     52 00 00 FF 
15c28     1C E5 85 F1 | 	sub	objptr, ##42268
15c2c                 | LR__1784
15c2c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
15c2c     09 12 06 F6 | 	mov	arg01, #9
15c30     20 7B B1 FD | 	call	#__system__close
15c34     09 26 06 F6 | 	mov	local01, #9
15c38     4A 00 00 FF 
15c3c     B4 E4 05 F1 | 	add	objptr, ##38068
15c40     F2 12 02 FB | 	rdlong	arg01, objptr
15c44     4A 00 00 FF 
15c48     B4 E4 85 F1 | 	sub	objptr, ##38068
15c4c     C5 01 00 FF 
15c50     0B 14 06 F6 | 	mov	arg02, ##@LR__6111
15c54     F8 27 B1 FD | 	call	#__system___string_concat
15c58     FD 12 02 F6 | 	mov	arg01, result1
15c5c     04 4E 05 F1 | 	add	fp, #4
15c60     A7 14 02 FB | 	rdlong	arg02, fp
15c64     04 4E 85 F1 | 	sub	fp, #4
15c68     E4 27 B1 FD | 	call	#__system___string_concat
15c6c     FD 14 02 F6 | 	mov	arg02, result1
15c70     13 13 02 F6 | 	mov	arg01, local01
15c74     00 16 06 F6 | 	mov	arg03, #0
15c78     7C 33 B1 FD | 	call	#__system___basic_open_string
15c7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15c80     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15c84     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15c88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15c8c     14 4E 05 F1 | 	add	fp, #20
15c90     A7 FA 61 FC | 	wrlong	result1, fp
15c94                 | '   r=geterr() 
15c94                 | '   if r then 
15c94     14 4E 85 F1 | 	sub	fp, #20
15c98     54 01 90 AD |  if_e	jmp	#LR__1786
15c9c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15c9c     09 12 06 F6 | 	mov	arg01, #9
15ca0     B0 7A B1 FD | 	call	#__system__close
15ca4     09 26 06 F6 | 	mov	local01, #9
15ca8     4A 00 00 FF 
15cac     B4 E4 05 F1 | 	add	objptr, ##38068
15cb0     F2 12 02 FB | 	rdlong	arg01, objptr
15cb4     4A 00 00 FF 
15cb8     B4 E4 85 F1 | 	sub	objptr, ##38068
15cbc     C5 01 00 FF 
15cc0     0D 14 06 F6 | 	mov	arg02, ##@LR__6112
15cc4     88 27 B1 FD | 	call	#__system___string_concat
15cc8     FD 12 02 F6 | 	mov	arg01, result1
15ccc     04 4E 05 F1 | 	add	fp, #4
15cd0     A7 14 02 FB | 	rdlong	arg02, fp
15cd4     04 4E 85 F1 | 	sub	fp, #4
15cd8     74 27 B1 FD | 	call	#__system___string_concat
15cdc     FD 12 02 F6 | 	mov	arg01, result1
15ce0     C5 01 00 FF 
15ce4     0F 14 06 F6 | 	mov	arg02, ##@LR__6113
15ce8     64 27 B1 FD | 	call	#__system___string_concat
15cec     FD 14 02 F6 | 	mov	arg02, result1
15cf0     13 13 02 F6 | 	mov	arg01, local01
15cf4     00 16 06 F6 | 	mov	arg03, #0
15cf8     FC 32 B1 FD | 	call	#__system___basic_open_string
15cfc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15d00     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15d04     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15d08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15d0c     14 4E 05 F1 | 	add	fp, #20
15d10     A7 FA 61 FC | 	wrlong	result1, fp
15d14                 | '     r=geterr() 
15d14                 | '     if r then 
15d14     14 4E 85 F1 | 	sub	fp, #20
15d18     A0 00 90 AD |  if_e	jmp	#LR__1785
15d1c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15d1c     00 12 06 F6 | 	mov	arg01, #0
15d20     80 83 B1 FD | 	call	#__system___getiolock_0625
15d24     FD 12 02 F6 | 	mov	arg01, result1
15d28     C8 26 B1 FD | 	call	#__system___lockmem
15d2c     C5 01 00 FF 
15d30     14 14 06 F6 | 	mov	arg02, ##@LR__6114
15d34     00 12 06 F6 | 	mov	arg01, #0
15d38     00 16 06 F6 | 	mov	arg03, #0
15d3c     AC 33 B1 FD | 	call	#__system___basic_print_string
15d40     14 4E 05 F1 | 	add	fp, #20
15d44     A7 14 02 FB | 	rdlong	arg02, fp
15d48     14 4E 85 F1 | 	sub	fp, #20
15d4c     00 12 06 F6 | 	mov	arg01, #0
15d50     00 16 06 F6 | 	mov	arg03, #0
15d54     0A 18 06 F6 | 	mov	arg04, #10
15d58     D4 33 B1 FD | 	call	#__system___basic_print_integer
15d5c     C5 01 00 FF 
15d60     22 14 06 F6 | 	mov	arg02, ##@LR__6115
15d64     00 12 06 F6 | 	mov	arg01, #0
15d68     00 16 06 F6 | 	mov	arg03, #0
15d6c     7C 33 B1 FD | 	call	#__system___basic_print_string
15d70     00 26 06 F6 | 	mov	local01, #0
15d74     14 4E 05 F1 | 	add	fp, #20
15d78     A7 12 02 FB | 	rdlong	arg01, fp
15d7c     14 4E 85 F1 | 	sub	fp, #20
15d80     00 50 B1 FD | 	call	#__system___strerror
15d84     FD 14 02 F6 | 	mov	arg02, result1
15d88     13 13 02 F6 | 	mov	arg01, local01
15d8c     00 16 06 F6 | 	mov	arg03, #0
15d90     58 33 B1 FD | 	call	#__system___basic_print_string
15d94     00 12 06 F6 | 	mov	arg01, #0
15d98     0A 14 06 F6 | 	mov	arg02, #10
15d9c     00 16 06 F6 | 	mov	arg03, #0
15da0     F0 32 B1 FD | 	call	#__system___basic_print_char
15da4     00 12 06 F6 | 	mov	arg01, #0
15da8     F8 82 B1 FD | 	call	#__system___getiolock_0625
15dac     FD 00 68 FC | 	wrlong	#0, result1
15db0     09 12 06 F6 | 	mov	arg01, #9
15db4     9C 79 B1 FD | 	call	#__system__close
15db8     94 01 90 FD | 	jmp	#LR__1790
15dbc                 | LR__1785
15dbc     52 00 00 FF 
15dc0     1C E5 05 F1 | 	add	objptr, ##42268
15dc4     F2 12 02 FB | 	rdlong	arg01, objptr
15dc8     52 00 00 FF 
15dcc     1C E5 85 F1 | 	sub	objptr, ##42268
15dd0     C5 01 00 FF 
15dd4     25 14 06 F6 | 	mov	arg02, ##@LR__6116
15dd8     74 26 B1 FD | 	call	#__system___string_concat
15ddc     52 00 00 FF 
15de0     1C E5 05 F1 | 	add	objptr, ##42268
15de4     F2 FA 61 FC | 	wrlong	result1, objptr
15de8     52 00 00 FF 
15dec     1C E5 85 F1 | 	sub	objptr, ##42268
15df0                 | LR__1786
15df0                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15df0     09 12 06 F6 | 	mov	arg01, #9
15df4     5C 79 B1 FD | 	call	#__system__close
15df8     09 26 06 F6 | 	mov	local01, #9
15dfc     4A 00 00 FF 
15e00     B4 E4 05 F1 | 	add	objptr, ##38068
15e04     F2 12 02 FB | 	rdlong	arg01, objptr
15e08     4A 00 00 FF 
15e0c     B4 E4 85 F1 | 	sub	objptr, ##38068
15e10     C5 01 00 FF 
15e14     2A 14 06 F6 | 	mov	arg02, ##@LR__6117
15e18     34 26 B1 FD | 	call	#__system___string_concat
15e1c     FD 12 02 F6 | 	mov	arg01, result1
15e20     52 00 00 FF 
15e24     1C E5 05 F1 | 	add	objptr, ##42268
15e28     F2 14 02 FB | 	rdlong	arg02, objptr
15e2c     52 00 00 FF 
15e30     1C E5 85 F1 | 	sub	objptr, ##42268
15e34     18 26 B1 FD | 	call	#__system___string_concat
15e38     FD 14 02 F6 | 	mov	arg02, result1
15e3c     13 13 02 F6 | 	mov	arg01, local01
15e40     00 16 06 F6 | 	mov	arg03, #0
15e44     B0 31 B1 FD | 	call	#__system___basic_open_string
15e48                 | '   do
15e48                 | LR__1787
15e48     09 12 06 F6 | 	mov	arg01, #9
15e4c     B0 27 B1 FD | 	call	#__system___basic_read_line
15e50     FD 26 02 F6 | 	mov	local01, result1
15e54     37 00 00 FF 
15e58     3C E4 05 F1 | 	add	objptr, ##28220
15e5c     F2 26 62 FC | 	wrlong	local01, objptr
15e60     37 00 00 FF 
15e64     3C E4 85 F1 | 	sub	objptr, ##28220
15e68     20 BA BE FD | 	call	#_interpret
15e6c     37 00 00 FF 
15e70     3C E4 05 F1 | 	add	objptr, ##28220
15e74     F2 12 02 FB | 	rdlong	arg01, objptr
15e78     37 00 00 FF 
15e7c     3C E4 85 F1 | 	sub	objptr, ##28220
15e80     C5 01 00 FF 
15e84     2C 14 06 F6 | 	mov	arg02, ##@LR__6118
15e88     90 25 B1 FD | 	call	#__system___string_cmp
15e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
15e90     B4 FF 9F 5D |  if_ne	jmp	#LR__1787
15e94                 | '   close #9   
15e94     09 12 06 F6 | 	mov	arg01, #9
15e98     B8 78 B1 FD | 	call	#__system__close
15e9c     0C 00 90 FD | 	jmp	#LR__1789
15ea0                 | LR__1788
15ea0     1E 12 06 F6 | 	mov	arg01, #30
15ea4     00 14 06 F6 | 	mov	arg02, #0
15ea8     F0 EA B0 FD | 	call	#_printerror
15eac                 | LR__1789
15eac                 | ' print "Loaded ";currentdir$+"/"+loadname
15eac     00 12 06 F6 | 	mov	arg01, #0
15eb0     F0 81 B1 FD | 	call	#__system___getiolock_0625
15eb4     FD 12 02 F6 | 	mov	arg01, result1
15eb8     38 25 B1 FD | 	call	#__system___lockmem
15ebc     C5 01 00 FF 
15ec0     2D 14 06 F6 | 	mov	arg02, ##@LR__6119
15ec4     00 12 06 F6 | 	mov	arg01, #0
15ec8     00 16 06 F6 | 	mov	arg03, #0
15ecc     1C 32 B1 FD | 	call	#__system___basic_print_string
15ed0     00 26 06 F6 | 	mov	local01, #0
15ed4     4A 00 00 FF 
15ed8     B4 E4 05 F1 | 	add	objptr, ##38068
15edc     F2 12 02 FB | 	rdlong	arg01, objptr
15ee0     4A 00 00 FF 
15ee4     B4 E4 85 F1 | 	sub	objptr, ##38068
15ee8     C5 01 00 FF 
15eec     35 14 06 F6 | 	mov	arg02, ##@LR__6120
15ef0     5C 25 B1 FD | 	call	#__system___string_concat
15ef4     FD 12 02 F6 | 	mov	arg01, result1
15ef8     52 00 00 FF 
15efc     1C E5 05 F1 | 	add	objptr, ##42268
15f00     F2 14 02 FB | 	rdlong	arg02, objptr
15f04     52 00 00 FF 
15f08     1C E5 85 F1 | 	sub	objptr, ##42268
15f0c     40 25 B1 FD | 	call	#__system___string_concat
15f10     FD 14 02 F6 | 	mov	arg02, result1
15f14     13 13 02 F6 | 	mov	arg01, local01
15f18     00 16 06 F6 | 	mov	arg03, #0
15f1c     CC 31 B1 FD | 	call	#__system___basic_print_string
15f20     00 12 06 F6 | 	mov	arg01, #0
15f24     0A 14 06 F6 | 	mov	arg02, #10
15f28     00 16 06 F6 | 	mov	arg03, #0
15f2c     64 31 B1 FD | 	call	#__system___basic_print_char
15f30     00 12 06 F6 | 	mov	arg01, #0
15f34     6C 81 B1 FD | 	call	#__system___getiolock_0625
15f38     FD 00 68 FC | 	wrlong	#0, result1
15f3c     52 00 00 FF 
15f40     2C E5 05 F1 | 	add	objptr, ##42284
15f44     F2 00 68 FC | 	wrlong	#0, objptr
15f48     52 00 00 FF 
15f4c     2C E5 85 F1 | 	sub	objptr, ##42284
15f50                 | LR__1790
15f50     A7 F0 03 F6 | 	mov	ptra, fp
15f54     B2 00 A0 FD | 	call	#popregs_
15f58                 | _do_load_ret
15f58     2D 00 64 FD | 	ret
15f5c                 | 
15f5c                 | ' 
15f5c                 | ' '-------------------- log
15f5c                 | ' 
15f5c                 | ' sub do_log
15f5c                 | _do_log
15f5c     01 4A 05 F6 | 	mov	COUNT_, #1
15f60     A8 00 A0 FD | 	call	#pushregs_
15f64     14 F0 07 F1 | 	add	ptra, #20
15f68     4A 00 00 FF 
15f6c     A0 E4 05 F1 | 	add	objptr, ##38048
15f70     F2 26 02 FB | 	rdlong	local01, objptr
15f74     13 17 02 F6 | 	mov	arg03, local01
15f78     01 16 66 F0 | 	shl	arg03, #1
15f7c     13 17 02 F1 | 	add	arg03, local01
15f80     02 16 66 F0 | 	shl	arg03, #2
15f84     03 00 00 FF 
15f88     04 E4 85 F1 | 	sub	objptr, ##1540
15f8c     F2 16 02 F1 | 	add	arg03, objptr
15f90     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15f94     0C 4E 05 F1 | 	add	fp, #12
15f98     A7 16 62 FC | 	wrlong	arg03, fp
15f9c                 | ' 
15f9c                 | ' numpar=compiledline(lineptr_e).result.uresult
15f9c                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15f9c     0C 4E 85 F1 | 	sub	fp, #12
15fa0     47 00 00 FF 
15fa4     9C E4 85 F1 | 	sub	objptr, ##36508
15fa8     0C 4E 05 51 |  if_ne	add	fp, #12
15fac     A7 26 02 5B |  if_ne	rdlong	local01, fp
15fb0     0C 4E 85 51 |  if_ne	sub	fp, #12
15fb4     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15fb8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1800
15fbc     00 12 06 F6 | 	mov	arg01, #0
15fc0     E0 80 B1 FD | 	call	#__system___getiolock_0625
15fc4     FD 12 02 F6 | 	mov	arg01, result1
15fc8     28 24 B1 FD | 	call	#__system___lockmem
15fcc     C5 01 00 FF 
15fd0     37 14 06 F6 | 	mov	arg02, ##@LR__6121
15fd4     00 12 06 F6 | 	mov	arg01, #0
15fd8     00 16 06 F6 | 	mov	arg03, #0
15fdc     0C 31 B1 FD | 	call	#__system___basic_print_string
15fe0     00 12 06 F6 | 	mov	arg01, #0
15fe4     BC 80 B1 FD | 	call	#__system___getiolock_0625
15fe8     FD 00 68 FC | 	wrlong	#0, result1
15fec     27 12 06 F6 | 	mov	arg01, #39
15ff0     00 14 06 F6 | 	mov	arg02, #0
15ff4     A4 E9 B0 FD | 	call	#_printerror
15ff8     D0 00 90 FD | 	jmp	#LR__1803
15ffc                 | LR__1800
15ffc                 | ' if numpar=2 then 
15ffc     0C 4E 05 F1 | 	add	fp, #12
16000     A7 26 02 FB | 	rdlong	local01, fp
16004     0C 4E 85 F1 | 	sub	fp, #12
16008     02 26 0E F2 | 	cmp	local01, #2 wz
1600c     48 00 90 5D |  if_ne	jmp	#LR__1801
16010     A0 78 BF FD | 	call	#_pop
16014     FF 26 02 F6 | 	mov	local01, result3
16018     A7 FA 61 FC | 	wrlong	result1, fp
1601c     04 4E 05 F1 | 	add	fp, #4
16020     A7 FC 61 FC | 	wrlong	result2, fp
16024     04 4E 05 F1 | 	add	fp, #4
16028     A7 26 62 FC | 	wrlong	local01, fp
1602c     08 4E 85 F1 | 	sub	fp, #8
16030     A7 12 02 F6 | 	mov	arg01, fp
16034     1C 7B BF FD | 	call	#_converttofloat
16038     FD 14 02 F6 | 	mov	arg02, result1
1603c     FC 16 20 FF 
16040     54 12 06 F6 | 	mov	arg01, ##1076754516
16044     FC 61 B1 FD | 	call	#__system____builtin_logbase
16048     10 4E 05 F1 | 	add	fp, #16
1604c     A7 FA 61 FC | 	wrlong	result1, fp
16050     10 4E 85 F1 | 	sub	fp, #16
16054     10 00 90 FD | 	jmp	#LR__1802
16058                 | LR__1801
16058     10 4E 05 F1 | 	add	fp, #16
1605c     00 C0 9F FF 
16060     A7 00 68 FC | 	wrlong	##1065353216, fp
16064     10 4E 85 F1 | 	sub	fp, #16
16068                 | LR__1802
16068     48 78 BF FD | 	call	#_pop
1606c     FF 26 02 F6 | 	mov	local01, result3
16070     A7 FA 61 FC | 	wrlong	result1, fp
16074     04 4E 05 F1 | 	add	fp, #4
16078     A7 FC 61 FC | 	wrlong	result2, fp
1607c     04 4E 05 F1 | 	add	fp, #4
16080     A7 26 62 FC | 	wrlong	local01, fp
16084     08 4E 85 F1 | 	sub	fp, #8
16088     A7 12 02 F6 | 	mov	arg01, fp
1608c     C4 7A BF FD | 	call	#_converttofloat
16090     FD 14 02 F6 | 	mov	arg02, result1
16094     FC 16 20 FF 
16098     54 12 06 F6 | 	mov	arg01, ##1076754516
1609c     A4 61 B1 FD | 	call	#__system____builtin_logbase
160a0     FD 12 02 F6 | 	mov	arg01, result1
160a4     10 4E 05 F1 | 	add	fp, #16
160a8     A7 14 02 FB | 	rdlong	arg02, fp
160ac     10 4E 85 F1 | 	sub	fp, #16
160b0     C0 53 B1 FD | 	call	#__system___float_div
160b4     A7 FA 61 FC | 	wrlong	result1, fp
160b8     08 4E 05 F1 | 	add	fp, #8
160bc     A7 3C 68 FC | 	wrlong	#30, fp
160c0     08 4E 85 F1 | 	sub	fp, #8
160c4     A7 12 02 F6 | 	mov	arg01, fp
160c8     80 78 BF FD | 	call	#_push
160cc                 | LR__1803
160cc     A7 F0 03 F6 | 	mov	ptra, fp
160d0     B2 00 A0 FD | 	call	#popregs_
160d4                 | _do_log_ret
160d4     2D 00 64 FD | 	ret
160d8                 | 
160d8                 | ' 
160d8                 | ' '-------------------- lpeek
160d8                 | ' 
160d8                 | ' sub do_lpeek
160d8                 | _do_lpeek
160d8     00 4A 05 F6 | 	mov	COUNT_, #0
160dc     A8 00 A0 FD | 	call	#pushregs_
160e0     14 F0 07 F1 | 	add	ptra, #20
160e4     CC 77 BF FD | 	call	#_pop
160e8     A7 FA 61 FC | 	wrlong	result1, fp
160ec     04 4E 05 F1 | 	add	fp, #4
160f0     A7 FC 61 FC | 	wrlong	result2, fp
160f4     04 4E 05 F1 | 	add	fp, #4
160f8     A7 FE 61 FC | 	wrlong	result3, fp
160fc     08 4E 85 F1 | 	sub	fp, #8
16100     A7 12 02 F6 | 	mov	arg01, fp
16104     90 79 BF FD | 	call	#_converttoint
16108     0C 4E 05 F1 | 	add	fp, #12
1610c     A7 FA 61 FC | 	wrlong	result1, fp
16110                 | ' 
16110                 | ' t1=pop()
16110                 | ' a=converttoint(t1)
16110                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
16110     0C 4E 85 F1 | 	sub	fp, #12
16114     00 04 00 FF 
16118     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1611c     1C 00 90 3D |  if_ae	jmp	#LR__1810
16120     0C 4E 05 F1 | 	add	fp, #12
16124     A7 12 02 FB | 	rdlong	arg01, fp
16128     09 FB 01 FB | 	rdlong	result1, arg01
1612c     04 4E 05 F1 | 	add	fp, #4
16130     A7 FA 61 FC | 	wrlong	result1, fp
16134     10 4E 85 F1 | 	sub	fp, #16
16138     1C 00 90 FD | 	jmp	#LR__1811
1613c                 | LR__1810
1613c     0C 4E 05 F1 | 	add	fp, #12
16140     A7 12 02 FB | 	rdlong	arg01, fp
16144     0C 4E 85 F1 | 	sub	fp, #12
16148     20 EB B0 FD | 	call	#_pslpeek
1614c     10 4E 05 F1 | 	add	fp, #16
16150     A7 FA 61 FC | 	wrlong	result1, fp
16154     10 4E 85 F1 | 	sub	fp, #16
16158                 | LR__1811
16158     08 4E 05 F1 | 	add	fp, #8
1615c     A7 3A 68 FC | 	wrlong	#29, fp
16160     08 4E 05 F1 | 	add	fp, #8
16164     A7 12 02 FB | 	rdlong	arg01, fp
16168     10 4E 85 F1 | 	sub	fp, #16
1616c     A7 12 62 FC | 	wrlong	arg01, fp
16170     A7 12 02 F6 | 	mov	arg01, fp
16174     D4 77 BF FD | 	call	#_push
16178     A7 F0 03 F6 | 	mov	ptra, fp
1617c     B2 00 A0 FD | 	call	#popregs_
16180                 | _do_lpeek_ret
16180     2D 00 64 FD | 	ret
16184                 | 
16184                 | ' 
16184                 | ' '-------------------- lpoke
16184                 | ' 
16184                 | ' sub do_lpoke
16184                 | _do_lpoke
16184     01 4A 05 F6 | 	mov	COUNT_, #1
16188     A8 00 A0 FD | 	call	#pushregs_
1618c     20 F0 07 F1 | 	add	ptra, #32
16190     20 77 BF FD | 	call	#_pop
16194     FD 14 02 F6 | 	mov	arg02, result1
16198     FE 12 02 F6 | 	mov	arg01, result2
1619c     FF 26 02 F6 | 	mov	local01, result3
161a0     A7 14 62 FC | 	wrlong	arg02, fp
161a4     04 4E 05 F1 | 	add	fp, #4
161a8     A7 12 62 FC | 	wrlong	arg01, fp
161ac     04 4E 05 F1 | 	add	fp, #4
161b0     A7 26 62 FC | 	wrlong	local01, fp
161b4     08 4E 85 F1 | 	sub	fp, #8
161b8     F8 76 BF FD | 	call	#_pop
161bc     FF 26 02 F6 | 	mov	local01, result3
161c0     0C 4E 05 F1 | 	add	fp, #12
161c4     A7 FA 61 FC | 	wrlong	result1, fp
161c8     04 4E 05 F1 | 	add	fp, #4
161cc     A7 FC 61 FC | 	wrlong	result2, fp
161d0     04 4E 05 F1 | 	add	fp, #4
161d4     A7 26 62 FC | 	wrlong	local01, fp
161d8     08 4E 85 F1 | 	sub	fp, #8
161dc     A7 12 02 F6 | 	mov	arg01, fp
161e0     0C 4E 85 F1 | 	sub	fp, #12
161e4     B0 78 BF FD | 	call	#_converttoint
161e8     18 4E 05 F1 | 	add	fp, #24
161ec     A7 FA 61 FC | 	wrlong	result1, fp
161f0     18 4E 85 F1 | 	sub	fp, #24
161f4     A7 12 02 F6 | 	mov	arg01, fp
161f8     9C 78 BF FD | 	call	#_converttoint
161fc     1C 4E 05 F1 | 	add	fp, #28
16200     A7 FA 61 FC | 	wrlong	result1, fp
16204                 | ' 
16204                 | ' t1=pop() 'value
16204                 | ' t2=pop() 
16204                 | ' a=converttoint(t2) : v=converttoint(t1)
16204                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16204     04 4E 85 F1 | 	sub	fp, #4
16208     A7 26 02 FB | 	rdlong	local01, fp
1620c     18 4E 85 F1 | 	sub	fp, #24
16210     00 04 00 FF 
16214     00 26 16 F2 | 	cmp	local01, ##524288 wc
16218     1C 00 90 3D |  if_ae	jmp	#LR__1820
1621c     18 4E 05 F1 | 	add	fp, #24
16220     A7 12 02 FB | 	rdlong	arg01, fp
16224     04 4E 05 F1 | 	add	fp, #4
16228     A7 14 02 FB | 	rdlong	arg02, fp
1622c     1C 4E 85 F1 | 	sub	fp, #28
16230     09 15 62 FC | 	wrlong	arg02, arg01
16234     18 00 90 FD | 	jmp	#LR__1821
16238                 | LR__1820
16238     18 4E 05 F1 | 	add	fp, #24
1623c     A7 12 02 FB | 	rdlong	arg01, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 14 02 FB | 	rdlong	arg02, fp
16248     1C 4E 85 F1 | 	sub	fp, #28
1624c     EC E8 B0 FD | 	call	#_pslpoke
16250                 | LR__1821
16250     A7 F0 03 F6 | 	mov	ptra, fp
16254     B2 00 A0 FD | 	call	#popregs_
16258                 | _do_lpoke_ret
16258     2D 00 64 FD | 	ret
1625c                 | 
1625c                 | ' 
1625c                 | ' '-------------------- memlo
1625c                 | ' 
1625c                 | ' sub do_memlo
1625c                 | _do_memlo
1625c     00 4A 05 F6 | 	mov	COUNT_, #0
16260     A8 00 A0 FD | 	call	#pushregs_
16264     0C F0 07 F1 | 	add	ptra, #12
16268     43 00 00 FF 
1626c     7C E4 05 F1 | 	add	objptr, ##34428
16270     F2 12 02 FB | 	rdlong	arg01, objptr
16274     43 00 00 FF 
16278     7C E4 85 F1 | 	sub	objptr, ##34428
1627c     A7 12 62 FC | 	wrlong	arg01, fp
16280     08 4E 05 F1 | 	add	fp, #8
16284     A7 3A 68 FC | 	wrlong	#29, fp
16288     08 4E 85 F1 | 	sub	fp, #8
1628c     A7 12 02 F6 | 	mov	arg01, fp
16290     B8 76 BF FD | 	call	#_push
16294     A7 F0 03 F6 | 	mov	ptra, fp
16298     B2 00 A0 FD | 	call	#popregs_
1629c                 | _do_memlo_ret
1629c     2D 00 64 FD | 	ret
162a0                 | 
162a0                 | ' 
162a0                 | ' '-------------------- memtop
162a0                 | ' 
162a0                 | ' sub do_memtop
162a0                 | _do_memtop
162a0     00 4A 05 F6 | 	mov	COUNT_, #0
162a4     A8 00 A0 FD | 	call	#pushregs_
162a8     0C F0 07 F1 | 	add	ptra, #12
162ac     52 00 00 FF 
162b0     F0 E4 05 F1 | 	add	objptr, ##42224
162b4     F2 12 02 FB | 	rdlong	arg01, objptr
162b8     52 00 00 FF 
162bc     F0 E4 85 F1 | 	sub	objptr, ##42224
162c0     A7 12 62 FC | 	wrlong	arg01, fp
162c4     08 4E 05 F1 | 	add	fp, #8
162c8     A7 3A 68 FC | 	wrlong	#29, fp
162cc     08 4E 85 F1 | 	sub	fp, #8
162d0     A7 12 02 F6 | 	mov	arg01, fp
162d4     74 76 BF FD | 	call	#_push
162d8     A7 F0 03 F6 | 	mov	ptra, fp
162dc     B2 00 A0 FD | 	call	#popregs_
162e0                 | _do_memtop_ret
162e0     2D 00 64 FD | 	ret
162e4                 | 
162e4                 | ' 
162e4                 | ' '-------------------- mid$
162e4                 | ' 
162e4                 | ' sub do_mid
162e4                 | _do_mid
162e4     00 4A 05 F6 | 	mov	COUNT_, #0
162e8     A8 00 A0 FD | 	call	#pushregs_
162ec     18 F0 07 F1 | 	add	ptra, #24
162f0     4A 00 00 FF 
162f4     A0 E4 05 F1 | 	add	objptr, ##38048
162f8     F2 16 02 FB | 	rdlong	arg03, objptr
162fc     0B 15 02 F6 | 	mov	arg02, arg03
16300     01 14 66 F0 | 	shl	arg02, #1
16304     0B 15 02 F1 | 	add	arg02, arg03
16308     02 14 66 F0 | 	shl	arg02, #2
1630c     03 00 00 FF 
16310     04 E4 85 F1 | 	sub	objptr, ##1540
16314     F2 14 02 F1 | 	add	arg02, objptr
16318     0A 17 02 FB | 	rdlong	arg03, arg02
1631c     0C 4E 05 F1 | 	add	fp, #12
16320     A7 16 62 FC | 	wrlong	arg03, fp
16324                 | ' 
16324                 | ' numpar=compiledline(lineptr_e).result.uresult
16324                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
16324     0C 4E 85 F1 | 	sub	fp, #12
16328     03 16 0E F2 | 	cmp	arg03, #3 wz
1632c     47 00 00 FF 
16330     9C E4 85 F1 | 	sub	objptr, ##36508
16334     40 00 90 AD |  if_e	jmp	#LR__1830
16338     00 12 06 F6 | 	mov	arg01, #0
1633c     64 7D B1 FD | 	call	#__system___getiolock_0625
16340     FD 12 02 F6 | 	mov	arg01, result1
16344     AC 20 B1 FD | 	call	#__system___lockmem
16348     C5 01 00 FF 
1634c     3D 14 06 F6 | 	mov	arg02, ##@LR__6122
16350     00 12 06 F6 | 	mov	arg01, #0
16354     00 16 06 F6 | 	mov	arg03, #0
16358     90 2D B1 FD | 	call	#__system___basic_print_string
1635c     00 12 06 F6 | 	mov	arg01, #0
16360     40 7D B1 FD | 	call	#__system___getiolock_0625
16364     FD 00 68 FC | 	wrlong	#0, result1
16368     27 12 06 F6 | 	mov	arg01, #39
1636c     00 14 06 F6 | 	mov	arg02, #0
16370     28 E6 B0 FD | 	call	#_printerror
16374     2C 01 90 FD | 	jmp	#LR__1833
16378                 | LR__1830
16378     38 75 BF FD | 	call	#_pop
1637c     FF 16 02 F6 | 	mov	arg03, result3
16380     A7 FA 61 FC | 	wrlong	result1, fp
16384     04 4E 05 F1 | 	add	fp, #4
16388     A7 FC 61 FC | 	wrlong	result2, fp
1638c     04 4E 05 F1 | 	add	fp, #4
16390     A7 16 62 FC | 	wrlong	arg03, fp
16394     08 4E 85 F1 | 	sub	fp, #8
16398     A7 12 02 F6 | 	mov	arg01, fp
1639c     F8 76 BF FD | 	call	#_converttoint
163a0     FD 16 02 F6 | 	mov	arg03, result1
163a4     14 4E 05 F1 | 	add	fp, #20
163a8     A7 16 62 FC | 	wrlong	arg03, fp
163ac     14 4E 85 F1 | 	sub	fp, #20
163b0     00 75 BF FD | 	call	#_pop
163b4     FF 16 02 F6 | 	mov	arg03, result3
163b8     A7 FA 61 FC | 	wrlong	result1, fp
163bc     04 4E 05 F1 | 	add	fp, #4
163c0     A7 FC 61 FC | 	wrlong	result2, fp
163c4     04 4E 05 F1 | 	add	fp, #4
163c8     A7 16 62 FC | 	wrlong	arg03, fp
163cc     08 4E 85 F1 | 	sub	fp, #8
163d0     A7 12 02 F6 | 	mov	arg01, fp
163d4     C0 76 BF FD | 	call	#_converttoint
163d8     FD 16 02 F6 | 	mov	arg03, result1
163dc     10 4E 05 F1 | 	add	fp, #16
163e0     A7 16 62 FC | 	wrlong	arg03, fp
163e4     10 4E 85 F1 | 	sub	fp, #16
163e8     C8 74 BF FD | 	call	#_pop
163ec     FF 16 02 F6 | 	mov	arg03, result3
163f0     A7 FA 61 FC | 	wrlong	result1, fp
163f4     04 4E 05 F1 | 	add	fp, #4
163f8     A7 FC 61 FC | 	wrlong	result2, fp
163fc     04 4E 05 F1 | 	add	fp, #4
16400     A7 16 62 FC | 	wrlong	arg03, fp
16404                 | ' t1=pop() : arg2=converttoint(t1)
16404                 | ' t1=pop() : arg1=converttoint(t1)
16404                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16404     08 4E 85 F1 | 	sub	fp, #8
16408     2B 16 0E F2 | 	cmp	arg03, #43 wz
1640c     18 00 90 5D |  if_ne	jmp	#LR__1831
16410     A7 12 02 FB | 	rdlong	arg01, fp
16414     14 76 BF FD | 	call	#_convertstring
16418     A7 FA 61 FC | 	wrlong	result1, fp
1641c     08 4E 05 F1 | 	add	fp, #8
16420     A7 3E 68 FC | 	wrlong	#31, fp
16424     08 4E 85 F1 | 	sub	fp, #8
16428                 | LR__1831
16428                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
16428     08 4E 05 F1 | 	add	fp, #8
1642c     A7 16 02 FB | 	rdlong	arg03, fp
16430     08 4E 85 F1 | 	sub	fp, #8
16434     1F 16 0E F2 | 	cmp	arg03, #31 wz
16438     40 00 90 AD |  if_e	jmp	#LR__1832
1643c     00 12 06 F6 | 	mov	arg01, #0
16440     60 7C B1 FD | 	call	#__system___getiolock_0625
16444     FD 12 02 F6 | 	mov	arg01, result1
16448     A8 1F B1 FD | 	call	#__system___lockmem
1644c     C5 01 00 FF 
16450     44 14 06 F6 | 	mov	arg02, ##@LR__6123
16454     00 12 06 F6 | 	mov	arg01, #0
16458     00 16 06 F6 | 	mov	arg03, #0
1645c     8C 2C B1 FD | 	call	#__system___basic_print_string
16460     00 12 06 F6 | 	mov	arg01, #0
16464     3C 7C B1 FD | 	call	#__system___getiolock_0625
16468     FD 00 68 FC | 	wrlong	#0, result1
1646c     0F 12 06 F6 | 	mov	arg01, #15
16470     00 14 06 F6 | 	mov	arg02, #0
16474     24 E5 B0 FD | 	call	#_printerror
16478     28 00 90 FD | 	jmp	#LR__1833
1647c                 | LR__1832
1647c     A7 12 02 FB | 	rdlong	arg01, fp
16480     10 4E 05 F1 | 	add	fp, #16
16484     A7 14 02 FB | 	rdlong	arg02, fp
16488     04 4E 05 F1 | 	add	fp, #4
1648c     A7 16 02 FB | 	rdlong	arg03, fp
16490     14 4E 85 F1 | 	sub	fp, #20
16494     F4 40 B1 FD | 	call	#__system__Mid_S
16498     A7 FA 61 FC | 	wrlong	result1, fp
1649c     A7 12 02 F6 | 	mov	arg01, fp
164a0     A8 74 BF FD | 	call	#_push
164a4                 | LR__1833
164a4     A7 F0 03 F6 | 	mov	ptra, fp
164a8     B2 00 A0 FD | 	call	#popregs_
164ac                 | _do_mid_ret
164ac     2D 00 64 FD | 	ret
164b0                 | 
164b0                 | ' 
164b0                 | ' '-------------------- mkdir
164b0                 | ' 
164b0                 | ' sub do_mkdir
164b0                 | _do_mkdir
164b0     04 4A 05 F6 | 	mov	COUNT_, #4
164b4     A8 00 A0 FD | 	call	#pushregs_
164b8     F8 73 BF FD | 	call	#_pop
164bc     FE 18 02 F6 | 	mov	arg04, result2
164c0     FF 16 02 F6 | 	mov	arg03, result3
164c4     FD 26 02 F6 | 	mov	local01, result1
164c8     0C 29 02 F6 | 	mov	local02, arg04
164cc     0B 2B 02 F6 | 	mov	local03, arg03
164d0                 | ' 
164d0                 | ' t1=pop()
164d0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
164d0     2B 2A 0E F2 | 	cmp	local03, #43 wz
164d4     10 00 90 5D |  if_ne	jmp	#LR__1840
164d8     13 13 02 F6 | 	mov	arg01, local01
164dc     4C 75 BF FD | 	call	#_convertstring
164e0     FD 26 02 F6 | 	mov	local01, result1
164e4     1F 2A 06 F6 | 	mov	local03, #31
164e8                 | LR__1840
164e8                 | ' if t1.result_type<>result_string then printerror(15): return
164e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
164ec     10 00 90 AD |  if_e	jmp	#LR__1841
164f0     0F 12 06 F6 | 	mov	arg01, #15
164f4     00 14 06 F6 | 	mov	arg02, #0
164f8     A0 E4 B0 FD | 	call	#_printerror
164fc     64 00 90 FD | 	jmp	#LR__1843
16500                 | LR__1841
16500     13 13 02 F6 | 	mov	arg01, local01
16504     C0 47 B1 FD | 	call	#__system___mkdir
16508     FD 2C 0A F6 | 	mov	local04, result1 wz
1650c                 | ' filename$=t1.result.sresult
1650c                 | ' err=mkdir(filename$)
1650c                 | ' 'err=geterr() : 
1650c                 | ' if err<>0 then print "Cannot create a directory: system error "; err
1650c     54 00 90 AD |  if_e	jmp	#LR__1842
16510     00 12 06 F6 | 	mov	arg01, #0
16514     8C 7B B1 FD | 	call	#__system___getiolock_0625
16518     FD 12 02 F6 | 	mov	arg01, result1
1651c     D4 1E B1 FD | 	call	#__system___lockmem
16520     C5 01 00 FF 
16524     4B 14 06 F6 | 	mov	arg02, ##@LR__6124
16528     00 12 06 F6 | 	mov	arg01, #0
1652c     00 16 06 F6 | 	mov	arg03, #0
16530     B8 2B B1 FD | 	call	#__system___basic_print_string
16534     00 12 06 F6 | 	mov	arg01, #0
16538     16 15 02 F6 | 	mov	arg02, local04
1653c     00 16 06 F6 | 	mov	arg03, #0
16540     0A 18 06 F6 | 	mov	arg04, #10
16544     E8 2B B1 FD | 	call	#__system___basic_print_integer
16548     00 12 06 F6 | 	mov	arg01, #0
1654c     0A 14 06 F6 | 	mov	arg02, #10
16550     00 16 06 F6 | 	mov	arg03, #0
16554     3C 2B B1 FD | 	call	#__system___basic_print_char
16558     00 12 06 F6 | 	mov	arg01, #0
1655c     44 7B B1 FD | 	call	#__system___getiolock_0625
16560     FD 00 68 FC | 	wrlong	#0, result1
16564                 | LR__1842
16564                 | LR__1843
16564     A7 F0 03 F6 | 	mov	ptra, fp
16568     B2 00 A0 FD | 	call	#popregs_
1656c                 | _do_mkdir_ret
1656c     2D 00 64 FD | 	ret
16570                 | 
16570                 | ' 
16570                 | ' '-------------------- mode
16570                 | ' 
16570                 | ' sub do_mode
16570                 | _do_mode
16570     05 4A 05 F6 | 	mov	COUNT_, #5
16574     A8 00 A0 FD | 	call	#pushregs_
16578     38 73 BF FD | 	call	#_pop
1657c     FD 26 02 F6 | 	mov	local01, result1
16580     FE 28 02 F6 | 	mov	local02, result2
16584     FF 2A 02 F6 | 	mov	local03, result3
16588                 | ' t1=pop() 
16588                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16588     1E 2A 0E F2 | 	cmp	local03, #30 wz
1658c     10 00 90 5D |  if_ne	jmp	#LR__1850
16590     13 13 02 F6 | 	mov	arg01, local01
16594     00 14 06 F6 | 	mov	arg02, #0
16598     9C 51 B1 FD | 	call	#__system___float_tointeger
1659c     FD 26 02 F6 | 	mov	local01, result1
165a0                 | LR__1850
165a0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
165a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
165a4     18 00 90 5D |  if_ne	jmp	#LR__1851
165a8     13 13 02 F6 | 	mov	arg01, local01
165ac     D0 54 B1 FD | 	call	#__system____builtin_atof
165b0     FD 12 02 F6 | 	mov	arg01, result1
165b4     00 14 06 F6 | 	mov	arg02, #0
165b8     7C 51 B1 FD | 	call	#__system___float_tointeger
165bc     FD 26 02 F6 | 	mov	local01, result1
165c0                 | LR__1851
165c0                 | ' select case t1.result.iresult
165c0     13 2D 02 F6 | 	mov	local04, local01
165c4     06 2C 26 F3 | 	fle	local04, #6
165c8     30 2C 62 FD | 	jmprel	local04
165cc                 | LR__1852
165cc     18 00 90 FD | 	jmp	#LR__1853
165d0     AC 00 90 FD | 	jmp	#LR__1854
165d4     14 01 90 FD | 	jmp	#LR__1855
165d8     7C 01 90 FD | 	jmp	#LR__1856
165dc     E4 01 90 FD | 	jmp	#LR__1857
165e0     78 02 90 FD | 	jmp	#LR__1858
165e4     08 03 90 FD | 	jmp	#LR__1859
165e8                 | LR__1853
165e8     37 00 00 FF 
165ec     60 E4 05 F1 | 	add	objptr, ##28256
165f0     F2 02 68 FC | 	wrlong	#1, objptr
165f4     04 E4 85 F1 | 	sub	objptr, #4
165f8     F2 34 69 FC | 	wrlong	#154, objptr
165fc     19 00 00 FF 
16600     00 E5 05 F1 | 	add	objptr, ##13056
16604     F2 02 68 FC | 	wrlong	#1, objptr
16608     19 00 00 FF 
1660c     04 E5 85 F1 | 	sub	objptr, ##13060
16610     F2 26 69 FC | 	wrlong	#147, objptr
16614     37 00 00 FF 
16618     58 E4 85 F1 | 	sub	objptr, ##28248
1661c     04 12 06 F6 | 	mov	arg01, #4
16620     B0 FF B0 FD | 	call	#_hg010b_spin2_setfontfamily
16624     37 00 00 FF 
16628     5C E4 05 F1 | 	add	objptr, ##28252
1662c     F2 12 02 FB | 	rdlong	arg01, objptr
16630     04 E4 85 F1 | 	sub	objptr, #4
16634     F2 14 02 FB | 	rdlong	arg02, objptr
16638                 | ' 
16638                 | ' write_color:=ff
16638     37 00 00 FF 
1663c     17 E4 85 F1 | 	sub	objptr, ##28183
16640     F2 12 62 FC | 	wrlong	arg01, objptr
16644                 | ' write_background:=bb
16644     04 E4 05 F1 | 	add	objptr, #4
16648     F2 14 62 FC | 	wrlong	arg02, objptr
1664c     01 00 00 FF 
16650     00 EA 05 F1 | 	add	ptr__dat__, ##512
16654     52 00 00 FF 
16658     B7 E4 05 F1 | 	add	objptr, ##42167
1665c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16660     04 E4 85 F1 | 	sub	objptr, #4
16664     03 00 80 FF 
16668     F2 30 69 FC | 	wrlong	##1688, objptr
1666c     52 00 00 FF 
16670     F8 E4 85 F1 | 	sub	objptr, ##42232
16674     01 00 00 FF 
16678     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1667c     70 02 90 FD | 	jmp	#LR__1859
16680                 | LR__1854
16680     37 00 00 FF 
16684     60 E4 05 F1 | 	add	objptr, ##28256
16688     F2 00 68 FC | 	wrlong	#0, objptr
1668c     04 E4 85 F1 | 	sub	objptr, #4
16690     F2 2E 68 FC | 	wrlong	#23, objptr
16694     19 00 00 FF 
16698     00 E5 05 F1 | 	add	objptr, ##13056
1669c     F2 00 68 FC | 	wrlong	#0, objptr
166a0     19 00 00 FF 
166a4     04 E5 85 F1 | 	sub	objptr, ##13060
166a8     F2 00 68 FC | 	wrlong	#0, objptr
166ac     37 00 00 FF 
166b0     58 E4 85 F1 | 	sub	objptr, ##28248
166b4     00 12 06 F6 | 	mov	arg01, #0
166b8     18 FF B0 FD | 	call	#_hg010b_spin2_setfontfamily
166bc     37 00 00 FF 
166c0     5C E4 05 F1 | 	add	objptr, ##28252
166c4     F2 12 02 FB | 	rdlong	arg01, objptr
166c8     04 E4 85 F1 | 	sub	objptr, #4
166cc     F2 14 02 FB | 	rdlong	arg02, objptr
166d0                 | ' 
166d0                 | ' write_color:=ff
166d0     37 00 00 FF 
166d4     17 E4 85 F1 | 	sub	objptr, ##28183
166d8     F2 12 62 FC | 	wrlong	arg01, objptr
166dc                 | ' write_background:=bb
166dc     04 E4 05 F1 | 	add	objptr, #4
166e0     F2 14 62 FC | 	wrlong	arg02, objptr
166e4     45 E4 85 F1 | 	sub	objptr, #69
166e8     04 02 90 FD | 	jmp	#LR__1859
166ec                 | LR__1855
166ec     37 00 00 FF 
166f0     60 E4 05 F1 | 	add	objptr, ##28256
166f4     F2 00 68 FC | 	wrlong	#0, objptr
166f8     04 E4 85 F1 | 	sub	objptr, #4
166fc     F2 6A 69 FC | 	wrlong	#181, objptr
16700     19 00 00 FF 
16704     00 E5 05 F1 | 	add	objptr, ##13056
16708     F2 00 68 FC | 	wrlong	#0, objptr
1670c     19 00 00 FF 
16710     04 E5 85 F1 | 	sub	objptr, ##13060
16714     F2 00 68 FC | 	wrlong	#0, objptr
16718     37 00 00 FF 
1671c     58 E4 85 F1 | 	sub	objptr, ##28248
16720     00 12 06 F6 | 	mov	arg01, #0
16724     AC FE B0 FD | 	call	#_hg010b_spin2_setfontfamily
16728     37 00 00 FF 
1672c     5C E4 05 F1 | 	add	objptr, ##28252
16730     F2 12 02 FB | 	rdlong	arg01, objptr
16734     04 E4 85 F1 | 	sub	objptr, #4
16738     F2 14 02 FB | 	rdlong	arg02, objptr
1673c                 | ' 
1673c                 | ' write_color:=ff
1673c     37 00 00 FF 
16740     17 E4 85 F1 | 	sub	objptr, ##28183
16744     F2 12 62 FC | 	wrlong	arg01, objptr
16748                 | ' write_background:=bb
16748     04 E4 05 F1 | 	add	objptr, #4
1674c     F2 14 62 FC | 	wrlong	arg02, objptr
16750     45 E4 85 F1 | 	sub	objptr, #69
16754     98 01 90 FD | 	jmp	#LR__1859
16758                 | LR__1856
16758     37 00 00 FF 
1675c     60 E4 05 F1 | 	add	objptr, ##28256
16760     F2 00 68 FC | 	wrlong	#0, objptr
16764     04 E4 85 F1 | 	sub	objptr, #4
16768     F2 1E 68 FC | 	wrlong	#15, objptr
1676c     19 00 00 FF 
16770     00 E5 05 F1 | 	add	objptr, ##13056
16774     F2 00 68 FC | 	wrlong	#0, objptr
16778     19 00 00 FF 
1677c     04 E5 85 F1 | 	sub	objptr, ##13060
16780     F2 00 68 FC | 	wrlong	#0, objptr
16784     37 00 00 FF 
16788     58 E4 85 F1 | 	sub	objptr, ##28248
1678c     00 12 06 F6 | 	mov	arg01, #0
16790     40 FE B0 FD | 	call	#_hg010b_spin2_setfontfamily
16794     37 00 00 FF 
16798     5C E4 05 F1 | 	add	objptr, ##28252
1679c     F2 12 02 FB | 	rdlong	arg01, objptr
167a0     04 E4 85 F1 | 	sub	objptr, #4
167a4     F2 14 02 FB | 	rdlong	arg02, objptr
167a8                 | ' 
167a8                 | ' write_color:=ff
167a8     37 00 00 FF 
167ac     17 E4 85 F1 | 	sub	objptr, ##28183
167b0     F2 12 62 FC | 	wrlong	arg01, objptr
167b4                 | ' write_background:=bb
167b4     04 E4 05 F1 | 	add	objptr, #4
167b8     F2 14 62 FC | 	wrlong	arg02, objptr
167bc     45 E4 85 F1 | 	sub	objptr, #69
167c0     2C 01 90 FD | 	jmp	#LR__1859
167c4                 | LR__1857
167c4     37 00 00 FF 
167c8     60 E4 05 F1 | 	add	objptr, ##28256
167cc     F2 02 68 FC | 	wrlong	#1, objptr
167d0     04 E4 85 F1 | 	sub	objptr, #4
167d4     F2 02 68 FC | 	wrlong	#1, objptr
167d8     19 00 00 FF 
167dc     00 E5 05 F1 | 	add	objptr, ##13056
167e0     F2 02 68 FC | 	wrlong	#1, objptr
167e4     19 00 00 FF 
167e8     04 E5 85 F1 | 	sub	objptr, ##13060
167ec     F2 1C 68 FC | 	wrlong	#14, objptr
167f0     37 00 00 FF 
167f4     58 E4 85 F1 | 	sub	objptr, ##28248
167f8     04 12 06 F6 | 	mov	arg01, #4
167fc     D4 FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
16800     37 00 00 FF 
16804     5C E4 05 F1 | 	add	objptr, ##28252
16808     F2 12 02 FB | 	rdlong	arg01, objptr
1680c     04 E4 85 F1 | 	sub	objptr, #4
16810     F2 14 02 FB | 	rdlong	arg02, objptr
16814                 | ' 
16814                 | ' write_color:=ff
16814     37 00 00 FF 
16818     17 E4 85 F1 | 	sub	objptr, ##28183
1681c     F2 12 62 FC | 	wrlong	arg01, objptr
16820                 | ' write_background:=bb
16820     04 E4 05 F1 | 	add	objptr, #4
16824     F2 14 62 FC | 	wrlong	arg02, objptr
16828     07 00 00 FF 
1682c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
16830     52 00 00 FF 
16834     B7 E4 05 F1 | 	add	objptr, ##42167
16838     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1683c     04 E4 85 F1 | 	sub	objptr, #4
16840     03 00 80 FF 
16844     F2 30 69 FC | 	wrlong	##1688, objptr
16848     52 00 00 FF 
1684c     F8 E4 85 F1 | 	sub	objptr, ##42232
16850     07 00 00 FF 
16854     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
16858     94 00 90 FD | 	jmp	#LR__1859
1685c                 | LR__1858
1685c     37 00 00 FF 
16860     60 E4 05 F1 | 	add	objptr, ##28256
16864     F2 04 68 FC | 	wrlong	#2, objptr
16868     04 E4 85 F1 | 	sub	objptr, #4
1686c     F2 02 68 FC | 	wrlong	#1, objptr
16870     19 00 00 FF 
16874     00 E5 05 F1 | 	add	objptr, ##13056
16878     F2 02 68 FC | 	wrlong	#1, objptr
1687c     19 00 00 FF 
16880     04 E5 85 F1 | 	sub	objptr, ##13060
16884     F2 0E 68 FC | 	wrlong	#7, objptr
16888     37 00 00 FF 
1688c     58 E4 85 F1 | 	sub	objptr, ##28248
16890     08 12 06 F6 | 	mov	arg01, #8
16894     3C FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
16898     37 00 00 FF 
1689c     5C E4 05 F1 | 	add	objptr, ##28252
168a0     F2 12 02 FB | 	rdlong	arg01, objptr
168a4     04 E4 85 F1 | 	sub	objptr, #4
168a8     F2 14 02 FB | 	rdlong	arg02, objptr
168ac                 | ' 
168ac                 | ' write_color:=ff
168ac     37 00 00 FF 
168b0     17 E4 85 F1 | 	sub	objptr, ##28183
168b4     F2 12 62 FC | 	wrlong	arg01, objptr
168b8                 | ' write_background:=bb
168b8     04 E4 05 F1 | 	add	objptr, #4
168bc     F2 14 62 FC | 	wrlong	arg02, objptr
168c0     07 00 00 FF 
168c4     82 EB 05 F1 | 	add	ptr__dat__, ##3970
168c8     52 00 00 FF 
168cc     B7 E4 05 F1 | 	add	objptr, ##42167
168d0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
168d4     04 E4 85 F1 | 	sub	objptr, #4
168d8     03 00 80 FF 
168dc     F2 30 69 FC | 	wrlong	##1688, objptr
168e0     52 00 00 FF 
168e4     F8 E4 85 F1 | 	sub	objptr, ##42232
168e8     07 00 00 FF 
168ec     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
168f0                 | LR__1859
168f0     52 00 00 FF 
168f4     F4 E4 05 F1 | 	add	objptr, ##42228
168f8     F2 26 62 FC | 	wrlong	local01, objptr
168fc     04 E4 85 F1 | 	sub	objptr, #4
16900     F2 12 02 FB | 	rdlong	arg01, objptr
16904     0F 00 00 FF 
16908     74 E4 85 F1 | 	sub	objptr, ##7796
1690c     F2 2E 02 FB | 	rdlong	local05, objptr
16910     43 00 00 FF 
16914     7C E4 85 F1 | 	sub	objptr, ##34428
16918     17 13 82 F1 | 	sub	arg01, local05
1691c     00 14 06 F6 | 	mov	arg02, #0
16920     0A 16 06 F6 | 	mov	arg03, #10
16924     A0 3D B1 FD | 	call	#__system__Number_S
16928     FD 12 02 F6 | 	mov	arg01, result1
1692c     C5 01 00 FF 
16930     74 14 06 F6 | 	mov	arg02, ##@LR__6125
16934     18 1B B1 FD | 	call	#__system___string_concat
16938     50 00 00 FF 
1693c     58 E5 05 F1 | 	add	objptr, ##41304
16940     F2 FA 61 FC | 	wrlong	result1, objptr
16944     19 00 00 FF 
16948     FC E4 85 F1 | 	sub	objptr, ##13052
1694c     F2 12 02 FB | 	rdlong	arg01, objptr
16950     04 E4 85 F1 | 	sub	objptr, #4
16954     F2 14 02 FB | 	rdlong	arg02, objptr
16958     37 00 00 FF 
1695c     58 E4 85 F1 | 	sub	objptr, ##28248
16960     34 FE B0 FD | 	call	#_hg010b_spin2_cls
16964     C5 01 00 FF 
16968     86 12 06 F6 | 	mov	arg01, ##@LR__6126
1696c                 | ' 
1696c                 | ' write(text)
1696c     E8 01 B1 FD | 	call	#_hg010b_spin2_write
16970                 | ' crlf
16970     84 06 B1 FD | 	call	#_hg010b_spin2_crlf
16974     18 00 00 FF 
16978     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1697c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16980     18 00 00 FF 
16984     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
16988                 | ' 
16988                 | ' write(text)
16988     CC 01 B1 FD | 	call	#_hg010b_spin2_write
1698c                 | ' crlf
1698c     68 06 B1 FD | 	call	#_hg010b_spin2_crlf
16990     50 00 00 FF 
16994     58 E5 05 F1 | 	add	objptr, ##41304
16998     F2 12 02 FB | 	rdlong	arg01, objptr
1699c     50 00 00 FF 
169a0     58 E5 85 F1 | 	sub	objptr, ##41304
169a4                 | ' 
169a4                 | ' write(text)
169a4     B0 01 B1 FD | 	call	#_hg010b_spin2_write
169a8                 | ' crlf
169a8     4C 06 B1 FD | 	call	#_hg010b_spin2_crlf
169ac     A7 F0 03 F6 | 	mov	ptra, fp
169b0     B2 00 A0 FD | 	call	#popregs_
169b4                 | _do_mode_ret
169b4     2D 00 64 FD | 	ret
169b8                 | 
169b8                 | ' 
169b8                 | ' '-------------------- mouse
169b8                 | ' 
169b8                 | ' sub do_mouse
169b8                 | _do_mouse
169b8     F8 6E BF FD | 	call	#_pop
169bc     00 FA 4D F2 | 	cmps	result1, #0 wz
169c0                 | ' 
169c0                 | ' t1=pop()
169c0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
169c0     14 00 90 5D |  if_ne	jmp	#LR__1860
169c4     10 12 06 F6 | 	mov	arg01, #16
169c8     00 14 06 F6 | 	mov	arg02, #0
169cc     00 16 06 F6 | 	mov	arg03, #0
169d0     30 F0 B0 FD | 	call	#_hg010b_spin2_setspritesize
169d4     10 00 90 FD | 	jmp	#LR__1861
169d8                 | LR__1860
169d8     10 12 06 F6 | 	mov	arg01, #16
169dc     20 14 06 F6 | 	mov	arg02, #32
169e0     20 16 06 F6 | 	mov	arg03, #32
169e4     1C F0 B0 FD | 	call	#_hg010b_spin2_setspritesize
169e8                 | LR__1861
169e8                 | _do_mouse_ret
169e8     2D 00 64 FD | 	ret
169ec                 | 
169ec                 | ' 
169ec                 | ' '-------------------- mousek
169ec                 | ' 
169ec                 | ' sub do_mousek
169ec                 | _do_mousek
169ec     00 4A 05 F6 | 	mov	COUNT_, #0
169f0     A8 00 A0 FD | 	call	#pushregs_
169f4     0C F0 07 F1 | 	add	ptra, #12
169f8     08 4E 05 F1 | 	add	fp, #8
169fc     A7 3A 68 FC | 	wrlong	#29, fp
16a00     08 4E 85 F1 | 	sub	fp, #8
16a04     51 00 00 FF 
16a08     70 E5 05 F1 | 	add	objptr, ##41840
16a0c     F2 12 02 FB | 	rdlong	arg01, objptr
16a10     51 00 00 FF 
16a14     70 E5 85 F1 | 	sub	objptr, ##41840
16a18     A7 12 62 FC | 	wrlong	arg01, fp
16a1c     A7 12 02 F6 | 	mov	arg01, fp
16a20     28 6F BF FD | 	call	#_push
16a24     A7 F0 03 F6 | 	mov	ptra, fp
16a28     B2 00 A0 FD | 	call	#popregs_
16a2c                 | _do_mousek_ret
16a2c     2D 00 64 FD | 	ret
16a30                 | 
16a30                 | ' 
16a30                 | ' '-------------------- mousew
16a30                 | ' 
16a30                 | ' sub do_mousew
16a30                 | _do_mousew
16a30     00 4A 05 F6 | 	mov	COUNT_, #0
16a34     A8 00 A0 FD | 	call	#pushregs_
16a38     0C F0 07 F1 | 	add	ptra, #12
16a3c     08 4E 05 F1 | 	add	fp, #8
16a40     A7 38 68 FC | 	wrlong	#28, fp
16a44     08 4E 85 F1 | 	sub	fp, #8
16a48     51 00 00 FF 
16a4c     74 E5 05 F1 | 	add	objptr, ##41844
16a50     F2 12 02 FB | 	rdlong	arg01, objptr
16a54     51 00 00 FF 
16a58     74 E5 85 F1 | 	sub	objptr, ##41844
16a5c     A7 12 62 FC | 	wrlong	arg01, fp
16a60     A7 12 02 F6 | 	mov	arg01, fp
16a64     E4 6E BF FD | 	call	#_push
16a68     A7 F0 03 F6 | 	mov	ptra, fp
16a6c     B2 00 A0 FD | 	call	#popregs_
16a70                 | _do_mousew_ret
16a70     2D 00 64 FD | 	ret
16a74                 | 
16a74                 | ' 
16a74                 | ' '-------------------- mousex
16a74                 | ' 
16a74                 | ' sub do_mousex
16a74                 | _do_mousex
16a74     00 4A 05 F6 | 	mov	COUNT_, #0
16a78     A8 00 A0 FD | 	call	#pushregs_
16a7c     0C F0 07 F1 | 	add	ptra, #12
16a80     08 4E 05 F1 | 	add	fp, #8
16a84     A7 3A 68 FC | 	wrlong	#29, fp
16a88     08 4E 85 F1 | 	sub	fp, #8
16a8c     51 00 00 FF 
16a90     68 E5 05 F1 | 	add	objptr, ##41832
16a94     F2 12 02 FB | 	rdlong	arg01, objptr
16a98     51 00 00 FF 
16a9c     68 E5 85 F1 | 	sub	objptr, ##41832
16aa0     A7 12 62 FC | 	wrlong	arg01, fp
16aa4     A7 12 02 F6 | 	mov	arg01, fp
16aa8     A0 6E BF FD | 	call	#_push
16aac     A7 F0 03 F6 | 	mov	ptra, fp
16ab0     B2 00 A0 FD | 	call	#popregs_
16ab4                 | _do_mousex_ret
16ab4     2D 00 64 FD | 	ret
16ab8                 | 
16ab8                 | ' 
16ab8                 | ' '-------------------- mousey
16ab8                 | ' 
16ab8                 | ' sub do_mousey
16ab8                 | _do_mousey
16ab8     00 4A 05 F6 | 	mov	COUNT_, #0
16abc     A8 00 A0 FD | 	call	#pushregs_
16ac0     0C F0 07 F1 | 	add	ptra, #12
16ac4     08 4E 05 F1 | 	add	fp, #8
16ac8     A7 3A 68 FC | 	wrlong	#29, fp
16acc     08 4E 85 F1 | 	sub	fp, #8
16ad0     51 00 00 FF 
16ad4     6C E5 05 F1 | 	add	objptr, ##41836
16ad8     F2 12 02 FB | 	rdlong	arg01, objptr
16adc     51 00 00 FF 
16ae0     6C E5 85 F1 | 	sub	objptr, ##41836
16ae4     A7 12 62 FC | 	wrlong	arg01, fp
16ae8     A7 12 02 F6 | 	mov	arg01, fp
16aec     5C 6E BF FD | 	call	#_push
16af0     A7 F0 03 F6 | 	mov	ptra, fp
16af4     B2 00 A0 FD | 	call	#popregs_
16af8                 | _do_mousey_ret
16af8     2D 00 64 FD | 	ret
16afc                 | 
16afc                 | ' 
16afc                 | ' '------------------ new
16afc                 | ' 
16afc                 | ' sub do_new
16afc                 | _do_new
16afc     03 4A 05 F6 | 	mov	COUNT_, #3
16b00     A8 00 A0 FD | 	call	#pushregs_
16b04                 | ' 
16b04                 | ' if inrun=1 then inrun=2
16b04     50 00 00 FF 
16b08     0C E5 05 F1 | 	add	objptr, ##41228
16b0c     F2 16 02 FB | 	rdlong	arg03, objptr
16b10     50 00 00 FF 
16b14     0C E5 85 F1 | 	sub	objptr, ##41228
16b18     01 16 0E F2 | 	cmp	arg03, #1 wz
16b1c     50 00 00 AF 
16b20     0C E5 05 A1 |  if_e	add	objptr, ##41228
16b24     F2 04 68 AC |  if_e	wrlong	#2, objptr
16b28     50 00 00 AF 
16b2c     0C E5 85 A1 |  if_e	sub	objptr, ##41228
16b30     13 12 C6 F9 | 	decod	arg01, #19
16b34     01 14 66 F6 | 	neg	arg02, #1
16b38     00 E0 B0 FD | 	call	#_pslpoke
16b3c     35 00 00 FF 
16b40     28 E4 05 F1 | 	add	objptr, ##27176
16b44     F2 00 68 FC | 	wrlong	#0, objptr
16b48                 | ' pslpoke(memlo,$FFFFFFFF)
16b48                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
16b48     00 26 06 F6 | 	mov	local01, #0
16b4c     20 00 00 FF 
16b50     10 E4 85 F1 | 	sub	objptr, ##16400
16b54     97 1E 48 FB | 	callpa	#(@LR__1871-@LR__1870)>>2,fcache_load_ptr_
16b58                 | LR__1870
16b58     13 17 02 F6 | 	mov	arg03, local01
16b5c     04 16 66 F0 | 	shl	arg03, #4
16b60     F2 16 02 F1 | 	add	arg03, objptr
16b64     C5 01 00 FF 
16b68     87 14 06 F6 | 	mov	arg02, ##@LR__6127
16b6c     0B 15 62 FC | 	wrlong	arg02, arg03
16b70     13 29 02 F6 | 	mov	local02, local01
16b74     04 28 66 F0 | 	shl	local02, #4
16b78     F2 28 02 F1 | 	add	local02, objptr
16b7c     0C 28 06 F1 | 	add	local02, #12
16b80     14 01 68 FC | 	wrlong	#0, local02
16b84     01 26 06 F1 | 	add	local01, #1
16b88     02 00 00 FF 
16b8c     01 26 56 F2 | 	cmps	local01, ##1025 wc
16b90     C4 FF 9F CD |  if_b	jmp	#LR__1870
16b94                 | LR__1871
16b94     35 00 00 FF 
16b98     90 E4 05 F1 | 	add	objptr, ##27280
16b9c     00 04 80 FF 
16ba0     F2 00 68 FC | 	wrlong	##524288, objptr
16ba4     06 00 00 FF 
16ba8     30 E4 05 F1 | 	add	objptr, ##3120
16bac     00 04 80 FF 
16bb0     F2 00 68 FC | 	wrlong	##524288, objptr
16bb4     04 E4 05 F1 | 	add	objptr, #4
16bb8     00 04 80 FF 
16bbc     F2 00 68 FC | 	wrlong	##524288, objptr
16bc0     0D 00 00 FF 
16bc4     64 E4 85 F1 | 	sub	objptr, ##6756
16bc8     F2 00 68 FC | 	wrlong	#0, objptr
16bcc     07 00 00 FF 
16bd0     24 E4 05 F1 | 	add	objptr, ##3620
16bd4     F2 00 68 FC | 	wrlong	#0, objptr
16bd8     07 00 00 FF 
16bdc     20 E4 85 F1 | 	sub	objptr, ##3616
16be0     00 04 80 FF 
16be4     F2 00 68 FC | 	wrlong	##524288, objptr
16be8     0D 00 00 FF 
16bec     D0 E4 05 F1 | 	add	objptr, ##6864
16bf0     F2 00 68 FC | 	wrlong	#0, objptr
16bf4     C5 01 00 FF 
16bf8     88 2A 06 F6 | 	mov	local03, ##@LR__6128
16bfc     01 00 00 FF 
16c00     E8 E5 05 F1 | 	add	objptr, ##1000
16c04     F2 2A 62 FC | 	wrlong	local03, objptr
16c08     08 00 00 FF 
16c0c     88 E4 85 F1 | 	sub	objptr, ##4232
16c10     F2 00 68 FC | 	wrlong	#0, objptr
16c14     04 E4 05 F1 | 	add	objptr, #4
16c18     FF FF FF FF 
16c1c     F2 FE 6B FC | 	wrlong	##-1, objptr
16c20     06 00 00 FF 
16c24     A0 E4 05 F1 | 	add	objptr, ##3232
16c28     F2 00 68 FC | 	wrlong	#0, objptr
16c2c     04 E4 05 F1 | 	add	objptr, #4
16c30     F2 00 68 FC | 	wrlong	#0, objptr
16c34                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
16c34                 | ' stackpointer=0
16c34                 | ' lineptr=0 
16c34                 | ' programptr=memlo ': stringptr=0
16c34                 | ' dataptr=0 : readline=""
16c34                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
16c34                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
16c34     00 26 06 F6 | 	mov	local01, #0
16c38     06 00 00 FF 
16c3c     9C E4 85 F1 | 	sub	objptr, ##3228
16c40     97 16 48 FB | 	callpa	#(@LR__1873-@LR__1872)>>2,fcache_load_ptr_
16c44                 | LR__1872
16c44     13 29 02 F6 | 	mov	local02, local01
16c48     02 28 66 F0 | 	shl	local02, #2
16c4c     13 29 02 F1 | 	add	local02, local01
16c50     02 28 66 F0 | 	shl	local02, #2
16c54     F2 28 02 F1 | 	add	local02, objptr
16c58     08 28 06 F1 | 	add	local02, #8
16c5c     FF FF FF FF 
16c60     14 FF 6B FC | 	wrlong	##-1, local02
16c64     01 26 06 F1 | 	add	local01, #1
16c68     41 26 56 F2 | 	cmps	local01, #65 wc
16c6c     D4 FF 9F CD |  if_b	jmp	#LR__1872
16c70                 | LR__1873
16c70     4A 00 00 FF 
16c74     B8 E4 85 F1 | 	sub	objptr, ##38072
16c78                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
16c78     00 26 06 F6 | 	mov	local01, #0
16c7c                 | LR__1874
16c7c     13 29 02 F6 | 	mov	local02, local01
16c80     02 28 66 F0 | 	shl	local02, #2
16c84     52 00 00 FF 
16c88     AC E4 05 F1 | 	add	objptr, ##42156
16c8c     F2 28 02 F1 | 	add	local02, objptr
16c90     14 2B 0A FB | 	rdlong	local03, local02 wz
16c94     52 00 00 FF 
16c98     AC E4 85 F1 | 	sub	objptr, ##42156
16c9c     34 00 90 AD |  if_e	jmp	#LR__1875
16ca0     13 13 02 F6 | 	mov	arg01, local01
16ca4     00 14 06 F6 | 	mov	arg02, #0
16ca8     00 16 06 F6 | 	mov	arg03, #0
16cac     54 ED B0 FD | 	call	#_hg010b_spin2_setspritesize
16cb0     13 29 02 F6 | 	mov	local02, local01
16cb4     02 28 66 F0 | 	shl	local02, #2
16cb8     52 00 00 FF 
16cbc     AC E4 05 F1 | 	add	objptr, ##42156
16cc0     F2 28 02 F1 | 	add	local02, objptr
16cc4     14 13 02 FB | 	rdlong	arg01, local02
16cc8     52 00 00 FF 
16ccc     AC E4 85 F1 | 	sub	objptr, ##42156
16cd0     04 5A B1 FD | 	call	#__system___gc_free
16cd4                 | LR__1875
16cd4     01 26 06 F1 | 	add	local01, #1
16cd8     10 26 56 F2 | 	cmps	local01, #16 wc
16cdc     9C FF 9F CD |  if_b	jmp	#LR__1874
16ce0     52 00 00 FF 
16ce4     00 E5 05 F1 | 	add	objptr, ##42240
16ce8     00 C0 9F FF 
16cec     F2 00 68 FC | 	wrlong	##1065353216, objptr
16cf0     04 E4 05 F1 | 	add	objptr, #4
16cf4     00 C0 9F FF 
16cf8     F2 00 68 FC | 	wrlong	##1065353216, objptr
16cfc     52 00 00 FF 
16d00     00 E5 85 F1 | 	sub	objptr, ##42240
16d04     F2 2A 02 FB | 	rdlong	local03, objptr
16d08     52 00 00 FF 
16d0c     EC E4 05 F1 | 	add	objptr, ##42220
16d10     F2 2A 62 FC | 	wrlong	local03, objptr
16d14     52 00 00 FF 
16d18     F0 E4 85 F1 | 	sub	objptr, ##42224
16d1c     11 12 06 F6 | 	mov	arg01, #17
16d20     08 14 06 F6 | 	mov	arg02, #8
16d24     10 16 06 F6 | 	mov	arg03, #16
16d28     D8 EC B0 FD | 	call	#_hg010b_spin2_setspritesize
16d2c     10 12 06 F6 | 	mov	arg01, #16
16d30     20 14 06 F6 | 	mov	arg02, #32
16d34     20 16 06 F6 | 	mov	arg03, #32
16d38     C8 EC B0 FD | 	call	#_hg010b_spin2_setspritesize
16d3c     C5 01 00 FF 
16d40     89 2A 06 F6 | 	mov	local03, ##@LR__6129
16d44     52 00 00 FF 
16d48     1C E5 05 F1 | 	add	objptr, ##42268
16d4c     F2 2A 62 FC | 	wrlong	local03, objptr
16d50     52 00 00 FF 
16d54     1C E5 85 F1 | 	sub	objptr, ##42268
16d58     FC CF B0 FD | 	call	#_init_audio
16d5c     A7 F0 03 F6 | 	mov	ptra, fp
16d60     B2 00 A0 FD | 	call	#popregs_
16d64                 | _do_new_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | ' 
16d68                 | ' '-------------------- next
16d68                 | ' 
16d68                 | ' sub do_next()
16d68                 | _do_next
16d68     04 4A 05 F6 | 	mov	COUNT_, #4
16d6c     A8 00 A0 FD | 	call	#pushregs_
16d70     40 6B BF FD | 	call	#_pop
16d74     FD 26 02 F6 | 	mov	local01, result1
16d78     FE 28 02 F6 | 	mov	local02, result2
16d7c     FF 2A 02 F6 | 	mov	local03, result3
16d80                 | ' t1=pop() :varnum=t1.result.uresult
16d80                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16d80     50 00 00 FF 
16d84     50 E5 05 F1 | 	add	objptr, ##41296
16d88     F2 14 02 FB | 	rdlong	arg02, objptr
16d8c     0A 13 02 F6 | 	mov	arg01, arg02
16d90     02 12 66 F0 | 	shl	arg01, #2
16d94     0A 13 02 F1 | 	add	arg01, arg02
16d98     02 12 66 F0 | 	shl	arg01, #2
16d9c     06 00 00 FF 
16da0     98 E4 85 F1 | 	sub	objptr, ##3224
16da4     F2 12 02 F1 | 	add	arg01, objptr
16da8     08 12 06 F1 | 	add	arg01, #8
16dac     09 15 02 FB | 	rdlong	arg02, arg01
16db0     13 15 0A F2 | 	cmp	arg02, local01 wz
16db4     4A 00 00 FF 
16db8     B8 E4 85 F1 | 	sub	objptr, ##38072
16dbc     10 00 90 AD |  if_e	jmp	#LR__1880
16dc0     25 12 06 F6 | 	mov	arg01, #37
16dc4     00 14 06 F6 | 	mov	arg02, #0
16dc8     D0 DB B0 FD | 	call	#_printerror
16dcc     54 03 90 FD | 	jmp	#LR__1887
16dd0                 | LR__1880
16dd0                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16dd0     13 15 02 F6 | 	mov	arg02, local01
16dd4     04 14 66 F0 | 	shl	arg02, #4
16dd8     15 00 00 FF 
16ddc     18 E4 05 F1 | 	add	objptr, ##10776
16de0     F2 14 02 F1 | 	add	arg02, objptr
16de4     0C 14 06 F1 | 	add	arg02, #12
16de8     0A 15 02 FB | 	rdlong	arg02, arg02
16dec     1E 14 0E F2 | 	cmp	arg02, #30 wz
16df0     15 00 00 FF 
16df4     18 E4 85 F1 | 	sub	objptr, ##10776
16df8     54 00 90 5D |  if_ne	jmp	#LR__1881
16dfc     13 15 02 F6 | 	mov	arg02, local01
16e00     04 14 66 F0 | 	shl	arg02, #4
16e04     15 00 00 FF 
16e08     18 E4 05 F1 | 	add	objptr, ##10776
16e0c     F2 14 02 F1 | 	add	arg02, objptr
16e10     0C 14 06 F1 | 	add	arg02, #12
16e14     0A 39 68 FC | 	wrlong	#28, arg02
16e18     13 2D 02 F6 | 	mov	local04, local01
16e1c     04 2C 66 F0 | 	shl	local04, #4
16e20     F2 2C 02 F1 | 	add	local04, objptr
16e24     13 15 02 F6 | 	mov	arg02, local01
16e28     04 14 66 F0 | 	shl	arg02, #4
16e2c     F2 14 02 F1 | 	add	arg02, objptr
16e30     04 14 06 F1 | 	add	arg02, #4
16e34     0A 13 02 FB | 	rdlong	arg01, arg02
16e38     15 00 00 FF 
16e3c     18 E4 85 F1 | 	sub	objptr, ##10776
16e40     01 14 06 F6 | 	mov	arg02, #1
16e44     F0 48 B1 FD | 	call	#__system___float_tointeger
16e48     04 2C 06 F1 | 	add	local04, #4
16e4c     16 FB 61 FC | 	wrlong	result1, local04
16e50                 | LR__1881
16e50     50 00 00 FF 
16e54     50 E5 05 F1 | 	add	objptr, ##41296
16e58     F2 2C 02 FB | 	rdlong	local04, objptr
16e5c     16 15 02 F6 | 	mov	arg02, local04
16e60     02 14 66 F0 | 	shl	arg02, #2
16e64     16 15 02 F1 | 	add	arg02, local04
16e68     02 14 66 F0 | 	shl	arg02, #2
16e6c     06 00 00 FF 
16e70     98 E4 85 F1 | 	sub	objptr, ##3224
16e74     F2 14 02 F1 | 	add	arg02, objptr
16e78     0C 14 06 F1 | 	add	arg02, #12
16e7c     0A FF 01 FB | 	rdlong	result3, arg02
16e80     13 2D 02 F6 | 	mov	local04, local01
16e84     04 2C 66 F0 | 	shl	local04, #4
16e88     35 00 00 FF 
16e8c     A0 E4 85 F1 | 	sub	objptr, ##27296
16e90     F2 2C 02 F1 | 	add	local04, objptr
16e94     13 15 02 F6 | 	mov	arg02, local01
16e98     04 14 66 F0 | 	shl	arg02, #4
16e9c     F2 14 02 F1 | 	add	arg02, objptr
16ea0     04 14 06 F1 | 	add	arg02, #4
16ea4     0A 13 02 FB | 	rdlong	arg01, arg02
16ea8     FF 12 02 F1 | 	add	arg01, result3
16eac     04 2C 06 F1 | 	add	local04, #4
16eb0     16 13 62 FC | 	wrlong	arg01, local04
16eb4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16eb4                 | ' if fortable(fortop).stepval>=0 then
16eb4     3B 00 00 FF 
16eb8     38 E5 05 F1 | 	add	objptr, ##30520
16ebc     F2 2C 02 FB | 	rdlong	local04, objptr
16ec0     16 13 02 F6 | 	mov	arg01, local04
16ec4     02 12 66 F0 | 	shl	arg01, #2
16ec8     16 13 02 F1 | 	add	arg01, local04
16ecc     02 12 66 F0 | 	shl	arg01, #2
16ed0     06 00 00 FF 
16ed4     98 E4 85 F1 | 	sub	objptr, ##3224
16ed8     F2 12 02 F1 | 	add	arg01, objptr
16edc     0C 12 06 F1 | 	add	arg01, #12
16ee0     09 13 02 FB | 	rdlong	arg01, arg01
16ee4     00 12 56 F2 | 	cmps	arg01, #0 wc
16ee8     4A 00 00 FF 
16eec     B8 E4 85 F1 | 	sub	objptr, ##38072
16ef0     78 00 90 CD |  if_b	jmp	#LR__1882
16ef4                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16ef4     04 26 66 F0 | 	shl	local01, #4
16ef8     15 00 00 FF 
16efc     18 E4 05 F1 | 	add	objptr, ##10776
16f00     F2 26 02 F1 | 	add	local01, objptr
16f04     3B 00 00 FF 
16f08     38 E5 05 F1 | 	add	objptr, ##30520
16f0c     F2 12 02 FB | 	rdlong	arg01, objptr
16f10     09 2D 02 F6 | 	mov	local04, arg01
16f14     02 2C 66 F0 | 	shl	local04, #2
16f18     09 2D 02 F1 | 	add	local04, arg01
16f1c     02 2C 66 F0 | 	shl	local04, #2
16f20     06 00 00 FF 
16f24     98 E4 85 F1 | 	sub	objptr, ##3224
16f28     F2 2C 02 F1 | 	add	local04, objptr
16f2c     04 26 06 F1 | 	add	local01, #4
16f30     13 27 02 FB | 	rdlong	local01, local01
16f34     10 2C 06 F1 | 	add	local04, #16
16f38     16 2D 02 FB | 	rdlong	local04, local04
16f3c     16 27 5A F2 | 	cmps	local01, local04 wcz
16f40     4A 00 00 FF 
16f44     B8 E4 85 F1 | 	sub	objptr, ##38072
16f48     9C 00 90 ED |  if_be	jmp	#LR__1884
16f4c     50 00 00 FF 
16f50     50 E5 05 F1 | 	add	objptr, ##41296
16f54     F2 2C 02 FB | 	rdlong	local04, objptr
16f58     01 2C 86 F1 | 	sub	local04, #1
16f5c     F2 2C 62 FC | 	wrlong	local04, objptr
16f60     50 00 00 FF 
16f64     50 E5 85 F1 | 	sub	objptr, ##41296
16f68     B8 01 90 FD | 	jmp	#LR__1887
16f6c                 | LR__1882
16f6c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16f6c     13 2D 02 F6 | 	mov	local04, local01
16f70     04 2C 66 F0 | 	shl	local04, #4
16f74     15 00 00 FF 
16f78     18 E4 05 F1 | 	add	objptr, ##10776
16f7c     F2 2C 02 F1 | 	add	local04, objptr
16f80     3B 00 00 FF 
16f84     38 E5 05 F1 | 	add	objptr, ##30520
16f88     F2 26 02 FB | 	rdlong	local01, objptr
16f8c     13 13 02 F6 | 	mov	arg01, local01
16f90     02 12 66 F0 | 	shl	arg01, #2
16f94     13 13 02 F1 | 	add	arg01, local01
16f98     02 12 66 F0 | 	shl	arg01, #2
16f9c     06 00 00 FF 
16fa0     98 E4 85 F1 | 	sub	objptr, ##3224
16fa4     F2 12 02 F1 | 	add	arg01, objptr
16fa8     04 2C 06 F1 | 	add	local04, #4
16fac     16 2D 02 FB | 	rdlong	local04, local04
16fb0     10 12 06 F1 | 	add	arg01, #16
16fb4     09 13 02 FB | 	rdlong	arg01, arg01
16fb8     09 2D 52 F2 | 	cmps	local04, arg01 wc
16fbc     4A 00 00 FF 
16fc0     B8 E4 85 F1 | 	sub	objptr, ##38072
16fc4     20 00 90 3D |  if_ae	jmp	#LR__1883
16fc8     50 00 00 FF 
16fcc     50 E5 05 F1 | 	add	objptr, ##41296
16fd0     F2 2C 02 FB | 	rdlong	local04, objptr
16fd4     01 2C 86 F1 | 	sub	local04, #1
16fd8     F2 2C 62 FC | 	wrlong	local04, objptr
16fdc     50 00 00 FF 
16fe0     50 E5 85 F1 | 	sub	objptr, ##41296
16fe4     3C 01 90 FD | 	jmp	#LR__1887
16fe8                 | LR__1883
16fe8                 | LR__1884
16fe8                 | ' ' if not returned, goto pointer 
16fe8                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
16fe8     50 00 00 FF 
16fec     0C E5 05 F1 | 	add	objptr, ##41228
16ff0     F2 2C 02 FB | 	rdlong	local04, objptr
16ff4     50 00 00 FF 
16ff8     0C E5 85 F1 | 	sub	objptr, ##41228
16ffc     01 2C 16 F2 | 	cmp	local04, #1 wc
17000     DC 00 90 CD |  if_b	jmp	#LR__1885
17004     50 00 00 FF 
17008     50 E5 05 F1 | 	add	objptr, ##41296
1700c     F2 2C 02 FB | 	rdlong	local04, objptr
17010     16 27 02 F6 | 	mov	local01, local04
17014     02 26 66 F0 | 	shl	local01, #2
17018     16 27 02 F1 | 	add	local01, local04
1701c     02 26 66 F0 | 	shl	local01, #2
17020     06 00 00 FF 
17024     98 E4 85 F1 | 	sub	objptr, ##3224
17028     F2 26 02 F1 | 	add	local01, objptr
1702c     06 00 00 FF 
17030     20 E4 05 F1 | 	add	objptr, ##3104
17034     F2 2C 02 FB | 	rdlong	local04, objptr
17038     50 00 00 FF 
1703c     D8 E4 85 F1 | 	sub	objptr, ##41176
17040     13 27 02 FB | 	rdlong	local01, local01
17044     13 2D 0A F2 | 	cmp	local04, local01 wz
17048     94 00 90 AD |  if_e	jmp	#LR__1885
1704c     50 00 00 FF 
17050     50 E5 05 F1 | 	add	objptr, ##41296
17054     F2 2C 02 FB | 	rdlong	local04, objptr
17058     16 27 02 F6 | 	mov	local01, local04
1705c     02 26 66 F0 | 	shl	local01, #2
17060     16 27 02 F1 | 	add	local01, local04
17064     02 26 66 F0 | 	shl	local01, #2
17068     06 00 00 FF 
1706c     98 E4 85 F1 | 	sub	objptr, ##3224
17070     F2 26 02 F1 | 	add	local01, objptr
17074     13 27 02 FB | 	rdlong	local01, local01
17078     06 00 00 FF 
1707c     20 E4 05 F1 | 	add	objptr, ##3104
17080     F2 26 62 FC | 	wrlong	local01, objptr
17084     78 E4 05 F1 | 	add	objptr, #120
17088     F2 2C 02 FB | 	rdlong	local04, objptr
1708c     16 27 02 F6 | 	mov	local01, local04
17090     02 26 66 F0 | 	shl	local01, #2
17094     16 27 02 F1 | 	add	local01, local04
17098     02 26 66 F0 | 	shl	local01, #2
1709c     06 00 00 FF 
170a0     98 E4 85 F1 | 	sub	objptr, ##3224
170a4     F2 26 02 F1 | 	add	local01, objptr
170a8     04 26 06 F1 | 	add	local01, #4
170ac     13 27 02 FB | 	rdlong	local01, local01
170b0     06 00 00 FF 
170b4     24 E4 05 F1 | 	add	objptr, ##3108
170b8     F2 26 62 FC | 	wrlong	local01, objptr
170bc     06 00 00 FF 
170c0     40 E4 85 F1 | 	sub	objptr, ##3136
170c4     F2 2C 02 FB | 	rdlong	local04, objptr
170c8     01 2C 86 F1 | 	sub	local04, #1
170cc     04 E4 05 F1 | 	add	objptr, #4
170d0     F2 2C 62 FC | 	wrlong	local04, objptr
170d4     4A 00 00 FF 
170d8     A0 E4 85 F1 | 	sub	objptr, ##38048
170dc     44 00 90 FD | 	jmp	#LR__1886
170e0                 | LR__1885
170e0     50 00 00 FF 
170e4     50 E5 05 F1 | 	add	objptr, ##41296
170e8     F2 2C 02 FB | 	rdlong	local04, objptr
170ec     16 27 02 F6 | 	mov	local01, local04
170f0     02 26 66 F0 | 	shl	local01, #2
170f4     16 27 02 F1 | 	add	local01, local04
170f8     02 26 66 F0 | 	shl	local01, #2
170fc     06 00 00 FF 
17100     98 E4 85 F1 | 	sub	objptr, ##3224
17104     F2 26 02 F1 | 	add	local01, objptr
17108     04 26 06 F1 | 	add	local01, #4
1710c     13 27 02 FB | 	rdlong	local01, local01
17110     01 26 86 F1 | 	sub	local01, #1
17114     18 E4 85 F1 | 	sub	objptr, #24
17118     F2 26 62 FC | 	wrlong	local01, objptr
1711c     4A 00 00 FF 
17120     A0 E4 85 F1 | 	sub	objptr, ##38048
17124                 | LR__1886
17124                 | LR__1887
17124     A7 F0 03 F6 | 	mov	ptra, fp
17128     B2 00 A0 FD | 	call	#popregs_
1712c                 | _do_next_ret
1712c     2D 00 64 FD | 	ret
17130                 | 
17130                 | ' 
17130                 | ' '-------------------- no command (print "Unknown command")
17130                 | ' 
17130                 | ' sub do_no_command
17130                 | _do_no_command
17130     50 00 00 FF 
17134     10 E5 05 F1 | 	add	objptr, ##41232
17138     F2 14 02 FB | 	rdlong	arg02, objptr
1713c     50 00 00 FF 
17140     10 E5 85 F1 | 	sub	objptr, ##41232
17144     17 12 06 F6 | 	mov	arg01, #23
17148     50 D8 B0 FD | 	call	#_printerror
1714c                 | _do_no_command_ret
1714c     2D 00 64 FD | 	ret
17150                 | 
17150                 | ' 
17150                 | ' '-------------------- nothing
17150                 | ' 
17150                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
17150                 | _do_nothing
17150                 | _do_nothing_ret
17150     2D 00 64 FD | 	ret
17154                 | 
17154                 | ' 
17154                 | ' '-------------------- on
17154                 | ' 
17154                 | ' sub do_on
17154                 | _do_on
17154     01 4A 05 F6 | 	mov	COUNT_, #1
17158     A8 00 A0 FD | 	call	#pushregs_
1715c     18 F0 07 F1 | 	add	ptra, #24
17160     4A 00 00 FF 
17164     A0 E4 05 F1 | 	add	objptr, ##38048
17168     F2 12 02 FB | 	rdlong	arg01, objptr
1716c     09 FD 01 F6 | 	mov	result2, arg01
17170     01 FC 65 F0 | 	shl	result2, #1
17174     09 FD 01 F1 | 	add	result2, arg01
17178     02 FC 65 F0 | 	shl	result2, #2
1717c     03 00 00 FF 
17180     04 E4 85 F1 | 	sub	objptr, ##1540
17184     F2 FC 01 F1 | 	add	result2, objptr
17188     FE 12 02 FB | 	rdlong	arg01, result2
1718c     14 4E 05 F1 | 	add	fp, #20
17190     A7 12 62 FC | 	wrlong	arg01, fp
17194     03 00 00 FF 
17198     04 E4 05 F1 | 	add	objptr, ##1540
1719c     F2 12 02 FB | 	rdlong	arg01, objptr
171a0     09 27 02 F6 | 	mov	local01, arg01
171a4     01 26 66 F0 | 	shl	local01, #1
171a8     09 27 02 F1 | 	add	local01, arg01
171ac     02 26 66 F0 | 	shl	local01, #2
171b0     03 00 00 FF 
171b4     04 E4 85 F1 | 	sub	objptr, ##1540
171b8     F2 26 02 F1 | 	add	local01, objptr
171bc     04 26 06 F1 | 	add	local01, #4
171c0     13 27 02 FB | 	rdlong	local01, local01
171c4     08 4E 85 F1 | 	sub	fp, #8
171c8     A7 26 62 FC | 	wrlong	local01, fp
171cc     0C 4E 85 F1 | 	sub	fp, #12
171d0     47 00 00 FF 
171d4     9C E4 85 F1 | 	sub	objptr, ##36508
171d8     D8 66 BF FD | 	call	#_pop
171dc     FF 26 02 F6 | 	mov	local01, result3
171e0     A7 FA 61 FC | 	wrlong	result1, fp
171e4     04 4E 05 F1 | 	add	fp, #4
171e8     A7 FC 61 FC | 	wrlong	result2, fp
171ec     04 4E 05 F1 | 	add	fp, #4
171f0     A7 26 62 FC | 	wrlong	local01, fp
171f4     08 4E 85 F1 | 	sub	fp, #8
171f8     A7 12 02 F6 | 	mov	arg01, fp
171fc     98 68 BF FD | 	call	#_converttoint
17200     10 4E 05 F1 | 	add	fp, #16
17204     A7 FA 61 FC | 	wrlong	result1, fp
17208                 | ' 
17208                 | ' numpar=compiledline(lineptr_e).result.uresult
17208                 | ' skip=compiledline(lineptr_e).result.twowords(1)
17208                 | ' t1=pop()
17208                 | ' t=converttoint(t1)
17208                 | ' if t<1 orelse t>numpar then return
17208     10 4E 85 F1 | 	sub	fp, #16
1720c     01 FA 55 F2 | 	cmps	result1, #1 wc
17210     58 00 90 CD |  if_b	jmp	#LR__1890
17214     10 4E 05 F1 | 	add	fp, #16
17218     A7 26 02 FB | 	rdlong	local01, fp
1721c     04 4E 05 F1 | 	add	fp, #4
17220     A7 12 02 FB | 	rdlong	arg01, fp
17224     14 4E 85 F1 | 	sub	fp, #20
17228     09 27 5A F2 | 	cmps	local01, arg01 wcz
1722c     3C 00 90 1D |  if_a	jmp	#LR__1890
17230     10 4E 05 F1 | 	add	fp, #16
17234     A7 26 02 FB | 	rdlong	local01, fp
17238     01 26 86 F1 | 	sub	local01, #1
1723c     04 4E 85 F1 | 	sub	fp, #4
17240     A7 12 02 FB | 	rdlong	arg01, fp
17244     13 13 02 FD | 	qmul	arg01, local01
17248     4A 00 00 FF 
1724c     A0 E4 05 F1 | 	add	objptr, ##38048
17250     F2 26 02 FB | 	rdlong	local01, objptr
17254     0C 4E 85 F1 | 	sub	fp, #12
17258     18 12 62 FD | 	getqx	arg01
1725c     09 27 02 F1 | 	add	local01, arg01
17260     F2 26 62 FC | 	wrlong	local01, objptr
17264     4A 00 00 FF 
17268     A0 E4 85 F1 | 	sub	objptr, ##38048
1726c                 | LR__1890
1726c     A7 F0 03 F6 | 	mov	ptra, fp
17270     B2 00 A0 FD | 	call	#popregs_
17274                 | _do_on_ret
17274     2D 00 64 FD | 	ret
17278                 | 
17278                 | ' 
17278                 | ' '-------------------- open
17278                 | ' 
17278                 | ' sub do_open
17278                 | _do_open
17278     02 4A 05 F6 | 	mov	COUNT_, #2
1727c     A8 00 A0 FD | 	call	#pushregs_
17280     20 F0 07 F1 | 	add	ptra, #32
17284     4A 00 00 FF 
17288     A0 E4 05 F1 | 	add	objptr, ##38048
1728c     F2 16 02 FB | 	rdlong	arg03, objptr
17290     0B 15 02 F6 | 	mov	arg02, arg03
17294     01 14 66 F0 | 	shl	arg02, #1
17298     0B 15 02 F1 | 	add	arg02, arg03
1729c     02 14 66 F0 | 	shl	arg02, #2
172a0     03 00 00 FF 
172a4     04 E4 85 F1 | 	sub	objptr, ##1540
172a8     F2 14 02 F1 | 	add	arg02, objptr
172ac     0A 17 02 FB | 	rdlong	arg03, arg02
172b0     10 4E 05 F1 | 	add	fp, #16
172b4     A7 16 62 FC | 	wrlong	arg03, fp
172b8     10 4E 85 F1 | 	sub	fp, #16
172bc     47 00 00 FF 
172c0     9C E4 85 F1 | 	sub	objptr, ##36508
172c4     EC 65 BF FD | 	call	#_pop
172c8     FF 16 02 F6 | 	mov	arg03, result3
172cc     A7 FA 61 FC | 	wrlong	result1, fp
172d0     04 4E 05 F1 | 	add	fp, #4
172d4     A7 FC 61 FC | 	wrlong	result2, fp
172d8     04 4E 05 F1 | 	add	fp, #4
172dc     A7 16 62 FC | 	wrlong	arg03, fp
172e0                 | ' 
172e0                 | ' numpar=compiledline(lineptr_e).result.uresult
172e0                 | ' 
172e0                 | ' t1=pop()
172e0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
172e0     08 4E 85 F1 | 	sub	fp, #8
172e4     2B 16 0E F2 | 	cmp	arg03, #43 wz
172e8     18 00 90 5D |  if_ne	jmp	#LR__1900
172ec     A7 12 02 FB | 	rdlong	arg01, fp
172f0     38 67 BF FD | 	call	#_convertstring
172f4     A7 FA 61 FC | 	wrlong	result1, fp
172f8     08 4E 05 F1 | 	add	fp, #8
172fc     A7 3E 68 FC | 	wrlong	#31, fp
17300     08 4E 85 F1 | 	sub	fp, #8
17304                 | LR__1900
17304                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
17304     08 4E 05 F1 | 	add	fp, #8
17308     A7 16 02 FB | 	rdlong	arg03, fp
1730c     08 4E 85 F1 | 	sub	fp, #8
17310     1F 16 0E F2 | 	cmp	arg03, #31 wz
17314     44 00 90 AD |  if_e	jmp	#LR__1901
17318     00 12 06 F6 | 	mov	arg01, #0
1731c     84 6D B1 FD | 	call	#__system___getiolock_0625
17320     FD 12 02 F6 | 	mov	arg01, result1
17324     CC 10 B1 FD | 	call	#__system___lockmem
17328     C5 01 00 FF 
1732c     94 14 06 F6 | 	mov	arg02, ##@LR__6130
17330     00 12 06 F6 | 	mov	arg01, #0
17334     00 16 06 F6 | 	mov	arg03, #0
17338     B0 1D B1 FD | 	call	#__system___basic_print_string
1733c     00 12 06 F6 | 	mov	arg01, #0
17340     0A 14 06 F6 | 	mov	arg02, #10
17344     00 16 06 F6 | 	mov	arg03, #0
17348     48 1D B1 FD | 	call	#__system___basic_print_char
1734c     00 12 06 F6 | 	mov	arg01, #0
17350     50 6D B1 FD | 	call	#__system___getiolock_0625
17354     FD 00 68 FC | 	wrlong	#0, result1
17358     28 02 90 FD | 	jmp	#LR__1912
1735c                 | LR__1901
1735c     A7 16 02 FB | 	rdlong	arg03, fp
17360     0C 4E 05 F1 | 	add	fp, #12
17364     A7 16 62 FC | 	wrlong	arg03, fp
17368     0C 4E 85 F1 | 	sub	fp, #12
1736c     44 65 BF FD | 	call	#_pop
17370     FF 16 02 F6 | 	mov	arg03, result3
17374     A7 FA 61 FC | 	wrlong	result1, fp
17378     04 4E 05 F1 | 	add	fp, #4
1737c     A7 FC 61 FC | 	wrlong	result2, fp
17380     04 4E 05 F1 | 	add	fp, #4
17384     A7 16 62 FC | 	wrlong	arg03, fp
17388                 | ' filename=t1.result.sresult
17388                 | ' t1=pop()
17388                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17388     08 4E 85 F1 | 	sub	fp, #8
1738c     2B 16 0E F2 | 	cmp	arg03, #43 wz
17390     18 00 90 5D |  if_ne	jmp	#LR__1902
17394     A7 12 02 FB | 	rdlong	arg01, fp
17398     90 66 BF FD | 	call	#_convertstring
1739c     A7 FA 61 FC | 	wrlong	result1, fp
173a0     08 4E 05 F1 | 	add	fp, #8
173a4     A7 3E 68 FC | 	wrlong	#31, fp
173a8     08 4E 85 F1 | 	sub	fp, #8
173ac                 | LR__1902
173ac     14 4E 05 F1 | 	add	fp, #20
173b0     A7 00 68 FC | 	wrlong	#0, fp
173b4                 | ' mode=0
173b4                 | ' if t1.result_type=result_string then
173b4     0C 4E 85 F1 | 	sub	fp, #12
173b8     A7 14 02 FB | 	rdlong	arg02, fp
173bc     08 4E 85 F1 | 	sub	fp, #8
173c0     1F 14 0E F2 | 	cmp	arg02, #31 wz
173c4     64 00 90 5D |  if_ne	jmp	#LR__1903
173c8                 | '   if t1.result.sresult="read" then mode=1
173c8     A7 12 02 FB | 	rdlong	arg01, fp
173cc     C5 01 00 FF 
173d0     A6 14 06 F6 | 	mov	arg02, ##@LR__6131
173d4     44 10 B1 FD | 	call	#__system___string_cmp
173d8     00 FA 0D F2 | 	cmp	result1, #0 wz
173dc     14 4E 05 A1 |  if_e	add	fp, #20
173e0     A7 02 68 AC |  if_e	wrlong	#1, fp
173e4     14 4E 85 A1 |  if_e	sub	fp, #20
173e8                 | '   if t1.result.sresult="write" then mode=2
173e8     A7 12 02 FB | 	rdlong	arg01, fp
173ec     C5 01 00 FF 
173f0     AB 14 06 F6 | 	mov	arg02, ##@LR__6132
173f4     24 10 B1 FD | 	call	#__system___string_cmp
173f8     00 FA 0D F2 | 	cmp	result1, #0 wz
173fc     14 4E 05 A1 |  if_e	add	fp, #20
17400     A7 04 68 AC |  if_e	wrlong	#2, fp
17404     14 4E 85 A1 |  if_e	sub	fp, #20
17408                 | '   if t1.result.sresult="append" then mode=4
17408     A7 12 02 FB | 	rdlong	arg01, fp
1740c     C5 01 00 FF 
17410     B1 14 06 F6 | 	mov	arg02, ##@LR__6133
17414     04 10 B1 FD | 	call	#__system___string_cmp
17418     00 FA 0D F2 | 	cmp	result1, #0 wz
1741c     14 4E 05 A1 |  if_e	add	fp, #20
17420     A7 08 68 AC |  if_e	wrlong	#4, fp
17424     14 4E 85 A1 |  if_e	sub	fp, #20
17428     14 00 90 FD | 	jmp	#LR__1904
1742c                 | LR__1903
1742c     A7 12 02 F6 | 	mov	arg01, fp
17430     64 66 BF FD | 	call	#_converttoint
17434     14 4E 05 F1 | 	add	fp, #20
17438     A7 FA 61 FC | 	wrlong	result1, fp
1743c     14 4E 85 F1 | 	sub	fp, #20
17440                 | LR__1904
17440     70 64 BF FD | 	call	#_pop
17444     FF 16 02 F6 | 	mov	arg03, result3
17448     A7 FA 61 FC | 	wrlong	result1, fp
1744c     04 4E 05 F1 | 	add	fp, #4
17450     A7 FC 61 FC | 	wrlong	result2, fp
17454     04 4E 05 F1 | 	add	fp, #4
17458     A7 16 62 FC | 	wrlong	arg03, fp
1745c                 | ' t1=pop()
1745c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
1745c     08 4E 85 F1 | 	sub	fp, #8
17460     2C 16 0E F2 | 	cmp	arg03, #44 wz
17464     44 00 90 AD |  if_e	jmp	#LR__1905
17468     00 12 06 F6 | 	mov	arg01, #0
1746c     34 6C B1 FD | 	call	#__system___getiolock_0625
17470     FD 12 02 F6 | 	mov	arg01, result1
17474     7C 0F B1 FD | 	call	#__system___lockmem
17478     C5 01 00 FF 
1747c     B8 14 06 F6 | 	mov	arg02, ##@LR__6134
17480     00 12 06 F6 | 	mov	arg01, #0
17484     00 16 06 F6 | 	mov	arg03, #0
17488     60 1C B1 FD | 	call	#__system___basic_print_string
1748c     00 12 06 F6 | 	mov	arg01, #0
17490     0A 14 06 F6 | 	mov	arg02, #10
17494     00 16 06 F6 | 	mov	arg03, #0
17498     F8 1B B1 FD | 	call	#__system___basic_print_char
1749c     00 12 06 F6 | 	mov	arg01, #0
174a0     00 6C B1 FD | 	call	#__system___getiolock_0625
174a4     FD 00 68 FC | 	wrlong	#0, result1
174a8     D8 00 90 FD | 	jmp	#LR__1912
174ac                 | LR__1905
174ac     A7 26 02 FB | 	rdlong	local01, fp
174b0     18 4E 05 F1 | 	add	fp, #24
174b4     A7 26 62 FC | 	wrlong	local01, fp
174b8                 | ' channel  = t1.result.iresult
174b8                 | ' select case  mode
174b8     04 4E 85 F1 | 	sub	fp, #4
174bc     A7 28 02 FB | 	rdlong	local02, fp
174c0     14 4E 85 F1 | 	sub	fp, #20
174c4     01 28 86 F1 | 	sub	local02, #1
174c8     04 28 26 F3 | 	fle	local02, #4
174cc     30 28 62 FD | 	jmprel	local02
174d0                 | LR__1906
174d0     10 00 90 FD | 	jmp	#LR__1907
174d4     2C 00 90 FD | 	jmp	#LR__1908
174d8     68 00 90 FD | 	jmp	#LR__1910
174dc     44 00 90 FD | 	jmp	#LR__1909
174e0     60 00 90 FD | 	jmp	#LR__1910
174e4                 | LR__1907
174e4     18 4E 05 F1 | 	add	fp, #24
174e8     A7 12 02 FB | 	rdlong	arg01, fp
174ec     0C 4E 85 F1 | 	sub	fp, #12
174f0     A7 14 02 FB | 	rdlong	arg02, fp
174f4     0C 4E 85 F1 | 	sub	fp, #12
174f8     00 16 06 F6 | 	mov	arg03, #0
174fc     F8 1A B1 FD | 	call	#__system___basic_open_string
17500     80 00 90 FD | 	jmp	#LR__1911
17504                 | LR__1908
17504     18 4E 05 F1 | 	add	fp, #24
17508     A7 12 02 FB | 	rdlong	arg01, fp
1750c     0C 4E 85 F1 | 	sub	fp, #12
17510     A7 14 02 FB | 	rdlong	arg02, fp
17514     0C 4E 85 F1 | 	sub	fp, #12
17518     0D 16 06 F6 | 	mov	arg03, #13
1751c     D8 1A B1 FD | 	call	#__system___basic_open_string
17520     60 00 90 FD | 	jmp	#LR__1911
17524                 | LR__1909
17524     18 4E 05 F1 | 	add	fp, #24
17528     A7 12 02 FB | 	rdlong	arg01, fp
1752c     0C 4E 85 F1 | 	sub	fp, #12
17530     A7 14 02 FB | 	rdlong	arg02, fp
17534     0C 4E 85 F1 | 	sub	fp, #12
17538     25 16 06 F6 | 	mov	arg03, #37
1753c     B8 1A B1 FD | 	call	#__system___basic_open_string
17540     40 00 90 FD | 	jmp	#LR__1911
17544                 | LR__1910
17544     00 12 06 F6 | 	mov	arg01, #0
17548     58 6B B1 FD | 	call	#__system___getiolock_0625
1754c     FD 12 02 F6 | 	mov	arg01, result1
17550     A0 0E B1 FD | 	call	#__system___lockmem
17554     C5 01 00 FF 
17558     CA 14 06 F6 | 	mov	arg02, ##@LR__6135
1755c     00 12 06 F6 | 	mov	arg01, #0
17560     00 16 06 F6 | 	mov	arg03, #0
17564     84 1B B1 FD | 	call	#__system___basic_print_string
17568     00 12 06 F6 | 	mov	arg01, #0
1756c     0A 14 06 F6 | 	mov	arg02, #10
17570     00 16 06 F6 | 	mov	arg03, #0
17574     1C 1B B1 FD | 	call	#__system___basic_print_char
17578     00 12 06 F6 | 	mov	arg01, #0
1757c     24 6B B1 FD | 	call	#__system___getiolock_0625
17580     FD 00 68 FC | 	wrlong	#0, result1
17584                 | LR__1911
17584                 | LR__1912
17584     A7 F0 03 F6 | 	mov	ptra, fp
17588     B2 00 A0 FD | 	call	#popregs_
1758c                 | _do_open_ret
1758c     2D 00 64 FD | 	ret
17590                 | 
17590                 | ' 
17590                 | ' ' ------------------ padrx
17590                 | ' 
17590                 | ' sub do_padrx
17590                 | _do_padrx
17590     02 4A 05 F6 | 	mov	COUNT_, #2
17594     A8 00 A0 FD | 	call	#pushregs_
17598     14 F0 07 F1 | 	add	ptra, #20
1759c     4A 00 00 FF 
175a0     A0 E4 05 F1 | 	add	objptr, ##38048
175a4     F2 26 02 FB | 	rdlong	local01, objptr
175a8     13 17 02 F6 | 	mov	arg03, local01
175ac     01 16 66 F0 | 	shl	arg03, #1
175b0     13 17 02 F1 | 	add	arg03, local01
175b4     02 16 66 F0 | 	shl	arg03, #2
175b8     03 00 00 FF 
175bc     04 E4 85 F1 | 	sub	objptr, ##1540
175c0     F2 16 02 F1 | 	add	arg03, objptr
175c4     0B 17 02 FB | 	rdlong	arg03, arg03
175c8     0C 4E 05 F1 | 	add	fp, #12
175cc     A7 16 62 FC | 	wrlong	arg03, fp
175d0                 | ' 
175d0                 | ' numpar=compiledline(lineptr_e).result.uresult
175d0                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
175d0     0C 4E 85 F1 | 	sub	fp, #12
175d4     02 16 16 F2 | 	cmp	arg03, #2 wc
175d8     47 00 00 FF 
175dc     9C E4 85 F1 | 	sub	objptr, ##36508
175e0     40 00 90 CD |  if_b	jmp	#LR__1920
175e4     00 12 06 F6 | 	mov	arg01, #0
175e8     B8 6A B1 FD | 	call	#__system___getiolock_0625
175ec     FD 12 02 F6 | 	mov	arg01, result1
175f0     00 0E B1 FD | 	call	#__system___lockmem
175f4     C5 01 00 FF 
175f8     DD 14 06 F6 | 	mov	arg02, ##@LR__6136
175fc     00 12 06 F6 | 	mov	arg01, #0
17600     00 16 06 F6 | 	mov	arg03, #0
17604     E4 1A B1 FD | 	call	#__system___basic_print_string
17608     00 12 06 F6 | 	mov	arg01, #0
1760c     94 6A B1 FD | 	call	#__system___getiolock_0625
17610     FD 00 68 FC | 	wrlong	#0, result1
17614     27 12 06 F6 | 	mov	arg01, #39
17618     00 14 06 F6 | 	mov	arg02, #0
1761c     7C D3 B0 FD | 	call	#_printerror
17620     E0 01 90 FD | 	jmp	#LR__1924
17624                 | LR__1920
17624                 | ' if numpar=0 then 
17624     0C 4E 05 F1 | 	add	fp, #12
17628     A7 FE 09 FB | 	rdlong	result3, fp wz
1762c     0C 4E 85 F1 | 	sub	fp, #12
17630     A8 00 90 5D |  if_ne	jmp	#LR__1921
17634     00 C0 1B FF 
17638     00 26 06 F6 | 	mov	local01, ##931135488
1763c     51 00 00 FF 
17640     E8 E5 05 F1 | 	add	objptr, ##41960
17644     F2 12 02 FB | 	rdlong	arg01, objptr
17648     51 00 00 FF 
1764c     E8 E5 85 F1 | 	sub	objptr, ##41960
17650     09 13 52 F6 | 	abs	arg01, arg01 wc
17654     1F 28 C6 C9 |  if_b	decod	local02, #31
17658     00 28 06 36 |  if_ae	mov	local02, #0
1765c     0C 38 B1 FD | 	call	#__system___float_fromuns
17660     14 FB 61 F5 | 	xor	result1, local02
17664     FD 12 02 F6 | 	mov	arg01, result1
17668     FF 7F 23 FF 
1766c     00 14 06 F6 | 	mov	arg02, ##1191181824
17670     00 3E B1 FD | 	call	#__system___float_div
17674     FD 14 02 F6 | 	mov	arg02, result1
17678     13 13 02 F6 | 	mov	arg01, local01
1767c     20 38 B1 FD | 	call	#__system___float_add
17680     10 4E 05 F1 | 	add	fp, #16
17684     A7 FA 61 FC | 	wrlong	result1, fp
17688                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17688     10 4E 85 F1 | 	sub	fp, #16
1768c     1F FA 05 F4 | 	bitl	result1, #31
17690     FD 12 02 F6 | 	mov	arg01, result1
17694     89 41 1D FF 
17698     6F 14 06 F6 | 	mov	arg02, ##981668463
1769c     01 16 06 F6 | 	mov	arg03, #1
176a0     00 40 B1 FD | 	call	#__system___float_cmp
176a4     00 FA 55 F2 | 	cmps	result1, #0 wc
176a8     10 4E 05 C1 |  if_b	add	fp, #16
176ac     A7 00 68 CC |  if_b	wrlong	#0, fp
176b0     10 4E 85 C1 |  if_b	sub	fp, #16
176b4     10 4E 05 F1 | 	add	fp, #16
176b8     A7 26 02 FB | 	rdlong	local01, fp
176bc     10 4E 85 F1 | 	sub	fp, #16
176c0     A7 26 62 FC | 	wrlong	local01, fp
176c4     08 4E 05 F1 | 	add	fp, #8
176c8     A7 3C 68 FC | 	wrlong	#30, fp
176cc     08 4E 85 F1 | 	sub	fp, #8
176d0     A7 12 02 F6 | 	mov	arg01, fp
176d4     74 62 BF FD | 	call	#_push
176d8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
176d8     28 01 90 FD | 	jmp	#LR__1924
176dc                 | LR__1921
176dc     D4 61 BF FD | 	call	#_pop
176e0     A7 FA 61 FC | 	wrlong	result1, fp
176e4     04 4E 05 F1 | 	add	fp, #4
176e8     A7 FC 61 FC | 	wrlong	result2, fp
176ec     04 4E 05 F1 | 	add	fp, #4
176f0     A7 FE 61 FC | 	wrlong	result3, fp
176f4                 | ' t1=pop()
176f4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
176f4     08 4E 85 F1 | 	sub	fp, #8
176f8     1C FE 0D F2 | 	cmp	result3, #28 wz
176fc     08 4E 05 51 |  if_ne	add	fp, #8
17700     A7 26 02 5B |  if_ne	rdlong	local01, fp
17704     08 4E 85 51 |  if_ne	sub	fp, #8
17708     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1770c     E8 00 90 5D |  if_ne	jmp	#LR__1923
17710     A7 26 02 FB | 	rdlong	local01, fp
17714     52 00 00 FF 
17718     60 E5 05 F1 | 	add	objptr, ##42336
1771c     F2 26 62 FC | 	wrlong	local01, objptr
17720                 | '   q=t1.result.uresult
17720                 | '   if q<7 then 
17720     52 00 00 FF 
17724     60 E5 85 F1 | 	sub	objptr, ##42336
17728     07 26 56 F2 | 	cmps	local01, #7 wc
1772c     B8 00 90 3D |  if_ae	jmp	#LR__1922
17730     00 C0 1B FF 
17734     00 26 06 F6 | 	mov	local01, ##931135488
17738     52 00 00 FF 
1773c     60 E5 05 F1 | 	add	objptr, ##42336
17740     F2 16 02 FB | 	rdlong	arg03, objptr
17744     02 16 66 F0 | 	shl	arg03, #2
17748     78 E5 85 F1 | 	sub	objptr, #376
1774c     F2 16 02 F1 | 	add	arg03, objptr
17750     0B 13 02 FB | 	rdlong	arg01, arg03
17754     51 00 00 FF 
17758     E8 E5 85 F1 | 	sub	objptr, ##41960
1775c     09 13 52 F6 | 	abs	arg01, arg01 wc
17760     1F 28 C6 C9 |  if_b	decod	local02, #31
17764     00 28 06 36 |  if_ae	mov	local02, #0
17768     00 37 B1 FD | 	call	#__system___float_fromuns
1776c     14 FB 61 F5 | 	xor	result1, local02
17770     FD 12 02 F6 | 	mov	arg01, result1
17774     FF 7F 23 FF 
17778     00 14 06 F6 | 	mov	arg02, ##1191181824
1777c     F4 3C B1 FD | 	call	#__system___float_div
17780     FD 14 02 F6 | 	mov	arg02, result1
17784     13 13 02 F6 | 	mov	arg01, local01
17788     14 37 B1 FD | 	call	#__system___float_add
1778c     10 4E 05 F1 | 	add	fp, #16
17790     A7 FA 61 FC | 	wrlong	result1, fp
17794                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17794     10 4E 85 F1 | 	sub	fp, #16
17798     1F FA 05 F4 | 	bitl	result1, #31
1779c     FD 12 02 F6 | 	mov	arg01, result1
177a0     89 41 1D FF 
177a4     6F 14 06 F6 | 	mov	arg02, ##981668463
177a8     01 16 06 F6 | 	mov	arg03, #1
177ac     F4 3E B1 FD | 	call	#__system___float_cmp
177b0     00 FA 55 F2 | 	cmps	result1, #0 wc
177b4     10 4E 05 C1 |  if_b	add	fp, #16
177b8     A7 00 68 CC |  if_b	wrlong	#0, fp
177bc     10 4E 85 C1 |  if_b	sub	fp, #16
177c0     10 4E 05 F1 | 	add	fp, #16
177c4     A7 26 02 FB | 	rdlong	local01, fp
177c8     10 4E 85 F1 | 	sub	fp, #16
177cc     A7 26 62 FC | 	wrlong	local01, fp
177d0     08 4E 05 F1 | 	add	fp, #8
177d4     A7 3C 68 FC | 	wrlong	#30, fp
177d8     08 4E 85 F1 | 	sub	fp, #8
177dc     A7 12 02 F6 | 	mov	arg01, fp
177e0     68 61 BF FD | 	call	#_push
177e4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
177e4     1C 00 90 FD | 	jmp	#LR__1924
177e8                 | LR__1922
177e8     29 12 06 F6 | 	mov	arg01, #41
177ec     00 14 06 F6 | 	mov	arg02, #0
177f0     A8 D1 B0 FD | 	call	#_printerror
177f4                 | '      printerror(41) : return
177f4     0C 00 90 FD | 	jmp	#LR__1924
177f8                 | LR__1923
177f8     29 12 06 F6 | 	mov	arg01, #41
177fc     00 14 06 F6 | 	mov	arg02, #0
17800     98 D1 B0 FD | 	call	#_printerror
17804                 | LR__1924
17804     A7 F0 03 F6 | 	mov	ptra, fp
17808     B2 00 A0 FD | 	call	#popregs_
1780c                 | _do_padrx_ret
1780c     2D 00 64 FD | 	ret
17810                 | 
17810                 | ' 
17810                 | ' ' ------------------ padry
17810                 | ' 
17810                 | ' sub do_padry
17810                 | _do_padry
17810     02 4A 05 F6 | 	mov	COUNT_, #2
17814     A8 00 A0 FD | 	call	#pushregs_
17818     14 F0 07 F1 | 	add	ptra, #20
1781c     4A 00 00 FF 
17820     A0 E4 05 F1 | 	add	objptr, ##38048
17824     F2 26 02 FB | 	rdlong	local01, objptr
17828     13 17 02 F6 | 	mov	arg03, local01
1782c     01 16 66 F0 | 	shl	arg03, #1
17830     13 17 02 F1 | 	add	arg03, local01
17834     02 16 66 F0 | 	shl	arg03, #2
17838     03 00 00 FF 
1783c     04 E4 85 F1 | 	sub	objptr, ##1540
17840     F2 16 02 F1 | 	add	arg03, objptr
17844     0B 17 02 FB | 	rdlong	arg03, arg03
17848     0C 4E 05 F1 | 	add	fp, #12
1784c     A7 16 62 FC | 	wrlong	arg03, fp
17850                 | ' 
17850                 | ' numpar=compiledline(lineptr_e).result.uresult
17850                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
17850     0C 4E 85 F1 | 	sub	fp, #12
17854     02 16 16 F2 | 	cmp	arg03, #2 wc
17858     47 00 00 FF 
1785c     9C E4 85 F1 | 	sub	objptr, ##36508
17860     40 00 90 CD |  if_b	jmp	#LR__1930
17864     00 12 06 F6 | 	mov	arg01, #0
17868     38 68 B1 FD | 	call	#__system___getiolock_0625
1786c     FD 12 02 F6 | 	mov	arg01, result1
17870     80 0B B1 FD | 	call	#__system___lockmem
17874     C5 01 00 FF 
17878     E5 14 06 F6 | 	mov	arg02, ##@LR__6137
1787c     00 12 06 F6 | 	mov	arg01, #0
17880     00 16 06 F6 | 	mov	arg03, #0
17884     64 18 B1 FD | 	call	#__system___basic_print_string
17888     00 12 06 F6 | 	mov	arg01, #0
1788c     14 68 B1 FD | 	call	#__system___getiolock_0625
17890     FD 00 68 FC | 	wrlong	#0, result1
17894     27 12 06 F6 | 	mov	arg01, #39
17898     00 14 06 F6 | 	mov	arg02, #0
1789c     FC D0 B0 FD | 	call	#_printerror
178a0     E0 01 90 FD | 	jmp	#LR__1934
178a4                 | LR__1930
178a4                 | ' if numpar=0 then 
178a4     0C 4E 05 F1 | 	add	fp, #12
178a8     A7 FE 09 FB | 	rdlong	result3, fp wz
178ac     0C 4E 85 F1 | 	sub	fp, #12
178b0     A8 00 90 5D |  if_ne	jmp	#LR__1931
178b4     00 C0 1B FF 
178b8     00 26 06 F6 | 	mov	local01, ##931135488
178bc     52 00 00 FF 
178c0     04 E4 05 F1 | 	add	objptr, ##41988
178c4     F2 12 02 FB | 	rdlong	arg01, objptr
178c8     52 00 00 FF 
178cc     04 E4 85 F1 | 	sub	objptr, ##41988
178d0     09 13 52 F6 | 	abs	arg01, arg01 wc
178d4     1F 28 C6 C9 |  if_b	decod	local02, #31
178d8     00 28 06 36 |  if_ae	mov	local02, #0
178dc     8C 35 B1 FD | 	call	#__system___float_fromuns
178e0     14 FB 61 F5 | 	xor	result1, local02
178e4     FD 12 02 F6 | 	mov	arg01, result1
178e8     FF 7F 23 FF 
178ec     00 14 06 F6 | 	mov	arg02, ##1191181824
178f0     80 3B B1 FD | 	call	#__system___float_div
178f4     FD 14 02 F6 | 	mov	arg02, result1
178f8     13 13 02 F6 | 	mov	arg01, local01
178fc     A0 35 B1 FD | 	call	#__system___float_add
17900     10 4E 05 F1 | 	add	fp, #16
17904     A7 FA 61 FC | 	wrlong	result1, fp
17908                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17908     10 4E 85 F1 | 	sub	fp, #16
1790c     1F FA 05 F4 | 	bitl	result1, #31
17910     FD 12 02 F6 | 	mov	arg01, result1
17914     89 41 1D FF 
17918     6F 14 06 F6 | 	mov	arg02, ##981668463
1791c     01 16 06 F6 | 	mov	arg03, #1
17920     80 3D B1 FD | 	call	#__system___float_cmp
17924     00 FA 55 F2 | 	cmps	result1, #0 wc
17928     10 4E 05 C1 |  if_b	add	fp, #16
1792c     A7 00 68 CC |  if_b	wrlong	#0, fp
17930     10 4E 85 C1 |  if_b	sub	fp, #16
17934     10 4E 05 F1 | 	add	fp, #16
17938     A7 26 02 FB | 	rdlong	local01, fp
1793c     10 4E 85 F1 | 	sub	fp, #16
17940     A7 26 62 FC | 	wrlong	local01, fp
17944     08 4E 05 F1 | 	add	fp, #8
17948     A7 3C 68 FC | 	wrlong	#30, fp
1794c     08 4E 85 F1 | 	sub	fp, #8
17950     A7 12 02 F6 | 	mov	arg01, fp
17954     F4 5F BF FD | 	call	#_push
17958                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17958     28 01 90 FD | 	jmp	#LR__1934
1795c                 | LR__1931
1795c     54 5F BF FD | 	call	#_pop
17960     A7 FA 61 FC | 	wrlong	result1, fp
17964     04 4E 05 F1 | 	add	fp, #4
17968     A7 FC 61 FC | 	wrlong	result2, fp
1796c     04 4E 05 F1 | 	add	fp, #4
17970     A7 FE 61 FC | 	wrlong	result3, fp
17974                 | ' t1=pop()
17974                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17974     08 4E 85 F1 | 	sub	fp, #8
17978     1C FE 0D F2 | 	cmp	result3, #28 wz
1797c     08 4E 05 51 |  if_ne	add	fp, #8
17980     A7 26 02 5B |  if_ne	rdlong	local01, fp
17984     08 4E 85 51 |  if_ne	sub	fp, #8
17988     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1798c     E8 00 90 5D |  if_ne	jmp	#LR__1933
17990     A7 26 02 FB | 	rdlong	local01, fp
17994     52 00 00 FF 
17998     60 E5 05 F1 | 	add	objptr, ##42336
1799c     F2 26 62 FC | 	wrlong	local01, objptr
179a0                 | '   q=t1.result.uresult
179a0                 | '   if q<7 then 
179a0     52 00 00 FF 
179a4     60 E5 85 F1 | 	sub	objptr, ##42336
179a8     07 26 56 F2 | 	cmps	local01, #7 wc
179ac     B8 00 90 3D |  if_ae	jmp	#LR__1932
179b0     00 C0 1B FF 
179b4     00 26 06 F6 | 	mov	local01, ##931135488
179b8     52 00 00 FF 
179bc     60 E5 05 F1 | 	add	objptr, ##42336
179c0     F2 16 02 FB | 	rdlong	arg03, objptr
179c4     02 16 66 F0 | 	shl	arg03, #2
179c8     5C E5 85 F1 | 	sub	objptr, #348
179cc     F2 16 02 F1 | 	add	arg03, objptr
179d0     0B 13 02 FB | 	rdlong	arg01, arg03
179d4     52 00 00 FF 
179d8     04 E4 85 F1 | 	sub	objptr, ##41988
179dc     09 13 52 F6 | 	abs	arg01, arg01 wc
179e0     1F 28 C6 C9 |  if_b	decod	local02, #31
179e4     00 28 06 36 |  if_ae	mov	local02, #0
179e8     80 34 B1 FD | 	call	#__system___float_fromuns
179ec     14 FB 61 F5 | 	xor	result1, local02
179f0     FD 12 02 F6 | 	mov	arg01, result1
179f4     FF 7F 23 FF 
179f8     00 14 06 F6 | 	mov	arg02, ##1191181824
179fc     74 3A B1 FD | 	call	#__system___float_div
17a00     FD 14 02 F6 | 	mov	arg02, result1
17a04     13 13 02 F6 | 	mov	arg01, local01
17a08     94 34 B1 FD | 	call	#__system___float_add
17a0c     10 4E 05 F1 | 	add	fp, #16
17a10     A7 FA 61 FC | 	wrlong	result1, fp
17a14                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17a14     10 4E 85 F1 | 	sub	fp, #16
17a18     1F FA 05 F4 | 	bitl	result1, #31
17a1c     FD 12 02 F6 | 	mov	arg01, result1
17a20     89 41 1D FF 
17a24     6F 14 06 F6 | 	mov	arg02, ##981668463
17a28     01 16 06 F6 | 	mov	arg03, #1
17a2c     74 3C B1 FD | 	call	#__system___float_cmp
17a30     00 FA 55 F2 | 	cmps	result1, #0 wc
17a34     10 4E 05 C1 |  if_b	add	fp, #16
17a38     A7 00 68 CC |  if_b	wrlong	#0, fp
17a3c     10 4E 85 C1 |  if_b	sub	fp, #16
17a40     10 4E 05 F1 | 	add	fp, #16
17a44     A7 26 02 FB | 	rdlong	local01, fp
17a48     10 4E 85 F1 | 	sub	fp, #16
17a4c     A7 26 62 FC | 	wrlong	local01, fp
17a50     08 4E 05 F1 | 	add	fp, #8
17a54     A7 3C 68 FC | 	wrlong	#30, fp
17a58     08 4E 85 F1 | 	sub	fp, #8
17a5c     A7 12 02 F6 | 	mov	arg01, fp
17a60     E8 5E BF FD | 	call	#_push
17a64                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17a64     1C 00 90 FD | 	jmp	#LR__1934
17a68                 | LR__1932
17a68     29 12 06 F6 | 	mov	arg01, #41
17a6c     00 14 06 F6 | 	mov	arg02, #0
17a70     28 CF B0 FD | 	call	#_printerror
17a74                 | '      printerror(41) : return
17a74     0C 00 90 FD | 	jmp	#LR__1934
17a78                 | LR__1933
17a78     29 12 06 F6 | 	mov	arg01, #41
17a7c     00 14 06 F6 | 	mov	arg02, #0
17a80     18 CF B0 FD | 	call	#_printerror
17a84                 | LR__1934
17a84     A7 F0 03 F6 | 	mov	ptra, fp
17a88     B2 00 A0 FD | 	call	#popregs_
17a8c                 | _do_padry_ret
17a8c     2D 00 64 FD | 	ret
17a90                 | 
17a90                 | ' 
17a90                 | ' ' ------------------ padrz
17a90                 | ' 
17a90                 | ' sub do_padrz
17a90                 | _do_padrz
17a90     02 4A 05 F6 | 	mov	COUNT_, #2
17a94     A8 00 A0 FD | 	call	#pushregs_
17a98     14 F0 07 F1 | 	add	ptra, #20
17a9c     4A 00 00 FF 
17aa0     A0 E4 05 F1 | 	add	objptr, ##38048
17aa4     F2 26 02 FB | 	rdlong	local01, objptr
17aa8     13 17 02 F6 | 	mov	arg03, local01
17aac     01 16 66 F0 | 	shl	arg03, #1
17ab0     13 17 02 F1 | 	add	arg03, local01
17ab4     02 16 66 F0 | 	shl	arg03, #2
17ab8     03 00 00 FF 
17abc     04 E4 85 F1 | 	sub	objptr, ##1540
17ac0     F2 16 02 F1 | 	add	arg03, objptr
17ac4     0B 17 02 FB | 	rdlong	arg03, arg03
17ac8     0C 4E 05 F1 | 	add	fp, #12
17acc     A7 16 62 FC | 	wrlong	arg03, fp
17ad0                 | ' 
17ad0                 | ' numpar=compiledline(lineptr_e).result.uresult
17ad0                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17ad0     0C 4E 85 F1 | 	sub	fp, #12
17ad4     02 16 16 F2 | 	cmp	arg03, #2 wc
17ad8     47 00 00 FF 
17adc     9C E4 85 F1 | 	sub	objptr, ##36508
17ae0     40 00 90 CD |  if_b	jmp	#LR__1940
17ae4     00 12 06 F6 | 	mov	arg01, #0
17ae8     B8 65 B1 FD | 	call	#__system___getiolock_0625
17aec     FD 12 02 F6 | 	mov	arg01, result1
17af0     00 09 B1 FD | 	call	#__system___lockmem
17af4     C5 01 00 FF 
17af8     ED 14 06 F6 | 	mov	arg02, ##@LR__6138
17afc     00 12 06 F6 | 	mov	arg01, #0
17b00     00 16 06 F6 | 	mov	arg03, #0
17b04     E4 15 B1 FD | 	call	#__system___basic_print_string
17b08     00 12 06 F6 | 	mov	arg01, #0
17b0c     94 65 B1 FD | 	call	#__system___getiolock_0625
17b10     FD 00 68 FC | 	wrlong	#0, result1
17b14     27 12 06 F6 | 	mov	arg01, #39
17b18     00 14 06 F6 | 	mov	arg02, #0
17b1c     7C CE B0 FD | 	call	#_printerror
17b20     E0 01 90 FD | 	jmp	#LR__1944
17b24                 | LR__1940
17b24                 | ' if numpar=0 then 
17b24     0C 4E 05 F1 | 	add	fp, #12
17b28     A7 FE 09 FB | 	rdlong	result3, fp wz
17b2c     0C 4E 85 F1 | 	sub	fp, #12
17b30     A8 00 90 5D |  if_ne	jmp	#LR__1941
17b34     00 C0 1B FF 
17b38     00 26 06 F6 | 	mov	local01, ##931135488
17b3c     52 00 00 FF 
17b40     20 E4 05 F1 | 	add	objptr, ##42016
17b44     F2 12 02 FB | 	rdlong	arg01, objptr
17b48     52 00 00 FF 
17b4c     20 E4 85 F1 | 	sub	objptr, ##42016
17b50     09 13 52 F6 | 	abs	arg01, arg01 wc
17b54     1F 28 C6 C9 |  if_b	decod	local02, #31
17b58     00 28 06 36 |  if_ae	mov	local02, #0
17b5c     0C 33 B1 FD | 	call	#__system___float_fromuns
17b60     14 FB 61 F5 | 	xor	result1, local02
17b64     FD 12 02 F6 | 	mov	arg01, result1
17b68     FF 7F 23 FF 
17b6c     00 14 06 F6 | 	mov	arg02, ##1191181824
17b70     00 39 B1 FD | 	call	#__system___float_div
17b74     FD 14 02 F6 | 	mov	arg02, result1
17b78     13 13 02 F6 | 	mov	arg01, local01
17b7c     20 33 B1 FD | 	call	#__system___float_add
17b80     10 4E 05 F1 | 	add	fp, #16
17b84     A7 FA 61 FC | 	wrlong	result1, fp
17b88                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17b88     10 4E 85 F1 | 	sub	fp, #16
17b8c     1F FA 05 F4 | 	bitl	result1, #31
17b90     FD 12 02 F6 | 	mov	arg01, result1
17b94     89 41 1D FF 
17b98     6F 14 06 F6 | 	mov	arg02, ##981668463
17b9c     01 16 06 F6 | 	mov	arg03, #1
17ba0     00 3B B1 FD | 	call	#__system___float_cmp
17ba4     00 FA 55 F2 | 	cmps	result1, #0 wc
17ba8     10 4E 05 C1 |  if_b	add	fp, #16
17bac     A7 00 68 CC |  if_b	wrlong	#0, fp
17bb0     10 4E 85 C1 |  if_b	sub	fp, #16
17bb4     10 4E 05 F1 | 	add	fp, #16
17bb8     A7 26 02 FB | 	rdlong	local01, fp
17bbc     10 4E 85 F1 | 	sub	fp, #16
17bc0     A7 26 62 FC | 	wrlong	local01, fp
17bc4     08 4E 05 F1 | 	add	fp, #8
17bc8     A7 3C 68 FC | 	wrlong	#30, fp
17bcc     08 4E 85 F1 | 	sub	fp, #8
17bd0     A7 12 02 F6 | 	mov	arg01, fp
17bd4     74 5D BF FD | 	call	#_push
17bd8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17bd8     28 01 90 FD | 	jmp	#LR__1944
17bdc                 | LR__1941
17bdc     D4 5C BF FD | 	call	#_pop
17be0     A7 FA 61 FC | 	wrlong	result1, fp
17be4     04 4E 05 F1 | 	add	fp, #4
17be8     A7 FC 61 FC | 	wrlong	result2, fp
17bec     04 4E 05 F1 | 	add	fp, #4
17bf0     A7 FE 61 FC | 	wrlong	result3, fp
17bf4                 | ' t1=pop()
17bf4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17bf4     08 4E 85 F1 | 	sub	fp, #8
17bf8     1C FE 0D F2 | 	cmp	result3, #28 wz
17bfc     08 4E 05 51 |  if_ne	add	fp, #8
17c00     A7 26 02 5B |  if_ne	rdlong	local01, fp
17c04     08 4E 85 51 |  if_ne	sub	fp, #8
17c08     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17c0c     E8 00 90 5D |  if_ne	jmp	#LR__1943
17c10     A7 26 02 FB | 	rdlong	local01, fp
17c14     52 00 00 FF 
17c18     60 E5 05 F1 | 	add	objptr, ##42336
17c1c     F2 26 62 FC | 	wrlong	local01, objptr
17c20                 | '   q=t1.result.uresult
17c20                 | '   if q<7 then 
17c20     52 00 00 FF 
17c24     60 E5 85 F1 | 	sub	objptr, ##42336
17c28     07 26 56 F2 | 	cmps	local01, #7 wc
17c2c     B8 00 90 3D |  if_ae	jmp	#LR__1942
17c30     00 C0 1B FF 
17c34     00 26 06 F6 | 	mov	local01, ##931135488
17c38     52 00 00 FF 
17c3c     60 E5 05 F1 | 	add	objptr, ##42336
17c40     F2 16 02 FB | 	rdlong	arg03, objptr
17c44     02 16 66 F0 | 	shl	arg03, #2
17c48     40 E5 85 F1 | 	sub	objptr, #320
17c4c     F2 16 02 F1 | 	add	arg03, objptr
17c50     0B 13 02 FB | 	rdlong	arg01, arg03
17c54     52 00 00 FF 
17c58     20 E4 85 F1 | 	sub	objptr, ##42016
17c5c     09 13 52 F6 | 	abs	arg01, arg01 wc
17c60     1F 28 C6 C9 |  if_b	decod	local02, #31
17c64     00 28 06 36 |  if_ae	mov	local02, #0
17c68     00 32 B1 FD | 	call	#__system___float_fromuns
17c6c     14 FB 61 F5 | 	xor	result1, local02
17c70     FD 12 02 F6 | 	mov	arg01, result1
17c74     FF 7F 23 FF 
17c78     00 14 06 F6 | 	mov	arg02, ##1191181824
17c7c     F4 37 B1 FD | 	call	#__system___float_div
17c80     FD 14 02 F6 | 	mov	arg02, result1
17c84     13 13 02 F6 | 	mov	arg01, local01
17c88     14 32 B1 FD | 	call	#__system___float_add
17c8c     10 4E 05 F1 | 	add	fp, #16
17c90     A7 FA 61 FC | 	wrlong	result1, fp
17c94                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17c94     10 4E 85 F1 | 	sub	fp, #16
17c98     1F FA 05 F4 | 	bitl	result1, #31
17c9c     FD 12 02 F6 | 	mov	arg01, result1
17ca0     89 41 1D FF 
17ca4     6F 14 06 F6 | 	mov	arg02, ##981668463
17ca8     01 16 06 F6 | 	mov	arg03, #1
17cac     F4 39 B1 FD | 	call	#__system___float_cmp
17cb0     00 FA 55 F2 | 	cmps	result1, #0 wc
17cb4     10 4E 05 C1 |  if_b	add	fp, #16
17cb8     A7 00 68 CC |  if_b	wrlong	#0, fp
17cbc     10 4E 85 C1 |  if_b	sub	fp, #16
17cc0     10 4E 05 F1 | 	add	fp, #16
17cc4     A7 26 02 FB | 	rdlong	local01, fp
17cc8     10 4E 85 F1 | 	sub	fp, #16
17ccc     A7 26 62 FC | 	wrlong	local01, fp
17cd0     08 4E 05 F1 | 	add	fp, #8
17cd4     A7 3C 68 FC | 	wrlong	#30, fp
17cd8     08 4E 85 F1 | 	sub	fp, #8
17cdc     A7 12 02 F6 | 	mov	arg01, fp
17ce0     68 5C BF FD | 	call	#_push
17ce4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17ce4     1C 00 90 FD | 	jmp	#LR__1944
17ce8                 | LR__1942
17ce8     29 12 06 F6 | 	mov	arg01, #41
17cec     00 14 06 F6 | 	mov	arg02, #0
17cf0     A8 CC B0 FD | 	call	#_printerror
17cf4                 | '      printerror(41) : return
17cf4     0C 00 90 FD | 	jmp	#LR__1944
17cf8                 | LR__1943
17cf8     29 12 06 F6 | 	mov	arg01, #41
17cfc     00 14 06 F6 | 	mov	arg02, #0
17d00     98 CC B0 FD | 	call	#_printerror
17d04                 | LR__1944
17d04     A7 F0 03 F6 | 	mov	ptra, fp
17d08     B2 00 A0 FD | 	call	#popregs_
17d0c                 | _do_padrz_ret
17d0c     2D 00 64 FD | 	ret
17d10                 | 
17d10                 | ' 
17d10                 | ' ' ------------------ pads
17d10                 | ' 
17d10                 | ' sub do_pads
17d10                 | _do_pads
17d10     02 4A 05 F6 | 	mov	COUNT_, #2
17d14     A8 00 A0 FD | 	call	#pushregs_
17d18     14 F0 07 F1 | 	add	ptra, #20
17d1c     4A 00 00 FF 
17d20     A0 E4 05 F1 | 	add	objptr, ##38048
17d24     F2 26 02 FB | 	rdlong	local01, objptr
17d28     13 17 02 F6 | 	mov	arg03, local01
17d2c     01 16 66 F0 | 	shl	arg03, #1
17d30     13 17 02 F1 | 	add	arg03, local01
17d34     02 16 66 F0 | 	shl	arg03, #2
17d38     03 00 00 FF 
17d3c     04 E4 85 F1 | 	sub	objptr, ##1540
17d40     F2 16 02 F1 | 	add	arg03, objptr
17d44     0B 17 02 FB | 	rdlong	arg03, arg03
17d48     0C 4E 05 F1 | 	add	fp, #12
17d4c     A7 16 62 FC | 	wrlong	arg03, fp
17d50                 | ' 
17d50                 | ' numpar=compiledline(lineptr_e).result.uresult
17d50                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
17d50     0C 4E 85 F1 | 	sub	fp, #12
17d54     02 16 16 F2 | 	cmp	arg03, #2 wc
17d58     47 00 00 FF 
17d5c     9C E4 85 F1 | 	sub	objptr, ##36508
17d60     40 00 90 CD |  if_b	jmp	#LR__1950
17d64     00 12 06 F6 | 	mov	arg01, #0
17d68     38 63 B1 FD | 	call	#__system___getiolock_0625
17d6c     FD 12 02 F6 | 	mov	arg01, result1
17d70     80 06 B1 FD | 	call	#__system___lockmem
17d74     C5 01 00 FF 
17d78     F5 14 06 F6 | 	mov	arg02, ##@LR__6139
17d7c     00 12 06 F6 | 	mov	arg01, #0
17d80     00 16 06 F6 | 	mov	arg03, #0
17d84     64 13 B1 FD | 	call	#__system___basic_print_string
17d88     00 12 06 F6 | 	mov	arg01, #0
17d8c     14 63 B1 FD | 	call	#__system___getiolock_0625
17d90     FD 00 68 FC | 	wrlong	#0, result1
17d94     27 12 06 F6 | 	mov	arg01, #39
17d98     00 14 06 F6 | 	mov	arg02, #0
17d9c     FC CB B0 FD | 	call	#_printerror
17da0     E0 01 90 FD | 	jmp	#LR__1954
17da4                 | LR__1950
17da4                 | ' if numpar=0 then 
17da4     0C 4E 05 F1 | 	add	fp, #12
17da8     A7 FE 09 FB | 	rdlong	result3, fp wz
17dac     0C 4E 85 F1 | 	sub	fp, #12
17db0     A8 00 90 5D |  if_ne	jmp	#LR__1951
17db4     00 C0 1B FF 
17db8     00 26 06 F6 | 	mov	local01, ##931135488
17dbc     52 00 00 FF 
17dc0     3C E4 05 F1 | 	add	objptr, ##42044
17dc4     F2 12 02 FB | 	rdlong	arg01, objptr
17dc8     52 00 00 FF 
17dcc     3C E4 85 F1 | 	sub	objptr, ##42044
17dd0     09 13 52 F6 | 	abs	arg01, arg01 wc
17dd4     1F 28 C6 C9 |  if_b	decod	local02, #31
17dd8     00 28 06 36 |  if_ae	mov	local02, #0
17ddc     8C 30 B1 FD | 	call	#__system___float_fromuns
17de0     14 FB 61 F5 | 	xor	result1, local02
17de4     FD 12 02 F6 | 	mov	arg01, result1
17de8     FF 7F 23 FF 
17dec     00 14 06 F6 | 	mov	arg02, ##1191181824
17df0     80 36 B1 FD | 	call	#__system___float_div
17df4     FD 14 02 F6 | 	mov	arg02, result1
17df8     13 13 02 F6 | 	mov	arg01, local01
17dfc     A0 30 B1 FD | 	call	#__system___float_add
17e00     10 4E 05 F1 | 	add	fp, #16
17e04     A7 FA 61 FC | 	wrlong	result1, fp
17e08                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17e08     10 4E 85 F1 | 	sub	fp, #16
17e0c     1F FA 05 F4 | 	bitl	result1, #31
17e10     FD 12 02 F6 | 	mov	arg01, result1
17e14     89 41 1D FF 
17e18     6F 14 06 F6 | 	mov	arg02, ##981668463
17e1c     01 16 06 F6 | 	mov	arg03, #1
17e20     80 38 B1 FD | 	call	#__system___float_cmp
17e24     00 FA 55 F2 | 	cmps	result1, #0 wc
17e28     10 4E 05 C1 |  if_b	add	fp, #16
17e2c     A7 00 68 CC |  if_b	wrlong	#0, fp
17e30     10 4E 85 C1 |  if_b	sub	fp, #16
17e34     10 4E 05 F1 | 	add	fp, #16
17e38     A7 26 02 FB | 	rdlong	local01, fp
17e3c     10 4E 85 F1 | 	sub	fp, #16
17e40     A7 26 62 FC | 	wrlong	local01, fp
17e44     08 4E 05 F1 | 	add	fp, #8
17e48     A7 3C 68 FC | 	wrlong	#30, fp
17e4c     08 4E 85 F1 | 	sub	fp, #8
17e50     A7 12 02 F6 | 	mov	arg01, fp
17e54     F4 5A BF FD | 	call	#_push
17e58                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17e58     28 01 90 FD | 	jmp	#LR__1954
17e5c                 | LR__1951
17e5c     54 5A BF FD | 	call	#_pop
17e60     A7 FA 61 FC | 	wrlong	result1, fp
17e64     04 4E 05 F1 | 	add	fp, #4
17e68     A7 FC 61 FC | 	wrlong	result2, fp
17e6c     04 4E 05 F1 | 	add	fp, #4
17e70     A7 FE 61 FC | 	wrlong	result3, fp
17e74                 | ' t1=pop()
17e74                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17e74     08 4E 85 F1 | 	sub	fp, #8
17e78     1C FE 0D F2 | 	cmp	result3, #28 wz
17e7c     08 4E 05 51 |  if_ne	add	fp, #8
17e80     A7 26 02 5B |  if_ne	rdlong	local01, fp
17e84     08 4E 85 51 |  if_ne	sub	fp, #8
17e88     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17e8c     E8 00 90 5D |  if_ne	jmp	#LR__1953
17e90     A7 26 02 FB | 	rdlong	local01, fp
17e94     52 00 00 FF 
17e98     60 E5 05 F1 | 	add	objptr, ##42336
17e9c     F2 26 62 FC | 	wrlong	local01, objptr
17ea0                 | '   q=t1.result.uresult
17ea0                 | '   if q<7 then 
17ea0     52 00 00 FF 
17ea4     60 E5 85 F1 | 	sub	objptr, ##42336
17ea8     07 26 56 F2 | 	cmps	local01, #7 wc
17eac     B8 00 90 3D |  if_ae	jmp	#LR__1952
17eb0     00 C0 1B FF 
17eb4     00 26 06 F6 | 	mov	local01, ##931135488
17eb8     52 00 00 FF 
17ebc     60 E5 05 F1 | 	add	objptr, ##42336
17ec0     F2 16 02 FB | 	rdlong	arg03, objptr
17ec4     02 16 66 F0 | 	shl	arg03, #2
17ec8     24 E5 85 F1 | 	sub	objptr, #292
17ecc     F2 16 02 F1 | 	add	arg03, objptr
17ed0     0B 13 02 FB | 	rdlong	arg01, arg03
17ed4     52 00 00 FF 
17ed8     3C E4 85 F1 | 	sub	objptr, ##42044
17edc     09 13 52 F6 | 	abs	arg01, arg01 wc
17ee0     1F 28 C6 C9 |  if_b	decod	local02, #31
17ee4     00 28 06 36 |  if_ae	mov	local02, #0
17ee8     80 2F B1 FD | 	call	#__system___float_fromuns
17eec     14 FB 61 F5 | 	xor	result1, local02
17ef0     FD 12 02 F6 | 	mov	arg01, result1
17ef4     FF 7F 23 FF 
17ef8     00 14 06 F6 | 	mov	arg02, ##1191181824
17efc     74 35 B1 FD | 	call	#__system___float_div
17f00     FD 14 02 F6 | 	mov	arg02, result1
17f04     13 13 02 F6 | 	mov	arg01, local01
17f08     94 2F B1 FD | 	call	#__system___float_add
17f0c     10 4E 05 F1 | 	add	fp, #16
17f10     A7 FA 61 FC | 	wrlong	result1, fp
17f14                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17f14     10 4E 85 F1 | 	sub	fp, #16
17f18     1F FA 05 F4 | 	bitl	result1, #31
17f1c     FD 12 02 F6 | 	mov	arg01, result1
17f20     89 41 1D FF 
17f24     6F 14 06 F6 | 	mov	arg02, ##981668463
17f28     01 16 06 F6 | 	mov	arg03, #1
17f2c     74 37 B1 FD | 	call	#__system___float_cmp
17f30     00 FA 55 F2 | 	cmps	result1, #0 wc
17f34     10 4E 05 C1 |  if_b	add	fp, #16
17f38     A7 00 68 CC |  if_b	wrlong	#0, fp
17f3c     10 4E 85 C1 |  if_b	sub	fp, #16
17f40     10 4E 05 F1 | 	add	fp, #16
17f44     A7 26 02 FB | 	rdlong	local01, fp
17f48     10 4E 85 F1 | 	sub	fp, #16
17f4c     A7 26 62 FC | 	wrlong	local01, fp
17f50     08 4E 05 F1 | 	add	fp, #8
17f54     A7 3C 68 FC | 	wrlong	#30, fp
17f58     08 4E 85 F1 | 	sub	fp, #8
17f5c     A7 12 02 F6 | 	mov	arg01, fp
17f60     E8 59 BF FD | 	call	#_push
17f64                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17f64     1C 00 90 FD | 	jmp	#LR__1954
17f68                 | LR__1952
17f68     29 12 06 F6 | 	mov	arg01, #41
17f6c     00 14 06 F6 | 	mov	arg02, #0
17f70     28 CA B0 FD | 	call	#_printerror
17f74                 | '      printerror(41) : return
17f74     0C 00 90 FD | 	jmp	#LR__1954
17f78                 | LR__1953
17f78     29 12 06 F6 | 	mov	arg01, #41
17f7c     00 14 06 F6 | 	mov	arg02, #0
17f80     18 CA B0 FD | 	call	#_printerror
17f84                 | LR__1954
17f84     A7 F0 03 F6 | 	mov	ptra, fp
17f88     B2 00 A0 FD | 	call	#popregs_
17f8c                 | _do_pads_ret
17f8c     2D 00 64 FD | 	ret
17f90                 | 
17f90                 | ' 
17f90                 | ' ' ------------------ padw
17f90                 | ' 
17f90                 | ' sub do_padw
17f90                 | _do_padw
17f90     02 4A 05 F6 | 	mov	COUNT_, #2
17f94     A8 00 A0 FD | 	call	#pushregs_
17f98     14 F0 07 F1 | 	add	ptra, #20
17f9c     4A 00 00 FF 
17fa0     A0 E4 05 F1 | 	add	objptr, ##38048
17fa4     F2 26 02 FB | 	rdlong	local01, objptr
17fa8     13 17 02 F6 | 	mov	arg03, local01
17fac     01 16 66 F0 | 	shl	arg03, #1
17fb0     13 17 02 F1 | 	add	arg03, local01
17fb4     02 16 66 F0 | 	shl	arg03, #2
17fb8     03 00 00 FF 
17fbc     04 E4 85 F1 | 	sub	objptr, ##1540
17fc0     F2 16 02 F1 | 	add	arg03, objptr
17fc4     0B 17 02 FB | 	rdlong	arg03, arg03
17fc8     0C 4E 05 F1 | 	add	fp, #12
17fcc     A7 16 62 FC | 	wrlong	arg03, fp
17fd0                 | ' 
17fd0                 | ' numpar=compiledline(lineptr_e).result.uresult
17fd0                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
17fd0     0C 4E 85 F1 | 	sub	fp, #12
17fd4     02 16 16 F2 | 	cmp	arg03, #2 wc
17fd8     47 00 00 FF 
17fdc     9C E4 85 F1 | 	sub	objptr, ##36508
17fe0     40 00 90 CD |  if_b	jmp	#LR__1960
17fe4     00 12 06 F6 | 	mov	arg01, #0
17fe8     B8 60 B1 FD | 	call	#__system___getiolock_0625
17fec     FD 12 02 F6 | 	mov	arg01, result1
17ff0     00 04 B1 FD | 	call	#__system___lockmem
17ff4     C5 01 00 FF 
17ff8     FC 14 06 F6 | 	mov	arg02, ##@LR__6140
17ffc     00 12 06 F6 | 	mov	arg01, #0
18000     00 16 06 F6 | 	mov	arg03, #0
18004     E4 10 B1 FD | 	call	#__system___basic_print_string
18008     00 12 06 F6 | 	mov	arg01, #0
1800c     94 60 B1 FD | 	call	#__system___getiolock_0625
18010     FD 00 68 FC | 	wrlong	#0, result1
18014     27 12 06 F6 | 	mov	arg01, #39
18018     00 14 06 F6 | 	mov	arg02, #0
1801c     7C C9 B0 FD | 	call	#_printerror
18020     E0 01 90 FD | 	jmp	#LR__1964
18024                 | LR__1960
18024                 | ' if numpar=0 then 
18024     0C 4E 05 F1 | 	add	fp, #12
18028     A7 FE 09 FB | 	rdlong	result3, fp wz
1802c     0C 4E 85 F1 | 	sub	fp, #12
18030     A8 00 90 5D |  if_ne	jmp	#LR__1961
18034     00 C0 1B FF 
18038     00 26 06 F6 | 	mov	local01, ##931135488
1803c     52 00 00 FF 
18040     58 E4 05 F1 | 	add	objptr, ##42072
18044     F2 12 02 FB | 	rdlong	arg01, objptr
18048     52 00 00 FF 
1804c     58 E4 85 F1 | 	sub	objptr, ##42072
18050     09 13 52 F6 | 	abs	arg01, arg01 wc
18054     1F 28 C6 C9 |  if_b	decod	local02, #31
18058     00 28 06 36 |  if_ae	mov	local02, #0
1805c     0C 2E B1 FD | 	call	#__system___float_fromuns
18060     14 FB 61 F5 | 	xor	result1, local02
18064     FD 12 02 F6 | 	mov	arg01, result1
18068     FF 7F 23 FF 
1806c     00 14 06 F6 | 	mov	arg02, ##1191181824
18070     00 34 B1 FD | 	call	#__system___float_div
18074     FD 14 02 F6 | 	mov	arg02, result1
18078     13 13 02 F6 | 	mov	arg01, local01
1807c     20 2E B1 FD | 	call	#__system___float_add
18080     10 4E 05 F1 | 	add	fp, #16
18084     A7 FA 61 FC | 	wrlong	result1, fp
18088                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18088     10 4E 85 F1 | 	sub	fp, #16
1808c     1F FA 05 F4 | 	bitl	result1, #31
18090     FD 12 02 F6 | 	mov	arg01, result1
18094     89 41 1D FF 
18098     6F 14 06 F6 | 	mov	arg02, ##981668463
1809c     01 16 06 F6 | 	mov	arg03, #1
180a0     00 36 B1 FD | 	call	#__system___float_cmp
180a4     00 FA 55 F2 | 	cmps	result1, #0 wc
180a8     10 4E 05 C1 |  if_b	add	fp, #16
180ac     A7 00 68 CC |  if_b	wrlong	#0, fp
180b0     10 4E 85 C1 |  if_b	sub	fp, #16
180b4     10 4E 05 F1 | 	add	fp, #16
180b8     A7 26 02 FB | 	rdlong	local01, fp
180bc     10 4E 85 F1 | 	sub	fp, #16
180c0     A7 26 62 FC | 	wrlong	local01, fp
180c4     08 4E 05 F1 | 	add	fp, #8
180c8     A7 3C 68 FC | 	wrlong	#30, fp
180cc     08 4E 85 F1 | 	sub	fp, #8
180d0     A7 12 02 F6 | 	mov	arg01, fp
180d4     74 58 BF FD | 	call	#_push
180d8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
180d8     28 01 90 FD | 	jmp	#LR__1964
180dc                 | LR__1961
180dc     D4 57 BF FD | 	call	#_pop
180e0     A7 FA 61 FC | 	wrlong	result1, fp
180e4     04 4E 05 F1 | 	add	fp, #4
180e8     A7 FC 61 FC | 	wrlong	result2, fp
180ec     04 4E 05 F1 | 	add	fp, #4
180f0     A7 FE 61 FC | 	wrlong	result3, fp
180f4                 | ' t1=pop()
180f4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
180f4     08 4E 85 F1 | 	sub	fp, #8
180f8     1C FE 0D F2 | 	cmp	result3, #28 wz
180fc     08 4E 05 51 |  if_ne	add	fp, #8
18100     A7 26 02 5B |  if_ne	rdlong	local01, fp
18104     08 4E 85 51 |  if_ne	sub	fp, #8
18108     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1810c     E8 00 90 5D |  if_ne	jmp	#LR__1963
18110     A7 26 02 FB | 	rdlong	local01, fp
18114     52 00 00 FF 
18118     60 E5 05 F1 | 	add	objptr, ##42336
1811c     F2 26 62 FC | 	wrlong	local01, objptr
18120                 | '   q=t1.result.uresult
18120                 | '   if q<7 then 
18120     52 00 00 FF 
18124     60 E5 85 F1 | 	sub	objptr, ##42336
18128     07 26 56 F2 | 	cmps	local01, #7 wc
1812c     B8 00 90 3D |  if_ae	jmp	#LR__1962
18130     00 C0 1B FF 
18134     00 26 06 F6 | 	mov	local01, ##931135488
18138     52 00 00 FF 
1813c     60 E5 05 F1 | 	add	objptr, ##42336
18140     F2 16 02 FB | 	rdlong	arg03, objptr
18144     02 16 66 F0 | 	shl	arg03, #2
18148     08 E5 85 F1 | 	sub	objptr, #264
1814c     F2 16 02 F1 | 	add	arg03, objptr
18150     0B 13 02 FB | 	rdlong	arg01, arg03
18154     52 00 00 FF 
18158     58 E4 85 F1 | 	sub	objptr, ##42072
1815c     09 13 52 F6 | 	abs	arg01, arg01 wc
18160     1F 28 C6 C9 |  if_b	decod	local02, #31
18164     00 28 06 36 |  if_ae	mov	local02, #0
18168     00 2D B1 FD | 	call	#__system___float_fromuns
1816c     14 FB 61 F5 | 	xor	result1, local02
18170     FD 12 02 F6 | 	mov	arg01, result1
18174     FF 7F 23 FF 
18178     00 14 06 F6 | 	mov	arg02, ##1191181824
1817c     F4 32 B1 FD | 	call	#__system___float_div
18180     FD 14 02 F6 | 	mov	arg02, result1
18184     13 13 02 F6 | 	mov	arg01, local01
18188     14 2D B1 FD | 	call	#__system___float_add
1818c     10 4E 05 F1 | 	add	fp, #16
18190     A7 FA 61 FC | 	wrlong	result1, fp
18194                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18194     10 4E 85 F1 | 	sub	fp, #16
18198     1F FA 05 F4 | 	bitl	result1, #31
1819c     FD 12 02 F6 | 	mov	arg01, result1
181a0     89 41 1D FF 
181a4     6F 14 06 F6 | 	mov	arg02, ##981668463
181a8     01 16 06 F6 | 	mov	arg03, #1
181ac     F4 34 B1 FD | 	call	#__system___float_cmp
181b0     00 FA 55 F2 | 	cmps	result1, #0 wc
181b4     10 4E 05 C1 |  if_b	add	fp, #16
181b8     A7 00 68 CC |  if_b	wrlong	#0, fp
181bc     10 4E 85 C1 |  if_b	sub	fp, #16
181c0     10 4E 05 F1 | 	add	fp, #16
181c4     A7 26 02 FB | 	rdlong	local01, fp
181c8     10 4E 85 F1 | 	sub	fp, #16
181cc     A7 26 62 FC | 	wrlong	local01, fp
181d0     08 4E 05 F1 | 	add	fp, #8
181d4     A7 3C 68 FC | 	wrlong	#30, fp
181d8     08 4E 85 F1 | 	sub	fp, #8
181dc     A7 12 02 F6 | 	mov	arg01, fp
181e0     68 57 BF FD | 	call	#_push
181e4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
181e4     1C 00 90 FD | 	jmp	#LR__1964
181e8                 | LR__1962
181e8     29 12 06 F6 | 	mov	arg01, #41
181ec     00 14 06 F6 | 	mov	arg02, #0
181f0     A8 C7 B0 FD | 	call	#_printerror
181f4                 | '      printerror(41) : return
181f4     0C 00 90 FD | 	jmp	#LR__1964
181f8                 | LR__1963
181f8     29 12 06 F6 | 	mov	arg01, #41
181fc     00 14 06 F6 | 	mov	arg02, #0
18200     98 C7 B0 FD | 	call	#_printerror
18204                 | LR__1964
18204     A7 F0 03 F6 | 	mov	ptra, fp
18208     B2 00 A0 FD | 	call	#popregs_
1820c                 | _do_padw_ret
1820c     2D 00 64 FD | 	ret
18210                 | 
18210                 | ' 
18210                 | ' ' ------------------ padx
18210                 | ' 
18210                 | ' sub do_padx
18210                 | _do_padx
18210     02 4A 05 F6 | 	mov	COUNT_, #2
18214     A8 00 A0 FD | 	call	#pushregs_
18218     14 F0 07 F1 | 	add	ptra, #20
1821c     4A 00 00 FF 
18220     A0 E4 05 F1 | 	add	objptr, ##38048
18224     F2 26 02 FB | 	rdlong	local01, objptr
18228     13 17 02 F6 | 	mov	arg03, local01
1822c     01 16 66 F0 | 	shl	arg03, #1
18230     13 17 02 F1 | 	add	arg03, local01
18234     02 16 66 F0 | 	shl	arg03, #2
18238     03 00 00 FF 
1823c     04 E4 85 F1 | 	sub	objptr, ##1540
18240     F2 16 02 F1 | 	add	arg03, objptr
18244     0B 17 02 FB | 	rdlong	arg03, arg03
18248     0C 4E 05 F1 | 	add	fp, #12
1824c     A7 16 62 FC | 	wrlong	arg03, fp
18250                 | ' 
18250                 | ' numpar=compiledline(lineptr_e).result.uresult
18250                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
18250     0C 4E 85 F1 | 	sub	fp, #12
18254     02 16 16 F2 | 	cmp	arg03, #2 wc
18258     47 00 00 FF 
1825c     9C E4 85 F1 | 	sub	objptr, ##36508
18260     40 00 90 CD |  if_b	jmp	#LR__1970
18264     00 12 06 F6 | 	mov	arg01, #0
18268     38 5E B1 FD | 	call	#__system___getiolock_0625
1826c     FD 12 02 F6 | 	mov	arg01, result1
18270     80 01 B1 FD | 	call	#__system___lockmem
18274     C5 01 00 FF 
18278     03 15 06 F6 | 	mov	arg02, ##@LR__6141
1827c     00 12 06 F6 | 	mov	arg01, #0
18280     00 16 06 F6 | 	mov	arg03, #0
18284     64 0E B1 FD | 	call	#__system___basic_print_string
18288     00 12 06 F6 | 	mov	arg01, #0
1828c     14 5E B1 FD | 	call	#__system___getiolock_0625
18290     FD 00 68 FC | 	wrlong	#0, result1
18294     27 12 06 F6 | 	mov	arg01, #39
18298     00 14 06 F6 | 	mov	arg02, #0
1829c     FC C6 B0 FD | 	call	#_printerror
182a0     E0 01 90 FD | 	jmp	#LR__1974
182a4                 | LR__1970
182a4                 | ' if numpar=0 then 
182a4     0C 4E 05 F1 | 	add	fp, #12
182a8     A7 FE 09 FB | 	rdlong	result3, fp wz
182ac     0C 4E 85 F1 | 	sub	fp, #12
182b0     A8 00 90 5D |  if_ne	jmp	#LR__1971
182b4     00 C0 1B FF 
182b8     00 26 06 F6 | 	mov	local01, ##931135488
182bc     51 00 00 FF 
182c0     78 E5 05 F1 | 	add	objptr, ##41848
182c4     F2 12 02 FB | 	rdlong	arg01, objptr
182c8     51 00 00 FF 
182cc     78 E5 85 F1 | 	sub	objptr, ##41848
182d0     09 13 52 F6 | 	abs	arg01, arg01 wc
182d4     1F 28 C6 C9 |  if_b	decod	local02, #31
182d8     00 28 06 36 |  if_ae	mov	local02, #0
182dc     8C 2B B1 FD | 	call	#__system___float_fromuns
182e0     14 FB 61 F5 | 	xor	result1, local02
182e4     FD 12 02 F6 | 	mov	arg01, result1
182e8     FF 7F 23 FF 
182ec     00 14 06 F6 | 	mov	arg02, ##1191181824
182f0     80 31 B1 FD | 	call	#__system___float_div
182f4     FD 14 02 F6 | 	mov	arg02, result1
182f8     13 13 02 F6 | 	mov	arg01, local01
182fc     A0 2B B1 FD | 	call	#__system___float_add
18300     10 4E 05 F1 | 	add	fp, #16
18304     A7 FA 61 FC | 	wrlong	result1, fp
18308                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18308     10 4E 85 F1 | 	sub	fp, #16
1830c     1F FA 05 F4 | 	bitl	result1, #31
18310     FD 12 02 F6 | 	mov	arg01, result1
18314     89 41 1D FF 
18318     6F 14 06 F6 | 	mov	arg02, ##981668463
1831c     01 16 06 F6 | 	mov	arg03, #1
18320     80 33 B1 FD | 	call	#__system___float_cmp
18324     00 FA 55 F2 | 	cmps	result1, #0 wc
18328     10 4E 05 C1 |  if_b	add	fp, #16
1832c     A7 00 68 CC |  if_b	wrlong	#0, fp
18330     10 4E 85 C1 |  if_b	sub	fp, #16
18334     10 4E 05 F1 | 	add	fp, #16
18338     A7 26 02 FB | 	rdlong	local01, fp
1833c     10 4E 85 F1 | 	sub	fp, #16
18340     A7 26 62 FC | 	wrlong	local01, fp
18344     08 4E 05 F1 | 	add	fp, #8
18348     A7 3C 68 FC | 	wrlong	#30, fp
1834c     08 4E 85 F1 | 	sub	fp, #8
18350     A7 12 02 F6 | 	mov	arg01, fp
18354     F4 55 BF FD | 	call	#_push
18358                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
18358     28 01 90 FD | 	jmp	#LR__1974
1835c                 | LR__1971
1835c     54 55 BF FD | 	call	#_pop
18360     A7 FA 61 FC | 	wrlong	result1, fp
18364     04 4E 05 F1 | 	add	fp, #4
18368     A7 FC 61 FC | 	wrlong	result2, fp
1836c     04 4E 05 F1 | 	add	fp, #4
18370     A7 FE 61 FC | 	wrlong	result3, fp
18374                 | ' t1=pop()
18374                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18374     08 4E 85 F1 | 	sub	fp, #8
18378     1C FE 0D F2 | 	cmp	result3, #28 wz
1837c     08 4E 05 51 |  if_ne	add	fp, #8
18380     A7 26 02 5B |  if_ne	rdlong	local01, fp
18384     08 4E 85 51 |  if_ne	sub	fp, #8
18388     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1838c     E8 00 90 5D |  if_ne	jmp	#LR__1973
18390     A7 26 02 FB | 	rdlong	local01, fp
18394     52 00 00 FF 
18398     60 E5 05 F1 | 	add	objptr, ##42336
1839c     F2 26 62 FC | 	wrlong	local01, objptr
183a0                 | '   q=t1.result.uresult
183a0                 | '   if q<7 then 
183a0     52 00 00 FF 
183a4     60 E5 85 F1 | 	sub	objptr, ##42336
183a8     07 26 56 F2 | 	cmps	local01, #7 wc
183ac     B8 00 90 3D |  if_ae	jmp	#LR__1972
183b0     00 C0 1B FF 
183b4     00 26 06 F6 | 	mov	local01, ##931135488
183b8     52 00 00 FF 
183bc     60 E5 05 F1 | 	add	objptr, ##42336
183c0     F2 16 02 FB | 	rdlong	arg03, objptr
183c4     02 16 66 F0 | 	shl	arg03, #2
183c8     E8 E5 85 F1 | 	sub	objptr, #488
183cc     F2 16 02 F1 | 	add	arg03, objptr
183d0     0B 13 02 FB | 	rdlong	arg01, arg03
183d4     51 00 00 FF 
183d8     78 E5 85 F1 | 	sub	objptr, ##41848
183dc     09 13 52 F6 | 	abs	arg01, arg01 wc
183e0     1F 28 C6 C9 |  if_b	decod	local02, #31
183e4     00 28 06 36 |  if_ae	mov	local02, #0
183e8     80 2A B1 FD | 	call	#__system___float_fromuns
183ec     14 FB 61 F5 | 	xor	result1, local02
183f0     FD 12 02 F6 | 	mov	arg01, result1
183f4     FF 7F 23 FF 
183f8     00 14 06 F6 | 	mov	arg02, ##1191181824
183fc     74 30 B1 FD | 	call	#__system___float_div
18400     FD 14 02 F6 | 	mov	arg02, result1
18404     13 13 02 F6 | 	mov	arg01, local01
18408     94 2A B1 FD | 	call	#__system___float_add
1840c     10 4E 05 F1 | 	add	fp, #16
18410     A7 FA 61 FC | 	wrlong	result1, fp
18414                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18414     10 4E 85 F1 | 	sub	fp, #16
18418     1F FA 05 F4 | 	bitl	result1, #31
1841c     FD 12 02 F6 | 	mov	arg01, result1
18420     89 41 1D FF 
18424     6F 14 06 F6 | 	mov	arg02, ##981668463
18428     01 16 06 F6 | 	mov	arg03, #1
1842c     74 32 B1 FD | 	call	#__system___float_cmp
18430     00 FA 55 F2 | 	cmps	result1, #0 wc
18434     10 4E 05 C1 |  if_b	add	fp, #16
18438     A7 00 68 CC |  if_b	wrlong	#0, fp
1843c     10 4E 85 C1 |  if_b	sub	fp, #16
18440     10 4E 05 F1 | 	add	fp, #16
18444     A7 26 02 FB | 	rdlong	local01, fp
18448     10 4E 85 F1 | 	sub	fp, #16
1844c     A7 26 62 FC | 	wrlong	local01, fp
18450     08 4E 05 F1 | 	add	fp, #8
18454     A7 3C 68 FC | 	wrlong	#30, fp
18458     08 4E 85 F1 | 	sub	fp, #8
1845c     A7 12 02 F6 | 	mov	arg01, fp
18460     E8 54 BF FD | 	call	#_push
18464                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18464     1C 00 90 FD | 	jmp	#LR__1974
18468                 | LR__1972
18468     29 12 06 F6 | 	mov	arg01, #41
1846c     00 14 06 F6 | 	mov	arg02, #0
18470     28 C5 B0 FD | 	call	#_printerror
18474                 | '      printerror(41) : return
18474     0C 00 90 FD | 	jmp	#LR__1974
18478                 | LR__1973
18478     29 12 06 F6 | 	mov	arg01, #41
1847c     00 14 06 F6 | 	mov	arg02, #0
18480     18 C5 B0 FD | 	call	#_printerror
18484                 | LR__1974
18484     A7 F0 03 F6 | 	mov	ptra, fp
18488     B2 00 A0 FD | 	call	#popregs_
1848c                 | _do_padx_ret
1848c     2D 00 64 FD | 	ret
18490                 | 
18490                 | ' 
18490                 | ' ' ------------------ pady
18490                 | ' 
18490                 | ' sub do_pady
18490                 | _do_pady
18490     02 4A 05 F6 | 	mov	COUNT_, #2
18494     A8 00 A0 FD | 	call	#pushregs_
18498     14 F0 07 F1 | 	add	ptra, #20
1849c     4A 00 00 FF 
184a0     A0 E4 05 F1 | 	add	objptr, ##38048
184a4     F2 26 02 FB | 	rdlong	local01, objptr
184a8     13 17 02 F6 | 	mov	arg03, local01
184ac     01 16 66 F0 | 	shl	arg03, #1
184b0     13 17 02 F1 | 	add	arg03, local01
184b4     02 16 66 F0 | 	shl	arg03, #2
184b8     03 00 00 FF 
184bc     04 E4 85 F1 | 	sub	objptr, ##1540
184c0     F2 16 02 F1 | 	add	arg03, objptr
184c4     0B 17 02 FB | 	rdlong	arg03, arg03
184c8     0C 4E 05 F1 | 	add	fp, #12
184cc     A7 16 62 FC | 	wrlong	arg03, fp
184d0                 | ' 
184d0                 | ' numpar=compiledline(lineptr_e).result.uresult
184d0                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
184d0     0C 4E 85 F1 | 	sub	fp, #12
184d4     02 16 16 F2 | 	cmp	arg03, #2 wc
184d8     47 00 00 FF 
184dc     9C E4 85 F1 | 	sub	objptr, ##36508
184e0     40 00 90 CD |  if_b	jmp	#LR__1980
184e4     00 12 06 F6 | 	mov	arg01, #0
184e8     B8 5B B1 FD | 	call	#__system___getiolock_0625
184ec     FD 12 02 F6 | 	mov	arg01, result1
184f0     00 FF B0 FD | 	call	#__system___lockmem
184f4     C5 01 00 FF 
184f8     0A 15 06 F6 | 	mov	arg02, ##@LR__6142
184fc     00 12 06 F6 | 	mov	arg01, #0
18500     00 16 06 F6 | 	mov	arg03, #0
18504     E4 0B B1 FD | 	call	#__system___basic_print_string
18508     00 12 06 F6 | 	mov	arg01, #0
1850c     94 5B B1 FD | 	call	#__system___getiolock_0625
18510     FD 00 68 FC | 	wrlong	#0, result1
18514     27 12 06 F6 | 	mov	arg01, #39
18518     00 14 06 F6 | 	mov	arg02, #0
1851c     7C C4 B0 FD | 	call	#_printerror
18520     E0 01 90 FD | 	jmp	#LR__1984
18524                 | LR__1980
18524                 | ' if numpar=0 then 
18524     0C 4E 05 F1 | 	add	fp, #12
18528     A7 FE 09 FB | 	rdlong	result3, fp wz
1852c     0C 4E 85 F1 | 	sub	fp, #12
18530     A8 00 90 5D |  if_ne	jmp	#LR__1981
18534     00 C0 1B FF 
18538     00 26 06 F6 | 	mov	local01, ##931135488
1853c     51 00 00 FF 
18540     94 E5 05 F1 | 	add	objptr, ##41876
18544     F2 12 02 FB | 	rdlong	arg01, objptr
18548     51 00 00 FF 
1854c     94 E5 85 F1 | 	sub	objptr, ##41876
18550     09 13 52 F6 | 	abs	arg01, arg01 wc
18554     1F 28 C6 C9 |  if_b	decod	local02, #31
18558     00 28 06 36 |  if_ae	mov	local02, #0
1855c     0C 29 B1 FD | 	call	#__system___float_fromuns
18560     14 FB 61 F5 | 	xor	result1, local02
18564     FD 12 02 F6 | 	mov	arg01, result1
18568     FF 7F 23 FF 
1856c     00 14 06 F6 | 	mov	arg02, ##1191181824
18570     00 2F B1 FD | 	call	#__system___float_div
18574     FD 14 02 F6 | 	mov	arg02, result1
18578     13 13 02 F6 | 	mov	arg01, local01
1857c     20 29 B1 FD | 	call	#__system___float_add
18580     10 4E 05 F1 | 	add	fp, #16
18584     A7 FA 61 FC | 	wrlong	result1, fp
18588                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18588     10 4E 85 F1 | 	sub	fp, #16
1858c     1F FA 05 F4 | 	bitl	result1, #31
18590     FD 12 02 F6 | 	mov	arg01, result1
18594     89 41 1D FF 
18598     6F 14 06 F6 | 	mov	arg02, ##981668463
1859c     01 16 06 F6 | 	mov	arg03, #1
185a0     00 31 B1 FD | 	call	#__system___float_cmp
185a4     00 FA 55 F2 | 	cmps	result1, #0 wc
185a8     10 4E 05 C1 |  if_b	add	fp, #16
185ac     A7 00 68 CC |  if_b	wrlong	#0, fp
185b0     10 4E 85 C1 |  if_b	sub	fp, #16
185b4     10 4E 05 F1 | 	add	fp, #16
185b8     A7 26 02 FB | 	rdlong	local01, fp
185bc     10 4E 85 F1 | 	sub	fp, #16
185c0     A7 26 62 FC | 	wrlong	local01, fp
185c4     08 4E 05 F1 | 	add	fp, #8
185c8     A7 3C 68 FC | 	wrlong	#30, fp
185cc     08 4E 85 F1 | 	sub	fp, #8
185d0     A7 12 02 F6 | 	mov	arg01, fp
185d4     74 53 BF FD | 	call	#_push
185d8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
185d8     28 01 90 FD | 	jmp	#LR__1984
185dc                 | LR__1981
185dc     D4 52 BF FD | 	call	#_pop
185e0     A7 FA 61 FC | 	wrlong	result1, fp
185e4     04 4E 05 F1 | 	add	fp, #4
185e8     A7 FC 61 FC | 	wrlong	result2, fp
185ec     04 4E 05 F1 | 	add	fp, #4
185f0     A7 FE 61 FC | 	wrlong	result3, fp
185f4                 | ' t1=pop()
185f4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
185f4     08 4E 85 F1 | 	sub	fp, #8
185f8     1C FE 0D F2 | 	cmp	result3, #28 wz
185fc     08 4E 05 51 |  if_ne	add	fp, #8
18600     A7 26 02 5B |  if_ne	rdlong	local01, fp
18604     08 4E 85 51 |  if_ne	sub	fp, #8
18608     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1860c     E8 00 90 5D |  if_ne	jmp	#LR__1983
18610     A7 26 02 FB | 	rdlong	local01, fp
18614     52 00 00 FF 
18618     60 E5 05 F1 | 	add	objptr, ##42336
1861c     F2 26 62 FC | 	wrlong	local01, objptr
18620                 | '   q=t1.result.uresult
18620                 | '   if q<7 then 
18620     52 00 00 FF 
18624     60 E5 85 F1 | 	sub	objptr, ##42336
18628     07 26 56 F2 | 	cmps	local01, #7 wc
1862c     B8 00 90 3D |  if_ae	jmp	#LR__1982
18630     00 C0 1B FF 
18634     00 26 06 F6 | 	mov	local01, ##931135488
18638     52 00 00 FF 
1863c     60 E5 05 F1 | 	add	objptr, ##42336
18640     F2 16 02 FB | 	rdlong	arg03, objptr
18644     02 16 66 F0 | 	shl	arg03, #2
18648     CC E5 85 F1 | 	sub	objptr, #460
1864c     F2 16 02 F1 | 	add	arg03, objptr
18650     0B 13 02 FB | 	rdlong	arg01, arg03
18654     51 00 00 FF 
18658     94 E5 85 F1 | 	sub	objptr, ##41876
1865c     09 13 52 F6 | 	abs	arg01, arg01 wc
18660     1F 28 C6 C9 |  if_b	decod	local02, #31
18664     00 28 06 36 |  if_ae	mov	local02, #0
18668     00 28 B1 FD | 	call	#__system___float_fromuns
1866c     14 FB 61 F5 | 	xor	result1, local02
18670     FD 12 02 F6 | 	mov	arg01, result1
18674     FF 7F 23 FF 
18678     00 14 06 F6 | 	mov	arg02, ##1191181824
1867c     F4 2D B1 FD | 	call	#__system___float_div
18680     FD 14 02 F6 | 	mov	arg02, result1
18684     13 13 02 F6 | 	mov	arg01, local01
18688     14 28 B1 FD | 	call	#__system___float_add
1868c     10 4E 05 F1 | 	add	fp, #16
18690     A7 FA 61 FC | 	wrlong	result1, fp
18694                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18694     10 4E 85 F1 | 	sub	fp, #16
18698     1F FA 05 F4 | 	bitl	result1, #31
1869c     FD 12 02 F6 | 	mov	arg01, result1
186a0     89 41 1D FF 
186a4     6F 14 06 F6 | 	mov	arg02, ##981668463
186a8     01 16 06 F6 | 	mov	arg03, #1
186ac     F4 2F B1 FD | 	call	#__system___float_cmp
186b0     00 FA 55 F2 | 	cmps	result1, #0 wc
186b4     10 4E 05 C1 |  if_b	add	fp, #16
186b8     A7 00 68 CC |  if_b	wrlong	#0, fp
186bc     10 4E 85 C1 |  if_b	sub	fp, #16
186c0     10 4E 05 F1 | 	add	fp, #16
186c4     A7 26 02 FB | 	rdlong	local01, fp
186c8     10 4E 85 F1 | 	sub	fp, #16
186cc     A7 26 62 FC | 	wrlong	local01, fp
186d0     08 4E 05 F1 | 	add	fp, #8
186d4     A7 3C 68 FC | 	wrlong	#30, fp
186d8     08 4E 85 F1 | 	sub	fp, #8
186dc     A7 12 02 F6 | 	mov	arg01, fp
186e0     68 52 BF FD | 	call	#_push
186e4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
186e4     1C 00 90 FD | 	jmp	#LR__1984
186e8                 | LR__1982
186e8     29 12 06 F6 | 	mov	arg01, #41
186ec     00 14 06 F6 | 	mov	arg02, #0
186f0     A8 C2 B0 FD | 	call	#_printerror
186f4                 | '      printerror(41) : return
186f4     0C 00 90 FD | 	jmp	#LR__1984
186f8                 | LR__1983
186f8     29 12 06 F6 | 	mov	arg01, #41
186fc     00 14 06 F6 | 	mov	arg02, #0
18700     98 C2 B0 FD | 	call	#_printerror
18704                 | LR__1984
18704     A7 F0 03 F6 | 	mov	ptra, fp
18708     B2 00 A0 FD | 	call	#popregs_
1870c                 | _do_pady_ret
1870c     2D 00 64 FD | 	ret
18710                 | 
18710                 | ' 
18710                 | ' ' ------------------ padz
18710                 | ' 
18710                 | ' sub do_padz
18710                 | _do_padz
18710     02 4A 05 F6 | 	mov	COUNT_, #2
18714     A8 00 A0 FD | 	call	#pushregs_
18718     14 F0 07 F1 | 	add	ptra, #20
1871c     4A 00 00 FF 
18720     A0 E4 05 F1 | 	add	objptr, ##38048
18724     F2 26 02 FB | 	rdlong	local01, objptr
18728     13 17 02 F6 | 	mov	arg03, local01
1872c     01 16 66 F0 | 	shl	arg03, #1
18730     13 17 02 F1 | 	add	arg03, local01
18734     02 16 66 F0 | 	shl	arg03, #2
18738     03 00 00 FF 
1873c     04 E4 85 F1 | 	sub	objptr, ##1540
18740     F2 16 02 F1 | 	add	arg03, objptr
18744     0B 17 02 FB | 	rdlong	arg03, arg03
18748     0C 4E 05 F1 | 	add	fp, #12
1874c     A7 16 62 FC | 	wrlong	arg03, fp
18750                 | ' 
18750                 | ' numpar=compiledline(lineptr_e).result.uresult
18750                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
18750     0C 4E 85 F1 | 	sub	fp, #12
18754     02 16 16 F2 | 	cmp	arg03, #2 wc
18758     47 00 00 FF 
1875c     9C E4 85 F1 | 	sub	objptr, ##36508
18760     40 00 90 CD |  if_b	jmp	#LR__1990
18764     00 12 06 F6 | 	mov	arg01, #0
18768     38 59 B1 FD | 	call	#__system___getiolock_0625
1876c     FD 12 02 F6 | 	mov	arg01, result1
18770     80 FC B0 FD | 	call	#__system___lockmem
18774     C5 01 00 FF 
18778     11 15 06 F6 | 	mov	arg02, ##@LR__6143
1877c     00 12 06 F6 | 	mov	arg01, #0
18780     00 16 06 F6 | 	mov	arg03, #0
18784     64 09 B1 FD | 	call	#__system___basic_print_string
18788     00 12 06 F6 | 	mov	arg01, #0
1878c     14 59 B1 FD | 	call	#__system___getiolock_0625
18790     FD 00 68 FC | 	wrlong	#0, result1
18794     27 12 06 F6 | 	mov	arg01, #39
18798     00 14 06 F6 | 	mov	arg02, #0
1879c     FC C1 B0 FD | 	call	#_printerror
187a0     E0 01 90 FD | 	jmp	#LR__1994
187a4                 | LR__1990
187a4                 | ' if numpar=0 then 
187a4     0C 4E 05 F1 | 	add	fp, #12
187a8     A7 FE 09 FB | 	rdlong	result3, fp wz
187ac     0C 4E 85 F1 | 	sub	fp, #12
187b0     A8 00 90 5D |  if_ne	jmp	#LR__1991
187b4     00 C0 1B FF 
187b8     00 26 06 F6 | 	mov	local01, ##931135488
187bc     51 00 00 FF 
187c0     B0 E5 05 F1 | 	add	objptr, ##41904
187c4     F2 12 02 FB | 	rdlong	arg01, objptr
187c8     51 00 00 FF 
187cc     B0 E5 85 F1 | 	sub	objptr, ##41904
187d0     09 13 52 F6 | 	abs	arg01, arg01 wc
187d4     1F 28 C6 C9 |  if_b	decod	local02, #31
187d8     00 28 06 36 |  if_ae	mov	local02, #0
187dc     8C 26 B1 FD | 	call	#__system___float_fromuns
187e0     14 FB 61 F5 | 	xor	result1, local02
187e4     FD 12 02 F6 | 	mov	arg01, result1
187e8     FF 7F 23 FF 
187ec     00 14 06 F6 | 	mov	arg02, ##1191181824
187f0     80 2C B1 FD | 	call	#__system___float_div
187f4     FD 14 02 F6 | 	mov	arg02, result1
187f8     13 13 02 F6 | 	mov	arg01, local01
187fc     A0 26 B1 FD | 	call	#__system___float_add
18800     10 4E 05 F1 | 	add	fp, #16
18804     A7 FA 61 FC | 	wrlong	result1, fp
18808                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18808     10 4E 85 F1 | 	sub	fp, #16
1880c     1F FA 05 F4 | 	bitl	result1, #31
18810     FD 12 02 F6 | 	mov	arg01, result1
18814     89 41 1D FF 
18818     6F 14 06 F6 | 	mov	arg02, ##981668463
1881c     01 16 06 F6 | 	mov	arg03, #1
18820     80 2E B1 FD | 	call	#__system___float_cmp
18824     00 FA 55 F2 | 	cmps	result1, #0 wc
18828     10 4E 05 C1 |  if_b	add	fp, #16
1882c     A7 00 68 CC |  if_b	wrlong	#0, fp
18830     10 4E 85 C1 |  if_b	sub	fp, #16
18834     10 4E 05 F1 | 	add	fp, #16
18838     A7 26 02 FB | 	rdlong	local01, fp
1883c     10 4E 85 F1 | 	sub	fp, #16
18840     A7 26 62 FC | 	wrlong	local01, fp
18844     08 4E 05 F1 | 	add	fp, #8
18848     A7 3C 68 FC | 	wrlong	#30, fp
1884c     08 4E 85 F1 | 	sub	fp, #8
18850     A7 12 02 F6 | 	mov	arg01, fp
18854     F4 50 BF FD | 	call	#_push
18858                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
18858     28 01 90 FD | 	jmp	#LR__1994
1885c                 | LR__1991
1885c     54 50 BF FD | 	call	#_pop
18860     A7 FA 61 FC | 	wrlong	result1, fp
18864     04 4E 05 F1 | 	add	fp, #4
18868     A7 FC 61 FC | 	wrlong	result2, fp
1886c     04 4E 05 F1 | 	add	fp, #4
18870     A7 FE 61 FC | 	wrlong	result3, fp
18874                 | ' t1=pop()
18874                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18874     08 4E 85 F1 | 	sub	fp, #8
18878     1C FE 0D F2 | 	cmp	result3, #28 wz
1887c     08 4E 05 51 |  if_ne	add	fp, #8
18880     A7 26 02 5B |  if_ne	rdlong	local01, fp
18884     08 4E 85 51 |  if_ne	sub	fp, #8
18888     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1888c     E8 00 90 5D |  if_ne	jmp	#LR__1993
18890     A7 26 02 FB | 	rdlong	local01, fp
18894     52 00 00 FF 
18898     60 E5 05 F1 | 	add	objptr, ##42336
1889c     F2 26 62 FC | 	wrlong	local01, objptr
188a0                 | '   q=t1.result.uresult
188a0                 | '   if q<7 then 
188a0     52 00 00 FF 
188a4     60 E5 85 F1 | 	sub	objptr, ##42336
188a8     07 26 56 F2 | 	cmps	local01, #7 wc
188ac     B8 00 90 3D |  if_ae	jmp	#LR__1992
188b0     00 C0 1B FF 
188b4     00 26 06 F6 | 	mov	local01, ##931135488
188b8     52 00 00 FF 
188bc     60 E5 05 F1 | 	add	objptr, ##42336
188c0     F2 16 02 FB | 	rdlong	arg03, objptr
188c4     02 16 66 F0 | 	shl	arg03, #2
188c8     B0 E5 85 F1 | 	sub	objptr, #432
188cc     F2 16 02 F1 | 	add	arg03, objptr
188d0     0B 13 02 FB | 	rdlong	arg01, arg03
188d4     51 00 00 FF 
188d8     B0 E5 85 F1 | 	sub	objptr, ##41904
188dc     09 13 52 F6 | 	abs	arg01, arg01 wc
188e0     1F 28 C6 C9 |  if_b	decod	local02, #31
188e4     00 28 06 36 |  if_ae	mov	local02, #0
188e8     80 25 B1 FD | 	call	#__system___float_fromuns
188ec     14 FB 61 F5 | 	xor	result1, local02
188f0     FD 12 02 F6 | 	mov	arg01, result1
188f4     FF 7F 23 FF 
188f8     00 14 06 F6 | 	mov	arg02, ##1191181824
188fc     74 2B B1 FD | 	call	#__system___float_div
18900     FD 14 02 F6 | 	mov	arg02, result1
18904     13 13 02 F6 | 	mov	arg01, local01
18908     94 25 B1 FD | 	call	#__system___float_add
1890c     10 4E 05 F1 | 	add	fp, #16
18910     A7 FA 61 FC | 	wrlong	result1, fp
18914                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18914     10 4E 85 F1 | 	sub	fp, #16
18918     1F FA 05 F4 | 	bitl	result1, #31
1891c     FD 12 02 F6 | 	mov	arg01, result1
18920     89 41 1D FF 
18924     6F 14 06 F6 | 	mov	arg02, ##981668463
18928     01 16 06 F6 | 	mov	arg03, #1
1892c     74 2D B1 FD | 	call	#__system___float_cmp
18930     00 FA 55 F2 | 	cmps	result1, #0 wc
18934     10 4E 05 C1 |  if_b	add	fp, #16
18938     A7 00 68 CC |  if_b	wrlong	#0, fp
1893c     10 4E 85 C1 |  if_b	sub	fp, #16
18940     10 4E 05 F1 | 	add	fp, #16
18944     A7 26 02 FB | 	rdlong	local01, fp
18948     10 4E 85 F1 | 	sub	fp, #16
1894c     A7 26 62 FC | 	wrlong	local01, fp
18950     08 4E 05 F1 | 	add	fp, #8
18954     A7 3C 68 FC | 	wrlong	#30, fp
18958     08 4E 85 F1 | 	sub	fp, #8
1895c     A7 12 02 F6 | 	mov	arg01, fp
18960     E8 4F BF FD | 	call	#_push
18964                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18964     1C 00 90 FD | 	jmp	#LR__1994
18968                 | LR__1992
18968     29 12 06 F6 | 	mov	arg01, #41
1896c     00 14 06 F6 | 	mov	arg02, #0
18970     28 C0 B0 FD | 	call	#_printerror
18974                 | '      printerror(41) : return
18974     0C 00 90 FD | 	jmp	#LR__1994
18978                 | LR__1993
18978     29 12 06 F6 | 	mov	arg01, #41
1897c     00 14 06 F6 | 	mov	arg02, #0
18980     18 C0 B0 FD | 	call	#_printerror
18984                 | LR__1994
18984     A7 F0 03 F6 | 	mov	ptra, fp
18988     B2 00 A0 FD | 	call	#popregs_
1898c                 | _do_padz_ret
1898c     2D 00 64 FD | 	ret
18990                 | 
18990                 | ' 
18990                 | ' '-------------------- paper
18990                 | ' 
18990                 | ' sub do_paper
18990                 | _do_paper
18990     03 4A 05 F6 | 	mov	COUNT_, #3
18994     A8 00 A0 FD | 	call	#pushregs_
18998     18 4F BF FD | 	call	#_pop
1899c     FD 26 02 F6 | 	mov	local01, result1
189a0     FE 28 02 F6 | 	mov	local02, result2
189a4     FF 2A 02 F6 | 	mov	local03, result3
189a8                 | ' t1=pop() 
189a8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
189a8     1E 2A 0E F2 | 	cmp	local03, #30 wz
189ac     10 00 90 5D |  if_ne	jmp	#LR__2000
189b0     13 13 02 F6 | 	mov	arg01, local01
189b4     00 14 06 F6 | 	mov	arg02, #0
189b8     7C 2D B1 FD | 	call	#__system___float_tointeger
189bc     FD 26 02 F6 | 	mov	local01, result1
189c0                 | LR__2000
189c0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
189c0     1F 2A 0E F2 | 	cmp	local03, #31 wz
189c4     18 00 90 5D |  if_ne	jmp	#LR__2001
189c8     13 13 02 F6 | 	mov	arg01, local01
189cc     B0 30 B1 FD | 	call	#__system____builtin_atof
189d0     FD 12 02 F6 | 	mov	arg01, result1
189d4     00 14 06 F6 | 	mov	arg02, #0
189d8     5C 2D B1 FD | 	call	#__system___float_tointeger
189dc     FD 26 02 F6 | 	mov	local01, result1
189e0                 | LR__2001
189e0     37 00 00 FF 
189e4     58 E4 05 F1 | 	add	objptr, ##28248
189e8     F2 26 62 FC | 	wrlong	local01, objptr
189ec     04 E4 05 F1 | 	add	objptr, #4
189f0     F2 12 02 FB | 	rdlong	arg01, objptr
189f4                 | ' 
189f4                 | ' write_color:=ff
189f4     37 00 00 FF 
189f8     1B E4 85 F1 | 	sub	objptr, ##28187
189fc     F2 12 62 FC | 	wrlong	arg01, objptr
18a00                 | ' write_background:=bb
18a00     04 E4 05 F1 | 	add	objptr, #4
18a04     F2 26 62 FC | 	wrlong	local01, objptr
18a08     45 E4 85 F1 | 	sub	objptr, #69
18a0c     A7 F0 03 F6 | 	mov	ptra, fp
18a10     B2 00 A0 FD | 	call	#popregs_
18a14                 | _do_paper_ret
18a14     2D 00 64 FD | 	ret
18a18                 | 
18a18                 | ' 
18a18                 | ' '-------------------- peek
18a18                 | ' 
18a18                 | ' sub do_peek
18a18                 | _do_peek
18a18     00 4A 05 F6 | 	mov	COUNT_, #0
18a1c     A8 00 A0 FD | 	call	#pushregs_
18a20     14 F0 07 F1 | 	add	ptra, #20
18a24     8C 4E BF FD | 	call	#_pop
18a28     A7 FA 61 FC | 	wrlong	result1, fp
18a2c     04 4E 05 F1 | 	add	fp, #4
18a30     A7 FC 61 FC | 	wrlong	result2, fp
18a34     04 4E 05 F1 | 	add	fp, #4
18a38     A7 FE 61 FC | 	wrlong	result3, fp
18a3c     08 4E 85 F1 | 	sub	fp, #8
18a40     A7 12 02 F6 | 	mov	arg01, fp
18a44     50 50 BF FD | 	call	#_converttoint
18a48     0C 4E 05 F1 | 	add	fp, #12
18a4c     A7 FA 61 FC | 	wrlong	result1, fp
18a50                 | ' 
18a50                 | ' t1=pop()
18a50                 | ' a=converttoint(t1)
18a50                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
18a50     0C 4E 85 F1 | 	sub	fp, #12
18a54     00 04 00 FF 
18a58     00 FA 15 F2 | 	cmp	result1, ##524288 wc
18a5c     1C 00 90 3D |  if_ae	jmp	#LR__2010
18a60     0C 4E 05 F1 | 	add	fp, #12
18a64     A7 12 02 FB | 	rdlong	arg01, fp
18a68     09 FB C1 FA | 	rdbyte	result1, arg01
18a6c     04 4E 05 F1 | 	add	fp, #4
18a70     A7 FA 61 FC | 	wrlong	result1, fp
18a74     10 4E 85 F1 | 	sub	fp, #16
18a78     20 00 90 FD | 	jmp	#LR__2011
18a7c                 | LR__2010
18a7c     0C 4E 05 F1 | 	add	fp, #12
18a80     A7 12 02 FB | 	rdlong	arg01, fp
18a84     0C 4E 85 F1 | 	sub	fp, #12
18a88     88 C1 B0 FD | 	call	#_pspeek
18a8c     FD FA E1 F8 | 	getbyte	result1, result1, #0
18a90     10 4E 05 F1 | 	add	fp, #16
18a94     A7 FA 61 FC | 	wrlong	result1, fp
18a98     10 4E 85 F1 | 	sub	fp, #16
18a9c                 | LR__2011
18a9c     08 4E 05 F1 | 	add	fp, #8
18aa0     A7 3A 68 FC | 	wrlong	#29, fp
18aa4     08 4E 05 F1 | 	add	fp, #8
18aa8     A7 12 02 FB | 	rdlong	arg01, fp
18aac     10 4E 85 F1 | 	sub	fp, #16
18ab0     A7 12 62 FC | 	wrlong	arg01, fp
18ab4     A7 12 02 F6 | 	mov	arg01, fp
18ab8     90 4E BF FD | 	call	#_push
18abc     A7 F0 03 F6 | 	mov	ptra, fp
18ac0     B2 00 A0 FD | 	call	#popregs_
18ac4                 | _do_peek_ret
18ac4     2D 00 64 FD | 	ret
18ac8                 | 
18ac8                 | ' 
18ac8                 | ' '-------------------- pinfloat
18ac8                 | ' 
18ac8                 | ' sub do_pinfloat
18ac8                 | _do_pinfloat
18ac8     00 4A 05 F6 | 	mov	COUNT_, #0
18acc     A8 00 A0 FD | 	call	#pushregs_
18ad0     0C F0 07 F1 | 	add	ptra, #12
18ad4     DC 4D BF FD | 	call	#_pop
18ad8     A7 FA 61 FC | 	wrlong	result1, fp
18adc     04 4E 05 F1 | 	add	fp, #4
18ae0     A7 FC 61 FC | 	wrlong	result2, fp
18ae4     04 4E 05 F1 | 	add	fp, #4
18ae8     A7 FE 61 FC | 	wrlong	result3, fp
18aec     08 4E 85 F1 | 	sub	fp, #8
18af0     A7 12 02 F6 | 	mov	arg01, fp
18af4     A0 4F BF FD | 	call	#_converttoint
18af8     50 FA 61 FD | 	fltl	result1
18afc     A7 F0 03 F6 | 	mov	ptra, fp
18b00     B2 00 A0 FD | 	call	#popregs_
18b04                 | _do_pinfloat_ret
18b04     2D 00 64 FD | 	ret
18b08                 | 
18b08                 | ' 
18b08                 | ' '-------------------- pinhi
18b08                 | ' 
18b08                 | ' sub do_pinhi
18b08                 | _do_pinhi
18b08     00 4A 05 F6 | 	mov	COUNT_, #0
18b0c     A8 00 A0 FD | 	call	#pushregs_
18b10     0C F0 07 F1 | 	add	ptra, #12
18b14     9C 4D BF FD | 	call	#_pop
18b18     A7 FA 61 FC | 	wrlong	result1, fp
18b1c     04 4E 05 F1 | 	add	fp, #4
18b20     A7 FC 61 FC | 	wrlong	result2, fp
18b24     04 4E 05 F1 | 	add	fp, #4
18b28     A7 FE 61 FC | 	wrlong	result3, fp
18b2c     08 4E 85 F1 | 	sub	fp, #8
18b30     A7 12 02 F6 | 	mov	arg01, fp
18b34     60 4F BF FD | 	call	#_converttoint
18b38     59 FA 61 FD | 	drvh	result1
18b3c     A7 F0 03 F6 | 	mov	ptra, fp
18b40     B2 00 A0 FD | 	call	#popregs_
18b44                 | _do_pinhi_ret
18b44     2D 00 64 FD | 	ret
18b48                 | 
18b48                 | ' 
18b48                 | ' '-------------------- pinlo
18b48                 | ' 
18b48                 | ' sub do_pinlo
18b48                 | _do_pinlo
18b48     00 4A 05 F6 | 	mov	COUNT_, #0
18b4c     A8 00 A0 FD | 	call	#pushregs_
18b50     0C F0 07 F1 | 	add	ptra, #12
18b54     5C 4D BF FD | 	call	#_pop
18b58     A7 FA 61 FC | 	wrlong	result1, fp
18b5c     04 4E 05 F1 | 	add	fp, #4
18b60     A7 FC 61 FC | 	wrlong	result2, fp
18b64     04 4E 05 F1 | 	add	fp, #4
18b68     A7 FE 61 FC | 	wrlong	result3, fp
18b6c     08 4E 85 F1 | 	sub	fp, #8
18b70     A7 12 02 F6 | 	mov	arg01, fp
18b74     20 4F BF FD | 	call	#_converttoint
18b78     58 FA 61 FD | 	drvl	result1
18b7c     A7 F0 03 F6 | 	mov	ptra, fp
18b80     B2 00 A0 FD | 	call	#popregs_
18b84                 | _do_pinlo_ret
18b84     2D 00 64 FD | 	ret
18b88                 | 
18b88                 | ' 
18b88                 | ' '-------------------- pinread
18b88                 | ' 
18b88                 | ' sub do_pinread
18b88                 | _do_pinread
18b88     00 4A 05 F6 | 	mov	COUNT_, #0
18b8c     A8 00 A0 FD | 	call	#pushregs_
18b90     0C F0 07 F1 | 	add	ptra, #12
18b94     1C 4D BF FD | 	call	#_pop
18b98     A7 FA 61 FC | 	wrlong	result1, fp
18b9c     04 4E 05 F1 | 	add	fp, #4
18ba0     A7 FC 61 FC | 	wrlong	result2, fp
18ba4     04 4E 05 F1 | 	add	fp, #4
18ba8     A7 FE 61 FC | 	wrlong	result3, fp
18bac     08 4E 85 F1 | 	sub	fp, #8
18bb0     A7 12 02 F6 | 	mov	arg01, fp
18bb4     E0 4E BF FD | 	call	#_converttoint
18bb8     FD 12 02 F6 | 	mov	arg01, result1
18bbc     20 12 CE F7 | 	test	arg01, #32 wz
18bc0     FF FB 01 56 |  if_ne	mov	result1, inb
18bc4     FE FB 01 A6 |  if_e	mov	result1, ina
18bc8     09 FB 41 F0 | 	shr	result1, arg01
18bcc     06 12 46 F0 | 	shr	arg01, #6
18bd0     09 FB 41 F7 | 	zerox	result1, arg01
18bd4     52 00 00 FF 
18bd8     68 E5 05 F1 | 	add	objptr, ##42344
18bdc     F2 FA 61 FC | 	wrlong	result1, objptr
18be0     52 00 00 FF 
18be4     68 E5 85 F1 | 	sub	objptr, ##42344
18be8     08 4E 05 F1 | 	add	fp, #8
18bec     A7 3A 68 FC | 	wrlong	#29, fp
18bf0     08 4E 85 F1 | 	sub	fp, #8
18bf4     A7 08 68 FC | 	wrlong	#4, fp
18bf8     A7 12 02 F6 | 	mov	arg01, fp
18bfc     4C 4D BF FD | 	call	#_push
18c00     A7 F0 03 F6 | 	mov	ptra, fp
18c04     B2 00 A0 FD | 	call	#popregs_
18c08                 | _do_pinread_ret
18c08     2D 00 64 FD | 	ret
18c0c                 | 
18c0c                 | ' 
18c0c                 | ' '-------------------- pinstart
18c0c                 | ' 
18c0c                 | ' sub do_pinstart
18c0c                 | _do_pinstart
18c0c     03 4A 05 F6 | 	mov	COUNT_, #3
18c10     A8 00 A0 FD | 	call	#pushregs_
18c14     30 F0 07 F1 | 	add	ptra, #48
18c18     98 4C BF FD | 	call	#_pop
18c1c     FD 16 02 F6 | 	mov	arg03, result1
18c20     FE 14 02 F6 | 	mov	arg02, result2
18c24     FF 18 02 F6 | 	mov	arg04, result3
18c28     A7 16 62 FC | 	wrlong	arg03, fp
18c2c     04 4E 05 F1 | 	add	fp, #4
18c30     A7 14 62 FC | 	wrlong	arg02, fp
18c34     04 4E 05 F1 | 	add	fp, #4
18c38     A7 18 62 FC | 	wrlong	arg04, fp
18c3c     08 4E 85 F1 | 	sub	fp, #8
18c40     70 4C BF FD | 	call	#_pop
18c44     FD 16 02 F6 | 	mov	arg03, result1
18c48     FE 14 02 F6 | 	mov	arg02, result2
18c4c     FF 18 02 F6 | 	mov	arg04, result3
18c50     0C 4E 05 F1 | 	add	fp, #12
18c54     A7 16 62 FC | 	wrlong	arg03, fp
18c58     04 4E 05 F1 | 	add	fp, #4
18c5c     A7 14 62 FC | 	wrlong	arg02, fp
18c60     04 4E 05 F1 | 	add	fp, #4
18c64     A7 18 62 FC | 	wrlong	arg04, fp
18c68     14 4E 85 F1 | 	sub	fp, #20
18c6c     44 4C BF FD | 	call	#_pop
18c70     FD 16 02 F6 | 	mov	arg03, result1
18c74     FE 14 02 F6 | 	mov	arg02, result2
18c78     FF 18 02 F6 | 	mov	arg04, result3
18c7c     18 4E 05 F1 | 	add	fp, #24
18c80     A7 16 62 FC | 	wrlong	arg03, fp
18c84     04 4E 05 F1 | 	add	fp, #4
18c88     A7 14 62 FC | 	wrlong	arg02, fp
18c8c     04 4E 05 F1 | 	add	fp, #4
18c90     A7 18 62 FC | 	wrlong	arg04, fp
18c94     20 4E 85 F1 | 	sub	fp, #32
18c98     18 4C BF FD | 	call	#_pop
18c9c     FF 16 02 F6 | 	mov	arg03, result3
18ca0     24 4E 05 F1 | 	add	fp, #36
18ca4     A7 FA 61 FC | 	wrlong	result1, fp
18ca8     04 4E 05 F1 | 	add	fp, #4
18cac     A7 FC 61 FC | 	wrlong	result2, fp
18cb0     04 4E 05 F1 | 	add	fp, #4
18cb4     A7 16 62 FC | 	wrlong	arg03, fp
18cb8     08 4E 85 F1 | 	sub	fp, #8
18cbc     A7 12 02 F6 | 	mov	arg01, fp
18cc0     24 4E 85 F1 | 	sub	fp, #36
18cc4     D0 4D BF FD | 	call	#_converttoint
18cc8     FD 26 02 F6 | 	mov	local01, result1
18ccc     18 4E 05 F1 | 	add	fp, #24
18cd0     A7 12 02 F6 | 	mov	arg01, fp
18cd4     18 4E 85 F1 | 	sub	fp, #24
18cd8     BC 4D BF FD | 	call	#_converttoint
18cdc     FD 28 02 F6 | 	mov	local02, result1
18ce0     0C 4E 05 F1 | 	add	fp, #12
18ce4     A7 12 02 F6 | 	mov	arg01, fp
18ce8     0C 4E 85 F1 | 	sub	fp, #12
18cec     A8 4D BF FD | 	call	#_converttoint
18cf0     FD 2A 02 F6 | 	mov	local03, result1
18cf4     A7 12 02 F6 | 	mov	arg01, fp
18cf8     9C 4D BF FD | 	call	#_converttoint
18cfc     40 26 62 FD | 	dirl	local01
18d00     13 29 02 FC | 	wrpin	local02, local01
18d04     13 2B 12 FC | 	wxpin	local03, local01
18d08     13 FB 21 FC | 	wypin	result1, local01
18d0c     41 26 62 FD | 	dirh	local01
18d10     A7 F0 03 F6 | 	mov	ptra, fp
18d14     B2 00 A0 FD | 	call	#popregs_
18d18                 | _do_pinstart_ret
18d18     2D 00 64 FD | 	ret
18d1c                 | 
18d1c                 | ' 
18d1c                 | ' '-------------------- pintoggle
18d1c                 | ' 
18d1c                 | ' sub do_pintoggle
18d1c                 | _do_pintoggle
18d1c     00 4A 05 F6 | 	mov	COUNT_, #0
18d20     A8 00 A0 FD | 	call	#pushregs_
18d24     0C F0 07 F1 | 	add	ptra, #12
18d28     88 4B BF FD | 	call	#_pop
18d2c     A7 FA 61 FC | 	wrlong	result1, fp
18d30     04 4E 05 F1 | 	add	fp, #4
18d34     A7 FC 61 FC | 	wrlong	result2, fp
18d38     04 4E 05 F1 | 	add	fp, #4
18d3c     A7 FE 61 FC | 	wrlong	result3, fp
18d40     08 4E 85 F1 | 	sub	fp, #8
18d44     A7 12 02 F6 | 	mov	arg01, fp
18d48     4C 4D BF FD | 	call	#_converttoint
18d4c     5F FA 61 FD | 	drvnot	result1
18d50     A7 F0 03 F6 | 	mov	ptra, fp
18d54     B2 00 A0 FD | 	call	#popregs_
18d58                 | _do_pintoggle_ret
18d58     2D 00 64 FD | 	ret
18d5c                 | 
18d5c                 | ' 
18d5c                 | ' '-------------------- pinwrite
18d5c                 | ' 
18d5c                 | ' sub do_pinwrite
18d5c                 | _do_pinwrite
18d5c     01 4A 05 F6 | 	mov	COUNT_, #1
18d60     A8 00 A0 FD | 	call	#pushregs_
18d64     18 F0 07 F1 | 	add	ptra, #24
18d68     48 4B BF FD | 	call	#_pop
18d6c     FD 14 02 F6 | 	mov	arg02, result1
18d70     FE 12 02 F6 | 	mov	arg01, result2
18d74     FF 26 02 F6 | 	mov	local01, result3
18d78     A7 14 62 FC | 	wrlong	arg02, fp
18d7c     04 4E 05 F1 | 	add	fp, #4
18d80     A7 12 62 FC | 	wrlong	arg01, fp
18d84     04 4E 05 F1 | 	add	fp, #4
18d88     A7 26 62 FC | 	wrlong	local01, fp
18d8c     08 4E 85 F1 | 	sub	fp, #8
18d90     20 4B BF FD | 	call	#_pop
18d94     FF 26 02 F6 | 	mov	local01, result3
18d98     0C 4E 05 F1 | 	add	fp, #12
18d9c     A7 FA 61 FC | 	wrlong	result1, fp
18da0     04 4E 05 F1 | 	add	fp, #4
18da4     A7 FC 61 FC | 	wrlong	result2, fp
18da8     04 4E 05 F1 | 	add	fp, #4
18dac     A7 26 62 FC | 	wrlong	local01, fp
18db0     08 4E 85 F1 | 	sub	fp, #8
18db4     A7 12 02 F6 | 	mov	arg01, fp
18db8     0C 4E 85 F1 | 	sub	fp, #12
18dbc     D8 4C BF FD | 	call	#_converttoint
18dc0     FD 26 02 F6 | 	mov	local01, result1
18dc4     A7 12 02 F6 | 	mov	arg01, fp
18dc8     CC 4C BF FD | 	call	#_converttoint
18dcc     FD 14 02 F6 | 	mov	arg02, result1
18dd0     13 13 02 F6 | 	mov	arg01, local01
18dd4     D0 F7 B0 FD | 	call	#__system___pinwrite
18dd8     A7 F0 03 F6 | 	mov	ptra, fp
18ddc     B2 00 A0 FD | 	call	#popregs_
18de0                 | _do_pinwrite_ret
18de0     2D 00 64 FD | 	ret
18de4                 | 
18de4                 | ' 
18de4                 | ' '-------------------- play
18de4                 | ' 
18de4                 | ' sub do_play
18de4                 | _do_play
18de4     08 4A 05 F6 | 	mov	COUNT_, #8
18de8     A8 00 A0 FD | 	call	#pushregs_
18dec     84 F0 07 F1 | 	add	ptra, #132
18df0     70 4E 05 F1 | 	add	fp, #112
18df4     77 CC A1 FF 
18df8     A7 7C 6B FC | 	wrlong	##1134096318, fp
18dfc                 | ' speed_coeff=305.873
18dfc                 | ' 
18dfc                 | ' for i=0 to 9 : params(i)=-2.0 : next i
18dfc     6C 4E 85 F1 | 	sub	fp, #108
18e00     A7 00 68 FC | 	wrlong	#0, fp
18e04     97 18 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18e08                 | LR__2020
18e08     A7 16 02 FB | 	rdlong	arg03, fp
18e0c     02 16 66 F0 | 	shl	arg03, #2
18e10     38 4E 05 F1 | 	add	fp, #56
18e14     A7 16 02 F1 | 	add	arg03, fp
18e18     00 00 E0 FF 
18e1c     0B 01 68 FC | 	wrlong	##-1073741824, arg03
18e20     38 4E 85 F1 | 	sub	fp, #56
18e24     A7 26 02 FB | 	rdlong	local01, fp
18e28     01 26 06 F1 | 	add	local01, #1
18e2c     A7 26 62 FC | 	wrlong	local01, fp
18e30     0A 26 56 F2 | 	cmps	local01, #10 wc
18e34     D0 FF 9F CD |  if_b	jmp	#LR__2020
18e38                 | LR__2021
18e38     04 4E 85 F1 | 	sub	fp, #4
18e3c     4A 00 00 FF 
18e40     A0 E4 05 F1 | 	add	objptr, ##38048
18e44     F2 28 02 FB | 	rdlong	local02, objptr
18e48     14 2B 02 F6 | 	mov	local03, local02
18e4c     01 2A 66 F0 | 	shl	local03, #1
18e50     14 2B 02 F1 | 	add	local03, local02
18e54     02 2A 66 F0 | 	shl	local03, #2
18e58     03 00 00 FF 
18e5c     04 E4 85 F1 | 	sub	objptr, ##1540
18e60     F2 2A 02 F1 | 	add	local03, objptr
18e64     15 2D 02 FB | 	rdlong	local04, local03
18e68     A7 2C 62 FC | 	wrlong	local04, fp
18e6c                 | ' numpar=compiledline(lineptr_e).result.uresult
18e6c                 | ' for i=numpar to 1 step -1 
18e6c     04 4E 05 F1 | 	add	fp, #4
18e70     A7 2C 62 FC | 	wrlong	local04, fp
18e74     04 4E 85 F1 | 	sub	fp, #4
18e78     47 00 00 FF 
18e7c     9C E4 85 F1 | 	sub	objptr, ##36508
18e80                 | LR__2022
18e80     30 4A BF FD | 	call	#_pop
18e84     64 4E 05 F1 | 	add	fp, #100
18e88     A7 FA 61 FC | 	wrlong	result1, fp
18e8c     04 4E 05 F1 | 	add	fp, #4
18e90     A7 FC 61 FC | 	wrlong	result2, fp
18e94     04 4E 05 F1 | 	add	fp, #4
18e98     A7 FE 61 FC | 	wrlong	result3, fp
18e9c     68 4E 85 F1 | 	sub	fp, #104
18ea0     A7 2A 02 FB | 	rdlong	local03, fp
18ea4     01 2A 86 F1 | 	sub	local03, #1
18ea8     02 2A 66 F0 | 	shl	local03, #2
18eac     38 4E 05 F1 | 	add	fp, #56
18eb0     A7 2A 02 F1 | 	add	local03, fp
18eb4     28 4E 05 F1 | 	add	fp, #40
18eb8     A7 2E 02 F6 | 	mov	local05, fp
18ebc     17 13 02 F6 | 	mov	arg01, local05
18ec0     64 4E 85 F1 | 	sub	fp, #100
18ec4     8C 4C BF FD | 	call	#_converttofloat
18ec8     15 FB 61 FC | 	wrlong	result1, local03
18ecc     04 4E 05 F1 | 	add	fp, #4
18ed0     A7 26 02 FB | 	rdlong	local01, fp
18ed4     01 26 86 F1 | 	sub	local01, #1
18ed8     A7 26 62 FC | 	wrlong	local01, fp
18edc     04 4E 85 F1 | 	sub	fp, #4
18ee0     01 26 56 F2 | 	cmps	local01, #1 wc
18ee4     98 FF 9F 3D |  if_ae	jmp	#LR__2022
18ee8                 | ' 
18ee8                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
18ee8     3C 4E 05 F1 | 	add	fp, #60
18eec     A7 12 02 FB | 	rdlong	arg01, fp
18ef0     3C 4E 85 F1 | 	sub	fp, #60
18ef4     00 14 06 F6 | 	mov	arg02, #0
18ef8     01 16 06 F6 | 	mov	arg03, #1
18efc     A4 27 B1 FD | 	call	#__system___float_cmp
18f00     00 FA 55 F2 | 	cmps	result1, #0 wc
18f04     0C 4E 05 C1 |  if_b	add	fp, #12
18f08     A7 00 68 CC |  if_b	wrlong	#0, fp
18f0c     0C 4E 85 C1 |  if_b	sub	fp, #12
18f10     2C 00 90 CD |  if_b	jmp	#LR__2023
18f14     3C 4E 05 F1 | 	add	fp, #60
18f18     A7 12 02 FB | 	rdlong	arg01, fp
18f1c     3C 4E 85 F1 | 	sub	fp, #60
18f20     01 14 06 F6 | 	mov	arg02, #1
18f24     10 28 B1 FD | 	call	#__system___float_tointeger
18f28     FD 26 52 F6 | 	abs	local01, result1 wc
18f2c     07 26 06 F5 | 	and	local01, #7
18f30     13 27 82 F6 | 	negc	local01, local01
18f34     0C 4E 05 F1 | 	add	fp, #12
18f38     A7 26 62 FC | 	wrlong	local01, fp
18f3c     0C 4E 85 F1 | 	sub	fp, #12
18f40                 | LR__2023
18f40                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18f40     40 4E 05 F1 | 	add	fp, #64
18f44     A7 12 02 FB | 	rdlong	arg01, fp
18f48     40 4E 85 F1 | 	sub	fp, #64
18f4c     00 14 06 F6 | 	mov	arg02, #0
18f50     01 16 06 F6 | 	mov	arg03, #1
18f54     4C 27 B1 FD | 	call	#__system___float_cmp
18f58     00 FA 55 F2 | 	cmps	result1, #0 wc
18f5c     40 00 90 3D |  if_ae	jmp	#LR__2024
18f60     0C 4E 05 F1 | 	add	fp, #12
18f64     A7 28 02 FB | 	rdlong	local02, fp
18f68     14 2B 02 F6 | 	mov	local03, local02
18f6c     03 2A 66 F0 | 	shl	local03, #3
18f70     14 2B 82 F1 | 	sub	local03, local02
18f74     02 2A 66 F0 | 	shl	local03, #2
18f78     14 00 00 FF 
18f7c     38 E5 05 F1 | 	add	objptr, ##10552
18f80     F2 2A 02 F1 | 	add	local03, objptr
18f84     15 31 02 FB | 	rdlong	local06, local03
18f88     68 4E 05 F1 | 	add	fp, #104
18f8c     A7 30 62 FC | 	wrlong	local06, fp
18f90     74 4E 85 F1 | 	sub	fp, #116
18f94     14 00 00 FF 
18f98     38 E5 85 F1 | 	sub	objptr, ##10552
18f9c     44 00 90 FD | 	jmp	#LR__2025
18fa0                 | LR__2024
18fa0     40 4E 05 F1 | 	add	fp, #64
18fa4     A7 2C 02 FB | 	rdlong	local04, fp
18fa8     34 4E 05 F1 | 	add	fp, #52
18fac     A7 2C 62 FC | 	wrlong	local04, fp
18fb0     68 4E 85 F1 | 	sub	fp, #104
18fb4     A7 28 02 FB | 	rdlong	local02, fp
18fb8     14 2B 02 F6 | 	mov	local03, local02
18fbc     03 2A 66 F0 | 	shl	local03, #3
18fc0     14 2B 82 F1 | 	sub	local03, local02
18fc4     02 2A 66 F0 | 	shl	local03, #2
18fc8     14 00 00 FF 
18fcc     38 E5 05 F1 | 	add	objptr, ##10552
18fd0     F2 2A 02 F1 | 	add	local03, objptr
18fd4     0C 4E 85 F1 | 	sub	fp, #12
18fd8     15 2D 62 FC | 	wrlong	local04, local03
18fdc     14 00 00 FF 
18fe0     38 E5 85 F1 | 	sub	objptr, ##10552
18fe4                 | LR__2025
18fe4                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
18fe4     44 4E 05 F1 | 	add	fp, #68
18fe8     A7 12 02 FB | 	rdlong	arg01, fp
18fec     44 4E 85 F1 | 	sub	fp, #68
18ff0     00 14 06 F6 | 	mov	arg02, #0
18ff4     01 16 06 F6 | 	mov	arg03, #1
18ff8     A8 26 B1 FD | 	call	#__system___float_cmp
18ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
19000     24 00 90 CD |  if_b	jmp	#LR__2026
19004     44 4E 05 F1 | 	add	fp, #68
19008     A7 12 02 FB | 	rdlong	arg01, fp
1900c     44 4E 85 F1 | 	sub	fp, #68
19010     20 0E 23 FF 
19014     00 14 06 F6 | 	mov	arg02, ##1176256512
19018     01 16 66 F6 | 	neg	arg03, #1
1901c     84 26 B1 FD | 	call	#__system___float_cmp
19020     01 FA 55 F2 | 	cmps	result1, #1 wc
19024     48 00 90 CD |  if_b	jmp	#LR__2027
19028                 | LR__2026
19028     0C 4E 05 F1 | 	add	fp, #12
1902c     A7 2A 02 FB | 	rdlong	local03, fp
19030     15 33 02 F6 | 	mov	local07, local03
19034     03 32 66 F0 | 	shl	local07, #3
19038     15 33 82 F1 | 	sub	local07, local03
1903c     02 32 66 F0 | 	shl	local07, #2
19040     14 00 00 FF 
19044     38 E5 05 F1 | 	add	objptr, ##10552
19048     F2 32 02 F1 | 	add	local07, objptr
1904c     06 32 06 F1 | 	add	local07, #6
19050     19 2F E2 FA | 	rdword	local05, local07
19054     17 2D 32 F9 | 	getword	local04, local05, #0
19058     1C 4E 05 F1 | 	add	fp, #28
1905c     A7 2C 62 FC | 	wrlong	local04, fp
19060     28 4E 85 F1 | 	sub	fp, #40
19064     14 00 00 FF 
19068     38 E5 85 F1 | 	sub	objptr, ##10552
1906c     54 00 90 FD | 	jmp	#LR__2028
19070                 | LR__2027
19070     44 4E 05 F1 | 	add	fp, #68
19074     A7 12 02 FB | 	rdlong	arg01, fp
19078     44 4E 85 F1 | 	sub	fp, #68
1907c     01 14 06 F6 | 	mov	arg02, #1
19080     B4 26 B1 FD | 	call	#__system___float_tointeger
19084     28 4E 05 F1 | 	add	fp, #40
19088     A7 FA 61 FC | 	wrlong	result1, fp
1908c     1C 4E 85 F1 | 	sub	fp, #28
19090     A7 28 02 FB | 	rdlong	local02, fp
19094     14 2B 02 F6 | 	mov	local03, local02
19098     03 2A 66 F0 | 	shl	local03, #3
1909c     14 2B 82 F1 | 	sub	local03, local02
190a0     02 2A 66 F0 | 	shl	local03, #2
190a4     14 00 00 FF 
190a8     38 E5 05 F1 | 	add	objptr, ##10552
190ac     F2 2A 02 F1 | 	add	local03, objptr
190b0     0C 4E 85 F1 | 	sub	fp, #12
190b4     06 2A 06 F1 | 	add	local03, #6
190b8     15 FB 51 FC | 	wrword	result1, local03
190bc     14 00 00 FF 
190c0     38 E5 85 F1 | 	sub	objptr, ##10552
190c4                 | LR__2028
190c4                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
190c4     48 4E 05 F1 | 	add	fp, #72
190c8     A7 12 02 FB | 	rdlong	arg01, fp
190cc     48 4E 85 F1 | 	sub	fp, #72
190d0     00 14 06 F6 | 	mov	arg02, #0
190d4     01 16 06 F6 | 	mov	arg03, #1
190d8     C8 25 B1 FD | 	call	#__system___float_cmp
190dc     00 FA 55 F2 | 	cmps	result1, #0 wc
190e0     24 00 90 CD |  if_b	jmp	#LR__2029
190e4     48 4E 05 F1 | 	add	fp, #72
190e8     A7 12 02 FB | 	rdlong	arg01, fp
190ec     48 4E 85 F1 | 	sub	fp, #72
190f0     89 C1 20 FF 
190f4     6F 14 06 F6 | 	mov	arg02, ##1099108975
190f8     01 16 66 F6 | 	neg	arg03, #1
190fc     A4 25 B1 FD | 	call	#__system___float_cmp
19100     01 FA 55 F2 | 	cmps	result1, #1 wc
19104     44 00 90 CD |  if_b	jmp	#LR__2030
19108                 | LR__2029
19108     0C 4E 05 F1 | 	add	fp, #12
1910c     A7 28 02 FB | 	rdlong	local02, fp
19110     14 2B 02 F6 | 	mov	local03, local02
19114     03 2A 66 F0 | 	shl	local03, #3
19118     14 2B 82 F1 | 	sub	local03, local02
1911c     02 2A 66 F0 | 	shl	local03, #2
19120     14 00 00 FF 
19124     38 E5 05 F1 | 	add	objptr, ##10552
19128     F2 2A 02 F1 | 	add	local03, objptr
1912c     0C 2A 06 F1 | 	add	local03, #12
19130     15 31 02 FB | 	rdlong	local06, local03
19134     70 4E 05 F1 | 	add	fp, #112
19138     A7 30 62 FC | 	wrlong	local06, fp
1913c     7C 4E 85 F1 | 	sub	fp, #124
19140     14 00 00 FF 
19144     38 E5 85 F1 | 	sub	objptr, ##10552
19148     48 00 90 FD | 	jmp	#LR__2031
1914c                 | LR__2030
1914c     48 4E 05 F1 | 	add	fp, #72
19150     A7 2C 02 FB | 	rdlong	local04, fp
19154     34 4E 05 F1 | 	add	fp, #52
19158     A7 2C 62 FC | 	wrlong	local04, fp
1915c     70 4E 85 F1 | 	sub	fp, #112
19160     A7 28 02 FB | 	rdlong	local02, fp
19164     14 2B 02 F6 | 	mov	local03, local02
19168     03 2A 66 F0 | 	shl	local03, #3
1916c     14 2B 82 F1 | 	sub	local03, local02
19170     02 2A 66 F0 | 	shl	local03, #2
19174     14 00 00 FF 
19178     38 E5 05 F1 | 	add	objptr, ##10552
1917c     F2 2A 02 F1 | 	add	local03, objptr
19180     0C 4E 85 F1 | 	sub	fp, #12
19184     0C 2A 06 F1 | 	add	local03, #12
19188     15 2D 62 FC | 	wrlong	local04, local03
1918c     14 00 00 FF 
19190     38 E5 85 F1 | 	sub	objptr, ##10552
19194                 | LR__2031
19194                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
19194     4C 4E 05 F1 | 	add	fp, #76
19198     A7 12 02 FB | 	rdlong	arg01, fp
1919c     4C 4E 85 F1 | 	sub	fp, #76
191a0     00 14 06 F6 | 	mov	arg02, #0
191a4     01 16 06 F6 | 	mov	arg03, #1
191a8     F8 24 B1 FD | 	call	#__system___float_cmp
191ac     00 FA 55 F2 | 	cmps	result1, #0 wc
191b0     24 00 90 CD |  if_b	jmp	#LR__2032
191b4     4C 4E 05 F1 | 	add	fp, #76
191b8     A7 12 02 FB | 	rdlong	arg01, fp
191bc     4C 4E 85 F1 | 	sub	fp, #76
191c0     00 00 21 FF 
191c4     00 14 06 F6 | 	mov	arg02, ##1107296256
191c8     01 16 66 F6 | 	neg	arg03, #1
191cc     D4 24 B1 FD | 	call	#__system___float_cmp
191d0     01 FA 55 F2 | 	cmps	result1, #1 wc
191d4     48 00 90 CD |  if_b	jmp	#LR__2033
191d8                 | LR__2032
191d8     0C 4E 05 F1 | 	add	fp, #12
191dc     A7 2A 02 FB | 	rdlong	local03, fp
191e0     15 33 02 F6 | 	mov	local07, local03
191e4     03 32 66 F0 | 	shl	local07, #3
191e8     15 33 82 F1 | 	sub	local07, local03
191ec     02 32 66 F0 | 	shl	local07, #2
191f0     14 00 00 FF 
191f4     38 E5 05 F1 | 	add	objptr, ##10552
191f8     F2 32 02 F1 | 	add	local07, objptr
191fc     04 32 06 F1 | 	add	local07, #4
19200     19 2F C2 FA | 	rdbyte	local05, local07
19204     17 2D E2 F8 | 	getbyte	local04, local05, #0
19208     14 4E 05 F1 | 	add	fp, #20
1920c     A7 2C 62 FC | 	wrlong	local04, fp
19210     20 4E 85 F1 | 	sub	fp, #32
19214     14 00 00 FF 
19218     38 E5 85 F1 | 	sub	objptr, ##10552
1921c     54 00 90 FD | 	jmp	#LR__2034
19220                 | LR__2033
19220     4C 4E 05 F1 | 	add	fp, #76
19224     A7 12 02 FB | 	rdlong	arg01, fp
19228     4C 4E 85 F1 | 	sub	fp, #76
1922c     01 14 06 F6 | 	mov	arg02, #1
19230     04 25 B1 FD | 	call	#__system___float_tointeger
19234     20 4E 05 F1 | 	add	fp, #32
19238     A7 FA 61 FC | 	wrlong	result1, fp
1923c     14 4E 85 F1 | 	sub	fp, #20
19240     A7 28 02 FB | 	rdlong	local02, fp
19244     14 2B 02 F6 | 	mov	local03, local02
19248     03 2A 66 F0 | 	shl	local03, #3
1924c     14 2B 82 F1 | 	sub	local03, local02
19250     02 2A 66 F0 | 	shl	local03, #2
19254     14 00 00 FF 
19258     38 E5 05 F1 | 	add	objptr, ##10552
1925c     F2 2A 02 F1 | 	add	local03, objptr
19260     0C 4E 85 F1 | 	sub	fp, #12
19264     04 2A 06 F1 | 	add	local03, #4
19268     15 FB 41 FC | 	wrbyte	result1, local03
1926c     14 00 00 FF 
19270     38 E5 85 F1 | 	sub	objptr, ##10552
19274                 | LR__2034
19274                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
19274     50 4E 05 F1 | 	add	fp, #80
19278     A7 12 02 FB | 	rdlong	arg01, fp
1927c     50 4E 85 F1 | 	sub	fp, #80
19280     00 14 06 F6 | 	mov	arg02, #0
19284     01 16 06 F6 | 	mov	arg03, #1
19288     18 24 B1 FD | 	call	#__system___float_cmp
1928c     00 FA 55 F2 | 	cmps	result1, #0 wc
19290     24 00 90 CD |  if_b	jmp	#LR__2035
19294     50 4E 05 F1 | 	add	fp, #80
19298     A7 12 02 FB | 	rdlong	arg01, fp
1929c     50 4E 85 F1 | 	sub	fp, #80
192a0     00 80 20 FF 
192a4     00 14 06 F6 | 	mov	arg02, ##1090519040
192a8     01 16 66 F6 | 	neg	arg03, #1
192ac     F4 23 B1 FD | 	call	#__system___float_cmp
192b0     01 FA 55 F2 | 	cmps	result1, #1 wc
192b4     48 00 90 CD |  if_b	jmp	#LR__2036
192b8                 | LR__2035
192b8     0C 4E 05 F1 | 	add	fp, #12
192bc     A7 2A 02 FB | 	rdlong	local03, fp
192c0     15 33 02 F6 | 	mov	local07, local03
192c4     03 32 66 F0 | 	shl	local07, #3
192c8     15 33 82 F1 | 	sub	local07, local03
192cc     02 32 66 F0 | 	shl	local07, #2
192d0     14 00 00 FF 
192d4     38 E5 05 F1 | 	add	objptr, ##10552
192d8     F2 32 02 F1 | 	add	local07, objptr
192dc     05 32 06 F1 | 	add	local07, #5
192e0     19 2F C2 FA | 	rdbyte	local05, local07
192e4     17 2D E2 F8 | 	getbyte	local04, local05, #0
192e8     18 4E 05 F1 | 	add	fp, #24
192ec     A7 2C 62 FC | 	wrlong	local04, fp
192f0     24 4E 85 F1 | 	sub	fp, #36
192f4     14 00 00 FF 
192f8     38 E5 85 F1 | 	sub	objptr, ##10552
192fc     54 00 90 FD | 	jmp	#LR__2037
19300                 | LR__2036
19300     50 4E 05 F1 | 	add	fp, #80
19304     A7 12 02 FB | 	rdlong	arg01, fp
19308     50 4E 85 F1 | 	sub	fp, #80
1930c     01 14 06 F6 | 	mov	arg02, #1
19310     24 24 B1 FD | 	call	#__system___float_tointeger
19314     24 4E 05 F1 | 	add	fp, #36
19318     A7 FA 61 FC | 	wrlong	result1, fp
1931c     18 4E 85 F1 | 	sub	fp, #24
19320     A7 28 02 FB | 	rdlong	local02, fp
19324     14 2B 02 F6 | 	mov	local03, local02
19328     03 2A 66 F0 | 	shl	local03, #3
1932c     14 2B 82 F1 | 	sub	local03, local02
19330     02 2A 66 F0 | 	shl	local03, #2
19334     14 00 00 FF 
19338     38 E5 05 F1 | 	add	objptr, ##10552
1933c     F2 2A 02 F1 | 	add	local03, objptr
19340     0C 4E 85 F1 | 	sub	fp, #12
19344     05 2A 06 F1 | 	add	local03, #5
19348     15 FB 41 FC | 	wrbyte	result1, local03
1934c     14 00 00 FF 
19350     38 E5 85 F1 | 	sub	objptr, ##10552
19354                 | LR__2037
19354                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
19354     54 4E 05 F1 | 	add	fp, #84
19358     A7 12 02 FB | 	rdlong	arg01, fp
1935c     54 4E 85 F1 | 	sub	fp, #84
19360     00 14 06 F6 | 	mov	arg02, #0
19364     01 16 06 F6 | 	mov	arg03, #1
19368     38 23 B1 FD | 	call	#__system___float_cmp
1936c     00 FA 55 F2 | 	cmps	result1, #0 wc
19370     24 00 90 CD |  if_b	jmp	#LR__2038
19374     54 4E 05 F1 | 	add	fp, #84
19378     A7 12 02 FB | 	rdlong	arg01, fp
1937c     54 4E 85 F1 | 	sub	fp, #84
19380     00 3D 22 FF 
19384     00 14 06 F6 | 	mov	arg02, ##1148846080
19388     01 16 66 F6 | 	neg	arg03, #1
1938c     14 23 B1 FD | 	call	#__system___float_cmp
19390     01 FA 55 F2 | 	cmps	result1, #1 wc
19394     44 00 90 CD |  if_b	jmp	#LR__2039
19398                 | LR__2038
19398     0C 4E 05 F1 | 	add	fp, #12
1939c     A7 28 02 FB | 	rdlong	local02, fp
193a0     14 2B 02 F6 | 	mov	local03, local02
193a4     03 2A 66 F0 | 	shl	local03, #3
193a8     14 2B 82 F1 | 	sub	local03, local02
193ac     02 2A 66 F0 | 	shl	local03, #2
193b0     14 00 00 FF 
193b4     38 E5 05 F1 | 	add	objptr, ##10552
193b8     F2 2A 02 F1 | 	add	local03, objptr
193bc     08 2A 06 F1 | 	add	local03, #8
193c0     15 31 02 FB | 	rdlong	local06, local03
193c4     74 4E 05 F1 | 	add	fp, #116
193c8     A7 30 62 FC | 	wrlong	local06, fp
193cc     80 4E 85 F1 | 	sub	fp, #128
193d0     14 00 00 FF 
193d4     38 E5 85 F1 | 	sub	objptr, ##10552
193d8     48 00 90 FD | 	jmp	#LR__2040
193dc                 | LR__2039
193dc     54 4E 05 F1 | 	add	fp, #84
193e0     A7 30 02 FB | 	rdlong	local06, fp
193e4     2C 4E 05 F1 | 	add	fp, #44
193e8     A7 30 62 FC | 	wrlong	local06, fp
193ec     74 4E 85 F1 | 	sub	fp, #116
193f0     A7 28 02 FB | 	rdlong	local02, fp
193f4     14 2B 02 F6 | 	mov	local03, local02
193f8     03 2A 66 F0 | 	shl	local03, #3
193fc     14 2B 82 F1 | 	sub	local03, local02
19400     02 2A 66 F0 | 	shl	local03, #2
19404     14 00 00 FF 
19408     38 E5 05 F1 | 	add	objptr, ##10552
1940c     F2 2A 02 F1 | 	add	local03, objptr
19410     0C 4E 85 F1 | 	sub	fp, #12
19414     08 2A 06 F1 | 	add	local03, #8
19418     15 31 62 FC | 	wrlong	local06, local03
1941c     14 00 00 FF 
19420     38 E5 85 F1 | 	sub	objptr, ##10552
19424                 | LR__2040
19424                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
19424     58 4E 05 F1 | 	add	fp, #88
19428     A7 12 02 FB | 	rdlong	arg01, fp
1942c     58 4E 85 F1 | 	sub	fp, #88
19430     00 C0 5F FF 
19434     00 14 06 F6 | 	mov	arg02, ##-1082130432
19438     01 16 06 F6 | 	mov	arg03, #1
1943c     64 22 B1 FD | 	call	#__system___float_cmp
19440     00 FA 55 F2 | 	cmps	result1, #0 wc
19444     24 00 90 CD |  if_b	jmp	#LR__2041
19448     58 4E 05 F1 | 	add	fp, #88
1944c     A7 12 02 FB | 	rdlong	arg01, fp
19450     58 4E 85 F1 | 	sub	fp, #88
19454     00 C0 1F FF 
19458     00 14 06 F6 | 	mov	arg02, ##1065353216
1945c     01 16 66 F6 | 	neg	arg03, #1
19460     40 22 B1 FD | 	call	#__system___float_cmp
19464     01 FA 55 F2 | 	cmps	result1, #1 wc
19468     44 00 90 CD |  if_b	jmp	#LR__2042
1946c                 | LR__2041
1946c     0C 4E 05 F1 | 	add	fp, #12
19470     A7 28 02 FB | 	rdlong	local02, fp
19474     14 2B 02 F6 | 	mov	local03, local02
19478     03 2A 66 F0 | 	shl	local03, #3
1947c     14 2B 82 F1 | 	sub	local03, local02
19480     02 2A 66 F0 | 	shl	local03, #2
19484     14 00 00 FF 
19488     38 E5 05 F1 | 	add	objptr, ##10552
1948c     F2 2A 02 F1 | 	add	local03, objptr
19490     10 2A 06 F1 | 	add	local03, #16
19494     15 31 02 FB | 	rdlong	local06, local03
19498     6C 4E 05 F1 | 	add	fp, #108
1949c     A7 30 62 FC | 	wrlong	local06, fp
194a0     78 4E 85 F1 | 	sub	fp, #120
194a4     14 00 00 FF 
194a8     38 E5 85 F1 | 	sub	objptr, ##10552
194ac     48 00 90 FD | 	jmp	#LR__2043
194b0                 | LR__2042
194b0     58 4E 05 F1 | 	add	fp, #88
194b4     A7 30 02 FB | 	rdlong	local06, fp
194b8     20 4E 05 F1 | 	add	fp, #32
194bc     A7 30 62 FC | 	wrlong	local06, fp
194c0     6C 4E 85 F1 | 	sub	fp, #108
194c4     A7 28 02 FB | 	rdlong	local02, fp
194c8     14 2B 02 F6 | 	mov	local03, local02
194cc     03 2A 66 F0 | 	shl	local03, #3
194d0     14 2B 82 F1 | 	sub	local03, local02
194d4     02 2A 66 F0 | 	shl	local03, #2
194d8     14 00 00 FF 
194dc     38 E5 05 F1 | 	add	objptr, ##10552
194e0     F2 2A 02 F1 | 	add	local03, objptr
194e4     0C 4E 85 F1 | 	sub	fp, #12
194e8     10 2A 06 F1 | 	add	local03, #16
194ec     15 31 62 FC | 	wrlong	local06, local03
194f0     14 00 00 FF 
194f4     38 E5 85 F1 | 	sub	objptr, ##10552
194f8                 | LR__2043
194f8                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
194f8     5C 4E 05 F1 | 	add	fp, #92
194fc     A7 12 02 FB | 	rdlong	arg01, fp
19500     5C 4E 85 F1 | 	sub	fp, #92
19504     00 14 06 F6 | 	mov	arg02, #0
19508     01 16 06 F6 | 	mov	arg03, #1
1950c     94 21 B1 FD | 	call	#__system___float_cmp
19510     00 FA 55 F2 | 	cmps	result1, #0 wc
19514     24 00 90 CD |  if_b	jmp	#LR__2044
19518     5C 4E 05 F1 | 	add	fp, #92
1951c     A7 12 02 FB | 	rdlong	arg01, fp
19520     5C 4E 85 F1 | 	sub	fp, #92
19524     80 BF 21 FF 
19528     00 14 06 F6 | 	mov	arg02, ##1132396544
1952c     01 16 66 F6 | 	neg	arg03, #1
19530     70 21 B1 FD | 	call	#__system___float_cmp
19534     01 FA 55 F2 | 	cmps	result1, #1 wc
19538     44 00 90 CD |  if_b	jmp	#LR__2045
1953c                 | LR__2044
1953c     0C 4E 05 F1 | 	add	fp, #12
19540     A7 2A 02 FB | 	rdlong	local03, fp
19544     15 33 02 F6 | 	mov	local07, local03
19548     03 32 66 F0 | 	shl	local07, #3
1954c     15 33 82 F1 | 	sub	local07, local03
19550     02 32 66 F0 | 	shl	local07, #2
19554     14 00 00 FF 
19558     38 E5 05 F1 | 	add	objptr, ##10552
1955c     F2 32 02 F1 | 	add	local07, objptr
19560     14 32 06 F1 | 	add	local07, #20
19564     19 2D E2 FA | 	rdword	local04, local07
19568     20 4E 05 F1 | 	add	fp, #32
1956c     A7 2C 62 FC | 	wrlong	local04, fp
19570     2C 4E 85 F1 | 	sub	fp, #44
19574     14 00 00 FF 
19578     38 E5 85 F1 | 	sub	objptr, ##10552
1957c     54 00 90 FD | 	jmp	#LR__2046
19580                 | LR__2045
19580     5C 4E 05 F1 | 	add	fp, #92
19584     A7 12 02 FB | 	rdlong	arg01, fp
19588     5C 4E 85 F1 | 	sub	fp, #92
1958c     01 14 06 F6 | 	mov	arg02, #1
19590     A4 21 B1 FD | 	call	#__system___float_tointeger
19594     2C 4E 05 F1 | 	add	fp, #44
19598     A7 FA 61 FC | 	wrlong	result1, fp
1959c     20 4E 85 F1 | 	sub	fp, #32
195a0     A7 28 02 FB | 	rdlong	local02, fp
195a4     14 2B 02 F6 | 	mov	local03, local02
195a8     03 2A 66 F0 | 	shl	local03, #3
195ac     14 2B 82 F1 | 	sub	local03, local02
195b0     02 2A 66 F0 | 	shl	local03, #2
195b4     14 00 00 FF 
195b8     38 E5 05 F1 | 	add	objptr, ##10552
195bc     F2 2A 02 F1 | 	add	local03, objptr
195c0     0C 4E 85 F1 | 	sub	fp, #12
195c4     14 2A 06 F1 | 	add	local03, #20
195c8     15 FB 51 FC | 	wrword	result1, local03
195cc     14 00 00 FF 
195d0     38 E5 85 F1 | 	sub	objptr, ##10552
195d4                 | LR__2046
195d4                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
195d4     60 4E 05 F1 | 	add	fp, #96
195d8     A7 12 02 FB | 	rdlong	arg01, fp
195dc     60 4E 85 F1 | 	sub	fp, #96
195e0     00 14 06 F6 | 	mov	arg02, #0
195e4     01 16 06 F6 | 	mov	arg03, #1
195e8     B8 20 B1 FD | 	call	#__system___float_cmp
195ec     00 FA 55 F2 | 	cmps	result1, #0 wc
195f0     24 00 90 CD |  if_b	jmp	#LR__2047
195f4     5C 4E 05 F1 | 	add	fp, #92
195f8     A7 12 02 FB | 	rdlong	arg01, fp
195fc     5C 4E 85 F1 | 	sub	fp, #92
19600     80 BF 21 FF 
19604     00 14 06 F6 | 	mov	arg02, ##1132396544
19608     01 16 66 F6 | 	neg	arg03, #1
1960c     94 20 B1 FD | 	call	#__system___float_cmp
19610     01 FA 55 F2 | 	cmps	result1, #1 wc
19614     44 00 90 CD |  if_b	jmp	#LR__2048
19618                 | LR__2047
19618     0C 4E 05 F1 | 	add	fp, #12
1961c     A7 2A 02 FB | 	rdlong	local03, fp
19620     15 33 02 F6 | 	mov	local07, local03
19624     03 32 66 F0 | 	shl	local07, #3
19628     15 33 82 F1 | 	sub	local07, local03
1962c     02 32 66 F0 | 	shl	local07, #2
19630     14 00 00 FF 
19634     38 E5 05 F1 | 	add	objptr, ##10552
19638     F2 32 02 F1 | 	add	local07, objptr
1963c     16 32 06 F1 | 	add	local07, #22
19640     19 2D E2 FA | 	rdword	local04, local07
19644     2C 4E 05 F1 | 	add	fp, #44
19648     A7 2C 62 FC | 	wrlong	local04, fp
1964c     38 4E 85 F1 | 	sub	fp, #56
19650     14 00 00 FF 
19654     38 E5 85 F1 | 	sub	objptr, ##10552
19658     54 00 90 FD | 	jmp	#LR__2049
1965c                 | LR__2048
1965c     60 4E 05 F1 | 	add	fp, #96
19660     A7 12 02 FB | 	rdlong	arg01, fp
19664     60 4E 85 F1 | 	sub	fp, #96
19668     01 14 06 F6 | 	mov	arg02, #1
1966c     C8 20 B1 FD | 	call	#__system___float_tointeger
19670     38 4E 05 F1 | 	add	fp, #56
19674     A7 FA 61 FC | 	wrlong	result1, fp
19678     2C 4E 85 F1 | 	sub	fp, #44
1967c     A7 28 02 FB | 	rdlong	local02, fp
19680     14 2B 02 F6 | 	mov	local03, local02
19684     03 2A 66 F0 | 	shl	local03, #3
19688     14 2B 82 F1 | 	sub	local03, local02
1968c     02 2A 66 F0 | 	shl	local03, #2
19690     14 00 00 FF 
19694     38 E5 05 F1 | 	add	objptr, ##10552
19698     F2 2A 02 F1 | 	add	local03, objptr
1969c     0C 4E 85 F1 | 	sub	fp, #12
196a0     16 2A 06 F1 | 	add	local03, #22
196a4     15 FB 51 FC | 	wrword	result1, local03
196a8     14 00 00 FF 
196ac     38 E5 85 F1 | 	sub	objptr, ##10552
196b0                 | LR__2049
196b0                 | ' 
196b0                 | ' 
196b0                 | ' if amode>0 then
196b0     38 4E 05 F1 | 	add	fp, #56
196b4     A7 2C 02 FB | 	rdlong	local04, fp
196b8     38 4E 85 F1 | 	sub	fp, #56
196bc     01 2C 56 F2 | 	cmps	local04, #1 wc
196c0     38 02 90 CD |  if_b	jmp	#LR__2052
196c4     74 4E 05 F1 | 	add	fp, #116
196c8     A7 14 02 FB | 	rdlong	arg02, fp
196cc     74 4E 85 F1 | 	sub	fp, #116
196d0     FC 16 20 FF 
196d4     54 12 06 F6 | 	mov	arg01, ##1076754516
196d8     68 2B B1 FD | 	call	#__system____builtin_logbase
196dc     FD 2C 02 F6 | 	mov	local04, result1
196e0     1E 14 C6 F9 | 	decod	arg02, #30
196e4     FC 16 20 FF 
196e8     54 12 06 F6 | 	mov	arg01, ##1076754516
196ec     54 2B B1 FD | 	call	#__system____builtin_logbase
196f0     FD 14 02 F6 | 	mov	arg02, result1
196f4     16 13 02 F6 | 	mov	arg01, local04
196f8     78 1D B1 FD | 	call	#__system___float_div
196fc     FD 12 02 F6 | 	mov	arg01, result1
19700     00 14 06 F6 | 	mov	arg02, #0
19704     30 20 B1 FD | 	call	#__system___float_tointeger
19708     30 4E 05 F1 | 	add	fp, #48
1970c     A7 FA 61 FC | 	wrlong	result1, fp
19710     1E 2C C6 F9 | 	decod	local04, #30
19714     FD 12 02 F6 | 	mov	arg01, result1
19718     08 4E 05 F1 | 	add	fp, #8
1971c     A7 32 02 FB | 	rdlong	local07, fp
19720     38 4E 85 F1 | 	sub	fp, #56
19724     19 13 02 F1 | 	add	arg01, local07
19728     09 13 52 F6 | 	abs	arg01, arg01 wc
1972c     1F 34 C6 C9 |  if_b	decod	local08, #31
19730     00 34 06 36 |  if_ae	mov	local08, #0
19734     34 17 B1 FD | 	call	#__system___float_fromuns
19738     1A FB 61 F5 | 	xor	result1, local08
1973c     FD 14 02 F6 | 	mov	arg02, result1
19740     16 13 02 F6 | 	mov	arg01, local04
19744     34 2A B1 FD | 	call	#__system____builtin_powf
19748     FD 12 02 F6 | 	mov	arg01, result1
1974c     01 14 06 F6 | 	mov	arg02, #1
19750     E4 1F B1 FD | 	call	#__system___float_tointeger
19754     10 4E 05 F1 | 	add	fp, #16
19758     A7 FA 61 FC | 	wrlong	result1, fp
1975c                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
1975c                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
1975c     10 4E 85 F1 | 	sub	fp, #16
19760     40 00 00 FF 
19764     01 FA 55 F2 | 	cmps	result1, ##32769 wc
19768     30 00 90 CD |  if_b	jmp	#LR__2050
1976c     10 4E 05 F1 | 	add	fp, #16
19770     A7 26 02 FB | 	rdlong	local01, fp
19774     13 2D 52 F6 | 	abs	local04, local01 wc
19778     0F 2C 46 F0 | 	shr	local04, #15
1977c     16 2D 82 F6 | 	negc	local04, local04
19780     0C 4E 85 F1 | 	sub	fp, #12
19784     A7 2C 62 FC | 	wrlong	local04, fp
19788     0C 4E 05 F1 | 	add	fp, #12
1978c     40 00 80 FF 
19790     A7 00 68 FC | 	wrlong	##32768, fp
19794     10 4E 85 F1 | 	sub	fp, #16
19798     0C 00 90 FD | 	jmp	#LR__2051
1979c                 | LR__2050
1979c     04 4E 05 F1 | 	add	fp, #4
197a0     A7 02 68 FC | 	wrlong	#1, fp
197a4     04 4E 85 F1 | 	sub	fp, #4
197a8                 | LR__2051
197a8     74 4E 05 F1 | 	add	fp, #116
197ac     A7 14 02 FB | 	rdlong	arg02, fp
197b0     74 4E 85 F1 | 	sub	fp, #116
197b4     AA 2B 25 FF 
197b8     00 13 06 F6 | 	mov	arg01, ##1247237376
197bc     B4 1C B1 FD | 	call	#__system___float_div
197c0     FD 2C 02 F6 | 	mov	local04, result1
197c4     04 4E 05 F1 | 	add	fp, #4
197c8     A7 12 02 FB | 	rdlong	arg01, fp
197cc     04 4E 85 F1 | 	sub	fp, #4
197d0     09 13 52 F6 | 	abs	arg01, arg01 wc
197d4     1F 34 C6 C9 |  if_b	decod	local08, #31
197d8     00 34 06 36 |  if_ae	mov	local08, #0
197dc     8C 16 B1 FD | 	call	#__system___float_fromuns
197e0     1A FB 61 F5 | 	xor	result1, local08
197e4     FD 26 02 F6 | 	mov	local01, result1
197e8     1E 28 C6 F9 | 	decod	local02, #30
197ec     12 12 06 F6 | 	mov	arg01, #18
197f0     38 4E 05 F1 | 	add	fp, #56
197f4     A7 30 02 FB | 	rdlong	local06, fp
197f8     18 13 82 F1 | 	sub	arg01, local06
197fc     08 4E 85 F1 | 	sub	fp, #8
19800     A7 32 02 FB | 	rdlong	local07, fp
19804     30 4E 85 F1 | 	sub	fp, #48
19808     19 13 82 F1 | 	sub	arg01, local07
1980c     09 13 52 F6 | 	abs	arg01, arg01 wc
19810     1F 34 C6 C9 |  if_b	decod	local08, #31
19814     00 34 06 36 |  if_ae	mov	local08, #0
19818     50 16 B1 FD | 	call	#__system___float_fromuns
1981c     1A FB 61 F5 | 	xor	result1, local08
19820     FD 14 02 F6 | 	mov	arg02, result1
19824     14 13 02 F6 | 	mov	arg01, local02
19828     50 29 B1 FD | 	call	#__system____builtin_powf
1982c     FD 14 02 F6 | 	mov	arg02, result1
19830     13 13 02 F6 | 	mov	arg01, local01
19834     38 1A B1 FD | 	call	#__system___float_mul
19838     FD 14 02 F6 | 	mov	arg02, result1
1983c     16 13 02 F6 | 	mov	arg01, local04
19840     30 1C B1 FD | 	call	#__system___float_div
19844     FD 12 02 F6 | 	mov	arg01, result1
19848     01 14 06 F6 | 	mov	arg02, #1
1984c     E8 1E B1 FD | 	call	#__system___float_tointeger
19850     34 4E 05 F1 | 	add	fp, #52
19854     A7 FA 61 FC | 	wrlong	result1, fp
19858     28 4E 85 F1 | 	sub	fp, #40
1985c     A7 28 02 FB | 	rdlong	local02, fp
19860     14 2B 02 F6 | 	mov	local03, local02
19864     03 2A 66 F0 | 	shl	local03, #3
19868     14 2B 82 F1 | 	sub	local03, local02
1986c     02 2A 66 F0 | 	shl	local03, #2
19870     14 00 00 FF 
19874     38 E5 05 F1 | 	add	objptr, ##10552
19878     F2 2A 02 F1 | 	add	local03, objptr
1987c     AA 2B 25 FF 
19880     00 31 06 F6 | 	mov	local06, ##1247237376
19884     0C 4E 85 F1 | 	sub	fp, #12
19888     14 00 00 FF 
1988c     38 E5 85 F1 | 	sub	objptr, ##10552
19890     FD 12 52 F6 | 	abs	arg01, result1 wc
19894     1F 34 C6 C9 |  if_b	decod	local08, #31
19898     00 34 06 36 |  if_ae	mov	local08, #0
1989c     CC 15 B1 FD | 	call	#__system___float_fromuns
198a0     1A FB 61 F5 | 	xor	result1, local08
198a4     FD 14 02 F6 | 	mov	arg02, result1
198a8     18 13 02 F6 | 	mov	arg01, local06
198ac     C4 1B B1 FD | 	call	#__system___float_div
198b0     FD 30 02 F6 | 	mov	local06, result1
198b4     10 4E 05 F1 | 	add	fp, #16
198b8     A7 12 02 FB | 	rdlong	arg01, fp
198bc     10 4E 85 F1 | 	sub	fp, #16
198c0     09 13 52 F6 | 	abs	arg01, arg01 wc
198c4     1F 34 C6 C9 |  if_b	decod	local08, #31
198c8     00 34 06 36 |  if_ae	mov	local08, #0
198cc     9C 15 B1 FD | 	call	#__system___float_fromuns
198d0     1A FB 61 F5 | 	xor	result1, local08
198d4     FD 12 02 F6 | 	mov	arg01, result1
198d8     00 40 24 FF 
198dc     00 14 06 F6 | 	mov	arg02, ##1216348160
198e0     90 1B B1 FD | 	call	#__system___float_div
198e4     FD 14 02 F6 | 	mov	arg02, result1
198e8     18 13 02 F6 | 	mov	arg01, local06
198ec     80 19 B1 FD | 	call	#__system___float_mul
198f0     18 2A 06 F1 | 	add	local03, #24
198f4     15 FB 61 FC | 	wrlong	result1, local03
198f8     F0 00 90 FD | 	jmp	#LR__2053
198fc                 | LR__2052
198fc     34 4E 05 F1 | 	add	fp, #52
19900     A7 30 68 FC | 	wrlong	#24, fp
19904     00 40 24 FF 
19908     00 2C 06 F6 | 	mov	local04, ##1216348160
1990c     40 4E 05 F1 | 	add	fp, #64
19910     A7 12 02 FB | 	rdlong	arg01, fp
19914     74 4E 85 F1 | 	sub	fp, #116
19918     C7 07 24 FF 
1991c     00 14 06 F6 | 	mov	arg02, ##1208978944
19920     50 1B B1 FD | 	call	#__system___float_div
19924     FD 14 02 F6 | 	mov	arg02, result1
19928     16 13 02 F6 | 	mov	arg01, local04
1992c     40 19 B1 FD | 	call	#__system___float_mul
19930     FD 12 02 F6 | 	mov	arg01, result1
19934     01 14 06 F6 | 	mov	arg02, #1
19938     FC 1D B1 FD | 	call	#__system___float_tointeger
1993c     10 4E 05 F1 | 	add	fp, #16
19940     A7 FA 61 FC | 	wrlong	result1, fp
19944     04 4E 85 F1 | 	sub	fp, #4
19948     A7 28 02 FB | 	rdlong	local02, fp
1994c     14 2B 02 F6 | 	mov	local03, local02
19950     03 2A 66 F0 | 	shl	local03, #3
19954     14 2B 82 F1 | 	sub	local03, local02
19958     02 2A 66 F0 | 	shl	local03, #2
1995c     14 00 00 FF 
19960     38 E5 05 F1 | 	add	objptr, ##10552
19964     F2 2A 02 F1 | 	add	local03, objptr
19968     AA 2B 25 FF 
1996c     00 31 06 F6 | 	mov	local06, ##1247237376
19970     28 4E 05 F1 | 	add	fp, #40
19974     A7 12 02 FB | 	rdlong	arg01, fp
19978     34 4E 85 F1 | 	sub	fp, #52
1997c     14 00 00 FF 
19980     38 E5 85 F1 | 	sub	objptr, ##10552
19984     09 13 52 F6 | 	abs	arg01, arg01 wc
19988     1F 34 C6 C9 |  if_b	decod	local08, #31
1998c     00 34 06 36 |  if_ae	mov	local08, #0
19990     D8 14 B1 FD | 	call	#__system___float_fromuns
19994     1A FB 61 F5 | 	xor	result1, local08
19998     FD 14 02 F6 | 	mov	arg02, result1
1999c     18 13 02 F6 | 	mov	arg01, local06
199a0     D0 1A B1 FD | 	call	#__system___float_div
199a4     FD 30 02 F6 | 	mov	local06, result1
199a8     10 4E 05 F1 | 	add	fp, #16
199ac     A7 12 02 FB | 	rdlong	arg01, fp
199b0     10 4E 85 F1 | 	sub	fp, #16
199b4     09 13 52 F6 | 	abs	arg01, arg01 wc
199b8     1F 34 C6 C9 |  if_b	decod	local08, #31
199bc     00 34 06 36 |  if_ae	mov	local08, #0
199c0     A8 14 B1 FD | 	call	#__system___float_fromuns
199c4     1A FB 61 F5 | 	xor	result1, local08
199c8     FD 12 02 F6 | 	mov	arg01, result1
199cc     00 40 24 FF 
199d0     00 14 06 F6 | 	mov	arg02, ##1216348160
199d4     9C 1A B1 FD | 	call	#__system___float_div
199d8     FD 14 02 F6 | 	mov	arg02, result1
199dc     18 13 02 F6 | 	mov	arg01, local06
199e0     8C 18 B1 FD | 	call	#__system___float_mul
199e4     18 2A 06 F1 | 	add	local03, #24
199e8     15 FB 61 FC | 	wrlong	result1, local03
199ec                 | LR__2053
199ec     70 4E 05 F1 | 	add	fp, #112
199f0     A7 12 02 FB | 	rdlong	arg01, fp
199f4     10 4E 05 F1 | 	add	fp, #16
199f8     A7 14 02 FB | 	rdlong	arg02, fp
199fc     80 4E 85 F1 | 	sub	fp, #128
19a00     70 1A B1 FD | 	call	#__system___float_div
19a04     FD 12 02 F6 | 	mov	arg01, result1
19a08     01 14 06 F6 | 	mov	arg02, #1
19a0c     28 1D B1 FD | 	call	#__system___float_tointeger
19a10     FD 2C 02 F6 | 	mov	local04, result1
19a14     14 4E 05 F1 | 	add	fp, #20
19a18     A7 2C 62 FC | 	wrlong	local04, fp
19a1c     64 4E 05 F1 | 	add	fp, #100
19a20     A7 14 02 FB | 	rdlong	arg02, fp
19a24     78 4E 85 F1 | 	sub	fp, #120
19a28     00 00 23 FF 
19a2c     00 12 06 F6 | 	mov	arg01, ##1174405120
19a30     3C 18 B1 FD | 	call	#__system___float_mul
19a34     FD 12 02 F6 | 	mov	arg01, result1
19a38     01 14 06 F6 | 	mov	arg02, #1
19a3c     F8 1C B1 FD | 	call	#__system___float_tointeger
19a40     0D 2C C6 F9 | 	decod	local04, #13
19a44     FD 2C 02 F1 | 	add	local04, result1
19a48     18 4E 05 F1 | 	add	fp, #24
19a4c     A7 2C 62 FC | 	wrlong	local04, fp
19a50     64 4E 05 F1 | 	add	fp, #100
19a54     A7 14 02 FB | 	rdlong	arg02, fp
19a58     7C 4E 85 F1 | 	sub	fp, #124
19a5c     00 3D 22 FF 
19a60     00 12 06 F6 | 	mov	arg01, ##1148846080
19a64     08 18 B1 FD | 	call	#__system___float_mul
19a68     FD 12 02 F6 | 	mov	arg01, result1
19a6c     01 14 06 F6 | 	mov	arg02, #1
19a70     C4 1C B1 FD | 	call	#__system___float_tointeger
19a74     1C 4E 05 F1 | 	add	fp, #28
19a78     A7 FA 61 FC | 	wrlong	result1, fp
19a7c     37 00 00 FF 
19a80     30 E4 05 F1 | 	add	objptr, ##28208
19a84     F2 2C 02 FB | 	rdlong	local04, objptr
19a88     37 00 00 FF 
19a8c     30 E4 85 F1 | 	sub	objptr, ##28208
19a90     10 4E 85 F1 | 	sub	fp, #16
19a94     A7 28 02 FB | 	rdlong	local02, fp
19a98     06 28 66 F0 | 	shl	local02, #6
19a9c     14 2D 02 F1 | 	add	local04, local02
19aa0     04 4E 85 F1 | 	sub	fp, #4
19aa4     A7 2C 62 FC | 	wrlong	local04, fp
19aa8                 | ' 
19aa8                 | ' speed=round(speed_coeff/slen)
19aa8                 | ' ipan=8192+round(8192*pan)
19aa8                 | ' ivol=round(1000.0*vol)
19aa8                 | ' base2=base+64*channel
19aa8                 | ' if wave <32 then 
19aa8     18 4E 05 F1 | 	add	fp, #24
19aac     A7 2C 02 FB | 	rdlong	local04, fp
19ab0     20 4E 85 F1 | 	sub	fp, #32
19ab4     20 2C 56 F2 | 	cmps	local04, #32 wc
19ab8     2C 00 90 3D |  if_ae	jmp	#LR__2054
19abc     08 4E 05 F1 | 	add	fp, #8
19ac0     A7 12 02 FB | 	rdlong	arg01, fp
19ac4     08 12 06 F1 | 	add	arg01, #8
19ac8     18 4E 05 F1 | 	add	fp, #24
19acc     A7 14 02 FB | 	rdlong	arg02, fp
19ad0     20 4E 85 F1 | 	sub	fp, #32
19ad4     0B 14 66 F0 | 	shl	arg02, #11
19ad8     00 00 60 FF 
19adc     00 14 06 F1 | 	add	arg02, ##-1073741824
19ae0     09 15 62 FC | 	wrlong	arg02, arg01
19ae4     18 00 90 FD | 	jmp	#LR__2055
19ae8                 | LR__2054
19ae8     08 4E 05 F1 | 	add	fp, #8
19aec     A7 12 02 FB | 	rdlong	arg01, fp
19af0     08 4E 85 F1 | 	sub	fp, #8
19af4     08 12 06 F1 | 	add	arg01, #8
19af8     00 00 E4 FF 
19afc     09 01 68 FC | 	wrlong	##-939524096, arg01
19b00                 | LR__2055
19b00     08 4E 05 F1 | 	add	fp, #8
19b04     A7 12 02 FB | 	rdlong	arg01, fp
19b08     10 12 06 F1 | 	add	arg01, #16
19b0c     04 00 80 FF 
19b10     09 01 68 FC | 	wrlong	##2048, arg01
19b14     A7 12 02 FB | 	rdlong	arg01, fp
19b18     0C 12 06 F1 | 	add	arg01, #12
19b1c     09 01 68 FC | 	wrlong	#0, arg01
19b20     A7 12 02 FB | 	rdlong	arg01, fp
19b24     14 12 06 F1 | 	add	arg01, #20
19b28     14 4E 05 F1 | 	add	fp, #20
19b2c     A7 14 02 FB | 	rdlong	arg02, fp
19b30     09 15 52 FC | 	wrword	arg02, arg01
19b34     14 4E 85 F1 | 	sub	fp, #20
19b38     A7 12 02 FB | 	rdlong	arg01, fp
19b3c     16 12 06 F1 | 	add	arg01, #22
19b40     10 4E 05 F1 | 	add	fp, #16
19b44     A7 14 02 FB | 	rdlong	arg02, fp
19b48     09 15 52 FC | 	wrword	arg02, arg01
19b4c                 | ' lpoke base2+16,2048
19b4c                 | ' lpoke base2+12,0
19b4c                 | ' dpoke base2+20,ivol 
19b4c                 | ' dpoke base2+22,ipan 
19b4c                 | ' if wave<32 then
19b4c     08 4E 05 F1 | 	add	fp, #8
19b50     A7 2C 02 FB | 	rdlong	local04, fp
19b54     20 4E 85 F1 | 	sub	fp, #32
19b58     20 2C 56 F2 | 	cmps	local04, #32 wc
19b5c     38 00 90 3D |  if_ae	jmp	#LR__2056
19b60     08 4E 05 F1 | 	add	fp, #8
19b64     A7 12 02 FB | 	rdlong	arg01, fp
19b68     18 12 06 F1 | 	add	arg01, #24
19b6c     2C 4E 05 F1 | 	add	fp, #44
19b70     A7 14 02 FB | 	rdlong	arg02, fp
19b74     09 15 52 FC | 	wrword	arg02, arg01
19b78     2C 4E 85 F1 | 	sub	fp, #44
19b7c     A7 12 02 FB | 	rdlong	arg01, fp
19b80     1A 12 06 F1 | 	add	arg01, #26
19b84     08 4E 05 F1 | 	add	fp, #8
19b88     A7 14 02 FB | 	rdlong	arg02, fp
19b8c     10 4E 85 F1 | 	sub	fp, #16
19b90     09 15 52 FC | 	wrword	arg02, arg01
19b94     48 00 90 FD | 	jmp	#LR__2057
19b98                 | LR__2056
19b98     08 4E 05 F1 | 	add	fp, #8
19b9c     A7 2C 02 FB | 	rdlong	local04, fp
19ba0     18 2C 06 F1 | 	add	local04, #24
19ba4     6C 4E 05 F1 | 	add	fp, #108
19ba8     A7 14 02 FB | 	rdlong	arg02, fp
19bac     74 4E 85 F1 | 	sub	fp, #116
19bb0     3E 2C 25 FF 
19bb4     3C 12 06 F6 | 	mov	arg01, ##1247312956
19bb8     B8 18 B1 FD | 	call	#__system___float_div
19bbc     FD 12 02 F6 | 	mov	arg01, result1
19bc0     01 14 06 F6 | 	mov	arg02, #1
19bc4     70 1B B1 FD | 	call	#__system___float_tointeger
19bc8     16 FB 51 FC | 	wrword	result1, local04
19bcc     08 4E 05 F1 | 	add	fp, #8
19bd0     A7 12 02 FB | 	rdlong	arg01, fp
19bd4     08 4E 85 F1 | 	sub	fp, #8
19bd8     1A 12 06 F1 | 	add	arg01, #26
19bdc     09 01 5A FC | 	wrword	#256, arg01
19be0                 | LR__2057
19be0     08 4E 05 F1 | 	add	fp, #8
19be4     A7 12 02 FB | 	rdlong	arg01, fp
19be8     1C 12 06 F1 | 	add	arg01, #28
19bec     09 01 68 FC | 	wrlong	#0, arg01
19bf0     A7 12 02 FB | 	rdlong	arg01, fp
19bf4     20 12 06 F1 | 	add	arg01, #32
19bf8     09 01 68 FC | 	wrlong	#0, arg01
19bfc                 | ' lpoke base2+28,$0000_0000
19bfc                 | ' lpoke base2+32,0 
19bfc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
19bfc     1C 4E 05 F1 | 	add	fp, #28
19c00     A7 2C 02 FB | 	rdlong	local04, fp
19c04     24 4E 85 F1 | 	sub	fp, #36
19c08     08 2C 0E F2 | 	cmp	local04, #8 wz
19c0c     18 00 90 5D |  if_ne	jmp	#LR__2058
19c10     08 4E 05 F1 | 	add	fp, #8
19c14     A7 12 02 FB | 	rdlong	arg01, fp
19c18     08 4E 85 F1 | 	sub	fp, #8
19c1c     24 12 06 F1 | 	add	arg01, #36
19c20     09 01 68 FC | 	wrlong	#0, arg01
19c24     34 00 90 FD | 	jmp	#LR__2059
19c28                 | LR__2058
19c28     08 4E 05 F1 | 	add	fp, #8
19c2c     A7 12 02 FB | 	rdlong	arg01, fp
19c30     24 12 06 F1 | 	add	arg01, #36
19c34     1C 4E 05 F1 | 	add	fp, #28
19c38     A7 14 02 FB | 	rdlong	arg02, fp
19c3c     24 4E 85 F1 | 	sub	fp, #36
19c40     09 14 66 F0 | 	shl	arg02, #9
19c44     0C 00 00 FF 
19c48     D8 E4 05 F1 | 	add	objptr, ##6360
19c4c     F2 14 02 F1 | 	add	arg02, objptr
19c50     0C 00 00 FF 
19c54     D8 E4 85 F1 | 	sub	objptr, ##6360
19c58     09 15 62 FC | 	wrlong	arg02, arg01
19c5c                 | LR__2059
19c5c     08 4E 05 F1 | 	add	fp, #8
19c60     A7 12 02 FB | 	rdlong	arg01, fp
19c64     28 12 06 F1 | 	add	arg01, #40
19c68     0C 4E 05 F1 | 	add	fp, #12
19c6c     A7 14 02 FB | 	rdlong	arg02, fp
19c70     09 15 62 FC | 	wrlong	arg02, arg01
19c74     0C 4E 85 F1 | 	sub	fp, #12
19c78     A7 12 02 FB | 	rdlong	arg01, fp
19c7c     2C 12 06 F1 | 	add	arg01, #44
19c80     24 4E 05 F1 | 	add	fp, #36
19c84     A7 14 02 FB | 	rdlong	arg02, fp
19c88     09 15 62 FC | 	wrlong	arg02, arg01
19c8c                 | ' lpoke base2+40,speed 
19c8c                 | ' lpoke base2+44,sus 
19c8c                 | ' if delay>0 then waitms(delay) 
19c8c     04 4E 85 F1 | 	sub	fp, #4
19c90     A7 2C 02 FB | 	rdlong	local04, fp
19c94     28 4E 85 F1 | 	sub	fp, #40
19c98     01 2C 56 F2 | 	cmps	local04, #1 wc
19c9c     28 4E 05 31 |  if_ae	add	fp, #40
19ca0     A7 12 02 3B |  if_ae	rdlong	arg01, fp
19ca4     28 4E 85 31 |  if_ae	sub	fp, #40
19ca8     3C EA B0 3D |  if_ae	call	#__system___waitms
19cac     A7 F0 03 F6 | 	mov	ptra, fp
19cb0     B2 00 A0 FD | 	call	#popregs_
19cb4                 | _do_play_ret
19cb4     2D 00 64 FD | 	ret
19cb8                 | 
19cb8                 | ' 
19cb8                 | ' '-------------------- plot
19cb8                 | ' 
19cb8                 | ' sub do_plot
19cb8                 | _do_plot
19cb8     00 4A 05 F6 | 	mov	COUNT_, #0
19cbc     A8 00 A0 FD | 	call	#pushregs_
19cc0     20 F0 07 F1 | 	add	ptra, #32
19cc4     EC 3B BF FD | 	call	#_pop
19cc8     FD 16 02 F6 | 	mov	arg03, result1
19ccc     FE 14 02 F6 | 	mov	arg02, result2
19cd0     FF 12 02 F6 | 	mov	arg01, result3
19cd4     0C 4E 05 F1 | 	add	fp, #12
19cd8     A7 16 62 FC | 	wrlong	arg03, fp
19cdc     04 4E 05 F1 | 	add	fp, #4
19ce0     A7 14 62 FC | 	wrlong	arg02, fp
19ce4     04 4E 05 F1 | 	add	fp, #4
19ce8     A7 12 62 FC | 	wrlong	arg01, fp
19cec     14 4E 85 F1 | 	sub	fp, #20
19cf0     C0 3B BF FD | 	call	#_pop
19cf4     FF 16 02 F6 | 	mov	arg03, result3
19cf8     A7 FA 61 FC | 	wrlong	result1, fp
19cfc     04 4E 05 F1 | 	add	fp, #4
19d00     A7 FC 61 FC | 	wrlong	result2, fp
19d04     04 4E 05 F1 | 	add	fp, #4
19d08     A7 16 62 FC | 	wrlong	arg03, fp
19d0c     08 4E 85 F1 | 	sub	fp, #8
19d10     A7 12 02 F6 | 	mov	arg01, fp
19d14     80 3D BF FD | 	call	#_converttoint
19d18     18 4E 05 F1 | 	add	fp, #24
19d1c     A7 FA 61 FC | 	wrlong	result1, fp
19d20     0C 4E 85 F1 | 	sub	fp, #12
19d24     A7 12 02 F6 | 	mov	arg01, fp
19d28     0C 4E 85 F1 | 	sub	fp, #12
19d2c     68 3D BF FD | 	call	#_converttoint
19d30     1C 4E 05 F1 | 	add	fp, #28
19d34     A7 FA 61 FC | 	wrlong	result1, fp
19d38     04 4E 85 F1 | 	sub	fp, #4
19d3c     A7 16 02 FB | 	rdlong	arg03, fp
19d40     37 00 00 FF 
19d44     4C E4 05 F1 | 	add	objptr, ##28236
19d48     F2 16 62 FC | 	wrlong	arg03, objptr
19d4c     04 4E 05 F1 | 	add	fp, #4
19d50     A7 14 02 FB | 	rdlong	arg02, fp
19d54     1C 4E 85 F1 | 	sub	fp, #28
19d58     04 E4 05 F1 | 	add	objptr, #4
19d5c     F2 14 62 FC | 	wrlong	arg02, objptr
19d60     04 E4 85 F1 | 	sub	objptr, #4
19d64     F2 12 02 FB | 	rdlong	arg01, objptr
19d68     04 E4 85 F1 | 	sub	objptr, #4
19d6c     F2 16 02 FB | 	rdlong	arg03, objptr
19d70     37 00 00 FF 
19d74     48 E4 85 F1 | 	sub	objptr, ##28232
19d78     D4 BC B0 FD | 	call	#_hg010b_spin2_putpixel
19d7c     A7 F0 03 F6 | 	mov	ptra, fp
19d80     B2 00 A0 FD | 	call	#popregs_
19d84                 | _do_plot_ret
19d84     2D 00 64 FD | 	ret
19d88                 | 
19d88                 | ' 
19d88                 | ' '-------------------- poke
19d88                 | ' 
19d88                 | ' sub do_poke
19d88                 | _do_poke
19d88     01 4A 05 F6 | 	mov	COUNT_, #1
19d8c     A8 00 A0 FD | 	call	#pushregs_
19d90     20 F0 07 F1 | 	add	ptra, #32
19d94     1C 3B BF FD | 	call	#_pop
19d98     FD 14 02 F6 | 	mov	arg02, result1
19d9c     FE 12 02 F6 | 	mov	arg01, result2
19da0     FF 26 02 F6 | 	mov	local01, result3
19da4     A7 14 62 FC | 	wrlong	arg02, fp
19da8     04 4E 05 F1 | 	add	fp, #4
19dac     A7 12 62 FC | 	wrlong	arg01, fp
19db0     04 4E 05 F1 | 	add	fp, #4
19db4     A7 26 62 FC | 	wrlong	local01, fp
19db8     08 4E 85 F1 | 	sub	fp, #8
19dbc     F4 3A BF FD | 	call	#_pop
19dc0     FF 26 02 F6 | 	mov	local01, result3
19dc4     0C 4E 05 F1 | 	add	fp, #12
19dc8     A7 FA 61 FC | 	wrlong	result1, fp
19dcc     04 4E 05 F1 | 	add	fp, #4
19dd0     A7 FC 61 FC | 	wrlong	result2, fp
19dd4     04 4E 05 F1 | 	add	fp, #4
19dd8     A7 26 62 FC | 	wrlong	local01, fp
19ddc     08 4E 85 F1 | 	sub	fp, #8
19de0     A7 12 02 F6 | 	mov	arg01, fp
19de4     0C 4E 85 F1 | 	sub	fp, #12
19de8     AC 3C BF FD | 	call	#_converttoint
19dec     18 4E 05 F1 | 	add	fp, #24
19df0     A7 FA 61 FC | 	wrlong	result1, fp
19df4     18 4E 85 F1 | 	sub	fp, #24
19df8     A7 12 02 F6 | 	mov	arg01, fp
19dfc     98 3C BF FD | 	call	#_converttoint
19e00     1C 4E 05 F1 | 	add	fp, #28
19e04     A7 FA 61 FC | 	wrlong	result1, fp
19e08                 | ' t1=pop() 'value
19e08                 | ' t2=pop() 
19e08                 | ' a=converttoint(t2) : v=converttoint(t1)
19e08                 | ' if a<$80000 then poke a,v else pspoke a,v
19e08     04 4E 85 F1 | 	sub	fp, #4
19e0c     A7 26 02 FB | 	rdlong	local01, fp
19e10     18 4E 85 F1 | 	sub	fp, #24
19e14     00 04 00 FF 
19e18     00 26 16 F2 | 	cmp	local01, ##524288 wc
19e1c     1C 00 90 3D |  if_ae	jmp	#LR__2060
19e20     18 4E 05 F1 | 	add	fp, #24
19e24     A7 12 02 FB | 	rdlong	arg01, fp
19e28     04 4E 05 F1 | 	add	fp, #4
19e2c     A7 14 02 FB | 	rdlong	arg02, fp
19e30     1C 4E 85 F1 | 	sub	fp, #28
19e34     09 15 42 FC | 	wrbyte	arg02, arg01
19e38     18 00 90 FD | 	jmp	#LR__2061
19e3c                 | LR__2060
19e3c     18 4E 05 F1 | 	add	fp, #24
19e40     A7 12 02 FB | 	rdlong	arg01, fp
19e44     04 4E 05 F1 | 	add	fp, #4
19e48     A7 14 02 FB | 	rdlong	arg02, fp
19e4c     1C 4E 85 F1 | 	sub	fp, #28
19e50     78 AD B0 FD | 	call	#_pspoke
19e54                 | LR__2061
19e54     A7 F0 03 F6 | 	mov	ptra, fp
19e58     B2 00 A0 FD | 	call	#popregs_
19e5c                 | _do_poke_ret
19e5c     2D 00 64 FD | 	ret
19e60                 | 
19e60                 | ' 
19e60                 | ' '-------------------- pop
19e60                 | ' 
19e60                 | ' sub do_pop()
19e60                 | _do_pop
19e60                 | ' if gosubtop>0 then  gosubtop -=1 
19e60     50 00 00 FF 
19e64     54 E5 05 F1 | 	add	objptr, ##41300
19e68     F2 00 02 FB | 	rdlong	_var01, objptr
19e6c     50 00 00 FF 
19e70     54 E5 85 F1 | 	sub	objptr, ##41300
19e74     01 00 56 F2 | 	cmps	_var01, #1 wc
19e78     50 00 00 3F 
19e7c     54 E5 05 31 |  if_ae	add	objptr, ##41300
19e80     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
19e84     01 00 86 31 |  if_ae	sub	_var01, #1
19e88     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
19e8c     50 00 00 3F 
19e90     54 E5 85 31 |  if_ae	sub	objptr, ##41300
19e94                 | _do_pop_ret
19e94     2D 00 64 FD | 	ret
19e98                 | 
19e98                 | ' 
19e98                 | ' '-------------------- position
19e98                 | ' 
19e98                 | ' sub do_position
19e98                 | _do_position
19e98     01 4A 05 F6 | 	mov	COUNT_, #1
19e9c     A8 00 A0 FD | 	call	#pushregs_
19ea0     18 F0 07 F1 | 	add	ptra, #24
19ea4     0C 3A BF FD | 	call	#_pop
19ea8     FD 14 02 F6 | 	mov	arg02, result1
19eac     FE 12 02 F6 | 	mov	arg01, result2
19eb0     FF 26 02 F6 | 	mov	local01, result3
19eb4     A7 14 62 FC | 	wrlong	arg02, fp
19eb8     04 4E 05 F1 | 	add	fp, #4
19ebc     A7 12 62 FC | 	wrlong	arg01, fp
19ec0     04 4E 05 F1 | 	add	fp, #4
19ec4     A7 26 62 FC | 	wrlong	local01, fp
19ec8     08 4E 85 F1 | 	sub	fp, #8
19ecc     E4 39 BF FD | 	call	#_pop
19ed0     FF 26 02 F6 | 	mov	local01, result3
19ed4     0C 4E 05 F1 | 	add	fp, #12
19ed8     A7 FA 61 FC | 	wrlong	result1, fp
19edc     04 4E 05 F1 | 	add	fp, #4
19ee0     A7 FC 61 FC | 	wrlong	result2, fp
19ee4     04 4E 05 F1 | 	add	fp, #4
19ee8     A7 26 62 FC | 	wrlong	local01, fp
19eec     08 4E 85 F1 | 	sub	fp, #8
19ef0     A7 12 02 F6 | 	mov	arg01, fp
19ef4     0C 4E 85 F1 | 	sub	fp, #12
19ef8     9C 3B BF FD | 	call	#_converttoint
19efc     FD 26 02 F6 | 	mov	local01, result1
19f00     A7 12 02 F6 | 	mov	arg01, fp
19f04     90 3B BF FD | 	call	#_converttoint
19f08     FD 14 02 F6 | 	mov	arg02, result1
19f0c     13 13 02 F6 | 	mov	arg01, local01
19f10     44 C7 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19f14     A7 F0 03 F6 | 	mov	ptra, fp
19f18     B2 00 A0 FD | 	call	#popregs_
19f1c                 | _do_position_ret
19f1c     2D 00 64 FD | 	ret
19f20                 | 
19f20                 | ' 
19f20                 | ' '-------------------- print
19f20                 | ' 
19f20                 | ' sub do_print  
19f20                 | _do_print
19f20     0B 4A 05 F6 | 	mov	COUNT_, #11
19f24     A8 00 A0 FD | 	call	#pushregs_
19f28     00 2C 06 F6 | 	mov	local04, #0
19f2c     84 39 BF FD | 	call	#_pop
19f30     FD 2E 02 F6 | 	mov	local05, result1
19f34     FE 30 02 F6 | 	mov	local06, result2
19f38     FF 32 02 F6 | 	mov	local07, result3
19f3c     17 27 02 F6 | 	mov	local01, local05
19f40     18 29 02 F6 | 	mov	local02, local06
19f44     19 2B 02 F6 | 	mov	local03, local07
19f48                 | '  
19f48                 | ' r=0
19f48                 | ' t1=pop() 
19f48                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
19f48     21 2A 0E F2 | 	cmp	local03, #33 wz
19f4c     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
19f50     20 00 90 5D |  if_ne	jmp	#LR__2070
19f54     15 2D 02 F6 | 	mov	local04, local03
19f58     58 39 BF FD | 	call	#_pop
19f5c     FD 2E 02 F6 | 	mov	local05, result1
19f60     FE 30 02 F6 | 	mov	local06, result2
19f64     FF 32 02 F6 | 	mov	local07, result3
19f68     17 27 02 F6 | 	mov	local01, local05
19f6c     18 29 02 F6 | 	mov	local02, local06
19f70     19 2B 02 F6 | 	mov	local03, local07
19f74                 | LR__2070
19f74                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
19f74     20 2A 0E F2 | 	cmp	local03, #32 wz
19f78     15 2D 02 A6 |  if_e	mov	local04, local03
19f7c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
19f7c     FF 2A 0E F2 | 	cmp	local03, #255 wz
19f80     10 00 90 5D |  if_ne	jmp	#LR__2071
19f84     13 13 02 F6 | 	mov	arg01, local01
19f88     00 14 06 F6 | 	mov	arg02, #0
19f8c     0C AA B0 FD | 	call	#_printerror
19f90     D4 04 90 FD | 	jmp	#LR__2090
19f94                 | LR__2071
19f94                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
19f94     2B 2A 0E F2 | 	cmp	local03, #43 wz
19f98     14 00 90 5D |  if_ne	jmp	#LR__2072
19f9c     13 13 02 F6 | 	mov	arg01, local01
19fa0     88 3A BF FD | 	call	#_convertstring
19fa4     FD 2E 02 F6 | 	mov	local05, result1
19fa8     17 27 02 F6 | 	mov	local01, local05
19fac     1F 2A 06 F6 | 	mov	local03, #31
19fb0                 | LR__2072
19fb0                 | ' 
19fb0                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
19fb0     2C 2A 0E F2 | 	cmp	local03, #44 wz
19fb4     80 00 90 5D |  if_ne	jmp	#LR__2073
19fb8     00 12 06 F6 | 	mov	arg01, #0
19fbc     E4 40 B1 FD | 	call	#__system___getiolock_0625
19fc0     FD 12 02 F6 | 	mov	arg01, result1
19fc4     2C E4 B0 FD | 	call	#__system___lockmem
19fc8     C5 01 00 FF 
19fcc     18 15 06 F6 | 	mov	arg02, ##@LR__6144
19fd0     00 12 06 F6 | 	mov	arg01, #0
19fd4     00 16 06 F6 | 	mov	arg03, #0
19fd8     10 F1 B0 FD | 	call	#__system___basic_print_string
19fdc     0A 34 06 F6 | 	mov	local08, #10
19fe0     00 12 06 F6 | 	mov	arg01, #0
19fe4     13 15 02 F6 | 	mov	arg02, local01
19fe8     00 16 06 F6 | 	mov	arg03, #0
19fec     0A 18 06 F6 | 	mov	arg04, #10
19ff0     3C F1 B0 FD | 	call	#__system___basic_print_integer
19ff4     FD 36 02 F6 | 	mov	local09, result1
19ff8     00 12 06 F6 | 	mov	arg01, #0
19ffc     0A 14 06 F6 | 	mov	arg02, #10
1a000     00 16 06 F6 | 	mov	arg03, #0
1a004     8C F0 B0 FD | 	call	#__system___basic_print_char
1a008     01 38 06 F6 | 	mov	local10, #1
1a00c     00 12 06 F6 | 	mov	arg01, #0
1a010     90 40 B1 FD | 	call	#__system___getiolock_0625
1a014     FD 00 68 FC | 	wrlong	#0, result1
1a018     00 3A 06 F6 | 	mov	local11, #0
1a01c     94 38 BF FD | 	call	#_pop
1a020     FD 2E 02 F6 | 	mov	local05, result1
1a024     FE 30 02 F6 | 	mov	local06, result2
1a028     FF 32 02 F6 | 	mov	local07, result3
1a02c     17 27 02 F6 | 	mov	local01, local05
1a030     18 29 02 F6 | 	mov	local02, local06
1a034     19 2B 02 F6 | 	mov	local03, local07
1a038                 | LR__2073
1a038                 | ' 
1a038                 | ' if r=print_mod_comma  then
1a038     21 2C 0E F2 | 	cmp	local04, #33 wz
1a03c     AC 01 90 5D |  if_ne	jmp	#LR__2078
1a040                 | '   if t1.result_type=result_int then print t1.result.iresult,
1a040     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a044     64 00 90 5D |  if_ne	jmp	#LR__2074
1a048     00 12 06 F6 | 	mov	arg01, #0
1a04c     54 40 B1 FD | 	call	#__system___getiolock_0625
1a050     FD 12 02 F6 | 	mov	arg01, result1
1a054     9C E3 B0 FD | 	call	#__system___lockmem
1a058     00 30 06 F6 | 	mov	local06, #0
1a05c     00 12 06 F6 | 	mov	arg01, #0
1a060     13 15 02 F6 | 	mov	arg02, local01
1a064     00 16 06 F6 | 	mov	arg03, #0
1a068     0A 18 06 F6 | 	mov	arg04, #10
1a06c     C0 F0 B0 FD | 	call	#__system___basic_print_integer
1a070     FD 32 02 F6 | 	mov	local07, result1
1a074     18 2F 02 F6 | 	mov	local05, local06
1a078     19 2F 02 F1 | 	add	local05, local07
1a07c     00 3A 06 F6 | 	mov	local11, #0
1a080     00 12 06 F6 | 	mov	arg01, #0
1a084     09 14 06 F6 | 	mov	arg02, #9
1a088     00 16 06 F6 | 	mov	arg03, #0
1a08c     04 F0 B0 FD | 	call	#__system___basic_print_char
1a090     FD 36 02 F6 | 	mov	local09, result1
1a094     FD 2E 02 F1 | 	add	local05, result1
1a098     00 12 06 F6 | 	mov	arg01, #0
1a09c     04 40 B1 FD | 	call	#__system___getiolock_0625
1a0a0     FD 00 68 FC | 	wrlong	#0, result1
1a0a4     00 FA 05 F6 | 	mov	result1, #0
1a0a8     00 38 06 F6 | 	mov	local10, #0
1a0ac                 | LR__2074
1a0ac                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1a0ac     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a0b0     64 00 90 5D |  if_ne	jmp	#LR__2075
1a0b4     00 12 06 F6 | 	mov	arg01, #0
1a0b8     E8 3F B1 FD | 	call	#__system___getiolock_0625
1a0bc     FD 12 02 F6 | 	mov	arg01, result1
1a0c0     30 E3 B0 FD | 	call	#__system___lockmem
1a0c4     00 30 06 F6 | 	mov	local06, #0
1a0c8     00 12 06 F6 | 	mov	arg01, #0
1a0cc     13 15 02 F6 | 	mov	arg02, local01
1a0d0     00 16 06 F6 | 	mov	arg03, #0
1a0d4     0A 18 06 F6 | 	mov	arg04, #10
1a0d8     94 F0 B0 FD | 	call	#__system___basic_print_unsigned
1a0dc     FD 32 02 F6 | 	mov	local07, result1
1a0e0     18 2F 02 F6 | 	mov	local05, local06
1a0e4     19 2F 02 F1 | 	add	local05, local07
1a0e8     00 3A 06 F6 | 	mov	local11, #0
1a0ec     00 12 06 F6 | 	mov	arg01, #0
1a0f0     09 14 06 F6 | 	mov	arg02, #9
1a0f4     00 16 06 F6 | 	mov	arg03, #0
1a0f8     98 EF B0 FD | 	call	#__system___basic_print_char
1a0fc     FD 36 02 F6 | 	mov	local09, result1
1a100     FD 2E 02 F1 | 	add	local05, result1
1a104     00 12 06 F6 | 	mov	arg01, #0
1a108     98 3F B1 FD | 	call	#__system___getiolock_0625
1a10c     FD 00 68 FC | 	wrlong	#0, result1
1a110     00 FA 05 F6 | 	mov	result1, #0
1a114     00 38 06 F6 | 	mov	local10, #0
1a118                 | LR__2075
1a118                 | '   if t1.result_type=result_float then print t1.result.fresult,
1a118     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a11c     64 00 90 5D |  if_ne	jmp	#LR__2076
1a120     00 12 06 F6 | 	mov	arg01, #0
1a124     7C 3F B1 FD | 	call	#__system___getiolock_0625
1a128     FD 12 02 F6 | 	mov	arg01, result1
1a12c     C4 E2 B0 FD | 	call	#__system___lockmem
1a130     00 30 06 F6 | 	mov	local06, #0
1a134     00 12 06 F6 | 	mov	arg01, #0
1a138     13 15 02 F6 | 	mov	arg02, local01
1a13c     00 16 06 F6 | 	mov	arg03, #0
1a140     23 18 06 F6 | 	mov	arg04, #35
1a144     40 17 B1 FD | 	call	#__system___basic_print_float
1a148     FD 32 02 F6 | 	mov	local07, result1
1a14c     18 2F 02 F6 | 	mov	local05, local06
1a150     19 2F 02 F1 | 	add	local05, local07
1a154     00 3A 06 F6 | 	mov	local11, #0
1a158     00 12 06 F6 | 	mov	arg01, #0
1a15c     09 14 06 F6 | 	mov	arg02, #9
1a160     00 16 06 F6 | 	mov	arg03, #0
1a164     2C EF B0 FD | 	call	#__system___basic_print_char
1a168     FD 36 02 F6 | 	mov	local09, result1
1a16c     FD 2E 02 F1 | 	add	local05, result1
1a170     00 12 06 F6 | 	mov	arg01, #0
1a174     2C 3F B1 FD | 	call	#__system___getiolock_0625
1a178     FD 00 68 FC | 	wrlong	#0, result1
1a17c     00 FA 05 F6 | 	mov	result1, #0
1a180     00 38 06 F6 | 	mov	local10, #0
1a184                 | LR__2076
1a184                 | '   if t1.result_type=result_string then print t1.result.sresult,
1a184     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a188     60 00 90 5D |  if_ne	jmp	#LR__2077
1a18c     00 12 06 F6 | 	mov	arg01, #0
1a190     10 3F B1 FD | 	call	#__system___getiolock_0625
1a194     FD 12 02 F6 | 	mov	arg01, result1
1a198     58 E2 B0 FD | 	call	#__system___lockmem
1a19c     00 30 06 F6 | 	mov	local06, #0
1a1a0     00 12 06 F6 | 	mov	arg01, #0
1a1a4     13 15 02 F6 | 	mov	arg02, local01
1a1a8     00 16 06 F6 | 	mov	arg03, #0
1a1ac     3C EF B0 FD | 	call	#__system___basic_print_string
1a1b0     FD 32 02 F6 | 	mov	local07, result1
1a1b4     18 2F 02 F6 | 	mov	local05, local06
1a1b8     19 2F 02 F1 | 	add	local05, local07
1a1bc     00 3A 06 F6 | 	mov	local11, #0
1a1c0     00 12 06 F6 | 	mov	arg01, #0
1a1c4     09 14 06 F6 | 	mov	arg02, #9
1a1c8     00 16 06 F6 | 	mov	arg03, #0
1a1cc     C4 EE B0 FD | 	call	#__system___basic_print_char
1a1d0     FD 36 02 F6 | 	mov	local09, result1
1a1d4     FD 2E 02 F1 | 	add	local05, result1
1a1d8     00 12 06 F6 | 	mov	arg01, #0
1a1dc     C4 3E B1 FD | 	call	#__system___getiolock_0625
1a1e0     FD 00 68 FC | 	wrlong	#0, result1
1a1e4     00 FA 05 F6 | 	mov	result1, #0
1a1e8     00 38 06 F6 | 	mov	local10, #0
1a1ec                 | LR__2077
1a1ec                 | LR__2078
1a1ec                 | ' if r=print_mod_semicolon then 
1a1ec     22 2C 0E F2 | 	cmp	local04, #34 wz
1a1f0     1C 01 90 5D |  if_ne	jmp	#LR__2083
1a1f4                 | '   if t1.result_type=result_int then print t1.result.iresult;
1a1f4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a1f8     50 00 90 5D |  if_ne	jmp	#LR__2079
1a1fc     00 12 06 F6 | 	mov	arg01, #0
1a200     A0 3E B1 FD | 	call	#__system___getiolock_0625
1a204     FD 12 02 F6 | 	mov	arg01, result1
1a208     E8 E1 B0 FD | 	call	#__system___lockmem
1a20c     00 30 06 F6 | 	mov	local06, #0
1a210     00 38 06 F6 | 	mov	local10, #0
1a214     0A 3A 06 F6 | 	mov	local11, #10
1a218     00 12 06 F6 | 	mov	arg01, #0
1a21c     13 15 02 F6 | 	mov	arg02, local01
1a220     00 16 06 F6 | 	mov	arg03, #0
1a224     0A 18 06 F6 | 	mov	arg04, #10
1a228     04 EF B0 FD | 	call	#__system___basic_print_integer
1a22c     FD 32 02 F6 | 	mov	local07, result1
1a230     18 2F 02 F6 | 	mov	local05, local06
1a234     19 2F 02 F1 | 	add	local05, local07
1a238     00 12 06 F6 | 	mov	arg01, #0
1a23c     64 3E B1 FD | 	call	#__system___getiolock_0625
1a240     FD 00 68 FC | 	wrlong	#0, result1
1a244     00 FA 05 F6 | 	mov	result1, #0
1a248     00 36 06 F6 | 	mov	local09, #0
1a24c                 | LR__2079
1a24c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1a24c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a250     50 00 90 5D |  if_ne	jmp	#LR__2080
1a254     00 12 06 F6 | 	mov	arg01, #0
1a258     48 3E B1 FD | 	call	#__system___getiolock_0625
1a25c     FD 12 02 F6 | 	mov	arg01, result1
1a260     90 E1 B0 FD | 	call	#__system___lockmem
1a264     00 30 06 F6 | 	mov	local06, #0
1a268     00 38 06 F6 | 	mov	local10, #0
1a26c     0A 3A 06 F6 | 	mov	local11, #10
1a270     00 12 06 F6 | 	mov	arg01, #0
1a274     13 15 02 F6 | 	mov	arg02, local01
1a278     00 16 06 F6 | 	mov	arg03, #0
1a27c     0A 18 06 F6 | 	mov	arg04, #10
1a280     EC EE B0 FD | 	call	#__system___basic_print_unsigned
1a284     FD 32 02 F6 | 	mov	local07, result1
1a288     18 2F 02 F6 | 	mov	local05, local06
1a28c     19 2F 02 F1 | 	add	local05, local07
1a290     00 12 06 F6 | 	mov	arg01, #0
1a294     0C 3E B1 FD | 	call	#__system___getiolock_0625
1a298     FD 00 68 FC | 	wrlong	#0, result1
1a29c     00 FA 05 F6 | 	mov	result1, #0
1a2a0     00 36 06 F6 | 	mov	local09, #0
1a2a4                 | LR__2080
1a2a4                 | '   if t1.result_type=result_float then print t1.result.fresult;
1a2a4     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a2a8     30 00 90 5D |  if_ne	jmp	#LR__2081
1a2ac     00 12 06 F6 | 	mov	arg01, #0
1a2b0     F0 3D B1 FD | 	call	#__system___getiolock_0625
1a2b4     FD 12 02 F6 | 	mov	arg01, result1
1a2b8     38 E1 B0 FD | 	call	#__system___lockmem
1a2bc     00 12 06 F6 | 	mov	arg01, #0
1a2c0     13 15 02 F6 | 	mov	arg02, local01
1a2c4     00 16 06 F6 | 	mov	arg03, #0
1a2c8     23 18 06 F6 | 	mov	arg04, #35
1a2cc     B8 15 B1 FD | 	call	#__system___basic_print_float
1a2d0     00 12 06 F6 | 	mov	arg01, #0
1a2d4     CC 3D B1 FD | 	call	#__system___getiolock_0625
1a2d8     FD 00 68 FC | 	wrlong	#0, result1
1a2dc                 | LR__2081
1a2dc                 | '   if t1.result_type=result_string then print t1.result.sresult;
1a2dc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a2e0     2C 00 90 5D |  if_ne	jmp	#LR__2082
1a2e4     00 12 06 F6 | 	mov	arg01, #0
1a2e8     B8 3D B1 FD | 	call	#__system___getiolock_0625
1a2ec     FD 12 02 F6 | 	mov	arg01, result1
1a2f0     00 E1 B0 FD | 	call	#__system___lockmem
1a2f4     00 12 06 F6 | 	mov	arg01, #0
1a2f8     13 15 02 F6 | 	mov	arg02, local01
1a2fc     00 16 06 F6 | 	mov	arg03, #0
1a300     E8 ED B0 FD | 	call	#__system___basic_print_string
1a304     00 12 06 F6 | 	mov	arg01, #0
1a308     98 3D B1 FD | 	call	#__system___getiolock_0625
1a30c     FD 00 68 FC | 	wrlong	#0, result1
1a310                 | LR__2082
1a310                 | LR__2083
1a310                 | ' if r=0 then 
1a310     00 2C 0E F2 | 	cmp	local04, #0 wz
1a314     1C 01 90 5D |  if_ne	jmp	#LR__2088
1a318                 | '   if t1.result_type=result_int then print t1.result.iresult
1a318     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a31c     40 00 90 5D |  if_ne	jmp	#LR__2084
1a320     00 12 06 F6 | 	mov	arg01, #0
1a324     7C 3D B1 FD | 	call	#__system___getiolock_0625
1a328     FD 12 02 F6 | 	mov	arg01, result1
1a32c     C4 E0 B0 FD | 	call	#__system___lockmem
1a330     00 12 06 F6 | 	mov	arg01, #0
1a334     13 15 02 F6 | 	mov	arg02, local01
1a338     00 16 06 F6 | 	mov	arg03, #0
1a33c     0A 18 06 F6 | 	mov	arg04, #10
1a340     EC ED B0 FD | 	call	#__system___basic_print_integer
1a344     00 12 06 F6 | 	mov	arg01, #0
1a348     0A 14 06 F6 | 	mov	arg02, #10
1a34c     00 16 06 F6 | 	mov	arg03, #0
1a350     40 ED B0 FD | 	call	#__system___basic_print_char
1a354     00 12 06 F6 | 	mov	arg01, #0
1a358     48 3D B1 FD | 	call	#__system___getiolock_0625
1a35c     FD 00 68 FC | 	wrlong	#0, result1
1a360                 | LR__2084
1a360                 | '   if t1.result_type=result_uint then print t1.result.uresult
1a360     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a364     40 00 90 5D |  if_ne	jmp	#LR__2085
1a368     00 12 06 F6 | 	mov	arg01, #0
1a36c     34 3D B1 FD | 	call	#__system___getiolock_0625
1a370     FD 12 02 F6 | 	mov	arg01, result1
1a374     7C E0 B0 FD | 	call	#__system___lockmem
1a378     00 12 06 F6 | 	mov	arg01, #0
1a37c     13 15 02 F6 | 	mov	arg02, local01
1a380     00 16 06 F6 | 	mov	arg03, #0
1a384     0A 18 06 F6 | 	mov	arg04, #10
1a388     E4 ED B0 FD | 	call	#__system___basic_print_unsigned
1a38c     00 12 06 F6 | 	mov	arg01, #0
1a390     0A 14 06 F6 | 	mov	arg02, #10
1a394     00 16 06 F6 | 	mov	arg03, #0
1a398     F8 EC B0 FD | 	call	#__system___basic_print_char
1a39c     00 12 06 F6 | 	mov	arg01, #0
1a3a0     00 3D B1 FD | 	call	#__system___getiolock_0625
1a3a4     FD 00 68 FC | 	wrlong	#0, result1
1a3a8                 | LR__2085
1a3a8                 | '   if t1.result_type=result_float then print t1.result.fresult
1a3a8     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a3ac     40 00 90 5D |  if_ne	jmp	#LR__2086
1a3b0     00 12 06 F6 | 	mov	arg01, #0
1a3b4     EC 3C B1 FD | 	call	#__system___getiolock_0625
1a3b8     FD 12 02 F6 | 	mov	arg01, result1
1a3bc     34 E0 B0 FD | 	call	#__system___lockmem
1a3c0     00 12 06 F6 | 	mov	arg01, #0
1a3c4     13 15 02 F6 | 	mov	arg02, local01
1a3c8     00 16 06 F6 | 	mov	arg03, #0
1a3cc     23 18 06 F6 | 	mov	arg04, #35
1a3d0     B4 14 B1 FD | 	call	#__system___basic_print_float
1a3d4     00 12 06 F6 | 	mov	arg01, #0
1a3d8     0A 14 06 F6 | 	mov	arg02, #10
1a3dc     00 16 06 F6 | 	mov	arg03, #0
1a3e0     B0 EC B0 FD | 	call	#__system___basic_print_char
1a3e4     00 12 06 F6 | 	mov	arg01, #0
1a3e8     B8 3C B1 FD | 	call	#__system___getiolock_0625
1a3ec     FD 00 68 FC | 	wrlong	#0, result1
1a3f0                 | LR__2086
1a3f0                 | '   if t1.result_type=result_string then print t1.result.sresult
1a3f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a3f4     3C 00 90 5D |  if_ne	jmp	#LR__2087
1a3f8     00 12 06 F6 | 	mov	arg01, #0
1a3fc     A4 3C B1 FD | 	call	#__system___getiolock_0625
1a400     FD 12 02 F6 | 	mov	arg01, result1
1a404     EC DF B0 FD | 	call	#__system___lockmem
1a408     00 12 06 F6 | 	mov	arg01, #0
1a40c     13 15 02 F6 | 	mov	arg02, local01
1a410     00 16 06 F6 | 	mov	arg03, #0
1a414     D4 EC B0 FD | 	call	#__system___basic_print_string
1a418     00 12 06 F6 | 	mov	arg01, #0
1a41c     0A 14 06 F6 | 	mov	arg02, #10
1a420     00 16 06 F6 | 	mov	arg03, #0
1a424     6C EC B0 FD | 	call	#__system___basic_print_char
1a428     00 12 06 F6 | 	mov	arg01, #0
1a42c     74 3C B1 FD | 	call	#__system___getiolock_0625
1a430     FD 00 68 FC | 	wrlong	#0, result1
1a434                 | LR__2087
1a434                 | LR__2088
1a434                 | ' if r=print_mod_empty then print
1a434     20 2C 0E F2 | 	cmp	local04, #32 wz
1a438     2C 00 90 5D |  if_ne	jmp	#LR__2089
1a43c     00 12 06 F6 | 	mov	arg01, #0
1a440     60 3C B1 FD | 	call	#__system___getiolock_0625
1a444     FD 12 02 F6 | 	mov	arg01, result1
1a448     A8 DF B0 FD | 	call	#__system___lockmem
1a44c     00 12 06 F6 | 	mov	arg01, #0
1a450     0A 14 06 F6 | 	mov	arg02, #10
1a454     00 16 06 F6 | 	mov	arg03, #0
1a458     38 EC B0 FD | 	call	#__system___basic_print_char
1a45c     00 12 06 F6 | 	mov	arg01, #0
1a460     40 3C B1 FD | 	call	#__system___getiolock_0625
1a464     FD 00 68 FC | 	wrlong	#0, result1
1a468                 | LR__2089
1a468                 | LR__2090
1a468     A7 F0 03 F6 | 	mov	ptra, fp
1a46c     B2 00 A0 FD | 	call	#popregs_
1a470                 | _do_print_ret
1a470     2D 00 64 FD | 	ret
1a474                 | 
1a474                 | ' 
1a474                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1a474                 | ' 
1a474                 | ' sub do_push
1a474                 | _do_push
1a474                 | ' if stackpointer<maxstack then 
1a474     43 00 00 FF 
1a478     78 E4 05 F1 | 	add	objptr, ##34424
1a47c     F2 00 02 FB | 	rdlong	_var01, objptr
1a480     43 00 00 FF 
1a484     78 E4 85 F1 | 	sub	objptr, ##34424
1a488     01 00 00 FF 
1a48c     00 00 56 F2 | 	cmps	_var01, ##512 wc
1a490     F8 00 90 3D |  if_ae	jmp	#LR__2100
1a494     4A 00 00 FF 
1a498     A0 E4 05 F1 | 	add	objptr, ##38048
1a49c     F2 02 02 FB | 	rdlong	_var02, objptr
1a4a0     01 05 02 F6 | 	mov	_var03, _var02
1a4a4     01 04 66 F0 | 	shl	_var03, #1
1a4a8     01 05 02 F1 | 	add	_var03, _var02
1a4ac     02 04 66 F0 | 	shl	_var03, #2
1a4b0     03 00 00 FF 
1a4b4     04 E4 85 F1 | 	sub	objptr, ##1540
1a4b8     F2 04 02 F1 | 	add	_var03, objptr
1a4bc     02 01 02 FB | 	rdlong	_var01, _var03
1a4c0     04 04 06 F1 | 	add	_var03, #4
1a4c4     02 07 02 FB | 	rdlong	_var04, _var03
1a4c8     01 05 02 F6 | 	mov	_var03, _var02
1a4cc     01 04 66 F0 | 	shl	_var03, #1
1a4d0     01 05 02 F1 | 	add	_var03, _var02
1a4d4     02 04 66 F0 | 	shl	_var03, #2
1a4d8     F2 04 02 F1 | 	add	_var03, objptr
1a4dc     08 04 06 F1 | 	add	_var03, #8
1a4e0     02 03 02 FB | 	rdlong	_var02, _var03
1a4e4     04 00 00 FF 
1a4e8     24 E4 85 F1 | 	sub	objptr, ##2084
1a4ec     F2 04 02 FB | 	rdlong	_var03, objptr
1a4f0     02 09 02 F6 | 	mov	_var05, _var03
1a4f4     01 08 66 F0 | 	shl	_var05, #1
1a4f8     02 09 02 F1 | 	add	_var05, _var03
1a4fc     02 08 66 F0 | 	shl	_var05, #2
1a500     0C 00 00 FF 
1a504     0C E4 85 F1 | 	sub	objptr, ##6156
1a508     F2 08 02 F1 | 	add	_var05, objptr
1a50c     04 01 62 FC | 	wrlong	_var01, _var05
1a510     0C 00 00 FF 
1a514     0C E4 05 F1 | 	add	objptr, ##6156
1a518     F2 08 02 FB | 	rdlong	_var05, objptr
1a51c     04 05 02 F6 | 	mov	_var03, _var05
1a520     01 04 66 F0 | 	shl	_var03, #1
1a524     04 05 02 F1 | 	add	_var03, _var05
1a528     02 04 66 F0 | 	shl	_var03, #2
1a52c     0C 00 00 FF 
1a530     0C E4 85 F1 | 	sub	objptr, ##6156
1a534     F2 04 02 F1 | 	add	_var03, objptr
1a538     04 04 06 F1 | 	add	_var03, #4
1a53c     02 07 62 FC | 	wrlong	_var04, _var03
1a540     0C 00 00 FF 
1a544     0C E4 05 F1 | 	add	objptr, ##6156
1a548     F2 08 02 FB | 	rdlong	_var05, objptr
1a54c     04 07 02 F6 | 	mov	_var04, _var05
1a550     01 06 66 F0 | 	shl	_var04, #1
1a554     04 07 02 F1 | 	add	_var04, _var05
1a558     02 06 66 F0 | 	shl	_var04, #2
1a55c     0C 00 00 FF 
1a560     0C E4 85 F1 | 	sub	objptr, ##6156
1a564     F2 06 02 F1 | 	add	_var04, objptr
1a568     08 06 06 F1 | 	add	_var04, #8
1a56c     03 03 62 FC | 	wrlong	_var02, _var04
1a570     0C 00 00 FF 
1a574     0C E4 05 F1 | 	add	objptr, ##6156
1a578     F2 00 02 FB | 	rdlong	_var01, objptr
1a57c     01 00 06 F1 | 	add	_var01, #1
1a580     F2 00 62 FC | 	wrlong	_var01, objptr
1a584     43 00 00 FF 
1a588     78 E4 85 F1 | 	sub	objptr, ##34424
1a58c                 | LR__2100
1a58c                 | _do_push_ret
1a58c     2D 00 64 FD | 	ret
1a590                 | 
1a590                 | ' 
1a590                 | ' '-------------------- put
1a590                 | ' 
1a590                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1a590                 | _do_put
1a590     03 4A 05 F6 | 	mov	COUNT_, #3
1a594     A8 00 A0 FD | 	call	#pushregs_
1a598     28 F0 07 F1 | 	add	ptra, #40
1a59c     4A 00 00 FF 
1a5a0     A0 E4 05 F1 | 	add	objptr, ##38048
1a5a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1a5a8     0D 19 02 F6 | 	mov	arg04, arg05
1a5ac     01 18 66 F0 | 	shl	arg04, #1
1a5b0     0D 19 02 F1 | 	add	arg04, arg05
1a5b4     02 18 66 F0 | 	shl	arg04, #2
1a5b8     03 00 00 FF 
1a5bc     04 E4 85 F1 | 	sub	objptr, ##1540
1a5c0     F2 18 02 F1 | 	add	arg04, objptr
1a5c4     0C 1B 02 FB | 	rdlong	arg05, arg04
1a5c8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5cc                 | ' 
1a5cc                 | ' numpar=compiledline(lineptr_e).result.uresult
1a5cc                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1a5cc     04 1A 0E F2 | 	cmp	arg05, #4 wz
1a5d0     47 00 00 FF 
1a5d4     9C E4 85 F1 | 	sub	objptr, ##36508
1a5d8     48 00 90 5D |  if_ne	jmp	#LR__2110
1a5dc     D4 32 BF FD | 	call	#_pop
1a5e0     FF 1A 02 F6 | 	mov	arg05, result3
1a5e4     1C 4E 05 F1 | 	add	fp, #28
1a5e8     A7 FA 61 FC | 	wrlong	result1, fp
1a5ec     04 4E 05 F1 | 	add	fp, #4
1a5f0     A7 FC 61 FC | 	wrlong	result2, fp
1a5f4     04 4E 05 F1 | 	add	fp, #4
1a5f8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5fc     08 4E 85 F1 | 	sub	fp, #8
1a600     A7 12 02 F6 | 	mov	arg01, fp
1a604     1C 4E 85 F1 | 	sub	fp, #28
1a608     8C 34 BF FD | 	call	#_converttoint
1a60c     52 00 00 FF 
1a610     64 E5 05 F1 | 	add	objptr, ##42340
1a614     F2 FA 61 FC | 	wrlong	result1, objptr
1a618     52 00 00 FF 
1a61c     64 E5 85 F1 | 	sub	objptr, ##42340
1a620     18 00 90 FD | 	jmp	#LR__2111
1a624                 | LR__2110
1a624     52 00 00 FF 
1a628     64 E5 05 F1 | 	add	objptr, ##42340
1a62c     FF FF FF FF 
1a630     F2 FE 6B FC | 	wrlong	##-1, objptr
1a634     52 00 00 FF 
1a638     64 E5 85 F1 | 	sub	objptr, ##42340
1a63c                 | LR__2111
1a63c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
1a63c     A7 1A 02 FB | 	rdlong	arg05, fp
1a640     03 1A 56 F2 | 	cmps	arg05, #3 wc
1a644     40 00 90 CD |  if_b	jmp	#LR__2112
1a648     68 32 BF FD | 	call	#_pop
1a64c     FF 1A 02 F6 | 	mov	arg05, result3
1a650     1C 4E 05 F1 | 	add	fp, #28
1a654     A7 FA 61 FC | 	wrlong	result1, fp
1a658     04 4E 05 F1 | 	add	fp, #4
1a65c     A7 FC 61 FC | 	wrlong	result2, fp
1a660     04 4E 05 F1 | 	add	fp, #4
1a664     A7 1A 62 FC | 	wrlong	arg05, fp
1a668     08 4E 85 F1 | 	sub	fp, #8
1a66c     A7 12 02 F6 | 	mov	arg01, fp
1a670     1C 4E 85 F1 | 	sub	fp, #28
1a674     20 34 BF FD | 	call	#_converttoint
1a678     08 4E 05 F1 | 	add	fp, #8
1a67c     A7 FA 61 FC | 	wrlong	result1, fp
1a680     08 4E 85 F1 | 	sub	fp, #8
1a684     0C 00 90 FD | 	jmp	#LR__2113
1a688                 | LR__2112
1a688     08 4E 05 F1 | 	add	fp, #8
1a68c     A7 02 68 FC | 	wrlong	#1, fp
1a690     08 4E 85 F1 | 	sub	fp, #8
1a694                 | LR__2113
1a694                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1a694     A7 18 02 FB | 	rdlong	arg04, fp
1a698     02 18 56 F2 | 	cmps	arg04, #2 wc
1a69c     3C 00 90 CD |  if_b	jmp	#LR__2114
1a6a0     10 32 BF FD | 	call	#_pop
1a6a4     FF 18 02 F6 | 	mov	arg04, result3
1a6a8     1C 4E 05 F1 | 	add	fp, #28
1a6ac     A7 FA 61 FC | 	wrlong	result1, fp
1a6b0     04 4E 05 F1 | 	add	fp, #4
1a6b4     A7 FC 61 FC | 	wrlong	result2, fp
1a6b8     04 4E 05 F1 | 	add	fp, #4
1a6bc     A7 18 62 FC | 	wrlong	arg04, fp
1a6c0     08 4E 85 F1 | 	sub	fp, #8
1a6c4     A7 12 02 F6 | 	mov	arg01, fp
1a6c8     1C 4E 85 F1 | 	sub	fp, #28
1a6cc     C8 33 BF FD | 	call	#_converttoint
1a6d0     0C 4E 05 F1 | 	add	fp, #12
1a6d4     A7 FA 61 FC | 	wrlong	result1, fp
1a6d8     0C 4E 85 F1 | 	sub	fp, #12
1a6dc                 | LR__2114
1a6dc     D4 31 BF FD | 	call	#_pop
1a6e0     FF 18 02 F6 | 	mov	arg04, result3
1a6e4     1C 4E 05 F1 | 	add	fp, #28
1a6e8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ec     04 4E 05 F1 | 	add	fp, #4
1a6f0     A7 FC 61 FC | 	wrlong	result2, fp
1a6f4     04 4E 05 F1 | 	add	fp, #4
1a6f8     A7 18 62 FC | 	wrlong	arg04, fp
1a6fc     08 4E 85 F1 | 	sub	fp, #8
1a700     A7 12 02 F6 | 	mov	arg01, fp
1a704     1C 4E 85 F1 | 	sub	fp, #28
1a708     8C 33 BF FD | 	call	#_converttoint
1a70c     04 4E 05 F1 | 	add	fp, #4
1a710     A7 FA 61 FC | 	wrlong	result1, fp
1a714     10 4E 05 F1 | 	add	fp, #16
1a718     A7 26 02 FB | 	rdlong	local01, fp
1a71c     14 4E 85 F1 | 	sub	fp, #20
1a720     02 26 66 F0 | 	shl	local01, #2
1a724     50 00 00 FF 
1a728     E4 E4 05 F1 | 	add	objptr, ##41188
1a72c     F2 26 02 F1 | 	add	local01, objptr
1a730     13 01 68 FC | 	wrlong	#0, local01
1a734                 | ' t1=pop() : channel=converttoint(t1)
1a734                 | ' getres(j)=0
1a734                 | ' if pos>=0 then
1a734     02 00 00 FF 
1a738     80 E4 05 F1 | 	add	objptr, ##1152
1a73c     F2 28 02 FB | 	rdlong	local02, objptr
1a740     52 00 00 FF 
1a744     64 E5 85 F1 | 	sub	objptr, ##42340
1a748     00 28 56 F2 | 	cmps	local02, #0 wc
1a74c     C0 01 90 CD |  if_b	jmp	#LR__2120
1a750     10 4E 05 F1 | 	add	fp, #16
1a754     A7 00 68 FC | 	wrlong	#0, fp
1a758     10 4E 85 F1 | 	sub	fp, #16
1a75c                 | '    i=0: do
1a75c                 | LR__2115
1a75c     14 4E 05 F1 | 	add	fp, #20
1a760     A7 00 68 FC | 	wrlong	#0, fp
1a764     14 4E 85 F1 | 	sub	fp, #20
1a768                 | '    j=0: do    
1a768                 | LR__2116
1a768                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a768     0C 4E 05 F1 | 	add	fp, #12
1a76c     A7 28 02 FB | 	rdlong	local02, fp
1a770     0C 4E 85 F1 | 	sub	fp, #12
1a774     00 04 00 FF 
1a778     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a77c     4C 00 90 3D |  if_ae	jmp	#LR__2117
1a780     14 4E 05 F1 | 	add	fp, #20
1a784     A7 28 02 FB | 	rdlong	local02, fp
1a788     14 27 02 F6 | 	mov	local01, local02
1a78c     4E 00 00 FF 
1a790     D4 E4 05 F1 | 	add	objptr, ##40148
1a794     F2 26 02 F1 | 	add	local01, objptr
1a798     08 4E 85 F1 | 	sub	fp, #8
1a79c     A7 12 02 FB | 	rdlong	arg01, fp
1a7a0     04 4E 05 F1 | 	add	fp, #4
1a7a4     A7 18 02 FB | 	rdlong	arg04, fp
1a7a8     0A 18 66 F0 | 	shl	arg04, #10
1a7ac     0C 13 02 F1 | 	add	arg01, arg04
1a7b0     10 4E 85 F1 | 	sub	fp, #16
1a7b4     14 13 02 F1 | 	add	arg01, local02
1a7b8     09 FB C1 FA | 	rdbyte	result1, arg01
1a7bc     4E 00 00 FF 
1a7c0     D4 E4 85 F1 | 	sub	objptr, ##40148
1a7c4     13 FB 41 FC | 	wrbyte	result1, local01
1a7c8     48 00 90 FD | 	jmp	#LR__2118
1a7cc                 | LR__2117
1a7cc     14 4E 05 F1 | 	add	fp, #20
1a7d0     A7 28 02 FB | 	rdlong	local02, fp
1a7d4     14 27 02 F6 | 	mov	local01, local02
1a7d8     4E 00 00 FF 
1a7dc     D4 E4 05 F1 | 	add	objptr, ##40148
1a7e0     F2 26 02 F1 | 	add	local01, objptr
1a7e4     08 4E 85 F1 | 	sub	fp, #8
1a7e8     A7 12 02 FB | 	rdlong	arg01, fp
1a7ec     04 4E 05 F1 | 	add	fp, #4
1a7f0     A7 18 02 FB | 	rdlong	arg04, fp
1a7f4     0A 18 66 F0 | 	shl	arg04, #10
1a7f8     0C 13 02 F1 | 	add	arg01, arg04
1a7fc     10 4E 85 F1 | 	sub	fp, #16
1a800     14 13 02 F1 | 	add	arg01, local02
1a804     4E 00 00 FF 
1a808     D4 E4 85 F1 | 	sub	objptr, ##40148
1a80c     04 A4 B0 FD | 	call	#_pspeek
1a810     13 FB 41 FC | 	wrbyte	result1, local01
1a814                 | LR__2118
1a814     14 4E 05 F1 | 	add	fp, #20
1a818     A7 28 02 FB | 	rdlong	local02, fp
1a81c     01 28 06 F1 | 	add	local02, #1
1a820     A7 28 62 FC | 	wrlong	local02, fp
1a824     14 4E 85 F1 | 	sub	fp, #20
1a828     02 00 00 FF 
1a82c     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a830     2C 00 90 3D |  if_ae	jmp	#LR__2119
1a834     10 4E 05 F1 | 	add	fp, #16
1a838     A7 26 02 FB | 	rdlong	local01, fp
1a83c     0A 26 66 F0 | 	shl	local01, #10
1a840     04 4E 05 F1 | 	add	fp, #4
1a844     A7 28 02 FB | 	rdlong	local02, fp
1a848     14 27 02 F1 | 	add	local01, local02
1a84c     0C 4E 85 F1 | 	sub	fp, #12
1a850     A7 28 02 FB | 	rdlong	local02, fp
1a854     08 4E 85 F1 | 	sub	fp, #8
1a858     14 27 5A F2 | 	cmps	local01, local02 wcz
1a85c     08 FF 9F ED |  if_be	jmp	#LR__2116
1a860                 | LR__2119
1a860                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1a860     04 4E 05 F1 | 	add	fp, #4
1a864     A7 12 02 FB | 	rdlong	arg01, fp
1a868     52 00 00 FF 
1a86c     64 E5 05 F1 | 	add	objptr, ##42340
1a870     F2 14 02 FB | 	rdlong	arg02, objptr
1a874     01 14 06 F1 | 	add	arg02, #1
1a878     04 00 00 FF 
1a87c     90 E4 85 F1 | 	sub	objptr, ##2192
1a880     F2 16 02 F6 | 	mov	arg03, objptr
1a884     4E 00 00 FF 
1a888     D4 E4 85 F1 | 	sub	objptr, ##40148
1a88c     04 4E 05 F1 | 	add	fp, #4
1a890     A7 18 02 FB | 	rdlong	arg04, fp
1a894     08 4E 85 F1 | 	sub	fp, #8
1a898     01 1A 06 F6 | 	mov	arg05, #1
1a89c     5C E9 B0 FD | 	call	#__system___basic_put
1a8a0     18 4E 05 F1 | 	add	fp, #24
1a8a4     A7 FA 61 FC | 	wrlong	result1, fp
1a8a8     14 4E 85 F1 | 	sub	fp, #20
1a8ac     A7 26 02 FB | 	rdlong	local01, fp
1a8b0     02 26 66 F0 | 	shl	local01, #2
1a8b4     50 00 00 FF 
1a8b8     E4 E4 05 F1 | 	add	objptr, ##41188
1a8bc     F2 26 02 F1 | 	add	local01, objptr
1a8c0     13 FB 61 FC | 	wrlong	result1, local01
1a8c4                 | '    if 1024*i+j>amount then exit loop
1a8c4     0C 4E 05 F1 | 	add	fp, #12
1a8c8     A7 28 02 FB | 	rdlong	local02, fp
1a8cc     0A 28 66 F0 | 	shl	local02, #10
1a8d0     04 4E 05 F1 | 	add	fp, #4
1a8d4     A7 26 02 FB | 	rdlong	local01, fp
1a8d8     13 29 02 F1 | 	add	local02, local01
1a8dc     0C 4E 85 F1 | 	sub	fp, #12
1a8e0     A7 26 02 FB | 	rdlong	local01, fp
1a8e4     08 4E 85 F1 | 	sub	fp, #8
1a8e8     13 29 5A F2 | 	cmps	local02, local01 wcz
1a8ec     50 00 00 FF 
1a8f0     E4 E4 85 F1 | 	sub	objptr, ##41188
1a8f4     CC 01 90 1D |  if_a	jmp	#LR__2127
1a8f8     10 4E 05 F1 | 	add	fp, #16
1a8fc     A7 28 02 FB | 	rdlong	local02, fp
1a900     01 28 06 F1 | 	add	local02, #1
1a904     A7 28 62 FC | 	wrlong	local02, fp
1a908     10 4E 85 F1 | 	sub	fp, #16
1a90c     4C FE 9F FD | 	jmp	#LR__2115
1a910                 | LR__2120
1a910     10 4E 05 F1 | 	add	fp, #16
1a914     A7 00 68 FC | 	wrlong	#0, fp
1a918     10 4E 85 F1 | 	sub	fp, #16
1a91c                 | '    i=0: do
1a91c                 | LR__2121
1a91c     14 4E 05 F1 | 	add	fp, #20
1a920     A7 00 68 FC | 	wrlong	#0, fp
1a924     14 4E 85 F1 | 	sub	fp, #20
1a928                 | '    j=0: do  
1a928                 | LR__2122
1a928                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a928     0C 4E 05 F1 | 	add	fp, #12
1a92c     A7 28 02 FB | 	rdlong	local02, fp
1a930     0C 4E 85 F1 | 	sub	fp, #12
1a934     00 04 00 FF 
1a938     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a93c     4C 00 90 3D |  if_ae	jmp	#LR__2123
1a940     14 4E 05 F1 | 	add	fp, #20
1a944     A7 28 02 FB | 	rdlong	local02, fp
1a948     14 27 02 F6 | 	mov	local01, local02
1a94c     4E 00 00 FF 
1a950     D4 E4 05 F1 | 	add	objptr, ##40148
1a954     F2 26 02 F1 | 	add	local01, objptr
1a958     08 4E 85 F1 | 	sub	fp, #8
1a95c     A7 12 02 FB | 	rdlong	arg01, fp
1a960     04 4E 05 F1 | 	add	fp, #4
1a964     A7 18 02 FB | 	rdlong	arg04, fp
1a968     0A 18 66 F0 | 	shl	arg04, #10
1a96c     0C 13 02 F1 | 	add	arg01, arg04
1a970     10 4E 85 F1 | 	sub	fp, #16
1a974     14 13 02 F1 | 	add	arg01, local02
1a978     09 FB C1 FA | 	rdbyte	result1, arg01
1a97c     4E 00 00 FF 
1a980     D4 E4 85 F1 | 	sub	objptr, ##40148
1a984     13 FB 41 FC | 	wrbyte	result1, local01
1a988     48 00 90 FD | 	jmp	#LR__2124
1a98c                 | LR__2123
1a98c     14 4E 05 F1 | 	add	fp, #20
1a990     A7 28 02 FB | 	rdlong	local02, fp
1a994     14 27 02 F6 | 	mov	local01, local02
1a998     4E 00 00 FF 
1a99c     D4 E4 05 F1 | 	add	objptr, ##40148
1a9a0     F2 26 02 F1 | 	add	local01, objptr
1a9a4     08 4E 85 F1 | 	sub	fp, #8
1a9a8     A7 12 02 FB | 	rdlong	arg01, fp
1a9ac     04 4E 05 F1 | 	add	fp, #4
1a9b0     A7 18 02 FB | 	rdlong	arg04, fp
1a9b4     0A 18 66 F0 | 	shl	arg04, #10
1a9b8     0C 13 02 F1 | 	add	arg01, arg04
1a9bc     10 4E 85 F1 | 	sub	fp, #16
1a9c0     14 13 02 F1 | 	add	arg01, local02
1a9c4     4E 00 00 FF 
1a9c8     D4 E4 85 F1 | 	sub	objptr, ##40148
1a9cc     44 A2 B0 FD | 	call	#_pspeek
1a9d0     13 FB 41 FC | 	wrbyte	result1, local01
1a9d4                 | LR__2124
1a9d4     14 4E 05 F1 | 	add	fp, #20
1a9d8     A7 28 02 FB | 	rdlong	local02, fp
1a9dc     01 28 06 F1 | 	add	local02, #1
1a9e0     A7 28 62 FC | 	wrlong	local02, fp
1a9e4     14 4E 85 F1 | 	sub	fp, #20
1a9e8     02 00 00 FF 
1a9ec     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a9f0     2C 00 90 3D |  if_ae	jmp	#LR__2125
1a9f4     10 4E 05 F1 | 	add	fp, #16
1a9f8     A7 26 02 FB | 	rdlong	local01, fp
1a9fc     0A 26 66 F0 | 	shl	local01, #10
1aa00     04 4E 05 F1 | 	add	fp, #4
1aa04     A7 28 02 FB | 	rdlong	local02, fp
1aa08     14 27 02 F1 | 	add	local01, local02
1aa0c     0C 4E 85 F1 | 	sub	fp, #12
1aa10     A7 28 02 FB | 	rdlong	local02, fp
1aa14     08 4E 85 F1 | 	sub	fp, #8
1aa18     14 27 5A F2 | 	cmps	local01, local02 wcz
1aa1c     08 FF 9F ED |  if_be	jmp	#LR__2122
1aa20                 | LR__2125
1aa20                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1aa20     04 4E 05 F1 | 	add	fp, #4
1aa24     A7 12 02 FB | 	rdlong	arg01, fp
1aa28     4E 00 00 FF 
1aa2c     D4 E4 05 F1 | 	add	objptr, ##40148
1aa30     F2 16 02 F6 | 	mov	arg03, objptr
1aa34     4E 00 00 FF 
1aa38     D4 E4 85 F1 | 	sub	objptr, ##40148
1aa3c     04 4E 05 F1 | 	add	fp, #4
1aa40     A7 18 02 FB | 	rdlong	arg04, fp
1aa44     08 4E 85 F1 | 	sub	fp, #8
1aa48     00 14 06 F6 | 	mov	arg02, #0
1aa4c     01 1A 06 F6 | 	mov	arg05, #1
1aa50     A8 E7 B0 FD | 	call	#__system___basic_put
1aa54     18 4E 05 F1 | 	add	fp, #24
1aa58     A7 FA 61 FC | 	wrlong	result1, fp
1aa5c     14 4E 85 F1 | 	sub	fp, #20
1aa60     A7 26 02 FB | 	rdlong	local01, fp
1aa64     02 26 66 F0 | 	shl	local01, #2
1aa68     50 00 00 FF 
1aa6c     E4 E4 05 F1 | 	add	objptr, ##41188
1aa70     F2 26 02 F1 | 	add	local01, objptr
1aa74     13 FB 61 FC | 	wrlong	result1, local01
1aa78                 | '    if 1024*i+j>amount then exit loop
1aa78     0C 4E 05 F1 | 	add	fp, #12
1aa7c     A7 28 02 FB | 	rdlong	local02, fp
1aa80     0A 28 66 F0 | 	shl	local02, #10
1aa84     04 4E 05 F1 | 	add	fp, #4
1aa88     A7 26 02 FB | 	rdlong	local01, fp
1aa8c     13 29 02 F1 | 	add	local02, local01
1aa90     0C 4E 85 F1 | 	sub	fp, #12
1aa94     A7 2A 02 FB | 	rdlong	local03, fp
1aa98     08 4E 85 F1 | 	sub	fp, #8
1aa9c     15 29 5A F2 | 	cmps	local02, local03 wcz
1aaa0     50 00 00 FF 
1aaa4     E4 E4 85 F1 | 	sub	objptr, ##41188
1aaa8     18 00 90 1D |  if_a	jmp	#LR__2126
1aaac     10 4E 05 F1 | 	add	fp, #16
1aab0     A7 28 02 FB | 	rdlong	local02, fp
1aab4     01 28 06 F1 | 	add	local02, #1
1aab8     A7 28 62 FC | 	wrlong	local02, fp
1aabc     10 4E 85 F1 | 	sub	fp, #16
1aac0     58 FE 9F FD | 	jmp	#LR__2121
1aac4                 | LR__2126
1aac4                 | LR__2127
1aac4     A7 F0 03 F6 | 	mov	ptra, fp
1aac8     B2 00 A0 FD | 	call	#popregs_
1aacc                 | _do_put_ret
1aacc     2D 00 64 FD | 	ret
1aad0                 | 
1aad0                 | ' 
1aad0                 | ' '-------------------- rad
1aad0                 | ' 
1aad0                 | ' sub do_rad
1aad0                 | _do_rad
1aad0     52 00 00 FF 
1aad4     00 E5 05 F1 | 	add	objptr, ##42240
1aad8     00 C0 9F FF 
1aadc     F2 00 68 FC | 	wrlong	##1065353216, objptr
1aae0     04 E4 05 F1 | 	add	objptr, #4
1aae4     00 C0 9F FF 
1aae8     F2 00 68 FC | 	wrlong	##1065353216, objptr
1aaec     52 00 00 FF 
1aaf0     04 E5 85 F1 | 	sub	objptr, ##42244
1aaf4                 | _do_rad_ret
1aaf4     2D 00 64 FD | 	ret
1aaf8                 | 
1aaf8                 | ' 
1aaf8                 | ' '-------------------- rdpin
1aaf8                 | ' 
1aaf8                 | ' sub do_rdpin
1aaf8                 | _do_rdpin
1aaf8     00 4A 05 F6 | 	mov	COUNT_, #0
1aafc     A8 00 A0 FD | 	call	#pushregs_
1ab00     0C F0 07 F1 | 	add	ptra, #12
1ab04     AC 2D BF FD | 	call	#_pop
1ab08     A7 FA 61 FC | 	wrlong	result1, fp
1ab0c     04 4E 05 F1 | 	add	fp, #4
1ab10     A7 FC 61 FC | 	wrlong	result2, fp
1ab14     04 4E 05 F1 | 	add	fp, #4
1ab18     A7 FE 61 FC | 	wrlong	result3, fp
1ab1c     08 4E 85 F1 | 	sub	fp, #8
1ab20     A7 12 02 F6 | 	mov	arg01, fp
1ab24     70 2F BF FD | 	call	#_converttoint
1ab28     FD FA 89 FA | 	rdpin	result1, result1
1ab2c     52 00 00 FF 
1ab30     68 E5 05 F1 | 	add	objptr, ##42344
1ab34     F2 FA 61 FC | 	wrlong	result1, objptr
1ab38     52 00 00 FF 
1ab3c     68 E5 85 F1 | 	sub	objptr, ##42344
1ab40     08 4E 05 F1 | 	add	fp, #8
1ab44     A7 3A 68 FC | 	wrlong	#29, fp
1ab48     08 4E 85 F1 | 	sub	fp, #8
1ab4c     A7 08 68 FC | 	wrlong	#4, fp
1ab50     A7 12 02 F6 | 	mov	arg01, fp
1ab54     F4 2D BF FD | 	call	#_push
1ab58     A7 F0 03 F6 | 	mov	ptra, fp
1ab5c     B2 00 A0 FD | 	call	#popregs_
1ab60                 | _do_rdpin_ret
1ab60     2D 00 64 FD | 	ret
1ab64                 | 
1ab64                 | ' 
1ab64                 | ' ' ----------------  read
1ab64                 | ' 
1ab64                 | ' function read_next_line() as string
1ab64                 | _read_next_line
1ab64     07 4A 05 F6 | 	mov	COUNT_, #7
1ab68     A8 00 A0 FD | 	call	#pushregs_
1ab6c                 | ' if dataptr=$7FFFFFFF then return("")
1ab6c     50 00 00 FF 
1ab70     4C E5 05 F1 | 	add	objptr, ##41292
1ab74     F2 26 02 FB | 	rdlong	local01, objptr
1ab78     50 00 00 FF 
1ab7c     4C E5 85 F1 | 	sub	objptr, ##41292
1ab80     FF FF 3F FF 
1ab84     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1ab88     C5 01 00 AF 
1ab8c     3F FB 05 A6 |  if_e	mov	result1, ##@LR__6145
1ab90     BC 01 90 AD |  if_e	jmp	#LR__2137
1ab94                 | ' do
1ab94                 | LR__2130
1ab94     50 00 00 FF 
1ab98     28 E5 05 F1 | 	add	objptr, ##41256
1ab9c     F2 12 02 F6 | 	mov	arg01, objptr
1aba0     24 E4 05 F1 | 	add	objptr, #36
1aba4     F2 14 02 FB | 	rdlong	arg02, objptr
1aba8     24 16 06 F6 | 	mov	arg03, #36
1abac     45 00 00 FF 
1abb0     80 E4 85 F1 | 	sub	objptr, ##35456
1abb4     98 CB B0 FD | 	call	#_psram_spin2_read1
1abb8                 | '  ' print dataptr
1abb8                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1abb8                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1abb8     45 00 00 FF 
1abbc     5C E4 05 F1 | 	add	objptr, ##35420
1abc0     F2 26 02 FB | 	rdlong	local01, objptr
1abc4     50 00 00 FF 
1abc8     28 E5 85 F1 | 	sub	objptr, ##41256
1abcc     FF FF 7F FF 
1abd0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
1abd4     50 00 00 5F 
1abd8     3C E5 05 51 |  if_ne	add	objptr, ##41276
1abdc     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1abe0     10 E4 05 51 |  if_ne	add	objptr, #16
1abe4     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1abe8     50 00 00 5F 
1abec     4C E5 85 51 |  if_ne	sub	objptr, ##41292
1abf0     50 00 00 FF 
1abf4     3C E5 05 F1 | 	add	objptr, ##41276
1abf8     F2 26 02 FB | 	rdlong	local01, objptr
1abfc     50 00 00 FF 
1ac00     3C E5 85 F1 | 	sub	objptr, ##41276
1ac04     FF FF 3F FF 
1ac08     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1ac0c     50 00 00 5F 
1ac10     28 E5 05 51 |  if_ne	add	objptr, ##41256
1ac14     F2 28 02 5B |  if_ne	rdlong	local02, objptr
1ac18     50 00 00 5F 
1ac1c     28 E5 85 51 |  if_ne	sub	objptr, ##41256
1ac20     FF FF 7F 5F 
1ac24     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
1ac28     50 00 00 5F 
1ac2c     48 E5 05 51 |  if_ne	add	objptr, ##41288
1ac30     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
1ac34     50 00 00 5F 
1ac38     48 E5 85 51 |  if_ne	sub	objptr, ##41288
1ac3c     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1ac40     50 FF 9F 5D |  if_ne	jmp	#LR__2130
1ac44                 | ' if dataheader(8)=token_data then 
1ac44     50 00 00 FF 
1ac48     48 E5 05 F1 | 	add	objptr, ##41288
1ac4c     F2 26 02 FB | 	rdlong	local01, objptr
1ac50     50 00 00 FF 
1ac54     48 E5 85 F1 | 	sub	objptr, ##41288
1ac58     B7 26 0E F2 | 	cmp	local01, #183 wz
1ac5c     E0 00 90 5D |  if_ne	jmp	#LR__2135
1ac60     50 00 00 FF 
1ac64     30 E5 05 F1 | 	add	objptr, ##41264
1ac68     F2 26 02 FB | 	rdlong	local01, objptr
1ac6c     02 00 00 FF 
1ac70     18 E4 05 F1 | 	add	objptr, ##1048
1ac74     F2 26 62 FC | 	wrlong	local01, objptr
1ac78     02 00 00 FF 
1ac7c     14 E4 85 F1 | 	sub	objptr, ##1044
1ac80     F2 2C 02 FB | 	rdlong	local04, objptr
1ac84     02 00 00 FF 
1ac88     0C E4 05 F1 | 	add	objptr, ##1036
1ac8c     F2 2C 62 FC | 	wrlong	local04, objptr
1ac90                 | '  'print "data found at line "; dataheader(0)
1ac90                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1ac90     00 2E 06 F6 | 	mov	local05, #0
1ac94     52 00 00 FF 
1ac98     40 E5 85 F1 | 	sub	objptr, ##42304
1ac9c                 | LR__2131
1ac9c     16 2F 52 F2 | 	cmps	local05, local04 wc
1aca0     3C 00 90 3D |  if_ae	jmp	#LR__2132
1aca4     52 00 00 FF 
1aca8     48 E5 05 F1 | 	add	objptr, ##42312
1acac     F2 12 02 FB | 	rdlong	arg01, objptr
1acb0     52 00 00 FF 
1acb4     48 E5 85 F1 | 	sub	objptr, ##42312
1acb8     17 13 02 F1 | 	add	arg01, local05
1acbc     54 9F B0 FD | 	call	#_pspeek
1acc0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
1acc4     70 F9 B0 FD | 	call	#__system__Chr_S
1acc8     FD 14 02 F6 | 	mov	arg02, result1
1accc     18 13 02 F6 | 	mov	arg01, local06
1acd0     7C D7 B0 FD | 	call	#__system___string_concat
1acd4     FD 30 02 F6 | 	mov	local06, result1
1acd8     01 2E 06 F1 | 	add	local05, #1
1acdc     BC FF 9F FD | 	jmp	#LR__2131
1ace0                 | LR__2132
1ace0     C5 01 00 FF 
1ace4     40 17 06 F6 | 	mov	arg03, ##@LR__6146
1ace8     01 12 06 F6 | 	mov	arg01, #1
1acec     18 15 02 F6 | 	mov	arg02, local06
1acf0     C8 FC B0 FD | 	call	#__system__Instr
1acf4     FD 2E 02 F6 | 	mov	local05, result1
1acf8     18 13 02 F6 | 	mov	arg01, local06
1acfc     09 33 02 F6 | 	mov	local07, arg01
1ad00     97 06 48 FB | 	callpa	#(@LR__2134-@LR__2133)>>2,fcache_load_ptr_
1ad04                 | LR__2133
1ad04     19 FB C9 FA | 	rdbyte	result1, local07 wz
1ad08     01 32 06 51 |  if_ne	add	local07, #1
1ad0c     F4 FF 9F 5D |  if_ne	jmp	#LR__2133
1ad10                 | LR__2134
1ad10     09 33 82 F1 | 	sub	local07, arg01
1ad14     19 15 02 F6 | 	mov	arg02, local07
1ad18     17 15 82 F1 | 	sub	arg02, local05
1ad1c     04 14 86 F1 | 	sub	arg02, #4
1ad20     18 13 02 F6 | 	mov	arg01, local06
1ad24     D4 F7 B0 FD | 	call	#__system__Right_S
1ad28     FD 12 02 F6 | 	mov	arg01, result1
1ad2c     D4 FB B0 FD | 	call	#__system__RTrim_S
1ad30     FD 12 02 F6 | 	mov	arg01, result1
1ad34     0C FB B0 FD | 	call	#__system__LTrim_S
1ad38     FD 30 02 F6 | 	mov	local06, result1
1ad3c     0C 00 90 FD | 	jmp	#LR__2136
1ad40                 | LR__2135
1ad40                 | '   return ("") 'todo proper err
1ad40     C5 01 00 FF 
1ad44     45 FB 05 F6 | 	mov	result1, ##@LR__6147
1ad48     04 00 90 FD | 	jmp	#LR__2137
1ad4c                 | LR__2136
1ad4c                 | ' return readline
1ad4c     18 FB 01 F6 | 	mov	result1, local06
1ad50                 | LR__2137
1ad50     A7 F0 03 F6 | 	mov	ptra, fp
1ad54     B2 00 A0 FD | 	call	#popregs_
1ad58                 | _read_next_line_ret
1ad58     2D 00 64 FD | 	ret
1ad5c                 | 
1ad5c                 | ' 
1ad5c                 | ' sub do_read
1ad5c                 | _do_read
1ad5c     11 4A 05 F6 | 	mov	COUNT_, #17
1ad60     A8 00 A0 FD | 	call	#pushregs_
1ad64     58 F1 07 F1 | 	add	ptra, #344
1ad68     4A 00 00 FF 
1ad6c     A0 E4 05 F1 | 	add	objptr, ##38048
1ad70     F2 FE 01 FB | 	rdlong	result3, objptr
1ad74     FF FC 01 F6 | 	mov	result2, result3
1ad78     01 FC 65 F0 | 	shl	result2, #1
1ad7c     FF FC 01 F1 | 	add	result2, result3
1ad80     02 FC 65 F0 | 	shl	result2, #2
1ad84     03 00 00 FF 
1ad88     04 E4 85 F1 | 	sub	objptr, ##1540
1ad8c     F2 FC 01 F1 | 	add	result2, objptr
1ad90     FE FC 01 FB | 	rdlong	result2, result2
1ad94     08 4E 05 F1 | 	add	fp, #8
1ad98     A7 FC 61 FC | 	wrlong	result2, fp
1ad9c                 | ' 
1ad9c                 | ' 
1ad9c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad9c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1ad9c     08 4E 85 F1 | 	sub	fp, #8
1ada0     01 FC 15 F2 | 	cmp	result2, #1 wc
1ada4     47 00 00 FF 
1ada8     9C E4 85 F1 | 	sub	objptr, ##36508
1adac     14 00 90 CD |  if_b	jmp	#LR__2140
1adb0     08 4E 05 F1 | 	add	fp, #8
1adb4     A7 FC 01 FB | 	rdlong	result2, fp
1adb8     08 4E 85 F1 | 	sub	fp, #8
1adbc     41 FC 15 F2 | 	cmp	result2, #65 wc
1adc0     50 00 90 CD |  if_b	jmp	#LR__2141
1adc4                 | LR__2140
1adc4     00 12 06 F6 | 	mov	arg01, #0
1adc8     D8 32 B1 FD | 	call	#__system___getiolock_0625
1adcc     FD 12 02 F6 | 	mov	arg01, result1
1add0     20 D6 B0 FD | 	call	#__system___lockmem
1add4     C5 01 00 FF 
1add8     46 15 06 F6 | 	mov	arg02, ##@LR__6148
1addc     00 12 06 F6 | 	mov	arg01, #0
1ade0     00 16 06 F6 | 	mov	arg03, #0
1ade4     04 E3 B0 FD | 	call	#__system___basic_print_string
1ade8     00 12 06 F6 | 	mov	arg01, #0
1adec     B4 32 B1 FD | 	call	#__system___getiolock_0625
1adf0     FD 00 68 FC | 	wrlong	#0, result1
1adf4     50 00 00 FF 
1adf8     10 E5 05 F1 | 	add	objptr, ##41232
1adfc     F2 14 02 FB | 	rdlong	arg02, objptr
1ae00     50 00 00 FF 
1ae04     10 E5 85 F1 | 	sub	objptr, ##41232
1ae08     27 12 06 F6 | 	mov	arg01, #39
1ae0c     8C 9B B0 FD | 	call	#_printerror
1ae10     D0 0C 90 FD | 	jmp	#LR__2191
1ae14                 | LR__2141
1ae14     08 4E 05 F1 | 	add	fp, #8
1ae18     A7 16 02 FB | 	rdlong	arg03, fp
1ae1c     01 16 86 F1 | 	sub	arg03, #1
1ae20     28 4F 05 F1 | 	add	fp, #296
1ae24     A7 16 62 FC | 	wrlong	arg03, fp
1ae28     30 4F 85 F1 | 	sub	fp, #304
1ae2c                 | ' i=numpar-1
1ae2c                 | ' if readline="" then readline=read_next_line() ': print readline
1ae2c     52 00 00 FF 
1ae30     34 E5 05 F1 | 	add	objptr, ##42292
1ae34     F2 12 02 FB | 	rdlong	arg01, objptr
1ae38     52 00 00 FF 
1ae3c     34 E5 85 F1 | 	sub	objptr, ##42292
1ae40     C5 01 00 FF 
1ae44     50 15 06 F6 | 	mov	arg02, ##@LR__6149
1ae48     D0 D5 B0 FD | 	call	#__system___string_cmp
1ae4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae50     18 00 90 5D |  if_ne	jmp	#LR__2142
1ae54     0C FD BF FD | 	call	#_read_next_line
1ae58     52 00 00 FF 
1ae5c     34 E5 05 F1 | 	add	objptr, ##42292
1ae60     F2 FA 61 FC | 	wrlong	result1, objptr
1ae64     52 00 00 FF 
1ae68     34 E5 85 F1 | 	sub	objptr, ##42292
1ae6c                 | LR__2142
1ae6c                 | ' if readline="" then printerror(55,runheader(0)) :return
1ae6c     52 00 00 FF 
1ae70     34 E5 05 F1 | 	add	objptr, ##42292
1ae74     F2 12 02 FB | 	rdlong	arg01, objptr
1ae78     52 00 00 FF 
1ae7c     34 E5 85 F1 | 	sub	objptr, ##42292
1ae80     C5 01 00 FF 
1ae84     51 15 06 F6 | 	mov	arg02, ##@LR__6150
1ae88     90 D5 B0 FD | 	call	#__system___string_cmp
1ae8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae90     20 00 90 5D |  if_ne	jmp	#LR__2143
1ae94     50 00 00 FF 
1ae98     10 E5 05 F1 | 	add	objptr, ##41232
1ae9c     F2 14 02 FB | 	rdlong	arg02, objptr
1aea0     50 00 00 FF 
1aea4     10 E5 85 F1 | 	sub	objptr, ##41232
1aea8     37 12 06 F6 | 	mov	arg01, #55
1aeac     EC 9A B0 FD | 	call	#_printerror
1aeb0     30 0C 90 FD | 	jmp	#LR__2191
1aeb4                 | LR__2143
1aeb4     34 4F 05 F1 | 	add	fp, #308
1aeb8     A7 00 68 FC | 	wrlong	#0, fp
1aebc     2C 4F 85 F1 | 	sub	fp, #300
1aec0     A7 26 02 FB | 	rdlong	local01, fp
1aec4     01 26 86 F1 | 	sub	local01, #1
1aec8     28 4F 05 F1 | 	add	fp, #296
1aecc     A7 26 62 FC | 	wrlong	local01, fp
1aed0     30 4F 85 F1 | 	sub	fp, #304
1aed4                 | ' j=0
1aed4                 | ' i=numpar-1
1aed4                 | ' do
1aed4                 | LR__2144
1aed4                 | '   do
1aed4                 | LR__2145
1aed4     52 00 00 FF 
1aed8     34 E5 05 F1 | 	add	objptr, ##42292
1aedc     F2 14 02 FB | 	rdlong	arg02, objptr
1aee0     52 00 00 FF 
1aee4     34 E5 85 F1 | 	sub	objptr, ##42292
1aee8     C5 01 00 FF 
1aeec     52 17 06 F6 | 	mov	arg03, ##@LR__6151
1aef0     01 12 06 F6 | 	mov	arg01, #1
1aef4     C4 FA B0 FD | 	call	#__system__Instr
1aef8     0C 4E 05 F1 | 	add	fp, #12
1aefc     A7 FA 61 FC | 	wrlong	result1, fp
1af00                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
1af00     0C 4E 85 F1 | 	sub	fp, #12
1af04     01 FA 15 F2 | 	cmp	result1, #1 wc
1af08     3C 00 90 CD |  if_b	jmp	#LR__2146
1af0c     52 00 00 FF 
1af10     34 E5 05 F1 | 	add	objptr, ##42292
1af14     F2 12 02 FB | 	rdlong	arg01, objptr
1af18     52 00 00 FF 
1af1c     34 E5 85 F1 | 	sub	objptr, ##42292
1af20     0C 4E 05 F1 | 	add	fp, #12
1af24     A7 14 02 FB | 	rdlong	arg02, fp
1af28     0C 4E 85 F1 | 	sub	fp, #12
1af2c     01 14 86 F1 | 	sub	arg02, #1
1af30     40 F5 B0 FD | 	call	#__system__Left_S
1af34     52 00 00 FF 
1af38     34 E5 05 F1 | 	add	objptr, ##42292
1af3c     F2 FA 61 FC | 	wrlong	result1, objptr
1af40     52 00 00 FF 
1af44     34 E5 85 F1 | 	sub	objptr, ##42292
1af48                 | LR__2146
1af48     52 00 00 FF 
1af4c     34 E5 05 F1 | 	add	objptr, ##42292
1af50     F2 14 02 FB | 	rdlong	arg02, objptr
1af54     52 00 00 FF 
1af58     34 E5 85 F1 | 	sub	objptr, ##42292
1af5c     C5 01 00 FF 
1af60     54 17 06 F6 | 	mov	arg03, ##@LR__6152
1af64     01 12 06 F6 | 	mov	arg01, #1
1af68     50 FA B0 FD | 	call	#__system__Instr
1af6c     0C 4E 05 F1 | 	add	fp, #12
1af70     A7 FA 61 FC | 	wrlong	result1, fp
1af74                 | '     comma=instr(1,readline,",")  
1af74                 | '       if comma>0  then 
1af74     0C 4E 85 F1 | 	sub	fp, #12
1af78     01 FA 15 F2 | 	cmp	result1, #1 wc
1af7c     98 00 90 CD |  if_b	jmp	#LR__2149
1af80     52 00 00 FF 
1af84     34 E5 05 F1 | 	add	objptr, ##42292
1af88     F2 12 02 FB | 	rdlong	arg01, objptr
1af8c     52 00 00 FF 
1af90     34 E5 85 F1 | 	sub	objptr, ##42292
1af94     0C 4E 05 F1 | 	add	fp, #12
1af98     A7 14 02 FB | 	rdlong	arg02, fp
1af9c     0C 4E 85 F1 | 	sub	fp, #12
1afa0     01 14 86 F1 | 	sub	arg02, #1
1afa4     CC F4 B0 FD | 	call	#__system__Left_S
1afa8     04 4E 05 F1 | 	add	fp, #4
1afac     A7 FA 61 FC | 	wrlong	result1, fp
1afb0     04 4E 85 F1 | 	sub	fp, #4
1afb4     52 00 00 FF 
1afb8     34 E5 05 F1 | 	add	objptr, ##42292
1afbc     F2 12 02 FB | 	rdlong	arg01, objptr
1afc0     09 27 02 F6 | 	mov	local01, arg01
1afc4     52 00 00 FF 
1afc8     34 E5 85 F1 | 	sub	objptr, ##42292
1afcc     09 29 02 F6 | 	mov	local02, arg01
1afd0     97 06 48 FB | 	callpa	#(@LR__2148-@LR__2147)>>2,fcache_load_ptr_
1afd4                 | LR__2147
1afd4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1afd8     01 28 06 51 |  if_ne	add	local02, #1
1afdc     F4 FF 9F 5D |  if_ne	jmp	#LR__2147
1afe0                 | LR__2148
1afe0     09 29 82 F1 | 	sub	local02, arg01
1afe4     14 15 02 F6 | 	mov	arg02, local02
1afe8     0C 4E 05 F1 | 	add	fp, #12
1afec     A7 16 02 FB | 	rdlong	arg03, fp
1aff0     0C 4E 85 F1 | 	sub	fp, #12
1aff4     0B 15 82 F1 | 	sub	arg02, arg03
1aff8     13 13 02 F6 | 	mov	arg01, local01
1affc     FC F4 B0 FD | 	call	#__system__Right_S
1b000     52 00 00 FF 
1b004     34 E5 05 F1 | 	add	objptr, ##42292
1b008     F2 FA 61 FC | 	wrlong	result1, objptr
1b00c     52 00 00 FF 
1b010     34 E5 85 F1 | 	sub	objptr, ##42292
1b014     48 00 90 FD | 	jmp	#LR__2150
1b018                 | LR__2149
1b018     52 00 00 FF 
1b01c     34 E5 05 F1 | 	add	objptr, ##42292
1b020     F2 12 02 FB | 	rdlong	arg01, objptr
1b024     52 00 00 FF 
1b028     34 E5 85 F1 | 	sub	objptr, ##42292
1b02c     D4 F8 B0 FD | 	call	#__system__RTrim_S
1b030     FD 12 02 F6 | 	mov	arg01, result1
1b034     0C F8 B0 FD | 	call	#__system__LTrim_S
1b038     04 4E 05 F1 | 	add	fp, #4
1b03c     A7 FA 61 FC | 	wrlong	result1, fp
1b040     04 4E 85 F1 | 	sub	fp, #4
1b044     C5 01 00 FF 
1b048     56 27 06 F6 | 	mov	local01, ##@LR__6153
1b04c     52 00 00 FF 
1b050     34 E5 05 F1 | 	add	objptr, ##42292
1b054     F2 26 62 FC | 	wrlong	local01, objptr
1b058     52 00 00 FF 
1b05c     34 E5 85 F1 | 	sub	objptr, ##42292
1b060                 | LR__2150
1b060                 | '      
1b060                 | '      if part$<>"" then j=j+1
1b060     04 4E 05 F1 | 	add	fp, #4
1b064     A7 12 02 FB | 	rdlong	arg01, fp
1b068     04 4E 85 F1 | 	sub	fp, #4
1b06c     C5 01 00 FF 
1b070     57 15 06 F6 | 	mov	arg02, ##@LR__6154
1b074     A4 D3 B0 FD | 	call	#__system___string_cmp
1b078     00 FA 0D F2 | 	cmp	result1, #0 wz
1b07c     34 4F 05 51 |  if_ne	add	fp, #308
1b080     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b084     01 26 06 51 |  if_ne	add	local01, #1
1b088     A7 26 62 5C |  if_ne	wrlong	local01, fp
1b08c     34 4F 85 51 |  if_ne	sub	fp, #308
1b090     30 4F 05 F1 | 	add	fp, #304
1b094     A7 26 02 FB | 	rdlong	local01, fp
1b098     02 26 66 F0 | 	shl	local01, #2
1b09c     04 4F 85 F1 | 	sub	fp, #260
1b0a0     A7 26 02 F1 | 	add	local01, fp
1b0a4     28 4E 85 F1 | 	sub	fp, #40
1b0a8     A7 FA 01 FB | 	rdlong	result1, fp
1b0ac     13 FB 61 FC | 	wrlong	result1, local01
1b0b0     2C 4F 05 F1 | 	add	fp, #300
1b0b4     A7 26 02 FB | 	rdlong	local01, fp
1b0b8     01 26 86 F1 | 	sub	local01, #1
1b0bc     A7 26 62 FC | 	wrlong	local01, fp
1b0c0     30 4F 85 F1 | 	sub	fp, #304
1b0c4                 | '      args(i)=part$  
1b0c4                 | '      i=i-1
1b0c4                 | '     if readline="" then readline=read_next_line() 
1b0c4     52 00 00 FF 
1b0c8     34 E5 05 F1 | 	add	objptr, ##42292
1b0cc     F2 12 02 FB | 	rdlong	arg01, objptr
1b0d0     52 00 00 FF 
1b0d4     34 E5 85 F1 | 	sub	objptr, ##42292
1b0d8     C5 01 00 FF 
1b0dc     58 15 06 F6 | 	mov	arg02, ##@LR__6155
1b0e0     38 D3 B0 FD | 	call	#__system___string_cmp
1b0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0e8     18 00 90 5D |  if_ne	jmp	#LR__2151
1b0ec     74 FA BF FD | 	call	#_read_next_line
1b0f0     52 00 00 FF 
1b0f4     34 E5 05 F1 | 	add	objptr, ##42292
1b0f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b0fc     52 00 00 FF 
1b100     34 E5 85 F1 | 	sub	objptr, ##42292
1b104                 | LR__2151
1b104     30 4F 05 F1 | 	add	fp, #304
1b108     A7 26 02 FB | 	rdlong	local01, fp
1b10c     30 4F 85 F1 | 	sub	fp, #304
1b110     00 26 56 F2 | 	cmps	local01, #0 wc
1b114     28 00 90 CD |  if_b	jmp	#LR__2152
1b118     52 00 00 FF 
1b11c     34 E5 05 F1 | 	add	objptr, ##42292
1b120     F2 12 02 FB | 	rdlong	arg01, objptr
1b124     52 00 00 FF 
1b128     34 E5 85 F1 | 	sub	objptr, ##42292
1b12c     C5 01 00 FF 
1b130     59 15 06 F6 | 	mov	arg02, ##@LR__6156
1b134     E4 D2 B0 FD | 	call	#__system___string_cmp
1b138     00 FA 0D F2 | 	cmp	result1, #0 wz
1b13c     94 FD 9F 5D |  if_ne	jmp	#LR__2145
1b140                 | LR__2152
1b140     30 4F 05 F1 | 	add	fp, #304
1b144     A7 26 02 FB | 	rdlong	local01, fp
1b148     30 4F 85 F1 | 	sub	fp, #304
1b14c     00 26 56 F2 | 	cmps	local01, #0 wc
1b150     80 FD 9F 3D |  if_ae	jmp	#LR__2144
1b154                 | ' if j<numpar then printerror(55,runheader(0))
1b154     34 4F 05 F1 | 	add	fp, #308
1b158     A7 26 02 FB | 	rdlong	local01, fp
1b15c     2C 4F 85 F1 | 	sub	fp, #300
1b160     A7 16 02 FB | 	rdlong	arg03, fp
1b164     08 4E 85 F1 | 	sub	fp, #8
1b168     0B 27 52 F2 | 	cmps	local01, arg03 wc
1b16c     50 00 00 CF 
1b170     10 E5 05 C1 |  if_b	add	objptr, ##41232
1b174     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1b178     50 00 00 CF 
1b17c     10 E5 85 C1 |  if_b	sub	objptr, ##41232
1b180     37 12 06 C6 |  if_b	mov	arg01, #55
1b184     14 98 B0 CD |  if_b	call	#_printerror
1b188                 | ' 
1b188                 | ' for i=0 to numpar-1
1b188     30 4F 05 F1 | 	add	fp, #304
1b18c     A7 00 68 FC | 	wrlong	#0, fp
1b190     28 4F 85 F1 | 	sub	fp, #296
1b194     A7 2A 02 FB | 	rdlong	local03, fp
1b198     08 4E 85 F1 | 	sub	fp, #8
1b19c                 | LR__2153
1b19c     30 4F 05 F1 | 	add	fp, #304
1b1a0     A7 2C 02 FB | 	rdlong	local04, fp
1b1a4     30 4F 85 F1 | 	sub	fp, #304
1b1a8     16 27 02 F6 | 	mov	local01, local04
1b1ac     15 27 52 F2 | 	cmps	local01, local03 wc
1b1b0     30 09 90 3D |  if_ae	jmp	#LR__2190
1b1b4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1b1b4     30 4F 05 F1 | 	add	fp, #304
1b1b8     A7 16 02 FB | 	rdlong	arg03, fp
1b1bc     02 16 66 F0 | 	shl	arg03, #2
1b1c0     04 4F 85 F1 | 	sub	fp, #260
1b1c4     A7 16 02 F1 | 	add	arg03, fp
1b1c8     0B 13 02 FB | 	rdlong	arg01, arg03
1b1cc     2C 4E 85 F1 | 	sub	fp, #44
1b1d0     20 B9 BE FD | 	call	#_isnum
1b1d4     FD 2E 02 F6 | 	mov	local05, result1
1b1d8     30 4F 05 F1 | 	add	fp, #304
1b1dc     A7 16 02 FB | 	rdlong	arg03, fp
1b1e0     02 16 66 F0 | 	shl	arg03, #2
1b1e4     04 4F 85 F1 | 	sub	fp, #260
1b1e8     A7 30 02 F6 | 	mov	local06, fp
1b1ec     A7 16 02 F1 | 	add	arg03, fp
1b1f0     0B 13 02 FB | 	rdlong	arg01, arg03
1b1f4     2C 4E 85 F1 | 	sub	fp, #44
1b1f8     E4 BC BE FD | 	call	#_isint
1b1fc     FD 2E 2A F5 | 	andn	local05, result1 wz
1b200     52 00 00 5F 
1b204     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b208     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1b20c     52 00 00 5F 
1b210     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b214                 | '   if isint(args(i)) then r=result_int 
1b214     30 4F 05 F1 | 	add	fp, #304
1b218     A7 2E 02 FB | 	rdlong	local05, fp
1b21c     02 2E 66 F0 | 	shl	local05, #2
1b220     04 4F 85 F1 | 	sub	fp, #260
1b224     A7 2E 02 F1 | 	add	local05, fp
1b228     17 13 02 FB | 	rdlong	arg01, local05
1b22c     2C 4E 85 F1 | 	sub	fp, #44
1b230     AC BC BE FD | 	call	#_isint
1b234     00 FA 0D F2 | 	cmp	result1, #0 wz
1b238     52 00 00 5F 
1b23c     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b240     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1b244     52 00 00 5F 
1b248     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b24c                 | '   if isdec(args(i)) then r=result_uint 
1b24c     30 4F 05 F1 | 	add	fp, #304
1b250     A7 2E 02 FB | 	rdlong	local05, fp
1b254     02 2E 66 F0 | 	shl	local05, #2
1b258     04 4F 85 F1 | 	sub	fp, #260
1b25c     A7 2E 02 F1 | 	add	local05, fp
1b260     17 13 02 FB | 	rdlong	arg01, local05
1b264     2C 4E 85 F1 | 	sub	fp, #44
1b268     18 BF BE FD | 	call	#_isdec
1b26c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b270     52 00 00 5F 
1b274     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b278     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1b27c     52 00 00 5F 
1b280     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b284                 | '   if not isnum(args(i)) then 
1b284     30 4F 05 F1 | 	add	fp, #304
1b288     A7 2E 02 FB | 	rdlong	local05, fp
1b28c     02 2E 66 F0 | 	shl	local05, #2
1b290     04 4F 85 F1 | 	sub	fp, #260
1b294     A7 2E 02 F1 | 	add	local05, fp
1b298     17 13 02 FB | 	rdlong	arg01, local05
1b29c     2C 4E 85 F1 | 	sub	fp, #44
1b2a0     50 B8 BE FD | 	call	#_isnum
1b2a4     FD 2E 22 F6 | 	not	local05, result1
1b2a8     00 2E 0E F2 | 	cmp	local05, #0 wz
1b2ac     4C 01 90 AD |  if_e	jmp	#LR__2158
1b2b0     52 00 00 FF 
1b2b4     68 E5 05 F1 | 	add	objptr, ##42344
1b2b8     F2 56 68 FC | 	wrlong	#43, objptr
1b2bc     52 00 00 FF 
1b2c0     68 E5 85 F1 | 	sub	objptr, ##42344
1b2c4     30 4F 05 F1 | 	add	fp, #304
1b2c8     A7 16 02 FB | 	rdlong	arg03, fp
1b2cc     02 16 66 F0 | 	shl	arg03, #2
1b2d0     04 4F 85 F1 | 	sub	fp, #260
1b2d4     A7 16 02 F1 | 	add	arg03, fp
1b2d8     0B 13 02 FB | 	rdlong	arg01, arg03
1b2dc     2C 4E 85 F1 | 	sub	fp, #44
1b2e0     09 29 02 F6 | 	mov	local02, arg01
1b2e4     97 06 48 FB | 	callpa	#(@LR__2155-@LR__2154)>>2,fcache_load_ptr_
1b2e8                 | LR__2154
1b2e8     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b2ec     01 28 06 51 |  if_ne	add	local02, #1
1b2f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2154
1b2f4                 | LR__2155
1b2f4     09 29 82 F1 | 	sub	local02, arg01
1b2f8     14 FB 01 F6 | 	mov	result1, local02
1b2fc     38 4F 05 F1 | 	add	fp, #312
1b300     A7 FA 61 FC | 	wrlong	result1, fp
1b304     52 00 00 FF 
1b308     F0 E4 05 F1 | 	add	objptr, ##42224
1b30c     F2 12 02 FB | 	rdlong	arg01, objptr
1b310     FD 12 82 F1 | 	sub	arg01, result1
1b314     04 12 86 F1 | 	sub	arg01, #4
1b318     03 12 26 F5 | 	andn	arg01, #3
1b31c     F2 12 62 FC | 	wrlong	arg01, objptr
1b320     52 00 00 FF 
1b324     F0 E4 85 F1 | 	sub	objptr, ##42224
1b328     A7 14 02 FB | 	rdlong	arg02, fp
1b32c     38 4F 85 F1 | 	sub	fp, #312
1b330     08 98 B0 FD | 	call	#_pslpoke
1b334                 | '     pslpoke memtop,l
1b334                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1b334     34 4F 05 F1 | 	add	fp, #308
1b338     A7 02 68 FC | 	wrlong	#1, fp
1b33c     04 4E 05 F1 | 	add	fp, #4
1b340     A7 32 02 FB | 	rdlong	local07, fp
1b344     38 4F 85 F1 | 	sub	fp, #312
1b348     01 32 06 F1 | 	add	local07, #1
1b34c                 | LR__2156
1b34c     34 4F 05 F1 | 	add	fp, #308
1b350     A7 2E 02 FB | 	rdlong	local05, fp
1b354     34 4F 85 F1 | 	sub	fp, #308
1b358     19 2F 52 F2 | 	cmps	local05, local07 wc
1b35c     7C 00 90 3D |  if_ae	jmp	#LR__2157
1b360     52 00 00 FF 
1b364     F0 E4 05 F1 | 	add	objptr, ##42224
1b368     F2 30 02 FB | 	rdlong	local06, objptr
1b36c     52 00 00 FF 
1b370     F0 E4 85 F1 | 	sub	objptr, ##42224
1b374     03 30 06 F1 | 	add	local06, #3
1b378     34 4F 05 F1 | 	add	fp, #308
1b37c     A7 34 02 FB | 	rdlong	local08, fp
1b380     1A 31 02 F1 | 	add	local06, local08
1b384     04 4E 85 F1 | 	sub	fp, #4
1b388     A7 36 02 FB | 	rdlong	local09, fp
1b38c     02 36 66 F0 | 	shl	local09, #2
1b390     04 4F 85 F1 | 	sub	fp, #260
1b394     A7 38 02 F6 | 	mov	local10, fp
1b398     A7 36 02 F1 | 	add	local09, fp
1b39c     1B 13 02 FB | 	rdlong	arg01, local09
1b3a0     2C 4E 85 F1 | 	sub	fp, #44
1b3a4     01 3A 06 F6 | 	mov	local11, #1
1b3a8     1A 15 02 F6 | 	mov	arg02, local08
1b3ac     01 16 06 F6 | 	mov	arg03, #1
1b3b0     D8 F1 B0 FD | 	call	#__system__Mid_S
1b3b4     FD 14 C2 FA | 	rdbyte	arg02, result1
1b3b8     18 13 02 F6 | 	mov	arg01, local06
1b3bc     0C 98 B0 FD | 	call	#_pspoke
1b3c0     34 4F 05 F1 | 	add	fp, #308
1b3c4     A7 30 02 FB | 	rdlong	local06, fp
1b3c8     18 2F 02 F6 | 	mov	local05, local06
1b3cc     01 2E 06 F1 | 	add	local05, #1
1b3d0     A7 2E 62 FC | 	wrlong	local05, fp
1b3d4     34 4F 85 F1 | 	sub	fp, #308
1b3d8     70 FF 9F FD | 	jmp	#LR__2156
1b3dc                 | LR__2157
1b3dc     52 00 00 FF 
1b3e0     F0 E4 05 F1 | 	add	objptr, ##42224
1b3e4     F2 2E 02 FB | 	rdlong	local05, objptr
1b3e8     52 00 00 FF 
1b3ec     F0 E4 85 F1 | 	sub	objptr, ##42224
1b3f0     10 4E 05 F1 | 	add	fp, #16
1b3f4     A7 2E 62 FC | 	wrlong	local05, fp
1b3f8     10 4E 85 F1 | 	sub	fp, #16
1b3fc                 | LR__2158
1b3fc     B4 24 BF FD | 	call	#_pop
1b400     1C 4E 05 F1 | 	add	fp, #28
1b404     A7 FA 61 FC | 	wrlong	result1, fp
1b408     04 4E 05 F1 | 	add	fp, #4
1b40c     A7 FC 61 FC | 	wrlong	result2, fp
1b410     04 4E 05 F1 | 	add	fp, #4
1b414     A7 FE 61 FC | 	wrlong	result3, fp
1b418                 | '   t1=pop() 
1b418                 | '   if i>=numpar-j then
1b418     1C 4E 85 F1 | 	sub	fp, #28
1b41c     A7 2E 02 FB | 	rdlong	local05, fp
1b420     17 3D 02 F6 | 	mov	local12, local05
1b424     2C 4F 05 F1 | 	add	fp, #300
1b428     A7 3E 02 FB | 	rdlong	local13, fp
1b42c     1F 41 02 F6 | 	mov	local14, local13
1b430     20 3D 82 F1 | 	sub	local12, local14
1b434     04 4E 85 F1 | 	sub	fp, #4
1b438     A7 42 02 FB | 	rdlong	local15, fp
1b43c     30 4F 85 F1 | 	sub	fp, #304
1b440     21 45 02 F6 | 	mov	local16, local15
1b444     1E 45 52 F2 | 	cmps	local16, local12 wc
1b448     80 06 90 CD |  if_b	jmp	#LR__2189
1b44c     20 4E 05 F1 | 	add	fp, #32
1b450     A7 3C 02 FB | 	rdlong	local12, fp
1b454     0C 4E 85 F1 | 	sub	fp, #12
1b458     A7 3C 62 FC | 	wrlong	local12, fp
1b45c                 | '     vartype=t1.result.twowords(1)
1b45c                 | '     select case vartype
1b45c     14 4E 85 F1 | 	sub	fp, #20
1b460     1E 47 0A F6 | 	mov	local17, local12 wz
1b464     64 00 90 AD |  if_e	jmp	#LR__2159
1b468     00 47 0E F2 | 	cmp	local17, #256 wz
1b46c     6C 00 90 AD |  if_e	jmp	#LR__2160
1b470     01 47 0E F2 | 	cmp	local17, #257 wz
1b474     74 00 90 AD |  if_e	jmp	#LR__2161
1b478     02 47 0E F2 | 	cmp	local17, #258 wz
1b47c     7C 00 90 AD |  if_e	jmp	#LR__2162
1b480     03 47 0E F2 | 	cmp	local17, #259 wz
1b484     84 00 90 AD |  if_e	jmp	#LR__2163
1b488     04 47 0E F2 | 	cmp	local17, #260 wz
1b48c     8C 00 90 AD |  if_e	jmp	#LR__2164
1b490     05 47 0E F2 | 	cmp	local17, #261 wz
1b494     94 00 90 AD |  if_e	jmp	#LR__2165
1b498     06 47 0E F2 | 	cmp	local17, #262 wz
1b49c     9C 00 90 AD |  if_e	jmp	#LR__2166
1b4a0     07 47 0E F2 | 	cmp	local17, #263 wz
1b4a4     A4 00 90 AD |  if_e	jmp	#LR__2167
1b4a8     08 47 0E F2 | 	cmp	local17, #264 wz
1b4ac     AC 00 90 AD |  if_e	jmp	#LR__2168
1b4b0     09 47 0E F2 | 	cmp	local17, #265 wz
1b4b4     B4 00 90 AD |  if_e	jmp	#LR__2169
1b4b8     0A 47 0E F2 | 	cmp	local17, #266 wz
1b4bc     BC 00 90 AD |  if_e	jmp	#LR__2170
1b4c0     0B 47 0E F2 | 	cmp	local17, #267 wz
1b4c4     C4 00 90 AD |  if_e	jmp	#LR__2171
1b4c8     D0 00 90 FD | 	jmp	#LR__2172
1b4cc                 | LR__2159
1b4cc     18 4E 05 F1 | 	add	fp, #24
1b4d0     A7 18 68 FC | 	wrlong	#12, fp
1b4d4     18 4E 85 F1 | 	sub	fp, #24
1b4d8     CC 00 90 FD | 	jmp	#LR__2173
1b4dc                 | LR__2160
1b4dc     18 4E 05 F1 | 	add	fp, #24
1b4e0     A7 18 68 FC | 	wrlong	#12, fp
1b4e4     18 4E 85 F1 | 	sub	fp, #24
1b4e8     BC 00 90 FD | 	jmp	#LR__2173
1b4ec                 | LR__2161
1b4ec     18 4E 05 F1 | 	add	fp, #24
1b4f0     A7 02 68 FC | 	wrlong	#1, fp
1b4f4     18 4E 85 F1 | 	sub	fp, #24
1b4f8     AC 00 90 FD | 	jmp	#LR__2173
1b4fc                 | LR__2162
1b4fc     18 4E 05 F1 | 	add	fp, #24
1b500     A7 02 68 FC | 	wrlong	#1, fp
1b504     18 4E 85 F1 | 	sub	fp, #24
1b508     9C 00 90 FD | 	jmp	#LR__2173
1b50c                 | LR__2163
1b50c     18 4E 05 F1 | 	add	fp, #24
1b510     A7 04 68 FC | 	wrlong	#2, fp
1b514     18 4E 85 F1 | 	sub	fp, #24
1b518     8C 00 90 FD | 	jmp	#LR__2173
1b51c                 | LR__2164
1b51c     18 4E 05 F1 | 	add	fp, #24
1b520     A7 04 68 FC | 	wrlong	#2, fp
1b524     18 4E 85 F1 | 	sub	fp, #24
1b528     7C 00 90 FD | 	jmp	#LR__2173
1b52c                 | LR__2165
1b52c     18 4E 05 F1 | 	add	fp, #24
1b530     A7 08 68 FC | 	wrlong	#4, fp
1b534     18 4E 85 F1 | 	sub	fp, #24
1b538     6C 00 90 FD | 	jmp	#LR__2173
1b53c                 | LR__2166
1b53c     18 4E 05 F1 | 	add	fp, #24
1b540     A7 08 68 FC | 	wrlong	#4, fp
1b544     18 4E 85 F1 | 	sub	fp, #24
1b548     5C 00 90 FD | 	jmp	#LR__2173
1b54c                 | LR__2167
1b54c     18 4E 05 F1 | 	add	fp, #24
1b550     A7 10 68 FC | 	wrlong	#8, fp
1b554     18 4E 85 F1 | 	sub	fp, #24
1b558     4C 00 90 FD | 	jmp	#LR__2173
1b55c                 | LR__2168
1b55c     18 4E 05 F1 | 	add	fp, #24
1b560     A7 10 68 FC | 	wrlong	#8, fp
1b564     18 4E 85 F1 | 	sub	fp, #24
1b568     3C 00 90 FD | 	jmp	#LR__2173
1b56c                 | LR__2169
1b56c     18 4E 05 F1 | 	add	fp, #24
1b570     A7 0C 68 FC | 	wrlong	#6, fp
1b574     18 4E 85 F1 | 	sub	fp, #24
1b578     2C 00 90 FD | 	jmp	#LR__2173
1b57c                 | LR__2170
1b57c     18 4E 05 F1 | 	add	fp, #24
1b580     A7 10 68 FC | 	wrlong	#8, fp
1b584     18 4E 85 F1 | 	sub	fp, #24
1b588     1C 00 90 FD | 	jmp	#LR__2173
1b58c                 | LR__2171
1b58c     18 4E 05 F1 | 	add	fp, #24
1b590     A7 0A 68 FC | 	wrlong	#5, fp
1b594     18 4E 85 F1 | 	sub	fp, #24
1b598     0C 00 90 FD | 	jmp	#LR__2173
1b59c                 | LR__2172
1b59c     18 4E 05 F1 | 	add	fp, #24
1b5a0     A7 18 68 FC | 	wrlong	#12, fp
1b5a4     18 4E 85 F1 | 	sub	fp, #24
1b5a8                 | LR__2173
1b5a8                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1b5a8     18 4E 05 F1 | 	add	fp, #24
1b5ac     A7 3C 02 FB | 	rdlong	local12, fp
1b5b0     18 4E 85 F1 | 	sub	fp, #24
1b5b4     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b5b8     74 01 90 5D |  if_ne	jmp	#LR__2178
1b5bc     1C 4E 05 F1 | 	add	fp, #28
1b5c0     A7 3E 02 FB | 	rdlong	local13, fp
1b5c4     1C 4E 85 F1 | 	sub	fp, #28
1b5c8     00 04 00 FF 
1b5cc     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b5d0     5C 01 90 3D |  if_ae	jmp	#LR__2178
1b5d4                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1b5d4     52 00 00 FF 
1b5d8     68 E5 05 F1 | 	add	objptr, ##42344
1b5dc     F2 3C 02 FB | 	rdlong	local12, objptr
1b5e0     52 00 00 FF 
1b5e4     68 E5 85 F1 | 	sub	objptr, ##42344
1b5e8     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b5ec     38 00 90 5D |  if_ne	jmp	#LR__2174
1b5f0     1C 4E 05 F1 | 	add	fp, #28
1b5f4     A7 3C 02 FB | 	rdlong	local12, fp
1b5f8     14 4F 05 F1 | 	add	fp, #276
1b5fc     A7 3E 02 FB | 	rdlong	local13, fp
1b600     1F 45 02 F6 | 	mov	local16, local13
1b604     02 44 66 F0 | 	shl	local16, #2
1b608     04 4F 85 F1 | 	sub	fp, #260
1b60c     A7 42 02 F6 | 	mov	local15, fp
1b610     A7 44 02 F1 | 	add	local16, fp
1b614     22 13 02 FB | 	rdlong	arg01, local16
1b618     00 14 06 F6 | 	mov	arg02, #0
1b61c     2C 4E 85 F1 | 	sub	fp, #44
1b620     C4 02 B1 FD | 	call	#__system____builtin_atoi
1b624     1E FB 61 FC | 	wrlong	result1, local12
1b628                 | LR__2174
1b628                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1b628     52 00 00 FF 
1b62c     68 E5 05 F1 | 	add	objptr, ##42344
1b630     F2 3C 02 FB | 	rdlong	local12, objptr
1b634     52 00 00 FF 
1b638     68 E5 85 F1 | 	sub	objptr, ##42344
1b63c     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b640     38 00 90 5D |  if_ne	jmp	#LR__2175
1b644     1C 4E 05 F1 | 	add	fp, #28
1b648     A7 3C 02 FB | 	rdlong	local12, fp
1b64c     14 4F 05 F1 | 	add	fp, #276
1b650     A7 3E 02 FB | 	rdlong	local13, fp
1b654     1F 45 02 F6 | 	mov	local16, local13
1b658     02 44 66 F0 | 	shl	local16, #2
1b65c     04 4F 85 F1 | 	sub	fp, #260
1b660     A7 42 02 F6 | 	mov	local15, fp
1b664     A7 44 02 F1 | 	add	local16, fp
1b668     22 13 02 FB | 	rdlong	arg01, local16
1b66c     00 14 06 F6 | 	mov	arg02, #0
1b670     2C 4E 85 F1 | 	sub	fp, #44
1b674     70 02 B1 FD | 	call	#__system____builtin_atoi
1b678     1E FB 61 FC | 	wrlong	result1, local12
1b67c                 | LR__2175
1b67c                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1b67c     52 00 00 FF 
1b680     68 E5 05 F1 | 	add	objptr, ##42344
1b684     F2 3C 02 FB | 	rdlong	local12, objptr
1b688     52 00 00 FF 
1b68c     68 E5 85 F1 | 	sub	objptr, ##42344
1b690     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b694     3C 00 90 5D |  if_ne	jmp	#LR__2176
1b698     30 4F 05 F1 | 	add	fp, #304
1b69c     A7 3E 02 FB | 	rdlong	local13, fp
1b6a0     02 3E 66 F0 | 	shl	local13, #2
1b6a4     04 4F 85 F1 | 	sub	fp, #260
1b6a8     A7 44 02 F6 | 	mov	local16, fp
1b6ac     A7 3E 02 F1 | 	add	local13, fp
1b6b0     1F 13 02 FB | 	rdlong	arg01, local13
1b6b4     2C 4E 85 F1 | 	sub	fp, #44
1b6b8     C4 03 B1 FD | 	call	#__system____builtin_atof
1b6bc     28 4E 05 F1 | 	add	fp, #40
1b6c0     A7 FA 61 FC | 	wrlong	result1, fp
1b6c4     0C 4E 85 F1 | 	sub	fp, #12
1b6c8     A7 3C 02 FB | 	rdlong	local12, fp
1b6cc     1C 4E 85 F1 | 	sub	fp, #28
1b6d0     1E FB 61 FC | 	wrlong	result1, local12
1b6d4                 | LR__2176
1b6d4                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1b6d4     52 00 00 FF 
1b6d8     68 E5 05 F1 | 	add	objptr, ##42344
1b6dc     F2 3C 02 FB | 	rdlong	local12, objptr
1b6e0     52 00 00 FF 
1b6e4     68 E5 85 F1 | 	sub	objptr, ##42344
1b6e8     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b6ec     18 00 90 5D |  if_ne	jmp	#LR__2177
1b6f0     1C 4E 05 F1 | 	add	fp, #28
1b6f4     A7 12 02 FB | 	rdlong	arg01, fp
1b6f8     0C 4E 85 F1 | 	sub	fp, #12
1b6fc     A7 14 02 FB | 	rdlong	arg02, fp
1b700     10 4E 85 F1 | 	sub	fp, #16
1b704     09 15 62 FC | 	wrlong	arg02, arg01
1b708                 | LR__2177
1b708     1C 4E 05 F1 | 	add	fp, #28
1b70c     A7 12 02 FB | 	rdlong	arg01, fp
1b710     1C 4E 85 F1 | 	sub	fp, #28
1b714     08 12 06 F1 | 	add	arg01, #8
1b718     52 00 00 FF 
1b71c     68 E5 05 F1 | 	add	objptr, ##42344
1b720     F2 14 02 FB | 	rdlong	arg02, objptr
1b724     52 00 00 FF 
1b728     68 E5 85 F1 | 	sub	objptr, ##42344
1b72c     09 15 62 FC | 	wrlong	arg02, arg01
1b730                 | LR__2178
1b730                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1b730     18 4E 05 F1 | 	add	fp, #24
1b734     A7 3C 02 FB | 	rdlong	local12, fp
1b738     18 4E 85 F1 | 	sub	fp, #24
1b73c     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b740     94 01 90 5D |  if_ne	jmp	#LR__2183
1b744     1C 4E 05 F1 | 	add	fp, #28
1b748     A7 3E 02 FB | 	rdlong	local13, fp
1b74c     1C 4E 85 F1 | 	sub	fp, #28
1b750     00 04 00 FF 
1b754     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b758     7C 01 90 CD |  if_b	jmp	#LR__2183
1b75c                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1b75c     52 00 00 FF 
1b760     68 E5 05 F1 | 	add	objptr, ##42344
1b764     F2 3C 02 FB | 	rdlong	local12, objptr
1b768     52 00 00 FF 
1b76c     68 E5 85 F1 | 	sub	objptr, ##42344
1b770     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b774     40 00 90 5D |  if_ne	jmp	#LR__2179
1b778     1C 4E 05 F1 | 	add	fp, #28
1b77c     A7 3C 02 FB | 	rdlong	local12, fp
1b780     14 4F 05 F1 | 	add	fp, #276
1b784     A7 3E 02 FB | 	rdlong	local13, fp
1b788     1F 45 02 F6 | 	mov	local16, local13
1b78c     02 44 66 F0 | 	shl	local16, #2
1b790     04 4F 85 F1 | 	sub	fp, #260
1b794     A7 42 02 F6 | 	mov	local15, fp
1b798     A7 44 02 F1 | 	add	local16, fp
1b79c     22 13 02 FB | 	rdlong	arg01, local16
1b7a0     00 14 06 F6 | 	mov	arg02, #0
1b7a4     2C 4E 85 F1 | 	sub	fp, #44
1b7a8     3C 01 B1 FD | 	call	#__system____builtin_atoi
1b7ac     FD 14 02 F6 | 	mov	arg02, result1
1b7b0     1E 13 02 F6 | 	mov	arg01, local12
1b7b4     84 93 B0 FD | 	call	#_pslpoke
1b7b8                 | LR__2179
1b7b8                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1b7b8     52 00 00 FF 
1b7bc     68 E5 05 F1 | 	add	objptr, ##42344
1b7c0     F2 3C 02 FB | 	rdlong	local12, objptr
1b7c4     52 00 00 FF 
1b7c8     68 E5 85 F1 | 	sub	objptr, ##42344
1b7cc     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b7d0     40 00 90 5D |  if_ne	jmp	#LR__2180
1b7d4     1C 4E 05 F1 | 	add	fp, #28
1b7d8     A7 3C 02 FB | 	rdlong	local12, fp
1b7dc     14 4F 05 F1 | 	add	fp, #276
1b7e0     A7 3E 02 FB | 	rdlong	local13, fp
1b7e4     1F 45 02 F6 | 	mov	local16, local13
1b7e8     02 44 66 F0 | 	shl	local16, #2
1b7ec     04 4F 85 F1 | 	sub	fp, #260
1b7f0     A7 42 02 F6 | 	mov	local15, fp
1b7f4     A7 44 02 F1 | 	add	local16, fp
1b7f8     22 13 02 FB | 	rdlong	arg01, local16
1b7fc     00 14 06 F6 | 	mov	arg02, #0
1b800     2C 4E 85 F1 | 	sub	fp, #44
1b804     E0 00 B1 FD | 	call	#__system____builtin_atoi
1b808     FD 14 02 F6 | 	mov	arg02, result1
1b80c     1E 13 02 F6 | 	mov	arg01, local12
1b810     28 93 B0 FD | 	call	#_pslpoke
1b814                 | LR__2180
1b814                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1b814     52 00 00 FF 
1b818     68 E5 05 F1 | 	add	objptr, ##42344
1b81c     F2 3C 02 FB | 	rdlong	local12, objptr
1b820     52 00 00 FF 
1b824     68 E5 85 F1 | 	sub	objptr, ##42344
1b828     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b82c     4C 00 90 5D |  if_ne	jmp	#LR__2181
1b830     30 4F 05 F1 | 	add	fp, #304
1b834     A7 3E 02 FB | 	rdlong	local13, fp
1b838     02 3E 66 F0 | 	shl	local13, #2
1b83c     04 4F 85 F1 | 	sub	fp, #260
1b840     A7 44 02 F6 | 	mov	local16, fp
1b844     A7 3E 02 F1 | 	add	local13, fp
1b848     1F 13 02 FB | 	rdlong	arg01, local13
1b84c     2C 4E 85 F1 | 	sub	fp, #44
1b850     2C 02 B1 FD | 	call	#__system____builtin_atof
1b854     28 4E 05 F1 | 	add	fp, #40
1b858     A7 FA 61 FC | 	wrlong	result1, fp
1b85c     0C 4E 85 F1 | 	sub	fp, #12
1b860     A7 3C 02 FB | 	rdlong	local12, fp
1b864     0C 4E 05 F1 | 	add	fp, #12
1b868     A7 12 02 F6 | 	mov	arg01, fp
1b86c     28 4E 85 F1 | 	sub	fp, #40
1b870     09 15 02 FB | 	rdlong	arg02, arg01
1b874     1E 13 02 F6 | 	mov	arg01, local12
1b878     C0 92 B0 FD | 	call	#_pslpoke
1b87c                 | LR__2181
1b87c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b87c     52 00 00 FF 
1b880     68 E5 05 F1 | 	add	objptr, ##42344
1b884     F2 3C 02 FB | 	rdlong	local12, objptr
1b888     52 00 00 FF 
1b88c     68 E5 85 F1 | 	sub	objptr, ##42344
1b890     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b894     18 00 90 5D |  if_ne	jmp	#LR__2182
1b898     1C 4E 05 F1 | 	add	fp, #28
1b89c     A7 12 02 FB | 	rdlong	arg01, fp
1b8a0     0C 4E 85 F1 | 	sub	fp, #12
1b8a4     A7 14 02 FB | 	rdlong	arg02, fp
1b8a8     10 4E 85 F1 | 	sub	fp, #16
1b8ac     8C 92 B0 FD | 	call	#_pslpoke
1b8b0                 | LR__2182
1b8b0     1C 4E 05 F1 | 	add	fp, #28
1b8b4     A7 12 02 FB | 	rdlong	arg01, fp
1b8b8     1C 4E 85 F1 | 	sub	fp, #28
1b8bc     08 12 06 F1 | 	add	arg01, #8
1b8c0     52 00 00 FF 
1b8c4     68 E5 05 F1 | 	add	objptr, ##42344
1b8c8     F2 14 02 FB | 	rdlong	arg02, objptr
1b8cc     52 00 00 FF 
1b8d0     68 E5 85 F1 | 	sub	objptr, ##42344
1b8d4     64 92 B0 FD | 	call	#_pslpoke
1b8d8                 | LR__2183
1b8d8                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b8d8     18 4E 05 F1 | 	add	fp, #24
1b8dc     A7 3C 02 FB | 	rdlong	local12, fp
1b8e0     18 4E 85 F1 | 	sub	fp, #24
1b8e4     05 3C 0E F2 | 	cmp	local12, #5 wz
1b8e8     52 00 00 AF 
1b8ec     68 E5 05 A1 |  if_e	add	objptr, ##42344
1b8f0     F2 40 02 AB |  if_e	rdlong	local14, objptr
1b8f4     52 00 00 AF 
1b8f8     68 E5 85 A1 |  if_e	sub	objptr, ##42344
1b8fc     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1b900     18 00 90 5D |  if_ne	jmp	#LR__2184
1b904     1C 4E 05 F1 | 	add	fp, #28
1b908     A7 12 02 FB | 	rdlong	arg01, fp
1b90c     0C 4E 85 F1 | 	sub	fp, #12
1b910     A7 14 02 FB | 	rdlong	arg02, fp
1b914     10 4E 85 F1 | 	sub	fp, #16
1b918     20 92 B0 FD | 	call	#_pslpoke
1b91c                 | LR__2184
1b91c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1b91c     18 4E 05 F1 | 	add	fp, #24
1b920     A7 3C 02 FB | 	rdlong	local12, fp
1b924     18 4E 85 F1 | 	sub	fp, #24
1b928     04 3C 0E F2 | 	cmp	local12, #4 wz
1b92c     54 00 90 5D |  if_ne	jmp	#LR__2185
1b930     52 00 00 FF 
1b934     68 E5 05 F1 | 	add	objptr, ##42344
1b938     F2 40 02 FB | 	rdlong	local14, objptr
1b93c     52 00 00 FF 
1b940     68 E5 85 F1 | 	sub	objptr, ##42344
1b944     2B 40 0E F2 | 	cmp	local14, #43 wz
1b948     38 00 90 AD |  if_e	jmp	#LR__2185
1b94c     1C 4E 05 F1 | 	add	fp, #28
1b950     A7 3C 02 FB | 	rdlong	local12, fp
1b954     14 4F 05 F1 | 	add	fp, #276
1b958     A7 44 02 FB | 	rdlong	local16, fp
1b95c     02 44 66 F0 | 	shl	local16, #2
1b960     04 4F 85 F1 | 	sub	fp, #260
1b964     A7 44 02 F1 | 	add	local16, fp
1b968     22 13 02 FB | 	rdlong	arg01, local16
1b96c     00 14 06 F6 | 	mov	arg02, #0
1b970     2C 4E 85 F1 | 	sub	fp, #44
1b974     70 FF B0 FD | 	call	#__system____builtin_atoi
1b978     FD 14 02 F6 | 	mov	arg02, result1
1b97c     1E 13 02 F6 | 	mov	arg01, local12
1b980     B8 91 B0 FD | 	call	#_pslpoke
1b984                 | LR__2185
1b984                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1b984     18 4E 05 F1 | 	add	fp, #24
1b988     A7 3C 02 FB | 	rdlong	local12, fp
1b98c     18 4E 85 F1 | 	sub	fp, #24
1b990     02 3C 0E F2 | 	cmp	local12, #2 wz
1b994     54 00 90 5D |  if_ne	jmp	#LR__2186
1b998     52 00 00 FF 
1b99c     68 E5 05 F1 | 	add	objptr, ##42344
1b9a0     F2 40 02 FB | 	rdlong	local14, objptr
1b9a4     52 00 00 FF 
1b9a8     68 E5 85 F1 | 	sub	objptr, ##42344
1b9ac     2B 40 0E F2 | 	cmp	local14, #43 wz
1b9b0     38 00 90 AD |  if_e	jmp	#LR__2186
1b9b4     1C 4E 05 F1 | 	add	fp, #28
1b9b8     A7 3C 02 FB | 	rdlong	local12, fp
1b9bc     14 4F 05 F1 | 	add	fp, #276
1b9c0     A7 44 02 FB | 	rdlong	local16, fp
1b9c4     02 44 66 F0 | 	shl	local16, #2
1b9c8     04 4F 85 F1 | 	sub	fp, #260
1b9cc     A7 44 02 F1 | 	add	local16, fp
1b9d0     22 13 02 FB | 	rdlong	arg01, local16
1b9d4     00 14 06 F6 | 	mov	arg02, #0
1b9d8     2C 4E 85 F1 | 	sub	fp, #44
1b9dc     08 FF B0 FD | 	call	#__system____builtin_atoi
1b9e0     FD 14 02 F6 | 	mov	arg02, result1
1b9e4     1E 13 02 F6 | 	mov	arg01, local12
1b9e8     98 91 B0 FD | 	call	#_psdpoke
1b9ec                 | LR__2186
1b9ec                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1b9ec     18 4E 05 F1 | 	add	fp, #24
1b9f0     A7 3C 02 FB | 	rdlong	local12, fp
1b9f4     18 4E 85 F1 | 	sub	fp, #24
1b9f8     01 3C 0E F2 | 	cmp	local12, #1 wz
1b9fc     54 00 90 5D |  if_ne	jmp	#LR__2187
1ba00     52 00 00 FF 
1ba04     68 E5 05 F1 | 	add	objptr, ##42344
1ba08     F2 40 02 FB | 	rdlong	local14, objptr
1ba0c     52 00 00 FF 
1ba10     68 E5 85 F1 | 	sub	objptr, ##42344
1ba14     2B 40 0E F2 | 	cmp	local14, #43 wz
1ba18     38 00 90 AD |  if_e	jmp	#LR__2187
1ba1c     1C 4E 05 F1 | 	add	fp, #28
1ba20     A7 3C 02 FB | 	rdlong	local12, fp
1ba24     14 4F 05 F1 | 	add	fp, #276
1ba28     A7 44 02 FB | 	rdlong	local16, fp
1ba2c     02 44 66 F0 | 	shl	local16, #2
1ba30     04 4F 85 F1 | 	sub	fp, #260
1ba34     A7 44 02 F1 | 	add	local16, fp
1ba38     22 13 02 FB | 	rdlong	arg01, local16
1ba3c     00 14 06 F6 | 	mov	arg02, #0
1ba40     2C 4E 85 F1 | 	sub	fp, #44
1ba44     A0 FE B0 FD | 	call	#__system____builtin_atoi
1ba48     FD 14 02 F6 | 	mov	arg02, result1
1ba4c     1E 13 02 F6 | 	mov	arg01, local12
1ba50     78 91 B0 FD | 	call	#_pspoke
1ba54                 | LR__2187
1ba54                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1ba54     18 4E 05 F1 | 	add	fp, #24
1ba58     A7 3C 02 FB | 	rdlong	local12, fp
1ba5c     18 4E 85 F1 | 	sub	fp, #24
1ba60     06 3C 0E F2 | 	cmp	local12, #6 wz
1ba64     64 00 90 5D |  if_ne	jmp	#LR__2188
1ba68     52 00 00 FF 
1ba6c     68 E5 05 F1 | 	add	objptr, ##42344
1ba70     F2 40 02 FB | 	rdlong	local14, objptr
1ba74     52 00 00 FF 
1ba78     68 E5 85 F1 | 	sub	objptr, ##42344
1ba7c     2B 40 0E F2 | 	cmp	local14, #43 wz
1ba80     48 00 90 AD |  if_e	jmp	#LR__2188
1ba84     30 4F 05 F1 | 	add	fp, #304
1ba88     A7 3E 02 FB | 	rdlong	local13, fp
1ba8c     02 3E 66 F0 | 	shl	local13, #2
1ba90     04 4F 85 F1 | 	sub	fp, #260
1ba94     A7 3E 02 F1 | 	add	local13, fp
1ba98     1F 13 02 FB | 	rdlong	arg01, local13
1ba9c     2C 4E 85 F1 | 	sub	fp, #44
1baa0     DC FF B0 FD | 	call	#__system____builtin_atof
1baa4     28 4E 05 F1 | 	add	fp, #40
1baa8     A7 FA 61 FC | 	wrlong	result1, fp
1baac     0C 4E 85 F1 | 	sub	fp, #12
1bab0     A7 3C 02 FB | 	rdlong	local12, fp
1bab4     0C 4E 05 F1 | 	add	fp, #12
1bab8     A7 12 02 F6 | 	mov	arg01, fp
1babc     28 4E 85 F1 | 	sub	fp, #40
1bac0     09 15 02 FB | 	rdlong	arg02, arg01
1bac4     1E 13 02 F6 | 	mov	arg01, local12
1bac8     70 90 B0 FD | 	call	#_pslpoke
1bacc                 | LR__2188
1bacc                 | LR__2189
1bacc     30 4F 05 F1 | 	add	fp, #304
1bad0     A7 40 02 FB | 	rdlong	local14, fp
1bad4     01 40 06 F1 | 	add	local14, #1
1bad8     A7 40 62 FC | 	wrlong	local14, fp
1badc     30 4F 85 F1 | 	sub	fp, #304
1bae0     B8 F6 9F FD | 	jmp	#LR__2153
1bae4                 | LR__2190
1bae4                 | LR__2191
1bae4     A7 F0 03 F6 | 	mov	ptra, fp
1bae8     B2 00 A0 FD | 	call	#popregs_
1baec                 | _do_read_ret
1baec     2D 00 64 FD | 	ret
1baf0                 | 
1baf0                 | ' 
1baf0                 | ' '------------------- release
1baf0                 | ' 
1baf0                 | ' sub do_release
1baf0                 | _do_release
1baf0     00 4A 05 F6 | 	mov	COUNT_, #0
1baf4     A8 00 A0 FD | 	call	#pushregs_
1baf8     10 F0 07 F1 | 	add	ptra, #16
1bafc     B4 1D BF FD | 	call	#_pop
1bb00     FF 14 02 F6 | 	mov	arg02, result3
1bb04     A7 FA 61 FC | 	wrlong	result1, fp
1bb08     04 4E 05 F1 | 	add	fp, #4
1bb0c     A7 FC 61 FC | 	wrlong	result2, fp
1bb10     04 4E 05 F1 | 	add	fp, #4
1bb14     A7 14 62 FC | 	wrlong	arg02, fp
1bb18     08 4E 85 F1 | 	sub	fp, #8
1bb1c     A7 12 02 F6 | 	mov	arg01, fp
1bb20     74 1F BF FD | 	call	#_converttoint
1bb24     0C 4E 05 F1 | 	add	fp, #12
1bb28     A7 FA 61 FC | 	wrlong	result1, fp
1bb2c                 | ' 
1bb2c                 | ' t1=pop()
1bb2c                 | ' channel=converttoint(t1)
1bb2c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1bb2c     0C 4E 85 F1 | 	sub	fp, #12
1bb30     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb34     44 00 90 CD |  if_b	jmp	#LR__2200
1bb38     0C 4E 05 F1 | 	add	fp, #12
1bb3c     A7 14 02 FB | 	rdlong	arg02, fp
1bb40     0C 4E 85 F1 | 	sub	fp, #12
1bb44     08 14 56 F2 | 	cmps	arg02, #8 wc
1bb48     30 00 90 3D |  if_ae	jmp	#LR__2200
1bb4c     37 00 00 FF 
1bb50     30 E4 05 F1 | 	add	objptr, ##28208
1bb54     F2 12 02 FB | 	rdlong	arg01, objptr
1bb58     37 00 00 FF 
1bb5c     30 E4 85 F1 | 	sub	objptr, ##28208
1bb60     0C 4E 05 F1 | 	add	fp, #12
1bb64     A7 14 02 FB | 	rdlong	arg02, fp
1bb68     0C 4E 85 F1 | 	sub	fp, #12
1bb6c     06 14 66 F0 | 	shl	arg02, #6
1bb70     0A 13 02 F1 | 	add	arg01, arg02
1bb74     2C 12 06 F1 | 	add	arg01, #44
1bb78     09 FF 69 FC | 	wrlong	#255, arg01
1bb7c                 | LR__2200
1bb7c     A7 F0 03 F6 | 	mov	ptra, fp
1bb80     B2 00 A0 FD | 	call	#popregs_
1bb84                 | _do_release_ret
1bb84     2D 00 64 FD | 	ret
1bb88                 | 
1bb88                 | ' 
1bb88                 | ' '------------------- restore
1bb88                 | ' 
1bb88                 | ' sub do_restore()
1bb88                 | _do_restore
1bb88     4A 00 00 FF 
1bb8c     A8 E4 05 F1 | 	add	objptr, ##38056
1bb90     F2 00 02 FB | 	rdlong	_var01, objptr
1bb94     06 00 00 FF 
1bb98     A4 E4 05 F1 | 	add	objptr, ##3236
1bb9c     F2 00 62 FC | 	wrlong	_var01, objptr
1bba0     C5 01 00 FF 
1bba4     5A 01 06 F6 | 	mov	_var01, ##@LR__6157
1bba8     01 00 00 FF 
1bbac     E8 E5 05 F1 | 	add	objptr, ##1000
1bbb0     F2 00 62 FC | 	wrlong	_var01, objptr
1bbb4     52 00 00 FF 
1bbb8     34 E5 85 F1 | 	sub	objptr, ##42292
1bbbc                 | _do_restore_ret
1bbbc     2D 00 64 FD | 	ret
1bbc0                 | 
1bbc0                 | ' 
1bbc0                 | ' '------------------- restorepalette
1bbc0                 | ' 
1bbc0                 | ' sub do_restorepalette()
1bbc0                 | _do_restorepalette
1bbc0     40 98 B0 FD | 	call	#_hg010b_spin2_restorepalette
1bbc4                 | _do_restorepalette_ret
1bbc4     2D 00 64 FD | 	ret
1bbc8                 | 
1bbc8                 | ' '------------------- return
1bbc8                 | ' 
1bbc8                 | ' sub do_return()
1bbc8                 | _do_return
1bbc8                 | ' if gosubtop>0 then
1bbc8     50 00 00 FF 
1bbcc     54 E5 05 F1 | 	add	objptr, ##41300
1bbd0     F2 00 02 FB | 	rdlong	_var01, objptr
1bbd4     50 00 00 FF 
1bbd8     54 E5 85 F1 | 	sub	objptr, ##41300
1bbdc     01 00 56 F2 | 	cmps	_var01, #1 wc
1bbe0     8C 00 90 CD |  if_b	jmp	#LR__2210
1bbe4     50 00 00 FF 
1bbe8     54 E5 05 F1 | 	add	objptr, ##41300
1bbec     F2 00 02 FB | 	rdlong	_var01, objptr
1bbf0     03 00 66 F0 | 	shl	_var01, #3
1bbf4     03 00 00 FF 
1bbf8     88 E5 85 F1 | 	sub	objptr, ##1928
1bbfc     F2 00 02 F1 | 	add	_var01, objptr
1bc00     00 01 02 FB | 	rdlong	_var01, _var01
1bc04     03 00 00 FF 
1bc08     0C E5 05 F1 | 	add	objptr, ##1804
1bc0c     F2 00 62 FC | 	wrlong	_var01, objptr
1bc10     7C E4 05 F1 | 	add	objptr, #124
1bc14     F2 00 02 FB | 	rdlong	_var01, objptr
1bc18     03 00 66 F0 | 	shl	_var01, #3
1bc1c     03 00 00 FF 
1bc20     88 E5 85 F1 | 	sub	objptr, ##1928
1bc24     F2 00 02 F1 | 	add	_var01, objptr
1bc28     04 00 06 F1 | 	add	_var01, #4
1bc2c     00 01 02 FB | 	rdlong	_var01, _var01
1bc30     03 00 00 FF 
1bc34     10 E5 05 F1 | 	add	objptr, ##1808
1bc38     F2 00 62 FC | 	wrlong	_var01, objptr
1bc3c     06 00 00 FF 
1bc40     40 E4 85 F1 | 	sub	objptr, ##3136
1bc44     F2 00 02 FB | 	rdlong	_var01, objptr
1bc48     01 00 86 F1 | 	sub	_var01, #1
1bc4c     04 E4 05 F1 | 	add	objptr, #4
1bc50     F2 00 62 FC | 	wrlong	_var01, objptr
1bc54     06 00 00 FF 
1bc58     B4 E4 05 F1 | 	add	objptr, ##3252
1bc5c     F2 00 02 FB | 	rdlong	_var01, objptr
1bc60     01 00 86 F1 | 	sub	_var01, #1
1bc64     F2 00 62 FC | 	wrlong	_var01, objptr
1bc68     50 00 00 FF 
1bc6c     54 E5 85 F1 | 	sub	objptr, ##41300
1bc70                 | LR__2210
1bc70                 | _do_return_ret
1bc70     2D 00 64 FD | 	ret
1bc74                 | 
1bc74                 | ' 
1bc74                 | ' '------------------- right$
1bc74                 | ' 
1bc74                 | ' sub do_right
1bc74                 | _do_right
1bc74     00 4A 05 F6 | 	mov	COUNT_, #0
1bc78     A8 00 A0 FD | 	call	#pushregs_
1bc7c     14 F0 07 F1 | 	add	ptra, #20
1bc80     4A 00 00 FF 
1bc84     A0 E4 05 F1 | 	add	objptr, ##38048
1bc88     F2 16 02 FB | 	rdlong	arg03, objptr
1bc8c     0B 15 02 F6 | 	mov	arg02, arg03
1bc90     01 14 66 F0 | 	shl	arg02, #1
1bc94     0B 15 02 F1 | 	add	arg02, arg03
1bc98     02 14 66 F0 | 	shl	arg02, #2
1bc9c     03 00 00 FF 
1bca0     04 E4 85 F1 | 	sub	objptr, ##1540
1bca4     F2 14 02 F1 | 	add	arg02, objptr
1bca8     0A 17 02 FB | 	rdlong	arg03, arg02
1bcac     0C 4E 05 F1 | 	add	fp, #12
1bcb0     A7 16 62 FC | 	wrlong	arg03, fp
1bcb4                 | ' 
1bcb4                 | ' numpar=compiledline(lineptr_e).result.uresult
1bcb4                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1bcb4     0C 4E 85 F1 | 	sub	fp, #12
1bcb8     02 16 0E F2 | 	cmp	arg03, #2 wz
1bcbc     47 00 00 FF 
1bcc0     9C E4 85 F1 | 	sub	objptr, ##36508
1bcc4     40 00 90 AD |  if_e	jmp	#LR__2220
1bcc8     00 12 06 F6 | 	mov	arg01, #0
1bccc     D4 23 B1 FD | 	call	#__system___getiolock_0625
1bcd0     FD 12 02 F6 | 	mov	arg01, result1
1bcd4     1C C7 B0 FD | 	call	#__system___lockmem
1bcd8     C5 01 00 FF 
1bcdc     5B 15 06 F6 | 	mov	arg02, ##@LR__6158
1bce0     00 12 06 F6 | 	mov	arg01, #0
1bce4     00 16 06 F6 | 	mov	arg03, #0
1bce8     00 D4 B0 FD | 	call	#__system___basic_print_string
1bcec     00 12 06 F6 | 	mov	arg01, #0
1bcf0     B0 23 B1 FD | 	call	#__system___getiolock_0625
1bcf4     FD 00 68 FC | 	wrlong	#0, result1
1bcf8     27 12 06 F6 | 	mov	arg01, #39
1bcfc     00 14 06 F6 | 	mov	arg02, #0
1bd00     98 8C B0 FD | 	call	#_printerror
1bd04     EC 00 90 FD | 	jmp	#LR__2223
1bd08                 | LR__2220
1bd08     A8 1B BF FD | 	call	#_pop
1bd0c     FF 16 02 F6 | 	mov	arg03, result3
1bd10     A7 FA 61 FC | 	wrlong	result1, fp
1bd14     04 4E 05 F1 | 	add	fp, #4
1bd18     A7 FC 61 FC | 	wrlong	result2, fp
1bd1c     04 4E 05 F1 | 	add	fp, #4
1bd20     A7 16 62 FC | 	wrlong	arg03, fp
1bd24     08 4E 85 F1 | 	sub	fp, #8
1bd28     A7 12 02 F6 | 	mov	arg01, fp
1bd2c     68 1D BF FD | 	call	#_converttoint
1bd30     FD 16 02 F6 | 	mov	arg03, result1
1bd34     10 4E 05 F1 | 	add	fp, #16
1bd38     A7 16 62 FC | 	wrlong	arg03, fp
1bd3c     10 4E 85 F1 | 	sub	fp, #16
1bd40     70 1B BF FD | 	call	#_pop
1bd44     FF 16 02 F6 | 	mov	arg03, result3
1bd48     A7 FA 61 FC | 	wrlong	result1, fp
1bd4c     04 4E 05 F1 | 	add	fp, #4
1bd50     A7 FC 61 FC | 	wrlong	result2, fp
1bd54     04 4E 05 F1 | 	add	fp, #4
1bd58     A7 16 62 FC | 	wrlong	arg03, fp
1bd5c                 | ' t1=pop() : arg=converttoint(t1)
1bd5c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1bd5c     08 4E 85 F1 | 	sub	fp, #8
1bd60     2B 16 0E F2 | 	cmp	arg03, #43 wz
1bd64     18 00 90 5D |  if_ne	jmp	#LR__2221
1bd68     A7 12 02 FB | 	rdlong	arg01, fp
1bd6c     BC 1C BF FD | 	call	#_convertstring
1bd70     A7 FA 61 FC | 	wrlong	result1, fp
1bd74     08 4E 05 F1 | 	add	fp, #8
1bd78     A7 3E 68 FC | 	wrlong	#31, fp
1bd7c     08 4E 85 F1 | 	sub	fp, #8
1bd80                 | LR__2221
1bd80                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1bd80     08 4E 05 F1 | 	add	fp, #8
1bd84     A7 16 02 FB | 	rdlong	arg03, fp
1bd88     08 4E 85 F1 | 	sub	fp, #8
1bd8c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1bd90     40 00 90 AD |  if_e	jmp	#LR__2222
1bd94     00 12 06 F6 | 	mov	arg01, #0
1bd98     08 23 B1 FD | 	call	#__system___getiolock_0625
1bd9c     FD 12 02 F6 | 	mov	arg01, result1
1bda0     50 C6 B0 FD | 	call	#__system___lockmem
1bda4     C5 01 00 FF 
1bda8     64 15 06 F6 | 	mov	arg02, ##@LR__6159
1bdac     00 12 06 F6 | 	mov	arg01, #0
1bdb0     00 16 06 F6 | 	mov	arg03, #0
1bdb4     34 D3 B0 FD | 	call	#__system___basic_print_string
1bdb8     00 12 06 F6 | 	mov	arg01, #0
1bdbc     E4 22 B1 FD | 	call	#__system___getiolock_0625
1bdc0     FD 00 68 FC | 	wrlong	#0, result1
1bdc4     0F 12 06 F6 | 	mov	arg01, #15
1bdc8     00 14 06 F6 | 	mov	arg02, #0
1bdcc     CC 8B B0 FD | 	call	#_printerror
1bdd0     20 00 90 FD | 	jmp	#LR__2223
1bdd4                 | LR__2222
1bdd4     A7 12 02 FB | 	rdlong	arg01, fp
1bdd8     10 4E 05 F1 | 	add	fp, #16
1bddc     A7 14 02 FB | 	rdlong	arg02, fp
1bde0     10 4E 85 F1 | 	sub	fp, #16
1bde4     14 E7 B0 FD | 	call	#__system__Right_S
1bde8     A7 FA 61 FC | 	wrlong	result1, fp
1bdec     A7 12 02 F6 | 	mov	arg01, fp
1bdf0     58 1B BF FD | 	call	#_push
1bdf4                 | LR__2223
1bdf4     A7 F0 03 F6 | 	mov	ptra, fp
1bdf8     B2 00 A0 FD | 	call	#popregs_
1bdfc                 | _do_right_ret
1bdfc     2D 00 64 FD | 	ret
1be00                 | 
1be00                 | ' 
1be00                 | ' '------------------- rnd
1be00                 | ' 
1be00                 | ' sub do_rnd
1be00                 | _do_rnd
1be00     01 4A 05 F6 | 	mov	COUNT_, #1
1be04     A8 00 A0 FD | 	call	#pushregs_
1be08     10 F0 07 F1 | 	add	ptra, #16
1be0c     4A 00 00 FF 
1be10     A0 E4 05 F1 | 	add	objptr, ##38048
1be14     F2 26 02 FB | 	rdlong	local01, objptr
1be18     13 17 02 F6 | 	mov	arg03, local01
1be1c     01 16 66 F0 | 	shl	arg03, #1
1be20     13 17 02 F1 | 	add	arg03, local01
1be24     02 16 66 F0 | 	shl	arg03, #2
1be28     03 00 00 FF 
1be2c     04 E4 85 F1 | 	sub	objptr, ##1540
1be30     F2 16 02 F1 | 	add	arg03, objptr
1be34     0B 17 02 FB | 	rdlong	arg03, arg03
1be38     0C 4E 05 F1 | 	add	fp, #12
1be3c     A7 16 62 FC | 	wrlong	arg03, fp
1be40                 | ' 
1be40                 | ' numpar=compiledline(lineptr_e).result.uresult
1be40                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1be40     0C 4E 85 F1 | 	sub	fp, #12
1be44     02 16 16 F2 | 	cmp	arg03, #2 wc
1be48     47 00 00 FF 
1be4c     9C E4 85 F1 | 	sub	objptr, ##36508
1be50     40 00 90 CD |  if_b	jmp	#LR__2230
1be54     00 12 06 F6 | 	mov	arg01, #0
1be58     48 22 B1 FD | 	call	#__system___getiolock_0625
1be5c     FD 12 02 F6 | 	mov	arg01, result1
1be60     90 C5 B0 FD | 	call	#__system___lockmem
1be64     C5 01 00 FF 
1be68     6D 15 06 F6 | 	mov	arg02, ##@LR__6160
1be6c     00 12 06 F6 | 	mov	arg01, #0
1be70     00 16 06 F6 | 	mov	arg03, #0
1be74     74 D2 B0 FD | 	call	#__system___basic_print_string
1be78     00 12 06 F6 | 	mov	arg01, #0
1be7c     24 22 B1 FD | 	call	#__system___getiolock_0625
1be80     FD 00 68 FC | 	wrlong	#0, result1
1be84     27 12 06 F6 | 	mov	arg01, #39
1be88     00 14 06 F6 | 	mov	arg02, #0
1be8c     0C 8B B0 FD | 	call	#_printerror
1be90     30 01 90 FD | 	jmp	#LR__2237
1be94                 | LR__2230
1be94                 | ' if numpar=0 then
1be94     0C 4E 05 F1 | 	add	fp, #12
1be98     A7 FE 09 FB | 	rdlong	result3, fp wz
1be9c     0C 4E 85 F1 | 	sub	fp, #12
1bea0     20 00 90 5D |  if_ne	jmp	#LR__2231
1bea4     08 4E 05 F1 | 	add	fp, #8
1bea8     A7 3A 68 FC | 	wrlong	#29, fp
1beac     08 4E 85 F1 | 	sub	fp, #8
1beb0     1B FA 61 FD | 	getrnd	result1
1beb4     A7 FA 61 FC | 	wrlong	result1, fp
1beb8     A7 12 02 F6 | 	mov	arg01, fp
1bebc     8C 1A BF FD | 	call	#_push
1bec0     00 01 90 FD | 	jmp	#LR__2236
1bec4                 | LR__2231
1bec4     EC 19 BF FD | 	call	#_pop
1bec8     A7 FA 61 FC | 	wrlong	result1, fp
1becc     04 4E 05 F1 | 	add	fp, #4
1bed0     A7 FC 61 FC | 	wrlong	result2, fp
1bed4     04 4E 05 F1 | 	add	fp, #4
1bed8     A7 FE 61 FC | 	wrlong	result3, fp
1bedc                 | '   t1=pop()
1bedc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1bedc     08 4E 85 F1 | 	sub	fp, #8
1bee0     1C FE 0D F2 | 	cmp	result3, #28 wz
1bee4     08 4E 05 51 |  if_ne	add	fp, #8
1bee8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1beec     08 4E 85 51 |  if_ne	sub	fp, #8
1bef0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1bef4     2C 00 90 5D |  if_ne	jmp	#LR__2232
1bef8     1B FA 61 FD | 	getrnd	result1
1befc     A7 26 02 FB | 	rdlong	local01, fp
1bf00     13 FB 11 FD | 	qdiv	result1, local01
1bf04     A7 12 02 F6 | 	mov	arg01, fp
1bf08     19 26 62 FD | 	getqy	local01
1bf0c     A7 26 62 FC | 	wrlong	local01, fp
1bf10     08 4E 05 F1 | 	add	fp, #8
1bf14     A7 3A 68 FC | 	wrlong	#29, fp
1bf18     08 4E 85 F1 | 	sub	fp, #8
1bf1c     2C 1A BF FD | 	call	#_push
1bf20     A0 00 90 FD | 	jmp	#LR__2235
1bf24                 | LR__2232
1bf24     08 4E 05 F1 | 	add	fp, #8
1bf28     A7 26 02 FB | 	rdlong	local01, fp
1bf2c     08 4E 85 F1 | 	sub	fp, #8
1bf30     1E 26 0E F2 | 	cmp	local01, #30 wz
1bf34     48 00 90 5D |  if_ne	jmp	#LR__2233
1bf38     A7 12 02 FB | 	rdlong	arg01, fp
1bf3c     00 C0 24 FF 
1bf40     00 14 06 F6 | 	mov	arg02, ##1233125376
1bf44     2C F5 B0 FD | 	call	#__system___float_div
1bf48     FD 26 02 F6 | 	mov	local01, result1
1bf4c     1B 12 62 FD | 	getrnd	arg01
1bf50     74 13 06 F4 | 	bitl	arg01, #372
1bf54     14 EF B0 FD | 	call	#__system___float_fromuns
1bf58     FD 14 02 F6 | 	mov	arg02, result1
1bf5c     13 13 02 F6 | 	mov	arg01, local01
1bf60     0C F3 B0 FD | 	call	#__system___float_mul
1bf64     A7 FA 61 FC | 	wrlong	result1, fp
1bf68     08 4E 05 F1 | 	add	fp, #8
1bf6c     A7 3C 68 FC | 	wrlong	#30, fp
1bf70     08 4E 85 F1 | 	sub	fp, #8
1bf74     A7 12 02 F6 | 	mov	arg01, fp
1bf78     D0 19 BF FD | 	call	#_push
1bf7c     44 00 90 FD | 	jmp	#LR__2234
1bf80                 | LR__2233
1bf80                 | '     print "rnd: "; : printerror(40) 
1bf80     00 12 06 F6 | 	mov	arg01, #0
1bf84     1C 21 B1 FD | 	call	#__system___getiolock_0625
1bf88     FD 12 02 F6 | 	mov	arg01, result1
1bf8c     64 C4 B0 FD | 	call	#__system___lockmem
1bf90     C5 01 00 FF 
1bf94     73 15 06 F6 | 	mov	arg02, ##@LR__6161
1bf98     00 12 06 F6 | 	mov	arg01, #0
1bf9c     00 16 06 F6 | 	mov	arg03, #0
1bfa0     48 D1 B0 FD | 	call	#__system___basic_print_string
1bfa4     00 12 06 F6 | 	mov	arg01, #0
1bfa8     F8 20 B1 FD | 	call	#__system___getiolock_0625
1bfac     FD 00 68 FC | 	wrlong	#0, result1
1bfb0     28 12 06 F6 | 	mov	arg01, #40
1bfb4     00 14 06 F6 | 	mov	arg02, #0
1bfb8     E0 89 B0 FD | 	call	#_printerror
1bfbc     A7 12 02 F6 | 	mov	arg01, fp
1bfc0     88 19 BF FD | 	call	#_push
1bfc4                 | LR__2234
1bfc4                 | LR__2235
1bfc4                 | LR__2236
1bfc4                 | LR__2237
1bfc4     A7 F0 03 F6 | 	mov	ptra, fp
1bfc8     B2 00 A0 FD | 	call	#popregs_
1bfcc                 | _do_rnd_ret
1bfcc     2D 00 64 FD | 	ret
1bfd0                 | 
1bfd0                 | ' 
1bfd0                 | ' '-------------------- round
1bfd0                 | ' 
1bfd0                 | ' sub do_round
1bfd0                 | _do_round
1bfd0     00 4A 05 F6 | 	mov	COUNT_, #0
1bfd4     A8 00 A0 FD | 	call	#pushregs_
1bfd8     0C F0 07 F1 | 	add	ptra, #12
1bfdc     D4 18 BF FD | 	call	#_pop
1bfe0     A7 FA 61 FC | 	wrlong	result1, fp
1bfe4     04 4E 05 F1 | 	add	fp, #4
1bfe8     A7 FC 61 FC | 	wrlong	result2, fp
1bfec     04 4E 05 F1 | 	add	fp, #4
1bff0     A7 FE 61 FC | 	wrlong	result3, fp
1bff4     08 4E 85 F1 | 	sub	fp, #8
1bff8     A7 12 02 F6 | 	mov	arg01, fp
1bffc     98 1A BF FD | 	call	#_converttoint
1c000     A7 FA 61 FC | 	wrlong	result1, fp
1c004     08 4E 05 F1 | 	add	fp, #8
1c008     A7 38 68 FC | 	wrlong	#28, fp
1c00c     08 4E 85 F1 | 	sub	fp, #8
1c010     A7 12 02 F6 | 	mov	arg01, fp
1c014     34 19 BF FD | 	call	#_push
1c018     A7 F0 03 F6 | 	mov	ptra, fp
1c01c     B2 00 A0 FD | 	call	#popregs_
1c020                 | _do_round_ret
1c020     2D 00 64 FD | 	ret
1c024                 | 
1c024                 | ' 
1c024                 | ' '-------------------- rqpin
1c024                 | ' 
1c024                 | ' sub do_rqpin
1c024                 | _do_rqpin
1c024     00 4A 05 F6 | 	mov	COUNT_, #0
1c028     A8 00 A0 FD | 	call	#pushregs_
1c02c     0C F0 07 F1 | 	add	ptra, #12
1c030     80 18 BF FD | 	call	#_pop
1c034     A7 FA 61 FC | 	wrlong	result1, fp
1c038     04 4E 05 F1 | 	add	fp, #4
1c03c     A7 FC 61 FC | 	wrlong	result2, fp
1c040     04 4E 05 F1 | 	add	fp, #4
1c044     A7 FE 61 FC | 	wrlong	result3, fp
1c048     08 4E 85 F1 | 	sub	fp, #8
1c04c     A7 12 02 F6 | 	mov	arg01, fp
1c050     44 1A BF FD | 	call	#_converttoint
1c054     FD 12 02 F6 | 	mov	arg01, result1
1c058     00 FA 05 F6 | 	mov	result1, #0
1c05c     09 FB 81 FA | 	rqpin	result1, arg01
1c060     52 00 00 FF 
1c064     68 E5 05 F1 | 	add	objptr, ##42344
1c068     F2 FA 61 FC | 	wrlong	result1, objptr
1c06c     52 00 00 FF 
1c070     68 E5 85 F1 | 	sub	objptr, ##42344
1c074     08 4E 05 F1 | 	add	fp, #8
1c078     A7 3A 68 FC | 	wrlong	#29, fp
1c07c     08 4E 85 F1 | 	sub	fp, #8
1c080     A7 08 68 FC | 	wrlong	#4, fp
1c084     A7 12 02 F6 | 	mov	arg01, fp
1c088     C0 18 BF FD | 	call	#_push
1c08c     A7 F0 03 F6 | 	mov	ptra, fp
1c090     B2 00 A0 FD | 	call	#popregs_
1c094                 | _do_rqpin_ret
1c094     2D 00 64 FD | 	ret
1c098                 | 
1c098                 | ' 
1c098                 | ' ' ------------------ run
1c098                 | ' 
1c098                 | ' sub do_run
1c098                 | _do_run
1c098     04 4A 05 F6 | 	mov	COUNT_, #4
1c09c     A8 00 A0 FD | 	call	#pushregs_
1c0a0     4A 00 00 FF 
1c0a4     A0 E4 05 F1 | 	add	objptr, ##38048
1c0a8     F2 26 02 FB | 	rdlong	local01, objptr
1c0ac     06 00 00 FF 
1c0b0     38 E4 05 F1 | 	add	objptr, ##3128
1c0b4     F2 28 02 FB | 	rdlong	local02, objptr
1c0b8     04 E4 05 F1 | 	add	objptr, #4
1c0bc     F2 2A 02 FB | 	rdlong	local03, objptr
1c0c0     13 19 02 F6 | 	mov	arg04, local01
1c0c4     0C 17 02 F6 | 	mov	arg03, arg04
1c0c8     01 16 66 F0 | 	shl	arg03, #1
1c0cc     0C 17 02 F1 | 	add	arg03, arg04
1c0d0     02 16 66 F0 | 	shl	arg03, #2
1c0d4     09 00 00 FF 
1c0d8     40 E4 85 F1 | 	sub	objptr, ##4672
1c0dc     F2 16 02 F1 | 	add	arg03, objptr
1c0e0     0B 15 02 FB | 	rdlong	arg02, arg03
1c0e4                 | ' 
1c0e4                 | ' r_lineptr_e=lineptr_e
1c0e4                 | ' r_runptr=runptr
1c0e4                 | ' r_runptr2=runptr2
1c0e4                 | ' 
1c0e4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c0e4                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1c0e4     01 14 0E F2 | 	cmp	arg02, #1 wz
1c0e8     47 00 00 FF 
1c0ec     9C E4 85 F1 | 	sub	objptr, ##36508
1c0f0     00 12 06 A6 |  if_e	mov	arg01, #0
1c0f4     AC 99 BF AD |  if_e	call	#_do_load
1c0f8     4A 00 00 FF 
1c0fc     A8 E4 05 F1 | 	add	objptr, ##38056
1c100     F2 18 02 FB | 	rdlong	arg04, objptr
1c104     06 00 00 FF 
1c108     30 E4 05 F1 | 	add	objptr, ##3120
1c10c     F2 18 62 FC | 	wrlong	arg04, objptr
1c110     04 E4 05 F1 | 	add	objptr, #4
1c114     F2 00 68 FC | 	wrlong	#0, objptr
1c118     04 E4 05 F1 | 	add	objptr, #4
1c11c     FF FF FF FF 
1c120     F2 FE 6B FC | 	wrlong	##-1, objptr
1c124     06 00 00 FF 
1c128     38 E4 85 F1 | 	sub	objptr, ##3128
1c12c     F2 18 02 FB | 	rdlong	arg04, objptr
1c130     06 00 00 FF 
1c134     A4 E4 05 F1 | 	add	objptr, ##3236
1c138     F2 18 62 FC | 	wrlong	arg04, objptr
1c13c     C5 01 00 FF 
1c140     79 19 06 F6 | 	mov	arg04, ##@LR__6162
1c144     01 00 00 FF 
1c148     E8 E5 05 F1 | 	add	objptr, ##1000
1c14c     F2 18 62 FC | 	wrlong	arg04, objptr
1c150                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1c150                 | ' dataptr=programstart : readline="" ' reset the data pointer
1c150                 | ' if inrun>0 then 
1c150     02 00 00 FF 
1c154     28 E4 85 F1 | 	sub	objptr, ##1064
1c158     F2 18 02 FB | 	rdlong	arg04, objptr
1c15c     50 00 00 FF 
1c160     0C E5 85 F1 | 	sub	objptr, ##41228
1c164     01 18 16 F2 | 	cmp	arg04, #1 wc
1c168     30 00 90 CD |  if_b	jmp	#LR__2240
1c16c     50 00 00 FF 
1c170     10 E5 05 F1 | 	add	objptr, ##41232
1c174     F2 12 02 F6 | 	mov	arg01, objptr
1c178     38 E4 85 F1 | 	sub	objptr, #56
1c17c     F2 14 02 FB | 	rdlong	arg02, objptr
1c180     18 16 06 F6 | 	mov	arg03, #24
1c184     45 00 00 FF 
1c188     0C E4 85 F1 | 	sub	objptr, ##35340
1c18c     C0 B5 B0 FD | 	call	#_psram_spin2_read1
1c190     0B 00 00 FF 
1c194     CC E4 85 F1 | 	sub	objptr, ##5836
1c198                 | '   psram.read1(varptr(runheader),runptr,24)  
1c198                 | '   return
1c198     0C 03 90 FD | 	jmp	#LR__2247
1c19c                 | LR__2240
1c19c     50 00 00 FF 
1c1a0     0C E5 05 F1 | 	add	objptr, ##41228
1c1a4     F2 02 68 FC | 	wrlong	#1, objptr
1c1a8     04 E4 05 F1 | 	add	objptr, #4
1c1ac     F2 12 02 F6 | 	mov	arg01, objptr
1c1b0     38 E4 85 F1 | 	sub	objptr, #56
1c1b4     F2 14 02 FB | 	rdlong	arg02, objptr
1c1b8     18 16 06 F6 | 	mov	arg03, #24
1c1bc     45 00 00 FF 
1c1c0     0C E4 85 F1 | 	sub	objptr, ##35340
1c1c4     88 B5 B0 FD | 	call	#_psram_spin2_read1
1c1c8                 | ' inrun=1
1c1c8                 | ' psram.read1(varptr(runheader),runptr,24) 
1c1c8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1c1c8     45 00 00 FF 
1c1cc     44 E4 05 F1 | 	add	objptr, ##35396
1c1d0     F2 2C 02 FB | 	rdlong	local04, objptr
1c1d4     50 00 00 FF 
1c1d8     10 E5 85 F1 | 	sub	objptr, ##41232
1c1dc     FF FF 7F FF 
1c1e0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1c1e4     50 00 00 AF 
1c1e8     0C E5 05 A1 |  if_e	add	objptr, ##41228
1c1ec     F2 00 68 AC |  if_e	wrlong	#0, objptr
1c1f0     50 00 00 AF 
1c1f4     0C E5 85 A1 |  if_e	sub	objptr, ##41228
1c1f8     AC 02 90 AD |  if_e	jmp	#LR__2247
1c1fc                 | ' do 
1c1fc                 | LR__2241
1c1fc                 | '   if runptr<>oldrunptr then
1c1fc     50 00 00 FF 
1c200     D8 E4 05 F1 | 	add	objptr, ##41176
1c204     F2 2C 02 FB | 	rdlong	local04, objptr
1c208     08 E4 05 F1 | 	add	objptr, #8
1c20c     F2 18 02 FB | 	rdlong	arg04, objptr
1c210     50 00 00 FF 
1c214     E0 E4 85 F1 | 	sub	objptr, ##41184
1c218     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1c21c     CC 00 90 AD |  if_e	jmp	#LR__2242
1c220     50 00 00 FF 
1c224     10 E5 05 F1 | 	add	objptr, ##41232
1c228     F2 12 02 F6 | 	mov	arg01, objptr
1c22c     38 E4 85 F1 | 	sub	objptr, #56
1c230     F2 14 02 FB | 	rdlong	arg02, objptr
1c234     18 16 06 F6 | 	mov	arg03, #24
1c238     45 00 00 FF 
1c23c     0C E4 85 F1 | 	sub	objptr, ##35340
1c240     0C B5 B0 FD | 	call	#_psram_spin2_read1
1c244     3B 00 00 FF 
1c248     D0 E5 05 F1 | 	add	objptr, ##30672
1c24c     F2 12 02 F6 | 	mov	arg01, objptr
1c250     09 00 00 FF 
1c254     3C E4 05 F1 | 	add	objptr, ##4668
1c258     F2 14 02 FB | 	rdlong	arg02, objptr
1c25c     0B 00 00 FF 
1c260     54 E4 85 F1 | 	sub	objptr, ##5716
1c264     F2 2C 02 FB | 	rdlong	local04, objptr
1c268     01 2C 66 F0 | 	shl	local04, #1
1c26c     16 15 02 F1 | 	add	arg02, local04
1c270     0B 00 00 FF 
1c274     94 E4 05 F1 | 	add	objptr, ##5780
1c278     F2 16 02 FB | 	rdlong	arg03, objptr
1c27c     40 E4 85 F1 | 	sub	objptr, #64
1c280     F2 2C 02 FB | 	rdlong	local04, objptr
1c284     16 17 82 F1 | 	sub	arg03, local04
1c288     45 00 00 FF 
1c28c     0C E4 85 F1 | 	sub	objptr, ##35340
1c290     BC B4 B0 FD | 	call	#_psram_spin2_read1
1c294     45 00 00 FF 
1c298     4C E4 05 F1 | 	add	objptr, ##35404
1c29c     F2 2C 02 FB | 	rdlong	local04, objptr
1c2a0     40 E4 85 F1 | 	sub	objptr, #64
1c2a4     F2 14 02 FB | 	rdlong	arg02, objptr
1c2a8     0A 2D 82 F1 | 	sub	local04, arg02
1c2ac     0B 00 00 FF 
1c2b0     54 E4 85 F1 | 	sub	objptr, ##5716
1c2b4     F2 14 02 FB | 	rdlong	arg02, objptr
1c2b8     0A 2D 12 FD | 	qdiv	local04, arg02
1c2bc     05 00 00 FF 
1c2c0     18 E4 05 F1 | 	add	objptr, ##2584
1c2c4     18 2C 62 FD | 	getqx	local04
1c2c8     03 2C 86 F1 | 	sub	local04, #3
1c2cc     F2 2C 62 FC | 	wrlong	local04, objptr
1c2d0     06 00 00 FF 
1c2d4     3C E4 05 F1 | 	add	objptr, ##3132
1c2d8     F2 2C 02 FB | 	rdlong	local04, objptr
1c2dc     08 E4 05 F1 | 	add	objptr, #8
1c2e0     F2 2C 62 FC | 	wrlong	local04, objptr
1c2e4     50 00 00 FF 
1c2e8     E0 E4 85 F1 | 	sub	objptr, ##41184
1c2ec                 | LR__2242
1c2ec     50 00 00 FF 
1c2f0     24 E5 05 F1 | 	add	objptr, ##41252
1c2f4     F2 2C 02 FB | 	rdlong	local04, objptr
1c2f8     4C E4 85 F1 | 	sub	objptr, #76
1c2fc     F2 2C 62 FC | 	wrlong	local04, objptr
1c300     04 E4 05 F1 | 	add	objptr, #4
1c304     F2 12 02 FB | 	rdlong	arg01, objptr
1c308     50 00 00 FF 
1c30c     DC E4 85 F1 | 	sub	objptr, ##41180
1c310     9C 14 BF FD | 	call	#_execute_line
1c314     50 00 00 FF 
1c318     DC E4 05 F1 | 	add	objptr, ##41180
1c31c     F2 FA 61 FC | 	wrlong	result1, objptr
1c320     04 E4 85 F1 | 	sub	objptr, #4
1c324     F2 2C 02 FB | 	rdlong	local04, objptr
1c328     50 00 00 FF 
1c32c     D8 E4 85 F1 | 	sub	objptr, ##41176
1c330     FF FF 3F FF 
1c334     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1c338     4C 00 90 AD |  if_e	jmp	#LR__2245
1c33c     E0 12 06 F6 | 	mov	arg01, #224
1c340     9C B7 B0 FD | 	call	#_usbnew_spin2_keystate
1c344     00 FA 0D F2 | 	cmp	result1, #0 wz
1c348     10 00 90 5D |  if_ne	jmp	#LR__2243
1c34c     E4 12 06 F6 | 	mov	arg01, #228
1c350     8C B7 B0 FD | 	call	#_usbnew_spin2_keystate
1c354     00 FA 0D F2 | 	cmp	result1, #0 wz
1c358     10 00 90 AD |  if_e	jmp	#LR__2244
1c35c                 | LR__2243
1c35c     06 12 06 F6 | 	mov	arg01, #6
1c360     7C B7 B0 FD | 	call	#_usbnew_spin2_keystate
1c364     00 FA 0D F2 | 	cmp	result1, #0 wz
1c368     1C 00 90 5D |  if_ne	jmp	#LR__2245
1c36c                 | LR__2244
1c36c     50 00 00 FF 
1c370     0C E5 05 F1 | 	add	objptr, ##41228
1c374     F2 2C 02 FB | 	rdlong	local04, objptr
1c378     50 00 00 FF 
1c37c     0C E5 85 F1 | 	sub	objptr, ##41228
1c380     02 2C 0E F2 | 	cmp	local04, #2 wz
1c384     74 FE 9F 5D |  if_ne	jmp	#LR__2241
1c388                 | LR__2245
1c388                 | '   ''do whatever kbm.peek_latest_key()=$106 
1c388                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1c388     50 00 00 FF 
1c38c     D8 E4 05 F1 | 	add	objptr, ##41176
1c390     F2 2C 02 FB | 	rdlong	local04, objptr
1c394     50 00 00 FF 
1c398     D8 E4 85 F1 | 	sub	objptr, ##41176
1c39c     FF FF 3F FF 
1c3a0     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1c3a4     AC 00 90 AD |  if_e	jmp	#LR__2246
1c3a8     50 00 00 FF 
1c3ac     0C E5 05 F1 | 	add	objptr, ##41228
1c3b0     F2 2C 02 FB | 	rdlong	local04, objptr
1c3b4     50 00 00 FF 
1c3b8     0C E5 85 F1 | 	sub	objptr, ##41228
1c3bc     01 2C 0E F2 | 	cmp	local04, #1 wz
1c3c0     90 00 90 5D |  if_ne	jmp	#LR__2246
1c3c4                 | '   print: print "Stopped at line ";runheader(0) 
1c3c4     00 12 06 F6 | 	mov	arg01, #0
1c3c8     D8 1C B1 FD | 	call	#__system___getiolock_0625
1c3cc     FD 12 02 F6 | 	mov	arg01, result1
1c3d0     20 C0 B0 FD | 	call	#__system___lockmem
1c3d4     00 12 06 F6 | 	mov	arg01, #0
1c3d8     0A 14 06 F6 | 	mov	arg02, #10
1c3dc     00 16 06 F6 | 	mov	arg03, #0
1c3e0     B0 CC B0 FD | 	call	#__system___basic_print_char
1c3e4     00 12 06 F6 | 	mov	arg01, #0
1c3e8     B8 1C B1 FD | 	call	#__system___getiolock_0625
1c3ec     FD 00 68 FC | 	wrlong	#0, result1
1c3f0     00 12 06 F6 | 	mov	arg01, #0
1c3f4     AC 1C B1 FD | 	call	#__system___getiolock_0625
1c3f8     FD 12 02 F6 | 	mov	arg01, result1
1c3fc     F4 BF B0 FD | 	call	#__system___lockmem
1c400     C5 01 00 FF 
1c404     7A 15 06 F6 | 	mov	arg02, ##@LR__6163
1c408     00 12 06 F6 | 	mov	arg01, #0
1c40c     00 16 06 F6 | 	mov	arg03, #0
1c410     D8 CC B0 FD | 	call	#__system___basic_print_string
1c414     50 00 00 FF 
1c418     10 E5 05 F1 | 	add	objptr, ##41232
1c41c     F2 14 02 FB | 	rdlong	arg02, objptr
1c420     50 00 00 FF 
1c424     10 E5 85 F1 | 	sub	objptr, ##41232
1c428     00 12 06 F6 | 	mov	arg01, #0
1c42c     00 16 06 F6 | 	mov	arg03, #0
1c430     0A 18 06 F6 | 	mov	arg04, #10
1c434     38 CD B0 FD | 	call	#__system___basic_print_unsigned
1c438     00 12 06 F6 | 	mov	arg01, #0
1c43c     0A 14 06 F6 | 	mov	arg02, #10
1c440     00 16 06 F6 | 	mov	arg03, #0
1c444     4C CC B0 FD | 	call	#__system___basic_print_char
1c448     00 12 06 F6 | 	mov	arg01, #0
1c44c     54 1C B1 FD | 	call	#__system___getiolock_0625
1c450     FD 00 68 FC | 	wrlong	#0, result1
1c454                 | LR__2246
1c454     50 00 00 FF 
1c458     0C E5 05 F1 | 	add	objptr, ##41228
1c45c     F2 00 68 FC | 	wrlong	#0, objptr
1c460     06 00 00 FF 
1c464     6C E4 85 F1 | 	sub	objptr, ##3180
1c468     F2 26 62 FC | 	wrlong	local01, objptr
1c46c     06 00 00 FF 
1c470     38 E4 05 F1 | 	add	objptr, ##3128
1c474     F2 28 62 FC | 	wrlong	local02, objptr
1c478     04 E4 05 F1 | 	add	objptr, #4
1c47c     F2 2A 62 FC | 	wrlong	local03, objptr
1c480     50 00 00 FF 
1c484     DC E4 85 F1 | 	sub	objptr, ##41180
1c488     11 12 06 F6 | 	mov	arg01, #17
1c48c     08 14 06 F6 | 	mov	arg02, #8
1c490     10 16 06 F6 | 	mov	arg03, #16
1c494     6C 95 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c498     10 12 06 F6 | 	mov	arg01, #16
1c49c     20 14 06 F6 | 	mov	arg02, #32
1c4a0     20 16 06 F6 | 	mov	arg03, #32
1c4a4     5C 95 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c4a8                 | LR__2247
1c4a8     A7 F0 03 F6 | 	mov	ptra, fp
1c4ac     B2 00 A0 FD | 	call	#popregs_
1c4b0                 | _do_run_ret
1c4b0     2D 00 64 FD | 	ret
1c4b4                 | 
1c4b4                 | ' 
1c4b4                 | ' ' ------------------ save
1c4b4                 | ' 
1c4b4                 | ' sub do_save                        
1c4b4                 | _do_save
1c4b4     04 4A 05 F6 | 	mov	COUNT_, #4
1c4b8     A8 00 A0 FD | 	call	#pushregs_
1c4bc     B8 F0 07 F1 | 	add	ptra, #184
1c4c0     4A 00 00 FF 
1c4c4     A0 E4 05 F1 | 	add	objptr, ##38048
1c4c8     F2 26 02 FB | 	rdlong	local01, objptr
1c4cc     13 29 02 F6 | 	mov	local02, local01
1c4d0     01 28 66 F0 | 	shl	local02, #1
1c4d4     13 29 02 F1 | 	add	local02, local01
1c4d8     02 28 66 F0 | 	shl	local02, #2
1c4dc     03 00 00 FF 
1c4e0     04 E4 85 F1 | 	sub	objptr, ##1540
1c4e4     F2 28 02 F1 | 	add	local02, objptr
1c4e8     14 2B 02 FB | 	rdlong	local03, local02
1c4ec     10 4E 05 F1 | 	add	fp, #16
1c4f0     A7 2A 62 FC | 	wrlong	local03, fp
1c4f4                 | ' 
1c4f4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c4f4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1c4f4     10 4E 85 F1 | 	sub	fp, #16
1c4f8     01 2A 56 F2 | 	cmps	local03, #1 wc
1c4fc     47 00 00 FF 
1c500     9C E4 85 F1 | 	sub	objptr, ##36508
1c504     20 00 90 CD |  if_b	jmp	#LR__2250
1c508     A8 13 BF FD | 	call	#_pop
1c50c     A7 FA 61 FC | 	wrlong	result1, fp
1c510     04 4E 05 F1 | 	add	fp, #4
1c514     A7 FC 61 FC | 	wrlong	result2, fp
1c518     04 4E 05 F1 | 	add	fp, #4
1c51c     A7 FE 61 FC | 	wrlong	result3, fp
1c520     08 4E 85 F1 | 	sub	fp, #8
1c524     24 00 90 FD | 	jmp	#LR__2251
1c528                 | LR__2250
1c528     52 00 00 FF 
1c52c     1C E5 05 F1 | 	add	objptr, ##42268
1c530     F2 2A 02 FB | 	rdlong	local03, objptr
1c534     52 00 00 FF 
1c538     1C E5 85 F1 | 	sub	objptr, ##42268
1c53c     A7 2A 62 FC | 	wrlong	local03, fp
1c540     08 4E 05 F1 | 	add	fp, #8
1c544     A7 3E 68 FC | 	wrlong	#31, fp
1c548     08 4E 85 F1 | 	sub	fp, #8
1c54c                 | LR__2251
1c54c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1c54c     4A 00 00 FF 
1c550     A8 E4 05 F1 | 	add	objptr, ##38056
1c554     F2 12 02 FB | 	rdlong	arg01, objptr
1c558     4A 00 00 FF 
1c55c     A8 E4 85 F1 | 	sub	objptr, ##38056
1c560     08 87 B0 FD | 	call	#_pslpeek
1c564     FF FF 7F FF 
1c568     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1c56c     10 00 90 5D |  if_ne	jmp	#LR__2252
1c570     1B 12 06 F6 | 	mov	arg01, #27
1c574     00 14 06 F6 | 	mov	arg02, #0
1c578     20 84 B0 FD | 	call	#_printerror
1c57c     CC 02 90 FD | 	jmp	#LR__2258
1c580                 | LR__2252
1c580                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1c580     08 4E 05 F1 | 	add	fp, #8
1c584     A7 2A 02 FB | 	rdlong	local03, fp
1c588     08 4E 85 F1 | 	sub	fp, #8
1c58c     2B 2A 0E F2 | 	cmp	local03, #43 wz
1c590     18 00 90 5D |  if_ne	jmp	#LR__2253
1c594     A7 12 02 FB | 	rdlong	arg01, fp
1c598     90 14 BF FD | 	call	#_convertstring
1c59c     A7 FA 61 FC | 	wrlong	result1, fp
1c5a0     08 4E 05 F1 | 	add	fp, #8
1c5a4     A7 3E 68 FC | 	wrlong	#31, fp
1c5a8     08 4E 85 F1 | 	sub	fp, #8
1c5ac                 | LR__2253
1c5ac                 | ' if t1.result_type=result_string then
1c5ac     08 4E 05 F1 | 	add	fp, #8
1c5b0     A7 2A 02 FB | 	rdlong	local03, fp
1c5b4     08 4E 85 F1 | 	sub	fp, #8
1c5b8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c5bc     8C 02 90 5D |  if_ne	jmp	#LR__2257
1c5c0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1c5c0     A7 12 02 FB | 	rdlong	arg01, fp
1c5c4     C5 01 00 FF 
1c5c8     8B 15 06 F6 | 	mov	arg02, ##@LR__6164
1c5cc     4C BE B0 FD | 	call	#__system___string_cmp
1c5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5d4     52 00 00 AF 
1c5d8     1C E5 05 A1 |  if_e	add	objptr, ##42268
1c5dc     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1c5e0     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c5e4     52 00 00 AF 
1c5e8     1C E5 85 A1 |  if_e	sub	objptr, ##42268
1c5ec     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c5f0     52 00 00 5F 
1c5f4     1C E5 05 51 |  if_ne	add	objptr, ##42268
1c5f8     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1c5fc     52 00 00 5F 
1c600     1C E5 85 51 |  if_ne	sub	objptr, ##42268
1c604                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1c604     09 12 06 F6 | 	mov	arg01, #9
1c608     48 11 B1 FD | 	call	#__system__close
1c60c     09 2A 06 F6 | 	mov	local03, #9
1c610     4A 00 00 FF 
1c614     B4 E4 05 F1 | 	add	objptr, ##38068
1c618     F2 12 02 FB | 	rdlong	arg01, objptr
1c61c     4A 00 00 FF 
1c620     B4 E4 85 F1 | 	sub	objptr, ##38068
1c624     C5 01 00 FF 
1c628     8C 15 06 F6 | 	mov	arg02, ##@LR__6165
1c62c     20 BE B0 FD | 	call	#__system___string_concat
1c630     FD 12 02 F6 | 	mov	arg01, result1
1c634     A7 14 02 FB | 	rdlong	arg02, fp
1c638     14 BE B0 FD | 	call	#__system___string_concat
1c63c     FD 14 02 F6 | 	mov	arg02, result1
1c640     15 13 02 F6 | 	mov	arg01, local03
1c644     0D 16 06 F6 | 	mov	arg03, #13
1c648     AC C9 B0 FD | 	call	#__system___basic_open_string
1c64c     4A 00 00 FF 
1c650     A8 E4 05 F1 | 	add	objptr, ##38056
1c654     F2 2A 02 FB | 	rdlong	local03, objptr
1c658     4A 00 00 FF 
1c65c     A8 E4 85 F1 | 	sub	objptr, ##38056
1c660     B0 4E 05 F1 | 	add	fp, #176
1c664     A7 2A 62 FC | 	wrlong	local03, fp
1c668     B0 4E 85 F1 | 	sub	fp, #176
1c66c                 | '   saveptr=programstart
1c66c                 | '   do
1c66c                 | LR__2254
1c66c     14 4E 05 F1 | 	add	fp, #20
1c670     A7 12 02 F6 | 	mov	arg01, fp
1c674     9C 4E 05 F1 | 	add	fp, #156
1c678     A7 14 02 FB | 	rdlong	arg02, fp
1c67c     B0 4E 85 F1 | 	sub	fp, #176
1c680     18 16 06 F6 | 	mov	arg03, #24
1c684     0B 00 00 FF 
1c688     CC E4 05 F1 | 	add	objptr, ##5836
1c68c     C0 B0 B0 FD | 	call	#_psram_spin2_read1
1c690     2C 4E 05 F1 | 	add	fp, #44
1c694     A7 12 02 F6 | 	mov	arg01, fp
1c698     10 4E 85 F1 | 	sub	fp, #16
1c69c     A7 14 02 FB | 	rdlong	arg02, fp
1c6a0     04 4E 05 F1 | 	add	fp, #4
1c6a4     A7 16 02 FB | 	rdlong	arg03, fp
1c6a8     20 4E 85 F1 | 	sub	fp, #32
1c6ac     A0 B0 B0 FD | 	call	#_psram_spin2_read1
1c6b0     0B 00 00 FF 
1c6b4     CC E4 85 F1 | 	sub	objptr, ##5836
1c6b8     C5 01 00 FF 
1c6bc     8E 2B 06 F6 | 	mov	local03, ##@LR__6166
1c6c0     AC 4E 05 F1 | 	add	fp, #172
1c6c4     A7 2A 62 FC | 	wrlong	local03, fp
1c6c8                 | '     psram.read1(varptr(header(0)),saveptr,24)
1c6c8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1c6c8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1c6c8     A0 4E 85 F1 | 	sub	fp, #160
1c6cc     A7 02 68 FC | 	wrlong	#1, fp
1c6d0     14 4E 05 F1 | 	add	fp, #20
1c6d4     A7 2C 02 FB | 	rdlong	local04, fp
1c6d8     20 4E 85 F1 | 	sub	fp, #32
1c6dc     01 2C 06 F1 | 	add	local04, #1
1c6e0                 | LR__2255
1c6e0     0C 4E 05 F1 | 	add	fp, #12
1c6e4     A7 2A 02 FB | 	rdlong	local03, fp
1c6e8     0C 4E 85 F1 | 	sub	fp, #12
1c6ec     16 2B 52 F2 | 	cmps	local03, local04 wc
1c6f0     54 00 90 3D |  if_ae	jmp	#LR__2256
1c6f4     AC 4E 05 F1 | 	add	fp, #172
1c6f8     A7 26 02 FB | 	rdlong	local01, fp
1c6fc     A0 4E 85 F1 | 	sub	fp, #160
1c700     A7 2A 02 FB | 	rdlong	local03, fp
1c704     01 2A 86 F1 | 	sub	local03, #1
1c708     20 4E 05 F1 | 	add	fp, #32
1c70c     A7 2A 02 F1 | 	add	local03, fp
1c710     15 13 C2 FA | 	rdbyte	arg01, local03
1c714     2C 4E 85 F1 | 	sub	fp, #44
1c718     1C DF B0 FD | 	call	#__system__Chr_S
1c71c     FD 14 02 F6 | 	mov	arg02, result1
1c720     13 13 02 F6 | 	mov	arg01, local01
1c724     28 BD B0 FD | 	call	#__system___string_concat
1c728     AC 4E 05 F1 | 	add	fp, #172
1c72c     A7 FA 61 FC | 	wrlong	result1, fp
1c730     A0 4E 85 F1 | 	sub	fp, #160
1c734     A7 2A 02 FB | 	rdlong	local03, fp
1c738     01 2A 06 F1 | 	add	local03, #1
1c73c     A7 2A 62 FC | 	wrlong	local03, fp
1c740     0C 4E 85 F1 | 	sub	fp, #12
1c744     98 FF 9F FD | 	jmp	#LR__2255
1c748                 | LR__2256
1c748                 | '     print #9, saveline$
1c748     09 12 06 F6 | 	mov	arg01, #9
1c74c     54 19 B1 FD | 	call	#__system___getiolock_0625
1c750     FD 12 02 F6 | 	mov	arg01, result1
1c754     9C BC B0 FD | 	call	#__system___lockmem
1c758     AC 4E 05 F1 | 	add	fp, #172
1c75c     A7 14 02 FB | 	rdlong	arg02, fp
1c760     AC 4E 85 F1 | 	sub	fp, #172
1c764     09 12 06 F6 | 	mov	arg01, #9
1c768     00 16 06 F6 | 	mov	arg03, #0
1c76c     7C C9 B0 FD | 	call	#__system___basic_print_string
1c770     09 12 06 F6 | 	mov	arg01, #9
1c774     0A 14 06 F6 | 	mov	arg02, #10
1c778     00 16 06 F6 | 	mov	arg03, #0
1c77c     14 C9 B0 FD | 	call	#__system___basic_print_char
1c780     09 12 06 F6 | 	mov	arg01, #9
1c784     1C 19 B1 FD | 	call	#__system___getiolock_0625
1c788     FD 00 68 FC | 	wrlong	#0, result1
1c78c     28 4E 05 F1 | 	add	fp, #40
1c790     A7 2A 02 FB | 	rdlong	local03, fp
1c794     88 4E 05 F1 | 	add	fp, #136
1c798     A7 2A 62 FC | 	wrlong	local03, fp
1c79c     88 4E 85 F1 | 	sub	fp, #136
1c7a0     A7 2A 02 FB | 	rdlong	local03, fp
1c7a4     28 4E 85 F1 | 	sub	fp, #40
1c7a8     FF FF 3F FF 
1c7ac     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1c7b0     B8 FE 9F 5D |  if_ne	jmp	#LR__2254
1c7b4                 | '   close #9  
1c7b4     09 12 06 F6 | 	mov	arg01, #9
1c7b8     98 0F B1 FD | 	call	#__system__close
1c7bc                 | '   print "Saved as ";currentdir$+"/"+loadname
1c7bc     00 12 06 F6 | 	mov	arg01, #0
1c7c0     E0 18 B1 FD | 	call	#__system___getiolock_0625
1c7c4     FD 12 02 F6 | 	mov	arg01, result1
1c7c8     28 BC B0 FD | 	call	#__system___lockmem
1c7cc     C5 01 00 FF 
1c7d0     8F 15 06 F6 | 	mov	arg02, ##@LR__6167
1c7d4     00 12 06 F6 | 	mov	arg01, #0
1c7d8     00 16 06 F6 | 	mov	arg03, #0
1c7dc     0C C9 B0 FD | 	call	#__system___basic_print_string
1c7e0     00 28 06 F6 | 	mov	local02, #0
1c7e4     4A 00 00 FF 
1c7e8     B4 E4 05 F1 | 	add	objptr, ##38068
1c7ec     F2 12 02 FB | 	rdlong	arg01, objptr
1c7f0     4A 00 00 FF 
1c7f4     B4 E4 85 F1 | 	sub	objptr, ##38068
1c7f8     C5 01 00 FF 
1c7fc     99 15 06 F6 | 	mov	arg02, ##@LR__6168
1c800     4C BC B0 FD | 	call	#__system___string_concat
1c804     FD 12 02 F6 | 	mov	arg01, result1
1c808     52 00 00 FF 
1c80c     1C E5 05 F1 | 	add	objptr, ##42268
1c810     F2 14 02 FB | 	rdlong	arg02, objptr
1c814     52 00 00 FF 
1c818     1C E5 85 F1 | 	sub	objptr, ##42268
1c81c     30 BC B0 FD | 	call	#__system___string_concat
1c820     FD 14 02 F6 | 	mov	arg02, result1
1c824     14 13 02 F6 | 	mov	arg01, local02
1c828     00 16 06 F6 | 	mov	arg03, #0
1c82c     BC C8 B0 FD | 	call	#__system___basic_print_string
1c830     00 12 06 F6 | 	mov	arg01, #0
1c834     0A 14 06 F6 | 	mov	arg02, #10
1c838     00 16 06 F6 | 	mov	arg03, #0
1c83c     54 C8 B0 FD | 	call	#__system___basic_print_char
1c840     00 12 06 F6 | 	mov	arg01, #0
1c844     5C 18 B1 FD | 	call	#__system___getiolock_0625
1c848     FD 00 68 FC | 	wrlong	#0, result1
1c84c                 | LR__2257
1c84c                 | LR__2258
1c84c     A7 F0 03 F6 | 	mov	ptra, fp
1c850     B2 00 A0 FD | 	call	#popregs_
1c854                 | _do_save_ret
1c854     2D 00 64 FD | 	ret
1c858                 | 
1c858                 | ' 
1c858                 | ' ' ------------------ setamode
1c858                 | ' 
1c858                 | ' sub do_setamode
1c858                 | _do_setamode
1c858     02 4A 05 F6 | 	mov	COUNT_, #2
1c85c     A8 00 A0 FD | 	call	#pushregs_
1c860     18 F0 07 F1 | 	add	ptra, #24
1c864     4C 10 BF FD | 	call	#_pop
1c868     FD 12 02 F6 | 	mov	arg01, result1
1c86c     FE 26 02 F6 | 	mov	local01, result2
1c870     FF 28 02 F6 | 	mov	local02, result3
1c874     A7 12 62 FC | 	wrlong	arg01, fp
1c878     04 4E 05 F1 | 	add	fp, #4
1c87c     A7 26 62 FC | 	wrlong	local01, fp
1c880     04 4E 05 F1 | 	add	fp, #4
1c884     A7 28 62 FC | 	wrlong	local02, fp
1c888     08 4E 85 F1 | 	sub	fp, #8
1c88c     24 10 BF FD | 	call	#_pop
1c890     FD 28 02 F6 | 	mov	local02, result1
1c894     0C 4E 05 F1 | 	add	fp, #12
1c898     A7 28 62 FC | 	wrlong	local02, fp
1c89c     04 4E 05 F1 | 	add	fp, #4
1c8a0     A7 FC 61 FC | 	wrlong	result2, fp
1c8a4     04 4E 05 F1 | 	add	fp, #4
1c8a8     A7 FE 61 FC | 	wrlong	result3, fp
1c8ac     08 4E 85 F1 | 	sub	fp, #8
1c8b0     A7 12 02 F6 | 	mov	arg01, fp
1c8b4     0C 4E 85 F1 | 	sub	fp, #12
1c8b8     DC 11 BF FD | 	call	#_converttoint
1c8bc     FD 28 02 F6 | 	mov	local02, result1
1c8c0     14 27 02 F6 | 	mov	local01, local02
1c8c4     03 26 66 F0 | 	shl	local01, #3
1c8c8     14 27 82 F1 | 	sub	local01, local02
1c8cc     02 26 66 F0 | 	shl	local01, #2
1c8d0     14 00 00 FF 
1c8d4     38 E5 05 F1 | 	add	objptr, ##10552
1c8d8     F2 26 02 F1 | 	add	local01, objptr
1c8dc     A7 12 02 F6 | 	mov	arg01, fp
1c8e0     14 00 00 FF 
1c8e4     38 E5 85 F1 | 	sub	objptr, ##10552
1c8e8     AC 11 BF FD | 	call	#_converttoint
1c8ec     16 26 06 F1 | 	add	local01, #22
1c8f0     13 FB 51 FC | 	wrword	result1, local01
1c8f4     A7 F0 03 F6 | 	mov	ptra, fp
1c8f8     B2 00 A0 FD | 	call	#popregs_
1c8fc                 | _do_setamode_ret
1c8fc     2D 00 64 FD | 	ret
1c900                 | 
1c900                 | ' 
1c900                 | ' 
1c900                 | ' ' ------------------ setcolor
1c900                 | ' 
1c900                 | ' sub do_setcolor
1c900                 | _do_setcolor
1c900     00 4A 05 F6 | 	mov	COUNT_, #0
1c904     A8 00 A0 FD | 	call	#pushregs_
1c908     20 F0 07 F1 | 	add	ptra, #32
1c90c     4A 00 00 FF 
1c910     A0 E4 05 F1 | 	add	objptr, ##38048
1c914     F2 18 02 FB | 	rdlong	arg04, objptr
1c918     0C 17 02 F6 | 	mov	arg03, arg04
1c91c     01 16 66 F0 | 	shl	arg03, #1
1c920     0C 17 02 F1 | 	add	arg03, arg04
1c924     02 16 66 F0 | 	shl	arg03, #2
1c928     03 00 00 FF 
1c92c     04 E4 85 F1 | 	sub	objptr, ##1540
1c930     F2 16 02 F1 | 	add	arg03, objptr
1c934     0B 19 02 FB | 	rdlong	arg04, arg03
1c938     1C 4E 05 F1 | 	add	fp, #28
1c93c     A7 18 62 FC | 	wrlong	arg04, fp
1c940                 | ' 
1c940                 | ' numpar=compiledline(lineptr_e).result.uresult
1c940                 | ' 
1c940                 | ' if numpar=4 then
1c940     1C 4E 85 F1 | 	sub	fp, #28
1c944     04 18 0E F2 | 	cmp	arg04, #4 wz
1c948     47 00 00 FF 
1c94c     9C E4 85 F1 | 	sub	objptr, ##36508
1c950     E0 00 90 5D |  if_ne	jmp	#LR__2260
1c954     5C 0F BF FD | 	call	#_pop
1c958     FF 18 02 F6 | 	mov	arg04, result3
1c95c     A7 FA 61 FC | 	wrlong	result1, fp
1c960     04 4E 05 F1 | 	add	fp, #4
1c964     A7 FC 61 FC | 	wrlong	result2, fp
1c968     04 4E 05 F1 | 	add	fp, #4
1c96c     A7 18 62 FC | 	wrlong	arg04, fp
1c970     08 4E 85 F1 | 	sub	fp, #8
1c974     A7 12 02 F6 | 	mov	arg01, fp
1c978     1C 11 BF FD | 	call	#_converttoint
1c97c     FD 18 02 F6 | 	mov	arg04, result1
1c980     14 4E 05 F1 | 	add	fp, #20
1c984     A7 18 62 FC | 	wrlong	arg04, fp
1c988     14 4E 85 F1 | 	sub	fp, #20
1c98c     24 0F BF FD | 	call	#_pop
1c990     FF 18 02 F6 | 	mov	arg04, result3
1c994     A7 FA 61 FC | 	wrlong	result1, fp
1c998     04 4E 05 F1 | 	add	fp, #4
1c99c     A7 FC 61 FC | 	wrlong	result2, fp
1c9a0     04 4E 05 F1 | 	add	fp, #4
1c9a4     A7 18 62 FC | 	wrlong	arg04, fp
1c9a8     08 4E 85 F1 | 	sub	fp, #8
1c9ac     A7 12 02 F6 | 	mov	arg01, fp
1c9b0     E4 10 BF FD | 	call	#_converttoint
1c9b4     FD 18 02 F6 | 	mov	arg04, result1
1c9b8     10 4E 05 F1 | 	add	fp, #16
1c9bc     A7 18 62 FC | 	wrlong	arg04, fp
1c9c0     10 4E 85 F1 | 	sub	fp, #16
1c9c4     EC 0E BF FD | 	call	#_pop
1c9c8     FF 18 02 F6 | 	mov	arg04, result3
1c9cc     A7 FA 61 FC | 	wrlong	result1, fp
1c9d0     04 4E 05 F1 | 	add	fp, #4
1c9d4     A7 FC 61 FC | 	wrlong	result2, fp
1c9d8     04 4E 05 F1 | 	add	fp, #4
1c9dc     A7 18 62 FC | 	wrlong	arg04, fp
1c9e0     08 4E 85 F1 | 	sub	fp, #8
1c9e4     A7 12 02 F6 | 	mov	arg01, fp
1c9e8     AC 10 BF FD | 	call	#_converttoint
1c9ec     FD 18 02 F6 | 	mov	arg04, result1
1c9f0     0C 4E 05 F1 | 	add	fp, #12
1c9f4     A7 18 62 FC | 	wrlong	arg04, fp
1c9f8     0C 4E 85 F1 | 	sub	fp, #12
1c9fc     B4 0E BF FD | 	call	#_pop
1ca00     FF 18 02 F6 | 	mov	arg04, result3
1ca04     A7 FA 61 FC | 	wrlong	result1, fp
1ca08     04 4E 05 F1 | 	add	fp, #4
1ca0c     A7 FC 61 FC | 	wrlong	result2, fp
1ca10     04 4E 05 F1 | 	add	fp, #4
1ca14     A7 18 62 FC | 	wrlong	arg04, fp
1ca18     08 4E 85 F1 | 	sub	fp, #8
1ca1c     A7 12 02 F6 | 	mov	arg01, fp
1ca20     74 10 BF FD | 	call	#_converttoint
1ca24     18 4E 05 F1 | 	add	fp, #24
1ca28     A7 FA 61 FC | 	wrlong	result1, fp
1ca2c     18 4E 85 F1 | 	sub	fp, #24
1ca30     04 01 90 FD | 	jmp	#LR__2263
1ca34                 | LR__2260
1ca34     1C 4E 05 F1 | 	add	fp, #28
1ca38     A7 18 02 FB | 	rdlong	arg04, fp
1ca3c     1C 4E 85 F1 | 	sub	fp, #28
1ca40     02 18 0E F2 | 	cmp	arg04, #2 wz
1ca44     A0 00 90 5D |  if_ne	jmp	#LR__2261
1ca48     68 0E BF FD | 	call	#_pop
1ca4c     FF 18 02 F6 | 	mov	arg04, result3
1ca50     A7 FA 61 FC | 	wrlong	result1, fp
1ca54     04 4E 05 F1 | 	add	fp, #4
1ca58     A7 FC 61 FC | 	wrlong	result2, fp
1ca5c     04 4E 05 F1 | 	add	fp, #4
1ca60     A7 18 62 FC | 	wrlong	arg04, fp
1ca64     08 4E 85 F1 | 	sub	fp, #8
1ca68     A7 12 02 F6 | 	mov	arg01, fp
1ca6c     28 10 BF FD | 	call	#_converttoint
1ca70     18 4E 05 F1 | 	add	fp, #24
1ca74     A7 FA 61 FC | 	wrlong	result1, fp
1ca78     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ca7c     04 4E 85 F1 | 	sub	fp, #4
1ca80     A7 FA 61 FC | 	wrlong	result1, fp
1ca84     04 4E 05 F1 | 	add	fp, #4
1ca88     A7 18 02 FB | 	rdlong	arg04, fp
1ca8c     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1ca90     08 4E 85 F1 | 	sub	fp, #8
1ca94     A7 18 62 FC | 	wrlong	arg04, fp
1ca98     08 4E 05 F1 | 	add	fp, #8
1ca9c     A7 18 02 FB | 	rdlong	arg04, fp
1caa0     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1caa4     0C 4E 85 F1 | 	sub	fp, #12
1caa8     A7 18 62 FC | 	wrlong	arg04, fp
1caac     0C 4E 85 F1 | 	sub	fp, #12
1cab0     00 0E BF FD | 	call	#_pop
1cab4     FF 18 02 F6 | 	mov	arg04, result3
1cab8     A7 FA 61 FC | 	wrlong	result1, fp
1cabc     04 4E 05 F1 | 	add	fp, #4
1cac0     A7 FC 61 FC | 	wrlong	result2, fp
1cac4     04 4E 05 F1 | 	add	fp, #4
1cac8     A7 18 62 FC | 	wrlong	arg04, fp
1cacc     08 4E 85 F1 | 	sub	fp, #8
1cad0     A7 12 02 F6 | 	mov	arg01, fp
1cad4     C0 0F BF FD | 	call	#_converttoint
1cad8     18 4E 05 F1 | 	add	fp, #24
1cadc     A7 FA 61 FC | 	wrlong	result1, fp
1cae0     18 4E 85 F1 | 	sub	fp, #24
1cae4     50 00 90 FD | 	jmp	#LR__2262
1cae8                 | LR__2261
1cae8                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1cae8     00 12 06 F6 | 	mov	arg01, #0
1caec     B4 15 B1 FD | 	call	#__system___getiolock_0625
1caf0     FD 12 02 F6 | 	mov	arg01, result1
1caf4     FC B8 B0 FD | 	call	#__system___lockmem
1caf8     C5 01 00 FF 
1cafc     9B 15 06 F6 | 	mov	arg02, ##@LR__6169
1cb00     00 12 06 F6 | 	mov	arg01, #0
1cb04     00 16 06 F6 | 	mov	arg03, #0
1cb08     E0 C5 B0 FD | 	call	#__system___basic_print_string
1cb0c     00 12 06 F6 | 	mov	arg01, #0
1cb10     90 15 B1 FD | 	call	#__system___getiolock_0625
1cb14     FD 00 68 FC | 	wrlong	#0, result1
1cb18     50 00 00 FF 
1cb1c     10 E5 05 F1 | 	add	objptr, ##41232
1cb20     F2 14 02 FB | 	rdlong	arg02, objptr
1cb24     50 00 00 FF 
1cb28     10 E5 85 F1 | 	sub	objptr, ##41232
1cb2c     27 12 06 F6 | 	mov	arg01, #39
1cb30     68 7E B0 FD | 	call	#_printerror
1cb34     28 00 90 FD | 	jmp	#LR__2264
1cb38                 | LR__2262
1cb38                 | LR__2263
1cb38     18 4E 05 F1 | 	add	fp, #24
1cb3c     A7 12 02 FB | 	rdlong	arg01, fp
1cb40     0C 4E 85 F1 | 	sub	fp, #12
1cb44     A7 14 02 FB | 	rdlong	arg02, fp
1cb48     04 4E 05 F1 | 	add	fp, #4
1cb4c     A7 16 02 FB | 	rdlong	arg03, fp
1cb50     04 4E 05 F1 | 	add	fp, #4
1cb54     A7 18 02 FB | 	rdlong	arg04, fp
1cb58     14 4E 85 F1 | 	sub	fp, #20
1cb5c     08 9C B0 FD | 	call	#_hg010b_spin2_setcolor
1cb60                 | LR__2264
1cb60     A7 F0 03 F6 | 	mov	ptra, fp
1cb64     B2 00 A0 FD | 	call	#popregs_
1cb68                 | _do_setcolor_ret
1cb68     2D 00 64 FD | 	ret
1cb6c                 | 
1cb6c                 | ' 
1cb6c                 | ' ' ------------------ setdelay
1cb6c                 | ' 
1cb6c                 | ' sub do_setdelay
1cb6c                 | _do_setdelay
1cb6c     02 4A 05 F6 | 	mov	COUNT_, #2
1cb70     A8 00 A0 FD | 	call	#pushregs_
1cb74     18 F0 07 F1 | 	add	ptra, #24
1cb78     38 0D BF FD | 	call	#_pop
1cb7c     FD 12 02 F6 | 	mov	arg01, result1
1cb80     FE 26 02 F6 | 	mov	local01, result2
1cb84     FF 28 02 F6 | 	mov	local02, result3
1cb88     A7 12 62 FC | 	wrlong	arg01, fp
1cb8c     04 4E 05 F1 | 	add	fp, #4
1cb90     A7 26 62 FC | 	wrlong	local01, fp
1cb94     04 4E 05 F1 | 	add	fp, #4
1cb98     A7 28 62 FC | 	wrlong	local02, fp
1cb9c     08 4E 85 F1 | 	sub	fp, #8
1cba0     10 0D BF FD | 	call	#_pop
1cba4     FD 28 02 F6 | 	mov	local02, result1
1cba8     0C 4E 05 F1 | 	add	fp, #12
1cbac     A7 28 62 FC | 	wrlong	local02, fp
1cbb0     04 4E 05 F1 | 	add	fp, #4
1cbb4     A7 FC 61 FC | 	wrlong	result2, fp
1cbb8     04 4E 05 F1 | 	add	fp, #4
1cbbc     A7 FE 61 FC | 	wrlong	result3, fp
1cbc0     08 4E 85 F1 | 	sub	fp, #8
1cbc4     A7 12 02 F6 | 	mov	arg01, fp
1cbc8     0C 4E 85 F1 | 	sub	fp, #12
1cbcc     C8 0E BF FD | 	call	#_converttoint
1cbd0     FD 28 02 F6 | 	mov	local02, result1
1cbd4     14 27 02 F6 | 	mov	local01, local02
1cbd8     03 26 66 F0 | 	shl	local01, #3
1cbdc     14 27 82 F1 | 	sub	local01, local02
1cbe0     02 26 66 F0 | 	shl	local01, #2
1cbe4     14 00 00 FF 
1cbe8     38 E5 05 F1 | 	add	objptr, ##10552
1cbec     F2 26 02 F1 | 	add	local01, objptr
1cbf0     A7 12 02 F6 | 	mov	arg01, fp
1cbf4     14 00 00 FF 
1cbf8     38 E5 85 F1 | 	sub	objptr, ##10552
1cbfc     98 0E BF FD | 	call	#_converttoint
1cc00     06 26 06 F1 | 	add	local01, #6
1cc04     13 FB 51 FC | 	wrword	result1, local01
1cc08     A7 F0 03 F6 | 	mov	ptra, fp
1cc0c     B2 00 A0 FD | 	call	#popregs_
1cc10                 | _do_setdelay_ret
1cc10     2D 00 64 FD | 	ret
1cc14                 | 
1cc14                 | ' 
1cc14                 | ' ' ------------------ setenv
1cc14                 | ' 
1cc14                 | ' sub do_setenv
1cc14                 | _do_setenv
1cc14     02 4A 05 F6 | 	mov	COUNT_, #2
1cc18     A8 00 A0 FD | 	call	#pushregs_
1cc1c     18 F0 07 F1 | 	add	ptra, #24
1cc20     90 0C BF FD | 	call	#_pop
1cc24     FD 12 02 F6 | 	mov	arg01, result1
1cc28     FE 26 02 F6 | 	mov	local01, result2
1cc2c     FF 28 02 F6 | 	mov	local02, result3
1cc30     A7 12 62 FC | 	wrlong	arg01, fp
1cc34     04 4E 05 F1 | 	add	fp, #4
1cc38     A7 26 62 FC | 	wrlong	local01, fp
1cc3c     04 4E 05 F1 | 	add	fp, #4
1cc40     A7 28 62 FC | 	wrlong	local02, fp
1cc44     08 4E 85 F1 | 	sub	fp, #8
1cc48     68 0C BF FD | 	call	#_pop
1cc4c     FD 28 02 F6 | 	mov	local02, result1
1cc50     0C 4E 05 F1 | 	add	fp, #12
1cc54     A7 28 62 FC | 	wrlong	local02, fp
1cc58     04 4E 05 F1 | 	add	fp, #4
1cc5c     A7 FC 61 FC | 	wrlong	result2, fp
1cc60     04 4E 05 F1 | 	add	fp, #4
1cc64     A7 FE 61 FC | 	wrlong	result3, fp
1cc68     08 4E 85 F1 | 	sub	fp, #8
1cc6c     A7 12 02 F6 | 	mov	arg01, fp
1cc70     0C 4E 85 F1 | 	sub	fp, #12
1cc74     20 0E BF FD | 	call	#_converttoint
1cc78     FD 28 02 F6 | 	mov	local02, result1
1cc7c     14 27 02 F6 | 	mov	local01, local02
1cc80     03 26 66 F0 | 	shl	local01, #3
1cc84     14 27 82 F1 | 	sub	local01, local02
1cc88     02 26 66 F0 | 	shl	local01, #2
1cc8c     14 00 00 FF 
1cc90     38 E5 05 F1 | 	add	objptr, ##10552
1cc94     F2 26 02 F1 | 	add	local01, objptr
1cc98     A7 12 02 F6 | 	mov	arg01, fp
1cc9c     14 00 00 FF 
1cca0     38 E5 85 F1 | 	sub	objptr, ##10552
1cca4     F0 0D BF FD | 	call	#_converttoint
1cca8     05 26 06 F1 | 	add	local01, #5
1ccac     13 FB 41 FC | 	wrbyte	result1, local01
1ccb0     A7 F0 03 F6 | 	mov	ptra, fp
1ccb4     B2 00 A0 FD | 	call	#popregs_
1ccb8                 | _do_setenv_ret
1ccb8     2D 00 64 FD | 	ret
1ccbc                 | 
1ccbc                 | ' 
1ccbc                 | ' ' ------------------ setlen
1ccbc                 | ' 
1ccbc                 | ' sub do_setlen
1ccbc                 | _do_setlen
1ccbc     02 4A 05 F6 | 	mov	COUNT_, #2
1ccc0     A8 00 A0 FD | 	call	#pushregs_
1ccc4     18 F0 07 F1 | 	add	ptra, #24
1ccc8     E8 0B BF FD | 	call	#_pop
1cccc     FD 12 02 F6 | 	mov	arg01, result1
1ccd0     FE 26 02 F6 | 	mov	local01, result2
1ccd4     FF 28 02 F6 | 	mov	local02, result3
1ccd8     A7 12 62 FC | 	wrlong	arg01, fp
1ccdc     04 4E 05 F1 | 	add	fp, #4
1cce0     A7 26 62 FC | 	wrlong	local01, fp
1cce4     04 4E 05 F1 | 	add	fp, #4
1cce8     A7 28 62 FC | 	wrlong	local02, fp
1ccec     08 4E 85 F1 | 	sub	fp, #8
1ccf0     C0 0B BF FD | 	call	#_pop
1ccf4     FD 28 02 F6 | 	mov	local02, result1
1ccf8     0C 4E 05 F1 | 	add	fp, #12
1ccfc     A7 28 62 FC | 	wrlong	local02, fp
1cd00     04 4E 05 F1 | 	add	fp, #4
1cd04     A7 FC 61 FC | 	wrlong	result2, fp
1cd08     04 4E 05 F1 | 	add	fp, #4
1cd0c     A7 FE 61 FC | 	wrlong	result3, fp
1cd10     08 4E 85 F1 | 	sub	fp, #8
1cd14     A7 12 02 F6 | 	mov	arg01, fp
1cd18     0C 4E 85 F1 | 	sub	fp, #12
1cd1c     78 0D BF FD | 	call	#_converttoint
1cd20     FD 28 02 F6 | 	mov	local02, result1
1cd24     14 27 02 F6 | 	mov	local01, local02
1cd28     03 26 66 F0 | 	shl	local01, #3
1cd2c     14 27 82 F1 | 	sub	local01, local02
1cd30     02 26 66 F0 | 	shl	local01, #2
1cd34     14 00 00 FF 
1cd38     38 E5 05 F1 | 	add	objptr, ##10552
1cd3c     F2 26 02 F1 | 	add	local01, objptr
1cd40     A7 12 02 F6 | 	mov	arg01, fp
1cd44     14 00 00 FF 
1cd48     38 E5 85 F1 | 	sub	objptr, ##10552
1cd4c     04 0E BF FD | 	call	#_converttofloat
1cd50     08 26 06 F1 | 	add	local01, #8
1cd54     13 FB 61 FC | 	wrlong	result1, local01
1cd58     A7 F0 03 F6 | 	mov	ptra, fp
1cd5c     B2 00 A0 FD | 	call	#popregs_
1cd60                 | _do_setlen_ret
1cd60     2D 00 64 FD | 	ret
1cd64                 | 
1cd64                 | ' 
1cd64                 | ' ' ------------------ setpan
1cd64                 | ' 
1cd64                 | ' sub do_setpan
1cd64                 | _do_setpan
1cd64     02 4A 05 F6 | 	mov	COUNT_, #2
1cd68     A8 00 A0 FD | 	call	#pushregs_
1cd6c     18 F0 07 F1 | 	add	ptra, #24
1cd70     40 0B BF FD | 	call	#_pop
1cd74     FD 12 02 F6 | 	mov	arg01, result1
1cd78     FE 26 02 F6 | 	mov	local01, result2
1cd7c     FF 28 02 F6 | 	mov	local02, result3
1cd80     A7 12 62 FC | 	wrlong	arg01, fp
1cd84     04 4E 05 F1 | 	add	fp, #4
1cd88     A7 26 62 FC | 	wrlong	local01, fp
1cd8c     04 4E 05 F1 | 	add	fp, #4
1cd90     A7 28 62 FC | 	wrlong	local02, fp
1cd94     08 4E 85 F1 | 	sub	fp, #8
1cd98     18 0B BF FD | 	call	#_pop
1cd9c     FD 28 02 F6 | 	mov	local02, result1
1cda0     0C 4E 05 F1 | 	add	fp, #12
1cda4     A7 28 62 FC | 	wrlong	local02, fp
1cda8     04 4E 05 F1 | 	add	fp, #4
1cdac     A7 FC 61 FC | 	wrlong	result2, fp
1cdb0     04 4E 05 F1 | 	add	fp, #4
1cdb4     A7 FE 61 FC | 	wrlong	result3, fp
1cdb8     08 4E 85 F1 | 	sub	fp, #8
1cdbc     A7 12 02 F6 | 	mov	arg01, fp
1cdc0     0C 4E 85 F1 | 	sub	fp, #12
1cdc4     D0 0C BF FD | 	call	#_converttoint
1cdc8     FD 28 02 F6 | 	mov	local02, result1
1cdcc     14 27 02 F6 | 	mov	local01, local02
1cdd0     03 26 66 F0 | 	shl	local01, #3
1cdd4     14 27 82 F1 | 	sub	local01, local02
1cdd8     02 26 66 F0 | 	shl	local01, #2
1cddc     14 00 00 FF 
1cde0     38 E5 05 F1 | 	add	objptr, ##10552
1cde4     F2 26 02 F1 | 	add	local01, objptr
1cde8     A7 12 02 F6 | 	mov	arg01, fp
1cdec     14 00 00 FF 
1cdf0     38 E5 85 F1 | 	sub	objptr, ##10552
1cdf4     5C 0D BF FD | 	call	#_converttofloat
1cdf8     10 26 06 F1 | 	add	local01, #16
1cdfc     13 FB 61 FC | 	wrlong	result1, local01
1ce00     A7 F0 03 F6 | 	mov	ptra, fp
1ce04     B2 00 A0 FD | 	call	#popregs_
1ce08                 | _do_setpan_ret
1ce08     2D 00 64 FD | 	ret
1ce0c                 | 
1ce0c                 | ' 
1ce0c                 | ' ' ------------------ setsustain
1ce0c                 | ' 
1ce0c                 | ' sub do_setsustain
1ce0c                 | _do_setsustain
1ce0c     02 4A 05 F6 | 	mov	COUNT_, #2
1ce10     A8 00 A0 FD | 	call	#pushregs_
1ce14     18 F0 07 F1 | 	add	ptra, #24
1ce18     98 0A BF FD | 	call	#_pop
1ce1c     FD 12 02 F6 | 	mov	arg01, result1
1ce20     FE 26 02 F6 | 	mov	local01, result2
1ce24     FF 28 02 F6 | 	mov	local02, result3
1ce28     A7 12 62 FC | 	wrlong	arg01, fp
1ce2c     04 4E 05 F1 | 	add	fp, #4
1ce30     A7 26 62 FC | 	wrlong	local01, fp
1ce34     04 4E 05 F1 | 	add	fp, #4
1ce38     A7 28 62 FC | 	wrlong	local02, fp
1ce3c     08 4E 85 F1 | 	sub	fp, #8
1ce40     70 0A BF FD | 	call	#_pop
1ce44     FD 28 02 F6 | 	mov	local02, result1
1ce48     0C 4E 05 F1 | 	add	fp, #12
1ce4c     A7 28 62 FC | 	wrlong	local02, fp
1ce50     04 4E 05 F1 | 	add	fp, #4
1ce54     A7 FC 61 FC | 	wrlong	result2, fp
1ce58     04 4E 05 F1 | 	add	fp, #4
1ce5c     A7 FE 61 FC | 	wrlong	result3, fp
1ce60     08 4E 85 F1 | 	sub	fp, #8
1ce64     A7 12 02 F6 | 	mov	arg01, fp
1ce68     0C 4E 85 F1 | 	sub	fp, #12
1ce6c     28 0C BF FD | 	call	#_converttoint
1ce70     FD 28 02 F6 | 	mov	local02, result1
1ce74     14 27 02 F6 | 	mov	local01, local02
1ce78     03 26 66 F0 | 	shl	local01, #3
1ce7c     14 27 82 F1 | 	sub	local01, local02
1ce80     02 26 66 F0 | 	shl	local01, #2
1ce84     14 00 00 FF 
1ce88     38 E5 05 F1 | 	add	objptr, ##10552
1ce8c     F2 26 02 F1 | 	add	local01, objptr
1ce90     A7 12 02 F6 | 	mov	arg01, fp
1ce94     14 00 00 FF 
1ce98     38 E5 85 F1 | 	sub	objptr, ##10552
1ce9c     F8 0B BF FD | 	call	#_converttoint
1cea0     14 26 06 F1 | 	add	local01, #20
1cea4     13 FB 51 FC | 	wrword	result1, local01
1cea8     A7 F0 03 F6 | 	mov	ptra, fp
1ceac     B2 00 A0 FD | 	call	#popregs_
1ceb0                 | _do_setsustain_ret
1ceb0     2D 00 64 FD | 	ret
1ceb4                 | 
1ceb4                 | ' 
1ceb4                 | ' ' ------------------ setvol
1ceb4                 | ' 
1ceb4                 | ' sub do_setvol
1ceb4                 | _do_setvol
1ceb4     02 4A 05 F6 | 	mov	COUNT_, #2
1ceb8     A8 00 A0 FD | 	call	#pushregs_
1cebc     18 F0 07 F1 | 	add	ptra, #24
1cec0     F0 09 BF FD | 	call	#_pop
1cec4     FD 12 02 F6 | 	mov	arg01, result1
1cec8     FE 26 02 F6 | 	mov	local01, result2
1cecc     FF 28 02 F6 | 	mov	local02, result3
1ced0     A7 12 62 FC | 	wrlong	arg01, fp
1ced4     04 4E 05 F1 | 	add	fp, #4
1ced8     A7 26 62 FC | 	wrlong	local01, fp
1cedc     04 4E 05 F1 | 	add	fp, #4
1cee0     A7 28 62 FC | 	wrlong	local02, fp
1cee4     08 4E 85 F1 | 	sub	fp, #8
1cee8     C8 09 BF FD | 	call	#_pop
1ceec     FD 28 02 F6 | 	mov	local02, result1
1cef0     0C 4E 05 F1 | 	add	fp, #12
1cef4     A7 28 62 FC | 	wrlong	local02, fp
1cef8     04 4E 05 F1 | 	add	fp, #4
1cefc     A7 FC 61 FC | 	wrlong	result2, fp
1cf00     04 4E 05 F1 | 	add	fp, #4
1cf04     A7 FE 61 FC | 	wrlong	result3, fp
1cf08     08 4E 85 F1 | 	sub	fp, #8
1cf0c     A7 12 02 F6 | 	mov	arg01, fp
1cf10     0C 4E 85 F1 | 	sub	fp, #12
1cf14     80 0B BF FD | 	call	#_converttoint
1cf18     FD 28 02 F6 | 	mov	local02, result1
1cf1c     14 27 02 F6 | 	mov	local01, local02
1cf20     03 26 66 F0 | 	shl	local01, #3
1cf24     14 27 82 F1 | 	sub	local01, local02
1cf28     02 26 66 F0 | 	shl	local01, #2
1cf2c     14 00 00 FF 
1cf30     38 E5 05 F1 | 	add	objptr, ##10552
1cf34     F2 26 02 F1 | 	add	local01, objptr
1cf38     A7 12 02 F6 | 	mov	arg01, fp
1cf3c     14 00 00 FF 
1cf40     38 E5 85 F1 | 	sub	objptr, ##10552
1cf44     0C 0C BF FD | 	call	#_converttofloat
1cf48     0C 26 06 F1 | 	add	local01, #12
1cf4c     13 FB 61 FC | 	wrlong	result1, local01
1cf50     A7 F0 03 F6 | 	mov	ptra, fp
1cf54     B2 00 A0 FD | 	call	#popregs_
1cf58                 | _do_setvol_ret
1cf58     2D 00 64 FD | 	ret
1cf5c                 | 
1cf5c                 | ' 
1cf5c                 | ' ' ------------------ setwave
1cf5c                 | ' 
1cf5c                 | ' sub do_setwave
1cf5c                 | _do_setwave
1cf5c     02 4A 05 F6 | 	mov	COUNT_, #2
1cf60     A8 00 A0 FD | 	call	#pushregs_
1cf64     18 F0 07 F1 | 	add	ptra, #24
1cf68     48 09 BF FD | 	call	#_pop
1cf6c     FD 12 02 F6 | 	mov	arg01, result1
1cf70     FE 26 02 F6 | 	mov	local01, result2
1cf74     FF 28 02 F6 | 	mov	local02, result3
1cf78     A7 12 62 FC | 	wrlong	arg01, fp
1cf7c     04 4E 05 F1 | 	add	fp, #4
1cf80     A7 26 62 FC | 	wrlong	local01, fp
1cf84     04 4E 05 F1 | 	add	fp, #4
1cf88     A7 28 62 FC | 	wrlong	local02, fp
1cf8c     08 4E 85 F1 | 	sub	fp, #8
1cf90     20 09 BF FD | 	call	#_pop
1cf94     FD 28 02 F6 | 	mov	local02, result1
1cf98     0C 4E 05 F1 | 	add	fp, #12
1cf9c     A7 28 62 FC | 	wrlong	local02, fp
1cfa0     04 4E 05 F1 | 	add	fp, #4
1cfa4     A7 FC 61 FC | 	wrlong	result2, fp
1cfa8     04 4E 05 F1 | 	add	fp, #4
1cfac     A7 FE 61 FC | 	wrlong	result3, fp
1cfb0     08 4E 85 F1 | 	sub	fp, #8
1cfb4     A7 12 02 F6 | 	mov	arg01, fp
1cfb8     0C 4E 85 F1 | 	sub	fp, #12
1cfbc     D8 0A BF FD | 	call	#_converttoint
1cfc0     FD 28 02 F6 | 	mov	local02, result1
1cfc4     14 27 02 F6 | 	mov	local01, local02
1cfc8     03 26 66 F0 | 	shl	local01, #3
1cfcc     14 27 82 F1 | 	sub	local01, local02
1cfd0     02 26 66 F0 | 	shl	local01, #2
1cfd4     14 00 00 FF 
1cfd8     38 E5 05 F1 | 	add	objptr, ##10552
1cfdc     F2 26 02 F1 | 	add	local01, objptr
1cfe0     A7 12 02 F6 | 	mov	arg01, fp
1cfe4     14 00 00 FF 
1cfe8     38 E5 85 F1 | 	sub	objptr, ##10552
1cfec     A8 0A BF FD | 	call	#_converttoint
1cff0     04 26 06 F1 | 	add	local01, #4
1cff4     13 FB 41 FC | 	wrbyte	result1, local01
1cff8     A7 F0 03 F6 | 	mov	ptra, fp
1cffc     B2 00 A0 FD | 	call	#popregs_
1d000                 | _do_setwave_ret
1d000     2D 00 64 FD | 	ret
1d004                 | 
1d004                 | ' 
1d004                 | ' ' ------------------ shutup
1d004                 | ' 
1d004                 | ' sub do_shutup
1d004                 | _do_shutup
1d004     03 4A 05 F6 | 	mov	COUNT_, #3
1d008     A8 00 A0 FD | 	call	#pushregs_
1d00c     18 F0 07 F1 | 	add	ptra, #24
1d010     4A 00 00 FF 
1d014     A0 E4 05 F1 | 	add	objptr, ##38048
1d018     F2 26 02 FB | 	rdlong	local01, objptr
1d01c     13 29 02 F6 | 	mov	local02, local01
1d020     01 28 66 F0 | 	shl	local02, #1
1d024     13 29 02 F1 | 	add	local02, local01
1d028     02 28 66 F0 | 	shl	local02, #2
1d02c     03 00 00 FF 
1d030     04 E4 85 F1 | 	sub	objptr, ##1540
1d034     F2 28 02 F1 | 	add	local02, objptr
1d038     14 2B 0A FB | 	rdlong	local03, local02 wz
1d03c     14 4E 05 F1 | 	add	fp, #20
1d040     A7 2A 62 FC | 	wrlong	local03, fp
1d044                 | ' 
1d044                 | ' numpar=compiledline(lineptr_e).result.uresult
1d044                 | ' if numpar=0 then
1d044     14 4E 85 F1 | 	sub	fp, #20
1d048     47 00 00 FF 
1d04c     9C E4 85 F1 | 	sub	objptr, ##36508
1d050     50 00 90 5D |  if_ne	jmp	#LR__2272
1d054                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1d054     10 4E 05 F1 | 	add	fp, #16
1d058     A7 00 68 FC | 	wrlong	#0, fp
1d05c     37 00 00 FF 
1d060     30 E4 05 F1 | 	add	objptr, ##28208
1d064     97 16 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1d068                 | LR__2270
1d068     F2 12 02 FB | 	rdlong	arg01, objptr
1d06c     A7 2A 02 FB | 	rdlong	local03, fp
1d070     06 2A 66 F0 | 	shl	local03, #6
1d074     15 13 02 F1 | 	add	arg01, local03
1d078     14 12 06 F1 | 	add	arg01, #20
1d07c     09 01 58 FC | 	wrword	#0, arg01
1d080     A7 2A 02 FB | 	rdlong	local03, fp
1d084     01 2A 06 F1 | 	add	local03, #1
1d088     A7 2A 62 FC | 	wrlong	local03, fp
1d08c     08 2A 56 F2 | 	cmps	local03, #8 wc
1d090     D4 FF 9F CD |  if_b	jmp	#LR__2270
1d094                 | LR__2271
1d094     37 00 00 FF 
1d098     30 E4 85 F1 | 	sub	objptr, ##28208
1d09c     10 4E 85 F1 | 	sub	fp, #16
1d0a0     64 00 90 FD | 	jmp	#LR__2273
1d0a4                 | LR__2272
1d0a4     0C 08 BF FD | 	call	#_pop
1d0a8     FF 26 02 F6 | 	mov	local01, result3
1d0ac     A7 FA 61 FC | 	wrlong	result1, fp
1d0b0     04 4E 05 F1 | 	add	fp, #4
1d0b4     A7 FC 61 FC | 	wrlong	result2, fp
1d0b8     04 4E 05 F1 | 	add	fp, #4
1d0bc     A7 26 62 FC | 	wrlong	local01, fp
1d0c0     08 4E 85 F1 | 	sub	fp, #8
1d0c4     A7 12 02 F6 | 	mov	arg01, fp
1d0c8     CC 09 BF FD | 	call	#_converttoint
1d0cc     FD 2A 52 F6 | 	abs	local03, result1 wc
1d0d0     07 2A 06 F5 | 	and	local03, #7
1d0d4     15 29 82 F6 | 	negc	local02, local03
1d0d8     0C 4E 05 F1 | 	add	fp, #12
1d0dc     A7 28 62 FC | 	wrlong	local02, fp
1d0e0     37 00 00 FF 
1d0e4     30 E4 05 F1 | 	add	objptr, ##28208
1d0e8     F2 12 02 FB | 	rdlong	arg01, objptr
1d0ec     37 00 00 FF 
1d0f0     30 E4 85 F1 | 	sub	objptr, ##28208
1d0f4     0C 4E 85 F1 | 	sub	fp, #12
1d0f8     06 28 66 F0 | 	shl	local02, #6
1d0fc     14 13 02 F1 | 	add	arg01, local02
1d100     14 12 06 F1 | 	add	arg01, #20
1d104     09 01 58 FC | 	wrword	#0, arg01
1d108                 | LR__2273
1d108     A7 F0 03 F6 | 	mov	ptra, fp
1d10c     B2 00 A0 FD | 	call	#popregs_
1d110                 | _do_shutup_ret
1d110     2D 00 64 FD | 	ret
1d114                 | 
1d114                 | ' 
1d114                 | ' ' ------------------ sin
1d114                 | ' 
1d114                 | ' sub do_sin
1d114                 | _do_sin
1d114     01 4A 05 F6 | 	mov	COUNT_, #1
1d118     A8 00 A0 FD | 	call	#pushregs_
1d11c     10 F0 07 F1 | 	add	ptra, #16
1d120     4A 00 00 FF 
1d124     A0 E4 05 F1 | 	add	objptr, ##38048
1d128     F2 26 02 FB | 	rdlong	local01, objptr
1d12c     13 17 02 F6 | 	mov	arg03, local01
1d130     01 16 66 F0 | 	shl	arg03, #1
1d134     13 17 02 F1 | 	add	arg03, local01
1d138     02 16 66 F0 | 	shl	arg03, #2
1d13c     03 00 00 FF 
1d140     04 E4 85 F1 | 	sub	objptr, ##1540
1d144     F2 16 02 F1 | 	add	arg03, objptr
1d148     0B 17 02 FB | 	rdlong	arg03, arg03
1d14c     0C 4E 05 F1 | 	add	fp, #12
1d150     A7 16 62 FC | 	wrlong	arg03, fp
1d154                 | ' 
1d154                 | ' numpar=compiledline(lineptr_e).result.uresult
1d154                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1d154     0C 4E 85 F1 | 	sub	fp, #12
1d158     02 16 16 F2 | 	cmp	arg03, #2 wc
1d15c     47 00 00 FF 
1d160     9C E4 85 F1 | 	sub	objptr, ##36508
1d164     0C 4E 05 C1 |  if_b	add	fp, #12
1d168     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d16c     0C 4E 85 C1 |  if_b	sub	fp, #12
1d170     40 00 90 4D |  if_c_and_nz	jmp	#LR__2280
1d174     00 12 06 F6 | 	mov	arg01, #0
1d178     28 0F B1 FD | 	call	#__system___getiolock_0625
1d17c     FD 12 02 F6 | 	mov	arg01, result1
1d180     70 B2 B0 FD | 	call	#__system___lockmem
1d184     C5 01 00 FF 
1d188     A6 15 06 F6 | 	mov	arg02, ##@LR__6170
1d18c     00 12 06 F6 | 	mov	arg01, #0
1d190     00 16 06 F6 | 	mov	arg03, #0
1d194     54 BF B0 FD | 	call	#__system___basic_print_string
1d198     00 12 06 F6 | 	mov	arg01, #0
1d19c     04 0F B1 FD | 	call	#__system___getiolock_0625
1d1a0     FD 00 68 FC | 	wrlong	#0, result1
1d1a4     27 12 06 F6 | 	mov	arg01, #39
1d1a8     00 14 06 F6 | 	mov	arg02, #0
1d1ac     EC 77 B0 FD | 	call	#_printerror
1d1b0     64 00 90 FD | 	jmp	#LR__2281
1d1b4                 | LR__2280
1d1b4     FC 06 BF FD | 	call	#_pop
1d1b8     A7 FA 61 FC | 	wrlong	result1, fp
1d1bc     04 4E 05 F1 | 	add	fp, #4
1d1c0     A7 FC 61 FC | 	wrlong	result2, fp
1d1c4     04 4E 05 F1 | 	add	fp, #4
1d1c8     A7 FE 61 FC | 	wrlong	result3, fp
1d1cc     08 4E 85 F1 | 	sub	fp, #8
1d1d0     52 00 00 FF 
1d1d4     00 E5 05 F1 | 	add	objptr, ##42240
1d1d8     F2 26 02 FB | 	rdlong	local01, objptr
1d1dc     52 00 00 FF 
1d1e0     00 E5 85 F1 | 	sub	objptr, ##42240
1d1e4     A7 12 02 F6 | 	mov	arg01, fp
1d1e8     68 09 BF FD | 	call	#_converttofloat
1d1ec     FD 14 02 F6 | 	mov	arg02, result1
1d1f0     13 13 02 F6 | 	mov	arg01, local01
1d1f4     78 E0 B0 FD | 	call	#__system___float_mul
1d1f8     FD 12 02 F6 | 	mov	arg01, result1
1d1fc     D4 E9 B0 FD | 	call	#__system____builtin_sinf
1d200     A7 FA 61 FC | 	wrlong	result1, fp
1d204     08 4E 05 F1 | 	add	fp, #8
1d208     A7 3C 68 FC | 	wrlong	#30, fp
1d20c     08 4E 85 F1 | 	sub	fp, #8
1d210     A7 12 02 F6 | 	mov	arg01, fp
1d214     34 07 BF FD | 	call	#_push
1d218                 | LR__2281
1d218     A7 F0 03 F6 | 	mov	ptra, fp
1d21c     B2 00 A0 FD | 	call	#popregs_
1d220                 | _do_sin_ret
1d220     2D 00 64 FD | 	ret
1d224                 | 
1d224                 | ' 
1d224                 | ' ' ------------------ skip
1d224                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1d224                 | ' 
1d224                 | ' sub do_skip
1d224                 | _do_skip
1d224     4A 00 00 FF 
1d228     A0 E4 05 F1 | 	add	objptr, ##38048
1d22c     F2 00 02 FB | 	rdlong	_var01, objptr
1d230     00 03 02 F6 | 	mov	_var02, _var01
1d234     01 02 66 F0 | 	shl	_var02, #1
1d238     00 03 02 F1 | 	add	_var02, _var01
1d23c     02 02 66 F0 | 	shl	_var02, #2
1d240     03 00 00 FF 
1d244     04 E4 85 F1 | 	sub	objptr, ##1540
1d248     F2 02 02 F1 | 	add	_var02, objptr
1d24c     01 03 02 FB | 	rdlong	_var02, _var02
1d250     01 02 86 F1 | 	sub	_var02, #1
1d254     03 00 00 FF 
1d258     04 E4 05 F1 | 	add	objptr, ##1540
1d25c     F2 02 62 FC | 	wrlong	_var02, objptr
1d260     4A 00 00 FF 
1d264     A0 E4 85 F1 | 	sub	objptr, ##38048
1d268                 | _do_skip_ret
1d268     2D 00 64 FD | 	ret
1d26c                 | 
1d26c                 | ' 
1d26c                 | ' ' ------------------ sprite
1d26c                 | ' 
1d26c                 | ' sub do_sprite
1d26c                 | _do_sprite
1d26c     00 4A 05 F6 | 	mov	COUNT_, #0
1d270     A8 00 A0 FD | 	call	#pushregs_
1d274     30 F0 07 F1 | 	add	ptra, #48
1d278     38 06 BF FD | 	call	#_pop
1d27c     FD 16 02 F6 | 	mov	arg03, result1
1d280     FE 14 02 F6 | 	mov	arg02, result2
1d284     FF 12 02 F6 | 	mov	arg01, result3
1d288     18 4E 05 F1 | 	add	fp, #24
1d28c     A7 16 62 FC | 	wrlong	arg03, fp
1d290     04 4E 05 F1 | 	add	fp, #4
1d294     A7 14 62 FC | 	wrlong	arg02, fp
1d298     04 4E 05 F1 | 	add	fp, #4
1d29c     A7 12 62 FC | 	wrlong	arg01, fp
1d2a0     20 4E 85 F1 | 	sub	fp, #32
1d2a4     0C 06 BF FD | 	call	#_pop
1d2a8     FD 16 02 F6 | 	mov	arg03, result1
1d2ac     FE 14 02 F6 | 	mov	arg02, result2
1d2b0     FF 12 02 F6 | 	mov	arg01, result3
1d2b4     0C 4E 05 F1 | 	add	fp, #12
1d2b8     A7 16 62 FC | 	wrlong	arg03, fp
1d2bc     04 4E 05 F1 | 	add	fp, #4
1d2c0     A7 14 62 FC | 	wrlong	arg02, fp
1d2c4     04 4E 05 F1 | 	add	fp, #4
1d2c8     A7 12 62 FC | 	wrlong	arg01, fp
1d2cc     14 4E 85 F1 | 	sub	fp, #20
1d2d0     E0 05 BF FD | 	call	#_pop
1d2d4     FF 16 02 F6 | 	mov	arg03, result3
1d2d8     A7 FA 61 FC | 	wrlong	result1, fp
1d2dc     04 4E 05 F1 | 	add	fp, #4
1d2e0     A7 FC 61 FC | 	wrlong	result2, fp
1d2e4     04 4E 05 F1 | 	add	fp, #4
1d2e8     A7 16 62 FC | 	wrlong	arg03, fp
1d2ec     08 4E 85 F1 | 	sub	fp, #8
1d2f0     A7 12 02 F6 | 	mov	arg01, fp
1d2f4     A0 07 BF FD | 	call	#_converttoint
1d2f8     24 4E 05 F1 | 	add	fp, #36
1d2fc     A7 FA 61 FC | 	wrlong	result1, fp
1d300     18 4E 85 F1 | 	sub	fp, #24
1d304     A7 12 02 F6 | 	mov	arg01, fp
1d308     0C 4E 85 F1 | 	sub	fp, #12
1d30c     88 07 BF FD | 	call	#_converttoint
1d310     28 4E 05 F1 | 	add	fp, #40
1d314     A7 FA 61 FC | 	wrlong	result1, fp
1d318     10 4E 85 F1 | 	sub	fp, #16
1d31c     A7 12 02 F6 | 	mov	arg01, fp
1d320     18 4E 85 F1 | 	sub	fp, #24
1d324     70 07 BF FD | 	call	#_converttoint
1d328     2C 4E 05 F1 | 	add	fp, #44
1d32c     A7 FA 61 FC | 	wrlong	result1, fp
1d330     08 4E 85 F1 | 	sub	fp, #8
1d334     A7 12 02 FB | 	rdlong	arg01, fp
1d338     04 4E 05 F1 | 	add	fp, #4
1d33c     A7 14 02 FB | 	rdlong	arg02, fp
1d340     FD 16 02 F6 | 	mov	arg03, result1
1d344     28 4E 85 F1 | 	sub	fp, #40
1d348     50 86 B0 FD | 	call	#_hg010b_spin2_setspritepos
1d34c     A7 F0 03 F6 | 	mov	ptra, fp
1d350     B2 00 A0 FD | 	call	#popregs_
1d354                 | _do_sprite_ret
1d354     2D 00 64 FD | 	ret
1d358                 | 
1d358                 | ' 
1d358                 | ' ' ------------------ sqr
1d358                 | ' 
1d358                 | ' sub do_sqr
1d358                 | _do_sqr
1d358     01 4A 05 F6 | 	mov	COUNT_, #1
1d35c     A8 00 A0 FD | 	call	#pushregs_
1d360     10 F0 07 F1 | 	add	ptra, #16
1d364     4A 00 00 FF 
1d368     A0 E4 05 F1 | 	add	objptr, ##38048
1d36c     F2 26 02 FB | 	rdlong	local01, objptr
1d370     13 17 02 F6 | 	mov	arg03, local01
1d374     01 16 66 F0 | 	shl	arg03, #1
1d378     13 17 02 F1 | 	add	arg03, local01
1d37c     02 16 66 F0 | 	shl	arg03, #2
1d380     03 00 00 FF 
1d384     04 E4 85 F1 | 	sub	objptr, ##1540
1d388     F2 16 02 F1 | 	add	arg03, objptr
1d38c     0B 17 02 FB | 	rdlong	arg03, arg03
1d390     0C 4E 05 F1 | 	add	fp, #12
1d394     A7 16 62 FC | 	wrlong	arg03, fp
1d398                 | ' 
1d398                 | ' numpar=compiledline(lineptr_e).result.uresult
1d398                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1d398     0C 4E 85 F1 | 	sub	fp, #12
1d39c     02 16 16 F2 | 	cmp	arg03, #2 wc
1d3a0     47 00 00 FF 
1d3a4     9C E4 85 F1 | 	sub	objptr, ##36508
1d3a8     0C 4E 05 C1 |  if_b	add	fp, #12
1d3ac     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d3b0     0C 4E 85 C1 |  if_b	sub	fp, #12
1d3b4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2290
1d3b8     00 12 06 F6 | 	mov	arg01, #0
1d3bc     E4 0C B1 FD | 	call	#__system___getiolock_0625
1d3c0     FD 12 02 F6 | 	mov	arg01, result1
1d3c4     2C B0 B0 FD | 	call	#__system___lockmem
1d3c8     C5 01 00 FF 
1d3cc     AC 15 06 F6 | 	mov	arg02, ##@LR__6171
1d3d0     00 12 06 F6 | 	mov	arg01, #0
1d3d4     00 16 06 F6 | 	mov	arg03, #0
1d3d8     10 BD B0 FD | 	call	#__system___basic_print_string
1d3dc     00 12 06 F6 | 	mov	arg01, #0
1d3e0     C0 0C B1 FD | 	call	#__system___getiolock_0625
1d3e4     FD 00 68 FC | 	wrlong	#0, result1
1d3e8     27 12 06 F6 | 	mov	arg01, #39
1d3ec     00 14 06 F6 | 	mov	arg02, #0
1d3f0     A8 75 B0 FD | 	call	#_printerror
1d3f4     48 00 90 FD | 	jmp	#LR__2291
1d3f8                 | LR__2290
1d3f8     B8 04 BF FD | 	call	#_pop
1d3fc     FF 26 02 F6 | 	mov	local01, result3
1d400     A7 FA 61 FC | 	wrlong	result1, fp
1d404     04 4E 05 F1 | 	add	fp, #4
1d408     A7 FC 61 FC | 	wrlong	result2, fp
1d40c     04 4E 05 F1 | 	add	fp, #4
1d410     A7 26 62 FC | 	wrlong	local01, fp
1d414     08 4E 85 F1 | 	sub	fp, #8
1d418     A7 12 02 F6 | 	mov	arg01, fp
1d41c     34 07 BF FD | 	call	#_converttofloat
1d420     FD 12 02 F6 | 	mov	arg01, result1
1d424     70 DD B0 FD | 	call	#__system___float_sqrt
1d428     A7 FA 61 FC | 	wrlong	result1, fp
1d42c     08 4E 05 F1 | 	add	fp, #8
1d430     A7 3C 68 FC | 	wrlong	#30, fp
1d434     08 4E 85 F1 | 	sub	fp, #8
1d438     A7 12 02 F6 | 	mov	arg01, fp
1d43c     0C 05 BF FD | 	call	#_push
1d440                 | LR__2291
1d440     A7 F0 03 F6 | 	mov	ptra, fp
1d444     B2 00 A0 FD | 	call	#popregs_
1d448                 | _do_sqr_ret
1d448     2D 00 64 FD | 	ret
1d44c                 | 
1d44c                 | ' 
1d44c                 | ' ' ------------------ stick
1d44c                 | ' 
1d44c                 | ' sub do_stick
1d44c                 | _do_stick
1d44c     01 4A 05 F6 | 	mov	COUNT_, #1
1d450     A8 00 A0 FD | 	call	#pushregs_
1d454     10 F0 07 F1 | 	add	ptra, #16
1d458     4A 00 00 FF 
1d45c     A0 E4 05 F1 | 	add	objptr, ##38048
1d460     F2 26 02 FB | 	rdlong	local01, objptr
1d464     13 17 02 F6 | 	mov	arg03, local01
1d468     01 16 66 F0 | 	shl	arg03, #1
1d46c     13 17 02 F1 | 	add	arg03, local01
1d470     02 16 66 F0 | 	shl	arg03, #2
1d474     03 00 00 FF 
1d478     04 E4 85 F1 | 	sub	objptr, ##1540
1d47c     F2 16 02 F1 | 	add	arg03, objptr
1d480     0B 17 02 FB | 	rdlong	arg03, arg03
1d484     0C 4E 05 F1 | 	add	fp, #12
1d488     A7 16 62 FC | 	wrlong	arg03, fp
1d48c                 | ' 
1d48c                 | ' numpar=compiledline(lineptr_e).result.uresult
1d48c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1d48c     0C 4E 85 F1 | 	sub	fp, #12
1d490     02 16 16 F2 | 	cmp	arg03, #2 wc
1d494     47 00 00 FF 
1d498     9C E4 85 F1 | 	sub	objptr, ##36508
1d49c     40 00 90 CD |  if_b	jmp	#LR__2300
1d4a0     00 12 06 F6 | 	mov	arg01, #0
1d4a4     FC 0B B1 FD | 	call	#__system___getiolock_0625
1d4a8     FD 12 02 F6 | 	mov	arg01, result1
1d4ac     44 AF B0 FD | 	call	#__system___lockmem
1d4b0     C5 01 00 FF 
1d4b4     B2 15 06 F6 | 	mov	arg02, ##@LR__6172
1d4b8     00 12 06 F6 | 	mov	arg01, #0
1d4bc     00 16 06 F6 | 	mov	arg03, #0
1d4c0     28 BC B0 FD | 	call	#__system___basic_print_string
1d4c4     00 12 06 F6 | 	mov	arg01, #0
1d4c8     D8 0B B1 FD | 	call	#__system___getiolock_0625
1d4cc     FD 00 68 FC | 	wrlong	#0, result1
1d4d0     27 12 06 F6 | 	mov	arg01, #39
1d4d4     00 14 06 F6 | 	mov	arg02, #0
1d4d8     C0 74 B0 FD | 	call	#_printerror
1d4dc     F0 00 90 FD | 	jmp	#LR__2304
1d4e0                 | LR__2300
1d4e0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1d4e0     0C 4E 05 F1 | 	add	fp, #12
1d4e4     A7 FE 09 FB | 	rdlong	result3, fp wz
1d4e8     0C 4E 85 F1 | 	sub	fp, #12
1d4ec     30 00 90 5D |  if_ne	jmp	#LR__2301
1d4f0     52 00 00 FF 
1d4f4     74 E4 05 F1 | 	add	objptr, ##42100
1d4f8     F2 26 02 FB | 	rdlong	local01, objptr
1d4fc     52 00 00 FF 
1d500     74 E4 85 F1 | 	sub	objptr, ##42100
1d504     A7 26 62 FC | 	wrlong	local01, fp
1d508     08 4E 05 F1 | 	add	fp, #8
1d50c     A7 3A 68 FC | 	wrlong	#29, fp
1d510     08 4E 85 F1 | 	sub	fp, #8
1d514     A7 12 02 F6 | 	mov	arg01, fp
1d518     30 04 BF FD | 	call	#_push
1d51c     B0 00 90 FD | 	jmp	#LR__2304
1d520                 | LR__2301
1d520     90 03 BF FD | 	call	#_pop
1d524     A7 FA 61 FC | 	wrlong	result1, fp
1d528     04 4E 05 F1 | 	add	fp, #4
1d52c     A7 FC 61 FC | 	wrlong	result2, fp
1d530     04 4E 05 F1 | 	add	fp, #4
1d534     A7 FE 61 FC | 	wrlong	result3, fp
1d538                 | ' t1=pop()
1d538                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d538     08 4E 85 F1 | 	sub	fp, #8
1d53c     1C FE 0D F2 | 	cmp	result3, #28 wz
1d540     08 4E 05 51 |  if_ne	add	fp, #8
1d544     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d548     08 4E 85 51 |  if_ne	sub	fp, #8
1d54c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d550     70 00 90 5D |  if_ne	jmp	#LR__2303
1d554     A7 26 02 FB | 	rdlong	local01, fp
1d558     52 00 00 FF 
1d55c     60 E5 05 F1 | 	add	objptr, ##42336
1d560     F2 26 62 FC | 	wrlong	local01, objptr
1d564                 | '   q=t1.result.uresult
1d564                 | '   if q<7 then 
1d564     52 00 00 FF 
1d568     60 E5 85 F1 | 	sub	objptr, ##42336
1d56c     07 26 56 F2 | 	cmps	local01, #7 wc
1d570     40 00 90 3D |  if_ae	jmp	#LR__2302
1d574     52 00 00 FF 
1d578     60 E5 05 F1 | 	add	objptr, ##42336
1d57c     F2 26 02 FB | 	rdlong	local01, objptr
1d580     02 26 66 F0 | 	shl	local01, #2
1d584     EC E4 85 F1 | 	sub	objptr, #236
1d588     F2 26 02 F1 | 	add	local01, objptr
1d58c     13 27 02 FB | 	rdlong	local01, local01
1d590     A7 26 62 FC | 	wrlong	local01, fp
1d594     08 4E 05 F1 | 	add	fp, #8
1d598     A7 3A 68 FC | 	wrlong	#29, fp
1d59c     08 4E 85 F1 | 	sub	fp, #8
1d5a0     A7 12 02 F6 | 	mov	arg01, fp
1d5a4     52 00 00 FF 
1d5a8     74 E4 85 F1 | 	sub	objptr, ##42100
1d5ac     9C 03 BF FD | 	call	#_push
1d5b0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1d5b0     1C 00 90 FD | 	jmp	#LR__2304
1d5b4                 | LR__2302
1d5b4     29 12 06 F6 | 	mov	arg01, #41
1d5b8     00 14 06 F6 | 	mov	arg02, #0
1d5bc     DC 73 B0 FD | 	call	#_printerror
1d5c0                 | '      printerror(41) : return
1d5c0     0C 00 90 FD | 	jmp	#LR__2304
1d5c4                 | LR__2303
1d5c4     29 12 06 F6 | 	mov	arg01, #41
1d5c8     00 14 06 F6 | 	mov	arg02, #0
1d5cc     CC 73 B0 FD | 	call	#_printerror
1d5d0                 | LR__2304
1d5d0     A7 F0 03 F6 | 	mov	ptra, fp
1d5d4     B2 00 A0 FD | 	call	#popregs_
1d5d8                 | _do_stick_ret
1d5d8     2D 00 64 FD | 	ret
1d5dc                 | 
1d5dc                 | ' 
1d5dc                 | ' 
1d5dc                 | ' sub do_str
1d5dc                 | _do_str
1d5dc     02 4A 05 F6 | 	mov	COUNT_, #2
1d5e0     A8 00 A0 FD | 	call	#pushregs_
1d5e4     14 F0 07 F1 | 	add	ptra, #20
1d5e8     4A 00 00 FF 
1d5ec     A0 E4 05 F1 | 	add	objptr, ##38048
1d5f0     F2 16 02 FB | 	rdlong	arg03, objptr
1d5f4     0B 15 02 F6 | 	mov	arg02, arg03
1d5f8     01 14 66 F0 | 	shl	arg02, #1
1d5fc     0B 15 02 F1 | 	add	arg02, arg03
1d600     02 14 66 F0 | 	shl	arg02, #2
1d604     03 00 00 FF 
1d608     04 E4 85 F1 | 	sub	objptr, ##1540
1d60c     F2 14 02 F1 | 	add	arg02, objptr
1d610     0A 17 02 FB | 	rdlong	arg03, arg02
1d614     0C 4E 05 F1 | 	add	fp, #12
1d618     A7 16 62 FC | 	wrlong	arg03, fp
1d61c                 | ' 
1d61c                 | ' numpar=compiledline(lineptr_e).result.uresult
1d61c                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1d61c     0C 4E 85 F1 | 	sub	fp, #12
1d620     01 16 0E F2 | 	cmp	arg03, #1 wz
1d624     47 00 00 FF 
1d628     9C E4 85 F1 | 	sub	objptr, ##36508
1d62c     40 00 90 AD |  if_e	jmp	#LR__2310
1d630     00 12 06 F6 | 	mov	arg01, #0
1d634     6C 0A B1 FD | 	call	#__system___getiolock_0625
1d638     FD 12 02 F6 | 	mov	arg01, result1
1d63c     B4 AD B0 FD | 	call	#__system___lockmem
1d640     C5 01 00 FF 
1d644     BA 15 06 F6 | 	mov	arg02, ##@LR__6173
1d648     00 12 06 F6 | 	mov	arg01, #0
1d64c     00 16 06 F6 | 	mov	arg03, #0
1d650     98 BA B0 FD | 	call	#__system___basic_print_string
1d654     00 12 06 F6 | 	mov	arg01, #0
1d658     48 0A B1 FD | 	call	#__system___getiolock_0625
1d65c     FD 00 68 FC | 	wrlong	#0, result1
1d660     27 12 06 F6 | 	mov	arg01, #39
1d664     00 14 06 F6 | 	mov	arg02, #0
1d668     30 73 B0 FD | 	call	#_printerror
1d66c     28 01 90 FD | 	jmp	#LR__2319
1d670                 | LR__2310
1d670     40 02 BF FD | 	call	#_pop
1d674     FF 16 02 F6 | 	mov	arg03, result3
1d678     A7 FA 61 FC | 	wrlong	result1, fp
1d67c     04 4E 05 F1 | 	add	fp, #4
1d680     A7 FC 61 FC | 	wrlong	result2, fp
1d684     04 4E 05 F1 | 	add	fp, #4
1d688     A7 16 62 FC | 	wrlong	arg03, fp
1d68c                 | ' 
1d68c                 | ' t1=pop()
1d68c                 | ' if t1.result_type=result_int then 
1d68c     08 4E 85 F1 | 	sub	fp, #8
1d690     1C 16 0E F2 | 	cmp	arg03, #28 wz
1d694     30 00 90 5D |  if_ne	jmp	#LR__2311
1d698     A7 12 02 FB | 	rdlong	arg01, fp
1d69c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d6a0     1F 26 C6 C9 |  if_b	decod	local01, #31
1d6a4     00 26 06 36 |  if_ae	mov	local01, #0
1d6a8     C0 D7 B0 FD | 	call	#__system___float_fromuns
1d6ac     13 FB 61 F5 | 	xor	result1, local01
1d6b0     FD 12 02 F6 | 	mov	arg01, result1
1d6b4     B4 CF B0 FD | 	call	#__system__str_S
1d6b8     10 4E 05 F1 | 	add	fp, #16
1d6bc     A7 FA 61 FC | 	wrlong	result1, fp
1d6c0     10 4E 85 F1 | 	sub	fp, #16
1d6c4     AC 00 90 FD | 	jmp	#LR__2318
1d6c8                 | LR__2311
1d6c8     08 4E 05 F1 | 	add	fp, #8
1d6cc     A7 16 02 FB | 	rdlong	arg03, fp
1d6d0     08 4E 85 F1 | 	sub	fp, #8
1d6d4     1D 16 0E F2 | 	cmp	arg03, #29 wz
1d6d8     20 00 90 5D |  if_ne	jmp	#LR__2312
1d6dc     A7 12 02 FB | 	rdlong	arg01, fp
1d6e0     88 D7 B0 FD | 	call	#__system___float_fromuns
1d6e4     FD 12 02 F6 | 	mov	arg01, result1
1d6e8     80 CF B0 FD | 	call	#__system__str_S
1d6ec     10 4E 05 F1 | 	add	fp, #16
1d6f0     A7 FA 61 FC | 	wrlong	result1, fp
1d6f4     10 4E 85 F1 | 	sub	fp, #16
1d6f8     78 00 90 FD | 	jmp	#LR__2317
1d6fc                 | LR__2312
1d6fc     08 4E 05 F1 | 	add	fp, #8
1d700     A7 16 02 FB | 	rdlong	arg03, fp
1d704     08 4E 85 F1 | 	sub	fp, #8
1d708     1E 16 0E F2 | 	cmp	arg03, #30 wz
1d70c     18 00 90 5D |  if_ne	jmp	#LR__2313
1d710     A7 12 02 FB | 	rdlong	arg01, fp
1d714     54 CF B0 FD | 	call	#__system__str_S
1d718     10 4E 05 F1 | 	add	fp, #16
1d71c     A7 FA 61 FC | 	wrlong	result1, fp
1d720     10 4E 85 F1 | 	sub	fp, #16
1d724     4C 00 90 FD | 	jmp	#LR__2316
1d728                 | LR__2313
1d728     08 4E 05 F1 | 	add	fp, #8
1d72c     A7 16 02 FB | 	rdlong	arg03, fp
1d730     08 4E 85 F1 | 	sub	fp, #8
1d734     2B 16 0E F2 | 	cmp	arg03, #43 wz
1d738     18 00 90 5D |  if_ne	jmp	#LR__2314
1d73c     A7 12 02 FB | 	rdlong	arg01, fp
1d740     E8 02 BF FD | 	call	#_convertstring
1d744     10 4E 05 F1 | 	add	fp, #16
1d748     A7 FA 61 FC | 	wrlong	result1, fp
1d74c     10 4E 85 F1 | 	sub	fp, #16
1d750     20 00 90 FD | 	jmp	#LR__2315
1d754                 | LR__2314
1d754     08 4E 05 F1 | 	add	fp, #8
1d758     A7 28 02 FB | 	rdlong	local02, fp
1d75c     08 4E 85 F1 | 	sub	fp, #8
1d760     1F 28 0E F2 | 	cmp	local02, #31 wz
1d764     A7 28 02 AB |  if_e	rdlong	local02, fp
1d768     10 4E 05 A1 |  if_e	add	fp, #16
1d76c     A7 28 62 AC |  if_e	wrlong	local02, fp
1d770     10 4E 85 A1 |  if_e	sub	fp, #16
1d774                 | LR__2315
1d774                 | LR__2316
1d774                 | LR__2317
1d774                 | LR__2318
1d774     10 4E 05 F1 | 	add	fp, #16
1d778     A7 28 02 FB | 	rdlong	local02, fp
1d77c     10 4E 85 F1 | 	sub	fp, #16
1d780     A7 28 62 FC | 	wrlong	local02, fp
1d784     08 4E 05 F1 | 	add	fp, #8
1d788     A7 3E 68 FC | 	wrlong	#31, fp
1d78c     08 4E 85 F1 | 	sub	fp, #8
1d790     A7 12 02 F6 | 	mov	arg01, fp
1d794     B4 01 BF FD | 	call	#_push
1d798                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1d798                 | LR__2319
1d798     A7 F0 03 F6 | 	mov	ptra, fp
1d79c     B2 00 A0 FD | 	call	#popregs_
1d7a0                 | _do_str_ret
1d7a0     2D 00 64 FD | 	ret
1d7a4                 | 
1d7a4                 | ' ' ------------------ strig
1d7a4                 | ' 
1d7a4                 | ' sub do_strig
1d7a4                 | _do_strig
1d7a4     01 4A 05 F6 | 	mov	COUNT_, #1
1d7a8     A8 00 A0 FD | 	call	#pushregs_
1d7ac     10 F0 07 F1 | 	add	ptra, #16
1d7b0     4A 00 00 FF 
1d7b4     A0 E4 05 F1 | 	add	objptr, ##38048
1d7b8     F2 26 02 FB | 	rdlong	local01, objptr
1d7bc     13 17 02 F6 | 	mov	arg03, local01
1d7c0     01 16 66 F0 | 	shl	arg03, #1
1d7c4     13 17 02 F1 | 	add	arg03, local01
1d7c8     02 16 66 F0 | 	shl	arg03, #2
1d7cc     03 00 00 FF 
1d7d0     04 E4 85 F1 | 	sub	objptr, ##1540
1d7d4     F2 16 02 F1 | 	add	arg03, objptr
1d7d8     0B 17 02 FB | 	rdlong	arg03, arg03
1d7dc     0C 4E 05 F1 | 	add	fp, #12
1d7e0     A7 16 62 FC | 	wrlong	arg03, fp
1d7e4                 | ' 
1d7e4                 | ' numpar=compiledline(lineptr_e).result.uresult
1d7e4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1d7e4     0C 4E 85 F1 | 	sub	fp, #12
1d7e8     02 16 16 F2 | 	cmp	arg03, #2 wc
1d7ec     47 00 00 FF 
1d7f0     9C E4 85 F1 | 	sub	objptr, ##36508
1d7f4     40 00 90 CD |  if_b	jmp	#LR__2320
1d7f8     00 12 06 F6 | 	mov	arg01, #0
1d7fc     A4 08 B1 FD | 	call	#__system___getiolock_0625
1d800     FD 12 02 F6 | 	mov	arg01, result1
1d804     EC AB B0 FD | 	call	#__system___lockmem
1d808     C5 01 00 FF 
1d80c     C1 15 06 F6 | 	mov	arg02, ##@LR__6174
1d810     00 12 06 F6 | 	mov	arg01, #0
1d814     00 16 06 F6 | 	mov	arg03, #0
1d818     D0 B8 B0 FD | 	call	#__system___basic_print_string
1d81c     00 12 06 F6 | 	mov	arg01, #0
1d820     80 08 B1 FD | 	call	#__system___getiolock_0625
1d824     FD 00 68 FC | 	wrlong	#0, result1
1d828     27 12 06 F6 | 	mov	arg01, #39
1d82c     00 14 06 F6 | 	mov	arg02, #0
1d830     68 71 B0 FD | 	call	#_printerror
1d834     F0 00 90 FD | 	jmp	#LR__2324
1d838                 | LR__2320
1d838                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1d838     0C 4E 05 F1 | 	add	fp, #12
1d83c     A7 FE 09 FB | 	rdlong	result3, fp wz
1d840     0C 4E 85 F1 | 	sub	fp, #12
1d844     30 00 90 5D |  if_ne	jmp	#LR__2321
1d848     52 00 00 FF 
1d84c     90 E4 05 F1 | 	add	objptr, ##42128
1d850     F2 26 02 FB | 	rdlong	local01, objptr
1d854     52 00 00 FF 
1d858     90 E4 85 F1 | 	sub	objptr, ##42128
1d85c     A7 26 62 FC | 	wrlong	local01, fp
1d860     08 4E 05 F1 | 	add	fp, #8
1d864     A7 3A 68 FC | 	wrlong	#29, fp
1d868     08 4E 85 F1 | 	sub	fp, #8
1d86c     A7 12 02 F6 | 	mov	arg01, fp
1d870     D8 00 BF FD | 	call	#_push
1d874     B0 00 90 FD | 	jmp	#LR__2324
1d878                 | LR__2321
1d878     38 00 BF FD | 	call	#_pop
1d87c     A7 FA 61 FC | 	wrlong	result1, fp
1d880     04 4E 05 F1 | 	add	fp, #4
1d884     A7 FC 61 FC | 	wrlong	result2, fp
1d888     04 4E 05 F1 | 	add	fp, #4
1d88c     A7 FE 61 FC | 	wrlong	result3, fp
1d890                 | ' t1=pop()
1d890                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d890     08 4E 85 F1 | 	sub	fp, #8
1d894     1C FE 0D F2 | 	cmp	result3, #28 wz
1d898     08 4E 05 51 |  if_ne	add	fp, #8
1d89c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d8a0     08 4E 85 51 |  if_ne	sub	fp, #8
1d8a4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d8a8     70 00 90 5D |  if_ne	jmp	#LR__2323
1d8ac     A7 26 02 FB | 	rdlong	local01, fp
1d8b0     52 00 00 FF 
1d8b4     60 E5 05 F1 | 	add	objptr, ##42336
1d8b8     F2 26 62 FC | 	wrlong	local01, objptr
1d8bc                 | '   q=t1.result.uresult
1d8bc                 | '   if q<7 then 
1d8bc     52 00 00 FF 
1d8c0     60 E5 85 F1 | 	sub	objptr, ##42336
1d8c4     07 26 56 F2 | 	cmps	local01, #7 wc
1d8c8     40 00 90 3D |  if_ae	jmp	#LR__2322
1d8cc     52 00 00 FF 
1d8d0     60 E5 05 F1 | 	add	objptr, ##42336
1d8d4     F2 26 02 FB | 	rdlong	local01, objptr
1d8d8     02 26 66 F0 | 	shl	local01, #2
1d8dc     D0 E4 85 F1 | 	sub	objptr, #208
1d8e0     F2 26 02 F1 | 	add	local01, objptr
1d8e4     13 27 02 FB | 	rdlong	local01, local01
1d8e8     A7 26 62 FC | 	wrlong	local01, fp
1d8ec     08 4E 05 F1 | 	add	fp, #8
1d8f0     A7 3A 68 FC | 	wrlong	#29, fp
1d8f4     08 4E 85 F1 | 	sub	fp, #8
1d8f8     A7 12 02 F6 | 	mov	arg01, fp
1d8fc     52 00 00 FF 
1d900     90 E4 85 F1 | 	sub	objptr, ##42128
1d904     44 00 BF FD | 	call	#_push
1d908                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1d908     1C 00 90 FD | 	jmp	#LR__2324
1d90c                 | LR__2322
1d90c     29 12 06 F6 | 	mov	arg01, #41
1d910     00 14 06 F6 | 	mov	arg02, #0
1d914     84 70 B0 FD | 	call	#_printerror
1d918                 | '      printerror(41) : return
1d918     0C 00 90 FD | 	jmp	#LR__2324
1d91c                 | LR__2323
1d91c     29 12 06 F6 | 	mov	arg01, #41
1d920     00 14 06 F6 | 	mov	arg02, #0
1d924     74 70 B0 FD | 	call	#_printerror
1d928                 | LR__2324
1d928     A7 F0 03 F6 | 	mov	ptra, fp
1d92c     B2 00 A0 FD | 	call	#popregs_
1d930                 | _do_strig_ret
1d930     2D 00 64 FD | 	ret
1d934                 | 
1d934                 | ' 
1d934                 | ' ' ------------------ tan
1d934                 | ' 
1d934                 | ' sub do_tan
1d934                 | _do_tan
1d934     01 4A 05 F6 | 	mov	COUNT_, #1
1d938     A8 00 A0 FD | 	call	#pushregs_
1d93c     10 F0 07 F1 | 	add	ptra, #16
1d940     4A 00 00 FF 
1d944     A0 E4 05 F1 | 	add	objptr, ##38048
1d948     F2 26 02 FB | 	rdlong	local01, objptr
1d94c     13 17 02 F6 | 	mov	arg03, local01
1d950     01 16 66 F0 | 	shl	arg03, #1
1d954     13 17 02 F1 | 	add	arg03, local01
1d958     02 16 66 F0 | 	shl	arg03, #2
1d95c     03 00 00 FF 
1d960     04 E4 85 F1 | 	sub	objptr, ##1540
1d964     F2 16 02 F1 | 	add	arg03, objptr
1d968     0B 17 02 FB | 	rdlong	arg03, arg03
1d96c     0C 4E 05 F1 | 	add	fp, #12
1d970     A7 16 62 FC | 	wrlong	arg03, fp
1d974                 | ' 
1d974                 | ' numpar=compiledline(lineptr_e).result.uresult
1d974                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1d974     0C 4E 85 F1 | 	sub	fp, #12
1d978     02 16 16 F2 | 	cmp	arg03, #2 wc
1d97c     47 00 00 FF 
1d980     9C E4 85 F1 | 	sub	objptr, ##36508
1d984     0C 4E 05 C1 |  if_b	add	fp, #12
1d988     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d98c     0C 4E 85 C1 |  if_b	sub	fp, #12
1d990     40 00 90 4D |  if_c_and_nz	jmp	#LR__2330
1d994     00 12 06 F6 | 	mov	arg01, #0
1d998     08 07 B1 FD | 	call	#__system___getiolock_0625
1d99c     FD 12 02 F6 | 	mov	arg01, result1
1d9a0     50 AA B0 FD | 	call	#__system___lockmem
1d9a4     C5 01 00 FF 
1d9a8     C9 15 06 F6 | 	mov	arg02, ##@LR__6175
1d9ac     00 12 06 F6 | 	mov	arg01, #0
1d9b0     00 16 06 F6 | 	mov	arg03, #0
1d9b4     34 B7 B0 FD | 	call	#__system___basic_print_string
1d9b8     00 12 06 F6 | 	mov	arg01, #0
1d9bc     E4 06 B1 FD | 	call	#__system___getiolock_0625
1d9c0     FD 00 68 FC | 	wrlong	#0, result1
1d9c4     27 12 06 F6 | 	mov	arg01, #39
1d9c8     00 14 06 F6 | 	mov	arg02, #0
1d9cc     CC 6F B0 FD | 	call	#_printerror
1d9d0     64 00 90 FD | 	jmp	#LR__2331
1d9d4                 | LR__2330
1d9d4     DC FE BE FD | 	call	#_pop
1d9d8     A7 FA 61 FC | 	wrlong	result1, fp
1d9dc     04 4E 05 F1 | 	add	fp, #4
1d9e0     A7 FC 61 FC | 	wrlong	result2, fp
1d9e4     04 4E 05 F1 | 	add	fp, #4
1d9e8     A7 FE 61 FC | 	wrlong	result3, fp
1d9ec     08 4E 85 F1 | 	sub	fp, #8
1d9f0     52 00 00 FF 
1d9f4     00 E5 05 F1 | 	add	objptr, ##42240
1d9f8     F2 26 02 FB | 	rdlong	local01, objptr
1d9fc     52 00 00 FF 
1da00     00 E5 85 F1 | 	sub	objptr, ##42240
1da04     A7 12 02 F6 | 	mov	arg01, fp
1da08     48 01 BF FD | 	call	#_converttofloat
1da0c     FD 14 02 F6 | 	mov	arg02, result1
1da10     13 13 02 F6 | 	mov	arg01, local01
1da14     58 D8 B0 FD | 	call	#__system___float_mul
1da18     FD 12 02 F6 | 	mov	arg01, result1
1da1c     00 E3 B0 FD | 	call	#__system____builtin_tanf
1da20     A7 FA 61 FC | 	wrlong	result1, fp
1da24     08 4E 05 F1 | 	add	fp, #8
1da28     A7 3C 68 FC | 	wrlong	#30, fp
1da2c     08 4E 85 F1 | 	sub	fp, #8
1da30     A7 12 02 F6 | 	mov	arg01, fp
1da34     14 FF BE FD | 	call	#_push
1da38                 | LR__2331
1da38     A7 F0 03 F6 | 	mov	ptra, fp
1da3c     B2 00 A0 FD | 	call	#popregs_
1da40                 | _do_tan_ret
1da40     2D 00 64 FD | 	ret
1da44                 | 
1da44                 | ' 
1da44                 | ' ' ------------------ val
1da44                 | ' 
1da44                 | ' sub do_val
1da44                 | _do_val
1da44     03 4A 05 F6 | 	mov	COUNT_, #3
1da48     A8 00 A0 FD | 	call	#pushregs_
1da4c     20 F0 07 F1 | 	add	ptra, #32
1da50     4A 00 00 FF 
1da54     A0 E4 05 F1 | 	add	objptr, ##38048
1da58     F2 16 02 FB | 	rdlong	arg03, objptr
1da5c     0B 27 02 F6 | 	mov	local01, arg03
1da60     01 26 66 F0 | 	shl	local01, #1
1da64     0B 27 02 F1 | 	add	local01, arg03
1da68     02 26 66 F0 | 	shl	local01, #2
1da6c     03 00 00 FF 
1da70     04 E4 85 F1 | 	sub	objptr, ##1540
1da74     F2 26 02 F1 | 	add	local01, objptr
1da78     13 17 02 FB | 	rdlong	arg03, local01
1da7c     0C 4E 05 F1 | 	add	fp, #12
1da80     A7 16 62 FC | 	wrlong	arg03, fp
1da84                 | ' 
1da84                 | ' numpar=compiledline(lineptr_e).result.uresult
1da84                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1da84     0C 4E 85 F1 | 	sub	fp, #12
1da88     02 16 16 F2 | 	cmp	arg03, #2 wc
1da8c     47 00 00 FF 
1da90     9C E4 85 F1 | 	sub	objptr, ##36508
1da94     0C 4E 05 C1 |  if_b	add	fp, #12
1da98     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1da9c     0C 4E 85 C1 |  if_b	sub	fp, #12
1daa0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2340
1daa4     00 12 06 F6 | 	mov	arg01, #0
1daa8     F8 05 B1 FD | 	call	#__system___getiolock_0625
1daac     FD 12 02 F6 | 	mov	arg01, result1
1dab0     40 A9 B0 FD | 	call	#__system___lockmem
1dab4     C5 01 00 FF 
1dab8     CF 15 06 F6 | 	mov	arg02, ##@LR__6176
1dabc     00 12 06 F6 | 	mov	arg01, #0
1dac0     00 16 06 F6 | 	mov	arg03, #0
1dac4     24 B6 B0 FD | 	call	#__system___basic_print_string
1dac8     00 12 06 F6 | 	mov	arg01, #0
1dacc     D4 05 B1 FD | 	call	#__system___getiolock_0625
1dad0     FD 00 68 FC | 	wrlong	#0, result1
1dad4     27 12 06 F6 | 	mov	arg01, #39
1dad8     00 14 06 F6 | 	mov	arg02, #0
1dadc     BC 6E B0 FD | 	call	#_printerror
1dae0     60 02 90 FD | 	jmp	#LR__2353
1dae4                 | LR__2340
1dae4     CC FD BE FD | 	call	#_pop
1dae8     FF 16 02 F6 | 	mov	arg03, result3
1daec     A7 FA 61 FC | 	wrlong	result1, fp
1daf0     04 4E 05 F1 | 	add	fp, #4
1daf4     A7 FC 61 FC | 	wrlong	result2, fp
1daf8     04 4E 05 F1 | 	add	fp, #4
1dafc     A7 16 62 FC | 	wrlong	arg03, fp
1db00                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1db00     08 4E 85 F1 | 	sub	fp, #8
1db04     2B 16 0E F2 | 	cmp	arg03, #43 wz
1db08     18 00 90 5D |  if_ne	jmp	#LR__2341
1db0c     A7 12 02 FB | 	rdlong	arg01, fp
1db10     18 FF BE FD | 	call	#_convertstring
1db14     A7 FA 61 FC | 	wrlong	result1, fp
1db18     08 4E 05 F1 | 	add	fp, #8
1db1c     A7 3E 68 FC | 	wrlong	#31, fp
1db20     08 4E 85 F1 | 	sub	fp, #8
1db24                 | LR__2341
1db24                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1db24     08 4E 05 F1 | 	add	fp, #8
1db28     A7 16 02 FB | 	rdlong	arg03, fp
1db2c     08 4E 85 F1 | 	sub	fp, #8
1db30     1F 16 0E F2 | 	cmp	arg03, #31 wz
1db34     40 00 90 AD |  if_e	jmp	#LR__2342
1db38     00 12 06 F6 | 	mov	arg01, #0
1db3c     64 05 B1 FD | 	call	#__system___getiolock_0625
1db40     FD 12 02 F6 | 	mov	arg01, result1
1db44     AC A8 B0 FD | 	call	#__system___lockmem
1db48     C5 01 00 FF 
1db4c     D5 15 06 F6 | 	mov	arg02, ##@LR__6177
1db50     00 12 06 F6 | 	mov	arg01, #0
1db54     00 16 06 F6 | 	mov	arg03, #0
1db58     90 B5 B0 FD | 	call	#__system___basic_print_string
1db5c     00 12 06 F6 | 	mov	arg01, #0
1db60     40 05 B1 FD | 	call	#__system___getiolock_0625
1db64     FD 00 68 FC | 	wrlong	#0, result1
1db68     0F 12 06 F6 | 	mov	arg01, #15
1db6c     00 14 06 F6 | 	mov	arg02, #0
1db70     28 6E B0 FD | 	call	#_printerror
1db74     CC 01 90 FD | 	jmp	#LR__2353
1db78                 | LR__2342
1db78                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1db78     A7 12 02 FB | 	rdlong	arg01, fp
1db7c     01 14 06 F6 | 	mov	arg02, #1
1db80     F0 C8 B0 FD | 	call	#__system__Left_S
1db84     FD 12 02 F6 | 	mov	arg01, result1
1db88     C5 01 00 FF 
1db8c     DB 15 06 F6 | 	mov	arg02, ##@LR__6178
1db90     88 A8 B0 FD | 	call	#__system___string_cmp
1db94     00 FA 0D F2 | 	cmp	result1, #0 wz
1db98     48 00 90 5D |  if_ne	jmp	#LR__2345
1db9c     C5 01 00 FF 
1dba0     DD 27 06 F6 | 	mov	local01, ##@LR__6179
1dba4     A7 16 02 FB | 	rdlong	arg03, fp
1dba8     0B 13 02 F6 | 	mov	arg01, arg03
1dbac     09 29 02 F6 | 	mov	local02, arg01
1dbb0     97 06 48 FB | 	callpa	#(@LR__2344-@LR__2343)>>2,fcache_load_ptr_
1dbb4                 | LR__2343
1dbb4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1dbb8     01 28 06 51 |  if_ne	add	local02, #1
1dbbc     F4 FF 9F 5D |  if_ne	jmp	#LR__2343
1dbc0                 | LR__2344
1dbc0     09 29 82 F1 | 	sub	local02, arg01
1dbc4     14 15 02 F6 | 	mov	arg02, local02
1dbc8     01 14 86 F1 | 	sub	arg02, #1
1dbcc     0B 13 02 F6 | 	mov	arg01, arg03
1dbd0     28 C9 B0 FD | 	call	#__system__Right_S
1dbd4     FD 14 02 F6 | 	mov	arg02, result1
1dbd8     13 13 02 F6 | 	mov	arg01, local01
1dbdc     70 A8 B0 FD | 	call	#__system___string_concat
1dbe0     A7 FA 61 FC | 	wrlong	result1, fp
1dbe4                 | LR__2345
1dbe4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1dbe4     A7 12 02 FB | 	rdlong	arg01, fp
1dbe8     01 14 06 F6 | 	mov	arg02, #1
1dbec     84 C8 B0 FD | 	call	#__system__Left_S
1dbf0     FD 12 02 F6 | 	mov	arg01, result1
1dbf4     C5 01 00 FF 
1dbf8     E0 15 06 F6 | 	mov	arg02, ##@LR__6180
1dbfc     1C A8 B0 FD | 	call	#__system___string_cmp
1dc00     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc04     48 00 90 5D |  if_ne	jmp	#LR__2348
1dc08     C5 01 00 FF 
1dc0c     E2 27 06 F6 | 	mov	local01, ##@LR__6181
1dc10     A7 16 02 FB | 	rdlong	arg03, fp
1dc14     0B 13 02 F6 | 	mov	arg01, arg03
1dc18     09 29 02 F6 | 	mov	local02, arg01
1dc1c     97 06 48 FB | 	callpa	#(@LR__2347-@LR__2346)>>2,fcache_load_ptr_
1dc20                 | LR__2346
1dc20     14 FB C9 FA | 	rdbyte	result1, local02 wz
1dc24     01 28 06 51 |  if_ne	add	local02, #1
1dc28     F4 FF 9F 5D |  if_ne	jmp	#LR__2346
1dc2c                 | LR__2347
1dc2c     09 29 82 F1 | 	sub	local02, arg01
1dc30     14 15 02 F6 | 	mov	arg02, local02
1dc34     01 14 86 F1 | 	sub	arg02, #1
1dc38     0B 13 02 F6 | 	mov	arg01, arg03
1dc3c     BC C8 B0 FD | 	call	#__system__Right_S
1dc40     FD 14 02 F6 | 	mov	arg02, result1
1dc44     13 13 02 F6 | 	mov	arg01, local01
1dc48     04 A8 B0 FD | 	call	#__system___string_concat
1dc4c     A7 FA 61 FC | 	wrlong	result1, fp
1dc50                 | LR__2348
1dc50     A7 12 02 FB | 	rdlong	arg01, fp
1dc54     28 DE B0 FD | 	call	#__system____builtin_atof
1dc58     1C 4E 05 F1 | 	add	fp, #28
1dc5c     A7 FA 61 FC | 	wrlong	result1, fp
1dc60     1C 4E 85 F1 | 	sub	fp, #28
1dc64     A7 12 02 FB | 	rdlong	arg01, fp
1dc68     00 14 06 F6 | 	mov	arg02, #0
1dc6c     78 DC B0 FD | 	call	#__system____builtin_atoi
1dc70     18 4E 05 F1 | 	add	fp, #24
1dc74     A7 FA 61 FC | 	wrlong	result1, fp
1dc78                 | ' fval=val(t1.result.sresult)
1dc78                 | ' ival=val%(t1.result.sresult)
1dc78                 | ' if fval=ival then
1dc78     04 4E 05 F1 | 	add	fp, #4
1dc7c     A7 26 02 FB | 	rdlong	local01, fp
1dc80     1C 4E 85 F1 | 	sub	fp, #28
1dc84     FD 12 52 F6 | 	abs	arg01, result1 wc
1dc88     1F 2A C6 C9 |  if_b	decod	local03, #31
1dc8c     00 2A 06 36 |  if_ae	mov	local03, #0
1dc90     D8 D1 B0 FD | 	call	#__system___float_fromuns
1dc94     15 FB 61 F5 | 	xor	result1, local03
1dc98     FD 14 02 F6 | 	mov	arg02, result1
1dc9c     13 13 02 F6 | 	mov	arg01, local01
1dca0     01 16 06 F6 | 	mov	arg03, #1
1dca4     FC D9 B0 FD | 	call	#__system___float_cmp
1dca8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dcac     20 00 90 5D |  if_ne	jmp	#LR__2349
1dcb0     18 4E 05 F1 | 	add	fp, #24
1dcb4     A7 26 02 FB | 	rdlong	local01, fp
1dcb8     18 4E 85 F1 | 	sub	fp, #24
1dcbc     A7 26 62 FC | 	wrlong	local01, fp
1dcc0     08 4E 05 F1 | 	add	fp, #8
1dcc4     A7 38 68 FC | 	wrlong	#28, fp
1dcc8     08 4E 85 F1 | 	sub	fp, #8
1dccc     6C 00 90 FD | 	jmp	#LR__2352
1dcd0                 | LR__2349
1dcd0                 | '   if fval=0 andalso ival<>0 then
1dcd0     1C 4E 05 F1 | 	add	fp, #28
1dcd4     A7 12 02 FB | 	rdlong	arg01, fp
1dcd8     1C 4E 85 F1 | 	sub	fp, #28
1dcdc     00 14 06 F6 | 	mov	arg02, #0
1dce0     01 16 06 F6 | 	mov	arg03, #1
1dce4     BC D9 B0 FD | 	call	#__system___float_cmp
1dce8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dcec     30 00 90 5D |  if_ne	jmp	#LR__2350
1dcf0     18 4E 05 F1 | 	add	fp, #24
1dcf4     A7 26 0A FB | 	rdlong	local01, fp wz
1dcf8     18 4E 85 F1 | 	sub	fp, #24
1dcfc     20 00 90 AD |  if_e	jmp	#LR__2350
1dd00     18 4E 05 F1 | 	add	fp, #24
1dd04     A7 26 02 FB | 	rdlong	local01, fp
1dd08     18 4E 85 F1 | 	sub	fp, #24
1dd0c     A7 26 62 FC | 	wrlong	local01, fp
1dd10     08 4E 05 F1 | 	add	fp, #8
1dd14     A7 38 68 FC | 	wrlong	#28, fp
1dd18     08 4E 85 F1 | 	sub	fp, #8
1dd1c     1C 00 90 FD | 	jmp	#LR__2351
1dd20                 | LR__2350
1dd20     1C 4E 05 F1 | 	add	fp, #28
1dd24     A7 26 02 FB | 	rdlong	local01, fp
1dd28     1C 4E 85 F1 | 	sub	fp, #28
1dd2c     A7 26 62 FC | 	wrlong	local01, fp
1dd30     08 4E 05 F1 | 	add	fp, #8
1dd34     A7 3C 68 FC | 	wrlong	#30, fp
1dd38     08 4E 85 F1 | 	sub	fp, #8
1dd3c                 | LR__2351
1dd3c                 | LR__2352
1dd3c     A7 12 02 F6 | 	mov	arg01, fp
1dd40     08 FC BE FD | 	call	#_push
1dd44                 | LR__2353
1dd44     A7 F0 03 F6 | 	mov	ptra, fp
1dd48     B2 00 A0 FD | 	call	#popregs_
1dd4c                 | _do_val_ret
1dd4c     2D 00 64 FD | 	ret
1dd50                 | 
1dd50                 | ' 
1dd50                 | ' ' ------------------ waitclock
1dd50                 | ' 
1dd50                 | ' sub do_waitclock
1dd50                 | _do_waitclock
1dd50     52 00 00 FF 
1dd54     EC E4 05 F1 | 	add	objptr, ##42220
1dd58     F2 00 02 FB | 	rdlong	_var01, objptr
1dd5c                 | ' c=hkcnt
1dd5c                 | ' do: loop until hkcnt<>c
1dd5c                 | LR__2360
1dd5c     F2 02 02 FB | 	rdlong	_var02, objptr
1dd60     00 03 0A F2 | 	cmp	_var02, _var01 wz
1dd64     F4 FF 9F AD |  if_e	jmp	#LR__2360
1dd68     52 00 00 FF 
1dd6c     EC E4 85 F1 | 	sub	objptr, ##42220
1dd70                 | _do_waitclock_ret
1dd70     2D 00 64 FD | 	ret
1dd74                 | 
1dd74                 | ' 
1dd74                 | ' ' ------------------ waitms
1dd74                 | ' 
1dd74                 | ' sub do_waitms
1dd74                 | _do_waitms
1dd74     01 4A 05 F6 | 	mov	COUNT_, #1
1dd78     A8 00 A0 FD | 	call	#pushregs_
1dd7c     18 F0 07 F1 | 	add	ptra, #24
1dd80     30 FB BE FD | 	call	#_pop
1dd84     A7 FA 61 FC | 	wrlong	result1, fp
1dd88     04 4E 05 F1 | 	add	fp, #4
1dd8c     A7 FC 61 FC | 	wrlong	result2, fp
1dd90     04 4E 05 F1 | 	add	fp, #4
1dd94     A7 FE 61 FC | 	wrlong	result3, fp
1dd98     08 4E 85 F1 | 	sub	fp, #8
1dd9c     A7 12 02 F6 | 	mov	arg01, fp
1dda0     F4 FC BE FD | 	call	#_converttoint
1dda4     0C 4E 05 F1 | 	add	fp, #12
1dda8     A7 FA 61 FC | 	wrlong	result1, fp
1ddac                 | ' 
1ddac                 | ' t1=pop()  
1ddac                 | ' t=converttoint(t1)
1ddac                 | ' if t<0 then return
1ddac     0C 4E 85 F1 | 	sub	fp, #12
1ddb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1ddb4     E4 00 90 CD |  if_b	jmp	#LR__2376
1ddb8                 | ' if t < 1000 then 
1ddb8     0C 4E 05 F1 | 	add	fp, #12
1ddbc     A7 12 02 FB | 	rdlong	arg01, fp
1ddc0     0C 4E 85 F1 | 	sub	fp, #12
1ddc4     01 00 00 FF 
1ddc8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1ddcc     14 00 90 3D |  if_ae	jmp	#LR__2370
1ddd0     0C 4E 05 F1 | 	add	fp, #12
1ddd4     A7 12 02 FB | 	rdlong	arg01, fp
1ddd8     0C 4E 85 F1 | 	sub	fp, #12
1dddc     08 A9 B0 FD | 	call	#__system___waitms
1dde0     B8 00 90 FD | 	jmp	#LR__2375
1dde4                 | LR__2370
1dde4     10 4E 05 F1 | 	add	fp, #16
1dde8     A7 02 68 FC | 	wrlong	#1, fp
1ddec     04 4E 85 F1 | 	sub	fp, #4
1ddf0     A7 12 02 FB | 	rdlong	arg01, fp
1ddf4     09 13 52 F6 | 	abs	arg01, arg01 wc
1ddf8     01 00 00 FF 
1ddfc     E8 13 16 FD | 	qdiv	arg01, ##1000
1de00                 | '   for i=1 to t/1000
1de00     0C 4E 85 F1 | 	sub	fp, #12
1de04     18 26 62 FD | 	getqx	local01
1de08     13 27 82 F6 | 	negc	local01, local01
1de0c     01 26 06 F1 | 	add	local01, #1
1de10                 | LR__2371
1de10     10 4E 05 F1 | 	add	fp, #16
1de14     A7 12 02 FB | 	rdlong	arg01, fp
1de18     10 4E 85 F1 | 	sub	fp, #16
1de1c     13 13 52 F2 | 	cmps	arg01, local01 wc
1de20     54 00 90 3D |  if_ae	jmp	#LR__2374
1de24     01 00 00 FF 
1de28     E8 13 06 F6 | 	mov	arg01, ##1000
1de2c     B8 A8 B0 FD | 	call	#__system___waitms
1de30                 | '     waitms(1000)
1de30                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1de30     E0 12 06 F6 | 	mov	arg01, #224
1de34     A8 9C B0 FD | 	call	#_usbnew_spin2_keystate
1de38     00 FA 0D F2 | 	cmp	result1, #0 wz
1de3c     10 00 90 5D |  if_ne	jmp	#LR__2372
1de40     E4 12 06 F6 | 	mov	arg01, #228
1de44     98 9C B0 FD | 	call	#_usbnew_spin2_keystate
1de48     00 FA 0D F2 | 	cmp	result1, #0 wz
1de4c     10 00 90 AD |  if_e	jmp	#LR__2373
1de50                 | LR__2372
1de50     06 12 06 F6 | 	mov	arg01, #6
1de54     88 9C B0 FD | 	call	#_usbnew_spin2_keystate
1de58     00 FA 0D F2 | 	cmp	result1, #0 wz
1de5c     3C 00 90 5D |  if_ne	jmp	#LR__2376
1de60                 | LR__2373
1de60     10 4E 05 F1 | 	add	fp, #16
1de64     A7 12 02 FB | 	rdlong	arg01, fp
1de68     01 12 06 F1 | 	add	arg01, #1
1de6c     A7 12 62 FC | 	wrlong	arg01, fp
1de70     10 4E 85 F1 | 	sub	fp, #16
1de74     98 FF 9F FD | 	jmp	#LR__2371
1de78                 | LR__2374
1de78     0C 4E 05 F1 | 	add	fp, #12
1de7c     A7 26 02 FB | 	rdlong	local01, fp
1de80     13 27 52 F6 | 	abs	local01, local01 wc
1de84     01 00 00 FF 
1de88     E8 27 16 FD | 	qdiv	local01, ##1000
1de8c     0C 4E 85 F1 | 	sub	fp, #12
1de90     19 26 62 FD | 	getqy	local01
1de94     13 13 82 F6 | 	negc	arg01, local01
1de98     4C A8 B0 FD | 	call	#__system___waitms
1de9c                 | LR__2375
1de9c                 | LR__2376
1de9c     A7 F0 03 F6 | 	mov	ptra, fp
1dea0     B2 00 A0 FD | 	call	#popregs_
1dea4                 | _do_waitms_ret
1dea4     2D 00 64 FD | 	ret
1dea8                 | 
1dea8                 | ' 
1dea8                 | ' ' ------------------ waitvbl
1dea8                 | ' 
1dea8                 | ' sub do_waitvbl
1dea8                 | _do_waitvbl
1dea8     01 12 06 F6 | 	mov	arg01, #1
1deac     48 88 B0 FD | 	call	#_hg010b_spin2_waitvbl
1deb0                 | _do_waitvbl_ret
1deb0     2D 00 64 FD | 	ret
1deb4                 | 
1deb4                 | ' 
1deb4                 | ' ' ------------------ wrpin
1deb4                 | ' 
1deb4                 | ' sub do_wrpin
1deb4                 | _do_wrpin
1deb4     01 4A 05 F6 | 	mov	COUNT_, #1
1deb8     A8 00 A0 FD | 	call	#pushregs_
1debc     18 F0 07 F1 | 	add	ptra, #24
1dec0     F0 F9 BE FD | 	call	#_pop
1dec4     FD 14 02 F6 | 	mov	arg02, result1
1dec8     FE 12 02 F6 | 	mov	arg01, result2
1decc     FF 26 02 F6 | 	mov	local01, result3
1ded0     A7 14 62 FC | 	wrlong	arg02, fp
1ded4     04 4E 05 F1 | 	add	fp, #4
1ded8     A7 12 62 FC | 	wrlong	arg01, fp
1dedc     04 4E 05 F1 | 	add	fp, #4
1dee0     A7 26 62 FC | 	wrlong	local01, fp
1dee4     08 4E 85 F1 | 	sub	fp, #8
1dee8     C8 F9 BE FD | 	call	#_pop
1deec     FF 26 02 F6 | 	mov	local01, result3
1def0     0C 4E 05 F1 | 	add	fp, #12
1def4     A7 FA 61 FC | 	wrlong	result1, fp
1def8     04 4E 05 F1 | 	add	fp, #4
1defc     A7 FC 61 FC | 	wrlong	result2, fp
1df00     04 4E 05 F1 | 	add	fp, #4
1df04     A7 26 62 FC | 	wrlong	local01, fp
1df08     08 4E 85 F1 | 	sub	fp, #8
1df0c     A7 12 02 F6 | 	mov	arg01, fp
1df10     0C 4E 85 F1 | 	sub	fp, #12
1df14     80 FB BE FD | 	call	#_converttoint
1df18     FD 26 02 F6 | 	mov	local01, result1
1df1c     A7 12 02 F6 | 	mov	arg01, fp
1df20     74 FB BE FD | 	call	#_converttoint
1df24     13 FB 01 FC | 	wrpin	result1, local01
1df28     A7 F0 03 F6 | 	mov	ptra, fp
1df2c     B2 00 A0 FD | 	call	#popregs_
1df30                 | _do_wrpin_ret
1df30     2D 00 64 FD | 	ret
1df34                 | 
1df34                 | ' 
1df34                 | ' ' ------------------ wxpin
1df34                 | ' 
1df34                 | ' sub do_wxpin
1df34                 | _do_wxpin
1df34     01 4A 05 F6 | 	mov	COUNT_, #1
1df38     A8 00 A0 FD | 	call	#pushregs_
1df3c     18 F0 07 F1 | 	add	ptra, #24
1df40     70 F9 BE FD | 	call	#_pop
1df44     FD 14 02 F6 | 	mov	arg02, result1
1df48     FE 12 02 F6 | 	mov	arg01, result2
1df4c     FF 26 02 F6 | 	mov	local01, result3
1df50     A7 14 62 FC | 	wrlong	arg02, fp
1df54     04 4E 05 F1 | 	add	fp, #4
1df58     A7 12 62 FC | 	wrlong	arg01, fp
1df5c     04 4E 05 F1 | 	add	fp, #4
1df60     A7 26 62 FC | 	wrlong	local01, fp
1df64     08 4E 85 F1 | 	sub	fp, #8
1df68     48 F9 BE FD | 	call	#_pop
1df6c     FF 26 02 F6 | 	mov	local01, result3
1df70     0C 4E 05 F1 | 	add	fp, #12
1df74     A7 FA 61 FC | 	wrlong	result1, fp
1df78     04 4E 05 F1 | 	add	fp, #4
1df7c     A7 FC 61 FC | 	wrlong	result2, fp
1df80     04 4E 05 F1 | 	add	fp, #4
1df84     A7 26 62 FC | 	wrlong	local01, fp
1df88     08 4E 85 F1 | 	sub	fp, #8
1df8c     A7 12 02 F6 | 	mov	arg01, fp
1df90     0C 4E 85 F1 | 	sub	fp, #12
1df94     00 FB BE FD | 	call	#_converttoint
1df98     FD 26 02 F6 | 	mov	local01, result1
1df9c     A7 12 02 F6 | 	mov	arg01, fp
1dfa0     F4 FA BE FD | 	call	#_converttoint
1dfa4     13 FB 11 FC | 	wxpin	result1, local01
1dfa8     A7 F0 03 F6 | 	mov	ptra, fp
1dfac     B2 00 A0 FD | 	call	#popregs_
1dfb0                 | _do_wxpin_ret
1dfb0     2D 00 64 FD | 	ret
1dfb4                 | 
1dfb4                 | ' 
1dfb4                 | ' ' ------------------ wypin
1dfb4                 | ' 
1dfb4                 | ' sub do_wypin
1dfb4                 | _do_wypin
1dfb4     01 4A 05 F6 | 	mov	COUNT_, #1
1dfb8     A8 00 A0 FD | 	call	#pushregs_
1dfbc     18 F0 07 F1 | 	add	ptra, #24
1dfc0     F0 F8 BE FD | 	call	#_pop
1dfc4     FD 14 02 F6 | 	mov	arg02, result1
1dfc8     FE 12 02 F6 | 	mov	arg01, result2
1dfcc     FF 26 02 F6 | 	mov	local01, result3
1dfd0     A7 14 62 FC | 	wrlong	arg02, fp
1dfd4     04 4E 05 F1 | 	add	fp, #4
1dfd8     A7 12 62 FC | 	wrlong	arg01, fp
1dfdc     04 4E 05 F1 | 	add	fp, #4
1dfe0     A7 26 62 FC | 	wrlong	local01, fp
1dfe4     08 4E 85 F1 | 	sub	fp, #8
1dfe8     C8 F8 BE FD | 	call	#_pop
1dfec     FF 26 02 F6 | 	mov	local01, result3
1dff0     0C 4E 05 F1 | 	add	fp, #12
1dff4     A7 FA 61 FC | 	wrlong	result1, fp
1dff8     04 4E 05 F1 | 	add	fp, #4
1dffc     A7 FC 61 FC | 	wrlong	result2, fp
1e000     04 4E 05 F1 | 	add	fp, #4
1e004     A7 26 62 FC | 	wrlong	local01, fp
1e008     08 4E 85 F1 | 	sub	fp, #8
1e00c     A7 12 02 F6 | 	mov	arg01, fp
1e010     0C 4E 85 F1 | 	sub	fp, #12
1e014     80 FA BE FD | 	call	#_converttoint
1e018     FD 26 02 F6 | 	mov	local01, result1
1e01c     A7 12 02 F6 | 	mov	arg01, fp
1e020     74 FA BE FD | 	call	#_converttoint
1e024     13 FB 21 FC | 	wypin	result1, local01
1e028     A7 F0 03 F6 | 	mov	ptra, fp
1e02c     B2 00 A0 FD | 	call	#popregs_
1e030                 | _do_wypin_ret
1e030     2D 00 64 FD | 	ret
1e034                 | 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' 
1e034                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1e034                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1e034                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1e034                 | ' 
1e034                 | ' 
1e034                 | ' '------------------ Assign
1e034                 | ' 
1e034                 | ' sub do_assign
1e034                 | _do_assign
1e034     05 4A 05 F6 | 	mov	COUNT_, #5
1e038     A8 00 A0 FD | 	call	#pushregs_
1e03c     44 F0 07 F1 | 	add	ptra, #68
1e040     4A 00 00 FF 
1e044     A0 E4 05 F1 | 	add	objptr, ##38048
1e048     F2 16 02 FB | 	rdlong	arg03, objptr
1e04c     0B 15 02 F6 | 	mov	arg02, arg03
1e050     01 14 66 F0 | 	shl	arg02, #1
1e054     0B 15 02 F1 | 	add	arg02, arg03
1e058     02 14 66 F0 | 	shl	arg02, #2
1e05c     03 00 00 FF 
1e060     04 E4 85 F1 | 	sub	objptr, ##1540
1e064     F2 14 02 F1 | 	add	arg02, objptr
1e068     0A 15 02 FB | 	rdlong	arg02, arg02
1e06c     18 4E 05 F1 | 	add	fp, #24
1e070     A7 14 62 FC | 	wrlong	arg02, fp
1e074                 | ' 
1e074                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1e074                 | ' if variables(varnum).vartype<array_no_type then 
1e074     18 4E 85 F1 | 	sub	fp, #24
1e078     04 14 66 F0 | 	shl	arg02, #4
1e07c     32 00 00 FF 
1e080     84 E4 85 F1 | 	sub	objptr, ##25732
1e084     F2 14 02 F1 | 	add	arg02, objptr
1e088     0C 14 06 F1 | 	add	arg02, #12
1e08c     0A 17 02 FB | 	rdlong	arg03, arg02
1e090     00 17 16 F2 | 	cmp	arg03, #256 wc
1e094     15 00 00 FF 
1e098     18 E4 85 F1 | 	sub	objptr, ##10776
1e09c     18 01 90 3D |  if_ae	jmp	#LR__2380
1e0a0     10 F8 BE FD | 	call	#_pop
1e0a4     A7 FA 61 FC | 	wrlong	result1, fp
1e0a8     04 4E 05 F1 | 	add	fp, #4
1e0ac     A7 FC 61 FC | 	wrlong	result2, fp
1e0b0     04 4E 05 F1 | 	add	fp, #4
1e0b4     A7 FE 61 FC | 	wrlong	result3, fp
1e0b8     08 4E 85 F1 | 	sub	fp, #8
1e0bc     A7 16 02 FB | 	rdlong	arg03, fp
1e0c0     04 4E 05 F1 | 	add	fp, #4
1e0c4     A7 14 02 FB | 	rdlong	arg02, fp
1e0c8     14 4E 05 F1 | 	add	fp, #20
1e0cc     A7 12 02 FB | 	rdlong	arg01, fp
1e0d0     04 12 66 F0 | 	shl	arg01, #4
1e0d4     15 00 00 FF 
1e0d8     18 E4 05 F1 | 	add	objptr, ##10776
1e0dc     F2 12 02 F1 | 	add	arg01, objptr
1e0e0     04 12 06 F1 | 	add	arg01, #4
1e0e4     09 17 62 FC | 	wrlong	arg03, arg01
1e0e8     A7 16 02 FB | 	rdlong	arg03, fp
1e0ec     04 16 66 F0 | 	shl	arg03, #4
1e0f0     F2 16 02 F1 | 	add	arg03, objptr
1e0f4     08 16 06 F1 | 	add	arg03, #8
1e0f8     0B 15 62 FC | 	wrlong	arg02, arg03
1e0fc     A7 16 02 FB | 	rdlong	arg03, fp
1e100     04 16 66 F0 | 	shl	arg03, #4
1e104     F2 16 02 F1 | 	add	arg03, objptr
1e108     10 4E 85 F1 | 	sub	fp, #16
1e10c     A7 14 02 FB | 	rdlong	arg02, fp
1e110     0C 16 06 F1 | 	add	arg03, #12
1e114     0B 15 62 FC | 	wrlong	arg02, arg03
1e118                 | '   t1=pop() 
1e118                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1e118                 | '   if variables(varnum).vartype<>result_string2 then return
1e118     10 4E 05 F1 | 	add	fp, #16
1e11c     A7 16 02 FB | 	rdlong	arg03, fp
1e120     18 4E 85 F1 | 	sub	fp, #24
1e124     04 16 66 F0 | 	shl	arg03, #4
1e128     F2 16 02 F1 | 	add	arg03, objptr
1e12c     0C 16 06 F1 | 	add	arg03, #12
1e130     0B 17 02 FB | 	rdlong	arg03, arg03
1e134     2B 16 0E F2 | 	cmp	arg03, #43 wz
1e138     15 00 00 FF 
1e13c     18 E4 85 F1 | 	sub	objptr, ##10776
1e140     EC 04 90 5D |  if_ne	jmp	#LR__2403
1e144     18 4E 05 F1 | 	add	fp, #24
1e148     A7 16 02 FB | 	rdlong	arg03, fp
1e14c     0B 27 02 F6 | 	mov	local01, arg03
1e150     04 26 66 F0 | 	shl	local01, #4
1e154     15 00 00 FF 
1e158     18 E4 05 F1 | 	add	objptr, ##10776
1e15c     F2 26 02 F1 | 	add	local01, objptr
1e160     18 4E 85 F1 | 	sub	fp, #24
1e164     04 16 66 F0 | 	shl	arg03, #4
1e168     F2 16 02 F1 | 	add	arg03, objptr
1e16c     04 16 06 F1 | 	add	arg03, #4
1e170     0B 13 02 FB | 	rdlong	arg01, arg03
1e174     15 00 00 FF 
1e178     18 E4 85 F1 | 	sub	objptr, ##10776
1e17c     AC F8 BE FD | 	call	#_convertstring
1e180     04 26 06 F1 | 	add	local01, #4
1e184     13 FB 61 FC | 	wrlong	result1, local01
1e188     18 4E 05 F1 | 	add	fp, #24
1e18c     A7 26 02 FB | 	rdlong	local01, fp
1e190     18 4E 85 F1 | 	sub	fp, #24
1e194     04 26 66 F0 | 	shl	local01, #4
1e198     15 00 00 FF 
1e19c     18 E4 05 F1 | 	add	objptr, ##10776
1e1a0     F2 26 02 F1 | 	add	local01, objptr
1e1a4     0C 26 06 F1 | 	add	local01, #12
1e1a8     13 3F 68 FC | 	wrlong	#31, local01
1e1ac                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1e1ac                 | '   variables(varnum).vartype=result_string
1e1ac                 | '   return
1e1ac     15 00 00 FF 
1e1b0     18 E4 85 F1 | 	sub	objptr, ##10776
1e1b4     78 04 90 FD | 	jmp	#LR__2403
1e1b8                 | LR__2380
1e1b8                 | ' for i=0 to 2 : arrid(i)=0 : next i
1e1b8     1C 4E 05 F1 | 	add	fp, #28
1e1bc     A7 00 68 FC | 	wrlong	#0, fp
1e1c0     97 16 48 FB | 	callpa	#(@LR__2382-@LR__2381)>>2,fcache_load_ptr_
1e1c4                 | LR__2381
1e1c4     A7 26 02 FB | 	rdlong	local01, fp
1e1c8     02 26 66 F0 | 	shl	local01, #2
1e1cc     18 4E 05 F1 | 	add	fp, #24
1e1d0     A7 26 02 F1 | 	add	local01, fp
1e1d4     13 01 68 FC | 	wrlong	#0, local01
1e1d8     18 4E 85 F1 | 	sub	fp, #24
1e1dc     A7 26 02 FB | 	rdlong	local01, fp
1e1e0     01 26 06 F1 | 	add	local01, #1
1e1e4     A7 26 62 FC | 	wrlong	local01, fp
1e1e8     03 26 16 F2 | 	cmp	local01, #3 wc
1e1ec     D4 FF 9F CD |  if_b	jmp	#LR__2381
1e1f0                 | LR__2382
1e1f0     4A 00 00 FF 
1e1f4     A0 E4 05 F1 | 	add	objptr, ##38048
1e1f8     F2 16 02 FB | 	rdlong	arg03, objptr
1e1fc     0B 27 02 F6 | 	mov	local01, arg03
1e200     01 26 66 F0 | 	shl	local01, #1
1e204     0B 27 02 F1 | 	add	local01, arg03
1e208     02 26 66 F0 | 	shl	local01, #2
1e20c     03 00 00 FF 
1e210     04 E4 85 F1 | 	sub	objptr, ##1540
1e214     F2 26 02 F1 | 	add	local01, objptr
1e218     04 26 06 F1 | 	add	local01, #4
1e21c     13 29 02 FB | 	rdlong	local02, local01
1e220     04 4E 05 F1 | 	add	fp, #4
1e224     A7 28 62 FC | 	wrlong	local02, fp
1e228     20 4E 85 F1 | 	sub	fp, #32
1e22c     47 00 00 FF 
1e230     9C E4 85 F1 | 	sub	objptr, ##36508
1e234     7C F6 BE FD | 	call	#_pop
1e238     A7 FA 61 FC | 	wrlong	result1, fp
1e23c     04 4E 05 F1 | 	add	fp, #4
1e240     A7 FC 61 FC | 	wrlong	result2, fp
1e244     04 4E 05 F1 | 	add	fp, #4
1e248     A7 FE 61 FC | 	wrlong	result3, fp
1e24c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1e24c                 | ' t1=pop() ' var value
1e24c                 | ' if numpar>0 then
1e24c     18 4E 05 F1 | 	add	fp, #24
1e250     A7 2A 02 FB | 	rdlong	local03, fp
1e254     20 4E 85 F1 | 	sub	fp, #32
1e258     01 2A 16 F2 | 	cmp	local03, #1 wc
1e25c     78 00 90 CD |  if_b	jmp	#LR__2385
1e260                 | '   for i=numpar to 1 step -1
1e260     20 4E 05 F1 | 	add	fp, #32
1e264     A7 2C 0A FB | 	rdlong	local04, fp wz
1e268     04 4E 85 F1 | 	sub	fp, #4
1e26c     A7 2C 62 FC | 	wrlong	local04, fp
1e270     1C 4E 85 F1 | 	sub	fp, #28
1e274     60 00 90 AD |  if_e	jmp	#LR__2384
1e278                 | LR__2383
1e278     38 F6 BE FD | 	call	#_pop
1e27c     0C 4E 05 F1 | 	add	fp, #12
1e280     A7 FA 61 FC | 	wrlong	result1, fp
1e284     04 4E 05 F1 | 	add	fp, #4
1e288     A7 FC 61 FC | 	wrlong	result2, fp
1e28c     04 4E 05 F1 | 	add	fp, #4
1e290     A7 FE 61 FC | 	wrlong	result3, fp
1e294     08 4E 05 F1 | 	add	fp, #8
1e298     A7 2A 02 FB | 	rdlong	local03, fp
1e29c     01 2A 86 F1 | 	sub	local03, #1
1e2a0     02 2A 66 F0 | 	shl	local03, #2
1e2a4     18 4E 05 F1 | 	add	fp, #24
1e2a8     A7 2A 02 F1 | 	add	local03, fp
1e2ac     28 4E 85 F1 | 	sub	fp, #40
1e2b0     A7 12 02 F6 | 	mov	arg01, fp
1e2b4     0C 4E 85 F1 | 	sub	fp, #12
1e2b8     DC F7 BE FD | 	call	#_converttoint
1e2bc     15 FB 61 FC | 	wrlong	result1, local03
1e2c0     1C 4E 05 F1 | 	add	fp, #28
1e2c4     A7 2C 02 FB | 	rdlong	local04, fp
1e2c8     01 2C 8E F1 | 	sub	local04, #1 wz
1e2cc     A7 2C 62 FC | 	wrlong	local04, fp
1e2d0     1C 4E 85 F1 | 	sub	fp, #28
1e2d4     A0 FF 9F 5D |  if_ne	jmp	#LR__2383
1e2d8                 | LR__2384
1e2d8                 | LR__2385
1e2d8     18 4E 05 F1 | 	add	fp, #24
1e2dc     A7 26 02 FB | 	rdlong	local01, fp
1e2e0     04 26 66 F0 | 	shl	local01, #4
1e2e4     15 00 00 FF 
1e2e8     18 E4 05 F1 | 	add	objptr, ##10776
1e2ec     F2 26 02 F1 | 	add	local01, objptr
1e2f0     04 26 06 F1 | 	add	local01, #4
1e2f4     13 13 02 FB | 	rdlong	arg01, local01
1e2f8     0C 4E 05 F1 | 	add	fp, #12
1e2fc     A7 12 62 FC | 	wrlong	arg01, fp
1e300     24 4E 85 F1 | 	sub	fp, #36
1e304     15 00 00 FF 
1e308     18 E4 85 F1 | 	sub	objptr, ##10776
1e30c     5C 69 B0 FD | 	call	#_pslpeek
1e310     FD 2C 32 F9 | 	getword	local04, result1, #0
1e314     28 4E 05 F1 | 	add	fp, #40
1e318     A7 2C 62 FC | 	wrlong	local04, fp
1e31c     04 4E 85 F1 | 	sub	fp, #4
1e320     A7 12 02 FB | 	rdlong	arg01, fp
1e324     24 4E 85 F1 | 	sub	fp, #36
1e328     02 12 06 F1 | 	add	arg01, #2
1e32c     E4 68 B0 FD | 	call	#_pspeek
1e330     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e334     2C 4E 05 F1 | 	add	fp, #44
1e338     A7 FA 61 FC | 	wrlong	result1, fp
1e33c                 | ' esize=pspeek(arrptr+2)
1e33c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1e33c     08 4E 85 F1 | 	sub	fp, #8
1e340     A7 12 02 FB | 	rdlong	arg01, fp
1e344     24 4E 85 F1 | 	sub	fp, #36
1e348     04 12 06 F1 | 	add	arg01, #4
1e34c     1C 69 B0 FD | 	call	#_pslpeek
1e350     FD 2C 02 F6 | 	mov	local04, result1
1e354     34 4E 05 F1 | 	add	fp, #52
1e358     A7 26 02 FB | 	rdlong	local01, fp
1e35c     34 4E 85 F1 | 	sub	fp, #52
1e360     16 27 12 F2 | 	cmp	local01, local04 wc
1e364     54 00 90 3D |  if_ae	jmp	#LR__2386
1e368     24 4E 05 F1 | 	add	fp, #36
1e36c     A7 12 02 FB | 	rdlong	arg01, fp
1e370     24 4E 85 F1 | 	sub	fp, #36
1e374     08 12 06 F1 | 	add	arg01, #8
1e378     F0 68 B0 FD | 	call	#_pslpeek
1e37c     FD 26 02 F6 | 	mov	local01, result1
1e380     38 4E 05 F1 | 	add	fp, #56
1e384     A7 2C 02 FB | 	rdlong	local04, fp
1e388     38 4E 85 F1 | 	sub	fp, #56
1e38c     13 2D 12 F2 | 	cmp	local04, local01 wc
1e390     28 00 90 3D |  if_ae	jmp	#LR__2386
1e394     24 4E 05 F1 | 	add	fp, #36
1e398     A7 12 02 FB | 	rdlong	arg01, fp
1e39c     24 4E 85 F1 | 	sub	fp, #36
1e3a0     0C 12 06 F1 | 	add	arg01, #12
1e3a4     C4 68 B0 FD | 	call	#_pslpeek
1e3a8     3C 4E 05 F1 | 	add	fp, #60
1e3ac     A7 2C 02 FB | 	rdlong	local04, fp
1e3b0     3C 4E 85 F1 | 	sub	fp, #60
1e3b4     FD 2C 12 F2 | 	cmp	local04, result1 wc
1e3b8     10 00 90 CD |  if_b	jmp	#LR__2387
1e3bc                 | LR__2386
1e3bc     31 12 06 F6 | 	mov	arg01, #49
1e3c0     00 14 06 F6 | 	mov	arg02, #0
1e3c4     D4 65 B0 FD | 	call	#_printerror
1e3c8     64 02 90 FD | 	jmp	#LR__2403
1e3cc                 | LR__2387
1e3cc     24 4E 05 F1 | 	add	fp, #36
1e3d0     A7 12 02 FB | 	rdlong	arg01, fp
1e3d4     09 2D 02 F6 | 	mov	local04, arg01
1e3d8     10 2C 06 F1 | 	add	local04, #16
1e3dc     24 4E 85 F1 | 	sub	fp, #36
1e3e0     04 12 06 F1 | 	add	arg01, #4
1e3e4     84 68 B0 FD | 	call	#_pslpeek
1e3e8     FD 26 02 F6 | 	mov	local01, result1
1e3ec     38 4E 05 F1 | 	add	fp, #56
1e3f0     A7 28 02 FB | 	rdlong	local02, fp
1e3f4     14 27 02 FD | 	qmul	local01, local02
1e3f8     04 4E 85 F1 | 	sub	fp, #4
1e3fc     A7 2A 02 FB | 	rdlong	local03, fp
1e400     10 4E 85 F1 | 	sub	fp, #16
1e404     A7 12 02 FB | 	rdlong	arg01, fp
1e408     24 4E 85 F1 | 	sub	fp, #36
1e40c     08 12 06 F1 | 	add	arg01, #8
1e410     18 28 62 FD | 	getqx	local02
1e414     14 2B 02 F1 | 	add	local03, local02
1e418     50 68 B0 FD | 	call	#_pslpeek
1e41c     FD 28 02 F6 | 	mov	local02, result1
1e420     24 4E 05 F1 | 	add	fp, #36
1e424     A7 12 02 FB | 	rdlong	arg01, fp
1e428     24 4E 85 F1 | 	sub	fp, #36
1e42c     04 12 06 F1 | 	add	arg01, #4
1e430     38 68 B0 FD | 	call	#_pslpeek
1e434     FD 28 02 FD | 	qmul	local02, result1
1e438     3C 4E 05 F1 | 	add	fp, #60
1e43c     A7 28 02 FB | 	rdlong	local02, fp
1e440     18 26 62 FD | 	getqx	local01
1e444     14 27 02 FD | 	qmul	local01, local02
1e448     10 4E 85 F1 | 	sub	fp, #16
1e44c     A7 28 02 FB | 	rdlong	local02, fp
1e450     18 26 62 FD | 	getqx	local01
1e454     13 2B 02 F1 | 	add	local03, local01
1e458     15 29 02 FD | 	qmul	local02, local03
1e45c     04 4E 05 F1 | 	add	fp, #4
1e460                 | ' 
1e460                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1e460                 | ' select case arrtype
1e460     18 2A 62 FD | 	getqx	local03
1e464     15 2D 02 F1 | 	add	local04, local03
1e468     A7 2C 62 FC | 	wrlong	local04, fp
1e46c     08 4E 85 F1 | 	sub	fp, #8
1e470     A7 2E 02 FB | 	rdlong	local05, fp
1e474     28 4E 85 F1 | 	sub	fp, #40
1e478     00 2F 86 F1 | 	sub	local05, #256
1e47c     0C 2E 26 F3 | 	fle	local05, #12
1e480     30 2E 62 FD | 	jmprel	local05
1e484                 | LR__2388
1e484     30 00 90 FD | 	jmp	#LR__2389
1e488     58 00 90 FD | 	jmp	#LR__2390
1e48c     6C 00 90 FD | 	jmp	#LR__2391
1e490     80 00 90 FD | 	jmp	#LR__2392
1e494     B0 00 90 FD | 	jmp	#LR__2393
1e498     E0 00 90 FD | 	jmp	#LR__2394
1e49c     F4 00 90 FD | 	jmp	#LR__2395
1e4a0     08 01 90 FD | 	jmp	#LR__2396
1e4a4     1C 01 90 FD | 	jmp	#LR__2397
1e4a8     30 01 90 FD | 	jmp	#LR__2398
1e4ac     44 01 90 FD | 	jmp	#LR__2399
1e4b0     58 01 90 FD | 	jmp	#LR__2400
1e4b4     6C 01 90 FD | 	jmp	#LR__2401
1e4b8                 | LR__2389
1e4b8     A7 12 02 F6 | 	mov	arg01, fp
1e4bc     30 4E 05 F1 | 	add	fp, #48
1e4c0     A7 14 02 FB | 	rdlong	arg02, fp
1e4c4     30 4E 85 F1 | 	sub	fp, #48
1e4c8     0C 16 06 F6 | 	mov	arg03, #12
1e4cc     0B 00 00 FF 
1e4d0     CC E4 05 F1 | 	add	objptr, ##5836
1e4d4     14 93 B0 FD | 	call	#_psram_spin2_write
1e4d8     0B 00 00 FF 
1e4dc     CC E4 85 F1 | 	sub	objptr, ##5836
1e4e0     4C 01 90 FD | 	jmp	#LR__2402
1e4e4                 | LR__2390
1e4e4     30 4E 05 F1 | 	add	fp, #48
1e4e8     A7 12 02 FB | 	rdlong	arg01, fp
1e4ec     30 4E 85 F1 | 	sub	fp, #48
1e4f0     A7 14 02 FB | 	rdlong	arg02, fp
1e4f4     D4 66 B0 FD | 	call	#_pspoke
1e4f8     34 01 90 FD | 	jmp	#LR__2402
1e4fc                 | LR__2391
1e4fc     30 4E 05 F1 | 	add	fp, #48
1e500     A7 12 02 FB | 	rdlong	arg01, fp
1e504     30 4E 85 F1 | 	sub	fp, #48
1e508     A7 14 02 FB | 	rdlong	arg02, fp
1e50c     BC 66 B0 FD | 	call	#_pspoke
1e510     1C 01 90 FD | 	jmp	#LR__2402
1e514                 | LR__2392
1e514     30 4E 05 F1 | 	add	fp, #48
1e518     A7 12 02 FB | 	rdlong	arg01, fp
1e51c     30 4E 85 F1 | 	sub	fp, #48
1e520     A7 14 02 FB | 	rdlong	arg02, fp
1e524     A4 66 B0 FD | 	call	#_pspoke
1e528     30 4E 05 F1 | 	add	fp, #48
1e52c     A7 12 02 FB | 	rdlong	arg01, fp
1e530     30 4E 85 F1 | 	sub	fp, #48
1e534     01 12 06 F1 | 	add	arg01, #1
1e538     A7 14 02 FB | 	rdlong	arg02, fp
1e53c     08 14 46 F0 | 	shr	arg02, #8
1e540     88 66 B0 FD | 	call	#_pspoke
1e544     E8 00 90 FD | 	jmp	#LR__2402
1e548                 | LR__2393
1e548     30 4E 05 F1 | 	add	fp, #48
1e54c     A7 12 02 FB | 	rdlong	arg01, fp
1e550     30 4E 85 F1 | 	sub	fp, #48
1e554     A7 14 02 FB | 	rdlong	arg02, fp
1e558     70 66 B0 FD | 	call	#_pspoke
1e55c     30 4E 05 F1 | 	add	fp, #48
1e560     A7 12 02 FB | 	rdlong	arg01, fp
1e564     30 4E 85 F1 | 	sub	fp, #48
1e568     01 12 06 F1 | 	add	arg01, #1
1e56c     A7 14 02 FB | 	rdlong	arg02, fp
1e570     08 14 46 F0 | 	shr	arg02, #8
1e574     54 66 B0 FD | 	call	#_pspoke
1e578     B4 00 90 FD | 	jmp	#LR__2402
1e57c                 | LR__2394
1e57c     30 4E 05 F1 | 	add	fp, #48
1e580     A7 12 02 FB | 	rdlong	arg01, fp
1e584     30 4E 85 F1 | 	sub	fp, #48
1e588     A7 14 02 FB | 	rdlong	arg02, fp
1e58c     AC 65 B0 FD | 	call	#_pslpoke
1e590     9C 00 90 FD | 	jmp	#LR__2402
1e594                 | LR__2395
1e594     30 4E 05 F1 | 	add	fp, #48
1e598     A7 12 02 FB | 	rdlong	arg01, fp
1e59c     30 4E 85 F1 | 	sub	fp, #48
1e5a0     A7 14 02 FB | 	rdlong	arg02, fp
1e5a4     94 65 B0 FD | 	call	#_pslpoke
1e5a8     84 00 90 FD | 	jmp	#LR__2402
1e5ac                 | LR__2396
1e5ac     30 4E 05 F1 | 	add	fp, #48
1e5b0     A7 12 02 FB | 	rdlong	arg01, fp
1e5b4     30 4E 85 F1 | 	sub	fp, #48
1e5b8     A7 14 02 FB | 	rdlong	arg02, fp
1e5bc     7C 65 B0 FD | 	call	#_pslpoke
1e5c0     6C 00 90 FD | 	jmp	#LR__2402
1e5c4                 | LR__2397
1e5c4     30 4E 05 F1 | 	add	fp, #48
1e5c8     A7 12 02 FB | 	rdlong	arg01, fp
1e5cc     30 4E 85 F1 | 	sub	fp, #48
1e5d0     A7 14 02 FB | 	rdlong	arg02, fp
1e5d4     64 65 B0 FD | 	call	#_pslpoke
1e5d8     54 00 90 FD | 	jmp	#LR__2402
1e5dc                 | LR__2398
1e5dc     30 4E 05 F1 | 	add	fp, #48
1e5e0     A7 12 02 FB | 	rdlong	arg01, fp
1e5e4     30 4E 85 F1 | 	sub	fp, #48
1e5e8     A7 14 02 FB | 	rdlong	arg02, fp
1e5ec     4C 65 B0 FD | 	call	#_pslpoke
1e5f0     3C 00 90 FD | 	jmp	#LR__2402
1e5f4                 | LR__2399
1e5f4     30 4E 05 F1 | 	add	fp, #48
1e5f8     A7 12 02 FB | 	rdlong	arg01, fp
1e5fc     30 4E 85 F1 | 	sub	fp, #48
1e600     A7 14 02 FB | 	rdlong	arg02, fp
1e604     34 65 B0 FD | 	call	#_pslpoke
1e608     24 00 90 FD | 	jmp	#LR__2402
1e60c                 | LR__2400
1e60c     30 4E 05 F1 | 	add	fp, #48
1e610     A7 12 02 FB | 	rdlong	arg01, fp
1e614     30 4E 85 F1 | 	sub	fp, #48
1e618     A7 14 02 FB | 	rdlong	arg02, fp
1e61c     1C 65 B0 FD | 	call	#_pslpoke
1e620     0C 00 90 FD | 	jmp	#LR__2402
1e624                 | LR__2401
1e624     32 12 06 F6 | 	mov	arg01, #50
1e628     00 14 06 F6 | 	mov	arg02, #0
1e62c     6C 63 B0 FD | 	call	#_printerror
1e630                 | LR__2402
1e630                 | LR__2403
1e630     A7 F0 03 F6 | 	mov	ptra, fp
1e634     B2 00 A0 FD | 	call	#popregs_
1e638                 | _do_assign_ret
1e638     2D 00 64 FD | 	ret
1e63c                 | 
1e63c                 | ' 
1e63c                 | ' 
1e63c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1e63c                 | ' 
1e63c                 | ' sub do_getvar
1e63c                 | _do_getvar
1e63c     04 4A 05 F6 | 	mov	COUNT_, #4
1e640     A8 00 A0 FD | 	call	#pushregs_
1e644     3C F0 07 F1 | 	add	ptra, #60
1e648                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1e648     4A 00 00 FF 
1e64c     A0 E4 05 F1 | 	add	objptr, ##38048
1e650     F2 26 02 FB | 	rdlong	local01, objptr
1e654     13 17 02 F6 | 	mov	arg03, local01
1e658     01 16 66 F0 | 	shl	arg03, #1
1e65c     13 17 02 F1 | 	add	arg03, local01
1e660     02 16 66 F0 | 	shl	arg03, #2
1e664     03 00 00 FF 
1e668     04 E4 85 F1 | 	sub	objptr, ##1540
1e66c     F2 16 02 F1 | 	add	arg03, objptr
1e670     04 16 06 F1 | 	add	arg03, #4
1e674     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1e678     47 00 00 FF 
1e67c     9C E4 85 F1 | 	sub	objptr, ##36508
1e680     C4 00 90 5D |  if_ne	jmp	#LR__2411
1e684     4A 00 00 FF 
1e688     A0 E4 05 F1 | 	add	objptr, ##38048
1e68c     F2 26 02 FB | 	rdlong	local01, objptr
1e690     13 13 02 F6 | 	mov	arg01, local01
1e694     01 12 66 F0 | 	shl	arg01, #1
1e698     13 13 02 F1 | 	add	arg01, local01
1e69c     02 12 66 F0 | 	shl	arg01, #2
1e6a0     03 00 00 FF 
1e6a4     04 E4 85 F1 | 	sub	objptr, ##1540
1e6a8     F2 12 02 F1 | 	add	arg01, objptr
1e6ac     09 27 02 FB | 	rdlong	local01, arg01
1e6b0     04 26 66 F0 | 	shl	local01, #4
1e6b4     32 00 00 FF 
1e6b8     84 E4 85 F1 | 	sub	objptr, ##25732
1e6bc     F2 26 02 F1 | 	add	local01, objptr
1e6c0     04 26 06 F1 | 	add	local01, #4
1e6c4     13 13 02 FB | 	rdlong	arg01, local01
1e6c8     04 26 06 F1 | 	add	local01, #4
1e6cc     13 27 02 FB | 	rdlong	local01, local01
1e6d0     A7 12 62 FC | 	wrlong	arg01, fp
1e6d4     04 4E 05 F1 | 	add	fp, #4
1e6d8     A7 26 62 FC | 	wrlong	local01, fp
1e6dc     35 00 00 FF 
1e6e0     88 E4 05 F1 | 	add	objptr, ##27272
1e6e4     F2 26 02 FB | 	rdlong	local01, objptr
1e6e8     13 13 02 F6 | 	mov	arg01, local01
1e6ec     01 12 66 F0 | 	shl	arg01, #1
1e6f0     13 13 02 F1 | 	add	arg01, local01
1e6f4     02 12 66 F0 | 	shl	arg01, #2
1e6f8     03 00 00 FF 
1e6fc     04 E4 85 F1 | 	sub	objptr, ##1540
1e700     F2 12 02 F1 | 	add	arg01, objptr
1e704     09 27 02 FB | 	rdlong	local01, arg01
1e708     04 26 66 F0 | 	shl	local01, #4
1e70c     32 00 00 FF 
1e710     84 E4 85 F1 | 	sub	objptr, ##25732
1e714     F2 26 02 F1 | 	add	local01, objptr
1e718     0C 26 06 F1 | 	add	local01, #12
1e71c     13 27 02 FB | 	rdlong	local01, local01
1e720     04 4E 05 F1 | 	add	fp, #4
1e724     A7 26 62 FC | 	wrlong	local01, fp
1e728                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1e728                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1e728                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1e728     08 4E 85 F1 | 	sub	fp, #8
1e72c     00 27 16 F2 | 	cmp	local01, #256 wc
1e730     15 00 00 FF 
1e734     18 E4 85 F1 | 	sub	objptr, ##10776
1e738     0C 00 90 3D |  if_ae	jmp	#LR__2410
1e73c     A7 12 02 F6 | 	mov	arg01, fp
1e740     08 F2 BE FD | 	call	#_push
1e744     A0 04 90 FD | 	jmp	#LR__2432
1e748                 | LR__2410
1e748                 | LR__2411
1e748     4A 00 00 FF 
1e74c     A0 E4 05 F1 | 	add	objptr, ##38048
1e750     F2 16 02 FB | 	rdlong	arg03, objptr
1e754     0B 15 02 F6 | 	mov	arg02, arg03
1e758     01 14 66 F0 | 	shl	arg02, #1
1e75c     0B 15 02 F1 | 	add	arg02, arg03
1e760     02 14 66 F0 | 	shl	arg02, #2
1e764     03 00 00 FF 
1e768     04 E4 85 F1 | 	sub	objptr, ##1540
1e76c     F2 14 02 F1 | 	add	arg02, objptr
1e770     0A 17 02 FB | 	rdlong	arg03, arg02
1e774     04 16 66 F0 | 	shl	arg03, #4
1e778     32 00 00 FF 
1e77c     84 E4 85 F1 | 	sub	objptr, ##25732
1e780     F2 16 02 F1 | 	add	arg03, objptr
1e784     04 16 06 F1 | 	add	arg03, #4
1e788     0B 13 02 FB | 	rdlong	arg01, arg03
1e78c     0C 4E 05 F1 | 	add	fp, #12
1e790     A7 12 62 FC | 	wrlong	arg01, fp
1e794     0C 4E 85 F1 | 	sub	fp, #12
1e798     15 00 00 FF 
1e79c     18 E4 85 F1 | 	sub	objptr, ##10776
1e7a0     C8 64 B0 FD | 	call	#_pslpeek
1e7a4     FD FA 31 F9 | 	getword	result1, result1, #0
1e7a8     10 4E 05 F1 | 	add	fp, #16
1e7ac     A7 FA 61 FC | 	wrlong	result1, fp
1e7b0     4A 00 00 FF 
1e7b4     A0 E4 05 F1 | 	add	objptr, ##38048
1e7b8     F2 16 02 FB | 	rdlong	arg03, objptr
1e7bc     0B 15 02 F6 | 	mov	arg02, arg03
1e7c0     01 14 66 F0 | 	shl	arg02, #1
1e7c4     0B 15 02 F1 | 	add	arg02, arg03
1e7c8     02 14 66 F0 | 	shl	arg02, #2
1e7cc     03 00 00 FF 
1e7d0     04 E4 85 F1 | 	sub	objptr, ##1540
1e7d4     F2 14 02 F1 | 	add	arg02, objptr
1e7d8     04 14 06 F1 | 	add	arg02, #4
1e7dc     0A 17 02 FB | 	rdlong	arg03, arg02
1e7e0     04 4E 05 F1 | 	add	fp, #4
1e7e4     A7 16 62 FC | 	wrlong	arg03, fp
1e7e8     08 4E 85 F1 | 	sub	fp, #8
1e7ec     A7 12 02 FB | 	rdlong	arg01, fp
1e7f0     0C 4E 85 F1 | 	sub	fp, #12
1e7f4     02 12 06 F1 | 	add	arg01, #2
1e7f8     47 00 00 FF 
1e7fc     9C E4 85 F1 | 	sub	objptr, ##36508
1e800     10 64 B0 FD | 	call	#_pspeek
1e804     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e808     18 4E 05 F1 | 	add	fp, #24
1e80c     A7 FA 61 FC | 	wrlong	result1, fp
1e810     0C 4E 85 F1 | 	sub	fp, #12
1e814     A7 12 02 FB | 	rdlong	arg01, fp
1e818     0C 4E 85 F1 | 	sub	fp, #12
1e81c     04 12 06 F1 | 	add	arg01, #4
1e820     48 64 B0 FD | 	call	#_pslpeek
1e824     1C 4E 05 F1 | 	add	fp, #28
1e828     A7 FA 61 FC | 	wrlong	result1, fp
1e82c     10 4E 85 F1 | 	sub	fp, #16
1e830     A7 12 02 FB | 	rdlong	arg01, fp
1e834     0C 4E 85 F1 | 	sub	fp, #12
1e838     08 12 06 F1 | 	add	arg01, #8
1e83c     2C 64 B0 FD | 	call	#_pslpeek
1e840     20 4E 05 F1 | 	add	fp, #32
1e844     A7 FA 61 FC | 	wrlong	result1, fp
1e848     14 4E 85 F1 | 	sub	fp, #20
1e84c     A7 12 02 FB | 	rdlong	arg01, fp
1e850     0C 4E 85 F1 | 	sub	fp, #12
1e854     0C 12 06 F1 | 	add	arg01, #12
1e858     10 64 B0 FD | 	call	#_pslpeek
1e85c     24 4E 05 F1 | 	add	fp, #36
1e860     A7 FA 61 FC | 	wrlong	result1, fp
1e864                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1e864                 | ' esize=pspeek(arrptr+2)
1e864                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1e864                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1e864                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1e864                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1e864     10 4E 85 F1 | 	sub	fp, #16
1e868     A7 16 02 FB | 	rdlong	arg03, fp
1e86c     14 4E 85 F1 | 	sub	fp, #20
1e870     03 16 16 F2 | 	cmp	arg03, #3 wc
1e874     38 00 90 CD |  if_b	jmp	#LR__2412
1e878     38 F0 BE FD | 	call	#_pop
1e87c     FF 16 02 F6 | 	mov	arg03, result3
1e880     A7 FA 61 FC | 	wrlong	result1, fp
1e884     04 4E 05 F1 | 	add	fp, #4
1e888     A7 FC 61 FC | 	wrlong	result2, fp
1e88c     04 4E 05 F1 | 	add	fp, #4
1e890     A7 16 62 FC | 	wrlong	arg03, fp
1e894     08 4E 85 F1 | 	sub	fp, #8
1e898     A7 12 02 F6 | 	mov	arg01, fp
1e89c     F8 F1 BE FD | 	call	#_converttoint
1e8a0     30 4E 05 F1 | 	add	fp, #48
1e8a4     A7 FA 61 FC | 	wrlong	result1, fp
1e8a8     30 4E 85 F1 | 	sub	fp, #48
1e8ac     0C 00 90 FD | 	jmp	#LR__2413
1e8b0                 | LR__2412
1e8b0     30 4E 05 F1 | 	add	fp, #48
1e8b4     A7 00 68 FC | 	wrlong	#0, fp
1e8b8     30 4E 85 F1 | 	sub	fp, #48
1e8bc                 | LR__2413
1e8bc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1e8bc     14 4E 05 F1 | 	add	fp, #20
1e8c0     A7 16 02 FB | 	rdlong	arg03, fp
1e8c4     14 4E 85 F1 | 	sub	fp, #20
1e8c8     02 16 16 F2 | 	cmp	arg03, #2 wc
1e8cc     38 00 90 CD |  if_b	jmp	#LR__2414
1e8d0     E0 EF BE FD | 	call	#_pop
1e8d4     FF 16 02 F6 | 	mov	arg03, result3
1e8d8     A7 FA 61 FC | 	wrlong	result1, fp
1e8dc     04 4E 05 F1 | 	add	fp, #4
1e8e0     A7 FC 61 FC | 	wrlong	result2, fp
1e8e4     04 4E 05 F1 | 	add	fp, #4
1e8e8     A7 16 62 FC | 	wrlong	arg03, fp
1e8ec     08 4E 85 F1 | 	sub	fp, #8
1e8f0     A7 12 02 F6 | 	mov	arg01, fp
1e8f4     A0 F1 BE FD | 	call	#_converttoint
1e8f8     2C 4E 05 F1 | 	add	fp, #44
1e8fc     A7 FA 61 FC | 	wrlong	result1, fp
1e900     2C 4E 85 F1 | 	sub	fp, #44
1e904     0C 00 90 FD | 	jmp	#LR__2415
1e908                 | LR__2414
1e908     2C 4E 05 F1 | 	add	fp, #44
1e90c     A7 00 68 FC | 	wrlong	#0, fp
1e910     2C 4E 85 F1 | 	sub	fp, #44
1e914                 | LR__2415
1e914                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1e914     14 4E 05 F1 | 	add	fp, #20
1e918     A7 16 02 FB | 	rdlong	arg03, fp
1e91c     14 4E 85 F1 | 	sub	fp, #20
1e920     01 16 16 F2 | 	cmp	arg03, #1 wc
1e924     38 00 90 CD |  if_b	jmp	#LR__2416
1e928     88 EF BE FD | 	call	#_pop
1e92c     FF 16 02 F6 | 	mov	arg03, result3
1e930     A7 FA 61 FC | 	wrlong	result1, fp
1e934     04 4E 05 F1 | 	add	fp, #4
1e938     A7 FC 61 FC | 	wrlong	result2, fp
1e93c     04 4E 05 F1 | 	add	fp, #4
1e940     A7 16 62 FC | 	wrlong	arg03, fp
1e944     08 4E 85 F1 | 	sub	fp, #8
1e948     A7 12 02 F6 | 	mov	arg01, fp
1e94c     48 F1 BE FD | 	call	#_converttoint
1e950     28 4E 05 F1 | 	add	fp, #40
1e954     A7 FA 61 FC | 	wrlong	result1, fp
1e958     28 4E 85 F1 | 	sub	fp, #40
1e95c     0C 00 90 FD | 	jmp	#LR__2417
1e960                 | LR__2416
1e960     28 4E 05 F1 | 	add	fp, #40
1e964     A7 00 68 FC | 	wrlong	#0, fp
1e968     28 4E 85 F1 | 	sub	fp, #40
1e96c                 | LR__2417
1e96c     0C 4E 05 F1 | 	add	fp, #12
1e970     A7 28 02 FB | 	rdlong	local02, fp
1e974     1C 4E 05 F1 | 	add	fp, #28
1e978     A7 2A 02 FB | 	rdlong	local03, fp
1e97c     04 4E 05 F1 | 	add	fp, #4
1e980     A7 FC 01 FB | 	rdlong	result2, fp
1e984     10 4E 85 F1 | 	sub	fp, #16
1e988     A7 FE 01 FB | 	rdlong	result3, fp
1e98c     FF FC 01 FD | 	qmul	result2, result3
1e990     10 28 06 F1 | 	add	local02, #16
1e994     14 4E 05 F1 | 	add	fp, #20
1e998     A7 FC 01 FB | 	rdlong	result2, fp
1e99c     18 FA 61 FD | 	getqx	result1
1e9a0     FF FC 01 FD | 	qmul	result2, result3
1e9a4     FD 2A 02 F1 | 	add	local03, result1
1e9a8     10 4E 85 F1 | 	sub	fp, #16
1e9ac     A7 FE 01 FB | 	rdlong	result3, fp
1e9b0     18 FC 61 FD | 	getqx	result2
1e9b4     FF FC 01 FD | 	qmul	result2, result3
1e9b8     08 4E 85 F1 | 	sub	fp, #8
1e9bc     A7 FE 01 FB | 	rdlong	result3, fp
1e9c0     18 FC 61 FD | 	getqx	result2
1e9c4     FE 2A 02 F1 | 	add	local03, result2
1e9c8     FF 2A 02 FD | 	qmul	local03, result3
1e9cc     1C 4E 05 F1 | 	add	fp, #28
1e9d0                 | ' 
1e9d0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1e9d0                 | ' 
1e9d0                 | ' select case vartype
1e9d0     18 FC 61 FD | 	getqx	result2
1e9d4     FE 28 02 F1 | 	add	local02, result2
1e9d8     A7 28 62 FC | 	wrlong	local02, fp
1e9dc     24 4E 85 F1 | 	sub	fp, #36
1e9e0     A7 2C 02 FB | 	rdlong	local04, fp
1e9e4     10 4E 85 F1 | 	sub	fp, #16
1e9e8     00 2D 86 F1 | 	sub	local04, #256
1e9ec     0C 2C 26 F3 | 	fle	local04, #12
1e9f0     30 2C 62 FD | 	jmprel	local04
1e9f4                 | LR__2418
1e9f4     30 00 90 FD | 	jmp	#LR__2419
1e9f8     58 00 90 FD | 	jmp	#LR__2420
1e9fc     8C 00 90 FD | 	jmp	#LR__2421
1ea00     AC 00 90 FD | 	jmp	#LR__2422
1ea04     E8 00 90 FD | 	jmp	#LR__2423
1ea08     08 01 90 FD | 	jmp	#LR__2424
1ea0c     24 01 90 FD | 	jmp	#LR__2425
1ea10     40 01 90 FD | 	jmp	#LR__2426
1ea14     50 01 90 FD | 	jmp	#LR__2427
1ea18     60 01 90 FD | 	jmp	#LR__2428
1ea1c     7C 01 90 FD | 	jmp	#LR__2429
1ea20     8C 01 90 FD | 	jmp	#LR__2430
1ea24     B8 01 90 FD | 	jmp	#LR__2431
1ea28                 | LR__2419
1ea28     A7 12 02 F6 | 	mov	arg01, fp
1ea2c     34 4E 05 F1 | 	add	fp, #52
1ea30     A7 14 02 FB | 	rdlong	arg02, fp
1ea34     34 4E 85 F1 | 	sub	fp, #52
1ea38     0C 16 06 F6 | 	mov	arg03, #12
1ea3c     0B 00 00 FF 
1ea40     CC E4 05 F1 | 	add	objptr, ##5836
1ea44     08 8D B0 FD | 	call	#_psram_spin2_read1
1ea48     0B 00 00 FF 
1ea4c     CC E4 85 F1 | 	sub	objptr, ##5836
1ea50     8C 01 90 FD | 	jmp	#LR__2431
1ea54                 | LR__2420
1ea54     08 4E 05 F1 | 	add	fp, #8
1ea58     A7 38 68 FC | 	wrlong	#28, fp
1ea5c     2C 4E 05 F1 | 	add	fp, #44
1ea60     A7 12 02 FB | 	rdlong	arg01, fp
1ea64     34 4E 85 F1 | 	sub	fp, #52
1ea68     A8 61 B0 FD | 	call	#_pspeek
1ea6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ea70     A7 FA 61 FC | 	wrlong	result1, fp
1ea74     80 FA 15 F2 | 	cmp	result1, #128 wc
1ea78     00 27 66 36 |  if_ae	neg	local01, #256
1ea7c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1ea80     15 27 42 35 |  if_ae	or	local01, local03
1ea84     A7 26 62 3C |  if_ae	wrlong	local01, fp
1ea88     54 01 90 FD | 	jmp	#LR__2431
1ea8c                 | LR__2421
1ea8c     08 4E 05 F1 | 	add	fp, #8
1ea90     A7 3A 68 FC | 	wrlong	#29, fp
1ea94     2C 4E 05 F1 | 	add	fp, #44
1ea98     A7 12 02 FB | 	rdlong	arg01, fp
1ea9c     34 4E 85 F1 | 	sub	fp, #52
1eaa0     70 61 B0 FD | 	call	#_pspeek
1eaa4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1eaa8     A7 FA 61 FC | 	wrlong	result1, fp
1eaac     30 01 90 FD | 	jmp	#LR__2431
1eab0                 | LR__2422
1eab0     08 4E 05 F1 | 	add	fp, #8
1eab4     A7 38 68 FC | 	wrlong	#28, fp
1eab8     2C 4E 05 F1 | 	add	fp, #44
1eabc     A7 12 02 FB | 	rdlong	arg01, fp
1eac0     34 4E 85 F1 | 	sub	fp, #52
1eac4     A4 61 B0 FD | 	call	#_pslpeek
1eac8     FD FA 31 F9 | 	getword	result1, result1, #0
1eacc     A7 FA 61 FC | 	wrlong	result1, fp
1ead0     40 00 00 FF 
1ead4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1ead8     FF 7F 00 3F 
1eadc     00 27 06 36 |  if_ae	mov	local01, ##16776960
1eae0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1eae4     15 27 42 35 |  if_ae	or	local01, local03
1eae8     A7 26 62 3C |  if_ae	wrlong	local01, fp
1eaec     F0 00 90 FD | 	jmp	#LR__2431
1eaf0                 | LR__2423
1eaf0     08 4E 05 F1 | 	add	fp, #8
1eaf4     A7 3A 68 FC | 	wrlong	#29, fp
1eaf8     2C 4E 05 F1 | 	add	fp, #44
1eafc     A7 12 02 FB | 	rdlong	arg01, fp
1eb00     34 4E 85 F1 | 	sub	fp, #52
1eb04     64 61 B0 FD | 	call	#_pslpeek
1eb08     FD FA 31 F9 | 	getword	result1, result1, #0
1eb0c     A7 FA 61 FC | 	wrlong	result1, fp
1eb10     CC 00 90 FD | 	jmp	#LR__2431
1eb14                 | LR__2424
1eb14     08 4E 05 F1 | 	add	fp, #8
1eb18     A7 38 68 FC | 	wrlong	#28, fp
1eb1c     2C 4E 05 F1 | 	add	fp, #44
1eb20     A7 12 02 FB | 	rdlong	arg01, fp
1eb24     34 4E 85 F1 | 	sub	fp, #52
1eb28     40 61 B0 FD | 	call	#_pslpeek
1eb2c     A7 FA 61 FC | 	wrlong	result1, fp
1eb30     AC 00 90 FD | 	jmp	#LR__2431
1eb34                 | LR__2425
1eb34     08 4E 05 F1 | 	add	fp, #8
1eb38     A7 3A 68 FC | 	wrlong	#29, fp
1eb3c     2C 4E 05 F1 | 	add	fp, #44
1eb40     A7 12 02 FB | 	rdlong	arg01, fp
1eb44     34 4E 85 F1 | 	sub	fp, #52
1eb48     20 61 B0 FD | 	call	#_pslpeek
1eb4c     A7 FA 61 FC | 	wrlong	result1, fp
1eb50     8C 00 90 FD | 	jmp	#LR__2431
1eb54                 | LR__2426
1eb54     08 4E 05 F1 | 	add	fp, #8
1eb58     A7 FE 69 FC | 	wrlong	#255, fp
1eb5c     08 4E 85 F1 | 	sub	fp, #8
1eb60     A7 60 68 FC | 	wrlong	#48, fp
1eb64     78 00 90 FD | 	jmp	#LR__2431
1eb68                 | LR__2427
1eb68     08 4E 05 F1 | 	add	fp, #8
1eb6c     A7 FE 69 FC | 	wrlong	#255, fp
1eb70     08 4E 85 F1 | 	sub	fp, #8
1eb74     A7 60 68 FC | 	wrlong	#48, fp
1eb78     64 00 90 FD | 	jmp	#LR__2431
1eb7c                 | LR__2428
1eb7c     08 4E 05 F1 | 	add	fp, #8
1eb80     A7 3C 68 FC | 	wrlong	#30, fp
1eb84     2C 4E 05 F1 | 	add	fp, #44
1eb88     A7 12 02 FB | 	rdlong	arg01, fp
1eb8c     34 4E 85 F1 | 	sub	fp, #52
1eb90     D8 60 B0 FD | 	call	#_pslpeek
1eb94     A7 FA 61 FC | 	wrlong	result1, fp
1eb98     44 00 90 FD | 	jmp	#LR__2431
1eb9c                 | LR__2429
1eb9c     08 4E 05 F1 | 	add	fp, #8
1eba0     A7 FE 69 FC | 	wrlong	#255, fp
1eba4     08 4E 85 F1 | 	sub	fp, #8
1eba8     A7 60 68 FC | 	wrlong	#48, fp
1ebac     30 00 90 FD | 	jmp	#LR__2431
1ebb0                 | LR__2430
1ebb0     08 4E 05 F1 | 	add	fp, #8
1ebb4     A7 3E 68 FC | 	wrlong	#31, fp
1ebb8     2C 4E 05 F1 | 	add	fp, #44
1ebbc     A7 12 02 FB | 	rdlong	arg01, fp
1ebc0     34 4E 85 F1 | 	sub	fp, #52
1ebc4     A4 60 B0 FD | 	call	#_pslpeek
1ebc8     A7 FA 61 FC | 	wrlong	result1, fp
1ebcc     00 04 00 FF 
1ebd0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1ebd4     08 4E 05 31 |  if_ae	add	fp, #8
1ebd8     A7 56 68 3C |  if_ae	wrlong	#43, fp
1ebdc     08 4E 85 31 |  if_ae	sub	fp, #8
1ebe0                 | LR__2431
1ebe0     A7 12 02 F6 | 	mov	arg01, fp
1ebe4     64 ED BE FD | 	call	#_push
1ebe8                 | LR__2432
1ebe8     A7 F0 03 F6 | 	mov	ptra, fp
1ebec     B2 00 A0 FD | 	call	#popregs_
1ebf0                 | _do_getvar_ret
1ebf0     2D 00 64 FD | 	ret
1ebf4                 | 
1ebf4                 | ' 
1ebf4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1ebf4                 | ' 
1ebf4                 | ' sub do_getaddr
1ebf4                 | _do_getaddr
1ebf4     01 4A 05 F6 | 	mov	COUNT_, #1
1ebf8     A8 00 A0 FD | 	call	#pushregs_
1ebfc     38 F0 07 F1 | 	add	ptra, #56
1ec00                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1ec00                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1ec00     4A 00 00 FF 
1ec04     A0 E4 05 F1 | 	add	objptr, ##38048
1ec08     F2 12 02 FB | 	rdlong	arg01, objptr
1ec0c     09 FD 01 F6 | 	mov	result2, arg01
1ec10     01 FC 65 F0 | 	shl	result2, #1
1ec14     09 FD 01 F1 | 	add	result2, arg01
1ec18     02 FC 65 F0 | 	shl	result2, #2
1ec1c     03 00 00 FF 
1ec20     04 E4 85 F1 | 	sub	objptr, ##1540
1ec24     F2 FC 01 F1 | 	add	result2, objptr
1ec28     04 FC 05 F1 | 	add	result2, #4
1ec2c     FE FC 09 FB | 	rdlong	result2, result2 wz
1ec30     47 00 00 FF 
1ec34     9C E4 85 F1 | 	sub	objptr, ##36508
1ec38     10 01 90 5D |  if_ne	jmp	#LR__2440
1ec3c     4A 00 00 FF 
1ec40     A0 E4 05 F1 | 	add	objptr, ##38048
1ec44     F2 12 02 FB | 	rdlong	arg01, objptr
1ec48     09 FD 01 F6 | 	mov	result2, arg01
1ec4c     01 FC 65 F0 | 	shl	result2, #1
1ec50     09 FD 01 F1 | 	add	result2, arg01
1ec54     02 FC 65 F0 | 	shl	result2, #2
1ec58     03 00 00 FF 
1ec5c     04 E4 85 F1 | 	sub	objptr, ##1540
1ec60     F2 FC 01 F1 | 	add	result2, objptr
1ec64     FE 12 02 FB | 	rdlong	arg01, result2
1ec68     04 12 66 F0 | 	shl	arg01, #4
1ec6c     32 00 00 FF 
1ec70     84 E4 85 F1 | 	sub	objptr, ##25732
1ec74     F2 12 02 F1 | 	add	arg01, objptr
1ec78     0C 12 06 F1 | 	add	arg01, #12
1ec7c     09 13 02 FB | 	rdlong	arg01, arg01
1ec80     08 4E 05 F1 | 	add	fp, #8
1ec84     A7 12 62 FC | 	wrlong	arg01, fp
1ec88                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ec88                 | '    if t1.result_type>=array_no_type then goto 2200
1ec88     08 4E 85 F1 | 	sub	fp, #8
1ec8c     00 13 16 F2 | 	cmp	arg01, #256 wc
1ec90     15 00 00 FF 
1ec94     18 E4 85 F1 | 	sub	objptr, ##10776
1ec98     B0 00 90 3D |  if_ae	jmp	#LR__2441
1ec9c     4A 00 00 FF 
1eca0     A0 E4 05 F1 | 	add	objptr, ##38048
1eca4     F2 12 02 FB | 	rdlong	arg01, objptr
1eca8     09 FF 01 F6 | 	mov	result3, arg01
1ecac     01 FE 65 F0 | 	shl	result3, #1
1ecb0     09 FF 01 F1 | 	add	result3, arg01
1ecb4     02 FE 65 F0 | 	shl	result3, #2
1ecb8     03 00 00 FF 
1ecbc     04 E4 85 F1 | 	sub	objptr, ##1540
1ecc0     F2 FE 01 F1 | 	add	result3, objptr
1ecc4     FF FA 01 FB | 	rdlong	result1, result3
1ecc8     04 FA 65 F0 | 	shl	result1, #4
1eccc     32 00 00 FF 
1ecd0     84 E4 85 F1 | 	sub	objptr, ##25732
1ecd4     F2 FA 01 F1 | 	add	result1, objptr
1ecd8     04 FA 05 F1 | 	add	result1, #4
1ecdc     A7 FA 61 FC | 	wrlong	result1, fp
1ece0     35 00 00 FF 
1ece4     88 E4 05 F1 | 	add	objptr, ##27272
1ece8     F2 FE 01 FB | 	rdlong	result3, objptr
1ecec     FF 12 02 F6 | 	mov	arg01, result3
1ecf0     01 12 66 F0 | 	shl	arg01, #1
1ecf4     FF 12 02 F1 | 	add	arg01, result3
1ecf8     02 12 66 F0 | 	shl	arg01, #2
1ecfc     03 00 00 FF 
1ed00     04 E4 85 F1 | 	sub	objptr, ##1540
1ed04     F2 12 02 F1 | 	add	arg01, objptr
1ed08     09 13 02 FB | 	rdlong	arg01, arg01
1ed0c     04 12 66 F0 | 	shl	arg01, #4
1ed10     32 00 00 FF 
1ed14     84 E4 85 F1 | 	sub	objptr, ##25732
1ed18     F2 12 02 F1 | 	add	arg01, objptr
1ed1c     0C 12 06 F1 | 	add	arg01, #12
1ed20     09 13 02 FB | 	rdlong	arg01, arg01
1ed24     04 4E 05 F1 | 	add	fp, #4
1ed28     A7 12 62 FC | 	wrlong	arg01, fp
1ed2c     04 4E 05 F1 | 	add	fp, #4
1ed30     A7 3A 68 FC | 	wrlong	#29, fp
1ed34     08 4E 85 F1 | 	sub	fp, #8
1ed38     A7 12 02 F6 | 	mov	arg01, fp
1ed3c     15 00 00 FF 
1ed40     18 E4 85 F1 | 	sub	objptr, ##10776
1ed44     04 EC BE FD | 	call	#_push
1ed48                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1ed48                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1ed48                 | '   t1.result_type=result_uint
1ed48                 | '   push t1 : return
1ed48     2C 03 90 FD | 	jmp	#LR__2450
1ed4c                 | LR__2440
1ed4c                 | LR__2441
1ed4c     4A 00 00 FF 
1ed50     A0 E4 05 F1 | 	add	objptr, ##38048
1ed54     F2 FE 01 FB | 	rdlong	result3, objptr
1ed58     FF FC 01 F6 | 	mov	result2, result3
1ed5c     01 FC 65 F0 | 	shl	result2, #1
1ed60     FF FC 01 F1 | 	add	result2, result3
1ed64     02 FC 65 F0 | 	shl	result2, #2
1ed68     03 00 00 FF 
1ed6c     04 E4 85 F1 | 	sub	objptr, ##1540
1ed70     F2 FC 01 F1 | 	add	result2, objptr
1ed74     FE FE 01 FB | 	rdlong	result3, result2
1ed78     04 FE 65 F0 | 	shl	result3, #4
1ed7c     32 00 00 FF 
1ed80     84 E4 85 F1 | 	sub	objptr, ##25732
1ed84     F2 FE 01 F1 | 	add	result3, objptr
1ed88     04 FE 05 F1 | 	add	result3, #4
1ed8c     FF FE 01 FB | 	rdlong	result3, result3
1ed90     0C 4E 05 F1 | 	add	fp, #12
1ed94     A7 FE 61 FC | 	wrlong	result3, fp
1ed98     35 00 00 FF 
1ed9c     88 E4 05 F1 | 	add	objptr, ##27272
1eda0     F2 FE 01 FB | 	rdlong	result3, objptr
1eda4     FF 12 02 F6 | 	mov	arg01, result3
1eda8     01 12 66 F0 | 	shl	arg01, #1
1edac     FF 12 02 F1 | 	add	arg01, result3
1edb0     02 12 66 F0 | 	shl	arg01, #2
1edb4     03 00 00 FF 
1edb8     04 E4 85 F1 | 	sub	objptr, ##1540
1edbc     F2 12 02 F1 | 	add	arg01, objptr
1edc0     09 13 02 FB | 	rdlong	arg01, arg01
1edc4     04 12 66 F0 | 	shl	arg01, #4
1edc8     32 00 00 FF 
1edcc     84 E4 85 F1 | 	sub	objptr, ##25732
1edd0     F2 12 02 F1 | 	add	arg01, objptr
1edd4     0C 12 06 F1 | 	add	arg01, #12
1edd8     09 13 02 FB | 	rdlong	arg01, arg01
1eddc     08 4E 85 F1 | 	sub	fp, #8
1ede0     A7 12 62 FC | 	wrlong	arg01, fp
1ede4     08 4E 05 F1 | 	add	fp, #8
1ede8     A7 12 02 FB | 	rdlong	arg01, fp
1edec     0C 4E 85 F1 | 	sub	fp, #12
1edf0     15 00 00 FF 
1edf4     18 E4 85 F1 | 	sub	objptr, ##10776
1edf8     70 5E B0 FD | 	call	#_pslpeek
1edfc     FD FA 31 F9 | 	getword	result1, result1, #0
1ee00     10 4E 05 F1 | 	add	fp, #16
1ee04     A7 FA 61 FC | 	wrlong	result1, fp
1ee08     4A 00 00 FF 
1ee0c     A0 E4 05 F1 | 	add	objptr, ##38048
1ee10     F2 FE 01 FB | 	rdlong	result3, objptr
1ee14     FF 12 02 F6 | 	mov	arg01, result3
1ee18     01 12 66 F0 | 	shl	arg01, #1
1ee1c     FF 12 02 F1 | 	add	arg01, result3
1ee20     02 12 66 F0 | 	shl	arg01, #2
1ee24     03 00 00 FF 
1ee28     04 E4 85 F1 | 	sub	objptr, ##1540
1ee2c     F2 12 02 F1 | 	add	arg01, objptr
1ee30     04 12 06 F1 | 	add	arg01, #4
1ee34     09 13 02 FB | 	rdlong	arg01, arg01
1ee38     04 4E 05 F1 | 	add	fp, #4
1ee3c     A7 12 62 FC | 	wrlong	arg01, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     A7 12 02 FB | 	rdlong	arg01, fp
1ee48     0C 4E 85 F1 | 	sub	fp, #12
1ee4c     02 12 06 F1 | 	add	arg01, #2
1ee50     47 00 00 FF 
1ee54     9C E4 85 F1 | 	sub	objptr, ##36508
1ee58     B8 5D B0 FD | 	call	#_pspeek
1ee5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ee60     18 4E 05 F1 | 	add	fp, #24
1ee64     A7 FA 61 FC | 	wrlong	result1, fp
1ee68     0C 4E 85 F1 | 	sub	fp, #12
1ee6c     A7 12 02 FB | 	rdlong	arg01, fp
1ee70     0C 4E 85 F1 | 	sub	fp, #12
1ee74     04 12 06 F1 | 	add	arg01, #4
1ee78     F0 5D B0 FD | 	call	#_pslpeek
1ee7c     1C 4E 05 F1 | 	add	fp, #28
1ee80     A7 FA 61 FC | 	wrlong	result1, fp
1ee84     10 4E 85 F1 | 	sub	fp, #16
1ee88     A7 12 02 FB | 	rdlong	arg01, fp
1ee8c     0C 4E 85 F1 | 	sub	fp, #12
1ee90     08 12 06 F1 | 	add	arg01, #8
1ee94     D4 5D B0 FD | 	call	#_pslpeek
1ee98     20 4E 05 F1 | 	add	fp, #32
1ee9c     A7 FA 61 FC | 	wrlong	result1, fp
1eea0     14 4E 85 F1 | 	sub	fp, #20
1eea4     A7 12 02 FB | 	rdlong	arg01, fp
1eea8     0C 4E 85 F1 | 	sub	fp, #12
1eeac     0C 12 06 F1 | 	add	arg01, #12
1eeb0     B8 5D B0 FD | 	call	#_pslpeek
1eeb4     24 4E 05 F1 | 	add	fp, #36
1eeb8     A7 FA 61 FC | 	wrlong	result1, fp
1eebc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1eebc                 | ' esize=pspeek(arrptr+2)
1eebc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1eebc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1eebc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1eebc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1eebc     10 4E 85 F1 | 	sub	fp, #16
1eec0     A7 12 02 FB | 	rdlong	arg01, fp
1eec4     14 4E 85 F1 | 	sub	fp, #20
1eec8     03 12 16 F2 | 	cmp	arg01, #3 wc
1eecc     34 00 90 CD |  if_b	jmp	#LR__2442
1eed0     E0 E9 BE FD | 	call	#_pop
1eed4     A7 FA 61 FC | 	wrlong	result1, fp
1eed8     04 4E 05 F1 | 	add	fp, #4
1eedc     A7 FC 61 FC | 	wrlong	result2, fp
1eee0     04 4E 05 F1 | 	add	fp, #4
1eee4     A7 FE 61 FC | 	wrlong	result3, fp
1eee8     08 4E 85 F1 | 	sub	fp, #8
1eeec     A7 12 02 F6 | 	mov	arg01, fp
1eef0     A4 EB BE FD | 	call	#_converttoint
1eef4     30 4E 05 F1 | 	add	fp, #48
1eef8     A7 FA 61 FC | 	wrlong	result1, fp
1eefc     30 4E 85 F1 | 	sub	fp, #48
1ef00     0C 00 90 FD | 	jmp	#LR__2443
1ef04                 | LR__2442
1ef04     30 4E 05 F1 | 	add	fp, #48
1ef08     A7 00 68 FC | 	wrlong	#0, fp
1ef0c     30 4E 85 F1 | 	sub	fp, #48
1ef10                 | LR__2443
1ef10                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1ef10     14 4E 05 F1 | 	add	fp, #20
1ef14     A7 12 02 FB | 	rdlong	arg01, fp
1ef18     14 4E 85 F1 | 	sub	fp, #20
1ef1c     02 12 16 F2 | 	cmp	arg01, #2 wc
1ef20     34 00 90 CD |  if_b	jmp	#LR__2444
1ef24     8C E9 BE FD | 	call	#_pop
1ef28     A7 FA 61 FC | 	wrlong	result1, fp
1ef2c     04 4E 05 F1 | 	add	fp, #4
1ef30     A7 FC 61 FC | 	wrlong	result2, fp
1ef34     04 4E 05 F1 | 	add	fp, #4
1ef38     A7 FE 61 FC | 	wrlong	result3, fp
1ef3c     08 4E 85 F1 | 	sub	fp, #8
1ef40     A7 12 02 F6 | 	mov	arg01, fp
1ef44     50 EB BE FD | 	call	#_converttoint
1ef48     2C 4E 05 F1 | 	add	fp, #44
1ef4c     A7 FA 61 FC | 	wrlong	result1, fp
1ef50     2C 4E 85 F1 | 	sub	fp, #44
1ef54     0C 00 90 FD | 	jmp	#LR__2445
1ef58                 | LR__2444
1ef58     2C 4E 05 F1 | 	add	fp, #44
1ef5c     A7 00 68 FC | 	wrlong	#0, fp
1ef60     2C 4E 85 F1 | 	sub	fp, #44
1ef64                 | LR__2445
1ef64                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1ef64     14 4E 05 F1 | 	add	fp, #20
1ef68     A7 12 02 FB | 	rdlong	arg01, fp
1ef6c     14 4E 85 F1 | 	sub	fp, #20
1ef70     01 12 16 F2 | 	cmp	arg01, #1 wc
1ef74     34 00 90 CD |  if_b	jmp	#LR__2446
1ef78     38 E9 BE FD | 	call	#_pop
1ef7c     A7 FA 61 FC | 	wrlong	result1, fp
1ef80     04 4E 05 F1 | 	add	fp, #4
1ef84     A7 FC 61 FC | 	wrlong	result2, fp
1ef88     04 4E 05 F1 | 	add	fp, #4
1ef8c     A7 FE 61 FC | 	wrlong	result3, fp
1ef90     08 4E 85 F1 | 	sub	fp, #8
1ef94     A7 12 02 F6 | 	mov	arg01, fp
1ef98     FC EA BE FD | 	call	#_converttoint
1ef9c     28 4E 05 F1 | 	add	fp, #40
1efa0     A7 FA 61 FC | 	wrlong	result1, fp
1efa4     28 4E 85 F1 | 	sub	fp, #40
1efa8     0C 00 90 FD | 	jmp	#LR__2447
1efac                 | LR__2446
1efac     28 4E 05 F1 | 	add	fp, #40
1efb0     A7 00 68 FC | 	wrlong	#0, fp
1efb4     28 4E 85 F1 | 	sub	fp, #40
1efb8                 | LR__2447
1efb8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1efb8                 | ' if numpar>0 then
1efb8     14 4E 05 F1 | 	add	fp, #20
1efbc     A7 FE 01 FB | 	rdlong	result3, fp
1efc0     14 4E 85 F1 | 	sub	fp, #20
1efc4     01 FE 15 F2 | 	cmp	result3, #1 wc
1efc8     8C 00 90 CD |  if_b	jmp	#LR__2448
1efcc     0C 4E 05 F1 | 	add	fp, #12
1efd0     A7 FC 01 FB | 	rdlong	result2, fp
1efd4     1C 4E 05 F1 | 	add	fp, #28
1efd8     A7 FE 01 FB | 	rdlong	result3, fp
1efdc     04 4E 05 F1 | 	add	fp, #4
1efe0     A7 12 02 FB | 	rdlong	arg01, fp
1efe4     10 4E 85 F1 | 	sub	fp, #16
1efe8     A7 FA 01 FB | 	rdlong	result1, fp
1efec     FD 12 02 FD | 	qmul	arg01, result1
1eff0     10 FC 05 F1 | 	add	result2, #16
1eff4     14 4E 05 F1 | 	add	fp, #20
1eff8     A7 26 02 FB | 	rdlong	local01, fp
1effc     18 12 62 FD | 	getqx	arg01
1f000     FD 26 02 FD | 	qmul	local01, result1
1f004     09 FF 01 F1 | 	add	result3, arg01
1f008     10 4E 85 F1 | 	sub	fp, #16
1f00c     A7 26 02 FB | 	rdlong	local01, fp
1f010     18 FA 61 FD | 	getqx	result1
1f014     13 FB 01 FD | 	qmul	result1, local01
1f018     08 4E 85 F1 | 	sub	fp, #8
1f01c     A7 26 02 FB | 	rdlong	local01, fp
1f020     18 FA 61 FD | 	getqx	result1
1f024     FD FE 01 F1 | 	add	result3, result1
1f028     13 FF 01 FD | 	qmul	result3, local01
1f02c     1C 4E 05 F1 | 	add	fp, #28
1f030     18 26 62 FD | 	getqx	local01
1f034     13 FD 01 F1 | 	add	result2, local01
1f038     A7 FC 61 FC | 	wrlong	result2, fp
1f03c     2C 4E 85 F1 | 	sub	fp, #44
1f040     A7 3A 68 FC | 	wrlong	#29, fp
1f044     2C 4E 05 F1 | 	add	fp, #44
1f048     A7 26 02 FB | 	rdlong	local01, fp
1f04c     34 4E 85 F1 | 	sub	fp, #52
1f050     A7 26 62 FC | 	wrlong	local01, fp
1f054     18 00 90 FD | 	jmp	#LR__2449
1f058                 | LR__2448
1f058     08 4E 05 F1 | 	add	fp, #8
1f05c     A7 3A 68 FC | 	wrlong	#29, fp
1f060     04 4E 05 F1 | 	add	fp, #4
1f064     A7 26 02 FB | 	rdlong	local01, fp
1f068     0C 4E 85 F1 | 	sub	fp, #12
1f06c     A7 26 62 FC | 	wrlong	local01, fp
1f070                 | LR__2449
1f070     A7 12 02 F6 | 	mov	arg01, fp
1f074     D4 E8 BE FD | 	call	#_push
1f078                 | LR__2450
1f078     A7 F0 03 F6 | 	mov	ptra, fp
1f07c     B2 00 A0 FD | 	call	#popregs_
1f080                 | _do_getaddr_ret
1f080     2D 00 64 FD | 	ret
1f084                 | 
1f084                 | ' 
1f084                 | ' 
1f084                 | ' 
1f084                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1f084                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1f084                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1f084                 | ' 
1f084                 | ' '--------------------------------- AND 
1f084                 | ' 
1f084                 | ' sub do_and 
1f084                 | _do_and
1f084     03 4A 05 F6 | 	mov	COUNT_, #3
1f088     A8 00 A0 FD | 	call	#pushregs_
1f08c     18 F0 07 F1 | 	add	ptra, #24
1f090     20 E8 BE FD | 	call	#_pop
1f094     FD 12 02 F6 | 	mov	arg01, result1
1f098     FE 26 02 F6 | 	mov	local01, result2
1f09c     FF 28 02 F6 | 	mov	local02, result3
1f0a0     0C 4E 05 F1 | 	add	fp, #12
1f0a4     A7 12 62 FC | 	wrlong	arg01, fp
1f0a8     04 4E 05 F1 | 	add	fp, #4
1f0ac     A7 26 62 FC | 	wrlong	local01, fp
1f0b0     04 4E 05 F1 | 	add	fp, #4
1f0b4     A7 28 62 FC | 	wrlong	local02, fp
1f0b8     14 4E 85 F1 | 	sub	fp, #20
1f0bc     F4 E7 BE FD | 	call	#_pop
1f0c0     FF 2A 02 F6 | 	mov	local03, result3
1f0c4     A7 FA 61 FC | 	wrlong	result1, fp
1f0c8     04 4E 05 F1 | 	add	fp, #4
1f0cc     A7 FC 61 FC | 	wrlong	result2, fp
1f0d0     04 4E 05 F1 | 	add	fp, #4
1f0d4     A7 2A 62 FC | 	wrlong	local03, fp
1f0d8                 | ' 
1f0d8                 | ' t2=pop()
1f0d8                 | ' t1=pop()
1f0d8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f0d8     08 4E 85 F1 | 	sub	fp, #8
1f0dc     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f0e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0e4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f0e8     08 4E 05 A1 |  if_e	add	fp, #8
1f0ec     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f0f0     08 4E 85 A1 |  if_e	sub	fp, #8
1f0f4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f0f4     14 4E 05 F1 | 	add	fp, #20
1f0f8     A7 2A 02 FB | 	rdlong	local03, fp
1f0fc     14 4E 85 F1 | 	sub	fp, #20
1f100     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f104     18 00 90 5D |  if_ne	jmp	#LR__2460
1f108     0C 4E 05 F1 | 	add	fp, #12
1f10c     A7 2A 02 FB | 	rdlong	local03, fp
1f110     A7 2A 62 FC | 	wrlong	local03, fp
1f114     08 4E 05 F1 | 	add	fp, #8
1f118     A7 3A 68 FC | 	wrlong	#29, fp
1f11c     14 4E 85 F1 | 	sub	fp, #20
1f120                 | LR__2460
1f120                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1f120     08 4E 05 F1 | 	add	fp, #8
1f124     A7 2A 02 FB | 	rdlong	local03, fp
1f128     08 4E 85 F1 | 	sub	fp, #8
1f12c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f130     14 4E 05 51 |  if_ne	add	fp, #20
1f134     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f138     14 4E 85 51 |  if_ne	sub	fp, #20
1f13c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f140     08 4E 05 51 |  if_ne	add	fp, #8
1f144     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f148     08 4E 85 51 |  if_ne	sub	fp, #8
1f14c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f150     14 4E 05 51 |  if_ne	add	fp, #20
1f154     14 4E 85 51 |  if_ne	sub	fp, #20
1f158     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f15c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f160     08 4E 05 A1 |  if_e	add	fp, #8
1f164     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f168     08 4E 85 A1 |  if_e	sub	fp, #8
1f16c     18 00 90 AD |  if_e	jmp	#LR__2461
1f170     A7 2A 02 FB | 	rdlong	local03, fp
1f174     0C 4E 05 F1 | 	add	fp, #12
1f178     A7 26 02 FB | 	rdlong	local01, fp
1f17c     0C 4E 85 F1 | 	sub	fp, #12
1f180     13 2B 02 F5 | 	and	local03, local01
1f184     A7 2A 62 FC | 	wrlong	local03, fp
1f188                 | LR__2461
1f188     A7 12 02 F6 | 	mov	arg01, fp
1f18c     BC E7 BE FD | 	call	#_push
1f190     A7 F0 03 F6 | 	mov	ptra, fp
1f194     B2 00 A0 FD | 	call	#popregs_
1f198                 | _do_and_ret
1f198     2D 00 64 FD | 	ret
1f19c                 | 
1f19c                 | ' 
1f19c                 | ' '--------------------------------- DIV (integer divide)
1f19c                 | ' 
1f19c                 | ' sub do_div 
1f19c                 | _do_div
1f19c     01 4A 05 F6 | 	mov	COUNT_, #1
1f1a0     A8 00 A0 FD | 	call	#pushregs_
1f1a4     18 F0 07 F1 | 	add	ptra, #24
1f1a8     08 E7 BE FD | 	call	#_pop
1f1ac     FD 92 02 F6 | 	mov	muldivb_, result1
1f1b0     FE 90 02 F6 | 	mov	muldiva_, result2
1f1b4     FF 26 02 F6 | 	mov	local01, result3
1f1b8     0C 4E 05 F1 | 	add	fp, #12
1f1bc     A7 92 62 FC | 	wrlong	muldivb_, fp
1f1c0     04 4E 05 F1 | 	add	fp, #4
1f1c4     A7 90 62 FC | 	wrlong	muldiva_, fp
1f1c8     04 4E 05 F1 | 	add	fp, #4
1f1cc     A7 26 62 FC | 	wrlong	local01, fp
1f1d0     14 4E 85 F1 | 	sub	fp, #20
1f1d4     DC E6 BE FD | 	call	#_pop
1f1d8     A7 FA 61 FC | 	wrlong	result1, fp
1f1dc     04 4E 05 F1 | 	add	fp, #4
1f1e0     A7 FC 61 FC | 	wrlong	result2, fp
1f1e4     04 4E 05 F1 | 	add	fp, #4
1f1e8     A7 FE 61 FC | 	wrlong	result3, fp
1f1ec                 | ' 
1f1ec                 | ' t2=pop()
1f1ec                 | ' t1=pop()
1f1ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1f1ec     08 4E 85 F1 | 	sub	fp, #8
1f1f0     1F FE 0D F2 | 	cmp	result3, #31 wz
1f1f4     14 4E 05 51 |  if_ne	add	fp, #20
1f1f8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1f1fc     14 4E 85 51 |  if_ne	sub	fp, #20
1f200     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1f204     A7 14 68 AC |  if_e	wrlong	#10, fp
1f208     08 4E 05 A1 |  if_e	add	fp, #8
1f20c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f210     08 4E 85 A1 |  if_e	sub	fp, #8
1f214     90 01 90 AD |  if_e	jmp	#LR__2476
1f218                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1f218     08 4E 05 F1 | 	add	fp, #8
1f21c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f220     08 4E 85 F1 | 	sub	fp, #8
1f224     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1f228     1C 00 90 5D |  if_ne	jmp	#LR__2470
1f22c     08 4E 05 F1 | 	add	fp, #8
1f230     A7 38 68 FC | 	wrlong	#28, fp
1f234     08 4E 85 F1 | 	sub	fp, #8
1f238     A7 12 02 FB | 	rdlong	arg01, fp
1f23c     00 14 06 F6 | 	mov	arg02, #0
1f240     F4 C4 B0 FD | 	call	#__system___float_tointeger
1f244     A7 FA 61 FC | 	wrlong	result1, fp
1f248                 | LR__2470
1f248                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1f248     14 4E 05 F1 | 	add	fp, #20
1f24c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f250     14 4E 85 F1 | 	sub	fp, #20
1f254     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1f258     28 00 90 5D |  if_ne	jmp	#LR__2471
1f25c     14 4E 05 F1 | 	add	fp, #20
1f260     A7 38 68 FC | 	wrlong	#28, fp
1f264     08 4E 85 F1 | 	sub	fp, #8
1f268     A7 12 02 FB | 	rdlong	arg01, fp
1f26c     0C 4E 85 F1 | 	sub	fp, #12
1f270     00 14 06 F6 | 	mov	arg02, #0
1f274     C0 C4 B0 FD | 	call	#__system___float_tointeger
1f278     0C 4E 05 F1 | 	add	fp, #12
1f27c     A7 FA 61 FC | 	wrlong	result1, fp
1f280     0C 4E 85 F1 | 	sub	fp, #12
1f284                 | LR__2471
1f284                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1f284     08 4E 05 F1 | 	add	fp, #8
1f288     A7 92 02 FB | 	rdlong	muldivb_, fp
1f28c     08 4E 85 F1 | 	sub	fp, #8
1f290     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f294     14 4E 05 A1 |  if_e	add	fp, #20
1f298     A7 26 02 AB |  if_e	rdlong	local01, fp
1f29c     14 4E 85 A1 |  if_e	sub	fp, #20
1f2a0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f2a4     20 00 90 5D |  if_ne	jmp	#LR__2472
1f2a8     0C 4E 05 F1 | 	add	fp, #12
1f2ac     A7 26 02 FB | 	rdlong	local01, fp
1f2b0     0C 4E 85 F1 | 	sub	fp, #12
1f2b4     A7 92 02 FB | 	rdlong	muldivb_, fp
1f2b8     13 93 12 FD | 	qdiv	muldivb_, local01
1f2bc     18 26 62 FD | 	getqx	local01
1f2c0     A7 26 62 FC | 	wrlong	local01, fp
1f2c4     E0 00 90 FD | 	jmp	#LR__2476
1f2c8                 | LR__2472
1f2c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1f2c8     08 4E 05 F1 | 	add	fp, #8
1f2cc     A7 92 02 FB | 	rdlong	muldivb_, fp
1f2d0     08 4E 85 F1 | 	sub	fp, #8
1f2d4     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f2d8     14 4E 05 A1 |  if_e	add	fp, #20
1f2dc     A7 26 02 AB |  if_e	rdlong	local01, fp
1f2e0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2e4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f2e8     2C 00 90 5D |  if_ne	jmp	#LR__2473
1f2ec     0C 4E 05 F1 | 	add	fp, #12
1f2f0     A7 26 02 FB | 	rdlong	local01, fp
1f2f4     0C 4E 85 F1 | 	sub	fp, #12
1f2f8     A7 92 02 FB | 	rdlong	muldivb_, fp
1f2fc     13 93 12 FD | 	qdiv	muldivb_, local01
1f300     18 26 62 FD | 	getqx	local01
1f304     A7 26 62 FC | 	wrlong	local01, fp
1f308     08 4E 05 F1 | 	add	fp, #8
1f30c     A7 38 68 FC | 	wrlong	#28, fp
1f310     08 4E 85 F1 | 	sub	fp, #8
1f314     90 00 90 FD | 	jmp	#LR__2476
1f318                 | LR__2473
1f318                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1f318     08 4E 05 F1 | 	add	fp, #8
1f31c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f320     08 4E 85 F1 | 	sub	fp, #8
1f324     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f328     14 4E 05 A1 |  if_e	add	fp, #20
1f32c     A7 26 02 AB |  if_e	rdlong	local01, fp
1f330     14 4E 85 A1 |  if_e	sub	fp, #20
1f334     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f338     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f33c     A7 90 02 FB | 	rdlong	muldiva_, fp
1f340     0C 4E 05 F1 | 	add	fp, #12
1f344     A7 92 02 FB | 	rdlong	muldivb_, fp
1f348     0C 4E 85 F1 | 	sub	fp, #12
1f34c     BA 00 A0 FD | 	call	#divide_
1f350     A7 92 62 FC | 	wrlong	muldivb_, fp
1f354     50 00 90 FD | 	jmp	#LR__2476
1f358                 | LR__2474
1f358                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1f358     08 4E 05 F1 | 	add	fp, #8
1f35c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f360     08 4E 85 F1 | 	sub	fp, #8
1f364     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f368     14 4E 05 A1 |  if_e	add	fp, #20
1f36c     A7 26 02 AB |  if_e	rdlong	local01, fp
1f370     14 4E 85 A1 |  if_e	sub	fp, #20
1f374     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f378     1C 00 90 5D |  if_ne	jmp	#LR__2475
1f37c     A7 90 02 FB | 	rdlong	muldiva_, fp
1f380     0C 4E 05 F1 | 	add	fp, #12
1f384     A7 92 02 FB | 	rdlong	muldivb_, fp
1f388     0C 4E 85 F1 | 	sub	fp, #12
1f38c     BA 00 A0 FD | 	call	#divide_
1f390     A7 92 62 FC | 	wrlong	muldivb_, fp
1f394     10 00 90 FD | 	jmp	#LR__2476
1f398                 | LR__2475
1f398     A7 16 68 FC | 	wrlong	#11, fp
1f39c     08 4E 05 F1 | 	add	fp, #8
1f3a0     A7 FE 69 FC | 	wrlong	#255, fp
1f3a4     08 4E 85 F1 | 	sub	fp, #8
1f3a8                 | LR__2476
1f3a8     A7 12 02 F6 | 	mov	arg01, fp
1f3ac     9C E5 BE FD | 	call	#_push
1f3b0     A7 F0 03 F6 | 	mov	ptra, fp
1f3b4     B2 00 A0 FD | 	call	#popregs_
1f3b8                 | _do_div_ret
1f3b8     2D 00 64 FD | 	ret
1f3bc                 | 
1f3bc                 | ' 
1f3bc                 | ' '--------------------------------- equal (=)
1f3bc                 | ' 
1f3bc                 | ' sub do_eq
1f3bc                 | _do_eq
1f3bc     05 4A 05 F6 | 	mov	COUNT_, #5
1f3c0     A8 00 A0 FD | 	call	#pushregs_
1f3c4     18 F0 07 F1 | 	add	ptra, #24
1f3c8     E8 E4 BE FD | 	call	#_pop
1f3cc     FD 26 02 F6 | 	mov	local01, result1
1f3d0     FE 28 02 F6 | 	mov	local02, result2
1f3d4     FF 2A 02 F6 | 	mov	local03, result3
1f3d8     0C 4E 05 F1 | 	add	fp, #12
1f3dc     A7 26 62 FC | 	wrlong	local01, fp
1f3e0     04 4E 05 F1 | 	add	fp, #4
1f3e4     A7 28 62 FC | 	wrlong	local02, fp
1f3e8     04 4E 05 F1 | 	add	fp, #4
1f3ec     A7 2A 62 FC | 	wrlong	local03, fp
1f3f0     14 4E 85 F1 | 	sub	fp, #20
1f3f4     BC E4 BE FD | 	call	#_pop
1f3f8     FF 2A 02 F6 | 	mov	local03, result3
1f3fc     A7 FA 61 FC | 	wrlong	result1, fp
1f400     04 4E 05 F1 | 	add	fp, #4
1f404     A7 FC 61 FC | 	wrlong	result2, fp
1f408     04 4E 05 F1 | 	add	fp, #4
1f40c     A7 2A 62 FC | 	wrlong	local03, fp
1f410                 | ' 
1f410                 | ' t2=pop()
1f410                 | ' t1=pop()
1f410                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1f410     08 4E 85 F1 | 	sub	fp, #8
1f414     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f418     14 4E 05 A1 |  if_e	add	fp, #20
1f41c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f420     14 4E 85 A1 |  if_e	sub	fp, #20
1f424     16 2B 02 A6 |  if_e	mov	local03, local04
1f428     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f42c     28 00 90 5D |  if_ne	jmp	#LR__2480
1f430     00 26 06 F6 | 	mov	local01, #0
1f434     A7 12 02 FB | 	rdlong	arg01, fp
1f438     0C 4E 05 F1 | 	add	fp, #12
1f43c     A7 14 02 FB | 	rdlong	arg02, fp
1f440     0C 4E 85 F1 | 	sub	fp, #12
1f444     D4 8F B0 FD | 	call	#__system___string_cmp
1f448     00 FA 0D F2 | 	cmp	result1, #0 wz
1f44c     00 26 26 A6 |  if_e	not	local01, #0
1f450     A7 26 62 FC | 	wrlong	local01, fp
1f454     20 04 90 FD | 	jmp	#LR__2493
1f458                 | LR__2480
1f458                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1f458     08 4E 05 F1 | 	add	fp, #8
1f45c     A7 26 02 FB | 	rdlong	local01, fp
1f460     08 4E 85 F1 | 	sub	fp, #8
1f464     1E 26 0E F2 | 	cmp	local01, #30 wz
1f468     14 4E 05 A1 |  if_e	add	fp, #20
1f46c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f470     14 4E 85 A1 |  if_e	sub	fp, #20
1f474     16 2B 02 A6 |  if_e	mov	local03, local04
1f478     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f47c     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f480     00 26 06 F6 | 	mov	local01, #0
1f484     A7 12 02 FB | 	rdlong	arg01, fp
1f488     0C 4E 05 F1 | 	add	fp, #12
1f48c     A7 14 02 FB | 	rdlong	arg02, fp
1f490     0C 4E 85 F1 | 	sub	fp, #12
1f494     01 16 06 F6 | 	mov	arg03, #1
1f498     08 C2 B0 FD | 	call	#__system___float_cmp
1f49c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f4a0     00 26 26 A6 |  if_e	not	local01, #0
1f4a4     A7 26 62 FC | 	wrlong	local01, fp
1f4a8     CC 03 90 FD | 	jmp	#LR__2493
1f4ac                 | LR__2481
1f4ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1f4ac     08 4E 05 F1 | 	add	fp, #8
1f4b0     A7 26 02 FB | 	rdlong	local01, fp
1f4b4     08 4E 85 F1 | 	sub	fp, #8
1f4b8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f4bc     14 4E 05 A1 |  if_e	add	fp, #20
1f4c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f4c4     14 4E 85 A1 |  if_e	sub	fp, #20
1f4c8     16 2B 02 A6 |  if_e	mov	local03, local04
1f4cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f4d0     48 00 90 5D |  if_ne	jmp	#LR__2482
1f4d4     00 26 06 F6 | 	mov	local01, #0
1f4d8     A7 28 02 FB | 	rdlong	local02, fp
1f4dc     0C 4E 05 F1 | 	add	fp, #12
1f4e0     A7 12 02 FB | 	rdlong	arg01, fp
1f4e4     0C 4E 85 F1 | 	sub	fp, #12
1f4e8     09 13 52 F6 | 	abs	arg01, arg01 wc
1f4ec     1F 2E C6 C9 |  if_b	decod	local05, #31
1f4f0     00 2E 06 36 |  if_ae	mov	local05, #0
1f4f4     74 B9 B0 FD | 	call	#__system___float_fromuns
1f4f8     17 FB 61 F5 | 	xor	result1, local05
1f4fc     FD 14 02 F6 | 	mov	arg02, result1
1f500     14 13 02 F6 | 	mov	arg01, local02
1f504     01 16 06 F6 | 	mov	arg03, #1
1f508     98 C1 B0 FD | 	call	#__system___float_cmp
1f50c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f510     00 26 26 A6 |  if_e	not	local01, #0
1f514     A7 26 62 FC | 	wrlong	local01, fp
1f518     5C 03 90 FD | 	jmp	#LR__2493
1f51c                 | LR__2482
1f51c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1f51c     08 4E 05 F1 | 	add	fp, #8
1f520     A7 26 02 FB | 	rdlong	local01, fp
1f524     08 4E 85 F1 | 	sub	fp, #8
1f528     1E 26 0E F2 | 	cmp	local01, #30 wz
1f52c     14 4E 05 A1 |  if_e	add	fp, #20
1f530     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f534     14 4E 85 A1 |  if_e	sub	fp, #20
1f538     16 2B 02 A6 |  if_e	mov	local03, local04
1f53c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f540     38 00 90 5D |  if_ne	jmp	#LR__2483
1f544     00 26 06 F6 | 	mov	local01, #0
1f548     A7 28 02 FB | 	rdlong	local02, fp
1f54c     0C 4E 05 F1 | 	add	fp, #12
1f550     A7 12 02 FB | 	rdlong	arg01, fp
1f554     0C 4E 85 F1 | 	sub	fp, #12
1f558     10 B9 B0 FD | 	call	#__system___float_fromuns
1f55c     FD 14 02 F6 | 	mov	arg02, result1
1f560     14 13 02 F6 | 	mov	arg01, local02
1f564     01 16 06 F6 | 	mov	arg03, #1
1f568     38 C1 B0 FD | 	call	#__system___float_cmp
1f56c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f570     00 26 26 A6 |  if_e	not	local01, #0
1f574     A7 26 62 FC | 	wrlong	local01, fp
1f578     FC 02 90 FD | 	jmp	#LR__2493
1f57c                 | LR__2483
1f57c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1f57c     08 4E 05 F1 | 	add	fp, #8
1f580     A7 26 02 FB | 	rdlong	local01, fp
1f584     08 4E 85 F1 | 	sub	fp, #8
1f588     1C 26 0E F2 | 	cmp	local01, #28 wz
1f58c     14 4E 05 A1 |  if_e	add	fp, #20
1f590     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f594     14 4E 85 A1 |  if_e	sub	fp, #20
1f598     16 2B 02 A6 |  if_e	mov	local03, local04
1f59c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f5a0     44 00 90 5D |  if_ne	jmp	#LR__2484
1f5a4     00 26 06 F6 | 	mov	local01, #0
1f5a8     A7 12 02 FB | 	rdlong	arg01, fp
1f5ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1f5b0     1F 2E C6 C9 |  if_b	decod	local05, #31
1f5b4     00 2E 06 36 |  if_ae	mov	local05, #0
1f5b8     B0 B8 B0 FD | 	call	#__system___float_fromuns
1f5bc     17 FB 61 F5 | 	xor	result1, local05
1f5c0     FD 12 02 F6 | 	mov	arg01, result1
1f5c4     0C 4E 05 F1 | 	add	fp, #12
1f5c8     A7 14 02 FB | 	rdlong	arg02, fp
1f5cc     0C 4E 85 F1 | 	sub	fp, #12
1f5d0     01 16 06 F6 | 	mov	arg03, #1
1f5d4     CC C0 B0 FD | 	call	#__system___float_cmp
1f5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f5dc     00 26 26 A6 |  if_e	not	local01, #0
1f5e0     A7 26 62 FC | 	wrlong	local01, fp
1f5e4     90 02 90 FD | 	jmp	#LR__2493
1f5e8                 | LR__2484
1f5e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1f5e8     08 4E 05 F1 | 	add	fp, #8
1f5ec     A7 26 02 FB | 	rdlong	local01, fp
1f5f0     08 4E 85 F1 | 	sub	fp, #8
1f5f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f5f8     14 4E 05 A1 |  if_e	add	fp, #20
1f5fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f600     14 4E 85 A1 |  if_e	sub	fp, #20
1f604     16 2B 02 A6 |  if_e	mov	local03, local04
1f608     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f60c     24 00 90 5D |  if_ne	jmp	#LR__2485
1f610     00 26 06 F6 | 	mov	local01, #0
1f614     A7 28 02 FB | 	rdlong	local02, fp
1f618     0C 4E 05 F1 | 	add	fp, #12
1f61c     A7 2A 02 FB | 	rdlong	local03, fp
1f620     0C 4E 85 F1 | 	sub	fp, #12
1f624     15 29 0A F2 | 	cmp	local02, local03 wz
1f628     01 26 66 A6 |  if_e	neg	local01, #1
1f62c     A7 26 62 FC | 	wrlong	local01, fp
1f630     44 02 90 FD | 	jmp	#LR__2493
1f634                 | LR__2485
1f634                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1f634     08 4E 05 F1 | 	add	fp, #8
1f638     A7 26 02 FB | 	rdlong	local01, fp
1f63c     08 4E 85 F1 | 	sub	fp, #8
1f640     1C 26 0E F2 | 	cmp	local01, #28 wz
1f644     14 4E 05 A1 |  if_e	add	fp, #20
1f648     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f64c     14 4E 85 A1 |  if_e	sub	fp, #20
1f650     16 2B 02 A6 |  if_e	mov	local03, local04
1f654     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f658     24 00 90 5D |  if_ne	jmp	#LR__2486
1f65c     00 26 06 F6 | 	mov	local01, #0
1f660     A7 28 02 FB | 	rdlong	local02, fp
1f664     0C 4E 05 F1 | 	add	fp, #12
1f668     A7 2A 02 FB | 	rdlong	local03, fp
1f66c     0C 4E 85 F1 | 	sub	fp, #12
1f670     15 29 0A F2 | 	cmp	local02, local03 wz
1f674     01 26 66 A6 |  if_e	neg	local01, #1
1f678     A7 26 62 FC | 	wrlong	local01, fp
1f67c     F8 01 90 FD | 	jmp	#LR__2493
1f680                 | LR__2486
1f680                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1f680     08 4E 05 F1 | 	add	fp, #8
1f684     A7 26 02 FB | 	rdlong	local01, fp
1f688     08 4E 85 F1 | 	sub	fp, #8
1f68c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f690     14 4E 05 A1 |  if_e	add	fp, #20
1f694     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f698     14 4E 85 A1 |  if_e	sub	fp, #20
1f69c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f6a0     34 00 90 5D |  if_ne	jmp	#LR__2487
1f6a4     00 26 06 F6 | 	mov	local01, #0
1f6a8     A7 12 02 FB | 	rdlong	arg01, fp
1f6ac     BC B7 B0 FD | 	call	#__system___float_fromuns
1f6b0     FD 12 02 F6 | 	mov	arg01, result1
1f6b4     0C 4E 05 F1 | 	add	fp, #12
1f6b8     A7 14 02 FB | 	rdlong	arg02, fp
1f6bc     0C 4E 85 F1 | 	sub	fp, #12
1f6c0     01 16 06 F6 | 	mov	arg03, #1
1f6c4     DC BF B0 FD | 	call	#__system___float_cmp
1f6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f6cc     00 26 26 A6 |  if_e	not	local01, #0
1f6d0     A7 26 62 FC | 	wrlong	local01, fp
1f6d4     A0 01 90 FD | 	jmp	#LR__2493
1f6d8                 | LR__2487
1f6d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1f6d8     08 4E 05 F1 | 	add	fp, #8
1f6dc     A7 26 02 FB | 	rdlong	local01, fp
1f6e0     08 4E 85 F1 | 	sub	fp, #8
1f6e4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f6e8     14 4E 05 A1 |  if_e	add	fp, #20
1f6ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f6f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f6f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f6f8     24 00 90 5D |  if_ne	jmp	#LR__2488
1f6fc     00 26 06 F6 | 	mov	local01, #0
1f700     A7 28 02 FB | 	rdlong	local02, fp
1f704     0C 4E 05 F1 | 	add	fp, #12
1f708     A7 2A 02 FB | 	rdlong	local03, fp
1f70c     0C 4E 85 F1 | 	sub	fp, #12
1f710     15 29 0A F2 | 	cmp	local02, local03 wz
1f714     01 26 66 A6 |  if_e	neg	local01, #1
1f718     A7 26 62 FC | 	wrlong	local01, fp
1f71c     58 01 90 FD | 	jmp	#LR__2493
1f720                 | LR__2488
1f720                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1f720     08 4E 05 F1 | 	add	fp, #8
1f724     A7 26 02 FB | 	rdlong	local01, fp
1f728     08 4E 85 F1 | 	sub	fp, #8
1f72c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f730     14 4E 05 A1 |  if_e	add	fp, #20
1f734     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f738     14 4E 85 A1 |  if_e	sub	fp, #20
1f73c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f740     24 00 90 5D |  if_ne	jmp	#LR__2489
1f744     00 26 06 F6 | 	mov	local01, #0
1f748     A7 28 02 FB | 	rdlong	local02, fp
1f74c     0C 4E 05 F1 | 	add	fp, #12
1f750     A7 2A 02 FB | 	rdlong	local03, fp
1f754     0C 4E 85 F1 | 	sub	fp, #12
1f758     15 29 0A F2 | 	cmp	local02, local03 wz
1f75c     01 26 66 A6 |  if_e	neg	local01, #1
1f760     A7 26 62 FC | 	wrlong	local01, fp
1f764     10 01 90 FD | 	jmp	#LR__2493
1f768                 | LR__2489
1f768                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1f768     08 4E 05 F1 | 	add	fp, #8
1f76c     A7 26 02 FB | 	rdlong	local01, fp
1f770     08 4E 85 F1 | 	sub	fp, #8
1f774     2B 26 0E F2 | 	cmp	local01, #43 wz
1f778     14 4E 05 A1 |  if_e	add	fp, #20
1f77c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f780     14 4E 85 A1 |  if_e	sub	fp, #20
1f784     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f788     30 00 90 5D |  if_ne	jmp	#LR__2490
1f78c     00 26 06 F6 | 	mov	local01, #0
1f790     A7 12 02 FB | 	rdlong	arg01, fp
1f794     94 E2 BE FD | 	call	#_convertstring
1f798     FD 12 02 F6 | 	mov	arg01, result1
1f79c     0C 4E 05 F1 | 	add	fp, #12
1f7a0     A7 14 02 FB | 	rdlong	arg02, fp
1f7a4     0C 4E 85 F1 | 	sub	fp, #12
1f7a8     70 8C B0 FD | 	call	#__system___string_cmp
1f7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1f7b0     00 26 26 A6 |  if_e	not	local01, #0
1f7b4     A7 26 62 FC | 	wrlong	local01, fp
1f7b8     BC 00 90 FD | 	jmp	#LR__2493
1f7bc                 | LR__2490
1f7bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1f7bc     08 4E 05 F1 | 	add	fp, #8
1f7c0     A7 26 02 FB | 	rdlong	local01, fp
1f7c4     08 4E 85 F1 | 	sub	fp, #8
1f7c8     1F 26 0E F2 | 	cmp	local01, #31 wz
1f7cc     14 4E 05 A1 |  if_e	add	fp, #20
1f7d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f7d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f7d8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f7dc     34 00 90 5D |  if_ne	jmp	#LR__2491
1f7e0     00 26 06 F6 | 	mov	local01, #0
1f7e4     A7 28 02 FB | 	rdlong	local02, fp
1f7e8     0C 4E 05 F1 | 	add	fp, #12
1f7ec     A7 12 02 FB | 	rdlong	arg01, fp
1f7f0     0C 4E 85 F1 | 	sub	fp, #12
1f7f4     34 E2 BE FD | 	call	#_convertstring
1f7f8     FD 14 02 F6 | 	mov	arg02, result1
1f7fc     14 13 02 F6 | 	mov	arg01, local02
1f800     18 8C B0 FD | 	call	#__system___string_cmp
1f804     00 FA 0D F2 | 	cmp	result1, #0 wz
1f808     00 26 26 A6 |  if_e	not	local01, #0
1f80c     A7 26 62 FC | 	wrlong	local01, fp
1f810     64 00 90 FD | 	jmp	#LR__2493
1f814                 | LR__2491
1f814                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1f814     08 4E 05 F1 | 	add	fp, #8
1f818     A7 26 02 FB | 	rdlong	local01, fp
1f81c     08 4E 85 F1 | 	sub	fp, #8
1f820     2B 26 0E F2 | 	cmp	local01, #43 wz
1f824     14 4E 05 A1 |  if_e	add	fp, #20
1f828     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f82c     14 4E 85 A1 |  if_e	sub	fp, #20
1f830     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f834     3C 00 90 5D |  if_ne	jmp	#LR__2492
1f838     00 26 06 F6 | 	mov	local01, #0
1f83c     A7 12 02 FB | 	rdlong	arg01, fp
1f840     E8 E1 BE FD | 	call	#_convertstring
1f844     FD 28 02 F6 | 	mov	local02, result1
1f848     0C 4E 05 F1 | 	add	fp, #12
1f84c     A7 12 02 FB | 	rdlong	arg01, fp
1f850     0C 4E 85 F1 | 	sub	fp, #12
1f854     D4 E1 BE FD | 	call	#_convertstring
1f858     FD 14 02 F6 | 	mov	arg02, result1
1f85c     14 13 02 F6 | 	mov	arg01, local02
1f860     B8 8B B0 FD | 	call	#__system___string_cmp
1f864     00 FA 0D F2 | 	cmp	result1, #0 wz
1f868     00 26 26 A6 |  if_e	not	local01, #0
1f86c     A7 26 62 FC | 	wrlong	local01, fp
1f870     04 00 90 FD | 	jmp	#LR__2493
1f874                 | LR__2492
1f874     A7 00 68 FC | 	wrlong	#0, fp
1f878                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f878                 | LR__2493
1f878     08 4E 05 F1 | 	add	fp, #8
1f87c     A7 38 68 FC | 	wrlong	#28, fp
1f880     08 4E 85 F1 | 	sub	fp, #8
1f884     A7 12 02 F6 | 	mov	arg01, fp
1f888     C0 E0 BE FD | 	call	#_push
1f88c     A7 F0 03 F6 | 	mov	ptra, fp
1f890     B2 00 A0 FD | 	call	#popregs_
1f894                 | _do_eq_ret
1f894     2D 00 64 FD | 	ret
1f898                 | 
1f898                 | ' 
1f898                 | ' '--------------------------------- fdiv (/) - float divide
1f898                 | ' 
1f898                 | ' sub do_fdiv 
1f898                 | _do_fdiv
1f898     02 4A 05 F6 | 	mov	COUNT_, #2
1f89c     A8 00 A0 FD | 	call	#pushregs_
1f8a0     18 F0 07 F1 | 	add	ptra, #24
1f8a4     0C E0 BE FD | 	call	#_pop
1f8a8     FD 14 02 F6 | 	mov	arg02, result1
1f8ac     FE 12 02 F6 | 	mov	arg01, result2
1f8b0     FF 26 02 F6 | 	mov	local01, result3
1f8b4     0C 4E 05 F1 | 	add	fp, #12
1f8b8     A7 14 62 FC | 	wrlong	arg02, fp
1f8bc     04 4E 05 F1 | 	add	fp, #4
1f8c0     A7 12 62 FC | 	wrlong	arg01, fp
1f8c4     04 4E 05 F1 | 	add	fp, #4
1f8c8     A7 26 62 FC | 	wrlong	local01, fp
1f8cc     14 4E 85 F1 | 	sub	fp, #20
1f8d0     E0 DF BE FD | 	call	#_pop
1f8d4     A7 FA 61 FC | 	wrlong	result1, fp
1f8d8     04 4E 05 F1 | 	add	fp, #4
1f8dc     A7 FC 61 FC | 	wrlong	result2, fp
1f8e0     04 4E 05 F1 | 	add	fp, #4
1f8e4     A7 FE 61 FC | 	wrlong	result3, fp
1f8e8                 | ' 
1f8e8                 | ' t2=pop()
1f8e8                 | ' t1=pop()
1f8e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1f8e8     08 4E 85 F1 | 	sub	fp, #8
1f8ec     1F FE 0D F2 | 	cmp	result3, #31 wz
1f8f0     14 4E 05 51 |  if_ne	add	fp, #20
1f8f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1f8f8     14 4E 85 51 |  if_ne	sub	fp, #20
1f8fc     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1f900     A7 14 68 AC |  if_e	wrlong	#10, fp
1f904     08 4E 05 A1 |  if_e	add	fp, #8
1f908     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f90c     08 4E 85 A1 |  if_e	sub	fp, #8
1f910     38 01 90 AD |  if_e	jmp	#LR__2505
1f914                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f914     08 4E 05 F1 | 	add	fp, #8
1f918     A7 14 02 FB | 	rdlong	arg02, fp
1f91c     08 4E 85 F1 | 	sub	fp, #8
1f920     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f924     28 00 90 5D |  if_ne	jmp	#LR__2500
1f928     08 4E 05 F1 | 	add	fp, #8
1f92c     A7 3C 68 FC | 	wrlong	#30, fp
1f930     08 4E 85 F1 | 	sub	fp, #8
1f934     A7 12 02 FB | 	rdlong	arg01, fp
1f938     09 13 52 F6 | 	abs	arg01, arg01 wc
1f93c     1F 28 C6 C9 |  if_b	decod	local02, #31
1f940     00 28 06 36 |  if_ae	mov	local02, #0
1f944     24 B5 B0 FD | 	call	#__system___float_fromuns
1f948     14 FB 61 F5 | 	xor	result1, local02
1f94c     A7 FA 61 FC | 	wrlong	result1, fp
1f950                 | LR__2500
1f950                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1f950     08 4E 05 F1 | 	add	fp, #8
1f954     A7 14 02 FB | 	rdlong	arg02, fp
1f958     08 4E 85 F1 | 	sub	fp, #8
1f95c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f960     18 00 90 5D |  if_ne	jmp	#LR__2501
1f964     08 4E 05 F1 | 	add	fp, #8
1f968     A7 3C 68 FC | 	wrlong	#30, fp
1f96c     08 4E 85 F1 | 	sub	fp, #8
1f970     A7 12 02 FB | 	rdlong	arg01, fp
1f974     F4 B4 B0 FD | 	call	#__system___float_fromuns
1f978     A7 FA 61 FC | 	wrlong	result1, fp
1f97c                 | LR__2501
1f97c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f97c     14 4E 05 F1 | 	add	fp, #20
1f980     A7 14 02 FB | 	rdlong	arg02, fp
1f984     14 4E 85 F1 | 	sub	fp, #20
1f988     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f98c     34 00 90 5D |  if_ne	jmp	#LR__2502
1f990     14 4E 05 F1 | 	add	fp, #20
1f994     A7 3C 68 FC | 	wrlong	#30, fp
1f998     08 4E 85 F1 | 	sub	fp, #8
1f99c     A7 12 02 FB | 	rdlong	arg01, fp
1f9a0     0C 4E 85 F1 | 	sub	fp, #12
1f9a4     09 13 52 F6 | 	abs	arg01, arg01 wc
1f9a8     1F 28 C6 C9 |  if_b	decod	local02, #31
1f9ac     00 28 06 36 |  if_ae	mov	local02, #0
1f9b0     B8 B4 B0 FD | 	call	#__system___float_fromuns
1f9b4     14 FB 61 F5 | 	xor	result1, local02
1f9b8     0C 4E 05 F1 | 	add	fp, #12
1f9bc     A7 FA 61 FC | 	wrlong	result1, fp
1f9c0     0C 4E 85 F1 | 	sub	fp, #12
1f9c4                 | LR__2502
1f9c4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f9c4     14 4E 05 F1 | 	add	fp, #20
1f9c8     A7 14 02 FB | 	rdlong	arg02, fp
1f9cc     14 4E 85 F1 | 	sub	fp, #20
1f9d0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f9d4     24 00 90 5D |  if_ne	jmp	#LR__2503
1f9d8     14 4E 05 F1 | 	add	fp, #20
1f9dc     A7 3C 68 FC | 	wrlong	#30, fp
1f9e0     08 4E 85 F1 | 	sub	fp, #8
1f9e4     A7 12 02 FB | 	rdlong	arg01, fp
1f9e8     0C 4E 85 F1 | 	sub	fp, #12
1f9ec     7C B4 B0 FD | 	call	#__system___float_fromuns
1f9f0     0C 4E 05 F1 | 	add	fp, #12
1f9f4     A7 FA 61 FC | 	wrlong	result1, fp
1f9f8     0C 4E 85 F1 | 	sub	fp, #12
1f9fc                 | LR__2503
1f9fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1f9fc     08 4E 05 F1 | 	add	fp, #8
1fa00     A7 14 02 FB | 	rdlong	arg02, fp
1fa04     08 4E 85 F1 | 	sub	fp, #8
1fa08     1E 14 0E F2 | 	cmp	arg02, #30 wz
1fa0c     14 4E 05 A1 |  if_e	add	fp, #20
1fa10     A7 26 02 AB |  if_e	rdlong	local01, fp
1fa14     14 4E 85 A1 |  if_e	sub	fp, #20
1fa18     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1fa1c     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fa20     A7 12 02 FB | 	rdlong	arg01, fp
1fa24     0C 4E 05 F1 | 	add	fp, #12
1fa28     A7 14 02 FB | 	rdlong	arg02, fp
1fa2c     0C 4E 85 F1 | 	sub	fp, #12
1fa30     40 BA B0 FD | 	call	#__system___float_div
1fa34     A7 FA 61 FC | 	wrlong	result1, fp
1fa38     10 00 90 FD | 	jmp	#LR__2505
1fa3c                 | LR__2504
1fa3c     A7 16 68 FC | 	wrlong	#11, fp
1fa40     08 4E 05 F1 | 	add	fp, #8
1fa44     A7 FE 69 FC | 	wrlong	#255, fp
1fa48     08 4E 85 F1 | 	sub	fp, #8
1fa4c                 | LR__2505
1fa4c     A7 12 02 F6 | 	mov	arg01, fp
1fa50     F8 DE BE FD | 	call	#_push
1fa54     A7 F0 03 F6 | 	mov	ptra, fp
1fa58     B2 00 A0 FD | 	call	#popregs_
1fa5c                 | _do_fdiv_ret
1fa5c     2D 00 64 FD | 	ret
1fa60                 | 
1fa60                 | ' 
1fa60                 | ' '--------------------------------- greater or equal (>=)
1fa60                 | ' 
1fa60                 | ' sub do_ge
1fa60                 | _do_ge
1fa60     05 4A 05 F6 | 	mov	COUNT_, #5
1fa64     A8 00 A0 FD | 	call	#pushregs_
1fa68     18 F0 07 F1 | 	add	ptra, #24
1fa6c     44 DE BE FD | 	call	#_pop
1fa70     FD 26 02 F6 | 	mov	local01, result1
1fa74     FE 28 02 F6 | 	mov	local02, result2
1fa78     FF 2A 02 F6 | 	mov	local03, result3
1fa7c     0C 4E 05 F1 | 	add	fp, #12
1fa80     A7 26 62 FC | 	wrlong	local01, fp
1fa84     04 4E 05 F1 | 	add	fp, #4
1fa88     A7 28 62 FC | 	wrlong	local02, fp
1fa8c     04 4E 05 F1 | 	add	fp, #4
1fa90     A7 2A 62 FC | 	wrlong	local03, fp
1fa94     14 4E 85 F1 | 	sub	fp, #20
1fa98     18 DE BE FD | 	call	#_pop
1fa9c     FF 2A 02 F6 | 	mov	local03, result3
1faa0     A7 FA 61 FC | 	wrlong	result1, fp
1faa4     04 4E 05 F1 | 	add	fp, #4
1faa8     A7 FC 61 FC | 	wrlong	result2, fp
1faac     04 4E 05 F1 | 	add	fp, #4
1fab0     A7 2A 62 FC | 	wrlong	local03, fp
1fab4                 | ' 
1fab4                 | ' t2=pop()
1fab4                 | ' t1=pop()
1fab4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1fab4     08 4E 85 F1 | 	sub	fp, #8
1fab8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fabc     14 4E 05 A1 |  if_e	add	fp, #20
1fac0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fac4     14 4E 85 A1 |  if_e	sub	fp, #20
1fac8     16 2B 02 A6 |  if_e	mov	local03, local04
1facc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fad0     28 00 90 5D |  if_ne	jmp	#LR__2510
1fad4     00 26 06 F6 | 	mov	local01, #0
1fad8     A7 12 02 FB | 	rdlong	arg01, fp
1fadc     0C 4E 05 F1 | 	add	fp, #12
1fae0     A7 14 02 FB | 	rdlong	arg02, fp
1fae4     0C 4E 85 F1 | 	sub	fp, #12
1fae8     30 89 B0 FD | 	call	#__system___string_cmp
1faec     00 FA 55 F2 | 	cmps	result1, #0 wc
1faf0     00 26 26 36 |  if_ae	not	local01, #0
1faf4     A7 26 62 FC | 	wrlong	local01, fp
1faf8     24 04 90 FD | 	jmp	#LR__2523
1fafc                 | LR__2510
1fafc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1fafc     08 4E 05 F1 | 	add	fp, #8
1fb00     A7 26 02 FB | 	rdlong	local01, fp
1fb04     08 4E 85 F1 | 	sub	fp, #8
1fb08     1E 26 0E F2 | 	cmp	local01, #30 wz
1fb0c     14 4E 05 A1 |  if_e	add	fp, #20
1fb10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb14     14 4E 85 A1 |  if_e	sub	fp, #20
1fb18     16 2B 02 A6 |  if_e	mov	local03, local04
1fb1c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fb20     2C 00 90 5D |  if_ne	jmp	#LR__2511
1fb24     00 26 06 F6 | 	mov	local01, #0
1fb28     A7 12 02 FB | 	rdlong	arg01, fp
1fb2c     0C 4E 05 F1 | 	add	fp, #12
1fb30     A7 14 02 FB | 	rdlong	arg02, fp
1fb34     0C 4E 85 F1 | 	sub	fp, #12
1fb38     01 16 66 F6 | 	neg	arg03, #1
1fb3c     64 BB B0 FD | 	call	#__system___float_cmp
1fb40     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb44     00 26 26 36 |  if_ae	not	local01, #0
1fb48     A7 26 62 FC | 	wrlong	local01, fp
1fb4c     D0 03 90 FD | 	jmp	#LR__2523
1fb50                 | LR__2511
1fb50                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1fb50     08 4E 05 F1 | 	add	fp, #8
1fb54     A7 26 02 FB | 	rdlong	local01, fp
1fb58     08 4E 85 F1 | 	sub	fp, #8
1fb5c     1E 26 0E F2 | 	cmp	local01, #30 wz
1fb60     14 4E 05 A1 |  if_e	add	fp, #20
1fb64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb68     14 4E 85 A1 |  if_e	sub	fp, #20
1fb6c     16 2B 02 A6 |  if_e	mov	local03, local04
1fb70     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fb74     48 00 90 5D |  if_ne	jmp	#LR__2512
1fb78     00 26 06 F6 | 	mov	local01, #0
1fb7c     A7 28 02 FB | 	rdlong	local02, fp
1fb80     0C 4E 05 F1 | 	add	fp, #12
1fb84     A7 12 02 FB | 	rdlong	arg01, fp
1fb88     0C 4E 85 F1 | 	sub	fp, #12
1fb8c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fb90     1F 2E C6 C9 |  if_b	decod	local05, #31
1fb94     00 2E 06 36 |  if_ae	mov	local05, #0
1fb98     D0 B2 B0 FD | 	call	#__system___float_fromuns
1fb9c     17 FB 61 F5 | 	xor	result1, local05
1fba0     FD 14 02 F6 | 	mov	arg02, result1
1fba4     14 13 02 F6 | 	mov	arg01, local02
1fba8     01 16 66 F6 | 	neg	arg03, #1
1fbac     F4 BA B0 FD | 	call	#__system___float_cmp
1fbb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fbb4     00 26 26 36 |  if_ae	not	local01, #0
1fbb8     A7 26 62 FC | 	wrlong	local01, fp
1fbbc     60 03 90 FD | 	jmp	#LR__2523
1fbc0                 | LR__2512
1fbc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1fbc0     08 4E 05 F1 | 	add	fp, #8
1fbc4     A7 26 02 FB | 	rdlong	local01, fp
1fbc8     08 4E 85 F1 | 	sub	fp, #8
1fbcc     1E 26 0E F2 | 	cmp	local01, #30 wz
1fbd0     14 4E 05 A1 |  if_e	add	fp, #20
1fbd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbd8     14 4E 85 A1 |  if_e	sub	fp, #20
1fbdc     16 2B 02 A6 |  if_e	mov	local03, local04
1fbe0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fbe4     38 00 90 5D |  if_ne	jmp	#LR__2513
1fbe8     00 26 06 F6 | 	mov	local01, #0
1fbec     A7 28 02 FB | 	rdlong	local02, fp
1fbf0     0C 4E 05 F1 | 	add	fp, #12
1fbf4     A7 12 02 FB | 	rdlong	arg01, fp
1fbf8     0C 4E 85 F1 | 	sub	fp, #12
1fbfc     6C B2 B0 FD | 	call	#__system___float_fromuns
1fc00     FD 14 02 F6 | 	mov	arg02, result1
1fc04     14 13 02 F6 | 	mov	arg01, local02
1fc08     01 16 66 F6 | 	neg	arg03, #1
1fc0c     94 BA B0 FD | 	call	#__system___float_cmp
1fc10     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc14     00 26 26 36 |  if_ae	not	local01, #0
1fc18     A7 26 62 FC | 	wrlong	local01, fp
1fc1c     00 03 90 FD | 	jmp	#LR__2523
1fc20                 | LR__2513
1fc20                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1fc20     08 4E 05 F1 | 	add	fp, #8
1fc24     A7 26 02 FB | 	rdlong	local01, fp
1fc28     08 4E 85 F1 | 	sub	fp, #8
1fc2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fc30     14 4E 05 A1 |  if_e	add	fp, #20
1fc34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc38     14 4E 85 A1 |  if_e	sub	fp, #20
1fc3c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc40     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc44     44 00 90 5D |  if_ne	jmp	#LR__2514
1fc48     00 26 06 F6 | 	mov	local01, #0
1fc4c     A7 12 02 FB | 	rdlong	arg01, fp
1fc50     09 13 52 F6 | 	abs	arg01, arg01 wc
1fc54     1F 2E C6 C9 |  if_b	decod	local05, #31
1fc58     00 2E 06 36 |  if_ae	mov	local05, #0
1fc5c     0C B2 B0 FD | 	call	#__system___float_fromuns
1fc60     17 FB 61 F5 | 	xor	result1, local05
1fc64     FD 12 02 F6 | 	mov	arg01, result1
1fc68     0C 4E 05 F1 | 	add	fp, #12
1fc6c     A7 14 02 FB | 	rdlong	arg02, fp
1fc70     0C 4E 85 F1 | 	sub	fp, #12
1fc74     01 16 66 F6 | 	neg	arg03, #1
1fc78     28 BA B0 FD | 	call	#__system___float_cmp
1fc7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc80     00 26 26 36 |  if_ae	not	local01, #0
1fc84     A7 26 62 FC | 	wrlong	local01, fp
1fc88     94 02 90 FD | 	jmp	#LR__2523
1fc8c                 | LR__2514
1fc8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1fc8c     08 4E 05 F1 | 	add	fp, #8
1fc90     A7 26 02 FB | 	rdlong	local01, fp
1fc94     08 4E 85 F1 | 	sub	fp, #8
1fc98     1C 26 0E F2 | 	cmp	local01, #28 wz
1fc9c     14 4E 05 A1 |  if_e	add	fp, #20
1fca0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fca4     14 4E 85 A1 |  if_e	sub	fp, #20
1fca8     16 2B 02 A6 |  if_e	mov	local03, local04
1fcac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fcb0     24 00 90 5D |  if_ne	jmp	#LR__2515
1fcb4     00 26 06 F6 | 	mov	local01, #0
1fcb8     A7 28 02 FB | 	rdlong	local02, fp
1fcbc     0C 4E 05 F1 | 	add	fp, #12
1fcc0     A7 2A 02 FB | 	rdlong	local03, fp
1fcc4     0C 4E 85 F1 | 	sub	fp, #12
1fcc8     15 29 52 F2 | 	cmps	local02, local03 wc
1fccc     01 26 66 36 |  if_ae	neg	local01, #1
1fcd0     A7 26 62 FC | 	wrlong	local01, fp
1fcd4     48 02 90 FD | 	jmp	#LR__2523
1fcd8                 | LR__2515
1fcd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1fcd8     08 4E 05 F1 | 	add	fp, #8
1fcdc     A7 26 02 FB | 	rdlong	local01, fp
1fce0     08 4E 85 F1 | 	sub	fp, #8
1fce4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fce8     14 4E 05 A1 |  if_e	add	fp, #20
1fcec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcf0     14 4E 85 A1 |  if_e	sub	fp, #20
1fcf4     16 2B 02 A6 |  if_e	mov	local03, local04
1fcf8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fcfc     24 00 90 5D |  if_ne	jmp	#LR__2516
1fd00     00 26 06 F6 | 	mov	local01, #0
1fd04     A7 28 02 FB | 	rdlong	local02, fp
1fd08     0C 4E 05 F1 | 	add	fp, #12
1fd0c     A7 2A 02 FB | 	rdlong	local03, fp
1fd10     0C 4E 85 F1 | 	sub	fp, #12
1fd14     15 29 52 F2 | 	cmps	local02, local03 wc
1fd18     01 26 66 36 |  if_ae	neg	local01, #1
1fd1c     A7 26 62 FC | 	wrlong	local01, fp
1fd20     FC 01 90 FD | 	jmp	#LR__2523
1fd24                 | LR__2516
1fd24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1fd24     08 4E 05 F1 | 	add	fp, #8
1fd28     A7 26 02 FB | 	rdlong	local01, fp
1fd2c     08 4E 85 F1 | 	sub	fp, #8
1fd30     1D 26 0E F2 | 	cmp	local01, #29 wz
1fd34     14 4E 05 A1 |  if_e	add	fp, #20
1fd38     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd3c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd40     16 2B 02 A6 |  if_e	mov	local03, local04
1fd44     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd48     34 00 90 5D |  if_ne	jmp	#LR__2517
1fd4c     00 26 06 F6 | 	mov	local01, #0
1fd50     A7 12 02 FB | 	rdlong	arg01, fp
1fd54     14 B1 B0 FD | 	call	#__system___float_fromuns
1fd58     FD 12 02 F6 | 	mov	arg01, result1
1fd5c     0C 4E 05 F1 | 	add	fp, #12
1fd60     A7 14 02 FB | 	rdlong	arg02, fp
1fd64     0C 4E 85 F1 | 	sub	fp, #12
1fd68     01 16 66 F6 | 	neg	arg03, #1
1fd6c     34 B9 B0 FD | 	call	#__system___float_cmp
1fd70     00 FA 55 F2 | 	cmps	result1, #0 wc
1fd74     00 26 26 36 |  if_ae	not	local01, #0
1fd78     A7 26 62 FC | 	wrlong	local01, fp
1fd7c     A0 01 90 FD | 	jmp	#LR__2523
1fd80                 | LR__2517
1fd80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1fd80     08 4E 05 F1 | 	add	fp, #8
1fd84     A7 26 02 FB | 	rdlong	local01, fp
1fd88     08 4E 85 F1 | 	sub	fp, #8
1fd8c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fd90     14 4E 05 A1 |  if_e	add	fp, #20
1fd94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd98     14 4E 85 A1 |  if_e	sub	fp, #20
1fd9c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fda0     24 00 90 5D |  if_ne	jmp	#LR__2518
1fda4     00 26 06 F6 | 	mov	local01, #0
1fda8     A7 28 02 FB | 	rdlong	local02, fp
1fdac     0C 4E 05 F1 | 	add	fp, #12
1fdb0     A7 2A 02 FB | 	rdlong	local03, fp
1fdb4     0C 4E 85 F1 | 	sub	fp, #12
1fdb8     15 29 52 F2 | 	cmps	local02, local03 wc
1fdbc     01 26 66 36 |  if_ae	neg	local01, #1
1fdc0     A7 26 62 FC | 	wrlong	local01, fp
1fdc4     58 01 90 FD | 	jmp	#LR__2523
1fdc8                 | LR__2518
1fdc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1fdc8     08 4E 05 F1 | 	add	fp, #8
1fdcc     A7 26 02 FB | 	rdlong	local01, fp
1fdd0     08 4E 85 F1 | 	sub	fp, #8
1fdd4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fdd8     14 4E 05 A1 |  if_e	add	fp, #20
1fddc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fde0     14 4E 85 A1 |  if_e	sub	fp, #20
1fde4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fde8     24 00 90 5D |  if_ne	jmp	#LR__2519
1fdec     00 26 06 F6 | 	mov	local01, #0
1fdf0     A7 28 02 FB | 	rdlong	local02, fp
1fdf4     0C 4E 05 F1 | 	add	fp, #12
1fdf8     A7 2A 02 FB | 	rdlong	local03, fp
1fdfc     0C 4E 85 F1 | 	sub	fp, #12
1fe00     15 29 12 F2 | 	cmp	local02, local03 wc
1fe04     01 26 66 36 |  if_ae	neg	local01, #1
1fe08     A7 26 62 FC | 	wrlong	local01, fp
1fe0c     10 01 90 FD | 	jmp	#LR__2523
1fe10                 | LR__2519
1fe10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1fe10     08 4E 05 F1 | 	add	fp, #8
1fe14     A7 26 02 FB | 	rdlong	local01, fp
1fe18     08 4E 85 F1 | 	sub	fp, #8
1fe1c     2B 26 0E F2 | 	cmp	local01, #43 wz
1fe20     14 4E 05 A1 |  if_e	add	fp, #20
1fe24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe28     14 4E 85 A1 |  if_e	sub	fp, #20
1fe2c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fe30     30 00 90 5D |  if_ne	jmp	#LR__2520
1fe34     00 26 06 F6 | 	mov	local01, #0
1fe38     A7 12 02 FB | 	rdlong	arg01, fp
1fe3c     EC DB BE FD | 	call	#_convertstring
1fe40     FD 12 02 F6 | 	mov	arg01, result1
1fe44     0C 4E 05 F1 | 	add	fp, #12
1fe48     A7 14 02 FB | 	rdlong	arg02, fp
1fe4c     0C 4E 85 F1 | 	sub	fp, #12
1fe50     C8 85 B0 FD | 	call	#__system___string_cmp
1fe54     00 FA 55 F2 | 	cmps	result1, #0 wc
1fe58     00 26 26 36 |  if_ae	not	local01, #0
1fe5c     A7 26 62 FC | 	wrlong	local01, fp
1fe60     BC 00 90 FD | 	jmp	#LR__2523
1fe64                 | LR__2520
1fe64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1fe64     08 4E 05 F1 | 	add	fp, #8
1fe68     A7 26 02 FB | 	rdlong	local01, fp
1fe6c     08 4E 85 F1 | 	sub	fp, #8
1fe70     1F 26 0E F2 | 	cmp	local01, #31 wz
1fe74     14 4E 05 A1 |  if_e	add	fp, #20
1fe78     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fe80     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fe84     34 00 90 5D |  if_ne	jmp	#LR__2521
1fe88     00 26 06 F6 | 	mov	local01, #0
1fe8c     A7 28 02 FB | 	rdlong	local02, fp
1fe90     0C 4E 05 F1 | 	add	fp, #12
1fe94     A7 12 02 FB | 	rdlong	arg01, fp
1fe98     0C 4E 85 F1 | 	sub	fp, #12
1fe9c     8C DB BE FD | 	call	#_convertstring
1fea0     FD 14 02 F6 | 	mov	arg02, result1
1fea4     14 13 02 F6 | 	mov	arg01, local02
1fea8     70 85 B0 FD | 	call	#__system___string_cmp
1feac     00 FA 55 F2 | 	cmps	result1, #0 wc
1feb0     00 26 26 36 |  if_ae	not	local01, #0
1feb4     A7 26 62 FC | 	wrlong	local01, fp
1feb8     64 00 90 FD | 	jmp	#LR__2523
1febc                 | LR__2521
1febc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1febc     08 4E 05 F1 | 	add	fp, #8
1fec0     A7 26 02 FB | 	rdlong	local01, fp
1fec4     08 4E 85 F1 | 	sub	fp, #8
1fec8     2B 26 0E F2 | 	cmp	local01, #43 wz
1fecc     14 4E 05 A1 |  if_e	add	fp, #20
1fed0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fed4     14 4E 85 A1 |  if_e	sub	fp, #20
1fed8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fedc     3C 00 90 5D |  if_ne	jmp	#LR__2522
1fee0     00 26 06 F6 | 	mov	local01, #0
1fee4     A7 12 02 FB | 	rdlong	arg01, fp
1fee8     40 DB BE FD | 	call	#_convertstring
1feec     FD 28 02 F6 | 	mov	local02, result1
1fef0     0C 4E 05 F1 | 	add	fp, #12
1fef4     A7 12 02 FB | 	rdlong	arg01, fp
1fef8     0C 4E 85 F1 | 	sub	fp, #12
1fefc     2C DB BE FD | 	call	#_convertstring
1ff00     FD 14 02 F6 | 	mov	arg02, result1
1ff04     14 13 02 F6 | 	mov	arg01, local02
1ff08     10 85 B0 FD | 	call	#__system___string_cmp
1ff0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff10     00 26 26 36 |  if_ae	not	local01, #0
1ff14     A7 26 62 FC | 	wrlong	local01, fp
1ff18     04 00 90 FD | 	jmp	#LR__2523
1ff1c                 | LR__2522
1ff1c     A7 00 68 FC | 	wrlong	#0, fp
1ff20                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ff20                 | LR__2523
1ff20     08 4E 05 F1 | 	add	fp, #8
1ff24     A7 38 68 FC | 	wrlong	#28, fp
1ff28     08 4E 85 F1 | 	sub	fp, #8
1ff2c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ff2c     A7 26 0A FB | 	rdlong	local01, fp wz
1ff30     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ff34     A7 12 02 F6 | 	mov	arg01, fp
1ff38     10 DA BE FD | 	call	#_push
1ff3c     A7 F0 03 F6 | 	mov	ptra, fp
1ff40     B2 00 A0 FD | 	call	#popregs_
1ff44                 | _do_ge_ret
1ff44     2D 00 64 FD | 	ret
1ff48                 | 
1ff48                 | ' 
1ff48                 | ' '--------------------------------- greater than (>)
1ff48                 | ' 
1ff48                 | ' sub do_gt
1ff48                 | _do_gt
1ff48     05 4A 05 F6 | 	mov	COUNT_, #5
1ff4c     A8 00 A0 FD | 	call	#pushregs_
1ff50     18 F0 07 F1 | 	add	ptra, #24
1ff54     5C D9 BE FD | 	call	#_pop
1ff58     FD 26 02 F6 | 	mov	local01, result1
1ff5c     FE 28 02 F6 | 	mov	local02, result2
1ff60     FF 2A 02 F6 | 	mov	local03, result3
1ff64     0C 4E 05 F1 | 	add	fp, #12
1ff68     A7 26 62 FC | 	wrlong	local01, fp
1ff6c     04 4E 05 F1 | 	add	fp, #4
1ff70     A7 28 62 FC | 	wrlong	local02, fp
1ff74     04 4E 05 F1 | 	add	fp, #4
1ff78     A7 2A 62 FC | 	wrlong	local03, fp
1ff7c     14 4E 85 F1 | 	sub	fp, #20
1ff80     30 D9 BE FD | 	call	#_pop
1ff84     FF 2A 02 F6 | 	mov	local03, result3
1ff88     A7 FA 61 FC | 	wrlong	result1, fp
1ff8c     04 4E 05 F1 | 	add	fp, #4
1ff90     A7 FC 61 FC | 	wrlong	result2, fp
1ff94     04 4E 05 F1 | 	add	fp, #4
1ff98     A7 2A 62 FC | 	wrlong	local03, fp
1ff9c                 | ' 
1ff9c                 | ' t2=pop()
1ff9c                 | ' t1=pop()
1ff9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1ff9c     08 4E 85 F1 | 	sub	fp, #8
1ffa0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ffa4     14 4E 05 A1 |  if_e	add	fp, #20
1ffa8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ffac     14 4E 85 A1 |  if_e	sub	fp, #20
1ffb0     16 2B 02 A6 |  if_e	mov	local03, local04
1ffb4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ffb8     28 00 90 5D |  if_ne	jmp	#LR__2530
1ffbc     00 26 06 F6 | 	mov	local01, #0
1ffc0     A7 12 02 FB | 	rdlong	arg01, fp
1ffc4     0C 4E 05 F1 | 	add	fp, #12
1ffc8     A7 14 02 FB | 	rdlong	arg02, fp
1ffcc     0C 4E 85 F1 | 	sub	fp, #12
1ffd0     48 84 B0 FD | 	call	#__system___string_cmp
1ffd4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ffd8     00 26 26 36 |  if_ae	not	local01, #0
1ffdc     A7 26 62 FC | 	wrlong	local01, fp
1ffe0     20 04 90 FD | 	jmp	#LR__2543
1ffe4                 | LR__2530
1ffe4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ffe4     08 4E 05 F1 | 	add	fp, #8
1ffe8     A7 26 02 FB | 	rdlong	local01, fp
1ffec     08 4E 85 F1 | 	sub	fp, #8
1fff0     1E 26 0E F2 | 	cmp	local01, #30 wz
1fff4     14 4E 05 A1 |  if_e	add	fp, #20
1fff8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fffc     14 4E 85 A1 |  if_e	sub	fp, #20
20000     16 2B 02 A6 |  if_e	mov	local03, local04
20004     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20008     2C 00 90 5D |  if_ne	jmp	#LR__2531
2000c     00 26 06 F6 | 	mov	local01, #0
20010     A7 12 02 FB | 	rdlong	arg01, fp
20014     0C 4E 05 F1 | 	add	fp, #12
20018     A7 14 02 FB | 	rdlong	arg02, fp
2001c     0C 4E 85 F1 | 	sub	fp, #12
20020     01 16 66 F6 | 	neg	arg03, #1
20024     7C B6 B0 FD | 	call	#__system___float_cmp
20028     01 FA 55 F2 | 	cmps	result1, #1 wc
2002c     00 26 26 36 |  if_ae	not	local01, #0
20030     A7 26 62 FC | 	wrlong	local01, fp
20034     CC 03 90 FD | 	jmp	#LR__2543
20038                 | LR__2531
20038                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
20038     08 4E 05 F1 | 	add	fp, #8
2003c     A7 26 02 FB | 	rdlong	local01, fp
20040     08 4E 85 F1 | 	sub	fp, #8
20044     1E 26 0E F2 | 	cmp	local01, #30 wz
20048     14 4E 05 A1 |  if_e	add	fp, #20
2004c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20050     14 4E 85 A1 |  if_e	sub	fp, #20
20054     16 2B 02 A6 |  if_e	mov	local03, local04
20058     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2005c     48 00 90 5D |  if_ne	jmp	#LR__2532
20060     00 26 06 F6 | 	mov	local01, #0
20064     A7 28 02 FB | 	rdlong	local02, fp
20068     0C 4E 05 F1 | 	add	fp, #12
2006c     A7 12 02 FB | 	rdlong	arg01, fp
20070     0C 4E 85 F1 | 	sub	fp, #12
20074     09 13 52 F6 | 	abs	arg01, arg01 wc
20078     1F 2E C6 C9 |  if_b	decod	local05, #31
2007c     00 2E 06 36 |  if_ae	mov	local05, #0
20080     E8 AD B0 FD | 	call	#__system___float_fromuns
20084     17 FB 61 F5 | 	xor	result1, local05
20088     FD 14 02 F6 | 	mov	arg02, result1
2008c     14 13 02 F6 | 	mov	arg01, local02
20090     01 16 66 F6 | 	neg	arg03, #1
20094     0C B6 B0 FD | 	call	#__system___float_cmp
20098     01 FA 55 F2 | 	cmps	result1, #1 wc
2009c     00 26 26 36 |  if_ae	not	local01, #0
200a0     A7 26 62 FC | 	wrlong	local01, fp
200a4     5C 03 90 FD | 	jmp	#LR__2543
200a8                 | LR__2532
200a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
200a8     08 4E 05 F1 | 	add	fp, #8
200ac     A7 26 02 FB | 	rdlong	local01, fp
200b0     08 4E 85 F1 | 	sub	fp, #8
200b4     1E 26 0E F2 | 	cmp	local01, #30 wz
200b8     14 4E 05 A1 |  if_e	add	fp, #20
200bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
200c0     14 4E 85 A1 |  if_e	sub	fp, #20
200c4     16 2B 02 A6 |  if_e	mov	local03, local04
200c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
200cc     38 00 90 5D |  if_ne	jmp	#LR__2533
200d0     00 26 06 F6 | 	mov	local01, #0
200d4     A7 28 02 FB | 	rdlong	local02, fp
200d8     0C 4E 05 F1 | 	add	fp, #12
200dc     A7 12 02 FB | 	rdlong	arg01, fp
200e0     0C 4E 85 F1 | 	sub	fp, #12
200e4     84 AD B0 FD | 	call	#__system___float_fromuns
200e8     FD 14 02 F6 | 	mov	arg02, result1
200ec     14 13 02 F6 | 	mov	arg01, local02
200f0     01 16 66 F6 | 	neg	arg03, #1
200f4     AC B5 B0 FD | 	call	#__system___float_cmp
200f8     01 FA 55 F2 | 	cmps	result1, #1 wc
200fc     00 26 26 36 |  if_ae	not	local01, #0
20100     A7 26 62 FC | 	wrlong	local01, fp
20104     FC 02 90 FD | 	jmp	#LR__2543
20108                 | LR__2533
20108                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
20108     08 4E 05 F1 | 	add	fp, #8
2010c     A7 26 02 FB | 	rdlong	local01, fp
20110     08 4E 85 F1 | 	sub	fp, #8
20114     1C 26 0E F2 | 	cmp	local01, #28 wz
20118     14 4E 05 A1 |  if_e	add	fp, #20
2011c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20120     14 4E 85 A1 |  if_e	sub	fp, #20
20124     16 2B 02 A6 |  if_e	mov	local03, local04
20128     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2012c     44 00 90 5D |  if_ne	jmp	#LR__2534
20130     00 26 06 F6 | 	mov	local01, #0
20134     A7 12 02 FB | 	rdlong	arg01, fp
20138     09 13 52 F6 | 	abs	arg01, arg01 wc
2013c     1F 2E C6 C9 |  if_b	decod	local05, #31
20140     00 2E 06 36 |  if_ae	mov	local05, #0
20144     24 AD B0 FD | 	call	#__system___float_fromuns
20148     17 FB 61 F5 | 	xor	result1, local05
2014c     FD 12 02 F6 | 	mov	arg01, result1
20150     0C 4E 05 F1 | 	add	fp, #12
20154     A7 14 02 FB | 	rdlong	arg02, fp
20158     0C 4E 85 F1 | 	sub	fp, #12
2015c     01 16 66 F6 | 	neg	arg03, #1
20160     40 B5 B0 FD | 	call	#__system___float_cmp
20164     01 FA 55 F2 | 	cmps	result1, #1 wc
20168     00 26 26 36 |  if_ae	not	local01, #0
2016c     A7 26 62 FC | 	wrlong	local01, fp
20170     90 02 90 FD | 	jmp	#LR__2543
20174                 | LR__2534
20174                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
20174     08 4E 05 F1 | 	add	fp, #8
20178     A7 26 02 FB | 	rdlong	local01, fp
2017c     08 4E 85 F1 | 	sub	fp, #8
20180     1C 26 0E F2 | 	cmp	local01, #28 wz
20184     14 4E 05 A1 |  if_e	add	fp, #20
20188     A7 2C 02 AB |  if_e	rdlong	local04, fp
2018c     14 4E 85 A1 |  if_e	sub	fp, #20
20190     16 2B 02 A6 |  if_e	mov	local03, local04
20194     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20198     24 00 90 5D |  if_ne	jmp	#LR__2535
2019c     00 26 06 F6 | 	mov	local01, #0
201a0     A7 28 02 FB | 	rdlong	local02, fp
201a4     0C 4E 05 F1 | 	add	fp, #12
201a8     A7 2A 02 FB | 	rdlong	local03, fp
201ac     0C 4E 85 F1 | 	sub	fp, #12
201b0     15 29 5A F2 | 	cmps	local02, local03 wcz
201b4     01 26 66 16 |  if_a	neg	local01, #1
201b8     A7 26 62 FC | 	wrlong	local01, fp
201bc     44 02 90 FD | 	jmp	#LR__2543
201c0                 | LR__2535
201c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
201c0     08 4E 05 F1 | 	add	fp, #8
201c4     A7 26 02 FB | 	rdlong	local01, fp
201c8     08 4E 85 F1 | 	sub	fp, #8
201cc     1C 26 0E F2 | 	cmp	local01, #28 wz
201d0     14 4E 05 A1 |  if_e	add	fp, #20
201d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
201d8     14 4E 85 A1 |  if_e	sub	fp, #20
201dc     16 2B 02 A6 |  if_e	mov	local03, local04
201e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
201e4     24 00 90 5D |  if_ne	jmp	#LR__2536
201e8     00 26 06 F6 | 	mov	local01, #0
201ec     A7 28 02 FB | 	rdlong	local02, fp
201f0     0C 4E 05 F1 | 	add	fp, #12
201f4     A7 2A 02 FB | 	rdlong	local03, fp
201f8     0C 4E 85 F1 | 	sub	fp, #12
201fc     15 29 5A F2 | 	cmps	local02, local03 wcz
20200     01 26 66 16 |  if_a	neg	local01, #1
20204     A7 26 62 FC | 	wrlong	local01, fp
20208     F8 01 90 FD | 	jmp	#LR__2543
2020c                 | LR__2536
2020c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
2020c     08 4E 05 F1 | 	add	fp, #8
20210     A7 26 02 FB | 	rdlong	local01, fp
20214     08 4E 85 F1 | 	sub	fp, #8
20218     1D 26 0E F2 | 	cmp	local01, #29 wz
2021c     14 4E 05 A1 |  if_e	add	fp, #20
20220     A7 2C 02 AB |  if_e	rdlong	local04, fp
20224     14 4E 85 A1 |  if_e	sub	fp, #20
20228     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
2022c     34 00 90 5D |  if_ne	jmp	#LR__2537
20230     00 26 06 F6 | 	mov	local01, #0
20234     A7 12 02 FB | 	rdlong	arg01, fp
20238     30 AC B0 FD | 	call	#__system___float_fromuns
2023c     FD 12 02 F6 | 	mov	arg01, result1
20240     0C 4E 05 F1 | 	add	fp, #12
20244     A7 14 02 FB | 	rdlong	arg02, fp
20248     0C 4E 85 F1 | 	sub	fp, #12
2024c     01 16 66 F6 | 	neg	arg03, #1
20250     50 B4 B0 FD | 	call	#__system___float_cmp
20254     01 FA 55 F2 | 	cmps	result1, #1 wc
20258     00 26 26 36 |  if_ae	not	local01, #0
2025c     A7 26 62 FC | 	wrlong	local01, fp
20260     A0 01 90 FD | 	jmp	#LR__2543
20264                 | LR__2537
20264                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
20264     08 4E 05 F1 | 	add	fp, #8
20268     A7 26 02 FB | 	rdlong	local01, fp
2026c     08 4E 85 F1 | 	sub	fp, #8
20270     1D 26 0E F2 | 	cmp	local01, #29 wz
20274     14 4E 05 A1 |  if_e	add	fp, #20
20278     A7 2A 02 AB |  if_e	rdlong	local03, fp
2027c     14 4E 85 A1 |  if_e	sub	fp, #20
20280     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20284     24 00 90 5D |  if_ne	jmp	#LR__2538
20288     00 26 06 F6 | 	mov	local01, #0
2028c     A7 28 02 FB | 	rdlong	local02, fp
20290     0C 4E 05 F1 | 	add	fp, #12
20294     A7 2A 02 FB | 	rdlong	local03, fp
20298     0C 4E 85 F1 | 	sub	fp, #12
2029c     15 29 5A F2 | 	cmps	local02, local03 wcz
202a0     01 26 66 16 |  if_a	neg	local01, #1
202a4     A7 26 62 FC | 	wrlong	local01, fp
202a8     58 01 90 FD | 	jmp	#LR__2543
202ac                 | LR__2538
202ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
202ac     08 4E 05 F1 | 	add	fp, #8
202b0     A7 26 02 FB | 	rdlong	local01, fp
202b4     08 4E 85 F1 | 	sub	fp, #8
202b8     1D 26 0E F2 | 	cmp	local01, #29 wz
202bc     14 4E 05 A1 |  if_e	add	fp, #20
202c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
202c4     14 4E 85 A1 |  if_e	sub	fp, #20
202c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
202cc     24 00 90 5D |  if_ne	jmp	#LR__2539
202d0     00 26 06 F6 | 	mov	local01, #0
202d4     A7 28 02 FB | 	rdlong	local02, fp
202d8     0C 4E 05 F1 | 	add	fp, #12
202dc     A7 2A 02 FB | 	rdlong	local03, fp
202e0     0C 4E 85 F1 | 	sub	fp, #12
202e4     15 29 1A F2 | 	cmp	local02, local03 wcz
202e8     01 26 66 16 |  if_a	neg	local01, #1
202ec     A7 26 62 FC | 	wrlong	local01, fp
202f0     10 01 90 FD | 	jmp	#LR__2543
202f4                 | LR__2539
202f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
202f4     08 4E 05 F1 | 	add	fp, #8
202f8     A7 26 02 FB | 	rdlong	local01, fp
202fc     08 4E 85 F1 | 	sub	fp, #8
20300     2B 26 0E F2 | 	cmp	local01, #43 wz
20304     14 4E 05 A1 |  if_e	add	fp, #20
20308     A7 2A 02 AB |  if_e	rdlong	local03, fp
2030c     14 4E 85 A1 |  if_e	sub	fp, #20
20310     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20314     30 00 90 5D |  if_ne	jmp	#LR__2540
20318     00 26 06 F6 | 	mov	local01, #0
2031c     A7 12 02 FB | 	rdlong	arg01, fp
20320     08 D7 BE FD | 	call	#_convertstring
20324     FD 12 02 F6 | 	mov	arg01, result1
20328     0C 4E 05 F1 | 	add	fp, #12
2032c     A7 14 02 FB | 	rdlong	arg02, fp
20330     0C 4E 85 F1 | 	sub	fp, #12
20334     E4 80 B0 FD | 	call	#__system___string_cmp
20338     01 FA 55 F2 | 	cmps	result1, #1 wc
2033c     00 26 26 36 |  if_ae	not	local01, #0
20340     A7 26 62 FC | 	wrlong	local01, fp
20344     BC 00 90 FD | 	jmp	#LR__2543
20348                 | LR__2540
20348                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
20348     08 4E 05 F1 | 	add	fp, #8
2034c     A7 26 02 FB | 	rdlong	local01, fp
20350     08 4E 85 F1 | 	sub	fp, #8
20354     1F 26 0E F2 | 	cmp	local01, #31 wz
20358     14 4E 05 A1 |  if_e	add	fp, #20
2035c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20360     14 4E 85 A1 |  if_e	sub	fp, #20
20364     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20368     34 00 90 5D |  if_ne	jmp	#LR__2541
2036c     00 26 06 F6 | 	mov	local01, #0
20370     A7 28 02 FB | 	rdlong	local02, fp
20374     0C 4E 05 F1 | 	add	fp, #12
20378     A7 12 02 FB | 	rdlong	arg01, fp
2037c     0C 4E 85 F1 | 	sub	fp, #12
20380     A8 D6 BE FD | 	call	#_convertstring
20384     FD 14 02 F6 | 	mov	arg02, result1
20388     14 13 02 F6 | 	mov	arg01, local02
2038c     8C 80 B0 FD | 	call	#__system___string_cmp
20390     01 FA 55 F2 | 	cmps	result1, #1 wc
20394     00 26 26 36 |  if_ae	not	local01, #0
20398     A7 26 62 FC | 	wrlong	local01, fp
2039c     64 00 90 FD | 	jmp	#LR__2543
203a0                 | LR__2541
203a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
203a0     08 4E 05 F1 | 	add	fp, #8
203a4     A7 26 02 FB | 	rdlong	local01, fp
203a8     08 4E 85 F1 | 	sub	fp, #8
203ac     2B 26 0E F2 | 	cmp	local01, #43 wz
203b0     14 4E 05 A1 |  if_e	add	fp, #20
203b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
203b8     14 4E 85 A1 |  if_e	sub	fp, #20
203bc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
203c0     3C 00 90 5D |  if_ne	jmp	#LR__2542
203c4     00 26 06 F6 | 	mov	local01, #0
203c8     A7 12 02 FB | 	rdlong	arg01, fp
203cc     5C D6 BE FD | 	call	#_convertstring
203d0     FD 28 02 F6 | 	mov	local02, result1
203d4     0C 4E 05 F1 | 	add	fp, #12
203d8     A7 12 02 FB | 	rdlong	arg01, fp
203dc     0C 4E 85 F1 | 	sub	fp, #12
203e0     48 D6 BE FD | 	call	#_convertstring
203e4     FD 14 02 F6 | 	mov	arg02, result1
203e8     14 13 02 F6 | 	mov	arg01, local02
203ec     2C 80 B0 FD | 	call	#__system___string_cmp
203f0     01 FA 55 F2 | 	cmps	result1, #1 wc
203f4     00 26 26 36 |  if_ae	not	local01, #0
203f8     A7 26 62 FC | 	wrlong	local01, fp
203fc     04 00 90 FD | 	jmp	#LR__2543
20400                 | LR__2542
20400     A7 00 68 FC | 	wrlong	#0, fp
20404                 | LR__2543
20404     08 4E 05 F1 | 	add	fp, #8
20408     A7 38 68 FC | 	wrlong	#28, fp
2040c     08 4E 85 F1 | 	sub	fp, #8
20410                 | ' t1.result.uresult=0
20410                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20410     A7 26 0A FB | 	rdlong	local01, fp wz
20414     A7 02 68 5C |  if_ne	wrlong	#1, fp
20418     A7 12 02 F6 | 	mov	arg01, fp
2041c     2C D5 BE FD | 	call	#_push
20420     A7 F0 03 F6 | 	mov	ptra, fp
20424     B2 00 A0 FD | 	call	#popregs_
20428                 | _do_gt_ret
20428     2D 00 64 FD | 	ret
2042c                 | 
2042c                 | ' 
2042c                 | ' '--------------------------------- less or equal (<=)
2042c                 | ' 
2042c                 | ' sub do_le
2042c                 | _do_le
2042c     05 4A 05 F6 | 	mov	COUNT_, #5
20430     A8 00 A0 FD | 	call	#pushregs_
20434     18 F0 07 F1 | 	add	ptra, #24
20438     78 D4 BE FD | 	call	#_pop
2043c     FD 26 02 F6 | 	mov	local01, result1
20440     FE 28 02 F6 | 	mov	local02, result2
20444     FF 2A 02 F6 | 	mov	local03, result3
20448     0C 4E 05 F1 | 	add	fp, #12
2044c     A7 26 62 FC | 	wrlong	local01, fp
20450     04 4E 05 F1 | 	add	fp, #4
20454     A7 28 62 FC | 	wrlong	local02, fp
20458     04 4E 05 F1 | 	add	fp, #4
2045c     A7 2A 62 FC | 	wrlong	local03, fp
20460     14 4E 85 F1 | 	sub	fp, #20
20464     4C D4 BE FD | 	call	#_pop
20468     FF 2A 02 F6 | 	mov	local03, result3
2046c     A7 FA 61 FC | 	wrlong	result1, fp
20470     04 4E 05 F1 | 	add	fp, #4
20474     A7 FC 61 FC | 	wrlong	result2, fp
20478     04 4E 05 F1 | 	add	fp, #4
2047c     A7 2A 62 FC | 	wrlong	local03, fp
20480                 | ' 
20480                 | ' t2=pop()
20480                 | ' t1=pop()
20480                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
20480     08 4E 85 F1 | 	sub	fp, #8
20484     1F 2A 0E F2 | 	cmp	local03, #31 wz
20488     14 4E 05 A1 |  if_e	add	fp, #20
2048c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20490     14 4E 85 A1 |  if_e	sub	fp, #20
20494     16 2B 02 A6 |  if_e	mov	local03, local04
20498     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2049c     28 00 90 5D |  if_ne	jmp	#LR__2550
204a0     00 26 06 F6 | 	mov	local01, #0
204a4     A7 12 02 FB | 	rdlong	arg01, fp
204a8     0C 4E 05 F1 | 	add	fp, #12
204ac     A7 14 02 FB | 	rdlong	arg02, fp
204b0     0C 4E 85 F1 | 	sub	fp, #12
204b4     64 7F B0 FD | 	call	#__system___string_cmp
204b8     01 FA 55 F2 | 	cmps	result1, #1 wc
204bc     00 26 26 C6 |  if_b	not	local01, #0
204c0     A7 26 62 FC | 	wrlong	local01, fp
204c4     20 04 90 FD | 	jmp	#LR__2563
204c8                 | LR__2550
204c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
204c8     08 4E 05 F1 | 	add	fp, #8
204cc     A7 26 02 FB | 	rdlong	local01, fp
204d0     08 4E 85 F1 | 	sub	fp, #8
204d4     1E 26 0E F2 | 	cmp	local01, #30 wz
204d8     14 4E 05 A1 |  if_e	add	fp, #20
204dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
204e0     14 4E 85 A1 |  if_e	sub	fp, #20
204e4     16 2B 02 A6 |  if_e	mov	local03, local04
204e8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
204ec     2C 00 90 5D |  if_ne	jmp	#LR__2551
204f0     00 26 06 F6 | 	mov	local01, #0
204f4     A7 12 02 FB | 	rdlong	arg01, fp
204f8     0C 4E 05 F1 | 	add	fp, #12
204fc     A7 14 02 FB | 	rdlong	arg02, fp
20500     0C 4E 85 F1 | 	sub	fp, #12
20504     01 16 06 F6 | 	mov	arg03, #1
20508     98 B1 B0 FD | 	call	#__system___float_cmp
2050c     01 FA 55 F2 | 	cmps	result1, #1 wc
20510     00 26 26 C6 |  if_b	not	local01, #0
20514     A7 26 62 FC | 	wrlong	local01, fp
20518     CC 03 90 FD | 	jmp	#LR__2563
2051c                 | LR__2551
2051c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
2051c     08 4E 05 F1 | 	add	fp, #8
20520     A7 26 02 FB | 	rdlong	local01, fp
20524     08 4E 85 F1 | 	sub	fp, #8
20528     1E 26 0E F2 | 	cmp	local01, #30 wz
2052c     14 4E 05 A1 |  if_e	add	fp, #20
20530     A7 2C 02 AB |  if_e	rdlong	local04, fp
20534     14 4E 85 A1 |  if_e	sub	fp, #20
20538     16 2B 02 A6 |  if_e	mov	local03, local04
2053c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20540     48 00 90 5D |  if_ne	jmp	#LR__2552
20544     00 26 06 F6 | 	mov	local01, #0
20548     A7 28 02 FB | 	rdlong	local02, fp
2054c     0C 4E 05 F1 | 	add	fp, #12
20550     A7 12 02 FB | 	rdlong	arg01, fp
20554     0C 4E 85 F1 | 	sub	fp, #12
20558     09 13 52 F6 | 	abs	arg01, arg01 wc
2055c     1F 2E C6 C9 |  if_b	decod	local05, #31
20560     00 2E 06 36 |  if_ae	mov	local05, #0
20564     04 A9 B0 FD | 	call	#__system___float_fromuns
20568     17 FB 61 F5 | 	xor	result1, local05
2056c     FD 14 02 F6 | 	mov	arg02, result1
20570     14 13 02 F6 | 	mov	arg01, local02
20574     01 16 06 F6 | 	mov	arg03, #1
20578     28 B1 B0 FD | 	call	#__system___float_cmp
2057c     01 FA 55 F2 | 	cmps	result1, #1 wc
20580     00 26 26 C6 |  if_b	not	local01, #0
20584     A7 26 62 FC | 	wrlong	local01, fp
20588     5C 03 90 FD | 	jmp	#LR__2563
2058c                 | LR__2552
2058c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
2058c     08 4E 05 F1 | 	add	fp, #8
20590     A7 26 02 FB | 	rdlong	local01, fp
20594     08 4E 85 F1 | 	sub	fp, #8
20598     1E 26 0E F2 | 	cmp	local01, #30 wz
2059c     14 4E 05 A1 |  if_e	add	fp, #20
205a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
205a4     14 4E 85 A1 |  if_e	sub	fp, #20
205a8     16 2B 02 A6 |  if_e	mov	local03, local04
205ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
205b0     38 00 90 5D |  if_ne	jmp	#LR__2553
205b4     00 26 06 F6 | 	mov	local01, #0
205b8     A7 28 02 FB | 	rdlong	local02, fp
205bc     0C 4E 05 F1 | 	add	fp, #12
205c0     A7 12 02 FB | 	rdlong	arg01, fp
205c4     0C 4E 85 F1 | 	sub	fp, #12
205c8     A0 A8 B0 FD | 	call	#__system___float_fromuns
205cc     FD 14 02 F6 | 	mov	arg02, result1
205d0     14 13 02 F6 | 	mov	arg01, local02
205d4     01 16 06 F6 | 	mov	arg03, #1
205d8     C8 B0 B0 FD | 	call	#__system___float_cmp
205dc     01 FA 55 F2 | 	cmps	result1, #1 wc
205e0     00 26 26 C6 |  if_b	not	local01, #0
205e4     A7 26 62 FC | 	wrlong	local01, fp
205e8     FC 02 90 FD | 	jmp	#LR__2563
205ec                 | LR__2553
205ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
205ec     08 4E 05 F1 | 	add	fp, #8
205f0     A7 26 02 FB | 	rdlong	local01, fp
205f4     08 4E 85 F1 | 	sub	fp, #8
205f8     1C 26 0E F2 | 	cmp	local01, #28 wz
205fc     14 4E 05 A1 |  if_e	add	fp, #20
20600     A7 2C 02 AB |  if_e	rdlong	local04, fp
20604     14 4E 85 A1 |  if_e	sub	fp, #20
20608     16 2B 02 A6 |  if_e	mov	local03, local04
2060c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20610     44 00 90 5D |  if_ne	jmp	#LR__2554
20614     00 26 06 F6 | 	mov	local01, #0
20618     A7 12 02 FB | 	rdlong	arg01, fp
2061c     09 13 52 F6 | 	abs	arg01, arg01 wc
20620     1F 2E C6 C9 |  if_b	decod	local05, #31
20624     00 2E 06 36 |  if_ae	mov	local05, #0
20628     40 A8 B0 FD | 	call	#__system___float_fromuns
2062c     17 FB 61 F5 | 	xor	result1, local05
20630     FD 12 02 F6 | 	mov	arg01, result1
20634     0C 4E 05 F1 | 	add	fp, #12
20638     A7 14 02 FB | 	rdlong	arg02, fp
2063c     0C 4E 85 F1 | 	sub	fp, #12
20640     01 16 06 F6 | 	mov	arg03, #1
20644     5C B0 B0 FD | 	call	#__system___float_cmp
20648     01 FA 55 F2 | 	cmps	result1, #1 wc
2064c     00 26 26 C6 |  if_b	not	local01, #0
20650     A7 26 62 FC | 	wrlong	local01, fp
20654     90 02 90 FD | 	jmp	#LR__2563
20658                 | LR__2554
20658                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
20658     08 4E 05 F1 | 	add	fp, #8
2065c     A7 26 02 FB | 	rdlong	local01, fp
20660     08 4E 85 F1 | 	sub	fp, #8
20664     1C 26 0E F2 | 	cmp	local01, #28 wz
20668     14 4E 05 A1 |  if_e	add	fp, #20
2066c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20670     14 4E 85 A1 |  if_e	sub	fp, #20
20674     16 2B 02 A6 |  if_e	mov	local03, local04
20678     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2067c     24 00 90 5D |  if_ne	jmp	#LR__2555
20680     00 26 06 F6 | 	mov	local01, #0
20684     A7 28 02 FB | 	rdlong	local02, fp
20688     0C 4E 05 F1 | 	add	fp, #12
2068c     A7 2A 02 FB | 	rdlong	local03, fp
20690     0C 4E 85 F1 | 	sub	fp, #12
20694     15 29 5A F2 | 	cmps	local02, local03 wcz
20698     01 26 66 E6 |  if_be	neg	local01, #1
2069c     A7 26 62 FC | 	wrlong	local01, fp
206a0     44 02 90 FD | 	jmp	#LR__2563
206a4                 | LR__2555
206a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
206a4     08 4E 05 F1 | 	add	fp, #8
206a8     A7 26 02 FB | 	rdlong	local01, fp
206ac     08 4E 85 F1 | 	sub	fp, #8
206b0     1C 26 0E F2 | 	cmp	local01, #28 wz
206b4     14 4E 05 A1 |  if_e	add	fp, #20
206b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
206bc     14 4E 85 A1 |  if_e	sub	fp, #20
206c0     16 2B 02 A6 |  if_e	mov	local03, local04
206c4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
206c8     24 00 90 5D |  if_ne	jmp	#LR__2556
206cc     00 26 06 F6 | 	mov	local01, #0
206d0     A7 28 02 FB | 	rdlong	local02, fp
206d4     0C 4E 05 F1 | 	add	fp, #12
206d8     A7 2A 02 FB | 	rdlong	local03, fp
206dc     0C 4E 85 F1 | 	sub	fp, #12
206e0     15 29 5A F2 | 	cmps	local02, local03 wcz
206e4     01 26 66 E6 |  if_be	neg	local01, #1
206e8     A7 26 62 FC | 	wrlong	local01, fp
206ec     F8 01 90 FD | 	jmp	#LR__2563
206f0                 | LR__2556
206f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
206f0     08 4E 05 F1 | 	add	fp, #8
206f4     A7 26 02 FB | 	rdlong	local01, fp
206f8     08 4E 85 F1 | 	sub	fp, #8
206fc     1D 26 0E F2 | 	cmp	local01, #29 wz
20700     14 4E 05 A1 |  if_e	add	fp, #20
20704     A7 2C 02 AB |  if_e	rdlong	local04, fp
20708     14 4E 85 A1 |  if_e	sub	fp, #20
2070c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20710     34 00 90 5D |  if_ne	jmp	#LR__2557
20714     00 26 06 F6 | 	mov	local01, #0
20718     A7 12 02 FB | 	rdlong	arg01, fp
2071c     4C A7 B0 FD | 	call	#__system___float_fromuns
20720     FD 12 02 F6 | 	mov	arg01, result1
20724     0C 4E 05 F1 | 	add	fp, #12
20728     A7 14 02 FB | 	rdlong	arg02, fp
2072c     0C 4E 85 F1 | 	sub	fp, #12
20730     01 16 06 F6 | 	mov	arg03, #1
20734     6C AF B0 FD | 	call	#__system___float_cmp
20738     01 FA 55 F2 | 	cmps	result1, #1 wc
2073c     00 26 26 C6 |  if_b	not	local01, #0
20740     A7 26 62 FC | 	wrlong	local01, fp
20744     A0 01 90 FD | 	jmp	#LR__2563
20748                 | LR__2557
20748                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
20748     08 4E 05 F1 | 	add	fp, #8
2074c     A7 26 02 FB | 	rdlong	local01, fp
20750     08 4E 85 F1 | 	sub	fp, #8
20754     1D 26 0E F2 | 	cmp	local01, #29 wz
20758     14 4E 05 A1 |  if_e	add	fp, #20
2075c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20760     14 4E 85 A1 |  if_e	sub	fp, #20
20764     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20768     24 00 90 5D |  if_ne	jmp	#LR__2558
2076c     00 26 06 F6 | 	mov	local01, #0
20770     A7 28 02 FB | 	rdlong	local02, fp
20774     0C 4E 05 F1 | 	add	fp, #12
20778     A7 2A 02 FB | 	rdlong	local03, fp
2077c     0C 4E 85 F1 | 	sub	fp, #12
20780     15 29 5A F2 | 	cmps	local02, local03 wcz
20784     01 26 66 E6 |  if_be	neg	local01, #1
20788     A7 26 62 FC | 	wrlong	local01, fp
2078c     58 01 90 FD | 	jmp	#LR__2563
20790                 | LR__2558
20790                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
20790     08 4E 05 F1 | 	add	fp, #8
20794     A7 26 02 FB | 	rdlong	local01, fp
20798     08 4E 85 F1 | 	sub	fp, #8
2079c     1D 26 0E F2 | 	cmp	local01, #29 wz
207a0     14 4E 05 A1 |  if_e	add	fp, #20
207a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
207a8     14 4E 85 A1 |  if_e	sub	fp, #20
207ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
207b0     24 00 90 5D |  if_ne	jmp	#LR__2559
207b4     00 26 06 F6 | 	mov	local01, #0
207b8     A7 28 02 FB | 	rdlong	local02, fp
207bc     0C 4E 05 F1 | 	add	fp, #12
207c0     A7 2A 02 FB | 	rdlong	local03, fp
207c4     0C 4E 85 F1 | 	sub	fp, #12
207c8     15 29 1A F2 | 	cmp	local02, local03 wcz
207cc     01 26 66 E6 |  if_be	neg	local01, #1
207d0     A7 26 62 FC | 	wrlong	local01, fp
207d4     10 01 90 FD | 	jmp	#LR__2563
207d8                 | LR__2559
207d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
207d8     08 4E 05 F1 | 	add	fp, #8
207dc     A7 26 02 FB | 	rdlong	local01, fp
207e0     08 4E 85 F1 | 	sub	fp, #8
207e4     2B 26 0E F2 | 	cmp	local01, #43 wz
207e8     14 4E 05 A1 |  if_e	add	fp, #20
207ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
207f0     14 4E 85 A1 |  if_e	sub	fp, #20
207f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
207f8     30 00 90 5D |  if_ne	jmp	#LR__2560
207fc     00 26 06 F6 | 	mov	local01, #0
20800     A7 12 02 FB | 	rdlong	arg01, fp
20804     24 D2 BE FD | 	call	#_convertstring
20808     FD 12 02 F6 | 	mov	arg01, result1
2080c     0C 4E 05 F1 | 	add	fp, #12
20810     A7 14 02 FB | 	rdlong	arg02, fp
20814     0C 4E 85 F1 | 	sub	fp, #12
20818     00 7C B0 FD | 	call	#__system___string_cmp
2081c     01 FA 55 F2 | 	cmps	result1, #1 wc
20820     00 26 26 C6 |  if_b	not	local01, #0
20824     A7 26 62 FC | 	wrlong	local01, fp
20828     BC 00 90 FD | 	jmp	#LR__2563
2082c                 | LR__2560
2082c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
2082c     08 4E 05 F1 | 	add	fp, #8
20830     A7 26 02 FB | 	rdlong	local01, fp
20834     08 4E 85 F1 | 	sub	fp, #8
20838     1F 26 0E F2 | 	cmp	local01, #31 wz
2083c     14 4E 05 A1 |  if_e	add	fp, #20
20840     A7 2A 02 AB |  if_e	rdlong	local03, fp
20844     14 4E 85 A1 |  if_e	sub	fp, #20
20848     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2084c     34 00 90 5D |  if_ne	jmp	#LR__2561
20850     00 26 06 F6 | 	mov	local01, #0
20854     A7 28 02 FB | 	rdlong	local02, fp
20858     0C 4E 05 F1 | 	add	fp, #12
2085c     A7 12 02 FB | 	rdlong	arg01, fp
20860     0C 4E 85 F1 | 	sub	fp, #12
20864     C4 D1 BE FD | 	call	#_convertstring
20868     FD 14 02 F6 | 	mov	arg02, result1
2086c     14 13 02 F6 | 	mov	arg01, local02
20870     A8 7B B0 FD | 	call	#__system___string_cmp
20874     01 FA 55 F2 | 	cmps	result1, #1 wc
20878     00 26 26 C6 |  if_b	not	local01, #0
2087c     A7 26 62 FC | 	wrlong	local01, fp
20880     64 00 90 FD | 	jmp	#LR__2563
20884                 | LR__2561
20884                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
20884     08 4E 05 F1 | 	add	fp, #8
20888     A7 26 02 FB | 	rdlong	local01, fp
2088c     08 4E 85 F1 | 	sub	fp, #8
20890     2B 26 0E F2 | 	cmp	local01, #43 wz
20894     14 4E 05 A1 |  if_e	add	fp, #20
20898     A7 2A 02 AB |  if_e	rdlong	local03, fp
2089c     14 4E 85 A1 |  if_e	sub	fp, #20
208a0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
208a4     3C 00 90 5D |  if_ne	jmp	#LR__2562
208a8     00 26 06 F6 | 	mov	local01, #0
208ac     A7 12 02 FB | 	rdlong	arg01, fp
208b0     78 D1 BE FD | 	call	#_convertstring
208b4     FD 28 02 F6 | 	mov	local02, result1
208b8     0C 4E 05 F1 | 	add	fp, #12
208bc     A7 12 02 FB | 	rdlong	arg01, fp
208c0     0C 4E 85 F1 | 	sub	fp, #12
208c4     64 D1 BE FD | 	call	#_convertstring
208c8     FD 14 02 F6 | 	mov	arg02, result1
208cc     14 13 02 F6 | 	mov	arg01, local02
208d0     48 7B B0 FD | 	call	#__system___string_cmp
208d4     01 FA 55 F2 | 	cmps	result1, #1 wc
208d8     00 26 26 C6 |  if_b	not	local01, #0
208dc     A7 26 62 FC | 	wrlong	local01, fp
208e0     04 00 90 FD | 	jmp	#LR__2563
208e4                 | LR__2562
208e4     A7 00 68 FC | 	wrlong	#0, fp
208e8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
208e8                 | LR__2563
208e8     08 4E 05 F1 | 	add	fp, #8
208ec     A7 38 68 FC | 	wrlong	#28, fp
208f0     08 4E 85 F1 | 	sub	fp, #8
208f4     A7 12 02 F6 | 	mov	arg01, fp
208f8     50 D0 BE FD | 	call	#_push
208fc     A7 F0 03 F6 | 	mov	ptra, fp
20900     B2 00 A0 FD | 	call	#popregs_
20904                 | _do_le_ret
20904     2D 00 64 FD | 	ret
20908                 | 
20908                 | ' 
20908                 | ' '--------------------------------- less than (<)
20908                 | ' 
20908                 | ' sub do_lt
20908                 | _do_lt
20908     05 4A 05 F6 | 	mov	COUNT_, #5
2090c     A8 00 A0 FD | 	call	#pushregs_
20910     18 F0 07 F1 | 	add	ptra, #24
20914     9C CF BE FD | 	call	#_pop
20918     FD 26 02 F6 | 	mov	local01, result1
2091c     FE 28 02 F6 | 	mov	local02, result2
20920     FF 2A 02 F6 | 	mov	local03, result3
20924     0C 4E 05 F1 | 	add	fp, #12
20928     A7 26 62 FC | 	wrlong	local01, fp
2092c     04 4E 05 F1 | 	add	fp, #4
20930     A7 28 62 FC | 	wrlong	local02, fp
20934     04 4E 05 F1 | 	add	fp, #4
20938     A7 2A 62 FC | 	wrlong	local03, fp
2093c     14 4E 85 F1 | 	sub	fp, #20
20940     70 CF BE FD | 	call	#_pop
20944     FF 2A 02 F6 | 	mov	local03, result3
20948     A7 FA 61 FC | 	wrlong	result1, fp
2094c     04 4E 05 F1 | 	add	fp, #4
20950     A7 FC 61 FC | 	wrlong	result2, fp
20954     04 4E 05 F1 | 	add	fp, #4
20958     A7 2A 62 FC | 	wrlong	local03, fp
2095c                 | ' 
2095c                 | ' t2=pop()
2095c                 | ' t1=pop()
2095c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
2095c     08 4E 85 F1 | 	sub	fp, #8
20960     1F 2A 0E F2 | 	cmp	local03, #31 wz
20964     14 4E 05 A1 |  if_e	add	fp, #20
20968     A7 2C 02 AB |  if_e	rdlong	local04, fp
2096c     14 4E 85 A1 |  if_e	sub	fp, #20
20970     16 2B 02 A6 |  if_e	mov	local03, local04
20974     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20978     28 00 90 5D |  if_ne	jmp	#LR__2570
2097c     00 26 06 F6 | 	mov	local01, #0
20980     A7 12 02 FB | 	rdlong	arg01, fp
20984     0C 4E 05 F1 | 	add	fp, #12
20988     A7 14 02 FB | 	rdlong	arg02, fp
2098c     0C 4E 85 F1 | 	sub	fp, #12
20990     88 7A B0 FD | 	call	#__system___string_cmp
20994     00 FA 55 F2 | 	cmps	result1, #0 wc
20998     00 26 26 C6 |  if_b	not	local01, #0
2099c     A7 26 62 FC | 	wrlong	local01, fp
209a0     10 04 90 FD | 	jmp	#LR__2583
209a4                 | LR__2570
209a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
209a4     08 4E 05 F1 | 	add	fp, #8
209a8     A7 26 02 FB | 	rdlong	local01, fp
209ac     08 4E 85 F1 | 	sub	fp, #8
209b0     1E 26 0E F2 | 	cmp	local01, #30 wz
209b4     14 4E 05 A1 |  if_e	add	fp, #20
209b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
209bc     14 4E 85 A1 |  if_e	sub	fp, #20
209c0     16 2B 02 A6 |  if_e	mov	local03, local04
209c4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
209c8     2C 00 90 5D |  if_ne	jmp	#LR__2571
209cc     00 26 06 F6 | 	mov	local01, #0
209d0     A7 12 02 FB | 	rdlong	arg01, fp
209d4     0C 4E 05 F1 | 	add	fp, #12
209d8     A7 14 02 FB | 	rdlong	arg02, fp
209dc     0C 4E 85 F1 | 	sub	fp, #12
209e0     01 16 06 F6 | 	mov	arg03, #1
209e4     BC AC B0 FD | 	call	#__system___float_cmp
209e8     00 FA 55 F2 | 	cmps	result1, #0 wc
209ec     00 26 26 C6 |  if_b	not	local01, #0
209f0     A7 26 62 FC | 	wrlong	local01, fp
209f4     BC 03 90 FD | 	jmp	#LR__2583
209f8                 | LR__2571
209f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
209f8     08 4E 05 F1 | 	add	fp, #8
209fc     A7 26 02 FB | 	rdlong	local01, fp
20a00     08 4E 85 F1 | 	sub	fp, #8
20a04     1E 26 0E F2 | 	cmp	local01, #30 wz
20a08     14 4E 05 A1 |  if_e	add	fp, #20
20a0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20a10     14 4E 85 A1 |  if_e	sub	fp, #20
20a14     16 2B 02 A6 |  if_e	mov	local03, local04
20a18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20a1c     48 00 90 5D |  if_ne	jmp	#LR__2572
20a20     00 26 06 F6 | 	mov	local01, #0
20a24     A7 28 02 FB | 	rdlong	local02, fp
20a28     0C 4E 05 F1 | 	add	fp, #12
20a2c     A7 12 02 FB | 	rdlong	arg01, fp
20a30     0C 4E 85 F1 | 	sub	fp, #12
20a34     09 13 52 F6 | 	abs	arg01, arg01 wc
20a38     1F 2E C6 C9 |  if_b	decod	local05, #31
20a3c     00 2E 06 36 |  if_ae	mov	local05, #0
20a40     28 A4 B0 FD | 	call	#__system___float_fromuns
20a44     17 FB 61 F5 | 	xor	result1, local05
20a48     FD 14 02 F6 | 	mov	arg02, result1
20a4c     14 13 02 F6 | 	mov	arg01, local02
20a50     01 16 06 F6 | 	mov	arg03, #1
20a54     4C AC B0 FD | 	call	#__system___float_cmp
20a58     00 FA 55 F2 | 	cmps	result1, #0 wc
20a5c     00 26 26 C6 |  if_b	not	local01, #0
20a60     A7 26 62 FC | 	wrlong	local01, fp
20a64     4C 03 90 FD | 	jmp	#LR__2583
20a68                 | LR__2572
20a68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
20a68     08 4E 05 F1 | 	add	fp, #8
20a6c     A7 26 02 FB | 	rdlong	local01, fp
20a70     08 4E 85 F1 | 	sub	fp, #8
20a74     1E 26 0E F2 | 	cmp	local01, #30 wz
20a78     14 4E 05 A1 |  if_e	add	fp, #20
20a7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20a80     14 4E 85 A1 |  if_e	sub	fp, #20
20a84     16 2B 02 A6 |  if_e	mov	local03, local04
20a88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20a8c     38 00 90 5D |  if_ne	jmp	#LR__2573
20a90     00 26 06 F6 | 	mov	local01, #0
20a94     A7 28 02 FB | 	rdlong	local02, fp
20a98     0C 4E 05 F1 | 	add	fp, #12
20a9c     A7 12 02 FB | 	rdlong	arg01, fp
20aa0     0C 4E 85 F1 | 	sub	fp, #12
20aa4     C4 A3 B0 FD | 	call	#__system___float_fromuns
20aa8     FD 14 02 F6 | 	mov	arg02, result1
20aac     14 13 02 F6 | 	mov	arg01, local02
20ab0     01 16 06 F6 | 	mov	arg03, #1
20ab4     EC AB B0 FD | 	call	#__system___float_cmp
20ab8     00 FA 55 F2 | 	cmps	result1, #0 wc
20abc     00 26 26 C6 |  if_b	not	local01, #0
20ac0     A7 26 62 FC | 	wrlong	local01, fp
20ac4     EC 02 90 FD | 	jmp	#LR__2583
20ac8                 | LR__2573
20ac8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
20ac8     08 4E 05 F1 | 	add	fp, #8
20acc     A7 26 02 FB | 	rdlong	local01, fp
20ad0     08 4E 85 F1 | 	sub	fp, #8
20ad4     1C 26 0E F2 | 	cmp	local01, #28 wz
20ad8     14 4E 05 A1 |  if_e	add	fp, #20
20adc     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ae0     14 4E 85 A1 |  if_e	sub	fp, #20
20ae4     16 2B 02 A6 |  if_e	mov	local03, local04
20ae8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20aec     44 00 90 5D |  if_ne	jmp	#LR__2574
20af0     00 26 06 F6 | 	mov	local01, #0
20af4     A7 12 02 FB | 	rdlong	arg01, fp
20af8     09 13 52 F6 | 	abs	arg01, arg01 wc
20afc     1F 2E C6 C9 |  if_b	decod	local05, #31
20b00     00 2E 06 36 |  if_ae	mov	local05, #0
20b04     64 A3 B0 FD | 	call	#__system___float_fromuns
20b08     17 FB 61 F5 | 	xor	result1, local05
20b0c     FD 12 02 F6 | 	mov	arg01, result1
20b10     0C 4E 05 F1 | 	add	fp, #12
20b14     A7 14 02 FB | 	rdlong	arg02, fp
20b18     0C 4E 85 F1 | 	sub	fp, #12
20b1c     01 16 06 F6 | 	mov	arg03, #1
20b20     80 AB B0 FD | 	call	#__system___float_cmp
20b24     00 FA 55 F2 | 	cmps	result1, #0 wc
20b28     00 26 26 C6 |  if_b	not	local01, #0
20b2c     A7 26 62 FC | 	wrlong	local01, fp
20b30     80 02 90 FD | 	jmp	#LR__2583
20b34                 | LR__2574
20b34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
20b34     08 4E 05 F1 | 	add	fp, #8
20b38     A7 26 02 FB | 	rdlong	local01, fp
20b3c     08 4E 85 F1 | 	sub	fp, #8
20b40     1C 26 0E F2 | 	cmp	local01, #28 wz
20b44     14 4E 05 A1 |  if_e	add	fp, #20
20b48     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b4c     14 4E 85 A1 |  if_e	sub	fp, #20
20b50     16 2B 02 A6 |  if_e	mov	local03, local04
20b54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20b58     20 00 90 5D |  if_ne	jmp	#LR__2575
20b5c     A7 28 02 FB | 	rdlong	local02, fp
20b60     0C 4E 05 F1 | 	add	fp, #12
20b64     A7 2A 02 FB | 	rdlong	local03, fp
20b68     0C 4E 85 F1 | 	sub	fp, #12
20b6c     15 29 52 F2 | 	cmps	local02, local03 wc
20b70     13 27 A2 F1 | 	subx	local01, local01
20b74     A7 26 62 FC | 	wrlong	local01, fp
20b78     38 02 90 FD | 	jmp	#LR__2583
20b7c                 | LR__2575
20b7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
20b7c     08 4E 05 F1 | 	add	fp, #8
20b80     A7 26 02 FB | 	rdlong	local01, fp
20b84     08 4E 85 F1 | 	sub	fp, #8
20b88     1C 26 0E F2 | 	cmp	local01, #28 wz
20b8c     14 4E 05 A1 |  if_e	add	fp, #20
20b90     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b94     14 4E 85 A1 |  if_e	sub	fp, #20
20b98     16 2B 02 A6 |  if_e	mov	local03, local04
20b9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20ba0     20 00 90 5D |  if_ne	jmp	#LR__2576
20ba4     A7 28 02 FB | 	rdlong	local02, fp
20ba8     0C 4E 05 F1 | 	add	fp, #12
20bac     A7 2A 02 FB | 	rdlong	local03, fp
20bb0     0C 4E 85 F1 | 	sub	fp, #12
20bb4     15 29 52 F2 | 	cmps	local02, local03 wc
20bb8     13 27 A2 F1 | 	subx	local01, local01
20bbc     A7 26 62 FC | 	wrlong	local01, fp
20bc0     F0 01 90 FD | 	jmp	#LR__2583
20bc4                 | LR__2576
20bc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
20bc4     08 4E 05 F1 | 	add	fp, #8
20bc8     A7 26 02 FB | 	rdlong	local01, fp
20bcc     08 4E 85 F1 | 	sub	fp, #8
20bd0     1D 26 0E F2 | 	cmp	local01, #29 wz
20bd4     14 4E 05 A1 |  if_e	add	fp, #20
20bd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bdc     14 4E 85 A1 |  if_e	sub	fp, #20
20be0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20be4     34 00 90 5D |  if_ne	jmp	#LR__2577
20be8     00 26 06 F6 | 	mov	local01, #0
20bec     A7 12 02 FB | 	rdlong	arg01, fp
20bf0     78 A2 B0 FD | 	call	#__system___float_fromuns
20bf4     FD 12 02 F6 | 	mov	arg01, result1
20bf8     0C 4E 05 F1 | 	add	fp, #12
20bfc     A7 14 02 FB | 	rdlong	arg02, fp
20c00     0C 4E 85 F1 | 	sub	fp, #12
20c04     01 16 06 F6 | 	mov	arg03, #1
20c08     98 AA B0 FD | 	call	#__system___float_cmp
20c0c     00 FA 55 F2 | 	cmps	result1, #0 wc
20c10     00 26 26 C6 |  if_b	not	local01, #0
20c14     A7 26 62 FC | 	wrlong	local01, fp
20c18     98 01 90 FD | 	jmp	#LR__2583
20c1c                 | LR__2577
20c1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
20c1c     08 4E 05 F1 | 	add	fp, #8
20c20     A7 26 02 FB | 	rdlong	local01, fp
20c24     08 4E 85 F1 | 	sub	fp, #8
20c28     1D 26 0E F2 | 	cmp	local01, #29 wz
20c2c     14 4E 05 A1 |  if_e	add	fp, #20
20c30     A7 2A 02 AB |  if_e	rdlong	local03, fp
20c34     14 4E 85 A1 |  if_e	sub	fp, #20
20c38     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c3c     20 00 90 5D |  if_ne	jmp	#LR__2578
20c40     A7 28 02 FB | 	rdlong	local02, fp
20c44     0C 4E 05 F1 | 	add	fp, #12
20c48     A7 2A 02 FB | 	rdlong	local03, fp
20c4c     0C 4E 85 F1 | 	sub	fp, #12
20c50     15 29 52 F2 | 	cmps	local02, local03 wc
20c54     13 27 A2 F1 | 	subx	local01, local01
20c58     A7 26 62 FC | 	wrlong	local01, fp
20c5c     54 01 90 FD | 	jmp	#LR__2583
20c60                 | LR__2578
20c60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
20c60     08 4E 05 F1 | 	add	fp, #8
20c64     A7 26 02 FB | 	rdlong	local01, fp
20c68     08 4E 85 F1 | 	sub	fp, #8
20c6c     1D 26 0E F2 | 	cmp	local01, #29 wz
20c70     14 4E 05 A1 |  if_e	add	fp, #20
20c74     A7 2A 02 AB |  if_e	rdlong	local03, fp
20c78     14 4E 85 A1 |  if_e	sub	fp, #20
20c7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20c80     20 00 90 5D |  if_ne	jmp	#LR__2579
20c84     A7 28 02 FB | 	rdlong	local02, fp
20c88     0C 4E 05 F1 | 	add	fp, #12
20c8c     A7 2A 02 FB | 	rdlong	local03, fp
20c90     0C 4E 85 F1 | 	sub	fp, #12
20c94     15 29 12 F2 | 	cmp	local02, local03 wc
20c98     13 27 A2 F1 | 	subx	local01, local01
20c9c     A7 26 62 FC | 	wrlong	local01, fp
20ca0     10 01 90 FD | 	jmp	#LR__2583
20ca4                 | LR__2579
20ca4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
20ca4     08 4E 05 F1 | 	add	fp, #8
20ca8     A7 26 02 FB | 	rdlong	local01, fp
20cac     08 4E 85 F1 | 	sub	fp, #8
20cb0     2B 26 0E F2 | 	cmp	local01, #43 wz
20cb4     14 4E 05 A1 |  if_e	add	fp, #20
20cb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
20cbc     14 4E 85 A1 |  if_e	sub	fp, #20
20cc0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20cc4     30 00 90 5D |  if_ne	jmp	#LR__2580
20cc8     00 26 06 F6 | 	mov	local01, #0
20ccc     A7 12 02 FB | 	rdlong	arg01, fp
20cd0     58 CD BE FD | 	call	#_convertstring
20cd4     FD 12 02 F6 | 	mov	arg01, result1
20cd8     0C 4E 05 F1 | 	add	fp, #12
20cdc     A7 14 02 FB | 	rdlong	arg02, fp
20ce0     0C 4E 85 F1 | 	sub	fp, #12
20ce4     34 77 B0 FD | 	call	#__system___string_cmp
20ce8     00 FA 55 F2 | 	cmps	result1, #0 wc
20cec     00 26 26 C6 |  if_b	not	local01, #0
20cf0     A7 26 62 FC | 	wrlong	local01, fp
20cf4     BC 00 90 FD | 	jmp	#LR__2583
20cf8                 | LR__2580
20cf8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
20cf8     08 4E 05 F1 | 	add	fp, #8
20cfc     A7 26 02 FB | 	rdlong	local01, fp
20d00     08 4E 85 F1 | 	sub	fp, #8
20d04     1F 26 0E F2 | 	cmp	local01, #31 wz
20d08     14 4E 05 A1 |  if_e	add	fp, #20
20d0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d10     14 4E 85 A1 |  if_e	sub	fp, #20
20d14     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20d18     34 00 90 5D |  if_ne	jmp	#LR__2581
20d1c     00 26 06 F6 | 	mov	local01, #0
20d20     A7 28 02 FB | 	rdlong	local02, fp
20d24     0C 4E 05 F1 | 	add	fp, #12
20d28     A7 12 02 FB | 	rdlong	arg01, fp
20d2c     0C 4E 85 F1 | 	sub	fp, #12
20d30     F8 CC BE FD | 	call	#_convertstring
20d34     FD 14 02 F6 | 	mov	arg02, result1
20d38     14 13 02 F6 | 	mov	arg01, local02
20d3c     DC 76 B0 FD | 	call	#__system___string_cmp
20d40     00 FA 55 F2 | 	cmps	result1, #0 wc
20d44     00 26 26 C6 |  if_b	not	local01, #0
20d48     A7 26 62 FC | 	wrlong	local01, fp
20d4c     64 00 90 FD | 	jmp	#LR__2583
20d50                 | LR__2581
20d50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
20d50     08 4E 05 F1 | 	add	fp, #8
20d54     A7 26 02 FB | 	rdlong	local01, fp
20d58     08 4E 85 F1 | 	sub	fp, #8
20d5c     2B 26 0E F2 | 	cmp	local01, #43 wz
20d60     14 4E 05 A1 |  if_e	add	fp, #20
20d64     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d68     14 4E 85 A1 |  if_e	sub	fp, #20
20d6c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20d70     3C 00 90 5D |  if_ne	jmp	#LR__2582
20d74     00 26 06 F6 | 	mov	local01, #0
20d78     A7 12 02 FB | 	rdlong	arg01, fp
20d7c     AC CC BE FD | 	call	#_convertstring
20d80     FD 28 02 F6 | 	mov	local02, result1
20d84     0C 4E 05 F1 | 	add	fp, #12
20d88     A7 12 02 FB | 	rdlong	arg01, fp
20d8c     0C 4E 85 F1 | 	sub	fp, #12
20d90     98 CC BE FD | 	call	#_convertstring
20d94     FD 14 02 F6 | 	mov	arg02, result1
20d98     14 13 02 F6 | 	mov	arg01, local02
20d9c     7C 76 B0 FD | 	call	#__system___string_cmp
20da0     00 FA 55 F2 | 	cmps	result1, #0 wc
20da4     00 26 26 C6 |  if_b	not	local01, #0
20da8     A7 26 62 FC | 	wrlong	local01, fp
20dac     04 00 90 FD | 	jmp	#LR__2583
20db0                 | LR__2582
20db0     A7 00 68 FC | 	wrlong	#0, fp
20db4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20db4                 | LR__2583
20db4     08 4E 05 F1 | 	add	fp, #8
20db8     A7 38 68 FC | 	wrlong	#28, fp
20dbc     08 4E 85 F1 | 	sub	fp, #8
20dc0     A7 12 02 F6 | 	mov	arg01, fp
20dc4     84 CB BE FD | 	call	#_push
20dc8     A7 F0 03 F6 | 	mov	ptra, fp
20dcc     B2 00 A0 FD | 	call	#popregs_
20dd0                 | _do_lt_ret
20dd0     2D 00 64 FD | 	ret
20dd4                 | 
20dd4                 | ' 
20dd4                 | ' '--------------------------------- minus (-)
20dd4                 | ' 
20dd4                 | ' sub do_minus
20dd4                 | _do_minus
20dd4     05 4A 05 F6 | 	mov	COUNT_, #5
20dd8     A8 00 A0 FD | 	call	#pushregs_
20ddc     18 F0 07 F1 | 	add	ptra, #24
20de0     D0 CA BE FD | 	call	#_pop
20de4     FD 26 02 F6 | 	mov	local01, result1
20de8     FE 28 02 F6 | 	mov	local02, result2
20dec     FF 2A 02 F6 | 	mov	local03, result3
20df0     0C 4E 05 F1 | 	add	fp, #12
20df4     A7 26 62 FC | 	wrlong	local01, fp
20df8     04 4E 05 F1 | 	add	fp, #4
20dfc     A7 28 62 FC | 	wrlong	local02, fp
20e00     04 4E 05 F1 | 	add	fp, #4
20e04     A7 2A 62 FC | 	wrlong	local03, fp
20e08     14 4E 85 F1 | 	sub	fp, #20
20e0c     A4 CA BE FD | 	call	#_pop
20e10     FF 2A 02 F6 | 	mov	local03, result3
20e14     A7 FA 61 FC | 	wrlong	result1, fp
20e18     04 4E 05 F1 | 	add	fp, #4
20e1c     A7 FC 61 FC | 	wrlong	result2, fp
20e20     04 4E 05 F1 | 	add	fp, #4
20e24     A7 2A 62 FC | 	wrlong	local03, fp
20e28                 | ' 
20e28                 | ' t2=pop()
20e28                 | ' t1=pop()
20e28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
20e28     08 4E 85 F1 | 	sub	fp, #8
20e2c     1D 2A 0E F2 | 	cmp	local03, #29 wz
20e30     14 4E 05 A1 |  if_e	add	fp, #20
20e34     A7 2C 02 AB |  if_e	rdlong	local04, fp
20e38     14 4E 85 A1 |  if_e	sub	fp, #20
20e3c     16 2B 02 A6 |  if_e	mov	local03, local04
20e40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20e44     5C 00 90 5D |  if_ne	jmp	#LR__2591
20e48                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
20e48     0C 4E 05 F1 | 	add	fp, #12
20e4c     A7 26 02 FB | 	rdlong	local01, fp
20e50     0C 4E 85 F1 | 	sub	fp, #12
20e54     A7 2A 02 FB | 	rdlong	local03, fp
20e58     15 27 12 F2 | 	cmp	local01, local03 wc
20e5c     1C 00 90 3D |  if_ae	jmp	#LR__2590
20e60     A7 26 02 FB | 	rdlong	local01, fp
20e64     0C 4E 05 F1 | 	add	fp, #12
20e68     A7 28 02 FB | 	rdlong	local02, fp
20e6c     0C 4E 85 F1 | 	sub	fp, #12
20e70     14 27 82 F1 | 	sub	local01, local02
20e74     A7 26 62 FC | 	wrlong	local01, fp
20e78     F4 02 90 FD | 	jmp	#LR__2600
20e7c                 | LR__2590
20e7c     A7 26 02 FB | 	rdlong	local01, fp
20e80     0C 4E 05 F1 | 	add	fp, #12
20e84     A7 28 02 FB | 	rdlong	local02, fp
20e88     0C 4E 85 F1 | 	sub	fp, #12
20e8c     14 27 82 F1 | 	sub	local01, local02
20e90     A7 26 62 FC | 	wrlong	local01, fp
20e94     08 4E 05 F1 | 	add	fp, #8
20e98     A7 38 68 FC | 	wrlong	#28, fp
20e9c     08 4E 85 F1 | 	sub	fp, #8
20ea0     CC 02 90 FD | 	jmp	#LR__2600
20ea4                 | LR__2591
20ea4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
20ea4     08 4E 05 F1 | 	add	fp, #8
20ea8     A7 26 02 FB | 	rdlong	local01, fp
20eac     08 4E 85 F1 | 	sub	fp, #8
20eb0     1D 26 0E F2 | 	cmp	local01, #29 wz
20eb4     14 4E 05 A1 |  if_e	add	fp, #20
20eb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ebc     14 4E 85 A1 |  if_e	sub	fp, #20
20ec0     16 2B 02 A6 |  if_e	mov	local03, local04
20ec4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20ec8     28 00 90 5D |  if_ne	jmp	#LR__2592
20ecc     A7 26 02 FB | 	rdlong	local01, fp
20ed0     0C 4E 05 F1 | 	add	fp, #12
20ed4     A7 28 02 FB | 	rdlong	local02, fp
20ed8     0C 4E 85 F1 | 	sub	fp, #12
20edc     14 27 82 F1 | 	sub	local01, local02
20ee0     A7 26 62 FC | 	wrlong	local01, fp
20ee4     08 4E 05 F1 | 	add	fp, #8
20ee8     A7 38 68 FC | 	wrlong	#28, fp
20eec     08 4E 85 F1 | 	sub	fp, #8
20ef0     7C 02 90 FD | 	jmp	#LR__2600
20ef4                 | LR__2592
20ef4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
20ef4     08 4E 05 F1 | 	add	fp, #8
20ef8     A7 26 02 FB | 	rdlong	local01, fp
20efc     08 4E 85 F1 | 	sub	fp, #8
20f00     1D 26 0E F2 | 	cmp	local01, #29 wz
20f04     14 4E 05 A1 |  if_e	add	fp, #20
20f08     A7 2C 02 AB |  if_e	rdlong	local04, fp
20f0c     14 4E 85 A1 |  if_e	sub	fp, #20
20f10     16 2B 02 A6 |  if_e	mov	local03, local04
20f14     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20f18     34 00 90 5D |  if_ne	jmp	#LR__2593
20f1c     A7 12 02 FB | 	rdlong	arg01, fp
20f20     48 9F B0 FD | 	call	#__system___float_fromuns
20f24     FD 12 02 F6 | 	mov	arg01, result1
20f28     0C 4E 05 F1 | 	add	fp, #12
20f2c     A7 14 02 FB | 	rdlong	arg02, fp
20f30     0C 4E 85 F1 | 	sub	fp, #12
20f34     1F 14 E6 F4 | 	bitnot	arg02, #31
20f38     64 9F B0 FD | 	call	#__system___float_add
20f3c     A7 FA 61 FC | 	wrlong	result1, fp
20f40     08 4E 05 F1 | 	add	fp, #8
20f44     A7 3C 68 FC | 	wrlong	#30, fp
20f48     08 4E 85 F1 | 	sub	fp, #8
20f4c     20 02 90 FD | 	jmp	#LR__2600
20f50                 | LR__2593
20f50                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
20f50     08 4E 05 F1 | 	add	fp, #8
20f54     A7 26 02 FB | 	rdlong	local01, fp
20f58     08 4E 85 F1 | 	sub	fp, #8
20f5c     1C 26 0E F2 | 	cmp	local01, #28 wz
20f60     14 4E 05 A1 |  if_e	add	fp, #20
20f64     A7 2C 02 AB |  if_e	rdlong	local04, fp
20f68     14 4E 85 A1 |  if_e	sub	fp, #20
20f6c     16 2B 02 A6 |  if_e	mov	local03, local04
20f70     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20f74     1C 00 90 5D |  if_ne	jmp	#LR__2594
20f78     A7 26 02 FB | 	rdlong	local01, fp
20f7c     0C 4E 05 F1 | 	add	fp, #12
20f80     A7 28 02 FB | 	rdlong	local02, fp
20f84     0C 4E 85 F1 | 	sub	fp, #12
20f88     14 27 82 F1 | 	sub	local01, local02
20f8c     A7 26 62 FC | 	wrlong	local01, fp
20f90     DC 01 90 FD | 	jmp	#LR__2600
20f94                 | LR__2594
20f94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
20f94     08 4E 05 F1 | 	add	fp, #8
20f98     A7 26 02 FB | 	rdlong	local01, fp
20f9c     08 4E 85 F1 | 	sub	fp, #8
20fa0     1C 26 0E F2 | 	cmp	local01, #28 wz
20fa4     14 4E 05 A1 |  if_e	add	fp, #20
20fa8     A7 2C 02 AB |  if_e	rdlong	local04, fp
20fac     14 4E 85 A1 |  if_e	sub	fp, #20
20fb0     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
20fb4     1C 00 90 5D |  if_ne	jmp	#LR__2595
20fb8     A7 26 02 FB | 	rdlong	local01, fp
20fbc     0C 4E 05 F1 | 	add	fp, #12
20fc0     A7 28 02 FB | 	rdlong	local02, fp
20fc4     0C 4E 85 F1 | 	sub	fp, #12
20fc8     14 27 82 F1 | 	sub	local01, local02
20fcc     A7 26 62 FC | 	wrlong	local01, fp
20fd0     9C 01 90 FD | 	jmp	#LR__2600
20fd4                 | LR__2595
20fd4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
20fd4     08 4E 05 F1 | 	add	fp, #8
20fd8     A7 26 02 FB | 	rdlong	local01, fp
20fdc     08 4E 85 F1 | 	sub	fp, #8
20fe0     1C 26 0E F2 | 	cmp	local01, #28 wz
20fe4     14 4E 05 A1 |  if_e	add	fp, #20
20fe8     A7 2A 02 AB |  if_e	rdlong	local03, fp
20fec     14 4E 85 A1 |  if_e	sub	fp, #20
20ff0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20ff4     44 00 90 5D |  if_ne	jmp	#LR__2596
20ff8     A7 12 02 FB | 	rdlong	arg01, fp
20ffc     09 13 52 F6 | 	abs	arg01, arg01 wc
21000     1F 2E C6 C9 |  if_b	decod	local05, #31
21004     00 2E 06 36 |  if_ae	mov	local05, #0
21008     60 9E B0 FD | 	call	#__system___float_fromuns
2100c     17 FB 61 F5 | 	xor	result1, local05
21010     FD 12 02 F6 | 	mov	arg01, result1
21014     0C 4E 05 F1 | 	add	fp, #12
21018     A7 14 02 FB | 	rdlong	arg02, fp
2101c     0C 4E 85 F1 | 	sub	fp, #12
21020     1F 14 E6 F4 | 	bitnot	arg02, #31
21024     78 9E B0 FD | 	call	#__system___float_add
21028     A7 FA 61 FC | 	wrlong	result1, fp
2102c     08 4E 05 F1 | 	add	fp, #8
21030     A7 3C 68 FC | 	wrlong	#30, fp
21034     08 4E 85 F1 | 	sub	fp, #8
21038     34 01 90 FD | 	jmp	#LR__2600
2103c                 | LR__2596
2103c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
2103c     08 4E 05 F1 | 	add	fp, #8
21040     A7 26 02 FB | 	rdlong	local01, fp
21044     08 4E 85 F1 | 	sub	fp, #8
21048     1E 26 0E F2 | 	cmp	local01, #30 wz
2104c     14 4E 05 A1 |  if_e	add	fp, #20
21050     A7 2A 02 AB |  if_e	rdlong	local03, fp
21054     14 4E 85 A1 |  if_e	sub	fp, #20
21058     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2105c     2C 00 90 5D |  if_ne	jmp	#LR__2597
21060     A7 26 02 FB | 	rdlong	local01, fp
21064     0C 4E 05 F1 | 	add	fp, #12
21068     A7 12 02 FB | 	rdlong	arg01, fp
2106c     0C 4E 85 F1 | 	sub	fp, #12
21070     F8 9D B0 FD | 	call	#__system___float_fromuns
21074     FD 14 02 F6 | 	mov	arg02, result1
21078     13 13 02 F6 | 	mov	arg01, local01
2107c     1F 14 E6 F4 | 	bitnot	arg02, #31
21080     1C 9E B0 FD | 	call	#__system___float_add
21084     A7 FA 61 FC | 	wrlong	result1, fp
21088     E4 00 90 FD | 	jmp	#LR__2600
2108c                 | LR__2597
2108c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
2108c     08 4E 05 F1 | 	add	fp, #8
21090     A7 26 02 FB | 	rdlong	local01, fp
21094     08 4E 85 F1 | 	sub	fp, #8
21098     1E 26 0E F2 | 	cmp	local01, #30 wz
2109c     14 4E 05 A1 |  if_e	add	fp, #20
210a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
210a4     14 4E 85 A1 |  if_e	sub	fp, #20
210a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
210ac     3C 00 90 5D |  if_ne	jmp	#LR__2598
210b0     A7 26 02 FB | 	rdlong	local01, fp
210b4     0C 4E 05 F1 | 	add	fp, #12
210b8     A7 12 02 FB | 	rdlong	arg01, fp
210bc     0C 4E 85 F1 | 	sub	fp, #12
210c0     09 13 52 F6 | 	abs	arg01, arg01 wc
210c4     1F 2E C6 C9 |  if_b	decod	local05, #31
210c8     00 2E 06 36 |  if_ae	mov	local05, #0
210cc     9C 9D B0 FD | 	call	#__system___float_fromuns
210d0     17 FB 61 F5 | 	xor	result1, local05
210d4     FD 14 02 F6 | 	mov	arg02, result1
210d8     13 13 02 F6 | 	mov	arg01, local01
210dc     1F 14 E6 F4 | 	bitnot	arg02, #31
210e0     BC 9D B0 FD | 	call	#__system___float_add
210e4     A7 FA 61 FC | 	wrlong	result1, fp
210e8     84 00 90 FD | 	jmp	#LR__2600
210ec                 | LR__2598
210ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
210ec     08 4E 05 F1 | 	add	fp, #8
210f0     A7 26 02 FB | 	rdlong	local01, fp
210f4     08 4E 85 F1 | 	sub	fp, #8
210f8     1E 26 0E F2 | 	cmp	local01, #30 wz
210fc     14 4E 05 A1 |  if_e	add	fp, #20
21100     A7 2A 02 AB |  if_e	rdlong	local03, fp
21104     14 4E 85 A1 |  if_e	sub	fp, #20
21108     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2110c     20 00 90 5D |  if_ne	jmp	#LR__2599
21110     A7 12 02 FB | 	rdlong	arg01, fp
21114     0C 4E 05 F1 | 	add	fp, #12
21118     A7 14 02 FB | 	rdlong	arg02, fp
2111c     0C 4E 85 F1 | 	sub	fp, #12
21120     1F 14 E6 F4 | 	bitnot	arg02, #31
21124     78 9D B0 FD | 	call	#__system___float_add
21128     A7 FA 61 FC | 	wrlong	result1, fp
2112c     40 00 90 FD | 	jmp	#LR__2600
21130                 | LR__2599
21130                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
21130     08 4E 05 F1 | 	add	fp, #8
21134     A7 26 02 FB | 	rdlong	local01, fp
21138     08 4E 85 F1 | 	sub	fp, #8
2113c     1F 26 0E F2 | 	cmp	local01, #31 wz
21140     14 4E 05 51 |  if_ne	add	fp, #20
21144     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21148     14 4E 85 51 |  if_ne	sub	fp, #20
2114c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
21150     A7 06 68 AC |  if_e	wrlong	#3, fp
21154     08 4E 05 A1 |  if_e	add	fp, #8
21158     A7 FE 69 AC |  if_e	wrlong	#255, fp
2115c     08 4E 85 A1 |  if_e	sub	fp, #8
21160     A7 0A 68 5C |  if_ne	wrlong	#5, fp
21164     08 4E 05 51 |  if_ne	add	fp, #8
21168     A7 FE 69 5C |  if_ne	wrlong	#255, fp
2116c     08 4E 85 51 |  if_ne	sub	fp, #8
21170                 | LR__2600
21170     A7 12 02 F6 | 	mov	arg01, fp
21174     D4 C7 BE FD | 	call	#_push
21178     A7 F0 03 F6 | 	mov	ptra, fp
2117c     B2 00 A0 FD | 	call	#popregs_
21180                 | _do_minus_ret
21180     2D 00 64 FD | 	ret
21184                 | 
21184                 | ' 
21184                 | ' '--------------------------------- negative (-), one argument negative
21184                 | ' 
21184                 | ' sub do_negative
21184                 | _do_negative
21184     02 4A 05 F6 | 	mov	COUNT_, #2
21188     A8 00 A0 FD | 	call	#pushregs_
2118c     0C F0 07 F1 | 	add	ptra, #12
21190     20 C7 BE FD | 	call	#_pop
21194     FF 26 02 F6 | 	mov	local01, result3
21198     A7 FA 61 FC | 	wrlong	result1, fp
2119c     04 4E 05 F1 | 	add	fp, #4
211a0     A7 FC 61 FC | 	wrlong	result2, fp
211a4     04 4E 05 F1 | 	add	fp, #4
211a8     A7 26 62 FC | 	wrlong	local01, fp
211ac                 | ' 
211ac                 | ' t1=pop()
211ac                 | ' if t1.result_type=result_int then 
211ac     08 4E 85 F1 | 	sub	fp, #8
211b0     1C 26 0E F2 | 	cmp	local01, #28 wz
211b4     A7 28 02 AB |  if_e	rdlong	local02, fp
211b8     14 27 62 A6 |  if_e	neg	local01, local02
211bc     A7 26 62 AC |  if_e	wrlong	local01, fp
211c0     5C 00 90 AD |  if_e	jmp	#LR__2612
211c4     08 4E 05 F1 | 	add	fp, #8
211c8     A7 26 02 FB | 	rdlong	local01, fp
211cc     08 4E 85 F1 | 	sub	fp, #8
211d0     1D 26 0E F2 | 	cmp	local01, #29 wz
211d4     1C 00 90 5D |  if_ne	jmp	#LR__2610
211d8     A7 28 02 FB | 	rdlong	local02, fp
211dc     14 27 62 F6 | 	neg	local01, local02
211e0     A7 26 62 FC | 	wrlong	local01, fp
211e4     08 4E 05 F1 | 	add	fp, #8
211e8     A7 38 68 FC | 	wrlong	#28, fp
211ec     08 4E 85 F1 | 	sub	fp, #8
211f0     2C 00 90 FD | 	jmp	#LR__2611
211f4                 | LR__2610
211f4     08 4E 05 F1 | 	add	fp, #8
211f8     A7 26 02 FB | 	rdlong	local01, fp
211fc     08 4E 85 F1 | 	sub	fp, #8
21200     1E 26 0E F2 | 	cmp	local01, #30 wz
21204     A7 FA 01 AB |  if_e	rdlong	result1, fp
21208     1F FA E5 A4 |  if_e	bitnot	result1, #31
2120c     A7 FA 61 AC |  if_e	wrlong	result1, fp
21210     08 4E 05 51 |  if_ne	add	fp, #8
21214     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21218     08 4E 85 51 |  if_ne	sub	fp, #8
2121c     A7 50 68 5C |  if_ne	wrlong	#40, fp
21220                 | LR__2611
21220                 | LR__2612
21220     A7 12 02 F6 | 	mov	arg01, fp
21224     24 C7 BE FD | 	call	#_push
21228     A7 F0 03 F6 | 	mov	ptra, fp
2122c     B2 00 A0 FD | 	call	#popregs_
21230                 | _do_negative_ret
21230     2D 00 64 FD | 	ret
21234                 | 
21234                 | ' 
21234                 | ' '--------------------------------- MOD (modulo)
21234                 | ' 
21234                 | ' sub do_mod 
21234                 | _do_mod
21234     01 4A 05 F6 | 	mov	COUNT_, #1
21238     A8 00 A0 FD | 	call	#pushregs_
2123c     18 F0 07 F1 | 	add	ptra, #24
21240     70 C6 BE FD | 	call	#_pop
21244     FD 92 02 F6 | 	mov	muldivb_, result1
21248     FE 90 02 F6 | 	mov	muldiva_, result2
2124c     FF 26 02 F6 | 	mov	local01, result3
21250     0C 4E 05 F1 | 	add	fp, #12
21254     A7 92 62 FC | 	wrlong	muldivb_, fp
21258     04 4E 05 F1 | 	add	fp, #4
2125c     A7 90 62 FC | 	wrlong	muldiva_, fp
21260     04 4E 05 F1 | 	add	fp, #4
21264     A7 26 62 FC | 	wrlong	local01, fp
21268     14 4E 85 F1 | 	sub	fp, #20
2126c     44 C6 BE FD | 	call	#_pop
21270     A7 FA 61 FC | 	wrlong	result1, fp
21274     04 4E 05 F1 | 	add	fp, #4
21278     A7 FC 61 FC | 	wrlong	result2, fp
2127c     04 4E 05 F1 | 	add	fp, #4
21280     A7 FE 61 FC | 	wrlong	result3, fp
21284                 | ' 
21284                 | ' t2=pop()
21284                 | ' t1=pop()
21284                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
21284     08 4E 85 F1 | 	sub	fp, #8
21288     1F FE 0D F2 | 	cmp	result3, #31 wz
2128c     14 4E 05 51 |  if_ne	add	fp, #20
21290     A7 12 02 5B |  if_ne	rdlong	arg01, fp
21294     14 4E 85 51 |  if_ne	sub	fp, #20
21298     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
2129c     A7 14 68 AC |  if_e	wrlong	#10, fp
212a0     08 4E 05 A1 |  if_e	add	fp, #8
212a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
212a8     08 4E 85 A1 |  if_e	sub	fp, #8
212ac     90 01 90 AD |  if_e	jmp	#LR__2626
212b0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
212b0     08 4E 05 F1 | 	add	fp, #8
212b4     A7 92 02 FB | 	rdlong	muldivb_, fp
212b8     08 4E 85 F1 | 	sub	fp, #8
212bc     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
212c0     1C 00 90 5D |  if_ne	jmp	#LR__2620
212c4     08 4E 05 F1 | 	add	fp, #8
212c8     A7 38 68 FC | 	wrlong	#28, fp
212cc     08 4E 85 F1 | 	sub	fp, #8
212d0     A7 12 02 FB | 	rdlong	arg01, fp
212d4     00 14 06 F6 | 	mov	arg02, #0
212d8     5C A4 B0 FD | 	call	#__system___float_tointeger
212dc     A7 FA 61 FC | 	wrlong	result1, fp
212e0                 | LR__2620
212e0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
212e0     14 4E 05 F1 | 	add	fp, #20
212e4     A7 92 02 FB | 	rdlong	muldivb_, fp
212e8     14 4E 85 F1 | 	sub	fp, #20
212ec     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
212f0     28 00 90 5D |  if_ne	jmp	#LR__2621
212f4     14 4E 05 F1 | 	add	fp, #20
212f8     A7 38 68 FC | 	wrlong	#28, fp
212fc     08 4E 85 F1 | 	sub	fp, #8
21300     A7 12 02 FB | 	rdlong	arg01, fp
21304     0C 4E 85 F1 | 	sub	fp, #12
21308     00 14 06 F6 | 	mov	arg02, #0
2130c     28 A4 B0 FD | 	call	#__system___float_tointeger
21310     0C 4E 05 F1 | 	add	fp, #12
21314     A7 FA 61 FC | 	wrlong	result1, fp
21318     0C 4E 85 F1 | 	sub	fp, #12
2131c                 | LR__2621
2131c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
2131c     08 4E 05 F1 | 	add	fp, #8
21320     A7 92 02 FB | 	rdlong	muldivb_, fp
21324     08 4E 85 F1 | 	sub	fp, #8
21328     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
2132c     14 4E 05 A1 |  if_e	add	fp, #20
21330     A7 26 02 AB |  if_e	rdlong	local01, fp
21334     14 4E 85 A1 |  if_e	sub	fp, #20
21338     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
2133c     20 00 90 5D |  if_ne	jmp	#LR__2622
21340     0C 4E 05 F1 | 	add	fp, #12
21344     A7 26 02 FB | 	rdlong	local01, fp
21348     0C 4E 85 F1 | 	sub	fp, #12
2134c     A7 92 02 FB | 	rdlong	muldivb_, fp
21350     13 93 12 FD | 	qdiv	muldivb_, local01
21354     19 26 62 FD | 	getqy	local01
21358     A7 26 62 FC | 	wrlong	local01, fp
2135c     E0 00 90 FD | 	jmp	#LR__2626
21360                 | LR__2622
21360                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
21360     08 4E 05 F1 | 	add	fp, #8
21364     A7 92 02 FB | 	rdlong	muldivb_, fp
21368     08 4E 85 F1 | 	sub	fp, #8
2136c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
21370     14 4E 05 A1 |  if_e	add	fp, #20
21374     A7 26 02 AB |  if_e	rdlong	local01, fp
21378     14 4E 85 A1 |  if_e	sub	fp, #20
2137c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
21380     2C 00 90 5D |  if_ne	jmp	#LR__2623
21384     0C 4E 05 F1 | 	add	fp, #12
21388     A7 26 02 FB | 	rdlong	local01, fp
2138c     0C 4E 85 F1 | 	sub	fp, #12
21390     A7 92 02 FB | 	rdlong	muldivb_, fp
21394     13 93 12 FD | 	qdiv	muldivb_, local01
21398     19 26 62 FD | 	getqy	local01
2139c     A7 26 62 FC | 	wrlong	local01, fp
213a0     08 4E 05 F1 | 	add	fp, #8
213a4     A7 38 68 FC | 	wrlong	#28, fp
213a8     08 4E 85 F1 | 	sub	fp, #8
213ac     90 00 90 FD | 	jmp	#LR__2626
213b0                 | LR__2623
213b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
213b0     08 4E 05 F1 | 	add	fp, #8
213b4     A7 92 02 FB | 	rdlong	muldivb_, fp
213b8     08 4E 85 F1 | 	sub	fp, #8
213bc     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
213c0     14 4E 05 A1 |  if_e	add	fp, #20
213c4     A7 26 02 AB |  if_e	rdlong	local01, fp
213c8     14 4E 85 A1 |  if_e	sub	fp, #20
213cc     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
213d0     1C 00 90 5D |  if_ne	jmp	#LR__2624
213d4     A7 90 02 FB | 	rdlong	muldiva_, fp
213d8     0C 4E 05 F1 | 	add	fp, #12
213dc     A7 92 02 FB | 	rdlong	muldivb_, fp
213e0     0C 4E 85 F1 | 	sub	fp, #12
213e4     BA 00 A0 FD | 	call	#divide_
213e8     A7 90 62 FC | 	wrlong	muldiva_, fp
213ec     50 00 90 FD | 	jmp	#LR__2626
213f0                 | LR__2624
213f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
213f0     08 4E 05 F1 | 	add	fp, #8
213f4     A7 92 02 FB | 	rdlong	muldivb_, fp
213f8     08 4E 85 F1 | 	sub	fp, #8
213fc     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
21400     14 4E 05 A1 |  if_e	add	fp, #20
21404     A7 26 02 AB |  if_e	rdlong	local01, fp
21408     14 4E 85 A1 |  if_e	sub	fp, #20
2140c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
21410     1C 00 90 5D |  if_ne	jmp	#LR__2625
21414     A7 90 02 FB | 	rdlong	muldiva_, fp
21418     0C 4E 05 F1 | 	add	fp, #12
2141c     A7 92 02 FB | 	rdlong	muldivb_, fp
21420     0C 4E 85 F1 | 	sub	fp, #12
21424     BA 00 A0 FD | 	call	#divide_
21428     A7 90 62 FC | 	wrlong	muldiva_, fp
2142c     10 00 90 FD | 	jmp	#LR__2626
21430                 | LR__2625
21430     A7 16 68 FC | 	wrlong	#11, fp
21434     08 4E 05 F1 | 	add	fp, #8
21438     A7 FE 69 FC | 	wrlong	#255, fp
2143c     08 4E 85 F1 | 	sub	fp, #8
21440                 | LR__2626
21440     A7 12 02 F6 | 	mov	arg01, fp
21444     04 C5 BE FD | 	call	#_push
21448     A7 F0 03 F6 | 	mov	ptra, fp
2144c     B2 00 A0 FD | 	call	#popregs_
21450                 | _do_mod_ret
21450     2D 00 64 FD | 	ret
21454                 | 
21454                 | ' 
21454                 | ' '--------------------------------- mul (*)
21454                 | ' 
21454                 | ' sub do_mul
21454                 | _do_mul
21454     05 4A 05 F6 | 	mov	COUNT_, #5
21458     A8 00 A0 FD | 	call	#pushregs_
2145c     18 F0 07 F1 | 	add	ptra, #24
21460     50 C4 BE FD | 	call	#_pop
21464     FD 26 02 F6 | 	mov	local01, result1
21468     FE 28 02 F6 | 	mov	local02, result2
2146c     FF 2A 02 F6 | 	mov	local03, result3
21470     0C 4E 05 F1 | 	add	fp, #12
21474     A7 26 62 FC | 	wrlong	local01, fp
21478     04 4E 05 F1 | 	add	fp, #4
2147c     A7 28 62 FC | 	wrlong	local02, fp
21480     04 4E 05 F1 | 	add	fp, #4
21484     A7 2A 62 FC | 	wrlong	local03, fp
21488     14 4E 85 F1 | 	sub	fp, #20
2148c     24 C4 BE FD | 	call	#_pop
21490     FF 2A 02 F6 | 	mov	local03, result3
21494     A7 FA 61 FC | 	wrlong	result1, fp
21498     04 4E 05 F1 | 	add	fp, #4
2149c     A7 FC 61 FC | 	wrlong	result2, fp
214a0     04 4E 05 F1 | 	add	fp, #4
214a4     A7 2A 62 FC | 	wrlong	local03, fp
214a8                 | ' 
214a8                 | ' t2=pop()
214a8                 | ' t1=pop()
214a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
214a8     08 4E 85 F1 | 	sub	fp, #8
214ac     1D 2A 0E F2 | 	cmp	local03, #29 wz
214b0     14 4E 05 A1 |  if_e	add	fp, #20
214b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
214b8     14 4E 85 A1 |  if_e	sub	fp, #20
214bc     16 2B 02 A6 |  if_e	mov	local03, local04
214c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
214c4     20 00 90 5D |  if_ne	jmp	#LR__2630
214c8     A7 28 02 FB | 	rdlong	local02, fp
214cc     0C 4E 05 F1 | 	add	fp, #12
214d0     A7 2A 02 FB | 	rdlong	local03, fp
214d4     15 29 02 FD | 	qmul	local02, local03
214d8     0C 4E 85 F1 | 	sub	fp, #12
214dc     18 26 62 FD | 	getqx	local01
214e0     A7 26 62 FC | 	wrlong	local01, fp
214e4     C4 02 90 FD | 	jmp	#LR__2639
214e8                 | LR__2630
214e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
214e8     08 4E 05 F1 | 	add	fp, #8
214ec     A7 26 02 FB | 	rdlong	local01, fp
214f0     08 4E 85 F1 | 	sub	fp, #8
214f4     1D 26 0E F2 | 	cmp	local01, #29 wz
214f8     14 4E 05 A1 |  if_e	add	fp, #20
214fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
21500     14 4E 85 A1 |  if_e	sub	fp, #20
21504     16 2B 02 A6 |  if_e	mov	local03, local04
21508     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2150c     2C 00 90 5D |  if_ne	jmp	#LR__2631
21510     A7 28 02 FB | 	rdlong	local02, fp
21514     0C 4E 05 F1 | 	add	fp, #12
21518     A7 2A 02 FB | 	rdlong	local03, fp
2151c     15 29 02 FD | 	qmul	local02, local03
21520     0C 4E 85 F1 | 	sub	fp, #12
21524     18 26 62 FD | 	getqx	local01
21528     A7 26 62 FC | 	wrlong	local01, fp
2152c     08 4E 05 F1 | 	add	fp, #8
21530     A7 38 68 FC | 	wrlong	#28, fp
21534     08 4E 85 F1 | 	sub	fp, #8
21538     70 02 90 FD | 	jmp	#LR__2639
2153c                 | LR__2631
2153c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
2153c     08 4E 05 F1 | 	add	fp, #8
21540     A7 26 02 FB | 	rdlong	local01, fp
21544     08 4E 85 F1 | 	sub	fp, #8
21548     1D 26 0E F2 | 	cmp	local01, #29 wz
2154c     14 4E 05 A1 |  if_e	add	fp, #20
21550     A7 2C 02 AB |  if_e	rdlong	local04, fp
21554     14 4E 85 A1 |  if_e	sub	fp, #20
21558     16 2B 02 A6 |  if_e	mov	local03, local04
2155c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21560     30 00 90 5D |  if_ne	jmp	#LR__2632
21564     A7 12 02 FB | 	rdlong	arg01, fp
21568     00 99 B0 FD | 	call	#__system___float_fromuns
2156c     FD 12 02 F6 | 	mov	arg01, result1
21570     0C 4E 05 F1 | 	add	fp, #12
21574     A7 14 02 FB | 	rdlong	arg02, fp
21578     0C 4E 85 F1 | 	sub	fp, #12
2157c     F0 9C B0 FD | 	call	#__system___float_mul
21580     A7 FA 61 FC | 	wrlong	result1, fp
21584     08 4E 05 F1 | 	add	fp, #8
21588     A7 3C 68 FC | 	wrlong	#30, fp
2158c     08 4E 85 F1 | 	sub	fp, #8
21590     18 02 90 FD | 	jmp	#LR__2639
21594                 | LR__2632
21594                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
21594     08 4E 05 F1 | 	add	fp, #8
21598     A7 26 02 FB | 	rdlong	local01, fp
2159c     08 4E 85 F1 | 	sub	fp, #8
215a0     1C 26 0E F2 | 	cmp	local01, #28 wz
215a4     14 4E 05 A1 |  if_e	add	fp, #20
215a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
215ac     14 4E 85 A1 |  if_e	sub	fp, #20
215b0     16 2B 02 A6 |  if_e	mov	local03, local04
215b4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
215b8     20 00 90 5D |  if_ne	jmp	#LR__2633
215bc     A7 28 02 FB | 	rdlong	local02, fp
215c0     0C 4E 05 F1 | 	add	fp, #12
215c4     A7 2A 02 FB | 	rdlong	local03, fp
215c8     15 29 02 FD | 	qmul	local02, local03
215cc     0C 4E 85 F1 | 	sub	fp, #12
215d0     18 26 62 FD | 	getqx	local01
215d4     A7 26 62 FC | 	wrlong	local01, fp
215d8     D0 01 90 FD | 	jmp	#LR__2639
215dc                 | LR__2633
215dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
215dc     08 4E 05 F1 | 	add	fp, #8
215e0     A7 26 02 FB | 	rdlong	local01, fp
215e4     08 4E 85 F1 | 	sub	fp, #8
215e8     1C 26 0E F2 | 	cmp	local01, #28 wz
215ec     14 4E 05 A1 |  if_e	add	fp, #20
215f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
215f4     14 4E 85 A1 |  if_e	sub	fp, #20
215f8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
215fc     20 00 90 5D |  if_ne	jmp	#LR__2634
21600     A7 28 02 FB | 	rdlong	local02, fp
21604     0C 4E 05 F1 | 	add	fp, #12
21608     A7 2A 02 FB | 	rdlong	local03, fp
2160c     15 29 02 FD | 	qmul	local02, local03
21610     0C 4E 85 F1 | 	sub	fp, #12
21614     18 26 62 FD | 	getqx	local01
21618     A7 26 62 FC | 	wrlong	local01, fp
2161c     8C 01 90 FD | 	jmp	#LR__2639
21620                 | LR__2634
21620                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
21620     08 4E 05 F1 | 	add	fp, #8
21624     A7 26 02 FB | 	rdlong	local01, fp
21628     08 4E 85 F1 | 	sub	fp, #8
2162c     1C 26 0E F2 | 	cmp	local01, #28 wz
21630     14 4E 05 A1 |  if_e	add	fp, #20
21634     A7 2A 02 AB |  if_e	rdlong	local03, fp
21638     14 4E 85 A1 |  if_e	sub	fp, #20
2163c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21640     40 00 90 5D |  if_ne	jmp	#LR__2635
21644     A7 12 02 FB | 	rdlong	arg01, fp
21648     09 13 52 F6 | 	abs	arg01, arg01 wc
2164c     1F 2E C6 C9 |  if_b	decod	local05, #31
21650     00 2E 06 36 |  if_ae	mov	local05, #0
21654     14 98 B0 FD | 	call	#__system___float_fromuns
21658     17 FB 61 F5 | 	xor	result1, local05
2165c     FD 12 02 F6 | 	mov	arg01, result1
21660     0C 4E 05 F1 | 	add	fp, #12
21664     A7 14 02 FB | 	rdlong	arg02, fp
21668     0C 4E 85 F1 | 	sub	fp, #12
2166c     00 9C B0 FD | 	call	#__system___float_mul
21670     A7 FA 61 FC | 	wrlong	result1, fp
21674     08 4E 05 F1 | 	add	fp, #8
21678     A7 3C 68 FC | 	wrlong	#30, fp
2167c     08 4E 85 F1 | 	sub	fp, #8
21680     28 01 90 FD | 	jmp	#LR__2639
21684                 | LR__2635
21684                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
21684     08 4E 05 F1 | 	add	fp, #8
21688     A7 26 02 FB | 	rdlong	local01, fp
2168c     08 4E 85 F1 | 	sub	fp, #8
21690     1E 26 0E F2 | 	cmp	local01, #30 wz
21694     14 4E 05 A1 |  if_e	add	fp, #20
21698     A7 2A 02 AB |  if_e	rdlong	local03, fp
2169c     14 4E 85 A1 |  if_e	sub	fp, #20
216a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
216a4     28 00 90 5D |  if_ne	jmp	#LR__2636
216a8     A7 26 02 FB | 	rdlong	local01, fp
216ac     0C 4E 05 F1 | 	add	fp, #12
216b0     A7 12 02 FB | 	rdlong	arg01, fp
216b4     0C 4E 85 F1 | 	sub	fp, #12
216b8     B0 97 B0 FD | 	call	#__system___float_fromuns
216bc     FD 14 02 F6 | 	mov	arg02, result1
216c0     13 13 02 F6 | 	mov	arg01, local01
216c4     A8 9B B0 FD | 	call	#__system___float_mul
216c8     A7 FA 61 FC | 	wrlong	result1, fp
216cc     DC 00 90 FD | 	jmp	#LR__2639
216d0                 | LR__2636
216d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
216d0     08 4E 05 F1 | 	add	fp, #8
216d4     A7 26 02 FB | 	rdlong	local01, fp
216d8     08 4E 85 F1 | 	sub	fp, #8
216dc     1E 26 0E F2 | 	cmp	local01, #30 wz
216e0     14 4E 05 A1 |  if_e	add	fp, #20
216e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
216e8     14 4E 85 A1 |  if_e	sub	fp, #20
216ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
216f0     38 00 90 5D |  if_ne	jmp	#LR__2637
216f4     A7 26 02 FB | 	rdlong	local01, fp
216f8     0C 4E 05 F1 | 	add	fp, #12
216fc     A7 12 02 FB | 	rdlong	arg01, fp
21700     0C 4E 85 F1 | 	sub	fp, #12
21704     09 13 52 F6 | 	abs	arg01, arg01 wc
21708     1F 2E C6 C9 |  if_b	decod	local05, #31
2170c     00 2E 06 36 |  if_ae	mov	local05, #0
21710     58 97 B0 FD | 	call	#__system___float_fromuns
21714     17 FB 61 F5 | 	xor	result1, local05
21718     FD 14 02 F6 | 	mov	arg02, result1
2171c     13 13 02 F6 | 	mov	arg01, local01
21720     4C 9B B0 FD | 	call	#__system___float_mul
21724     A7 FA 61 FC | 	wrlong	result1, fp
21728     80 00 90 FD | 	jmp	#LR__2639
2172c                 | LR__2637
2172c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
2172c     08 4E 05 F1 | 	add	fp, #8
21730     A7 26 02 FB | 	rdlong	local01, fp
21734     08 4E 85 F1 | 	sub	fp, #8
21738     1E 26 0E F2 | 	cmp	local01, #30 wz
2173c     14 4E 05 A1 |  if_e	add	fp, #20
21740     A7 2A 02 AB |  if_e	rdlong	local03, fp
21744     14 4E 85 A1 |  if_e	sub	fp, #20
21748     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2174c     1C 00 90 5D |  if_ne	jmp	#LR__2638
21750     A7 12 02 FB | 	rdlong	arg01, fp
21754     0C 4E 05 F1 | 	add	fp, #12
21758     A7 14 02 FB | 	rdlong	arg02, fp
2175c     0C 4E 85 F1 | 	sub	fp, #12
21760     0C 9B B0 FD | 	call	#__system___float_mul
21764     A7 FA 61 FC | 	wrlong	result1, fp
21768     40 00 90 FD | 	jmp	#LR__2639
2176c                 | LR__2638
2176c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
2176c     08 4E 05 F1 | 	add	fp, #8
21770     A7 26 02 FB | 	rdlong	local01, fp
21774     08 4E 85 F1 | 	sub	fp, #8
21778     1F 26 0E F2 | 	cmp	local01, #31 wz
2177c     14 4E 05 51 |  if_ne	add	fp, #20
21780     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21784     14 4E 85 51 |  if_ne	sub	fp, #20
21788     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
2178c     A7 10 68 AC |  if_e	wrlong	#8, fp
21790     08 4E 05 A1 |  if_e	add	fp, #8
21794     A7 FE 69 AC |  if_e	wrlong	#255, fp
21798     08 4E 85 A1 |  if_e	sub	fp, #8
2179c     A7 12 68 5C |  if_ne	wrlong	#9, fp
217a0     08 4E 05 51 |  if_ne	add	fp, #8
217a4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
217a8     08 4E 85 51 |  if_ne	sub	fp, #8
217ac                 | LR__2639
217ac     A7 12 02 F6 | 	mov	arg01, fp
217b0     98 C1 BE FD | 	call	#_push
217b4     A7 F0 03 F6 | 	mov	ptra, fp
217b8     B2 00 A0 FD | 	call	#popregs_
217bc                 | _do_mul_ret
217bc     2D 00 64 FD | 	ret
217c0                 | 
217c0                 | ' 
217c0                 | ' '--------------------------------- not equal (<>)
217c0                 | ' 
217c0                 | ' sub do_ne
217c0                 | _do_ne
217c0     05 4A 05 F6 | 	mov	COUNT_, #5
217c4     A8 00 A0 FD | 	call	#pushregs_
217c8     18 F0 07 F1 | 	add	ptra, #24
217cc     E4 C0 BE FD | 	call	#_pop
217d0     FD 26 02 F6 | 	mov	local01, result1
217d4     FE 28 02 F6 | 	mov	local02, result2
217d8     FF 2A 02 F6 | 	mov	local03, result3
217dc     0C 4E 05 F1 | 	add	fp, #12
217e0     A7 26 62 FC | 	wrlong	local01, fp
217e4     04 4E 05 F1 | 	add	fp, #4
217e8     A7 28 62 FC | 	wrlong	local02, fp
217ec     04 4E 05 F1 | 	add	fp, #4
217f0     A7 2A 62 FC | 	wrlong	local03, fp
217f4     14 4E 85 F1 | 	sub	fp, #20
217f8     B8 C0 BE FD | 	call	#_pop
217fc     FF 2A 02 F6 | 	mov	local03, result3
21800     A7 FA 61 FC | 	wrlong	result1, fp
21804     04 4E 05 F1 | 	add	fp, #4
21808     A7 FC 61 FC | 	wrlong	result2, fp
2180c     04 4E 05 F1 | 	add	fp, #4
21810     A7 2A 62 FC | 	wrlong	local03, fp
21814                 | ' 
21814                 | ' t2=pop()
21814                 | ' t1=pop()
21814                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
21814     08 4E 85 F1 | 	sub	fp, #8
21818     1F 2A 0E F2 | 	cmp	local03, #31 wz
2181c     14 4E 05 A1 |  if_e	add	fp, #20
21820     A7 2C 02 AB |  if_e	rdlong	local04, fp
21824     14 4E 85 A1 |  if_e	sub	fp, #20
21828     16 2B 02 A6 |  if_e	mov	local03, local04
2182c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21830     28 00 90 5D |  if_ne	jmp	#LR__2640
21834     00 26 06 F6 | 	mov	local01, #0
21838     A7 12 02 FB | 	rdlong	arg01, fp
2183c     0C 4E 05 F1 | 	add	fp, #12
21840     A7 14 02 FB | 	rdlong	arg02, fp
21844     0C 4E 85 F1 | 	sub	fp, #12
21848     D0 6B B0 FD | 	call	#__system___string_cmp
2184c     00 FA 0D F2 | 	cmp	result1, #0 wz
21850     00 26 26 56 |  if_ne	not	local01, #0
21854     A7 26 62 FC | 	wrlong	local01, fp
21858     20 04 90 FD | 	jmp	#LR__2653
2185c                 | LR__2640
2185c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
2185c     08 4E 05 F1 | 	add	fp, #8
21860     A7 26 02 FB | 	rdlong	local01, fp
21864     08 4E 85 F1 | 	sub	fp, #8
21868     1E 26 0E F2 | 	cmp	local01, #30 wz
2186c     14 4E 05 A1 |  if_e	add	fp, #20
21870     A7 2C 02 AB |  if_e	rdlong	local04, fp
21874     14 4E 85 A1 |  if_e	sub	fp, #20
21878     16 2B 02 A6 |  if_e	mov	local03, local04
2187c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21880     2C 00 90 5D |  if_ne	jmp	#LR__2641
21884     00 26 06 F6 | 	mov	local01, #0
21888     A7 12 02 FB | 	rdlong	arg01, fp
2188c     0C 4E 05 F1 | 	add	fp, #12
21890     A7 14 02 FB | 	rdlong	arg02, fp
21894     0C 4E 85 F1 | 	sub	fp, #12
21898     01 16 06 F6 | 	mov	arg03, #1
2189c     04 9E B0 FD | 	call	#__system___float_cmp
218a0     00 FA 0D F2 | 	cmp	result1, #0 wz
218a4     00 26 26 56 |  if_ne	not	local01, #0
218a8     A7 26 62 FC | 	wrlong	local01, fp
218ac     CC 03 90 FD | 	jmp	#LR__2653
218b0                 | LR__2641
218b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
218b0     08 4E 05 F1 | 	add	fp, #8
218b4     A7 26 02 FB | 	rdlong	local01, fp
218b8     08 4E 85 F1 | 	sub	fp, #8
218bc     1E 26 0E F2 | 	cmp	local01, #30 wz
218c0     14 4E 05 A1 |  if_e	add	fp, #20
218c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
218c8     14 4E 85 A1 |  if_e	sub	fp, #20
218cc     16 2B 02 A6 |  if_e	mov	local03, local04
218d0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
218d4     48 00 90 5D |  if_ne	jmp	#LR__2642
218d8     00 26 06 F6 | 	mov	local01, #0
218dc     A7 28 02 FB | 	rdlong	local02, fp
218e0     0C 4E 05 F1 | 	add	fp, #12
218e4     A7 12 02 FB | 	rdlong	arg01, fp
218e8     0C 4E 85 F1 | 	sub	fp, #12
218ec     09 13 52 F6 | 	abs	arg01, arg01 wc
218f0     1F 2E C6 C9 |  if_b	decod	local05, #31
218f4     00 2E 06 36 |  if_ae	mov	local05, #0
218f8     70 95 B0 FD | 	call	#__system___float_fromuns
218fc     17 FB 61 F5 | 	xor	result1, local05
21900     FD 14 02 F6 | 	mov	arg02, result1
21904     14 13 02 F6 | 	mov	arg01, local02
21908     01 16 06 F6 | 	mov	arg03, #1
2190c     94 9D B0 FD | 	call	#__system___float_cmp
21910     00 FA 0D F2 | 	cmp	result1, #0 wz
21914     00 26 26 56 |  if_ne	not	local01, #0
21918     A7 26 62 FC | 	wrlong	local01, fp
2191c     5C 03 90 FD | 	jmp	#LR__2653
21920                 | LR__2642
21920                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
21920     08 4E 05 F1 | 	add	fp, #8
21924     A7 26 02 FB | 	rdlong	local01, fp
21928     08 4E 85 F1 | 	sub	fp, #8
2192c     1E 26 0E F2 | 	cmp	local01, #30 wz
21930     14 4E 05 A1 |  if_e	add	fp, #20
21934     A7 2C 02 AB |  if_e	rdlong	local04, fp
21938     14 4E 85 A1 |  if_e	sub	fp, #20
2193c     16 2B 02 A6 |  if_e	mov	local03, local04
21940     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21944     38 00 90 5D |  if_ne	jmp	#LR__2643
21948     00 26 06 F6 | 	mov	local01, #0
2194c     A7 28 02 FB | 	rdlong	local02, fp
21950     0C 4E 05 F1 | 	add	fp, #12
21954     A7 12 02 FB | 	rdlong	arg01, fp
21958     0C 4E 85 F1 | 	sub	fp, #12
2195c     0C 95 B0 FD | 	call	#__system___float_fromuns
21960     FD 14 02 F6 | 	mov	arg02, result1
21964     14 13 02 F6 | 	mov	arg01, local02
21968     01 16 06 F6 | 	mov	arg03, #1
2196c     34 9D B0 FD | 	call	#__system___float_cmp
21970     00 FA 0D F2 | 	cmp	result1, #0 wz
21974     00 26 26 56 |  if_ne	not	local01, #0
21978     A7 26 62 FC | 	wrlong	local01, fp
2197c     FC 02 90 FD | 	jmp	#LR__2653
21980                 | LR__2643
21980                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
21980     08 4E 05 F1 | 	add	fp, #8
21984     A7 26 02 FB | 	rdlong	local01, fp
21988     08 4E 85 F1 | 	sub	fp, #8
2198c     1C 26 0E F2 | 	cmp	local01, #28 wz
21990     14 4E 05 A1 |  if_e	add	fp, #20
21994     A7 2C 02 AB |  if_e	rdlong	local04, fp
21998     14 4E 85 A1 |  if_e	sub	fp, #20
2199c     16 2B 02 A6 |  if_e	mov	local03, local04
219a0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
219a4     44 00 90 5D |  if_ne	jmp	#LR__2644
219a8     00 26 06 F6 | 	mov	local01, #0
219ac     A7 12 02 FB | 	rdlong	arg01, fp
219b0     09 13 52 F6 | 	abs	arg01, arg01 wc
219b4     1F 2E C6 C9 |  if_b	decod	local05, #31
219b8     00 2E 06 36 |  if_ae	mov	local05, #0
219bc     AC 94 B0 FD | 	call	#__system___float_fromuns
219c0     17 FB 61 F5 | 	xor	result1, local05
219c4     FD 12 02 F6 | 	mov	arg01, result1
219c8     0C 4E 05 F1 | 	add	fp, #12
219cc     A7 14 02 FB | 	rdlong	arg02, fp
219d0     0C 4E 85 F1 | 	sub	fp, #12
219d4     01 16 06 F6 | 	mov	arg03, #1
219d8     C8 9C B0 FD | 	call	#__system___float_cmp
219dc     00 FA 0D F2 | 	cmp	result1, #0 wz
219e0     00 26 26 56 |  if_ne	not	local01, #0
219e4     A7 26 62 FC | 	wrlong	local01, fp
219e8     90 02 90 FD | 	jmp	#LR__2653
219ec                 | LR__2644
219ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
219ec     08 4E 05 F1 | 	add	fp, #8
219f0     A7 26 02 FB | 	rdlong	local01, fp
219f4     08 4E 85 F1 | 	sub	fp, #8
219f8     1C 26 0E F2 | 	cmp	local01, #28 wz
219fc     14 4E 05 A1 |  if_e	add	fp, #20
21a00     A7 2C 02 AB |  if_e	rdlong	local04, fp
21a04     14 4E 85 A1 |  if_e	sub	fp, #20
21a08     16 2B 02 A6 |  if_e	mov	local03, local04
21a0c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21a10     24 00 90 5D |  if_ne	jmp	#LR__2645
21a14     00 26 06 F6 | 	mov	local01, #0
21a18     A7 28 02 FB | 	rdlong	local02, fp
21a1c     0C 4E 05 F1 | 	add	fp, #12
21a20     A7 2A 02 FB | 	rdlong	local03, fp
21a24     0C 4E 85 F1 | 	sub	fp, #12
21a28     15 29 0A F2 | 	cmp	local02, local03 wz
21a2c     01 26 66 56 |  if_ne	neg	local01, #1
21a30     A7 26 62 FC | 	wrlong	local01, fp
21a34     44 02 90 FD | 	jmp	#LR__2653
21a38                 | LR__2645
21a38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
21a38     08 4E 05 F1 | 	add	fp, #8
21a3c     A7 26 02 FB | 	rdlong	local01, fp
21a40     08 4E 85 F1 | 	sub	fp, #8
21a44     1C 26 0E F2 | 	cmp	local01, #28 wz
21a48     14 4E 05 A1 |  if_e	add	fp, #20
21a4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
21a50     14 4E 85 A1 |  if_e	sub	fp, #20
21a54     16 2B 02 A6 |  if_e	mov	local03, local04
21a58     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21a5c     24 00 90 5D |  if_ne	jmp	#LR__2646
21a60     00 26 06 F6 | 	mov	local01, #0
21a64     A7 28 02 FB | 	rdlong	local02, fp
21a68     0C 4E 05 F1 | 	add	fp, #12
21a6c     A7 2A 02 FB | 	rdlong	local03, fp
21a70     0C 4E 85 F1 | 	sub	fp, #12
21a74     15 29 0A F2 | 	cmp	local02, local03 wz
21a78     01 26 66 56 |  if_ne	neg	local01, #1
21a7c     A7 26 62 FC | 	wrlong	local01, fp
21a80     F8 01 90 FD | 	jmp	#LR__2653
21a84                 | LR__2646
21a84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
21a84     08 4E 05 F1 | 	add	fp, #8
21a88     A7 26 02 FB | 	rdlong	local01, fp
21a8c     08 4E 85 F1 | 	sub	fp, #8
21a90     1D 26 0E F2 | 	cmp	local01, #29 wz
21a94     14 4E 05 A1 |  if_e	add	fp, #20
21a98     A7 2C 02 AB |  if_e	rdlong	local04, fp
21a9c     14 4E 85 A1 |  if_e	sub	fp, #20
21aa0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21aa4     34 00 90 5D |  if_ne	jmp	#LR__2647
21aa8     00 26 06 F6 | 	mov	local01, #0
21aac     A7 12 02 FB | 	rdlong	arg01, fp
21ab0     B8 93 B0 FD | 	call	#__system___float_fromuns
21ab4     FD 12 02 F6 | 	mov	arg01, result1
21ab8     0C 4E 05 F1 | 	add	fp, #12
21abc     A7 14 02 FB | 	rdlong	arg02, fp
21ac0     0C 4E 85 F1 | 	sub	fp, #12
21ac4     01 16 06 F6 | 	mov	arg03, #1
21ac8     D8 9B B0 FD | 	call	#__system___float_cmp
21acc     00 FA 0D F2 | 	cmp	result1, #0 wz
21ad0     00 26 26 56 |  if_ne	not	local01, #0
21ad4     A7 26 62 FC | 	wrlong	local01, fp
21ad8     A0 01 90 FD | 	jmp	#LR__2653
21adc                 | LR__2647
21adc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
21adc     08 4E 05 F1 | 	add	fp, #8
21ae0     A7 26 02 FB | 	rdlong	local01, fp
21ae4     08 4E 85 F1 | 	sub	fp, #8
21ae8     1D 26 0E F2 | 	cmp	local01, #29 wz
21aec     14 4E 05 A1 |  if_e	add	fp, #20
21af0     A7 2A 02 AB |  if_e	rdlong	local03, fp
21af4     14 4E 85 A1 |  if_e	sub	fp, #20
21af8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21afc     24 00 90 5D |  if_ne	jmp	#LR__2648
21b00     00 26 06 F6 | 	mov	local01, #0
21b04     A7 28 02 FB | 	rdlong	local02, fp
21b08     0C 4E 05 F1 | 	add	fp, #12
21b0c     A7 2A 02 FB | 	rdlong	local03, fp
21b10     0C 4E 85 F1 | 	sub	fp, #12
21b14     15 29 0A F2 | 	cmp	local02, local03 wz
21b18     01 26 66 56 |  if_ne	neg	local01, #1
21b1c     A7 26 62 FC | 	wrlong	local01, fp
21b20     58 01 90 FD | 	jmp	#LR__2653
21b24                 | LR__2648
21b24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
21b24     08 4E 05 F1 | 	add	fp, #8
21b28     A7 26 02 FB | 	rdlong	local01, fp
21b2c     08 4E 85 F1 | 	sub	fp, #8
21b30     1D 26 0E F2 | 	cmp	local01, #29 wz
21b34     14 4E 05 A1 |  if_e	add	fp, #20
21b38     A7 2A 02 AB |  if_e	rdlong	local03, fp
21b3c     14 4E 85 A1 |  if_e	sub	fp, #20
21b40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21b44     24 00 90 5D |  if_ne	jmp	#LR__2649
21b48     00 26 06 F6 | 	mov	local01, #0
21b4c     A7 28 02 FB | 	rdlong	local02, fp
21b50     0C 4E 05 F1 | 	add	fp, #12
21b54     A7 2A 02 FB | 	rdlong	local03, fp
21b58     0C 4E 85 F1 | 	sub	fp, #12
21b5c     15 29 0A F2 | 	cmp	local02, local03 wz
21b60     01 26 66 56 |  if_ne	neg	local01, #1
21b64     A7 26 62 FC | 	wrlong	local01, fp
21b68     10 01 90 FD | 	jmp	#LR__2653
21b6c                 | LR__2649
21b6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
21b6c     08 4E 05 F1 | 	add	fp, #8
21b70     A7 26 02 FB | 	rdlong	local01, fp
21b74     08 4E 85 F1 | 	sub	fp, #8
21b78     2B 26 0E F2 | 	cmp	local01, #43 wz
21b7c     14 4E 05 A1 |  if_e	add	fp, #20
21b80     A7 2A 02 AB |  if_e	rdlong	local03, fp
21b84     14 4E 85 A1 |  if_e	sub	fp, #20
21b88     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21b8c     30 00 90 5D |  if_ne	jmp	#LR__2650
21b90     00 26 06 F6 | 	mov	local01, #0
21b94     A7 12 02 FB | 	rdlong	arg01, fp
21b98     90 BE BE FD | 	call	#_convertstring
21b9c     FD 12 02 F6 | 	mov	arg01, result1
21ba0     0C 4E 05 F1 | 	add	fp, #12
21ba4     A7 14 02 FB | 	rdlong	arg02, fp
21ba8     0C 4E 85 F1 | 	sub	fp, #12
21bac     6C 68 B0 FD | 	call	#__system___string_cmp
21bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
21bb4     00 26 26 56 |  if_ne	not	local01, #0
21bb8     A7 26 62 FC | 	wrlong	local01, fp
21bbc     BC 00 90 FD | 	jmp	#LR__2653
21bc0                 | LR__2650
21bc0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
21bc0     08 4E 05 F1 | 	add	fp, #8
21bc4     A7 26 02 FB | 	rdlong	local01, fp
21bc8     08 4E 85 F1 | 	sub	fp, #8
21bcc     1F 26 0E F2 | 	cmp	local01, #31 wz
21bd0     14 4E 05 A1 |  if_e	add	fp, #20
21bd4     A7 2A 02 AB |  if_e	rdlong	local03, fp
21bd8     14 4E 85 A1 |  if_e	sub	fp, #20
21bdc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21be0     34 00 90 5D |  if_ne	jmp	#LR__2651
21be4     00 26 06 F6 | 	mov	local01, #0
21be8     A7 28 02 FB | 	rdlong	local02, fp
21bec     0C 4E 05 F1 | 	add	fp, #12
21bf0     A7 12 02 FB | 	rdlong	arg01, fp
21bf4     0C 4E 85 F1 | 	sub	fp, #12
21bf8     30 BE BE FD | 	call	#_convertstring
21bfc     FD 14 02 F6 | 	mov	arg02, result1
21c00     14 13 02 F6 | 	mov	arg01, local02
21c04     14 68 B0 FD | 	call	#__system___string_cmp
21c08     00 FA 0D F2 | 	cmp	result1, #0 wz
21c0c     00 26 26 56 |  if_ne	not	local01, #0
21c10     A7 26 62 FC | 	wrlong	local01, fp
21c14     64 00 90 FD | 	jmp	#LR__2653
21c18                 | LR__2651
21c18                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
21c18     08 4E 05 F1 | 	add	fp, #8
21c1c     A7 26 02 FB | 	rdlong	local01, fp
21c20     08 4E 85 F1 | 	sub	fp, #8
21c24     2B 26 0E F2 | 	cmp	local01, #43 wz
21c28     14 4E 05 A1 |  if_e	add	fp, #20
21c2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
21c30     14 4E 85 A1 |  if_e	sub	fp, #20
21c34     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21c38     3C 00 90 5D |  if_ne	jmp	#LR__2652
21c3c     00 26 06 F6 | 	mov	local01, #0
21c40     A7 12 02 FB | 	rdlong	arg01, fp
21c44     E4 BD BE FD | 	call	#_convertstring
21c48     FD 28 02 F6 | 	mov	local02, result1
21c4c     0C 4E 05 F1 | 	add	fp, #12
21c50     A7 12 02 FB | 	rdlong	arg01, fp
21c54     0C 4E 85 F1 | 	sub	fp, #12
21c58     D0 BD BE FD | 	call	#_convertstring
21c5c     FD 14 02 F6 | 	mov	arg02, result1
21c60     14 13 02 F6 | 	mov	arg01, local02
21c64     B4 67 B0 FD | 	call	#__system___string_cmp
21c68     00 FA 0D F2 | 	cmp	result1, #0 wz
21c6c     00 26 26 56 |  if_ne	not	local01, #0
21c70     A7 26 62 FC | 	wrlong	local01, fp
21c74     04 00 90 FD | 	jmp	#LR__2653
21c78                 | LR__2652
21c78     A7 00 68 FC | 	wrlong	#0, fp
21c7c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
21c7c                 | LR__2653
21c7c     08 4E 05 F1 | 	add	fp, #8
21c80     A7 38 68 FC | 	wrlong	#28, fp
21c84     08 4E 85 F1 | 	sub	fp, #8
21c88     A7 12 02 F6 | 	mov	arg01, fp
21c8c     BC BC BE FD | 	call	#_push
21c90     A7 F0 03 F6 | 	mov	ptra, fp
21c94     B2 00 A0 FD | 	call	#popregs_
21c98                 | _do_ne_ret
21c98     2D 00 64 FD | 	ret
21c9c                 | 
21c9c                 | ' 
21c9c                 | ' '--------------------------------- OR
21c9c                 | ' 
21c9c                 | ' sub do_or 
21c9c                 | _do_or
21c9c     03 4A 05 F6 | 	mov	COUNT_, #3
21ca0     A8 00 A0 FD | 	call	#pushregs_
21ca4     18 F0 07 F1 | 	add	ptra, #24
21ca8     08 BC BE FD | 	call	#_pop
21cac     FD 12 02 F6 | 	mov	arg01, result1
21cb0     FE 26 02 F6 | 	mov	local01, result2
21cb4     FF 28 02 F6 | 	mov	local02, result3
21cb8     0C 4E 05 F1 | 	add	fp, #12
21cbc     A7 12 62 FC | 	wrlong	arg01, fp
21cc0     04 4E 05 F1 | 	add	fp, #4
21cc4     A7 26 62 FC | 	wrlong	local01, fp
21cc8     04 4E 05 F1 | 	add	fp, #4
21ccc     A7 28 62 FC | 	wrlong	local02, fp
21cd0     14 4E 85 F1 | 	sub	fp, #20
21cd4     DC BB BE FD | 	call	#_pop
21cd8     FF 2A 02 F6 | 	mov	local03, result3
21cdc     A7 FA 61 FC | 	wrlong	result1, fp
21ce0     04 4E 05 F1 | 	add	fp, #4
21ce4     A7 FC 61 FC | 	wrlong	result2, fp
21ce8     04 4E 05 F1 | 	add	fp, #4
21cec     A7 2A 62 FC | 	wrlong	local03, fp
21cf0                 | ' 
21cf0                 | ' t2=pop()
21cf0                 | ' t1=pop()
21cf0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21cf0     08 4E 85 F1 | 	sub	fp, #8
21cf4     1C 2A 0E F2 | 	cmp	local03, #28 wz
21cf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
21cfc     A7 2A 62 AC |  if_e	wrlong	local03, fp
21d00     08 4E 05 A1 |  if_e	add	fp, #8
21d04     A7 3A 68 AC |  if_e	wrlong	#29, fp
21d08     08 4E 85 A1 |  if_e	sub	fp, #8
21d0c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21d0c     14 4E 05 F1 | 	add	fp, #20
21d10     A7 2A 02 FB | 	rdlong	local03, fp
21d14     14 4E 85 F1 | 	sub	fp, #20
21d18     1C 2A 0E F2 | 	cmp	local03, #28 wz
21d1c     18 00 90 5D |  if_ne	jmp	#LR__2660
21d20     0C 4E 05 F1 | 	add	fp, #12
21d24     A7 2A 02 FB | 	rdlong	local03, fp
21d28     A7 2A 62 FC | 	wrlong	local03, fp
21d2c     08 4E 05 F1 | 	add	fp, #8
21d30     A7 3A 68 FC | 	wrlong	#29, fp
21d34     14 4E 85 F1 | 	sub	fp, #20
21d38                 | LR__2660
21d38                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
21d38     08 4E 05 F1 | 	add	fp, #8
21d3c     A7 2A 02 FB | 	rdlong	local03, fp
21d40     08 4E 85 F1 | 	sub	fp, #8
21d44     1F 2A 0E F2 | 	cmp	local03, #31 wz
21d48     14 4E 05 51 |  if_ne	add	fp, #20
21d4c     A7 28 02 5B |  if_ne	rdlong	local02, fp
21d50     14 4E 85 51 |  if_ne	sub	fp, #20
21d54     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21d58     08 4E 05 51 |  if_ne	add	fp, #8
21d5c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21d60     08 4E 85 51 |  if_ne	sub	fp, #8
21d64     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21d68     14 4E 05 51 |  if_ne	add	fp, #20
21d6c     14 4E 85 51 |  if_ne	sub	fp, #20
21d70     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21d74     A7 0C 68 AC |  if_e	wrlong	#6, fp
21d78     08 4E 05 A1 |  if_e	add	fp, #8
21d7c     A7 FE 69 AC |  if_e	wrlong	#255, fp
21d80     08 4E 85 A1 |  if_e	sub	fp, #8
21d84     18 00 90 AD |  if_e	jmp	#LR__2661
21d88     A7 2A 02 FB | 	rdlong	local03, fp
21d8c     0C 4E 05 F1 | 	add	fp, #12
21d90     A7 26 02 FB | 	rdlong	local01, fp
21d94     0C 4E 85 F1 | 	sub	fp, #12
21d98     13 2B 42 F5 | 	or	local03, local01
21d9c     A7 2A 62 FC | 	wrlong	local03, fp
21da0                 | LR__2661
21da0     A7 12 02 F6 | 	mov	arg01, fp
21da4     A4 BB BE FD | 	call	#_push
21da8     A7 F0 03 F6 | 	mov	ptra, fp
21dac     B2 00 A0 FD | 	call	#popregs_
21db0                 | _do_or_ret
21db0     2D 00 64 FD | 	ret
21db4                 | 
21db4                 | ' 
21db4                 | ' '--------------------------------- plus (+)
21db4                 | ' 
21db4                 | ' sub do_plus 
21db4                 | _do_plus
21db4     05 4A 05 F6 | 	mov	COUNT_, #5
21db8     A8 00 A0 FD | 	call	#pushregs_
21dbc     18 F0 07 F1 | 	add	ptra, #24
21dc0     F0 BA BE FD | 	call	#_pop
21dc4     FD 26 02 F6 | 	mov	local01, result1
21dc8     FE 28 02 F6 | 	mov	local02, result2
21dcc     FF 2A 02 F6 | 	mov	local03, result3
21dd0     0C 4E 05 F1 | 	add	fp, #12
21dd4     A7 26 62 FC | 	wrlong	local01, fp
21dd8     04 4E 05 F1 | 	add	fp, #4
21ddc     A7 28 62 FC | 	wrlong	local02, fp
21de0     04 4E 05 F1 | 	add	fp, #4
21de4     A7 2A 62 FC | 	wrlong	local03, fp
21de8     14 4E 85 F1 | 	sub	fp, #20
21dec     C4 BA BE FD | 	call	#_pop
21df0     FF 2A 02 F6 | 	mov	local03, result3
21df4     A7 FA 61 FC | 	wrlong	result1, fp
21df8     04 4E 05 F1 | 	add	fp, #4
21dfc     A7 FC 61 FC | 	wrlong	result2, fp
21e00     04 4E 05 F1 | 	add	fp, #4
21e04     A7 2A 62 FC | 	wrlong	local03, fp
21e08                 | ' 
21e08                 | ' t2=pop()
21e08                 | ' t1=pop()
21e08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
21e08     08 4E 85 F1 | 	sub	fp, #8
21e0c     1D 2A 0E F2 | 	cmp	local03, #29 wz
21e10     14 4E 05 A1 |  if_e	add	fp, #20
21e14     A7 2C 02 AB |  if_e	rdlong	local04, fp
21e18     14 4E 85 A1 |  if_e	sub	fp, #20
21e1c     16 2B 02 A6 |  if_e	mov	local03, local04
21e20     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21e24     1C 00 90 5D |  if_ne	jmp	#LR__2670
21e28     A7 26 02 FB | 	rdlong	local01, fp
21e2c     0C 4E 05 F1 | 	add	fp, #12
21e30     A7 28 02 FB | 	rdlong	local02, fp
21e34     0C 4E 85 F1 | 	sub	fp, #12
21e38     14 27 02 F1 | 	add	local01, local02
21e3c     A7 26 62 FC | 	wrlong	local01, fp
21e40     48 04 90 FD | 	jmp	#LR__2685
21e44                 | LR__2670
21e44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
21e44     08 4E 05 F1 | 	add	fp, #8
21e48     A7 26 02 FB | 	rdlong	local01, fp
21e4c     08 4E 85 F1 | 	sub	fp, #8
21e50     1D 26 0E F2 | 	cmp	local01, #29 wz
21e54     14 4E 05 A1 |  if_e	add	fp, #20
21e58     A7 2C 02 AB |  if_e	rdlong	local04, fp
21e5c     14 4E 85 A1 |  if_e	sub	fp, #20
21e60     16 2B 02 A6 |  if_e	mov	local03, local04
21e64     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21e68     28 00 90 5D |  if_ne	jmp	#LR__2671
21e6c     A7 26 02 FB | 	rdlong	local01, fp
21e70     0C 4E 05 F1 | 	add	fp, #12
21e74     A7 28 02 FB | 	rdlong	local02, fp
21e78     0C 4E 85 F1 | 	sub	fp, #12
21e7c     14 27 02 F1 | 	add	local01, local02
21e80     A7 26 62 FC | 	wrlong	local01, fp
21e84     08 4E 05 F1 | 	add	fp, #8
21e88     A7 38 68 FC | 	wrlong	#28, fp
21e8c     08 4E 85 F1 | 	sub	fp, #8
21e90     F8 03 90 FD | 	jmp	#LR__2685
21e94                 | LR__2671
21e94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21e94     08 4E 05 F1 | 	add	fp, #8
21e98     A7 26 02 FB | 	rdlong	local01, fp
21e9c     08 4E 85 F1 | 	sub	fp, #8
21ea0     1D 26 0E F2 | 	cmp	local01, #29 wz
21ea4     14 4E 05 A1 |  if_e	add	fp, #20
21ea8     A7 2C 02 AB |  if_e	rdlong	local04, fp
21eac     14 4E 85 A1 |  if_e	sub	fp, #20
21eb0     16 2B 02 A6 |  if_e	mov	local03, local04
21eb4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21eb8     30 00 90 5D |  if_ne	jmp	#LR__2672
21ebc     A7 12 02 FB | 	rdlong	arg01, fp
21ec0     A8 8F B0 FD | 	call	#__system___float_fromuns
21ec4     FD 12 02 F6 | 	mov	arg01, result1
21ec8     0C 4E 05 F1 | 	add	fp, #12
21ecc     A7 14 02 FB | 	rdlong	arg02, fp
21ed0     0C 4E 85 F1 | 	sub	fp, #12
21ed4     C8 8F B0 FD | 	call	#__system___float_add
21ed8     A7 FA 61 FC | 	wrlong	result1, fp
21edc     08 4E 05 F1 | 	add	fp, #8
21ee0     A7 3C 68 FC | 	wrlong	#30, fp
21ee4     08 4E 85 F1 | 	sub	fp, #8
21ee8     A0 03 90 FD | 	jmp	#LR__2685
21eec                 | LR__2672
21eec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
21eec     08 4E 05 F1 | 	add	fp, #8
21ef0     A7 26 02 FB | 	rdlong	local01, fp
21ef4     08 4E 85 F1 | 	sub	fp, #8
21ef8     1C 26 0E F2 | 	cmp	local01, #28 wz
21efc     14 4E 05 A1 |  if_e	add	fp, #20
21f00     A7 2C 02 AB |  if_e	rdlong	local04, fp
21f04     14 4E 85 A1 |  if_e	sub	fp, #20
21f08     16 2B 02 A6 |  if_e	mov	local03, local04
21f0c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21f10     1C 00 90 5D |  if_ne	jmp	#LR__2673
21f14     A7 26 02 FB | 	rdlong	local01, fp
21f18     0C 4E 05 F1 | 	add	fp, #12
21f1c     A7 28 02 FB | 	rdlong	local02, fp
21f20     0C 4E 85 F1 | 	sub	fp, #12
21f24     14 27 02 F1 | 	add	local01, local02
21f28     A7 26 62 FC | 	wrlong	local01, fp
21f2c     5C 03 90 FD | 	jmp	#LR__2685
21f30                 | LR__2673
21f30                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
21f30     08 4E 05 F1 | 	add	fp, #8
21f34     A7 26 02 FB | 	rdlong	local01, fp
21f38     08 4E 85 F1 | 	sub	fp, #8
21f3c     1C 26 0E F2 | 	cmp	local01, #28 wz
21f40     14 4E 05 A1 |  if_e	add	fp, #20
21f44     A7 2C 02 AB |  if_e	rdlong	local04, fp
21f48     14 4E 85 A1 |  if_e	sub	fp, #20
21f4c     16 2B 02 A6 |  if_e	mov	local03, local04
21f50     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21f54     1C 00 90 5D |  if_ne	jmp	#LR__2674
21f58     A7 26 02 FB | 	rdlong	local01, fp
21f5c     0C 4E 05 F1 | 	add	fp, #12
21f60     A7 28 02 FB | 	rdlong	local02, fp
21f64     0C 4E 85 F1 | 	sub	fp, #12
21f68     14 27 02 F1 | 	add	local01, local02
21f6c     A7 26 62 FC | 	wrlong	local01, fp
21f70     18 03 90 FD | 	jmp	#LR__2685
21f74                 | LR__2674
21f74                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21f74     08 4E 05 F1 | 	add	fp, #8
21f78     A7 26 02 FB | 	rdlong	local01, fp
21f7c     08 4E 85 F1 | 	sub	fp, #8
21f80     1C 26 0E F2 | 	cmp	local01, #28 wz
21f84     14 4E 05 A1 |  if_e	add	fp, #20
21f88     A7 2C 02 AB |  if_e	rdlong	local04, fp
21f8c     14 4E 85 A1 |  if_e	sub	fp, #20
21f90     16 2B 02 A6 |  if_e	mov	local03, local04
21f94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21f98     40 00 90 5D |  if_ne	jmp	#LR__2675
21f9c     A7 12 02 FB | 	rdlong	arg01, fp
21fa0     09 13 52 F6 | 	abs	arg01, arg01 wc
21fa4     1F 2E C6 C9 |  if_b	decod	local05, #31
21fa8     00 2E 06 36 |  if_ae	mov	local05, #0
21fac     BC 8E B0 FD | 	call	#__system___float_fromuns
21fb0     17 FB 61 F5 | 	xor	result1, local05
21fb4     FD 12 02 F6 | 	mov	arg01, result1
21fb8     0C 4E 05 F1 | 	add	fp, #12
21fbc     A7 14 02 FB | 	rdlong	arg02, fp
21fc0     0C 4E 85 F1 | 	sub	fp, #12
21fc4     D8 8E B0 FD | 	call	#__system___float_add
21fc8     A7 FA 61 FC | 	wrlong	result1, fp
21fcc     08 4E 05 F1 | 	add	fp, #8
21fd0     A7 3C 68 FC | 	wrlong	#30, fp
21fd4     08 4E 85 F1 | 	sub	fp, #8
21fd8     B0 02 90 FD | 	jmp	#LR__2685
21fdc                 | LR__2675
21fdc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
21fdc     08 4E 05 F1 | 	add	fp, #8
21fe0     A7 26 02 FB | 	rdlong	local01, fp
21fe4     08 4E 85 F1 | 	sub	fp, #8
21fe8     1E 26 0E F2 | 	cmp	local01, #30 wz
21fec     14 4E 05 A1 |  if_e	add	fp, #20
21ff0     A7 2C 02 AB |  if_e	rdlong	local04, fp
21ff4     14 4E 85 A1 |  if_e	sub	fp, #20
21ff8     16 2B 02 A6 |  if_e	mov	local03, local04
21ffc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
22000     28 00 90 5D |  if_ne	jmp	#LR__2676
22004     A7 26 02 FB | 	rdlong	local01, fp
22008     0C 4E 05 F1 | 	add	fp, #12
2200c     A7 12 02 FB | 	rdlong	arg01, fp
22010     0C 4E 85 F1 | 	sub	fp, #12
22014     54 8E B0 FD | 	call	#__system___float_fromuns
22018     FD 14 02 F6 | 	mov	arg02, result1
2201c     13 13 02 F6 | 	mov	arg01, local01
22020     7C 8E B0 FD | 	call	#__system___float_add
22024     A7 FA 61 FC | 	wrlong	result1, fp
22028     60 02 90 FD | 	jmp	#LR__2685
2202c                 | LR__2676
2202c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
2202c     08 4E 05 F1 | 	add	fp, #8
22030     A7 26 02 FB | 	rdlong	local01, fp
22034     08 4E 85 F1 | 	sub	fp, #8
22038     1E 26 0E F2 | 	cmp	local01, #30 wz
2203c     14 4E 05 A1 |  if_e	add	fp, #20
22040     A7 2C 02 AB |  if_e	rdlong	local04, fp
22044     14 4E 85 A1 |  if_e	sub	fp, #20
22048     16 2B 02 A6 |  if_e	mov	local03, local04
2204c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
22050     38 00 90 5D |  if_ne	jmp	#LR__2677
22054     A7 26 02 FB | 	rdlong	local01, fp
22058     0C 4E 05 F1 | 	add	fp, #12
2205c     A7 12 02 FB | 	rdlong	arg01, fp
22060     0C 4E 85 F1 | 	sub	fp, #12
22064     09 13 52 F6 | 	abs	arg01, arg01 wc
22068     1F 2E C6 C9 |  if_b	decod	local05, #31
2206c     00 2E 06 36 |  if_ae	mov	local05, #0
22070     F8 8D B0 FD | 	call	#__system___float_fromuns
22074     17 FB 61 F5 | 	xor	result1, local05
22078     FD 14 02 F6 | 	mov	arg02, result1
2207c     13 13 02 F6 | 	mov	arg01, local01
22080     1C 8E B0 FD | 	call	#__system___float_add
22084     A7 FA 61 FC | 	wrlong	result1, fp
22088     00 02 90 FD | 	jmp	#LR__2685
2208c                 | LR__2677
2208c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
2208c     08 4E 05 F1 | 	add	fp, #8
22090     A7 26 02 FB | 	rdlong	local01, fp
22094     08 4E 85 F1 | 	sub	fp, #8
22098     1E 26 0E F2 | 	cmp	local01, #30 wz
2209c     14 4E 05 A1 |  if_e	add	fp, #20
220a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
220a4     14 4E 85 A1 |  if_e	sub	fp, #20
220a8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
220ac     1C 00 90 5D |  if_ne	jmp	#LR__2678
220b0     A7 12 02 FB | 	rdlong	arg01, fp
220b4     0C 4E 05 F1 | 	add	fp, #12
220b8     A7 14 02 FB | 	rdlong	arg02, fp
220bc     0C 4E 85 F1 | 	sub	fp, #12
220c0     DC 8D B0 FD | 	call	#__system___float_add
220c4     A7 FA 61 FC | 	wrlong	result1, fp
220c8     C0 01 90 FD | 	jmp	#LR__2685
220cc                 | LR__2678
220cc                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
220cc     08 4E 05 F1 | 	add	fp, #8
220d0     A7 26 02 FB | 	rdlong	local01, fp
220d4     08 4E 85 F1 | 	sub	fp, #8
220d8     1F 26 0E F2 | 	cmp	local01, #31 wz
220dc     24 00 90 5D |  if_ne	jmp	#LR__2679
220e0     14 4E 05 F1 | 	add	fp, #20
220e4     A7 2A 02 FB | 	rdlong	local03, fp
220e8     14 4E 85 F1 | 	sub	fp, #20
220ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
220f0     A7 04 68 5C |  if_ne	wrlong	#2, fp
220f4     08 4E 05 51 |  if_ne	add	fp, #8
220f8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
220fc     08 4E 85 51 |  if_ne	sub	fp, #8
22100     88 01 90 5D |  if_ne	jmp	#LR__2685
22104                 | LR__2679
22104                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
22104     14 4E 05 F1 | 	add	fp, #20
22108     A7 26 02 FB | 	rdlong	local01, fp
2210c     14 4E 85 F1 | 	sub	fp, #20
22110     1F 26 0E F2 | 	cmp	local01, #31 wz
22114     24 00 90 5D |  if_ne	jmp	#LR__2680
22118     08 4E 05 F1 | 	add	fp, #8
2211c     A7 2A 02 FB | 	rdlong	local03, fp
22120     08 4E 85 F1 | 	sub	fp, #8
22124     1F 2A 0E F2 | 	cmp	local03, #31 wz
22128     A7 04 68 5C |  if_ne	wrlong	#2, fp
2212c     08 4E 05 51 |  if_ne	add	fp, #8
22130     A7 FE 69 5C |  if_ne	wrlong	#255, fp
22134     08 4E 85 51 |  if_ne	sub	fp, #8
22138     50 01 90 5D |  if_ne	jmp	#LR__2685
2213c                 | LR__2680
2213c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
2213c     08 4E 05 F1 | 	add	fp, #8
22140     A7 26 02 FB | 	rdlong	local01, fp
22144     08 4E 85 F1 | 	sub	fp, #8
22148     1F 26 0E F2 | 	cmp	local01, #31 wz
2214c     14 4E 05 A1 |  if_e	add	fp, #20
22150     A7 2A 02 AB |  if_e	rdlong	local03, fp
22154     14 4E 85 A1 |  if_e	sub	fp, #20
22158     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2215c     1C 00 90 5D |  if_ne	jmp	#LR__2681
22160     A7 12 02 FB | 	rdlong	arg01, fp
22164     0C 4E 05 F1 | 	add	fp, #12
22168     A7 14 02 FB | 	rdlong	arg02, fp
2216c     0C 4E 85 F1 | 	sub	fp, #12
22170     DC 62 B0 FD | 	call	#__system___string_concat
22174     A7 FA 61 FC | 	wrlong	result1, fp
22178     10 01 90 FD | 	jmp	#LR__2685
2217c                 | LR__2681
2217c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
2217c     08 4E 05 F1 | 	add	fp, #8
22180     A7 26 02 FB | 	rdlong	local01, fp
22184     08 4E 85 F1 | 	sub	fp, #8
22188     2B 26 0E F2 | 	cmp	local01, #43 wz
2218c     14 4E 05 A1 |  if_e	add	fp, #20
22190     A7 2A 02 AB |  if_e	rdlong	local03, fp
22194     14 4E 85 A1 |  if_e	sub	fp, #20
22198     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2219c     30 00 90 5D |  if_ne	jmp	#LR__2682
221a0     A7 12 02 FB | 	rdlong	arg01, fp
221a4     84 B8 BE FD | 	call	#_convertstring
221a8     FD 12 02 F6 | 	mov	arg01, result1
221ac     0C 4E 05 F1 | 	add	fp, #12
221b0     A7 14 02 FB | 	rdlong	arg02, fp
221b4     0C 4E 85 F1 | 	sub	fp, #12
221b8     94 62 B0 FD | 	call	#__system___string_concat
221bc     A7 FA 61 FC | 	wrlong	result1, fp
221c0     08 4E 05 F1 | 	add	fp, #8
221c4     A7 3E 68 FC | 	wrlong	#31, fp
221c8     08 4E 85 F1 | 	sub	fp, #8
221cc     BC 00 90 FD | 	jmp	#LR__2685
221d0                 | LR__2682
221d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
221d0     08 4E 05 F1 | 	add	fp, #8
221d4     A7 26 02 FB | 	rdlong	local01, fp
221d8     08 4E 85 F1 | 	sub	fp, #8
221dc     1F 26 0E F2 | 	cmp	local01, #31 wz
221e0     14 4E 05 A1 |  if_e	add	fp, #20
221e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
221e8     14 4E 85 A1 |  if_e	sub	fp, #20
221ec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
221f0     28 00 90 5D |  if_ne	jmp	#LR__2683
221f4     A7 26 02 FB | 	rdlong	local01, fp
221f8     0C 4E 05 F1 | 	add	fp, #12
221fc     A7 12 02 FB | 	rdlong	arg01, fp
22200     0C 4E 85 F1 | 	sub	fp, #12
22204     24 B8 BE FD | 	call	#_convertstring
22208     FD 14 02 F6 | 	mov	arg02, result1
2220c     13 13 02 F6 | 	mov	arg01, local01
22210     3C 62 B0 FD | 	call	#__system___string_concat
22214     A7 FA 61 FC | 	wrlong	result1, fp
22218     70 00 90 FD | 	jmp	#LR__2685
2221c                 | LR__2683
2221c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
2221c     08 4E 05 F1 | 	add	fp, #8
22220     A7 26 02 FB | 	rdlong	local01, fp
22224     08 4E 85 F1 | 	sub	fp, #8
22228     2B 26 0E F2 | 	cmp	local01, #43 wz
2222c     14 4E 05 A1 |  if_e	add	fp, #20
22230     A7 2A 02 AB |  if_e	rdlong	local03, fp
22234     14 4E 85 A1 |  if_e	sub	fp, #20
22238     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2223c     3C 00 90 5D |  if_ne	jmp	#LR__2684
22240     A7 12 02 FB | 	rdlong	arg01, fp
22244     E4 B7 BE FD | 	call	#_convertstring
22248     FD 26 02 F6 | 	mov	local01, result1
2224c     0C 4E 05 F1 | 	add	fp, #12
22250     A7 12 02 FB | 	rdlong	arg01, fp
22254     0C 4E 85 F1 | 	sub	fp, #12
22258     D0 B7 BE FD | 	call	#_convertstring
2225c     FD 14 02 F6 | 	mov	arg02, result1
22260     13 13 02 F6 | 	mov	arg01, local01
22264     E8 61 B0 FD | 	call	#__system___string_concat
22268     A7 FA 61 FC | 	wrlong	result1, fp
2226c     08 4E 05 F1 | 	add	fp, #8
22270     A7 3E 68 FC | 	wrlong	#31, fp
22274     08 4E 85 F1 | 	sub	fp, #8
22278     10 00 90 FD | 	jmp	#LR__2685
2227c                 | LR__2684
2227c     A7 08 68 FC | 	wrlong	#4, fp
22280     08 4E 05 F1 | 	add	fp, #8
22284     A7 FE 69 FC | 	wrlong	#255, fp
22288     08 4E 85 F1 | 	sub	fp, #8
2228c                 | LR__2685
2228c     A7 12 02 F6 | 	mov	arg01, fp
22290     B8 B6 BE FD | 	call	#_push
22294     A7 F0 03 F6 | 	mov	ptra, fp
22298     B2 00 A0 FD | 	call	#popregs_
2229c                 | _do_plus_ret
2229c     2D 00 64 FD | 	ret
222a0                 | 
222a0                 | ' 
222a0                 | ' '--------------------------------- power (^)
222a0                 | ' 
222a0                 | ' sub do_power 
222a0                 | _do_power
222a0     02 4A 05 F6 | 	mov	COUNT_, #2
222a4     A8 00 A0 FD | 	call	#pushregs_
222a8     18 F0 07 F1 | 	add	ptra, #24
222ac     04 B6 BE FD | 	call	#_pop
222b0     FD 14 02 F6 | 	mov	arg02, result1
222b4     FE 12 02 F6 | 	mov	arg01, result2
222b8     FF 26 02 F6 | 	mov	local01, result3
222bc     0C 4E 05 F1 | 	add	fp, #12
222c0     A7 14 62 FC | 	wrlong	arg02, fp
222c4     04 4E 05 F1 | 	add	fp, #4
222c8     A7 12 62 FC | 	wrlong	arg01, fp
222cc     04 4E 05 F1 | 	add	fp, #4
222d0     A7 26 62 FC | 	wrlong	local01, fp
222d4     14 4E 85 F1 | 	sub	fp, #20
222d8     D8 B5 BE FD | 	call	#_pop
222dc     A7 FA 61 FC | 	wrlong	result1, fp
222e0     04 4E 05 F1 | 	add	fp, #4
222e4     A7 FC 61 FC | 	wrlong	result2, fp
222e8     04 4E 05 F1 | 	add	fp, #4
222ec     A7 FE 61 FC | 	wrlong	result3, fp
222f0                 | ' 
222f0                 | ' t2=pop()
222f0                 | ' t1=pop()
222f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
222f0     08 4E 85 F1 | 	sub	fp, #8
222f4     1F FE 0D F2 | 	cmp	result3, #31 wz
222f8     14 4E 05 51 |  if_ne	add	fp, #20
222fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
22300     14 4E 85 51 |  if_ne	sub	fp, #20
22304     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
22308     A7 18 68 AC |  if_e	wrlong	#12, fp
2230c     08 4E 05 A1 |  if_e	add	fp, #8
22310     A7 FE 69 AC |  if_e	wrlong	#255, fp
22314     08 4E 85 A1 |  if_e	sub	fp, #8
22318     38 01 90 AD |  if_e	jmp	#LR__2695
2231c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
2231c     08 4E 05 F1 | 	add	fp, #8
22320     A7 14 02 FB | 	rdlong	arg02, fp
22324     08 4E 85 F1 | 	sub	fp, #8
22328     1C 14 0E F2 | 	cmp	arg02, #28 wz
2232c     28 00 90 5D |  if_ne	jmp	#LR__2690
22330     08 4E 05 F1 | 	add	fp, #8
22334     A7 3C 68 FC | 	wrlong	#30, fp
22338     08 4E 85 F1 | 	sub	fp, #8
2233c     A7 12 02 FB | 	rdlong	arg01, fp
22340     09 13 52 F6 | 	abs	arg01, arg01 wc
22344     1F 28 C6 C9 |  if_b	decod	local02, #31
22348     00 28 06 36 |  if_ae	mov	local02, #0
2234c     1C 8B B0 FD | 	call	#__system___float_fromuns
22350     14 FB 61 F5 | 	xor	result1, local02
22354     A7 FA 61 FC | 	wrlong	result1, fp
22358                 | LR__2690
22358                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
22358     08 4E 05 F1 | 	add	fp, #8
2235c     A7 14 02 FB | 	rdlong	arg02, fp
22360     08 4E 85 F1 | 	sub	fp, #8
22364     1D 14 0E F2 | 	cmp	arg02, #29 wz
22368     18 00 90 5D |  if_ne	jmp	#LR__2691
2236c     08 4E 05 F1 | 	add	fp, #8
22370     A7 3C 68 FC | 	wrlong	#30, fp
22374     08 4E 85 F1 | 	sub	fp, #8
22378     A7 12 02 FB | 	rdlong	arg01, fp
2237c     EC 8A B0 FD | 	call	#__system___float_fromuns
22380     A7 FA 61 FC | 	wrlong	result1, fp
22384                 | LR__2691
22384                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
22384     14 4E 05 F1 | 	add	fp, #20
22388     A7 14 02 FB | 	rdlong	arg02, fp
2238c     14 4E 85 F1 | 	sub	fp, #20
22390     1C 14 0E F2 | 	cmp	arg02, #28 wz
22394     34 00 90 5D |  if_ne	jmp	#LR__2692
22398     14 4E 05 F1 | 	add	fp, #20
2239c     A7 3C 68 FC | 	wrlong	#30, fp
223a0     08 4E 85 F1 | 	sub	fp, #8
223a4     A7 12 02 FB | 	rdlong	arg01, fp
223a8     0C 4E 85 F1 | 	sub	fp, #12
223ac     09 13 52 F6 | 	abs	arg01, arg01 wc
223b0     1F 28 C6 C9 |  if_b	decod	local02, #31
223b4     00 28 06 36 |  if_ae	mov	local02, #0
223b8     B0 8A B0 FD | 	call	#__system___float_fromuns
223bc     14 FB 61 F5 | 	xor	result1, local02
223c0     0C 4E 05 F1 | 	add	fp, #12
223c4     A7 FA 61 FC | 	wrlong	result1, fp
223c8     0C 4E 85 F1 | 	sub	fp, #12
223cc                 | LR__2692
223cc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
223cc     14 4E 05 F1 | 	add	fp, #20
223d0     A7 14 02 FB | 	rdlong	arg02, fp
223d4     14 4E 85 F1 | 	sub	fp, #20
223d8     1D 14 0E F2 | 	cmp	arg02, #29 wz
223dc     24 00 90 5D |  if_ne	jmp	#LR__2693
223e0     14 4E 05 F1 | 	add	fp, #20
223e4     A7 3C 68 FC | 	wrlong	#30, fp
223e8     08 4E 85 F1 | 	sub	fp, #8
223ec     A7 12 02 FB | 	rdlong	arg01, fp
223f0     0C 4E 85 F1 | 	sub	fp, #12
223f4     74 8A B0 FD | 	call	#__system___float_fromuns
223f8     0C 4E 05 F1 | 	add	fp, #12
223fc     A7 FA 61 FC | 	wrlong	result1, fp
22400     0C 4E 85 F1 | 	sub	fp, #12
22404                 | LR__2693
22404                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
22404     08 4E 05 F1 | 	add	fp, #8
22408     A7 14 02 FB | 	rdlong	arg02, fp
2240c     08 4E 85 F1 | 	sub	fp, #8
22410     1E 14 0E F2 | 	cmp	arg02, #30 wz
22414     14 4E 05 A1 |  if_e	add	fp, #20
22418     A7 26 02 AB |  if_e	rdlong	local01, fp
2241c     14 4E 85 A1 |  if_e	sub	fp, #20
22420     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
22424     1C 00 90 5D |  if_ne	jmp	#LR__2694
22428     A7 12 02 FB | 	rdlong	arg01, fp
2242c     0C 4E 05 F1 | 	add	fp, #12
22430     A7 14 02 FB | 	rdlong	arg02, fp
22434     0C 4E 85 F1 | 	sub	fp, #12
22438     40 9D B0 FD | 	call	#__system____builtin_powf
2243c     A7 FA 61 FC | 	wrlong	result1, fp
22440     10 00 90 FD | 	jmp	#LR__2695
22444                 | LR__2694
22444     A7 1A 68 FC | 	wrlong	#13, fp
22448     08 4E 05 F1 | 	add	fp, #8
2244c     A7 FE 69 FC | 	wrlong	#255, fp
22450     08 4E 85 F1 | 	sub	fp, #8
22454                 | LR__2695
22454     A7 12 02 F6 | 	mov	arg01, fp
22458     F0 B4 BE FD | 	call	#_push
2245c     A7 F0 03 F6 | 	mov	ptra, fp
22460     B2 00 A0 FD | 	call	#popregs_
22464                 | _do_power_ret
22464     2D 00 64 FD | 	ret
22468                 | 
22468                 | ' 
22468                 | ' '--------------------------------- SHL
22468                 | ' 
22468                 | ' sub do_shl 
22468                 | _do_shl
22468     03 4A 05 F6 | 	mov	COUNT_, #3
2246c     A8 00 A0 FD | 	call	#pushregs_
22470     18 F0 07 F1 | 	add	ptra, #24
22474     3C B4 BE FD | 	call	#_pop
22478     FD 12 02 F6 | 	mov	arg01, result1
2247c     FE 26 02 F6 | 	mov	local01, result2
22480     FF 28 02 F6 | 	mov	local02, result3
22484     0C 4E 05 F1 | 	add	fp, #12
22488     A7 12 62 FC | 	wrlong	arg01, fp
2248c     04 4E 05 F1 | 	add	fp, #4
22490     A7 26 62 FC | 	wrlong	local01, fp
22494     04 4E 05 F1 | 	add	fp, #4
22498     A7 28 62 FC | 	wrlong	local02, fp
2249c     14 4E 85 F1 | 	sub	fp, #20
224a0     10 B4 BE FD | 	call	#_pop
224a4     FF 2A 02 F6 | 	mov	local03, result3
224a8     A7 FA 61 FC | 	wrlong	result1, fp
224ac     04 4E 05 F1 | 	add	fp, #4
224b0     A7 FC 61 FC | 	wrlong	result2, fp
224b4     04 4E 05 F1 | 	add	fp, #4
224b8     A7 2A 62 FC | 	wrlong	local03, fp
224bc                 | ' 
224bc                 | ' t2=pop()
224bc                 | ' t1=pop()
224bc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
224bc     08 4E 85 F1 | 	sub	fp, #8
224c0     1C 2A 0E F2 | 	cmp	local03, #28 wz
224c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
224c8     A7 2A 62 AC |  if_e	wrlong	local03, fp
224cc     08 4E 05 A1 |  if_e	add	fp, #8
224d0     A7 3A 68 AC |  if_e	wrlong	#29, fp
224d4     08 4E 85 A1 |  if_e	sub	fp, #8
224d8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
224d8     14 4E 05 F1 | 	add	fp, #20
224dc     A7 2A 02 FB | 	rdlong	local03, fp
224e0     14 4E 85 F1 | 	sub	fp, #20
224e4     1C 2A 0E F2 | 	cmp	local03, #28 wz
224e8     18 00 90 5D |  if_ne	jmp	#LR__2700
224ec     0C 4E 05 F1 | 	add	fp, #12
224f0     A7 2A 02 FB | 	rdlong	local03, fp
224f4     A7 2A 62 FC | 	wrlong	local03, fp
224f8     08 4E 05 F1 | 	add	fp, #8
224fc     A7 3A 68 FC | 	wrlong	#29, fp
22500     14 4E 85 F1 | 	sub	fp, #20
22504                 | LR__2700
22504                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
22504     08 4E 05 F1 | 	add	fp, #8
22508     A7 2A 02 FB | 	rdlong	local03, fp
2250c     08 4E 85 F1 | 	sub	fp, #8
22510     1F 2A 0E F2 | 	cmp	local03, #31 wz
22514     14 4E 05 51 |  if_ne	add	fp, #20
22518     A7 28 02 5B |  if_ne	rdlong	local02, fp
2251c     14 4E 85 51 |  if_ne	sub	fp, #20
22520     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
22524     08 4E 05 51 |  if_ne	add	fp, #8
22528     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2252c     08 4E 85 51 |  if_ne	sub	fp, #8
22530     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
22534     14 4E 05 51 |  if_ne	add	fp, #20
22538     14 4E 85 51 |  if_ne	sub	fp, #20
2253c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
22540     A7 0C 68 AC |  if_e	wrlong	#6, fp
22544     08 4E 05 A1 |  if_e	add	fp, #8
22548     A7 FE 69 AC |  if_e	wrlong	#255, fp
2254c     08 4E 85 A1 |  if_e	sub	fp, #8
22550     18 00 90 AD |  if_e	jmp	#LR__2701
22554     A7 2A 02 FB | 	rdlong	local03, fp
22558     0C 4E 05 F1 | 	add	fp, #12
2255c     A7 26 02 FB | 	rdlong	local01, fp
22560     0C 4E 85 F1 | 	sub	fp, #12
22564     13 2B 62 F0 | 	shl	local03, local01
22568     A7 2A 62 FC | 	wrlong	local03, fp
2256c                 | LR__2701
2256c     A7 12 02 F6 | 	mov	arg01, fp
22570     D8 B3 BE FD | 	call	#_push
22574     A7 F0 03 F6 | 	mov	ptra, fp
22578     B2 00 A0 FD | 	call	#popregs_
2257c                 | _do_shl_ret
2257c     2D 00 64 FD | 	ret
22580                 | 
22580                 | ' 
22580                 | ' '--------------------------------- SHR
22580                 | ' 
22580                 | ' sub do_shr 
22580                 | _do_shr
22580     03 4A 05 F6 | 	mov	COUNT_, #3
22584     A8 00 A0 FD | 	call	#pushregs_
22588     18 F0 07 F1 | 	add	ptra, #24
2258c     24 B3 BE FD | 	call	#_pop
22590     FD 12 02 F6 | 	mov	arg01, result1
22594     FE 26 02 F6 | 	mov	local01, result2
22598     FF 28 02 F6 | 	mov	local02, result3
2259c     0C 4E 05 F1 | 	add	fp, #12
225a0     A7 12 62 FC | 	wrlong	arg01, fp
225a4     04 4E 05 F1 | 	add	fp, #4
225a8     A7 26 62 FC | 	wrlong	local01, fp
225ac     04 4E 05 F1 | 	add	fp, #4
225b0     A7 28 62 FC | 	wrlong	local02, fp
225b4     14 4E 85 F1 | 	sub	fp, #20
225b8     F8 B2 BE FD | 	call	#_pop
225bc     FF 2A 02 F6 | 	mov	local03, result3
225c0     A7 FA 61 FC | 	wrlong	result1, fp
225c4     04 4E 05 F1 | 	add	fp, #4
225c8     A7 FC 61 FC | 	wrlong	result2, fp
225cc     04 4E 05 F1 | 	add	fp, #4
225d0     A7 2A 62 FC | 	wrlong	local03, fp
225d4                 | ' 
225d4                 | ' t2=pop()
225d4                 | ' t1=pop()
225d4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
225d4     08 4E 85 F1 | 	sub	fp, #8
225d8     1C 2A 0E F2 | 	cmp	local03, #28 wz
225dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
225e0     A7 2A 62 AC |  if_e	wrlong	local03, fp
225e4     08 4E 05 A1 |  if_e	add	fp, #8
225e8     A7 3A 68 AC |  if_e	wrlong	#29, fp
225ec     08 4E 85 A1 |  if_e	sub	fp, #8
225f0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
225f0     14 4E 05 F1 | 	add	fp, #20
225f4     A7 2A 02 FB | 	rdlong	local03, fp
225f8     14 4E 85 F1 | 	sub	fp, #20
225fc     1C 2A 0E F2 | 	cmp	local03, #28 wz
22600     18 00 90 5D |  if_ne	jmp	#LR__2710
22604     0C 4E 05 F1 | 	add	fp, #12
22608     A7 2A 02 FB | 	rdlong	local03, fp
2260c     A7 2A 62 FC | 	wrlong	local03, fp
22610     08 4E 05 F1 | 	add	fp, #8
22614     A7 3A 68 FC | 	wrlong	#29, fp
22618     14 4E 85 F1 | 	sub	fp, #20
2261c                 | LR__2710
2261c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
2261c     08 4E 05 F1 | 	add	fp, #8
22620     A7 2A 02 FB | 	rdlong	local03, fp
22624     08 4E 85 F1 | 	sub	fp, #8
22628     1F 2A 0E F2 | 	cmp	local03, #31 wz
2262c     14 4E 05 51 |  if_ne	add	fp, #20
22630     A7 28 02 5B |  if_ne	rdlong	local02, fp
22634     14 4E 85 51 |  if_ne	sub	fp, #20
22638     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
2263c     08 4E 05 51 |  if_ne	add	fp, #8
22640     A7 2A 02 5B |  if_ne	rdlong	local03, fp
22644     08 4E 85 51 |  if_ne	sub	fp, #8
22648     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
2264c     14 4E 05 51 |  if_ne	add	fp, #20
22650     14 4E 85 51 |  if_ne	sub	fp, #20
22654     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
22658     A7 0C 68 AC |  if_e	wrlong	#6, fp
2265c     08 4E 05 A1 |  if_e	add	fp, #8
22660     A7 FE 69 AC |  if_e	wrlong	#255, fp
22664     08 4E 85 A1 |  if_e	sub	fp, #8
22668     18 00 90 AD |  if_e	jmp	#LR__2711
2266c     A7 2A 02 FB | 	rdlong	local03, fp
22670     0C 4E 05 F1 | 	add	fp, #12
22674     A7 26 02 FB | 	rdlong	local01, fp
22678     0C 4E 85 F1 | 	sub	fp, #12
2267c     13 2B 42 F0 | 	shr	local03, local01
22680     A7 2A 62 FC | 	wrlong	local03, fp
22684                 | LR__2711
22684     A7 12 02 F6 | 	mov	arg01, fp
22688     C0 B2 BE FD | 	call	#_push
2268c     A7 F0 03 F6 | 	mov	ptra, fp
22690     B2 00 A0 FD | 	call	#popregs_
22694                 | _do_shr_ret
22694     2D 00 64 FD | 	ret
22698                 | 
22698                 | ' 
22698                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
22698                 | ' 
22698                 | ' ''----------------------------------------------------------------------------------------------------
22698                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
22698                 | ' ''----------------------------------------------------------------------------------------------------
22698                 | ' 
22698                 | ' ''--------------------------- Command function pointers
22698                 | ' 
22698                 | ' sub init_commands
22698                 | _init_commands
22698                 | ' 
22698                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
22698     00 00 06 F6 | 	mov	_var01, #0
2269c     97 16 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
226a0                 | LR__2720
226a0     00 FB 01 F6 | 	mov	result1, _var01
226a4     02 FA 65 F0 | 	shl	result1, #2
226a8     43 00 00 FF 
226ac     80 E4 05 F1 | 	add	objptr, ##34432
226b0     F2 FA 01 F1 | 	add	result1, objptr
226b4     43 00 00 FF 
226b8     80 E4 85 F1 | 	sub	objptr, ##34432
226bc     FD E4 61 FC | 	wrlong	objptr, result1
226c0     01 00 06 F1 | 	add	_var01, #1
226c4     00 01 56 F2 | 	cmps	_var01, #256 wc
226c8     D4 FF 9F CD |  if_b	jmp	#LR__2720
226cc                 | LR__2721
226cc     F2 FA 01 F6 | 	mov	result1, objptr
226d0     14 FA 25 F4 | 	bith	result1, #20
226d4     43 00 00 FF 
226d8     84 E4 05 F1 | 	add	objptr, ##34436
226dc     F2 FA 61 FC | 	wrlong	result1, objptr
226e0     43 00 00 FF 
226e4     84 E4 85 F1 | 	sub	objptr, ##34436
226e8     F2 FA 01 F6 | 	mov	result1, objptr
226ec     15 FA 25 F4 | 	bith	result1, #21
226f0     43 00 00 FF 
226f4     88 E4 05 F1 | 	add	objptr, ##34440
226f8     F2 FA 61 FC | 	wrlong	result1, objptr
226fc     43 00 00 FF 
22700     88 E4 85 F1 | 	sub	objptr, ##34440
22704     F2 FA 01 F6 | 	mov	result1, objptr
22708     34 FA 25 F4 | 	bith	result1, #52
2270c     43 00 00 FF 
22710     8C E4 05 F1 | 	add	objptr, ##34444
22714     F2 FA 61 FC | 	wrlong	result1, objptr
22718     43 00 00 FF 
2271c     8C E4 85 F1 | 	sub	objptr, ##34444
22720     F2 FA 01 F6 | 	mov	result1, objptr
22724     16 FA 25 F4 | 	bith	result1, #22
22728     43 00 00 FF 
2272c     94 E4 05 F1 | 	add	objptr, ##34452
22730     F2 FA 61 FC | 	wrlong	result1, objptr
22734     43 00 00 FF 
22738     94 E4 85 F1 | 	sub	objptr, ##34452
2273c     F2 FA 01 F6 | 	mov	result1, objptr
22740     00 28 00 FF 
22744     00 FA 45 F5 | 	or	result1, ##5242880
22748     43 00 00 FF 
2274c     98 E4 05 F1 | 	add	objptr, ##34456
22750     F2 FA 61 FC | 	wrlong	result1, objptr
22754     43 00 00 FF 
22758     98 E4 85 F1 | 	sub	objptr, ##34456
2275c     F2 FA 01 F6 | 	mov	result1, objptr
22760     35 FA 25 F4 | 	bith	result1, #53
22764     43 00 00 FF 
22768     9C E4 05 F1 | 	add	objptr, ##34460
2276c     F2 FA 61 FC | 	wrlong	result1, objptr
22770     43 00 00 FF 
22774     9C E4 85 F1 | 	sub	objptr, ##34460
22778     F2 FA 01 F6 | 	mov	result1, objptr
2277c     54 FA 25 F4 | 	bith	result1, #84
22780     43 00 00 FF 
22784     A0 E4 05 F1 | 	add	objptr, ##34464
22788     F2 FA 61 FC | 	wrlong	result1, objptr
2278c     43 00 00 FF 
22790     A0 E4 85 F1 | 	sub	objptr, ##34464
22794     F2 FA 01 F6 | 	mov	result1, objptr
22798     17 FA 25 F4 | 	bith	result1, #23
2279c     43 00 00 FF 
227a0     A4 E4 05 F1 | 	add	objptr, ##34468
227a4     F2 FA 61 FC | 	wrlong	result1, objptr
227a8     43 00 00 FF 
227ac     A4 E4 85 F1 | 	sub	objptr, ##34468
227b0     F2 FA 01 F6 | 	mov	result1, objptr
227b4     00 48 00 FF 
227b8     00 FA 45 F5 | 	or	result1, ##9437184
227bc     43 00 00 FF 
227c0     A8 E4 05 F1 | 	add	objptr, ##34472
227c4     F2 FA 61 FC | 	wrlong	result1, objptr
227c8     43 00 00 FF 
227cc     A8 E4 85 F1 | 	sub	objptr, ##34472
227d0     F2 FA 01 F6 | 	mov	result1, objptr
227d4     00 50 00 FF 
227d8     00 FA 45 F5 | 	or	result1, ##10485760
227dc     43 00 00 FF 
227e0     AC E4 05 F1 | 	add	objptr, ##34476
227e4     F2 FA 61 FC | 	wrlong	result1, objptr
227e8     43 00 00 FF 
227ec     AC E4 85 F1 | 	sub	objptr, ##34476
227f0     F2 FA 01 F6 | 	mov	result1, objptr
227f4     00 58 00 FF 
227f8     00 FA 45 F5 | 	or	result1, ##11534336
227fc     43 00 00 FF 
22800     B0 E4 05 F1 | 	add	objptr, ##34480
22804     F2 FA 61 FC | 	wrlong	result1, objptr
22808     43 00 00 FF 
2280c     B0 E4 85 F1 | 	sub	objptr, ##34480
22810     F2 FA 01 F6 | 	mov	result1, objptr
22814     36 FA 25 F4 | 	bith	result1, #54
22818     43 00 00 FF 
2281c     C4 E4 05 F1 | 	add	objptr, ##34500
22820     F2 FA 61 FC | 	wrlong	result1, objptr
22824     43 00 00 FF 
22828     C4 E4 85 F1 | 	sub	objptr, ##34500
2282c     F2 FA 01 F6 | 	mov	result1, objptr
22830     00 68 00 FF 
22834     00 FA 45 F5 | 	or	result1, ##13631488
22838     43 00 00 FF 
2283c     F4 E4 05 F1 | 	add	objptr, ##34548
22840     F2 FA 61 FC | 	wrlong	result1, objptr
22844     43 00 00 FF 
22848     F4 E4 85 F1 | 	sub	objptr, ##34548
2284c     F2 FA 01 F6 | 	mov	result1, objptr
22850     00 68 00 FF 
22854     00 FA 45 F5 | 	or	result1, ##13631488
22858     43 00 00 FF 
2285c     F0 E4 05 F1 | 	add	objptr, ##34544
22860     F2 FA 61 FC | 	wrlong	result1, objptr
22864     43 00 00 FF 
22868     F0 E4 85 F1 | 	sub	objptr, ##34544
2286c     F2 FA 01 F6 | 	mov	result1, objptr
22870     00 68 00 FF 
22874     00 FA 45 F5 | 	or	result1, ##13631488
22878     43 00 00 FF 
2287c     F8 E4 05 F1 | 	add	objptr, ##34552
22880     F2 FA 61 FC | 	wrlong	result1, objptr
22884     43 00 00 FF 
22888     F8 E4 85 F1 | 	sub	objptr, ##34552
2288c     F2 FA 01 F6 | 	mov	result1, objptr
22890     00 68 00 FF 
22894     00 FA 45 F5 | 	or	result1, ##13631488
22898     43 00 00 FF 
2289c     FC E4 05 F1 | 	add	objptr, ##34556
228a0     F2 FA 61 FC | 	wrlong	result1, objptr
228a4     43 00 00 FF 
228a8     FC E4 85 F1 | 	sub	objptr, ##34556
228ac     F2 FA 01 F6 | 	mov	result1, objptr
228b0     00 68 00 FF 
228b4     00 FA 45 F5 | 	or	result1, ##13631488
228b8     43 00 00 FF 
228bc     2C E5 05 F1 | 	add	objptr, ##34604
228c0     F2 FA 61 FC | 	wrlong	result1, objptr
228c4     43 00 00 FF 
228c8     2C E5 85 F1 | 	sub	objptr, ##34604
228cc     F2 FA 01 F6 | 	mov	result1, objptr
228d0     55 FA 25 F4 | 	bith	result1, #85
228d4     43 00 00 FF 
228d8     DC E4 05 F1 | 	add	objptr, ##34524
228dc     F2 FA 61 FC | 	wrlong	result1, objptr
228e0     43 00 00 FF 
228e4     DC E4 85 F1 | 	sub	objptr, ##34524
228e8     F2 FA 01 F6 | 	mov	result1, objptr
228ec     00 68 00 FF 
228f0     00 FA 45 F5 | 	or	result1, ##13631488
228f4     43 00 00 FF 
228f8     30 E5 05 F1 | 	add	objptr, ##34608
228fc     F2 FA 61 FC | 	wrlong	result1, objptr
22900     43 00 00 FF 
22904     30 E5 85 F1 | 	sub	objptr, ##34608
22908     F2 FA 01 F6 | 	mov	result1, objptr
2290c     00 68 00 FF 
22910     00 FA 45 F5 | 	or	result1, ##13631488
22914     43 00 00 FF 
22918     00 E5 05 F1 | 	add	objptr, ##34560
2291c     F2 FA 61 FC | 	wrlong	result1, objptr
22920     43 00 00 FF 
22924     00 E5 85 F1 | 	sub	objptr, ##34560
22928     F2 FA 01 F6 | 	mov	result1, objptr
2292c     00 68 00 FF 
22930     00 FA 45 F5 | 	or	result1, ##13631488
22934     43 00 00 FF 
22938     04 E5 05 F1 | 	add	objptr, ##34564
2293c     F2 FA 61 FC | 	wrlong	result1, objptr
22940     43 00 00 FF 
22944     04 E5 85 F1 | 	sub	objptr, ##34564
22948     F2 FA 01 F6 | 	mov	result1, objptr
2294c     00 68 00 FF 
22950     00 FA 45 F5 | 	or	result1, ##13631488
22954     43 00 00 FF 
22958     08 E5 05 F1 | 	add	objptr, ##34568
2295c     F2 FA 61 FC | 	wrlong	result1, objptr
22960     43 00 00 FF 
22964     08 E5 85 F1 | 	sub	objptr, ##34568
22968     F2 FA 01 F6 | 	mov	result1, objptr
2296c     74 FA 25 F4 | 	bith	result1, #116
22970     43 00 00 FF 
22974     80 E5 05 F1 | 	add	objptr, ##34688
22978     F2 FA 61 FC | 	wrlong	result1, objptr
2297c     43 00 00 FF 
22980     80 E5 85 F1 | 	sub	objptr, ##34688
22984     F2 FA 01 F6 | 	mov	result1, objptr
22988     18 FA 25 F4 | 	bith	result1, #24
2298c     43 00 00 FF 
22990     84 E5 05 F1 | 	add	objptr, ##34692
22994     F2 FA 61 FC | 	wrlong	result1, objptr
22998     43 00 00 FF 
2299c     84 E5 85 F1 | 	sub	objptr, ##34692
229a0     F2 FA 01 F6 | 	mov	result1, objptr
229a4     00 88 00 FF 
229a8     00 FA 45 F5 | 	or	result1, ##17825792
229ac     43 00 00 FF 
229b0     88 E5 05 F1 | 	add	objptr, ##34696
229b4     F2 FA 61 FC | 	wrlong	result1, objptr
229b8     43 00 00 FF 
229bc     88 E5 85 F1 | 	sub	objptr, ##34696
229c0     F2 FA 01 F6 | 	mov	result1, objptr
229c4     00 90 00 FF 
229c8     00 FA 45 F5 | 	or	result1, ##18874368
229cc     43 00 00 FF 
229d0     8C E5 05 F1 | 	add	objptr, ##34700
229d4     F2 FA 61 FC | 	wrlong	result1, objptr
229d8     43 00 00 FF 
229dc     8C E5 85 F1 | 	sub	objptr, ##34700
229e0     F2 FA 01 F6 | 	mov	result1, objptr
229e4     00 98 00 FF 
229e8     00 FA 45 F5 | 	or	result1, ##19922944
229ec     43 00 00 FF 
229f0     90 E5 05 F1 | 	add	objptr, ##34704
229f4     F2 FA 61 FC | 	wrlong	result1, objptr
229f8     43 00 00 FF 
229fc     90 E5 85 F1 | 	sub	objptr, ##34704
22a00     F2 FA 01 F6 | 	mov	result1, objptr
22a04     00 A0 00 FF 
22a08     00 FA 45 F5 | 	or	result1, ##20971520
22a0c     43 00 00 FF 
22a10     94 E5 05 F1 | 	add	objptr, ##34708
22a14     F2 FA 61 FC | 	wrlong	result1, objptr
22a18     43 00 00 FF 
22a1c     94 E5 85 F1 | 	sub	objptr, ##34708
22a20     F2 FA 01 F6 | 	mov	result1, objptr
22a24     00 A8 00 FF 
22a28     00 FA 45 F5 | 	or	result1, ##22020096
22a2c     43 00 00 FF 
22a30     98 E5 05 F1 | 	add	objptr, ##34712
22a34     F2 FA 61 FC | 	wrlong	result1, objptr
22a38     43 00 00 FF 
22a3c     98 E5 85 F1 | 	sub	objptr, ##34712
22a40     F2 FA 01 F6 | 	mov	result1, objptr
22a44     00 B0 00 FF 
22a48     00 FA 45 F5 | 	or	result1, ##23068672
22a4c     43 00 00 FF 
22a50     9C E5 05 F1 | 	add	objptr, ##34716
22a54     F2 FA 61 FC | 	wrlong	result1, objptr
22a58     43 00 00 FF 
22a5c     9C E5 85 F1 | 	sub	objptr, ##34716
22a60     F2 FA 01 F6 | 	mov	result1, objptr
22a64     00 B8 00 FF 
22a68     00 FA 45 F5 | 	or	result1, ##24117248
22a6c     43 00 00 FF 
22a70     A0 E5 05 F1 | 	add	objptr, ##34720
22a74     F2 FA 61 FC | 	wrlong	result1, objptr
22a78     43 00 00 FF 
22a7c     A0 E5 85 F1 | 	sub	objptr, ##34720
22a80     F2 FA 01 F6 | 	mov	result1, objptr
22a84     37 FA 25 F4 | 	bith	result1, #55
22a88     43 00 00 FF 
22a8c     A4 E5 05 F1 | 	add	objptr, ##34724
22a90     F2 FA 61 FC | 	wrlong	result1, objptr
22a94     43 00 00 FF 
22a98     A4 E5 85 F1 | 	sub	objptr, ##34724
22a9c     F2 FA 01 F6 | 	mov	result1, objptr
22aa0     00 C8 00 FF 
22aa4     00 FA 45 F5 | 	or	result1, ##26214400
22aa8     43 00 00 FF 
22aac     A8 E5 05 F1 | 	add	objptr, ##34728
22ab0     F2 FA 61 FC | 	wrlong	result1, objptr
22ab4     43 00 00 FF 
22ab8     A8 E5 85 F1 | 	sub	objptr, ##34728
22abc     F2 FA 01 F6 | 	mov	result1, objptr
22ac0     00 D0 00 FF 
22ac4     00 FA 45 F5 | 	or	result1, ##27262976
22ac8     43 00 00 FF 
22acc     AC E5 05 F1 | 	add	objptr, ##34732
22ad0     F2 FA 61 FC | 	wrlong	result1, objptr
22ad4     43 00 00 FF 
22ad8     AC E5 85 F1 | 	sub	objptr, ##34732
22adc     F2 FA 01 F6 | 	mov	result1, objptr
22ae0     00 D8 00 FF 
22ae4     00 FA 45 F5 | 	or	result1, ##28311552
22ae8     43 00 00 FF 
22aec     B0 E5 05 F1 | 	add	objptr, ##34736
22af0     F2 FA 61 FC | 	wrlong	result1, objptr
22af4     43 00 00 FF 
22af8     B0 E5 85 F1 | 	sub	objptr, ##34736
22afc     F2 FA 01 F6 | 	mov	result1, objptr
22b00     56 FA 25 F4 | 	bith	result1, #86
22b04     43 00 00 FF 
22b08     B4 E5 05 F1 | 	add	objptr, ##34740
22b0c     F2 FA 61 FC | 	wrlong	result1, objptr
22b10     43 00 00 FF 
22b14     B4 E5 85 F1 | 	sub	objptr, ##34740
22b18     F2 FA 01 F6 | 	mov	result1, objptr
22b1c     00 E8 00 FF 
22b20     00 FA 45 F5 | 	or	result1, ##30408704
22b24     45 00 00 FF 
22b28     7C E4 05 F1 | 	add	objptr, ##35452
22b2c     F2 FA 61 FC | 	wrlong	result1, objptr
22b30     45 00 00 FF 
22b34     7C E4 85 F1 | 	sub	objptr, ##35452
22b38     F2 FA 01 F6 | 	mov	result1, objptr
22b3c     75 FA 25 F4 | 	bith	result1, #117
22b40     43 00 00 FF 
22b44     B8 E5 05 F1 | 	add	objptr, ##34744
22b48     F2 FA 61 FC | 	wrlong	result1, objptr
22b4c     43 00 00 FF 
22b50     B8 E5 85 F1 | 	sub	objptr, ##34744
22b54     F2 FA 01 F6 | 	mov	result1, objptr
22b58     94 FA 25 F4 | 	bith	result1, #148
22b5c     43 00 00 FF 
22b60     CC E5 05 F1 | 	add	objptr, ##34764
22b64     F2 FA 61 FC | 	wrlong	result1, objptr
22b68     43 00 00 FF 
22b6c     CC E5 85 F1 | 	sub	objptr, ##34764
22b70     F2 FA 01 F6 | 	mov	result1, objptr
22b74     19 FA 25 F4 | 	bith	result1, #25
22b78     43 00 00 FF 
22b7c     BC E5 05 F1 | 	add	objptr, ##34748
22b80     F2 FA 61 FC | 	wrlong	result1, objptr
22b84     43 00 00 FF 
22b88     BC E5 85 F1 | 	sub	objptr, ##34748
22b8c     F2 FA 01 F6 | 	mov	result1, objptr
22b90     00 08 01 FF 
22b94     00 FA 45 F5 | 	or	result1, ##34603008
22b98     43 00 00 FF 
22b9c     D8 E4 05 F1 | 	add	objptr, ##34520
22ba0     F2 FA 61 FC | 	wrlong	result1, objptr
22ba4     43 00 00 FF 
22ba8     D8 E4 85 F1 | 	sub	objptr, ##34520
22bac     F2 FA 01 F6 | 	mov	result1, objptr
22bb0     00 10 01 FF 
22bb4     00 FA 45 F5 | 	or	result1, ##35651584
22bb8     43 00 00 FF 
22bbc     C4 E5 05 F1 | 	add	objptr, ##34756
22bc0     F2 FA 61 FC | 	wrlong	result1, objptr
22bc4     43 00 00 FF 
22bc8     C4 E5 85 F1 | 	sub	objptr, ##34756
22bcc     F2 FA 01 F6 | 	mov	result1, objptr
22bd0     00 18 01 FF 
22bd4     00 FA 45 F5 | 	or	result1, ##36700160
22bd8     43 00 00 FF 
22bdc     C8 E5 05 F1 | 	add	objptr, ##34760
22be0     F2 FA 61 FC | 	wrlong	result1, objptr
22be4     43 00 00 FF 
22be8     C8 E5 85 F1 | 	sub	objptr, ##34760
22bec     F2 FA 01 F6 | 	mov	result1, objptr
22bf0     00 20 01 FF 
22bf4     00 FA 45 F5 | 	or	result1, ##37748736
22bf8     43 00 00 FF 
22bfc     D4 E5 05 F1 | 	add	objptr, ##34772
22c00     F2 FA 61 FC | 	wrlong	result1, objptr
22c04     43 00 00 FF 
22c08     D4 E5 85 F1 | 	sub	objptr, ##34772
22c0c     F2 FA 01 F6 | 	mov	result1, objptr
22c10     00 28 01 FF 
22c14     00 FA 45 F5 | 	or	result1, ##38797312
22c18     43 00 00 FF 
22c1c     D8 E5 05 F1 | 	add	objptr, ##34776
22c20     F2 FA 61 FC | 	wrlong	result1, objptr
22c24     43 00 00 FF 
22c28     D8 E5 85 F1 | 	sub	objptr, ##34776
22c2c     F2 FA 01 F6 | 	mov	result1, objptr
22c30     00 30 01 FF 
22c34     00 FA 45 F5 | 	or	result1, ##39845888
22c38     43 00 00 FF 
22c3c     DC E5 05 F1 | 	add	objptr, ##34780
22c40     F2 FA 61 FC | 	wrlong	result1, objptr
22c44     43 00 00 FF 
22c48     DC E5 85 F1 | 	sub	objptr, ##34780
22c4c     F2 FA 01 F6 | 	mov	result1, objptr
22c50     00 38 01 FF 
22c54     00 FA 45 F5 | 	or	result1, ##40894464
22c58     43 00 00 FF 
22c5c     E0 E5 05 F1 | 	add	objptr, ##34784
22c60     F2 FA 61 FC | 	wrlong	result1, objptr
22c64     43 00 00 FF 
22c68     E0 E5 85 F1 | 	sub	objptr, ##34784
22c6c     F2 FA 01 F6 | 	mov	result1, objptr
22c70     00 40 01 FF 
22c74     00 FA 45 F5 | 	or	result1, ##41943040
22c78     43 00 00 FF 
22c7c     E8 E5 05 F1 | 	add	objptr, ##34792
22c80     F2 FA 61 FC | 	wrlong	result1, objptr
22c84     43 00 00 FF 
22c88     E8 E5 85 F1 | 	sub	objptr, ##34792
22c8c     F2 FA 01 F6 | 	mov	result1, objptr
22c90     00 08 01 FF 
22c94     00 FA 45 F5 | 	or	result1, ##34603008
22c98     43 00 00 FF 
22c9c     EC E5 05 F1 | 	add	objptr, ##34796
22ca0     F2 FA 61 FC | 	wrlong	result1, objptr
22ca4     43 00 00 FF 
22ca8     EC E5 85 F1 | 	sub	objptr, ##34796
22cac     F2 FA 01 F6 | 	mov	result1, objptr
22cb0     00 48 01 FF 
22cb4     00 FA 45 F5 | 	or	result1, ##42991616
22cb8     43 00 00 FF 
22cbc     EC E4 05 F1 | 	add	objptr, ##34540
22cc0     F2 FA 61 FC | 	wrlong	result1, objptr
22cc4     43 00 00 FF 
22cc8     EC E4 85 F1 | 	sub	objptr, ##34540
22ccc     F2 FA 01 F6 | 	mov	result1, objptr
22cd0     00 50 01 FF 
22cd4     00 FA 45 F5 | 	or	result1, ##44040192
22cd8     43 00 00 FF 
22cdc     1C E5 05 F1 | 	add	objptr, ##34588
22ce0     F2 FA 61 FC | 	wrlong	result1, objptr
22ce4     43 00 00 FF 
22ce8     1C E5 85 F1 | 	sub	objptr, ##34588
22cec     F2 FA 01 F6 | 	mov	result1, objptr
22cf0     00 58 01 FF 
22cf4     00 FA 45 F5 | 	or	result1, ##45088768
22cf8     43 00 00 FF 
22cfc     18 E5 05 F1 | 	add	objptr, ##34584
22d00     F2 FA 61 FC | 	wrlong	result1, objptr
22d04     43 00 00 FF 
22d08     18 E5 85 F1 | 	sub	objptr, ##34584
22d0c     F2 FA 01 F6 | 	mov	result1, objptr
22d10     00 60 01 FF 
22d14     00 FA 45 F5 | 	or	result1, ##46137344
22d18     43 00 00 FF 
22d1c     BC E4 05 F1 | 	add	objptr, ##34492
22d20     F2 FA 61 FC | 	wrlong	result1, objptr
22d24     43 00 00 FF 
22d28     BC E4 85 F1 | 	sub	objptr, ##34492
22d2c     F2 FA 01 F6 | 	mov	result1, objptr
22d30     00 68 01 FF 
22d34     00 FA 45 F5 | 	or	result1, ##47185920
22d38     43 00 00 FF 
22d3c     C0 E4 05 F1 | 	add	objptr, ##34496
22d40     F2 FA 61 FC | 	wrlong	result1, objptr
22d44     43 00 00 FF 
22d48     C0 E4 85 F1 | 	sub	objptr, ##34496
22d4c     F2 FA 01 F6 | 	mov	result1, objptr
22d50     00 70 01 FF 
22d54     00 FA 45 F5 | 	or	result1, ##48234496
22d58     43 00 00 FF 
22d5c     28 E5 05 F1 | 	add	objptr, ##34600
22d60     F2 FA 61 FC | 	wrlong	result1, objptr
22d64     43 00 00 FF 
22d68     28 E5 85 F1 | 	sub	objptr, ##34600
22d6c     F2 FA 01 F6 | 	mov	result1, objptr
22d70     00 78 01 FF 
22d74     00 FA 45 F5 | 	or	result1, ##49283072
22d78     43 00 00 FF 
22d7c     D0 E5 05 F1 | 	add	objptr, ##34768
22d80     F2 FA 61 FC | 	wrlong	result1, objptr
22d84     43 00 00 FF 
22d88     D0 E5 85 F1 | 	sub	objptr, ##34768
22d8c     F2 FA 01 F6 | 	mov	result1, objptr
22d90     38 FA 25 F4 | 	bith	result1, #56
22d94     43 00 00 FF 
22d98     E4 E5 05 F1 | 	add	objptr, ##34788
22d9c     F2 FA 61 FC | 	wrlong	result1, objptr
22da0     43 00 00 FF 
22da4     E4 E5 85 F1 | 	sub	objptr, ##34788
22da8     F2 FA 01 F6 | 	mov	result1, objptr
22dac     00 88 01 FF 
22db0     00 FA 45 F5 | 	or	result1, ##51380224
22db4     43 00 00 FF 
22db8     F0 E5 05 F1 | 	add	objptr, ##34800
22dbc     F2 FA 61 FC | 	wrlong	result1, objptr
22dc0     43 00 00 FF 
22dc4     F0 E5 85 F1 | 	sub	objptr, ##34800
22dc8     F2 FA 01 F6 | 	mov	result1, objptr
22dcc     00 90 01 FF 
22dd0     00 FA 45 F5 | 	or	result1, ##52428800
22dd4     43 00 00 FF 
22dd8     F4 E5 05 F1 | 	add	objptr, ##34804
22ddc     F2 FA 61 FC | 	wrlong	result1, objptr
22de0     43 00 00 FF 
22de4     F4 E5 85 F1 | 	sub	objptr, ##34804
22de8     F2 FA 01 F6 | 	mov	result1, objptr
22dec     00 98 01 FF 
22df0     00 FA 45 F5 | 	or	result1, ##53477376
22df4     43 00 00 FF 
22df8     F8 E5 05 F1 | 	add	objptr, ##34808
22dfc     F2 FA 61 FC | 	wrlong	result1, objptr
22e00     43 00 00 FF 
22e04     F8 E5 85 F1 | 	sub	objptr, ##34808
22e08     F2 FA 01 F6 | 	mov	result1, objptr
22e0c     00 A0 01 FF 
22e10     00 FA 45 F5 | 	or	result1, ##54525952
22e14     43 00 00 FF 
22e18     FC E5 05 F1 | 	add	objptr, ##34812
22e1c     F2 FA 61 FC | 	wrlong	result1, objptr
22e20     43 00 00 FF 
22e24     FC E5 85 F1 | 	sub	objptr, ##34812
22e28     F2 FA 01 F6 | 	mov	result1, objptr
22e2c     00 A8 01 FF 
22e30     00 FA 45 F5 | 	or	result1, ##55574528
22e34     44 00 00 FF 
22e38     00 E4 05 F1 | 	add	objptr, ##34816
22e3c     F2 FA 61 FC | 	wrlong	result1, objptr
22e40     44 00 00 FF 
22e44     00 E4 85 F1 | 	sub	objptr, ##34816
22e48     F2 FA 01 F6 | 	mov	result1, objptr
22e4c     00 B0 01 FF 
22e50     00 FA 45 F5 | 	or	result1, ##56623104
22e54     44 00 00 FF 
22e58     04 E4 05 F1 | 	add	objptr, ##34820
22e5c     F2 FA 61 FC | 	wrlong	result1, objptr
22e60     44 00 00 FF 
22e64     04 E4 85 F1 | 	sub	objptr, ##34820
22e68     F2 FA 01 F6 | 	mov	result1, objptr
22e6c     94 FA 25 F4 | 	bith	result1, #148
22e70     43 00 00 FF 
22e74     CC E5 05 F1 | 	add	objptr, ##34764
22e78     F2 FA 61 FC | 	wrlong	result1, objptr
22e7c     43 00 00 FF 
22e80     CC E5 85 F1 | 	sub	objptr, ##34764
22e84     F2 FA 01 F6 | 	mov	result1, objptr
22e88     00 B8 01 FF 
22e8c     00 FA 45 F5 | 	or	result1, ##57671680
22e90     44 00 00 FF 
22e94     0C E4 05 F1 | 	add	objptr, ##34828
22e98     F2 FA 61 FC | 	wrlong	result1, objptr
22e9c     44 00 00 FF 
22ea0     0C E4 85 F1 | 	sub	objptr, ##34828
22ea4     F2 FA 01 F6 | 	mov	result1, objptr
22ea8     57 FA 25 F4 | 	bith	result1, #87
22eac     44 00 00 FF 
22eb0     08 E4 05 F1 | 	add	objptr, ##34824
22eb4     F2 FA 61 FC | 	wrlong	result1, objptr
22eb8     44 00 00 FF 
22ebc     08 E4 85 F1 | 	sub	objptr, ##34824
22ec0     F2 FA 01 F6 | 	mov	result1, objptr
22ec4     00 C8 01 FF 
22ec8     00 FA 45 F5 | 	or	result1, ##59768832
22ecc     44 00 00 FF 
22ed0     20 E4 05 F1 | 	add	objptr, ##34848
22ed4     F2 FA 61 FC | 	wrlong	result1, objptr
22ed8     44 00 00 FF 
22edc     20 E4 85 F1 | 	sub	objptr, ##34848
22ee0     F2 FA 01 F6 | 	mov	result1, objptr
22ee4     00 D0 01 FF 
22ee8     00 FA 45 F5 | 	or	result1, ##60817408
22eec     44 00 00 FF 
22ef0     24 E4 05 F1 | 	add	objptr, ##34852
22ef4     F2 FA 61 FC | 	wrlong	result1, objptr
22ef8     44 00 00 FF 
22efc     24 E4 85 F1 | 	sub	objptr, ##34852
22f00     F2 FA 01 F6 | 	mov	result1, objptr
22f04     00 D8 01 FF 
22f08     00 FA 45 F5 | 	or	result1, ##61865984
22f0c     44 00 00 FF 
22f10     10 E4 05 F1 | 	add	objptr, ##34832
22f14     F2 FA 61 FC | 	wrlong	result1, objptr
22f18     44 00 00 FF 
22f1c     10 E4 85 F1 | 	sub	objptr, ##34832
22f20     F2 FA 01 F6 | 	mov	result1, objptr
22f24     76 FA 25 F4 | 	bith	result1, #118
22f28     44 00 00 FF 
22f2c     14 E4 05 F1 | 	add	objptr, ##34836
22f30     F2 FA 61 FC | 	wrlong	result1, objptr
22f34     44 00 00 FF 
22f38     14 E4 85 F1 | 	sub	objptr, ##34836
22f3c     F2 FA 01 F6 | 	mov	result1, objptr
22f40     00 E8 01 FF 
22f44     00 FA 45 F5 | 	or	result1, ##63963136
22f48     44 00 00 FF 
22f4c     18 E4 05 F1 | 	add	objptr, ##34840
22f50     F2 FA 61 FC | 	wrlong	result1, objptr
22f54     44 00 00 FF 
22f58     18 E4 85 F1 | 	sub	objptr, ##34840
22f5c     F2 FA 01 F6 | 	mov	result1, objptr
22f60     95 FA 25 F4 | 	bith	result1, #149
22f64     44 00 00 FF 
22f68     1C E4 05 F1 | 	add	objptr, ##34844
22f6c     F2 FA 61 FC | 	wrlong	result1, objptr
22f70     44 00 00 FF 
22f74     1C E4 85 F1 | 	sub	objptr, ##34844
22f78     F2 FA 01 F6 | 	mov	result1, objptr
22f7c     B4 FA 25 F4 | 	bith	result1, #180
22f80     44 00 00 FF 
22f84     2C E4 05 F1 | 	add	objptr, ##34860
22f88     F2 FA 61 FC | 	wrlong	result1, objptr
22f8c     44 00 00 FF 
22f90     2C E4 85 F1 | 	sub	objptr, ##34860
22f94     F2 FA 01 F6 | 	mov	result1, objptr
22f98     1A FA 25 F4 | 	bith	result1, #26
22f9c     44 00 00 FF 
22fa0     28 E4 05 F1 | 	add	objptr, ##34856
22fa4     F2 FA 61 FC | 	wrlong	result1, objptr
22fa8     44 00 00 FF 
22fac     28 E4 85 F1 | 	sub	objptr, ##34856
22fb0     F2 FA 01 F6 | 	mov	result1, objptr
22fb4     00 08 02 FF 
22fb8     00 FA 45 F5 | 	or	result1, ##68157440
22fbc     44 00 00 FF 
22fc0     38 E4 05 F1 | 	add	objptr, ##34872
22fc4     F2 FA 61 FC | 	wrlong	result1, objptr
22fc8     44 00 00 FF 
22fcc     38 E4 85 F1 | 	sub	objptr, ##34872
22fd0     F2 FA 01 F6 | 	mov	result1, objptr
22fd4     00 10 02 FF 
22fd8     00 FA 45 F5 | 	or	result1, ##69206016
22fdc     44 00 00 FF 
22fe0     34 E4 05 F1 | 	add	objptr, ##34868
22fe4     F2 FA 61 FC | 	wrlong	result1, objptr
22fe8     44 00 00 FF 
22fec     34 E4 85 F1 | 	sub	objptr, ##34868
22ff0     F2 FA 01 F6 | 	mov	result1, objptr
22ff4     00 18 02 FF 
22ff8     00 FA 45 F5 | 	or	result1, ##70254592
22ffc     44 00 00 FF 
23000     30 E4 05 F1 | 	add	objptr, ##34864
23004     F2 FA 61 FC | 	wrlong	result1, objptr
23008     44 00 00 FF 
2300c     30 E4 85 F1 | 	sub	objptr, ##34864
23010     F2 FA 01 F6 | 	mov	result1, objptr
23014     00 20 02 FF 
23018     00 FA 45 F5 | 	or	result1, ##71303168
2301c     44 00 00 FF 
23020     3C E4 05 F1 | 	add	objptr, ##34876
23024     F2 FA 61 FC | 	wrlong	result1, objptr
23028     44 00 00 FF 
2302c     3C E4 85 F1 | 	sub	objptr, ##34876
23030     F2 FA 01 F6 | 	mov	result1, objptr
23034     00 28 02 FF 
23038     00 FA 45 F5 | 	or	result1, ##72351744
2303c     44 00 00 FF 
23040     40 E4 05 F1 | 	add	objptr, ##34880
23044     F2 FA 61 FC | 	wrlong	result1, objptr
23048     44 00 00 FF 
2304c     40 E4 85 F1 | 	sub	objptr, ##34880
23050     F2 FA 01 F6 | 	mov	result1, objptr
23054     00 30 02 FF 
23058     00 FA 45 F5 | 	or	result1, ##73400320
2305c     43 00 00 FF 
23060     D4 E4 05 F1 | 	add	objptr, ##34516
23064     F2 FA 61 FC | 	wrlong	result1, objptr
23068     43 00 00 FF 
2306c     D4 E4 85 F1 | 	sub	objptr, ##34516
23070     F2 FA 01 F6 | 	mov	result1, objptr
23074     00 38 02 FF 
23078     00 FA 45 F5 | 	or	result1, ##74448896
2307c     44 00 00 FF 
23080     58 E4 05 F1 | 	add	objptr, ##34904
23084     F2 FA 61 FC | 	wrlong	result1, objptr
23088     44 00 00 FF 
2308c     58 E4 85 F1 | 	sub	objptr, ##34904
23090     F2 FA 01 F6 | 	mov	result1, objptr
23094     00 40 02 FF 
23098     00 FA 45 F5 | 	or	result1, ##75497472
2309c     44 00 00 FF 
230a0     68 E4 05 F1 | 	add	objptr, ##34920
230a4     F2 FA 61 FC | 	wrlong	result1, objptr
230a8     44 00 00 FF 
230ac     68 E4 85 F1 | 	sub	objptr, ##34920
230b0     F2 FA 01 F6 | 	mov	result1, objptr
230b4     00 48 02 FF 
230b8     00 FA 45 F5 | 	or	result1, ##76546048
230bc     44 00 00 FF 
230c0     6C E4 05 F1 | 	add	objptr, ##34924
230c4     F2 FA 61 FC | 	wrlong	result1, objptr
230c8     44 00 00 FF 
230cc     6C E4 85 F1 | 	sub	objptr, ##34924
230d0     F2 FA 01 F6 | 	mov	result1, objptr
230d4     00 50 02 FF 
230d8     00 FA 45 F5 | 	or	result1, ##77594624
230dc     44 00 00 FF 
230e0     64 E4 05 F1 | 	add	objptr, ##34916
230e4     F2 FA 61 FC | 	wrlong	result1, objptr
230e8     44 00 00 FF 
230ec     64 E4 85 F1 | 	sub	objptr, ##34916
230f0     F2 FA 01 F6 | 	mov	result1, objptr
230f4     00 58 02 FF 
230f8     00 FA 45 F5 | 	or	result1, ##78643200
230fc     44 00 00 FF 
23100     5C E4 05 F1 | 	add	objptr, ##34908
23104     F2 FA 61 FC | 	wrlong	result1, objptr
23108     44 00 00 FF 
2310c     5C E4 85 F1 | 	sub	objptr, ##34908
23110     F2 FA 01 F6 | 	mov	result1, objptr
23114     00 60 02 FF 
23118     00 FA 45 F5 | 	or	result1, ##79691776
2311c     44 00 00 FF 
23120     60 E4 05 F1 | 	add	objptr, ##34912
23124     F2 FA 61 FC | 	wrlong	result1, objptr
23128     44 00 00 FF 
2312c     60 E4 85 F1 | 	sub	objptr, ##34912
23130     F2 FA 01 F6 | 	mov	result1, objptr
23134     00 68 02 FF 
23138     00 FA 45 F5 | 	or	result1, ##80740352
2313c     44 00 00 FF 
23140     70 E4 05 F1 | 	add	objptr, ##34928
23144     F2 FA 61 FC | 	wrlong	result1, objptr
23148     44 00 00 FF 
2314c     70 E4 85 F1 | 	sub	objptr, ##34928
23150     F2 FA 01 F6 | 	mov	result1, objptr
23154     00 70 02 FF 
23158     00 FA 45 F5 | 	or	result1, ##81788928
2315c     44 00 00 FF 
23160     74 E4 05 F1 | 	add	objptr, ##34932
23164     F2 FA 61 FC | 	wrlong	result1, objptr
23168     44 00 00 FF 
2316c     74 E4 85 F1 | 	sub	objptr, ##34932
23170     F2 FA 01 F6 | 	mov	result1, objptr
23174     00 78 02 FF 
23178     00 FA 45 F5 | 	or	result1, ##82837504
2317c     44 00 00 FF 
23180     78 E4 05 F1 | 	add	objptr, ##34936
23184     F2 FA 61 FC | 	wrlong	result1, objptr
23188     44 00 00 FF 
2318c     78 E4 85 F1 | 	sub	objptr, ##34936
23190     F2 FA 01 F6 | 	mov	result1, objptr
23194     00 80 02 FF 
23198     00 FA 45 F5 | 	or	result1, ##83886080
2319c     44 00 00 FF 
231a0     7C E4 05 F1 | 	add	objptr, ##34940
231a4     F2 FA 61 FC | 	wrlong	result1, objptr
231a8     44 00 00 FF 
231ac     7C E4 85 F1 | 	sub	objptr, ##34940
231b0     F2 FA 01 F6 | 	mov	result1, objptr
231b4     00 88 02 FF 
231b8     00 FA 45 F5 | 	or	result1, ##84934656
231bc     44 00 00 FF 
231c0     80 E4 05 F1 | 	add	objptr, ##34944
231c4     F2 FA 61 FC | 	wrlong	result1, objptr
231c8     44 00 00 FF 
231cc     80 E4 85 F1 | 	sub	objptr, ##34944
231d0     F2 FA 01 F6 | 	mov	result1, objptr
231d4     00 90 02 FF 
231d8     00 FA 45 F5 | 	or	result1, ##85983232
231dc     44 00 00 FF 
231e0     84 E4 05 F1 | 	add	objptr, ##34948
231e4     F2 FA 61 FC | 	wrlong	result1, objptr
231e8     44 00 00 FF 
231ec     84 E4 85 F1 | 	sub	objptr, ##34948
231f0     F2 FA 01 F6 | 	mov	result1, objptr
231f4     00 98 02 FF 
231f8     00 FA 45 F5 | 	or	result1, ##87031808
231fc     44 00 00 FF 
23200     88 E4 05 F1 | 	add	objptr, ##34952
23204     F2 FA 61 FC | 	wrlong	result1, objptr
23208     44 00 00 FF 
2320c     88 E4 85 F1 | 	sub	objptr, ##34952
23210     F2 FA 01 F6 | 	mov	result1, objptr
23214     00 A0 02 FF 
23218     00 FA 45 F5 | 	or	result1, ##88080384
2321c     44 00 00 FF 
23220     8C E4 05 F1 | 	add	objptr, ##34956
23224     F2 FA 61 FC | 	wrlong	result1, objptr
23228     44 00 00 FF 
2322c     8C E4 85 F1 | 	sub	objptr, ##34956
23230     F2 FA 01 F6 | 	mov	result1, objptr
23234     00 A8 02 FF 
23238     00 FA 45 F5 | 	or	result1, ##89128960
2323c     44 00 00 FF 
23240     98 E4 05 F1 | 	add	objptr, ##34968
23244     F2 FA 61 FC | 	wrlong	result1, objptr
23248     44 00 00 FF 
2324c     98 E4 85 F1 | 	sub	objptr, ##34968
23250     F2 FA 01 F6 | 	mov	result1, objptr
23254     00 B0 02 FF 
23258     00 FA 45 F5 | 	or	result1, ##90177536
2325c     44 00 00 FF 
23260     90 E4 05 F1 | 	add	objptr, ##34960
23264     F2 FA 61 FC | 	wrlong	result1, objptr
23268     44 00 00 FF 
2326c     90 E4 85 F1 | 	sub	objptr, ##34960
23270     F2 FA 01 F6 | 	mov	result1, objptr
23274     00 B8 02 FF 
23278     00 FA 45 F5 | 	or	result1, ##91226112
2327c     44 00 00 FF 
23280     94 E4 05 F1 | 	add	objptr, ##34964
23284     F2 FA 61 FC | 	wrlong	result1, objptr
23288     44 00 00 FF 
2328c     94 E4 85 F1 | 	sub	objptr, ##34964
23290     F2 FA 01 F6 | 	mov	result1, objptr
23294     00 C0 02 FF 
23298     00 FA 45 F5 | 	or	result1, ##92274688
2329c     44 00 00 FF 
232a0     9C E4 05 F1 | 	add	objptr, ##34972
232a4     F2 FA 61 FC | 	wrlong	result1, objptr
232a8     44 00 00 FF 
232ac     9C E4 85 F1 | 	sub	objptr, ##34972
232b0     F2 FA 01 F6 | 	mov	result1, objptr
232b4     00 C8 02 FF 
232b8     00 FA 45 F5 | 	or	result1, ##93323264
232bc     44 00 00 FF 
232c0     44 E4 05 F1 | 	add	objptr, ##34884
232c4     F2 FA 61 FC | 	wrlong	result1, objptr
232c8     44 00 00 FF 
232cc     44 E4 85 F1 | 	sub	objptr, ##34884
232d0     F2 FA 01 F6 | 	mov	result1, objptr
232d4     00 D0 02 FF 
232d8     00 FA 45 F5 | 	or	result1, ##94371840
232dc     44 00 00 FF 
232e0     4C E4 05 F1 | 	add	objptr, ##34892
232e4     F2 FA 61 FC | 	wrlong	result1, objptr
232e8     44 00 00 FF 
232ec     4C E4 85 F1 | 	sub	objptr, ##34892
232f0     F2 FA 01 F6 | 	mov	result1, objptr
232f4     00 D8 02 FF 
232f8     00 FA 45 F5 | 	or	result1, ##95420416
232fc     44 00 00 FF 
23300     50 E4 05 F1 | 	add	objptr, ##34896
23304     F2 FA 61 FC | 	wrlong	result1, objptr
23308     44 00 00 FF 
2330c     50 E4 85 F1 | 	sub	objptr, ##34896
23310     F2 FA 01 F6 | 	mov	result1, objptr
23314     00 E0 02 FF 
23318     00 FA 45 F5 | 	or	result1, ##96468992
2331c     44 00 00 FF 
23320     A0 E4 05 F1 | 	add	objptr, ##34976
23324     F2 FA 61 FC | 	wrlong	result1, objptr
23328     44 00 00 FF 
2332c     A0 E4 85 F1 | 	sub	objptr, ##34976
23330     F2 FA 01 F6 | 	mov	result1, objptr
23334     00 E8 02 FF 
23338     00 FA 45 F5 | 	or	result1, ##97517568
2333c     44 00 00 FF 
23340     A4 E4 05 F1 | 	add	objptr, ##34980
23344     F2 FA 61 FC | 	wrlong	result1, objptr
23348     44 00 00 FF 
2334c     A4 E4 85 F1 | 	sub	objptr, ##34980
23350     F2 FA 01 F6 | 	mov	result1, objptr
23354     00 F0 02 FF 
23358     00 FA 45 F5 | 	or	result1, ##98566144
2335c     44 00 00 FF 
23360     A8 E4 05 F1 | 	add	objptr, ##34984
23364     F2 FA 61 FC | 	wrlong	result1, objptr
23368     44 00 00 FF 
2336c     A8 E4 85 F1 | 	sub	objptr, ##34984
23370     F2 FA 01 F6 | 	mov	result1, objptr
23374     00 F8 02 FF 
23378     00 FA 45 F5 | 	or	result1, ##99614720
2337c     44 00 00 FF 
23380     54 E4 05 F1 | 	add	objptr, ##34900
23384     F2 FA 61 FC | 	wrlong	result1, objptr
23388     44 00 00 FF 
2338c     54 E4 85 F1 | 	sub	objptr, ##34900
23390     F2 FA 01 F6 | 	mov	result1, objptr
23394     39 FA 25 F4 | 	bith	result1, #57
23398     44 00 00 FF 
2339c     B8 E4 05 F1 | 	add	objptr, ##35000
233a0     F2 FA 61 FC | 	wrlong	result1, objptr
233a4     44 00 00 FF 
233a8     B8 E4 85 F1 | 	sub	objptr, ##35000
233ac     F2 FA 01 F6 | 	mov	result1, objptr
233b0     00 08 03 FF 
233b4     00 FA 45 F5 | 	or	result1, ##101711872
233b8     44 00 00 FF 
233bc     C0 E4 05 F1 | 	add	objptr, ##35008
233c0     F2 FA 61 FC | 	wrlong	result1, objptr
233c4     44 00 00 FF 
233c8     C0 E4 85 F1 | 	sub	objptr, ##35008
233cc     F2 FA 01 F6 | 	mov	result1, objptr
233d0     00 10 03 FF 
233d4     00 FA 45 F5 | 	or	result1, ##102760448
233d8     44 00 00 FF 
233dc     B4 E4 05 F1 | 	add	objptr, ##34996
233e0     F2 FA 61 FC | 	wrlong	result1, objptr
233e4     44 00 00 FF 
233e8     B4 E4 85 F1 | 	sub	objptr, ##34996
233ec     F2 FA 01 F6 | 	mov	result1, objptr
233f0     00 18 03 FF 
233f4     00 FA 45 F5 | 	or	result1, ##103809024
233f8     44 00 00 FF 
233fc     B0 E4 05 F1 | 	add	objptr, ##34992
23400     F2 FA 61 FC | 	wrlong	result1, objptr
23404     44 00 00 FF 
23408     B0 E4 85 F1 | 	sub	objptr, ##34992
2340c     F2 FA 01 F6 | 	mov	result1, objptr
23410     00 20 03 FF 
23414     00 FA 45 F5 | 	or	result1, ##104857600
23418     44 00 00 FF 
2341c     AC E4 05 F1 | 	add	objptr, ##34988
23420     F2 FA 61 FC | 	wrlong	result1, objptr
23424     44 00 00 FF 
23428     AC E4 85 F1 | 	sub	objptr, ##34988
2342c     F2 FA 01 F6 | 	mov	result1, objptr
23430     00 28 03 FF 
23434     00 FA 45 F5 | 	or	result1, ##105906176
23438     44 00 00 FF 
2343c     BC E4 05 F1 | 	add	objptr, ##35004
23440     F2 FA 61 FC | 	wrlong	result1, objptr
23444     44 00 00 FF 
23448     BC E4 85 F1 | 	sub	objptr, ##35004
2344c     F2 FA 01 F6 | 	mov	result1, objptr
23450     00 30 03 FF 
23454     00 FA 45 F5 | 	or	result1, ##106954752
23458     44 00 00 FF 
2345c     C4 E4 05 F1 | 	add	objptr, ##35012
23460     F2 FA 61 FC | 	wrlong	result1, objptr
23464     44 00 00 FF 
23468     C4 E4 85 F1 | 	sub	objptr, ##35012
2346c     F2 FA 01 F6 | 	mov	result1, objptr
23470     00 38 03 FF 
23474     00 FA 45 F5 | 	or	result1, ##108003328
23478     44 00 00 FF 
2347c     C8 E4 05 F1 | 	add	objptr, ##35016
23480     F2 FA 61 FC | 	wrlong	result1, objptr
23484     44 00 00 FF 
23488     C8 E4 85 F1 | 	sub	objptr, ##35016
2348c     F2 FA 01 F6 | 	mov	result1, objptr
23490     00 40 03 FF 
23494     00 FA 45 F5 | 	or	result1, ##109051904
23498     44 00 00 FF 
2349c     CC E4 05 F1 | 	add	objptr, ##35020
234a0     F2 FA 61 FC | 	wrlong	result1, objptr
234a4     44 00 00 FF 
234a8     CC E4 85 F1 | 	sub	objptr, ##35020
234ac     F2 FA 01 F6 | 	mov	result1, objptr
234b0     00 48 03 FF 
234b4     00 FA 45 F5 | 	or	result1, ##110100480
234b8     44 00 00 FF 
234bc     D4 E4 05 F1 | 	add	objptr, ##35028
234c0     F2 FA 61 FC | 	wrlong	result1, objptr
234c4     44 00 00 FF 
234c8     D4 E4 85 F1 | 	sub	objptr, ##35028
234cc     F2 FA 01 F6 | 	mov	result1, objptr
234d0     00 50 03 FF 
234d4     00 FA 45 F5 | 	or	result1, ##111149056
234d8     44 00 00 FF 
234dc     D8 E4 05 F1 | 	add	objptr, ##35032
234e0     F2 FA 61 FC | 	wrlong	result1, objptr
234e4     44 00 00 FF 
234e8     D8 E4 85 F1 | 	sub	objptr, ##35032
234ec     F2 FA 01 F6 | 	mov	result1, objptr
234f0     00 58 03 FF 
234f4     00 FA 45 F5 | 	or	result1, ##112197632
234f8     44 00 00 FF 
234fc     DC E4 05 F1 | 	add	objptr, ##35036
23500     F2 FA 61 FC | 	wrlong	result1, objptr
23504     44 00 00 FF 
23508     DC E4 85 F1 | 	sub	objptr, ##35036
2350c     F2 FA 01 F6 | 	mov	result1, objptr
23510     00 60 03 FF 
23514     00 FA 45 F5 | 	or	result1, ##113246208
23518     44 00 00 FF 
2351c     E0 E4 05 F1 | 	add	objptr, ##35040
23520     F2 FA 61 FC | 	wrlong	result1, objptr
23524     44 00 00 FF 
23528     E0 E4 85 F1 | 	sub	objptr, ##35040
2352c     F2 FA 01 F6 | 	mov	result1, objptr
23530     00 68 03 FF 
23534     00 FA 45 F5 | 	or	result1, ##114294784
23538     44 00 00 FF 
2353c     E4 E4 05 F1 | 	add	objptr, ##35044
23540     F2 FA 61 FC | 	wrlong	result1, objptr
23544     44 00 00 FF 
23548     E4 E4 85 F1 | 	sub	objptr, ##35044
2354c     F2 FA 01 F6 | 	mov	result1, objptr
23550     00 70 03 FF 
23554     00 FA 45 F5 | 	or	result1, ##115343360
23558     44 00 00 FF 
2355c     E8 E4 05 F1 | 	add	objptr, ##35048
23560     F2 FA 61 FC | 	wrlong	result1, objptr
23564     44 00 00 FF 
23568     E8 E4 85 F1 | 	sub	objptr, ##35048
2356c     F2 FA 01 F6 | 	mov	result1, objptr
23570     00 08 01 FF 
23574     00 FA 45 F5 | 	or	result1, ##34603008
23578     44 00 00 FF 
2357c     EC E4 05 F1 | 	add	objptr, ##35052
23580     F2 FA 61 FC | 	wrlong	result1, objptr
23584     44 00 00 FF 
23588     EC E4 85 F1 | 	sub	objptr, ##35052
2358c     F2 FA 01 F6 | 	mov	result1, objptr
23590     00 78 03 FF 
23594     00 FA 45 F5 | 	or	result1, ##116391936
23598     44 00 00 FF 
2359c     F0 E4 05 F1 | 	add	objptr, ##35056
235a0     F2 FA 61 FC | 	wrlong	result1, objptr
235a4     44 00 00 FF 
235a8     F0 E4 85 F1 | 	sub	objptr, ##35056
235ac     F2 FA 01 F6 | 	mov	result1, objptr
235b0     58 FA 25 F4 | 	bith	result1, #88
235b4     44 00 00 FF 
235b8     D0 E4 05 F1 | 	add	objptr, ##35024
235bc     F2 FA 61 FC | 	wrlong	result1, objptr
235c0     44 00 00 FF 
235c4     D0 E4 85 F1 | 	sub	objptr, ##35024
235c8     F2 FA 01 F6 | 	mov	result1, objptr
235cc     00 88 03 FF 
235d0     00 FA 45 F5 | 	or	result1, ##118489088
235d4     43 00 00 FF 
235d8     C8 E4 05 F1 | 	add	objptr, ##34504
235dc     F2 FA 61 FC | 	wrlong	result1, objptr
235e0     43 00 00 FF 
235e4     C8 E4 85 F1 | 	sub	objptr, ##34504
235e8     F2 FA 01 F6 | 	mov	result1, objptr
235ec     00 90 03 FF 
235f0     00 FA 45 F5 | 	or	result1, ##119537664
235f4     44 00 00 FF 
235f8     F4 E4 05 F1 | 	add	objptr, ##35060
235fc     F2 FA 61 FC | 	wrlong	result1, objptr
23600     44 00 00 FF 
23604     F4 E4 85 F1 | 	sub	objptr, ##35060
23608     F2 FA 01 F6 | 	mov	result1, objptr
2360c     00 98 03 FF 
23610     00 FA 45 F5 | 	or	result1, ##120586240
23614     44 00 00 FF 
23618     F8 E4 05 F1 | 	add	objptr, ##35064
2361c     F2 FA 61 FC | 	wrlong	result1, objptr
23620     44 00 00 FF 
23624     F8 E4 85 F1 | 	sub	objptr, ##35064
23628     F2 FA 01 F6 | 	mov	result1, objptr
2362c     00 A0 03 FF 
23630     00 FA 45 F5 | 	or	result1, ##121634816
23634     44 00 00 FF 
23638     0C E5 05 F1 | 	add	objptr, ##35084
2363c     F2 FA 61 FC | 	wrlong	result1, objptr
23640     44 00 00 FF 
23644     0C E5 85 F1 | 	sub	objptr, ##35084
23648     F2 FA 01 F6 | 	mov	result1, objptr
2364c     00 A8 03 FF 
23650     00 FA 45 F5 | 	or	result1, ##122683392
23654     44 00 00 FF 
23658     08 E5 05 F1 | 	add	objptr, ##35080
2365c     F2 FA 61 FC | 	wrlong	result1, objptr
23660     44 00 00 FF 
23664     08 E5 85 F1 | 	sub	objptr, ##35080
23668     F2 FA 01 F6 | 	mov	result1, objptr
2366c     00 B0 03 FF 
23670     00 FA 45 F5 | 	or	result1, ##123731968
23674     44 00 00 FF 
23678     00 E5 05 F1 | 	add	objptr, ##35072
2367c     F2 FA 61 FC | 	wrlong	result1, objptr
23680     44 00 00 FF 
23684     00 E5 85 F1 | 	sub	objptr, ##35072
23688     F2 FA 01 F6 | 	mov	result1, objptr
2368c     00 B8 03 FF 
23690     00 FA 45 F5 | 	or	result1, ##124780544
23694     44 00 00 FF 
23698     FC E4 05 F1 | 	add	objptr, ##35068
2369c     F2 FA 61 FC | 	wrlong	result1, objptr
236a0     44 00 00 FF 
236a4     FC E4 85 F1 | 	sub	objptr, ##35068
236a8     F2 FA 01 F6 | 	mov	result1, objptr
236ac     77 FA 25 F4 | 	bith	result1, #119
236b0     44 00 00 FF 
236b4     1C E5 05 F1 | 	add	objptr, ##35100
236b8     F2 FA 61 FC | 	wrlong	result1, objptr
236bc     44 00 00 FF 
236c0     1C E5 85 F1 | 	sub	objptr, ##35100
236c4     F2 FA 01 F6 | 	mov	result1, objptr
236c8     00 C8 03 FF 
236cc     00 FA 45 F5 | 	or	result1, ##126877696
236d0     44 00 00 FF 
236d4     10 E5 05 F1 | 	add	objptr, ##35088
236d8     F2 FA 61 FC | 	wrlong	result1, objptr
236dc     44 00 00 FF 
236e0     10 E5 85 F1 | 	sub	objptr, ##35088
236e4     F2 FA 01 F6 | 	mov	result1, objptr
236e8     00 D0 03 FF 
236ec     00 FA 45 F5 | 	or	result1, ##127926272
236f0     44 00 00 FF 
236f4     14 E5 05 F1 | 	add	objptr, ##35092
236f8     F2 FA 61 FC | 	wrlong	result1, objptr
236fc     44 00 00 FF 
23700     14 E5 85 F1 | 	sub	objptr, ##35092
23704     F2 FA 01 F6 | 	mov	result1, objptr
23708     00 D8 03 FF 
2370c     00 FA 45 F5 | 	or	result1, ##128974848
23710     44 00 00 FF 
23714     18 E5 05 F1 | 	add	objptr, ##35096
23718     F2 FA 61 FC | 	wrlong	result1, objptr
2371c     44 00 00 FF 
23720     18 E5 85 F1 | 	sub	objptr, ##35096
23724     F2 FA 01 F6 | 	mov	result1, objptr
23728     96 FA 25 F4 | 	bith	result1, #150
2372c     44 00 00 FF 
23730     20 E5 05 F1 | 	add	objptr, ##35104
23734     F2 FA 61 FC | 	wrlong	result1, objptr
23738     44 00 00 FF 
2373c     20 E5 85 F1 | 	sub	objptr, ##35104
23740     F2 FA 01 F6 | 	mov	result1, objptr
23744     00 E8 03 FF 
23748     00 FA 45 F5 | 	or	result1, ##131072000
2374c     44 00 00 FF 
23750     24 E5 05 F1 | 	add	objptr, ##35108
23754     F2 FA 61 FC | 	wrlong	result1, objptr
23758     44 00 00 FF 
2375c     24 E5 85 F1 | 	sub	objptr, ##35108
23760     F2 FA 01 F6 | 	mov	result1, objptr
23764     B5 FA 25 F4 | 	bith	result1, #181
23768     44 00 00 FF 
2376c     28 E5 05 F1 | 	add	objptr, ##35112
23770     F2 FA 61 FC | 	wrlong	result1, objptr
23774     44 00 00 FF 
23778     28 E5 85 F1 | 	sub	objptr, ##35112
2377c     F2 FA 01 F6 | 	mov	result1, objptr
23780     D4 FA 25 F4 | 	bith	result1, #212
23784     44 00 00 FF 
23788     2C E5 05 F1 | 	add	objptr, ##35116
2378c     F2 FA 61 FC | 	wrlong	result1, objptr
23790     44 00 00 FF 
23794     2C E5 85 F1 | 	sub	objptr, ##35116
23798     F2 FA 01 F6 | 	mov	result1, objptr
2379c     1B FA 25 F4 | 	bith	result1, #27
237a0     44 00 00 FF 
237a4     30 E5 05 F1 | 	add	objptr, ##35120
237a8     F2 FA 61 FC | 	wrlong	result1, objptr
237ac     44 00 00 FF 
237b0     30 E5 85 F1 | 	sub	objptr, ##35120
237b4     F2 FA 01 F6 | 	mov	result1, objptr
237b8     00 08 04 FF 
237bc     00 FA 45 F5 | 	or	result1, ##135266304
237c0     44 00 00 FF 
237c4     34 E5 05 F1 | 	add	objptr, ##35124
237c8     F2 FA 61 FC | 	wrlong	result1, objptr
237cc     44 00 00 FF 
237d0     34 E5 85 F1 | 	sub	objptr, ##35124
237d4     F2 FA 01 F6 | 	mov	result1, objptr
237d8     00 10 04 FF 
237dc     00 FA 45 F5 | 	or	result1, ##136314880
237e0     44 00 00 FF 
237e4     3C E5 05 F1 | 	add	objptr, ##35132
237e8     F2 FA 61 FC | 	wrlong	result1, objptr
237ec     44 00 00 FF 
237f0     3C E5 85 F1 | 	sub	objptr, ##35132
237f4     F2 FA 01 F6 | 	mov	result1, objptr
237f8     00 18 04 FF 
237fc     00 FA 45 F5 | 	or	result1, ##137363456
23800     44 00 00 FF 
23804     40 E5 05 F1 | 	add	objptr, ##35136
23808     F2 FA 61 FC | 	wrlong	result1, objptr
2380c     44 00 00 FF 
23810     40 E5 85 F1 | 	sub	objptr, ##35136
23814     F2 FA 01 F6 | 	mov	result1, objptr
23818     00 20 04 FF 
2381c     00 FA 45 F5 | 	or	result1, ##138412032
23820     44 00 00 FF 
23824     44 E5 05 F1 | 	add	objptr, ##35140
23828     F2 FA 61 FC | 	wrlong	result1, objptr
2382c     44 00 00 FF 
23830     44 E5 85 F1 | 	sub	objptr, ##35140
23834     F2 FA 01 F6 | 	mov	result1, objptr
23838     00 28 04 FF 
2383c     00 FA 45 F5 | 	or	result1, ##139460608
23840     44 00 00 FF 
23844     38 E5 05 F1 | 	add	objptr, ##35128
23848     F2 FA 61 FC | 	wrlong	result1, objptr
2384c     44 00 00 FF 
23850     38 E5 85 F1 | 	sub	objptr, ##35128
23854     F2 FA 01 F6 | 	mov	result1, objptr
23858     00 30 04 FF 
2385c     00 FA 45 F5 | 	or	result1, ##140509184
23860     44 00 00 FF 
23864     48 E5 05 F1 | 	add	objptr, ##35144
23868     F2 FA 61 FC | 	wrlong	result1, objptr
2386c     44 00 00 FF 
23870     48 E5 85 F1 | 	sub	objptr, ##35144
23874     F2 FA 01 F6 | 	mov	result1, objptr
23878     00 38 04 FF 
2387c     00 FA 45 F5 | 	or	result1, ##141557760
23880     44 00 00 FF 
23884     7C E5 05 F1 | 	add	objptr, ##35196
23888     F2 FA 61 FC | 	wrlong	result1, objptr
2388c     44 00 00 FF 
23890     7C E5 85 F1 | 	sub	objptr, ##35196
23894     F2 FA 01 F6 | 	mov	result1, objptr
23898     00 40 04 FF 
2389c     00 FA 45 F5 | 	or	result1, ##142606336
238a0     44 00 00 FF 
238a4     74 E5 05 F1 | 	add	objptr, ##35188
238a8     F2 FA 61 FC | 	wrlong	result1, objptr
238ac     44 00 00 FF 
238b0     74 E5 85 F1 | 	sub	objptr, ##35188
238b4     F2 FA 01 F6 | 	mov	result1, objptr
238b8     00 48 04 FF 
238bc     00 FA 45 F5 | 	or	result1, ##143654912
238c0     44 00 00 FF 
238c4     4C E5 05 F1 | 	add	objptr, ##35148
238c8     F2 FA 61 FC | 	wrlong	result1, objptr
238cc     44 00 00 FF 
238d0     4C E5 85 F1 | 	sub	objptr, ##35148
238d4     F2 FA 01 F6 | 	mov	result1, objptr
238d8     00 50 04 FF 
238dc     00 FA 45 F5 | 	or	result1, ##144703488
238e0     44 00 00 FF 
238e4     50 E5 05 F1 | 	add	objptr, ##35152
238e8     F2 FA 61 FC | 	wrlong	result1, objptr
238ec     44 00 00 FF 
238f0     50 E5 85 F1 | 	sub	objptr, ##35152
238f4     F2 FA 01 F6 | 	mov	result1, objptr
238f8     00 58 04 FF 
238fc     00 FA 45 F5 | 	or	result1, ##145752064
23900     44 00 00 FF 
23904     6C E5 05 F1 | 	add	objptr, ##35180
23908     F2 FA 61 FC | 	wrlong	result1, objptr
2390c     44 00 00 FF 
23910     6C E5 85 F1 | 	sub	objptr, ##35180
23914     F2 FA 01 F6 | 	mov	result1, objptr
23918     00 60 04 FF 
2391c     00 FA 45 F5 | 	or	result1, ##146800640
23920     44 00 00 FF 
23924     70 E5 05 F1 | 	add	objptr, ##35184
23928     F2 FA 61 FC | 	wrlong	result1, objptr
2392c     44 00 00 FF 
23930     70 E5 85 F1 | 	sub	objptr, ##35184
23934     F2 FA 01 F6 | 	mov	result1, objptr
23938     00 68 04 FF 
2393c     00 FA 45 F5 | 	or	result1, ##147849216
23940     44 00 00 FF 
23944     8C E5 05 F1 | 	add	objptr, ##35212
23948     F2 FA 61 FC | 	wrlong	result1, objptr
2394c     44 00 00 FF 
23950     8C E5 85 F1 | 	sub	objptr, ##35212
23954     F2 FA 01 F6 | 	mov	result1, objptr
23958     00 70 04 FF 
2395c     00 FA 45 F5 | 	or	result1, ##148897792
23960     44 00 00 FF 
23964     88 E5 05 F1 | 	add	objptr, ##35208
23968     F2 FA 61 FC | 	wrlong	result1, objptr
2396c     44 00 00 FF 
23970     88 E5 85 F1 | 	sub	objptr, ##35208
23974     F2 FA 01 F6 | 	mov	result1, objptr
23978     00 78 04 FF 
2397c     00 FA 45 F5 | 	or	result1, ##149946368
23980     44 00 00 FF 
23984     98 E5 05 F1 | 	add	objptr, ##35224
23988     F2 FA 61 FC | 	wrlong	result1, objptr
2398c     44 00 00 FF 
23990     98 E5 85 F1 | 	sub	objptr, ##35224
23994     F2 FA 01 F6 | 	mov	result1, objptr
23998     00 80 04 FF 
2399c     00 FA 45 F5 | 	or	result1, ##150994944
239a0     44 00 00 FF 
239a4     64 E5 05 F1 | 	add	objptr, ##35172
239a8     F2 FA 61 FC | 	wrlong	result1, objptr
239ac     44 00 00 FF 
239b0     64 E5 85 F1 | 	sub	objptr, ##35172
239b4     F2 FA 01 F6 | 	mov	result1, objptr
239b8     00 88 04 FF 
239bc     00 FA 45 F5 | 	or	result1, ##152043520
239c0     44 00 00 FF 
239c4     94 E5 05 F1 | 	add	objptr, ##35220
239c8     F2 FA 61 FC | 	wrlong	result1, objptr
239cc     44 00 00 FF 
239d0     94 E5 85 F1 | 	sub	objptr, ##35220
239d4     F2 FA 01 F6 | 	mov	result1, objptr
239d8     00 90 04 FF 
239dc     00 FA 45 F5 | 	or	result1, ##153092096
239e0     44 00 00 FF 
239e4     84 E5 05 F1 | 	add	objptr, ##35204
239e8     F2 FA 61 FC | 	wrlong	result1, objptr
239ec     44 00 00 FF 
239f0     84 E5 85 F1 | 	sub	objptr, ##35204
239f4     F2 FA 01 F6 | 	mov	result1, objptr
239f8     00 98 04 FF 
239fc     00 FA 45 F5 | 	or	result1, ##154140672
23a00     43 00 00 FF 
23a04     34 E5 05 F1 | 	add	objptr, ##34612
23a08     F2 FA 61 FC | 	wrlong	result1, objptr
23a0c     43 00 00 FF 
23a10     34 E5 85 F1 | 	sub	objptr, ##34612
23a14     F2 FA 01 F6 | 	mov	result1, objptr
23a18     00 A0 04 FF 
23a1c     00 FA 45 F5 | 	or	result1, ##155189248
23a20     44 00 00 FF 
23a24     54 E5 05 F1 | 	add	objptr, ##35156
23a28     F2 FA 61 FC | 	wrlong	result1, objptr
23a2c     44 00 00 FF 
23a30     54 E5 85 F1 | 	sub	objptr, ##35156
23a34     F2 FA 01 F6 | 	mov	result1, objptr
23a38     00 08 01 FF 
23a3c     00 FA 45 F5 | 	or	result1, ##34603008
23a40     44 00 00 FF 
23a44     5C E5 05 F1 | 	add	objptr, ##35164
23a48     F2 FA 61 FC | 	wrlong	result1, objptr
23a4c     44 00 00 FF 
23a50     5C E5 85 F1 | 	sub	objptr, ##35164
23a54     F2 FA 01 F6 | 	mov	result1, objptr
23a58     00 A8 04 FF 
23a5c     00 FA 45 F5 | 	or	result1, ##156237824
23a60     44 00 00 FF 
23a64     58 E5 05 F1 | 	add	objptr, ##35160
23a68     F2 FA 61 FC | 	wrlong	result1, objptr
23a6c     44 00 00 FF 
23a70     58 E5 85 F1 | 	sub	objptr, ##35160
23a74     F2 FA 01 F6 | 	mov	result1, objptr
23a78     00 B0 04 FF 
23a7c     00 FA 45 F5 | 	or	result1, ##157286400
23a80     44 00 00 FF 
23a84     9C E5 05 F1 | 	add	objptr, ##35228
23a88     F2 FA 61 FC | 	wrlong	result1, objptr
23a8c     44 00 00 FF 
23a90     9C E5 85 F1 | 	sub	objptr, ##35228
23a94     F2 FA 01 F6 | 	mov	result1, objptr
23a98     00 B8 04 FF 
23a9c     00 FA 45 F5 | 	or	result1, ##158334976
23aa0     44 00 00 FF 
23aa4     A0 E5 05 F1 | 	add	objptr, ##35232
23aa8     F2 FA 61 FC | 	wrlong	result1, objptr
23aac     44 00 00 FF 
23ab0     A0 E5 85 F1 | 	sub	objptr, ##35232
23ab4     F2 FA 01 F6 | 	mov	result1, objptr
23ab8     00 C0 04 FF 
23abc     00 FA 45 F5 | 	or	result1, ##159383552
23ac0     44 00 00 FF 
23ac4     A4 E5 05 F1 | 	add	objptr, ##35236
23ac8     F2 FA 61 FC | 	wrlong	result1, objptr
23acc     44 00 00 FF 
23ad0     A4 E5 85 F1 | 	sub	objptr, ##35236
23ad4     F2 FA 01 F6 | 	mov	result1, objptr
23ad8     00 C8 04 FF 
23adc     00 FA 45 F5 | 	or	result1, ##160432128
23ae0     44 00 00 FF 
23ae4     A8 E5 05 F1 | 	add	objptr, ##35240
23ae8     F2 FA 61 FC | 	wrlong	result1, objptr
23aec     44 00 00 FF 
23af0     A8 E5 85 F1 | 	sub	objptr, ##35240
23af4     F2 FA 01 F6 | 	mov	result1, objptr
23af8     00 D0 04 FF 
23afc     00 FA 45 F5 | 	or	result1, ##161480704
23b00     44 00 00 FF 
23b04     B0 E5 05 F1 | 	add	objptr, ##35248
23b08     F2 FA 61 FC | 	wrlong	result1, objptr
23b0c     44 00 00 FF 
23b10     B0 E5 85 F1 | 	sub	objptr, ##35248
23b14     F2 FA 01 F6 | 	mov	result1, objptr
23b18     00 D8 04 FF 
23b1c     00 FA 45 F5 | 	or	result1, ##162529280
23b20     44 00 00 FF 
23b24     B4 E5 05 F1 | 	add	objptr, ##35252
23b28     F2 FA 61 FC | 	wrlong	result1, objptr
23b2c     44 00 00 FF 
23b30     B4 E5 85 F1 | 	sub	objptr, ##35252
23b34     F2 FA 01 F6 | 	mov	result1, objptr
23b38     00 E0 04 FF 
23b3c     00 FA 45 F5 | 	or	result1, ##163577856
23b40     44 00 00 FF 
23b44     B8 E5 05 F1 | 	add	objptr, ##35256
23b48     F2 FA 61 FC | 	wrlong	result1, objptr
23b4c     44 00 00 FF 
23b50     B8 E5 85 F1 | 	sub	objptr, ##35256
23b54     F2 FA 01 F6 | 	mov	result1, objptr
23b58     00 E8 04 FF 
23b5c     00 FA 45 F5 | 	or	result1, ##164626432
23b60     44 00 00 FF 
23b64     D8 E5 05 F1 | 	add	objptr, ##35288
23b68     F2 FA 61 FC | 	wrlong	result1, objptr
23b6c     44 00 00 FF 
23b70     D8 E5 85 F1 | 	sub	objptr, ##35288
23b74     F2 FA 01 F6 | 	mov	result1, objptr
23b78     00 F0 04 FF 
23b7c     00 FA 45 F5 | 	or	result1, ##165675008
23b80     44 00 00 FF 
23b84     D4 E5 05 F1 | 	add	objptr, ##35284
23b88     F2 FA 61 FC | 	wrlong	result1, objptr
23b8c     44 00 00 FF 
23b90     D4 E5 85 F1 | 	sub	objptr, ##35284
23b94     F2 FA 01 F6 | 	mov	result1, objptr
23b98     00 F8 04 FF 
23b9c     00 FA 45 F5 | 	or	result1, ##166723584
23ba0     44 00 00 FF 
23ba4     90 E5 05 F1 | 	add	objptr, ##35216
23ba8     F2 FA 61 FC | 	wrlong	result1, objptr
23bac     44 00 00 FF 
23bb0     90 E5 85 F1 | 	sub	objptr, ##35216
23bb4     F2 FA 01 F6 | 	mov	result1, objptr
23bb8     00 00 05 FF 
23bbc     00 FA 45 F5 | 	or	result1, ##167772160
23bc0     44 00 00 FF 
23bc4     80 E5 05 F1 | 	add	objptr, ##35200
23bc8     F2 FA 61 FC | 	wrlong	result1, objptr
23bcc     44 00 00 FF 
23bd0     80 E5 85 F1 | 	sub	objptr, ##35200
23bd4     F2 FA 01 F6 | 	mov	result1, objptr
23bd8     00 08 05 FF 
23bdc     00 FA 45 F5 | 	or	result1, ##168820736
23be0     44 00 00 FF 
23be4     BC E5 05 F1 | 	add	objptr, ##35260
23be8     F2 FA 61 FC | 	wrlong	result1, objptr
23bec     44 00 00 FF 
23bf0     BC E5 85 F1 | 	sub	objptr, ##35260
23bf4     F2 FA 01 F6 | 	mov	result1, objptr
23bf8     00 10 05 FF 
23bfc     00 FA 45 F5 | 	or	result1, ##169869312
23c00     44 00 00 FF 
23c04     C0 E5 05 F1 | 	add	objptr, ##35264
23c08     F2 FA 61 FC | 	wrlong	result1, objptr
23c0c     44 00 00 FF 
23c10     C0 E5 85 F1 | 	sub	objptr, ##35264
23c14     F2 FA 01 F6 | 	mov	result1, objptr
23c18     00 18 05 FF 
23c1c     00 FA 45 F5 | 	or	result1, ##170917888
23c20     44 00 00 FF 
23c24     C4 E5 05 F1 | 	add	objptr, ##35268
23c28     F2 FA 61 FC | 	wrlong	result1, objptr
23c2c     44 00 00 FF 
23c30     C4 E5 85 F1 | 	sub	objptr, ##35268
23c34     F2 FA 01 F6 | 	mov	result1, objptr
23c38     00 20 05 FF 
23c3c     00 FA 45 F5 | 	or	result1, ##171966464
23c40     44 00 00 FF 
23c44     C8 E5 05 F1 | 	add	objptr, ##35272
23c48     F2 FA 61 FC | 	wrlong	result1, objptr
23c4c     44 00 00 FF 
23c50     C8 E5 85 F1 | 	sub	objptr, ##35272
23c54     F2 FA 01 F6 | 	mov	result1, objptr
23c58     00 28 05 FF 
23c5c     00 FA 45 F5 | 	or	result1, ##173015040
23c60     44 00 00 FF 
23c64     CC E5 05 F1 | 	add	objptr, ##35276
23c68     F2 FA 61 FC | 	wrlong	result1, objptr
23c6c     44 00 00 FF 
23c70     CC E5 85 F1 | 	sub	objptr, ##35276
23c74     F2 FA 01 F6 | 	mov	result1, objptr
23c78     00 30 05 FF 
23c7c     00 FA 45 F5 | 	or	result1, ##174063616
23c80     44 00 00 FF 
23c84     E4 E5 05 F1 | 	add	objptr, ##35300
23c88     F2 FA 61 FC | 	wrlong	result1, objptr
23c8c     44 00 00 FF 
23c90     E4 E5 85 F1 | 	sub	objptr, ##35300
23c94     F2 FA 01 F6 | 	mov	result1, objptr
23c98     00 38 05 FF 
23c9c     00 FA 45 F5 | 	or	result1, ##175112192
23ca0     44 00 00 FF 
23ca4     D0 E5 05 F1 | 	add	objptr, ##35280
23ca8     F2 FA 61 FC | 	wrlong	result1, objptr
23cac     44 00 00 FF 
23cb0     D0 E5 85 F1 | 	sub	objptr, ##35280
23cb4     F2 FA 01 F6 | 	mov	result1, objptr
23cb8     00 40 05 FF 
23cbc     00 FA 45 F5 | 	or	result1, ##176160768
23cc0     44 00 00 FF 
23cc4     DC E5 05 F1 | 	add	objptr, ##35292
23cc8     F2 FA 61 FC | 	wrlong	result1, objptr
23ccc     44 00 00 FF 
23cd0     DC E5 85 F1 | 	sub	objptr, ##35292
23cd4     F2 FA 01 F6 | 	mov	result1, objptr
23cd8     00 48 05 FF 
23cdc     00 FA 45 F5 | 	or	result1, ##177209344
23ce0     44 00 00 FF 
23ce4     E0 E5 05 F1 | 	add	objptr, ##35296
23ce8     F2 FA 61 FC | 	wrlong	result1, objptr
23cec     44 00 00 FF 
23cf0     E0 E5 85 F1 | 	sub	objptr, ##35296
23cf4     F2 FA 01 F6 | 	mov	result1, objptr
23cf8     00 50 05 FF 
23cfc     00 FA 45 F5 | 	or	result1, ##178257920
23d00     44 00 00 FF 
23d04     E8 E5 05 F1 | 	add	objptr, ##35304
23d08     F2 FA 61 FC | 	wrlong	result1, objptr
23d0c     44 00 00 FF 
23d10     E8 E5 85 F1 | 	sub	objptr, ##35304
23d14     F2 FA 01 F6 | 	mov	result1, objptr
23d18     00 58 05 FF 
23d1c     00 FA 45 F5 | 	or	result1, ##179306496
23d20     44 00 00 FF 
23d24     EC E5 05 F1 | 	add	objptr, ##35308
23d28     F2 FA 61 FC | 	wrlong	result1, objptr
23d2c     44 00 00 FF 
23d30     EC E5 85 F1 | 	sub	objptr, ##35308
23d34     F2 FA 01 F6 | 	mov	result1, objptr
23d38     00 60 05 FF 
23d3c     00 FA 45 F5 | 	or	result1, ##180355072
23d40     44 00 00 FF 
23d44     04 E5 05 F1 | 	add	objptr, ##35076
23d48     F2 FA 61 FC | 	wrlong	result1, objptr
23d4c     44 00 00 FF 
23d50     04 E5 85 F1 | 	sub	objptr, ##35076
23d54                 | _init_commands_ret
23d54     2D 00 64 FD | 	ret
23d58                 | 
23d58                 | ' 
23d58                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
23d58                 | ' 
23d58                 | ' sub init_audio
23d58                 | _init_audio
23d58     06 4A 05 F6 | 	mov	COUNT_, #6
23d5c     A8 00 A0 FD | 	call	#pushregs_
23d60     00 C0 1F FF 
23d64     00 26 06 F6 | 	mov	local01, ##1065353216
23d68                 | ' 
23d68                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
23d68     00 28 06 F6 | 	mov	local02, #0
23d6c                 | LR__2730
23d6c     14 2B 02 F6 | 	mov	local03, local02
23d70     01 2A 66 F0 | 	shl	local03, #1
23d74     58 7F 23 FF 
23d78     00 2C 06 F6 | 	mov	local04, ##1191096320
23d7c     14 13 52 F6 | 	abs	arg01, local02 wc
23d80     1F 2E C6 C9 |  if_b	decod	local05, #31
23d84     00 2E 06 36 |  if_ae	mov	local05, #0
23d88     E0 70 B0 FD | 	call	#__system___float_fromuns
23d8c     17 FB 61 F5 | 	xor	result1, local05
23d90     FD 12 02 F6 | 	mov	arg01, result1
23d94     87 24 20 FF 
23d98     DB 15 06 F6 | 	mov	arg02, ##1078530011
23d9c     D0 74 B0 FD | 	call	#__system___float_mul
23da0     FD 12 02 F6 | 	mov	arg01, result1
23da4     00 00 22 FF 
23da8     00 14 06 F6 | 	mov	arg02, ##1140850688
23dac     C4 76 B0 FD | 	call	#__system___float_div
23db0     FD 12 02 F6 | 	mov	arg01, result1
23db4     1C 7E B0 FD | 	call	#__system____builtin_sinf
23db8     FD 14 02 F6 | 	mov	arg02, result1
23dbc     16 13 02 F6 | 	mov	arg01, local04
23dc0     AC 74 B0 FD | 	call	#__system___float_mul
23dc4     FD 12 02 F6 | 	mov	arg01, result1
23dc8     01 14 06 F6 | 	mov	arg02, #1
23dcc     68 79 B0 FD | 	call	#__system___float_tointeger
23dd0     FD 14 02 F6 | 	mov	arg02, result1
23dd4     15 13 02 F6 | 	mov	arg01, local03
23dd8     A8 0D B0 FD | 	call	#_psdpoke
23ddc     01 28 06 F1 | 	add	local02, #1
23de0     02 00 00 FF 
23de4     00 28 56 F2 | 	cmps	local02, ##1024 wc
23de8     80 FF 9F CD |  if_b	jmp	#LR__2730
23dec                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
23dec     00 28 06 F6 | 	mov	local02, #0
23df0                 | LR__2731
23df0     14 15 02 F6 | 	mov	arg02, local02
23df4     01 14 66 F0 | 	shl	arg02, #1
23df8     0B 12 C6 F9 | 	decod	arg01, #11
23dfc     0A 13 02 F1 | 	add	arg01, arg02
23e00     14 2D 02 F6 | 	mov	local04, local02
23e04     07 2C 66 F0 | 	shl	local04, #7
23e08     14 2D 82 F1 | 	sub	local04, local02
23e0c     C0 FF 7F FF 
23e10     00 15 06 F6 | 	mov	arg02, ##-32512
23e14     16 15 02 F1 | 	add	arg02, local04
23e18     68 0D B0 FD | 	call	#_psdpoke
23e1c     09 2C C6 F9 | 	decod	local04, #9
23e20     14 2D 02 F1 | 	add	local04, local02
23e24     01 2C 66 F0 | 	shl	local04, #1
23e28     0B 12 C6 F9 | 	decod	arg01, #11
23e2c     16 13 02 F1 | 	add	arg01, local04
23e30     14 2F 02 F6 | 	mov	local05, local02
23e34     07 2E 66 F0 | 	shl	local05, #7
23e38     14 2F 82 F1 | 	sub	local05, local02
23e3c     3F 00 00 FF 
23e40     00 15 06 F6 | 	mov	arg02, ##32512
23e44     17 15 82 F1 | 	sub	arg02, local05
23e48     38 0D B0 FD | 	call	#_psdpoke
23e4c     01 28 06 F1 | 	add	local02, #1
23e50     01 00 00 FF 
23e54     00 28 56 F2 | 	cmps	local02, ##512 wc
23e58     94 FF 9F CD |  if_b	jmp	#LR__2731
23e5c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
23e5c     00 28 06 F6 | 	mov	local02, #0
23e60                 | LR__2732
23e60     14 2F 02 F6 | 	mov	local05, local02
23e64     01 2E 66 F0 | 	shl	local05, #1
23e68     0C 12 C6 F9 | 	decod	arg01, #12
23e6c     17 13 02 F1 | 	add	arg01, local05
23e70     14 2F 02 F6 | 	mov	local05, local02
23e74     06 2E 66 F0 | 	shl	local05, #6
23e78     14 2F 82 F1 | 	sub	local05, local02
23e7c     C1 FF 7F FF 
23e80     00 14 06 F6 | 	mov	arg02, ##-32256
23e84     17 15 02 F1 | 	add	arg02, local05
23e88     F8 0C B0 FD | 	call	#_psdpoke
23e8c     01 28 06 F1 | 	add	local02, #1
23e90     02 00 00 FF 
23e94     00 28 56 F2 | 	cmps	local02, ##1024 wc
23e98     C4 FF 9F CD |  if_b	jmp	#LR__2732
23e9c                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
23e9c     00 28 06 F6 | 	mov	local02, #0
23ea0                 | LR__2733
23ea0     14 2F 02 F6 | 	mov	local05, local02
23ea4     01 2E 66 F0 | 	shl	local05, #1
23ea8     0C 00 00 FF 
23eac     00 12 06 F6 | 	mov	arg01, ##6144
23eb0     17 13 02 F1 | 	add	arg01, local05
23eb4     C0 FF 7F FF 
23eb8     A8 14 06 F6 | 	mov	arg02, ##-32600
23ebc     C4 0C B0 FD | 	call	#_psdpoke
23ec0     01 28 06 F1 | 	add	local02, #1
23ec4     80 28 56 F2 | 	cmps	local02, #128 wc
23ec8     D4 FF 9F CD |  if_b	jmp	#LR__2733
23ecc     80 28 06 F6 | 	mov	local02, #128
23ed0                 | LR__2734
23ed0     14 2F 02 F6 | 	mov	local05, local02
23ed4     01 2E 66 F0 | 	shl	local05, #1
23ed8     0C 00 00 FF 
23edc     00 12 06 F6 | 	mov	arg01, ##6144
23ee0     17 13 02 F1 | 	add	arg01, local05
23ee4     3F 00 00 FF 
23ee8     58 15 06 F6 | 	mov	arg02, ##32600
23eec     94 0C B0 FD | 	call	#_psdpoke
23ef0     01 28 06 F1 | 	add	local02, #1
23ef4     02 00 00 FF 
23ef8     00 28 16 F2 | 	cmp	local02, ##1024 wc
23efc     D0 FF 9F CD |  if_b	jmp	#LR__2734
23f00                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
23f00     00 28 06 F6 | 	mov	local02, #0
23f04                 | LR__2735
23f04     14 2F 02 F6 | 	mov	local05, local02
23f08     01 2E 66 F0 | 	shl	local05, #1
23f0c     0D 12 C6 F9 | 	decod	arg01, #13
23f10     17 13 02 F1 | 	add	arg01, local05
23f14     C0 FF 7F FF 
23f18     A8 14 06 F6 | 	mov	arg02, ##-32600
23f1c     64 0C B0 FD | 	call	#_psdpoke
23f20     01 28 06 F1 | 	add	local02, #1
23f24     01 00 00 FF 
23f28     00 28 56 F2 | 	cmps	local02, ##512 wc
23f2c     D4 FF 9F CD |  if_b	jmp	#LR__2735
23f30     09 28 C6 F9 | 	decod	local02, #9
23f34                 | LR__2736
23f34     14 2F 02 F6 | 	mov	local05, local02
23f38     01 2E 66 F0 | 	shl	local05, #1
23f3c     0D 12 C6 F9 | 	decod	arg01, #13
23f40     17 13 02 F1 | 	add	arg01, local05
23f44     3F 00 00 FF 
23f48     58 15 06 F6 | 	mov	arg02, ##32600
23f4c     34 0C B0 FD | 	call	#_psdpoke
23f50     01 28 06 F1 | 	add	local02, #1
23f54     02 00 00 FF 
23f58     00 28 16 F2 | 	cmp	local02, ##1024 wc
23f5c     D4 FF 9F CD |  if_b	jmp	#LR__2736
23f60                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
23f60     00 28 06 F6 | 	mov	local02, #0
23f64                 | LR__2737
23f64     14 2F 02 F6 | 	mov	local05, local02
23f68     01 2E 66 F0 | 	shl	local05, #1
23f6c     14 00 00 FF 
23f70     00 12 06 F6 | 	mov	arg01, ##10240
23f74     17 13 02 F1 | 	add	arg01, local05
23f78     C0 FF 7F FF 
23f7c     A8 14 06 F6 | 	mov	arg02, ##-32600
23f80     00 0C B0 FD | 	call	#_psdpoke
23f84     01 28 06 F1 | 	add	local02, #1
23f88     00 29 56 F2 | 	cmps	local02, #256 wc
23f8c     D4 FF 9F CD |  if_b	jmp	#LR__2737
23f90     00 29 06 F6 | 	mov	local02, #256
23f94                 | LR__2738
23f94     14 2F 02 F6 | 	mov	local05, local02
23f98     01 2E 66 F0 | 	shl	local05, #1
23f9c     14 00 00 FF 
23fa0     00 12 06 F6 | 	mov	arg01, ##10240
23fa4     17 13 02 F1 | 	add	arg01, local05
23fa8     3F 00 00 FF 
23fac     58 15 06 F6 | 	mov	arg02, ##32600
23fb0     D0 0B B0 FD | 	call	#_psdpoke
23fb4     01 28 06 F1 | 	add	local02, #1
23fb8     02 00 00 FF 
23fbc     00 28 16 F2 | 	cmp	local02, ##1024 wc
23fc0     D0 FF 9F CD |  if_b	jmp	#LR__2738
23fc4                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
23fc4     18 00 00 FF 
23fc8     00 28 06 F6 | 	mov	local02, ##12288
23fcc                 | LR__2739
23fcc     14 13 02 F6 | 	mov	arg01, local02
23fd0     00 14 06 F6 | 	mov	arg02, #0
23fd4     64 0B B0 FD | 	call	#_pslpoke
23fd8     04 28 06 F1 | 	add	local02, #4
23fdc     77 00 00 FF 
23fe0     FD 29 56 F2 | 	cmps	local02, ##61437 wc
23fe4     E4 FF 9F CD |  if_b	jmp	#LR__2739
23fe8                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
23fe8     00 28 06 F6 | 	mov	local02, #0
23fec                 | LR__2740
23fec     14 2F 02 F6 | 	mov	local05, local02
23ff0     01 2E 66 F0 | 	shl	local05, #1
23ff4     78 00 00 FF 
23ff8     00 2A 06 F6 | 	mov	local03, ##61440
23ffc     17 2B 02 F1 | 	add	local03, local05
24000     12 00 00 FF 
24004     BA EA 05 F1 | 	add	ptr__dat__, ##9402
24008     F5 12 02 F6 | 	mov	arg01, ptr__dat__
2400c     12 00 00 FF 
24010     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
24014     10 12 06 F1 | 	add	arg01, #16
24018     14 15 02 F6 | 	mov	arg02, local02
2401c     01 14 66 F0 | 	shl	arg02, #1
24020     0A 13 02 F1 | 	add	arg01, arg02
24024     09 15 E2 FA | 	rdword	arg02, arg01
24028     15 13 02 F6 | 	mov	arg01, local03
2402c     54 0B B0 FD | 	call	#_psdpoke
24030     01 28 06 F1 | 	add	local02, #1
24034     02 00 00 FF 
24038     00 28 56 F2 | 	cmps	local02, ##1024 wc
2403c     AC FF 9F CD |  if_b	jmp	#LR__2740
24040                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
24040     00 28 06 F6 | 	mov	local02, #0
24044                 | LR__2741
24044     14 2F 02 F6 | 	mov	local05, local02
24048     01 2E 66 F0 | 	shl	local05, #1
2404c     7C 00 00 FF 
24050     00 2A 06 F6 | 	mov	local03, ##63488
24054     17 2B 02 F1 | 	add	local03, local05
24058     0E 00 00 FF 
2405c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
24060     F5 12 02 F6 | 	mov	arg01, ptr__dat__
24064     0E 00 00 FF 
24068     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
2406c     10 12 06 F1 | 	add	arg01, #16
24070     14 15 02 F6 | 	mov	arg02, local02
24074     01 14 66 F0 | 	shl	arg02, #1
24078     0A 13 02 F1 | 	add	arg01, arg02
2407c     09 15 E2 FA | 	rdword	arg02, arg01
24080     15 13 02 F6 | 	mov	arg01, local03
24084     FC 0A B0 FD | 	call	#_psdpoke
24088     01 28 06 F1 | 	add	local02, #1
2408c     02 00 00 FF 
24090     00 28 56 F2 | 	cmps	local02, ##1024 wc
24094     AC FF 9F CD |  if_b	jmp	#LR__2741
24098                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
24098     00 28 06 F6 | 	mov	local02, #0
2409c     0C 00 00 FF 
240a0     D8 E4 05 F1 | 	add	objptr, ##6360
240a4     97 18 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
240a8                 | LR__2742
240a8     14 2F 02 F6 | 	mov	local05, local02
240ac     01 2E 66 F0 | 	shl	local05, #1
240b0     F2 2E 02 F1 | 	add	local05, objptr
240b4     14 2B 02 F6 | 	mov	local03, local02
240b8     08 2A 66 F0 | 	shl	local03, #8
240bc     7F 00 00 FF 
240c0     00 31 06 F6 | 	mov	local06, ##65280
240c4     15 31 82 F1 | 	sub	local06, local03
240c8     17 31 52 FC | 	wrword	local06, local05
240cc     01 28 06 F1 | 	add	local02, #1
240d0     00 29 56 F2 | 	cmps	local02, #256 wc
240d4     D0 FF 9F CD |  if_b	jmp	#LR__2742
240d8                 | LR__2743
240d8     0C 00 00 FF 
240dc     D8 E4 85 F1 | 	sub	objptr, ##6360
240e0                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
240e0     00 28 06 F6 | 	mov	local02, #0
240e4                 | LR__2744
240e4     14 2F 02 F6 | 	mov	local05, local02
240e8     01 2E 66 F0 | 	shl	local05, #1
240ec     0D 00 00 FF 
240f0     D8 E4 05 F1 | 	add	objptr, ##6872
240f4     F2 2E 02 F1 | 	add	local05, objptr
240f8     80 BF 23 FF 
240fc     00 12 06 F6 | 	mov	arg01, ##1199505408
24100     13 15 02 F6 | 	mov	arg02, local01
24104     0D 00 00 FF 
24108     D8 E4 85 F1 | 	sub	objptr, ##6872
2410c     60 71 B0 FD | 	call	#__system___float_mul
24110     FD 12 02 F6 | 	mov	arg01, result1
24114     01 14 06 F6 | 	mov	arg02, #1
24118     1C 76 B0 FD | 	call	#__system___float_tointeger
2411c     17 FB 51 FC | 	wrword	result1, local05
24120     13 13 02 F6 | 	mov	arg01, local01
24124     CC BC 1F FF 
24128     9A 15 06 F6 | 	mov	arg02, ##1064933786
2412c     40 71 B0 FD | 	call	#__system___float_mul
24130     FD 26 02 F6 | 	mov	local01, result1
24134     01 28 06 F1 | 	add	local02, #1
24138     00 29 56 F2 | 	cmps	local02, #256 wc
2413c     A4 FF 9F CD |  if_b	jmp	#LR__2744
24140     0E 00 00 FF 
24144     D6 E4 05 F1 | 	add	objptr, ##7382
24148     F2 00 58 FC | 	wrword	#0, objptr
2414c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
2414c     00 28 06 F6 | 	mov	local02, #0
24150     02 E4 05 F1 | 	add	objptr, #2
24154     97 10 48 FB | 	callpa	#(@LR__2746-@LR__2745)>>2,fcache_load_ptr_
24158                 | LR__2745
24158     14 2F 02 F6 | 	mov	local05, local02
2415c     01 2E 66 F0 | 	shl	local05, #1
24160     F2 2E 02 F1 | 	add	local05, objptr
24164     7F 00 80 FF 
24168     17 01 5A FC | 	wrword	##65280, local05
2416c     01 28 06 F1 | 	add	local02, #1
24170     FF 28 56 F2 | 	cmps	local02, #255 wc
24174     E0 FF 9F CD |  if_b	jmp	#LR__2745
24178                 | LR__2746
24178     FE E5 05 F1 | 	add	objptr, #510
2417c     F2 00 58 FC | 	wrword	#0, objptr
24180                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
24180     00 28 06 F6 | 	mov	local02, #0
24184     02 E4 05 F1 | 	add	objptr, #2
24188     97 12 48 FB | 	callpa	#(@LR__2748-@LR__2747)>>2,fcache_load_ptr_
2418c                 | LR__2747
2418c     14 2F 02 F6 | 	mov	local05, local02
24190     01 2E 66 F0 | 	shl	local05, #1
24194     F2 2E 02 F1 | 	add	local05, objptr
24198     14 31 02 F6 | 	mov	local06, local02
2419c     0C 30 66 F0 | 	shl	local06, #12
241a0     17 31 52 FC | 	wrword	local06, local05
241a4     01 28 06 F1 | 	add	local02, #1
241a8     10 28 56 F2 | 	cmps	local02, #16 wc
241ac     DC FF 9F CD |  if_b	jmp	#LR__2747
241b0                 | LR__2748
241b0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
241b0     10 28 06 F6 | 	mov	local02, #16
241b4     97 10 48 FB | 	callpa	#(@LR__2750-@LR__2749)>>2,fcache_load_ptr_
241b8                 | LR__2749
241b8     14 2F 02 F6 | 	mov	local05, local02
241bc     01 2E 66 F0 | 	shl	local05, #1
241c0     F2 2E 02 F1 | 	add	local05, objptr
241c4     7F 00 80 FF 
241c8     17 01 5A FC | 	wrword	##65280, local05
241cc     01 28 06 F1 | 	add	local02, #1
241d0     F0 28 16 F2 | 	cmp	local02, #240 wc
241d4     E0 FF 9F CD |  if_b	jmp	#LR__2749
241d8                 | LR__2750
241d8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
241d8     F0 28 06 F6 | 	mov	local02, #240
241dc     97 14 48 FB | 	callpa	#(@LR__2752-@LR__2751)>>2,fcache_load_ptr_
241e0                 | LR__2751
241e0     14 2F 02 F6 | 	mov	local05, local02
241e4     01 2E 66 F0 | 	shl	local05, #1
241e8     F2 2E 02 F1 | 	add	local05, objptr
241ec     FF 2A 06 F6 | 	mov	local03, #255
241f0     14 2B 82 F1 | 	sub	local03, local02
241f4     0C 2A 66 F0 | 	shl	local03, #12
241f8     17 2B 52 FC | 	wrword	local03, local05
241fc     01 28 06 F1 | 	add	local02, #1
24200     00 29 16 F2 | 	cmp	local02, #256 wc
24204     D8 FF 9F CD |  if_b	jmp	#LR__2751
24208                 | LR__2752
24208                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
24208     00 28 06 F6 | 	mov	local02, #0
2420c     01 00 00 FF 
24210     00 E4 05 F1 | 	add	objptr, ##512
24214     97 12 48 FB | 	callpa	#(@LR__2754-@LR__2753)>>2,fcache_load_ptr_
24218                 | LR__2753
24218     14 2F 02 F6 | 	mov	local05, local02
2421c     01 2E 66 F0 | 	shl	local05, #1
24220     F2 2E 02 F1 | 	add	local05, objptr
24224     14 31 02 F6 | 	mov	local06, local02
24228     08 30 66 F0 | 	shl	local06, #8
2422c     17 31 52 FC | 	wrword	local06, local05
24230     01 28 06 F1 | 	add	local02, #1
24234     00 29 56 F2 | 	cmps	local02, #256 wc
24238     DC FF 9F CD |  if_b	jmp	#LR__2753
2423c                 | LR__2754
2423c     FE E5 05 F1 | 	add	objptr, #510
24240     F2 00 58 FC | 	wrword	#0, objptr
24244                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
24244     00 28 06 F6 | 	mov	local02, #0
24248     02 E4 05 F1 | 	add	objptr, #2
2424c     97 16 48 FB | 	callpa	#(@LR__2756-@LR__2755)>>2,fcache_load_ptr_
24250                 | LR__2755
24250     14 2F 02 F6 | 	mov	local05, local02
24254     01 2E 66 F0 | 	shl	local05, #1
24258     F2 2E 02 F1 | 	add	local05, objptr
2425c     14 31 02 F6 | 	mov	local06, local02
24260     04 30 66 F0 | 	shl	local06, #4
24264     14 31 02 F1 | 	add	local06, local02
24268     04 30 66 F0 | 	shl	local06, #4
2426c     17 31 52 FC | 	wrword	local06, local05
24270     01 28 06 F1 | 	add	local02, #1
24274     F0 28 56 F2 | 	cmps	local02, #240 wc
24278     D4 FF 9F CD |  if_b	jmp	#LR__2755
2427c                 | LR__2756
2427c     F0 28 06 F6 | 	mov	local02, #240
24280     97 14 48 FB | 	callpa	#(@LR__2758-@LR__2757)>>2,fcache_load_ptr_
24284                 | LR__2757
24284     14 2F 02 F6 | 	mov	local05, local02
24288     01 2E 66 F0 | 	shl	local05, #1
2428c     F2 2E 02 F1 | 	add	local05, objptr
24290     FF 2A 06 F6 | 	mov	local03, #255
24294     14 2B 82 F1 | 	sub	local03, local02
24298     0C 2A 66 F0 | 	shl	local03, #12
2429c     17 2B 52 FC | 	wrword	local03, local05
242a0     01 28 06 F1 | 	add	local02, #1
242a4     00 29 16 F2 | 	cmp	local02, #256 wc
242a8     D8 FF 9F CD |  if_b	jmp	#LR__2757
242ac                 | LR__2758
242ac                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
242ac     00 28 06 F6 | 	mov	local02, #0
242b0     01 00 00 FF 
242b4     00 E4 05 F1 | 	add	objptr, ##512
242b8     97 20 48 FB | 	callpa	#(@LR__2760-@LR__2759)>>2,fcache_load_ptr_
242bc                 | LR__2759
242bc     14 2F 02 F6 | 	mov	local05, local02
242c0     01 2E 66 F0 | 	shl	local05, #1
242c4     F2 2E 02 F1 | 	add	local05, objptr
242c8     14 31 02 F6 | 	mov	local06, local02
242cc     09 30 66 F0 | 	shl	local06, #9
242d0     17 31 52 FC | 	wrword	local06, local05
242d4     FF 2E 06 F6 | 	mov	local05, #255
242d8     14 2F 82 F1 | 	sub	local05, local02
242dc     01 2E 66 F0 | 	shl	local05, #1
242e0     F2 2E 02 F1 | 	add	local05, objptr
242e4     14 31 02 F6 | 	mov	local06, local02
242e8     09 30 66 F0 | 	shl	local06, #9
242ec     17 31 52 FC | 	wrword	local06, local05
242f0     01 28 06 F1 | 	add	local02, #1
242f4     80 28 56 F2 | 	cmps	local02, #128 wc
242f8     C0 FF 9F CD |  if_b	jmp	#LR__2759
242fc                 | LR__2760
242fc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
242fc     00 28 06 F6 | 	mov	local02, #0
24300     01 00 00 FF 
24304     00 E4 05 F1 | 	add	objptr, ##512
24308     97 12 48 FB | 	callpa	#(@LR__2762-@LR__2761)>>2,fcache_load_ptr_
2430c                 | LR__2761
2430c     14 2F 02 F6 | 	mov	local05, local02
24310     01 2E 66 F0 | 	shl	local05, #1
24314     F2 2E 02 F1 | 	add	local05, objptr
24318     14 31 02 F6 | 	mov	local06, local02
2431c     0D 30 66 F0 | 	shl	local06, #13
24320     17 31 52 FC | 	wrword	local06, local05
24324     01 28 06 F1 | 	add	local02, #1
24328     08 28 56 F2 | 	cmps	local02, #8 wc
2432c     DC FF 9F CD |  if_b	jmp	#LR__2761
24330                 | LR__2762
24330                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
24330     08 28 06 F6 | 	mov	local02, #8
24334     97 1A 48 FB | 	callpa	#(@LR__2764-@LR__2763)>>2,fcache_load_ptr_
24338                 | LR__2763
24338     14 2F 02 F6 | 	mov	local05, local02
2433c     01 2E 66 F0 | 	shl	local05, #1
24340     F2 2E 02 F1 | 	add	local05, objptr
24344     14 27 02 F6 | 	mov	local01, local02
24348     08 26 86 F1 | 	sub	local01, #8
2434c     0B 26 66 F0 | 	shl	local01, #11
24350     7F 00 00 FF 
24354     00 31 06 F6 | 	mov	local06, ##65280
24358     13 31 82 F1 | 	sub	local06, local01
2435c     17 31 52 FC | 	wrword	local06, local05
24360     01 28 06 F1 | 	add	local02, #1
24364     18 28 16 F2 | 	cmp	local02, #24 wc
24368     CC FF 9F CD |  if_b	jmp	#LR__2763
2436c                 | LR__2764
2436c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
2436c     18 28 06 F6 | 	mov	local02, #24
24370     97 10 48 FB | 	callpa	#(@LR__2766-@LR__2765)>>2,fcache_load_ptr_
24374                 | LR__2765
24374     14 2F 02 F6 | 	mov	local05, local02
24378     01 2E 66 F0 | 	shl	local05, #1
2437c     F2 2E 02 F1 | 	add	local05, objptr
24380     40 00 80 FF 
24384     17 01 58 FC | 	wrword	##32768, local05
24388     01 28 06 F1 | 	add	local02, #1
2438c     81 28 16 F2 | 	cmp	local02, #129 wc
24390     E0 FF 9F CD |  if_b	jmp	#LR__2765
24394                 | LR__2766
24394                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
24394     81 28 06 F6 | 	mov	local02, #129
24398     97 14 48 FB | 	callpa	#(@LR__2768-@LR__2767)>>2,fcache_load_ptr_
2439c                 | LR__2767
2439c     14 2F 02 F6 | 	mov	local05, local02
243a0     01 2E 66 F0 | 	shl	local05, #1
243a4     F2 2E 02 F1 | 	add	local05, objptr
243a8     FF 2A 06 F6 | 	mov	local03, #255
243ac     14 2B 82 F1 | 	sub	local03, local02
243b0     08 2A 66 F0 | 	shl	local03, #8
243b4     17 2B 52 FC | 	wrword	local03, local05
243b8     01 28 06 F1 | 	add	local02, #1
243bc     00 29 16 F2 | 	cmp	local02, #256 wc
243c0     D8 FF 9F CD |  if_b	jmp	#LR__2767
243c4                 | LR__2768
243c4     3F 00 00 FF 
243c8     42 E4 05 F1 | 	add	objptr, ##32322
243cc     F2 00 59 FC | 	wrword	#128, objptr
243d0     52 00 00 FF 
243d4     1A E5 85 F1 | 	sub	objptr, ##42266
243d8                 | ' for i=0 to 7
243d8     00 28 06 F6 | 	mov	local02, #0
243dc     97 9C 48 FB | 	callpa	#(@LR__2770-@LR__2769)>>2,fcache_load_ptr_
243e0                 | LR__2769
243e0     14 2F 02 F6 | 	mov	local05, local02
243e4     03 2E 66 F0 | 	shl	local05, #3
243e8     14 2F 82 F1 | 	sub	local05, local02
243ec     02 2E 66 F0 | 	shl	local05, #2
243f0     14 00 00 FF 
243f4     38 E5 05 F1 | 	add	objptr, ##10552
243f8     F2 2E 02 F1 | 	add	local05, objptr
243fc     00 EE A1 FF 
24400     17 01 68 FC | 	wrlong	##1138491392, local05
24404     14 2F 02 F6 | 	mov	local05, local02
24408     03 2E 66 F0 | 	shl	local05, #3
2440c     14 2F 82 F1 | 	sub	local05, local02
24410     02 2E 66 F0 | 	shl	local05, #2
24414     F2 2E 02 F1 | 	add	local05, objptr
24418     04 2E 06 F1 | 	add	local05, #4
2441c     17 29 42 FC | 	wrbyte	local02, local05
24420     14 2F 02 F6 | 	mov	local05, local02
24424     03 2E 66 F0 | 	shl	local05, #3
24428     14 2F 82 F1 | 	sub	local05, local02
2442c     02 2E 66 F0 | 	shl	local05, #2
24430     F2 2E 02 F1 | 	add	local05, objptr
24434     05 2E 06 F1 | 	add	local05, #5
24438     17 29 42 FC | 	wrbyte	local02, local05
2443c     14 2F 02 F6 | 	mov	local05, local02
24440     03 2E 66 F0 | 	shl	local05, #3
24444     14 2F 82 F1 | 	sub	local05, local02
24448     02 2E 66 F0 | 	shl	local05, #2
2444c     F2 2E 02 F1 | 	add	local05, objptr
24450     06 2E 06 F1 | 	add	local05, #6
24454     17 01 58 FC | 	wrword	#0, local05
24458     14 2F 02 F6 | 	mov	local05, local02
2445c     03 2E 66 F0 | 	shl	local05, #3
24460     14 2F 82 F1 | 	sub	local05, local02
24464     02 2E 66 F0 | 	shl	local05, #2
24468     F2 2E 02 F1 | 	add	local05, objptr
2446c     08 2E 06 F1 | 	add	local05, #8
24470     00 C0 9F FF 
24474     17 01 68 FC | 	wrlong	##1065353216, local05
24478     14 2F 02 F6 | 	mov	local05, local02
2447c     03 2E 66 F0 | 	shl	local05, #3
24480     14 2F 82 F1 | 	sub	local05, local02
24484     02 2E 66 F0 | 	shl	local05, #2
24488     F2 2E 02 F1 | 	add	local05, objptr
2448c     0C 2E 06 F1 | 	add	local05, #12
24490     00 40 A0 FF 
24494     17 01 68 FC | 	wrlong	##1082130432, local05
24498     14 2F 02 F6 | 	mov	local05, local02
2449c     03 2E 66 F0 | 	shl	local05, #3
244a0     14 2F 82 F1 | 	sub	local05, local02
244a4     02 2E 66 F0 | 	shl	local05, #2
244a8     F2 2E 02 F1 | 	add	local05, objptr
244ac     10 2E 06 F1 | 	add	local05, #16
244b0     17 01 68 FC | 	wrlong	#0, local05
244b4     14 2F 02 F6 | 	mov	local05, local02
244b8     03 2E 66 F0 | 	shl	local05, #3
244bc     14 2F 82 F1 | 	sub	local05, local02
244c0     02 2E 66 F0 | 	shl	local05, #2
244c4     F2 2E 02 F1 | 	add	local05, objptr
244c8     14 2E 06 F1 | 	add	local05, #20
244cc     17 FF 59 FC | 	wrword	#255, local05
244d0     14 2F 02 F6 | 	mov	local05, local02
244d4     03 2E 66 F0 | 	shl	local05, #3
244d8     14 2F 82 F1 | 	sub	local05, local02
244dc     02 2E 66 F0 | 	shl	local05, #2
244e0     F2 2E 02 F1 | 	add	local05, objptr
244e4     16 2E 06 F1 | 	add	local05, #22
244e8     17 01 58 FC | 	wrword	#0, local05
244ec     14 2F 02 F6 | 	mov	local05, local02
244f0     01 2E 66 F0 | 	shl	local05, #1
244f4     3D 00 00 FF 
244f8     D4 E5 05 F1 | 	add	objptr, ##31700
244fc     F2 2E 02 F1 | 	add	local05, objptr
24500     17 FF 59 FC | 	wrword	#255, local05
24504     01 28 06 F1 | 	add	local02, #1
24508     08 28 56 F2 | 	cmps	local02, #8 wc
2450c     52 00 00 FF 
24510     0C E5 85 F1 | 	sub	objptr, ##42252
24514     C8 FE 9F CD |  if_b	jmp	#LR__2769
24518                 | LR__2770
24518     00 6E 20 FF 
2451c     00 30 06 F6 | 	mov	local06, ##1088159744
24520                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
24520     03 2E 06 F6 | 	mov	local05, #3
24524                 | LR__2771
24524     18 13 02 F6 | 	mov	arg01, local06
24528     CE C3 1F FF 
2452c     7D 14 06 F6 | 	mov	arg02, ##1065852029
24530     3C 6D B0 FD | 	call	#__system___float_mul
24534     FD 30 02 F6 | 	mov	local06, result1
24538     FA 2F 6E FB | 	djnz	local05, #LR__2771
2453c     00 28 06 F6 | 	mov	local02, #0
24540                 | LR__2772
24540     14 2D 02 F6 | 	mov	local04, local02
24544     02 2C 66 F0 | 	shl	local04, #2
24548     14 00 00 FF 
2454c     D8 E4 05 F1 | 	add	objptr, ##10456
24550     F2 2C 02 F1 | 	add	local04, objptr
24554     16 31 62 FC | 	wrlong	local06, local04
24558     18 13 02 F6 | 	mov	arg01, local06
2455c     CE C3 1F FF 
24560     7D 14 06 F6 | 	mov	arg02, ##1065852029
24564     14 00 00 FF 
24568     D8 E4 85 F1 | 	sub	objptr, ##10456
2456c     00 6D B0 FD | 	call	#__system___float_mul
24570     FD 30 02 F6 | 	mov	local06, result1
24574     01 28 06 F1 | 	add	local02, #1
24578     0C 28 56 F2 | 	cmps	local02, #12 wc
2457c     C0 FF 9F CD |  if_b	jmp	#LR__2772
24580     14 00 00 FF 
24584     08 E5 05 F1 | 	add	objptr, ##10504
24588     F2 50 6B FC | 	wrlong	#424, objptr
2458c     04 E4 05 F1 | 	add	objptr, #4
24590     F2 20 6B FC | 	wrlong	#400, objptr
24594     04 E4 05 F1 | 	add	objptr, #4
24598     F2 F2 6A FC | 	wrlong	#377, objptr
2459c     04 E4 05 F1 | 	add	objptr, #4
245a0     F2 C8 6A FC | 	wrlong	#356, objptr
245a4     04 E4 05 F1 | 	add	objptr, #4
245a8     F2 A0 6A FC | 	wrlong	#336, objptr
245ac     04 E4 05 F1 | 	add	objptr, #4
245b0     F2 7A 6A FC | 	wrlong	#317, objptr
245b4     04 E4 05 F1 | 	add	objptr, #4
245b8     F2 58 6A FC | 	wrlong	#300, objptr
245bc     04 E4 05 F1 | 	add	objptr, #4
245c0     F2 36 6A FC | 	wrlong	#283, objptr
245c4     04 E4 05 F1 | 	add	objptr, #4
245c8     F2 16 6A FC | 	wrlong	#267, objptr
245cc     04 E4 05 F1 | 	add	objptr, #4
245d0     F2 F8 69 FC | 	wrlong	#252, objptr
245d4     04 E4 05 F1 | 	add	objptr, #4
245d8     F2 DC 69 FC | 	wrlong	#238, objptr
245dc     04 E4 05 F1 | 	add	objptr, #4
245e0     F2 C0 69 FC | 	wrlong	#224, objptr
245e4     3D 00 00 FF 
245e8     E6 E5 05 F1 | 	add	objptr, ##31718
245ec     F2 00 59 FC | 	wrword	#128, objptr
245f0     02 E4 85 F1 | 	sub	objptr, #2
245f4     F2 00 59 FC | 	wrword	#128, objptr
245f8     52 00 00 FF 
245fc     18 E5 85 F1 | 	sub	objptr, ##42264
24600     A7 F0 03 F6 | 	mov	ptra, fp
24604     B2 00 A0 FD | 	call	#popregs_
24608                 | _init_audio_ret
24608     2D 00 64 FD | 	ret
2460c                 | 
2460c                 | ' 
2460c                 | ' '------------------- Error messages
2460c                 | ' 
2460c                 | ' sub init_error_strings
2460c                 | _init_error_strings
2460c     C5 01 00 FF 
24610     E5 01 06 F6 | 	mov	_var01, ##@LR__6182
24614     45 00 00 FF 
24618     9C E4 05 F1 | 	add	objptr, ##35484
2461c     F2 00 62 FC | 	wrlong	_var01, objptr
24620     C5 01 00 FF 
24624     E6 01 06 F6 | 	mov	_var01, ##@LR__6183
24628     04 E4 05 F1 | 	add	objptr, #4
2462c     F2 00 62 FC | 	wrlong	_var01, objptr
24630     C6 01 00 FF 
24634     0A 00 06 F6 | 	mov	_var01, ##@LR__6184
24638     04 E4 05 F1 | 	add	objptr, #4
2463c     F2 00 62 FC | 	wrlong	_var01, objptr
24640     C6 01 00 FF 
24644     2A 00 06 F6 | 	mov	_var01, ##@LR__6185
24648     04 E4 05 F1 | 	add	objptr, #4
2464c     F2 00 62 FC | 	wrlong	_var01, objptr
24650     C6 01 00 FF 
24654     43 00 06 F6 | 	mov	_var01, ##@LR__6186
24658     04 E4 05 F1 | 	add	objptr, #4
2465c     F2 00 62 FC | 	wrlong	_var01, objptr
24660     C6 01 00 FF 
24664     5E 00 06 F6 | 	mov	_var01, ##@LR__6187
24668     04 E4 05 F1 | 	add	objptr, #4
2466c     F2 00 62 FC | 	wrlong	_var01, objptr
24670     C6 01 00 FF 
24674     7F 00 06 F6 | 	mov	_var01, ##@LR__6188
24678     04 E4 05 F1 | 	add	objptr, #4
2467c     F2 00 62 FC | 	wrlong	_var01, objptr
24680     C6 01 00 FF 
24684     AC 00 06 F6 | 	mov	_var01, ##@LR__6189
24688     04 E4 05 F1 | 	add	objptr, #4
2468c     F2 00 62 FC | 	wrlong	_var01, objptr
24690     C6 01 00 FF 
24694     D6 00 06 F6 | 	mov	_var01, ##@LR__6190
24698     04 E4 05 F1 | 	add	objptr, #4
2469c     F2 00 62 FC | 	wrlong	_var01, objptr
246a0     C6 01 00 FF 
246a4     EE 00 06 F6 | 	mov	_var01, ##@LR__6191
246a8     04 E4 05 F1 | 	add	objptr, #4
246ac     F2 00 62 FC | 	wrlong	_var01, objptr
246b0     C6 01 00 FF 
246b4     0E 01 06 F6 | 	mov	_var01, ##@LR__6192
246b8     04 E4 05 F1 | 	add	objptr, #4
246bc     F2 00 62 FC | 	wrlong	_var01, objptr
246c0     C6 01 00 FF 
246c4     24 01 06 F6 | 	mov	_var01, ##@LR__6193
246c8     04 E4 05 F1 | 	add	objptr, #4
246cc     F2 00 62 FC | 	wrlong	_var01, objptr
246d0     C6 01 00 FF 
246d4     41 01 06 F6 | 	mov	_var01, ##@LR__6194
246d8     04 E4 05 F1 | 	add	objptr, #4
246dc     F2 00 62 FC | 	wrlong	_var01, objptr
246e0     C6 01 00 FF 
246e4     64 01 06 F6 | 	mov	_var01, ##@LR__6195
246e8     04 E4 05 F1 | 	add	objptr, #4
246ec     F2 00 62 FC | 	wrlong	_var01, objptr
246f0     C6 01 00 FF 
246f4     8A 01 06 F6 | 	mov	_var01, ##@LR__6196
246f8     04 E4 05 F1 | 	add	objptr, #4
246fc     F2 00 62 FC | 	wrlong	_var01, objptr
24700     C6 01 00 FF 
24704     A5 01 06 F6 | 	mov	_var01, ##@LR__6197
24708     04 E4 05 F1 | 	add	objptr, #4
2470c     F2 00 62 FC | 	wrlong	_var01, objptr
24710     C6 01 00 FF 
24714     B5 01 06 F6 | 	mov	_var01, ##@LR__6198
24718     04 E4 05 F1 | 	add	objptr, #4
2471c     F2 00 62 FC | 	wrlong	_var01, objptr
24720     C6 01 00 FF 
24724     C4 01 06 F6 | 	mov	_var01, ##@LR__6199
24728     04 E4 05 F1 | 	add	objptr, #4
2472c     F2 00 62 FC | 	wrlong	_var01, objptr
24730     C6 01 00 FF 
24734     DE 01 06 F6 | 	mov	_var01, ##@LR__6200
24738     04 E4 05 F1 | 	add	objptr, #4
2473c     F2 00 62 FC | 	wrlong	_var01, objptr
24740     C6 01 00 FF 
24744     EF 01 06 F6 | 	mov	_var01, ##@LR__6201
24748     04 E4 05 F1 | 	add	objptr, #4
2474c     F2 00 62 FC | 	wrlong	_var01, objptr
24750     C7 01 00 FF 
24754     06 00 06 F6 | 	mov	_var01, ##@LR__6202
24758     04 E4 05 F1 | 	add	objptr, #4
2475c     F2 00 62 FC | 	wrlong	_var01, objptr
24760     C7 01 00 FF 
24764     19 00 06 F6 | 	mov	_var01, ##@LR__6203
24768     04 E4 05 F1 | 	add	objptr, #4
2476c     F2 00 62 FC | 	wrlong	_var01, objptr
24770     C7 01 00 FF 
24774     28 00 06 F6 | 	mov	_var01, ##@LR__6204
24778     04 E4 05 F1 | 	add	objptr, #4
2477c     F2 00 62 FC | 	wrlong	_var01, objptr
24780     C7 01 00 FF 
24784     44 00 06 F6 | 	mov	_var01, ##@LR__6205
24788     04 E4 05 F1 | 	add	objptr, #4
2478c     F2 00 62 FC | 	wrlong	_var01, objptr
24790     C7 01 00 FF 
24794     54 00 06 F6 | 	mov	_var01, ##@LR__6206
24798     04 E4 05 F1 | 	add	objptr, #4
2479c     F2 00 62 FC | 	wrlong	_var01, objptr
247a0     C7 01 00 FF 
247a4     64 00 06 F6 | 	mov	_var01, ##@LR__6207
247a8     04 E4 05 F1 | 	add	objptr, #4
247ac     F2 00 62 FC | 	wrlong	_var01, objptr
247b0     C7 01 00 FF 
247b4     97 00 06 F6 | 	mov	_var01, ##@LR__6208
247b8     04 E4 05 F1 | 	add	objptr, #4
247bc     F2 00 62 FC | 	wrlong	_var01, objptr
247c0     C7 01 00 FF 
247c4     B2 00 06 F6 | 	mov	_var01, ##@LR__6209
247c8     04 E4 05 F1 | 	add	objptr, #4
247cc     F2 00 62 FC | 	wrlong	_var01, objptr
247d0     C7 01 00 FF 
247d4     C7 00 06 F6 | 	mov	_var01, ##@LR__6210
247d8     04 E4 05 F1 | 	add	objptr, #4
247dc     F2 00 62 FC | 	wrlong	_var01, objptr
247e0     C7 01 00 FF 
247e4     D3 00 06 F6 | 	mov	_var01, ##@LR__6211
247e8     04 E4 05 F1 | 	add	objptr, #4
247ec     F2 00 62 FC | 	wrlong	_var01, objptr
247f0     C7 01 00 FF 
247f4     E4 00 06 F6 | 	mov	_var01, ##@LR__6212
247f8     04 E4 05 F1 | 	add	objptr, #4
247fc     F2 00 62 FC | 	wrlong	_var01, objptr
24800     C7 01 00 FF 
24804     F4 00 06 F6 | 	mov	_var01, ##@LR__6213
24808     04 E4 05 F1 | 	add	objptr, #4
2480c     F2 00 62 FC | 	wrlong	_var01, objptr
24810     C7 01 00 FF 
24814     0F 01 06 F6 | 	mov	_var01, ##@LR__6214
24818     04 E4 05 F1 | 	add	objptr, #4
2481c     F2 00 62 FC | 	wrlong	_var01, objptr
24820     C7 01 00 FF 
24824     1F 01 06 F6 | 	mov	_var01, ##@LR__6215
24828     04 E4 05 F1 | 	add	objptr, #4
2482c     F2 00 62 FC | 	wrlong	_var01, objptr
24830     C7 01 00 FF 
24834     2D 01 06 F6 | 	mov	_var01, ##@LR__6216
24838     04 E4 05 F1 | 	add	objptr, #4
2483c     F2 00 62 FC | 	wrlong	_var01, objptr
24840     C7 01 00 FF 
24844     47 01 06 F6 | 	mov	_var01, ##@LR__6217
24848     04 E4 05 F1 | 	add	objptr, #4
2484c     F2 00 62 FC | 	wrlong	_var01, objptr
24850     C7 01 00 FF 
24854     7A 01 06 F6 | 	mov	_var01, ##@LR__6218
24858     04 E4 05 F1 | 	add	objptr, #4
2485c     F2 00 62 FC | 	wrlong	_var01, objptr
24860     C7 01 00 FF 
24864     92 01 06 F6 | 	mov	_var01, ##@LR__6219
24868     04 E4 05 F1 | 	add	objptr, #4
2486c     F2 00 62 FC | 	wrlong	_var01, objptr
24870     C7 01 00 FF 
24874     AD 01 06 F6 | 	mov	_var01, ##@LR__6220
24878     04 E4 05 F1 | 	add	objptr, #4
2487c     F2 00 62 FC | 	wrlong	_var01, objptr
24880     C7 01 00 FF 
24884     CA 01 06 F6 | 	mov	_var01, ##@LR__6221
24888     04 E4 05 F1 | 	add	objptr, #4
2488c     F2 00 62 FC | 	wrlong	_var01, objptr
24890     C7 01 00 FF 
24894     E3 01 06 F6 | 	mov	_var01, ##@LR__6222
24898     04 E4 05 F1 | 	add	objptr, #4
2489c     F2 00 62 FC | 	wrlong	_var01, objptr
248a0     C8 01 00 FF 
248a4     02 00 06 F6 | 	mov	_var01, ##@LR__6223
248a8     04 E4 05 F1 | 	add	objptr, #4
248ac     F2 00 62 FC | 	wrlong	_var01, objptr
248b0     C8 01 00 FF 
248b4     10 00 06 F6 | 	mov	_var01, ##@LR__6224
248b8     04 E4 05 F1 | 	add	objptr, #4
248bc     F2 00 62 FC | 	wrlong	_var01, objptr
248c0     C8 01 00 FF 
248c4     3D 00 06 F6 | 	mov	_var01, ##@LR__6225
248c8     04 E4 05 F1 | 	add	objptr, #4
248cc     F2 00 62 FC | 	wrlong	_var01, objptr
248d0     C8 01 00 FF 
248d4     4A 00 06 F6 | 	mov	_var01, ##@LR__6226
248d8     04 E4 05 F1 | 	add	objptr, #4
248dc     F2 00 62 FC | 	wrlong	_var01, objptr
248e0     C8 01 00 FF 
248e4     5E 00 06 F6 | 	mov	_var01, ##@LR__6227
248e8     04 E4 05 F1 | 	add	objptr, #4
248ec     F2 00 62 FC | 	wrlong	_var01, objptr
248f0     C8 01 00 FF 
248f4     82 00 06 F6 | 	mov	_var01, ##@LR__6228
248f8     04 E4 05 F1 | 	add	objptr, #4
248fc     F2 00 62 FC | 	wrlong	_var01, objptr
24900     C8 01 00 FF 
24904     99 00 06 F6 | 	mov	_var01, ##@LR__6229
24908     04 E4 05 F1 | 	add	objptr, #4
2490c     F2 00 62 FC | 	wrlong	_var01, objptr
24910     C8 01 00 FF 
24914     AC 00 06 F6 | 	mov	_var01, ##@LR__6230
24918     04 E4 05 F1 | 	add	objptr, #4
2491c     F2 00 62 FC | 	wrlong	_var01, objptr
24920     C8 01 00 FF 
24924     C3 00 06 F6 | 	mov	_var01, ##@LR__6231
24928     04 E4 05 F1 | 	add	objptr, #4
2492c     F2 00 62 FC | 	wrlong	_var01, objptr
24930     C8 01 00 FF 
24934     DC 00 06 F6 | 	mov	_var01, ##@LR__6232
24938     04 E4 05 F1 | 	add	objptr, #4
2493c     F2 00 62 FC | 	wrlong	_var01, objptr
24940     C8 01 00 FF 
24944     FE 00 06 F6 | 	mov	_var01, ##@LR__6233
24948     04 E4 05 F1 | 	add	objptr, #4
2494c     F2 00 62 FC | 	wrlong	_var01, objptr
24950     C8 01 00 FF 
24954     11 01 06 F6 | 	mov	_var01, ##@LR__6234
24958     04 E4 05 F1 | 	add	objptr, #4
2495c     F2 00 62 FC | 	wrlong	_var01, objptr
24960     C8 01 00 FF 
24964     21 01 06 F6 | 	mov	_var01, ##@LR__6235
24968     04 E4 05 F1 | 	add	objptr, #4
2496c     F2 00 62 FC | 	wrlong	_var01, objptr
24970     C8 01 00 FF 
24974     39 01 06 F6 | 	mov	_var01, ##@LR__6236
24978     04 E4 05 F1 | 	add	objptr, #4
2497c     F2 00 62 FC | 	wrlong	_var01, objptr
24980     C8 01 00 FF 
24984     50 01 06 F6 | 	mov	_var01, ##@LR__6237
24988     04 E4 05 F1 | 	add	objptr, #4
2498c     F2 00 62 FC | 	wrlong	_var01, objptr
24990     45 00 00 FF 
24994     78 E5 85 F1 | 	sub	objptr, ##35704
24998                 | _init_error_strings_ret
24998     2D 00 64 FD | 	ret
2499c                 | 
2499c                 | '         
2499c                 | ' sub printerror(err as integer, linenum=0 as integer)
2499c                 | _printerror
2499c     02 4A 05 F6 | 	mov	COUNT_, #2
249a0     A8 00 A0 FD | 	call	#pushregs_
249a4     09 27 02 F6 | 	mov	local01, arg01
249a8     0A 29 02 F6 | 	mov	local02, arg02
249ac     C8 01 00 FF 
249b0     5D 13 06 F6 | 	mov	arg01, ##@LR__6238
249b4     A0 21 B0 FD | 	call	#_hg010b_spin2_write
249b8     13 13 02 F6 | 	mov	arg01, local01
249bc     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
249c0     FD 12 02 F6 | 	mov	arg01, result1
249c4     90 21 B0 FD | 	call	#_hg010b_spin2_write
249c8     C8 01 00 FF 
249cc     64 13 06 F6 | 	mov	arg01, ##@LR__6239
249d0     84 21 B0 FD | 	call	#_hg010b_spin2_write
249d4     02 26 66 F0 | 	shl	local01, #2
249d8     45 00 00 FF 
249dc     9C E4 05 F1 | 	add	objptr, ##35484
249e0     F2 26 02 F1 | 	add	local01, objptr
249e4     13 13 02 FB | 	rdlong	arg01, local01
249e8     45 00 00 FF 
249ec     9C E4 85 F1 | 	sub	objptr, ##35484
249f0     64 21 B0 FD | 	call	#_hg010b_spin2_write
249f4                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
249f4                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
249f4     01 28 56 F2 | 	cmps	local02, #1 wc
249f8     24 00 90 CD |  if_b	jmp	#LR__2780
249fc     C8 01 00 FF 
24a00     68 13 06 F6 | 	mov	arg01, ##@LR__6240
24a04     50 21 B0 FD | 	call	#_hg010b_spin2_write
24a08     14 13 02 F6 | 	mov	arg01, local02
24a0c     8C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
24a10     FD 12 02 F6 | 	mov	arg01, result1
24a14                 | ' 
24a14                 | ' write(text)
24a14     40 21 B0 FD | 	call	#_hg010b_spin2_write
24a18                 | ' crlf
24a18     DC 25 B0 FD | 	call	#_hg010b_spin2_crlf
24a1c     10 00 90 FD | 	jmp	#LR__2781
24a20                 | LR__2780
24a20     C8 01 00 FF 
24a24     72 13 06 F6 | 	mov	arg01, ##@LR__6241
24a28                 | ' 
24a28                 | ' write(text)
24a28     2C 21 B0 FD | 	call	#_hg010b_spin2_write
24a2c                 | ' crlf
24a2c     C8 25 B0 FD | 	call	#_hg010b_spin2_crlf
24a30                 | LR__2781
24a30     A7 F0 03 F6 | 	mov	ptra, fp
24a34     B2 00 A0 FD | 	call	#popregs_
24a38                 | _printerror_ret
24a38     2D 00 64 FD | 	ret
24a3c                 | 
24a3c                 | ' 
24a3c                 | ' '' ------------------------------- Hardware start/stop/initialization 
24a3c                 | ' 
24a3c                 | ' sub startpsram
24a3c                 | _startpsram
24a3c     00 12 06 F6 | 	mov	arg01, #0
24a40     0A 14 C6 F9 | 	decod	arg02, #10
24a44     0B 16 06 F6 | 	mov	arg03, #11
24a48     07 18 06 F6 | 	mov	arg04, #7
24a4c     0B 00 00 FF 
24a50     CC E4 05 F1 | 	add	objptr, ##5836
24a54     CC 2A B0 FD | 	call	#_psram_spin2_startx
24a58     2B 00 00 FF 
24a5c     5C E5 05 F1 | 	add	objptr, ##22364
24a60     F2 FA 61 FC | 	wrlong	result1, objptr
24a64                 | '     return $7FF00 + cog*12
24a64     0C E4 05 F1 | 	add	objptr, #12
24a68     FF 03 80 FF 
24a6c     F2 00 6A FC | 	wrlong	##524032, objptr
24a70     37 00 00 FF 
24a74     34 E4 85 F1 | 	sub	objptr, ##28212
24a78                 | _startpsram_ret
24a78     2D 00 64 FD | 	ret
24a7c                 | 
24a7c                 | ' 
24a7c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
24a7c                 | _startvideo
24a7c     01 4A 05 F6 | 	mov	COUNT_, #1
24a80     A8 00 A0 FD | 	call	#pushregs_
24a84     37 00 00 FF 
24a88     34 E4 05 F1 | 	add	objptr, ##28212
24a8c     F2 18 02 FB | 	rdlong	arg04, objptr
24a90     37 00 00 FF 
24a94     34 E4 85 F1 | 	sub	objptr, ##28212
24a98     0A 13 02 F6 | 	mov	arg01, arg02
24a9c     0C 15 02 F6 | 	mov	arg02, arg04
24aa0     20 08 B0 FD | 	call	#_hg010b_spin2_start
24aa4     37 00 00 FF 
24aa8     20 E4 05 F1 | 	add	objptr, ##28192
24aac     F2 FA 61 FC | 	wrlong	result1, objptr
24ab0                 | ' 
24ab0                 | ' videocog=v.start(pin,mbox)
24ab0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
24ab0     00 26 06 F6 | 	mov	local01, #0
24ab4     2B 00 00 FF 
24ab8     54 E5 85 F1 | 	sub	objptr, ##22356
24abc                 | LR__2790
24abc     13 13 02 F6 | 	mov	arg01, local01
24ac0     00 28 00 FF 
24ac4     00 14 06 F6 | 	mov	arg02, ##5242880
24ac8     B0 2E B0 FD | 	call	#_psram_spin2_setQos
24acc     01 26 06 F1 | 	add	local01, #1
24ad0     08 26 56 F2 | 	cmps	local01, #8 wc
24ad4     E4 FF 9F CD |  if_b	jmp	#LR__2790
24ad8     2B 00 00 FF 
24adc     54 E5 05 F1 | 	add	objptr, ##22356
24ae0     F2 12 02 FB | 	rdlong	arg01, objptr
24ae4     7A 00 02 FF 
24ae8     00 14 06 F6 | 	mov	arg02, ##67171328
24aec     2B 00 00 FF 
24af0     54 E5 85 F1 | 	sub	objptr, ##22356
24af4     84 2E B0 FD | 	call	#_psram_spin2_setQos
24af8     0B 00 00 FF 
24afc     CC E4 85 F1 | 	sub	objptr, ##5836
24b00                 | ' psram.setQoS(videocog, $0400f400) 
24b00                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
24b00     F2 14 02 F6 | 	mov	arg02, objptr
24b04     00 68 05 FF 
24b08     00 14 46 F5 | 	or	arg02, ##181403648
24b0c     00 16 06 F6 | 	mov	arg03, #0
24b10     00 18 06 F6 | 	mov	arg04, #0
24b14     00 12 06 F6 | 	mov	arg01, #0
24b18     80 43 B0 FD | 	call	#__system___basic_open
24b1c                 | ' return videocog
24b1c     37 00 00 FF 
24b20     20 E4 05 F1 | 	add	objptr, ##28192
24b24     F2 FA 01 FB | 	rdlong	result1, objptr
24b28     37 00 00 FF 
24b2c     20 E4 85 F1 | 	sub	objptr, ##28192
24b30     A7 F0 03 F6 | 	mov	ptra, fp
24b34     B2 00 A0 FD | 	call	#popregs_
24b38                 | _startvideo_ret
24b38     2D 00 64 FD | 	ret
24b3c                 | 
24b3c                 | ' 
24b3c                 | ' 
24b3c                 | ' 
24b3c                 | ' '' ------------------------------- Convenient psram peek/poke
24b3c                 | ' 
24b3c                 | ' sub pslpoke(addr as ulong,value as ulong)
24b3c                 | _pslpoke
24b3c     00 4A 05 F6 | 	mov	COUNT_, #0
24b40     A8 00 A0 FD | 	call	#pushregs_
24b44     08 F0 07 F1 | 	add	ptra, #8
24b48     A7 12 62 FC | 	wrlong	arg01, fp
24b4c     04 4E 05 F1 | 	add	fp, #4
24b50     A7 14 62 FC | 	wrlong	arg02, fp
24b54     A7 12 02 F6 | 	mov	arg01, fp
24b58     04 4E 85 F1 | 	sub	fp, #4
24b5c     A7 14 02 FB | 	rdlong	arg02, fp
24b60     04 16 06 F6 | 	mov	arg03, #4
24b64     0B 00 00 FF 
24b68     CC E4 05 F1 | 	add	objptr, ##5836
24b6c     7C 2C B0 FD | 	call	#_psram_spin2_write
24b70     0B 00 00 FF 
24b74     CC E4 85 F1 | 	sub	objptr, ##5836
24b78     A7 F0 03 F6 | 	mov	ptra, fp
24b7c     B2 00 A0 FD | 	call	#popregs_
24b80                 | _pslpoke_ret
24b80     2D 00 64 FD | 	ret
24b84                 | 
24b84                 | ' 
24b84                 | ' sub psdpoke(addr as ulong,value as ulong)
24b84                 | _psdpoke
24b84     00 4A 05 F6 | 	mov	COUNT_, #0
24b88     A8 00 A0 FD | 	call	#pushregs_
24b8c     08 F0 07 F1 | 	add	ptra, #8
24b90     A7 12 62 FC | 	wrlong	arg01, fp
24b94     04 4E 05 F1 | 	add	fp, #4
24b98     A7 14 62 FC | 	wrlong	arg02, fp
24b9c     A7 12 02 F6 | 	mov	arg01, fp
24ba0     04 4E 85 F1 | 	sub	fp, #4
24ba4     A7 14 02 FB | 	rdlong	arg02, fp
24ba8     02 16 06 F6 | 	mov	arg03, #2
24bac     0B 00 00 FF 
24bb0     CC E4 05 F1 | 	add	objptr, ##5836
24bb4     34 2C B0 FD | 	call	#_psram_spin2_write
24bb8     0B 00 00 FF 
24bbc     CC E4 85 F1 | 	sub	objptr, ##5836
24bc0     A7 F0 03 F6 | 	mov	ptra, fp
24bc4     B2 00 A0 FD | 	call	#popregs_
24bc8                 | _psdpoke_ret
24bc8     2D 00 64 FD | 	ret
24bcc                 | 
24bcc                 | ' 
24bcc                 | ' sub pspoke(addr as ulong,value as ulong)
24bcc                 | _pspoke
24bcc     00 4A 05 F6 | 	mov	COUNT_, #0
24bd0     A8 00 A0 FD | 	call	#pushregs_
24bd4     08 F0 07 F1 | 	add	ptra, #8
24bd8     A7 12 62 FC | 	wrlong	arg01, fp
24bdc     04 4E 05 F1 | 	add	fp, #4
24be0     A7 14 62 FC | 	wrlong	arg02, fp
24be4     A7 12 02 F6 | 	mov	arg01, fp
24be8     04 4E 85 F1 | 	sub	fp, #4
24bec     A7 14 02 FB | 	rdlong	arg02, fp
24bf0     01 16 06 F6 | 	mov	arg03, #1
24bf4     0B 00 00 FF 
24bf8     CC E4 05 F1 | 	add	objptr, ##5836
24bfc     EC 2B B0 FD | 	call	#_psram_spin2_write
24c00     0B 00 00 FF 
24c04     CC E4 85 F1 | 	sub	objptr, ##5836
24c08     A7 F0 03 F6 | 	mov	ptra, fp
24c0c     B2 00 A0 FD | 	call	#popregs_
24c10                 | _pspoke_ret
24c10     2D 00 64 FD | 	ret
24c14                 | 
24c14                 | ' 
24c14                 | ' function pspeek(adr as ulong) as ubyte
24c14                 | _pspeek
24c14     00 4A 05 F6 | 	mov	COUNT_, #0
24c18     A8 00 A0 FD | 	call	#pushregs_
24c1c     0C F0 07 F1 | 	add	ptra, #12
24c20     04 4E 05 F1 | 	add	fp, #4
24c24     A7 12 62 FC | 	wrlong	arg01, fp
24c28     04 4E 05 F1 | 	add	fp, #4
24c2c     A7 12 02 F6 | 	mov	arg01, fp
24c30     04 4E 85 F1 | 	sub	fp, #4
24c34     A7 14 02 FB | 	rdlong	arg02, fp
24c38     04 4E 85 F1 | 	sub	fp, #4
24c3c     01 16 06 F6 | 	mov	arg03, #1
24c40     0B 00 00 FF 
24c44     CC E4 05 F1 | 	add	objptr, ##5836
24c48     04 2B B0 FD | 	call	#_psram_spin2_read1
24c4c     0B 00 00 FF 
24c50     CC E4 85 F1 | 	sub	objptr, ##5836
24c54                 | ' psram.read1(varptr(res),adr,1)
24c54                 | ' return res
24c54     08 4E 05 F1 | 	add	fp, #8
24c58     A7 FA C1 FA | 	rdbyte	result1, fp
24c5c     08 4E 85 F1 | 	sub	fp, #8
24c60     A7 F0 03 F6 | 	mov	ptra, fp
24c64     B2 00 A0 FD | 	call	#popregs_
24c68                 | _pspeek_ret
24c68     2D 00 64 FD | 	ret
24c6c                 | 
24c6c                 | ' 
24c6c                 | ' function pslpeek(adr as ulong) as ulong
24c6c                 | _pslpeek
24c6c     00 4A 05 F6 | 	mov	COUNT_, #0
24c70     A8 00 A0 FD | 	call	#pushregs_
24c74     0C F0 07 F1 | 	add	ptra, #12
24c78     04 4E 05 F1 | 	add	fp, #4
24c7c     A7 12 62 FC | 	wrlong	arg01, fp
24c80     04 4E 05 F1 | 	add	fp, #4
24c84     A7 12 02 F6 | 	mov	arg01, fp
24c88     04 4E 85 F1 | 	sub	fp, #4
24c8c     A7 14 02 FB | 	rdlong	arg02, fp
24c90     04 4E 85 F1 | 	sub	fp, #4
24c94     04 16 06 F6 | 	mov	arg03, #4
24c98     0B 00 00 FF 
24c9c     CC E4 05 F1 | 	add	objptr, ##5836
24ca0     AC 2A B0 FD | 	call	#_psram_spin2_read1
24ca4     0B 00 00 FF 
24ca8     CC E4 85 F1 | 	sub	objptr, ##5836
24cac                 | ' psram.read1(varptr(res),adr,4)
24cac                 | ' return res
24cac     08 4E 05 F1 | 	add	fp, #8
24cb0     A7 FA 01 FB | 	rdlong	result1, fp
24cb4     08 4E 85 F1 | 	sub	fp, #8
24cb8     A7 F0 03 F6 | 	mov	ptra, fp
24cbc     B2 00 A0 FD | 	call	#popregs_
24cc0                 | _pslpeek_ret
24cc0     2D 00 64 FD | 	ret
24cc4                 | 
24cc4                 | ' 
24cc4                 | ' function psdpeek(adr as ulong) as ulong
24cc4                 | _psdpeek
24cc4     00 4A 05 F6 | 	mov	COUNT_, #0
24cc8     A8 00 A0 FD | 	call	#pushregs_
24ccc     0C F0 07 F1 | 	add	ptra, #12
24cd0     04 4E 05 F1 | 	add	fp, #4
24cd4     A7 12 62 FC | 	wrlong	arg01, fp
24cd8     04 4E 05 F1 | 	add	fp, #4
24cdc     A7 12 02 F6 | 	mov	arg01, fp
24ce0     04 4E 85 F1 | 	sub	fp, #4
24ce4     A7 14 02 FB | 	rdlong	arg02, fp
24ce8     04 4E 85 F1 | 	sub	fp, #4
24cec     02 16 06 F6 | 	mov	arg03, #2
24cf0     0B 00 00 FF 
24cf4     CC E4 05 F1 | 	add	objptr, ##5836
24cf8     54 2A B0 FD | 	call	#_psram_spin2_read1
24cfc     0B 00 00 FF 
24d00     CC E4 85 F1 | 	sub	objptr, ##5836
24d04                 | ' psram.read1(varptr(res),adr,2)
24d04                 | ' return res
24d04     08 4E 05 F1 | 	add	fp, #8
24d08     A7 FA E1 FA | 	rdword	result1, fp
24d0c     08 4E 85 F1 | 	sub	fp, #8
24d10     A7 F0 03 F6 | 	mov	ptra, fp
24d14     B2 00 A0 FD | 	call	#popregs_
24d18                 | _psdpeek_ret
24d18     2D 00 64 FD | 	ret
24d1c                 | 
24d1c                 | ' 
24d1c                 | ' '' ------------------------------- USB keyboard scan to char translator
24d1c                 | ' 
24d1c                 | ' function scantochar(key)
24d1c                 | _scantochar
24d1c                 | ' 
24d1c                 | ' select case (key shr 8) and 255
24d1c     09 01 02 F6 | 	mov	_var01, arg01
24d20     08 00 C6 F0 | 	sar	_var01, #8
24d24     FF 00 0E F5 | 	and	_var01, #255 wz
24d28     24 00 90 AD |  if_e	jmp	#LR__2800
24d2c     02 00 0E F2 | 	cmp	_var01, #2 wz
24d30     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
24d34     30 00 90 AD |  if_e	jmp	#LR__2801
24d38     40 00 0E F2 | 	cmp	_var01, #64 wz
24d3c     44 00 90 AD |  if_e	jmp	#LR__2802
24d40     42 00 0E F2 | 	cmp	_var01, #66 wz
24d44     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
24d48     70 00 90 5D |  if_ne	jmp	#LR__2804
24d4c     50 00 90 FD | 	jmp	#LR__2803
24d50                 | LR__2800
24d50     09 FB 01 F6 | 	mov	result1, arg01
24d54     7F FA 05 F5 | 	and	result1, #127
24d58     02 FA 65 F0 | 	shl	result1, #2
24d5c     F5 FA 01 F1 | 	add	result1, ptr__dat__
24d60     FD FA C1 FA | 	rdbyte	result1, result1
24d64     54 00 90 FD | 	jmp	#_scantochar_ret
24d68                 | LR__2801
24d68     09 FB 01 F6 | 	mov	result1, arg01
24d6c     7F FA 05 F5 | 	and	result1, #127
24d70     02 FA 65 F0 | 	shl	result1, #2
24d74     01 FA 05 F1 | 	add	result1, #1
24d78     F5 FA 01 F1 | 	add	result1, ptr__dat__
24d7c     FD FA C1 FA | 	rdbyte	result1, result1
24d80     38 00 90 FD | 	jmp	#_scantochar_ret
24d84                 | LR__2802
24d84     09 FB 01 F6 | 	mov	result1, arg01
24d88     7F FA 05 F5 | 	and	result1, #127
24d8c     02 FA 65 F0 | 	shl	result1, #2
24d90     02 FA 05 F1 | 	add	result1, #2
24d94     F5 FA 01 F1 | 	add	result1, ptr__dat__
24d98     FD FA C1 FA | 	rdbyte	result1, result1
24d9c     1C 00 90 FD | 	jmp	#_scantochar_ret
24da0                 | LR__2803
24da0     09 FB 01 F6 | 	mov	result1, arg01
24da4     7F FA 05 F5 | 	and	result1, #127
24da8     02 FA 65 F0 | 	shl	result1, #2
24dac     03 FA 05 F1 | 	add	result1, #3
24db0     F5 FA 01 F1 | 	add	result1, ptr__dat__
24db4     FD FA C1 FA | 	rdbyte	result1, result1
24db8     00 00 90 FD | 	jmp	#_scantochar_ret
24dbc                 | LR__2804
24dbc                 | _scantochar_ret
24dbc     2D 00 64 FD | 	ret
24dc0                 | 
24dc0                 | _program
24dc0     01 4A 05 F6 | 	mov	COUNT_, #1
24dc4     A8 00 A0 FD | 	call	#pushregs_
24dc8     70 FC BF FD | 	call	#_startpsram
24dcc     37 00 00 FF 
24dd0     34 E4 05 F1 | 	add	objptr, ##28212
24dd4     F2 12 02 FB | 	rdlong	arg01, objptr
24dd8     00 14 06 F6 | 	mov	arg02, #0
24ddc     F0 03 00 FF 
24de0     00 16 06 F6 | 	mov	arg03, ##516096
24de4     2B 00 00 FF 
24de8     68 E5 85 F1 | 	sub	objptr, ##22376
24dec     30 2F B0 FD | 	call	#_audio096_spin2_start
24df0     FE 16 02 F6 | 	mov	arg03, result2
24df4     2B 00 00 FF 
24df8     50 E5 05 F1 | 	add	objptr, ##22352
24dfc     F2 FA 61 FC | 	wrlong	result1, objptr
24e00     14 E4 05 F1 | 	add	objptr, #20
24e04     F2 16 62 FC | 	wrlong	arg03, objptr
24e08     37 00 00 FF 
24e0c     30 E4 85 F1 | 	sub	objptr, ##28208
24e10     32 12 06 F6 | 	mov	arg01, #50
24e14     D0 38 B0 FD | 	call	#__system___waitms
24e18     37 00 00 FF 
24e1c     30 E4 05 F1 | 	add	objptr, ##28208
24e20     F2 12 02 FB | 	rdlong	arg01, objptr
24e24     37 00 00 FF 
24e28     30 E4 85 F1 | 	sub	objptr, ##28208
24e2c     14 12 06 F1 | 	add	arg01, #20
24e30     20 00 80 FF 
24e34     09 01 58 FC | 	wrword	##16384, arg01
24e38     48 2C B0 FD | 	call	#_usbnew_spin2_start
24e3c     37 00 00 FF 
24e40     24 E4 05 F1 | 	add	objptr, ##28196
24e44     F2 FA 61 FC | 	wrlong	result1, objptr
24e48     37 00 00 FF 
24e4c     24 E4 85 F1 | 	sub	objptr, ##28196
24e50     40 12 06 F6 | 	mov	arg01, #64
24e54     00 14 06 F6 | 	mov	arg02, #0
24e58     00 16 06 F6 | 	mov	arg03, #0
24e5c     1C FC BF FD | 	call	#_startvideo
24e60                 | '   mouse_limits[0] := xlim
24e60     0F 00 00 FF 
24e64     C8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
24e68     01 00 80 FF 
24e6c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
24e70                 | '   mouse_limits[1] := ylim
24e70     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24e74     01 00 80 FF 
24e78     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
24e7c     11 E5 05 F1 | 	add	objptr, #273
24e80     F2 12 02 F6 | 	mov	arg01, objptr
24e84     11 E5 85 F1 | 	sub	objptr, #273
24e88     C4 12 06 F1 | 	add	arg01, #196
24e8c                 | '   mouse_outptr := ptr
24e8c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24e90     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
24e94     0F 00 00 FF 
24e98     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24e9c     16 00 00 FF 
24ea0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
24ea4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
24ea8     16 00 00 FF 
24eac     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
24eb0     10 12 06 F6 | 	mov	arg01, #16
24eb4     BC 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
24eb8     10 12 06 F6 | 	mov	arg01, #16
24ebc     20 14 06 F6 | 	mov	arg02, #32
24ec0     20 16 06 F6 | 	mov	arg03, #32
24ec4     3C 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
24ec8     09 12 C6 F9 | 	decod	arg01, #9
24ecc     2C 15 06 F6 | 	mov	arg02, #300
24ed0     08 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
24ed4     F2 16 02 F6 | 	mov	arg03, objptr
24ed8     50 00 00 FF 
24edc     64 E5 05 F1 | 	add	objptr, ##41316
24ee0     F2 14 02 F6 | 	mov	arg02, objptr
24ee4     0A 17 62 FC | 	wrlong	arg03, arg02
24ee8     04 14 06 F1 | 	add	arg02, #4
24eec     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
24ef0     EF 14 02 F6 | 	mov	arg02, entryptr__
24ef4     1E FA 05 F6 | 	mov	result1, #30
24ef8     28 E4 61 FD | 	setq	objptr
24efc     0A FB F1 FC | 	coginit	result1, arg02 wc
24f00     01 FA 65 C6 |  if_b	neg	result1, #1
24f04     04 E4 85 F1 | 	sub	objptr, #4
24f08     F2 FA 61 FC | 	wrlong	result1, objptr
24f0c     01 00 00 FF 
24f10     8C E5 05 F1 | 	add	objptr, ##908
24f14     F2 00 68 FC | 	wrlong	#0, objptr
24f18     1B 00 00 FF 
24f1c     98 E4 85 F1 | 	sub	objptr, ##13976
24f20     F2 04 68 FC | 	wrlong	#2, objptr
24f24     04 E4 05 F1 | 	add	objptr, #4
24f28     F2 26 69 FC | 	wrlong	#147, objptr
24f2c     04 E4 05 F1 | 	add	objptr, #4
24f30     F2 34 69 FC | 	wrlong	#154, objptr
24f34     04 E4 05 F1 | 	add	objptr, #4
24f38     F2 08 68 FC | 	wrlong	#4, objptr
24f3c     04 E4 85 F1 | 	sub	objptr, #4
24f40     F2 16 02 FB | 	rdlong	arg03, objptr
24f44     14 E4 85 F1 | 	sub	objptr, #20
24f48     F2 16 62 FC | 	wrlong	arg03, objptr
24f4c     04 E4 05 F1 | 	add	objptr, #4
24f50     F2 00 68 FC | 	wrlong	#0, objptr
24f54     04 E4 05 F1 | 	add	objptr, #4
24f58     F2 00 68 FC | 	wrlong	#0, objptr
24f5c     19 00 00 FF 
24f60     0C E5 05 F1 | 	add	objptr, ##13068
24f64     F2 02 68 FC | 	wrlong	#1, objptr
24f68     01 00 00 FF 
24f6c     98 E5 05 F1 | 	add	objptr, ##920
24f70     F2 00 68 FC | 	wrlong	#0, objptr
24f74     01 00 00 FF 
24f78     00 EA 05 F1 | 	add	ptr__dat__, ##512
24f7c     08 E4 05 F1 | 	add	objptr, #8
24f80     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
24f84     04 E4 85 F1 | 	sub	objptr, #4
24f88     03 00 80 FF 
24f8c     F2 3C 69 FC | 	wrlong	##1694, objptr
24f90     0D 00 00 FF 
24f94     74 E4 85 F1 | 	sub	objptr, ##6772
24f98     F2 18 68 FC | 	wrlong	#12, objptr
24f9c     45 00 00 FF 
24fa0     84 E4 85 F1 | 	sub	objptr, ##35460
24fa4     01 00 00 FF 
24fa8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
24fac     E8 D6 BF FD | 	call	#_init_commands
24fb0     58 F6 BF FD | 	call	#_init_error_strings
24fb4     A0 ED BF FD | 	call	#_init_audio
24fb8     40 1B BF FD | 	call	#_do_new
24fbc     37 00 00 FF 
24fc0     5C E4 05 F1 | 	add	objptr, ##28252
24fc4     F2 12 02 FB | 	rdlong	arg01, objptr
24fc8     04 E4 85 F1 | 	sub	objptr, #4
24fcc     F2 14 02 FB | 	rdlong	arg02, objptr
24fd0     37 00 00 FF 
24fd4     58 E4 85 F1 | 	sub	objptr, ##28248
24fd8     BC 17 B0 FD | 	call	#_hg010b_spin2_cls
24fdc     37 00 00 FF 
24fe0     60 E4 05 F1 | 	add	objptr, ##28256
24fe4     F2 12 02 FB | 	rdlong	arg01, objptr
24fe8     37 00 00 FF 
24fec     60 E4 85 F1 | 	sub	objptr, ##28256
24ff0     E0 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
24ff4                 | ' 
24ff4                 | ' leading_spaces:=amount
24ff4     01 00 00 FF 
24ff8     B6 E4 05 F1 | 	add	objptr, ##694
24ffc     F2 04 68 FC | 	wrlong	#2, objptr
25000     01 00 00 FF 
25004     B6 E4 85 F1 | 	sub	objptr, ##694
25008     C8 01 00 FF 
2500c     73 27 06 F6 | 	mov	local01, ##@LR__6242
25010     3D 12 06 F6 | 	mov	arg01, #61
25014     3C 14 06 F6 | 	mov	arg02, #60
25018     3B 16 06 F6 | 	mov	arg03, #59
2501c     3A 18 06 F6 | 	mov	arg04, #58
25020     5C 81 B0 FD | 	call	#__system___vfs_open_sdcardx
25024     FD 14 02 F6 | 	mov	arg02, result1
25028     13 13 02 F6 | 	mov	arg01, local01
2502c     90 37 B0 FD | 	call	#__system___mount
25030     C8 01 00 FF 
25034     77 13 06 F6 | 	mov	arg01, ##@LR__6243
25038     44 3A B0 FD | 	call	#__system___chdir
2503c     C8 01 00 FF 
25040     7F 27 06 F6 | 	mov	local01, ##@LR__6244
25044     4A 00 00 FF 
25048     B4 E4 05 F1 | 	add	objptr, ##38068
2504c     F2 26 62 FC | 	wrlong	local01, objptr
25050     13 00 00 FF 
25054     60 E4 85 F1 | 	sub	objptr, ##9824
25058     F2 12 02 FB | 	rdlong	arg01, objptr
2505c     37 00 00 FF 
25060     54 E4 85 F1 | 	sub	objptr, ##28244
25064     01 12 66 F0 | 	shl	arg01, #1
25068     01 14 06 F6 | 	mov	arg02, #1
2506c     E8 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
25070                 | ' init_commands
25070                 | ' init_error_strings
25070                 | ' init_audio
25070                 | ' do_new
25070                 | ' cls(ink, paper)
25070                 | ' v.setfontfamily(font) 				' use ST Mono font
25070                 | ' v.setleadingspaces(2)
25070                 | ' mount "/sd", _vfs_open_sdcard()
25070                 | ' chdir "/sd/bas"
25070                 | ' currentdir$="/sd/bas"
25070                 | ' position 2*editor_spaces,1 : print ver$
25070     00 12 06 F6 | 	mov	arg01, #0
25074     2C 90 B0 FD | 	call	#__system___getiolock_0625
25078     FD 12 02 F6 | 	mov	arg01, result1
2507c     74 33 B0 FD | 	call	#__system___lockmem
25080     18 00 00 FF 
25084     40 EB 05 F1 | 	add	ptr__dat__, ##12608
25088     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
2508c     18 00 00 FF 
25090     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
25094     00 12 06 F6 | 	mov	arg01, #0
25098     00 16 06 F6 | 	mov	arg03, #0
2509c     4C 40 B0 FD | 	call	#__system___basic_print_string
250a0     00 12 06 F6 | 	mov	arg01, #0
250a4     0A 14 06 F6 | 	mov	arg02, #10
250a8     00 16 06 F6 | 	mov	arg03, #0
250ac     E4 3F B0 FD | 	call	#__system___basic_print_char
250b0     00 12 06 F6 | 	mov	arg01, #0
250b4     EC 8F B0 FD | 	call	#__system___getiolock_0625
250b8     FD 00 68 FC | 	wrlong	#0, result1
250bc     52 00 00 FF 
250c0     F0 E4 05 F1 | 	add	objptr, ##42224
250c4     F2 12 02 FB | 	rdlong	arg01, objptr
250c8     0F 00 00 FF 
250cc     74 E4 85 F1 | 	sub	objptr, ##7796
250d0     F2 26 02 FB | 	rdlong	local01, objptr
250d4     43 00 00 FF 
250d8     7C E4 85 F1 | 	sub	objptr, ##34428
250dc     13 13 82 F1 | 	sub	arg01, local01
250e0     00 14 06 F6 | 	mov	arg02, #0
250e4     0A 16 06 F6 | 	mov	arg03, #10
250e8     DC 55 B0 FD | 	call	#__system__Number_S
250ec     FD 12 02 F6 | 	mov	arg01, result1
250f0     C8 01 00 FF 
250f4     87 15 06 F6 | 	mov	arg02, ##@LR__6245
250f8     54 33 B0 FD | 	call	#__system___string_concat
250fc     FD 26 02 F6 | 	mov	local01, result1
25100     50 00 00 FF 
25104     58 E5 05 F1 | 	add	objptr, ##41304
25108     F2 26 62 FC | 	wrlong	local01, objptr
2510c     50 00 00 FF 
25110     58 E5 85 F1 | 	sub	objptr, ##41304
25114                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
25114     00 12 06 F6 | 	mov	arg01, #0
25118     88 8F B0 FD | 	call	#__system___getiolock_0625
2511c     FD 12 02 F6 | 	mov	arg01, result1
25120     D0 32 B0 FD | 	call	#__system___lockmem
25124     50 00 00 FF 
25128     58 E5 05 F1 | 	add	objptr, ##41304
2512c     F2 14 02 FB | 	rdlong	arg02, objptr
25130     50 00 00 FF 
25134     58 E5 85 F1 | 	sub	objptr, ##41304
25138     00 12 06 F6 | 	mov	arg01, #0
2513c     00 16 06 F6 | 	mov	arg03, #0
25140     A8 3F B0 FD | 	call	#__system___basic_print_string
25144     00 12 06 F6 | 	mov	arg01, #0
25148     0A 14 06 F6 | 	mov	arg02, #10
2514c     00 16 06 F6 | 	mov	arg03, #0
25150     40 3F B0 FD | 	call	#__system___basic_print_char
25154     00 12 06 F6 | 	mov	arg01, #0
25158     48 8F B0 FD | 	call	#__system___getiolock_0625
2515c     FD 00 68 FC | 	wrlong	#0, result1
25160     37 00 00 FF 
25164     54 E4 05 F1 | 	add	objptr, ##28244
25168     F2 12 02 FB | 	rdlong	arg01, objptr
2516c     37 00 00 FF 
25170     54 E4 85 F1 | 	sub	objptr, ##28244
25174     01 12 66 F0 | 	shl	arg01, #1
25178     04 14 06 F6 | 	mov	arg02, #4
2517c     D8 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
25180                 | ' position 2*editor_spaces,4 : print "Ready"
25180     00 12 06 F6 | 	mov	arg01, #0
25184     1C 8F B0 FD | 	call	#__system___getiolock_0625
25188     FD 12 02 F6 | 	mov	arg01, result1
2518c     64 32 B0 FD | 	call	#__system___lockmem
25190     C8 01 00 FF 
25194     99 15 06 F6 | 	mov	arg02, ##@LR__6246
25198     00 12 06 F6 | 	mov	arg01, #0
2519c     00 16 06 F6 | 	mov	arg03, #0
251a0     48 3F B0 FD | 	call	#__system___basic_print_string
251a4     00 12 06 F6 | 	mov	arg01, #0
251a8     0A 14 06 F6 | 	mov	arg02, #10
251ac     00 16 06 F6 | 	mov	arg03, #0
251b0     E0 3E B0 FD | 	call	#__system___basic_print_char
251b4     00 12 06 F6 | 	mov	arg01, #0
251b8     E8 8E B0 FD | 	call	#__system___getiolock_0625
251bc     FD 00 68 FC | 	wrlong	#0, result1
251c0     00 14 06 F6 | 	mov	arg02, #0
251c4     01 14 D6 F7 | 	test	arg02, #1 wc
251c8     5A 4C 64 FD | 	drvc	#38
251cc     01 14 D6 F7 | 	test	arg02, #1 wc
251d0     5A 4E 64 FD | 	drvc	#39
251d4     C8 01 00 FF 
251d8     9F 27 06 F6 | 	mov	local01, ##@LR__6247
251dc     52 00 00 FF 
251e0     1C E5 05 F1 | 	add	objptr, ##42268
251e4     F2 26 62 FC | 	wrlong	local01, objptr
251e8     04 E4 05 F1 | 	add	objptr, #4
251ec     FF FF FF FF 
251f0     F2 FE 6B FC | 	wrlong	##-1, objptr
251f4     0C E4 05 F1 | 	add	objptr, #12
251f8     F2 00 68 FC | 	wrlong	#0, objptr
251fc     52 00 00 FF 
25200     2C E5 85 F1 | 	sub	objptr, ##42284
25204                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
25204                 | ' loadname="noname.bas"
25204                 | ' do_insert=-1
25204                 | ' inload=0
25204                 | ' 
25204                 | ' open "/sd/bas/autorun.bas" for input as #9
25204     C8 01 00 FF 
25208     AA 15 06 F6 | 	mov	arg02, ##@LR__6248
2520c     09 12 06 F6 | 	mov	arg01, #9
25210     00 16 06 F6 | 	mov	arg03, #0
25214     E0 3D B0 FD | 	call	#__system___basic_open_string
25218     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2521c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
25220     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
25224     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25228     52 00 00 FF 
2522c     30 E5 05 F1 | 	add	objptr, ##42288
25230     F2 FA 61 FC | 	wrlong	result1, objptr
25234     52 00 00 FF 
25238     30 E5 85 F1 | 	sub	objptr, ##42288
2523c                 | ' err=geterr()
2523c                 | ' close #9
2523c     09 12 06 F6 | 	mov	arg01, #9
25240     10 85 B0 FD | 	call	#__system__close
25244                 | ' if err=0 then line$="run autorun.bas" : interpret
25244     52 00 00 FF 
25248     30 E5 05 F1 | 	add	objptr, ##42288
2524c     F2 26 0A FB | 	rdlong	local01, objptr wz
25250     52 00 00 FF 
25254     30 E5 85 F1 | 	sub	objptr, ##42288
25258     C8 01 00 AF 
2525c     BE 27 06 A6 |  if_e	mov	local01, ##@LR__6249
25260     37 00 00 AF 
25264     3C E4 05 A1 |  if_e	add	objptr, ##28220
25268     F2 26 62 AC |  if_e	wrlong	local01, objptr
2526c     37 00 00 AF 
25270     3C E4 85 A1 |  if_e	sub	objptr, ##28220
25274     14 C6 BD AD |  if_e	call	#_interpret
25278                 | ' 
25278                 | ' 
25278                 | ' '-------------------------------------------------------------------------------------------------------- 
25278                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
25278                 | ' '--------------------------------------------------------------------------------------------------------
25278                 | ' 
25278                 | ' do
25278                 | LR__2810
25278     88 B5 BD FD | 	call	#_edit
2527c     FD 26 02 F6 | 	mov	local01, result1
25280     37 00 00 FF 
25284     3C E4 05 F1 | 	add	objptr, ##28220
25288     F2 26 62 FC | 	wrlong	local01, objptr
2528c     37 00 00 FF 
25290     3C E4 85 F1 | 	sub	objptr, ##28220
25294     F4 C5 BD FD | 	call	#_interpret
25298     C8 01 00 FF 
2529c     CE 27 06 F6 | 	mov	local01, ##@LR__6250
252a0     37 00 00 FF 
252a4     3C E4 05 F1 | 	add	objptr, ##28220
252a8     F2 26 62 FC | 	wrlong	local01, objptr
252ac     37 00 00 FF 
252b0     3C E4 85 F1 | 	sub	objptr, ##28220
252b4     C0 FF 9F FD | 	jmp	#LR__2810
252b8     A7 F0 03 F6 | 	mov	ptra, fp
252bc     B2 00 A0 FD | 	call	#popregs_
252c0                 | _program_ret
252c0     2D 00 64 FD | 	ret
252c4                 | 
252c4                 | ' '' this is not a main program.
252c4                 | ' 
252c4                 | ' '****************************************************************************************************************
252c4                 | ' '                                                                                                             	*
252c4                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
252c4                 | ' '                                                                                                            	*
252c4                 | ' ' base - HDMI base pin												*
252c4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
252c4                 | ' '														*
252c4                 | ' '														*
252c4                 | ' '****************************************************************************************************************
252c4                 | ' 
252c4                 | ' pub start(base,mb):result |i
252c4                 | _hg010b_spin2_start
252c4                 | ' 
252c4                 | ' '--------------------------- initialize pointers and variables
252c4                 | ' 
252c4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
252c4     34 E4 05 F1 | 	add	objptr, #52
252c8     F2 FA 01 F6 | 	mov	result1, objptr
252cc     28 E4 85 F1 | 	sub	objptr, #40
252d0     F2 FA 61 FC | 	wrlong	result1, objptr
252d4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
252d4                 | ' hdmibase:=base							' HDMI base pin, 8*n
252d4     18 E4 05 F1 | 	add	objptr, #24
252d8     F2 12 62 FC | 	wrlong	arg01, objptr
252dc                 | ' mailbox_ptr:=mb		
252dc     04 E4 05 F1 | 	add	objptr, #4
252e0     F2 14 62 FC | 	wrlong	arg02, objptr
252e4                 | ' mailbox0:=mb				' PSRAM mailbox pointer
252e4     C1 E5 05 F1 | 	add	objptr, #449
252e8     F2 14 62 FC | 	wrlong	arg02, objptr
252ec                 | ' sprite_ptr:=@spr1ptr
252ec     D8 E4 85 F1 | 	sub	objptr, #216
252f0     F2 FA 01 F6 | 	mov	result1, objptr
252f4     E5 E4 85 F1 | 	sub	objptr, #229
252f8     F2 FA 61 FC | 	wrlong	result1, objptr
252fc                 | ' 
252fc                 | ' 		'
252fc                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
252fc     E5 E4 05 F1 | 	add	objptr, #229
25300     F2 FA 01 FB | 	rdlong	result1, objptr
25304     D0 FA 05 F1 | 	add	result1, #208
25308     FD 10 58 FC | 	wrword	#8, result1
2530c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
2530c     F2 16 02 FB | 	rdlong	arg03, objptr
25310     D2 16 06 F1 | 	add	arg03, #210
25314     0B 21 58 FC | 	wrword	#16, arg03
25318                 | ' leading_spaces:=0				'
25318     A5 E5 05 F1 | 	add	objptr, #421
2531c     F2 00 68 FC | 	wrlong	#0, objptr
25320                 | ' 
25320                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
25320     99 E4 85 F1 | 	sub	objptr, #153
25324     00 00 A0 FF 
25328     F2 0E 68 FC | 	wrlong	##1073741831, objptr
2532c                 | ' emptydl[1]:=0
2532c     04 E4 05 F1 | 	add	objptr, #4
25330     F2 00 68 FC | 	wrlong	#0, objptr
25334                 | ' 
25334                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
25334                 | ' 
25334                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
25334     28 E5 85 F1 | 	sub	objptr, #296
25338     F2 02 68 FC | 	wrlong	#1, objptr
2533c                 | ' if s_debug<>0
2533c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2533c     20 00 80 FF 
25340     F2 00 68 FC | 	wrlong	##16384, objptr
25344     F9 E4 85 F1 | 	sub	objptr, #249
25348                 | ' setmode()							' set the mode, see below
25348     1C 03 B0 FD | 	call	#_hg010b_spin2_setmode
2534c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
2534c     49 E4 05 F1 | 	add	objptr, #73
25350     F2 FA 01 F6 | 	mov	result1, objptr
25354     35 E4 85 F1 | 	sub	objptr, #53
25358     F2 FA 61 FC | 	wrlong	result1, objptr
2535c                 | ' cursor_ptr:=@cursor_x						
2535c     28 E4 05 F1 | 	add	objptr, #40
25360     F2 16 02 F6 | 	mov	arg03, objptr
25364     2C E4 85 F1 | 	sub	objptr, #44
25368     F2 16 62 FC | 	wrlong	arg03, objptr
2536c                 | ' fontnum:=0  							' start with a PC type font 
2536c     55 E4 05 F1 | 	add	objptr, #85
25370     F2 00 68 FC | 	wrlong	#0, objptr
25374                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
25374     1C E4 05 F1 | 	add	objptr, #28
25378     F2 12 02 F6 | 	mov	arg01, objptr
2537c     81 E4 85 F1 | 	sub	objptr, #129
25380     1C 00 00 FF 
25384     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
25388     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2538c     1C 00 00 FF 
25390     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
25394     10 16 06 F6 | 	mov	arg03, #16
25398     08 2F B0 FD | 	call	#__system____builtin_memmove
2539c                 | ' leading_spaces:=0
2539c     01 00 00 FF 
253a0     B6 E4 05 F1 | 	add	objptr, ##694
253a4     F2 00 68 FC | 	wrlong	#0, objptr
253a8     01 00 00 FF 
253ac     B6 E4 85 F1 | 	sub	objptr, ##694
253b0                 | ' '---------------------------- initialize a cursor (MSDOS type)
253b0                 | ' 
253b0                 | ' initcursor(154)
253b0     9A 12 06 F6 | 	mov	arg01, #154
253b4     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
253b8                 | ' 
253b8                 | ' '---------------------------- start the cog
253b8                 | ' 
253b8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
253b8     1C 00 00 FF 
253bc     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
253c0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
253c4     1C 00 00 FF 
253c8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
253cc     14 E4 05 F1 | 	add	objptr, #20
253d0     10 FA 05 F6 | 	mov	result1, #16
253d4     28 E4 61 FD | 	setq	objptr
253d8     0A FB F1 FC | 	coginit	result1, arg02 wc
253dc     01 FA 65 C6 |  if_b	neg	result1, #1
253e0     1C E4 05 F1 | 	add	objptr, #28
253e4     F2 FA 61 FC | 	wrlong	result1, objptr
253e8     30 E4 85 F1 | 	sub	objptr, #48
253ec                 | ' waitms(40)							' wait for stabilize
253ec     28 12 06 F6 | 	mov	arg01, #40
253f0     F4 32 B0 FD | 	call	#__system___waitms
253f4                 | ' return cog							' return the driver's cog #
253f4     30 E4 05 F1 | 	add	objptr, #48
253f8     F2 FA 01 FB | 	rdlong	result1, objptr
253fc     30 E4 85 F1 | 	sub	objptr, #48
25400                 | _hg010b_spin2_start_ret
25400     2D 00 64 FD | 	ret
25404                 | 
25404                 | ' 
25404                 | ' 
25404                 | ' '**************************************************************************************************************** 
25404                 | ' '                                                                                                             	*
25404                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
25404                 | ' '  Mode number - see start() above or bits below								*
25404                 | ' '                                                                                                             	*
25404                 | ' '****************************************************************************************************************
25404                 | ' 
25404                 | ' 
25404                 | ' pub restorepalette()
25404                 | _hg010b_spin2_restorepalette
25404                 | ' 
25404                 | ' longmove(@ataripalette,@ataripalette2,256)
25404     18 00 00 FF 
25408     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
2540c     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
25410     02 00 00 FF 
25414     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
25418     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2541c     1A 00 00 FF 
25420     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
25424     00 17 06 F6 | 	mov	arg03, #256
25428     0C 2F B0 FD | 	call	#__system__longmove
2542c                 | _hg010b_spin2_restorepalette_ret
2542c     2D 00 64 FD | 	ret
25430                 | 
25430                 | ' 
25430                 | ' '---------------------------- initialize a cursor (MSDOS type)
25430                 | ' pub initcursor(color) |i
25430                 | _hg010b_spin2_initcursor
25430     03 4A 05 F6 | 	mov	COUNT_, #3
25434     A8 00 A0 FD | 	call	#pushregs_
25438     09 27 02 F6 | 	mov	local01, arg01
2543c                 | ' 
2543c                 | ' cursor_x:=0							' place the cursor at 0:0
2543c     3C E4 05 F1 | 	add	objptr, #60
25440     F2 00 58 FC | 	wrword	#0, objptr
25444                 | ' cursor_y:=0
25444     02 E4 05 F1 | 	add	objptr, #2
25448     F2 00 48 FC | 	wrbyte	#0, objptr
2544c                 | ' repeat i from 0 to 111
2544c     00 28 06 F6 | 	mov	local02, #0
25450     F8 E5 05 F1 | 	add	objptr, #504
25454     97 0C 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
25458                 | LR__2820
25458                 | '   cursor[i]:=0
25458     14 2B 02 F6 | 	mov	local03, local02
2545c     F2 2A 02 F1 | 	add	local03, objptr
25460     15 01 48 FC | 	wrbyte	#0, local03
25464     01 28 06 F1 | 	add	local02, #1
25468     70 28 56 F2 | 	cmps	local02, #112 wc
2546c     E8 FF 9F CD |  if_b	jmp	#LR__2820
25470                 | LR__2821
25470                 | ' repeat i from 112 to 127
25470     70 28 06 F6 | 	mov	local02, #112
25474     97 0C 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
25478                 | LR__2822
25478                 | '   cursor[i]:=color  
25478     14 2B 02 F6 | 	mov	local03, local02
2547c     F2 2A 02 F1 | 	add	local03, objptr
25480     15 27 42 FC | 	wrbyte	local01, local03
25484     01 28 06 F1 | 	add	local02, #1
25488     80 28 16 F2 | 	cmp	local02, #128 wc
2548c     E8 FF 9F CD |  if_b	jmp	#LR__2822
25490                 | LR__2823
25490                 | ' 'repeat i from 0 to 127
25490                 | ' '  if ((i/8)//2)
25490                 | ' '    cursor[i]:=15
25490                 | ' '  else
25490                 | ' '    cursor[i]:=0
25490                 | ' '  if i>=120    
25490                 | ' '    cursor[i]:=40
25490                 | ' setspriteptr(17,@cursor)
25490     F2 14 02 F6 | 	mov	arg02, objptr
25494     01 00 00 FF 
25498     36 E4 85 F1 | 	sub	objptr, ##566
2549c     11 12 06 F6 | 	mov	arg01, #17
254a0     D0 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
254a4                 | ' setspritesize(17,8,16)
254a4     11 12 06 F6 | 	mov	arg01, #17
254a8     08 14 06 F6 | 	mov	arg02, #8
254ac     10 16 06 F6 | 	mov	arg03, #16
254b0     50 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
254b4                 | ' setspritepos(17,0,0)
254b4     11 12 06 F6 | 	mov	arg01, #17
254b8     00 14 06 F6 | 	mov	arg02, #0
254bc     00 16 06 F6 | 	mov	arg03, #0
254c0     D8 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
254c4                 | ' cursorshape:=14
254c4     0B 00 00 FF 
254c8     C6 E4 05 F1 | 	add	objptr, ##5830
254cc     F2 1C 68 FC | 	wrlong	#14, objptr
254d0                 | ' cursorcolor:=color
254d0     04 E4 85 F1 | 	sub	objptr, #4
254d4     F2 26 62 FC | 	wrlong	local01, objptr
254d8     0B 00 00 FF 
254dc     C2 E4 85 F1 | 	sub	objptr, ##5826
254e0     A7 F0 03 F6 | 	mov	ptra, fp
254e4     B2 00 A0 FD | 	call	#popregs_
254e8                 | _hg010b_spin2_initcursor_ret
254e8     2D 00 64 FD | 	ret
254ec                 | 
254ec                 | ' 
254ec                 | ' pub setcursorshape(shape) | i
254ec                 | _hg010b_spin2_setcursorshape
254ec                 | ' 
254ec                 | ' cursorshape:=shape
254ec     0B 00 00 FF 
254f0     C6 E4 05 F1 | 	add	objptr, ##5830
254f4     F2 12 62 FC | 	wrlong	arg01, objptr
254f8                 | ' repeat i from 0 to (8*cursorshape)-1
254f8     00 00 06 F6 | 	mov	_var01, #0
254fc     09 03 02 F6 | 	mov	_var02, arg01
25500     03 02 66 F0 | 	shl	_var02, #3
25504     01 02 86 F1 | 	sub	_var02, #1
25508     00 02 56 F2 | 	cmps	_var02, #0 wc
2550c     01 04 86 F6 | 	negc	_var03, #1
25510     02 07 02 F6 | 	mov	_var04, _var03
25514     02 03 02 F1 | 	add	_var02, _var03
25518     0A 00 00 FF 
2551c     90 E4 85 F1 | 	sub	objptr, ##5264
25520     97 0C 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
25524                 | LR__2830
25524                 | '   cursor[i]:=0
25524     00 05 02 F6 | 	mov	_var03, _var01
25528     F2 04 02 F1 | 	add	_var03, objptr
2552c     02 01 48 FC | 	wrbyte	#0, _var03
25530     03 01 02 F1 | 	add	_var01, _var04
25534     01 01 0A F2 | 	cmp	_var01, _var02 wz
25538     E8 FF 9F 5D |  if_ne	jmp	#LR__2830
2553c                 | LR__2831
2553c                 | ' repeat i from 8*cursorshape to 127
2553c     0A 00 00 FF 
25540     90 E4 05 F1 | 	add	objptr, ##5264
25544     F2 06 02 FB | 	rdlong	_var04, objptr
25548     03 01 02 F6 | 	mov	_var01, _var04
2554c     03 00 66 F0 | 	shl	_var01, #3
25550     0B 00 00 FF 
25554     C6 E4 85 F1 | 	sub	objptr, ##5830
25558     03 06 66 F0 | 	shl	_var04, #3
2555c     80 06 56 F2 | 	cmps	_var04, #128 wc
25560     01 04 A6 F6 | 	negnc	_var03, #1
25564     7F 02 06 F6 | 	mov	_var02, #127
25568     02 03 02 F1 | 	add	_var02, _var03
2556c     97 1A 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
25570                 | LR__2832
25570                 | '   cursor[i]:=cursorcolor
25570     00 07 02 F6 | 	mov	_var04, _var01
25574     01 00 00 FF 
25578     36 E4 05 F1 | 	add	objptr, ##566
2557c     F2 06 02 F1 | 	add	_var04, objptr
25580     0A 00 00 FF 
25584     8C E4 05 F1 | 	add	objptr, ##5260
25588     F2 12 02 FB | 	rdlong	arg01, objptr
2558c     0B 00 00 FF 
25590     C2 E4 85 F1 | 	sub	objptr, ##5826
25594     03 13 42 FC | 	wrbyte	arg01, _var04
25598     02 01 02 F1 | 	add	_var01, _var03
2559c     01 01 0A F2 | 	cmp	_var01, _var02 wz
255a0     CC FF 9F 5D |  if_ne	jmp	#LR__2832
255a4                 | LR__2833
255a4                 | _hg010b_spin2_setcursorshape_ret
255a4     2D 00 64 FD | 	ret
255a8                 | 
255a8                 | ' 
255a8                 | ' pub setcursorcolor(color) | i
255a8                 | _hg010b_spin2_setcursorcolor
255a8                 | ' 
255a8                 | ' cursorcolor:=color
255a8     0B 00 00 FF 
255ac     C2 E4 05 F1 | 	add	objptr, ##5826
255b0     F2 12 62 FC | 	wrlong	arg01, objptr
255b4                 | ' repeat i from 0 to (8*cursorshape)-1
255b4     00 12 06 F6 | 	mov	arg01, #0
255b8     04 E4 05 F1 | 	add	objptr, #4
255bc     F2 00 02 FB | 	rdlong	_var01, objptr
255c0     03 00 66 F0 | 	shl	_var01, #3
255c4     01 00 86 F1 | 	sub	_var01, #1
255c8     00 00 56 F2 | 	cmps	_var01, #0 wc
255cc     01 02 86 F6 | 	negc	_var02, #1
255d0     01 05 02 F6 | 	mov	_var03, _var02
255d4     01 01 02 F1 | 	add	_var01, _var02
255d8     0A 00 00 FF 
255dc     90 E4 85 F1 | 	sub	objptr, ##5264
255e0     97 0C 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
255e4                 | LR__2840
255e4                 | '   cursor[i]:=0
255e4     09 03 02 F6 | 	mov	_var02, arg01
255e8     F2 02 02 F1 | 	add	_var02, objptr
255ec     01 01 48 FC | 	wrbyte	#0, _var02
255f0     02 13 02 F1 | 	add	arg01, _var03
255f4     00 13 0A F2 | 	cmp	arg01, _var01 wz
255f8     E8 FF 9F 5D |  if_ne	jmp	#LR__2840
255fc                 | LR__2841
255fc                 | ' repeat i from 8*cursorshape to 127
255fc     0A 00 00 FF 
25600     90 E4 05 F1 | 	add	objptr, ##5264
25604     F2 04 02 FB | 	rdlong	_var03, objptr
25608     02 13 02 F6 | 	mov	arg01, _var03
2560c     03 12 66 F0 | 	shl	arg01, #3
25610     0B 00 00 FF 
25614     C6 E4 85 F1 | 	sub	objptr, ##5830
25618     03 04 66 F0 | 	shl	_var03, #3
2561c     80 04 56 F2 | 	cmps	_var03, #128 wc
25620     01 02 A6 F6 | 	negnc	_var02, #1
25624     7F 00 06 F6 | 	mov	_var01, #127
25628     01 01 02 F1 | 	add	_var01, _var02
2562c     97 1A 48 FB | 	callpa	#(@LR__2843-@LR__2842)>>2,fcache_load_ptr_
25630                 | LR__2842
25630                 | '   cursor[i]:=cursorcolor
25630     09 05 02 F6 | 	mov	_var03, arg01
25634     01 00 00 FF 
25638     36 E4 05 F1 | 	add	objptr, ##566
2563c     F2 04 02 F1 | 	add	_var03, objptr
25640     0A 00 00 FF 
25644     8C E4 05 F1 | 	add	objptr, ##5260
25648     F2 06 02 FB | 	rdlong	_var04, objptr
2564c     0B 00 00 FF 
25650     C2 E4 85 F1 | 	sub	objptr, ##5826
25654     02 07 42 FC | 	wrbyte	_var04, _var03
25658     01 13 02 F1 | 	add	arg01, _var02
2565c     00 13 0A F2 | 	cmp	arg01, _var01 wz
25660     CC FF 9F 5D |  if_ne	jmp	#LR__2842
25664                 | LR__2843
25664                 | _hg010b_spin2_setcursorcolor_ret
25664     2D 00 64 FD | 	ret
25668                 | 
25668                 | '   
25668                 | '   
25668                 | '   
25668                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
25668                 | _hg010b_spin2_setmode
25668     02 4A 05 F6 | 	mov	COUNT_, #2
2566c     A8 00 A0 FD | 	call	#pushregs_
25670                 | ' 
25670                 | ' 
25670                 | ' dl_ptr:=@emptydl[0]
25670     01 00 00 FF 
25674     1D E4 05 F1 | 	add	objptr, ##541
25678     F2 1A 02 F6 | 	mov	arg05, objptr
2567c     FD E5 85 F1 | 	sub	objptr, #509
25680     F2 1A 62 FC | 	wrlong	arg05, objptr
25684                 | ' 
25684                 | ' if cog>0 
25684     10 E4 05 F1 | 	add	objptr, #16
25688     F2 1A 02 FB | 	rdlong	arg05, objptr
2568c     30 E4 85 F1 | 	sub	objptr, #48
25690     01 1A 56 F2 | 	cmps	arg05, #1 wc
25694                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
25694     01 12 06 36 |  if_ae	mov	arg01, #1
25698     5C 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
2569c                 | ' xres:=1024
2569c     01 00 00 FF 
256a0     26 E4 05 F1 | 	add	objptr, ##550
256a4     02 00 80 FF 
256a8     F2 00 68 FC | 	wrlong	##1024, objptr
256ac                 | ' yres:=600
256ac     04 E4 05 F1 | 	add	objptr, #4
256b0     01 00 80 FF 
256b4     F2 B0 68 FC | 	wrlong	##600, objptr
256b8                 | ' ppl:=(timings[3])
256b8     1C 00 00 FF 
256bc     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
256c0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
256c4     51 E5 85 F1 | 	sub	objptr, #337
256c8     F2 1A 62 FC | 	wrlong	arg05, objptr
256cc                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
256cc     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
256d0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
256d4     01 26 66 F0 | 	shl	local01, #1
256d8     80 E4 85 F1 | 	sub	objptr, #128
256dc     F2 26 62 FC | 	wrlong	local01, objptr
256e0                 | ' cpl1:=cpl '' todo remove
256e0     04 E4 05 F1 | 	add	objptr, #4
256e4     F2 26 62 FC | 	wrlong	local01, objptr
256e8                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
256e8     04 00 00 FF 
256ec     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
256f0     41 E4 85 F1 | 	sub	objptr, #65
256f4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
256f8                 | ' repeat i from 0 to 3
256f8     00 28 06 F6 | 	mov	local02, #0
256fc     04 00 00 FF 
25700     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
25704     08 E4 05 F1 | 	add	objptr, #8
25708     97 20 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
2570c                 | LR__2850
2570c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2570c     14 27 02 F6 | 	mov	local01, local02
25710     02 26 66 F0 | 	shl	local01, #2
25714     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
25718     F2 1A 02 FB | 	rdlong	arg05, objptr
2571c     11 1A 66 F0 | 	shl	arg05, #17
25720     13 27 02 FB | 	rdlong	local01, local01
25724     0D 27 02 F1 | 	add	local01, arg05
25728     80 40 38 FF 
2572c     00 26 06 F1 | 	add	local01, ##1887502336
25730     14 1B 02 F6 | 	mov	arg05, local02
25734     02 1A 66 F0 | 	shl	arg05, #2
25738     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
2573c     0D 27 62 FC | 	wrlong	local01, arg05
25740     01 28 06 F1 | 	add	local02, #1
25744     04 28 56 F2 | 	cmps	local02, #4 wc
25748     C0 FF 9F CD |  if_b	jmp	#LR__2850
2574c                 | LR__2851
2574c     24 E4 85 F1 | 	sub	objptr, #36
25750     1C 00 00 FF 
25754     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
25758                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
25758                 | ' 'hubset(timings[10])
25758                 | ' waitms(1)                                                   	' wait for stabilization
25758     01 12 06 F6 | 	mov	arg01, #1
2575c     88 2F B0 FD | 	call	#__system___waitms
25760     1C 00 00 FF 
25764     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
25768     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2576c     61 E4 05 F1 | 	add	objptr, #97
25770     F2 28 62 FC | 	wrlong	local02, objptr
25774     14 27 52 F6 | 	abs	local01, local02 wc
25778     04 26 46 F0 | 	shr	local01, #4
2577c     13 27 82 F6 | 	negc	local01, local01
25780     9C E4 05 F1 | 	add	objptr, #156
25784     F2 26 62 FC | 	wrlong	local01, objptr
25788     A4 E4 85 F1 | 	sub	objptr, #164
2578c     F2 28 02 FB | 	rdlong	local02, objptr
25790     08 E4 05 F1 | 	add	objptr, #8
25794     F2 26 02 FB | 	rdlong	local01, objptr
25798     13 29 02 FD | 	qmul	local02, local01
2579c                 | ' lines:=timings[11]
2579c                 | ' t_lines:=lines/16
2579c                 | ' buflen:=cpl*lines						' framebuffer length in longs
2579c     29 E4 85 F1 | 	sub	objptr, #41
257a0     19 26 C6 F9 | 	decod	local01, #25
257a4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
257a8     18 28 62 FD | 	getqx	local02
257ac     F2 28 62 FC | 	wrlong	local02, objptr
257b0     38 E4 85 F1 | 	sub	objptr, #56
257b4     02 28 66 F0 | 	shl	local02, #2
257b8     14 27 82 F1 | 	sub	local01, local02
257bc     F2 26 62 FC | 	wrlong	local01, objptr
257c0     FD E4 05 F1 | 	add	objptr, #253
257c4     F2 28 02 FB | 	rdlong	local02, objptr
257c8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
257cc     0D 29 02 FD | 	qmul	local02, arg05
257d0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
257d0                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
257d0     F9 E4 85 F1 | 	sub	objptr, #249
257d4                 | ' mode_ptr:=@timings						' set pointers to timings
257d4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
257d8                 | ' graphmode:=1024+512+192+48							' det global variable
257d8                 | ' makedl(graphmode)							' make a DL for the mode
257d8     03 00 00 FF 
257dc     F0 12 06 F6 | 	mov	arg01, ##1776
257e0     18 28 62 FD | 	getqx	local02
257e4     14 27 82 F1 | 	sub	local01, local02
257e8     F2 26 62 FC | 	wrlong	local01, objptr
257ec     14 E4 05 F1 | 	add	objptr, #20
257f0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
257f4     79 E4 05 F1 | 	add	objptr, #121
257f8     03 00 80 FF 
257fc     F2 E0 69 FC | 	wrlong	##1776, objptr
25800     91 E4 85 F1 | 	sub	objptr, #145
25804     1C 00 00 FF 
25808     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
2580c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
25810                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
25810     F2 26 02 FB | 	rdlong	local01, objptr
25814     DD E4 05 F1 | 	add	objptr, #221
25818     F2 26 62 FC | 	wrlong	local01, objptr
2581c                 | ' s_font_ptr:=font_ptr
2581c     D5 E4 85 F1 | 	sub	objptr, #213
25820     F2 26 02 FB | 	rdlong	local01, objptr
25824     D9 E4 05 F1 | 	add	objptr, #217
25828     F2 26 62 FC | 	wrlong	local01, objptr
2582c                 | ' s_lines:=lines
2582c     80 E4 85 F1 | 	sub	objptr, #128
25830     F2 26 02 FB | 	rdlong	local01, objptr
25834     84 E4 05 F1 | 	add	objptr, #132
25838     F2 26 62 FC | 	wrlong	local01, objptr
2583c                 | ' s_buflen:=buflen
2583c     AD E4 85 F1 | 	sub	objptr, #173
25840     F2 26 02 FB | 	rdlong	local01, objptr
25844     B5 E4 05 F1 | 	add	objptr, #181
25848     F2 26 62 FC | 	wrlong	local01, objptr
2584c                 | ' s_cpl:=cpl
2584c     94 E4 85 F1 | 	sub	objptr, #148
25850     F2 26 02 FB | 	rdlong	local01, objptr
25854     90 E4 05 F1 | 	add	objptr, #144
25858     F2 26 62 FC | 	wrlong	local01, objptr
2585c                 | ' s_cpl1:=cpl
2585c     90 E4 85 F1 | 	sub	objptr, #144
25860     F2 26 02 FB | 	rdlong	local01, objptr
25864     98 E4 05 F1 | 	add	objptr, #152
25868     F2 26 62 FC | 	wrlong	local01, objptr
2586c                 | ' st_lines:=t_lines
2586c     0C E4 05 F1 | 	add	objptr, #12
25870     F2 26 02 FB | 	rdlong	local01, objptr
25874     04 E4 05 F1 | 	add	objptr, #4
25878     F2 26 62 FC | 	wrlong	local01, objptr
2587c                 | ' ppl:=ppl/xzoom  
2587c     28 E4 85 F1 | 	sub	objptr, #40
25880     F2 90 02 FB | 	rdlong	muldiva_, objptr
25884     2C E4 05 F1 | 	add	objptr, #44
25888     F2 92 02 FB | 	rdlong	muldivb_, objptr
2588c     05 E5 85 F1 | 	sub	objptr, #261
25890     BA 00 A0 FD | 	call	#divide_
25894     D9 E4 05 F1 | 	add	objptr, #217
25898     F2 92 62 FC | 	wrlong	muldivb_, objptr
2589c                 | ' s_ppl:=ppl
2589c     1C E4 05 F1 | 	add	objptr, #28
258a0     F2 92 62 FC | 	wrlong	muldivb_, objptr
258a4     F5 E4 85 F1 | 	sub	objptr, #245
258a8                 | ' waitms(20)							' wait 
258a8     14 12 06 F6 | 	mov	arg01, #20
258ac     38 2E B0 FD | 	call	#__system___waitms
258b0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
258b0     04 E4 05 F1 | 	add	objptr, #4
258b4     F2 12 02 FB | 	rdlong	arg01, objptr
258b8     04 E4 85 F1 | 	sub	objptr, #4
258bc     F2 16 02 FB | 	rdlong	arg03, objptr
258c0     09 17 82 F1 | 	sub	arg03, arg01
258c4     20 14 06 F6 | 	mov	arg02, #32
258c8     00 18 06 F6 | 	mov	arg04, #0
258cc     01 1A 06 F6 | 	mov	arg05, #1
258d0     0B 00 00 FF 
258d4     CC E4 05 F1 | 	add	objptr, ##5836
258d8     AC 1F B0 FD | 	call	#_psram_spin2_fill
258dc     0B 00 00 FF 
258e0     CC E4 85 F1 | 	sub	objptr, ##5836
258e4     A7 F0 03 F6 | 	mov	ptra, fp
258e8     B2 00 A0 FD | 	call	#popregs_
258ec                 | _hg010b_spin2_setmode_ret
258ec     2D 00 64 FD | 	ret
258f0                 | 
258f0                 | ' 
258f0                 | ' '****************************************************************************************************************
258f0                 | ' '                                                                                                             	*
258f0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
258f0                 | ' '                                                                                                             	*
258f0                 | ' '****************************************************************************************************************
258f0                 | ' 
258f0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
258f0                 | _hg010b_spin2_makedl
258f0                 | ' 
258f0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
258f0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
258f0                 | ' repeat i from 0 to 11                                                           ' clear DL
258f0     00 00 06 F6 | 	mov	_var01, #0
258f4     ED E5 05 F1 | 	add	objptr, #493
258f8     97 0E 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
258fc                 | LR__2860
258fc                 | '   displaylist[i]:=0 
258fc     00 03 02 F6 | 	mov	_var02, _var01
25900     02 02 66 F0 | 	shl	_var02, #2
25904     F2 02 02 F1 | 	add	_var02, objptr
25908     01 01 68 FC | 	wrlong	#0, _var02
2590c     01 00 06 F1 | 	add	_var01, #1
25910     0C 00 56 F2 | 	cmps	_var01, #12 wc
25914     E4 FF 9F CD |  if_b	jmp	#LR__2860
25918                 | LR__2861
25918                 | '                         ' 
25918                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
25918     8C E5 85 F1 | 	sub	objptr, #396
2591c     F2 02 02 FB | 	rdlong	_var02, objptr
25920     14 02 66 F0 | 	shl	_var02, #20
25924     01 02 06 F1 | 	add	_var02, #1
25928     04 E4 85 F1 | 	sub	objptr, #4
2592c     F2 00 02 FB | 	rdlong	_var01, objptr
25930     02 00 66 F0 | 	shl	_var01, #2
25934     04 00 66 F0 | 	shl	_var01, #4
25938     00 03 02 F1 | 	add	_var02, _var01
2593c     90 E5 05 F1 | 	add	objptr, #400
25940     F2 02 62 FC | 	wrlong	_var02, objptr
25944     ED E5 85 F1 | 	sub	objptr, #493
25948                 | ' displaylist[1]:=buf_ptr<<4+%10  
25948     F2 02 02 FB | 	rdlong	_var02, objptr
2594c     04 02 66 F0 | 	shl	_var02, #4
25950     02 02 06 F1 | 	add	_var02, #2
25954     F1 E5 05 F1 | 	add	objptr, #497
25958     F2 02 62 FC | 	wrlong	_var02, objptr
2595c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
2595c     04 E4 85 F1 | 	sub	objptr, #4
25960     F2 02 02 F6 | 	mov	_var02, objptr
25964     CD E5 85 F1 | 	sub	objptr, #461
25968     F2 02 62 FC | 	wrlong	_var02, objptr
2596c     20 E4 85 F1 | 	sub	objptr, #32
25970                 | _hg010b_spin2_makedl_ret
25970     2D 00 64 FD | 	ret
25974                 | 
25974                 | ' 
25974                 | ' 
25974                 | ' '****************************************************************************************************************
25974                 | ' '                                                                        					*
25974                 | ' '  Graphic primitives                                                    					*
25974                 | ' '                                                                        					*
25974                 | ' '****************************************************************************************************************
25974                 | ' 
25974                 | ' pub setspriteptr(num,ptr)
25974                 | _hg010b_spin2_setspriteptr
25974                 | ' long[@spr1ptr+12*num]:=ptr
25974     11 E5 05 F1 | 	add	objptr, #273
25978     F2 00 02 F6 | 	mov	_var01, objptr
2597c     09 03 02 F6 | 	mov	_var02, arg01
25980     01 02 66 F0 | 	shl	_var02, #1
25984     09 03 02 F1 | 	add	_var02, arg01
25988     02 02 66 F0 | 	shl	_var02, #2
2598c     01 01 02 F1 | 	add	_var01, _var02
25990     00 15 62 FC | 	wrlong	arg02, _var01
25994     11 E5 85 F1 | 	sub	objptr, #273
25998                 | _hg010b_spin2_setspriteptr_ret
25998     2D 00 64 FD | 	ret
2599c                 | 
2599c                 | ' 
2599c                 | ' pub setspritepos(num,x,y)
2599c                 | _hg010b_spin2_setspritepos
2599c                 | ' if y>601
2599c     01 00 00 FF 
259a0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
259a4                 | '   y:=601
259a4     01 00 00 3F 
259a8     59 16 06 36 |  if_ae	mov	arg03, ##601
259ac                 | ' if x>1024
259ac     02 00 00 FF 
259b0     01 14 56 F2 | 	cmps	arg02, ##1025 wc
259b4                 | '   x:=1024
259b4     0A 14 C6 39 |  if_ae	decod	arg02, #10
259b8                 | ' word[@spr1ptr+12*num+4]:=x
259b8     11 E5 05 F1 | 	add	objptr, #273
259bc     F2 00 02 F6 | 	mov	_var01, objptr
259c0     09 03 02 F6 | 	mov	_var02, arg01
259c4     01 02 66 F0 | 	shl	_var02, #1
259c8     09 03 02 F1 | 	add	_var02, arg01
259cc     02 02 66 F0 | 	shl	_var02, #2
259d0     01 01 02 F1 | 	add	_var01, _var02
259d4     04 00 06 F1 | 	add	_var01, #4
259d8     00 15 52 FC | 	wrword	arg02, _var01
259dc                 | ' word[@spr1ptr+12*num+6]:=y
259dc     F2 00 02 F6 | 	mov	_var01, objptr
259e0     09 03 02 F6 | 	mov	_var02, arg01
259e4     01 02 66 F0 | 	shl	_var02, #1
259e8     09 03 02 F1 | 	add	_var02, arg01
259ec     02 02 66 F0 | 	shl	_var02, #2
259f0     01 01 02 F1 | 	add	_var01, _var02
259f4     06 00 06 F1 | 	add	_var01, #6
259f8     00 17 52 FC | 	wrword	arg03, _var01
259fc     11 E5 85 F1 | 	sub	objptr, #273
25a00                 | _hg010b_spin2_setspritepos_ret
25a00     2D 00 64 FD | 	ret
25a04                 | 
25a04                 | ' 
25a04                 | ' pub setspritesize(num,w,h)
25a04                 | _hg010b_spin2_setspritesize
25a04                 | ' word[@spr1ptr+12*num+8]:=w
25a04     11 E5 05 F1 | 	add	objptr, #273
25a08     F2 00 02 F6 | 	mov	_var01, objptr
25a0c     09 03 02 F6 | 	mov	_var02, arg01
25a10     01 02 66 F0 | 	shl	_var02, #1
25a14     09 03 02 F1 | 	add	_var02, arg01
25a18     02 02 66 F0 | 	shl	_var02, #2
25a1c     01 01 02 F1 | 	add	_var01, _var02
25a20     08 00 06 F1 | 	add	_var01, #8
25a24     00 15 52 FC | 	wrword	arg02, _var01
25a28                 | ' word[@spr1ptr+12*num+10]:=h
25a28     F2 00 02 F6 | 	mov	_var01, objptr
25a2c     09 03 02 F6 | 	mov	_var02, arg01
25a30     01 02 66 F0 | 	shl	_var02, #1
25a34     09 03 02 F1 | 	add	_var02, arg01
25a38     02 02 66 F0 | 	shl	_var02, #2
25a3c     01 01 02 F1 | 	add	_var01, _var02
25a40     0A 00 06 F1 | 	add	_var01, #10
25a44     00 17 52 FC | 	wrword	arg03, _var01
25a48     11 E5 85 F1 | 	sub	objptr, #273
25a4c                 | _hg010b_spin2_setspritesize_ret
25a4c     2D 00 64 FD | 	ret
25a50                 | 
25a50                 | ' 
25a50                 | ' 
25a50                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
25a50                 | ' 
25a50                 | ' 
25a50                 | ' pub putpixel(x,y,c)
25a50                 | _hg010b_spin2_putpixel
25a50     04 4A 05 F6 | 	mov	COUNT_, #4
25a54     A8 00 A0 FD | 	call	#pushregs_
25a58     09 27 02 F6 | 	mov	local01, arg01
25a5c                 | ' 
25a5c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
25a5c     00 28 06 F6 | 	mov	local02, #0
25a60     00 26 56 F2 | 	cmps	local01, #0 wc
25a64     01 28 66 36 |  if_ae	neg	local02, #1
25a68     E9 E4 05 F1 | 	add	objptr, #233
25a6c     F2 1A 02 FB | 	rdlong	arg05, objptr
25a70     02 1A 66 F0 | 	shl	arg05, #2
25a74     0D 27 52 F2 | 	cmps	local01, arg05 wc
25a78     15 2B A2 F1 | 	subx	local03, local03
25a7c     15 29 02 F5 | 	and	local02, local03
25a80     00 2A 06 F6 | 	mov	local03, #0
25a84     00 14 56 F2 | 	cmps	arg02, #0 wc
25a88     01 2A 66 36 |  if_ae	neg	local03, #1
25a8c     15 29 02 F5 | 	and	local02, local03
25a90     04 E4 85 F1 | 	sub	objptr, #4
25a94     F2 2A 02 FB | 	rdlong	local03, objptr
25a98     E5 E4 85 F1 | 	sub	objptr, #229
25a9c     15 15 52 F2 | 	cmps	arg02, local03 wc
25aa0     16 2D A2 F1 | 	subx	local04, local04
25aa4     16 29 CA F7 | 	test	local02, local04 wz
25aa8     48 00 90 AD |  if_e	jmp	#LR__2870
25aac     DD E4 05 F1 | 	add	objptr, #221
25ab0     F2 12 02 FB | 	rdlong	arg01, objptr
25ab4     14 E4 05 F1 | 	add	objptr, #20
25ab8     F2 2C 02 FB | 	rdlong	local04, objptr
25abc     02 2C 66 F0 | 	shl	local04, #2
25ac0     0A 2D 02 FD | 	qmul	local04, arg02
25ac4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
25ac4     0B 15 02 F6 | 	mov	arg02, arg03
25ac8     01 16 06 F6 | 	mov	arg03, #1
25acc     00 18 06 F6 | 	mov	arg04, #0
25ad0     01 1A 06 F6 | 	mov	arg05, #1
25ad4     0A 00 00 FF 
25ad8     DB E5 05 F1 | 	add	objptr, ##5595
25adc     18 2C 62 FD | 	getqx	local04
25ae0     13 2D 02 F1 | 	add	local04, local01
25ae4     16 13 02 F1 | 	add	arg01, local04
25ae8     9C 1D B0 FD | 	call	#_psram_spin2_fill
25aec     0B 00 00 FF 
25af0     CC E4 85 F1 | 	sub	objptr, ##5836
25af4                 | LR__2870
25af4     A7 F0 03 F6 | 	mov	ptra, fp
25af8     B2 00 A0 FD | 	call	#popregs_
25afc                 | _hg010b_spin2_putpixel_ret
25afc     2D 00 64 FD | 	ret
25b00                 | 
25b00                 | ' 
25b00                 | ' pub putpixel2(x,y,c)
25b00                 | _hg010b_spin2_putpixel2
25b00     02 4A 05 F6 | 	mov	COUNT_, #2
25b04     A8 00 A0 FD | 	call	#pushregs_
25b08     DD E4 05 F1 | 	add	objptr, #221
25b0c     F2 26 02 FB | 	rdlong	local01, objptr
25b10     14 E4 05 F1 | 	add	objptr, #20
25b14     F2 1A 02 FB | 	rdlong	arg05, objptr
25b18     02 1A 66 F0 | 	shl	arg05, #2
25b1c     0A 1B 02 FD | 	qmul	arg05, arg02
25b20                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
25b20     0B 15 02 F6 | 	mov	arg02, arg03
25b24     01 16 06 F6 | 	mov	arg03, #1
25b28     00 18 06 F6 | 	mov	arg04, #0
25b2c     01 1A 06 F6 | 	mov	arg05, #1
25b30     0A 00 00 FF 
25b34     DB E5 05 F1 | 	add	objptr, ##5595
25b38     18 28 62 FD | 	getqx	local02
25b3c     09 29 02 F1 | 	add	local02, arg01
25b40     14 27 02 F1 | 	add	local01, local02
25b44     13 13 02 F6 | 	mov	arg01, local01
25b48     3C 1D B0 FD | 	call	#_psram_spin2_fill
25b4c     0B 00 00 FF 
25b50     CC E4 85 F1 | 	sub	objptr, ##5836
25b54     A7 F0 03 F6 | 	mov	ptra, fp
25b58     B2 00 A0 FD | 	call	#popregs_
25b5c                 | _hg010b_spin2_putpixel2_ret
25b5c     2D 00 64 FD | 	ret
25b60                 | 
25b60                 | ' 
25b60                 | ' pub getpixel2(x,y): c 
25b60                 | _hg010b_spin2_getpixel2
25b60     02 4A 05 F6 | 	mov	COUNT_, #2
25b64     A8 00 A0 FD | 	call	#pushregs_
25b68     0C F0 07 F1 | 	add	ptra, #12
25b6c     04 4E 05 F1 | 	add	fp, #4
25b70     A7 12 62 FC | 	wrlong	arg01, fp
25b74     04 4E 05 F1 | 	add	fp, #4
25b78     A7 14 62 FC | 	wrlong	arg02, fp
25b7c     08 4E 85 F1 | 	sub	fp, #8
25b80     A7 00 68 FC | 	wrlong	#0, fp
25b84     A7 12 02 F6 | 	mov	arg01, fp
25b88     DD E4 05 F1 | 	add	objptr, #221
25b8c     F2 14 02 FB | 	rdlong	arg02, objptr
25b90     14 E4 05 F1 | 	add	objptr, #20
25b94     F2 16 02 FB | 	rdlong	arg03, objptr
25b98     02 16 66 F0 | 	shl	arg03, #2
25b9c     08 4E 05 F1 | 	add	fp, #8
25ba0     A7 FA 01 FB | 	rdlong	result1, fp
25ba4     FD 16 02 FD | 	qmul	arg03, result1
25ba8                 | ' 
25ba8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
25ba8     04 4E 85 F1 | 	sub	fp, #4
25bac     A7 26 02 FB | 	rdlong	local01, fp
25bb0     04 4E 85 F1 | 	sub	fp, #4
25bb4     01 16 06 F6 | 	mov	arg03, #1
25bb8     0A 00 00 FF 
25bbc     DB E5 05 F1 | 	add	objptr, ##5595
25bc0     18 28 62 FD | 	getqx	local02
25bc4     13 29 02 F1 | 	add	local02, local01
25bc8     14 15 02 F1 | 	add	arg02, local02
25bcc     80 1B B0 FD | 	call	#_psram_spin2_read1
25bd0     0B 00 00 FF 
25bd4     CC E4 85 F1 | 	sub	objptr, ##5836
25bd8                 | ' return c
25bd8     A7 FA 01 FB | 	rdlong	result1, fp
25bdc     A7 F0 03 F6 | 	mov	ptra, fp
25be0     B2 00 A0 FD | 	call	#popregs_
25be4                 | _hg010b_spin2_getpixel2_ret
25be4     2D 00 64 FD | 	ret
25be8                 | 
25be8                 | '   
25be8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
25be8                 | ' 
25be8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
25be8                 | _hg010b_spin2_fastline
25be8     02 4A 05 F6 | 	mov	COUNT_, #2
25bec     A8 00 A0 FD | 	call	#pushregs_
25bf0     09 27 02 F6 | 	mov	local01, arg01
25bf4     0A 29 02 F6 | 	mov	local02, arg02
25bf8                 | ' 
25bf8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
25bf8     00 16 56 F2 | 	cmps	arg03, #0 wc
25bfc     F4 00 90 CD |  if_b	jmp	#LR__2880
25c00     01 00 00 FF 
25c04     2A E4 05 F1 | 	add	objptr, ##554
25c08     F2 1A 02 FB | 	rdlong	arg05, objptr
25c0c     01 00 00 FF 
25c10     2A E4 85 F1 | 	sub	objptr, ##554
25c14     0D 17 52 F2 | 	cmps	arg03, arg05 wc
25c18     D8 00 90 3D |  if_ae	jmp	#LR__2880
25c1c     00 26 56 F2 | 	cmps	local01, #0 wc
25c20     00 28 56 C2 |  if_b	cmps	local02, #0 wc
25c24     CC 00 90 CD |  if_b	jmp	#LR__2880
25c28     01 00 00 FF 
25c2c     26 E4 05 F1 | 	add	objptr, ##550
25c30     F2 1A 02 FB | 	rdlong	arg05, objptr
25c34     01 00 00 FF 
25c38     26 E4 85 F1 | 	sub	objptr, ##550
25c3c     0D 27 5A F2 | 	cmps	local01, arg05 wcz
25c40     01 00 00 1F 
25c44     26 E4 05 11 |  if_a	add	objptr, ##550
25c48     F2 12 02 1B |  if_a	rdlong	arg01, objptr
25c4c     01 00 00 1F 
25c50     26 E4 85 11 |  if_a	sub	objptr, ##550
25c54     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
25c58                 | '   return
25c58     98 00 90 1D |  if_a	jmp	#LR__2880
25c5c     14 27 5A F2 | 	cmps	local01, local02 wcz
25c60     13 1B 02 16 |  if_a	mov	arg05, local01
25c64     14 27 02 16 |  if_a	mov	local01, local02
25c68     0D 29 02 16 |  if_a	mov	local02, arg05
25c6c     00 26 56 F2 | 	cmps	local01, #0 wc
25c70     00 26 06 C6 |  if_b	mov	local01, #0
25c74     01 00 00 FF 
25c78     26 E4 05 F1 | 	add	objptr, ##550
25c7c     F2 1A 02 FB | 	rdlong	arg05, objptr
25c80     01 00 00 FF 
25c84     26 E4 85 F1 | 	sub	objptr, ##550
25c88     0D 29 52 F2 | 	cmps	local02, arg05 wc
25c8c     01 00 00 3F 
25c90     26 E4 05 31 |  if_ae	add	objptr, ##550
25c94     F2 28 02 3B |  if_ae	rdlong	local02, objptr
25c98     01 00 00 3F 
25c9c     26 E4 85 31 |  if_ae	sub	objptr, ##550
25ca0     DD E4 05 F1 | 	add	objptr, #221
25ca4     F2 12 02 FB | 	rdlong	arg01, objptr
25ca8     14 E4 05 F1 | 	add	objptr, #20
25cac     F2 1A 02 FB | 	rdlong	arg05, objptr
25cb0     02 1A 66 F0 | 	shl	arg05, #2
25cb4     0B 1B 02 FD | 	qmul	arg05, arg03
25cb8                 | ' if x1>x2
25cb8                 | '   x1,x2:=x2,x1
25cb8                 | ' if x1<0 
25cb8                 | '   x1:=0
25cb8                 | ' if x2>=xres
25cb8                 | '   x2:=xres-1  
25cb8     01 28 86 31 |  if_ae	sub	local02, #1
25cbc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
25cbc     01 16 06 F6 | 	mov	arg03, #1
25cc0     14 17 02 F1 | 	add	arg03, local02
25cc4     13 17 82 F1 | 	sub	arg03, local01
25cc8     0C 15 02 F6 | 	mov	arg02, arg04
25ccc     00 18 06 F6 | 	mov	arg04, #0
25cd0     01 1A 06 F6 | 	mov	arg05, #1
25cd4     0A 00 00 FF 
25cd8     DB E5 05 F1 | 	add	objptr, ##5595
25cdc     18 28 62 FD | 	getqx	local02
25ce0     13 29 02 F1 | 	add	local02, local01
25ce4     14 13 02 F1 | 	add	arg01, local02
25ce8     9C 1B B0 FD | 	call	#_psram_spin2_fill
25cec     0B 00 00 FF 
25cf0     CC E4 85 F1 | 	sub	objptr, ##5836
25cf4                 | LR__2880
25cf4     A7 F0 03 F6 | 	mov	ptra, fp
25cf8     B2 00 A0 FD | 	call	#popregs_
25cfc                 | _hg010b_spin2_fastline_ret
25cfc     2D 00 64 FD | 	ret
25d00                 | 
25d00                 | ' 
25d00                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
25d00                 | _hg010b_spin2_draw
25d00     0E 4A 05 F6 | 	mov	COUNT_, #14
25d04     A8 00 A0 FD | 	call	#pushregs_
25d08     09 27 02 F6 | 	mov	local01, arg01
25d0c     0A 29 02 F6 | 	mov	local02, arg02
25d10     0B 2B 02 F6 | 	mov	local03, arg03
25d14     0C 2D 02 F6 | 	mov	local04, arg04
25d18     0D 2F 02 F6 | 	mov	local05, arg05
25d1c                 | ' 
25d1c                 | ' if (y1==y2)
25d1c     16 29 0A F2 | 	cmp	local02, local04 wz
25d20     18 00 90 5D |  if_ne	jmp	#LR__2890
25d24                 | '   fastline(x1,x2,y1,c)
25d24     13 13 02 F6 | 	mov	arg01, local01
25d28     15 15 02 F6 | 	mov	arg02, local03
25d2c     14 17 02 F6 | 	mov	arg03, local02
25d30     17 19 02 F6 | 	mov	arg04, local05
25d34     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
25d38     F8 00 90 FD | 	jmp	#LR__2896
25d3c                 | LR__2890
25d3c                 | ' else  
25d3c                 | '   x:=x1
25d3c     13 31 02 F6 | 	mov	local06, local01
25d40                 | '   y:=y1
25d40     14 33 02 F6 | 	mov	local07, local02
25d44                 | ' 
25d44                 | '   if (x1<x2) 
25d44     15 27 52 F2 | 	cmps	local01, local03 wc
25d48                 | '     xi:=1
25d48     01 34 06 C6 |  if_b	mov	local08, #1
25d4c                 | '     dx:=x2-x1
25d4c     15 37 02 C6 |  if_b	mov	local09, local03
25d50     13 37 82 C1 |  if_b	sub	local09, local01
25d54                 | '   else
25d54                 | '     xi:=-1
25d54     01 34 66 36 |  if_ae	neg	local08, #1
25d58                 | '     dx:=x1-x2
25d58     15 27 82 31 |  if_ae	sub	local01, local03
25d5c     13 37 02 36 |  if_ae	mov	local09, local01
25d60                 | '   
25d60                 | '   if (y1<y2) 
25d60     16 29 52 F2 | 	cmps	local02, local04 wc
25d64                 | '     yi:=1
25d64     01 38 06 C6 |  if_b	mov	local10, #1
25d68                 | '     dy:=y2-y1
25d68     16 3B 02 C6 |  if_b	mov	local11, local04
25d6c     14 3B 82 C1 |  if_b	sub	local11, local02
25d70                 | '   else
25d70                 | '     yi:=-1
25d70     01 38 66 36 |  if_ae	neg	local10, #1
25d74                 | '     dy:=y1-y2
25d74     16 29 82 31 |  if_ae	sub	local02, local04
25d78     14 3B 02 36 |  if_ae	mov	local11, local02
25d7c                 | ' 
25d7c                 | '   putpixel(x,y,c)
25d7c     17 17 02 F6 | 	mov	arg03, local05
25d80     18 13 02 F6 | 	mov	arg01, local06
25d84     19 15 02 F6 | 	mov	arg02, local07
25d88     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
25d8c                 | ' 
25d8c                 | '   if (dx>dy)
25d8c     1D 37 5A F2 | 	cmps	local09, local11 wcz
25d90     50 00 90 ED |  if_be	jmp	#LR__2892
25d94                 | '     ai:=(dy-dx)*2
25d94     1D 3D 02 F6 | 	mov	local12, local11
25d98     1B 3D 82 F1 | 	sub	local12, local09
25d9c     01 3C 66 F0 | 	shl	local12, #1
25da0                 | '     bi:=dy*2
25da0     01 3A 66 F0 | 	shl	local11, #1
25da4     1D 3F 02 F6 | 	mov	local13, local11
25da8                 | '     d:= bi-dx
25da8     1F 41 02 F6 | 	mov	local14, local13
25dac     1B 41 82 F1 | 	sub	local14, local09
25db0                 | '     repeat while (x<>x2) 
25db0                 | LR__2891
25db0     15 31 0A F2 | 	cmp	local06, local03 wz
25db4     7C 00 90 AD |  if_e	jmp	#LR__2895
25db8                 | '       if (d>=0) 
25db8     00 40 56 F2 | 	cmps	local14, #0 wc
25dbc                 | '         x+=xi
25dbc     1A 31 02 31 |  if_ae	add	local06, local08
25dc0                 | '         y+=yi
25dc0     1C 33 02 31 |  if_ae	add	local07, local10
25dc4                 | '         d+=ai
25dc4     1E 41 02 31 |  if_ae	add	local14, local12
25dc8                 | '       else
25dc8                 | '         d+=bi
25dc8     1F 41 02 C1 |  if_b	add	local14, local13
25dcc                 | '         x+=xi
25dcc     1A 31 02 C1 |  if_b	add	local06, local08
25dd0                 | '       putpixel(x,y,c)
25dd0     18 13 02 F6 | 	mov	arg01, local06
25dd4     19 15 02 F6 | 	mov	arg02, local07
25dd8     17 17 02 F6 | 	mov	arg03, local05
25ddc     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
25de0     CC FF 9F FD | 	jmp	#LR__2891
25de4                 | LR__2892
25de4                 | '   else
25de4                 | '     ai:=(dx-dy)*2
25de4     1B 3D 02 F6 | 	mov	local12, local09
25de8     1D 3D 82 F1 | 	sub	local12, local11
25dec     01 3C 66 F0 | 	shl	local12, #1
25df0                 | '     bi:=dx*2
25df0     01 36 66 F0 | 	shl	local09, #1
25df4     1B 3F 02 F6 | 	mov	local13, local09
25df8                 | '     d:=bi-dy
25df8     1F 41 02 F6 | 	mov	local14, local13
25dfc     1D 41 82 F1 | 	sub	local14, local11
25e00                 | '     repeat while (y<>y2)
25e00                 | LR__2893
25e00     16 33 0A F2 | 	cmp	local07, local04 wz
25e04     2C 00 90 AD |  if_e	jmp	#LR__2894
25e08                 | '       if (d>=0)
25e08     00 40 56 F2 | 	cmps	local14, #0 wc
25e0c                 | '         x+=xi
25e0c     1A 31 02 31 |  if_ae	add	local06, local08
25e10                 | '         y+=yi
25e10     1C 33 02 31 |  if_ae	add	local07, local10
25e14                 | '         d+=ai
25e14     1E 41 02 31 |  if_ae	add	local14, local12
25e18                 | '       else
25e18                 | '         d+=bi
25e18     1F 41 02 C1 |  if_b	add	local14, local13
25e1c                 | '         y+=yi
25e1c     1C 33 02 C1 |  if_b	add	local07, local10
25e20                 | '       putpixel(x, y,c)
25e20     18 13 02 F6 | 	mov	arg01, local06
25e24     19 15 02 F6 | 	mov	arg02, local07
25e28     17 17 02 F6 | 	mov	arg03, local05
25e2c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
25e30     CC FF 9F FD | 	jmp	#LR__2893
25e34                 | LR__2894
25e34                 | LR__2895
25e34                 | LR__2896
25e34     A7 F0 03 F6 | 	mov	ptra, fp
25e38     B2 00 A0 FD | 	call	#popregs_
25e3c                 | _hg010b_spin2_draw_ret
25e3c     2D 00 64 FD | 	ret
25e40                 | 
25e40                 | '  
25e40                 | ' pub fillpush(val) 
25e40                 | _hg010b_spin2_fillpush
25e40                 | ' fillstack[fillptr]:=val
25e40     0B 00 00 FF 
25e44     BA E4 05 F1 | 	add	objptr, ##5818
25e48     F2 00 02 FB | 	rdlong	_var01, objptr
25e4c     02 00 66 F0 | 	shl	_var01, #2
25e50     0A 00 00 FF 
25e54     00 E4 85 F1 | 	sub	objptr, ##5120
25e58     F2 00 02 F1 | 	add	_var01, objptr
25e5c     00 13 62 FC | 	wrlong	arg01, _var01
25e60                 | ' fillptr+=1   
25e60     0A 00 00 FF 
25e64     00 E4 05 F1 | 	add	objptr, ##5120
25e68     F2 00 02 FB | 	rdlong	_var01, objptr
25e6c     01 00 06 F1 | 	add	_var01, #1
25e70     F2 00 62 FC | 	wrlong	_var01, objptr
25e74     0B 00 00 FF 
25e78     BA E4 85 F1 | 	sub	objptr, ##5818
25e7c                 | _hg010b_spin2_fillpush_ret
25e7c     2D 00 64 FD | 	ret
25e80                 | 
25e80                 | ' 
25e80                 | '     
25e80                 | ' pub fillpop() : val
25e80                 | _hg010b_spin2_fillpop
25e80                 | ' 
25e80                 | ' fillptr-=1
25e80     0B 00 00 FF 
25e84     BA E4 05 F1 | 	add	objptr, ##5818
25e88     F2 FA 01 FB | 	rdlong	result1, objptr
25e8c     01 FA 85 F1 | 	sub	result1, #1
25e90     F2 FA 61 FC | 	wrlong	result1, objptr
25e94                 | ' if fillptr<0
25e94     0B 00 00 FF 
25e98     BA E4 85 F1 | 	sub	objptr, ##5818
25e9c     00 FA 55 F2 | 	cmps	result1, #0 wc
25ea0                 | '   fillptr:=0
25ea0     0B 00 00 CF 
25ea4     BA E4 05 C1 |  if_b	add	objptr, ##5818
25ea8     F2 00 68 CC |  if_b	wrlong	#0, objptr
25eac     0B 00 00 CF 
25eb0     BA E4 85 C1 |  if_b	sub	objptr, ##5818
25eb4                 | '   val:=-12345
25eb4     E7 FF 7F CF 
25eb8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
25ebc     28 00 90 CD |  if_b	jmp	#LR__2900
25ec0                 | ' else 
25ec0                 | '   val:=fillstack[fillptr]
25ec0     0B 00 00 FF 
25ec4     BA E4 05 F1 | 	add	objptr, ##5818
25ec8     F2 00 02 FB | 	rdlong	_var01, objptr
25ecc     02 00 66 F0 | 	shl	_var01, #2
25ed0     0A 00 00 FF 
25ed4     00 E4 85 F1 | 	sub	objptr, ##5120
25ed8     F2 00 02 F1 | 	add	_var01, objptr
25edc     00 01 02 FB | 	rdlong	_var01, _var01
25ee0     01 00 00 FF 
25ee4     BA E4 85 F1 | 	sub	objptr, ##698
25ee8                 | LR__2900
25ee8                 | ' return val
25ee8     00 FB 01 F6 | 	mov	result1, _var01
25eec                 | _hg010b_spin2_fillpop_ret
25eec     2D 00 64 FD | 	ret
25ef0                 | 
25ef0                 | ' 
25ef0                 | '       
25ef0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
25ef0                 | _hg010b_spin2_fill
25ef0     0B 4A 05 F6 | 	mov	COUNT_, #11
25ef4     A8 00 A0 FD | 	call	#pushregs_
25ef8                 | ' 
25ef8                 | ' newcolor:=newcolor & 255
25ef8     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
25efc                 | ' oldcolor:=oldcolor & 255
25efc     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
25f00                 | ' 
25f00                 | ' if (oldcolor == newcolor) 
25f00     13 29 0A F2 | 	cmp	local02, local01 wz
25f04                 | '   return
25f04     70 02 90 AD |  if_e	jmp	#LR__2919
25f08                 | ' 
25f08                 | ' fillptr:=0
25f08     0B 00 00 FF 
25f0c     BA E4 05 F1 | 	add	objptr, ##5818
25f10     F2 00 68 FC | 	wrlong	#0, objptr
25f14                 | ' fillmax:=0
25f14     04 E4 05 F1 | 	add	objptr, #4
25f18     F2 00 68 FC | 	wrlong	#0, objptr
25f1c     0B 00 00 FF 
25f20     BE E4 85 F1 | 	sub	objptr, ##5822
25f24                 | ' fillpush(x)
25f24     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
25f28                 | ' fillpush(y)
25f28     0A 13 02 F6 | 	mov	arg01, arg02
25f2c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
25f30                 | ' y:=fillpop()
25f30     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
25f34     FD 2A 02 F6 | 	mov	local03, result1
25f38                 | ' x:=fillpop()
25f38     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
25f3c     FD 2C 02 F6 | 	mov	local04, result1
25f40                 | ' 'pinhigh(38)
25f40                 | ' repeat while (x>-1)       
25f40                 | LR__2910
25f40     00 2C 56 F2 | 	cmps	local04, #0 wc
25f44     30 02 90 CD |  if_b	jmp	#LR__2918
25f48                 | '  ' pintoggle(39)
25f48                 | '   x1 := x
25f48     16 2F 02 F6 | 	mov	local05, local04
25f4c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
25f4c                 | LR__2911
25f4c     00 30 06 F6 | 	mov	local06, #0
25f50     00 32 06 F6 | 	mov	local07, #0
25f54     00 2E 56 F2 | 	cmps	local05, #0 wc
25f58     01 32 66 36 |  if_ae	neg	local07, #1
25f5c     00 32 0E F2 | 	cmp	local07, #0 wz
25f60     00 30 26 56 |  if_ne	not	local06, #0
25f64     00 34 06 F6 | 	mov	local08, #0
25f68     00 36 06 F6 | 	mov	local09, #0
25f6c     15 15 02 F6 | 	mov	arg02, local03
25f70     17 13 02 F6 | 	mov	arg01, local05
25f74     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25f78     14 FB 09 F2 | 	cmp	result1, local02 wz
25f7c     00 36 26 A6 |  if_e	not	local09, #0
25f80     00 36 0E F2 | 	cmp	local09, #0 wz
25f84     00 34 26 56 |  if_ne	not	local08, #0
25f88     1A 31 CA F7 | 	test	local06, local08 wz
25f8c                 | '     x1--
25f8c     01 2E 86 51 |  if_ne	sub	local05, #1
25f90     B8 FF 9F 5D |  if_ne	jmp	#LR__2911
25f94                 | '   x1++
25f94     01 2E 06 F1 | 	add	local05, #1
25f98                 | '   spanabove := 0
25f98     00 38 06 F6 | 	mov	local10, #0
25f9c                 | '   spanbelow := 0
25f9c     00 3A 06 F6 | 	mov	local11, #0
25fa0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
25fa0                 | LR__2912
25fa0     00 30 06 F6 | 	mov	local06, #0
25fa4     02 00 00 FF 
25fa8     00 2E 56 F2 | 	cmps	local05, ##1024 wc
25fac     00 30 26 C6 |  if_b	not	local06, #0
25fb0     00 34 06 F6 | 	mov	local08, #0
25fb4     00 36 06 F6 | 	mov	local09, #0
25fb8     15 15 02 F6 | 	mov	arg02, local03
25fbc     17 13 02 F6 | 	mov	arg01, local05
25fc0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
25fc4     14 FB 09 F2 | 	cmp	result1, local02 wz
25fc8     00 36 26 A6 |  if_e	not	local09, #0
25fcc     00 36 0E F2 | 	cmp	local09, #0 wz
25fd0     00 34 26 56 |  if_ne	not	local08, #0
25fd4     1A 31 CA F7 | 	test	local06, local08 wz
25fd8     88 01 90 AD |  if_e	jmp	#LR__2917
25fdc                 | '     putpixel2 (x1,y, newcolor & 255)
25fdc     13 17 E2 F8 | 	getbyte	arg03, local01, #0
25fe0     17 13 02 F6 | 	mov	arg01, local05
25fe4     15 15 02 F6 | 	mov	arg02, local03
25fe8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
25fec                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
25fec     00 30 06 F6 | 	mov	local06, #0
25ff0     00 32 06 F6 | 	mov	local07, #0
25ff4     00 38 0E F2 | 	cmp	local10, #0 wz
25ff8     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
25ffc     01 32 66 26 |  if_nc_and_z	neg	local07, #1
26000     00 32 0E F2 | 	cmp	local07, #0 wz
26004     00 30 26 56 |  if_ne	not	local06, #0
26008     00 34 06 F6 | 	mov	local08, #0
2600c     00 36 06 F6 | 	mov	local09, #0
26010     15 15 02 F6 | 	mov	arg02, local03
26014     01 14 86 F1 | 	sub	arg02, #1
26018     17 13 02 F6 | 	mov	arg01, local05
2601c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
26020     14 FB 09 F2 | 	cmp	result1, local02 wz
26024     00 36 26 A6 |  if_e	not	local09, #0
26028     00 36 0E F2 | 	cmp	local09, #0 wz
2602c     00 34 26 56 |  if_ne	not	local08, #0
26030     1A 31 CA F7 | 	test	local06, local08 wz
26034     1C 00 90 AD |  if_e	jmp	#LR__2913
26038                 | '       fillpush(x1)
26038     17 13 02 F6 | 	mov	arg01, local05
2603c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
26040                 | '       fillpush(y-1)
26040     15 13 02 F6 | 	mov	arg01, local03
26044     01 12 86 F1 | 	sub	arg01, #1
26048     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
2604c                 | '       spanabove := 1 
2604c     01 38 06 F6 | 	mov	local10, #1
26050     4C 00 90 FD | 	jmp	#LR__2914
26054                 | LR__2913
26054                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
26054     00 30 06 F6 | 	mov	local06, #0
26058     00 32 06 F6 | 	mov	local07, #0
2605c     00 38 0E F2 | 	cmp	local10, #0 wz
26060     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
26064     01 32 66 16 |  if_a	neg	local07, #1
26068     00 32 0E F2 | 	cmp	local07, #0 wz
2606c     00 30 26 56 |  if_ne	not	local06, #0
26070     00 34 06 F6 | 	mov	local08, #0
26074     00 36 06 F6 | 	mov	local09, #0
26078     15 15 02 F6 | 	mov	arg02, local03
2607c     01 14 86 F1 | 	sub	arg02, #1
26080     17 13 02 F6 | 	mov	arg01, local05
26084     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
26088     14 FB 09 F2 | 	cmp	result1, local02 wz
2608c     00 36 26 56 |  if_ne	not	local09, #0
26090     00 36 0E F2 | 	cmp	local09, #0 wz
26094     00 34 26 56 |  if_ne	not	local08, #0
26098     1A 31 CA F7 | 	test	local06, local08 wz
2609c                 | '       spanabove := 0 
2609c     00 38 06 56 |  if_ne	mov	local10, #0
260a0                 | LR__2914
260a0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
260a0     00 30 06 F6 | 	mov	local06, #0
260a4     00 32 06 F6 | 	mov	local07, #0
260a8     00 3A 0E F2 | 	cmp	local11, #0 wz
260ac     01 00 00 AF 
260b0     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
260b4     01 32 66 86 |  if_c_and_z	neg	local07, #1
260b8     00 32 0E F2 | 	cmp	local07, #0 wz
260bc     00 30 26 56 |  if_ne	not	local06, #0
260c0     00 34 06 F6 | 	mov	local08, #0
260c4     00 36 06 F6 | 	mov	local09, #0
260c8     15 15 02 F6 | 	mov	arg02, local03
260cc     01 14 06 F1 | 	add	arg02, #1
260d0     17 13 02 F6 | 	mov	arg01, local05
260d4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
260d8     14 FB 09 F2 | 	cmp	result1, local02 wz
260dc     00 36 26 A6 |  if_e	not	local09, #0
260e0     00 36 0E F2 | 	cmp	local09, #0 wz
260e4     00 34 26 56 |  if_ne	not	local08, #0
260e8     1A 31 CA F7 | 	test	local06, local08 wz
260ec     1C 00 90 AD |  if_e	jmp	#LR__2915
260f0                 | '       fillpush(x1)
260f0     17 13 02 F6 | 	mov	arg01, local05
260f4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
260f8                 | '       fillpush(y + 1)
260f8     15 13 02 F6 | 	mov	arg01, local03
260fc     01 12 06 F1 | 	add	arg01, #1
26100     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
26104                 | '       spanBelow := 1
26104     01 3A 06 F6 | 	mov	local11, #1
26108     50 00 90 FD | 	jmp	#LR__2916
2610c                 | LR__2915
2610c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
2610c     00 30 06 F6 | 	mov	local06, #0
26110     00 32 06 F6 | 	mov	local07, #0
26114     00 3A 0E F2 | 	cmp	local11, #0 wz
26118     01 00 00 5F 
2611c     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
26120     01 32 66 46 |  if_c_and_nz	neg	local07, #1
26124     00 32 0E F2 | 	cmp	local07, #0 wz
26128     00 30 26 56 |  if_ne	not	local06, #0
2612c     00 34 06 F6 | 	mov	local08, #0
26130     00 36 06 F6 | 	mov	local09, #0
26134     15 15 02 F6 | 	mov	arg02, local03
26138     01 14 06 F1 | 	add	arg02, #1
2613c     17 13 02 F6 | 	mov	arg01, local05
26140     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
26144     14 FB 09 F2 | 	cmp	result1, local02 wz
26148     00 36 26 56 |  if_ne	not	local09, #0
2614c     00 36 0E F2 | 	cmp	local09, #0 wz
26150     00 34 26 56 |  if_ne	not	local08, #0
26154     1A 31 CA F7 | 	test	local06, local08 wz
26158                 | '       spanbelow := 0
26158     00 3A 06 56 |  if_ne	mov	local11, #0
2615c                 | LR__2916
2615c                 | '     x1++
2615c     01 2E 06 F1 | 	add	local05, #1
26160     3C FE 9F FD | 	jmp	#LR__2912
26164                 | LR__2917
26164                 | '   y:=fillpop()
26164     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
26168     FD 2A 02 F6 | 	mov	local03, result1
2616c                 | '   x:=fillpop()
2616c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
26170     FD 2C 02 F6 | 	mov	local04, result1
26174     C8 FD 9F FD | 	jmp	#LR__2910
26178                 | LR__2918
26178                 | LR__2919
26178     A7 F0 03 F6 | 	mov	ptra, fp
2617c     B2 00 A0 FD | 	call	#popregs_
26180                 | _hg010b_spin2_fill_ret
26180     2D 00 64 FD | 	ret
26184                 | 
26184                 | ' 'pinlow(38)    
26184                 | ' 
26184                 | ' '-- A filled circle -----------------------------------------------------
26184                 | ' 
26184                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
26184                 | _hg010b_spin2_fcircle
26184     08 4A 05 F6 | 	mov	COUNT_, #8
26188     A8 00 A0 FD | 	call	#pushregs_
2618c     0B 27 02 F6 | 	mov	local01, arg03
26190     FF FF 7F FF 
26194     FE 27 06 FD | 	qmul	local01, ##-2
26198     09 29 02 F6 | 	mov	local02, arg01
2619c     0A 2B 02 F6 | 	mov	local03, arg02
261a0     0C 2D 02 F6 | 	mov	local04, arg04
261a4                 | ' 
261a4                 | ' d:=5-4*r
261a4     13 19 02 F6 | 	mov	arg04, local01
261a8     02 18 66 F0 | 	shl	arg04, #2
261ac     05 2E 06 F6 | 	mov	local05, #5
261b0     0C 2F 82 F1 | 	sub	local05, arg04
261b4                 | ' x:=0
261b4     00 30 06 F6 | 	mov	local06, #0
261b8                 | ' y:=r
261b8                 | ' da:=(-2*r+5)*4
261b8                 | ' db:=3*4
261b8     0C 32 06 F6 | 	mov	local07, #12
261bc                 | ' repeat while (x<=y) 
261bc     18 34 62 FD | 	getqx	local08
261c0     05 34 06 F1 | 	add	local08, #5
261c4     02 34 66 F0 | 	shl	local08, #2
261c8                 | LR__2920
261c8     13 31 5A F2 | 	cmps	local06, local01 wcz
261cc     B4 00 90 1D |  if_a	jmp	#LR__2922
261d0                 | '   fastline(x0-x,x0+x,y0-y,c)
261d0     14 13 02 F6 | 	mov	arg01, local02
261d4     18 13 82 F1 | 	sub	arg01, local06
261d8     14 15 02 F6 | 	mov	arg02, local02
261dc     18 15 02 F1 | 	add	arg02, local06
261e0     15 17 02 F6 | 	mov	arg03, local03
261e4     13 17 82 F1 | 	sub	arg03, local01
261e8     16 19 02 F6 | 	mov	arg04, local04
261ec     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
261f0                 | '   fastline(x0-x,x0+x,y0+y,c)
261f0     14 13 02 F6 | 	mov	arg01, local02
261f4     18 13 82 F1 | 	sub	arg01, local06
261f8     14 15 02 F6 | 	mov	arg02, local02
261fc     18 15 02 F1 | 	add	arg02, local06
26200     15 17 02 F6 | 	mov	arg03, local03
26204     13 17 02 F1 | 	add	arg03, local01
26208     16 19 02 F6 | 	mov	arg04, local04
2620c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
26210                 | '   fastline(x0-y,x0+y,y0-x,c)
26210     14 13 02 F6 | 	mov	arg01, local02
26214     13 13 82 F1 | 	sub	arg01, local01
26218     14 15 02 F6 | 	mov	arg02, local02
2621c     13 15 02 F1 | 	add	arg02, local01
26220     15 17 02 F6 | 	mov	arg03, local03
26224     18 17 82 F1 | 	sub	arg03, local06
26228     16 19 02 F6 | 	mov	arg04, local04
2622c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
26230                 | '   fastline(x0-y,x0+y,y0+x,c)
26230     14 13 02 F6 | 	mov	arg01, local02
26234     13 13 82 F1 | 	sub	arg01, local01
26238     14 15 02 F6 | 	mov	arg02, local02
2623c     13 15 02 F1 | 	add	arg02, local01
26240     15 17 02 F6 | 	mov	arg03, local03
26244     18 17 02 F1 | 	add	arg03, local06
26248     16 19 02 F6 | 	mov	arg04, local04
2624c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
26250                 | '   if d>0 
26250     01 2E 56 F2 | 	cmps	local05, #1 wc
26254     18 00 90 CD |  if_b	jmp	#LR__2921
26258                 | '     d+=da
26258     1A 2F 02 F1 | 	add	local05, local08
2625c                 | '     y-=1
2625c     01 26 86 F1 | 	sub	local01, #1
26260                 | '     x+=1
26260     01 30 06 F1 | 	add	local06, #1
26264                 | '     da+=4*4
26264     10 34 06 F1 | 	add	local08, #16
26268                 | '     db+=2*4
26268     08 32 06 F1 | 	add	local07, #8
2626c     58 FF 9F FD | 	jmp	#LR__2920
26270                 | LR__2921
26270                 | '   else
26270                 | '     d+=db
26270     19 2F 02 F1 | 	add	local05, local07
26274                 | '     x+=1
26274     01 30 06 F1 | 	add	local06, #1
26278                 | '     da+=2*4
26278     08 34 06 F1 | 	add	local08, #8
2627c                 | '     db+=2*4
2627c     08 32 06 F1 | 	add	local07, #8
26280     44 FF 9F FD | 	jmp	#LR__2920
26284                 | LR__2922
26284     A7 F0 03 F6 | 	mov	ptra, fp
26288     B2 00 A0 FD | 	call	#popregs_
2628c                 | _hg010b_spin2_fcircle_ret
2628c     2D 00 64 FD | 	ret
26290                 | 
26290                 | '  
26290                 | ' '-- A circle ------------------------------------------------------------ 
26290                 | '  
26290                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
26290                 | _hg010b_spin2_circle
26290     08 4A 05 F6 | 	mov	COUNT_, #8
26294     A8 00 A0 FD | 	call	#pushregs_
26298     0B 27 02 F6 | 	mov	local01, arg03
2629c     FF FF 7F FF 
262a0     FE 27 06 FD | 	qmul	local01, ##-2
262a4     09 29 02 F6 | 	mov	local02, arg01
262a8     0A 2B 02 F6 | 	mov	local03, arg02
262ac     0C 2D 02 F6 | 	mov	local04, arg04
262b0                 | ' 
262b0                 | '  
262b0                 | ' d:=5-4*r
262b0     13 19 02 F6 | 	mov	arg04, local01
262b4     02 18 66 F0 | 	shl	arg04, #2
262b8     05 2E 06 F6 | 	mov	local05, #5
262bc     0C 2F 82 F1 | 	sub	local05, arg04
262c0                 | ' x:=0
262c0     00 30 06 F6 | 	mov	local06, #0
262c4                 | ' y:=r
262c4                 | ' da:=(-2*r+5)*4
262c4                 | ' db:=3*4
262c4     0C 32 06 F6 | 	mov	local07, #12
262c8                 | ' repeat while (x<=y) 
262c8     18 34 62 FD | 	getqx	local08
262cc     05 34 06 F1 | 	add	local08, #5
262d0     02 34 66 F0 | 	shl	local08, #2
262d4                 | LR__2930
262d4     13 31 5A F2 | 	cmps	local06, local01 wcz
262d8     F4 00 90 1D |  if_a	jmp	#LR__2932
262dc                 | '   putpixel(x0-x,y0-y,c)
262dc     14 13 02 F6 | 	mov	arg01, local02
262e0     18 13 82 F1 | 	sub	arg01, local06
262e4     15 15 02 F6 | 	mov	arg02, local03
262e8     13 15 82 F1 | 	sub	arg02, local01
262ec     16 17 02 F6 | 	mov	arg03, local04
262f0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
262f4                 | '   putpixel(x0-x,y0+y,c)
262f4     14 13 02 F6 | 	mov	arg01, local02
262f8     18 13 82 F1 | 	sub	arg01, local06
262fc     15 15 02 F6 | 	mov	arg02, local03
26300     13 15 02 F1 | 	add	arg02, local01
26304     16 17 02 F6 | 	mov	arg03, local04
26308     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2630c                 | '   putpixel(x0+x,y0-y,c)
2630c     14 13 02 F6 | 	mov	arg01, local02
26310     18 13 02 F1 | 	add	arg01, local06
26314     15 15 02 F6 | 	mov	arg02, local03
26318     13 15 82 F1 | 	sub	arg02, local01
2631c     16 17 02 F6 | 	mov	arg03, local04
26320     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
26324                 | '   putpixel(x0+x,y0+y,c)
26324     14 13 02 F6 | 	mov	arg01, local02
26328     18 13 02 F1 | 	add	arg01, local06
2632c     15 15 02 F6 | 	mov	arg02, local03
26330     13 15 02 F1 | 	add	arg02, local01
26334     16 17 02 F6 | 	mov	arg03, local04
26338     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2633c                 | '   putpixel(x0-y,y0-x,c)
2633c     14 13 02 F6 | 	mov	arg01, local02
26340     13 13 82 F1 | 	sub	arg01, local01
26344     15 15 02 F6 | 	mov	arg02, local03
26348     18 15 82 F1 | 	sub	arg02, local06
2634c     16 17 02 F6 | 	mov	arg03, local04
26350     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
26354                 | '   putpixel(x0-y,y0+x,c)
26354     14 13 02 F6 | 	mov	arg01, local02
26358     13 13 82 F1 | 	sub	arg01, local01
2635c     15 15 02 F6 | 	mov	arg02, local03
26360     18 15 02 F1 | 	add	arg02, local06
26364     16 17 02 F6 | 	mov	arg03, local04
26368     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2636c                 | '   putpixel(x0+y,y0-x,c)
2636c     14 13 02 F6 | 	mov	arg01, local02
26370     13 13 02 F1 | 	add	arg01, local01
26374     15 15 02 F6 | 	mov	arg02, local03
26378     18 15 82 F1 | 	sub	arg02, local06
2637c     16 17 02 F6 | 	mov	arg03, local04
26380     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
26384                 | '   putpixel(x0+y,y0+x,c)
26384     14 13 02 F6 | 	mov	arg01, local02
26388     13 13 02 F1 | 	add	arg01, local01
2638c     15 15 02 F6 | 	mov	arg02, local03
26390     18 15 02 F1 | 	add	arg02, local06
26394     16 17 02 F6 | 	mov	arg03, local04
26398     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2639c                 | '   if d>0 
2639c     01 2E 56 F2 | 	cmps	local05, #1 wc
263a0     18 00 90 CD |  if_b	jmp	#LR__2931
263a4                 | '     d+=da
263a4     1A 2F 02 F1 | 	add	local05, local08
263a8                 | '     y-=1
263a8     01 26 86 F1 | 	sub	local01, #1
263ac                 | '     x+=1
263ac     01 30 06 F1 | 	add	local06, #1
263b0                 | '     da+=4*4
263b0     10 34 06 F1 | 	add	local08, #16
263b4                 | '     db+=2*4
263b4     08 32 06 F1 | 	add	local07, #8
263b8     18 FF 9F FD | 	jmp	#LR__2930
263bc                 | LR__2931
263bc                 | '   else
263bc                 | '     d+=db
263bc     19 2F 02 F1 | 	add	local05, local07
263c0                 | '     x+=1
263c0     01 30 06 F1 | 	add	local06, #1
263c4                 | '     da+=2*4
263c4     08 34 06 F1 | 	add	local08, #8
263c8                 | '     db+=2*4
263c8     08 32 06 F1 | 	add	local07, #8
263cc     04 FF 9F FD | 	jmp	#LR__2930
263d0                 | LR__2932
263d0     A7 F0 03 F6 | 	mov	ptra, fp
263d4     B2 00 A0 FD | 	call	#popregs_
263d8                 | _hg010b_spin2_circle_ret
263d8     2D 00 64 FD | 	ret
263dc                 | 
263dc                 | '     
263dc                 | ' '-- A frame (an empty rectangle) ---------------------------------------
263dc                 | ' 
263dc                 | ' pub frame(x1,y1,x2,y2,c)
263dc                 | _hg010b_spin2_frame
263dc     05 4A 05 F6 | 	mov	COUNT_, #5
263e0     A8 00 A0 FD | 	call	#pushregs_
263e4     09 27 02 F6 | 	mov	local01, arg01
263e8     0A 29 02 F6 | 	mov	local02, arg02
263ec     0B 2B 02 F6 | 	mov	local03, arg03
263f0     0C 2D 02 F6 | 	mov	local04, arg04
263f4     0D 2F 02 F6 | 	mov	local05, arg05
263f8                 | ' 
263f8                 | ' fastline(x1,x2,y1,c)
263f8     13 13 02 F6 | 	mov	arg01, local01
263fc     15 15 02 F6 | 	mov	arg02, local03
26400     14 17 02 F6 | 	mov	arg03, local02
26404     17 19 02 F6 | 	mov	arg04, local05
26408     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
2640c                 | ' fastline(x1,x2,y2,c)
2640c     13 13 02 F6 | 	mov	arg01, local01
26410     15 15 02 F6 | 	mov	arg02, local03
26414     16 17 02 F6 | 	mov	arg03, local04
26418     17 19 02 F6 | 	mov	arg04, local05
2641c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
26420                 | ' line(x1,y1,x1,y2,c)
26420     13 13 02 F6 | 	mov	arg01, local01
26424     14 15 02 F6 | 	mov	arg02, local02
26428     13 17 02 F6 | 	mov	arg03, local01
2642c     16 19 02 F6 | 	mov	arg04, local04
26430     17 1B 02 F6 | 	mov	arg05, local05
26434                 | ' draw(x1,y1,x2,y2,c)
26434     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
26438                 | ' line(x2,y1,x2,y2,c)
26438     15 13 02 F6 | 	mov	arg01, local03
2643c     14 15 02 F6 | 	mov	arg02, local02
26440     15 17 02 F6 | 	mov	arg03, local03
26444     16 19 02 F6 | 	mov	arg04, local04
26448     17 1B 02 F6 | 	mov	arg05, local05
2644c                 | ' draw(x1,y1,x2,y2,c)
2644c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
26450     A7 F0 03 F6 | 	mov	ptra, fp
26454     B2 00 A0 FD | 	call	#popregs_
26458                 | _hg010b_spin2_frame_ret
26458     2D 00 64 FD | 	ret
2645c                 | 
2645c                 | ' 
2645c                 | ' '-- A box (a filled rectangle) ----------------------------------------
2645c                 | ' 
2645c                 | ' pub box(x1,y1,x2,y2,c) |yy
2645c                 | _hg010b_spin2_box
2645c     06 4A 05 F6 | 	mov	COUNT_, #6
26460     A8 00 A0 FD | 	call	#pushregs_
26464     09 27 02 F6 | 	mov	local01, arg01
26468     0A 29 02 F6 | 	mov	local02, arg02
2646c     0B 2B 02 F6 | 	mov	local03, arg03
26470     0C 2D 02 F6 | 	mov	local04, arg04
26474     0D 2F 02 F6 | 	mov	local05, arg05
26478                 | ' 
26478                 | ' repeat yy from y1 to y2
26478     14 2D 52 F2 | 	cmps	local04, local02 wc
2647c     01 30 86 F6 | 	negc	local06, #1
26480     18 2D 02 F1 | 	add	local04, local06
26484                 | LR__2940
26484                 | '   fastline(x1,x2,yy,c)
26484     13 13 02 F6 | 	mov	arg01, local01
26488     15 15 02 F6 | 	mov	arg02, local03
2648c     17 19 02 F6 | 	mov	arg04, local05
26490     14 17 02 F6 | 	mov	arg03, local02
26494     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
26498     18 29 02 F1 | 	add	local02, local06
2649c     16 29 0A F2 | 	cmp	local02, local04 wz
264a0     E0 FF 9F 5D |  if_ne	jmp	#LR__2940
264a4     A7 F0 03 F6 | 	mov	ptra, fp
264a8     B2 00 A0 FD | 	call	#popregs_
264ac                 | _hg010b_spin2_box_ret
264ac     2D 00 64 FD | 	ret
264b0                 | 
264b0                 | '       
264b0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
264b0                 | _hg010b_spin2_putcharxycgf
264b0                 | ' 
264b0                 | '  
264b0                 | ' repeat yy from 0 to 15
264b0     00 00 06 F6 | 	mov	_var01, #0
264b4     97 8C 48 FB | 	callpa	#(@LR__2952-@LR__2950)>>2,fcache_load_ptr_
264b8                 | LR__2950
264b8                 | ' 
264b8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
264b8     95 E4 05 F1 | 	add	objptr, #149
264bc     F2 02 02 FB | 	rdlong	_var02, objptr
264c0     0A 02 66 F0 | 	shl	_var02, #10
264c4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
264c8     01 05 02 F1 | 	add	_var03, _var02
264cc     0B 03 02 F6 | 	mov	_var02, arg03
264d0     04 02 66 F0 | 	shl	_var02, #4
264d4     01 05 02 F1 | 	add	_var03, _var02
264d8     00 05 02 F1 | 	add	_var03, _var01
264dc     02 05 C2 FA | 	rdbyte	_var03, _var03
264e0                 | '   asm
264e0     00 04 0E F4 | 	testb	_var03, #0 wz
264e4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
264e8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
264ec     01 04 0E F4 | 	testb	_var03, #1 wz
264f0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
264f4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
264f8     02 04 0E F4 | 	testb	_var03, #2 wz
264fc     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
26500     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
26504     03 04 0E F4 | 	testb	_var03, #3 wz
26508     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
2650c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
26510     04 04 0E F4 | 	testb	_var03, #4 wz
26514     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
26518     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
2651c     05 04 0E F4 | 	testb	_var03, #5 wz
26520     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
26524     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
26528     06 04 0E F4 | 	testb	_var03, #6 wz
2652c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
26530     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
26534     07 04 0E F4 | 	testb	_var03, #7 wz
26538     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
2653c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
26540                 | '   
26540                 | '   ccc[0]:=c1
26540     99 E5 05 F1 | 	add	objptr, #409
26544     F2 06 62 FC | 	wrlong	_var04, objptr
26548                 | '   ccc[1]:=c2 
26548     04 E4 05 F1 | 	add	objptr, #4
2654c     F2 08 62 FC | 	wrlong	_var05, objptr
26550                 | '   long[mailbox0][2]:=8
26550     49 E4 85 F1 | 	sub	objptr, #73
26554     F2 04 02 FB | 	rdlong	_var03, objptr
26558     08 04 06 F1 | 	add	_var03, #8
2655c     02 11 68 FC | 	wrlong	#8, _var03
26560                 | '   long[mailbox0][1]:=@ccc
26560     45 E4 05 F1 | 	add	objptr, #69
26564     F2 04 02 F6 | 	mov	_var03, objptr
26568     45 E4 85 F1 | 	sub	objptr, #69
2656c     F2 02 02 FB | 	rdlong	_var02, objptr
26570     04 02 06 F1 | 	add	_var02, #4
26574     01 05 62 FC | 	wrlong	_var03, _var02
26578                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
26578     0C E5 85 F1 | 	sub	objptr, #268
2657c     F2 04 02 FB | 	rdlong	_var03, objptr
26580     0A 03 02 F6 | 	mov	_var02, arg02
26584     00 03 02 F1 | 	add	_var02, _var01
26588     0A 02 66 F0 | 	shl	_var02, #10
2658c     09 0B 02 F6 | 	mov	_var06, arg01
26590     02 0A 66 F0 | 	shl	_var06, #2
26594     05 03 02 F1 | 	add	_var02, _var06
26598     01 05 02 F1 | 	add	_var03, _var02
2659c     00 00 78 FF 
265a0     00 04 06 F1 | 	add	_var03, ##-268435456
265a4     0C E5 05 F1 | 	add	objptr, #268
265a8     F2 0A 02 FB | 	rdlong	_var06, objptr
265ac     05 05 62 FC | 	wrlong	_var03, _var06
265b0                 | '   repeat
265b0                 | LR__2951
265b0     F2 04 02 FB | 	rdlong	_var03, objptr
265b4     02 03 02 FB | 	rdlong	_var02, _var03
265b8     00 02 56 F2 | 	cmps	_var02, #0 wc
265bc     F0 FF 9F CD |  if_b	jmp	#LR__2951
265c0     E9 E5 85 F1 | 	sub	objptr, #489
265c4     01 00 06 F1 | 	add	_var01, #1
265c8     10 00 56 F2 | 	cmps	_var01, #16 wc
265cc     E8 FE 9F CD |  if_b	jmp	#LR__2950
265d0                 | LR__2952
265d0                 | _hg010b_spin2_putcharxycgf_ret
265d0     2D 00 64 FD | 	ret
265d4                 | 
265d4                 | ' 
265d4                 | ' 
265d4                 | ' '**********************************************************************r***
265d4                 | ' '                                                                        *
265d4                 | ' ' Font related functions                                                 *
265d4                 | ' '                                                                        *
265d4                 | ' '*************************************************************************
265d4                 | ' 
265d4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
265d4                 | ' 
265d4                 | ' pub setfontfamily(afontnum)
265d4                 | _hg010b_spin2_setfontfamily
265d4                 | ' 
265d4                 | ' font_family:=afontnum
265d4     95 E4 05 F1 | 	add	objptr, #149
265d8     F2 12 62 FC | 	wrlong	arg01, objptr
265dc     95 E4 85 F1 | 	sub	objptr, #149
265e0                 | ' 'if afontnum==8
265e0                 | ' '  font_ptr:=@amiga_font
265e0                 | ' 
265e0                 | ' if afontnum==4
265e0     04 12 0E F2 | 	cmp	arg01, #4 wz
265e4                 | '   font_ptr:=@st_font
265e4     08 00 00 AF 
265e8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
265ec     08 E4 05 A1 |  if_e	add	objptr, #8
265f0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
265f4     08 E4 85 A1 |  if_e	sub	objptr, #8
265f8     08 00 00 AF 
265fc     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
26600                 | ' if afontnum==0
26600     00 12 0E F2 | 	cmp	arg01, #0 wz
26604                 | '   font_ptr:=@vga_font
26604     08 E4 05 A1 |  if_e	add	objptr, #8
26608     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
2660c     08 E4 85 A1 |  if_e	sub	objptr, #8
26610                 | _hg010b_spin2_setfontfamily_ret
26610     2D 00 64 FD | 	ret
26614                 | 
26614                 | ' 
26614                 | ' ''--------- Redefine a character
26614                 | ' 
26614                 | ' pub defchar(ch,ptr) | s,i ' 
26614                 | _hg010b_spin2_defchar
26614                 | ' 
26614                 | ' s:=font_ptr+ch*16
26614     08 E4 05 F1 | 	add	objptr, #8
26618     F2 00 02 FB | 	rdlong	_var01, objptr
2661c     08 E4 85 F1 | 	sub	objptr, #8
26620     04 12 66 F0 | 	shl	arg01, #4
26624     09 01 02 F1 | 	add	_var01, arg01
26628                 | ' repeat i from 0 to 15
26628     00 02 06 F6 | 	mov	_var02, #0
2662c     97 12 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
26630                 | LR__2960
26630                 | '   byte[s+i]:=byte[ptr+i]
26630     0A 13 02 F6 | 	mov	arg01, arg02
26634     01 13 02 F1 | 	add	arg01, _var02
26638     00 05 02 F6 | 	mov	_var03, _var01
2663c     09 13 C2 FA | 	rdbyte	arg01, arg01
26640     01 05 02 F1 | 	add	_var03, _var02
26644     02 13 42 FC | 	wrbyte	arg01, _var03
26648     01 02 06 F1 | 	add	_var02, #1
2664c     10 02 56 F2 | 	cmps	_var02, #16 wc
26650     DC FF 9F CD |  if_b	jmp	#LR__2960
26654                 | LR__2961
26654                 | _hg010b_spin2_defchar_ret
26654     2D 00 64 FD | 	ret
26658                 | 
26658                 | ' 
26658                 | ' 
26658                 | ' '*************************************************************************
26658                 | ' '                                                                        *
26658                 | ' '  Cursor functions                                                      *
26658                 | ' '                                                                        *
26658                 | ' '*************************************************************************
26658                 | ' 
26658                 | ' 
26658                 | ' pub setcursorpos(x,y)
26658                 | _hg010b_spin2_setcursorpos
26658                 | ' 
26658                 | ' ''---------- Set the (x,y) position of cursor
26658                 | ' 
26658                 | ' cursor_x:=x
26658     3C E4 05 F1 | 	add	objptr, #60
2665c     F2 12 52 FC | 	wrword	arg01, objptr
26660                 | ' cursor_y:=y
26660     02 E4 05 F1 | 	add	objptr, #2
26664     F2 14 42 FC | 	wrbyte	arg02, objptr
26668                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26668     02 E4 85 F1 | 	sub	objptr, #2
2666c     F2 14 E2 FA | 	rdword	arg02, objptr
26670     02 14 66 F0 | 	shl	arg02, #2
26674     02 E4 05 F1 | 	add	objptr, #2
26678     F2 16 C2 FA | 	rdbyte	arg03, objptr
2667c     3E E4 85 F1 | 	sub	objptr, #62
26680     04 16 66 F0 | 	shl	arg03, #4
26684     04 16 06 F1 | 	add	arg03, #4
26688     11 12 06 F6 | 	mov	arg01, #17
2668c     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
26690                 | _hg010b_spin2_setcursorpos_ret
26690     2D 00 64 FD | 	ret
26694                 | 
26694                 | ' 
26694                 | ' pub setcursorx(x)
26694                 | _hg010b_spin2_setcursorx
26694                 | ' cursor_x:=x
26694     3C E4 05 F1 | 	add	objptr, #60
26698     F2 12 52 FC | 	wrword	arg01, objptr
2669c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2669c     F2 14 E2 FA | 	rdword	arg02, objptr
266a0     02 14 66 F0 | 	shl	arg02, #2
266a4     02 E4 05 F1 | 	add	objptr, #2
266a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
266ac     3E E4 85 F1 | 	sub	objptr, #62
266b0     04 16 66 F0 | 	shl	arg03, #4
266b4     04 16 06 F1 | 	add	arg03, #4
266b8     11 12 06 F6 | 	mov	arg01, #17
266bc     DC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
266c0                 | _hg010b_spin2_setcursorx_ret
266c0     2D 00 64 FD | 	ret
266c4                 | 
266c4                 | ' 
266c4                 | ' pub setcursory(y) 
266c4                 | _hg010b_spin2_setcursory
266c4                 | ' cursor_y:=y
266c4     3E E4 05 F1 | 	add	objptr, #62
266c8     F2 12 42 FC | 	wrbyte	arg01, objptr
266cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
266cc     02 E4 85 F1 | 	sub	objptr, #2
266d0     F2 14 E2 FA | 	rdword	arg02, objptr
266d4     02 14 66 F0 | 	shl	arg02, #2
266d8     02 E4 05 F1 | 	add	objptr, #2
266dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
266e0     3E E4 85 F1 | 	sub	objptr, #62
266e4     04 16 66 F0 | 	shl	arg03, #4
266e8     04 16 06 F1 | 	add	arg03, #4
266ec     11 12 06 F6 | 	mov	arg01, #17
266f0     A8 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
266f4                 | _hg010b_spin2_setcursory_ret
266f4     2D 00 64 FD | 	ret
266f8                 | 
266f8                 | ' 
266f8                 | ' '*************************************************************************
266f8                 | ' '                                                                        *
266f8                 | ' '  VBlank functions                                                      *
266f8                 | ' '                                                                        *
266f8                 | ' '*************************************************************************
266f8                 | ' 
266f8                 | ' pub waitvbl(amount) | i
266f8                 | _hg010b_spin2_waitvbl
266f8     03 4A 05 F6 | 	mov	COUNT_, #3
266fc     A8 00 A0 FD | 	call	#pushregs_
26700     09 27 02 F6 | 	mov	local01, arg01
26704                 | ' 
26704                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
26704                 | ' 
26704                 | ' repeat i from 1 to amount
26704     01 28 06 F6 | 	mov	local02, #1
26708     01 26 56 F2 | 	cmps	local01, #1 wc
2670c     01 2A 86 F6 | 	negc	local03, #1
26710     15 27 02 F1 | 	add	local01, local03
26714                 | LR__2970
26714                 | '   repeat until vblank==0
26714                 | LR__2971
26714     49 E4 05 F1 | 	add	objptr, #73
26718     F2 12 0A FB | 	rdlong	arg01, objptr wz
2671c     49 E4 85 F1 | 	sub	objptr, #73
26720     0C 00 90 AD |  if_e	jmp	#LR__2972
26724                 | '     waitus(100)
26724     64 12 06 F6 | 	mov	arg01, #100
26728     28 20 B0 FD | 	call	#__system___waitus
2672c     E4 FF 9F FD | 	jmp	#LR__2971
26730                 | LR__2972
26730                 | '   repeat until vblank==1
26730                 | LR__2973
26730     49 E4 05 F1 | 	add	objptr, #73
26734     F2 12 02 FB | 	rdlong	arg01, objptr
26738     49 E4 85 F1 | 	sub	objptr, #73
2673c     01 12 0E F2 | 	cmp	arg01, #1 wz
26740     0C 00 90 AD |  if_e	jmp	#LR__2974
26744                 | '     waitus(100)
26744     64 12 06 F6 | 	mov	arg01, #100
26748     08 20 B0 FD | 	call	#__system___waitus
2674c     E0 FF 9F FD | 	jmp	#LR__2973
26750                 | LR__2974
26750     15 29 02 F1 | 	add	local02, local03
26754     13 29 0A F2 | 	cmp	local02, local01 wz
26758     B8 FF 9F 5D |  if_ne	jmp	#LR__2970
2675c     A7 F0 03 F6 | 	mov	ptra, fp
26760     B2 00 A0 FD | 	call	#popregs_
26764                 | _hg010b_spin2_waitvbl_ret
26764     2D 00 64 FD | 	ret
26768                 | 
26768                 | ' 
26768                 | ' ''---------- Set color #c in palette to r,g,b
26768                 | ' 
26768                 | ' pub setcolor(c,r,g,b)  |cc
26768                 | _hg010b_spin2_setcolor
26768                 | ' 
26768                 | ' cc:=r<<24+g<<16+b<<8
26768     18 14 66 F0 | 	shl	arg02, #24
2676c     10 16 66 F0 | 	shl	arg03, #16
26770     0B 15 02 F1 | 	add	arg02, arg03
26774     08 18 66 F0 | 	shl	arg04, #8
26778     0C 15 02 F1 | 	add	arg02, arg04
2677c                 | ' long[palette_ptr+4*c]:=cc
2677c     1C E4 05 F1 | 	add	objptr, #28
26780     F2 18 02 FB | 	rdlong	arg04, objptr
26784     1C E4 85 F1 | 	sub	objptr, #28
26788     02 12 66 F0 | 	shl	arg01, #2
2678c     09 19 02 F1 | 	add	arg04, arg01
26790     0C 15 62 FC | 	wrlong	arg02, arg04
26794                 | _hg010b_spin2_setcolor_ret
26794     2D 00 64 FD | 	ret
26798                 | 
26798                 | ' 
26798                 | ' 
26798                 | ' pub cls(fc,bc)   :c,i
26798                 | _hg010b_spin2_cls
26798     02 4A 05 F6 | 	mov	COUNT_, #2
2679c     A8 00 A0 FD | 	call	#pushregs_
267a0     09 27 02 F6 | 	mov	local01, arg01
267a4     0A 29 02 F6 | 	mov	local02, arg02
267a8                 | ' 
267a8                 | ' c:=bc
267a8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
267a8     DD E4 05 F1 | 	add	objptr, #221
267ac     F2 12 02 FB | 	rdlong	arg01, objptr
267b0     A5 E4 85 F1 | 	sub	objptr, #165
267b4     F2 16 02 FB | 	rdlong	arg03, objptr
267b8     02 16 66 F0 | 	shl	arg03, #2
267bc     14 15 02 F6 | 	mov	arg02, local02
267c0     00 18 06 F6 | 	mov	arg04, #0
267c4     01 1A 06 F6 | 	mov	arg05, #1
267c8     0B 00 00 FF 
267cc     94 E4 05 F1 | 	add	objptr, ##5780
267d0     B4 10 B0 FD | 	call	#_psram_spin2_fill
267d4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
267d4     0B 00 00 FF 
267d8     C8 E4 85 F1 | 	sub	objptr, ##5832
267dc     F2 12 02 FB | 	rdlong	arg01, objptr
267e0     04 E4 85 F1 | 	sub	objptr, #4
267e4     F2 16 02 FB | 	rdlong	arg03, objptr
267e8     09 17 82 F1 | 	sub	arg03, arg01
267ec     20 14 06 F6 | 	mov	arg02, #32
267f0     00 18 06 F6 | 	mov	arg04, #0
267f4     01 1A 06 F6 | 	mov	arg05, #1
267f8     0B 00 00 FF 
267fc     CC E4 05 F1 | 	add	objptr, ##5836
26800     84 10 B0 FD | 	call	#_psram_spin2_fill
26804                 | ' setwritecolors(fc,bc)
26804                 | ' 
26804                 | ' write_color:=ff
26804     0B 00 00 FF 
26808     8B E4 85 F1 | 	sub	objptr, ##5771
2680c     F2 26 62 FC | 	wrlong	local01, objptr
26810                 | ' write_background:=bb
26810     04 E4 05 F1 | 	add	objptr, #4
26814     F2 28 62 FC | 	wrlong	local02, objptr
26818                 | ' cursor_x:=0
26818     09 E4 85 F1 | 	sub	objptr, #9
2681c     F2 00 58 FC | 	wrword	#0, objptr
26820                 | ' cursor_y:=0
26820     02 E4 05 F1 | 	add	objptr, #2
26824     F2 00 48 FC | 	wrbyte	#0, objptr
26828                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26828     02 E4 85 F1 | 	sub	objptr, #2
2682c     F2 14 E2 FA | 	rdword	arg02, objptr
26830     02 14 66 F0 | 	shl	arg02, #2
26834     02 E4 05 F1 | 	add	objptr, #2
26838     F2 16 C2 FA | 	rdbyte	arg03, objptr
2683c     3E E4 85 F1 | 	sub	objptr, #62
26840     04 16 66 F0 | 	shl	arg03, #4
26844     04 16 06 F1 | 	add	arg03, #4
26848     11 12 06 F6 | 	mov	arg01, #17
2684c     4C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
26850                 | ' setcursorcolor(fc)
26850     13 13 02 F6 | 	mov	arg01, local01
26854     50 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
26858     14 FB 01 F6 | 	mov	result1, local02
2685c     00 FC 05 F6 | 	mov	result2, #0
26860     A7 F0 03 F6 | 	mov	ptra, fp
26864     B2 00 A0 FD | 	call	#popregs_
26868                 | _hg010b_spin2_cls_ret
26868     2D 00 64 FD | 	ret
2686c                 | 
2686c                 | ' 
2686c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2686c                 | ' 
2686c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2686c                 | _hg010b_spin2_putchar
2686c     02 4A 05 F6 | 	mov	COUNT_, #2
26870     A8 00 A0 FD | 	call	#pushregs_
26874     09 27 02 F6 | 	mov	local01, arg01
26878                 | ' 
26878                 | ' if achar==10
26878     0A 26 0E F2 | 	cmp	local01, #10 wz
2687c                 | '   crlf()
2687c     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
26880                 | ' if achar==9
26880     09 26 0E F2 | 	cmp	local01, #9 wz
26884     18 00 90 5D |  if_ne	jmp	#LR__2980
26888                 | '   cursor_x:=(cursor_x& %11110000)+16
26888     3C E4 05 F1 | 	add	objptr, #60
2688c     F2 16 E2 FA | 	rdword	arg03, objptr
26890     F0 16 06 F5 | 	and	arg03, #240
26894     10 16 06 F1 | 	add	arg03, #16
26898     F2 16 52 FC | 	wrword	arg03, objptr
2689c     3C E4 85 F1 | 	sub	objptr, #60
268a0                 | LR__2980
268a0                 | '   
268a0                 | ' if (achar<>9) && (achar<>10) 
268a0     09 26 0E F2 | 	cmp	local01, #9 wz
268a4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
268a8     A8 00 90 AD |  if_e	jmp	#LR__2981
268ac                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
268ac     3C E4 05 F1 | 	add	objptr, #60
268b0     F2 12 E2 FA | 	rdword	arg01, objptr
268b4     02 E4 05 F1 | 	add	objptr, #2
268b8     F2 14 C2 FA | 	rdbyte	arg02, objptr
268bc     04 14 66 F0 | 	shl	arg02, #4
268c0     04 14 06 F1 | 	add	arg02, #4
268c4     03 E4 05 F1 | 	add	objptr, #3
268c8     F2 18 02 FB | 	rdlong	arg04, objptr
268cc     04 E4 05 F1 | 	add	objptr, #4
268d0     F2 1A 02 FB | 	rdlong	arg05, objptr
268d4     45 E4 85 F1 | 	sub	objptr, #69
268d8     13 17 02 F6 | 	mov	arg03, local01
268dc     D0 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
268e0     04 E4 05 F1 | 	add	objptr, #4
268e4     F2 12 02 FB | 	rdlong	arg01, objptr
268e8     1C 00 00 FF 
268ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
268f0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
268f4     3A E4 05 F1 | 	add	objptr, #58
268f8     F2 1A C2 FA | 	rdbyte	arg05, objptr
268fc     0D 17 02 FD | 	qmul	arg03, arg05
26900                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
26900     1C 00 00 FF 
26904     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26908     02 E4 85 F1 | 	sub	objptr, #2
2690c     F2 28 E2 FA | 	rdword	local02, objptr
26910     01 28 46 F0 | 	shr	local02, #1
26914     13 15 02 F6 | 	mov	arg02, local01
26918     01 16 06 F6 | 	mov	arg03, #1
2691c     00 18 06 F6 | 	mov	arg04, #0
26920     01 1A 06 F6 | 	mov	arg05, #1
26924     0B 00 00 FF 
26928     90 E4 05 F1 | 	add	objptr, ##5776
2692c     18 26 62 FD | 	getqx	local01
26930     14 27 02 F1 | 	add	local01, local02
26934     13 13 02 F1 | 	add	arg01, local01
26938     4C 0F B0 FD | 	call	#_psram_spin2_fill
2693c                 | '   cursor_x+=2
2693c     0B 00 00 FF 
26940     90 E4 85 F1 | 	sub	objptr, ##5776
26944     F2 28 E2 FA | 	rdword	local02, objptr
26948     02 28 06 F1 | 	add	local02, #2
2694c     F2 28 52 FC | 	wrword	local02, objptr
26950     3C E4 85 F1 | 	sub	objptr, #60
26954                 | LR__2981
26954                 | ' 
26954                 | ' if cursor_x>=256
26954     3C E4 05 F1 | 	add	objptr, #60
26958     F2 28 E2 FA | 	rdword	local02, objptr
2695c     3C E4 85 F1 | 	sub	objptr, #60
26960     00 29 56 F2 | 	cmps	local02, #256 wc
26964     64 00 90 CD |  if_b	jmp	#LR__2983
26968                 | '   cursor_x:=0
26968     3C E4 05 F1 | 	add	objptr, #60
2696c     F2 00 58 FC | 	wrword	#0, objptr
26970                 | '   cursor_y+=1
26970     02 E4 05 F1 | 	add	objptr, #2
26974     F2 28 C2 FA | 	rdbyte	local02, objptr
26978     01 28 06 F1 | 	add	local02, #1
2697c     F2 28 42 FC | 	wrbyte	local02, objptr
26980                 | '   if cursor_y>st_lines-1
26980     C3 E4 05 F1 | 	add	objptr, #195
26984     F2 28 02 FB | 	rdlong	local02, objptr
26988     01 28 86 F1 | 	sub	local02, #1
2698c     C3 E4 85 F1 | 	sub	objptr, #195
26990     F2 16 C2 FA | 	rdbyte	arg03, objptr
26994     3E E4 85 F1 | 	sub	objptr, #62
26998     14 17 5A F2 | 	cmps	arg03, local02 wcz
2699c     2C 00 90 ED |  if_be	jmp	#LR__2982
269a0                 | '     scrollup2()
269a0     00 12 06 F6 | 	mov	arg01, #0
269a4     01 00 00 FF 
269a8     58 14 06 F6 | 	mov	arg02, ##600
269ac     10 16 06 F6 | 	mov	arg03, #16
269b0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
269b4                 | '     cursor_y:=st_lines-1
269b4     01 E5 05 F1 | 	add	objptr, #257
269b8     F2 28 02 FB | 	rdlong	local02, objptr
269bc     01 28 86 F1 | 	sub	local02, #1
269c0     C3 E4 85 F1 | 	sub	objptr, #195
269c4     F2 28 42 FC | 	wrbyte	local02, objptr
269c8     3E E4 85 F1 | 	sub	objptr, #62
269cc                 | LR__2982
269cc                 | LR__2983
269cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
269cc     3C E4 05 F1 | 	add	objptr, #60
269d0     F2 14 E2 FA | 	rdword	arg02, objptr
269d4     02 14 66 F0 | 	shl	arg02, #2
269d8     02 E4 05 F1 | 	add	objptr, #2
269dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
269e0     3E E4 85 F1 | 	sub	objptr, #62
269e4     04 16 66 F0 | 	shl	arg03, #4
269e8     04 16 06 F1 | 	add	arg03, #4
269ec     11 12 06 F6 | 	mov	arg01, #17
269f0     A8 EF BF FD | 	call	#_hg010b_spin2_setspritepos
269f4     A7 F0 03 F6 | 	mov	ptra, fp
269f8     B2 00 A0 FD | 	call	#popregs_
269fc                 | _hg010b_spin2_putchar_ret
269fc     2D 00 64 FD | 	ret
26a00                 | 
26a00                 | '     
26a00                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
26a00                 | ' 
26a00                 | ' pub putchar2(achar) | c,x,y,l,newcpl
26a00                 | _hg010b_spin2_putchar2
26a00     02 4A 05 F6 | 	mov	COUNT_, #2
26a04     A8 00 A0 FD | 	call	#pushregs_
26a08     09 27 02 F6 | 	mov	local01, arg01
26a0c                 | ' 
26a0c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
26a0c     3C E4 05 F1 | 	add	objptr, #60
26a10     F2 12 E2 FA | 	rdword	arg01, objptr
26a14     02 E4 05 F1 | 	add	objptr, #2
26a18     F2 14 C2 FA | 	rdbyte	arg02, objptr
26a1c     04 14 66 F0 | 	shl	arg02, #4
26a20     04 14 06 F1 | 	add	arg02, #4
26a24     03 E4 05 F1 | 	add	objptr, #3
26a28     F2 18 02 FB | 	rdlong	arg04, objptr
26a2c     04 E4 05 F1 | 	add	objptr, #4
26a30     F2 1A 02 FB | 	rdlong	arg05, objptr
26a34     45 E4 85 F1 | 	sub	objptr, #69
26a38     13 17 02 F6 | 	mov	arg03, local01
26a3c     70 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
26a40     04 E4 05 F1 | 	add	objptr, #4
26a44     F2 12 02 FB | 	rdlong	arg01, objptr
26a48     1C 00 00 FF 
26a4c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26a50     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26a54     3A E4 05 F1 | 	add	objptr, #58
26a58     F2 1A C2 FA | 	rdbyte	arg05, objptr
26a5c     0D 17 02 FD | 	qmul	arg03, arg05
26a60                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
26a60     1C 00 00 FF 
26a64     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a68     02 E4 85 F1 | 	sub	objptr, #2
26a6c     F2 28 E2 FA | 	rdword	local02, objptr
26a70     01 28 46 F0 | 	shr	local02, #1
26a74     13 15 02 F6 | 	mov	arg02, local01
26a78     01 16 06 F6 | 	mov	arg03, #1
26a7c     00 18 06 F6 | 	mov	arg04, #0
26a80     01 1A 06 F6 | 	mov	arg05, #1
26a84     0B 00 00 FF 
26a88     90 E4 05 F1 | 	add	objptr, ##5776
26a8c     18 26 62 FD | 	getqx	local01
26a90     14 27 02 F1 | 	add	local01, local02
26a94     13 13 02 F1 | 	add	arg01, local01
26a98     EC 0D B0 FD | 	call	#_psram_spin2_fill
26a9c                 | ' 
26a9c                 | ' cursor_x+=2
26a9c     0B 00 00 FF 
26aa0     90 E4 85 F1 | 	sub	objptr, ##5776
26aa4     F2 28 E2 FA | 	rdword	local02, objptr
26aa8     02 28 06 F1 | 	add	local02, #2
26aac     F2 28 52 FC | 	wrword	local02, objptr
26ab0                 | ' if cursor_x>=256
26ab0     F2 28 E2 FA | 	rdword	local02, objptr
26ab4     3C E4 85 F1 | 	sub	objptr, #60
26ab8     00 29 56 F2 | 	cmps	local02, #256 wc
26abc     64 00 90 CD |  if_b	jmp	#LR__2991
26ac0                 | '   cursor_x:=0
26ac0     3C E4 05 F1 | 	add	objptr, #60
26ac4     F2 00 58 FC | 	wrword	#0, objptr
26ac8                 | '   cursor_y+=1
26ac8     02 E4 05 F1 | 	add	objptr, #2
26acc     F2 28 C2 FA | 	rdbyte	local02, objptr
26ad0     01 28 06 F1 | 	add	local02, #1
26ad4     F2 28 42 FC | 	wrbyte	local02, objptr
26ad8                 | '   if cursor_y>st_lines-1
26ad8     C3 E4 05 F1 | 	add	objptr, #195
26adc     F2 28 02 FB | 	rdlong	local02, objptr
26ae0     01 28 86 F1 | 	sub	local02, #1
26ae4     C3 E4 85 F1 | 	sub	objptr, #195
26ae8     F2 16 C2 FA | 	rdbyte	arg03, objptr
26aec     3E E4 85 F1 | 	sub	objptr, #62
26af0     14 17 5A F2 | 	cmps	arg03, local02 wcz
26af4     2C 00 90 ED |  if_be	jmp	#LR__2990
26af8                 | '     scrollup2()
26af8     00 12 06 F6 | 	mov	arg01, #0
26afc     01 00 00 FF 
26b00     58 14 06 F6 | 	mov	arg02, ##600
26b04     10 16 06 F6 | 	mov	arg03, #16
26b08     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
26b0c                 | '     cursor_y:=st_lines-1
26b0c     01 E5 05 F1 | 	add	objptr, #257
26b10     F2 28 02 FB | 	rdlong	local02, objptr
26b14     01 28 86 F1 | 	sub	local02, #1
26b18     C3 E4 85 F1 | 	sub	objptr, #195
26b1c     F2 28 42 FC | 	wrbyte	local02, objptr
26b20     3E E4 85 F1 | 	sub	objptr, #62
26b24                 | LR__2990
26b24                 | LR__2991
26b24                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
26b24     3C E4 05 F1 | 	add	objptr, #60
26b28     F2 14 E2 FA | 	rdword	arg02, objptr
26b2c     02 14 66 F0 | 	shl	arg02, #2
26b30     02 E4 05 F1 | 	add	objptr, #2
26b34     F2 16 C2 FA | 	rdbyte	arg03, objptr
26b38     3E E4 85 F1 | 	sub	objptr, #62
26b3c     04 16 66 F0 | 	shl	arg03, #4
26b40     04 16 06 F1 | 	add	arg03, #4
26b44     11 12 06 F6 | 	mov	arg01, #17
26b48     50 EE BF FD | 	call	#_hg010b_spin2_setspritepos
26b4c     A7 F0 03 F6 | 	mov	ptra, fp
26b50     B2 00 A0 FD | 	call	#popregs_
26b54                 | _hg010b_spin2_putchar2_ret
26b54     2D 00 64 FD | 	ret
26b58                 | 
26b58                 | ' ''--------- Output a string at the cursor position, move the cursor  
26b58                 | ' 
26b58                 | ' pub write(text) | iii,c,ncx,ncy
26b58                 | _hg010b_spin2_write
26b58     04 4A 05 F6 | 	mov	COUNT_, #4
26b5c     A8 00 A0 FD | 	call	#pushregs_
26b60     09 27 02 F6 | 	mov	local01, arg01
26b64                 | ' 
26b64                 | ' repeat iii from 0 to strsize(text)-1
26b64     00 28 06 F6 | 	mov	local02, #0
26b68     13 13 02 F6 | 	mov	arg01, local01
26b6c     09 2B 02 F6 | 	mov	local03, arg01
26b70     97 06 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
26b74                 | LR__3000
26b74     15 FB C9 FA | 	rdbyte	result1, local03 wz
26b78     01 2A 06 51 |  if_ne	add	local03, #1
26b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3000
26b80                 | LR__3001
26b80     09 2B 82 F1 | 	sub	local03, arg01
26b84     01 2A 86 F1 | 	sub	local03, #1
26b88     00 2A 56 F2 | 	cmps	local03, #0 wc
26b8c     01 2C 86 F6 | 	negc	local04, #1
26b90     16 2B 02 F1 | 	add	local03, local04
26b94                 | LR__3002
26b94                 | '   putchar2(byte[text+iii])
26b94     13 13 02 F6 | 	mov	arg01, local01
26b98     14 13 02 F1 | 	add	arg01, local02
26b9c     09 13 C2 FA | 	rdbyte	arg01, arg01
26ba0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
26ba4     16 29 02 F1 | 	add	local02, local04
26ba8     15 29 0A F2 | 	cmp	local02, local03 wz
26bac     E4 FF 9F 5D |  if_ne	jmp	#LR__3002
26bb0     A7 F0 03 F6 | 	mov	ptra, fp
26bb4     B2 00 A0 FD | 	call	#popregs_
26bb8                 | _hg010b_spin2_write_ret
26bb8     2D 00 64 FD | 	ret
26bbc                 | 
26bbc                 | '    
26bbc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
26bbc                 | ' 
26bbc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
26bbc                 | _hg010b_spin2_scrollup2
26bbc     03 4A 05 F6 | 	mov	COUNT_, #3
26bc0     A8 00 A0 FD | 	call	#pushregs_
26bc4                 | ' 	
26bc4                 | ' repeat i from 4 to 579 
26bc4     04 26 06 F6 | 	mov	local01, #4
26bc8                 | LR__3010
26bc8     DD E4 05 F1 | 	add	objptr, #221
26bcc     F2 14 02 FB | 	rdlong	arg02, objptr
26bd0     13 1B 02 F6 | 	mov	arg05, local01
26bd4     10 1A 06 F1 | 	add	arg05, #16
26bd8     02 1A 66 F0 | 	shl	arg05, #2
26bdc     14 E4 05 F1 | 	add	objptr, #20
26be0     F2 16 02 FB | 	rdlong	arg03, objptr
26be4     0B 1B 02 FD | 	qmul	arg05, arg03
26be8                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26be8     02 16 66 F0 | 	shl	arg03, #2
26bec     F4 03 00 FF 
26bf0     00 12 06 F6 | 	mov	arg01, ##518144
26bf4     0A 00 00 FF 
26bf8     DB E5 05 F1 | 	add	objptr, ##5595
26bfc     18 1A 62 FD | 	getqx	arg05
26c00     0D 15 02 F1 | 	add	arg02, arg05
26c04     48 0B B0 FD | 	call	#_psram_spin2_read1
26c08     0A 00 00 FF 
26c0c     EF E5 85 F1 | 	sub	objptr, ##5615
26c10     F2 14 02 FB | 	rdlong	arg02, objptr
26c14     13 1B 02 F6 | 	mov	arg05, local01
26c18     02 1A 66 F0 | 	shl	arg05, #2
26c1c     14 E4 05 F1 | 	add	objptr, #20
26c20     F2 16 02 FB | 	rdlong	arg03, objptr
26c24     0B 1B 02 FD | 	qmul	arg05, arg03
26c28                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26c28     02 16 66 F0 | 	shl	arg03, #2
26c2c     F4 03 00 FF 
26c30     00 12 06 F6 | 	mov	arg01, ##518144
26c34     0A 00 00 FF 
26c38     DB E5 05 F1 | 	add	objptr, ##5595
26c3c     18 1A 62 FD | 	getqx	arg05
26c40     0D 15 02 F1 | 	add	arg02, arg05
26c44     A4 0B B0 FD | 	call	#_psram_spin2_write
26c48     0B 00 00 FF 
26c4c     CC E4 85 F1 | 	sub	objptr, ##5836
26c50     01 26 06 F1 | 	add	local01, #1
26c54     01 00 00 FF 
26c58     44 26 16 F2 | 	cmp	local01, ##580 wc
26c5c     68 FF 9F CD |  if_b	jmp	#LR__3010
26c60                 | ' 
26c60                 | ' repeat i from 580 to 599
26c60     01 00 00 FF 
26c64     44 26 06 F6 | 	mov	local01, ##580
26c68                 | LR__3011
26c68                 | '    fastline(0,1023,i,write_background)   
26c68     45 E4 05 F1 | 	add	objptr, #69
26c6c     F2 18 02 FB | 	rdlong	arg04, objptr
26c70     45 E4 85 F1 | 	sub	objptr, #69
26c74     00 12 06 F6 | 	mov	arg01, #0
26c78     09 14 CE F9 | 	bmask	arg02, #9
26c7c     13 17 02 F6 | 	mov	arg03, local01
26c80     64 EF BF FD | 	call	#_hg010b_spin2_fastline
26c84     01 26 06 F1 | 	add	local01, #1
26c88     01 00 00 FF 
26c8c     58 26 16 F2 | 	cmp	local01, ##600 wc
26c90     D4 FF 9F CD |  if_b	jmp	#LR__3011
26c94                 | ' repeat i from 0 to 3
26c94     00 26 06 F6 | 	mov	local01, #0
26c98                 | LR__3012
26c98                 | '    fastline(0,1023,i,write_background)      
26c98     45 E4 05 F1 | 	add	objptr, #69
26c9c     F2 18 02 FB | 	rdlong	arg04, objptr
26ca0     45 E4 85 F1 | 	sub	objptr, #69
26ca4     00 12 06 F6 | 	mov	arg01, #0
26ca8     09 14 CE F9 | 	bmask	arg02, #9
26cac     13 17 02 F6 | 	mov	arg03, local01
26cb0     34 EF BF FD | 	call	#_hg010b_spin2_fastline
26cb4     01 26 06 F1 | 	add	local01, #1
26cb8     04 26 56 F2 | 	cmps	local01, #4 wc
26cbc     D8 FF 9F CD |  if_b	jmp	#LR__3012
26cc0                 | ' 
26cc0                 | ' repeat i from 0 to 35
26cc0     00 26 06 F6 | 	mov	local01, #0
26cc4                 | LR__3013
26cc4     13 1B 02 F6 | 	mov	arg05, local01
26cc8     01 1A 06 F1 | 	add	arg05, #1
26ccc     1C 00 00 FF 
26cd0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26cd4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26cd8     0B 1B 02 FD | 	qmul	arg05, arg03
26cdc                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
26cdc     04 E4 05 F1 | 	add	objptr, #4
26ce0     F2 14 02 FB | 	rdlong	arg02, objptr
26ce4     1C 00 00 FF 
26ce8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26cec     F4 03 00 FF 
26cf0     00 12 06 F6 | 	mov	arg01, ##518144
26cf4     0B 00 00 FF 
26cf8     C8 E4 05 F1 | 	add	objptr, ##5832
26cfc     18 1A 62 FD | 	getqx	arg05
26d00     0D 15 02 F1 | 	add	arg02, arg05
26d04     48 0A B0 FD | 	call	#_psram_spin2_read1
26d08     1C 00 00 FF 
26d0c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26d10     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26d14     0B 27 02 FD | 	qmul	local01, arg03
26d18                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
26d18     0B 00 00 FF 
26d1c     C8 E4 85 F1 | 	sub	objptr, ##5832
26d20     F2 14 02 FB | 	rdlong	arg02, objptr
26d24     1C 00 00 FF 
26d28     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26d2c     F4 03 00 FF 
26d30     00 12 06 F6 | 	mov	arg01, ##518144
26d34     0B 00 00 FF 
26d38     C8 E4 05 F1 | 	add	objptr, ##5832
26d3c     18 1A 62 FD | 	getqx	arg05
26d40     0D 15 02 F1 | 	add	arg02, arg05
26d44     A4 0A B0 FD | 	call	#_psram_spin2_write
26d48     0B 00 00 FF 
26d4c     CC E4 85 F1 | 	sub	objptr, ##5836
26d50     01 26 06 F1 | 	add	local01, #1
26d54     24 26 56 F2 | 	cmps	local01, #36 wc
26d58     68 FF 9F CD |  if_b	jmp	#LR__3013
26d5c                 | ' repeat i from 0 to timings[7]-1
26d5c     00 26 06 F6 | 	mov	local01, #0
26d60     1C 00 00 FF 
26d64     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26d68     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
26d6c     1C 00 00 FF 
26d70     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26d74     01 28 86 F1 | 	sub	local02, #1
26d78     00 28 56 F2 | 	cmps	local02, #0 wc
26d7c     01 2A 86 F6 | 	negc	local03, #1
26d80     15 29 02 F1 | 	add	local02, local03
26d84                 | LR__3014
26d84                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
26d84     04 E4 05 F1 | 	add	objptr, #4
26d88     F2 12 02 FB | 	rdlong	arg01, objptr
26d8c     1C 00 00 FF 
26d90     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26d94     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
26d98     1C 00 00 FF 
26d9c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26da0     0D 19 02 F6 | 	mov	arg04, arg05
26da4     03 18 66 F0 | 	shl	arg04, #3
26da8     0D 19 02 F1 | 	add	arg04, arg05
26dac     02 18 66 F0 | 	shl	arg04, #2
26db0     13 19 02 F1 | 	add	arg04, local01
26db4     0C 13 02 F1 | 	add	arg01, arg04
26db8     20 14 06 F6 | 	mov	arg02, #32
26dbc     01 16 06 F6 | 	mov	arg03, #1
26dc0     00 18 06 F6 | 	mov	arg04, #0
26dc4     01 1A 06 F6 | 	mov	arg05, #1
26dc8     0B 00 00 FF 
26dcc     C8 E4 05 F1 | 	add	objptr, ##5832
26dd0     B4 0A B0 FD | 	call	#_psram_spin2_fill
26dd4     0B 00 00 FF 
26dd8     CC E4 85 F1 | 	sub	objptr, ##5836
26ddc     15 27 02 F1 | 	add	local01, local03
26de0     14 27 0A F2 | 	cmp	local01, local02 wz
26de4     9C FF 9F 5D |  if_ne	jmp	#LR__3014
26de8     A7 F0 03 F6 | 	mov	ptra, fp
26dec     B2 00 A0 FD | 	call	#popregs_
26df0                 | _hg010b_spin2_scrollup2_ret
26df0     2D 00 64 FD | 	ret
26df4                 | 
26df4                 | '  
26df4                 | ' ''----------- Scroll the screen one line down 
26df4                 | ' 
26df4                 | ' pub scrolldown(start=0) | i
26df4                 | _hg010b_spin2_scrolldown
26df4     05 4A 05 F6 | 	mov	COUNT_, #5
26df8     A8 00 A0 FD | 	call	#pushregs_
26dfc     09 27 02 F6 | 	mov	local01, arg01
26e00                 | ' 
26e00                 | ' repeat i from 579 to (start*16)+4
26e00     01 00 00 FF 
26e04     43 28 06 F6 | 	mov	local02, ##579
26e08     13 2B 02 F6 | 	mov	local03, local01
26e0c     04 2A 66 F0 | 	shl	local03, #4
26e10     04 2A 06 F1 | 	add	local03, #4
26e14     01 00 00 FF 
26e18     43 2A 56 F2 | 	cmps	local03, ##579 wc
26e1c     01 2C 86 F6 | 	negc	local04, #1
26e20     16 2F 02 F6 | 	mov	local05, local04
26e24     16 2B 02 F1 | 	add	local03, local04
26e28                 | LR__3020
26e28     DD E4 05 F1 | 	add	objptr, #221
26e2c     F2 14 02 FB | 	rdlong	arg02, objptr
26e30     14 2D 02 F6 | 	mov	local04, local02
26e34     02 2C 66 F0 | 	shl	local04, #2
26e38     14 E4 05 F1 | 	add	objptr, #20
26e3c     F2 16 02 FB | 	rdlong	arg03, objptr
26e40     0B 2D 02 FD | 	qmul	local04, arg03
26e44                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26e44     02 16 66 F0 | 	shl	arg03, #2
26e48     F4 03 00 FF 
26e4c     00 12 06 F6 | 	mov	arg01, ##518144
26e50     0A 00 00 FF 
26e54     DB E5 05 F1 | 	add	objptr, ##5595
26e58     18 2C 62 FD | 	getqx	local04
26e5c     16 15 02 F1 | 	add	arg02, local04
26e60     EC 08 B0 FD | 	call	#_psram_spin2_read1
26e64     0A 00 00 FF 
26e68     EF E5 85 F1 | 	sub	objptr, ##5615
26e6c     F2 14 02 FB | 	rdlong	arg02, objptr
26e70     14 2D 02 F6 | 	mov	local04, local02
26e74     10 2C 06 F1 | 	add	local04, #16
26e78     02 2C 66 F0 | 	shl	local04, #2
26e7c     14 E4 05 F1 | 	add	objptr, #20
26e80     F2 16 02 FB | 	rdlong	arg03, objptr
26e84     0B 2D 02 FD | 	qmul	local04, arg03
26e88                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26e88     02 16 66 F0 | 	shl	arg03, #2
26e8c     F4 03 00 FF 
26e90     00 12 06 F6 | 	mov	arg01, ##518144
26e94     0A 00 00 FF 
26e98     DB E5 05 F1 | 	add	objptr, ##5595
26e9c     18 2C 62 FD | 	getqx	local04
26ea0     16 15 02 F1 | 	add	arg02, local04
26ea4     44 09 B0 FD | 	call	#_psram_spin2_write
26ea8     0B 00 00 FF 
26eac     CC E4 85 F1 | 	sub	objptr, ##5836
26eb0     17 29 02 F1 | 	add	local02, local05
26eb4     15 29 0A F2 | 	cmp	local02, local03 wz
26eb8     6C FF 9F 5D |  if_ne	jmp	#LR__3020
26ebc                 | ' 
26ebc                 | ' repeat i from (start*16)+4 to (start*16)+19
26ebc     13 29 02 F6 | 	mov	local02, local01
26ec0     04 28 66 F0 | 	shl	local02, #4
26ec4     04 28 06 F1 | 	add	local02, #4
26ec8     13 2F 02 F6 | 	mov	local05, local01
26ecc     04 2E 66 F0 | 	shl	local05, #4
26ed0     13 2E 06 F1 | 	add	local05, #19
26ed4     13 2D 02 F6 | 	mov	local04, local01
26ed8     04 2C 66 F0 | 	shl	local04, #4
26edc     04 2C 06 F1 | 	add	local04, #4
26ee0     16 2F 52 F2 | 	cmps	local05, local04 wc
26ee4     01 2C 86 F6 | 	negc	local04, #1
26ee8     16 2B 02 F6 | 	mov	local03, local04
26eec     16 2F 02 F1 | 	add	local05, local04
26ef0                 | LR__3021
26ef0                 | '    fastline(0,1023,i,write_background)    
26ef0     45 E4 05 F1 | 	add	objptr, #69
26ef4     F2 18 02 FB | 	rdlong	arg04, objptr
26ef8     45 E4 85 F1 | 	sub	objptr, #69
26efc     00 12 06 F6 | 	mov	arg01, #0
26f00     09 14 CE F9 | 	bmask	arg02, #9
26f04     14 17 02 F6 | 	mov	arg03, local02
26f08     DC EC BF FD | 	call	#_hg010b_spin2_fastline
26f0c     15 29 02 F1 | 	add	local02, local03
26f10     17 29 0A F2 | 	cmp	local02, local05 wz
26f14     D8 FF 9F 5D |  if_ne	jmp	#LR__3021
26f18                 | '    
26f18                 | ' repeat i from 35 to start
26f18     23 28 06 F6 | 	mov	local02, #35
26f1c     23 26 56 F2 | 	cmps	local01, #35 wc
26f20     01 2C 86 F6 | 	negc	local04, #1
26f24     13 2F 02 F6 | 	mov	local05, local01
26f28     16 2F 02 F1 | 	add	local05, local04
26f2c                 | LR__3022
26f2c                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
26f2c     04 E4 05 F1 | 	add	objptr, #4
26f30     F2 14 02 FB | 	rdlong	arg02, objptr
26f34     14 2B 02 F6 | 	mov	local03, local02
26f38     07 2A 66 F0 | 	shl	local03, #7
26f3c     15 15 02 F1 | 	add	arg02, local03
26f40     F4 03 00 FF 
26f44     00 12 06 F6 | 	mov	arg01, ##518144
26f48     80 16 06 F6 | 	mov	arg03, #128
26f4c     0B 00 00 FF 
26f50     C8 E4 05 F1 | 	add	objptr, ##5832
26f54     F8 07 B0 FD | 	call	#_psram_spin2_read1
26f58                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
26f58     0B 00 00 FF 
26f5c     C8 E4 85 F1 | 	sub	objptr, ##5832
26f60     F2 14 02 FB | 	rdlong	arg02, objptr
26f64     14 2B 02 F6 | 	mov	local03, local02
26f68     01 2A 06 F1 | 	add	local03, #1
26f6c     07 2A 66 F0 | 	shl	local03, #7
26f70     15 15 02 F1 | 	add	arg02, local03
26f74     F4 03 00 FF 
26f78     00 12 06 F6 | 	mov	arg01, ##518144
26f7c     80 16 06 F6 | 	mov	arg03, #128
26f80     0B 00 00 FF 
26f84     C8 E4 05 F1 | 	add	objptr, ##5832
26f88     60 08 B0 FD | 	call	#_psram_spin2_write
26f8c     0B 00 00 FF 
26f90     CC E4 85 F1 | 	sub	objptr, ##5836
26f94     16 29 02 F1 | 	add	local02, local04
26f98     17 29 0A F2 | 	cmp	local02, local05 wz
26f9c     8C FF 9F 5D |  if_ne	jmp	#LR__3022
26fa0                 | ' repeat i from 0 to 127
26fa0     00 28 06 F6 | 	mov	local02, #0
26fa4                 | LR__3023
26fa4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
26fa4     04 E4 05 F1 | 	add	objptr, #4
26fa8     F2 12 02 FB | 	rdlong	arg01, objptr
26fac     13 2F 02 F6 | 	mov	local05, local01
26fb0     07 2E 66 F0 | 	shl	local05, #7
26fb4     17 13 02 F1 | 	add	arg01, local05
26fb8     14 13 02 F1 | 	add	arg01, local02
26fbc     20 14 06 F6 | 	mov	arg02, #32
26fc0     01 16 06 F6 | 	mov	arg03, #1
26fc4     00 18 06 F6 | 	mov	arg04, #0
26fc8     01 1A 06 F6 | 	mov	arg05, #1
26fcc     0B 00 00 FF 
26fd0     C8 E4 05 F1 | 	add	objptr, ##5832
26fd4     B0 08 B0 FD | 	call	#_psram_spin2_fill
26fd8     0B 00 00 FF 
26fdc     CC E4 85 F1 | 	sub	objptr, ##5836
26fe0     01 28 06 F1 | 	add	local02, #1
26fe4     80 28 56 F2 | 	cmps	local02, #128 wc
26fe8     B8 FF 9F CD |  if_b	jmp	#LR__3023
26fec     A7 F0 03 F6 | 	mov	ptra, fp
26ff0     B2 00 A0 FD | 	call	#popregs_
26ff4                 | _hg010b_spin2_scrolldown_ret
26ff4     2D 00 64 FD | 	ret
26ff8                 | 
26ff8                 | ' 
26ff8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
26ff8                 | ' 
26ff8                 | ' pub crlf()
26ff8                 | _hg010b_spin2_crlf
26ff8                 | ' 
26ff8                 | ' cursor_x:=leading_spaces*2
26ff8     01 00 00 FF 
26ffc     B6 E4 05 F1 | 	add	objptr, ##694
27000     F2 16 02 FB | 	rdlong	arg03, objptr
27004     01 16 66 F0 | 	shl	arg03, #1
27008     01 00 00 FF 
2700c     7A E4 85 F1 | 	sub	objptr, ##634
27010     F2 16 52 FC | 	wrword	arg03, objptr
27014                 | ' cursor_y+=1
27014     02 E4 05 F1 | 	add	objptr, #2
27018     F2 16 C2 FA | 	rdbyte	arg03, objptr
2701c     01 16 06 F1 | 	add	arg03, #1
27020     F2 16 42 FC | 	wrbyte	arg03, objptr
27024                 | ' if cursor_y>st_lines-1
27024     C3 E4 05 F1 | 	add	objptr, #195
27028     F2 16 02 FB | 	rdlong	arg03, objptr
2702c     01 16 86 F1 | 	sub	arg03, #1
27030     C3 E4 85 F1 | 	sub	objptr, #195
27034     F2 14 C2 FA | 	rdbyte	arg02, objptr
27038     3E E4 85 F1 | 	sub	objptr, #62
2703c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
27040     2C 00 90 ED |  if_be	jmp	#LR__3030
27044                 | '   scrollup2()
27044     00 12 06 F6 | 	mov	arg01, #0
27048     01 00 00 FF 
2704c     58 14 06 F6 | 	mov	arg02, ##600
27050     10 16 06 F6 | 	mov	arg03, #16
27054     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
27058                 | '   cursor_y:=st_lines-1
27058     01 E5 05 F1 | 	add	objptr, #257
2705c     F2 16 02 FB | 	rdlong	arg03, objptr
27060     01 16 86 F1 | 	sub	arg03, #1
27064     C3 E4 85 F1 | 	sub	objptr, #195
27068     F2 16 42 FC | 	wrbyte	arg03, objptr
2706c     3E E4 85 F1 | 	sub	objptr, #62
27070                 | LR__3030
27070                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
27070     3C E4 05 F1 | 	add	objptr, #60
27074     F2 14 E2 FA | 	rdword	arg02, objptr
27078     02 14 66 F0 | 	shl	arg02, #2
2707c     02 E4 05 F1 | 	add	objptr, #2
27080     F2 16 C2 FA | 	rdbyte	arg03, objptr
27084     3E E4 85 F1 | 	sub	objptr, #62
27088     04 16 66 F0 | 	shl	arg03, #4
2708c     04 16 06 F1 | 	add	arg03, #4
27090     11 12 06 F6 | 	mov	arg01, #17
27094     04 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
27098                 | _hg010b_spin2_crlf_ret
27098     2D 00 64 FD | 	ret
2709c                 | 
2709c                 | ' 
2709c                 | ' 
2709c                 | ' '*************************************************************************
2709c                 | ' '                                                                        *
2709c                 | ' '  Conversions                                                           *
2709c                 | ' '                                                                        *
2709c                 | ' '*************************************************************************
2709c                 | ' 
2709c                 | ' ''---------- Convert a integer to dec string, return a pointer
2709c                 | ' 
2709c                 | ' pub inttostr(i):result |q,pos,k,j
2709c                 | _hg010b_spin2_inttostr
2709c     03 4A 05 F6 | 	mov	COUNT_, #3
270a0     A8 00 A0 FD | 	call	#pushregs_
270a4     09 27 0A F6 | 	mov	local01, arg01 wz
270a8                 | ' 
270a8                 | ' j:=i
270a8                 | ' pos:=10
270a8     0A 28 06 F6 | 	mov	local02, #10
270ac                 | ' k:=0
270ac     00 2A 06 F6 | 	mov	local03, #0
270b0                 | ' 
270b0                 | ' if (j==0)
270b0     18 00 90 5D |  if_ne	jmp	#LR__3040
270b4                 | '   n_string[0]:=48
270b4     4D E4 05 F1 | 	add	objptr, #77
270b8     F2 60 48 FC | 	wrbyte	#48, objptr
270bc                 | '   n_string[1]:=0
270bc     01 E4 05 F1 | 	add	objptr, #1
270c0     F2 00 48 FC | 	wrbyte	#0, objptr
270c4     4E E4 85 F1 | 	sub	objptr, #78
270c8     C4 00 90 FD | 	jmp	#LR__3047
270cc                 | LR__3040
270cc                 | ' 
270cc                 | ' else
270cc                 | '   if (j<0)
270cc     13 27 52 F6 | 	abs	local01, local01 wc
270d0                 | '     j:=0-j
270d0                 | '     k:=45
270d0     2D 2A 06 C6 |  if_b	mov	local03, #45
270d4                 | ' 
270d4                 | '   n_string[11]:=0
270d4     58 E4 05 F1 | 	add	objptr, #88
270d8     F2 00 48 FC | 	wrbyte	#0, objptr
270dc     58 E4 85 F1 | 	sub	objptr, #88
270e0     97 24 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
270e4                 | '   repeat while (pos>-1)
270e4                 | LR__3041
270e4     00 28 56 F2 | 	cmps	local02, #0 wc
270e8     40 00 90 CD |  if_b	jmp	#LR__3043
270ec     13 FB 51 F6 | 	abs	result1, local01 wc
270f0     0A FA 15 FD | 	qdiv	result1, #10
270f4                 | '     q:=j//10
270f4     19 FA 61 FD | 	getqy	result1
270f8     FD FA 81 F6 | 	negc	result1, result1
270fc     13 27 52 F6 | 	abs	local01, local01 wc
27100     0A 26 16 FD | 	qdiv	local01, #10
27104                 | '     q:=48+q
27104     30 FA 05 F1 | 	add	result1, #48
27108                 | '     n_string[pos]:=q
27108     14 27 02 F6 | 	mov	local01, local02
2710c     4D E4 05 F1 | 	add	objptr, #77
27110     F2 26 02 F1 | 	add	local01, objptr
27114     13 FB 41 FC | 	wrbyte	result1, local01
27118                 | '     j:=j/10
27118     4D E4 85 F1 | 	sub	objptr, #77
2711c                 | '     pos-=1
2711c     01 28 86 F1 | 	sub	local02, #1
27120     18 26 62 FD | 	getqx	local01
27124     13 27 82 F6 | 	negc	local01, local01
27128     B8 FF 9F FD | 	jmp	#LR__3041
2712c                 | LR__3042
2712c                 | LR__3043
2712c                 | '   repeat while n_string[0]==48
2712c                 | LR__3044
2712c     4D E4 05 F1 | 	add	objptr, #77
27130     F2 16 C2 FA | 	rdbyte	arg03, objptr
27134     4D E4 85 F1 | 	sub	objptr, #77
27138     30 16 0E F2 | 	cmp	arg03, #48 wz
2713c     20 00 90 5D |  if_ne	jmp	#LR__3045
27140                 | '     bytemove(@n_string,@n_string+1,12)
27140     4D E4 05 F1 | 	add	objptr, #77
27144     F2 12 02 F6 | 	mov	arg01, objptr
27148     F2 14 02 F6 | 	mov	arg02, objptr
2714c     4D E4 85 F1 | 	sub	objptr, #77
27150     01 14 06 F1 | 	add	arg02, #1
27154     0C 16 06 F6 | 	mov	arg03, #12
27158     48 11 B0 FD | 	call	#__system____builtin_memmove
2715c     CC FF 9F FD | 	jmp	#LR__3044
27160                 | LR__3045
27160                 | ' 
27160                 | '   if k==45
27160     2D 2A 0E F2 | 	cmp	local03, #45 wz
27164     28 00 90 5D |  if_ne	jmp	#LR__3046
27168                 | '      bytemove(@n_string+1,@n_string,12)
27168     4D E4 05 F1 | 	add	objptr, #77
2716c     F2 12 02 F6 | 	mov	arg01, objptr
27170     01 12 06 F1 | 	add	arg01, #1
27174     F2 14 02 F6 | 	mov	arg02, objptr
27178     4D E4 85 F1 | 	sub	objptr, #77
2717c     0C 16 06 F6 | 	mov	arg03, #12
27180     20 11 B0 FD | 	call	#__system____builtin_memmove
27184                 | '      n_string[0]:=k
27184     4D E4 05 F1 | 	add	objptr, #77
27188     F2 2A 42 FC | 	wrbyte	local03, objptr
2718c     4D E4 85 F1 | 	sub	objptr, #77
27190                 | LR__3046
27190                 | LR__3047
27190                 | ' 
27190                 | ' q:=@n_string
27190     4D E4 05 F1 | 	add	objptr, #77
27194     F2 FA 01 F6 | 	mov	result1, objptr
27198     4D E4 85 F1 | 	sub	objptr, #77
2719c                 | ' return q
2719c     A7 F0 03 F6 | 	mov	ptra, fp
271a0     B2 00 A0 FD | 	call	#popregs_
271a4                 | _hg010b_spin2_inttostr_ret
271a4     2D 00 64 FD | 	ret
271a8                 | 
271a8                 | ' 
271a8                 | ' '**********************************************************************************
271a8                 | ' '
271a8                 | ' '        Blitting
271a8                 | ' '
271a8                 | ' '**********************************************************************************
271a8                 | ' 
271a8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
271a8                 | _hg010b_spin2_blit
271a8     18 4A 05 F6 | 	mov	COUNT_, #24
271ac     A8 00 A0 FD | 	call	#pushregs_
271b0     09 27 02 F6 | 	mov	local01, arg01
271b4     0A 29 02 F6 | 	mov	local02, arg02
271b8     0B 2B 02 F6 | 	mov	local03, arg03
271bc     0C 2D 02 F6 | 	mov	local04, arg04
271c0     0D 2F 02 F6 | 	mov	local05, arg05
271c4     0E 31 02 F6 | 	mov	local06, arg06
271c8     0F 33 02 F6 | 	mov	local07, arg07
271cc     10 35 02 F6 | 	mov	local08, arg08
271d0     11 37 02 F6 | 	mov	local09, arg09
271d4     12 39 02 F6 | 	mov	local10, arg10
271d8                 | ' 
271d8                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
271d8     00 04 00 FF 
271dc     00 26 56 F2 | 	cmps	local01, ##524288 wc
271e0     00 04 00 3F 
271e4     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
271e8     98 01 90 CD |  if_b	jmp	#LR__3054
271ec     16 29 5A F2 | 	cmps	local02, local04 wcz
271f0     14 3B 02 16 |  if_a	mov	local11, local02
271f4     16 29 02 16 |  if_a	mov	local02, local04
271f8     1D 2D 02 16 |  if_a	mov	local04, local11
271fc     17 2B 5A F2 | 	cmps	local03, local05 wcz
27200     15 3B 02 16 |  if_a	mov	local11, local03
27204     17 2B 02 16 |  if_a	mov	local03, local05
27208     18 2B 02 FD | 	qmul	local03, local06
2720c                 | '   if x1a>x2a
2720c                 | '     x1a,x2a:=x2a,x1a
2720c                 | '   if y1a>y2a
2720c                 | '     y1a,y2a:=y2a,y1a  
2720c     1D 2F 02 16 |  if_a	mov	local05, local11
27210                 | '   if x2a-x1a>1023 
27210     16 3B 02 F6 | 	mov	local11, local04
27214     14 3B 82 F1 | 	sub	local11, local02
27218     02 00 00 FF 
2721c     00 3A 56 F2 | 	cmps	local11, ##1024 wc
27220                 | '     x2a:=x1a+1023 ' limit the line to 1024
27220     14 2D 02 36 |  if_ae	mov	local04, local02
27224     01 00 00 3F 
27228     FF 2D 06 31 |  if_ae	add	local04, ##1023
2722c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
2722c     19 3D 02 F6 | 	mov	local12, local07
27230     14 3D 02 F1 | 	add	local12, local02
27234     18 3A 62 FD | 	getqx	local11
27238     1C 37 02 FD | 	qmul	local09, local10
2723c     1D 3D 02 F1 | 	add	local12, local11
27240     13 3F 02 F6 | 	mov	local13, local01
27244     1A 3F 02 F1 | 	add	local13, local08
27248     18 3A 62 FD | 	getqx	local11
2724c     1D 3F 02 F1 | 	add	local13, local11
27250     1F 3D 5A F2 | 	cmps	local12, local13 wcz
27254     98 00 90 ED |  if_be	jmp	#LR__3051
27258                 | '     repeat y from y1a to y2a
27258     15 41 02 F6 | 	mov	local14, local03
2725c     15 2F 52 F2 | 	cmps	local05, local03 wc
27260     01 42 86 F6 | 	negc	local15, #1
27264     17 45 02 F6 | 	mov	local16, local05
27268     21 45 02 F1 | 	add	local16, local15
2726c     0B 00 00 FF 
27270     CC E4 05 F1 | 	add	objptr, ##5836
27274                 | LR__3050
27274     18 41 02 FD | 	qmul	local14, local06
27278                 | '   '    writeln(string("I am here"))
27278                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
27278     13 15 02 F6 | 	mov	arg02, local01
2727c     16 17 02 F6 | 	mov	arg03, local04
27280     14 17 82 F1 | 	sub	arg03, local02
27284     01 16 06 F1 | 	add	arg03, #1
27288     F4 03 00 FF 
2728c     00 12 06 F6 | 	mov	arg01, ##518144
27290     18 3E 62 FD | 	getqx	local13
27294     1F 15 02 F1 | 	add	arg02, local13
27298     14 15 02 F1 | 	add	arg02, local02
2729c     B0 04 B0 FD | 	call	#_psram_spin2_read1
272a0     1B 3F 02 F6 | 	mov	local13, local09
272a4     15 3F 82 F1 | 	sub	local13, local03
272a8     20 3F 02 F1 | 	add	local13, local14
272ac     1C 3F 02 FD | 	qmul	local13, local10
272b0                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
272b0     19 15 02 F6 | 	mov	arg02, local07
272b4     16 17 02 F6 | 	mov	arg03, local04
272b8     14 17 82 F1 | 	sub	arg03, local02
272bc     01 16 06 F1 | 	add	arg03, #1
272c0     F4 03 00 FF 
272c4     00 12 06 F6 | 	mov	arg01, ##518144
272c8     18 3E 62 FD | 	getqx	local13
272cc     1F 15 02 F1 | 	add	arg02, local13
272d0     1A 15 02 F1 | 	add	arg02, local08
272d4     14 05 B0 FD | 	call	#_psram_spin2_write
272d8     21 41 02 F1 | 	add	local14, local15
272dc     22 41 0A F2 | 	cmp	local14, local16 wz
272e0     90 FF 9F 5D |  if_ne	jmp	#LR__3050
272e4     0B 00 00 FF 
272e8     CC E4 85 F1 | 	sub	objptr, ##5836
272ec     94 00 90 FD | 	jmp	#LR__3053
272f0                 | LR__3051
272f0                 | '   else
272f0                 | '     repeat y from y2a to y1a
272f0     17 41 02 F6 | 	mov	local14, local05
272f4     17 2B 52 F2 | 	cmps	local03, local05 wc
272f8     01 46 86 F6 | 	negc	local17, #1
272fc     15 49 02 F6 | 	mov	local18, local03
27300     23 49 02 F1 | 	add	local18, local17
27304     0B 00 00 FF 
27308     CC E4 05 F1 | 	add	objptr, ##5836
2730c                 | LR__3052
2730c     18 41 02 FD | 	qmul	local14, local06
27310                 | '  '     writeln(string("I am there"))
27310                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
27310     13 15 02 F6 | 	mov	arg02, local01
27314     16 17 02 F6 | 	mov	arg03, local04
27318     14 17 82 F1 | 	sub	arg03, local02
2731c     01 16 06 F1 | 	add	arg03, #1
27320     F4 03 00 FF 
27324     00 12 06 F6 | 	mov	arg01, ##518144
27328     18 44 62 FD | 	getqx	local16
2732c     22 15 02 F1 | 	add	arg02, local16
27330     14 15 02 F1 | 	add	arg02, local02
27334     18 04 B0 FD | 	call	#_psram_spin2_read1
27338     1B 45 02 F6 | 	mov	local16, local09
2733c     15 45 82 F1 | 	sub	local16, local03
27340     20 45 02 F1 | 	add	local16, local14
27344     1C 45 02 FD | 	qmul	local16, local10
27348                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
27348     19 15 02 F6 | 	mov	arg02, local07
2734c     16 17 02 F6 | 	mov	arg03, local04
27350     14 17 82 F1 | 	sub	arg03, local02
27354     01 16 06 F1 | 	add	arg03, #1
27358     F4 03 00 FF 
2735c     00 12 06 F6 | 	mov	arg01, ##518144
27360     18 44 62 FD | 	getqx	local16
27364     22 15 02 F1 | 	add	arg02, local16
27368     1A 15 02 F1 | 	add	arg02, local08
2736c     7C 04 B0 FD | 	call	#_psram_spin2_write
27370     23 41 02 F1 | 	add	local14, local17
27374     24 41 0A F2 | 	cmp	local14, local18 wz
27378     90 FF 9F 5D |  if_ne	jmp	#LR__3052
2737c     0B 00 00 FF 
27380     CC E4 85 F1 | 	sub	objptr, ##5836
27384                 | LR__3053
27384                 | LR__3054
27384                 | '     
27384                 | ' if ((f>=$80000) && (t<$80000)) 
27384     00 04 00 FF 
27388     00 26 56 F2 | 	cmps	local01, ##524288 wc
2738c     80 00 90 CD |  if_b	jmp	#LR__3056
27390     00 04 00 FF 
27394     00 32 56 F2 | 	cmps	local07, ##524288 wc
27398     74 00 90 3D |  if_ae	jmp	#LR__3056
2739c                 | '   repeat y from y1a to y2a
2739c     15 41 02 F6 | 	mov	local14, local03
273a0     15 2F 52 F2 | 	cmps	local05, local03 wc
273a4     01 4A 86 F6 | 	negc	local19, #1
273a8     17 4D 02 F6 | 	mov	local20, local05
273ac     25 4D 02 F1 | 	add	local20, local19
273b0     0B 00 00 FF 
273b4     CC E4 05 F1 | 	add	objptr, ##5836
273b8                 | LR__3055
273b8     1B 49 02 F6 | 	mov	local18, local09
273bc     15 49 82 F1 | 	sub	local18, local03
273c0     20 49 02 F1 | 	add	local18, local14
273c4     1C 49 02 FD | 	qmul	local18, local10
273c8                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
273c8     19 13 02 F6 | 	mov	arg01, local07
273cc     18 48 62 FD | 	getqx	local18
273d0     18 41 02 FD | 	qmul	local14, local06
273d4     24 13 02 F1 | 	add	arg01, local18
273d8     1A 13 02 F1 | 	add	arg01, local08
273dc     13 15 02 F6 | 	mov	arg02, local01
273e0     16 17 02 F6 | 	mov	arg03, local04
273e4     14 17 82 F1 | 	sub	arg03, local02
273e8     01 16 06 F1 | 	add	arg03, #1
273ec     18 48 62 FD | 	getqx	local18
273f0     24 15 02 F1 | 	add	arg02, local18
273f4     14 15 02 F1 | 	add	arg02, local02
273f8     54 03 B0 FD | 	call	#_psram_spin2_read1
273fc     25 41 02 F1 | 	add	local14, local19
27400     26 41 0A F2 | 	cmp	local14, local20 wz
27404     B0 FF 9F 5D |  if_ne	jmp	#LR__3055
27408     0B 00 00 FF 
2740c     CC E4 85 F1 | 	sub	objptr, ##5836
27410                 | LR__3056
27410                 | '     
27410                 | ' if ((f<$80000) && (t>=$80000)) 
27410     00 04 00 FF 
27414     00 26 56 F2 | 	cmps	local01, ##524288 wc
27418     84 00 90 3D |  if_ae	jmp	#LR__3058
2741c     00 04 00 FF 
27420     00 32 56 F2 | 	cmps	local07, ##524288 wc
27424     78 00 90 CD |  if_b	jmp	#LR__3058
27428                 | '   t:=t & $FFFFFFF
27428     7C 32 06 F4 | 	bitl	local07, #124
2742c                 | '   repeat y from y1a to y2a
2742c     15 41 02 F6 | 	mov	local14, local03
27430     15 2F 52 F2 | 	cmps	local05, local03 wc
27434     01 4E 86 F6 | 	negc	local21, #1
27438     17 51 02 F6 | 	mov	local22, local05
2743c     27 51 02 F1 | 	add	local22, local21
27440     0B 00 00 FF 
27444     CC E4 05 F1 | 	add	objptr, ##5836
27448                 | LR__3057
27448     18 41 02 FD | 	qmul	local14, local06
2744c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2744c     13 13 02 F6 | 	mov	arg01, local01
27450     1B 4D 02 F6 | 	mov	local20, local09
27454     15 4D 82 F1 | 	sub	local20, local03
27458     20 4D 02 F1 | 	add	local20, local14
2745c     18 4A 62 FD | 	getqx	local19
27460     1C 4D 02 FD | 	qmul	local20, local10
27464     25 13 02 F1 | 	add	arg01, local19
27468     14 13 02 F1 | 	add	arg01, local02
2746c     19 15 02 F6 | 	mov	arg02, local07
27470     16 17 02 F6 | 	mov	arg03, local04
27474     14 17 82 F1 | 	sub	arg03, local02
27478     01 16 06 F1 | 	add	arg03, #1
2747c     18 4C 62 FD | 	getqx	local20
27480     26 15 02 F1 | 	add	arg02, local20
27484     1A 15 02 F1 | 	add	arg02, local08
27488     60 03 B0 FD | 	call	#_psram_spin2_write
2748c     27 41 02 F1 | 	add	local14, local21
27490     28 41 0A F2 | 	cmp	local14, local22 wz
27494     B0 FF 9F 5D |  if_ne	jmp	#LR__3057
27498     0B 00 00 FF 
2749c     CC E4 85 F1 | 	sub	objptr, ##5836
274a0                 | LR__3058
274a0                 | '     
274a0                 | ' if ((f<$80000) && (t<$80000)) 
274a0     00 04 00 FF 
274a4     00 26 56 F2 | 	cmps	local01, ##524288 wc
274a8     00 04 00 CF 
274ac     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
274b0     64 00 90 3D |  if_ae	jmp	#LR__3060
274b4                 | '   repeat y from y1a to y2a
274b4     15 41 02 F6 | 	mov	local14, local03
274b8     15 2F 52 F2 | 	cmps	local05, local03 wc
274bc     01 52 86 F6 | 	negc	local23, #1
274c0     17 55 02 F6 | 	mov	local24, local05
274c4     29 55 02 F1 | 	add	local24, local23
274c8                 | LR__3059
274c8     18 41 02 FD | 	qmul	local14, local06
274cc                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
274cc     13 13 02 F6 | 	mov	arg01, local01
274d0     1B 51 02 F6 | 	mov	local22, local09
274d4     15 51 82 F1 | 	sub	local22, local03
274d8     20 51 02 F1 | 	add	local22, local14
274dc     18 4E 62 FD | 	getqx	local21
274e0     1C 51 02 FD | 	qmul	local22, local10
274e4     27 13 02 F1 | 	add	arg01, local21
274e8     14 13 02 F1 | 	add	arg01, local02
274ec     19 15 02 F6 | 	mov	arg02, local07
274f0     16 17 02 F6 | 	mov	arg03, local04
274f4     14 17 82 F1 | 	sub	arg03, local02
274f8     01 16 06 F1 | 	add	arg03, #1
274fc     18 50 62 FD | 	getqx	local22
27500     28 15 02 F1 | 	add	arg02, local22
27504     1A 15 02 F1 | 	add	arg02, local08
27508     98 0D B0 FD | 	call	#__system____builtin_memmove
2750c     29 41 02 F1 | 	add	local14, local23
27510     2A 41 0A F2 | 	cmp	local14, local24 wz
27514     B0 FF 9F 5D |  if_ne	jmp	#LR__3059
27518                 | LR__3060
27518     A7 F0 03 F6 | 	mov	ptra, fp
2751c     B2 00 A0 FD | 	call	#popregs_
27520                 | _hg010b_spin2_blit_ret
27520     2D 00 64 FD | 	ret
27524                 | 
27524                 | ' 
27524                 | ' '..............................................................................
27524                 | ' 
27524                 | ' {{
27524                 | ' }}
27524                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
27524                 | _psram_spin2_startx
27524     04 4A 05 F6 | 	mov	COUNT_, #4
27528     A8 00 A0 FD | 	call	#pushregs_
2752c     09 27 02 F6 | 	mov	local01, arg01
27530     0B 29 02 F6 | 	mov	local02, arg03
27534     0C 2B 02 F6 | 	mov	local03, arg04
27538                 | '     stop() ' restart driver if required
27538     54 01 B0 FD | 	call	#_psram_spin2_stop
2753c     00 26 0E F2 | 	cmp	local01, #0 wz
27540     14 26 06 AB |  if_e	rdlong	local01, #20
27544     13 15 52 F6 | 	abs	arg02, local01 wc
27548     A1 07 00 FF 
2754c     40 14 16 FD | 	qdiv	arg02, ##1000000
27550                 | ' 
27550                 | '     ' use current frequency if none specified
27550                 | ' 
27550                 | '     if freq == 0 
27550                 | '         freq := clkfreq 
27550                 | ' 
27550                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
27550                 | ' 
27550                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
27550                 | '     if burst < 0
27550                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
27550     18 14 62 FD | 	getqx	arg02
27554     0A 19 82 F6 | 	negc	arg04, arg02
27558     03 18 66 F0 | 	shl	arg04, #3
2755c     84 18 86 F1 | 	sub	arg04, #132
27560     04 18 46 F0 | 	shr	arg04, #4
27564     04 18 66 F0 | 	shl	arg04, #4
27568     00 18 56 F2 | 	cmps	arg04, #0 wc
2756c     0E FA 65 C6 |  if_b	neg	result1, #14
27570     10 01 90 CD |  if_b	jmp	#LR__3073
27574                 | ' 
27574                 | '     ' compute the input delay
27574                 | ' 
27574                 | '     if delay <= 0
27574     01 28 56 F2 | 	cmps	local02, #1 wc
27578     10 00 90 3D |  if_ae	jmp	#LR__3070
2757c                 | '         delay := lookupDelay(freq)
2757c     13 13 02 F6 | 	mov	arg01, local01
27580     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
27584     FD 28 02 F6 | 	mov	local02, result1
27588     04 00 90 FD | 	jmp	#LR__3071
2758c                 | LR__3070
2758c                 | '     else
2758c                 | '         delay <#= $f ' limit to 15
2758c     0F 28 66 F3 | 	fles	local02, #15
27590                 | LR__3071
27590                 | ' 
27590                 | '     ' create our lock
27590                 | ' 
27590                 | '     driverlock := LOCKNEW()  
27590     00 FA 05 F6 | 	mov	result1, #0
27594     04 FA 61 FD | 	locknew	result1
27598     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2759c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
275a0                 | '     if driverlock == -1
275a0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
275a4     FF FF 7F FF 
275a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
275ac                 | '         return ERR_NO_LOCK
275ac     1A FA 65 A6 |  if_e	neg	result1, #26
275b0     D0 00 90 AD |  if_e	jmp	#LR__3073
275b4                 | ' 
275b4                 | '     ' patch in the proper data and HUB addresses to the startup structure
275b4                 | ' 
275b4                 | '     long[@startupData][0]:=clkfreq
275b4     14 26 06 FB | 	rdlong	local01, #20
275b8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
275bc     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
275c0                 | ' '    long[@startupData][1]:=$1000_0000
275c0                 | '     long[@startupData][5]:=@deviceData
275c0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
275c4     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
275c8     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
275cc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
275d0     14 14 06 F1 | 	add	arg02, #20
275d4     0A 27 62 FC | 	wrlong	local01, arg02
275d8                 | '     long[@startupData][6]:=@qosData
275d8     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
275dc     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
275e0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
275e4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
275e8     18 14 06 F1 | 	add	arg02, #24
275ec     0A 27 62 FC | 	wrlong	local01, arg02
275f0                 | '     long[@startupData][7]:=$7FF00
275f0     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
275f4     1C 26 06 F1 | 	add	local01, #28
275f8     FF 03 80 FF 
275fc     13 01 6A FC | 	wrlong	##524032, local01
27600                 | ' 
27600                 | '     ' setup some default bank and QoS parameter values
27600                 | ' 
27600                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
27600     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
27604     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
27608     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
2760c     10 18 66 F0 | 	shl	arg04, #16
27610     0C 28 66 F0 | 	shl	local02, #12
27614     14 19 42 F5 | 	or	arg04, local02
27618     18 18 46 F5 | 	or	arg04, #24
2761c     0C 15 02 F6 | 	mov	arg02, arg04
27620     02 16 06 F6 | 	mov	arg03, #2
27624     A0 00 A0 FD | 	call	#\builtin_longfill_
27628                 | '     longfill(@qosData, $FFFF0000, 8)
27628     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
2762c     07 16 06 F6 | 	mov	arg03, #7
27630     28 16 62 FD | 	setq	arg03
27634     80 FF FF FF 
27638     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
2763c                 | ' 
2763c                 | '     ' get the address of the PSRAM memory driver so we can start it
2763c                 | ' 
2763c                 | '     driverAddr:= driver.getDriverAddr()
2763c                 | '     return @driver_start
2763c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
27640     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
27644     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
27648                 | ' 
27648                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
27648                 | ' 
27648                 | '     if desiredcog < 0
27648     00 2A 56 F2 | 	cmps	local03, #0 wc
2764c                 | '         desiredcog := NEWCOG
2764c     10 2A 06 C6 |  if_b	mov	local03, #16
27650                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
27650     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
27654     15 2D 02 F6 | 	mov	local04, local03
27658     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
2765c     0A 2D F2 FC | 	coginit	local04, arg02 wc
27660     01 2C 66 C6 |  if_b	neg	local04, #1
27664     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
27668     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
2766c                 | '     repeat until long[@startupData] == 0 
2766c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
27670                 | LR__3072
27670     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
27674     F8 FF 9F 5D |  if_ne	jmp	#LR__3072
27678                 | ' 
27678                 | '     return drivercog
27678     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2767c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
27680     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27684                 | LR__3073
27684     A7 F0 03 F6 | 	mov	ptra, fp
27688     B2 00 A0 FD | 	call	#popregs_
2768c                 | _psram_spin2_startx_ret
2768c     2D 00 64 FD | 	ret
27690                 | 
27690                 | ' 
27690                 | ' '..............................................................................
27690                 | ' 
27690                 | ' {{
27690                 | ' }}
27690                 | ' PUB stop() : i
27690                 | _psram_spin2_stop
27690     00 00 06 F6 | 	mov	_var01, #0
27694                 | '     if drivercog <> -1
27694     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27698     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2769c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
276a0     FF FF 7F FF 
276a4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
276a8     70 00 90 AD |  if_e	jmp	#LR__3083
276ac                 | '         cogstop(drivercog) ' a rather brutal stop
276ac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
276b0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
276b4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
276b8     03 12 62 FD | 	cogstop	arg01
276bc     97 26 48 FB | 	callpa	#(@LR__3082-@LR__3080)>>2,fcache_load_ptr_
276c0                 | '         repeat i from 0 to 7
276c0                 | LR__3080
276c0                 | '             if long[$7FF00][i*3] < 0
276c0     00 FB 01 F6 | 	mov	result1, _var01
276c4     01 FA 65 F0 | 	shl	result1, #1
276c8     00 FB 01 F1 | 	add	result1, _var01
276cc     02 FA 65 F0 | 	shl	result1, #2
276d0     FF 03 00 FF 
276d4     00 FB 05 F1 | 	add	result1, ##524032
276d8     FD FA 01 FB | 	rdlong	result1, result1
276dc     00 FA 55 F2 | 	cmps	result1, #0 wc
276e0     1C 00 90 3D |  if_ae	jmp	#LR__3081
276e4                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
276e4     00 FB 01 F6 | 	mov	result1, _var01
276e8     01 FA 65 F0 | 	shl	result1, #1
276ec     00 FB 01 F1 | 	add	result1, _var01
276f0     02 FA 65 F0 | 	shl	result1, #2
276f4     FF 03 00 FF 
276f8     00 FB 05 F1 | 	add	result1, ##524032
276fc     FD 20 68 FC | 	wrlong	#16, result1
27700                 | LR__3081
27700     01 00 06 F1 | 	add	_var01, #1
27704     08 00 56 F2 | 	cmps	_var01, #8 wc
27708     B4 FF 9F CD |  if_b	jmp	#LR__3080
2770c                 | LR__3082
2770c                 | '         drivercog := -1
2770c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27710     FF FF FF FF 
27714     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
27718     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2771c                 | LR__3083
2771c                 | '     if driverlock <> -1
2771c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
27720     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
27724     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27728     FF FF 7F FF 
2772c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
27730                 | '         LOCKRET(driverlock)
27730     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
27734     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
27738     05 12 62 5D |  if_ne	lockret	arg01
2773c                 | '         driverlock := -1
2773c     FF FF FF 5F 
27740     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
27744     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
27748     00 FB 01 F6 | 	mov	result1, _var01
2774c                 | _psram_spin2_stop_ret
2774c     2D 00 64 FD | 	ret
27750                 | 
27750                 | ' 
27750                 | ' '..............................................................................
27750                 | ' 
27750                 | ' {{
27750                 | ' }}
27750                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
27750                 | _psram_spin2_read1
27750                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
27750                 | '     if drivercog == -1 ' driver must be running
27750     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27754     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
27758     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2775c     FF FF 7F FF 
27760     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
27764                 | '         return ERR_INACTIVE
27764     0F FA 65 A6 |  if_e	neg	result1, #15
27768     7C 00 90 AD |  if_e	jmp	#LR__3091
2776c                 | '     if count == 0 ' don't even bother reading
2776c     00 16 0E F2 | 	cmp	arg03, #0 wz
27770                 | '         return 0
27770     00 FA 05 A6 |  if_e	mov	result1, #0
27774     70 00 90 AD |  if_e	jmp	#LR__3091
27778                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
27778     00 FA 05 F6 | 	mov	result1, #0
2777c     01 FA 61 FD | 	cogid	result1
27780     FD 00 02 F6 | 	mov	_var01, result1
27784     01 00 66 F0 | 	shl	_var01, #1
27788     FD 00 02 F1 | 	add	_var01, result1
2778c     02 00 66 F0 | 	shl	_var01, #2
27790     FF 03 00 FF 
27794     00 03 06 F6 | 	mov	_var02, ##524032
27798     00 03 02 F1 | 	add	_var02, _var01
2779c                 | '     if long[mailbox] < 0
2779c     01 01 02 FB | 	rdlong	_var01, _var02
277a0     00 00 56 F2 | 	cmps	_var01, #0 wc
277a4                 | '         return ERR_MAILBOX_BUSY
277a4     1C FA 65 C6 |  if_b	neg	result1, #28
277a8     3C 00 90 CD |  if_b	jmp	#LR__3091
277ac                 | '     long[mailbox][2] := count
277ac     08 02 06 F1 | 	add	_var02, #8
277b0     01 17 62 FC | 	wrlong	arg03, _var02
277b4                 | '     long[mailbox][1] := dstHubAddr
277b4     04 02 86 F1 | 	sub	_var02, #4
277b8     01 13 62 FC | 	wrlong	arg01, _var02
277bc     04 02 86 F1 | 	sub	_var02, #4
277c0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
277c0     0A 05 02 F6 | 	mov	_var03, arg02
277c4     D9 04 06 F4 | 	bitl	_var03, #217
277c8     00 00 58 FF 
277cc     00 00 06 F6 | 	mov	_var01, ##-1342177280
277d0     02 01 02 F1 | 	add	_var01, _var03
277d4     01 01 62 FC | 	wrlong	_var01, _var02
277d8                 | '     repeat
277d8                 | LR__3090
277d8                 | '         result := long[mailbox]    
277d8     01 05 02 FB | 	rdlong	_var03, _var02
277dc     00 04 56 F2 | 	cmps	_var03, #0 wc
277e0     F4 FF 9F CD |  if_b	jmp	#LR__3090
277e4                 | '     while result < 0   
277e4                 | '     return -result                       'return success or error
277e4     02 FB 61 F6 | 	neg	result1, _var03
277e8                 | LR__3091
277e8                 | _psram_spin2_read1_ret
277e8     2D 00 64 FD | 	ret
277ec                 | 
277ec                 | ' 
277ec                 | ' '..............................................................................
277ec                 | ' 
277ec                 | ' {{
277ec                 | ' }}
277ec                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
277ec                 | _psram_spin2_write
277ec                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
277ec                 | '     if drivercog == -1 ' driver must be running
277ec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
277f0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
277f4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
277f8     FF FF 7F FF 
277fc     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
27800                 | '         return ERR_INACTIVE
27800     0F FA 65 A6 |  if_e	neg	result1, #15
27804     7C 00 90 AD |  if_e	jmp	#LR__3101
27808                 | '     if count == 0 ' don't even bother writing
27808     00 16 0E F2 | 	cmp	arg03, #0 wz
2780c                 | '         return 0
2780c     00 FA 05 A6 |  if_e	mov	result1, #0
27810     70 00 90 AD |  if_e	jmp	#LR__3101
27814                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
27814     00 FA 05 F6 | 	mov	result1, #0
27818     01 FA 61 FD | 	cogid	result1
2781c     FD 00 02 F6 | 	mov	_var01, result1
27820     01 00 66 F0 | 	shl	_var01, #1
27824     FD 00 02 F1 | 	add	_var01, result1
27828     02 00 66 F0 | 	shl	_var01, #2
2782c     FF 03 00 FF 
27830     00 03 06 F6 | 	mov	_var02, ##524032
27834     00 03 02 F1 | 	add	_var02, _var01
27838                 | '     if long[mailbox] < 0
27838     01 01 02 FB | 	rdlong	_var01, _var02
2783c     00 00 56 F2 | 	cmps	_var01, #0 wc
27840                 | '         return ERR_MAILBOX_BUSY
27840     1C FA 65 C6 |  if_b	neg	result1, #28
27844     3C 00 90 CD |  if_b	jmp	#LR__3101
27848                 | '     long[mailbox][2] := count
27848     08 02 06 F1 | 	add	_var02, #8
2784c     01 17 62 FC | 	wrlong	arg03, _var02
27850                 | '     long[mailbox][1] := srcHubAddr
27850     04 02 86 F1 | 	sub	_var02, #4
27854     01 13 62 FC | 	wrlong	arg01, _var02
27858     04 02 86 F1 | 	sub	_var02, #4
2785c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
2785c     0A 05 02 F6 | 	mov	_var03, arg02
27860     D9 04 06 F4 | 	bitl	_var03, #217
27864     00 00 78 FF 
27868     00 00 06 F6 | 	mov	_var01, ##-268435456
2786c     02 01 02 F1 | 	add	_var01, _var03
27870     01 01 62 FC | 	wrlong	_var01, _var02
27874                 | '     repeat
27874                 | LR__3100
27874                 | '         result := long[mailbox]    
27874     01 05 02 FB | 	rdlong	_var03, _var02
27878     00 04 56 F2 | 	cmps	_var03, #0 wc
2787c     F4 FF 9F CD |  if_b	jmp	#LR__3100
27880                 | '     while result < 0   
27880                 | '     return -result                       'return success or error
27880     02 FB 61 F6 | 	neg	result1, _var03
27884                 | LR__3101
27884                 | _psram_spin2_write_ret
27884     2D 00 64 FD | 	ret
27888                 | 
27888                 | ' 
27888                 | ' ' generalized fill
27888                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
27888                 | _psram_spin2_fill
27888     09 01 02 F6 | 	mov	_var01, arg01
2788c     0A 03 02 F6 | 	mov	_var02, arg02
27890     0B 05 02 F6 | 	mov	_var03, arg03
27894     0D 07 02 F6 | 	mov	_var04, arg05
27898                 | '     case datasize 
27898     01 06 86 F1 | 	sub	_var04, #1
2789c     04 06 26 F3 | 	fle	_var04, #4
278a0     30 06 62 FD | 	jmprel	_var04
278a4                 | LR__3110
278a4     10 00 90 FD | 	jmp	#LR__3111
278a8     18 00 90 FD | 	jmp	#LR__3112
278ac     2C 00 90 FD | 	jmp	#LR__3114
278b0     1C 00 90 FD | 	jmp	#LR__3113
278b4     24 00 90 FD | 	jmp	#LR__3114
278b8                 | LR__3111
278b8                 | '         1: req := driver.R_WRITEBYTE
278b8     00 00 60 FF 
278bc     00 08 06 F6 | 	mov	_var05, ##-1073741824
278c0     20 00 90 FD | 	jmp	#LR__3115
278c4                 | LR__3112
278c4                 | '         2: req := driver.R_WRITEWORD
278c4     00 00 68 FF 
278c8     00 08 06 F6 | 	mov	_var05, ##-805306368
278cc     14 00 90 FD | 	jmp	#LR__3115
278d0                 | LR__3113
278d0                 | '         4: req := driver.R_WRITELONG
278d0     00 00 70 FF 
278d4     00 08 06 F6 | 	mov	_var05, ##-536870912
278d8     08 00 90 FD | 	jmp	#LR__3115
278dc                 | LR__3114
278dc                 | '         other : return ERR_INVALID
278dc     06 FA 65 F6 | 	neg	result1, #6
278e0     94 00 90 FD | 	jmp	#LR__3117
278e4                 | LR__3115
278e4                 | '     if count == 0   ' nothing to do
278e4     00 04 0E F2 | 	cmp	_var03, #0 wz
278e8                 | '         return 0
278e8     00 FA 05 A6 |  if_e	mov	result1, #0
278ec     88 00 90 AD |  if_e	jmp	#LR__3117
278f0                 | '     if drivercog == -1
278f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
278f4     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
278f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
278fc     FF FF 7F FF 
27900     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
27904                 | '         return ERR_INACTIVE
27904     0F FA 65 A6 |  if_e	neg	result1, #15
27908     6C 00 90 AD |  if_e	jmp	#LR__3117
2790c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
2790c     00 FA 05 F6 | 	mov	result1, #0
27910     01 FA 61 FD | 	cogid	result1
27914     FD 06 02 F6 | 	mov	_var04, result1
27918     01 06 66 F0 | 	shl	_var04, #1
2791c     FD 06 02 F1 | 	add	_var04, result1
27920     02 06 66 F0 | 	shl	_var04, #2
27924     FF 03 00 FF 
27928     00 0B 06 F6 | 	mov	_var06, ##524032
2792c     03 0B 02 F1 | 	add	_var06, _var04
27930                 | '     if long[mailbox] < 0
27930     05 07 02 FB | 	rdlong	_var04, _var06
27934     00 06 56 F2 | 	cmps	_var04, #0 wc
27938                 | '         return ERR_MAILBOX_BUSY
27938     1C FA 65 C6 |  if_b	neg	result1, #28
2793c     38 00 90 CD |  if_b	jmp	#LR__3117
27940                 | '     long[mailbox][2] := count
27940     08 0A 06 F1 | 	add	_var06, #8
27944     05 05 62 FC | 	wrlong	_var03, _var06
27948                 | '     long[mailbox][1] := pattern
27948     04 0A 86 F1 | 	sub	_var06, #4
2794c     05 03 62 FC | 	wrlong	_var02, _var06
27950     04 0A 86 F1 | 	sub	_var06, #4
27954                 | '     long[mailbox] := req + (addr & $1ffffff)
27954     04 0D 02 F6 | 	mov	_var07, _var05
27958     00 0F 02 F6 | 	mov	_var08, _var01
2795c     D9 0E 06 F4 | 	bitl	_var08, #217
27960     07 0D 02 F1 | 	add	_var07, _var08
27964     05 0D 62 FC | 	wrlong	_var07, _var06
27968                 | '     repeat
27968                 | LR__3116
27968                 | '         r := long[mailbox]
27968     05 0F 02 FB | 	rdlong	_var08, _var06
2796c     00 0E 56 F2 | 	cmps	_var08, #0 wc
27970     F4 FF 9F CD |  if_b	jmp	#LR__3116
27974                 | '     while r < 0
27974                 | '     return -r                  ' return 0 for success or negated error code
27974     07 FB 61 F6 | 	neg	result1, _var08
27978                 | LR__3117
27978                 | _psram_spin2_fill_ret
27978     2D 00 64 FD | 	ret
2797c                 | 
2797c                 | ' 
2797c                 | ' '..............................................................................
2797c                 | ' 
2797c                 | ' {{
2797c                 | ' }}
2797c                 | ' PUB setQos(cog, qos) : result | mailbox
2797c                 | _psram_spin2_setQos
2797c     09 01 02 F6 | 	mov	_var01, arg01
27980                 | '     if drivercog == -1 ' driver must be running
27980     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27984     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
27988     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2798c     FF FF 7F FF 
27990     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
27994                 | '         return ERR_INACTIVE
27994     0F FA 65 A6 |  if_e	neg	result1, #15
27998     9C 00 90 AD |  if_e	jmp	#LR__3124
2799c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
2799c     00 00 56 F2 | 	cmps	_var01, #0 wc
279a0     08 00 90 CD |  if_b	jmp	#LR__3120
279a4     08 00 56 F2 | 	cmps	_var01, #8 wc
279a8     08 00 90 CD |  if_b	jmp	#LR__3121
279ac                 | LR__3120
279ac                 | '         return ERR_INVALID
279ac     06 FA 65 F6 | 	neg	result1, #6
279b0     84 00 90 FD | 	jmp	#LR__3124
279b4                 | LR__3121
279b4                 | '     long[@qosData][cog] := qos & !$1ff
279b4     FF 15 26 F5 | 	andn	arg02, #511
279b8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
279bc     02 00 66 F0 | 	shl	_var01, #2
279c0     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
279c4     00 15 62 FC | 	wrlong	arg02, _var01
279c8                 | '     mailbox := $7FF00 + drivercog*12
279c8     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
279cc     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
279d0     02 07 02 F6 | 	mov	_var04, _var03
279d4     01 06 66 F0 | 	shl	_var04, #1
279d8     02 07 02 F1 | 	add	_var04, _var03
279dc     02 06 66 F0 | 	shl	_var04, #2
279e0     FF 03 00 FF 
279e4     00 09 06 F6 | 	mov	_var05, ##524032
279e8     03 09 02 F1 | 	add	_var05, _var04
279ec                 | '     repeat until LOCKTRY(driverlock)
279ec     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
279f0                 | LR__3122
279f0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
279f4     06 12 72 FD | 	locktry	arg01 wc
279f8     F4 FF 9F 3D |  if_ae	jmp	#LR__3122
279fc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27a00                 | '     long[mailbox] := driver.R_CONFIG + cogid()
27a00     00 06 06 F6 | 	mov	_var04, #0
27a04     01 06 62 FD | 	cogid	_var04
27a08     00 00 78 FF 
27a0c     00 02 06 F6 | 	mov	_var02, ##-268435456
27a10     03 03 02 F1 | 	add	_var02, _var04
27a14     04 03 62 FC | 	wrlong	_var02, _var05
27a18                 | '     repeat while long[mailbox] < 0
27a18                 | LR__3123
27a18     04 03 02 FB | 	rdlong	_var02, _var05
27a1c     00 02 56 F2 | 	cmps	_var02, #0 wc
27a20     F4 FF 9F CD |  if_b	jmp	#LR__3123
27a24                 | '     LOCKREL(driverlock)
27a24     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
27a28     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
27a2c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27a30     07 12 72 FD | 	lockrel	arg01 wc
27a34     00 FA 05 F6 | 	mov	result1, #0
27a38                 | LR__3124
27a38                 | _psram_spin2_setQos_ret
27a38     2D 00 64 FD | 	ret
27a3c                 | 
27a3c                 | ' 
27a3c                 | ' '..............................................................................
27a3c                 | ' 
27a3c                 | ' {{
27a3c                 | ' }}
27a3c                 | ' PRI lookupDelay(freq) : delay | profile
27a3c                 | _psram_spin2_lookupDelay
27a3c                 | '     profile := @delayTable
27a3c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
27a40     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
27a44                 | '     delay := long[profile][0]
27a44     00 03 02 FB | 	rdlong	_var02, _var01
27a48                 | '     repeat while long[profile][1] 
27a48     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
27a4c     97 16 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
27a50                 | LR__3130
27a50     04 00 06 F1 | 	add	_var01, #4
27a54     00 FB 09 FB | 	rdlong	result1, _var01 wz
27a58     04 00 86 F1 | 	sub	_var01, #4
27a5c     1C 00 90 AD |  if_e	jmp	#LR__3132
27a60                 | '         if freq +< long[profile][1] 
27a60     04 00 06 F1 | 	add	_var01, #4
27a64     00 FB 01 FB | 	rdlong	result1, _var01
27a68     04 00 86 F1 | 	sub	_var01, #4
27a6c     FD 12 12 F2 | 	cmp	arg01, result1 wc
27a70                 | '             quit
27a70                 | '         profile += 4
27a70     04 00 06 31 |  if_ae	add	_var01, #4
27a74                 | '         delay++
27a74     01 02 06 31 |  if_ae	add	_var02, #1
27a78     D4 FF 9F 3D |  if_ae	jmp	#LR__3130
27a7c                 | LR__3131
27a7c                 | LR__3132
27a7c     01 FB 01 F6 | 	mov	result1, _var02
27a80                 | _psram_spin2_lookupDelay_ret
27a80     2D 00 64 FD | 	ret
27a84                 | 
27a84                 | ' 
27a84                 | ' PUB start() : r
27a84                 | _usbnew_spin2_start
27a84     00 00 06 F6 | 	mov	_var01, #0
27a88                 | '   ifnot driver_cog
27a88     15 00 00 FF 
27a8c     87 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
27a90     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
27a94     15 00 00 FF 
27a98     87 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
27a9c     38 00 90 5D |  if_ne	jmp	#LR__3140
27aa0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
27aa0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
27aa4     10 00 06 F6 | 	mov	_var01, #16
27aa8     00 16 06 F6 | 	mov	arg03, #0
27aac     28 16 62 FD | 	setq	arg03
27ab0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
27ab4     01 00 66 C6 |  if_b	neg	_var01, #1
27ab8                 | '     if r >= 0
27ab8     00 00 56 F2 | 	cmps	_var01, #0 wc
27abc                 | '       driver_cog := r+1
27abc     00 03 02 36 |  if_ae	mov	_var02, _var01
27ac0     01 02 06 31 |  if_ae	add	_var02, #1
27ac4     15 00 00 3F 
27ac8     87 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
27acc     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
27ad0     15 00 00 3F 
27ad4     87 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
27ad8                 | LR__3140
27ad8     00 FB 01 F6 | 	mov	result1, _var01
27adc                 | _usbnew_spin2_start_ret
27adc     2D 00 64 FD | 	ret
27ae0                 | 
27ae0                 | '     '' (Always enabled)
27ae0                 | ' 
27ae0                 | ' '' Get current pressed state of a keyboard key
27ae0                 | ' PUB keystate(key) : r | buf[2],tmp
27ae0                 | _usbnew_spin2_keystate
27ae0     00 04 06 F6 | 	mov	_var03, #0
27ae4                 | '   if key >= $E0 && key < $E8
27ae4     E0 12 56 F2 | 	cmps	arg01, #224 wc
27ae8     34 00 90 CD |  if_b	jmp	#LR__3150
27aec     E8 12 56 F2 | 	cmps	arg01, #232 wc
27af0     2C 00 90 3D |  if_ae	jmp	#LR__3150
27af4                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
27af4     00 FA 05 F6 | 	mov	result1, #0
27af8     13 00 00 FF 
27afc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27b00     09 07 02 F6 | 	mov	_var04, arg01
27b04     E0 06 86 F1 | 	sub	_var04, #224
27b08     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
27b0c     03 09 4A F0 | 	shr	_var05, _var04 wz
27b10     13 00 00 FF 
27b14     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27b18     01 FA 65 56 |  if_ne	neg	result1, #1
27b1c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
27b20                 | LR__3150
27b20                 | '   else
27b20                 | '     '' Do this in inline ASM to ensure atomicity
27b20                 | '     tmp := @hkbd_report
27b20     13 00 00 FF 
27b24     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27b28     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
27b2c                 | '     org
27b2c     13 00 00 FF 
27b30     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27b34     97 1E 48 FB | 	callpa	#(@LR__3152-@LR__3151)>>2,fcache_load_ptr_
27b38                 | LR__3151
27b38 000             | 	org	0
27b38 000 28 02 64 FD | 	setq	#1
27b3c 001 04 01 02 FB | 	rdlong	_var01, _var05
27b40 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
27b44 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
27b48 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
27b4c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27b50 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
27b54 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27b58 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
27b5c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27b60 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
27b64 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27b68 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
27b6c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27b70 00e 01 04 66 A6 |  if_e	neg	_var03, #1
27b74 00f             | LR__3152
27b74                 | 	orgh
27b74     02 FB 01 F6 | 	mov	result1, _var03
27b78                 | _usbnew_spin2_keystate_ret
27b78     2D 00 64 FD | 	ret
27b7c                 | 
27b7c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
27b7c                 | ' 
27b7c                 | ' '' Return key event from buffer if there is one
27b7c                 | ' PUB get_key() : r | tail
27b7c                 | _usbnew_spin2_get_key
27b7c                 | '   tail := keyq_tail
27b7c     0F 00 00 FF 
27b80     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
27b84     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
27b88                 | '   if keyq_head == tail
27b88     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
27b8c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
27b90     0F 00 00 FF 
27b94     D4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
27b98     00 03 0A F2 | 	cmp	_var02, _var01 wz
27b9c                 | '     return 0 ' No event
27b9c     00 FA 05 A6 |  if_e	mov	result1, #0
27ba0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
27ba4                 | '   r := keyq_data[tail]
27ba4     00 03 02 F6 | 	mov	_var02, _var01
27ba8     02 02 66 F0 | 	shl	_var02, #2
27bac     0F 00 00 FF 
27bb0     D6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7894
27bb4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
27bb8     01 FB 01 FB | 	rdlong	result1, _var02
27bbc                 | '   if ++tail == KEYQUEUE_SIZE
27bbc     01 00 06 F1 | 	add	_var01, #1
27bc0     80 00 0E F2 | 	cmp	_var01, #128 wz
27bc4                 | '     tail := 0
27bc4     00 00 06 A6 |  if_e	mov	_var01, #0
27bc8                 | '   keyq_tail := tail
27bc8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
27bcc     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
27bd0     0F 00 00 FF 
27bd4     D5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
27bd8                 | _usbnew_spin2_get_key_ret
27bd8     2D 00 64 FD | 	ret
27bdc                 | 
27bdc                 | ' 
27bdc                 | ' '' Emulate mouse movement
27bdc                 | ' PUB mouse_move(x,y)
27bdc                 | _usbnew_spin2_mouse_move
27bdc     02 4A 05 F6 | 	mov	COUNT_, #2
27be0     A8 00 A0 FD | 	call	#pushregs_
27be4     09 27 02 F6 | 	mov	local01, arg01
27be8     0A 29 02 F6 | 	mov	local02, arg02
27bec                 | '   mouse_lock := 1
27bec     14 00 00 FF 
27bf0     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
27bf4     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
27bf8     14 00 00 FF 
27bfc     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
27c00                 | '   waitus(2) ' hope driver is now done
27c00     02 12 06 F6 | 	mov	arg01, #2
27c04     4C 0B B0 FD | 	call	#__system___waitus
27c08                 | '   mouse_xacc := x
27c08     14 00 00 FF 
27c0c     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
27c10     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
27c14                 | '   mouse_yacc := y
27c14     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
27c18     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
27c1c                 | '   if mouse_outptr
27c1c     05 00 00 FF 
27c20     15 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
27c24     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
27c28     0F 00 00 FF 
27c2c     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
27c30     24 00 90 AD |  if_e	jmp	#LR__3160
27c34                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
27c34     10 28 66 F0 | 	shl	local02, #16
27c38     13 27 32 F9 | 	getword	local01, local01, #0
27c3c     13 29 42 F5 | 	or	local02, local01
27c40     0F 00 00 FF 
27c44     D0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
27c48     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
27c4c     0F 00 00 FF 
27c50     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
27c54     13 29 62 FC | 	wrlong	local02, local01
27c58                 | LR__3160
27c58                 | '   mouse_lock := 0
27c58     14 00 00 FF 
27c5c     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
27c60     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
27c64     14 00 00 FF 
27c68     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
27c6c     A7 F0 03 F6 | 	mov	ptra, fp
27c70     B2 00 A0 FD | 	call	#popregs_
27c74                 | _usbnew_spin2_mouse_move_ret
27c74     2D 00 64 FD | 	ret
27c78                 | 
27c78                 | ' 
27c78                 | ' '' Get all button states for a device
27c78                 | ' PUB hidpad_buttons(dev) : r 
27c78                 | _usbnew_spin2_hidpad_buttons
27c78                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
27c78     13 00 00 FF 
27c7c     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
27c80     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27c84     05 12 66 F0 | 	shl	arg01, #5
27c88     09 FB 01 F1 | 	add	result1, arg01
27c8c     18 FA 05 F1 | 	add	result1, #24
27c90     FD FA 01 FB | 	rdlong	result1, result1
27c94     13 00 00 FF 
27c98     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27c9c                 | _usbnew_spin2_hidpad_buttons_ret
27c9c     2D 00 64 FD | 	ret
27ca0                 | 
27ca0                 | ' 
27ca0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
27ca0                 | ' PUB hidpad_axis(dev,axnum) : r
27ca0                 | _usbnew_spin2_hidpad_axis
27ca0                 | '   if axnum +>= 8
27ca0     08 14 16 F2 | 	cmp	arg02, #8 wc
27ca4                 | '     return 0
27ca4     00 FA 05 36 |  if_ae	mov	result1, #0
27ca8     34 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
27cac                 | '   else 
27cac                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
27cac     13 00 00 FF 
27cb0     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
27cb4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27cb8     05 12 66 F0 | 	shl	arg01, #5
27cbc     09 FB 01 F1 | 	add	result1, arg01
27cc0     04 12 06 F6 | 	mov	arg01, #4
27cc4     0A 13 02 F1 | 	add	arg01, arg02
27cc8     01 12 66 F0 | 	shl	arg01, #1
27ccc     FD 12 02 F1 | 	add	arg01, result1
27cd0     09 FB E1 FA | 	rdword	result1, arg01
27cd4     0F FA 65 F7 | 	signx	result1, #15
27cd8     13 00 00 FF 
27cdc     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27ce0                 | _usbnew_spin2_hidpad_axis_ret
27ce0     2D 00 64 FD | 	ret
27ce4                 | 
27ce4                 | ' 
27ce4                 | ' '' Get state of a hat
27ce4                 | ' PUB hidpad_hat(dev,hatnum) : r
27ce4                 | _usbnew_spin2_hidpad_hat
27ce4                 | '   if hatnum +>= 4
27ce4     04 14 16 F2 | 	cmp	arg02, #4 wc
27ce8                 | '     return 0
27ce8     00 FA 05 36 |  if_ae	mov	result1, #0
27cec     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
27cf0                 | '   else 
27cf0                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
27cf0     13 00 00 FF 
27cf4     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
27cf8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27cfc     05 12 66 F0 | 	shl	arg01, #5
27d00     09 FB 01 F1 | 	add	result1, arg01
27d04     1C 12 06 F6 | 	mov	arg01, #28
27d08     0A 13 02 F1 | 	add	arg01, arg02
27d0c     FD 12 02 F1 | 	add	arg01, result1
27d10     09 FB C1 FA | 	rdbyte	result1, arg01
27d14     13 00 00 FF 
27d18     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27d1c                 | _usbnew_spin2_hidpad_hat_ret
27d1c     2D 00 64 FD | 	ret
27d20                 | 
27d20                 | ' 
27d20                 | ' 
27d20                 | ' '--------------------------------------------------------------
27d20                 | ' '---------- Init the variables, start the cog. ----------------
27d20                 | ' '--------------------------------------------------------------
27d20                 | ' 
27d20                 | ' pub start(mbox,scope,cache) :cog,base | iii
27d20                 | _audio096_spin2_start
27d20     04 4A 05 F6 | 	mov	COUNT_, #4
27d24     A8 00 A0 FD | 	call	#pushregs_
27d28     09 27 02 F6 | 	mov	local01, arg01
27d2c                 | ' 
27d2c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
27d2c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
27d2c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
27d2c                 | ' 
27d2c                 | ' mailboxaddr:=mbox 
27d2c     F2 26 62 FC | 	wrlong	local01, objptr
27d30                 | ' scope_ptr:=scope
27d30     04 E4 05 F1 | 	add	objptr, #4
27d34     F2 14 62 FC | 	wrlong	arg02, objptr
27d38                 | ' cache_ptr:=cache
27d38     04 E4 05 F1 | 	add	objptr, #4
27d3c     F2 16 62 FC | 	wrlong	arg03, objptr
27d40                 | ' base:=@channel1[0]
27d40     04 E4 05 F1 | 	add	objptr, #4
27d44     F2 28 02 F6 | 	mov	local02, objptr
27d48                 | ' long[$40]:=mbox
27d48     40 26 66 FC | 	wrlong	local01, #64
27d4c                 | ' repeat iii from 0 to 7
27d4c     00 2A 06 F6 | 	mov	local03, #0
27d50     02 00 00 FF 
27d54     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
27d58     0C E4 85 F1 | 	sub	objptr, #12
27d5c     97 BC 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
27d60                 | LR__3170
27d60                 | '   long[base+64*iii]:=0
27d60     14 27 02 F6 | 	mov	local01, local02
27d64     15 FD 01 F6 | 	mov	result2, local03
27d68     06 FC 65 F0 | 	shl	result2, #6
27d6c     FE 26 02 F1 | 	add	local01, result2
27d70     13 01 68 FC | 	wrlong	#0, local01
27d74                 | '   long[base+64*iii+4]:=0
27d74     14 27 02 F6 | 	mov	local01, local02
27d78     15 FD 01 F6 | 	mov	result2, local03
27d7c     06 FC 65 F0 | 	shl	result2, #6
27d80     FE 26 02 F1 | 	add	local01, result2
27d84     04 26 06 F1 | 	add	local01, #4
27d88     13 01 68 FC | 	wrlong	#0, local01
27d8c                 | '   long[base+64*iii+12]:=0
27d8c     14 2D 02 F6 | 	mov	local04, local02
27d90     15 27 02 F6 | 	mov	local01, local03
27d94     06 26 66 F0 | 	shl	local01, #6
27d98     13 2D 02 F1 | 	add	local04, local01
27d9c     0C 2C 06 F1 | 	add	local04, #12
27da0     16 01 68 FC | 	wrlong	#0, local04
27da4                 | '   long[base+64*iii+16]:=2 
27da4     14 2D 02 F6 | 	mov	local04, local02
27da8     15 27 02 F6 | 	mov	local01, local03
27dac     06 26 66 F0 | 	shl	local01, #6
27db0     13 2D 02 F1 | 	add	local04, local01
27db4     10 2C 06 F1 | 	add	local04, #16
27db8     16 05 68 FC | 	wrlong	#2, local04
27dbc                 | '   word[base+64*iii+20]:=0
27dbc     14 2D 02 F6 | 	mov	local04, local02
27dc0     15 27 02 F6 | 	mov	local01, local03
27dc4     06 26 66 F0 | 	shl	local01, #6
27dc8     13 2D 02 F1 | 	add	local04, local01
27dcc     14 2C 06 F1 | 	add	local04, #20
27dd0     16 01 58 FC | 	wrword	#0, local04
27dd4                 | '   word[base+64*iii+22]:=8192
27dd4     14 2D 02 F6 | 	mov	local04, local02
27dd8     15 27 02 F6 | 	mov	local01, local03
27ddc     06 26 66 F0 | 	shl	local01, #6
27de0     13 2D 02 F1 | 	add	local04, local01
27de4     16 2C 06 F1 | 	add	local04, #22
27de8     10 00 80 FF 
27dec     16 01 58 FC | 	wrword	##8192, local04
27df0                 | '   word[base+64*iii+24]:=4000+2*iii
27df0     15 2D 02 F6 | 	mov	local04, local03
27df4     01 2C 66 F0 | 	shl	local04, #1
27df8     07 00 00 FF 
27dfc     A0 27 06 F6 | 	mov	local01, ##4000
27e00     16 27 02 F1 | 	add	local01, local04
27e04     14 2D 02 F6 | 	mov	local04, local02
27e08     15 FD 01 F6 | 	mov	result2, local03
27e0c     06 FC 65 F0 | 	shl	result2, #6
27e10     FE 2C 02 F1 | 	add	local04, result2
27e14     18 2C 06 F1 | 	add	local04, #24
27e18     16 27 52 FC | 	wrword	local01, local04
27e1c                 | '   word[base+64*iii+26]:=2
27e1c     14 2D 02 F6 | 	mov	local04, local02
27e20     15 27 02 F6 | 	mov	local01, local03
27e24     06 26 66 F0 | 	shl	local01, #6
27e28     13 2D 02 F1 | 	add	local04, local01
27e2c     1A 2C 06 F1 | 	add	local04, #26
27e30     16 05 58 FC | 	wrword	#2, local04
27e34                 | '   long [base+64*iii+8]:=@null | $C0000000
27e34     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
27e38     3E 26 26 F4 | 	bith	local01, #62
27e3c     14 2D 02 F6 | 	mov	local04, local02
27e40     15 17 02 F6 | 	mov	arg03, local03
27e44     06 16 66 F0 | 	shl	arg03, #6
27e48     0B 2D 02 F1 | 	add	local04, arg03
27e4c     08 2C 06 F1 | 	add	local04, #8
27e50     16 27 62 FC | 	wrlong	local01, local04
27e54                 | '   long[base+64*iii+32]:=0
27e54     14 2D 02 F6 | 	mov	local04, local02
27e58     15 27 02 F6 | 	mov	local01, local03
27e5c     06 26 66 F0 | 	shl	local01, #6
27e60     13 2D 02 F1 | 	add	local04, local01
27e64     20 2C 06 F1 | 	add	local04, #32
27e68     16 01 68 FC | 	wrlong	#0, local04
27e6c                 | '   long[base+64*iii+36]:=0
27e6c     14 2D 02 F6 | 	mov	local04, local02
27e70     15 27 02 F6 | 	mov	local01, local03
27e74     06 26 66 F0 | 	shl	local01, #6
27e78     13 2D 02 F1 | 	add	local04, local01
27e7c     24 2C 06 F1 | 	add	local04, #36
27e80     16 01 68 FC | 	wrlong	#0, local04
27e84                 | '   long[base+64*iii+40]:=0
27e84     14 2D 02 F6 | 	mov	local04, local02
27e88     15 27 02 F6 | 	mov	local01, local03
27e8c     06 26 66 F0 | 	shl	local01, #6
27e90     13 2D 02 F1 | 	add	local04, local01
27e94     28 2C 06 F1 | 	add	local04, #40
27e98     16 01 68 FC | 	wrlong	#0, local04
27e9c                 | '   long[base+64*iii+44]:=0
27e9c     14 2D 02 F6 | 	mov	local04, local02
27ea0     15 27 02 F6 | 	mov	local01, local03
27ea4     06 26 66 F0 | 	shl	local01, #6
27ea8     13 2D 02 F1 | 	add	local04, local01
27eac     2C 2C 06 F1 | 	add	local04, #44
27eb0     16 01 68 FC | 	wrlong	#0, local04
27eb4                 | '   long[base+64*iii+28]:=0
27eb4     14 2D 02 F6 | 	mov	local04, local02
27eb8     15 27 02 F6 | 	mov	local01, local03
27ebc     06 26 66 F0 | 	shl	local01, #6
27ec0     13 2D 02 F1 | 	add	local04, local01
27ec4     1C 2C 06 F1 | 	add	local04, #28
27ec8     16 01 68 FC | 	wrlong	#0, local04
27ecc     01 2A 06 F1 | 	add	local03, #1
27ed0     08 2A 56 F2 | 	cmps	local03, #8 wc
27ed4     88 FE 9F CD |  if_b	jmp	#LR__3170
27ed8                 | LR__3171
27ed8     02 00 00 FF 
27edc     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
27ee0                 | '   
27ee0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
27ee0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
27ee4     F2 16 02 F6 | 	mov	arg03, objptr
27ee8     10 2C 06 F6 | 	mov	local04, #16
27eec     28 16 62 FD | 	setq	arg03
27ef0     0A 2D F2 FC | 	coginit	local04, arg02 wc
27ef4     01 2C 66 C6 |  if_b	neg	local04, #1
27ef8                 | ' waitms(100)
27ef8     64 12 06 F6 | 	mov	arg01, #100
27efc     E8 07 B0 FD | 	call	#__system___waitms
27f00                 | ' return cog,base
27f00     14 FD 01 F6 | 	mov	result2, local02
27f04     16 FB 01 F6 | 	mov	result1, local04
27f08     A7 F0 03 F6 | 	mov	ptra, fp
27f0c     B2 00 A0 FD | 	call	#popregs_
27f10                 | _audio096_spin2_start_ret
27f10     2D 00 64 FD | 	ret
27f14                 | 
27f14                 | ' 
27f14                 | ' ' a simple play procedure to not poke everything. 
27f14                 | ' 
27f14                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
27f14                 | _audio096_spin2_play
27f14     0C E4 05 F1 | 	add	objptr, #12
27f18     F2 00 02 F6 | 	mov	_var01, objptr
27f1c     06 12 66 F0 | 	shl	arg01, #6
27f20     09 01 02 F1 | 	add	_var01, arg01
27f24     00 13 02 F6 | 	mov	arg01, _var01
27f28     0C 12 06 F1 | 	add	arg01, #12
27f2c     09 1B 62 FC | 	wrlong	arg05, arg01
27f30     00 1C 56 F2 | 	cmps	arg06, #0 wc
27f34     00 13 02 36 |  if_ae	mov	arg01, _var01
27f38     10 12 06 31 |  if_ae	add	arg01, #16
27f3c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
27f40     02 1A 06 C1 |  if_b	add	arg05, #2
27f44     00 13 02 C6 |  if_b	mov	arg01, _var01
27f48     10 12 06 C1 |  if_b	add	arg01, #16
27f4c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
27f50     0B 13 52 F6 | 	abs	arg01, arg03 wc
27f54     0F 1B 80 FF 
27f58     09 1F 1A FD | 	qdiv	##3546895, arg01
27f5c                 | ' 
27f5c                 | ' base2:=@channel1[0]+64*channel
27f5c                 | ' 
27f5c                 | ' 
27f5c                 | ' long[base2+12]:= len
27f5c                 | ' if loop >=0 
27f5c                 | '   long[base2+16]:= loop
27f5c     0C E4 85 F1 | 	sub	objptr, #12
27f60                 | ' else
27f60                 | '   long[base2+16]:= len+2
27f60                 | ' word[base2+20]:=vol
27f60     00 13 02 F6 | 	mov	arg01, _var01
27f64     14 12 06 F1 | 	add	arg01, #20
27f68     09 19 52 FC | 	wrword	arg04, arg01
27f6c                 | ' word[base2+24]:= 3546895/splfreq 
27f6c     00 19 02 F6 | 	mov	arg04, _var01
27f70     18 18 06 F1 | 	add	arg04, #24
27f74                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27f74                 | ' long[base2+28]:=$40000000    
27f74                 | ' long[base2+32]:=0    
27f74                 | ' long[base2+36]:=0    
27f74                 | ' long[base2+40]:=0    
27f74                 | ' long[base2+44]:=0    
27f74                 | ' long[base2+8]:=sample+$C0000000     
27f74     00 00 60 FF 
27f78     00 14 06 F1 | 	add	arg02, ##-1073741824
27f7c     18 12 62 FD | 	getqx	arg01
27f80     09 13 82 F6 | 	negc	arg01, arg01
27f84     0C 13 52 FC | 	wrword	arg01, arg04
27f88     00 13 02 F6 | 	mov	arg01, _var01
27f8c     1A 12 06 F1 | 	add	arg01, #26
27f90     09 01 5A FC | 	wrword	#256, arg01
27f94     00 13 02 F6 | 	mov	arg01, _var01
27f98     1C 12 06 F1 | 	add	arg01, #28
27f9c     00 00 A0 FF 
27fa0     09 01 68 FC | 	wrlong	##1073741824, arg01
27fa4     00 13 02 F6 | 	mov	arg01, _var01
27fa8     20 12 06 F1 | 	add	arg01, #32
27fac     09 01 68 FC | 	wrlong	#0, arg01
27fb0     00 13 02 F6 | 	mov	arg01, _var01
27fb4     24 12 06 F1 | 	add	arg01, #36
27fb8     09 01 68 FC | 	wrlong	#0, arg01
27fbc     00 13 02 F6 | 	mov	arg01, _var01
27fc0     28 12 06 F1 | 	add	arg01, #40
27fc4     09 01 68 FC | 	wrlong	#0, arg01
27fc8     00 13 02 F6 | 	mov	arg01, _var01
27fcc     2C 12 06 F1 | 	add	arg01, #44
27fd0     09 01 68 FC | 	wrlong	#0, arg01
27fd4     08 00 06 F1 | 	add	_var01, #8
27fd8     00 15 62 FC | 	wrlong	arg02, _var01
27fdc                 | _audio096_spin2_play_ret
27fdc     2D 00 64 FD | 	ret
27fe0                 | 
27fe0                 | ' 
27fe0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
27fe0                 | _audio096_spin2_play8
27fe0                 | ' 
27fe0                 | ' base2:=@channel1[0]+64*channel
27fe0     0C E4 05 F1 | 	add	objptr, #12
27fe4     F2 00 02 F6 | 	mov	_var01, objptr
27fe8     06 12 66 F0 | 	shl	arg01, #6
27fec     09 01 02 F1 | 	add	_var01, arg01
27ff0                 | ' long[base2]:=0
27ff0     00 01 68 FC | 	wrlong	#0, _var01
27ff4                 | ' long[base2+8]:=sample+$40000000 
27ff4     00 00 20 FF 
27ff8     00 14 06 F1 | 	add	arg02, ##1073741824
27ffc     00 13 02 F6 | 	mov	arg01, _var01
28000     08 12 06 F1 | 	add	arg01, #8
28004     09 15 62 FC | 	wrlong	arg02, arg01
28008                 | ' if loop>=0
28008     00 1C 56 F2 | 	cmps	arg06, #0 wc
2800c     0C E4 85 F1 | 	sub	objptr, #12
28010     1C 00 90 CD |  if_b	jmp	#LR__3180
28014                 | '   long[base2+12]:=loop
28014     00 15 02 F6 | 	mov	arg02, _var01
28018     0C 14 06 F1 | 	add	arg02, #12
2801c     0A 1D 62 FC | 	wrlong	arg06, arg02
28020                 | '   long[base2+16]:= len
28020     00 1D 02 F6 | 	mov	arg06, _var01
28024     10 1C 06 F1 | 	add	arg06, #16
28028     0E 1B 62 FC | 	wrlong	arg05, arg06
2802c     1C 00 90 FD | 	jmp	#LR__3181
28030                 | LR__3180
28030                 | ' else
28030                 | '   long[base2+12]:= len
28030     00 1D 02 F6 | 	mov	arg06, _var01
28034     0C 1C 06 F1 | 	add	arg06, #12
28038     0E 1B 62 FC | 	wrlong	arg05, arg06
2803c                 | '   long[base2+16]:= len+1
2803c     01 1A 06 F1 | 	add	arg05, #1
28040     00 13 02 F6 | 	mov	arg01, _var01
28044     10 12 06 F1 | 	add	arg01, #16
28048     09 1B 62 FC | 	wrlong	arg05, arg01
2804c                 | LR__3181
2804c     0B 17 52 F6 | 	abs	arg03, arg03 wc
28050     0F 1B 80 FF 
28054     0B 1F 1A FD | 	qdiv	##3546895, arg03
28058                 | ' word[base2+20]:=vol
28058     00 17 02 F6 | 	mov	arg03, _var01
2805c     14 16 06 F1 | 	add	arg03, #20
28060     0B 19 52 FC | 	wrword	arg04, arg03
28064                 | ' word[base2+24]:= 3546895 /splfreq 
28064     00 13 02 F6 | 	mov	arg01, _var01
28068     18 12 06 F1 | 	add	arg01, #24
2806c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2806c     1A 00 06 F1 | 	add	_var01, #26
28070     18 18 62 FD | 	getqx	arg04
28074     0C 19 82 F6 | 	negc	arg04, arg04
28078     09 19 52 FC | 	wrword	arg04, arg01
2807c     00 01 5A FC | 	wrword	#256, _var01
28080                 | _audio096_spin2_play8_ret
28080     2D 00 64 FD | 	ret
28084                 | 
28084                 | ' 'long[base2+28]:=$40000000
28084                 | ' 
28084                 | '     
28084                 | ' pub stop(channel) 'silence it
28084                 | _audio096_spin2_stop
28084                 | ' 
28084                 | ' word[@channel1[0]+64*channel+20]:=0
28084     0C E4 05 F1 | 	add	objptr, #12
28088     F2 00 02 F6 | 	mov	_var01, objptr
2808c     09 03 02 F6 | 	mov	_var02, arg01
28090     06 02 66 F0 | 	shl	_var02, #6
28094     01 01 02 F1 | 	add	_var01, _var02
28098     14 00 06 F1 | 	add	_var01, #20
2809c     00 01 58 FC | 	wrword	#0, _var01
280a0                 | ' word[@channel1[0]+64*channel+20]:=0
280a0     F2 00 02 F6 | 	mov	_var01, objptr
280a4     06 12 66 F0 | 	shl	arg01, #6
280a8     09 01 02 F1 | 	add	_var01, arg01
280ac     14 00 06 F1 | 	add	_var01, #20
280b0     00 01 58 FC | 	wrword	#0, _var01
280b4     0C E4 85 F1 | 	sub	objptr, #12
280b8                 | _audio096_spin2_stop_ret
280b8     2D 00 64 FD | 	ret
280bc                 | hubexit
280bc     81 00 80 FD | 	jmp	#cogexit
280c0                 | 
280c0                 | __system___setbaud
280c0     14 90 06 FB | 	rdlong	muldiva_, #20
280c4     09 93 02 F6 | 	mov	muldivb_, arg01
280c8     BA 00 A0 FD | 	call	#divide_
280cc     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
280d0                 | LR__3190
280d0     3E FA 9D FA | 	rdpin	result1, #62 wc
280d4     FE FC A1 F1 | 	subx	result2, result2
280d8     F4 FF 9F CD |  if_b	jmp	#LR__3190
280dc                 | LR__3191
280dc     40 7C 64 FD | 	dirl	#62
280e0     40 7E 64 FD | 	dirl	#63
280e4     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
280e8     10 92 66 F0 | 	shl	muldivb_, #16
280ec     07 14 06 F6 | 	mov	arg02, #7
280f0     49 15 02 F1 | 	add	arg02, muldivb_
280f4     3E F8 0C FC | 	wrpin	#124, #62
280f8     3E 14 16 FC | 	wxpin	arg02, #62
280fc     3F 7C 0C FC | 	wrpin	#62, #63
28100     14 14 06 F1 | 	add	arg02, #20
28104     3F 14 16 FC | 	wxpin	arg02, #63
28108     41 7C 64 FD | 	dirh	#62
2810c     41 7E 64 FD | 	dirh	#63
28110                 | __system___setbaud_ret
28110     2D 00 64 FD | 	ret
28114                 | 
28114                 | __system___txraw
28114     01 4A 05 F6 | 	mov	COUNT_, #1
28118     A8 00 A0 FD | 	call	#pushregs_
2811c     09 27 02 F6 | 	mov	local01, arg01
28120     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
28124                 | LR__3200
28124     3E FA 9D FA | 	rdpin	result1, #62 wc
28128     FE FC A1 F1 | 	subx	result2, result2
2812c     F4 FF 9F CD |  if_b	jmp	#LR__3200
28130                 | LR__3201
28130     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
28134     C2 01 00 AF 
28138     00 12 06 A6 |  if_e	mov	arg01, ##230400
2813c     80 FF BF AD |  if_e	call	#__system___setbaud
28140     58 7C 64 FD | 	drvl	#62
28144     3E 26 26 FC | 	wypin	local01, #62
28148     01 FA 05 F6 | 	mov	result1, #1
2814c     A7 F0 03 F6 | 	mov	ptra, fp
28150     B2 00 A0 FD | 	call	#popregs_
28154                 | __system___txraw_ret
28154     2D 00 64 FD | 	ret
28158                 | 
28158                 | __system___rxraw
28158     0D 4A 05 F6 | 	mov	COUNT_, #13
2815c     A8 00 A0 FD | 	call	#pushregs_
28160     09 27 02 F6 | 	mov	local01, arg01
28164     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
28168     C2 01 00 AF 
2816c     00 12 06 A6 |  if_e	mov	arg01, ##230400
28170     4C FF BF AD |  if_e	call	#__system___setbaud
28174     00 26 0E F2 | 	cmp	local01, #0 wz
28178     20 00 90 AD |  if_e	jmp	#LR__3210
2817c     14 2A 06 FB | 	rdlong	local03, #20
28180     0A 2A 46 F0 | 	shr	local03, #10
28184     15 27 02 FD | 	qmul	local01, local03
28188     1A FA 61 FD | 	getct	result1
2818c     18 2C 62 FD | 	getqx	local04
28190     16 FB 01 F1 | 	add	result1, local04
28194     FD 2E 02 F6 | 	mov	local05, result1
28198     04 00 90 FD | 	jmp	#LR__3211
2819c                 | LR__3210
2819c     00 2E 06 F6 | 	mov	local05, #0
281a0                 | LR__3211
281a0     01 30 66 F6 | 	neg	local06, #1
281a4     3F 32 06 F6 | 	mov	local07, #63
281a8     00 34 06 F6 | 	mov	local08, #0
281ac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
281b0     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
281b4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
281b8                 | LR__3212
281b8     08 36 16 F4 | 	testb	local09, #8 wc
281bc     09 36 76 F4 | 	testbn	local09, #9 andc
281c0     0A 36 46 F0 | 	shr	local09, #10
281c4     01 34 06 C6 |  if_b	mov	local08, #1
281c8     40 7E 6C 3D |  if_ae	testp	#63 wz
281cc     01 34 06 26 |  if_nc_and_z	mov	local08, #1
281d0     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
281d4     04 36 46 20 |  if_nc_and_z	shr	local09, #4
281d8                 | LR__3213
281d8     00 28 06 F6 | 	mov	local02, #0
281dc     00 34 0E F2 | 	cmp	local08, #0 wz
281e0     01 28 66 56 |  if_ne	neg	local02, #1
281e4     00 38 06 F6 | 	mov	local10, #0
281e8     00 2A 06 F6 | 	mov	local03, #0
281ec     00 26 0E F2 | 	cmp	local01, #0 wz
281f0     01 2A 66 56 |  if_ne	neg	local03, #1
281f4     00 2C 06 F6 | 	mov	local04, #0
281f8     00 3A 06 F6 | 	mov	local11, #0
281fc     17 3D 02 F6 | 	mov	local12, local05
28200     1A FA 61 FD | 	getct	result1
28204     FD 3E 02 F6 | 	mov	local13, result1
28208     1F 3D 82 F1 | 	sub	local12, local13
2820c     00 3C 56 F2 | 	cmps	local12, #0 wc
28210     00 3A 26 C6 |  if_b	not	local11, #0
28214     00 3A 0E F2 | 	cmp	local11, #0 wz
28218     00 2C 26 56 |  if_ne	not	local04, #0
2821c     16 2B CA F7 | 	test	local03, local04 wz
28220     00 38 26 56 |  if_ne	not	local10, #0
28224     1C 29 4A F5 | 	or	local02, local10 wz
28228     8C FF 9F AD |  if_e	jmp	#LR__3212
2822c     00 34 0E F2 | 	cmp	local08, #0 wz
28230     1B 31 02 56 |  if_ne	mov	local06, local09
28234     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
28238     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2823c     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
28240     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
28244     18 FB 01 F6 | 	mov	result1, local06
28248     A7 F0 03 F6 | 	mov	ptra, fp
2824c     B2 00 A0 FD | 	call	#popregs_
28250                 | __system___rxraw_ret
28250     2D 00 64 FD | 	ret
28254                 | 
28254                 | __system___getus
28254     1A FC 71 FD | 	getct	result2 wc
28258     1A 00 62 FD | 	getct	_var01
2825c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
28260     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
28264     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
28268     20 00 90 5D |  if_ne	jmp	#LR__3220
2826c     14 02 06 FB | 	rdlong	_var02, #20
28270     A1 07 00 FF 
28274     40 02 16 FD | 	qdiv	_var02, ##1000000
28278     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2827c     18 FA 61 FD | 	getqx	result1
28280     FD 02 02 F6 | 	mov	_var02, result1
28284     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
28288     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2828c                 | LR__3220
2828c     01 FD 11 FD | 	qdiv	result2, _var02
28290     19 FC 61 FD | 	getqy	result2
28294     28 FC 61 FD | 	setq	result2
28298     01 01 12 FD | 	qdiv	_var01, _var02
2829c     18 FA 61 FD | 	getqx	result1
282a0                 | __system___getus_ret
282a0     2D 00 64 FD | 	ret
282a4                 | 
282a4                 | __system____builtin_memmove
282a4     09 01 02 F6 | 	mov	_var01, arg01
282a8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
282ac     10 00 90 CD |  if_b	jmp	#LR__3230
282b0     0A 03 02 F6 | 	mov	_var02, arg02
282b4     0B 03 02 F1 | 	add	_var02, arg03
282b8     01 13 52 F2 | 	cmps	arg01, _var02 wc
282bc     48 00 90 CD |  if_b	jmp	#LR__3236
282c0                 | LR__3230
282c0     0B 05 02 F6 | 	mov	_var03, arg03
282c4     02 04 4E F0 | 	shr	_var03, #2 wz
282c8     18 00 90 AD |  if_e	jmp	#LR__3235
282cc     97 0A 48 FB | 	callpa	#(@LR__3233-@LR__3231)>>2,fcache_load_ptr_
282d0                 | LR__3231
282d0     02 09 D8 FC | 	rep	@LR__3234, _var03
282d4                 | LR__3232
282d4     0A 05 02 FB | 	rdlong	_var03, arg02
282d8     09 05 62 FC | 	wrlong	_var03, arg01
282dc     04 12 06 F1 | 	add	arg01, #4
282e0     04 14 06 F1 | 	add	arg02, #4
282e4                 | LR__3233
282e4                 | LR__3234
282e4                 | LR__3235
282e4     02 16 CE F7 | 	test	arg03, #2 wz
282e8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
282ec     09 03 52 5C |  if_ne	wrword	_var02, arg01
282f0     02 12 06 51 |  if_ne	add	arg01, #2
282f4     02 14 06 51 |  if_ne	add	arg02, #2
282f8     01 16 CE F7 | 	test	arg03, #1 wz
282fc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
28300     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
28304     28 00 90 FD | 	jmp	#LR__3242
28308                 | LR__3236
28308     0B 13 02 F1 | 	add	arg01, arg03
2830c     0B 15 02 F1 | 	add	arg02, arg03
28310     0B 07 0A F6 | 	mov	_var04, arg03 wz
28314     18 00 90 AD |  if_e	jmp	#LR__3241
28318     97 0A 48 FB | 	callpa	#(@LR__3239-@LR__3237)>>2,fcache_load_ptr_
2831c                 | LR__3237
2831c     03 09 D8 FC | 	rep	@LR__3240, _var04
28320                 | LR__3238
28320     01 12 86 F1 | 	sub	arg01, #1
28324     01 14 86 F1 | 	sub	arg02, #1
28328     0A 03 C2 FA | 	rdbyte	_var02, arg02
2832c     09 03 42 FC | 	wrbyte	_var02, arg01
28330                 | LR__3239
28330                 | LR__3240
28330                 | LR__3241
28330                 | LR__3242
28330     00 FB 01 F6 | 	mov	result1, _var01
28334                 | __system____builtin_memmove_ret
28334     2D 00 64 FD | 	ret
28338                 | 
28338                 | __system__longmove
28338     09 01 02 F6 | 	mov	_var01, arg01
2833c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
28340     24 00 90 3D |  if_ae	jmp	#LR__3254
28344     0B 03 0A F6 | 	mov	_var02, arg03 wz
28348     54 00 90 AD |  if_e	jmp	#LR__3260
2834c     97 0A 48 FB | 	callpa	#(@LR__3252-@LR__3250)>>2,fcache_load_ptr_
28350                 | LR__3250
28350     01 09 D8 FC | 	rep	@LR__3253, _var02
28354                 | LR__3251
28354     0A 03 02 FB | 	rdlong	_var02, arg02
28358     09 03 62 FC | 	wrlong	_var02, arg01
2835c     04 12 06 F1 | 	add	arg01, #4
28360     04 14 06 F1 | 	add	arg02, #4
28364                 | LR__3252
28364                 | LR__3253
28364     38 00 90 FD | 	jmp	#LR__3260
28368                 | LR__3254
28368     0B 03 02 F6 | 	mov	_var02, arg03
2836c     02 02 66 F0 | 	shl	_var02, #2
28370     01 13 02 F1 | 	add	arg01, _var02
28374     0B 05 02 F6 | 	mov	_var03, arg03
28378     02 04 66 F0 | 	shl	_var03, #2
2837c     02 15 02 F1 | 	add	arg02, _var03
28380     0B 07 0A F6 | 	mov	_var04, arg03 wz
28384     18 00 90 AD |  if_e	jmp	#LR__3259
28388     97 0A 48 FB | 	callpa	#(@LR__3257-@LR__3255)>>2,fcache_load_ptr_
2838c                 | LR__3255
2838c     03 09 D8 FC | 	rep	@LR__3258, _var04
28390                 | LR__3256
28390     04 12 86 F1 | 	sub	arg01, #4
28394     04 14 86 F1 | 	sub	arg02, #4
28398     0A 07 02 FB | 	rdlong	_var04, arg02
2839c     09 07 62 FC | 	wrlong	_var04, arg01
283a0                 | LR__3257
283a0                 | LR__3258
283a0                 | LR__3259
283a0                 | LR__3260
283a0     00 FB 01 F6 | 	mov	result1, _var01
283a4                 | __system__longmove_ret
283a4     2D 00 64 FD | 	ret
283a8                 | 
283a8                 | __system____builtin_strcpy
283a8     09 01 02 F6 | 	mov	_var01, arg01
283ac     97 0A 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
283b0                 | LR__3270
283b0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
283b4     09 FB 41 FC | 	wrbyte	result1, arg01
283b8     01 14 06 F1 | 	add	arg02, #1
283bc     01 12 06 F1 | 	add	arg01, #1
283c0     EC FF 9F 5D |  if_ne	jmp	#LR__3270
283c4                 | LR__3271
283c4     00 FB 01 F6 | 	mov	result1, _var01
283c8                 | __system____builtin_strcpy_ret
283c8     2D 00 64 FD | 	ret
283cc                 | 
283cc                 | __system____topofstack
283cc     00 4A 05 F6 | 	mov	COUNT_, #0
283d0     A8 00 A0 FD | 	call	#pushregs_
283d4     08 F0 07 F1 | 	add	ptra, #8
283d8     04 4E 05 F1 | 	add	fp, #4
283dc     A7 12 62 FC | 	wrlong	arg01, fp
283e0     A7 FA 01 F6 | 	mov	result1, fp
283e4     04 4E 85 F1 | 	sub	fp, #4
283e8     A7 F0 03 F6 | 	mov	ptra, fp
283ec     B2 00 A0 FD | 	call	#popregs_
283f0                 | __system____topofstack_ret
283f0     2D 00 64 FD | 	ret
283f4                 | 
283f4                 | __system___lockmem
283f4     00 FA 05 F6 | 	mov	result1, #0
283f8     01 FA 61 FD | 	cogid	result1
283fc     00 FB 05 F1 | 	add	result1, #256
28400                 | LR__3280
28400     09 01 0A FB | 	rdlong	_var01, arg01 wz
28404     09 FB 61 AC |  if_e	wrlong	result1, arg01
28408     09 01 02 AB |  if_e	rdlong	_var01, arg01
2840c     09 01 02 AB |  if_e	rdlong	_var01, arg01
28410     FD 00 0A F2 | 	cmp	_var01, result1 wz
28414     E8 FF 9F 5D |  if_ne	jmp	#LR__3280
28418                 | __system___lockmem_ret
28418     2D 00 64 FD | 	ret
2841c                 | 
2841c                 | __system___string_cmp
2841c     97 14 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
28420                 | LR__3290
28420     09 01 C2 FA | 	rdbyte	_var01, arg01
28424     0A 03 C2 FA | 	rdbyte	_var02, arg02
28428     00 05 02 F6 | 	mov	_var03, _var01
2842c     01 05 8A F1 | 	sub	_var03, _var02 wz
28430     01 12 06 F1 | 	add	arg01, #1
28434     01 14 06 F1 | 	add	arg02, #1
28438     0C 00 90 5D |  if_ne	jmp	#LR__3292
2843c     00 00 0E F2 | 	cmp	_var01, #0 wz
28440     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
28444     D8 FF 9F 5D |  if_ne	jmp	#LR__3290
28448                 | LR__3291
28448                 | LR__3292
28448     02 FB 01 F6 | 	mov	result1, _var03
2844c                 | __system___string_cmp_ret
2844c     2D 00 64 FD | 	ret
28450                 | 
28450                 | __system___string_concat
28450     05 4A 05 F6 | 	mov	COUNT_, #5
28454     A8 00 A0 FD | 	call	#pushregs_
28458     09 27 02 F6 | 	mov	local01, arg01
2845c     0A 29 02 F6 | 	mov	local02, arg02
28460     13 13 02 F6 | 	mov	arg01, local01
28464     09 2B 02 F6 | 	mov	local03, arg01
28468     97 06 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
2846c                 | LR__3300
2846c     15 FB C9 FA | 	rdbyte	result1, local03 wz
28470     01 2A 06 51 |  if_ne	add	local03, #1
28474     F4 FF 9F 5D |  if_ne	jmp	#LR__3300
28478                 | LR__3301
28478     09 2B 82 F1 | 	sub	local03, arg01
2847c     15 2D 02 F6 | 	mov	local04, local03
28480     14 13 02 F6 | 	mov	arg01, local02
28484     09 2B 02 F6 | 	mov	local03, arg01
28488     97 06 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
2848c                 | LR__3302
2848c     15 FB C9 FA | 	rdbyte	result1, local03 wz
28490     01 2A 06 51 |  if_ne	add	local03, #1
28494     F4 FF 9F 5D |  if_ne	jmp	#LR__3302
28498                 | LR__3303
28498     09 2B 82 F1 | 	sub	local03, arg01
2849c     16 13 02 F6 | 	mov	arg01, local04
284a0     15 13 02 F1 | 	add	arg01, local03
284a4     01 12 06 F1 | 	add	arg01, #1
284a8     F0 40 B0 FD | 	call	#__system___gc_alloc_managed
284ac     FD 2E 0A F6 | 	mov	local05, result1 wz
284b0     28 00 90 AD |  if_e	jmp	#LR__3304
284b4     17 13 02 F6 | 	mov	arg01, local05
284b8     13 15 02 F6 | 	mov	arg02, local01
284bc     16 17 02 F6 | 	mov	arg03, local04
284c0     E0 FD BF FD | 	call	#__system____builtin_memmove
284c4     17 13 02 F6 | 	mov	arg01, local05
284c8     16 13 02 F1 | 	add	arg01, local04
284cc     01 2A 06 F1 | 	add	local03, #1
284d0     14 15 02 F6 | 	mov	arg02, local02
284d4     15 17 02 F6 | 	mov	arg03, local03
284d8     C8 FD BF FD | 	call	#__system____builtin_memmove
284dc                 | LR__3304
284dc     17 FB 01 F6 | 	mov	result1, local05
284e0     A7 F0 03 F6 | 	mov	ptra, fp
284e4     B2 00 A0 FD | 	call	#popregs_
284e8                 | __system___string_concat_ret
284e8     2D 00 64 FD | 	ret
284ec                 | 
284ec                 | __system___tx
284ec     02 4A 05 F6 | 	mov	COUNT_, #2
284f0     A8 00 A0 FD | 	call	#pushregs_
284f4     09 27 02 F6 | 	mov	local01, arg01
284f8     0A 26 0E F2 | 	cmp	local01, #10 wz
284fc     18 00 90 5D |  if_ne	jmp	#LR__3310
28500     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28504     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
28508     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2850c     02 28 CE F7 | 	test	local02, #2 wz
28510     0D 12 06 56 |  if_ne	mov	arg01, #13
28514     FC FB BF 5D |  if_ne	call	#__system___txraw
28518                 | LR__3310
28518     13 13 02 F6 | 	mov	arg01, local01
2851c     F4 FB BF FD | 	call	#__system___txraw
28520     A7 F0 03 F6 | 	mov	ptra, fp
28524     B2 00 A0 FD | 	call	#popregs_
28528                 | __system___tx_ret
28528     2D 00 64 FD | 	ret
2852c                 | 
2852c                 | __system___rx
2852c     01 4A 05 F6 | 	mov	COUNT_, #1
28530     A8 00 A0 FD | 	call	#pushregs_
28534                 | LR__3320
28534     00 12 06 F6 | 	mov	arg01, #0
28538     1C FC BF FD | 	call	#__system___rxraw
2853c     FD 26 02 F6 | 	mov	local01, result1
28540     FF FF 7F FF 
28544     FF 27 0E F2 | 	cmp	local01, ##-1 wz
28548     E8 FF 9F AD |  if_e	jmp	#LR__3320
2854c     0D 26 0E F2 | 	cmp	local01, #13 wz
28550     14 00 90 5D |  if_ne	jmp	#LR__3321
28554     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28558     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2855c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28560     02 FA CD F7 | 	test	result1, #2 wz
28564     0A 26 06 56 |  if_ne	mov	local01, #10
28568                 | LR__3321
28568     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2856c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
28570     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28574     01 12 CE F7 | 	test	arg01, #1 wz
28578     1C 00 90 AD |  if_e	jmp	#LR__3324
2857c     7F 26 0E F2 | 	cmp	local01, #127 wz
28580     0C 00 90 5D |  if_ne	jmp	#LR__3322
28584     08 12 06 F6 | 	mov	arg01, #8
28588     60 FF BF FD | 	call	#__system___tx
2858c     08 00 90 FD | 	jmp	#LR__3323
28590                 | LR__3322
28590     13 13 02 F6 | 	mov	arg01, local01
28594     54 FF BF FD | 	call	#__system___tx
28598                 | LR__3323
28598                 | LR__3324
28598     13 FB 01 F6 | 	mov	result1, local01
2859c     A7 F0 03 F6 | 	mov	ptra, fp
285a0     B2 00 A0 FD | 	call	#popregs_
285a4                 | __system___rx_ret
285a4     2D 00 64 FD | 	ret
285a8                 | 
285a8                 | __system___pinwrite
285a8     09 01 02 F6 | 	mov	_var01, arg01
285ac     1F 00 06 F5 | 	and	_var01, #31
285b0     20 12 CE F7 | 	test	arg01, #32 wz
285b4     06 12 46 F0 | 	shr	arg01, #6
285b8     09 13 CA F9 | 	bmask	arg01, arg01
285bc     00 13 62 F0 | 	shl	arg01, _var01
285c0     00 15 62 F0 | 	shl	arg02, _var01
285c4     1C 00 90 AD |  if_e	jmp	#LR__3330
285c8     09 F7 43 F5 | 	or	dirb, arg01
285cc     FD 01 02 F6 | 	mov	_var01, outb
285d0     09 01 22 F5 | 	andn	_var01, arg01
285d4     09 15 02 F5 | 	and	arg02, arg01
285d8     0A 01 42 F5 | 	or	_var01, arg02
285dc     00 FB 03 F6 | 	mov	outb, _var01
285e0     18 00 90 FD | 	jmp	#LR__3331
285e4                 | LR__3330
285e4     09 F5 43 F5 | 	or	dira, arg01
285e8     FC 01 02 F6 | 	mov	_var01, outa
285ec     09 01 22 F5 | 	andn	_var01, arg01
285f0     09 15 02 F5 | 	and	arg02, arg01
285f4     0A 01 42 F5 | 	or	_var01, arg02
285f8     00 F9 03 F6 | 	mov	outa, _var01
285fc                 | LR__3331
285fc                 | __system___pinwrite_ret
285fc     2D 00 64 FD | 	ret
28600                 | 
28600                 | __system___basic_read_line
28600     06 4A 05 F6 | 	mov	COUNT_, #6
28604     A8 00 A0 FD | 	call	#pushregs_
28608     09 27 02 F6 | 	mov	local01, arg01
2860c     00 28 06 F6 | 	mov	local02, #0
28610     18 2A 06 F6 | 	mov	local03, #24
28614     00 2C 06 F6 | 	mov	local04, #0
28618     18 12 06 F6 | 	mov	arg01, #24
2861c     7C 3F B0 FD | 	call	#__system___gc_alloc_managed
28620     FD 2E 0A F6 | 	mov	local05, result1 wz
28624     17 FB 01 A6 |  if_e	mov	result1, local05
28628     B0 00 90 AD |  if_e	jmp	#LR__3343
2862c                 | LR__3340
2862c     13 13 02 F6 | 	mov	arg01, local01
28630     7C 0B B0 FD | 	call	#__system___basic_get_char
28634     FD 30 02 F6 | 	mov	local06, result1
28638     01 30 56 F2 | 	cmps	local06, #1 wc
2863c     8C 00 90 CD |  if_b	jmp	#LR__3342
28640     0A 30 0E F2 | 	cmp	local06, #10 wz
28644     10 00 90 5D |  if_ne	jmp	#LR__3341
28648     00 2C 0E F2 | 	cmp	local04, #0 wz
2864c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
28650     01 28 86 11 |  if_a	sub	local02, #1
28654     74 00 90 FD | 	jmp	#LR__3342
28658                 | LR__3341
28658     0D 30 0E F2 | 	cmp	local06, #13 wz
2865c     01 2C 06 A6 |  if_e	mov	local04, #1
28660     00 2C 06 56 |  if_ne	mov	local04, #0
28664     08 30 0E F2 | 	cmp	local06, #8 wz
28668     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
2866c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
28670     01 28 86 21 |  if_nc_and_z	sub	local02, #1
28674     B4 FF 9F AD |  if_e	jmp	#LR__3340
28678     17 17 02 F6 | 	mov	arg03, local05
2867c     14 17 02 F1 | 	add	arg03, local02
28680     0B 31 42 FC | 	wrbyte	local06, arg03
28684     01 28 06 F1 | 	add	local02, #1
28688     15 29 0A F2 | 	cmp	local02, local03 wz
2868c     9C FF 9F 5D |  if_ne	jmp	#LR__3340
28690     15 13 02 F6 | 	mov	arg01, local03
28694     20 12 06 F1 | 	add	arg01, #32
28698     00 3F B0 FD | 	call	#__system___gc_alloc_managed
2869c     FD 30 0A F6 | 	mov	local06, result1 wz
286a0     18 FB 01 A6 |  if_e	mov	result1, local06
286a4     34 00 90 AD |  if_e	jmp	#LR__3343
286a8     18 13 02 F6 | 	mov	arg01, local06
286ac     17 15 02 F6 | 	mov	arg02, local05
286b0     15 17 02 F6 | 	mov	arg03, local03
286b4     EC FB BF FD | 	call	#__system____builtin_memmove
286b8     20 2A 06 F1 | 	add	local03, #32
286bc     17 13 02 F6 | 	mov	arg01, local05
286c0     14 40 B0 FD | 	call	#__system___gc_free
286c4     18 2F 02 F6 | 	mov	local05, local06
286c8     60 FF 9F FD | 	jmp	#LR__3340
286cc                 | LR__3342
286cc     17 31 02 F6 | 	mov	local06, local05
286d0     14 31 02 F1 | 	add	local06, local02
286d4     18 01 48 FC | 	wrbyte	#0, local06
286d8     17 FB 01 F6 | 	mov	result1, local05
286dc                 | LR__3343
286dc     A7 F0 03 F6 | 	mov	ptra, fp
286e0     B2 00 A0 FD | 	call	#popregs_
286e4                 | __system___basic_read_line_ret
286e4     2D 00 64 FD | 	ret
286e8                 | 
286e8                 | __system___waitms
286e8     09 01 02 F6 | 	mov	_var01, arg01
286ec     1A 02 62 FD | 	getct	_var02
286f0     14 04 06 FB | 	rdlong	_var03, #20
286f4     97 14 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
286f8                 | LR__3350
286f8     01 00 00 FF 
286fc     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
28700     1C 00 90 CD |  if_b	jmp	#LR__3352
28704     02 03 02 F1 | 	add	_var02, _var03
28708     01 13 02 F6 | 	mov	arg01, _var02
2870c     00 12 66 FA | 	addct1	arg01, #0
28710     24 22 60 FD | 	waitct1
28714     01 00 00 FF 
28718     E8 01 86 F1 | 	sub	_var01, ##1000
2871c     D8 FF 9F FD | 	jmp	#LR__3350
28720                 | LR__3351
28720                 | LR__3352
28720     01 00 56 F2 | 	cmps	_var01, #1 wc
28724     28 00 90 CD |  if_b	jmp	#LR__3353
28728     02 01 02 FD | 	qmul	_var01, _var03
2872c     01 00 00 FF 
28730     E8 17 06 F6 | 	mov	arg03, ##1000
28734     19 FA 61 FD | 	getqy	result1
28738     18 12 62 FD | 	getqx	arg01
2873c     28 FA 61 FD | 	setq	result1
28740     0B 13 12 FD | 	qdiv	arg01, arg03
28744     18 12 62 FD | 	getqx	arg01
28748     01 13 62 FA | 	addct1	arg01, _var02
2874c     24 22 60 FD | 	waitct1
28750                 | LR__3353
28750                 | __system___waitms_ret
28750     2D 00 64 FD | 	ret
28754                 | 
28754                 | __system___waitus
28754     09 01 02 F6 | 	mov	_var01, arg01
28758     1A 02 62 FD | 	getct	_var02
2875c     14 04 06 FB | 	rdlong	_var03, #20
28760     97 14 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
28764                 | LR__3360
28764     A1 07 00 FF 
28768     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2876c     1C 00 90 CD |  if_b	jmp	#LR__3362
28770     02 03 02 F1 | 	add	_var02, _var03
28774     01 13 02 F6 | 	mov	arg01, _var02
28778     00 12 66 FA | 	addct1	arg01, #0
2877c     24 22 60 FD | 	waitct1
28780     A1 07 00 FF 
28784     40 00 86 F1 | 	sub	_var01, ##1000000
28788     D8 FF 9F FD | 	jmp	#LR__3360
2878c                 | LR__3361
2878c                 | LR__3362
2878c     01 00 56 F2 | 	cmps	_var01, #1 wc
28790     28 00 90 CD |  if_b	jmp	#LR__3363
28794     02 01 02 FD | 	qmul	_var01, _var03
28798     A1 07 00 FF 
2879c     40 16 06 F6 | 	mov	arg03, ##1000000
287a0     19 FA 61 FD | 	getqy	result1
287a4     18 12 62 FD | 	getqx	arg01
287a8     28 FA 61 FD | 	setq	result1
287ac     0B 13 12 FD | 	qdiv	arg01, arg03
287b0     18 FA 61 FD | 	getqx	result1
287b4     FD 02 62 FA | 	addct1	_var02, result1
287b8     24 22 60 FD | 	waitct1
287bc                 | LR__3363
287bc                 | __system___waitus_ret
287bc     2D 00 64 FD | 	ret
287c0                 | 
287c0                 | __system___mount
287c0     0B 4A 05 F6 | 	mov	COUNT_, #11
287c4     A8 00 A0 FD | 	call	#pushregs_
287c8     09 27 02 F6 | 	mov	local01, arg01
287cc     0A 29 0A F6 | 	mov	local02, arg02 wz
287d0     01 2A 66 F6 | 	neg	local03, #1
287d4     01 FA 65 A6 |  if_e	neg	result1, #1
287d8     98 02 90 AD |  if_e	jmp	#LR__3385
287dc     13 FB C1 FA | 	rdbyte	result1, local01
287e0     2F FA 0D F2 | 	cmp	result1, #47 wz
287e4     28 00 90 5D |  if_ne	jmp	#LR__3372
287e8     13 13 02 F6 | 	mov	arg01, local01
287ec     09 2D 02 F6 | 	mov	local04, arg01
287f0     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
287f4                 | LR__3370
287f4     16 FB C9 FA | 	rdbyte	result1, local04 wz
287f8     01 2C 06 51 |  if_ne	add	local04, #1
287fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
28800                 | LR__3371
28800     09 2D 82 F1 | 	sub	local04, arg01
28804     16 FB 01 F6 | 	mov	result1, local04
28808     10 FA 55 F2 | 	cmps	result1, #16 wc
2880c     14 00 90 CD |  if_b	jmp	#LR__3373
28810                 | LR__3372
28810     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28814     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
28818     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2881c     01 FA 65 F6 | 	neg	result1, #1
28820     50 02 90 FD | 	jmp	#LR__3385
28824                 | LR__3373
28824     00 2E 06 F6 | 	mov	local05, #0
28828                 | LR__3374
28828     04 2E 56 F2 | 	cmps	local05, #4 wc
2882c     B0 00 90 3D |  if_ae	jmp	#LR__3379
28830     17 13 02 F6 | 	mov	arg01, local05
28834     02 12 66 F0 | 	shl	arg01, #2
28838     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2883c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28840     09 FB 09 FB | 	rdlong	result1, arg01 wz
28844     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28848     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
2884c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
28850     84 00 90 8D |  if_c_and_z	jmp	#LR__3378
28854     17 13 02 F6 | 	mov	arg01, local05
28858     02 12 66 F0 | 	shl	arg01, #2
2885c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28860     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28864     09 13 02 FB | 	rdlong	arg01, arg01
28868     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2886c     09 2D 02 F6 | 	mov	local04, arg01
28870     97 06 48 FB | 	callpa	#(@LR__3376-@LR__3375)>>2,fcache_load_ptr_
28874                 | LR__3375
28874     16 FB C9 FA | 	rdbyte	result1, local04 wz
28878     01 2C 06 51 |  if_ne	add	local04, #1
2887c     F4 FF 9F 5D |  if_ne	jmp	#LR__3375
28880                 | LR__3376
28880     09 2D 82 F1 | 	sub	local04, arg01
28884     16 31 02 F6 | 	mov	local06, local04
28888     18 13 02 F6 | 	mov	arg01, local06
2888c     13 13 02 F1 | 	add	arg01, local01
28890     09 FB C1 FA | 	rdbyte	result1, arg01
28894     2F FA 0D F2 | 	cmp	result1, #47 wz
28898     18 33 02 56 |  if_ne	mov	local07, local06
2889c     13 33 02 51 |  if_ne	add	local07, local01
288a0     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
288a4     30 00 90 5D |  if_ne	jmp	#LR__3377
288a8     17 17 02 F6 | 	mov	arg03, local05
288ac     02 16 66 F0 | 	shl	arg03, #2
288b0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
288b4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
288b8     0B 15 02 FB | 	rdlong	arg02, arg03
288bc     13 13 02 F6 | 	mov	arg01, local01
288c0     18 17 02 F6 | 	mov	arg03, local06
288c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
288c8     54 51 B0 FD | 	call	#__system__strncmp
288cc     00 FA 0D F2 | 	cmp	result1, #0 wz
288d0     17 2B 02 A6 |  if_e	mov	local03, local05
288d4     08 00 90 AD |  if_e	jmp	#LR__3379
288d8                 | LR__3377
288d8                 | LR__3378
288d8     01 2E 06 F1 | 	add	local05, #1
288dc     48 FF 9F FD | 	jmp	#LR__3374
288e0                 | LR__3379
288e0     FF FF 7F FF 
288e4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
288e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
288ec     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
288f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
288f4     01 FA 65 A6 |  if_e	neg	result1, #1
288f8     78 01 90 AD |  if_e	jmp	#LR__3385
288fc     15 2F 02 F6 | 	mov	local05, local03
28900     17 33 02 F6 | 	mov	local07, local05
28904     02 32 66 F0 | 	shl	local07, #2
28908     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2890c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
28910     19 31 0A FB | 	rdlong	local06, local07 wz
28914     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28918     58 00 90 AD |  if_e	jmp	#LR__3380
2891c     4C 30 06 F1 | 	add	local06, #76
28920     18 33 0A FB | 	rdlong	local07, local06 wz
28924     4C 30 86 F1 | 	sub	local06, #76
28928     48 00 90 AD |  if_e	jmp	#LR__3380
2892c     4C 30 06 F1 | 	add	local06, #76
28930     18 33 02 FB | 	rdlong	local07, local06
28934     19 2B 02 F6 | 	mov	local03, local07
28938     13 32 46 F7 | 	zerox	local07, #19
2893c     14 2A 46 F0 | 	shr	local03, #20
28940     02 2A 66 F0 | 	shl	local03, #2
28944     ED 2A 02 F1 | 	add	local03, __methods__
28948     15 2B 02 FB | 	rdlong	local03, local03
2894c     17 31 02 F6 | 	mov	local06, local05
28950     02 30 66 F0 | 	shl	local06, #2
28954     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28958     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2895c     18 13 02 FB | 	rdlong	arg01, local06
28960     F2 30 02 F6 | 	mov	local06, objptr
28964     19 E5 01 F6 | 	mov	objptr, local07
28968     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2896c     2D 2A 62 FD | 	call	local03
28970     18 E5 01 F6 | 	mov	objptr, local06
28974                 | LR__3380
28974     17 35 02 F6 | 	mov	local08, local05
28978     02 34 66 F0 | 	shl	local08, #2
2897c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28980     F3 34 02 F1 | 	add	local08, ptr___system__dat__
28984     1A 29 62 FC | 	wrlong	local02, local08
28988     00 28 0E F2 | 	cmp	local02, #0 wz
2898c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28990     18 00 90 5D |  if_ne	jmp	#LR__3381
28994     02 2E 66 F0 | 	shl	local05, #2
28998     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2899c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
289a0     17 01 68 FC | 	wrlong	#0, local05
289a4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
289a8     C4 00 90 FD | 	jmp	#LR__3384
289ac                 | LR__3381
289ac     17 37 02 F6 | 	mov	local09, local05
289b0     04 36 66 F0 | 	shl	local09, #4
289b4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
289b8     F3 36 02 F1 | 	add	local09, ptr___system__dat__
289bc     1B 13 02 F6 | 	mov	arg01, local09
289c0     13 15 02 F6 | 	mov	arg02, local01
289c4     10 16 06 F6 | 	mov	arg03, #16
289c8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
289cc     A0 4F B0 FD | 	call	#__system__strncpy
289d0     48 28 06 F1 | 	add	local02, #72
289d4     14 35 0A FB | 	rdlong	local08, local02 wz
289d8     48 28 86 F1 | 	sub	local02, #72
289dc     7C 00 90 AD |  if_e	jmp	#LR__3383
289e0     48 28 06 F1 | 	add	local02, #72
289e4     14 35 02 FB | 	rdlong	local08, local02
289e8     1A 39 02 F6 | 	mov	local10, local08
289ec     13 34 46 F7 | 	zerox	local08, #19
289f0     14 38 46 F0 | 	shr	local10, #20
289f4     02 38 66 F0 | 	shl	local10, #2
289f8     ED 38 02 F1 | 	add	local10, __methods__
289fc     1C 39 02 FB | 	rdlong	local10, local10
28a00     1B 13 02 F6 | 	mov	arg01, local09
28a04     F2 3A 02 F6 | 	mov	local11, objptr
28a08     1A E5 01 F6 | 	mov	objptr, local08
28a0c     2D 38 62 FD | 	call	local10
28a10     1D E5 01 F6 | 	mov	objptr, local11
28a14     FD 12 0A F6 | 	mov	arg01, result1 wz
28a18     40 00 90 AD |  if_e	jmp	#LR__3382
28a1c     17 35 02 F6 | 	mov	local08, local05
28a20     02 34 66 F0 | 	shl	local08, #2
28a24     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28a28     F3 34 02 F1 | 	add	local08, ptr___system__dat__
28a2c     1A 01 68 FC | 	wrlong	#0, local08
28a30     02 2E 66 F0 | 	shl	local05, #2
28a34     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
28a38     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
28a3c     17 01 68 FC | 	wrlong	#0, local05
28a40     09 13 6A F6 | 	neg	arg01, arg01 wz
28a44     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
28a48     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28a4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28a50     01 FA 65 56 |  if_ne	neg	result1, #1
28a54     00 FA 05 A6 |  if_e	mov	result1, #0
28a58     18 00 90 FD | 	jmp	#LR__3385
28a5c                 | LR__3382
28a5c                 | LR__3383
28a5c     02 2E 66 F0 | 	shl	local05, #2
28a60     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28a64     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
28a68     17 37 62 FC | 	wrlong	local09, local05
28a6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28a70                 | LR__3384
28a70     00 FA 05 F6 | 	mov	result1, #0
28a74                 | LR__3385
28a74     A7 F0 03 F6 | 	mov	ptra, fp
28a78     B2 00 A0 FD | 	call	#popregs_
28a7c                 | __system___mount_ret
28a7c     2D 00 64 FD | 	ret
28a80                 | 
28a80                 | __system___chdir
28a80     00 4A 05 F6 | 	mov	COUNT_, #0
28a84     A8 00 A0 FD | 	call	#pushregs_
28a88     40 F0 07 F1 | 	add	ptra, #64
28a8c     04 4E 05 F1 | 	add	fp, #4
28a90     A7 12 62 FC | 	wrlong	arg01, fp
28a94     04 4E 05 F1 | 	add	fp, #4
28a98     A7 14 02 F6 | 	mov	arg02, fp
28a9c     08 4E 85 F1 | 	sub	fp, #8
28aa0     70 4B B0 FD | 	call	#__system__stat
28aa4     3C 4E 05 F1 | 	add	fp, #60
28aa8     A7 FA 61 FC | 	wrlong	result1, fp
28aac     3C 4E 85 F1 | 	sub	fp, #60
28ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
28ab4     3C 4E 05 51 |  if_ne	add	fp, #60
28ab8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
28abc     3C 4E 85 51 |  if_ne	sub	fp, #60
28ac0     BC 00 90 5D |  if_ne	jmp	#LR__3392
28ac4     10 4E 05 F1 | 	add	fp, #16
28ac8     A7 12 02 FB | 	rdlong	arg01, fp
28acc     10 4E 85 F1 | 	sub	fp, #16
28ad0     78 00 00 FF 
28ad4     00 12 06 F5 | 	and	arg01, ##61440
28ad8     08 00 00 FF 
28adc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
28ae0     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
28ae4     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
28ae8     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
28aec     01 FA 65 56 |  if_ne	neg	result1, #1
28af0     8C 00 90 5D |  if_ne	jmp	#LR__3392
28af4     04 4E 05 F1 | 	add	fp, #4
28af8     A7 16 02 FB | 	rdlong	arg03, fp
28afc     04 4E 85 F1 | 	sub	fp, #4
28b00     0B 17 C2 FA | 	rdbyte	arg03, arg03
28b04     2F 16 0E F2 | 	cmp	arg03, #47 wz
28b08     24 00 90 5D |  if_ne	jmp	#LR__3390
28b0c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28b10     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28b14     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28b18     04 4E 05 F1 | 	add	fp, #4
28b1c     A7 14 02 FB | 	rdlong	arg02, fp
28b20     04 4E 85 F1 | 	sub	fp, #4
28b24     00 17 06 F6 | 	mov	arg03, #256
28b28     44 4E B0 FD | 	call	#__system__strncpy
28b2c     4C 00 90 FD | 	jmp	#LR__3391
28b30                 | LR__3390
28b30     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28b34     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28b38     38 4E 05 F1 | 	add	fp, #56
28b3c     A7 12 62 FC | 	wrlong	arg01, fp
28b40     38 4E 85 F1 | 	sub	fp, #56
28b44     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
28b48     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
28b4c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28b50     00 17 06 F6 | 	mov	arg03, #256
28b54     18 4E B0 FD | 	call	#__system__strncpy
28b58     38 4E 05 F1 | 	add	fp, #56
28b5c     A7 12 02 FB | 	rdlong	arg01, fp
28b60     34 4E 85 F1 | 	sub	fp, #52
28b64     A7 14 02 FB | 	rdlong	arg02, fp
28b68     04 4E 85 F1 | 	sub	fp, #4
28b6c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28b70     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
28b74     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28b78     10 00 B0 FD | 	call	#__system____getvfsforfile
28b7c                 | LR__3391
28b7c     00 FA 05 F6 | 	mov	result1, #0
28b80                 | LR__3392
28b80     A7 F0 03 F6 | 	mov	ptra, fp
28b84     B2 00 A0 FD | 	call	#popregs_
28b88                 | __system___chdir_ret
28b88     2D 00 64 FD | 	ret
28b8c                 | 
28b8c                 | __system____getvfsforfile
28b8c     0E 4A 05 F6 | 	mov	COUNT_, #14
28b90     A8 00 A0 FD | 	call	#pushregs_
28b94     09 27 02 F6 | 	mov	local01, arg01
28b98     0A 29 02 F6 | 	mov	local02, arg02
28b9c     0B 2B 02 F6 | 	mov	local03, arg03
28ba0     97 10 48 FB | 	callpa	#(@LR__3401-@LR__3400)>>2,fcache_load_ptr_
28ba4                 | LR__3400
28ba4     14 FB C1 FA | 	rdbyte	result1, local02
28ba8     2F FA 0D F2 | 	cmp	result1, #47 wz
28bac     01 28 06 A1 |  if_e	add	local02, #1
28bb0     14 2D C2 AA |  if_e	rdbyte	local04, local02
28bb4     01 28 86 A1 |  if_e	sub	local02, #1
28bb8     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
28bbc     01 28 06 A1 |  if_e	add	local02, #1
28bc0     E0 FF 9F AD |  if_e	jmp	#LR__3400
28bc4                 | LR__3401
28bc4     14 2D C2 FA | 	rdbyte	local04, local02
28bc8     2F 2C 0E F2 | 	cmp	local04, #47 wz
28bcc     14 00 90 5D |  if_ne	jmp	#LR__3402
28bd0     13 13 02 F6 | 	mov	arg01, local01
28bd4     14 15 02 F6 | 	mov	arg02, local02
28bd8     00 17 06 F6 | 	mov	arg03, #256
28bdc     90 4D B0 FD | 	call	#__system__strncpy
28be0     7C 00 90 FD | 	jmp	#LR__3404
28be4                 | LR__3402
28be4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28be8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
28bec     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28bf0     13 13 02 F6 | 	mov	arg01, local01
28bf4     00 17 06 F6 | 	mov	arg03, #256
28bf8     74 4D B0 FD | 	call	#__system__strncpy
28bfc     14 2D CA FA | 	rdbyte	local04, local02 wz
28c00     5C 00 90 AD |  if_e	jmp	#LR__3403
28c04     14 2D C2 FA | 	rdbyte	local04, local02
28c08     2E 2C 0E F2 | 	cmp	local04, #46 wz
28c0c     01 28 06 A1 |  if_e	add	local02, #1
28c10     14 2F C2 AA |  if_e	rdbyte	local05, local02
28c14     01 28 86 A1 |  if_e	sub	local02, #1
28c18     17 31 02 A6 |  if_e	mov	local06, local05
28c1c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
28c20     3C 00 90 AD |  if_e	jmp	#LR__3403
28c24     13 2F C2 FA | 	rdbyte	local05, local01
28c28     2F 2E 0E F2 | 	cmp	local05, #47 wz
28c2c     01 26 06 A1 |  if_e	add	local01, #1
28c30     13 2D C2 AA |  if_e	rdbyte	local04, local01
28c34     01 26 86 A1 |  if_e	sub	local01, #1
28c38     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
28c3c     BF 01 00 5F 
28c40     10 15 06 56 |  if_ne	mov	arg02, ##@LR__5540
28c44     13 13 02 56 |  if_ne	mov	arg01, local01
28c48     00 17 06 56 |  if_ne	mov	arg03, #256
28c4c     6C 4D B0 5D |  if_ne	call	#__system__strncat
28c50     13 13 02 F6 | 	mov	arg01, local01
28c54     14 15 02 F6 | 	mov	arg02, local02
28c58     00 17 06 F6 | 	mov	arg03, #256
28c5c     5C 4D B0 FD | 	call	#__system__strncat
28c60                 | LR__3403
28c60                 | LR__3404
28c60     13 13 02 F6 | 	mov	arg01, local01
28c64     18 4F B0 FD | 	call	#__system___normalizeName
28c68     13 2D CA FA | 	rdbyte	local04, local01 wz
28c6c     1C 00 90 AD |  if_e	jmp	#LR__3405
28c70     13 2D C2 FA | 	rdbyte	local04, local01
28c74     2F 2C 0E F2 | 	cmp	local04, #47 wz
28c78     01 26 06 A1 |  if_e	add	local01, #1
28c7c     13 31 C2 AA |  if_e	rdbyte	local06, local01
28c80     01 26 86 A1 |  if_e	sub	local01, #1
28c84     00 30 4E A2 |  if_e	cmps	local06, #0 wz
28c88     18 00 90 5D |  if_ne	jmp	#LR__3406
28c8c                 | LR__3405
28c8c     01 00 00 FF 
28c90     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
28c94     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
28c98     01 00 00 FF 
28c9c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
28ca0     EC 01 90 FD | 	jmp	#LR__3420
28ca4                 | LR__3406
28ca4     00 32 06 F6 | 	mov	local07, #0
28ca8                 | LR__3407
28ca8     04 32 56 F2 | 	cmps	local07, #4 wc
28cac     CC 01 90 3D |  if_ae	jmp	#LR__3419
28cb0     19 31 02 F6 | 	mov	local06, local07
28cb4     02 30 66 F0 | 	shl	local06, #2
28cb8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28cbc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
28cc0     18 31 0A FB | 	rdlong	local06, local06 wz
28cc4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28cc8     A8 01 90 AD |  if_e	jmp	#LR__3418
28ccc     19 2D 02 F6 | 	mov	local04, local07
28cd0     02 2C 66 F0 | 	shl	local04, #2
28cd4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28cd8     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
28cdc     16 13 02 FB | 	rdlong	arg01, local04
28ce0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28ce4     09 35 02 F6 | 	mov	local08, arg01
28ce8     97 06 48 FB | 	callpa	#(@LR__3409-@LR__3408)>>2,fcache_load_ptr_
28cec                 | LR__3408
28cec     1A FB C9 FA | 	rdbyte	result1, local08 wz
28cf0     01 34 06 51 |  if_ne	add	local08, #1
28cf4     F4 FF 9F 5D |  if_ne	jmp	#LR__3408
28cf8                 | LR__3409
28cf8     09 35 82 F1 | 	sub	local08, arg01
28cfc     1A 37 02 F6 | 	mov	local09, local08
28d00     1B 2D 02 F6 | 	mov	local04, local09
28d04     13 2D 02 F1 | 	add	local04, local01
28d08     16 31 C2 FA | 	rdbyte	local06, local04
28d0c     2F 30 0E F2 | 	cmp	local06, #47 wz
28d10     1B 39 02 56 |  if_ne	mov	local10, local09
28d14     13 39 02 51 |  if_ne	add	local10, local01
28d18     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
28d1c     54 01 90 5D |  if_ne	jmp	#LR__3417
28d20     19 17 02 F6 | 	mov	arg03, local07
28d24     02 16 66 F0 | 	shl	arg03, #2
28d28     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28d2c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
28d30     0B 15 02 FB | 	rdlong	arg02, arg03
28d34     1B 17 02 F6 | 	mov	arg03, local09
28d38     13 13 02 F6 | 	mov	arg01, local01
28d3c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28d40     DC 4C B0 FD | 	call	#__system__strncmp
28d44     00 FA 4D F2 | 	cmps	result1, #0 wz
28d48     28 01 90 5D |  if_ne	jmp	#LR__3417
28d4c     19 3B 02 F6 | 	mov	local11, local07
28d50     02 3A 66 F0 | 	shl	local11, #2
28d54     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28d58     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
28d5c     1D 3D 02 FB | 	rdlong	local12, local11
28d60     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28d64     97 22 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
28d68                 | LR__3410
28d68     1B 31 02 F6 | 	mov	local06, local09
28d6c     01 30 06 F1 | 	add	local06, #1
28d70     13 31 02 F1 | 	add	local06, local01
28d74     18 3B C2 FA | 	rdbyte	local11, local06
28d78     2E 3A 0E F2 | 	cmp	local11, #46 wz
28d7c     2C 00 90 5D |  if_ne	jmp	#LR__3412
28d80     1B 3B 02 F6 | 	mov	local11, local09
28d84     02 3A 06 F1 | 	add	local11, #2
28d88     13 3B 02 F1 | 	add	local11, local01
28d8c     1D 39 C2 FA | 	rdbyte	local10, local11
28d90     2F 38 0E F2 | 	cmp	local10, #47 wz
28d94     1B 3F 02 56 |  if_ne	mov	local13, local09
28d98     02 3E 06 51 |  if_ne	add	local13, #2
28d9c     13 3F 02 51 |  if_ne	add	local13, local01
28da0     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
28da4     01 36 06 A1 |  if_e	add	local09, #1
28da8     BC FF 9F AD |  if_e	jmp	#LR__3410
28dac                 | LR__3411
28dac                 | LR__3412
28dac     00 2A 0E F2 | 	cmp	local03, #0 wz
28db0     15 13 02 56 |  if_ne	mov	arg01, local03
28db4     13 15 02 56 |  if_ne	mov	arg02, local01
28db8     00 17 06 56 |  if_ne	mov	arg03, #256
28dbc     B0 4B B0 5D |  if_ne	call	#__system__strncpy
28dc0     13 15 02 F6 | 	mov	arg02, local01
28dc4     1B 15 02 F1 | 	add	arg02, local09
28dc8     01 14 06 F1 | 	add	arg02, #1
28dcc     13 13 02 F6 | 	mov	arg01, local01
28dd0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
28dd4     13 13 02 F6 | 	mov	arg01, local01
28dd8     09 35 02 F6 | 	mov	local08, arg01
28ddc     97 06 48 FB | 	callpa	#(@LR__3414-@LR__3413)>>2,fcache_load_ptr_
28de0                 | LR__3413
28de0     1A FB C9 FA | 	rdbyte	result1, local08 wz
28de4     01 34 06 51 |  if_ne	add	local08, #1
28de8     F4 FF 9F 5D |  if_ne	jmp	#LR__3413
28dec                 | LR__3414
28dec     09 35 82 F1 | 	sub	local08, arg01
28df0     1A 37 02 F6 | 	mov	local09, local08
28df4                 | LR__3415
28df4     01 36 56 F2 | 	cmps	local09, #1 wc
28df8     70 00 90 CD |  if_b	jmp	#LR__3416
28dfc     1B 2D 02 F6 | 	mov	local04, local09
28e00     13 2D 02 F1 | 	add	local04, local01
28e04     16 3B C2 FA | 	rdbyte	local11, local04
28e08     2F 3A 0E F2 | 	cmp	local11, #47 wz
28e0c     1B 3B 02 A6 |  if_e	mov	local11, local09
28e10     13 3B 02 A1 |  if_e	add	local11, local01
28e14     1D 01 48 AC |  if_e	wrbyte	#0, local11
28e18     01 36 86 A1 |  if_e	sub	local09, #1
28e1c     D4 FF 9F AD |  if_e	jmp	#LR__3415
28e20     1B 2D 02 F6 | 	mov	local04, local09
28e24     13 2D 02 F1 | 	add	local04, local01
28e28     16 3B C2 FA | 	rdbyte	local11, local04
28e2c     2E 3A 0E F2 | 	cmp	local11, #46 wz
28e30     38 00 90 5D |  if_ne	jmp	#LR__3416
28e34     02 36 56 F2 | 	cmps	local09, #2 wc
28e38     30 00 90 CD |  if_b	jmp	#LR__3416
28e3c     1B 41 02 F6 | 	mov	local14, local09
28e40     01 40 86 F1 | 	sub	local14, #1
28e44     13 41 02 F1 | 	add	local14, local01
28e48     20 2F C2 FA | 	rdbyte	local05, local14
28e4c     2F 2E 0E F2 | 	cmp	local05, #47 wz
28e50     18 00 90 5D |  if_ne	jmp	#LR__3416
28e54     1B 2D 02 F6 | 	mov	local04, local09
28e58     01 2C 86 F1 | 	sub	local04, #1
28e5c     13 2D 02 F1 | 	add	local04, local01
28e60     16 01 48 FC | 	wrbyte	#0, local04
28e64     02 36 86 F1 | 	sub	local09, #2
28e68     88 FF 9F FD | 	jmp	#LR__3415
28e6c                 | LR__3416
28e6c     1E FB 01 F6 | 	mov	result1, local12
28e70     1C 00 90 FD | 	jmp	#LR__3420
28e74                 | LR__3417
28e74                 | LR__3418
28e74     01 32 06 F1 | 	add	local07, #1
28e78     2C FE 9F FD | 	jmp	#LR__3407
28e7c                 | LR__3419
28e7c     02 00 00 FF 
28e80     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
28e84     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
28e88     02 00 00 FF 
28e8c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
28e90                 | LR__3420
28e90     A7 F0 03 F6 | 	mov	ptra, fp
28e94     B2 00 A0 FD | 	call	#popregs_
28e98                 | __system____getvfsforfile_ret
28e98     2D 00 64 FD | 	ret
28e9c                 | 
28e9c                 | __system___basic_open
28e9c     05 4A 05 F6 | 	mov	COUNT_, #5
28ea0     A8 00 A0 FD | 	call	#pushregs_
28ea4     0A 27 02 F6 | 	mov	local01, arg02
28ea8     0B 29 02 F6 | 	mov	local02, arg03
28eac     0C 2B 02 F6 | 	mov	local03, arg04
28eb0     00 2C 06 F6 | 	mov	local04, #0
28eb4     90 4A B0 FD | 	call	#__system____getftab
28eb8     FD 2E 0A F6 | 	mov	local05, result1 wz
28ebc     18 00 90 5D |  if_ne	jmp	#LR__3430
28ec0     EE 12 02 F6 | 	mov	arg01, abortchain
28ec4     0C 14 06 F6 | 	mov	arg02, #12
28ec8     01 16 06 F6 | 	mov	arg03, #1
28ecc     DA 00 A0 FD | 	call	#__longjmp
28ed0     01 FA 65 F6 | 	neg	result1, #1
28ed4     14 01 90 FD | 	jmp	#LR__3439
28ed8                 | LR__3430
28ed8     08 2E 06 F1 | 	add	local05, #8
28edc     17 FB 09 FB | 	rdlong	result1, local05 wz
28ee0     08 2E 86 F1 | 	sub	local05, #8
28ee4     17 13 02 56 |  if_ne	mov	arg01, local05
28ee8     B0 41 B0 5D |  if_ne	call	#__system___closeraw
28eec     00 26 0E F2 | 	cmp	local01, #0 wz
28ef0     00 28 0E A2 |  if_e	cmp	local02, #0 wz
28ef4     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
28ef8     3C 00 90 AD |  if_e	jmp	#LR__3432
28efc     0C 12 06 F6 | 	mov	arg01, #12
28f00     98 36 B0 FD | 	call	#__system___gc_alloc_managed
28f04     FD 2C 0A F6 | 	mov	local04, result1 wz
28f08     18 00 90 5D |  if_ne	jmp	#LR__3431
28f0c     EE 12 02 F6 | 	mov	arg01, abortchain
28f10     07 14 06 F6 | 	mov	arg02, #7
28f14     01 16 06 F6 | 	mov	arg03, #1
28f18     DA 00 A0 FD | 	call	#__longjmp
28f1c     01 FA 65 F6 | 	neg	result1, #1
28f20     C8 00 90 FD | 	jmp	#LR__3439
28f24                 | LR__3431
28f24     16 01 68 FC | 	wrlong	#0, local04
28f28     04 2C 06 F1 | 	add	local04, #4
28f2c     16 01 68 FC | 	wrlong	#0, local04
28f30     04 2C 86 F1 | 	sub	local04, #4
28f34     17 2D 62 FC | 	wrlong	local04, local05
28f38                 | LR__3432
28f38     00 26 0E F2 | 	cmp	local01, #0 wz
28f3c     20 00 90 AD |  if_e	jmp	#LR__3433
28f40     16 27 62 FC | 	wrlong	local01, local04
28f44     16 FB 01 F6 | 	mov	result1, local04
28f48     00 70 05 FF 
28f4c     00 FA 45 F5 | 	or	result1, ##182452224
28f50     1C 2E 06 F1 | 	add	local05, #28
28f54     17 FB 61 FC | 	wrlong	result1, local05
28f58     1C 2E 86 F1 | 	sub	local05, #28
28f5c     0C 00 90 FD | 	jmp	#LR__3434
28f60                 | LR__3433
28f60     1C 2E 06 F1 | 	add	local05, #28
28f64     17 01 68 FC | 	wrlong	#0, local05
28f68     1C 2E 86 F1 | 	sub	local05, #28
28f6c                 | LR__3434
28f6c     00 28 0E F2 | 	cmp	local02, #0 wz
28f70     28 00 90 AD |  if_e	jmp	#LR__3435
28f74     04 2C 06 F1 | 	add	local04, #4
28f78     16 29 62 FC | 	wrlong	local02, local04
28f7c     04 2C 86 F1 | 	sub	local04, #4
28f80     16 FB 01 F6 | 	mov	result1, local04
28f84     00 78 05 FF 
28f88     00 FA 45 F5 | 	or	result1, ##183500800
28f8c     20 2E 06 F1 | 	add	local05, #32
28f90     17 FB 61 FC | 	wrlong	result1, local05
28f94     20 2E 86 F1 | 	sub	local05, #32
28f98     0C 00 90 FD | 	jmp	#LR__3436
28f9c                 | LR__3435
28f9c     20 2E 06 F1 | 	add	local05, #32
28fa0     17 01 68 FC | 	wrlong	#0, local05
28fa4     20 2E 86 F1 | 	sub	local05, #32
28fa8                 | LR__3436
28fa8     00 2A 0E F2 | 	cmp	local03, #0 wz
28fac     24 00 90 AD |  if_e	jmp	#LR__3437
28fb0     08 2C 06 F1 | 	add	local04, #8
28fb4     16 2B 62 FC | 	wrlong	local03, local04
28fb8     08 2C 86 F1 | 	sub	local04, #8
28fbc     00 80 05 FF 
28fc0     00 2C 46 F5 | 	or	local04, ##184549376
28fc4     24 2E 06 F1 | 	add	local05, #36
28fc8     17 2D 62 FC | 	wrlong	local04, local05
28fcc     24 2E 86 F1 | 	sub	local05, #36
28fd0     0C 00 90 FD | 	jmp	#LR__3438
28fd4                 | LR__3437
28fd4     24 2E 06 F1 | 	add	local05, #36
28fd8     17 01 68 FC | 	wrlong	#0, local05
28fdc     24 2E 86 F1 | 	sub	local05, #36
28fe0                 | LR__3438
28fe0     08 2E 06 F1 | 	add	local05, #8
28fe4     17 0F 68 FC | 	wrlong	#7, local05
28fe8     00 FA 05 F6 | 	mov	result1, #0
28fec                 | LR__3439
28fec     A7 F0 03 F6 | 	mov	ptra, fp
28ff0     B2 00 A0 FD | 	call	#popregs_
28ff4                 | __system___basic_open_ret
28ff4     2D 00 64 FD | 	ret
28ff8                 | 
28ff8                 | __system___basic_open_string
28ff8     04 4A 05 F6 | 	mov	COUNT_, #4
28ffc     A8 00 A0 FD | 	call	#pushregs_
29000     0A 27 02 F6 | 	mov	local01, arg02
29004     0B 29 02 F6 | 	mov	local02, arg03
29008     3C 49 B0 FD | 	call	#__system____getftab
2900c     FD 2A 0A F6 | 	mov	local03, result1 wz
29010     18 00 90 5D |  if_ne	jmp	#LR__3440
29014     EE 12 02 F6 | 	mov	arg01, abortchain
29018     0C 14 06 F6 | 	mov	arg02, #12
2901c     01 16 06 F6 | 	mov	arg03, #1
29020     DA 00 A0 FD | 	call	#__longjmp
29024     01 FA 65 F6 | 	neg	result1, #1
29028     5C 00 90 FD | 	jmp	#LR__3442
2902c                 | LR__3440
2902c     08 2A 06 F1 | 	add	local03, #8
29030     15 19 0A FB | 	rdlong	arg04, local03 wz
29034     08 2A 86 F1 | 	sub	local03, #8
29038     15 13 02 56 |  if_ne	mov	arg01, local03
2903c     5C 40 B0 5D |  if_ne	call	#__system___closeraw
29040     13 15 02 F6 | 	mov	arg02, local01
29044     14 17 02 F6 | 	mov	arg03, local02
29048     15 13 02 F6 | 	mov	arg01, local03
2904c     B6 19 06 F6 | 	mov	arg04, #438
29050     44 3D B0 FD | 	call	#__system___openraw
29054     FD 2C 02 F6 | 	mov	local04, result1
29058     00 2C 56 F2 | 	cmps	local04, #0 wc
2905c     24 00 90 3D |  if_ae	jmp	#LR__3441
29060     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29064     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
29068     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2906c     EE 12 02 F6 | 	mov	arg01, abortchain
29070     FD 14 02 FB | 	rdlong	arg02, result1
29074     01 16 06 F6 | 	mov	arg03, #1
29078     DA 00 A0 FD | 	call	#__longjmp
2907c     01 FA 65 F6 | 	neg	result1, #1
29080     04 00 90 FD | 	jmp	#LR__3442
29084                 | LR__3441
29084     16 FB 01 F6 | 	mov	result1, local04
29088                 | LR__3442
29088     A7 F0 03 F6 | 	mov	ptra, fp
2908c     B2 00 A0 FD | 	call	#popregs_
29090                 | __system___basic_open_string_ret
29090     2D 00 64 FD | 	ret
29094                 | 
29094                 | __system___basic_print_char
29094     03 4A 05 F6 | 	mov	COUNT_, #3
29098     A8 00 A0 FD | 	call	#pushregs_
2909c     0A 27 02 F6 | 	mov	local01, arg02
290a0     50 50 B0 FD | 	call	#__system___gettxfunc
290a4     FD 28 0A F6 | 	mov	local02, result1 wz
290a8     00 FA 05 A6 |  if_e	mov	result1, #0
290ac     30 00 90 AD |  if_e	jmp	#LR__3450
290b0     14 2B 02 F6 | 	mov	local03, local02
290b4     13 28 46 F7 | 	zerox	local02, #19
290b8     14 2A 46 F0 | 	shr	local03, #20
290bc     02 2A 66 F0 | 	shl	local03, #2
290c0     ED 2A 02 F1 | 	add	local03, __methods__
290c4     15 2B 02 FB | 	rdlong	local03, local03
290c8     13 13 02 F6 | 	mov	arg01, local01
290cc     F2 26 02 F6 | 	mov	local01, objptr
290d0     14 E5 01 F6 | 	mov	objptr, local02
290d4     2D 2A 62 FD | 	call	local03
290d8     13 E5 01 F6 | 	mov	objptr, local01
290dc     01 FA 05 F6 | 	mov	result1, #1
290e0                 | LR__3450
290e0     A7 F0 03 F6 | 	mov	ptra, fp
290e4     B2 00 A0 FD | 	call	#popregs_
290e8                 | __system___basic_print_char_ret
290e8     2D 00 64 FD | 	ret
290ec                 | 
290ec                 | __system___basic_print_string
290ec     03 4A 05 F6 | 	mov	COUNT_, #3
290f0     A8 00 A0 FD | 	call	#pushregs_
290f4     0A 27 02 F6 | 	mov	local01, arg02
290f8     0B 29 02 F6 | 	mov	local02, arg03
290fc     F4 4F B0 FD | 	call	#__system___gettxfunc
29100     FD 2A 0A F6 | 	mov	local03, result1 wz
29104     00 FA 05 A6 |  if_e	mov	result1, #0
29108     18 00 90 AD |  if_e	jmp	#LR__3460
2910c     00 26 0E F2 | 	cmp	local01, #0 wz
29110     00 FA 05 A6 |  if_e	mov	result1, #0
29114     15 13 02 56 |  if_ne	mov	arg01, local03
29118     14 15 02 56 |  if_ne	mov	arg02, local02
2911c     13 17 02 56 |  if_ne	mov	arg03, local01
29120     08 02 B0 5D |  if_ne	call	#__system___fmtstr
29124                 | LR__3460
29124     A7 F0 03 F6 | 	mov	ptra, fp
29128     B2 00 A0 FD | 	call	#popregs_
2912c                 | __system___basic_print_string_ret
2912c     2D 00 64 FD | 	ret
29130                 | 
29130                 | __system___basic_print_integer
29130     04 4A 05 F6 | 	mov	COUNT_, #4
29134     A8 00 A0 FD | 	call	#pushregs_
29138     0A 27 02 F6 | 	mov	local01, arg02
2913c     0B 29 02 F6 | 	mov	local02, arg03
29140     0C 2B 02 F6 | 	mov	local03, arg04
29144     AC 4F B0 FD | 	call	#__system___gettxfunc
29148     FD 2C 0A F6 | 	mov	local04, result1 wz
2914c     00 FA 05 A6 |  if_e	mov	result1, #0
29150     16 13 02 56 |  if_ne	mov	arg01, local04
29154     14 15 02 56 |  if_ne	mov	arg02, local02
29158     13 17 02 56 |  if_ne	mov	arg03, local01
2915c     15 19 02 56 |  if_ne	mov	arg04, local03
29160     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
29164     A7 F0 03 F6 | 	mov	ptra, fp
29168     B2 00 A0 FD | 	call	#popregs_
2916c                 | __system___basic_print_integer_ret
2916c     2D 00 64 FD | 	ret
29170                 | 
29170                 | __system___basic_print_unsigned
29170     03 4A 05 F6 | 	mov	COUNT_, #3
29174     A8 00 A0 FD | 	call	#pushregs_
29178     0A 27 02 F6 | 	mov	local01, arg02
2917c     0B 29 02 F6 | 	mov	local02, arg03
29180     0C 2B 02 F6 | 	mov	local03, arg04
29184     6C 4F B0 FD | 	call	#__system___gettxfunc
29188     FD 12 0A F6 | 	mov	arg01, result1 wz
2918c     00 FA 05 A6 |  if_e	mov	result1, #0
29190     3A 28 26 54 |  if_ne	bith	local02, #58
29194     14 15 02 56 |  if_ne	mov	arg02, local02
29198     13 17 02 56 |  if_ne	mov	arg03, local01
2919c     15 19 02 56 |  if_ne	mov	arg04, local03
291a0     74 02 B0 5D |  if_ne	call	#__system___fmtnum
291a4     A7 F0 03 F6 | 	mov	ptra, fp
291a8     B2 00 A0 FD | 	call	#popregs_
291ac                 | __system___basic_print_unsigned_ret
291ac     2D 00 64 FD | 	ret
291b0                 | 
291b0                 | __system___basic_get_char
291b0     03 4A 05 F6 | 	mov	COUNT_, #3
291b4     A8 00 A0 FD | 	call	#pushregs_
291b8     7C 4F B0 FD | 	call	#__system___getrxfunc
291bc     FD 26 0A F6 | 	mov	local01, result1 wz
291c0     01 FA 65 A6 |  if_e	neg	result1, #1
291c4     28 00 90 AD |  if_e	jmp	#LR__3470
291c8     13 29 02 F6 | 	mov	local02, local01
291cc     13 26 46 F7 | 	zerox	local01, #19
291d0     14 28 46 F0 | 	shr	local02, #20
291d4     02 28 66 F0 | 	shl	local02, #2
291d8     ED 28 02 F1 | 	add	local02, __methods__
291dc     14 29 02 FB | 	rdlong	local02, local02
291e0     F2 2A 02 F6 | 	mov	local03, objptr
291e4     13 E5 01 F6 | 	mov	objptr, local01
291e8     2D 28 62 FD | 	call	local02
291ec     15 E5 01 F6 | 	mov	objptr, local03
291f0                 | LR__3470
291f0     A7 F0 03 F6 | 	mov	ptra, fp
291f4     B2 00 A0 FD | 	call	#popregs_
291f8                 | __system___basic_get_char_ret
291f8     2D 00 64 FD | 	ret
291fc                 | 
291fc                 | __system___basic_put
291fc     04 4A 05 F6 | 	mov	COUNT_, #4
29200     A8 00 A0 FD | 	call	#pushregs_
29204     0D 27 02 F6 | 	mov	local01, arg05
29208     13 19 02 FD | 	qmul	arg04, local01
2920c     09 29 02 F6 | 	mov	local02, arg01
29210     0B 2B 02 F6 | 	mov	local03, arg03
29214     00 14 0E F2 | 	cmp	arg02, #0 wz
29218     01 14 86 51 |  if_ne	sub	arg02, #1
2921c     14 13 02 56 |  if_ne	mov	arg01, local02
29220     00 16 06 56 |  if_ne	mov	arg03, #0
29224     18 2C 62 FD | 	getqx	local04
29228     64 45 B0 5D |  if_ne	call	#__system__lseek
2922c     15 15 02 F6 | 	mov	arg02, local03
29230     16 17 02 F6 | 	mov	arg03, local04
29234     14 13 02 F6 | 	mov	arg01, local02
29238     A0 44 B0 FD | 	call	#__system__write
2923c     FD 2C 02 F6 | 	mov	local04, result1
29240     01 2C 56 F2 | 	cmps	local04, #1 wc
29244     10 00 90 CD |  if_b	jmp	#LR__3480
29248     16 91 02 F6 | 	mov	muldiva_, local04
2924c     13 93 02 F6 | 	mov	muldivb_, local01
29250     BA 00 A0 FD | 	call	#divide_
29254     49 2D 02 F6 | 	mov	local04, muldivb_
29258                 | LR__3480
29258     16 FB 01 F6 | 	mov	result1, local04
2925c     A7 F0 03 F6 | 	mov	ptra, fp
29260     B2 00 A0 FD | 	call	#popregs_
29264                 | __system___basic_put_ret
29264     2D 00 64 FD | 	ret
29268                 | 
29268                 | __system___basic_get
29268     04 4A 05 F6 | 	mov	COUNT_, #4
2926c     A8 00 A0 FD | 	call	#pushregs_
29270     0D 27 02 F6 | 	mov	local01, arg05
29274     13 19 02 FD | 	qmul	arg04, local01
29278     09 29 02 F6 | 	mov	local02, arg01
2927c     0B 2B 02 F6 | 	mov	local03, arg03
29280     00 14 0E F2 | 	cmp	arg02, #0 wz
29284     01 14 86 51 |  if_ne	sub	arg02, #1
29288     14 13 02 56 |  if_ne	mov	arg01, local02
2928c     00 16 06 56 |  if_ne	mov	arg03, #0
29290     18 2C 62 FD | 	getqx	local04
29294     F8 44 B0 5D |  if_ne	call	#__system__lseek
29298     15 15 02 F6 | 	mov	arg02, local03
2929c     16 17 02 F6 | 	mov	arg03, local04
292a0     14 13 02 F6 | 	mov	arg01, local02
292a4     70 44 B0 FD | 	call	#__system__read
292a8     FD 2C 02 F6 | 	mov	local04, result1
292ac     01 2C 56 F2 | 	cmps	local04, #1 wc
292b0     10 00 90 CD |  if_b	jmp	#LR__3490
292b4     16 91 02 F6 | 	mov	muldiva_, local04
292b8     13 93 02 F6 | 	mov	muldivb_, local01
292bc     BA 00 A0 FD | 	call	#divide_
292c0     49 2D 02 F6 | 	mov	local04, muldivb_
292c4                 | LR__3490
292c4     16 FB 01 F6 | 	mov	result1, local04
292c8     A7 F0 03 F6 | 	mov	ptra, fp
292cc     B2 00 A0 FD | 	call	#popregs_
292d0                 | __system___basic_get_ret
292d0     2D 00 64 FD | 	ret
292d4                 | 
292d4                 | __system___fmtchar
292d4     00 4A 05 F6 | 	mov	COUNT_, #0
292d8     A8 00 A0 FD | 	call	#pushregs_
292dc     10 F0 07 F1 | 	add	ptra, #16
292e0     04 4E 05 F1 | 	add	fp, #4
292e4     A7 12 62 FC | 	wrlong	arg01, fp
292e8     04 4E 05 F1 | 	add	fp, #4
292ec     A7 14 62 FC | 	wrlong	arg02, fp
292f0     04 4E 05 F1 | 	add	fp, #4
292f4     A7 16 62 FC | 	wrlong	arg03, fp
292f8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
292fc     A7 16 62 FC | 	wrlong	arg03, fp
29300     08 4E 85 F1 | 	sub	fp, #8
29304     A7 12 02 FB | 	rdlong	arg01, fp
29308     04 4E 05 F1 | 	add	fp, #4
2930c     A7 14 02 FB | 	rdlong	arg02, fp
29310     04 4E 05 F1 | 	add	fp, #4
29314     A7 16 02 F6 | 	mov	arg03, fp
29318     0C 4E 85 F1 | 	sub	fp, #12
2931c     0C 00 B0 FD | 	call	#__system___fmtstr
29320     A7 F0 03 F6 | 	mov	ptra, fp
29324     B2 00 A0 FD | 	call	#popregs_
29328                 | __system___fmtchar_ret
29328     2D 00 64 FD | 	ret
2932c                 | 
2932c                 | __system___fmtstr
2932c     09 4A 05 F6 | 	mov	COUNT_, #9
29330     A8 00 A0 FD | 	call	#pushregs_
29334     09 27 02 F6 | 	mov	local01, arg01
29338     0A 29 02 F6 | 	mov	local02, arg02
2933c     0B 2B 02 F6 | 	mov	local03, arg03
29340     14 19 E2 F8 | 	getbyte	arg04, local02, #0
29344     15 13 02 F6 | 	mov	arg01, local03
29348     09 2D 02 F6 | 	mov	local04, arg01
2934c     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
29350                 | LR__3500
29350     16 FB C9 FA | 	rdbyte	result1, local04 wz
29354     01 2C 06 51 |  if_ne	add	local04, #1
29358     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
2935c                 | LR__3501
2935c     09 2D 82 F1 | 	sub	local04, arg01
29360     00 18 0E F2 | 	cmp	arg04, #0 wz
29364     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
29368     14 15 02 F6 | 	mov	arg02, local02
2936c     16 17 02 F6 | 	mov	arg03, local04
29370     13 13 02 F6 | 	mov	arg01, local01
29374     02 18 06 F6 | 	mov	arg04, #2
29378     C8 49 B0 FD | 	call	#__system___fmtpad
2937c     FD 2E 02 F6 | 	mov	local05, result1
29380     00 2E 56 F2 | 	cmps	local05, #0 wc
29384     17 FB 01 C6 |  if_b	mov	result1, local05
29388     80 00 90 CD |  if_b	jmp	#LR__3504
2938c     01 2C 56 F2 | 	cmps	local04, #1 wc
29390     50 00 90 CD |  if_b	jmp	#LR__3503
29394     16 31 02 F6 | 	mov	local06, local04
29398                 | LR__3502
29398     13 33 02 F6 | 	mov	local07, local01
2939c     13 35 02 F6 | 	mov	local08, local01
293a0     13 32 46 F7 | 	zerox	local07, #19
293a4     14 34 46 F0 | 	shr	local08, #20
293a8     02 34 66 F0 | 	shl	local08, #2
293ac     ED 34 02 F1 | 	add	local08, __methods__
293b0     1A 35 02 FB | 	rdlong	local08, local08
293b4     15 13 C2 FA | 	rdbyte	arg01, local03
293b8     F2 36 02 F6 | 	mov	local09, objptr
293bc     19 E5 01 F6 | 	mov	objptr, local07
293c0     01 2A 06 F1 | 	add	local03, #1
293c4     2D 34 62 FD | 	call	local08
293c8     1B E5 01 F6 | 	mov	objptr, local09
293cc     FD 36 02 F6 | 	mov	local09, result1
293d0     00 36 56 F2 | 	cmps	local09, #0 wc
293d4     1B FB 01 C6 |  if_b	mov	result1, local09
293d8     30 00 90 CD |  if_b	jmp	#LR__3504
293dc     1B 2F 02 F1 | 	add	local05, local09
293e0     ED 31 6E FB | 	djnz	local06, #LR__3502
293e4                 | LR__3503
293e4     14 15 02 F6 | 	mov	arg02, local02
293e8     16 17 02 F6 | 	mov	arg03, local04
293ec     13 13 02 F6 | 	mov	arg01, local01
293f0     01 18 06 F6 | 	mov	arg04, #1
293f4     4C 49 B0 FD | 	call	#__system___fmtpad
293f8     FD 36 02 F6 | 	mov	local09, result1
293fc     00 36 56 F2 | 	cmps	local09, #0 wc
29400     1B FB 01 C6 |  if_b	mov	result1, local09
29404     1B 2F 02 31 |  if_ae	add	local05, local09
29408     17 FB 01 36 |  if_ae	mov	result1, local05
2940c                 | LR__3504
2940c     A7 F0 03 F6 | 	mov	ptra, fp
29410     B2 00 A0 FD | 	call	#popregs_
29414                 | __system___fmtstr_ret
29414     2D 00 64 FD | 	ret
29418                 | 
29418                 | __system___fmtnum
29418     0B 4A 05 F6 | 	mov	COUNT_, #11
2941c     A8 00 A0 FD | 	call	#pushregs_
29420     09 27 02 F6 | 	mov	local01, arg01
29424     0A 29 02 F6 | 	mov	local02, arg02
29428     0B 2B 02 F6 | 	mov	local03, arg03
2942c     0C 2D 02 F6 | 	mov	local04, arg04
29430     F8 2F 02 F6 | 	mov	local05, ptra
29434     17 31 02 F6 | 	mov	local06, local05
29438     00 32 06 F6 | 	mov	local07, #0
2943c     14 35 02 F6 | 	mov	local08, local02
29440     10 34 46 F0 | 	shr	local08, #16
29444     3F 34 06 F5 | 	and	local08, #63
29448     14 37 E2 F8 | 	getbyte	local09, local02, #0
2944c     14 39 02 F6 | 	mov	local10, local02
29450     1A 38 46 F0 | 	shr	local10, #26
29454     03 38 06 F5 | 	and	local10, #3
29458     1C 3B 02 F6 | 	mov	local11, local10
2945c     01 34 56 F2 | 	cmps	local08, #1 wc
29460     44 F0 07 F1 | 	add	ptra, #68
29464     01 34 86 31 |  if_ae	sub	local08, #1
29468     41 36 56 F2 | 	cmps	local09, #65 wc
2946c     00 36 0E C2 |  if_b	cmp	local09, #0 wz
29470     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
29474     03 3A 0E F2 | 	cmp	local11, #3 wz
29478     00 3A 06 A6 |  if_e	mov	local11, #0
2947c     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
29480     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
29484     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
29488     00 3A 0E F2 | 	cmp	local11, #0 wz
2948c     4C 00 90 AD |  if_e	jmp	#LR__3513
29490     01 32 06 F6 | 	mov	local07, #1
29494     1B 35 0A F2 | 	cmp	local08, local09 wz
29498     18 00 90 5D |  if_ne	jmp	#LR__3511
2949c     05 34 6E FB | 	djnz	local08, #LR__3510
294a0     13 13 02 F6 | 	mov	arg01, local01
294a4     14 15 02 F6 | 	mov	arg02, local02
294a8     23 16 06 F6 | 	mov	arg03, #35
294ac     24 FE BF FD | 	call	#__system___fmtchar
294b0     88 00 90 FD | 	jmp	#LR__3517
294b4                 | LR__3510
294b4                 | LR__3511
294b4     02 3A 0E F2 | 	cmp	local11, #2 wz
294b8     18 39 02 A6 |  if_e	mov	local10, local06
294bc     01 30 06 A1 |  if_e	add	local06, #1
294c0     1C 41 48 AC |  if_e	wrbyte	#32, local10
294c4     14 00 90 AD |  if_e	jmp	#LR__3512
294c8     04 3A 0E F2 | 	cmp	local11, #4 wz
294cc     18 5B 48 AC |  if_e	wrbyte	#45, local06
294d0     01 30 06 A1 |  if_e	add	local06, #1
294d4     18 57 48 5C |  if_ne	wrbyte	#43, local06
294d8     01 30 06 51 |  if_ne	add	local06, #1
294dc                 | LR__3512
294dc                 | LR__3513
294dc     18 13 02 F6 | 	mov	arg01, local06
294e0     15 15 02 F6 | 	mov	arg02, local03
294e4     16 17 02 F6 | 	mov	arg03, local04
294e8     1A 19 02 F6 | 	mov	arg04, local08
294ec     00 1A 06 F6 | 	mov	arg05, #0
294f0     1D 28 2E F4 | 	testbn	local02, #29 wz
294f4     01 1A 06 56 |  if_ne	mov	arg05, #1
294f8     10 49 B0 FD | 	call	#__system___uitoa
294fc     FD 32 02 F1 | 	add	local07, result1
29500     1B 33 5A F2 | 	cmps	local07, local09 wcz
29504     24 00 90 ED |  if_be	jmp	#LR__3516
29508     97 0E 48 FB | 	callpa	#(@LR__3515-@LR__3514)>>2,fcache_load_ptr_
2950c                 | LR__3514
2950c     1B 39 02 F6 | 	mov	local10, local09
29510     01 38 56 F2 | 	cmps	local10, #1 wc
29514     01 36 86 F1 | 	sub	local09, #1
29518     18 39 02 36 |  if_ae	mov	local10, local06
2951c     01 30 06 31 |  if_ae	add	local06, #1
29520     1C 47 48 3C |  if_ae	wrbyte	#35, local10
29524     E4 FF 9F 3D |  if_ae	jmp	#LR__3514
29528                 | LR__3515
29528     18 01 48 FC | 	wrbyte	#0, local06
2952c                 | LR__3516
2952c     13 13 02 F6 | 	mov	arg01, local01
29530     14 15 02 F6 | 	mov	arg02, local02
29534     17 17 02 F6 | 	mov	arg03, local05
29538     F0 FD BF FD | 	call	#__system___fmtstr
2953c                 | LR__3517
2953c     A7 F0 03 F6 | 	mov	ptra, fp
29540     B2 00 A0 FD | 	call	#popregs_
29544                 | __system___fmtnum_ret
29544     2D 00 64 FD | 	ret
29548                 | 
29548                 | __system___fmtfloat
29548     10 4A 05 F6 | 	mov	COUNT_, #16
2954c     A8 00 A0 FD | 	call	#pushregs_
29550     24 F1 07 F1 | 	add	ptra, #292
29554     04 4E 05 F1 | 	add	fp, #4
29558     A7 12 62 FC | 	wrlong	arg01, fp
2955c     04 4E 05 F1 | 	add	fp, #4
29560     A7 14 62 FC | 	wrlong	arg02, fp
29564     04 4E 05 F1 | 	add	fp, #4
29568     A7 16 62 FC | 	wrlong	arg03, fp
2956c     04 4E 05 F1 | 	add	fp, #4
29570     A7 18 62 FC | 	wrlong	arg04, fp
29574     0C 4E 05 F1 | 	add	fp, #12
29578     A7 14 68 FC | 	wrlong	#10, fp
2957c     08 4E 05 F1 | 	add	fp, #8
29580     A7 00 68 FC | 	wrlong	#0, fp
29584     08 4E 05 F1 | 	add	fp, #8
29588     A7 00 68 FC | 	wrlong	#0, fp
2958c     08 4E 05 F1 | 	add	fp, #8
29590     A7 00 68 FC | 	wrlong	#0, fp
29594     04 4E 05 F1 | 	add	fp, #4
29598     A7 04 68 FC | 	wrlong	#2, fp
2959c     04 4E 05 F1 | 	add	fp, #4
295a0     A7 00 68 FC | 	wrlong	#0, fp
295a4     04 4E 05 F1 | 	add	fp, #4
295a8     A7 00 68 FC | 	wrlong	#0, fp
295ac     04 4E 05 F1 | 	add	fp, #4
295b0     A7 00 68 FC | 	wrlong	#0, fp
295b4     04 4E 05 F1 | 	add	fp, #4
295b8     A7 00 68 FC | 	wrlong	#0, fp
295bc     18 4E 05 F1 | 	add	fp, #24
295c0     A7 00 68 FC | 	wrlong	#0, fp
295c4     68 4E 05 F1 | 	add	fp, #104
295c8     A7 26 02 F6 | 	mov	local01, fp
295cc     08 4E 85 F1 | 	sub	fp, #8
295d0     A7 26 62 FC | 	wrlong	local01, fp
295d4     04 4E 05 F1 | 	add	fp, #4
295d8     A7 26 62 FC | 	wrlong	local01, fp
295dc     BC 4E 85 F1 | 	sub	fp, #188
295e0     A7 26 02 FB | 	rdlong	local01, fp
295e4     10 26 46 F0 | 	shr	local01, #16
295e8     3F 26 06 F5 | 	and	local01, #63
295ec     B0 4E 05 F1 | 	add	fp, #176
295f0     A7 26 62 FC | 	wrlong	local01, fp
295f4     B0 4E 85 F1 | 	sub	fp, #176
295f8     A7 26 02 FB | 	rdlong	local01, fp
295fc     1C 26 46 F0 | 	shr	local01, #28
29600     01 26 06 F5 | 	and	local01, #1
29604     08 4F 05 F1 | 	add	fp, #264
29608     A7 26 62 FC | 	wrlong	local01, fp
2960c     58 4E 85 F1 | 	sub	fp, #88
29610     A7 26 0A FB | 	rdlong	local01, fp wz
29614     B8 4E 85 F1 | 	sub	fp, #184
29618     3C 00 90 5D |  if_ne	jmp	#LR__3521
2961c     10 4E 05 F1 | 	add	fp, #16
29620     A7 26 02 FB | 	rdlong	local01, fp
29624     10 4E 85 F1 | 	sub	fp, #16
29628     61 26 0E F2 | 	cmp	local01, #97 wz
2962c     18 00 90 5D |  if_ne	jmp	#LR__3520
29630     B8 4E 05 F1 | 	add	fp, #184
29634     A7 1A 68 FC | 	wrlong	#13, fp
29638     84 4E 85 F1 | 	sub	fp, #132
2963c     A7 02 68 FC | 	wrlong	#1, fp
29640     34 4E 85 F1 | 	sub	fp, #52
29644     24 00 90 FD | 	jmp	#LR__3522
29648                 | LR__3520
29648     B8 4E 05 F1 | 	add	fp, #184
2964c     A7 0C 68 FC | 	wrlong	#6, fp
29650     B8 4E 85 F1 | 	sub	fp, #184
29654     14 00 90 FD | 	jmp	#LR__3522
29658                 | LR__3521
29658     B8 4E 05 F1 | 	add	fp, #184
2965c     A7 26 02 FB | 	rdlong	local01, fp
29660     01 26 86 F1 | 	sub	local01, #1
29664     A7 26 62 FC | 	wrlong	local01, fp
29668     B8 4E 85 F1 | 	sub	fp, #184
2966c                 | LR__3522
2966c     08 4E 05 F1 | 	add	fp, #8
29670     A7 26 02 FB | 	rdlong	local01, fp
29674     16 26 46 F0 | 	shr	local01, #22
29678     03 26 06 F5 | 	and	local01, #3
2967c     04 4F 05 F1 | 	add	fp, #260
29680     A7 26 62 FC | 	wrlong	local01, fp
29684     04 4F 85 F1 | 	sub	fp, #260
29688     A7 26 02 FB | 	rdlong	local01, fp
2968c     1D 26 46 F0 | 	shr	local01, #29
29690     01 26 06 F5 | 	and	local01, #1
29694     B4 4E 05 F1 | 	add	fp, #180
29698     A7 26 62 FC | 	wrlong	local01, fp
2969c     B4 4E 85 F1 | 	sub	fp, #180
296a0     A7 26 02 FB | 	rdlong	local01, fp
296a4     13 27 EA F8 | 	getbyte	local01, local01, #1
296a8     60 4E 05 F1 | 	add	fp, #96
296ac     A7 26 62 FC | 	wrlong	local01, fp
296b0     60 4E 85 F1 | 	sub	fp, #96
296b4     A7 26 02 FB | 	rdlong	local01, fp
296b8     13 27 E2 F8 | 	getbyte	local01, local01, #0
296bc     64 4E 05 F1 | 	add	fp, #100
296c0     A7 26 62 FC | 	wrlong	local01, fp
296c4     00 26 06 F6 | 	mov	local01, #0
296c8     5C 4E 85 F1 | 	sub	fp, #92
296cc     A7 1A 02 FB | 	rdlong	arg05, fp
296d0     65 1A 0E F2 | 	cmp	arg05, #101 wz
296d4     01 26 06 A6 |  if_e	mov	local01, #1
296d8     14 4E 05 F1 | 	add	fp, #20
296dc     A7 26 62 FC | 	wrlong	local01, fp
296e0     98 4E 05 F1 | 	add	fp, #152
296e4     A7 28 0A FB | 	rdlong	local02, fp wz
296e8     45 26 06 56 |  if_ne	mov	local01, #69
296ec     65 26 06 A6 |  if_e	mov	local01, #101
296f0     8C 4E 85 F1 | 	sub	fp, #140
296f4     A7 26 62 FC | 	wrlong	local01, fp
296f8     20 4E 85 F1 | 	sub	fp, #32
296fc     A7 26 02 FB | 	rdlong	local01, fp
29700     10 4E 85 F1 | 	sub	fp, #16
29704     61 26 0E F2 | 	cmp	local01, #97 wz
29708     4C 00 90 5D |  if_ne	jmp	#LR__3523
2970c     24 4E 05 F1 | 	add	fp, #36
29710     A7 02 68 FC | 	wrlong	#1, fp
29714     98 4E 05 F1 | 	add	fp, #152
29718     A7 28 0A FB | 	rdlong	local02, fp wz
2971c     50 26 06 56 |  if_ne	mov	local01, #80
29720     70 26 06 A6 |  if_e	mov	local01, #112
29724     8C 4E 85 F1 | 	sub	fp, #140
29728     A7 26 62 FC | 	wrlong	local01, fp
2972c     14 4E 85 F1 | 	sub	fp, #20
29730     A7 04 68 FC | 	wrlong	#2, fp
29734     1C 4E 05 F1 | 	add	fp, #28
29738     A7 02 68 FC | 	wrlong	#1, fp
2973c     84 4E 05 F1 | 	add	fp, #132
29740     A7 28 0A FB | 	rdlong	local02, fp wz
29744     58 26 06 56 |  if_ne	mov	local01, #88
29748     78 26 06 A6 |  if_e	mov	local01, #120
2974c     7C 4E 85 F1 | 	sub	fp, #124
29750     A7 26 62 FC | 	wrlong	local01, fp
29754     40 4E 85 F1 | 	sub	fp, #64
29758                 | LR__3523
29758     10 4E 05 F1 | 	add	fp, #16
2975c     A7 26 02 FB | 	rdlong	local01, fp
29760     10 4E 85 F1 | 	sub	fp, #16
29764     23 26 0E F2 | 	cmp	local01, #35 wz
29768     3C 00 90 5D |  if_ne	jmp	#LR__3526
2976c     48 4E 05 F1 | 	add	fp, #72
29770     A7 02 68 FC | 	wrlong	#1, fp
29774     C8 4E 05 F1 | 	add	fp, #200
29778     A7 26 0A FB | 	rdlong	local01, fp wz
2977c     10 4F 85 F1 | 	sub	fp, #272
29780     18 00 90 AD |  if_e	jmp	#LR__3524
29784     10 4E 05 F1 | 	add	fp, #16
29788     A7 CC 68 FC | 	wrlong	#102, fp
2978c     00 4F 05 F1 | 	add	fp, #256
29790     A7 00 68 FC | 	wrlong	#0, fp
29794     10 4F 85 F1 | 	sub	fp, #272
29798     0C 00 90 FD | 	jmp	#LR__3525
2979c                 | LR__3524
2979c     10 4F 05 F1 | 	add	fp, #272
297a0     A7 02 68 FC | 	wrlong	#1, fp
297a4     10 4F 85 F1 | 	sub	fp, #272
297a8                 | LR__3525
297a8                 | LR__3526
297a8     08 4E 05 F1 | 	add	fp, #8
297ac     A7 26 02 FB | 	rdlong	local01, fp
297b0     1A 26 46 F0 | 	shr	local01, #26
297b4     03 26 06 F5 | 	and	local01, #3
297b8     5C 4E 05 F1 | 	add	fp, #92
297bc     A7 26 62 FC | 	wrlong	local01, fp
297c0     58 4E 85 F1 | 	sub	fp, #88
297c4     A7 FA 01 FB | 	rdlong	result1, fp
297c8     0C 4E 85 F1 | 	sub	fp, #12
297cc     1F FA 4D F0 | 	shr	result1, #31 wz
297d0     20 00 90 AD |  if_e	jmp	#LR__3527
297d4     2C 4E 05 F1 | 	add	fp, #44
297d8     A7 5A 68 FC | 	wrlong	#45, fp
297dc     20 4E 85 F1 | 	sub	fp, #32
297e0     A7 FA 01 FB | 	rdlong	result1, fp
297e4     1F FA E5 F4 | 	bitnot	result1, #31
297e8     A7 FA 61 FC | 	wrlong	result1, fp
297ec     0C 4E 85 F1 | 	sub	fp, #12
297f0     3C 00 90 FD | 	jmp	#LR__3529
297f4                 | LR__3527
297f4     64 4E 05 F1 | 	add	fp, #100
297f8     A7 26 02 FB | 	rdlong	local01, fp
297fc     64 4E 85 F1 | 	sub	fp, #100
29800     01 26 0E F2 | 	cmp	local01, #1 wz
29804     2C 4E 05 A1 |  if_e	add	fp, #44
29808     A7 56 68 AC |  if_e	wrlong	#43, fp
2980c     2C 4E 85 A1 |  if_e	sub	fp, #44
29810     1C 00 90 AD |  if_e	jmp	#LR__3528
29814     64 4E 05 F1 | 	add	fp, #100
29818     A7 26 02 FB | 	rdlong	local01, fp
2981c     64 4E 85 F1 | 	sub	fp, #100
29820     02 26 0E F2 | 	cmp	local01, #2 wz
29824     2C 4E 05 A1 |  if_e	add	fp, #44
29828     A7 40 68 AC |  if_e	wrlong	#32, fp
2982c     2C 4E 85 A1 |  if_e	sub	fp, #44
29830                 | LR__3528
29830                 | LR__3529
29830     08 4E 05 F1 | 	add	fp, #8
29834     A7 26 02 FB | 	rdlong	local01, fp
29838     18 26 46 F0 | 	shr	local01, #24
2983c     03 26 06 F5 | 	and	local01, #3
29840     3C 4E 05 F1 | 	add	fp, #60
29844     A7 26 62 FC | 	wrlong	local01, fp
29848     00 26 06 F6 | 	mov	local01, #0
2984c     18 4E 85 F1 | 	sub	fp, #24
29850     A7 2A 0A FB | 	rdlong	local03, fp wz
29854     2C 4E 85 F1 | 	sub	fp, #44
29858     18 00 90 5D |  if_ne	jmp	#LR__3530
2985c     1C 4E 05 F1 | 	add	fp, #28
29860     A7 2C 02 FB | 	rdlong	local04, fp
29864     1C 4E 85 F1 | 	sub	fp, #28
29868     16 2F 02 F6 | 	mov	local05, local04
2986c     0A 2E 0E F2 | 	cmp	local05, #10 wz
29870     04 00 90 AD |  if_e	jmp	#LR__3531
29874                 | LR__3530
29874     01 26 66 F5 | 	xor	local01, #1
29878                 | LR__3531
29878     3C 4E 05 F1 | 	add	fp, #60
2987c     A7 26 62 FC | 	wrlong	local01, fp
29880     3C 4E 85 F1 | 	sub	fp, #60
29884     00 26 0E F2 | 	cmp	local01, #0 wz
29888     0C 01 90 AD |  if_e	jmp	#LR__3533
2988c     44 4E 05 F1 | 	add	fp, #68
29890     A7 2E 02 FB | 	rdlong	local05, fp
29894     44 4E 85 F1 | 	sub	fp, #68
29898     17 2B 02 F6 | 	mov	local03, local05
2989c     02 2A 0E F2 | 	cmp	local03, #2 wz
298a0     F4 00 90 5D |  if_ne	jmp	#LR__3533
298a4     0C 4F 05 F1 | 	add	fp, #268
298a8     A7 30 02 FB | 	rdlong	local06, fp
298ac     0C 4F 85 F1 | 	sub	fp, #268
298b0     18 2D 02 F6 | 	mov	local04, local06
298b4     02 2C 0E F2 | 	cmp	local04, #2 wz
298b8     DC 00 90 AD |  if_e	jmp	#LR__3533
298bc     C0 4E 05 F1 | 	add	fp, #192
298c0     A7 12 02 FB | 	rdlong	arg01, fp
298c4     94 4E 85 F1 | 	sub	fp, #148
298c8     A7 14 02 FB | 	rdlong	arg02, fp
298cc     14 4E 05 F1 | 	add	fp, #20
298d0     A7 16 02 FB | 	rdlong	arg03, fp
298d4     40 4E 85 F1 | 	sub	fp, #64
298d8     98 47 B0 FD | 	call	#__system__emitsign_0587
298dc     14 4F 05 F1 | 	add	fp, #276
298e0     A7 FA 61 FC | 	wrlong	result1, fp
298e4     14 4F 85 F1 | 	sub	fp, #276
298e8     00 FA 55 F2 | 	cmps	result1, #0 wc
298ec     14 4F 05 C1 |  if_b	add	fp, #276
298f0     A7 FA 01 CB |  if_b	rdlong	result1, fp
298f4     14 4F 85 C1 |  if_b	sub	fp, #276
298f8     6C 0B 90 CD |  if_b	jmp	#LR__3583
298fc     C0 4E 05 F1 | 	add	fp, #192
29900     A7 26 02 FB | 	rdlong	local01, fp
29904     54 4E 05 F1 | 	add	fp, #84
29908     A7 2E 02 FB | 	rdlong	local05, fp
2990c     17 2B 02 F6 | 	mov	local03, local05
29910     17 27 02 F1 | 	add	local01, local05
29914     54 4E 85 F1 | 	sub	fp, #84
29918     A7 26 62 FC | 	wrlong	local01, fp
2991c     58 4E 85 F1 | 	sub	fp, #88
29920     A7 26 0A FB | 	rdlong	local01, fp wz
29924     68 4E 85 F1 | 	sub	fp, #104
29928     60 00 90 AD |  if_e	jmp	#LR__3532
2992c     68 4E 05 F1 | 	add	fp, #104
29930     A7 26 02 FB | 	rdlong	local01, fp
29934     AC 4E 05 F1 | 	add	fp, #172
29938     A7 2A 02 FB | 	rdlong	local03, fp
2993c     15 27 82 F1 | 	sub	local01, local03
29940     AC 4E 85 F1 | 	sub	fp, #172
29944     A7 26 62 FC | 	wrlong	local01, fp
29948     68 4E 85 F1 | 	sub	fp, #104
2994c     00 26 56 F2 | 	cmps	local01, #0 wc
29950     68 4E 05 C1 |  if_b	add	fp, #104
29954     A7 00 68 CC |  if_b	wrlong	#0, fp
29958     68 4E 85 C1 |  if_b	sub	fp, #104
2995c     08 4E 05 F1 | 	add	fp, #8
29960     A7 26 02 FB | 	rdlong	local01, fp
29964     E8 26 06 F4 | 	bitl	local01, #232
29968     A7 26 62 FC | 	wrlong	local01, fp
2996c     60 4E 05 F1 | 	add	fp, #96
29970     A7 2E 02 FB | 	rdlong	local05, fp
29974     17 2B 02 F6 | 	mov	local03, local05
29978     08 2A 66 F0 | 	shl	local03, #8
2997c     15 27 42 F5 | 	or	local01, local03
29980     60 4E 85 F1 | 	sub	fp, #96
29984     A7 26 62 FC | 	wrlong	local01, fp
29988     08 4E 85 F1 | 	sub	fp, #8
2998c                 | LR__3532
2998c     3C 4E 05 F1 | 	add	fp, #60
29990     A7 00 68 FC | 	wrlong	#0, fp
29994     3C 4E 85 F1 | 	sub	fp, #60
29998                 | LR__3533
29998     0C 4E 05 F1 | 	add	fp, #12
2999c     A7 12 02 FB | 	rdlong	arg01, fp
299a0     0C 4E 85 F1 | 	sub	fp, #12
299a4     F0 21 B0 FD | 	call	#__system____builtin_ilogb
299a8     FF FF 3F FF 
299ac     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
299b0     50 00 90 5D |  if_ne	jmp	#LR__3535
299b4     2C 4E 05 F1 | 	add	fp, #44
299b8     A7 26 0A FB | 	rdlong	local01, fp wz
299bc     2C 4E 85 F1 | 	sub	fp, #44
299c0     24 00 90 AD |  if_e	jmp	#LR__3534
299c4     C0 4E 05 F1 | 	add	fp, #192
299c8     A7 28 02 FB | 	rdlong	local02, fp
299cc     14 2B 02 F6 | 	mov	local03, local02
299d0     01 2A 06 F1 | 	add	local03, #1
299d4     A7 2A 62 FC | 	wrlong	local03, fp
299d8     94 4E 85 F1 | 	sub	fp, #148
299dc     A7 2C 02 FB | 	rdlong	local04, fp
299e0     2C 4E 85 F1 | 	sub	fp, #44
299e4     14 2D 42 FC | 	wrbyte	local04, local02
299e8                 | LR__3534
299e8     C0 4E 05 F1 | 	add	fp, #192
299ec     A7 12 02 FB | 	rdlong	arg01, fp
299f0     C0 4E 85 F1 | 	sub	fp, #192
299f4     BF 01 00 FF 
299f8     12 15 06 F6 | 	mov	arg02, ##@LR__5541
299fc     A8 E9 BF FD | 	call	#__system____builtin_strcpy
29a00     A4 08 90 FD | 	jmp	#LR__3571
29a04                 | LR__3535
29a04     0C 4E 05 F1 | 	add	fp, #12
29a08     A7 28 02 FB | 	rdlong	local02, fp
29a0c     0C 4E 85 F1 | 	sub	fp, #12
29a10     14 13 02 F6 | 	mov	arg01, local02
29a14     80 21 B0 FD | 	call	#__system____builtin_ilogb
29a18     00 00 40 FF 
29a1c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
29a20     50 00 90 5D |  if_ne	jmp	#LR__3537
29a24     2C 4E 05 F1 | 	add	fp, #44
29a28     A7 26 0A FB | 	rdlong	local01, fp wz
29a2c     2C 4E 85 F1 | 	sub	fp, #44
29a30     24 00 90 AD |  if_e	jmp	#LR__3536
29a34     C0 4E 05 F1 | 	add	fp, #192
29a38     A7 28 02 FB | 	rdlong	local02, fp
29a3c     14 2B 02 F6 | 	mov	local03, local02
29a40     01 2A 06 F1 | 	add	local03, #1
29a44     A7 2A 62 FC | 	wrlong	local03, fp
29a48     94 4E 85 F1 | 	sub	fp, #148
29a4c     A7 2C 02 FB | 	rdlong	local04, fp
29a50     2C 4E 85 F1 | 	sub	fp, #44
29a54     14 2D 42 FC | 	wrbyte	local04, local02
29a58                 | LR__3536
29a58     C0 4E 05 F1 | 	add	fp, #192
29a5c     A7 12 02 FB | 	rdlong	arg01, fp
29a60     C0 4E 85 F1 | 	sub	fp, #192
29a64     BF 01 00 FF 
29a68     16 15 06 F6 | 	mov	arg02, ##@LR__5542
29a6c     38 E9 BF FD | 	call	#__system____builtin_strcpy
29a70     34 08 90 FD | 	jmp	#LR__3571
29a74                 | LR__3537
29a74     10 4E 05 F1 | 	add	fp, #16
29a78     A7 26 02 FB | 	rdlong	local01, fp
29a7c     10 4E 85 F1 | 	sub	fp, #16
29a80     67 26 0E F2 | 	cmp	local01, #103 wz
29a84     10 4E 05 51 |  if_ne	add	fp, #16
29a88     A7 2A 02 5B |  if_ne	rdlong	local03, fp
29a8c     10 4E 85 51 |  if_ne	sub	fp, #16
29a90     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
29a94     94 01 90 5D |  if_ne	jmp	#LR__3542
29a98     0C 4E 05 F1 | 	add	fp, #12
29a9c     A7 12 02 FB | 	rdlong	arg01, fp
29aa0     08 4E 05 F1 | 	add	fp, #8
29aa4     A7 14 02 F6 | 	mov	arg02, fp
29aa8     0C 4E 05 F1 | 	add	fp, #12
29aac     A7 16 02 F6 | 	mov	arg03, fp
29ab0     98 4E 05 F1 | 	add	fp, #152
29ab4     A7 18 02 FB | 	rdlong	arg04, fp
29ab8     9C 4E 85 F1 | 	sub	fp, #156
29abc     A7 1A 02 FB | 	rdlong	arg05, fp
29ac0     1C 4E 85 F1 | 	sub	fp, #28
29ac4     B8 43 B0 FD | 	call	#__system__disassemble_0585
29ac8     10 4E 05 F1 | 	add	fp, #16
29acc     A7 26 02 FB | 	rdlong	local01, fp
29ad0     10 4E 85 F1 | 	sub	fp, #16
29ad4     23 26 0E F2 | 	cmp	local01, #35 wz
29ad8     A0 00 90 5D |  if_ne	jmp	#LR__3539
29adc     20 4E 05 F1 | 	add	fp, #32
29ae0     A7 26 02 FB | 	rdlong	local01, fp
29ae4     98 4E 05 F1 | 	add	fp, #152
29ae8     A7 2A 02 FB | 	rdlong	local03, fp
29aec     B8 4E 85 F1 | 	sub	fp, #184
29af0     15 27 5A F2 | 	cmps	local01, local03 wcz
29af4     24 4E 05 11 |  if_a	add	fp, #36
29af8     A7 02 68 1C |  if_a	wrlong	#1, fp
29afc     24 4E 85 11 |  if_a	sub	fp, #36
29b00     A4 01 90 1D |  if_a	jmp	#LR__3545
29b04     20 4E 05 F1 | 	add	fp, #32
29b08     A7 26 02 FB | 	rdlong	local01, fp
29b0c     20 4E 85 F1 | 	sub	fp, #32
29b10     00 26 56 F2 | 	cmps	local01, #0 wc
29b14     2C 00 90 3D |  if_ae	jmp	#LR__3538
29b18     B8 4E 05 F1 | 	add	fp, #184
29b1c     A7 26 02 FB | 	rdlong	local01, fp
29b20     13 27 62 F6 | 	neg	local01, local01
29b24     98 4E 85 F1 | 	sub	fp, #152
29b28     A7 2A 02 FB | 	rdlong	local03, fp
29b2c     20 4E 85 F1 | 	sub	fp, #32
29b30     13 2B 5A F2 | 	cmps	local03, local01 wcz
29b34     24 4E 05 E1 |  if_be	add	fp, #36
29b38     A7 02 68 EC |  if_be	wrlong	#1, fp
29b3c     24 4E 85 E1 |  if_be	sub	fp, #36
29b40     64 01 90 FD | 	jmp	#LR__3545
29b44                 | LR__3538
29b44     20 4E 05 F1 | 	add	fp, #32
29b48     A7 26 02 FB | 	rdlong	local01, fp
29b4c     20 4E 85 F1 | 	sub	fp, #32
29b50     01 26 56 F2 | 	cmps	local01, #1 wc
29b54     50 01 90 CD |  if_b	jmp	#LR__3545
29b58     B8 4E 05 F1 | 	add	fp, #184
29b5c     A7 26 02 FB | 	rdlong	local01, fp
29b60     98 4E 85 F1 | 	sub	fp, #152
29b64     A7 2A 02 FB | 	rdlong	local03, fp
29b68     15 27 82 F1 | 	sub	local01, local03
29b6c     98 4E 05 F1 | 	add	fp, #152
29b70     A7 26 62 FC | 	wrlong	local01, fp
29b74     B8 4E 85 F1 | 	sub	fp, #184
29b78     2C 01 90 FD | 	jmp	#LR__3545
29b7c                 | LR__3539
29b7c     00 26 06 F6 | 	mov	local01, #0
29b80     08 4E 05 F1 | 	add	fp, #8
29b84     A7 28 02 FB | 	rdlong	local02, fp
29b88     1C 28 46 F0 | 	shr	local02, #28
29b8c     01 28 0E F5 | 	and	local02, #1 wz
29b90     01 26 06 A6 |  if_e	mov	local01, #1
29b94     2C 4E 05 F1 | 	add	fp, #44
29b98     A7 26 62 FC | 	wrlong	local01, fp
29b9c     14 4E 85 F1 | 	sub	fp, #20
29ba0     A7 26 02 FB | 	rdlong	local01, fp
29ba4     98 4E 05 F1 | 	add	fp, #152
29ba8     A7 2A 02 FB | 	rdlong	local03, fp
29bac     B8 4E 85 F1 | 	sub	fp, #184
29bb0     15 27 52 F2 | 	cmps	local01, local03 wc
29bb4     18 00 90 3D |  if_ae	jmp	#LR__3540
29bb8     20 4E 05 F1 | 	add	fp, #32
29bbc     A7 2C 02 FB | 	rdlong	local04, fp
29bc0     20 4E 85 F1 | 	sub	fp, #32
29bc4     FF FF 7F FF 
29bc8     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
29bcc     10 00 90 3D |  if_ae	jmp	#LR__3541
29bd0                 | LR__3540
29bd0     24 4E 05 F1 | 	add	fp, #36
29bd4     A7 02 68 FC | 	wrlong	#1, fp
29bd8     24 4E 85 F1 | 	sub	fp, #36
29bdc     C8 00 90 FD | 	jmp	#LR__3545
29be0                 | LR__3541
29be0     B8 4E 05 F1 | 	add	fp, #184
29be4     A7 2C 02 FB | 	rdlong	local04, fp
29be8     98 4E 85 F1 | 	sub	fp, #152
29bec     A7 2A 02 FB | 	rdlong	local03, fp
29bf0     15 2D 82 F1 | 	sub	local04, local03
29bf4     98 4E 05 F1 | 	add	fp, #152
29bf8     A7 2C 62 FC | 	wrlong	local04, fp
29bfc     AC 4E 85 F1 | 	sub	fp, #172
29c00     A7 12 02 FB | 	rdlong	arg01, fp
29c04     08 4E 05 F1 | 	add	fp, #8
29c08     A7 14 02 F6 | 	mov	arg02, fp
29c0c     0C 4E 05 F1 | 	add	fp, #12
29c10     A7 16 02 F6 | 	mov	arg03, fp
29c14     16 19 62 F6 | 	neg	arg04, local04
29c18     04 4E 85 F1 | 	sub	fp, #4
29c1c     A7 1A 02 FB | 	rdlong	arg05, fp
29c20     1C 4E 85 F1 | 	sub	fp, #28
29c24     58 42 B0 FD | 	call	#__system__disassemble_0585
29c28     7C 00 90 FD | 	jmp	#LR__3545
29c2c                 | LR__3542
29c2c     24 4E 05 F1 | 	add	fp, #36
29c30     A7 26 0A FB | 	rdlong	local01, fp wz
29c34     24 4E 85 F1 | 	sub	fp, #36
29c38     34 00 90 AD |  if_e	jmp	#LR__3543
29c3c     0C 4E 05 F1 | 	add	fp, #12
29c40     A7 12 02 FB | 	rdlong	arg01, fp
29c44     08 4E 05 F1 | 	add	fp, #8
29c48     A7 14 02 F6 | 	mov	arg02, fp
29c4c     0C 4E 05 F1 | 	add	fp, #12
29c50     A7 16 02 F6 | 	mov	arg03, fp
29c54     98 4E 05 F1 | 	add	fp, #152
29c58     A7 18 02 FB | 	rdlong	arg04, fp
29c5c     9C 4E 85 F1 | 	sub	fp, #156
29c60     A7 1A 02 FB | 	rdlong	arg05, fp
29c64     1C 4E 85 F1 | 	sub	fp, #28
29c68     14 42 B0 FD | 	call	#__system__disassemble_0585
29c6c     38 00 90 FD | 	jmp	#LR__3544
29c70                 | LR__3543
29c70     0C 4E 05 F1 | 	add	fp, #12
29c74     A7 12 02 FB | 	rdlong	arg01, fp
29c78     08 4E 05 F1 | 	add	fp, #8
29c7c     A7 14 02 F6 | 	mov	arg02, fp
29c80     0C 4E 05 F1 | 	add	fp, #12
29c84     A7 16 02 F6 | 	mov	arg03, fp
29c88     98 4E 05 F1 | 	add	fp, #152
29c8c     A7 2C 02 FB | 	rdlong	local04, fp
29c90     01 2C 06 F1 | 	add	local04, #1
29c94     16 19 62 F6 | 	neg	arg04, local04
29c98     9C 4E 85 F1 | 	sub	fp, #156
29c9c     A7 1A 02 FB | 	rdlong	arg05, fp
29ca0     1C 4E 85 F1 | 	sub	fp, #28
29ca4     D8 41 B0 FD | 	call	#__system__disassemble_0585
29ca8                 | LR__3544
29ca8                 | LR__3545
29ca8     1C 4E 05 F1 | 	add	fp, #28
29cac     A7 26 02 FB | 	rdlong	local01, fp
29cb0     1C 4E 85 F1 | 	sub	fp, #28
29cb4     02 26 0E F2 | 	cmp	local01, #2 wz
29cb8     4C 00 90 5D |  if_ne	jmp	#LR__3548
29cbc     1C 4E 05 F1 | 	add	fp, #28
29cc0     A7 20 68 FC | 	wrlong	#16, fp
29cc4     1C 4E 85 F1 | 	sub	fp, #28
29cc8                 | LR__3546
29cc8     14 4E 05 F1 | 	add	fp, #20
29ccc     A7 26 0A FB | 	rdlong	local01, fp wz
29cd0     14 4E 85 F1 | 	sub	fp, #20
29cd4     30 00 90 AD |  if_e	jmp	#LR__3547
29cd8     14 4E 05 F1 | 	add	fp, #20
29cdc     A7 2A 02 FB | 	rdlong	local03, fp
29ce0     14 4E 85 F1 | 	sub	fp, #20
29ce4     00 80 00 FF 
29ce8     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
29cec     18 00 90 3D |  if_ae	jmp	#LR__3547
29cf0     14 4E 05 F1 | 	add	fp, #20
29cf4     A7 26 02 FB | 	rdlong	local01, fp
29cf8     01 26 66 F0 | 	shl	local01, #1
29cfc     A7 26 62 FC | 	wrlong	local01, fp
29d00     14 4E 85 F1 | 	sub	fp, #20
29d04     C0 FF 9F FD | 	jmp	#LR__3546
29d08                 | LR__3547
29d08                 | LR__3548
29d08     70 4E 05 F1 | 	add	fp, #112
29d0c     A7 12 02 F6 | 	mov	arg01, fp
29d10     5C 4E 85 F1 | 	sub	fp, #92
29d14     A7 14 02 FB | 	rdlong	arg02, fp
29d18     08 4E 05 F1 | 	add	fp, #8
29d1c     A7 16 02 FB | 	rdlong	arg03, fp
29d20     A0 4E 05 F1 | 	add	fp, #160
29d24     A7 1A 02 FB | 	rdlong	arg05, fp
29d28     BC 4E 85 F1 | 	sub	fp, #188
29d2c     01 18 06 F6 | 	mov	arg04, #1
29d30     D8 40 B0 FD | 	call	#__system___uitoa
29d34     58 4E 05 F1 | 	add	fp, #88
29d38     A7 FA 61 FC | 	wrlong	result1, fp
29d3c     38 4E 85 F1 | 	sub	fp, #56
29d40     A7 26 02 FB | 	rdlong	local01, fp
29d44     20 4E 85 F1 | 	sub	fp, #32
29d48     00 26 56 F2 | 	cmps	local01, #0 wc
29d4c     50 00 90 3D |  if_ae	jmp	#LR__3549
29d50     60 4E 05 F1 | 	add	fp, #96
29d54     A7 5A 68 FC | 	wrlong	#45, fp
29d58     50 4E 05 F1 | 	add	fp, #80
29d5c     A7 12 02 F6 | 	mov	arg01, fp
29d60     90 4E 85 F1 | 	sub	fp, #144
29d64     A7 2A 02 FB | 	rdlong	local03, fp
29d68     15 15 62 F6 | 	neg	arg02, local03
29d6c     18 4E 05 F1 | 	add	fp, #24
29d70     A7 18 02 FB | 	rdlong	arg04, fp
29d74     84 4E 05 F1 | 	add	fp, #132
29d78     A7 30 02 FB | 	rdlong	local06, fp
29d7c     BC 4E 85 F1 | 	sub	fp, #188
29d80     18 2D 02 F6 | 	mov	local04, local06
29d84     0A 16 06 F6 | 	mov	arg03, #10
29d88     16 1B 02 F6 | 	mov	arg05, local04
29d8c     7C 40 B0 FD | 	call	#__system___uitoa
29d90     5C 4E 05 F1 | 	add	fp, #92
29d94     A7 FA 61 FC | 	wrlong	result1, fp
29d98     5C 4E 85 F1 | 	sub	fp, #92
29d9c     48 00 90 FD | 	jmp	#LR__3550
29da0                 | LR__3549
29da0     60 4E 05 F1 | 	add	fp, #96
29da4     A7 56 68 FC | 	wrlong	#43, fp
29da8     50 4E 05 F1 | 	add	fp, #80
29dac     A7 12 02 F6 | 	mov	arg01, fp
29db0     90 4E 85 F1 | 	sub	fp, #144
29db4     A7 14 02 FB | 	rdlong	arg02, fp
29db8     18 4E 05 F1 | 	add	fp, #24
29dbc     A7 18 02 FB | 	rdlong	arg04, fp
29dc0     84 4E 05 F1 | 	add	fp, #132
29dc4     A7 30 02 FB | 	rdlong	local06, fp
29dc8     BC 4E 85 F1 | 	sub	fp, #188
29dcc     18 2D 02 F6 | 	mov	local04, local06
29dd0     0A 16 06 F6 | 	mov	arg03, #10
29dd4     16 1B 02 F6 | 	mov	arg05, local04
29dd8     30 40 B0 FD | 	call	#__system___uitoa
29ddc     5C 4E 05 F1 | 	add	fp, #92
29de0     A7 FA 61 FC | 	wrlong	result1, fp
29de4     5C 4E 85 F1 | 	sub	fp, #92
29de8                 | LR__3550
29de8     24 4E 05 F1 | 	add	fp, #36
29dec     A7 26 0A FB | 	rdlong	local01, fp wz
29df0     24 4E 85 F1 | 	sub	fp, #36
29df4     2C 00 90 AD |  if_e	jmp	#LR__3551
29df8     50 4E 05 F1 | 	add	fp, #80
29dfc     A7 00 68 FC | 	wrlong	#0, fp
29e00     04 4E 85 F1 | 	sub	fp, #4
29e04     A7 00 68 FC | 	wrlong	#0, fp
29e08     6C 4E 05 F1 | 	add	fp, #108
29e0c     A7 26 02 FB | 	rdlong	local01, fp
29e10     01 26 06 F1 | 	add	local01, #1
29e14     64 4E 85 F1 | 	sub	fp, #100
29e18     A7 26 62 FC | 	wrlong	local01, fp
29e1c     54 4E 85 F1 | 	sub	fp, #84
29e20     88 00 90 FD | 	jmp	#LR__3554
29e24                 | LR__3551
29e24     20 4E 05 F1 | 	add	fp, #32
29e28     A7 26 02 FB | 	rdlong	local01, fp
29e2c     20 4E 85 F1 | 	sub	fp, #32
29e30     00 26 56 F2 | 	cmps	local01, #0 wc
29e34     40 00 90 3D |  if_ae	jmp	#LR__3552
29e38     20 4E 05 F1 | 	add	fp, #32
29e3c     A7 28 02 FB | 	rdlong	local02, fp
29e40     30 4E 05 F1 | 	add	fp, #48
29e44     A7 28 62 FC | 	wrlong	local02, fp
29e48     04 4E 85 F1 | 	sub	fp, #4
29e4c     A7 28 62 FC | 	wrlong	local02, fp
29e50     2C 4E 85 F1 | 	sub	fp, #44
29e54     A7 26 02 FB | 	rdlong	local01, fp
29e58     98 4E 05 F1 | 	add	fp, #152
29e5c     A7 2A 02 FB | 	rdlong	local03, fp
29e60     15 27 02 F1 | 	add	local01, local03
29e64     01 26 06 F1 | 	add	local01, #1
29e68     64 4E 85 F1 | 	sub	fp, #100
29e6c     A7 26 62 FC | 	wrlong	local01, fp
29e70     54 4E 85 F1 | 	sub	fp, #84
29e74     34 00 90 FD | 	jmp	#LR__3553
29e78                 | LR__3552
29e78     4C 4E 05 F1 | 	add	fp, #76
29e7c     A7 00 68 FC | 	wrlong	#0, fp
29e80     2C 4E 85 F1 | 	sub	fp, #44
29e84     A7 26 02 FB | 	rdlong	local01, fp
29e88     30 4E 05 F1 | 	add	fp, #48
29e8c     A7 26 62 FC | 	wrlong	local01, fp
29e90     68 4E 05 F1 | 	add	fp, #104
29e94     A7 2A 02 FB | 	rdlong	local03, fp
29e98     15 27 02 F1 | 	add	local01, local03
29e9c     01 26 06 F1 | 	add	local01, #1
29ea0     64 4E 85 F1 | 	sub	fp, #100
29ea4     A7 26 62 FC | 	wrlong	local01, fp
29ea8     54 4E 85 F1 | 	sub	fp, #84
29eac                 | LR__3553
29eac                 | LR__3554
29eac     54 4E 05 F1 | 	add	fp, #84
29eb0     A7 26 02 FB | 	rdlong	local01, fp
29eb4     08 4E 85 F1 | 	sub	fp, #8
29eb8     A7 2A 02 FB | 	rdlong	local03, fp
29ebc     15 27 82 F1 | 	sub	local01, local03
29ec0     01 26 06 F1 | 	add	local01, #1
29ec4     24 4E 85 F1 | 	sub	fp, #36
29ec8     A7 26 62 FC | 	wrlong	local01, fp
29ecc     04 4E 05 F1 | 	add	fp, #4
29ed0     A7 26 0A FB | 	rdlong	local01, fp wz
29ed4     2C 4E 85 F1 | 	sub	fp, #44
29ed8     28 4E 05 51 |  if_ne	add	fp, #40
29edc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
29ee0     01 2A 06 51 |  if_ne	add	local03, #1
29ee4     A7 2A 62 5C |  if_ne	wrlong	local03, fp
29ee8     28 4E 85 51 |  if_ne	sub	fp, #40
29eec     1C 4E 05 F1 | 	add	fp, #28
29ef0     A7 26 02 FB | 	rdlong	local01, fp
29ef4     1C 4E 85 F1 | 	sub	fp, #28
29ef8     10 26 0E F2 | 	cmp	local01, #16 wz
29efc     28 4E 05 A1 |  if_e	add	fp, #40
29f00     A7 26 02 AB |  if_e	rdlong	local01, fp
29f04     02 26 06 A1 |  if_e	add	local01, #2
29f08     A7 26 62 AC |  if_e	wrlong	local01, fp
29f0c     28 4E 85 A1 |  if_e	sub	fp, #40
29f10     24 4E 05 F1 | 	add	fp, #36
29f14     A7 26 0A FB | 	rdlong	local01, fp wz
29f18     24 4E 85 F1 | 	sub	fp, #36
29f1c     28 00 90 AD |  if_e	jmp	#LR__3555
29f20     28 4E 05 F1 | 	add	fp, #40
29f24     A7 26 02 FB | 	rdlong	local01, fp
29f28     02 2A 06 F6 | 	mov	local03, #2
29f2c     34 4E 05 F1 | 	add	fp, #52
29f30     A7 2E 02 FB | 	rdlong	local05, fp
29f34     17 2B 02 F1 | 	add	local03, local05
29f38     15 27 02 F1 | 	add	local01, local03
29f3c     34 4E 85 F1 | 	sub	fp, #52
29f40     A7 26 62 FC | 	wrlong	local01, fp
29f44     28 4E 85 F1 | 	sub	fp, #40
29f48                 | LR__3555
29f48     28 4E 05 F1 | 	add	fp, #40
29f4c     A7 26 02 FB | 	rdlong	local01, fp
29f50     28 4E 85 F1 | 	sub	fp, #40
29f54     41 26 56 F2 | 	cmps	local01, #65 wc
29f58     01 FA 65 36 |  if_ae	neg	result1, #1
29f5c     08 05 90 3D |  if_ae	jmp	#LR__3583
29f60     3C 4E 05 F1 | 	add	fp, #60
29f64     A7 26 0A FB | 	rdlong	local01, fp wz
29f68     3C 4E 85 F1 | 	sub	fp, #60
29f6c     60 00 90 AD |  if_e	jmp	#LR__3556
29f70     C0 4E 05 F1 | 	add	fp, #192
29f74     A7 12 02 FB | 	rdlong	arg01, fp
29f78     94 4E 85 F1 | 	sub	fp, #148
29f7c     A7 14 02 FB | 	rdlong	arg02, fp
29f80     14 4E 05 F1 | 	add	fp, #20
29f84     A7 16 02 FB | 	rdlong	arg03, fp
29f88     40 4E 85 F1 | 	sub	fp, #64
29f8c     E4 40 B0 FD | 	call	#__system__emitsign_0587
29f90     18 4F 05 F1 | 	add	fp, #280
29f94     A7 FA 61 FC | 	wrlong	result1, fp
29f98     18 4F 85 F1 | 	sub	fp, #280
29f9c     00 FA 55 F2 | 	cmps	result1, #0 wc
29fa0     18 4F 05 C1 |  if_b	add	fp, #280
29fa4     A7 FA 01 CB |  if_b	rdlong	result1, fp
29fa8     18 4F 85 C1 |  if_b	sub	fp, #280
29fac     B8 04 90 CD |  if_b	jmp	#LR__3583
29fb0     C0 4E 05 F1 | 	add	fp, #192
29fb4     A7 26 02 FB | 	rdlong	local01, fp
29fb8     58 4E 05 F1 | 	add	fp, #88
29fbc     A7 2A 02 FB | 	rdlong	local03, fp
29fc0     15 27 02 F1 | 	add	local01, local03
29fc4     58 4E 85 F1 | 	sub	fp, #88
29fc8     A7 26 62 FC | 	wrlong	local01, fp
29fcc     C0 4E 85 F1 | 	sub	fp, #192
29fd0                 | LR__3556
29fd0     4C 4E 05 F1 | 	add	fp, #76
29fd4     A7 26 02 FB | 	rdlong	local01, fp
29fd8     34 4E 85 F1 | 	sub	fp, #52
29fdc     A7 26 62 FC | 	wrlong	local01, fp
29fe0     18 4E 85 F1 | 	sub	fp, #24
29fe4     97 9E 48 FB | 	callpa	#(@LR__3562-@LR__3557)>>2,fcache_load_ptr_
29fe8                 | LR__3557
29fe8     18 4E 05 F1 | 	add	fp, #24
29fec     A7 28 02 FB | 	rdlong	local02, fp
29ff0     3C 4E 05 F1 | 	add	fp, #60
29ff4     A7 2E 02 FB | 	rdlong	local05, fp
29ff8     54 4E 85 F1 | 	sub	fp, #84
29ffc     17 29 52 F2 | 	cmps	local02, local05 wc
2a000     20 01 90 3D |  if_ae	jmp	#LR__3563
2a004     18 4E 05 F1 | 	add	fp, #24
2a008     A7 30 02 FB | 	rdlong	local06, fp
2a00c     18 4E 85 F1 | 	sub	fp, #24
2a010     00 30 56 F2 | 	cmps	local06, #0 wc
2a014     58 00 90 CD |  if_b	jmp	#LR__3558
2a018     18 4E 05 F1 | 	add	fp, #24
2a01c     A7 30 02 FB | 	rdlong	local06, fp
2a020     40 4E 05 F1 | 	add	fp, #64
2a024     A7 32 02 FB | 	rdlong	local07, fp
2a028     58 4E 85 F1 | 	sub	fp, #88
2a02c     19 31 52 F2 | 	cmps	local06, local07 wc
2a030     3C 00 90 3D |  if_ae	jmp	#LR__3558
2a034     C0 4E 05 F1 | 	add	fp, #192
2a038     A7 34 02 FB | 	rdlong	local08, fp
2a03c     1A 33 02 F6 | 	mov	local07, local08
2a040     01 32 06 F1 | 	add	local07, #1
2a044     A7 32 62 FC | 	wrlong	local07, fp
2a048     A8 4E 85 F1 | 	sub	fp, #168
2a04c     A7 32 02 FB | 	rdlong	local07, fp
2a050     19 37 02 F6 | 	mov	local09, local07
2a054     58 4E 05 F1 | 	add	fp, #88
2a058     A7 38 02 F6 | 	mov	local10, fp
2a05c     A7 36 02 F1 | 	add	local09, fp
2a060     1B 3B C2 FA | 	rdbyte	local11, local09
2a064     1A 3B 42 FC | 	wrbyte	local11, local08
2a068     70 4E 85 F1 | 	sub	fp, #112
2a06c     20 00 90 FD | 	jmp	#LR__3559
2a070                 | LR__3558
2a070     C0 4E 05 F1 | 	add	fp, #192
2a074     A7 34 02 FB | 	rdlong	local08, fp
2a078     1A 37 02 F6 | 	mov	local09, local08
2a07c     01 36 06 F1 | 	add	local09, #1
2a080     A7 36 62 FC | 	wrlong	local09, fp
2a084     C0 4E 85 F1 | 	sub	fp, #192
2a088     30 36 06 F6 | 	mov	local09, #48
2a08c     1A 61 48 FC | 	wrbyte	#48, local08
2a090                 | LR__3559
2a090     18 4E 05 F1 | 	add	fp, #24
2a094     A7 30 02 FB | 	rdlong	local06, fp
2a098     38 4E 05 F1 | 	add	fp, #56
2a09c     A7 3C 02 FB | 	rdlong	local12, fp
2a0a0     50 4E 85 F1 | 	sub	fp, #80
2a0a4     1E 31 0A F2 | 	cmp	local06, local12 wz
2a0a8     5C 00 90 5D |  if_ne	jmp	#LR__3561
2a0ac     10 4F 05 F1 | 	add	fp, #272
2a0b0     A7 32 02 FB | 	rdlong	local07, fp
2a0b4     10 4F 85 F1 | 	sub	fp, #272
2a0b8     19 37 0A F6 | 	mov	local09, local07 wz
2a0bc     28 00 90 5D |  if_ne	jmp	#LR__3560
2a0c0     54 4E 05 F1 | 	add	fp, #84
2a0c4     A7 3A 02 FB | 	rdlong	local11, fp
2a0c8     1D 39 02 F6 | 	mov	local10, local11
2a0cc     01 38 86 F1 | 	sub	local10, #1
2a0d0     3C 4E 85 F1 | 	sub	fp, #60
2a0d4     A7 3E 02 FB | 	rdlong	local13, fp
2a0d8     18 4E 85 F1 | 	sub	fp, #24
2a0dc     1F 41 02 F6 | 	mov	local14, local13
2a0e0     1C 41 52 F2 | 	cmps	local14, local10 wc
2a0e4     20 00 90 3D |  if_ae	jmp	#LR__3561
2a0e8                 | LR__3560
2a0e8     C0 4E 05 F1 | 	add	fp, #192
2a0ec     A7 34 02 FB | 	rdlong	local08, fp
2a0f0     1A 3D 02 F6 | 	mov	local12, local08
2a0f4     01 3C 06 F1 | 	add	local12, #1
2a0f8     A7 3C 62 FC | 	wrlong	local12, fp
2a0fc     C0 4E 85 F1 | 	sub	fp, #192
2a100     2E 36 06 F6 | 	mov	local09, #46
2a104     1A 5D 48 FC | 	wrbyte	#46, local08
2a108                 | LR__3561
2a108     18 4E 05 F1 | 	add	fp, #24
2a10c     A7 42 02 FB | 	rdlong	local15, fp
2a110     21 3D 02 F6 | 	mov	local12, local15
2a114     01 3C 06 F1 | 	add	local12, #1
2a118     A7 3C 62 FC | 	wrlong	local12, fp
2a11c     18 4E 85 F1 | 	sub	fp, #24
2a120     C4 FE 9F FD | 	jmp	#LR__3557
2a124                 | LR__3562
2a124                 | LR__3563
2a124     34 4E 05 F1 | 	add	fp, #52
2a128     A7 26 0A FB | 	rdlong	local01, fp wz
2a12c     34 4E 85 F1 | 	sub	fp, #52
2a130     A0 00 90 AD |  if_e	jmp	#LR__3567
2a134     C0 4E 05 F1 | 	add	fp, #192
2a138     A7 26 02 FB | 	rdlong	local01, fp
2a13c     01 26 86 F1 | 	sub	local01, #1
2a140     A7 26 62 FC | 	wrlong	local01, fp
2a144     C0 4E 85 F1 | 	sub	fp, #192
2a148     97 26 48 FB | 	callpa	#(@LR__3565-@LR__3564)>>2,fcache_load_ptr_
2a14c                 | LR__3564
2a14c     C0 4E 05 F1 | 	add	fp, #192
2a150     A7 26 02 FB | 	rdlong	local01, fp
2a154     04 4E 05 F1 | 	add	fp, #4
2a158     A7 2A 02 FB | 	rdlong	local03, fp
2a15c     C4 4E 85 F1 | 	sub	fp, #196
2a160     15 27 5A F2 | 	cmps	local01, local03 wcz
2a164     30 00 90 ED |  if_be	jmp	#LR__3566
2a168     C0 4E 05 F1 | 	add	fp, #192
2a16c     A7 30 02 FB | 	rdlong	local06, fp
2a170     C0 4E 85 F1 | 	sub	fp, #192
2a174     18 2D C2 FA | 	rdbyte	local04, local06
2a178     30 2C 0E F2 | 	cmp	local04, #48 wz
2a17c     18 00 90 5D |  if_ne	jmp	#LR__3566
2a180     C0 4E 05 F1 | 	add	fp, #192
2a184     A7 26 02 FB | 	rdlong	local01, fp
2a188     01 26 86 F1 | 	sub	local01, #1
2a18c     A7 26 62 FC | 	wrlong	local01, fp
2a190     C0 4E 85 F1 | 	sub	fp, #192
2a194     B4 FF 9F FD | 	jmp	#LR__3564
2a198                 | LR__3565
2a198                 | LR__3566
2a198     C0 4E 05 F1 | 	add	fp, #192
2a19c     A7 28 02 FB | 	rdlong	local02, fp
2a1a0     C0 4E 85 F1 | 	sub	fp, #192
2a1a4     14 27 C2 FA | 	rdbyte	local01, local02
2a1a8     2E 26 0E F2 | 	cmp	local01, #46 wz
2a1ac     C0 4E 05 A1 |  if_e	add	fp, #192
2a1b0     A7 26 02 AB |  if_e	rdlong	local01, fp
2a1b4     01 26 86 A1 |  if_e	sub	local01, #1
2a1b8     A7 26 62 AC |  if_e	wrlong	local01, fp
2a1bc     C0 4E 85 A1 |  if_e	sub	fp, #192
2a1c0     C0 4E 05 F1 | 	add	fp, #192
2a1c4     A7 2A 02 FB | 	rdlong	local03, fp
2a1c8     01 2A 06 F1 | 	add	local03, #1
2a1cc     A7 2A 62 FC | 	wrlong	local03, fp
2a1d0     C0 4E 85 F1 | 	sub	fp, #192
2a1d4                 | LR__3567
2a1d4     24 4E 05 F1 | 	add	fp, #36
2a1d8     A7 26 0A FB | 	rdlong	local01, fp wz
2a1dc     24 4E 85 F1 | 	sub	fp, #36
2a1e0     B4 00 90 AD |  if_e	jmp	#LR__3570
2a1e4     C0 4E 05 F1 | 	add	fp, #192
2a1e8     A7 28 02 FB | 	rdlong	local02, fp
2a1ec     14 2B 02 F6 | 	mov	local03, local02
2a1f0     01 2A 06 F1 | 	add	local03, #1
2a1f4     A7 2A 62 FC | 	wrlong	local03, fp
2a1f8     90 4E 85 F1 | 	sub	fp, #144
2a1fc     A7 2C 02 FB | 	rdlong	local04, fp
2a200     14 2D 42 FC | 	wrbyte	local04, local02
2a204     90 4E 05 F1 | 	add	fp, #144
2a208     A7 28 02 FB | 	rdlong	local02, fp
2a20c     14 2B 02 F6 | 	mov	local03, local02
2a210     01 2A 06 F1 | 	add	local03, #1
2a214     A7 2A 62 FC | 	wrlong	local03, fp
2a218     60 4E 85 F1 | 	sub	fp, #96
2a21c     A7 2C 02 FB | 	rdlong	local04, fp
2a220     14 2D 42 FC | 	wrbyte	local04, local02
2a224     48 4E 85 F1 | 	sub	fp, #72
2a228     A7 00 68 FC | 	wrlong	#0, fp
2a22c     18 4E 85 F1 | 	sub	fp, #24
2a230                 | LR__3568
2a230     18 4E 05 F1 | 	add	fp, #24
2a234     A7 28 02 FB | 	rdlong	local02, fp
2a238     44 4E 05 F1 | 	add	fp, #68
2a23c     A7 2E 02 FB | 	rdlong	local05, fp
2a240     5C 4E 85 F1 | 	sub	fp, #92
2a244     17 29 52 F2 | 	cmps	local02, local05 wc
2a248     4C 00 90 3D |  if_ae	jmp	#LR__3569
2a24c     C0 4E 05 F1 | 	add	fp, #192
2a250     A7 34 02 FB | 	rdlong	local08, fp
2a254     1A 3D 02 F6 | 	mov	local12, local08
2a258     01 3C 06 F1 | 	add	local12, #1
2a25c     A7 3C 62 FC | 	wrlong	local12, fp
2a260     A8 4E 85 F1 | 	sub	fp, #168
2a264     A7 32 02 FB | 	rdlong	local07, fp
2a268     19 37 02 F6 | 	mov	local09, local07
2a26c     98 4E 05 F1 | 	add	fp, #152
2a270     A7 38 02 F6 | 	mov	local10, fp
2a274     A7 36 02 F1 | 	add	local09, fp
2a278     1B 3B C2 FA | 	rdbyte	local11, local09
2a27c     1A 3B 42 FC | 	wrbyte	local11, local08
2a280     98 4E 85 F1 | 	sub	fp, #152
2a284     A7 3C 02 FB | 	rdlong	local12, fp
2a288     01 3C 06 F1 | 	add	local12, #1
2a28c     A7 3C 62 FC | 	wrlong	local12, fp
2a290     18 4E 85 F1 | 	sub	fp, #24
2a294     98 FF 9F FD | 	jmp	#LR__3568
2a298                 | LR__3569
2a298                 | LR__3570
2a298     C0 4E 05 F1 | 	add	fp, #192
2a29c     A7 26 02 FB | 	rdlong	local01, fp
2a2a0     C0 4E 85 F1 | 	sub	fp, #192
2a2a4     13 01 48 FC | 	wrbyte	#0, local01
2a2a8                 | LR__3571
2a2a8     6C 4E 05 F1 | 	add	fp, #108
2a2ac     A7 26 0A FB | 	rdlong	local01, fp wz
2a2b0     6C 4E 85 F1 | 	sub	fp, #108
2a2b4     90 01 90 AD |  if_e	jmp	#LR__3582
2a2b8     48 4E 05 F1 | 	add	fp, #72
2a2bc     A7 2A 0A FB | 	rdlong	local03, fp wz
2a2c0     48 4E 85 F1 | 	sub	fp, #72
2a2c4     80 01 90 AD |  if_e	jmp	#LR__3582
2a2c8     C4 4E 05 F1 | 	add	fp, #196
2a2cc     A7 12 02 FB | 	rdlong	arg01, fp
2a2d0     C4 4E 85 F1 | 	sub	fp, #196
2a2d4     09 45 02 F6 | 	mov	local16, arg01
2a2d8     97 06 48 FB | 	callpa	#(@LR__3573-@LR__3572)>>2,fcache_load_ptr_
2a2dc                 | LR__3572
2a2dc     22 FB C9 FA | 	rdbyte	result1, local16 wz
2a2e0     01 44 06 51 |  if_ne	add	local16, #1
2a2e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3572
2a2e8                 | LR__3573
2a2e8     09 45 82 F1 | 	sub	local16, arg01
2a2ec     22 2D 02 F6 | 	mov	local04, local16
2a2f0     6C 4E 05 F1 | 	add	fp, #108
2a2f4     A7 30 02 FB | 	rdlong	local06, fp
2a2f8     6C 4E 85 F1 | 	sub	fp, #108
2a2fc     18 2D 5A F2 | 	cmps	local04, local06 wcz
2a300     44 01 90 ED |  if_be	jmp	#LR__3582
2a304     C4 4E 05 F1 | 	add	fp, #196
2a308     A7 26 02 FB | 	rdlong	local01, fp
2a30c     5C 4E 05 F1 | 	add	fp, #92
2a310     A7 26 62 FC | 	wrlong	local01, fp
2a314     FC 4E 85 F1 | 	sub	fp, #252
2a318     A7 26 0A FB | 	rdlong	local01, fp wz
2a31c     24 4E 85 F1 | 	sub	fp, #36
2a320     20 00 90 AD |  if_e	jmp	#LR__3574
2a324     B8 4E 05 F1 | 	add	fp, #184
2a328     A7 00 68 FC | 	wrlong	#0, fp
2a32c     4C 4E 85 F1 | 	sub	fp, #76
2a330     A7 26 02 FB | 	rdlong	local01, fp
2a334     B0 4E 05 F1 | 	add	fp, #176
2a338     A7 26 62 FC | 	wrlong	local01, fp
2a33c     1C 4F 85 F1 | 	sub	fp, #284
2a340     24 00 90 FD | 	jmp	#LR__3575
2a344                 | LR__3574
2a344     6C 4E 05 F1 | 	add	fp, #108
2a348     A7 26 02 FB | 	rdlong	local01, fp
2a34c     01 26 86 F1 | 	sub	local01, #1
2a350     4C 4E 05 F1 | 	add	fp, #76
2a354     A7 2A 02 FB | 	rdlong	local03, fp
2a358     15 27 82 F1 | 	sub	local01, local03
2a35c     64 4E 05 F1 | 	add	fp, #100
2a360     A7 26 62 FC | 	wrlong	local01, fp
2a364     1C 4F 85 F1 | 	sub	fp, #284
2a368                 | LR__3575
2a368     97 20 48 FB | 	callpa	#(@LR__3577-@LR__3576)>>2,fcache_load_ptr_
2a36c                 | LR__3576
2a36c     1C 4F 05 F1 | 	add	fp, #284
2a370     A7 26 0A FB | 	rdlong	local01, fp wz
2a374     1C 4F 85 F1 | 	sub	fp, #284
2a378     30 00 90 AD |  if_e	jmp	#LR__3578
2a37c     20 4F 05 F1 | 	add	fp, #288
2a380     A7 28 02 FB | 	rdlong	local02, fp
2a384     14 2B 02 F6 | 	mov	local03, local02
2a388     01 2A 06 F1 | 	add	local03, #1
2a38c     A7 2A 62 FC | 	wrlong	local03, fp
2a390     14 55 48 FC | 	wrbyte	#42, local02
2a394     04 4E 85 F1 | 	sub	fp, #4
2a398     A7 26 02 FB | 	rdlong	local01, fp
2a39c     01 26 86 F1 | 	sub	local01, #1
2a3a0     A7 26 62 FC | 	wrlong	local01, fp
2a3a4     1C 4F 85 F1 | 	sub	fp, #284
2a3a8     C0 FF 9F FD | 	jmp	#LR__3576
2a3ac                 | LR__3577
2a3ac                 | LR__3578
2a3ac     B8 4E 05 F1 | 	add	fp, #184
2a3b0     A7 26 0A FB | 	rdlong	local01, fp wz
2a3b4     B8 4E 85 F1 | 	sub	fp, #184
2a3b8     70 00 90 AD |  if_e	jmp	#LR__3581
2a3bc     20 4F 05 F1 | 	add	fp, #288
2a3c0     A7 28 02 FB | 	rdlong	local02, fp
2a3c4     14 2B 02 F6 | 	mov	local03, local02
2a3c8     01 2A 06 F1 | 	add	local03, #1
2a3cc     A7 2A 62 FC | 	wrlong	local03, fp
2a3d0     14 5D 48 FC | 	wrbyte	#46, local02
2a3d4     04 4E 85 F1 | 	sub	fp, #4
2a3d8     A7 00 68 FC | 	wrlong	#0, fp
2a3dc     1C 4F 85 F1 | 	sub	fp, #284
2a3e0                 | LR__3579
2a3e0     1C 4F 05 F1 | 	add	fp, #284
2a3e4     A7 28 02 FB | 	rdlong	local02, fp
2a3e8     64 4E 85 F1 | 	sub	fp, #100
2a3ec     A7 2E 02 FB | 	rdlong	local05, fp
2a3f0     B8 4E 85 F1 | 	sub	fp, #184
2a3f4     17 29 52 F2 | 	cmps	local02, local05 wc
2a3f8     30 00 90 3D |  if_ae	jmp	#LR__3580
2a3fc     20 4F 05 F1 | 	add	fp, #288
2a400     A7 34 02 FB | 	rdlong	local08, fp
2a404     1A 3D 02 F6 | 	mov	local12, local08
2a408     01 3C 06 F1 | 	add	local12, #1
2a40c     A7 3C 62 FC | 	wrlong	local12, fp
2a410     1A 55 48 FC | 	wrbyte	#42, local08
2a414     04 4E 85 F1 | 	sub	fp, #4
2a418     A7 3C 02 FB | 	rdlong	local12, fp
2a41c     01 3C 06 F1 | 	add	local12, #1
2a420     A7 3C 62 FC | 	wrlong	local12, fp
2a424     1C 4F 85 F1 | 	sub	fp, #284
2a428     B4 FF 9F FD | 	jmp	#LR__3579
2a42c                 | LR__3580
2a42c                 | LR__3581
2a42c     20 4F 05 F1 | 	add	fp, #288
2a430     A7 28 02 FB | 	rdlong	local02, fp
2a434     14 2B 02 F6 | 	mov	local03, local02
2a438     01 2A 06 F1 | 	add	local03, #1
2a43c     A7 2A 62 FC | 	wrlong	local03, fp
2a440     20 4F 85 F1 | 	sub	fp, #288
2a444     14 01 48 FC | 	wrbyte	#0, local02
2a448                 | LR__3582
2a448     04 4E 05 F1 | 	add	fp, #4
2a44c     A7 12 02 FB | 	rdlong	arg01, fp
2a450     04 4E 05 F1 | 	add	fp, #4
2a454     A7 14 02 FB | 	rdlong	arg02, fp
2a458     BC 4E 05 F1 | 	add	fp, #188
2a45c     A7 16 02 FB | 	rdlong	arg03, fp
2a460     C4 4E 85 F1 | 	sub	fp, #196
2a464     C4 EE BF FD | 	call	#__system___fmtstr
2a468                 | LR__3583
2a468     A7 F0 03 F6 | 	mov	ptra, fp
2a46c     B2 00 A0 FD | 	call	#popregs_
2a470                 | __system___fmtfloat_ret
2a470     2D 00 64 FD | 	ret
2a474                 | 
2a474                 | __system__Left_S
2a474     04 4A 05 F6 | 	mov	COUNT_, #4
2a478     A8 00 A0 FD | 	call	#pushregs_
2a47c     09 27 02 F6 | 	mov	local01, arg01
2a480     0A 29 02 F6 | 	mov	local02, arg02
2a484     01 28 56 F2 | 	cmps	local02, #1 wc
2a488     BF 01 00 CF 
2a48c     1A FB 05 C6 |  if_b	mov	result1, ##@LR__5543
2a490     5C 00 90 CD |  if_b	jmp	#LR__3593
2a494     13 13 02 F6 | 	mov	arg01, local01
2a498     09 2B 02 F6 | 	mov	local03, arg01
2a49c     97 06 48 FB | 	callpa	#(@LR__3591-@LR__3590)>>2,fcache_load_ptr_
2a4a0                 | LR__3590
2a4a0     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a4a4     01 2A 06 51 |  if_ne	add	local03, #1
2a4a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3590
2a4ac                 | LR__3591
2a4ac     09 2B 82 F1 | 	sub	local03, arg01
2a4b0     15 FB 01 F6 | 	mov	result1, local03
2a4b4     14 FB 59 F2 | 	cmps	result1, local02 wcz
2a4b8     13 FB 01 E6 |  if_be	mov	result1, local01
2a4bc     30 00 90 ED |  if_be	jmp	#LR__3593
2a4c0     14 13 02 F6 | 	mov	arg01, local02
2a4c4     02 12 06 F1 | 	add	arg01, #2
2a4c8     D0 20 B0 FD | 	call	#__system___gc_alloc_managed
2a4cc     FD 2C 0A F6 | 	mov	local04, result1 wz
2a4d0     18 00 90 AD |  if_e	jmp	#LR__3592
2a4d4     16 13 02 F6 | 	mov	arg01, local04
2a4d8     13 15 02 F6 | 	mov	arg02, local01
2a4dc     14 17 02 F6 | 	mov	arg03, local02
2a4e0     C0 DD BF FD | 	call	#__system____builtin_memmove
2a4e4     16 29 02 F1 | 	add	local02, local04
2a4e8     14 01 48 FC | 	wrbyte	#0, local02
2a4ec                 | LR__3592
2a4ec     16 FB 01 F6 | 	mov	result1, local04
2a4f0                 | LR__3593
2a4f0     A7 F0 03 F6 | 	mov	ptra, fp
2a4f4     B2 00 A0 FD | 	call	#popregs_
2a4f8                 | __system__Left_S_ret
2a4f8     2D 00 64 FD | 	ret
2a4fc                 | 
2a4fc                 | __system__Right_S
2a4fc     05 4A 05 F6 | 	mov	COUNT_, #5
2a500     A8 00 A0 FD | 	call	#pushregs_
2a504     09 27 02 F6 | 	mov	local01, arg01
2a508     0A 29 02 F6 | 	mov	local02, arg02
2a50c     01 28 56 F2 | 	cmps	local02, #1 wc
2a510     BF 01 00 CF 
2a514     1B FB 05 C6 |  if_b	mov	result1, ##@LR__5544
2a518     64 00 90 CD |  if_b	jmp	#LR__3603
2a51c     13 13 02 F6 | 	mov	arg01, local01
2a520     09 2B 02 F6 | 	mov	local03, arg01
2a524     97 06 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
2a528                 | LR__3600
2a528     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a52c     01 2A 06 51 |  if_ne	add	local03, #1
2a530     F4 FF 9F 5D |  if_ne	jmp	#LR__3600
2a534                 | LR__3601
2a534     09 2B 82 F1 | 	sub	local03, arg01
2a538     15 FB 01 F6 | 	mov	result1, local03
2a53c     FD 2C 02 F6 | 	mov	local04, result1
2a540     14 2D 5A F2 | 	cmps	local04, local02 wcz
2a544     13 FB 01 E6 |  if_be	mov	result1, local01
2a548     34 00 90 ED |  if_be	jmp	#LR__3603
2a54c     14 13 02 F6 | 	mov	arg01, local02
2a550     02 12 06 F1 | 	add	arg01, #2
2a554     44 20 B0 FD | 	call	#__system___gc_alloc_managed
2a558     FD 2E 0A F6 | 	mov	local05, result1 wz
2a55c     1C 00 90 AD |  if_e	jmp	#LR__3602
2a560     14 2D 82 F1 | 	sub	local04, local02
2a564     13 2D 02 F1 | 	add	local04, local01
2a568     01 28 06 F1 | 	add	local02, #1
2a56c     17 13 02 F6 | 	mov	arg01, local05
2a570     16 15 02 F6 | 	mov	arg02, local04
2a574     14 17 02 F6 | 	mov	arg03, local02
2a578     28 DD BF FD | 	call	#__system____builtin_memmove
2a57c                 | LR__3602
2a57c     17 FB 01 F6 | 	mov	result1, local05
2a580                 | LR__3603
2a580     A7 F0 03 F6 | 	mov	ptra, fp
2a584     B2 00 A0 FD | 	call	#popregs_
2a588                 | __system__Right_S_ret
2a588     2D 00 64 FD | 	ret
2a58c                 | 
2a58c                 | __system__Mid_S
2a58c     05 4A 05 F6 | 	mov	COUNT_, #5
2a590     A8 00 A0 FD | 	call	#pushregs_
2a594     09 27 02 F6 | 	mov	local01, arg01
2a598     0A 29 02 F6 | 	mov	local02, arg02
2a59c     01 16 56 F2 | 	cmps	arg03, #1 wc
2a5a0     BF 01 00 CF 
2a5a4     1C FB 05 C6 |  if_b	mov	result1, ##@LR__5545
2a5a8     80 00 90 CD |  if_b	jmp	#LR__3613
2a5ac     01 28 86 F1 | 	sub	local02, #1
2a5b0     00 28 56 F3 | 	fges	local02, #0 wc
2a5b4     13 13 02 F6 | 	mov	arg01, local01
2a5b8     09 2B 02 F6 | 	mov	local03, arg01
2a5bc     97 06 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
2a5c0                 | LR__3610
2a5c0     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a5c4     01 2A 06 51 |  if_ne	add	local03, #1
2a5c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3610
2a5cc                 | LR__3611
2a5cc     09 2B 82 F1 | 	sub	local03, arg01
2a5d0     15 FB 01 F6 | 	mov	result1, local03
2a5d4     FD 14 02 F6 | 	mov	arg02, result1
2a5d8     14 15 52 F2 | 	cmps	arg02, local02 wc
2a5dc     BF 01 00 CF 
2a5e0     1D FB 05 C6 |  if_b	mov	result1, ##@LR__5546
2a5e4     44 00 90 CD |  if_b	jmp	#LR__3613
2a5e8     0A 2D 02 F6 | 	mov	local04, arg02
2a5ec     14 2D 82 F1 | 	sub	local04, local02
2a5f0     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2a5f4     0B 2D 02 16 |  if_a	mov	local04, arg03
2a5f8     16 13 02 F6 | 	mov	arg01, local04
2a5fc     02 12 06 F1 | 	add	arg01, #2
2a600     98 1F B0 FD | 	call	#__system___gc_alloc_managed
2a604     FD 2E 0A F6 | 	mov	local05, result1 wz
2a608     1C 00 90 AD |  if_e	jmp	#LR__3612
2a60c     13 29 02 F1 | 	add	local02, local01
2a610     17 13 02 F6 | 	mov	arg01, local05
2a614     14 15 02 F6 | 	mov	arg02, local02
2a618     16 17 02 F6 | 	mov	arg03, local04
2a61c     84 DC BF FD | 	call	#__system____builtin_memmove
2a620     17 2D 02 F1 | 	add	local04, local05
2a624     16 01 48 FC | 	wrbyte	#0, local04
2a628                 | LR__3612
2a628     17 FB 01 F6 | 	mov	result1, local05
2a62c                 | LR__3613
2a62c     A7 F0 03 F6 | 	mov	ptra, fp
2a630     B2 00 A0 FD | 	call	#popregs_
2a634                 | __system__Mid_S_ret
2a634     2D 00 64 FD | 	ret
2a638                 | 
2a638                 | __system__Chr_S
2a638     01 4A 05 F6 | 	mov	COUNT_, #1
2a63c     A8 00 A0 FD | 	call	#pushregs_
2a640     09 27 02 F6 | 	mov	local01, arg01
2a644     03 12 06 F6 | 	mov	arg01, #3
2a648     50 1F B0 FD | 	call	#__system___gc_alloc_managed
2a64c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a650     FD 26 42 5C |  if_ne	wrbyte	local01, result1
2a654     01 FA 05 51 |  if_ne	add	result1, #1
2a658     FD 00 48 5C |  if_ne	wrbyte	#0, result1
2a65c     01 FA 85 51 |  if_ne	sub	result1, #1
2a660     A7 F0 03 F6 | 	mov	ptra, fp
2a664     B2 00 A0 FD | 	call	#popregs_
2a668                 | __system__Chr_S_ret
2a668     2D 00 64 FD | 	ret
2a66c                 | 
2a66c                 | __system__str_S
2a66c     02 4A 05 F6 | 	mov	COUNT_, #2
2a670     A8 00 A0 FD | 	call	#pushregs_
2a674     09 27 02 F6 | 	mov	local01, arg01
2a678     10 12 06 F6 | 	mov	arg01, #16
2a67c     1C 1F B0 FD | 	call	#__system___gc_alloc_managed
2a680     FD 28 0A F6 | 	mov	local02, result1 wz
2a684     30 00 90 AD |  if_e	jmp	#LR__3620
2a688     F8 13 02 F6 | 	mov	arg01, ptra
2a68c     08 F0 07 F1 | 	add	ptra, #8
2a690     09 29 62 FC | 	wrlong	local02, arg01
2a694     04 12 06 F1 | 	add	arg01, #4
2a698     09 01 68 FC | 	wrlong	#0, arg01
2a69c     04 12 86 F1 | 	sub	arg01, #4
2a6a0     00 98 05 FF 
2a6a4     00 12 46 F5 | 	or	arg01, ##187695104
2a6a8     00 14 06 F6 | 	mov	arg02, #0
2a6ac     13 17 02 F6 | 	mov	arg03, local01
2a6b0     67 18 06 F6 | 	mov	arg04, #103
2a6b4     90 EE BF FD | 	call	#__system___fmtfloat
2a6b8                 | LR__3620
2a6b8     14 FB 01 F6 | 	mov	result1, local02
2a6bc     A7 F0 03 F6 | 	mov	ptra, fp
2a6c0     B2 00 A0 FD | 	call	#popregs_
2a6c4                 | __system__str_S_ret
2a6c4     2D 00 64 FD | 	ret
2a6c8                 | 
2a6c8                 | __system__Number_S
2a6c8     08 4A 05 F6 | 	mov	COUNT_, #8
2a6cc     A8 00 A0 FD | 	call	#pushregs_
2a6d0     09 27 02 F6 | 	mov	local01, arg01
2a6d4     0A 29 0A F6 | 	mov	local02, arg02 wz
2a6d8     0B 2B 02 F6 | 	mov	local03, arg03
2a6dc     3C 00 90 5D |  if_ne	jmp	#LR__3632
2a6e0     01 28 06 F6 | 	mov	local02, #1
2a6e4     15 2D 02 F6 | 	mov	local04, local03
2a6e8     01 2E 06 F6 | 	mov	local05, #1
2a6ec     97 16 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
2a6f0                 | LR__3630
2a6f0     00 30 06 F6 | 	mov	local06, #0
2a6f4     13 2D 1A F2 | 	cmp	local04, local01 wcz
2a6f8     01 30 66 E6 |  if_be	neg	local06, #1
2a6fc     16 2F 12 F2 | 	cmp	local05, local04 wc
2a700     19 33 A2 F1 | 	subx	local07, local07
2a704     19 31 CA F7 | 	test	local06, local07 wz
2a708     15 2D 02 5D |  if_ne	qmul	local04, local03
2a70c     16 2F 02 56 |  if_ne	mov	local05, local04
2a710     01 28 06 51 |  if_ne	add	local02, #1
2a714     18 2C 62 5D |  if_ne	getqx	local04
2a718     D4 FF 9F 5D |  if_ne	jmp	#LR__3630
2a71c                 | LR__3631
2a71c                 | LR__3632
2a71c     20 28 36 F3 | 	fle	local02, #32 wc
2a720     14 13 02 F6 | 	mov	arg01, local02
2a724     02 12 06 F1 | 	add	arg01, #2
2a728     70 1E B0 FD | 	call	#__system___gc_alloc_managed
2a72c     FD 30 02 F6 | 	mov	local06, result1
2a730     14 33 02 F6 | 	mov	local07, local02
2a734     18 33 02 F1 | 	add	local07, local06
2a738     19 01 48 FC | 	wrbyte	#0, local07
2a73c     97 1A 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
2a740                 | LR__3633
2a740     01 28 16 F2 | 	cmp	local02, #1 wc
2a744     2C 00 90 CD |  if_b	jmp	#LR__3635
2a748     15 27 12 FD | 	qdiv	local01, local03
2a74c     01 28 86 F1 | 	sub	local02, #1
2a750     14 33 02 F6 | 	mov	local07, local02
2a754     18 33 02 F1 | 	add	local07, local06
2a758     19 34 62 FD | 	getqy	local08
2a75c     0A 34 16 F2 | 	cmp	local08, #10 wc
2a760     30 34 06 C1 |  if_b	add	local08, #48
2a764     37 34 06 31 |  if_ae	add	local08, #55
2a768     19 35 42 FC | 	wrbyte	local08, local07
2a76c     18 26 62 FD | 	getqx	local01
2a770     CC FF 9F FD | 	jmp	#LR__3633
2a774                 | LR__3634
2a774                 | LR__3635
2a774     18 FB 01 F6 | 	mov	result1, local06
2a778     A7 F0 03 F6 | 	mov	ptra, fp
2a77c     B2 00 A0 FD | 	call	#popregs_
2a780                 | __system__Number_S_ret
2a780     2D 00 64 FD | 	ret
2a784                 | 
2a784                 | __system__LCase_S
2a784     07 4A 05 F6 | 	mov	COUNT_, #7
2a788     A8 00 A0 FD | 	call	#pushregs_
2a78c     09 27 02 F6 | 	mov	local01, arg01
2a790     09 29 02 F6 | 	mov	local02, arg01
2a794     97 06 48 FB | 	callpa	#(@LR__3641-@LR__3640)>>2,fcache_load_ptr_
2a798                 | LR__3640
2a798     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a79c     01 28 06 51 |  if_ne	add	local02, #1
2a7a0     F4 FF 9F 5D |  if_ne	jmp	#LR__3640
2a7a4                 | LR__3641
2a7a4     09 29 82 F1 | 	sub	local02, arg01
2a7a8     14 FB 01 F6 | 	mov	result1, local02
2a7ac     FD 28 0A F6 | 	mov	local02, result1 wz
2a7b0     BF 01 00 AF 
2a7b4     1E FB 05 A6 |  if_e	mov	result1, ##@LR__5547
2a7b8     7C 00 90 AD |  if_e	jmp	#LR__3647
2a7bc     14 13 02 F6 | 	mov	arg01, local02
2a7c0     02 12 06 F1 | 	add	arg01, #2
2a7c4     D4 1D B0 FD | 	call	#__system___gc_alloc_managed
2a7c8     FD 2A 0A F6 | 	mov	local03, result1 wz
2a7cc     64 00 90 AD |  if_e	jmp	#LR__3646
2a7d0     01 2C 66 F6 | 	neg	local04, #1
2a7d4     97 26 48 FB | 	callpa	#(@LR__3645-@LR__3642)>>2,fcache_load_ptr_
2a7d8                 | LR__3642
2a7d8     01 2C 06 F1 | 	add	local04, #1
2a7dc     16 2F 02 F6 | 	mov	local05, local04
2a7e0     13 2F 02 F1 | 	add	local05, local01
2a7e4     17 31 C2 FA | 	rdbyte	local06, local05
2a7e8     41 30 56 F2 | 	cmps	local06, #65 wc
2a7ec     18 00 90 CD |  if_b	jmp	#LR__3643
2a7f0     5B 30 56 F2 | 	cmps	local06, #91 wc
2a7f4     16 33 02 C6 |  if_b	mov	local07, local04
2a7f8     15 33 02 C1 |  if_b	add	local07, local03
2a7fc     20 30 06 C1 |  if_b	add	local06, #32
2a800     19 31 42 CC |  if_b	wrbyte	local06, local07
2a804     0C 00 90 CD |  if_b	jmp	#LR__3644
2a808                 | LR__3643
2a808     16 33 02 F6 | 	mov	local07, local04
2a80c     15 33 02 F1 | 	add	local07, local03
2a810     19 31 42 FC | 	wrbyte	local06, local07
2a814                 | LR__3644
2a814     14 31 02 F6 | 	mov	local06, local02
2a818     01 30 86 F1 | 	sub	local06, #1
2a81c     18 2D 0A F2 | 	cmp	local04, local06 wz
2a820     B4 FF 9F 5D |  if_ne	jmp	#LR__3642
2a824                 | LR__3645
2a824     15 29 02 F1 | 	add	local02, local03
2a828     14 01 48 FC | 	wrbyte	#0, local02
2a82c     15 FB 01 F6 | 	mov	result1, local03
2a830     04 00 90 FD | 	jmp	#LR__3647
2a834                 | LR__3646
2a834     15 FB 01 F6 | 	mov	result1, local03
2a838                 | LR__3647
2a838     A7 F0 03 F6 | 	mov	ptra, fp
2a83c     B2 00 A0 FD | 	call	#popregs_
2a840                 | __system__LCase_S_ret
2a840     2D 00 64 FD | 	ret
2a844                 | 
2a844                 | __system__LTrim_S
2a844     05 4A 05 F6 | 	mov	COUNT_, #5
2a848     A8 00 A0 FD | 	call	#pushregs_
2a84c     09 27 02 F6 | 	mov	local01, arg01
2a850     09 29 02 F6 | 	mov	local02, arg01
2a854     97 06 48 FB | 	callpa	#(@LR__3651-@LR__3650)>>2,fcache_load_ptr_
2a858                 | LR__3650
2a858     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a85c     01 28 06 51 |  if_ne	add	local02, #1
2a860     F4 FF 9F 5D |  if_ne	jmp	#LR__3650
2a864                 | LR__3651
2a864     09 29 82 F1 | 	sub	local02, arg01
2a868     14 FB 01 F6 | 	mov	result1, local02
2a86c     FD 28 0A F6 | 	mov	local02, result1 wz
2a870     BF 01 00 AF 
2a874     1F FB 05 A6 |  if_e	mov	result1, ##@LR__5548
2a878     7C 00 90 AD |  if_e	jmp	#LR__3656
2a87c     00 2A 06 F6 | 	mov	local03, #0
2a880     14 2D 02 F6 | 	mov	local04, local02
2a884                 | LR__3652
2a884     16 2B 52 F2 | 	cmps	local03, local04 wc
2a888     68 00 90 3D |  if_ae	jmp	#LR__3655
2a88c     15 17 02 F6 | 	mov	arg03, local03
2a890     13 17 02 F1 | 	add	arg03, local01
2a894     0B 17 C2 FA | 	rdbyte	arg03, arg03
2a898     20 16 0E F2 | 	cmp	arg03, #32 wz
2a89c     4C 00 90 AD |  if_e	jmp	#LR__3654
2a8a0     14 13 02 F6 | 	mov	arg01, local02
2a8a4     15 13 82 F1 | 	sub	arg01, local03
2a8a8     02 12 06 F1 | 	add	arg01, #2
2a8ac     EC 1C B0 FD | 	call	#__system___gc_alloc_managed
2a8b0     FD 2E 0A F6 | 	mov	local05, result1 wz
2a8b4     2C 00 90 AD |  if_e	jmp	#LR__3653
2a8b8     15 15 02 F6 | 	mov	arg02, local03
2a8bc     13 15 02 F1 | 	add	arg02, local01
2a8c0     14 17 02 F6 | 	mov	arg03, local02
2a8c4     15 17 82 F1 | 	sub	arg03, local03
2a8c8     17 13 02 F6 | 	mov	arg01, local05
2a8cc     D4 D9 BF FD | 	call	#__system____builtin_memmove
2a8d0     15 29 82 F1 | 	sub	local02, local03
2a8d4     17 29 02 F1 | 	add	local02, local05
2a8d8     14 01 48 FC | 	wrbyte	#0, local02
2a8dc     17 FB 01 F6 | 	mov	result1, local05
2a8e0     14 00 90 FD | 	jmp	#LR__3656
2a8e4                 | LR__3653
2a8e4     17 FB 01 F6 | 	mov	result1, local05
2a8e8     0C 00 90 FD | 	jmp	#LR__3656
2a8ec                 | LR__3654
2a8ec     01 2A 06 F1 | 	add	local03, #1
2a8f0     90 FF 9F FD | 	jmp	#LR__3652
2a8f4                 | LR__3655
2a8f4     13 FB 01 F6 | 	mov	result1, local01
2a8f8                 | LR__3656
2a8f8     A7 F0 03 F6 | 	mov	ptra, fp
2a8fc     B2 00 A0 FD | 	call	#popregs_
2a900                 | __system__LTrim_S_ret
2a900     2D 00 64 FD | 	ret
2a904                 | 
2a904                 | __system__RTrim_S
2a904     04 4A 05 F6 | 	mov	COUNT_, #4
2a908     A8 00 A0 FD | 	call	#pushregs_
2a90c     09 27 02 F6 | 	mov	local01, arg01
2a910     09 29 02 F6 | 	mov	local02, arg01
2a914     97 06 48 FB | 	callpa	#(@LR__3661-@LR__3660)>>2,fcache_load_ptr_
2a918                 | LR__3660
2a918     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a91c     01 28 06 51 |  if_ne	add	local02, #1
2a920     F4 FF 9F 5D |  if_ne	jmp	#LR__3660
2a924                 | LR__3661
2a924     09 29 82 F1 | 	sub	local02, arg01
2a928     14 FB 01 F6 | 	mov	result1, local02
2a92c     FD 28 0A F6 | 	mov	local02, result1 wz
2a930     BF 01 00 AF 
2a934     20 FB 05 A6 |  if_e	mov	result1, ##@LR__5549
2a938     74 00 90 AD |  if_e	jmp	#LR__3665
2a93c     14 2B 02 F6 | 	mov	local03, local02
2a940     01 2A 86 F1 | 	sub	local03, #1
2a944                 | LR__3662
2a944     15 15 02 F6 | 	mov	arg02, local03
2a948     13 15 02 F1 | 	add	arg02, local01
2a94c     0A 29 C2 FA | 	rdbyte	local02, arg02
2a950     20 28 0E F2 | 	cmp	local02, #32 wz
2a954     44 00 90 AD |  if_e	jmp	#LR__3664
2a958     15 13 02 F6 | 	mov	arg01, local03
2a95c     02 12 06 F1 | 	add	arg01, #2
2a960     38 1C B0 FD | 	call	#__system___gc_alloc_managed
2a964     FD 2C 0A F6 | 	mov	local04, result1 wz
2a968     28 00 90 AD |  if_e	jmp	#LR__3663
2a96c     15 17 02 F6 | 	mov	arg03, local03
2a970     01 16 06 F1 | 	add	arg03, #1
2a974     16 13 02 F6 | 	mov	arg01, local04
2a978     13 15 02 F6 | 	mov	arg02, local01
2a97c     24 D9 BF FD | 	call	#__system____builtin_memmove
2a980     01 2A 06 F1 | 	add	local03, #1
2a984     16 2B 02 F1 | 	add	local03, local04
2a988     15 01 48 FC | 	wrbyte	#0, local03
2a98c     16 FB 01 F6 | 	mov	result1, local04
2a990     1C 00 90 FD | 	jmp	#LR__3665
2a994                 | LR__3663
2a994     16 FB 01 F6 | 	mov	result1, local04
2a998     14 00 90 FD | 	jmp	#LR__3665
2a99c                 | LR__3664
2a99c     01 2A 86 F1 | 	sub	local03, #1
2a9a0     00 2A 56 F2 | 	cmps	local03, #0 wc
2a9a4     9C FF 9F 3D |  if_ae	jmp	#LR__3662
2a9a8     BF 01 00 FF 
2a9ac     21 FB 05 F6 | 	mov	result1, ##@LR__5550
2a9b0                 | LR__3665
2a9b0     A7 F0 03 F6 | 	mov	ptra, fp
2a9b4     B2 00 A0 FD | 	call	#popregs_
2a9b8                 | __system__RTrim_S_ret
2a9b8     2D 00 64 FD | 	ret
2a9bc                 | 
2a9bc                 | __system__Instr
2a9bc     07 4A 05 F6 | 	mov	COUNT_, #7
2a9c0     A8 00 A0 FD | 	call	#pushregs_
2a9c4     09 27 02 F6 | 	mov	local01, arg01
2a9c8     0A 29 02 F6 | 	mov	local02, arg02
2a9cc     0B 2B 02 F6 | 	mov	local03, arg03
2a9d0     15 13 02 F6 | 	mov	arg01, local03
2a9d4     09 2D 02 F6 | 	mov	local04, arg01
2a9d8     97 06 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
2a9dc                 | LR__3670
2a9dc     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a9e0     01 2C 06 51 |  if_ne	add	local04, #1
2a9e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3670
2a9e8                 | LR__3671
2a9e8     09 2D 82 F1 | 	sub	local04, arg01
2a9ec     16 2F 02 F6 | 	mov	local05, local04
2a9f0     14 13 02 F6 | 	mov	arg01, local02
2a9f4     09 2D 02 F6 | 	mov	local04, arg01
2a9f8     97 06 48 FB | 	callpa	#(@LR__3673-@LR__3672)>>2,fcache_load_ptr_
2a9fc                 | LR__3672
2a9fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
2aa00     01 2C 06 51 |  if_ne	add	local04, #1
2aa04     F4 FF 9F 5D |  if_ne	jmp	#LR__3672
2aa08                 | LR__3673
2aa08     09 2D 82 F1 | 	sub	local04, arg01
2aa0c     16 FB 01 F6 | 	mov	result1, local04
2aa10     FD 18 0A F6 | 	mov	arg04, result1 wz
2aa14     00 FA 05 A6 |  if_e	mov	result1, #0
2aa18     98 00 90 AD |  if_e	jmp	#LR__3677
2aa1c     00 2E 0E F2 | 	cmp	local05, #0 wz
2aa20     00 FA 05 A6 |  if_e	mov	result1, #0
2aa24     8C 00 90 AD |  if_e	jmp	#LR__3677
2aa28     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2aa2c     00 FA 05 16 |  if_a	mov	result1, #0
2aa30     80 00 90 1D |  if_a	jmp	#LR__3677
2aa34     01 26 56 F2 | 	cmps	local01, #1 wc
2aa38     01 26 06 C6 |  if_b	mov	local01, #1
2aa3c     15 31 C2 FA | 	rdbyte	local06, local03
2aa40     01 2E 0E F2 | 	cmp	local05, #1 wz
2aa44     18 00 90 5D |  if_ne	jmp	#LR__3674
2aa48     14 13 02 F6 | 	mov	arg01, local02
2aa4c     18 15 02 F6 | 	mov	arg02, local06
2aa50     13 17 02 F6 | 	mov	arg03, local01
2aa54     00 18 06 F6 | 	mov	arg04, #0
2aa58     20 37 B0 FD | 	call	#__system____ScanForChar
2aa5c     54 00 90 FD | 	jmp	#LR__3677
2aa60                 | LR__3674
2aa60     13 33 02 F6 | 	mov	local07, local01
2aa64                 | LR__3675
2aa64     14 13 02 F6 | 	mov	arg01, local02
2aa68     18 15 02 F6 | 	mov	arg02, local06
2aa6c     19 17 02 F6 | 	mov	arg03, local07
2aa70     00 18 06 F6 | 	mov	arg04, #0
2aa74     04 37 B0 FD | 	call	#__system____ScanForChar
2aa78     FD 32 0A F6 | 	mov	local07, result1 wz
2aa7c     30 00 90 AD |  if_e	jmp	#LR__3676
2aa80     17 17 02 F6 | 	mov	arg03, local05
2aa84     14 13 02 F6 | 	mov	arg01, local02
2aa88     19 15 02 F6 | 	mov	arg02, local07
2aa8c     FC FA BF FD | 	call	#__system__Mid_S
2aa90     FD 12 02 F6 | 	mov	arg01, result1
2aa94     15 15 02 F6 | 	mov	arg02, local03
2aa98     80 D9 BF FD | 	call	#__system___string_cmp
2aa9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2aaa0     19 FB 01 A6 |  if_e	mov	result1, local07
2aaa4     0C 00 90 AD |  if_e	jmp	#LR__3677
2aaa8     17 33 02 F1 | 	add	local07, local05
2aaac     B4 FF 9F FD | 	jmp	#LR__3675
2aab0                 | LR__3676
2aab0     00 FA 05 F6 | 	mov	result1, #0
2aab4                 | LR__3677
2aab4     A7 F0 03 F6 | 	mov	ptra, fp
2aab8     B2 00 A0 FD | 	call	#popregs_
2aabc                 | __system__Instr_ret
2aabc     2D 00 64 FD | 	ret
2aac0                 | 
2aac0                 | __system__InstrRev
2aac0     07 4A 05 F6 | 	mov	COUNT_, #7
2aac4     A8 00 A0 FD | 	call	#pushregs_
2aac8     09 27 02 F6 | 	mov	local01, arg01
2aacc     0A 29 02 F6 | 	mov	local02, arg02
2aad0     0B 2B 02 F6 | 	mov	local03, arg03
2aad4     15 13 02 F6 | 	mov	arg01, local03
2aad8     09 2D 02 F6 | 	mov	local04, arg01
2aadc     97 06 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
2aae0                 | LR__3680
2aae0     16 FB C9 FA | 	rdbyte	result1, local04 wz
2aae4     01 2C 06 51 |  if_ne	add	local04, #1
2aae8     F4 FF 9F 5D |  if_ne	jmp	#LR__3680
2aaec                 | LR__3681
2aaec     09 2D 82 F1 | 	sub	local04, arg01
2aaf0     16 2F 02 F6 | 	mov	local05, local04
2aaf4     14 13 02 F6 | 	mov	arg01, local02
2aaf8     09 2D 02 F6 | 	mov	local04, arg01
2aafc     97 06 48 FB | 	callpa	#(@LR__3683-@LR__3682)>>2,fcache_load_ptr_
2ab00                 | LR__3682
2ab00     16 FB C9 FA | 	rdbyte	result1, local04 wz
2ab04     01 2C 06 51 |  if_ne	add	local04, #1
2ab08     F4 FF 9F 5D |  if_ne	jmp	#LR__3682
2ab0c                 | LR__3683
2ab0c     09 2D 82 F1 | 	sub	local04, arg01
2ab10     16 FB 01 F6 | 	mov	result1, local04
2ab14     FD 18 0A F6 | 	mov	arg04, result1 wz
2ab18     00 FA 05 A6 |  if_e	mov	result1, #0
2ab1c     98 00 90 AD |  if_e	jmp	#LR__3687
2ab20     00 2E 0E F2 | 	cmp	local05, #0 wz
2ab24     00 FA 05 A6 |  if_e	mov	result1, #0
2ab28     8C 00 90 AD |  if_e	jmp	#LR__3687
2ab2c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2ab30     0C 27 02 16 |  if_a	mov	local01, arg04
2ab34     01 26 56 F2 | 	cmps	local01, #1 wc
2ab38     01 26 06 C6 |  if_b	mov	local01, #1
2ab3c     15 31 C2 FA | 	rdbyte	local06, local03
2ab40     01 2E 0E F2 | 	cmp	local05, #1 wz
2ab44     18 00 90 5D |  if_ne	jmp	#LR__3684
2ab48     14 13 02 F6 | 	mov	arg01, local02
2ab4c     18 15 02 F6 | 	mov	arg02, local06
2ab50     13 17 02 F6 | 	mov	arg03, local01
2ab54     01 18 06 F6 | 	mov	arg04, #1
2ab58     20 36 B0 FD | 	call	#__system____ScanForChar
2ab5c     58 00 90 FD | 	jmp	#LR__3687
2ab60                 | LR__3684
2ab60     17 33 02 F6 | 	mov	local07, local05
2ab64     01 32 86 F1 | 	sub	local07, #1
2ab68                 | LR__3685
2ab68     14 13 02 F6 | 	mov	arg01, local02
2ab6c     18 15 02 F6 | 	mov	arg02, local06
2ab70     19 17 02 F6 | 	mov	arg03, local07
2ab74     01 18 06 F6 | 	mov	arg04, #1
2ab78     00 36 B0 FD | 	call	#__system____ScanForChar
2ab7c     FD 32 0A F6 | 	mov	local07, result1 wz
2ab80     30 00 90 AD |  if_e	jmp	#LR__3686
2ab84     17 17 02 F6 | 	mov	arg03, local05
2ab88     14 13 02 F6 | 	mov	arg01, local02
2ab8c     19 15 02 F6 | 	mov	arg02, local07
2ab90     F8 F9 BF FD | 	call	#__system__Mid_S
2ab94     FD 12 02 F6 | 	mov	arg01, result1
2ab98     15 15 02 F6 | 	mov	arg02, local03
2ab9c     7C D8 BF FD | 	call	#__system___string_cmp
2aba0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aba4     19 FB 01 A6 |  if_e	mov	result1, local07
2aba8     0C 00 90 AD |  if_e	jmp	#LR__3687
2abac     17 33 82 F1 | 	sub	local07, local05
2abb0     B4 FF 9F FD | 	jmp	#LR__3685
2abb4                 | LR__3686
2abb4     00 FA 05 F6 | 	mov	result1, #0
2abb8                 | LR__3687
2abb8     A7 F0 03 F6 | 	mov	ptra, fp
2abbc     B2 00 A0 FD | 	call	#popregs_
2abc0                 | __system__InstrRev_ret
2abc0     2D 00 64 FD | 	ret
2abc4                 | 
2abc4                 | __system___remove
2abc4     06 4A 05 F6 | 	mov	COUNT_, #6
2abc8     A8 00 A0 FD | 	call	#pushregs_
2abcc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2abd0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2abd4     09 15 02 F6 | 	mov	arg02, arg01
2abd8     13 13 02 F6 | 	mov	arg01, local01
2abdc     00 16 06 F6 | 	mov	arg03, #0
2abe0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2abe4     A4 DF BF FD | 	call	#__system____getvfsforfile
2abe8     FD 28 0A F6 | 	mov	local02, result1 wz
2abec     10 00 90 AD |  if_e	jmp	#LR__3690
2abf0     20 28 06 F1 | 	add	local02, #32
2abf4     14 13 0A FB | 	rdlong	arg01, local02 wz
2abf8     20 28 86 F1 | 	sub	local02, #32
2abfc     14 00 90 5D |  if_ne	jmp	#LR__3691
2ac00                 | LR__3690
2ac00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ac04     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2ac08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ac0c     01 FA 65 F6 | 	neg	result1, #1
2ac10     A8 00 90 FD | 	jmp	#LR__3694
2ac14                 | LR__3691
2ac14     40 28 06 F1 | 	add	local02, #64
2ac18     14 2B 02 FB | 	rdlong	local03, local02
2ac1c     15 2D 02 F6 | 	mov	local04, local03
2ac20     40 28 86 F1 | 	sub	local02, #64
2ac24     13 2C 46 F7 | 	zerox	local04, #19
2ac28     14 2A 46 F0 | 	shr	local03, #20
2ac2c     02 2A 66 F0 | 	shl	local03, #2
2ac30     ED 2A 02 F1 | 	add	local03, __methods__
2ac34     15 2B 02 FB | 	rdlong	local03, local03
2ac38     13 13 02 F6 | 	mov	arg01, local01
2ac3c     F2 2E 02 F6 | 	mov	local05, objptr
2ac40     16 E5 01 F6 | 	mov	objptr, local04
2ac44     2D 2A 62 FD | 	call	local03
2ac48     17 E5 01 F6 | 	mov	objptr, local05
2ac4c     FD 30 02 F6 | 	mov	local06, result1
2ac50     FF FF 7F FF 
2ac54     F2 31 0E F2 | 	cmp	local06, ##-14 wz
2ac58     38 00 90 5D |  if_ne	jmp	#LR__3692
2ac5c     3C 28 06 F1 | 	add	local02, #60
2ac60     14 31 02 FB | 	rdlong	local06, local02
2ac64     18 2B 02 F6 | 	mov	local03, local06
2ac68     13 30 46 F7 | 	zerox	local06, #19
2ac6c     14 2A 46 F0 | 	shr	local03, #20
2ac70     02 2A 66 F0 | 	shl	local03, #2
2ac74     ED 2A 02 F1 | 	add	local03, __methods__
2ac78     15 2B 02 FB | 	rdlong	local03, local03
2ac7c     13 13 02 F6 | 	mov	arg01, local01
2ac80     F2 2E 02 F6 | 	mov	local05, objptr
2ac84     18 E5 01 F6 | 	mov	objptr, local06
2ac88     2D 2A 62 FD | 	call	local03
2ac8c     17 E5 01 F6 | 	mov	objptr, local05
2ac90     FD 30 02 F6 | 	mov	local06, result1
2ac94                 | LR__3692
2ac94     00 30 0E F2 | 	cmp	local06, #0 wz
2ac98     1C 00 90 AD |  if_e	jmp	#LR__3693
2ac9c     18 13 6A F6 | 	neg	arg01, local06 wz
2aca0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2aca4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2aca8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2acac     01 FA 65 56 |  if_ne	neg	result1, #1
2acb0     00 FA 05 A6 |  if_e	mov	result1, #0
2acb4     04 00 90 FD | 	jmp	#LR__3694
2acb8                 | LR__3693
2acb8     00 FA 05 F6 | 	mov	result1, #0
2acbc                 | LR__3694
2acbc     A7 F0 03 F6 | 	mov	ptra, fp
2acc0     B2 00 A0 FD | 	call	#popregs_
2acc4                 | __system___remove_ret
2acc4     2D 00 64 FD | 	ret
2acc8                 | 
2acc8                 | __system___mkdir
2acc8     05 4A 05 F6 | 	mov	COUNT_, #5
2accc     A8 00 A0 FD | 	call	#pushregs_
2acd0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2acd4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2acd8     09 15 02 F6 | 	mov	arg02, arg01
2acdc     13 13 02 F6 | 	mov	arg01, local01
2ace0     00 16 06 F6 | 	mov	arg03, #0
2ace4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2ace8     A0 DE BF FD | 	call	#__system____getvfsforfile
2acec     FD 28 0A F6 | 	mov	local02, result1 wz
2acf0     10 00 90 AD |  if_e	jmp	#LR__3700
2acf4     20 28 06 F1 | 	add	local02, #32
2acf8     14 15 0A FB | 	rdlong	arg02, local02 wz
2acfc     20 28 86 F1 | 	sub	local02, #32
2ad00     14 00 90 5D |  if_ne	jmp	#LR__3701
2ad04                 | LR__3700
2ad04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ad08     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2ad0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ad10     01 FA 65 F6 | 	neg	result1, #1
2ad14     60 00 90 FD | 	jmp	#LR__3703
2ad18                 | LR__3701
2ad18     38 28 06 F1 | 	add	local02, #56
2ad1c     14 2B 02 FB | 	rdlong	local03, local02
2ad20     15 2D 02 F6 | 	mov	local04, local03
2ad24     13 2A 46 F7 | 	zerox	local03, #19
2ad28     14 2C 46 F0 | 	shr	local04, #20
2ad2c     02 2C 66 F0 | 	shl	local04, #2
2ad30     ED 2C 02 F1 | 	add	local04, __methods__
2ad34     16 2D 02 FB | 	rdlong	local04, local04
2ad38     13 13 02 F6 | 	mov	arg01, local01
2ad3c     FF 15 06 F6 | 	mov	arg02, #511
2ad40     F2 2E 02 F6 | 	mov	local05, objptr
2ad44     15 E5 01 F6 | 	mov	objptr, local03
2ad48     2D 2C 62 FD | 	call	local04
2ad4c     17 E5 01 F6 | 	mov	objptr, local05
2ad50     FD 12 0A F6 | 	mov	arg01, result1 wz
2ad54     1C 00 90 AD |  if_e	jmp	#LR__3702
2ad58     09 13 6A F6 | 	neg	arg01, arg01 wz
2ad5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ad60     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ad64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ad68     01 FA 65 56 |  if_ne	neg	result1, #1
2ad6c     00 FA 05 A6 |  if_e	mov	result1, #0
2ad70     04 00 90 FD | 	jmp	#LR__3703
2ad74                 | LR__3702
2ad74     00 FA 05 F6 | 	mov	result1, #0
2ad78                 | LR__3703
2ad78     A7 F0 03 F6 | 	mov	ptra, fp
2ad7c     B2 00 A0 FD | 	call	#popregs_
2ad80                 | __system___mkdir_ret
2ad80     2D 00 64 FD | 	ret
2ad84                 | 
2ad84                 | __system___strerror
2ad84     00 12 56 F2 | 	cmps	arg01, #0 wc
2ad88     08 00 90 CD |  if_b	jmp	#LR__3710
2ad8c     1A 12 56 F2 | 	cmps	arg01, #26 wc
2ad90     04 00 90 CD |  if_b	jmp	#LR__3711
2ad94                 | LR__3710
2ad94     19 12 06 F6 | 	mov	arg01, #25
2ad98                 | LR__3711
2ad98     02 12 66 F0 | 	shl	arg01, #2
2ad9c     01 00 00 FF 
2ada0     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2ada4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ada8     09 FB 01 FB | 	rdlong	result1, arg01
2adac     01 00 00 FF 
2adb0     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2adb4                 | __system___strerror_ret
2adb4     2D 00 64 FD | 	ret
2adb8                 | 
2adb8                 | __system___int64_shl
2adb8     20 16 CE F7 | 	test	arg03, #32 wz
2adbc     09 15 02 56 |  if_ne	mov	arg02, arg01
2adc0     00 12 06 56 |  if_ne	mov	arg01, #0
2adc4     1F 16 CE F7 | 	test	arg03, #31 wz
2adc8     18 00 90 AD |  if_e	jmp	#LR__3720
2adcc     0B 15 62 F0 | 	shl	arg02, arg03
2add0     09 FB 01 F6 | 	mov	result1, arg01
2add4     0B FD 61 F6 | 	neg	result2, arg03
2add8     FE FA 41 F0 | 	shr	result1, result2
2addc     FD 14 42 F5 | 	or	arg02, result1
2ade0     0B 13 62 F0 | 	shl	arg01, arg03
2ade4                 | LR__3720
2ade4     0A FD 01 F6 | 	mov	result2, arg02
2ade8     09 FB 01 F6 | 	mov	result1, arg01
2adec                 | __system___int64_shl_ret
2adec     2D 00 64 FD | 	ret
2adf0                 | 
2adf0                 | __system___usepins
2adf0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2adf4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2adf8     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2adfc     00 13 CA F7 | 	test	arg01, _var01 wz
2ae00     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2ae04     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2ae08     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2ae0c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2ae10     00 FA 05 56 |  if_ne	mov	result1, #0
2ae14     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2ae18     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ae1c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2ae20     09 03 42 F5 | 	or	_var02, arg01
2ae24     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ae28     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ae2c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2ae30     0A 03 42 F5 | 	or	_var02, arg02
2ae34     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ae38     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2ae3c     01 FA 65 F6 | 	neg	result1, #1
2ae40                 | __system___usepins_ret
2ae40     2D 00 64 FD | 	ret
2ae44                 | 
2ae44                 | __system___freepins
2ae44     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ae48     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ae4c     09 01 22 F5 | 	andn	_var01, arg01
2ae50     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2ae54     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ae58     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ae5c     0A 01 22 F5 | 	andn	_var01, arg02
2ae60     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2ae64     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2ae68                 | __system___freepins_ret
2ae68     2D 00 64 FD | 	ret
2ae6c                 | 
2ae6c                 | __system___float_fromuns
2ae6c     09 17 0A F6 | 	mov	arg03, arg01 wz
2ae70     0B FB 01 A6 |  if_e	mov	result1, arg03
2ae74     24 00 90 AD |  if_e	jmp	#LR__3730
2ae78     0B 15 92 F7 | 	encod	arg02, arg03 wc
2ae7c     01 14 06 C1 |  if_b	add	arg02, #1
2ae80     01 14 86 F1 | 	sub	arg02, #1
2ae84     1F 12 06 F6 | 	mov	arg01, #31
2ae88     0A 13 82 F1 | 	sub	arg01, arg02
2ae8c     09 17 62 F0 | 	shl	arg03, arg01
2ae90     02 16 46 F0 | 	shr	arg03, #2
2ae94     00 12 06 F6 | 	mov	arg01, #0
2ae98     4C 09 B0 FD | 	call	#__system___float_Pack
2ae9c                 | LR__3730
2ae9c                 | __system___float_fromuns_ret
2ae9c     2D 00 64 FD | 	ret
2aea0                 | 
2aea0                 | __system___float_add
2aea0     0F 4A 05 F6 | 	mov	COUNT_, #15
2aea4     A8 00 A0 FD | 	call	#pushregs_
2aea8     09 27 02 F6 | 	mov	local01, arg01
2aeac     0A 29 02 F6 | 	mov	local02, arg02
2aeb0     00 2A 06 F6 | 	mov	local03, #0
2aeb4     13 2D 02 F6 | 	mov	local04, local01
2aeb8     16 2F 02 F6 | 	mov	local05, local04
2aebc     16 2E 46 F7 | 	zerox	local05, #22
2aec0     16 31 02 F6 | 	mov	local06, local04
2aec4     01 30 66 F0 | 	shl	local06, #1
2aec8     18 30 46 F0 | 	shr	local06, #24
2aecc     1F 2C 46 F0 | 	shr	local04, #31
2aed0     14 13 02 F6 | 	mov	arg01, local02
2aed4     09 FB 01 F6 | 	mov	result1, arg01
2aed8     FD 32 02 F6 | 	mov	local07, result1
2aedc     19 35 02 F6 | 	mov	local08, local07
2aee0     16 34 46 F7 | 	zerox	local08, #22
2aee4     19 37 02 F6 | 	mov	local09, local07
2aee8     01 36 66 F0 | 	shl	local09, #1
2aeec     18 36 46 F0 | 	shr	local09, #24
2aef0     1B 39 02 F6 | 	mov	local10, local09
2aef4     1F 32 46 F0 | 	shr	local07, #31
2aef8     00 3A 06 F6 | 	mov	local11, #0
2aefc     00 3C 06 F6 | 	mov	local12, #0
2af00     1C 31 12 F2 | 	cmp	local06, local10 wc
2af04     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2af08     2C 00 90 1D |  if_a	jmp	#LR__3740
2af0c     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2af10     24 00 90 3D |  if_ae	jmp	#LR__3740
2af14     17 3F 02 F6 | 	mov	local13, local05
2af18     1A 2F 02 F6 | 	mov	local05, local08
2af1c     1F 35 02 F6 | 	mov	local08, local13
2af20     18 3F 02 F6 | 	mov	local13, local06
2af24     1C 31 02 F6 | 	mov	local06, local10
2af28     1F 39 02 F6 | 	mov	local10, local13
2af2c     16 3F 02 F6 | 	mov	local13, local04
2af30     19 2D 02 F6 | 	mov	local04, local07
2af34     1F 33 02 F6 | 	mov	local07, local13
2af38                 | LR__3740
2af38     FF 30 0E F2 | 	cmp	local06, #255 wz
2af3c     70 01 90 AD |  if_e	jmp	#LR__3755
2af40     00 30 0E F2 | 	cmp	local06, #0 wz
2af44     AC 01 90 AD |  if_e	jmp	#LR__3757
2af48     17 2E 26 F4 | 	bith	local05, #23
2af4c                 | LR__3741
2af4c     00 38 0E F2 | 	cmp	local10, #0 wz
2af50     F0 01 90 AD |  if_e	jmp	#LR__3761
2af54     17 34 26 F4 | 	bith	local08, #23
2af58                 | LR__3742
2af58     7F 30 86 F1 | 	sub	local06, #127
2af5c     7F 38 86 F1 | 	sub	local10, #127
2af60     18 41 02 F6 | 	mov	local14, local06
2af64     1C 41 82 F1 | 	sub	local14, local10
2af68     97 14 48 FB | 	callpa	#(@LR__3744-@LR__3743)>>2,fcache_load_ptr_
2af6c                 | LR__3743
2af6c     20 40 56 F2 | 	cmps	local14, #32 wc
2af70     20 00 90 CD |  if_b	jmp	#LR__3745
2af74     1A 37 02 F6 | 	mov	local09, local08
2af78     00 3A 0E F2 | 	cmp	local11, #0 wz
2af7c     6F 3A 62 FD | 	wrnz	local11
2af80     1D 37 42 F5 | 	or	local09, local11
2af84     1B 3B 02 F6 | 	mov	local11, local09
2af88     00 34 06 F6 | 	mov	local08, #0
2af8c     20 40 86 F1 | 	sub	local14, #32
2af90     D8 FF 9F FD | 	jmp	#LR__3743
2af94                 | LR__3744
2af94                 | LR__3745
2af94     00 40 0E F2 | 	cmp	local14, #0 wz
2af98     38 00 90 AD |  if_e	jmp	#LR__3746
2af9c     1A 3F 02 F6 | 	mov	local13, local08
2afa0     20 38 06 F6 | 	mov	local10, #32
2afa4     20 39 82 F1 | 	sub	local10, local14
2afa8     1C 3F 62 F0 | 	shl	local13, local10
2afac     1D 39 02 F6 | 	mov	local10, local11
2afb0     20 36 06 F6 | 	mov	local09, #32
2afb4     20 37 82 F1 | 	sub	local09, local14
2afb8     1B 39 6A F0 | 	shl	local10, local09 wz
2afbc     20 3B 42 F0 | 	shr	local11, local14
2afc0     20 35 42 F0 | 	shr	local08, local14
2afc4     1F 3B 42 F5 | 	or	local11, local13
2afc8     00 42 06 F6 | 	mov	local15, #0
2afcc     01 42 06 56 |  if_ne	mov	local15, #1
2afd0     21 3B 42 F5 | 	or	local11, local15
2afd4                 | LR__3746
2afd4     16 43 02 F6 | 	mov	local15, local04
2afd8     19 43 62 F5 | 	xor	local15, local07
2afdc     01 42 CE F7 | 	test	local15, #1 wz
2afe0     18 00 90 AD |  if_e	jmp	#LR__3747
2afe4     1A 35 22 F6 | 	not	local08, local08
2afe8     1D 3B 22 F6 | 	not	local11, local11
2afec     01 3A 0E F1 | 	add	local11, #1 wz
2aff0     00 42 06 F6 | 	mov	local15, #0
2aff4     01 42 06 A6 |  if_e	mov	local15, #1
2aff8     21 35 02 F1 | 	add	local08, local15
2affc                 | LR__3747
2affc     1D 3D 12 F1 | 	add	local12, local11 wc
2b000     1A 2F 22 F1 | 	addx	local05, local08
2b004     00 2E 56 F2 | 	cmps	local05, #0 wc
2b008     1C 00 90 3D |  if_ae	jmp	#LR__3748
2b00c     01 2C 66 F5 | 	xor	local04, #1
2b010     17 2F 22 F6 | 	not	local05, local05
2b014     1E 3D 22 F6 | 	not	local12, local12
2b018     01 3C 0E F1 | 	add	local12, #1 wz
2b01c     00 42 06 F6 | 	mov	local15, #0
2b020     01 42 06 A6 |  if_e	mov	local15, #1
2b024     21 2F 02 F1 | 	add	local05, local15
2b028                 | LR__3748
2b028     00 80 00 FF 
2b02c     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2b030     28 00 90 CD |  if_b	jmp	#LR__3749
2b034     01 30 06 F1 | 	add	local06, #1
2b038     1E 41 02 F6 | 	mov	local14, local12
2b03c     01 40 06 F5 | 	and	local14, #1
2b040     01 3C 46 F0 | 	shr	local12, #1
2b044     17 43 02 F6 | 	mov	local15, local05
2b048     1F 42 66 F0 | 	shl	local15, #31
2b04c     21 3D 42 F5 | 	or	local12, local15
2b050     20 3D 42 F5 | 	or	local12, local14
2b054     01 2E 46 F0 | 	shr	local05, #1
2b058     3C 00 90 FD | 	jmp	#LR__3754
2b05c                 | LR__3749
2b05c     00 40 00 FF 
2b060     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2b064     30 00 90 3D |  if_ae	jmp	#LR__3753
2b068     00 2E 0E F2 | 	cmp	local05, #0 wz
2b06c     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
2b070     08 2C 46 A5 |  if_e	or	local04, #8
2b074     01 2C 26 A5 |  if_e	andn	local04, #1
2b078     1C 00 90 AD |  if_e	jmp	#LR__3752
2b07c                 | LR__3750
2b07c     00 40 00 FF 
2b080     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2b084     10 00 90 3D |  if_ae	jmp	#LR__3751
2b088     1E 3D 12 F1 | 	add	local12, local12 wc
2b08c     17 2F 22 F1 | 	addx	local05, local05
2b090     01 30 86 F1 | 	sub	local06, #1
2b094     E4 FF 9F FD | 	jmp	#LR__3750
2b098                 | LR__3751
2b098                 | LR__3752
2b098                 | LR__3753
2b098                 | LR__3754
2b098     17 13 02 F6 | 	mov	arg01, local05
2b09c     1E 15 02 F6 | 	mov	arg02, local12
2b0a0     18 17 02 F6 | 	mov	arg03, local06
2b0a4     16 19 02 F6 | 	mov	arg04, local04
2b0a8     14 35 B0 FD | 	call	#__system__pack_0701
2b0ac     DC 00 90 FD | 	jmp	#LR__3765
2b0b0                 | LR__3755
2b0b0     FF 38 0E F2 | 	cmp	local10, #255 wz
2b0b4     10 00 90 5D |  if_ne	jmp	#LR__3756
2b0b8     16 33 0A F2 | 	cmp	local07, local04 wz
2b0bc     00 F8 3F 5F 
2b0c0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2b0c4     C4 00 90 5D |  if_ne	jmp	#LR__3765
2b0c8                 | LR__3756
2b0c8     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0cc     00 F8 3F 5F 
2b0d0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2b0d4     B4 00 90 5D |  if_ne	jmp	#LR__3765
2b0d8     1E 15 02 F6 | 	mov	arg02, local12
2b0dc     18 17 02 F6 | 	mov	arg03, local06
2b0e0     16 19 02 F6 | 	mov	arg04, local04
2b0e4     02 18 46 F5 | 	or	arg04, #2
2b0e8     17 13 02 F6 | 	mov	arg01, local05
2b0ec     D0 34 B0 FD | 	call	#__system__pack_0701
2b0f0     98 00 90 FD | 	jmp	#LR__3765
2b0f4                 | LR__3757
2b0f4     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0f8     28 00 90 AD |  if_e	jmp	#LR__3760
2b0fc     01 2E 66 F0 | 	shl	local05, #1
2b100     97 0E 48 FB | 	callpa	#(@LR__3759-@LR__3758)>>2,fcache_load_ptr_
2b104                 | LR__3758
2b104     00 40 00 FF 
2b108     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2b10c     18 43 02 C6 |  if_b	mov	local15, local06
2b110     01 42 86 C1 |  if_b	sub	local15, #1
2b114     21 31 02 C6 |  if_b	mov	local06, local15
2b118     01 2E 66 C0 |  if_b	shl	local05, #1
2b11c     E4 FF 9F CD |  if_b	jmp	#LR__3758
2b120                 | LR__3759
2b120     28 FE 9F FD | 	jmp	#LR__3741
2b124                 | LR__3760
2b124     19 2D 02 F5 | 	and	local04, local07
2b128     16 19 02 F6 | 	mov	arg04, local04
2b12c     08 18 46 F5 | 	or	arg04, #8
2b130     00 12 06 F6 | 	mov	arg01, #0
2b134     00 14 06 F6 | 	mov	arg02, #0
2b138     00 16 06 F6 | 	mov	arg03, #0
2b13c     80 34 B0 FD | 	call	#__system__pack_0701
2b140     48 00 90 FD | 	jmp	#LR__3765
2b144                 | LR__3761
2b144     00 34 0E F2 | 	cmp	local08, #0 wz
2b148     28 00 90 AD |  if_e	jmp	#LR__3764
2b14c     01 34 66 F0 | 	shl	local08, #1
2b150     97 0E 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
2b154                 | LR__3762
2b154     00 40 00 FF 
2b158     00 34 16 F2 | 	cmp	local08, ##8388608 wc
2b15c     1C 43 02 C6 |  if_b	mov	local15, local10
2b160     01 42 86 C1 |  if_b	sub	local15, #1
2b164     21 39 02 C6 |  if_b	mov	local10, local15
2b168     01 34 66 C0 |  if_b	shl	local08, #1
2b16c     E4 FF 9F CD |  if_b	jmp	#LR__3762
2b170                 | LR__3763
2b170     E4 FD 9F FD | 	jmp	#LR__3742
2b174                 | LR__3764
2b174     7F 30 86 F1 | 	sub	local06, #127
2b178     17 13 02 F6 | 	mov	arg01, local05
2b17c     1E 15 02 F6 | 	mov	arg02, local12
2b180     18 17 02 F6 | 	mov	arg03, local06
2b184     16 19 02 F6 | 	mov	arg04, local04
2b188     34 34 B0 FD | 	call	#__system__pack_0701
2b18c                 | LR__3765
2b18c     A7 F0 03 F6 | 	mov	ptra, fp
2b190     B2 00 A0 FD | 	call	#popregs_
2b194                 | __system___float_add_ret
2b194     2D 00 64 FD | 	ret
2b198                 | 
2b198                 | __system___float_sqrt
2b198     04 4A 05 F6 | 	mov	COUNT_, #4
2b19c     A8 00 A0 FD | 	call	#pushregs_
2b1a0     09 27 02 F6 | 	mov	local01, arg01
2b1a4     09 FB 01 F6 | 	mov	result1, arg01
2b1a8     FD 28 02 F6 | 	mov	local02, result1
2b1ac     14 2B 02 F6 | 	mov	local03, local02
2b1b0     16 2A 46 F7 | 	zerox	local03, #22
2b1b4     14 2D 02 F6 | 	mov	local04, local02
2b1b8     01 2C 66 F0 | 	shl	local04, #1
2b1bc     18 2C 4E F0 | 	shr	local04, #24 wz
2b1c0     1F 28 46 F0 | 	shr	local02, #31
2b1c4     70 00 90 AD |  if_e	jmp	#LR__3771
2b1c8     17 2A 26 F4 | 	bith	local03, #23
2b1cc                 | LR__3770
2b1cc     00 28 0E F2 | 	cmp	local02, #0 wz
2b1d0     00 F8 3F 5F 
2b1d4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2b1d8     88 00 90 5D |  if_ne	jmp	#LR__3774
2b1dc     FF 2C 0E F2 | 	cmp	local04, #255 wz
2b1e0     13 FB 01 A6 |  if_e	mov	result1, local01
2b1e4     7C 00 90 AD |  if_e	jmp	#LR__3774
2b1e8     7F 2C 86 F1 | 	sub	local04, #127
2b1ec     01 2C CE F7 | 	test	local04, #1 wz
2b1f0     01 2A 66 50 |  if_ne	shl	local03, #1
2b1f4     05 2A 66 F0 | 	shl	local03, #5
2b1f8     15 01 38 FD | 	qsqrt	#0, local03
2b1fc     01 2C 86 51 |  if_ne	sub	local04, #1
2b200     16 2D 52 F6 | 	abs	local04, local04 wc
2b204     01 2C 46 F0 | 	shr	local04, #1
2b208     16 17 82 F6 | 	negc	arg03, local04
2b20c     14 19 02 F6 | 	mov	arg04, local02
2b210     18 12 62 FD | 	getqx	arg01
2b214     09 15 02 F6 | 	mov	arg02, arg01
2b218     19 14 66 F0 | 	shl	arg02, #25
2b21c     07 12 46 F0 | 	shr	arg01, #7
2b220     00 80 00 FF 
2b224     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2b228     01 16 06 31 |  if_ae	add	arg03, #1
2b22c     01 12 46 30 |  if_ae	shr	arg01, #1
2b230     8C 33 B0 FD | 	call	#__system__pack_0701
2b234     2C 00 90 FD | 	jmp	#LR__3774
2b238                 | LR__3771
2b238     00 2A 0E F2 | 	cmp	local03, #0 wz
2b23c     13 FB 01 A6 |  if_e	mov	result1, local01
2b240     20 00 90 AD |  if_e	jmp	#LR__3774
2b244     01 2A 66 F0 | 	shl	local03, #1
2b248     97 0A 48 FB | 	callpa	#(@LR__3773-@LR__3772)>>2,fcache_load_ptr_
2b24c                 | LR__3772
2b24c     00 40 00 FF 
2b250     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
2b254     01 2C 86 C1 |  if_b	sub	local04, #1
2b258     01 2A 66 C0 |  if_b	shl	local03, #1
2b25c     EC FF 9F CD |  if_b	jmp	#LR__3772
2b260                 | LR__3773
2b260     68 FF 9F FD | 	jmp	#LR__3770
2b264                 | LR__3774
2b264     A7 F0 03 F6 | 	mov	ptra, fp
2b268     B2 00 A0 FD | 	call	#popregs_
2b26c                 | __system___float_sqrt_ret
2b26c     2D 00 64 FD | 	ret
2b270                 | 
2b270                 | __system___float_mul
2b270     0B 4A 05 F6 | 	mov	COUNT_, #11
2b274     A8 00 A0 FD | 	call	#pushregs_
2b278     09 27 02 F6 | 	mov	local01, arg01
2b27c     0A 29 02 F6 | 	mov	local02, arg02
2b280     13 2B 02 F6 | 	mov	local03, local01
2b284     15 2D 02 F6 | 	mov	local04, local03
2b288     16 2C 46 F7 | 	zerox	local04, #22
2b28c     15 2F 02 F6 | 	mov	local05, local03
2b290     01 2E 66 F0 | 	shl	local05, #1
2b294     18 2E 46 F0 | 	shr	local05, #24
2b298     1F 2A 46 F0 | 	shr	local03, #31
2b29c     14 FB 01 F6 | 	mov	result1, local02
2b2a0     FD 30 02 F6 | 	mov	local06, result1
2b2a4     18 33 02 F6 | 	mov	local07, local06
2b2a8     16 32 46 F7 | 	zerox	local07, #22
2b2ac     18 35 02 F6 | 	mov	local08, local06
2b2b0     01 34 66 F0 | 	shl	local08, #1
2b2b4     18 34 46 F0 | 	shr	local08, #24
2b2b8     1F 30 46 F0 | 	shr	local06, #31
2b2bc     18 2B 62 F5 | 	xor	local03, local06
2b2c0     FF 2E 0E F2 | 	cmp	local05, #255 wz
2b2c4     90 00 90 AD |  if_e	jmp	#LR__3783
2b2c8     FF 34 0E F2 | 	cmp	local08, #255 wz
2b2cc     D8 00 90 AD |  if_e	jmp	#LR__3785
2b2d0     00 2E 0E F2 | 	cmp	local05, #0 wz
2b2d4     0C 01 90 AD |  if_e	jmp	#LR__3786
2b2d8     17 2C 26 F4 | 	bith	local04, #23
2b2dc                 | LR__3780
2b2dc     00 34 0E F2 | 	cmp	local08, #0 wz
2b2e0     44 01 90 AD |  if_e	jmp	#LR__3790
2b2e4     17 32 26 F4 | 	bith	local07, #23
2b2e8                 | LR__3781
2b2e8     16 29 02 F6 | 	mov	local02, local04
2b2ec     04 28 66 F0 | 	shl	local02, #4
2b2f0     19 31 02 F6 | 	mov	local06, local07
2b2f4     05 30 66 F0 | 	shl	local06, #5
2b2f8     18 29 02 FD | 	qmul	local02, local06
2b2fc     1A 2F 02 F1 | 	add	local05, local08
2b300     FE 2E 86 F1 | 	sub	local05, #254
2b304     17 37 02 F6 | 	mov	local09, local05
2b308     04 2C 66 F0 | 	shl	local04, #4
2b30c     05 32 66 F0 | 	shl	local07, #5
2b310     18 38 62 FD | 	getqx	local10
2b314     19 2D 02 FD | 	qmul	local04, local07
2b318     19 3A 62 FD | 	getqy	local11
2b31c     00 80 00 FF 
2b320     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2b324     18 00 90 CD |  if_b	jmp	#LR__3782
2b328     01 36 06 F1 | 	add	local09, #1
2b32c     01 38 46 F0 | 	shr	local10, #1
2b330     1D 35 02 F6 | 	mov	local08, local11
2b334     1F 34 66 F0 | 	shl	local08, #31
2b338     1A 39 42 F5 | 	or	local10, local08
2b33c     01 3A 46 F0 | 	shr	local11, #1
2b340                 | LR__3782
2b340     1D 13 02 F6 | 	mov	arg01, local11
2b344     1C 15 02 F6 | 	mov	arg02, local10
2b348     1B 17 02 F6 | 	mov	arg03, local09
2b34c     15 19 02 F6 | 	mov	arg04, local03
2b350     6C 32 B0 FD | 	call	#__system__pack_0701
2b354     10 01 90 FD | 	jmp	#LR__3794
2b358                 | LR__3783
2b358     00 2C 0E F2 | 	cmp	local04, #0 wz
2b35c     13 FB 01 56 |  if_ne	mov	result1, local01
2b360     04 01 90 5D |  if_ne	jmp	#LR__3794
2b364     FF 34 56 F2 | 	cmps	local08, #255 wc
2b368     00 34 0E C2 |  if_b	cmp	local08, #0 wz
2b36c     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2b370     18 00 90 4D |  if_c_and_nz	jmp	#LR__3784
2b374     00 F8 3F CF 
2b378     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2b37c     E8 00 90 CD |  if_b	jmp	#LR__3794
2b380     00 32 0E F2 | 	cmp	local07, #0 wz
2b384     14 FB 01 56 |  if_ne	mov	result1, local02
2b388     DC 00 90 5D |  if_ne	jmp	#LR__3794
2b38c                 | LR__3784
2b38c     02 2A 46 F5 | 	or	local03, #2
2b390     00 12 06 F6 | 	mov	arg01, #0
2b394     00 14 06 F6 | 	mov	arg02, #0
2b398     17 17 02 F6 | 	mov	arg03, local05
2b39c     15 19 02 F6 | 	mov	arg04, local03
2b3a0     1C 32 B0 FD | 	call	#__system__pack_0701
2b3a4     C0 00 90 FD | 	jmp	#LR__3794
2b3a8                 | LR__3785
2b3a8     00 2E 0E F2 | 	cmp	local05, #0 wz
2b3ac     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2b3b0     00 F8 3F AF 
2b3b4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b3b8     AC 00 90 AD |  if_e	jmp	#LR__3794
2b3bc     00 32 0E F2 | 	cmp	local07, #0 wz
2b3c0     14 FB 01 56 |  if_ne	mov	result1, local02
2b3c4     A0 00 90 5D |  if_ne	jmp	#LR__3794
2b3c8     1A 17 02 F6 | 	mov	arg03, local08
2b3cc     15 19 02 F6 | 	mov	arg04, local03
2b3d0     02 18 46 F5 | 	or	arg04, #2
2b3d4     00 12 06 F6 | 	mov	arg01, #0
2b3d8     00 14 06 F6 | 	mov	arg02, #0
2b3dc     E0 31 B0 FD | 	call	#__system__pack_0701
2b3e0     84 00 90 FD | 	jmp	#LR__3794
2b3e4                 | LR__3786
2b3e4     00 2C 0E F2 | 	cmp	local04, #0 wz
2b3e8     20 00 90 AD |  if_e	jmp	#LR__3789
2b3ec     01 2C 66 F0 | 	shl	local04, #1
2b3f0     97 0A 48 FB | 	callpa	#(@LR__3788-@LR__3787)>>2,fcache_load_ptr_
2b3f4                 | LR__3787
2b3f4     00 40 00 FF 
2b3f8     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2b3fc     01 2E 86 C1 |  if_b	sub	local05, #1
2b400     01 2C 66 C0 |  if_b	shl	local04, #1
2b404     EC FF 9F CD |  if_b	jmp	#LR__3787
2b408                 | LR__3788
2b408     D0 FE 9F FD | 	jmp	#LR__3780
2b40c                 | LR__3789
2b40c     08 2A 46 F5 | 	or	local03, #8
2b410     00 12 06 F6 | 	mov	arg01, #0
2b414     00 14 06 F6 | 	mov	arg02, #0
2b418     00 16 06 F6 | 	mov	arg03, #0
2b41c     15 19 02 F6 | 	mov	arg04, local03
2b420     9C 31 B0 FD | 	call	#__system__pack_0701
2b424     40 00 90 FD | 	jmp	#LR__3794
2b428                 | LR__3790
2b428     00 32 0E F2 | 	cmp	local07, #0 wz
2b42c     20 00 90 AD |  if_e	jmp	#LR__3793
2b430     01 32 66 F0 | 	shl	local07, #1
2b434     97 0A 48 FB | 	callpa	#(@LR__3792-@LR__3791)>>2,fcache_load_ptr_
2b438                 | LR__3791
2b438     00 40 00 FF 
2b43c     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2b440     01 34 86 C1 |  if_b	sub	local08, #1
2b444     01 32 66 C0 |  if_b	shl	local07, #1
2b448     EC FF 9F CD |  if_b	jmp	#LR__3791
2b44c                 | LR__3792
2b44c     98 FE 9F FD | 	jmp	#LR__3781
2b450                 | LR__3793
2b450     08 2A 46 F5 | 	or	local03, #8
2b454     00 12 06 F6 | 	mov	arg01, #0
2b458     00 14 06 F6 | 	mov	arg02, #0
2b45c     00 16 06 F6 | 	mov	arg03, #0
2b460     15 19 02 F6 | 	mov	arg04, local03
2b464     58 31 B0 FD | 	call	#__system__pack_0701
2b468                 | LR__3794
2b468     A7 F0 03 F6 | 	mov	ptra, fp
2b46c     B2 00 A0 FD | 	call	#popregs_
2b470                 | __system___float_mul_ret
2b470     2D 00 64 FD | 	ret
2b474                 | 
2b474                 | __system___float_div
2b474     0E 4A 05 F6 | 	mov	COUNT_, #14
2b478     A8 00 A0 FD | 	call	#pushregs_
2b47c     09 2B 02 F6 | 	mov	local03, arg01
2b480     0A 2D 02 F6 | 	mov	local04, arg02
2b484     15 2F 02 F6 | 	mov	local05, local03
2b488     17 31 02 F6 | 	mov	local06, local05
2b48c     16 30 46 F7 | 	zerox	local06, #22
2b490     17 33 02 F6 | 	mov	local07, local05
2b494     01 32 66 F0 | 	shl	local07, #1
2b498     18 32 46 F0 | 	shr	local07, #24
2b49c     1F 2E 46 F0 | 	shr	local05, #31
2b4a0     16 FB 01 F6 | 	mov	result1, local04
2b4a4     FD 34 02 F6 | 	mov	local08, result1
2b4a8     1A 37 02 F6 | 	mov	local09, local08
2b4ac     16 36 46 F7 | 	zerox	local09, #22
2b4b0     1A 39 02 F6 | 	mov	local10, local08
2b4b4     01 38 66 F0 | 	shl	local10, #1
2b4b8     18 38 46 F0 | 	shr	local10, #24
2b4bc     1F 34 46 F0 | 	shr	local08, #31
2b4c0     1A 2F 62 F5 | 	xor	local05, local08
2b4c4     FF 32 0E F2 | 	cmp	local07, #255 wz
2b4c8     D4 00 90 AD |  if_e	jmp	#LR__3805
2b4cc     FF 38 0E F2 | 	cmp	local10, #255 wz
2b4d0     04 01 90 AD |  if_e	jmp	#LR__3806
2b4d4     00 32 0E F2 | 	cmp	local07, #0 wz
2b4d8     24 01 90 AD |  if_e	jmp	#LR__3807
2b4dc     17 30 26 F4 | 	bith	local06, #23
2b4e0                 | LR__3800
2b4e0     00 38 0E F2 | 	cmp	local10, #0 wz
2b4e4     70 01 90 AD |  if_e	jmp	#LR__3811
2b4e8     17 36 26 F4 | 	bith	local09, #23
2b4ec                 | LR__3801
2b4ec     1C 33 82 F1 | 	sub	local07, local10
2b4f0     19 3B 02 F6 | 	mov	local11, local07
2b4f4     18 13 02 F6 | 	mov	arg01, local06
2b4f8     02 12 46 F0 | 	shr	arg01, #2
2b4fc     1E 30 66 F0 | 	shl	local06, #30
2b500     18 15 02 F6 | 	mov	arg02, local06
2b504     1B 17 02 F6 | 	mov	arg03, local09
2b508     28 12 62 FD | 	setq	arg01
2b50c     0B 15 12 FD | 	qdiv	arg02, arg03
2b510     00 3C 06 F6 | 	mov	local12, #0
2b514     18 26 62 FD | 	getqx	local01
2b518     19 FC 61 FD | 	getqy	result2
2b51c     FE 28 02 F6 | 	mov	local02, result2
2b520     13 3F 02 F6 | 	mov	local13, local01
2b524     00 28 4E F2 | 	cmps	local02, #0 wz
2b528     1F 41 02 F6 | 	mov	local14, local13
2b52c     19 40 66 F0 | 	shl	local14, #25
2b530     01 3C 06 56 |  if_ne	mov	local12, #1
2b534     1E 41 42 F5 | 	or	local14, local12
2b538     07 3E 46 F0 | 	shr	local13, #7
2b53c     00 80 00 FF 
2b540     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2b544     1C 00 90 CD |  if_b	jmp	#LR__3802
2b548     01 3A 06 F1 | 	add	local11, #1
2b54c     01 40 46 F0 | 	shr	local14, #1
2b550     1F 3D 02 F6 | 	mov	local12, local13
2b554     1F 3C 66 F0 | 	shl	local12, #31
2b558     1E 41 42 F5 | 	or	local14, local12
2b55c     01 3E 46 F0 | 	shr	local13, #1
2b560     24 00 90 FD | 	jmp	#LR__3804
2b564                 | LR__3802
2b564     00 40 00 FF 
2b568     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2b56c     18 00 90 3D |  if_ae	jmp	#LR__3803
2b570     01 3A 86 F1 | 	sub	local11, #1
2b574     01 3E 66 F0 | 	shl	local13, #1
2b578     20 3D 02 F6 | 	mov	local12, local14
2b57c     1F 3C 46 F0 | 	shr	local12, #31
2b580     1E 3F 42 F5 | 	or	local13, local12
2b584     01 40 66 F0 | 	shl	local14, #1
2b588                 | LR__3803
2b588                 | LR__3804
2b588     1F 13 02 F6 | 	mov	arg01, local13
2b58c     20 15 02 F6 | 	mov	arg02, local14
2b590     1D 17 02 F6 | 	mov	arg03, local11
2b594     17 19 02 F6 | 	mov	arg04, local05
2b598     24 30 B0 FD | 	call	#__system__pack_0701
2b59c     F8 00 90 FD | 	jmp	#LR__3815
2b5a0                 | LR__3805
2b5a0     00 30 0E F2 | 	cmp	local06, #0 wz
2b5a4     15 FB 01 56 |  if_ne	mov	result1, local03
2b5a8     EC 00 90 5D |  if_ne	jmp	#LR__3815
2b5ac     FF 38 0E F2 | 	cmp	local10, #255 wz
2b5b0     00 F8 3F AF 
2b5b4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b5b8     DC 00 90 AD |  if_e	jmp	#LR__3815
2b5bc     02 2E 46 F5 | 	or	local05, #2
2b5c0     00 12 06 F6 | 	mov	arg01, #0
2b5c4     00 14 06 F6 | 	mov	arg02, #0
2b5c8     19 17 02 F6 | 	mov	arg03, local07
2b5cc     17 19 02 F6 | 	mov	arg04, local05
2b5d0     EC 2F B0 FD | 	call	#__system__pack_0701
2b5d4     C0 00 90 FD | 	jmp	#LR__3815
2b5d8                 | LR__3806
2b5d8     00 36 0E F2 | 	cmp	local09, #0 wz
2b5dc     16 FB 01 56 |  if_ne	mov	result1, local04
2b5e0     B4 00 90 5D |  if_ne	jmp	#LR__3815
2b5e4     17 19 02 F6 | 	mov	arg04, local05
2b5e8     08 18 46 F5 | 	or	arg04, #8
2b5ec     00 12 06 F6 | 	mov	arg01, #0
2b5f0     00 14 06 F6 | 	mov	arg02, #0
2b5f4     00 16 06 F6 | 	mov	arg03, #0
2b5f8     C4 2F B0 FD | 	call	#__system__pack_0701
2b5fc     98 00 90 FD | 	jmp	#LR__3815
2b600                 | LR__3807
2b600     00 30 0E F2 | 	cmp	local06, #0 wz
2b604     20 00 90 AD |  if_e	jmp	#LR__3810
2b608     01 30 66 F0 | 	shl	local06, #1
2b60c     97 0A 48 FB | 	callpa	#(@LR__3809-@LR__3808)>>2,fcache_load_ptr_
2b610                 | LR__3808
2b610     00 40 00 FF 
2b614     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2b618     01 32 86 C1 |  if_b	sub	local07, #1
2b61c     01 30 66 C0 |  if_b	shl	local06, #1
2b620     EC FF 9F CD |  if_b	jmp	#LR__3808
2b624                 | LR__3809
2b624     B8 FE 9F FD | 	jmp	#LR__3800
2b628                 | LR__3810
2b628     00 38 0E F2 | 	cmp	local10, #0 wz
2b62c     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2b630     00 F8 3F AF 
2b634     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b638     5C 00 90 AD |  if_e	jmp	#LR__3815
2b63c     17 19 02 F6 | 	mov	arg04, local05
2b640     08 18 46 F5 | 	or	arg04, #8
2b644     00 12 06 F6 | 	mov	arg01, #0
2b648     00 14 06 F6 | 	mov	arg02, #0
2b64c     00 16 06 F6 | 	mov	arg03, #0
2b650     6C 2F B0 FD | 	call	#__system__pack_0701
2b654     40 00 90 FD | 	jmp	#LR__3815
2b658                 | LR__3811
2b658     00 36 0E F2 | 	cmp	local09, #0 wz
2b65c     20 00 90 AD |  if_e	jmp	#LR__3814
2b660     01 36 66 F0 | 	shl	local09, #1
2b664     97 0A 48 FB | 	callpa	#(@LR__3813-@LR__3812)>>2,fcache_load_ptr_
2b668                 | LR__3812
2b668     00 40 00 FF 
2b66c     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2b670     01 38 86 C1 |  if_b	sub	local10, #1
2b674     01 36 66 C0 |  if_b	shl	local09, #1
2b678     EC FF 9F CD |  if_b	jmp	#LR__3812
2b67c                 | LR__3813
2b67c     6C FE 9F FD | 	jmp	#LR__3801
2b680                 | LR__3814
2b680     02 2E 46 F5 | 	or	local05, #2
2b684     00 12 06 F6 | 	mov	arg01, #0
2b688     00 14 06 F6 | 	mov	arg02, #0
2b68c     00 16 06 F6 | 	mov	arg03, #0
2b690     17 19 02 F6 | 	mov	arg04, local05
2b694     28 2F B0 FD | 	call	#__system__pack_0701
2b698                 | LR__3815
2b698     A7 F0 03 F6 | 	mov	ptra, fp
2b69c     B2 00 A0 FD | 	call	#popregs_
2b6a0                 | __system___float_div_ret
2b6a0     2D 00 64 FD | 	ret
2b6a4                 | 
2b6a4                 | __system___float_cmp
2b6a4     00 C0 3F FF 
2b6a8     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2b6ac     00 C0 3F CF 
2b6b0     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2b6b4     0B FB 01 36 |  if_ae	mov	result1, arg03
2b6b8     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2b6bc     00 C0 7F FF 
2b6c0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2b6c4     00 C0 7F CF 
2b6c8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2b6cc     0B FB 01 36 |  if_ae	mov	result1, arg03
2b6d0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2b6d4     00 12 56 F2 | 	cmps	arg01, #0 wc
2b6d8     2C 00 90 3D |  if_ae	jmp	#LR__3820
2b6dc     00 14 56 F2 | 	cmps	arg02, #0 wc
2b6e0     0A FB 01 C6 |  if_b	mov	result1, arg02
2b6e4     09 FB 81 C1 |  if_b	sub	result1, arg01
2b6e8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2b6ec     00 14 0E F2 | 	cmp	arg02, #0 wz
2b6f0     00 00 40 AF 
2b6f4     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2b6f8     00 FA 05 A6 |  if_e	mov	result1, #0
2b6fc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2b700     01 FA 65 F6 | 	neg	result1, #1
2b704     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2b708                 | LR__3820
2b708     00 14 56 F2 | 	cmps	arg02, #0 wc
2b70c     1C 00 90 3D |  if_ae	jmp	#LR__3821
2b710     00 12 0E F2 | 	cmp	arg01, #0 wz
2b714     00 00 40 AF 
2b718     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2b71c     00 FA 05 A6 |  if_e	mov	result1, #0
2b720     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2b724     01 FA 05 F6 | 	mov	result1, #1
2b728     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2b72c                 | LR__3821
2b72c     0A 13 82 F1 | 	sub	arg01, arg02
2b730     09 FB 01 F6 | 	mov	result1, arg01
2b734                 | __system___float_cmp_ret
2b734     2D 00 64 FD | 	ret
2b738                 | 
2b738                 | __system___float_tointeger
2b738     02 4A 05 F6 | 	mov	COUNT_, #2
2b73c     A8 00 A0 FD | 	call	#pushregs_
2b740     50 00 B0 FD | 	call	#__system___float_Unpack
2b744     FF FF 7F FF 
2b748     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2b74c     34 00 90 CD |  if_b	jmp	#LR__3830
2b750     1F FC 55 F2 | 	cmps	result2, #31 wc
2b754     2C 00 90 3D |  if_ae	jmp	#LR__3830
2b758     02 FE 65 F0 | 	shl	result3, #2
2b75c     1E 26 06 F6 | 	mov	local01, #30
2b760     FE 26 82 F1 | 	sub	local01, result2
2b764     13 FF 41 F0 | 	shr	result3, local01
2b768     FF 28 02 F6 | 	mov	local02, result3
2b76c     0A 29 02 F1 | 	add	local02, arg02
2b770     01 28 46 F0 | 	shr	local02, #1
2b774     00 FA 0D F2 | 	cmp	result1, #0 wz
2b778     14 29 62 56 |  if_ne	neg	local02, local02
2b77c     14 FB 01 F6 | 	mov	result1, local02
2b780     04 00 90 FD | 	jmp	#LR__3831
2b784                 | LR__3830
2b784     00 FA 05 F6 | 	mov	result1, #0
2b788                 | LR__3831
2b788     A7 F0 03 F6 | 	mov	ptra, fp
2b78c     B2 00 A0 FD | 	call	#popregs_
2b790                 | __system___float_tointeger_ret
2b790     2D 00 64 FD | 	ret
2b794                 | 
2b794                 | __system___float_Unpack
2b794     09 01 02 F6 | 	mov	_var01, arg01
2b798     1F 00 46 F0 | 	shr	_var01, #31
2b79c     09 03 02 F6 | 	mov	_var02, arg01
2b7a0     01 02 66 F0 | 	shl	_var02, #1
2b7a4     18 02 4E F0 | 	shr	_var02, #24 wz
2b7a8     17 13 06 F4 | 	bitl	arg01, #279
2b7ac     06 12 66 50 |  if_ne	shl	arg01, #6
2b7b0     1D 12 26 54 |  if_ne	bith	arg01, #29
2b7b4     1C 00 90 5D |  if_ne	jmp	#LR__3840
2b7b8     09 05 92 F7 | 	encod	_var03, arg01 wc
2b7bc     01 04 06 C1 |  if_b	add	_var03, #1
2b7c0     17 04 86 F1 | 	sub	_var03, #23
2b7c4     02 03 02 F6 | 	mov	_var02, _var03
2b7c8     07 FC 05 F6 | 	mov	result2, #7
2b7cc     02 FD 81 F1 | 	sub	result2, _var03
2b7d0     FE 12 62 F0 | 	shl	arg01, result2
2b7d4                 | LR__3840
2b7d4     7F 02 86 F1 | 	sub	_var02, #127
2b7d8     09 FF 01 F6 | 	mov	result3, arg01
2b7dc     00 FB 01 F6 | 	mov	result1, _var01
2b7e0     01 FD 01 F6 | 	mov	result2, _var02
2b7e4                 | __system___float_Unpack_ret
2b7e4     2D 00 64 FD | 	ret
2b7e8                 | 
2b7e8                 | __system___float_Pack
2b7e8     00 00 06 F6 | 	mov	_var01, #0
2b7ec     00 16 0E F2 | 	cmp	arg03, #0 wz
2b7f0     8C 00 90 AD |  if_e	jmp	#LR__3851
2b7f4     0B 03 92 F7 | 	encod	_var02, arg03 wc
2b7f8     01 02 06 C1 |  if_b	add	_var02, #1
2b7fc     21 00 06 F6 | 	mov	_var01, #33
2b800     01 01 82 F1 | 	sub	_var01, _var02
2b804     00 17 62 F0 | 	shl	arg03, _var01
2b808     03 02 06 F6 | 	mov	_var02, #3
2b80c     00 03 82 F1 | 	sub	_var02, _var01
2b810     01 15 02 F1 | 	add	arg02, _var02
2b814     0A 05 02 F6 | 	mov	_var03, arg02
2b818     00 17 06 F1 | 	add	arg03, #256
2b81c     0B 03 02 F6 | 	mov	_var02, arg03
2b820     FF 02 2E F5 | 	andn	_var02, #255 wz
2b824     01 04 06 A1 |  if_e	add	_var03, #1
2b828     7F 04 06 F1 | 	add	_var03, #127
2b82c     FF FF 7F FF 
2b830     E9 05 46 F3 | 	fges	_var03, ##-23
2b834     FF 04 66 F3 | 	fles	_var03, #255
2b838     01 04 56 F2 | 	cmps	_var03, #1 wc
2b83c     1C 00 90 3D |  if_ae	jmp	#LR__3850
2b840     01 16 46 F0 | 	shr	arg03, #1
2b844     1F 02 C6 F9 | 	decod	_var02, #31
2b848     0B 03 02 F1 | 	add	_var02, arg03
2b84c     02 05 62 F6 | 	neg	_var03, _var03
2b850     02 03 42 F0 | 	shr	_var02, _var03
2b854     01 17 02 F6 | 	mov	arg03, _var02
2b858     00 04 06 F6 | 	mov	_var03, #0
2b85c                 | LR__3850
2b85c     09 FB 01 F6 | 	mov	result1, arg01
2b860     1F FA 65 F0 | 	shl	result1, #31
2b864     02 03 02 F6 | 	mov	_var02, _var03
2b868     17 02 66 F0 | 	shl	_var02, #23
2b86c     01 FB 41 F5 | 	or	result1, _var02
2b870     0B 07 02 F6 | 	mov	_var04, arg03
2b874     09 06 46 F0 | 	shr	_var04, #9
2b878     03 FB 41 F5 | 	or	result1, _var04
2b87c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2b880                 | LR__3851
2b880     00 FB 01 F6 | 	mov	result1, _var01
2b884                 | __system___float_Pack_ret
2b884     2D 00 64 FD | 	ret
2b888                 | 
2b888                 | __system___basic_print_float
2b888     05 4A 05 F6 | 	mov	COUNT_, #5
2b88c     A8 00 A0 FD | 	call	#pushregs_
2b890     09 27 02 F6 | 	mov	local01, arg01
2b894     0A 29 02 F6 | 	mov	local02, arg02
2b898     0B 2B 0A F6 | 	mov	local03, arg03 wz
2b89c     0C 2D 02 F6 | 	mov	local04, arg04
2b8a0     14 00 90 5D |  if_ne	jmp	#LR__3860
2b8a4     23 2C 0E F2 | 	cmp	local04, #35 wz
2b8a8     80 02 10 AF 
2b8ac     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2b8b0     1D 2E C6 59 |  if_ne	decod	local05, #29
2b8b4     17 2B 02 F6 | 	mov	local03, local05
2b8b8                 | LR__3860
2b8b8     13 13 02 F6 | 	mov	arg01, local01
2b8bc     34 28 B0 FD | 	call	#__system___gettxfunc
2b8c0     FD 2E 0A F6 | 	mov	local05, result1 wz
2b8c4     00 FA 05 A6 |  if_e	mov	result1, #0
2b8c8     17 13 02 56 |  if_ne	mov	arg01, local05
2b8cc     15 15 02 56 |  if_ne	mov	arg02, local03
2b8d0     14 17 02 56 |  if_ne	mov	arg03, local02
2b8d4     16 19 02 56 |  if_ne	mov	arg04, local04
2b8d8     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2b8dc     A7 F0 03 F6 | 	mov	ptra, fp
2b8e0     B2 00 A0 FD | 	call	#popregs_
2b8e4                 | __system___basic_print_float_ret
2b8e4     2D 00 64 FD | 	ret
2b8e8                 | 
2b8e8                 | __system____builtin_atoi
2b8e8     07 4A 05 F6 | 	mov	COUNT_, #7
2b8ec     A8 00 A0 FD | 	call	#pushregs_
2b8f0                 | __system____builtin_atoi_enter
2b8f0     09 27 02 F6 | 	mov	local01, arg01
2b8f4     0A 29 02 F6 | 	mov	local02, arg02
2b8f8     00 2A 06 F6 | 	mov	local03, #0
2b8fc     00 2C 06 F6 | 	mov	local04, #0
2b900     00 2E 06 F6 | 	mov	local05, #0
2b904     97 08 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2b908                 | LR__3870
2b908     13 31 C2 FA | 	rdbyte	local06, local01
2b90c     20 30 0E F2 | 	cmp	local06, #32 wz
2b910     01 26 06 A1 |  if_e	add	local01, #1
2b914     F0 FF 9F AD |  if_e	jmp	#LR__3870
2b918                 | LR__3871
2b918     13 33 C2 FA | 	rdbyte	local07, local01
2b91c     97 12 48 FB | 	callpa	#(@LR__3873-@LR__3872)>>2,fcache_load_ptr_
2b920                 | LR__3872
2b920     2D 32 0E F2 | 	cmp	local07, #45 wz
2b924     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2b928     18 00 90 5D |  if_ne	jmp	#LR__3874
2b92c     01 26 06 F1 | 	add	local01, #1
2b930     2D 32 0E F2 | 	cmp	local07, #45 wz
2b934     01 30 06 A6 |  if_e	mov	local06, #1
2b938     18 2F C2 A2 |  if_e	subr	local05, local06
2b93c     13 33 C2 FA | 	rdbyte	local07, local01
2b940     DC FF 9F FD | 	jmp	#LR__3872
2b944                 | LR__3873
2b944                 | LR__3874
2b944     00 28 0E F2 | 	cmp	local02, #0 wz
2b948     1C 00 90 5D |  if_ne	jmp	#LR__3876
2b94c     24 32 0E F2 | 	cmp	local07, #36 wz
2b950     10 28 06 A6 |  if_e	mov	local02, #16
2b954     01 26 06 A1 |  if_e	add	local01, #1
2b958     0C 00 90 AD |  if_e	jmp	#LR__3875
2b95c     25 32 0E F2 | 	cmp	local07, #37 wz
2b960     02 28 06 A6 |  if_e	mov	local02, #2
2b964     01 26 06 A1 |  if_e	add	local01, #1
2b968                 | LR__3875
2b968                 | LR__3876
2b968     97 48 48 FB | 	callpa	#(@LR__3884-@LR__3877)>>2,fcache_load_ptr_
2b96c                 | LR__3877
2b96c                 | LR__3878
2b96c     13 33 C2 FA | 	rdbyte	local07, local01
2b970     5F 32 0E F2 | 	cmp	local07, #95 wz
2b974     01 26 06 F1 | 	add	local01, #1
2b978     F0 FF 9F AD |  if_e	jmp	#LR__3878
2b97c     30 32 0E F2 | 	cmp	local07, #48 wz
2b980     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2b984     00 2C 06 A6 |  if_e	mov	local04, #0
2b988     60 00 90 AD |  if_e	jmp	#LR__3883
2b98c     31 32 56 F2 | 	cmps	local07, #49 wc
2b990     18 00 90 CD |  if_b	jmp	#LR__3879
2b994     3A 32 56 F2 | 	cmps	local07, #58 wc
2b998     19 2D 02 C6 |  if_b	mov	local04, local07
2b99c     30 2C 86 C1 |  if_b	sub	local04, #48
2b9a0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2b9a4     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2b9a8     40 00 90 CD |  if_b	jmp	#LR__3882
2b9ac                 | LR__3879
2b9ac     0B 28 56 F2 | 	cmps	local02, #11 wc
2b9b0     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2b9b4     14 00 90 CD |  if_b	jmp	#LR__3880
2b9b8     67 32 56 F2 | 	cmps	local07, #103 wc
2b9bc     61 32 86 C1 |  if_b	sub	local07, #97
2b9c0     0A 2C 06 C6 |  if_b	mov	local04, #10
2b9c4     19 2D 02 C1 |  if_b	add	local04, local07
2b9c8     20 00 90 CD |  if_b	jmp	#LR__3881
2b9cc                 | LR__3880
2b9cc     0B 28 56 F2 | 	cmps	local02, #11 wc
2b9d0     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2b9d4     24 00 90 CD |  if_b	jmp	#LR__3885
2b9d8     47 32 56 F2 | 	cmps	local07, #71 wc
2b9dc     41 32 86 C1 |  if_b	sub	local07, #65
2b9e0     0A 2C 06 C6 |  if_b	mov	local04, #10
2b9e4     19 2D 02 C1 |  if_b	add	local04, local07
2b9e8     10 00 90 3D |  if_ae	jmp	#LR__3885
2b9ec                 | LR__3881
2b9ec                 | LR__3882
2b9ec                 | LR__3883
2b9ec     15 29 02 FD | 	qmul	local02, local03
2b9f0     18 2A 62 FD | 	getqx	local03
2b9f4     16 2B 02 F1 | 	add	local03, local04
2b9f8     70 FF 9F FD | 	jmp	#LR__3877
2b9fc                 | LR__3884
2b9fc                 | LR__3885
2b9fc     00 28 0E F2 | 	cmp	local02, #0 wz
2ba00     64 00 90 5D |  if_ne	jmp	#LR__3891
2ba04     78 32 0E F2 | 	cmp	local07, #120 wz
2ba08     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2ba0c     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2ba10     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2ba14     14 00 90 5D |  if_ne	jmp	#LR__3886
2ba18     13 13 02 F6 | 	mov	arg01, local01
2ba1c     10 14 06 F6 | 	mov	arg02, #16
2ba20     C4 FE BF FD | 	call	#__system____builtin_atoi
2ba24     FD 2A 02 F6 | 	mov	local03, result1
2ba28     3C 00 90 FD | 	jmp	#LR__3890
2ba2c                 | LR__3886
2ba2c     62 32 0E F2 | 	cmp	local07, #98 wz
2ba30     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2ba34     14 00 90 5D |  if_ne	jmp	#LR__3887
2ba38     13 13 02 F6 | 	mov	arg01, local01
2ba3c     02 14 06 F6 | 	mov	arg02, #2
2ba40     A4 FE BF FD | 	call	#__system____builtin_atoi
2ba44     FD 2A 02 F6 | 	mov	local03, result1
2ba48     1C 00 90 FD | 	jmp	#LR__3889
2ba4c                 | LR__3887
2ba4c     6F 32 0E F2 | 	cmp	local07, #111 wz
2ba50     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2ba54     10 00 90 5D |  if_ne	jmp	#LR__3888
2ba58     13 13 02 F6 | 	mov	arg01, local01
2ba5c     08 14 06 F6 | 	mov	arg02, #8
2ba60     84 FE BF FD | 	call	#__system____builtin_atoi
2ba64     FD 2A 02 F6 | 	mov	local03, result1
2ba68                 | LR__3888
2ba68                 | LR__3889
2ba68                 | LR__3890
2ba68                 | LR__3891
2ba68     00 2E 0E F2 | 	cmp	local05, #0 wz
2ba6c     15 2B 62 56 |  if_ne	neg	local03, local03
2ba70     15 FB 01 F6 | 	mov	result1, local03
2ba74     A7 F0 03 F6 | 	mov	ptra, fp
2ba78     B2 00 A0 FD | 	call	#popregs_
2ba7c                 | __system____builtin_atoi_ret
2ba7c     2D 00 64 FD | 	ret
2ba80                 | 
2ba80                 | __system____builtin_atof
2ba80     07 4A 05 F6 | 	mov	COUNT_, #7
2ba84     A8 00 A0 FD | 	call	#pushregs_
2ba88     09 27 02 F6 | 	mov	local01, arg01
2ba8c     00 28 06 F6 | 	mov	local02, #0
2ba90     00 2A 06 F6 | 	mov	local03, #0
2ba94     00 2C 06 F6 | 	mov	local04, #0
2ba98     00 2E 06 F6 | 	mov	local05, #0
2ba9c     97 08 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
2baa0                 | LR__3900
2baa0     13 17 C2 FA | 	rdbyte	arg03, local01
2baa4     20 16 0E F2 | 	cmp	arg03, #32 wz
2baa8     01 26 06 A1 |  if_e	add	local01, #1
2baac     F0 FF 9F AD |  if_e	jmp	#LR__3900
2bab0                 | LR__3901
2bab0     13 31 C2 FA | 	rdbyte	local06, local01
2bab4                 | LR__3902
2bab4     2B 30 0E F2 | 	cmp	local06, #43 wz
2bab8     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2babc     14 00 90 5D |  if_ne	jmp	#LR__3903
2bac0     2D 30 0E F2 | 	cmp	local06, #45 wz
2bac4     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2bac8     01 26 06 F1 | 	add	local01, #1
2bacc     13 31 C2 FA | 	rdbyte	local06, local01
2bad0     E0 FF 9F FD | 	jmp	#LR__3902
2bad4                 | LR__3903
2bad4                 | LR__3904
2bad4     97 08 48 FB | 	callpa	#(@LR__3906-@LR__3905)>>2,fcache_load_ptr_
2bad8                 | LR__3905
2bad8     13 31 C2 FA | 	rdbyte	local06, local01
2badc     5F 30 0E F2 | 	cmp	local06, #95 wz
2bae0     01 26 06 F1 | 	add	local01, #1
2bae4     F0 FF 9F AD |  if_e	jmp	#LR__3905
2bae8                 | LR__3906
2bae8     00 30 0E F2 | 	cmp	local06, #0 wz
2baec     5C 00 90 AD |  if_e	jmp	#LR__3908
2baf0     30 30 56 F2 | 	cmps	local06, #48 wc
2baf4     44 00 90 CD |  if_b	jmp	#LR__3907
2baf8     3A 30 56 F2 | 	cmps	local06, #58 wc
2bafc     3C 00 90 3D |  if_ae	jmp	#LR__3907
2bb00     14 13 02 F6 | 	mov	arg01, local02
2bb04     00 90 20 FF 
2bb08     00 14 06 F6 | 	mov	arg02, ##1092616192
2bb0c     60 F7 BF FD | 	call	#__system___float_mul
2bb10     FD 28 02 F6 | 	mov	local02, result1
2bb14     30 30 86 F1 | 	sub	local06, #48
2bb18     18 13 02 F6 | 	mov	arg01, local06
2bb1c     4C F3 BF FD | 	call	#__system___float_fromuns
2bb20     FD 14 02 F6 | 	mov	arg02, result1
2bb24     14 13 02 F6 | 	mov	arg01, local02
2bb28     74 F3 BF FD | 	call	#__system___float_add
2bb2c     FD 28 02 F6 | 	mov	local02, result1
2bb30     00 2E 0E F2 | 	cmp	local05, #0 wz
2bb34     01 2A 86 51 |  if_ne	sub	local03, #1
2bb38     98 FF 9F FD | 	jmp	#LR__3904
2bb3c                 | LR__3907
2bb3c     2E 30 0E F2 | 	cmp	local06, #46 wz
2bb40     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2bb44     01 2E 06 A6 |  if_e	mov	local05, #1
2bb48     88 FF 9F AD |  if_e	jmp	#LR__3904
2bb4c                 | LR__3908
2bb4c     45 30 0E F2 | 	cmp	local06, #69 wz
2bb50     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2bb54     18 00 90 5D |  if_ne	jmp	#LR__3909
2bb58     13 13 02 F6 | 	mov	arg01, local01
2bb5c     00 14 06 F6 | 	mov	arg02, #0
2bb60     84 FD BF FD | 	call	#__system____builtin_atoi
2bb64     15 FB 01 F1 | 	add	result1, local03
2bb68     FD 32 02 F6 | 	mov	local07, result1
2bb6c     04 00 90 FD | 	jmp	#LR__3910
2bb70                 | LR__3909
2bb70     15 33 02 F6 | 	mov	local07, local03
2bb74                 | LR__3910
2bb74     19 17 02 F6 | 	mov	arg03, local07
2bb78     14 13 02 F6 | 	mov	arg01, local02
2bb7c     00 90 20 FF 
2bb80     00 14 06 F6 | 	mov	arg02, ##1092616192
2bb84     F4 06 B0 FD | 	call	#__system___float_pow_n
2bb88     16 FB 61 F5 | 	xor	result1, local04
2bb8c     A7 F0 03 F6 | 	mov	ptra, fp
2bb90     B2 00 A0 FD | 	call	#popregs_
2bb94                 | __system____builtin_atof_ret
2bb94     2D 00 64 FD | 	ret
2bb98                 | 
2bb98                 | __system____builtin_ilogb
2bb98     F8 FB BF FD | 	call	#__system___float_Unpack
2bb9c     00 FE 0D F2 | 	cmp	result3, #0 wz
2bba0     00 00 40 AF 
2bba4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2bba8     24 00 90 AD |  if_e	jmp	#LR__3921
2bbac     80 FC 0D F2 | 	cmp	result2, #128 wz
2bbb0     18 00 90 5D |  if_ne	jmp	#LR__3920
2bbb4     00 00 10 FF 
2bbb8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2bbbc     1E FA CD A9 |  if_e	bmask	result1, #30
2bbc0     0C 00 90 AD |  if_e	jmp	#LR__3921
2bbc4     1F FA C5 F9 | 	decod	result1, #31
2bbc8     04 00 90 FD | 	jmp	#LR__3921
2bbcc                 | LR__3920
2bbcc     FE FA 01 F6 | 	mov	result1, result2
2bbd0                 | LR__3921
2bbd0                 | __system____builtin_ilogb_ret
2bbd0     2D 00 64 FD | 	ret
2bbd4                 | 
2bbd4                 | __system____builtin_sinf
2bbd4     03 4A 05 F6 | 	mov	COUNT_, #3
2bbd8     A8 00 A0 FD | 	call	#pushregs_
2bbdc     09 27 02 F6 | 	mov	local01, arg01
2bbe0     87 64 20 FF 
2bbe4     DB 15 06 F6 | 	mov	arg02, ##1086918619
2bbe8     88 F8 BF FD | 	call	#__system___float_div
2bbec     FD 12 02 F6 | 	mov	arg01, result1
2bbf0     00 14 06 F6 | 	mov	arg02, #0
2bbf4     40 FB BF FD | 	call	#__system___float_tointeger
2bbf8     FD 16 0A F6 | 	mov	arg03, result1 wz
2bbfc     44 00 90 AD |  if_e	jmp	#LR__3930
2bc00     0B 13 52 F6 | 	abs	arg01, arg03 wc
2bc04     1F 28 C6 C9 |  if_b	decod	local02, #31
2bc08     00 28 06 36 |  if_ae	mov	local02, #0
2bc0c     5C F2 BF FD | 	call	#__system___float_fromuns
2bc10     14 FB 61 F5 | 	xor	result1, local02
2bc14     FD 12 02 F6 | 	mov	arg01, result1
2bc18     1E 14 C6 F9 | 	decod	arg02, #30
2bc1c     50 F6 BF FD | 	call	#__system___float_mul
2bc20     FD 12 02 F6 | 	mov	arg01, result1
2bc24     87 24 20 FF 
2bc28     DB 15 06 F6 | 	mov	arg02, ##1078530011
2bc2c     40 F6 BF FD | 	call	#__system___float_mul
2bc30     FD 14 02 F6 | 	mov	arg02, result1
2bc34     13 13 02 F6 | 	mov	arg01, local01
2bc38     1F 14 E6 F4 | 	bitnot	arg02, #31
2bc3c     60 F2 BF FD | 	call	#__system___float_add
2bc40     FD 26 02 F6 | 	mov	local01, result1
2bc44                 | LR__3930
2bc44     13 13 02 F6 | 	mov	arg01, local01
2bc48     66 E6 1E FF 
2bc4c     CD 14 06 F6 | 	mov	arg02, ##1036831949
2bc50     01 16 06 F6 | 	mov	arg03, #1
2bc54     4C FA BF FD | 	call	#__system___float_cmp
2bc58     00 FA 55 F2 | 	cmps	result1, #0 wc
2bc5c     5C 00 90 3D |  if_ae	jmp	#LR__3931
2bc60     13 13 02 F6 | 	mov	arg01, local01
2bc64     66 E6 5E FF 
2bc68     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2bc6c     01 16 66 F6 | 	neg	arg03, #1
2bc70     30 FA BF FD | 	call	#__system___float_cmp
2bc74     01 FA 55 F2 | 	cmps	result1, #1 wc
2bc78     40 00 90 CD |  if_b	jmp	#LR__3931
2bc7c     13 13 02 F6 | 	mov	arg01, local01
2bc80     13 15 02 F6 | 	mov	arg02, local01
2bc84     E8 F5 BF FD | 	call	#__system___float_mul
2bc88     FD 12 02 F6 | 	mov	arg01, result1
2bc8c     13 15 02 F6 | 	mov	arg02, local01
2bc90     DC F5 BF FD | 	call	#__system___float_mul
2bc94     FD 12 02 F6 | 	mov	arg01, result1
2bc98     00 60 20 FF 
2bc9c     00 14 06 F6 | 	mov	arg02, ##1086324736
2bca0     D0 F7 BF FD | 	call	#__system___float_div
2bca4     FD 14 02 F6 | 	mov	arg02, result1
2bca8     13 13 02 F6 | 	mov	arg01, local01
2bcac     1F 14 E6 F4 | 	bitnot	arg02, #31
2bcb0     EC F1 BF FD | 	call	#__system___float_add
2bcb4     FD 2A 02 F6 | 	mov	local03, result1
2bcb8     54 00 90 FD | 	jmp	#LR__3932
2bcbc                 | LR__3931
2bcbc     13 13 02 F6 | 	mov	arg01, local01
2bcc0     7C 91 26 FF 
2bcc4     83 15 06 F6 | 	mov	arg02, ##1294137731
2bcc8     A4 F5 BF FD | 	call	#__system___float_mul
2bccc     FD 12 02 F6 | 	mov	arg01, result1
2bcd0     00 14 06 F6 | 	mov	arg02, #0
2bcd4     60 FA BF FD | 	call	#__system___float_tointeger
2bcd8     02 FA 65 F0 | 	shl	result1, #2
2bcdc     00 00 A0 FF 
2bce0     FD 00 48 FD | 	qrotate	##1073741824, result1
2bce4     19 12 62 FD | 	getqy	arg01
2bce8     09 13 52 F6 | 	abs	arg01, arg01 wc
2bcec     1F 28 C6 C9 |  if_b	decod	local02, #31
2bcf0     00 28 06 36 |  if_ae	mov	local02, #0
2bcf4     74 F1 BF FD | 	call	#__system___float_fromuns
2bcf8     14 FB 61 F5 | 	xor	result1, local02
2bcfc     FD 12 02 F6 | 	mov	arg01, result1
2bd00     00 40 27 FF 
2bd04     00 14 06 F6 | 	mov	arg02, ##1317011456
2bd08     68 F7 BF FD | 	call	#__system___float_div
2bd0c     FD 2A 02 F6 | 	mov	local03, result1
2bd10                 | LR__3932
2bd10     15 FB 01 F6 | 	mov	result1, local03
2bd14     A7 F0 03 F6 | 	mov	ptra, fp
2bd18     B2 00 A0 FD | 	call	#popregs_
2bd1c                 | __system____builtin_sinf_ret
2bd1c     2D 00 64 FD | 	ret
2bd20                 | 
2bd20                 | __system____builtin_tanf
2bd20     02 4A 05 F6 | 	mov	COUNT_, #2
2bd24     A8 00 A0 FD | 	call	#pushregs_
2bd28     09 27 02 F6 | 	mov	local01, arg01
2bd2c     A4 FE BF FD | 	call	#__system____builtin_sinf
2bd30     FD 28 02 F6 | 	mov	local02, result1
2bd34     13 15 02 F6 | 	mov	arg02, local01
2bd38     87 E4 1F FF 
2bd3c     DB 13 06 F6 | 	mov	arg01, ##1070141403
2bd40     1F 14 E6 F4 | 	bitnot	arg02, #31
2bd44     58 F1 BF FD | 	call	#__system___float_add
2bd48     FD 12 02 F6 | 	mov	arg01, result1
2bd4c     84 FE BF FD | 	call	#__system____builtin_sinf
2bd50     FD 14 02 F6 | 	mov	arg02, result1
2bd54     14 13 02 F6 | 	mov	arg01, local02
2bd58     18 F7 BF FD | 	call	#__system___float_div
2bd5c     A7 F0 03 F6 | 	mov	ptra, fp
2bd60     B2 00 A0 FD | 	call	#popregs_
2bd64                 | __system____builtin_tanf_ret
2bd64     2D 00 64 FD | 	ret
2bd68                 | 
2bd68                 | __system____builtin_asinf
2bd68     01 4A 05 F6 | 	mov	COUNT_, #1
2bd6c     A8 00 A0 FD | 	call	#pushregs_
2bd70     09 27 02 F6 | 	mov	local01, arg01
2bd74     13 15 02 F6 | 	mov	arg02, local01
2bd78     13 13 02 F6 | 	mov	arg01, local01
2bd7c     F0 F4 BF FD | 	call	#__system___float_mul
2bd80     FD 14 02 F6 | 	mov	arg02, result1
2bd84     00 C0 1F FF 
2bd88     00 12 06 F6 | 	mov	arg01, ##1065353216
2bd8c     1F 14 E6 F4 | 	bitnot	arg02, #31
2bd90     0C F1 BF FD | 	call	#__system___float_add
2bd94     FD 12 02 F6 | 	mov	arg01, result1
2bd98     FC F3 BF FD | 	call	#__system___float_sqrt
2bd9c     FD 14 02 F6 | 	mov	arg02, result1
2bda0     13 13 02 F6 | 	mov	arg01, local01
2bda4     58 00 B0 FD | 	call	#__system____builtin_atan2f
2bda8     A7 F0 03 F6 | 	mov	ptra, fp
2bdac     B2 00 A0 FD | 	call	#popregs_
2bdb0                 | __system____builtin_asinf_ret
2bdb0     2D 00 64 FD | 	ret
2bdb4                 | 
2bdb4                 | __system____builtin_acosf
2bdb4     01 4A 05 F6 | 	mov	COUNT_, #1
2bdb8     A8 00 A0 FD | 	call	#pushregs_
2bdbc     09 27 02 F6 | 	mov	local01, arg01
2bdc0     13 15 02 F6 | 	mov	arg02, local01
2bdc4     13 13 02 F6 | 	mov	arg01, local01
2bdc8     A4 F4 BF FD | 	call	#__system___float_mul
2bdcc     FD 14 02 F6 | 	mov	arg02, result1
2bdd0     00 C0 1F FF 
2bdd4     00 12 06 F6 | 	mov	arg01, ##1065353216
2bdd8     1F 14 E6 F4 | 	bitnot	arg02, #31
2bddc     C0 F0 BF FD | 	call	#__system___float_add
2bde0     FD 12 02 F6 | 	mov	arg01, result1
2bde4     B0 F3 BF FD | 	call	#__system___float_sqrt
2bde8     FD 12 02 F6 | 	mov	arg01, result1
2bdec     13 15 02 F6 | 	mov	arg02, local01
2bdf0     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2bdf4     A7 F0 03 F6 | 	mov	ptra, fp
2bdf8     B2 00 A0 FD | 	call	#popregs_
2bdfc                 | __system____builtin_acosf_ret
2bdfc     2D 00 64 FD | 	ret
2be00                 | 
2be00                 | __system____builtin_atan2f
2be00     04 4A 05 F6 | 	mov	COUNT_, #4
2be04     A8 00 A0 FD | 	call	#pushregs_
2be08     09 27 02 F6 | 	mov	local01, arg01
2be0c     0A 29 02 F6 | 	mov	local02, arg02
2be10     13 13 02 F6 | 	mov	arg01, local01
2be14     00 14 06 F6 | 	mov	arg02, #0
2be18     01 16 06 F6 | 	mov	arg03, #1
2be1c     84 F8 BF FD | 	call	#__system___float_cmp
2be20     00 FA 0D F2 | 	cmp	result1, #0 wz
2be24     28 00 90 5D |  if_ne	jmp	#LR__3940
2be28     14 13 02 F6 | 	mov	arg01, local02
2be2c     00 14 06 F6 | 	mov	arg02, #0
2be30     01 16 06 F6 | 	mov	arg03, #1
2be34     6C F8 BF FD | 	call	#__system___float_cmp
2be38     00 FA 55 F2 | 	cmps	result1, #0 wc
2be3c     87 24 60 CF 
2be40     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2be44     DC 00 90 CD |  if_b	jmp	#LR__3941
2be48     00 FA 05 F6 | 	mov	result1, #0
2be4c     D4 00 90 FD | 	jmp	#LR__3941
2be50                 | LR__3940
2be50     14 13 02 F6 | 	mov	arg01, local02
2be54     14 15 02 F6 | 	mov	arg02, local02
2be58     14 F4 BF FD | 	call	#__system___float_mul
2be5c     FD 2A 02 F6 | 	mov	local03, result1
2be60     13 13 02 F6 | 	mov	arg01, local01
2be64     13 15 02 F6 | 	mov	arg02, local01
2be68     04 F4 BF FD | 	call	#__system___float_mul
2be6c     FD 14 02 F6 | 	mov	arg02, result1
2be70     15 13 02 F6 | 	mov	arg01, local03
2be74     28 F0 BF FD | 	call	#__system___float_add
2be78     FD 12 02 F6 | 	mov	arg01, result1
2be7c     18 F3 BF FD | 	call	#__system___float_sqrt
2be80     FD 2A 02 F6 | 	mov	local03, result1
2be84     14 13 02 F6 | 	mov	arg01, local02
2be88     15 15 02 F6 | 	mov	arg02, local03
2be8c     E4 F5 BF FD | 	call	#__system___float_div
2be90     FD 28 02 F6 | 	mov	local02, result1
2be94     13 13 02 F6 | 	mov	arg01, local01
2be98     15 15 02 F6 | 	mov	arg02, local03
2be9c     D4 F5 BF FD | 	call	#__system___float_div
2bea0     FD 26 02 F6 | 	mov	local01, result1
2bea4     00 40 27 FF 
2bea8     00 12 06 F6 | 	mov	arg01, ##1317011456
2beac     14 15 02 F6 | 	mov	arg02, local02
2beb0     BC F3 BF FD | 	call	#__system___float_mul
2beb4     FD 12 02 F6 | 	mov	arg01, result1
2beb8     00 14 06 F6 | 	mov	arg02, #0
2bebc     78 F8 BF FD | 	call	#__system___float_tointeger
2bec0     FD 2A 02 F6 | 	mov	local03, result1
2bec4     00 40 27 FF 
2bec8     00 12 06 F6 | 	mov	arg01, ##1317011456
2becc     13 15 02 F6 | 	mov	arg02, local01
2bed0     9C F3 BF FD | 	call	#__system___float_mul
2bed4     FD 12 02 F6 | 	mov	arg01, result1
2bed8     00 14 06 F6 | 	mov	arg02, #0
2bedc     58 F8 BF FD | 	call	#__system___float_tointeger
2bee0     FD 2A 52 FD | 	qvector	local03, result1
2bee4     87 24 20 FF 
2bee8     DB 2B 06 F6 | 	mov	local03, ##1078530011
2beec     19 12 62 FD | 	getqy	arg01
2bef0     01 12 C6 F0 | 	sar	arg01, #1
2bef4     09 13 52 F6 | 	abs	arg01, arg01 wc
2bef8     1F 2C C6 C9 |  if_b	decod	local04, #31
2befc     00 2C 06 36 |  if_ae	mov	local04, #0
2bf00     68 EF BF FD | 	call	#__system___float_fromuns
2bf04     16 FB 61 F5 | 	xor	result1, local04
2bf08     FD 12 02 F6 | 	mov	arg01, result1
2bf0c     00 40 27 FF 
2bf10     00 14 06 F6 | 	mov	arg02, ##1317011456
2bf14     5C F5 BF FD | 	call	#__system___float_div
2bf18     FD 14 02 F6 | 	mov	arg02, result1
2bf1c     15 13 02 F6 | 	mov	arg01, local03
2bf20     4C F3 BF FD | 	call	#__system___float_mul
2bf24                 | LR__3941
2bf24     A7 F0 03 F6 | 	mov	ptra, fp
2bf28     B2 00 A0 FD | 	call	#popregs_
2bf2c                 | __system____builtin_atan2f_ret
2bf2c     2D 00 64 FD | 	ret
2bf30                 | 
2bf30                 | __system____builtin_exp2f
2bf30     04 4A 05 F6 | 	mov	COUNT_, #4
2bf34     A8 00 A0 FD | 	call	#pushregs_
2bf38     09 27 02 F6 | 	mov	local01, arg01
2bf3c     00 7F 21 FF 
2bf40     00 14 06 F6 | 	mov	arg02, ##1123942400
2bf44     01 16 66 F6 | 	neg	arg03, #1
2bf48     58 F7 BF FD | 	call	#__system___float_cmp
2bf4c     00 FA 55 F2 | 	cmps	result1, #0 wc
2bf50     00 C0 3F 3F 
2bf54     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2bf58     DC 00 90 3D |  if_ae	jmp	#LR__3951
2bf5c     13 13 02 F6 | 	mov	arg01, local01
2bf60     00 7F 61 FF 
2bf64     00 14 06 F6 | 	mov	arg02, ##-1023541248
2bf68     01 16 06 F6 | 	mov	arg03, #1
2bf6c     34 F7 BF FD | 	call	#__system___float_cmp
2bf70     00 FA 55 F2 | 	cmps	result1, #0 wc
2bf74     00 FA 05 C6 |  if_b	mov	result1, #0
2bf78     BC 00 90 CD |  if_b	jmp	#LR__3951
2bf7c     13 13 02 F6 | 	mov	arg01, local01
2bf80     00 14 06 F6 | 	mov	arg02, #0
2bf84     B0 F7 BF FD | 	call	#__system___float_tointeger
2bf88     FD 28 02 F6 | 	mov	local02, result1
2bf8c     14 13 52 F6 | 	abs	arg01, local02 wc
2bf90     1F 2A C6 C9 |  if_b	decod	local03, #31
2bf94     00 2A 06 36 |  if_ae	mov	local03, #0
2bf98     D0 EE BF FD | 	call	#__system___float_fromuns
2bf9c     15 FB 61 F5 | 	xor	result1, local03
2bfa0     FD 14 02 F6 | 	mov	arg02, result1
2bfa4     13 13 02 F6 | 	mov	arg01, local01
2bfa8     1F 14 E6 F4 | 	bitnot	arg02, #31
2bfac     F0 EE BF FD | 	call	#__system___float_add
2bfb0     FD 2C 02 F6 | 	mov	local04, result1
2bfb4     16 13 02 F6 | 	mov	arg01, local04
2bfb8     00 14 06 F6 | 	mov	arg02, #0
2bfbc     01 16 06 F6 | 	mov	arg03, #1
2bfc0     E0 F6 BF FD | 	call	#__system___float_cmp
2bfc4     00 FA 55 F2 | 	cmps	result1, #0 wc
2bfc8     18 00 90 3D |  if_ae	jmp	#LR__3950
2bfcc     16 13 02 F6 | 	mov	arg01, local04
2bfd0     00 C0 1F FF 
2bfd4     00 14 06 F6 | 	mov	arg02, ##1065353216
2bfd8     C4 EE BF FD | 	call	#__system___float_add
2bfdc     FD 2C 02 F6 | 	mov	local04, result1
2bfe0     01 28 86 F1 | 	sub	local02, #1
2bfe4                 | LR__3950
2bfe4     7F 28 06 F1 | 	add	local02, #127
2bfe8     17 28 66 F0 | 	shl	local02, #23
2bfec     16 13 02 F6 | 	mov	arg01, local04
2bff0     00 80 26 FF 
2bff4     00 14 06 F6 | 	mov	arg02, ##1291845632
2bff8     74 F2 BF FD | 	call	#__system___float_mul
2bffc     FD 12 02 F6 | 	mov	arg01, result1
2c000     00 14 06 F6 | 	mov	arg02, #0
2c004     30 F7 BF FD | 	call	#__system___float_tointeger
2c008     FD 2C 0A F6 | 	mov	local04, result1 wz
2c00c     14 FB 01 A6 |  if_e	mov	result1, local02
2c010     24 00 90 AD |  if_e	jmp	#LR__3951
2c014     3E 2C 26 F4 | 	bith	local04, #62
2c018     0F 2C 62 FD | 	qexp	local04
2c01c     14 13 02 F6 | 	mov	arg01, local02
2c020     18 14 62 FD | 	getqx	arg02
2c024     01 14 06 F1 | 	add	arg02, #1
2c028     01 14 46 F0 | 	shr	arg02, #1
2c02c     00 80 1F FF 
2c030     00 14 06 F1 | 	add	arg02, ##1056964608
2c034     38 F2 BF FD | 	call	#__system___float_mul
2c038                 | LR__3951
2c038     A7 F0 03 F6 | 	mov	ptra, fp
2c03c     B2 00 A0 FD | 	call	#popregs_
2c040                 | __system____builtin_exp2f_ret
2c040     2D 00 64 FD | 	ret
2c044                 | 
2c044                 | __system____builtin_log2f
2c044     06 4A 05 F6 | 	mov	COUNT_, #6
2c048     A8 00 A0 FD | 	call	#pushregs_
2c04c     09 27 02 F6 | 	mov	local01, arg01
2c050     09 29 0A F6 | 	mov	local02, arg01 wz
2c054     00 00 40 5F 
2c058     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2c05c     00 40 00 AF 
2c060     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2c064     08 01 90 AD |  if_e	jmp	#LR__3964
2c068     00 28 56 F2 | 	cmps	local02, #0 wc
2c06c     00 E0 3F CF 
2c070     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2c074     F8 00 90 CD |  if_b	jmp	#LR__3964
2c078     13 13 02 F6 | 	mov	arg01, local01
2c07c     00 90 20 FF 
2c080     00 14 06 F6 | 	mov	arg02, ##1092616192
2c084     01 16 06 F6 | 	mov	arg03, #1
2c088     18 F6 BF FD | 	call	#__system___float_cmp
2c08c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c090     4D 2A 20 AF 
2c094     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2c098     D4 00 90 AD |  if_e	jmp	#LR__3964
2c09c     13 13 02 F6 | 	mov	arg01, local01
2c0a0     FC 16 20 FF 
2c0a4     54 14 06 F6 | 	mov	arg02, ##1076754516
2c0a8     01 16 06 F6 | 	mov	arg03, #1
2c0ac     F4 F5 BF FD | 	call	#__system___float_cmp
2c0b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0b4     55 DC 1F AF 
2c0b8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2c0bc     B0 00 90 AD |  if_e	jmp	#LR__3964
2c0c0     14 2B 02 F6 | 	mov	local03, local02
2c0c4     17 2A 46 F0 | 	shr	local03, #23
2c0c8     15 2B E2 F8 | 	getbyte	local03, local03, #0
2c0cc     17 29 06 F4 | 	bitl	local02, #279
2c0d0     14 2D 02 F6 | 	mov	local04, local02
2c0d4     FF 2A 0E F2 | 	cmp	local03, #255 wz
2c0d8     1C 00 90 5D |  if_ne	jmp	#LR__3960
2c0dc     00 2C 0E F2 | 	cmp	local04, #0 wz
2c0e0     00 C0 3F 5F 
2c0e4     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2c0e8     00 E0 3F AF 
2c0ec     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2c0f0     17 FB 01 F6 | 	mov	result1, local05
2c0f4     78 00 90 FD | 	jmp	#LR__3964
2c0f8                 | LR__3960
2c0f8     00 2A 0E F2 | 	cmp	local03, #0 wz
2c0fc     17 2C 26 54 |  if_ne	bith	local04, #23
2c100     7F 2A 86 51 |  if_ne	sub	local03, #127
2c104     28 00 90 5D |  if_ne	jmp	#LR__3963
2c108     00 2C 0E F2 | 	cmp	local04, #0 wz
2c10c     00 40 00 AF 
2c110     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2c114     58 00 90 AD |  if_e	jmp	#LR__3964
2c118     7E 2A 66 F6 | 	neg	local03, #126
2c11c     97 08 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
2c120                 | LR__3961
2c120     17 2C 2E F4 | 	testbn	local04, #23 wz
2c124     01 2C 66 A0 |  if_e	shl	local04, #1
2c128     01 2A 06 A1 |  if_e	add	local03, #1
2c12c     F0 FF 9F AD |  if_e	jmp	#LR__3961
2c130                 | LR__3962
2c130                 | LR__3963
2c130     0E 2C 62 FD | 	qlog	local04
2c134     01 2A 86 F1 | 	sub	local03, #1
2c138     15 13 52 F6 | 	abs	arg01, local03 wc
2c13c     1F 30 C6 C9 |  if_b	decod	local06, #31
2c140     00 30 06 36 |  if_ae	mov	local06, #0
2c144     18 2E 62 FD | 	getqx	local05
2c148     9B 2E 06 F4 | 	bitl	local05, #155
2c14c     08 2E 06 F1 | 	add	local05, #8
2c150     04 2E 46 F0 | 	shr	local05, #4
2c154     00 C0 1F FF 
2c158     00 2E 06 F1 | 	add	local05, ##1065353216
2c15c     0C ED BF FD | 	call	#__system___float_fromuns
2c160     18 FB 61 F5 | 	xor	result1, local06
2c164     FD 14 02 F6 | 	mov	arg02, result1
2c168     17 13 02 F6 | 	mov	arg01, local05
2c16c     30 ED BF FD | 	call	#__system___float_add
2c170                 | LR__3964
2c170     A7 F0 03 F6 | 	mov	ptra, fp
2c174     B2 00 A0 FD | 	call	#popregs_
2c178                 | __system____builtin_log2f_ret
2c178     2D 00 64 FD | 	ret
2c17c                 | 
2c17c                 | __system____builtin_powf
2c17c     04 4A 05 F6 | 	mov	COUNT_, #4
2c180     A8 00 A0 FD | 	call	#pushregs_
2c184     09 27 02 F6 | 	mov	local01, arg01
2c188     0A 29 02 F6 | 	mov	local02, arg02
2c18c     14 13 02 F6 | 	mov	arg01, local02
2c190     00 14 06 F6 | 	mov	arg02, #0
2c194     A0 F5 BF FD | 	call	#__system___float_tointeger
2c198     FD 2A 02 F6 | 	mov	local03, result1
2c19c     15 13 52 F6 | 	abs	arg01, local03 wc
2c1a0     1F 2C C6 C9 |  if_b	decod	local04, #31
2c1a4     00 2C 06 36 |  if_ae	mov	local04, #0
2c1a8     C0 EC BF FD | 	call	#__system___float_fromuns
2c1ac     16 FB 61 F5 | 	xor	result1, local04
2c1b0     FD 12 02 F6 | 	mov	arg01, result1
2c1b4     14 15 02 F6 | 	mov	arg02, local02
2c1b8     01 16 06 F6 | 	mov	arg03, #1
2c1bc     E4 F4 BF FD | 	call	#__system___float_cmp
2c1c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1c4     18 00 90 5D |  if_ne	jmp	#LR__3970
2c1c8     00 C0 1F FF 
2c1cc     00 12 06 F6 | 	mov	arg01, ##1065353216
2c1d0     13 15 02 F6 | 	mov	arg02, local01
2c1d4     15 17 02 F6 | 	mov	arg03, local03
2c1d8     A0 00 B0 FD | 	call	#__system___float_pow_n
2c1dc     58 00 90 FD | 	jmp	#LR__3971
2c1e0                 | LR__3970
2c1e0     13 13 02 F6 | 	mov	arg01, local01
2c1e4     00 14 06 F6 | 	mov	arg02, #0
2c1e8     01 16 06 F6 | 	mov	arg03, #1
2c1ec     B4 F4 BF FD | 	call	#__system___float_cmp
2c1f0     00 FA 55 F2 | 	cmps	result1, #0 wc
2c1f4     00 E0 3F CF 
2c1f8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2c1fc     38 00 90 CD |  if_b	jmp	#LR__3971
2c200     13 13 02 F6 | 	mov	arg01, local01
2c204     00 14 06 F6 | 	mov	arg02, #0
2c208     01 16 06 F6 | 	mov	arg03, #1
2c20c     94 F4 BF FD | 	call	#__system___float_cmp
2c210     00 FA 0D F2 | 	cmp	result1, #0 wz
2c214     00 FA 05 A6 |  if_e	mov	result1, #0
2c218     1C 00 90 AD |  if_e	jmp	#LR__3971
2c21c     13 13 02 F6 | 	mov	arg01, local01
2c220     20 FE BF FD | 	call	#__system____builtin_log2f
2c224     FD 12 02 F6 | 	mov	arg01, result1
2c228     14 15 02 F6 | 	mov	arg02, local02
2c22c     40 F0 BF FD | 	call	#__system___float_mul
2c230     FD 12 02 F6 | 	mov	arg01, result1
2c234     F8 FC BF FD | 	call	#__system____builtin_exp2f
2c238                 | LR__3971
2c238     A7 F0 03 F6 | 	mov	ptra, fp
2c23c     B2 00 A0 FD | 	call	#popregs_
2c240                 | __system____builtin_powf_ret
2c240     2D 00 64 FD | 	ret
2c244                 | 
2c244                 | __system____builtin_logbase
2c244     02 4A 05 F6 | 	mov	COUNT_, #2
2c248     A8 00 A0 FD | 	call	#pushregs_
2c24c     09 27 02 F6 | 	mov	local01, arg01
2c250     0A 13 02 F6 | 	mov	arg01, arg02
2c254     EC FD BF FD | 	call	#__system____builtin_log2f
2c258     FD 28 02 F6 | 	mov	local02, result1
2c25c     13 13 02 F6 | 	mov	arg01, local01
2c260     E0 FD BF FD | 	call	#__system____builtin_log2f
2c264     FD 14 02 F6 | 	mov	arg02, result1
2c268     14 13 02 F6 | 	mov	arg01, local02
2c26c     04 F2 BF FD | 	call	#__system___float_div
2c270     A7 F0 03 F6 | 	mov	ptra, fp
2c274     B2 00 A0 FD | 	call	#popregs_
2c278                 | __system____builtin_logbase_ret
2c278     2D 00 64 FD | 	ret
2c27c                 | 
2c27c                 | __system___float_pow_n
2c27c     05 4A 05 F6 | 	mov	COUNT_, #5
2c280     A8 00 A0 FD | 	call	#pushregs_
2c284     09 27 02 F6 | 	mov	local01, arg01
2c288     0A 29 02 F6 | 	mov	local02, arg02
2c28c     0B 2B 02 F6 | 	mov	local03, arg03
2c290     00 2A 56 F2 | 	cmps	local03, #0 wc
2c294     18 00 90 3D |  if_ae	jmp	#LR__3980
2c298     01 2C 06 F6 | 	mov	local04, #1
2c29c     15 2B 62 F6 | 	neg	local03, local03
2c2a0     00 2A 56 F2 | 	cmps	local03, #0 wc
2c2a4     00 FA 05 C6 |  if_b	mov	result1, #0
2c2a8     94 00 90 CD |  if_b	jmp	#LR__3988
2c2ac     04 00 90 FD | 	jmp	#LR__3981
2c2b0                 | LR__3980
2c2b0     00 2C 06 F6 | 	mov	local04, #0
2c2b4                 | LR__3981
2c2b4     00 C0 1F FF 
2c2b8     00 2E 06 F6 | 	mov	local05, ##1065353216
2c2bc                 | LR__3982
2c2bc     01 2A 56 F2 | 	cmps	local03, #1 wc
2c2c0     30 00 90 CD |  if_b	jmp	#LR__3984
2c2c4     01 2A CE F7 | 	test	local03, #1 wz
2c2c8     10 00 90 AD |  if_e	jmp	#LR__3983
2c2cc     17 13 02 F6 | 	mov	arg01, local05
2c2d0     14 15 02 F6 | 	mov	arg02, local02
2c2d4     98 EF BF FD | 	call	#__system___float_mul
2c2d8     FD 2E 02 F6 | 	mov	local05, result1
2c2dc                 | LR__3983
2c2dc     01 2A C6 F0 | 	sar	local03, #1
2c2e0     14 13 02 F6 | 	mov	arg01, local02
2c2e4     14 15 02 F6 | 	mov	arg02, local02
2c2e8     84 EF BF FD | 	call	#__system___float_mul
2c2ec     FD 28 02 F6 | 	mov	local02, result1
2c2f0     C8 FF 9F FD | 	jmp	#LR__3982
2c2f4                 | LR__3984
2c2f4     00 2C 0E F2 | 	cmp	local04, #0 wz
2c2f8     14 00 90 AD |  if_e	jmp	#LR__3985
2c2fc     13 13 02 F6 | 	mov	arg01, local01
2c300     17 15 02 F6 | 	mov	arg02, local05
2c304     6C F1 BF FD | 	call	#__system___float_div
2c308     FD 2E 02 F6 | 	mov	local05, result1
2c30c     2C 00 90 FD | 	jmp	#LR__3987
2c310                 | LR__3985
2c310     13 13 02 F6 | 	mov	arg01, local01
2c314     00 C0 1F FF 
2c318     00 14 06 F6 | 	mov	arg02, ##1065353216
2c31c     01 16 06 F6 | 	mov	arg03, #1
2c320     80 F3 BF FD | 	call	#__system___float_cmp
2c324     00 FA 0D F2 | 	cmp	result1, #0 wz
2c328     10 00 90 AD |  if_e	jmp	#LR__3986
2c32c     13 13 02 F6 | 	mov	arg01, local01
2c330     17 15 02 F6 | 	mov	arg02, local05
2c334     38 EF BF FD | 	call	#__system___float_mul
2c338     FD 2E 02 F6 | 	mov	local05, result1
2c33c                 | LR__3986
2c33c                 | LR__3987
2c33c     17 FB 01 F6 | 	mov	result1, local05
2c340                 | LR__3988
2c340     A7 F0 03 F6 | 	mov	ptra, fp
2c344     B2 00 A0 FD | 	call	#popregs_
2c348                 | __system___float_pow_n_ret
2c348     2D 00 64 FD | 	ret
2c34c                 | 
2c34c                 | __system___gc_ptrs
2c34c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2c350     00 03 02 F6 | 	mov	_var02, _var01
2c354     BB 00 00 FF 
2c358     F8 02 06 F1 | 	add	_var02, ##95992
2c35c     00 FD 09 FB | 	rdlong	result2, _var01 wz
2c360     74 00 90 5D |  if_ne	jmp	#LR__3990
2c364     01 FD 01 F6 | 	mov	result2, _var02
2c368     00 FD 81 F1 | 	sub	result2, _var01
2c36c     00 03 58 FC | 	wrword	#1, _var01
2c370     00 FB 01 F6 | 	mov	result1, _var01
2c374     02 FA 05 F1 | 	add	result1, #2
2c378     36 00 80 FF 
2c37c     FD 20 59 FC | 	wrword	##27792, result1
2c380     00 FB 01 F6 | 	mov	result1, _var01
2c384     04 FA 05 F1 | 	add	result1, #4
2c388     FD 00 58 FC | 	wrword	#0, result1
2c38c     00 FB 01 F6 | 	mov	result1, _var01
2c390     06 FA 05 F1 | 	add	result1, #6
2c394     FD 02 58 FC | 	wrword	#1, result1
2c398     10 00 06 F1 | 	add	_var01, #16
2c39c     FE FC 51 F6 | 	abs	result2, result2 wc
2c3a0     04 FC 45 F0 | 	shr	result2, #4
2c3a4     FE FC 81 F6 | 	negc	result2, result2
2c3a8     00 FD 51 FC | 	wrword	result2, _var01
2c3ac     00 FD 01 F6 | 	mov	result2, _var01
2c3b0     02 FC 05 F1 | 	add	result2, #2
2c3b4     36 00 80 FF 
2c3b8     FE 1E 59 FC | 	wrword	##27791, result2
2c3bc     00 FD 01 F6 | 	mov	result2, _var01
2c3c0     04 FC 05 F1 | 	add	result2, #4
2c3c4     FE 00 58 FC | 	wrword	#0, result2
2c3c8     00 FD 01 F6 | 	mov	result2, _var01
2c3cc     06 FC 05 F1 | 	add	result2, #6
2c3d0     FE 00 58 FC | 	wrword	#0, result2
2c3d4     10 00 86 F1 | 	sub	_var01, #16
2c3d8                 | LR__3990
2c3d8     00 FB 01 F6 | 	mov	result1, _var01
2c3dc     01 FD 01 F6 | 	mov	result2, _var02
2c3e0                 | __system___gc_ptrs_ret
2c3e0     2D 00 64 FD | 	ret
2c3e4                 | 
2c3e4                 | __system___gc_tryalloc
2c3e4     0B 4A 05 F6 | 	mov	COUNT_, #11
2c3e8     A8 00 A0 FD | 	call	#pushregs_
2c3ec     09 27 02 F6 | 	mov	local01, arg01
2c3f0     0A 29 02 F6 | 	mov	local02, arg02
2c3f4     54 FF BF FD | 	call	#__system___gc_ptrs
2c3f8     FD 2A 02 F6 | 	mov	local03, result1
2c3fc     FE 2C 02 F6 | 	mov	local04, result2
2c400     15 2F 02 F6 | 	mov	local05, local03
2c404     00 30 06 F6 | 	mov	local06, #0
2c408     97 1E 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
2c40c                 | LR__4000
2c40c     17 33 02 F6 | 	mov	local07, local05
2c410     06 2E 06 F1 | 	add	local05, #6
2c414     17 15 EA FA | 	rdword	arg02, local05 wz
2c418     15 13 02 F6 | 	mov	arg01, local03
2c41c     00 FA 05 A6 |  if_e	mov	result1, #0
2c420     04 14 66 50 |  if_ne	shl	arg02, #4
2c424     0A 13 02 51 |  if_ne	add	arg01, arg02
2c428     09 FB 01 56 |  if_ne	mov	result1, arg01
2c42c     FD 2E 0A F6 | 	mov	local05, result1 wz
2c430     17 31 E2 5A |  if_ne	rdword	local06, local05
2c434     00 2E 0E F2 | 	cmp	local05, #0 wz
2c438     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2c43c     08 00 90 1D |  if_a	jmp	#LR__4002
2c440     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2c444     C4 FF 9F 1D |  if_a	jmp	#LR__4000
2c448                 | LR__4001
2c448                 | LR__4002
2c448     00 2E 0E F2 | 	cmp	local05, #0 wz
2c44c     17 FB 01 A6 |  if_e	mov	result1, local05
2c450     3C 01 90 AD |  if_e	jmp	#LR__4005
2c454     17 FD 01 F6 | 	mov	result2, local05
2c458     06 FC 05 F1 | 	add	result2, #6
2c45c     FE 34 E2 FA | 	rdword	local08, result2
2c460     18 27 52 F2 | 	cmps	local01, local06 wc
2c464     C0 00 90 3D |  if_ae	jmp	#LR__4004
2c468     17 27 52 FC | 	wrword	local01, local05
2c46c     17 13 02 F6 | 	mov	arg01, local05
2c470     13 35 02 F6 | 	mov	local08, local01
2c474     04 34 66 F0 | 	shl	local08, #4
2c478     1A 13 02 F1 | 	add	arg01, local08
2c47c     13 31 82 F1 | 	sub	local06, local01
2c480     09 31 52 FC | 	wrword	local06, arg01
2c484     09 35 02 F6 | 	mov	local08, arg01
2c488     02 34 06 F1 | 	add	local08, #2
2c48c     36 00 80 FF 
2c490     1A 1F 59 FC | 	wrword	##27791, local08
2c494     17 15 0A F6 | 	mov	arg02, local05 wz
2c498     00 FA 05 A6 |  if_e	mov	result1, #0
2c49c     15 15 82 51 |  if_ne	sub	arg02, local03
2c4a0     04 14 46 50 |  if_ne	shr	arg02, #4
2c4a4     0A FB 01 56 |  if_ne	mov	result1, arg02
2c4a8     09 35 02 F6 | 	mov	local08, arg01
2c4ac     04 34 06 F1 | 	add	local08, #4
2c4b0     1A FB 51 FC | 	wrword	result1, local08
2c4b4     17 35 02 F6 | 	mov	local08, local05
2c4b8     06 34 06 F1 | 	add	local08, #6
2c4bc     09 15 02 F6 | 	mov	arg02, arg01
2c4c0     1A 35 E2 FA | 	rdword	local08, local08
2c4c4     06 14 06 F1 | 	add	arg02, #6
2c4c8     0A 35 52 FC | 	wrword	local08, arg02
2c4cc     09 37 02 F6 | 	mov	local09, arg01
2c4d0     1B 15 0A F6 | 	mov	arg02, local09 wz
2c4d4     00 FA 05 A6 |  if_e	mov	result1, #0
2c4d8     15 15 82 51 |  if_ne	sub	arg02, local03
2c4dc     04 14 46 50 |  if_ne	shr	arg02, #4
2c4e0     0A FB 01 56 |  if_ne	mov	result1, arg02
2c4e4     FD 34 02 F6 | 	mov	local08, result1
2c4e8     09 39 EA FA | 	rdword	local10, arg01 wz
2c4ec     00 FA 05 A6 |  if_e	mov	result1, #0
2c4f0     04 38 66 50 |  if_ne	shl	local10, #4
2c4f4     1C 13 02 51 |  if_ne	add	arg01, local10
2c4f8     09 FB 01 56 |  if_ne	mov	result1, arg01
2c4fc     FD 3A 0A F6 | 	mov	local11, result1 wz
2c500     24 00 90 AD |  if_e	jmp	#LR__4003
2c504     16 3B 52 F2 | 	cmps	local11, local04 wc
2c508     1C 00 90 3D |  if_ae	jmp	#LR__4003
2c50c     1B 15 0A F6 | 	mov	arg02, local09 wz
2c510     00 FA 05 A6 |  if_e	mov	result1, #0
2c514     15 15 82 51 |  if_ne	sub	arg02, local03
2c518     04 14 46 50 |  if_ne	shr	arg02, #4
2c51c     0A FB 01 56 |  if_ne	mov	result1, arg02
2c520     04 3A 06 F1 | 	add	local11, #4
2c524     1D FB 51 FC | 	wrword	result1, local11
2c528                 | LR__4003
2c528                 | LR__4004
2c528     06 32 06 F1 | 	add	local07, #6
2c52c     19 35 52 FC | 	wrword	local08, local07
2c530     36 00 00 FF 
2c534     80 36 06 F6 | 	mov	local09, ##27776
2c538     14 37 42 F5 | 	or	local09, local02
2c53c     00 FA 05 F6 | 	mov	result1, #0
2c540     01 FA 61 FD | 	cogid	result1
2c544     FD 36 42 F5 | 	or	local09, result1
2c548     17 3B 02 F6 | 	mov	local11, local05
2c54c     02 3A 06 F1 | 	add	local11, #2
2c550     1D 37 52 FC | 	wrword	local09, local11
2c554     15 37 02 F6 | 	mov	local09, local03
2c558     08 36 06 F1 | 	add	local09, #8
2c55c     17 3B 02 F6 | 	mov	local11, local05
2c560     1B 37 E2 FA | 	rdword	local09, local09
2c564     06 3A 06 F1 | 	add	local11, #6
2c568     1D 37 52 FC | 	wrword	local09, local11
2c56c     17 15 0A F6 | 	mov	arg02, local05 wz
2c570     00 FA 05 A6 |  if_e	mov	result1, #0
2c574     15 15 82 51 |  if_ne	sub	arg02, local03
2c578     04 14 46 50 |  if_ne	shr	arg02, #4
2c57c     0A FB 01 56 |  if_ne	mov	result1, arg02
2c580     08 2A 06 F1 | 	add	local03, #8
2c584     15 FB 51 FC | 	wrword	result1, local03
2c588     08 2E 06 F1 | 	add	local05, #8
2c58c     17 FB 01 F6 | 	mov	result1, local05
2c590                 | LR__4005
2c590     A7 F0 03 F6 | 	mov	ptra, fp
2c594     B2 00 A0 FD | 	call	#popregs_
2c598                 | __system___gc_tryalloc_ret
2c598     2D 00 64 FD | 	ret
2c59c                 | 
2c59c                 | __system___gc_alloc_managed
2c59c     01 4A 05 F6 | 	mov	COUNT_, #1
2c5a0     A8 00 A0 FD | 	call	#pushregs_
2c5a4     09 27 02 F6 | 	mov	local01, arg01
2c5a8     00 14 06 F6 | 	mov	arg02, #0
2c5ac     1C 00 B0 FD | 	call	#__system___gc_doalloc
2c5b0     FD 14 0A F6 | 	mov	arg02, result1 wz
2c5b4     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2c5b8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2c5bc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2c5c0     A7 F0 03 F6 | 	mov	ptra, fp
2c5c4     B2 00 A0 FD | 	call	#popregs_
2c5c8                 | __system___gc_alloc_managed_ret
2c5c8     2D 00 64 FD | 	ret
2c5cc                 | 
2c5cc                 | __system___gc_doalloc
2c5cc     06 4A 05 F6 | 	mov	COUNT_, #6
2c5d0     A8 00 A0 FD | 	call	#pushregs_
2c5d4     09 27 0A F6 | 	mov	local01, arg01 wz
2c5d8     0A 29 02 F6 | 	mov	local02, arg02
2c5dc     00 FA 05 A6 |  if_e	mov	result1, #0
2c5e0     8C 00 90 AD |  if_e	jmp	#LR__4017
2c5e4     17 26 06 F1 | 	add	local01, #23
2c5e8     0F 26 26 F5 | 	andn	local01, #15
2c5ec     04 26 46 F0 | 	shr	local01, #4
2c5f0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c5f4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c5f8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c5fc     F4 BD BF FD | 	call	#__system___lockmem
2c600     13 13 02 F6 | 	mov	arg01, local01
2c604     14 15 02 F6 | 	mov	arg02, local02
2c608     D8 FD BF FD | 	call	#__system___gc_tryalloc
2c60c     FD 2A 0A F6 | 	mov	local03, result1 wz
2c610     14 00 90 5D |  if_ne	jmp	#LR__4010
2c614     70 03 B0 FD | 	call	#__system___gc_docollect
2c618     13 13 02 F6 | 	mov	arg01, local01
2c61c     14 15 02 F6 | 	mov	arg02, local02
2c620     C0 FD BF FD | 	call	#__system___gc_tryalloc
2c624     FD 2A 02 F6 | 	mov	local03, result1
2c628                 | LR__4010
2c628     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c62c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c630     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c634     09 01 68 FC | 	wrlong	#0, arg01
2c638     00 2A 0E F2 | 	cmp	local03, #0 wz
2c63c     2C 00 90 AD |  if_e	jmp	#LR__4016
2c640     04 26 66 F0 | 	shl	local01, #4
2c644     08 26 86 F1 | 	sub	local01, #8
2c648     13 2D 52 F6 | 	abs	local04, local01 wc
2c64c     02 2C 46 F0 | 	shr	local04, #2
2c650     16 2F 8A F6 | 	negc	local05, local04 wz
2c654     15 31 02 F6 | 	mov	local06, local03
2c658     10 00 90 AD |  if_e	jmp	#LR__4015
2c65c     97 06 48 FB | 	callpa	#(@LR__4013-@LR__4011)>>2,fcache_load_ptr_
2c660                 | LR__4011
2c660     17 05 D8 FC | 	rep	@LR__4014, local05
2c664                 | LR__4012
2c664     18 01 68 FC | 	wrlong	#0, local06
2c668     04 30 06 F1 | 	add	local06, #4
2c66c                 | LR__4013
2c66c                 | LR__4014
2c66c                 | LR__4015
2c66c                 | LR__4016
2c66c     15 FB 01 F6 | 	mov	result1, local03
2c670                 | LR__4017
2c670     A7 F0 03 F6 | 	mov	ptra, fp
2c674     B2 00 A0 FD | 	call	#popregs_
2c678                 | __system___gc_doalloc_ret
2c678     2D 00 64 FD | 	ret
2c67c                 | 
2c67c                 | __system___gc_isvalidptr
2c67c     F8 16 06 F4 | 	bitl	arg03, #248
2c680     08 16 86 F1 | 	sub	arg03, #8
2c684     09 17 52 F2 | 	cmps	arg03, arg01 wc
2c688     08 00 90 CD |  if_b	jmp	#LR__4020
2c68c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2c690     08 00 90 CD |  if_b	jmp	#LR__4021
2c694                 | LR__4020
2c694     00 FA 05 F6 | 	mov	result1, #0
2c698     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2c69c                 | LR__4021
2c69c     0B 01 02 F6 | 	mov	_var01, arg03
2c6a0     09 01 62 F5 | 	xor	_var01, arg01
2c6a4     0F 00 CE F7 | 	test	_var01, #15 wz
2c6a8     00 FA 05 56 |  if_ne	mov	result1, #0
2c6ac     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2c6b0     0B 01 02 F6 | 	mov	_var01, arg03
2c6b4     02 00 06 F1 | 	add	_var01, #2
2c6b8     00 01 E2 FA | 	rdword	_var01, _var01
2c6bc     7F 00 00 FF 
2c6c0     C0 01 06 F5 | 	and	_var01, ##65472
2c6c4     36 00 00 FF 
2c6c8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2c6cc     00 FA 05 56 |  if_ne	mov	result1, #0
2c6d0     0B FB 01 A6 |  if_e	mov	result1, arg03
2c6d4                 | __system___gc_isvalidptr_ret
2c6d4     2D 00 64 FD | 	ret
2c6d8                 | 
2c6d8                 | __system___gc_free
2c6d8     09 17 02 F6 | 	mov	arg03, arg01
2c6dc     6C FC BF FD | 	call	#__system___gc_ptrs
2c6e0     FD 12 02 F6 | 	mov	arg01, result1
2c6e4     FE 14 02 F6 | 	mov	arg02, result2
2c6e8     90 FF BF FD | 	call	#__system___gc_isvalidptr
2c6ec     FD 14 0A F6 | 	mov	arg02, result1 wz
2c6f0     28 00 90 AD |  if_e	jmp	#LR__4030
2c6f4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c6f8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c6fc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c700     F0 BC BF FD | 	call	#__system___lockmem
2c704     0A 13 02 F6 | 	mov	arg01, arg02
2c708     14 00 B0 FD | 	call	#__system___gc_dofree
2c70c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c710     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c714     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c718     09 01 68 FC | 	wrlong	#0, arg01
2c71c                 | LR__4030
2c71c                 | __system___gc_free_ret
2c71c     2D 00 64 FD | 	ret
2c720                 | 
2c720                 | __system___gc_dofree
2c720     06 4A 05 F6 | 	mov	COUNT_, #6
2c724     A8 00 A0 FD | 	call	#pushregs_
2c728     09 27 02 F6 | 	mov	local01, arg01
2c72c     1C FC BF FD | 	call	#__system___gc_ptrs
2c730     FD 28 02 F6 | 	mov	local02, result1
2c734     FE 2A 02 F6 | 	mov	local03, result2
2c738     13 15 02 F6 | 	mov	arg02, local01
2c73c     02 14 06 F1 | 	add	arg02, #2
2c740     36 00 80 FF 
2c744     0A 1F 59 FC | 	wrword	##27791, arg02
2c748     13 2D 02 F6 | 	mov	local04, local01
2c74c     13 13 02 F6 | 	mov	arg01, local01
2c750     09 2F EA FA | 	rdword	local05, arg01 wz
2c754     00 FA 05 A6 |  if_e	mov	result1, #0
2c758     04 2E 66 50 |  if_ne	shl	local05, #4
2c75c     17 13 02 51 |  if_ne	add	arg01, local05
2c760     09 FB 01 56 |  if_ne	mov	result1, arg01
2c764     FD 30 02 F6 | 	mov	local06, result1
2c768     97 24 48 FB | 	callpa	#(@LR__4041-@LR__4040)>>2,fcache_load_ptr_
2c76c                 | LR__4040
2c76c     04 2C 06 F1 | 	add	local04, #4
2c770     16 15 EA FA | 	rdword	arg02, local04 wz
2c774     14 13 02 F6 | 	mov	arg01, local02
2c778     00 FA 05 A6 |  if_e	mov	result1, #0
2c77c     04 14 66 50 |  if_ne	shl	arg02, #4
2c780     0A 13 02 51 |  if_ne	add	arg01, arg02
2c784     09 FB 01 56 |  if_ne	mov	result1, arg01
2c788     FD 2C 0A F6 | 	mov	local04, result1 wz
2c78c     24 00 90 AD |  if_e	jmp	#LR__4042
2c790     16 13 02 F6 | 	mov	arg01, local04
2c794     00 FA 05 F6 | 	mov	result1, #0
2c798     02 12 06 F1 | 	add	arg01, #2
2c79c     09 13 E2 FA | 	rdword	arg01, arg01
2c7a0     36 00 00 FF 
2c7a4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c7a8     01 FA 65 A6 |  if_e	neg	result1, #1
2c7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7b0     B8 FF 9F AD |  if_e	jmp	#LR__4040
2c7b4                 | LR__4041
2c7b4                 | LR__4042
2c7b4     00 2C 0E F2 | 	cmp	local04, #0 wz
2c7b8     14 2D 02 A6 |  if_e	mov	local04, local02
2c7bc     16 15 02 F6 | 	mov	arg02, local04
2c7c0     06 14 06 F1 | 	add	arg02, #6
2c7c4     13 13 02 F6 | 	mov	arg01, local01
2c7c8     0A 15 E2 FA | 	rdword	arg02, arg02
2c7cc     06 12 06 F1 | 	add	arg01, #6
2c7d0     09 15 52 FC | 	wrword	arg02, arg01
2c7d4     13 15 0A F6 | 	mov	arg02, local01 wz
2c7d8     00 FA 05 A6 |  if_e	mov	result1, #0
2c7dc     14 15 82 51 |  if_ne	sub	arg02, local02
2c7e0     04 14 46 50 |  if_ne	shr	arg02, #4
2c7e4     0A FB 01 56 |  if_ne	mov	result1, arg02
2c7e8     16 15 02 F6 | 	mov	arg02, local04
2c7ec     06 14 06 F1 | 	add	arg02, #6
2c7f0     0A FB 51 FC | 	wrword	result1, arg02
2c7f4     14 2D 0A F2 | 	cmp	local04, local02 wz
2c7f8     A4 00 90 AD |  if_e	jmp	#LR__4045
2c7fc     16 13 02 F6 | 	mov	arg01, local04
2c800     09 2F EA FA | 	rdword	local05, arg01 wz
2c804     00 FA 05 A6 |  if_e	mov	result1, #0
2c808     04 2E 66 50 |  if_ne	shl	local05, #4
2c80c     17 13 02 51 |  if_ne	add	arg01, local05
2c810     09 FB 01 56 |  if_ne	mov	result1, arg01
2c814     13 FB 09 F2 | 	cmp	result1, local01 wz
2c818     84 00 90 5D |  if_ne	jmp	#LR__4044
2c81c     16 31 E2 FA | 	rdword	local06, local04
2c820     13 15 E2 FA | 	rdword	arg02, local01
2c824     0A 31 02 F1 | 	add	local06, arg02
2c828     16 31 52 FC | 	wrword	local06, local04
2c82c     13 31 02 F6 | 	mov	local06, local01
2c830     02 30 06 F1 | 	add	local06, #2
2c834     18 01 58 FC | 	wrword	#0, local06
2c838     13 13 02 F6 | 	mov	arg01, local01
2c83c     09 2F EA FA | 	rdword	local05, arg01 wz
2c840     00 FA 05 A6 |  if_e	mov	result1, #0
2c844     04 2E 66 50 |  if_ne	shl	local05, #4
2c848     17 13 02 51 |  if_ne	add	arg01, local05
2c84c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c850     FD 30 02 F6 | 	mov	local06, result1
2c854     15 31 52 F2 | 	cmps	local06, local03 wc
2c858     20 00 90 3D |  if_ae	jmp	#LR__4043
2c85c     16 15 0A F6 | 	mov	arg02, local04 wz
2c860     00 FA 05 A6 |  if_e	mov	result1, #0
2c864     14 15 82 51 |  if_ne	sub	arg02, local02
2c868     04 14 46 50 |  if_ne	shr	arg02, #4
2c86c     0A FB 01 56 |  if_ne	mov	result1, arg02
2c870     18 15 02 F6 | 	mov	arg02, local06
2c874     04 14 06 F1 | 	add	arg02, #4
2c878     0A FB 51 FC | 	wrword	result1, arg02
2c87c                 | LR__4043
2c87c     13 15 02 F6 | 	mov	arg02, local01
2c880     06 14 06 F1 | 	add	arg02, #6
2c884     16 FD 01 F6 | 	mov	result2, local04
2c888     0A 15 E2 FA | 	rdword	arg02, arg02
2c88c     06 FC 05 F1 | 	add	result2, #6
2c890     FE 14 52 FC | 	wrword	arg02, result2
2c894     06 26 06 F1 | 	add	local01, #6
2c898     13 01 58 FC | 	wrword	#0, local01
2c89c     16 27 02 F6 | 	mov	local01, local04
2c8a0                 | LR__4044
2c8a0                 | LR__4045
2c8a0     13 13 02 F6 | 	mov	arg01, local01
2c8a4     09 2F EA FA | 	rdword	local05, arg01 wz
2c8a8     00 FA 05 A6 |  if_e	mov	result1, #0
2c8ac     04 2E 66 50 |  if_ne	shl	local05, #4
2c8b0     17 13 02 51 |  if_ne	add	arg01, local05
2c8b4     09 FB 01 56 |  if_ne	mov	result1, arg01
2c8b8     FD 14 0A F6 | 	mov	arg02, result1 wz
2c8bc     B8 00 90 AD |  if_e	jmp	#LR__4047
2c8c0     15 15 52 F2 | 	cmps	arg02, local03 wc
2c8c4     B0 00 90 3D |  if_ae	jmp	#LR__4047
2c8c8     0A 13 02 F6 | 	mov	arg01, arg02
2c8cc     00 FA 05 F6 | 	mov	result1, #0
2c8d0     02 12 06 F1 | 	add	arg01, #2
2c8d4     09 13 E2 FA | 	rdword	arg01, arg01
2c8d8     36 00 00 FF 
2c8dc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c8e0     01 FA 65 A6 |  if_e	neg	result1, #1
2c8e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8e8     8C 00 90 AD |  if_e	jmp	#LR__4047
2c8ec     13 2D 02 F6 | 	mov	local04, local01
2c8f0     16 31 E2 FA | 	rdword	local06, local04
2c8f4     0A 13 02 F6 | 	mov	arg01, arg02
2c8f8     09 27 E2 FA | 	rdword	local01, arg01
2c8fc     13 31 02 F1 | 	add	local06, local01
2c900     16 31 52 FC | 	wrword	local06, local04
2c904     09 31 02 F6 | 	mov	local06, arg01
2c908     06 30 06 F1 | 	add	local06, #6
2c90c     16 27 02 F6 | 	mov	local01, local04
2c910     18 31 E2 FA | 	rdword	local06, local06
2c914     06 26 06 F1 | 	add	local01, #6
2c918     13 31 52 FC | 	wrword	local06, local01
2c91c     09 31 02 F6 | 	mov	local06, arg01
2c920     02 30 06 F1 | 	add	local06, #2
2c924     18 55 59 FC | 	wrword	#170, local06
2c928     09 31 02 F6 | 	mov	local06, arg01
2c92c     06 30 06 F1 | 	add	local06, #6
2c930     18 01 58 FC | 	wrword	#0, local06
2c934     09 2F EA FA | 	rdword	local05, arg01 wz
2c938     00 FA 05 A6 |  if_e	mov	result1, #0
2c93c     04 2E 66 50 |  if_ne	shl	local05, #4
2c940     17 13 02 51 |  if_ne	add	arg01, local05
2c944     09 FB 01 56 |  if_ne	mov	result1, arg01
2c948     FD 30 0A F6 | 	mov	local06, result1 wz
2c94c     28 00 90 AD |  if_e	jmp	#LR__4046
2c950     15 31 52 F2 | 	cmps	local06, local03 wc
2c954     20 00 90 3D |  if_ae	jmp	#LR__4046
2c958     16 15 0A F6 | 	mov	arg02, local04 wz
2c95c     00 FA 05 A6 |  if_e	mov	result1, #0
2c960     14 15 82 51 |  if_ne	sub	arg02, local02
2c964     04 14 46 50 |  if_ne	shr	arg02, #4
2c968     0A FB 01 56 |  if_ne	mov	result1, arg02
2c96c     18 2D 02 F6 | 	mov	local04, local06
2c970     04 2C 06 F1 | 	add	local04, #4
2c974     16 FB 51 FC | 	wrword	result1, local04
2c978                 | LR__4046
2c978                 | LR__4047
2c978     18 FB 01 F6 | 	mov	result1, local06
2c97c     A7 F0 03 F6 | 	mov	ptra, fp
2c980     B2 00 A0 FD | 	call	#popregs_
2c984                 | __system___gc_dofree_ret
2c984     2D 00 64 FD | 	ret
2c988                 | 
2c988                 | __system___gc_docollect
2c988     05 4A 05 F6 | 	mov	COUNT_, #5
2c98c     A8 00 A0 FD | 	call	#pushregs_
2c990     B8 F9 BF FD | 	call	#__system___gc_ptrs
2c994     FE 26 02 F6 | 	mov	local01, result2
2c998     FD 28 02 F6 | 	mov	local02, result1
2c99c     14 13 02 F6 | 	mov	arg01, local02
2c9a0     09 2B EA FA | 	rdword	local03, arg01 wz
2c9a4     00 FA 05 A6 |  if_e	mov	result1, #0
2c9a8     04 2A 66 50 |  if_ne	shl	local03, #4
2c9ac     15 13 02 51 |  if_ne	add	arg01, local03
2c9b0     09 FB 01 56 |  if_ne	mov	result1, arg01
2c9b4     FD 2C 0A F6 | 	mov	local04, result1 wz
2c9b8     00 FA 05 F6 | 	mov	result1, #0
2c9bc     01 FA 61 FD | 	cogid	result1
2c9c0     FD 2E 02 F6 | 	mov	local05, result1
2c9c4     48 00 90 AD |  if_e	jmp	#LR__4052
2c9c8     97 22 48 FB | 	callpa	#(@LR__4051-@LR__4050)>>2,fcache_load_ptr_
2c9cc                 | LR__4050
2c9cc     13 2D 52 F2 | 	cmps	local04, local01 wc
2c9d0     3C 00 90 3D |  if_ae	jmp	#LR__4052
2c9d4     16 15 02 F6 | 	mov	arg02, local04
2c9d8     02 14 06 F1 | 	add	arg02, #2
2c9dc     0A 15 E2 FA | 	rdword	arg02, arg02
2c9e0     20 14 26 F5 | 	andn	arg02, #32
2c9e4     16 13 02 F6 | 	mov	arg01, local04
2c9e8     02 12 06 F1 | 	add	arg01, #2
2c9ec     09 15 52 FC | 	wrword	arg02, arg01
2c9f0     16 13 02 F6 | 	mov	arg01, local04
2c9f4     09 2B EA FA | 	rdword	local03, arg01 wz
2c9f8     00 FA 05 A6 |  if_e	mov	result1, #0
2c9fc     04 2A 66 50 |  if_ne	shl	local03, #4
2ca00     15 13 02 51 |  if_ne	add	arg01, local03
2ca04     09 FB 01 56 |  if_ne	mov	result1, arg01
2ca08     FD 2C 0A F6 | 	mov	local04, result1 wz
2ca0c     BC FF 9F 5D |  if_ne	jmp	#LR__4050
2ca10                 | LR__4051
2ca10                 | LR__4052
2ca10     00 2A 06 F6 | 	mov	local03, #0
2ca14     00 12 06 F6 | 	mov	arg01, #0
2ca18     B0 B9 BF FD | 	call	#__system____topofstack
2ca1c     FD 14 02 F6 | 	mov	arg02, result1
2ca20     15 13 02 F6 | 	mov	arg01, local03
2ca24     90 00 B0 FD | 	call	#__system___gc_markhub
2ca28     1C 01 B0 FD | 	call	#__system___gc_markcog
2ca2c     14 13 02 F6 | 	mov	arg01, local02
2ca30     09 2B EA FA | 	rdword	local03, arg01 wz
2ca34     00 FA 05 A6 |  if_e	mov	result1, #0
2ca38     04 2A 66 50 |  if_ne	shl	local03, #4
2ca3c     15 13 02 51 |  if_ne	add	arg01, local03
2ca40     09 FB 01 56 |  if_ne	mov	result1, arg01
2ca44     FD 28 0A F6 | 	mov	local02, result1 wz
2ca48     60 00 90 AD |  if_e	jmp	#LR__4056
2ca4c                 | LR__4053
2ca4c     14 2D 02 F6 | 	mov	local04, local02
2ca50     16 13 02 F6 | 	mov	arg01, local04
2ca54     09 2B EA FA | 	rdword	local03, arg01 wz
2ca58     00 FA 05 A6 |  if_e	mov	result1, #0
2ca5c     04 2A 66 50 |  if_ne	shl	local03, #4
2ca60     15 13 02 51 |  if_ne	add	arg01, local03
2ca64     09 FB 01 56 |  if_ne	mov	result1, arg01
2ca68     FD 28 02 F6 | 	mov	local02, result1
2ca6c     16 15 02 F6 | 	mov	arg02, local04
2ca70     02 14 06 F1 | 	add	arg02, #2
2ca74     0A 15 E2 FA | 	rdword	arg02, arg02
2ca78     20 14 CE F7 | 	test	arg02, #32 wz
2ca7c     10 14 CE A7 |  if_e	test	arg02, #16 wz
2ca80     1C 00 90 5D |  if_ne	jmp	#LR__4055
2ca84     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2ca88     17 15 0A F2 | 	cmp	arg02, local05 wz
2ca8c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2ca90     0C 00 90 5D |  if_ne	jmp	#LR__4054
2ca94     16 13 02 F6 | 	mov	arg01, local04
2ca98     84 FC BF FD | 	call	#__system___gc_dofree
2ca9c     FD 28 02 F6 | 	mov	local02, result1
2caa0                 | LR__4054
2caa0                 | LR__4055
2caa0     00 28 0E F2 | 	cmp	local02, #0 wz
2caa4     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2caa8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__4053
2caac                 | LR__4056
2caac     A7 F0 03 F6 | 	mov	ptra, fp
2cab0     B2 00 A0 FD | 	call	#popregs_
2cab4                 | __system___gc_docollect_ret
2cab4     2D 00 64 FD | 	ret
2cab8                 | 
2cab8                 | __system___gc_markhub
2cab8     04 4A 05 F6 | 	mov	COUNT_, #4
2cabc     A8 00 A0 FD | 	call	#pushregs_
2cac0     09 27 02 F6 | 	mov	local01, arg01
2cac4     0A 29 02 F6 | 	mov	local02, arg02
2cac8     80 F8 BF FD | 	call	#__system___gc_ptrs
2cacc     FD 2A 02 F6 | 	mov	local03, result1
2cad0     FE 2C 02 F6 | 	mov	local04, result2
2cad4                 | LR__4060
2cad4     14 27 52 F2 | 	cmps	local01, local02 wc
2cad8     60 00 90 3D |  if_ae	jmp	#LR__4061
2cadc     13 17 02 FB | 	rdlong	arg03, local01
2cae0     04 26 06 F1 | 	add	local01, #4
2cae4     16 15 02 F6 | 	mov	arg02, local04
2cae8     15 13 02 F6 | 	mov	arg01, local03
2caec     8C FB BF FD | 	call	#__system___gc_isvalidptr
2caf0     FD 16 0A F6 | 	mov	arg03, result1 wz
2caf4     DC FF 9F AD |  if_e	jmp	#LR__4060
2caf8     0B 13 02 F6 | 	mov	arg01, arg03
2cafc     00 FA 05 F6 | 	mov	result1, #0
2cb00     02 12 06 F1 | 	add	arg01, #2
2cb04     09 13 E2 FA | 	rdword	arg01, arg01
2cb08     36 00 00 FF 
2cb0c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2cb10     01 FA 65 A6 |  if_e	neg	result1, #1
2cb14     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb18     B8 FF 9F 5D |  if_ne	jmp	#LR__4060
2cb1c     0B FD 01 F6 | 	mov	result2, arg03
2cb20     02 FC 05 F1 | 	add	result2, #2
2cb24     FE FC E1 FA | 	rdword	result2, result2
2cb28     0F FC 25 F5 | 	andn	result2, #15
2cb2c     2E FC 45 F5 | 	or	result2, #46
2cb30     02 16 06 F1 | 	add	arg03, #2
2cb34     0B FD 51 FC | 	wrword	result2, arg03
2cb38     98 FF 9F FD | 	jmp	#LR__4060
2cb3c                 | LR__4061
2cb3c     A7 F0 03 F6 | 	mov	ptra, fp
2cb40     B2 00 A0 FD | 	call	#popregs_
2cb44                 | __system___gc_markhub_ret
2cb44     2D 00 64 FD | 	ret
2cb48                 | 
2cb48                 | __system___gc_markcog
2cb48     04 4A 05 F6 | 	mov	COUNT_, #4
2cb4c     A8 00 A0 FD | 	call	#pushregs_
2cb50     F8 F7 BF FD | 	call	#__system___gc_ptrs
2cb54     FD 26 02 F6 | 	mov	local01, result1
2cb58     FE 28 02 F6 | 	mov	local02, result2
2cb5c     EF 2B 06 F6 | 	mov	local03, #495
2cb60                 | LR__4070
2cb60                 | 	'.live	local03
2cb60     00 2A 96 F9 | 	alts	local03, #0
2cb64     15 2D 02 F6 | 	mov	local04, local03
2cb68     13 13 02 F6 | 	mov	arg01, local01
2cb6c     14 15 02 F6 | 	mov	arg02, local02
2cb70     16 17 02 F6 | 	mov	arg03, local04
2cb74     04 FB BF FD | 	call	#__system___gc_isvalidptr
2cb78     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb7c     18 00 90 AD |  if_e	jmp	#LR__4071
2cb80     FD 2C 02 F6 | 	mov	local04, result1
2cb84     02 2C 06 F1 | 	add	local04, #2
2cb88     16 2D E2 FA | 	rdword	local04, local04
2cb8c     20 2C 46 F5 | 	or	local04, #32
2cb90     02 FA 05 F1 | 	add	result1, #2
2cb94     FD 2C 52 FC | 	wrword	local04, result1
2cb98                 | LR__4071
2cb98     01 2A 86 F1 | 	sub	local03, #1
2cb9c     00 2A 56 F2 | 	cmps	local03, #0 wc
2cba0     BC FF 9F 3D |  if_ae	jmp	#LR__4070
2cba4     A7 F0 03 F6 | 	mov	ptra, fp
2cba8     B2 00 A0 FD | 	call	#popregs_
2cbac                 | __system___gc_markcog_ret
2cbac     2D 00 64 FD | 	ret
2cbb0                 | 
2cbb0                 | __system__opendir
2cbb0     06 4A 05 F6 | 	mov	COUNT_, #6
2cbb4     A8 00 A0 FD | 	call	#pushregs_
2cbb8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2cbbc     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2cbc0     09 15 02 F6 | 	mov	arg02, arg01
2cbc4     13 13 02 F6 | 	mov	arg01, local01
2cbc8     00 16 06 F6 | 	mov	arg03, #0
2cbcc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2cbd0     B8 BF BF FD | 	call	#__system____getvfsforfile
2cbd4     FD 28 0A F6 | 	mov	local02, result1 wz
2cbd8     10 00 90 AD |  if_e	jmp	#LR__4080
2cbdc     28 28 06 F1 | 	add	local02, #40
2cbe0     14 17 0A FB | 	rdlong	arg03, local02 wz
2cbe4     28 28 86 F1 | 	sub	local02, #40
2cbe8     14 00 90 5D |  if_ne	jmp	#LR__4081
2cbec                 | LR__4080
2cbec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cbf0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2cbf4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cbf8     00 FA 05 F6 | 	mov	result1, #0
2cbfc     90 00 90 FD | 	jmp	#LR__4083
2cc00                 | LR__4081
2cc00     5C 12 06 F6 | 	mov	arg01, #92
2cc04     10 14 06 F6 | 	mov	arg02, #16
2cc08     C0 F9 BF FD | 	call	#__system___gc_doalloc
2cc0c     FD 2A 0A F6 | 	mov	local03, result1 wz
2cc10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cc14     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2cc18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cc1c     00 FA 05 A6 |  if_e	mov	result1, #0
2cc20     6C 00 90 AD |  if_e	jmp	#LR__4083
2cc24     28 28 06 F1 | 	add	local02, #40
2cc28     14 2D 02 FB | 	rdlong	local04, local02
2cc2c     16 2F 02 F6 | 	mov	local05, local04
2cc30     28 28 86 F1 | 	sub	local02, #40
2cc34     13 2E 46 F7 | 	zerox	local05, #19
2cc38     14 2C 46 F0 | 	shr	local04, #20
2cc3c     02 2C 66 F0 | 	shl	local04, #2
2cc40     ED 2C 02 F1 | 	add	local04, __methods__
2cc44     16 2D 02 FB | 	rdlong	local04, local04
2cc48     15 13 02 F6 | 	mov	arg01, local03
2cc4c     13 15 02 F6 | 	mov	arg02, local01
2cc50     F2 30 02 F6 | 	mov	local06, objptr
2cc54     17 E5 01 F6 | 	mov	objptr, local05
2cc58     2D 2C 62 FD | 	call	local04
2cc5c     18 E5 01 F6 | 	mov	objptr, local06
2cc60     FD 16 0A F6 | 	mov	arg03, result1 wz
2cc64     20 00 90 AD |  if_e	jmp	#LR__4082
2cc68     00 16 4E F2 | 	cmps	arg03, #0 wz
2cc6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cc70     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2cc74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cc78     15 13 02 F6 | 	mov	arg01, local03
2cc7c     58 FA BF FD | 	call	#__system___gc_free
2cc80     00 FA 05 F6 | 	mov	result1, #0
2cc84     08 00 90 FD | 	jmp	#LR__4083
2cc88                 | LR__4082
2cc88     15 29 62 FC | 	wrlong	local02, local03
2cc8c     15 FB 01 F6 | 	mov	result1, local03
2cc90                 | LR__4083
2cc90     A7 F0 03 F6 | 	mov	ptra, fp
2cc94     B2 00 A0 FD | 	call	#popregs_
2cc98                 | __system__opendir_ret
2cc98     2D 00 64 FD | 	ret
2cc9c                 | 
2cc9c                 | __system__closedir
2cc9c     04 4A 05 F6 | 	mov	COUNT_, #4
2cca0     A8 00 A0 FD | 	call	#pushregs_
2cca4     09 27 02 F6 | 	mov	local01, arg01
2cca8     13 13 02 FB | 	rdlong	arg01, local01
2ccac     2C 12 06 F1 | 	add	arg01, #44
2ccb0     09 29 02 FB | 	rdlong	local02, arg01
2ccb4     14 2B 02 F6 | 	mov	local03, local02
2ccb8     13 2A 46 F7 | 	zerox	local03, #19
2ccbc     14 28 46 F0 | 	shr	local02, #20
2ccc0     02 28 66 F0 | 	shl	local02, #2
2ccc4     ED 28 02 F1 | 	add	local02, __methods__
2ccc8     14 29 02 FB | 	rdlong	local02, local02
2cccc     13 13 02 F6 | 	mov	arg01, local01
2ccd0     F2 2C 02 F6 | 	mov	local04, objptr
2ccd4     15 E5 01 F6 | 	mov	objptr, local03
2ccd8     2D 28 62 FD | 	call	local02
2ccdc     16 E5 01 F6 | 	mov	objptr, local04
2cce0     FD 2C 02 F6 | 	mov	local04, result1
2cce4     13 13 02 F6 | 	mov	arg01, local01
2cce8     EC F9 BF FD | 	call	#__system___gc_free
2ccec     00 2C 4E F2 | 	cmps	local04, #0 wz
2ccf0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ccf4     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2ccf8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ccfc     01 FA 65 56 |  if_ne	neg	result1, #1
2cd00     00 FA 05 A6 |  if_e	mov	result1, #0
2cd04     A7 F0 03 F6 | 	mov	ptra, fp
2cd08     B2 00 A0 FD | 	call	#popregs_
2cd0c                 | __system__closedir_ret
2cd0c     2D 00 64 FD | 	ret
2cd10                 | 
2cd10                 | __system__readdir
2cd10     04 4A 05 F6 | 	mov	COUNT_, #4
2cd14     A8 00 A0 FD | 	call	#pushregs_
2cd18     09 15 0A FB | 	rdlong	arg02, arg01 wz
2cd1c     08 12 06 F1 | 	add	arg01, #8
2cd20     09 27 02 F6 | 	mov	local01, arg01
2cd24     08 12 86 F1 | 	sub	arg01, #8
2cd28     00 FA 05 A6 |  if_e	mov	result1, #0
2cd2c     5C 00 90 AD |  if_e	jmp	#LR__4091
2cd30     30 14 06 F1 | 	add	arg02, #48
2cd34     0A 29 02 FB | 	rdlong	local02, arg02
2cd38     14 2B 02 F6 | 	mov	local03, local02
2cd3c     13 2A 46 F7 | 	zerox	local03, #19
2cd40     14 28 46 F0 | 	shr	local02, #20
2cd44     02 28 66 F0 | 	shl	local02, #2
2cd48     ED 28 02 F1 | 	add	local02, __methods__
2cd4c     14 29 02 FB | 	rdlong	local02, local02
2cd50     13 15 02 F6 | 	mov	arg02, local01
2cd54     F2 2C 02 F6 | 	mov	local04, objptr
2cd58     15 E5 01 F6 | 	mov	objptr, local03
2cd5c     2D 28 62 FD | 	call	local02
2cd60     16 E5 01 F6 | 	mov	objptr, local04
2cd64     00 FA 4D F2 | 	cmps	result1, #0 wz
2cd68     1C 00 90 AD |  if_e	jmp	#LR__4090
2cd6c     01 FA 55 F2 | 	cmps	result1, #1 wc
2cd70     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2cd74     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2cd78     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2cd7c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2cd80     00 FA 05 F6 | 	mov	result1, #0
2cd84     04 00 90 FD | 	jmp	#LR__4091
2cd88                 | LR__4090
2cd88     13 FB 01 F6 | 	mov	result1, local01
2cd8c                 | LR__4091
2cd8c     A7 F0 03 F6 | 	mov	ptra, fp
2cd90     B2 00 A0 FD | 	call	#popregs_
2cd94                 | __system__readdir_ret
2cd94     2D 00 64 FD | 	ret
2cd98                 | 
2cd98                 | __system___openraw
2cd98     15 4A 05 F6 | 	mov	COUNT_, #21
2cd9c     A8 00 A0 FD | 	call	#pushregs_
2cda0     09 27 02 F6 | 	mov	local01, arg01
2cda4     0A 29 02 F6 | 	mov	local02, arg02
2cda8     0B 2B 02 F6 | 	mov	local03, arg03
2cdac     0C 2D 02 F6 | 	mov	local04, arg04
2cdb0     04 2E 06 F6 | 	mov	local05, #4
2cdb4     13 31 02 F6 | 	mov	local06, local01
2cdb8     00 32 06 F6 | 	mov	local07, #0
2cdbc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2cdc0     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2cdc4     1A 13 02 F6 | 	mov	arg01, local08
2cdc8     14 15 02 F6 | 	mov	arg02, local02
2cdcc     00 16 06 F6 | 	mov	arg03, #0
2cdd0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2cdd4     B4 BD BF FD | 	call	#__system____getvfsforfile
2cdd8     FD 36 0A F6 | 	mov	local09, result1 wz
2cddc     10 00 90 AD |  if_e	jmp	#LR__4100
2cde0     20 36 06 F1 | 	add	local09, #32
2cde4     1B FB 09 FB | 	rdlong	result1, local09 wz
2cde8     20 36 86 F1 | 	sub	local09, #32
2cdec     14 00 90 5D |  if_ne	jmp	#LR__4101
2cdf0                 | LR__4100
2cdf0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cdf4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2cdf8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cdfc     01 FA 65 F6 | 	neg	result1, #1
2ce00     8C 02 90 FD | 	jmp	#LR__4114
2ce04                 | LR__4101
2ce04     18 13 02 F6 | 	mov	arg01, local06
2ce08     00 14 06 F6 | 	mov	arg02, #0
2ce0c     34 16 06 F6 | 	mov	arg03, #52
2ce10     09 39 02 F6 | 	mov	local10, arg01
2ce14     98 00 A0 FD | 	call	#\builtin_bytefill_
2ce18     20 36 06 F1 | 	add	local09, #32
2ce1c     1B 3B 02 FB | 	rdlong	local11, local09
2ce20     1D 3D 02 F6 | 	mov	local12, local11
2ce24     1D 3F 02 F6 | 	mov	local13, local11
2ce28     20 36 86 F1 | 	sub	local09, #32
2ce2c     1F 41 02 F6 | 	mov	local14, local13
2ce30     13 3C 46 F7 | 	zerox	local12, #19
2ce34     14 40 46 F0 | 	shr	local14, #20
2ce38     02 40 66 F0 | 	shl	local14, #2
2ce3c     ED 40 02 F1 | 	add	local14, __methods__
2ce40     20 41 02 FB | 	rdlong	local14, local14
2ce44     18 43 02 F6 | 	mov	local15, local06
2ce48     1A 45 02 F6 | 	mov	local16, local08
2ce4c     15 47 02 F6 | 	mov	local17, local03
2ce50     21 13 02 F6 | 	mov	arg01, local15
2ce54     22 15 02 F6 | 	mov	arg02, local16
2ce58     23 17 02 F6 | 	mov	arg03, local17
2ce5c     F2 48 02 F6 | 	mov	local18, objptr
2ce60     1E E5 01 F6 | 	mov	objptr, local12
2ce64     2D 40 62 FD | 	call	local14
2ce68     24 E5 01 F6 | 	mov	objptr, local18
2ce6c     FD 4A 0A F6 | 	mov	local19, result1 wz
2ce70     04 2A CE 57 |  if_ne	test	local03, #4 wz
2ce74     58 00 90 AD |  if_e	jmp	#LR__4102
2ce78     24 36 06 F1 | 	add	local09, #36
2ce7c     1B 3B 02 FB | 	rdlong	local11, local09
2ce80     1D 3D 02 F6 | 	mov	local12, local11
2ce84     1D 3F 02 F6 | 	mov	local13, local11
2ce88     24 36 86 F1 | 	sub	local09, #36
2ce8c     1F 41 02 F6 | 	mov	local14, local13
2ce90     13 3C 46 F7 | 	zerox	local12, #19
2ce94     14 40 46 F0 | 	shr	local14, #20
2ce98     02 40 66 F0 | 	shl	local14, #2
2ce9c     ED 40 02 F1 | 	add	local14, __methods__
2cea0     20 41 02 FB | 	rdlong	local14, local14
2cea4     18 43 02 F6 | 	mov	local15, local06
2cea8     1A 45 02 F6 | 	mov	local16, local08
2ceac     16 47 02 F6 | 	mov	local17, local04
2ceb0     21 13 02 F6 | 	mov	arg01, local15
2ceb4     22 15 02 F6 | 	mov	arg02, local16
2ceb8     23 17 02 F6 | 	mov	arg03, local17
2cebc     F2 48 02 F6 | 	mov	local18, objptr
2cec0     1E E5 01 F6 | 	mov	objptr, local12
2cec4     2D 40 62 FD | 	call	local14
2cec8     24 E5 01 F6 | 	mov	objptr, local18
2cecc     FD 4A 02 F6 | 	mov	local19, result1
2ced0                 | LR__4102
2ced0     00 4A 0E F2 | 	cmp	local19, #0 wz
2ced4     8C 01 90 5D |  if_ne	jmp	#LR__4112
2ced8     15 4D 02 F6 | 	mov	local20, local03
2cedc     03 4C 0E F5 | 	and	local20, #3 wz
2cee0     02 2E 46 55 |  if_ne	or	local05, #2
2cee4     01 4C 0E F2 | 	cmp	local20, #1 wz
2cee8     01 2E 46 55 |  if_ne	or	local05, #1
2ceec     20 2A CE F7 | 	test	local03, #32 wz
2cef0     C0 2E 46 55 |  if_ne	or	local05, #192
2cef4     08 30 06 F1 | 	add	local06, #8
2cef8     18 2F 62 FC | 	wrlong	local05, local06
2cefc     0C 30 06 F1 | 	add	local06, #12
2cf00     18 4F 0A FB | 	rdlong	local21, local06 wz
2cf04     14 30 86 F1 | 	sub	local06, #20
2cf08     18 00 90 5D |  if_ne	jmp	#LR__4103
2cf0c     04 36 06 F1 | 	add	local09, #4
2cf10     1B 4F 02 FB | 	rdlong	local21, local09
2cf14     04 36 86 F1 | 	sub	local09, #4
2cf18     14 30 06 F1 | 	add	local06, #20
2cf1c     18 4F 62 FC | 	wrlong	local21, local06
2cf20     14 30 86 F1 | 	sub	local06, #20
2cf24                 | LR__4103
2cf24     18 30 06 F1 | 	add	local06, #24
2cf28     18 4F 0A FB | 	rdlong	local21, local06 wz
2cf2c     18 30 86 F1 | 	sub	local06, #24
2cf30     18 00 90 5D |  if_ne	jmp	#LR__4104
2cf34     08 36 06 F1 | 	add	local09, #8
2cf38     1B 4F 02 FB | 	rdlong	local21, local09
2cf3c     08 36 86 F1 | 	sub	local09, #8
2cf40     18 30 06 F1 | 	add	local06, #24
2cf44     18 4F 62 FC | 	wrlong	local21, local06
2cf48     18 30 86 F1 | 	sub	local06, #24
2cf4c                 | LR__4104
2cf4c     24 30 06 F1 | 	add	local06, #36
2cf50     18 4F 0A FB | 	rdlong	local21, local06 wz
2cf54     24 30 86 F1 | 	sub	local06, #36
2cf58     1B 4F 02 AB |  if_e	rdlong	local21, local09
2cf5c     24 30 06 A1 |  if_e	add	local06, #36
2cf60     18 4F 62 AC |  if_e	wrlong	local21, local06
2cf64     24 30 86 A1 |  if_e	sub	local06, #36
2cf68     28 30 06 F1 | 	add	local06, #40
2cf6c     18 4F 0A FB | 	rdlong	local21, local06 wz
2cf70     28 30 86 F1 | 	sub	local06, #40
2cf74     18 00 90 5D |  if_ne	jmp	#LR__4105
2cf78     10 36 06 F1 | 	add	local09, #16
2cf7c     1B 4F 02 FB | 	rdlong	local21, local09
2cf80     10 36 86 F1 | 	sub	local09, #16
2cf84     28 30 06 F1 | 	add	local06, #40
2cf88     18 4F 62 FC | 	wrlong	local21, local06
2cf8c     28 30 86 F1 | 	sub	local06, #40
2cf90                 | LR__4105
2cf90     30 30 06 F1 | 	add	local06, #48
2cf94     18 4F 0A FB | 	rdlong	local21, local06 wz
2cf98     30 30 86 F1 | 	sub	local06, #48
2cf9c     18 00 90 5D |  if_ne	jmp	#LR__4106
2cfa0     0C 36 06 F1 | 	add	local09, #12
2cfa4     1B 4F 02 FB | 	rdlong	local21, local09
2cfa8     0C 36 86 F1 | 	sub	local09, #12
2cfac     30 30 06 F1 | 	add	local06, #48
2cfb0     18 4F 62 FC | 	wrlong	local21, local06
2cfb4     30 30 86 F1 | 	sub	local06, #48
2cfb8                 | LR__4106
2cfb8     1C 30 06 F1 | 	add	local06, #28
2cfbc     18 4F 0A FB | 	rdlong	local21, local06 wz
2cfc0     1C 30 86 F1 | 	sub	local06, #28
2cfc4     1C 00 90 5D |  if_ne	jmp	#LR__4107
2cfc8     01 32 06 F6 | 	mov	local07, #1
2cfcc     F2 12 02 F6 | 	mov	arg01, objptr
2cfd0     00 C0 05 FF 
2cfd4     00 12 46 F5 | 	or	arg01, ##192937984
2cfd8     1C 30 06 F1 | 	add	local06, #28
2cfdc     18 13 62 FC | 	wrlong	arg01, local06
2cfe0     1C 30 86 F1 | 	sub	local06, #28
2cfe4                 | LR__4107
2cfe4     20 30 06 F1 | 	add	local06, #32
2cfe8     18 4F 0A FB | 	rdlong	local21, local06 wz
2cfec     20 30 86 F1 | 	sub	local06, #32
2cff0     1C 00 90 5D |  if_ne	jmp	#LR__4108
2cff4     01 32 06 F6 | 	mov	local07, #1
2cff8     F2 12 02 F6 | 	mov	arg01, objptr
2cffc     00 C8 05 FF 
2d000     00 12 46 F5 | 	or	arg01, ##193986560
2d004     20 30 06 F1 | 	add	local06, #32
2d008     18 13 62 FC | 	wrlong	arg01, local06
2d00c     20 30 86 F1 | 	sub	local06, #32
2d010                 | LR__4108
2d010     2C 30 06 F1 | 	add	local06, #44
2d014     18 4F 0A FB | 	rdlong	local21, local06 wz
2d018     2C 30 86 F1 | 	sub	local06, #44
2d01c     44 00 90 5D |  if_ne	jmp	#LR__4111
2d020     14 36 06 F1 | 	add	local09, #20
2d024     1B 4F 0A FB | 	rdlong	local21, local09 wz
2d028     14 36 86 F1 | 	sub	local09, #20
2d02c     18 00 90 AD |  if_e	jmp	#LR__4109
2d030     14 36 06 F1 | 	add	local09, #20
2d034     1B 4F 02 FB | 	rdlong	local21, local09
2d038     2C 30 06 F1 | 	add	local06, #44
2d03c     18 4F 62 FC | 	wrlong	local21, local06
2d040     2C 30 86 F1 | 	sub	local06, #44
2d044     1C 00 90 FD | 	jmp	#LR__4110
2d048                 | LR__4109
2d048     01 32 06 F6 | 	mov	local07, #1
2d04c     F2 12 02 F6 | 	mov	arg01, objptr
2d050     00 D0 05 FF 
2d054     00 12 46 F5 | 	or	arg01, ##195035136
2d058     2C 30 06 F1 | 	add	local06, #44
2d05c     18 13 62 FC | 	wrlong	arg01, local06
2d060     2C 30 86 F1 | 	sub	local06, #44
2d064                 | LR__4110
2d064                 | LR__4111
2d064                 | LR__4112
2d064     00 32 0E F2 | 	cmp	local07, #0 wz
2d068     18 13 02 56 |  if_ne	mov	arg01, local06
2d06c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2d070     00 4A 0E F2 | 	cmp	local19, #0 wz
2d074     00 12 06 A6 |  if_e	mov	arg01, #0
2d078     10 00 90 5D |  if_ne	jmp	#LR__4113
2d07c     00 12 4E F2 | 	cmps	arg01, #0 wz
2d080     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d084     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d088     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d08c                 | LR__4113
2d08c     25 FB 01 F6 | 	mov	result1, local19
2d090                 | LR__4114
2d090     A7 F0 03 F6 | 	mov	ptra, fp
2d094     B2 00 A0 FD | 	call	#popregs_
2d098                 | __system___openraw_ret
2d098     2D 00 64 FD | 	ret
2d09c                 | 
2d09c                 | __system___closeraw
2d09c     05 4A 05 F6 | 	mov	COUNT_, #5
2d0a0     A8 00 A0 FD | 	call	#pushregs_
2d0a4     09 27 02 F6 | 	mov	local01, arg01
2d0a8     00 28 06 F6 | 	mov	local02, #0
2d0ac     08 26 06 F1 | 	add	local01, #8
2d0b0     13 FB 09 FB | 	rdlong	result1, local01 wz
2d0b4     08 26 86 F1 | 	sub	local01, #8
2d0b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d0bc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d0c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d0c4     01 FA 65 A6 |  if_e	neg	result1, #1
2d0c8     A8 00 90 AD |  if_e	jmp	#LR__4122
2d0cc     2C 26 06 F1 | 	add	local01, #44
2d0d0     13 FB 09 FB | 	rdlong	result1, local01 wz
2d0d4     2C 26 86 F1 | 	sub	local01, #44
2d0d8     38 00 90 AD |  if_e	jmp	#LR__4120
2d0dc     2C 26 06 F1 | 	add	local01, #44
2d0e0     13 2B 02 FB | 	rdlong	local03, local01
2d0e4     15 2D 02 F6 | 	mov	local04, local03
2d0e8     2C 26 86 F1 | 	sub	local01, #44
2d0ec     13 2C 46 F7 | 	zerox	local04, #19
2d0f0     14 2A 46 F0 | 	shr	local03, #20
2d0f4     02 2A 66 F0 | 	shl	local03, #2
2d0f8     ED 2A 02 F1 | 	add	local03, __methods__
2d0fc     15 2B 02 FB | 	rdlong	local03, local03
2d100     13 13 02 F6 | 	mov	arg01, local01
2d104     F2 2E 02 F6 | 	mov	local05, objptr
2d108     16 E5 01 F6 | 	mov	objptr, local04
2d10c     2D 2A 62 FD | 	call	local03
2d110     17 E5 01 F6 | 	mov	objptr, local05
2d114                 | LR__4120
2d114     24 26 06 F1 | 	add	local01, #36
2d118     13 2F 0A FB | 	rdlong	local05, local01 wz
2d11c     24 26 86 F1 | 	sub	local01, #36
2d120     3C 00 90 AD |  if_e	jmp	#LR__4121
2d124     24 26 06 F1 | 	add	local01, #36
2d128     13 2B 02 FB | 	rdlong	local03, local01
2d12c     15 2D 02 F6 | 	mov	local04, local03
2d130     24 26 86 F1 | 	sub	local01, #36
2d134     13 2C 46 F7 | 	zerox	local04, #19
2d138     14 2A 46 F0 | 	shr	local03, #20
2d13c     02 2A 66 F0 | 	shl	local03, #2
2d140     ED 2A 02 F1 | 	add	local03, __methods__
2d144     15 2B 02 FB | 	rdlong	local03, local03
2d148     13 13 02 F6 | 	mov	arg01, local01
2d14c     F2 2E 02 F6 | 	mov	local05, objptr
2d150     16 E5 01 F6 | 	mov	objptr, local04
2d154     2D 2A 62 FD | 	call	local03
2d158     17 E5 01 F6 | 	mov	objptr, local05
2d15c     FD 28 02 F6 | 	mov	local02, result1
2d160                 | LR__4121
2d160     13 13 02 F6 | 	mov	arg01, local01
2d164     00 14 06 F6 | 	mov	arg02, #0
2d168     34 16 06 F6 | 	mov	arg03, #52
2d16c     98 00 A0 FD | 	call	#\builtin_bytefill_
2d170     14 FB 01 F6 | 	mov	result1, local02
2d174                 | LR__4122
2d174     A7 F0 03 F6 | 	mov	ptra, fp
2d178     B2 00 A0 FD | 	call	#popregs_
2d17c                 | __system___closeraw_ret
2d17c     2D 00 64 FD | 	ret
2d180                 | 
2d180                 | __system___vfs_open_sdcardx
2d180     0B 4A 05 F6 | 	mov	COUNT_, #11
2d184     A8 00 A0 FD | 	call	#pushregs_
2d188     09 2B 02 F6 | 	mov	local03, arg01
2d18c     0A 2D 02 F6 | 	mov	local04, arg02
2d190     0B 2F 02 F6 | 	mov	local05, arg03
2d194     0C 31 02 F6 | 	mov	local06, arg04
2d198     01 00 00 FF 
2d19c     24 12 06 F6 | 	mov	arg01, ##548
2d1a0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2d1a4     FD 32 02 F6 | 	mov	local07, result1
2d1a8     01 00 00 FF 
2d1ac     34 12 06 F6 | 	mov	arg01, ##564
2d1b0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2d1b4     FD 34 02 F6 | 	mov	local08, result1
2d1b8     15 19 02 F6 | 	mov	arg04, local03
2d1bc     1F 18 C6 F0 | 	sar	arg04, #31
2d1c0     15 17 02 F6 | 	mov	arg03, local03
2d1c4     01 12 06 F6 | 	mov	arg01, #1
2d1c8     00 14 06 F6 | 	mov	arg02, #0
2d1cc     E8 DB BF FD | 	call	#__system___int64_shl
2d1d0     FD 26 02 F6 | 	mov	local01, result1
2d1d4     FE 36 02 F6 | 	mov	local09, result2
2d1d8     16 19 02 F6 | 	mov	arg04, local04
2d1dc     1F 18 C6 F0 | 	sar	arg04, #31
2d1e0     16 17 02 F6 | 	mov	arg03, local04
2d1e4     01 12 06 F6 | 	mov	arg01, #1
2d1e8     00 14 06 F6 | 	mov	arg02, #0
2d1ec     C8 DB BF FD | 	call	#__system___int64_shl
2d1f0     FD 26 42 F5 | 	or	local01, result1
2d1f4     FE 36 42 F5 | 	or	local09, result2
2d1f8     17 19 02 F6 | 	mov	arg04, local05
2d1fc     1F 18 C6 F0 | 	sar	arg04, #31
2d200     17 17 02 F6 | 	mov	arg03, local05
2d204     01 12 06 F6 | 	mov	arg01, #1
2d208     00 14 06 F6 | 	mov	arg02, #0
2d20c     A8 DB BF FD | 	call	#__system___int64_shl
2d210     FD 26 42 F5 | 	or	local01, result1
2d214     FE 36 42 F5 | 	or	local09, result2
2d218     18 19 02 F6 | 	mov	arg04, local06
2d21c     1F 18 C6 F0 | 	sar	arg04, #31
2d220     18 17 02 F6 | 	mov	arg03, local06
2d224     01 12 06 F6 | 	mov	arg01, #1
2d228     00 14 06 F6 | 	mov	arg02, #0
2d22c     88 DB BF FD | 	call	#__system___int64_shl
2d230     1B 15 02 F6 | 	mov	arg02, local09
2d234     FD 26 42 F5 | 	or	local01, result1
2d238     0A FD 41 F5 | 	or	result2, arg02
2d23c     FE 28 02 F6 | 	mov	local02, result2
2d240     13 13 02 F6 | 	mov	arg01, local01
2d244     14 15 02 F6 | 	mov	arg02, local02
2d248     A4 DB BF FD | 	call	#__system___usepins
2d24c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d250     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d254     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2d258     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d25c     00 FA 05 A6 |  if_e	mov	result1, #0
2d260     B4 00 90 AD |  if_e	jmp	#LR__4132
2d264     13 39 02 F6 | 	mov	local10, local01
2d268     14 37 02 F6 | 	mov	local09, local02
2d26c     01 00 00 FF 
2d270     08 32 06 F1 | 	add	local07, ##520
2d274     19 39 62 FC | 	wrlong	local10, local07
2d278     04 32 06 F1 | 	add	local07, #4
2d27c     19 37 62 FC | 	wrlong	local09, local07
2d280     01 00 00 FF 
2d284     0C 32 86 F1 | 	sub	local07, ##524
2d288     18 1B 02 F6 | 	mov	arg05, local06
2d28c     00 12 06 F6 | 	mov	arg01, #0
2d290     15 15 02 F6 | 	mov	arg02, local03
2d294     16 17 02 F6 | 	mov	arg03, local04
2d298     17 19 02 F6 | 	mov	arg04, local05
2d29c     F2 38 02 F6 | 	mov	local10, objptr
2d2a0     19 E5 01 F6 | 	mov	objptr, local07
2d2a4     8C 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2d2a8     1C E5 01 F6 | 	mov	objptr, local10
2d2ac     FD 3A 0A F6 | 	mov	local11, result1 wz
2d2b0     24 00 90 5D |  if_ne	jmp	#LR__4130
2d2b4     BF 01 00 FF 
2d2b8     7A 15 06 F6 | 	mov	arg02, ##@LR__5557
2d2bc     1A 13 02 F6 | 	mov	arg01, local08
2d2c0     00 16 06 F6 | 	mov	arg03, #0
2d2c4     F2 3A 02 F6 | 	mov	local11, objptr
2d2c8     19 E5 01 F6 | 	mov	objptr, local07
2d2cc     BC 60 B0 FD | 	call	#_fatfs_cc_f_mount
2d2d0     1D E5 01 F6 | 	mov	objptr, local11
2d2d4     FD 3A 02 F6 | 	mov	local11, result1
2d2d8                 | LR__4130
2d2d8     00 3A 0E F2 | 	cmp	local11, #0 wz
2d2dc     24 00 90 AD |  if_e	jmp	#LR__4131
2d2e0     13 13 02 F6 | 	mov	arg01, local01
2d2e4     14 15 02 F6 | 	mov	arg02, local02
2d2e8     58 DB BF FD | 	call	#__system___freepins
2d2ec     1D 13 6A F6 | 	neg	arg01, local11 wz
2d2f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d2f4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d2f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d2fc     00 FA 05 F6 | 	mov	result1, #0
2d300     14 00 90 FD | 	jmp	#LR__4132
2d304                 | LR__4131
2d304     19 13 02 F6 | 	mov	arg01, local07
2d308     F2 3A 02 F6 | 	mov	local11, objptr
2d30c     19 E5 01 F6 | 	mov	objptr, local07
2d310     58 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2d314     1D E5 01 F6 | 	mov	objptr, local11
2d318                 | LR__4132
2d318     A7 F0 03 F6 | 	mov	ptra, fp
2d31c     B2 00 A0 FD | 	call	#popregs_
2d320                 | __system___vfs_open_sdcardx_ret
2d320     2D 00 64 FD | 	ret
2d324                 | 
2d324                 | __system____default_getc
2d324     03 4A 05 F6 | 	mov	COUNT_, #3
2d328     A8 00 A0 FD | 	call	#pushregs_
2d32c     09 27 02 F6 | 	mov	local01, arg01
2d330     13 29 02 FB | 	rdlong	local02, local01
2d334     08 28 06 F1 | 	add	local02, #8
2d338     14 2B 02 FB | 	rdlong	local03, local02
2d33c     02 2A CE F7 | 	test	local03, #2 wz
2d340     13 13 02 56 |  if_ne	mov	arg01, local01
2d344     00 01 B0 5D |  if_ne	call	#__system____default_flush
2d348     14 2B 02 FB | 	rdlong	local03, local02
2d34c     01 2A 46 F5 | 	or	local03, #1
2d350     14 2B 62 FC | 	wrlong	local03, local02
2d354     08 28 86 F1 | 	sub	local02, #8
2d358     14 2B 0A FB | 	rdlong	local03, local02 wz
2d35c     0C 00 90 5D |  if_ne	jmp	#LR__4140
2d360     13 13 02 F6 | 	mov	arg01, local01
2d364     70 18 B0 FD | 	call	#__system____default_filbuf
2d368     FD 2A 02 F6 | 	mov	local03, result1
2d36c                 | LR__4140
2d36c     01 2A 56 F2 | 	cmps	local03, #1 wc
2d370     01 FA 65 C6 |  if_b	neg	result1, #1
2d374     1C 00 90 CD |  if_b	jmp	#LR__4141
2d378     01 2A 86 F1 | 	sub	local03, #1
2d37c     14 2B 62 FC | 	wrlong	local03, local02
2d380     04 28 06 F1 | 	add	local02, #4
2d384     14 2B 02 FB | 	rdlong	local03, local02
2d388     15 FB C1 FA | 	rdbyte	result1, local03
2d38c     01 2A 06 F1 | 	add	local03, #1
2d390     14 2B 62 FC | 	wrlong	local03, local02
2d394                 | LR__4141
2d394     A7 F0 03 F6 | 	mov	ptra, fp
2d398     B2 00 A0 FD | 	call	#popregs_
2d39c                 | __system____default_getc_ret
2d39c     2D 00 64 FD | 	ret
2d3a0                 | 
2d3a0                 | __system____default_putc
2d3a0     06 4A 05 F6 | 	mov	COUNT_, #6
2d3a4     A8 00 A0 FD | 	call	#pushregs_
2d3a8     09 27 02 F6 | 	mov	local01, arg01
2d3ac     0A 29 02 F6 | 	mov	local02, arg02
2d3b0     14 2B 02 FB | 	rdlong	local03, local02
2d3b4     08 2A 06 F1 | 	add	local03, #8
2d3b8     15 FB 01 FB | 	rdlong	result1, local03
2d3bc     01 FA CD F7 | 	test	result1, #1 wz
2d3c0     14 13 02 56 |  if_ne	mov	arg01, local02
2d3c4     80 00 B0 5D |  if_ne	call	#__system____default_flush
2d3c8     15 2D 02 FB | 	rdlong	local04, local03
2d3cc     02 2C 46 F5 | 	or	local04, #2
2d3d0     15 2D 62 FC | 	wrlong	local04, local03
2d3d4     08 2A 86 F1 | 	sub	local03, #8
2d3d8     15 2F 02 FB | 	rdlong	local05, local03
2d3dc     10 2A 06 F1 | 	add	local03, #16
2d3e0     15 15 02 FB | 	rdlong	arg02, local03
2d3e4     10 2A 86 F1 | 	sub	local03, #16
2d3e8     17 FB 01 F6 | 	mov	result1, local05
2d3ec     0A FB 01 F1 | 	add	result1, arg02
2d3f0     FD 26 42 FC | 	wrbyte	local01, result1
2d3f4     13 27 E2 F8 | 	getbyte	local01, local01, #0
2d3f8     01 2E 06 F1 | 	add	local05, #1
2d3fc     15 2F 62 FC | 	wrlong	local05, local03
2d400     06 28 06 F1 | 	add	local02, #6
2d404     14 31 EA FA | 	rdword	local06, local02 wz
2d408     06 28 86 F1 | 	sub	local02, #6
2d40c     0C 2A 06 51 |  if_ne	add	local03, #12
2d410     15 2D 02 5B |  if_ne	rdlong	local04, local03
2d414     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2d418     0C 00 90 AD |  if_e	jmp	#LR__4150
2d41c     0A 26 0E F2 | 	cmp	local01, #10 wz
2d420     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2d424     10 00 90 5D |  if_ne	jmp	#LR__4151
2d428                 | LR__4150
2d428     14 13 02 F6 | 	mov	arg01, local02
2d42c     18 00 B0 FD | 	call	#__system____default_flush
2d430     00 FA 0D F2 | 	cmp	result1, #0 wz
2d434     01 26 66 56 |  if_ne	neg	local01, #1
2d438                 | LR__4151
2d438     13 FB 01 F6 | 	mov	result1, local01
2d43c     A7 F0 03 F6 | 	mov	ptra, fp
2d440     B2 00 A0 FD | 	call	#popregs_
2d444                 | __system____default_putc_ret
2d444     2D 00 64 FD | 	ret
2d448                 | 
2d448                 | __system____default_flush
2d448     06 4A 05 F6 | 	mov	COUNT_, #6
2d44c     A8 00 A0 FD | 	call	#pushregs_
2d450     09 27 02 F6 | 	mov	local01, arg01
2d454     13 29 02 FB | 	rdlong	local02, local01
2d458     14 2B 02 FB | 	rdlong	local03, local02
2d45c     08 28 06 F1 | 	add	local02, #8
2d460     14 FB 01 FB | 	rdlong	result1, local02
2d464     08 28 86 F1 | 	sub	local02, #8
2d468     02 FA CD F7 | 	test	result1, #2 wz
2d46c     D0 00 90 AD |  if_e	jmp	#LR__4162
2d470     01 2A 56 F2 | 	cmps	local03, #1 wc
2d474     20 01 90 CD |  if_b	jmp	#LR__4164
2d478     08 26 06 F1 | 	add	local01, #8
2d47c     13 FB 01 FB | 	rdlong	result1, local01
2d480     08 26 86 F1 | 	sub	local01, #8
2d484     40 FA CD F7 | 	test	result1, #64 wz
2d488     68 00 90 AD |  if_e	jmp	#LR__4161
2d48c     08 26 06 F1 | 	add	local01, #8
2d490     13 17 02 FB | 	rdlong	arg03, local01
2d494     08 26 86 F1 | 	sub	local01, #8
2d498     80 16 CE F7 | 	test	arg03, #128 wz
2d49c     54 00 90 AD |  if_e	jmp	#LR__4160
2d4a0     30 26 06 F1 | 	add	local01, #48
2d4a4     13 2D 02 FB | 	rdlong	local04, local01
2d4a8     16 2F 02 F6 | 	mov	local05, local04
2d4ac     30 26 86 F1 | 	sub	local01, #48
2d4b0     13 2E 46 F7 | 	zerox	local05, #19
2d4b4     14 2C 46 F0 | 	shr	local04, #20
2d4b8     02 2C 66 F0 | 	shl	local04, #2
2d4bc     ED 2C 02 F1 | 	add	local04, __methods__
2d4c0     16 2D 02 FB | 	rdlong	local04, local04
2d4c4     13 13 02 F6 | 	mov	arg01, local01
2d4c8     00 14 06 F6 | 	mov	arg02, #0
2d4cc     02 16 06 F6 | 	mov	arg03, #2
2d4d0     F2 30 02 F6 | 	mov	local06, objptr
2d4d4     17 E5 01 F6 | 	mov	objptr, local05
2d4d8     2D 2C 62 FD | 	call	local04
2d4dc     18 E5 01 F6 | 	mov	objptr, local06
2d4e0     08 26 06 F1 | 	add	local01, #8
2d4e4     13 31 02 FB | 	rdlong	local06, local01
2d4e8     80 30 26 F5 | 	andn	local06, #128
2d4ec     13 31 62 FC | 	wrlong	local06, local01
2d4f0     08 26 86 F1 | 	sub	local01, #8
2d4f4                 | LR__4160
2d4f4                 | LR__4161
2d4f4     18 26 06 F1 | 	add	local01, #24
2d4f8     13 2D 02 FB | 	rdlong	local04, local01
2d4fc     16 2F 02 F6 | 	mov	local05, local04
2d500     18 26 86 F1 | 	sub	local01, #24
2d504     13 2E 46 F7 | 	zerox	local05, #19
2d508     14 2C 46 F0 | 	shr	local04, #20
2d50c     02 2C 66 F0 | 	shl	local04, #2
2d510     ED 2C 02 F1 | 	add	local04, __methods__
2d514     16 2D 02 FB | 	rdlong	local04, local04
2d518     10 28 06 F1 | 	add	local02, #16
2d51c     14 15 02 FB | 	rdlong	arg02, local02
2d520     10 28 86 F1 | 	sub	local02, #16
2d524     13 13 02 F6 | 	mov	arg01, local01
2d528     15 17 02 F6 | 	mov	arg03, local03
2d52c     F2 30 02 F6 | 	mov	local06, objptr
2d530     17 E5 01 F6 | 	mov	objptr, local05
2d534     2D 2C 62 FD | 	call	local04
2d538     18 E5 01 F6 | 	mov	objptr, local06
2d53c     58 00 90 FD | 	jmp	#LR__4164
2d540                 | LR__4162
2d540     08 28 06 F1 | 	add	local02, #8
2d544     14 31 02 FB | 	rdlong	local06, local02
2d548     08 28 86 F1 | 	sub	local02, #8
2d54c     01 30 CE F7 | 	test	local06, #1 wz
2d550     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2d554     40 00 90 AD |  if_e	jmp	#LR__4163
2d558     30 26 06 F1 | 	add	local01, #48
2d55c     13 2D 02 FB | 	rdlong	local04, local01
2d560     16 2F 02 F6 | 	mov	local05, local04
2d564     30 26 86 F1 | 	sub	local01, #48
2d568     13 2E 46 F7 | 	zerox	local05, #19
2d56c     14 2C 46 F0 | 	shr	local04, #20
2d570     02 2C 66 F0 | 	shl	local04, #2
2d574     ED 2C 02 F1 | 	add	local04, __methods__
2d578     16 2D 02 FB | 	rdlong	local04, local04
2d57c     13 13 02 F6 | 	mov	arg01, local01
2d580     15 15 62 F6 | 	neg	arg02, local03
2d584     01 16 06 F6 | 	mov	arg03, #1
2d588     F2 30 02 F6 | 	mov	local06, objptr
2d58c     17 E5 01 F6 | 	mov	objptr, local05
2d590     2D 2C 62 FD | 	call	local04
2d594     18 E5 01 F6 | 	mov	objptr, local06
2d598                 | LR__4163
2d598                 | LR__4164
2d598     14 01 68 FC | 	wrlong	#0, local02
2d59c     04 28 06 F1 | 	add	local02, #4
2d5a0     14 01 68 FC | 	wrlong	#0, local02
2d5a4     04 28 06 F1 | 	add	local02, #4
2d5a8     14 01 68 FC | 	wrlong	#0, local02
2d5ac     00 FA 05 F6 | 	mov	result1, #0
2d5b0     A7 F0 03 F6 | 	mov	ptra, fp
2d5b4     B2 00 A0 FD | 	call	#popregs_
2d5b8                 | __system____default_flush_ret
2d5b8     2D 00 64 FD | 	ret
2d5bc                 | 
2d5bc                 | __system____default_buffer_init
2d5bc     02 4A 05 F6 | 	mov	COUNT_, #2
2d5c0     A8 00 A0 FD | 	call	#pushregs_
2d5c4     09 27 02 F6 | 	mov	local01, arg01
2d5c8     13 29 02 FB | 	rdlong	local02, local01
2d5cc     13 13 02 F6 | 	mov	arg01, local01
2d5d0     34 03 B0 FD | 	call	#__system___isatty
2d5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5d8     06 26 06 51 |  if_ne	add	local01, #6
2d5dc     13 0B 58 5C |  if_ne	wrword	#5, local01
2d5e0     06 26 06 A1 |  if_e	add	local01, #6
2d5e4     13 0D 58 AC |  if_e	wrword	#6, local01
2d5e8     14 28 06 F1 | 	add	local02, #20
2d5ec     14 27 02 F6 | 	mov	local01, local02
2d5f0     04 28 86 F1 | 	sub	local02, #4
2d5f4     14 27 62 FC | 	wrlong	local01, local02
2d5f8     04 28 86 F1 | 	sub	local02, #4
2d5fc     02 00 80 FF 
2d600     14 01 68 FC | 	wrlong	##1024, local02
2d604     00 FA 05 F6 | 	mov	result1, #0
2d608     A7 F0 03 F6 | 	mov	ptra, fp
2d60c     B2 00 A0 FD | 	call	#popregs_
2d610                 | __system____default_buffer_init_ret
2d610     2D 00 64 FD | 	ret
2d614                 | 
2d614                 | __system__stat
2d614     04 4A 05 F6 | 	mov	COUNT_, #4
2d618     A8 00 A0 FD | 	call	#pushregs_
2d61c     0A 27 02 F6 | 	mov	local01, arg02
2d620     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2d624     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2d628     09 15 02 F6 | 	mov	arg02, arg01
2d62c     14 13 02 F6 | 	mov	arg01, local02
2d630     00 16 06 F6 | 	mov	arg03, #0
2d634     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2d638     50 B5 BF FD | 	call	#__system____getvfsforfile
2d63c     FD 2A 0A F6 | 	mov	local03, result1 wz
2d640     10 00 90 AD |  if_e	jmp	#LR__4170
2d644     34 2A 06 F1 | 	add	local03, #52
2d648     15 17 0A FB | 	rdlong	arg03, local03 wz
2d64c     34 2A 86 F1 | 	sub	local03, #52
2d650     14 00 90 5D |  if_ne	jmp	#LR__4171
2d654                 | LR__4170
2d654     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d658     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2d65c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d660     01 FA 65 F6 | 	neg	result1, #1
2d664     68 00 90 FD | 	jmp	#LR__4172
2d668                 | LR__4171
2d668     13 13 02 F6 | 	mov	arg01, local01
2d66c     00 14 06 F6 | 	mov	arg02, #0
2d670     30 16 06 F6 | 	mov	arg03, #48
2d674     09 2D 02 F6 | 	mov	local04, arg01
2d678     98 00 A0 FD | 	call	#\builtin_bytefill_
2d67c     16 FB 01 F6 | 	mov	result1, local04
2d680     14 13 CA FA | 	rdbyte	arg01, local02 wz
2d684     08 26 06 A1 |  if_e	add	local01, #8
2d688     08 00 80 AF 
2d68c     13 FF 6B AC |  if_e	wrlong	##4607, local01
2d690     00 FA 05 A6 |  if_e	mov	result1, #0
2d694     38 00 90 AD |  if_e	jmp	#LR__4172
2d698     34 2A 06 F1 | 	add	local03, #52
2d69c     15 2B 02 FB | 	rdlong	local03, local03
2d6a0     15 2D 02 F6 | 	mov	local04, local03
2d6a4     13 2A 46 F7 | 	zerox	local03, #19
2d6a8     14 2C 46 F0 | 	shr	local04, #20
2d6ac     02 2C 66 F0 | 	shl	local04, #2
2d6b0     ED 2C 02 F1 | 	add	local04, __methods__
2d6b4     16 2D 02 FB | 	rdlong	local04, local04
2d6b8     14 13 02 F6 | 	mov	arg01, local02
2d6bc     13 15 02 F6 | 	mov	arg02, local01
2d6c0     F2 28 02 F6 | 	mov	local02, objptr
2d6c4     15 E5 01 F6 | 	mov	objptr, local03
2d6c8     2D 2C 62 FD | 	call	local04
2d6cc     14 E5 01 F6 | 	mov	objptr, local02
2d6d0                 | LR__4172
2d6d0     A7 F0 03 F6 | 	mov	ptra, fp
2d6d4     B2 00 A0 FD | 	call	#popregs_
2d6d8                 | __system__stat_ret
2d6d8     2D 00 64 FD | 	ret
2d6dc                 | 
2d6dc                 | __system__write
2d6dc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d6e0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d6e4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d6e8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d6ec     01 FA 65 36 |  if_ae	neg	result1, #1
2d6f0     20 00 90 3D |  if_ae	jmp	#LR__4180
2d6f4     34 12 06 FD | 	qmul	arg01, #52
2d6f8     02 00 00 FF 
2d6fc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d700     18 12 62 FD | 	getqx	arg01
2d704     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d708     02 00 00 FF 
2d70c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d710     14 10 B0 FD | 	call	#__system___vfswrite
2d714                 | LR__4180
2d714                 | __system__write_ret
2d714     2D 00 64 FD | 	ret
2d718                 | 
2d718                 | __system__read
2d718     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d71c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d720     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d724     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d728     01 FA 65 36 |  if_ae	neg	result1, #1
2d72c     20 00 90 3D |  if_ae	jmp	#LR__4190
2d730     34 12 06 FD | 	qmul	arg01, #52
2d734     02 00 00 FF 
2d738     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d73c     18 12 62 FD | 	getqx	arg01
2d740     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d744     02 00 00 FF 
2d748     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d74c     A0 11 B0 FD | 	call	#__system___vfsread
2d750                 | LR__4190
2d750                 | __system__read_ret
2d750     2D 00 64 FD | 	ret
2d754                 | 
2d754                 | __system__close
2d754     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d758     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d75c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d760     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d764     01 FA 65 36 |  if_ae	neg	result1, #1
2d768     20 00 90 3D |  if_ae	jmp	#LR__4200
2d76c     34 12 06 FD | 	qmul	arg01, #52
2d770     02 00 00 FF 
2d774     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d778     18 12 62 FD | 	getqx	arg01
2d77c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d780     02 00 00 FF 
2d784     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d788     10 F9 BF FD | 	call	#__system___closeraw
2d78c                 | LR__4200
2d78c                 | __system__close_ret
2d78c     2D 00 64 FD | 	ret
2d790                 | 
2d790                 | __system__lseek
2d790     06 4A 05 F6 | 	mov	COUNT_, #6
2d794     A8 00 A0 FD | 	call	#pushregs_
2d798     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d79c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d7a0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d7a4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d7a8     01 FA 65 36 |  if_ae	neg	result1, #1
2d7ac     C4 00 90 3D |  if_ae	jmp	#LR__4211
2d7b0     34 12 06 FD | 	qmul	arg01, #52
2d7b4     02 00 00 FF 
2d7b8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d7bc     18 26 62 FD | 	getqx	local01
2d7c0     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2d7c4     30 26 06 F1 | 	add	local01, #48
2d7c8     13 13 0A FB | 	rdlong	arg01, local01 wz
2d7cc     30 26 86 F1 | 	sub	local01, #48
2d7d0     02 00 00 FF 
2d7d4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d7d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d7dc     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2d7e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d7e4     01 FA 65 A6 |  if_e	neg	result1, #1
2d7e8     88 00 90 AD |  if_e	jmp	#LR__4211
2d7ec     08 26 06 F1 | 	add	local01, #8
2d7f0     13 29 02 FB | 	rdlong	local02, local01
2d7f4     08 26 86 F1 | 	sub	local01, #8
2d7f8     40 28 CE F7 | 	test	local02, #64 wz
2d7fc     08 26 06 51 |  if_ne	add	local01, #8
2d800     13 29 02 5B |  if_ne	rdlong	local02, local01
2d804     80 28 46 55 |  if_ne	or	local02, #128
2d808     13 29 62 5C |  if_ne	wrlong	local02, local01
2d80c     08 26 86 51 |  if_ne	sub	local01, #8
2d810     30 26 06 F1 | 	add	local01, #48
2d814     13 2B 02 FB | 	rdlong	local03, local01
2d818     15 2D 02 F6 | 	mov	local04, local03
2d81c     30 26 86 F1 | 	sub	local01, #48
2d820     13 2C 46 F7 | 	zerox	local04, #19
2d824     14 2A 46 F0 | 	shr	local03, #20
2d828     02 2A 66 F0 | 	shl	local03, #2
2d82c     ED 2A 02 F1 | 	add	local03, __methods__
2d830     15 2B 02 FB | 	rdlong	local03, local03
2d834     13 13 02 F6 | 	mov	arg01, local01
2d838     F2 2E 02 F6 | 	mov	local05, objptr
2d83c     16 E5 01 F6 | 	mov	objptr, local04
2d840     2D 2A 62 FD | 	call	local03
2d844     17 E5 01 F6 | 	mov	objptr, local05
2d848     FD 30 02 F6 | 	mov	local06, result1
2d84c     00 30 56 F2 | 	cmps	local06, #0 wc
2d850     1C 00 90 3D |  if_ae	jmp	#LR__4210
2d854     18 13 6A F6 | 	neg	arg01, local06 wz
2d858     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d85c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d860     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d864     01 FA 65 56 |  if_ne	neg	result1, #1
2d868     00 FA 05 A6 |  if_e	mov	result1, #0
2d86c     04 00 90 FD | 	jmp	#LR__4211
2d870                 | LR__4210
2d870     18 FB 01 F6 | 	mov	result1, local06
2d874                 | LR__4211
2d874     A7 F0 03 F6 | 	mov	ptra, fp
2d878     B2 00 A0 FD | 	call	#popregs_
2d87c                 | __system__lseek_ret
2d87c     2D 00 64 FD | 	ret
2d880                 | 
2d880                 | __system___ioctl
2d880     03 4A 05 F6 | 	mov	COUNT_, #3
2d884     A8 00 A0 FD | 	call	#pushregs_
2d888     00 12 4E F2 | 	cmps	arg01, #0 wz
2d88c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d890     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d894     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d898     01 FA 65 A6 |  if_e	neg	result1, #1
2d89c     5C 00 90 AD |  if_e	jmp	#LR__4221
2d8a0     28 12 06 F1 | 	add	arg01, #40
2d8a4     09 27 02 FB | 	rdlong	local01, arg01
2d8a8     13 29 02 F6 | 	mov	local02, local01
2d8ac     28 12 86 F1 | 	sub	arg01, #40
2d8b0     13 28 46 F7 | 	zerox	local02, #19
2d8b4     14 26 46 F0 | 	shr	local01, #20
2d8b8     02 26 66 F0 | 	shl	local01, #2
2d8bc     ED 26 02 F1 | 	add	local01, __methods__
2d8c0     13 27 02 FB | 	rdlong	local01, local01
2d8c4     F2 2A 02 F6 | 	mov	local03, objptr
2d8c8     14 E5 01 F6 | 	mov	objptr, local02
2d8cc     2D 26 62 FD | 	call	local01
2d8d0     15 E5 01 F6 | 	mov	objptr, local03
2d8d4     FD 12 0A F6 | 	mov	arg01, result1 wz
2d8d8     1C 00 90 AD |  if_e	jmp	#LR__4220
2d8dc     00 12 4E F2 | 	cmps	arg01, #0 wz
2d8e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d8e4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d8e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d8ec     01 FA 65 56 |  if_ne	neg	result1, #1
2d8f0     00 FA 05 A6 |  if_e	mov	result1, #0
2d8f4     04 00 90 FD | 	jmp	#LR__4221
2d8f8                 | LR__4220
2d8f8     00 FA 05 F6 | 	mov	result1, #0
2d8fc                 | LR__4221
2d8fc     A7 F0 03 F6 | 	mov	ptra, fp
2d900     B2 00 A0 FD | 	call	#popregs_
2d904                 | __system___ioctl_ret
2d904     2D 00 64 FD | 	ret
2d908                 | 
2d908                 | __system___isatty
2d908     00 4A 05 F6 | 	mov	COUNT_, #0
2d90c     A8 00 A0 FD | 	call	#pushregs_
2d910     0C F0 07 F1 | 	add	ptra, #12
2d914     04 4E 05 F1 | 	add	fp, #4
2d918     A7 12 62 FC | 	wrlong	arg01, fp
2d91c     04 4E 05 F1 | 	add	fp, #4
2d920     A7 16 02 F6 | 	mov	arg03, fp
2d924     08 4E 85 F1 | 	sub	fp, #8
2d928     00 15 06 F6 | 	mov	arg02, #256
2d92c     50 FF BF FD | 	call	#__system___ioctl
2d930     00 FA 0D F2 | 	cmp	result1, #0 wz
2d934     01 FA 05 A6 |  if_e	mov	result1, #1
2d938     00 FA 05 56 |  if_ne	mov	result1, #0
2d93c     A7 F0 03 F6 | 	mov	ptra, fp
2d940     B2 00 A0 FD | 	call	#popregs_
2d944                 | __system___isatty_ret
2d944     2D 00 64 FD | 	ret
2d948                 | 
2d948                 | __system____getftab
2d948     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d94c     34 12 06 CD |  if_b	qmul	arg01, #52
2d950     00 FA 05 36 |  if_ae	mov	result1, #0
2d954     02 00 00 CF 
2d958     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2d95c     18 FA 61 CD |  if_b	getqx	result1
2d960     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2d964     02 00 00 CF 
2d968     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2d96c                 | __system____getftab_ret
2d96c     2D 00 64 FD | 	ret
2d970                 | 
2d970                 | __system__strncpy
2d970     09 01 02 F6 | 	mov	_var01, arg01
2d974                 | LR__4230
2d974     01 16 86 F1 | 	sub	arg03, #1
2d978     00 16 56 F2 | 	cmps	arg03, #0 wc
2d97c     18 00 90 CD |  if_b	jmp	#LR__4231
2d980     0A FB C1 FA | 	rdbyte	result1, arg02
2d984     00 FB 41 FC | 	wrbyte	result1, _var01
2d988     01 14 06 F1 | 	add	arg02, #1
2d98c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d990     01 00 06 F1 | 	add	_var01, #1
2d994     DC FF 9F 5D |  if_ne	jmp	#LR__4230
2d998                 | LR__4231
2d998     97 0C 48 FB | 	callpa	#(@LR__4233-@LR__4232)>>2,fcache_load_ptr_
2d99c                 | LR__4232
2d99c     01 16 86 F1 | 	sub	arg03, #1
2d9a0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d9a4     00 03 02 36 |  if_ae	mov	_var02, _var01
2d9a8     01 00 06 31 |  if_ae	add	_var01, #1
2d9ac     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d9b0     E8 FF 9F 3D |  if_ae	jmp	#LR__4232
2d9b4                 | LR__4233
2d9b4     09 FB 01 F6 | 	mov	result1, arg01
2d9b8                 | __system__strncpy_ret
2d9b8     2D 00 64 FD | 	ret
2d9bc                 | 
2d9bc                 | __system__strncat
2d9bc     00 14 4E F2 | 	cmps	arg02, #0 wz
2d9c0     54 00 90 AD |  if_e	jmp	#LR__4245
2d9c4     01 16 16 F2 | 	cmp	arg03, #1 wc
2d9c8     4C 00 90 CD |  if_b	jmp	#LR__4245
2d9cc     09 01 02 F6 | 	mov	_var01, arg01
2d9d0     97 06 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
2d9d4                 | LR__4240
2d9d4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d9d8     01 00 06 51 |  if_ne	add	_var01, #1
2d9dc     F4 FF 9F 5D |  if_ne	jmp	#LR__4240
2d9e0                 | LR__4241
2d9e0     0B 03 02 F6 | 	mov	_var02, arg03
2d9e4     97 16 48 FB | 	callpa	#(@LR__4243-@LR__4242)>>2,fcache_load_ptr_
2d9e8                 | LR__4242
2d9e8     0A 05 C2 FA | 	rdbyte	_var03, arg02
2d9ec     02 07 02 F6 | 	mov	_var04, _var03
2d9f0     07 06 4E F7 | 	zerox	_var04, #7 wz
2d9f4     01 14 06 F1 | 	add	arg02, #1
2d9f8     18 00 90 AD |  if_e	jmp	#LR__4244
2d9fc     01 02 86 F1 | 	sub	_var02, #1
2da00     00 02 56 F2 | 	cmps	_var02, #0 wc
2da04     00 07 02 36 |  if_ae	mov	_var04, _var01
2da08     01 00 06 31 |  if_ae	add	_var01, #1
2da0c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2da10     D4 FF 9F 3D |  if_ae	jmp	#LR__4242
2da14                 | LR__4243
2da14                 | LR__4244
2da14     00 01 48 FC | 	wrbyte	#0, _var01
2da18                 | LR__4245
2da18     09 FB 01 F6 | 	mov	result1, arg01
2da1c                 | __system__strncat_ret
2da1c     2D 00 64 FD | 	ret
2da20                 | 
2da20                 | __system__strncmp
2da20     09 01 0A F6 | 	mov	_var01, arg01 wz
2da24     14 00 90 5D |  if_ne	jmp	#LR__4250
2da28     00 14 0E F2 | 	cmp	arg02, #0 wz
2da2c     01 02 66 56 |  if_ne	neg	_var02, #1
2da30     00 02 06 A6 |  if_e	mov	_var02, #0
2da34     01 FB 01 F6 | 	mov	result1, _var02
2da38     74 00 90 FD | 	jmp	#__system__strncmp_ret
2da3c                 | LR__4250
2da3c     00 14 0E F2 | 	cmp	arg02, #0 wz
2da40     01 FA 05 A6 |  if_e	mov	result1, #1
2da44     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2da48     0B 05 02 F6 | 	mov	_var03, arg03
2da4c     97 16 48 FB | 	callpa	#(@LR__4252-@LR__4251)>>2,fcache_load_ptr_
2da50                 | LR__4251
2da50     00 07 C2 FA | 	rdbyte	_var04, _var01
2da54     0A 09 02 F6 | 	mov	_var05, arg02
2da58     04 0B C2 FA | 	rdbyte	_var06, _var05
2da5c     01 04 86 F1 | 	sub	_var03, #1
2da60     00 04 56 F2 | 	cmps	_var03, #0 wc
2da64     01 00 06 F1 | 	add	_var01, #1
2da68     01 14 06 F1 | 	add	arg02, #1
2da6c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2da70     08 00 90 2D |  if_nc_and_z	jmp	#LR__4253
2da74     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2da78     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4251
2da7c                 | LR__4252
2da7c                 | LR__4253
2da7c     00 04 56 F2 | 	cmps	_var03, #0 wc
2da80     00 FA 05 C6 |  if_b	mov	result1, #0
2da84     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2da88     05 07 0A F2 | 	cmp	_var04, _var06 wz
2da8c     00 FA 05 A6 |  if_e	mov	result1, #0
2da90     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2da94     00 06 0E F2 | 	cmp	_var04, #0 wz
2da98     01 FA 65 A6 |  if_e	neg	result1, #1
2da9c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2daa0     00 0A 0E F2 | 	cmp	_var06, #0 wz
2daa4     01 FA 05 A6 |  if_e	mov	result1, #1
2daa8     03 FB 01 56 |  if_ne	mov	result1, _var04
2daac     05 FB 81 51 |  if_ne	sub	result1, _var06
2dab0                 | __system__strncmp_ret
2dab0     2D 00 64 FD | 	ret
2dab4                 | 
2dab4                 | __system____root_opendir
2dab4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2dab8     04 12 06 F1 | 	add	arg01, #4
2dabc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2dac0     00 FA 05 F6 | 	mov	result1, #0
2dac4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2dac8                 | __system____root_opendir_ret
2dac8     2D 00 64 FD | 	ret
2dacc                 | 
2dacc                 | __system____root_readdir
2dacc     03 4A 05 F6 | 	mov	COUNT_, #3
2dad0     A8 00 A0 FD | 	call	#pushregs_
2dad4     09 27 02 F6 | 	mov	local01, arg01
2dad8     0A 29 02 F6 | 	mov	local02, arg02
2dadc     04 26 06 F1 | 	add	local01, #4
2dae0     13 2B 02 FB | 	rdlong	local03, local01
2dae4     04 26 86 F1 | 	sub	local01, #4
2dae8                 | LR__4260
2dae8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2daec     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2daf0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2daf4     01 FA 65 A6 |  if_e	neg	result1, #1
2daf8     48 00 90 AD |  if_e	jmp	#LR__4261
2dafc     15 17 0A FB | 	rdlong	arg03, local03 wz
2db00     04 2A 06 A1 |  if_e	add	local03, #4
2db04     E0 FF 9F AD |  if_e	jmp	#LR__4260
2db08     15 15 02 FB | 	rdlong	arg02, local03
2db0c     01 14 06 F1 | 	add	arg02, #1
2db10     14 13 02 F6 | 	mov	arg01, local02
2db14     40 16 06 F6 | 	mov	arg03, #64
2db18     54 FE BF FD | 	call	#__system__strncpy
2db1c     50 28 06 F1 | 	add	local02, #80
2db20     14 03 48 FC | 	wrbyte	#1, local02
2db24     08 28 86 F1 | 	sub	local02, #8
2db28     14 01 68 FC | 	wrlong	#0, local02
2db2c     04 28 06 F1 | 	add	local02, #4
2db30     14 01 68 FC | 	wrlong	#0, local02
2db34     04 2A 06 F1 | 	add	local03, #4
2db38     04 26 06 F1 | 	add	local01, #4
2db3c     13 2B 62 FC | 	wrlong	local03, local01
2db40     00 FA 05 F6 | 	mov	result1, #0
2db44                 | LR__4261
2db44     A7 F0 03 F6 | 	mov	ptra, fp
2db48     B2 00 A0 FD | 	call	#popregs_
2db4c                 | __system____root_readdir_ret
2db4c     2D 00 64 FD | 	ret
2db50                 | 
2db50                 | __system____root_closedir
2db50     00 FA 05 F6 | 	mov	result1, #0
2db54                 | __system____root_closedir_ret
2db54     2D 00 64 FD | 	ret
2db58                 | 
2db58                 | __system____root_stat
2db58     0A 01 02 F6 | 	mov	_var01, arg02
2db5c     00 13 02 F6 | 	mov	arg01, _var01
2db60     00 14 06 F6 | 	mov	arg02, #0
2db64     30 16 06 F6 | 	mov	arg03, #48
2db68     98 00 A0 FD | 	call	#\builtin_bytefill_
2db6c     08 00 06 F1 | 	add	_var01, #8
2db70     08 00 80 FF 
2db74     00 FF 6B FC | 	wrlong	##4607, _var01
2db78     00 FA 05 F6 | 	mov	result1, #0
2db7c                 | __system____root_stat_ret
2db7c     2D 00 64 FD | 	ret
2db80                 | 
2db80                 | __system___normalizeName
2db80     00 00 06 F6 | 	mov	_var01, #0
2db84     09 03 02 F6 | 	mov	_var02, arg01
2db88     01 05 02 F6 | 	mov	_var03, _var02
2db8c                 | LR__4270
2db8c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2db90     5C 01 90 AD |  if_e	jmp	#LR__4289
2db94     00 00 0E F2 | 	cmp	_var01, #0 wz
2db98     02 07 02 56 |  if_ne	mov	_var04, _var03
2db9c     01 04 06 51 |  if_ne	add	_var03, #1
2dba0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2dba4     00 00 06 56 |  if_ne	mov	_var01, #0
2dba8     01 07 C2 FA | 	rdbyte	_var04, _var02
2dbac     2E 06 0E F2 | 	cmp	_var04, #46 wz
2dbb0     D8 00 90 5D |  if_ne	jmp	#LR__4282
2dbb4     01 02 06 F1 | 	add	_var02, #1
2dbb8     01 07 C2 FA | 	rdbyte	_var04, _var02
2dbbc     01 02 86 F1 | 	sub	_var02, #1
2dbc0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2dbc4     18 00 90 AD |  if_e	jmp	#LR__4271
2dbc8     01 02 06 F1 | 	add	_var02, #1
2dbcc     01 09 C2 FA | 	rdbyte	_var05, _var02
2dbd0     01 02 86 F1 | 	sub	_var02, #1
2dbd4     04 0B 02 F6 | 	mov	_var06, _var05
2dbd8     07 0A 4E F7 | 	zerox	_var06, #7 wz
2dbdc     10 00 90 5D |  if_ne	jmp	#LR__4272
2dbe0                 | LR__4271
2dbe0     01 0D 02 F6 | 	mov	_var07, _var02
2dbe4     01 0C 06 F1 | 	add	_var07, #1
2dbe8     06 03 02 F6 | 	mov	_var02, _var07
2dbec     E0 00 90 FD | 	jmp	#LR__4286
2dbf0                 | LR__4272
2dbf0     01 02 06 F1 | 	add	_var02, #1
2dbf4     01 0D C2 FA | 	rdbyte	_var07, _var02
2dbf8     01 02 86 F1 | 	sub	_var02, #1
2dbfc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2dc00     2E 06 0E F2 | 	cmp	_var04, #46 wz
2dc04     84 00 90 5D |  if_ne	jmp	#LR__4281
2dc08     02 02 06 F1 | 	add	_var02, #2
2dc0c     01 0D C2 FA | 	rdbyte	_var07, _var02
2dc10     02 02 86 F1 | 	sub	_var02, #2
2dc14     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2dc18     2F 06 0E F2 | 	cmp	_var04, #47 wz
2dc1c     18 00 90 AD |  if_e	jmp	#LR__4273
2dc20     02 02 06 F1 | 	add	_var02, #2
2dc24     01 09 C2 FA | 	rdbyte	_var05, _var02
2dc28     02 02 86 F1 | 	sub	_var02, #2
2dc2c     04 0B 02 F6 | 	mov	_var06, _var05
2dc30     07 0A 4E F7 | 	zerox	_var06, #7 wz
2dc34     54 00 90 5D |  if_ne	jmp	#LR__4280
2dc38                 | LR__4273
2dc38     02 02 06 F1 | 	add	_var02, #2
2dc3c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2dc40     40 00 90 ED |  if_be	jmp	#LR__4279
2dc44     02 0F 02 F6 | 	mov	_var08, _var03
2dc48     01 0E 86 F1 | 	sub	_var08, #1
2dc4c                 | LR__4274
2dc4c     07 07 C2 FA | 	rdbyte	_var04, _var08
2dc50     2F 06 0E F2 | 	cmp	_var04, #47 wz
2dc54     0C 00 90 5D |  if_ne	jmp	#LR__4275
2dc58     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2dc5c     01 0E 86 11 |  if_a	sub	_var08, #1
2dc60     E8 FF 9F 1D |  if_a	jmp	#LR__4274
2dc64                 | LR__4275
2dc64     97 0C 48 FB | 	callpa	#(@LR__4277-@LR__4276)>>2,fcache_load_ptr_
2dc68                 | LR__4276
2dc68     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2dc6c     10 00 90 ED |  if_be	jmp	#LR__4278
2dc70     07 07 C2 FA | 	rdbyte	_var04, _var08
2dc74     2F 06 0E F2 | 	cmp	_var04, #47 wz
2dc78     01 0E 86 51 |  if_ne	sub	_var08, #1
2dc7c     E8 FF 9F 5D |  if_ne	jmp	#LR__4276
2dc80                 | LR__4277
2dc80                 | LR__4278
2dc80     07 05 02 F6 | 	mov	_var03, _var08
2dc84                 | LR__4279
2dc84     01 00 06 F6 | 	mov	_var01, #1
2dc88     44 00 90 FD | 	jmp	#LR__4286
2dc8c                 | LR__4280
2dc8c                 | LR__4281
2dc8c                 | LR__4282
2dc8c     97 18 48 FB | 	callpa	#(@LR__4284-@LR__4283)>>2,fcache_load_ptr_
2dc90                 | LR__4283
2dc90     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2dc94     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2dc98     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2dc9c     20 00 90 AD |  if_e	jmp	#LR__4285
2dca0     01 0B 02 F6 | 	mov	_var06, _var02
2dca4     01 09 02 F6 | 	mov	_var05, _var02
2dca8     01 08 06 F1 | 	add	_var05, #1
2dcac     05 11 C2 FA | 	rdbyte	_var09, _var06
2dcb0     04 03 02 F6 | 	mov	_var02, _var05
2dcb4     02 11 42 FC | 	wrbyte	_var09, _var03
2dcb8     01 04 06 F1 | 	add	_var03, #1
2dcbc     D0 FF 9F FD | 	jmp	#LR__4283
2dcc0                 | LR__4284
2dcc0                 | LR__4285
2dcc0     01 07 C2 FA | 	rdbyte	_var04, _var02
2dcc4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2dcc8     C0 FE 9F 5D |  if_ne	jmp	#LR__4270
2dccc     01 00 06 F6 | 	mov	_var01, #1
2dcd0                 | LR__4286
2dcd0     97 0C 48 FB | 	callpa	#(@LR__4288-@LR__4287)>>2,fcache_load_ptr_
2dcd4                 | LR__4287
2dcd4     01 07 C2 FA | 	rdbyte	_var04, _var02
2dcd8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2dcdc     01 0D 02 A6 |  if_e	mov	_var07, _var02
2dce0     01 0C 06 A1 |  if_e	add	_var07, #1
2dce4     06 03 02 A6 |  if_e	mov	_var02, _var07
2dce8     E8 FF 9F AD |  if_e	jmp	#LR__4287
2dcec                 | LR__4288
2dcec     9C FE 9F FD | 	jmp	#LR__4270
2dcf0                 | LR__4289
2dcf0     02 01 48 FC | 	wrbyte	#0, _var03
2dcf4                 | __system___normalizeName_ret
2dcf4     2D 00 64 FD | 	ret
2dcf8                 | 
2dcf8                 | __system___strrev
2dcf8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2dcfc     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
2dd00     09 03 02 F6 | 	mov	_var02, arg01
2dd04     97 06 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
2dd08                 | LR__4290
2dd08     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2dd0c     01 02 06 51 |  if_ne	add	_var02, #1
2dd10     F4 FF 9F 5D |  if_ne	jmp	#LR__4290
2dd14                 | LR__4291
2dd14     01 02 86 F1 | 	sub	_var02, #1
2dd18     97 12 48 FB | 	callpa	#(@LR__4293-@LR__4292)>>2,fcache_load_ptr_
2dd1c                 | LR__4292
2dd1c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2dd20     1C 00 90 ED |  if_be	jmp	#LR__4294
2dd24     09 01 C2 FA | 	rdbyte	_var01, arg01
2dd28     01 05 C2 FA | 	rdbyte	_var03, _var02
2dd2c     09 05 42 FC | 	wrbyte	_var03, arg01
2dd30     01 01 42 FC | 	wrbyte	_var01, _var02
2dd34     01 12 06 F1 | 	add	arg01, #1
2dd38     01 02 86 F1 | 	sub	_var02, #1
2dd3c     DC FF 9F FD | 	jmp	#LR__4292
2dd40                 | LR__4293
2dd40                 | LR__4294
2dd40                 | __system___strrev_ret
2dd40     2D 00 64 FD | 	ret
2dd44                 | 
2dd44                 | __system___fmtpad
2dd44     06 4A 05 F6 | 	mov	COUNT_, #6
2dd48     A8 00 A0 FD | 	call	#pushregs_
2dd4c     09 27 02 F6 | 	mov	local01, arg01
2dd50     0A 29 02 F6 | 	mov	local02, arg02
2dd54     0B 2B 02 F6 | 	mov	local03, arg03
2dd58     14 13 EA F8 | 	getbyte	arg01, local02, #1
2dd5c     16 28 46 F0 | 	shr	local02, #22
2dd60     03 28 0E F5 | 	and	local02, #3 wz
2dd64     00 2C 06 F6 | 	mov	local04, #0
2dd68     01 28 06 A6 |  if_e	mov	local02, #1
2dd6c     0C 29 CA F7 | 	test	local02, arg04 wz
2dd70     00 FA 05 A6 |  if_e	mov	result1, #0
2dd74     88 00 90 AD |  if_e	jmp	#LR__4303
2dd78     09 2B C2 F2 | 	subr	local03, arg01
2dd7c     01 2A 56 F2 | 	cmps	local03, #1 wc
2dd80     00 FA 05 C6 |  if_b	mov	result1, #0
2dd84     78 00 90 CD |  if_b	jmp	#LR__4303
2dd88     03 28 0E F2 | 	cmp	local02, #3 wz
2dd8c     18 00 90 5D |  if_ne	jmp	#LR__4300
2dd90     01 18 0E F2 | 	cmp	arg04, #1 wz
2dd94     6E 28 62 FD | 	wrz	local02
2dd98     14 2B 02 F1 | 	add	local03, local02
2dd9c     15 2B 52 F6 | 	abs	local03, local03 wc
2dda0     01 2A 46 F0 | 	shr	local03, #1
2dda4     15 2B 82 F6 | 	negc	local03, local03
2dda8                 | LR__4300
2dda8     01 2A 56 F2 | 	cmps	local03, #1 wc
2ddac     4C 00 90 CD |  if_b	jmp	#LR__4302
2ddb0     15 2F 02 F6 | 	mov	local05, local03
2ddb4                 | LR__4301
2ddb4     13 29 02 F6 | 	mov	local02, local01
2ddb8     13 31 02 F6 | 	mov	local06, local01
2ddbc     13 28 46 F7 | 	zerox	local02, #19
2ddc0     14 30 46 F0 | 	shr	local06, #20
2ddc4     02 30 66 F0 | 	shl	local06, #2
2ddc8     ED 30 02 F1 | 	add	local06, __methods__
2ddcc     18 31 02 FB | 	rdlong	local06, local06
2ddd0     20 12 06 F6 | 	mov	arg01, #32
2ddd4     F2 2A 02 F6 | 	mov	local03, objptr
2ddd8     14 E5 01 F6 | 	mov	objptr, local02
2dddc     2D 30 62 FD | 	call	local06
2dde0     15 E5 01 F6 | 	mov	objptr, local03
2dde4     FD 30 02 F6 | 	mov	local06, result1
2dde8     00 30 56 F2 | 	cmps	local06, #0 wc
2ddec     18 FB 01 C6 |  if_b	mov	result1, local06
2ddf0     0C 00 90 CD |  if_b	jmp	#LR__4303
2ddf4     18 2D 02 F1 | 	add	local04, local06
2ddf8     EE 2F 6E FB | 	djnz	local05, #LR__4301
2ddfc                 | LR__4302
2ddfc     16 FB 01 F6 | 	mov	result1, local04
2de00                 | LR__4303
2de00     A7 F0 03 F6 | 	mov	ptra, fp
2de04     B2 00 A0 FD | 	call	#popregs_
2de08                 | __system___fmtpad_ret
2de08     2D 00 64 FD | 	ret
2de0c                 | 
2de0c                 | __system___uitoa
2de0c     04 4A 05 F6 | 	mov	COUNT_, #4
2de10     A8 00 A0 FD | 	call	#pushregs_
2de14     09 27 02 F6 | 	mov	local01, arg01
2de18     00 1A 4E F2 | 	cmps	arg05, #0 wz
2de1c     13 1B 02 F6 | 	mov	arg05, local01
2de20     00 28 06 F6 | 	mov	local02, #0
2de24     37 2A 06 56 |  if_ne	mov	local03, #55
2de28     57 2A 06 A6 |  if_e	mov	local03, #87
2de2c                 | LR__4310
2de2c     0B 15 12 FD | 	qdiv	arg02, arg03
2de30     19 2C 62 FD | 	getqy	local04
2de34     0B 15 12 FD | 	qdiv	arg02, arg03
2de38     0A 2C 16 F2 | 	cmp	local04, #10 wc
2de3c     30 2C 06 C1 |  if_b	add	local04, #48
2de40     15 2D 02 31 |  if_ae	add	local04, local03
2de44     0D 2D 42 FC | 	wrbyte	local04, arg05
2de48     01 1A 06 F1 | 	add	arg05, #1
2de4c     01 28 06 F1 | 	add	local02, #1
2de50     18 14 62 FD | 	getqx	arg02
2de54     00 14 0E F2 | 	cmp	arg02, #0 wz
2de58     D0 FF 9F 5D |  if_ne	jmp	#LR__4310
2de5c     0C 29 12 F2 | 	cmp	local02, arg04 wc
2de60     C8 FF 9F CD |  if_b	jmp	#LR__4310
2de64     0D 01 48 FC | 	wrbyte	#0, arg05
2de68     13 13 02 F6 | 	mov	arg01, local01
2de6c     88 FE BF FD | 	call	#__system___strrev
2de70     14 FB 01 F6 | 	mov	result1, local02
2de74     A7 F0 03 F6 | 	mov	ptra, fp
2de78     B2 00 A0 FD | 	call	#popregs_
2de7c                 | __system___uitoa_ret
2de7c     2D 00 64 FD | 	ret
2de80                 | 
2de80                 | __system__disassemble_0585
2de80     10 4A 05 F6 | 	mov	COUNT_, #16
2de84     A8 00 A0 FD | 	call	#pushregs_
2de88     09 27 02 F6 | 	mov	local01, arg01
2de8c     0A 29 02 F6 | 	mov	local02, arg02
2de90     0B 2B 02 F6 | 	mov	local03, arg03
2de94     0C 2D 02 F6 | 	mov	local04, arg04
2de98     0D 2F 02 F6 | 	mov	local05, arg05
2de9c     17 13 52 F6 | 	abs	arg01, local05 wc
2dea0     1F 30 C6 C9 |  if_b	decod	local06, #31
2dea4     00 30 06 36 |  if_ae	mov	local06, #0
2dea8     C0 CF BF FD | 	call	#__system___float_fromuns
2deac     18 FB 61 F5 | 	xor	result1, local06
2deb0     FD 32 02 F6 | 	mov	local07, result1
2deb4     00 34 06 F6 | 	mov	local08, #0
2deb8     13 13 02 F6 | 	mov	arg01, local01
2debc     00 14 06 F6 | 	mov	arg02, #0
2dec0     01 16 06 F6 | 	mov	arg03, #1
2dec4     DC D7 BF FD | 	call	#__system___float_cmp
2dec8     00 FA 0D F2 | 	cmp	result1, #0 wz
2decc     00 36 06 A6 |  if_e	mov	local09, #0
2ded0     14 01 68 AC |  if_e	wrlong	#0, local02
2ded4     15 37 62 AC |  if_e	wrlong	local09, local03
2ded8     8C 01 90 AD |  if_e	jmp	#LR__4332
2dedc     13 13 02 F6 | 	mov	arg01, local01
2dee0     B4 DC BF FD | 	call	#__system____builtin_ilogb
2dee4     FD 38 02 F6 | 	mov	local10, result1
2dee8     0A 2E 0E F2 | 	cmp	local05, #10 wz
2deec     24 00 90 5D |  if_ne	jmp	#LR__4320
2def0     1C 37 02 F6 | 	mov	local09, local10
2def4     01 36 66 F0 | 	shl	local09, #1
2def8     1C 37 02 F1 | 	add	local09, local10
2defc     1B 39 52 F6 | 	abs	local10, local09 wc
2df00     0A 38 16 FD | 	qdiv	local10, #10
2df04     09 3A 06 F6 | 	mov	local11, #9
2df08     18 38 62 FD | 	getqx	local10
2df0c     1C 39 82 F6 | 	negc	local10, local10
2df10     04 00 90 FD | 	jmp	#LR__4321
2df14                 | LR__4320
2df14     18 3A 06 F6 | 	mov	local11, #24
2df18                 | LR__4321
2df18                 | LR__4322
2df18     08 34 56 F2 | 	cmps	local08, #8 wc
2df1c     01 34 06 F1 | 	add	local08, #1
2df20     60 00 90 3D |  if_ae	jmp	#LR__4323
2df24     00 C0 1F FF 
2df28     00 12 06 F6 | 	mov	arg01, ##1065353216
2df2c     19 15 02 F6 | 	mov	arg02, local07
2df30     1C 17 02 F6 | 	mov	arg03, local10
2df34     44 E3 BF FD | 	call	#__system___float_pow_n
2df38     FD 14 02 F6 | 	mov	arg02, result1
2df3c     13 13 02 F6 | 	mov	arg01, local01
2df40     30 D5 BF FD | 	call	#__system___float_div
2df44     FD 3C 02 F6 | 	mov	local12, result1
2df48     1E 13 02 F6 | 	mov	arg01, local12
2df4c     00 C0 1F FF 
2df50     00 14 06 F6 | 	mov	arg02, ##1065353216
2df54     01 16 06 F6 | 	mov	arg03, #1
2df58     48 D7 BF FD | 	call	#__system___float_cmp
2df5c     00 FA 55 F2 | 	cmps	result1, #0 wc
2df60     01 38 86 C1 |  if_b	sub	local10, #1
2df64     B0 FF 9F CD |  if_b	jmp	#LR__4322
2df68     19 15 02 F6 | 	mov	arg02, local07
2df6c     1E 13 02 F6 | 	mov	arg01, local12
2df70     01 16 66 F6 | 	neg	arg03, #1
2df74     2C D7 BF FD | 	call	#__system___float_cmp
2df78     00 FA 55 F2 | 	cmps	result1, #0 wc
2df7c     01 38 06 31 |  if_ae	add	local10, #1
2df80     94 FF 9F 3D |  if_ae	jmp	#LR__4322
2df84                 | LR__4323
2df84     1E 13 02 F6 | 	mov	arg01, local12
2df88     0C DC BF FD | 	call	#__system____builtin_ilogb
2df8c     FD 3E 02 F6 | 	mov	local13, result1
2df90     1E 41 02 F6 | 	mov	local14, local12
2df94     17 41 06 F4 | 	bitl	local14, #279
2df98     17 40 26 F4 | 	bith	local14, #23
2df9c     1F 41 62 F0 | 	shl	local14, local13
2dfa0     02 2E 0E F2 | 	cmp	local05, #2 wz
2dfa4     02 2C 66 A0 |  if_e	shl	local04, #2
2dfa8     00 42 06 F6 | 	mov	local15, #0
2dfac     00 2C 56 F2 | 	cmps	local04, #0 wc
2dfb0     10 00 90 3D |  if_ae	jmp	#LR__4324
2dfb4     1C 2D C2 F2 | 	subr	local04, local10
2dfb8     00 2C 56 F2 | 	cmps	local04, #0 wc
2dfbc     A0 00 90 CD |  if_b	jmp	#LR__4331
2dfc0     04 00 90 FD | 	jmp	#LR__4325
2dfc4                 | LR__4324
2dfc4     01 2C 06 F1 | 	add	local04, #1
2dfc8                 | LR__4325
2dfc8     1D 2D 7A F3 | 	fles	local04, local11 wcz
2dfcc     01 44 06 F6 | 	mov	local16, #1
2dfd0     97 22 48 FB | 	callpa	#(@LR__4327-@LR__4326)>>2,fcache_load_ptr_
2dfd4                 | LR__4326
2dfd4     00 40 00 FF 
2dfd8     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2dfdc     38 00 90 3D |  if_ae	jmp	#LR__4328
2dfe0     01 2C 56 F2 | 	cmps	local04, #1 wc
2dfe4     01 2C 86 F1 | 	sub	local04, #1
2dfe8     2C 00 90 CD |  if_b	jmp	#LR__4328
2dfec     17 43 02 FD | 	qmul	local15, local05
2dff0     20 3F 02 F6 | 	mov	local13, local14
2dff4     17 3E 46 F0 | 	shr	local13, #23
2dff8     17 41 06 F4 | 	bitl	local14, #279
2dffc     18 42 62 FD | 	getqx	local15
2e000     17 45 02 FD | 	qmul	local16, local05
2e004     18 44 62 FD | 	getqx	local16
2e008     17 41 02 FD | 	qmul	local14, local05
2e00c     1F 43 02 F1 | 	add	local15, local13
2e010     18 40 62 FD | 	getqx	local14
2e014     BC FF 9F FD | 	jmp	#LR__4326
2e018                 | LR__4327
2e018                 | LR__4328
2e018     17 37 02 F6 | 	mov	local09, local05
2e01c     17 36 66 F0 | 	shl	local09, #23
2e020     1B 3F 52 F6 | 	abs	local13, local09 wc
2e024     01 3E 46 F0 | 	shr	local13, #1
2e028     1F 3F 82 F6 | 	negc	local13, local13
2e02c     1F 41 1A F2 | 	cmp	local14, local13 wcz
2e030     20 00 90 1D |  if_a	jmp	#LR__4329
2e034     17 2E 66 F0 | 	shl	local05, #23
2e038     17 3F 52 F6 | 	abs	local13, local05 wc
2e03c     01 3E 46 F0 | 	shr	local13, #1
2e040     1F 3F 82 F6 | 	negc	local13, local13
2e044     1F 41 0A F2 | 	cmp	local14, local13 wz
2e048     14 00 90 5D |  if_ne	jmp	#LR__4330
2e04c     01 42 CE F7 | 	test	local15, #1 wz
2e050     0C 00 90 AD |  if_e	jmp	#LR__4330
2e054                 | LR__4329
2e054     01 42 06 F1 | 	add	local15, #1
2e058     22 43 0A F2 | 	cmp	local15, local16 wz
2e05c     01 38 06 A1 |  if_e	add	local10, #1
2e060                 | LR__4330
2e060                 | LR__4331
2e060     14 43 62 FC | 	wrlong	local15, local02
2e064     15 39 62 FC | 	wrlong	local10, local03
2e068                 | LR__4332
2e068     A7 F0 03 F6 | 	mov	ptra, fp
2e06c     B2 00 A0 FD | 	call	#popregs_
2e070                 | __system__disassemble_0585_ret
2e070     2D 00 64 FD | 	ret
2e074                 | 
2e074                 | __system__emitsign_0587
2e074     00 FA 05 F6 | 	mov	result1, #0
2e078     00 14 0E F2 | 	cmp	arg02, #0 wz
2e07c     09 01 02 56 |  if_ne	mov	_var01, arg01
2e080     01 12 06 51 |  if_ne	add	arg01, #1
2e084     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2e088     01 FA 05 56 |  if_ne	mov	result1, #1
2e08c     00 16 0E F2 | 	cmp	arg03, #0 wz
2e090     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2e094     01 12 06 51 |  if_ne	add	arg01, #1
2e098     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2e09c     02 FA 05 51 |  if_ne	add	result1, #2
2e0a0                 | __system__emitsign_0587_ret
2e0a0     2D 00 64 FD | 	ret
2e0a4                 | 
2e0a4                 | __system___getiolock_0625
2e0a4     01 4A 05 F6 | 	mov	COUNT_, #1
2e0a8     A8 00 A0 FD | 	call	#pushregs_
2e0ac     98 F8 BF FD | 	call	#__system____getftab
2e0b0     FD 26 0A F6 | 	mov	local01, result1 wz
2e0b4     10 00 90 AD |  if_e	jmp	#LR__4340
2e0b8     08 26 06 F1 | 	add	local01, #8
2e0bc     13 FB 09 FB | 	rdlong	result1, local01 wz
2e0c0     08 26 86 F1 | 	sub	local01, #8
2e0c4     18 00 90 5D |  if_ne	jmp	#LR__4341
2e0c8                 | LR__4340
2e0c8     01 00 00 FF 
2e0cc     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2e0d0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2e0d4     01 00 00 FF 
2e0d8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2e0dc     08 00 90 FD | 	jmp	#LR__4342
2e0e0                 | LR__4341
2e0e0     0C 26 06 F1 | 	add	local01, #12
2e0e4     13 FB 01 F6 | 	mov	result1, local01
2e0e8                 | LR__4342
2e0e8     A7 F0 03 F6 | 	mov	ptra, fp
2e0ec     B2 00 A0 FD | 	call	#popregs_
2e0f0                 | __system___getiolock_0625_ret
2e0f0     2D 00 64 FD | 	ret
2e0f4                 | 
2e0f4                 | __system___gettxfunc
2e0f4     01 4A 05 F6 | 	mov	COUNT_, #1
2e0f8     A8 00 A0 FD | 	call	#pushregs_
2e0fc     48 F8 BF FD | 	call	#__system____getftab
2e100     FD 26 0A F6 | 	mov	local01, result1 wz
2e104     10 00 90 AD |  if_e	jmp	#LR__4350
2e108     08 26 06 F1 | 	add	local01, #8
2e10c     13 15 0A FB | 	rdlong	arg02, local01 wz
2e110     08 26 86 F1 | 	sub	local01, #8
2e114     08 00 90 5D |  if_ne	jmp	#LR__4351
2e118                 | LR__4350
2e118     00 FA 05 F6 | 	mov	result1, #0
2e11c     0C 00 90 FD | 	jmp	#LR__4352
2e120                 | LR__4351
2e120     00 88 05 FF 
2e124     00 26 46 F5 | 	or	local01, ##185597952
2e128     13 FB 01 F6 | 	mov	result1, local01
2e12c                 | LR__4352
2e12c     A7 F0 03 F6 | 	mov	ptra, fp
2e130     B2 00 A0 FD | 	call	#popregs_
2e134                 | __system___gettxfunc_ret
2e134     2D 00 64 FD | 	ret
2e138                 | 
2e138                 | __system___getrxfunc
2e138     01 4A 05 F6 | 	mov	COUNT_, #1
2e13c     A8 00 A0 FD | 	call	#pushregs_
2e140     04 F8 BF FD | 	call	#__system____getftab
2e144     FD 26 0A F6 | 	mov	local01, result1 wz
2e148     10 00 90 AD |  if_e	jmp	#LR__4360
2e14c     08 26 06 F1 | 	add	local01, #8
2e150     13 15 0A FB | 	rdlong	arg02, local01 wz
2e154     08 26 86 F1 | 	sub	local01, #8
2e158     08 00 90 5D |  if_ne	jmp	#LR__4361
2e15c                 | LR__4360
2e15c     00 FA 05 F6 | 	mov	result1, #0
2e160     0C 00 90 FD | 	jmp	#LR__4362
2e164                 | LR__4361
2e164     00 90 05 FF 
2e168     00 26 46 F5 | 	or	local01, ##186646528
2e16c     13 FB 01 F6 | 	mov	result1, local01
2e170                 | LR__4362
2e170     A7 F0 03 F6 | 	mov	ptra, fp
2e174     B2 00 A0 FD | 	call	#popregs_
2e178                 | __system___getrxfunc_ret
2e178     2D 00 64 FD | 	ret
2e17c                 | 
2e17c                 | __system____ScanForChar
2e17c     09 01 02 F6 | 	mov	_var01, arg01
2e180     09 03 02 F6 | 	mov	_var02, arg01
2e184     97 06 48 FB | 	callpa	#(@LR__4371-@LR__4370)>>2,fcache_load_ptr_
2e188                 | LR__4370
2e188     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2e18c     01 02 06 51 |  if_ne	add	_var02, #1
2e190     F4 FF 9F 5D |  if_ne	jmp	#LR__4370
2e194                 | LR__4371
2e194     09 03 82 F1 | 	sub	_var02, arg01
2e198     01 FB 01 F6 | 	mov	result1, _var02
2e19c     FD 12 0A F6 | 	mov	arg01, result1 wz
2e1a0     00 FA 05 A6 |  if_e	mov	result1, #0
2e1a4     B8 00 90 AD |  if_e	jmp	#LR__4378
2e1a8     0A 05 02 F6 | 	mov	_var03, arg02
2e1ac     07 04 4E F7 | 	zerox	_var03, #7 wz
2e1b0     00 FA 05 A6 |  if_e	mov	result1, #0
2e1b4     A8 00 90 AD |  if_e	jmp	#LR__4378
2e1b8     01 16 16 F2 | 	cmp	arg03, #1 wc
2e1bc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2e1c0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2e1c4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2e1c8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4378
2e1cc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2e1d0     10 00 90 ED |  if_be	jmp	#LR__4372
2e1d4     00 18 0E F2 | 	cmp	arg04, #0 wz
2e1d8     00 FA 05 A6 |  if_e	mov	result1, #0
2e1dc     80 00 90 AD |  if_e	jmp	#LR__4378
2e1e0     09 17 02 F6 | 	mov	arg03, arg01
2e1e4                 | LR__4372
2e1e4     01 16 86 F1 | 	sub	arg03, #1
2e1e8     00 18 0E F2 | 	cmp	arg04, #0 wz
2e1ec     38 00 90 5D |  if_ne	jmp	#LR__4374
2e1f0     0B 07 02 F6 | 	mov	_var04, arg03
2e1f4     09 09 02 F6 | 	mov	_var05, arg01
2e1f8                 | LR__4373
2e1f8     04 07 12 F2 | 	cmp	_var04, _var05 wc
2e1fc     5C 00 90 3D |  if_ae	jmp	#LR__4377
2e200     03 05 02 F6 | 	mov	_var03, _var04
2e204     00 05 02 F1 | 	add	_var03, _var01
2e208     02 05 C2 FA | 	rdbyte	_var03, _var03
2e20c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2e210     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2e214     01 06 06 A1 |  if_e	add	_var04, #1
2e218     03 FB 01 A6 |  if_e	mov	result1, _var04
2e21c     40 00 90 AD |  if_e	jmp	#LR__4378
2e220     01 06 06 F1 | 	add	_var04, #1
2e224     D0 FF 9F FD | 	jmp	#LR__4373
2e228                 | LR__4374
2e228     0B 07 02 F6 | 	mov	_var04, arg03
2e22c                 | LR__4375
2e22c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2e230     28 00 90 1D |  if_a	jmp	#LR__4376
2e234     03 09 02 F6 | 	mov	_var05, _var04
2e238     00 09 02 F1 | 	add	_var05, _var01
2e23c     04 05 C2 FA | 	rdbyte	_var03, _var05
2e240     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2e244     04 05 0A F2 | 	cmp	_var03, _var05 wz
2e248     01 06 06 A1 |  if_e	add	_var04, #1
2e24c     03 FB 01 A6 |  if_e	mov	result1, _var04
2e250     0C 00 90 AD |  if_e	jmp	#LR__4378
2e254     01 06 86 F1 | 	sub	_var04, #1
2e258     D0 FF 9F FD | 	jmp	#LR__4375
2e25c                 | LR__4376
2e25c                 | LR__4377
2e25c     00 FA 05 F6 | 	mov	result1, #0
2e260                 | LR__4378
2e260                 | __system____ScanForChar_ret
2e260     2D 00 64 FD | 	ret
2e264                 | 
2e264                 | __system___basic_dir
2e264     05 4A 05 F6 | 	mov	COUNT_, #5
2e268     A8 00 A0 FD | 	call	#pushregs_
2e26c     4C F0 07 F1 | 	add	ptra, #76
2e270     04 4E 05 F1 | 	add	fp, #4
2e274     A7 12 62 FC | 	wrlong	arg01, fp
2e278     04 4E 05 F1 | 	add	fp, #4
2e27c     A7 14 62 FC | 	wrlong	arg02, fp
2e280     04 4E 85 F1 | 	sub	fp, #4
2e284     A7 14 0A FB | 	rdlong	arg02, fp wz
2e288     04 4E 85 F1 | 	sub	fp, #4
2e28c     04 4E 05 51 |  if_ne	add	fp, #4
2e290     A7 26 02 5B |  if_ne	rdlong	local01, fp
2e294     04 4E 85 51 |  if_ne	sub	fp, #4
2e298     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2e29c     70 00 90 AD |  if_e	jmp	#LR__4380
2e2a0     03 00 00 FF 
2e2a4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e2a8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e2ac     03 00 00 FF 
2e2b0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e2b4     03 00 00 5F 
2e2b8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2e2bc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2e2c0     03 00 00 5F 
2e2c4     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2e2c8     D0 E9 BF 5D |  if_ne	call	#__system__closedir
2e2cc     BF 01 00 FF 
2e2d0     7C 13 06 F6 | 	mov	arg01, ##@LR__5558
2e2d4     D8 E8 BF FD | 	call	#__system__opendir
2e2d8     03 00 00 FF 
2e2dc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e2e0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2e2e4     08 4E 05 F1 | 	add	fp, #8
2e2e8     A7 28 02 FB | 	rdlong	local02, fp
2e2ec     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2e2f0     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2e2f4     04 4E 85 F1 | 	sub	fp, #4
2e2f8     A7 28 02 FB | 	rdlong	local02, fp
2e2fc     04 4E 85 F1 | 	sub	fp, #4
2e300     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2e304     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2e308     03 00 00 FF 
2e30c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2e310                 | LR__4380
2e310     03 00 00 FF 
2e314     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e318     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e31c     03 00 00 FF 
2e320     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e324     BF 01 00 AF 
2e328     7E FB 05 A6 |  if_e	mov	result1, ##@LR__5559
2e32c     84 02 90 AD |  if_e	jmp	#LR__4393
2e330                 | LR__4381
2e330     03 00 00 FF 
2e334     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e338     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2e33c     03 00 00 FF 
2e340     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e344     C8 E9 BF FD | 	call	#__system__readdir
2e348     0C 4E 05 F1 | 	add	fp, #12
2e34c     A7 FA 61 FC | 	wrlong	result1, fp
2e350     0C 4E 85 F1 | 	sub	fp, #12
2e354     00 FA 0D F2 | 	cmp	result1, #0 wz
2e358     38 00 90 5D |  if_ne	jmp	#LR__4382
2e35c     03 00 00 FF 
2e360     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e364     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2e368     03 00 00 FF 
2e36c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e370     28 E9 BF FD | 	call	#__system__closedir
2e374     03 00 00 FF 
2e378     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e37c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2e380     03 00 00 FF 
2e384     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e388     BF 01 00 FF 
2e38c     80 FB 05 F6 | 	mov	result1, ##@LR__5560
2e390     20 02 90 FD | 	jmp	#LR__4393
2e394                 | LR__4382
2e394     0C 4E 05 F1 | 	add	fp, #12
2e398     A7 12 02 FB | 	rdlong	arg01, fp
2e39c     0C 4E 85 F1 | 	sub	fp, #12
2e3a0     03 00 00 FF 
2e3a4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2e3a8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2e3ac     03 00 00 FF 
2e3b0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2e3b4     10 09 B0 FD | 	call	#__system___pat_match
2e3b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3bc     70 FF 9F AD |  if_e	jmp	#LR__4381
2e3c0     03 00 00 FF 
2e3c4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2e3c8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e3cc     03 00 00 FF 
2e3d0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2e3d4     78 01 90 AD |  if_e	jmp	#LR__4389
2e3d8     0C 4E 05 F1 | 	add	fp, #12
2e3dc     A7 12 02 FB | 	rdlong	arg01, fp
2e3e0     04 4E 05 F1 | 	add	fp, #4
2e3e4     A7 14 02 F6 | 	mov	arg02, fp
2e3e8     10 4E 85 F1 | 	sub	fp, #16
2e3ec     24 F2 BF FD | 	call	#__system__stat
2e3f0     40 4E 05 F1 | 	add	fp, #64
2e3f4     A7 FA 61 FC | 	wrlong	result1, fp
2e3f8     40 4E 85 F1 | 	sub	fp, #64
2e3fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e400     BF 01 00 5F 
2e404     82 FB 05 56 |  if_ne	mov	result1, ##@LR__5561
2e408     A8 01 90 5D |  if_ne	jmp	#LR__4393
2e40c     18 4E 05 F1 | 	add	fp, #24
2e410     A7 28 02 FB | 	rdlong	local02, fp
2e414     78 00 00 FF 
2e418     00 28 06 F5 | 	and	local02, ##61440
2e41c     2C 4E 05 F1 | 	add	fp, #44
2e420     A7 28 62 FC | 	wrlong	local02, fp
2e424     38 4E 85 F1 | 	sub	fp, #56
2e428     A7 28 02 FB | 	rdlong	local02, fp
2e42c     0C 4E 85 F1 | 	sub	fp, #12
2e430     14 29 C2 FA | 	rdbyte	local02, local02
2e434     2E 28 0E F2 | 	cmp	local02, #46 wz
2e438     08 4E 05 A1 |  if_e	add	fp, #8
2e43c     A7 04 68 AC |  if_e	wrlong	#2, fp
2e440     08 4E C5 F3 | 	sumz	fp, #8
2e444     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e448     08 4E 85 51 |  if_ne	sub	fp, #8
2e44c     44 4E 05 F1 | 	add	fp, #68
2e450     A7 28 02 FB | 	rdlong	local02, fp
2e454     44 4E 85 F1 | 	sub	fp, #68
2e458     08 00 00 FF 
2e45c     00 28 0E F2 | 	cmp	local02, ##4096 wz
2e460     18 00 90 5D |  if_ne	jmp	#LR__4383
2e464     08 4E 05 F1 | 	add	fp, #8
2e468     A7 28 02 FB | 	rdlong	local02, fp
2e46c     10 28 46 F5 | 	or	local02, #16
2e470     A7 28 62 FC | 	wrlong	local02, fp
2e474     08 4E 85 F1 | 	sub	fp, #8
2e478     AC 00 90 FD | 	jmp	#LR__4388
2e47c                 | LR__4383
2e47c     44 4E 05 F1 | 	add	fp, #68
2e480     A7 28 02 FB | 	rdlong	local02, fp
2e484     44 4E 85 F1 | 	sub	fp, #68
2e488     10 00 00 FF 
2e48c     00 28 0E F2 | 	cmp	local02, ##8192 wz
2e490     44 4E 05 51 |  if_ne	add	fp, #68
2e494     A7 26 02 5B |  if_ne	rdlong	local01, fp
2e498     44 4E 85 51 |  if_ne	sub	fp, #68
2e49c     18 00 00 5F 
2e4a0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2e4a4     44 4E 05 51 |  if_ne	add	fp, #68
2e4a8     13 2B 02 56 |  if_ne	mov	local03, local01
2e4ac     44 4E 85 51 |  if_ne	sub	fp, #68
2e4b0     20 00 00 5F 
2e4b4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2e4b8     18 00 90 5D |  if_ne	jmp	#LR__4384
2e4bc     08 4E 05 F1 | 	add	fp, #8
2e4c0     A7 28 02 FB | 	rdlong	local02, fp
2e4c4     04 28 46 F5 | 	or	local02, #4
2e4c8     A7 28 62 FC | 	wrlong	local02, fp
2e4cc     08 4E 85 F1 | 	sub	fp, #8
2e4d0     54 00 90 FD | 	jmp	#LR__4387
2e4d4                 | LR__4384
2e4d4     18 4E 05 F1 | 	add	fp, #24
2e4d8     A7 28 02 FB | 	rdlong	local02, fp
2e4dc     18 4E 85 F1 | 	sub	fp, #24
2e4e0     92 28 CE F7 | 	test	local02, #146 wz
2e4e4     18 00 90 5D |  if_ne	jmp	#LR__4385
2e4e8     08 4E 05 F1 | 	add	fp, #8
2e4ec     A7 28 02 FB | 	rdlong	local02, fp
2e4f0     01 28 46 F5 | 	or	local02, #1
2e4f4     A7 28 62 FC | 	wrlong	local02, fp
2e4f8     08 4E 85 F1 | 	sub	fp, #8
2e4fc     28 00 90 FD | 	jmp	#LR__4386
2e500                 | LR__4385
2e500     44 4E 05 F1 | 	add	fp, #68
2e504     A7 2C 02 FB | 	rdlong	local04, fp
2e508     44 4E 85 F1 | 	sub	fp, #68
2e50c     08 00 00 FF 
2e510     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2e514     08 4E 05 51 |  if_ne	add	fp, #8
2e518     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2e51c     20 2C 46 55 |  if_ne	or	local04, #32
2e520     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2e524     08 4E 85 51 |  if_ne	sub	fp, #8
2e528                 | LR__4386
2e528                 | LR__4387
2e528                 | LR__4388
2e528     08 4E 05 F1 | 	add	fp, #8
2e52c     A7 2C 02 FB | 	rdlong	local04, fp
2e530     08 4E 85 F1 | 	sub	fp, #8
2e534     03 00 00 FF 
2e538     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2e53c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2e540     03 00 00 FF 
2e544     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2e548     13 2D CA F7 | 	test	local04, local01 wz
2e54c     E0 FD 9F AD |  if_e	jmp	#LR__4381
2e550                 | LR__4389
2e550     0C 4E 05 F1 | 	add	fp, #12
2e554     A7 12 02 FB | 	rdlong	arg01, fp
2e558     0C 4E 85 F1 | 	sub	fp, #12
2e55c     09 2F 02 F6 | 	mov	local05, arg01
2e560     97 06 48 FB | 	callpa	#(@LR__4391-@LR__4390)>>2,fcache_load_ptr_
2e564                 | LR__4390
2e564     17 FB C9 FA | 	rdbyte	result1, local05 wz
2e568     01 2E 06 51 |  if_ne	add	local05, #1
2e56c     F4 FF 9F 5D |  if_ne	jmp	#LR__4390
2e570                 | LR__4391
2e570     17 13 C2 F2 | 	subr	arg01, local05
2e574     01 12 06 F1 | 	add	arg01, #1
2e578     20 E0 BF FD | 	call	#__system___gc_alloc_managed
2e57c     48 4E 05 F1 | 	add	fp, #72
2e580     A7 FA 61 FC | 	wrlong	result1, fp
2e584     48 4E 85 F1 | 	sub	fp, #72
2e588     00 FA 0D F2 | 	cmp	result1, #0 wz
2e58c     18 00 90 AD |  if_e	jmp	#LR__4392
2e590     48 4E 05 F1 | 	add	fp, #72
2e594     A7 12 02 FB | 	rdlong	arg01, fp
2e598     3C 4E 85 F1 | 	sub	fp, #60
2e59c     A7 14 02 FB | 	rdlong	arg02, fp
2e5a0     0C 4E 85 F1 | 	sub	fp, #12
2e5a4     00 9E BF FD | 	call	#__system____builtin_strcpy
2e5a8                 | LR__4392
2e5a8     48 4E 05 F1 | 	add	fp, #72
2e5ac     A7 FA 01 FB | 	rdlong	result1, fp
2e5b0     48 4E 85 F1 | 	sub	fp, #72
2e5b4                 | LR__4393
2e5b4     A7 F0 03 F6 | 	mov	ptra, fp
2e5b8     B2 00 A0 FD | 	call	#popregs_
2e5bc                 | __system___basic_dir_ret
2e5bc     2D 00 64 FD | 	ret
2e5c0                 | 
2e5c0                 | __system__pack_0701
2e5c0     09 01 02 F6 | 	mov	_var01, arg01
2e5c4     7F 16 06 F1 | 	add	arg03, #127
2e5c8     04 18 CE F7 | 	test	arg04, #4 wz
2e5cc     10 00 90 AD |  if_e	jmp	#LR__4400
2e5d0     00 00 0E F2 | 	cmp	_var01, #0 wz
2e5d4     16 00 C6 A9 |  if_e	decod	_var01, #22
2e5d8     F7 00 26 F4 | 	bith	_var01, #247
2e5dc     B4 00 90 FD | 	jmp	#LR__4409
2e5e0                 | LR__4400
2e5e0     02 18 CE F7 | 	test	arg04, #2 wz
2e5e4     00 C0 3F 5F 
2e5e8     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2e5ec     00 14 06 56 |  if_ne	mov	arg02, #0
2e5f0     A0 00 90 5D |  if_ne	jmp	#LR__4408
2e5f4     08 18 CE F7 | 	test	arg04, #8 wz
2e5f8     00 00 06 56 |  if_ne	mov	_var01, #0
2e5fc     94 00 90 5D |  if_ne	jmp	#LR__4407
2e600     FF 16 56 F2 | 	cmps	arg03, #255 wc
2e604     00 C0 3F 3F 
2e608     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2e60c     00 14 06 36 |  if_ae	mov	arg02, #0
2e610     80 00 90 3D |  if_ae	jmp	#LR__4406
2e614     01 16 56 F2 | 	cmps	arg03, #1 wc
2e618     6C 00 90 3D |  if_ae	jmp	#LR__4404
2e61c     01 14 46 F0 | 	shr	arg02, #1
2e620     00 03 02 F6 | 	mov	_var02, _var01
2e624     01 02 06 F5 | 	and	_var02, #1
2e628     1F 02 66 F0 | 	shl	_var02, #31
2e62c     01 15 42 F5 | 	or	arg02, _var02
2e630     01 00 46 F0 | 	shr	_var01, #1
2e634     97 1E 48 FB | 	callpa	#(@LR__4402-@LR__4401)>>2,fcache_load_ptr_
2e638                 | LR__4401
2e638     00 16 56 F2 | 	cmps	arg03, #0 wc
2e63c     34 00 90 3D |  if_ae	jmp	#LR__4403
2e640     00 00 0E F2 | 	cmp	_var01, #0 wz
2e644     2C 00 90 AD |  if_e	jmp	#LR__4403
2e648     0A 13 02 F6 | 	mov	arg01, arg02
2e64c     01 12 06 F5 | 	and	arg01, #1
2e650     01 16 06 F1 | 	add	arg03, #1
2e654     01 14 46 F0 | 	shr	arg02, #1
2e658     00 03 02 F6 | 	mov	_var02, _var01
2e65c     01 02 06 F5 | 	and	_var02, #1
2e660     1F 02 66 F0 | 	shl	_var02, #31
2e664     01 15 42 F5 | 	or	arg02, _var02
2e668     09 15 42 F5 | 	or	arg02, arg01
2e66c     01 00 46 F0 | 	shr	_var01, #1
2e670     C4 FF 9F FD | 	jmp	#LR__4401
2e674                 | LR__4402
2e674                 | LR__4403
2e674     00 16 56 F2 | 	cmps	arg03, #0 wc
2e678     18 00 90 3D |  if_ae	jmp	#LR__4405
2e67c     00 14 0E F2 | 	cmp	arg02, #0 wz
2e680     6F 14 62 FD | 	wrnz	arg02
2e684     0C 00 90 FD | 	jmp	#LR__4405
2e688                 | LR__4404
2e688     17 01 06 F4 | 	bitl	_var01, #279
2e68c     17 16 66 F0 | 	shl	arg03, #23
2e690     0B 01 42 F5 | 	or	_var01, arg03
2e694                 | LR__4405
2e694                 | LR__4406
2e694                 | LR__4407
2e694                 | LR__4408
2e694                 | LR__4409
2e694     01 00 CE F7 | 	test	_var01, #1 wz
2e698     01 14 46 55 |  if_ne	or	arg02, #1
2e69c     0A 17 02 F6 | 	mov	arg03, arg02
2e6a0     00 02 06 F6 | 	mov	_var02, #0
2e6a4     FF FF 3F FF 
2e6a8     FF 15 06 F1 | 	add	arg02, ##2147483647
2e6ac     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2e6b0     01 02 06 C6 |  if_b	mov	_var02, #1
2e6b4     01 01 02 F1 | 	add	_var01, _var02
2e6b8     01 18 CE F7 | 	test	arg04, #1 wz
2e6bc     1F 00 26 54 |  if_ne	bith	_var01, #31
2e6c0     00 FB 01 F6 | 	mov	result1, _var01
2e6c4                 | __system__pack_0701_ret
2e6c4     2D 00 64 FD | 	ret
2e6c8                 | 
2e6c8                 | __system___rxtxioctl_0791
2e6c8     00 15 0E F2 | 	cmp	arg02, #256 wz
2e6cc     0C 00 90 AD |  if_e	jmp	#LR__4410
2e6d0     01 15 0E F2 | 	cmp	arg02, #257 wz
2e6d4     1C 00 90 AD |  if_e	jmp	#LR__4411
2e6d8     30 00 90 FD | 	jmp	#LR__4412
2e6dc                 | LR__4410
2e6dc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2e6e0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2e6e4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2e6e8     0B FB 61 FC | 	wrlong	result1, arg03
2e6ec     00 FA 05 F6 | 	mov	result1, #0
2e6f0     28 00 90 FD | 	jmp	#LR__4413
2e6f4                 | LR__4411
2e6f4     0B 13 02 FB | 	rdlong	arg01, arg03
2e6f8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2e6fc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2e700     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2e704     00 FA 05 F6 | 	mov	result1, #0
2e708     10 00 90 FD | 	jmp	#LR__4413
2e70c                 | LR__4412
2e70c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e710     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2e714     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e718     01 FA 65 F6 | 	neg	result1, #1
2e71c                 | LR__4413
2e71c                 | __system___rxtxioctl_0791_ret
2e71c     2D 00 64 FD | 	ret
2e720                 | 
2e720                 | __system____dummy_flush_0792
2e720     00 FA 05 F6 | 	mov	result1, #0
2e724                 | __system____dummy_flush_0792_ret
2e724     2D 00 64 FD | 	ret
2e728                 | 
2e728                 | __system___vfswrite
2e728     09 4A 05 F6 | 	mov	COUNT_, #9
2e72c     A8 00 A0 FD | 	call	#pushregs_
2e730     09 27 02 F6 | 	mov	local01, arg01
2e734     0A 29 02 F6 | 	mov	local02, arg02
2e738     0B 2B 02 F6 | 	mov	local03, arg03
2e73c     14 2D 02 F6 | 	mov	local04, local02
2e740     08 26 06 F1 | 	add	local01, #8
2e744     13 13 02 FB | 	rdlong	arg01, local01
2e748     08 26 86 F1 | 	sub	local01, #8
2e74c     02 12 CE F7 | 	test	arg01, #2 wz
2e750     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e754     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e758     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e75c     01 FA 65 A6 |  if_e	neg	result1, #1
2e760     80 01 90 AD |  if_e	jmp	#LR__4426
2e764     08 26 06 F1 | 	add	local01, #8
2e768     13 FB 01 FB | 	rdlong	result1, local01
2e76c     08 26 86 F1 | 	sub	local01, #8
2e770     40 FA CD F7 | 	test	result1, #64 wz
2e774     68 00 90 AD |  if_e	jmp	#LR__4421
2e778     08 26 06 F1 | 	add	local01, #8
2e77c     13 15 02 FB | 	rdlong	arg02, local01
2e780     08 26 86 F1 | 	sub	local01, #8
2e784     80 14 CE F7 | 	test	arg02, #128 wz
2e788     54 00 90 AD |  if_e	jmp	#LR__4420
2e78c     30 26 06 F1 | 	add	local01, #48
2e790     13 2F 02 FB | 	rdlong	local05, local01
2e794     17 31 02 F6 | 	mov	local06, local05
2e798     30 26 86 F1 | 	sub	local01, #48
2e79c     13 30 46 F7 | 	zerox	local06, #19
2e7a0     14 2E 46 F0 | 	shr	local05, #20
2e7a4     02 2E 66 F0 | 	shl	local05, #2
2e7a8     ED 2E 02 F1 | 	add	local05, __methods__
2e7ac     17 2F 02 FB | 	rdlong	local05, local05
2e7b0     13 13 02 F6 | 	mov	arg01, local01
2e7b4     00 14 06 F6 | 	mov	arg02, #0
2e7b8     02 16 06 F6 | 	mov	arg03, #2
2e7bc     F2 32 02 F6 | 	mov	local07, objptr
2e7c0     18 E5 01 F6 | 	mov	objptr, local06
2e7c4     2D 2E 62 FD | 	call	local05
2e7c8     19 E5 01 F6 | 	mov	objptr, local07
2e7cc     08 26 06 F1 | 	add	local01, #8
2e7d0     13 33 02 FB | 	rdlong	local07, local01
2e7d4     80 32 26 F5 | 	andn	local07, #128
2e7d8     13 33 62 FC | 	wrlong	local07, local01
2e7dc     08 26 86 F1 | 	sub	local01, #8
2e7e0                 | LR__4420
2e7e0                 | LR__4421
2e7e0     18 26 06 F1 | 	add	local01, #24
2e7e4     13 33 0A FB | 	rdlong	local07, local01 wz
2e7e8     18 26 86 F1 | 	sub	local01, #24
2e7ec     80 00 90 AD |  if_e	jmp	#LR__4423
2e7f0     18 26 06 F1 | 	add	local01, #24
2e7f4     13 2F 02 FB | 	rdlong	local05, local01
2e7f8     17 31 02 F6 | 	mov	local06, local05
2e7fc     18 26 86 F1 | 	sub	local01, #24
2e800     13 30 46 F7 | 	zerox	local06, #19
2e804     14 2E 46 F0 | 	shr	local05, #20
2e808     02 2E 66 F0 | 	shl	local05, #2
2e80c     ED 2E 02 F1 | 	add	local05, __methods__
2e810     17 2F 02 FB | 	rdlong	local05, local05
2e814     14 15 02 F6 | 	mov	arg02, local02
2e818     15 17 02 F6 | 	mov	arg03, local03
2e81c     13 13 02 F6 | 	mov	arg01, local01
2e820     F2 32 02 F6 | 	mov	local07, objptr
2e824     18 E5 01 F6 | 	mov	objptr, local06
2e828     2D 2E 62 FD | 	call	local05
2e82c     19 E5 01 F6 | 	mov	objptr, local07
2e830     FD 34 02 F6 | 	mov	local08, result1
2e834     00 34 56 F2 | 	cmps	local08, #0 wc
2e838     2C 00 90 3D |  if_ae	jmp	#LR__4422
2e83c     08 26 06 F1 | 	add	local01, #8
2e840     13 33 02 FB | 	rdlong	local07, local01
2e844     20 32 46 F5 | 	or	local07, #32
2e848     13 33 62 FC | 	wrlong	local07, local01
2e84c     00 34 4E F2 | 	cmps	local08, #0 wz
2e850     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e854     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2e858     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e85c     01 FA 65 56 |  if_ne	neg	result1, #1
2e860     00 FA 05 A6 |  if_e	mov	result1, #0
2e864     7C 00 90 FD | 	jmp	#LR__4426
2e868                 | LR__4422
2e868     1A FB 01 F6 | 	mov	result1, local08
2e86c     74 00 90 FD | 	jmp	#LR__4426
2e870                 | LR__4423
2e870     1C 26 06 F1 | 	add	local01, #28
2e874     13 37 0A FB | 	rdlong	local09, local01 wz
2e878     1C 26 86 F1 | 	sub	local01, #28
2e87c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e880     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e884     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e888     01 FA 65 A6 |  if_e	neg	result1, #1
2e88c     54 00 90 AD |  if_e	jmp	#LR__4426
2e890     00 34 06 F6 | 	mov	local08, #0
2e894                 | LR__4424
2e894     01 2A 16 F2 | 	cmp	local03, #1 wc
2e898     44 00 90 CD |  if_b	jmp	#LR__4425
2e89c     1B 31 02 F6 | 	mov	local06, local09
2e8a0     1B 2F 02 F6 | 	mov	local05, local09
2e8a4     13 30 46 F7 | 	zerox	local06, #19
2e8a8     14 2E 46 F0 | 	shr	local05, #20
2e8ac     02 2E 66 F0 | 	shl	local05, #2
2e8b0     ED 2E 02 F1 | 	add	local05, __methods__
2e8b4     17 2F 02 FB | 	rdlong	local05, local05
2e8b8     16 13 C2 FA | 	rdbyte	arg01, local04
2e8bc     13 15 02 F6 | 	mov	arg02, local01
2e8c0     F2 32 02 F6 | 	mov	local07, objptr
2e8c4     18 E5 01 F6 | 	mov	objptr, local06
2e8c8     01 2C 06 F1 | 	add	local04, #1
2e8cc     2D 2E 62 FD | 	call	local05
2e8d0     19 E5 01 F6 | 	mov	objptr, local07
2e8d4     FD 34 02 F1 | 	add	local08, result1
2e8d8     01 2A 86 F1 | 	sub	local03, #1
2e8dc     B4 FF 9F FD | 	jmp	#LR__4424
2e8e0                 | LR__4425
2e8e0     1A FB 01 F6 | 	mov	result1, local08
2e8e4                 | LR__4426
2e8e4     A7 F0 03 F6 | 	mov	ptra, fp
2e8e8     B2 00 A0 FD | 	call	#popregs_
2e8ec                 | __system___vfswrite_ret
2e8ec     2D 00 64 FD | 	ret
2e8f0                 | 
2e8f0                 | __system___vfsread
2e8f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e8f4     A8 00 A0 FD | 	call	#pushregs_
2e8f8     28 F0 07 F1 | 	add	ptra, #40
2e8fc     04 4E 05 F1 | 	add	fp, #4
2e900     A7 12 62 FC | 	wrlong	arg01, fp
2e904     04 4E 05 F1 | 	add	fp, #4
2e908     A7 14 62 FC | 	wrlong	arg02, fp
2e90c     04 4E 05 F1 | 	add	fp, #4
2e910     A7 16 62 FC | 	wrlong	arg03, fp
2e914     04 4E 85 F1 | 	sub	fp, #4
2e918     A7 FA 01 FB | 	rdlong	result1, fp
2e91c     14 4E 05 F1 | 	add	fp, #20
2e920     A7 FA 61 FC | 	wrlong	result1, fp
2e924     04 4E 05 F1 | 	add	fp, #4
2e928     A7 00 68 FC | 	wrlong	#0, fp
2e92c     1C 4E 85 F1 | 	sub	fp, #28
2e930     A7 12 02 FB | 	rdlong	arg01, fp
2e934     04 4E 85 F1 | 	sub	fp, #4
2e938     08 12 06 F1 | 	add	arg01, #8
2e93c     09 FB 01 FB | 	rdlong	result1, arg01
2e940     01 FA CD F7 | 	test	result1, #1 wz
2e944     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e948     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e94c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e950     01 FA 65 A6 |  if_e	neg	result1, #1
2e954     74 02 90 AD |  if_e	jmp	#LR__4436
2e958     04 4E 05 F1 | 	add	fp, #4
2e95c     A7 12 02 FB | 	rdlong	arg01, fp
2e960     04 4E 85 F1 | 	sub	fp, #4
2e964     14 12 06 F1 | 	add	arg01, #20
2e968     09 FB 09 FB | 	rdlong	result1, arg01 wz
2e96c     B8 00 90 AD |  if_e	jmp	#LR__4431
2e970     04 4E 05 F1 | 	add	fp, #4
2e974     A7 12 02 FB | 	rdlong	arg01, fp
2e978     09 17 02 F6 | 	mov	arg03, arg01
2e97c     14 16 06 F1 | 	add	arg03, #20
2e980     0B 27 02 FB | 	rdlong	local01, arg03
2e984     13 29 02 F6 | 	mov	local02, local01
2e988     13 26 46 F7 | 	zerox	local01, #19
2e98c     14 28 46 F0 | 	shr	local02, #20
2e990     02 28 66 F0 | 	shl	local02, #2
2e994     ED 28 02 F1 | 	add	local02, __methods__
2e998     14 29 02 FB | 	rdlong	local02, local02
2e99c     04 4E 05 F1 | 	add	fp, #4
2e9a0     A7 14 02 FB | 	rdlong	arg02, fp
2e9a4     04 4E 05 F1 | 	add	fp, #4
2e9a8     A7 16 02 FB | 	rdlong	arg03, fp
2e9ac     0C 4E 85 F1 | 	sub	fp, #12
2e9b0     F2 2A 02 F6 | 	mov	local03, objptr
2e9b4     13 E5 01 F6 | 	mov	objptr, local01
2e9b8     2D 28 62 FD | 	call	local02
2e9bc     15 E5 01 F6 | 	mov	objptr, local03
2e9c0     10 4E 05 F1 | 	add	fp, #16
2e9c4     A7 FA 61 FC | 	wrlong	result1, fp
2e9c8     10 4E 85 F1 | 	sub	fp, #16
2e9cc     00 FA 55 F2 | 	cmps	result1, #0 wc
2e9d0     44 00 90 3D |  if_ae	jmp	#LR__4430
2e9d4     04 4E 05 F1 | 	add	fp, #4
2e9d8     A7 2A 02 FB | 	rdlong	local03, fp
2e9dc     15 27 02 F6 | 	mov	local01, local03
2e9e0     08 2A 06 F1 | 	add	local03, #8
2e9e4     15 29 02 FB | 	rdlong	local02, local03
2e9e8     20 28 46 F5 | 	or	local02, #32
2e9ec     08 26 06 F1 | 	add	local01, #8
2e9f0     13 29 62 FC | 	wrlong	local02, local01
2e9f4     0C 4E 05 F1 | 	add	fp, #12
2e9f8     A7 12 0A FB | 	rdlong	arg01, fp wz
2e9fc     10 4E 85 F1 | 	sub	fp, #16
2ea00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ea04     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ea08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ea0c     01 FA 65 56 |  if_ne	neg	result1, #1
2ea10     00 FA 05 A6 |  if_e	mov	result1, #0
2ea14     B4 01 90 FD | 	jmp	#LR__4436
2ea18                 | LR__4430
2ea18     10 4E 05 F1 | 	add	fp, #16
2ea1c     A7 FA 01 FB | 	rdlong	result1, fp
2ea20     10 4E 85 F1 | 	sub	fp, #16
2ea24     A4 01 90 FD | 	jmp	#LR__4436
2ea28                 | LR__4431
2ea28     04 4E 05 F1 | 	add	fp, #4
2ea2c     A7 12 02 FB | 	rdlong	arg01, fp
2ea30     20 12 06 F1 | 	add	arg01, #32
2ea34     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ea38     14 4E 05 F1 | 	add	fp, #20
2ea3c     A7 12 62 FC | 	wrlong	arg01, fp
2ea40     18 4E 85 F1 | 	sub	fp, #24
2ea44     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ea48     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2ea4c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ea50     01 FA 65 A6 |  if_e	neg	result1, #1
2ea54     74 01 90 AD |  if_e	jmp	#LR__4436
2ea58     04 4E 05 F1 | 	add	fp, #4
2ea5c     A7 2A 02 FB | 	rdlong	local03, fp
2ea60     04 4E 85 F1 | 	sub	fp, #4
2ea64     28 2A 06 F1 | 	add	local03, #40
2ea68     15 29 0A FB | 	rdlong	local02, local03 wz
2ea6c     7C 00 90 AD |  if_e	jmp	#LR__4433
2ea70     04 4E 05 F1 | 	add	fp, #4
2ea74     A7 12 02 FB | 	rdlong	arg01, fp
2ea78     09 2B 02 F6 | 	mov	local03, arg01
2ea7c     28 2A 06 F1 | 	add	local03, #40
2ea80     15 27 02 FB | 	rdlong	local01, local03
2ea84     13 29 02 F6 | 	mov	local02, local01
2ea88     13 26 46 F7 | 	zerox	local01, #19
2ea8c     14 28 46 F0 | 	shr	local02, #20
2ea90     02 28 66 F0 | 	shl	local02, #2
2ea94     ED 28 02 F1 | 	add	local02, __methods__
2ea98     14 29 02 FB | 	rdlong	local02, local02
2ea9c     20 4E 05 F1 | 	add	fp, #32
2eaa0     A7 16 02 F6 | 	mov	arg03, fp
2eaa4     24 4E 85 F1 | 	sub	fp, #36
2eaa8     00 15 06 F6 | 	mov	arg02, #256
2eaac     F2 2A 02 F6 | 	mov	local03, objptr
2eab0     13 E5 01 F6 | 	mov	objptr, local01
2eab4     2D 28 62 FD | 	call	local02
2eab8     15 E5 01 F6 | 	mov	objptr, local03
2eabc     10 4E 05 F1 | 	add	fp, #16
2eac0     A7 FA 61 FC | 	wrlong	result1, fp
2eac4     00 FA 4D F2 | 	cmps	result1, #0 wz
2eac8     10 4E 85 F1 | 	sub	fp, #16
2eacc     1C 00 90 5D |  if_ne	jmp	#LR__4432
2ead0     24 4E 05 F1 | 	add	fp, #36
2ead4     A7 28 02 FB | 	rdlong	local02, fp
2ead8     24 4E 85 F1 | 	sub	fp, #36
2eadc     02 28 CE F7 | 	test	local02, #2 wz
2eae0     20 4E 05 51 |  if_ne	add	fp, #32
2eae4     A7 02 68 5C |  if_ne	wrlong	#1, fp
2eae8     20 4E 85 51 |  if_ne	sub	fp, #32
2eaec                 | LR__4432
2eaec                 | LR__4433
2eaec     10 4E 05 F1 | 	add	fp, #16
2eaf0     A7 00 68 FC | 	wrlong	#0, fp
2eaf4     10 4E 85 F1 | 	sub	fp, #16
2eaf8                 | LR__4434
2eaf8     0C 4E 05 F1 | 	add	fp, #12
2eafc     A7 2A 02 FB | 	rdlong	local03, fp
2eb00     0C 4E 85 F1 | 	sub	fp, #12
2eb04     01 2A 16 F2 | 	cmp	local03, #1 wc
2eb08     B4 00 90 CD |  if_b	jmp	#LR__4435
2eb0c     18 4E 05 F1 | 	add	fp, #24
2eb10     A7 28 02 FB | 	rdlong	local02, fp
2eb14     14 2B 02 F6 | 	mov	local03, local02
2eb18     13 2A 46 F7 | 	zerox	local03, #19
2eb1c     14 28 46 F0 | 	shr	local02, #20
2eb20     02 28 66 F0 | 	shl	local02, #2
2eb24     ED 28 02 F1 | 	add	local02, __methods__
2eb28     14 29 02 FB | 	rdlong	local02, local02
2eb2c     14 4E 85 F1 | 	sub	fp, #20
2eb30     A7 12 02 FB | 	rdlong	arg01, fp
2eb34     04 4E 85 F1 | 	sub	fp, #4
2eb38     F2 26 02 F6 | 	mov	local01, objptr
2eb3c     15 E5 01 F6 | 	mov	objptr, local03
2eb40     2D 28 62 FD | 	call	local02
2eb44     13 E5 01 F6 | 	mov	objptr, local01
2eb48     14 4E 05 F1 | 	add	fp, #20
2eb4c     A7 FA 61 FC | 	wrlong	result1, fp
2eb50     14 4E 85 F1 | 	sub	fp, #20
2eb54     00 FA 55 F2 | 	cmps	result1, #0 wc
2eb58     64 00 90 CD |  if_b	jmp	#LR__4435
2eb5c     1C 4E 05 F1 | 	add	fp, #28
2eb60     A7 2A 02 FB | 	rdlong	local03, fp
2eb64     15 29 02 F6 | 	mov	local02, local03
2eb68     01 28 06 F1 | 	add	local02, #1
2eb6c     A7 28 62 FC | 	wrlong	local02, fp
2eb70     08 4E 85 F1 | 	sub	fp, #8
2eb74     A7 28 02 FB | 	rdlong	local02, fp
2eb78     15 29 42 FC | 	wrbyte	local02, local03
2eb7c     04 4E 85 F1 | 	sub	fp, #4
2eb80     A7 2A 02 FB | 	rdlong	local03, fp
2eb84     01 2A 06 F1 | 	add	local03, #1
2eb88     A7 2A 62 FC | 	wrlong	local03, fp
2eb8c     04 4E 85 F1 | 	sub	fp, #4
2eb90     A7 2A 02 FB | 	rdlong	local03, fp
2eb94     01 2A 86 F1 | 	sub	local03, #1
2eb98     A7 2A 62 FC | 	wrlong	local03, fp
2eb9c     14 4E 05 F1 | 	add	fp, #20
2eba0     A7 2A 0A FB | 	rdlong	local03, fp wz
2eba4     20 4E 85 F1 | 	sub	fp, #32
2eba8     4C FF 9F AD |  if_e	jmp	#LR__4434
2ebac     14 4E 05 F1 | 	add	fp, #20
2ebb0     A7 28 02 FB | 	rdlong	local02, fp
2ebb4     14 4E 85 F1 | 	sub	fp, #20
2ebb8     0A 28 0E F2 | 	cmp	local02, #10 wz
2ebbc     38 FF 9F 5D |  if_ne	jmp	#LR__4434
2ebc0                 | LR__4435
2ebc0     10 4E 05 F1 | 	add	fp, #16
2ebc4     A7 FA 01 FB | 	rdlong	result1, fp
2ebc8     10 4E 85 F1 | 	sub	fp, #16
2ebcc                 | LR__4436
2ebcc     A7 F0 03 F6 | 	mov	ptra, fp
2ebd0     B2 00 A0 FD | 	call	#popregs_
2ebd4                 | __system___vfsread_ret
2ebd4     2D 00 64 FD | 	ret
2ebd8                 | 
2ebd8                 | __system____default_filbuf
2ebd8     04 4A 05 F6 | 	mov	COUNT_, #4
2ebdc     A8 00 A0 FD | 	call	#pushregs_
2ebe0     09 27 02 F6 | 	mov	local01, arg01
2ebe4     13 29 02 FB | 	rdlong	local02, local01
2ebe8     0C 28 06 F1 | 	add	local02, #12
2ebec     14 FB 09 FB | 	rdlong	result1, local02 wz
2ebf0     0C 28 86 F1 | 	sub	local02, #12
2ebf4     20 00 90 5D |  if_ne	jmp	#LR__4440
2ebf8     14 28 06 F1 | 	add	local02, #20
2ebfc     14 FB 01 F6 | 	mov	result1, local02
2ec00     04 28 86 F1 | 	sub	local02, #4
2ec04     14 FB 61 FC | 	wrlong	result1, local02
2ec08     04 28 86 F1 | 	sub	local02, #4
2ec0c     02 00 80 FF 
2ec10     14 01 68 FC | 	wrlong	##1024, local02
2ec14     0C 28 86 F1 | 	sub	local02, #12
2ec18                 | LR__4440
2ec18     14 26 06 F1 | 	add	local01, #20
2ec1c     13 2B 02 FB | 	rdlong	local03, local01
2ec20     15 2D 02 F6 | 	mov	local04, local03
2ec24     14 26 86 F1 | 	sub	local01, #20
2ec28     13 2C 46 F7 | 	zerox	local04, #19
2ec2c     14 2A 46 F0 | 	shr	local03, #20
2ec30     02 2A 66 F0 | 	shl	local03, #2
2ec34     ED 2A 02 F1 | 	add	local03, __methods__
2ec38     15 2B 02 FB | 	rdlong	local03, local03
2ec3c     10 28 06 F1 | 	add	local02, #16
2ec40     14 15 02 FB | 	rdlong	arg02, local02
2ec44     04 28 86 F1 | 	sub	local02, #4
2ec48     14 17 02 FB | 	rdlong	arg03, local02
2ec4c     0C 28 86 F1 | 	sub	local02, #12
2ec50     13 13 02 F6 | 	mov	arg01, local01
2ec54     F2 26 02 F6 | 	mov	local01, objptr
2ec58     16 E5 01 F6 | 	mov	objptr, local04
2ec5c     2D 2A 62 FD | 	call	local03
2ec60     13 E5 01 F6 | 	mov	objptr, local01
2ec64     FD 2C 02 F6 | 	mov	local04, result1
2ec68     00 2C 56 F2 | 	cmps	local04, #0 wc
2ec6c     01 FA 65 C6 |  if_b	neg	result1, #1
2ec70     28 00 90 CD |  if_b	jmp	#LR__4441
2ec74     14 2D 62 FC | 	wrlong	local04, local02
2ec78     10 28 06 F1 | 	add	local02, #16
2ec7c     14 2B 02 FB | 	rdlong	local03, local02
2ec80     0C 28 86 F1 | 	sub	local02, #12
2ec84     14 2B 62 FC | 	wrlong	local03, local02
2ec88     04 28 06 F1 | 	add	local02, #4
2ec8c     14 2B 02 FB | 	rdlong	local03, local02
2ec90     01 2A 46 F5 | 	or	local03, #1
2ec94     14 2B 62 FC | 	wrlong	local03, local02
2ec98     16 FB 01 F6 | 	mov	result1, local04
2ec9c                 | LR__4441
2ec9c     A7 F0 03 F6 | 	mov	ptra, fp
2eca0     B2 00 A0 FD | 	call	#popregs_
2eca4                 | __system____default_filbuf_ret
2eca4     2D 00 64 FD | 	ret
2eca8                 | 
2eca8                 | __system__getlower_1181
2eca8     41 12 56 F2 | 	cmps	arg01, #65 wc
2ecac     10 00 90 CD |  if_b	jmp	#LR__4450
2ecb0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2ecb4     09 FB 01 C6 |  if_b	mov	result1, arg01
2ecb8     20 FA 05 C1 |  if_b	add	result1, #32
2ecbc     04 00 90 CD |  if_b	jmp	#__system__getlower_1181_ret
2ecc0                 | LR__4450
2ecc0     09 FB 01 F6 | 	mov	result1, arg01
2ecc4                 | __system__getlower_1181_ret
2ecc4     2D 00 64 FD | 	ret
2ecc8                 | 
2ecc8                 | __system___pat_match
2ecc8     08 4A 05 F6 | 	mov	COUNT_, #8
2eccc     A8 00 A0 FD | 	call	#pushregs_
2ecd0     09 27 02 F6 | 	mov	local01, arg01
2ecd4                 | LR__4460
2ecd4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2ecd8     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2ecdc     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2ece0     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2ece4     2C 00 90 AD |  if_e	jmp	#LR__4461
2ece8     0A 13 C2 FA | 	rdbyte	arg01, arg02
2ecec     B8 FF BF FD | 	call	#__system__getlower_1181
2ecf0     FD 2A 02 F6 | 	mov	local03, result1
2ecf4     13 13 C2 FA | 	rdbyte	arg01, local01
2ecf8     AC FF BF FD | 	call	#__system__getlower_1181
2ecfc     15 FB 09 F2 | 	cmp	result1, local03 wz
2ed00     00 FA 05 56 |  if_ne	mov	result1, #0
2ed04     00 01 90 5D |  if_ne	jmp	#LR__4470
2ed08     01 26 06 F1 | 	add	local01, #1
2ed0c     01 14 06 F1 | 	add	arg02, #1
2ed10     C0 FF 9F FD | 	jmp	#LR__4460
2ed14                 | LR__4461
2ed14     0A 2B C2 FA | 	rdbyte	local03, arg02
2ed18     2A 2A 0E F2 | 	cmp	local03, #42 wz
2ed1c     D8 00 90 5D |  if_ne	jmp	#LR__4469
2ed20     01 14 06 F1 | 	add	arg02, #1
2ed24     0A 29 C2 FA | 	rdbyte	local02, arg02
2ed28     01 14 86 F1 | 	sub	arg02, #1
2ed2c     2E 28 0E F2 | 	cmp	local02, #46 wz
2ed30     28 00 90 5D |  if_ne	jmp	#LR__4462
2ed34     02 14 06 F1 | 	add	arg02, #2
2ed38     0A 29 C2 FA | 	rdbyte	local02, arg02
2ed3c     02 14 86 F1 | 	sub	arg02, #2
2ed40     2A 28 0E F2 | 	cmp	local02, #42 wz
2ed44     03 14 06 A1 |  if_e	add	arg02, #3
2ed48     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2ed4c     03 14 86 A1 |  if_e	sub	arg02, #3
2ed50     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2ed54     01 FA 05 A6 |  if_e	mov	result1, #1
2ed58     AC 00 90 AD |  if_e	jmp	#LR__4470
2ed5c                 | LR__4462
2ed5c     01 14 06 F1 | 	add	arg02, #1
2ed60     00 30 06 F6 | 	mov	local06, #0
2ed64     97 0E 48 FB | 	callpa	#(@LR__4464-@LR__4463)>>2,fcache_load_ptr_
2ed68                 | LR__4463
2ed68     18 33 02 F6 | 	mov	local07, local06
2ed6c     0A 33 02 F1 | 	add	local07, arg02
2ed70     19 33 CA FA | 	rdbyte	local07, local07 wz
2ed74     18 2F 02 56 |  if_ne	mov	local05, local06
2ed78     01 2E 06 51 |  if_ne	add	local05, #1
2ed7c     17 31 02 56 |  if_ne	mov	local06, local05
2ed80     E4 FF 9F 5D |  if_ne	jmp	#LR__4463
2ed84                 | LR__4464
2ed84     00 34 06 F6 | 	mov	local08, #0
2ed88     97 0E 48 FB | 	callpa	#(@LR__4466-@LR__4465)>>2,fcache_load_ptr_
2ed8c                 | LR__4465
2ed8c     1A 33 02 F6 | 	mov	local07, local08
2ed90     13 33 02 F1 | 	add	local07, local01
2ed94     19 33 CA FA | 	rdbyte	local07, local07 wz
2ed98     1A 2F 02 56 |  if_ne	mov	local05, local08
2ed9c     01 2E 06 51 |  if_ne	add	local05, #1
2eda0     17 35 02 56 |  if_ne	mov	local08, local05
2eda4     E4 FF 9F 5D |  if_ne	jmp	#LR__4465
2eda8                 | LR__4466
2eda8     18 35 52 F2 | 	cmps	local08, local06 wc
2edac     00 FA 05 C6 |  if_b	mov	result1, #0
2edb0     54 00 90 CD |  if_b	jmp	#LR__4470
2edb4     1A 29 02 F6 | 	mov	local02, local08
2edb8     18 29 82 F1 | 	sub	local02, local06
2edbc     14 27 02 F1 | 	add	local01, local02
2edc0                 | LR__4467
2edc0     01 30 56 F2 | 	cmps	local06, #1 wc
2edc4     30 00 90 CD |  if_b	jmp	#LR__4468
2edc8     13 13 C2 FA | 	rdbyte	arg01, local01
2edcc     D8 FE BF FD | 	call	#__system__getlower_1181
2edd0     FD 34 02 F6 | 	mov	local08, result1
2edd4     0A 13 C2 FA | 	rdbyte	arg01, arg02
2edd8     CC FE BF FD | 	call	#__system__getlower_1181
2eddc     FD 34 0A F2 | 	cmp	local08, result1 wz
2ede0     00 FA 05 56 |  if_ne	mov	result1, #0
2ede4     20 00 90 5D |  if_ne	jmp	#LR__4470
2ede8     01 26 06 F1 | 	add	local01, #1
2edec     01 14 06 F1 | 	add	arg02, #1
2edf0     01 30 86 F1 | 	sub	local06, #1
2edf4     C8 FF 9F FD | 	jmp	#LR__4467
2edf8                 | LR__4468
2edf8                 | LR__4469
2edf8     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2edfc     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2ee00     01 FA 05 A6 |  if_e	mov	result1, #1
2ee04     00 FA 05 56 |  if_ne	mov	result1, #0
2ee08                 | LR__4470
2ee08     A7 F0 03 F6 | 	mov	ptra, fp
2ee0c     B2 00 A0 FD | 	call	#popregs_
2ee10                 | __system___pat_match_ret
2ee10     2D 00 64 FD | 	ret
2ee14                 | 
2ee14                 | _fatfs_cc_ff_uni2oem
2ee14     00 00 06 F6 | 	mov	_var01, #0
2ee18     80 12 16 F2 | 	cmp	arg01, #128 wc
2ee1c     09 01 02 C6 |  if_b	mov	_var01, arg01
2ee20     58 00 90 CD |  if_b	jmp	#LR__4484
2ee24     80 00 00 FF 
2ee28     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2ee2c     4C 00 90 3D |  if_ae	jmp	#LR__4483
2ee30     0A FB 31 F9 | 	getword	result1, arg02, #0
2ee34     01 00 00 FF 
2ee38     52 FB 0D F2 | 	cmp	result1, ##850 wz
2ee3c     3C 00 90 5D |  if_ne	jmp	#LR__4483
2ee40                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2ee40     00 00 06 F6 | 	mov	_var01, #0
2ee44     97 14 48 FB | 	callpa	#(@LR__4481-@LR__4480)>>2,fcache_load_ptr_
2ee48                 | LR__4480
2ee48     00 FB 31 F9 | 	getword	result1, _var01, #0
2ee4c     80 FA 15 F2 | 	cmp	result1, #128 wc
2ee50     1C 00 90 3D |  if_ae	jmp	#LR__4482
2ee54     00 FB 31 F9 | 	getword	result1, _var01, #0
2ee58     01 FA 65 F0 | 	shl	result1, #1
2ee5c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2ee60     FD FA E1 FA | 	rdword	result1, result1
2ee64     FD 12 0A F2 | 	cmp	arg01, result1 wz
2ee68     01 00 06 51 |  if_ne	add	_var01, #1
2ee6c     D8 FF 9F 5D |  if_ne	jmp	#LR__4480
2ee70                 | LR__4481
2ee70                 | LR__4482
2ee70     00 01 32 F9 | 	getword	_var01, _var01, #0
2ee74     80 00 06 F1 | 	add	_var01, #128
2ee78     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2ee7c                 | LR__4483
2ee7c                 | LR__4484
2ee7c                 | ' 			c = (c + 0x80) & 0xFF;
2ee7c                 | ' 		}
2ee7c                 | ' 	}
2ee7c                 | ' 
2ee7c                 | ' 	return c;
2ee7c     00 FB 01 F6 | 	mov	result1, _var01
2ee80                 | _fatfs_cc_ff_uni2oem_ret
2ee80     2D 00 64 FD | 	ret
2ee84                 | 
2ee84                 | _fatfs_cc_ff_oem2uni
2ee84     00 00 06 F6 | 	mov	_var01, #0
2ee88     09 FB 31 F9 | 	getword	result1, arg01, #0
2ee8c     80 FA 15 F2 | 	cmp	result1, #128 wc
2ee90     09 01 02 C6 |  if_b	mov	_var01, arg01
2ee94     2C 00 90 CD |  if_b	jmp	#LR__4491
2ee98     0A 15 32 F9 | 	getword	arg02, arg02, #0
2ee9c     01 00 00 FF 
2eea0     52 15 0E F2 | 	cmp	arg02, ##850 wz
2eea4     1C 00 90 5D |  if_ne	jmp	#LR__4490
2eea8     09 FB 31 F9 | 	getword	result1, arg01, #0
2eeac     00 FB 15 F2 | 	cmp	result1, #256 wc
2eeb0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2eeb4     80 12 86 C1 |  if_b	sub	arg01, #128
2eeb8     01 12 66 C0 |  if_b	shl	arg01, #1
2eebc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2eec0     09 01 E2 CA |  if_b	rdword	_var01, arg01
2eec4                 | LR__4490
2eec4                 | LR__4491
2eec4                 | ' 		}
2eec4                 | ' 	}
2eec4                 | ' 
2eec4                 | ' 	return c;
2eec4     00 FB 01 F6 | 	mov	result1, _var01
2eec8                 | _fatfs_cc_ff_oem2uni_ret
2eec8     2D 00 64 FD | 	ret
2eecc                 | 
2eecc                 | _fatfs_cc_ff_wtoupper
2eecc     09 01 02 F6 | 	mov	_var01, arg01
2eed0     80 00 00 FF 
2eed4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2eed8     60 01 90 3D |  if_ae	jmp	#LR__4513
2eedc     00 03 02 F6 | 	mov	_var02, _var01
2eee0     01 01 32 F9 | 	getword	_var01, _var02, #0
2eee4     08 00 00 FF 
2eee8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2eeec     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2eef0     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2eef4     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2eef8     01 00 00 3F 
2eefc     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2ef00     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2ef04     01 00 00 3F 
2ef08     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2ef0c     02 07 02 F6 | 	mov	_var04, _var03
2ef10                 | ' 		uc = (WORD)uni;
2ef10                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2ef10                 | ' 		for (;;) {
2ef10                 | LR__4500
2ef10     03 09 E2 FA | 	rdword	_var05, _var04
2ef14     04 05 02 F6 | 	mov	_var03, _var05
2ef18     0F 04 4E F7 | 	zerox	_var03, #15 wz
2ef1c     02 06 06 F1 | 	add	_var04, #2
2ef20     14 01 90 AD |  if_e	jmp	#LR__4512
2ef24     01 05 32 F9 | 	getword	_var03, _var02, #0
2ef28     04 01 32 F9 | 	getword	_var01, _var05, #0
2ef2c     00 05 12 F2 | 	cmp	_var03, _var01 wc
2ef30     04 01 90 CD |  if_b	jmp	#LR__4512
2ef34     03 0B E2 FA | 	rdword	_var06, _var04
2ef38     05 0D 32 F9 | 	getword	_var07, _var06, #0
2ef3c     08 0C 46 F0 | 	shr	_var07, #8
2ef40     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ef44     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2ef48     01 05 32 F9 | 	getword	_var03, _var02, #0
2ef4c     04 0F 32 F9 | 	getword	_var08, _var05, #0
2ef50     05 01 32 F9 | 	getword	_var01, _var06, #0
2ef54     00 0F 02 F1 | 	add	_var08, _var01
2ef58     07 05 52 F2 | 	cmps	_var03, _var08 wc
2ef5c     02 06 06 F1 | 	add	_var04, #2
2ef60     C4 00 90 3D |  if_ae	jmp	#LR__4511
2ef64                 | ' 				switch (cmd) {
2ef64     06 11 32 F9 | 	getword	_var09, _var07, #0
2ef68     09 10 26 F3 | 	fle	_var09, #9
2ef6c     30 10 62 FD | 	jmprel	_var09
2ef70                 | LR__4501
2ef70     24 00 90 FD | 	jmp	#LR__4502
2ef74     3C 00 90 FD | 	jmp	#LR__4503
2ef78     54 00 90 FD | 	jmp	#LR__4504
2ef7c     5C 00 90 FD | 	jmp	#LR__4505
2ef80     64 00 90 FD | 	jmp	#LR__4506
2ef84     6C 00 90 FD | 	jmp	#LR__4507
2ef88     74 00 90 FD | 	jmp	#LR__4508
2ef8c     7C 00 90 FD | 	jmp	#LR__4509
2ef90     84 00 90 FD | 	jmp	#LR__4510
2ef94     A0 00 90 FD | 	jmp	#LR__4512
2ef98                 | LR__4502
2ef98     01 03 32 F9 | 	getword	_var02, _var02, #0
2ef9c     04 09 32 F9 | 	getword	_var05, _var05, #0
2efa0     04 03 82 F1 | 	sub	_var02, _var05
2efa4     01 02 66 F0 | 	shl	_var02, #1
2efa8     03 03 02 F1 | 	add	_var02, _var04
2efac     01 03 E2 FA | 	rdword	_var02, _var02
2efb0     84 00 90 FD | 	jmp	#LR__4512
2efb4                 | LR__4503
2efb4     01 05 32 F9 | 	getword	_var03, _var02, #0
2efb8     01 03 32 F9 | 	getword	_var02, _var02, #0
2efbc     04 09 32 F9 | 	getword	_var05, _var05, #0
2efc0     04 03 82 F1 | 	sub	_var02, _var05
2efc4     01 02 06 F5 | 	and	_var02, #1
2efc8     02 03 C2 F2 | 	subr	_var02, _var03
2efcc     68 00 90 FD | 	jmp	#LR__4512
2efd0                 | LR__4504
2efd0     01 03 32 F9 | 	getword	_var02, _var02, #0
2efd4     10 02 86 F1 | 	sub	_var02, #16
2efd8     5C 00 90 FD | 	jmp	#LR__4512
2efdc                 | LR__4505
2efdc     01 03 32 F9 | 	getword	_var02, _var02, #0
2efe0     20 02 86 F1 | 	sub	_var02, #32
2efe4     50 00 90 FD | 	jmp	#LR__4512
2efe8                 | LR__4506
2efe8     01 03 32 F9 | 	getword	_var02, _var02, #0
2efec     30 02 86 F1 | 	sub	_var02, #48
2eff0     44 00 90 FD | 	jmp	#LR__4512
2eff4                 | LR__4507
2eff4     01 03 32 F9 | 	getword	_var02, _var02, #0
2eff8     1A 02 86 F1 | 	sub	_var02, #26
2effc     38 00 90 FD | 	jmp	#LR__4512
2f000                 | LR__4508
2f000     01 03 32 F9 | 	getword	_var02, _var02, #0
2f004     08 02 06 F1 | 	add	_var02, #8
2f008     2C 00 90 FD | 	jmp	#LR__4512
2f00c                 | LR__4509
2f00c     01 03 32 F9 | 	getword	_var02, _var02, #0
2f010     50 02 86 F1 | 	sub	_var02, #80
2f014     20 00 90 FD | 	jmp	#LR__4512
2f018                 | LR__4510
2f018     01 03 32 F9 | 	getword	_var02, _var02, #0
2f01c     0E 00 00 FF 
2f020     60 02 86 F1 | 	sub	_var02, ##7264
2f024                 | ' 				}
2f024                 | ' 				break;
2f024     10 00 90 FD | 	jmp	#LR__4512
2f028                 | LR__4511
2f028     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2f02c     02 0A 06 AA |  if_e	mul	_var06, #2
2f030     05 07 02 A1 |  if_e	add	_var04, _var06
2f034     D8 FE 9F FD | 	jmp	#LR__4500
2f038                 | LR__4512
2f038     01 01 32 F9 | 	getword	_var01, _var02, #0
2f03c                 | LR__4513
2f03c                 | ' 		}
2f03c                 | ' 		uni = uc;
2f03c                 | ' 	}
2f03c                 | ' 
2f03c                 | ' 	return uni;
2f03c     00 FB 01 F6 | 	mov	result1, _var01
2f040                 | _fatfs_cc_ff_wtoupper_ret
2f040     2D 00 64 FD | 	ret
2f044                 | 
2f044                 | _fatfs_cc_strncpy
2f044     09 01 02 F6 | 	mov	_var01, arg01
2f048     97 12 48 FB | 	callpa	#(@LR__4521-@LR__4520)>>2,fcache_load_ptr_
2f04c                 | ' 
2f04c                 | ' 	dscan = dst;
2f04c                 | ' 	sscan = src;
2f04c                 | ' 	count = n;
2f04c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2f04c                 | LR__4520
2f04c     01 16 86 F1 | 	sub	arg03, #1
2f050     00 16 56 F2 | 	cmps	arg03, #0 wc
2f054     18 00 90 CD |  if_b	jmp	#LR__4522
2f058     0A FB C1 FA | 	rdbyte	result1, arg02
2f05c     00 FB 41 FC | 	wrbyte	result1, _var01
2f060     01 14 06 F1 | 	add	arg02, #1
2f064     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2f068                 | ' 		continue;
2f068     01 00 06 F1 | 	add	_var01, #1
2f06c     DC FF 9F 5D |  if_ne	jmp	#LR__4520
2f070                 | LR__4521
2f070                 | LR__4522
2f070     97 0C 48 FB | 	callpa	#(@LR__4524-@LR__4523)>>2,fcache_load_ptr_
2f074                 | ' 	while (--count >= 0)
2f074                 | LR__4523
2f074     01 16 86 F1 | 	sub	arg03, #1
2f078     00 16 56 F2 | 	cmps	arg03, #0 wc
2f07c     00 03 02 36 |  if_ae	mov	_var02, _var01
2f080     01 00 06 31 |  if_ae	add	_var01, #1
2f084     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2f088     E8 FF 9F 3D |  if_ae	jmp	#LR__4523
2f08c                 | LR__4524
2f08c                 | ' 		*dscan++ = '\0';
2f08c                 | ' 	return(dst);
2f08c     09 FB 01 F6 | 	mov	result1, arg01
2f090                 | _fatfs_cc_strncpy_ret
2f090     2D 00 64 FD | 	ret
2f094                 | 
2f094                 | _fatfs_cc_memcmp
2f094                 | ' 	for (n = size; n > 0; n--)
2f094     00 16 0E F2 | 	cmp	arg03, #0 wz
2f098     28 00 90 AD |  if_e	jmp	#LR__4531
2f09c                 | LR__4530
2f09c     09 01 C2 FA | 	rdbyte	_var01, arg01
2f0a0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f0a4     01 01 0A F2 | 	cmp	_var01, _var02 wz
2f0a8     01 12 06 A1 |  if_e	add	arg01, #1
2f0ac     01 14 06 A1 |  if_e	add	arg02, #1
2f0b0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2f0b0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2f0b4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2f0b8     01 FB 81 51 |  if_ne	sub	result1, _var02
2f0bc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2f0c0     F6 17 6E FB | 	djnz	arg03, #LR__4530
2f0c4                 | LR__4531
2f0c4                 | ' 
2f0c4                 | ' 	return(0);
2f0c4     00 FA 05 F6 | 	mov	result1, #0
2f0c8                 | _fatfs_cc_memcmp_ret
2f0c8     2D 00 64 FD | 	ret
2f0cc                 | 
2f0cc                 | _fatfs_cc_strncmp
2f0cc     09 01 0A F6 | 	mov	_var01, arg01 wz
2f0d0     14 00 90 5D |  if_ne	jmp	#LR__4540
2f0d4                 | ' 		return scan2 ? -1 : 0;
2f0d4     00 14 0E F2 | 	cmp	arg02, #0 wz
2f0d8     01 02 66 56 |  if_ne	neg	_var02, #1
2f0dc     00 02 06 A6 |  if_e	mov	_var02, #0
2f0e0     01 FB 01 F6 | 	mov	result1, _var02
2f0e4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2f0e8                 | LR__4540
2f0e8     00 14 0E F2 | 	cmp	arg02, #0 wz
2f0ec     01 FA 05 A6 |  if_e	mov	result1, #1
2f0f0     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2f0f4     0B 05 02 F6 | 	mov	_var03, arg03
2f0f8     97 16 48 FB | 	callpa	#(@LR__4542-@LR__4541)>>2,fcache_load_ptr_
2f0fc                 | ' 	count = n;
2f0fc                 | ' 	do {
2f0fc                 | LR__4541
2f0fc     00 07 C2 FA | 	rdbyte	_var04, _var01
2f100     0A 09 02 F6 | 	mov	_var05, arg02
2f104     04 0B C2 FA | 	rdbyte	_var06, _var05
2f108     01 04 86 F1 | 	sub	_var03, #1
2f10c     00 04 56 F2 | 	cmps	_var03, #0 wc
2f110     01 00 06 F1 | 	add	_var01, #1
2f114     01 14 06 F1 | 	add	arg02, #1
2f118     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2f11c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4543
2f120     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2f124     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4541
2f128                 | LR__4542
2f128                 | LR__4543
2f128     00 04 56 F2 | 	cmps	_var03, #0 wc
2f12c                 | ' 		return(0);
2f12c     00 FA 05 C6 |  if_b	mov	result1, #0
2f130     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2f134     05 07 0A F2 | 	cmp	_var04, _var06 wz
2f138                 | ' 		return(0);
2f138     00 FA 05 A6 |  if_e	mov	result1, #0
2f13c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2f140     00 06 0E F2 | 	cmp	_var04, #0 wz
2f144                 | ' 		return(-1);
2f144     01 FA 65 A6 |  if_e	neg	result1, #1
2f148     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2f14c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2f150                 | ' 		return(1);
2f150     01 FA 05 A6 |  if_e	mov	result1, #1
2f154                 | ' 		return(c1 - c2);
2f154     03 FB 01 56 |  if_ne	mov	result1, _var04
2f158     05 FB 81 51 |  if_ne	sub	result1, _var06
2f15c                 | _fatfs_cc_strncmp_ret
2f15c     2D 00 64 FD | 	ret
2f160                 | 
2f160                 | _fatfs_cc_strchr
2f160                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/libc/string/strchr.c"
2f160                 | ' 	while ((c = *s++) != (char) charwanted)
2f160                 | LR__4550
2f160     09 01 02 F6 | 	mov	_var01, arg01
2f164     00 03 C2 FA | 	rdbyte	_var02, _var01
2f168     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2f16c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2f170     03 05 0A F2 | 	cmp	_var03, _var04 wz
2f174     01 12 06 F1 | 	add	arg01, #1
2f178     14 00 90 AD |  if_e	jmp	#LR__4551
2f17c     01 05 02 F6 | 	mov	_var03, _var02
2f180     07 04 4E F7 | 	zerox	_var03, #7 wz
2f184     00 FA 05 A6 |  if_e	mov	result1, #0
2f188     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2f18c     D0 FF 9F FD | 	jmp	#LR__4550
2f190                 | LR__4551
2f190                 | ' 	return((char *)--s);
2f190     01 12 86 F1 | 	sub	arg01, #1
2f194     09 FB 01 F6 | 	mov	result1, arg01
2f198                 | _fatfs_cc_strchr_ret
2f198     2D 00 64 FD | 	ret
2f19c                 | 
2f19c                 | _fatfs_cc_disk_initialize
2f19c     04 4A 05 F6 | 	mov	COUNT_, #4
2f1a0     A8 00 A0 FD | 	call	#pushregs_
2f1a4     40 F0 07 F1 | 	add	ptra, #64
2f1a8     04 4E 05 F1 | 	add	fp, #4
2f1ac     A7 12 42 FC | 	wrbyte	arg01, fp
2f1b0     01 00 00 FF 
2f1b4     14 E4 05 F1 | 	add	objptr, ##532
2f1b8     F2 18 02 FB | 	rdlong	arg04, objptr
2f1bc     2C 4E 05 F1 | 	add	fp, #44
2f1c0     A7 18 62 FC | 	wrlong	arg04, fp
2f1c4     04 E4 85 F1 | 	sub	objptr, #4
2f1c8     F2 18 02 FB | 	rdlong	arg04, objptr
2f1cc     04 4E 05 F1 | 	add	fp, #4
2f1d0     A7 18 62 FC | 	wrlong	arg04, fp
2f1d4     08 E4 05 F1 | 	add	objptr, #8
2f1d8     F2 18 02 FB | 	rdlong	arg04, objptr
2f1dc     04 4E 05 F1 | 	add	fp, #4
2f1e0     A7 18 62 FC | 	wrlong	arg04, fp
2f1e4     04 E4 05 F1 | 	add	objptr, #4
2f1e8     F2 18 02 FB | 	rdlong	arg04, objptr
2f1ec     04 4E 05 F1 | 	add	fp, #4
2f1f0     A7 18 62 FC | 	wrlong	arg04, fp
2f1f4     04 E4 05 F1 | 	add	objptr, #4
2f1f8     F2 02 48 FC | 	wrbyte	#1, objptr
2f1fc     01 00 00 FF 
2f200     20 E4 85 F1 | 	sub	objptr, ##544
2f204     38 4E 85 F1 | 	sub	fp, #56
2f208     A7 18 CA FA | 	rdbyte	arg04, fp wz
2f20c     04 4E 85 F1 | 	sub	fp, #4
2f210                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f210                 | '             return RES_NOTRDY;
2f210     03 FA 05 56 |  if_ne	mov	result1, #3
2f214     D8 05 90 5D |  if_ne	jmp	#LR__4578
2f218     13 00 00 FF 
2f21c     10 13 06 F6 | 	mov	arg01, ##10000
2f220     30 95 BF FD | 	call	#__system___waitus
2f224     30 4E 05 F1 | 	add	fp, #48
2f228     A7 12 02 FB | 	rdlong	arg01, fp
2f22c     09 01 08 FC | 	wrpin	#0, arg01
2f230     04 4E 05 F1 | 	add	fp, #4
2f234     A7 12 02 FB | 	rdlong	arg01, fp
2f238     09 01 08 FC | 	wrpin	#0, arg01
2f23c     04 4E 05 F1 | 	add	fp, #4
2f240     A7 12 02 FB | 	rdlong	arg01, fp
2f244     09 01 08 FC | 	wrpin	#0, arg01
2f248     04 4E 05 F1 | 	add	fp, #4
2f24c     A7 12 02 FB | 	rdlong	arg01, fp
2f250     09 00 80 FF 
2f254     09 01 08 FC | 	wrpin	##4608, arg01
2f258     0C 4E 85 F1 | 	sub	fp, #12
2f25c     A7 12 02 FB | 	rdlong	arg01, fp
2f260     59 12 62 FD | 	drvh	arg01
2f264     04 4E 05 F1 | 	add	fp, #4
2f268     A7 12 02 FB | 	rdlong	arg01, fp
2f26c     59 12 62 FD | 	drvh	arg01
2f270     04 4E 05 F1 | 	add	fp, #4
2f274     A7 12 02 FB | 	rdlong	arg01, fp
2f278     59 12 62 FD | 	drvh	arg01
2f27c     04 4E 05 F1 | 	add	fp, #4
2f280     A7 12 02 FB | 	rdlong	arg01, fp
2f284     59 12 62 FD | 	drvh	arg01
2f288     20 4E 85 F1 | 	sub	fp, #32
2f28c     00 04 80 FF 
2f290     A7 20 68 FC | 	wrlong	##524304, fp
2f294     04 4E 05 F1 | 	add	fp, #4
2f298     20 03 80 FF 
2f29c     A7 90 68 FC | 	wrlong	##409672, fp
2f2a0     14 4E 05 F1 | 	add	fp, #20
2f2a4     A7 26 02 FB | 	rdlong	local01, fp
2f2a8     18 4E 85 F1 | 	sub	fp, #24
2f2ac     A7 16 02 FB | 	rdlong	arg03, fp
2f2b0     40 26 62 FD | 	dirl	local01
2f2b4     A0 03 80 FF 
2f2b8     13 91 08 FC | 	wrpin	##475208, local01
2f2bc     13 17 12 FC | 	wxpin	arg03, local01
2f2c0     13 01 28 FC | 	wypin	#0, local01
2f2c4     41 26 62 FD | 	dirh	local01
2f2c8     1C 4E 05 F1 | 	add	fp, #28
2f2cc     A7 28 02 FB | 	rdlong	local02, fp
2f2d0     14 27 82 F1 | 	sub	local01, local02
2f2d4     07 26 06 F5 | 	and	local01, #7
2f2d8     18 26 66 F0 | 	shl	local01, #24
2f2dc     78 14 06 F6 | 	mov	arg02, #120
2f2e0     13 15 42 F5 | 	or	arg02, local01
2f2e4     14 4E 85 F1 | 	sub	fp, #20
2f2e8     A7 14 62 FC | 	wrlong	arg02, fp
2f2ec     14 4E 05 F1 | 	add	fp, #20
2f2f0     A7 12 02 FB | 	rdlong	arg01, fp
2f2f4     10 14 26 F4 | 	bith	arg02, #16
2f2f8     40 12 62 FD | 	dirl	arg01
2f2fc     09 15 02 FC | 	wrpin	arg02, arg01
2f300     09 3F 18 FC | 	wxpin	#31, arg01
2f304     FF FF FF FF 
2f308     09 FF 2B FC | 	wypin	##-1, arg01
2f30c     41 12 62 FD | 	dirh	arg01
2f310     04 4E 85 F1 | 	sub	fp, #4
2f314     A7 14 02 FB | 	rdlong	arg02, fp
2f318     08 4E 05 F1 | 	add	fp, #8
2f31c     A7 2A 02 FB | 	rdlong	local03, fp
2f320     15 15 82 F1 | 	sub	arg02, local03
2f324     07 14 06 F5 | 	and	arg02, #7
2f328     18 14 66 F0 | 	shl	arg02, #24
2f32c     14 4E 85 F1 | 	sub	fp, #20
2f330     A7 14 62 FC | 	wrlong	arg02, fp
2f334     29 00 00 FF 
2f338     7A 14 46 F5 | 	or	arg02, ##21114
2f33c     A7 14 62 FC | 	wrlong	arg02, fp
2f340     14 4E 05 F1 | 	add	fp, #20
2f344     A7 12 02 FB | 	rdlong	arg01, fp
2f348     40 12 62 FD | 	dirl	arg01
2f34c     09 15 02 FC | 	wrpin	arg02, arg01
2f350     09 4F 18 FC | 	wxpin	#39, arg01
2f354     09 01 28 FC | 	wypin	#0, arg01
2f358     41 12 62 FD | 	dirh	arg01
2f35c     28 4E 85 F1 | 	sub	fp, #40
2f360     A7 12 02 F6 | 	mov	arg01, fp
2f364     14 4E 85 F1 | 	sub	fp, #20
2f368     0A 14 06 F6 | 	mov	arg02, #10
2f36c     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1215
2f370     00 12 06 F6 | 	mov	arg01, #0
2f374     00 14 06 F6 | 	mov	arg02, #0
2f378     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f37c     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1225
2f380     64 12 06 F6 | 	mov	arg01, #100
2f384     CC 93 BF FD | 	call	#__system___waitus
2f388     14 4E 05 F1 | 	add	fp, #20
2f38c     A7 12 02 F6 | 	mov	arg01, fp
2f390     14 4E 85 F1 | 	sub	fp, #20
2f394     0A 14 06 F6 | 	mov	arg02, #10
2f398     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1215
2f39c     0C 4E 05 F1 | 	add	fp, #12
2f3a0     A7 00 48 FC | 	wrbyte	#0, fp
2f3a4     0C 4E 85 F1 | 	sub	fp, #12
2f3a8     00 12 06 F6 | 	mov	arg01, #0
2f3ac     00 14 06 F6 | 	mov	arg02, #0
2f3b0     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f3b4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2f3b8     01 18 0E F2 | 	cmp	arg04, #1 wz
2f3bc     B8 03 90 5D |  if_ne	jmp	#LR__4577
2f3c0     08 12 06 F6 | 	mov	arg01, #8
2f3c4     AA 15 06 F6 | 	mov	arg02, #426
2f3c8     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f3cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f3d0     01 FA 0D F2 | 	cmp	result1, #1 wz
2f3d4     98 01 90 5D |  if_ne	jmp	#LR__4563
2f3d8     14 4E 05 F1 | 	add	fp, #20
2f3dc     A7 12 02 F6 | 	mov	arg01, fp
2f3e0     14 4E 85 F1 | 	sub	fp, #20
2f3e4     04 14 06 F6 | 	mov	arg02, #4
2f3e8     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1215
2f3ec     16 4E 05 F1 | 	add	fp, #22
2f3f0     A7 2C C2 FA | 	rdbyte	local04, fp
2f3f4     16 4E 85 F1 | 	sub	fp, #22
2f3f8     01 2C 0E F2 | 	cmp	local04, #1 wz
2f3fc     17 4E 05 A1 |  if_e	add	fp, #23
2f400     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2f404     17 4E 85 A1 |  if_e	sub	fp, #23
2f408     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2f40c     68 03 90 5D |  if_ne	jmp	#LR__4576
2f410                 | ' 				for (tmr = 1000; tmr; tmr--) {
2f410     18 4E 05 F1 | 	add	fp, #24
2f414     01 00 80 FF 
2f418     A7 D0 6B FC | 	wrlong	##1000, fp
2f41c     18 4E 85 F1 | 	sub	fp, #24
2f420                 | LR__4560
2f420     18 4E 05 F1 | 	add	fp, #24
2f424     A7 26 0A FB | 	rdlong	local01, fp wz
2f428     18 4E 85 F1 | 	sub	fp, #24
2f42c     3C 00 90 AD |  if_e	jmp	#LR__4561
2f430     A9 12 06 F6 | 	mov	arg01, #169
2f434     1E 14 C6 F9 | 	decod	arg02, #30
2f438     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f43c     FD 2C 02 F6 | 	mov	local04, result1
2f440     07 2C 4E F7 | 	zerox	local04, #7 wz
2f444     24 00 90 AD |  if_e	jmp	#LR__4561
2f448     01 00 00 FF 
2f44c     E8 13 06 F6 | 	mov	arg01, ##1000
2f450     00 93 BF FD | 	call	#__system___waitus
2f454     18 4E 05 F1 | 	add	fp, #24
2f458     A7 2C 02 FB | 	rdlong	local04, fp
2f45c     01 2C 86 F1 | 	sub	local04, #1
2f460     A7 2C 62 FC | 	wrlong	local04, fp
2f464     18 4E 85 F1 | 	sub	fp, #24
2f468     B4 FF 9F FD | 	jmp	#LR__4560
2f46c                 | LR__4561
2f46c     18 4E 05 F1 | 	add	fp, #24
2f470     A7 2C 0A FB | 	rdlong	local04, fp wz
2f474     18 4E 85 F1 | 	sub	fp, #24
2f478     4C 00 90 AD |  if_e	jmp	#LR__4562
2f47c     3A 12 06 F6 | 	mov	arg01, #58
2f480     00 14 06 F6 | 	mov	arg02, #0
2f484     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f488     FD 2A 02 F6 | 	mov	local03, result1
2f48c     07 2A 4E F7 | 	zerox	local03, #7 wz
2f490     34 00 90 5D |  if_ne	jmp	#LR__4562
2f494     14 4E 05 F1 | 	add	fp, #20
2f498     A7 12 02 F6 | 	mov	arg01, fp
2f49c     14 4E 85 F1 | 	sub	fp, #20
2f4a0     04 14 06 F6 | 	mov	arg02, #4
2f4a4     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1215
2f4a8     14 4E 05 F1 | 	add	fp, #20
2f4ac     A7 26 C2 FA | 	rdbyte	local01, fp
2f4b0     40 26 CE F7 | 	test	local01, #64 wz
2f4b4     0C 2C 06 56 |  if_ne	mov	local04, #12
2f4b8     04 2C 06 A6 |  if_e	mov	local04, #4
2f4bc     08 4E 85 F1 | 	sub	fp, #8
2f4c0     A7 2C 42 FC | 	wrbyte	local04, fp
2f4c4     0C 4E 85 F1 | 	sub	fp, #12
2f4c8                 | LR__4562
2f4c8     14 2C 06 FB | 	rdlong	local04, #20
2f4cc     18 4E 05 F1 | 	add	fp, #24
2f4d0     A7 2C 62 FC | 	wrlong	local04, fp
2f4d4     0C 4E 05 F1 | 	add	fp, #12
2f4d8     A7 2C 02 FB | 	rdlong	local04, fp
2f4dc     1B 2C 26 F4 | 	bith	local04, #27
2f4e0     A7 2C 62 FC | 	wrlong	local04, fp
2f4e4     0C 4E 85 F1 | 	sub	fp, #12
2f4e8     A7 2C 02 FB | 	rdlong	local04, fp
2f4ec     18 4E 85 F1 | 	sub	fp, #24
2f4f0     68 78 04 FF 
2f4f4     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2f4f8     1C 4E 05 C1 |  if_b	add	fp, #28
2f4fc     00 01 80 CF 
2f500     A7 08 68 CC |  if_b	wrlong	##131076, fp
2f504     1C 4E 85 C1 |  if_b	sub	fp, #28
2f508     6C 02 90 CD |  if_b	jmp	#LR__4576
2f50c     18 4E 05 F1 | 	add	fp, #24
2f510     A7 2C 02 FB | 	rdlong	local04, fp
2f514     18 4E 85 F1 | 	sub	fp, #24
2f518     E1 F5 05 FF 
2f51c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f520     1C 4E 05 C1 |  if_b	add	fp, #28
2f524     00 01 80 CF 
2f528     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2f52c     1C 4E 85 C1 |  if_b	sub	fp, #28
2f530     44 02 90 CD |  if_b	jmp	#LR__4576
2f534     18 4E 05 F1 | 	add	fp, #24
2f538     A7 2C 02 FB | 	rdlong	local04, fp
2f53c     18 4E 85 F1 | 	sub	fp, #24
2f540     3B 58 08 FF 
2f544     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2f548     1C 4E 05 C1 |  if_b	add	fp, #28
2f54c     00 01 80 CF 
2f550     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2f554     1C 4E 85 C1 |  if_b	sub	fp, #28
2f558     1C 02 90 CD |  if_b	jmp	#LR__4576
2f55c     1C 4E 05 F1 | 	add	fp, #28
2f560     80 01 80 FF 
2f564     A7 10 68 FC | 	wrlong	##196616, fp
2f568     1C 4E 85 F1 | 	sub	fp, #28
2f56c     08 02 90 FD | 	jmp	#LR__4576
2f570                 | LR__4563
2f570     A9 12 06 F6 | 	mov	arg01, #169
2f574     00 14 06 F6 | 	mov	arg02, #0
2f578     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f57c     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2f580     02 2C 16 F2 | 	cmp	local04, #2 wc
2f584     18 00 90 3D |  if_ae	jmp	#LR__4564
2f588     0C 4E 05 F1 | 	add	fp, #12
2f58c     A7 04 48 FC | 	wrbyte	#2, fp
2f590     04 4E 05 F1 | 	add	fp, #4
2f594     A7 52 49 FC | 	wrbyte	#169, fp
2f598     10 4E 85 F1 | 	sub	fp, #16
2f59c     14 00 90 FD | 	jmp	#LR__4565
2f5a0                 | LR__4564
2f5a0     0C 4E 05 F1 | 	add	fp, #12
2f5a4     A7 02 48 FC | 	wrbyte	#1, fp
2f5a8     04 4E 05 F1 | 	add	fp, #4
2f5ac     A7 02 48 FC | 	wrbyte	#1, fp
2f5b0     10 4E 85 F1 | 	sub	fp, #16
2f5b4                 | LR__4565
2f5b4                 | ' 				ty =  0x01 ; cmd =  (1) ;
2f5b4                 | ' 			}
2f5b4                 | ' 			for (tmr = 1000; tmr; tmr--) {
2f5b4     18 4E 05 F1 | 	add	fp, #24
2f5b8     01 00 80 FF 
2f5bc     A7 D0 6B FC | 	wrlong	##1000, fp
2f5c0     18 4E 85 F1 | 	sub	fp, #24
2f5c4                 | LR__4566
2f5c4     18 4E 05 F1 | 	add	fp, #24
2f5c8     A7 2A 0A FB | 	rdlong	local03, fp wz
2f5cc     18 4E 85 F1 | 	sub	fp, #24
2f5d0     44 00 90 AD |  if_e	jmp	#LR__4567
2f5d4     10 4E 05 F1 | 	add	fp, #16
2f5d8     A7 12 C2 FA | 	rdbyte	arg01, fp
2f5dc     10 4E 85 F1 | 	sub	fp, #16
2f5e0     00 14 06 F6 | 	mov	arg02, #0
2f5e4     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f5e8     FD 2C 02 F6 | 	mov	local04, result1
2f5ec     07 2C 4E F7 | 	zerox	local04, #7 wz
2f5f0     24 00 90 AD |  if_e	jmp	#LR__4567
2f5f4     01 00 00 FF 
2f5f8     E8 13 06 F6 | 	mov	arg01, ##1000
2f5fc     54 91 BF FD | 	call	#__system___waitus
2f600     18 4E 05 F1 | 	add	fp, #24
2f604     A7 2C 02 FB | 	rdlong	local04, fp
2f608     01 2C 86 F1 | 	sub	local04, #1
2f60c     A7 2C 62 FC | 	wrlong	local04, fp
2f610     18 4E 85 F1 | 	sub	fp, #24
2f614     AC FF 9F FD | 	jmp	#LR__4566
2f618                 | LR__4567
2f618     18 4E 05 F1 | 	add	fp, #24
2f61c     A7 2C 0A FB | 	rdlong	local04, fp wz
2f620     18 4E 85 F1 | 	sub	fp, #24
2f624     14 00 90 AD |  if_e	jmp	#LR__4568
2f628     10 12 06 F6 | 	mov	arg01, #16
2f62c     09 14 C6 F9 | 	decod	arg02, #9
2f630     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f634     07 FA 4D F7 | 	zerox	result1, #7 wz
2f638     0C 00 90 AD |  if_e	jmp	#LR__4569
2f63c                 | LR__4568
2f63c     0C 4E 05 F1 | 	add	fp, #12
2f640     A7 00 48 FC | 	wrbyte	#0, fp
2f644     0C 4E 85 F1 | 	sub	fp, #12
2f648                 | LR__4569
2f648     14 2C 06 FB | 	rdlong	local04, #20
2f64c     18 4E 05 F1 | 	add	fp, #24
2f650     A7 2C 62 FC | 	wrlong	local04, fp
2f654     18 4E 85 F1 | 	sub	fp, #24
2f658     F0 FA 02 FF 
2f65c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2f660     18 00 90 3D |  if_ae	jmp	#LR__4570
2f664     24 4E 05 F1 | 	add	fp, #36
2f668     A7 2C 02 FB | 	rdlong	local04, fp
2f66c     1B 2C 26 F4 | 	bith	local04, #27
2f670     A7 2C 62 FC | 	wrlong	local04, fp
2f674     24 4E 85 F1 | 	sub	fp, #36
2f678     2C 00 90 FD | 	jmp	#LR__4571
2f67c                 | LR__4570
2f67c     18 4E 05 F1 | 	add	fp, #24
2f680     A7 2C 02 FB | 	rdlong	local04, fp
2f684     18 4E 85 F1 | 	sub	fp, #24
2f688     E1 F5 05 FF 
2f68c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f690     24 4E 05 C1 |  if_b	add	fp, #36
2f694     A7 2C 02 CB |  if_b	rdlong	local04, fp
2f698     80 00 04 CF 
2f69c     00 2C 46 C5 |  if_b	or	local04, ##134283264
2f6a0     A7 2C 62 CC |  if_b	wrlong	local04, fp
2f6a4     24 4E 85 C1 |  if_b	sub	fp, #36
2f6a8                 | LR__4571
2f6a8     18 4E 05 F1 | 	add	fp, #24
2f6ac     A7 2C 02 FB | 	rdlong	local04, fp
2f6b0     18 4E 85 F1 | 	sub	fp, #24
2f6b4     F0 FA 02 FF 
2f6b8     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2f6bc     1C 4E 05 C1 |  if_b	add	fp, #28
2f6c0     00 01 80 CF 
2f6c4     A7 08 68 CC |  if_b	wrlong	##131076, fp
2f6c8     1C 4E 85 C1 |  if_b	sub	fp, #28
2f6cc     A8 00 90 CD |  if_b	jmp	#LR__4575
2f6d0     18 4E 05 F1 | 	add	fp, #24
2f6d4     A7 2C 02 FB | 	rdlong	local04, fp
2f6d8     18 4E 85 F1 | 	sub	fp, #24
2f6dc     68 78 04 FF 
2f6e0     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2f6e4     1C 4E 05 C1 |  if_b	add	fp, #28
2f6e8     80 01 80 CF 
2f6ec     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2f6f0     1C 4E 85 C1 |  if_b	sub	fp, #28
2f6f4     80 00 90 CD |  if_b	jmp	#LR__4574
2f6f8     18 4E 05 F1 | 	add	fp, #24
2f6fc     A7 2C 02 FB | 	rdlong	local04, fp
2f700     18 4E 85 F1 | 	sub	fp, #24
2f704     E1 F5 05 FF 
2f708     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f70c     1C 4E 05 C1 |  if_b	add	fp, #28
2f710     00 02 80 CF 
2f714     A7 10 68 CC |  if_b	wrlong	##262152, fp
2f718     1C 4E 85 C1 |  if_b	sub	fp, #28
2f71c     58 00 90 CD |  if_b	jmp	#LR__4573
2f720     18 4E 05 F1 | 	add	fp, #24
2f724     A7 2C 02 FB | 	rdlong	local04, fp
2f728     18 4E 85 F1 | 	sub	fp, #24
2f72c     59 73 07 FF 
2f730     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2f734     1C 4E 05 C1 |  if_b	add	fp, #28
2f738     80 02 80 CF 
2f73c     A7 14 68 CC |  if_b	wrlong	##327690, fp
2f740     1C 4E 85 C1 |  if_b	sub	fp, #28
2f744     30 00 90 CD |  if_b	jmp	#LR__4572
2f748     18 4E 05 F1 | 	add	fp, #24
2f74c     A7 2C 02 FB | 	rdlong	local04, fp
2f750     18 4E 85 F1 | 	sub	fp, #24
2f754     D1 F0 08 FF 
2f758     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2f75c     1C 4E 05 C1 |  if_b	add	fp, #28
2f760     00 03 80 CF 
2f764     A7 18 68 CC |  if_b	wrlong	##393228, fp
2f768     1C 4E 85 F3 | 	sumc	fp, #28
2f76c     80 03 80 3F 
2f770     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2f774     1C 4E 85 31 |  if_ae	sub	fp, #28
2f778                 | LR__4572
2f778                 | LR__4573
2f778                 | LR__4574
2f778                 | LR__4575
2f778                 | LR__4576
2f778                 | LR__4577
2f778     0C 4E 05 F1 | 	add	fp, #12
2f77c     A7 2C C2 FA | 	rdbyte	local04, fp
2f780     01 00 00 FF 
2f784     21 E4 05 F1 | 	add	objptr, ##545
2f788     F2 2C 42 FC | 	wrbyte	local04, objptr
2f78c     A7 26 CA FA | 	rdbyte	local01, fp wz
2f790     00 2C 06 56 |  if_ne	mov	local04, #0
2f794     01 2C 06 A6 |  if_e	mov	local04, #1
2f798     20 4E 05 F1 | 	add	fp, #32
2f79c     A7 2C 42 FC | 	wrbyte	local04, fp
2f7a0     A7 2C C2 FA | 	rdbyte	local04, fp
2f7a4     2C 4E 85 F1 | 	sub	fp, #44
2f7a8     01 E4 85 F1 | 	sub	objptr, #1
2f7ac     F2 2C 42 FC | 	wrbyte	local04, objptr
2f7b0     01 00 00 FF 
2f7b4     20 E4 85 F1 | 	sub	objptr, ##544
2f7b8     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1225
2f7bc     34 4E 05 F1 | 	add	fp, #52
2f7c0     A7 12 02 FB | 	rdlong	arg01, fp
2f7c4     18 4E 85 F1 | 	sub	fp, #24
2f7c8     A7 14 02 FB | 	rdlong	arg02, fp
2f7cc     09 15 12 FC | 	wxpin	arg02, arg01
2f7d0     1C 4E 05 F1 | 	add	fp, #28
2f7d4     A7 12 02 FB | 	rdlong	arg01, fp
2f7d8     14 4E 85 F1 | 	sub	fp, #20
2f7dc     A7 14 02 FB | 	rdlong	arg02, fp
2f7e0     09 15 02 FC | 	wrpin	arg02, arg01
2f7e4                 | ' 
2f7e4                 | ' 		}
2f7e4                 | ' 	}
2f7e4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f7e4                 | ' 	CardType = ty;
2f7e4                 | ' 	s = ty ? 0 :  0x01 ;
2f7e4                 | ' 	Stat = s;
2f7e4                 | ' 
2f7e4                 | ' 	deselect();
2f7e4                 | ' 
2f7e4                 | ' 
2f7e4                 | ' 	_wxpin( PIN_CLK, ck_div );
2f7e4                 | ' 	_wrpin( PIN_DI, spm_tx );
2f7e4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f7e4                 | ' 	return s;
2f7e4     08 4E 05 F1 | 	add	fp, #8
2f7e8     A7 FA C1 FA | 	rdbyte	result1, fp
2f7ec     2C 4E 85 F1 | 	sub	fp, #44
2f7f0                 | LR__4578
2f7f0     A7 F0 03 F6 | 	mov	ptra, fp
2f7f4     B2 00 A0 FD | 	call	#popregs_
2f7f8                 | _fatfs_cc_disk_initialize_ret
2f7f8     2D 00 64 FD | 	ret
2f7fc                 | 
2f7fc                 | _fatfs_cc_disk_read
2f7fc     05 4A 05 F6 | 	mov	COUNT_, #5
2f800     A8 00 A0 FD | 	call	#pushregs_
2f804     0A 27 02 F6 | 	mov	local01, arg02
2f808     0B 29 02 F6 | 	mov	local02, arg03
2f80c     0C 2B 02 F6 | 	mov	local03, arg04
2f810     00 12 0E F2 | 	cmp	arg01, #0 wz
2f814     01 FA 05 56 |  if_ne	mov	result1, #1
2f818                 | ' 
2f818                 | ' 	return Stat;
2f818     01 00 00 AF 
2f81c     20 E4 05 A1 |  if_e	add	objptr, ##544
2f820     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f824     01 00 00 AF 
2f828     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f82c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f830     01 FA CD F7 | 	test	result1, #1 wz
2f834     03 FA 05 56 |  if_ne	mov	result1, #3
2f838     84 00 90 5D |  if_ne	jmp	#LR__4582
2f83c     01 00 00 FF 
2f840     21 E4 05 F1 | 	add	objptr, ##545
2f844     F2 2C C2 FA | 	rdbyte	local04, objptr
2f848     01 00 00 FF 
2f84c     21 E4 85 F1 | 	sub	objptr, ##545
2f850     08 2C CE F7 | 	test	local04, #8 wz
2f854     09 28 66 A0 |  if_e	shl	local02, #9
2f858     02 2A 16 F2 | 	cmp	local03, #2 wc
2f85c     12 2C 06 36 |  if_ae	mov	local04, #18
2f860     11 2C 06 C6 |  if_b	mov	local04, #17
2f864     14 15 02 F6 | 	mov	arg02, local02
2f868     16 13 02 F6 | 	mov	arg01, local04
2f86c     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f870     FD 2E 02 F6 | 	mov	local05, result1
2f874     07 2E 4E F7 | 	zerox	local05, #7 wz
2f878     30 00 90 5D |  if_ne	jmp	#LR__4581
2f87c                 | ' 		do {
2f87c                 | LR__4580
2f87c     13 13 02 F6 | 	mov	arg01, local01
2f880     09 14 C6 F9 | 	decod	arg02, #9
2f884     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1233
2f888     00 FA 0D F2 | 	cmp	result1, #0 wz
2f88c     01 00 00 5F 
2f890     00 26 06 51 |  if_ne	add	local01, ##512
2f894     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4580
2f898     16 2D E2 F8 | 	getbyte	local04, local04, #0
2f89c     12 2C 0E F2 | 	cmp	local04, #18 wz
2f8a0     0C 12 06 A6 |  if_e	mov	arg01, #12
2f8a4     00 14 06 A6 |  if_e	mov	arg02, #0
2f8a8     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1239
2f8ac                 | LR__4581
2f8ac     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1225
2f8b0                 | ' 	}
2f8b0                 | ' 	deselect();
2f8b0                 | ' 
2f8b0                 | ' 	return count ? RES_ERROR : RES_OK;
2f8b0     00 2A 0E F2 | 	cmp	local03, #0 wz
2f8b4     01 2E 06 56 |  if_ne	mov	local05, #1
2f8b8     00 2E 06 A6 |  if_e	mov	local05, #0
2f8bc     17 FB 01 F6 | 	mov	result1, local05
2f8c0                 | LR__4582
2f8c0     A7 F0 03 F6 | 	mov	ptra, fp
2f8c4     B2 00 A0 FD | 	call	#popregs_
2f8c8                 | _fatfs_cc_disk_read_ret
2f8c8     2D 00 64 FD | 	ret
2f8cc                 | 
2f8cc                 | _fatfs_cc_disk_write
2f8cc     04 4A 05 F6 | 	mov	COUNT_, #4
2f8d0     A8 00 A0 FD | 	call	#pushregs_
2f8d4     0A 27 02 F6 | 	mov	local01, arg02
2f8d8     0C 29 02 F6 | 	mov	local02, arg04
2f8dc     0B 2B 02 F6 | 	mov	local03, arg03
2f8e0     00 12 0E F2 | 	cmp	arg01, #0 wz
2f8e4     01 FA 05 56 |  if_ne	mov	result1, #1
2f8e8                 | ' 
2f8e8                 | ' 	return Stat;
2f8e8     01 00 00 AF 
2f8ec     20 E4 05 A1 |  if_e	add	objptr, ##544
2f8f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f8f4     01 00 00 AF 
2f8f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f8fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f900     01 FA CD F7 | 	test	result1, #1 wz
2f904     03 FA 05 56 |  if_ne	mov	result1, #3
2f908     D4 00 90 5D |  if_ne	jmp	#LR__4594
2f90c     01 00 00 FF 
2f910     21 E4 05 F1 | 	add	objptr, ##545
2f914     F2 16 C2 FA | 	rdbyte	arg03, objptr
2f918     01 00 00 FF 
2f91c     21 E4 85 F1 | 	sub	objptr, ##545
2f920     08 16 CE F7 | 	test	arg03, #8 wz
2f924     09 2A 66 A0 |  if_e	shl	local03, #9
2f928     01 28 0E F2 | 	cmp	local02, #1 wz
2f92c     30 00 90 5D |  if_ne	jmp	#LR__4590
2f930     18 12 06 F6 | 	mov	arg01, #24
2f934     15 15 02 F6 | 	mov	arg02, local03
2f938     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f93c     FD 2C 02 F6 | 	mov	local04, result1
2f940     07 2C 4E F7 | 	zerox	local04, #7 wz
2f944     84 00 90 5D |  if_ne	jmp	#LR__4593
2f948     13 13 02 F6 | 	mov	arg01, local01
2f94c     FE 14 06 F6 | 	mov	arg02, #254
2f950     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1235
2f954     00 FA 0D F2 | 	cmp	result1, #0 wz
2f958     00 28 06 56 |  if_ne	mov	local02, #0
2f95c     6C 00 90 FD | 	jmp	#LR__4593
2f960                 | LR__4590
2f960     01 00 00 FF 
2f964     21 E4 05 F1 | 	add	objptr, ##545
2f968     F2 2C C2 FA | 	rdbyte	local04, objptr
2f96c     01 00 00 FF 
2f970     21 E4 85 F1 | 	sub	objptr, ##545
2f974     06 2C CE F7 | 	test	local04, #6 wz
2f978     97 12 06 56 |  if_ne	mov	arg01, #151
2f97c     14 15 02 56 |  if_ne	mov	arg02, local02
2f980     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1239
2f984     15 15 02 F6 | 	mov	arg02, local03
2f988     19 12 06 F6 | 	mov	arg01, #25
2f98c     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2f990     FD 2C 02 F6 | 	mov	local04, result1
2f994     07 2C 4E F7 | 	zerox	local04, #7 wz
2f998     30 00 90 5D |  if_ne	jmp	#LR__4592
2f99c                 | ' 			do {
2f99c                 | LR__4591
2f99c     13 13 02 F6 | 	mov	arg01, local01
2f9a0     FC 14 06 F6 | 	mov	arg02, #252
2f9a4     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1235
2f9a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9ac     01 00 00 5F 
2f9b0     00 26 06 51 |  if_ne	add	local01, ##512
2f9b4     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4591
2f9b8     00 12 06 F6 | 	mov	arg01, #0
2f9bc     FD 14 06 F6 | 	mov	arg02, #253
2f9c0     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1235
2f9c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9c8     01 28 06 A6 |  if_e	mov	local02, #1
2f9cc                 | LR__4592
2f9cc                 | LR__4593
2f9cc     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1225
2f9d0                 | ' 				count = 1;
2f9d0                 | ' 		}
2f9d0                 | ' 	}
2f9d0                 | ' 	deselect();
2f9d0                 | ' 
2f9d0                 | ' 	return count ? RES_ERROR : RES_OK;
2f9d0     00 28 0E F2 | 	cmp	local02, #0 wz
2f9d4     01 2C 06 56 |  if_ne	mov	local04, #1
2f9d8     00 2C 06 A6 |  if_e	mov	local04, #0
2f9dc     16 FB 01 F6 | 	mov	result1, local04
2f9e0                 | LR__4594
2f9e0     A7 F0 03 F6 | 	mov	ptra, fp
2f9e4     B2 00 A0 FD | 	call	#popregs_
2f9e8                 | _fatfs_cc_disk_write_ret
2f9e8     2D 00 64 FD | 	ret
2f9ec                 | 
2f9ec                 | _fatfs_cc_disk_ioctl
2f9ec     01 4A 05 F6 | 	mov	COUNT_, #1
2f9f0     A8 00 A0 FD | 	call	#pushregs_
2f9f4     30 F0 07 F1 | 	add	ptra, #48
2f9f8     04 4E 05 F1 | 	add	fp, #4
2f9fc     A7 12 42 FC | 	wrbyte	arg01, fp
2fa00     04 4E 05 F1 | 	add	fp, #4
2fa04     A7 14 42 FC | 	wrbyte	arg02, fp
2fa08     04 4E 05 F1 | 	add	fp, #4
2fa0c     A7 16 62 FC | 	wrlong	arg03, fp
2fa10     08 4E 85 F1 | 	sub	fp, #8
2fa14     A7 12 CA FA | 	rdbyte	arg01, fp wz
2fa18     04 4E 85 F1 | 	sub	fp, #4
2fa1c     01 FA 05 56 |  if_ne	mov	result1, #1
2fa20                 | ' 
2fa20                 | ' 	return Stat;
2fa20     01 00 00 AF 
2fa24     20 E4 05 A1 |  if_e	add	objptr, ##544
2fa28     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2fa2c     01 00 00 AF 
2fa30     20 E4 85 A1 |  if_e	sub	objptr, ##544
2fa34     FD FA E1 F8 | 	getbyte	result1, result1, #0
2fa38     01 FA CD F7 | 	test	result1, #1 wz
2fa3c     03 FA 05 56 |  if_ne	mov	result1, #3
2fa40     E4 01 90 5D |  if_ne	jmp	#LR__4608
2fa44     10 4E 05 F1 | 	add	fp, #16
2fa48     A7 02 68 FC | 	wrlong	#1, fp
2fa4c                 | ' 
2fa4c                 | ' 	res = RES_ERROR;
2fa4c                 | ' 	switch (ctrl) {
2fa4c     08 4E 85 F1 | 	sub	fp, #8
2fa50     A7 26 C2 FA | 	rdbyte	local01, fp
2fa54     08 4E 85 F1 | 	sub	fp, #8
2fa58     04 26 26 F3 | 	fle	local01, #4
2fa5c     30 26 62 FD | 	jmprel	local01
2fa60                 | LR__4600
2fa60     10 00 90 FD | 	jmp	#LR__4601
2fa64     24 00 90 FD | 	jmp	#LR__4602
2fa68     A0 01 90 FD | 	jmp	#LR__4606
2fa6c     80 01 90 FD | 	jmp	#LR__4605
2fa70     98 01 90 FD | 	jmp	#LR__4606
2fa74                 | LR__4601
2fa74     B0 79 B0 FD | 	call	#_fatfs_cc_select_1229
2fa78     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa7c     10 4E 05 51 |  if_ne	add	fp, #16
2fa80     A7 00 68 5C |  if_ne	wrlong	#0, fp
2fa84     10 4E 85 51 |  if_ne	sub	fp, #16
2fa88                 | ' 			break;
2fa88     8C 01 90 FD | 	jmp	#LR__4607
2fa8c                 | LR__4602
2fa8c     09 12 06 F6 | 	mov	arg01, #9
2fa90     00 14 06 F6 | 	mov	arg02, #0
2fa94     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1239
2fa98     FD 26 02 F6 | 	mov	local01, result1
2fa9c     07 26 4E F7 | 	zerox	local01, #7 wz
2faa0     74 01 90 5D |  if_ne	jmp	#LR__4607
2faa4     18 4E 05 F1 | 	add	fp, #24
2faa8     A7 12 02 F6 | 	mov	arg01, fp
2faac     18 4E 85 F1 | 	sub	fp, #24
2fab0     10 14 06 F6 | 	mov	arg02, #16
2fab4     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1233
2fab8     00 FA 0D F2 | 	cmp	result1, #0 wz
2fabc     58 01 90 AD |  if_e	jmp	#LR__4607
2fac0     18 4E 05 F1 | 	add	fp, #24
2fac4     A7 26 C2 FA | 	rdbyte	local01, fp
2fac8     18 4E 85 F1 | 	sub	fp, #24
2facc     06 26 46 F0 | 	shr	local01, #6
2fad0     01 26 0E F2 | 	cmp	local01, #1 wz
2fad4     5C 00 90 5D |  if_ne	jmp	#LR__4603
2fad8     21 4E 05 F1 | 	add	fp, #33
2fadc     A7 26 C2 FA | 	rdbyte	local01, fp
2fae0     01 4E 85 F1 | 	sub	fp, #1
2fae4     A7 FA C1 FA | 	rdbyte	result1, fp
2fae8     FD FA 31 F9 | 	getword	result1, result1, #0
2faec     08 FA 65 F0 | 	shl	result1, #8
2faf0     FD 26 02 F1 | 	add	local01, result1
2faf4     01 4E 85 F1 | 	sub	fp, #1
2faf8     A7 FA C1 FA | 	rdbyte	result1, fp
2fafc     3F FA 05 F5 | 	and	result1, #63
2fb00     10 FA 65 F0 | 	shl	result1, #16
2fb04     FD 26 02 F1 | 	add	local01, result1
2fb08     01 26 06 F1 | 	add	local01, #1
2fb0c     09 4E 05 F1 | 	add	fp, #9
2fb10     A7 26 62 FC | 	wrlong	local01, fp
2fb14     1C 4E 85 F1 | 	sub	fp, #28
2fb18     A7 26 02 FB | 	rdlong	local01, fp
2fb1c     1C 4E 05 F1 | 	add	fp, #28
2fb20     A7 FA 01 FB | 	rdlong	result1, fp
2fb24     28 4E 85 F1 | 	sub	fp, #40
2fb28     0A FA 65 F0 | 	shl	result1, #10
2fb2c     13 FB 61 FC | 	wrlong	result1, local01
2fb30     AC 00 90 FD | 	jmp	#LR__4604
2fb34                 | LR__4603
2fb34     1D 4E 05 F1 | 	add	fp, #29
2fb38     A7 26 C2 FA | 	rdbyte	local01, fp
2fb3c     13 27 42 F8 | 	getnib	local01, local01, #0
2fb40     05 4E 05 F1 | 	add	fp, #5
2fb44     A7 FA C1 FA | 	rdbyte	result1, fp
2fb48     80 FA 05 F5 | 	and	result1, #128
2fb4c     07 FA C5 F0 | 	sar	result1, #7
2fb50     FD 26 02 F1 | 	add	local01, result1
2fb54     01 4E 85 F1 | 	sub	fp, #1
2fb58     A7 FA C1 FA | 	rdbyte	result1, fp
2fb5c     03 FA 05 F5 | 	and	result1, #3
2fb60     01 FA 65 F0 | 	shl	result1, #1
2fb64     FD 26 02 F1 | 	add	local01, result1
2fb68     02 26 06 F1 | 	add	local01, #2
2fb6c     0D 4E 85 F1 | 	sub	fp, #13
2fb70     A7 26 42 FC | 	wrbyte	local01, fp
2fb74     0C 4E 05 F1 | 	add	fp, #12
2fb78     A7 26 C2 FA | 	rdbyte	local01, fp
2fb7c     06 26 46 F0 | 	shr	local01, #6
2fb80     01 4E 85 F1 | 	sub	fp, #1
2fb84     A7 FA C1 FA | 	rdbyte	result1, fp
2fb88     FD FA 31 F9 | 	getword	result1, result1, #0
2fb8c     02 FA 65 F0 | 	shl	result1, #2
2fb90     FD 26 02 F1 | 	add	local01, result1
2fb94     01 4E 85 F1 | 	sub	fp, #1
2fb98     A7 FA C1 FA | 	rdbyte	result1, fp
2fb9c     03 FA 05 F5 | 	and	result1, #3
2fba0     FD FA 31 F9 | 	getword	result1, result1, #0
2fba4     0A FA 65 F0 | 	shl	result1, #10
2fba8     FD 26 02 F1 | 	add	local01, result1
2fbac     01 26 06 F1 | 	add	local01, #1
2fbb0     0A 4E 05 F1 | 	add	fp, #10
2fbb4     A7 26 62 FC | 	wrlong	local01, fp
2fbb8     1C 4E 85 F1 | 	sub	fp, #28
2fbbc     A7 26 02 FB | 	rdlong	local01, fp
2fbc0     1C 4E 05 F1 | 	add	fp, #28
2fbc4     A7 FA 01 FB | 	rdlong	result1, fp
2fbc8     14 4E 85 F1 | 	sub	fp, #20
2fbcc     A7 16 C2 FA | 	rdbyte	arg03, fp
2fbd0     14 4E 85 F1 | 	sub	fp, #20
2fbd4     09 16 86 F1 | 	sub	arg03, #9
2fbd8     0B FB 61 F0 | 	shl	result1, arg03
2fbdc     13 FB 61 FC | 	wrlong	result1, local01
2fbe0                 | LR__4604
2fbe0     10 4E 05 F1 | 	add	fp, #16
2fbe4     A7 00 68 FC | 	wrlong	#0, fp
2fbe8     10 4E 85 F1 | 	sub	fp, #16
2fbec                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2fbec                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2fbec                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2fbec                 | ' 				}
2fbec                 | ' 				res = RES_OK;
2fbec                 | ' 			}
2fbec                 | ' 			break;
2fbec     28 00 90 FD | 	jmp	#LR__4607
2fbf0                 | LR__4605
2fbf0     0C 4E 05 F1 | 	add	fp, #12
2fbf4     A7 26 02 FB | 	rdlong	local01, fp
2fbf8     13 01 69 FC | 	wrlong	#128, local01
2fbfc     04 4E 05 F1 | 	add	fp, #4
2fc00     A7 00 68 FC | 	wrlong	#0, fp
2fc04     10 4E 85 F1 | 	sub	fp, #16
2fc08                 | ' 			*(DWORD*)buff = 128;
2fc08                 | ' 			res = RES_OK;
2fc08                 | ' 			break;
2fc08     0C 00 90 FD | 	jmp	#LR__4607
2fc0c                 | LR__4606
2fc0c     10 4E 05 F1 | 	add	fp, #16
2fc10     A7 08 68 FC | 	wrlong	#4, fp
2fc14     10 4E 85 F1 | 	sub	fp, #16
2fc18                 | LR__4607
2fc18     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1225
2fc1c                 | ' 			res = RES_PARERR;
2fc1c                 | ' 	}
2fc1c                 | ' 
2fc1c                 | ' 	deselect();
2fc1c                 | ' 
2fc1c                 | ' 	return res;
2fc1c     10 4E 05 F1 | 	add	fp, #16
2fc20     A7 FA 01 FB | 	rdlong	result1, fp
2fc24     10 4E 85 F1 | 	sub	fp, #16
2fc28                 | LR__4608
2fc28     A7 F0 03 F6 | 	mov	ptra, fp
2fc2c     B2 00 A0 FD | 	call	#popregs_
2fc30                 | _fatfs_cc_disk_ioctl_ret
2fc30     2D 00 64 FD | 	ret
2fc34                 | 
2fc34                 | _fatfs_cc_disk_setpins
2fc34     00 12 0E F2 | 	cmp	arg01, #0 wz
2fc38     01 FA 65 56 |  if_ne	neg	result1, #1
2fc3c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2fc40     01 00 00 FF 
2fc44     10 E4 05 F1 | 	add	objptr, ##528
2fc48     F2 14 62 FC | 	wrlong	arg02, objptr
2fc4c     04 E4 05 F1 | 	add	objptr, #4
2fc50     F2 16 62 FC | 	wrlong	arg03, objptr
2fc54     04 E4 05 F1 | 	add	objptr, #4
2fc58     F2 18 62 FC | 	wrlong	arg04, objptr
2fc5c     04 E4 05 F1 | 	add	objptr, #4
2fc60     F2 1A 62 FC | 	wrlong	arg05, objptr
2fc64     01 00 00 FF 
2fc68     1C E4 85 F1 | 	sub	objptr, ##540
2fc6c     00 FA 05 F6 | 	mov	result1, #0
2fc70                 | _fatfs_cc_disk_setpins_ret
2fc70     2D 00 64 FD | 	ret
2fc74                 | 
2fc74                 | _fatfs_cc_tchar2uni
2fc74     09 01 02 FB | 	rdlong	_var01, arg01
2fc78     00 03 02 F6 | 	mov	_var02, _var01
2fc7c     01 00 06 F1 | 	add	_var01, #1
2fc80     00 05 02 F6 | 	mov	_var03, _var01
2fc84     01 07 C2 FA | 	rdbyte	_var04, _var02
2fc88     80 06 CE F7 | 	test	_var04, #128 wz
2fc8c     E8 00 90 AD |  if_e	jmp	#LR__4617
2fc90     03 09 02 F6 | 	mov	_var05, _var04
2fc94     E0 08 06 F5 | 	and	_var05, #224
2fc98     C0 08 0E F2 | 	cmp	_var05, #192 wz
2fc9c     1F 06 06 A5 |  if_e	and	_var04, #31
2fca0     01 0A 06 A6 |  if_e	mov	_var06, #1
2fca4     34 00 90 AD |  if_e	jmp	#LR__4611
2fca8     03 09 02 F6 | 	mov	_var05, _var04
2fcac     F0 08 06 F5 | 	and	_var05, #240
2fcb0     E0 08 0E F2 | 	cmp	_var05, #224 wz
2fcb4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2fcb8     02 0A 06 A6 |  if_e	mov	_var06, #2
2fcbc     1C 00 90 AD |  if_e	jmp	#LR__4610
2fcc0     03 09 02 F6 | 	mov	_var05, _var04
2fcc4     F8 08 06 F5 | 	and	_var05, #248
2fcc8     F0 08 0E F2 | 	cmp	_var05, #240 wz
2fccc     07 06 06 A5 |  if_e	and	_var04, #7
2fcd0     03 0A 06 A6 |  if_e	mov	_var06, #3
2fcd4                 | ' 			return 0xFFFFFFFF;
2fcd4     01 FA 65 56 |  if_ne	neg	result1, #1
2fcd8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2fcdc                 | LR__4610
2fcdc                 | LR__4611
2fcdc                 | ' 		}
2fcdc                 | ' 		do {
2fcdc                 | LR__4612
2fcdc     02 0D C2 FA | 	rdbyte	_var07, _var03
2fce0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2fce4     C0 08 06 F5 | 	and	_var05, #192
2fce8     80 08 0E F2 | 	cmp	_var05, #128 wz
2fcec     01 04 06 F1 | 	add	_var03, #1
2fcf0     01 FA 65 56 |  if_ne	neg	result1, #1
2fcf4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2fcf8     06 06 66 F0 | 	shl	_var04, #6
2fcfc     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2fd00     3F 02 06 F5 | 	and	_var02, #63
2fd04     01 07 42 F5 | 	or	_var04, _var02
2fd08     F4 0B 6E FB | 	djnz	_var06, #LR__4612
2fd0c     80 06 16 F2 | 	cmp	_var04, #128 wc
2fd10     24 00 90 CD |  if_b	jmp	#LR__4614
2fd14     6C 00 00 FF 
2fd18     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2fd1c     0C 00 90 CD |  if_b	jmp	#LR__4613
2fd20     70 00 00 FF 
2fd24     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2fd28     0C 00 90 CD |  if_b	jmp	#LR__4614
2fd2c                 | LR__4613
2fd2c     80 08 00 FF 
2fd30     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2fd34     08 00 90 CD |  if_b	jmp	#LR__4615
2fd38                 | LR__4614
2fd38     01 FA 65 F6 | 	neg	result1, #1
2fd3c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2fd40                 | LR__4615
2fd40     80 00 00 FF 
2fd44     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2fd48     2C 00 90 CD |  if_b	jmp	#LR__4616
2fd4c     03 03 02 F6 | 	mov	_var02, _var04
2fd50     80 00 00 FF 
2fd54     00 02 86 F1 | 	sub	_var02, ##65536
2fd58     06 02 66 F0 | 	shl	_var02, #6
2fd5c     80 FF 01 FF 
2fd60     00 02 06 F5 | 	and	_var02, ##67043328
2fd64     6E 00 6C FF 
2fd68     00 08 06 F6 | 	mov	_var05, ##-671032320
2fd6c     01 09 42 F5 | 	or	_var05, _var02
2fd70     09 06 46 F7 | 	zerox	_var04, #9
2fd74     04 07 42 F5 | 	or	_var04, _var05
2fd78                 | LR__4616
2fd78                 | LR__4617
2fd78     09 05 62 FC | 	wrlong	_var03, arg01
2fd7c                 | ' 	}
2fd7c                 | ' #line 811 "ff.c"
2fd7c                 | ' 	*str = p;
2fd7c                 | ' 	return uc;
2fd7c     03 FB 01 F6 | 	mov	result1, _var04
2fd80                 | _fatfs_cc_tchar2uni_ret
2fd80     2D 00 64 FD | 	ret
2fd84                 | 
2fd84                 | _fatfs_cc_put_utf
2fd84     80 12 16 F2 | 	cmp	arg01, #128 wc
2fd88     18 00 90 3D |  if_ae	jmp	#LR__4620
2fd8c     01 16 16 F2 | 	cmp	arg03, #1 wc
2fd90     00 FA 05 C6 |  if_b	mov	result1, #0
2fd94     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2fd98     0A 13 42 FC | 	wrbyte	arg01, arg02
2fd9c                 | ' 		*buf = (TCHAR)chr;
2fd9c                 | ' 		return 1;
2fd9c     01 FA 05 F6 | 	mov	result1, #1
2fda0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fda4                 | LR__4620
2fda4     04 00 00 FF 
2fda8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2fdac     40 00 90 3D |  if_ae	jmp	#LR__4621
2fdb0     02 16 16 F2 | 	cmp	arg03, #2 wc
2fdb4     00 FA 05 C6 |  if_b	mov	result1, #0
2fdb8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2fdbc     09 FB 01 F6 | 	mov	result1, arg01
2fdc0     06 FA 45 F0 | 	shr	result1, #6
2fdc4     1F FA 05 F5 | 	and	result1, #31
2fdc8     C0 16 06 F6 | 	mov	arg03, #192
2fdcc     FD 16 42 F5 | 	or	arg03, result1
2fdd0     0A 17 42 FC | 	wrbyte	arg03, arg02
2fdd4     01 14 06 F1 | 	add	arg02, #1
2fdd8     3F 12 06 F5 | 	and	arg01, #63
2fddc     80 FA 05 F6 | 	mov	result1, #128
2fde0     09 FB 41 F5 | 	or	result1, arg01
2fde4     0A FB 41 FC | 	wrbyte	result1, arg02
2fde8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2fde8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2fde8                 | ' 		return 2;
2fde8     02 FA 05 F6 | 	mov	result1, #2
2fdec     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fdf0                 | LR__4621
2fdf0     80 00 00 FF 
2fdf4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2fdf8     70 00 90 3D |  if_ae	jmp	#LR__4624
2fdfc     03 16 16 F2 | 	cmp	arg03, #3 wc
2fe00     18 00 90 CD |  if_b	jmp	#LR__4622
2fe04     6C 00 00 FF 
2fe08     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2fe0c     14 00 90 CD |  if_b	jmp	#LR__4623
2fe10     70 00 00 FF 
2fe14     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2fe18     08 00 90 3D |  if_ae	jmp	#LR__4623
2fe1c                 | LR__4622
2fe1c     00 FA 05 F6 | 	mov	result1, #0
2fe20     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fe24                 | LR__4623
2fe24     09 FB 59 F8 | 	getnib	result1, arg01, #3
2fe28     E0 16 06 F6 | 	mov	arg03, #224
2fe2c     FD 16 42 F5 | 	or	arg03, result1
2fe30     0A 17 42 FC | 	wrbyte	arg03, arg02
2fe34     01 14 06 F1 | 	add	arg02, #1
2fe38     09 FB 01 F6 | 	mov	result1, arg01
2fe3c     06 FA 45 F0 | 	shr	result1, #6
2fe40     3F FA 05 F5 | 	and	result1, #63
2fe44     80 16 06 F6 | 	mov	arg03, #128
2fe48     FD 16 42 F5 | 	or	arg03, result1
2fe4c     0A 17 42 FC | 	wrbyte	arg03, arg02
2fe50     01 14 06 F1 | 	add	arg02, #1
2fe54     3F 12 06 F5 | 	and	arg01, #63
2fe58     80 FA 05 F6 | 	mov	result1, #128
2fe5c     09 FB 41 F5 | 	or	result1, arg01
2fe60     0A FB 41 FC | 	wrbyte	result1, arg02
2fe64                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2fe64                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2fe64                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2fe64                 | ' 		return 3;
2fe64     03 FA 05 F6 | 	mov	result1, #3
2fe68     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fe6c                 | LR__4624
2fe6c     04 16 16 F2 | 	cmp	arg03, #4 wc
2fe70     00 FA 05 C6 |  if_b	mov	result1, #0
2fe74     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2fe78     09 01 02 F6 | 	mov	_var01, arg01
2fe7c     E0 01 06 F4 | 	bitl	_var01, #480
2fe80     00 00 6C FF 
2fe84     00 00 86 F1 | 	sub	_var01, ##-671088640
2fe88     06 00 46 F0 | 	shr	_var01, #6
2fe8c     09 13 32 F9 | 	getword	arg01, arg01, #0
2fe90     6E 00 00 FF 
2fe94     00 12 86 F1 | 	sub	arg01, ##56320
2fe98     00 08 00 FF 
2fe9c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2fea0     02 00 00 CF 
2fea4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2fea8     00 FA 05 36 |  if_ae	mov	result1, #0
2feac     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2feb0     09 01 42 F5 | 	or	_var01, arg01
2feb4     80 00 00 FF 
2feb8     00 00 06 F1 | 	add	_var01, ##65536
2febc     00 FB 01 F6 | 	mov	result1, _var01
2fec0     12 FA 45 F0 | 	shr	result1, #18
2fec4     07 FA 05 F5 | 	and	result1, #7
2fec8     F0 16 06 F6 | 	mov	arg03, #240
2fecc     FD 16 42 F5 | 	or	arg03, result1
2fed0     0A 17 42 FC | 	wrbyte	arg03, arg02
2fed4     01 14 06 F1 | 	add	arg02, #1
2fed8     00 FB 01 F6 | 	mov	result1, _var01
2fedc     0C FA 45 F0 | 	shr	result1, #12
2fee0     3F FA 05 F5 | 	and	result1, #63
2fee4     80 16 06 F6 | 	mov	arg03, #128
2fee8     FD 16 42 F5 | 	or	arg03, result1
2feec     0A 17 42 FC | 	wrbyte	arg03, arg02
2fef0     01 14 06 F1 | 	add	arg02, #1
2fef4     00 FB 01 F6 | 	mov	result1, _var01
2fef8     06 FA 45 F0 | 	shr	result1, #6
2fefc     3F FA 05 F5 | 	and	result1, #63
2ff00     80 16 06 F6 | 	mov	arg03, #128
2ff04     FD 16 42 F5 | 	or	arg03, result1
2ff08     0A 17 42 FC | 	wrbyte	arg03, arg02
2ff0c     01 14 06 F1 | 	add	arg02, #1
2ff10     3F 00 06 F5 | 	and	_var01, #63
2ff14     80 FA 05 F6 | 	mov	result1, #128
2ff18     00 FB 41 F5 | 	or	result1, _var01
2ff1c     0A FB 41 FC | 	wrbyte	result1, arg02
2ff20                 | ' 	chr = (hc | chr) + 0x10000;
2ff20                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2ff20                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2ff20                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2ff20                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ff20                 | ' 	return 4;
2ff20     04 FA 05 F6 | 	mov	result1, #4
2ff24                 | _fatfs_cc_put_utf_ret
2ff24     2D 00 64 FD | 	ret
2ff28                 | 
2ff28                 | _fatfs_cc_sync_window
2ff28     02 4A 05 F6 | 	mov	COUNT_, #2
2ff2c     A8 00 A0 FD | 	call	#pushregs_
2ff30     09 27 02 F6 | 	mov	local01, arg01
2ff34     00 28 06 F6 | 	mov	local02, #0
2ff38     03 26 06 F1 | 	add	local01, #3
2ff3c     13 FB C9 FA | 	rdbyte	result1, local01 wz
2ff40     03 26 86 F1 | 	sub	local01, #3
2ff44     A4 00 90 AD |  if_e	jmp	#LR__4632
2ff48     01 26 06 F1 | 	add	local01, #1
2ff4c     13 13 C2 FA | 	rdbyte	arg01, local01
2ff50     33 26 06 F1 | 	add	local01, #51
2ff54     13 15 02 F6 | 	mov	arg02, local01
2ff58     04 26 86 F1 | 	sub	local01, #4
2ff5c     13 17 02 FB | 	rdlong	arg03, local01
2ff60     30 26 86 F1 | 	sub	local01, #48
2ff64     01 18 06 F6 | 	mov	arg04, #1
2ff68     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2ff6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff70     74 00 90 5D |  if_ne	jmp	#LR__4630
2ff74     03 26 06 F1 | 	add	local01, #3
2ff78     13 01 48 FC | 	wrbyte	#0, local01
2ff7c     2D 26 06 F1 | 	add	local01, #45
2ff80     13 FB 01 FB | 	rdlong	result1, local01
2ff84     0C 26 86 F1 | 	sub	local01, #12
2ff88     13 19 02 FB | 	rdlong	arg04, local01
2ff8c     0C FB 81 F1 | 	sub	result1, arg04
2ff90     08 26 86 F1 | 	sub	local01, #8
2ff94     13 19 02 FB | 	rdlong	arg04, local01
2ff98     1C 26 86 F1 | 	sub	local01, #28
2ff9c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ffa0     48 00 90 3D |  if_ae	jmp	#LR__4631
2ffa4     02 26 06 F1 | 	add	local01, #2
2ffa8     13 19 C2 FA | 	rdbyte	arg04, local01
2ffac     02 26 86 F1 | 	sub	local01, #2
2ffb0     02 18 0E F2 | 	cmp	arg04, #2 wz
2ffb4     34 00 90 5D |  if_ne	jmp	#LR__4631
2ffb8     01 26 06 F1 | 	add	local01, #1
2ffbc     13 13 C2 FA | 	rdbyte	arg01, local01
2ffc0     33 26 06 F1 | 	add	local01, #51
2ffc4     13 15 02 F6 | 	mov	arg02, local01
2ffc8     04 26 86 F1 | 	sub	local01, #4
2ffcc     13 17 02 FB | 	rdlong	arg03, local01
2ffd0     14 26 86 F1 | 	sub	local01, #20
2ffd4     13 27 02 FB | 	rdlong	local01, local01
2ffd8     13 17 02 F1 | 	add	arg03, local01
2ffdc     01 18 06 F6 | 	mov	arg04, #1
2ffe0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2ffe4     04 00 90 FD | 	jmp	#LR__4631
2ffe8                 | LR__4630
2ffe8     01 28 06 F6 | 	mov	local02, #1
2ffec                 | LR__4631
2ffec                 | LR__4632
2ffec                 | ' 			res = FR_DISK_ERR;
2ffec                 | ' 		}
2ffec                 | ' 	}
2ffec                 | ' 	return res;
2ffec     14 FB 01 F6 | 	mov	result1, local02
2fff0     A7 F0 03 F6 | 	mov	ptra, fp
2fff4     B2 00 A0 FD | 	call	#popregs_
2fff8                 | _fatfs_cc_sync_window_ret
2fff8     2D 00 64 FD | 	ret
2fffc                 | 
2fffc                 | _fatfs_cc_move_window
2fffc     03 4A 05 F6 | 	mov	COUNT_, #3
30000     A8 00 A0 FD | 	call	#pushregs_
30004     09 27 02 F6 | 	mov	local01, arg01
30008     0A 29 02 F6 | 	mov	local02, arg02
3000c     00 2A 06 F6 | 	mov	local03, #0
30010     30 26 06 F1 | 	add	local01, #48
30014     13 19 02 FB | 	rdlong	arg04, local01
30018     30 26 86 F1 | 	sub	local01, #48
3001c     0C 29 0A F2 | 	cmp	local02, arg04 wz
30020     40 00 90 AD |  if_e	jmp	#LR__4641
30024     13 13 02 F6 | 	mov	arg01, local01
30028     FC FE BF FD | 	call	#_fatfs_cc_sync_window
3002c     FD 2A 0A F6 | 	mov	local03, result1 wz
30030     30 00 90 5D |  if_ne	jmp	#LR__4640
30034     01 26 06 F1 | 	add	local01, #1
30038     13 13 C2 FA | 	rdbyte	arg01, local01
3003c     33 26 06 F1 | 	add	local01, #51
30040     13 15 02 F6 | 	mov	arg02, local01
30044     14 17 02 F6 | 	mov	arg03, local02
30048     01 18 06 F6 | 	mov	arg04, #1
3004c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
30050     00 FA 0D F2 | 	cmp	result1, #0 wz
30054     01 28 66 56 |  if_ne	neg	local02, #1
30058     01 2A 06 56 |  if_ne	mov	local03, #1
3005c     04 26 86 F1 | 	sub	local01, #4
30060     13 29 62 FC | 	wrlong	local02, local01
30064                 | LR__4640
30064                 | LR__4641
30064                 | ' 				sect = (LBA_t)0 - 1;
30064                 | ' 				res = FR_DISK_ERR;
30064                 | ' 			}
30064                 | ' 			fs->winsect = sect;
30064                 | ' 		}
30064                 | ' 	}
30064                 | ' 	return res;
30064     15 FB 01 F6 | 	mov	result1, local03
30068     A7 F0 03 F6 | 	mov	ptra, fp
3006c     B2 00 A0 FD | 	call	#popregs_
30070                 | _fatfs_cc_move_window_ret
30070     2D 00 64 FD | 	ret
30074                 | 
30074                 | _fatfs_cc_sync_fs
30074     02 4A 05 F6 | 	mov	COUNT_, #2
30078     A8 00 A0 FD | 	call	#pushregs_
3007c     09 27 02 F6 | 	mov	local01, arg01
30080     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
30084     FD 28 0A F6 | 	mov	local02, result1 wz
30088     D8 00 90 5D |  if_ne	jmp	#LR__4651
3008c     13 19 C2 FA | 	rdbyte	arg04, local01
30090     03 18 0E F2 | 	cmp	arg04, #3 wz
30094     04 26 06 A1 |  if_e	add	local01, #4
30098     13 19 C2 AA |  if_e	rdbyte	arg04, local01
3009c     04 26 86 A1 |  if_e	sub	local01, #4
300a0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
300a4     A0 00 90 5D |  if_ne	jmp	#LR__4650
300a8     34 26 06 F1 | 	add	local01, #52
300ac     13 13 02 F6 | 	mov	arg01, local01
300b0     00 14 06 F6 | 	mov	arg02, #0
300b4     09 16 C6 F9 | 	decod	arg03, #9
300b8     98 00 A0 FD | 	call	#\builtin_bytefill_
300bc     13 13 02 F6 | 	mov	arg01, local01
300c0     FE 13 06 F1 | 	add	arg01, #510
300c4     55 00 80 FF 
300c8     09 AB 58 FC | 	wrword	##43605, arg01
300cc     A9 B0 A0 FF 
300d0     13 A5 68 FC | 	wrlong	##1096897106, local01
300d4     13 13 02 F6 | 	mov	arg01, local01
300d8     E4 13 06 F1 | 	add	arg01, #484
300dc     B9 A0 B0 FF 
300e0     09 E5 68 FC | 	wrlong	##1631679090, arg01
300e4     13 13 02 F6 | 	mov	arg01, local01
300e8     E8 13 06 F1 | 	add	arg01, #488
300ec     20 26 86 F1 | 	sub	local01, #32
300f0     13 15 02 FB | 	rdlong	arg02, local01
300f4     09 15 62 FC | 	wrlong	arg02, arg01
300f8     20 26 06 F1 | 	add	local01, #32
300fc     13 13 02 F6 | 	mov	arg01, local01
30100     EC 13 06 F1 | 	add	arg01, #492
30104     24 26 86 F1 | 	sub	local01, #36
30108     13 15 02 FB | 	rdlong	arg02, local01
3010c     09 15 62 FC | 	wrlong	arg02, arg01
30110     10 26 06 F1 | 	add	local01, #16
30114     13 17 02 FB | 	rdlong	arg03, local01
30118     01 16 06 F1 | 	add	arg03, #1
3011c     10 26 06 F1 | 	add	local01, #16
30120     13 17 62 FC | 	wrlong	arg03, local01
30124     2F 26 86 F1 | 	sub	local01, #47
30128     13 13 C2 FA | 	rdbyte	arg01, local01
3012c     33 26 06 F1 | 	add	local01, #51
30130     13 15 02 F6 | 	mov	arg02, local01
30134     01 18 06 F6 | 	mov	arg04, #1
30138     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
3013c     30 26 86 F1 | 	sub	local01, #48
30140     13 01 48 FC | 	wrbyte	#0, local01
30144     04 26 86 F1 | 	sub	local01, #4
30148                 | LR__4650
30148     01 26 06 F1 | 	add	local01, #1
3014c     13 13 C2 FA | 	rdbyte	arg01, local01
30150     00 14 06 F6 | 	mov	arg02, #0
30154     00 16 06 F6 | 	mov	arg03, #0
30158     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
3015c     00 FA 0D F2 | 	cmp	result1, #0 wz
30160     01 28 06 56 |  if_ne	mov	local02, #1
30164                 | LR__4651
30164                 | ' 	}
30164                 | ' 
30164                 | ' 	return res;
30164     14 FB 01 F6 | 	mov	result1, local02
30168     A7 F0 03 F6 | 	mov	ptra, fp
3016c     B2 00 A0 FD | 	call	#popregs_
30170                 | _fatfs_cc_sync_fs_ret
30170     2D 00 64 FD | 	ret
30174                 | 
30174                 | _fatfs_cc_clst2sect
30174     02 14 86 F1 | 	sub	arg02, #2
30178     18 12 06 F1 | 	add	arg01, #24
3017c     09 01 02 FB | 	rdlong	_var01, arg01
30180     18 12 86 F1 | 	sub	arg01, #24
30184     02 00 86 F1 | 	sub	_var01, #2
30188     00 15 12 F2 | 	cmp	arg02, _var01 wc
3018c     00 FA 05 36 |  if_ae	mov	result1, #0
30190     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
30194     0A 12 06 F1 | 	add	arg01, #10
30198     09 01 E2 FA | 	rdword	_var01, arg01
3019c     0A 01 02 FD | 	qmul	_var01, arg02
301a0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
301a0     22 12 06 F1 | 	add	arg01, #34
301a4     09 FB 01 FB | 	rdlong	result1, arg01
301a8     18 00 62 FD | 	getqx	_var01
301ac     00 FB 01 F1 | 	add	result1, _var01
301b0                 | _fatfs_cc_clst2sect_ret
301b0     2D 00 64 FD | 	ret
301b4                 | 
301b4                 | _fatfs_cc_get_fat
301b4     07 4A 05 F6 | 	mov	COUNT_, #7
301b8     A8 00 A0 FD | 	call	#pushregs_
301bc     0A 27 02 F6 | 	mov	local01, arg02
301c0     09 29 02 FB | 	rdlong	local02, arg01
301c4     02 26 16 F2 | 	cmp	local01, #2 wc
301c8     14 00 90 CD |  if_b	jmp	#LR__4660
301cc     18 28 06 F1 | 	add	local02, #24
301d0     14 2B 02 FB | 	rdlong	local03, local02
301d4     18 28 86 F1 | 	sub	local02, #24
301d8     15 27 12 F2 | 	cmp	local01, local03 wc
301dc     08 00 90 CD |  if_b	jmp	#LR__4661
301e0                 | LR__4660
301e0     01 2C 06 F6 | 	mov	local04, #1
301e4     60 01 90 FD | 	jmp	#LR__4668
301e8                 | LR__4661
301e8     01 2C 66 F6 | 	neg	local04, #1
301ec                 | ' 		val = 0xFFFFFFFF;
301ec                 | ' 
301ec                 | ' 		switch (fs->fs_type) {
301ec     14 2F C2 FA | 	rdbyte	local05, local02
301f0     01 2E 86 F1 | 	sub	local05, #1
301f4     03 2E 26 F3 | 	fle	local05, #3
301f8     30 2E 62 FD | 	jmprel	local05
301fc                 | LR__4662
301fc     0C 00 90 FD | 	jmp	#LR__4663
30200     B8 00 90 FD | 	jmp	#LR__4664
30204     F8 00 90 FD | 	jmp	#LR__4665
30208     38 01 90 FD | 	jmp	#LR__4666
3020c                 | LR__4663
3020c     13 2F 02 F6 | 	mov	local05, local01
30210     13 13 02 F6 | 	mov	arg01, local01
30214     01 12 46 F0 | 	shr	arg01, #1
30218     09 2F 02 F1 | 	add	local05, arg01
3021c     14 13 02 F6 | 	mov	arg01, local02
30220     17 31 02 F6 | 	mov	local06, local05
30224     09 30 46 F0 | 	shr	local06, #9
30228     24 28 06 F1 | 	add	local02, #36
3022c     14 15 02 FB | 	rdlong	arg02, local02
30230     24 28 86 F1 | 	sub	local02, #36
30234     18 15 02 F1 | 	add	arg02, local06
30238     C0 FD BF FD | 	call	#_fatfs_cc_move_window
3023c     00 FA 0D F2 | 	cmp	result1, #0 wz
30240     04 01 90 5D |  if_ne	jmp	#LR__4667
30244     17 31 02 F6 | 	mov	local06, local05
30248     FF 31 06 F5 | 	and	local06, #511
3024c     34 28 06 F1 | 	add	local02, #52
30250     14 31 02 F1 | 	add	local06, local02
30254     18 33 C2 FA | 	rdbyte	local07, local06
30258     34 28 86 F1 | 	sub	local02, #52
3025c     14 13 02 F6 | 	mov	arg01, local02
30260     01 2E 06 F1 | 	add	local05, #1
30264     17 31 02 F6 | 	mov	local06, local05
30268     09 30 46 F0 | 	shr	local06, #9
3026c     24 28 06 F1 | 	add	local02, #36
30270     14 15 02 FB | 	rdlong	arg02, local02
30274     24 28 86 F1 | 	sub	local02, #36
30278     18 15 02 F1 | 	add	arg02, local06
3027c     7C FD BF FD | 	call	#_fatfs_cc_move_window
30280     00 FA 0D F2 | 	cmp	result1, #0 wz
30284     C0 00 90 5D |  if_ne	jmp	#LR__4667
30288     FF 2F 06 F5 | 	and	local05, #511
3028c     34 28 06 F1 | 	add	local02, #52
30290     14 2F 02 F1 | 	add	local05, local02
30294     17 31 C2 FA | 	rdbyte	local06, local05
30298     08 30 66 F0 | 	shl	local06, #8
3029c     18 33 42 F5 | 	or	local07, local06
302a0     01 26 CE F7 | 	test	local01, #1 wz
302a4     04 32 46 50 |  if_ne	shr	local07, #4
302a8     19 2B 02 56 |  if_ne	mov	local03, local07
302ac     0B 32 46 A7 |  if_e	zerox	local07, #11
302b0     19 2B 02 A6 |  if_e	mov	local03, local07
302b4     15 2D 02 F6 | 	mov	local04, local03
302b8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
302b8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
302b8                 | ' 			break;
302b8     8C 00 90 FD | 	jmp	#LR__4667
302bc                 | LR__4664
302bc     14 13 02 F6 | 	mov	arg01, local02
302c0     13 31 02 F6 | 	mov	local06, local01
302c4     08 30 46 F0 | 	shr	local06, #8
302c8     24 28 06 F1 | 	add	local02, #36
302cc     14 15 02 FB | 	rdlong	arg02, local02
302d0     24 28 86 F1 | 	sub	local02, #36
302d4     18 15 02 F1 | 	add	arg02, local06
302d8     20 FD BF FD | 	call	#_fatfs_cc_move_window
302dc     00 FA 0D F2 | 	cmp	result1, #0 wz
302e0     64 00 90 5D |  if_ne	jmp	#LR__4667
302e4     34 28 06 F1 | 	add	local02, #52
302e8     01 26 66 F0 | 	shl	local01, #1
302ec     FF 27 06 F5 | 	and	local01, #511
302f0     13 29 02 F1 | 	add	local02, local01
302f4                 | ' {
302f4                 | ' 
302f4                 | ' 	return *((WORD*)ptr);
302f4     14 FB E1 FA | 	rdword	result1, local02
302f8     FD 2C 32 F9 | 	getword	local04, result1, #0
302fc                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
302fc                 | ' 			break;
302fc     48 00 90 FD | 	jmp	#LR__4667
30300                 | LR__4665
30300     14 13 02 F6 | 	mov	arg01, local02
30304     13 31 02 F6 | 	mov	local06, local01
30308     07 30 46 F0 | 	shr	local06, #7
3030c     24 28 06 F1 | 	add	local02, #36
30310     14 15 02 FB | 	rdlong	arg02, local02
30314     24 28 86 F1 | 	sub	local02, #36
30318     18 15 02 F1 | 	add	arg02, local06
3031c     DC FC BF FD | 	call	#_fatfs_cc_move_window
30320     00 FA 0D F2 | 	cmp	result1, #0 wz
30324     20 00 90 5D |  if_ne	jmp	#LR__4667
30328     34 28 06 F1 | 	add	local02, #52
3032c     02 26 66 F0 | 	shl	local01, #2
30330     FF 27 06 F5 | 	and	local01, #511
30334     13 29 02 F1 | 	add	local02, local01
30338                 | ' {
30338                 | ' 
30338                 | ' 	return *((DWORD*)ptr);
30338     14 2D 02 FB | 	rdlong	local04, local02
3033c     7C 2C 06 F4 | 	bitl	local04, #124
30340                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
30340                 | ' 			break;
30340     04 00 90 FD | 	jmp	#LR__4667
30344                 | LR__4666
30344     01 2C 06 F6 | 	mov	local04, #1
30348                 | LR__4667
30348                 | LR__4668
30348                 | ' 			val = 1;
30348                 | ' 		}
30348                 | ' 	}
30348                 | ' 
30348                 | ' 	return val;
30348     16 FB 01 F6 | 	mov	result1, local04
3034c     A7 F0 03 F6 | 	mov	ptra, fp
30350     B2 00 A0 FD | 	call	#popregs_
30354                 | _fatfs_cc_get_fat_ret
30354     2D 00 64 FD | 	ret
30358                 | 
30358                 | _fatfs_cc_put_fat
30358     08 4A 05 F6 | 	mov	COUNT_, #8
3035c     A8 00 A0 FD | 	call	#pushregs_
30360     09 27 02 F6 | 	mov	local01, arg01
30364     0A 29 02 F6 | 	mov	local02, arg02
30368     0B 2B 02 F6 | 	mov	local03, arg03
3036c     02 2C 06 F6 | 	mov	local04, #2
30370     02 28 16 F2 | 	cmp	local02, #2 wc
30374     E0 01 90 CD |  if_b	jmp	#LR__4677
30378     18 26 06 F1 | 	add	local01, #24
3037c     13 2F 02 FB | 	rdlong	local05, local01
30380     18 26 86 F1 | 	sub	local01, #24
30384     17 29 12 F2 | 	cmp	local02, local05 wc
30388     CC 01 90 3D |  if_ae	jmp	#LR__4677
3038c                 | ' 		switch (fs->fs_type) {
3038c     13 31 C2 FA | 	rdbyte	local06, local01
30390     01 30 86 F1 | 	sub	local06, #1
30394     03 30 26 F3 | 	fle	local06, #3
30398     30 30 62 FD | 	jmprel	local06
3039c                 | LR__4670
3039c     0C 00 90 FD | 	jmp	#LR__4671
303a0     F8 00 90 FD | 	jmp	#LR__4674
303a4     40 01 90 FD | 	jmp	#LR__4675
303a8     AC 01 90 FD | 	jmp	#LR__4676
303ac                 | LR__4671
303ac     14 33 02 F6 | 	mov	local07, local02
303b0     14 2F 02 F6 | 	mov	local05, local02
303b4     01 2E 46 F0 | 	shr	local05, #1
303b8     17 33 02 F1 | 	add	local07, local05
303bc     13 13 02 F6 | 	mov	arg01, local01
303c0     19 31 02 F6 | 	mov	local06, local07
303c4     09 30 46 F0 | 	shr	local06, #9
303c8     24 26 06 F1 | 	add	local01, #36
303cc     13 15 02 FB | 	rdlong	arg02, local01
303d0     24 26 86 F1 | 	sub	local01, #36
303d4     18 15 02 F1 | 	add	arg02, local06
303d8     20 FC BF FD | 	call	#_fatfs_cc_move_window
303dc     FD 2C 0A F6 | 	mov	local04, result1 wz
303e0     74 01 90 5D |  if_ne	jmp	#LR__4676
303e4     34 26 06 F1 | 	add	local01, #52
303e8     13 35 02 F6 | 	mov	local08, local01
303ec     19 2F 02 F6 | 	mov	local05, local07
303f0     FF 2F 06 F5 | 	and	local05, #511
303f4     17 35 02 F1 | 	add	local08, local05
303f8     01 28 CE F7 | 	test	local02, #1 wz
303fc     34 26 86 F1 | 	sub	local01, #52
30400     01 32 06 F1 | 	add	local07, #1
30404     18 00 90 AD |  if_e	jmp	#LR__4672
30408     1A 2F C2 FA | 	rdbyte	local05, local08
3040c     17 2F 42 F8 | 	getnib	local05, local05, #0
30410     15 31 E2 F8 | 	getbyte	local06, local03, #0
30414     04 30 66 F0 | 	shl	local06, #4
30418     18 2F 42 F5 | 	or	local05, local06
3041c     04 00 90 FD | 	jmp	#LR__4673
30420                 | LR__4672
30420     15 2F 02 F6 | 	mov	local05, local03
30424                 | LR__4673
30424     1A 2F 42 FC | 	wrbyte	local05, local08
30428     03 26 06 F1 | 	add	local01, #3
3042c     13 03 48 FC | 	wrbyte	#1, local01
30430     03 26 86 F1 | 	sub	local01, #3
30434     13 13 02 F6 | 	mov	arg01, local01
30438     19 35 02 F6 | 	mov	local08, local07
3043c     09 34 46 F0 | 	shr	local08, #9
30440     24 26 06 F1 | 	add	local01, #36
30444     13 15 02 FB | 	rdlong	arg02, local01
30448     24 26 86 F1 | 	sub	local01, #36
3044c     1A 15 02 F1 | 	add	arg02, local08
30450     A8 FB BF FD | 	call	#_fatfs_cc_move_window
30454     FD 2C 0A F6 | 	mov	local04, result1 wz
30458     FC 00 90 5D |  if_ne	jmp	#LR__4676
3045c     34 26 06 F1 | 	add	local01, #52
30460     13 35 02 F6 | 	mov	local08, local01
30464     FF 33 06 F5 | 	and	local07, #511
30468     19 35 02 F1 | 	add	local08, local07
3046c     01 28 CE F7 | 	test	local02, #1 wz
30470     04 2A 46 50 |  if_ne	shr	local03, #4
30474     15 2F 02 56 |  if_ne	mov	local05, local03
30478     1A 2F C2 AA |  if_e	rdbyte	local05, local08
3047c     F0 2E 06 A5 |  if_e	and	local05, #240
30480     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
30484     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
30488     15 2F 42 A5 |  if_e	or	local05, local03
3048c     1A 2F 42 FC | 	wrbyte	local05, local08
30490     31 26 86 F1 | 	sub	local01, #49
30494     13 03 48 FC | 	wrbyte	#1, local01
30498                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
30498                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
30498                 | ' 			fs->wflag = 1;
30498                 | ' 			break;
30498     BC 00 90 FD | 	jmp	#LR__4676
3049c                 | LR__4674
3049c     13 13 02 F6 | 	mov	arg01, local01
304a0     14 35 02 F6 | 	mov	local08, local02
304a4     08 34 46 F0 | 	shr	local08, #8
304a8     24 26 06 F1 | 	add	local01, #36
304ac     13 15 02 FB | 	rdlong	arg02, local01
304b0     24 26 86 F1 | 	sub	local01, #36
304b4     1A 15 02 F1 | 	add	arg02, local08
304b8     40 FB BF FD | 	call	#_fatfs_cc_move_window
304bc     FD 2C 0A F6 | 	mov	local04, result1 wz
304c0     94 00 90 5D |  if_ne	jmp	#LR__4676
304c4     34 26 06 F1 | 	add	local01, #52
304c8     13 13 02 F6 | 	mov	arg01, local01
304cc     01 28 66 F0 | 	shl	local02, #1
304d0     FF 29 06 F5 | 	and	local02, #511
304d4     14 13 02 F1 | 	add	arg01, local02
304d8     09 2B 52 FC | 	wrword	local03, arg01
304dc     31 26 86 F1 | 	sub	local01, #49
304e0     13 03 48 FC | 	wrbyte	#1, local01
304e4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
304e4                 | ' 			fs->wflag = 1;
304e4                 | ' 			break;
304e4     70 00 90 FD | 	jmp	#LR__4676
304e8                 | LR__4675
304e8     13 13 02 F6 | 	mov	arg01, local01
304ec     14 35 02 F6 | 	mov	local08, local02
304f0     07 34 46 F0 | 	shr	local08, #7
304f4     24 26 06 F1 | 	add	local01, #36
304f8     13 15 02 FB | 	rdlong	arg02, local01
304fc     24 26 86 F1 | 	sub	local01, #36
30500     1A 15 02 F1 | 	add	arg02, local08
30504     F4 FA BF FD | 	call	#_fatfs_cc_move_window
30508     FD 2C 0A F6 | 	mov	local04, result1 wz
3050c     48 00 90 5D |  if_ne	jmp	#LR__4676
30510     7C 2A 06 F4 | 	bitl	local03, #124
30514     34 26 06 F1 | 	add	local01, #52
30518     14 35 02 F6 | 	mov	local08, local02
3051c     02 34 66 F0 | 	shl	local08, #2
30520     FF 35 06 F5 | 	and	local08, #511
30524     13 13 02 F6 | 	mov	arg01, local01
30528     1A 13 02 F1 | 	add	arg01, local08
3052c                 | ' {
3052c                 | ' 
3052c                 | ' 	return *((DWORD*)ptr);
3052c     09 35 02 FB | 	rdlong	local08, arg01
30530     00 00 78 FF 
30534     00 34 06 F5 | 	and	local08, ##-268435456
30538     1A 2B 42 F5 | 	or	local03, local08
3053c     13 13 02 F6 | 	mov	arg01, local01
30540     02 28 66 F0 | 	shl	local02, #2
30544     FF 29 06 F5 | 	and	local02, #511
30548     14 13 02 F1 | 	add	arg01, local02
3054c     09 2B 62 FC | 	wrlong	local03, arg01
30550     31 26 86 F1 | 	sub	local01, #49
30554     13 03 48 FC | 	wrbyte	#1, local01
30558                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
30558                 | ' 			}
30558                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
30558                 | ' 			fs->wflag = 1;
30558                 | ' 			break;
30558                 | LR__4676
30558                 | LR__4677
30558                 | ' 		}
30558                 | ' 	}
30558                 | ' 	return res;
30558     16 FB 01 F6 | 	mov	result1, local04
3055c     A7 F0 03 F6 | 	mov	ptra, fp
30560     B2 00 A0 FD | 	call	#popregs_
30564                 | _fatfs_cc_put_fat_ret
30564     2D 00 64 FD | 	ret
30568                 | 
30568                 | _fatfs_cc_remove_chain
30568     05 4A 05 F6 | 	mov	COUNT_, #5
3056c     A8 00 A0 FD | 	call	#pushregs_
30570     09 27 02 F6 | 	mov	local01, arg01
30574     0A 29 02 F6 | 	mov	local02, arg02
30578     0B 2B 02 F6 | 	mov	local03, arg03
3057c     13 2D 02 FB | 	rdlong	local04, local01
30580     02 28 16 F2 | 	cmp	local02, #2 wc
30584     14 00 90 CD |  if_b	jmp	#LR__4680
30588     18 2C 06 F1 | 	add	local04, #24
3058c     16 FB 01 FB | 	rdlong	result1, local04
30590     18 2C 86 F1 | 	sub	local04, #24
30594     FD 28 12 F2 | 	cmp	local02, result1 wc
30598     08 00 90 CD |  if_b	jmp	#LR__4681
3059c                 | LR__4680
3059c     02 FA 05 F6 | 	mov	result1, #2
305a0     CC 00 90 FD | 	jmp	#LR__4686
305a4                 | LR__4681
305a4     00 2A 0E F2 | 	cmp	local03, #0 wz
305a8     18 00 90 AD |  if_e	jmp	#LR__4682
305ac     15 15 02 F6 | 	mov	arg02, local03
305b0     16 13 02 F6 | 	mov	arg01, local04
305b4     01 16 66 F6 | 	neg	arg03, #1
305b8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
305bc     00 FA 0D F2 | 	cmp	result1, #0 wz
305c0     AC 00 90 5D |  if_ne	jmp	#LR__4686
305c4                 | LR__4682
305c4                 | ' 	}
305c4                 | ' 
305c4                 | ' 
305c4                 | ' 	do {
305c4                 | LR__4683
305c4     14 15 02 F6 | 	mov	arg02, local02
305c8     13 13 02 F6 | 	mov	arg01, local01
305cc     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
305d0     FD 2E 0A F6 | 	mov	local05, result1 wz
305d4     94 00 90 AD |  if_e	jmp	#LR__4685
305d8     01 2E 0E F2 | 	cmp	local05, #1 wz
305dc     02 FA 05 A6 |  if_e	mov	result1, #2
305e0     8C 00 90 AD |  if_e	jmp	#LR__4686
305e4     FF FF 7F FF 
305e8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
305ec     01 FA 05 A6 |  if_e	mov	result1, #1
305f0     7C 00 90 AD |  if_e	jmp	#LR__4686
305f4     14 15 02 F6 | 	mov	arg02, local02
305f8     16 13 02 F6 | 	mov	arg01, local04
305fc     00 16 06 F6 | 	mov	arg03, #0
30600     54 FD BF FD | 	call	#_fatfs_cc_put_fat
30604     FD 2A 0A F6 | 	mov	local03, result1 wz
30608     15 FB 01 56 |  if_ne	mov	result1, local03
3060c     60 00 90 5D |  if_ne	jmp	#LR__4686
30610     18 2C 06 F1 | 	add	local04, #24
30614     16 2B 02 FB | 	rdlong	local03, local04
30618     02 2A 86 F1 | 	sub	local03, #2
3061c     04 2C 86 F1 | 	sub	local04, #4
30620     16 29 02 FB | 	rdlong	local02, local04
30624     14 2C 86 F1 | 	sub	local04, #20
30628     15 29 12 F2 | 	cmp	local02, local03 wc
3062c     24 00 90 3D |  if_ae	jmp	#LR__4684
30630     14 2C 06 F1 | 	add	local04, #20
30634     16 2B 02 FB | 	rdlong	local03, local04
30638     01 2A 06 F1 | 	add	local03, #1
3063c     16 2B 62 FC | 	wrlong	local03, local04
30640     10 2C 86 F1 | 	sub	local04, #16
30644     16 2B C2 FA | 	rdbyte	local03, local04
30648     01 2A 46 F5 | 	or	local03, #1
3064c     16 2B 42 FC | 	wrbyte	local03, local04
30650     04 2C 86 F1 | 	sub	local04, #4
30654                 | LR__4684
30654     17 29 02 F6 | 	mov	local02, local05
30658     18 2C 06 F1 | 	add	local04, #24
3065c     16 2F 02 FB | 	rdlong	local05, local04
30660     18 2C 86 F1 | 	sub	local04, #24
30664     17 29 12 F2 | 	cmp	local02, local05 wc
30668     58 FF 9F CD |  if_b	jmp	#LR__4683
3066c                 | LR__4685
3066c                 | ' #line 1500 "ff.c"
3066c                 | ' 	return FR_OK;
3066c     00 FA 05 F6 | 	mov	result1, #0
30670                 | LR__4686
30670     A7 F0 03 F6 | 	mov	ptra, fp
30674     B2 00 A0 FD | 	call	#popregs_
30678                 | _fatfs_cc_remove_chain_ret
30678     2D 00 64 FD | 	ret
3067c                 | 
3067c                 | _fatfs_cc_create_chain
3067c     09 4A 05 F6 | 	mov	COUNT_, #9
30680     A8 00 A0 FD | 	call	#pushregs_
30684     09 27 02 F6 | 	mov	local01, arg01
30688     0A 29 0A F6 | 	mov	local02, arg02 wz
3068c     13 2B 02 FB | 	rdlong	local03, local01
30690     28 00 90 5D |  if_ne	jmp	#LR__4690
30694     10 2A 06 F1 | 	add	local03, #16
30698     15 2D 0A FB | 	rdlong	local04, local03 wz
3069c     10 2A 86 F1 | 	sub	local03, #16
306a0     18 2A 06 51 |  if_ne	add	local03, #24
306a4     15 2F 02 5B |  if_ne	rdlong	local05, local03
306a8     18 2A 86 51 |  if_ne	sub	local03, #24
306ac     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
306b0     50 00 90 4D |  if_c_and_nz	jmp	#LR__4691
306b4     01 2C 06 F6 | 	mov	local04, #1
306b8     48 00 90 FD | 	jmp	#LR__4691
306bc                 | LR__4690
306bc     14 15 02 F6 | 	mov	arg02, local02
306c0     13 13 02 F6 | 	mov	arg01, local01
306c4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
306c8     FD 2C 02 F6 | 	mov	local04, result1
306cc     02 2C 16 F2 | 	cmp	local04, #2 wc
306d0     01 FA 05 C6 |  if_b	mov	result1, #1
306d4     BC 01 90 CD |  if_b	jmp	#LR__4701
306d8     FF FF 7F FF 
306dc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
306e0     16 FB 01 A6 |  if_e	mov	result1, local04
306e4     AC 01 90 AD |  if_e	jmp	#LR__4701
306e8     18 2A 06 F1 | 	add	local03, #24
306ec     15 2F 02 FB | 	rdlong	local05, local03
306f0     18 2A 86 F1 | 	sub	local03, #24
306f4     17 2D 12 F2 | 	cmp	local04, local05 wc
306f8     16 FB 01 C6 |  if_b	mov	result1, local04
306fc     94 01 90 CD |  if_b	jmp	#LR__4701
30700     14 2D 02 F6 | 	mov	local04, local02
30704                 | LR__4691
30704     14 2A 06 F1 | 	add	local03, #20
30708     15 2F 0A FB | 	rdlong	local05, local03 wz
3070c     14 2A 86 F1 | 	sub	local03, #20
30710     00 FA 05 A6 |  if_e	mov	result1, #0
30714     7C 01 90 AD |  if_e	jmp	#LR__4701
30718     00 30 06 F6 | 	mov	local06, #0
3071c     14 2D 0A F2 | 	cmp	local04, local02 wz
30720     74 00 90 5D |  if_ne	jmp	#LR__4694
30724     16 31 02 F6 | 	mov	local06, local04
30728     01 30 06 F1 | 	add	local06, #1
3072c     18 2A 06 F1 | 	add	local03, #24
30730     15 2F 02 FB | 	rdlong	local05, local03
30734     18 2A 86 F1 | 	sub	local03, #24
30738     17 31 12 F2 | 	cmp	local06, local05 wc
3073c     02 30 06 36 |  if_ae	mov	local06, #2
30740     18 15 02 F6 | 	mov	arg02, local06
30744     13 13 02 F6 | 	mov	arg01, local01
30748     68 FA BF FD | 	call	#_fatfs_cc_get_fat
3074c     FD 2E 02 F6 | 	mov	local05, result1
30750     01 2E 0E F2 | 	cmp	local05, #1 wz
30754     FF FF 7F 5F 
30758     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
3075c     17 FB 01 A6 |  if_e	mov	result1, local05
30760     30 01 90 AD |  if_e	jmp	#LR__4701
30764     00 2E 0E F2 | 	cmp	local05, #0 wz
30768     2C 00 90 AD |  if_e	jmp	#LR__4693
3076c     10 2A 06 F1 | 	add	local03, #16
30770     15 33 02 FB | 	rdlong	local07, local03
30774     10 2A 86 F1 | 	sub	local03, #16
30778     02 32 16 F2 | 	cmp	local07, #2 wc
3077c     14 00 90 CD |  if_b	jmp	#LR__4692
30780     18 2A 06 F1 | 	add	local03, #24
30784     15 2F 02 FB | 	rdlong	local05, local03
30788     18 2A 86 F1 | 	sub	local03, #24
3078c     17 33 12 F2 | 	cmp	local07, local05 wc
30790     19 2D 02 C6 |  if_b	mov	local04, local07
30794                 | LR__4692
30794     00 30 06 F6 | 	mov	local06, #0
30798                 | LR__4693
30798                 | LR__4694
30798     00 30 0E F2 | 	cmp	local06, #0 wz
3079c     60 00 90 5D |  if_ne	jmp	#LR__4697
307a0     16 31 02 F6 | 	mov	local06, local04
307a4                 | ' 			ncl = scl;
307a4                 | ' 			for (;;) {
307a4                 | LR__4695
307a4     01 30 06 F1 | 	add	local06, #1
307a8     18 2A 06 F1 | 	add	local03, #24
307ac     15 2F 02 FB | 	rdlong	local05, local03
307b0     18 2A 86 F1 | 	sub	local03, #24
307b4     17 31 12 F2 | 	cmp	local06, local05 wc
307b8     02 30 06 36 |  if_ae	mov	local06, #2
307bc     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
307c0     00 FA 05 16 |  if_a	mov	result1, #0
307c4     CC 00 90 1D |  if_a	jmp	#LR__4701
307c8     18 15 02 F6 | 	mov	arg02, local06
307cc     13 13 02 F6 | 	mov	arg01, local01
307d0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
307d4     FD 32 0A F6 | 	mov	local07, result1 wz
307d8     24 00 90 AD |  if_e	jmp	#LR__4696
307dc     01 32 0E F2 | 	cmp	local07, #1 wz
307e0     FF FF 7F 5F 
307e4     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
307e8     19 FB 01 A6 |  if_e	mov	result1, local07
307ec     A4 00 90 AD |  if_e	jmp	#LR__4701
307f0     16 31 0A F2 | 	cmp	local06, local04 wz
307f4     00 FA 05 A6 |  if_e	mov	result1, #0
307f8     98 00 90 AD |  if_e	jmp	#LR__4701
307fc     A4 FF 9F FD | 	jmp	#LR__4695
30800                 | LR__4696
30800                 | LR__4697
30800     15 13 02 F6 | 	mov	arg01, local03
30804     18 15 02 F6 | 	mov	arg02, local06
30808     01 16 66 F6 | 	neg	arg03, #1
3080c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
30810     FD 34 0A F6 | 	mov	local08, result1 wz
30814     1C 00 90 5D |  if_ne	jmp	#LR__4698
30818     00 28 0E F2 | 	cmp	local02, #0 wz
3081c     14 00 90 AD |  if_e	jmp	#LR__4698
30820     15 13 02 F6 | 	mov	arg01, local03
30824     14 15 02 F6 | 	mov	arg02, local02
30828     18 17 02 F6 | 	mov	arg03, local06
3082c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
30830     FD 34 02 F6 | 	mov	local08, result1
30834                 | LR__4698
30834     00 34 0E F2 | 	cmp	local08, #0 wz
30838     4C 00 90 5D |  if_ne	jmp	#LR__4699
3083c     10 2A 06 F1 | 	add	local03, #16
30840     15 31 62 FC | 	wrlong	local06, local03
30844     08 2A 06 F1 | 	add	local03, #8
30848     15 2F 02 FB | 	rdlong	local05, local03
3084c     02 2E 86 F1 | 	sub	local05, #2
30850     04 2A 86 F1 | 	sub	local03, #4
30854     15 37 02 FB | 	rdlong	local09, local03
30858     14 2A 86 F1 | 	sub	local03, #20
3085c     17 37 1A F2 | 	cmp	local09, local05 wcz
30860     14 2A 06 E1 |  if_be	add	local03, #20
30864     15 37 02 EB |  if_be	rdlong	local09, local03
30868     01 36 86 E1 |  if_be	sub	local09, #1
3086c     15 37 62 EC |  if_be	wrlong	local09, local03
30870     14 2A 86 E1 |  if_be	sub	local03, #20
30874     04 2A 06 F1 | 	add	local03, #4
30878     15 2F C2 FA | 	rdbyte	local05, local03
3087c     01 2E 46 F5 | 	or	local05, #1
30880     15 2F 42 FC | 	wrbyte	local05, local03
30884     08 00 90 FD | 	jmp	#LR__4700
30888                 | LR__4699
30888     01 34 0E F2 | 	cmp	local08, #1 wz
3088c     01 30 C6 F6 | 	negz	local06, #1
30890                 | LR__4700
30890                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
30890                 | ' 	}
30890                 | ' 
30890                 | ' 	return ncl;
30890     18 FB 01 F6 | 	mov	result1, local06
30894                 | LR__4701
30894     A7 F0 03 F6 | 	mov	ptra, fp
30898     B2 00 A0 FD | 	call	#popregs_
3089c                 | _fatfs_cc_create_chain_ret
3089c     2D 00 64 FD | 	ret
308a0                 | 
308a0                 | _fatfs_cc_dir_clear
308a0     06 4A 05 F6 | 	mov	COUNT_, #6
308a4     A8 00 A0 FD | 	call	#pushregs_
308a8     09 27 02 F6 | 	mov	local01, arg01
308ac     0A 29 02 F6 | 	mov	local02, arg02
308b0     13 13 02 F6 | 	mov	arg01, local01
308b4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
308b8     00 FA 0D F2 | 	cmp	result1, #0 wz
308bc     01 FA 05 56 |  if_ne	mov	result1, #1
308c0     90 00 90 5D |  if_ne	jmp	#LR__4712
308c4     13 13 02 F6 | 	mov	arg01, local01
308c8     14 15 02 F6 | 	mov	arg02, local02
308cc     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
308d0     FD 2A 02 F6 | 	mov	local03, result1
308d4     30 26 06 F1 | 	add	local01, #48
308d8     13 2B 62 FC | 	wrlong	local03, local01
308dc     04 26 06 F1 | 	add	local01, #4
308e0     13 13 02 F6 | 	mov	arg01, local01
308e4     00 14 06 F6 | 	mov	arg02, #0
308e8     09 16 C6 F9 | 	decod	arg03, #9
308ec     98 00 A0 FD | 	call	#\builtin_bytefill_
308f0     13 2D 02 F6 | 	mov	local04, local01
308f4                 | ' #line 1667 "ff.c"
308f4                 | ' 	{
308f4                 | ' 		ibuf = fs->win; szb = 1;
308f4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
308f4     00 2E 06 F6 | 	mov	local05, #0
308f8     34 26 86 F1 | 	sub	local01, #52
308fc                 | LR__4710
308fc     0A 26 06 F1 | 	add	local01, #10
30900     13 31 E2 FA | 	rdword	local06, local01
30904     0A 26 86 F1 | 	sub	local01, #10
30908     18 2F 12 F2 | 	cmp	local05, local06 wc
3090c     2C 00 90 3D |  if_ae	jmp	#LR__4711
30910     01 26 06 F1 | 	add	local01, #1
30914     13 13 C2 FA | 	rdbyte	arg01, local01
30918     01 26 86 F1 | 	sub	local01, #1
3091c     16 15 02 F6 | 	mov	arg02, local04
30920     15 17 02 F6 | 	mov	arg03, local03
30924     17 17 02 F1 | 	add	arg03, local05
30928     01 18 06 F6 | 	mov	arg04, #1
3092c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
30930     00 FA 0D F2 | 	cmp	result1, #0 wz
30934     01 2E 06 A1 |  if_e	add	local05, #1
30938     C0 FF 9F AD |  if_e	jmp	#LR__4710
3093c                 | LR__4711
3093c                 | ' 	}
3093c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
3093c     0A 26 06 F1 | 	add	local01, #10
30940     13 2D E2 FA | 	rdword	local04, local01
30944     16 2F 0A F2 | 	cmp	local05, local04 wz
30948     00 30 06 A6 |  if_e	mov	local06, #0
3094c     01 30 06 56 |  if_ne	mov	local06, #1
30950     18 FB 01 F6 | 	mov	result1, local06
30954                 | LR__4712
30954     A7 F0 03 F6 | 	mov	ptra, fp
30958     B2 00 A0 FD | 	call	#popregs_
3095c                 | _fatfs_cc_dir_clear_ret
3095c     2D 00 64 FD | 	ret
30960                 | 
30960                 | _fatfs_cc_dir_sdi
30960     06 4A 05 F6 | 	mov	COUNT_, #6
30964     A8 00 A0 FD | 	call	#pushregs_
30968     09 27 02 F6 | 	mov	local01, arg01
3096c     0A 29 02 F6 | 	mov	local02, arg02
30970     13 2B 02 FB | 	rdlong	local03, local01
30974     00 10 00 FF 
30978     00 28 16 F2 | 	cmp	local02, ##2097152 wc
3097c     1F 28 CE C7 |  if_b	test	local02, #31 wz
30980                 | ' 		return FR_INT_ERR;
30980     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
30984     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4726
30988     10 26 06 F1 | 	add	local01, #16
3098c     13 29 62 FC | 	wrlong	local02, local01
30990     08 26 86 F1 | 	sub	local01, #8
30994     13 2D 0A FB | 	rdlong	local04, local01 wz
30998     08 26 86 F1 | 	sub	local01, #8
3099c     15 2F C2 AA |  if_e	rdbyte	local05, local03
309a0     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
309a4     28 2A 06 21 |  if_nc_and_z	add	local03, #40
309a8     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
309ac     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
309b0     00 2C 0E F2 | 	cmp	local04, #0 wz
309b4     3C 00 90 5D |  if_ne	jmp	#LR__4720
309b8     14 2F 02 F6 | 	mov	local05, local02
309bc     05 2E 46 F0 | 	shr	local05, #5
309c0     08 2A 06 F1 | 	add	local03, #8
309c4     15 15 E2 FA | 	rdword	arg02, local03
309c8     08 2A 86 F1 | 	sub	local03, #8
309cc     0A 2F 12 F2 | 	cmp	local05, arg02 wc
309d0     02 FA 05 36 |  if_ae	mov	result1, #2
309d4     E4 00 90 3D |  if_ae	jmp	#LR__4726
309d8     28 2A 06 F1 | 	add	local03, #40
309dc     15 2F 02 FB | 	rdlong	local05, local03
309e0     28 2A 86 F1 | 	sub	local03, #40
309e4     18 26 06 F1 | 	add	local01, #24
309e8     13 2F 62 FC | 	wrlong	local05, local01
309ec     18 26 86 F1 | 	sub	local01, #24
309f0     7C 00 90 FD | 	jmp	#LR__4725
309f4                 | LR__4720
309f4     0A 2A 06 F1 | 	add	local03, #10
309f8     15 31 E2 FA | 	rdword	local06, local03
309fc     0A 2A 86 F1 | 	sub	local03, #10
30a00     09 30 66 F0 | 	shl	local06, #9
30a04                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
30a04                 | ' 		while (ofs >= csz) {
30a04                 | LR__4721
30a04     18 29 12 F2 | 	cmp	local02, local06 wc
30a08     4C 00 90 CD |  if_b	jmp	#LR__4724
30a0c     13 13 02 F6 | 	mov	arg01, local01
30a10     16 15 02 F6 | 	mov	arg02, local04
30a14     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
30a18     FD 2C 02 F6 | 	mov	local04, result1
30a1c     FF FF 7F FF 
30a20     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30a24     01 FA 05 A6 |  if_e	mov	result1, #1
30a28     90 00 90 AD |  if_e	jmp	#LR__4726
30a2c     02 2C 16 F2 | 	cmp	local04, #2 wc
30a30     14 00 90 CD |  if_b	jmp	#LR__4722
30a34     18 2A 06 F1 | 	add	local03, #24
30a38     15 2F 02 FB | 	rdlong	local05, local03
30a3c     18 2A 86 F1 | 	sub	local03, #24
30a40     17 2D 12 F2 | 	cmp	local04, local05 wc
30a44     08 00 90 CD |  if_b	jmp	#LR__4723
30a48                 | LR__4722
30a48     02 FA 05 F6 | 	mov	result1, #2
30a4c     6C 00 90 FD | 	jmp	#LR__4726
30a50                 | LR__4723
30a50     18 29 82 F1 | 	sub	local02, local06
30a54     AC FF 9F FD | 	jmp	#LR__4721
30a58                 | LR__4724
30a58     15 13 02 F6 | 	mov	arg01, local03
30a5c     16 15 02 F6 | 	mov	arg02, local04
30a60     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
30a64     18 26 06 F1 | 	add	local01, #24
30a68     13 FB 61 FC | 	wrlong	result1, local01
30a6c     18 26 86 F1 | 	sub	local01, #24
30a70                 | LR__4725
30a70     14 26 06 F1 | 	add	local01, #20
30a74     13 2D 62 FC | 	wrlong	local04, local01
30a78     04 26 06 F1 | 	add	local01, #4
30a7c     13 2F 0A FB | 	rdlong	local05, local01 wz
30a80     18 26 86 F1 | 	sub	local01, #24
30a84     02 FA 05 A6 |  if_e	mov	result1, #2
30a88     30 00 90 AD |  if_e	jmp	#LR__4726
30a8c     14 31 02 F6 | 	mov	local06, local02
30a90     09 30 46 F0 | 	shr	local06, #9
30a94     18 26 06 F1 | 	add	local01, #24
30a98     13 2F 02 FB | 	rdlong	local05, local01
30a9c     18 2F 02 F1 | 	add	local05, local06
30aa0     13 2F 62 FC | 	wrlong	local05, local01
30aa4     34 2A 06 F1 | 	add	local03, #52
30aa8     FF 29 06 F5 | 	and	local02, #511
30aac     14 2B 02 F1 | 	add	local03, local02
30ab0     04 26 06 F1 | 	add	local01, #4
30ab4     13 2B 62 FC | 	wrlong	local03, local01
30ab8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
30ab8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
30ab8                 | ' 
30ab8                 | ' 	return FR_OK;
30ab8     00 FA 05 F6 | 	mov	result1, #0
30abc                 | LR__4726
30abc     A7 F0 03 F6 | 	mov	ptra, fp
30ac0     B2 00 A0 FD | 	call	#popregs_
30ac4                 | _fatfs_cc_dir_sdi_ret
30ac4     2D 00 64 FD | 	ret
30ac8                 | 
30ac8                 | _fatfs_cc_dir_next
30ac8     05 4A 05 F6 | 	mov	COUNT_, #5
30acc     A8 00 A0 FD | 	call	#pushregs_
30ad0     09 27 02 F6 | 	mov	local01, arg01
30ad4     0A 29 02 F6 | 	mov	local02, arg02
30ad8     13 2B 02 FB | 	rdlong	local03, local01
30adc     10 26 06 F1 | 	add	local01, #16
30ae0     13 2D 02 FB | 	rdlong	local04, local01
30ae4     10 26 86 F1 | 	sub	local01, #16
30ae8     20 2C 06 F1 | 	add	local04, #32
30aec     00 10 00 FF 
30af0     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
30af4     18 26 06 31 |  if_ae	add	local01, #24
30af8     13 01 68 3C |  if_ae	wrlong	#0, local01
30afc     18 26 86 31 |  if_ae	sub	local01, #24
30b00     18 26 06 F1 | 	add	local01, #24
30b04     13 15 0A FB | 	rdlong	arg02, local01 wz
30b08     18 26 86 F1 | 	sub	local01, #24
30b0c     04 FA 05 A6 |  if_e	mov	result1, #4
30b10     64 01 90 AD |  if_e	jmp	#LR__4735
30b14     FF 2D CE F7 | 	test	local04, #511 wz
30b18     3C 01 90 5D |  if_ne	jmp	#LR__4734
30b1c     18 26 06 F1 | 	add	local01, #24
30b20     13 15 02 FB | 	rdlong	arg02, local01
30b24     01 14 06 F1 | 	add	arg02, #1
30b28     13 15 62 FC | 	wrlong	arg02, local01
30b2c     04 26 86 F1 | 	sub	local01, #4
30b30     13 15 0A FB | 	rdlong	arg02, local01 wz
30b34     14 26 86 F1 | 	sub	local01, #20
30b38     2C 00 90 5D |  if_ne	jmp	#LR__4730
30b3c     16 15 02 F6 | 	mov	arg02, local04
30b40     05 14 46 F0 | 	shr	arg02, #5
30b44     08 2A 06 F1 | 	add	local03, #8
30b48     15 29 E2 FA | 	rdword	local02, local03
30b4c     08 2A 86 F1 | 	sub	local03, #8
30b50     14 15 12 F2 | 	cmp	arg02, local02 wc
30b54     18 26 06 31 |  if_ae	add	local01, #24
30b58     13 01 68 3C |  if_ae	wrlong	#0, local01
30b5c                 | ' 				dp->sect = 0; return FR_NO_FILE;
30b5c     04 FA 05 36 |  if_ae	mov	result1, #4
30b60     14 01 90 3D |  if_ae	jmp	#LR__4735
30b64     F0 00 90 FD | 	jmp	#LR__4733
30b68                 | LR__4730
30b68     16 13 02 F6 | 	mov	arg01, local04
30b6c     09 12 46 F0 | 	shr	arg01, #9
30b70     0A 2A 06 F1 | 	add	local03, #10
30b74     15 15 E2 FA | 	rdword	arg02, local03
30b78     0A 2A 86 F1 | 	sub	local03, #10
30b7c     01 14 86 F1 | 	sub	arg02, #1
30b80     0A 13 CA F7 | 	test	arg01, arg02 wz
30b84     D0 00 90 5D |  if_ne	jmp	#LR__4732
30b88     13 13 02 F6 | 	mov	arg01, local01
30b8c     14 26 06 F1 | 	add	local01, #20
30b90     13 15 02 FB | 	rdlong	arg02, local01
30b94     14 26 86 F1 | 	sub	local01, #20
30b98     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
30b9c     FD 2E 02 F6 | 	mov	local05, result1
30ba0     02 2E 16 F2 | 	cmp	local05, #2 wc
30ba4     02 FA 05 C6 |  if_b	mov	result1, #2
30ba8     CC 00 90 CD |  if_b	jmp	#LR__4735
30bac     FF FF 7F FF 
30bb0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
30bb4     01 FA 05 A6 |  if_e	mov	result1, #1
30bb8     BC 00 90 AD |  if_e	jmp	#LR__4735
30bbc     18 2A 06 F1 | 	add	local03, #24
30bc0     15 15 02 FB | 	rdlong	arg02, local03
30bc4     18 2A 86 F1 | 	sub	local03, #24
30bc8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
30bcc     68 00 90 CD |  if_b	jmp	#LR__4731
30bd0     00 28 0E F2 | 	cmp	local02, #0 wz
30bd4     18 26 06 A1 |  if_e	add	local01, #24
30bd8     13 01 68 AC |  if_e	wrlong	#0, local01
30bdc                 | ' 						dp->sect = 0; return FR_NO_FILE;
30bdc     04 FA 05 A6 |  if_e	mov	result1, #4
30be0     94 00 90 AD |  if_e	jmp	#LR__4735
30be4     13 13 02 F6 | 	mov	arg01, local01
30be8     14 26 06 F1 | 	add	local01, #20
30bec     13 15 02 FB | 	rdlong	arg02, local01
30bf0     14 26 86 F1 | 	sub	local01, #20
30bf4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
30bf8     FD 2E 0A F6 | 	mov	local05, result1 wz
30bfc     07 FA 05 A6 |  if_e	mov	result1, #7
30c00     74 00 90 AD |  if_e	jmp	#LR__4735
30c04     01 2E 0E F2 | 	cmp	local05, #1 wz
30c08     02 FA 05 A6 |  if_e	mov	result1, #2
30c0c     68 00 90 AD |  if_e	jmp	#LR__4735
30c10     FF FF 7F FF 
30c14     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
30c18     01 FA 05 A6 |  if_e	mov	result1, #1
30c1c     58 00 90 AD |  if_e	jmp	#LR__4735
30c20     17 15 02 F6 | 	mov	arg02, local05
30c24     15 13 02 F6 | 	mov	arg01, local03
30c28     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
30c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
30c30     01 FA 05 56 |  if_ne	mov	result1, #1
30c34     40 00 90 5D |  if_ne	jmp	#LR__4735
30c38                 | LR__4731
30c38     14 26 06 F1 | 	add	local01, #20
30c3c     13 2F 62 FC | 	wrlong	local05, local01
30c40     15 13 02 F6 | 	mov	arg01, local03
30c44     17 15 02 F6 | 	mov	arg02, local05
30c48     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
30c4c     04 26 06 F1 | 	add	local01, #4
30c50     13 FB 61 FC | 	wrlong	result1, local01
30c54     18 26 86 F1 | 	sub	local01, #24
30c58                 | LR__4732
30c58                 | LR__4733
30c58                 | LR__4734
30c58     10 26 06 F1 | 	add	local01, #16
30c5c     13 2D 62 FC | 	wrlong	local04, local01
30c60     34 2A 06 F1 | 	add	local03, #52
30c64     FF 2D 06 F5 | 	and	local04, #511
30c68     16 2B 02 F1 | 	add	local03, local04
30c6c     0C 26 06 F1 | 	add	local01, #12
30c70     13 2B 62 FC | 	wrlong	local03, local01
30c74                 | ' #line 1771 "ff.c"
30c74                 | ' 				}
30c74                 | ' 				dp->clust = clst;
30c74                 | ' 				dp->sect = clst2sect(fs, clst);
30c74                 | ' 			}
30c74                 | ' 		}
30c74                 | ' 	}
30c74                 | ' 	dp->dptr = ofs;
30c74                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
30c74                 | ' 
30c74                 | ' 	return FR_OK;
30c74     00 FA 05 F6 | 	mov	result1, #0
30c78                 | LR__4735
30c78     A7 F0 03 F6 | 	mov	ptra, fp
30c7c     B2 00 A0 FD | 	call	#popregs_
30c80                 | _fatfs_cc_dir_next_ret
30c80     2D 00 64 FD | 	ret
30c84                 | 
30c84                 | _fatfs_cc_dir_alloc
30c84     08 4A 05 F6 | 	mov	COUNT_, #8
30c88     A8 00 A0 FD | 	call	#pushregs_
30c8c     09 27 02 F6 | 	mov	local01, arg01
30c90     0A 29 02 F6 | 	mov	local02, arg02
30c94     13 2B 02 FB | 	rdlong	local03, local01
30c98     13 13 02 F6 | 	mov	arg01, local01
30c9c     00 14 06 F6 | 	mov	arg02, #0
30ca0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
30ca4     FD 2C 0A F6 | 	mov	local04, result1 wz
30ca8     70 00 90 5D |  if_ne	jmp	#LR__4744
30cac     00 2E 06 F6 | 	mov	local05, #0
30cb0                 | ' 		n = 0;
30cb0                 | ' 		do {
30cb0                 | LR__4740
30cb0     18 26 06 F1 | 	add	local01, #24
30cb4     13 15 02 FB | 	rdlong	arg02, local01
30cb8     18 26 86 F1 | 	sub	local01, #24
30cbc     15 13 02 F6 | 	mov	arg01, local03
30cc0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
30cc4     FD 2C 0A F6 | 	mov	local04, result1 wz
30cc8     50 00 90 5D |  if_ne	jmp	#LR__4743
30ccc     1C 26 06 F1 | 	add	local01, #28
30cd0     13 31 02 FB | 	rdlong	local06, local01
30cd4     1C 26 86 F1 | 	sub	local01, #28
30cd8     18 31 C2 FA | 	rdbyte	local06, local06
30cdc     E5 30 0E F2 | 	cmp	local06, #229 wz
30ce0     1C 26 06 51 |  if_ne	add	local01, #28
30ce4     13 33 02 5B |  if_ne	rdlong	local07, local01
30ce8     1C 26 86 51 |  if_ne	sub	local01, #28
30cec     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
30cf0     10 00 90 5D |  if_ne	jmp	#LR__4741
30cf4     01 2E 06 F1 | 	add	local05, #1
30cf8     14 2F 0A F2 | 	cmp	local05, local02 wz
30cfc     1C 00 90 AD |  if_e	jmp	#LR__4743
30d00     04 00 90 FD | 	jmp	#LR__4742
30d04                 | LR__4741
30d04     00 2E 06 F6 | 	mov	local05, #0
30d08                 | LR__4742
30d08     13 13 02 F6 | 	mov	arg01, local01
30d0c     01 14 06 F6 | 	mov	arg02, #1
30d10     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
30d14     FD 2C 0A F6 | 	mov	local04, result1 wz
30d18     94 FF 9F AD |  if_e	jmp	#LR__4740
30d1c                 | LR__4743
30d1c                 | LR__4744
30d1c     04 2C 0E F2 | 	cmp	local04, #4 wz
30d20     07 2C 06 A6 |  if_e	mov	local04, #7
30d24                 | ' 	return res;
30d24     16 FB 01 F6 | 	mov	result1, local04
30d28     A7 F0 03 F6 | 	mov	ptra, fp
30d2c     B2 00 A0 FD | 	call	#popregs_
30d30                 | _fatfs_cc_dir_alloc_ret
30d30     2D 00 64 FD | 	ret
30d34                 | 
30d34                 | _fatfs_cc_ld_clust
30d34     09 01 02 F6 | 	mov	_var01, arg01
30d38     0A 13 02 F6 | 	mov	arg01, arg02
30d3c     1A 12 06 F1 | 	add	arg01, #26
30d40                 | ' {
30d40                 | ' 
30d40                 | ' 	return *((WORD*)ptr);
30d40     09 FB E1 FA | 	rdword	result1, arg01
30d44     FD 12 32 F9 | 	getword	arg01, result1, #0
30d48     00 01 C2 FA | 	rdbyte	_var01, _var01
30d4c     03 00 0E F2 | 	cmp	_var01, #3 wz
30d50     14 14 06 A1 |  if_e	add	arg02, #20
30d54                 | ' {
30d54                 | ' 
30d54                 | ' 	return *((WORD*)ptr);
30d54     0A FB E1 AA |  if_e	rdword	result1, arg02
30d58     10 FA 65 A0 |  if_e	shl	result1, #16
30d5c     FD 12 42 A5 |  if_e	or	arg01, result1
30d60                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
30d60                 | ' 	}
30d60                 | ' 
30d60                 | ' 	return cl;
30d60     09 FB 01 F6 | 	mov	result1, arg01
30d64                 | _fatfs_cc_ld_clust_ret
30d64     2D 00 64 FD | 	ret
30d68                 | 
30d68                 | _fatfs_cc_st_clust
30d68     09 01 02 F6 | 	mov	_var01, arg01
30d6c     0A 13 02 F6 | 	mov	arg01, arg02
30d70     1A 12 06 F1 | 	add	arg01, #26
30d74     09 17 52 FC | 	wrword	arg03, arg01
30d78     00 01 C2 FA | 	rdbyte	_var01, _var01
30d7c     03 00 0E F2 | 	cmp	_var01, #3 wz
30d80     14 14 06 A1 |  if_e	add	arg02, #20
30d84     10 16 46 A0 |  if_e	shr	arg03, #16
30d88     0A 17 52 AC |  if_e	wrword	arg03, arg02
30d8c                 | _fatfs_cc_st_clust_ret
30d8c     2D 00 64 FD | 	ret
30d90                 | 
30d90                 | _fatfs_cc_cmp_lfn
30d90     07 4A 05 F6 | 	mov	COUNT_, #7
30d94     A8 00 A0 FD | 	call	#pushregs_
30d98     09 27 02 F6 | 	mov	local01, arg01
30d9c     0A 13 02 F6 | 	mov	arg01, arg02
30da0     1A 12 06 F1 | 	add	arg01, #26
30da4                 | ' {
30da4                 | ' 
30da4                 | ' 	return *((WORD*)ptr);
30da4     09 FB E9 FA | 	rdword	result1, arg01 wz
30da8     00 FA 05 56 |  if_ne	mov	result1, #0
30dac     E0 00 90 5D |  if_ne	jmp	#LR__4756
30db0     0A 29 C2 FA | 	rdbyte	local02, arg02
30db4     3F 28 06 F5 | 	and	local02, #63
30db8     01 28 86 F1 | 	sub	local02, #1
30dbc     0D 28 06 FD | 	qmul	local02, #13
30dc0                 | ' 
30dc0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
30dc0                 | ' 
30dc0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
30dc0     01 2A 06 F6 | 	mov	local03, #1
30dc4     00 2C 06 F6 | 	mov	local04, #0
30dc8     18 2E 62 FD | 	getqx	local05
30dcc                 | LR__4750
30dcc     0D 2C 16 F2 | 	cmp	local04, #13 wc
30dd0     9C 00 90 3D |  if_ae	jmp	#LR__4755
30dd4     0A 13 02 F6 | 	mov	arg01, arg02
30dd8     16 29 02 F6 | 	mov	local02, local04
30ddc     01 00 00 FF 
30de0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30de4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30de8     14 29 C2 FA | 	rdbyte	local02, local02
30dec     01 28 06 FA | 	mul	local02, #1
30df0     14 13 02 F1 | 	add	arg01, local02
30df4     01 00 00 FF 
30df8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30dfc                 | ' {
30dfc                 | ' 
30dfc                 | ' 	return *((WORD*)ptr);
30dfc     09 FB E1 FA | 	rdword	result1, arg01
30e00     FD 30 02 F6 | 	mov	local06, result1
30e04     15 29 02 F6 | 	mov	local02, local03
30e08     0F 28 4E F7 | 	zerox	local02, #15 wz
30e0c     44 00 90 AD |  if_e	jmp	#LR__4753
30e10     00 2F 16 F2 | 	cmp	local05, #256 wc
30e14     2C 00 90 3D |  if_ae	jmp	#LR__4751
30e18     18 13 32 F9 | 	getword	arg01, local06, #0
30e1c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
30e20     FD 28 02 F6 | 	mov	local02, result1
30e24     17 2B 02 F6 | 	mov	local03, local05
30e28     01 2A 66 F0 | 	shl	local03, #1
30e2c     13 2B 02 F1 | 	add	local03, local01
30e30     15 13 E2 FA | 	rdword	arg01, local03
30e34     01 2E 06 F1 | 	add	local05, #1
30e38     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
30e3c     FD 28 0A F2 | 	cmp	local02, result1 wz
30e40     08 00 90 AD |  if_e	jmp	#LR__4752
30e44                 | LR__4751
30e44                 | ' 				return 0;
30e44     00 FA 05 F6 | 	mov	result1, #0
30e48     44 00 90 FD | 	jmp	#LR__4756
30e4c                 | LR__4752
30e4c     18 2B 02 F6 | 	mov	local03, local06
30e50     14 00 90 FD | 	jmp	#LR__4754
30e54                 | LR__4753
30e54     18 31 32 F9 | 	getword	local06, local06, #0
30e58     7F 00 00 FF 
30e5c     FF 31 0E F2 | 	cmp	local06, ##65535 wz
30e60     00 FA 05 56 |  if_ne	mov	result1, #0
30e64     28 00 90 5D |  if_ne	jmp	#LR__4756
30e68                 | LR__4754
30e68     01 2C 06 F1 | 	add	local04, #1
30e6c     5C FF 9F FD | 	jmp	#LR__4750
30e70                 | LR__4755
30e70     0A 29 C2 FA | 	rdbyte	local02, arg02
30e74     40 28 CE F7 | 	test	local02, #64 wz
30e78     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
30e7c     01 2E 66 50 |  if_ne	shl	local05, #1
30e80     13 2F 02 51 |  if_ne	add	local05, local01
30e84     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
30e88     00 FA 05 56 |  if_ne	mov	result1, #0
30e8c                 | ' 
30e8c                 | ' 	return 1;
30e8c     01 FA 05 A6 |  if_e	mov	result1, #1
30e90                 | LR__4756
30e90     A7 F0 03 F6 | 	mov	ptra, fp
30e94     B2 00 A0 FD | 	call	#popregs_
30e98                 | _fatfs_cc_cmp_lfn_ret
30e98     2D 00 64 FD | 	ret
30e9c                 | 
30e9c                 | _fatfs_cc_pick_lfn
30e9c     09 01 02 F6 | 	mov	_var01, arg01
30ea0     0A 13 02 F6 | 	mov	arg01, arg02
30ea4     1A 12 06 F1 | 	add	arg01, #26
30ea8                 | ' {
30ea8                 | ' 
30ea8                 | ' 	return *((WORD*)ptr);
30ea8     09 FB E9 FA | 	rdword	result1, arg01 wz
30eac     00 FA 05 56 |  if_ne	mov	result1, #0
30eb0     D4 00 90 5D |  if_ne	jmp	#LR__4765
30eb4     0A 03 C2 FA | 	rdbyte	_var02, arg02
30eb8     40 02 26 F5 | 	andn	_var02, #64
30ebc     01 02 86 F1 | 	sub	_var02, #1
30ec0     0D 02 06 FD | 	qmul	_var02, #13
30ec4                 | ' 
30ec4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
30ec4                 | ' 
30ec4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
30ec4     01 04 06 F6 | 	mov	_var03, #1
30ec8     00 06 06 F6 | 	mov	_var04, #0
30ecc     18 08 62 FD | 	getqx	_var05
30ed0                 | LR__4760
30ed0     0D 06 16 F2 | 	cmp	_var04, #13 wc
30ed4     80 00 90 3D |  if_ae	jmp	#LR__4763
30ed8     0A 13 02 F6 | 	mov	arg01, arg02
30edc     03 03 02 F6 | 	mov	_var02, _var04
30ee0     01 00 00 FF 
30ee4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30ee8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
30eec     01 03 C2 FA | 	rdbyte	_var02, _var02
30ef0     01 02 06 FA | 	mul	_var02, #1
30ef4     01 13 02 F1 | 	add	arg01, _var02
30ef8     01 00 00 FF 
30efc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30f00                 | ' {
30f00                 | ' 
30f00                 | ' 	return *((WORD*)ptr);
30f00     09 FB E1 FA | 	rdword	result1, arg01
30f04     FD 0A 02 F6 | 	mov	_var06, result1
30f08     02 03 02 F6 | 	mov	_var02, _var03
30f0c     0F 02 4E F7 | 	zerox	_var02, #15 wz
30f10     28 00 90 AD |  if_e	jmp	#LR__4761
30f14     00 09 16 F2 | 	cmp	_var05, #256 wc
30f18     00 FA 05 36 |  if_ae	mov	result1, #0
30f1c     68 00 90 3D |  if_ae	jmp	#LR__4765
30f20     04 03 02 F6 | 	mov	_var02, _var05
30f24     01 02 66 F0 | 	shl	_var02, #1
30f28     00 03 02 F1 | 	add	_var02, _var01
30f2c     05 05 02 F6 | 	mov	_var03, _var06
30f30     01 05 52 FC | 	wrword	_var03, _var02
30f34     01 08 06 F1 | 	add	_var05, #1
30f38     14 00 90 FD | 	jmp	#LR__4762
30f3c                 | LR__4761
30f3c     05 0B 32 F9 | 	getword	_var06, _var06, #0
30f40     7F 00 00 FF 
30f44     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
30f48     00 FA 05 56 |  if_ne	mov	result1, #0
30f4c     38 00 90 5D |  if_ne	jmp	#LR__4765
30f50                 | LR__4762
30f50     01 06 06 F1 | 	add	_var04, #1
30f54     78 FF 9F FD | 	jmp	#LR__4760
30f58                 | LR__4763
30f58     0A 03 C2 FA | 	rdbyte	_var02, arg02
30f5c     40 02 CE F7 | 	test	_var02, #64 wz
30f60     02 0D 02 56 |  if_ne	mov	_var07, _var03
30f64     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
30f68     18 00 90 AD |  if_e	jmp	#LR__4764
30f6c     00 09 16 F2 | 	cmp	_var05, #256 wc
30f70     00 FA 05 36 |  if_ae	mov	result1, #0
30f74     10 00 90 3D |  if_ae	jmp	#LR__4765
30f78     01 08 66 F0 | 	shl	_var05, #1
30f7c     00 09 02 F1 | 	add	_var05, _var01
30f80     04 01 58 FC | 	wrword	#0, _var05
30f84                 | LR__4764
30f84                 | ' 		lfnbuf[i] = 0;
30f84                 | ' 	}
30f84                 | ' 
30f84                 | ' 	return 1;
30f84     01 FA 05 F6 | 	mov	result1, #1
30f88                 | LR__4765
30f88                 | _fatfs_cc_pick_lfn_ret
30f88     2D 00 64 FD | 	ret
30f8c                 | 
30f8c                 | _fatfs_cc_put_lfn
30f8c     0D 14 06 F1 | 	add	arg02, #13
30f90     0A 19 42 FC | 	wrbyte	arg04, arg02
30f94     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
30f98     01 18 86 F1 | 	sub	arg04, #1
30f9c     0D 18 06 FD | 	qmul	arg04, #13
30fa0     09 01 02 F6 | 	mov	_var01, arg01
30fa4     02 14 86 F1 | 	sub	arg02, #2
30fa8     0A 1F 48 FC | 	wrbyte	#15, arg02
30fac     01 14 06 F1 | 	add	arg02, #1
30fb0     0A 01 48 FC | 	wrbyte	#0, arg02
30fb4     0C 14 86 F1 | 	sub	arg02, #12
30fb8     0A 13 02 F6 | 	mov	arg01, arg02
30fbc     1A 12 06 F1 | 	add	arg01, #26
30fc0     09 01 58 FC | 	wrword	#0, arg01
30fc4     00 02 06 F6 | 	mov	_var02, #0
30fc8     00 04 06 F6 | 	mov	_var03, #0
30fcc                 | ' 	BYTE* dir,
30fcc                 | ' 	BYTE ord,
30fcc                 | ' 	BYTE sum
30fcc                 | ' )
30fcc                 | ' {
30fcc                 | ' 	UINT i, s;
30fcc                 | ' 	WCHAR wc;
30fcc                 | ' 
30fcc                 | ' 
30fcc                 | ' 	dir[ 13 ] = sum;
30fcc                 | ' 	dir[ 11 ] =  0x0F ;
30fcc                 | ' 	dir[ 12 ] = 0;
30fcc                 | ' 	st_word(dir +  26 , 0);
30fcc                 | ' 
30fcc                 | ' 	i = (ord - 1) * 13;
30fcc                 | ' 	s = wc = 0;
30fcc                 | ' 	do {
30fcc     01 00 00 FF 
30fd0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30fd4     18 06 62 FD | 	getqx	_var04
30fd8     97 2A 48 FB | 	callpa	#(@LR__4771-@LR__4770)>>2,fcache_load_ptr_
30fdc                 | LR__4770
30fdc     01 19 32 F9 | 	getword	arg04, _var02, #0
30fe0     7F 00 00 FF 
30fe4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
30fe8     03 13 02 56 |  if_ne	mov	arg01, _var04
30fec     01 06 06 51 |  if_ne	add	_var04, #1
30ff0     01 12 66 50 |  if_ne	shl	arg01, #1
30ff4     00 13 02 51 |  if_ne	add	arg01, _var01
30ff8     09 03 E2 5A |  if_ne	rdword	_var02, arg01
30ffc     0A 13 02 F6 | 	mov	arg01, arg02
31000     02 19 02 F6 | 	mov	arg04, _var03
31004     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
31008     0C 19 C2 FA | 	rdbyte	arg04, arg04
3100c     01 18 06 FA | 	mul	arg04, #1
31010     0C 13 02 F1 | 	add	arg01, arg04
31014     09 03 52 FC | 	wrword	_var02, arg01
31018     01 19 02 F6 | 	mov	arg04, _var02
3101c     0F 18 4E F7 | 	zerox	arg04, #15 wz
31020     0F 02 CE A9 |  if_e	bmask	_var02, #15
31024     01 04 06 F1 | 	add	_var03, #1
31028     0D 04 16 F2 | 	cmp	_var03, #13 wc
3102c     AC FF 9F CD |  if_b	jmp	#LR__4770
31030                 | LR__4771
31030     01 00 00 FF 
31034     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
31038     01 03 32 F9 | 	getword	_var02, _var02, #0
3103c     7F 00 00 FF 
31040     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
31044     01 06 66 50 |  if_ne	shl	_var04, #1
31048     00 07 02 51 |  if_ne	add	_var04, _var01
3104c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
31050     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
31054     40 16 46 A5 |  if_e	or	arg03, #64
31058     0A 17 42 FC | 	wrbyte	arg03, arg02
3105c                 | _fatfs_cc_put_lfn_ret
3105c     2D 00 64 FD | 	ret
31060                 | 
31060                 | _fatfs_cc_gen_numname
31060     08 4A 05 F6 | 	mov	COUNT_, #8
31064     A8 00 A0 FD | 	call	#pushregs_
31068     2C F0 07 F1 | 	add	ptra, #44
3106c     09 27 02 F6 | 	mov	local01, arg01
31070     0A 29 02 F6 | 	mov	local02, arg02
31074     0B 2B 02 F6 | 	mov	local03, arg03
31078     0C 2D 02 F6 | 	mov	local04, arg04
3107c     13 13 02 F6 | 	mov	arg01, local01
31080     14 15 02 F6 | 	mov	arg02, local02
31084     0B 16 06 F6 | 	mov	arg03, #11
31088     18 72 BF FD | 	call	#__system____builtin_memmove
3108c     06 2C 16 F2 | 	cmp	local04, #6 wc
31090     48 00 90 CD |  if_b	jmp	#LR__4785
31094     16 2F 02 F6 | 	mov	local05, local04
31098     97 1E 48 FB | 	callpa	#(@LR__4783-@LR__4780)>>2,fcache_load_ptr_
3109c                 | ' 		sreg = seq;
3109c                 | ' 		while (*lfn) {
3109c                 | LR__4780
3109c     15 31 EA FA | 	rdword	local06, local03 wz
310a0     34 00 90 AD |  if_e	jmp	#LR__4784
310a4     15 33 E2 FA | 	rdword	local07, local03
310a8                 | ' 			wc = *lfn++;
310a8                 | ' 			for (i = 0; i < 16; i++) {
310a8     02 2A 06 F1 | 	add	local03, #2
310ac     10 12 DC FC | 	rep	@LR__4782, #16
310b0                 | LR__4781
310b0     01 2E 66 F0 | 	shl	local05, #1
310b4     19 31 32 F9 | 	getword	local06, local07, #0
310b8     01 30 06 F5 | 	and	local06, #1
310bc     18 2F 02 F1 | 	add	local05, local06
310c0     19 33 32 F9 | 	getword	local07, local07, #0
310c4     01 32 46 F0 | 	shr	local07, #1
310c8     10 2E 2E F4 | 	testbn	local05, #16 wz
310cc     88 00 00 5F 
310d0     21 2E 66 55 |  if_ne	xor	local05, ##69665
310d4                 | LR__4782
310d4     C4 FF 9F FD | 	jmp	#LR__4780
310d8                 | LR__4783
310d8                 | LR__4784
310d8     17 2D 02 F6 | 	mov	local04, local05
310dc                 | LR__4785
310dc     07 32 06 F6 | 	mov	local07, #7
310e0                 | ' 			}
310e0                 | ' 		}
310e0                 | ' 		seq = (UINT)sreg;
310e0                 | ' 	}
310e0                 | ' 
310e0                 | ' 
310e0                 | ' 	i = 7;
310e0                 | ' 	do {
310e0     10 4E 05 F1 | 	add	fp, #16
310e4     97 1A 48 FB | 	callpa	#(@LR__4787-@LR__4786)>>2,fcache_load_ptr_
310e8                 | LR__4786
310e8     16 2F 42 F8 | 	getnib	local05, local04, #0
310ec     30 2E 06 F1 | 	add	local05, #48
310f0     04 2C 46 F0 | 	shr	local04, #4
310f4     17 31 E2 F8 | 	getbyte	local06, local05, #0
310f8     3A 30 16 F2 | 	cmp	local06, #58 wc
310fc     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
31100     07 2E 06 31 |  if_ae	add	local05, #7
31104     19 31 02 F6 | 	mov	local06, local07
31108     01 32 8E F1 | 	sub	local07, #1 wz
3110c     A7 30 02 F1 | 	add	local06, fp
31110     18 2F 42 FC | 	wrbyte	local05, local06
31114     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
31118     CC FF 9F 5D |  if_ne	jmp	#LR__4786
3111c                 | LR__4787
3111c     19 31 02 F6 | 	mov	local06, local07
31120     A7 30 02 F1 | 	add	local06, fp
31124     18 FD 48 FC | 	wrbyte	#126, local06
31128                 | ' 	ns[i] = '~';
31128                 | ' 
31128                 | ' 
31128                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
31128     00 2E 06 F6 | 	mov	local05, #0
3112c     10 4E 85 F1 | 	sub	fp, #16
31130     97 2A 48 FB | 	callpa	#(@LR__4790-@LR__4788)>>2,fcache_load_ptr_
31134                 | LR__4788
31134     19 2F 12 F2 | 	cmp	local05, local07 wc
31138     4C 00 90 3D |  if_ae	jmp	#LR__4791
3113c     17 31 02 F6 | 	mov	local06, local05
31140     13 31 02 F1 | 	add	local06, local01
31144     18 31 C2 FA | 	rdbyte	local06, local06
31148     20 30 0E F2 | 	cmp	local06, #32 wz
3114c     38 00 90 AD |  if_e	jmp	#LR__4791
31150     17 13 02 F6 | 	mov	arg01, local05
31154     13 13 02 F1 | 	add	arg01, local01
31158     09 13 CA FA | 	rdbyte	arg01, arg01 wz
3115c     00 FA 05 56 |  if_ne	mov	result1, #0
31160                 | ' 
31160                 | ' 	return 0;
31160     00 FA 05 A6 |  if_e	mov	result1, #0
31164     00 FA 0D F2 | 	cmp	result1, #0 wz
31168     14 00 90 AD |  if_e	jmp	#LR__4789
3116c     19 31 02 F6 | 	mov	local06, local07
31170     01 30 86 F1 | 	sub	local06, #1
31174     18 2F 0A F2 | 	cmp	local05, local06 wz
31178     0C 00 90 AD |  if_e	jmp	#LR__4791
3117c     01 2E 06 F1 | 	add	local05, #1
31180                 | LR__4789
31180     01 2E 06 F1 | 	add	local05, #1
31184     AC FF 9F FD | 	jmp	#LR__4788
31188                 | LR__4790
31188                 | LR__4791
31188     97 20 48 FB | 	callpa	#(@LR__4795-@LR__4792)>>2,fcache_load_ptr_
3118c                 | ' 			j++;
3118c                 | ' 		}
3118c                 | ' 	}
3118c                 | ' 	do {
3118c                 | LR__4792
3118c     17 31 02 F6 | 	mov	local06, local05
31190     13 31 02 F1 | 	add	local06, local01
31194     08 32 16 F2 | 	cmp	local07, #8 wc
31198     01 2E 06 F1 | 	add	local05, #1
3119c     1C 00 90 3D |  if_ae	jmp	#LR__4793
311a0     19 2D 02 F6 | 	mov	local04, local07
311a4     10 4E 05 F1 | 	add	fp, #16
311a8     A7 2C 02 F1 | 	add	local04, fp
311ac     16 35 C2 FA | 	rdbyte	local08, local04
311b0     01 32 06 F1 | 	add	local07, #1
311b4     10 4E 85 F1 | 	sub	fp, #16
311b8     04 00 90 FD | 	jmp	#LR__4794
311bc                 | LR__4793
311bc     20 34 06 F6 | 	mov	local08, #32
311c0                 | LR__4794
311c0     18 35 42 FC | 	wrbyte	local08, local06
311c4     08 2E 16 F2 | 	cmp	local05, #8 wc
311c8     C0 FF 9F CD |  if_b	jmp	#LR__4792
311cc                 | LR__4795
311cc     A7 F0 03 F6 | 	mov	ptra, fp
311d0     B2 00 A0 FD | 	call	#popregs_
311d4                 | _fatfs_cc_gen_numname_ret
311d4     2D 00 64 FD | 	ret
311d8                 | 
311d8                 | _fatfs_cc_sum_sfn
311d8     00 00 06 F6 | 	mov	_var01, #0
311dc                 | ' )
311dc                 | ' {
311dc                 | ' 	BYTE sum = 0;
311dc                 | ' 	UINT n = 11;
311dc                 | ' 
311dc                 | ' 	do {
311dc     97 12 48 FB | 	callpa	#(@LR__4802-@LR__4800)>>2,fcache_load_ptr_
311e0                 | LR__4800
311e0     0B 10 DC FC | 	rep	@LR__4803, #11
311e4                 | LR__4801
311e4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
311e8     01 FA 45 F0 | 	shr	result1, #1
311ec     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
311f0     07 00 66 F0 | 	shl	_var01, #7
311f4     00 FB 01 F1 | 	add	result1, _var01
311f8     09 01 C2 FA | 	rdbyte	_var01, arg01
311fc     FD 00 02 F1 | 	add	_var01, result1
31200     01 12 06 F1 | 	add	arg01, #1
31204                 | LR__4802
31204                 | LR__4803
31204                 | ' 	return sum;
31204     00 FB 01 F6 | 	mov	result1, _var01
31208                 | _fatfs_cc_sum_sfn_ret
31208     2D 00 64 FD | 	ret
3120c                 | 
3120c                 | _fatfs_cc_dir_read
3120c     0C 4A 05 F6 | 	mov	COUNT_, #12
31210     A8 00 A0 FD | 	call	#pushregs_
31214     09 27 02 F6 | 	mov	local01, arg01
31218     0A 29 02 F6 | 	mov	local02, arg02
3121c     04 2A 06 F6 | 	mov	local03, #4
31220     13 2D 02 FB | 	rdlong	local04, local01
31224     FF 2E 06 F6 | 	mov	local05, #255
31228     FF 30 06 F6 | 	mov	local06, #255
3122c                 | ' )
3122c                 | ' {
3122c                 | ' 	FRESULT res = FR_NO_FILE;
3122c                 | ' 	FATFS *fs = dp->obj.fs;
3122c                 | ' 	BYTE attr, b;
3122c                 | ' 
3122c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
3122c                 | ' 
3122c                 | ' 
3122c                 | ' 	while (dp->sect) {
3122c                 | LR__4810
3122c     18 26 06 F1 | 	add	local01, #24
31230     13 FB 09 FB | 	rdlong	result1, local01 wz
31234     18 26 86 F1 | 	sub	local01, #24
31238     AC 01 90 AD |  if_e	jmp	#LR__4820
3123c     18 26 06 F1 | 	add	local01, #24
31240     13 15 02 FB | 	rdlong	arg02, local01
31244     18 26 86 F1 | 	sub	local01, #24
31248     16 13 02 F6 | 	mov	arg01, local04
3124c     AC ED BF FD | 	call	#_fatfs_cc_move_window
31250     FD 2A 0A F6 | 	mov	local03, result1 wz
31254     90 01 90 5D |  if_ne	jmp	#LR__4820
31258     1C 26 06 F1 | 	add	local01, #28
3125c     13 FB 01 FB | 	rdlong	result1, local01
31260     1C 26 86 F1 | 	sub	local01, #28
31264     FD 32 C2 FA | 	rdbyte	local07, result1
31268     19 FB 01 F6 | 	mov	result1, local07
3126c     07 FA 4D F7 | 	zerox	result1, #7 wz
31270     04 2A 06 A6 |  if_e	mov	local03, #4
31274                 | ' 			res = FR_NO_FILE; break;
31274     70 01 90 AD |  if_e	jmp	#LR__4820
31278     1C 26 06 F1 | 	add	local01, #28
3127c     13 35 02 FB | 	rdlong	local08, local01
31280     0B 34 06 F1 | 	add	local08, #11
31284     1A 37 C2 FA | 	rdbyte	local09, local08
31288     3F 36 06 F5 | 	and	local09, #63
3128c     16 26 86 F1 | 	sub	local01, #22
31290     13 37 42 FC | 	wrbyte	local09, local01
31294     06 26 86 F1 | 	sub	local01, #6
31298     19 FB E1 F8 | 	getbyte	result1, local07, #0
3129c     E5 FA 0D F2 | 	cmp	result1, #229 wz
312a0     19 35 02 56 |  if_ne	mov	local08, local07
312a4     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
312a8     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
312ac     1C 00 90 AD |  if_e	jmp	#LR__4811
312b0     00 38 06 F6 | 	mov	local10, #0
312b4     1B 35 E2 F8 | 	getbyte	local08, local09, #0
312b8     20 34 26 F5 | 	andn	local08, #32
312bc     08 34 0E F2 | 	cmp	local08, #8 wz
312c0     01 38 06 A6 |  if_e	mov	local10, #1
312c4     14 39 0A F2 | 	cmp	local10, local02 wz
312c8     08 00 90 AD |  if_e	jmp	#LR__4812
312cc                 | LR__4811
312cc     FF 2E 06 F6 | 	mov	local05, #255
312d0     00 01 90 FD | 	jmp	#LR__4819
312d4                 | LR__4812
312d4     1B 37 E2 F8 | 	getbyte	local09, local09, #0
312d8     0F 36 0E F2 | 	cmp	local09, #15 wz
312dc     B4 00 90 5D |  if_ne	jmp	#LR__4816
312e0     19 3B E2 F8 | 	getbyte	local11, local07, #0
312e4     40 3A CE F7 | 	test	local11, #64 wz
312e8     30 00 90 AD |  if_e	jmp	#LR__4813
312ec     1C 26 06 F1 | 	add	local01, #28
312f0     13 3B 02 FB | 	rdlong	local11, local01
312f4     0D 3A 06 F1 | 	add	local11, #13
312f8     1D 31 C2 FA | 	rdbyte	local06, local11
312fc     19 33 E2 F8 | 	getbyte	local07, local07, #0
31300     BF 32 06 F5 | 	and	local07, #191
31304     19 2F 02 F6 | 	mov	local05, local07
31308     0C 26 86 F1 | 	sub	local01, #12
3130c     13 3B 02 FB | 	rdlong	local11, local01
31310     1C 26 06 F1 | 	add	local01, #28
31314     13 3B 62 FC | 	wrlong	local11, local01
31318     2C 26 86 F1 | 	sub	local01, #44
3131c                 | LR__4813
3131c     19 35 E2 F8 | 	getbyte	local08, local07, #0
31320     17 39 E2 F8 | 	getbyte	local10, local05, #0
31324     1C 35 0A F2 | 	cmp	local08, local10 wz
31328     5C 00 90 5D |  if_ne	jmp	#LR__4814
3132c     18 39 E2 F8 | 	getbyte	local10, local06, #0
31330     1C 26 06 F1 | 	add	local01, #28
31334     13 37 02 FB | 	rdlong	local09, local01
31338     1C 26 86 F1 | 	sub	local01, #28
3133c     0D 36 06 F1 | 	add	local09, #13
31340     1B 35 C2 FA | 	rdbyte	local08, local09
31344     1A 37 E2 F8 | 	getbyte	local09, local08, #0
31348     1B 39 0A F2 | 	cmp	local10, local09 wz
3134c     38 00 90 5D |  if_ne	jmp	#LR__4814
31350     0C 2C 06 F1 | 	add	local04, #12
31354     16 13 02 FB | 	rdlong	arg01, local04
31358     0C 2C 86 F1 | 	sub	local04, #12
3135c     1C 26 06 F1 | 	add	local01, #28
31360     13 3D 02 FB | 	rdlong	local12, local01
31364     1C 26 86 F1 | 	sub	local01, #28
31368     1E 15 02 F6 | 	mov	arg02, local12
3136c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
31370     00 FA 4D F2 | 	cmps	result1, #0 wz
31374     17 3D 02 56 |  if_ne	mov	local12, local05
31378     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
3137c     01 3C 86 51 |  if_ne	sub	local12, #1
31380     1E 3B 02 56 |  if_ne	mov	local11, local12
31384     04 00 90 5D |  if_ne	jmp	#LR__4815
31388                 | LR__4814
31388     FF 3A 06 F6 | 	mov	local11, #255
3138c                 | LR__4815
3138c     1D 2F 02 F6 | 	mov	local05, local11
31390     40 00 90 FD | 	jmp	#LR__4818
31394                 | LR__4816
31394     17 3B 02 F6 | 	mov	local11, local05
31398     07 3A 4E F7 | 	zerox	local11, #7 wz
3139c     20 00 90 5D |  if_ne	jmp	#LR__4817
313a0     18 31 E2 F8 | 	getbyte	local06, local06, #0
313a4     1C 26 06 F1 | 	add	local01, #28
313a8     13 13 02 FB | 	rdlong	arg01, local01
313ac     1C 26 86 F1 | 	sub	local01, #28
313b0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
313b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
313b8     FD 30 0A F2 | 	cmp	local06, result1 wz
313bc     28 00 90 AD |  if_e	jmp	#LR__4820
313c0                 | LR__4817
313c0     2C 26 06 F1 | 	add	local01, #44
313c4     FF FF FF FF 
313c8     13 FF 6B FC | 	wrlong	##-1, local01
313cc     2C 26 86 F1 | 	sub	local01, #44
313d0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
313d0                 | ' 					}
313d0                 | ' 					break;
313d0     14 00 90 FD | 	jmp	#LR__4820
313d4                 | LR__4818
313d4                 | LR__4819
313d4     13 13 02 F6 | 	mov	arg01, local01
313d8     00 14 06 F6 | 	mov	arg02, #0
313dc     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
313e0     FD 2A 0A F6 | 	mov	local03, result1 wz
313e4     44 FE 9F AD |  if_e	jmp	#LR__4810
313e8                 | LR__4820
313e8     00 2A 0E F2 | 	cmp	local03, #0 wz
313ec     18 26 06 51 |  if_ne	add	local01, #24
313f0     13 01 68 5C |  if_ne	wrlong	#0, local01
313f4                 | ' 	return res;
313f4     15 FB 01 F6 | 	mov	result1, local03
313f8     A7 F0 03 F6 | 	mov	ptra, fp
313fc     B2 00 A0 FD | 	call	#popregs_
31400                 | _fatfs_cc_dir_read_ret
31400     2D 00 64 FD | 	ret
31404                 | 
31404                 | _fatfs_cc_dir_find
31404     0B 4A 05 F6 | 	mov	COUNT_, #11
31408     A8 00 A0 FD | 	call	#pushregs_
3140c     09 27 02 F6 | 	mov	local01, arg01
31410     13 29 02 FB | 	rdlong	local02, local01
31414     13 13 02 F6 | 	mov	arg01, local01
31418     00 14 06 F6 | 	mov	arg02, #0
3141c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
31420     00 FA 0D F2 | 	cmp	result1, #0 wz
31424     18 02 90 5D |  if_ne	jmp	#LR__4842
31428     FF 2A 06 F6 | 	mov	local03, #255
3142c     FF 2C 06 F6 | 	mov	local04, #255
31430     2C 26 06 F1 | 	add	local01, #44
31434     FF FF FF FF 
31438     13 FF 6B FC | 	wrlong	##-1, local01
3143c     2C 26 86 F1 | 	sub	local01, #44
31440                 | ' #line 2404 "ff.c"
31440                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
31440                 | ' 
31440                 | ' 	do {
31440                 | LR__4830
31440     18 26 06 F1 | 	add	local01, #24
31444     13 15 02 FB | 	rdlong	arg02, local01
31448     18 26 86 F1 | 	sub	local01, #24
3144c     14 13 02 F6 | 	mov	arg01, local02
31450     A8 EB BF FD | 	call	#_fatfs_cc_move_window
31454     FD 2E 0A F6 | 	mov	local05, result1 wz
31458     E0 01 90 5D |  if_ne	jmp	#LR__4841
3145c     1C 26 06 F1 | 	add	local01, #28
31460     13 17 02 FB | 	rdlong	arg03, local01
31464     1C 26 86 F1 | 	sub	local01, #28
31468     0B 31 C2 FA | 	rdbyte	local06, arg03
3146c     18 17 02 F6 | 	mov	arg03, local06
31470     07 16 4E F7 | 	zerox	arg03, #7 wz
31474     04 2E 06 A6 |  if_e	mov	local05, #4
31478     C0 01 90 AD |  if_e	jmp	#LR__4841
3147c     1C 26 06 F1 | 	add	local01, #28
31480     13 33 02 FB | 	rdlong	local07, local01
31484     19 17 02 F6 | 	mov	arg03, local07
31488     0B 16 06 F1 | 	add	arg03, #11
3148c     0B 35 C2 FA | 	rdbyte	local08, arg03
31490     3F 34 06 F5 | 	and	local08, #63
31494     16 26 86 F1 | 	sub	local01, #22
31498     13 35 42 FC | 	wrbyte	local08, local01
3149c     06 26 86 F1 | 	sub	local01, #6
314a0     18 17 E2 F8 | 	getbyte	arg03, local06, #0
314a4     E5 16 0E F2 | 	cmp	arg03, #229 wz
314a8     18 00 90 AD |  if_e	jmp	#LR__4831
314ac     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
314b0     08 16 CE F7 | 	test	arg03, #8 wz
314b4     1A 33 02 56 |  if_ne	mov	local07, local08
314b8     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
314bc     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
314c0     18 00 90 AD |  if_e	jmp	#LR__4832
314c4                 | LR__4831
314c4     FF 2C 06 F6 | 	mov	local04, #255
314c8     2C 26 06 F1 | 	add	local01, #44
314cc     FF FF FF FF 
314d0     13 FF 6B FC | 	wrlong	##-1, local01
314d4     2C 26 86 F1 | 	sub	local01, #44
314d8     4C 01 90 FD | 	jmp	#LR__4840
314dc                 | LR__4832
314dc     1A 35 E2 F8 | 	getbyte	local08, local08, #0
314e0     0F 34 0E F2 | 	cmp	local08, #15 wz
314e4     C8 00 90 5D |  if_ne	jmp	#LR__4836
314e8     2B 26 06 F1 | 	add	local01, #43
314ec     13 35 C2 FA | 	rdbyte	local08, local01
314f0     2B 26 86 F1 | 	sub	local01, #43
314f4     40 34 CE F7 | 	test	local08, #64 wz
314f8     2C 01 90 5D |  if_ne	jmp	#LR__4839
314fc     18 37 E2 F8 | 	getbyte	local09, local06, #0
31500     40 36 CE F7 | 	test	local09, #64 wz
31504     30 00 90 AD |  if_e	jmp	#LR__4833
31508     1C 26 06 F1 | 	add	local01, #28
3150c     13 37 02 FB | 	rdlong	local09, local01
31510     0D 36 06 F1 | 	add	local09, #13
31514     1B 2B C2 FA | 	rdbyte	local03, local09
31518     18 31 E2 F8 | 	getbyte	local06, local06, #0
3151c     BF 30 06 F5 | 	and	local06, #191
31520     18 2D 02 F6 | 	mov	local04, local06
31524     0C 26 86 F1 | 	sub	local01, #12
31528     13 37 02 FB | 	rdlong	local09, local01
3152c     1C 26 06 F1 | 	add	local01, #28
31530     13 37 62 FC | 	wrlong	local09, local01
31534     2C 26 86 F1 | 	sub	local01, #44
31538                 | LR__4833
31538     18 39 E2 F8 | 	getbyte	local10, local06, #0
3153c     16 33 E2 F8 | 	getbyte	local07, local04, #0
31540     19 39 0A F2 | 	cmp	local10, local07 wz
31544     5C 00 90 5D |  if_ne	jmp	#LR__4834
31548     15 35 E2 F8 | 	getbyte	local08, local03, #0
3154c     1C 26 06 F1 | 	add	local01, #28
31550     13 33 02 FB | 	rdlong	local07, local01
31554     1C 26 86 F1 | 	sub	local01, #28
31558     0D 32 06 F1 | 	add	local07, #13
3155c     19 31 C2 FA | 	rdbyte	local06, local07
31560     18 33 E2 F8 | 	getbyte	local07, local06, #0
31564     19 35 0A F2 | 	cmp	local08, local07 wz
31568     38 00 90 5D |  if_ne	jmp	#LR__4834
3156c     0C 28 06 F1 | 	add	local02, #12
31570     14 13 02 FB | 	rdlong	arg01, local02
31574     0C 28 86 F1 | 	sub	local02, #12
31578     1C 26 06 F1 | 	add	local01, #28
3157c     13 3B 02 FB | 	rdlong	local11, local01
31580     1C 26 86 F1 | 	sub	local01, #28
31584     1D 15 02 F6 | 	mov	arg02, local11
31588     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
3158c     00 FA 4D F2 | 	cmps	result1, #0 wz
31590     16 3B 02 56 |  if_ne	mov	local11, local04
31594     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
31598     01 3A 86 51 |  if_ne	sub	local11, #1
3159c     1D 37 02 56 |  if_ne	mov	local09, local11
315a0     04 00 90 5D |  if_ne	jmp	#LR__4835
315a4                 | LR__4834
315a4     FF 36 06 F6 | 	mov	local09, #255
315a8                 | LR__4835
315a8     1B 2D 02 F6 | 	mov	local04, local09
315ac     78 00 90 FD | 	jmp	#LR__4839
315b0                 | LR__4836
315b0     16 37 02 F6 | 	mov	local09, local04
315b4     07 36 4E F7 | 	zerox	local09, #7 wz
315b8     20 00 90 5D |  if_ne	jmp	#LR__4837
315bc     15 39 E2 F8 | 	getbyte	local10, local03, #0
315c0     1C 26 06 F1 | 	add	local01, #28
315c4     13 13 02 FB | 	rdlong	arg01, local01
315c8     1C 26 86 F1 | 	sub	local01, #28
315cc     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
315d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
315d4     FD 38 0A F2 | 	cmp	local10, result1 wz
315d8     60 00 90 AD |  if_e	jmp	#LR__4841
315dc                 | LR__4837
315dc     2B 26 06 F1 | 	add	local01, #43
315e0     13 37 C2 FA | 	rdbyte	local09, local01
315e4     2B 26 86 F1 | 	sub	local01, #43
315e8     01 36 CE F7 | 	test	local09, #1 wz
315ec     24 00 90 5D |  if_ne	jmp	#LR__4838
315f0     1C 26 06 F1 | 	add	local01, #28
315f4     13 13 02 FB | 	rdlong	arg01, local01
315f8     04 26 06 F1 | 	add	local01, #4
315fc     13 15 02 F6 | 	mov	arg02, local01
31600     20 26 86 F1 | 	sub	local01, #32
31604     0B 16 06 F6 | 	mov	arg03, #11
31608     88 DA BF FD | 	call	#_fatfs_cc_memcmp
3160c     00 FA 0D F2 | 	cmp	result1, #0 wz
31610     28 00 90 AD |  if_e	jmp	#LR__4841
31614                 | LR__4838
31614     FF 2C 06 F6 | 	mov	local04, #255
31618     2C 26 06 F1 | 	add	local01, #44
3161c     FF FF FF FF 
31620     13 FF 6B FC | 	wrlong	##-1, local01
31624     2C 26 86 F1 | 	sub	local01, #44
31628                 | LR__4839
31628                 | LR__4840
31628     13 13 02 F6 | 	mov	arg01, local01
3162c     00 14 06 F6 | 	mov	arg02, #0
31630     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
31634     FD 2E 0A F6 | 	mov	local05, result1 wz
31638     04 FE 9F AD |  if_e	jmp	#LR__4830
3163c                 | LR__4841
3163c                 | ' 
3163c                 | ' 	return res;
3163c     17 FB 01 F6 | 	mov	result1, local05
31640                 | LR__4842
31640     A7 F0 03 F6 | 	mov	ptra, fp
31644     B2 00 A0 FD | 	call	#popregs_
31648                 | _fatfs_cc_dir_find_ret
31648     2D 00 64 FD | 	ret
3164c                 | 
3164c                 | _fatfs_cc_dir_register
3164c     0A 4A 05 F6 | 	mov	COUNT_, #10
31650     A8 00 A0 FD | 	call	#pushregs_
31654     2C F0 07 F1 | 	add	ptra, #44
31658     04 4E 05 F1 | 	add	fp, #4
3165c     A7 12 62 FC | 	wrlong	arg01, fp
31660     09 27 02 FB | 	rdlong	local01, arg01
31664     08 4E 05 F1 | 	add	fp, #8
31668     A7 26 62 FC | 	wrlong	local01, fp
3166c     08 4E 85 F1 | 	sub	fp, #8
31670     A7 28 02 FB | 	rdlong	local02, fp
31674     04 4E 85 F1 | 	sub	fp, #4
31678     2B 28 06 F1 | 	add	local02, #43
3167c     14 29 C2 FA | 	rdbyte	local02, local02
31680     A0 28 CE F7 | 	test	local02, #160 wz
31684     06 FA 05 56 |  if_ne	mov	result1, #6
31688     F8 03 90 5D |  if_ne	jmp	#LR__4865
3168c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
3168c     14 4E 05 F1 | 	add	fp, #20
31690     A7 00 68 FC | 	wrlong	#0, fp
31694     14 4E 85 F1 | 	sub	fp, #20
31698     97 28 48 FB | 	callpa	#(@LR__4851-@LR__4850)>>2,fcache_load_ptr_
3169c                 | LR__4850
3169c     0C 4E 05 F1 | 	add	fp, #12
316a0     A7 28 02 FB | 	rdlong	local02, fp
316a4     0C 28 06 F1 | 	add	local02, #12
316a8     14 2B 02 FB | 	rdlong	local03, local02
316ac     08 4E 05 F1 | 	add	fp, #8
316b0     A7 2C 02 FB | 	rdlong	local04, fp
316b4     14 4E 85 F1 | 	sub	fp, #20
316b8     01 2C 66 F0 | 	shl	local04, #1
316bc     15 2D 02 F1 | 	add	local04, local03
316c0     16 29 EA FA | 	rdword	local02, local04 wz
316c4     24 00 90 AD |  if_e	jmp	#LR__4852
316c8     14 4E 05 F1 | 	add	fp, #20
316cc     A7 2E 02 FB | 	rdlong	local05, fp
316d0     17 31 02 F6 | 	mov	local06, local05
316d4     17 33 02 F6 | 	mov	local07, local05
316d8     19 35 02 F6 | 	mov	local08, local07
316dc     01 34 06 F1 | 	add	local08, #1
316e0     A7 34 62 FC | 	wrlong	local08, fp
316e4     14 4E 85 F1 | 	sub	fp, #20
316e8     B0 FF 9F FD | 	jmp	#LR__4850
316ec                 | LR__4851
316ec                 | LR__4852
316ec     1C 4E 05 F1 | 	add	fp, #28
316f0     A7 12 02 F6 | 	mov	arg01, fp
316f4     18 4E 85 F1 | 	sub	fp, #24
316f8     A7 14 02 FB | 	rdlong	arg02, fp
316fc     04 4E 85 F1 | 	sub	fp, #4
31700     20 14 06 F1 | 	add	arg02, #32
31704     0C 16 06 F6 | 	mov	arg03, #12
31708     98 6B BF FD | 	call	#__system____builtin_memmove
3170c     27 4E 05 F1 | 	add	fp, #39
31710     A7 36 C2 FA | 	rdbyte	local09, fp
31714     27 4E 85 F1 | 	sub	fp, #39
31718     01 36 CE F7 | 	test	local09, #1 wz
3171c     F4 00 90 AD |  if_e	jmp	#LR__4855
31720     04 4E 05 F1 | 	add	fp, #4
31724     A7 38 02 FB | 	rdlong	local10, fp
31728     2B 38 06 F1 | 	add	local10, #43
3172c     1C 81 48 FC | 	wrbyte	#64, local10
31730                 | ' 		dp->fn[ 11 ] =  0x40 ;
31730                 | ' 		for (n = 1; n < 100; n++) {
31730     0C 4E 05 F1 | 	add	fp, #12
31734     A7 02 68 FC | 	wrlong	#1, fp
31738     10 4E 85 F1 | 	sub	fp, #16
3173c                 | LR__4853
3173c     10 4E 05 F1 | 	add	fp, #16
31740     A7 28 02 FB | 	rdlong	local02, fp
31744     10 4E 85 F1 | 	sub	fp, #16
31748     64 28 16 F2 | 	cmp	local02, #100 wc
3174c     70 00 90 3D |  if_ae	jmp	#LR__4854
31750     04 4E 05 F1 | 	add	fp, #4
31754     A7 12 02 FB | 	rdlong	arg01, fp
31758     20 12 06 F1 | 	add	arg01, #32
3175c     18 4E 05 F1 | 	add	fp, #24
31760     A7 14 02 F6 | 	mov	arg02, fp
31764     10 4E 85 F1 | 	sub	fp, #16
31768     A7 38 02 FB | 	rdlong	local10, fp
3176c     0C 38 06 F1 | 	add	local10, #12
31770     1C 17 02 FB | 	rdlong	arg03, local10
31774     04 4E 05 F1 | 	add	fp, #4
31778     A7 18 02 FB | 	rdlong	arg04, fp
3177c     10 4E 85 F1 | 	sub	fp, #16
31780     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
31784     04 4E 05 F1 | 	add	fp, #4
31788     A7 12 02 FB | 	rdlong	arg01, fp
3178c     04 4E 85 F1 | 	sub	fp, #4
31790     70 FC BF FD | 	call	#_fatfs_cc_dir_find
31794     08 4E 05 F1 | 	add	fp, #8
31798     A7 FA 61 FC | 	wrlong	result1, fp
3179c     00 FA 4D F2 | 	cmps	result1, #0 wz
317a0     08 4E 85 F1 | 	sub	fp, #8
317a4     18 00 90 5D |  if_ne	jmp	#LR__4854
317a8     10 4E 05 F1 | 	add	fp, #16
317ac     A7 38 02 FB | 	rdlong	local10, fp
317b0     01 38 06 F1 | 	add	local10, #1
317b4     A7 38 62 FC | 	wrlong	local10, fp
317b8     10 4E 85 F1 | 	sub	fp, #16
317bc     7C FF 9F FD | 	jmp	#LR__4853
317c0                 | LR__4854
317c0     10 4E 05 F1 | 	add	fp, #16
317c4     A7 38 02 FB | 	rdlong	local10, fp
317c8     10 4E 85 F1 | 	sub	fp, #16
317cc     64 38 0E F2 | 	cmp	local10, #100 wz
317d0     07 FA 05 A6 |  if_e	mov	result1, #7
317d4     AC 02 90 AD |  if_e	jmp	#LR__4865
317d8     08 4E 05 F1 | 	add	fp, #8
317dc     A7 38 02 FB | 	rdlong	local10, fp
317e0     08 4E 85 F1 | 	sub	fp, #8
317e4     04 38 0E F2 | 	cmp	local10, #4 wz
317e8     08 4E 05 51 |  if_ne	add	fp, #8
317ec     A7 FA 01 5B |  if_ne	rdlong	result1, fp
317f0     08 4E 85 51 |  if_ne	sub	fp, #8
317f4     8C 02 90 5D |  if_ne	jmp	#LR__4865
317f8     04 4E 05 F1 | 	add	fp, #4
317fc     A7 38 02 FB | 	rdlong	local10, fp
31800     23 4E 05 F1 | 	add	fp, #35
31804     A7 26 C2 FA | 	rdbyte	local01, fp
31808     27 4E 85 F1 | 	sub	fp, #39
3180c     2B 38 06 F1 | 	add	local10, #43
31810     1C 27 42 FC | 	wrbyte	local01, local10
31814                 | LR__4855
31814     27 4E 05 F1 | 	add	fp, #39
31818     A7 28 C2 FA | 	rdbyte	local02, fp
3181c     27 4E 85 F1 | 	sub	fp, #39
31820     02 28 CE F7 | 	test	local02, #2 wz
31824     20 00 90 AD |  if_e	jmp	#LR__4856
31828     14 4E 05 F1 | 	add	fp, #20
3182c     A7 38 02 FB | 	rdlong	local10, fp
31830     0C 38 06 F1 | 	add	local10, #12
31834     0D 38 16 FD | 	qdiv	local10, #13
31838     14 4E 85 F1 | 	sub	fp, #20
3183c     18 38 62 FD | 	getqx	local10
31840     01 38 06 F1 | 	add	local10, #1
31844     04 00 90 FD | 	jmp	#LR__4857
31848                 | LR__4856
31848     01 38 06 F6 | 	mov	local10, #1
3184c                 | LR__4857
3184c     18 4E 05 F1 | 	add	fp, #24
31850     A7 38 62 FC | 	wrlong	local10, fp
31854     14 4E 85 F1 | 	sub	fp, #20
31858     A7 12 02 FB | 	rdlong	arg01, fp
3185c     1C 15 02 F6 | 	mov	arg02, local10
31860     04 4E 85 F1 | 	sub	fp, #4
31864     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
31868     08 4E 05 F1 | 	add	fp, #8
3186c     A7 FA 61 FC | 	wrlong	result1, fp
31870     08 4E 85 F1 | 	sub	fp, #8
31874     00 FA 0D F2 | 	cmp	result1, #0 wz
31878     38 01 90 5D |  if_ne	jmp	#LR__4862
3187c     18 4E 05 F1 | 	add	fp, #24
31880     A7 38 02 FB | 	rdlong	local10, fp
31884     01 38 8E F1 | 	sub	local10, #1 wz
31888     A7 38 62 FC | 	wrlong	local10, fp
3188c     18 4E 85 F1 | 	sub	fp, #24
31890     20 01 90 AD |  if_e	jmp	#LR__4862
31894     04 4E 05 F1 | 	add	fp, #4
31898     A7 38 02 FB | 	rdlong	local10, fp
3189c     1C 13 02 F6 | 	mov	arg01, local10
318a0     14 4E 05 F1 | 	add	fp, #20
318a4     A7 18 02 FB | 	rdlong	arg04, fp
318a8     18 4E 85 F1 | 	sub	fp, #24
318ac     05 18 66 F0 | 	shl	arg04, #5
318b0     10 38 06 F1 | 	add	local10, #16
318b4     1C 15 02 FB | 	rdlong	arg02, local10
318b8     0C 15 82 F1 | 	sub	arg02, arg04
318bc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
318c0     08 4E 05 F1 | 	add	fp, #8
318c4     A7 FA 61 FC | 	wrlong	result1, fp
318c8     08 4E 85 F1 | 	sub	fp, #8
318cc     00 FA 0D F2 | 	cmp	result1, #0 wz
318d0     E0 00 90 5D |  if_ne	jmp	#LR__4861
318d4     04 4E 05 F1 | 	add	fp, #4
318d8     A7 12 02 FB | 	rdlong	arg01, fp
318dc     04 4E 85 F1 | 	sub	fp, #4
318e0     20 12 06 F1 | 	add	arg01, #32
318e4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
318e8     FD 38 02 F6 | 	mov	local10, result1
318ec     28 4E 05 F1 | 	add	fp, #40
318f0     A7 38 42 FC | 	wrbyte	local10, fp
318f4     28 4E 85 F1 | 	sub	fp, #40
318f8                 | ' 			sum = sum_sfn(dp->fn);
318f8                 | ' 			do {
318f8                 | LR__4858
318f8     0C 4E 05 F1 | 	add	fp, #12
318fc     A7 12 02 FB | 	rdlong	arg01, fp
31900     08 4E 85 F1 | 	sub	fp, #8
31904     A7 26 02 FB | 	rdlong	local01, fp
31908     04 4E 85 F1 | 	sub	fp, #4
3190c     18 26 06 F1 | 	add	local01, #24
31910     13 15 02 FB | 	rdlong	arg02, local01
31914     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
31918     08 4E 05 F1 | 	add	fp, #8
3191c     A7 FA 61 FC | 	wrlong	result1, fp
31920     00 FA 4D F2 | 	cmps	result1, #0 wz
31924     08 4E 85 F1 | 	sub	fp, #8
31928     88 00 90 5D |  if_ne	jmp	#LR__4860
3192c     0C 4E 05 F1 | 	add	fp, #12
31930     A7 28 02 FB | 	rdlong	local02, fp
31934     0C 28 06 F1 | 	add	local02, #12
31938     14 13 02 FB | 	rdlong	arg01, local02
3193c     08 4E 85 F1 | 	sub	fp, #8
31940     A7 26 02 FB | 	rdlong	local01, fp
31944     1C 26 06 F1 | 	add	local01, #28
31948     13 15 02 FB | 	rdlong	arg02, local01
3194c     14 4E 05 F1 | 	add	fp, #20
31950     A7 16 02 FB | 	rdlong	arg03, fp
31954     10 4E 05 F1 | 	add	fp, #16
31958     A7 18 C2 FA | 	rdbyte	arg04, fp
3195c     28 4E 85 F1 | 	sub	fp, #40
31960     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
31964     0C 4E 05 F1 | 	add	fp, #12
31968     A7 38 02 FB | 	rdlong	local10, fp
3196c     03 38 06 F1 | 	add	local10, #3
31970     1C 03 48 FC | 	wrbyte	#1, local10
31974     08 4E 85 F1 | 	sub	fp, #8
31978     A7 12 02 FB | 	rdlong	arg01, fp
3197c     04 4E 85 F1 | 	sub	fp, #4
31980     00 14 06 F6 | 	mov	arg02, #0
31984     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
31988     08 4E 05 F1 | 	add	fp, #8
3198c     A7 FA 61 FC | 	wrlong	result1, fp
31990     00 FA 4D F2 | 	cmps	result1, #0 wz
31994     08 4E 85 F1 | 	sub	fp, #8
31998     18 00 90 5D |  if_ne	jmp	#LR__4859
3199c     18 4E 05 F1 | 	add	fp, #24
319a0     A7 38 02 FB | 	rdlong	local10, fp
319a4     01 38 8E F1 | 	sub	local10, #1 wz
319a8     A7 38 62 FC | 	wrlong	local10, fp
319ac     18 4E 85 F1 | 	sub	fp, #24
319b0     44 FF 9F 5D |  if_ne	jmp	#LR__4858
319b4                 | LR__4859
319b4                 | LR__4860
319b4                 | LR__4861
319b4                 | LR__4862
319b4     08 4E 05 F1 | 	add	fp, #8
319b8     A7 38 0A FB | 	rdlong	local10, fp wz
319bc     08 4E 85 F1 | 	sub	fp, #8
319c0     B4 00 90 5D |  if_ne	jmp	#LR__4864
319c4     0C 4E 05 F1 | 	add	fp, #12
319c8     A7 12 02 FB | 	rdlong	arg01, fp
319cc     08 4E 85 F1 | 	sub	fp, #8
319d0     A7 26 02 FB | 	rdlong	local01, fp
319d4     04 4E 85 F1 | 	sub	fp, #4
319d8     18 26 06 F1 | 	add	local01, #24
319dc     13 15 02 FB | 	rdlong	arg02, local01
319e0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
319e4     08 4E 05 F1 | 	add	fp, #8
319e8     A7 FA 61 FC | 	wrlong	result1, fp
319ec     08 4E 85 F1 | 	sub	fp, #8
319f0     00 FA 0D F2 | 	cmp	result1, #0 wz
319f4     80 00 90 5D |  if_ne	jmp	#LR__4863
319f8     04 4E 05 F1 | 	add	fp, #4
319fc     A7 28 02 FB | 	rdlong	local02, fp
31a00     04 4E 85 F1 | 	sub	fp, #4
31a04     1C 28 06 F1 | 	add	local02, #28
31a08     14 13 02 FB | 	rdlong	arg01, local02
31a0c     00 14 06 F6 | 	mov	arg02, #0
31a10     20 16 06 F6 | 	mov	arg03, #32
31a14     98 00 A0 FD | 	call	#\builtin_bytefill_
31a18     04 4E 05 F1 | 	add	fp, #4
31a1c     A7 14 02 FB | 	rdlong	arg02, fp
31a20     0A 27 02 F6 | 	mov	local01, arg02
31a24     1C 26 06 F1 | 	add	local01, #28
31a28     13 13 02 FB | 	rdlong	arg01, local01
31a2c     04 4E 85 F1 | 	sub	fp, #4
31a30     20 14 06 F1 | 	add	arg02, #32
31a34     0B 16 06 F6 | 	mov	arg03, #11
31a38     68 68 BF FD | 	call	#__system____builtin_memmove
31a3c     04 4E 05 F1 | 	add	fp, #4
31a40     A7 36 02 FB | 	rdlong	local09, fp
31a44     1B 39 02 F6 | 	mov	local10, local09
31a48     1C 38 06 F1 | 	add	local10, #28
31a4c     1C 27 02 FB | 	rdlong	local01, local10
31a50     2B 36 06 F1 | 	add	local09, #43
31a54     1B 39 C2 FA | 	rdbyte	local10, local09
31a58     18 38 06 F5 | 	and	local10, #24
31a5c     0C 26 06 F1 | 	add	local01, #12
31a60     13 39 42 FC | 	wrbyte	local10, local01
31a64     08 4E 05 F1 | 	add	fp, #8
31a68     A7 38 02 FB | 	rdlong	local10, fp
31a6c     0C 4E 85 F1 | 	sub	fp, #12
31a70     03 38 06 F1 | 	add	local10, #3
31a74     1C 03 48 FC | 	wrbyte	#1, local10
31a78                 | LR__4863
31a78                 | LR__4864
31a78                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
31a78                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
31a78                 | ' 
31a78                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
31a78                 | ' 
31a78                 | ' 			fs->wflag = 1;
31a78                 | ' 		}
31a78                 | ' 	}
31a78                 | ' 
31a78                 | ' 	return res;
31a78     08 4E 05 F1 | 	add	fp, #8
31a7c     A7 FA 01 FB | 	rdlong	result1, fp
31a80     08 4E 85 F1 | 	sub	fp, #8
31a84                 | LR__4865
31a84     A7 F0 03 F6 | 	mov	ptra, fp
31a88     B2 00 A0 FD | 	call	#popregs_
31a8c                 | _fatfs_cc_dir_register_ret
31a8c     2D 00 64 FD | 	ret
31a90                 | 
31a90                 | _fatfs_cc_dir_remove
31a90     05 4A 05 F6 | 	mov	COUNT_, #5
31a94     A8 00 A0 FD | 	call	#pushregs_
31a98     09 27 02 F6 | 	mov	local01, arg01
31a9c     13 29 02 FB | 	rdlong	local02, local01
31aa0     10 26 06 F1 | 	add	local01, #16
31aa4     13 2B 02 FB | 	rdlong	local03, local01
31aa8     1C 26 06 F1 | 	add	local01, #28
31aac     13 15 02 FB | 	rdlong	arg02, local01
31ab0     2C 26 86 F1 | 	sub	local01, #44
31ab4     FF FF 7F FF 
31ab8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
31abc     00 2C 06 A6 |  if_e	mov	local04, #0
31ac0     18 00 90 AD |  if_e	jmp	#LR__4870
31ac4     13 13 02 F6 | 	mov	arg01, local01
31ac8     2C 26 06 F1 | 	add	local01, #44
31acc     13 15 02 FB | 	rdlong	arg02, local01
31ad0     2C 26 86 F1 | 	sub	local01, #44
31ad4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
31ad8     FD 2C 02 F6 | 	mov	local04, result1
31adc                 | LR__4870
31adc     16 2F 0A F6 | 	mov	local05, local04 wz
31ae0     64 00 90 5D |  if_ne	jmp	#LR__4873
31ae4                 | ' 		do {
31ae4                 | LR__4871
31ae4     18 26 06 F1 | 	add	local01, #24
31ae8     13 15 02 FB | 	rdlong	arg02, local01
31aec     18 26 86 F1 | 	sub	local01, #24
31af0     14 13 02 F6 | 	mov	arg01, local02
31af4     04 E5 BF FD | 	call	#_fatfs_cc_move_window
31af8     FD 2E 0A F6 | 	mov	local05, result1 wz
31afc     40 00 90 5D |  if_ne	jmp	#LR__4872
31b00     1C 26 06 F1 | 	add	local01, #28
31b04     13 2D 02 FB | 	rdlong	local04, local01
31b08     16 CB 49 FC | 	wrbyte	#229, local04
31b0c     03 28 06 F1 | 	add	local02, #3
31b10     14 03 48 FC | 	wrbyte	#1, local02
31b14     03 28 86 F1 | 	sub	local02, #3
31b18     0C 26 86 F1 | 	sub	local01, #12
31b1c     13 2D 02 FB | 	rdlong	local04, local01
31b20     10 26 86 F1 | 	sub	local01, #16
31b24     15 2D 12 F2 | 	cmp	local04, local03 wc
31b28     14 00 90 3D |  if_ae	jmp	#LR__4872
31b2c     13 13 02 F6 | 	mov	arg01, local01
31b30     00 14 06 F6 | 	mov	arg02, #0
31b34     90 EF BF FD | 	call	#_fatfs_cc_dir_next
31b38     FD 2E 0A F6 | 	mov	local05, result1 wz
31b3c     A4 FF 9F AD |  if_e	jmp	#LR__4871
31b40                 | LR__4872
31b40     04 2E 0E F2 | 	cmp	local05, #4 wz
31b44     02 2E 06 A6 |  if_e	mov	local05, #2
31b48                 | LR__4873
31b48                 | ' 	}
31b48                 | ' #line 2590 "ff.c"
31b48                 | ' 	return res;
31b48     17 FB 01 F6 | 	mov	result1, local05
31b4c     A7 F0 03 F6 | 	mov	ptra, fp
31b50     B2 00 A0 FD | 	call	#popregs_
31b54                 | _fatfs_cc_dir_remove_ret
31b54     2D 00 64 FD | 	ret
31b58                 | 
31b58                 | _fatfs_cc_get_fileinfo
31b58     0F 4A 05 F6 | 	mov	COUNT_, #15
31b5c     A8 00 A0 FD | 	call	#pushregs_
31b60     09 27 02 F6 | 	mov	local01, arg01
31b64     0A 29 02 F6 | 	mov	local02, arg02
31b68     13 2B 02 FB | 	rdlong	local03, local01
31b6c     1C 28 06 F1 | 	add	local02, #28
31b70     14 01 48 FC | 	wrbyte	#0, local02
31b74     1C 28 86 F1 | 	sub	local02, #28
31b78     18 26 06 F1 | 	add	local01, #24
31b7c     13 2D 0A FB | 	rdlong	local04, local01 wz
31b80     18 26 86 F1 | 	sub	local01, #24
31b84     90 03 90 AD |  if_e	jmp	#LR__4894
31b88     2C 26 06 F1 | 	add	local01, #44
31b8c     13 2D 02 FB | 	rdlong	local04, local01
31b90     2C 26 86 F1 | 	sub	local01, #44
31b94     FF FF 7F FF 
31b98     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
31b9c     D8 00 90 AD |  if_e	jmp	#LR__4883
31ba0     00 2E 06 F6 | 	mov	local05, #0
31ba4     00 30 06 F6 | 	mov	local06, #0
31ba8     00 32 06 F6 | 	mov	local07, #0
31bac                 | ' 			si = di = 0;
31bac                 | ' 			hs = 0;
31bac                 | ' 			while (fs->lfnbuf[si] != 0) {
31bac                 | LR__4880
31bac     0C 2A 06 F1 | 	add	local03, #12
31bb0     15 2D 02 FB | 	rdlong	local04, local03
31bb4     0C 2A 86 F1 | 	sub	local03, #12
31bb8     18 35 02 F6 | 	mov	local08, local06
31bbc     01 34 66 F0 | 	shl	local08, #1
31bc0     16 35 02 F1 | 	add	local08, local04
31bc4     1A 2D EA FA | 	rdword	local04, local08 wz
31bc8     90 00 90 AD |  if_e	jmp	#LR__4882
31bcc     0C 2A 06 F1 | 	add	local03, #12
31bd0     15 37 02 FB | 	rdlong	local09, local03
31bd4     0C 2A 86 F1 | 	sub	local03, #12
31bd8     18 39 02 F6 | 	mov	local10, local06
31bdc     01 38 66 F0 | 	shl	local10, #1
31be0     1B 39 02 F1 | 	add	local10, local09
31be4     1C 3B E2 FA | 	rdword	local11, local10
31be8     19 2D 02 F6 | 	mov	local04, local07
31bec     0F 2C 4E F7 | 	zerox	local04, #15 wz
31bf0     01 30 06 F1 | 	add	local06, #1
31bf4     24 00 90 5D |  if_ne	jmp	#LR__4881
31bf8     1D 3D 32 F9 | 	getword	local12, local11, #0
31bfc     6C 00 00 FF 
31c00     00 3C 16 F2 | 	cmp	local12, ##55296 wc
31c04     14 00 90 CD |  if_b	jmp	#LR__4881
31c08     1D 3F 32 F9 | 	getword	local13, local11, #0
31c0c     70 00 00 FF 
31c10     00 3E 16 F2 | 	cmp	local13, ##57344 wc
31c14     1D 33 02 C6 |  if_b	mov	local07, local11
31c18                 | ' 					hs = wc; continue;
31c18     90 FF 9F CD |  if_b	jmp	#LR__4880
31c1c                 | LR__4881
31c1c     19 13 32 F9 | 	getword	arg01, local07, #0
31c20     10 12 66 F0 | 	shl	arg01, #16
31c24     1D 3B 32 F9 | 	getword	local11, local11, #0
31c28     1D 13 42 F5 | 	or	arg01, local11
31c2c     17 15 02 F6 | 	mov	arg02, local05
31c30     1C 28 06 F1 | 	add	local02, #28
31c34     14 15 02 F1 | 	add	arg02, local02
31c38     FF 16 06 F6 | 	mov	arg03, #255
31c3c     17 17 82 F1 | 	sub	arg03, local05
31c40     1C 28 86 F1 | 	sub	local02, #28
31c44     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
31c48     FD 40 0A F6 | 	mov	local14, result1 wz
31c4c     00 2E 06 A6 |  if_e	mov	local05, #0
31c50     20 2F 02 51 |  if_ne	add	local05, local14
31c54     00 32 06 56 |  if_ne	mov	local07, #0
31c58     50 FF 9F 5D |  if_ne	jmp	#LR__4880
31c5c                 | LR__4882
31c5c     19 2D 02 F6 | 	mov	local04, local07
31c60     0F 2C 4E F7 | 	zerox	local04, #15 wz
31c64     00 2E 06 56 |  if_ne	mov	local05, #0
31c68     1C 28 06 F1 | 	add	local02, #28
31c6c     14 2F 02 F1 | 	add	local05, local02
31c70     17 01 48 FC | 	wrbyte	#0, local05
31c74     1C 28 86 F1 | 	sub	local02, #28
31c78                 | LR__4883
31c78     00 2E 06 F6 | 	mov	local05, #0
31c7c     00 30 06 F6 | 	mov	local06, #0
31c80                 | ' 			fno->fname[di] = 0;
31c80                 | ' 		}
31c80                 | ' 	}
31c80                 | ' 
31c80                 | ' 	si = di = 0;
31c80                 | ' 	while (si < 11) {
31c80                 | LR__4884
31c80     0B 30 16 F2 | 	cmp	local06, #11 wc
31c84     20 01 90 3D |  if_ae	jmp	#LR__4887
31c88     1C 26 06 F1 | 	add	local01, #28
31c8c     13 37 02 FB | 	rdlong	local09, local01
31c90     1C 26 86 F1 | 	sub	local01, #28
31c94     18 39 02 F6 | 	mov	local10, local06
31c98     1B 39 02 F1 | 	add	local10, local09
31c9c     1C 3B C2 FA | 	rdbyte	local11, local10
31ca0     1D 2D 32 F9 | 	getword	local04, local11, #0
31ca4     20 2C 0E F2 | 	cmp	local04, #32 wz
31ca8     01 30 06 F1 | 	add	local06, #1
31cac     D0 FF 9F AD |  if_e	jmp	#LR__4884
31cb0     1D 2D 32 F9 | 	getword	local04, local11, #0
31cb4     05 2C 0E F2 | 	cmp	local04, #5 wz
31cb8     E5 3A 06 A6 |  if_e	mov	local11, #229
31cbc     09 30 0E F2 | 	cmp	local06, #9 wz
31cc0     20 00 90 5D |  if_ne	jmp	#LR__4885
31cc4     0C 2E 16 F2 | 	cmp	local05, #12 wc
31cc8     18 00 90 3D |  if_ae	jmp	#LR__4885
31ccc     17 3F 02 F6 | 	mov	local13, local05
31cd0     0C 28 06 F1 | 	add	local02, #12
31cd4     14 3F 02 F1 | 	add	local13, local02
31cd8     1F 5D 48 FC | 	wrbyte	#46, local13
31cdc     01 2E 06 F1 | 	add	local05, #1
31ce0     0C 28 86 F1 | 	sub	local02, #12
31ce4                 | LR__4885
31ce4     1D 13 32 F9 | 	getword	arg01, local11, #0
31ce8     07 12 4E F7 | 	zerox	arg01, #7 wz
31cec     00 FA 05 56 |  if_ne	mov	result1, #0
31cf0                 | ' 
31cf0                 | ' 	return 0;
31cf0     00 FA 05 A6 |  if_e	mov	result1, #0
31cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
31cf8     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
31cfc     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
31d00     50 00 90 AD |  if_e	jmp	#LR__4886
31d04     1C 26 06 F1 | 	add	local01, #28
31d08     13 39 02 FB | 	rdlong	local10, local01
31d0c     1C 26 86 F1 | 	sub	local01, #28
31d10     18 35 02 F6 | 	mov	local08, local06
31d14     1C 35 02 F1 | 	add	local08, local10
31d18     1A 13 CA FA | 	rdbyte	arg01, local08 wz
31d1c     00 FA 05 56 |  if_ne	mov	result1, #0
31d20                 | ' 
31d20                 | ' 	return 0;
31d20     00 FA 05 A6 |  if_e	mov	result1, #0
31d24     00 FA 0D F2 | 	cmp	result1, #0 wz
31d28     28 00 90 AD |  if_e	jmp	#LR__4886
31d2c     1D 3B 32 F9 | 	getword	local11, local11, #0
31d30     08 3A 66 F0 | 	shl	local11, #8
31d34     1C 26 06 F1 | 	add	local01, #28
31d38     13 41 02 FB | 	rdlong	local14, local01
31d3c     1C 26 86 F1 | 	sub	local01, #28
31d40     18 37 02 F6 | 	mov	local09, local06
31d44     20 37 02 F1 | 	add	local09, local14
31d48     1B 3D C2 FA | 	rdbyte	local12, local09
31d4c     1E 3B 42 F5 | 	or	local11, local12
31d50     01 30 06 F1 | 	add	local06, #1
31d54                 | LR__4886
31d54     1D 13 02 F6 | 	mov	arg01, local11
31d58     01 00 00 FF 
31d5c     52 15 06 F6 | 	mov	arg02, ##850
31d60     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
31d64     FD 3A 02 F6 | 	mov	local11, result1
31d68     1D 2D 02 F6 | 	mov	local04, local11
31d6c     0F 2C 4E F7 | 	zerox	local04, #15 wz
31d70     00 2E 06 A6 |  if_e	mov	local05, #0
31d74     30 00 90 AD |  if_e	jmp	#LR__4887
31d78     1D 13 32 F9 | 	getword	arg01, local11, #0
31d7c     17 15 02 F6 | 	mov	arg02, local05
31d80     0C 28 06 F1 | 	add	local02, #12
31d84     14 15 02 F1 | 	add	arg02, local02
31d88     0C 16 06 F6 | 	mov	arg03, #12
31d8c     17 17 82 F1 | 	sub	arg03, local05
31d90     0C 28 86 F1 | 	sub	local02, #12
31d94     EC DF BF FD | 	call	#_fatfs_cc_put_utf
31d98     FD 40 0A F6 | 	mov	local14, result1 wz
31d9c     00 2E 06 A6 |  if_e	mov	local05, #0
31da0     20 2F 02 51 |  if_ne	add	local05, local14
31da4     D8 FE 9F 5D |  if_ne	jmp	#LR__4884
31da8                 | LR__4887
31da8     17 2D 02 F6 | 	mov	local04, local05
31dac     0C 28 06 F1 | 	add	local02, #12
31db0     14 2D 02 F1 | 	add	local04, local02
31db4     16 01 48 FC | 	wrbyte	#0, local04
31db8     10 28 06 F1 | 	add	local02, #16
31dbc     14 2D CA FA | 	rdbyte	local04, local02 wz
31dc0     1C 28 86 F1 | 	sub	local02, #28
31dc4     F8 00 90 5D |  if_ne	jmp	#LR__4893
31dc8     00 2E 0E F2 | 	cmp	local05, #0 wz
31dcc     1C 00 90 5D |  if_ne	jmp	#LR__4888
31dd0     17 3F 02 F6 | 	mov	local13, local05
31dd4     1C 28 06 F1 | 	add	local02, #28
31dd8     14 3F 02 F1 | 	add	local13, local02
31ddc     1F 7F 48 FC | 	wrbyte	#63, local13
31de0     01 2E 06 F1 | 	add	local05, #1
31de4     1C 28 86 F1 | 	sub	local02, #28
31de8     A4 00 90 FD | 	jmp	#LR__4892
31dec                 | LR__4888
31dec                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
31dec     00 2E 06 F6 | 	mov	local05, #0
31df0     00 30 06 F6 | 	mov	local06, #0
31df4     08 42 06 F6 | 	mov	local15, #8
31df8                 | LR__4889
31df8     18 2D 02 F6 | 	mov	local04, local06
31dfc     0C 28 06 F1 | 	add	local02, #12
31e00     14 2D 02 F1 | 	add	local04, local02
31e04     16 3F CA FA | 	rdbyte	local13, local04 wz
31e08     0C 28 86 F1 | 	sub	local02, #12
31e0c     80 00 90 AD |  if_e	jmp	#LR__4891
31e10     18 35 02 F6 | 	mov	local08, local06
31e14     0C 28 06 F1 | 	add	local02, #12
31e18     14 35 02 F1 | 	add	local08, local02
31e1c     1A 3B C2 FA | 	rdbyte	local11, local08
31e20     1D 41 32 F9 | 	getword	local14, local11, #0
31e24     2E 40 0E F2 | 	cmp	local14, #46 wz
31e28     0C 28 86 F1 | 	sub	local02, #12
31e2c     10 42 06 A6 |  if_e	mov	local15, #16
31e30     1D 41 32 F9 | 	getword	local14, local11, #0
31e34     41 40 16 F2 | 	cmp	local14, #65 wc
31e38     30 00 90 CD |  if_b	jmp	#LR__4890
31e3c     1D 35 32 F9 | 	getword	local08, local11, #0
31e40     5B 34 16 F2 | 	cmp	local08, #91 wc
31e44     24 00 90 3D |  if_ae	jmp	#LR__4890
31e48     1C 26 06 F1 | 	add	local01, #28
31e4c     13 37 02 FB | 	rdlong	local09, local01
31e50     1C 26 86 F1 | 	sub	local01, #28
31e54     0C 36 06 F1 | 	add	local09, #12
31e58     1B 39 C2 FA | 	rdbyte	local10, local09
31e5c     21 41 E2 F8 | 	getbyte	local14, local15, #0
31e60     20 39 CA F7 | 	test	local10, local14 wz
31e64     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
31e68     20 3A 06 51 |  if_ne	add	local11, #32
31e6c                 | LR__4890
31e6c     17 41 02 F6 | 	mov	local14, local05
31e70     1C 28 06 F1 | 	add	local02, #28
31e74     14 41 02 F1 | 	add	local14, local02
31e78     1D 3B 32 F9 | 	getword	local11, local11, #0
31e7c     20 3B 42 FC | 	wrbyte	local11, local14
31e80     01 30 06 F1 | 	add	local06, #1
31e84     01 2E 06 F1 | 	add	local05, #1
31e88     1C 28 86 F1 | 	sub	local02, #28
31e8c     68 FF 9F FD | 	jmp	#LR__4889
31e90                 | LR__4891
31e90                 | LR__4892
31e90     1C 28 06 F1 | 	add	local02, #28
31e94     14 2F 02 F1 | 	add	local05, local02
31e98     17 01 48 FC | 	wrbyte	#0, local05
31e9c     1C 26 06 F1 | 	add	local01, #28
31ea0     13 2D 02 FB | 	rdlong	local04, local01
31ea4     1C 26 86 F1 | 	sub	local01, #28
31ea8     0C 2C 06 F1 | 	add	local04, #12
31eac     16 3F CA FA | 	rdbyte	local13, local04 wz
31eb0     1C 28 86 F1 | 	sub	local02, #28
31eb4     0C 28 06 A1 |  if_e	add	local02, #12
31eb8     14 01 48 AC |  if_e	wrbyte	#0, local02
31ebc     0C 28 86 A1 |  if_e	sub	local02, #12
31ec0                 | LR__4893
31ec0     1C 26 06 F1 | 	add	local01, #28
31ec4     13 3D 02 FB | 	rdlong	local12, local01
31ec8     0B 3C 06 F1 | 	add	local12, #11
31ecc     1E 2D C2 FA | 	rdbyte	local04, local12
31ed0     3F 2C 06 F5 | 	and	local04, #63
31ed4     08 28 06 F1 | 	add	local02, #8
31ed8     14 2D 42 FC | 	wrbyte	local04, local02
31edc     08 28 86 F1 | 	sub	local02, #8
31ee0     13 13 02 FB | 	rdlong	arg01, local01
31ee4     1C 12 06 F1 | 	add	arg01, #28
31ee8                 | ' {
31ee8                 | ' 
31ee8                 | ' 	return *((DWORD*)ptr);
31ee8     09 FB 01 FB | 	rdlong	result1, arg01
31eec     14 FB 61 FC | 	wrlong	result1, local02
31ef0     13 13 02 FB | 	rdlong	arg01, local01
31ef4     16 12 06 F1 | 	add	arg01, #22
31ef8                 | ' {
31ef8                 | ' 
31ef8                 | ' 	return *((WORD*)ptr);
31ef8     09 FB E1 FA | 	rdword	result1, arg01
31efc     06 28 06 F1 | 	add	local02, #6
31f00     14 FB 51 FC | 	wrword	result1, local02
31f04     13 13 02 FB | 	rdlong	arg01, local01
31f08     18 12 06 F1 | 	add	arg01, #24
31f0c                 | ' {
31f0c                 | ' 
31f0c                 | ' 	return *((WORD*)ptr);
31f0c     09 FB E1 FA | 	rdword	result1, arg01
31f10     02 28 86 F1 | 	sub	local02, #2
31f14     14 FB 51 FC | 	wrword	result1, local02
31f18                 | LR__4894
31f18     A7 F0 03 F6 | 	mov	ptra, fp
31f1c     B2 00 A0 FD | 	call	#popregs_
31f20                 | _fatfs_cc_get_fileinfo_ret
31f20     2D 00 64 FD | 	ret
31f24                 | 
31f24                 | _fatfs_cc_create_name
31f24     0D 4A 05 F6 | 	mov	COUNT_, #13
31f28     A8 00 A0 FD | 	call	#pushregs_
31f2c     34 F0 07 F1 | 	add	ptra, #52
31f30     04 4E 05 F1 | 	add	fp, #4
31f34     A7 12 62 FC | 	wrlong	arg01, fp
31f38     04 4E 05 F1 | 	add	fp, #4
31f3c     A7 14 62 FC | 	wrlong	arg02, fp
31f40     0A FB 01 FB | 	rdlong	result1, arg02
31f44     28 4E 05 F1 | 	add	fp, #40
31f48     A7 FA 61 FC | 	wrlong	result1, fp
31f4c     2C 4E 85 F1 | 	sub	fp, #44
31f50     A7 FA 01 FB | 	rdlong	result1, fp
31f54     FD 26 02 FB | 	rdlong	local01, result1
31f58     0C 26 06 F1 | 	add	local01, #12
31f5c     13 29 02 FB | 	rdlong	local02, local01
31f60     14 4E 05 F1 | 	add	fp, #20
31f64     A7 28 62 FC | 	wrlong	local02, fp
31f68     14 4E 05 F1 | 	add	fp, #20
31f6c     A7 00 68 FC | 	wrlong	#0, fp
31f70     2C 4E 85 F1 | 	sub	fp, #44
31f74                 | ' 
31f74                 | ' 
31f74                 | ' 
31f74                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
31f74                 | ' 	for (;;) {
31f74                 | LR__4900
31f74     30 4E 05 F1 | 	add	fp, #48
31f78     A7 12 02 F6 | 	mov	arg01, fp
31f7c     30 4E 85 F1 | 	sub	fp, #48
31f80     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
31f84     1C 4E 05 F1 | 	add	fp, #28
31f88     A7 FA 61 FC | 	wrlong	result1, fp
31f8c     1C 4E 85 F1 | 	sub	fp, #28
31f90     FF FF 7F FF 
31f94     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31f98     06 FA 05 A6 |  if_e	mov	result1, #6
31f9c     74 08 90 AD |  if_e	jmp	#LR__4940
31fa0     1C 4E 05 F1 | 	add	fp, #28
31fa4     A7 26 02 FB | 	rdlong	local01, fp
31fa8     1C 4E 85 F1 | 	sub	fp, #28
31fac     80 00 00 FF 
31fb0     00 26 16 F2 | 	cmp	local01, ##65536 wc
31fb4     3C 00 90 CD |  if_b	jmp	#LR__4901
31fb8     18 4E 05 F1 | 	add	fp, #24
31fbc     A7 2A 02 FB | 	rdlong	local03, fp
31fc0     14 4E 05 F1 | 	add	fp, #20
31fc4     A7 26 02 FB | 	rdlong	local01, fp
31fc8     13 2D 02 F6 | 	mov	local04, local01
31fcc     01 2C 06 F1 | 	add	local04, #1
31fd0     A7 2C 62 FC | 	wrlong	local04, fp
31fd4     01 26 66 F0 | 	shl	local01, #1
31fd8     15 27 02 F1 | 	add	local01, local03
31fdc     10 4E 85 F1 | 	sub	fp, #16
31fe0     A7 2E 02 FB | 	rdlong	local05, fp
31fe4     1C 4E 85 F1 | 	sub	fp, #28
31fe8     17 31 02 F6 | 	mov	local06, local05
31fec     10 30 46 F0 | 	shr	local06, #16
31ff0     13 31 52 FC | 	wrword	local06, local01
31ff4                 | LR__4901
31ff4     1C 4E 05 F1 | 	add	fp, #28
31ff8     A7 26 02 FB | 	rdlong	local01, fp
31ffc     08 4E 85 F1 | 	sub	fp, #8
32000     A7 26 52 FC | 	wrword	local01, fp
32004     A7 26 E2 FA | 	rdword	local01, fp
32008     14 4E 85 F1 | 	sub	fp, #20
3200c     20 26 16 F2 | 	cmp	local01, #32 wc
32010     B0 00 90 CD |  if_b	jmp	#LR__4903
32014     14 4E 05 F1 | 	add	fp, #20
32018     A7 26 E2 FA | 	rdword	local01, fp
3201c     14 4E 85 F1 | 	sub	fp, #20
32020     2F 26 0E F2 | 	cmp	local01, #47 wz
32024     14 4E 05 51 |  if_ne	add	fp, #20
32028     A7 2C E2 5A |  if_ne	rdword	local04, fp
3202c     14 4E 85 51 |  if_ne	sub	fp, #20
32030     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
32034     8C 00 90 AD |  if_e	jmp	#LR__4903
32038     14 4E 05 F1 | 	add	fp, #20
3203c     A7 12 E2 FA | 	rdword	arg01, fp
32040     14 4E 85 F1 | 	sub	fp, #20
32044     80 12 16 F2 | 	cmp	arg01, #128 wc
32048     24 00 90 3D |  if_ae	jmp	#LR__4902
3204c     BF 01 00 FF 
32050     84 13 06 F6 | 	mov	arg01, ##@LR__5562
32054     14 4E 05 F1 | 	add	fp, #20
32058     A7 14 E2 FA | 	rdword	arg02, fp
3205c     14 4E 85 F1 | 	sub	fp, #20
32060     FC D0 BF FD | 	call	#_fatfs_cc_strchr
32064     00 FA 0D F2 | 	cmp	result1, #0 wz
32068     06 FA 05 56 |  if_ne	mov	result1, #6
3206c     A4 07 90 5D |  if_ne	jmp	#LR__4940
32070                 | LR__4902
32070     2C 4E 05 F1 | 	add	fp, #44
32074     A7 30 02 FB | 	rdlong	local06, fp
32078     2C 4E 85 F1 | 	sub	fp, #44
3207c     FF 30 16 F2 | 	cmp	local06, #255 wc
32080     06 FA 05 36 |  if_ae	mov	result1, #6
32084     8C 07 90 3D |  if_ae	jmp	#LR__4940
32088     18 4E 05 F1 | 	add	fp, #24
3208c     A7 2A 02 FB | 	rdlong	local03, fp
32090     14 4E 05 F1 | 	add	fp, #20
32094     A7 28 02 FB | 	rdlong	local02, fp
32098     14 2D 02 F6 | 	mov	local04, local02
3209c     01 2C 06 F1 | 	add	local04, #1
320a0     A7 2C 62 FC | 	wrlong	local04, fp
320a4     14 27 02 F6 | 	mov	local01, local02
320a8     01 26 66 F0 | 	shl	local01, #1
320ac     15 27 02 F1 | 	add	local01, local03
320b0     18 4E 85 F1 | 	sub	fp, #24
320b4     A7 30 E2 FA | 	rdword	local06, fp
320b8     14 4E 85 F1 | 	sub	fp, #20
320bc     13 31 52 FC | 	wrword	local06, local01
320c0     B0 FE 9F FD | 	jmp	#LR__4900
320c4                 | LR__4903
320c4     14 4E 05 F1 | 	add	fp, #20
320c8     A7 32 E2 FA | 	rdword	local07, fp
320cc     14 4E 85 F1 | 	sub	fp, #20
320d0     20 32 16 F2 | 	cmp	local07, #32 wc
320d4     10 4E 05 C1 |  if_b	add	fp, #16
320d8     A7 08 48 CC |  if_b	wrbyte	#4, fp
320dc     10 4E 85 C1 |  if_b	sub	fp, #16
320e0     74 00 90 CD |  if_b	jmp	#LR__4908
320e4     97 24 48 FB | 	callpa	#(@LR__4906-@LR__4904)>>2,fcache_load_ptr_
320e8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
320e8                 | LR__4904
320e8     30 4E 05 F1 | 	add	fp, #48
320ec     A7 2C 02 FB | 	rdlong	local04, fp
320f0     30 4E 85 F1 | 	sub	fp, #48
320f4     16 33 C2 FA | 	rdbyte	local07, local04
320f8     2F 32 0E F2 | 	cmp	local07, #47 wz
320fc     18 00 90 AD |  if_e	jmp	#LR__4905
32100     30 4E 05 F1 | 	add	fp, #48
32104     A7 2C 02 FB | 	rdlong	local04, fp
32108     30 4E 85 F1 | 	sub	fp, #48
3210c     16 29 C2 FA | 	rdbyte	local02, local04
32110     5C 28 0E F2 | 	cmp	local02, #92 wz
32114     18 00 90 5D |  if_ne	jmp	#LR__4907
32118                 | LR__4905
32118     30 4E 05 F1 | 	add	fp, #48
3211c     A7 26 02 FB | 	rdlong	local01, fp
32120     01 26 06 F1 | 	add	local01, #1
32124     A7 26 62 FC | 	wrlong	local01, fp
32128     30 4E 85 F1 | 	sub	fp, #48
3212c     B8 FF 9F FD | 	jmp	#LR__4904
32130                 | LR__4906
32130                 | LR__4907
32130     10 4E 05 F1 | 	add	fp, #16
32134     A7 00 48 FC | 	wrbyte	#0, fp
32138     20 4E 05 F1 | 	add	fp, #32
3213c     A7 30 02 FB | 	rdlong	local06, fp
32140     30 4E 85 F1 | 	sub	fp, #48
32144     18 33 C2 FA | 	rdbyte	local07, local06
32148     20 32 16 F2 | 	cmp	local07, #32 wc
3214c     10 4E 05 C1 |  if_b	add	fp, #16
32150     A7 08 48 CC |  if_b	wrbyte	#4, fp
32154     10 4E 85 C1 |  if_b	sub	fp, #16
32158                 | LR__4908
32158     08 4E 05 F1 | 	add	fp, #8
3215c     A7 32 02 FB | 	rdlong	local07, fp
32160     28 4E 05 F1 | 	add	fp, #40
32164     A7 26 02 FB | 	rdlong	local01, fp
32168     30 4E 85 F1 | 	sub	fp, #48
3216c     19 27 62 FC | 	wrlong	local01, local07
32170     97 38 48 FB | 	callpa	#(@LR__4910-@LR__4909)>>2,fcache_load_ptr_
32174                 | ' 	}
32174                 | ' 	*path = p;
32174                 | ' #line 2862 "ff.c"
32174                 | ' 	while (di) {
32174                 | LR__4909
32174     2C 4E 05 F1 | 	add	fp, #44
32178     A7 32 0A FB | 	rdlong	local07, fp wz
3217c     2C 4E 85 F1 | 	sub	fp, #44
32180     60 00 90 AD |  if_e	jmp	#LR__4911
32184     18 4E 05 F1 | 	add	fp, #24
32188     A7 30 02 FB | 	rdlong	local06, fp
3218c     14 4E 05 F1 | 	add	fp, #20
32190     A7 2C 02 FB | 	rdlong	local04, fp
32194     01 2C 86 F1 | 	sub	local04, #1
32198     01 2C 66 F0 | 	shl	local04, #1
3219c     18 2D 02 F1 | 	add	local04, local06
321a0     16 31 E2 FA | 	rdword	local06, local04
321a4     18 4E 85 F1 | 	sub	fp, #24
321a8     A7 30 52 FC | 	wrword	local06, fp
321ac     A7 32 E2 FA | 	rdword	local07, fp
321b0     14 4E 85 F1 | 	sub	fp, #20
321b4     20 32 0E F2 | 	cmp	local07, #32 wz
321b8     14 4E 05 51 |  if_ne	add	fp, #20
321bc     A7 26 E2 5A |  if_ne	rdword	local01, fp
321c0     14 4E 85 51 |  if_ne	sub	fp, #20
321c4     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
321c8     18 00 90 5D |  if_ne	jmp	#LR__4911
321cc     2C 4E 05 F1 | 	add	fp, #44
321d0     A7 26 02 FB | 	rdlong	local01, fp
321d4     01 26 86 F1 | 	sub	local01, #1
321d8     A7 26 62 FC | 	wrlong	local01, fp
321dc     2C 4E 85 F1 | 	sub	fp, #44
321e0     90 FF 9F FD | 	jmp	#LR__4909
321e4                 | LR__4910
321e4                 | LR__4911
321e4     18 4E 05 F1 | 	add	fp, #24
321e8     A7 34 02 FB | 	rdlong	local08, fp
321ec     14 4E 05 F1 | 	add	fp, #20
321f0     A7 2C 02 FB | 	rdlong	local04, fp
321f4     01 2C 66 F0 | 	shl	local04, #1
321f8     1A 2D 02 F1 | 	add	local04, local08
321fc     16 01 58 FC | 	wrword	#0, local04
32200     A7 32 0A FB | 	rdlong	local07, fp wz
32204     2C 4E 85 F1 | 	sub	fp, #44
32208     06 FA 05 A6 |  if_e	mov	result1, #6
3220c     04 06 90 AD |  if_e	jmp	#LR__4940
32210                 | ' 
32210                 | ' 
32210                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
32210     28 4E 05 F1 | 	add	fp, #40
32214     A7 00 68 FC | 	wrlong	#0, fp
32218     28 4E 85 F1 | 	sub	fp, #40
3221c     97 22 48 FB | 	callpa	#(@LR__4913-@LR__4912)>>2,fcache_load_ptr_
32220                 | LR__4912
32220     18 4E 05 F1 | 	add	fp, #24
32224     A7 36 02 FB | 	rdlong	local09, fp
32228     10 4E 05 F1 | 	add	fp, #16
3222c     A7 38 02 FB | 	rdlong	local10, fp
32230     28 4E 85 F1 | 	sub	fp, #40
32234     01 38 66 F0 | 	shl	local10, #1
32238     1B 39 02 F1 | 	add	local10, local09
3223c     1C 3B E2 FA | 	rdword	local11, local10
32240     20 3A 0E F2 | 	cmp	local11, #32 wz
32244     1C 00 90 5D |  if_ne	jmp	#LR__4914
32248     28 4E 05 F1 | 	add	fp, #40
3224c     A7 3C 02 FB | 	rdlong	local12, fp
32250     1E 2F 02 F6 | 	mov	local05, local12
32254     01 2E 06 F1 | 	add	local05, #1
32258     A7 2E 62 FC | 	wrlong	local05, fp
3225c     28 4E 85 F1 | 	sub	fp, #40
32260     BC FF 9F FD | 	jmp	#LR__4912
32264                 | LR__4913
32264                 | LR__4914
32264     28 4E 05 F1 | 	add	fp, #40
32268     A7 32 02 FB | 	rdlong	local07, fp
3226c     28 4E 85 F1 | 	sub	fp, #40
32270     01 32 16 F2 | 	cmp	local07, #1 wc
32274     28 00 90 3D |  if_ae	jmp	#LR__4915
32278     18 4E 05 F1 | 	add	fp, #24
3227c     A7 2A 02 FB | 	rdlong	local03, fp
32280     10 4E 05 F1 | 	add	fp, #16
32284     A7 36 02 FB | 	rdlong	local09, fp
32288     28 4E 85 F1 | 	sub	fp, #40
3228c     01 36 66 F0 | 	shl	local09, #1
32290     15 37 02 F1 | 	add	local09, local03
32294     1B 27 E2 FA | 	rdword	local01, local09
32298     2E 26 0E F2 | 	cmp	local01, #46 wz
3229c     14 00 90 5D |  if_ne	jmp	#LR__4916
322a0                 | LR__4915
322a0     10 4E 05 F1 | 	add	fp, #16
322a4     A7 32 C2 FA | 	rdbyte	local07, fp
322a8     03 32 46 F5 | 	or	local07, #3
322ac     A7 32 42 FC | 	wrbyte	local07, fp
322b0     10 4E 85 F1 | 	sub	fp, #16
322b4                 | LR__4916
322b4     97 2C 48 FB | 	callpa	#(@LR__4918-@LR__4917)>>2,fcache_load_ptr_
322b8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
322b8                 | LR__4917
322b8     2C 4E 05 F1 | 	add	fp, #44
322bc     A7 32 02 FB | 	rdlong	local07, fp
322c0     2C 4E 85 F1 | 	sub	fp, #44
322c4     01 32 16 F2 | 	cmp	local07, #1 wc
322c8     44 00 90 CD |  if_b	jmp	#LR__4919
322cc     18 4E 05 F1 | 	add	fp, #24
322d0     A7 30 02 FB | 	rdlong	local06, fp
322d4     14 4E 05 F1 | 	add	fp, #20
322d8     A7 2A 02 FB | 	rdlong	local03, fp
322dc     2C 4E 85 F1 | 	sub	fp, #44
322e0     01 2A 86 F1 | 	sub	local03, #1
322e4     01 2A 66 F0 | 	shl	local03, #1
322e8     18 2B 02 F1 | 	add	local03, local06
322ec     15 27 E2 FA | 	rdword	local01, local03
322f0     2E 26 0E F2 | 	cmp	local01, #46 wz
322f4     18 00 90 AD |  if_e	jmp	#LR__4919
322f8     2C 4E 05 F1 | 	add	fp, #44
322fc     A7 26 02 FB | 	rdlong	local01, fp
32300     01 26 86 F1 | 	sub	local01, #1
32304     A7 26 62 FC | 	wrlong	local01, fp
32308     2C 4E 85 F1 | 	sub	fp, #44
3230c     A8 FF 9F FD | 	jmp	#LR__4917
32310                 | LR__4918
32310                 | LR__4919
32310     04 4E 05 F1 | 	add	fp, #4
32314     A7 12 02 FB | 	rdlong	arg01, fp
32318     04 4E 85 F1 | 	sub	fp, #4
3231c     20 12 06 F1 | 	add	arg01, #32
32320     20 14 06 F6 | 	mov	arg02, #32
32324     0B 16 06 F6 | 	mov	arg03, #11
32328     09 3F 02 F6 | 	mov	local13, arg01
3232c     98 00 A0 FD | 	call	#\builtin_bytefill_
32330     1F FB 01 F6 | 	mov	result1, local13
32334     0C 4E 05 F1 | 	add	fp, #12
32338     A7 00 48 FC | 	wrbyte	#0, fp
3233c     A7 32 C2 FA | 	rdbyte	local07, fp
32340     14 4E 05 F1 | 	add	fp, #20
32344     A7 32 62 FC | 	wrlong	local07, fp
32348     04 4E 05 F1 | 	add	fp, #4
3234c     A7 10 68 FC | 	wrlong	#8, fp
32350     24 4E 85 F1 | 	sub	fp, #36
32354                 | ' 
32354                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
32354                 | ' 	i = b = 0; ni = 8;
32354                 | ' 	for (;;) {
32354                 | LR__4920
32354     18 4E 05 F1 | 	add	fp, #24
32358     A7 2A 02 FB | 	rdlong	local03, fp
3235c     10 4E 05 F1 | 	add	fp, #16
32360     A7 36 02 FB | 	rdlong	local09, fp
32364     1B 2D 02 F6 | 	mov	local04, local09
32368     01 2C 06 F1 | 	add	local04, #1
3236c     A7 2C 62 FC | 	wrlong	local04, fp
32370     01 36 66 F0 | 	shl	local09, #1
32374     15 37 02 F1 | 	add	local09, local03
32378     1B 31 E2 FA | 	rdword	local06, local09
3237c     14 4E 85 F1 | 	sub	fp, #20
32380     A7 30 52 FC | 	wrword	local06, fp
32384     A7 32 EA FA | 	rdword	local07, fp wz
32388     14 4E 85 F1 | 	sub	fp, #20
3238c     74 03 90 AD |  if_e	jmp	#LR__4936
32390     14 4E 05 F1 | 	add	fp, #20
32394     A7 32 E2 FA | 	rdword	local07, fp
32398     14 4E 85 F1 | 	sub	fp, #20
3239c     20 32 0E F2 | 	cmp	local07, #32 wz
323a0     30 00 90 AD |  if_e	jmp	#LR__4921
323a4     14 4E 05 F1 | 	add	fp, #20
323a8     A7 26 E2 FA | 	rdword	local01, fp
323ac     14 4E 85 F1 | 	sub	fp, #20
323b0     2E 26 0E F2 | 	cmp	local01, #46 wz
323b4     34 00 90 5D |  if_ne	jmp	#LR__4922
323b8     28 4E 05 F1 | 	add	fp, #40
323bc     A7 2C 02 FB | 	rdlong	local04, fp
323c0     04 4E 05 F1 | 	add	fp, #4
323c4     A7 38 02 FB | 	rdlong	local10, fp
323c8     2C 4E 85 F1 | 	sub	fp, #44
323cc     1C 2D 0A F2 | 	cmp	local04, local10 wz
323d0     18 00 90 AD |  if_e	jmp	#LR__4922
323d4                 | LR__4921
323d4     10 4E 05 F1 | 	add	fp, #16
323d8     A7 32 C2 FA | 	rdbyte	local07, fp
323dc     03 32 46 F5 | 	or	local07, #3
323e0     A7 32 42 FC | 	wrbyte	local07, fp
323e4     10 4E 85 F1 | 	sub	fp, #16
323e8                 | ' 			cf |=  0x01  |  0x02 ;
323e8                 | ' 			continue;
323e8     68 FF 9F FD | 	jmp	#LR__4920
323ec                 | LR__4922
323ec     20 4E 05 F1 | 	add	fp, #32
323f0     A7 32 02 FB | 	rdlong	local07, fp
323f4     04 4E 05 F1 | 	add	fp, #4
323f8     A7 26 02 FB | 	rdlong	local01, fp
323fc     24 4E 85 F1 | 	sub	fp, #36
32400     13 33 12 F2 | 	cmp	local07, local01 wc
32404     1C 00 90 3D |  if_ae	jmp	#LR__4923
32408     28 4E 05 F1 | 	add	fp, #40
3240c     A7 34 02 FB | 	rdlong	local08, fp
32410     04 4E 05 F1 | 	add	fp, #4
32414     A7 38 02 FB | 	rdlong	local10, fp
32418     2C 4E 85 F1 | 	sub	fp, #44
3241c     1C 35 0A F2 | 	cmp	local08, local10 wz
32420     B0 00 90 5D |  if_ne	jmp	#LR__4925
32424                 | LR__4923
32424     24 4E 05 F1 | 	add	fp, #36
32428     A7 32 02 FB | 	rdlong	local07, fp
3242c     24 4E 85 F1 | 	sub	fp, #36
32430     0B 32 0E F2 | 	cmp	local07, #11 wz
32434     18 00 90 5D |  if_ne	jmp	#LR__4924
32438     10 4E 05 F1 | 	add	fp, #16
3243c     A7 32 C2 FA | 	rdbyte	local07, fp
32440     03 32 46 F5 | 	or	local07, #3
32444     A7 32 42 FC | 	wrbyte	local07, fp
32448     10 4E 85 F1 | 	sub	fp, #16
3244c                 | ' 				cf |=  0x01  |  0x02 ;
3244c                 | ' 				break;
3244c     B4 02 90 FD | 	jmp	#LR__4936
32450                 | LR__4924
32450     28 4E 05 F1 | 	add	fp, #40
32454     A7 32 02 FB | 	rdlong	local07, fp
32458     04 4E 05 F1 | 	add	fp, #4
3245c     A7 26 02 FB | 	rdlong	local01, fp
32460     2C 4E 85 F1 | 	sub	fp, #44
32464     13 33 0A F2 | 	cmp	local07, local01 wz
32468     10 4E 05 51 |  if_ne	add	fp, #16
3246c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
32470     03 32 46 55 |  if_ne	or	local07, #3
32474     A7 32 42 5C |  if_ne	wrbyte	local07, fp
32478     10 4E 85 51 |  if_ne	sub	fp, #16
3247c     28 4E 05 F1 | 	add	fp, #40
32480     A7 32 02 FB | 	rdlong	local07, fp
32484     04 4E 05 F1 | 	add	fp, #4
32488     A7 28 02 FB | 	rdlong	local02, fp
3248c     2C 4E 85 F1 | 	sub	fp, #44
32490     14 33 1A F2 | 	cmp	local07, local02 wcz
32494     6C 02 90 1D |  if_a	jmp	#LR__4936
32498     2C 4E 05 F1 | 	add	fp, #44
3249c     A7 32 02 FB | 	rdlong	local07, fp
324a0     04 4E 85 F1 | 	sub	fp, #4
324a4     A7 32 62 FC | 	wrlong	local07, fp
324a8     08 4E 85 F1 | 	sub	fp, #8
324ac     A7 10 68 FC | 	wrlong	#8, fp
324b0     04 4E 05 F1 | 	add	fp, #4
324b4     A7 16 68 FC | 	wrlong	#11, fp
324b8     18 4E 85 F1 | 	sub	fp, #24
324bc     A7 3A C2 FA | 	rdbyte	local11, fp
324c0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
324c4     02 32 66 F0 | 	shl	local07, #2
324c8     A7 32 42 FC | 	wrbyte	local07, fp
324cc     0C 4E 85 F1 | 	sub	fp, #12
324d0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
324d0                 | ' 			continue;
324d0     80 FE 9F FD | 	jmp	#LR__4920
324d4                 | LR__4925
324d4     14 4E 05 F1 | 	add	fp, #20
324d8     A7 32 E2 FA | 	rdword	local07, fp
324dc     14 4E 85 F1 | 	sub	fp, #20
324e0     80 32 16 F2 | 	cmp	local07, #128 wc
324e4     6C 00 90 CD |  if_b	jmp	#LR__4927
324e8     10 4E 05 F1 | 	add	fp, #16
324ec     A7 32 C2 FA | 	rdbyte	local07, fp
324f0     02 32 46 F5 | 	or	local07, #2
324f4     A7 32 42 FC | 	wrbyte	local07, fp
324f8     04 4E 05 F1 | 	add	fp, #4
324fc     A7 12 E2 FA | 	rdword	arg01, fp
32500     14 4E 85 F1 | 	sub	fp, #20
32504     01 00 00 FF 
32508     52 15 06 F6 | 	mov	arg02, ##850
3250c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
32510     14 4E 05 F1 | 	add	fp, #20
32514     A7 FA 51 FC | 	wrword	result1, fp
32518     A7 32 E2 FA | 	rdword	local07, fp
3251c     14 4E 85 F1 | 	sub	fp, #20
32520     80 32 CE F7 | 	test	local07, #128 wz
32524     2C 00 90 AD |  if_e	jmp	#LR__4926
32528     14 4E 05 F1 | 	add	fp, #20
3252c     A7 28 E2 FA | 	rdword	local02, fp
32530     7F 28 06 F5 | 	and	local02, #127
32534     01 00 00 FF 
32538     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
3253c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
32540     14 33 C2 FA | 	rdbyte	local07, local02
32544     A7 32 52 FC | 	wrword	local07, fp
32548     14 4E 85 F1 | 	sub	fp, #20
3254c     01 00 00 FF 
32550     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
32554                 | LR__4926
32554                 | LR__4927
32554     14 4E 05 F1 | 	add	fp, #20
32558     A7 32 E2 FA | 	rdword	local07, fp
3255c     14 4E 85 F1 | 	sub	fp, #20
32560     00 33 16 F2 | 	cmp	local07, #256 wc
32564     88 00 90 CD |  if_b	jmp	#LR__4929
32568     24 4E 05 F1 | 	add	fp, #36
3256c     A7 32 02 FB | 	rdlong	local07, fp
32570     01 32 86 F1 | 	sub	local07, #1
32574     04 4E 85 F1 | 	sub	fp, #4
32578     A7 28 02 FB | 	rdlong	local02, fp
3257c     20 4E 85 F1 | 	sub	fp, #32
32580     19 29 12 F2 | 	cmp	local02, local07 wc
32584     2C 00 90 CD |  if_b	jmp	#LR__4928
32588     10 4E 05 F1 | 	add	fp, #16
3258c     A7 3A C2 FA | 	rdbyte	local11, fp
32590     1D 33 E2 F8 | 	getbyte	local07, local11, #0
32594     03 32 46 F5 | 	or	local07, #3
32598     A7 32 42 FC | 	wrbyte	local07, fp
3259c     14 4E 05 F1 | 	add	fp, #20
325a0     A7 32 02 FB | 	rdlong	local07, fp
325a4     04 4E 85 F1 | 	sub	fp, #4
325a8     A7 32 62 FC | 	wrlong	local07, fp
325ac     20 4E 85 F1 | 	sub	fp, #32
325b0                 | ' 				cf |=  0x01  |  0x02 ;
325b0                 | ' 				i = ni; continue;
325b0     A0 FD 9F FD | 	jmp	#LR__4920
325b4                 | LR__4928
325b4     04 4E 05 F1 | 	add	fp, #4
325b8     A7 36 02 FB | 	rdlong	local09, fp
325bc     1C 4E 05 F1 | 	add	fp, #28
325c0     A7 38 02 FB | 	rdlong	local10, fp
325c4     1C 2D 02 F6 | 	mov	local04, local10
325c8     01 2C 06 F1 | 	add	local04, #1
325cc     A7 2C 62 FC | 	wrlong	local04, fp
325d0     20 36 06 F1 | 	add	local09, #32
325d4     1B 39 02 F1 | 	add	local10, local09
325d8     0C 4E 85 F1 | 	sub	fp, #12
325dc     A7 2A E2 FA | 	rdword	local03, fp
325e0     14 4E 85 F1 | 	sub	fp, #20
325e4     08 2A 46 F0 | 	shr	local03, #8
325e8     1C 2B 42 FC | 	wrbyte	local03, local10
325ec     D4 00 90 FD | 	jmp	#LR__4935
325f0                 | LR__4929
325f0     14 4E 05 F1 | 	add	fp, #20
325f4     A7 32 EA FA | 	rdword	local07, fp wz
325f8     14 4E 85 F1 | 	sub	fp, #20
325fc     20 00 90 AD |  if_e	jmp	#LR__4930
32600     BF 01 00 FF 
32604     8D 13 06 F6 | 	mov	arg01, ##@LR__5563
32608     14 4E 05 F1 | 	add	fp, #20
3260c     A7 14 E2 FA | 	rdword	arg02, fp
32610     14 4E 85 F1 | 	sub	fp, #20
32614     48 CB BF FD | 	call	#_fatfs_cc_strchr
32618     00 FA 0D F2 | 	cmp	result1, #0 wz
3261c     20 00 90 AD |  if_e	jmp	#LR__4931
32620                 | LR__4930
32620     14 4E 05 F1 | 	add	fp, #20
32624     A7 BE 58 FC | 	wrword	#95, fp
32628     04 4E 85 F1 | 	sub	fp, #4
3262c     A7 32 C2 FA | 	rdbyte	local07, fp
32630     03 32 46 F5 | 	or	local07, #3
32634     A7 32 42 FC | 	wrbyte	local07, fp
32638     10 4E 85 F1 | 	sub	fp, #16
3263c     84 00 90 FD | 	jmp	#LR__4934
32640                 | LR__4931
32640     14 4E 05 F1 | 	add	fp, #20
32644     A7 32 E2 FA | 	rdword	local07, fp
32648     14 4E 85 F1 | 	sub	fp, #20
3264c     41 32 16 F2 | 	cmp	local07, #65 wc
32650     24 00 90 CD |  if_b	jmp	#LR__4932
32654     14 4E 05 F1 | 	add	fp, #20
32658     A7 26 E2 FA | 	rdword	local01, fp
3265c     14 4E 85 F1 | 	sub	fp, #20
32660     5B 26 16 F2 | 	cmp	local01, #91 wc
32664     0C 4E 05 C1 |  if_b	add	fp, #12
32668     A7 32 C2 CA |  if_b	rdbyte	local07, fp
3266c     02 32 46 C5 |  if_b	or	local07, #2
32670     A7 32 42 CC |  if_b	wrbyte	local07, fp
32674     0C 4E 85 C1 |  if_b	sub	fp, #12
32678                 | LR__4932
32678     14 4E 05 F1 | 	add	fp, #20
3267c     A7 32 E2 FA | 	rdword	local07, fp
32680     14 4E 85 F1 | 	sub	fp, #20
32684     61 32 16 F2 | 	cmp	local07, #97 wc
32688     38 00 90 CD |  if_b	jmp	#LR__4933
3268c     14 4E 05 F1 | 	add	fp, #20
32690     A7 26 E2 FA | 	rdword	local01, fp
32694     14 4E 85 F1 | 	sub	fp, #20
32698     7B 26 16 F2 | 	cmp	local01, #123 wc
3269c     24 00 90 3D |  if_ae	jmp	#LR__4933
326a0     0C 4E 05 F1 | 	add	fp, #12
326a4     A7 32 C2 FA | 	rdbyte	local07, fp
326a8     01 32 46 F5 | 	or	local07, #1
326ac     A7 32 42 FC | 	wrbyte	local07, fp
326b0     08 4E 05 F1 | 	add	fp, #8
326b4     A7 32 E2 FA | 	rdword	local07, fp
326b8     20 32 86 F1 | 	sub	local07, #32
326bc     A7 32 52 FC | 	wrword	local07, fp
326c0     14 4E 85 F1 | 	sub	fp, #20
326c4                 | LR__4933
326c4                 | LR__4934
326c4                 | LR__4935
326c4     04 4E 05 F1 | 	add	fp, #4
326c8     A7 3A 02 FB | 	rdlong	local11, fp
326cc     1D 37 02 F6 | 	mov	local09, local11
326d0     1C 4E 05 F1 | 	add	fp, #28
326d4     A7 28 02 FB | 	rdlong	local02, fp
326d8     14 2D 02 F6 | 	mov	local04, local02
326dc     01 2C 06 F1 | 	add	local04, #1
326e0     A7 2C 62 FC | 	wrlong	local04, fp
326e4     14 39 02 F6 | 	mov	local10, local02
326e8     20 36 06 F1 | 	add	local09, #32
326ec     1B 39 02 F1 | 	add	local10, local09
326f0     0C 4E 85 F1 | 	sub	fp, #12
326f4     A7 2A E2 FA | 	rdword	local03, fp
326f8     14 4E 85 F1 | 	sub	fp, #20
326fc     1C 2B 42 FC | 	wrbyte	local03, local10
32700     50 FC 9F FD | 	jmp	#LR__4920
32704                 | LR__4936
32704     04 4E 05 F1 | 	add	fp, #4
32708     A7 3A 02 FB | 	rdlong	local11, fp
3270c     04 4E 85 F1 | 	sub	fp, #4
32710     20 3A 06 F1 | 	add	local11, #32
32714     1D 33 C2 FA | 	rdbyte	local07, local11
32718     E5 32 0E F2 | 	cmp	local07, #229 wz
3271c     04 4E 05 A1 |  if_e	add	fp, #4
32720     A7 32 02 AB |  if_e	rdlong	local07, fp
32724     04 4E 85 A1 |  if_e	sub	fp, #4
32728     20 32 06 A1 |  if_e	add	local07, #32
3272c     19 0B 48 AC |  if_e	wrbyte	#5, local07
32730     24 4E 05 F1 | 	add	fp, #36
32734     A7 32 02 FB | 	rdlong	local07, fp
32738     24 4E 85 F1 | 	sub	fp, #36
3273c     08 32 0E F2 | 	cmp	local07, #8 wz
32740     0C 4E 05 A1 |  if_e	add	fp, #12
32744     A7 32 C2 AA |  if_e	rdbyte	local07, fp
32748     02 32 66 A0 |  if_e	shl	local07, #2
3274c     A7 32 42 AC |  if_e	wrbyte	local07, fp
32750     0C 4E 85 A1 |  if_e	sub	fp, #12
32754     0C 4E 05 F1 | 	add	fp, #12
32758     A7 32 C2 FA | 	rdbyte	local07, fp
3275c     0C 4E 85 F1 | 	sub	fp, #12
32760     0C 32 06 F5 | 	and	local07, #12
32764     0C 32 0E F2 | 	cmp	local07, #12 wz
32768     18 00 90 AD |  if_e	jmp	#LR__4937
3276c     0C 4E 05 F1 | 	add	fp, #12
32770     A7 26 C2 FA | 	rdbyte	local01, fp
32774     0C 4E 85 F1 | 	sub	fp, #12
32778     03 26 06 F5 | 	and	local01, #3
3277c     03 26 0E F2 | 	cmp	local01, #3 wz
32780     14 00 90 5D |  if_ne	jmp	#LR__4938
32784                 | LR__4937
32784     10 4E 05 F1 | 	add	fp, #16
32788     A7 32 C2 FA | 	rdbyte	local07, fp
3278c     02 32 46 F5 | 	or	local07, #2
32790     A7 32 42 FC | 	wrbyte	local07, fp
32794     10 4E 85 F1 | 	sub	fp, #16
32798                 | LR__4938
32798     10 4E 05 F1 | 	add	fp, #16
3279c     A7 32 C2 FA | 	rdbyte	local07, fp
327a0     10 4E 85 F1 | 	sub	fp, #16
327a4     02 32 CE F7 | 	test	local07, #2 wz
327a8     48 00 90 5D |  if_ne	jmp	#LR__4939
327ac     0C 4E 05 F1 | 	add	fp, #12
327b0     A7 32 C2 FA | 	rdbyte	local07, fp
327b4     0C 4E 85 F1 | 	sub	fp, #12
327b8     01 32 CE F7 | 	test	local07, #1 wz
327bc     10 4E 05 51 |  if_ne	add	fp, #16
327c0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
327c4     10 32 46 55 |  if_ne	or	local07, #16
327c8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
327cc     10 4E 85 51 |  if_ne	sub	fp, #16
327d0     0C 4E 05 F1 | 	add	fp, #12
327d4     A7 32 C2 FA | 	rdbyte	local07, fp
327d8     0C 4E 85 F1 | 	sub	fp, #12
327dc     04 32 CE F7 | 	test	local07, #4 wz
327e0     10 4E 05 51 |  if_ne	add	fp, #16
327e4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
327e8     08 32 46 55 |  if_ne	or	local07, #8
327ec     A7 32 42 5C |  if_ne	wrbyte	local07, fp
327f0     10 4E 85 51 |  if_ne	sub	fp, #16
327f4                 | LR__4939
327f4     04 4E 05 F1 | 	add	fp, #4
327f8     A7 32 02 FB | 	rdlong	local07, fp
327fc     0C 4E 05 F1 | 	add	fp, #12
32800     A7 26 C2 FA | 	rdbyte	local01, fp
32804     10 4E 85 F1 | 	sub	fp, #16
32808     2B 32 06 F1 | 	add	local07, #43
3280c     19 27 42 FC | 	wrbyte	local01, local07
32810                 | ' 	}
32810                 | ' 
32810                 | ' 	dp->fn[ 11 ] = cf;
32810                 | ' 
32810                 | ' 	return FR_OK;
32810     00 FA 05 F6 | 	mov	result1, #0
32814                 | LR__4940
32814     A7 F0 03 F6 | 	mov	ptra, fp
32818     B2 00 A0 FD | 	call	#popregs_
3281c                 | _fatfs_cc_create_name_ret
3281c     2D 00 64 FD | 	ret
32820                 | 
32820                 | _fatfs_cc_follow_path
32820     02 4A 05 F6 | 	mov	COUNT_, #2
32824     A8 00 A0 FD | 	call	#pushregs_
32828     18 F0 07 F1 | 	add	ptra, #24
3282c     04 4E 05 F1 | 	add	fp, #4
32830     A7 12 62 FC | 	wrlong	arg01, fp
32834     04 4E 05 F1 | 	add	fp, #4
32838     A7 14 62 FC | 	wrlong	arg02, fp
3283c     04 4E 85 F1 | 	sub	fp, #4
32840     A7 FA 01 FB | 	rdlong	result1, fp
32844     FD 26 02 FB | 	rdlong	local01, result1
32848     10 4E 05 F1 | 	add	fp, #16
3284c     A7 26 62 FC | 	wrlong	local01, fp
32850     14 4E 85 F1 | 	sub	fp, #20
32854     97 24 48 FB | 	callpa	#(@LR__4952-@LR__4950)>>2,fcache_load_ptr_
32858                 | ' )
32858                 | ' {
32858                 | ' 	FRESULT res;
32858                 | ' 	BYTE ns;
32858                 | ' 	FATFS *fs = dp->obj.fs;
32858                 | ' #line 3034 "ff.c"
32858                 | ' 	{
32858                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
32858                 | LR__4950
32858     08 4E 05 F1 | 	add	fp, #8
3285c     A7 26 02 FB | 	rdlong	local01, fp
32860     08 4E 85 F1 | 	sub	fp, #8
32864     13 27 C2 FA | 	rdbyte	local01, local01
32868     2F 26 0E F2 | 	cmp	local01, #47 wz
3286c     18 00 90 AD |  if_e	jmp	#LR__4951
32870     08 4E 05 F1 | 	add	fp, #8
32874     A7 26 02 FB | 	rdlong	local01, fp
32878     08 4E 85 F1 | 	sub	fp, #8
3287c     13 27 C2 FA | 	rdbyte	local01, local01
32880     5C 26 0E F2 | 	cmp	local01, #92 wz
32884     18 00 90 5D |  if_ne	jmp	#LR__4953
32888                 | LR__4951
32888     08 4E 05 F1 | 	add	fp, #8
3288c     A7 26 02 FB | 	rdlong	local01, fp
32890     01 26 06 F1 | 	add	local01, #1
32894     A7 26 62 FC | 	wrlong	local01, fp
32898     08 4E 85 F1 | 	sub	fp, #8
3289c     B8 FF 9F FD | 	jmp	#LR__4950
328a0                 | LR__4952
328a0                 | LR__4953
328a0     04 4E 05 F1 | 	add	fp, #4
328a4     A7 26 02 FB | 	rdlong	local01, fp
328a8     08 26 06 F1 | 	add	local01, #8
328ac     13 01 68 FC | 	wrlong	#0, local01
328b0     04 4E 05 F1 | 	add	fp, #4
328b4     A7 26 02 FB | 	rdlong	local01, fp
328b8     08 4E 85 F1 | 	sub	fp, #8
328bc     13 27 C2 FA | 	rdbyte	local01, local01
328c0     20 26 16 F2 | 	cmp	local01, #32 wc
328c4     30 00 90 3D |  if_ae	jmp	#LR__4954
328c8     04 4E 05 F1 | 	add	fp, #4
328cc     A7 26 02 FB | 	rdlong	local01, fp
328d0     2B 26 06 F1 | 	add	local01, #43
328d4     13 01 49 FC | 	wrbyte	#128, local01
328d8     A7 12 02 FB | 	rdlong	arg01, fp
328dc     04 4E 85 F1 | 	sub	fp, #4
328e0     00 14 06 F6 | 	mov	arg02, #0
328e4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
328e8     0C 4E 05 F1 | 	add	fp, #12
328ec     A7 FA 61 FC | 	wrlong	result1, fp
328f0     0C 4E 85 F1 | 	sub	fp, #12
328f4     1C 01 90 FD | 	jmp	#LR__4958
328f8                 | LR__4954
328f8                 | ' 		for (;;) {
328f8                 | LR__4955
328f8     04 4E 05 F1 | 	add	fp, #4
328fc     A7 12 02 FB | 	rdlong	arg01, fp
32900     04 4E 05 F1 | 	add	fp, #4
32904     A7 14 02 F6 | 	mov	arg02, fp
32908     08 4E 85 F1 | 	sub	fp, #8
3290c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
32910     0C 4E 05 F1 | 	add	fp, #12
32914     A7 FA 61 FC | 	wrlong	result1, fp
32918     00 FA 4D F2 | 	cmps	result1, #0 wz
3291c     0C 4E 85 F1 | 	sub	fp, #12
32920     F0 00 90 5D |  if_ne	jmp	#LR__4957
32924     04 4E 05 F1 | 	add	fp, #4
32928     A7 12 02 FB | 	rdlong	arg01, fp
3292c     04 4E 85 F1 | 	sub	fp, #4
32930     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
32934     0C 4E 05 F1 | 	add	fp, #12
32938     A7 FA 61 FC | 	wrlong	result1, fp
3293c     08 4E 85 F1 | 	sub	fp, #8
32940     A7 26 02 FB | 	rdlong	local01, fp
32944     2B 26 06 F1 | 	add	local01, #43
32948     13 27 C2 FA | 	rdbyte	local01, local01
3294c     0C 4E 05 F1 | 	add	fp, #12
32950     A7 26 42 FC | 	wrbyte	local01, fp
32954     04 4E 85 F1 | 	sub	fp, #4
32958     A7 26 0A FB | 	rdlong	local01, fp wz
3295c     0C 4E 85 F1 | 	sub	fp, #12
32960     34 00 90 AD |  if_e	jmp	#LR__4956
32964     0C 4E 05 F1 | 	add	fp, #12
32968     A7 26 02 FB | 	rdlong	local01, fp
3296c     0C 4E 85 F1 | 	sub	fp, #12
32970     04 26 0E F2 | 	cmp	local01, #4 wz
32974     9C 00 90 5D |  if_ne	jmp	#LR__4957
32978     10 4E 05 F1 | 	add	fp, #16
3297c     A7 26 C2 FA | 	rdbyte	local01, fp
32980     10 4E 85 F1 | 	sub	fp, #16
32984     04 26 CE F7 | 	test	local01, #4 wz
32988     0C 4E 05 A1 |  if_e	add	fp, #12
3298c     A7 0A 68 AC |  if_e	wrlong	#5, fp
32990     0C 4E 85 A1 |  if_e	sub	fp, #12
32994                 | ' 					}
32994                 | ' 				}
32994                 | ' 				break;
32994     7C 00 90 FD | 	jmp	#LR__4957
32998                 | LR__4956
32998     10 4E 05 F1 | 	add	fp, #16
3299c     A7 26 C2 FA | 	rdbyte	local01, fp
329a0     10 4E 85 F1 | 	sub	fp, #16
329a4     04 26 CE F7 | 	test	local01, #4 wz
329a8     68 00 90 5D |  if_ne	jmp	#LR__4957
329ac     04 4E 05 F1 | 	add	fp, #4
329b0     A7 26 02 FB | 	rdlong	local01, fp
329b4     04 4E 85 F1 | 	sub	fp, #4
329b8     06 26 06 F1 | 	add	local01, #6
329bc     13 27 C2 FA | 	rdbyte	local01, local01
329c0     10 26 CE F7 | 	test	local01, #16 wz
329c4     0C 4E 05 A1 |  if_e	add	fp, #12
329c8     A7 0A 68 AC |  if_e	wrlong	#5, fp
329cc     0C 4E 85 A1 |  if_e	sub	fp, #12
329d0                 | ' 				res = FR_NO_PATH; break;
329d0     40 00 90 AD |  if_e	jmp	#LR__4957
329d4     04 4E 05 F1 | 	add	fp, #4
329d8     A7 28 02 FB | 	rdlong	local02, fp
329dc     14 27 02 F6 | 	mov	local01, local02
329e0     10 4E 05 F1 | 	add	fp, #16
329e4     A7 14 02 FB | 	rdlong	arg02, fp
329e8     0A 13 02 F6 | 	mov	arg01, arg02
329ec     34 14 06 F1 | 	add	arg02, #52
329f0     14 4E 85 F1 | 	sub	fp, #20
329f4     10 28 06 F1 | 	add	local02, #16
329f8     14 29 02 FB | 	rdlong	local02, local02
329fc     FF 29 06 F5 | 	and	local02, #511
32a00     14 15 02 F1 | 	add	arg02, local02
32a04     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
32a08     08 26 06 F1 | 	add	local01, #8
32a0c     13 FB 61 FC | 	wrlong	result1, local01
32a10     E4 FE 9F FD | 	jmp	#LR__4955
32a14                 | LR__4957
32a14                 | LR__4958
32a14                 | ' 			}
32a14                 | ' #line 3090 "ff.c"
32a14                 | ' 			{
32a14                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
32a14                 | ' 			}
32a14                 | ' 		}
32a14                 | ' 	}
32a14                 | ' 
32a14                 | ' 	return res;
32a14     0C 4E 05 F1 | 	add	fp, #12
32a18     A7 FA 01 FB | 	rdlong	result1, fp
32a1c     0C 4E 85 F1 | 	sub	fp, #12
32a20     A7 F0 03 F6 | 	mov	ptra, fp
32a24     B2 00 A0 FD | 	call	#popregs_
32a28                 | _fatfs_cc_follow_path_ret
32a28     2D 00 64 FD | 	ret
32a2c                 | 
32a2c                 | _fatfs_cc_get_ldnumber
32a2c     01 00 66 F6 | 	neg	_var01, #1
32a30     09 03 0A FB | 	rdlong	_var02, arg01 wz
32a34     01 05 02 F6 | 	mov	_var03, _var02
32a38     01 FA 65 A6 |  if_e	neg	result1, #1
32a3c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
32a40     97 10 48 FB | 	callpa	#(@LR__4961-@LR__4960)>>2,fcache_load_ptr_
32a44                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
32a44                 | LR__4960
32a44     02 07 C2 FA | 	rdbyte	_var04, _var03
32a48     03 FB E1 F8 | 	getbyte	result1, _var04, #0
32a4c     20 FA 15 F2 | 	cmp	result1, #32 wc
32a50     01 04 06 F1 | 	add	_var03, #1
32a54     03 09 02 36 |  if_ae	mov	_var05, _var04
32a58     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
32a5c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
32a60     E0 FF 9F 1D |  if_a	jmp	#LR__4960
32a64                 | LR__4961
32a64     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
32a68     3A 06 0E F2 | 	cmp	_var04, #58 wz
32a6c     40 00 90 5D |  if_ne	jmp	#LR__4963
32a70     01 0A 06 F6 | 	mov	_var06, #1
32a74     01 09 C2 FA | 	rdbyte	_var05, _var02
32a78     30 08 16 F2 | 	cmp	_var05, #48 wc
32a7c     1C 00 90 CD |  if_b	jmp	#LR__4962
32a80     01 09 C2 FA | 	rdbyte	_var05, _var02
32a84     3A 08 16 F2 | 	cmp	_var05, #58 wc
32a88     01 0D 02 C6 |  if_b	mov	_var07, _var02
32a8c     02 0C 06 C1 |  if_b	add	_var07, #2
32a90     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
32a94     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
32a98     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
32a9c                 | LR__4962
32a9c     01 0A 56 F2 | 	cmps	_var06, #1 wc
32aa0     05 01 02 C6 |  if_b	mov	_var01, _var06
32aa4     09 05 62 CC |  if_b	wrlong	_var03, arg01
32aa8                 | ' 			vol = i;
32aa8                 | ' 			*path = tt;
32aa8                 | ' 		}
32aa8                 | ' 		return vol;
32aa8     00 FB 01 F6 | 	mov	result1, _var01
32aac     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
32ab0                 | LR__4963
32ab0                 | ' 	}
32ab0                 | ' #line 3170 "ff.c"
32ab0                 | ' 	vol = 0;
32ab0                 | ' 
32ab0                 | ' 	return vol;
32ab0     00 FA 05 F6 | 	mov	result1, #0
32ab4                 | _fatfs_cc_get_ldnumber_ret
32ab4     2D 00 64 FD | 	ret
32ab8                 | 
32ab8                 | _fatfs_cc_check_fs
32ab8     04 4A 05 F6 | 	mov	COUNT_, #4
32abc     A8 00 A0 FD | 	call	#pushregs_
32ac0     09 27 02 F6 | 	mov	local01, arg01
32ac4     03 26 06 F1 | 	add	local01, #3
32ac8     13 01 48 FC | 	wrbyte	#0, local01
32acc     2D 26 06 F1 | 	add	local01, #45
32ad0     FF FF FF FF 
32ad4     13 FF 6B FC | 	wrlong	##-1, local01
32ad8     30 26 86 F1 | 	sub	local01, #48
32adc     13 13 02 F6 | 	mov	arg01, local01
32ae0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
32ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
32ae8     04 FA 05 56 |  if_ne	mov	result1, #4
32aec     94 01 90 5D |  if_ne	jmp	#LR__4974
32af0     34 26 06 F1 | 	add	local01, #52
32af4     13 13 02 F6 | 	mov	arg01, local01
32af8     FE 13 06 F1 | 	add	arg01, #510
32afc                 | ' {
32afc                 | ' 
32afc                 | ' 	return *((WORD*)ptr);
32afc     09 29 E2 FA | 	rdword	local02, arg01
32b00     13 2B C2 FA | 	rdbyte	local03, local01
32b04     34 26 86 F1 | 	sub	local01, #52
32b08     15 2D E2 F8 | 	getbyte	local04, local03, #0
32b0c     EB 2C 0E F2 | 	cmp	local04, #235 wz
32b10     15 17 02 56 |  if_ne	mov	arg03, local03
32b14     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
32b18     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
32b1c     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
32b20     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
32b24     44 01 90 5D |  if_ne	jmp	#LR__4973
32b28     14 2D 32 F9 | 	getword	local04, local02, #0
32b2c     55 00 00 FF 
32b30     55 2C 0E F2 | 	cmp	local04, ##43605 wz
32b34     2C 00 90 5D |  if_ne	jmp	#LR__4970
32b38     34 26 06 F1 | 	add	local01, #52
32b3c     13 13 02 F6 | 	mov	arg01, local01
32b40     34 26 86 F1 | 	sub	local01, #52
32b44     52 12 06 F1 | 	add	arg01, #82
32b48     BF 01 00 FF 
32b4c     94 15 06 F6 | 	mov	arg02, ##@LR__5564
32b50     08 16 06 F6 | 	mov	arg03, #8
32b54     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
32b58     00 FA 0D F2 | 	cmp	result1, #0 wz
32b5c                 | ' 			return 0;
32b5c     00 FA 05 A6 |  if_e	mov	result1, #0
32b60     20 01 90 AD |  if_e	jmp	#LR__4974
32b64                 | LR__4970
32b64     34 26 06 F1 | 	add	local01, #52
32b68     13 13 02 F6 | 	mov	arg01, local01
32b6c     0B 12 06 F1 | 	add	arg01, #11
32b70                 | ' {
32b70                 | ' 
32b70                 | ' 	return *((WORD*)ptr);
32b70     09 FB E1 FA | 	rdword	result1, arg01
32b74     0D 26 06 F1 | 	add	local01, #13
32b78     13 2B C2 FA | 	rdbyte	local03, local01
32b7c     41 26 86 F1 | 	sub	local01, #65
32b80     FD 2C 32 F9 | 	getword	local04, result1, #0
32b84     FD 14 32 F9 | 	getword	arg02, result1, #0
32b88     01 14 86 F1 | 	sub	arg02, #1
32b8c     0A 2D CA F7 | 	test	local04, arg02 wz
32b90     D8 00 90 5D |  if_ne	jmp	#LR__4972
32b94     FD 14 32 F9 | 	getword	arg02, result1, #0
32b98     01 00 00 FF 
32b9c     00 14 16 F2 | 	cmp	arg02, ##512 wc
32ba0     C8 00 90 CD |  if_b	jmp	#LR__4972
32ba4     FD 14 32 F9 | 	getword	arg02, result1, #0
32ba8     01 00 00 FF 
32bac     01 14 16 F2 | 	cmp	arg02, ##513 wc
32bb0     B8 00 90 3D |  if_ae	jmp	#LR__4972
32bb4     15 13 02 F6 | 	mov	arg01, local03
32bb8     07 12 4E F7 | 	zerox	arg01, #7 wz
32bbc     AC 00 90 AD |  if_e	jmp	#LR__4972
32bc0     15 13 E2 F8 | 	getbyte	arg01, local03, #0
32bc4     15 2B E2 F8 | 	getbyte	local03, local03, #0
32bc8     01 2A 86 F1 | 	sub	local03, #1
32bcc     15 13 CA F7 | 	test	arg01, local03 wz
32bd0     98 00 90 5D |  if_ne	jmp	#LR__4972
32bd4     34 26 06 F1 | 	add	local01, #52
32bd8     13 13 02 F6 | 	mov	arg01, local01
32bdc     34 26 86 F1 | 	sub	local01, #52
32be0     0E 12 06 F1 | 	add	arg01, #14
32be4                 | ' {
32be4                 | ' 
32be4                 | ' 	return *((WORD*)ptr);
32be4     09 FB E9 FA | 	rdword	result1, arg01 wz
32be8     80 00 90 AD |  if_e	jmp	#LR__4972
32bec     44 26 06 F1 | 	add	local01, #68
32bf0     13 13 C2 FA | 	rdbyte	arg01, local01
32bf4     44 26 86 F1 | 	sub	local01, #68
32bf8     01 12 86 F1 | 	sub	arg01, #1
32bfc     02 12 16 F2 | 	cmp	arg01, #2 wc
32c00     68 00 90 3D |  if_ae	jmp	#LR__4972
32c04     34 26 06 F1 | 	add	local01, #52
32c08     13 13 02 F6 | 	mov	arg01, local01
32c0c     34 26 86 F1 | 	sub	local01, #52
32c10     11 12 06 F1 | 	add	arg01, #17
32c14                 | ' {
32c14                 | ' 
32c14                 | ' 	return *((WORD*)ptr);
32c14     09 FB E9 FA | 	rdword	result1, arg01 wz
32c18     50 00 90 AD |  if_e	jmp	#LR__4972
32c1c     34 26 06 F1 | 	add	local01, #52
32c20     13 13 02 F6 | 	mov	arg01, local01
32c24     34 26 86 F1 | 	sub	local01, #52
32c28     13 12 06 F1 | 	add	arg01, #19
32c2c                 | ' {
32c2c                 | ' 
32c2c                 | ' 	return *((WORD*)ptr);
32c2c     09 FB E1 FA | 	rdword	result1, arg01
32c30     FD 2A 32 F9 | 	getword	local03, result1, #0
32c34     80 2A 16 F2 | 	cmp	local03, #128 wc
32c38     20 00 90 3D |  if_ae	jmp	#LR__4971
32c3c     34 26 06 F1 | 	add	local01, #52
32c40     13 13 02 F6 | 	mov	arg01, local01
32c44     34 26 86 F1 | 	sub	local01, #52
32c48     20 12 06 F1 | 	add	arg01, #32
32c4c                 | ' {
32c4c                 | ' 
32c4c                 | ' 	return *((DWORD*)ptr);
32c4c     09 FB 01 FB | 	rdlong	result1, arg01
32c50     80 00 00 FF 
32c54     00 FA 15 F2 | 	cmp	result1, ##65536 wc
32c58     10 00 90 CD |  if_b	jmp	#LR__4972
32c5c                 | LR__4971
32c5c     4A 26 06 F1 | 	add	local01, #74
32c60                 | ' {
32c60                 | ' 
32c60                 | ' 	return *((WORD*)ptr);
32c60     13 FB E9 FA | 	rdword	result1, local01 wz
32c64                 | ' 			&& b != 0 && (b & (b - 1)) == 0
32c64                 | ' 			&& ld_word(fs->win +  14 ) != 0
32c64                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
32c64                 | ' 			&& ld_word(fs->win +  17 ) != 0
32c64                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
32c64                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
32c64                 | ' 				return 0;
32c64     00 FA 05 56 |  if_ne	mov	result1, #0
32c68     18 00 90 5D |  if_ne	jmp	#LR__4974
32c6c                 | LR__4972
32c6c                 | LR__4973
32c6c                 | ' 		}
32c6c                 | ' 	}
32c6c                 | ' 	return sign == 0xAA55 ? 2 : 3;
32c6c     14 2B 32 F9 | 	getword	local03, local02, #0
32c70     55 00 00 FF 
32c74     55 2A 0E F2 | 	cmp	local03, ##43605 wz
32c78     02 2C 06 A6 |  if_e	mov	local04, #2
32c7c     03 2C 06 56 |  if_ne	mov	local04, #3
32c80     16 FB 01 F6 | 	mov	result1, local04
32c84                 | LR__4974
32c84     A7 F0 03 F6 | 	mov	ptra, fp
32c88     B2 00 A0 FD | 	call	#popregs_
32c8c                 | _fatfs_cc_check_fs_ret
32c8c     2D 00 64 FD | 	ret
32c90                 | 
32c90                 | _fatfs_cc_find_volume
32c90     05 4A 05 F6 | 	mov	COUNT_, #5
32c94     A8 00 A0 FD | 	call	#pushregs_
32c98     24 F0 07 F1 | 	add	ptra, #36
32c9c     09 27 02 F6 | 	mov	local01, arg01
32ca0     0A 29 02 F6 | 	mov	local02, arg02
32ca4     13 13 02 F6 | 	mov	arg01, local01
32ca8     00 14 06 F6 | 	mov	arg02, #0
32cac     08 FE BF FD | 	call	#_fatfs_cc_check_fs
32cb0     02 FA 0D F2 | 	cmp	result1, #2 wz
32cb4     0C 00 90 AD |  if_e	jmp	#LR__4980
32cb8     03 FA 15 F2 | 	cmp	result1, #3 wc
32cbc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
32cc0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4988
32cc4                 | LR__4980
32cc4                 | ' 	for (i = 0; i < 4; i++) {
32cc4     00 2A 06 F6 | 	mov	local03, #0
32cc8     97 26 48 FB | 	callpa	#(@LR__4982-@LR__4981)>>2,fcache_load_ptr_
32ccc                 | LR__4981
32ccc     04 2A 16 F2 | 	cmp	local03, #4 wc
32cd0     44 00 90 3D |  if_ae	jmp	#LR__4983
32cd4     15 2D 02 F6 | 	mov	local04, local03
32cd8     02 2C 66 F0 | 	shl	local04, #2
32cdc     14 4E 05 F1 | 	add	fp, #20
32ce0     A7 2C 02 F1 | 	add	local04, fp
32ce4     34 26 06 F1 | 	add	local01, #52
32ce8     13 13 02 F6 | 	mov	arg01, local01
32cec     34 26 86 F1 | 	sub	local01, #52
32cf0     BE 13 06 F1 | 	add	arg01, #446
32cf4     15 15 02 F6 | 	mov	arg02, local03
32cf8     04 14 66 F0 | 	shl	arg02, #4
32cfc     0A 13 02 F1 | 	add	arg01, arg02
32d00     08 12 06 F1 | 	add	arg01, #8
32d04                 | ' {
32d04                 | ' 
32d04                 | ' 	return *((DWORD*)ptr);
32d04     09 FB 01 FB | 	rdlong	result1, arg01
32d08     14 4E 85 F1 | 	sub	fp, #20
32d0c     16 FB 61 FC | 	wrlong	result1, local04
32d10     01 2A 06 F1 | 	add	local03, #1
32d14     B4 FF 9F FD | 	jmp	#LR__4981
32d18                 | LR__4982
32d18                 | LR__4983
32d18     00 28 0E F2 | 	cmp	local02, #0 wz
32d1c     14 2D 02 56 |  if_ne	mov	local04, local02
32d20     01 2C 86 51 |  if_ne	sub	local04, #1
32d24     00 2C 06 A6 |  if_e	mov	local04, #0
32d28     16 2B 02 F6 | 	mov	local03, local04
32d2c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
32d2c                 | ' 	}
32d2c                 | ' 	i = part ? part - 1 : 0;
32d2c                 | ' 	do {
32d2c                 | LR__4984
32d2c     15 2D 02 F6 | 	mov	local04, local03
32d30     02 2C 66 F0 | 	shl	local04, #2
32d34     14 4E 05 F1 | 	add	fp, #20
32d38     A7 2C 02 F1 | 	add	local04, fp
32d3c     16 2D 0A FB | 	rdlong	local04, local04 wz
32d40     14 4E 85 F1 | 	sub	fp, #20
32d44     28 00 90 AD |  if_e	jmp	#LR__4985
32d48     15 2D 02 F6 | 	mov	local04, local03
32d4c     02 2C 66 F0 | 	shl	local04, #2
32d50     14 4E 05 F1 | 	add	fp, #20
32d54     A7 2C 02 F1 | 	add	local04, fp
32d58     16 15 02 FB | 	rdlong	arg02, local04
32d5c     13 13 02 F6 | 	mov	arg01, local01
32d60     14 4E 85 F1 | 	sub	fp, #20
32d64     50 FD BF FD | 	call	#_fatfs_cc_check_fs
32d68     FD 2C 02 F6 | 	mov	local04, result1
32d6c     04 00 90 FD | 	jmp	#LR__4986
32d70                 | LR__4985
32d70     03 2C 06 F6 | 	mov	local04, #3
32d74                 | LR__4986
32d74     16 2F 02 F6 | 	mov	local05, local04
32d78     00 28 0E F2 | 	cmp	local02, #0 wz
32d7c     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
32d80     0C 00 90 8D |  if_c_and_z	jmp	#LR__4987
32d84     01 2A 06 A1 |  if_e	add	local03, #1
32d88     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
32d8c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4984
32d90                 | LR__4987
32d90                 | ' 	return fmt;
32d90     17 FB 01 F6 | 	mov	result1, local05
32d94                 | LR__4988
32d94     A7 F0 03 F6 | 	mov	ptra, fp
32d98     B2 00 A0 FD | 	call	#popregs_
32d9c                 | _fatfs_cc_find_volume_ret
32d9c     2D 00 64 FD | 	ret
32da0                 | 
32da0                 | _fatfs_cc_mount_volume
32da0     0B 4A 05 F6 | 	mov	COUNT_, #11
32da4     A8 00 A0 FD | 	call	#pushregs_
32da8     0A 27 02 F6 | 	mov	local01, arg02
32dac     0B 29 02 F6 | 	mov	local02, arg03
32db0     13 01 68 FC | 	wrlong	#0, local01
32db4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
32db8     FD 2A 02 F6 | 	mov	local03, result1
32dbc     00 2A 56 F2 | 	cmps	local03, #0 wc
32dc0     0B FA 05 C6 |  if_b	mov	result1, #11
32dc4     3C 05 90 CD |  if_b	jmp	#LR__5000
32dc8     15 17 02 F6 | 	mov	arg03, local03
32dcc     02 16 66 F0 | 	shl	arg03, #2
32dd0     F2 16 02 F1 | 	add	arg03, objptr
32dd4     0B 2D 0A FB | 	rdlong	local04, arg03 wz
32dd8     0C FA 05 A6 |  if_e	mov	result1, #12
32ddc     24 05 90 AD |  if_e	jmp	#LR__5000
32de0     13 2D 62 FC | 	wrlong	local04, local01
32de4     14 29 E2 F8 | 	getbyte	local02, local02, #0
32de8     FE 28 06 F5 | 	and	local02, #254
32dec     16 17 CA FA | 	rdbyte	arg03, local04 wz
32df0     4C 00 90 AD |  if_e	jmp	#LR__4991
32df4     01 2C 06 F1 | 	add	local04, #1
32df8     16 13 CA FA | 	rdbyte	arg01, local04 wz
32dfc     01 2C 86 F1 | 	sub	local04, #1
32e00     01 FA 05 56 |  if_ne	mov	result1, #1
32e04                 | ' 
32e04                 | ' 	return Stat;
32e04     01 00 00 AF 
32e08     20 E4 05 A1 |  if_e	add	objptr, ##544
32e0c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
32e10     01 00 00 AF 
32e14     20 E4 85 A1 |  if_e	sub	objptr, ##544
32e18     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
32e1c     01 16 CE F7 | 	test	arg03, #1 wz
32e20     1C 00 90 5D |  if_ne	jmp	#LR__4990
32e24     00 28 0E F2 | 	cmp	local02, #0 wz
32e28     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
32e2c     04 FA CD 57 |  if_ne	test	result1, #4 wz
32e30                 | ' 				return FR_WRITE_PROTECTED;
32e30     0A FA 05 56 |  if_ne	mov	result1, #10
32e34     CC 04 90 5D |  if_ne	jmp	#LR__5000
32e38                 | ' 			}
32e38                 | ' 			return FR_OK;
32e38     00 FA 05 F6 | 	mov	result1, #0
32e3c     C4 04 90 FD | 	jmp	#LR__5000
32e40                 | LR__4990
32e40                 | LR__4991
32e40     16 01 48 FC | 	wrbyte	#0, local04
32e44     01 2C 06 F1 | 	add	local04, #1
32e48     16 2B 42 FC | 	wrbyte	local03, local04
32e4c     16 13 C2 FA | 	rdbyte	arg01, local04
32e50     01 2C 86 F1 | 	sub	local04, #1
32e54     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
32e58     FD 16 02 F6 | 	mov	arg03, result1
32e5c     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
32e60     01 2E CE F7 | 	test	local05, #1 wz
32e64                 | ' 		return FR_NOT_READY;
32e64     03 FA 05 56 |  if_ne	mov	result1, #3
32e68     98 04 90 5D |  if_ne	jmp	#LR__5000
32e6c     00 28 0E F2 | 	cmp	local02, #0 wz
32e70     0B 2F 02 56 |  if_ne	mov	local05, arg03
32e74     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
32e78     04 2E CE 57 |  if_ne	test	local05, #4 wz
32e7c                 | ' 		return FR_WRITE_PROTECTED;
32e7c     0A FA 05 56 |  if_ne	mov	result1, #10
32e80     80 04 90 5D |  if_ne	jmp	#LR__5000
32e84     16 13 02 F6 | 	mov	arg01, local04
32e88     00 14 06 F6 | 	mov	arg02, #0
32e8c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
32e90     FD 12 02 F6 | 	mov	arg01, result1
32e94     04 12 0E F2 | 	cmp	arg01, #4 wz
32e98     01 FA 05 A6 |  if_e	mov	result1, #1
32e9c     64 04 90 AD |  if_e	jmp	#LR__5000
32ea0     02 12 16 F2 | 	cmp	arg01, #2 wc
32ea4     0D FA 05 36 |  if_ae	mov	result1, #13
32ea8     58 04 90 3D |  if_ae	jmp	#LR__5000
32eac     30 2C 06 F1 | 	add	local04, #48
32eb0     16 31 02 FB | 	rdlong	local06, local04
32eb4     04 2C 06 F1 | 	add	local04, #4
32eb8     16 13 02 F6 | 	mov	arg01, local04
32ebc     34 2C 86 F1 | 	sub	local04, #52
32ec0     0B 12 06 F1 | 	add	arg01, #11
32ec4                 | ' {
32ec4                 | ' 
32ec4                 | ' 	return *((WORD*)ptr);
32ec4     09 FB E1 FA | 	rdword	result1, arg01
32ec8     01 00 00 FF 
32ecc     00 FA 0D F2 | 	cmp	result1, ##512 wz
32ed0     0D FA 05 56 |  if_ne	mov	result1, #13
32ed4     2C 04 90 5D |  if_ne	jmp	#LR__5000
32ed8     34 2C 06 F1 | 	add	local04, #52
32edc     16 13 02 F6 | 	mov	arg01, local04
32ee0     34 2C 86 F1 | 	sub	local04, #52
32ee4     16 12 06 F1 | 	add	arg01, #22
32ee8                 | ' {
32ee8                 | ' 
32ee8                 | ' 	return *((WORD*)ptr);
32ee8     09 FB E1 FA | 	rdword	result1, arg01
32eec     FD 32 0A F6 | 	mov	local07, result1 wz
32ef0     18 00 90 5D |  if_ne	jmp	#LR__4992
32ef4     34 2C 06 F1 | 	add	local04, #52
32ef8     16 13 02 F6 | 	mov	arg01, local04
32efc     34 2C 86 F1 | 	sub	local04, #52
32f00     24 12 06 F1 | 	add	arg01, #36
32f04                 | ' {
32f04                 | ' 
32f04                 | ' 	return *((DWORD*)ptr);
32f04     09 FB 01 FB | 	rdlong	result1, arg01
32f08     FD 32 02 F6 | 	mov	local07, result1
32f0c                 | LR__4992
32f0c     1C 2C 06 F1 | 	add	local04, #28
32f10     16 33 62 FC | 	wrlong	local07, local04
32f14     28 2C 06 F1 | 	add	local04, #40
32f18     16 2F C2 FA | 	rdbyte	local05, local04
32f1c     42 2C 86 F1 | 	sub	local04, #66
32f20     16 2F 42 FC | 	wrbyte	local05, local04
32f24     16 2F C2 FA | 	rdbyte	local05, local04
32f28     02 2C 86 F1 | 	sub	local04, #2
32f2c     01 2E 0E F2 | 	cmp	local05, #1 wz
32f30     02 2C 06 51 |  if_ne	add	local04, #2
32f34     16 2F C2 5A |  if_ne	rdbyte	local05, local04
32f38     02 2C 86 51 |  if_ne	sub	local04, #2
32f3c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
32f40     0D FA 05 56 |  if_ne	mov	result1, #13
32f44     BC 03 90 5D |  if_ne	jmp	#LR__5000
32f48     02 2C 06 F1 | 	add	local04, #2
32f4c     16 2F C2 FA | 	rdbyte	local05, local04
32f50     17 33 02 FD | 	qmul	local07, local05
32f54     3F 2C 06 F1 | 	add	local04, #63
32f58     16 2F C2 FA | 	rdbyte	local05, local04
32f5c     37 2C 86 F1 | 	sub	local04, #55
32f60     16 2F 52 FC | 	wrword	local05, local04
32f64     16 2F EA FA | 	rdword	local05, local04 wz
32f68     0A 2C 86 F1 | 	sub	local04, #10
32f6c     18 32 62 FD | 	getqx	local07
32f70     20 00 90 AD |  if_e	jmp	#LR__4993
32f74     0A 2C 06 F1 | 	add	local04, #10
32f78     16 2F E2 FA | 	rdword	local05, local04
32f7c     17 2B 32 F9 | 	getword	local03, local05, #0
32f80     0A 2C 86 F1 | 	sub	local04, #10
32f84     17 2F 32 F9 | 	getword	local05, local05, #0
32f88     01 2E 86 F1 | 	sub	local05, #1
32f8c     17 2B CA F7 | 	test	local03, local05 wz
32f90     08 00 90 AD |  if_e	jmp	#LR__4994
32f94                 | LR__4993
32f94     0D FA 05 F6 | 	mov	result1, #13
32f98     68 03 90 FD | 	jmp	#LR__5000
32f9c                 | LR__4994
32f9c     34 2C 06 F1 | 	add	local04, #52
32fa0     16 13 02 F6 | 	mov	arg01, local04
32fa4     11 12 06 F1 | 	add	arg01, #17
32fa8                 | ' {
32fa8                 | ' 
32fa8                 | ' 	return *((WORD*)ptr);
32fa8     09 FB E1 FA | 	rdword	result1, arg01
32fac     2C 2C 86 F1 | 	sub	local04, #44
32fb0     16 FB 51 FC | 	wrword	result1, local04
32fb4     16 2F E2 FA | 	rdword	local05, local04
32fb8     08 2C 86 F1 | 	sub	local04, #8
32fbc     17 13 52 F6 | 	abs	arg01, local05 wc
32fc0     09 13 42 F8 | 	getnib	arg01, arg01, #0
32fc4     09 13 8A F6 | 	negc	arg01, arg01 wz
32fc8     0D FA 05 56 |  if_ne	mov	result1, #13
32fcc     34 03 90 5D |  if_ne	jmp	#LR__5000
32fd0     34 2C 06 F1 | 	add	local04, #52
32fd4     16 13 02 F6 | 	mov	arg01, local04
32fd8     34 2C 86 F1 | 	sub	local04, #52
32fdc     13 12 06 F1 | 	add	arg01, #19
32fe0                 | ' {
32fe0                 | ' 
32fe0                 | ' 	return *((WORD*)ptr);
32fe0     09 FB E1 FA | 	rdword	result1, arg01
32fe4     FD 34 0A F6 | 	mov	local08, result1 wz
32fe8     34 2C 06 A1 |  if_e	add	local04, #52
32fec     16 13 02 A6 |  if_e	mov	arg01, local04
32ff0     34 2C 86 A1 |  if_e	sub	local04, #52
32ff4     20 12 06 A1 |  if_e	add	arg01, #32
32ff8                 | ' {
32ff8                 | ' 
32ff8                 | ' 	return *((DWORD*)ptr);
32ff8     09 35 02 AB |  if_e	rdlong	local08, arg01
32ffc     34 2C 06 F1 | 	add	local04, #52
33000     16 13 02 F6 | 	mov	arg01, local04
33004     34 2C 86 F1 | 	sub	local04, #52
33008     0E 12 06 F1 | 	add	arg01, #14
3300c                 | ' {
3300c                 | ' 
3300c                 | ' 	return *((WORD*)ptr);
3300c     09 FB E1 FA | 	rdword	result1, arg01
33010     FD 12 02 F6 | 	mov	arg01, result1
33014     09 2F 02 F6 | 	mov	local05, arg01
33018     0F 2E 4E F7 | 	zerox	local05, #15 wz
3301c     0D FA 05 A6 |  if_e	mov	result1, #13
33020     E0 02 90 AD |  if_e	jmp	#LR__5000
33024     09 37 32 F9 | 	getword	local09, arg01, #0
33028     19 37 02 F1 | 	add	local09, local07
3302c     08 2C 06 F1 | 	add	local04, #8
33030     16 2F E2 FA | 	rdword	local05, local04
33034     08 2C 86 F1 | 	sub	local04, #8
33038     17 2F 52 F6 | 	abs	local05, local05 wc
3303c     04 2E 46 F0 | 	shr	local05, #4
33040     17 37 82 F3 | 	sumc	local09, local05
33044     1B 35 12 F2 | 	cmp	local08, local09 wc
33048     0D FA 05 C6 |  if_b	mov	result1, #13
3304c     B4 02 90 CD |  if_b	jmp	#LR__5000
33050     1B 35 82 F1 | 	sub	local08, local09
33054     0A 2C 06 F1 | 	add	local04, #10
33058     16 2F E2 FA | 	rdword	local05, local04
3305c     17 35 12 FD | 	qdiv	local08, local05
33060     0A 2C 86 F1 | 	sub	local04, #10
33064     18 2E 62 FD | 	getqx	local05
33068     00 2E 0E F2 | 	cmp	local05, #0 wz
3306c     0D FA 05 A6 |  if_e	mov	result1, #13
33070     90 02 90 AD |  if_e	jmp	#LR__5000
33074     00 38 06 F6 | 	mov	local10, #0
33078     FF FF 07 FF 
3307c     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
33080     03 38 06 C6 |  if_b	mov	local10, #3
33084     7F 00 00 FF 
33088     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
3308c     02 38 06 C6 |  if_b	mov	local10, #2
33090     07 00 00 FF 
33094     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
33098     01 38 06 C6 |  if_b	mov	local10, #1
3309c     00 38 0E F2 | 	cmp	local10, #0 wz
330a0     0D FA 05 A6 |  if_e	mov	result1, #13
330a4     5C 02 90 AD |  if_e	jmp	#LR__5000
330a8     02 2E 06 F1 | 	add	local05, #2
330ac     18 2C 06 F1 | 	add	local04, #24
330b0     16 2F 62 FC | 	wrlong	local05, local04
330b4     08 2C 06 F1 | 	add	local04, #8
330b8     16 31 62 FC | 	wrlong	local06, local04
330bc     18 2F 02 F6 | 	mov	local05, local06
330c0     09 13 32 F9 | 	getword	arg01, arg01, #0
330c4     09 2F 02 F1 | 	add	local05, arg01
330c8     04 2C 06 F1 | 	add	local04, #4
330cc     16 2F 62 FC | 	wrlong	local05, local04
330d0     18 2F 02 F6 | 	mov	local05, local06
330d4     1B 2F 02 F1 | 	add	local05, local09
330d8     08 2C 06 F1 | 	add	local04, #8
330dc     16 2F 62 FC | 	wrlong	local05, local04
330e0     2C 2C 86 F1 | 	sub	local04, #44
330e4     03 38 0E F2 | 	cmp	local10, #3 wz
330e8     5C 00 90 5D |  if_ne	jmp	#LR__4995
330ec     34 2C 06 F1 | 	add	local04, #52
330f0     16 13 02 F6 | 	mov	arg01, local04
330f4     34 2C 86 F1 | 	sub	local04, #52
330f8     2A 12 06 F1 | 	add	arg01, #42
330fc                 | ' {
330fc                 | ' 
330fc                 | ' 	return *((WORD*)ptr);
330fc     09 FB E9 FA | 	rdword	result1, arg01 wz
33100     0D FA 05 56 |  if_ne	mov	result1, #13
33104     FC 01 90 5D |  if_ne	jmp	#LR__5000
33108     08 2C 06 F1 | 	add	local04, #8
3310c     16 2F EA FA | 	rdword	local05, local04 wz
33110     08 2C 86 F1 | 	sub	local04, #8
33114     0D FA 05 56 |  if_ne	mov	result1, #13
33118     E8 01 90 5D |  if_ne	jmp	#LR__5000
3311c     34 2C 06 F1 | 	add	local04, #52
33120     16 13 02 F6 | 	mov	arg01, local04
33124     2C 12 06 F1 | 	add	arg01, #44
33128                 | ' {
33128                 | ' 
33128                 | ' 	return *((DWORD*)ptr);
33128     09 FB 01 FB | 	rdlong	result1, arg01
3312c     0C 2C 86 F1 | 	sub	local04, #12
33130     16 FB 61 FC | 	wrlong	result1, local04
33134     10 2C 86 F1 | 	sub	local04, #16
33138     16 3B 02 FB | 	rdlong	local11, local04
3313c     18 2C 86 F1 | 	sub	local04, #24
33140     02 3A 66 F0 | 	shl	local11, #2
33144     6C 00 90 FD | 	jmp	#LR__4997
33148                 | LR__4995
33148     08 2C 06 F1 | 	add	local04, #8
3314c     16 2F EA FA | 	rdword	local05, local04 wz
33150     08 2C 86 F1 | 	sub	local04, #8
33154     0D FA 05 A6 |  if_e	mov	result1, #13
33158     A8 01 90 AD |  if_e	jmp	#LR__5000
3315c     24 2C 06 F1 | 	add	local04, #36
33160     16 2F 02 FB | 	rdlong	local05, local04
33164     19 2F 02 F1 | 	add	local05, local07
33168     04 2C 06 F1 | 	add	local04, #4
3316c     16 2F 62 FC | 	wrlong	local05, local04
33170     28 2C 86 F1 | 	sub	local04, #40
33174     02 38 0E F2 | 	cmp	local10, #2 wz
33178     18 2C 06 A1 |  if_e	add	local04, #24
3317c     16 2F 02 AB |  if_e	rdlong	local05, local04
33180     18 2C 86 A1 |  if_e	sub	local04, #24
33184     01 2E 66 A0 |  if_e	shl	local05, #1
33188     24 00 90 AD |  if_e	jmp	#LR__4996
3318c     18 2C 06 F1 | 	add	local04, #24
33190     16 3B 02 FB | 	rdlong	local11, local04
33194     1D 2F 02 F6 | 	mov	local05, local11
33198     01 2E 66 F0 | 	shl	local05, #1
3319c     1D 2F 02 F1 | 	add	local05, local11
331a0     01 2E 46 F0 | 	shr	local05, #1
331a4     18 2C 86 F1 | 	sub	local04, #24
331a8     01 3A 06 F5 | 	and	local11, #1
331ac     1D 2F 02 F1 | 	add	local05, local11
331b0                 | LR__4996
331b0     17 3B 02 F6 | 	mov	local11, local05
331b4                 | LR__4997
331b4     FF 3B 06 F1 | 	add	local11, #511
331b8     09 3A 46 F0 | 	shr	local11, #9
331bc     1C 2C 06 F1 | 	add	local04, #28
331c0     16 17 02 FB | 	rdlong	arg03, local04
331c4     1C 2C 86 F1 | 	sub	local04, #28
331c8     1D 17 12 F2 | 	cmp	arg03, local11 wc
331cc     0D FA 05 C6 |  if_b	mov	result1, #13
331d0     30 01 90 CD |  if_b	jmp	#LR__5000
331d4     14 2C 06 F1 | 	add	local04, #20
331d8     FF FF FF FF 
331dc     16 FF 6B FC | 	wrlong	##-1, local04
331e0     04 2C 86 F1 | 	sub	local04, #4
331e4     FF FF FF FF 
331e8     16 FF 6B FC | 	wrlong	##-1, local04
331ec     0C 2C 86 F1 | 	sub	local04, #12
331f0     16 01 49 FC | 	wrbyte	#128, local04
331f4     04 2C 86 F1 | 	sub	local04, #4
331f8     03 38 0E F2 | 	cmp	local10, #3 wz
331fc     D0 00 90 5D |  if_ne	jmp	#LR__4999
33200     34 2C 06 F1 | 	add	local04, #52
33204     16 13 02 F6 | 	mov	arg01, local04
33208     34 2C 86 F1 | 	sub	local04, #52
3320c     30 12 06 F1 | 	add	arg01, #48
33210                 | ' {
33210                 | ' 
33210                 | ' 	return *((WORD*)ptr);
33210     09 FB E1 FA | 	rdword	result1, arg01
33214     FD 2E 32 F9 | 	getword	local05, result1, #0
33218     01 2E 0E F2 | 	cmp	local05, #1 wz
3321c     B0 00 90 5D |  if_ne	jmp	#LR__4999
33220     01 30 06 F1 | 	add	local06, #1
33224     16 13 02 F6 | 	mov	arg01, local04
33228     18 15 02 F6 | 	mov	arg02, local06
3322c     CC CD BF FD | 	call	#_fatfs_cc_move_window
33230     00 FA 0D F2 | 	cmp	result1, #0 wz
33234     98 00 90 5D |  if_ne	jmp	#LR__4999
33238     04 2C 06 F1 | 	add	local04, #4
3323c     16 01 48 FC | 	wrbyte	#0, local04
33240     30 2C 06 F1 | 	add	local04, #48
33244     16 13 02 F6 | 	mov	arg01, local04
33248     34 2C 86 F1 | 	sub	local04, #52
3324c     FE 13 06 F1 | 	add	arg01, #510
33250                 | ' {
33250                 | ' 
33250                 | ' 	return *((WORD*)ptr);
33250     09 FB E1 FA | 	rdword	result1, arg01
33254     FD 2E 32 F9 | 	getword	local05, result1, #0
33258     55 00 00 FF 
3325c     55 2E 0E F2 | 	cmp	local05, ##43605 wz
33260     34 2C 06 A1 |  if_e	add	local04, #52
33264     16 13 02 A6 |  if_e	mov	arg01, local04
33268     34 2C 86 A1 |  if_e	sub	local04, #52
3326c                 | ' {
3326c                 | ' 
3326c                 | ' 	return *((DWORD*)ptr);
3326c     09 FB 01 AB |  if_e	rdlong	result1, arg01
33270     A9 B0 20 AF 
33274     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
33278     54 00 90 5D |  if_ne	jmp	#LR__4998
3327c     34 2C 06 F1 | 	add	local04, #52
33280     16 13 02 F6 | 	mov	arg01, local04
33284     34 2C 86 F1 | 	sub	local04, #52
33288     E4 13 06 F1 | 	add	arg01, #484
3328c                 | ' {
3328c                 | ' 
3328c                 | ' 	return *((DWORD*)ptr);
3328c     09 FB 01 FB | 	rdlong	result1, arg01
33290     B9 A0 30 FF 
33294     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
33298     34 00 90 5D |  if_ne	jmp	#LR__4998
3329c     34 2C 06 F1 | 	add	local04, #52
332a0     16 13 02 F6 | 	mov	arg01, local04
332a4     E8 13 06 F1 | 	add	arg01, #488
332a8                 | ' {
332a8                 | ' 
332a8                 | ' 	return *((DWORD*)ptr);
332a8     09 FB 01 FB | 	rdlong	result1, arg01
332ac     20 2C 86 F1 | 	sub	local04, #32
332b0     16 FB 61 FC | 	wrlong	result1, local04
332b4     20 2C 06 F1 | 	add	local04, #32
332b8     16 13 02 F6 | 	mov	arg01, local04
332bc     EC 13 06 F1 | 	add	arg01, #492
332c0                 | ' {
332c0                 | ' 
332c0                 | ' 	return *((DWORD*)ptr);
332c0     09 FB 01 FB | 	rdlong	result1, arg01
332c4     24 2C 86 F1 | 	sub	local04, #36
332c8     16 FB 61 FC | 	wrlong	result1, local04
332cc     10 2C 86 F1 | 	sub	local04, #16
332d0                 | LR__4998
332d0                 | LR__4999
332d0     16 39 42 FC | 	wrbyte	local10, local04
332d4     04 E4 05 F1 | 	add	objptr, #4
332d8     F2 2E E2 FA | 	rdword	local05, objptr
332dc     01 2E 06 F1 | 	add	local05, #1
332e0     F2 2E 52 FC | 	wrword	local05, objptr
332e4     F2 3A E2 FA | 	rdword	local11, objptr
332e8     06 2C 06 F1 | 	add	local04, #6
332ec     16 3B 52 FC | 	wrword	local11, local04
332f0     04 E4 05 F1 | 	add	objptr, #4
332f4     06 2C 06 F1 | 	add	local04, #6
332f8     16 E5 61 FC | 	wrlong	objptr, local04
332fc                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
332fc                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
332fc                 | ' 			{
332fc                 | ' 
332fc                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
332fc                 | ' 
332fc                 | ' 
332fc                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
332fc                 | ' 
332fc                 | ' 			}
332fc                 | ' 		}
332fc                 | ' 
332fc                 | ' 
332fc                 | ' 	}
332fc                 | ' 
332fc                 | ' 	fs->fs_type = (BYTE)fmt;
332fc                 | ' 	fs->id = ++Fsid;
332fc                 | ' 
332fc                 | ' 	fs->lfnbuf = LfnBuf;
332fc                 | ' #line 3567 "ff.c"
332fc                 | ' 	return FR_OK;
332fc     00 FA 05 F6 | 	mov	result1, #0
33300     08 E4 85 F1 | 	sub	objptr, #8
33304                 | LR__5000
33304     A7 F0 03 F6 | 	mov	ptra, fp
33308     B2 00 A0 FD | 	call	#popregs_
3330c                 | _fatfs_cc_mount_volume_ret
3330c     2D 00 64 FD | 	ret
33310                 | 
33310                 | _fatfs_cc_validate
33310     09 01 0A F6 | 	mov	_var01, arg01 wz
33314     09 02 06 F6 | 	mov	_var02, #9
33318     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
3331c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
33320     50 00 90 AD |  if_e	jmp	#LR__5010
33324     04 00 06 F1 | 	add	_var01, #4
33328     00 07 E2 FA | 	rdword	_var04, _var01
3332c     04 00 86 F1 | 	sub	_var01, #4
33330     00 13 02 FB | 	rdlong	arg01, _var01
33334     06 12 06 F1 | 	add	arg01, #6
33338     09 FB E1 FA | 	rdword	result1, arg01
3333c     FD 06 0A F2 | 	cmp	_var04, result1 wz
33340     30 00 90 5D |  if_ne	jmp	#LR__5010
33344     00 07 02 FB | 	rdlong	_var04, _var01
33348     01 06 06 F1 | 	add	_var04, #1
3334c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
33350     01 FA 05 56 |  if_ne	mov	result1, #1
33354                 | ' 
33354                 | ' 	return Stat;
33354     01 00 00 AF 
33358     20 E4 05 A1 |  if_e	add	objptr, ##544
3335c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
33360     01 00 00 AF 
33364     20 E4 85 A1 |  if_e	sub	objptr, ##544
33368     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
3336c     01 04 CE F7 | 	test	_var03, #1 wz
33370     00 02 06 A6 |  if_e	mov	_var02, #0
33374                 | LR__5010
33374     00 02 0E F2 | 	cmp	_var02, #0 wz
33378     00 05 02 AB |  if_e	rdlong	_var03, _var01
3337c     00 04 06 56 |  if_ne	mov	_var03, #0
33380     0A 05 62 FC | 	wrlong	_var03, arg02
33384                 | ' 			res = FR_OK;
33384                 | ' 		}
33384                 | ' 
33384                 | ' 	}
33384                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
33384                 | ' 	return res;
33384     01 FB 01 F6 | 	mov	result1, _var02
33388                 | _fatfs_cc_validate_ret
33388     2D 00 64 FD | 	ret
3338c                 | 
3338c                 | _fatfs_cc_f_mount
3338c     01 4A 05 F6 | 	mov	COUNT_, #1
33390     A8 00 A0 FD | 	call	#pushregs_
33394     20 F0 07 F1 | 	add	ptra, #32
33398     04 4E 05 F1 | 	add	fp, #4
3339c     A7 12 62 FC | 	wrlong	arg01, fp
333a0     04 4E 05 F1 | 	add	fp, #4
333a4     A7 14 62 FC | 	wrlong	arg02, fp
333a8     04 4E 05 F1 | 	add	fp, #4
333ac     A7 16 42 FC | 	wrbyte	arg03, fp
333b0     04 4E 85 F1 | 	sub	fp, #4
333b4     A7 16 02 FB | 	rdlong	arg03, fp
333b8     14 4E 05 F1 | 	add	fp, #20
333bc     A7 16 62 FC | 	wrlong	arg03, fp
333c0     A7 12 02 F6 | 	mov	arg01, fp
333c4     1C 4E 85 F1 | 	sub	fp, #28
333c8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
333cc     14 4E 05 F1 | 	add	fp, #20
333d0     A7 FA 61 FC | 	wrlong	result1, fp
333d4     14 4E 85 F1 | 	sub	fp, #20
333d8     00 FA 55 F2 | 	cmps	result1, #0 wc
333dc     0B FA 05 C6 |  if_b	mov	result1, #11
333e0     C0 00 90 CD |  if_b	jmp	#LR__5021
333e4     14 4E 05 F1 | 	add	fp, #20
333e8     A7 16 02 FB | 	rdlong	arg03, fp
333ec     02 16 66 F0 | 	shl	arg03, #2
333f0     F2 16 02 F1 | 	add	arg03, objptr
333f4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
333f8     04 4E 85 F1 | 	sub	fp, #4
333fc     A7 16 62 FC | 	wrlong	arg03, fp
33400     10 4E 85 F1 | 	sub	fp, #16
33404     28 00 90 AD |  if_e	jmp	#LR__5020
33408     10 4E 05 F1 | 	add	fp, #16
3340c     A7 16 02 FB | 	rdlong	arg03, fp
33410     10 4E 85 F1 | 	sub	fp, #16
33414     01 16 06 F1 | 	add	arg03, #1
33418     0B 13 C2 FA | 	rdbyte	arg01, arg03
3341c     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
33420     10 4E 05 F1 | 	add	fp, #16
33424     A7 16 02 FB | 	rdlong	arg03, fp
33428     10 4E 85 F1 | 	sub	fp, #16
3342c     0B 01 48 FC | 	wrbyte	#0, arg03
33430                 | LR__5020
33430     04 4E 05 F1 | 	add	fp, #4
33434     A7 26 0A FB | 	rdlong	local01, fp wz
33438     04 4E 85 F1 | 	sub	fp, #4
3343c     04 4E 05 51 |  if_ne	add	fp, #4
33440     A7 26 02 5B |  if_ne	rdlong	local01, fp
33444     04 4E 85 51 |  if_ne	sub	fp, #4
33448     13 01 48 5C |  if_ne	wrbyte	#0, local01
3344c     14 4E 05 F1 | 	add	fp, #20
33450     A7 26 02 FB | 	rdlong	local01, fp
33454     02 26 66 F0 | 	shl	local01, #2
33458     F2 26 02 F1 | 	add	local01, objptr
3345c     10 4E 85 F1 | 	sub	fp, #16
33460     A7 16 02 FB | 	rdlong	arg03, fp
33464     13 17 62 FC | 	wrlong	arg03, local01
33468     08 4E 05 F1 | 	add	fp, #8
3346c     A7 26 CA FA | 	rdbyte	local01, fp wz
33470     0C 4E 85 F1 | 	sub	fp, #12
33474     00 FA 05 A6 |  if_e	mov	result1, #0
33478     28 00 90 AD |  if_e	jmp	#LR__5021
3347c     08 4E 05 F1 | 	add	fp, #8
33480     A7 12 02 F6 | 	mov	arg01, fp
33484     04 4E 85 F1 | 	sub	fp, #4
33488     A7 14 02 F6 | 	mov	arg02, fp
3348c     04 4E 85 F1 | 	sub	fp, #4
33490     00 16 06 F6 | 	mov	arg03, #0
33494     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
33498     18 4E 05 F1 | 	add	fp, #24
3349c     A7 FA 61 FC | 	wrlong	result1, fp
334a0                 | ' 
334a0                 | ' 	res = mount_volume(&path, &fs, 0);
334a0                 | ' 	return res ;
334a0     18 4E 85 F1 | 	sub	fp, #24
334a4                 | LR__5021
334a4     A7 F0 03 F6 | 	mov	ptra, fp
334a8     B2 00 A0 FD | 	call	#popregs_
334ac                 | _fatfs_cc_f_mount_ret
334ac     2D 00 64 FD | 	ret
334b0                 | 
334b0                 | _fatfs_cc_f_open
334b0     02 4A 05 F6 | 	mov	COUNT_, #2
334b4     A8 00 A0 FD | 	call	#pushregs_
334b8     60 F0 07 F1 | 	add	ptra, #96
334bc     04 4E 05 F1 | 	add	fp, #4
334c0     A7 12 62 FC | 	wrlong	arg01, fp
334c4     04 4E 05 F1 | 	add	fp, #4
334c8     A7 14 62 FC | 	wrlong	arg02, fp
334cc     04 4E 05 F1 | 	add	fp, #4
334d0     A7 16 42 FC | 	wrbyte	arg03, fp
334d4     08 4E 85 F1 | 	sub	fp, #8
334d8     A7 18 0A FB | 	rdlong	arg04, fp wz
334dc     04 4E 85 F1 | 	sub	fp, #4
334e0     09 FA 05 A6 |  if_e	mov	result1, #9
334e4     98 06 90 AD |  if_e	jmp	#LR__5047
334e8     0C 4E 05 F1 | 	add	fp, #12
334ec     A7 18 C2 FA | 	rdbyte	arg04, fp
334f0     3F 18 06 F5 | 	and	arg04, #63
334f4     A7 18 42 FC | 	wrbyte	arg04, fp
334f8     04 4E 85 F1 | 	sub	fp, #4
334fc     A7 12 02 F6 | 	mov	arg01, fp
33500     3C 4E 05 F1 | 	add	fp, #60
33504     A7 14 02 F6 | 	mov	arg02, fp
33508     38 4E 85 F1 | 	sub	fp, #56
3350c     A7 16 C2 FA | 	rdbyte	arg03, fp
33510     0C 4E 85 F1 | 	sub	fp, #12
33514     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
33518     10 4E 05 F1 | 	add	fp, #16
3351c     A7 FA 61 FC | 	wrlong	result1, fp
33520     10 4E 85 F1 | 	sub	fp, #16
33524     00 FA 0D F2 | 	cmp	result1, #0 wz
33528     2C 06 90 5D |  if_ne	jmp	#LR__5046
3352c     44 4E 05 F1 | 	add	fp, #68
33530     A7 18 02 FB | 	rdlong	arg04, fp
33534     30 4E 85 F1 | 	sub	fp, #48
33538     A7 18 62 FC | 	wrlong	arg04, fp
3353c     A7 12 02 F6 | 	mov	arg01, fp
33540     0C 4E 85 F1 | 	sub	fp, #12
33544     A7 26 02 FB | 	rdlong	local01, fp
33548     08 4E 85 F1 | 	sub	fp, #8
3354c     13 15 02 F6 | 	mov	arg02, local01
33550     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
33554     10 4E 05 F1 | 	add	fp, #16
33558     A7 FA 61 FC | 	wrlong	result1, fp
3355c     10 4E 85 F1 | 	sub	fp, #16
33560     00 FA 0D F2 | 	cmp	result1, #0 wz
33564     1C 00 90 5D |  if_ne	jmp	#LR__5030
33568     3F 4E 05 F1 | 	add	fp, #63
3356c     A7 18 C2 FA | 	rdbyte	arg04, fp
33570     3F 4E 85 F1 | 	sub	fp, #63
33574     80 18 CE F7 | 	test	arg04, #128 wz
33578     10 4E 05 51 |  if_ne	add	fp, #16
3357c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33580     10 4E 85 51 |  if_ne	sub	fp, #16
33584                 | LR__5030
33584     0C 4E 05 F1 | 	add	fp, #12
33588     A7 18 C2 FA | 	rdbyte	arg04, fp
3358c     0C 4E 85 F1 | 	sub	fp, #12
33590     1C 18 CE F7 | 	test	arg04, #28 wz
33594     F0 01 90 AD |  if_e	jmp	#LR__5035
33598     10 4E 05 F1 | 	add	fp, #16
3359c     A7 26 0A FB | 	rdlong	local01, fp wz
335a0     10 4E 85 F1 | 	sub	fp, #16
335a4     48 00 90 AD |  if_e	jmp	#LR__5032
335a8     10 4E 05 F1 | 	add	fp, #16
335ac     A7 18 02 FB | 	rdlong	arg04, fp
335b0     10 4E 85 F1 | 	sub	fp, #16
335b4     04 18 0E F2 | 	cmp	arg04, #4 wz
335b8     1C 00 90 5D |  if_ne	jmp	#LR__5031
335bc     14 4E 05 F1 | 	add	fp, #20
335c0     A7 12 02 F6 | 	mov	arg01, fp
335c4     14 4E 85 F1 | 	sub	fp, #20
335c8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
335cc     10 4E 05 F1 | 	add	fp, #16
335d0     A7 FA 61 FC | 	wrlong	result1, fp
335d4     10 4E 85 F1 | 	sub	fp, #16
335d8                 | LR__5031
335d8     0C 4E 05 F1 | 	add	fp, #12
335dc     A7 26 C2 FA | 	rdbyte	local01, fp
335e0     08 26 46 F5 | 	or	local01, #8
335e4     A7 26 42 FC | 	wrbyte	local01, fp
335e8     0C 4E 85 F1 | 	sub	fp, #12
335ec     3C 00 90 FD | 	jmp	#LR__5034
335f0                 | LR__5032
335f0     1A 4E 05 F1 | 	add	fp, #26
335f4     A7 26 C2 FA | 	rdbyte	local01, fp
335f8     1A 4E 85 F1 | 	sub	fp, #26
335fc     11 26 CE F7 | 	test	local01, #17 wz
33600     10 4E 05 51 |  if_ne	add	fp, #16
33604     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33608     10 4E 85 51 |  if_ne	sub	fp, #16
3360c     1C 00 90 5D |  if_ne	jmp	#LR__5033
33610     0C 4E 05 F1 | 	add	fp, #12
33614     A7 26 C2 FA | 	rdbyte	local01, fp
33618     0C 4E 85 F1 | 	sub	fp, #12
3361c     04 26 CE F7 | 	test	local01, #4 wz
33620     10 4E 05 51 |  if_ne	add	fp, #16
33624     A7 10 68 5C |  if_ne	wrlong	#8, fp
33628     10 4E 85 51 |  if_ne	sub	fp, #16
3362c                 | LR__5033
3362c                 | LR__5034
3362c     10 4E 05 F1 | 	add	fp, #16
33630     A7 26 0A FB | 	rdlong	local01, fp wz
33634     10 4E 85 F1 | 	sub	fp, #16
33638     A8 01 90 5D |  if_ne	jmp	#LR__5038
3363c     0C 4E 05 F1 | 	add	fp, #12
33640     A7 26 C2 FA | 	rdbyte	local01, fp
33644     0C 4E 85 F1 | 	sub	fp, #12
33648     08 26 CE F7 | 	test	local01, #8 wz
3364c     94 01 90 AD |  if_e	jmp	#LR__5038
33650     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
33654     54 4E 05 F1 | 	add	fp, #84
33658     A7 FA 61 FC | 	wrlong	result1, fp
3365c     24 4E 85 F1 | 	sub	fp, #36
33660     A7 12 02 FB | 	rdlong	arg01, fp
33664     0E 12 06 F1 | 	add	arg01, #14
33668     09 FB 61 FC | 	wrlong	result1, arg01
3366c     A7 12 02 FB | 	rdlong	arg01, fp
33670     16 12 06 F1 | 	add	arg01, #22
33674     24 4E 05 F1 | 	add	fp, #36
33678     A7 14 02 FB | 	rdlong	arg02, fp
3367c     09 15 62 FC | 	wrlong	arg02, arg01
33680     10 4E 85 F1 | 	sub	fp, #16
33684     A7 12 02 FB | 	rdlong	arg01, fp
33688     14 4E 85 F1 | 	sub	fp, #20
3368c     A7 14 02 FB | 	rdlong	arg02, fp
33690     30 4E 85 F1 | 	sub	fp, #48
33694     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
33698     48 4E 05 F1 | 	add	fp, #72
3369c     A7 FA 61 FC | 	wrlong	result1, fp
336a0     18 4E 85 F1 | 	sub	fp, #24
336a4     A7 26 02 FB | 	rdlong	local01, fp
336a8     0B 26 06 F1 | 	add	local01, #11
336ac     13 41 48 FC | 	wrbyte	#32, local01
336b0     14 4E 05 F1 | 	add	fp, #20
336b4     A7 12 02 FB | 	rdlong	arg01, fp
336b8     14 4E 85 F1 | 	sub	fp, #20
336bc     A7 14 02 FB | 	rdlong	arg02, fp
336c0     30 4E 85 F1 | 	sub	fp, #48
336c4     00 16 06 F6 | 	mov	arg03, #0
336c8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
336cc     30 4E 05 F1 | 	add	fp, #48
336d0     A7 12 02 FB | 	rdlong	arg01, fp
336d4     1C 12 06 F1 | 	add	arg01, #28
336d8     09 01 68 FC | 	wrlong	#0, arg01
336dc     14 4E 05 F1 | 	add	fp, #20
336e0     A7 26 02 FB | 	rdlong	local01, fp
336e4     03 26 06 F1 | 	add	local01, #3
336e8     13 03 48 FC | 	wrbyte	#1, local01
336ec     04 4E 05 F1 | 	add	fp, #4
336f0     A7 26 0A FB | 	rdlong	local01, fp wz
336f4     48 4E 85 F1 | 	sub	fp, #72
336f8     E8 00 90 AD |  if_e	jmp	#LR__5038
336fc     44 4E 05 F1 | 	add	fp, #68
33700     A7 26 02 FB | 	rdlong	local01, fp
33704     30 26 06 F1 | 	add	local01, #48
33708     13 27 02 FB | 	rdlong	local01, local01
3370c     14 4E 05 F1 | 	add	fp, #20
33710     A7 26 62 FC | 	wrlong	local01, fp
33714     44 4E 85 F1 | 	sub	fp, #68
33718     A7 12 02 F6 | 	mov	arg01, fp
3371c     34 4E 05 F1 | 	add	fp, #52
33720     A7 14 02 FB | 	rdlong	arg02, fp
33724     48 4E 85 F1 | 	sub	fp, #72
33728     00 16 06 F6 | 	mov	arg03, #0
3372c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
33730     10 4E 05 F1 | 	add	fp, #16
33734     A7 FA 61 FC | 	wrlong	result1, fp
33738     10 4E 85 F1 | 	sub	fp, #16
3373c     00 FA 0D F2 | 	cmp	result1, #0 wz
33740     A0 00 90 5D |  if_ne	jmp	#LR__5038
33744     44 4E 05 F1 | 	add	fp, #68
33748     A7 12 02 FB | 	rdlong	arg01, fp
3374c     14 4E 05 F1 | 	add	fp, #20
33750     A7 14 02 FB | 	rdlong	arg02, fp
33754     58 4E 85 F1 | 	sub	fp, #88
33758     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
3375c     10 4E 05 F1 | 	add	fp, #16
33760     A7 FA 61 FC | 	wrlong	result1, fp
33764     34 4E 05 F1 | 	add	fp, #52
33768     A7 18 02 FB | 	rdlong	arg04, fp
3376c     04 4E 05 F1 | 	add	fp, #4
33770     A7 26 02 FB | 	rdlong	local01, fp
33774     48 4E 85 F1 | 	sub	fp, #72
33778     01 26 86 F1 | 	sub	local01, #1
3377c     10 18 06 F1 | 	add	arg04, #16
33780     0C 27 62 FC | 	wrlong	local01, arg04
33784     5C 00 90 FD | 	jmp	#LR__5038
33788                 | LR__5035
33788     10 4E 05 F1 | 	add	fp, #16
3378c     A7 18 0A FB | 	rdlong	arg04, fp wz
33790     10 4E 85 F1 | 	sub	fp, #16
33794     4C 00 90 5D |  if_ne	jmp	#LR__5037
33798     1A 4E 05 F1 | 	add	fp, #26
3379c     A7 18 C2 FA | 	rdbyte	arg04, fp
337a0     1A 4E 85 F1 | 	sub	fp, #26
337a4     10 18 CE F7 | 	test	arg04, #16 wz
337a8     10 4E 05 51 |  if_ne	add	fp, #16
337ac     A7 08 68 5C |  if_ne	wrlong	#4, fp
337b0     10 4E 85 51 |  if_ne	sub	fp, #16
337b4     2C 00 90 5D |  if_ne	jmp	#LR__5036
337b8     0C 4E 05 F1 | 	add	fp, #12
337bc     A7 18 C2 FA | 	rdbyte	arg04, fp
337c0     0C 4E 85 F1 | 	sub	fp, #12
337c4     02 18 CE F7 | 	test	arg04, #2 wz
337c8     1A 4E 05 51 |  if_ne	add	fp, #26
337cc     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
337d0     1A 4E 85 51 |  if_ne	sub	fp, #26
337d4     01 26 CE 57 |  if_ne	test	local01, #1 wz
337d8     10 4E 05 51 |  if_ne	add	fp, #16
337dc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
337e0     10 4E 85 51 |  if_ne	sub	fp, #16
337e4                 | LR__5036
337e4                 | LR__5037
337e4                 | LR__5038
337e4     10 4E 05 F1 | 	add	fp, #16
337e8     A7 26 0A FB | 	rdlong	local01, fp wz
337ec     10 4E 85 F1 | 	sub	fp, #16
337f0     60 00 90 5D |  if_ne	jmp	#LR__5039
337f4     0C 4E 05 F1 | 	add	fp, #12
337f8     A7 28 C2 FA | 	rdbyte	local02, fp
337fc     0C 4E 85 F1 | 	sub	fp, #12
33800     08 28 CE F7 | 	test	local02, #8 wz
33804     0C 4E 05 51 |  if_ne	add	fp, #12
33808     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
3380c     40 28 46 55 |  if_ne	or	local02, #64
33810     A7 28 42 5C |  if_ne	wrbyte	local02, fp
33814     0C 4E 85 51 |  if_ne	sub	fp, #12
33818     04 4E 05 F1 | 	add	fp, #4
3381c     A7 28 02 FB | 	rdlong	local02, fp
33820     40 4E 05 F1 | 	add	fp, #64
33824     A7 26 02 FB | 	rdlong	local01, fp
33828     30 26 06 F1 | 	add	local01, #48
3382c     13 27 02 FB | 	rdlong	local01, local01
33830     20 28 06 F1 | 	add	local02, #32
33834     14 27 62 FC | 	wrlong	local01, local02
33838     40 4E 85 F1 | 	sub	fp, #64
3383c     A7 28 02 FB | 	rdlong	local02, fp
33840     2C 4E 05 F1 | 	add	fp, #44
33844     A7 26 02 FB | 	rdlong	local01, fp
33848     30 4E 85 F1 | 	sub	fp, #48
3384c     24 28 06 F1 | 	add	local02, #36
33850     14 27 62 FC | 	wrlong	local01, local02
33854                 | LR__5039
33854     10 4E 05 F1 | 	add	fp, #16
33858     A7 28 0A FB | 	rdlong	local02, fp wz
3385c     10 4E 85 F1 | 	sub	fp, #16
33860     F4 02 90 5D |  if_ne	jmp	#LR__5045
33864     04 4E 05 F1 | 	add	fp, #4
33868     A7 28 02 FB | 	rdlong	local02, fp
3386c     40 4E 05 F1 | 	add	fp, #64
33870     A7 12 02 FB | 	rdlong	arg01, fp
33874     14 4E 85 F1 | 	sub	fp, #20
33878     A7 14 02 FB | 	rdlong	arg02, fp
3387c     30 4E 85 F1 | 	sub	fp, #48
33880     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
33884     08 28 06 F1 | 	add	local02, #8
33888     14 FB 61 FC | 	wrlong	result1, local02
3388c     04 4E 05 F1 | 	add	fp, #4
33890     A7 28 02 FB | 	rdlong	local02, fp
33894     2C 4E 05 F1 | 	add	fp, #44
33898     A7 12 02 FB | 	rdlong	arg01, fp
3389c     1C 12 06 F1 | 	add	arg01, #28
338a0                 | ' {
338a0                 | ' 
338a0                 | ' 	return *((DWORD*)ptr);
338a0     09 FB 01 FB | 	rdlong	result1, arg01
338a4     0C 28 06 F1 | 	add	local02, #12
338a8     14 FB 61 FC | 	wrlong	result1, local02
338ac     2C 4E 85 F1 | 	sub	fp, #44
338b0     A7 28 02 FB | 	rdlong	local02, fp
338b4     40 4E 05 F1 | 	add	fp, #64
338b8     A7 26 02 FB | 	rdlong	local01, fp
338bc     14 27 62 FC | 	wrlong	local01, local02
338c0     40 4E 85 F1 | 	sub	fp, #64
338c4     A7 28 02 FB | 	rdlong	local02, fp
338c8     40 4E 05 F1 | 	add	fp, #64
338cc     A7 26 02 FB | 	rdlong	local01, fp
338d0     06 26 06 F1 | 	add	local01, #6
338d4     13 27 E2 FA | 	rdword	local01, local01
338d8     04 28 06 F1 | 	add	local02, #4
338dc     14 27 52 FC | 	wrword	local01, local02
338e0     40 4E 85 F1 | 	sub	fp, #64
338e4     A7 28 02 FB | 	rdlong	local02, fp
338e8     08 4E 05 F1 | 	add	fp, #8
338ec     A7 26 C2 FA | 	rdbyte	local01, fp
338f0     10 28 06 F1 | 	add	local02, #16
338f4     14 27 42 FC | 	wrbyte	local01, local02
338f8     08 4E 85 F1 | 	sub	fp, #8
338fc     A7 28 02 FB | 	rdlong	local02, fp
33900     11 28 06 F1 | 	add	local02, #17
33904     14 01 48 FC | 	wrbyte	#0, local02
33908     A7 28 02 FB | 	rdlong	local02, fp
3390c     1C 28 06 F1 | 	add	local02, #28
33910     14 01 68 FC | 	wrlong	#0, local02
33914     A7 28 02 FB | 	rdlong	local02, fp
33918     14 28 06 F1 | 	add	local02, #20
3391c     14 01 68 FC | 	wrlong	#0, local02
33920     A7 12 02 FB | 	rdlong	arg01, fp
33924     04 4E 85 F1 | 	sub	fp, #4
33928     28 12 06 F1 | 	add	arg01, #40
3392c     00 14 06 F6 | 	mov	arg02, #0
33930     09 16 C6 F9 | 	decod	arg03, #9
33934     98 00 A0 FD | 	call	#\builtin_bytefill_
33938     0C 4E 05 F1 | 	add	fp, #12
3393c     A7 28 C2 FA | 	rdbyte	local02, fp
33940     0C 4E 85 F1 | 	sub	fp, #12
33944     20 28 CE F7 | 	test	local02, #32 wz
33948     0C 02 90 AD |  if_e	jmp	#LR__5044
3394c     04 4E 05 F1 | 	add	fp, #4
33950     A7 26 02 FB | 	rdlong	local01, fp
33954     04 4E 85 F1 | 	sub	fp, #4
33958     0C 26 06 F1 | 	add	local01, #12
3395c     13 29 02 FB | 	rdlong	local02, local01
33960     01 28 16 F2 | 	cmp	local02, #1 wc
33964     F0 01 90 CD |  if_b	jmp	#LR__5044
33968     04 4E 05 F1 | 	add	fp, #4
3396c     A7 26 02 FB | 	rdlong	local01, fp
33970     13 29 02 F6 | 	mov	local02, local01
33974     0C 26 06 F1 | 	add	local01, #12
33978     13 27 02 FB | 	rdlong	local01, local01
3397c     14 28 06 F1 | 	add	local02, #20
33980     14 27 62 FC | 	wrlong	local01, local02
33984     40 4E 05 F1 | 	add	fp, #64
33988     A7 28 02 FB | 	rdlong	local02, fp
3398c     0A 28 06 F1 | 	add	local02, #10
33990     14 29 E2 FA | 	rdword	local02, local02
33994     09 28 66 F0 | 	shl	local02, #9
33998     08 4E 05 F1 | 	add	fp, #8
3399c     A7 28 62 FC | 	wrlong	local02, fp
339a0     48 4E 85 F1 | 	sub	fp, #72
339a4     A7 28 02 FB | 	rdlong	local02, fp
339a8     08 28 06 F1 | 	add	local02, #8
339ac     14 27 02 FB | 	rdlong	local01, local02
339b0     4C 4E 05 F1 | 	add	fp, #76
339b4     A7 26 62 FC | 	wrlong	local01, fp
339b8                 | ' 				fp->fptr = fp->obj.objsize;
339b8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
339b8                 | ' 				clst = fp->obj.sclust;
339b8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
339b8     4C 4E 85 F1 | 	sub	fp, #76
339bc     A7 28 02 FB | 	rdlong	local02, fp
339c0     0C 28 06 F1 | 	add	local02, #12
339c4     14 27 02 FB | 	rdlong	local01, local02
339c8     58 4E 05 F1 | 	add	fp, #88
339cc     A7 26 62 FC | 	wrlong	local01, fp
339d0     5C 4E 85 F1 | 	sub	fp, #92
339d4                 | LR__5040
339d4     10 4E 05 F1 | 	add	fp, #16
339d8     A7 28 0A FB | 	rdlong	local02, fp wz
339dc     10 4E 85 F1 | 	sub	fp, #16
339e0     94 00 90 5D |  if_ne	jmp	#LR__5041
339e4     5C 4E 05 F1 | 	add	fp, #92
339e8     A7 28 02 FB | 	rdlong	local02, fp
339ec     10 4E 85 F1 | 	sub	fp, #16
339f0     A7 26 02 FB | 	rdlong	local01, fp
339f4     4C 4E 85 F1 | 	sub	fp, #76
339f8     13 29 1A F2 | 	cmp	local02, local01 wcz
339fc     78 00 90 ED |  if_be	jmp	#LR__5041
33a00     04 4E 05 F1 | 	add	fp, #4
33a04     A7 12 02 FB | 	rdlong	arg01, fp
33a08     4C 4E 05 F1 | 	add	fp, #76
33a0c     A7 14 02 FB | 	rdlong	arg02, fp
33a10     50 4E 85 F1 | 	sub	fp, #80
33a14     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
33a18     50 4E 05 F1 | 	add	fp, #80
33a1c     A7 FA 61 FC | 	wrlong	result1, fp
33a20     50 4E 85 F1 | 	sub	fp, #80
33a24     02 FA 15 F2 | 	cmp	result1, #2 wc
33a28     10 4E 05 C1 |  if_b	add	fp, #16
33a2c     A7 04 68 CC |  if_b	wrlong	#2, fp
33a30     10 4E 85 C1 |  if_b	sub	fp, #16
33a34     50 4E 05 F1 | 	add	fp, #80
33a38     A7 28 02 FB | 	rdlong	local02, fp
33a3c     50 4E 85 F1 | 	sub	fp, #80
33a40     FF FF 7F FF 
33a44     FF 29 0E F2 | 	cmp	local02, ##-1 wz
33a48     10 4E 05 A1 |  if_e	add	fp, #16
33a4c     A7 02 68 AC |  if_e	wrlong	#1, fp
33a50     10 4E 85 A1 |  if_e	sub	fp, #16
33a54     5C 4E 05 F1 | 	add	fp, #92
33a58     A7 28 02 FB | 	rdlong	local02, fp
33a5c     10 4E 85 F1 | 	sub	fp, #16
33a60     A7 26 02 FB | 	rdlong	local01, fp
33a64     13 29 82 F1 | 	sub	local02, local01
33a68     10 4E 05 F1 | 	add	fp, #16
33a6c     A7 28 62 FC | 	wrlong	local02, fp
33a70     5C 4E 85 F1 | 	sub	fp, #92
33a74     5C FF 9F FD | 	jmp	#LR__5040
33a78                 | LR__5041
33a78     04 4E 05 F1 | 	add	fp, #4
33a7c     A7 28 02 FB | 	rdlong	local02, fp
33a80     4C 4E 05 F1 | 	add	fp, #76
33a84     A7 26 02 FB | 	rdlong	local01, fp
33a88     18 28 06 F1 | 	add	local02, #24
33a8c     14 27 62 FC | 	wrlong	local01, local02
33a90     40 4E 85 F1 | 	sub	fp, #64
33a94     A7 28 0A FB | 	rdlong	local02, fp wz
33a98     10 4E 85 F1 | 	sub	fp, #16
33a9c     B8 00 90 5D |  if_ne	jmp	#LR__5043
33aa0     5C 4E 05 F1 | 	add	fp, #92
33aa4     A7 26 02 FB | 	rdlong	local01, fp
33aa8     5C 4E 85 F1 | 	sub	fp, #92
33aac     FF 27 CE F7 | 	test	local01, #511 wz
33ab0     A4 00 90 AD |  if_e	jmp	#LR__5043
33ab4     44 4E 05 F1 | 	add	fp, #68
33ab8     A7 12 02 FB | 	rdlong	arg01, fp
33abc     0C 4E 05 F1 | 	add	fp, #12
33ac0     A7 14 02 FB | 	rdlong	arg02, fp
33ac4     50 4E 85 F1 | 	sub	fp, #80
33ac8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
33acc     58 4E 05 F1 | 	add	fp, #88
33ad0     A7 FA 61 FC | 	wrlong	result1, fp
33ad4     00 FA 4D F2 | 	cmps	result1, #0 wz
33ad8     58 4E 85 F1 | 	sub	fp, #88
33adc     10 4E 05 A1 |  if_e	add	fp, #16
33ae0     A7 04 68 AC |  if_e	wrlong	#2, fp
33ae4     10 4E 85 A1 |  if_e	sub	fp, #16
33ae8     6C 00 90 AD |  if_e	jmp	#LR__5042
33aec     04 4E 05 F1 | 	add	fp, #4
33af0     A7 28 02 FB | 	rdlong	local02, fp
33af4     54 4E 05 F1 | 	add	fp, #84
33af8     A7 26 02 FB | 	rdlong	local01, fp
33afc     04 4E 05 F1 | 	add	fp, #4
33b00     A7 18 02 FB | 	rdlong	arg04, fp
33b04     09 18 46 F0 | 	shr	arg04, #9
33b08     0C 27 02 F1 | 	add	local01, arg04
33b0c     1C 28 06 F1 | 	add	local02, #28
33b10     14 27 62 FC | 	wrlong	local01, local02
33b14     18 4E 85 F1 | 	sub	fp, #24
33b18     A7 28 02 FB | 	rdlong	local02, fp
33b1c     01 28 06 F1 | 	add	local02, #1
33b20     14 13 C2 FA | 	rdbyte	arg01, local02
33b24     40 4E 85 F1 | 	sub	fp, #64
33b28     A7 28 02 FB | 	rdlong	local02, fp
33b2c     14 15 02 F6 | 	mov	arg02, local02
33b30     28 14 06 F1 | 	add	arg02, #40
33b34     04 4E 85 F1 | 	sub	fp, #4
33b38     1C 28 06 F1 | 	add	local02, #28
33b3c     14 17 02 FB | 	rdlong	arg03, local02
33b40     01 18 06 F6 | 	mov	arg04, #1
33b44     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
33b48     00 FA 0D F2 | 	cmp	result1, #0 wz
33b4c     10 4E 05 51 |  if_ne	add	fp, #16
33b50     A7 02 68 5C |  if_ne	wrlong	#1, fp
33b54     10 4E 85 51 |  if_ne	sub	fp, #16
33b58                 | LR__5042
33b58                 | LR__5043
33b58                 | LR__5044
33b58                 | LR__5045
33b58                 | LR__5046
33b58     10 4E 05 F1 | 	add	fp, #16
33b5c     A7 28 0A FB | 	rdlong	local02, fp wz
33b60     10 4E 85 F1 | 	sub	fp, #16
33b64     04 4E 05 51 |  if_ne	add	fp, #4
33b68     A7 28 02 5B |  if_ne	rdlong	local02, fp
33b6c     04 4E 85 51 |  if_ne	sub	fp, #4
33b70     14 01 68 5C |  if_ne	wrlong	#0, local02
33b74                 | ' 
33b74                 | ' 	return res ;
33b74     10 4E 05 F1 | 	add	fp, #16
33b78     A7 FA 01 FB | 	rdlong	result1, fp
33b7c     10 4E 85 F1 | 	sub	fp, #16
33b80                 | LR__5047
33b80     A7 F0 03 F6 | 	mov	ptra, fp
33b84     B2 00 A0 FD | 	call	#popregs_
33b88                 | _fatfs_cc_f_open_ret
33b88     2D 00 64 FD | 	ret
33b8c                 | 
33b8c                 | _fatfs_cc_f_read
33b8c     0E 4A 05 F6 | 	mov	COUNT_, #14
33b90     A8 00 A0 FD | 	call	#pushregs_
33b94     38 F0 07 F1 | 	add	ptra, #56
33b98     04 4E 05 F1 | 	add	fp, #4
33b9c     A7 12 62 FC | 	wrlong	arg01, fp
33ba0     04 4E 05 F1 | 	add	fp, #4
33ba4     A7 14 62 FC | 	wrlong	arg02, fp
33ba8     04 4E 05 F1 | 	add	fp, #4
33bac     A7 16 62 FC | 	wrlong	arg03, fp
33bb0     04 4E 05 F1 | 	add	fp, #4
33bb4     A7 18 62 FC | 	wrlong	arg04, fp
33bb8     08 4E 85 F1 | 	sub	fp, #8
33bbc     A7 FA 01 FB | 	rdlong	result1, fp
33bc0     2C 4E 05 F1 | 	add	fp, #44
33bc4     A7 FA 61 FC | 	wrlong	result1, fp
33bc8     24 4E 85 F1 | 	sub	fp, #36
33bcc     A7 FA 01 FB | 	rdlong	result1, fp
33bd0     FD 00 68 FC | 	wrlong	#0, result1
33bd4     0C 4E 85 F1 | 	sub	fp, #12
33bd8     A7 12 02 FB | 	rdlong	arg01, fp
33bdc     14 4E 05 F1 | 	add	fp, #20
33be0     A7 14 02 F6 | 	mov	arg02, fp
33be4     18 4E 85 F1 | 	sub	fp, #24
33be8     24 F7 BF FD | 	call	#_fatfs_cc_validate
33bec     14 4E 05 F1 | 	add	fp, #20
33bf0     A7 FA 61 FC | 	wrlong	result1, fp
33bf4     00 FA 4D F2 | 	cmps	result1, #0 wz
33bf8     14 4E 85 F1 | 	sub	fp, #20
33bfc     20 00 90 5D |  if_ne	jmp	#LR__5050
33c00     04 4E 05 F1 | 	add	fp, #4
33c04     A7 14 02 FB | 	rdlong	arg02, fp
33c08     11 14 06 F1 | 	add	arg02, #17
33c0c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
33c10     10 4E 05 F1 | 	add	fp, #16
33c14     A7 14 62 FC | 	wrlong	arg02, fp
33c18     14 4E 85 F1 | 	sub	fp, #20
33c1c     10 00 90 AD |  if_e	jmp	#LR__5051
33c20                 | LR__5050
33c20     14 4E 05 F1 | 	add	fp, #20
33c24     A7 FA 01 FB | 	rdlong	result1, fp
33c28     14 4E 85 F1 | 	sub	fp, #20
33c2c     EC 05 90 FD | 	jmp	#LR__5070
33c30                 | LR__5051
33c30     04 4E 05 F1 | 	add	fp, #4
33c34     A7 18 02 FB | 	rdlong	arg04, fp
33c38     04 4E 85 F1 | 	sub	fp, #4
33c3c     10 18 06 F1 | 	add	arg04, #16
33c40     0C 19 C2 FA | 	rdbyte	arg04, arg04
33c44     01 18 CE F7 | 	test	arg04, #1 wz
33c48     07 FA 05 A6 |  if_e	mov	result1, #7
33c4c     CC 05 90 AD |  if_e	jmp	#LR__5070
33c50     04 4E 05 F1 | 	add	fp, #4
33c54     A7 26 02 FB | 	rdlong	local01, fp
33c58     13 29 02 F6 | 	mov	local02, local01
33c5c     0C 28 06 F1 | 	add	local02, #12
33c60     14 2B 02 FB | 	rdlong	local03, local02
33c64     14 26 06 F1 | 	add	local01, #20
33c68     13 27 02 FB | 	rdlong	local01, local01
33c6c     13 2B 82 F1 | 	sub	local03, local01
33c70     20 4E 05 F1 | 	add	fp, #32
33c74     A7 2A 62 FC | 	wrlong	local03, fp
33c78     18 4E 85 F1 | 	sub	fp, #24
33c7c     A7 2C 02 FB | 	rdlong	local04, fp
33c80     0C 4E 85 F1 | 	sub	fp, #12
33c84     15 2D 1A F2 | 	cmp	local04, local03 wcz
33c88     24 4E 05 11 |  if_a	add	fp, #36
33c8c     A7 2C 02 1B |  if_a	rdlong	local04, fp
33c90     18 4E 85 11 |  if_a	sub	fp, #24
33c94     A7 2C 62 1C |  if_a	wrlong	local04, fp
33c98     0C 4E 85 11 |  if_a	sub	fp, #12
33c9c                 | ' 
33c9c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
33c9c                 | LR__5052
33c9c     0C 4E 05 F1 | 	add	fp, #12
33ca0     A7 28 02 FB | 	rdlong	local02, fp
33ca4     0C 4E 85 F1 | 	sub	fp, #12
33ca8     14 2D 02 F6 | 	mov	local04, local02
33cac     01 2C 16 F2 | 	cmp	local04, #1 wc
33cb0     64 05 90 CD |  if_b	jmp	#LR__5069
33cb4     04 4E 05 F1 | 	add	fp, #4
33cb8     A7 2A 02 FB | 	rdlong	local03, fp
33cbc     04 4E 85 F1 | 	sub	fp, #4
33cc0     14 2A 06 F1 | 	add	local03, #20
33cc4     15 2B 02 FB | 	rdlong	local03, local03
33cc8     FF 2B CE F7 | 	test	local03, #511 wz
33ccc     3C 04 90 5D |  if_ne	jmp	#LR__5067
33cd0     04 4E 05 F1 | 	add	fp, #4
33cd4     A7 26 02 FB | 	rdlong	local01, fp
33cd8     14 26 06 F1 | 	add	local01, #20
33cdc     13 2B 02 FB | 	rdlong	local03, local01
33ce0     09 2A 46 F0 | 	shr	local03, #9
33ce4     14 4E 05 F1 | 	add	fp, #20
33ce8     A7 2E 02 FB | 	rdlong	local05, fp
33cec     17 31 02 F6 | 	mov	local06, local05
33cf0     0A 30 06 F1 | 	add	local06, #10
33cf4     18 33 E2 FA | 	rdword	local07, local06
33cf8     0A 30 86 F1 | 	sub	local06, #10
33cfc     19 35 32 F9 | 	getword	local08, local07, #0
33d00     01 34 86 F1 | 	sub	local08, #1
33d04     1A 2B 0A F5 | 	and	local03, local08 wz
33d08     18 4E 05 F1 | 	add	fp, #24
33d0c     A7 2A 62 FC | 	wrlong	local03, fp
33d10     30 4E 85 F1 | 	sub	fp, #48
33d14     E0 00 90 5D |  if_ne	jmp	#LR__5057
33d18     04 4E 05 F1 | 	add	fp, #4
33d1c     A7 2A 02 FB | 	rdlong	local03, fp
33d20     04 4E 85 F1 | 	sub	fp, #4
33d24     14 2A 06 F1 | 	add	local03, #20
33d28     15 2B 0A FB | 	rdlong	local03, local03 wz
33d2c     20 00 90 5D |  if_ne	jmp	#LR__5053
33d30     04 4E 05 F1 | 	add	fp, #4
33d34     A7 2A 02 FB | 	rdlong	local03, fp
33d38     08 2A 06 F1 | 	add	local03, #8
33d3c     15 2B 02 FB | 	rdlong	local03, local03
33d40     18 4E 05 F1 | 	add	fp, #24
33d44     A7 2A 62 FC | 	wrlong	local03, fp
33d48     1C 4E 85 F1 | 	sub	fp, #28
33d4c     28 00 90 FD | 	jmp	#LR__5054
33d50                 | LR__5053
33d50     04 4E 05 F1 | 	add	fp, #4
33d54     A7 34 02 FB | 	rdlong	local08, fp
33d58     1A 13 02 F6 | 	mov	arg01, local08
33d5c     04 4E 85 F1 | 	sub	fp, #4
33d60     18 34 06 F1 | 	add	local08, #24
33d64     1A 15 02 FB | 	rdlong	arg02, local08
33d68     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
33d6c     1C 4E 05 F1 | 	add	fp, #28
33d70     A7 FA 61 FC | 	wrlong	result1, fp
33d74     1C 4E 85 F1 | 	sub	fp, #28
33d78                 | LR__5054
33d78     1C 4E 05 F1 | 	add	fp, #28
33d7c     A7 2A 02 FB | 	rdlong	local03, fp
33d80     1C 4E 85 F1 | 	sub	fp, #28
33d84     02 2A 16 F2 | 	cmp	local03, #2 wc
33d88     1C 00 90 3D |  if_ae	jmp	#LR__5055
33d8c     04 4E 05 F1 | 	add	fp, #4
33d90     A7 2A 02 FB | 	rdlong	local03, fp
33d94     04 4E 85 F1 | 	sub	fp, #4
33d98     11 2A 06 F1 | 	add	local03, #17
33d9c     15 05 48 FC | 	wrbyte	#2, local03
33da0     02 FA 05 F6 | 	mov	result1, #2
33da4     74 04 90 FD | 	jmp	#LR__5070
33da8                 | LR__5055
33da8     1C 4E 05 F1 | 	add	fp, #28
33dac     A7 2A 02 FB | 	rdlong	local03, fp
33db0     1C 4E 85 F1 | 	sub	fp, #28
33db4     FF FF 7F FF 
33db8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
33dbc     1C 00 90 5D |  if_ne	jmp	#LR__5056
33dc0     04 4E 05 F1 | 	add	fp, #4
33dc4     A7 2A 02 FB | 	rdlong	local03, fp
33dc8     04 4E 85 F1 | 	sub	fp, #4
33dcc     11 2A 06 F1 | 	add	local03, #17
33dd0     15 03 48 FC | 	wrbyte	#1, local03
33dd4     01 FA 05 F6 | 	mov	result1, #1
33dd8     40 04 90 FD | 	jmp	#LR__5070
33ddc                 | LR__5056
33ddc     04 4E 05 F1 | 	add	fp, #4
33de0     A7 2A 02 FB | 	rdlong	local03, fp
33de4     18 4E 05 F1 | 	add	fp, #24
33de8     A7 34 02 FB | 	rdlong	local08, fp
33dec     1C 4E 85 F1 | 	sub	fp, #28
33df0     18 2A 06 F1 | 	add	local03, #24
33df4     15 35 62 FC | 	wrlong	local08, local03
33df8                 | LR__5057
33df8     18 4E 05 F1 | 	add	fp, #24
33dfc     A7 12 02 FB | 	rdlong	arg01, fp
33e00     14 4E 85 F1 | 	sub	fp, #20
33e04     A7 2A 02 FB | 	rdlong	local03, fp
33e08     04 4E 85 F1 | 	sub	fp, #4
33e0c     18 2A 06 F1 | 	add	local03, #24
33e10     15 15 02 FB | 	rdlong	arg02, local03
33e14     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
33e18     20 4E 05 F1 | 	add	fp, #32
33e1c     A7 FA 61 FC | 	wrlong	result1, fp
33e20     20 4E 85 F1 | 	sub	fp, #32
33e24     00 FA 0D F2 | 	cmp	result1, #0 wz
33e28     1C 00 90 5D |  if_ne	jmp	#LR__5058
33e2c     04 4E 05 F1 | 	add	fp, #4
33e30     A7 2A 02 FB | 	rdlong	local03, fp
33e34     04 4E 85 F1 | 	sub	fp, #4
33e38     11 2A 06 F1 | 	add	local03, #17
33e3c     15 05 48 FC | 	wrbyte	#2, local03
33e40     02 FA 05 F6 | 	mov	result1, #2
33e44     D4 03 90 FD | 	jmp	#LR__5070
33e48                 | LR__5058
33e48     20 4E 05 F1 | 	add	fp, #32
33e4c     A7 2A 02 FB | 	rdlong	local03, fp
33e50     10 4E 05 F1 | 	add	fp, #16
33e54     A7 34 02 FB | 	rdlong	local08, fp
33e58     1A 2B 02 F1 | 	add	local03, local08
33e5c     10 4E 85 F1 | 	sub	fp, #16
33e60     A7 2A 62 FC | 	wrlong	local03, fp
33e64     14 4E 85 F1 | 	sub	fp, #20
33e68     A7 2A 02 FB | 	rdlong	local03, fp
33e6c     09 2A 46 F0 | 	shr	local03, #9
33e70     20 4E 05 F1 | 	add	fp, #32
33e74     A7 2A 62 FC | 	wrlong	local03, fp
33e78     2C 4E 85 F1 | 	sub	fp, #44
33e7c     01 2A 16 F2 | 	cmp	local03, #1 wc
33e80     5C 01 90 CD |  if_b	jmp	#LR__5062
33e84     30 4E 05 F1 | 	add	fp, #48
33e88     A7 2A 02 FB | 	rdlong	local03, fp
33e8c     04 4E 85 F1 | 	sub	fp, #4
33e90     A7 34 02 FB | 	rdlong	local08, fp
33e94     1A 2B 02 F1 | 	add	local03, local08
33e98     14 4E 85 F1 | 	sub	fp, #20
33e9c     A7 34 02 FB | 	rdlong	local08, fp
33ea0     18 4E 85 F1 | 	sub	fp, #24
33ea4     0A 34 06 F1 | 	add	local08, #10
33ea8     1A 35 E2 FA | 	rdword	local08, local08
33eac     1A 2B 1A F2 | 	cmp	local03, local08 wcz
33eb0     28 00 90 ED |  if_be	jmp	#LR__5059
33eb4     18 4E 05 F1 | 	add	fp, #24
33eb8     A7 26 02 FB | 	rdlong	local01, fp
33ebc     0A 26 06 F1 | 	add	local01, #10
33ec0     13 2B E2 FA | 	rdword	local03, local01
33ec4     18 4E 05 F1 | 	add	fp, #24
33ec8     A7 34 02 FB | 	rdlong	local08, fp
33ecc     1A 2B 82 F1 | 	sub	local03, local08
33ed0     04 4E 85 F1 | 	sub	fp, #4
33ed4     A7 2A 62 FC | 	wrlong	local03, fp
33ed8     2C 4E 85 F1 | 	sub	fp, #44
33edc                 | LR__5059
33edc     18 4E 05 F1 | 	add	fp, #24
33ee0     A7 26 02 FB | 	rdlong	local01, fp
33ee4     01 26 06 F1 | 	add	local01, #1
33ee8     13 13 C2 FA | 	rdbyte	arg01, local01
33eec     1C 4E 05 F1 | 	add	fp, #28
33ef0     A7 14 02 FB | 	rdlong	arg02, fp
33ef4     14 4E 85 F1 | 	sub	fp, #20
33ef8     A7 16 02 FB | 	rdlong	arg03, fp
33efc     0C 4E 05 F1 | 	add	fp, #12
33f00     A7 18 02 FB | 	rdlong	arg04, fp
33f04     2C 4E 85 F1 | 	sub	fp, #44
33f08     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
33f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
33f10     1C 00 90 AD |  if_e	jmp	#LR__5060
33f14     04 4E 05 F1 | 	add	fp, #4
33f18     A7 2A 02 FB | 	rdlong	local03, fp
33f1c     04 4E 85 F1 | 	sub	fp, #4
33f20     11 2A 06 F1 | 	add	local03, #17
33f24     15 03 48 FC | 	wrbyte	#1, local03
33f28     01 FA 05 F6 | 	mov	result1, #1
33f2c     EC 02 90 FD | 	jmp	#LR__5070
33f30                 | LR__5060
33f30     04 4E 05 F1 | 	add	fp, #4
33f34     A7 26 02 FB | 	rdlong	local01, fp
33f38     04 4E 85 F1 | 	sub	fp, #4
33f3c     10 26 06 F1 | 	add	local01, #16
33f40     13 2B C2 FA | 	rdbyte	local03, local01
33f44     80 2A CE F7 | 	test	local03, #128 wz
33f48     78 00 90 AD |  if_e	jmp	#LR__5061
33f4c     04 4E 05 F1 | 	add	fp, #4
33f50     A7 34 02 FB | 	rdlong	local08, fp
33f54     1C 34 06 F1 | 	add	local08, #28
33f58     1A 35 02 FB | 	rdlong	local08, local08
33f5c     1C 4E 05 F1 | 	add	fp, #28
33f60     A7 36 02 FB | 	rdlong	local09, fp
33f64     1B 35 82 F1 | 	sub	local08, local09
33f68     0C 4E 05 F1 | 	add	fp, #12
33f6c     A7 38 02 FB | 	rdlong	local10, fp
33f70     2C 4E 85 F1 | 	sub	fp, #44
33f74     1C 3B 02 F6 | 	mov	local11, local10
33f78     1D 35 12 F2 | 	cmp	local08, local11 wc
33f7c     44 00 90 3D |  if_ae	jmp	#LR__5061
33f80     34 4E 05 F1 | 	add	fp, #52
33f84     A7 12 02 FB | 	rdlong	arg01, fp
33f88     30 4E 85 F1 | 	sub	fp, #48
33f8c     A7 14 02 FB | 	rdlong	arg02, fp
33f90     0A 3B 02 F6 | 	mov	local11, arg02
33f94     1C 3A 06 F1 | 	add	local11, #28
33f98     1D 37 02 FB | 	rdlong	local09, local11
33f9c     1C 4E 05 F1 | 	add	fp, #28
33fa0     A7 2E 02 FB | 	rdlong	local05, fp
33fa4     17 37 82 F1 | 	sub	local09, local05
33fa8     09 36 66 F0 | 	shl	local09, #9
33fac     1B 3B 02 F6 | 	mov	local11, local09
33fb0     1B 13 02 F1 | 	add	arg01, local09
33fb4     20 4E 85 F1 | 	sub	fp, #32
33fb8     28 14 06 F1 | 	add	arg02, #40
33fbc     09 16 C6 F9 | 	decod	arg03, #9
33fc0     E0 42 BF FD | 	call	#__system____builtin_memmove
33fc4                 | LR__5061
33fc4     2C 4E 05 F1 | 	add	fp, #44
33fc8     A7 2A 02 FB | 	rdlong	local03, fp
33fcc     09 2A 66 F0 | 	shl	local03, #9
33fd0     04 4E 85 F1 | 	sub	fp, #4
33fd4     A7 2A 62 FC | 	wrlong	local03, fp
33fd8     28 4E 85 F1 | 	sub	fp, #40
33fdc                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
33fdc                 | ' 				}
33fdc                 | ' 
33fdc                 | ' 
33fdc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
33fdc                 | ' 				continue;
33fdc     B4 01 90 FD | 	jmp	#LR__5068
33fe0                 | LR__5062
33fe0     04 4E 05 F1 | 	add	fp, #4
33fe4     A7 2A 02 FB | 	rdlong	local03, fp
33fe8     1C 2A 06 F1 | 	add	local03, #28
33fec     15 2B 02 FB | 	rdlong	local03, local03
33ff0     1C 4E 05 F1 | 	add	fp, #28
33ff4     A7 26 02 FB | 	rdlong	local01, fp
33ff8     20 4E 85 F1 | 	sub	fp, #32
33ffc     13 2B 0A F2 | 	cmp	local03, local01 wz
34000     EC 00 90 AD |  if_e	jmp	#LR__5066
34004     04 4E 05 F1 | 	add	fp, #4
34008     A7 26 02 FB | 	rdlong	local01, fp
3400c     04 4E 85 F1 | 	sub	fp, #4
34010     10 26 06 F1 | 	add	local01, #16
34014     13 2B C2 FA | 	rdbyte	local03, local01
34018     80 2A CE F7 | 	test	local03, #128 wz
3401c     7C 00 90 AD |  if_e	jmp	#LR__5064
34020     18 4E 05 F1 | 	add	fp, #24
34024     A7 26 02 FB | 	rdlong	local01, fp
34028     01 26 06 F1 | 	add	local01, #1
3402c     13 13 C2 FA | 	rdbyte	arg01, local01
34030     14 4E 85 F1 | 	sub	fp, #20
34034     A7 2A 02 FB | 	rdlong	local03, fp
34038     15 15 02 F6 | 	mov	arg02, local03
3403c     28 14 06 F1 | 	add	arg02, #40
34040     04 4E 85 F1 | 	sub	fp, #4
34044     1C 2A 06 F1 | 	add	local03, #28
34048     15 17 02 FB | 	rdlong	arg03, local03
3404c     01 18 06 F6 | 	mov	arg04, #1
34050     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
34054     00 FA 0D F2 | 	cmp	result1, #0 wz
34058     1C 00 90 AD |  if_e	jmp	#LR__5063
3405c     04 4E 05 F1 | 	add	fp, #4
34060     A7 2A 02 FB | 	rdlong	local03, fp
34064     04 4E 85 F1 | 	sub	fp, #4
34068     11 2A 06 F1 | 	add	local03, #17
3406c     15 03 48 FC | 	wrbyte	#1, local03
34070     01 FA 05 F6 | 	mov	result1, #1
34074     A4 01 90 FD | 	jmp	#LR__5070
34078                 | LR__5063
34078     04 4E 05 F1 | 	add	fp, #4
3407c     A7 3A 02 FB | 	rdlong	local11, fp
34080     1D 2B 02 F6 | 	mov	local03, local11
34084     04 4E 85 F1 | 	sub	fp, #4
34088     10 3A 06 F1 | 	add	local11, #16
3408c     1D 3B C2 FA | 	rdbyte	local11, local11
34090     7F 3A 06 F5 | 	and	local11, #127
34094     10 2A 06 F1 | 	add	local03, #16
34098     15 3B 42 FC | 	wrbyte	local11, local03
3409c                 | LR__5064
3409c     18 4E 05 F1 | 	add	fp, #24
340a0     A7 26 02 FB | 	rdlong	local01, fp
340a4     01 26 06 F1 | 	add	local01, #1
340a8     13 13 C2 FA | 	rdbyte	arg01, local01
340ac     14 4E 85 F1 | 	sub	fp, #20
340b0     A7 14 02 FB | 	rdlong	arg02, fp
340b4     28 14 06 F1 | 	add	arg02, #40
340b8     1C 4E 05 F1 | 	add	fp, #28
340bc     A7 16 02 FB | 	rdlong	arg03, fp
340c0     20 4E 85 F1 | 	sub	fp, #32
340c4     01 18 06 F6 | 	mov	arg04, #1
340c8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
340cc     00 FA 0D F2 | 	cmp	result1, #0 wz
340d0     1C 00 90 AD |  if_e	jmp	#LR__5065
340d4     04 4E 05 F1 | 	add	fp, #4
340d8     A7 2A 02 FB | 	rdlong	local03, fp
340dc     04 4E 85 F1 | 	sub	fp, #4
340e0     11 2A 06 F1 | 	add	local03, #17
340e4     15 03 48 FC | 	wrbyte	#1, local03
340e8     01 FA 05 F6 | 	mov	result1, #1
340ec     2C 01 90 FD | 	jmp	#LR__5070
340f0                 | LR__5065
340f0                 | LR__5066
340f0     04 4E 05 F1 | 	add	fp, #4
340f4     A7 2A 02 FB | 	rdlong	local03, fp
340f8     1C 4E 05 F1 | 	add	fp, #28
340fc     A7 3A 02 FB | 	rdlong	local11, fp
34100     20 4E 85 F1 | 	sub	fp, #32
34104     1C 2A 06 F1 | 	add	local03, #28
34108     15 3B 62 FC | 	wrlong	local11, local03
3410c                 | LR__5067
3410c     04 4E 05 F1 | 	add	fp, #4
34110     A7 26 02 FB | 	rdlong	local01, fp
34114     14 26 06 F1 | 	add	local01, #20
34118     13 3B 02 FB | 	rdlong	local11, local01
3411c     FF 3B 06 F5 | 	and	local11, #511
34120     09 2A C6 F9 | 	decod	local03, #9
34124     1D 2B 82 F1 | 	sub	local03, local11
34128     24 4E 05 F1 | 	add	fp, #36
3412c     A7 2A 62 FC | 	wrlong	local03, fp
34130     1C 4E 85 F1 | 	sub	fp, #28
34134     A7 3A 02 FB | 	rdlong	local11, fp
34138     0C 4E 85 F1 | 	sub	fp, #12
3413c     1D 2B 1A F2 | 	cmp	local03, local11 wcz
34140     0C 4E 05 11 |  if_a	add	fp, #12
34144     A7 2A 02 1B |  if_a	rdlong	local03, fp
34148     1C 4E 05 11 |  if_a	add	fp, #28
3414c     A7 2A 62 1C |  if_a	wrlong	local03, fp
34150     28 4E 85 11 |  if_a	sub	fp, #40
34154     34 4E 05 F1 | 	add	fp, #52
34158     A7 12 02 FB | 	rdlong	arg01, fp
3415c     30 4E 85 F1 | 	sub	fp, #48
34160     A7 30 02 FB | 	rdlong	local06, fp
34164     18 15 02 F6 | 	mov	arg02, local06
34168     28 14 06 F1 | 	add	arg02, #40
3416c     14 30 06 F1 | 	add	local06, #20
34170     18 3B 02 FB | 	rdlong	local11, local06
34174     1D 37 02 F6 | 	mov	local09, local11
34178     1B 39 02 F6 | 	mov	local10, local09
3417c     FF 39 06 F5 | 	and	local10, #511
34180     1C 15 02 F1 | 	add	arg02, local10
34184     24 4E 05 F1 | 	add	fp, #36
34188     A7 16 02 FB | 	rdlong	arg03, fp
3418c     28 4E 85 F1 | 	sub	fp, #40
34190     10 41 BF FD | 	call	#__system____builtin_memmove
34194                 | LR__5068
34194     0C 4E 05 F1 | 	add	fp, #12
34198     A7 2A 02 FB | 	rdlong	local03, fp
3419c     1C 4E 05 F1 | 	add	fp, #28
341a0     A7 34 02 FB | 	rdlong	local08, fp
341a4     1A 2B 82 F1 | 	sub	local03, local08
341a8     1C 4E 85 F1 | 	sub	fp, #28
341ac     A7 2A 62 FC | 	wrlong	local03, fp
341b0     04 4E 05 F1 | 	add	fp, #4
341b4     A7 26 02 FB | 	rdlong	local01, fp
341b8     13 33 02 FB | 	rdlong	local07, local01
341bc     18 4E 05 F1 | 	add	fp, #24
341c0     A7 34 02 FB | 	rdlong	local08, fp
341c4     1A 33 02 F1 | 	add	local07, local08
341c8     13 33 62 FC | 	wrlong	local07, local01
341cc     0C 4E 05 F1 | 	add	fp, #12
341d0     A7 2A 02 FB | 	rdlong	local03, fp
341d4     0C 4E 85 F1 | 	sub	fp, #12
341d8     A7 3C 02 FB | 	rdlong	local12, fp
341dc     1E 2B 02 F1 | 	add	local03, local12
341e0     0C 4E 05 F1 | 	add	fp, #12
341e4     A7 2A 62 FC | 	wrlong	local03, fp
341e8     30 4E 85 F1 | 	sub	fp, #48
341ec     A7 3E 02 FB | 	rdlong	local13, fp
341f0     1F 2B 02 F6 | 	mov	local03, local13
341f4     14 3E 06 F1 | 	add	local13, #20
341f8     1F 41 02 FB | 	rdlong	local14, local13
341fc     24 4E 05 F1 | 	add	fp, #36
34200     A7 30 02 FB | 	rdlong	local06, fp
34204     28 4E 85 F1 | 	sub	fp, #40
34208     18 41 02 F1 | 	add	local14, local06
3420c     14 2A 06 F1 | 	add	local03, #20
34210     15 41 62 FC | 	wrlong	local14, local03
34214     84 FA 9F FD | 	jmp	#LR__5052
34218                 | LR__5069
34218                 | ' 
34218                 | ' 
34218                 | ' 
34218                 | ' 
34218                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
34218                 | ' 
34218                 | ' 	}
34218                 | ' 
34218                 | ' 	return FR_OK ;
34218     00 FA 05 F6 | 	mov	result1, #0
3421c                 | LR__5070
3421c     A7 F0 03 F6 | 	mov	ptra, fp
34220     B2 00 A0 FD | 	call	#popregs_
34224                 | _fatfs_cc_f_read_ret
34224     2D 00 64 FD | 	ret
34228                 | 
34228                 | _fatfs_cc_f_write
34228     15 4A 05 F6 | 	mov	COUNT_, #21
3422c     A8 00 A0 FD | 	call	#pushregs_
34230     34 F0 07 F1 | 	add	ptra, #52
34234     04 4E 05 F1 | 	add	fp, #4
34238     A7 12 62 FC | 	wrlong	arg01, fp
3423c     04 4E 05 F1 | 	add	fp, #4
34240     A7 14 62 FC | 	wrlong	arg02, fp
34244     04 4E 05 F1 | 	add	fp, #4
34248     A7 16 62 FC | 	wrlong	arg03, fp
3424c     04 4E 05 F1 | 	add	fp, #4
34250     A7 18 62 FC | 	wrlong	arg04, fp
34254     08 4E 85 F1 | 	sub	fp, #8
34258     A7 FA 01 FB | 	rdlong	result1, fp
3425c     28 4E 05 F1 | 	add	fp, #40
34260     A7 FA 61 FC | 	wrlong	result1, fp
34264     20 4E 85 F1 | 	sub	fp, #32
34268     A7 FA 01 FB | 	rdlong	result1, fp
3426c     FD 00 68 FC | 	wrlong	#0, result1
34270     0C 4E 85 F1 | 	sub	fp, #12
34274     A7 12 02 FB | 	rdlong	arg01, fp
34278     14 4E 05 F1 | 	add	fp, #20
3427c     A7 14 02 F6 | 	mov	arg02, fp
34280     18 4E 85 F1 | 	sub	fp, #24
34284     88 F0 BF FD | 	call	#_fatfs_cc_validate
34288     14 4E 05 F1 | 	add	fp, #20
3428c     A7 FA 61 FC | 	wrlong	result1, fp
34290     00 FA 4D F2 | 	cmps	result1, #0 wz
34294     14 4E 85 F1 | 	sub	fp, #20
34298     20 00 90 5D |  if_ne	jmp	#LR__5080
3429c     04 4E 05 F1 | 	add	fp, #4
342a0     A7 14 02 FB | 	rdlong	arg02, fp
342a4     11 14 06 F1 | 	add	arg02, #17
342a8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
342ac     10 4E 05 F1 | 	add	fp, #16
342b0     A7 14 62 FC | 	wrlong	arg02, fp
342b4     14 4E 85 F1 | 	sub	fp, #20
342b8     10 00 90 AD |  if_e	jmp	#LR__5081
342bc                 | LR__5080
342bc     14 4E 05 F1 | 	add	fp, #20
342c0     A7 FA 01 FB | 	rdlong	result1, fp
342c4     14 4E 85 F1 | 	sub	fp, #20
342c8     44 07 90 FD | 	jmp	#LR__5103
342cc                 | LR__5081
342cc     04 4E 05 F1 | 	add	fp, #4
342d0     A7 14 02 FB | 	rdlong	arg02, fp
342d4     04 4E 85 F1 | 	sub	fp, #4
342d8     10 14 06 F1 | 	add	arg02, #16
342dc     0A 15 C2 FA | 	rdbyte	arg02, arg02
342e0     02 14 CE F7 | 	test	arg02, #2 wz
342e4     07 FA 05 A6 |  if_e	mov	result1, #7
342e8     24 07 90 AD |  if_e	jmp	#LR__5103
342ec     04 4E 05 F1 | 	add	fp, #4
342f0     A7 14 02 FB | 	rdlong	arg02, fp
342f4     0A 13 02 F6 | 	mov	arg01, arg02
342f8     14 12 06 F1 | 	add	arg01, #20
342fc     09 13 02 FB | 	rdlong	arg01, arg01
34300     08 4E 05 F1 | 	add	fp, #8
34304     A7 FA 01 FB | 	rdlong	result1, fp
34308     FD 12 02 F1 | 	add	arg01, result1
3430c     0C 4E 85 F1 | 	sub	fp, #12
34310     14 14 06 F1 | 	add	arg02, #20
34314     0A FB 01 FB | 	rdlong	result1, arg02
34318     FD 12 12 F2 | 	cmp	arg01, result1 wc
3431c     24 00 90 3D |  if_ae	jmp	#LR__5082
34320     04 4E 05 F1 | 	add	fp, #4
34324     A7 14 02 FB | 	rdlong	arg02, fp
34328     01 FA 65 F6 | 	neg	result1, #1
3432c     14 14 06 F1 | 	add	arg02, #20
34330     0A 15 02 FB | 	rdlong	arg02, arg02
34334     0A FB 81 F1 | 	sub	result1, arg02
34338     08 4E 05 F1 | 	add	fp, #8
3433c     A7 FA 61 FC | 	wrlong	result1, fp
34340     0C 4E 85 F1 | 	sub	fp, #12
34344                 | LR__5082
34344                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
34344                 | ' 	}
34344                 | ' 
34344                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
34344                 | LR__5083
34344     0C 4E 05 F1 | 	add	fp, #12
34348     A7 FA 01 FB | 	rdlong	result1, fp
3434c     0C 4E 85 F1 | 	sub	fp, #12
34350     01 FA 15 F2 | 	cmp	result1, #1 wc
34354     90 06 90 CD |  if_b	jmp	#LR__5102
34358     04 4E 05 F1 | 	add	fp, #4
3435c     A7 FA 01 FB | 	rdlong	result1, fp
34360     04 4E 85 F1 | 	sub	fp, #4
34364     14 FA 05 F1 | 	add	result1, #20
34368     FD FA 01 FB | 	rdlong	result1, result1
3436c     FF FB CD F7 | 	test	result1, #511 wz
34370     D8 04 90 5D |  if_ne	jmp	#LR__5098
34374     04 4E 05 F1 | 	add	fp, #4
34378     A7 FA 01 FB | 	rdlong	result1, fp
3437c     14 FA 05 F1 | 	add	result1, #20
34380     FD FA 01 FB | 	rdlong	result1, result1
34384     09 FA 45 F0 | 	shr	result1, #9
34388     14 4E 05 F1 | 	add	fp, #20
3438c     A7 14 02 FB | 	rdlong	arg02, fp
34390     0A 14 06 F1 | 	add	arg02, #10
34394     0A 19 E2 FA | 	rdword	arg04, arg02
34398     0C 15 32 F9 | 	getword	arg02, arg04, #0
3439c     01 14 86 F1 | 	sub	arg02, #1
343a0     0A FB 09 F5 | 	and	result1, arg02 wz
343a4     14 4E 05 F1 | 	add	fp, #20
343a8     A7 FA 61 FC | 	wrlong	result1, fp
343ac     2C 4E 85 F1 | 	sub	fp, #44
343b0     44 01 90 5D |  if_ne	jmp	#LR__5089
343b4     04 4E 05 F1 | 	add	fp, #4
343b8     A7 FA 01 FB | 	rdlong	result1, fp
343bc     04 4E 85 F1 | 	sub	fp, #4
343c0     14 FA 05 F1 | 	add	result1, #20
343c4     FD 14 0A FB | 	rdlong	arg02, result1 wz
343c8     44 00 90 5D |  if_ne	jmp	#LR__5084
343cc     04 4E 05 F1 | 	add	fp, #4
343d0     A7 14 02 FB | 	rdlong	arg02, fp
343d4     08 14 06 F1 | 	add	arg02, #8
343d8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
343dc     18 4E 05 F1 | 	add	fp, #24
343e0     A7 14 62 FC | 	wrlong	arg02, fp
343e4     1C 4E 85 F1 | 	sub	fp, #28
343e8     4C 00 90 5D |  if_ne	jmp	#LR__5085
343ec     04 4E 05 F1 | 	add	fp, #4
343f0     A7 12 02 FB | 	rdlong	arg01, fp
343f4     04 4E 85 F1 | 	sub	fp, #4
343f8     00 14 06 F6 | 	mov	arg02, #0
343fc     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
34400     1C 4E 05 F1 | 	add	fp, #28
34404     A7 FA 61 FC | 	wrlong	result1, fp
34408     1C 4E 85 F1 | 	sub	fp, #28
3440c     28 00 90 FD | 	jmp	#LR__5085
34410                 | LR__5084
34410     04 4E 05 F1 | 	add	fp, #4
34414     A7 18 02 FB | 	rdlong	arg04, fp
34418     0C 13 02 F6 | 	mov	arg01, arg04
3441c     04 4E 85 F1 | 	sub	fp, #4
34420     18 18 06 F1 | 	add	arg04, #24
34424     0C 15 02 FB | 	rdlong	arg02, arg04
34428     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
3442c     1C 4E 05 F1 | 	add	fp, #28
34430     A7 FA 61 FC | 	wrlong	result1, fp
34434     1C 4E 85 F1 | 	sub	fp, #28
34438                 | LR__5085
34438     1C 4E 05 F1 | 	add	fp, #28
3443c     A7 FA 09 FB | 	rdlong	result1, fp wz
34440     1C 4E 85 F1 | 	sub	fp, #28
34444     A0 05 90 AD |  if_e	jmp	#LR__5102
34448     1C 4E 05 F1 | 	add	fp, #28
3444c     A7 FA 01 FB | 	rdlong	result1, fp
34450     1C 4E 85 F1 | 	sub	fp, #28
34454     01 FA 0D F2 | 	cmp	result1, #1 wz
34458     1C 00 90 5D |  if_ne	jmp	#LR__5086
3445c     04 4E 05 F1 | 	add	fp, #4
34460     A7 FA 01 FB | 	rdlong	result1, fp
34464     04 4E 85 F1 | 	sub	fp, #4
34468     11 FA 05 F1 | 	add	result1, #17
3446c     FD 04 48 FC | 	wrbyte	#2, result1
34470     02 FA 05 F6 | 	mov	result1, #2
34474     98 05 90 FD | 	jmp	#LR__5103
34478                 | LR__5086
34478     1C 4E 05 F1 | 	add	fp, #28
3447c     A7 FA 01 FB | 	rdlong	result1, fp
34480     1C 4E 85 F1 | 	sub	fp, #28
34484     FF FF 7F FF 
34488     FF FB 0D F2 | 	cmp	result1, ##-1 wz
3448c     1C 00 90 5D |  if_ne	jmp	#LR__5087
34490     04 4E 05 F1 | 	add	fp, #4
34494     A7 FA 01 FB | 	rdlong	result1, fp
34498     04 4E 85 F1 | 	sub	fp, #4
3449c     11 FA 05 F1 | 	add	result1, #17
344a0     FD 02 48 FC | 	wrbyte	#1, result1
344a4     01 FA 05 F6 | 	mov	result1, #1
344a8     64 05 90 FD | 	jmp	#LR__5103
344ac                 | LR__5087
344ac     04 4E 05 F1 | 	add	fp, #4
344b0     A7 FA 01 FB | 	rdlong	result1, fp
344b4     18 4E 05 F1 | 	add	fp, #24
344b8     A7 18 02 FB | 	rdlong	arg04, fp
344bc     18 FA 05 F1 | 	add	result1, #24
344c0     FD 18 62 FC | 	wrlong	arg04, result1
344c4     18 4E 85 F1 | 	sub	fp, #24
344c8     A7 FA 01 FB | 	rdlong	result1, fp
344cc     04 4E 85 F1 | 	sub	fp, #4
344d0     08 FA 05 F1 | 	add	result1, #8
344d4     FD FA 09 FB | 	rdlong	result1, result1 wz
344d8     1C 00 90 5D |  if_ne	jmp	#LR__5088
344dc     04 4E 05 F1 | 	add	fp, #4
344e0     A7 18 02 FB | 	rdlong	arg04, fp
344e4     18 4E 05 F1 | 	add	fp, #24
344e8     A7 FA 01 FB | 	rdlong	result1, fp
344ec     1C 4E 85 F1 | 	sub	fp, #28
344f0     08 18 06 F1 | 	add	arg04, #8
344f4     0C FB 61 FC | 	wrlong	result1, arg04
344f8                 | LR__5088
344f8                 | LR__5089
344f8     04 4E 05 F1 | 	add	fp, #4
344fc     A7 18 02 FB | 	rdlong	arg04, fp
34500     04 4E 85 F1 | 	sub	fp, #4
34504     10 18 06 F1 | 	add	arg04, #16
34508     0C 19 C2 FA | 	rdbyte	arg04, arg04
3450c     80 18 CE F7 | 	test	arg04, #128 wz
34510     7C 00 90 AD |  if_e	jmp	#LR__5091
34514     18 4E 05 F1 | 	add	fp, #24
34518     A7 18 02 FB | 	rdlong	arg04, fp
3451c     01 18 06 F1 | 	add	arg04, #1
34520     0C 13 C2 FA | 	rdbyte	arg01, arg04
34524     14 4E 85 F1 | 	sub	fp, #20
34528     A7 18 02 FB | 	rdlong	arg04, fp
3452c     0C 15 02 F6 | 	mov	arg02, arg04
34530     28 14 06 F1 | 	add	arg02, #40
34534     04 4E 85 F1 | 	sub	fp, #4
34538     1C 18 06 F1 | 	add	arg04, #28
3453c     0C 17 02 FB | 	rdlong	arg03, arg04
34540     01 18 06 F6 | 	mov	arg04, #1
34544     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
34548     00 FA 0D F2 | 	cmp	result1, #0 wz
3454c     1C 00 90 AD |  if_e	jmp	#LR__5090
34550     04 4E 05 F1 | 	add	fp, #4
34554     A7 FA 01 FB | 	rdlong	result1, fp
34558     04 4E 85 F1 | 	sub	fp, #4
3455c     11 FA 05 F1 | 	add	result1, #17
34560     FD 02 48 FC | 	wrbyte	#1, result1
34564     01 FA 05 F6 | 	mov	result1, #1
34568     A4 04 90 FD | 	jmp	#LR__5103
3456c                 | LR__5090
3456c     04 4E 05 F1 | 	add	fp, #4
34570     A7 18 02 FB | 	rdlong	arg04, fp
34574     0C FB 01 F6 | 	mov	result1, arg04
34578     04 4E 85 F1 | 	sub	fp, #4
3457c     10 18 06 F1 | 	add	arg04, #16
34580     0C 19 C2 FA | 	rdbyte	arg04, arg04
34584     7F 18 06 F5 | 	and	arg04, #127
34588     10 FA 05 F1 | 	add	result1, #16
3458c     FD 18 42 FC | 	wrbyte	arg04, result1
34590                 | LR__5091
34590     18 4E 05 F1 | 	add	fp, #24
34594     A7 12 02 FB | 	rdlong	arg01, fp
34598     14 4E 85 F1 | 	sub	fp, #20
3459c     A7 14 02 FB | 	rdlong	arg02, fp
345a0     04 4E 85 F1 | 	sub	fp, #4
345a4     18 14 06 F1 | 	add	arg02, #24
345a8     0A 15 02 FB | 	rdlong	arg02, arg02
345ac     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
345b0     20 4E 05 F1 | 	add	fp, #32
345b4     A7 FA 61 FC | 	wrlong	result1, fp
345b8     20 4E 85 F1 | 	sub	fp, #32
345bc     00 FA 0D F2 | 	cmp	result1, #0 wz
345c0     1C 00 90 5D |  if_ne	jmp	#LR__5092
345c4     04 4E 05 F1 | 	add	fp, #4
345c8     A7 FA 01 FB | 	rdlong	result1, fp
345cc     04 4E 85 F1 | 	sub	fp, #4
345d0     11 FA 05 F1 | 	add	result1, #17
345d4     FD 04 48 FC | 	wrbyte	#2, result1
345d8     02 FA 05 F6 | 	mov	result1, #2
345dc     30 04 90 FD | 	jmp	#LR__5103
345e0                 | LR__5092
345e0     20 4E 05 F1 | 	add	fp, #32
345e4     A7 FA 01 FB | 	rdlong	result1, fp
345e8     0C 4E 05 F1 | 	add	fp, #12
345ec     A7 26 02 FB | 	rdlong	local01, fp
345f0     13 FB 01 F1 | 	add	result1, local01
345f4     0C 4E 85 F1 | 	sub	fp, #12
345f8     A7 FA 61 FC | 	wrlong	result1, fp
345fc     14 4E 85 F1 | 	sub	fp, #20
34600     A7 FA 01 FB | 	rdlong	result1, fp
34604     09 FA 45 F0 | 	shr	result1, #9
34608     1C 4E 05 F1 | 	add	fp, #28
3460c     A7 FA 61 FC | 	wrlong	result1, fp
34610     28 4E 85 F1 | 	sub	fp, #40
34614     01 FA 15 F2 | 	cmp	result1, #1 wc
34618     60 01 90 CD |  if_b	jmp	#LR__5096
3461c     2C 4E 05 F1 | 	add	fp, #44
34620     A7 FA 01 FB | 	rdlong	result1, fp
34624     04 4E 85 F1 | 	sub	fp, #4
34628     A7 18 02 FB | 	rdlong	arg04, fp
3462c     0C FB 01 F1 | 	add	result1, arg04
34630     10 4E 85 F1 | 	sub	fp, #16
34634     A7 18 02 FB | 	rdlong	arg04, fp
34638     18 4E 85 F1 | 	sub	fp, #24
3463c     0A 18 06 F1 | 	add	arg04, #10
34640     0C 19 E2 FA | 	rdword	arg04, arg04
34644     0C FB 19 F2 | 	cmp	result1, arg04 wcz
34648     28 00 90 ED |  if_be	jmp	#LR__5093
3464c     18 4E 05 F1 | 	add	fp, #24
34650     A7 FA 01 FB | 	rdlong	result1, fp
34654     0A FA 05 F1 | 	add	result1, #10
34658     FD FA E1 FA | 	rdword	result1, result1
3465c     14 4E 05 F1 | 	add	fp, #20
34660     A7 18 02 FB | 	rdlong	arg04, fp
34664     0C FB 81 F1 | 	sub	result1, arg04
34668     04 4E 85 F1 | 	sub	fp, #4
3466c     A7 FA 61 FC | 	wrlong	result1, fp
34670     28 4E 85 F1 | 	sub	fp, #40
34674                 | LR__5093
34674     18 4E 05 F1 | 	add	fp, #24
34678     A7 18 02 FB | 	rdlong	arg04, fp
3467c     01 18 06 F1 | 	add	arg04, #1
34680     0C 13 C2 FA | 	rdbyte	arg01, arg04
34684     18 4E 05 F1 | 	add	fp, #24
34688     A7 14 02 FB | 	rdlong	arg02, fp
3468c     10 4E 85 F1 | 	sub	fp, #16
34690     A7 16 02 FB | 	rdlong	arg03, fp
34694     08 4E 05 F1 | 	add	fp, #8
34698     A7 18 02 FB | 	rdlong	arg04, fp
3469c     28 4E 85 F1 | 	sub	fp, #40
346a0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
346a4     00 FA 0D F2 | 	cmp	result1, #0 wz
346a8     1C 00 90 AD |  if_e	jmp	#LR__5094
346ac     04 4E 05 F1 | 	add	fp, #4
346b0     A7 26 02 FB | 	rdlong	local01, fp
346b4     04 4E 85 F1 | 	sub	fp, #4
346b8     11 26 06 F1 | 	add	local01, #17
346bc     13 03 48 FC | 	wrbyte	#1, local01
346c0     01 FA 05 F6 | 	mov	result1, #1
346c4     48 03 90 FD | 	jmp	#LR__5103
346c8                 | LR__5094
346c8     04 4E 05 F1 | 	add	fp, #4
346cc     A7 FA 01 FB | 	rdlong	result1, fp
346d0     1C FA 05 F1 | 	add	result1, #28
346d4     FD FA 01 FB | 	rdlong	result1, result1
346d8     1C 4E 05 F1 | 	add	fp, #28
346dc     A7 28 02 FB | 	rdlong	local02, fp
346e0     14 FB 81 F1 | 	sub	result1, local02
346e4     08 4E 05 F1 | 	add	fp, #8
346e8     A7 18 02 FB | 	rdlong	arg04, fp
346ec     28 4E 85 F1 | 	sub	fp, #40
346f0     0C FB 11 F2 | 	cmp	result1, arg04 wc
346f4     68 00 90 3D |  if_ae	jmp	#LR__5095
346f8     04 4E 05 F1 | 	add	fp, #4
346fc     A7 12 02 FB | 	rdlong	arg01, fp
34700     28 12 06 F1 | 	add	arg01, #40
34704     2C 4E 05 F1 | 	add	fp, #44
34708     A7 14 02 FB | 	rdlong	arg02, fp
3470c     2C 4E 85 F1 | 	sub	fp, #44
34710     A7 FA 01 FB | 	rdlong	result1, fp
34714     1C FA 05 F1 | 	add	result1, #28
34718     FD 2A 02 FB | 	rdlong	local03, result1
3471c     1C 4E 05 F1 | 	add	fp, #28
34720     A7 18 02 FB | 	rdlong	arg04, fp
34724     20 4E 85 F1 | 	sub	fp, #32
34728     0C 2B 82 F1 | 	sub	local03, arg04
3472c     09 2A 66 F0 | 	shl	local03, #9
34730     15 15 02 F1 | 	add	arg02, local03
34734     09 16 C6 F9 | 	decod	arg03, #9
34738     68 3B BF FD | 	call	#__system____builtin_memmove
3473c     04 4E 05 F1 | 	add	fp, #4
34740     A7 18 02 FB | 	rdlong	arg04, fp
34744     0C FB 01 F6 | 	mov	result1, arg04
34748     04 4E 85 F1 | 	sub	fp, #4
3474c     10 18 06 F1 | 	add	arg04, #16
34750     0C 19 C2 FA | 	rdbyte	arg04, arg04
34754     7F 18 06 F5 | 	and	arg04, #127
34758     10 FA 05 F1 | 	add	result1, #16
3475c     FD 18 42 FC | 	wrbyte	arg04, result1
34760                 | LR__5095
34760     28 4E 05 F1 | 	add	fp, #40
34764     A7 FA 01 FB | 	rdlong	result1, fp
34768     09 FA 65 F0 | 	shl	result1, #9
3476c     04 4E 85 F1 | 	sub	fp, #4
34770     A7 FA 61 FC | 	wrlong	result1, fp
34774     24 4E 85 F1 | 	sub	fp, #36
34778                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
34778                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
34778                 | ' 				}
34778                 | ' 
34778                 | ' 
34778                 | ' 				wcnt =  ((UINT) 512 )  * cc;
34778                 | ' 				continue;
34778     74 01 90 FD | 	jmp	#LR__5099
3477c                 | LR__5096
3477c     04 4E 05 F1 | 	add	fp, #4
34780     A7 28 02 FB | 	rdlong	local02, fp
34784     1C 28 06 F1 | 	add	local02, #28
34788     14 FB 01 FB | 	rdlong	result1, local02
3478c     1C 4E 05 F1 | 	add	fp, #28
34790     A7 28 02 FB | 	rdlong	local02, fp
34794     20 4E 85 F1 | 	sub	fp, #32
34798     14 FB 09 F2 | 	cmp	result1, local02 wz
3479c     90 00 90 AD |  if_e	jmp	#LR__5097
347a0     04 4E 05 F1 | 	add	fp, #4
347a4     A7 FA 01 FB | 	rdlong	result1, fp
347a8     FD 2A 02 F6 | 	mov	local03, result1
347ac     04 4E 85 F1 | 	sub	fp, #4
347b0     14 2A 06 F1 | 	add	local03, #20
347b4     15 2B 02 FB | 	rdlong	local03, local03
347b8     0C FA 05 F1 | 	add	result1, #12
347bc     FD 2C 02 FB | 	rdlong	local04, result1
347c0     16 2F 02 F6 | 	mov	local05, local04
347c4     17 2B 12 F2 | 	cmp	local03, local05 wc
347c8     64 00 90 3D |  if_ae	jmp	#LR__5097
347cc     18 4E 05 F1 | 	add	fp, #24
347d0     A7 18 02 FB | 	rdlong	arg04, fp
347d4     01 18 06 F1 | 	add	arg04, #1
347d8     0C 13 C2 FA | 	rdbyte	arg01, arg04
347dc     14 4E 85 F1 | 	sub	fp, #20
347e0     A7 30 02 FB | 	rdlong	local06, fp
347e4     28 30 06 F1 | 	add	local06, #40
347e8     18 33 02 F6 | 	mov	local07, local06
347ec     1C 4E 05 F1 | 	add	fp, #28
347f0     A7 34 02 FB | 	rdlong	local08, fp
347f4     20 4E 85 F1 | 	sub	fp, #32
347f8     01 36 06 F6 | 	mov	local09, #1
347fc     19 15 02 F6 | 	mov	arg02, local07
34800     1A 17 02 F6 | 	mov	arg03, local08
34804     01 18 06 F6 | 	mov	arg04, #1
34808     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
3480c     FD 38 0A F6 | 	mov	local10, result1 wz
34810     1C 00 90 AD |  if_e	jmp	#LR__5097
34814     04 4E 05 F1 | 	add	fp, #4
34818     A7 38 02 FB | 	rdlong	local10, fp
3481c     04 4E 85 F1 | 	sub	fp, #4
34820     11 38 06 F1 | 	add	local10, #17
34824     1C 03 48 FC | 	wrbyte	#1, local10
34828                 | ' 				fp->fptr < fp->obj.objsize &&
34828                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
34828                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
34828     01 FA 05 F6 | 	mov	result1, #1
3482c     E0 01 90 FD | 	jmp	#LR__5103
34830                 | LR__5097
34830     04 4E 05 F1 | 	add	fp, #4
34834     A7 18 02 FB | 	rdlong	arg04, fp
34838     1C 4E 05 F1 | 	add	fp, #28
3483c     A7 FA 01 FB | 	rdlong	result1, fp
34840     20 4E 85 F1 | 	sub	fp, #32
34844     1C 18 06 F1 | 	add	arg04, #28
34848     0C FB 61 FC | 	wrlong	result1, arg04
3484c                 | LR__5098
3484c     04 4E 05 F1 | 	add	fp, #4
34850     A7 FA 01 FB | 	rdlong	result1, fp
34854     14 FA 05 F1 | 	add	result1, #20
34858     FD FA 01 FB | 	rdlong	result1, result1
3485c     FF FB 05 F5 | 	and	result1, #511
34860     09 3A C6 F9 | 	decod	local11, #9
34864     FD 3A 82 F1 | 	sub	local11, result1
34868     20 4E 05 F1 | 	add	fp, #32
3486c     A7 3A 62 FC | 	wrlong	local11, fp
34870     18 4E 85 F1 | 	sub	fp, #24
34874     A7 FA 01 FB | 	rdlong	result1, fp
34878     0C 4E 85 F1 | 	sub	fp, #12
3487c     FD 3A 1A F2 | 	cmp	local11, result1 wcz
34880     0C 4E 05 11 |  if_a	add	fp, #12
34884     A7 3A 02 1B |  if_a	rdlong	local11, fp
34888     18 4E 05 11 |  if_a	add	fp, #24
3488c     A7 3A 62 1C |  if_a	wrlong	local11, fp
34890     24 4E 85 11 |  if_a	sub	fp, #36
34894     04 4E 05 F1 | 	add	fp, #4
34898     A7 3A 02 FB | 	rdlong	local11, fp
3489c     1D 13 02 F6 | 	mov	arg01, local11
348a0     28 12 06 F1 | 	add	arg01, #40
348a4     14 3A 06 F1 | 	add	local11, #20
348a8     1D 3B 02 FB | 	rdlong	local11, local11
348ac     FF 3B 06 F5 | 	and	local11, #511
348b0     1D 13 02 F1 | 	add	arg01, local11
348b4     2C 4E 05 F1 | 	add	fp, #44
348b8     A7 14 02 FB | 	rdlong	arg02, fp
348bc     0C 4E 85 F1 | 	sub	fp, #12
348c0     A7 16 02 FB | 	rdlong	arg03, fp
348c4     24 4E 85 F1 | 	sub	fp, #36
348c8     D8 39 BF FD | 	call	#__system____builtin_memmove
348cc     04 4E 05 F1 | 	add	fp, #4
348d0     A7 FA 01 FB | 	rdlong	result1, fp
348d4     FD 3A 02 F6 | 	mov	local11, result1
348d8     04 4E 85 F1 | 	sub	fp, #4
348dc     10 FA 05 F1 | 	add	result1, #16
348e0     FD FA C1 FA | 	rdbyte	result1, result1
348e4     80 FA 45 F5 | 	or	result1, #128
348e8     10 3A 06 F1 | 	add	local11, #16
348ec     1D FB 41 FC | 	wrbyte	result1, local11
348f0                 | LR__5099
348f0     0C 4E 05 F1 | 	add	fp, #12
348f4     A7 3A 02 FB | 	rdlong	local11, fp
348f8     18 4E 05 F1 | 	add	fp, #24
348fc     A7 FA 01 FB | 	rdlong	result1, fp
34900     FD 3A 82 F1 | 	sub	local11, result1
34904     18 4E 85 F1 | 	sub	fp, #24
34908     A7 3A 62 FC | 	wrlong	local11, fp
3490c     04 4E 05 F1 | 	add	fp, #4
34910     A7 3C 02 FB | 	rdlong	local12, fp
34914     1E 3B 02 FB | 	rdlong	local11, local12
34918     14 4E 05 F1 | 	add	fp, #20
3491c     A7 3E 02 FB | 	rdlong	local13, fp
34920     1F 3B 02 F1 | 	add	local11, local13
34924     1E 3B 62 FC | 	wrlong	local11, local12
34928     0C 4E 05 F1 | 	add	fp, #12
3492c     A7 3A 02 FB | 	rdlong	local11, fp
34930     0C 4E 85 F1 | 	sub	fp, #12
34934     A7 40 02 FB | 	rdlong	local14, fp
34938     20 3B 02 F1 | 	add	local11, local14
3493c     0C 4E 05 F1 | 	add	fp, #12
34940     A7 3A 62 FC | 	wrlong	local11, fp
34944     2C 4E 85 F1 | 	sub	fp, #44
34948     A7 42 02 FB | 	rdlong	local15, fp
3494c     21 3B 02 F6 | 	mov	local11, local15
34950     14 42 06 F1 | 	add	local15, #20
34954     21 43 02 FB | 	rdlong	local15, local15
34958     20 4E 05 F1 | 	add	fp, #32
3495c     A7 44 02 FB | 	rdlong	local16, fp
34960     22 43 02 F1 | 	add	local15, local16
34964     14 3A 06 F1 | 	add	local11, #20
34968     1D 43 62 FC | 	wrlong	local15, local11
3496c     20 4E 85 F1 | 	sub	fp, #32
34970     A7 46 02 FB | 	rdlong	local17, fp
34974     23 3B 02 F6 | 	mov	local11, local17
34978     23 49 02 F6 | 	mov	local18, local17
3497c     04 4E 85 F1 | 	sub	fp, #4
34980     14 46 06 F1 | 	add	local17, #20
34984     23 4B 02 FB | 	rdlong	local19, local17
34988     0C 48 06 F1 | 	add	local18, #12
3498c     24 4D 02 FB | 	rdlong	local20, local18
34990     26 4B 1A F2 | 	cmp	local19, local20 wcz
34994     24 00 90 ED |  if_be	jmp	#LR__5100
34998     04 4E 05 F1 | 	add	fp, #4
3499c     A7 2E 02 FB | 	rdlong	local05, fp
349a0     04 4E 85 F1 | 	sub	fp, #4
349a4     17 2B 02 F6 | 	mov	local03, local05
349a8     14 2A 06 F1 | 	add	local03, #20
349ac     15 2D 02 FB | 	rdlong	local04, local03
349b0     14 2A 86 F1 | 	sub	local03, #20
349b4     16 4F 02 F6 | 	mov	local21, local04
349b8     20 00 90 FD | 	jmp	#LR__5101
349bc                 | LR__5100
349bc     04 4E 05 F1 | 	add	fp, #4
349c0     A7 32 02 FB | 	rdlong	local07, fp
349c4     04 4E 85 F1 | 	sub	fp, #4
349c8     19 39 02 F6 | 	mov	local10, local07
349cc     0C 38 06 F1 | 	add	local10, #12
349d0     1C 35 02 FB | 	rdlong	local08, local10
349d4     0C 38 86 F1 | 	sub	local10, #12
349d8     1A 4F 02 F6 | 	mov	local21, local08
349dc                 | LR__5101
349dc     0C 3A 06 F1 | 	add	local11, #12
349e0     1D 4F 62 FC | 	wrlong	local21, local11
349e4     5C F9 9F FD | 	jmp	#LR__5083
349e8                 | LR__5102
349e8     04 4E 05 F1 | 	add	fp, #4
349ec     A7 3C 02 FB | 	rdlong	local12, fp
349f0     1E 27 02 F6 | 	mov	local01, local12
349f4     04 4E 85 F1 | 	sub	fp, #4
349f8     10 3C 06 F1 | 	add	local12, #16
349fc     1E 3B C2 FA | 	rdbyte	local11, local12
34a00     40 3A 46 F5 | 	or	local11, #64
34a04     10 26 06 F1 | 	add	local01, #16
34a08     13 3B 42 FC | 	wrbyte	local11, local01
34a0c                 | ' 
34a0c                 | ' 
34a0c                 | ' 
34a0c                 | ' 
34a0c                 | ' 
34a0c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
34a0c                 | ' 		fp->flag |=  0x80 ;
34a0c                 | ' 
34a0c                 | ' 	}
34a0c                 | ' 
34a0c                 | ' 	fp->flag |=  0x40 ;
34a0c                 | ' 
34a0c                 | ' 	return FR_OK ;
34a0c     00 FA 05 F6 | 	mov	result1, #0
34a10                 | LR__5103
34a10     A7 F0 03 F6 | 	mov	ptra, fp
34a14     B2 00 A0 FD | 	call	#popregs_
34a18                 | _fatfs_cc_f_write_ret
34a18     2D 00 64 FD | 	ret
34a1c                 | 
34a1c                 | _fatfs_cc_f_sync
34a1c     00 4A 05 F6 | 	mov	COUNT_, #0
34a20     A8 00 A0 FD | 	call	#pushregs_
34a24     18 F0 07 F1 | 	add	ptra, #24
34a28     04 4E 05 F1 | 	add	fp, #4
34a2c     A7 12 62 FC | 	wrlong	arg01, fp
34a30     08 4E 05 F1 | 	add	fp, #8
34a34     A7 14 02 F6 | 	mov	arg02, fp
34a38     0C 4E 85 F1 | 	sub	fp, #12
34a3c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
34a40     08 4E 05 F1 | 	add	fp, #8
34a44     A7 FA 61 FC | 	wrlong	result1, fp
34a48     08 4E 85 F1 | 	sub	fp, #8
34a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
34a50     C0 01 90 5D |  if_ne	jmp	#LR__5113
34a54     04 4E 05 F1 | 	add	fp, #4
34a58     A7 18 02 FB | 	rdlong	arg04, fp
34a5c     04 4E 85 F1 | 	sub	fp, #4
34a60     10 18 06 F1 | 	add	arg04, #16
34a64     0C 19 C2 FA | 	rdbyte	arg04, arg04
34a68     40 18 CE F7 | 	test	arg04, #64 wz
34a6c     A4 01 90 AD |  if_e	jmp	#LR__5112
34a70     04 4E 05 F1 | 	add	fp, #4
34a74     A7 18 02 FB | 	rdlong	arg04, fp
34a78     04 4E 85 F1 | 	sub	fp, #4
34a7c     10 18 06 F1 | 	add	arg04, #16
34a80     0C 19 C2 FA | 	rdbyte	arg04, arg04
34a84     80 18 CE F7 | 	test	arg04, #128 wz
34a88     64 00 90 AD |  if_e	jmp	#LR__5110
34a8c     0C 4E 05 F1 | 	add	fp, #12
34a90     A7 18 02 FB | 	rdlong	arg04, fp
34a94     01 18 06 F1 | 	add	arg04, #1
34a98     0C 13 C2 FA | 	rdbyte	arg01, arg04
34a9c     08 4E 85 F1 | 	sub	fp, #8
34aa0     A7 18 02 FB | 	rdlong	arg04, fp
34aa4     0C 15 02 F6 | 	mov	arg02, arg04
34aa8     28 14 06 F1 | 	add	arg02, #40
34aac     04 4E 85 F1 | 	sub	fp, #4
34ab0     1C 18 06 F1 | 	add	arg04, #28
34ab4     0C 17 02 FB | 	rdlong	arg03, arg04
34ab8     01 18 06 F6 | 	mov	arg04, #1
34abc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
34ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
34ac4     01 FA 05 56 |  if_ne	mov	result1, #1
34ac8     54 01 90 5D |  if_ne	jmp	#LR__5114
34acc     04 4E 05 F1 | 	add	fp, #4
34ad0     A7 18 02 FB | 	rdlong	arg04, fp
34ad4     0C 17 02 F6 | 	mov	arg03, arg04
34ad8     04 4E 85 F1 | 	sub	fp, #4
34adc     10 18 06 F1 | 	add	arg04, #16
34ae0     0C 19 C2 FA | 	rdbyte	arg04, arg04
34ae4     7F 18 06 F5 | 	and	arg04, #127
34ae8     10 16 06 F1 | 	add	arg03, #16
34aec     0B 19 42 FC | 	wrbyte	arg04, arg03
34af0                 | LR__5110
34af0     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
34af4     10 4E 05 F1 | 	add	fp, #16
34af8     A7 FA 61 FC | 	wrlong	result1, fp
34afc     04 4E 85 F1 | 	sub	fp, #4
34b00     A7 12 02 FB | 	rdlong	arg01, fp
34b04     08 4E 85 F1 | 	sub	fp, #8
34b08     A7 18 02 FB | 	rdlong	arg04, fp
34b0c     04 4E 85 F1 | 	sub	fp, #4
34b10     20 18 06 F1 | 	add	arg04, #32
34b14     0C 15 02 FB | 	rdlong	arg02, arg04
34b18     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
34b1c     08 4E 05 F1 | 	add	fp, #8
34b20     A7 FA 61 FC | 	wrlong	result1, fp
34b24     08 4E 85 F1 | 	sub	fp, #8
34b28     00 FA 0D F2 | 	cmp	result1, #0 wz
34b2c     E4 00 90 5D |  if_ne	jmp	#LR__5111
34b30     04 4E 05 F1 | 	add	fp, #4
34b34     A7 18 02 FB | 	rdlong	arg04, fp
34b38     24 18 06 F1 | 	add	arg04, #36
34b3c     0C 19 02 FB | 	rdlong	arg04, arg04
34b40     10 4E 05 F1 | 	add	fp, #16
34b44     A7 18 62 FC | 	wrlong	arg04, fp
34b48     0C 17 02 F6 | 	mov	arg03, arg04
34b4c     0B 16 06 F1 | 	add	arg03, #11
34b50     0B 17 C2 FA | 	rdbyte	arg03, arg03
34b54     20 16 46 F5 | 	or	arg03, #32
34b58     0B 18 06 F1 | 	add	arg04, #11
34b5c     0C 17 42 FC | 	wrbyte	arg03, arg04
34b60     10 4E 85 F1 | 	sub	fp, #16
34b64     A7 18 02 FB | 	rdlong	arg04, fp
34b68     0C 13 02 FB | 	rdlong	arg01, arg04
34b6c     10 4E 05 F1 | 	add	fp, #16
34b70     A7 14 02 FB | 	rdlong	arg02, fp
34b74     14 4E 85 F1 | 	sub	fp, #20
34b78     08 18 06 F1 | 	add	arg04, #8
34b7c     0C 17 02 FB | 	rdlong	arg03, arg04
34b80     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
34b84     14 4E 05 F1 | 	add	fp, #20
34b88     A7 12 02 FB | 	rdlong	arg01, fp
34b8c     1C 12 06 F1 | 	add	arg01, #28
34b90     10 4E 85 F1 | 	sub	fp, #16
34b94     A7 18 02 FB | 	rdlong	arg04, fp
34b98     0C 18 06 F1 | 	add	arg04, #12
34b9c     0C 15 02 FB | 	rdlong	arg02, arg04
34ba0     09 15 62 FC | 	wrlong	arg02, arg01
34ba4     10 4E 05 F1 | 	add	fp, #16
34ba8     A7 12 02 FB | 	rdlong	arg01, fp
34bac     16 12 06 F1 | 	add	arg01, #22
34bb0     04 4E 85 F1 | 	sub	fp, #4
34bb4     A7 14 02 FB | 	rdlong	arg02, fp
34bb8     09 15 62 FC | 	wrlong	arg02, arg01
34bbc     04 4E 05 F1 | 	add	fp, #4
34bc0     A7 12 02 FB | 	rdlong	arg01, fp
34bc4     12 12 06 F1 | 	add	arg01, #18
34bc8     09 01 58 FC | 	wrword	#0, arg01
34bcc     08 4E 85 F1 | 	sub	fp, #8
34bd0     A7 18 02 FB | 	rdlong	arg04, fp
34bd4     03 18 06 F1 | 	add	arg04, #3
34bd8     0C 03 48 FC | 	wrbyte	#1, arg04
34bdc     A7 12 02 FB | 	rdlong	arg01, fp
34be0     0C 4E 85 F1 | 	sub	fp, #12
34be4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
34be8     08 4E 05 F1 | 	add	fp, #8
34bec     A7 FA 61 FC | 	wrlong	result1, fp
34bf0     04 4E 85 F1 | 	sub	fp, #4
34bf4     A7 18 02 FB | 	rdlong	arg04, fp
34bf8     0C 17 02 F6 | 	mov	arg03, arg04
34bfc     04 4E 85 F1 | 	sub	fp, #4
34c00     10 18 06 F1 | 	add	arg04, #16
34c04     0C 19 C2 FA | 	rdbyte	arg04, arg04
34c08     BF 18 06 F5 | 	and	arg04, #191
34c0c     10 16 06 F1 | 	add	arg03, #16
34c10     0B 19 42 FC | 	wrbyte	arg04, arg03
34c14                 | LR__5111
34c14                 | LR__5112
34c14                 | LR__5113
34c14                 | ' 					dir = fp->dir_ptr;
34c14                 | ' 					dir[ 11 ] |=  0x20 ;
34c14                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
34c14                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
34c14                 | ' 					st_dword(dir +  22 , tm);
34c14                 | ' 					st_word(dir +  18 , 0);
34c14                 | ' 					fs->wflag = 1;
34c14                 | ' 					res = sync_fs(fs);
34c14                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
34c14                 | ' 				}
34c14                 | ' 			}
34c14                 | ' 		}
34c14                 | ' 	}
34c14                 | ' 
34c14                 | ' 	return res ;
34c14     08 4E 05 F1 | 	add	fp, #8
34c18     A7 FA 01 FB | 	rdlong	result1, fp
34c1c     08 4E 85 F1 | 	sub	fp, #8
34c20                 | LR__5114
34c20     A7 F0 03 F6 | 	mov	ptra, fp
34c24     B2 00 A0 FD | 	call	#popregs_
34c28                 | _fatfs_cc_f_sync_ret
34c28     2D 00 64 FD | 	ret
34c2c                 | 
34c2c                 | _fatfs_cc_f_close
34c2c     01 4A 05 F6 | 	mov	COUNT_, #1
34c30     A8 00 A0 FD | 	call	#pushregs_
34c34     10 F0 07 F1 | 	add	ptra, #16
34c38     04 4E 05 F1 | 	add	fp, #4
34c3c     A7 12 62 FC | 	wrlong	arg01, fp
34c40     04 4E 85 F1 | 	sub	fp, #4
34c44     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
34c48     08 4E 05 F1 | 	add	fp, #8
34c4c     A7 FA 61 FC | 	wrlong	result1, fp
34c50     08 4E 85 F1 | 	sub	fp, #8
34c54     00 FA 0D F2 | 	cmp	result1, #0 wz
34c58     38 00 90 5D |  if_ne	jmp	#LR__5120
34c5c     04 4E 05 F1 | 	add	fp, #4
34c60     A7 12 02 FB | 	rdlong	arg01, fp
34c64     08 4E 05 F1 | 	add	fp, #8
34c68     A7 14 02 F6 | 	mov	arg02, fp
34c6c     0C 4E 85 F1 | 	sub	fp, #12
34c70     9C E6 BF FD | 	call	#_fatfs_cc_validate
34c74     08 4E 05 F1 | 	add	fp, #8
34c78     A7 FA 61 FC | 	wrlong	result1, fp
34c7c     08 4E 85 F1 | 	sub	fp, #8
34c80     00 FA 0D F2 | 	cmp	result1, #0 wz
34c84     04 4E 05 A1 |  if_e	add	fp, #4
34c88     A7 26 02 AB |  if_e	rdlong	local01, fp
34c8c     04 4E 85 A1 |  if_e	sub	fp, #4
34c90     13 01 68 AC |  if_e	wrlong	#0, local01
34c94                 | LR__5120
34c94                 | ' 
34c94                 | ' 
34c94                 | ' 
34c94                 | ' 
34c94                 | ' 			fp->obj.fs = 0;
34c94                 | ' #line 4192 "ff.c"
34c94                 | ' 		}
34c94                 | ' 	}
34c94                 | ' 	return res;
34c94     08 4E 05 F1 | 	add	fp, #8
34c98     A7 FA 01 FB | 	rdlong	result1, fp
34c9c     08 4E 85 F1 | 	sub	fp, #8
34ca0     A7 F0 03 F6 | 	mov	ptra, fp
34ca4     B2 00 A0 FD | 	call	#popregs_
34ca8                 | _fatfs_cc_f_close_ret
34ca8     2D 00 64 FD | 	ret
34cac                 | 
34cac                 | _fatfs_cc_f_lseek
34cac     00 4A 05 F6 | 	mov	COUNT_, #0
34cb0     A8 00 A0 FD | 	call	#pushregs_
34cb4     24 F0 07 F1 | 	add	ptra, #36
34cb8     04 4E 05 F1 | 	add	fp, #4
34cbc     A7 12 62 FC | 	wrlong	arg01, fp
34cc0     04 4E 05 F1 | 	add	fp, #4
34cc4     A7 14 62 FC | 	wrlong	arg02, fp
34cc8     04 4E 85 F1 | 	sub	fp, #4
34ccc     A7 12 02 FB | 	rdlong	arg01, fp
34cd0     0C 4E 05 F1 | 	add	fp, #12
34cd4     A7 14 02 F6 | 	mov	arg02, fp
34cd8     10 4E 85 F1 | 	sub	fp, #16
34cdc     30 E6 BF FD | 	call	#_fatfs_cc_validate
34ce0     0C 4E 05 F1 | 	add	fp, #12
34ce4     A7 FA 61 FC | 	wrlong	result1, fp
34ce8     0C 4E 85 F1 | 	sub	fp, #12
34cec     00 FA 0D F2 | 	cmp	result1, #0 wz
34cf0     1C 00 90 5D |  if_ne	jmp	#LR__5130
34cf4     04 4E 05 F1 | 	add	fp, #4
34cf8     A7 18 02 FB | 	rdlong	arg04, fp
34cfc     11 18 06 F1 | 	add	arg04, #17
34d00     0C 19 C2 FA | 	rdbyte	arg04, arg04
34d04     08 4E 05 F1 | 	add	fp, #8
34d08     A7 18 62 FC | 	wrlong	arg04, fp
34d0c     0C 4E 85 F1 | 	sub	fp, #12
34d10                 | LR__5130
34d10     0C 4E 05 F1 | 	add	fp, #12
34d14     A7 18 0A FB | 	rdlong	arg04, fp wz
34d18     0C 4E 85 F1 | 	sub	fp, #12
34d1c     0C 4E 05 51 |  if_ne	add	fp, #12
34d20     A7 FA 01 5B |  if_ne	rdlong	result1, fp
34d24     0C 4E 85 51 |  if_ne	sub	fp, #12
34d28     40 06 90 5D |  if_ne	jmp	#LR__5153
34d2c     04 4E 05 F1 | 	add	fp, #4
34d30     A7 18 02 FB | 	rdlong	arg04, fp
34d34     04 4E 05 F1 | 	add	fp, #4
34d38     A7 16 02 FB | 	rdlong	arg03, fp
34d3c     08 4E 85 F1 | 	sub	fp, #8
34d40     0C 18 06 F1 | 	add	arg04, #12
34d44     0C 19 02 FB | 	rdlong	arg04, arg04
34d48     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
34d4c     3C 00 90 ED |  if_be	jmp	#LR__5131
34d50     04 4E 05 F1 | 	add	fp, #4
34d54     A7 16 02 FB | 	rdlong	arg03, fp
34d58     04 4E 85 F1 | 	sub	fp, #4
34d5c     10 16 06 F1 | 	add	arg03, #16
34d60     0B 17 C2 FA | 	rdbyte	arg03, arg03
34d64     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
34d68     02 16 CE F7 | 	test	arg03, #2 wz
34d6c     1C 00 90 5D |  if_ne	jmp	#LR__5131
34d70     04 4E 05 F1 | 	add	fp, #4
34d74     A7 16 02 FB | 	rdlong	arg03, fp
34d78     0C 16 06 F1 | 	add	arg03, #12
34d7c     0B 17 02 FB | 	rdlong	arg03, arg03
34d80     04 4E 05 F1 | 	add	fp, #4
34d84     A7 16 62 FC | 	wrlong	arg03, fp
34d88     08 4E 85 F1 | 	sub	fp, #8
34d8c                 | LR__5131
34d8c     04 4E 05 F1 | 	add	fp, #4
34d90     A7 16 02 FB | 	rdlong	arg03, fp
34d94     14 16 06 F1 | 	add	arg03, #20
34d98     0B 17 02 FB | 	rdlong	arg03, arg03
34d9c     1C 4E 05 F1 | 	add	fp, #28
34da0     A7 16 62 FC | 	wrlong	arg03, fp
34da4     1C 4E 85 F1 | 	sub	fp, #28
34da8     A7 16 02 FB | 	rdlong	arg03, fp
34dac     18 4E 05 F1 | 	add	fp, #24
34db0     A7 00 68 FC | 	wrlong	#0, fp
34db4     14 16 06 F1 | 	add	arg03, #20
34db8     0B 01 68 FC | 	wrlong	#0, arg03
34dbc     14 4E 85 F1 | 	sub	fp, #20
34dc0     A7 16 02 FB | 	rdlong	arg03, fp
34dc4     08 4E 85 F1 | 	sub	fp, #8
34dc8     01 16 16 F2 | 	cmp	arg03, #1 wc
34dcc     E4 03 90 CD |  if_b	jmp	#LR__5147
34dd0     10 4E 05 F1 | 	add	fp, #16
34dd4     A7 16 02 FB | 	rdlong	arg03, fp
34dd8     0A 16 06 F1 | 	add	arg03, #10
34ddc     0B 19 E2 FA | 	rdword	arg04, arg03
34de0     09 18 66 F0 | 	shl	arg04, #9
34de4     08 4E 05 F1 | 	add	fp, #8
34de8     A7 18 62 FC | 	wrlong	arg04, fp
34dec     08 4E 05 F1 | 	add	fp, #8
34df0     A7 18 02 FB | 	rdlong	arg04, fp
34df4     20 4E 85 F1 | 	sub	fp, #32
34df8     01 18 16 F2 | 	cmp	arg04, #1 wc
34dfc     AC 00 90 CD |  if_b	jmp	#LR__5132
34e00     08 4E 05 F1 | 	add	fp, #8
34e04     A7 18 02 FB | 	rdlong	arg04, fp
34e08     01 18 86 F1 | 	sub	arg04, #1
34e0c     10 4E 05 F1 | 	add	fp, #16
34e10     A7 16 02 FB | 	rdlong	arg03, fp
34e14     0B 19 12 FD | 	qdiv	arg04, arg03
34e18     08 4E 05 F1 | 	add	fp, #8
34e1c     A7 FA 01 FB | 	rdlong	result1, fp
34e20     01 FA 85 F1 | 	sub	result1, #1
34e24     18 18 62 FD | 	getqx	arg04
34e28     0B FB 11 FD | 	qdiv	result1, arg03
34e2c     20 4E 85 F1 | 	sub	fp, #32
34e30     18 16 62 FD | 	getqx	arg03
34e34     0B 19 12 F2 | 	cmp	arg04, arg03 wc
34e38     70 00 90 CD |  if_b	jmp	#LR__5132
34e3c     04 4E 05 F1 | 	add	fp, #4
34e40     A7 16 02 FB | 	rdlong	arg03, fp
34e44     1C 4E 05 F1 | 	add	fp, #28
34e48     A7 FA 01 FB | 	rdlong	result1, fp
34e4c     01 FA 85 F1 | 	sub	result1, #1
34e50     08 4E 85 F1 | 	sub	fp, #8
34e54     A7 18 02 FB | 	rdlong	arg04, fp
34e58     01 18 86 F1 | 	sub	arg04, #1
34e5c     0C FB 21 F5 | 	andn	result1, arg04
34e60     14 16 06 F1 | 	add	arg03, #20
34e64     0B FB 61 FC | 	wrlong	result1, arg03
34e68     10 4E 85 F1 | 	sub	fp, #16
34e6c     A7 16 02 FB | 	rdlong	arg03, fp
34e70     04 4E 85 F1 | 	sub	fp, #4
34e74     A7 18 02 FB | 	rdlong	arg04, fp
34e78     14 18 06 F1 | 	add	arg04, #20
34e7c     0C 19 02 FB | 	rdlong	arg04, arg04
34e80     0C 17 82 F1 | 	sub	arg03, arg04
34e84     04 4E 05 F1 | 	add	fp, #4
34e88     A7 16 62 FC | 	wrlong	arg03, fp
34e8c     04 4E 85 F1 | 	sub	fp, #4
34e90     A7 16 02 FB | 	rdlong	arg03, fp
34e94     18 16 06 F1 | 	add	arg03, #24
34e98     0B 17 02 FB | 	rdlong	arg03, arg03
34e9c     10 4E 05 F1 | 	add	fp, #16
34ea0     A7 16 62 FC | 	wrlong	arg03, fp
34ea4     14 4E 85 F1 | 	sub	fp, #20
34ea8     D0 00 90 FD | 	jmp	#LR__5136
34eac                 | LR__5132
34eac     04 4E 05 F1 | 	add	fp, #4
34eb0     A7 16 02 FB | 	rdlong	arg03, fp
34eb4     08 16 06 F1 | 	add	arg03, #8
34eb8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
34ebc     10 4E 05 F1 | 	add	fp, #16
34ec0     A7 16 62 FC | 	wrlong	arg03, fp
34ec4     14 4E 85 F1 | 	sub	fp, #20
34ec8     94 00 90 5D |  if_ne	jmp	#LR__5135
34ecc     04 4E 05 F1 | 	add	fp, #4
34ed0     A7 12 02 FB | 	rdlong	arg01, fp
34ed4     04 4E 85 F1 | 	sub	fp, #4
34ed8     00 14 06 F6 | 	mov	arg02, #0
34edc     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
34ee0     14 4E 05 F1 | 	add	fp, #20
34ee4     A7 FA 61 FC | 	wrlong	result1, fp
34ee8     14 4E 85 F1 | 	sub	fp, #20
34eec     01 FA 0D F2 | 	cmp	result1, #1 wz
34ef0     1C 00 90 5D |  if_ne	jmp	#LR__5133
34ef4     04 4E 05 F1 | 	add	fp, #4
34ef8     A7 16 02 FB | 	rdlong	arg03, fp
34efc     04 4E 85 F1 | 	sub	fp, #4
34f00     11 16 06 F1 | 	add	arg03, #17
34f04     0B 05 48 FC | 	wrbyte	#2, arg03
34f08     02 FA 05 F6 | 	mov	result1, #2
34f0c     5C 04 90 FD | 	jmp	#LR__5153
34f10                 | LR__5133
34f10     14 4E 05 F1 | 	add	fp, #20
34f14     A7 FA 01 FB | 	rdlong	result1, fp
34f18     14 4E 85 F1 | 	sub	fp, #20
34f1c     FF FF 7F FF 
34f20     FF FB 0D F2 | 	cmp	result1, ##-1 wz
34f24     1C 00 90 5D |  if_ne	jmp	#LR__5134
34f28     04 4E 05 F1 | 	add	fp, #4
34f2c     A7 16 02 FB | 	rdlong	arg03, fp
34f30     04 4E 85 F1 | 	sub	fp, #4
34f34     11 16 06 F1 | 	add	arg03, #17
34f38     0B 03 48 FC | 	wrbyte	#1, arg03
34f3c     01 FA 05 F6 | 	mov	result1, #1
34f40     28 04 90 FD | 	jmp	#LR__5153
34f44                 | LR__5134
34f44     04 4E 05 F1 | 	add	fp, #4
34f48     A7 16 02 FB | 	rdlong	arg03, fp
34f4c     10 4E 05 F1 | 	add	fp, #16
34f50     A7 18 02 FB | 	rdlong	arg04, fp
34f54     14 4E 85 F1 | 	sub	fp, #20
34f58     08 16 06 F1 | 	add	arg03, #8
34f5c     0B 19 62 FC | 	wrlong	arg04, arg03
34f60                 | LR__5135
34f60     04 4E 05 F1 | 	add	fp, #4
34f64     A7 16 02 FB | 	rdlong	arg03, fp
34f68     10 4E 05 F1 | 	add	fp, #16
34f6c     A7 18 02 FB | 	rdlong	arg04, fp
34f70     14 4E 85 F1 | 	sub	fp, #20
34f74     18 16 06 F1 | 	add	arg03, #24
34f78     0B 19 62 FC | 	wrlong	arg04, arg03
34f7c                 | LR__5136
34f7c     14 4E 05 F1 | 	add	fp, #20
34f80     A7 16 0A FB | 	rdlong	arg03, fp wz
34f84     14 4E 85 F1 | 	sub	fp, #20
34f88     28 02 90 AD |  if_e	jmp	#LR__5146
34f8c                 | ' 				while (ofs > bcs) {
34f8c                 | LR__5137
34f8c     08 4E 05 F1 | 	add	fp, #8
34f90     A7 18 02 FB | 	rdlong	arg04, fp
34f94     10 4E 05 F1 | 	add	fp, #16
34f98     A7 16 02 FB | 	rdlong	arg03, fp
34f9c     18 4E 85 F1 | 	sub	fp, #24
34fa0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
34fa4     68 01 90 ED |  if_be	jmp	#LR__5143
34fa8     08 4E 05 F1 | 	add	fp, #8
34fac     A7 18 02 FB | 	rdlong	arg04, fp
34fb0     10 4E 05 F1 | 	add	fp, #16
34fb4     A7 16 02 FB | 	rdlong	arg03, fp
34fb8     0B 19 82 F1 | 	sub	arg04, arg03
34fbc     10 4E 85 F1 | 	sub	fp, #16
34fc0     A7 18 62 FC | 	wrlong	arg04, fp
34fc4     04 4E 85 F1 | 	sub	fp, #4
34fc8     A7 18 02 FB | 	rdlong	arg04, fp
34fcc     0C FB 01 F6 | 	mov	result1, arg04
34fd0     14 18 06 F1 | 	add	arg04, #20
34fd4     0C 19 02 FB | 	rdlong	arg04, arg04
34fd8     14 4E 05 F1 | 	add	fp, #20
34fdc     A7 16 02 FB | 	rdlong	arg03, fp
34fe0     0B 19 02 F1 | 	add	arg04, arg03
34fe4     14 FA 05 F1 | 	add	result1, #20
34fe8     FD 18 62 FC | 	wrlong	arg04, result1
34fec     14 4E 85 F1 | 	sub	fp, #20
34ff0     A7 16 02 FB | 	rdlong	arg03, fp
34ff4     04 4E 85 F1 | 	sub	fp, #4
34ff8     10 16 06 F1 | 	add	arg03, #16
34ffc     0B 17 C2 FA | 	rdbyte	arg03, arg03
35000     02 16 CE F7 | 	test	arg03, #2 wz
35004     3C 00 90 AD |  if_e	jmp	#LR__5138
35008     04 4E 05 F1 | 	add	fp, #4
3500c     A7 12 02 FB | 	rdlong	arg01, fp
35010     10 4E 05 F1 | 	add	fp, #16
35014     A7 14 02 FB | 	rdlong	arg02, fp
35018     14 4E 85 F1 | 	sub	fp, #20
3501c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
35020     14 4E 05 F1 | 	add	fp, #20
35024     A7 FA 61 FC | 	wrlong	result1, fp
35028     00 FA 4D F2 | 	cmps	result1, #0 wz
3502c     14 4E 85 F1 | 	sub	fp, #20
35030     08 4E 05 A1 |  if_e	add	fp, #8
35034     A7 00 68 AC |  if_e	wrlong	#0, fp
35038     08 4E 85 A1 |  if_e	sub	fp, #8
3503c                 | ' 							ofs = 0; break;
3503c     D0 00 90 AD |  if_e	jmp	#LR__5143
35040     24 00 90 FD | 	jmp	#LR__5139
35044                 | LR__5138
35044     04 4E 05 F1 | 	add	fp, #4
35048     A7 12 02 FB | 	rdlong	arg01, fp
3504c     10 4E 05 F1 | 	add	fp, #16
35050     A7 14 02 FB | 	rdlong	arg02, fp
35054     14 4E 85 F1 | 	sub	fp, #20
35058     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
3505c     14 4E 05 F1 | 	add	fp, #20
35060     A7 FA 61 FC | 	wrlong	result1, fp
35064     14 4E 85 F1 | 	sub	fp, #20
35068                 | LR__5139
35068     14 4E 05 F1 | 	add	fp, #20
3506c     A7 16 02 FB | 	rdlong	arg03, fp
35070     14 4E 85 F1 | 	sub	fp, #20
35074     FF FF 7F FF 
35078     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
3507c     1C 00 90 5D |  if_ne	jmp	#LR__5140
35080     04 4E 05 F1 | 	add	fp, #4
35084     A7 16 02 FB | 	rdlong	arg03, fp
35088     04 4E 85 F1 | 	sub	fp, #4
3508c     11 16 06 F1 | 	add	arg03, #17
35090     0B 03 48 FC | 	wrbyte	#1, arg03
35094     01 FA 05 F6 | 	mov	result1, #1
35098     D0 02 90 FD | 	jmp	#LR__5153
3509c                 | LR__5140
3509c     14 4E 05 F1 | 	add	fp, #20
350a0     A7 16 02 FB | 	rdlong	arg03, fp
350a4     14 4E 85 F1 | 	sub	fp, #20
350a8     02 16 16 F2 | 	cmp	arg03, #2 wc
350ac     24 00 90 CD |  if_b	jmp	#LR__5141
350b0     10 4E 05 F1 | 	add	fp, #16
350b4     A7 18 02 FB | 	rdlong	arg04, fp
350b8     04 4E 05 F1 | 	add	fp, #4
350bc     A7 16 02 FB | 	rdlong	arg03, fp
350c0     14 4E 85 F1 | 	sub	fp, #20
350c4     18 18 06 F1 | 	add	arg04, #24
350c8     0C 19 02 FB | 	rdlong	arg04, arg04
350cc     0C 17 12 F2 | 	cmp	arg03, arg04 wc
350d0     1C 00 90 CD |  if_b	jmp	#LR__5142
350d4                 | LR__5141
350d4     04 4E 05 F1 | 	add	fp, #4
350d8     A7 16 02 FB | 	rdlong	arg03, fp
350dc     04 4E 85 F1 | 	sub	fp, #4
350e0     11 16 06 F1 | 	add	arg03, #17
350e4     0B 05 48 FC | 	wrbyte	#2, arg03
350e8     02 FA 05 F6 | 	mov	result1, #2
350ec     7C 02 90 FD | 	jmp	#LR__5153
350f0                 | LR__5142
350f0     04 4E 05 F1 | 	add	fp, #4
350f4     A7 18 02 FB | 	rdlong	arg04, fp
350f8     10 4E 05 F1 | 	add	fp, #16
350fc     A7 16 02 FB | 	rdlong	arg03, fp
35100     14 4E 85 F1 | 	sub	fp, #20
35104     18 18 06 F1 | 	add	arg04, #24
35108     0C 17 62 FC | 	wrlong	arg03, arg04
3510c     7C FE 9F FD | 	jmp	#LR__5137
35110                 | LR__5143
35110     04 4E 05 F1 | 	add	fp, #4
35114     A7 16 02 FB | 	rdlong	arg03, fp
35118     0B 13 02 F6 | 	mov	arg01, arg03
3511c     14 16 06 F1 | 	add	arg03, #20
35120     0B 15 02 FB | 	rdlong	arg02, arg03
35124     04 4E 05 F1 | 	add	fp, #4
35128     A7 16 02 FB | 	rdlong	arg03, fp
3512c     0B 15 02 F1 | 	add	arg02, arg03
35130     14 12 06 F1 | 	add	arg01, #20
35134     09 15 62 FC | 	wrlong	arg02, arg01
35138     A7 16 02 FB | 	rdlong	arg03, fp
3513c     08 4E 85 F1 | 	sub	fp, #8
35140     FF 17 CE F7 | 	test	arg03, #511 wz
35144     6C 00 90 AD |  if_e	jmp	#LR__5145
35148     10 4E 05 F1 | 	add	fp, #16
3514c     A7 12 02 FB | 	rdlong	arg01, fp
35150     04 4E 05 F1 | 	add	fp, #4
35154     A7 14 02 FB | 	rdlong	arg02, fp
35158     14 4E 85 F1 | 	sub	fp, #20
3515c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
35160     1C 4E 05 F1 | 	add	fp, #28
35164     A7 FA 61 FC | 	wrlong	result1, fp
35168     1C 4E 85 F1 | 	sub	fp, #28
3516c     00 FA 0D F2 | 	cmp	result1, #0 wz
35170     1C 00 90 5D |  if_ne	jmp	#LR__5144
35174     04 4E 05 F1 | 	add	fp, #4
35178     A7 16 02 FB | 	rdlong	arg03, fp
3517c     04 4E 85 F1 | 	sub	fp, #4
35180     11 16 06 F1 | 	add	arg03, #17
35184     0B 05 48 FC | 	wrbyte	#2, arg03
35188     02 FA 05 F6 | 	mov	result1, #2
3518c     DC 01 90 FD | 	jmp	#LR__5153
35190                 | LR__5144
35190     1C 4E 05 F1 | 	add	fp, #28
35194     A7 18 02 FB | 	rdlong	arg04, fp
35198     14 4E 85 F1 | 	sub	fp, #20
3519c     A7 16 02 FB | 	rdlong	arg03, fp
351a0     09 16 46 F0 | 	shr	arg03, #9
351a4     0B 19 02 F1 | 	add	arg04, arg03
351a8     14 4E 05 F1 | 	add	fp, #20
351ac     A7 18 62 FC | 	wrlong	arg04, fp
351b0     1C 4E 85 F1 | 	sub	fp, #28
351b4                 | LR__5145
351b4                 | LR__5146
351b4                 | LR__5147
351b4     04 4E 05 F1 | 	add	fp, #4
351b8     A7 18 02 FB | 	rdlong	arg04, fp
351bc     0C 17 02 F6 | 	mov	arg03, arg04
351c0     04 4E 85 F1 | 	sub	fp, #4
351c4     14 16 06 F1 | 	add	arg03, #20
351c8     0B 17 02 FB | 	rdlong	arg03, arg03
351cc     0C 18 06 F1 | 	add	arg04, #12
351d0     0C 19 02 FB | 	rdlong	arg04, arg04
351d4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
351d8     3C 00 90 ED |  if_be	jmp	#LR__5148
351dc     04 4E 05 F1 | 	add	fp, #4
351e0     A7 18 02 FB | 	rdlong	arg04, fp
351e4     0C 17 02 F6 | 	mov	arg03, arg04
351e8     14 18 06 F1 | 	add	arg04, #20
351ec     0C 19 02 FB | 	rdlong	arg04, arg04
351f0     0C 16 06 F1 | 	add	arg03, #12
351f4     0B 19 62 FC | 	wrlong	arg04, arg03
351f8     A7 18 02 FB | 	rdlong	arg04, fp
351fc     0C 17 02 F6 | 	mov	arg03, arg04
35200     04 4E 85 F1 | 	sub	fp, #4
35204     10 18 06 F1 | 	add	arg04, #16
35208     0C 19 C2 FA | 	rdbyte	arg04, arg04
3520c     40 18 46 F5 | 	or	arg04, #64
35210     10 16 06 F1 | 	add	arg03, #16
35214     0B 19 42 FC | 	wrbyte	arg04, arg03
35218                 | LR__5148
35218     04 4E 05 F1 | 	add	fp, #4
3521c     A7 16 02 FB | 	rdlong	arg03, fp
35220     04 4E 85 F1 | 	sub	fp, #4
35224     14 16 06 F1 | 	add	arg03, #20
35228     0B 17 02 FB | 	rdlong	arg03, arg03
3522c     FF 17 CE F7 | 	test	arg03, #511 wz
35230     2C 01 90 AD |  if_e	jmp	#LR__5152
35234     04 4E 05 F1 | 	add	fp, #4
35238     A7 18 02 FB | 	rdlong	arg04, fp
3523c     18 4E 05 F1 | 	add	fp, #24
35240     A7 16 02 FB | 	rdlong	arg03, fp
35244     1C 4E 85 F1 | 	sub	fp, #28
35248     1C 18 06 F1 | 	add	arg04, #28
3524c     0C 19 02 FB | 	rdlong	arg04, arg04
35250     0C 17 0A F2 | 	cmp	arg03, arg04 wz
35254     08 01 90 AD |  if_e	jmp	#LR__5152
35258     04 4E 05 F1 | 	add	fp, #4
3525c     A7 16 02 FB | 	rdlong	arg03, fp
35260     04 4E 85 F1 | 	sub	fp, #4
35264     10 16 06 F1 | 	add	arg03, #16
35268     0B 17 C2 FA | 	rdbyte	arg03, arg03
3526c     80 16 CE F7 | 	test	arg03, #128 wz
35270     7C 00 90 AD |  if_e	jmp	#LR__5150
35274     10 4E 05 F1 | 	add	fp, #16
35278     A7 16 02 FB | 	rdlong	arg03, fp
3527c     01 16 06 F1 | 	add	arg03, #1
35280     0B 13 C2 FA | 	rdbyte	arg01, arg03
35284     0C 4E 85 F1 | 	sub	fp, #12
35288     A7 16 02 FB | 	rdlong	arg03, fp
3528c     0B 15 02 F6 | 	mov	arg02, arg03
35290     28 14 06 F1 | 	add	arg02, #40
35294     04 4E 85 F1 | 	sub	fp, #4
35298     1C 16 06 F1 | 	add	arg03, #28
3529c     0B 17 02 FB | 	rdlong	arg03, arg03
352a0     01 18 06 F6 | 	mov	arg04, #1
352a4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
352a8     00 FA 0D F2 | 	cmp	result1, #0 wz
352ac     1C 00 90 AD |  if_e	jmp	#LR__5149
352b0     04 4E 05 F1 | 	add	fp, #4
352b4     A7 16 02 FB | 	rdlong	arg03, fp
352b8     04 4E 85 F1 | 	sub	fp, #4
352bc     11 16 06 F1 | 	add	arg03, #17
352c0     0B 03 48 FC | 	wrbyte	#1, arg03
352c4     01 FA 05 F6 | 	mov	result1, #1
352c8     A0 00 90 FD | 	jmp	#LR__5153
352cc                 | LR__5149
352cc     04 4E 05 F1 | 	add	fp, #4
352d0     A7 18 02 FB | 	rdlong	arg04, fp
352d4     0C 17 02 F6 | 	mov	arg03, arg04
352d8     04 4E 85 F1 | 	sub	fp, #4
352dc     10 18 06 F1 | 	add	arg04, #16
352e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
352e4     7F 18 06 F5 | 	and	arg04, #127
352e8     10 16 06 F1 | 	add	arg03, #16
352ec     0B 19 42 FC | 	wrbyte	arg04, arg03
352f0                 | LR__5150
352f0     10 4E 05 F1 | 	add	fp, #16
352f4     A7 16 02 FB | 	rdlong	arg03, fp
352f8     01 16 06 F1 | 	add	arg03, #1
352fc     0B 13 C2 FA | 	rdbyte	arg01, arg03
35300     0C 4E 85 F1 | 	sub	fp, #12
35304     A7 14 02 FB | 	rdlong	arg02, fp
35308     28 14 06 F1 | 	add	arg02, #40
3530c     18 4E 05 F1 | 	add	fp, #24
35310     A7 16 02 FB | 	rdlong	arg03, fp
35314     1C 4E 85 F1 | 	sub	fp, #28
35318     01 18 06 F6 | 	mov	arg04, #1
3531c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
35320     00 FA 0D F2 | 	cmp	result1, #0 wz
35324     1C 00 90 AD |  if_e	jmp	#LR__5151
35328     04 4E 05 F1 | 	add	fp, #4
3532c     A7 16 02 FB | 	rdlong	arg03, fp
35330     04 4E 85 F1 | 	sub	fp, #4
35334     11 16 06 F1 | 	add	arg03, #17
35338     0B 03 48 FC | 	wrbyte	#1, arg03
3533c     01 FA 05 F6 | 	mov	result1, #1
35340     28 00 90 FD | 	jmp	#LR__5153
35344                 | LR__5151
35344     04 4E 05 F1 | 	add	fp, #4
35348     A7 18 02 FB | 	rdlong	arg04, fp
3534c     18 4E 05 F1 | 	add	fp, #24
35350     A7 16 02 FB | 	rdlong	arg03, fp
35354     1C 4E 85 F1 | 	sub	fp, #28
35358     1C 18 06 F1 | 	add	arg04, #28
3535c     0C 17 62 FC | 	wrlong	arg03, arg04
35360                 | LR__5152
35360                 | ' 
35360                 | ' 			fp->sect = nsect;
35360                 | ' 		}
35360                 | ' 	}
35360                 | ' 
35360                 | ' 	return res ;
35360     0C 4E 05 F1 | 	add	fp, #12
35364     A7 FA 01 FB | 	rdlong	result1, fp
35368     0C 4E 85 F1 | 	sub	fp, #12
3536c                 | LR__5153
3536c     A7 F0 03 F6 | 	mov	ptra, fp
35370     B2 00 A0 FD | 	call	#popregs_
35374                 | _fatfs_cc_f_lseek_ret
35374     2D 00 64 FD | 	ret
35378                 | 
35378                 | _fatfs_cc_f_opendir
35378     01 4A 05 F6 | 	mov	COUNT_, #1
3537c     A8 00 A0 FD | 	call	#pushregs_
35380     14 F0 07 F1 | 	add	ptra, #20
35384     04 4E 05 F1 | 	add	fp, #4
35388     A7 12 62 FC | 	wrlong	arg01, fp
3538c     04 4E 05 F1 | 	add	fp, #4
35390     A7 14 62 FC | 	wrlong	arg02, fp
35394     04 4E 85 F1 | 	sub	fp, #4
35398     A7 16 0A FB | 	rdlong	arg03, fp wz
3539c     04 4E 85 F1 | 	sub	fp, #4
353a0     09 FA 05 A6 |  if_e	mov	result1, #9
353a4     78 01 90 AD |  if_e	jmp	#LR__5166
353a8     08 4E 05 F1 | 	add	fp, #8
353ac     A7 12 02 F6 | 	mov	arg01, fp
353b0     08 4E 05 F1 | 	add	fp, #8
353b4     A7 14 02 F6 | 	mov	arg02, fp
353b8     10 4E 85 F1 | 	sub	fp, #16
353bc     00 16 06 F6 | 	mov	arg03, #0
353c0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
353c4     0C 4E 05 F1 | 	add	fp, #12
353c8     A7 FA 61 FC | 	wrlong	result1, fp
353cc     0C 4E 85 F1 | 	sub	fp, #12
353d0     00 FA 0D F2 | 	cmp	result1, #0 wz
353d4     20 01 90 5D |  if_ne	jmp	#LR__5165
353d8     04 4E 05 F1 | 	add	fp, #4
353dc     A7 16 02 FB | 	rdlong	arg03, fp
353e0     0C 4E 05 F1 | 	add	fp, #12
353e4     A7 FA 01 FB | 	rdlong	result1, fp
353e8     0B FB 61 FC | 	wrlong	result1, arg03
353ec     0C 4E 85 F1 | 	sub	fp, #12
353f0     A7 12 02 FB | 	rdlong	arg01, fp
353f4     04 4E 05 F1 | 	add	fp, #4
353f8     A7 14 02 FB | 	rdlong	arg02, fp
353fc     08 4E 85 F1 | 	sub	fp, #8
35400     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
35404     0C 4E 05 F1 | 	add	fp, #12
35408     A7 FA 61 FC | 	wrlong	result1, fp
3540c     0C 4E 85 F1 | 	sub	fp, #12
35410     00 FA 0D F2 | 	cmp	result1, #0 wz
35414     C4 00 90 5D |  if_ne	jmp	#LR__5164
35418     04 4E 05 F1 | 	add	fp, #4
3541c     A7 16 02 FB | 	rdlong	arg03, fp
35420     04 4E 85 F1 | 	sub	fp, #4
35424     2B 16 06 F1 | 	add	arg03, #43
35428     0B 17 C2 FA | 	rdbyte	arg03, arg03
3542c     80 16 CE F7 | 	test	arg03, #128 wz
35430     58 00 90 5D |  if_ne	jmp	#LR__5162
35434     04 4E 05 F1 | 	add	fp, #4
35438     A7 16 02 FB | 	rdlong	arg03, fp
3543c     04 4E 85 F1 | 	sub	fp, #4
35440     06 16 06 F1 | 	add	arg03, #6
35444     0B 17 C2 FA | 	rdbyte	arg03, arg03
35448     10 16 CE F7 | 	test	arg03, #16 wz
3544c     30 00 90 AD |  if_e	jmp	#LR__5160
35450     04 4E 05 F1 | 	add	fp, #4
35454     A7 16 02 FB | 	rdlong	arg03, fp
35458     0B 27 02 F6 | 	mov	local01, arg03
3545c     0C 4E 05 F1 | 	add	fp, #12
35460     A7 12 02 FB | 	rdlong	arg01, fp
35464     10 4E 85 F1 | 	sub	fp, #16
35468     1C 16 06 F1 | 	add	arg03, #28
3546c     0B 15 02 FB | 	rdlong	arg02, arg03
35470     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
35474     08 26 06 F1 | 	add	local01, #8
35478     13 FB 61 FC | 	wrlong	result1, local01
3547c     0C 00 90 FD | 	jmp	#LR__5161
35480                 | LR__5160
35480     0C 4E 05 F1 | 	add	fp, #12
35484     A7 0A 68 FC | 	wrlong	#5, fp
35488     0C 4E 85 F1 | 	sub	fp, #12
3548c                 | LR__5161
3548c                 | LR__5162
3548c     0C 4E 05 F1 | 	add	fp, #12
35490     A7 26 0A FB | 	rdlong	local01, fp wz
35494     0C 4E 85 F1 | 	sub	fp, #12
35498     40 00 90 5D |  if_ne	jmp	#LR__5163
3549c     04 4E 05 F1 | 	add	fp, #4
354a0     A7 26 02 FB | 	rdlong	local01, fp
354a4     0C 4E 05 F1 | 	add	fp, #12
354a8     A7 16 02 FB | 	rdlong	arg03, fp
354ac     06 16 06 F1 | 	add	arg03, #6
354b0     0B 17 E2 FA | 	rdword	arg03, arg03
354b4     04 26 06 F1 | 	add	local01, #4
354b8     13 17 52 FC | 	wrword	arg03, local01
354bc     0C 4E 85 F1 | 	sub	fp, #12
354c0     A7 12 02 FB | 	rdlong	arg01, fp
354c4     04 4E 85 F1 | 	sub	fp, #4
354c8     00 14 06 F6 | 	mov	arg02, #0
354cc     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
354d0     0C 4E 05 F1 | 	add	fp, #12
354d4     A7 FA 61 FC | 	wrlong	result1, fp
354d8     0C 4E 85 F1 | 	sub	fp, #12
354dc                 | LR__5163
354dc                 | LR__5164
354dc     0C 4E 05 F1 | 	add	fp, #12
354e0     A7 26 02 FB | 	rdlong	local01, fp
354e4     0C 4E 85 F1 | 	sub	fp, #12
354e8     04 26 0E F2 | 	cmp	local01, #4 wz
354ec     0C 4E 05 A1 |  if_e	add	fp, #12
354f0     A7 0A 68 AC |  if_e	wrlong	#5, fp
354f4     0C 4E 85 A1 |  if_e	sub	fp, #12
354f8                 | LR__5165
354f8     0C 4E 05 F1 | 	add	fp, #12
354fc     A7 26 0A FB | 	rdlong	local01, fp wz
35500     0C 4E 85 F1 | 	sub	fp, #12
35504     04 4E 05 51 |  if_ne	add	fp, #4
35508     A7 26 02 5B |  if_ne	rdlong	local01, fp
3550c     04 4E 85 51 |  if_ne	sub	fp, #4
35510     13 01 68 5C |  if_ne	wrlong	#0, local01
35514                 | ' 
35514                 | ' 	return res ;
35514     0C 4E 05 F1 | 	add	fp, #12
35518     A7 FA 01 FB | 	rdlong	result1, fp
3551c     0C 4E 85 F1 | 	sub	fp, #12
35520                 | LR__5166
35520     A7 F0 03 F6 | 	mov	ptra, fp
35524     B2 00 A0 FD | 	call	#popregs_
35528                 | _fatfs_cc_f_opendir_ret
35528     2D 00 64 FD | 	ret
3552c                 | 
3552c                 | _fatfs_cc_f_closedir
3552c     00 4A 05 F6 | 	mov	COUNT_, #0
35530     A8 00 A0 FD | 	call	#pushregs_
35534     10 F0 07 F1 | 	add	ptra, #16
35538     04 4E 05 F1 | 	add	fp, #4
3553c     A7 12 62 FC | 	wrlong	arg01, fp
35540     08 4E 05 F1 | 	add	fp, #8
35544     A7 14 02 F6 | 	mov	arg02, fp
35548     0C 4E 85 F1 | 	sub	fp, #12
3554c     C0 DD BF FD | 	call	#_fatfs_cc_validate
35550     08 4E 05 F1 | 	add	fp, #8
35554     A7 FA 61 FC | 	wrlong	result1, fp
35558     08 4E 85 F1 | 	sub	fp, #8
3555c     00 FA 0D F2 | 	cmp	result1, #0 wz
35560     04 4E 05 A1 |  if_e	add	fp, #4
35564     A7 FA 01 AB |  if_e	rdlong	result1, fp
35568     04 4E 85 A1 |  if_e	sub	fp, #4
3556c     FD 00 68 AC |  if_e	wrlong	#0, result1
35570                 | ' 
35570                 | ' 
35570                 | ' 
35570                 | ' 
35570                 | ' 		dp->obj.fs = 0;
35570                 | ' #line 4633 "ff.c"
35570                 | ' 	}
35570                 | ' 	return res;
35570     08 4E 05 F1 | 	add	fp, #8
35574     A7 FA 01 FB | 	rdlong	result1, fp
35578     08 4E 85 F1 | 	sub	fp, #8
3557c     A7 F0 03 F6 | 	mov	ptra, fp
35580     B2 00 A0 FD | 	call	#popregs_
35584                 | _fatfs_cc_f_closedir_ret
35584     2D 00 64 FD | 	ret
35588                 | 
35588                 | _fatfs_cc_f_readdir
35588     00 4A 05 F6 | 	mov	COUNT_, #0
3558c     A8 00 A0 FD | 	call	#pushregs_
35590     14 F0 07 F1 | 	add	ptra, #20
35594     04 4E 05 F1 | 	add	fp, #4
35598     A7 12 62 FC | 	wrlong	arg01, fp
3559c     04 4E 05 F1 | 	add	fp, #4
355a0     A7 14 62 FC | 	wrlong	arg02, fp
355a4     04 4E 85 F1 | 	sub	fp, #4
355a8     A7 12 02 FB | 	rdlong	arg01, fp
355ac     0C 4E 05 F1 | 	add	fp, #12
355b0     A7 14 02 F6 | 	mov	arg02, fp
355b4     10 4E 85 F1 | 	sub	fp, #16
355b8     54 DD BF FD | 	call	#_fatfs_cc_validate
355bc     0C 4E 05 F1 | 	add	fp, #12
355c0     A7 FA 61 FC | 	wrlong	result1, fp
355c4     0C 4E 85 F1 | 	sub	fp, #12
355c8     00 FA 0D F2 | 	cmp	result1, #0 wz
355cc     BC 00 90 5D |  if_ne	jmp	#LR__5173
355d0     08 4E 05 F1 | 	add	fp, #8
355d4     A7 FA 09 FB | 	rdlong	result1, fp wz
355d8     08 4E 85 F1 | 	sub	fp, #8
355dc     24 00 90 5D |  if_ne	jmp	#LR__5170
355e0     04 4E 05 F1 | 	add	fp, #4
355e4     A7 12 02 FB | 	rdlong	arg01, fp
355e8     04 4E 85 F1 | 	sub	fp, #4
355ec     00 14 06 F6 | 	mov	arg02, #0
355f0     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
355f4     0C 4E 05 F1 | 	add	fp, #12
355f8     A7 FA 61 FC | 	wrlong	result1, fp
355fc     0C 4E 85 F1 | 	sub	fp, #12
35600     88 00 90 FD | 	jmp	#LR__5172
35604                 | LR__5170
35604     04 4E 05 F1 | 	add	fp, #4
35608     A7 12 02 FB | 	rdlong	arg01, fp
3560c     04 4E 85 F1 | 	sub	fp, #4
35610     00 14 06 F6 | 	mov	arg02, #0
35614     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
35618     0C 4E 05 F1 | 	add	fp, #12
3561c     A7 FA 61 FC | 	wrlong	result1, fp
35620     0C 4E 85 F1 | 	sub	fp, #12
35624     04 FA 0D F2 | 	cmp	result1, #4 wz
35628     0C 4E 05 A1 |  if_e	add	fp, #12
3562c     A7 00 68 AC |  if_e	wrlong	#0, fp
35630     0C 4E 85 A1 |  if_e	sub	fp, #12
35634     0C 4E 05 F1 | 	add	fp, #12
35638     A7 FA 09 FB | 	rdlong	result1, fp wz
3563c     0C 4E 85 F1 | 	sub	fp, #12
35640     48 00 90 5D |  if_ne	jmp	#LR__5171
35644     04 4E 05 F1 | 	add	fp, #4
35648     A7 12 02 FB | 	rdlong	arg01, fp
3564c     04 4E 05 F1 | 	add	fp, #4
35650     A7 14 02 FB | 	rdlong	arg02, fp
35654     08 4E 85 F1 | 	sub	fp, #8
35658     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
3565c     04 4E 05 F1 | 	add	fp, #4
35660     A7 12 02 FB | 	rdlong	arg01, fp
35664     04 4E 85 F1 | 	sub	fp, #4
35668     00 14 06 F6 | 	mov	arg02, #0
3566c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
35670     0C 4E 05 F1 | 	add	fp, #12
35674     A7 FA 61 FC | 	wrlong	result1, fp
35678     0C 4E 85 F1 | 	sub	fp, #12
3567c     04 FA 0D F2 | 	cmp	result1, #4 wz
35680     0C 4E 05 A1 |  if_e	add	fp, #12
35684     A7 00 68 AC |  if_e	wrlong	#0, fp
35688     0C 4E 85 A1 |  if_e	sub	fp, #12
3568c                 | LR__5171
3568c                 | LR__5172
3568c                 | LR__5173
3568c                 | ' 			}
3568c                 | ' 			;
3568c                 | ' 		}
3568c                 | ' 	}
3568c                 | ' 	return res ;
3568c     0C 4E 05 F1 | 	add	fp, #12
35690     A7 FA 01 FB | 	rdlong	result1, fp
35694     0C 4E 85 F1 | 	sub	fp, #12
35698     A7 F0 03 F6 | 	mov	ptra, fp
3569c     B2 00 A0 FD | 	call	#popregs_
356a0                 | _fatfs_cc_f_readdir_ret
356a0     2D 00 64 FD | 	ret
356a4                 | 
356a4                 | _fatfs_cc_f_stat
356a4     00 4A 05 F6 | 	mov	COUNT_, #0
356a8     A8 00 A0 FD | 	call	#pushregs_
356ac     40 F0 07 F1 | 	add	ptra, #64
356b0     04 4E 05 F1 | 	add	fp, #4
356b4     A7 12 62 FC | 	wrlong	arg01, fp
356b8     04 4E 05 F1 | 	add	fp, #4
356bc     A7 14 62 FC | 	wrlong	arg02, fp
356c0     04 4E 85 F1 | 	sub	fp, #4
356c4     A7 12 02 F6 | 	mov	arg01, fp
356c8     0C 4E 05 F1 | 	add	fp, #12
356cc     A7 14 02 F6 | 	mov	arg02, fp
356d0     10 4E 85 F1 | 	sub	fp, #16
356d4     00 16 06 F6 | 	mov	arg03, #0
356d8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
356dc     0C 4E 05 F1 | 	add	fp, #12
356e0     A7 FA 61 FC | 	wrlong	result1, fp
356e4     0C 4E 85 F1 | 	sub	fp, #12
356e8     00 FA 0D F2 | 	cmp	result1, #0 wz
356ec     74 00 90 5D |  if_ne	jmp	#LR__5183
356f0     10 4E 05 F1 | 	add	fp, #16
356f4     A7 12 02 F6 | 	mov	arg01, fp
356f8     0C 4E 85 F1 | 	sub	fp, #12
356fc     A7 14 02 FB | 	rdlong	arg02, fp
35700     04 4E 85 F1 | 	sub	fp, #4
35704     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
35708     0C 4E 05 F1 | 	add	fp, #12
3570c     A7 FA 61 FC | 	wrlong	result1, fp
35710     0C 4E 85 F1 | 	sub	fp, #12
35714     00 FA 0D F2 | 	cmp	result1, #0 wz
35718     48 00 90 5D |  if_ne	jmp	#LR__5182
3571c     3B 4E 05 F1 | 	add	fp, #59
35720     A7 FA C1 FA | 	rdbyte	result1, fp
35724     3B 4E 85 F1 | 	sub	fp, #59
35728     80 FA CD F7 | 	test	result1, #128 wz
3572c     0C 4E 05 51 |  if_ne	add	fp, #12
35730     A7 0C 68 5C |  if_ne	wrlong	#6, fp
35734     0C 4E 85 51 |  if_ne	sub	fp, #12
35738     28 00 90 5D |  if_ne	jmp	#LR__5181
3573c     08 4E 05 F1 | 	add	fp, #8
35740     A7 FA 09 FB | 	rdlong	result1, fp wz
35744     08 4E 85 F1 | 	sub	fp, #8
35748     18 00 90 AD |  if_e	jmp	#LR__5180
3574c     10 4E 05 F1 | 	add	fp, #16
35750     A7 12 02 F6 | 	mov	arg01, fp
35754     08 4E 85 F1 | 	sub	fp, #8
35758     A7 14 02 FB | 	rdlong	arg02, fp
3575c     08 4E 85 F1 | 	sub	fp, #8
35760     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
35764                 | LR__5180
35764                 | LR__5181
35764                 | LR__5182
35764                 | LR__5183
35764                 | ' 			}
35764                 | ' 		}
35764                 | ' 		;
35764                 | ' 	}
35764                 | ' 
35764                 | ' 	return res ;
35764     0C 4E 05 F1 | 	add	fp, #12
35768     A7 FA 01 FB | 	rdlong	result1, fp
3576c     0C 4E 85 F1 | 	sub	fp, #12
35770     A7 F0 03 F6 | 	mov	ptra, fp
35774     B2 00 A0 FD | 	call	#popregs_
35778                 | _fatfs_cc_f_stat_ret
35778     2D 00 64 FD | 	ret
3577c                 | 
3577c                 | _fatfs_cc_f_unlink
3577c     00 4A 05 F6 | 	mov	COUNT_, #0
35780     A8 00 A0 FD | 	call	#pushregs_
35784     74 F0 07 F1 | 	add	ptra, #116
35788     04 4E 05 F1 | 	add	fp, #4
3578c     A7 12 62 FC | 	wrlong	arg01, fp
35790     68 4E 05 F1 | 	add	fp, #104
35794     A7 00 68 FC | 	wrlong	#0, fp
35798     68 4E 85 F1 | 	sub	fp, #104
3579c     A7 12 02 F6 | 	mov	arg01, fp
357a0     6C 4E 05 F1 | 	add	fp, #108
357a4     A7 14 02 F6 | 	mov	arg02, fp
357a8     70 4E 85 F1 | 	sub	fp, #112
357ac     02 16 06 F6 | 	mov	arg03, #2
357b0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
357b4     08 4E 05 F1 | 	add	fp, #8
357b8     A7 FA 61 FC | 	wrlong	result1, fp
357bc     08 4E 85 F1 | 	sub	fp, #8
357c0     00 FA 0D F2 | 	cmp	result1, #0 wz
357c4     E4 01 90 5D |  if_ne	jmp	#LR__5198
357c8     70 4E 05 F1 | 	add	fp, #112
357cc     A7 16 02 FB | 	rdlong	arg03, fp
357d0     64 4E 85 F1 | 	sub	fp, #100
357d4     A7 16 62 FC | 	wrlong	arg03, fp
357d8     A7 12 02 F6 | 	mov	arg01, fp
357dc     08 4E 85 F1 | 	sub	fp, #8
357e0     A7 14 02 FB | 	rdlong	arg02, fp
357e4     04 4E 85 F1 | 	sub	fp, #4
357e8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
357ec     08 4E 05 F1 | 	add	fp, #8
357f0     A7 FA 61 FC | 	wrlong	result1, fp
357f4     00 FA 4D F2 | 	cmps	result1, #0 wz
357f8     08 4E 85 F1 | 	sub	fp, #8
357fc     AC 01 90 5D |  if_ne	jmp	#LR__5197
35800     37 4E 05 F1 | 	add	fp, #55
35804     A7 FA C1 FA | 	rdbyte	result1, fp
35808     37 4E 85 F1 | 	sub	fp, #55
3580c     80 FA CD F7 | 	test	result1, #128 wz
35810     08 4E 05 51 |  if_ne	add	fp, #8
35814     A7 0C 68 5C |  if_ne	wrlong	#6, fp
35818     08 4E 85 51 |  if_ne	sub	fp, #8
3581c     1C 00 90 5D |  if_ne	jmp	#LR__5190
35820     12 4E 05 F1 | 	add	fp, #18
35824     A7 FA C1 FA | 	rdbyte	result1, fp
35828     12 4E 85 F1 | 	sub	fp, #18
3582c     01 FA CD F7 | 	test	result1, #1 wz
35830     08 4E 05 51 |  if_ne	add	fp, #8
35834     A7 0E 68 5C |  if_ne	wrlong	#7, fp
35838     08 4E 85 51 |  if_ne	sub	fp, #8
3583c                 | LR__5190
3583c     08 4E 05 F1 | 	add	fp, #8
35840     A7 FA 09 FB | 	rdlong	result1, fp wz
35844     08 4E 85 F1 | 	sub	fp, #8
35848     C8 00 90 5D |  if_ne	jmp	#LR__5193
3584c     70 4E 05 F1 | 	add	fp, #112
35850     A7 12 02 FB | 	rdlong	arg01, fp
35854     48 4E 85 F1 | 	sub	fp, #72
35858     A7 14 02 FB | 	rdlong	arg02, fp
3585c     28 4E 85 F1 | 	sub	fp, #40
35860     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
35864     6C 4E 05 F1 | 	add	fp, #108
35868     A7 FA 61 FC | 	wrlong	result1, fp
3586c     5A 4E 85 F1 | 	sub	fp, #90
35870     A7 FA C1 FA | 	rdbyte	result1, fp
35874     12 4E 85 F1 | 	sub	fp, #18
35878     10 FA CD F7 | 	test	result1, #16 wz
3587c     94 00 90 AD |  if_e	jmp	#LR__5192
35880     70 4E 05 F1 | 	add	fp, #112
35884     A7 FA 01 FB | 	rdlong	result1, fp
35888     34 4E 85 F1 | 	sub	fp, #52
3588c     A7 FA 61 FC | 	wrlong	result1, fp
35890     30 4E 05 F1 | 	add	fp, #48
35894     A7 16 02 FB | 	rdlong	arg03, fp
35898     28 4E 85 F1 | 	sub	fp, #40
3589c     A7 16 62 FC | 	wrlong	arg03, fp
358a0     08 4E 85 F1 | 	sub	fp, #8
358a4     A7 12 02 F6 | 	mov	arg01, fp
358a8     3C 4E 85 F1 | 	sub	fp, #60
358ac     00 14 06 F6 | 	mov	arg02, #0
358b0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
358b4     08 4E 05 F1 | 	add	fp, #8
358b8     A7 FA 61 FC | 	wrlong	result1, fp
358bc     08 4E 85 F1 | 	sub	fp, #8
358c0     00 FA 0D F2 | 	cmp	result1, #0 wz
358c4     4C 00 90 5D |  if_ne	jmp	#LR__5191
358c8     3C 4E 05 F1 | 	add	fp, #60
358cc     A7 12 02 F6 | 	mov	arg01, fp
358d0     3C 4E 85 F1 | 	sub	fp, #60
358d4     00 14 06 F6 | 	mov	arg02, #0
358d8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
358dc     08 4E 05 F1 | 	add	fp, #8
358e0     A7 FA 61 FC | 	wrlong	result1, fp
358e4     00 FA 4D F2 | 	cmps	result1, #0 wz
358e8     08 4E 85 F1 | 	sub	fp, #8
358ec     08 4E 05 A1 |  if_e	add	fp, #8
358f0     A7 0E 68 AC |  if_e	wrlong	#7, fp
358f4     08 4E 85 A1 |  if_e	sub	fp, #8
358f8     08 4E 05 F1 | 	add	fp, #8
358fc     A7 FA 01 FB | 	rdlong	result1, fp
35900     08 4E 85 F1 | 	sub	fp, #8
35904     04 FA 0D F2 | 	cmp	result1, #4 wz
35908     08 4E 05 A1 |  if_e	add	fp, #8
3590c     A7 00 68 AC |  if_e	wrlong	#0, fp
35910     08 4E 85 A1 |  if_e	sub	fp, #8
35914                 | LR__5191
35914                 | LR__5192
35914                 | LR__5193
35914     08 4E 05 F1 | 	add	fp, #8
35918     A7 FA 09 FB | 	rdlong	result1, fp wz
3591c     08 4E 85 F1 | 	sub	fp, #8
35920     88 00 90 5D |  if_ne	jmp	#LR__5196
35924     0C 4E 05 F1 | 	add	fp, #12
35928     A7 12 02 F6 | 	mov	arg01, fp
3592c     0C 4E 85 F1 | 	sub	fp, #12
35930     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
35934     08 4E 05 F1 | 	add	fp, #8
35938     A7 FA 61 FC | 	wrlong	result1, fp
3593c     08 4E 85 F1 | 	sub	fp, #8
35940     00 FA 0D F2 | 	cmp	result1, #0 wz
35944     38 00 90 5D |  if_ne	jmp	#LR__5194
35948     6C 4E 05 F1 | 	add	fp, #108
3594c     A7 FA 09 FB | 	rdlong	result1, fp wz
35950     6C 4E 85 F1 | 	sub	fp, #108
35954     28 00 90 AD |  if_e	jmp	#LR__5194
35958     0C 4E 05 F1 | 	add	fp, #12
3595c     A7 12 02 F6 | 	mov	arg01, fp
35960     60 4E 05 F1 | 	add	fp, #96
35964     A7 14 02 FB | 	rdlong	arg02, fp
35968     6C 4E 85 F1 | 	sub	fp, #108
3596c     00 16 06 F6 | 	mov	arg03, #0
35970     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
35974     08 4E 05 F1 | 	add	fp, #8
35978     A7 FA 61 FC | 	wrlong	result1, fp
3597c     08 4E 85 F1 | 	sub	fp, #8
35980                 | LR__5194
35980     08 4E 05 F1 | 	add	fp, #8
35984     A7 FA 09 FB | 	rdlong	result1, fp wz
35988     08 4E 85 F1 | 	sub	fp, #8
3598c     1C 00 90 5D |  if_ne	jmp	#LR__5195
35990     70 4E 05 F1 | 	add	fp, #112
35994     A7 12 02 FB | 	rdlong	arg01, fp
35998     70 4E 85 F1 | 	sub	fp, #112
3599c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
359a0     08 4E 05 F1 | 	add	fp, #8
359a4     A7 FA 61 FC | 	wrlong	result1, fp
359a8     08 4E 85 F1 | 	sub	fp, #8
359ac                 | LR__5195
359ac                 | LR__5196
359ac                 | LR__5197
359ac                 | LR__5198
359ac                 | ' 			}
359ac                 | ' 		}
359ac                 | ' 		;
359ac                 | ' 	}
359ac                 | ' 
359ac                 | ' 	return res ;
359ac     08 4E 05 F1 | 	add	fp, #8
359b0     A7 FA 01 FB | 	rdlong	result1, fp
359b4     08 4E 85 F1 | 	sub	fp, #8
359b8     A7 F0 03 F6 | 	mov	ptra, fp
359bc     B2 00 A0 FD | 	call	#popregs_
359c0                 | _fatfs_cc_f_unlink_ret
359c0     2D 00 64 FD | 	ret
359c4                 | 
359c4                 | _fatfs_cc_f_mkdir
359c4     00 4A 05 F6 | 	mov	COUNT_, #0
359c8     A8 00 A0 FD | 	call	#pushregs_
359cc     5C F0 07 F1 | 	add	ptra, #92
359d0     04 4E 05 F1 | 	add	fp, #4
359d4     A7 12 62 FC | 	wrlong	arg01, fp
359d8     A7 12 02 F6 | 	mov	arg01, fp
359dc     48 4E 05 F1 | 	add	fp, #72
359e0     A7 14 02 F6 | 	mov	arg02, fp
359e4     4C 4E 85 F1 | 	sub	fp, #76
359e8     02 16 06 F6 | 	mov	arg03, #2
359ec     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
359f0     08 4E 05 F1 | 	add	fp, #8
359f4     A7 FA 61 FC | 	wrlong	result1, fp
359f8     08 4E 85 F1 | 	sub	fp, #8
359fc     00 FA 0D F2 | 	cmp	result1, #0 wz
35a00     C4 02 90 5D |  if_ne	jmp	#LR__5205
35a04     4C 4E 05 F1 | 	add	fp, #76
35a08     A7 16 02 FB | 	rdlong	arg03, fp
35a0c     40 4E 85 F1 | 	sub	fp, #64
35a10     A7 16 62 FC | 	wrlong	arg03, fp
35a14     A7 12 02 F6 | 	mov	arg01, fp
35a18     08 4E 85 F1 | 	sub	fp, #8
35a1c     A7 14 02 FB | 	rdlong	arg02, fp
35a20     04 4E 85 F1 | 	sub	fp, #4
35a24     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
35a28     08 4E 05 F1 | 	add	fp, #8
35a2c     A7 FA 61 FC | 	wrlong	result1, fp
35a30     00 FA 4D F2 | 	cmps	result1, #0 wz
35a34     08 4E 85 F1 | 	sub	fp, #8
35a38     08 4E 05 A1 |  if_e	add	fp, #8
35a3c     A7 10 68 AC |  if_e	wrlong	#8, fp
35a40     08 4E 85 A1 |  if_e	sub	fp, #8
35a44     08 4E 05 F1 | 	add	fp, #8
35a48     A7 FA 01 FB | 	rdlong	result1, fp
35a4c     08 4E 85 F1 | 	sub	fp, #8
35a50     04 FA 0D F2 | 	cmp	result1, #4 wz
35a54     70 02 90 5D |  if_ne	jmp	#LR__5204
35a58     4C 4E 05 F1 | 	add	fp, #76
35a5c     A7 16 02 FB | 	rdlong	arg03, fp
35a60     10 4E 85 F1 | 	sub	fp, #16
35a64     A7 16 62 FC | 	wrlong	arg03, fp
35a68     A7 12 02 F6 | 	mov	arg01, fp
35a6c     3C 4E 85 F1 | 	sub	fp, #60
35a70     00 14 06 F6 | 	mov	arg02, #0
35a74     04 AC BF FD | 	call	#_fatfs_cc_create_chain
35a78     50 4E 05 F1 | 	add	fp, #80
35a7c     A7 FA 61 FC | 	wrlong	result1, fp
35a80     48 4E 85 F1 | 	sub	fp, #72
35a84     A7 00 68 FC | 	wrlong	#0, fp
35a88     48 4E 05 F1 | 	add	fp, #72
35a8c     A7 FA 09 FB | 	rdlong	result1, fp wz
35a90     50 4E 85 F1 | 	sub	fp, #80
35a94     08 4E 05 A1 |  if_e	add	fp, #8
35a98     A7 0E 68 AC |  if_e	wrlong	#7, fp
35a9c     08 4E 85 A1 |  if_e	sub	fp, #8
35aa0     50 4E 05 F1 | 	add	fp, #80
35aa4     A7 FA 01 FB | 	rdlong	result1, fp
35aa8     50 4E 85 F1 | 	sub	fp, #80
35aac     01 FA 0D F2 | 	cmp	result1, #1 wz
35ab0     08 4E 05 A1 |  if_e	add	fp, #8
35ab4     A7 04 68 AC |  if_e	wrlong	#2, fp
35ab8     08 4E 85 A1 |  if_e	sub	fp, #8
35abc     50 4E 05 F1 | 	add	fp, #80
35ac0     A7 16 02 FB | 	rdlong	arg03, fp
35ac4     50 4E 85 F1 | 	sub	fp, #80
35ac8     FF FF 7F FF 
35acc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
35ad0     08 4E 05 A1 |  if_e	add	fp, #8
35ad4     A7 02 68 AC |  if_e	wrlong	#1, fp
35ad8     08 4E 85 A1 |  if_e	sub	fp, #8
35adc     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
35ae0     58 4E 05 F1 | 	add	fp, #88
35ae4     A7 FA 61 FC | 	wrlong	result1, fp
35ae8     50 4E 85 F1 | 	sub	fp, #80
35aec     A7 FA 09 FB | 	rdlong	result1, fp wz
35af0     08 4E 85 F1 | 	sub	fp, #8
35af4     1C 01 90 5D |  if_ne	jmp	#LR__5201
35af8     4C 4E 05 F1 | 	add	fp, #76
35afc     A7 12 02 FB | 	rdlong	arg01, fp
35b00     04 4E 05 F1 | 	add	fp, #4
35b04     A7 14 02 FB | 	rdlong	arg02, fp
35b08     50 4E 85 F1 | 	sub	fp, #80
35b0c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
35b10     08 4E 05 F1 | 	add	fp, #8
35b14     A7 FA 61 FC | 	wrlong	result1, fp
35b18     00 FA 4D F2 | 	cmps	result1, #0 wz
35b1c     08 4E 85 F1 | 	sub	fp, #8
35b20     F0 00 90 5D |  if_ne	jmp	#LR__5200
35b24     4C 4E 05 F1 | 	add	fp, #76
35b28     A7 12 02 FB | 	rdlong	arg01, fp
35b2c     4C 4E 85 F1 | 	sub	fp, #76
35b30     34 12 06 F1 | 	add	arg01, #52
35b34     20 14 06 F6 | 	mov	arg02, #32
35b38     0B 16 06 F6 | 	mov	arg03, #11
35b3c     98 00 A0 FD | 	call	#\builtin_bytefill_
35b40     4C 4E 05 F1 | 	add	fp, #76
35b44     A7 FA 01 FB | 	rdlong	result1, fp
35b48     34 FA 05 F1 | 	add	result1, #52
35b4c     FD 5C 48 FC | 	wrbyte	#46, result1
35b50     A7 16 02 FB | 	rdlong	arg03, fp
35b54     3F 16 06 F1 | 	add	arg03, #63
35b58     0B 21 48 FC | 	wrbyte	#16, arg03
35b5c     A7 12 02 FB | 	rdlong	arg01, fp
35b60     4A 12 06 F1 | 	add	arg01, #74
35b64     0C 4E 05 F1 | 	add	fp, #12
35b68     A7 14 02 FB | 	rdlong	arg02, fp
35b6c     09 15 62 FC | 	wrlong	arg02, arg01
35b70     0C 4E 85 F1 | 	sub	fp, #12
35b74     A7 14 02 FB | 	rdlong	arg02, fp
35b78     0A 13 02 F6 | 	mov	arg01, arg02
35b7c     34 14 06 F1 | 	add	arg02, #52
35b80     04 4E 05 F1 | 	add	fp, #4
35b84     A7 16 02 FB | 	rdlong	arg03, fp
35b88     50 4E 85 F1 | 	sub	fp, #80
35b8c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
35b90     4C 4E 05 F1 | 	add	fp, #76
35b94     A7 14 02 FB | 	rdlong	arg02, fp
35b98     0A 13 02 F6 | 	mov	arg01, arg02
35b9c     54 12 06 F1 | 	add	arg01, #84
35ba0     4C 4E 85 F1 | 	sub	fp, #76
35ba4     34 14 06 F1 | 	add	arg02, #52
35ba8     20 16 06 F6 | 	mov	arg03, #32
35bac     F4 26 BF FD | 	call	#__system____builtin_memmove
35bb0     4C 4E 05 F1 | 	add	fp, #76
35bb4     A7 16 02 FB | 	rdlong	arg03, fp
35bb8     55 16 06 F1 | 	add	arg03, #85
35bbc     0B 5D 48 FC | 	wrbyte	#46, arg03
35bc0     38 4E 85 F1 | 	sub	fp, #56
35bc4     A7 16 02 FB | 	rdlong	arg03, fp
35bc8     40 4E 05 F1 | 	add	fp, #64
35bcc     A7 16 62 FC | 	wrlong	arg03, fp
35bd0     08 4E 85 F1 | 	sub	fp, #8
35bd4     A7 14 02 FB | 	rdlong	arg02, fp
35bd8     0A 13 02 F6 | 	mov	arg01, arg02
35bdc     54 14 06 F1 | 	add	arg02, #84
35be0     4C 4E 85 F1 | 	sub	fp, #76
35be4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
35be8     4C 4E 05 F1 | 	add	fp, #76
35bec     A7 16 02 FB | 	rdlong	arg03, fp
35bf0     03 16 06 F1 | 	add	arg03, #3
35bf4     0B 03 48 FC | 	wrbyte	#1, arg03
35bf8     40 4E 85 F1 | 	sub	fp, #64
35bfc     A7 12 02 F6 | 	mov	arg01, fp
35c00     0C 4E 85 F1 | 	sub	fp, #12
35c04     44 BA BF FD | 	call	#_fatfs_cc_dir_register
35c08     08 4E 05 F1 | 	add	fp, #8
35c0c     A7 FA 61 FC | 	wrlong	result1, fp
35c10     08 4E 85 F1 | 	sub	fp, #8
35c14                 | LR__5200
35c14                 | LR__5201
35c14     08 4E 05 F1 | 	add	fp, #8
35c18     A7 FA 09 FB | 	rdlong	result1, fp wz
35c1c     08 4E 85 F1 | 	sub	fp, #8
35c20     88 00 90 5D |  if_ne	jmp	#LR__5202
35c24     28 4E 05 F1 | 	add	fp, #40
35c28     A7 12 02 FB | 	rdlong	arg01, fp
35c2c     16 12 06 F1 | 	add	arg01, #22
35c30     30 4E 05 F1 | 	add	fp, #48
35c34     A7 14 02 FB | 	rdlong	arg02, fp
35c38     09 15 62 FC | 	wrlong	arg02, arg01
35c3c     0C 4E 85 F1 | 	sub	fp, #12
35c40     A7 12 02 FB | 	rdlong	arg01, fp
35c44     24 4E 85 F1 | 	sub	fp, #36
35c48     A7 14 02 FB | 	rdlong	arg02, fp
35c4c     28 4E 05 F1 | 	add	fp, #40
35c50     A7 16 02 FB | 	rdlong	arg03, fp
35c54     50 4E 85 F1 | 	sub	fp, #80
35c58     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
35c5c     28 4E 05 F1 | 	add	fp, #40
35c60     A7 FA 01 FB | 	rdlong	result1, fp
35c64     0B FA 05 F1 | 	add	result1, #11
35c68     FD 20 48 FC | 	wrbyte	#16, result1
35c6c     24 4E 05 F1 | 	add	fp, #36
35c70     A7 FA 01 FB | 	rdlong	result1, fp
35c74     03 FA 05 F1 | 	add	result1, #3
35c78     FD 02 48 FC | 	wrbyte	#1, result1
35c7c     44 4E 85 F1 | 	sub	fp, #68
35c80     A7 FA 09 FB | 	rdlong	result1, fp wz
35c84     08 4E 85 F1 | 	sub	fp, #8
35c88     3C 00 90 5D |  if_ne	jmp	#LR__5203
35c8c     4C 4E 05 F1 | 	add	fp, #76
35c90     A7 12 02 FB | 	rdlong	arg01, fp
35c94     4C 4E 85 F1 | 	sub	fp, #76
35c98     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
35c9c     08 4E 05 F1 | 	add	fp, #8
35ca0     A7 FA 61 FC | 	wrlong	result1, fp
35ca4     08 4E 85 F1 | 	sub	fp, #8
35ca8     1C 00 90 FD | 	jmp	#LR__5203
35cac                 | LR__5202
35cac     3C 4E 05 F1 | 	add	fp, #60
35cb0     A7 12 02 F6 | 	mov	arg01, fp
35cb4     14 4E 05 F1 | 	add	fp, #20
35cb8     A7 14 02 FB | 	rdlong	arg02, fp
35cbc     50 4E 85 F1 | 	sub	fp, #80
35cc0     00 16 06 F6 | 	mov	arg03, #0
35cc4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
35cc8                 | LR__5203
35cc8                 | LR__5204
35cc8                 | LR__5205
35cc8                 | ' 				remove_chain(&sobj, dcl, 0);
35cc8                 | ' 			}
35cc8                 | ' 		}
35cc8                 | ' 		;
35cc8                 | ' 	}
35cc8                 | ' 
35cc8                 | ' 	return res ;
35cc8     08 4E 05 F1 | 	add	fp, #8
35ccc     A7 FA 01 FB | 	rdlong	result1, fp
35cd0     08 4E 85 F1 | 	sub	fp, #8
35cd4     A7 F0 03 F6 | 	mov	ptra, fp
35cd8     B2 00 A0 FD | 	call	#popregs_
35cdc                 | _fatfs_cc_f_mkdir_ret
35cdc     2D 00 64 FD | 	ret
35ce0                 | 
35ce0                 | _fatfs_cc_f_rename
35ce0     01 4A 05 F6 | 	mov	COUNT_, #1
35ce4     A8 00 A0 FD | 	call	#pushregs_
35ce8     9C F0 07 F1 | 	add	ptra, #156
35cec     04 4E 05 F1 | 	add	fp, #4
35cf0     A7 12 62 FC | 	wrlong	arg01, fp
35cf4     04 4E 05 F1 | 	add	fp, #4
35cf8     A7 14 62 FC | 	wrlong	arg02, fp
35cfc     A7 12 02 F6 | 	mov	arg01, fp
35d00     08 4E 85 F1 | 	sub	fp, #8
35d04     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
35d08     04 4E 05 F1 | 	add	fp, #4
35d0c     A7 12 02 F6 | 	mov	arg01, fp
35d10     6C 4E 05 F1 | 	add	fp, #108
35d14     A7 14 02 F6 | 	mov	arg02, fp
35d18     70 4E 85 F1 | 	sub	fp, #112
35d1c     02 16 06 F6 | 	mov	arg03, #2
35d20     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
35d24     0C 4E 05 F1 | 	add	fp, #12
35d28     A7 FA 61 FC | 	wrlong	result1, fp
35d2c     0C 4E 85 F1 | 	sub	fp, #12
35d30     00 FA 0D F2 | 	cmp	result1, #0 wz
35d34     44 03 90 5D |  if_ne	jmp	#LR__5223
35d38     70 4E 05 F1 | 	add	fp, #112
35d3c     A7 16 02 FB | 	rdlong	arg03, fp
35d40     60 4E 85 F1 | 	sub	fp, #96
35d44     A7 16 62 FC | 	wrlong	arg03, fp
35d48     A7 12 02 F6 | 	mov	arg01, fp
35d4c     0C 4E 85 F1 | 	sub	fp, #12
35d50     A7 14 02 FB | 	rdlong	arg02, fp
35d54     04 4E 85 F1 | 	sub	fp, #4
35d58     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
35d5c     0C 4E 05 F1 | 	add	fp, #12
35d60     A7 FA 61 FC | 	wrlong	result1, fp
35d64     00 FA 4D F2 | 	cmps	result1, #0 wz
35d68     0C 4E 85 F1 | 	sub	fp, #12
35d6c     1C 00 90 5D |  if_ne	jmp	#LR__5210
35d70     3B 4E 05 F1 | 	add	fp, #59
35d74     A7 FA C1 FA | 	rdbyte	result1, fp
35d78     3B 4E 85 F1 | 	sub	fp, #59
35d7c     A0 FA CD F7 | 	test	result1, #160 wz
35d80     0C 4E 05 51 |  if_ne	add	fp, #12
35d84     A7 0C 68 5C |  if_ne	wrlong	#6, fp
35d88     0C 4E 85 51 |  if_ne	sub	fp, #12
35d8c                 | LR__5210
35d8c     0C 4E 05 F1 | 	add	fp, #12
35d90     A7 26 0A FB | 	rdlong	local01, fp wz
35d94     0C 4E 85 F1 | 	sub	fp, #12
35d98     E0 02 90 5D |  if_ne	jmp	#LR__5222
35d9c     74 4E 05 F1 | 	add	fp, #116
35da0     A7 12 02 F6 | 	mov	arg01, fp
35da4     48 4E 85 F1 | 	sub	fp, #72
35da8     A7 14 02 FB | 	rdlong	arg02, fp
35dac     2C 4E 85 F1 | 	sub	fp, #44
35db0     20 16 06 F6 | 	mov	arg03, #32
35db4     EC 24 BF FD | 	call	#__system____builtin_memmove
35db8     40 4E 05 F1 | 	add	fp, #64
35dbc     A7 12 02 F6 | 	mov	arg01, fp
35dc0     30 4E 85 F1 | 	sub	fp, #48
35dc4     A7 14 02 F6 | 	mov	arg02, fp
35dc8     10 4E 85 F1 | 	sub	fp, #16
35dcc     30 16 06 F6 | 	mov	arg03, #48
35dd0     D0 24 BF FD | 	call	#__system____builtin_memmove
35dd4     40 4E 05 F1 | 	add	fp, #64
35dd8     A7 12 02 F6 | 	mov	arg01, fp
35ddc     38 4E 85 F1 | 	sub	fp, #56
35de0     A7 14 02 FB | 	rdlong	arg02, fp
35de4     08 4E 85 F1 | 	sub	fp, #8
35de8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
35dec     0C 4E 05 F1 | 	add	fp, #12
35df0     A7 FA 61 FC | 	wrlong	result1, fp
35df4     0C 4E 85 F1 | 	sub	fp, #12
35df8     00 FA 0D F2 | 	cmp	result1, #0 wz
35dfc     4C 00 90 5D |  if_ne	jmp	#LR__5213
35e00     48 4E 05 F1 | 	add	fp, #72
35e04     A7 FA 01 FB | 	rdlong	result1, fp
35e08     30 4E 85 F1 | 	sub	fp, #48
35e0c     A7 16 02 FB | 	rdlong	arg03, fp
35e10     18 4E 85 F1 | 	sub	fp, #24
35e14     0B FB 09 F2 | 	cmp	result1, arg03 wz
35e18     20 00 90 5D |  if_ne	jmp	#LR__5211
35e1c     50 4E 05 F1 | 	add	fp, #80
35e20     A7 FA 01 FB | 	rdlong	result1, fp
35e24     30 4E 85 F1 | 	sub	fp, #48
35e28     A7 16 02 FB | 	rdlong	arg03, fp
35e2c     20 4E 85 F1 | 	sub	fp, #32
35e30     0B FB 09 F2 | 	cmp	result1, arg03 wz
35e34     04 26 06 A6 |  if_e	mov	local01, #4
35e38     04 00 90 AD |  if_e	jmp	#LR__5212
35e3c                 | LR__5211
35e3c     08 26 06 F6 | 	mov	local01, #8
35e40                 | LR__5212
35e40     0C 4E 05 F1 | 	add	fp, #12
35e44     A7 26 62 FC | 	wrlong	local01, fp
35e48     0C 4E 85 F1 | 	sub	fp, #12
35e4c                 | LR__5213
35e4c     0C 4E 05 F1 | 	add	fp, #12
35e50     A7 26 02 FB | 	rdlong	local01, fp
35e54     0C 4E 85 F1 | 	sub	fp, #12
35e58     04 26 0E F2 | 	cmp	local01, #4 wz
35e5c     CC 01 90 5D |  if_ne	jmp	#LR__5219
35e60     40 4E 05 F1 | 	add	fp, #64
35e64     A7 12 02 F6 | 	mov	arg01, fp
35e68     40 4E 85 F1 | 	sub	fp, #64
35e6c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
35e70     0C 4E 05 F1 | 	add	fp, #12
35e74     A7 FA 61 FC | 	wrlong	result1, fp
35e78     0C 4E 85 F1 | 	sub	fp, #12
35e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
35e80     A8 01 90 5D |  if_ne	jmp	#LR__5218
35e84     5C 4E 05 F1 | 	add	fp, #92
35e88     A7 12 02 FB | 	rdlong	arg01, fp
35e8c     38 4E 05 F1 | 	add	fp, #56
35e90     A7 12 62 FC | 	wrlong	arg01, fp
35e94     0D 12 06 F1 | 	add	arg01, #13
35e98     20 4E 85 F1 | 	sub	fp, #32
35e9c     A7 14 02 F6 | 	mov	arg02, fp
35ea0     74 4E 85 F1 | 	sub	fp, #116
35ea4     0D 14 06 F1 | 	add	arg02, #13
35ea8     13 16 06 F6 | 	mov	arg03, #19
35eac     F4 23 BF FD | 	call	#__system____builtin_memmove
35eb0     94 4E 05 F1 | 	add	fp, #148
35eb4     A7 26 02 FB | 	rdlong	local01, fp
35eb8     15 4E 85 F1 | 	sub	fp, #21
35ebc     A7 FA C1 FA | 	rdbyte	result1, fp
35ec0     0B 26 06 F1 | 	add	local01, #11
35ec4     13 FB 41 FC | 	wrbyte	result1, local01
35ec8     15 4E 05 F1 | 	add	fp, #21
35ecc     A7 26 02 FB | 	rdlong	local01, fp
35ed0     94 4E 85 F1 | 	sub	fp, #148
35ed4     0B 26 06 F1 | 	add	local01, #11
35ed8     13 27 C2 FA | 	rdbyte	local01, local01
35edc     10 26 CE F7 | 	test	local01, #16 wz
35ee0     24 00 90 5D |  if_ne	jmp	#LR__5214
35ee4     94 4E 05 F1 | 	add	fp, #148
35ee8     A7 FA 01 FB | 	rdlong	result1, fp
35eec     FD 26 02 F6 | 	mov	local01, result1
35ef0     94 4E 85 F1 | 	sub	fp, #148
35ef4     0B FA 05 F1 | 	add	result1, #11
35ef8     FD FA C1 FA | 	rdbyte	result1, result1
35efc     20 FA 45 F5 | 	or	result1, #32
35f00     0B 26 06 F1 | 	add	local01, #11
35f04     13 FB 41 FC | 	wrbyte	result1, local01
35f08                 | LR__5214
35f08     70 4E 05 F1 | 	add	fp, #112
35f0c     A7 26 02 FB | 	rdlong	local01, fp
35f10     03 26 06 F1 | 	add	local01, #3
35f14     13 03 48 FC | 	wrbyte	#1, local01
35f18     24 4E 05 F1 | 	add	fp, #36
35f1c     A7 26 02 FB | 	rdlong	local01, fp
35f20     94 4E 85 F1 | 	sub	fp, #148
35f24     0B 26 06 F1 | 	add	local01, #11
35f28     13 27 C2 FA | 	rdbyte	local01, local01
35f2c     10 26 CE F7 | 	test	local01, #16 wz
35f30     F8 00 90 AD |  if_e	jmp	#LR__5217
35f34     18 4E 05 F1 | 	add	fp, #24
35f38     A7 16 02 FB | 	rdlong	arg03, fp
35f3c     30 4E 05 F1 | 	add	fp, #48
35f40     A7 26 02 FB | 	rdlong	local01, fp
35f44     48 4E 85 F1 | 	sub	fp, #72
35f48     13 17 0A F2 | 	cmp	arg03, local01 wz
35f4c     DC 00 90 AD |  if_e	jmp	#LR__5217
35f50     70 4E 05 F1 | 	add	fp, #112
35f54     A7 12 02 FB | 	rdlong	arg01, fp
35f58     09 27 02 F6 | 	mov	local01, arg01
35f5c     24 4E 05 F1 | 	add	fp, #36
35f60     A7 14 02 FB | 	rdlong	arg02, fp
35f64     94 4E 85 F1 | 	sub	fp, #148
35f68     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
35f6c     FD 14 02 F6 | 	mov	arg02, result1
35f70     13 13 02 F6 | 	mov	arg01, local01
35f74     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
35f78     98 4E 05 F1 | 	add	fp, #152
35f7c     A7 FA 61 FC | 	wrlong	result1, fp
35f80     00 FA 4D F2 | 	cmps	result1, #0 wz
35f84     98 4E 85 F1 | 	sub	fp, #152
35f88     0C 4E 05 A1 |  if_e	add	fp, #12
35f8c     A7 04 68 AC |  if_e	wrlong	#2, fp
35f90     0C 4E 85 A1 |  if_e	sub	fp, #12
35f94     94 00 90 AD |  if_e	jmp	#LR__5216
35f98     70 4E 05 F1 | 	add	fp, #112
35f9c     A7 12 02 FB | 	rdlong	arg01, fp
35fa0     28 4E 05 F1 | 	add	fp, #40
35fa4     A7 14 02 FB | 	rdlong	arg02, fp
35fa8     98 4E 85 F1 | 	sub	fp, #152
35fac     4C A0 BF FD | 	call	#_fatfs_cc_move_window
35fb0     0C 4E 05 F1 | 	add	fp, #12
35fb4     A7 FA 61 FC | 	wrlong	result1, fp
35fb8     64 4E 05 F1 | 	add	fp, #100
35fbc     A7 26 02 FB | 	rdlong	local01, fp
35fc0     54 26 06 F1 | 	add	local01, #84
35fc4     24 4E 05 F1 | 	add	fp, #36
35fc8     A7 26 62 FC | 	wrlong	local01, fp
35fcc     88 4E 85 F1 | 	sub	fp, #136
35fd0     A7 26 0A FB | 	rdlong	local01, fp wz
35fd4     0C 4E 85 F1 | 	sub	fp, #12
35fd8     50 00 90 5D |  if_ne	jmp	#LR__5215
35fdc     94 4E 05 F1 | 	add	fp, #148
35fe0     A7 26 02 FB | 	rdlong	local01, fp
35fe4     94 4E 85 F1 | 	sub	fp, #148
35fe8     01 26 06 F1 | 	add	local01, #1
35fec     13 27 C2 FA | 	rdbyte	local01, local01
35ff0     2E 26 0E F2 | 	cmp	local01, #46 wz
35ff4     34 00 90 5D |  if_ne	jmp	#LR__5215
35ff8     70 4E 05 F1 | 	add	fp, #112
35ffc     A7 12 02 FB | 	rdlong	arg01, fp
36000     24 4E 05 F1 | 	add	fp, #36
36004     A7 14 02 FB | 	rdlong	arg02, fp
36008     4C 4E 85 F1 | 	sub	fp, #76
3600c     A7 16 02 FB | 	rdlong	arg03, fp
36010     48 4E 85 F1 | 	sub	fp, #72
36014     50 AD BF FD | 	call	#_fatfs_cc_st_clust
36018     70 4E 05 F1 | 	add	fp, #112
3601c     A7 26 02 FB | 	rdlong	local01, fp
36020     70 4E 85 F1 | 	sub	fp, #112
36024     03 26 06 F1 | 	add	local01, #3
36028     13 03 48 FC | 	wrbyte	#1, local01
3602c                 | LR__5215
3602c                 | LR__5216
3602c                 | LR__5217
3602c                 | LR__5218
3602c                 | LR__5219
3602c     0C 4E 05 F1 | 	add	fp, #12
36030     A7 26 0A FB | 	rdlong	local01, fp wz
36034     0C 4E 85 F1 | 	sub	fp, #12
36038     40 00 90 5D |  if_ne	jmp	#LR__5221
3603c     10 4E 05 F1 | 	add	fp, #16
36040     A7 12 02 F6 | 	mov	arg01, fp
36044     10 4E 85 F1 | 	sub	fp, #16
36048     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
3604c     0C 4E 05 F1 | 	add	fp, #12
36050     A7 FA 61 FC | 	wrlong	result1, fp
36054     0C 4E 85 F1 | 	sub	fp, #12
36058     00 FA 0D F2 | 	cmp	result1, #0 wz
3605c     1C 00 90 5D |  if_ne	jmp	#LR__5220
36060     70 4E 05 F1 | 	add	fp, #112
36064     A7 12 02 FB | 	rdlong	arg01, fp
36068     70 4E 85 F1 | 	sub	fp, #112
3606c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
36070     0C 4E 05 F1 | 	add	fp, #12
36074     A7 FA 61 FC | 	wrlong	result1, fp
36078     0C 4E 85 F1 | 	sub	fp, #12
3607c                 | LR__5220
3607c                 | LR__5221
3607c                 | LR__5222
3607c                 | LR__5223
3607c                 | ' 					res = sync_fs(fs);
3607c                 | ' 				}
3607c                 | ' 			}
3607c                 | ' 
3607c                 | ' 		}
3607c                 | ' 		;
3607c                 | ' 	}
3607c                 | ' 
3607c                 | ' 	return res ;
3607c     0C 4E 05 F1 | 	add	fp, #12
36080     A7 FA 01 FB | 	rdlong	result1, fp
36084     0C 4E 85 F1 | 	sub	fp, #12
36088     A7 F0 03 F6 | 	mov	ptra, fp
3608c     B2 00 A0 FD | 	call	#popregs_
36090                 | _fatfs_cc_f_rename_ret
36090     2D 00 64 FD | 	ret
36094                 | 
36094                 | _fatfs_cc_time
36094     00 4A 05 F6 | 	mov	COUNT_, #0
36098     A8 00 A0 FD | 	call	#pushregs_
3609c     14 F0 07 F1 | 	add	ptra, #20
360a0     04 4E 05 F1 | 	add	fp, #4
360a4     A7 12 62 FC | 	wrlong	arg01, fp
360a8     04 4E 05 F1 | 	add	fp, #4
360ac     A7 12 02 F6 | 	mov	arg01, fp
360b0     08 4E 85 F1 | 	sub	fp, #8
360b4     00 14 06 F6 | 	mov	arg02, #0
360b8     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
360bc     08 4E 05 F1 | 	add	fp, #8
360c0     A7 FA 01 FB | 	rdlong	result1, fp
360c4     08 4E 05 F1 | 	add	fp, #8
360c8     A7 FA 61 FC | 	wrlong	result1, fp
360cc     0C 4E 85 F1 | 	sub	fp, #12
360d0     A7 FA 09 FB | 	rdlong	result1, fp wz
360d4     04 4E 85 F1 | 	sub	fp, #4
360d8     18 00 90 AD |  if_e	jmp	#LR__5230
360dc     04 4E 05 F1 | 	add	fp, #4
360e0     A7 FA 01 FB | 	rdlong	result1, fp
360e4     0C 4E 05 F1 | 	add	fp, #12
360e8     A7 14 02 FB | 	rdlong	arg02, fp
360ec     10 4E 85 F1 | 	sub	fp, #16
360f0     FD 14 62 FC | 	wrlong	arg02, result1
360f4                 | LR__5230
360f4                 | '         *tp = now;
360f4                 | '     return now;
360f4     10 4E 05 F1 | 	add	fp, #16
360f8     A7 FA 01 FB | 	rdlong	result1, fp
360fc     10 4E 85 F1 | 	sub	fp, #16
36100     A7 F0 03 F6 | 	mov	ptra, fp
36104     B2 00 A0 FD | 	call	#popregs_
36108                 | _fatfs_cc_time_ret
36108     2D 00 64 FD | 	ret
3610c                 | 
3610c                 | _fatfs_cc_mktime
3610c     06 4A 05 F6 | 	mov	COUNT_, #6
36110     A8 00 A0 FD | 	call	#pushregs_
36114     09 27 02 F6 | 	mov	local01, arg01
36118     14 26 06 F1 | 	add	local01, #20
3611c     13 13 02 FB | 	rdlong	arg01, local01
36120     14 26 86 F1 | 	sub	local01, #20
36124     46 12 56 F2 | 	cmps	arg01, #70 wc
36128                 | '                 return (time_t) -1;
36128     01 FA 65 C6 |  if_b	neg	result1, #1
3612c     7C 01 90 CD |  if_b	jmp	#LR__5244
36130     03 00 00 FF 
36134     6C 29 06 F6 | 	mov	local02, ##1900
36138     14 26 06 F1 | 	add	local01, #20
3613c     13 FB 01 FB | 	rdlong	result1, local01
36140     FD 28 02 F1 | 	add	local02, result1
36144     08 26 86 F1 | 	sub	local01, #8
36148     13 2B 02 FB | 	rdlong	local03, local01
3614c     01 2A 86 F1 | 	sub	local03, #1
36150     04 26 06 F1 | 	add	local01, #4
36154     13 13 02 FB | 	rdlong	arg01, local01
36158     10 26 86 F1 | 	sub	local01, #16
3615c     02 12 66 F0 | 	shl	arg01, #2
36160     02 00 00 FF 
36164     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
36168     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3616c     09 FB 01 FB | 	rdlong	result1, arg01
36170     FD 2A 02 F1 | 	add	local03, result1
36174     14 13 02 F6 | 	mov	arg01, local02
36178     02 00 00 FF 
3617c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
36180     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
36184     00 FA 0D F2 | 	cmp	result1, #0 wz
36188     1C 00 90 AD |  if_e	jmp	#LR__5240
3618c     00 2C 06 F6 | 	mov	local04, #0
36190     10 26 06 F1 | 	add	local01, #16
36194     13 FB 01 FB | 	rdlong	result1, local01
36198     10 26 86 F1 | 	sub	local01, #16
3619c     02 FA 55 F2 | 	cmps	result1, #2 wc
361a0     01 2C 06 36 |  if_ae	mov	local04, #1
361a4     04 00 90 FD | 	jmp	#LR__5241
361a8                 | LR__5240
361a8     00 2C 06 F6 | 	mov	local04, #0
361ac                 | LR__5241
361ac     04 26 06 F1 | 	add	local01, #4
361b0     13 FB 01 FB | 	rdlong	result1, local01
361b4     04 26 86 F1 | 	sub	local01, #4
361b8     13 2F 02 FB | 	rdlong	local05, local01
361bc     08 26 06 F1 | 	add	local01, #8
361c0     13 13 02 FB | 	rdlong	arg01, local01
361c4     07 00 00 FF 
361c8     10 12 06 FD | 	qmul	arg01, ##3600
361cc     16 2B 02 F1 | 	add	local03, local04
361d0     FD 2C 02 F6 | 	mov	local04, result1
361d4     04 2C 66 F0 | 	shl	local04, #4
361d8     FD 2C 82 F1 | 	sub	local04, result1
361dc     02 2C 66 F0 | 	shl	local04, #2
361e0     16 2F 02 F1 | 	add	local05, local04
361e4     08 26 86 F1 | 	sub	local01, #8
361e8     18 2C 62 FD | 	getqx	local04
361ec     A8 00 00 FF 
361f0     80 2B 06 FD | 	qmul	local03, ##86400
361f4     16 2F 02 F1 | 	add	local05, local04
361f8     14 2B 02 F6 | 	mov	local03, local02
361fc     03 00 00 FF 
36200     B2 2B 86 F1 | 	sub	local03, ##1970
36204     18 2C 62 FD | 	getqx	local04
36208     99 F0 00 FF 
3620c     80 2B 06 FD | 	qmul	local03, ##31536000
36210     16 2F 02 F1 | 	add	local05, local04
36214     14 2B 02 F6 | 	mov	local03, local02
36218     03 00 00 FF 
3621c     B1 2B 86 F1 | 	sub	local03, ##1969
36220     15 31 52 F6 | 	abs	local06, local03 wc
36224     02 30 46 F0 | 	shr	local06, #2
36228     18 31 82 F6 | 	negc	local06, local06
3622c     03 00 00 FF 
36230     D1 29 56 F2 | 	cmps	local02, ##2001 wc
36234     18 2C 62 FD | 	getqx	local04
36238     16 2F 02 F1 | 	add	local05, local04
3623c     18 00 90 CD |  if_b	jmp	#LR__5242
36240     03 00 00 FF 
36244     D0 29 86 F1 | 	sub	local02, ##2000
36248     14 2D 52 F6 | 	abs	local04, local02 wc
3624c     64 2C 16 FD | 	qdiv	local04, #100
36250     18 2C 62 FD | 	getqx	local04
36254     16 31 A2 F3 | 	sumnc	local06, local04
36258                 | LR__5242
36258     A8 00 00 FF 
3625c     80 31 06 FD | 	qmul	local06, ##86400
36260     18 30 62 FD | 	getqx	local06
36264     18 2F 02 F1 | 	add	local05, local06
36268     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
3626c     02 00 00 FF 
36270     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
36274     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
36278     18 2F 02 F1 | 	add	local05, local06
3627c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
36280     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
36284     02 00 00 FF 
36288     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3628c     01 2A 0E F2 | 	cmp	local03, #1 wz
36290     14 00 90 5D |  if_ne	jmp	#LR__5243
36294     13 13 02 F6 | 	mov	arg01, local01
36298     D8 19 B0 FD | 	call	#_fatfs_cc___indst
3629c     00 FA 0D F2 | 	cmp	result1, #0 wz
362a0     07 00 00 5F 
362a4     10 2E 86 51 |  if_ne	sub	local05, ##3600
362a8                 | LR__5243
362a8                 | '                 s -=  (3600L) ;
362a8                 | ' 
362a8                 | '         return s;
362a8     17 FB 01 F6 | 	mov	result1, local05
362ac                 | LR__5244
362ac     A7 F0 03 F6 | 	mov	ptra, fp
362b0     B2 00 A0 FD | 	call	#popregs_
362b4                 | _fatfs_cc_mktime_ret
362b4     2D 00 64 FD | 	ret
362b8                 | 
362b8                 | _fatfs_cc__gmtime_r
362b8     03 4A 05 F6 | 	mov	COUNT_, #3
362bc     A8 00 A0 FD | 	call	#pushregs_
362c0     09 27 02 FB | 	rdlong	local01, arg01
362c4     A8 00 00 FF 
362c8     80 27 16 FD | 	qdiv	local01, ##86400
362cc     18 FA 61 FD | 	getqx	result1
362d0     04 FA 05 F1 | 	add	result1, #4
362d4     07 FA 15 FD | 	qdiv	result1, #7
362d8     18 14 06 F1 | 	add	arg02, #24
362dc     D1 7F 27 FF 
362e0     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
362e4     D1 7F 27 3F 
362e8     00 26 86 31 |  if_ae	sub	local01, ##1325376000
362ec     03 00 00 3F 
362f0     DC 29 06 36 |  if_ae	mov	local02, ##2012
362f4     03 00 00 CF 
362f8     B2 29 06 C6 |  if_b	mov	local02, ##1970
362fc                 | ' 	  year = 1970;
362fc                 | ' 	}
362fc                 | ' 
362fc                 | ' 	for(;;) {
362fc     19 FA 61 FD | 	getqy	result1
36300     0A FB 61 FC | 	wrlong	result1, arg02
36304     18 14 86 F1 | 	sub	arg02, #24
36308                 | LR__5250
36308     14 13 02 F6 | 	mov	arg01, local02
3630c     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
36310     00 FA 0D F2 | 	cmp	result1, #0 wz
36314     42 F1 00 5F 
36318     00 2B 06 56 |  if_ne	mov	local03, ##31622400
3631c     99 F0 00 AF 
36320     80 2B 06 A6 |  if_e	mov	local03, ##31536000
36324     15 27 12 F2 | 	cmp	local01, local03 wc
36328                 | ' 	    break;
36328     01 28 06 31 |  if_ae	add	local02, #1
3632c     15 27 82 31 |  if_ae	sub	local01, local03
36330     D4 FF 9F 3D |  if_ae	jmp	#LR__5250
36334     A8 00 00 FF 
36338     80 27 16 FD | 	qdiv	local01, ##86400
3633c     14 2B 02 F6 | 	mov	local03, local02
36340     03 00 00 FF 
36344     6C 2B 86 F1 | 	sub	local03, ##1900
36348     14 14 06 F1 | 	add	arg02, #20
3634c     0A 2B 62 FC | 	wrlong	local03, arg02
36350     08 14 06 F1 | 	add	arg02, #8
36354     14 13 02 F6 | 	mov	arg01, local02
36358     18 28 62 FD | 	getqx	local02
3635c     0A 29 62 FC | 	wrlong	local02, arg02
36360     1C 14 86 F1 | 	sub	arg02, #28
36364     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
36368     00 FA 0D F2 | 	cmp	result1, #0 wz
3636c     1D 2A 06 56 |  if_ne	mov	local03, #29
36370     1C 2A 06 A6 |  if_e	mov	local03, #28
36374     02 00 00 FF 
36378     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
3637c     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
36380     02 00 00 FF 
36384     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
36388                 | ' 
36388                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
36388                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
36388     00 12 06 F6 | 	mov	arg01, #0
3638c     97 2A 48 FB | 	callpa	#(@LR__5252-@LR__5251)>>2,fcache_load_ptr_
36390                 | LR__5251
36390     09 2B 02 F6 | 	mov	local03, arg01
36394     02 2A 66 F0 | 	shl	local03, #2
36398     02 00 00 FF 
3639c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
363a0     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
363a4     15 2B 02 FB | 	rdlong	local03, local03
363a8     15 29 52 F2 | 	cmps	local02, local03 wc
363ac     02 00 00 FF 
363b0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
363b4     2C 00 90 CD |  if_b	jmp	#LR__5253
363b8     09 2B 02 F6 | 	mov	local03, arg01
363bc     02 2A 66 F0 | 	shl	local03, #2
363c0     02 00 00 FF 
363c4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
363c8     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
363cc     15 2B 02 FB | 	rdlong	local03, local03
363d0     15 29 82 F1 | 	sub	local02, local03
363d4     01 12 06 F1 | 	add	arg01, #1
363d8     02 00 00 FF 
363dc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
363e0     AC FF 9F FD | 	jmp	#LR__5251
363e4                 | LR__5252
363e4                 | LR__5253
363e4     A8 00 00 FF 
363e8     80 27 16 FD | 	qdiv	local01, ##86400
363ec     10 14 06 F1 | 	add	arg02, #16
363f0     0A 13 62 FC | 	wrlong	arg01, arg02
363f4     01 28 06 F1 | 	add	local02, #1
363f8     04 14 86 F1 | 	sub	arg02, #4
363fc     0A 29 62 FC | 	wrlong	local02, arg02
36400     19 26 62 FD | 	getqy	local01
36404     07 00 00 FF 
36408     10 26 16 FD | 	qdiv	local01, ##3600
3640c     18 2A 62 FD | 	getqx	local03
36410     07 00 00 FF 
36414     10 26 16 FD | 	qdiv	local01, ##3600
36418     04 14 86 F1 | 	sub	arg02, #4
3641c     0A 2B 62 FC | 	wrlong	local03, arg02
36420     19 26 62 FD | 	getqy	local01
36424     3C 26 16 FD | 	qdiv	local01, #60
36428     18 2A 62 FD | 	getqx	local03
3642c     3C 26 16 FD | 	qdiv	local01, #60
36430     04 14 86 F1 | 	sub	arg02, #4
36434     0A 2B 62 FC | 	wrlong	local03, arg02
36438     04 14 86 F1 | 	sub	arg02, #4
3643c                 | '         stm->tm_isdst = 0;
3643c                 | ' 
3643c                 | ' ;
3643c                 | '         return stm;
3643c     0A FB 01 F6 | 	mov	result1, arg02
36440     19 2A 62 FD | 	getqy	local03
36444     0A 2B 62 FC | 	wrlong	local03, arg02
36448     20 14 06 F1 | 	add	arg02, #32
3644c     0A 01 68 FC | 	wrlong	#0, arg02
36450     A7 F0 03 F6 | 	mov	ptra, fp
36454     B2 00 A0 FD | 	call	#popregs_
36458                 | _fatfs_cc__gmtime_r_ret
36458     2D 00 64 FD | 	ret
3645c                 | 
3645c                 | _fatfs_cc__tzset
3645c     BF 01 00 FF 
36460     9D 13 06 F6 | 	mov	arg01, ##@LR__5565
36464     34 00 B0 FD | 	call	#_fatfs_cc_getenv
36468     FD 12 02 F6 | 	mov	arg01, result1
3646c     02 00 00 FF 
36470     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
36474     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
36478     02 00 00 FF 
3647c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
36480     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
36484     02 00 00 FF 
36488     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
3648c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
36490     02 00 00 FF 
36494     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
36498                 | _fatfs_cc__tzset_ret
36498     2D 00 64 FD | 	ret
3649c                 | 
3649c                 | _fatfs_cc_getenv
3649c     06 4A 05 F6 | 	mov	COUNT_, #6
364a0     A8 00 A0 FD | 	call	#pushregs_
364a4     09 27 02 F6 | 	mov	local01, arg01
364a8     09 29 02 F6 | 	mov	local02, arg01
364ac     97 06 48 FB | 	callpa	#(@LR__5261-@LR__5260)>>2,fcache_load_ptr_
364b0                 | LR__5260
364b0     14 FB C9 FA | 	rdbyte	result1, local02 wz
364b4     01 28 06 51 |  if_ne	add	local02, #1
364b8     F4 FF 9F 5D |  if_ne	jmp	#LR__5260
364bc                 | LR__5261
364bc     09 29 82 F1 | 	sub	local02, arg01
364c0     14 FB 01 F6 | 	mov	result1, local02
364c4     02 00 00 FF 
364c8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
364cc     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
364d0     02 00 00 FF 
364d4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
364d8                 | '             return 0;
364d8     00 FA 05 A6 |  if_e	mov	result1, #0
364dc     5C 00 90 AD |  if_e	jmp	#LR__5264
364e0                 | ' 
364e0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
364e0     02 00 00 FF 
364e4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
364e8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
364ec     02 00 00 FF 
364f0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
364f4                 | LR__5262
364f4     15 2D 0A FB | 	rdlong	local04, local03 wz
364f8     3C 00 90 AD |  if_e	jmp	#LR__5263
364fc     16 13 02 F6 | 	mov	arg01, local04
36500     13 15 02 F6 | 	mov	arg02, local01
36504     14 17 02 F6 | 	mov	arg03, local02
36508     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
3650c     00 FA 0D F2 | 	cmp	result1, #0 wz
36510     14 2F 02 A6 |  if_e	mov	local05, local02
36514     16 2F 02 A1 |  if_e	add	local05, local04
36518     17 31 C2 AA |  if_e	rdbyte	local06, local05
3651c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
36520                 | ' 			return name+len+1;
36520     14 2D 02 A1 |  if_e	add	local04, local02
36524     01 2C 06 A1 |  if_e	add	local04, #1
36528     16 FB 01 A6 |  if_e	mov	result1, local04
3652c     0C 00 90 AD |  if_e	jmp	#LR__5264
36530     04 2A 06 F1 | 	add	local03, #4
36534     BC FF 9F FD | 	jmp	#LR__5262
36538                 | LR__5263
36538                 | ' 	}
36538                 | ' 	return 0;
36538     00 FA 05 F6 | 	mov	result1, #0
3653c                 | LR__5264
3653c     A7 F0 03 F6 | 	mov	ptra, fp
36540     B2 00 A0 FD | 	call	#popregs_
36544                 | _fatfs_cc_getenv_ret
36544     2D 00 64 FD | 	ret
36548                 | 
36548                 | _fatfs_cc__get_fattime
36548     00 4A 05 F6 | 	mov	COUNT_, #0
3654c     A8 00 A0 FD | 	call	#pushregs_
36550     34 F0 07 F1 | 	add	ptra, #52
36554     00 12 06 F6 | 	mov	arg01, #0
36558     38 FB BF FD | 	call	#_fatfs_cc_time
3655c     04 4E 05 F1 | 	add	fp, #4
36560     A7 FA 61 FC | 	wrlong	result1, fp
36564     A7 12 02 F6 | 	mov	arg01, fp
36568     0C 4E 05 F1 | 	add	fp, #12
3656c     A7 14 02 F6 | 	mov	arg02, fp
36570     10 4E 85 F1 | 	sub	fp, #16
36574     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
36578     24 4E 05 F1 | 	add	fp, #36
3657c     A7 14 02 FB | 	rdlong	arg02, fp
36580     50 14 86 F1 | 	sub	arg02, #80
36584     09 14 66 F0 | 	shl	arg02, #9
36588     04 4E 85 F1 | 	sub	fp, #4
3658c     A7 FA 01 FB | 	rdlong	result1, fp
36590     01 FA 05 F1 | 	add	result1, #1
36594     05 FA 65 F0 | 	shl	result1, #5
36598     FD 14 42 F5 | 	or	arg02, result1
3659c     04 4E 85 F1 | 	sub	fp, #4
365a0     A7 FA 01 FB | 	rdlong	result1, fp
365a4     FD 14 42 F5 | 	or	arg02, result1
365a8     14 4E 85 F1 | 	sub	fp, #20
365ac     A7 14 62 FC | 	wrlong	arg02, fp
365b0     10 4E 05 F1 | 	add	fp, #16
365b4     A7 14 02 FB | 	rdlong	arg02, fp
365b8     0B 14 66 F0 | 	shl	arg02, #11
365bc     04 4E 85 F1 | 	sub	fp, #4
365c0     A7 FA 01 FB | 	rdlong	result1, fp
365c4     05 FA 65 F0 | 	shl	result1, #5
365c8     FD 14 42 F5 | 	or	arg02, result1
365cc     04 4E 85 F1 | 	sub	fp, #4
365d0     A7 FA 01 FB | 	rdlong	result1, fp
365d4     FD 14 42 F5 | 	or	arg02, result1
365d8     04 4E 85 F1 | 	sub	fp, #4
365dc     A7 14 62 FC | 	wrlong	arg02, fp
365e0                 | ' 
365e0                 | '     now = time(0);
365e0                 | '     _gmtime_r (&now, &date);
365e0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
365e0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
365e0                 | '     return (ffdate << 16) | fftime;
365e0     04 4E 85 F1 | 	sub	fp, #4
365e4     A7 FA 01 FB | 	rdlong	result1, fp
365e8     10 FA 65 F0 | 	shl	result1, #16
365ec     08 4E 85 F1 | 	sub	fp, #8
365f0     0A FB 41 F5 | 	or	result1, arg02
365f4     A7 F0 03 F6 | 	mov	ptra, fp
365f8     B2 00 A0 FD | 	call	#popregs_
365fc                 | _fatfs_cc__get_fattime_ret
365fc     2D 00 64 FD | 	ret
36600                 | 
36600                 | _fatfs_cc_unixtime_1055
36600     00 4A 05 F6 | 	mov	COUNT_, #0
36604     A8 00 A0 FD | 	call	#pushregs_
36608     34 F0 07 F1 | 	add	ptra, #52
3660c     04 4E 05 F1 | 	add	fp, #4
36610     A7 12 62 FC | 	wrlong	arg01, fp
36614     04 4E 05 F1 | 	add	fp, #4
36618     A7 14 62 FC | 	wrlong	arg02, fp
3661c     04 4E 85 F1 | 	sub	fp, #4
36620     A7 14 02 FB | 	rdlong	arg02, fp
36624     09 14 46 F0 | 	shr	arg02, #9
36628     7F 14 06 F5 | 	and	arg02, #127
3662c     50 FA 05 F6 | 	mov	result1, #80
36630     0A FB 01 F1 | 	add	result1, arg02
36634     20 4E 05 F1 | 	add	fp, #32
36638     A7 FA 61 FC | 	wrlong	result1, fp
3663c     20 4E 85 F1 | 	sub	fp, #32
36640     A7 FA 01 FB | 	rdlong	result1, fp
36644     05 FA 45 F0 | 	shr	result1, #5
36648     FD FA 41 F8 | 	getnib	result1, result1, #0
3664c     01 FA 85 F1 | 	sub	result1, #1
36650     1C 4E 05 F1 | 	add	fp, #28
36654     A7 FA 61 FC | 	wrlong	result1, fp
36658     1C 4E 85 F1 | 	sub	fp, #28
3665c     A7 FA 01 FB | 	rdlong	result1, fp
36660     1F FA 05 F5 | 	and	result1, #31
36664     18 4E 05 F1 | 	add	fp, #24
36668     A7 FA 61 FC | 	wrlong	result1, fp
3666c     14 4E 85 F1 | 	sub	fp, #20
36670     A7 FA 01 FB | 	rdlong	result1, fp
36674     0B FA 45 F0 | 	shr	result1, #11
36678     1F FA 05 F5 | 	and	result1, #31
3667c     10 4E 05 F1 | 	add	fp, #16
36680     A7 FA 61 FC | 	wrlong	result1, fp
36684     10 4E 85 F1 | 	sub	fp, #16
36688     A7 FA 01 FB | 	rdlong	result1, fp
3668c     05 FA 45 F0 | 	shr	result1, #5
36690     3F FA 05 F5 | 	and	result1, #63
36694     0C 4E 05 F1 | 	add	fp, #12
36698     A7 FA 61 FC | 	wrlong	result1, fp
3669c     0C 4E 85 F1 | 	sub	fp, #12
366a0     A7 14 02 FB | 	rdlong	arg02, fp
366a4     1F 14 06 F5 | 	and	arg02, #31
366a8     01 14 66 F0 | 	shl	arg02, #1
366ac     08 4E 05 F1 | 	add	fp, #8
366b0     A7 14 62 FC | 	wrlong	arg02, fp
366b4     A7 12 02 F6 | 	mov	arg01, fp
366b8     10 4E 85 F1 | 	sub	fp, #16
366bc     4C FA BF FD | 	call	#_fatfs_cc_mktime
366c0     0C 4E 05 F1 | 	add	fp, #12
366c4     A7 FA 61 FC | 	wrlong	result1, fp
366c8                 | ' 
366c8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
366c8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
366c8                 | '     date.tm_mday = (dosdate & 0x1f);
366c8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
366c8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
366c8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
366c8                 | ' 
366c8                 | '     t = mktime(&date);
366c8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
366c8                 | '     return t;
366c8     0C 4E 85 F1 | 	sub	fp, #12
366cc     A7 F0 03 F6 | 	mov	ptra, fp
366d0     B2 00 A0 FD | 	call	#popregs_
366d4                 | _fatfs_cc_unixtime_1055_ret
366d4     2D 00 64 FD | 	ret
366d8                 | 
366d8                 | _fatfs_cc__set_dos_error_1057
366d8     09 01 02 F6 | 	mov	_var01, arg01
366dc                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
366dc                 | '     switch (derr) {
366dc     14 00 26 F3 | 	fle	_var01, #20
366e0     30 00 62 FD | 	jmprel	_var01
366e4                 | LR__5270
366e4     50 00 90 FD | 	jmp	#LR__5271
366e8     84 00 90 FD | 	jmp	#LR__5285
366ec     80 00 90 FD | 	jmp	#LR__5286
366f0     7C 00 90 FD | 	jmp	#LR__5287
366f4     48 00 90 FD | 	jmp	#LR__5272
366f8     44 00 90 FD | 	jmp	#LR__5273
366fc     40 00 90 FD | 	jmp	#LR__5274
36700     44 00 90 FD | 	jmp	#LR__5275
36704     48 00 90 FD | 	jmp	#LR__5277
36708     54 00 90 FD | 	jmp	#LR__5280
3670c     38 00 90 FD | 	jmp	#LR__5276
36710     4C 00 90 FD | 	jmp	#LR__5281
36714     48 00 90 FD | 	jmp	#LR__5282
36718     44 00 90 FD | 	jmp	#LR__5283
3671c     50 00 90 FD | 	jmp	#LR__5288
36720     4C 00 90 FD | 	jmp	#LR__5288
36724     48 00 90 FD | 	jmp	#LR__5288
36728     2C 00 90 FD | 	jmp	#LR__5278
3672c     38 00 90 FD | 	jmp	#LR__5284
36730     2C 00 90 FD | 	jmp	#LR__5279
36734     38 00 90 FD | 	jmp	#LR__5288
36738                 | LR__5271
36738     00 02 06 F6 | 	mov	_var02, #0
3673c                 | '         r = 0;
3673c                 | '         break;
3673c     34 00 90 FD | 	jmp	#LR__5289
36740                 | LR__5272
36740                 | LR__5273
36740                 | LR__5274
36740     04 02 06 F6 | 	mov	_var02, #4
36744                 | '         r =  4 ;
36744                 | '         break;
36744     2C 00 90 FD | 	jmp	#LR__5289
36748                 | LR__5275
36748                 | LR__5276
36748     06 02 06 F6 | 	mov	_var02, #6
3674c                 | '         r =  6 ;
3674c                 | '         break;
3674c     24 00 90 FD | 	jmp	#LR__5289
36750                 | LR__5277
36750     09 02 06 F6 | 	mov	_var02, #9
36754                 | '         r =  9 ;
36754                 | '         break;
36754     1C 00 90 FD | 	jmp	#LR__5289
36758                 | LR__5278
36758     07 02 06 F6 | 	mov	_var02, #7
3675c                 | '         r =  7 ;
3675c                 | '         break;
3675c     14 00 90 FD | 	jmp	#LR__5289
36760                 | LR__5279
36760                 | LR__5280
36760                 | LR__5281
36760                 | LR__5282
36760                 | LR__5283
36760     0A 02 06 F6 | 	mov	_var02, #10
36764                 | '         r =  10 ;
36764                 | '         break;
36764     0C 00 90 FD | 	jmp	#LR__5289
36768                 | LR__5284
36768     0B 02 06 F6 | 	mov	_var02, #11
3676c                 | '         r =  11 ;
3676c                 | '         break;
3676c     04 00 90 FD | 	jmp	#LR__5289
36770                 | LR__5285
36770                 | LR__5286
36770                 | LR__5287
36770                 | LR__5288
36770     0C 02 06 F6 | 	mov	_var02, #12
36774                 | '         r =  12 ;
36774                 | '         break;
36774                 | LR__5289
36774                 | '     }
36774                 | '     return _seterror(r);
36774     00 02 4E F2 | 	cmps	_var02, #0 wz
36778     20 E6 05 F1 | 	add	ptr___system__dat__, #32
3677c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
36780     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
36784     01 FA 65 56 |  if_ne	neg	result1, #1
36788     00 FA 05 A6 |  if_e	mov	result1, #0
3678c                 | _fatfs_cc__set_dos_error_1057_ret
3678c     2D 00 64 FD | 	ret
36790                 | 
36790                 | _fatfs_cc_v_creat
36790     04 4A 05 F6 | 	mov	COUNT_, #4
36794     A8 00 A0 FD | 	call	#pushregs_
36798     09 27 02 F6 | 	mov	local01, arg01
3679c     0A 29 02 F6 | 	mov	local02, arg02
367a0     03 00 00 FF 
367a4     3C 12 06 F6 | 	mov	arg01, ##1596
367a8                 | '     return _gc_alloc(size);
367a8     10 14 06 F6 | 	mov	arg02, #16
367ac     1C 5E BF FD | 	call	#__system___gc_doalloc
367b0     FD 2A 0A F6 | 	mov	local03, result1 wz
367b4                 | '       return _seterror( 7 );
367b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
367b8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
367bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
367c0     01 FA 65 A6 |  if_e	neg	result1, #1
367c4     58 00 90 AD |  if_e	jmp	#LR__5291
367c8     15 13 02 F6 | 	mov	arg01, local03
367cc     00 14 06 F6 | 	mov	arg02, #0
367d0     03 00 00 FF 
367d4     3C 16 06 F6 | 	mov	arg03, ##1596
367d8     98 00 A0 FD | 	call	#\builtin_bytefill_
367dc     02 00 00 FF 
367e0     14 2A 06 F1 | 	add	local03, ##1044
367e4     15 13 02 F6 | 	mov	arg01, local03
367e8     02 00 00 FF 
367ec     14 2A 86 F1 | 	sub	local03, ##1044
367f0     14 15 02 F6 | 	mov	arg02, local02
367f4     07 16 06 F6 | 	mov	arg03, #7
367f8     B4 CC BF FD | 	call	#_fatfs_cc_f_open
367fc     FD 2C 0A F6 | 	mov	local04, result1 wz
36800     14 00 90 AD |  if_e	jmp	#LR__5290
36804     15 13 02 F6 | 	mov	arg01, local03
36808                 | '     return _gc_free(ptr);
36808     CC 5E BF FD | 	call	#__system___gc_free
3680c                 | '     free(f);
3680c                 | '     return _set_dos_error(r);
3680c     16 13 02 F6 | 	mov	arg01, local04
36810     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36814     08 00 90 FD | 	jmp	#LR__5291
36818                 | LR__5290
36818     13 2B 62 FC | 	wrlong	local03, local01
3681c                 | '   }
3681c                 | '   fil->vfsdata = f;
3681c                 | '   return 0;
3681c     00 FA 05 F6 | 	mov	result1, #0
36820                 | LR__5291
36820     A7 F0 03 F6 | 	mov	ptra, fp
36824     B2 00 A0 FD | 	call	#popregs_
36828                 | _fatfs_cc_v_creat_ret
36828     2D 00 64 FD | 	ret
3682c                 | 
3682c                 | _fatfs_cc_v_close
3682c     02 4A 05 F6 | 	mov	COUNT_, #2
36830     A8 00 A0 FD | 	call	#pushregs_
36834     09 27 02 FB | 	rdlong	local01, arg01
36838     02 00 00 FF 
3683c     14 26 06 F1 | 	add	local01, ##1044
36840     13 13 02 F6 | 	mov	arg01, local01
36844     02 00 00 FF 
36848     14 26 86 F1 | 	sub	local01, ##1044
3684c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
36850     FD 28 02 F6 | 	mov	local02, result1
36854     13 13 02 F6 | 	mov	arg01, local01
36858                 | '     return _gc_free(ptr);
36858     7C 5E BF FD | 	call	#__system___gc_free
3685c                 | '     FAT_FIL *f = fil->vfsdata;
3685c                 | '     r=f_close(&f->fil);
3685c                 | '     free(f);
3685c                 | '     return _set_dos_error(r);
3685c     14 13 02 F6 | 	mov	arg01, local02
36860     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36864     A7 F0 03 F6 | 	mov	ptra, fp
36868     B2 00 A0 FD | 	call	#popregs_
3686c                 | _fatfs_cc_v_close_ret
3686c     2D 00 64 FD | 	ret
36870                 | 
36870                 | _fatfs_cc_v_opendir
36870     04 4A 05 F6 | 	mov	COUNT_, #4
36874     A8 00 A0 FD | 	call	#pushregs_
36878     09 27 02 F6 | 	mov	local01, arg01
3687c     0A 29 02 F6 | 	mov	local02, arg02
36880     30 12 06 F6 | 	mov	arg01, #48
36884                 | '     return _gc_alloc(size);
36884     10 14 06 F6 | 	mov	arg02, #16
36888     40 5D BF FD | 	call	#__system___gc_doalloc
3688c     FD 2A 0A F6 | 	mov	local03, result1 wz
36890                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36890                 | '       return _seterror( 7 );
36890     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36894     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
36898     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3689c     01 FA 65 A6 |  if_e	neg	result1, #1
368a0     34 00 90 AD |  if_e	jmp	#LR__5301
368a4     14 15 02 F6 | 	mov	arg02, local02
368a8     15 13 02 F6 | 	mov	arg01, local03
368ac     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
368b0     FD 2C 0A F6 | 	mov	local04, result1 wz
368b4     14 00 90 AD |  if_e	jmp	#LR__5300
368b8     15 13 02 F6 | 	mov	arg01, local03
368bc                 | '     return _gc_free(ptr);
368bc     18 5E BF FD | 	call	#__system___gc_free
368c0                 | '         free(f);
368c0                 | '         return _set_dos_error(r);
368c0     16 13 02 F6 | 	mov	arg01, local04
368c4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1057
368c8     0C 00 90 FD | 	jmp	#LR__5301
368cc                 | LR__5300
368cc     04 26 06 F1 | 	add	local01, #4
368d0     13 2B 62 FC | 	wrlong	local03, local01
368d4                 | '     }
368d4                 | '     dir->vfsdata = f;
368d4                 | '     return 0;
368d4     00 FA 05 F6 | 	mov	result1, #0
368d8                 | LR__5301
368d8     A7 F0 03 F6 | 	mov	ptra, fp
368dc     B2 00 A0 FD | 	call	#popregs_
368e0                 | _fatfs_cc_v_opendir_ret
368e0     2D 00 64 FD | 	ret
368e4                 | 
368e4                 | _fatfs_cc_v_closedir
368e4     02 4A 05 F6 | 	mov	COUNT_, #2
368e8     A8 00 A0 FD | 	call	#pushregs_
368ec     04 12 06 F1 | 	add	arg01, #4
368f0     09 27 02 FB | 	rdlong	local01, arg01
368f4     13 13 02 F6 | 	mov	arg01, local01
368f8     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
368fc     FD 28 02 F6 | 	mov	local02, result1
36900     13 13 02 F6 | 	mov	arg01, local01
36904                 | '     return _gc_free(ptr);
36904     D0 5D BF FD | 	call	#__system___gc_free
36908     00 28 0E F2 | 	cmp	local02, #0 wz
3690c     14 13 02 56 |  if_ne	mov	arg01, local02
36910     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1057
36914                 | '     return r;
36914     14 FB 01 F6 | 	mov	result1, local02
36918     A7 F0 03 F6 | 	mov	ptra, fp
3691c     B2 00 A0 FD | 	call	#popregs_
36920                 | _fatfs_cc_v_closedir_ret
36920     2D 00 64 FD | 	ret
36924                 | 
36924                 | _fatfs_cc_v_readdir
36924     01 4A 05 F6 | 	mov	COUNT_, #1
36928     A8 00 A0 FD | 	call	#pushregs_
3692c     2C F1 07 F1 | 	add	ptra, #300
36930     04 4E 05 F1 | 	add	fp, #4
36934     A7 12 62 FC | 	wrlong	arg01, fp
36938     04 4E 05 F1 | 	add	fp, #4
3693c     A7 14 62 FC | 	wrlong	arg02, fp
36940     04 4E 85 F1 | 	sub	fp, #4
36944     A7 16 02 FB | 	rdlong	arg03, fp
36948     04 16 06 F1 | 	add	arg03, #4
3694c     0B 13 02 FB | 	rdlong	arg01, arg03
36950     08 4E 05 F1 | 	add	fp, #8
36954     A7 14 02 F6 | 	mov	arg02, fp
36958     0C 4E 85 F1 | 	sub	fp, #12
3695c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
36960     28 4F 05 F1 | 	add	fp, #296
36964     A7 FA 61 FC | 	wrlong	result1, fp
36968     28 4F 85 F1 | 	sub	fp, #296
3696c     00 FA 0D F2 | 	cmp	result1, #0 wz
36970     14 00 90 AD |  if_e	jmp	#LR__5310
36974                 | '         return _set_dos_error(r);
36974     28 4F 05 F1 | 	add	fp, #296
36978     A7 12 02 FB | 	rdlong	arg01, fp
3697c     28 4F 85 F1 | 	sub	fp, #296
36980     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36984     C4 00 90 FD | 	jmp	#LR__5313
36988                 | LR__5310
36988     28 4E 05 F1 | 	add	fp, #40
3698c     A7 16 CA FA | 	rdbyte	arg03, fp wz
36990     28 4E 85 F1 | 	sub	fp, #40
36994                 | '         return -1;
36994     01 FA 65 A6 |  if_e	neg	result1, #1
36998     B0 00 90 AD |  if_e	jmp	#LR__5313
3699c     08 4E 05 F1 | 	add	fp, #8
369a0     A7 12 02 FB | 	rdlong	arg01, fp
369a4     20 4E 05 F1 | 	add	fp, #32
369a8     A7 14 02 F6 | 	mov	arg02, fp
369ac     28 4E 85 F1 | 	sub	fp, #40
369b0     3F 16 06 F6 | 	mov	arg03, #63
369b4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
369b8     08 4E 05 F1 | 	add	fp, #8
369bc     A7 16 02 FB | 	rdlong	arg03, fp
369c0     3F 16 06 F1 | 	add	arg03, #63
369c4     0B 01 48 FC | 	wrbyte	#0, arg03
369c8     0C 4E 05 F1 | 	add	fp, #12
369cc     A7 16 C2 FA | 	rdbyte	arg03, fp
369d0     14 4E 85 F1 | 	sub	fp, #20
369d4     10 16 CE F7 | 	test	arg03, #16 wz
369d8     18 00 90 AD |  if_e	jmp	#LR__5311
369dc     08 4E 05 F1 | 	add	fp, #8
369e0     A7 16 02 FB | 	rdlong	arg03, fp
369e4     08 4E 85 F1 | 	sub	fp, #8
369e8     50 16 06 F1 | 	add	arg03, #80
369ec     0B 03 48 FC | 	wrbyte	#1, arg03
369f0     14 00 90 FD | 	jmp	#LR__5312
369f4                 | LR__5311
369f4     08 4E 05 F1 | 	add	fp, #8
369f8     A7 16 02 FB | 	rdlong	arg03, fp
369fc     08 4E 85 F1 | 	sub	fp, #8
36a00     50 16 06 F1 | 	add	arg03, #80
36a04     0B 01 48 FC | 	wrbyte	#0, arg03
36a08                 | LR__5312
36a08     08 4E 05 F1 | 	add	fp, #8
36a0c     A7 16 02 FB | 	rdlong	arg03, fp
36a10     04 4E 05 F1 | 	add	fp, #4
36a14     A7 14 02 FB | 	rdlong	arg02, fp
36a18     48 16 06 F1 | 	add	arg03, #72
36a1c     0B 15 62 FC | 	wrlong	arg02, arg03
36a20     04 4E 85 F1 | 	sub	fp, #4
36a24     A7 26 02 FB | 	rdlong	local01, fp
36a28     08 4E 05 F1 | 	add	fp, #8
36a2c     A7 12 E2 FA | 	rdword	arg01, fp
36a30     02 4E 05 F1 | 	add	fp, #2
36a34     A7 14 E2 FA | 	rdword	arg02, fp
36a38     12 4E 85 F1 | 	sub	fp, #18
36a3c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1055
36a40     4C 26 06 F1 | 	add	local01, #76
36a44     13 FB 61 FC | 	wrlong	result1, local01
36a48                 | '         ent->d_type =  (0) ;
36a48                 | '     }
36a48                 | '     ent->d_size = finfo.fsize;
36a48                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
36a48                 | '     return 0;
36a48     00 FA 05 F6 | 	mov	result1, #0
36a4c                 | LR__5313
36a4c     A7 F0 03 F6 | 	mov	ptra, fp
36a50     B2 00 A0 FD | 	call	#popregs_
36a54                 | _fatfs_cc_v_readdir_ret
36a54     2D 00 64 FD | 	ret
36a58                 | 
36a58                 | _fatfs_cc_v_stat
36a58     03 4A 05 F6 | 	mov	COUNT_, #3
36a5c     A8 00 A0 FD | 	call	#pushregs_
36a60     30 F1 07 F1 | 	add	ptra, #304
36a64     04 4E 05 F1 | 	add	fp, #4
36a68     A7 12 62 FC | 	wrlong	arg01, fp
36a6c     04 4E 05 F1 | 	add	fp, #4
36a70     A7 14 62 FC | 	wrlong	arg02, fp
36a74     08 4E 85 F1 | 	sub	fp, #8
36a78     0A 13 02 F6 | 	mov	arg01, arg02
36a7c     00 14 06 F6 | 	mov	arg02, #0
36a80     30 16 06 F6 | 	mov	arg03, #48
36a84     98 00 A0 FD | 	call	#\builtin_bytefill_
36a88     04 4E 05 F1 | 	add	fp, #4
36a8c     A7 FA 01 FB | 	rdlong	result1, fp
36a90     04 4E 85 F1 | 	sub	fp, #4
36a94     FD FA C9 FA | 	rdbyte	result1, result1 wz
36a98     2C 00 90 AD |  if_e	jmp	#LR__5320
36a9c     04 4E 05 F1 | 	add	fp, #4
36aa0     A7 FA 01 FB | 	rdlong	result1, fp
36aa4     04 4E 85 F1 | 	sub	fp, #4
36aa8     FD FA C1 FA | 	rdbyte	result1, result1
36aac     2E FA 0D F2 | 	cmp	result1, #46 wz
36ab0     04 4E 05 A1 |  if_e	add	fp, #4
36ab4     A7 26 02 AB |  if_e	rdlong	local01, fp
36ab8     04 4E 85 A1 |  if_e	sub	fp, #4
36abc     01 26 06 A1 |  if_e	add	local01, #1
36ac0     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
36ac4     18 00 90 5D |  if_ne	jmp	#LR__5321
36ac8                 | LR__5320
36ac8     18 4E 05 F1 | 	add	fp, #24
36acc     A7 20 48 FC | 	wrbyte	#16, fp
36ad0     0C 4E 85 F1 | 	sub	fp, #12
36ad4     A7 00 68 FC | 	wrlong	#0, fp
36ad8     0C 4E 85 F1 | 	sub	fp, #12
36adc     24 00 90 FD | 	jmp	#LR__5322
36ae0                 | LR__5321
36ae0     04 4E 05 F1 | 	add	fp, #4
36ae4     A7 12 02 FB | 	rdlong	arg01, fp
36ae8     0C 4E 05 F1 | 	add	fp, #12
36aec     A7 14 02 F6 | 	mov	arg02, fp
36af0     10 4E 85 F1 | 	sub	fp, #16
36af4     AC EB BF FD | 	call	#_fatfs_cc_f_stat
36af8     0C 4E 05 F1 | 	add	fp, #12
36afc     A7 FA 61 FC | 	wrlong	result1, fp
36b00     0C 4E 85 F1 | 	sub	fp, #12
36b04                 | LR__5322
36b04     0C 4E 05 F1 | 	add	fp, #12
36b08     A7 28 0A FB | 	rdlong	local02, fp wz
36b0c     0C 4E 85 F1 | 	sub	fp, #12
36b10     14 00 90 AD |  if_e	jmp	#LR__5323
36b14                 | '         return _set_dos_error(r);
36b14     0C 4E 05 F1 | 	add	fp, #12
36b18     A7 12 02 FB | 	rdlong	arg01, fp
36b1c     0C 4E 85 F1 | 	sub	fp, #12
36b20     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36b24     14 01 90 FD | 	jmp	#LR__5324
36b28                 | LR__5323
36b28     2C 4F 05 F1 | 	add	fp, #300
36b2c     A7 48 6A FC | 	wrlong	#292, fp
36b30     14 4F 85 F1 | 	sub	fp, #276
36b34     A7 2A C2 FA | 	rdbyte	local03, fp
36b38     18 4E 85 F1 | 	sub	fp, #24
36b3c     01 2A CE F7 | 	test	local03, #1 wz
36b40     2C 4F 05 A1 |  if_e	add	fp, #300
36b44     A7 2A 02 AB |  if_e	rdlong	local03, fp
36b48     92 2A 46 A5 |  if_e	or	local03, #146
36b4c     A7 2A 62 AC |  if_e	wrlong	local03, fp
36b50     2C 4F 85 A1 |  if_e	sub	fp, #300
36b54     18 4E 05 F1 | 	add	fp, #24
36b58     A7 2A C2 FA | 	rdbyte	local03, fp
36b5c     18 4E 85 F1 | 	sub	fp, #24
36b60     10 2A CE F7 | 	test	local03, #16 wz
36b64     2C 4F 05 51 |  if_ne	add	fp, #300
36b68     A7 2A 02 5B |  if_ne	rdlong	local03, fp
36b6c     08 00 00 5F 
36b70     49 2A 46 55 |  if_ne	or	local03, ##4169
36b74     A7 2A 62 5C |  if_ne	wrlong	local03, fp
36b78     2C 4F 85 51 |  if_ne	sub	fp, #300
36b7c     08 4E 05 F1 | 	add	fp, #8
36b80     A7 2A 02 FB | 	rdlong	local03, fp
36b84     24 4F 05 F1 | 	add	fp, #292
36b88     A7 28 02 FB | 	rdlong	local02, fp
36b8c     08 2A 06 F1 | 	add	local03, #8
36b90     15 29 62 FC | 	wrlong	local02, local03
36b94     24 4F 85 F1 | 	sub	fp, #292
36b98     A7 2A 02 FB | 	rdlong	local03, fp
36b9c     0C 2A 06 F1 | 	add	local03, #12
36ba0     15 03 68 FC | 	wrlong	#1, local03
36ba4     A7 2A 02 FB | 	rdlong	local03, fp
36ba8     08 4E 05 F1 | 	add	fp, #8
36bac     A7 28 02 FB | 	rdlong	local02, fp
36bb0     18 2A 06 F1 | 	add	local03, #24
36bb4     15 29 62 FC | 	wrlong	local02, local03
36bb8     08 4E 85 F1 | 	sub	fp, #8
36bbc     A7 2A 02 FB | 	rdlong	local03, fp
36bc0     1C 2A 06 F1 | 	add	local03, #28
36bc4     01 00 80 FF 
36bc8     15 01 68 FC | 	wrlong	##512, local03
36bcc     A7 28 02 FB | 	rdlong	local02, fp
36bd0     14 2B 02 F6 | 	mov	local03, local02
36bd4     18 28 06 F1 | 	add	local02, #24
36bd8     14 29 02 FB | 	rdlong	local02, local02
36bdc     FF 29 06 F1 | 	add	local02, #511
36be0     14 29 52 F6 | 	abs	local02, local02 wc
36be4     09 28 46 F0 | 	shr	local02, #9
36be8     14 29 82 F6 | 	negc	local02, local02
36bec     20 2A 06 F1 | 	add	local03, #32
36bf0     15 29 62 FC | 	wrlong	local02, local03
36bf4     A7 28 02 FB | 	rdlong	local02, fp
36bf8     14 2B 02 F6 | 	mov	local03, local02
36bfc     14 27 02 F6 | 	mov	local01, local02
36c00     0C 4E 05 F1 | 	add	fp, #12
36c04     A7 12 E2 FA | 	rdword	arg01, fp
36c08     02 4E 05 F1 | 	add	fp, #2
36c0c     A7 14 E2 FA | 	rdword	arg02, fp
36c10     16 4E 85 F1 | 	sub	fp, #22
36c14     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1055
36c18     2C 26 06 F1 | 	add	local01, #44
36c1c     13 FB 61 FC | 	wrlong	result1, local01
36c20     28 28 06 F1 | 	add	local02, #40
36c24     14 FB 61 FC | 	wrlong	result1, local02
36c28     24 2A 06 F1 | 	add	local03, #36
36c2c     15 FB 61 FC | 	wrlong	result1, local03
36c30                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
36c30                 | '     }
36c30                 | '     buf->st_mode = mode;
36c30                 | '     buf->st_nlink = 1;
36c30                 | '     buf->st_size = finfo.fsize;
36c30                 | '     buf->st_blksize = 512;
36c30                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
36c30                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
36c30                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36c30                 | '     return r;
36c30     0C 4E 05 F1 | 	add	fp, #12
36c34     A7 FA 01 FB | 	rdlong	result1, fp
36c38     0C 4E 85 F1 | 	sub	fp, #12
36c3c                 | LR__5324
36c3c     A7 F0 03 F6 | 	mov	ptra, fp
36c40     B2 00 A0 FD | 	call	#popregs_
36c44                 | _fatfs_cc_v_stat_ret
36c44     2D 00 64 FD | 	ret
36c48                 | 
36c48                 | _fatfs_cc_v_read
36c48     00 4A 05 F6 | 	mov	COUNT_, #0
36c4c     A8 00 A0 FD | 	call	#pushregs_
36c50     1C F0 07 F1 | 	add	ptra, #28
36c54     04 4E 05 F1 | 	add	fp, #4
36c58     A7 12 62 FC | 	wrlong	arg01, fp
36c5c     04 4E 05 F1 | 	add	fp, #4
36c60     A7 14 62 FC | 	wrlong	arg02, fp
36c64     04 4E 05 F1 | 	add	fp, #4
36c68     A7 16 62 FC | 	wrlong	arg03, fp
36c6c     08 4E 85 F1 | 	sub	fp, #8
36c70     A7 12 02 FB | 	rdlong	arg01, fp
36c74     09 13 0A FB | 	rdlong	arg01, arg01 wz
36c78     0C 4E 05 F1 | 	add	fp, #12
36c7c     A7 12 62 FC | 	wrlong	arg01, fp
36c80     10 4E 85 F1 | 	sub	fp, #16
36c84                 | '         return _seterror( 5 );
36c84     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36c88     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36c8c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36c90     01 FA 65 A6 |  if_e	neg	result1, #1
36c94     B8 00 90 AD |  if_e	jmp	#LR__5332
36c98     10 4E 05 F1 | 	add	fp, #16
36c9c     A7 12 02 FB | 	rdlong	arg01, fp
36ca0     02 00 00 FF 
36ca4     14 12 06 F1 | 	add	arg01, ##1044
36ca8     08 4E 85 F1 | 	sub	fp, #8
36cac     A7 14 02 FB | 	rdlong	arg02, fp
36cb0     04 4E 05 F1 | 	add	fp, #4
36cb4     A7 16 02 FB | 	rdlong	arg03, fp
36cb8     0C 4E 05 F1 | 	add	fp, #12
36cbc     A7 18 02 F6 | 	mov	arg04, fp
36cc0     18 4E 85 F1 | 	sub	fp, #24
36cc4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
36cc8     14 4E 05 F1 | 	add	fp, #20
36ccc     A7 FA 61 FC | 	wrlong	result1, fp
36cd0     14 4E 85 F1 | 	sub	fp, #20
36cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
36cd8     34 00 90 AD |  if_e	jmp	#LR__5330
36cdc     04 4E 05 F1 | 	add	fp, #4
36ce0     A7 18 02 FB | 	rdlong	arg04, fp
36ce4     0C 17 02 F6 | 	mov	arg03, arg04
36ce8     08 18 06 F1 | 	add	arg04, #8
36cec     0C 19 02 FB | 	rdlong	arg04, arg04
36cf0     20 18 46 F5 | 	or	arg04, #32
36cf4     08 16 06 F1 | 	add	arg03, #8
36cf8     0B 19 62 FC | 	wrlong	arg04, arg03
36cfc                 | '         fil->state |=  (0x20) ;
36cfc                 | '         return _set_dos_error(r);
36cfc     10 4E 05 F1 | 	add	fp, #16
36d00     A7 12 02 FB | 	rdlong	arg01, fp
36d04     14 4E 85 F1 | 	sub	fp, #20
36d08     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36d0c     40 00 90 FD | 	jmp	#LR__5332
36d10                 | LR__5330
36d10     18 4E 05 F1 | 	add	fp, #24
36d14     A7 FA 09 FB | 	rdlong	result1, fp wz
36d18     18 4E 85 F1 | 	sub	fp, #24
36d1c     24 00 90 5D |  if_ne	jmp	#LR__5331
36d20     04 4E 05 F1 | 	add	fp, #4
36d24     A7 FA 01 FB | 	rdlong	result1, fp
36d28     FD 18 02 F6 | 	mov	arg04, result1
36d2c     04 4E 85 F1 | 	sub	fp, #4
36d30     08 FA 05 F1 | 	add	result1, #8
36d34     FD FA 01 FB | 	rdlong	result1, result1
36d38     10 FA 45 F5 | 	or	result1, #16
36d3c     08 18 06 F1 | 	add	arg04, #8
36d40     0C FB 61 FC | 	wrlong	result1, arg04
36d44                 | LR__5331
36d44                 | '         fil->state |=  (0x10) ;
36d44                 | '     }
36d44                 | '     return x;
36d44     18 4E 05 F1 | 	add	fp, #24
36d48     A7 FA 01 FB | 	rdlong	result1, fp
36d4c     18 4E 85 F1 | 	sub	fp, #24
36d50                 | LR__5332
36d50     A7 F0 03 F6 | 	mov	ptra, fp
36d54     B2 00 A0 FD | 	call	#popregs_
36d58                 | _fatfs_cc_v_read_ret
36d58     2D 00 64 FD | 	ret
36d5c                 | 
36d5c                 | _fatfs_cc_v_write
36d5c     00 4A 05 F6 | 	mov	COUNT_, #0
36d60     A8 00 A0 FD | 	call	#pushregs_
36d64     1C F0 07 F1 | 	add	ptra, #28
36d68     04 4E 05 F1 | 	add	fp, #4
36d6c     A7 12 62 FC | 	wrlong	arg01, fp
36d70     04 4E 05 F1 | 	add	fp, #4
36d74     A7 14 62 FC | 	wrlong	arg02, fp
36d78     04 4E 05 F1 | 	add	fp, #4
36d7c     A7 16 62 FC | 	wrlong	arg03, fp
36d80     08 4E 85 F1 | 	sub	fp, #8
36d84     A7 12 02 FB | 	rdlong	arg01, fp
36d88     09 13 0A FB | 	rdlong	arg01, arg01 wz
36d8c     0C 4E 05 F1 | 	add	fp, #12
36d90     A7 12 62 FC | 	wrlong	arg01, fp
36d94     10 4E 85 F1 | 	sub	fp, #16
36d98                 | '         return _seterror( 5 );
36d98     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36d9c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36da0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36da4     01 FA 65 A6 |  if_e	neg	result1, #1
36da8     84 00 90 AD |  if_e	jmp	#LR__5341
36dac     10 4E 05 F1 | 	add	fp, #16
36db0     A7 12 02 FB | 	rdlong	arg01, fp
36db4     02 00 00 FF 
36db8     14 12 06 F1 | 	add	arg01, ##1044
36dbc     08 4E 85 F1 | 	sub	fp, #8
36dc0     A7 14 02 FB | 	rdlong	arg02, fp
36dc4     04 4E 05 F1 | 	add	fp, #4
36dc8     A7 16 02 FB | 	rdlong	arg03, fp
36dcc     0C 4E 05 F1 | 	add	fp, #12
36dd0     A7 18 02 F6 | 	mov	arg04, fp
36dd4     18 4E 85 F1 | 	sub	fp, #24
36dd8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
36ddc     14 4E 05 F1 | 	add	fp, #20
36de0     A7 FA 61 FC | 	wrlong	result1, fp
36de4     14 4E 85 F1 | 	sub	fp, #20
36de8     00 FA 0D F2 | 	cmp	result1, #0 wz
36dec     34 00 90 AD |  if_e	jmp	#LR__5340
36df0     04 4E 05 F1 | 	add	fp, #4
36df4     A7 18 02 FB | 	rdlong	arg04, fp
36df8     0C 17 02 F6 | 	mov	arg03, arg04
36dfc     08 18 06 F1 | 	add	arg04, #8
36e00     0C 19 02 FB | 	rdlong	arg04, arg04
36e04     20 18 46 F5 | 	or	arg04, #32
36e08     08 16 06 F1 | 	add	arg03, #8
36e0c     0B 19 62 FC | 	wrlong	arg04, arg03
36e10                 | '         fil->state |=  (0x20) ;
36e10                 | '         return _set_dos_error(r);
36e10     10 4E 05 F1 | 	add	fp, #16
36e14     A7 12 02 FB | 	rdlong	arg01, fp
36e18     14 4E 85 F1 | 	sub	fp, #20
36e1c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36e20     0C 00 90 FD | 	jmp	#LR__5341
36e24                 | LR__5340
36e24                 | '     }
36e24                 | '     return x;
36e24     18 4E 05 F1 | 	add	fp, #24
36e28     A7 FA 01 FB | 	rdlong	result1, fp
36e2c     18 4E 85 F1 | 	sub	fp, #24
36e30                 | LR__5341
36e30     A7 F0 03 F6 | 	mov	ptra, fp
36e34     B2 00 A0 FD | 	call	#popregs_
36e38                 | _fatfs_cc_v_write_ret
36e38     2D 00 64 FD | 	ret
36e3c                 | 
36e3c                 | _fatfs_cc_v_lseek
36e3c     04 4A 05 F6 | 	mov	COUNT_, #4
36e40     A8 00 A0 FD | 	call	#pushregs_
36e44     0A 27 02 F6 | 	mov	local01, arg02
36e48     0B 29 02 F6 | 	mov	local02, arg03
36e4c     09 2B 02 FB | 	rdlong	local03, arg01
36e50     02 00 00 FF 
36e54     14 2A 0E F1 | 	add	local03, ##1044 wz
36e58                 | '         return _seterror( 5 );
36e58     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36e5c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36e60     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36e64     01 FA 65 A6 |  if_e	neg	result1, #1
36e68     4C 00 90 AD |  if_e	jmp	#LR__5352
36e6c     00 28 0E F2 | 	cmp	local02, #0 wz
36e70     24 00 90 AD |  if_e	jmp	#LR__5350
36e74     01 28 0E F2 | 	cmp	local02, #1 wz
36e78     14 2A 06 A1 |  if_e	add	local03, #20
36e7c     15 2D 02 AB |  if_e	rdlong	local04, local03
36e80     14 2A 86 A1 |  if_e	sub	local03, #20
36e84     16 27 02 A1 |  if_e	add	local01, local04
36e88     0C 2A 06 51 |  if_ne	add	local03, #12
36e8c     15 2D 02 5B |  if_ne	rdlong	local04, local03
36e90     0C 2A 86 51 |  if_ne	sub	local03, #12
36e94     16 27 02 51 |  if_ne	add	local01, local04
36e98                 | LR__5350
36e98     13 15 02 F6 | 	mov	arg02, local01
36e9c     15 13 02 F6 | 	mov	arg01, local03
36ea0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
36ea4     FD 12 0A F6 | 	mov	arg01, result1 wz
36ea8     08 00 90 AD |  if_e	jmp	#LR__5351
36eac                 | '         return _set_dos_error(result);
36eac     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36eb0     04 00 90 FD | 	jmp	#LR__5352
36eb4                 | LR__5351
36eb4                 | '     }
36eb4                 | '     return offset;
36eb4     13 FB 01 F6 | 	mov	result1, local01
36eb8                 | LR__5352
36eb8     A7 F0 03 F6 | 	mov	ptra, fp
36ebc     B2 00 A0 FD | 	call	#popregs_
36ec0                 | _fatfs_cc_v_lseek_ret
36ec0     2D 00 64 FD | 	ret
36ec4                 | 
36ec4                 | _fatfs_cc_v_ioctl
36ec4                 | ' {
36ec4                 | '     return _seterror( 10 );
36ec4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
36ec8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
36ecc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
36ed0     01 FA 65 F6 | 	neg	result1, #1
36ed4                 | _fatfs_cc_v_ioctl_ret
36ed4     2D 00 64 FD | 	ret
36ed8                 | 
36ed8                 | _fatfs_cc_v_mkdir
36ed8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
36edc     FD 12 02 F6 | 	mov	arg01, result1
36ee0                 | ' 
36ee0                 | '     r = f_mkdir(name);
36ee0                 | '     return _set_dos_error(r);
36ee0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36ee4                 | _fatfs_cc_v_mkdir_ret
36ee4     2D 00 64 FD | 	ret
36ee8                 | 
36ee8                 | _fatfs_cc_v_remove
36ee8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
36eec     FD 12 02 F6 | 	mov	arg01, result1
36ef0                 | ' 
36ef0                 | '     r = f_unlink(name);
36ef0                 | '     return _set_dos_error(r);
36ef0     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36ef4                 | _fatfs_cc_v_remove_ret
36ef4     2D 00 64 FD | 	ret
36ef8                 | 
36ef8                 | _fatfs_cc_v_rmdir
36ef8     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
36efc     FD 12 02 F6 | 	mov	arg01, result1
36f00                 | ' 
36f00                 | '     r = f_unlink(name);
36f00                 | '     return _set_dos_error(r);
36f00     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36f04                 | _fatfs_cc_v_rmdir_ret
36f04     2D 00 64 FD | 	ret
36f08                 | 
36f08                 | _fatfs_cc_v_rename
36f08     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
36f0c     FD 12 02 F6 | 	mov	arg01, result1
36f10                 | '     return _set_dos_error(r);
36f10     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36f14                 | _fatfs_cc_v_rename_ret
36f14     2D 00 64 FD | 	ret
36f18                 | 
36f18                 | _fatfs_cc_v_open
36f18     07 4A 05 F6 | 	mov	COUNT_, #7
36f1c     A8 00 A0 FD | 	call	#pushregs_
36f20     09 27 02 F6 | 	mov	local01, arg01
36f24     0A 29 02 F6 | 	mov	local02, arg02
36f28     0B 2B 02 F6 | 	mov	local03, arg03
36f2c     03 00 00 FF 
36f30     3C 12 06 F6 | 	mov	arg01, ##1596
36f34                 | '     return _gc_alloc(size);
36f34     10 14 06 F6 | 	mov	arg02, #16
36f38     90 56 BF FD | 	call	#__system___gc_doalloc
36f3c     FD 2C 0A F6 | 	mov	local04, result1 wz
36f40                 | '       return _seterror( 7 );
36f40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36f44     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
36f48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36f4c     01 FA 65 A6 |  if_e	neg	result1, #1
36f50     98 00 90 AD |  if_e	jmp	#LR__5366
36f54     16 13 02 F6 | 	mov	arg01, local04
36f58     00 14 06 F6 | 	mov	arg02, #0
36f5c     03 00 00 FF 
36f60     3C 16 06 F6 | 	mov	arg03, ##1596
36f64     98 00 A0 FD | 	call	#\builtin_bytefill_
36f68                 | '   switch (flags & 3) {
36f68     15 2F 02 F6 | 	mov	local05, local03
36f6c     03 2E 0E F5 | 	and	local05, #3 wz
36f70     0C 00 90 AD |  if_e	jmp	#LR__5360
36f74     01 2E 0E F2 | 	cmp	local05, #1 wz
36f78     0C 00 90 AD |  if_e	jmp	#LR__5361
36f7c     10 00 90 FD | 	jmp	#LR__5362
36f80                 | LR__5360
36f80     01 30 06 F6 | 	mov	local06, #1
36f84                 | '       fs_flags =  0x01 ;
36f84                 | '       break;
36f84     0C 00 90 FD | 	jmp	#LR__5363
36f88                 | LR__5361
36f88     02 30 06 F6 | 	mov	local06, #2
36f8c                 | '       fs_flags =  0x02 ;
36f8c                 | '       break;
36f8c     04 00 90 FD | 	jmp	#LR__5363
36f90                 | LR__5362
36f90     03 30 06 F6 | 	mov	local06, #3
36f94                 | '       fs_flags =  0x01  |  0x02 ;
36f94                 | '       break;
36f94                 | LR__5363
36f94     08 2A CE F7 | 	test	local03, #8 wz
36f98     18 30 46 55 |  if_ne	or	local06, #24
36f9c     08 00 90 5D |  if_ne	jmp	#LR__5364
36fa0     20 2A CE F7 | 	test	local03, #32 wz
36fa4     30 30 46 55 |  if_ne	or	local06, #48
36fa8                 | LR__5364
36fa8     02 00 00 FF 
36fac     14 2C 06 F1 | 	add	local04, ##1044
36fb0     16 13 02 F6 | 	mov	arg01, local04
36fb4     02 00 00 FF 
36fb8     14 2C 86 F1 | 	sub	local04, ##1044
36fbc     14 15 02 F6 | 	mov	arg02, local02
36fc0     18 17 02 F6 | 	mov	arg03, local06
36fc4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
36fc8     FD 32 0A F6 | 	mov	local07, result1 wz
36fcc     14 00 90 AD |  if_e	jmp	#LR__5365
36fd0     16 13 02 F6 | 	mov	arg01, local04
36fd4                 | '     return _gc_free(ptr);
36fd4     00 57 BF FD | 	call	#__system___gc_free
36fd8                 | '     free(f);
36fd8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36fd8                 | '     return _set_dos_error(r);
36fd8     19 13 02 F6 | 	mov	arg01, local07
36fdc     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
36fe0     08 00 90 FD | 	jmp	#LR__5366
36fe4                 | LR__5365
36fe4     13 2D 62 FC | 	wrlong	local04, local01
36fe8                 | '   }
36fe8                 | '   fil->vfsdata = f;
36fe8                 | '   return 0;
36fe8     00 FA 05 F6 | 	mov	result1, #0
36fec                 | LR__5366
36fec     A7 F0 03 F6 | 	mov	ptra, fp
36ff0     B2 00 A0 FD | 	call	#popregs_
36ff4                 | _fatfs_cc_v_open_ret
36ff4     2D 00 64 FD | 	ret
36ff8                 | 
36ff8                 | _fatfs_cc_v_flush
36ff8     09 13 02 FB | 	rdlong	arg01, arg01
36ffc     02 00 00 FF 
37000     14 12 0E F1 | 	add	arg01, ##1044 wz
37004                 | '         return _seterror( 5 );
37004     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
37008     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3700c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
37010     01 FA 65 A6 |  if_e	neg	result1, #1
37014     0C 00 90 AD |  if_e	jmp	#LR__5370
37018     00 DA BF FD | 	call	#_fatfs_cc_f_sync
3701c     FD 12 02 F6 | 	mov	arg01, result1
37020                 | '     }
37020                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
37020                 | '     result = f_sync(f);
37020                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
37020                 | '     return _set_dos_error(result);
37020     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1057
37024                 | LR__5370
37024                 | _fatfs_cc_v_flush_ret
37024     2D 00 64 FD | 	ret
37028                 | 
37028                 | _fatfs_cc_v_init
37028                 | ' {
37028                 | '     return 0;
37028     00 FA 05 F6 | 	mov	result1, #0
3702c                 | _fatfs_cc_v_init_ret
3702c     2D 00 64 FD | 	ret
37030                 | 
37030                 | _fatfs_cc_v_deinit
37030     BF 01 00 FF 
37034     A0 15 06 F6 | 	mov	arg02, ##@LR__5566
37038     00 12 06 F6 | 	mov	arg01, #0
3703c     00 16 06 F6 | 	mov	arg03, #0
37040     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
37044     01 00 00 FF 
37048     08 E4 05 F1 | 	add	objptr, ##520
3704c     F2 12 02 FB | 	rdlong	arg01, objptr
37050     04 E4 05 F1 | 	add	objptr, #4
37054     F2 14 02 FB | 	rdlong	arg02, objptr
37058     01 00 00 FF 
3705c     0C E4 85 F1 | 	sub	objptr, ##524
37060     E0 3D BF FD | 	call	#__system___freepins
37064                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
37064                 | '     _freepins(f_pinmask);
37064                 | '     return 0;
37064     00 FA 05 F6 | 	mov	result1, #0
37068                 | _fatfs_cc_v_deinit_ret
37068     2D 00 64 FD | 	ret
3706c                 | 
3706c                 | _fatfs_cc_get_vfs
3706c     01 4A 05 F6 | 	mov	COUNT_, #1
37070     A8 00 A0 FD | 	call	#pushregs_
37074     09 27 02 F6 | 	mov	local01, arg01
37078     50 12 06 F6 | 	mov	arg01, #80
3707c     1C 55 BF FD | 	call	#__system___gc_alloc_managed
37080     FD 12 02 F6 | 	mov	arg01, result1
37084     F2 FA 01 F6 | 	mov	result1, objptr
37088     00 D8 05 FF 
3708c     00 FA 45 F5 | 	or	result1, ##196083712
37090     09 FB 61 FC | 	wrlong	result1, arg01
37094     F2 FA 01 F6 | 	mov	result1, objptr
37098     00 E0 05 FF 
3709c     00 FA 45 F5 | 	or	result1, ##197132288
370a0     04 12 06 F1 | 	add	arg01, #4
370a4     09 FB 61 FC | 	wrlong	result1, arg01
370a8     F2 FA 01 F6 | 	mov	result1, objptr
370ac     00 E8 05 FF 
370b0     00 FA 45 F5 | 	or	result1, ##198180864
370b4     04 12 06 F1 | 	add	arg01, #4
370b8     09 FB 61 FC | 	wrlong	result1, arg01
370bc     F2 FA 01 F6 | 	mov	result1, objptr
370c0     00 F0 05 FF 
370c4     00 FA 45 F5 | 	or	result1, ##199229440
370c8     04 12 06 F1 | 	add	arg01, #4
370cc     09 FB 61 FC | 	wrlong	result1, arg01
370d0     F2 FA 01 F6 | 	mov	result1, objptr
370d4     00 F8 05 FF 
370d8     00 FA 45 F5 | 	or	result1, ##200278016
370dc     04 12 06 F1 | 	add	arg01, #4
370e0     09 FB 61 FC | 	wrlong	result1, arg01
370e4     04 12 06 F1 | 	add	arg01, #4
370e8     09 01 68 FC | 	wrlong	#0, arg01
370ec     04 12 06 F1 | 	add	arg01, #4
370f0     09 27 62 FC | 	wrlong	local01, arg01
370f4     04 12 06 F1 | 	add	arg01, #4
370f8     09 01 68 FC | 	wrlong	#0, arg01
370fc     F2 FA 01 F6 | 	mov	result1, objptr
37100     3A FA 25 F4 | 	bith	result1, #58
37104     04 12 06 F1 | 	add	arg01, #4
37108     09 FB 61 FC | 	wrlong	result1, arg01
3710c     F2 FA 01 F6 | 	mov	result1, objptr
37110     00 08 06 FF 
37114     00 FA 45 F5 | 	or	result1, ##202375168
37118     04 12 06 F1 | 	add	arg01, #4
3711c     09 FB 61 FC | 	wrlong	result1, arg01
37120     F2 FA 01 F6 | 	mov	result1, objptr
37124     00 10 06 FF 
37128     00 FA 45 F5 | 	or	result1, ##203423744
3712c     04 12 06 F1 | 	add	arg01, #4
37130     09 FB 61 FC | 	wrlong	result1, arg01
37134     F2 FA 01 F6 | 	mov	result1, objptr
37138     00 18 06 FF 
3713c     00 FA 45 F5 | 	or	result1, ##204472320
37140     04 12 06 F1 | 	add	arg01, #4
37144     09 FB 61 FC | 	wrlong	result1, arg01
37148     F2 FA 01 F6 | 	mov	result1, objptr
3714c     00 20 06 FF 
37150     00 FA 45 F5 | 	or	result1, ##205520896
37154     04 12 06 F1 | 	add	arg01, #4
37158     09 FB 61 FC | 	wrlong	result1, arg01
3715c     F2 FA 01 F6 | 	mov	result1, objptr
37160     00 28 06 FF 
37164     00 FA 45 F5 | 	or	result1, ##206569472
37168     04 12 06 F1 | 	add	arg01, #4
3716c     09 FB 61 FC | 	wrlong	result1, arg01
37170     F2 FA 01 F6 | 	mov	result1, objptr
37174     00 30 06 FF 
37178     00 FA 45 F5 | 	or	result1, ##207618048
3717c     04 12 06 F1 | 	add	arg01, #4
37180     09 FB 61 FC | 	wrlong	result1, arg01
37184     F2 FA 01 F6 | 	mov	result1, objptr
37188     00 38 06 FF 
3718c     00 FA 45 F5 | 	or	result1, ##208666624
37190     04 12 06 F1 | 	add	arg01, #4
37194     09 FB 61 FC | 	wrlong	result1, arg01
37198     F2 FA 01 F6 | 	mov	result1, objptr
3719c     00 40 06 FF 
371a0     00 FA 45 F5 | 	or	result1, ##209715200
371a4     04 12 06 F1 | 	add	arg01, #4
371a8     09 FB 61 FC | 	wrlong	result1, arg01
371ac     F2 FA 01 F6 | 	mov	result1, objptr
371b0     00 48 06 FF 
371b4     00 FA 45 F5 | 	or	result1, ##210763776
371b8     04 12 06 F1 | 	add	arg01, #4
371bc     09 FB 61 FC | 	wrlong	result1, arg01
371c0     F2 FA 01 F6 | 	mov	result1, objptr
371c4     00 50 06 FF 
371c8     00 FA 45 F5 | 	or	result1, ##211812352
371cc     04 12 06 F1 | 	add	arg01, #4
371d0     09 FB 61 FC | 	wrlong	result1, arg01
371d4     F2 FA 01 F6 | 	mov	result1, objptr
371d8     00 58 06 FF 
371dc     00 FA 45 F5 | 	or	result1, ##212860928
371e0     04 12 06 F1 | 	add	arg01, #4
371e4     09 FB 61 FC | 	wrlong	result1, arg01
371e8     4C 12 86 F1 | 	sub	arg01, #76
371ec                 | ' 
371ec                 | '     v->close = &v_close;
371ec                 | '     v->read = &v_read;
371ec                 | '     v->write = &v_write;
371ec                 | '     v->lseek = &v_lseek;
371ec                 | '     v->ioctl = &v_ioctl;
371ec                 | '     v->flush = 0;
371ec                 | '     v->vfs_data = ptr;
371ec                 | '     v->reserved = 0;
371ec                 | ' 
371ec                 | '     v->open = &v_open;
371ec                 | '     v->creat = &v_creat;
371ec                 | '     v->opendir = &v_opendir;
371ec                 | '     v->closedir = &v_closedir;
371ec                 | '     v->readdir = &v_readdir;
371ec                 | '     v->stat = &v_stat;
371ec                 | ' 
371ec                 | '     v->mkdir = &v_mkdir;
371ec                 | '     v->rmdir = &v_rmdir;
371ec                 | ' 
371ec                 | '     v->remove = &v_remove;
371ec                 | '     v->rename = &v_rename;
371ec                 | ' 
371ec                 | '     v->init = &v_init;
371ec                 | '     v->deinit = &v_deinit;
371ec                 | ' 
371ec                 | '     return v;
371ec     09 FB 01 F6 | 	mov	result1, arg01
371f0     A7 F0 03 F6 | 	mov	ptra, fp
371f4     B2 00 A0 FD | 	call	#popregs_
371f8                 | _fatfs_cc_get_vfs_ret
371f8     2D 00 64 FD | 	ret
371fc                 | 
371fc                 | _fatfs_cc_xmit_mmc_1208
371fc     01 00 00 FF 
37200     10 E4 05 F1 | 	add	objptr, ##528
37204     F2 00 02 FB | 	rdlong	_var01, objptr
37208     08 E4 05 F1 | 	add	objptr, #8
3720c     F2 02 02 FB | 	rdlong	_var02, objptr
37210     01 00 00 FF 
37214     18 E4 85 F1 | 	sub	objptr, ##536
37218     40 02 62 FD | 	dirl	_var02
3721c     28 02 64 FD | 	setq	#1
37220     09 05 02 FB | 	rdlong	_var03, arg01
37224     69 04 62 FD | 	rev	_var03
37228     1B 04 FE F9 | 	movbyts	_var03, #27
3722c     01 05 22 FC | 	wypin	_var03, _var02
37230     0A 05 02 F6 | 	mov	_var03, arg02
37234     02 14 4E F0 | 	shr	arg02, #2 wz
37238     03 04 66 F0 | 	shl	_var03, #3
3723c     00 05 22 FC | 	wypin	_var03, _var01
37240     41 02 62 FD | 	dirh	_var02
37244     08 12 06 F1 | 	add	arg01, #8
37248     69 06 62 FD | 	rev	_var04
3724c     1B 06 FE F9 | 	movbyts	_var04, #27
37250                 | LR__5380
37250     01 07 22 5C |  if_ne	wypin	_var04, _var02
37254     09 07 02 5B |  if_ne	rdlong	_var04, arg01
37258     04 12 06 51 |  if_ne	add	arg01, #4
3725c     69 06 62 5D |  if_ne	rev	_var04
37260     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
37264                 | LR__5381
37264     40 02 72 5D |  if_ne	testp	_var02 wc
37268     F8 FF 9F 1D |  if_a	jmp	#LR__5381
3726c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5380
37270                 | LR__5382
37270     40 00 72 FD | 	testp	_var01 wc
37274     F8 FF 9F 3D |  if_ae	jmp	#LR__5382
37278     40 02 62 FD | 	dirl	_var02
3727c     FF FF FF FF 
37280     01 FF 2B FC | 	wypin	##-1, _var02
37284     41 02 62 FD | 	dirh	_var02
37288                 | _fatfs_cc_xmit_mmc_1208_ret
37288     2D 00 64 FD | 	ret
3728c                 | 
3728c                 | _fatfs_cc_rcvr_mmc_1215
3728c     01 00 00 FF 
37290     10 E4 05 F1 | 	add	objptr, ##528
37294     F2 00 02 FB | 	rdlong	_var01, objptr
37298     0C E4 05 F1 | 	add	objptr, #12
3729c     F2 02 02 FB | 	rdlong	_var02, objptr
372a0     01 00 00 FF 
372a4     1C E4 85 F1 | 	sub	objptr, ##540
372a8     01 03 08 FC | 	akpin	_var02
372ac     0A 05 0A F6 | 	mov	_var03, arg02 wz
372b0     02 04 4E F0 | 	shr	_var03, #2 wz
372b4     30 00 90 AD |  if_e	jmp	#LR__5392
372b8     02 07 02 F6 | 	mov	_var04, _var03
372bc     05 06 66 F0 | 	shl	_var04, #5
372c0     00 07 22 FC | 	wypin	_var04, _var01
372c4     01 7F 18 FC | 	wxpin	#63, _var02
372c8                 | LR__5390
372c8                 | LR__5391
372c8     40 02 72 FD | 	testp	_var02 wc
372cc     F8 FF 9F 3D |  if_ae	jmp	#LR__5391
372d0     01 07 8A FA | 	rdpin	_var04, _var02
372d4     69 06 62 FD | 	rev	_var04
372d8     1B 06 FE F9 | 	movbyts	_var04, #27
372dc     09 07 62 FC | 	wrlong	_var04, arg01
372e0     04 12 06 F1 | 	add	arg01, #4
372e4     F8 05 6E FB | 	djnz	_var03, #LR__5390
372e8                 | LR__5392
372e8     03 14 0E F5 | 	and	arg02, #3 wz
372ec     24 00 90 AD |  if_e	jmp	#LR__5395
372f0     01 4F 18 FC | 	wxpin	#39, _var02
372f4                 | LR__5393
372f4     00 11 28 FC | 	wypin	#8, _var01
372f8                 | LR__5394
372f8     40 02 72 FD | 	testp	_var02 wc
372fc     F8 FF 9F 3D |  if_ae	jmp	#LR__5394
37300     01 07 8A FA | 	rdpin	_var04, _var02
37304     69 06 62 FD | 	rev	_var04
37308     09 07 42 FC | 	wrbyte	_var04, arg01
3730c     01 12 06 F1 | 	add	arg01, #1
37310     F8 15 6E FB | 	djnz	arg02, #LR__5393
37314                 | LR__5395
37314                 | _fatfs_cc_rcvr_mmc_1215_ret
37314     2D 00 64 FD | 	ret
37318                 | 
37318                 | _fatfs_cc_wait_ready_1219
37318     01 4A 05 F6 | 	mov	COUNT_, #1
3731c     A8 00 A0 FD | 	call	#pushregs_
37320     10 F0 07 F1 | 	add	ptra, #16
37324     1A FA 61 FD | 	getct	result1
37328     08 4E 05 F1 | 	add	fp, #8
3732c     A7 FA 61 FC | 	wrlong	result1, fp
37330     14 26 06 FB | 	rdlong	local01, #20
37334     01 26 46 F0 | 	shr	local01, #1
37338     04 4E 05 F1 | 	add	fp, #4
3733c     A7 26 62 FC | 	wrlong	local01, fp
37340     0C 4E 85 F1 | 	sub	fp, #12
37344                 | ' {
37344                 | ' 	BYTE d;
37344                 | ' 	UINT tmr, tmout;
37344                 | ' 
37344                 | ' 	tmr = _cnt();
37344                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
37344                 | ' 	for(;;) {
37344                 | LR__5400
37344     04 4E 05 F1 | 	add	fp, #4
37348     A7 12 02 F6 | 	mov	arg01, fp
3734c     04 4E 85 F1 | 	sub	fp, #4
37350     01 14 06 F6 | 	mov	arg02, #1
37354     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37358     04 4E 05 F1 | 	add	fp, #4
3735c     A7 26 C2 FA | 	rdbyte	local01, fp
37360     04 4E 85 F1 | 	sub	fp, #4
37364     FF 26 0E F2 | 	cmp	local01, #255 wz
37368     01 FA 05 A6 |  if_e	mov	result1, #1
3736c     28 00 90 AD |  if_e	jmp	#LR__5401
37370     1A FA 61 FD | 	getct	result1
37374     08 4E 05 F1 | 	add	fp, #8
37378     A7 26 02 FB | 	rdlong	local01, fp
3737c     13 FB 81 F1 | 	sub	result1, local01
37380     04 4E 05 F1 | 	add	fp, #4
37384     A7 26 02 FB | 	rdlong	local01, fp
37388     0C 4E 85 F1 | 	sub	fp, #12
3738c     13 FB 11 F2 | 	cmp	result1, local01 wc
37390     00 FA 05 36 |  if_ae	mov	result1, #0
37394     AC FF 9F CD |  if_b	jmp	#LR__5400
37398                 | LR__5401
37398     A7 F0 03 F6 | 	mov	ptra, fp
3739c     B2 00 A0 FD | 	call	#popregs_
373a0                 | _fatfs_cc_wait_ready_1219_ret
373a0     2D 00 64 FD | 	ret
373a4                 | 
373a4                 | _fatfs_cc_deselect_1225
373a4     00 4A 05 F6 | 	mov	COUNT_, #0
373a8     A8 00 A0 FD | 	call	#pushregs_
373ac     14 F0 07 F1 | 	add	ptra, #20
373b0     01 00 00 FF 
373b4     14 E4 05 F1 | 	add	objptr, ##532
373b8     F2 14 02 FB | 	rdlong	arg02, objptr
373bc     04 4E 05 F1 | 	add	fp, #4
373c0     A7 14 62 FC | 	wrlong	arg02, fp
373c4     04 E4 85 F1 | 	sub	objptr, #4
373c8     F2 14 02 FB | 	rdlong	arg02, objptr
373cc     04 4E 05 F1 | 	add	fp, #4
373d0     A7 14 62 FC | 	wrlong	arg02, fp
373d4     08 E4 05 F1 | 	add	objptr, #8
373d8     F2 14 02 FB | 	rdlong	arg02, objptr
373dc     04 4E 05 F1 | 	add	fp, #4
373e0     A7 14 62 FC | 	wrlong	arg02, fp
373e4     04 E4 05 F1 | 	add	objptr, #4
373e8     F2 14 02 FB | 	rdlong	arg02, objptr
373ec     01 00 00 FF 
373f0     1C E4 85 F1 | 	sub	objptr, ##540
373f4     04 4E 05 F1 | 	add	fp, #4
373f8     A7 14 62 FC | 	wrlong	arg02, fp
373fc     0C 4E 85 F1 | 	sub	fp, #12
37400     A7 12 02 FB | 	rdlong	arg01, fp
37404     04 4E 85 F1 | 	sub	fp, #4
37408     59 12 62 FD | 	drvh	arg01
3740c     1F 20 64 FD | 	waitx	#16
37410     A7 12 02 F6 | 	mov	arg01, fp
37414     01 14 06 F6 | 	mov	arg02, #1
37418     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
3741c     A7 F0 03 F6 | 	mov	ptra, fp
37420     B2 00 A0 FD | 	call	#popregs_
37424                 | _fatfs_cc_deselect_1225_ret
37424     2D 00 64 FD | 	ret
37428                 | 
37428                 | _fatfs_cc_select_1229
37428     00 4A 05 F6 | 	mov	COUNT_, #0
3742c     A8 00 A0 FD | 	call	#pushregs_
37430     10 F0 07 F1 | 	add	ptra, #16
37434     01 00 00 FF 
37438     14 E4 05 F1 | 	add	objptr, ##532
3743c     F2 14 02 FB | 	rdlong	arg02, objptr
37440     08 4E 05 F1 | 	add	fp, #8
37444     A7 14 62 FC | 	wrlong	arg02, fp
37448     08 E4 05 F1 | 	add	objptr, #8
3744c     F2 12 02 FB | 	rdlong	arg01, objptr
37450     01 00 00 FF 
37454     1C E4 85 F1 | 	sub	objptr, ##540
37458     04 4E 05 F1 | 	add	fp, #4
3745c     A7 12 62 FC | 	wrlong	arg01, fp
37460     50 12 62 FD | 	fltl	arg01
37464     04 4E 85 F1 | 	sub	fp, #4
37468     A7 12 02 FB | 	rdlong	arg01, fp
3746c     58 12 62 FD | 	drvl	arg01
37470     1F 20 64 FD | 	waitx	#16
37474     04 4E 05 F1 | 	add	fp, #4
37478     A7 12 02 FB | 	rdlong	arg01, fp
3747c     41 12 62 FD | 	dirh	arg01
37480     08 4E 85 F1 | 	sub	fp, #8
37484     A7 12 02 F6 | 	mov	arg01, fp
37488     04 4E 85 F1 | 	sub	fp, #4
3748c     01 14 06 F6 | 	mov	arg02, #1
37490     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37494     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1219
37498     00 FA 0D F2 | 	cmp	result1, #0 wz
3749c     01 FA 05 56 |  if_ne	mov	result1, #1
374a0     08 00 90 5D |  if_ne	jmp	#LR__5410
374a4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1225
374a8                 | ' 
374a8                 | ' 	deselect();
374a8                 | ' 	return 0;
374a8     00 FA 05 F6 | 	mov	result1, #0
374ac                 | LR__5410
374ac     A7 F0 03 F6 | 	mov	ptra, fp
374b0     B2 00 A0 FD | 	call	#popregs_
374b4                 | _fatfs_cc_select_1229_ret
374b4     2D 00 64 FD | 	ret
374b8                 | 
374b8                 | _fatfs_cc_rcvr_datablock_1233
374b8     01 4A 05 F6 | 	mov	COUNT_, #1
374bc     A8 00 A0 FD | 	call	#pushregs_
374c0     18 F0 07 F1 | 	add	ptra, #24
374c4     04 4E 05 F1 | 	add	fp, #4
374c8     A7 12 62 FC | 	wrlong	arg01, fp
374cc     04 4E 05 F1 | 	add	fp, #4
374d0     A7 14 62 FC | 	wrlong	arg02, fp
374d4     1A FA 61 FD | 	getct	result1
374d8     08 4E 05 F1 | 	add	fp, #8
374dc     A7 FA 61 FC | 	wrlong	result1, fp
374e0     14 26 06 FB | 	rdlong	local01, #20
374e4     03 26 46 F0 | 	shr	local01, #3
374e8     04 4E 05 F1 | 	add	fp, #4
374ec     A7 26 62 FC | 	wrlong	local01, fp
374f0     14 4E 85 F1 | 	sub	fp, #20
374f4                 | ' 	BYTE *buff,
374f4                 | ' 	UINT btr
374f4                 | ' )
374f4                 | ' {
374f4                 | ' 	BYTE d[2];
374f4                 | ' 	UINT tmr, tmout;
374f4                 | ' 
374f4                 | ' 	tmr = _cnt();
374f4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
374f4                 | ' 	for(;;) {
374f4                 | LR__5420
374f4     0C 4E 05 F1 | 	add	fp, #12
374f8     A7 12 02 F6 | 	mov	arg01, fp
374fc     0C 4E 85 F1 | 	sub	fp, #12
37500     01 14 06 F6 | 	mov	arg02, #1
37504     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37508     0C 4E 05 F1 | 	add	fp, #12
3750c     A7 26 C2 FA | 	rdbyte	local01, fp
37510     0C 4E 85 F1 | 	sub	fp, #12
37514     FF 26 0E F2 | 	cmp	local01, #255 wz
37518     28 00 90 5D |  if_ne	jmp	#LR__5421
3751c     1A FA 61 FD | 	getct	result1
37520     FD 26 02 F6 | 	mov	local01, result1
37524     10 4E 05 F1 | 	add	fp, #16
37528     A7 14 02 FB | 	rdlong	arg02, fp
3752c     0A 27 82 F1 | 	sub	local01, arg02
37530     04 4E 05 F1 | 	add	fp, #4
37534     A7 14 02 FB | 	rdlong	arg02, fp
37538     14 4E 85 F1 | 	sub	fp, #20
3753c     0A 27 12 F2 | 	cmp	local01, arg02 wc
37540     B0 FF 9F CD |  if_b	jmp	#LR__5420
37544                 | LR__5421
37544     0C 4E 05 F1 | 	add	fp, #12
37548     A7 26 C2 FA | 	rdbyte	local01, fp
3754c     0C 4E 85 F1 | 	sub	fp, #12
37550     FE 26 0E F2 | 	cmp	local01, #254 wz
37554     00 FA 05 56 |  if_ne	mov	result1, #0
37558     30 00 90 5D |  if_ne	jmp	#LR__5422
3755c     04 4E 05 F1 | 	add	fp, #4
37560     A7 12 02 FB | 	rdlong	arg01, fp
37564     04 4E 05 F1 | 	add	fp, #4
37568     A7 14 02 FB | 	rdlong	arg02, fp
3756c     08 4E 85 F1 | 	sub	fp, #8
37570     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37574     0C 4E 05 F1 | 	add	fp, #12
37578     A7 12 02 F6 | 	mov	arg01, fp
3757c     0C 4E 85 F1 | 	sub	fp, #12
37580     02 14 06 F6 | 	mov	arg02, #2
37584     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37588                 | ' 
37588                 | ' 	rcvr_mmc(buff, btr);
37588                 | ' 	rcvr_mmc(d, 2);
37588                 | ' 
37588                 | ' 	return 1;
37588     01 FA 05 F6 | 	mov	result1, #1
3758c                 | LR__5422
3758c     A7 F0 03 F6 | 	mov	ptra, fp
37590     B2 00 A0 FD | 	call	#popregs_
37594                 | _fatfs_cc_rcvr_datablock_1233_ret
37594     2D 00 64 FD | 	ret
37598                 | 
37598                 | _fatfs_cc_xmit_datablock_1235
37598     00 4A 05 F6 | 	mov	COUNT_, #0
3759c     A8 00 A0 FD | 	call	#pushregs_
375a0     10 F0 07 F1 | 	add	ptra, #16
375a4     04 4E 05 F1 | 	add	fp, #4
375a8     A7 12 62 FC | 	wrlong	arg01, fp
375ac     04 4E 05 F1 | 	add	fp, #4
375b0     A7 14 42 FC | 	wrbyte	arg02, fp
375b4     08 4E 85 F1 | 	sub	fp, #8
375b8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1219
375bc     00 FA 0D F2 | 	cmp	result1, #0 wz
375c0     00 FA 05 A6 |  if_e	mov	result1, #0
375c4     90 00 90 AD |  if_e	jmp	#LR__5431
375c8     08 4E 05 F1 | 	add	fp, #8
375cc     A7 14 C2 FA | 	rdbyte	arg02, fp
375d0     04 4E 05 F1 | 	add	fp, #4
375d4     A7 14 42 FC | 	wrbyte	arg02, fp
375d8     A7 12 02 F6 | 	mov	arg01, fp
375dc     0C 4E 85 F1 | 	sub	fp, #12
375e0     01 14 06 F6 | 	mov	arg02, #1
375e4     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1208
375e8     08 4E 05 F1 | 	add	fp, #8
375ec     A7 14 C2 FA | 	rdbyte	arg02, fp
375f0     08 4E 85 F1 | 	sub	fp, #8
375f4     FD 14 0E F2 | 	cmp	arg02, #253 wz
375f8     58 00 90 AD |  if_e	jmp	#LR__5430
375fc     04 4E 05 F1 | 	add	fp, #4
37600     A7 12 02 FB | 	rdlong	arg01, fp
37604     04 4E 85 F1 | 	sub	fp, #4
37608     09 14 C6 F9 | 	decod	arg02, #9
3760c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1208
37610     0C 4E 05 F1 | 	add	fp, #12
37614     A7 12 02 F6 | 	mov	arg01, fp
37618     0C 4E 85 F1 | 	sub	fp, #12
3761c     02 14 06 F6 | 	mov	arg02, #2
37620     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37624     0C 4E 05 F1 | 	add	fp, #12
37628     A7 12 02 F6 | 	mov	arg01, fp
3762c     0C 4E 85 F1 | 	sub	fp, #12
37630     01 14 06 F6 | 	mov	arg02, #1
37634     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37638     0C 4E 05 F1 | 	add	fp, #12
3763c     A7 14 C2 FA | 	rdbyte	arg02, fp
37640     0C 4E 85 F1 | 	sub	fp, #12
37644     1F 14 06 F5 | 	and	arg02, #31
37648     05 14 0E F2 | 	cmp	arg02, #5 wz
3764c                 | ' 			return 0;
3764c     00 FA 05 56 |  if_ne	mov	result1, #0
37650     04 00 90 5D |  if_ne	jmp	#LR__5431
37654                 | LR__5430
37654                 | ' 	}
37654                 | ' 
37654                 | ' 	return 1;
37654     01 FA 05 F6 | 	mov	result1, #1
37658                 | LR__5431
37658     A7 F0 03 F6 | 	mov	ptra, fp
3765c     B2 00 A0 FD | 	call	#popregs_
37660                 | _fatfs_cc_xmit_datablock_1235_ret
37660     2D 00 64 FD | 	ret
37664                 | 
37664                 | _fatfs_cc_send_cmd_1239
37664     01 4A 05 F6 | 	mov	COUNT_, #1
37668     A8 00 A0 FD | 	call	#pushregs_
3766c     1C F0 07 F1 | 	add	ptra, #28
37670                 | _fatfs_cc_send_cmd_1239_enter
37670     04 4E 05 F1 | 	add	fp, #4
37674     A7 12 42 FC | 	wrbyte	arg01, fp
37678     04 4E 05 F1 | 	add	fp, #4
3767c     A7 14 62 FC | 	wrlong	arg02, fp
37680     04 4E 85 F1 | 	sub	fp, #4
37684     A7 FA C1 FA | 	rdbyte	result1, fp
37688     04 4E 85 F1 | 	sub	fp, #4
3768c     80 FA CD F7 | 	test	result1, #128 wz
37690     44 00 90 AD |  if_e	jmp	#LR__5440
37694     04 4E 05 F1 | 	add	fp, #4
37698     A7 14 C2 FA | 	rdbyte	arg02, fp
3769c     7F 14 06 F5 | 	and	arg02, #127
376a0     A7 14 42 FC | 	wrbyte	arg02, fp
376a4     04 4E 85 F1 | 	sub	fp, #4
376a8     37 12 06 F6 | 	mov	arg01, #55
376ac     00 14 06 F6 | 	mov	arg02, #0
376b0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1239
376b4     0C 4E 05 F1 | 	add	fp, #12
376b8     A7 FA 41 FC | 	wrbyte	result1, fp
376bc     A7 14 C2 FA | 	rdbyte	arg02, fp
376c0     0C 4E 85 F1 | 	sub	fp, #12
376c4     02 14 16 F2 | 	cmp	arg02, #2 wc
376c8     0C 4E 05 31 |  if_ae	add	fp, #12
376cc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
376d0     0C 4E 85 31 |  if_ae	sub	fp, #12
376d4     6C 01 90 3D |  if_ae	jmp	#LR__5444
376d8                 | LR__5440
376d8     04 4E 05 F1 | 	add	fp, #4
376dc     A7 14 C2 FA | 	rdbyte	arg02, fp
376e0     04 4E 85 F1 | 	sub	fp, #4
376e4     0C 14 0E F2 | 	cmp	arg02, #12 wz
376e8     14 00 90 AD |  if_e	jmp	#LR__5441
376ec     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1225
376f0     34 FD BF FD | 	call	#_fatfs_cc_select_1229
376f4     00 FA 0D F2 | 	cmp	result1, #0 wz
376f8     FF FA 05 A6 |  if_e	mov	result1, #255
376fc     44 01 90 AD |  if_e	jmp	#LR__5444
37700                 | LR__5441
37700     04 4E 05 F1 | 	add	fp, #4
37704     A7 14 C2 FA | 	rdbyte	arg02, fp
37708     40 FA 05 F6 | 	mov	result1, #64
3770c     0A FB 41 F5 | 	or	result1, arg02
37710     10 4E 05 F1 | 	add	fp, #16
37714     A7 FA 41 FC | 	wrbyte	result1, fp
37718     0C 4E 85 F1 | 	sub	fp, #12
3771c     A7 FA 01 FB | 	rdlong	result1, fp
37720     18 FA 45 F0 | 	shr	result1, #24
37724     0D 4E 05 F1 | 	add	fp, #13
37728     A7 FA 41 FC | 	wrbyte	result1, fp
3772c     0D 4E 85 F1 | 	sub	fp, #13
37730     A7 FA 01 FB | 	rdlong	result1, fp
37734     10 FA 45 F0 | 	shr	result1, #16
37738     0E 4E 05 F1 | 	add	fp, #14
3773c     A7 FA 41 FC | 	wrbyte	result1, fp
37740     0E 4E 85 F1 | 	sub	fp, #14
37744     A7 FA 01 FB | 	rdlong	result1, fp
37748     08 FA 45 F0 | 	shr	result1, #8
3774c     0F 4E 05 F1 | 	add	fp, #15
37750     A7 FA 41 FC | 	wrbyte	result1, fp
37754     0F 4E 85 F1 | 	sub	fp, #15
37758     A7 FA 01 FB | 	rdlong	result1, fp
3775c     10 4E 05 F1 | 	add	fp, #16
37760     A7 FA 41 FC | 	wrbyte	result1, fp
37764     0C 4E 85 F1 | 	sub	fp, #12
37768     A7 02 48 FC | 	wrbyte	#1, fp
3776c     08 4E 85 F1 | 	sub	fp, #8
37770     A7 FA C9 FA | 	rdbyte	result1, fp wz
37774     04 4E 85 F1 | 	sub	fp, #4
37778     0C 4E 05 A1 |  if_e	add	fp, #12
3777c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
37780     0C 4E 85 A1 |  if_e	sub	fp, #12
37784     04 4E 05 F1 | 	add	fp, #4
37788     A7 FA C1 FA | 	rdbyte	result1, fp
3778c     04 4E 85 F1 | 	sub	fp, #4
37790     08 FA 0D F2 | 	cmp	result1, #8 wz
37794     0C 4E 05 A1 |  if_e	add	fp, #12
37798     A7 0E 49 AC |  if_e	wrbyte	#135, fp
3779c     0C 4E 85 A1 |  if_e	sub	fp, #12
377a0     0C 4E 05 F1 | 	add	fp, #12
377a4     A7 14 C2 FA | 	rdbyte	arg02, fp
377a8     0D 4E 05 F1 | 	add	fp, #13
377ac     A7 14 42 FC | 	wrbyte	arg02, fp
377b0     05 4E 85 F1 | 	sub	fp, #5
377b4     A7 12 02 F6 | 	mov	arg01, fp
377b8     14 4E 85 F1 | 	sub	fp, #20
377bc     06 14 06 F6 | 	mov	arg02, #6
377c0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1208
377c4     04 4E 05 F1 | 	add	fp, #4
377c8     A7 26 C2 FA | 	rdbyte	local01, fp
377cc     04 4E 85 F1 | 	sub	fp, #4
377d0     0C 26 0E F2 | 	cmp	local01, #12 wz
377d4     10 4E 05 A1 |  if_e	add	fp, #16
377d8     A7 12 02 A6 |  if_e	mov	arg01, fp
377dc     10 4E 85 A1 |  if_e	sub	fp, #16
377e0     01 14 06 A6 |  if_e	mov	arg02, #1
377e4     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1215
377e8     0C 4E 05 F1 | 	add	fp, #12
377ec     A7 14 48 FC | 	wrbyte	#10, fp
377f0     0C 4E 85 F1 | 	sub	fp, #12
377f4                 | ' 	n = 10;
377f4                 | ' 	do
377f4                 | LR__5442
377f4     10 4E 05 F1 | 	add	fp, #16
377f8     A7 12 02 F6 | 	mov	arg01, fp
377fc     10 4E 85 F1 | 	sub	fp, #16
37800     01 14 06 F6 | 	mov	arg02, #1
37804     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1215
37808     10 4E 05 F1 | 	add	fp, #16
3780c     A7 26 C2 FA | 	rdbyte	local01, fp
37810     10 4E 85 F1 | 	sub	fp, #16
37814     80 26 CE F7 | 	test	local01, #128 wz
37818     1C 00 90 AD |  if_e	jmp	#LR__5443
3781c     0C 4E 05 F1 | 	add	fp, #12
37820     A7 26 C2 FA | 	rdbyte	local01, fp
37824     01 26 86 F1 | 	sub	local01, #1
37828     A7 26 42 FC | 	wrbyte	local01, fp
3782c     A7 26 CA FA | 	rdbyte	local01, fp wz
37830     0C 4E 85 F1 | 	sub	fp, #12
37834     BC FF 9F 5D |  if_ne	jmp	#LR__5442
37838                 | LR__5443
37838                 | ' 
37838                 | ' 	return d;
37838     10 4E 05 F1 | 	add	fp, #16
3783c     A7 FA C1 FA | 	rdbyte	result1, fp
37840     10 4E 85 F1 | 	sub	fp, #16
37844                 | LR__5444
37844     A7 F0 03 F6 | 	mov	ptra, fp
37848     B2 00 A0 FD | 	call	#popregs_
3784c                 | _fatfs_cc_send_cmd_1239_ret
3784c     2D 00 64 FD | 	ret
37850                 | 
37850                 | _fatfs_cc_disk_deinitialize
37850     03 4A 05 F6 | 	mov	COUNT_, #3
37854     A8 00 A0 FD | 	call	#pushregs_
37858     00 12 4E F2 | 	cmps	arg01, #0 wz
3785c     01 00 00 FF 
37860     14 E4 05 F1 | 	add	objptr, ##532
37864     F2 12 02 FB | 	rdlong	arg01, objptr
37868     04 E4 85 F1 | 	sub	objptr, #4
3786c     F2 26 02 FB | 	rdlong	local01, objptr
37870     08 E4 05 F1 | 	add	objptr, #8
37874     F2 28 02 FB | 	rdlong	local02, objptr
37878     04 E4 05 F1 | 	add	objptr, #4
3787c     F2 2A 02 FB | 	rdlong	local03, objptr
37880     01 00 00 FF 
37884     1C E4 85 F1 | 	sub	objptr, ##540
37888                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
37888                 | '         return RES_NOTRDY;
37888     03 FA 05 56 |  if_ne	mov	result1, #3
3788c     2C 00 90 5D |  if_ne	jmp	#LR__5450
37890     50 12 62 FD | 	fltl	arg01
37894     09 01 08 FC | 	wrpin	#0, arg01
37898     50 26 62 FD | 	fltl	local01
3789c     13 01 08 FC | 	wrpin	#0, local01
378a0     50 28 62 FD | 	fltl	local02
378a4     14 01 08 FC | 	wrpin	#0, local02
378a8     50 2A 62 FD | 	fltl	local03
378ac     15 01 08 FC | 	wrpin	#0, local03
378b0     0A 12 06 F6 | 	mov	arg01, #10
378b4     30 0E BF FD | 	call	#__system___waitms
378b8                 | '     }
378b8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
378b8                 | '     _pinclear(PIN_SS);
378b8                 | '     _pinclear(PIN_CLK);
378b8                 | '     _pinclear(PIN_DI);
378b8                 | '     _pinclear(PIN_DO);
378b8                 | ' 
378b8                 | '     _waitms(10);
378b8                 | ' 
378b8                 | '     return 0;
378b8     00 FA 05 F6 | 	mov	result1, #0
378bc                 | LR__5450
378bc     A7 F0 03 F6 | 	mov	ptra, fp
378c0     B2 00 A0 FD | 	call	#popregs_
378c4                 | _fatfs_cc_disk_deinitialize_ret
378c4     2D 00 64 FD | 	ret
378c8                 | 
378c8                 | _fatfs_cc_gettimeofday
378c8     04 4A 05 F6 | 	mov	COUNT_, #4
378cc     A8 00 A0 FD | 	call	#pushregs_
378d0     09 27 02 F6 | 	mov	local01, arg01
378d4     7C 09 BF FD | 	call	#__system___getus
378d8     FD 12 02 F6 | 	mov	arg01, result1
378dc     02 00 00 FF 
378e0     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
378e4     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
378e8     09 FB 01 F6 | 	mov	result1, arg01
378ec     14 FB 81 F1 | 	sub	result1, local02
378f0     A1 07 00 FF 
378f4     40 FA 15 FD | 	qdiv	result1, ##1000000
378f8     02 00 00 FF 
378fc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
37900     18 28 62 FD | 	getqx	local02
37904     A1 07 00 FF 
37908     40 FA 15 FD | 	qdiv	result1, ##1000000
3790c     00 28 0E F2 | 	cmp	local02, #0 wz
37910     19 2A 62 FD | 	getqy	local03
37914     28 00 90 AD |  if_e	jmp	#LR__5460
37918     02 00 00 FF 
3791c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
37920     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
37924     14 2D 02 F1 | 	add	local04, local02
37928     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
3792c     15 13 82 F1 | 	sub	arg01, local03
37930     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
37934     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
37938     02 00 00 FF 
3793c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
37940                 | LR__5460
37940     02 00 00 FF 
37944     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
37948     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3794c     02 00 00 FF 
37950     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
37954     13 2D 62 FC | 	wrlong	local04, local01
37958     04 26 06 F1 | 	add	local01, #4
3795c     13 2B 62 FC | 	wrlong	local03, local01
37960                 | '         lastsec += secs;
37960                 | '         lastus = now - leftover;
37960                 | '     }
37960                 | '     tv->tv_sec = lastsec;
37960                 | '     tv->tv_usec = leftover;
37960                 | '     return 0;
37960     00 FA 05 F6 | 	mov	result1, #0
37964     A7 F0 03 F6 | 	mov	ptra, fp
37968     B2 00 A0 FD | 	call	#popregs_
3796c                 | _fatfs_cc_gettimeofday_ret
3796c     2D 00 64 FD | 	ret
37970                 | 
37970                 | _fatfs_cc__is_leap_year
37970     09 FB 51 F6 | 	abs	result1, arg01 wc
37974     03 FA 05 F5 | 	and	result1, #3
37978     FD FA 89 F6 | 	negc	result1, result1 wz
3797c     38 00 90 5D |  if_ne	jmp	#LR__5471
37980     09 FB 51 F6 | 	abs	result1, arg01 wc
37984     64 FA 15 FD | 	qdiv	result1, #100
37988     19 FA 61 FD | 	getqy	result1
3798c     FD FA 89 F6 | 	negc	result1, result1 wz
37990     1C 00 90 5D |  if_ne	jmp	#LR__5470
37994     09 FB 51 F6 | 	abs	result1, arg01 wc
37998     90 FB 15 FD | 	qdiv	result1, #400
3799c                 | '       return (0 == y % 400);
3799c     00 FA 05 F6 | 	mov	result1, #0
379a0     19 00 62 FD | 	getqy	_var01
379a4     00 01 8A F6 | 	negc	_var01, _var01 wz
379a8     01 FA 05 A6 |  if_e	mov	result1, #1
379ac     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
379b0                 | LR__5470
379b0                 | '     return 1;
379b0     01 FA 05 F6 | 	mov	result1, #1
379b4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
379b8                 | LR__5471
379b8                 | '   }
379b8                 | '   return 0;
379b8     00 FA 05 F6 | 	mov	result1, #0
379bc                 | _fatfs_cc__is_leap_year_ret
379bc     2D 00 64 FD | 	ret
379c0                 | 
379c0                 | _fatfs_cc___tzoffset
379c0     09 01 0A F6 | 	mov	_var01, arg01 wz
379c4     FF FF FF FF 
379c8     0A FF 6B FC | 	wrlong	##-1, arg02
379cc     01 02 06 F6 | 	mov	_var02, #1
379d0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
379d4                 | '                 return 0;
379d4     00 FA 05 A6 |  if_e	mov	result1, #0
379d8     94 02 90 AD |  if_e	jmp	#LR__5497
379dc     0A 01 68 FC | 	wrlong	#0, arg02
379e0     02 00 00 FF 
379e4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
379e8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
379ec                 | ' 
379ec                 | '        *hasdst = 0;
379ec                 | ' 
379ec                 | ' 	n = stdname;
379ec                 | '         while (*s && isalpha(*s)) {
379ec     02 00 00 FF 
379f0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
379f4     97 28 48 FB | 	callpa	#(@LR__5481-@LR__5480)>>2,fcache_load_ptr_
379f8                 | LR__5480
379f8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
379fc     48 00 90 AD |  if_e	jmp	#LR__5482
37a00     00 13 C2 FA | 	rdbyte	arg01, _var01
37a04                 | ' {
37a04                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
37a04     80 12 36 F3 | 	fle	arg01, #128 wc
37a08                 | '     return __ctype[c];
37a08     02 00 00 FF 
37a0c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37a10     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37a14     09 FB C1 FA | 	rdbyte	result1, arg01
37a18     02 00 00 FF 
37a1c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37a20     0C FA CD F7 | 	test	result1, #12 wz
37a24     20 00 90 AD |  if_e	jmp	#LR__5482
37a28     00 09 02 F6 | 	mov	_var05, _var01
37a2c     00 0B 02 F6 | 	mov	_var06, _var01
37a30     01 0A 06 F1 | 	add	_var06, #1
37a34     04 0D C2 FA | 	rdbyte	_var07, _var05
37a38     05 01 02 F6 | 	mov	_var01, _var06
37a3c     03 0D 42 FC | 	wrbyte	_var07, _var04
37a40     01 06 06 F1 | 	add	_var04, #1
37a44     B0 FF 9F FD | 	jmp	#LR__5480
37a48                 | LR__5481
37a48                 | LR__5482
37a48     03 01 48 FC | 	wrbyte	#0, _var04
37a4c     00 0E 06 F6 | 	mov	_var08, #0
37a50     00 05 C2 FA | 	rdbyte	_var03, _var01
37a54     2D 04 0E F2 | 	cmp	_var03, #45 wz
37a58     01 02 66 A6 |  if_e	neg	_var02, #1
37a5c     01 00 06 A1 |  if_e	add	_var01, #1
37a60     97 28 48 FB | 	callpa	#(@LR__5484-@LR__5483)>>2,fcache_load_ptr_
37a64                 | '                 sgn = -1;
37a64                 | '                 s++;
37a64                 | '         }
37a64                 | '         while (isdigit(*s)) {
37a64                 | LR__5483
37a64     00 13 C2 FA | 	rdbyte	arg01, _var01
37a68                 | ' {
37a68                 | '   return  (__ctype_get(c) & 0x02 ) ;
37a68     80 12 36 F3 | 	fle	arg01, #128 wc
37a6c                 | '     return __ctype[c];
37a6c     02 00 00 FF 
37a70     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37a74     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37a78     09 FB C1 FA | 	rdbyte	result1, arg01
37a7c     02 00 00 FF 
37a80     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37a84     02 FA CD F7 | 	test	result1, #2 wz
37a88     28 00 90 AD |  if_e	jmp	#LR__5485
37a8c     07 05 02 F6 | 	mov	_var03, _var08
37a90     02 04 66 F0 | 	shl	_var03, #2
37a94     07 05 02 F1 | 	add	_var03, _var08
37a98     01 04 66 F0 | 	shl	_var03, #1
37a9c     00 09 C2 FA | 	rdbyte	_var05, _var01
37aa0     30 08 86 F1 | 	sub	_var05, #48
37aa4     04 05 02 F1 | 	add	_var03, _var05
37aa8     02 0F 02 F6 | 	mov	_var08, _var03
37aac     01 00 06 F1 | 	add	_var01, #1
37ab0     B0 FF 9F FD | 	jmp	#LR__5483
37ab4                 | LR__5484
37ab4                 | LR__5485
37ab4     07 00 00 FF 
37ab8     10 0E 06 FD | 	qmul	_var08, ##3600
37abc     00 05 C2 FA | 	rdbyte	_var03, _var01
37ac0     3A 04 0E F2 | 	cmp	_var03, #58 wz
37ac4     18 10 62 FD | 	getqx	_var09
37ac8     70 00 90 5D |  if_ne	jmp	#LR__5489
37acc     00 0E 06 F6 | 	mov	_var08, #0
37ad0     01 00 06 F1 | 	add	_var01, #1
37ad4     97 28 48 FB | 	callpa	#(@LR__5487-@LR__5486)>>2,fcache_load_ptr_
37ad8                 | '                 x = 0;
37ad8                 | '                 s++;
37ad8                 | '                 while (isdigit(*s)) {
37ad8                 | LR__5486
37ad8     00 13 C2 FA | 	rdbyte	arg01, _var01
37adc                 | ' {
37adc                 | '   return  (__ctype_get(c) & 0x02 ) ;
37adc     80 12 36 F3 | 	fle	arg01, #128 wc
37ae0                 | '     return __ctype[c];
37ae0     02 00 00 FF 
37ae4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37ae8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37aec     09 FB C1 FA | 	rdbyte	result1, arg01
37af0     02 00 00 FF 
37af4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37af8     02 FA CD F7 | 	test	result1, #2 wz
37afc     28 00 90 AD |  if_e	jmp	#LR__5488
37b00     07 05 02 F6 | 	mov	_var03, _var08
37b04     02 04 66 F0 | 	shl	_var03, #2
37b08     07 05 02 F1 | 	add	_var03, _var08
37b0c     01 04 66 F0 | 	shl	_var03, #1
37b10     00 09 C2 FA | 	rdbyte	_var05, _var01
37b14     30 08 86 F1 | 	sub	_var05, #48
37b18     04 05 02 F1 | 	add	_var03, _var05
37b1c     02 0F 02 F6 | 	mov	_var08, _var03
37b20     01 00 06 F1 | 	add	_var01, #1
37b24     B0 FF 9F FD | 	jmp	#LR__5486
37b28                 | LR__5487
37b28                 | LR__5488
37b28     07 0D 02 F6 | 	mov	_var07, _var08
37b2c     04 0C 66 F0 | 	shl	_var07, #4
37b30     07 0D 82 F1 | 	sub	_var07, _var08
37b34     02 0C 66 F0 | 	shl	_var07, #2
37b38     06 11 02 F1 | 	add	_var09, _var07
37b3c                 | LR__5489
37b3c     02 00 00 FF 
37b40     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
37b44     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
37b48     00 13 C2 FA | 	rdbyte	arg01, _var01
37b4c                 | ' {
37b4c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
37b4c     80 12 36 F3 | 	fle	arg01, #128 wc
37b50                 | '     return __ctype[c];
37b50     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
37b54     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37b58     09 FB C1 FA | 	rdbyte	result1, arg01
37b5c     02 00 00 FF 
37b60     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37b64     0C FA CD F7 | 	test	result1, #12 wz
37b68     50 00 90 AD |  if_e	jmp	#LR__5492
37b6c     0A 03 68 FC | 	wrlong	#1, arg02
37b70                 | '                 *hasdst = 1;
37b70                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
37b70                 | LR__5490
37b70     00 05 CA FA | 	rdbyte	_var03, _var01 wz
37b74     44 00 90 AD |  if_e	jmp	#LR__5491
37b78     00 13 C2 FA | 	rdbyte	arg01, _var01
37b7c                 | ' {
37b7c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
37b7c     80 12 36 F3 | 	fle	arg01, #128 wc
37b80                 | '     return __ctype[c];
37b80     02 00 00 FF 
37b84     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37b88     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37b8c     09 FB C1 FA | 	rdbyte	result1, arg01
37b90     02 00 00 FF 
37b94     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37b98     0C FA CD F7 | 	test	result1, #12 wz
37b9c     1C 00 90 AD |  if_e	jmp	#LR__5491
37ba0     00 0B 02 F6 | 	mov	_var06, _var01
37ba4     01 0A 06 F1 | 	add	_var06, #1
37ba8     00 0D C2 FA | 	rdbyte	_var07, _var01
37bac     05 01 02 F6 | 	mov	_var01, _var06
37bb0     03 0D 42 FC | 	wrbyte	_var07, _var04
37bb4     01 06 06 F1 | 	add	_var04, #1
37bb8     B4 FF 9F FD | 	jmp	#LR__5490
37bbc                 | LR__5491
37bbc                 | LR__5492
37bbc     03 01 48 FC | 	wrbyte	#0, _var04
37bc0     02 00 00 FF 
37bc4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37bc8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
37bcc     02 00 00 FF 
37bd0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
37bd4     20 00 90 AD |  if_e	jmp	#LR__5493
37bd8     02 00 00 FF 
37bdc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37be0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37be4     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
37be8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37bec     02 00 00 FF 
37bf0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
37bf4     1C 00 90 FD | 	jmp	#LR__5494
37bf8                 | LR__5493
37bf8     02 00 00 FF 
37bfc     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
37c00     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37c04     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
37c08     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37c0c     02 00 00 FF 
37c10     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
37c14                 | LR__5494
37c14     02 00 00 FF 
37c18     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
37c1c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
37c20     02 00 00 FF 
37c24     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
37c28     20 00 90 AD |  if_e	jmp	#LR__5495
37c2c     02 00 00 FF 
37c30     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
37c34     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37c38     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
37c3c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37c40     02 00 00 FF 
37c44     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
37c48     1C 00 90 FD | 	jmp	#LR__5496
37c4c                 | LR__5495
37c4c     02 00 00 FF 
37c50     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37c54     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37c58     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
37c5c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37c60     02 00 00 FF 
37c64     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
37c68                 | LR__5496
37c68     08 03 02 FD | 	qmul	_var02, _var09
37c6c                 | ' 		_tzname[1] = stdname;
37c6c                 | ' 
37c6c                 | '         return sgn * off;
37c6c     18 FA 61 FD | 	getqx	result1
37c70                 | LR__5497
37c70                 | _fatfs_cc___tzoffset_ret
37c70     2D 00 64 FD | 	ret
37c74                 | 
37c74                 | _fatfs_cc___indst
37c74     10 12 06 F1 | 	add	arg01, #16
37c78     09 01 02 FB | 	rdlong	_var01, arg01
37c7c     10 12 86 F1 | 	sub	arg01, #16
37c80     02 00 0E F2 | 	cmp	_var01, #2 wz
37c84     30 00 90 5D |  if_ne	jmp	#LR__5500
37c88     07 00 06 F6 | 	mov	_var01, #7
37c8c     18 12 06 F1 | 	add	arg01, #24
37c90     09 03 02 FB | 	rdlong	_var02, arg01
37c94     01 01 02 F1 | 	add	_var01, _var02
37c98     0C 12 86 F1 | 	sub	arg01, #12
37c9c     09 05 02 FB | 	rdlong	_var03, arg01
37ca0     02 01 82 F1 | 	sub	_var01, _var03
37ca4     00 00 56 F2 | 	cmps	_var01, #0 wc
37ca8                 | '                         return 1;
37ca8     01 FA 05 C6 |  if_b	mov	result1, #1
37cac     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
37cb0                 | '                 return 0;
37cb0     00 FA 05 F6 | 	mov	result1, #0
37cb4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
37cb8                 | LR__5500
37cb8     10 12 06 F1 | 	add	arg01, #16
37cbc     09 01 02 FB | 	rdlong	_var01, arg01
37cc0     10 12 86 F1 | 	sub	arg01, #16
37cc4     0A 00 0E F2 | 	cmp	_var01, #10 wz
37cc8     28 00 90 5D |  if_ne	jmp	#LR__5501
37ccc     18 12 06 F1 | 	add	arg01, #24
37cd0     09 01 02 FB | 	rdlong	_var01, arg01
37cd4     0C 12 86 F1 | 	sub	arg01, #12
37cd8     09 07 02 FB | 	rdlong	_var04, arg01
37cdc     03 01 82 F1 | 	sub	_var01, _var04
37ce0     00 00 56 F2 | 	cmps	_var01, #0 wc
37ce4                 | '                         return 0;
37ce4     00 FA 05 C6 |  if_b	mov	result1, #0
37ce8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
37cec                 | '                 return 1;
37cec     01 FA 05 F6 | 	mov	result1, #1
37cf0     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
37cf4                 | LR__5501
37cf4                 | '         }
37cf4                 | ' 
37cf4                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
37cf4     00 00 06 F6 | 	mov	_var01, #0
37cf8     10 12 06 F1 | 	add	arg01, #16
37cfc     09 03 02 FB | 	rdlong	_var02, arg01
37d00     10 12 86 F1 | 	sub	arg01, #16
37d04     03 02 56 F2 | 	cmps	_var02, #3 wc
37d08     10 00 90 CD |  if_b	jmp	#LR__5502
37d0c     10 12 06 F1 | 	add	arg01, #16
37d10     09 05 02 FB | 	rdlong	_var03, arg01
37d14     0A 04 56 F2 | 	cmps	_var03, #10 wc
37d18     01 00 06 C6 |  if_b	mov	_var01, #1
37d1c                 | LR__5502
37d1c     00 FB 01 F6 | 	mov	result1, _var01
37d20                 | _fatfs_cc___indst_ret
37d20     2D 00 64 FD | 	ret
37d24                 | 
37d24                 | ' 	
37d24                 | ' 	FUNCTION pfunc(c as integer) as integer
37d24                 | __system____strs_cl_pfunc_
37d24                 | ' 		if (i < 16) then
37d24     04 E4 05 F1 | 	add	objptr, #4
37d28     F2 FA 01 FB | 	rdlong	result1, objptr
37d2c     04 E4 85 F1 | 	sub	objptr, #4
37d30     10 FA 55 F2 | 	cmps	result1, #16 wc
37d34     2C 00 90 3D |  if_ae	jmp	#LR__5510
37d38     F2 FA 01 FB | 	rdlong	result1, objptr
37d3c     04 E4 05 F1 | 	add	objptr, #4
37d40     F2 00 02 FB | 	rdlong	_var01, objptr
37d44     FD 00 02 F1 | 	add	_var01, result1
37d48     00 13 42 FC | 	wrbyte	arg01, _var01
37d4c     F2 FA 01 FB | 	rdlong	result1, objptr
37d50     01 FA 05 F1 | 	add	result1, #1
37d54     F2 FA 61 FC | 	wrlong	result1, objptr
37d58     04 E4 85 F1 | 	sub	objptr, #4
37d5c                 | ' 			p(i) = c
37d5c                 | ' 			i = i+1
37d5c                 | ' 			return 1
37d5c     01 FA 05 F6 | 	mov	result1, #1
37d60     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
37d64                 | LR__5510
37d64                 | ' 			return -1
37d64     01 FA 65 F6 | 	neg	result1, #1
37d68                 | __system____strs_cl_pfunc__ret
37d68     2D 00 64 FD | 	ret
37d6c                 | 
37d6c                 | __system___struct__s_vfs_file_t_putchar_
37d6c     04 4A 05 F6 | 	mov	COUNT_, #4
37d70     A8 00 A0 FD | 	call	#pushregs_
37d74     1C E4 05 F1 | 	add	objptr, #28
37d78     F2 26 0A FB | 	rdlong	local01, objptr wz
37d7c     1C E4 85 F1 | 	sub	objptr, #28
37d80     00 FA 05 A6 |  if_e	mov	result1, #0
37d84     48 00 90 AD |  if_e	jmp	#LR__5520
37d88     1C E4 05 F1 | 	add	objptr, #28
37d8c     F2 28 02 FB | 	rdlong	local02, objptr
37d90     14 2B 02 F6 | 	mov	local03, local02
37d94     1C E4 85 F1 | 	sub	objptr, #28
37d98     13 2A 46 F7 | 	zerox	local03, #19
37d9c     14 28 46 F0 | 	shr	local02, #20
37da0     02 28 66 F0 | 	shl	local02, #2
37da4     ED 28 02 F1 | 	add	local02, __methods__
37da8     14 29 02 FB | 	rdlong	local02, local02
37dac     F2 14 02 F6 | 	mov	arg02, objptr
37db0     F2 2C 02 F6 | 	mov	local04, objptr
37db4     15 E5 01 F6 | 	mov	objptr, local03
37db8     2D 28 62 FD | 	call	local02
37dbc     16 E5 01 F6 | 	mov	objptr, local04
37dc0                 | '     return (i < 0) ? 0 : 1;
37dc0     00 FA 55 F2 | 	cmps	result1, #0 wc
37dc4     00 26 06 C6 |  if_b	mov	local01, #0
37dc8     01 26 06 36 |  if_ae	mov	local01, #1
37dcc     13 FB 01 F6 | 	mov	result1, local01
37dd0                 | LR__5520
37dd0     A7 F0 03 F6 | 	mov	ptra, fp
37dd4     B2 00 A0 FD | 	call	#popregs_
37dd8                 | __system___struct__s_vfs_file_t_putchar__ret
37dd8     2D 00 64 FD | 	ret
37ddc                 | 
37ddc                 | __system___struct__s_vfs_file_t_getchar_
37ddc     03 4A 05 F6 | 	mov	COUNT_, #3
37de0     A8 00 A0 FD | 	call	#pushregs_
37de4     20 E4 05 F1 | 	add	objptr, #32
37de8     F2 12 0A FB | 	rdlong	arg01, objptr wz
37dec     20 E4 85 F1 | 	sub	objptr, #32
37df0     01 FA 65 A6 |  if_e	neg	result1, #1
37df4     38 00 90 AD |  if_e	jmp	#LR__5530
37df8                 | '     return getcf(__this);
37df8     20 E4 05 F1 | 	add	objptr, #32
37dfc     F2 26 02 FB | 	rdlong	local01, objptr
37e00     13 29 02 F6 | 	mov	local02, local01
37e04     20 E4 85 F1 | 	sub	objptr, #32
37e08     13 28 46 F7 | 	zerox	local02, #19
37e0c     14 26 46 F0 | 	shr	local01, #20
37e10     02 26 66 F0 | 	shl	local01, #2
37e14     ED 26 02 F1 | 	add	local01, __methods__
37e18     13 27 02 FB | 	rdlong	local01, local01
37e1c     F2 12 02 F6 | 	mov	arg01, objptr
37e20     F2 2A 02 F6 | 	mov	local03, objptr
37e24     14 E5 01 F6 | 	mov	objptr, local02
37e28     2D 26 62 FD | 	call	local01
37e2c     15 E5 01 F6 | 	mov	objptr, local03
37e30                 | LR__5530
37e30     A7 F0 03 F6 | 	mov	ptra, fp
37e34     B2 00 A0 FD | 	call	#popregs_
37e38                 | __system___struct__s_vfs_file_t_getchar__ret
37e38     2D 00 64 FD | 	ret
37e3c                 | 
37e3c                 | __system___struct___bas_wrap_sender_tx_
37e3c     03 4A 05 F6 | 	mov	COUNT_, #3
37e40     A8 00 A0 FD | 	call	#pushregs_
37e44     F2 26 02 FB | 	rdlong	local01, objptr
37e48     13 29 02 F6 | 	mov	local02, local01
37e4c     13 26 46 F7 | 	zerox	local01, #19
37e50     14 28 46 F0 | 	shr	local02, #20
37e54     02 28 66 F0 | 	shl	local02, #2
37e58     ED 28 02 F1 | 	add	local02, __methods__
37e5c     14 29 02 FB | 	rdlong	local02, local02
37e60     F2 2A 02 F6 | 	mov	local03, objptr
37e64     13 E5 01 F6 | 	mov	objptr, local01
37e68     2D 28 62 FD | 	call	local02
37e6c     15 E5 01 F6 | 	mov	objptr, local03
37e70     01 FA 05 F6 | 	mov	result1, #1
37e74     A7 F0 03 F6 | 	mov	ptra, fp
37e78     B2 00 A0 FD | 	call	#popregs_
37e7c                 | __system___struct___bas_wrap_sender_tx__ret
37e7c     2D 00 64 FD | 	ret
37e80                 | 
37e80                 | __system___struct___bas_wrap_sender_rx_
37e80     03 4A 05 F6 | 	mov	COUNT_, #3
37e84     A8 00 A0 FD | 	call	#pushregs_
37e88     04 E4 05 F1 | 	add	objptr, #4
37e8c     F2 26 02 FB | 	rdlong	local01, objptr
37e90     13 29 02 F6 | 	mov	local02, local01
37e94     04 E4 85 F1 | 	sub	objptr, #4
37e98     13 28 46 F7 | 	zerox	local02, #19
37e9c     14 26 46 F0 | 	shr	local01, #20
37ea0     02 26 66 F0 | 	shl	local01, #2
37ea4     ED 26 02 F1 | 	add	local01, __methods__
37ea8     13 27 02 FB | 	rdlong	local01, local01
37eac     F2 2A 02 F6 | 	mov	local03, objptr
37eb0     14 E5 01 F6 | 	mov	objptr, local02
37eb4     2D 26 62 FD | 	call	local01
37eb8     15 E5 01 F6 | 	mov	objptr, local03
37ebc     A7 F0 03 F6 | 	mov	ptra, fp
37ec0     B2 00 A0 FD | 	call	#popregs_
37ec4                 | __system___struct___bas_wrap_sender_rx__ret
37ec4     2D 00 64 FD | 	ret
37ec8                 | 
37ec8                 | __system___struct___bas_wrap_sender_close_
37ec8     03 4A 05 F6 | 	mov	COUNT_, #3
37ecc     A8 00 A0 FD | 	call	#pushregs_
37ed0     08 E4 05 F1 | 	add	objptr, #8
37ed4     F2 26 02 FB | 	rdlong	local01, objptr
37ed8     13 29 02 F6 | 	mov	local02, local01
37edc     08 E4 85 F1 | 	sub	objptr, #8
37ee0     13 28 46 F7 | 	zerox	local02, #19
37ee4     14 26 46 F0 | 	shr	local01, #20
37ee8     02 26 66 F0 | 	shl	local01, #2
37eec     ED 26 02 F1 | 	add	local01, __methods__
37ef0     13 27 02 FB | 	rdlong	local01, local01
37ef4     F2 2A 02 F6 | 	mov	local03, objptr
37ef8     14 E5 01 F6 | 	mov	objptr, local02
37efc     2D 26 62 FD | 	call	local01
37f00     15 E5 01 F6 | 	mov	objptr, local03
37f04     A7 F0 03 F6 | 	mov	ptra, fp
37f08     B2 00 A0 FD | 	call	#popregs_
37f0c                 | __system___struct___bas_wrap_sender_close__ret
37f0c     2D 00 64 FD | 	ret
37f10                 | 
37f10                 | LR__5540
37f10     2F          | 	byte	"/"
37f11     00          | 	byte	0
37f12                 | LR__5541
37f12     69 6E 66    | 	byte	"inf"
37f15     00          | 	byte	0
37f16                 | LR__5542
37f16     6E 61 6E    | 	byte	"nan"
37f19     00          | 	byte	0
37f1a                 | LR__5543
37f1a                 | 	byte	
37f1a     00          | 	byte	0
37f1b                 | LR__5544
37f1b                 | 	byte	
37f1b     00          | 	byte	0
37f1c                 | LR__5545
37f1c                 | 	byte	
37f1c     00          | 	byte	0
37f1d                 | LR__5546
37f1d                 | 	byte	
37f1d     00          | 	byte	0
37f1e                 | LR__5547
37f1e                 | 	byte	
37f1e     00          | 	byte	0
37f1f                 | LR__5548
37f1f                 | 	byte	
37f1f     00          | 	byte	0
37f20                 | LR__5549
37f20                 | 	byte	
37f20     00          | 	byte	0
37f21                 | LR__5550
37f21                 | 	byte	
37f21     00          | 	byte	0
37f22                 | LR__5551
37f22     00          | 	byte	0
37f23     00          | 	byte	0
37f24                 | LR__5552
37f24     00          | 	byte	0
37f25     00          | 	byte	0
37f26                 | LR__5553
37f26     00          | 	byte	0
37f27     00          | 	byte	0
37f28                 | LR__5554
37f28     20 21 21 21 
37f2c     20 63 6F 72 
37f30     72 75 70 74 
37f34     65 64 20 68 
37f38     65 61 70 3F 
37f3c     3F 3F 20 21 
37f40     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
37f43     00          | 	byte	0
37f44                 | LR__5555
37f44     20 21 21 21 
37f48     20 6F 75 74 
37f4c     20 6F 66 20 
37f50     68 65 61 70 
37f54     20 6D 65 6D 
37f58     6F 72 79 20 
37f5c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
37f60     00          | 	byte	0
37f61                 | LR__5556
37f61     20 21 21 21 
37f65     20 63 6F 72 
37f69     72 75 70 74 
37f6d     65 64 20 68 
37f71     65 61 70 20 
37f75     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
37f79     00          | 	byte	0
37f7a                 | LR__5557
37f7a     00          | 	byte	0
37f7b     00          | 	byte	0
37f7c                 | LR__5558
37f7c     2E          | 	byte	"."
37f7d     00          | 	byte	0
37f7e                 | LR__5559
37f7e     00          | 	byte	0
37f7f     00          | 	byte	0
37f80                 | LR__5560
37f80     00          | 	byte	0
37f81     00          | 	byte	0
37f82                 | LR__5561
37f82     00          | 	byte	0
37f83     00          | 	byte	0
37f84                 | LR__5562
37f84     2A 3A 3C 3E 
37f88     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
37f8c     00          | 	byte	0
37f8d                 | LR__5563
37f8d     2B 2C 3B 3D 
37f91     5B 5D       | 	byte	"+,;=[]"
37f93     00          | 	byte	0
37f94                 | LR__5564
37f94     46 41 54 33 
37f98     32 20 20 20 | 	byte	"FAT32   "
37f9c     00          | 	byte	0
37f9d                 | LR__5565
37f9d     54 5A       | 	byte	"TZ"
37f9f     00          | 	byte	0
37fa0                 | LR__5566
37fa0     00          | 	byte	0
37fa1     00          | 	byte	0
37fa2                 | LR__5567
37fa2                 | 	byte	
37fa2     00          | 	byte	0
37fa3                 | LR__5568
37fa3                 | 	byte	
37fa3     00          | 	byte	0
37fa4                 | LR__5569
37fa4                 | 	byte	
37fa4     00          | 	byte	0
37fa5                 | LR__5570
37fa5                 | 	byte	
37fa5     00          | 	byte	0
37fa6                 | LR__5571
37fa6     22          | 	byte	34
37fa7     00          | 	byte	0
37fa8                 | LR__5572
37fa8     22          | 	byte	34
37fa9     00          | 	byte	0
37faa                 | LR__5573
37faa     3A          | 	byte	":"
37fab     00          | 	byte	0
37fac                 | LR__5574
37fac                 | 	byte	
37fac     00          | 	byte	0
37fad                 | LR__5575
37fad                 | 	byte	
37fad     00          | 	byte	0
37fae                 | LR__5576
37fae                 | 	byte	
37fae     00          | 	byte	0
37faf                 | LR__5577
37faf                 | 	byte	
37faf     00          | 	byte	0
37fb0                 | LR__5578
37fb0                 | 	byte	
37fb0     00          | 	byte	0
37fb1                 | LR__5579
37fb1                 | 	byte	
37fb1     00          | 	byte	0
37fb2                 | LR__5580
37fb2                 | 	byte	
37fb2     00          | 	byte	0
37fb3                 | LR__5581
37fb3     30          | 	byte	"0"
37fb4     00          | 	byte	0
37fb5                 | LR__5582
37fb5     22          | 	byte	34
37fb6     00          | 	byte	0
37fb7                 | LR__5583
37fb7     22          | 	byte	34
37fb8     00          | 	byte	0
37fb9                 | LR__5584
37fb9     22          | 	byte	34
37fba     00          | 	byte	0
37fbb                 | LR__5585
37fbb     22          | 	byte	34
37fbc     00          | 	byte	0
37fbd                 | LR__5586
37fbd     22          | 	byte	34
37fbe     00          | 	byte	0
37fbf                 | LR__5587
37fbf     3E          | 	byte	">"
37fc0     00          | 	byte	0
37fc1                 | LR__5588
37fc1     3C          | 	byte	"<"
37fc2     00          | 	byte	0
37fc3                 | LR__5589
37fc3     2B          | 	byte	"+"
37fc4     00          | 	byte	0
37fc5                 | LR__5590
37fc5     2D          | 	byte	"-"
37fc6     00          | 	byte	0
37fc7                 | LR__5591
37fc7     2A          | 	byte	"*"
37fc8     00          | 	byte	0
37fc9                 | LR__5592
37fc9     2F          | 	byte	"/"
37fca     00          | 	byte	0
37fcb                 | LR__5593
37fcb     5E          | 	byte	"^"
37fcc     00          | 	byte	0
37fcd                 | LR__5594
37fcd     3D          | 	byte	"="
37fce     00          | 	byte	0
37fcf                 | LR__5595
37fcf     2B          | 	byte	"+"
37fd0     00          | 	byte	0
37fd1                 | LR__5596
37fd1     2B          | 	byte	"+"
37fd2     00          | 	byte	0
37fd3                 | LR__5597
37fd3     2D          | 	byte	"-"
37fd4     00          | 	byte	0
37fd5                 | LR__5598
37fd5     2D          | 	byte	"-"
37fd6     00          | 	byte	0
37fd7                 | LR__5599
37fd7     3C          | 	byte	"<"
37fd8     00          | 	byte	0
37fd9                 | LR__5600
37fd9     3E          | 	byte	">"
37fda     00          | 	byte	0
37fdb                 | LR__5601
37fdb     22          | 	byte	34
37fdc     00          | 	byte	0
37fdd                 | LR__5602
37fdd     22          | 	byte	34
37fde     00          | 	byte	0
37fdf                 | LR__5603
37fdf     65 6C 73 65 | 	byte	"else"
37fe3     00          | 	byte	0
37fe4                 | LR__5604
37fe4     74 68 65 6E | 	byte	"then"
37fe8     00          | 	byte	0
37fe9                 | LR__5605
37fe9     3F          | 	byte	"?"
37fea     00          | 	byte	0
37feb                 | LR__5606
37feb     3F          | 	byte	"?"
37fec     00          | 	byte	0
37fed                 | LR__5607
37fed     2E          | 	byte	"."
37fee     00          | 	byte	0
37fef                 | LR__5608
37fef     6D 6F 75 73 
37ff3     65          | 	byte	"mouse"
37ff4     00          | 	byte	0
37ff5                 | LR__5609
37ff5     63 75 72 73 
37ff9     6F 72       | 	byte	"cursor"
37ffb     00          | 	byte	0
37ffc                 | LR__5610
37ffc     63 6C 69 63 
38000     6B          | 	byte	"click"
38001     00          | 	byte	0
38002                 | LR__5611
38002     6F 6E       | 	byte	"on"
38004     00          | 	byte	0
38005                 | LR__5612
38005     31          | 	byte	"1"
38006     00          | 	byte	0
38007                 | LR__5613
38007     6F 66 66    | 	byte	"off"
3800a     00          | 	byte	0
3800b                 | LR__5614
3800b     30          | 	byte	"0"
3800c     00          | 	byte	0
3800d                 | LR__5615
3800d     6D 6F 64 65 | 	byte	"mode"
38011     00          | 	byte	0
38012                 | LR__5616
38012     6D 2E       | 	byte	"m."
38014     00          | 	byte	0
38015                 | LR__5617
38015     61 74 61 72 
38019     69          | 	byte	"atari"
3801a     00          | 	byte	0
3801b                 | LR__5618
3801b     30          | 	byte	"0"
3801c     00          | 	byte	0
3801d                 | LR__5619
3801d     70 63 5F 61 
38021     6D 62 65 72 | 	byte	"pc_amber"
38025     00          | 	byte	0
38026                 | LR__5620
38026     31          | 	byte	"1"
38027     00          | 	byte	0
38028                 | LR__5621
38028     70 63 5F 67 
3802c     72 65 65 6E | 	byte	"pc_green"
38030     00          | 	byte	0
38031                 | LR__5622
38031     32          | 	byte	"2"
38032     00          | 	byte	0
38033                 | LR__5623
38033     70 63 5F 77 
38037     68 69 74 65 | 	byte	"pc_white"
3803b     00          | 	byte	0
3803c                 | LR__5624
3803c     33          | 	byte	"3"
3803d     00          | 	byte	0
3803e                 | LR__5625
3803e     73 74       | 	byte	"st"
38040     00          | 	byte	0
38041                 | LR__5626
38041     34          | 	byte	"4"
38042     00          | 	byte	0
38043                 | LR__5627
38043     61 6D 69 67 
38047     61          | 	byte	"amiga"
38048     00          | 	byte	0
38049                 | LR__5628
38049     35          | 	byte	"5"
3804a     00          | 	byte	0
3804b                 | LR__5629
3804b                 | 	byte	
3804b     00          | 	byte	0
3804c                 | LR__5630
3804c     6C 6F 61 64 | 	byte	"load"
38050     00          | 	byte	0
38051                 | LR__5631
38051     73 61 76 65 | 	byte	"save"
38055     00          | 	byte	0
38056                 | LR__5632
38056     62 72 75 6E | 	byte	"brun"
3805a     00          | 	byte	0
3805b                 | LR__5633
3805b     72 75 6E    | 	byte	"run"
3805e     00          | 	byte	0
3805f                 | LR__5634
3805f     6C 6F 2E    | 	byte	"lo."
38062     00          | 	byte	0
38063                 | LR__5635
38063     73 2E       | 	byte	"s."
38065     00          | 	byte	0
38066                 | LR__5636
38066     62 72 2E    | 	byte	"br."
38069     00          | 	byte	0
3806a                 | LR__5637
3806a     65 6E 74 65 
3806e     72          | 	byte	"enter"
3806f     00          | 	byte	0
38070                 | LR__5638
38070     65 2E       | 	byte	"e."
38072     00          | 	byte	0
38073                 | LR__5639
38073     24          | 	byte	"$"
38074     00          | 	byte	0
38075                 | LR__5640
38075     64 65 6C 65 
38079     74 65       | 	byte	"delete"
3807b     00          | 	byte	0
3807c                 | LR__5641
3807c     6D 6B 64 69 
38080     72          | 	byte	"mkdir"
38081     00          | 	byte	0
38082                 | LR__5642
38082     24          | 	byte	"$"
38083     00          | 	byte	0
38084                 | LR__5643
38084     63 6F 70 79 | 	byte	"copy"
38088     00          | 	byte	0
38089                 | LR__5644
38089     24          | 	byte	"$"
3808a     00          | 	byte	0
3808b                 | LR__5645
3808b     63 6F 70 79 | 	byte	"copy"
3808f     00          | 	byte	0
38090                 | LR__5646
38090     24          | 	byte	"$"
38091     00          | 	byte	0
38092                 | LR__5647
38092     63 64       | 	byte	"cd"
38094     00          | 	byte	0
38095                 | LR__5648
38095     63 64 2E    | 	byte	"cd."
38098     00          | 	byte	0
38099                 | LR__5649
38099     2E          | 	byte	"."
3809a     00          | 	byte	0
3809b                 | LR__5650
3809b     2E 2E       | 	byte	".."
3809d     00          | 	byte	0
3809e                 | LR__5651
3809e     63 64       | 	byte	"cd"
380a0     00          | 	byte	0
380a1                 | LR__5652
380a1     2F          | 	byte	"/"
380a2     00          | 	byte	0
380a3                 | LR__5653
380a3                 | 	byte	
380a3     00          | 	byte	0
380a4                 | LR__5654
380a4                 | 	byte	
380a4     00          | 	byte	0
380a5                 | LR__5655
380a5                 | 	byte	
380a5     00          | 	byte	0
380a6                 | LR__5656
380a6                 | 	byte	
380a6     00          | 	byte	0
380a7                 | LR__5657
380a7                 | 	byte	
380a7     00          | 	byte	0
380a8                 | LR__5658
380a8     52 65 61 64 
380ac     79          | 	byte	"Ready"
380ad     00          | 	byte	0
380ae                 | LR__5659
380ae     2B          | 	byte	"+"
380af     00          | 	byte	0
380b0                 | LR__5660
380b0     2D          | 	byte	"-"
380b1     00          | 	byte	0
380b2                 | LR__5661
380b2     6F 72       | 	byte	"or"
380b4     00          | 	byte	0
380b5                 | LR__5662
380b5     78 6F 72    | 	byte	"xor"
380b8     00          | 	byte	0
380b9                 | LR__5663
380b9     2A          | 	byte	"*"
380ba     00          | 	byte	0
380bb                 | LR__5664
380bb     2F          | 	byte	"/"
380bc     00          | 	byte	0
380bd                 | LR__5665
380bd     61 6E 64    | 	byte	"and"
380c0     00          | 	byte	0
380c1                 | LR__5666
380c1     64 69 76    | 	byte	"div"
380c4     00          | 	byte	0
380c5                 | LR__5667
380c5     6D 6F 64    | 	byte	"mod"
380c8     00          | 	byte	0
380c9                 | LR__5668
380c9     73 68 6C    | 	byte	"shl"
380cc     00          | 	byte	0
380cd                 | LR__5669
380cd     73 68 72    | 	byte	"shr"
380d0     00          | 	byte	0
380d1                 | LR__5670
380d1     5E          | 	byte	"^"
380d2     00          | 	byte	0
380d3                 | LR__5671
380d3     6E 6F 74    | 	byte	"not"
380d6     00          | 	byte	0
380d7                 | LR__5672
380d7     40          | 	byte	"@"
380d8     00          | 	byte	0
380d9                 | LR__5673
380d9     3D          | 	byte	"="
380da     00          | 	byte	0
380db                 | LR__5674
380db     3E 3D       | 	byte	">="
380dd     00          | 	byte	0
380de                 | LR__5675
380de     3C 3D       | 	byte	"<="
380e0     00          | 	byte	0
380e1                 | LR__5676
380e1     3C          | 	byte	"<"
380e2     00          | 	byte	0
380e3                 | LR__5677
380e3     3E          | 	byte	">"
380e4     00          | 	byte	0
380e5                 | LR__5678
380e5     3C 3E       | 	byte	"<>"
380e7     00          | 	byte	0
380e8                 | LR__5679
380e8     2B 2B       | 	byte	"++"
380ea     00          | 	byte	0
380eb                 | LR__5680
380eb     2D 2D       | 	byte	"--"
380ed     00          | 	byte	0
380ee                 | LR__5681
380ee     23          | 	byte	"#"
380ef     00          | 	byte	0
380f0                 | LR__5682
380f0     30          | 	byte	"0"
380f1     00          | 	byte	0
380f2                 | LR__5683
380f2     39          | 	byte	"9"
380f3     00          | 	byte	0
380f4                 | LR__5684
380f4     23 72 65 61 
380f8     64          | 	byte	"#read"
380f9     00          | 	byte	0
380fa                 | LR__5685
380fa     23 77 72 69 
380fe     74 65       | 	byte	"#write"
38100     00          | 	byte	0
38101                 | LR__5686
38101     23 61 70 70 
38105     65 6E 64    | 	byte	"#append"
38108     00          | 	byte	0
38109                 | LR__5687
38109     23          | 	byte	"#"
3810a     00          | 	byte	0
3810b                 | LR__5688
3810b     23          | 	byte	"#"
3810c     00          | 	byte	0
3810d                 | LR__5689
3810d     2D          | 	byte	"-"
3810e     00          | 	byte	0
3810f                 | LR__5690
3810f     30          | 	byte	"0"
38110     00          | 	byte	0
38111                 | LR__5691
38111     63          | 	byte	"c"
38112     00          | 	byte	0
38113                 | LR__5692
38113     63 23       | 	byte	"c#"
38115     00          | 	byte	0
38116                 | LR__5693
38116     64          | 	byte	"d"
38117     00          | 	byte	0
38118                 | LR__5694
38118     64 23       | 	byte	"d#"
3811a     00          | 	byte	0
3811b                 | LR__5695
3811b     65          | 	byte	"e"
3811c     00          | 	byte	0
3811d                 | LR__5696
3811d     66          | 	byte	"f"
3811e     00          | 	byte	0
3811f                 | LR__5697
3811f     66 23       | 	byte	"f#"
38121     00          | 	byte	0
38122                 | LR__5698
38122     67          | 	byte	"g"
38123     00          | 	byte	0
38124                 | LR__5699
38124     67 23       | 	byte	"g#"
38126     00          | 	byte	0
38127                 | LR__5700
38127     61          | 	byte	"a"
38128     00          | 	byte	0
38129                 | LR__5701
38129     61 23       | 	byte	"a#"
3812b     00          | 	byte	0
3812c                 | LR__5702
3812c     68          | 	byte	"h"
3812d     00          | 	byte	0
3812e                 | LR__5703
3812e     62          | 	byte	"b"
3812f     00          | 	byte	0
38130                 | LR__5704
38130     2B          | 	byte	"+"
38131     00          | 	byte	0
38132                 | LR__5705
38132     2D          | 	byte	"-"
38133     00          | 	byte	0
38134                 | LR__5706
38134     3D          | 	byte	"="
38135     00          | 	byte	0
38136                 | LR__5707
38136     2C          | 	byte	","
38137     00          | 	byte	0
38138                 | LR__5708
38138     2A          | 	byte	"*"
38139     00          | 	byte	0
3813a                 | LR__5709
3813a     2F          | 	byte	"/"
3813b     00          | 	byte	0
3813c                 | LR__5710
3813c     3B          | 	byte	";"
3813d     00          | 	byte	0
3813e                 | LR__5711
3813e     22          | 	byte	34
3813f     00          | 	byte	0
38140                 | LR__5712
38140     5E          | 	byte	"^"
38141     00          | 	byte	0
38142                 | LR__5713
38142     29          | 	byte	")"
38143     00          | 	byte	0
38144                 | LR__5714
38144     28          | 	byte	"("
38145     00          | 	byte	0
38146                 | LR__5715
38146     3A          | 	byte	":"
38147     00          | 	byte	0
38148                 | LR__5716
38148     20          | 	byte	" "
38149     00          | 	byte	0
3814a                 | LR__5717
3814a     3E          | 	byte	">"
3814b     00          | 	byte	0
3814c                 | LR__5718
3814c     3C          | 	byte	"<"
3814d     00          | 	byte	0
3814e                 | LR__5719
3814e     3D          | 	byte	"="
3814f     00          | 	byte	0
38150                 | LR__5720
38150     62 65 65 70 | 	byte	"beep"
38154     00          | 	byte	0
38155                 | LR__5721
38155     62 2E       | 	byte	"b."
38157     00          | 	byte	0
38158                 | LR__5722
38158     62 6C 69 74 | 	byte	"blit"
3815c     00          | 	byte	0
3815d                 | LR__5723
3815d     62 6F 78    | 	byte	"box"
38160     00          | 	byte	0
38161                 | LR__5724
38161     62 72 75 6E | 	byte	"brun"
38165     00          | 	byte	0
38166                 | LR__5725
38166     62 72 2E    | 	byte	"br."
38169     00          | 	byte	0
3816a                 | LR__5726
3816a     63 64       | 	byte	"cd"
3816c     00          | 	byte	0
3816d                 | LR__5727
3816d     63 68 61 6E 
38171     67 65 66 72 
38175     65 71       | 	byte	"changefreq"
38177     00          | 	byte	0
38178                 | LR__5728
38178     63 66 2E    | 	byte	"cf."
3817b     00          | 	byte	0
3817c                 | LR__5729
3817c     63 68 61 6E 
38180     67 65 70 61 
38184     6E          | 	byte	"changepan"
38185     00          | 	byte	0
38186                 | LR__5730
38186     63 70 2E    | 	byte	"cp."
38189     00          | 	byte	0
3818a                 | LR__5731
3818a     63 68 61 6E 
3818e     67 65 76 6F 
38192     6C          | 	byte	"changevol"
38193     00          | 	byte	0
38194                 | LR__5732
38194     63 76 2E    | 	byte	"cv."
38197     00          | 	byte	0
38198                 | LR__5733
38198     63 68 61 6E 
3819c     67 65 77 61 
381a0     76 65       | 	byte	"changewave"
381a2     00          | 	byte	0
381a3                 | LR__5734
381a3     63 77 2E    | 	byte	"cw."
381a6     00          | 	byte	0
381a7                 | LR__5735
381a7     63 69 72 63 
381ab     6C 65       | 	byte	"circle"
381ad     00          | 	byte	0
381ae                 | LR__5736
381ae     63 69 2E    | 	byte	"ci."
381b1     00          | 	byte	0
381b2                 | LR__5737
381b2     63 6C 69 63 
381b6     6B          | 	byte	"click"
381b7     00          | 	byte	0
381b8                 | LR__5738
381b8     63 6C 6F 73 
381bc     65          | 	byte	"close"
381bd     00          | 	byte	0
381be                 | LR__5739
381be     63 6C 73    | 	byte	"cls"
381c1     00          | 	byte	0
381c2                 | LR__5740
381c2     63 6F 67 73 
381c6     74 6F 70    | 	byte	"cogstop"
381c9     00          | 	byte	0
381ca                 | LR__5741
381ca     63 6F 6C 6F 
381ce     72          | 	byte	"color"
381cf     00          | 	byte	0
381d0                 | LR__5742
381d0     63 2E       | 	byte	"c."
381d2     00          | 	byte	0
381d3                 | LR__5743
381d3     63 6F 70 79 | 	byte	"copy"
381d7     00          | 	byte	0
381d8                 | LR__5744
381d8     63 75 72 73 
381dc     6F 72       | 	byte	"cursor"
381de     00          | 	byte	0
381df                 | LR__5745
381df     64 61 74 61 | 	byte	"data"
381e3     00          | 	byte	0
381e4                 | LR__5746
381e4     64 65 66 63 
381e8     68 61 72    | 	byte	"defchar"
381eb     00          | 	byte	0
381ec                 | LR__5747
381ec     64 65 66 73 
381f0     6E 64       | 	byte	"defsnd"
381f2     00          | 	byte	0
381f3                 | LR__5748
381f3     64 65 66 65 
381f7     6E 76       | 	byte	"defenv"
381f9     00          | 	byte	0
381fa                 | LR__5749
381fa     64 65 66 73 
381fe     70 72 69 74 
38202     65          | 	byte	"defsprite"
38203     00          | 	byte	0
38204                 | LR__5750
38204     64 73 2E    | 	byte	"ds."
38207     00          | 	byte	0
38208                 | LR__5751
38208     64 65 67    | 	byte	"deg"
3820b     00          | 	byte	0
3820c                 | LR__5752
3820c     64 65 6C 65 
38210     74 65       | 	byte	"delete"
38212     00          | 	byte	0
38213                 | LR__5753
38213     64 69 6D    | 	byte	"dim"
38216     00          | 	byte	0
38217                 | LR__5754
38217     64 69 72    | 	byte	"dir"
3821a     00          | 	byte	0
3821b                 | LR__5755
3821b     64 70 6F 6B 
3821f     65          | 	byte	"dpoke"
38220     00          | 	byte	0
38221                 | LR__5756
38221     64 72 61 77 | 	byte	"draw"
38225     00          | 	byte	0
38226                 | LR__5757
38226     64 72 61 77 
3822a     74 6F       | 	byte	"drawto"
3822c     00          | 	byte	0
3822d                 | LR__5758
3822d     64 72 2E    | 	byte	"dr."
38230     00          | 	byte	0
38231                 | LR__5759
38231     65 6C 73 65 | 	byte	"else"
38235     00          | 	byte	0
38236                 | LR__5760
38236     65 6E 64    | 	byte	"end"
38239     00          | 	byte	0
3823a                 | LR__5761
3823a     65 6E 74 65 
3823e     72          | 	byte	"enter"
3823f     00          | 	byte	0
38240                 | LR__5762
38240     65 2E       | 	byte	"e."
38242     00          | 	byte	0
38243                 | LR__5763
38243     66 63 69 72 
38247     63 6C 65    | 	byte	"fcircle"
3824a     00          | 	byte	0
3824b                 | LR__5764
3824b     66 63 2E    | 	byte	"fc."
3824e     00          | 	byte	0
3824f                 | LR__5765
3824f     66 69 6C 6C | 	byte	"fill"
38253     00          | 	byte	0
38254                 | LR__5766
38254     66 69 2E    | 	byte	"fi."
38257     00          | 	byte	0
38258                 | LR__5767
38258     66 6F 6E 74 | 	byte	"font"
3825c     00          | 	byte	0
3825d                 | LR__5768
3825d     66 6F 72    | 	byte	"for"
38260     00          | 	byte	0
38261                 | LR__5769
38261     66 2E       | 	byte	"f."
38263     00          | 	byte	0
38264                 | LR__5770
38264     66 72 61 6D 
38268     65          | 	byte	"frame"
38269     00          | 	byte	0
3826a                 | LR__5771
3826a     66 72 2E    | 	byte	"fr."
3826d     00          | 	byte	0
3826e                 | LR__5772
3826e     67 65 74    | 	byte	"get"
38271     00          | 	byte	0
38272                 | LR__5773
38272     67 6F 73 75 
38276     62          | 	byte	"gosub"
38277     00          | 	byte	0
38278                 | LR__5774
38278     67 6F 74 6F | 	byte	"goto"
3827c     00          | 	byte	0
3827d                 | LR__5775
3827d     67 2E       | 	byte	"g."
3827f     00          | 	byte	0
38280                 | LR__5776
38280     69 66       | 	byte	"if"
38282     00          | 	byte	0
38283                 | LR__5777
38283     69 6E 6B    | 	byte	"ink"
38286     00          | 	byte	0
38287                 | LR__5778
38287     69 2E       | 	byte	"i."
38289     00          | 	byte	0
3828a                 | LR__5779
3828a     69 6E 70 75 
3828e     74          | 	byte	"input"
3828f     00          | 	byte	0
38290                 | LR__5780
38290     6C 69 73 74 | 	byte	"list"
38294     00          | 	byte	0
38295                 | LR__5781
38295     6C 2E       | 	byte	"l."
38297     00          | 	byte	0
38298                 | LR__5782
38298     6C 6F 61 64 | 	byte	"load"
3829c     00          | 	byte	0
3829d                 | LR__5783
3829d     6C 6F 2E    | 	byte	"lo."
382a0     00          | 	byte	0
382a1                 | LR__5784
382a1     6C 70 6F 6B 
382a5     65          | 	byte	"lpoke"
382a6     00          | 	byte	0
382a7                 | LR__5785
382a7     6D 6B 64 69 
382ab     72          | 	byte	"mkdir"
382ac     00          | 	byte	0
382ad                 | LR__5786
382ad     6D 6F 64 65 | 	byte	"mode"
382b1     00          | 	byte	0
382b2                 | LR__5787
382b2     6D 2E       | 	byte	"m."
382b4     00          | 	byte	0
382b5                 | LR__5788
382b5     6D 6F 75 73 
382b9     65          | 	byte	"mouse"
382ba     00          | 	byte	0
382bb                 | LR__5789
382bb     6E 65 77    | 	byte	"new"
382be     00          | 	byte	0
382bf                 | LR__5790
382bf     6E 65 78 74 | 	byte	"next"
382c3     00          | 	byte	0
382c4                 | LR__5791
382c4     6E 2E       | 	byte	"n."
382c6     00          | 	byte	0
382c7                 | LR__5792
382c7     6F 6E       | 	byte	"on"
382c9     00          | 	byte	0
382ca                 | LR__5793
382ca     6F 70 65 6E | 	byte	"open"
382ce     00          | 	byte	0
382cf                 | LR__5794
382cf     70 61 70 65 
382d3     72          | 	byte	"paper"
382d4     00          | 	byte	0
382d5                 | LR__5795
382d5     70 61 2E    | 	byte	"pa."
382d8     00          | 	byte	0
382d9                 | LR__5796
382d9     70 69 6E 66 
382dd     6C 6F 61 74 | 	byte	"pinfloat"
382e1     00          | 	byte	0
382e2                 | LR__5797
382e2     70 69 6E 68 
382e6     69          | 	byte	"pinhi"
382e7     00          | 	byte	0
382e8                 | LR__5798
382e8     70 69 6E 6C 
382ec     6F          | 	byte	"pinlo"
382ed     00          | 	byte	0
382ee                 | LR__5799
382ee     70 69 6E 73 
382f2     74 61 72 74 | 	byte	"pinstart"
382f6     00          | 	byte	0
382f7                 | LR__5800
382f7     70 69 6E 74 
382fb     6F 67 67 6C 
382ff     65          | 	byte	"pintoggle"
38300     00          | 	byte	0
38301                 | LR__5801
38301     70 69 6E 77 
38305     72 69 74 65 | 	byte	"pinwrite"
38309     00          | 	byte	0
3830a                 | LR__5802
3830a     70 6C 61 79 | 	byte	"play"
3830e     00          | 	byte	0
3830f                 | LR__5803
3830f     70 2E       | 	byte	"p."
38311     00          | 	byte	0
38312                 | LR__5804
38312     70 6C 6F 74 | 	byte	"plot"
38316     00          | 	byte	0
38317                 | LR__5805
38317     70 6C 2E    | 	byte	"pl."
3831a     00          | 	byte	0
3831b                 | LR__5806
3831b     70 6F 6B 65 | 	byte	"poke"
3831f     00          | 	byte	0
38320                 | LR__5807
38320     70 6F 70    | 	byte	"pop"
38323     00          | 	byte	0
38324                 | LR__5808
38324     70 6F 73 69 
38328     74 69 6F 6E | 	byte	"position"
3832c     00          | 	byte	0
3832d                 | LR__5809
3832d     70 6F 73 2E | 	byte	"pos."
38331     00          | 	byte	0
38332                 | LR__5810
38332     70 72 69 6E 
38336     74          | 	byte	"print"
38337     00          | 	byte	0
38338                 | LR__5811
38338     3F          | 	byte	"?"
38339     00          | 	byte	0
3833a                 | LR__5812
3833a     70 75 74    | 	byte	"put"
3833d     00          | 	byte	0
3833e                 | LR__5813
3833e     72 61 64    | 	byte	"rad"
38341     00          | 	byte	0
38342                 | LR__5814
38342     72 65 61 64 | 	byte	"read"
38346     00          | 	byte	0
38347                 | LR__5815
38347     72 65 6C 65 
3834b     61 73 65    | 	byte	"release"
3834e     00          | 	byte	0
3834f                 | LR__5816
3834f     72 65 6D    | 	byte	"rem"
38352     00          | 	byte	0
38353                 | LR__5817
38353     27          | 	byte	"'"
38354     00          | 	byte	0
38355                 | LR__5818
38355     72 65 73 74 
38359     6F 72 65    | 	byte	"restore"
3835c     00          | 	byte	0
3835d                 | LR__5819
3835d     72 65 73 74 
38361     6F 72 65 70 
38365     61 6C 65 74 
38369     74 65       | 	byte	"restorepalette"
3836b     00          | 	byte	0
3836c                 | LR__5820
3836c     72 70 2E    | 	byte	"rp."
3836f     00          | 	byte	0
38370                 | LR__5821
38370     72 65 74 75 
38374     72 6E       | 	byte	"return"
38376     00          | 	byte	0
38377                 | LR__5822
38377     72 75 6E    | 	byte	"run"
3837a     00          | 	byte	0
3837b                 | LR__5823
3837b     72 2E       | 	byte	"r."
3837d     00          | 	byte	0
3837e                 | LR__5824
3837e     73 61 76 65 | 	byte	"save"
38382     00          | 	byte	0
38383                 | LR__5825
38383     73 2E       | 	byte	"s."
38385     00          | 	byte	0
38386                 | LR__5826
38386     73 65 74 63 
3838a     6F 6C 6F 72 | 	byte	"setcolor"
3838e     00          | 	byte	0
3838f                 | LR__5827
3838f     73 63 2E    | 	byte	"sc."
38392     00          | 	byte	0
38393                 | LR__5828
38393     73 65 74 61 
38397     6D 6F 64 65 | 	byte	"setamode"
3839b     00          | 	byte	0
3839c                 | LR__5829
3839c     73 61 2E    | 	byte	"sa."
3839f     00          | 	byte	0
383a0                 | LR__5830
383a0     73 65 74 64 
383a4     65 6C 61 79 | 	byte	"setdelay"
383a8     00          | 	byte	0
383a9                 | LR__5831
383a9     73 64 2E    | 	byte	"sd."
383ac     00          | 	byte	0
383ad                 | LR__5832
383ad     73 65 74 65 
383b1     6E 76       | 	byte	"setenv"
383b3     00          | 	byte	0
383b4                 | LR__5833
383b4     73 65 2E    | 	byte	"se."
383b7     00          | 	byte	0
383b8                 | LR__5834
383b8     73 65 74 6C 
383bc     65 6E       | 	byte	"setlen"
383be     00          | 	byte	0
383bf                 | LR__5835
383bf     73 6C 2E    | 	byte	"sl."
383c2     00          | 	byte	0
383c3                 | LR__5836
383c3     73 65 74 70 
383c7     61 6E       | 	byte	"setpan"
383c9     00          | 	byte	0
383ca                 | LR__5837
383ca     73 70 2E    | 	byte	"sp."
383cd     00          | 	byte	0
383ce                 | LR__5838
383ce     73 65 74 73 
383d2     75 73 74 61 
383d6     69 6E       | 	byte	"setsustain"
383d8     00          | 	byte	0
383d9                 | LR__5839
383d9     73 73 2E    | 	byte	"ss."
383dc     00          | 	byte	0
383dd                 | LR__5840
383dd     73 65 74 76 
383e1     6F 6C       | 	byte	"setvol"
383e3     00          | 	byte	0
383e4                 | LR__5841
383e4     73 76 2E    | 	byte	"sv."
383e7     00          | 	byte	0
383e8                 | LR__5842
383e8     73 65 74 77 
383ec     61 76 65    | 	byte	"setwave"
383ef     00          | 	byte	0
383f0                 | LR__5843
383f0     73 77 2E    | 	byte	"sw."
383f3     00          | 	byte	0
383f4                 | LR__5844
383f4     73 65 74 77 
383f8     61 76       | 	byte	"setwav"
383fa     00          | 	byte	0
383fb                 | LR__5845
383fb     73 68 75 74 
383ff     75 70       | 	byte	"shutup"
38401     00          | 	byte	0
38402                 | LR__5846
38402     73 68 2E    | 	byte	"sh."
38405     00          | 	byte	0
38406                 | LR__5847
38406     73 6F 75 6E 
3840a     64          | 	byte	"sound"
3840b     00          | 	byte	0
3840c                 | LR__5848
3840c     73 6F 2E    | 	byte	"so."
3840f     00          | 	byte	0
38410                 | LR__5849
38410     73 70 72 69 
38414     74 65       | 	byte	"sprite"
38416     00          | 	byte	0
38417                 | LR__5850
38417     73 70 72 2E | 	byte	"spr."
3841b     00          | 	byte	0
3841c                 | LR__5851
3841c     74 68 65 6E | 	byte	"then"
38420     00          | 	byte	0
38421                 | LR__5852
38421     77 61 69 74 
38425     6D 73       | 	byte	"waitms"
38427     00          | 	byte	0
38428                 | LR__5853
38428     77 2E       | 	byte	"w."
3842a     00          | 	byte	0
3842b                 | LR__5854
3842b     77 61 69 74 
3842f     63 6C 6F 63 
38433     6B          | 	byte	"waitclock"
38434     00          | 	byte	0
38435                 | LR__5855
38435     77 63 2E    | 	byte	"wc."
38438     00          | 	byte	0
38439                 | LR__5856
38439     77 61 69 74 
3843d     76 62 6C    | 	byte	"waitvbl"
38440     00          | 	byte	0
38441                 | LR__5857
38441     77 76 2E    | 	byte	"wv."
38444     00          | 	byte	0
38445                 | LR__5858
38445     77 72 70 69 
38449     6E          | 	byte	"wrpin"
3844a     00          | 	byte	0
3844b                 | LR__5859
3844b     77 78 70 69 
3844f     6E          | 	byte	"wxpin"
38450     00          | 	byte	0
38451                 | LR__5860
38451     77 79 70 69 
38455     6E          | 	byte	"wypin"
38456     00          | 	byte	0
38457                 | LR__5861
38457     61 62 73    | 	byte	"abs"
3845a     00          | 	byte	0
3845b                 | LR__5862
3845b     61 63 6F 73 | 	byte	"acos"
3845f     00          | 	byte	0
38460                 | LR__5863
38460     61 64 72    | 	byte	"adr"
38463     00          | 	byte	0
38464                 | LR__5864
38464     61 64 64 72 | 	byte	"addr"
38468     00          | 	byte	0
38469                 | LR__5865
38469     61 73 63    | 	byte	"asc"
3846c     00          | 	byte	0
3846d                 | LR__5866
3846d     61 73 69 6E | 	byte	"asin"
38471     00          | 	byte	0
38472                 | LR__5867
38472     61 74 6E    | 	byte	"atn"
38475     00          | 	byte	0
38476                 | LR__5868
38476     62 69 6E 24 | 	byte	"bin$"
3847a     00          | 	byte	0
3847b                 | LR__5869
3847b     63 68 72 24 | 	byte	"chr$"
3847f     00          | 	byte	0
38480                 | LR__5870
38480     63 6F 67 69 
38484     6E 69 74    | 	byte	"coginit"
38487     00          | 	byte	0
38488                 | LR__5871
38488     63 6F 73    | 	byte	"cos"
3848b     00          | 	byte	0
3848c                 | LR__5872
3848c     64 70 65 65 
38490     6B          | 	byte	"dpeek"
38491     00          | 	byte	0
38492                 | LR__5873
38492     66 69 6E 64 
38496     66 69 72 73 
3849a     74          | 	byte	"findfirst"
3849b     00          | 	byte	0
3849c                 | LR__5874
3849c     66 69 6E 64 
384a0     6E 65 78 74 | 	byte	"findnext"
384a4     00          | 	byte	0
384a5                 | LR__5875
384a5     66 72 61 6D 
384a9     65 62 75 66 | 	byte	"framebuf"
384ad     00          | 	byte	0
384ae                 | LR__5876
384ae     66 62 2E    | 	byte	"fb."
384b1     00          | 	byte	0
384b2                 | LR__5877
384b2     66 72 65    | 	byte	"fre"
384b5     00          | 	byte	0
384b6                 | LR__5878
384b6     67 63 2E    | 	byte	"gc."
384b9     00          | 	byte	0
384ba                 | LR__5879
384ba     67 65 74 63 
384be     6F 6C 6F 72 | 	byte	"getcolor"
384c2     00          | 	byte	0
384c3                 | LR__5880
384c3     67 65 74 70 
384c7     69 78 65 6C | 	byte	"getpixel"
384cb     00          | 	byte	0
384cc                 | LR__5881
384cc     67 65 2E    | 	byte	"ge."
384cf     00          | 	byte	0
384d0                 | LR__5882
384d0     67 65 74 65 
384d4     6E 76 73 75 
384d8     73 74 61 69 
384dc     6E          | 	byte	"getenvsustain"
384dd     00          | 	byte	0
384de                 | LR__5883
384de     67 65 74 6E 
384e2     6F 74 65 76 
384e6     61 6C 75 65 | 	byte	"getnotevalue"
384ea     00          | 	byte	0
384eb                 | LR__5884
384eb     67 65 74 72 
384ef     65 61 6C 66 
384f3     72 65 71    | 	byte	"getrealfreq"
384f6     00          | 	byte	0
384f7                 | LR__5885
384f7     67 65 74 74 
384fb     69 6D 65    | 	byte	"gettime"
384fe     00          | 	byte	0
384ff                 | LR__5886
384ff     67 74 2E    | 	byte	"gt."
38502     00          | 	byte	0
38503                 | LR__5887
38503     68 65 78 24 | 	byte	"hex$"
38507     00          | 	byte	0
38508                 | LR__5888
38508     69 6E 6B 65 
3850c     79 24       | 	byte	"inkey$"
3850e     00          | 	byte	0
3850f                 | LR__5889
3850f     69 6E 74    | 	byte	"int"
38512     00          | 	byte	0
38513                 | LR__5890
38513     6C 65 66 74 
38517     24          | 	byte	"left$"
38518     00          | 	byte	0
38519                 | LR__5891
38519     6C 65 6E    | 	byte	"len"
3851c     00          | 	byte	0
3851d                 | LR__5892
3851d     6C 6F 67    | 	byte	"log"
38520     00          | 	byte	0
38521                 | LR__5893
38521     6C 70 65 65 
38525     6B          | 	byte	"lpeek"
38526     00          | 	byte	0
38527                 | LR__5894
38527     6D 65 6D 74 
3852b     6F 70       | 	byte	"memtop"
3852d     00          | 	byte	0
3852e                 | LR__5895
3852e     6D 65 6D 6C 
38532     6F          | 	byte	"memlo"
38533     00          | 	byte	0
38534                 | LR__5896
38534     6D 69 64 24 | 	byte	"mid$"
38538     00          | 	byte	0
38539                 | LR__5897
38539     6D 6F 75 73 
3853d     65 6B       | 	byte	"mousek"
3853f     00          | 	byte	0
38540                 | LR__5898
38540     6D 6F 75 73 
38544     65 77       | 	byte	"mousew"
38546     00          | 	byte	0
38547                 | LR__5899
38547     6D 6F 75 73 
3854b     65 78       | 	byte	"mousex"
3854d     00          | 	byte	0
3854e                 | LR__5900
3854e     6D 6F 75 73 
38552     65 79       | 	byte	"mousey"
38554     00          | 	byte	0
38555                 | LR__5901
38555     70 61 64 73 | 	byte	"pads"
38559     00          | 	byte	0
3855a                 | LR__5902
3855a     70 61 64 77 | 	byte	"padw"
3855e     00          | 	byte	0
3855f                 | LR__5903
3855f     70 61 64 78 | 	byte	"padx"
38563     00          | 	byte	0
38564                 | LR__5904
38564     70 61 64 79 | 	byte	"pady"
38568     00          | 	byte	0
38569                 | LR__5905
38569     70 61 64 7A | 	byte	"padz"
3856d     00          | 	byte	0
3856e                 | LR__5906
3856e     70 61 64 72 
38572     78          | 	byte	"padrx"
38573     00          | 	byte	0
38574                 | LR__5907
38574     70 61 64 72 
38578     79          | 	byte	"padry"
38579     00          | 	byte	0
3857a                 | LR__5908
3857a     70 61 64 72 
3857e     7A          | 	byte	"padrz"
3857f     00          | 	byte	0
38580                 | LR__5909
38580     70 61 64 68 | 	byte	"padh"
38584     00          | 	byte	0
38585                 | LR__5910
38585     70 65 65 6B | 	byte	"peek"
38589     00          | 	byte	0
3858a                 | LR__5911
3858a     70 69 6E 72 
3858e     65 61 64    | 	byte	"pinread"
38591     00          | 	byte	0
38592                 | LR__5912
38592     72 64 70 69 
38596     6E          | 	byte	"rdpin"
38597     00          | 	byte	0
38598                 | LR__5913
38598     72 69 67 68 
3859c     74 24       | 	byte	"right$"
3859e     00          | 	byte	0
3859f                 | LR__5914
3859f     72 71 70 69 
385a3     6E          | 	byte	"rqpin"
385a4     00          | 	byte	0
385a5                 | LR__5915
385a5     72 6F 75 6E 
385a9     64          | 	byte	"round"
385aa     00          | 	byte	0
385ab                 | LR__5916
385ab     72 6E 64    | 	byte	"rnd"
385ae     00          | 	byte	0
385af                 | LR__5917
385af     73 69 6E    | 	byte	"sin"
385b2     00          | 	byte	0
385b3                 | LR__5918
385b3     73 71 72    | 	byte	"sqr"
385b6     00          | 	byte	0
385b7                 | LR__5919
385b7     73 74 69 63 
385bb     6B          | 	byte	"stick"
385bc     00          | 	byte	0
385bd                 | LR__5920
385bd     73 74 72 69 
385c1     67          | 	byte	"strig"
385c2     00          | 	byte	0
385c3                 | LR__5921
385c3     73 74 72 24 | 	byte	"str$"
385c7     00          | 	byte	0
385c8                 | LR__5922
385c8     74 61 6E    | 	byte	"tan"
385cb     00          | 	byte	0
385cc                 | LR__5923
385cc     76 61 6C    | 	byte	"val"
385cf     00          | 	byte	0
385d0                 | LR__5924
385d0     76 61 72 70 
385d4     74 72       | 	byte	"varptr"
385d6     00          | 	byte	0
385d7                 | LR__5925
385d7     61          | 	byte	"a"
385d8     00          | 	byte	0
385d9                 | LR__5926
385d9     7A          | 	byte	"z"
385da     00          | 	byte	0
385db                 | LR__5927
385db     5F          | 	byte	"_"
385dc     00          | 	byte	0
385dd                 | LR__5928
385dd     61          | 	byte	"a"
385de     00          | 	byte	0
385df                 | LR__5929
385df     7A          | 	byte	"z"
385e0     00          | 	byte	0
385e1                 | LR__5930
385e1     30          | 	byte	"0"
385e2     00          | 	byte	0
385e3                 | LR__5931
385e3     39          | 	byte	"9"
385e4     00          | 	byte	0
385e5                 | LR__5932
385e5     5F          | 	byte	"_"
385e6     00          | 	byte	0
385e7                 | LR__5933
385e7     2E          | 	byte	"."
385e8     00          | 	byte	0
385e9                 | LR__5934
385e9     61          | 	byte	"a"
385ea     00          | 	byte	0
385eb                 | LR__5935
385eb     7A          | 	byte	"z"
385ec     00          | 	byte	0
385ed                 | LR__5936
385ed     30          | 	byte	"0"
385ee     00          | 	byte	0
385ef                 | LR__5937
385ef     39          | 	byte	"9"
385f0     00          | 	byte	0
385f1                 | LR__5938
385f1     5F          | 	byte	"_"
385f2     00          | 	byte	0
385f3                 | LR__5939
385f3     24          | 	byte	"$"
385f4     00          | 	byte	0
385f5                 | LR__5940
385f5     25          | 	byte	"%"
385f6     00          | 	byte	0
385f7                 | LR__5941
385f7     21          | 	byte	"!"
385f8     00          | 	byte	0
385f9                 | LR__5942
385f9     30          | 	byte	"0"
385fa     00          | 	byte	0
385fb                 | LR__5943
385fb     39          | 	byte	"9"
385fc     00          | 	byte	0
385fd                 | LR__5944
385fd     2E          | 	byte	"."
385fe     00          | 	byte	0
385ff                 | LR__5945
385ff     24          | 	byte	"$"
38600     00          | 	byte	0
38601                 | LR__5946
38601     25          | 	byte	"%"
38602     00          | 	byte	0
38603                 | LR__5947
38603     2D          | 	byte	"-"
38604     00          | 	byte	0
38605                 | LR__5948
38605     2E          | 	byte	"."
38606     00          | 	byte	0
38607                 | LR__5949
38607     24          | 	byte	"$"
38608     00          | 	byte	0
38609                 | LR__5950
38609     25          | 	byte	"%"
3860a     00          | 	byte	0
3860b                 | LR__5951
3860b     30          | 	byte	"0"
3860c     00          | 	byte	0
3860d                 | LR__5952
3860d     39          | 	byte	"9"
3860e     00          | 	byte	0
3860f                 | LR__5953
3860f     5F          | 	byte	"_"
38610     00          | 	byte	0
38611                 | LR__5954
38611     2E          | 	byte	"."
38612     00          | 	byte	0
38613                 | LR__5955
38613     45          | 	byte	"E"
38614     00          | 	byte	0
38615                 | LR__5956
38615     65          | 	byte	"e"
38616     00          | 	byte	0
38617                 | LR__5957
38617     2D          | 	byte	"-"
38618     00          | 	byte	0
38619                 | LR__5958
38619     61          | 	byte	"a"
3861a     00          | 	byte	0
3861b                 | LR__5959
3861b     66          | 	byte	"f"
3861c     00          | 	byte	0
3861d                 | LR__5960
3861d     30          | 	byte	"0"
3861e     00          | 	byte	0
3861f                 | LR__5961
3861f     31          | 	byte	"1"
38620     00          | 	byte	0
38621                 | LR__5962
38621     5F          | 	byte	"_"
38622     00          | 	byte	0
38623                 | LR__5963
38623     2D          | 	byte	"-"
38624     00          | 	byte	0
38625                 | LR__5964
38625     65          | 	byte	"e"
38626     00          | 	byte	0
38627                 | LR__5965
38627     2E          | 	byte	"."
38628     00          | 	byte	0
38629                 | LR__5966
38629     45          | 	byte	"E"
3862a     00          | 	byte	0
3862b                 | LR__5967
3862b     65          | 	byte	"e"
3862c     00          | 	byte	0
3862d                 | LR__5968
3862d     30          | 	byte	"0"
3862e     00          | 	byte	0
3862f                 | LR__5969
3862f     39          | 	byte	"9"
38630     00          | 	byte	0
38631                 | LR__5970
38631     24          | 	byte	"$"
38632     00          | 	byte	0
38633                 | LR__5971
38633     25          | 	byte	"%"
38634     00          | 	byte	0
38635                 | LR__5972
38635     2D          | 	byte	"-"
38636     00          | 	byte	0
38637                 | LR__5973
38637     24          | 	byte	"$"
38638     00          | 	byte	0
38639                 | LR__5974
38639     25          | 	byte	"%"
3863a     00          | 	byte	0
3863b                 | LR__5975
3863b     30          | 	byte	"0"
3863c     00          | 	byte	0
3863d                 | LR__5976
3863d     39          | 	byte	"9"
3863e     00          | 	byte	0
3863f                 | LR__5977
3863f     5F          | 	byte	"_"
38640     00          | 	byte	0
38641                 | LR__5978
38641     30          | 	byte	"0"
38642     00          | 	byte	0
38643                 | LR__5979
38643     39          | 	byte	"9"
38644     00          | 	byte	0
38645                 | LR__5980
38645     61          | 	byte	"a"
38646     00          | 	byte	0
38647                 | LR__5981
38647     66          | 	byte	"f"
38648     00          | 	byte	0
38649                 | LR__5982
38649     5F          | 	byte	"_"
3864a     00          | 	byte	0
3864b                 | LR__5983
3864b     30          | 	byte	"0"
3864c     00          | 	byte	0
3864d                 | LR__5984
3864d     31          | 	byte	"1"
3864e     00          | 	byte	0
3864f                 | LR__5985
3864f     5F          | 	byte	"_"
38650     00          | 	byte	0
38651                 | LR__5986
38651     30          | 	byte	"0"
38652     00          | 	byte	0
38653                 | LR__5987
38653     39          | 	byte	"9"
38654     00          | 	byte	0
38655                 | LR__5988
38655     5F          | 	byte	"_"
38656     00          | 	byte	0
38657                 | LR__5989
38657     22          | 	byte	34
38658     00          | 	byte	0
38659                 | LR__5990
38659     22          | 	byte	34
3865a     00          | 	byte	0
3865b                 | LR__5991
3865b     44 69 6D 3A 
3865f     20 61 74 20 
38663     6C 69 6E 65 
38667     20          | 	byte	"Dim: at line "
38668     00          | 	byte	0
38669                 | LR__5992
38669     3A 20 77 61 
3866d     72 6E 69 6E 
38671     67 3A 20 74 
38675     68 65 20 76 
38679     61 72 69 61 
3867d     62 6C 65 20 
38681     65 78 69 73 
38685     74 65 64 2E | 	byte	": warning: the variable existed."
38689     00          | 	byte	0
3868a                 | LR__5993
3868a     28          | 	byte	"("
3868b     00          | 	byte	0
3868c                 | LR__5994
3868c     61 73       | 	byte	"as"
3868e     00          | 	byte	0
3868f                 | LR__5995
3868f     61 73       | 	byte	"as"
38691     00          | 	byte	0
38692                 | LR__5996
38692     2C          | 	byte	","
38693     00          | 	byte	0
38694                 | LR__5997
38694     29          | 	byte	")"
38695     00          | 	byte	0
38696                 | LR__5998
38696     29          | 	byte	")"
38697     00          | 	byte	0
38698                 | LR__5999
38698     61 73       | 	byte	"as"
3869a     00          | 	byte	0
3869b                 | LR__6000
3869b     62 79 74 65 | 	byte	"byte"
3869f     00          | 	byte	0
386a0                 | LR__6001
386a0     75 62 79 74 
386a4     65          | 	byte	"ubyte"
386a5     00          | 	byte	0
386a6                 | LR__6002
386a6     73 68 6F 72 
386aa     74          | 	byte	"short"
386ab     00          | 	byte	0
386ac                 | LR__6003
386ac     75 73 68 6F 
386b0     72 74       | 	byte	"ushort"
386b2     00          | 	byte	0
386b3                 | LR__6004
386b3     6C 6F 6E 67 | 	byte	"long"
386b7     00          | 	byte	0
386b8                 | LR__6005
386b8     69 6E 74 65 
386bc     67 65 72    | 	byte	"integer"
386bf     00          | 	byte	0
386c0                 | LR__6006
386c0     75 6C 6F 6E 
386c4     67          | 	byte	"ulong"
386c5     00          | 	byte	0
386c6                 | LR__6007
386c6     69 6E 74 36 
386ca     34          | 	byte	"int64"
386cb     00          | 	byte	0
386cc                 | LR__6008
386cc     75 69 6E 74 
386d0     36 34       | 	byte	"uint64"
386d2     00          | 	byte	0
386d3                 | LR__6009
386d3     73 69 6E 67 
386d7     6C 65       | 	byte	"single"
386d9     00          | 	byte	0
386da                 | LR__6010
386da     64 6F 75 62 
386de     6C 65       | 	byte	"double"
386e0     00          | 	byte	0
386e1                 | LR__6011
386e1     73 74 72 69 
386e5     6E 67       | 	byte	"string"
386e7     00          | 	byte	0
386e8                 | LR__6012
386e8     74 6F       | 	byte	"to"
386ea     00          | 	byte	0
386eb                 | LR__6013
386eb     73 74 65 70 | 	byte	"step"
386ef     00          | 	byte	0
386f0                 | LR__6014
386f0     73 2E       | 	byte	"s."
386f2     00          | 	byte	0
386f3                 | LR__6015
386f3     73 2E       | 	byte	"s."
386f5     00          | 	byte	0
386f6                 | LR__6016
386f6     67 6F 74 6F | 	byte	"goto"
386fa     00          | 	byte	0
386fb                 | LR__6017
386fb     67 6F 73 75 
386ff     62          | 	byte	"gosub"
38700     00          | 	byte	0
38701                 | LR__6018
38701     24          | 	byte	"$"
38702     00          | 	byte	0
38703                 | LR__6019
38703     26 68       | 	byte	"&h"
38705     00          | 	byte	0
38706                 | LR__6020
38706     25          | 	byte	"%"
38707     00          | 	byte	0
38708                 | LR__6021
38708     26 62       | 	byte	"&b"
3870a     00          | 	byte	0
3870b                 | LR__6022
3870b                 | 	byte	
3870b     00          | 	byte	0
3870c                 | LR__6023
3870c     61 63 6F 73 
38710     3A 20       | 	byte	"acos: "
38712     00          | 	byte	0
38713                 | LR__6024
38713     61 73 63 3A 
38717     20          | 	byte	"asc: "
38718     00          | 	byte	0
38719                 | LR__6025
38719     61 73 63 3A 
3871d     20          | 	byte	"asc: "
3871e     00          | 	byte	0
3871f                 | LR__6026
3871f     61 73 69 6E 
38723     3A 20       | 	byte	"asin: "
38725     00          | 	byte	0
38726                 | LR__6027
38726     61 74 6E 3A 
3872a     20          | 	byte	"atn: "
3872b     00          | 	byte	0
3872c                 | LR__6028
3872c     62 6C 69 74 
38730     3A 20       | 	byte	"blit: "
38732     00          | 	byte	0
38733                 | LR__6029
38733     62 69 6E 24 
38737     3A 20       | 	byte	"bin$: "
38739     00          | 	byte	0
3873a                 | LR__6030
3873a     2F          | 	byte	"/"
3873b     00          | 	byte	0
3873c                 | LR__6031
3873c     2F 73 64 2F 
38740     62 69 6E 2F | 	byte	"/sd/bin/"
38744     00          | 	byte	0
38745                 | LR__6032
38745     53 79 73 74 
38749     65 6D 20 65 
3874d     72 72 6F 72 
38751     20          | 	byte	"System error "
38752     00          | 	byte	0
38753                 | LR__6033
38753     3A 20       | 	byte	": "
38755     00          | 	byte	0
38756                 | LR__6034
38756     2A          | 	byte	"*"
38757     00          | 	byte	0
38758                 | LR__6035
38758     2E 2E       | 	byte	".."
3875a     00          | 	byte	0
3875b                 | LR__6036
3875b     2F          | 	byte	"/"
3875c     00          | 	byte	0
3875d                 | LR__6037
3875d     2F          | 	byte	"/"
3875e     00          | 	byte	0
3875f                 | LR__6038
3875f     53 79 73 74 
38763     65 6D 20 65 
38767     72 72 6F 72 
3876b     20          | 	byte	"System error "
3876c     00          | 	byte	0
3876d                 | LR__6039
3876d     3A 20       | 	byte	": "
3876f     00          | 	byte	0
38770                 | LR__6040
38770     43 75 72 72 
38774     65 6E 74 20 
38778     64 69 72 65 
3877c     63 74 6F 72 
38780     79 3A 20    | 	byte	"Current directory: "
38783     00          | 	byte	0
38784                 | LR__6041
38784     2F          | 	byte	"/"
38785     00          | 	byte	0
38786                 | LR__6042
38786     53 79 73 74 
3878a     65 6D 20 65 
3878e     72 72 6F 72 
38792     20          | 	byte	"System error "
38793     00          | 	byte	0
38794                 | LR__6043
38794     3A 20       | 	byte	": "
38796     00          | 	byte	0
38797                 | LR__6044
38797     43 75 72 72 
3879b     65 6E 74 20 
3879f     64 69 72 65 
387a3     63 74 6F 72 
387a7     79 3A 20    | 	byte	"Current directory: "
387aa     00          | 	byte	0
387ab                 | LR__6045
387ab     2F          | 	byte	"/"
387ac     00          | 	byte	0
387ad                 | LR__6046
387ad     2F          | 	byte	"/"
387ae     00          | 	byte	0
387af                 | LR__6047
387af     2F          | 	byte	"/"
387b0     00          | 	byte	0
387b1                 | LR__6048
387b1     53 79 73 74 
387b5     65 6D 20 65 
387b9     72 72 6F 72 
387bd     20          | 	byte	"System error "
387be     00          | 	byte	0
387bf                 | LR__6049
387bf     3A 20       | 	byte	": "
387c1     00          | 	byte	0
387c2                 | LR__6050
387c2     43 75 72 72 
387c6     65 6E 74 20 
387ca     64 69 72 65 
387ce     63 74 6F 72 
387d2     79 3A 20    | 	byte	"Current directory: "
387d5     00          | 	byte	0
387d6                 | LR__6051
387d6     63 68 72 24 
387da     3A 20       | 	byte	"chr$: "
387dc     00          | 	byte	0
387dd                 | LR__6052
387dd     63 68 61 6E 
387e1     6E 65 6C 23 
387e5     20 65 78 70 
387e9     65 63 74 65 
387ed     64          | 	byte	"channel# expected"
387ee     00          | 	byte	0
387ef                 | LR__6053
387ef     63 6F 67 69 
387f3     6E 69 74 3A 
387f7     20          | 	byte	"coginit: "
387f8     00          | 	byte	0
387f9                 | LR__6054
387f9     53 79 73 74 
387fd     65 6D 20 65 
38801     72 72 6F 72 
38805     20 2D 20    | 	byte	"System error - "
38808     00          | 	byte	0
38809                 | LR__6055
38809     20 69 6E 20 
3880d     6C 69 6E 65 
38811     20          | 	byte	" in line "
38812     00          | 	byte	0
38813                 | LR__6056
38813     3A 20       | 	byte	": "
38815     00          | 	byte	0
38816                 | LR__6057
38816     2C 20 66 69 
3881a     6C 65 20 6E 
3881e     61 6D 65 3A 
38822     20          | 	byte	", file name: "
38823     00          | 	byte	0
38824                 | LR__6058
38824     53 79 73 74 
38828     65 6D 20 65 
3882c     72 72 6F 72 
38830     20 2D 20    | 	byte	"System error - "
38833     00          | 	byte	0
38834                 | LR__6059
38834     20 69 6E 20 
38838     6C 69 6E 65 
3883c     20          | 	byte	" in line "
3883d     00          | 	byte	0
3883e                 | LR__6060
3883e     3A 20       | 	byte	": "
38840     00          | 	byte	0
38841                 | LR__6061
38841     2C 20 66 69 
38845     6C 65 20 6E 
38849     61 6D 65 3A 
3884d     20          | 	byte	", file name: "
3884e     00          | 	byte	0
3884f                 | LR__6062
3884f     63 6F 73 3A 
38853     20          | 	byte	"cos: "
38854     00          | 	byte	0
38855                 | LR__6063
38855                 | 	byte	
38855     00          | 	byte	0
38856                 | LR__6064
38856                 | 	byte	
38856     00          | 	byte	0
38857                 | LR__6065
38857     2F 73 64 2F 
3885b     6D 65 64 69 
3885f     61 2F 68 2F | 	byte	"/sd/media/h/"
38863     00          | 	byte	0
38864                 | LR__6066
38864     53 79 73 74 
38868     65 6D 20 65 
3886c     72 72 6F 72 
38870     20          | 	byte	"System error "
38871     00          | 	byte	0
38872                 | LR__6067
38872     3A 20       | 	byte	": "
38874     00          | 	byte	0
38875                 | LR__6068
38875                 | 	byte	
38875     00          | 	byte	0
38876                 | LR__6069
38876                 | 	byte	
38876     00          | 	byte	0
38877                 | LR__6070
38877     2F 73 64 2F 
3887b     6D 65 64 69 
3887f     61 2F 73 2F | 	byte	"/sd/media/s/"
38883     00          | 	byte	0
38884                 | LR__6071
38884     53 79 73 74 
38888     65 6D 20 65 
3888c     72 72 6F 72 
38890     20          | 	byte	"System error "
38891     00          | 	byte	0
38892                 | LR__6072
38892     3A 20       | 	byte	": "
38894     00          | 	byte	0
38895                 | LR__6073
38895     2F          | 	byte	"/"
38896     00          | 	byte	0
38897                 | LR__6074
38897     2F          | 	byte	"/"
38898     00          | 	byte	0
38899                 | LR__6075
38899     2F          | 	byte	"/"
3889a     00          | 	byte	0
3889b                 | LR__6076
3889b     43 61 6E 6E 
3889f     6F 74 20 64 
388a3     65 6C 65 74 
388a7     65 20 66 69 
388ab     6C 65 20 6F 
388af     72 20 66 69 
388b3     6C 65 20 64 
388b7     6F 65 73 6E 
388bb     27 74 20 65 
388bf     78 69 73 74 
388c3     3A 20 73 79 
388c7     73 74 65 6D 
388cb     20 65 72 72 
388cf     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
388d2     00          | 	byte	0
388d3                 | LR__6077
388d3     43 75 72 72 
388d7     65 6E 74 20 
388db     64 69 72 65 
388df     63 74 6F 72 
388e3     79 3A 20    | 	byte	"Current directory: "
388e6     00          | 	byte	0
388e7                 | LR__6078
388e7                 | 	byte	
388e7     00          | 	byte	0
388e8                 | LR__6079
388e8     2A          | 	byte	"*"
388e9     00          | 	byte	0
388ea                 | LR__6080
388ea                 | 	byte	
388ea     00          | 	byte	0
388eb                 | LR__6081
388eb     5B 64 69 72 
388ef     5D 20       | 	byte	"[dir] "
388f1     00          | 	byte	0
388f2                 | LR__6082
388f2     4D 6F 72 65 
388f6     20 74 68 61 
388fa     6E 20 31 32 
388fe     38 20 65 6E 
38902     74 72 69 65 
38906     73 20 66 6F 
3890a     75 6E 64 3A 
3890e     20 63 6C 65 
38912     61 6E 20 79 
38916     6F 75 72 20 
3891a     64 69 72 65 
3891e     63 74 6F 72 
38922     79          | 	byte	"More than 128 entries found: clean your directory"
38923     00          | 	byte	0
38924                 | LR__6083
38924     2A          | 	byte	"*"
38925     00          | 	byte	0
38926                 | LR__6084
38926                 | 	byte	
38926     00          | 	byte	0
38927                 | LR__6085
38927     4D 6F 72 65 
3892b     20 74 68 61 
3892f     6E 20 31 32 
38933     38 20 65 6E 
38937     74 72 69 65 
3893b     73 20 66 6F 
3893f     75 6E 64 3A 
38943     20 63 6C 65 
38947     61 6E 20 79 
3894b     6F 75 72 20 
3894f     64 69 72 65 
38953     63 74 6F 72 
38957     79          | 	byte	"More than 128 entries found: clean your directory"
38958     00          | 	byte	0
38959                 | LR__6086
38959     45 72 72 6F 
3895d     72 20       | 	byte	"Error "
3895f     00          | 	byte	0
38960                 | LR__6087
38960     3A 20       | 	byte	": "
38962     00          | 	byte	0
38963                 | LR__6088
38963     66 69 6E 64 
38967     66 69 72 73 
3896b     74 3A 20    | 	byte	"findfirst: "
3896e     00          | 	byte	0
3896f                 | LR__6089
3896f     66 69 6E 64 
38973     66 69 72 73 
38977     74 3A 20    | 	byte	"findfirst: "
3897a     00          | 	byte	0
3897b                 | LR__6090
3897b     66 69 6E 64 
3897f     66 69 72 73 
38983     74 3A 20    | 	byte	"findfirst: "
38986     00          | 	byte	0
38987                 | LR__6091
38987                 | 	byte	
38987     00          | 	byte	0
38988                 | LR__6092
38988     66 69 6E 64 
3898c     66 69 72 73 
38990     74 3A 20    | 	byte	"findfirst: "
38993     00          | 	byte	0
38994                 | LR__6093
38994                 | 	byte	
38994     00          | 	byte	0
38995                 | LR__6094
38995     64 69 72    | 	byte	"dir"
38998     00          | 	byte	0
38999                 | LR__6095
38999     66 69 6E 64 
3899d     6E 65 78 74 
389a1     3A 20       | 	byte	"findnext: "
389a3     00          | 	byte	0
389a4                 | LR__6096
389a4     67 65 74 63 
389a8     6F 6C 6F 72 
389ac     20          | 	byte	"getcolor "
389ad     00          | 	byte	0
389ae                 | LR__6097
389ae     67 65 74 65 
389b2     6E 76 73 75 
389b6     73 74 61 69 
389ba     6E 3A 20    | 	byte	"getenvsustain: "
389bd     00          | 	byte	0
389be                 | LR__6098
389be     67 65 74 70 
389c2     69 78 65 6C 
389c6     3A 20       | 	byte	"getpixel: "
389c8     00          | 	byte	0
389c9                 | LR__6099
389c9     67 65 74 72 
389cd     65 61 6C 66 
389d1     72 65 71 3A 
389d5     20          | 	byte	"getrealfreq: "
389d6     00          | 	byte	0
389d7                 | LR__6100
389d7     68 65 78 24 
389db     3A 20       | 	byte	"hex$: "
389dd     00          | 	byte	0
389de                 | LR__6101
389de                 | 	byte	
389de     00          | 	byte	0
389df                 | LR__6102
389df     49 6E 20 69 
389e3     6E 70 75 74 
389e7     3A 20       | 	byte	"In input: "
389e9     00          | 	byte	0
389ea                 | LR__6103
389ea     2C          | 	byte	","
389eb     00          | 	byte	0
389ec                 | LR__6104
389ec                 | 	byte	
389ec     00          | 	byte	0
389ed                 | LR__6105
389ed                 | 	byte	
389ed     00          | 	byte	0
389ee                 | LR__6106
389ee     6C 65 66 74 
389f2     24 3A 20    | 	byte	"left$: "
389f5     00          | 	byte	0
389f6                 | LR__6107
389f6     6C 65 66 74 
389fa     24 3A 20    | 	byte	"left$: "
389fd     00          | 	byte	0
389fe                 | LR__6108
389fe     6C 65 6E 3A 
38a02     20          | 	byte	"len: "
38a03     00          | 	byte	0
38a04                 | LR__6109
38a04     6C 65 6E 3A 
38a08     20          | 	byte	"len: "
38a09     00          | 	byte	0
38a0a                 | LR__6110
38a0a                 | 	byte	
38a0a     00          | 	byte	0
38a0b                 | LR__6111
38a0b     2F          | 	byte	"/"
38a0c     00          | 	byte	0
38a0d                 | LR__6112
38a0d     2F          | 	byte	"/"
38a0e     00          | 	byte	0
38a0f                 | LR__6113
38a0f     2E 62 61 73 | 	byte	".bas"
38a13     00          | 	byte	0
38a14                 | LR__6114
38a14     53 79 73 74 
38a18     65 6D 20 65 
38a1c     72 72 6F 72 
38a20     20          | 	byte	"System error "
38a21     00          | 	byte	0
38a22                 | LR__6115
38a22     3A 20       | 	byte	": "
38a24     00          | 	byte	0
38a25                 | LR__6116
38a25     2E 62 61 73 | 	byte	".bas"
38a29     00          | 	byte	0
38a2a                 | LR__6117
38a2a     2F          | 	byte	"/"
38a2b     00          | 	byte	0
38a2c                 | LR__6118
38a2c                 | 	byte	
38a2c     00          | 	byte	0
38a2d                 | LR__6119
38a2d     4C 6F 61 64 
38a31     65 64 20    | 	byte	"Loaded "
38a34     00          | 	byte	0
38a35                 | LR__6120
38a35     2F          | 	byte	"/"
38a36     00          | 	byte	0
38a37                 | LR__6121
38a37     6C 6F 67 3A 
38a3b     20          | 	byte	"log: "
38a3c     00          | 	byte	0
38a3d                 | LR__6122
38a3d     6D 69 64 24 
38a41     3A 20       | 	byte	"mid$: "
38a43     00          | 	byte	0
38a44                 | LR__6123
38a44     6D 69 64 24 
38a48     3A 20       | 	byte	"mid$: "
38a4a     00          | 	byte	0
38a4b                 | LR__6124
38a4b     43 61 6E 6E 
38a4f     6F 74 20 63 
38a53     72 65 61 74 
38a57     65 20 61 20 
38a5b     64 69 72 65 
38a5f     63 74 6F 72 
38a63     79 3A 20 73 
38a67     79 73 74 65 
38a6b     6D 20 65 72 
38a6f     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
38a73     00          | 	byte	0
38a74                 | LR__6125
38a74     20 42 41 53 
38a78     49 43 20 62 
38a7c     79 74 65 73 
38a80     20 66 72 65 
38a84     65          | 	byte	" BASIC bytes free"
38a85     00          | 	byte	0
38a86                 | LR__6126
38a86                 | 	byte	
38a86     00          | 	byte	0
38a87                 | LR__6127
38a87                 | 	byte	
38a87     00          | 	byte	0
38a88                 | LR__6128
38a88                 | 	byte	
38a88     00          | 	byte	0
38a89                 | LR__6129
38a89     6E 6F 6E 61 
38a8d     6D 65 2E 62 
38a91     61 73       | 	byte	"noname.bas"
38a93     00          | 	byte	0
38a94                 | LR__6130
38a94     66 69 6C 65 
38a98     6E 61 6D 65 
38a9c     20 65 78 70 
38aa0     65 63 74 65 
38aa4     64          | 	byte	"filename expected"
38aa5     00          | 	byte	0
38aa6                 | LR__6131
38aa6     72 65 61 64 | 	byte	"read"
38aaa     00          | 	byte	0
38aab                 | LR__6132
38aab     77 72 69 74 
38aaf     65          | 	byte	"write"
38ab0     00          | 	byte	0
38ab1                 | LR__6133
38ab1     61 70 70 65 
38ab5     6E 64       | 	byte	"append"
38ab7     00          | 	byte	0
38ab8                 | LR__6134
38ab8     63 68 61 6E 
38abc     6E 65 6C 23 
38ac0     20 65 78 70 
38ac4     65 63 74 65 
38ac8     64          | 	byte	"channel# expected"
38ac9     00          | 	byte	0
38aca                 | LR__6135
38aca     4F 70 65 6E 
38ace     3A 20 69 6E 
38ad2     76 61 6C 69 
38ad6     64 20 6D 6F 
38ada     64 65       | 	byte	"Open: invalid mode"
38adc     00          | 	byte	0
38add                 | LR__6136
38add     70 61 64 72 
38ae1     78 3A 20    | 	byte	"padrx: "
38ae4     00          | 	byte	0
38ae5                 | LR__6137
38ae5     70 61 64 72 
38ae9     79 3A 20    | 	byte	"padry: "
38aec     00          | 	byte	0
38aed                 | LR__6138
38aed     70 61 64 72 
38af1     7A 3A 20    | 	byte	"padrz: "
38af4     00          | 	byte	0
38af5                 | LR__6139
38af5     70 61 64 73 
38af9     3A 20       | 	byte	"pads: "
38afb     00          | 	byte	0
38afc                 | LR__6140
38afc     70 61 64 77 
38b00     3A 20       | 	byte	"padw: "
38b02     00          | 	byte	0
38b03                 | LR__6141
38b03     70 61 64 78 
38b07     3A 20       | 	byte	"padx: "
38b09     00          | 	byte	0
38b0a                 | LR__6142
38b0a     70 61 64 79 
38b0e     3A 20       | 	byte	"pady: "
38b10     00          | 	byte	0
38b11                 | LR__6143
38b11     70 61 64 7A 
38b15     3A 20       | 	byte	"padz: "
38b17     00          | 	byte	0
38b18                 | LR__6144
38b18     50 72 69 6E 
38b1c     74 20 74 6F 
38b20     20 63 68 61 
38b24     6E 6E 65 6C 
38b28     20 28 6E 6F 
38b2c     74 20 79 65 
38b30     74 20 69 6D 
38b34     70 6C 65 6D 
38b38     65 6E 74 65 
38b3c     64 29       | 	byte	"Print to channel (not yet implemented)"
38b3e     00          | 	byte	0
38b3f                 | LR__6145
38b3f                 | 	byte	
38b3f     00          | 	byte	0
38b40                 | LR__6146
38b40     64 61 74 61 | 	byte	"data"
38b44     00          | 	byte	0
38b45                 | LR__6147
38b45                 | 	byte	
38b45     00          | 	byte	0
38b46                 | LR__6148
38b46     49 6E 20 72 
38b4a     65 61 64 3A 
38b4e     20          | 	byte	"In read: "
38b4f     00          | 	byte	0
38b50                 | LR__6149
38b50                 | 	byte	
38b50     00          | 	byte	0
38b51                 | LR__6150
38b51                 | 	byte	
38b51     00          | 	byte	0
38b52                 | LR__6151
38b52     27          | 	byte	"'"
38b53     00          | 	byte	0
38b54                 | LR__6152
38b54     2C          | 	byte	","
38b55     00          | 	byte	0
38b56                 | LR__6153
38b56                 | 	byte	
38b56     00          | 	byte	0
38b57                 | LR__6154
38b57                 | 	byte	
38b57     00          | 	byte	0
38b58                 | LR__6155
38b58                 | 	byte	
38b58     00          | 	byte	0
38b59                 | LR__6156
38b59                 | 	byte	
38b59     00          | 	byte	0
38b5a                 | LR__6157
38b5a                 | 	byte	
38b5a     00          | 	byte	0
38b5b                 | LR__6158
38b5b     72 69 67 68 
38b5f     74 24 3A 20 | 	byte	"right$: "
38b63     00          | 	byte	0
38b64                 | LR__6159
38b64     72 69 67 68 
38b68     74 24 3A 20 | 	byte	"right$: "
38b6c     00          | 	byte	0
38b6d                 | LR__6160
38b6d     72 6E 64 3A 
38b71     20          | 	byte	"rnd: "
38b72     00          | 	byte	0
38b73                 | LR__6161
38b73     72 6E 64 3A 
38b77     20          | 	byte	"rnd: "
38b78     00          | 	byte	0
38b79                 | LR__6162
38b79                 | 	byte	
38b79     00          | 	byte	0
38b7a                 | LR__6163
38b7a     53 74 6F 70 
38b7e     70 65 64 20 
38b82     61 74 20 6C 
38b86     69 6E 65 20 | 	byte	"Stopped at line "
38b8a     00          | 	byte	0
38b8b                 | LR__6164
38b8b                 | 	byte	
38b8b     00          | 	byte	0
38b8c                 | LR__6165
38b8c     2F          | 	byte	"/"
38b8d     00          | 	byte	0
38b8e                 | LR__6166
38b8e                 | 	byte	
38b8e     00          | 	byte	0
38b8f                 | LR__6167
38b8f     53 61 76 65 
38b93     64 20 61 73 
38b97     20          | 	byte	"Saved as "
38b98     00          | 	byte	0
38b99                 | LR__6168
38b99     2F          | 	byte	"/"
38b9a     00          | 	byte	0
38b9b                 | LR__6169
38b9b     73 65 74 63 
38b9f     6F 6C 6F 72 
38ba3     3A 20       | 	byte	"setcolor: "
38ba5     00          | 	byte	0
38ba6                 | LR__6170
38ba6     73 69 6E 3A 
38baa     20          | 	byte	"sin: "
38bab     00          | 	byte	0
38bac                 | LR__6171
38bac     73 71 72 3A 
38bb0     20          | 	byte	"sqr: "
38bb1     00          | 	byte	0
38bb2                 | LR__6172
38bb2     73 74 69 63 
38bb6     6B 3A 20    | 	byte	"stick: "
38bb9     00          | 	byte	0
38bba                 | LR__6173
38bba     73 74 72 24 
38bbe     3A 20       | 	byte	"str$: "
38bc0     00          | 	byte	0
38bc1                 | LR__6174
38bc1     73 74 72 69 
38bc5     67 3A 20    | 	byte	"strig: "
38bc8     00          | 	byte	0
38bc9                 | LR__6175
38bc9     74 61 6E 3A 
38bcd     20          | 	byte	"tan: "
38bce     00          | 	byte	0
38bcf                 | LR__6176
38bcf     76 61 6C 3A 
38bd3     20          | 	byte	"val: "
38bd4     00          | 	byte	0
38bd5                 | LR__6177
38bd5     76 61 6C 3A 
38bd9     20          | 	byte	"val: "
38bda     00          | 	byte	0
38bdb                 | LR__6178
38bdb     24          | 	byte	"$"
38bdc     00          | 	byte	0
38bdd                 | LR__6179
38bdd     26 68       | 	byte	"&h"
38bdf     00          | 	byte	0
38be0                 | LR__6180
38be0     25          | 	byte	"%"
38be1     00          | 	byte	0
38be2                 | LR__6181
38be2     26 62       | 	byte	"&b"
38be4     00          | 	byte	0
38be5                 | LR__6182
38be5                 | 	byte	
38be5     00          | 	byte	0
38be6                 | LR__6183
38be6     45 78 70 65 
38bea     63 74 65 64 
38bee     20 6E 75 6D 
38bf2     62 65 72 2C 
38bf6     20 67 6F 74 
38bfa     20 73 6F 6D 
38bfe     65 74 68 69 
38c02     6E 67 20 65 
38c06     6C 73 65    | 	byte	"Expected number, got something else"
38c09     00          | 	byte	0
38c0a                 | LR__6184
38c0a     43 61 6E 6E 
38c0e     6F 74 20 61 
38c12     64 64 20 61 
38c16     20 6E 75 6D 
38c1a     62 65 72 20 
38c1e     74 6F 20 61 
38c22     20 73 74 72 
38c26     69 6E 67    | 	byte	"Cannot add a number to a string"
38c29     00          | 	byte	0
38c2a                 | LR__6185
38c2a     43 61 6E 6E 
38c2e     6F 74 20 73 
38c32     75 62 73 74 
38c36     72 61 63 74 
38c3a     20 73 74 72 
38c3e     69 6E 67 73 | 	byte	"Cannot substract strings"
38c42     00          | 	byte	0
38c43                 | LR__6186
38c43     55 6E 6B 6E 
38c47     6F 77 6E 20 
38c4b     65 72 72 6F 
38c4f     72 20 77 68 
38c53     69 6C 65 20 
38c57     61 64 64 69 
38c5b     6E 67       | 	byte	"Unknown error while adding"
38c5d     00          | 	byte	0
38c5e                 | LR__6187
38c5e     55 6E 6B 6E 
38c62     6F 77 6E 20 
38c66     65 72 72 6F 
38c6a     72 20 77 68 
38c6e     69 6C 65 20 
38c72     73 75 62 73 
38c76     74 72 61 63 
38c7a     74 69 6E 67 | 	byte	"Unknown error while substracting"
38c7e     00          | 	byte	0
38c7f                 | LR__6188
38c7f     43 61 6E 6E 
38c83     6F 74 20 64 
38c87     6F 20 6C 6F 
38c8b     67 69 63 20 
38c8f     6F 70 65 72 
38c93     61 74 69 6F 
38c97     6E 20 6F 6E 
38c9b     20 73 74 72 
38c9f     69 6E 67 20 
38ca3     6F 72 20 66 
38ca7     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
38cab     00          | 	byte	0
38cac                 | LR__6189
38cac     55 6E 6B 6E 
38cb0     6F 77 6E 20 
38cb4     65 72 72 6F 
38cb8     72 20 77 68 
38cbc     69 6C 65 20 
38cc0     64 6F 69 6E 
38cc4     67 20 6C 6F 
38cc8     67 69 63 20 
38ccc     6F 70 65 72 
38cd0     61 74 69 6F 
38cd4     6E          | 	byte	"Unknown error while doing logic operation"
38cd5     00          | 	byte	0
38cd6                 | LR__6190
38cd6     43 61 6E 6E 
38cda     6F 74 20 6D 
38cde     75 6C 74 69 
38ce2     70 6C 79 20 
38ce6     73 74 72 69 
38cea     6E 67 73    | 	byte	"Cannot multiply strings"
38ced     00          | 	byte	0
38cee                 | LR__6191
38cee     55 6E 6B 6E 
38cf2     6F 77 6E 20 
38cf6     65 72 72 6F 
38cfa     72 20 77 68 
38cfe     69 6C 65 20 
38d02     6D 75 6C 74 
38d06     69 70 6C 79 
38d0a     69 6E 67    | 	byte	"Unknown error while multiplying"
38d0d     00          | 	byte	0
38d0e                 | LR__6192
38d0e     43 61 6E 6E 
38d12     6F 74 20 64 
38d16     69 76 69 64 
38d1a     65 20 73 74 
38d1e     72 69 6E 67 
38d22     73          | 	byte	"Cannot divide strings"
38d23     00          | 	byte	0
38d24                 | LR__6193
38d24     55 6E 6B 6E 
38d28     6F 77 6E 20 
38d2c     65 72 72 6F 
38d30     72 20 77 68 
38d34     69 6C 65 20 
38d38     64 69 76 69 
38d3c     64 69 6E 67 | 	byte	"Unknown error while dividing"
38d40     00          | 	byte	0
38d41                 | LR__6194
38d41     43 61 6E 6E 
38d45     6F 74 20 63 
38d49     6F 6D 70 75 
38d4d     74 65 20 61 
38d51     20 70 6F 77 
38d55     65 72 20 6F 
38d59     66 20 61 20 
38d5d     73 74 72 69 
38d61     6E 67       | 	byte	"Cannot compute a power of a string"
38d63     00          | 	byte	0
38d64                 | LR__6195
38d64     55 6E 6B 6E 
38d68     6F 77 6E 20 
38d6c     65 72 72 6F 
38d70     72 20 77 68 
38d74     69 6C 65 20 
38d78     63 6F 6D 70 
38d7c     75 74 69 6E 
38d80     67 20 61 20 
38d84     70 6F 77 65 
38d88     72          | 	byte	"Unknown error while computing a power"
38d89     00          | 	byte	0
38d8a                 | LR__6196
38d8a     52 69 67 68 
38d8e     74 20 70 61 
38d92     72 65 6E 74 
38d96     68 65 73 69 
38d9a     73 20 65 78 
38d9e     70 65 63 74 
38da2     65 64       | 	byte	"Right parenthesis expected"
38da4     00          | 	byte	0
38da5                 | LR__6197
38da5     45 78 70 65 
38da9     63 74 65 64 
38dad     20 73 74 72 
38db1     69 6E 67    | 	byte	"Expected string"
38db4     00          | 	byte	0
38db5                 | LR__6198
38db5     45 78 70 65 
38db9     63 74 65 64 
38dbd     20 66 6C 6F 
38dc1     61 74       | 	byte	"Expected float"
38dc3     00          | 	byte	0
38dc4                 | LR__6199
38dc4     45 78 70 65 
38dc8     63 74 65 64 
38dcc     20 75 6E 73 
38dd0     69 67 6E 65 
38dd4     64 20 69 6E 
38dd8     74 65 67 65 
38ddc     72          | 	byte	"Expected unsigned integer"
38ddd     00          | 	byte	0
38dde                 | LR__6200
38dde     45 78 70 65 
38de2     63 74 65 64 
38de6     20 69 6E 74 
38dea     65 67 65 72 | 	byte	"Expected integer"
38dee     00          | 	byte	0
38def                 | LR__6201
38def     4E 6F 20 6D 
38df3     6F 72 65 20 
38df7     76 61 72 69 
38dfb     61 62 6C 65 
38dff     20 73 6C 6F 
38e03     74 73       | 	byte	"No more variable slots"
38e05     00          | 	byte	0
38e06                 | LR__6202
38e06     56 61 72 69 
38e0a     61 62 6C 65 
38e0e     20 6E 6F 74 
38e12     20 66 6F 75 
38e16     6E 64       | 	byte	"Variable not found"
38e18     00          | 	byte	0
38e19                 | LR__6203
38e19     43 6F 6D 6D 
38e1d     61 20 65 78 
38e21     70 65 63 74 
38e25     65 64       | 	byte	"Comma expected"
38e27     00          | 	byte	0
38e28                 | LR__6204
38e28     43 6F 6D 6D 
38e2c     61 20 6F 72 
38e30     20 73 65 6D 
38e34     69 63 6F 6C 
38e38     6F 6E 20 65 
38e3c     78 70 65 63 
38e40     74 65 64    | 	byte	"Comma or semicolon expected"
38e43     00          | 	byte	0
38e44                 | LR__6205
38e44     55 6E 6B 6E 
38e48     6F 77 6E 20 
38e4c     63 6F 6D 6D 
38e50     61 6E 64    | 	byte	"Unknown command"
38e53     00          | 	byte	0
38e54                 | LR__6206
38e54     53 74 61 63 
38e58     6B 20 75 6E 
38e5c     64 65 72 66 
38e60     6C 6F 77    | 	byte	"Stack underflow"
38e63     00          | 	byte	0
38e64                 | LR__6207
38e64     43 61 6E 6E 
38e68     6F 74 20 65 
38e6c     78 65 63 75 
38e70     74 65 20 67 
38e74     6F 74 6F 20 
38e78     6F 72 20 67 
38e7c     6F 73 75 62 
38e80     20 69 6E 20 
38e84     74 68 65 20 
38e88     69 6D 6D 65 
38e8c     64 69 61 74 
38e90     65 20 6D 6F 
38e94     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
38e96     00          | 	byte	0
38e97                 | LR__6208
38e97     43 61 6E 6E 
38e9b     6F 74 20 6C 
38e9f     6F 61 64 20 
38ea3     66 72 6F 6D 
38ea7     20 74 68 69 
38eab     73 20 66 69 
38eaf     6C 65       | 	byte	"Cannot load from this file"
38eb1     00          | 	byte	0
38eb2                 | LR__6209
38eb2     54 68 65 20 
38eb6     70 72 6F 67 
38eba     72 61 6D 20 
38ebe     69 73 20 65 
38ec2     6D 70 74 79 | 	byte	"The program is empty"
38ec6     00          | 	byte	0
38ec7                 | LR__6210
38ec7     49 66 20 61 
38ecb     66 74 65 72 
38ecf     20 69 66    | 	byte	"If after if"
38ed2     00          | 	byte	0
38ed3                 | LR__6211
38ed3     45 6D 70 74 
38ed7     79 20 65 78 
38edb     70 72 65 73 
38edf     73 69 6F 6E | 	byte	"Empty expression"
38ee3     00          | 	byte	0
38ee4                 | LR__6212
38ee4     53 74 72 69 
38ee8     6E 67 20 65 
38eec     78 70 65 63 
38ef0     74 65 64    | 	byte	"String expected"
38ef3     00          | 	byte	0
38ef4                 | LR__6213
38ef4     49 6E 74 65 
38ef8     72 70 72 65 
38efc     74 65 72 20 
38f00     69 6E 74 65 
38f04     72 6E 61 6C 
38f08     20 65 72 72 
38f0c     6F 72       | 	byte	"Interpreter internal error"
38f0e     00          | 	byte	0
38f0f                 | LR__6214
38f0f     45 78 70 65 
38f13     63 74 65 64 
38f17     20 61 73 73 
38f1b     69 67 6E    | 	byte	"Expected assign"
38f1e     00          | 	byte	0
38f1f                 | LR__6215
38f1f     45 78 70 65 
38f23     63 74 65 64 
38f27     20 27 74 6F 
38f2b     27          | 	byte	"Expected 'to'"
38f2c     00          | 	byte	0
38f2d                 | LR__6216
38f2d     45 78 70 65 
38f31     63 74 65 64 
38f35     20 69 6E 74 
38f39     65 67 65 72 
38f3d     20 76 61 72 
38f41     69 61 62 6C 
38f45     65          | 	byte	"Expected integer variable"
38f46     00          | 	byte	0
38f47                 | LR__6217
38f47     55 6E 69 6E 
38f4b     69 74 69 61 
38f4f     6C 69 7A 65 
38f53     64 20 76 61 
38f57     72 69 61 62 
38f5b     6C 65 20 69 
38f5f     6E 20 27 6E 
38f63     65 78 74 27 
38f67     2C 20 75 73 
38f6b     65 20 27 66 
38f6f     6F 72 27 20 
38f73     62 65 66 6F 
38f77     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
38f79     00          | 	byte	0
38f7a                 | LR__6218
38f7a     4E 6F 20 6D 
38f7e     6F 72 65 20 
38f82     73 6C 6F 74 
38f86     73 20 66 6F 
38f8a     72 20 27 66 
38f8e     6F 72 27    | 	byte	"No more slots for 'for'"
38f91     00          | 	byte	0
38f92                 | LR__6219
38f92     27 4E 65 78 
38f96     74 27 20 64 
38f9a     6F 65 73 6E 
38f9e     27 74 20 6D 
38fa2     61 74 63 68 
38fa6     20 27 66 6F 
38faa     72 27       | 	byte	"'Next' doesn't match 'for'"
38fac     00          | 	byte	0
38fad                 | LR__6220
38fad     27 47 6F 74 
38fb1     6F 27 20 74 
38fb5     61 72 67 65 
38fb9     74 20 6C 69 
38fbd     6E 65 20 6E 
38fc1     6F 74 20 66 
38fc5     6F 75 6E 64 | 	byte	"'Goto' target line not found"
38fc9     00          | 	byte	0
38fca                 | LR__6221
38fca     42 61 64 20 
38fce     6E 75 6D 62 
38fd2     65 72 20 6F 
38fd6     66 20 70 61 
38fda     72 61 6D 65 
38fde     74 65 72 73 | 	byte	"Bad number of parameters"
38fe2     00          | 	byte	0
38fe3                 | LR__6222
38fe3     46 75 6E 63 
38fe7     74 69 6F 6E 
38feb     20 75 6E 64 
38fef     65 66 69 6E 
38ff3     65 64 20 66 
38ff7     6F 72 20 73 
38ffb     74 72 69 6E 
38fff     67 73       | 	byte	"Function undefined for strings"
39001     00          | 	byte	0
39002                 | LR__6223
39002     42 61 64 20 
39006     70 61 72 61 
3900a     6D 65 74 65 
3900e     72          | 	byte	"Bad parameter"
3900f     00          | 	byte	0
39010                 | LR__6224
39010     43 61 6E 6E 
39014     6F 74 20 64 
39018     65 63 6C 61 
3901c     72 65 20 61 
39020     6E 20 61 72 
39024     72 61 79 3A 
39028     20 74 68 65 
3902c     20 76 61 72 
39030     69 61 62 6C 
39034     65 20 65 78 
39038     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3903c     00          | 	byte	0
3903d                 | LR__6225
3903d     45 78 70 65 
39041     63 74 65 64 
39045     20 27 28 27 | 	byte	"Expected '('"
39049     00          | 	byte	0
3904a                 | LR__6226
3904a     45 78 70 65 
3904e     63 74 65 64 
39052     20 27 29 27 
39056     20 6F 72 20 
3905a     27 2C 27    | 	byte	"Expected ')' or ','"
3905d     00          | 	byte	0
3905e                 | LR__6227
3905e     4E 6F 20 6D 
39062     6F 72 65 20 
39066     74 68 61 6E 
3906a     20 33 20 64 
3906e     69 6D 65 6E 
39072     73 69 6F 6E 
39076     73 20 73 75 
3907a     70 70 6F 72 
3907e     74 65 64    | 	byte	"No more than 3 dimensions supported"
39081     00          | 	byte	0
39082                 | LR__6228
39082     56 61 72 69 
39086     61 62 6C 65 
3908a     20 6E 61 6D 
3908e     65 20 65 78 
39092     70 65 63 74 
39096     65 64       | 	byte	"Variable name expected"
39098     00          | 	byte	0
39099                 | LR__6229
39099     54 79 70 65 
3909d     20 6E 61 6D 
390a1     65 20 65 78 
390a5     70 65 63 74 
390a9     65 64       | 	byte	"Type name expected"
390ab     00          | 	byte	0
390ac                 | LR__6230
390ac     54 79 70 65 
390b0     20 6E 6F 74 
390b4     20 73 75 70 
390b8     70 6F 72 74 
390bc     65 64 20 79 
390c0     65 74       | 	byte	"Type not supported yet"
390c2     00          | 	byte	0
390c3                 | LR__6231
390c3     41 72 72 61 
390c7     79 20 69 6E 
390cb     64 65 78 20 
390cf     6F 75 74 20 
390d3     6F 66 20 72 
390d7     61 6E 67 65 | 	byte	"Array index out of range"
390db     00          | 	byte	0
390dc                 | LR__6232
390dc     42 61 64 20 
390e0     74 79 70 65 
390e4     20 77 68 69 
390e8     6C 65 20 61 
390ec     73 73 69 67 
390f0     6E 69 6E 67 
390f4     20 74 6F 20 
390f8     61 72 72 61 
390fc     79          | 	byte	"Bad type while assigning to array"
390fd     00          | 	byte	0
390fe                 | LR__6233
390fe     54 6F 6F 20 
39102     6D 61 6E 79 
39106     20 76 61 72 
3910a     69 61 62 6C 
3910e     65 73       | 	byte	"Too many variables"
39110     00          | 	byte	0
39111                 | LR__6234
39111     27 54 68 65 
39115     6E 27 20 65 
39119     78 70 65 63 
3911d     74 65 64    | 	byte	"'Then' expected"
39120     00          | 	byte	0
39121                 | LR__6235
39121     44 69 72 65 
39125     63 74 6F 72 
39129     79 20 64 6F 
3912d     65 73 6E 27 
39131     74 20 65 78 
39135     69 73 74    | 	byte	"Directory doesn't exist"
39138     00          | 	byte	0
39139                 | LR__6236
39139     55 6E 65 78 
3913d     70 65 63 74 
39141     65 64 20 65 
39145     6E 64 20 6F 
39149     66 20 6C 69 
3914d     6E 65       | 	byte	"Unexpected end of line"
3914f     00          | 	byte	0
39150                 | LR__6237
39150     4E 6F 20 6D 
39154     6F 72 65 20 
39158     64 61 74 61 | 	byte	"No more data"
3915c     00          | 	byte	0
3915d                 | LR__6238
3915d     45 72 72 6F 
39161     72 20       | 	byte	"Error "
39163     00          | 	byte	0
39164                 | LR__6239
39164     20 2D 20    | 	byte	" - "
39167     00          | 	byte	0
39168                 | LR__6240
39168     20 69 6E 20 
3916c     6C 69 6E 65 
39170     20          | 	byte	" in line "
39171     00          | 	byte	0
39172                 | LR__6241
39172                 | 	byte	
39172     00          | 	byte	0
39173                 | LR__6242
39173     2F 73 64    | 	byte	"/sd"
39176     00          | 	byte	0
39177                 | LR__6243
39177     2F 73 64 2F 
3917b     62 61 73    | 	byte	"/sd/bas"
3917e     00          | 	byte	0
3917f                 | LR__6244
3917f     2F 73 64 2F 
39183     62 61 73    | 	byte	"/sd/bas"
39186     00          | 	byte	0
39187                 | LR__6245
39187     20 42 41 53 
3918b     49 43 20 62 
3918f     79 74 65 73 
39193     20 66 72 65 
39197     65          | 	byte	" BASIC bytes free"
39198     00          | 	byte	0
39199                 | LR__6246
39199     52 65 61 64 
3919d     79          | 	byte	"Ready"
3919e     00          | 	byte	0
3919f                 | LR__6247
3919f     6E 6F 6E 61 
391a3     6D 65 2E 62 
391a7     61 73       | 	byte	"noname.bas"
391a9     00          | 	byte	0
391aa                 | LR__6248
391aa     2F 73 64 2F 
391ae     62 61 73 2F 
391b2     61 75 74 6F 
391b6     72 75 6E 2E 
391ba     62 61 73    | 	byte	"/sd/bas/autorun.bas"
391bd     00          | 	byte	0
391be                 | LR__6249
391be     72 75 6E 20 
391c2     61 75 74 6F 
391c6     72 75 6E 2E 
391ca     62 61 73    | 	byte	"run autorun.bas"
391cd     00          | 	byte	0
391ce                 | LR__6250
391ce                 | 	byte	
391ce     00          | 	byte	0
391cf     00          | 	alignl
391d0                 | _dat_
391d0     00 00 00 00 
391d4     00 00 00 00 
391d8     00 00 00 00 
391dc     00 00 00 00 | 	byte	$00[16]
391e0     61 41 17 0E 
391e4     62 42 00 00 
391e8     63 43 19 10 
391ec     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
391f0     65 45 18 0F 
391f4     66 46 00 00 
391f8     67 47 00 00 
391fc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
39200     69 49 00 00 
39204     6A 4A 00 00 
39208     6B 4B 00 00 
3920c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
39210     6D 4D 00 00 
39214     6E 4E 1A 11 
39218     6F 4F 1E 15 
3921c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
39220     71 51 00 00 
39224     72 52 00 00 
39228     73 53 1B 12 
3922c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
39230     75 55 00 00 
39234     76 56 00 00 
39238     77 57 00 00 
3923c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
39240     79 59 00 00 
39244     7A 5A 1D 14 
39248     31 21 04 00 
3924c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
39250     33 23 06 00 
39254     34 24 07 00 
39258     35 25 08 00 
3925c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
39260     37 26 0A 00 
39264     38 2A 0B 00 
39268     39 28 0C 00 
3926c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
39270     8D 8D 00 00 
39274     9B 9B 00 00 
39278     88 88 00 00 
3927c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
39280     20 20 00 00 
39284     2D 5F 00 00 
39288     3D 2B 00 00 
3928c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
39290     5D 7D 00 00 
39294     5C 7C 00 00 
39298     23 7E 00 00 
3929c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
392a0     27 22 00 00 
392a4     60 7E 03 00 
392a8     2C 3C 00 00 
392ac     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
392b0     2F 3F 00 00 
392b4     B9 B9 00 00 
392b8     BA 00 00 00 
392bc     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
392c0     BC 00 00 00 
392c4     BD 00 00 00 
392c8     BE 00 00 00 
392cc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
392d0     C0 00 00 00 
392d4     C1 00 00 00 
392d8     C2 00 00 00 
392dc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
392e0     C4 00 00 00 
392e4     C5 00 00 00 
392e8     C6 00 00 00 
392ec     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
392f0     C8 00 00 00 
392f4     C9 00 00 00 
392f8     CA 00 00 00 
392fc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
39300     7F 7F 00 00 
39304     CC 00 00 00 
39308     CD 00 00 00 
3930c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
39310     CF 00 00 00 
39314     D0 00 00 00 
39318     D1 00 00 00 
3931c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
39320     2F 2F 00 00 
39324     2A 2A 00 00 
39328     2D 2D 00 00 
3932c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
39330     8D 8D 00 00 
39334     31 31 00 00 
39338     32 32 00 00 
3933c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
39340     34 34 00 00 
39344     35 35 00 00 
39348     36 36 00 00 
3934c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
39350     38 38 00 00 
39354     39 39 00 00 
39358     30 30 00 00 
3935c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
39360     5C 7C 00 00 
39364     00 00 00 00 
39368     00 00 00 00 
3936c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
39370     00 00 00 00 
      ...             
393c8     00 00 00 00 
393cc     00 00 00 00 | 	byte	$00[96]
393d0     2B 00 A6 F2 
393d4     24 A7 09 80 
393d8     5B 88 4D 89 
393dc     80 88 A5 88 | atari_spl file "atari.spl"
393e0     6D 88 B8 88 
393e4     80 88 CB 88 
393e8     92 88 A5 88 
393ec     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
393f0     A5 88 CA 88 
393f4     A6 88 DD 88 
393f8     B8 88 AB 89 
393fc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
39400     C8 AD C6 F1 
39404     91 06 B6 FF 
39408     13 00 4A 00 
3940c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
39410     5D 00 5E 00 
39414     5D 00 5E 00 
39418     5E 00 5D 00 
3941c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
39420     38 00 83 00 
39424     25 00 83 00 
39428     C3 FE D1 04 
3942c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
39430     48 88 38 85 
39434     41 8A CB 88 
39438     28 89 B8 88 
3943c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
39440     15 89 03 89 
39444     02 89 15 89 
39448     16 89 15 89 
3944c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
39450     15 89 3A 89 
39454     72 89 E3 89 
39458     52 83 AD 97 
3945c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
39460     0C 02 B6 FF 
39464     E1 00 A8 00 
39468     F3 00 A8 00 
3946c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
39470     CE 00 CD 00 
39474     CD 00 BA 00 
39478     E1 00 BB 00 
3947c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
39480     DF 00 C9 FF 
39484     E6 01 B6 06 
39488     EE DD 8D 98 
3948c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
39490     97 89 73 89 
39494     3B 89 60 89 
39498     60 89 60 89 
3949c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
394a0     73 89 72 89 
394a4     85 89 73 89 
394a8     AA 89 60 89 
394ac     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
394b0     E8 8A 18 86 
394b4     92 88 A5 C2 
394b8     E0 00 C3 05 
394bc     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
394c0     F2 00 64 01 
394c4     06 01 3E 01 
394c8     2B 01 2B 01 
394cc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
394d0     2B 01 2A 01 
394d4     2B 01 2B 01 
394d8     2B 01 18 01 
394dc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
394e0     39 07 61 F3 
394e4     C0 AF 37 85 
394e8     0F 88 8B 8A 
394ec     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
394f0     AB 89 D0 89 
394f4     AB 89 D0 89 
394f8     D0 89 CF 89 
394fc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
39500     D0 89 F5 89 
39504     BD 89 08 8A 
39508     CF 89 E8 8A 
3950c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
39510     53 B3 0D F8 
39514     F4 07 38 00 
39518     63 01 63 01 
3951c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
39520     88 01 88 01 
39524     76 01 88 01 
39528     88 01 89 01 
3952c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
39530     75 01 AE 01 
39534     76 01 88 01 
39538     4A 00 46 06 
3953c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
39540     08 8A 9A 86 
39544     33 8B 08 8A 
39548     2D 8A F5 89 
3954c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
39550     2D 8A 2D 8A 
39554     2E 8A 1B 8A 
39558     40 8A 2D 8A 
3955c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
39560     2E 8A 79 8A 
39564     66 8A C8 8B 
39568     72 82 2B 97 
3956c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
39570     1D 02 05 01 
39574     F8 01 C0 01 
39578     0B 02 C0 01 
3957c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
39580     F9 01 D3 01 
39584     F8 01 D3 01 
39588     F8 01 D2 01 
3958c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
39590     E6 01 2B 01 
39594     8E 02 5F 07 
39598     F7 E2 ED 9C 
3959c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
395a0     E8 8A 78 8A 
395a4     78 8A 65 8A 
395a8     8B 8A 78 8A 
395ac     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
395b0     8B 8A 9D 8A 
395b4     9D 8A 8B 8A 
395b8     C2 8A 78 8A 
395bc     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
395c0     70 8C 18 86 
395c4     8B 8A 23 C9 
395c8     CB 03 C4 05 
395cc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
395d0     0B 02 7B 02 
395d4     1E 02 55 02 
395d8     30 02 43 02 
395dc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
395e0     43 02 44 02 
395e4     43 02 30 02 
395e8     68 02 31 02 
395ec     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
395f0     07 08 3F F7 
395f4     73 B2 13 85 
395f8     15 89 ED 8B 
395fc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
39600     B0 8A FB 8A 
39604     D5 8A FA 8A 
39608     E8 8A FB 8A 
3960c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
39610     E8 8A 21 8B 
39614     E7 8A 33 8B 
39618     E8 8A 26 8C 
3961c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
39620     8D B0 27 F6 
39624     9C 08 AD 01 
39628     7B 02 8D 02 
3962c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
39630     A1 02 A0 02 
39634     A1 02 A0 02 
39638     A0 02 A0 02 
3963c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
39640     7B 02 D8 02 
39644     7B 02 C6 02 
39648     3E 01 C3 05 
3964c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
39650     00 8C 2A 86 
39654     E0 8C FA 8A 
39658     6A 8B FB 8A 
3965c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
39660     45 8B 45 8B 
39664     45 8B 6B 8B 
39668     46 8B 59 8B 
3966c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
39670     6B 8B 6B 8B 
39674     6B 8B 6B 8B 
39678     7D 8B 7D 8B 
3967c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
39680     90 8B 91 8B 
39684     90 8B 90 8B 
39688     A3 8B A3 8B 
3968c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
39690     B5 8B B6 8B 
39694     B5 8B B5 8B 
39698     B6 8B C8 8B 
3969c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
396a0     C8 8B DA 8B 
396a4     DB 8B DB 8B 
396a8     DB 8B DC 8B 
396ac     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
396b0     EE 8B EE 8B 
396b4     00 8C 01 8C 
396b8     00 8C 01 8C 
396bc     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
396c0     12 8C 13 8C 
396c4     13 8C 26 8C 
396c8     26 8C 26 8C 
396cc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
396d0     38 8C 38 8C 
396d4     38 8C 38 8C 
396d8     4B 8C 4B 8C 
396dc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
396e0     5E 8C 5E 8C 
396e4     5E 8C 5E 8C 
396e8     70 8C 70 8C 
396ec     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
396f0     70 8C 83 8C 
396f4     83 8C 83 8C 
396f8     83 8C 96 8C 
396fc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
39700     95 8C A9 8C 
39704     A9 8C A8 8C 
39708     A8 8C A8 8C 
3970c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
39710     BB 8C BB 8C 
39714     BB 8C CE 8C 
39718     CE 8C CE 8C 
3971c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
39720     E0 8C E1 8C 
39724     E1 8C E0 8C 
39728     F4 8C F2 8C 
3972c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
39730     05 8D 05 8D 
39734     06 8D 06 8D 
39738     19 8D 19 8D 
3973c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
39740     18 8D 2B 8D 
39744     2B 8D 2B 8D 
39748     2A 8D 3E 8D 
3974c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
39750     3E 8D 51 8D 
39754     50 8D 50 8D 
39758     50 8D 51 8D 
3975c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
39760     63 8D 64 8D 
39764     76 8D 75 8D 
39768     75 8D 76 8D 
3976c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
39770     88 8D 88 8D 
39774     89 8D 9B 8D 
39778     9A 8D 9B 8D 
3977c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
39780     AD 8D AE 8D 
39784     AD 8D AE 8D 
39788     C1 8D C1 8D 
3978c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
39790     D3 8D D3 8D 
39794     D3 8D D3 8D 
39798     D3 8D E6 8D 
3979c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
397a0     E6 8D E6 8D 
397a4     F9 8D F9 8D 
397a8     F9 8D F8 8D 
397ac     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
397b0     0B 8E 0B 8E 
397b4     1D 8E 1D 8E 
397b8     1E 8E 1E 8E 
397bc     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
397c0     31 8E 31 8E 
397c4     31 8E 42 8E 
397c8     43 8E 43 8E 
397cc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
397d0     56 8E 56 8E 
397d4     55 8E 56 8E 
397d8     68 8E 69 8E 
397dc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
397e0     69 8E 7B 8E 
397e4     7C 8E 7B 8E 
397e8     7B 8E 8D 8E 
397ec     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
397f0     8D 8E A1 8E 
397f4     A0 8E A1 8E 
397f8     A1 8E A0 8E 
397fc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
39800     B3 8E B3 8E 
39804     C6 8E C5 8E 
39808     C6 8E C6 8E 
3980c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
39810     D8 8E D9 8E 
39814     D8 8E EC 8E 
39818     EB 8E EC 8E 
3981c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
39820     FE 8E FE 8E 
39824     FE 8E FE 8E 
39828     10 8F 10 8F 
3982c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
39830     11 8F 23 8F 
39834     24 8F 23 8F 
39838     24 8F 37 8F 
3983c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
39840     36 8F 36 8F 
39844     48 8F 49 8F 
39848     49 8F 49 8F 
3984c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
39850     5B 8F 5C 8F 
39854     5B 8F 6E 8F 
39858     6E 8F 6E 8F 
3985c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
39860     81 8F 81 8F 
39864     81 8F 81 8F 
39868     93 8F 93 8F 
3986c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
39870     93 8F A6 8F 
39874     A6 8F A6 8F 
39878     A6 8F B9 8F 
3987c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
39880     B9 8F B9 8F 
39884     CC 8F CB 8F 
39888     CB 8F CC 8F 
3988c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
39890     DF 8F DE 8F 
39894     DE 8F F1 8F 
39898     F1 8F F1 8F 
3989c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
398a0     03 90 04 90 
398a4     04 90 04 90 
398a8     16 90 17 90 
398ac     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
398b0     29 90 28 90 
398b4     29 90 28 90 
398b8     29 90 3C 90 
398bc     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
398c0     3C 90 4F 90 
398c4     4E 90 4E 90 
398c8     4E 90 4E 90 
398cc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
398d0     61 90 61 90 
398d4     73 90 74 90 
398d8     74 90 74 90 
398dc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
398e0     87 90 86 90 
398e4     87 90 86 90 
398e8     99 90 99 90 
398ec     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
398f0     AB 90 AB 90 
398f4     AC 90 AB 90 
398f8     AB 90 BF 90 
398fc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
39900     BE 90 D1 90 
39904     D0 90 D1 90 
39908     D1 90 D1 90 
3990c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
39910     E3 90 E4 90 
39914     F6 90 F6 90 
39918     F6 90 F6 90 
3991c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
39920     09 91 0A 91 
39924     0A 91 1C 91 
39928     1C 91 1C 91 
3992c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
39930     2F 91 2E 91 
39934     2F 91 2F 91 
39938     2E 91 41 91 
3993c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
39940     41 91 53 91 
39944     54 91 54 91 
39948     53 91 54 91 
3994c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
39950     67 91 67 91 
39954     79 91 7A 91 
39958     79 91 78 91 
3995c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
39960     8C 91 8B 91 
39964     8C 91 8C 91 
39968     9E 91 9E 91 
3996c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
39970     B1 91 B1 91 
39974     B2 91 B1 91 
39978     B1 91 C4 91 
3997c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
39980     C4 91 D6 91 
39984     D7 91 D7 91 
39988     D7 91 D6 91 
3998c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
39990     EA 91 EA 91 
39994     EA 91 FC 91 
39998     FC 91 FB 91 
3999c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
399a0     0E 92 0F 92 
399a4     0F 92 0E 92 
399a8     21 92 21 92 
399ac     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
399b0     21 92 34 92 
399b4     33 92 34 92 
399b8     34 92 47 92 
399bc     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
399c0     46 92 47 92 
399c4     59 92 59 92 
399c8     59 92 59 92 
399cc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
399d0     6C 92 6C 92 
399d4     6B 92 7E 92 
399d8     7E 92 7E 92 
399dc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
399e0     92 92 91 92 
399e4     91 92 90 92 
399e8     91 92 A4 92 
399ec     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
399f0     A3 92 B6 92 
399f4     B6 92 B7 92 
399f8     B7 92 B6 92 
399fc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
39a00     CA 92 C9 92 
39a04     CA 92 DC 92 
39a08     DC 92 DC 92 
39a0c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
39a10     EF 92 EF 92 
39a14     EF 92 EF 92 
39a18     01 93 01 93 
39a1c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
39a20     15 93 14 93 
39a24     14 93 14 93 
39a28     14 93 27 93 
39a2c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
39a30     27 93 39 93 
39a34     3A 93 39 93 
39a38     39 93 39 93 
39a3c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
39a40     4B 93 4C 93 
39a44     5F 93 5F 93 
39a48     5F 93 5E 93 
39a4c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
39a50     5F 93 84 93 
39a54     4C 93 96 93 
39a58     5F 93 AE 94 
39a5c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
39a60     7B C1 00 00 
39a64     00 00 00 00 
39a68     00 00 00 00 
39a6c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39a70     00 00 00 00 | 	byte	$00, $00, $00, $00
39a74     7A D7 00 80 
39a78     87 8A 48 8F 
39a7c     EC 8C 76 8D 
39a80     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
39a84     3C 8D 82 8D 
39a88     42 8D 88 8D 
39a8c     8C 8D 8E 8D 
39a90     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
39a94     97 8D DE 8D 
39a98     E1 8D F1 8E 
39a9c     D8 8C A3 83 
39aa0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
39aa4     65 71 C9 65 
39aa8     FC 64 C4 65 
39aac     C1 65 BF 65 
39ab0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
39ab4     B6 65 B4 65 
39ab8     B2 65 AE 65 
39abc     AC 65 ED 65 
39ac0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
39ac4     5E 65 25 66 
39ac8     FA 62 23 6B 
39acc     B5 6C 61 0A 
39ad0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
39ad4     5D 90 BE 8D 
39ad8     47 8E C3 8D 
39adc     09 8E C9 8D 
39ae0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
39ae4     15 8E 19 8E 
39ae8     1B 8E 62 8E 
39aec     64 8E 68 8E 
39af0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
39af4     B5 8E 4C 90 
39af8     FA 84 3C 9D 
39afc     98 13 79 6D 
39b00     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
39b04     D9 66 50 66 
39b08     D4 66 4B 66 
39b0c     8C 66 46 66 
39b10     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
39b14     81 66 3A 66 
39b18     7C 66 36 66 
39b1c     76 66 30 66 
39b20     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
39b24     6B 66 88 72 
39b28     BF 37 E7 B7 
39b2c     75 83 8B 8E 
39b30     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
39b34     94 8E 96 8E 
39b38     DD 8E 9C 8E 
39b3c     E2 8E A2 8E 
39b40     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
39b44     EE 8E AE 8E 
39b48     38 8F B5 8E 
39b4c     3F 8F FD 8E 
39b50     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
39b54     A5 87 1E E3 
39b58     6D 5D FA 71 
39b5c     41 64 25 67 
39b60     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
39b64     D9 66 1A 67 
39b68     18 67 15 67 
39b6c     12 67 0F 67 
39b70     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
39b74     07 67 C0 66 
39b78     01 67 BC 66 
39b7c     B8 66 DE 64 
39b80     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
39b84     43 E5 1F 8B 
39b88     14 8A F1 90 
39b8c     1C 8F 63 8F 
39b90     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
39b94     29 8F 6E 8F 
39b98     72 8F 75 8F 
39b9c     34 8F BE 8F 
39ba0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
39ba4     84 8F 87 8F 
39ba8     CC 8F 56 90 
39bac     67 91 49 80 
39bb0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
39bb4     46 77 A6 66 
39bb8     E8 66 B0 67 
39bbc     AD 67 ED 67 
39bc0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
39bc4     A2 67 E3 67 
39bc8     9D 67 9A 67 
39bcc     98 67 94 67 
39bd0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
39bd4     49 67 CD 67 
39bd8     28 65 5F 6E 
39bdc     82 67 3A 01 
39be0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
39be4     C2 91 A9 8F 
39be8     EF 8F AE 8F 
39bec     F4 8F B5 8F 
39bf0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
39bf4     01 90 03 90 
39bf8     07 90 09 90 
39bfc     0C 90 53 90 
39c00     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
39c04     18 90 44 93 
39c08     85 84 D6 9D 
39c0c     87 1F 2F 75 
39c10     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
39c14     C4 68 F6 67 
39c18     BE 68 F1 67 
39c1c     76 68 2E 68 
39c20     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
39c24     27 68 24 68 
39c28     64 68 1E 68 
39c2c     5F 68 19 68 
39c30     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
39c34     DC 68 56 72 
39c38     7E 36 C2 B8 
39c3c     D7 84 73 90 
39c40     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
39c44     7B 90 7F 90 
39c48     82 90 84 90 
39c4c     CB 90 8B 90 
39c50     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
39c54     D7 90 96 90 
39c58     20 91 59 90 
39c5c     25 91 A2 90 
39c60     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
39c64     D0 89 40 EE 
39c68     12 64 C4 71 
39c6c     29 66 0C 69 
39c70     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
39c74     C0 68 02 69 
39c78     FE 68 FB 68 
39c7c     F9 68 F6 68 
39c80     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
39c84     EE 68 A8 68 
39c88     2C 69 5F 68 
39c8c     E2 68 81 66 
39c90     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
39c94     1E EB A6 8A 
39c98     73 8B 5E 93 
39c9c     7B 90 48 91 
39ca0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
39ca4     0D 91 11 91 
39ca8     14 91 16 91 
39cac     5C 91 1C 91 
39cb0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
39cb4     68 91 AF 91 
39cb8     2A 91 B5 91 
39cbc     75 91 1A 94 
39cc0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
39cc4     70 0E CB 6C 
39cc8     5D 6E C4 67 
39ccc     99 69 54 69 
39cd0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
39cd4     D2 69 49 69 
39cd8     89 69 86 69 
39cdc     40 69 C4 69 
39ce0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
39ce4     35 69 76 69 
39ce8     58 67 EB 6D 
39cec     E9 6D 89 0F 
39cf0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
39cf4     33 94 94 91 
39cf8     D9 91 56 91 
39cfc     E0 91 9F 91 
39d00     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
39d04     EC 91 EE 91 
39d08     F1 91 F4 91 
39d0c     F7 91 3D 92 
39d10     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
39d14     46 92 21 94 
39d18     11 89 A4 9D 
39d1c     FD 0E 8F 6C 
39d20     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
39d24     28 6A E1 69 
39d28     65 6A 1F 6A 
39d2c     5F 6A 1A 6A 
39d30     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
39d34     54 6A 0F 6A 
39d38     4F 6A 09 6A 
39d3c     06 6A 03 6A 
39d40     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
39d44     23 68 69 77 
39d48     3A 4D 38 CA 
39d4c     38 86 4E 91 
39d50     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
39d54     64 92 24 92 
39d58     6A 92 2A 92 
39d5c     70 92 30 92 
39d60     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
39d64     7B 92 7E 92 
39d68     C5 92 84 92 
39d6c     CB 92 8A 92 
39d70     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
39d74     4D 8D F9 E2 
39d78     97 59 FE 74 
39d7c     DB 68 6D 6A 
39d80     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
39d84     A8 6A A5 6A 
39d88     A3 6A 9F 6A 
39d8c     9D 6A 9B 6A 
39d90     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
39d94     D6 6A 8F 6A 
39d98     CF 6A 46 6A 
39d9c     CA 6A E1 67 
39da0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
39da4     D3 F7 15 92 
39da8     90 8C BF 94 
39dac     A6 92 EB 92 
39db0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
39db4     B1 92 F7 92 
39db8     FA 92 FD 92 
39dbc     00 93 02 93 
39dc0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
39dc4     4F 93 52 93 
39dc8     54 93 22 94 
39dcc     5A 93 8F 88 
39dd0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
39dd4     1C 77 07 6C 
39dd8     E8 69 7A 6B 
39ddc     34 6B 75 6B 
39de0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
39de4     29 6B 26 6B 
39de8     24 6B 21 6B 
39dec     1D 6B 5E 6B 
39df0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
39df4     12 6B 52 6B 
39df8     34 69 34 6E 
39dfc     BA 73 A4 24 
39e00     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
39e04     7A 94 B3 93 
39e08     72 93 31 93 
39e0c     78 93 7A 93 
39e10     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
39e14     83 93 86 93 
39e18     89 93 D0 93 
39e1c     D2 93 D5 93 
39e20     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
39e24     DD 93 40 96 
39e28     30 8B 99 9C 
39e2c     52 10 94 71 
39e30     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
39e34     46 6C 79 6B 
39e38     40 6C B7 6B 
39e3c     F7 6B B1 6B 
39e40     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
39e44     EC 6B A5 6B 
39e48     A2 6B 9F 6B 
39e4c     9D 6B 9A 6B 
39e50     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
39e54     C8 6A E4 76 
39e58     20 4B F9 CE 
39e5c     2E 8A 1A 92 
39e60     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
39e64     FB 93 BA 93 
39e68     01 94 03 94 
39e6c     4A 94 09 94 
39e70     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
39e74     55 94 14 94 
39e78     9E 94 1A 94 
39e7c     61 94 20 94 
39e80     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
39e84     3E 87 E5 CD 
39e88     5F 50 6C 78 
39e8c     B5 6A 04 6C 
39e90     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
39e94     83 6C 7F 6C 
39e98     7C 6C 36 6C 
39e9c     76 6C 74 6C 
39ea0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
39ea4     6B 6C 25 6C 
39ea8     66 6C 1F 6C 
39eac     1D 6C 41 6A 
39eb0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
39eb4     BA FA FC 94 
39eb8     5B 8D 97 96 
39ebc     3B 94 C5 94 
39ec0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
39ec4     89 94 8C 94 
39ec8     8F 94 92 94 
39ecc     94 94 DB 94 
39ed0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
39ed4     E4 94 E7 94 
39ed8     2D 95 74 95 
39edc     C8 96 15 89 
39ee0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
39ee4     CB 75 31 6F 
39ee8     7E 6B 10 6D 
39eec     C9 6C 0A 6D 
39ef0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
39ef4     BD 6C FF 6C 
39ef8     FB 6C F9 6C 
39efc     B2 6C F3 6C 
39f00     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
39f04     A7 6C E8 6C 
39f08     0D 6B 85 6F 
39f0c     C7 74 10 28 
39f10     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
39f14     96 96 47 95 
39f18     06 95 0A 95 
39f1c     0C 95 0F 95 
39f20     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
39f24     17 95 5E 95 
39f28     61 95 63 95 
39f2c     22 95 AC 95 
39f30     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
39f34     72 95 17 98 
39f38     59 8E 01 96 
39f3c     CF FC 5A 68 
39f40     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
39f44     96 6D 50 6D 
39f48     D5 6D 4A 6D 
39f4c     8C 6D 89 6D 
39f50     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
39f54     80 6D 3A 6D 
39f58     7A 6D 77 6D 
39f5c     75 6D 71 6D 
39f60     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
39f64     18 6C BC 78 
39f68     9A 4F 7E CF 
39f6c     1F 89 F1 93 
39f70     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
39f74     D2 95 4E 95 
39f78     D7 95 53 95 
39f7c     DD 95 E0 95 
39f80     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
39f84     A5 95 EB 95 
39f88     EE 95 F0 95 
39f8c     37 96 B3 95 
39f90     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
39f94     1A 98 D5 8D 
39f98     C5 9F CD 0F 
39f9c     0F 71 F3 73 
39fa0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
39fa4     D9 6D 5E 6E 
39fa8     D3 6D 58 6E 
39fac     12 6E 0F 6E 
39fb0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
39fb4     49 6E BF 6D 
39fb8     87 6E 76 6D 
39fbc     81 6E 11 6B 
39fc0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
39fc4     3F 09 44 95 
39fc8     E5 8D 3F 99 
39fcc     D4 95 A2 96 
39fd0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
39fd4     23 96 69 96 
39fd8     6B 96 6E 96 
39fdc     71 96 74 96 
39fe0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
39fe4     BF 96 3C 96 
39fe8     C6 96 C8 96 
39fec     A3 98 51 8D 
39ff0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
39ff4     CF 75 29 73 
39ff8     90 6C EC 6E 
39ffc     62 6E E7 6E 
3a000     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3a004     9A 6E 98 6E 
3a008     95 6E 91 6E 
3a00c     8E 6E CF 6E 
3a010     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3a014     40 6E C3 6E 
3a018     E8 6C 45 6F 
3a01c     A5 7B C9 35 
3a020     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3a024     2D 98 23 97 
3a028     E1 96 A0 96 
3a02c     A4 96 EA 96 
3a030     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3a034     AF 96 F4 96 
3a038     F8 96 3E 97 
3a03c     FD 96 43 97 
3a040     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3a044     08 97 6B 99 
3a048     D6 92 88 91 
3a04c     D8 EE 84 66 
3a050     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
3a054     2E 6F E7 6E 
3a058     6C 6F 24 6F 
3a05c     21 6F 1F 6F 
3a060     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
3a064     17 6F 13 6F 
3a068     54 6F 0E 6F 
3a06c     0B 6F 4B 6F 
3a070     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
3a074     27 6D 1C 7B 
3a078     19 59 9F DB 
3a07c     66 8E BC 94 
3a080     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
3a084     67 97 26 97 
3a088     6D 97 2B 97 
3a08c     72 97 32 97 
3a090     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
3a094     C1 97 7F 97 
3a098     C6 97 85 97 
3a09c     CB 97 CE 97 
3a0a0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
3a0a4     EC 8A C4 C6 
3a0a8     68 4C F4 7D 
3a0ac     63 6E E8 6E 
3a0b0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
3a0b4     ED 6F A7 6F 
3a0b8     E7 6F A0 6F 
3a0bc     E1 6F 9B 6F 
3a0c0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
3a0c4     D5 6F 8F 6F 
3a0c8     CE 6F 45 6F 
3a0cc     86 6F 68 6D 
3a0d0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
3a0d4     C0 13 AD A2 
3a0d8     A7 8E 79 99 
3a0dc     E6 97 E8 97 
3a0e0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3a0e4     F1 97 F3 97 
3a0e8     F6 97 F9 97 
3a0ec     FB 97 FE 97 
3a0f0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3a0f4     4A 98 0A 98 
3a0f8     93 98 0F 98 
3a0fc     7F 9B BF 8C 
3a100     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3a104     91 7B 62 73 
3a108     1A 6E B9 70 
3a10c     EB 6F B3 70 
3a110     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3a114     25 70 20 70 
3a118     1E 70 1B 70 
3a11c     18 70 15 70 
3a120     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3a124     0D 70 09 70 
3a128     07 70 03 70 
3a12c     01 70 FD 6F 
3a130     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3a134     F6 6F F2 6F 
3a138     EF 6F EC 6F 
3a13c     2C 70 E6 6F 
3a140     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3a144     DD 6F 97 6F 
3a148     D7 6F 84 6E 
3a14c     8F 6F 3F 7D 
3a150     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3a152     FF FF FF FF 
3a156     FF FF       | atarist_spl file "atarist.spl" '512
3a158     00 00 00 00 
3a15c     00 00 00 00 
3a160     00 00       | 	byte	$00[10]
3a162     17 7F F2 7F 
3a166     B2 7F 72 7F 
3a16a     33 7F F4 7E 
3a16e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3a172     36 7E F5 7D 
3a176     E9 51 F2 0D 
3a17a     8E 00 F3 FD 
3a17e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
3a182     57 FD 58 FD 
3a186     5B FD 5C FD 
3a18a     5C FD 60 7D 
3a18e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
3a192     D6 7C 98 7C 
3a196     59 7C 1A 7C 
3a19a     DC 7B 9E 7B 
3a19e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3a1a2     F3 05 00 FD 
3a1a6     41 FB EA FA 
3a1aa     D9 FA DB FA 
3a1ae     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3a1b2     E4 FA 9B 36 
3a1b6     F8 7A C0 7A 
3a1ba     84 7A 45 7A 
3a1be     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3a1c2     8E 79 51 79 
3a1c6     15 79 D7 78 
3a1ca     3C 1F EB FF 
3a1ce     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3a1d2     6D F8 65 F8 
3a1d6     68 F8 6D F8 
3a1da     70 F8 74 F8 
3a1de     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3a1e2     AB 60 79 60 
3a1e6     4B 60 1A 60 
3a1ea     E9 5F B9 5F 
3a1ee     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3a1f2     FB 59 B2 0B 
3a1f6     92 FA 3A F7 
3a1fa     96 F6 79 F6 
3a1fe     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3a202     82 F6 86 F6 
3a206     8C F6 DB 5D 
3a20a     F1 5E C1 5E 
3a20e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3a212     34 5E 04 5E 
3a216     D6 5D A6 5D 
3a21a     78 5D D4 3E 
3a21e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3a222     27 F5 BA F4 
3a226     AB F4 AD F4 
3a22a     B2 F4 B8 F4 
3a22e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3a232     26 5D 2B 5D 
3a236     FC 5C CD 5C 
3a23a     9F 5C 70 5C 
3a23e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3a242     E5 5B B8 5B 
3a246     DB 24 A7 FC 
3a24a     D1 F4 4D F3 
3a24e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3a252     04 F3 0B F3 
3a256     11 F3 16 F3 
3a25a     DE 18 98 5B 
3a25e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3a262     4E 4A 29 48 
3a266     A0 47 6A 47 
3a26a     43 47 20 47 
3a26e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3a272     E2 F6 98 F2 
3a276     C5 F1 A3 F1 
3a27a     A3 F1 A8 F1 
3a27e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3a282     BF F1 00 3D 
3a286     EF 46 CD 46 
3a28a     AA 46 86 46 
3a28e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3a292     1C 46 F9 45 
3a296     D7 45 EE 43 
3a29a     DE 02 E8 F3 
3a29e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3a2a2     61 F0 65 F0 
3a2a6     6D F0 74 F0 
3a2aa     7C F0 84 F0 
3a2ae     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3a2b2     8E 45 6D 45 
3a2b6     49 45 27 45 
3a2ba     05 45 E1 44 
3a2be     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3a2c2     F1 2F A9 FB 
3a2c6     8B F1 9B EF 
3a2ca     40 EF 36 EF 
3a2ce     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3a2d2     4D EF 56 EF 
3a2d6     5E EF 7B 44 
3a2da     8C 44 69 44 
3a2de     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3a2e2     03 44 E1 43 
3a2e6     C0 43 F5 37 
3a2ea     69 33 0F 11 
3a2ee     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3a2f2     66 EE 37 EE 
3a2f6     38 EE 40 EE 
3a2fa     48 EE 51 EE 
3a2fe     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3a302     7D 32 6A 32 
3a306     51 32 37 32 
3a30a     1F 32 05 32 
3a30e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3a312     B9 31 A1 31 
3a316     F1 04 F4 F1 
3a31a     50 EE A0 ED 
3a31e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3a322     93 ED 9A ED 
3a326     A4 ED AD ED 
3a32a     F4 27 C1 31 
3a32e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3a332     78 31 5F 31 
3a336     46 31 2E 31 
3a33a     15 31 FC 30 
3a33e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3a342     C4 EF 4A ED 
3a346     DC EC CB EC 
3a34a     D2 EC DA EC 
3a34e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3a352     F9 EC 64 2F 
3a356     0A 31 F1 30 
3a35a     D9 30 C0 30 
3a35e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3a362     78 30 5F 30 
3a366     46 30 38 23 
3a36a     A6 F6 19 EE 
3a36e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3a372     20 EC 28 EC 
3a376     32 EC 3C EC 
3a37a     47 EC 51 EC 
3a37e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3a382     A3 22 93 22 
3a386     7F 22 6E 22 
3a38a     5D 22 4C 22 
3a38e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3a392     77 09 76 F1 
3a396     CC EC F0 EB 
3a39a     CD EB CE EB 
3a39e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3a3a2     ED EB F5 EB 
3a3a6     3E F6 6B 22 
3a3aa     5F 22 4E 22 
3a3ae     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3a3b2     1B 22 0B 22 
3a3b6     FA 21 E9 21 
3a3ba     D8 21 4D FF 
3a3be     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3a3c2     92 EB 7B EB 
3a3c6     82 EB 8C EB 
3a3ca     97 EB A1 EB 
3a3ce     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3a3d2     15 22 04 22 
3a3d6     F3 21 E3 21 
3a3da     D2 21 C0 21 
3a3de     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3a3e2     8E 21 7D 21 
3a3e6     9A F8 A4 ED 
3a3ea     8E EB 2F EB 
3a3ee     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3a3f2     37 EB 42 EB 
3a3f6     4C EB 57 EB 
3a3fa     B2 17 22 19 
3a3fe     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3a402     FD 18 EF 18 
3a406     E3 18 D6 18 
3a40a     CA 18 BD 18 
3a40e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3a412     60 EC 35 EB 
3a416     01 EB 01 EB 
3a41a     0C EB 16 EB 
3a41e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3a422     34 EB D0 18 
3a426     00 19 F4 18 
3a42a     E8 18 DA 18 
3a42e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3a432     B6 18 A9 18 
3a436     9D 18 91 05 
3a43a     F0 EF CA EB 
3a43e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3a442     E8 EA F2 EA 
3a446     FE EA 07 EB 
3a44a     12 EB C2 EF 
3a44e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3a452     D9 18 CD 18 
3a456     C0 18 B3 18 
3a45a     A7 18 9B 18 
3a45e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3a462     B8 FC 30 EE 
3a466     61 EB DC EA 
3a46a     CD EA D2 EA 
3a46e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3a472     F3 EA FE EA 
3a476     D2 09 D1 18 
3a47a     C3 18 17 18 
3a47e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3a482     66 11 52 11 
3a486     49 11 41 11 
3a48a     38 11 E0 F4 
3a48e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3a492     C9 EA C5 EA 
3a496     CF EA DB EA 
3a49a     E6 EA EF EA 
3a49e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3a4a2     89 11 80 11 
3a4a6     78 11 6E 11 
3a4aa     67 11 5D 11 
3a4ae     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3a4b2     43 11 32 0D 
3a4b6     9C F1 07 EC 
3a4ba     F8 EA CD EA 
3a4be     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3a4c2     E4 EA ED EA 
3a4c6     F8 EA 02 EB 
3a4ca     55 11 91 11 
3a4ce     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3a4d2     75 11 6E 11 
3a4d6     64 11 5E 11 
3a4da     54 11 4A 11 
3a4de     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3a4e2     A8 EB F1 EA 
3a4e6     D9 EA DC EA 
3a4ea     E8 EA F1 EA 
3a4ee     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3a4f2     A6 EB 9E 11 
3a4f6     A0 11 96 11 
3a4fa     8D 11 85 11 
3a4fe     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3a502     6A 11 CA 0D 
3a506     36 0B 57 F8 
3a50a     6C ED 57 EB 
3a50e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3a512     F4 EA FF EA 
3a516     09 EB 15 EB 
3a51a     1E EB 1A FD 
3a51e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3a522     ED 0A E8 0A 
3a526     E2 0A DC 0A 
3a52a     D6 0A D1 0A 
3a52e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3a532     F8 F3 BC EC 
3a536     57 EB 1E EB 
3a53a     18 EB 24 EB 
3a53e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3a542     42 EB 4D EB 
3a546     08 09 20 0B 
3a54a     1A 0B 14 0B 
3a54e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3a552     04 0B FE 0A 
3a556     F9 0A F2 0A 
3a55a     84 08 3A F1 
3a55e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3a562     42 EB 42 EB 
3a566     4E EB 57 EB 
3a56a     62 EB 6B EB 
3a56e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3a572     48 0B 43 0B 
3a576     3C 0B 36 0B 
3a57a     31 0B 2C 0B 
3a57e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3a582     1B 0B 5C 00 
3a586     6A EF 1B EC 
3a58a     81 EB 6A EB 
3a58e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3a592     85 EB 8E EB 
3a596     99 EB A3 EB 
3a59a     DD 05 E5 05 
3a59e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3a5a2     DB 05 D8 05 
3a5a6     D5 05 D1 05 
3a5aa     D0 05 CB 05 
3a5ae     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3a5b2     0C EC BB EB 
3a5b6     B3 EB BB EB 
3a5ba     C5 EB D0 EB 
3a5be     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3a5c2     E4 F7 2C 06 
3a5c6     28 06 24 06 
3a5ca     22 06 1F 06 
3a5ce     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3a5d2     16 06 14 06 
3a5d6     0F 06 D0 F3 
3a5da     65 ED 2D EC 
3a5de     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3a5e2     01 EC 0A EC 
3a5e6     14 EC 1E EC 
3a5ea     29 EC FB 03 
3a5ee     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3a5f2     63 06 60 06 
3a5f6     5E 06 59 06 
3a5fa     58 06 54 06 
3a5fe     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3a602     69 F1 21 ED 
3a606     55 EC 33 EC 
3a60a     36 EC 40 EC 
3a60e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3a612     5C EC 68 EC 
3a616     92 02 D9 02 
3a61a     D7 02 D7 02 
3a61e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3a622     D1 02 D1 02 
3a626     CE 02 CD 02 
3a62a     5D FC 80 EF 
3a62e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3a632     83 EC 8A EC 
3a636     93 EC 9C EC 
3a63a     A5 EC B1 EC 
3a63e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3a642     2B 03 2A 03 
3a646     29 03 26 03 
3a64a     25 03 24 03 
3a64e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3a652     1F 03 70 F7 
3a656     D0 EE 27 ED 
3a65a     DB EC D4 EC 
3a65e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3a662     F0 EC FA EC 
3a666     02 ED F9 F4 
3a66a     7B 03 7C 03 
3a66e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3a672     75 03 73 03 
3a676     72 03 70 03 
3a67a     6D 03 6C 03 
3a67e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3a682     54 ED 22 ED 
3a686     22 ED 2C ED 
3a68a     35 ED 3F ED 
3a68e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3a692     14 01 C3 03 
3a696     C1 03 C0 03 
3a69a     5F 01 A5 00 
3a69e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3a6a2     7B 00 7C 00 
3a6a6     20 00 85 F1 
3a6aa     2A EE 89 ED 
3a6ae     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3a6b2     80 ED 87 ED 
3a6b6     90 ED 9A ED 
3a6ba     A3 ED 73 00 
3a6be     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3a6c2     D0 00 D0 00 
3a6c6     D0 00 D0 00 
3a6ca     D0 00 CF 00 
3a6ce     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3a6d2     80 F0 3D EE 
3a6d6     D5 ED C7 ED 
3a6da     CD ED D6 ED 
3a6de     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3a6e2     F2 ED FA ED 
3a6e6     1D 01 29 01 
3a6ea     27 01 27 01 
3a6ee     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3a6f2     25 01 26 01 
3a6f6     26 01 23 01 
3a6fa     D0 F7 EC EF 
3a6fe     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3a702     1C EE 24 EE 
3a706     2D EE 37 EE 
3a70a     40 EE 47 EE 
3a70e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3a712     7D 01 7B 01 
3a716     7A 01 7A 01 
3a71a     79 01 78 01 
3a71e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3a722     84 FE DE F3 
3a726     6C EF 93 EE 
3a72a     72 EE 72 EE 
3a72e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3a732     8B EE 95 EE 
3a736     9E EE 15 FC 
3a73a     67 FE 67 FE 
3a73e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3a742     6B FE 6B FE 
3a746     6D FE 6D FE 
3a74a     6D FE 6F FE 
3a74e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3a752     DF EE CC EE 
3a756     CF EE D9 EE 
3a75a     E1 EE EA EE 
3a75e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3a762     5A FE C4 FE 
3a766     C3 FE C5 FE 
3a76a     C6 FE C6 FE 
3a76e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3a772     C8 FE C7 FE 
3a776     DA FB 85 F1 
3a77a     8D EF 31 EF 
3a77e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3a782     34 EF 3E EF 
3a786     46 EF 4F EF 
3a78a     57 EF 0D FF 
3a78e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3a792     1F FF 1F FF 
3a796     21 FF 21 FF 
3a79a     21 FF 21 FF 
3a79e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3a7a2     15 F1 BE EF 
3a7a6     84 EF 7E EF 
3a7aa     88 EF 8F EF 
3a7ae     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3a7b2     A9 EF 06 F2 
3a7b6     A6 FC AB FC 
3a7ba     AD FC AE FC 
3a7be     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3a7c2     B2 FC B4 FC 
3a7c6     B6 FC B7 FC 
3a7ca     8B F4 BD F0 
3a7ce     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3a7d2     E4 EF EE EF 
3a7d6     F6 EF FD EF 
3a7da     04 F0 0E F0 
3a7de     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3a7e2     0B FD 0D FD 
3a7e6     0F FD 11 FD 
3a7ea     11 FD 13 FD 
3a7ee     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3a7f2     17 FD 64 F3 
3a7f6     CD F0 52 F0 
3a7fa     41 F0 45 F0 
3a7fe     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3a802     5B F0 64 F0 
3a806     6D F0 FB FC 
3a80a     65 FD 68 FD 
3a80e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3a812     6C FD 6D FD 
3a816     6F FD 70 FD 
3a81a     72 FD B3 FB 
3a81e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3a822     A4 F0 99 F0 
3a826     A0 F0 A8 F0 
3a82a     AE F0 B9 F0 
3a82e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3a832     CB FB DD FB 
3a836     DE FB E0 FB 
3a83a     E3 FB E3 FB 
3a83e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3a842     E9 FB EC FB 
3a846     62 F7 27 F2 
3a84a     2A F1 FF F0 
3a84e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3a852     0C F1 13 F1 
3a856     1B F1 23 F1 
3a85a     33 F2 3C FC 
3a85e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3a862     42 FC 45 FC 
3a866     47 FC 48 FC 
3a86a     4A FC 4C FC 
3a86e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3a872     20 F2 77 F1 
3a876     5C F1 5F F1 
3a87a     64 F1 6C F1 
3a87e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3a882     83 F1 DC F8 
3a886     9A FC 9A FC 
3a88a     9B FC 9E FC 
3a88e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3a892     A3 FC A4 FC 
3a896     A6 FC A9 FC 
3a89a     90 F4 33 F2 
3a89e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3a8a2     BA F1 BF F1 
3a8a6     C7 F1 CE F1 
3a8aa     D6 F1 DC F1 
3a8ae     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3a8b2     F3 FC F5 FC 
3a8b6     FE FB 79 FB 
3a8ba     62 FB 5F FB 
3a8be     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3a8c2     6F FA AF F3 
3a8c6     53 F2 12 F2 
3a8ca     0F F2 15 F2 
3a8ce     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3a8d2     2A F2 32 F2 
3a8d6     38 F2 9A FB 
3a8da     AF FB B1 FB 
3a8de     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3a8e2     B7 FB B8 FB 
3a8e6     BA FB BC FB 
3a8ea     C1 FB 3B F8 
3a8ee     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3a8f2     6E F2 6C F2 
3a8f6     74 F2 7A F2 
3a8fa     81 F2 87 F2 
3a8fe     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3a902     06 FC 09 FC 
3a906     0C FC 0E FC 
3a90a     0F FC 12 FC 
3a90e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3a912     17 FC 1A FC 
3a916     B2 F6 7B F3 
3a91a     DD F2 C5 F2 
3a91e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3a922     D4 F2 DB F2 
3a926     E0 F2 E8 F2 
3a92a     28 F8 60 FC 
3a92e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3a932     64 FC 66 FC 
3a936     68 FC 6A FC 
3a93a     6D FC 52 FC 
3a93e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3a942     78 F3 24 F3 
3a946     1A F3 1E F3 
3a94a     24 F3 2A F3 
3a94e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3a952     3D F3 80 FA 
3a956     0C FB 0F FB 
3a95a     10 FB 14 FB 
3a95e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3a962     1B FB 1D FB 
3a966     1F FB 92 FA 
3a96a     DE F4 AE F3 
3a96e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3a972     79 F3 7E F3 
3a976     84 F3 8C F3 
3a97a     92 F3 97 F3 
3a97e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3a982     67 FB 69 FB 
3a986     6B FB 6F FB 
3a98a     71 FB 72 FB 
3a98e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3a992     E3 F8 BA F4 
3a996     EE F3 CC F3 
3a99a     CA F3 CF F3 
3a99e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3a9a2     E2 F3 E8 F3 
3a9a6     ED F3 B7 FB 
3a9aa     BC FB BE FB 
3a9ae     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3a9b2     C4 FB C6 FB 
3a9b6     C8 FB C9 FB 
3a9ba     CC FB 8F F7 
3a9be     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3a9c2     1E F4 1E F4 
3a9c6     24 F4 2A F4 
3a9ca     30 F4 38 F4 
3a9ce     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3a9d2     AD FA B1 FA 
3a9d6     B4 FA B6 FA 
3a9da     BA FA BB FA 
3a9de     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3a9e2     C2 FA C6 FA 
3a9e6     55 F6 C6 F4 
3a9ea     7D F4 72 F4 
3a9ee     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3a9f2     83 F4 89 F4 
3a9f6     8F F4 94 F4 
3a9fa     66 FA 03 FB 
3a9fe     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3aa02     0A FB 0E FB 
3aa06     10 FB 11 FB 
3aa0a     16 FB 18 FB 
3aa0e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3aa12     F9 F4 CA F4 
3aa16     C5 F4 CB F4 
3aa1a     D1 F4 D7 F4 
3aa1e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3aa22     E8 F4 3F FB 
3aa26     56 FB 58 FB 
3aa2a     5A FB 5E FB 
3aa2e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3aa32     64 FB 64 FB 
3aa36     69 FB 99 F9 
3aa3a     E9 F5 33 F5 
3aa3e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3aa42     1D F5 22 F5 
3aa46     27 F5 2E F5 
3aa4a     32 F5 37 F5 
3aa4e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3aa52     BC FA BC FA 
3aa56     C1 FA C2 FA 
3aa5a     C4 FA C8 FA 
3aa5e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3aa62     F9 F7 DB F5 
3aa66     78 F5 69 F5 
3aa6a     6A F5 70 F5 
3aa6e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3aa72     7F F5 85 F5 
3aa76     6E F7 06 FB 
3aa7a     0A FB 0B FB 
3aa7e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3aa82     14 FB 15 FB 
3aa86     18 FB 1B FB 
3aa8a     1D FB 70 F7 
3aa8e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3aa92     B6 F5 BB F5 
3aa96     C0 F5 C6 F5 
3aa9a     CA F5 CF F5 
3aa9e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3aaa2     54 FB 56 FB 
3aaa6     5A FB 5B FB 
3aaaa     5E FB 5F FB 
3aaae     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3aab2     67 FB 52 FB 
3aab6     29 F7 33 F6 
3aaba     06 F6 02 F6 
3aabe     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3aac2     10 F6 16 F6 
3aac6     1A F6 1F F6 
3aaca     81 FB 9F FB 
3aace     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3aad2     51 FB F2 FA 
3aad6     E3 FA E3 FA 
3aada     E5 FA E9 FA 
3aade     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3aae2     64 F6 4D F6 
3aae6     4D F6 53 F6 
3aaea     57 F6 5C F6 
3aaee     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3aaf2     6A F6 19 FB 
3aaf6     1E FB 22 FB 
3aafa     23 FB 24 FB 
3aafe     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3ab02     2C FB 2E FB 
3ab06     32 FB F0 F8 
3ab0a     01 F7 A5 F6 
3ab0e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3ab12     9F F6 A3 F6 
3ab16     A6 F6 AC F6 
3ab1a     B0 F6 EB F7 
3ab1e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3ab22     68 FB 6C FB 
3ab26     6E FB 71 FB 
3ab2a     72 FB 74 FB 
3ab2e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3ab32     71 F8 21 F7 
3ab36     E5 F6 DD F6 
3ab3a     E1 F6 E6 F6 
3ab3e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3ab42     F5 F6 F7 F6 
3ab46     F7 FA AB FB 
3ab4a     AD FB AF FB 
3ab4e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3ab52     B6 FB B9 FB 
3ab56     BB FB BC FB 
3ab5a     21 FB 07 F8 
3ab5e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3ab62     22 F7 26 F7 
3ab66     2B F7 2E F7 
3ab6a     34 F7 38 F7 
3ab6e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3ab72     13 FB 16 FB 
3ab76     17 FB 1B FB 
3ab7a     1E FB 20 FB 
3ab7e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3ab82     26 FB 77 FA 
3ab86     F3 F7 7C F7 
3ab8a     67 F7 6A F7 
3ab8e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3ab92     74 F7 7A F7 
3ab96     7E F7 82 F7 
3ab9a     53 FB 5A FB 
3ab9e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3aba2     5F FB 63 FB 
3aba6     65 FB 67 FB 
3abaa     69 FB 6A FB 
3abae     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3abb2     B5 F7 A9 F7 
3abb6     AD F7 B0 F7 
3abba     B5 F7 B8 F7 
3abbe     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3abc2     6E F8 99 FB 
3abc6     9C FB 9D FB 
3abca     9F FB A4 FB 
3abce     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3abd2     A9 FB AB FB 
3abd6     AD FB 46 F9 
3abda     26 F8 F0 F7 
3abde     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3abe2     F4 F7 F8 F7 
3abe6     FB F7 FF F7 
3abea     03 F8 65 FA 
3abee     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3abf2     2B FB 2F FB 
3abf6     30 FB 32 FB 
3abfa     34 FB 38 FB 
3abfe     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3ac02     E9 F8 4A F8 
3ac06     2E F8 2C F8 
3ac0a     2F F8 36 F8 
3ac0e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3ac12     41 F8 44 F8 
3ac16     4A FB 67 FB 
3ac1a     68 FB 6B FB 
3ac1e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3ac22     73 FB 74 FB 
3ac26     78 FB 7A FB 
3ac2a     14 FB E7 F8 
3ac2e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3ac32     6D F8 70 F8 
3ac36     73 F8 78 F8 
3ac3a     7C F8 80 F8 
3ac3e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3ac42     A6 FB A7 FB 
3ac46     A9 FB AC FB 
3ac4a     AF FB B1 FB 
3ac4e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3ac52     B7 FB 73 FA 
3ac56     F8 F8 B4 F8 
3ac5a     A9 F8 AB F8 
3ac5e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3ac62     B4 F8 B8 F8 
3ac66     BB F8 FA F8 
3ac6a     64 FB 65 FB 
3ac6e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3ac72     6D FB 6F FB 
3ac76     70 FB 74 FB 
3ac7a     77 FB 77 FB 
3ac7e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3ac82     E9 F8 E4 F8 
3ac86     E8 F8 EB F8 
3ac8a     EE F8 F2 F8 
3ac8e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3ac92     B5 FA 9F FB 
3ac96     A1 FB A4 FB 
3ac9a     A5 FB A9 FB 
3ac9e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3aca2     AE FB B1 FB 
3aca6     B2 FB C7 F9 
3acaa     39 F9 22 F9 
3acae     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3acb2     26 F9 2A F9 
3acb6     2E F9 32 F9 
3acba     33 F9 BA FB 
3acbe     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3acc2     DE FB E1 FB 
3acc6     E2 FB E4 FB 
3acca     E5 FB E7 FB 
3acce     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3acd2     C5 F9 67 F9 
3acd6     57 F9 56 F9 
3acda     5B F9 5F F9 
3acde     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3ace2     68 F9 6C F9 
3ace6     0B FC 11 FC 
3acea     14 FC 15 FC 
3acee     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3acf2     B5 FB B5 FB 
3acf6     B6 FB B8 FB 
3acfa     E9 FA C8 F9 
3acfe     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3ad02     90 F9 94 F9 
3ad06     95 F9 99 F9 
3ad0a     9D F9 9F F9 
3ad0e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3ad12     DE FB DF FB 
3ad16     E2 FB E4 FB 
3ad1a     E6 FB E8 FB 
3ad1e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3ad22     EF FB AC FA 
3ad26     E9 F9 C7 F9 
3ad2a     C3 F9 C8 F9 
3ad2e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3ad32     D0 F9 D4 F9 
3ad36     D6 F9 0E FB 
3ad3a     11 FC 13 FC 
3ad3e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3ad42     19 FC 1B FC 
3ad46     1D FC 1E FC 
3ad4a     21 FC 22 FC 
3ad4e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3ad52     F7 F9 F7 F9 
3ad56     FB F9 FE F9 
3ad5a     00 FA 03 FA 
3ad5e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3ad62     1B FC 45 FC 
3ad66     46 FC 48 FC 
3ad6a     4A FC 4B FC 
3ad6e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3ad72     52 FC 54 FC 
3ad76     F3 FB 82 FA 
3ad7a     35 FA 28 FA 
3ad7e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3ad82     31 FA 32 FA 
3ad86     37 FA 37 FA 
3ad8a     3C FA 00 FC 
3ad8e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3ad92     09 FC 0B FC 
3ad96     0F FC 12 FC 
3ad9a     12 FC 15 FC 
3ad9e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3ada2     8D FA 60 FA 
3ada6     5B FA 5C FA 
3adaa     60 FA 61 FA 
3adae     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3adb2     6C FA 6D FA 
3adb6     37 FC 3A FC 
3adba     3B FC 3D FC 
3adbe     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3adc2     43 FC 44 FC 
3adc6     45 FC 47 FC 
3adca     51 FB AB FA 
3adce     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3add2     8E FA 91 FA 
3add6     93 FA 95 FA 
3adda     98 FA 9B FA 
3adde     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3ade2     68 FC 6A FC 
3ade6     6C FC 6E FC 
3adea     70 FC 72 FC 
3adee     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3adf2     76 FC 3B FB 
3adf6     D0 FA BB FA 
3adfa     B9 FA BD FA 
3adfe     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3ae02     C4 FA C6 FA 
3ae06     CA FA 13 FC 
3ae0a     3A FC 3A FC 
3ae0e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3ae12     41 FC 43 FC 
3ae16     44 FC 47 FC 
3ae1a     48 FC 3C FC 
3ae1e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3ae22     E6 FA E8 FA 
3ae26     EB FA EE FA 
3ae2a     F0 FA F2 FA 
3ae2e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3ae32     61 FC 66 FC 
3ae36     68 FC 6B FC 
3ae3a     6C FC 6E FC 
3ae3e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3ae42     73 FC 75 FC 
3ae46     13 FC 3F FB 
3ae4a     17 FB 12 FB 
3ae4e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3ae52     1A FB 1D FB 
3ae56     1F FB 20 FB 
3ae5a     23 FB 92 FC 
3ae5e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3ae62     96 FC 97 FC 
3ae66     9A FC 9C FC 
3ae6a     9E FC 9F FC 
3ae6e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3ae72     5A FB 41 FB 
3ae76     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3ae7a     73 32 00 04 
3ae7e     00 00 10 00 
3ae82     00 00 00 00 
3ae86     00 00 00 00 | atari2 file "atari2.s2"
3ae8a     43 87 43 87 
3ae8e     43 87 44 87 
3ae92     43 87 44 87 
3ae96     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3ae9a     43 87 43 87 
3ae9e     43 87 44 87 
3aea2     43 87 43 87 
3aea6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3aeaa     44 87 43 87 
3aeae     44 87 43 87 
3aeb2     43 87 43 87 
3aeb6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3aeba     43 87 43 87 
3aebe     44 87 43 87 
3aec2     44 87 44 87 
3aec6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3aeca     43 87 43 87 
3aece     44 87 43 87 
3aed2     43 87 42 87 
3aed6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3aeda     43 87 43 87 
3aede     43 87 43 87 
3aee2     44 87 43 87 
3aee6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3aeea     44 87 44 87 
3aeee     43 87 44 87 
3aef2     43 87 44 87 
3aef6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3aefa     44 87 43 87 
3aefe     44 87 44 87 
3af02     43 87 43 87 
3af06     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3af0a     43 87 44 87 
3af0e     44 87 43 87 
3af12     43 87 44 87 
3af16     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3af1a     43 87 43 87 
3af1e     43 87 43 87 
3af22     43 87 43 87 
3af26     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3af2a     42 87 43 87 
3af2e     44 87 42 87 
3af32     43 87 43 87 
3af36     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3af3a     43 87 44 87 
3af3e     44 87 43 87 
3af42     43 87 43 87 
3af46     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3af4a     43 87 5C 87 
3af4e     EE 86 AC 87 
3af52     4C 7C A3 78 
3af56     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3af5a     BC 78 BB 78 
3af5e     BD 78 BC 78 
3af62     BB 78 BD 78 
3af66     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3af6a     BB 78 BB 78 
3af6e     BC 78 BC 78 
3af72     BC 78 BB 78 
3af76     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3af7a     BC 78 BC 78 
3af7e     BC 78 BC 78 
3af82     BC 78 BC 78 
3af86     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3af8a     BB 78 BC 78 
3af8e     A0 78 4C 7C 
3af92     11 7A 29 89 
3af96     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3af9a     44 87 43 87 
3af9e     44 87 43 87 
3afa2     43 87 42 87 
3afa6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3afaa     43 87 43 87 
3afae     44 87 ED 85 
3afb2     71 85 52 79 
3afb6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3afba     BC 78 BC 78 
3afbe     BC 78 BC 78 
3afc2     BC 78 BC 78 
3afc6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3afca     BC 78 BC 78 
3afce     BC 78 A0 78 
3afd2     CF 7A B9 81 
3afd6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3afda     44 87 43 87 
3afde     43 87 44 87 
3afe2     43 87 44 87 
3afe6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3afea     43 87 43 87 
3afee     43 87 43 87 
3aff2     44 87 43 87 
3aff6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3affa     43 87 43 87 
3affe     44 87 43 87 
3b002     44 87 43 87 
3b006     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3b00a     44 87 43 87 
3b00e     43 87 43 87 
3b012     5A 87 39 81 
3b016     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3b01a     A5 78 BC 78 
3b01e     BB 78 BC 78 
3b022     BB 78 BC 78 
3b026     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3b02a     BC 78 BC 78 
3b02e     BC 78 BC 78 
3b032     BC 78 8F 79 
3b036     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3b03a     09 85 47 87 
3b03e     43 87 43 87 
3b042     42 87 42 87 
3b046     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3b04a     43 87 43 87 
3b04e     43 87 43 87 
3b052     43 87 44 87 
3b056     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3b05a     43 87 43 87 
3b05e     44 87 43 87 
3b062     42 87 43 87 
3b066     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3b06a     44 87 43 87 
3b06e     43 87 43 87 
3b072     44 87 44 87 
3b076     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3b07a     94 78 55 7A 
3b07e     B9 78 BC 78 
3b082     BC 78 BC 78 
3b086     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3b08a     BC 78 BB 78 
3b08e     BC 78 BC 78 
3b092     BC 78 BC 78 
3b096     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b09a     BB 78 BC 78 
3b09e     BC 78 BC 78 
3b0a2     BB 78 BC 78 
3b0a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b0aa     BC 78 BC 78 
3b0ae     BD 78 BC 78 
3b0b2     BC 78 BB 78 
3b0b6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3b0ba     94 78 B3 84 
3b0be     36 84 4A 87 
3b0c2     43 87 43 87 
3b0c6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3b0ca     43 87 44 87 
3b0ce     43 87 43 87 
3b0d2     43 87 43 87 
3b0d6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3b0da     43 87 44 87 
3b0de     43 87 44 87 
3b0e2     43 87 43 87 
3b0e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3b0ea     43 87 43 87 
3b0ee     43 87 45 87 
3b0f2     43 87 43 87 
3b0f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3b0fa     43 87 44 87 
3b0fe     44 87 44 87 
3b102     43 87 43 87 
3b106     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3b10a     43 87 42 87 
3b10e     43 87 43 87 
3b112     44 87 43 87 
3b116     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3b11a     54 87 3C 82 
3b11e     36 83 52 79 
3b122     C6 78 BC 78 
3b126     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3b12a     BB 78 BB 78 
3b12e     BC 78 BC 78 
3b132     BC 78 BC 78 
3b136     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b13a     BD 78 ED 78 
3b13e     1B 79 F4 83 
3b142     4D 83 4E 87 
3b146     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3b14a     44 87 43 87 
3b14e     42 87 44 87 
3b152     43 87 42 87 
3b156     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3b15a     43 87 54 87 
3b15e     26 82 B3 84 
3b162     D6 77 BB 78 
3b166     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3b16a     BC 78 BB 78 
3b16e     BB 78 BB 78 
3b172     BB 78 BB 78 
3b176     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3b17a     BC 78 BC 78 
3b17e     26 79 18 75 
3b182     36 83 1F 84 
3b186     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3b18a     43 87 43 87 
3b18e     43 87 43 87 
3b192     43 87 44 87 
3b196     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3b19a     43 87 44 87 
3b19e     44 87 43 87 
3b1a2     43 87 43 87 
3b1a6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3b1aa     43 87 43 87 
3b1ae     43 87 43 87 
3b1b2     44 87 44 87 
3b1b6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3b1ba     44 87 43 87 
3b1be     43 87 43 87 
3b1c2     43 87 44 87 
3b1c6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3b1ca     44 87 44 87 
3b1ce     44 87 43 87 
3b1d2     44 87 43 87 
3b1d6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b1da     43 87 43 87 
3b1de     43 87 44 87 
3b1e2     44 87 43 87 
3b1e6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b1ea     43 87 43 87 
3b1ee     43 87 43 87 
3b1f2     43 87 44 87 
3b1f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3b1fa     43 87 44 87 
3b1fe     43 87 44 87 
3b202     19 87 7D 86 
3b206     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3b20a     B1 78 BC 78 
3b20e     BC 78 BC 78 
3b212     BC 78 BC 78 
3b216     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3b21a     BC 78 BC 78 
3b21e     BD 78 BC 78 
3b222     B7 78 3B 7B 
3b226     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3b22a     96 86 44 87 
3b22e     43 87 43 87 
3b232     43 87 43 87 
3b236     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3b23a     44 87 44 87 
3b23e     43 87 44 87 
3b242     43 87 44 87 
3b246     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3b24a     43 87 44 87 
3b24e     43 87 44 87 
3b252     43 87 44 87 
3b256     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3b25a     43 87 44 87 
3b25e     43 87 43 87 
3b262     44 87 43 87 
3b266     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b26a     44 87 44 87 
3b26e     43 87 43 87 
3b272     43 87 44 87 
3b276     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3b27a     43 87 43 87 
3b27e     43 87 43 87 
3b282     44 87 44 87 
3b286     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3b28a     36 83 CF 7A 
3b28e     AB 78 BB 78 
3b292     BC 78 BC 78 
3b296     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3b29a     BB 78 BC 78 
3b29e     BC 78 BC 78 
3b2a2     BC 78 BC 78 
3b2a6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3b2aa     BC 78 BC 78 
3b2ae     BC 78 BB 78 
3b2b2     BC 78 BC 78 
3b2b6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3b2ba     BB 78 BC 78 
3b2be     BB 78 BC 78 
3b2c2     BC 78 BD 78 
3b2c6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3b2ca     BC 78 BC 78 
3b2ce     BC 78 BC 78 
3b2d2     BC 78 BD 78 
3b2d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3b2da     BC 78 BB 78 
3b2de     BC 78 BB 78 
3b2e2     BB 78 BC 78 
3b2e6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3b2ea     BC 78 BC 78 
3b2ee     BC 78 BC 78 
3b2f2     BC 78 BB 78 
3b2f6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3b2fa     BC 78 BC 78 
3b2fe     BC 78 BD 78 
3b302     BB 78 BC 78 
3b306     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3b30a     BC 78 BC 78 
3b30e     BC 78 BB 78 
3b312     BC 78 BB 78 
3b316     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3b31a     BB 78 BC 78 
3b31e     BC 78 BC 78 
3b322     BC 78 BB 78 
3b326     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b32a     BC 78 BC 78 
3b32e     BC 78 BB 78 
3b332     BC 78 BB 78 
3b336     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b33a     BC 78 BC 78 
3b33e     BC 78 BC 78 
3b342     BB 78 BC 78 
3b346     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3b34a     BC 78 9F 78 
3b34e     52 79 B3 84 
3b352     2F 86 60 87 
3b356     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3b35a     44 87 43 87 
3b35e     43 87 43 87 
3b362     43 87 43 87 
3b366     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3b36a     43 87 43 87 
3b36e     43 87 44 87 
3b372     43 87 43 87 
3b376     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3b37a     43 87 43 87 
3b37e     43 87 43 87 
3b382     43 87 44 87 
3b386     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3b38a     44 87 44 87 
3b38e     5E 87 BC 80 
3b392     FB 80 94 78 
3b396     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3b39a     BD 78 BC 78 
3b39e     BB 78 BC 78 
3b3a2     BB 78 BB 78 
3b3a6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3b3aa     BC 78 BB 78 
3b3ae     BB 78 6B 79 
3b3b2     D6 77 AC 87 
3b3b6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3b3ba     43 87 44 87 
3b3be     43 87 43 87 
3b3c2     44 87 43 87 
3b3c6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3b3ca     43 87 44 87 
3b3ce     43 87 5C 87 
3b3d2     E7 80 00 80 
3b3d6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3b3da     BC 78 BD 78 
3b3de     BC 78 BC 78 
3b3e2     BC 78 BB 78 
3b3e6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b3ea     BC 78 BC 78 
3b3ee     BB 78 BC 78 
3b3f2     BB 78 BC 78 
3b3f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b3fa     BB 78 BC 78 
3b3fe     BC 78 BC 78 
3b402     BC 78 BC 78 
3b406     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b40a     BC 78 BC 78 
3b40e     BC 78 BC 78 
3b412     A0 78 8D 7B 
3b416     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3b41a     60 87 43 87 
3b41e     44 87 44 87 
3b422     43 87 43 87 
3b426     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3b42a     44 87 43 87 
3b42e     43 87 43 87 
3b432     44 87 73 86 
3b436     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3b43a     51 7B B6 78 
3b43e     BC 78 BD 78 
3b442     BC 78 BC 78 
3b446     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b44a     BB 78 BC 78 
3b44e     BD 78 BB 78 
3b452     BC 78 BB 78 
3b456     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3b45a     BC 78 BC 78 
3b45e     BC 78 BC 78 
3b462     BB 78 BC 78 
3b466     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b46a     BC 78 BB 78 
3b46e     BB 78 BC 78 
3b472     BC 78 BB 78 
3b476     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3b47a     22 8C AF 84 
3b47e     48 87 43 87 
3b482     44 87 43 87 
3b486     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3b48a     43 87 42 87 
3b48e     43 87 43 87 
3b492     44 87 43 87 
3b496     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b49a     43 87 43 87 
3b49e     44 87 44 87 
3b4a2     43 87 43 87 
3b4a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3b4aa     43 87 43 87 
3b4ae     43 87 43 87 
3b4b2     44 87 43 87 
3b4b6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3b4ba     9F 8B D6 77 
3b4be     16 7C B3 78 
3b4c2     BC 78 BB 78 
3b4c6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3b4ca     BB 78 BC 78 
3b4ce     BB 78 BC 78 
3b4d2     BC 78 BC 78 
3b4d6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b4da     BC 78 BB 78 
3b4de     BB 78 BC 78 
3b4e2     BB 78 BC 78 
3b4e6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3b4ea     BB 78 BB 78 
3b4ee     BC 78 BC 78 
3b4f2     BC 78 BB 78 
3b4f6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3b4fa     BC 78 BC 78 
3b4fe     BC 78 BD 78 
3b502     BB 78 BC 78 
3b506     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3b50a     BC 78 BC 78 
3b50e     BC 78 BB 78 
3b512     BC 78 BC 78 
3b516     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b51a     A8 78 54 7E 
3b51e     F4 83 17 82 
3b522     50 87 43 87 
3b526     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3b52a     44 87 43 87 
3b52e     44 87 43 87 
3b532     43 87 44 87 
3b536     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3b53a     43 87 28 87 
3b53e     20 85 CF 7A 
3b542     70 7D AD 78 
3b546     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3b54a     BB 78 BC 78 
3b54e     BC 78 BC 78 
3b552     BB 78 BB 78 
3b556     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3b55a     BB 78 B2 78 
3b55e     9A 7C CF 7A 
3b562     4A 87 0D 87 
3b566     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3b56a     43 87 44 87 
3b56e     43 87 44 87 
3b572     43 87 43 87 
3b576     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3b57a     44 87 43 87 
3b57e     28 87 51 85 
3b582     11 7A 1E 7D 
3b586     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3b58a     BC 78 BB 78 
3b58e     BC 78 BC 78 
3b592     BC 78 BC 78 
3b596     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b59a     BB 78 BC 78 
3b59e     BB 78 BC 78 
3b5a2     BC 78 BC 78 
3b5a6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b5aa     BB 78 BC 78 
3b5ae     BC 78 BC 78 
3b5b2     BD 78 BB 78 
3b5b6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3b5ba     BC 78 BB 78 
3b5be     BC 78 BC 78 
3b5c2     BC 78 BB 78 
3b5c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b5ca     BC 78 BC 78 
3b5ce     BC 78 BC 78 
3b5d2     BB 78 BC 78 
3b5d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b5da     BC 78 BD 78 
3b5de     BC 78 BC 78 
3b5e2     BC 78 BB 78 
3b5e6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b5ea     BC 78 BB 78 
3b5ee     BB 78 BC 78 
3b5f2     BC 78 BB 78 
3b5f6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b5fa     BB 78 BB 78 
3b5fe     BB 78 BC 78 
3b602     B6 78 48 7D 
3b606     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3b60a     56 87 43 87 
3b60e     42 87 44 87 
3b612     44 87 43 87 
3b616     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b61a     43 87 44 87 
3b61e     43 87 44 87 
3b622     4C 87 7E 83 
3b626     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3b62a     F7 78 BC 78 
3b62e     BC 78 BB 78 
3b632     BB 78 BC 78 
3b636     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b63a     BC 78 BB 78 
3b63e     BC 78 BC 78 
3b642     BB 78 BC 78 
3b646     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3b64a     BB 78 BC 78 
3b64e     BC 78 BC 78 
3b652     BC 78 BB 78 
3b656     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b65a     BC 78 BC 78 
3b65e     BC 78 BC 78 
3b662     BC 78 BB 78 
3b666     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b66a     BC 78 BB 78 
3b66e     BB 78 BC 78 
3b672     BC 78 BB 78 
3b676     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b67a     BC 78 BC 78 
3b67e     BB 78 BC 78 
3b682     BC 78 BC 78 
3b686     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3b68a     73 32 00 04 
3b68e     00 00 10 00 
3b692     00 00 00 00 
3b696     00 00 00 00 | atari12 file "atari12.s2"
3b69a     00 6D 00 6D 
3b69e     00 6D 00 6D 
3b6a2     00 6D 00 6D 
3b6a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b6aa     00 6D 00 6D 
3b6ae     00 6D 00 6D 
3b6b2     00 6D 00 6D 
3b6b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b6ba     00 6D 00 6D 
3b6be     00 6D 00 6D 
3b6c2     00 6D 00 6D 
3b6c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b6ca     00 6D 00 6D 
3b6ce     00 6D 00 6D 
3b6d2     00 6D 00 6D 
3b6d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b6da     00 6D 00 6D 
3b6de     00 6D 00 6D 
3b6e2     00 6D 00 6D 
3b6e6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3b6ea     00 6C 00 6C 
3b6ee     00 6C 00 6C 
3b6f2     00 6C 00 6C 
3b6f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b6fa     00 6C 00 6C 
3b6fe     00 6C 00 6C 
3b702     00 6C 00 6C 
3b706     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b70a     00 6C 00 6C 
3b70e     00 6C 00 6C 
3b712     00 6C 00 6C 
3b716     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b71a     00 6C 00 6C 
3b71e     00 6C 00 6C 
3b722     00 6C 00 6C 
3b726     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b72a     00 6C 00 6C 
3b72e     00 6C 00 6C 
3b732     00 6C 00 6C 
3b736     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b73a     00 6C 00 6C 
3b73e     00 6C 00 6C 
3b742     00 6C 00 6C 
3b746     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b74a     00 6C 00 6C 
3b74e     00 6C 00 6C 
3b752     00 6C 00 6C 
3b756     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b75a     00 6C 00 6C 
3b75e     00 6C 00 6C 
3b762     00 6C 00 6C 
3b766     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b76a     00 6C 00 6C 
3b76e     00 6C 00 6C 
3b772     00 6C 00 6C 
3b776     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b77a     00 6C 00 6C 
3b77e     00 6C 00 6C 
3b782     00 6C 00 6C 
3b786     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b78a     00 6C 00 6C 
3b78e     00 6C 00 6C 
3b792     00 6C 00 6C 
3b796     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b79a     00 6C 00 6B 
3b79e     00 6B 00 6B 
3b7a2     00 6B 00 6B 
3b7a6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b7aa     00 6B 00 6B 
3b7ae     00 6B 00 6B 
3b7b2     00 6B 00 6B 
3b7b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b7ba     00 6B 00 6B 
3b7be     00 6B 00 6B 
3b7c2     00 6B 00 6B 
3b7c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b7ca     00 6B 00 6B 
3b7ce     00 6B 00 6B 
3b7d2     00 6B 00 6B 
3b7d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b7da     00 6B 00 6B 
3b7de     00 6B 00 6B 
3b7e2     00 6B 00 6B 
3b7e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b7ea     00 6B 00 6B 
3b7ee     00 6B 00 6B 
3b7f2     00 6B 00 6B 
3b7f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b7fa     00 6B 00 6B 
3b7fe     00 6B 00 6B 
3b802     00 6B 00 6B 
3b806     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b80a     00 6B 00 6B 
3b80e     00 6B 00 6B 
3b812     00 6B 00 6B 
3b816     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b81a     00 6B 00 6B 
3b81e     00 6B 00 6B 
3b822     00 6B 00 6B 
3b826     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b82a     00 6B 00 6B 
3b82e     00 6B 00 6B 
3b832     00 6A 00 9D 
3b836     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3b83a     00 9E 00 9E 
3b83e     00 9E 00 9E 
3b842     00 9E 00 9E 
3b846     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b84a     00 9E 00 9E 
3b84e     00 9E 00 9E 
3b852     00 9E 00 9E 
3b856     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b85a     00 9E 00 9E 
3b85e     00 9E 00 9E 
3b862     00 9E 00 9E 
3b866     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b86a     00 9E 00 9E 
3b86e     00 9E 00 9E 
3b872     00 9E 00 9E 
3b876     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b87a     00 9E 00 9E 
3b87e     00 9E 00 9E 
3b882     00 9E 00 9E 
3b886     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b88a     00 9E 00 9E 
3b88e     00 9E 00 9E 
3b892     00 9E 00 9E 
3b896     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b89a     00 9E 00 9E 
3b89e     00 9E 00 9E 
3b8a2     00 9E 00 9E 
3b8a6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b8aa     00 9E 00 9E 
3b8ae     00 9E 00 9E 
3b8b2     00 9E 00 9E 
3b8b6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b8ba     00 9E 00 9E 
3b8be     00 9E 00 9E 
3b8c2     00 9E 00 9E 
3b8c6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3b8ca     00 9F 00 9F 
3b8ce     00 9F 00 9F 
3b8d2     00 9F 00 9F 
3b8d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b8da     00 9F 00 9F 
3b8de     00 9F 00 9F 
3b8e2     00 9F 00 9F 
3b8e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b8ea     00 9F 00 9F 
3b8ee     00 9F 00 9F 
3b8f2     00 9F 00 9F 
3b8f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b8fa     00 9F 00 9F 
3b8fe     00 9F 00 9F 
3b902     00 9F 00 9F 
3b906     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b90a     00 9F 00 9F 
3b90e     00 9F 00 9F 
3b912     00 9F 00 9F 
3b916     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b91a     00 9F 00 9F 
3b91e     00 9F 00 9F 
3b922     00 9F 00 9F 
3b926     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b92a     00 9F 00 9F 
3b92e     00 9F 00 9F 
3b932     00 9F 00 9F 
3b936     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b93a     00 9F 00 9F 
3b93e     00 9F 00 9F 
3b942     00 9F 00 9F 
3b946     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b94a     00 9F 00 9F 
3b94e     00 9F 00 9F 
3b952     00 9F 00 9F 
3b956     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b95a     00 9F 00 9F 
3b95e     00 9F 00 9F 
3b962     00 9F 00 9F 
3b966     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b96a     00 9F 00 9F 
3b96e     00 9F 00 9F 
3b972     00 9F 00 9F 
3b976     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b97a     00 9F 00 9F 
3b97e     00 9F 00 9F 
3b982     00 9F 00 9F 
3b986     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b98a     00 9F 00 9F 
3b98e     00 9F 00 A0 
3b992     00 A0 00 A0 
3b996     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b99a     00 A0 00 A0 
3b99e     00 A0 00 A0 
3b9a2     00 A0 00 A0 
3b9a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b9aa     00 A0 00 A0 
3b9ae     00 A0 00 A0 
3b9b2     00 A0 00 A0 
3b9b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b9ba     00 A0 00 A0 
3b9be     00 A0 00 A0 
3b9c2     00 A0 00 A0 
3b9c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b9ca     00 A0 00 A0 
3b9ce     00 A0 00 A0 
3b9d2     00 A0 00 A0 
3b9d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b9da     00 A0 00 A0 
3b9de     00 A0 00 A0 
3b9e2     00 A0 00 A0 
3b9e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b9ea     00 A0 00 A0 
3b9ee     00 A0 00 A0 
3b9f2     00 A0 00 A0 
3b9f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b9fa     00 A0 00 A0 
3b9fe     00 A0 00 A0 
3ba02     00 A0 00 A0 
3ba06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ba0a     00 A0 00 A0 
3ba0e     00 A0 00 A0 
3ba12     00 A0 00 A0 
3ba16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ba1a     00 A0 00 A0 
3ba1e     00 A0 00 A0 
3ba22     00 A0 00 A0 
3ba26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ba2a     00 A0 00 A0 
3ba2e     00 A0 00 A0 
3ba32     00 A0 00 A0 
3ba36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ba3a     00 A0 00 A0 
3ba3e     00 A0 00 A0 
3ba42     00 A0 00 A0 
3ba46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3ba4a     00 A0 00 A0 
3ba4e     00 A0 00 A0 
3ba52     00 A0 00 A0 
3ba56     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3ba5a     00 6D 00 6D 
3ba5e     00 6D 00 6D 
3ba62     00 6D 00 6D 
3ba66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba6a     00 6D 00 6D 
3ba6e     00 6D 00 6D 
3ba72     00 6D 00 6D 
3ba76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba7a     00 6D 00 6D 
3ba7e     00 6D 00 6D 
3ba82     00 6D 00 6D 
3ba86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba8a     00 6D 00 6D 
3ba8e     00 6D 00 6D 
3ba92     00 6D 00 6D 
3ba96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba9a     00 6D 00 6D 
3ba9e     00 6D 00 6D 
3baa2     00 6D 00 6D 
3baa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3baaa     00 6D 00 6D 
3baae     00 6D 00 6D 
3bab2     00 6D 00 6D 
3bab6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3baba     00 6D 00 6D 
3babe     00 6D 00 6D 
3bac2     00 6D 00 6D 
3bac6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3baca     00 6D 00 6D 
3bace     00 6D 00 6D 
3bad2     00 6D 00 6D 
3bad6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bada     00 6D 00 6D 
3bade     00 A0 00 A0 
3bae2     00 A0 00 A0 
3bae6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3baea     00 A0 00 A0 
3baee     00 A0 00 A0 
3baf2     00 A0 00 A0 
3baf6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bafa     00 A0 00 A0 
3bafe     00 A0 00 A0 
3bb02     00 A0 00 A0 
3bb06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb0a     00 A0 00 A0 
3bb0e     00 A0 00 A0 
3bb12     00 A0 00 A0 
3bb16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb1a     00 A0 00 A0 
3bb1e     00 A0 00 A0 
3bb22     00 A0 00 A0 
3bb26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb2a     00 A0 00 A0 
3bb2e     00 A0 00 A0 
3bb32     00 A0 00 A0 
3bb36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb3a     00 A0 00 A0 
3bb3e     00 A0 00 A0 
3bb42     00 A0 00 A0 
3bb46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb4a     00 A0 00 A0 
3bb4e     00 A0 00 A0 
3bb52     00 A0 00 A0 
3bb56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb5a     00 A0 00 A0 
3bb5e     00 A0 00 A0 
3bb62     00 A0 00 A0 
3bb66     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3bb6a     00 6D 00 6D 
3bb6e     00 6D 00 6D 
3bb72     00 6D 00 6D 
3bb76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bb7a     00 6D 00 6D 
3bb7e     00 6D 00 6D 
3bb82     00 6D 00 6D 
3bb86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bb8a     00 6D 00 6D 
3bb8e     00 6D 00 6D 
3bb92     00 6D 00 6D 
3bb96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bb9a     00 6D 00 6D 
3bb9e     00 6D 00 6D 
3bba2     00 6D 00 6D 
3bba6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bbaa     00 6D 00 6D 
3bbae     00 6D 00 6D 
3bbb2     00 6D 00 6D 
3bbb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bbba     00 6D 00 6D 
3bbbe     00 6D 00 6D 
3bbc2     00 6D 00 6D 
3bbc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bbca     00 6D 00 6D 
3bbce     00 6D 00 6D 
3bbd2     00 6D 00 6D 
3bbd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bbda     00 6D 00 6D 
3bbde     00 6D 00 6D 
3bbe2     00 6D 00 6D 
3bbe6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bbea     00 6D 00 6D 
3bbee     00 6C 00 A0 
3bbf2     00 9F 00 A0 
3bbf6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3bbfa     00 A0 00 A0 
3bbfe     00 A0 00 A0 
3bc02     00 A0 00 A0 
3bc06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc0a     00 A0 00 A0 
3bc0e     00 A0 00 A0 
3bc12     00 A0 00 A0 
3bc16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc1a     00 A0 00 A0 
3bc1e     00 A0 00 A0 
3bc22     00 A0 00 A0 
3bc26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc2a     00 A0 00 A0 
3bc2e     00 A0 00 A0 
3bc32     00 A0 00 A0 
3bc36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc3a     00 A0 00 A0 
3bc3e     00 A0 00 A0 
3bc42     00 A0 00 A0 
3bc46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc4a     00 A0 00 A0 
3bc4e     00 A0 00 A0 
3bc52     00 A0 00 A0 
3bc56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc5a     00 A0 00 A0 
3bc5e     00 A0 00 A0 
3bc62     00 A0 00 A0 
3bc66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc6a     00 A0 00 A0 
3bc6e     00 A0 00 A0 
3bc72     00 A0 00 A0 
3bc76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc7a     00 A0 00 A0 
3bc7e     00 A0 00 A0 
3bc82     00 A0 00 A0 
3bc86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc8a     00 A0 00 A0 
3bc8e     00 A0 00 A0 
3bc92     00 A0 00 A0 
3bc96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bc9a     00 A0 00 A0 
3bc9e     00 A0 00 A0 
3bca2     00 A0 00 A0 
3bca6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3bcaa     00 A1 00 A1 
3bcae     00 A1 00 A1 
3bcb2     00 A1 00 A1 
3bcb6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3bcba     00 A1 00 A1 
3bcbe     00 A1 00 A1 
3bcc2     00 A1 00 A1 
3bcc6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3bcca     00 A1 00 A1 
3bcce     00 A1 00 A1 
3bcd2     00 A1 00 A1 
3bcd6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3bcda     00 A1 00 A1 
3bcde     00 A1 00 A1 
3bce2     00 A1 00 A1 
3bce6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3bcea     00 A1 00 A1 
3bcee     00 A1 00 A1 
3bcf2     00 A1 00 A1 
3bcf6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3bcfa     00 A1 00 A1 
3bcfe     00 A1 00 A1 
3bd02     00 6E 00 6E 
3bd06     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3bd0a     00 6E 00 6E 
3bd0e     00 6E 00 6E 
3bd12     00 6E 00 6E 
3bd16     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3bd1a     00 6E 00 6E 
3bd1e     00 6E 00 6E 
3bd22     00 6E 00 6E 
3bd26     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3bd2a     00 6E 00 6E 
3bd2e     00 6E 00 6E 
3bd32     00 6E 00 6E 
3bd36     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3bd3a     00 6E 00 6D 
3bd3e     00 6D 00 6D 
3bd42     00 6D 00 6D 
3bd46     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bd4a     00 6D 00 6D 
3bd4e     00 6D 00 6D 
3bd52     00 6D 00 6D 
3bd56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bd5a     00 6D 00 6D 
3bd5e     00 6D 00 6D 
3bd62     00 6D 00 6D 
3bd66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bd6a     00 6D 00 6D 
3bd6e     00 6D 00 6D 
3bd72     00 6D 00 6D 
3bd76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bd7a     00 6D 00 6D 
3bd7e     00 6D 00 6D 
3bd82     00 6D 00 6D 
3bd86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bd8a     00 6D 00 6D 
3bd8e     00 6D 00 6D 
3bd92     00 6D 00 6D 
3bd96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bd9a     00 6D 00 6D 
3bd9e     00 6D 00 6D 
3bda2     00 6D 00 6D 
3bda6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bdaa     00 6D 00 6D 
3bdae     00 6D 00 6D 
3bdb2     00 6D 00 6D 
3bdb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bdba     00 6D 00 6D 
3bdbe     00 6D 00 6D 
3bdc2     00 6D 00 6D 
3bdc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bdca     00 6D 00 6D 
3bdce     00 6D 00 6D 
3bdd2     00 6D 00 6D 
3bdd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bdda     00 6D 00 6D 
3bdde     00 6D 00 6D 
3bde2     00 6D 00 6D 
3bde6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bdea     00 6D 00 6D 
3bdee     00 6C 00 6C 
3bdf2     00 6C 00 6C 
3bdf6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3bdfa     00 6C 00 6C 
3bdfe     00 6C 00 6C 
3be02     00 6C 00 6C 
3be06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3be0a     00 6C 00 6C 
3be0e     00 6C 00 6C 
3be12     00 9D 00 9F 
3be16     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3be1a     00 9F 00 9F 
3be1e     00 9F 00 9F 
3be22     00 A0 00 A0 
3be26     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be2a     00 A0 00 A0 
3be2e     00 A0 00 A0 
3be32     00 A0 00 A0 
3be36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be3a     00 A0 00 A0 
3be3e     00 A0 00 A0 
3be42     00 A0 00 A0 
3be46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be4a     00 A0 00 A0 
3be4e     00 A0 00 A0 
3be52     00 A0 00 A0 
3be56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be5a     00 A0 00 A0 
3be5e     00 A0 00 A0 
3be62     00 A0 00 A0 
3be66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be6a     00 A0 00 A0 
3be6e     00 A0 00 A0 
3be72     00 A0 00 A0 
3be76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be7a     00 A0 00 A0 
3be7e     00 A0 00 A0 
3be82     00 A0 00 A0 
3be86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be8a     00 A0 00 A0 
3be8e     00 A0 00 A0 
3be92     00 A0 00 A0 
3be96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3be9a     01 00 00 00 
3be9e     00 00 00 00 
3bea2     00 00 00 00 
3bea6     00 00 00 00 | mouse  file "mouse2.def"
3beaa     00 00 00 00 
3beae     00 00 00 00 
3beb2     00 00 00 00 
3beb6     00 00 00 00 | 	byte	$00[16]
3beba     01 01 00 00 
3bebe     00 00 00 00 
3bec2     00 00 00 00 
3bec6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3beca     00 00 00 00 
3bece     00 00 00 00 
3bed2     00 00 00 00 
3bed6     00 00 00 00 | 	byte	$00[16]
3beda     01 0D 01 00 
3bede     00 00 00 00 
3bee2     00 00 00 00 
3bee6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3beea     00 00 00 00 
3beee     00 00 00 00 
3bef2     00 00 00 00 
3bef6     00 00 00 00 | 	byte	$00[16]
3befa     01 0D 0D 01 
3befe     00 00 00 00 
3bf02     00 00 00 00 
3bf06     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf0a     00 00 00 00 
3bf0e     00 00 00 00 
3bf12     00 00 00 00 
3bf16     00 00 00 00 | 	byte	$00[16]
3bf1a     01 0D 0D 0D 
3bf1e     01 00 00 00 
3bf22     00 00 00 00 
3bf26     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf2a     00 00 00 00 
3bf2e     00 00 00 00 
3bf32     00 00 00 00 
3bf36     00 00 00 00 | 	byte	$00[16]
3bf3a     01 0D 0D 0D 
3bf3e     0D 01 00 00 
3bf42     00 00 00 00 
3bf46     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf4a     00 00 00 00 
3bf4e     00 00 00 00 
3bf52     00 00 00 00 
3bf56     00 00 00 00 | 	byte	$00[16]
3bf5a     01 0D 0D 0D 
3bf5e     0D 0D 01 00 
3bf62     00 00 00 00 
3bf66     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf6a     00 00 00 00 
3bf6e     00 00 00 00 
3bf72     00 00 00 00 
3bf76     00 00 00 00 | 	byte	$00[16]
3bf7a     01 0D 0D 0D 
3bf7e     0D 0D 0D 01 
3bf82     00 00 00 00 
3bf86     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3bf8a     00 00 00 00 
3bf8e     00 00 00 00 
3bf92     00 00 00 00 
3bf96     00 00 00 00 | 	byte	$00[16]
3bf9a     01 0D 0D 0D 
3bf9e     0D 0D 0D 0C 
3bfa2     01 00 00 00 
3bfa6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3bfaa     00 00 00 00 
3bfae     00 00 00 00 
3bfb2     00 00 00 00 
3bfb6     00 00 00 00 | 	byte	$00[16]
3bfba     01 0D 0D 0D 
3bfbe     0D 0D 0D 0D 
3bfc2     0C 01 00 00 
3bfc6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3bfca     00 00 00 00 
3bfce     00 00 00 00 
3bfd2     00 00 00 00 
3bfd6     00 00 00 00 | 	byte	$00[16]
3bfda     01 0D 0D 0D 
3bfde     0D 0D 0D 0D 
3bfe2     0D 0C 01 00 
3bfe6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3bfea     00 00 00 00 
3bfee     00 00 00 00 
3bff2     00 00 00 00 
3bff6     00 00 00 00 | 	byte	$00[16]
3bffa     01 0D 0D 0D 
3bffe     0D 0D 0D 0D 
3c002     0D 0D 0B 01 
3c006     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3c00a     00 00 00 00 
3c00e     00 00 00 00 
3c012     00 00 00 00 
3c016     00 00 00 00 | 	byte	$00[16]
3c01a     01 0D 0D 0D 
3c01e     0C 0D 0D 03 
3c022     01 01 01 01 
3c026     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3c02a     00 00 00 00 
3c02e     00 00 00 00 
3c032     00 00 00 00 
3c036     00 00 00 00 | 	byte	$00[16]
3c03a     01 0D 0D 0C 
3c03e     01 09 0D 03 
3c042     00 00 00 00 
3c046     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3c04a     00 00 00 00 
3c04e     00 00 00 00 
3c052     00 00 00 00 
3c056     00 00 00 00 | 	byte	$00[16]
3c05a     01 0D 0C 01 
3c05e     00 01 0D 0B 
3c062     01 00 00 00 
3c066     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3c06a     00 00 00 00 
3c06e     00 00 00 00 
3c072     00 00 00 00 
3c076     00 00 00 00 | 	byte	$00[16]
3c07a     01 0C 01 00 
3c07e     00 01 0A 0D 
3c082     01 00 00 00 
3c086     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3c08a     00 00 00 00 
3c08e     00 00 00 00 
3c092     00 00 00 00 
3c096     00 00 00 00 | 	byte	$00[16]
3c09a     01 01 00 00 
3c09e     00 00 01 0D 
3c0a2     0B 01 00 00 
3c0a6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3c0aa     00 00 00 00 
3c0ae     00 00 00 00 
3c0b2     00 00 00 00 
3c0b6     00 00 00 00 
3c0ba     00 00 00 00 
3c0be     00 00       | 	byte	$00[22]
3c0c0     01 0B 0D 01 
3c0c4     00 00 00 00 
3c0c8     00 00 00 00 
3c0cc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c0d0     00 00 00 00 
3c0d4     00 00 00 00 
3c0d8     00 00 00 00 
3c0dc     00 00 00 00 
3c0e0     00          | 	byte	$00[17]
3c0e1     01 01 00 00 
3c0e5     00 00 00 00 
3c0e9     00 00 00 00 
3c0ed     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c0f1     00 00 00 00 
      ...             
3c295     00 00 00 00 
3c299     00          | 	byte	$00[425]
3c29a                 | 
3c29a     00 00       |              	org
3c29c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3c2a0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3c2a4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3c2a8 003             | 
3c2a8 003 00 30 04 F6 |                 mov     psramaddr,#0
3c2ac 004             | 
3c2ac 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3c2b0 005 20 00 00 FF 
3c2b4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3c2b8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3c2bc 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3c2c0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3c2c4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3c2c8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3c2cc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3c2d0 00d             | 
3c2d0 00d 20 00 00 FF 
3c2d4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3c2d8 00f E0 03 00 FF 
3c2dc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3c2e0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3c2e4 012             | 
3c2e4 012             |                 
3c2e4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3c2e8 013             |     
3c2e8 013 01 2C 60 FD |                 cogid 	t11				' get id
3c2ec 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3c2f0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3c2f4 016             | 
3c2f4 016 00 00 00 00 | t11 		long 	0
3c2f8 017 00 FF 07 00 | mailbox 	long 	$7FF00
3c2fc 018 00 00 00 00 | psramaddr 	long 	0
3c300 019 00 00 00 00 | pslockval	long 	0
3c304 01a 00 00 00 00 | cmd             long    0
3c308 01b 00 00 00 00 | buf1            long    0
3c30c 01c 00 40 00 00 | buf2            long    16384
3c310 01d 14 C3 03 00 | 	long	@@@_dat_ + 12612
3c314 01e 50 32 20 52 
3c318 01f 65 74 72 6F 
3c31c 020 6D 61 63 68 
3c320 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3c324 022 42 41 53 49 
3c328 023 43 20 76 65 
3c32c 024 72 73 69 6F 
3c330 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3c334 026 34 39 20 62 
3c338 027 65 74 61 20 
3c33c 028 33 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $33, $00, $00, $00
3c340 029             | 	alignl
3c340 029             | _hg010b_spin2_dat_
3c340 029             | 
3c340 029 00 00 00 00 
3c344 02a 00 00 00 00 
3c348 02b 00 00 00 00 
3c34c 02c 00 00 00 00 
3c350 02d 00 00 00    | vga_font       file "vgafont.def"
3c353 02d 7E 81 A5 81 
3c357 02e 81 BD 99 81 
3c35b 02f 81 7E 00 00 
3c35f 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3c363 031 7E FF DB FF 
3c367 032 FF C3 E7 FF 
3c36b 033 FF 7E 00 00 
3c36f 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3c373 035 00 36 7F 7F 
3c377 036 7F 7F 3E 1C 
3c37b 037 08 00 00 00 
3c37f 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3c383 039 00 08 1C 3E 
3c387 03a 7F 3E 1C 08 
3c38b 03b 00 00 00 00 
3c38f 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3c393 03d 18 3C 3C E7 
3c397 03e E7 E7 18 18 
3c39b 03f 3C 00 00 00 
3c39f 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3c3a3 041 18 3C 7E FF 
3c3a7 042 FF 7E 18 18 
3c3ab 043 3C 00 00 00 
3c3af 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3c3b3 045 00 00 00 18 
3c3b7 046 3C 3C 18 00 
3c3bb 047 00 00 00 00 
3c3bf 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3c3c3 049 FF FF FF E7 
3c3c7 04a C3 C3 E7 FF 
3c3cb 04b FF FF FF FF 
3c3cf 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3c3d3 04d 00 00 3C 66 
3c3d7 04e 42 42 66 3C 
3c3db 04f 00 00 00 00 
3c3df 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3c3e3 051 FF FF C3 99 
3c3e7 052 BD BD 99 C3 
3c3eb 053 FF FF FF FF 
3c3ef 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3c3f3 055 78 70 58 4C 
3c3f7 056 1E 33 33 33 
3c3fb 057 33 1E 00 00 
3c3ff 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3c403 059 3C 66 66 66 
3c407 05a 66 3C 18 7E 
3c40b 05b 18 18 00 00 
3c40f 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3c413 05d FC CC FC 0C 
3c417 05e 0C 0C 0C 0E 
3c41b 05f 0F 07 00 00 
3c41f 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3c423 061 FE C6 FE C6 
3c427 062 C6 C6 C6 E6 
3c42b 063 E7 67 03 00 
3c42f 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3c433 065 18 18 DB 3C 
3c437 066 E7 3C DB 18 
3c43b 067 18 00 00 00 
3c43f 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3c443 069 03 07 0F 1F 
3c447 06a 7F 1F 0F 07 
3c44b 06b 03 01 00 00 
3c44f 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3c453 06d 60 70 78 7C 
3c457 06e 7F 7C 78 70 
3c45b 06f 60 40 00 00 
3c45f 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3c463 071 18 3C 7E 18 
3c467 072 18 18 7E 3C 
3c46b 073 18 00 00 00 
3c46f 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3c473 075 66 66 66 66 
3c477 076 66 66 66    | 	byte	$66[7]
3c47a 077 00 66 66 00 
3c47e 078 00 00 00 00 
3c482 079 00 FE DB DB 
3c486 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3c48a 07b D8 D8 D8 00 
3c48e 07c 00 00 00 3E 
3c492 07d 63 06 1C 36 
3c496 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3c49a 07f 30 63 3E 00 
3c49e 080 00 00 00 00 
3c4a2 081 00 00 00 00 
3c4a6 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3c4aa 083 7F 7F 7F 00 
3c4ae 084 00 00 00 00 
3c4b2 085 00 18 3C 7E 
3c4b6 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3c4ba 087 3C 18 7E 00 
3c4be 088 00 00 00 00 
3c4c2 089 00 18 3C 7E 
3c4c6 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3c4ca 08b 18 18 18 00 
3c4ce 08c 00 00 00 00 
3c4d2 08d 00 18 18 18 
3c4d6 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c4da 08f 7E 3C 18 00 
3c4de 090 00 00 00 00 
3c4e2 091 00 00 00 18 
3c4e6 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3c4ea 093 00 00 00 00 
3c4ee 094 00 00 00 00 
3c4f2 095 00 00 00    | 	byte	$00[11]
3c4f5 096 0C 06 7F 06 
3c4f9 097 0C 00 00 00 
3c4fd 098 00 00 00 00 
3c501 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c505 09a 00 03 03 03 
3c509 09b 7F 00 00 00 
3c50d 09c 00 00 00 00 
3c511 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c515 09e 14 36 7F 36 
3c519 09f 14 00 00 00 
3c51d 0a0 00 00 00 00 
3c521 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3c525 0a2 1C 1C 3E 3E 
3c529 0a3 7F 7F 00 00 
3c52d 0a4 00 00 00 00 
3c531 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3c535 0a6 7F 3E 3E 1C 
3c539 0a7 1C 08 00 00 
3c53d 0a8 00 00 00 00 
3c541 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c545 0aa 00 00 00 00 
3c549 0ab 00 00 00 00 
3c54d 0ac 00 00 00 00 
3c551 0ad 00 00       | 	byte	$00[14]
3c553 0ad 18 3C 3C 3C 
3c557 0ae 18 18 18 00 
3c55b 0af 18 18 00 00 
3c55f 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3c563 0b1 66 24 00 00 
3c567 0b2 00 00 00 00 
3c56b 0b3 00 00 00 00 
3c56f 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c573 0b5 00 36 36 7F 
3c577 0b6 36 36 36 7F 
3c57b 0b7 36 36 00 00 
3c57f 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3c583 0b9 3E 63 43 03 
3c587 0ba 3E 60 60 61 
3c58b 0bb 63 3E 18 18 
3c58f 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3c593 0bd 00 00 43 63 
3c597 0be 30 18 0C 06 
3c59b 0bf 63 61 00 00 
3c59f 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3c5a3 0c1 1C 36 36 1C 
3c5a7 0c2 6E 3B 33 33 
3c5ab 0c3 33 6E 00 00 
3c5af 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3c5b3 0c5 0C 0C 0C 06 
3c5b7 0c6 00 00 00 00 
3c5bb 0c7 00 00 00 00 
3c5bf 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c5c3 0c9 30 18 0C 0C 
3c5c7 0ca 0C 0C 0C 0C 
3c5cb 0cb 18 30 00 00 
3c5cf 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3c5d3 0cd 0C 18 30 30 
3c5d7 0ce 30 30 30 30 
3c5db 0cf 18 0C 00 00 
3c5df 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3c5e3 0d1 00 00 00 66 
3c5e7 0d2 3C FF 3C 66 
3c5eb 0d3 00 00 00 00 
3c5ef 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3c5f3 0d5 00 00 00 18 
3c5f7 0d6 18 7E 18 18 
3c5fb 0d7 00 00 00 00 
3c5ff 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3c603 0d9 00 00 00 00 
3c607 0da 00 00 00 00 | 	byte	$00[8]
3c60b 0db 18 18 18 0C 
3c60f 0dc 00 00 00 00 
3c613 0dd 00 00 00 00 
3c617 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3c61b 0df 00 00 00 00 
3c61f 0e0 00 00 00 00 
3c623 0e1 00 00 00 00 
3c627 0e2 00 00 00 00 | 	byte	$00[16]
3c62b 0e3 18 18 00 00 
3c62f 0e4 00 00 00 00 
3c633 0e5 00 00 40 60 
3c637 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3c63b 0e7 03 01 00 00 
3c63f 0e8 00 00 00 00 
3c643 0e9 1C 36 63 63 
3c647 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3c64b 0eb 36 1C 00 00 
3c64f 0ec 00 00 00 00 
3c653 0ed 18 1C 1E 18 
3c657 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3c65b 0ef 18 7E 00 00 
3c65f 0f0 00 00 00 00 
3c663 0f1 3E 63 60 30 
3c667 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3c66b 0f3 63 7F 00 00 
3c66f 0f4 00 00 00 00 
3c673 0f5 3E 63 60 60 
3c677 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3c67b 0f7 63 3E 00 00 
3c67f 0f8 00 00 00 00 
3c683 0f9 30 38 3C 36 
3c687 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3c68b 0fb 30 78 00 00 
3c68f 0fc 00 00 00 00 
3c693 0fd 7F 03 03 03 
3c697 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3c69b 0ff 63 3E 00 00 
3c69f 100 00 00 00 00 
3c6a3 101 1C 06 03 03 
3c6a7 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3c6ab 103 63 3E 00 00 
3c6af 104 00 00 00 00 
3c6b3 105 7F 63 60 60 
3c6b7 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3c6bb 107 0C 0C 00 00 
3c6bf 108 00 00 00 00 
3c6c3 109 3E 63 63 63 
3c6c7 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3c6cb 10b 63 3E 00 00 
3c6cf 10c 00 00 00 00 
3c6d3 10d 3E 63 63 63 
3c6d7 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3c6db 10f 30 1E 00 00 
3c6df 110 00 00 00 00 
3c6e3 111 00 00 00 18 
3c6e7 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3c6eb 113 18 18 00 00 
3c6ef 114 00 00 00 00 
3c6f3 115 00 00 00 18 
3c6f7 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3c6fb 117 18 18 0C 00 
3c6ff 118 00 00 00 00 
3c703 119 00 60 30 18 
3c707 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3c70b 11b 30 60 00 00 
3c70f 11c 00 00 00 00 
3c713 11d 00 00 00 7E 
3c717 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3c71b 11f 00 00 00 00 
3c71f 120 00 00 00 00 
3c723 121 00          | 	byte	$00[9]
3c724 122 06 0C 18 30 
3c728 123 60 30 18 0C 
3c72c 124 06 00 00 00 
3c730 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3c734 126 63 63 30 18 
3c738 127 18 18 00 18 
3c73c 128 18 00 00 00 
3c740 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c744 12a 3E 63 63 7B 
3c748 12b 7B 7B 3B 03 
3c74c 12c 3E 00 00 00 
3c750 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3c754 12e 1C 36 63 63 
3c758 12f 7F 63 63 63 
3c75c 130 63 00 00 00 
3c760 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3c764 132 66 66 66 3E 
3c768 133 66 66 66 66 
3c76c 134 3F 00 00 00 
3c770 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3c774 136 66 43 03 03 
3c778 137 03 03 43 66 
3c77c 138 3C 00 00 00 
3c780 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3c784 13a 36 66 66 66 
3c788 13b 66 66 66 36 
3c78c 13c 1F 00 00 00 
3c790 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3c794 13e 66 46 16 1E 
3c798 13f 16 06 46 66 
3c79c 140 7F 00 00 00 
3c7a0 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3c7a4 142 66 46 16 1E 
3c7a8 143 16 06 06 06 
3c7ac 144 0F 00 00 00 
3c7b0 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3c7b4 146 66 43 03 03 
3c7b8 147 7B 63 63 66 
3c7bc 148 5C 00 00 00 
3c7c0 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3c7c4 14a 63 63 63 7F 
3c7c8 14b 63 63 63 63 
3c7cc 14c 63 00 00 00 
3c7d0 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3c7d4 14e 18 18 18 18 
3c7d8 14f 18 18 18 18 | 	byte	$18[8]
3c7dc 150 3C 00 00 00 
3c7e0 151 00 00 00 78 
3c7e4 152 30 30 30 30 
3c7e8 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3c7ec 154 1E 00 00 00 
3c7f0 155 00 00 00 67 
3c7f4 156 66 66 36 1E 
3c7f8 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3c7fc 158 67 00 00 00 
3c800 159 00 00 00 0F 
3c804 15a 06 06 06 06 
3c808 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3c80c 15c 7F 00 00 00 
3c810 15d 00 00 00 63 
3c814 15e 77 7F 7F 6B 
3c818 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3c81c 160 63 00 00 00 
3c820 161 00 00 00 63 
3c824 162 67 6F 7F 7B 
3c828 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3c82c 164 63 00 00 00 
3c830 165 00 00 00 3E 
3c834 166 63 63 63 63 
3c838 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3c83c 168 3E 00 00 00 
3c840 169 00 00 00 3F 
3c844 16a 66 66 66 3E 
3c848 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3c84c 16c 0F 00 00 00 
3c850 16d 00 00 00 3E 
3c854 16e 63 63 63 63 
3c858 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3c85c 170 3E 30 70 00 
3c860 171 00 00 00 3F 
3c864 172 66 66 66 3E 
3c868 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3c86c 174 67 00 00 00 
3c870 175 00 00 00 3E 
3c874 176 63 63 06 1C 
3c878 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3c87c 178 3E 00 00 00 
3c880 179 00 00 00 7E 
3c884 17a 7E 5A 18 18 
3c888 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3c88c 17c 3C 00 00 00 
3c890 17d 00 00 00 63 
3c894 17e 63 63 63 63 
3c898 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3c89c 180 3E 00 00 00 
3c8a0 181 00 00 00 63 
3c8a4 182 63 63 63 63 
3c8a8 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3c8ac 184 08 00 00 00 
3c8b0 185 00 00 00 63 
3c8b4 186 63 63 63 6B 
3c8b8 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3c8bc 188 36 00 00 00 
3c8c0 189 00 00 00 63 
3c8c4 18a 63 36 3E 1C 
3c8c8 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3c8cc 18c 63 00 00 00 
3c8d0 18d 00 00 00 66 
3c8d4 18e 66 66 66 3C 
3c8d8 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3c8dc 190 3C 00 00 00 
3c8e0 191 00 00 00 7F 
3c8e4 192 63 61 30 18 
3c8e8 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3c8ec 194 7F 00 00 00 
3c8f0 195 00 00 00 3C 
3c8f4 196 0C 0C 0C 0C 
3c8f8 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3c8fc 198 3C 00 00 00 
3c900 199 00 00 00 00 
3c904 19a 01 03 07 0E 
3c908 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3c90c 19c 40 00 00 00 
3c910 19d 00 00 00 3C 
3c914 19e 30 30 30 30 
3c918 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3c91c 1a0 3C 00 00 00 
3c920 1a1 1C 36 00 00 
3c924 1a2 00 00 00 00 
3c928 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c92c 1a4 00 00 00 00 
3c930 1a5 00 00 00 00 
3c934 1a6 00 00 00 00 
3c938 1a7 00 00 00 00 
3c93c 1a8 00          | 	byte	$00[17]
3c93d 1a8 FF 00 00 0C 
3c941 1a9 18 00 00 00 
3c945 1aa 00 00 00 00 
3c949 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c94d 1ac 00 00 00 00 
3c951 1ad 00 00 00 00 
3c955 1ae 00          | 	byte	$00[9]
3c956 1ae 1E 30 3E 33 
3c95a 1af 33 33 6E 00 
3c95e 1b0 00 00 00 00 
3c962 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3c966 1b2 1E 36 66 66 
3c96a 1b3 66 66 3E 00 
3c96e 1b4 00 00 00 00 
3c972 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c976 1b6 3E 63 03 03 
3c97a 1b7 03 63 3E 00 
3c97e 1b8 00 00 00 00 
3c982 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3c986 1ba 3C 36 33 33 
3c98a 1bb 33 33 6E 00 
3c98e 1bc 00 00 00 00 
3c992 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c996 1be 3E 63 7F 03 
3c99a 1bf 03 63 3E 00 
3c99e 1c0 00 00 00 00 
3c9a2 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3c9a6 1c2 0C 1E 0C 0C 
3c9aa 1c3 0C 0C 1E 00 
3c9ae 1c4 00 00 00 00 
3c9b2 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c9b6 1c6 6E 33 33 33 
3c9ba 1c7 33 33 3E 30 
3c9be 1c8 33 1E 00 00 
3c9c2 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3c9c6 1ca 36 6E 66 66 
3c9ca 1cb 66 66 67 00 
3c9ce 1cc 00 00 00 00 
3c9d2 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3c9d6 1ce 1C 18 18 18 
3c9da 1cf 18 18 3C 00 
3c9de 1d0 00 00 00 00 
3c9e2 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3c9e6 1d2 70 60 60 60 
3c9ea 1d3 60 60 60 66 
3c9ee 1d4 66 3C 00 00 
3c9f2 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3c9f6 1d6 66 36 1E 1E 
3c9fa 1d7 36 66 67 00 
3c9fe 1d8 00 00 00 00 
3ca02 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ca06 1da 18 18 18 18 
3ca0a 1db 18 18       | 	byte	$18[6]
3ca0c 1dc 3C 00 00 00 
3ca10 1dd 00 00 00 00 
3ca14 1de 00 00 37 7F 
3ca18 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3ca1c 1e0 63 00 00 00 
3ca20 1e1 00 00 00 00 
3ca24 1e2 00 00 3B 66 
3ca28 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ca2c 1e4 66 00 00 00 
3ca30 1e5 00 00 00 00 
3ca34 1e6 00 00 3E 63 
3ca38 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3ca3c 1e8 3E 00 00 00 
3ca40 1e9 00 00 00 00 
3ca44 1ea 00 00 3B 66 
3ca48 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ca4c 1ec 3E 06 06 0F 
3ca50 1ed 00 00 00 00 
3ca54 1ee 00 00 6E 33 
3ca58 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3ca5c 1f0 3E 30 30 78 
3ca60 1f1 00 00 00 00 
3ca64 1f2 00 00 3B 6E 
3ca68 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3ca6c 1f4 0F 00 00 00 
3ca70 1f5 00 00 00 00 
3ca74 1f6 00 00 3E 63 
3ca78 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3ca7c 1f8 3E 00 00 00 
3ca80 1f9 00 00 00 08 
3ca84 1fa 0C 0C 3F 0C 
3ca88 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3ca8c 1fc 38 00 00 00 
3ca90 1fd 00 00 00 00 
3ca94 1fe 00 00 33 33 
3ca98 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3ca9c 200 6E 00 00 00 
3caa0 201 00 00 00 00 
3caa4 202 00 00 63 63 
3caa8 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3caac 204 1C 00 00 00 
3cab0 205 00 00 00 00 
3cab4 206 00 00 63 63 
3cab8 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3cabc 208 36 00 00 00 
3cac0 209 00 00 00 00 
3cac4 20a 00 00 63 36 
3cac8 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3cacc 20c 63 00 00 00 
3cad0 20d 00 00 00 00 
3cad4 20e 00 00 63 63 
3cad8 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3cadc 210 7E 60 30 1F 
3cae0 211 00 00 00 00 
3cae4 212 00 00 7F 33 
3cae8 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3caec 214 7F 00 00 00 
3caf0 215 00 00 00 70 
3caf4 216 18 18 18 0E 
3caf8 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3cafc 218 70 00 00 00 
3cb00 219 00 00 00 18 
3cb04 21a 18 18 18 18 
3cb08 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cb0c 21c 18 00 00 00 
3cb10 21d 00 00 00 0E 
3cb14 21e 18 18 18 70 
3cb18 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3cb1c 220 0E 00 00 00 
3cb20 221 6E 3B 00 00 
3cb24 222 00 00 00 00 
3cb28 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cb2c 224 00 00 00 00 
3cb30 225 00 00 00 00 
3cb34 226 00 00       | 	byte	$00[10]
3cb36 226 08 1C 36 63 
3cb3a 227 63 63 7F 00 
3cb3e 228 00 00 00 00 
3cb42 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3cb46 22a 03 03 03 03 
3cb4a 22b 43 66 3C 18 
3cb4e 22c 30 1E 00 00 
3cb52 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3cb56 22e 33 33 33 33 
3cb5a 22f 33 33       | 	byte	$33[6]
3cb5c 230 6E 00 00 00 
3cb60 231 00 00 60 30 
3cb64 232 18 00 3E 63 
3cb68 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3cb6c 234 3E 00 00 00 
3cb70 235 00 00 08 1C 
3cb74 236 36 00 1E 30 
3cb78 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3cb7c 238 6E 00 00 00 
3cb80 239 00 00 00 00 
3cb84 23a 33 00 1E 30 
3cb88 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3cb8c 23c 6E 00 00 00 
3cb90 23d 00 00 1C 36 
3cb94 23e 1C 00 33 33 
3cb98 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3cb9c 240 6E 00 00 00 
3cba0 241 00 00 60 30 
3cba4 242 18 00 3E 63 
3cba8 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3cbac 244 3E 00 00 00 
3cbb0 245 00 00 00 00 
3cbb4 246 00 00 3E 63 
3cbb8 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3cbbc 248 3E 18 30 1E 
3cbc0 249 00 00 00 1C 
3cbc4 24a 58 78 38 18 
3cbc8 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3cbcc 24c 3C 00 00 00 
3cbd0 24d 00 00 00 00 
3cbd4 24e 63 00 3E 63 
3cbd8 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3cbdc 250 3E 00 00 00 
3cbe0 251 66 33 00 3E 
3cbe4 252 63 63 63 63 
3cbe8 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3cbec 254 3E 00 00 00 
3cbf0 255 00 00 CC 66 
3cbf4 256 33 00 3E 63 
3cbf8 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3cbfc 258 3E 00 00 00 
3cc00 259 00 00 18 3C 
3cc04 25a 66 00 1C 18 
3cc08 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3cc0c 25c 3C 00 00 00 
3cc10 25d 30 18 00 7F 
3cc14 25e 63 61 30 18 
3cc18 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3cc1c 260 7F 00 00 00 
3cc20 261 00 63 00 08 
3cc24 262 1C 36 63 63 
3cc28 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3cc2c 264 63 00 00 00 
3cc30 265 30 18 00 3C 
3cc34 266 66 43 03 03 
3cc38 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3cc3c 268 3C 00 00 00 
3cc40 269 30 18 00 7F 
3cc44 26a 66 46 16 1E 
3cc48 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3cc4c 26c 7F 00 00 00 
3cc50 26d 0C 06 00 0F 
3cc54 26e 06 06 06 06 
3cc58 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3cc5c 270 7F 00 00 00 
3cc60 271 30 18 00 1C 
3cc64 272 18 18 18 18 
3cc68 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3cc6c 274 3C 00 00 00 
3cc70 275 00 00 08 1C 
3cc74 276 36 00 3E 63 
3cc78 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3cc7c 278 3E 00 00 00 
3cc80 279 00 00 00 00 
3cc84 27a 63 00 3E 63 
3cc88 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3cc8c 27c 3E 00 00 00 
3cc90 27d 00 00 00 6F 
3cc94 27e 46 26 06 06 
3cc98 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3cc9c 280 7F 00 00 00 
3cca0 281 00 00 00 6E 
3cca4 282 4C 2C 0C 0C 
3cca8 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3ccac 284 1E 00 00 00 
3ccb0 285 30 18 00 3E 
3ccb4 286 63 63 06 1C 
3ccb8 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3ccbc 288 3E 00 00 00 
3ccc0 289 00 00 60 30 
3ccc4 28a 18 00 3E 63 
3ccc8 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3cccc 28c 3E 00 00 00 
3ccd0 28d 00 63 00 3E 
3ccd4 28e 63 63 63 63 
3ccd8 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3ccdc 290 3E 00 00 00 
3cce0 291 00 63 00 63 
3cce4 292 63 63 63 63 
3cce8 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3ccec 294 3E 00 00 00 
3ccf0 295 6C 38 00 7E 
3ccf4 296 7E 5A 18 18 
3ccf8 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3ccfc 298 3C 00 00 00 
3cd00 299 00 00 60 48 
3cd04 29a 2C 0C 3F 0C 
3cd08 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3cd0c 29c 38 00 00 00 
3cd10 29d 00 00 00 0F 
3cd14 29e 26 36 1E 0E 
3cd18 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3cd1c 2a0 7F 00 00 00 
3cd20 2a1 00 00 00 00 
3cd24 2a2 00 63 36 1C 
3cd28 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3cd2c 2a4 00 00 00 00 
3cd30 2a5 00 00       | 	byte	$00[6]
3cd32 2a5 36 1C 08 00 
3cd36 2a6 3E 63 03 03 
3cd3a 2a7 03 63 3E 00 
3cd3e 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3cd42 2a9 30 18 0C 00 
3cd46 2aa 1E 30 3E 33 
3cd4a 2ab 33 33 6E 00 
3cd4e 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3cd52 2ad 60 30 18 00 
3cd56 2ae 1C 18 18 18 
3cd5a 2af 18 18 3C 00 
3cd5e 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3cd62 2b1 60 30 18 00 
3cd66 2b2 3E 63 63 63 
3cd6a 2b3 63 63 3E 00 
3cd6e 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3cd72 2b5 30 18 0C 00 
3cd76 2b6 33 33 33 33 
3cd7a 2b7 33 33 6E 00 
3cd7e 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3cd82 2b9 00 08 1C 36 
3cd86 2ba 63 63 7F 63 
3cd8a 2bb 63 63 63 18 
3cd8e 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3cd92 2bd 00 00 00 00 
3cd96 2be 1E 30 3E 33 
3cd9a 2bf 33 33 6E 18 
3cd9e 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3cda2 2c1 00 7F 63 61 
3cda6 2c2 30 18 0C 06 
3cdaa 2c3 43 63 7F 00 
3cdae 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3cdb2 2c5 36 1C 08 00 
3cdb6 2c6 7F 33 18 0C 
3cdba 2c7 06 63 7F 00 
3cdbe 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3cdc2 2c9 00 7F 66 46 
3cdc6 2ca 16 1E 16 06 
3cdca 2cb 46 66 7F 18 
3cdce 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3cdd2 2cd 00 00 00 00 
3cdd6 2ce 3E 63 7F 03 
3cdda 2cf 03 63 3E 18 
3cdde 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3cde2 2d1 00 3C 66 03 
3cde6 2d2 1F 03 0F 03 
3cdea 2d3 03 66 3C 00 
3cdee 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3cdf2 2d5 60 30 18 00 
3cdf6 2d6 7F 33 18 0C 
3cdfa 2d7 06 63 7F 00 
3cdfe 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3ce02 2d9 00 3C 66 43 
3ce06 2da 03 03 03 03 
3ce0a 2db 43 66 3C 00 
3ce0e 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3ce12 2dd 00 00 00 00 
3ce16 2de 3E 63 06 1C 
3ce1a 2df 30 63 3E 18 
3ce1e 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3ce22 2e1 00 00 00 00 
3ce26 2e2 00 00       | 	byte	$00[6]
3ce28 2e3 6C 36 1B 36 
3ce2c 2e4 6C 00 00 00 
3ce30 2e5 00 00 00 00 
3ce34 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ce38 2e7 1B 36 6C 36 
3ce3c 2e8 1B 00 00 00 
3ce40 2e9 88 22 88 22 
3ce44 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3ce48 2eb 88 22 88 22 
3ce4c 2ec 88 22 88 22 
3ce50 2ed AA 55 AA 55 
3ce54 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3ce58 2ef AA 55 AA 55 
3ce5c 2f0 AA 55 AA 55 
3ce60 2f1 BB EE BB EE 
3ce64 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3ce68 2f3 BB EE BB EE 
3ce6c 2f4 BB EE BB EE 
3ce70 2f5 18 18 18 18 
3ce74 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3ce78 2f7 18 18 18 18 
3ce7c 2f8 18 18 18 18 
3ce80 2f9 18 18 18 18 
3ce84 2fa 18 18 18    | 	byte	$18[15]
3ce87 2fa 1F 18 18 18 
3ce8b 2fb 18 18 18 18 
3ce8f 2fc 18 30 18 00 
3ce93 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3ce97 2fe 63 7F 63 63 
3ce9b 2ff 63 63 00 00 
3ce9f 300 00 1C 36 00 
3cea3 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3cea7 302 63 7F 63 63 
3ceab 303 63 63 00 00 
3ceaf 304 00 36 1C 00 
3ceb3 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3ceb7 306 1E 16 06 46 
3cebb 307 66 7F 00 00 
3cebf 308 00 00 00 00 
3cec3 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3cec7 30a 1C 30 60 63 
3cecb 30b 63 3E 18 30 
3cecf 30c 1E 6C 6C 6C 
3ced3 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3ced7 30e 6F 6C 6C 6C 
3cedb 30f 6C 6C 6C 6C 
3cedf 310 6C 6C 6C 6C 
3cee3 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3cee7 312 6C 6C 6C 6C 
3ceeb 313 6C 6C 6C 6C 
3ceef 314 6C          | 	byte	$6c[9]
3cef0 315 00 00 00 00 
3cef4 316 00          | 	byte	$00[5]
3cef5 316 7F 60 6F 6C 
3cef9 317 6C 6C 6C 6C 
3cefd 318 6C 6C 6C 6C 
3cf01 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3cf05 31a 6F 60 7F 00 
3cf09 31b 00 00 00 00 
3cf0d 31c 00 00 00 18 
3cf11 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3cf15 31e 61 30 18 0C 
3cf19 31f 06 43 63 7F 
3cf1d 320 00 00 00 00 
3cf21 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3cf25 322 00 7F 33 18 
3cf29 323 0C 06 63 7F 
3cf2d 324 00 00 00 00 
3cf31 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3cf35 326 00 00 1F 18 
3cf39 327 18 18 18 18 
3cf3d 328 18 18 18 18 
3cf41 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cf45 32a 18 18 F8 00 
3cf49 32b 00 00 00 00 
3cf4d 32c 00 00 00 18 
3cf51 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3cf55 32e 18 18 FF 00 
3cf59 32f 00 00 00 00 
3cf5d 330 00 00 00 00 
3cf61 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cf65 332 00 00 FF 18 
3cf69 333 18 18 18 18 
3cf6d 334 18 18 18 18 
3cf71 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cf75 336 18 18 F8 18 
3cf79 337 18 18 18 18 
3cf7d 338 18 18 18 00 
3cf81 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3cf85 33a 00 00 FF 00 
3cf89 33b 00 00 00 00 
3cf8d 33c 00 00 00 18 
3cf91 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3cf95 33e 18 18 FF 18 
3cf99 33f 18 18 18 18 
3cf9d 340 18 18 18 63 
3cfa1 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3cfa5 342 36 63 63 7F 
3cfa9 343 63 63 63 63 
3cfad 344 00 00 00 00 
3cfb1 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3cfb5 346 00 1E 30 3E 
3cfb9 347 33 33 33 6E 
3cfbd 348 00 00 00 6C 
3cfc1 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3cfc5 34a EC 0C FC 00 
3cfc9 34b 00 00 00 00 
3cfcd 34c 00 00 00 00 
3cfd1 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cfd5 34e FC 0C EC 6C 
3cfd9 34f 6C 6C 6C 6C 
3cfdd 350 6C 6C 6C 6C 
3cfe1 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3cfe5 352 EF 00 FF 00 
3cfe9 353 00 00 00 00 
3cfed 354 00 00 00 00 
3cff1 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cff5 356 FF 00 EF 6C 
3cff9 357 6C 6C 6C 6C 
3cffd 358 6C 6C 6C 6C 
3d001 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3d005 35a EC 0C EC 6C 
3d009 35b 6C 6C 6C 6C 
3d00d 35c 6C 6C 6C 00 
3d011 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3d015 35e FF 00 FF 00 
3d019 35f 00 00 00 00 
3d01d 360 00 00 00 6C 
3d021 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3d025 362 EF 00 EF 6C 
3d029 363 6C 6C 6C 6C 
3d02d 364 6C 6C 6C 00 
3d031 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3d035 366 63 3E 63 63 
3d039 367 63 63 3E 63 
3d03d 368 00 00 00 00 
3d041 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3d045 36a 30 3C 36 33 
3d049 36b 33 33 33 6E 
3d04d 36c 00 00 00 00 
3d051 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3d055 36e 66 66 6F 66 
3d059 36f 66 66 36 1F 
3d05d 370 00 00 00 36 
3d061 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3d065 372 66 66 66 66 
3d069 373 66 66       | 	byte	$66[6]
3d06b 373 36 1F 00 00 
3d06f 374 00 00 63 00 
3d073 375 7F 66 46 16 
3d077 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3d07b 377 66 7F 00 00 
3d07f 378 00 6C 38 00 
3d083 379 38 30 30 3C 
3d087 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3d08b 37b 33 6E 00 00 
3d08f 37c 00 36 1C 00 
3d093 37d 63 67 6F 7F 
3d097 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3d09b 37f 63 63 00 00 
3d09f 380 00 30 18 00 
3d0a3 381 3C 18 18 18 
3d0a7 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3d0ab 383 18 3C 00 00 
3d0af 384 00 3C 66 00 
3d0b3 385 3C 18 18 18 
3d0b7 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3d0bb 387 18 3C 00 00 
3d0bf 388 00 00 00 36 
3d0c3 389 1C 08 00 3E 
3d0c7 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3d0cb 38b 63 3E 00 00 
3d0cf 38c 00 18 18 18 
3d0d3 38d 18 18 18 18 
3d0d7 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3d0db 38f 00 00 00 00 
3d0df 390 00 00 00 00 
3d0e3 391 00 00 00 00 | 	byte	$00[12]
3d0e7 392 F8 18 18 18 
3d0eb 393 18 18 18 18 
3d0ef 394 18 FF FF FF 
3d0f3 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3d0f7 396 FF FF FF FF 
3d0fb 397 FF FF FF FF 
3d0ff 398 FF          | 	byte	$ff[9]
3d100 399 00 00 00 00 
3d104 39a 00 00 00    | 	byte	$00[7]
3d107 39a FF FF FF FF 
3d10b 39b FF FF FF FF 
3d10f 39c FF          | 	byte	$ff[9]
3d110 39d 00 00 00 7E 
3d114 39e 7E 5A 18 18 
3d118 39f 18 18 18 18 
3d11c 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3d120 3a1 1C 36 1C 63 
3d124 3a2 63 63 63 63 
3d128 3a3 63 63 63 63 
3d12c 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3d130 3a5 FF FF FF FF 
3d134 3a6 FF FF FF    | 	byte	$ff[7]
3d137 3a6 00 00 00 00 
3d13b 3a7 00 00 00 00 
3d13f 3a8 00          | 	byte	$00[9]
3d140 3a9 30 18 00 3E 
3d144 3aa 63 63 63 63 
3d148 3ab 63 63 63 63 
3d14c 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3d150 3ad 00 00 00 1E 
3d154 3ae 33 33 33 1B 
3d158 3af 33 63 63 63 
3d15c 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3d160 3b1 1C 36 00 3E 
3d164 3b2 63 63 63 63 
3d168 3b3 63 63 63 63 
3d16c 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3d170 3b5 30 18 00 63 
3d174 3b6 67 6F 7F 7B 
3d178 3b7 73 63 63 63 
3d17c 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3d180 3b9 00 00 60 30 
3d184 3ba 18 00 3B 66 
3d188 3bb 66 66 66 66 
3d18c 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3d190 3bd 00 00 36 1C 
3d194 3be 08 00 3B 66 
3d198 3bf 66 66 66 66 
3d19c 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3d1a0 3c1 36 1C 00 3E 
3d1a4 3c2 63 63 06 1C 
3d1a8 3c3 30 60 63 63 
3d1ac 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3d1b0 3c5 00 00 36 1C 
3d1b4 3c6 08 00 3E 63 
3d1b8 3c7 06 1C 30 63 
3d1bc 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3d1c0 3c9 30 18 00 3F 
3d1c4 3ca 66 66 66 3E 
3d1c8 3cb 36 66 66 66 
3d1cc 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3d1d0 3cd 30 18 00 63 
3d1d4 3ce 63 63 63 63 
3d1d8 3cf 63 63 63 63 
3d1dc 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3d1e0 3d1 00 00 60 30 
3d1e4 3d2 18 00 3B 6E 
3d1e8 3d3 66 06 06 06 
3d1ec 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3d1f0 3d5 66 33 00 63 
3d1f4 3d6 63 63 63 63 
3d1f8 3d7 63 63 63 63 
3d1fc 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3d200 3d9 00 00 60 30 
3d204 3da 18 00 63 63 
3d208 3db 63 63 63 63 
3d20c 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3d210 3dd 30 18 00 66 
3d214 3de 66 66 66 3C 
3d218 3df 18 18 18 18 
3d21c 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3d220 3e1 00 00 00 08 
3d224 3e2 0C 0C 3F 0C 
3d228 3e3 0C 0C 0C 6C 
3d22c 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3d230 3e5 30 18 00 00 
3d234 3e6 00 00 00 00 
3d238 3e7 00 00 00 00 
3d23c 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d240 3e9 00 00 00 00 
3d244 3ea 00 00 00 00 | 	byte	$00[8]
3d248 3eb 7F 00 00 00 
3d24c 3ec 00 00 00 00 
3d250 3ed 66 33 00 00 
3d254 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3d258 3ef 00 00 00 00 
3d25c 3f0 00 00 00 00 
3d260 3f1 00 00 00 00 
3d264 3f2 00 00 00 00 
3d268 3f3 00 00 00 00 
3d26c 3f4 00          | 	byte	$00[21]
3d26d 3f4 0C 06 3C 36 
3d271 3f5 1C 00 00 00 
3d275 3f6 00 00 00 00 
3d279 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d27d 3f8 00 00 00 63 
3d281 3f9 3E 00 00 00 
3d285 3fa 00 00 00 00 
3d289 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d28d 3fc 00 00 00 00 
3d291 3fd 3E 63 06 1C 
3d295 3fe 36 63 63 36 
3d299 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3d29d 400 00 00 00 00 
3d2a1 401 00 00 00 00 | 	byte	$00[8]
3d2a5 402 18 00 7E 00 
3d2a9 403 18 00 00 00 
3d2ad 404 00 00 00 00 
3d2b1 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d2b5 406 00 00 00 00 
3d2b9 407 00 00 00 00 | 	byte	$00[8]
3d2bd 408 18 30 1E 00 
3d2c1 409 00 00 1C 36 
3d2c5 40a 36 1C 00 00 
3d2c9 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3d2cd 40c 00 00 00 00 
3d2d1 40d 63 00 00 00 
3d2d5 40e 00 00 00 00 
3d2d9 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d2dd 410 00 00 00 18 
3d2e1 411 18 00 00 00 
3d2e5 412 00 00 00 00 
3d2e9 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d2ed 414 00 00 00 00 
3d2f1 415 00          | 	byte	$00[5]
3d2f2 415 CC 66 33 00 
3d2f6 416 33 33 33 33 
3d2fa 417 33 33 6E 00 
3d2fe 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3d302 419 00 3F 66 66 
3d306 41a 66 3E 36 66 
3d30a 41b 66 66 6F 00 
3d30e 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3d312 41d 36 1C 08 00 
3d316 41e 3B 6E 66 06 
3d31a 41f 06 06 0F 00 
3d31e 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3d322 421 00 00 00 7E 
3d326 422 7E 7E 7E 7E 
3d32a 423 7E 7E 00 00 
3d32e 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3d332 425 00 00 00 00 
3d336 426 00 00 00 00 
3d33a 427 00 00 00 00 
3d33e 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d340 429 00 00 00 00 
      ...             
3d370 435 00 00 00 00 
3d374 436 00 00 00    | st_font        file "st4font.def"
3d377 436 FF FF 00 00 
3d37b 437 00 00 00 00 
3d37f 438 00 18 18 18 
3d383 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d387 43a 18 18 18 18 
3d38b 43b 18 18 18 18 
3d38f 43c 18          | 	byte	$18[9]
3d390 43d 00 00 00 00 
3d394 43e 00 00 00    | 	byte	$00[7]
3d397 43e FF FF 18 18 
3d39b 43f 18 18 18 18 
3d39f 440 18 18 18 18 
3d3a3 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d3a7 442 FF FF 00 00 
3d3ab 443 00 00 00 00 
3d3af 444 00 18 18 18 
3d3b3 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d3b7 446 1F 1F 18 18 
3d3bb 447 18 18 18 18 
3d3bf 448 18 18 18 18 
3d3c3 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d3c7 44a F8 F8 18 18 
3d3cb 44b 18 18 18 18 
3d3cf 44c 18 00 00 00 
3d3d3 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d3d7 44e 1F 1F 18 18 
3d3db 44f 18 18 18 18 
3d3df 450 18 00 00 00 
3d3e3 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d3e7 452 F8 F8 18 18 
3d3eb 453 18 18 18 18 
3d3ef 454 18 18 18 18 
3d3f3 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d3f7 456 1F 1F 00 00 
3d3fb 457 00 00 00 00 
3d3ff 458 00 18 18 18 
3d403 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d407 45a F8 F8 00 00 
3d40b 45b 00 00 00 00 
3d40f 45c 00 18 18 18 
3d413 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d417 45e FF FF 18 18 
3d41b 45f 18 18 18 18 
3d41f 460 18 00 00 18 
3d423 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3d427 462 66 7E 7E 66 
3d42b 463 66 66 66 30 
3d42f 464 18 00 00 7E 
3d433 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3d437 466 3E 06 06 06 
3d43b 467 06 7E 7E 18 
3d43f 468 0C 30 18 3C 
3d443 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3d447 46a 06 06 06 66 
3d44b 46b 66 7E 3C 00 
3d44f 46c 00 30 18 66 
3d453 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3d457 46e 7E 7E 76 76 
3d45b 46f 66 66 66 00 
3d45f 470 00 30 18 7C 
3d463 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3d467 472 1C 38 70 60 
3d46b 473 60 7E 3E 00 
3d46f 474 00 30 18 7E 
3d473 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3d477 476 18 0C 0C 06 
3d47b 477 06 7E 7E 00 
3d47f 478 00 18 18 00 
3d483 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3d487 47a 18 18 0C 0C 
3d48b 47b 06 7E 7E 00 
3d48f 47c 00 30 18 3C 
3d493 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3d497 47e 66 66 66 66 
3d49b 47f 66          | 	byte	$66[5]
3d49c 480 7E 3C 00 00 
3d4a0 481 00 00 06 06 
3d4a4 482 06 06 16 1E 
3d4a8 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3d4ac 484 7E 7E 00 00 
3d4b0 485 00 00 00 00 
3d4b4 486 00 3C 7C 60 
3d4b8 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3d4bc 488 7E 7C 30 18 
3d4c0 489 00 00 00 00 
3d4c4 48a 00 3C 7E 66 
3d4c8 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3d4cc 48c 7E 7C 18 0C 
3d4d0 48d 00 00 30 18 
3d4d4 48e 00 3C 3E 06 
3d4d8 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3d4dc 490 7E 7C 00 00 
3d4e0 491 00 00 30 18 
3d4e4 492 00 3E 7E 66 
3d4e8 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3d4ec 494 66 66 00 00 
3d4f0 495 00 00 30 18 
3d4f4 496 00 7C 7E 06 
3d4f8 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3d4fc 498 7E 3E 00 00 
3d500 499 00 00 30 18 
3d504 49a 00 7E 7E 30 
3d508 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3d50c 49c 7E 7E 00 00 
3d510 49d 00 00 18 18 
3d514 49e 00 7E 7E 30 
3d518 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3d51c 4a0 7E 7E 00 00 
3d520 4a1 00 00 30 18 
3d524 4a2 00 3C 7E 66 
3d528 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3d52c 4a4 7E 3C 00 00 
3d530 4a5 00 00 1C 1C 
3d534 4a6 18 18 38 3C 
3d538 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3d53c 4a8 3C 3C 00 00 
3d540 4a9 00 00 00 00 
3d544 4aa 00 00 00 00 
3d548 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d54c 4ac 00 00 00 00 
3d550 4ad 00 00       | 	byte	$00[6]
3d552 4ad 18 18 18 18 
3d556 4ae 18 18 18 18 | 	byte	$18[8]
3d55a 4af 00 00 18 18 
3d55e 4b0 00 00 00 00 
3d562 4b1 66 66 66 66 
3d566 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3d56a 4b3 00 00 00 00 
3d56e 4b4 00 00 00 00 
3d572 4b5 00          | 	byte	$00[9]
3d573 4b5 66 66 FF FF 
3d577 4b6 66 66 FF FF 
3d57b 4b7 66 66 00 00 
3d57f 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3d583 4b9 7C 7E 06 06 
3d587 4ba 3E 7C 60 60 
3d58b 4bb 7E 3E 18 18 
3d58f 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3d593 4bd 66 30 30 18 
3d597 4be 18 0C 0C 66 
3d59b 4bf 66 00 00 00 
3d59f 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3d5a3 4c1 66 66 3C 1C 
3d5a7 4c2 1C FC FE 66 
3d5ab 4c3 66 FE FC 00 
3d5af 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3d5b3 4c5 18 18 18 18 
3d5b7 4c6 00 00 00 00 
3d5bb 4c7 00 00 00 00 
3d5bf 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3d5c3 4c9 18 1C 0C 0C 
3d5c7 4ca 0C 0C 0C 0C 
3d5cb 4cb 1C 18 30 00 
3d5cf 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3d5d3 4cd 18 38 30 30 
3d5d7 4ce 30 30 30 30 
3d5db 4cf 38 18 0C 00 
3d5df 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3d5e3 4d1 66 66 3C 3C 
3d5e7 4d2 FF FF 3C 3C 
3d5eb 4d3 66 66 00 00 
3d5ef 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3d5f3 4d5 00 18 18 18 
3d5f7 4d6 7E 7E 18 18 
3d5fb 4d7 18 00 00 00 
3d5ff 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d603 4d9 00 00 00 00 
3d607 4da 00 00       | 	byte	$00[6]
3d609 4db 18 18 18 18 
3d60d 4dc 18          | 	byte	$18[5]
3d60e 4dc 0C 04 00 00 
3d612 4dd 00 00 00 00 
3d616 4de 7E 7E 00 00 
3d61a 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3d61e 4e0 00 00 00 00 
3d622 4e1 00 00 00 00 
3d626 4e2 00 00 00 00 
3d62a 4e3 00          | 	byte	$00[13]
3d62b 4e3 18 18 18 00 
3d62f 4e4 00 00 00 60 
3d633 4e5 60 60 30 30 
3d637 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3d63b 4e7 06 06 06 00 
3d63f 4e8 00 00 00 3C 
3d643 4e9 7E 66 66 66 
3d647 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3d64b 4eb 66 7E 3C 00 
3d64f 4ec 00 00 00 18 
3d653 4ed 18 1C 1C 18 
3d657 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3d65b 4ef 18 7E 7E 00 
3d65f 4f0 00 00 00 3C 
3d663 4f1 7E 66 66 30 
3d667 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3d66b 4f3 0C 7E 7E 00 
3d66f 4f4 00 00 00 7E 
3d673 4f5 7E 30 30 18 
3d677 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3d67b 4f7 66 7E 3C 00 
3d67f 4f8 00 00 00 30 
3d683 4f9 30 38 38 3C 
3d687 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3d68b 4fb 7E 30 30 00 
3d68f 4fc 00 00 00 7E 
3d693 4fd 7E 06 06 3E 
3d697 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3d69b 4ff 66 7E 3C 00 
3d69f 500 00 00 00 38 
3d6a3 501 3C 0E 06 06 
3d6a7 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3d6ab 503 66 7E 3C 00 
3d6af 504 00 00 00 7E 
3d6b3 505 7E 60 60 30 
3d6b7 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3d6bb 507 0C 0C 0C 00 
3d6bf 508 00 00 00 3C 
3d6c3 509 7E 66 66 3C 
3d6c7 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3d6cb 50b 66 7E 3C 00 
3d6cf 50c 00 00 00 3C 
3d6d3 50d 7E 66 66 7E 
3d6d7 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3d6db 50f 70 3C 1C 00 
3d6df 510 00 00 00 00 
3d6e3 511 00 00 18 18 
3d6e7 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3d6eb 513 18 18 18 00 
3d6ef 514 00 00 00 00 
3d6f3 515 00 00 18 18 
3d6f7 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3d6fb 517 18 18 18 0C 
3d6ff 518 04 00 00 00 
3d703 519 70 38 1C 0E 
3d707 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3d70b 51b 70 00 00 00 
3d70f 51c 00 00 00 00 
3d713 51d 00 00 7E 7E 
3d717 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3d71b 51f 00 00 00 00 
3d71f 520 00 00 00 00 | 	byte	$00[8]
3d723 521 0E 1C 38 70 
3d727 522 E0 70 38 1C 
3d72b 523 0E 00 00 00 
3d72f 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3d733 525 7E 66 66 30 
3d737 526 30 18 18 18 
3d73b 527 00 18 18 00 
3d73f 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3d743 529 7E 66 66 66 
3d747 52a 66 36 06 66 
3d74b 52b 66 7E 3C 00 
3d74f 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3d753 52d 3C 7E 66 66 
3d757 52e 66 7E 7E 66 
3d75b 52f 66 66 66 00 
3d75f 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3d763 531 7E 66 66 7E 
3d767 532 3E 66 66 66 
3d76b 533 66 7E 3E 00 
3d76f 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3d773 535 7E 66 66 06 
3d777 536 06 06 06 66 
3d77b 537 66 7E 3C 00 
3d77f 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3d783 539 7E 66 66 66 
3d787 53a 66 66 66 66 
3d78b 53b 66 7E 3E 00 
3d78f 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3d793 53d 7E 06 06 3E 
3d797 53e 3E 06 06 06 
3d79b 53f 06 7E 7E 00 
3d79f 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3d7a3 541 7E 06 06 3E 
3d7a7 542 3E 06 06 06 
3d7ab 543 06 06 06 00 
3d7af 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3d7b3 545 7E 06 06 76 
3d7b7 546 76 66 66 66 
3d7bb 547 66 7E 3C 00 
3d7bf 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3d7c3 549 66 66 66 7E 
3d7c7 54a 7E 66 66 66 
3d7cb 54b 66 66 66 00 
3d7cf 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3d7d3 54d 7E 18 18 18 
3d7d7 54e 18 18 18 18 
3d7db 54f 18 7E 7E 00 
3d7df 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3d7e3 551 60 60 60 60 
3d7e7 552 60 60 60    | 	byte	$60[7]
3d7ea 553 66 66 7E 3C 
3d7ee 554 00 00 00 00 
3d7f2 555 66 66 36 36 
3d7f6 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3d7fa 557 66 66 C6 C6 
3d7fe 558 00 00 00 00 
3d802 559 06 06 06 06 
3d806 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3d80a 55b 06 06 7E 7E 
3d80e 55c 00 00 00 00 
3d812 55d C6 C6 EE EE 
3d816 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3d81a 55f C6 C6 C6 C6 
3d81e 560 00 00 00 00 
3d822 561 66 66 66 6E 
3d826 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3d82a 563 76 66 66 66 
3d82e 564 00 00 00 00 
3d832 565 3C 7E 66 66 
3d836 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3d83a 567 66 66 7E 3C 
3d83e 568 00 00 00 00 
3d842 569 3E 7E 66 66 
3d846 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3d84a 56b 06 06 06 06 
3d84e 56c 00 00 00 00 
3d852 56d 3C 7E 66 66 
3d856 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3d85a 56f 66 56 3E 6C 
3d85e 570 00 00 00 00 
3d862 571 3E 7E 66 66 
3d866 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3d86a 573 66 66 C6 C6 
3d86e 574 00 00 00 00 
3d872 575 7C 7E 06 06 
3d876 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3d87a 577 60 60 7E 3E 
3d87e 578 00 00 00 00 
3d882 579 7E 7E 18 18 
3d886 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3d88a 57b 18 18 18 18 
3d88e 57c 00 00 00 00 
3d892 57d 66 66 66 66 
3d896 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3d89a 57f 66 66 7E 3C 
3d89e 580 00 00 00 00 
3d8a2 581 66 66 66 66 
3d8a6 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3d8aa 583 3C 3C 18 18 
3d8ae 584 00 00 00 00 
3d8b2 585 C6 C6 C6 C6 
3d8b6 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3d8ba 587 FE EE C6 82 
3d8be 588 00 00 00 00 
3d8c2 589 66 66 66 3C 
3d8c6 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3d8ca 58b 3C 66 66 66 
3d8ce 58c 00 00 00 00 
3d8d2 58d 66 66 66 66 
3d8d6 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3d8da 58f 18 18 18 18 
3d8de 590 00 00 00 00 
3d8e2 591 7E 7E 30 30 
3d8e6 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3d8ea 593 06 06 7E 7E 
3d8ee 594 00 00 00 00 
3d8f2 595 3C 3C 0C 0C 
3d8f6 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3d8fa 597 0C 0C 3C 3C 
3d8fe 598 00 00 00 00 
3d902 599 06 06 0C 0C 
3d906 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3d90a 59b 60 60 C0 C0 
3d90e 59c 00 00 00 00 
3d912 59d 3C 3C 30 30 
3d916 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3d91a 59f 30 30 3C 3C 
3d91e 5a0 00 00 00 00 
3d922 5a1 18 18 3C 3C 
3d926 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3d92a 5a3 00 00 00 00 
3d92e 5a4 00 00 00 00 
3d932 5a5 00 00 00 00 
3d936 5a6 00 00 00 00 
3d93a 5a7 00 00       | 	byte	$00[18]
3d93c 5a8 FE FE 00 00 
3d940 5a9 00 00 0C 0C 
3d944 5aa 18 18 00 00 
3d948 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3d94c 5ac 00 00 00 00 
3d950 5ad 00 00 00 00 
3d954 5ae 00          | 	byte	$00[9]
3d955 5ae 3C 7C 60 7C 
3d959 5af 7E 66 66 7E 
3d95d 5b0 7C 00 00 00 
3d961 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3d965 5b2 3E 7E 66 66 
3d969 5b3 66 66 66 7E 
3d96d 5b4 3E 00 00 00 
3d971 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3d975 5b6 3C 3E 06 06 
3d979 5b7 06 06 06 7E 
3d97d 5b8 7C 00 00 00 
3d981 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3d985 5ba 7C 7E 66 66 
3d989 5bb 66 66 66 7E 
3d98d 5bc 7C 00 00 00 
3d991 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3d995 5be 3C 7E 66 66 
3d999 5bf 7E 06 06 7E 
3d99d 5c0 7C 00 00 00 
3d9a1 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3d9a5 5c2 18 7E 7E 18 
3d9a9 5c3 18 18 18 18 
3d9ad 5c4 18 00 00 00 
3d9b1 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d9b5 5c6 7C 7E 66 66 
3d9b9 5c7 66 66 7E 7C 
3d9bd 5c8 60 7E 3E 00 
3d9c1 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3d9c5 5ca 3E 7E 66 66 
3d9c9 5cb 66 66 66 66 
3d9cd 5cc 66 00 00 00 
3d9d1 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3d9d5 5ce 1C 1C 18 18 
3d9d9 5cf 18 18 18 3C 
3d9dd 5d0 3C 00 00 00 
3d9e1 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3d9e5 5d2 30 30 30 30 
3d9e9 5d3 30 30 30 30 
3d9ed 5d4 30          | 	byte	$30[9]
3d9ee 5d4 3E 1E 00 00 
3d9f2 5d5 06 06 06 36 
3d9f6 5d6 36 1E 1E 1E 
3d9fa 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3d9fe 5d8 00 00 00 00 
3da02 5d9 1C 1C 18 18 
3da06 5da 18 18 18 18 
3da0a 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3da0e 5dc 00 00 00 00 
3da12 5dd 00 00 00    | 	byte	$00[7]
3da15 5de 6C FE FE D6 
3da19 5df D6 C6 C6 C6 
3da1d 5e0 C6 00 00 00 
3da21 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3da25 5e2 3E 7E 66 66 
3da29 5e3 66 66 66 66 
3da2d 5e4 66 00 00 00 
3da31 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3da35 5e6 3C 7E 66 66 
3da39 5e7 66 66 66 7E 
3da3d 5e8 3C 00 00 00 
3da41 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3da45 5ea 3E 7E 66 66 
3da49 5eb 66 66 66 7E 
3da4d 5ec 3E 06 06 00 
3da51 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3da55 5ee 7C 7E 66 66 
3da59 5ef 66 66 66 7E 
3da5d 5f0 7C 60 60 00 
3da61 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3da65 5f2 3E 7E 66 06 
3da69 5f3 06 06 06 06 
3da6d 5f4 06 00 00 00 
3da71 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3da75 5f6 7C 7E 06 0E 
3da79 5f7 3C 70 60 7E 
3da7d 5f8 3E 00 00 00 
3da81 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3da85 5fa 7E 7E 18 18 
3da89 5fb 18 18 18 78 
3da8d 5fc 70 00 00 00 
3da91 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3da95 5fe 66 66 66 66 
3da99 5ff 66 66 66    | 	byte	$66[7]
3da9c 600 7E 7C 00 00 
3daa0 601 00 00 00 00 
3daa4 602 00 66 66 66 
3daa8 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3daac 604 18 18 00 00 
3dab0 605 00 00 00 00 
3dab4 606 00 C6 C6 D6 
3dab8 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3dabc 608 C6 82 00 00 
3dac0 609 00 00 00 00 
3dac4 60a 00 66 66 3C 
3dac8 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3dacc 60c 66 66 00 00 
3dad0 60d 00 00 00 00 
3dad4 60e 00 66 66 66 
3dad8 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3dadc 610 7C 60 7E 3E 
3dae0 611 00 00 00 00 
3dae4 612 00 7E 7E 30 
3dae8 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3daec 614 7E 7E 00 00 
3daf0 615 00 00 30 18 
3daf4 616 18 18 18 0C 
3daf8 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3dafc 618 18 30 00 00 
3db00 619 00 00 18 18 
3db04 61a 18 18 18 18 
3db08 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3db0c 61c 18 18 00 00 
3db10 61d 00 00 0C 18 
3db14 61e 18 18 18 30 
3db18 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3db1c 620 18 0C 00 00 
3db20 621 00 00 6C 7E 
3db24 622 36 00 00 00 
3db28 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3db2c 624 00 00 00 00 
3db30 625 00 00 00 00 
3db34 626 00          | 	byte	$00[9]
3db35 626 18 18 18 18 
3db39 627 18 18 00 00 
3db3d 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3db40 629 00 6C FE FE 
3db44 62a 7C 38 10 00 
3db48 62b 18 18 18 F8 
3db4c 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3db50 62d C0 C0 C0 C0 
3db54 62e C0 C0 C0 C0 | 	byte	$c0[8]
3db58 62f 18 18 18 1F 
3db5c 630 1F 00 00 00 
3db60 631 18 18 18 1F 
3db64 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3db68 633 00 00 00 1F 
3db6c 634 1F 18 18 18 
3db70 635 C0 E0 70 38 
3db74 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3db78 637 03 07 0E 1C 
3db7c 638 38 70 E0 C0 
3db80 639 80 C0 E0 F0 
3db84 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3db88 63b 00 00 00 00 
3db8c 63c F0 F0 F0 F0 
3db90 63d 01 03 07 0F 
3db94 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3db98 63f F0 F0 F0 F0 
3db9c 640 00 00 00 00 
3dba0 641 0F 0F 0F 0F 
3dba4 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3dba8 643 FF FF 00 00 
3dbac 644 00 00 00 00 
3dbb0 645 00 00 00 00 
3dbb4 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3dbb8 647 00 00 00 00 
3dbbc 648 0F 0F 0F 0F 
3dbc0 649 00 38 38 EE 
3dbc4 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3dbc8 64b 00 00 00 F8 
3dbcc 64c F8 18 18 18 
3dbd0 64d 00 00 00 FF 
3dbd4 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3dbd8 64f 18 18 18 FF 
3dbdc 650 FF 18 18 18 
3dbe0 651 00 00 3C 7E 
3dbe4 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3dbe8 653 00 00 00 00 
3dbec 654 FF FF FF FF 
3dbf0 655 03 03 03 03 
3dbf4 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3dbf8 657 00 00 00 FF 
3dbfc 658 FF 18 18 18 
3dc00 659 18 18 18 FF 
3dc04 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3dc08 65b 0F 0F 0F 0F 
3dc0c 65c 0F 0F 0F 0F | 	byte	$0f[8]
3dc10 65d 18 18 18 F8 
3dc14 65e F8 00 00 00 
3dc18 65f 1E 06 1E 06 
3dc1c 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3dc20 661 00 18 3C 7E 
3dc24 662 18 18 18 00 
3dc28 663 00 18 18 18 
3dc2c 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3dc30 665 00 18 0C 7E 
3dc34 666 0C 18 00 00 
3dc38 667 00 18 30 7E 
3dc3c 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3dc40 669 00 00 00 00 
3dc44 66a 00 00 00 00 
3dc48 66b 00          | 	byte	$00[9]
3dc49 66b 18 18 18 18 
3dc4d 66c 00 18 00 00 
3dc51 66d 66 66 66 00 
3dc55 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3dc59 66f 66 FF 66 66 
3dc5d 670 FF 66 00 18 
3dc61 671 7C 06 3C 60 
3dc65 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3dc69 673 66 36 18 0C 
3dc6d 674 66 62 00 38 
3dc71 675 6C 38 1C F6 
3dc75 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3dc79 677 18 18 18 00 
3dc7d 678 00 00 00 00 
3dc81 679 70 38 18 18 
3dc85 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3dc89 67b 0E 1C 18 18 
3dc8d 67c 1C 0E 00 00 
3dc91 67d 66 3C FF 3C 
3dc95 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3dc99 67f 18 18 7E 18 
3dc9d 680 18 00 00 00 
3dca1 681 00 00 00 00 
3dca5 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3dca9 683 00 00 7E 00 
3dcad 684 00 00 00 00 
3dcb1 685 00 00 00 00 
3dcb5 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3dcb9 687 60 30 18 0C 
3dcbd 688 06 02 00 00 
3dcc1 689 3C 66 76 6E 
3dcc5 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3dcc9 68b 18 1C 18 18 
3dccd 68c 18 7E 00 00 
3dcd1 68d 3C 66 30 18 
3dcd5 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3dcd9 68f 7E 30 18 30 
3dcdd 690 66 3C 00 00 
3dce1 691 30 38 3C 36 
3dce5 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3dce9 693 7E 06 3E 60 
3dced 694 66 3C 00 00 
3dcf1 695 3C 06 3E 66 
3dcf5 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3dcf9 697 7E 60 30 18 
3dcfd 698 0C 0C 00 00 
3dd01 699 3C 66 3C 66 
3dd05 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3dd09 69b 3C 66 7C 60 
3dd0d 69c 30 1C 00 00 
3dd11 69d 00 18 18 00 
3dd15 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3dd19 69f 00 18 18 00 
3dd1d 6a0 18 18 0C 60 
3dd21 6a1 30 18 0C 18 
3dd25 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3dd29 6a3 00 7E 00 00 
3dd2d 6a4 7E 00 00 06 
3dd31 6a5 0C 18 30 18 
3dd35 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3dd39 6a7 3C 66 30 18 
3dd3d 6a8 00 18 00 00 
3dd41 6a9 3C 66 76 76 
3dd45 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3dd49 6ab 18 3C 66 66 
3dd4d 6ac 7E 66 00 00 
3dd51 6ad 3E 66 3E 66 
3dd55 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3dd59 6af 3C 66 06 06 
3dd5d 6b0 66 3C 00 00 
3dd61 6b1 1E 36 66 66 
3dd65 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3dd69 6b3 7E 06 3E 06 
3dd6d 6b4 06 7E 00 00 
3dd71 6b5 7E 06 3E 06 
3dd75 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3dd79 6b7 7C 06 06 76 
3dd7d 6b8 66 7C 00 00 
3dd81 6b9 66 66 7E 66 
3dd85 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3dd89 6bb 7E 18 18 18 
3dd8d 6bc 18 7E 00 00 
3dd91 6bd 60 60 60 60 
3dd95 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3dd99 6bf 66 36 1E 1E 
3dd9d 6c0 36 66 00 00 
3dda1 6c1 06 06 06 06 
3dda5 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3dda9 6c3 C6 EE FE D6 
3ddad 6c4 C6 C6 00 00 
3ddb1 6c5 66 6E 7E 7E 
3ddb5 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3ddb9 6c7 3C 66 66 66 
3ddbd 6c8 66 3C 00 00 
3ddc1 6c9 3E 66 66 3E 
3ddc5 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3ddc9 6cb 3C 66 66 66 
3ddcd 6cc 36 6C 00 00 
3ddd1 6cd 3E 66 66 3E 
3ddd5 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3ddd9 6cf 3C 06 3C 60 
3dddd 6d0 60 3C 00 00 
3dde1 6d1 7E 18 18 18 
3dde5 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3dde9 6d3 66 66 66 66 
3dded 6d4 66          | 	byte	$66[5]
3ddee 6d4 7E 00 00 66 
3ddf2 6d5 66 66 66 3C 
3ddf6 6d6 18 00 00 C6 
3ddfa 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3ddfe 6d8 C6 00 00 66 
3de02 6d9 66 3C 3C 66 
3de06 6da 66 00 00 66 
3de0a 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3de0e 6dc 18 00 00 7E 
3de12 6dd 30 18 0C 06 
3de16 6de 7E 00 00 78 
3de1a 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3de1e 6e0 78 00 00 02 
3de22 6e1 06 0C 18 30 
3de26 6e2 60 00 00 1E 
3de2a 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3de2e 6e4 1E 00 00 10 
3de32 6e5 38 6C C6 00 
3de36 6e6 00 00 00 00 
3de3a 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3de3e 6e8 FF 00 00 18 
3de42 6e9 3C 7E 7E 3C 
3de46 6ea 18 00 00 00 
3de4a 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3de4e 6ec 7C 00 00 06 
3de52 6ed 06 3E 66 66 
3de56 6ee 3E 00 00 00 
3de5a 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3de5e 6f0 3C 00 00 60 
3de62 6f1 60 7C 66 66 
3de66 6f2 7C 00 00 00 
3de6a 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3de6e 6f4 3C 00 00 70 
3de72 6f5 18 7C 18 18 
3de76 6f6 18 00 00 00 
3de7a 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3de7e 6f8 60 3E 00 06 
3de82 6f9 06 3E 66 66 
3de86 6fa 66 00 00 18 
3de8a 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3de8e 6fc 3C 00 00 60 
3de92 6fd 00 60 60 60 
3de96 6fe 60 3C 00 06 
3de9a 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3de9e 700 66 00 00 1C 
3dea2 701 18 18 18 18 
3dea6 702 3C 00 00 00 
3deaa 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3deae 704 C6 00 00 00 
3deb2 705 3E 66 66 66 
3deb6 706 66 00 00 00 
3deba 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3debe 708 3C 00 00 00 
3dec2 709 3E 66 66 3E 
3dec6 70a 06 06 00 00 
3deca 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3dece 70c 60 60 00 00 
3ded2 70d 3E 66 06 06 
3ded6 70e 06 00 00 00 
3deda 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3dede 710 3E 00 00 18 
3dee2 711 7E 18 18 18 
3dee6 712 70 00 00 00 
3deea 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3deee 714 7C 00 00 00 
3def2 715 66 66 66 3C 
3def6 716 18 00 00 00 
3defa 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3defe 718 6C 00 00 00 
3df02 719 66 3C 18 3C 
3df06 71a 66 00 00 00 
3df0a 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3df0e 71c 30 1E 00 00 
3df12 71d 7E 30 18 0C 
3df16 71e 7E 00 00 18 
3df1a 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3df1e 720 3C 00 18 18 
3df22 721 18 18 18 18 
3df26 722 18 18 00 7E 
3df2a 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3df2e 724 60 00 10 18 
3df32 725 1C 1E 1C 18 
3df36 726 10 00 08 18 
3df3a 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3df3e 728 08 00       | 	byte	$08, $00
3df40 729 00 6C FE FE 
3df44 72a 7C 38 10 00 
3df48 72b 18 18 18 F8 
3df4c 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3df50 72d C0 C0 C0 C0 
3df54 72e C0 C0 C0 C0 | 	byte	$c0[8]
3df58 72f 18 18 18 1F 
3df5c 730 1F 00 00 00 
3df60 731 18 18 18 1F 
3df64 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3df68 733 00 00 00 1F 
3df6c 734 1F 18 18 18 
3df70 735 C0 E0 70 38 
3df74 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3df78 737 03 07 0E 1C 
3df7c 738 38 70 E0 C0 
3df80 739 80 C0 E0 F0 
3df84 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3df88 73b 00 00 00 00 
3df8c 73c F0 F0 F0 F0 
3df90 73d 01 03 07 0F 
3df94 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3df98 73f F0 F0 F0 F0 
3df9c 740 00 00 00 00 
3dfa0 741 0F 0F 0F 0F 
3dfa4 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3dfa8 743 FF FF 00 00 
3dfac 744 00 00 00 00 
3dfb0 745 00 00 00 00 
3dfb4 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3dfb8 747 00 00 00 00 
3dfbc 748 0F 0F 0F 0F 
3dfc0 749 00 38 38 EE 
3dfc4 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3dfc8 74b 00 00 00 F8 
3dfcc 74c F8 18 18 18 
3dfd0 74d 00 00 00 FF 
3dfd4 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3dfd8 74f 18 18 18 FF 
3dfdc 750 FF 18 18 18 
3dfe0 751 00 00 3C 7E 
3dfe4 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3dfe8 753 00 00 00 00 
3dfec 754 FF FF FF FF 
3dff0 755 03 03 03 03 
3dff4 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3dff8 757 00 00 00 FF 
3dffc 758 FF 18 18 18 
3e000 759 18 18 18 FF 
3e004 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3e008 75b 0F 0F 0F 0F 
3e00c 75c 0F 0F 0F 0F | 	byte	$0f[8]
3e010 75d 18 18 18 F8 
3e014 75e F8 00 00 00 
3e018 75f 1E 06 1E 06 
3e01c 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3e020 761 00 18 3C 7E 
3e024 762 18 18 18 00 
3e028 763 00 18 18 18 
3e02c 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3e030 765 00 18 0C 7E 
3e034 766 0C 18 00 00 
3e038 767 00 18 30 7E 
3e03c 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3e040 769 00 00 00 00 
3e044 76a 00 00 00 00 
3e048 76b 00          | 	byte	$00[9]
3e049 76b 18 18 18 18 
3e04d 76c 00 18 00 00 
3e051 76d 66 66 66 00 
3e055 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3e059 76f 66 FF 66 66 
3e05d 770 FF 66 00 18 
3e061 771 7C 06 3C 60 
3e065 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3e069 773 66 36 18 0C 
3e06d 774 66 62 00 38 
3e071 775 6C 38 1C F6 
3e075 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3e079 777 18 18 18 00 
3e07d 778 00 00 00 00 
3e081 779 70 38 18 18 
3e085 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3e089 77b 0E 1C 18 18 
3e08d 77c 1C 0E 00 00 
3e091 77d 66 3C FF 3C 
3e095 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3e099 77f 18 18 7E 18 
3e09d 780 18 00 00 00 
3e0a1 781 00 00 00 00 
3e0a5 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3e0a9 783 00 00 7E 00 
3e0ad 784 00 00 00 00 
3e0b1 785 00 00 00 00 
3e0b5 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3e0b9 787 60 30 18 0C 
3e0bd 788 06 02 00 00 
3e0c1 789 3C 66 76 6E 
3e0c5 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3e0c9 78b 18 1C 18 18 
3e0cd 78c 18 7E 00 00 
3e0d1 78d 3C 66 30 18 
3e0d5 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3e0d9 78f 7E 30 18 30 
3e0dd 790 66 3C 00 00 
3e0e1 791 30 38 3C 36 
3e0e5 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3e0e9 793 7E 06 3E 60 
3e0ed 794 66 3C 00 00 
3e0f1 795 3C 06 3E 66 
3e0f5 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3e0f9 797 7E 60 30 18 
3e0fd 798 0C 0C 00 00 
3e101 799 3C 66 3C 66 
3e105 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3e109 79b 3C 66 7C 60 
3e10d 79c 30 1C 00 00 
3e111 79d 00 18 18 00 
3e115 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3e119 79f 00 18 18 00 
3e11d 7a0 18 18 0C 60 
3e121 7a1 30 18 0C 18 
3e125 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3e129 7a3 00 7E 00 00 
3e12d 7a4 7E 00 00 06 
3e131 7a5 0C 18 30 18 
3e135 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3e139 7a7 3C 66 30 18 
3e13d 7a8 00 18 00 00 
3e141 7a9 3C 66 76 76 
3e145 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3e149 7ab 18 3C 66 66 
3e14d 7ac 7E 66 00 00 
3e151 7ad 3E 66 3E 66 
3e155 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3e159 7af 3C 66 06 06 
3e15d 7b0 66 3C 00 00 
3e161 7b1 1E 36 66 66 
3e165 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3e169 7b3 7E 06 3E 06 
3e16d 7b4 06 7E 00 00 
3e171 7b5 7E 06 3E 06 
3e175 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3e179 7b7 7C 06 06 76 
3e17d 7b8 66 7C 00 00 
3e181 7b9 66 66 7E 66 
3e185 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3e189 7bb 7E 18 18 18 
3e18d 7bc 18 7E 00 00 
3e191 7bd 60 60 60 60 
3e195 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3e199 7bf 66 36 1E 1E 
3e19d 7c0 36 66 00 00 
3e1a1 7c1 06 06 06 06 
3e1a5 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3e1a9 7c3 C6 EE FE D6 
3e1ad 7c4 C6 C6 00 00 
3e1b1 7c5 66 6E 7E 7E 
3e1b5 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3e1b9 7c7 3C 66 66 66 
3e1bd 7c8 66 3C 00 00 
3e1c1 7c9 3E 66 66 3E 
3e1c5 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3e1c9 7cb 3C 66 66 66 
3e1cd 7cc 36 6C 00 00 
3e1d1 7cd 3E 66 66 3E 
3e1d5 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3e1d9 7cf 3C 06 3C 60 
3e1dd 7d0 60 3C 00 00 
3e1e1 7d1 7E 18 18 18 
3e1e5 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3e1e9 7d3 66 66 66 66 
3e1ed 7d4 66          | 	byte	$66[5]
3e1ee 7d4 7E 00 00 66 
3e1f2 7d5 66 66 66 3C 
3e1f6 7d6 18 00 00 C6 
3e1fa 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3e1fe 7d8 C6 00 00 66 
3e202 7d9 66 3C 3C 66 
3e206 7da 66 00 00 66 
3e20a 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3e20e 7dc 18 00 00 7E 
3e212 7dd 30 18 0C 06 
3e216 7de 7E 00 00 78 
3e21a 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3e21e 7e0 78 00 00 02 
3e222 7e1 06 0C 18 30 
3e226 7e2 60 00 00 1E 
3e22a 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3e22e 7e4 1E 00 00 10 
3e232 7e5 38 6C C6 00 
3e236 7e6 00 00 00 00 
3e23a 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e23e 7e8 FF 00 00 18 
3e242 7e9 3C 7E 7E 3C 
3e246 7ea 18 00 00 00 
3e24a 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3e24e 7ec 7C 00 00 06 
3e252 7ed 06 3E 66 66 
3e256 7ee 3E 00 00 00 
3e25a 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3e25e 7f0 3C 00 00 60 
3e262 7f1 60 7C 66 66 
3e266 7f2 7C 00 00 00 
3e26a 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3e26e 7f4 3C 00 00 70 
3e272 7f5 18 7C 18 18 
3e276 7f6 18 00 00 00 
3e27a 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3e27e 7f8 60 3E 00 06 
3e282 7f9 06 3E 66 66 
3e286 7fa 66 00 00 18 
3e28a 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3e28e 7fc 3C 00 00 60 
3e292 7fd 00 60 60 60 
3e296 7fe 60 3C 00 06 
3e29a 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3e29e 800 66 00 00 1C 
3e2a2 801 18 18 18 18 
3e2a6 802 3C 00 00 00 
3e2aa 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3e2ae 804 C6 00 00 00 
3e2b2 805 3E 66 66 66 
3e2b6 806 66 00 00 00 
3e2ba 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3e2be 808 3C 00 00 00 
3e2c2 809 3E 66 66 3E 
3e2c6 80a 06 06 00 00 
3e2ca 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3e2ce 80c 60 60 00 00 
3e2d2 80d 3E 66 06 06 
3e2d6 80e 06 00 00 00 
3e2da 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3e2de 810 3E 00 00 18 
3e2e2 811 7E 18 18 18 
3e2e6 812 70 00 00 00 
3e2ea 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3e2ee 814 7C 00 00 00 
3e2f2 815 66 66 66 3C 
3e2f6 816 18 00 00 00 
3e2fa 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3e2fe 818 6C 00 00 00 
3e302 819 66 3C 18 3C 
3e306 81a 66 00 00 00 
3e30a 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3e30e 81c 30 1E 00 00 
3e312 81d 7E 30 18 0C 
3e316 81e 7E 00 00 18 
3e31a 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3e31e 820 3C 00 18 18 
3e322 821 18 18 18 18 
3e326 822 18 18 00 7E 
3e32a 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3e32e 824 60 00 10 18 
3e332 825 1C 1E 1C 18 
3e336 826 10 00 08 18 
3e33a 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3e33e 828 08 00       | 	byte	$08, $00
3e340 829 00 00 00 00 
      ...             
3e54c 8ac 00 00 00 00 
3e550 8ad 00 00       | amiga_font     file "amigafont.def"
3e552 8ad 18 18 18 18 
3e556 8ae 18 18       | 	byte	$18[6]
3e558 8af 00 18 18 00 
3e55c 8b0 00 00 00 00 
3e560 8b1 00 00 66 66 
3e564 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3e568 8b3 00 00 00 00 
3e56c 8b4 00 00 00 00 
3e570 8b5 00 00       | 	byte	$00[10]
3e572 8b5 36 36 7F 36 
3e576 8b6 36 36 7F 36 
3e57a 8b7 36 00 00 00 
3e57e 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3e582 8b9 18 7C 06 06 
3e586 8ba 3C 60 60 3E 
3e58a 8bb 18 00 00 00 
3e58e 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3e592 8bd 00 00 C6 69 
3e596 8be 36 18 6C 96 
3e59a 8bf 63 00 00 00 
3e59e 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3e5a2 8c1 1C 36 36 1E 
3e5a6 8c2 6E 3B 33 73 
3e5aa 8c3 DE 00 00 00 
3e5ae 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3e5b2 8c5 18 18 0C 00 
3e5b6 8c6 00 00 00 00 
3e5ba 8c7 00 00 00 00 
3e5be 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e5c2 8c9 30 18 0C 0C 
3e5c6 8ca 0C 0C 0C 18 
3e5ca 8cb 30 00 00 00 
3e5ce 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e5d2 8cd 0C 18 30 30 
3e5d6 8ce 30 30 30 18 
3e5da 8cf 0C 00 00 00 
3e5de 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3e5e2 8d1 00 66 66 3C 
3e5e6 8d2 FF 3C 66 66 
3e5ea 8d3 00 00 00 00 
3e5ee 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3e5f2 8d5 00 18 18 18 
3e5f6 8d6 7E 18 18 18 
3e5fa 8d7 00 00 00 00 
3e5fe 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3e602 8d9 00 00 00 00 
3e606 8da 00 00 00    | 	byte	$00[7]
3e609 8db 18 18 0C 00 
3e60d 8dc 00 00 00 00 
3e611 8dd 00 00 00 00 
3e615 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3e619 8df 00 00 00 00 
3e61d 8e0 00 00 00 00 
3e621 8e1 00 00 00 00 
3e625 8e2 00 00 00 00 | 	byte	$00[16]
3e629 8e3 18 18 00 00 
3e62d 8e4 00 00 00 00 
3e631 8e5 00 00 C0 60 
3e635 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3e639 8e7 03 00 00 00 
3e63d 8e8 00 00 00 00 
3e641 8e9 00 3C 66 66 
3e645 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3e649 8eb 66 3C 00 00 
3e64d 8ec 00 00 00 00 
3e651 8ed 00 18 1C 1E 
3e655 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3e659 8ef 18 18 00 00 
3e65d 8f0 00 00 00 00 
3e661 8f1 00 3C 66 60 
3e665 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3e669 8f3 06 7E 00 00 
3e66d 8f4 00 00 00 00 
3e671 8f5 00 3C 66 60 
3e675 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3e679 8f7 66 3C 00 00 
3e67d 8f8 00 00 00 00 
3e681 8f9 00 30 38 3C 
3e685 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3e689 8fb 30 30 00 00 
3e68d 8fc 00 00 00 00 
3e691 8fd 00 7E 06 06 
3e695 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3e699 8ff 66 3C 00 00 
3e69d 900 00 00 00 00 
3e6a1 901 00 38 0C 06 
3e6a5 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3e6a9 903 66 3C 00 00 
3e6ad 904 00 00 00 00 
3e6b1 905 00 7E 60 60 
3e6b5 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3e6b9 907 18 18 00 00 
3e6bd 908 00 00 00 00 
3e6c1 909 00 3C 66 66 
3e6c5 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3e6c9 90b 66 3C 00 00 
3e6cd 90c 00 00 00 00 
3e6d1 90d 00 3C 66 66 
3e6d5 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3e6d9 90f 30 1C 00 00 
3e6dd 910 00 00 00 00 
3e6e1 911 00 00 00 18 
3e6e5 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3e6e9 913 18 00 00 00 
3e6ed 914 00 00 00 00 
3e6f1 915 00 00 00 18 
3e6f5 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3e6f9 917 18 18 0C 00 
3e6fd 918 00 00 00 00 
3e701 919 00 00 00 60 
3e705 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3e709 91b 00 00 00 00 
3e70d 91c 00 00 00 00 
3e711 91d 00 00 00 00 | 	byte	$00[12]
3e715 91e 7E 00 7E 00 
3e719 91f 00 00 00 00 
3e71d 920 00 00 00 00 
3e721 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3e725 922 18 60 18 06 
3e729 923 00 00 00 00 
3e72d 924 00 00 00 00 
3e731 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3e735 926 60 30 18 00 
3e739 927 18 18 00 00 
3e73d 928 00 00 00 00 
3e741 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3e745 92a 7B 6B 7B 03 
3e749 92b 03 1E 00 00 
3e74d 92c 00 00 00 00 
3e751 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3e755 92e 63 7F 63 63 
3e759 92f 63 63 00 00 
3e75d 930 00 00 00 00 
3e761 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3e765 932 66 3E 66 66 
3e769 933 66 3E 00 00 
3e76d 934 00 00 00 00 
3e771 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3e775 936 06 06 06 06 
3e779 937 0C 78 00 00 
3e77d 938 00 00 00 00 
3e781 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3e785 93a 63 63 63 63 
3e789 93b 33 1F 00 00 
3e78d 93c 00 00 00 00 
3e791 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3e795 93e 06 1E 06 06 
3e799 93f 06 7E 00 00 
3e79d 940 00 00 00 00 
3e7a1 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3e7a5 942 06 1E 06 06 
3e7a9 943 06 06 00 00 
3e7ad 944 00 00 00 00 
3e7b1 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3e7b5 946 06 76 66 66 
3e7b9 947 66 7C 00 00 
3e7bd 948 00 00 00 00 
3e7c1 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3e7c5 94a 63 7F 63 63 
3e7c9 94b 63 63 00 00 
3e7cd 94c 00 00 00 00 
3e7d1 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3e7d5 94e 18 18 18 18 
3e7d9 94f 18          | 	byte	$18[5]
3e7da 94f 3C 00 00 00 
3e7de 950 00 00 00 00 
3e7e2 951 60 60 60 60 
3e7e6 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3e7ea 953 3E 00 00 00 
3e7ee 954 00 00 00 00 
3e7f2 955 C3 63 33 1B 
3e7f6 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3e7fa 957 C3 00 00 00 
3e7fe 958 00 00 00 00 
3e802 959 03 03 03 03 
3e806 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3e80a 95b 7F 00 00 00 
3e80e 95c 00 00 00 00 
3e812 95d 63 77 7F 6B 
3e816 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3e81a 95f 63 00 00 00 
3e81e 960 00 00 00 00 
3e822 961 63 67 6F 7B 
3e826 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3e82a 963 63 00 00 00 
3e82e 964 00 00 00 00 
3e832 965 3E 63 63 63 
3e836 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3e83a 967 3E 00 00 00 
3e83e 968 00 00 00 00 
3e842 969 3E 66 66 66 
3e846 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3e84a 96b 06 00 00 00 
3e84e 96c 00 00 00 00 
3e852 96d 3E 63 63 63 
3e856 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3e85a 96f FE 00 00 00 
3e85e 970 00 00 00 00 
3e862 971 1F 33 33 33 
3e866 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3e86a 973 63 00 00 00 
3e86e 974 00 00 00 00 
3e872 975 3C 66 06 0C 
3e876 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3e87a 977 3C 00 00 00 
3e87e 978 00 00 00 00 
3e882 979 7E 18 18 18 
3e886 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3e88a 97b 18 00 00 00 
3e88e 97c 00 00 00 00 
3e892 97d 63 63 63 63 
3e896 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3e89a 97f 3E 00 00 00 
3e89e 980 00 00 00 00 
3e8a2 981 63 63 63 63 
3e8a6 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3e8aa 983 08 00 00 00 
3e8ae 984 00 00 00 00 
3e8b2 985 C3 C3 C3 C3 
3e8b6 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3e8ba 987 C3 00 00 00 
3e8be 988 00 00 00 00 
3e8c2 989 C3 C3 66 3C 
3e8c6 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3e8ca 98b C3 00 00 00 
3e8ce 98c 00 00 00 00 
3e8d2 98d C3 C3 66 3C 
3e8d6 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3e8da 98f 18 00 00 00 
3e8de 990 00 00 00 00 
3e8e2 991 7F 60 60 30 
3e8e6 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3e8ea 993 7F 00 00 00 
3e8ee 994 00 00 00 00 
3e8f2 995 3C 0C 0C 0C 
3e8f6 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3e8fa 997 3C 00 00 00 
3e8fe 998 00 00 00 00 
3e902 999 00 03 06 0C 
3e906 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3e90a 99b 00 00 00 00 
3e90e 99c 00 00 00 00 | 	byte	$00[8]
3e912 99d 3C 30 30 30 
3e916 99e 30 30 30 30 
3e91a 99f 3C 00 00 00 
3e91e 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3e922 9a1 08 1C 36 63 
3e926 9a2 00 00 00 00 
3e92a 9a3 00 00 00 00 
3e92e 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e932 9a5 00 00 00 00 
3e936 9a6 00 00 00 00 
3e93a 9a7 00          | 	byte	$00[9]
3e93b 9a7 7F 00 00 00 
3e93f 9a8 00 00 00 18 
3e943 9a9 18 30 00 00 
3e947 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3e94b 9ab 00 00 00 00 
3e94f 9ac 00 00 00 00 
3e953 9ad 00 00       | 	byte	$00[10]
3e955 9ae 3C 60 7C 66 
3e959 9af 66 7C 00 00 
3e95d 9b0 00 00 00 00 
3e961 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3e965 9b2 3E 66 66 66 
3e969 9b3 66 3E 00 00 
3e96d 9b4 00 00 00 00 
3e971 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e975 9b6 3C 06 06 06 
3e979 9b7 06 3C 00 00 
3e97d 9b8 00 00 00 00 
3e981 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3e985 9ba 7C 66 66 66 
3e989 9bb 66 7C 00 00 
3e98d 9bc 00 00 00 00 
3e991 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e995 9be 3C 66 7E 06 
3e999 9bf 06 3C 00 00 
3e99d 9c0 00 00 00 00 
3e9a1 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3e9a5 9c2 3E 0C 0C 0C 
3e9a9 9c3 0C 0C 00 00 
3e9ad 9c4 00 00 00 00 
3e9b1 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9b5 9c6 7C 66 66 66 
3e9b9 9c7 7C 60 60 3C 
3e9bd 9c8 00 00 00 00 
3e9c1 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3e9c5 9ca 3E 66 66 66 
3e9c9 9cb 66 66 00 00 
3e9cd 9cc 00 00 00 00 
3e9d1 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3e9d5 9ce 18 18 18 18 
3e9d9 9cf 18          | 	byte	$18[5]
3e9da 9cf 30 00 00 00 
3e9de 9d0 00 00 00 00 
3e9e2 9d1 00 30 00 30 
3e9e6 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3e9ea 9d3 30 30 1E 00 
3e9ee 9d4 00 00 00 00 
3e9f2 9d5 03 03 03 33 
3e9f6 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3e9fa 9d7 63 00 00 00 
3e9fe 9d8 00 00 00 00 
3ea02 9d9 18 18 18 18 
3ea06 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3ea0a 9db 30 00 00 00 
3ea0e 9dc 00 00 00 00 
3ea12 9dd 00 00 00 37 
3ea16 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3ea1a 9df 63 00 00 00 
3ea1e 9e0 00 00 00 00 
3ea22 9e1 00 00 00 3E 
3ea26 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3ea2a 9e3 66 00 00 00 
3ea2e 9e4 00 00 00 00 
3ea32 9e5 00 00 00 3C 
3ea36 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3ea3a 9e7 3C 00 00 00 
3ea3e 9e8 00 00 00 00 
3ea42 9e9 00 00 00 3E 
3ea46 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3ea4a 9eb 06 06 06 00 
3ea4e 9ec 00 00 00 00 
3ea52 9ed 00 00 00 7C 
3ea56 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3ea5a 9ef 60 60 60 00 
3ea5e 9f0 00 00 00 00 
3ea62 9f1 00 00 00 3E 
3ea66 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3ea6a 9f3 06 00 00 00 
3ea6e 9f4 00 00 00 00 
3ea72 9f5 00 00 00 3C 
3ea76 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3ea7a 9f7 3E 00 00 00 
3ea7e 9f8 00 00 00 00 
3ea82 9f9 00 0C 0C 3E 
3ea86 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3ea8a 9fb 38 00 00 00 
3ea8e 9fc 00 00 00 00 
3ea92 9fd 00 00 00 66 
3ea96 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3ea9a 9ff 7C 00 00 00 
3ea9e a00 00 00 00 00 
3eaa2 a01 00 00 00 66 
3eaa6 a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3eaaa a03 18 00 00 00 
3eaae a04 00 00 00 00 
3eab2 a05 00 00 00 63 
3eab6 a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3eaba a07 36 00 00 00 
3eabe a08 00 00 00 00 
3eac2 a09 00 00 00 63 
3eac6 a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3eaca a0b 63 00 00 00 
3eace a0c 00 00 00 00 
3ead2 a0d 00 00 00 66 
3ead6 a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3eada a0f 18 0C 06 00 
3eade a10 00 00 00 00 
3eae2 a11 00 00 00 7E 
3eae6 a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3eaea a13 7E 00 00 00 
3eaee a14 00 00 00 00 
3eaf2 a15 70 18 18 18 
3eaf6 a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3eafa a17 70 00 00 00 
3eafe a18 00 00 00 00 
3eb02 a19 18 18 18 18 
3eb06 a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3eb0a a1b 18 00 00 00 
3eb0e a1c 00 00 00 00 
3eb12 a1d 0E 18 18 18 
3eb16 a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3eb1a a1f 0E 00 00 00 
3eb1e a20 00 00 00 00 
3eb22 a21 46 5D 31 00 
3eb26 a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3eb2a a23 00 00 00 00 
3eb2e a24 00 00 00 00 | 	byte	$00[8]
3eb32 a25 C0 F0 3C 0F 
3eb36 a26 C3 F0 3C 0F 
3eb3a a27 03 00 00 00 
3eb3e a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3eb42 a29 18 18 00 18 
3eb46 a2a 18 18 18 18 
3eb4a a2b 18 00 00 00 
3eb4e a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3eb52 a2d 18 18 7E 1B 
3eb56 a2e 1B 7E 18 18 
3eb5a a2f 00 00 00 00 
3eb5e a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3eb62 a31 78 CC 0C 0C 
3eb66 a32 1E 0C 0C 06 
3eb6a a33 7F 00 00 00 
3eb6e a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3eb72 a35 66 3C 66 66 
3eb76 a36 3C 66 00 00 
3eb7a a37 00 00 00 00 
3eb7e a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3eb82 a39 C3 C3 66 3C 
3eb86 a3a 18 7E 18 18 
3eb8a a3b 18 00 00 00 
3eb8e a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3eb92 a3d 18 18 18 18 
3eb96 a3e 00 18 18 18 
3eb9a a3f 18 00 00 00 
3eb9e a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3eba2 a41 3C 06 06 3C 
3eba6 a42 66 66 66 3C 
3ebaa a43 60 60 3C 00 
3ebae a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3ebb2 a45 66 66 00 00 
3ebb6 a46 00 00 00 00 
3ebba a47 00 00 00 00 
3ebbe a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebc2 a49 7E 81 B9 85 
3ebc6 a4a 85 B9 81 7E 
3ebca a4b 00 00 00 00 
3ebce a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3ebd2 a4d 3C 33 33 7E 
3ebd6 a4e 00 7F 00 00 
3ebda a4f 00 00 00 00 
3ebde a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebe2 a51 00 00 CC 66 
3ebe6 a52 33 66 CC 00 
3ebea a53 00 00 00 00 
3ebee a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebf2 a55 7E 60 60 00 
3ebf6 a56 00 00 00 00 
3ebfa a57 00 00 00 00 
3ebfe a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec02 a59 7E 81 9D A5 
3ec06 a5a 9D A5 81 7E 
3ec0a a5b 00 00 00 00 
3ec0e a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3ec12 a5d 7E 00 00 00 
3ec16 a5e 00 00 00 00 
3ec1a a5f 00 00 00 00 
3ec1e a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec22 a61 3C 66 66 3C 
3ec26 a62 00 00 00 00 
3ec2a a63 00 00 00 00 
3ec2e a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec32 a65 18 18 18 7E 
3ec36 a66 18 18 18 00 
3ec3a a67 7E 00 00 00 
3ec3e a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3ec42 a69 1E 30 30 18 
3ec46 a6a 0C 06 3E 00 
3ec4a a6b 00 00 00 00 
3ec4e a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec52 a6d 1E 30 30 1C 
3ec56 a6e 30 30 1E 00 
3ec5a a6f 00 00 00 00 
3ec5e a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec62 a71 30 18 0C 06 
3ec66 a72 00 00 00 00 
3ec6a a73 00 00 00 00 
3ec6e a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec72 a75 00 00 00 66 
3ec76 a76 66 66 66 66 
3ec7a a77 FE 06 06 00 
3ec7e a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3ec82 a79 7C 5E 5E 5E 
3ec86 a7a 5C 50 50 50 
3ec8a a7b 50 50 00 00 
3ec8e a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3ec92 a7d 00 00 00 18 
3ec96 a7e 18 00 00 00 
3ec9a a7f 00 00 00 00 
3ec9e a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3eca2 a81 00 00 00 00 
3eca6 a82 00 00 00 00 
3ecaa a83 00          | 	byte	$00[9]
3ecab a83 30 18 00 00 
3ecaf a84 00 00 00 18 
3ecb3 a85 1C 18 18 18 
3ecb7 a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3ecbb a87 00 00 00 00 
3ecbf a88 00 00 00    | 	byte	$00[7]
3ecc2 a89 3C 66 66 3C 
3ecc6 a8a 00 7E 00 00 
3ecca a8b 00 00 00 00 
3ecce a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ecd2 a8d 00 00 33 66 
3ecd6 a8e CC 66 33 00 
3ecda a8f 00 00 00 00 
3ecde a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ece2 a91 02 63 32 1A 
3ece6 a92 4E 66 F3 40 
3ecea a93 40 00 00 00 
3ecee a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3ecf2 a95 04 C6 64 34 
3ecf6 a96 7C 8C 46 23 
3ecfa a97 F0 00 00 00 
3ecfe a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3ed02 a99 03 C4 66 34 
3ed06 a9a 5B 6C F6 43 
3ed0a a9b 40 00 00 00 
3ed0e a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3ed12 a9d 18 18 00 18 
3ed16 a9e 0C 06 06 66 
3ed1a a9f 3C 00 00 00 
3ed1e aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed22 aa1 06 0C 3E 63 
3ed26 aa2 63 7F 63 63 
3ed2a aa3 63 00 00 00 
3ed2e aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ed32 aa5 30 18 3E 63 
3ed36 aa6 63 7F 63 63 
3ed3a aa7 63 00 00 00 
3ed3e aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ed42 aa9 0C 33 3E 63 
3ed46 aaa 63 63 7F 63 
3ed4a aab 63 00 00 00 
3ed4e aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ed52 aad 4E 39 3E 63 
3ed56 aae 63 7F 63 63 
3ed5a aaf 63 00 00 00 
3ed5e ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ed62 ab1 63 00 3E 63 
3ed66 ab2 63 7F 63 63 
3ed6a ab3 63 00 00 00 
3ed6e ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ed72 ab5 1C 22 1C 36 
3ed76 ab6 63 63 7F 63 
3ed7a ab7 63 00 00 00 
3ed7e ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ed82 ab9 F8 3C 3C 36 
3ed86 aba F6 3F 33 33 
3ed8a abb F3 00 00 00 
3ed8e abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3ed92 abd 78 0C 06 06 
3ed96 abe 06 06 06 0C 
3ed9a abf 78 30 18 00 
3ed9e ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3eda2 ac1 0C 18 7E 06 
3eda6 ac2 06 3E 06 06 
3edaa ac3 7E 00 00 00 
3edae ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3edb2 ac5 30 18 7E 06 
3edb6 ac6 06 3E 06 06 
3edba ac7 7E 00 00 00 
3edbe ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3edc2 ac9 18 66 7E 06 
3edc6 aca 06 3E 06 06 
3edca acb 7E 00 00 00 
3edce acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3edd2 acd 66 00 7E 06 
3edd6 ace 06 3E 06 06 
3edda acf 7E 00 00 00 
3edde ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3ede2 ad1 0C 18 3C 18 
3ede6 ad2 18 18 18 18 
3edea ad3 3C 00 00 00 
3edee ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3edf2 ad5 30 18 3C 18 
3edf6 ad6 18 18 18 18 
3edfa ad7 3C 00 00 00 
3edfe ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ee02 ad9 18 66 3C 18 
3ee06 ada 18 18 18 18 
3ee0a adb 3C 00 00 00 
3ee0e adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ee12 add 66 00 3C 18 
3ee16 ade 18 18 18 18 
3ee1a adf 3C 00 00 00 
3ee1e ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ee22 ae1 1E 36 66 66 
3ee26 ae2 6F 66 66 36 
3ee2a ae3 1E 00 00 00 
3ee2e ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3ee32 ae5 8E 73 67 6F 
3ee36 ae6 7B 73 63 63 
3ee3a ae7 63 00 00 00 
3ee3e ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ee42 ae9 06 0C 3E 63 
3ee46 aea 63 63 63 63 
3ee4a aeb 3E 00 00 00 
3ee4e aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ee52 aed 30 18 3E 63 
3ee56 aee 63 63 63 63 
3ee5a aef 3E 00 00 00 
3ee5e af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ee62 af1 0C 33 3E 63 
3ee66 af2 63 63 63 63 
3ee6a af3 3E 00 00 00 
3ee6e af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ee72 af5 8E 71 3E 63 
3ee76 af6 63 63 63 63 
3ee7a af7 3E 00 00 00 
3ee7e af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ee82 af9 63 00 3E 63 
3ee86 afa 63 63 63 63 
3ee8a afb 3E 00 00 00 
3ee8e afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ee92 afd 00 00 63 36 
3ee96 afe 1C 1C 36 63 
3ee9a aff 00 00 00 00 
3ee9e b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3eea2 b01 BE 63 73 7B 
3eea6 b02 6B 6F 67 63 
3eeaa b03 3F 00 00 00 
3eeae b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3eeb2 b05 0C 18 63 63 
3eeb6 b06 63 63 63 63 
3eeba b07 3E 00 00 00 
3eebe b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eec2 b09 18 0C 63 63 
3eec6 b0a 63 63 63 63 
3eeca b0b 3E 00 00 00 
3eece b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eed2 b0d 08 36 63 63 
3eed6 b0e 63 63 63 63 
3eeda b0f 3E 00 00 00 
3eede b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eee2 b11 63 00 63 63 
3eee6 b12 63 63 63 63 
3eeea b13 3E 00 00 00 
3eeee b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eef2 b15 30 18 C3 66 
3eef6 b16 3C 18 18 18 
3eefa b17 18 00 00 00 
3eefe b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ef02 b19 03 03 3F 63 
3ef06 b1a 63 3F 03 03 
3ef0a b1b 03 00 00 00 
3ef0e b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3ef12 b1d 3C 66 66 66 
3ef16 b1e 36 66 66 66 
3ef1a b1f 36 06 06 00 
3ef1e b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3ef22 b21 06 0C 00 3C 
3ef26 b22 60 7C 66 66 
3ef2a b23 7C 00 00 00 
3ef2e b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ef32 b25 60 30 00 3C 
3ef36 b26 60 7C 66 66 
3ef3a b27 7C 00 00 00 
3ef3e b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ef42 b29 18 66 00 3C 
3ef46 b2a 60 7C 66 66 
3ef4a b2b 7C 00 00 00 
3ef4e b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ef52 b2d 8E 71 00 3C 
3ef56 b2e 60 7C 66 66 
3ef5a b2f 7C 00 00 00 
3ef5e b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ef62 b31 00 66 00 3C 
3ef66 b32 60 7C 66 66 
3ef6a b33 7C 00 00 00 
3ef6e b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ef72 b35 18 24 18 3C 
3ef76 b36 60 7C 66 66 
3ef7a b37 7C 00 00 00 
3ef7e b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ef82 b39 00 00 00 7E 
3ef86 b3a D8 FE 1B 1B 
3ef8a b3b EE 00 00 00 
3ef8e b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3ef92 b3d 00 00 00 3C 
3ef96 b3e 06 06 06 06 
3ef9a b3f 3C 18 0C 00 
3ef9e b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3efa2 b41 06 0C 00 3C 
3efa6 b42 66 7E 06 06 
3efaa b43 3C 00 00 00 
3efae b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3efb2 b45 60 30 00 3C 
3efb6 b46 66 7E 06 06 
3efba b47 3C 00 00 00 
3efbe b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3efc2 b49 18 66 00 3C 
3efc6 b4a 66 7E 06 06 
3efca b4b 3C 00 00 00 
3efce b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3efd2 b4d 00 66 00 3C 
3efd6 b4e 66 7E 06 06 
3efda b4f 3C 00 00 00 
3efde b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3efe2 b51 0C 18 00 18 
3efe6 b52 18 18 18 18 
3efea b53 30 00 00 00 
3efee b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3eff2 b55 18 0C 00 0C 
3eff6 b56 0C 0C 0C 0C 
3effa b57 18 00 00 00 
3effe b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3f002 b59 18 66 00 18 
3f006 b5a 18 18 18 18 
3f00a b5b 30 00 00 00 
3f00e b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3f012 b5d 00 66 00 18 
3f016 b5e 18 18 18 18 
3f01a b5f 30 00 00 00 
3f01e b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3f022 b61 03 06 3F 18 
3f026 b62 3C 66 66 66 
3f02a b63 3C 00 00 00 
3f02e b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3f032 b65 8E 71 00 3E 
3f036 b66 66 66 66 66 
3f03a b67 66 00 00 00 
3f03e b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3f042 b69 06 0C 00 3C 
3f046 b6a 66 66 66 66 
3f04a b6b 3C 00 00 00 
3f04e b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3f052 b6d 60 30 00 3C 
3f056 b6e 66 66 66 66 
3f05a b6f 3C 00 00 00 
3f05e b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3f062 b71 18 66 00 3C 
3f066 b72 66 66 66 66 
3f06a b73 3C 00 00 00 
3f06e b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3f072 b75 8E 71 00 3C 
3f076 b76 66 66 66 66 
3f07a b77 3C 00 00 00 
3f07e b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3f082 b79 00 66 00 3C 
3f086 b7a 66 66 66 66 
3f08a b7b 3C 00 00 00 
3f08e b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3f092 b7d 00 18 18 00 
3f096 b7e 7E 00 18 18 
3f09a b7f 00 00 00 00 
3f09e b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3f0a2 b81 00 00 00 7E 
3f0a6 b82 73 7B 6F 67 
3f0aa b83 3F 00 00 00 
3f0ae b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3f0b2 b85 0C 18 00 66 
3f0b6 b86 66 66 66 66 
3f0ba b87 7C 00 00 00 
3f0be b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3f0c2 b89 30 18 00 66 
3f0c6 b8a 66 66 66 66 
3f0ca b8b 7C 00 00 00 
3f0ce b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3f0d2 b8d 18 66 00 66 
3f0d6 b8e 66 66 66 66 
3f0da b8f 7C 00 00 00 
3f0de b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3f0e2 b91 00 66 00 66 
3f0e6 b92 66 66 66 66 
3f0ea b93 7C 00 00 00 
3f0ee b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3f0f2 b95 30 18 00 66 
3f0f6 b96 66 66 66 3C 
3f0fa b97 18 0C 06 00 
3f0fe b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3f102 b99 06 06 06 3E 
3f106 b9a 66 66 66 3E 
3f10a b9b 06 06 06 00 
3f10e b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3f112 b9d 00 66 00 66 
3f116 b9e 66 66 66 3C 
3f11a b9f 18 0C 06 00 
3f11e ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3f122 ba1 00 7E 66 66 
3f126 ba2 66 66 66 66 
3f12a ba3 66 7E 00 00 
3f12e ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3f132 ba5 00 00 00 00 
      ...             
3f33a c27 00 00 00 00 
3f33e c28 00 00       | 	byte	$00[526]
3f340 c29 00 00 00 00 
3f344 c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3f345 c2a 80 00 00 00 
3f349 c2b 00 80 00 00 
3f34d c2c 80 80 00 00 
3f351 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3f355 c2e 80 00 80 00 
3f359 c2f 00 40 80 00 
3f35d c30 AA AA AA 00 
3f361 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3f365 c32 FF 00 00 00 
3f369 c33 00 FF 00 00 
3f36d c34 FF FF 00 00 
3f371 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3f375 c36 FF 00 FF 00 
3f379 c37 00 FF FF 00 
3f37d c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3f380 c39 00 00 00 00 
3f384 c3a 00          | ataripalette   file "ataripalettep2.def"
3f385 c3a 11 11 11 00 
3f389 c3b 22 22 22 00 
3f38d c3c 33 33 33 00 
3f391 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3f395 c3e 55 55 55 00 
3f399 c3f 66 66 66 00 
3f39d c40 77 77 77 00 
3f3a1 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3f3a5 c42 99 99 99 00 
3f3a9 c43 AA AA AA 00 
3f3ad c44 BB BB BB 00 
3f3b1 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3f3b5 c46 DD DD DD 00 
3f3b9 c47 EE EE EE 00 
3f3bd c48 FF FF FF 00 
3f3c1 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3f3c5 c4a 00 14 40 00 
3f3c9 c4b 00 1E 60 00 
3f3cd c4c 00 28 80 00 
3f3d1 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3f3d5 c4e 00 3C BF 00 
3f3d9 c4f 00 46 DF 00 
3f3dd c50 00 50 FF 00 
3f3e1 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3f3e5 c52 39 77 FF 00 
3f3e9 c53 55 8A FF 00 
3f3ed c54 71 9E FF 00 
3f3f1 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3f3f5 c56 AA C5 FF 00 
3f3f9 c57 C6 D8 FF 00 
3f3fd c58 E3 EC FF 00 
3f401 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3f405 c5a 00 00 40 00 
3f409 c5b 00 00 60 00 
3f40d c5c 00 00 80 00 
3f411 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3f415 c5e 00 00 BF 00 
3f419 c5f 00 00 DF 00 
3f41d c60 00 00 FF 00 
3f421 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3f425 c62 39 39 FF 00 
3f429 c63 55 55 FF 00 
3f42d c64 71 71 FF 00 
3f431 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3f435 c66 AA AA FF 00 
3f439 c67 C6 C6 FF 00 
3f43d c68 E3 E3 FF 00 
3f441 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3f445 c6a 20 00 40 00 
3f449 c6b 30 00 60 00 
3f44d c6c 40 00 80 00 
3f451 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3f455 c6e 60 00 BF 00 
3f459 c6f 70 00 DF 00 
3f45d c70 80 00 FF 00 
3f461 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3f465 c72 9C 39 FF 00 
3f469 c73 AA 55 FF 00 
3f46d c74 B8 71 FF 00 
3f471 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3f475 c76 D5 AA FF 00 
3f479 c77 E3 C6 FF 00 
3f47d c78 F1 E3 FF 00 
3f481 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3f485 c7a 40 00 40 00 
3f489 c7b 60 00 60 00 
3f48d c7c 80 00 80 00 
3f491 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3f495 c7e BF 00 BF 00 
3f499 c7f DF 00 DF 00 
3f49d c80 FF 00 FF 00 
3f4a1 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3f4a5 c82 FF 39 FF 00 
3f4a9 c83 FF 55 FF 00 
3f4ad c84 FF 71 FF 00 
3f4b1 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3f4b5 c86 FF AA FF 00 
3f4b9 c87 FF C6 FF 00 
3f4bd c88 FF E3 FF 00 
3f4c1 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3f4c5 c8a 40 00 20 00 
3f4c9 c8b 60 00 30 00 
3f4cd c8c 80 00 40 00 
3f4d1 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3f4d5 c8e BF 00 60 00 
3f4d9 c8f DF 00 70 00 
3f4dd c90 FF 00 80 00 
3f4e1 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3f4e5 c92 FF 39 9C 00 
3f4e9 c93 FF 55 AA 00 
3f4ed c94 FF 71 B8 00 
3f4f1 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3f4f5 c96 FF AA D5 00 
3f4f9 c97 FF C6 E3 00 
3f4fd c98 FF E3 F1 00 
3f501 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3f505 c9a 40 00 00 00 
3f509 c9b 60 00 00 00 
3f50d c9c 80 00 00 00 
3f511 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3f515 c9e BF 00 00 00 
3f519 c9f DF 00 00 00 
3f51d ca0 FF 00 00 00 
3f521 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3f525 ca2 FF 39 39 00 
3f529 ca3 FF 55 55 00 
3f52d ca4 FF 71 71 00 
3f531 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3f535 ca6 FF AA AA 00 
3f539 ca7 FF C6 C6 00 
3f53d ca8 FF E3 E3 00 
3f541 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3f545 caa 40 10 00 00 
3f549 cab 60 18 00 00 
3f54d cac 80 20 00 00 
3f551 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3f555 cae BF 30 00 00 
3f559 caf DF 38 00 00 
3f55d cb0 FF 40 00 00 
3f561 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3f565 cb2 FF 6A 39 00 
3f569 cb3 FF 80 55 00 
3f56d cb4 FF 95 71 00 
3f571 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3f575 cb6 FF BF AA 00 
3f579 cb7 FF D5 C6 00 
3f57d cb8 FF EA E3 00 
3f581 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3f585 cba 40 20 00 00 
3f589 cbb 60 30 00 00 
3f58d cbc 80 40 00 00 
3f591 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3f595 cbe BF 60 00 00 
3f599 cbf DF 70 00 00 
3f59d cc0 FF 80 00 00 
3f5a1 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3f5a5 cc2 FF 9C 39 00 
3f5a9 cc3 FF AA 55 00 
3f5ad cc4 FF B8 71 00 
3f5b1 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3f5b5 cc6 FF D5 AA 00 
3f5b9 cc7 FF E3 C6 00 
3f5bd cc8 FF F1 E3 00 
3f5c1 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3f5c5 cca 40 30 00 00 
3f5c9 ccb 60 48 00 00 
3f5cd ccc 80 60 00 00 
3f5d1 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3f5d5 cce BF 90 00 00 
3f5d9 ccf DF A8 00 00 
3f5dd cd0 FF C0 00 00 
3f5e1 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3f5e5 cd2 FF CE 39 00 
3f5e9 cd3 FF D5 55 00 
3f5ed cd4 FF DC 71 00 
3f5f1 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3f5f5 cd6 FF EA AA 00 
3f5f9 cd7 FF F1 C6 00 
3f5fd cd8 FF F8 E3 00 
3f601 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3f605 cda 30 40 00 00 
3f609 cdb 48 60 00 00 
3f60d cdc 60 80 00 00 
3f611 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3f615 cde 90 BF 00 00 
3f619 cdf A8 DF 00 00 
3f61d ce0 C0 FF 00 00 
3f621 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3f625 ce2 CE FF 39 00 
3f629 ce3 D5 FF 55 00 
3f62d ce4 DC FF 71 00 
3f631 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3f635 ce6 EA FF AA 00 
3f639 ce7 F1 FF C6 00 
3f63d ce8 F8 FF E3 00 
3f641 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3f645 cea 00 40 00 00 
3f649 ceb 00 60 00 00 
3f64d cec 00 80 00 00 
3f651 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3f655 cee 00 BF 00 00 
3f659 cef 00 DF 00 00 
3f65d cf0 00 FF 00 00 
3f661 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3f665 cf2 39 FF 39 00 
3f669 cf3 55 FF 55 00 
3f66d cf4 71 FF 71 00 
3f671 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3f675 cf6 AA FF AA 00 
3f679 cf7 C6 FF C6 00 
3f67d cf8 E3 FF E3 00 
3f681 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3f685 cfa 00 40 14 00 
3f689 cfb 00 60 1E 00 
3f68d cfc 00 80 28 00 
3f691 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3f695 cfe 00 BF 3C 00 
3f699 cff 00 DF 46 00 
3f69d d00 00 FF 50 00 
3f6a1 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3f6a5 d02 39 FF 77 00 
3f6a9 d03 55 FF 8A 00 
3f6ad d04 71 FF 9E 00 
3f6b1 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3f6b5 d06 AA FF C5 00 
3f6b9 d07 C6 FF D8 00 
3f6bd d08 E3 FF EC 00 
3f6c1 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3f6c5 d0a 00 40 28 00 
3f6c9 d0b 00 60 3C 00 
3f6cd d0c 00 80 50 00 
3f6d1 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3f6d5 d0e 00 BF 78 00 
3f6d9 d0f 00 DF 8C 00 
3f6dd d10 00 FF A0 00 
3f6e1 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3f6e5 d12 39 FF B5 00 
3f6e9 d13 55 FF C0 00 
3f6ed d14 71 FF CA 00 
3f6f1 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3f6f5 d16 AA FF DF 00 
3f6f9 d17 C6 FF EA 00 
3f6fd d18 E3 FF F4 00 
3f701 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3f705 d1a 00 40 40 00 
3f709 d1b 00 60 60 00 
3f70d d1c 00 80 80 00 
3f711 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3f715 d1e 00 BF BF 00 
3f719 d1f 00 DF DF 00 
3f71d d20 00 FF FF 00 
3f721 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3f725 d22 39 FF FF 00 
3f729 d23 55 FF FF 00 
3f72d d24 71 FF FF 00 
3f731 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3f735 d26 AA FF FF 00 
3f739 d27 C6 FF FF 00 
3f73d d28 E3 FF FF 00 
3f741 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3f745 d2a 00 28 40 00 
3f749 d2b 00 3C 60 00 
3f74d d2c 00 50 80 00 
3f751 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3f755 d2e 00 78 BF 00 
3f759 d2f 00 8C DF 00 
3f75d d30 00 A0 FF 00 
3f761 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3f765 d32 39 B5 FF 00 
3f769 d33 55 C0 FF 00 
3f76d d34 71 CA FF 00 
3f771 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3f775 d36 AA DF FF 00 
3f779 d37 C6 EA FF 00 
3f77d d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3f780 d39 00 00 00 00 
3f784 d3a 00          | ataripalette2  file "ataripalettep2.def"
3f785 d3a 11 11 11 00 
3f789 d3b 22 22 22 00 
3f78d d3c 33 33 33 00 
3f791 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3f795 d3e 55 55 55 00 
3f799 d3f 66 66 66 00 
3f79d d40 77 77 77 00 
3f7a1 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3f7a5 d42 99 99 99 00 
3f7a9 d43 AA AA AA 00 
3f7ad d44 BB BB BB 00 
3f7b1 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3f7b5 d46 DD DD DD 00 
3f7b9 d47 EE EE EE 00 
3f7bd d48 FF FF FF 00 
3f7c1 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3f7c5 d4a 00 14 40 00 
3f7c9 d4b 00 1E 60 00 
3f7cd d4c 00 28 80 00 
3f7d1 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3f7d5 d4e 00 3C BF 00 
3f7d9 d4f 00 46 DF 00 
3f7dd d50 00 50 FF 00 
3f7e1 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3f7e5 d52 39 77 FF 00 
3f7e9 d53 55 8A FF 00 
3f7ed d54 71 9E FF 00 
3f7f1 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3f7f5 d56 AA C5 FF 00 
3f7f9 d57 C6 D8 FF 00 
3f7fd d58 E3 EC FF 00 
3f801 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3f805 d5a 00 00 40 00 
3f809 d5b 00 00 60 00 
3f80d d5c 00 00 80 00 
3f811 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3f815 d5e 00 00 BF 00 
3f819 d5f 00 00 DF 00 
3f81d d60 00 00 FF 00 
3f821 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3f825 d62 39 39 FF 00 
3f829 d63 55 55 FF 00 
3f82d d64 71 71 FF 00 
3f831 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3f835 d66 AA AA FF 00 
3f839 d67 C6 C6 FF 00 
3f83d d68 E3 E3 FF 00 
3f841 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3f845 d6a 20 00 40 00 
3f849 d6b 30 00 60 00 
3f84d d6c 40 00 80 00 
3f851 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3f855 d6e 60 00 BF 00 
3f859 d6f 70 00 DF 00 
3f85d d70 80 00 FF 00 
3f861 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3f865 d72 9C 39 FF 00 
3f869 d73 AA 55 FF 00 
3f86d d74 B8 71 FF 00 
3f871 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3f875 d76 D5 AA FF 00 
3f879 d77 E3 C6 FF 00 
3f87d d78 F1 E3 FF 00 
3f881 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3f885 d7a 40 00 40 00 
3f889 d7b 60 00 60 00 
3f88d d7c 80 00 80 00 
3f891 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3f895 d7e BF 00 BF 00 
3f899 d7f DF 00 DF 00 
3f89d d80 FF 00 FF 00 
3f8a1 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3f8a5 d82 FF 39 FF 00 
3f8a9 d83 FF 55 FF 00 
3f8ad d84 FF 71 FF 00 
3f8b1 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3f8b5 d86 FF AA FF 00 
3f8b9 d87 FF C6 FF 00 
3f8bd d88 FF E3 FF 00 
3f8c1 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3f8c5 d8a 40 00 20 00 
3f8c9 d8b 60 00 30 00 
3f8cd d8c 80 00 40 00 
3f8d1 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3f8d5 d8e BF 00 60 00 
3f8d9 d8f DF 00 70 00 
3f8dd d90 FF 00 80 00 
3f8e1 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3f8e5 d92 FF 39 9C 00 
3f8e9 d93 FF 55 AA 00 
3f8ed d94 FF 71 B8 00 
3f8f1 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3f8f5 d96 FF AA D5 00 
3f8f9 d97 FF C6 E3 00 
3f8fd d98 FF E3 F1 00 
3f901 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3f905 d9a 40 00 00 00 
3f909 d9b 60 00 00 00 
3f90d d9c 80 00 00 00 
3f911 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3f915 d9e BF 00 00 00 
3f919 d9f DF 00 00 00 
3f91d da0 FF 00 00 00 
3f921 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3f925 da2 FF 39 39 00 
3f929 da3 FF 55 55 00 
3f92d da4 FF 71 71 00 
3f931 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3f935 da6 FF AA AA 00 
3f939 da7 FF C6 C6 00 
3f93d da8 FF E3 E3 00 
3f941 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3f945 daa 40 10 00 00 
3f949 dab 60 18 00 00 
3f94d dac 80 20 00 00 
3f951 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3f955 dae BF 30 00 00 
3f959 daf DF 38 00 00 
3f95d db0 FF 40 00 00 
3f961 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3f965 db2 FF 6A 39 00 
3f969 db3 FF 80 55 00 
3f96d db4 FF 95 71 00 
3f971 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3f975 db6 FF BF AA 00 
3f979 db7 FF D5 C6 00 
3f97d db8 FF EA E3 00 
3f981 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3f985 dba 40 20 00 00 
3f989 dbb 60 30 00 00 
3f98d dbc 80 40 00 00 
3f991 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3f995 dbe BF 60 00 00 
3f999 dbf DF 70 00 00 
3f99d dc0 FF 80 00 00 
3f9a1 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3f9a5 dc2 FF 9C 39 00 
3f9a9 dc3 FF AA 55 00 
3f9ad dc4 FF B8 71 00 
3f9b1 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3f9b5 dc6 FF D5 AA 00 
3f9b9 dc7 FF E3 C6 00 
3f9bd dc8 FF F1 E3 00 
3f9c1 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3f9c5 dca 40 30 00 00 
3f9c9 dcb 60 48 00 00 
3f9cd dcc 80 60 00 00 
3f9d1 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3f9d5 dce BF 90 00 00 
3f9d9 dcf DF A8 00 00 
3f9dd dd0 FF C0 00 00 
3f9e1 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3f9e5 dd2 FF CE 39 00 
3f9e9 dd3 FF D5 55 00 
3f9ed dd4 FF DC 71 00 
3f9f1 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3f9f5 dd6 FF EA AA 00 
3f9f9 dd7 FF F1 C6 00 
3f9fd dd8 FF F8 E3 00 
3fa01 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3fa05 dda 30 40 00 00 
3fa09 ddb 48 60 00 00 
3fa0d ddc 60 80 00 00 
3fa11 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3fa15 dde 90 BF 00 00 
3fa19 ddf A8 DF 00 00 
3fa1d de0 C0 FF 00 00 
3fa21 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3fa25 de2 CE FF 39 00 
3fa29 de3 D5 FF 55 00 
3fa2d de4 DC FF 71 00 
3fa31 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3fa35 de6 EA FF AA 00 
3fa39 de7 F1 FF C6 00 
3fa3d de8 F8 FF E3 00 
3fa41 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3fa45 dea 00 40 00 00 
3fa49 deb 00 60 00 00 
3fa4d dec 00 80 00 00 
3fa51 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3fa55 dee 00 BF 00 00 
3fa59 def 00 DF 00 00 
3fa5d df0 00 FF 00 00 
3fa61 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3fa65 df2 39 FF 39 00 
3fa69 df3 55 FF 55 00 
3fa6d df4 71 FF 71 00 
3fa71 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3fa75 df6 AA FF AA 00 
3fa79 df7 C6 FF C6 00 
3fa7d df8 E3 FF E3 00 
3fa81 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3fa85 dfa 00 40 14 00 
3fa89 dfb 00 60 1E 00 
3fa8d dfc 00 80 28 00 
3fa91 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3fa95 dfe 00 BF 3C 00 
3fa99 dff 00 DF 46 00 
3fa9d e00 00 FF 50 00 
3faa1 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3faa5 e02 39 FF 77 00 
3faa9 e03 55 FF 8A 00 
3faad e04 71 FF 9E 00 
3fab1 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3fab5 e06 AA FF C5 00 
3fab9 e07 C6 FF D8 00 
3fabd e08 E3 FF EC 00 
3fac1 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3fac5 e0a 00 40 28 00 
3fac9 e0b 00 60 3C 00 
3facd e0c 00 80 50 00 
3fad1 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3fad5 e0e 00 BF 78 00 
3fad9 e0f 00 DF 8C 00 
3fadd e10 00 FF A0 00 
3fae1 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3fae5 e12 39 FF B5 00 
3fae9 e13 55 FF C0 00 
3faed e14 71 FF CA 00 
3faf1 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3faf5 e16 AA FF DF 00 
3faf9 e17 C6 FF EA 00 
3fafd e18 E3 FF F4 00 
3fb01 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3fb05 e1a 00 40 40 00 
3fb09 e1b 00 60 60 00 
3fb0d e1c 00 80 80 00 
3fb11 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3fb15 e1e 00 BF BF 00 
3fb19 e1f 00 DF DF 00 
3fb1d e20 00 FF FF 00 
3fb21 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3fb25 e22 39 FF FF 00 
3fb29 e23 55 FF FF 00 
3fb2d e24 71 FF FF 00 
3fb31 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3fb35 e26 AA FF FF 00 
3fb39 e27 C6 FF FF 00 
3fb3d e28 E3 FF FF 00 
3fb41 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3fb45 e2a 00 28 40 00 
3fb49 e2b 00 3C 60 00 
3fb4d e2c 00 50 80 00 
3fb51 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3fb55 e2e 00 78 BF 00 
3fb59 e2f 00 8C DF 00 
3fb5d e30 00 A0 FF 00 
3fb61 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3fb65 e32 39 B5 FF 00 
3fb69 e33 55 C0 FF 00 
3fb6d e34 71 CA FF 00 
3fb71 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3fb75 e36 AA DF FF 00 
3fb79 e37 C6 EA FF 00 
3fb7d e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3fb80 e39             | 
3fb80 e39             | '**********************************************************************************
3fb80 e39             | '
3fb80 e39             | '        Timings and colors definitions
3fb80 e39             | '
3fb80 e39             | '**********************************************************************************
3fb80 e39             | 
3fb80 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3fb80 e39 08 00 00 00 
3fb84 e3a 3C 00 00 00 
3fb88 e3b 08 00 00 00 
3fb8c e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3fb90 e3d 07 00 00 00 
3fb94 e3e 04 00 00 00 
3fb98 e3f 01 00 00 00 
3fb9c e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3fba0 e41 58 02 00 00 
3fba4 e42 20 9E 4B 14 
3fba8 e43 FB A8 9E 01 
3fbac e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3fbb0 e45 00 00 00 00 
3fbb4 e46 C0 00 00 00 
3fbb8 e47 00 00 00 00 
3fbbc e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3fbc0 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3fbc0 e49 00 75 C7 97 
3fbc4 e4a 27 47 F6 0A 
3fbc8 e4b 05 79 CB 9B 
3fbcc e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3fbd0 e4d             | 
3fbd0 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3fbd0 e4d             | 
3fbd0 e4d 28 0C 64 FD | hdmi            setq    #6
3fbd4 e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3fbd8 e4f 28 10 64 FD |                 setq    #8
3fbdc e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3fbe0 e51             | 
3fbe0 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3fbe4 e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3fbe8 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3fbec e54 D6 C6 01 F1 |                 add     t1,hbase
3fbf0 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3fbf4 e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3fbf8 e57 7B 0B 80 5F 
3fbfc e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3fc00 e59 66 66 86 FF 
3fc04 e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3fc08 e5b             | '
3fc08 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3fc0c e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3fc10 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3fc14 e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3fc18 e5f             | 
3fc18 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3fc1c e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3fc20 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3fc24 e62             | 
3fc24 e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3fc24 e62             | 
3fc24 e62 28 06 64 FD | p101            setq 	#3
3fc28 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3fc2c e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3fc30 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3fc34 e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3fc38 e67 00 A0 05 F6 |                 mov     dlinum, #0
3fc3c e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3fc40 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3fc44 e6a             | 
3fc44 e6a             | 
3fc44 e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3fc48 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3fc4c e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3fc50 e6d             |                 
3fc50 e6d             | 
3fc50 e6d             | 
3fc50 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3fc50 e6d             |   
3fc50 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3fc54 e6e 29 FE 65 3D |          if_nc  setq2   #255
3fc58 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3fc5c e70             | 
3fc5c e70             | '' -----   up porch (before the picture)
3fc5c e70             | 
3fc5c e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3fc60 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3fc64 e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3fc68 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3fc6c e74             |  
3fc6c e74             |    
3fc6c e74             |  
3fc6c e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3fc70 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3fc74 e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3fc78 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3fc7c e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3fc80 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3fc84 e7a             | 
3fc84 e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3fc88 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3fc8c e7c 48 00 B0 FD | 		call    #dli
3fc90 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3fc94 e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3fc98 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3fc9c e80             |                 	
3fc9c e80             |                 
3fc9c e80             | 
3fc9c e80             |  
3fc9c e80             | '' ------- the main screen drawing starts here
3fc9c e80             | 
3fc9c e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3fca0 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3fca4 e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3fca8 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3fcac e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3fcb0 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3fcb4 e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3fcb8 e87             |               
3fcb8 e87             | 
3fcb8 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3fcbc e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3fcc0 e89             | 
3fcc0 e89             | ' ---------------- All visible lines displayed now, start vblank  
3fcc0 e89             | 
3fcc0 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3fcc4 e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3fcc8 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3fccc e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3fcd0 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3fcd4 e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3fcd8 e8f             | 
3fcd8 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3fcd8 e8f             | 
3fcd8 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3fcd8 e8f             | 
3fcd8 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3fcdc e90             | 
3fcdc e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3fce0 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3fce4 e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3fce8 e93             | 
3fce8 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3fcec e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3fcf0 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3fcf4 e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3fcf8 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3fcfc e98             | 
3fcfc e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3fd00 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3fd04 e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3fd08 e9b 70 00 90 AD |     if_z        jmp     #preload
3fd0c e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3fd10 e9d 94 00 90 AD |     if_z        jmp     #preload2
3fd14 e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3fd18 e9f 0C 00 90 AD |     if_z        jmp     #p390
3fd1c ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3fd20 ea1 28 00 90 AD |     if_z        jmp     #p391  
3fd24 ea2             | 
3fd24 ea2 2D 00 64 FD | p308            ret
3fd28 ea3             |    
3fd28 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3fd2c ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3fd30 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3fd34 ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3fd38 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3fd3c ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3fd40 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3fd44 eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3fd48 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3fd4c eac             |  
3fd4c eac             | '' --------  Reload palette. To do 
3fd4c eac             | 
3fd4c eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3fd50 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3fd54 eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3fd58 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3fd5c eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3fd60 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3fd64 eb2 70 FF 9F FD |         	jmp     #dli                
3fd68 eb3             |       
3fd68 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3fd68 eb3             | 
3fd68 eb3             | 
3fd68 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3fd68 eb3             | 
3fd68 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3fd6c eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3fd70 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3fd74 eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3fd78 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3fd7c eb8             |         
3fd7c eb8             | '' -------------- Preload a line from PSRAM        
3fd7c eb8             |         
3fd7c eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3fd80 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3fd84 eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3fd88 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3fd8c ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3fd90 ebd             | 
3fd90 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3fd94 ebe 32 B7 01 F6 |                 mov     buf2,a1024
3fd98 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3fd9c ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3fda0 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3fda4 ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3fda8 ec3             |  
3fda8 ec3             |  
3fda8 ec3             | preload2      '  incmod  dlinum,#3
3fda8 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3fdac ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3fdb0 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3fdb4 ec6 28 02 64 FD |                 setq	#1
3fdb8 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3fdbc ec8             |                 
3fdbc ec8             | 
3fdbc ec8             | '' -------------- Draw sprites
3fdbc ec8             | 
3fdbc ec8 CF 5C 02 F6 | sprite          mov t8,frames
3fdc0 ec9 10 5C 0E F5 | 		and t8,#16 wz
3fdc4 eca 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3fdc8 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3fdcc ecc             | 		
3fdcc ecc             | 
3fdcc ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3fdd0 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3fdd4 ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3fdd8 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3fddc ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3fde0 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3fde4 ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3fde8 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3fdec ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3fdf0 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3fdf4 ed6 01 52 86 F1 |                 sub     sprite_h,#1
3fdf8 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3fdfc ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3fe00 ed9             | 
3fe00 ed9             | 
3fe00 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3fe04 eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3fe08 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3fe0c edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3fe10 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3fe14 ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3fe18 edf 00 5E 06 F6 |                 mov 	t9,#0
3fe1c ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3fe20 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3fe24 ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3fe28 ee3             |      
3fe28 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3fe2c ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3fe30 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3fe34 ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3fe38 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3fe3c ee8             |                 
3fe3c ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3fe40 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3fe44 eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3fe48 eeb             |   		
3fe48 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3fe4c eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3fe50 eed             | 
3fe50 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3fe54 eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3fe58 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3fe5c ef0             |  
3fe5c ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3fe60 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3fe64 ef2 10 00 90 CD |      if_c 	jmp     #p899		
3fe68 ef3             | 	
3fe68 ef3             | 	
3fe68 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3fe6c ef4 28 CD 01 F1 | 		add	t4,sprite_w
3fe70 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3fe74 ef6             | 
3fe74 ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3fe78 ef7             | 
3fe78 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3fe7c ef8 01 58 86 F1 | 	 	sub     t6,#1
3fe80 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3fe84 efa             | 
3fe84 efa 28 58 62 FD |                 setq   	t6
3fe88 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3fe8c efc 28 5D 02 F6 |                 mov t8,sprite_w
3fe90 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3fe94 efe 24 00 90 AD |         if_z    jmp #p898
3fe98 eff             |          
3fe98 eff             |         
3fe98 eff 70 5F 06 F6 |                 mov  t9,#368
3fe9c f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3fea0 f01             | 
3fea0 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3fea4 f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3fea8 f03 FF FF 7F FF 
3feac f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3feb0 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3feb4 f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3feb8 f07 2D 01 00 F5 |                 and 0-0, t7
3febc f08             |                
3febc f08             | 
3febc f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3fec0 f09 E5 E0 7A FA |                 wmlong 368,t3				
3fec4 f0a             |                 
3fec4 f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3fec8 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3fecc f0c 2D 00 64 FD |                 ret
3fed0 f0d             | 	
3fed0 f0d             | 	
3fed0 f0d             |                
3fed0 f0d             |  
3fed0 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3fed0 f0d             |  
3fed0 f0d             | 
3fed0 f0d             | '' consts and vars
3fed0 f0d             | 
3fed0 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3fed4 f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3fed8 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3fedc f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3fee0 f11             | 
3fee0 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3fee4 f12             | 
3fee4 f12             | '------ these longs will be set by setmode function
3fee4 f12             | 
3fee4 f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3fee8 f13 00 00 00 00 | m_sn            long    0        'sync
3feec f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3fef0 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3fef4 f16             | 'm_border        long    0        'left/right borders
3fef4 f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3fef8 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3fefc f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3ff00 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3ff04 f1a 00 00 00 00 | i_totalvis      long    0
3ff08 f1b             | 
3ff08 f1b             | '-------------------------------------
3ff08 f1b             |  
3ff08 f1b 00 00 00 00 | linenum         long    0
3ff0c f1c 00 00 00 00 | frames          long    0
3ff10 f1d 00 00 00 00 | dlinum long 0
3ff14 f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3ff18 f1f             | 
3ff18 f1f 00 00 00 00 | vblankptr       long    0
3ff1c f20 00 00 00 00 | modeptr         long    0
3ff20 f21 00 00 00 00 | paletteptr      long    0
3ff24 f22 00 00 00 00 | dlptr           long    0
3ff28 f23 01 00 00 00 | hbase           long    1
3ff2c f24 00 00 00 00 | mailbox         long    0
3ff30 f25 00 00 00 00 | spriteptr          long 0
3ff34 f26             | 
3ff34 f26 00 00 00 00 | cmd             long    0
3ff38 f27 00 EC 07 00 | buf1            long    $80000-1024-4096
3ff3c f28 00 04 00 00 | buf2            long    1024
3ff40 f29 01 00 00 00 | dlptr2          long    1
3ff44 f2a 01 00 00 00 | dl              long    1
3ff48 f2b             | 
3ff48 f2b 00 00 00 00 | buf1c long 0
3ff4c f2c 00 EC 07 00 | buf1d            long    $80000-1024-4096
3ff50 f2d 01 00 00 00 | framebuf2       long    1
3ff54 f2e 01 00 00 00 | hsync0          long    1
3ff58 f2f 01 00 00 00 | hsync1          long    1
3ff5c f30             | 
3ff5c f30 01 00 00 00 | t1              long    1
3ff60 f31 00 00 00 00 | t2 long 0
3ff64 f32 00 00 00 00 | t3 long 0
3ff68 f33 00 00 00 00 | t4 long 0
3ff6c f34             | 
3ff6c f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3ff70 f35 00 00 00 00 | rcnt2           long    0
3ff74 f36 00 00 00 00 | rcnt2a          long    0
3ff78 f37 00 00 00 00 | roffset         long    0
3ff7c f38 00 00 00 00 | rdl             long    0  'dl repeat line
3ff80 f39 00 00 00 00 | dlc             long    0  'dl command
3ff84 f3a             | 
3ff84 f3a FF FF FF FF | affffffff       long    $ffffffff
3ff88 f3b 00 00 00 00 | sprite1pointer long 0
3ff8c f3c 00 00 00 00 | sprite1xy      long 0
3ff90 f3d 00 00 00 00 | sprite1wh      long 0
3ff94 f3e 00 00 00 00 | sprite2pointer long 0
3ff98 f3f 00 00 00 00 | sprite2xy      long 0
3ff9c f40 00 00 00 00 | sprite2wh      long 0
3ffa0 f41 00 00 00 00 | sprite3pointer long 0
3ffa4 f42 00 00 00 00 | sprite3xy      long 0
3ffa8 f43 00 00 00 00 | sprite3wh      long 0
3ffac f44 00 00 00 00 | sprite4pointer long 0
3ffb0 f45 00 00 00 00 | sprite4xy      long 0
3ffb4 f46 00 00 00 00 | sprite4wh      long 0
3ffb8 f47 00 00 00 00 | sprite5pointer long 0
3ffbc f48 00 00 00 00 | sprite5xy      long 0
3ffc0 f49 00 00 00 00 | sprite5wh      long 0
3ffc4 f4a 00 00 00 00 | sprite6pointer long 0
3ffc8 f4b 00 00 00 00 | sprite6xy      long 0
3ffcc f4c 00 00 00 00 | sprite6wh      long 0
3ffd0 f4d 00 00 00 00 | sprite7pointer long 0
3ffd4 f4e 00 00 00 00 | sprite7xy      long 0
3ffd8 f4f 00 00 00 00 | sprite7wh      long 0
3ffdc f50 00 00 00 00 | sprite8pointer long 0
3ffe0 f51 00 00 00 00 | sprite8xy      long 0
3ffe4 f52 00 00 00 00 | sprite8wh      long 0
3ffe8 f53 00 00 00 00 | sprite9pointer long 0
3ffec f54 00 00 00 00 | sprite9xy      long 0
3fff0 f55 00 00 00 00 | sprite9wh      long 0
3fff4 f56 00 00 00 00 | sprite10pointer long 0
3fff8 f57 00 00 00 00 | sprite10xy      long 0
3fffc f58 00 00 00 00 | sprite10wh      long 0
40000 f59 00 00 00 00 | sprite11pointer long 0
40004 f5a 00 00 00 00 | sprite11xy      long 0
40008 f5b 00 00 00 00 | sprite11wh      long 0
4000c f5c 00 00 00 00 | sprite12pointer long 0
40010 f5d 00 00 00 00 | sprite12xy      long 0
40014 f5e 00 00 00 00 | sprite12wh      long 0
40018 f5f 00 00 00 00 | sprite13pointer long 0
4001c f60 00 00 00 00 | sprite13xy      long 0
40020 f61 00 00 00 00 | sprite13wh      long 0
40024 f62 00 00 00 00 | sprite14pointer long 0
40028 f63 00 00 00 00 | sprite14xy      long 0
4002c f64 00 00 00 00 | sprite14wh      long 0
40030 f65 00 00 00 00 | sprite15pointer long 0
40034 f66 00 00 00 00 | sprite15xy      long 0
40038 f67 00 00 00 00 | sprite15wh      long 0
4003c f68 00 00 00 00 | sprite16pointer long 0
40040 f69 00 00 00 00 | sprite16xy      long 0
40044 f6a 00 00 00 00 | sprite16wh      long 0
40048 f6b 00 00 00 00 | sprite17pointer long 0
4004c f6c 00 00 00 00 | sprite17xy      long 0
40050 f6d 00 00 00 00 | sprite17wh      long 0
40054 f6e 00 00 00 00 | sprite18pointer long 0
40058 f6f 00 00 00 00 | sprite18xy      long 0
4005c f70 00 00 00 00 | sprite18wh      long 0
40060 f71 00 00 00 00 | spritenum long 0
40064 f72             | 
40064 f72 00 00 00 00 | spriteline long 0
40068 f73 84 03 00 00 | sprite_x long 900
4006c f74 00 00 00 00 | sprite_y long 0
40070 f75 10 00 00 00 | sprite_w long 16
40074 f76 40 00 00 00 | sprite_h long 64
40078 f77 00 00 00 00 | l2 long 0
4007c f78 00 00 00 00 | t5 long 0
40080 f79 00 00 00 00 | t6 long 0
40084 f7a 00 00 00 00 | t7 long 0
40088 f7b 00 00 00 00 | t8 long 0
4008c f7c 00 00 00 00 | t9 long 0
40090 f7d 00 00 00 00 | preloadaddr long 0
40094 f7e 00 00 00 00 | preloadlineaddr long 0
40098 f7f 00 04 00 00 | a1024 long 1024
4009c f80             | 
4009c f80 E0 03 00 00 | aa long 992
400a0 f81 FF 03 00 00 | a1023 long 1023
400a4 f82 00 10 00 00 | a4096 long 4096
400a8 f83             |  fit 368
400a8 f83             | _psram_spin2_dat_
400a8 f83 00 00 00 00 
      ...             
401a0 fc1 00 00 00 00 
401a4 fc2 00 00 00 00 |     listdata long 0[8*8]
401a8 fc3             |             orgh
401a8                 | 
401a8                 | ' driver state
401a8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
401ac     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
401b0                 | 
401b0                 | ' delay profile
401b0     07 00 00 00 
401b4     00 CF 7B 05 
401b8     80 D1 F0 08 
401bc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
401c0     80 C4 60 0F 
401c4     80 39 7A 12 
401c8     40 2D D9 13 
401cc     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
401d0                 | 
401d0                 | ' data to be passed to driver when starting it
401d0                 | startupData
401d0     00 00 00 00 |     long    0           ' current frequency
401d4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
401d8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
401dc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
401e0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
401e4     F0 01 04 00 |     long    deviceData  ' address of devices data structure in HUBRAM
401e8     70 02 04 00 |     long    qosData     ' address of QoS data structure in HUBRAM
401ec     90 02 04 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
401f0                 | 
401f0                 | ' data for memory
401f0                 | deviceData
401f0                 |     ' 16 bank parameters follow (16MB per bank)
401f0     00 00 00 00 
      ...             
40228     00 00 00 00 
4022c     00 00 00 00 |     long    0[16]                               ' banks 0-15
40230                 |     ' 16 banks of pin parameters follow
40230     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
40234     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
40238     FF FF FF FF 
      ...             
40268     FF FF FF FF 
4026c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
40270                 | 
40270                 | ' data for COG polling
40270                 | qosData 
40270     00 00 FF FF 
40274     00 00 FF FF 
40278     00 00 FF FF 
4027c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
40280     00 00 FF FF 
40284     00 00 FF FF 
40288     00 00 FF FF 
4028c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
40290                 |     
40290                 | ' mailbox storage
40290                 | 
40290                 | mailboxes
40290     00 00 00 00 
      ...             
402e8     00 00 00 00 
402ec     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
402f0                 | 	alignl
402f0                 | _psram16drv_spin2_dat_
402f0                 |                             orgh
402f0     00 00 00 00 
      ...             
40308     00 00 00 00 
4030c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
40310                 | 
40310                 | driver_start
40310                 |                             org
40310 000             | '..................................................................................................
40310 000             | ' Memory layout for COG RAM once operational:
40310 000             | '
40310 000             | '  COG RAM address      Usage
40310 000             | '  ---------------      ----
40310 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
40310 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
40310 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
40310 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
40310 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
40310 000             | '  ~$198-$1F3           State and register variables
40310 000             | '
40310 000             | ' Also during driver COG startup:
40310 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
40310 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
40310 000             | '..................................................................................................
40310 000             |                             
40310 000             | ' Mailbox storage after vector initialization
40310 000             | 
40310 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
40314 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
40318 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
4031c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
40320 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
40324 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
40328 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
4032c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
40330 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
40334 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
40338 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
4033c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
40340 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
40344 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
40348 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
4034c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
40350 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
40354 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
40358 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
4035c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
40360 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
40364 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
40368 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
4036c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
40370 018             | 
40370 018             | ' Mailbox parameter addresses per COG once patched
40370 018             |                             
40370 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
40374 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
40378 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
4037c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
40380 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
40384 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
40388 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
4038c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
40390 020             | 
40390 020             | '..................................................................................................
40390 020             | ' Per COG request and state setup and service branching
40390 020             |         
40390 020             | cog0                 
40390 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
40394 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
40398 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
4039c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
403a0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
403a4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
403a8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
403ac 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
403b0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
403b4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
403b8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
403bc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
403c0 02c             | cog1                        
403c0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
403c4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
403c8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
403cc 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
403d0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
403d4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
403d8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
403dc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
403e0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
403e4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
403e8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
403ec 037 33 CA 63 FD |                             execf   request-0               'jump to service
403f0 038             | cog2                         
403f0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
403f4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
403f8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
403fc 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
40400 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40404 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40408 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
4040c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
40410 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
40414 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40418 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4041c 043 33 CA 63 FD |                             execf   request-0               'jump to service
40420 044             | cog3                        
40420 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
40424 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
40428 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
4042c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
40430 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40434 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40438 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
4043c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
40440 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
40444 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40448 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4044c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
40450 050             | cog4                        
40450 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
40454 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
40458 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
4045c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
40460 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40464 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40468 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
4046c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
40470 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
40474 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40478 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4047c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
40480 05c             | cog5                        
40480 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
40484 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
40488 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
4048c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
40490 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40494 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40498 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
4049c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
404a0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
404a4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
404a8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
404ac 067 33 CA 63 FD |                             execf   request-0               'jump to service
404b0 068             | cog6                        
404b0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
404b4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
404b8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
404bc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
404c0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
404c4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
404c8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
404cc 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
404d0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
404d4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
404d8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
404dc 073 33 CA 63 FD |                             execf   request-0               'jump to service
404e0 074             | cog7                        
404e0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
404e4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
404e8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
404ec 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
404f0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
404f4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
404f8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
404fc 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
40500 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
40504 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40508 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4050c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
40510 080             |                             fit     128
40510 080             | 
40510 080             |                             fit     128
40510 080             | pad                         long    0[128-$]                'align init code to $80
40510 080             | 
40510 080             | '..................................................................................................
40510 080             | 
40510 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
40510 080             | 
40510 080             | init                        
40510 080             |                             ' get driver scratch long address in hub
40510 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
40514 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
40518 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
4051c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
40520 084             |                     
40520 084             |                             ' read in the additional LUT RAM code
40520 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
40524 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
40528 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
4052c 087             | 
4052c 087             |                             ' read the startup parameters
4052c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
40530 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
40534 089             | 
40534 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
40534 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
40538 08a             | 
40538 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
4053c 08b 01 00 00 5F 
40540 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
40544 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
40548 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
4054c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
40550 090             | 
40550 090             |                             ' setup data pin modes and data bus pin group in streamer commands
40550 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
40554 091 01 00 00 FF 
40558 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
4055c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
40560 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
40564 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
40568 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
4056c 097 08 DE 47 F5 |                             or      a, #8
40570 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
40574 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
40578 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
4057c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
40580 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
40584 09d 01 DE 07 F1 |                             add     a, #1
40588 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
4058c 09f             |  
4058c 09f             |                             ' setup device control pin states
4058c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
40590 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
40594 0a1 01 00 00 FF 
40598 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
4059c 0a3             | 
4059c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
405a0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
405a4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
405a8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
405ac 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
405b0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
405b4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
405b8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
405bc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
405c0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
405c4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
405c8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
405cc 0af             | pinloop
405cc 0af             |                             ' generate minimum CE high time before access
405cc 0af A1 07 00 FF 
405d0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
405d4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
405d8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
405dc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
405e0 0b4 1F DE 63 FD |                             waitx   a                       'delay
405e4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
405e8 0b6             | 
405e8 0b6             |                             ' setup the COG mailboxes and addresses 
405e8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
405ec 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
405f0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
405f4 0b9             | 
405f4 0b9 28 2E 64 FD |                             setq    #24-1
405f8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
405fc 0bb             | 
405fc 0bb             |                             ' setup the polling loop for active COGs 
405fc 0bb 01 C2 63 FD |                             cogid   id
40600 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
40604 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
40608 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
4060c 0bf 0A F0 07 F6 |                             mov     ptra, #10
40610 0c0 E1 F1 03 FA |                             mul     ptra, id
40614 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
40618 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
4061c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
40620 0c4 03 C2 07 FA |                             mul     id, #3
40624 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
40628 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
4062c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
40630 0c8 D8 01 B0 FD |                             call    #reloadcogs
40634 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
40638 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
4063c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
4063c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
40640 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
40644 0cd 08 04 DC FC |                             rep     #2, #8
40648 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
4064c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
40650 0d0             | 
40650 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
40650 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
40650 0d0 01 C2 63 FD |                             cogid   id
40654 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
40658 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
4065c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
40660 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
40664 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
40668 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
4066c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
40670 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
40674 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
40678 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
4067c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
40680 0dc 00 00 00 F6 |                             mov     0-0, 0-0
40684 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
40688 0de A5 E5 03 F1 |                             add     d, const512
4068c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
40690 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
40694 0e1 00 00 00 F6 |                             mov     0-0, 0-0
40698 0e2             |                             
40698 0e2             |                             ' setup register values for control vector loop setup after we return
40698 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
4069c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
406a0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
406a4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
406a8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
406ac 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
406b0 0e8 D0 C3 8F F9 |                             altd    id, #id0
406b4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
406b8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
406bc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
406c0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
406c4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
406c8 0ee             |  
406c8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
406cc 0ef 07 CA 07 F5 |                             and     request, #7
406d0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
406d4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
406d8 0f2             |                             fit     $100                    'ensure all init code fits this space
406d8 0f2             | 
406d8 0f2             |                             fit     $100                    'ensure all init code fits this space
406d8 0f2             | 
406d8 0f2 00 00 00 00 
      ...             
40708 0fe 00 00 00 00 
4070c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
40710 100             | 
40710 100             | '..................................................................................................
40710 100             | ' Error result handling and COG notification of request completion
40710 100             | 
40710 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
40714 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
40718 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
4071c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
40720 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
40724 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
40728 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
4072c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
40730 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
40734 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
40738 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
4073c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
40740 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
40744 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
40748 10e             | ' Poller re-starts here after a COG is serviced
40748 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
4074c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
40750 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
40754 111             | ' Main dynamic polling loop repeats until a request arrives
40754 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
40758 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
4075c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
40760 114             | 
40760 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
40764 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
40768 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
4076c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
40770 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
40774 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
40778 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
4077c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
40780 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
40784 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
40788 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
4078c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
40790 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
40794 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
40798 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
4079c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
407a0 124             | 
407a0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
407a4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
407a8 126             |  
407a8 126             | '..................................................................................................
407a8 126             | ' List handler                               
407a8 126             | 
407a8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
407ac 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
407b0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
407b4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
407b8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
407bc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
407c0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
407c4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
407c8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
407cc 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
407d0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
407d4 131 33 00 60 FD |                             execf   0-0                     'process the request 
407d8 132             | 
407d8 132             | '..................................................................................................
407d8 132             | ' Restoring per COG state and resuming where we left off
407d8 132             | 
407d8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
407dc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
407e0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
407e4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
407e8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
407ec 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
407f0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
407f4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
407f8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
407fc 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
40800 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
40804 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
40808 13e             |                    
40808 13e             | '..................................................................................................
40808 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
40808 13e             | 
40808 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
4080c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
40810 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
40814 141 D0 DF B7 F9 |                             setd    a, #id0
40818 142 D8 DF BF F9 |                             sets    a, #addr1
4081c 143 FE FF FF FF 
40820 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
40824 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
40828 146 3F DE A7 F9 |                             alti    a, #%111_111 
4082c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
40830 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
40834 149 01 E2 63 FD |                             cogid   c
40838 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
4083c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
40840 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
40844 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
40848 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
4084c 14f 00 E0 03 F6 |                             mov     b, 0-0
40850 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
40854 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
40858 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
4085c 153 0C 00 90 AD |             if_z            jmp     #excluded               
40860 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
40864 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
40868 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
4086c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
40870 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
40874 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
40878 15a             | 
40878 15a             | 'determine priority cogs and build instructions for the polling sequence
40878 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
4087c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
40880 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
40884 15d             | 
40884 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
40888 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
4088c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
40890 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
40894 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
40898 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
4089c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
408a0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
408a4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
408a8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
408ac 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
408b0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
408b4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
408b8 16a             | endprioloop
408b8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
408bc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
408c0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
408c4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
408c8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
408cc 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
408d0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
408d4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
408d8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
408dc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
408e0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
408e4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
408e8 176             | 
408e8 176             | ' populate the round robin COG polling instructions
408e8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
408ec 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
408f0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
408f4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
408f8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
408fc 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
40900 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
40904 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
40908 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
4090c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
40910 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
40914 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
40918 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
4091c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
40920 184             | '..................................................................................................
40920 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
40920 184             | 
40920 184             | set_latency                                                 '            (a) set latency
40920 184             | get_latency                                                 '            (b) get latency
40920 184             | set_burst                                                   '            (c) set burst size of bank
40920 184             | get_burst                                                   '            (d) get burst size of bank
40920 184             |                                                             '            (e) dump state
40920 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
40924 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
40928 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
4092c 187             |                                                             ' | | | | e  account for following AUGS
4092c 187 04 00 00 FF 
40930 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
40934 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
40938 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
4093c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
40940 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
40944 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
40948 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
4094c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
40950 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
40954 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
40958 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
4095c 193             | 
4095c 193             | '..................................................................................................
4095c 193             | ' Misc EXECF code
4095c 193             | 
4095c 193 33 72 63 FD | start_read_exec             execf   newburstr
40960 194 33 7C 63 FD | start_write_exec            execf   resumewrites
40964 195 33 78 63 FD | continue_read_exec          execf   lockedreads
40968 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
4096c 197             | 
4096c 197             | '..................................................................................................
4096c 197             | ' Variables
4096c 197             | 
4096c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
40970 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
40974 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
40978 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
4097c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
40980 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
40984 19d             | 
40984 19d 00 00 00 80 | xfreq1          long    $80000000
40988 19e 00 00 00 40 | xfreq2          long    $40000000
4098c 19f 03 00 00 00 | delay           long    3
40990 1a0             | 
40990 1a0             | lutcodeaddr                 
40990 1a0             | startupparams
40990 1a0             | excludedcogs                                    'careful: shared register use!
40990 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
40994 1a1 00 00 00 00 | flags           long    0
40998 1a2             | mask                                            'careful: shared register use!
40998 1a2 00 00 00 00 | resetmaskA      long    0
4099c 1a3             | limit                                           'careful: shared register use!
4099c 1a3 00 00 00 00 | resetmaskB      long    0
409a0 1a4 00 00 00 00 | datapins        long    0
409a4 1a5             | const512                                        'careful: shared register use!
409a4 1a5 00 00 00 00 | devicelist      long    0
409a8 1a6 00 00 00 00 | coglist         long    0
409ac 1a7 00 00 00 00 | mbox            long    0 
409b0 1a8             | 
409b0 1a8             | clkpin                                          'shared with code patched during init
409b0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
409b4 1a9             | cspin                                           'shared with code patched during init
409b4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
409b8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
409bc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
409c0 1ac 01 00 00 00 | clkdelay        long    1
409c4 1ad 00 00 00 00 | regdatabus      long    0
409c8 1ae             | 
409c8 1ae 10 00 00 00 | deviceaddr      long    $10
409cc 1af             | rrcounter
409cc 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
409d0 1b0             | 
409d0 1b0             | ' jump addresses for the per COG handlers
409d0 1b0 20 00 00 00 | cog0_handler    long    cog0
409d4 1b1 2C 00 00 00 | cog1_handler    long    cog1
409d8 1b2 38 00 00 00 | cog2_handler    long    cog2
409dc 1b3 44 00 00 00 | cog3_handler    long    cog3
409e0 1b4 50 00 00 00 | cog4_handler    long    cog4
409e4 1b5 5C 00 00 00 | cog5_handler    long    cog5
409e8 1b6 68 00 00 00 | cog6_handler    long    cog6
409ec 1b7 74 00 00 00 | cog7_handler    long    cog7
409f0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
409f4 1b9             | 
409f4 1b9             | ' EXECF sequences
409f4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
409f8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
409fc 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
40a00 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
40a04 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
40a08 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
40a0c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
40a10 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
40a10 1c0             | 
40a10 1c0             | 
40a10 1c0             | ' SKIPF sequences
40a10 1c0             | skiptable
40a10 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
40a14 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
40a18 1c2 00 00 00 00 |                 long    0                      ' read modify write long
40a1c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
40a20 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
40a24 1c5 00 00 00 00 | pattern2        long    0
40a28 1c6 00 00 00 00 | pattern3        long    0
40a2c 1c7 77 02 00 00 | singlelong      long    %1001110111  
40a30 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
40a34 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
40a38 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
40a3c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
40a40 1cc             | 
40a40 1cc             | ' LUT RAM address values
40a40 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
40a44 1cd DD 02 00 00 | continue_read   long    continue_read_lut
40a48 1ce DB 02 00 00 | continue_write  long    continue_write_lut
40a4c 1cf F6 02 00 00 | noread          long    noread_lut
40a50 1d0             | 
40a50 1d0 00 00 00 00 | id0             long    0
40a54 1d1 01 00 00 00 | id1             long    1
40a58 1d2 02 00 00 00 | id2             long    2
40a5c 1d3 03 00 00 00 | id3             long    3
40a60 1d4 04 00 00 00 | id4             long    4
40a64 1d5 05 00 00 00 | id5             long    5
40a68 1d6 06 00 00 00 | id6             long    6
40a6c 1d7 07 00 00 00 | id7             long    7
40a70 1d8             | 
40a70 1d8             | 'These next 10 request registers below are also temporarily reused during init 
40a70 1d8             | 'and COG updates and need to follow immediately after id0-id7
40a70 1d8 00 00 00 00 | addr1           long    0
40a74 1d9 00 00 00 00 | hubdata         long    0
40a78 1da 00 00 00 00 | count           long    0
40a7c 1db 00 00 00 00 | addr2           long    0
40a80 1dc 00 00 00 00 | total           long    0
40a84 1dd 00 00 00 00 | offset1         long    0
40a88 1de 00 00 00 00 | offset2         long    0
40a8c 1df 00 00 00 00 | link            long    0
40a90 1e0             | 
40a90 1e0             | burstwrite                                      'note shared register use during init
40a90 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
40a94 1e1 00 00 00 00 | id              long    0
40a98 1e2             | 
40a98 1e2 00 00 00 00 | header          long    0
40a9c 1e3 00 00 00 00 | trailer         long    0
40aa0 1e4 00 00 00 00 | cmdaddr         long    0
40aa4 1e5 00 00 00 00 | request         long    0
40aa8 1e6 00 00 00 00 | rrlimit         long    0
40aac 1e7 00 00 00 00 | pinconfig       long    0
40ab0 1e8 00 00 00 00 | clks            long    0
40ab4 1e9 00 00 00 00 | resume          long    0
40ab8 1ea 00 00 00 00 | orighubsize     long    0
40abc 1eb 00 00 00 00 | wrclks          long    0
40ac0 1ec             | 
40ac0 1ec 00 00 00 00 | pattern         long    0
40ac4 1ed 00 00 00 00 | hubscratch      long    0
40ac8 1ee 00 10 00 00 | val4k           long    4096
40acc 1ef             | 
40acc 1ef             | ' temporary general purpose regs
40acc 1ef 00 00 00 00 | a               long    0
40ad0 1f0 00 00 00 00 | b               long    0
40ad4 1f1 00 00 00 00 | c               long    0
40ad8 1f2 00 00 00 00 | d               long    0
40adc 1f3             |                 fit     502
40adc 1f3             | 
40adc 1f3             |                 fit     502
40adc 1f3             | 
40adc 1f3             | '..................................................................................................
40adc 1f3             | 
40adc 1f3             |             orgh
40adc                 | 
40adc                 | lut_code
40adc                 | 'HW init code up to 80 longs
40adc                 | 
40adc                 | '..................................................................................................
40adc                 | ' Memory layout for LUT RAM once operational:
40adc                 | '
40adc                 | '  LUT RAM address      Usage
40adc                 | '  ---------------      ----
40adc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
40adc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
40adc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
40adc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
40adc                 | '
40adc                 | ' Also during driver COG startup:
40adc                 | ' $230-$24F is used for HW init setup
40adc                 | ' $250-$26F is used as temporary vector storage 
40adc                 | '..................................................................................................
40adc                 | 
40adc                 |                 org $230    
40adc 230             | 
40adc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
40adc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
40ae0 231 24 16 60 FD |                             pollxfi
40ae4 232 FF AA 2A FF 
40ae8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
40aec 234 28 00 B0 FD |                             call    #sendqspi
40af0 235 07 F8 07 FF 
40af4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
40af8 237 28 00 B0 FD |                             call    #sendspi
40afc 238 F8 07 78 FF 
40b00 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
40b04 23a 1C 00 B0 FD |                             call    #sendspi
40b08 23b 7F 78 78 FF 
40b0c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
40b10 23d 10 00 B0 FD |                             call    #sendspi 
40b14 23e 2D 00 64 FD |                             ret
40b18 23f             | 
40b18 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
40b1c 240 32 0C 64 FD |                             skipf   #%110
40b20 241 9C EF 03 F6 |                             mov     pb, xsendimm
40b24 242             | 
40b24 242 10 D0 07 F6 | sendspi                     mov     clks, #16
40b28 243 97 EF 03 F6 |                             mov     pb, ximm8lut
40b2c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
40b30 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
40b34 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
40b38 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
40b3c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
40b40 249 50 48 63 FD |                             fltl    datapins                'float data bus
40b44 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
40b48 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
40b4c 24c             | 
40b4c 24c 00 00 00 00 
40b50 24d 00 00 00 00 
40b54 24e 00 00 00 00 
40b58 24f 00 00 00 00 |                 long    0[$270-32-$]
40b5c 250             |                 fit     $270-32  ' keep room for 32 vector longs
40b5c 250             |     
40b5c 250             |                 fit     $270-32  ' keep room for 32 vector longs
40b5c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
40b5c 250             | rw_vect ' PSRAM jump vectors
40b5c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40b60 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40b64 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
40b68 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
40b6c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
40b70 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
40b74 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
40b78 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
40b7c 258             | ro_vect ' R/O PSRAM jump vectors
40b7c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40b80 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40b84 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
40b88 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
40b8c 25c 00 01 00 00 |                 long    unsupported
40b90 25d 00 01 00 00 |                 long    unsupported
40b94 25e 00 01 00 00 |                 long    unsupported
40b98 25f 00 01 00 00 |                 long    unsupported
40b9c 260             | ctrl_vect ' Control jump vectors
40b9c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
40ba0 261 00 01 00 00 |                 long    unsupported
40ba4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
40ba8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
40bac 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
40bb0 265 00 01 00 00 |                 long    unsupported
40bb4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
40bb8 267 3E 01 00 00 |                 long    reconfig 
40bbc 268             | no_vect ' Invalid bank jump vectors
40bbc 268 01 01 00 00 |                 long    invalidbank
40bc0 269 01 01 00 00 |                 long    invalidbank
40bc4 26a 01 01 00 00 |                 long    invalidbank
40bc8 26b 01 01 00 00 |                 long    invalidbank
40bcc 26c 01 01 00 00 |                 long    invalidbank
40bd0 26d 01 01 00 00 |                 long    invalidbank
40bd4 26e 01 01 00 00 |                 long    invalidbank
40bd8 26f 01 01 00 00 |                 long    invalidbank
40bdc 270             |                 fit     $270
40bdc 270             | 
40bdc 270             |                 fit     $270
40bdc 270             | '..................................................................................................
40bdc 270             | ' PSRAM READS
40bdc 270             |                                                             ' a b c d e f
40bdc 270             |                                                             ' B W L B R L  (a) byte read
40bdc 270             |                                                             ' Y O O U E O  (b) word read
40bdc 270             |                                                             ' T R N R S C  (c) long read
40bdc 270             |                                                             ' E D G S U K  (d) new burst read
40bdc 270             |                                                             '       T M E  (e) resumed sub-burst
40bdc 270             |                                                             '         E D  (f) locked sub-burst
40bdc 270             | 
40bdc 270             | 
40bdc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
40be0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
40be4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
40be8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
40bec 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
40bf0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
40bf4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
40bf8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
40bfc 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
40c00 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
40c04 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
40c08 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
40c0c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
40c10 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
40c14 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
40c18 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
40c1c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
40c20 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
40c24 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
40c28 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
40c2c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
40c30 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
40c34 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
40c38 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
40c3c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
40c40 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
40c44 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
40c48 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
40c4c 28c             | 
40c4c 28c             |                             ' fall through to read bursts
40c4c 28c             |                         
40c4c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
40c4c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
40c50 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
40c54 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
40c58 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
40c5c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
40c60 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
40c64 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
40c68 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
40c6c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
40c70 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
40c74 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
40c78 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
40c7c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
40c80 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
40c84 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
40c88 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
40c8c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
40c90 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
40c94 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
40c98 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
40c9c 2a0 E8 D1 03 F1 |                             add     clks, clks
40ca0 2a1             | readcommon
40ca0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
40ca4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
40ca8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
40cac 2a4             | 
40cac 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
40cb0 2a5 69 C8 63 FD |                             rev     cmdaddr
40cb4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
40cb8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
40cbc 2a8             | 
40cbc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
40cc0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
40cc4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
40cc4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
40cc8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
40ccc 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
40cd0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
40cd4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
40cd4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
40cd8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
40cdc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
40ce0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
40ce4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
40ce8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
40cec 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
40cec 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
40cf0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
40cf4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
40cf8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
40cfc 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
40d00 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
40d04 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
40d08 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
40d0c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
40d10 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
40d14 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
40d18 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
40d1c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
40d20 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
40d24 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
40d24 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
40d28 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
40d2c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
40d30 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
40d34 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
40d38 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
40d3c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
40d40 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
40d44 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
40d48 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
40d4c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
40d50 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
40d54 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
40d58 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
40d5c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
40d60 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
40d64 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
40d68 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
40d6c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
40d70 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
40d74 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
40d78 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
40d7c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
40d80 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
40d84 2da 10 03 90 FD |                             jmp     #writecommon
40d88 2db             | 
40d88 2db             | '..................................................................................................
40d88 2db             | ' Burst continuation testing
40d88 2db             | 
40d88 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
40d8c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
40d90 2dd             | continue_read_lut          
40d90 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
40d94 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
40d98 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
40d9c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
40da0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
40da4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
40da8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
40dac 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
40db0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
40db4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
40db8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
40dbc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
40dc0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
40dc4 2ea             | 
40dc4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
40dc8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
40dcc 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
40dd0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
40dd4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
40dd8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
40ddc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
40de0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
40de4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
40de8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
40dec 2f4 2A 1C 66 0D |             _ret_           push    #poller
40df0 2f5             | 
40df0 2f5             | 
40df0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
40df4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
40df4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
40df8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
40dfc 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
40e00 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
40e04 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
40e08 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
40e0c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
40e10 2fd 2D 00 64 FD |                             ret                             ' | continue processing
40e14 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
40e18 2ff             | '..................................................................................................
40e18 2ff             | ' Completion of requests
40e18 2ff             | 
40e18 2ff             | complete_rw_lut             
40e18 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
40e1c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
40e20 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
40e24 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
40e28 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
40e2c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
40e30 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
40e34 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
40e38 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
40e3c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
40e40 309 32 62 64 AD |             if_z            skipf   #%110001
40e44 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
40e48 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
40e4c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
40e50 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
40e54 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
40e58 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
40e5c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
40e60 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
40e64 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
40e68 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
40e6c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
40e70 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
40e74 316             |                                                             ' skipcase (a) gfx copy to/from hub
40e74 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
40e74 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
40e74 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
40e78 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
40e7c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
40e80 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
40e84 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
40e88 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
40e8c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
40e90 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
40e94 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
40e98 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
40e9c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
40ea0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
40ea4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
40ea8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
40eac 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
40eb0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
40eb4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
40eb8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
40ebc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
40ec0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
40ec4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
40ec8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
40ecc 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
40ed0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
40ed4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
40ed8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
40edc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
40ee0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
40ee4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
40ee8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
40eec 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
40ef0 335 DF B7 03 A6 |             if_z            mov     addr2, link
40ef4 336 34 FF 9F AD |             if_z            jmp     #checknext
40ef8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
40efc 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
40f00 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
40f04 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
40f08 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
40f0c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
40f10 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
40f14 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
40f18 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
40f1c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
40f20 341             | 
40f20 341             | '..................................................................................................
40f20 341             | ' PSRAM WRITES
40f20 341             |                                                             '  a b c d e f g h
40f20 341             | 
40f20 341             |                                                             '  B W L F B R L L (a) byte write(s)
40f20 341             |                                                             '  Y O O I U E O O (b) word write(s)
40f20 341             |                                                             '  T R N L R S C C (c) long write(s)
40f20 341             |                                                             '  E D G L S U K K (d) resumed fill
40f20 341             |                                                             '          T M E E (e) new burst write
40f20 341             |                                                             '            E D D (f) resumed burst
40f20 341             |                                                             '              F B (g) locked fill
40f20 341             |                                                             '              I U (h) locked burst write
40f20 341             |                                                             '              L R 
40f20 341             |                                                             '              L S 
40f20 341             |                                                             '                T 
40f20 341             | 
40f20 341             | w_single                   
40f20 341             | w_fill_cont           
40f20 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
40f24 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
40f28 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
40f2c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
40f30 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
40f34 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
40f38 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
40f3c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
40f40 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
40f44 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
40f48 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
40f4c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
40f50 34d             |                ' disable call to r_resume_burst for single longs when z=0
40f50 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
40f54 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
40f58 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
40f5c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
40f60 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
40f64 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
40f68 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
40f6c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
40f70 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
40f74 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
40f78 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
40f7c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
40f80 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
40f84 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
40f88 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
40f8c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
40f90 35d             |         
40f90 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
40f90 35d             |             '
40f90 35d             |             '  At least one of these 3 optional components will be sent
40f90 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
40f90 35d             |             '     body - N x full longs of data
40f90 35d             |             '     trailer - last partial long of data
40f90 35d             |             '
40f90 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
40f90 35d             |             '
40f90 35d             |             'Case    Type                           Sends
40f90 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
40f90 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
40f90 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
40f90 35d             |             ' 4)     Multiple long fill             body only
40f90 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
40f90 35d             | 
40f90 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
40f90 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
40f94 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
40f98 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
40f9c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
40fa0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
40fa4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
40fa8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
40fac 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
40fb0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
40fb4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
40fb8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
40fbc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
40fc0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
40fc4 36a             |                             
40fc4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
40fc8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
40fcc 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
40fd0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
40fd4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
40fd8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
40fdc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
40fe0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
40fe4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
40fe8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
40fec 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
40ff0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
40ff4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
40ff8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
40ffc 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
41000 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
41004 37a             | 
41004 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
41008 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
4100c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
41010 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
41014 37e             |                  
41014 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
41018 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
4101c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
41020 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
41024 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
41028 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
4102c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
41030 385             | 
41030 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
41034 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
41038 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
4103c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
41040 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
41044 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
41048 38b             | 
41048 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
41048 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
4104c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
41050 38d 2A B0 63 FD |                             push    addr1                   'save address
41054 38e             | 
41054 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
41054 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
41058 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
4105c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
41060 391             |             
41060 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
41064 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
41068 393 2B B0 63 FD |                             pop     addr1                   'restore address
4106c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
41070 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
41074 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
41078 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
4107c 398             | 
4107c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
41080 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
41084 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
41088 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
4108c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
41090 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
41094 39e             | 
41094 39e             |                             'trailer is done
41094 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
41098 39f             | 
41098 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
4109c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
410a0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
410a4 3a2             | 
410a4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
410a8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
410ac 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
410b0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
410b4 3a6             |                             
410b4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
410b8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
410bc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
410c0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
410c4 3aa             |                                                          
410c4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
410c8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
410cc 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
410d0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
410d4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
410d8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
410dc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
410e0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
410e4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
410e8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
410ec 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
410f0 3b5             |  
410f0 3b5 59 52 63 FD |                             drvh    cspin
410f4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
410f8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
410fc 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
41100 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
41104 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
41108 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
4110c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
41110 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
41114 3be EA E5 03 F6 |                             mov     d, orighubsize
41118 3bf EF E5 63 F0 |                             shl     d, a
4111c 3c0 F2 E3 83 F1 |                             sub     c, d
41120 3c1 DD E3 03 F1 |                             add     c, offset1
41124 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
41128 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
4112c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
41130 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
41134 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
41138 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
4113c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
41140 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
41144 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
41148 3cb BB D3 03 F6 |                             mov     resume, restorefill
4114c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
41150 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
41154 3ce 6C FC BF CD |             if_c            call    #yield
41158 3cf 2D 00 64 FD |                             ret
4115c 3d0             |                            
4115c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
4115c 3d0             |                       '     rczl    pa                      'rotate left into address offset
4115c 3d0             |                       '     rczl    c wcz                   'restore count and flags
4115c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
41160 3d1 02 EC 67 F0 |                             shl     pa, #2
41164 3d2 28 06 64 AD |             if_z            setq    #3
41168 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
4116c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
41170 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
41174 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
41178 3d7             | 
41178 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
4117c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
41180 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
41184 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
41188 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
4118c 3dc             |                 fit 1024-32
4118c 3dc             |         
4118c 3dc             | 
4118c 3dc             | '..................................................................................................
4118c 3dc             | 
4118c 3dc             |                 fit 1024-32
4118c 3dc 00 00 00 00 
41190 3dd 00 00 00 00 
41194 3de 00 00 00 00 
41198 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
4119c 3e0             |                 org 1024-32
4119c 000             | 
4119c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
4119c 000 00 00 00 00 |                 long $0000
411a0 001 11 11 00 00 |                 long $1111
411a4 002 22 22 00 00 |                 long $2222
411a8 003 33 33 00 00 |                 long $3333
411ac 004 44 44 00 00 |                 long $4444
411b0 005 55 55 00 00 |                 long $5555
411b4 006 66 66 00 00 |                 long $6666
411b8 007 77 77 00 00 |                 long $7777
411bc 008 88 88 00 00 |                 long $8888
411c0 009 99 99 00 00 |                 long $9999
411c4 00a AA AA 00 00 |                 long $aaaa
411c8 00b BB BB 00 00 |                 long $bbbb
411cc 00c CC CC 00 00 |                 long $cccc
411d0 00d DD DD 00 00 |                 long $dddd
411d4 00e EE EE 00 00 |                 long $eeee
411d8 00f FF FF 00 00 |                 long $ffff
411dc 010             | 
411dc 010             | 'masks
411dc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
411e0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
411e4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
411e8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
411ec 014             | 
411ec 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
411f0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
411f4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
411f8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
411fc 018             | 
411fc 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
41200 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
41204 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
41208 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
4120c 01c             | 
4120c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
41210 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
41214 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
41218 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
4121c 020             |         fit 1024
4121c 020             | 
4121c 020             |         fit 1024
4121c 020             | 
4121c 020             | '--------------------------------------------------------------------------------------------------
4121c 020             |         orgh
4121c                 | 
4121c                 | gfxexpansion
4121c                 |                             'simple line drawing graphics expansion of memory driver
4121c                 |                             'jmp     #donerepeats                'just return for now
4121c                 | 
4121c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
41220     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
41224     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
41228     DD E1 03 F6 |                             mov     b, offset1              'get error term
4122c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
41230     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
41234     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
41238     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
4123c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
41240     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
41244     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
41248     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
4124c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
41250     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
41254     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
41258     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
4125c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
41260     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
41264     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
41268     DC E5 33 F9 |                             getword d, total, #0            'get line width
4126c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
41270     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
41274     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
41278     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
4127c     C3 03 80 FD |                             jmp     #readmask               'continue filling
41280                 | 	alignl
41280                 | _usbnew_spin2_dat_
41280                 |                 org     $000
41280 000             | 
41280 000             | usb_host_start
41280 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
41284 001             | 
41284 001 03 00 00 FF 
41288 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
4128c 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
41290 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
41294 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
41298 006 29 72 63 FD |                 setq2   htmp
4129c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
412a0 008             | 
412a0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
412a4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
412a8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
412ac 00b             | 
412ac 00b             | '------------------------------------------------------------------------------
412ac 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
412ac 00b             | ' special because the receiving function must not respond with either STALL or
412ac 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
412ac 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
412ac 00b             | ' corrupt packet, it must ignore the transaction
412ac 00b             | '------------------------------------------------------------------------------
412ac 00b             | ' On entry:
412ac 00b             | '   PTRA - start address of the SETUP data struct.
412ac 00b             | ' On exit:
412ac 00b             | '   retval - PID_ACK on success, otherwise error code.
412ac 00b             | '------------------------------------------------------------------------------
412ac 00b             | txn_setup
412ac 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
412b0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
412b4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
412b8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
412bc 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
412c0 010             | .setup
412c0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
412c4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
412c8 012 2D 00 64 AD |         if_z    ret
412cc 013 7C 0B B0 FD |                 call    #retry_wait
412d0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
412d4 015 2D 00 64 AD |         if_z    ret
412d8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
412dc 017 E0 FF 9F FD |                 jmp     #.setup
412e0 018             | 
412e0 018             | '------------------------------------------------------------------------------
412e0 018             | ' IN/INTERRUPT transaction.
412e0 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
412e0 018             | '------------------------------------------------------------------------------
412e0 018             | ' On entry:
412e0 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
412e0 018             | '     CRC(b19..23).
412e0 018             | ' On exit:
412e0 018             | '------------------------------------------------------------------------------
412e0 018             | txn_in
412e0 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
412e4 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
412e8 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
412ec 01b             | 
412ec 01b             |                 ' Fall through to urx_packet
412ec 01b             | 
412ec 01b             | '------------------------------------------------------------------------------
412ec 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
412ec 01b             | ' received are handshakes and IN DATAx.
412ec 01b             | '------------------------------------------------------------------------------
412ec 01b             | ' On entry:
412ec 01b             | ' On exit:
412ec 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
412ec 01b             | '     returned.
412ec 01b             | '------------------------------------------------------------------------------
412ec 01b             | urx_packet
412ec 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
412f0 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
412f4 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
412f8 01e 1A 94 63 FD |                 getct   hct2
412fc 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
41300 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
41304 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
41308 022             | .wait_sop
41308 022 22 A7 8A FA |                 rdpin   urx, dm
4130c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
41310 024 08 00 90 CD |         if_c    jmp     #.get_pid
41314 025 FC 25 CC FB |                 jnct2   #.wait_sop
41318 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
4131c 027             | .get_pid
4131c 027 28 02 B0 FD |                 call    #urx_next
41320 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
41324 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
41328 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
4132c 02b             | .chk_pid
4132c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41330 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
41334 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
41338 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
4133c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
41340 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
41344 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
41348 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
4134c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
41350 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
41354 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
41358 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
4135c 037             | .ack_resend
4135c 037 22 A7 82 FA |                 rqpin   urx, dm
41360 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
41364 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
41368 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
4136c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
41370 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
41374 03d             | .chk_eop
41374 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41378 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
4137c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
41380 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
41384 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
41388 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
4138c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
41390 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
41394 045 2D 00 64 FD |                 ret
41398 046             | .idle
41398 046 22 A7 82 FA |                 rqpin   urx, dm
4139c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
413a0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
413a4 049 2D 00 64 FD |                 ret
413a8 04a             | 
413a8 04a             | '------------------------------------------------------------------------------
413a8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
413a8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
413a8 04a             | ' if one is required.
413a8 04a             | '------------------------------------------------------------------------------
413a8 04a             | ' On entry:
413a8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
413a8 04a             | ' On exit:
413a8 04a             | '------------------------------------------------------------------------------
413a8 04a             | utx_token
413a8 04a 22 A7 82 FA |                 rqpin   urx, dm
413ac 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
413b0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
413b4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
413b8 04e 34 0D B0 CD |         if_c    call    #utx_pre
413bc 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
413c0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
413c4 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
413c8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
413cc 053             | .next_byte
413cc 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
413d0 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
413d4 055             | .wait
413d4 055 40 46 72 FD |                 testp   dp                      wc
413d8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
413dc 057 23 03 08 FC |                 akpin   dp
413e0 058 22 A5 22 FC |                 wypin   utx, dm
413e4 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
413e8 05a             | 
413e8 05a             | '------------------------------------------------------------------------------
413e8 05a             | ' SETUP/OUT/INTERRUPT transaction.
413e8 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
413e8 05a             | '------------------------------------------------------------------------------
413e8 05a             | ' On entry:
413e8 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
413e8 05a             | '     CRC(b19..23).
413e8 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
413e8 05a             | '   pkt_data - count of DATAx payload bytes to send.
413e8 05a             | ' On exit:
413e8 05a             | '------------------------------------------------------------------------------
413e8 05a             | txn_out
413e8 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
413ec 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
413f0 05c 00 00 C0 FF 
413f4 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
413f8 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
413fc 05f             | 
413fc 05f             |                 ' Fall through to utx_data
413fc 05f             | 
413fc 05f             | '------------------------------------------------------------------------------
413fc 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
413fc 05f             | ' calculated while the data byte is being shifted out. Since data stage
413fc 05f             | ' success/fail is not determined until the status stage of the transaction,
413fc 05f             | ' this routine is only concerned about the current DATAx packet.
413fc 05f             | '------------------------------------------------------------------------------
413fc 05f             | ' On entry:
413fc 05f             | '   PTRA - hub start address of the data to read.
413fc 05f             | '   pkt_cnt - data payload size.
413fc 05f             | ' On exit:
413fc 05f             | '------------------------------------------------------------------------------
413fc 05f             | utx_data
413fc 05f 22 A7 82 FA |                 rqpin   urx, dm
41400 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
41404 061 F4 FF 9F CD |         if_c    jmp     #utx_data
41408 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
4140c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
41410 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
41414 065 D8 0C B0 CD |         if_c    call    #utx_pre
41418 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
4141c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
41420 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
41424 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
41428 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
4142c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
41430 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
41434 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
41438 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
4143c 06f             | .read_byte
4143c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
41440 070 F0 00 B0 FD |                 call    #utx_byte
41444 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
41448 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
4144c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
41450 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
41454 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
41458 076             | .send_crc
41458 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
4145c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
41460 078 D0 00 B0 FD |                 call    #utx_byte
41464 079 5D A5 EA F8 |                 getbyte utx, crc, #1
41468 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
4146c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
41470 07c             | 
41470 07c             | '------------------------------------------------------------------------------
41470 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
41470 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
41470 07c             | ' expects that the packet includes at least the CRC word.
41470 07c             | '
41470 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
41470 07c             | ' was requested, which makes it difficult to determine where the data stops
41470 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
41470 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
41470 07c             | ' USB-16 expected residual value of 0xB001.
41470 07c             | '
41470 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
41470 07c             | ' so the caller can verify IN success before writing the data to its final
41470 07c             | ' destination.
41470 07c             | '------------------------------------------------------------------------------
41470 07c             | ' On entry:
41470 07c             | '   pkt_data - max byte count expected to be in the packet.
41470 07c             | '   newb_flg - signals new byte ready when toggled.
41470 07c             | ' On exit:
41470 07c             | '   pkt_cnt - actual number of bytes read.
41470 07c             | '------------------------------------------------------------------------------
41470 07c             | urx_data
41470 07c F7 77 03 F6 |                 mov     htmp2, pb
41474 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
41478 07e 00 00 C0 FF 
4147c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
41480 080 BB EF 03 F6 |                 mov     pb, htmp2
41484 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
41488 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
4148c 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
41490 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
41494 085             | .wait_byte
41494 085             | ' In-line rx for max speed
41494 085 22 A7 82 FA |                 rqpin   urx, dm
41498 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
4149c 087 53 A5 02 F5 |                 and     utx, urx
414a0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
414a4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
414a8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
414ac 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
414b0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
414b4 08d DC FF 9F FD |                 jmp     #.wait_byte
414b8 08e             | .get_byte
414b8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
414bc 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
414c0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
414c4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
414c8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
414cc 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
414d0 094             | .end_crc
414d0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
414d4 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
414d8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
414dc 097 2D 00 64 1D |         if_a    ret
414e0 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
414e0 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
414e0 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
414e0 098             | ' to miss it, so cheat a bit and look for SOP clear here.
414e0 098 22 A7 82 FA |                 rqpin   urx, dm
414e4 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
414e8 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
414ec 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
414ec 09b             | .chk_crc
414ec 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
414f0 09c 58 00 00 FF 
414f4 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
414f8 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
414fc 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
41500 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
41504 0a1 34 09 B0 FD |                 call    #poll_waitx
41508 0a2             | 
41508 0a2             |                 ' Fall through to utx_handshake
41508 0a2             | 
41508 0a2             | '------------------------------------------------------------------------------
41508 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
41508 0a2             | ' the appropriate IP delay has been inserted.
41508 0a2             | '------------------------------------------------------------------------------
41508 0a2             | ' On entry:
41508 0a2             | '   retval - handshake PID to send.
41508 0a2             | ' On exit:
41508 0a2             | '   retval unchanged.
41508 0a2             | '------------------------------------------------------------------------------
41508 0a2             | utx_handshake
41508 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
4150c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
41510 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
41514 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
41518 0a6 5F A5 02 F6 |                 mov     utx, retval
4151c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
41520 0a8             | .idle
41520 0a8 22 A7 82 FA |                 rqpin   urx, dm
41524 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
41528 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
4152c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
41530 0ac 08 09 90 FD |                 jmp     #poll_waitx
41534 0ad             | 
41534 0ad             | '------------------------------------------------------------------------------
41534 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
41534 0ad             | '------------------------------------------------------------------------------
41534 0ad             | ' On entry:
41534 0ad             | '   utx - byte to transmit.
41534 0ad             | ' On exit:
41534 0ad             | '------------------------------------------------------------------------------
41534 0ad             | utx_byte
41534 0ad 40 46 72 FD |                 testp   dp                      wc
41538 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
4153c 0af 23 03 08 FC |                 akpin   dp
41540 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
41544 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
41548 0b2             | 
41548 0b2             | '------------------------------------------------------------------------------
41548 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
41548 0b2             | '------------------------------------------------------------------------------
41548 0b2             | ' On entry:
41548 0b2             | ' On exit:
41548 0b2             | '   retval - the byte read.
41548 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
41548 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
41548 0b2             | '     received.
41548 0b2             | '------------------------------------------------------------------------------
41548 0b2             | urx_next
41548 0b2 22 A7 8A FA |                 rdpin   urx, dm
4154c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
41550 0b4 53 A5 02 F5 |                 and     utx, urx
41554 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
41558 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
4155c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
41560 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
41564 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
41568 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
4156c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
41570 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
41574 0bd 2D 00 64 FD |                 ret
41578 0be             | 
41578 0be             | '------------------------------------------------------------------------------
41578 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
41578 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
41578 0be             | ' length, and the PID is not included in the CRC calculation:
41578 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
41578 0be             | '  CRC5  ENDP ADDRESS PID
41578 0be             | ' %00000_1111_1111111_xxxxxxxx
41578 0be             | '------------------------------------------------------------------------------
41578 0be             | ' On entry:
41578 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
41578 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
41578 0be             | ' On exit:
41578 0be             | '   ep_addr_pid - CRC value appended to the packet.
41578 0be             | '------------------------------------------------------------------------------
41578 0be             | calc_crc5
41578 0be FF 03 00 FF 
4157c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
41580 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
41584 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
41588 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
4158c 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
41590 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
41594 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
41598 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
4159c 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
415a0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
415a4 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
415a8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
415ac 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
415b0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
415b4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
415b8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
415bc 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
415c0 0d0             | 
415c0 0d0             | '------------------------------------------------------------------------------
415c0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
415c0 0d0             | '------------------------------------------------------------------------------
415c0 0d0             | isr1_fsframe
415c0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
415c4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
415c8 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
415cc 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
415d0 0d4             | .wait
415d0 0d4 40 46 72 FD |                 testp   dp                      wc
415d4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
415d8 0d6 23 03 08 FC |                 akpin   dp
415dc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
415e0 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
415e4 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
415e8 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
415ec 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
415f0 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
415f4 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
415f8 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
415fc 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
41600 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
41604 0e1 2C FF BF FD |                 call    #utx_byte
41608 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
4160c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
41610 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
41614 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
41618 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
4161c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
41620 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
41624 0e9 5B A5 42 F5 |                 or      utx, icrc
41628 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
4162c 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
41630 0ec 20 00 90 FD |                 jmp     #isr1_wait
41634 0ed             | isr1_lsframe
41634 0ed 1A 92 62 FD |                 getct   iframe_ct_base
41638 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
4163c 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
41640 0f0             | .wait
41640 0f0 40 46 72 FD |                 testp   dp                      wc
41644 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
41648 0f2 23 03 08 FC |                 akpin   dp
4164c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
41650 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
41654 0f5             | isr1_wait
41654 0f5 22 A5 82 FA |                 rqpin   utx, dm
41658 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
4165c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
41660 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
41664 0f9 03 00 00 FF 
41668 0fa FF B3 06 F5 |                 and     frame, ##$7ff
4166c 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
41670 0fc F5 FF 3B FB |                 reti1
41674 0fd             | 
41674 0fd             | '------------------------------------------------------------------------------
41674 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
41674 0fd             | ' transaction will complete before the next frame is triggered.
41674 0fd             | '------------------------------------------------------------------------------
41674 0fd             | ' On entry:
41674 0fd             | ' On exit:
41674 0fd             | '------------------------------------------------------------------------------
41674 0fd             | wait_txn_ok
41674 0fd 1A 76 63 FD |                 getct   htmp2
41678 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
4167c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41680 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
41684 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
41688 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
4168c 103 2D 00 64 FD |                 ret
41690 104             | 
41690 104             | '------------------------------------------------------------------------------
41690 104             | ' A device connection was detected, or a bus reset was requested by the USB
41690 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
41690 104             | ' and perform a reset sequence prior to device enumeration.
41690 104             | '------------------------------------------------------------------------------
41690 104             | dev_reset
41690 104 22 A7 82 FA |                 rqpin   urx, dm
41694 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
41698 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
4169c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
416a0 108             | reset
416a0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
416a4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
416a8 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
416ac 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
416b0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
416b4 10d 1A 92 62 FD |                 getct   iframe_ct_base
416b8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
416bc 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
416c0 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
416c4 111 24 72 07 F1 |                 add     htmp, #36
416c8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
416cc 113             | .framewait
416cc 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
416d0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
416d4 115 2D 00 64 FD |                 ret
416d8 116             | 
416d8 116             | '------------------------------------------------------------------------------
416d8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
416d8 116             | '------------------------------------------------------------------------------
416d8 116             | ' On entry:
416d8 116             | '   PTRA - source address.
416d8 116             | '   PB - destination address.
416d8 116             | '   hr0 - length of copy, in bytes.
416d8 116             | ' On exit:
416d8 116             | '------------------------------------------------------------------------------
416d8 116             | hmemcpy
416d8 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
416dc 117 F7 73 43 FC |                 wrbyte  htmp, pb
416e0 118 01 EE 07 F1 |                 add     pb, #1
416e4 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
416e8 11a             | 
416e8 11a             | '------------------------------------------------------------------------------
416e8 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
416e8 11a             | ' loop until the errant device is disconnected.
416e8 11a             | '------------------------------------------------------------------------------
416e8 11a             | ' On entry:
416e8 11a             | ' On exit:
416e8 11a             | '------------------------------------------------------------------------------
416e8 11a             | host_error
416e8 11a             |           if ERROR_LED >= 0
416e8 11a             |           end
416e8 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
416ec 11b             | 
416ec 11b             | '------------------------------------------------------------------------------
416ec 11b             | ' Get HID descriptor buffer for current port
416ec 11b             | '------------------------------------------------------------------------------
416ec 11b             | ' On entry:
416ec 11b             | ' On exit:
416ec 11b             | '   PB - HID descriptor buffer pointer
416ec 11b             | '------------------------------------------------------------------------------
416ec 11b             | get_hid_descr_buffer
416ec 11b 2D EF 03 F6 |                 mov     pb, hdev_port
416f0 11c 01 EE E7 F2 |                 cmpsub  pb, #1
416f4 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
416f8 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
416fc 11f             | 
416fc 11f             | 
416fc 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
41700 120             | 
41700 120             | ' USB commands and error codes
41700 120 00 00 00 00 | cmd_data        long    0
41704 121 00 00 00 00 | usb_err_code    long    ERR_NONE
41708 122             | 
41708 122             | ' Parameters block assigned at cog startup
41708 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
4170c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
41710 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
41714 125             | if ACTIVITY_LED >= 0
41714 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
41714 125             | end
41714 125             | if ERROR_LED >= 0
41714 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
41714 125             | end
41714 125 00 00 00 00 | hid_descr_p     long    0
41718 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
41718 126             | 'hkbd_report_p   long    0
41718 126 00 00 00 00 | hub_descr_p     long    0
4171c 127 00 00 00 00 | urx_buff_p      long    0
41720 128 00 00 00 00 | dev_desc_buff_p long    0
41724 129 00 00 00 00 | con_desc_buff_p long    0
41728 12a 00 00 00 00 | cache_start_p   long    0
4172c 12b 00 00 00 00 | cache_end_p     long    0
41730 12c             | if EMUPAD_MAX_PLAYER > 0
41730 12c             | emupad_out_ptr  long    0
41730 12c             | end
41730 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
41734 12d             | 
41734 12d             | hdev_init_start
41734 12d             | hdev_port       res     1
41734 12d             | hdev_port       res     1
41734 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
41734 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
41734 12d             | kbm_next_datax  res     1
41734 12d             | kbm_next_datax  res     1
41734 12d             | hub_intf_num    res     1
41734 12d             | hub_intf_num    res     1
41734 12d             | hub_next_datax  res     1
41734 12d             | hub_next_datax  res     1
41734 12d             | hub_status_chg  res     1
41734 12d             | hub_status_chg  res     1
41734 12d             | hub_port_status res     1
41734 12d             | hub_port_status res     1
41734 12d             | if HAVE_MOUSE
41734 12d             | ms_intf_num     res     1
41734 12d             | ms_intf_num     res     1
41734 12d             | ms_in_max_pkt   res     1
41734 12d             | ms_in_max_pkt   res     1
41734 12d             | end
41734 12d             | kb_intf_num     res     1
41734 12d             | kb_intf_num     res     1
41734 12d             | kb_interval     res     1
41734 12d             | kb_interval     res     1
41734 12d             | kb_in_max_pkt   res     1
41734 12d             | kb_in_max_pkt   res     1
41734 12d             | kb_max_index    res     1
41734 12d             | kb_max_index    res     1
41734 12d             | kb_led_states   res     1
41734 12d             | kb_led_states   res     1
41734 12d             | gp_intf_num     res     1
41734 12d             | gp_intf_num     res     1
41734 12d             | gp_interval     res     1
41734 12d             | gp_interval     res     1
41734 12d             | gp_max_index    res     1
41734 12d             | gp_max_index    res     1
41734 12d             | gp_descr_len    res     1+MAX_DEVICES
41734 12d             | gp_descr_len    res     1+MAX_DEVICES
41734 12d             | hdev_init_end
41734 12d             | 
41734 12d             | ' Initialized at cog startup:
41734 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
41734 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
41734 12d             | iframe_ct_new   res     1
41734 12d             | iframe_ct_new   res     1
41734 12d             | iframe_ct_base  res     1
41734 12d             | iframe_ct_base  res     1
41734 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
41734 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
41734 12d             | 
41734 12d             | ' This register block is reset to zero when a USB device connects
41734 12d             | hreg_init_start
41734 12d             | hstatus         res     1         ' Host status flags
41734 12d             | hstatus         res     1         ' Host status flags
41734 12d             | hctwait         res     1         ' Poll-based wait clocks
41734 12d             | hctwait         res     1         ' Poll-based wait clocks
41734 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
41734 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
41734 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
41734 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
41734 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
41734 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
41734 12d             | xfer_retry      res     1         ' Control transfer retry count
41734 12d             | xfer_retry      res     1         ' Control transfer retry count
41734 12d             | retry           res     1         ' Transaction retry count
41734 12d             | retry           res     1         ' Transaction retry count
41734 12d             | utx             res     1         ' Byte to transmit on USB
41734 12d             | utx             res     1         ' Byte to transmit on USB
41734 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
41734 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
41734 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
41734 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
41734 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
41734 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
41734 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
41734 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
41734 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
41734 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
41734 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
41734 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
41734 12d             | frame           res     1         ' USB 1ms frame counter value
41734 12d             | frame           res     1         ' USB 1ms frame counter value
41734 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
41734 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
41734 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
41734 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
41734 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
41734 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
41734 12d             | crc             res     1         ' Used for CRC16 calculation
41734 12d             | crc             res     1         ' Used for CRC16 calculation
41734 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
41734 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
41734 12d             | retval          res     1         ' Global success/fail return parameter
41734 12d             | retval          res     1         ' Global success/fail return parameter
41734 12d             | context_retval  res     1         ' Operation contextual return parameter
41734 12d             | context_retval  res     1         ' Operation contextual return parameter
41734 12d             | ' Device stuff
41734 12d             | hdev_id         res     1+MAX_DEVICES
41734 12d             | hdev_id         res     1+MAX_DEVICES
41734 12d             | hdev_bcd        res     1
41734 12d             | hdev_bcd        res     1
41734 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
41734 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
41734 12d             | ' Keyboard/mouse stuff
41734 12d             | hctrl_ep_addr   res     1
41734 12d             | hctrl_ep_addr   res     1
41734 12d             | hctrl_max_pkt   res     1
41734 12d             | hctrl_max_pkt   res     1
41734 12d             | hconfig_base    res     1
41734 12d             | hconfig_base    res     1
41734 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
41734 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
41734 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
41734 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
41734 12d             | hdev_class      res     1
41734 12d             | hdev_class      res     1
41734 12d             | hdev_subclass   res     1
41734 12d             | hdev_subclass   res     1
41734 12d             | hdev_protocol   res     1
41734 12d             | hdev_protocol   res     1
41734 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
41734 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
41734 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
41734 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
41734 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
41734 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
41734 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
41734 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
41734 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
41734 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
41734 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
41734 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
41734 12d             | if HAVE_MOUSE
41734 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
41734 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
41734 12d             | end
41734 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
41734 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
41734 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
41734 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
41734 12d             | hdev_ep_addr    res     1+MAX_DEVICES
41734 12d             | hdev_ep_addr    res     1+MAX_DEVICES
41734 12d             | hdev_out_addr   res     1
41734 12d             | hdev_out_addr   res     1
41734 12d             | 
41734 12d             | if EMUPAD_MAX_PLAYER > 0
41734 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
41734 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
41734 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
41734 12d             | end
41734 12d             | 
41734 12d             | hreg_init_end
41734 12d             | 
41734 12d             | hidr_start
41734 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
41734 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
41734 12d             | hidr_flags      res     1
41734 12d             | hidr_flags      res     1
41734 12d             | hidr_axis       res     4
41734 12d             | hidr_axis       res     4
41734 12d             | hidr_buttons    res     1
41734 12d             | hidr_buttons    res     1
41734 12d             | hidr_hats       res     1
41734 12d             | hidr_hats       res     1
41734 12d             | '' Above are actually useful values, 6 longs
41734 12d             | hidr_type       res     1
41734 12d             | hidr_type       res     1
41734 12d             | hidr_id         res     1
41734 12d             | hidr_id         res     1
41734 12d             | hidr_offset     res     1
41734 12d             | hidr_offset     res     1
41734 12d             | hidr_usage_idx  res     1
41734 12d             | hidr_usage_idx  res     1
41734 12d             | ' below need to be push/pop'd
41734 12d             | hidr_state      res     1
41734 12d             | hidr_state      res     1
41734 12d             | hidr_size       res     1
41734 12d             | hidr_size       res     1
41734 12d             | hidr_count      res     1
41734 12d             | hidr_count      res     1
41734 12d             | hidr_lminmax    res     1
41734 12d             | hidr_lminmax    res     1
41734 12d             | hidr_pminmax    res     1
41734 12d             | hidr_pminmax    res     1
41734 12d             | hidr_end
41734 12d             | 
41734 12d             | ' Variables dependent on the system freqency
41734 12d             | _var_64_lower_  res     1
41734 12d             | _var_64_lower_  res     1
41734 12d             | _var_64_upper_  res     1
41734 12d             | _var_64_upper_  res     1
41734 12d             | _12Mbps_        res     1
41734 12d             | _12Mbps_        res     1
41734 12d             | _1_5Mbps_       res     1
41734 12d             | _1_5Mbps_       res     1
41734 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
41734 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
41734 12d             | _1us_           res     1         ' 1us
41734 12d             | _1us_           res     1         ' 1us
41734 12d             | _10us_          res     1         ' 10us
41734 12d             | _10us_          res     1         ' 10us
41734 12d             | _33us_          res     1         ' 33us
41734 12d             | _33us_          res     1         ' 33us
41734 12d             | _txn_err_       res     1         ' 250us
41734 12d             | _txn_err_       res     1         ' 250us
41734 12d             | _500us_         res     1         ' 500us
41734 12d             | _500us_         res     1         ' 500us
41734 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
41734 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
41734 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
41734 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
41734 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
41734 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
41734 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
41734 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
41734 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
41734 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
41734 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
41734 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
41734 12d             | _preamble_wait_ res     1
41734 12d             | _preamble_wait_ res     1
41734 12d             | _1ms_           res     1         ' 1ms
41734 12d             | _1ms_           res     1         ' 1ms
41734 12d             | _2ms_           res     1         ' 2ms
41734 12d             | _2ms_           res     1         ' 2ms
41734 12d             | _suspend_wait_  res     1         ' 3ms
41734 12d             | _suspend_wait_  res     1         ' 3ms
41734 12d             | _4ms_           res     1         ' 4ms
41734 12d             | _4ms_           res     1         ' 4ms
41734 12d             | _xfer_wait_     res     1         ' 5ms
41734 12d             | _xfer_wait_     res     1         ' 5ms
41734 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
41734 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
41734 12d             | _reset_hold_    res     1         ' 15ms
41734 12d             | _reset_hold_    res     1         ' 15ms
41734 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
41734 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
41734 12d             | _21ms_          res     1         ' 21ms
41734 12d             | _21ms_          res     1         ' 21ms
41734 12d             | _100ms_         res     1         ' 100ms
41734 12d             | _100ms_         res     1         ' 100ms
41734 12d             | _500ms_         res     1         ' 500ms
41734 12d             | _500ms_         res     1         ' 500ms
41734 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
41734 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
41734 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
41734 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
41734 12d             | '------------------------------------------------------------------------------
41734 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
41734 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
41734 12d             | _usb_d_ls_nco_  res     1
41734 12d             | _usb_d_ls_nco_  res     1
41734 12d             | _usb_h_fs_nco_  res     1
41734 12d             | _usb_h_fs_nco_  res     1
41734 12d             | _usb_d_fs_nco_  res     1
41734 12d             | _usb_d_fs_nco_  res     1
41734 12d             | '------------------------------------------------------------------------------
41734 12d             | ' Scratch registers
41734 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
41734 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
41734 12d             | htmp1           res     1
41734 12d             | htmp1           res     1
41734 12d             | htmp2           res     1
41734 12d             | htmp2           res     1
41734 12d             | htmp3           res     1
41734 12d             | htmp3           res     1
41734 12d             | hrep            res     1         ' Repeat count
41734 12d             | hrep            res     1         ' Repeat count
41734 12d             | hsave0          res     1         ' Subroutine parameter saves
41734 12d             | hsave0          res     1         ' Subroutine parameter saves
41734 12d             | hsave1          res     1
41734 12d             | hsave1          res     1
41734 12d             | hsave2          res     1
41734 12d             | hsave2          res     1
41734 12d             | isrtmp1         res     1
41734 12d             | isrtmp1         res     1
41734 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
41734 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
41734 12d             | hr0             res     1         ' Multi-purpose registers
41734 12d             | hr0             res     1         ' Multi-purpose registers
41734 12d             | hr1             res     1
41734 12d             | hr1             res     1
41734 12d             | hr2             res     1
41734 12d             | hr2             res     1
41734 12d             | hr3             res     1
41734 12d             | hr3             res     1
41734 12d             | hpar1           res     1         ' Routine entry/exit parameters
41734 12d             | hpar1           res     1         ' Routine entry/exit parameters
41734 12d             | hpar2           res     1
41734 12d             | hpar2           res     1
41734 12d             | hpar3           res     1
41734 12d             | hpar3           res     1
41734 12d             | hct2            res     1         ' Function response bus turn-around timer
41734 12d             | hct2            res     1         ' Function response bus turn-around timer
41734 12d             | hct3            res     1         ' Keyboard/mouse poll timer
41734 12d             | hct3            res     1         ' Keyboard/mouse poll timer
41734 12d             | mod_cnt         res     1         ' Used in idle loops
41734 12d             | mod_cnt         res     1         ' Used in idle loops
41734 12d             |                 fit     $1F0
41734 12d             |                 org     $200
41734 200             | hlut_start
41734 200             | 
41734 200             | '------------------------------------------------------------------------------
41734 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
41734 200             | ' settings to startup defaults.
41734 200             | '------------------------------------------------------------------------------
41734 200             | ' On entry:
41734 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
41734 200             | '------------------------------------------------------------------------------
41734 200             | set_speed_full
41734 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
41738 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
4173c 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
41740 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
41744 204             | '                ret                             wcz     ' Restore caller flags on exit
41744 204             | 
41744 204             | '------------------------------------------------------------------------------
41744 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
41744 204             | ' is a downstream hub connected (not yet implemented), the baud generator
41744 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
41744 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
41744 204             | ' putting the smart pins into reset.
41744 204             | '------------------------------------------------------------------------------
41744 204             | ' On entry:
41744 204             | ' On exit: CZ flags restored to caller states
41744 204             | '------------------------------------------------------------------------------
41744 204             | set_speed_low
41744 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
41748 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
4174c 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
41750 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
41754 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
41758 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
4175c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
41760 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
41764 20c             | 
41764 20c             | '------------------------------------------------------------------------------
41764 20c             | ' Perform configuration stuff required when a device intitially connects.
41764 20c             | '------------------------------------------------------------------------------
41764 20c             | ' On entry:
41764 20c             | ' On exit:
41764 20c             | '------------------------------------------------------------------------------
41764 20c             | on_connect
41764 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
41768 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
4176c 20e             | .retry
4176c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41770 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
41774 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
41778 211 00 08 00 FF 
4177c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
41780 213 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
41784 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
41788 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
4178c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
41790 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
41794 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41798 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
4179c 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
417a0 21b 4C 03 B0 FD |                 call    #poll_waitx
417a4 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
417a8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
417ac 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
417b0 21f B8 FF 9F FD |                 jmp     #.retry
417b4 220             | .get_dev_desc
417b4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
417b8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
417bc 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
417c0 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
417c4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
417c8 225 88 FB BF FD |                 call    #reset
417cc 226 40 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
417d0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
417d4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
417d8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
417dc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
417e0 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
417e4 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
417e8 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
417ec 22e 04 00 00 FF 
417f0 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
417f4 230 34 FA BF FD |                 call    #calc_crc5
417f8 231 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
417fc 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
41800 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
41804 234 F7 AD C2 FA |                 rdbyte  total_data, pb
41808 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
4180c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
41810 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41814 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
41818 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
4181c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
41820 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
41824 23c A0 99 02 F6 |                 mov     hctwait, _500us_
41828 23d C4 02 B0 FD |                 call    #poll_waitx
4182c 23e 30 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
41830 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
41834 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
41838 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
4183c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
41840 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41844 244 2D 00 64 5D |         if_nz   ret
41848 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
4184c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41850 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
41854 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41858 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
4185c 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41860 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
41864 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
41868 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
4186c 24e 2C FB 9F CD |         if_b    jmp     #host_error
41870 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
41874 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
41878 251 2D EC 63 FD |                 call    pa
4187c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
41880 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
41884 254 2C EC 63 FD |                 jmp     pa
41888 255             | 
41888 255             | '------------------------------------------------------------------------------
41888 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
41888 255             | ' Status reporting is always in the function-to-host direction.
41888 255             | '------------------------------------------------------------------------------
41888 255             | ' On entry:
41888 255             | '   PTRA - start address of the SETUP data in hub.
41888 255             | '   PB - start address of the buffer/struct to be written to during the IN data
41888 255             | '     stage.
41888 255             | '   ep_addr_pid - device address, endpoint and CRC5.
41888 255             | ' On exit:
41888 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
41888 255             | '     contains the count of data stage bytes actually received, which must
41888 255             | '     always be <= the count requested.
41888 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
41888 255             | '     more specific USB operation error code.
41888 255             | '------------------------------------------------------------------------------
41888 255             | control_read
41888 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
4188c 256 F8 91 03 F6 |                 mov     hpar2, ptra
41890 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
41894 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
41898 259             | .xfer_start
41898 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
4189c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
418a0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
418a4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
418a8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
418ac 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
418b0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
418b4 260 61 00 00 FF 
418b8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
418bc 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
418c0 263             | .data
418c0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
418c4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
418c8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
418cc 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
418d0 267             | .nak_retry
418d0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
418d4 268             | .in_retry
418d4 268 BC F6 BF FD |                 call    #txn_in
418d8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
418dc 26a 28 00 90 AD |         if_z    jmp     #.commit
418e0 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
418e4 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
418e8 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
418ec 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
418f0 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
418f4 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
418f8 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
418fc 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
41900 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
41904 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
41908 275             | .commit
41908 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
4190c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
41910 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
41914 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
41918 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
4191c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
41920 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
41924 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
41928 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
4192c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
41930 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
41934 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
41938 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
4193c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
41940 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
41944 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
41948 285             | .pre_status
41948 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
4194c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
41950 287 00 B0 06 F6 |                 mov     pkt_data, #0
41954 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
41958 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
4195c 28a 61 00 00 FF 
41960 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
41964 28c             | .out_retry
41964 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
41968 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4196c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
41970 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
41974 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
41978 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
4197c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
41980 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
41984 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
41988 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
4198c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
41990 297             | ' I've encountered transfer STALL, even though the data looks correct, and
41990 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
41990 297             | ' ControlRead() transfer gets things unstuck most of the time...
41990 297             | .xfer_retry
41990 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
41994 298 58 01 B0 FD |                 call    #poll_waitx
41998 299 8C F9 BF FD |                 call    #wait_txn_ok
4199c 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
419a0 29b C8 F1 03 F6 |                 mov     ptra, hpar2
419a4 29c C9 EF 03 F6 |                 mov     pb, hpar3
419a8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
419ac 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
419b0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
419b4 2a0             | 
419b4 2a0             | '------------------------------------------------------------------------------
419b4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
419b4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
419b4 2a0             | ' the SETUP data struct is filled with the required values.
419b4 2a0             | '------------------------------------------------------------------------------
419b4 2a0             | ' On entry:
419b4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
419b4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
419b4 2a0             | '     stage.
419b4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
419b4 2a0             | ' On exit:
419b4 2a0             | '   retval - used to convey the success/failure of each stage.
419b4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
419b4 2a0             | '     more specific USB operation error code.
419b4 2a0             | '------------------------------------------------------------------------------
419b4 2a0             | control_write
419b4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
419b8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
419bc 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
419c0 2a3             | 
419c0 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
419c4 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
419c8 2a5 F7 93 03 F6 |                 mov     hpar3, pb
419cc 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
419d0 2a7             | .xfer_start
419d0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
419d4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
419d8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
419dc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
419e0 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
419e4 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
419e8 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
419ec 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
419f0 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
419f4 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
419f8 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
419fc 2b2             | .data
419fc 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
41a00 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
41a04 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
41a08 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
41a0c 2b6             | .out_retry
41a0c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
41a10 2b7 88 F6 BF FD |                 call    #txn_out
41a14 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41a18 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
41a1c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
41a20 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
41a24 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
41a28 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
41a2c 2be             | .commit
41a2c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
41a30 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
41a34 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
41a38 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
41a3c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
41a40 2c3             | pre_status_in
41a40 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
41a44 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
41a48 2c5             | .status_retry
41a48 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
41a4c 2c6 44 F5 BF FD |                 call    #txn_in
41a50 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
41a54 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
41a58 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
41a5c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
41a60 2cb 2D 00 64 AD |         if_z    ret
41a64 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
41a68 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
41a6c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
41a70 2cf             | '               ret                                     ' Caller must handle transfer retirement
41a70 2cf             | 
41a70 2cf             | '------------------------------------------------------------------------------
41a70 2cf             | ' Execute an IN interrupt transaction.
41a70 2cf             | '------------------------------------------------------------------------------
41a70 2cf             | ' On entry:
41a70 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
41a70 2cf             | '   hpar2 - Address of the IN data buffer
41a70 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
41a70 2cf             | ' On exit:
41a70 2cf             | '   retval - the result of the operation.
41a70 2cf             | '   hpar3 - the count of IN data bytes actually received.
41a70 2cf             | '------------------------------------------------------------------------------
41a70 2cf             | do_int_in
41a70 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
41a74 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
41a78 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
41a7c 2d2             | 
41a7c 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
41a80 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
41a84 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
41a88 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
41a8c 2d6             | .retry
41a8c 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
41a90 2d7 00 F5 BF FD |                 call    #txn_in
41a94 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
41a98 2d9 1C 00 90 AD |         if_z    jmp     #.commit
41a9c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
41aa0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
41aa4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
41aa8 2dd 54 00 B0 FD |                 call    #retry_wait
41aac 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
41ab0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
41ab4 2e0 D4 FF 9F FD |                 jmp     #.retry
41ab8 2e1             | .commit
41ab8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
41abc 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
41ac0 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
41ac4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
41ac8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
41acc 2e6             | .post_ret
41acc 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
41ad0 2e7             | 
41ad0 2e7             | 
41ad0 2e7             | '------------------------------------------------------------------------------
41ad0 2e7             | ' Resets the downstream hub port to FS
41ad0 2e7             | '------------------------------------------------------------------------------
41ad0 2e7             | dwnstream_reset
41ad0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
41ad4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
41ad8 2e9             | 
41ad8 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
41adc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
41ae0 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
41ae4 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
41ae8 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
41aec 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
41af0 2ef             | 
41af0 2ef             | '------------------------------------------------------------------------------
41af0 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
41af0 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
41af0 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
41af0 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
41af0 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
41af0 2ef             | '------------------------------------------------------------------------------
41af0 2ef             | ' On entry:
41af0 2ef             | '   hctwait - wait interval in sysclocks.
41af0 2ef             | ' On exit:
41af0 2ef             | '------------------------------------------------------------------------------
41af0 2ef             | poll_waitx
41af0 2ef 1A 94 63 FD |                 getct   hct2
41af4 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
41af8 2f1             | .wait
41af8 2f1 FF 25 CC FB |                 jnct2   #.wait
41afc 2f2 2D 00 64 FD |                 ret
41b00 2f3             | 
41b00 2f3             | '------------------------------------------------------------------------------
41b00 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
41b00 2f3             | '------------------------------------------------------------------------------
41b00 2f3             | ' On entry:
41b00 2f3             | '   retval - transaction response PID or error code.
41b00 2f3             | ' On exit:
41b00 2f3             | '------------------------------------------------------------------------------
41b00 2f3             | retry_wait
41b00 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
41b04 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
41b08 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
41b0c 2f6 14 00 90 AD |         if_z    jmp     #.nak
41b10 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
41b14 2f8 D8 FF BF FD |                 call    #poll_waitx
41b18 2f9             | .dec
41b18 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
41b1c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
41b20 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
41b24 2fc             | .nak
41b24 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
41b28 2fd C4 FF BF FD |                 call    #poll_waitx
41b2c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
41b30 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
41b34 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
41b38 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
41b3c 302 2D 00 64 FD |                 ret
41b40 303             | 
41b40 303             | host_reset
41b40 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
41b44 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
41b48 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
41b48 305 BD 01 05 FF 
41b4c 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
41b50 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
41b54 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
41b58 309             | ' Check to see if the system clock has been changed.
41b58 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
41b5c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
41b60 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
41b64 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
41b68 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
41b6c 30e 40 46 62 FD |                 dirl    dp
41b70 30f             | 
41b70 30f 28 02 64 FD |                 setq    #1
41b74 310 80 00 80 FF 
41b78 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
41b7c 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
41b80 313             | .enable
41b80 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
41b84 314 41 46 62 FD |                 dirh    dp
41b88 315 1F 38 63 FD |                 waitx   _1us_
41b8c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41b90 317             | 
41b90 317             |                 ' Handle Port protection enable and startup delay
41b90 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
41b94 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
41b98 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
41b9c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
41ba0 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
41ba4 31c             | 
41ba4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
41ba8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
41bac 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
41bb0 31f 00 00 04 F6 |                 mov     0-0, #0
41bb4 320             | .regloop
41bb4 320             | 
41bb4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
41bb4 320             | 
41bb4 320             | discon_entry
41bb4 320 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
41bb8 321             | 
41bb8 321             |               
41bb8 321             |         if HAVE_HIDPAD
41bb8 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
41bbc 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
41bc0 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
41bc4 324 F7 01 68 FC |                 wrlong  #0,pb
41bc8 325             |         end
41bc8 325             |         if EMUPAD_MAX_PLAYER > 0
41bc8 325             |         end
41bc8 325             | 
41bc8 325             |                 ' Fall through to disconnected loop
41bc8 325             | 
41bc8 325             | '-----------------------------------------------------------------------------------------------------------------
41bc8 325             | ' Device connect handling (Section 7.1.7.3).
41bc8 325             | '-----------------------------------------------------------------------------------------------------------------
41bc8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
41bc8 325             | ' device to connect (Section 7.1.7.3).
41bc8 325             | '-----------------------------------------------------------------------------------------------------------------
41bc8 325             | disconnected
41bc8 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
41bcc 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
41bd0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
41bd4 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
41bd8 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
41bdc 32a             |         if ACTIVITY_LED >= 0
41bdc 32a             |         end
41bdc 32a 22 A7 82 FA |                 rqpin   urx, dm
41be0 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
41be4 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
41be8 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
41bec 32e             | .se1_test
41bec 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
41bf0 32f FC FE BF FD |                 call    #poll_waitx
41bf4 330 22 A7 82 FA |                 rqpin   urx, dm
41bf8 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
41bfc 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
41c00 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
41c04 334             | .se1            'SE1 is a fatal error condition
41c04 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
41c08 335 E4 FE BF FD |                 call    #poll_waitx
41c0c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
41c10 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
41c14 338             | .connect_test                                           ' Test lines until stable J/K state seen
41c14 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
41c18 339 22 A7 82 FA |                 rqpin   urx, dm
41c1c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
41c20 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
41c24 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
41c28 33d             | connected
41c28 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
41c2c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
41c30 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
41c34 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
41c38 341             | .set_pulse
41c38 341 1A 66 63 FD |                 getct   _pulse_time_
41c3c 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
41c40 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
41c40 343             | ' of 1ms and make a correction, if necessary.
41c40 343             | '                mov     htmp, _1ms_
41c40 343             | '                subs    htmp, iframe_delta
41c40 343             | '                adds    _frame1ms_clks_, htmp
41c40 343             | '                debug(udec(_frame1ms_clks_))
41c40 343             | 
41c40 343             |                 ' Fall through to idle/processing loop
41c40 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
41c44 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
41c48 345             | 
41c48 345             | hidle
41c48 345 22 A7 82 FA |                 rqpin   urx, dm
41c4c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
41c50 347 98 00 90 CD |         if_c    jmp     #.se0_test
41c54 348 24 06 70 FD |                 pollct3                         wc
41c58 349 68 00 90 3D |         if_nc   jmp     #.nopoll
41c5c 34a 1A 96 63 FD |                 getct   hct3
41c60 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
41c64 34c             | 
41c64 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41c68 34d 00 72 E3 F8 |                 getbyte htmp
41c6c 34e             | 
41c6c 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
41c70 34f 94 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
41c74 350 40 00 90 AD |         if_z    jmp     #.poll
41c78 351             | 
41c78 351             |         if _HAVE_GAMEPAD
41c78 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
41c7c 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
41c80 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
41c84 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
41c88 355 2C 00 90 AD |         if_z    jmp     #.poll
41c8c 356             |         end
41c8c 356             | 
41c8c 356             |         if HAVE_MOUSE
41c8c 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
41c90 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
41c94 358 20 00 90 AD |         if_z    jmp     #.poll
41c98 359             |         end
41c98 359             | 
41c98 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
41c9c 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
41ca0 35b 14 00 90 AD |         if_z    jmp     #.poll
41ca4 35c             | 
41ca4 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
41ca8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
41cac 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
41cb0 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
41cb4 360             |         if HAVE_MOUSE
41cb4 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
41cb8 361             |         else
41cb8 361             |         end
41cb8 361             | 
41cb8 361             | .poll
41cb8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
41cbc 362 2D EC 63 FD |                 call    pa
41cc0 363             | .skip_poll
41cc0 363             | 
41cc0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
41cc4 364             | 
41cc4 364             | .nopoll
41cc4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
41cc8 365 44 00 90 AD |         if_z    jmp     #hsuspend
41ccc 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
41cd0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
41cd4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
41cd8 369 1A 86 63 FD |                 getct   hr0
41cdc 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
41ce0 36b             |         if ACTIVITY_LED >= 0
41ce0 36b             |         end
41ce0 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
41ce4 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
41ce8 36d 5C FF 9F FD |                 jmp     #hidle
41cec 36e             | ' Check for extended SE0 state on the bus
41cec 36e             | .se0_test
41cec 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
41cf0 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
41cf4 370 22 A7 82 FA |                 rqpin   urx, dm
41cf8 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
41cfc 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
41d00 373 24 F6 BF FD |                 call    #wait_txn_ok
41d04 374 00 00 80 FF 
41d08 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
41d0c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
41d0c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
41d10 377             | 
41d10 377             | hsuspend
41d10 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
41d14 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
41d18 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
41d1c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
41d20 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
41d24 37c 00 98 07 F6 |                 mov     mod_cnt, #0
41d28 37d             | 
41d28 37d             |                 ' Fall through to resume wait loop
41d28 37d             | 
41d28 37d             | hwait_resume
41d28 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
41d2c 37e 02 88 47 F0 |                 shr     hr1, #2
41d30 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
41d34 380             |         if ACTIVITY_LED >= 0
41d34 380             |         end
41d34 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
41d38 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
41d3c 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
41d40 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
41d44 384 18 00 90 AD |         if_z    jmp     #.resume
41d48 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
41d4c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
41d50 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
41d54 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41d58 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
41d5c 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
41d60 38b             | .resume
41d60 38b 22 05 28 FC |                 wypin   #OUT_K, dm
41d64 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
41d68 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
41d6c 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
41d70 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
41d74 390 1F 72 63 FD |                 waitx   htmp
41d78 391 22 07 28 FC |                 wypin   #OUT_J, dm
41d7c 392 01 72 47 F0 |                 shr     htmp, #1
41d80 393 1F 72 63 FD |                 waitx   htmp
41d84 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41d88 395 1A 92 62 FD |                 getct   iframe_ct_base
41d8c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
41d90 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
41d94 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
41d98 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
41d9c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
41da0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
41da4 39c             | 
41da4 39c             | '------------------------------------------------------------------------------
41da4 39c             | ' Send preamble to enable low-speed HUB ports
41da4 39c             | '------------------------------------------------------------------------------
41da4 39c             | ' On entry:
41da4 39c             | ' On exit:
41da4 39c             | '   USB baud rate set to low-speed
41da4 39c             | '------------------------------------------------------------------------------
41da4 39c             | utx_pre
41da4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
41da8 39d 40 46 62 FD |                 dirl    dp
41dac 39e 28 02 64 FD |                 setq    #1
41db0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
41db4 3a0 58 44 62 FD |                 drvl    dm
41db8 3a1 59 46 62 FD |                 drvh    dp
41dbc 3a2             | 
41dbc 3a2 1E 00 00 FF 
41dc0 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
41dc4 3a4             | 
41dc4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
41dc8 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
41dcc 3a6 28 02 64 3D |         if_nc   setq    #1
41dd0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
41dd4 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
41dd8 3a9             | .l1
41dd8 3a9             | 
41dd8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
41ddc 3aa 40 46 62 FD |                 dirl    dp
41de0 3ab 28 02 64 FD |                 setq    #1
41de4 3ac 80 00 80 FF 
41de8 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
41dec 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
41df0 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
41df4 3b0 41 46 62 FD |                 dirh    dp
41df8 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41dfc 3b2             | 
41dfc 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
41e00 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
41e04 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
41e08 3b5             | 
41e08 3b5             | hlut_end
41e08 3b5             |                 fit     $400
41e08 3b5             |                 orgh
41e08                 | if OVERLAP_MEMORY
41e08                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
41e08                 | end
41e08                 | '------------------------------------------------------------------------------
41e08                 | ' Routines called from cog space.
41e08                 | '------------------------------------------------------------------------------
41e08                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
41e08                 | '------------------------------------------------------------------------------
41e08                 | 
41e08                 | '------------------------------------------------------------------------------
41e08                 | ' USB host cog initialization.
41e08                 | '------------------------------------------------------------------------------
41e08                 | usb_host_init
41e08                 |                 ' Initialize buffer pointers
41e08                 |         if OVERLAP_MEMORY
41e08                 |         else
41e08     4C 15 B0 FE |                 loc     pb, #hid_descr
41e0c                 |         end
41e0c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
41e10                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
41e10                 |                 {
41e10                 |                 }
41e10                 |         
41e10                 |                 {
41e10                 |                 }
41e10                 |                 'loc     pb,#hkbd_report
41e10                 |                 'mov     hkbd_report_p,pb
41e10                 | 
41e10     44 1D B0 FE |                 loc     pb, #hub_descr
41e14     F7 4D 02 F6 |                 mov     hub_descr_p, pb
41e18     59 1D B0 FE |                 loc     pb, #urx_buff
41e1c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
41e20     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
41e24     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
41e28     DB 1D B0 FE |                 loc     pb, #con_desc_buff
41e2c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
41e30     24 15 B0 FE |                 loc     pb, #usb_cache_start
41e34     F7 55 02 F6 |                 mov     cache_start_p, pb
41e38     25 1D B0 FE |                 loc     pb, #usb_cache_end
41e3c     F7 57 02 F6 |                 mov     cache_end_p, pb
41e40                 | 
41e40                 |         if ERROR_LED >= 0
41e40                 |         end
41e40                 | 
41e40                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
41e40                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
41e40                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
41e40                 | ' Configure and enable the Serial Host USB port.
41e40     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
41e44                 | 
41e44                 | '------------------------------------------------------------------------------
41e44                 | ' Timing calculations happen before any interrupt(s) are enabled.
41e44                 | '------------------------------------------------------------------------------
41e44                 | ' On entry:
41e44                 | '   htmp - current CLKFREQ value.
41e44                 | '------------------------------------------------------------------------------
41e44                 | hinit_usb_timings
41e44                 | '                getct   htmp2
41e44     B9 59 02 F6 |                 mov     save_sysclk, htmp
41e48     8D 5B 80 FF 
41e4c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
41e50     18 32 63 FD |                 getqx   _12Mbps_
41e54     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
41e58     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
41e5c     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
41e60     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
41e64     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
41e68     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
41e6c     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
41e70     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
41e74     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
41e78     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
41e7c     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
41e80     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
41e84     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
41e88     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
41e8c     80 00 00 FF 
41e90     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
41e94     18 2E 63 FD |                 getqx   _var_64_lower_
41e98     19 30 63 FD |                 getqy   _var_64_upper_
41e9c     28 2E 63 FD |                 setq    _var_64_lower_
41ea0     65 CD 1D FF 
41ea4     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
41ea8     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
41eac     01 00 00 FF 
41eb0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
41eb4     18 2E 63 FD |                 getqx   _var_64_lower_
41eb8     19 30 63 FD |                 getqy   _var_64_upper_
41ebc     28 2E 63 FD |                 setq    _var_64_lower_
41ec0     A1 07 00 FF 
41ec4     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
41ec8     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
41ecc     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
41ed0     09 38 57 F0 |                 shr     _1us_, #9               wc
41ed4     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
41ed8     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
41edc     18 3A 63 FD |                 getqx   _10us_
41ee0     09 3A 57 F0 |                 shr     _10us_, #9              wc
41ee4     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
41ee8     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
41eec     18 3C 63 FD |                 getqx   _33us_
41ef0     09 3C 57 F0 |                 shr     _33us_, #9              wc
41ef4     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
41ef8     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
41efc     18 3E 63 FD |                 getqx   _txn_err_
41f00     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
41f04     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
41f08     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
41f0c     18 40 63 FD |                 getqx   _500us_
41f10     09 40 57 F0 |                 shr     _500us_, #9             wc
41f14     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
41f18     01 00 00 FF 
41f1c     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
41f20     18 42 63 FD |                 getqx   _txn_ok_ls_
41f24     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
41f28     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
41f2c     01 00 00 FF 
41f30     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
41f34     18 44 63 FD |                 getqx   _txn_ok_fs_
41f38     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
41f3c     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
41f40     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
41f44     05 00 00 FF 
41f48     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
41f4c     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
41f50     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
41f54     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
41f58     1C 00 00 FF 
41f5c     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
41f60     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
41f64     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
41f68     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
41f6c     00 00 00 FF 
41f70     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
41f74     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
41f78     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
41f7c     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
41f80     04 00 00 FF 
41f84     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
41f88     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
41f8c     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
41f90     8D 5B 00 FF 
41f94     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
41f98     18 4E 63 FD |                 getqx   _preamble_wait_
41f9c     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
41fa0     01 00 00 FF 
41fa4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
41fa8     18 2E 63 FD |                 getqx   _var_64_lower_
41fac     19 30 63 FD |                 getqy   _var_64_upper_
41fb0     28 2E 63 FD |                 setq    _var_64_lower_
41fb4     01 00 00 FF 
41fb8     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
41fbc     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
41fc0     09 50 57 F0 |                 shr     _1ms_, #9               wc
41fc4     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
41fc8     FF FF 7F FF 
41fcc     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
41fd0     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
41fd4     A8 53 03 F6 |                 mov     _2ms_, _1ms_
41fd8     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
41fdc     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
41fe0     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
41fe4     A8 57 03 F6 |                 mov     _4ms_, _1ms_
41fe8     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
41fec     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
41ff0     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
41ff4     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
41ff8     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
41ffc     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
42000     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
42004     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
42008     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
4200c     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
42010     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
42014     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
42018     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
4201c     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
42020     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
42024     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
42028     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
4202c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
42030     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
42034     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
42038                 | '        _ret_   mov     _1sec_, save_sysclk
42038                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
42038                 | '                ret
42038                 | {
42038                 | }
42038                 | 
42038                 | '------------------------------------------------------------------------------
42038                 | ' Parse a configuration descriptor chain to see if the device is a recognized
42038                 | ' one. If it is, start the task progression that will configure the device for
42038                 | ' use.
42038                 | '------------------------------------------------------------------------------
42038                 | ' On entry:
42038                 | '   hconfig_base - start address of the cached config descriptor chain.
42038                 | ' On exit:
42038                 | '------------------------------------------------------------------------------
42038                 | hparse_con_desc
42038     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
4203c     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
42040     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
42044     4E 72 FF F9 |                 movbyts htmp,#%%1032
42048     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
4204c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
4204c                 | 
4204c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
42050     6E ED 03 F1 |                 add     pa, hconfig_base
42054     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
42058                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
42058                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
42058                 | ' that defines a keyboard and/or mouse.
42058     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
4205c                 | .next_intf
4205c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
42060     B8 01 90 3D |         if_ae   jmp     #hset_config
42064     6E F3 03 F6 |                 mov     ptrb, hconfig_base
42068     75 F3 03 F1 |                 add     ptrb, hnext_desc
4206c     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
42070     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
42074     0C 00 90 AD |         if_z    jmp     #.intf
42078     80 73 C7 FA |                 rdbyte  htmp, ptrb
4207c     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
42080     D8 FF 9F FD |                 jmp     #.next_intf
42084                 | .intf
42084     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
42088     00 92 07 F6 |                 mov     hpar3, #0
4208c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
42090     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
42094     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
42098     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
4209c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
4209c                 | 
4209c                 | .endp
4209c     80 73 C7 FA |                 rdbyte  htmp, ptrb
420a0     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
420a4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
420a8     78 00 90 3D |         if_ae   jmp     #.get_device
420ac     6E F3 03 F6 |                 mov     ptrb, hconfig_base
420b0     75 F3 03 F1 |                 add     ptrb, hnext_desc
420b4     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
420b8     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
420bc     64 00 90 AD |         if_z    jmp     #.get_device
420c0     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
420c4     04 00 90 AD |         if_z    jmp     #.get_ep
420c8     D0 FF 9F FD |                 jmp     #.endp
420cc                 | .get_ep
420cc     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
420d0     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
420d4     0F 88 67 F0 |                 shl     hr1, #8 + 7
420d8     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
420dc     3F 00 00 FF 
420e0     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
420e4     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
420e8     00 90 0F F2 |                 cmp     hpar2, #0               wz
420ec     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
420f0     00 92 0F F2 |                 cmp     hpar3, #0               wz
420f4     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
420f8     A0 FF 9F FD |                 jmp     #.endp
420fc                 | .in_ep
420fc     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
42100     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
42104                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
42104     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
42108     C3 8B DB F8 |                 setbyte hr2, hr0, #3
4210c     8C FF 9F FD |                 jmp     #.endp
42110                 | .out_ep
42110     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
42114     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
42118                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
42118     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
4211c     C3 8D DB F8 |                 setbyte hr3, hr0, #3
42120     78 FF 9F FD |                 jmp     #.endp
42124                 | 
42124                 | .get_device
42124     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
42128     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
4212c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
42130     64 00 90 AD |         if_z    jmp     #.gamepad
42134     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
42138     A8 00 90 AD |         if_z    jmp     #.hub
4213c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
42140     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
42144     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
42148     4C 00 90 AD |         if_z    jmp     #.gamepad
4214c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
42150     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
42154                 | .keyboard
42154     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
42158                 |         if HAVE_MOUSE
42158     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
4215c                 |         else
4215c                 |         end
4215c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
42160     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
42164     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
42168     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
4216c     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
42170     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
42174                 |                 'debug(udec(kb_intf_num))
42174                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
42174     E4 FE 9F FD |                 jmp     #.next_intf
42178                 | if HAVE_MOUSE
42178                 | .mouse
42178     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
4217c     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
42180     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
42184     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
42188     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
4218c                 |                 'getbyte ms_interval, hr2, #3
4218c     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
42190     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
42194                 |                 'debug(udec(kb_intf_num))
42194                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
42194     C4 FE 9F FD |                 jmp     #.next_intf
42198                 | end
42198                 | .gamepad
42198     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
4219c     C8 73 63 F5 |                 xor     htmp, hpar2
421a0     3F 00 00 FF 
421a4     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
421a8     B0 FE 9F AD |         if_z    jmp     #.next_intf
421ac                 |         if HAVE_MOUSE
421ac     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
421b0     C8 73 63 F5 |                 xor     htmp, hpar2
421b4     3F 00 00 FF 
421b8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
421bc     9C FE 9F AD |         if_z    jmp     #.next_intf
421c0                 |         end
421c0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
421c4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
421c8     90 FE 9F 5D |         if_nz   jmp     #.next_intf
421cc                 | 
421cc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
421d0     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
421d4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
421d8     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
421dc     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
421e0                 |                 'debug(udec(gp_intf_num))
421e0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
421e0     78 FE 9F FD |                 jmp     #.next_intf
421e4                 | .hub
421e4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
421e8     70 FE 9F 5D |         if_nz   jmp     #.next_intf
421ec     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
421f0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
421f4     64 FE 9F 5D |         if_nz   jmp     #.next_intf
421f8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
421fc     5C FE 9F 5D |         if_nz   jmp     #.next_intf
42200     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
42204     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
42208     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
4220c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
42210     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
42214     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
42218                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
42218     40 FE 9F FD |                 jmp     #.next_intf
4221c                 | 
4221c                 | '------------------------------------------------------------------------------
4221c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
4221c                 | ' it according to its function, or functions. In the case of this boot protocol
4221c                 | ' keyboard/mouse class driver:
4221c                 | ' - SetConfiguration(config_num)
4221c                 | ' - SetProtocol(boot)
4221c                 | ' - SetIdle(indefinite)
4221c                 | ' - Enter the device interrupt IN polling task stage.
4221c                 | '------------------------------------------------------------------------------
4221c                 | ' On entry:
4221c                 | ' On exit:
4221c                 | '------------------------------------------------------------------------------
4221c                 | hset_config
4221c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
4221c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
4221c     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
42220     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
42224     00 00 0C F2 |                 cmp     0-0, #0                 wz
42228     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
4222c                 |         if HAVE_MOUSE
4222c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
42230                 |         end
42230     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
42234     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
42238                 | .set_config
42238     7C 0E D0 FE |                 loc     ptra, #set_config
4223c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
42240     6E ED 03 F1 |                 add     pa, hconfig_base
42244     F6 8F C3 FA |                 rdbyte  hpar1, pa
42248     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
4224c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
42250     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
42254     A0 02 A0 FD |                 call    #control_write
42258     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4225c     2D 00 64 5D |         if_nz   ret
42260                 | .kbd_config
42260     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
42264     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
42268                 | 
42268     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
4226c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
42270     3F 00 00 FF 
42274     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
42278     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
4227c                 | 
4227c     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
42280     44 0E D0 FE |                 loc     ptra, #set_protocol
42284     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
42288     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
4228c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
42290     A0 02 A0 FD |                 call    #control_write
42294     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42298     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
4229c     E4 02 90 5D |         if_nz   jmp     #.notify_client
422a0     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
422a4     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
422a8     30 03 B0 FD |                 call    #hset_idle
422ac                 |                 'cmp     retval, #PID_ACK        wz
422ac                 |         'if_nz   mov     hkbd_ep_addr, #0
422ac                 |         'if_nz   jmp     #.notify_client
422ac     A9 99 02 F6 |                 mov     hctwait, _2ms_
422b0     EF 02 A0 FD |                 call    #poll_waitx
422b4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
422b8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
422bc     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
422c0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
422c4     2C 03 B0 FD |                 call    #hset_kbdled_report
422c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
422cc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
422d0     B0 02 90 5D |         if_nz   jmp     #.notify_client
422d4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
422d8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
422dc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
422e0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
422e4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
422e8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
422ec     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
422f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
422f4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
422f8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
422fc     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
42300                 |         if !!HAVE_MOUSE
42300                 |         end
42300                 | 
42300                 | .mouse_config
42300                 | if HAVE_MOUSE
42300     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
42304     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
42308     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
4230c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
42310     3F 00 00 FF 
42314     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
42318     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
4231c                 | 
4231c                 |                 debug("mouse passed addr check")
4231c                 | 
4231c     C0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
42320     00 00 80 FF 
42324     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
42328     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
4232c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
42330     55 02 A0 FD |                 call    #control_read
42334     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42338     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
4233c     44 02 90 5D |         if_nz   jmp     #.notify_client
42340     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
42344     56 01 00 F6 |                 mov     0-0, total_data
42348     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4234c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
4234c                 | 
4234c     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
42350     74 0D D0 FE |                 loc     ptra, #set_protocol
42354     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
42358     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
4235c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
42360     A0 02 A0 FD |                 call    #control_write
42364     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42368     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
4236c     14 02 90 5D |         if_nz   jmp     #.notify_client
42370                 |                 debug("mouse passed SetProtocol")
42370     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
42374     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
42378     60 02 B0 FD |                 call    #hset_idle
4237c                 |                 'cmp     retval, #PID_ACK        wz
4237c                 |         'if_nz   mov     hmouse_ep_addr, #0
4237c                 |         'if_nz   jmp     #.notify_client
4237c                 |                 debug("mouse passed SetIdle")
4237c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
42380     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
42384     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
42388     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
4238c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
42390     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
42394     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
42398     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
4239c     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
423a0     3F 00 00 FF 
423a4     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
423a8     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
423ac     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
423b0     D0 01 90 FD |                 jmp     #.notify_client
423b4                 | end
423b4                 | .gamepad_config
423b4                 | if _HAVE_GAMEPAD
423b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
423b8     00 00 0C F2 |                 cmp     0-0, #0                 wz
423bc     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
423c0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
423c4     00 72 03 F6 |                 mov     htmp, 0-0
423c8     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
423cc     3F 00 00 FF 
423d0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
423d4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
423d8                 | 
423d8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
423dc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
423e0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
423e4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
423e8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
423ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
423f0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
423f4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
423f8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
423fc     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
42400     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
42404     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
42408     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
4240c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
42410                 | 
42410                 |                 if EMUPAD_MAX_PLAYER > 0
42410                 |                 
42410                 | .rule_loop           
42410                 |                 end
42410                 | 
42410     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
42414     5C 00 90 AD |         if_e    jmp     #.xinput
42418     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
4241c     00 72 03 F6 |                 mov     htmp,0-0
42420     01 A6 02 FF 
42424     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
42428     7C 00 90 AD |         if_e    jmp     #.ps3
4242c                 | 
4242c     B0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
42430     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
42434     00 00 80 5F 
42438     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
4243c     03 00 80 AF 
42440     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
42444     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
42448     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4244c     55 02 A0 FD |                 call    #control_read
42450     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42454     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
42458     00 00 04 56 |         if_nz   mov     0-0, #0
4245c     24 01 90 5D |         if_nz   jmp     #.notify_client
42460     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
42464     56 01 00 F6 |                 mov     0-0, total_data
42468     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4246c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
4246c                 | 
4246c     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
42470     10 01 90 FD |                 jmp     #.notify_client
42474                 | .xinput
42474     C4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
42478     2D EF 03 F6 |                 mov     pb,hdev_port
4247c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
42480     03 EE 27 F3 |                 fle     pb,#3
42484     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
42488     02 EF 47 FC |                 wrbyte  pb, ptra[2]
4248c                 | 
4248c     03 B0 06 F6 |                 mov     pkt_data, #3
42490     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
42494     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
42498     5A 00 A0 FD |                 call    #txn_out
4249c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
424a0                 | 
424a0     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
424a4     DC 00 90 FD |                 jmp     #.notify_client
424a8                 | .ps3
424a8     60 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
424ac     2D EF 03 F6 |                 mov     pb,hdev_port
424b0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
424b4     04 EE 27 F3 |                 fle     pb,#4
424b8     F7 EF C3 F9 |                 decod   pb
424bc     09 EF 47 FC |                 wrbyte  pb, ptra[9]
424c0                 | 
424c0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
424c4     10 0C D0 FE |                 loc     ptra, #set_report
424c8     01 00 80 FF 
424cc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
424d0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
424d4     03 61 5C FC |                 wrword  #48, ptra[wLength]
424d8     30 0C B0 FE |                 loc     pb, #ps3_command_buff
424dc     A0 02 A0 FD |                 call    #control_write
424e0                 | 
424e0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
424e4     F0 0B D0 FE |                 loc     ptra, #set_report
424e8     01 00 80 FF 
424ec     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
424f0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
424f4     03 09 5C FC |                 wrword  #4, ptra[wLength]
424f8     0C 0C B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
424fc     A0 02 A0 FD |                 call    #control_write
42500     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
42504     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
42508     00 00 04 56 |         if_nz   mov     0-0, #0
4250c     74 00 90 5D |         if_nz   jmp     #.notify_client
42510                 | 
42510     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
42514     6C 00 90 FD |                 jmp     #.notify_client
42518                 | end
42518                 | 
42518                 | .hub_config
42518     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
4251c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
42520     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
42524     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
42528     3F 00 00 FF 
4252c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
42530     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
42534                 | 
42534     B0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
42538     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
4253c     26 EF 03 F6 |                 mov     pb, hub_descr_p
42540     55 02 A0 FD |                 call    #control_read
42544     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42548     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
4254c     34 00 90 5D |         if_nz   jmp     #.notify_client
42550                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
42550                 | 
42550     26 F1 03 F6 |                 mov     ptra, hub_descr_p
42554     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
42558     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
4255c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
4255c                 | .pwr_loop
4255c     90 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
42560     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
42564     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
42568     A0 02 A0 FD |                 call    #control_write
4256c     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
42570                 | 
42570     B2 99 02 F6 |                 mov     hctwait, _500ms_
42574     B1 99 02 F1 |                 add     hctwait, _100ms_
42578     EF 02 A0 FD |                 call    #poll_waitx
4257c                 | 
4257c     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
42580     00 00 90 FD |                 jmp     #.notify_client
42584                 | 
42584                 | .notify_client
42584     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
42588     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
4258c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
4258c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
4258c     2D 00 64 FD |                 ret
42590                 | 
42590                 | '------------------------------------------------------------------------------
42590                 | ' Initialize the keyboard/mouse data area to start-up values.
42590                 | '------------------------------------------------------------------------------
42590                 | ' On entry:
42590                 | ' On exit:
42590                 | '------------------------------------------------------------------------------
42590                 | init_kbdm_data
42590     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
42594     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
42598                 | 
42598     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
4259c     2B ED 03 F6 |                 mov     pa, cache_end_p
425a0                 | .loop
425a0     61 01 4C FC |                 wrbyte  #0, ptra++
425a4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
425a8     F4 FF 9F CD |         if_b    jmp     #.loop
425ac                 |         
425ac                 |         if EMUPAD_MAX_PLAYER > 0
425ac                 |         end
425ac                 | 
425ac                 | 
425ac     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
425b0                 | .regloop
425b0     00 EC 8F F9 |                 altd    pa
425b4     00 00 04 F6 |                 mov     0-0, #0
425b8     01 EC 07 F1 |                 add     pa, #1
425bc     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
425c0     EC FF 9F 5D |         if_nz   jmp     #.regloop
425c4                 | 
425c4     E1 E1 61 FF 
425c8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
425cc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
425d0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
425d4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
425d8                 | 
425d8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
425dc                 | 
425dc                 | '------------------------------------------------------------------------------
425dc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
425dc                 | ' function.
425dc                 | '------------------------------------------------------------------------------
425dc                 | ' On entry:
425dc                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
425dc                 | '   hpar2 - index number of the target interface.
425dc                 | ' On exit:
425dc                 | '------------------------------------------------------------------------------
425dc                 | hset_idle
425dc     A9 99 02 F6 |                 mov     hctwait, _2ms_
425e0     EF 02 A0 FD |                 call    #poll_waitx
425e4     E8 0A D0 FE |                 loc     ptra, #set_idle
425e8     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
425ec     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
425f0     A0 02 80 FD |                 jmp     #control_write
425f4                 | 
425f4                 | '------------------------------------------------------------------------------
425f4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
425f4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
425f4                 | '------------------------------------------------------------------------------
425f4                 | ' On entry:
425f4                 | '   ep_addr_pid - device address and enpoint for the request.
425f4                 | ' On exit:
425f4                 | '   retval - transaction result.
425f4                 | '------------------------------------------------------------------------------
425f4                 | hset_kbdled_report
425f4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
425f8     DC 0A D0 FE |                 loc     ptra, #set_report
425fc     01 00 80 FF 
42600     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
42604     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
42608     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
4260c     27 EF 03 F6 |                 mov     pb, urx_buff_p
42610     F7 77 42 FC |                 wrbyte  kb_led_states, pb
42614     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
42618                 | 
42618                 | '------------------------------------------------------------------------------
42618                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
42618                 | '------------------------------------------------------------------------------
42618                 | ' On entry:
42618                 | ' On exit:
42618                 | '------------------------------------------------------------------------------
42618                 | hget_kbd_in_report
42618     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
4261c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42620     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
42624     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
42628     CF 02 A0 FD |                 call    #do_int_in
4262c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42630     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
42634                 | 
42634     00 92 0F F2 |                 cmp     hpar3, #0               wz
42638     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
4263c                 | 
4263c     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
42640     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
42644     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
42648     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
4264c                 | 
4264c     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
42650     18 00 B0 FD |                 call    #hkbd_compare
42654                 |         if EMUPAD_MAX_PLAYER > 0
42654                 |         end
42654                 | 
42654                 | .led_check
42654     3B 73 03 F6 |                 mov     htmp, kb_led_states
42658     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
4265c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
42660     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
42664     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
42668     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
4266c                 | 
4266c                 | '------------------------------------------------------------------------------
4266c                 | ' Compare current and previous keyboard data buffers for keypress changes.
4266c                 | '------------------------------------------------------------------------------
4266c                 | hkbd_compare
4266c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
42670     E4 13 F0 FE |                 loc     ptrb, #hkbd_report
42674     61 75 07 FB |                 rdlong  htmp1, ptra++
42678     E1 77 07 FB |                 rdlong  htmp2, ptrb++
4267c     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
42680     61 75 07 FB |                 rdlong  htmp1, ptra++
42684     E1 77 07 FB |                 rdlong  htmp2, ptrb++
42688     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
4268c     2D 00 64 AD |         if_z    ret
42690                 | 
42690     C4 13 D0 FE |                 loc     ptra, #hkbd_report
42694                 | 
42694                 |                 ' Handle modifiers
42694     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
42698     00 89 C7 FA |                 rdbyte  hr1, ptra
4269c     C8 89 43 F9 |                 rolword hr1,hpar2,#0
426a0     63 88 63 FD |                 mergew  hr1
426a4     08 EC 07 F6 |                 mov     pa,#8
426a8                 | .modloop
426a8     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
426ac     E8 8E 07 F6 |                 mov     hpar1,#$E8
426b0     F6 8F 83 F1 |                 sub     hpar1,pa
426b4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
426b8     FB ED 6F FB |                 djnz    pa,#.modloop
426bc                 | 
426bc     6F E0 75 FD | .release        modc    _set    wc
426c0                 |                 'alts    hdev_port, #hid_report_p
426c0                 |                 'mov     ptra, hid_report_p
426c0     02 F0 07 F1 |                 add     ptra, #2
426c4     06 EC 07 F6 |                 mov     pa, #6
426c8     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
426cc     20 00 90 AD |         if_z    jmp     #.rl3
426d0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
426d4     02 F2 07 F1 |                 add     ptrb, #2
426d8     06 EE 07 F6 |                 mov     pb, #6
426dc     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
426e0     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
426e4     08 00 90 AD |         if_z    jmp     #.rl3
426e8     FC EF 6F FB |                 djnz    pb, #.rl2
426ec     68 00 B0 FD |                 call    #hkbd_translate
426f0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
426f4                 | 
426f4     00 92 07 F6 |                 mov     hpar3, #0
426f8     1F 92 27 F4 |                 bith    hpar3, #31
426fc                 | 
426fc     6F 00 74 FD | .press          modc    _clr    wc
42700     27 F1 03 F6 |                 mov     ptra, urx_buff_p
42704     02 F0 07 F1 |                 add     ptra, #2
42708     06 EC 07 F6 |                 mov     pa, #6
4270c     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
42710     20 00 90 AD |         if_z    jmp     #.pl3
42714     40 13 F0 FE |                 loc     ptrb, #hkbd_report
42718     02 F2 07 F1 |                 add     ptrb, #2
4271c     06 EE 07 F6 |                 mov     pb, #6
42720     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
42724     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
42728     08 00 90 AD |         if_z    jmp     #.pl3
4272c     FC EF 6F FB |                 djnz    pb, #.pl2
42730     24 00 B0 FD |                 call    #hkbd_translate
42734     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
42738                 | 
42738     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
4273c     18 13 F0 FE |                 loc     ptrb, #hkbd_report
42740     28 02 64 FD |                 setq #1
42744     61 75 07 FB |                 rdlong  htmp1, ptra++
42748     28 02 64 FD |                 setq #1
4274c     E1 75 67 FC |                 wrlong  htmp1, ptrb++
42750     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
42754                 | 
42754     2D 00 64 FD |                 ret
42758                 | 
42758                 | '------------------------------------------------------------------------------
42758                 | ' Translate keyboard scancode to ASCII
42758                 | '------------------------------------------------------------------------------
42758                 | ' On entry:
42758                 | '   hpar1 - scancode
42758                 | '   hpar2 - key modifiers state
42758                 | '       c - pressed (0) or released (1) flag
42758                 | ' On exit:
42758                 | '   hpar1 - bit     31 = 0 pressed, 1 released
42758                 | '               30..17 = unused
42758                 | '                   18 = scroll-lock state 
42758                 | '                   17 = caps-lock state
42758                 | '                   16 = num-lock state 
42758                 | '                15..8 = key modifiers state
42758                 | '                 7..0 = scancode
42758                 | '------------------------------------------------------------------------------
42758                 | hkbd_translate
42758     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
4275c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
42760     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
42764     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
42768     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
4276c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
42770                 | 
42770                 |         if EMUPAD_MAX_PLAYER > 0
42770                 | 
42770                 |         if EMUPAD_BT0_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT1_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT2_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT3_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT4_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT5_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT6_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT7_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT8_BIT >= 0
42770                 |         end
42770                 |         if EMUPAD_BT9_BIT >= 0
42770                 |         end
42770                 | 
42770                 |         end
42770     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
42774     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
42778     1F 8E 47 F4 |                 bitc    hpar1, #31
4277c                 |         if KEYQUEUE_SIZE > 0
4277c     D4 09 B0 FE |                 loc pb,#keyq_head
42780     F7 73 E3 FA |                 rdword htmp,pb
42784     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
42788     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
4278c     B9 77 03 F6 |                 mov htmp2,htmp
42790     04 76 07 FA |                 mul htmp2,#4
42794     F7 77 03 F1 |                 add htmp2,pb
42798     02 76 07 F1 |                 add htmp2,#2
4279c     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
427a0     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
427a4     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
427a8     F7 73 43 5C |         if_nz   wrbyte htmp,pb
427ac                 |         end
427ac     2D 00 7C FD |                 ret wcz
427b0                 | 
427b0                 | if HAVE_MOUSE
427b0                 | '------------------------------------------------------------------------------
427b0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
427b0                 | '------------------------------------------------------------------------------
427b0                 | ' On entry:
427b0                 | ' On exit:
427b0                 | '------------------------------------------------------------------------------
427b0                 | hget_mouse_in_report
427b0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
427b4     27 91 03 F6 |                 mov     hpar2, urx_buff_p
427b8     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
427bc     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
427c0     CF 02 A0 FD |                 call    #do_int_in
427c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
427c8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
427cc                 | 
427cc     00 92 0F F2 |                 cmp     hpar3, #0               wz
427d0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
427d4                 | 
427d4     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
427d8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
427dc     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
427e0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
427e4                 | 
427e4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
427e8     05 92 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
427ec     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
427f0     01 92 87 31 |         if_ae   sub     hpar3, #1
427f4                 | 
427f4     50 09 90 FE |                 loc     pa, #mouse_limits
427f8     65 13 F0 FE |                 loc     ptrb, #mouse_xacc
427fc                 | 
427fc                 |                 ' load xacc,yacc,zacc
427fc     28 04 64 FD |                 setq    #3-1
42800     80 89 07 FB |                 rdlong  hr1,ptrb
42804                 |                 ' load limits and outptr
42804     28 04 64 FD |                 setq    #3-1
42808     F6 75 03 FB |                 rdlong  htmp1,pa
4280c                 | 
4280c     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
42810     8C 73 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
42814     00 72 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
42818     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
4281c     01 72 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
42820     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
42824     02 72 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
42828     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
4282c                 |               
4282c                 | 
4282c     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
42830     07 72 67 F7 |                 signx   htmp, #7
42834     B9 89 03 F1 |                 add     hr1,htmp
42838     00 74 0F F2 |                 cmp     htmp1,#0 wz
4283c     BA 89 63 53 |         if_ne   fles    hr1,htmp1
42840     00 88 47 53 |         if_ne   fges    hr1,#0
42844                 | 
42844     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
42848     07 72 67 F7 |                 signx   htmp, #7
4284c     B9 8B 03 F1 |                 add     hr2,htmp
42850     00 76 0F F2 |                 cmp     htmp2,#0 wz
42854     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
42858     00 8A 47 53 |         if_ne   fges    hr2,#0
4285c                 |                 
4285c                 | 
4285c     04 92 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
42860     00 73 C7 AA |         if_z    rdbyte  htmp, ptra
42864     07 72 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
42868     B9 8D 03 A1 |         if_z    add     hr3,htmp
4286c                 | 
4286c     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
42870     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
42874                 | 
42874                 |                 ' write back accumulators
42874     28 04 64 FD |                 setq    #3-1
42878     80 89 67 FC |                 wrlong  hr1,ptrb
4287c                 |                 ' if outptr set, write X/Y words
4287c     00 78 0F F2 |                 cmp htmp3,#0                    wz
42880     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
42884     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
42888     2D 00 64 FD |                 ret
4288c                 | end
4288c                 | 
4288c                 | '------------------------------------------------------------------------------
4288c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
4288c                 | '------------------------------------------------------------------------------
4288c                 | ' On entry:
4288c                 | ' On exit:
4288c                 | '------------------------------------------------------------------------------
4288c                 | if _HAVE_GAMEPAD
4288c                 | hget_gp_in_report
4288c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
42890     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
42894                 | 
42894     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42898     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
4289c     00 92 E3 F8 |                 getbyte hpar3
428a0     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
428a4     CF 02 A0 FD |                 call    #do_int_in
428a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
428ac     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
428b0                 | 
428b0     00 92 0F F2 |                 cmp     hpar3, #0               wz
428b4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
428b8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
428b8                 | 
428b8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
428bc     00 72 E3 F8 |                 getbyte htmp                            ' |
428c0     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
428c4     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
428c8     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
428cc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
428d0     B9 01 C0 F8 |                 setbyte htmp                            ' |
428d4                 | 
428d4                 | ' Note: the following code compares the current and previous reports
428d4                 | ' and process the data if there are changes to ease the debug output.
428d4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
428d4                 | ' gpPreReport buffer.
428d4                 | 
428d4                 |                 ' ----- start of block to remove
428d4                 |                 {
428d4                 |                 }
428d4                 |                 ' ----- end of block to remove
428d4     04 05 90 FE |                 loc pa,#hpad_translate
428d8     2A EC 63 FD |                 push pa
428dc                 | 
428dc                 |                 ' FALL THROUGH !!!!
428dc                 | 
428dc                 | '------------------------------------------------------------------------------
428dc                 | ' Decode controller report
428dc                 | '------------------------------------------------------------------------------
428dc                 | hid_decode
428dc                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
428dc     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
428e0     00 04 00 FF 
428e4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
428e8                 | 
428e8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
428ec                 | 
428ec     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
428f0     00 1C E3 F8 |                 getbyte hidr_type
428f4     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
428f8     44 02 90 AD |         if_z    jmp     #hpad_xinput
428fc     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
42900     2C 03 90 AD |         if_z    jmp     #hpad_ps3
42904     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
42908     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
4290c     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
42910                 |                 
42910                 | 
42910                 | '------------------------------------------------------------------------------
42910                 | ' Handle HID controller (or mouse now
42910                 | ' On entry:
42910                 | '   ptrb - controller report
42910                 | '------------------------------------------------------------------------------
42910                 | hpad_hid
42910     1B 01 A0 FD |                 call    #get_hid_descr_buffer
42914     F7 F1 03 F6 |                 mov     ptra, pb
42918     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
4291c     00 EC 03 F6 |                 mov     pa, 0-0
42920                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
42920     19 2A 3B FF 
42924     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
42928                 | 
42928                 | .next
42928     00 EC 5F F2 |                 cmps    pa, #0      wcz
4292c     2D 00 7C ED |         if_be   ret     wcz
42930                 | 
42930     61 8F C7 FA |                 rdbyte  hpar1, ptra++
42934     01 EC 87 F1 |                 sub     pa, #1
42938     00 90 07 F6 |                 mov     hpar2, #0
4293c                 | 
4293c     C7 73 03 F6 |                 mov     htmp, hpar1
42940     03 72 07 F5 |                 and     htmp, #$03
42944     01 72 0F F2 |                 cmp     htmp, #1    wz
42948     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
4294c     07 90 67 A7 |         if_z    signx   hpar2,#7
42950     01 EC 87 A1 |         if_z    sub     pa, #1
42954     02 72 0F F2 |                 cmp     htmp, #2    wz
42958     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
4295c     0F 90 67 A7 |         if_z    signx   hpar2,#15
42960     02 EC 87 A1 |         if_z    sub     pa, #2
42964     03 72 0F F2 |                 cmp     htmp, #3    wz
42968     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
4296c     04 EC 87 A1 |         if_z    sub     pa, #4
42970                 | 
42970     FC 8E 07 F5 |                 and     hpar1, #$FC
42974                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
42974                 | 
42974     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
42978     18 01 90 AD |         if_z    jmp     #.report_id
4297c     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
42980     30 01 90 AD |         if_z    jmp     #.usage_page
42984     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
42988     38 01 90 AD |         if_z    jmp     #.usage
4298c     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
42990     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
42994     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
42998     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
4299c     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
429a0     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
429a4     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
429a8     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
429ac     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
429b0     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
429b4     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
429b8     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
429bc     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
429c0     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
429c4     60 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
429c8     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
429cc     58 FF 9F 5D |         if_nz   jmp     #.next
429d0                 | 
429d0     D5 25 A7 FB |                 tjf     hidr_state,#.next
429d4                 | 
429d4     03 90 07 F5 |                 and     hpar2, #$03
429d8     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
429dc     18 00 90 5D |         if_nz   jmp     #.skip
429e0                 | 
429e0     02 24 0F F2 |                 cmp     hidr_state, #2  wz
429e4     20 00 90 AD |         if_z    jmp     #.axes
429e8     03 24 0F F2 |                 cmp     hidr_state, #3  wz
429ec     5C 00 90 AD |         if_z    jmp     #.hats
429f0     04 24 0F F2 |                 cmp     hidr_state, #4  wz
429f4     70 00 90 AD |         if_z    jmp     #.buttons
429f8                 | .skip
429f8     93 73 03 F6 |                 mov     htmp, hidr_size
429fc     94 73 03 FA |                 mul     htmp, hidr_count
42a00     B9 21 03 F1 |                 add     hidr_offset, htmp
42a04     20 FF 9F FD |                 jmp     #.next
42a08                 | .axes
42a08                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
42a08     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
42a0c     94 89 03 F6 |                 mov     hr1, hidr_count
42a10                 | .l1
42a10     90 8F 03 F6 |                 mov     hpar1, hidr_offset
42a14     93 91 03 F6 |                 mov     hpar2, hidr_size
42a18     08 03 B0 FD |                 call    #hpad_getbits
42a1c     68 03 B0 FD |                 call    #hpad_normalize
42a20     08 86 1F F2 |                 cmp     hr0, #8         wcz
42a24     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
42a28     00 8A 43 C8 |         if_b    getnib  hr2
42a2c     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
42a30     5F 01 20 C9 |         if_b    setword retval
42a34     01 86 07 C1 |         if_b    add     hr0, #1
42a38     93 21 03 F1 |                 add     hidr_offset, hidr_size
42a3c     F4 89 6F FB |                 djnz    hr1, #.l1
42a40                 | 
42a40     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
42a44     01 24 07 F6 |                 mov     hidr_state, #1
42a48     DC FE 9F FD |                 jmp     #.next
42a4c                 | .hats
42a4c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
42a4c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
42a50     93 91 03 F6 |                 mov     hpar2, hidr_size
42a54     CC 02 B0 FD |                 call    #hpad_getbits
42a58     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
42a5c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42a60     01 24 07 F6 |                 mov     hidr_state, #1
42a64     90 FF 9F FD |                 jmp     #.skip
42a68                 | .buttons
42a68                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
42a68     90 8F 03 F6 |                 mov     hpar1, hidr_offset
42a6c     93 91 03 F6 |                 mov     hpar2, hidr_size
42a70     94 91 03 FA |                 mul     hpar2, hidr_count
42a74     AC 02 B0 FD |                 call    #hpad_getbits
42a78     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
42a7c     B9 BF 62 F0 |                 shl     retval, htmp
42a80     5F 19 43 F5 |                 or      hidr_buttons, retval
42a84     94 73 03 F1 |                 add     htmp, hidr_count
42a88     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
42a8c     01 24 07 F6 |                 mov     hidr_state, #1
42a90     64 FF 9F FD |                 jmp     #.skip
42a94                 | .report_id
42a94     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
42a98     2D 00 7C 5D |         if_nz   ret     wcz
42a9c     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
42aa0     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
42aa4     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
42aa8     01 24 67 56 |         if_nz   neg     hidr_state,#1
42aac     01 F2 87 51 |         if_nz   sub     ptrb,#1
42ab0     74 FE 9F FD |                 jmp     #.next
42ab4                 | .usage_page
42ab4     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
42ab8     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
42abc     04 24 07 A6 |         if_z    mov     hidr_state, #4
42ac0     64 FE 9F FD |                 jmp     #.next
42ac4                 | .usage
42ac4     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
42ac8     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
42acc     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
42ad0     01 24 07 A6 |         if_z    mov     hidr_state, #1
42ad4     50 FE 9F AD |         if_z    jmp     #.next
42ad8     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
42adc     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
42ae0     01 24 07 A6 |         if_z    mov     hidr_state, #1
42ae4     40 FE 9F AD |         if_z    jmp     #.next
42ae8     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
42aec     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
42af0     10 00 90 3D |         if_nc   jmp     #.usage_axis
42af4     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
42af8     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
42afc     03 24 07 A6 |         if_z    mov     hidr_state, #3
42b00     24 FE 9F FD |                 jmp     #.next
42b04                 | .usage_axis
42b04     01 24 57 F2 |                 cmps    hidr_state, #1          wc
42b08     1C FE 9F CD |         if_b    jmp     #.next
42b0c     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
42b10     C8 01 00 F8 |                 setnib  hpar2
42b14                 | 
42b14     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
42b18     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
42b1c                 | 
42b1c     01 22 07 F1 |                 add     hidr_usage_idx, #1
42b20     02 24 07 F6 |                 mov     hidr_state, #2
42b24     00 FE 9F FD |                 jmp     #.next
42b28                 | .pushpop
42b28                 |                 ' Entering with C set if PUSH  
42b28     38 0F B0 FE |                 loc     pb, #hid_stack
42b2c     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
42b30     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
42b34     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
42b38     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
42b3c     E8 FD 9F FD |                 jmp     #.next
42b40                 |         
42b40                 | 
42b40                 | '------------------------------------------------------------------------------
42b40                 | ' Handle XInput controller
42b40                 | ' On entry:
42b40                 | '   ptrb - controller report
42b40                 | '------------------------------------------------------------------------------
42b40                 | '   Default implementation translates the report to a pseudo-defacto hid
42b40                 | '   standard and jumps to hpad_translate for actions.
42b40                 | '   Implementors may take specific actions for this kind of controller.
42b40                 | '------------------------------------------------------------------------------
42b40                 | hpad_xinput
42b40     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
42b44     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
42b48     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
42b4c     14 72 0F F2 |                 cmp     htmp, #$14      wz
42b50     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
42b54                 | 
42b54                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
42b54                 | 
42b54     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
42b58     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
42b5c                 | 
42b5c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
42b60     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
42b64     5F BF 22 F6 |                 not     retval
42b68     5F 11 2B F9 |                 setword hidr_axis, retval, #1
42b6c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
42b70     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
42b74     5F BF 22 F6 |                 not     retval
42b78     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
42b7c                 | 
42b7c     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
42b80     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
42b84     C0 BE 1E F2 |                 cmp     retval, #192    wcz
42b88     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
42b8c     F8 01 B0 FD |                 call    #hpad_normalize
42b90     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
42b94     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
42b98     C0 BE 1E F2 |                 cmp     retval, #192    wcz
42b9c     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
42ba0     E4 01 B0 FD |                 call    #hpad_normalize
42ba4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
42ba8                 | 
42ba8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
42bac     81 BF E6 FA |                 rdword  retval, ptrb[1]
42bb0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
42bb4     00 18 47 F4 |                 bitc    hidr_buttons, #0
42bb8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
42bbc     01 18 47 F4 |                 bitc    hidr_buttons, #1
42bc0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
42bc4     02 18 47 F4 |                 bitc    hidr_buttons, #2
42bc8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
42bcc     03 18 47 F4 |                 bitc    hidr_buttons, #3
42bd0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
42bd4     04 18 47 F4 |                 bitc    hidr_buttons, #4
42bd8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
42bdc     05 18 47 F4 |                 bitc    hidr_buttons, #5
42be0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
42be4     08 18 47 F4 |                 bitc    hidr_buttons, #8
42be8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
42bec     09 18 47 F4 |                 bitc    hidr_buttons, #9
42bf0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
42bf4     0A 18 47 F4 |                 bitc    hidr_buttons, #10
42bf8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
42bfc     0B 18 47 F4 |                 bitc    hidr_buttons, #11
42c00     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
42c04     0C 18 47 F4 |                 bitc    hidr_buttons, #12
42c08                 | 
42c08     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42c0c     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
42c10     7A BB 7A FF 
42c14     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
42c18     F9 FF 7F FF 
42c1c     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
42c20     BA 73 5F F9 |                 altgn   htmp, #htmp1
42c24     00 72 43 F8 |                 getnib  htmp
42c28     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
42c2c                 | 
42c2c     AC 01 90 FD |                 jmp     #hpad_translate
42c30                 | 
42c30                 | '------------------------------------------------------------------------------
42c30                 | ' Handle PS3 controller
42c30                 | ' On entry:
42c30                 | '   ptrb - controller report
42c30                 | '------------------------------------------------------------------------------
42c30                 | '   Default implementation translates the report to a pseudo-defacto hid
42c30                 | '   standard and jumps to hpad_translate for actions.
42c30                 | '   Implementors may take specific actions for this kind of controller.
42c30                 | '------------------------------------------------------------------------------
42c30                 | hpad_ps3
42c30     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
42c34     01 72 0F F2 |                 cmp     htmp, #$01      wz
42c38     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
42c3c                 | 
42c3c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
42c3c                 | 
42c3c     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
42c40     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
42c44     40 01 B0 FD |                 call    #hpad_normalize
42c48     5F 11 23 F9 |                 setword hidr_axis, retval, #0
42c4c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
42c50     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
42c54     30 01 B0 FD |                 call    #hpad_normalize
42c58     5F 11 2B F9 |                 setword hidr_axis, retval, #1
42c5c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
42c60     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
42c64     20 01 B0 FD |                 call    #hpad_normalize
42c68     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
42c6c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
42c70     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
42c74     10 01 B0 FD |                 call    #hpad_normalize
42c78     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
42c7c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
42c80     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
42c84                 | 
42c84     08 8E 07 F6 |                 mov     hpar1, #8
42c88     13 90 07 F6 |                 mov     hpar2, #19
42c8c     94 00 B0 FD |                 call    #hpad_getbits
42c90                 | 
42c90     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
42c94     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
42c98     00 18 47 F4 |                 bitc    hidr_buttons, #0
42c9c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
42ca0     01 18 47 F4 |                 bitc    hidr_buttons, #1
42ca4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
42ca8     02 18 47 F4 |                 bitc    hidr_buttons, #2
42cac     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
42cb0     03 18 47 F4 |                 bitc    hidr_buttons, #3
42cb4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
42cb8     04 18 47 F4 |                 bitc    hidr_buttons, #4
42cbc     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
42cc0     05 18 47 F4 |                 bitc    hidr_buttons, #5
42cc4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
42cc8     06 18 47 F4 |                 bitc    hidr_buttons, #6
42ccc     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
42cd0     07 18 47 F4 |                 bitc    hidr_buttons, #7
42cd4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
42cd8     08 18 47 F4 |                 bitc    hidr_buttons, #8
42cdc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
42ce0     09 18 47 F4 |                 bitc    hidr_buttons, #9
42ce4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
42ce8     0A 18 47 F4 |                 bitc    hidr_buttons, #10
42cec     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
42cf0     0B 18 47 F4 |                 bitc    hidr_buttons, #11
42cf4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
42cf8     0C 18 47 F4 |                 bitc    hidr_buttons, #12
42cfc                 | 
42cfc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42d00     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
42d04     09 FA 79 FF 
42d08     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
42d0c     FF FA 7F FF 
42d10     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
42d14     BA 73 5F F9 |                 altgn   htmp, #htmp1
42d18     00 72 43 F8 |                 getnib  htmp
42d1c     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
42d20                 | 
42d20     B8 00 90 FD |                 jmp     #hpad_translate
42d24                 | 
42d24                 | '------------------------------------------------------------------------------
42d24                 | ' Read bits from report data buffer
42d24                 | '------------------------------------------------------------------------------
42d24                 | ' On entry:
42d24                 | '   PTRB - report buffer
42d24                 | '   hpar1 - start bit
42d24                 | '   hpar2 - number of bits
42d24                 | ' On exit:
42d24                 | '   retval - bits
42d24                 | '------------------------------------------------------------------------------
42d24                 | hpad_getbits
42d24     C7 73 03 F6 |                 mov     htmp, hpar1
42d28     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
42d2c     F9 73 03 F1 |                 add     htmp, ptrb
42d30     B9 BF 02 FB |                 rdlong  retval, htmp
42d34                 | 
42d34     C7 75 03 F6 |                 mov     htmp1, hpar1
42d38     07 74 07 F5 |                 and     htmp1, #$07     ' shift
42d3c     BA BF 42 F0 |                 shr     retval, htmp1
42d40                 | 
42d40     18 90 1F F2 |                 cmp     hpar2, #24      wcz
42d44     10 00 90 1D |         if_a    jmp     #.l1
42d48                 | 
42d48     C8 91 C3 F9 |                 decod   hpar2
42d4c     01 90 87 F1 |                 sub     hpar2, #1
42d50     C8 BF 02 F5 |                 and     retval, hpar2
42d54     2D 00 64 FD |                 ret
42d58                 | .l1
42d58     FF 7F 00 FF 
42d5c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
42d60     03 72 07 F1 |                 add     htmp, #3
42d64     B9 77 03 FB |                 rdlong  htmp2, htmp
42d68     18 90 87 F1 |                 sub     hpar2, #24
42d6c     C8 91 C3 F9 |                 decod   hpar2
42d70     01 90 87 F1 |                 sub     hpar2, #1
42d74     BA 77 43 F0 |                 shr     htmp2, htmp1
42d78     C8 77 03 F5 |                 and     htmp2, hpar2
42d7c     18 76 67 F0 |                 shl     htmp2, #24
42d80     BB BF 42 F5 |                 or      retval, htmp2
42d84     2D 00 64 FD |                 ret
42d88                 | 
42d88                 | '------------------------------------------------------------------------------
42d88                 | ' Normalize value to signed word (-32768 / 32767)
42d88                 | '------------------------------------------------------------------------------
42d88                 | ' On entry:
42d88                 | '   retval - value to normalize
42d88                 | '   hidr_lminmax - min (word 1) max (word 0) value range
42d88                 | '   - or -
42d88                 | '   hidr_pminmax - min (word 1) max (word 0) value range
42d88                 | '   hidr_size - value bits length
42d88                 | ' On exit:
42d88                 | '   retval - normalized value
42d88                 | '------------------------------------------------------------------------------
42d88                 | hpad_normalize
42d88     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
42d8c     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
42d90     2D 00 64 AD |         if_z    ret
42d94     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
42d98     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
42d9c     0F 74 77 F7 |                 signx   htmp1, #15      wc
42da0     FF 27 97 C9 |         if_c    alts    hidr_size, #511
42da4     00 BE 66 C7 |         if_c    signx   retval, #0-0
42da8     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
42dac     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
42db0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
42db4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
42db8     B9 73 53 F6 |                 abs     htmp            wc
42dbc     1F BE 0E F4 |                 testb   retval, #31     wz
42dc0     5F BF 42 F6 |                 abs     retval
42dc4     B9 BF 12 FD |                 qdiv    retval, htmp
42dc8     18 BE 62 FD |                 getqx   retval
42dcc     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
42dd0     C0 FF 7F FF 
42dd4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
42dd8     2D 00 64 FD |                 ret
42ddc                 | 
42ddc                 | '------------------------------------------------------------------------------
42ddc                 | ' Perform controller actions
42ddc                 | ' On entry:
42ddc                 | '    hidr_id        report id
42ddc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
42ddc                 | '                      X = hidr_axis+0, #0
42ddc                 | '                      Y = hidr_axis+0, #1
42ddc                 | '                      Z = hidr_axis+1, #0
42ddc                 | '                     RX = hidr_axis+1, #1
42ddc                 | '                     RY = hidr_axis+2, #0
42ddc                 | '                     RZ = hidr_axis+2, #1
42ddc                 | '                     Sl = hidr_axis+3, #0
42ddc                 | '                     Wh = hidr_axis+3, #1
42ddc                 | '    hidr_buttons   buttons state (bits 0 to 31)
42ddc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
42ddc                 | '
42ddc                 | '                     -------3 -------2 -------1 -------0 byte
42ddc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
42ddc                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
42ddc                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
42ddc                 | '                              |||||||| ||||++++--------- n. axes
42ddc                 | '                              |||||||| ++++------------- n. hats
42ddc                 | '                              ++++++++------------------ valid axes
42ddc                 | '------------------------------------------------------------------------------
42ddc                 | hpad_translate
42ddc                 | 
42ddc                 | 
42ddc                 |         if HAVE_HIDPAD
42ddc     98 0C F0 FE |                 loc     ptrb,#hidpad_report
42de0     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
42de4     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
42de8     01 72 E7 F2 |                 cmpsub  htmp,#1
42dec     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
42df0     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
42df4     2D 00 7C 3D |         if_ae   ret     wcz
42df8     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
42dfc     B9 F3 03 F1 |                 add     ptrb,htmp
42e00     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
42e04     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
42e08     28 0E 64 FD |                 setq    #8-1
42e0c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
42e10                 |         end
42e10                 | 
42e10                 | 
42e10                 |         if EMUPAD_MAX_PLAYER > 0
42e10                 | .emupad_no_hat
42e10                 |         if EMUPAD_BT0_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT1_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT2_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT3_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT4_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT5_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT6_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT7_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT8_BIT >= 0
42e10                 |         end
42e10                 |         if EMUPAD_BT9_BIT >= 0
42e10                 |         end
42e10                 | .emupad_slot_over
42e10                 |         end
42e10                 | 
42e10                 |         if 0
42e10                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
42e10                 | 
42e10                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
42e10                 | 
42e10                 |         end
42e10     2D 00 64 FD |                 ret
42e14                 | end
42e14                 | 
42e14                 | if EMUPAD_MAX_PLAYER > 0
42e14                 | '------------------------------------------------------------------------------
42e14                 | ' Clear EmuPad state
42e14                 | '------------------------------------------------------------------------------
42e14                 | emupad_reset
42e14                 | 
42e14                 | '------------------------------------------------------------------------------
42e14                 | ' Get EmuPad Player number for current device (into retval)
42e14                 | ' Z flag is also set if current device is valid
42e14                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
42e14                 | '------------------------------------------------------------------------------
42e14                 | emupad_getnum
42e14                 | .loop
42e14                 | '------------------------------------------------------------------------------
42e14                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
42e14                 | '------------------------------------------------------------------------------
42e14                 | emupad_discon
42e14                 | .loop         
42e14                 |         
42e14                 |         ' FALL THROUGH!!!
42e14                 | 
42e14                 | '------------------------------------------------------------------------------
42e14                 | ' Update EmuPad reports (all of them...)
42e14                 | '------------------------------------------------------------------------------
42e14                 | emupad_write_reports
42e14                 | .devloop
42e14                 | 
42e14                 | end
42e14                 | 
42e14                 | 
42e14                 | '------------------------------------------------------------------------------
42e14                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
42e14                 | '------------------------------------------------------------------------------
42e14                 | ' On entry:
42e14                 | ' On exit:
42e14                 | '------------------------------------------------------------------------------
42e14                 | hget_hub_status
42e14     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
42e18     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42e1c     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
42e20     01 92 2F F9 |                 setword hpar3, #1, #1
42e24     CF 02 A0 FD |                 call    #do_int_in
42e28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42e2c     0C 00 90 AD |         if_z    jmp     #.data
42e30     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
42e34     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
42e38     2D 00 64 FD |                 ret
42e3c                 | .data
42e3c     00 92 0F F2 |                 cmp     hpar3, #0               wz
42e40     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
42e44                 | 
42e44     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
42e48     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
42e4c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
42e50     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
42e54                 |                 debug(ubin_long(hub_status_chg))
42e54                 | 
42e54     01 5A 06 F6 |                 mov     hdev_port, #1
42e58                 | .loop
42e58     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
42e5c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
42e60     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
42e64     F0 FF 9F 3D |         if_nc   jmp     #.loop
42e68     2D 00 64 FD |                 ret
42e6c                 | 
42e6c                 | hub_port_handler
42e6c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
42e70     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
42e74     27 EF 03 F6 |                 mov     pb, urx_buff_p
42e78     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42e7c     55 02 A0 FD |                 call    #control_read
42e80     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
42e84                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
42e84                 | 
42e84     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
42e88     50 01 90 5D |         if_x0   jmp     #.other
42e8c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
42e90     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
42e94     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42e98     A0 02 A0 FD |                 call    #control_write
42e9c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
42ea0     7C 01 90 5D |         if_x0   jmp     #.disconnect
42ea4     B1 99 02 F6 |                 mov     hctwait, _100ms_
42ea8     EF 02 A0 FD |                 call    #poll_waitx
42eac                 | 
42eac     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
42eb0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
42eb4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42eb8     A0 02 A0 FD |                 call    #control_write
42ebc                 | 
42ebc     02 78 07 F6 |                 mov     htmp3, #2
42ec0                 | .wait_reset
42ec0     AD 99 02 F6 |                 mov     hctwait, _8ms_
42ec4     EF 02 A0 FD |                 call    #poll_waitx
42ec8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
42ecc     27 EF 03 F6 |                 mov     pb, urx_buff_p
42ed0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42ed4     55 02 A0 FD |                 call    #control_read
42ed8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
42edc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
42ee0     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
42ee4                 | 
42ee4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
42ee8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
42eec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42ef0     A0 02 A0 FD |                 call    #control_write
42ef4                 | 
42ef4     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
42ef8                 | .wait_recover
42ef8     A8 99 02 F6 |                 mov     hctwait, _1ms_
42efc     EF 02 A0 FD |                 call    #poll_waitx
42f00     FD 73 6F FB |                 djnz    htmp,#.wait_recover
42f04                 | 
42f04     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
42f08     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
42f0c     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
42f10                 | 
42f10     00 08 00 FF 
42f14     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
42f18     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
42f1c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
42f20     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
42f24     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
42f28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42f2c     48 01 90 5D |         if_nz   jmp     #.done
42f30                 | .get_dev_desc
42f30     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
42f34     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
42f38     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
42f3c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
42f40     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
42f44     01 73 57 FC |                 wrword  htmp, ptra[wValue]
42f48     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
42f4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42f50     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
42f54     AD 99 02 F6 |                 mov     hctwait, _8ms_
42f58     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
42f5c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
42f60     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
42f64     BE 00 A0 FD |                 call    #calc_crc5
42f68     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
42f6c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
42f70     F7 AD C2 FA |                 rdbyte  total_data, pb
42f74     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
42f78     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
42f7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42f80     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
42f84     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
42f88     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
42f8c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
42f8c     A0 99 02 F6 |                 mov     hctwait, _500us_
42f90     EF 02 A0 FD |                 call    #poll_waitx
42f94     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
42f98     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
42f9c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
42fa0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
42fa4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42fa8     CC 00 90 5D |         if_nz   jmp     #.done
42fac     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
42fb0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
42fb4     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
42fb8     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
42fbc     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
42fc0     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
42fc4     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
42fc8     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
42fcc     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
42fd0     A4 00 90 CD |         if_b    jmp     #.done
42fd4     60 F0 BF FD |                 call    #hparse_con_desc
42fd8     9C 00 90 FD |                 jmp     #.done
42fdc                 | 
42fdc                 | .other
42fdc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
42fe0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
42fe4     28 00 90 AD |         if_x1   jmp     #.reset_feature
42fe8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
42fec     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
42ff0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
42ff4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
42ff8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
42ffc     10 00 90 AD |         if_x1   jmp     #.reset_feature
43000     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
43004     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
43008     04 00 90 AD |         if_x1   jmp     #.reset_feature
4300c     68 00 90 FD |                 jmp     #.done
43010                 | .reset_feature
43010     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
43014     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
43018     A0 02 A0 FD |                 call    #control_write
4301c     58 00 90 FD |                 jmp     #.done
43020                 | .disconnect
43020                 | 
43020     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
43024     00 72 E3 F8 |                 getbyte htmp
43028     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
4302c     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
43030     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
43034     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
43038     00 76 06 A6 |         if_z    mov     kb_led_states, #0
4303c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
43040                 |         if EMUPAD_MAX_PLAYER > 0
43040                 |         end
43040                 |         if HAVE_MOUSE
43040     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
43044     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
43048     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
4304c                 |         end
4304c                 |         if HAVE_HIDPAD
4304c     28 0A F0 FE |                 loc ptrb,#hidpad_report
43050     2D 73 03 F6 |                 mov htmp,hdev_port
43054     01 72 E7 F2 |                 cmpsub htmp,#1
43058     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
4305c     B9 F3 03 F1 |                 add ptrb,htmp
43060     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
43064     80 01 6C FC |                 wrlong #0,ptrb
43068                 |         end
43068                 | 
43068     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
4306c     00 00 C4 F8 |                 setbyte #0
43070     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
43074     00 00 04 F6 |                 mov     0-0, #0
43078                 | 
43078                 | .done
43078     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
4307c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
43080     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
43084     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
43088     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
4308c     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
43090                 | 
43090     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
43094     27 EF 03 F6 |                 mov     pb, urx_buff_p
43098     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
4309c     55 02 A0 FD |                 call    #control_read
430a0     00 69 06 FB |                 rdlong  hub_port_status, ptra
430a4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
430a4     2D 00 64 FD |                 ret
430a8                 | 
430a8                 | '------------------------------------------------------------------------------
430a8                 | ' Partially populated SETUP packets
430a8                 | '------------------------------------------------------------------------------
430a8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
430a9     06          |                 byte    REQ_GET_DESC
430aa     00 01       |                 word    TYPE_DEVICE << 8
430ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
430ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
430b0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
430b1     06          |                 byte    REQ_GET_DESC
430b2     00 02       |                 word    TYPE_CONFIG << 8
430b4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
430b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
430b8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
430b9     09          |                 byte    REQ_SET_CONFIG
430ba     00 00       |                 word    0       ' Configuration value
430bc     00 00       |                 word    0       ' Zero
430be     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
430c0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
430c1     05          |                 byte    REQ_SET_ADDR
430c2     00 00       |                 word    0       ' Zero
430c4     00 00       |                 word    0       ' Zero
430c6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
430c8                 | '------------------------------------------------------------------------------
430c8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
430c8                 | ' wValue field dictates which protocol should be used.
430c8                 | '
430c8                 | ' When initialized, all devices default to report protocol. However the host
430c8                 | ' should not make any assumptions about the device state and should set the
430c8                 | ' desired protocol whenever initializing a device.
430c8                 | '------------------------------------------------------------------------------
430c8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
430c9     0B          |                 byte    HID_SET_PROTO
430ca     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
430cc                 |                                                 ' (HID 1.11 Section 7.2.6).
430cc     00 00       |                 word    0               ' Interface index number.
430ce     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
430d0                 | '------------------------------------------------------------------------------
430d0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
430d1     0A          |                 byte    HID_SET_IDLE
430d2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
430d4                 |                                         ' reporting until a change is detected in the report data
430d4                 | 
430d4                 |                                         ' (HID 1.11 Section 7.2.4).
430d4     00 00       |                 word    0       ' Interface index number.
430d6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
430d8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
430d9     09          |                 byte    HID_SET_REPORT
430da     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
430dc                 |                                         ' (HID 1.11 Section 7.2.2).
430dc     00 00       |                 word    0       ' Interface index number.
430de     00 00       |                 word    0       ' Size of the report, in bytes.
430e0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
430e1     06          |                 byte    REQ_GET_DESC
430e2     00 22       |                 word    TYPE_REPORT << 8
430e4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
430e6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
430e8                 | '------------------------------------------------------------------------------
430e8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
430e9     06          |                 byte    REQ_GET_DESC
430ea     00 29       |                 word    TYPE_HUB << 8
430ec     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
430ee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
430f0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
430f1     03          |                 byte    REQ_SET_FEATURE
430f2     00 00       |                 word    0       ' port power
430f4     01 00       |                 word    1       ' Port index number (1+)
430f6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
430f8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
430f9     01          |                 byte    REQ_CLEAR_FEATURE
430fa     00 00       |                 word    0       ' port power
430fc     01 00       |                 word    1       ' Port index number (1+)
430fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
43100     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
43101     00          |                 byte    REQ_GET_STATUS
43102     00 00       |                 word    0
43104     01 00       |                 word    1       ' Port index number (1+)
43106     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
43108                 | '------------------------------------------------------------------------------
43108                 | if _HAVE_GAMEPAD
43108     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
4310c                 | ps3_command_buff
4310c     00 00 00 00 
43110     00          |                 byte    $00, $00, $00, $00, $00
43111     00 00 00 00 
43115     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
43116     FF 27 10 00 
4311a     32          |                 byte    $FF, $27, $10, $00, $32
4311b     FF 27 10 00 
4311f     32          |                 byte    $FF, $27, $10, $00, $32
43120     FF 27 10 00 
43124     32          |                 byte    $FF, $27, $10, $00, $32
43125     FF 27 10 00 
43129     32          |                 byte    $FF, $27, $10, $00, $32
4312a     00 00 00 00 
4312e     00          |                 byte    $00, $00, $00, $00, $00
4312f     00 00 00 00 
43133     00          |                 byte    $00, $00, $00, $00, $00
43134     00 00 00 00 
43138     00          |                 byte    $00, $00, $00, $00, $00
43139     00 00 00    |                 byte    $00, $00, $00
4313c                 | '------------------------------------------------------------------------------
4313c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
4313f                 |                                         ' 0x01 All blinking
4313f                 |                                         ' 0x02 1 flashes, then on
4313f                 |                                         ' 0x03 2 flashes, then on
4313f                 |                                         ' 0x04 3 flashes, then on
4313f                 |                                         ' 0x05 4 flashes, then on
4313f                 |                                         ' 0x06 1 on
4313f                 |                                         ' 0x07 2 on
4313f                 |                                         ' 0x08 3 on
4313f                 |                                         ' 0x09 4 on
4313f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
4313f                 |                                         ' 0x0B Blinking*
4313f                 |                                         ' 0x0C Slow blinking*
4313f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
4313f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
43142     00          |                 byte    $00             ' Left rumble
43143     00          |                 byte    $00             ' Right rumble
43144     00 00 00    |                 byte    $00, $00, $00
43147     00          | end
43148                 | alignl
43148                 | 
43148                 | if HAVE_MOUSE
43148     00 00 00 00 
4314c     00 00 00 00 | mouse_limits long 0[2]
43150     00 00 00 00 | mouse_outptr long 0
43154                 | end
43154                 | 
43154                 | if KEYQUEUE_SIZE > 0
43154     00          | keyq_head byte 0
43155     00          | keyq_tail byte 0
43156     00 00 00 00 
      ...             
43352     00 00 00 00 
43356     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
43358                 | alignl
43358                 | end
43358                 | 
43358                 | if EMUPAD_MAX_PLAYER > 0
43358                 | emupad_rule_buffer
43358                 | if EMUPAD_BUILTIN_RULES
43358                 | file "padmap_builtin.dat"
43358                 | end
43358                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
43358                 | '' Default rule directly follows!
43358                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
43358                 | end
43358                 | 
43358                 | '------------------------------------------------------------------------------
43358                 | ' The USB data cache area gets zero-filled at every device disconnect
43358                 | '------------------------------------------------------------------------------
43358                 | usb_cache_start
43358                 | 
43358                 | ' HID descriptor and report buffers
43358                 | if !!OVERLAP_MEMORY
43358     00 00 00 00 
      ...             
43a50     00 00 00 00 
43a54     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
43a58                 | end
43a58     00 00 00 00 
43a5c     00 00 00 00 | hkbd_report     byte    0[8]
43a60     00 00 00 00 | hkbd_led_rep    byte    0
43a64                 | alignl
43a64                 | 
43a64     00 00 00 00 
43a68     00 00 00 00 
43a6c     00 00 00 00 
43a70     00 00 00 00 
43a74     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
43a78                 | 
43a78                 | if HAVE_HIDPAD
43a78     00 00 00 00 
      ...             
43b50     00 00 00 00 
43b54     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
43b58                 | end
43b58                 | 
43b58                 | ' HUB descriptor
43b58     00          | hub_descr       byte    0   ' bDescLength
43b59     00          |                 byte    0   ' bDescriptorType
43b5a     00          |                 byte    0   ' bNbrPorts
43b5b     00 00       |                 word    0   ' wHubCharacteristics
43b5d     00          |                 byte    0   ' bPwrOn2PwrGood
43b5e     00          |                 byte    0   ' bHubContrCurrent
43b5f     00          |                 byte    0   ' DeviceRemoveable
43b60     00          |                 byte    0   ' PortPwrCtrlMask
43b61                 | 
43b61                 | usb_cache_end
43b61                 | 
43b61                 | if HAVE_MOUSE
43b61     00 00 00 00 | mouse_xacc      long 0
43b65     00 00 00 00 | mouse_yacc      long 0
43b69     00 00 00 00 | mouse_zacc      long 0
43b6d     00          | mouse_bstate    byte 0
43b6e     00          | mouse_lpending  byte 0
43b6f     00          | mouse_rpending  byte 0
43b70     00          | mouse_mpending  byte 0
43b71     00          | mouse_lock      byte 0
43b72     00 00 00    |                 byte 0[3] ' padding
43b75                 | end
43b75                 | 
43b75     00 00 00 00 
      ...             
43bed     00 00 00 00 
43bf1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
43bf5     00 00 00 00 
43bf9     00 00 00 00 
43bfd     00 00 00 00 
43c01     00 00 00 00 
43c05     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
43c07     00 00 00 00 
      ...             
43cff     00 00 00 00 
43d03     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
43d07                 | 
43d07     00          | driver_cog      byte    0                       ' Current driver cog + 1
43d08                 | 	alignl
43d08                 | _audio096_spin2_dat_
43d08                 | 
43d08                 | audio       org     0
43d08                 | 
43d08     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
43d0c     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
43d10     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
43d14                 |  
43d14     01 EC 63 FD |             cogid   pa                   ' compute cogid
43d18     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
43d1c     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
43d20     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
43d24                 | 
43d24     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
43d28     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
43d2c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
43d30     0F 24 06 FC |             wrpin   dac2,#right
43d34     0F 00 1E FC |             wxpin   #256,#right    
43d38     41 9C 64 FD |             dirh    #left addpins 1
43d3c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
43d40     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
43d44     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
43d48                 |             
43d48                 | '---------------------------------------------------------------------------------        
43d48                 | '----------------- The main loop -------------------------------------------------
43d48                 | '---------------------------------------------------------------------------------
43d48                 | 
43d48     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
43d4c     10 00 90 CD |       if_c  jmp     #loop1
43d50                 |   
43d50     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
43d54     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
43d58     D5 00 80 F1 |             sub     0-0,a40000000
43d5c     FD 01 6E FB |             djnz    cn,#p402
43d60                 |     
43d60     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
43d64     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
43d68     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
43d6c     01 00 06 C6 |     if_c    mov     cn,#1
43d70     DA 02 3A F3 |             fle     ct,time3 wcz
43d74     02 00 06 C6 |     if_c    mov     cn,#2     
43d78     DB 02 3A F3 |             fle     ct,time4 wcz
43d7c     03 00 06 C6 |     if_c    mov     cn,#3
43d80     DC 02 3A F3 |             fle     ct,time5 wcz
43d84     04 00 06 C6 |     if_c    mov     cn,#4
43d88     DD 02 3A F3 |             fle     ct,time6 wcz
43d8c     05 00 06 C6 |     if_c    mov     cn,#5
43d90     DE 02 3A F3 |             fle     ct,time7 wcz
43d94     06 00 06 C6 |     if_c    mov     cn,#6
43d98     DF 02 3A F3 |             fle     ct,time8 wcz
43d9c     07 00 06 C6 |     if_c    mov     cn,#7
43da0                 | 
43da0                 | 
43da0                 | '----------------------------------------------------------------------------------
43da0                 | '------------- Compute channel samples --------------------------------------------
43da0                 | '----------------------------------------------------------------------------------
43da0                 | 
43da0                 | 
43da0     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
43da4     06 C0 65 F0 |             shl     channeladd,#6
43da8     E0 F0 03 F1 |             add     ptra,channeladd
43dac                 | 
43dac     28 16 64 FD |             setq    #11                        	' read parameters
43db0     00 D7 05 FB |             rdlong  pointer0,ptra
43db4                 |     	    
43db4     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
43db8     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
43dbc     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
43dc0     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
43dc4     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
43dc8     00 C4 0D F2 |             cmp     qq,#0 wz                         
43dcc     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
43dd0     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
43dd4                 |             
43dd4     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
43dd8     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
43ddc     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
43de0                 | 
43de0     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
43de4     EC 08 3A F9 |             getword oldrs,sample0,#1
43de8     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
43dec     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
43df0     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
43df4     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
43df8                 | 
43df8     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
43dfc     00 04 02 F6 |             mov     dt0,0-0    
43e00     D7 04 82 F1 |             sub     dt0,time0
43e04                 |             
43e04     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
43e08     FB 00 00 F1 |             add     0-0,afreq0  	
43e0c                 |             
43e0c                 | '---- envelopes
43e0c                 |             
43e0c     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
43e10     20 00 00 AF 
43e14     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
43e18     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
43e1c                 | 
43e1c     FB 48 02 F6 |             mov     envs1,afreq0
43e20     F5 48 02 FA |             mul     envs1,envspd0
43e24     24 E7 01 F1 |             add     envph0,envs1 
43e28                 | 
43e28     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
43e2c     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
43e30     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
43e34     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
43e38     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
43e3c     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
43e40     00 46 06 36 |     if_ge   mov     envlo,#0
43e44     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
43e48     16 E6 65 30 |     if_ge   shl     envph0,#22
43e4c                 | 
43e4c     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
43e50     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
43e54     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
43e58     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
43e5c     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
43e60     24 49 32 F9 |             getword envs1,envs1,#0		' current value
43e64     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
43e68     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
43e6c     23 49 02 FA |             mul     envs1,envlo
43e70     25 49 02 F1 |             add     envs1,envs2
43e74     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
43e78                 |             
43e78     1B DA 0D F4 | p410        testb   sstart0, #27 wz
43e7c     1B C6 61 AD |     if_z    getrnd  spl
43e80     58 00 90 AD |     if_z    jmp     #p406
43e84                 |  
43e84     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
43e88     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
43e8c     08 D6 45 F0 |             shr     pointer0,#8
43e90                 |          
43e90     1F DA 0D F4 |             testb   sstart0,#31 wz            
43e94     01 D6 65 A0 |     if_z    shl     pointer0,#1        
43e98     1C DA 0D F4 |             testb   sstart0,#28 wz            
43e9c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
43ea0                 |         
43ea0     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
43ea4     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
43ea8     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
43eac                 |             
43eac     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
43eb0     ED C4 01 F1 |             add     qq,sstart0            
43eb4                 | 
43eb4     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
43eb8     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
43ebc     1C 01 B0 1D |     if_gt   call    #cache_read
43ec0                 |          
43ec0     1F DA 0D F4 |             testb   sstart0,#31 wz 
43ec4     08 C6 65 50 |     if_nz   shl     spl,#8
43ec8     08 D6 65 50 |     if_nz   shl     pointer0,#8
43ecc     07 D6 65 A0 |     if_z    shl     pointer0,#7
43ed0     1C DA 0D F4 |             testb   sstart0,#28 wz            
43ed4     01 D6 45 A0 |     if_z    shr     pointer0,#1    
43ed8     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
43edc                 | 
43edc                 | 
43edc     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
43ee0     00 C6 01 F6 |             mov     spl,0-0
43ee4     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
43ee8     00 C6 01 F6 |             mov     spl,0-0
43eec                 | 
43eec     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
43ef0     00 0A 02 F6 |             mov     ls0,0-0
43ef4     20 00 00 FF 
43ef8     00 C4 05 F6 |             mov     qq,##16384
43efc     FE C4 81 F1 |             sub     qq,apan0
43f00     E2 C6 31 FA |             scas    spl,qq
43f04     00 0C 02 F6 |             mov     rs0, 0-0
43f08                 | 
43f08     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
43f0c     06 11 02 F1 |             add     rs,rs0
43f10     03 0F 82 F1 |             sub     ls,oldls
43f14     05 0F 02 F1 |             add     ls,ls0
43f18                 |    
43f18     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
43f1c     05 D9 21 F9 |             setword sample0,ls0,#0
43f20                 |             
43f20     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
43f24     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
43f28     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
43f2c                 |   '  if_z    mov     sample0,#0
43f2c     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
43f30     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
43f34     04 00 00 AF 
43f38     00 B0 05 A1 |     if_z    add     time1,##2048
43f3c     D8 B2 01 A6 |     if_z    mov     time2,time1
43f40     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
43f44                 | 
43f44     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
43f48     00 D7 65 FC |             wrlong  pointer0,ptra
43f4c     08 E7 65 FC |             wrlong  envph0,ptra[8]
43f50     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
43f54                 |                       
43f54     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
43f58     FF C3 25 A7 |     if_z    decmod  front, #511          
43f5c                 |          
43f5c     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
43f60     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
43f64     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
43f68     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
43f6c                 | 	    
43f6c                 | 		    
43f6c     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
43f70     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
43f74     04 15 02 F6 |             mov     newsample, oldrs       
43f78                 | 
43f78     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
43f7c     02 AF 01 F1 |             add     time0,dt0    
43f80                 |                                      
43f80     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
43f84     D8 FD 9F AD |     if_z    jmp     #loop1
43f88     02 C5 01 F6 |             mov     qq,dt0
43f8c                 | 
43f8c                 |     
43f8c                 |             
43f8c     01 4E 36 F0 | p301        rol     dropper,#1 wc
43f90     40 00 90 3D |     if_nc   jmp     #p399
43f94     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
43f98     00 C2 9D F2 |             cmpr    front, #0-0 wcz
43f9c     F4 FF 9F AD |     if_e    jmp     #p398   
43fa0                 | 		
43fa0     00 1A 0E F2 | 	    cmp     scbase,#0 wz
43fa4     20 00 90 AD |     if_z    jmp     #p302	   
43fa8                 |   
43fa8     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
43fac     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
43fb0     02 1E 66 C0 |     if_c    shl     scptr2,#2
43fb4     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
43fb8     60 1E 66 FC |             wrlong  scptr2,#$60
43fbc     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
43fc0     01 00 00 CF 
43fc4     7F 1C 06 C7 |     if_c    incmod  scptr,##639
43fc8                 | 			    
43fc8     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
43fcc     00 00 00 FF 
43fd0     FF C3 05 F7 |             incmod  front, ##511
43fd4     ED C5 6D FB | p399        djnz    qq,#p301
43fd8                 |             
43fd8     6C FD 9F FD |             jmp     #loop            'loop
43fdc                 | 
43fdc                 | '----------------------------------------------------------------------------------
43fdc                 | '------------- This is the end of the main loop -----------------------------------
43fdc                 | '----------------------------------------------------------------------------------
43fdc                 | 
43fdc                 | '----------------------------------------------------------------------------------
43fdc                 | '------------- PSRAM cache ----------- --------------------------------------------
43fdc                 | '----------------------------------------------------------------------------------
43fdc                 | 
43fdc                 | ' There are 8 cache pointers for 8 channels
43fdc                 | ' if 24 higher bits of address=cache, then get a word from the cache
43fdc                 | ' else load the cache from PSRAM, update the pointer, then read a sample
43fdc                 | 
43fdc                 | 
43fdc     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
43fe0                 |             
43fe0     E2 40 02 F6 | 	    mov     addrhi,qq		
43fe4     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
43fe8     14 01 96 F9 | 	    alts    cn,#cache1            
43fec     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
43ff0     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
43ff4                 | 	
43ff4     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
43ff8     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
43ffc     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
44000     08 38 66 F0 | 	    shl     cmd,#8
44004     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
44008     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
4400c     08 3A 66 F0 |             shl     hubaddr,#8                  '
44010     13 3B 02 F1 |             add     hubaddr,hubptr 
44014     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
44018     28 04 64 FD |             setq    #2                          ' write 3 longs
4401c     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
44020     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
44024     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
44028                 |             
44028                 | 	
44028     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
4402c     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
44030     13 C5 01 F1 | 	    add     qq,hubptr
44034     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
44038     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
4403c                 |           
4403c                 | 
4403c                 | '--------------------------------------------------------------------------
4403c                 | '------ Interrupt service -------------------------------------------------
4403c                 | '------ Output the sample, get the next one if exists ---------------------
4403c                 | '--------------------------------------------------------------------------
4403c                 | 
4403c     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
44040     0F D0 25 FC |             wypin   rsample,#right       '4
44044     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
44048     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
4404c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
44050     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
44054     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
44058                 |     
44058     F5 FF 3B FB |             reti1                        '17/19 
4405c                 |           
4405c                 | '---------------------------------------------------------------------------
4405c                 | '-------- End of interrupt -------------------------------------------------
4405c                 | '---------------------------------------------------------------------------    
4405c                 | 
4405c                 | 
4405c                 | '---------------------------------------------------------------------------
4405c                 | '------- Variables ---------------------------------------------------------
4405c                 | '---------------------------------------------------------------------------
4405c                 | 
4405c                 | ' constants
4405c                 | 
4405c     00 00 00 40 | a40000000   long $40000000
44060     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
44064                 | 
44064                 | ' Time variables
44064                 | 
44064     00 00 00 00 | time0       long 0    ' Global sample computing time
44068     01 00 00 00 | time1       long 1    ' Local channels time
4406c     02 00 00 00 | time2       long 2
44070     03 00 00 00 | time3       long 3
44074     04 00 00 00 | time4       long 4
44078     05 00 00 00 | time5       long 5
4407c     06 00 00 00 | time6       long 6
44080     07 00 00 00 | time7       long 7
44084     08 00 00 00 | time8       long 8
44088                 | 
44088     00 00 00 00 | channeladd long 0
4408c                 | 
4408c     00 00 00 00 | front       long 0
44090                 | 
44090                 | ' temporary variables 
44090     00 00 00 00 | qq          long 0
44094     00 00 00 00 | spl         long 0
44098     00 00 00 00 | zero        long 0
4409c     00 00 00 00 | mailbox     long 0
440a0     00 00 00 00 | mailbox2 long 0
440a4                 | 
440a4                 | ' Interrupt ISR variables
440a4                 | 
440a4     00 00 00 00 | lsample     long 0
440a8     00 00 00 00 | rsample     long 0
440ac     00 00 00 00 | lsnext      long 0
440b0     00 00 00 00 | rsnext      long 0 
440b4                 | 
440b4                 | ' channel parameter block
440b4                 | 
440b4     00 00 00 00 | pointer0    long 0     
440b8     00 00 00 00 | sample0     long 0
440bc     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
440c0     00 00 00 00 | lstart0     long 0
440c4     00 00 00 00 | lend0       long 0
440c8     00 00 00 00 | volpan0     long 0
440cc     00 00 00 00 | freqskip0   long 0
440d0     00 00 00 00 | command0    long 0
440d4     00 00 00 00 | envph0	    long 0
440d8     00 00 00 00 | envptr0	    long 0
440dc     00 00 00 00 | envspd0	    long 0
440e0     00 00 00 00 | envlen0	    long 0
440e4     00 00 00 00 | res5	    long 0
440e8     00 00 00 00 | res6	    long 0
440ec     00 00 00 00 | res7	    long 0
440f0     00 00 00 00 | res8	    long 0
440f4                 | 
440f4     00 00 00 00 | afreq0      long 0
440f8     00 00 00 00 | askip0      long 0
440fc     00 00 00 00 | avol0       long 0
44100     00 00 00 00 | apan0       long 0
44104                 | 
44104     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
44108     00 00 00 00 | cn          long 0
4410c     00 00 00 00 | ct          long 0
44110     00 00 00 00 | dt0         long 0
44114                 | 
44114                 | ' Samples
44114     00 00 00 00 | oldls       long 0
44118     00 00 00 00 | oldrs       long 0
4411c                 | 
4411c     00 00 00 00 | ls0         long 0
44120     00 00 00 00 | rs0         long 0
44124                 | 
44124     00 00 00 00 | ls          long 0    
44128     00 00 00 00 | rs          long 0
4412c                 | 
4412c     00 00 00 00 | oldsample   long 0
44130     00 00 00 00 | newsample   long 0
44134                 | 
44134     00 00 00 00 | nrsample    long 0
44138     00 00 00 00 | nlsample    long 0
4413c                 | 
4413c     00 00 00 00 | scbase long 0
44140     00 00 00 00 | scptr long 0
44144     00 00 00 00 | scptr2 long 0
44148     00 00 00 00 | scope long 0
4414c                 | 
4414c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
44150     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
44154                 | 
44154     00 18 07 00 | hubptr      long $71800
44158     00 00 00 00 | cache1      long 0
4415c     00 00 00 00 | cache2      long 0
44160     00 00 00 00 | cache3      long 0
44164     00 00 00 00 | cache4      long 0
44168     00 00 00 00 | cache5      long 0
4416c     00 00 00 00 | cache6      long 0
44170     00 00 00 00 | cache7      long 0
44174     00 00 00 00 | cache8      long 0
44178                 | 
44178                 | 
44178     00 00 00 00 | cmd         long 0
4417c     00 00 00 00 | hubaddr     long 0
44180     00 01 00 00 | count       long 256
44184     00 00 00 00 | addrlo long 0
44188     00 00 00 00 | addrhi long 0
4418c     00 00 00 00 | pointer00 long 0
44190     00 00 00 00 | envhi long 0
44194     00 00 00 00 | envlo long 0
44198     00 00 00 00 | envs1 long 0
4419c     00 00 00 00 | envs2 long 0
441a0     00 00 00 00 | noise0 long 0
441a4     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
441a8     00 00 00 00 
441ac     00 00 00 00 | null  			long 	0,0           ' for channel reset
441b0                 | 	alignl
441b0                 | __system__dat_
441b0     00 00 00 00 
441b4     00 00 00 00 | 	byte	$00[8]
441b8     03 00 00 00 
441bc     00 00 00 00 
441c0     00 00 00 00 
441c4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
441c8     00 00 00 00 
      ...             
44454     00 00 00 00 
44458     00 00 00 00 | 	byte	$00[660]
4445c     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
44460     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
44464     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
44468     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
4446c     00 00 00 00 
44470     00 00 00 00 
44474     00 00 00 00 
44478     00 00 00 00 
4447c     00 00 00 00 
44480     00 00 00 00 
44484     00 00 00 00 | 	byte	$00[28]
44488     F0 44 04 00 | 	long	@@@__system__dat_ + 832
4448c     F3 44 04 00 | 	long	@@@__system__dat_ + 835
44490     14 45 04 00 | 	long	@@@__system__dat_ + 868
44494     2D 45 04 00 | 	long	@@@__system__dat_ + 893
44498     48 45 04 00 | 	long	@@@__system__dat_ + 920
4449c     62 45 04 00 | 	long	@@@__system__dat_ + 946
444a0     72 45 04 00 | 	long	@@@__system__dat_ + 962
444a4     84 45 04 00 | 	long	@@@__system__dat_ + 980
444a8     96 45 04 00 | 	long	@@@__system__dat_ + 998
444ac     A8 45 04 00 | 	long	@@@__system__dat_ + 1016
444b0     B4 45 04 00 | 	long	@@@__system__dat_ + 1028
444b4     C5 45 04 00 | 	long	@@@__system__dat_ + 1045
444b8     D9 45 04 00 | 	long	@@@__system__dat_ + 1065
444bc     E3 45 04 00 | 	long	@@@__system__dat_ + 1075
444c0     F3 45 04 00 | 	long	@@@__system__dat_ + 1091
444c4     02 46 04 00 | 	long	@@@__system__dat_ + 1106
444c8     18 46 04 00 | 	long	@@@__system__dat_ + 1128
444cc     31 46 04 00 | 	long	@@@__system__dat_ + 1153
444d0     45 46 04 00 | 	long	@@@__system__dat_ + 1173
444d4     53 46 04 00 | 	long	@@@__system__dat_ + 1187
444d8     67 46 04 00 | 	long	@@@__system__dat_ + 1207
444dc     73 46 04 00 | 	long	@@@__system__dat_ + 1219
444e0     85 46 04 00 | 	long	@@@__system__dat_ + 1237
444e4     9D 46 04 00 | 	long	@@@__system__dat_ + 1261
444e8     AF 46 04 00 | 	long	@@@__system__dat_ + 1279
444ec     C2 46 04 00 | 	long	@@@__system__dat_ + 1298
444f0     4F 4B 00 4E 
444f4     75 6D 65 72 
444f8     69 63 61 6C 
444fc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
44500     75 6D 65 6E 
44504     74 20 6F 75 
44508     74 20 6F 66 
4450c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
44510     61 69 6E 00 
44514     52 65 73 75 
44518     6C 74 20 6E 
4451c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
44520     65 70 72 65 
44524     73 65 6E 74 
44528     61 62 6C 65 
4452c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
44530     65 67 61 6C 
44534     20 6D 75 6C 
44538     74 69 62 79 
4453c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
44540     65 71 75 65 
44544     6E 63 65 00 
44548     4E 6F 20 73 
4454c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
44550     66 69 6C 65 
44554     20 6F 72 20 
44558     64 69 72 65 
4455c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
44560     79 00 42 61 
44564     64 20 66 69 
44568     6C 65 20 6E 
4456c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
44570     72 00 50 65 
44574     72 6D 69 73 
44578     73 69 6F 6E 
4457c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
44580     69 65 64 00 
44584     4E 6F 74 20 
44588     65 6E 6F 75 
4458c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
44590     65 6D 6F 72 
44594     79 00 54 65 
44598     6D 70 6F 72 
4459c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
445a0     66 61 69 6C 
445a4     75 72 65 00 
445a8     46 69 6C 65 
445ac     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
445b0     73 74 73 00 
445b4     49 6E 76 61 
445b8     6C 69 64 20 
445bc     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
445c0     6D 65 6E 74 
445c4     00 54 6F 6F 
445c8     20 6D 61 6E 
445cc     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
445d0     65 6E 20 66 
445d4     69 6C 65 73 
445d8     00 49 2F 4F 
445dc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
445e0     6F 72 00 4E 
445e4     6F 74 20 61 
445e8     20 64 69 72 
445ec     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
445f0     72 79 00 49 
445f4     73 20 61 20 
445f8     64 69 72 65 
445fc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
44600     79 00 52 65 
44604     61 64 20 6F 
44608     6E 6C 79 20 
4460c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
44610     20 73 79 73 
44614     74 65 6D 00 
44618     46 75 6E 63 
4461c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
44620     20 6E 6F 74 
44624     20 69 6D 70 
44628     6C 65 6D 65 
4462c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
44630     00 44 69 72 
44634     65 63 74 6F 
44638     72 79 20 6E 
4463c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
44640     6D 70 74 79 
44644     00 4E 61 6D 
44648     65 20 74 6F 
4464c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
44650     6E 67 00 44 
44654     65 76 69 63 
44658     65 20 6E 6F 
4465c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
44660     65 6B 61 62 
44664     6C 65 00 42 
44668     61 64 20 61 
4466c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
44670     73 73 00 42 
44674     72 6F 6B 65 
44678     6E 20 63 6F 
4467c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
44680     74 69 6F 6E 
44684     00 44 65 76 
44688     69 63 65 20 
4468c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
44690     65 73 6F 75 
44694     72 63 65 20 
44698     62 75 73 79 
4469c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
446a0     73 73 20 64 
446a4     65 76 69 63 
446a8     65 20 6C 69 
446ac     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
446b0     6F 20 73 70 
446b4     61 63 65 20 
446b8     6F 6E 20 64 
446bc     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
446c0     65 00 55 6E 
446c4     6B 6E 6F 77 
446c8     6E 20 65 72 
446cc     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
446d0     00 00 00 00 
446d4     00 00 00 00 
446d8     00 00 00 00 | 	byte	$00[12]
446dc     05 00 00 00 
446e0     00 00 00 00 
446e4     00 00 00 00 
446e8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
446ec     00 00 00 00 | 	byte	$00, $00, $00, $00
446f0     00 00 C0 0C | 	long	(204 {__system___tx})<<20
446f4     00 00 D0 0C | 	long	(205 {__system___rx})<<20
446f8     00 00 00 00 | 	byte	$00, $00, $00, $00
446fc     00 00 E0 0C | 	long	(206 {__system___rxtxioctl_0791})<<20
44700     00 00 F0 0C | 	long	(207 {__system____dummy_flush_0792})<<20
44704     00 00 00 00 
44708     00 00 00 00 | 	byte	$00[8]
4470c     01 00 00 00 
44710     06 00 00 00 
44714     00 00 00 00 
44718     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4471c     00 00 00 00 
44720     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44724     00 00 C0 0C | 	long	(204 {__system___tx})<<20
44728     00 00 D0 0C | 	long	(205 {__system___rx})<<20
4472c     00 00 00 00 | 	byte	$00, $00, $00, $00
44730     00 00 E0 0C | 	long	(206 {__system___rxtxioctl_0791})<<20
44734     00 00 F0 0C | 	long	(207 {__system____dummy_flush_0792})<<20
44738     00 00 00 00 
4473c     00 00 00 00 | 	byte	$00[8]
44740     01 00 00 00 
44744     06 00 00 00 
44748     00 00 00 00 
4474c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
44750     00 00 00 00 
44754     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44758     00 00 C0 0C | 	long	(204 {__system___tx})<<20
4475c     00 00 D0 0C | 	long	(205 {__system___rx})<<20
44760     00 00 00 00 | 	byte	$00, $00, $00, $00
44764     00 00 E0 0C | 	long	(206 {__system___rxtxioctl_0791})<<20
44768     00 00 F0 0C | 	long	(207 {__system____dummy_flush_0792})<<20
4476c     00 00 00 00 
      ...             
448dc     00 00 00 00 
448e0     00 00 00 00 | 	byte	$00[376]
448e4     E8 48 04 00 | 	long	@@@__system__dat_ + 1848
448e8     00 00 00 00 
448ec     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
448f0                 | 	alignl
448f0                 | _fatfs_cc_dat_
448f0     C7 00 FC 00 
448f4     E9 00 E2 00 
448f8     E4 00 E0 00 
448fc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
44900     EA 00 EB 00 
44904     E8 00 EF 00 
44908     EE 00 EC 00 
4490c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
44910     C9 00 E6 00 
44914     C6 00 F4 00 
44918     F6 00 F2 00 
4491c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
44920     FF 00 D6 00 
44924     DC 00 F8 00 
44928     A3 00 D8 00 
4492c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
44930     E1 00 ED 00 
44934     F3 00 FA 00 
44938     F1 00 D1 00 
4493c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
44940     BF 00 AE 00 
44944     AC 00 BD 00 
44948     BC 00 A1 00 
4494c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
44950     91 25 92 25 
44954     93 25 02 25 
44958     24 25 C1 00 
4495c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
44960     A9 00 63 25 
44964     51 25 57 25 
44968     5D 25 A2 00 
4496c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
44970     14 25 34 25 
44974     2C 25 1C 25 
44978     00 25 3C 25 
4497c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
44980     5A 25 54 25 
44984     69 25 66 25 
44988     60 25 50 25 
4498c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
44990     F0 00 D0 00 
44994     CA 00 CB 00 
44998     C8 00 31 01 
4499c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
449a0     CF 00 18 25 
449a4     0C 25 88 25 
449a8     84 25 A6 00 
449ac     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
449b0     D3 00 DF 00 
449b4     D4 00 D2 00 
449b8     F5 00 D5 00 
449bc     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
449c0     DE 00 DA 00 
449c4     DB 00 D9 00 
449c8     FD 00 DD 00 
449cc     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
449d0     AD 00 B1 00 
449d4     17 20 BE 00 
449d8     B6 00 A7 00 
449dc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
449e0     B0 00 A8 00 
449e4     B7 00 B9 00 
449e8     B3 00 B2 00 
449ec     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
449f0     61 00 1A 03 
449f4     E0 00 17 03 
449f8     F8 00 07 03 
449fc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
44a00     78 01 00 01 
44a04     30 01 32 01 
44a08     06 01 39 01 
44a0c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
44a10     2E 01 79 01 
44a14     06 01 80 01 
44a18     4D 00 43 02 
44a1c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
44a20     82 01 84 01 
44a24     84 01 86 01 
44a28     87 01 87 01 
44a2c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
44a30     8B 01 8B 01 
44a34     8D 01 8E 01 
44a38     8F 01 90 01 
44a3c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
44a40     93 01 94 01 
44a44     F6 01 96 01 
44a48     97 01 98 01 
44a4c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
44a50     9B 01 9C 01 
44a54     9D 01 20 02 
44a58     9F 01 A0 01 
44a5c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
44a60     A2 01 A4 01 
44a64     A4 01 A6 01 
44a68     A7 01 A7 01 
44a6c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
44a70     AB 01 AC 01 
44a74     AC 01 AE 01 
44a78     AF 01 AF 01 
44a7c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
44a80     B3 01 B3 01 
44a84     B5 01 B5 01 
44a88     B7 01 B8 01 
44a8c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
44a90     BB 01 BC 01 
44a94     BC 01 BE 01 
44a98     F7 01 C0 01 
44a9c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
44aa0     C3 01 C4 01 
44aa4     C5 01 C4 01 
44aa8     C7 01 C8 01 
44aac     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
44ab0     CB 01 CA 01 
44ab4     CD 01 10 01 
44ab8     DD 01 01 00 
44abc     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
44ac0     12 01 F3 01 
44ac4     03 00 F1 01 
44ac8     F4 01 F4 01 
44acc     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
44ad0     22 02 12 01 
44ad4     3A 02 09 00 
44ad8     65 2C 3B 02 
44adc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
44ae0     66 2C 3F 02 
44ae4     40 02 41 02 
44ae8     41 02 46 02 
44aec     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
44af0     40 00 81 01 
44af4     86 01 55 02 
44af8     89 01 8A 01 
44afc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
44b00     5A 02 90 01 
44b04     5C 02 5D 02 
44b08     5E 02 5F 02 
44b0c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
44b10     62 02 94 01 
44b14     64 02 65 02 
44b18     66 02 67 02 
44b1c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
44b20     6A 02 62 2C 
44b24     6C 02 6D 02 
44b28     6E 02 9C 01 
44b2c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
44b30     9D 01 73 02 
44b34     74 02 9F 01 
44b38     76 02 77 02 
44b3c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
44b40     7A 02 7B 02 
44b44     7C 02 64 2C 
44b48     7E 02 7F 02 
44b4c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
44b50     82 02 A9 01 
44b54     84 02 85 02 
44b58     86 02 87 02 
44b5c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
44b60     B1 01 B2 01 
44b64     45 02 8D 02 
44b68     8E 02 8F 02 
44b6c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
44b70     B7 01 7B 03 
44b74     03 00 FD 03 
44b78     FE 03 FF 03 
44b7c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
44b80     86 03 88 03 
44b84     89 03 8A 03 
44b88     B1 03 11 03 
44b8c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
44b90     A3 03 A3 03 
44b94     C4 03 08 03 
44b98     CC 03 03 00 
44b9c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
44ba0     8F 03 D8 03 
44ba4     18 01 F2 03 
44ba8     0A 00 F9 03 
44bac     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
44bb0     F5 03 F6 03 
44bb4     F7 03 F7 03 
44bb8     F9 03 FA 03 
44bbc     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
44bc0     20 03 50 04 
44bc4     10 07 60 04 
44bc8     22 01 8A 04 
44bcc     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
44bd0     0E 01 CF 04 
44bd4     01 00 C0 04 
44bd8     D0 04 44 01 
44bdc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
44be0     00 00 7D 1D 
44be4     01 00 63 2C 
44be8     00 1E 96 01 
44bec     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
44bf0     00 1F 08 06 
44bf4     10 1F 06 06 
44bf8     20 1F 08 06 
44bfc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
44c00     40 1F 06 06 
44c04     51 1F 07 00 
44c08     59 1F 52 1F 
44c0c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
44c10     5D 1F 56 1F 
44c14     5F 1F 60 1F 
44c18     08 06 70 1F 
44c1c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
44c20     BB 1F C8 1F 
44c24     C9 1F CA 1F 
44c28     CB 1F DA 1F 
44c2c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
44c30     F9 1F EA 1F 
44c34     EB 1F FA 1F 
44c38     FB 1F 80 1F 
44c3c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
44c40     08 06 A0 1F 
44c44     08 06 B0 1F 
44c48     04 00 B8 1F 
44c4c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
44c50     BC 1F CC 1F 
44c54     01 00 C3 1F 
44c58     D0 1F 02 06 
44c5c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
44c60     E5 1F 01 00 
44c64     EC 1F F3 1F 
44c68     01 00 FC 1F 
44c6c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
44c70     32 21 70 21 
44c74     10 02 84 21 
44c78     01 00 83 21 
44c7c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
44c80     30 2C 2F 04 
44c84     60 2C 02 01 
44c88     67 2C 06 01 
44c8c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
44c90     80 2C 64 01 
44c94     00 2D 26 08 
44c98     41 FF 1A 03 
44c9c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
44ca0     05 07 09 0E 
44ca4     10 12 14 16 
44ca8     18 1C 1E 43 
44cac     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
44cb0     41 41 43 45 
44cb4     45 45 49 49 
44cb8     49 41 41 45 
44cbc     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
44cc0     4F 55 55 59 
44cc4     4F 55 4F 9C 
44cc8     4F 9E 9F 41 
44ccc     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
44cd0     A5 A6 A7 A8 
44cd4     A9 AA AB AC 
44cd8     AD AE AF B0 
44cdc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
44ce0     41 41 41 B8 
44ce4     B9 BA BB BC 
44ce8     BD BE BF C0 
44cec     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
44cf0     C5 41 41 C8 
44cf4     C9 CA CB CC 
44cf8     CD CE CF D1 
44cfc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
44d00     49 49 49 49 
44d04     D9 DA DB DC 
44d08     DD 49 DF 4F 
44d0c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
44d10     4F E6 E8 E8 
44d14     55 55 55 59 
44d18     59 EE EF F0 
44d1c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
44d20     F5 F6 F7 F8 
44d24     F9 FA FB FC 
44d28     FD FE FF 00 
44d2c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
44d30     00 00 00 00 | 	byte	$00, $00, $00, $00
44d34     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_close})<<20
44d38     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_read})<<20
44d3c     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_write})<<20
44d40     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_lseek})<<20
44d44     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_ioctl})<<20
44d48     00 00 00 0D | 	long	(208 {_fatfs_cc_v_flush})<<20
44d4c     00 00 00 00 
44d50     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44d54     00 00 00 0C | 	long	(192 {_fatfs_cc_v_open})<<20
44d58     00 00 10 0C | 	long	(193 {_fatfs_cc_v_creat})<<20
44d5c     00 00 20 0C | 	long	(194 {_fatfs_cc_v_opendir})<<20
44d60     00 00 30 0C | 	long	(195 {_fatfs_cc_v_closedir})<<20
44d64     00 00 40 0C | 	long	(196 {_fatfs_cc_v_readdir})<<20
44d68     00 00 50 0C | 	long	(197 {_fatfs_cc_v_stat})<<20
44d6c     00 00 60 0C | 	long	(198 {_fatfs_cc_v_mkdir})<<20
44d70     00 00 70 0C | 	long	(199 {_fatfs_cc_v_rmdir})<<20
44d74     00 00 80 0C | 	long	(200 {_fatfs_cc_v_remove})<<20
44d78     00 00 90 0C | 	long	(201 {_fatfs_cc_v_rename})<<20
44d7c     00 00 A0 0C | 	long	(202 {_fatfs_cc_v_init})<<20
44d80     00 00 B0 0C | 	long	(203 {_fatfs_cc_v_deinit})<<20
44d84     FF FF FF FF 
44d88     1F 00 00 00 
44d8c     1C 00 00 00 
44d90     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
44d94     1E 00 00 00 
44d98     1F 00 00 00 
44d9c     1E 00 00 00 
44da0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
44da4     1F 00 00 00 
44da8     1E 00 00 00 
44dac     1F 00 00 00 
44db0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
44db4     1F 00 00 00 
44db8     00 00 00 00 
44dbc     1F 00 00 00 
44dc0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
44dc4     5A 00 00 00 
44dc8     78 00 00 00 
44dcc     97 00 00 00 
44dd0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
44dd4     D4 00 00 00 
44dd8     F3 00 00 00 
44ddc     11 01 00 00 
44de0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
44de4     4E 01 00 00 
44de8     6D 01 00 00 
44dec     FF FF FF FF 
44df0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
44df4     00 00 00 00 
      ...             
44e0c     00 00 00 00 
44e10     00 00 00 00 | 	byte	$00[32]
44e14     32 4E 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
44e18     36 4E 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
44e1c     00 00 00 00 
44e20     00 00 00 00 
44e24     00 00 00 00 
44e28     00 00 00 00 
44e2c     00 00       | 	byte	$00[18]
44e2e     3F 3F 3F 00 
44e32     55 43 54 00 
44e36     55 43 54 00 
44e3a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
44e3e     00 00 00 00 
44e42     00 00 00    | 	byte	$00[7]
44e45     CA 9A 3B 00 
44e49     00 00 00 01 
44e4d     01 01 01 01 
44e51     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
44e55     91 11 11 11 
44e59     11 01 01 01 
44e5d     01 01 01 01 
44e61     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
44e65     01 01 01 01 
44e69     01 01 01    | 	byte	$01[7]
44e6c     90 20 20 20 
44e70     20 20 20 20 
44e74     20 20 20 20 
44e78     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
44e7c     42 42 42 42 
44e80     42 42 42 42 
44e84     42 42       | 	byte	$42[10]
44e86     20 20 20 20 
44e8a     20 20 20    | 	byte	$20[7]
44e8d     44 44 44 44 
44e91     44 44       | 	byte	$44[6]
44e93     04 04 04 04 
44e97     04 04 04 04 
44e9b     04 04 04 04 
44e9f     04 04 04 04 
44ea3     04 04 04 04 | 	byte	$04[20]
44ea7     20 20 20 20 
44eab     20 20       | 	byte	$20[6]
44ead     48 48 48 48 
44eb1     48 48       | 	byte	$48[6]
44eb3     08 08 08 08 
44eb7     08 08 08 08 
44ebb     08 08 08 08 
44ebf     08 08 08 08 
44ec3     08 08 08 08 | 	byte	$08[20]
44ec7     20 20 20 20 
44ecb     01 00 00 00 
44ecf     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
44ed0                 | __methodtable__
44ed0     30 71 01 00 | 	long	@_do_no_command
44ed4     B4 1D 02 00 | 	long	@_do_plus
44ed8     D4 0D 02 00 | 	long	@_do_minus
44edc     9C 1C 02 00 | 	long	@_do_or
44ee0     54 14 02 00 | 	long	@_do_mul
44ee4     98 F8 01 00 | 	long	@_do_fdiv
44ee8     84 F0 01 00 | 	long	@_do_and
44eec     9C F1 01 00 | 	long	@_do_div
44ef0     34 12 02 00 | 	long	@_do_mod
44ef4     68 24 02 00 | 	long	@_do_shl
44ef8     80 25 02 00 | 	long	@_do_shr
44efc     A0 22 02 00 | 	long	@_do_power
44f00     3C E6 01 00 | 	long	@_do_getvar
44f04     74 A4 01 00 | 	long	@_do_push
44f08     34 E0 01 00 | 	long	@_do_assign
44f0c     B4 FA 00 00 | 	long	@_do_cls
44f10     FC 6A 01 00 | 	long	@_do_new
44f14     B8 9C 01 00 | 	long	@_do_plot
44f18     30 24 01 00 | 	long	@_do_draw
44f1c     20 9F 01 00 | 	long	@_do_print
44f20     94 F8 00 00 | 	long	@_do_circle
44f24     64 26 01 00 | 	long	@_do_fcircle
44f28     8C E5 00 00 | 	long	@_do_box
44f2c     9C 2F 01 00 | 	long	@_do_frame
44f30     70 FD 00 00 | 	long	@_do_color
44f34     2C 2D 01 00 | 	long	@_do_for
44f38     68 6D 01 00 | 	long	@_do_next
44f3c     08 58 01 00 | 	long	@_do_list
44f40     98 C0 01 00 | 	long	@_do_run
44f44     8C 25 01 00 | 	long	@_do_error
44f48     10 3E 01 00 | 	long	@_do_fast_goto
44f4c     00 3F 01 00 | 	long	@_do_find_goto
44f50     14 41 01 00 | 	long	@_do_slow_goto
44f54     50 71 01 00 | 	long	@_do_nothing
44f58     B4 C4 01 00 | 	long	@_do_save
44f5c     A4 5A 01 00 | 	long	@_do_load
44f60     5C 8D 01 00 | 	long	@_do_pinwrite
44f64     74 DD 01 00 | 	long	@_do_waitms
44f68     A8 DE 01 00 | 	long	@_do_waitvbl
44f6c     08 44 01 00 | 	long	@_do_if
44f70     24 25 01 00 | 	long	@_do_else
44f74     BC F3 01 00 | 	long	@_do_eq
44f78     60 FA 01 00 | 	long	@_do_ge
44f7c     2C 04 02 00 | 	long	@_do_le
44f80     48 FF 01 00 | 	long	@_do_gt
44f84     08 09 02 00 | 	long	@_do_lt
44f88     C0 17 02 00 | 	long	@_do_ne
44f8c     00 BE 01 00 | 	long	@_do_rnd
44f90     74 E7 00 00 | 	long	@_do_brun
44f94     10 E1 00 00 | 	long	@_do_beep
44f98     C0 1C 01 00 | 	long	@_do_dir
44f9c     90 89 01 00 | 	long	@_do_paper
44fa0     C4 47 01 00 | 	long	@_do_ink
44fa4     B0 2C 01 00 | 	long	@_do_font
44fa8     70 65 01 00 | 	long	@_do_mode
44fac     B8 69 01 00 | 	long	@_do_mouse
44fb0     90 3C 01 00 | 	long	@_do_gettime
44fb4     AC 02 01 00 | 	long	@_do_cursor
44fb8     0C FA 00 00 | 	long	@_do_click
44fbc     74 6A 01 00 | 	long	@_do_mousex
44fc0     B8 6A 01 00 | 	long	@_do_mousey
44fc4     EC 69 01 00 | 	long	@_do_mousek
44fc8     30 6A 01 00 | 	long	@_do_mousew
44fcc     14 D1 01 00 | 	long	@_do_sin
44fd0     4C D4 01 00 | 	long	@_do_stick
44fd4     A4 D7 01 00 | 	long	@_do_strig
44fd8     6C D2 01 00 | 	long	@_do_sprite
44fdc     E4 17 01 00 | 	long	@_do_defsprite
44fe0     20 3A 01 00 | 	long	@_do_getpixel
44fe4     50 DD 01 00 | 	long	@_do_waitclock
44fe8     84 11 02 00 | 	long	@_do_negative
44fec     F8 AA 01 00 | 	long	@_do_rdpin
44ff0     24 C0 01 00 | 	long	@_do_rqpin
44ff4     88 8B 01 00 | 	long	@_do_pinread
44ff8     B4 DE 01 00 | 	long	@_do_wrpin
44ffc     34 DF 01 00 | 	long	@_do_wxpin
45000     B4 DF 01 00 | 	long	@_do_wypin
45004     C8 8A 01 00 | 	long	@_do_pinfloat
45008     48 8B 01 00 | 	long	@_do_pinlo
4500c     08 8B 01 00 | 	long	@_do_pinhi
45010     0C 8C 01 00 | 	long	@_do_pinstart
45014     1C 8D 01 00 | 	long	@_do_pintoggle
45018     98 9E 01 00 | 	long	@_do_position
4501c     88 01 01 00 | 	long	@_do_cos
45020     34 D9 01 00 | 	long	@_do_tan
45024     F8 DF 00 00 | 	long	@_do_atn
45028     E8 DE 00 00 | 	long	@_do_asin
4502c     78 DC 00 00 | 	long	@_do_acos
45030     58 D3 01 00 | 	long	@_do_sqr
45034     48 27 01 00 | 	long	@_do_fill
45038     F4 0E 01 00 | 	long	@_do_defsnd
4503c     F4 03 01 00 | 	long	@_do_defenv
45040     D0 AA 01 00 | 	long	@_do_rad
45044     58 1B 01 00 | 	long	@_do_deg
45048     44 48 01 00 | 	long	@_do_int
4504c     E4 8D 01 00 | 	long	@_do_play
45050     6C CB 01 00 | 	long	@_do_setdelay
45054     14 CC 01 00 | 	long	@_do_setenv
45058     BC CC 01 00 | 	long	@_do_setlen
4505c     64 CD 01 00 | 	long	@_do_setpan
45060     B4 CE 01 00 | 	long	@_do_setvol
45064     5C CF 01 00 | 	long	@_do_setwave
45068     0C CE 01 00 | 	long	@_do_setsustain
4506c     F0 BA 01 00 | 	long	@_do_release
45070     0C 38 01 00 | 	long	@_do_getenvsustain
45074     88 9D 01 00 | 	long	@_do_poke
45078     58 23 01 00 | 	long	@_do_dpoke
4507c     84 61 01 00 | 	long	@_do_lpoke
45080     18 8A 01 00 | 	long	@_do_peek
45084     AC 22 01 00 | 	long	@_do_dpeek
45088     D8 60 01 00 | 	long	@_do_lpeek
4508c     F8 30 01 00 | 	long	@_do_fre
45090     1C 39 01 00 | 	long	@_do_getnotevalue
45094     F4 EB 01 00 | 	long	@_do_getaddr
45098     EC 44 01 00 | 	long	@_do_inkey
4509c     F8 DB 00 00 | 	long	@_do_abs
450a0     A4 42 01 00 | 	long	@_do_hex
450a4     28 E4 00 00 | 	long	@_do_bin
450a8     44 DA 01 00 | 	long	@_do_val
450ac     94 F7 00 00 | 	long	@_do_chr
450b0     88 DD 00 00 | 	long	@_do_asc
450b4     08 55 01 00 | 	long	@_do_left
450b8     74 BC 01 00 | 	long	@_do_right
450bc     E4 62 01 00 | 	long	@_do_mid
450c0     94 56 01 00 | 	long	@_do_len
450c4     F8 3C 01 00 | 	long	@_do_gosub
450c8     C8 BB 01 00 | 	long	@_do_return
450cc     48 25 01 00 | 	long	@_do_end
450d0     60 9E 01 00 | 	long	@_do_pop
450d4     5C 5F 01 00 | 	long	@_do_log
450d8     88 F5 00 00 | 	long	@_do_changevol
450dc     68 F6 00 00 | 	long	@_do_changewav
450e0     78 F4 00 00 | 	long	@_do_changepan
450e4     70 EF 00 00 | 	long	@_do_changefreq
450e8     04 D0 01 00 | 	long	@_do_shutup
450ec     D0 BF 01 00 | 	long	@_do_round
450f0     7C 25 01 00 | 	long	@_do_enter
450f4     78 72 01 00 | 	long	@_do_open
450f8     38 FA 00 00 | 	long	@_do_close
450fc     5C 31 01 00 | 	long	@_do_get
45100     90 A5 01 00 | 	long	@_do_put
45104     B0 E9 00 00 | 	long	@_do_cd
45108     80 1B 01 00 | 	long	@_do_delete
4510c     B0 64 01 00 | 	long	@_do_mkdir
45110     24 E2 00 00 | 	long	@_do_blit
45114     C4 30 01 00 | 	long	@_do_framebuf
45118     54 71 01 00 | 	long	@_do_on
4511c     24 D2 01 00 | 	long	@_do_skip
45120     00 49 01 00 | 	long	@_do_input
45124     5C AD 01 00 | 	long	@_do_read
45128     88 BB 01 00 | 	long	@_do_restore
4512c     10 82 01 00 | 	long	@_do_padx
45130     90 84 01 00 | 	long	@_do_pady
45134     10 87 01 00 | 	long	@_do_padz
45138     90 75 01 00 | 	long	@_do_padrx
4513c     10 78 01 00 | 	long	@_do_padry
45140     90 7A 01 00 | 	long	@_do_padrz
45144     90 7F 01 00 | 	long	@_do_padw
45148     10 7D 01 00 | 	long	@_do_pads
4514c     A8 FD 00 00 | 	long	@_do_copy
45150     F4 FA 00 00 | 	long	@_do_coginit
45154     30 FD 00 00 | 	long	@_do_cogstop
45158     5C 62 01 00 | 	long	@_do_memlo
4515c     A0 62 01 00 | 	long	@_do_memtop
45160     00 C9 01 00 | 	long	@_do_setcolor
45164     00 37 01 00 | 	long	@_do_getcolor
45168     E0 02 01 00 | 	long	@_do_defchar
4516c     C0 BB 01 00 | 	long	@_do_restorepalette
45170     5C 28 01 00 | 	long	@_do_findfirst
45174     E8 2B 01 00 | 	long	@_do_findnext
45178     58 C8 01 00 | 	long	@_do_setamode
4517c     74 3B 01 00 | 	long	@_do_getrealfreq
45180     DC D5 01 00 | 	long	@_do_str
45184     6C 68 02 00 | 	long	@_hg010b_spin2_putchar
45188     3C 7E 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
4518c     80 7E 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
45190     C8 7E 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
45194     6C 7D 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
45198     DC 7D 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
4519c     24 7D 03 00 | 	long	@__system____strs_cl_pfunc_
451a0     B4 DA 02 00 | 	long	@__system____root_opendir
451a4     50 DB 02 00 | 	long	@__system____root_closedir
451a8     CC DA 02 00 | 	long	@__system____root_readdir
451ac     58 DB 02 00 | 	long	@__system____root_stat
451b0     A0 D3 02 00 | 	long	@__system____default_putc
451b4     24 D3 02 00 | 	long	@__system____default_getc
451b8     48 D4 02 00 | 	long	@__system____default_flush
451bc     2C 68 03 00 | 	long	@_fatfs_cc_v_close
451c0     48 6C 03 00 | 	long	@_fatfs_cc_v_read
451c4     5C 6D 03 00 | 	long	@_fatfs_cc_v_write
451c8     3C 6E 03 00 | 	long	@_fatfs_cc_v_lseek
451cc     C4 6E 03 00 | 	long	@_fatfs_cc_v_ioctl
451d0     18 6F 03 00 | 	long	@_fatfs_cc_v_open
451d4     90 67 03 00 | 	long	@_fatfs_cc_v_creat
451d8     70 68 03 00 | 	long	@_fatfs_cc_v_opendir
451dc     E4 68 03 00 | 	long	@_fatfs_cc_v_closedir
451e0     24 69 03 00 | 	long	@_fatfs_cc_v_readdir
451e4     58 6A 03 00 | 	long	@_fatfs_cc_v_stat
451e8     D8 6E 03 00 | 	long	@_fatfs_cc_v_mkdir
451ec     F8 6E 03 00 | 	long	@_fatfs_cc_v_rmdir
451f0     E8 6E 03 00 | 	long	@_fatfs_cc_v_remove
451f4     08 6F 03 00 | 	long	@_fatfs_cc_v_rename
451f8     28 70 03 00 | 	long	@_fatfs_cc_v_init
451fc     30 70 03 00 | 	long	@_fatfs_cc_v_deinit
45200     EC 84 02 00 | 	long	@__system___tx
45204     2C 85 02 00 | 	long	@__system___rx
45208     C8 E6 02 00 | 	long	@__system___rxtxioctl_0791
4520c     20 E7 02 00 | 	long	@__system____dummy_flush_0792
45210     F8 6F 03 00 | 	long	@_fatfs_cc_v_flush
45214                 | __heap_base
45214     00 00 00 00 
      ...             
5c914     00 00 00 00 
5c918     00 00 00 00 | 	long	0[24002]
5c91c                 | objmem
5c91c     00 00 00 00 
      ...             
66e8c     00 00 00 00 
66e90     00 00 00 00 | 	long	0[10590]
66e94                 | stackspace
66e94     00 00 00 00 | 	long	0[1]
66e98 100             | 	org	COG_BSS_START
66e98 100             | _var01
66e98 100             | 	res	1
66e98 101             | _var02
66e98 101             | 	res	1
66e98 102             | _var03
66e98 102             | 	res	1
66e98 103             | _var04
66e98 103             | 	res	1
66e98 104             | _var05
66e98 104             | 	res	1
66e98 105             | _var06
66e98 105             | 	res	1
66e98 106             | _var07
66e98 106             | 	res	1
66e98 107             | _var08
66e98 107             | 	res	1
66e98 108             | _var09
66e98 108             | 	res	1
66e98 109             | arg01
66e98 109             | 	res	1
66e98 10a             | arg02
66e98 10a             | 	res	1
66e98 10b             | arg03
66e98 10b             | 	res	1
66e98 10c             | arg04
66e98 10c             | 	res	1
66e98 10d             | arg05
66e98 10d             | 	res	1
66e98 10e             | arg06
66e98 10e             | 	res	1
66e98 10f             | arg07
66e98 10f             | 	res	1
66e98 110             | arg08
66e98 110             | 	res	1
66e98 111             | arg09
66e98 111             | 	res	1
66e98 112             | arg10
66e98 112             | 	res	1
66e98 113             | local01
66e98 113             | 	res	1
66e98 114             | local02
66e98 114             | 	res	1
66e98 115             | local03
66e98 115             | 	res	1
66e98 116             | local04
66e98 116             | 	res	1
66e98 117             | local05
66e98 117             | 	res	1
66e98 118             | local06
66e98 118             | 	res	1
66e98 119             | local07
66e98 119             | 	res	1
66e98 11a             | local08
66e98 11a             | 	res	1
66e98 11b             | local09
66e98 11b             | 	res	1
66e98 11c             | local10
66e98 11c             | 	res	1
66e98 11d             | local11
66e98 11d             | 	res	1
66e98 11e             | local12
66e98 11e             | 	res	1
66e98 11f             | local13
66e98 11f             | 	res	1
66e98 120             | local14
66e98 120             | 	res	1
66e98 121             | local15
66e98 121             | 	res	1
66e98 122             | local16
66e98 122             | 	res	1
66e98 123             | local17
66e98 123             | 	res	1
66e98 124             | local18
66e98 124             | 	res	1
66e98 125             | local19
66e98 125             | 	res	1
66e98 126             | local20
66e98 126             | 	res	1
66e98 127             | local21
66e98 127             | 	res	1
66e98 128             | local22
66e98 128             | 	res	1
66e98 129             | local23
66e98 129             | 	res	1
66e98 12a             | local24
66e98 12a             | 	res	1
66e98 12b             | local25
66e98 12b             | 	res	1
66e98 12c             | local26
66e98 12c             | 	res	1
66e98 12d             | local27
66e98 12d             | 	res	1
66e98 12e             | local28
66e98 12e             | 	res	1
66e98 12f             | local29
66e98 12f             | 	res	1
66e98 130             | local30
66e98 130             | 	res	1
66e98 131             | local31
66e98 131             | 	res	1
66e98 132             | local32
66e98 132             | 	res	1
66e98 133             | local33
66e98 133             | 	res	1
66e98 134             | local34
66e98 134             | 	res	1
66e98 135             | local35
66e98 135             | 	res	1
66e98 136             | local36
66e98 136             | 	res	1
66e98 137             | local37
66e98 137             | 	res	1
66e98 138             | local38
66e98 138             | 	res	1
66e98 139             | local39
66e98 139             | 	res	1
66e98 13a             | local40
66e98 13a             | 	res	1
66e98 13b             | local41
66e98 13b             | 	res	1
66e98 13c             | local42
66e98 13c             | 	res	1
66e98 13d             | local43
66e98 13d             | 	res	1
66e98 13e             | local44
66e98 13e             | 	res	1
66e98 13f             | local45
66e98 13f             | 	res	1
66e98 140             | local46
66e98 140             | 	res	1
66e98 141             | local47
66e98 141             | 	res	1
66e98 142             | local48
66e98 142             | 	res	1
66e98 143             | local49
66e98 143             | 	res	1
66e98 144             | local50
66e98 144             | 	res	1
66e98 145             | local51
66e98 145             | 	res	1
66e98 146             | local52
66e98 146             | 	res	1
66e98 147             | local53
66e98 147             | 	res	1
66e98 148             | muldiva_
66e98 148             | 	res	1
66e98 149             | muldivb_
66e98 149             | 	res	1
66e98 14a             | 	fit	480
66e98 14a             | 
