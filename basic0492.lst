00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic0492.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 10 FF A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 48 91 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 47 8F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 48 8F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 90 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 8E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 47 8F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 48 91 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec F8 ED 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 94 EA 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 00 65 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 BC DD 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 14 D9 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 DC 2D 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 04 E5 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 4C 5F 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 08 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 FC 9E 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa B4 9C 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 8C AE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 78 0A 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     9C 32 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     F4 43 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     E0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     E0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00840     52 00 00 FF 
00844     38 E5 05 F1 | 	add	objptr, ##42296
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     38 E5 85 F1 | 	sub	objptr, ##42296
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     9C 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     94 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     5C E5 05 F1 | 	add	objptr, ##41308
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     5C E5 85 F1 | 	sub	objptr, ##41308
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     78 00 90 5D |  if_ne	jmp	#LR__0002
00880     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00884     04 00 00 FF 
00888     A4 14 06 F1 | 	add	arg02, ##2212
0088c     56 00 00 FF 
00890     44 32 06 F6 | 	mov	local07, ##44100
00894     0C 34 C6 F9 | 	decod	local08, #12
00898     00 36 06 F6 | 	mov	local09, #0
0089c     03 00 00 FF 
008a0     DE 38 06 F6 | 	mov	local10, ##1758
008a4     07 12 06 F6 | 	mov	arg01, #7
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     20 44 B2 FD | 	call	#_audio096_spin2_play
008cc     0B 00 00 FF 
008d0     CC E4 85 F1 | 	sub	objptr, ##5836
008d4     0A 12 06 F6 | 	mov	arg01, #10
008d8     68 4A B2 FD | 	call	#__system___waitms
008dc     07 30 06 F6 | 	mov	local06, #7
008e0     07 12 06 F6 | 	mov	arg01, #7
008e4     0B 00 00 FF 
008e8     CC E4 05 F1 | 	add	objptr, ##5836
008ec     C4 44 B2 FD | 	call	#_audio096_spin2_stop
008f0     0B 00 00 FF 
008f4     CC E4 85 F1 | 	sub	objptr, ##5836
008f8                 | LR__0002
008f8                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
008f8     04 2E 16 F2 | 	cmp	local05, #4 wc
008fc     20 00 90 CD |  if_b	jmp	#LR__0003
00900     00 00 40 FF 
00904     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00908     17 31 02 C6 |  if_b	mov	local06, local05
0090c     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00910     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
00914     17 2B 02 C6 |  if_b	mov	local03, local05
00918     01 26 06 C6 |  if_b	mov	local01, #1
0091c     15 2D 02 C6 |  if_b	mov	local04, local03
00920                 | LR__0003
00920                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00920     00 00 40 FF 
00924     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00928     00 28 06 36 |  if_ae	mov	local02, #0
0092c     00 26 06 36 |  if_ae	mov	local01, #0
00930                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00930     00 2E 0E F2 | 	cmp	local05, #0 wz
00934     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00938     01 28 06 A1 |  if_e	add	local02, #1
0093c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
0093c     00 00 40 FF 
00940     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00944     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00948     15 2D 02 86 |  if_c_and_z	mov	local04, local03
0094c     15 28 06 86 |  if_c_and_z	mov	local02, #21
00950                 | ' 
00950                 | ' '' there is a key pressed and it needs to be processed
00950                 | ' 
00950                 | ' if key3<>0 then
00950     00 2C 0E F2 | 	cmp	local04, #0 wz
00954     C4 FE 9F AD |  if_e	jmp	#LR__0001
00958                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00958     50 00 00 FF 
0095c     5C E5 05 F1 | 	add	objptr, ##41308
00960     F2 30 02 FB | 	rdlong	local06, objptr
00964     50 00 00 FF 
00968     5C E5 85 F1 | 	sub	objptr, ##41308
0096c     01 30 0E F2 | 	cmp	local06, #1 wz
00970     50 00 90 5D |  if_ne	jmp	#LR__0004
00974     52 00 00 FF 
00978     FC E4 05 F1 | 	add	objptr, ##42236
0097c     F2 14 02 FB | 	rdlong	arg02, objptr
00980     56 00 00 FF 
00984     44 32 06 F6 | 	mov	local07, ##44100
00988     0C 34 C6 F9 | 	decod	local08, #12
0098c     04 E4 85 F1 | 	sub	objptr, #4
00990     F2 36 02 FB | 	rdlong	local09, objptr
00994     01 38 66 F6 | 	neg	local10, #1
00998     07 12 06 F6 | 	mov	arg01, #7
0099c     56 00 00 FF 
009a0     44 16 06 F6 | 	mov	arg03, ##44100
009a4     0C 18 C6 F9 | 	decod	arg04, #12
009a8     1B 1B 02 F6 | 	mov	arg05, local09
009ac     01 1C 66 F6 | 	neg	arg06, #1
009b0     47 00 00 FF 
009b4     2C E4 85 F1 | 	sub	objptr, ##36396
009b8     30 43 B2 FD | 	call	#_audio096_spin2_play
009bc     0B 00 00 FF 
009c0     CC E4 85 F1 | 	sub	objptr, ##5836
009c4                 | LR__0004
009c4     16 13 02 F6 | 	mov	arg01, local04
009c8     A0 F4 B1 FD | 	call	#_scantochar
009cc     FD 3A 02 F6 | 	mov	local11, result1
009d0                 | '   if leds and 2 = 2 then 						' caps lock
009d0     52 00 00 FF 
009d4     38 E5 05 F1 | 	add	objptr, ##42296
009d8     F2 3C 02 FB | 	rdlong	local12, objptr
009dc     52 00 00 FF 
009e0     38 E5 85 F1 | 	sub	objptr, ##42296
009e4     1E 31 0A F6 | 	mov	local06, local12 wz
009e8     4C 00 90 AD |  if_e	jmp	#LR__0012
009ec                 | '     if key4>96 andalso key4<123 then                 
009ec     61 3A 16 F2 | 	cmp	local11, #97 wc
009f0     0C 00 90 CD |  if_b	jmp	#LR__0005
009f4     7B 3A 16 F2 | 	cmp	local11, #123 wc
009f8     20 3A 86 C1 |  if_b	sub	local11, #32
009fc     38 00 90 CD |  if_b	jmp	#LR__0011
00a00                 | LR__0005
00a00     41 3A 16 F2 | 	cmp	local11, #65 wc
00a04     0C 00 90 CD |  if_b	jmp	#LR__0006
00a08     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a0c     20 3A 06 C1 |  if_b	add	local11, #32
00a10     24 00 90 CD |  if_b	jmp	#LR__0010
00a14                 | LR__0006
00a14     17 3A 16 F2 | 	cmp	local11, #23 wc
00a18     0C 00 90 CD |  if_b	jmp	#LR__0007
00a1c     20 3A 16 F2 | 	cmp	local11, #32 wc
00a20     09 3A 86 C1 |  if_b	sub	local11, #9
00a24     10 00 90 CD |  if_b	jmp	#LR__0009
00a28                 | LR__0007
00a28     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a2c     08 00 90 CD |  if_b	jmp	#LR__0008
00a30     17 3A 16 F2 | 	cmp	local11, #23 wc
00a34     27 3A 06 C1 |  if_b	add	local11, #39
00a38                 | LR__0008
00a38                 | LR__0009
00a38                 | LR__0010
00a38                 | LR__0011
00a38                 | LR__0012
00a38                 | '  
00a38                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a38     01 3A 16 F2 | 	cmp	local11, #1 wc
00a3c     BC 01 90 CD |  if_b	jmp	#LR__0017
00a40     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a44     3C E4 05 C1 |  if_b	add	objptr, #60
00a48     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a4c     3C E4 85 C1 |  if_b	sub	objptr, #60
00a50     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a54     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a58                 | '     if do_insert then							' move the characters right
00a58     52 00 00 FF 
00a5c     20 E5 05 F1 | 	add	objptr, ##42272
00a60     F2 30 0A FB | 	rdlong	local06, objptr wz
00a64     52 00 00 FF 
00a68     20 E5 85 F1 | 	sub	objptr, ##42272
00a6c     84 01 90 AD |  if_e	jmp	#LR__0016
00a70                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a70     3E E4 05 F1 | 	add	objptr, #62
00a74     F2 32 C2 FA | 	rdbyte	local07, objptr
00a78     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a7c     07 34 66 F0 | 	shl	local08, #7
00a80     3A E4 85 F1 | 	sub	objptr, #58
00a84     F2 3E 02 FB | 	rdlong	local13, objptr
00a88     1F 41 02 F6 | 	mov	local14, local13
00a8c     1A 41 02 F1 | 	add	local14, local08
00a90     7F 40 06 F1 | 	add	local14, #127
00a94     19 33 E2 F8 | 	getbyte	local07, local07, #0
00a98     07 32 66 F0 | 	shl	local07, #7
00a9c     19 3F 02 F1 | 	add	local13, local07
00aa0     38 E4 05 F1 | 	add	objptr, #56
00aa4     F2 36 E2 FA | 	rdword	local09, objptr
00aa8     3C E4 85 F1 | 	sub	objptr, #60
00aac     1B 43 52 F6 | 	abs	local15, local09 wc
00ab0     01 42 46 F0 | 	shr	local15, #1
00ab4     21 3F 82 F3 | 	sumc	local13, local15
00ab8     01 3E 06 F1 | 	add	local13, #1
00abc                 | LR__0013
00abc     20 45 02 F6 | 	mov	local16, local14
00ac0     01 44 86 F1 | 	sub	local16, #1
00ac4     22 13 02 F6 | 	mov	arg01, local16
00ac8     C8 F2 B1 FD | 	call	#_pspeek
00acc     FD 46 02 F6 | 	mov	local17, result1
00ad0     23 49 E2 F8 | 	getbyte	local18, local17, #0
00ad4     24 4B 02 F6 | 	mov	local19, local18
00ad8     20 13 02 F6 | 	mov	arg01, local14
00adc     25 15 02 F6 | 	mov	arg02, local19
00ae0     68 F2 B1 FD | 	call	#_pspoke
00ae4     01 40 86 F1 | 	sub	local14, #1
00ae8     1F 41 52 F2 | 	cmps	local14, local13 wc
00aec     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af0     52 00 00 FF 
00af4     40 E5 05 F1 | 	add	objptr, ##42304
00af8     F2 00 68 FC | 	wrlong	#0, objptr
00afc     52 00 00 FF 
00b00     02 E5 85 F1 | 	sub	objptr, ##42242
00b04     F2 32 C2 FA | 	rdbyte	local07, objptr
00b08     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b0c     07 34 66 F0 | 	shl	local08, #7
00b10     3A E4 85 F1 | 	sub	objptr, #58
00b14     F2 36 02 FB | 	rdlong	local09, objptr
00b18     1B 41 02 F6 | 	mov	local14, local09
00b1c     1A 41 02 F1 | 	add	local14, local08
00b20     38 E4 05 F1 | 	add	objptr, #56
00b24     F2 42 E2 FA | 	rdword	local15, objptr
00b28     21 39 32 F9 | 	getword	local10, local15, #0
00b2c     1C 4D 52 F6 | 	abs	local20, local10 wc
00b30     01 4C 46 F0 | 	shr	local20, #1
00b34     26 4D 82 F6 | 	negc	local20, local20
00b38     26 41 02 F1 | 	add	local14, local20
00b3c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b40     07 32 66 F0 | 	shl	local07, #7
00b44     1B 35 02 F6 | 	mov	local08, local09
00b48     3C E4 85 F1 | 	sub	objptr, #60
00b4c     1A 4F 02 F6 | 	mov	local21, local08
00b50     19 4F 02 F1 | 	add	local21, local07
00b54     80 4E 06 F1 | 	add	local21, #128
00b58                 | LR__0014
00b58     27 41 52 F2 | 	cmps	local14, local21 wc
00b5c     94 00 90 3D |  if_ae	jmp	#LR__0015
00b60     3C E4 05 F1 | 	add	objptr, #60
00b64     F2 30 E2 FA | 	rdword	local06, objptr
00b68     52 00 00 FF 
00b6c     04 E5 05 F1 | 	add	objptr, ##42244
00b70     F2 34 02 FB | 	rdlong	local08, objptr
00b74     01 34 66 F0 | 	shl	local08, #1
00b78     1A 31 02 F1 | 	add	local06, local08
00b7c     52 00 00 FF 
00b80     02 E5 85 F1 | 	sub	objptr, ##42242
00b84     F2 3C C2 FA | 	rdbyte	local12, objptr
00b88     3E E4 85 F1 | 	sub	objptr, #62
00b8c     04 3C 66 F0 | 	shl	local12, #4
00b90     04 3C 06 F1 | 	add	local12, #4
00b94     20 13 02 F6 | 	mov	arg01, local14
00b98     F8 F1 B1 FD | 	call	#_pspeek
00b9c     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba0     41 E4 05 F1 | 	add	objptr, #65
00ba4     F2 34 02 FB | 	rdlong	local08, objptr
00ba8     04 E4 05 F1 | 	add	objptr, #4
00bac     F2 38 02 FB | 	rdlong	local10, objptr
00bb0     45 E4 85 F1 | 	sub	objptr, #69
00bb4     1C 37 02 F6 | 	mov	local09, local10
00bb8     18 13 02 F6 | 	mov	arg01, local06
00bbc     1E 15 02 F6 | 	mov	arg02, local12
00bc0     19 17 02 F6 | 	mov	arg03, local07
00bc4     1A 19 02 F6 | 	mov	arg04, local08
00bc8     1B 1B 02 F6 | 	mov	arg05, local09
00bcc     A4 2C B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd0     52 00 00 FF 
00bd4     40 E5 05 F1 | 	add	objptr, ##42304
00bd8     F2 30 02 FB | 	rdlong	local06, objptr
00bdc     01 30 06 F1 | 	add	local06, #1
00be0     F2 30 62 FC | 	wrlong	local06, objptr
00be4     52 00 00 FF 
00be8     40 E5 85 F1 | 	sub	objptr, ##42304
00bec     01 40 06 F1 | 	add	local14, #1
00bf0     64 FF 9F FD | 	jmp	#LR__0014
00bf4                 | LR__0015
00bf4                 | LR__0016
00bf4     1D 13 02 F6 | 	mov	arg01, local11
00bf8     FC 2F B2 FD | 	call	#_hg010b_spin2_putchar
00bfc                 | LR__0017
00bfc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00bfc     01 3A 16 F2 | 	cmp	local11, #1 wc
00c00     AC 00 90 CD |  if_b	jmp	#LR__0018
00c04     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c08     A4 00 90 3D |  if_ae	jmp	#LR__0018
00c0c     3C E4 05 F1 | 	add	objptr, #60
00c10     F2 30 E2 FA | 	rdword	local06, objptr
00c14     3C E4 85 F1 | 	sub	objptr, #60
00c18     FE 30 0E F2 | 	cmp	local06, #254 wz
00c1c     50 00 00 AF 
00c20     5C E5 05 A1 |  if_e	add	objptr, ##41308
00c24     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c28     50 00 00 AF 
00c2c     5C E5 85 A1 |  if_e	sub	objptr, ##41308
00c30     1A 33 02 A6 |  if_e	mov	local07, local08
00c34     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c38     74 00 90 5D |  if_ne	jmp	#LR__0018
00c3c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c40     04 00 00 FF 
00c44     A4 14 06 F1 | 	add	arg02, ##2212
00c48     56 00 00 FF 
00c4c     44 32 06 F6 | 	mov	local07, ##44100
00c50     0C 34 C6 F9 | 	decod	local08, #12
00c54     00 36 06 F6 | 	mov	local09, #0
00c58     03 00 00 FF 
00c5c     DE 38 06 F6 | 	mov	local10, ##1758
00c60     07 12 06 F6 | 	mov	arg01, #7
00c64     56 00 00 FF 
00c68     44 16 06 F6 | 	mov	arg03, ##44100
00c6c     0C 18 C6 F9 | 	decod	arg04, #12
00c70     00 1A 06 F6 | 	mov	arg05, #0
00c74     03 00 00 FF 
00c78     DE 1C 06 F6 | 	mov	arg06, ##1758
00c7c     0B 00 00 FF 
00c80     CC E4 05 F1 | 	add	objptr, ##5836
00c84     64 40 B2 FD | 	call	#_audio096_spin2_play
00c88     0B 00 00 FF 
00c8c     CC E4 85 F1 | 	sub	objptr, ##5836
00c90     2C 13 06 F6 | 	mov	arg01, #300
00c94     AC 46 B2 FD | 	call	#__system___waitms
00c98     07 12 06 F6 | 	mov	arg01, #7
00c9c     0B 00 00 FF 
00ca0     CC E4 05 F1 | 	add	objptr, ##5836
00ca4     0C 41 B2 FD | 	call	#_audio096_spin2_stop
00ca8     0B 00 00 FF 
00cac     CC E4 85 F1 | 	sub	objptr, ##5836
00cb0                 | LR__0018
00cb0                 | '  
00cb0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cb0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cb4     AC 00 90 5D |  if_ne	jmp	#LR__0021
00cb8     8D 01 00 FF 
00cbc     AE 51 06 F6 | 	mov	local22, ##@LR__5087
00cc0                 | '     line$="" 
00cc0                 | '     for i=editor_spaces to 127
00cc0     37 00 00 FF 
00cc4     54 E4 05 F1 | 	add	objptr, ##28244
00cc8     F2 40 02 FB | 	rdlong	local14, objptr
00ccc     37 00 00 FF 
00cd0     54 E4 85 F1 | 	sub	objptr, ##28244
00cd4                 | LR__0019
00cd4     80 40 56 F2 | 	cmps	local14, #128 wc
00cd8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cdc     3E E4 05 F1 | 	add	objptr, #62
00ce0     F2 42 C2 FA | 	rdbyte	local15, objptr
00ce4     07 42 66 F0 | 	shl	local15, #7
00ce8     3A E4 85 F1 | 	sub	objptr, #58
00cec     F2 12 02 FB | 	rdlong	arg01, objptr
00cf0     04 E4 85 F1 | 	sub	objptr, #4
00cf4     21 13 02 F1 | 	add	arg01, local15
00cf8     20 13 02 F1 | 	add	arg01, local14
00cfc     94 F0 B1 FD | 	call	#_pspeek
00d00     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d04     24 59 B2 FD | 	call	#__system__Chr_S
00d08     FD 14 02 F6 | 	mov	arg02, result1
00d0c     28 13 02 F6 | 	mov	arg01, local22
00d10     F0 43 B2 FD | 	call	#__system___string_concat
00d14     FD 50 02 F6 | 	mov	local22, result1
00d18     01 40 06 F1 | 	add	local14, #1
00d1c     B4 FF 9F FD | 	jmp	#LR__0019
00d20                 | LR__0020
00d20                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d20     52 00 00 FF 
00d24     20 E5 05 F1 | 	add	objptr, ##42272
00d28     F2 30 0A FB | 	rdlong	local06, objptr wz
00d2c     52 00 00 FF 
00d30     20 E5 85 F1 | 	sub	objptr, ##42272
00d34     3E E4 05 51 |  if_ne	add	objptr, #62
00d38     F2 32 C2 5A |  if_ne	rdbyte	local07, objptr
00d3c     3E E4 85 51 |  if_ne	sub	objptr, #62
00d40     23 32 16 52 |  if_ne	cmp	local07, #35 wc
00d44     3E E4 05 41 |  if_c_and_nz	add	objptr, #62
00d48     F2 12 C2 4A |  if_c_and_nz	rdbyte	arg01, objptr
00d4c     3E E4 85 41 |  if_c_and_nz	sub	objptr, #62
00d50     01 12 06 41 |  if_c_and_nz	add	arg01, #1
00d54     24 34 B2 4D |  if_c_and_nz	call	#_hg010b_spin2_scrolldown
00d58     24 36 B2 FD | 	call	#_hg010b_spin2_crlf
00d5c                 | '     v.crlf() 
00d5c                 | '     return  line$
00d5c     28 FB 01 F6 | 	mov	result1, local22
00d60     98 07 90 FD | 	jmp	#LR__0046
00d64                 | LR__0021
00d64     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d68                 | '   
00d68                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d68     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d6c     3C E4 05 A1 |  if_e	add	objptr, #60
00d70     F2 30 E2 AA |  if_e	rdword	local06, objptr
00d74     3C E4 85 A1 |  if_e	sub	objptr, #60
00d78     F0 30 16 A2 |  if_e	cmp	local06, #240 wc
00d7c     94 00 90 8D |  if_c_and_z	jmp	#LR__0022
00d80     50 00 00 AF 
00d84     5C E5 05 A1 |  if_e	add	objptr, ##41308
00d88     F2 34 02 AB |  if_e	rdlong	local08, objptr
00d8c     50 00 00 AF 
00d90     5C E5 85 A1 |  if_e	sub	objptr, ##41308
00d94     1A 33 02 A6 |  if_e	mov	local07, local08
00d98     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00d9c     74 00 90 5D |  if_ne	jmp	#LR__0022
00da0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00da4     04 00 00 FF 
00da8     A4 14 06 F1 | 	add	arg02, ##2212
00dac     56 00 00 FF 
00db0     44 32 06 F6 | 	mov	local07, ##44100
00db4     0E 34 C6 F9 | 	decod	local08, #14
00db8     00 36 06 F6 | 	mov	local09, #0
00dbc     03 00 00 FF 
00dc0     DE 38 06 F6 | 	mov	local10, ##1758
00dc4     00 12 06 F6 | 	mov	arg01, #0
00dc8     56 00 00 FF 
00dcc     44 16 06 F6 | 	mov	arg03, ##44100
00dd0     0E 18 C6 F9 | 	decod	arg04, #14
00dd4     00 1A 06 F6 | 	mov	arg05, #0
00dd8     03 00 00 FF 
00ddc     DE 1C 06 F6 | 	mov	arg06, ##1758
00de0     0B 00 00 FF 
00de4     CC E4 05 F1 | 	add	objptr, ##5836
00de8     00 3F B2 FD | 	call	#_audio096_spin2_play
00dec     0B 00 00 FF 
00df0     CC E4 85 F1 | 	sub	objptr, ##5836
00df4     2C 13 06 F6 | 	mov	arg01, #300
00df8     48 45 B2 FD | 	call	#__system___waitms
00dfc     00 12 06 F6 | 	mov	arg01, #0
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     A8 3F B2 FD | 	call	#_audio096_spin2_stop
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14                 | LR__0022
00e14                 | '   if key4=77 then i=127 : do: 															' end
00e14     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e18     90 00 90 5D |  if_ne	jmp	#LR__0027
00e1c     7F 40 06 F6 | 	mov	local14, #127
00e20                 | LR__0023
00e20                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e20     3E E4 05 F1 | 	add	objptr, #62
00e24     F2 36 C2 FA | 	rdbyte	local09, objptr
00e28     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e2c     1A 39 02 F6 | 	mov	local10, local08
00e30     07 38 66 F0 | 	shl	local10, #7
00e34     3A E4 85 F1 | 	sub	objptr, #58
00e38     F2 42 02 FB | 	rdlong	local15, objptr
00e3c     04 E4 85 F1 | 	sub	objptr, #4
00e40     21 33 02 F6 | 	mov	local07, local15
00e44     1C 33 02 F1 | 	add	local07, local10
00e48     20 33 02 F1 | 	add	local07, local14
00e4c     19 13 02 F6 | 	mov	arg01, local07
00e50     40 EF B1 FD | 	call	#_pspeek
00e54     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e58     20 30 0E F2 | 	cmp	local06, #32 wz
00e5c     2C 00 90 AD |  if_e	jmp	#LR__0025
00e60                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e60     7F 40 56 F2 | 	cmps	local14, #127 wc
00e64     18 00 90 3D |  if_ae	jmp	#LR__0024
00e68     20 33 02 F6 | 	mov	local07, local14
00e6c     01 32 66 F0 | 	shl	local07, #1
00e70     19 13 02 F6 | 	mov	arg01, local07
00e74     02 12 06 F1 | 	add	arg01, #2
00e78     E4 2B B2 FD | 	call	#_hg010b_spin2_setcursorx
00e7c     2C 00 90 FD | 	jmp	#LR__0026
00e80                 | LR__0024
00e80     FE 12 06 F6 | 	mov	arg01, #254
00e84     D8 2B B2 FD | 	call	#_hg010b_spin2_setcursorx
00e88     20 00 90 FD | 	jmp	#LR__0026
00e8c                 | LR__0025
00e8c     01 40 86 F1 | 	sub	local14, #1
00e90     37 00 00 FF 
00e94     54 E4 05 F1 | 	add	objptr, ##28244
00e98     F2 30 02 FB | 	rdlong	local06, objptr
00e9c     37 00 00 FF 
00ea0     54 E4 85 F1 | 	sub	objptr, ##28244
00ea4     18 41 0A F2 | 	cmp	local14, local06 wz
00ea8     74 FF 9F 5D |  if_ne	jmp	#LR__0023
00eac                 | LR__0026
00eac                 | LR__0027
00eac                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00eac     37 00 00 FF 
00eb0     54 E4 05 F1 | 	add	objptr, ##28244
00eb4     F2 3C 02 FB | 	rdlong	local12, objptr
00eb8     37 00 00 FF 
00ebc     54 E4 85 F1 | 	sub	objptr, ##28244
00ec0     1E 31 02 F6 | 	mov	local06, local12
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     37 00 00 AF 
00ecc     54 E4 05 A1 |  if_e	add	objptr, ##28244
00ed0     F2 34 02 AB |  if_e	rdlong	local08, objptr
00ed4     37 00 00 AF 
00ed8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00edc     1A 33 02 A6 |  if_e	mov	local07, local08
00ee0     19 3D 02 A6 |  if_e	mov	local12, local07
00ee4     01 3C 66 A0 |  if_e	shl	local12, #1
00ee8     1E 31 02 A6 |  if_e	mov	local06, local12
00eec     18 13 02 A6 |  if_e	mov	arg01, local06
00ef0     6C 2B B2 AD |  if_e	call	#_hg010b_spin2_setcursorx
00ef4                 | '     
00ef4                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00ef4     4A 3A 0E F2 | 	cmp	local11, #74 wz
00ef8     37 00 00 AF 
00efc     54 E4 05 A1 |  if_e	add	objptr, ##28244
00f00     F2 34 02 AB |  if_e	rdlong	local08, objptr
00f04     37 00 00 AF 
00f08     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00f0c     1A 33 02 A6 |  if_e	mov	local07, local08
00f10     19 3D 02 A6 |  if_e	mov	local12, local07
00f14     01 3C 66 A0 |  if_e	shl	local12, #1
00f18     1E 31 02 A6 |  if_e	mov	local06, local12
00f1c     18 13 02 A6 |  if_e	mov	arg01, local06
00f20     3C 2B B2 AD |  if_e	call	#_hg010b_spin2_setcursorx
00f24                 | '   if key4=75 then v.setcursory(0)														' pgup
00f24     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f28     00 30 06 A6 |  if_e	mov	local06, #0
00f2c     00 12 06 A6 |  if_e	mov	arg01, #0
00f30     5C 2B B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f34                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f34     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f38     24 30 06 A6 |  if_e	mov	local06, #36
00f3c     24 12 06 A6 |  if_e	mov	arg01, #36
00f40     4C 2B B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f44                 | '   if key4=76 then 																' del
00f44     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f48     AC 01 90 5D |  if_ne	jmp	#LR__0032
00f4c                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f4c     3E E4 05 F1 | 	add	objptr, #62
00f50     F2 32 C2 FA | 	rdbyte	local07, objptr
00f54     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f58     07 34 66 F0 | 	shl	local08, #7
00f5c     3A E4 85 F1 | 	sub	objptr, #58
00f60     F2 52 02 FB | 	rdlong	local23, objptr
00f64     29 41 02 F6 | 	mov	local14, local23
00f68     1A 41 02 F1 | 	add	local14, local08
00f6c     38 E4 05 F1 | 	add	objptr, #56
00f70     F2 38 E2 FA | 	rdword	local10, objptr
00f74     1C 4D 52 F6 | 	abs	local20, local10 wc
00f78     01 4C 46 F0 | 	shr	local20, #1
00f7c     26 41 82 F3 | 	sumc	local14, local20
00f80     19 33 E2 F8 | 	getbyte	local07, local07, #0
00f84     07 32 66 F0 | 	shl	local07, #7
00f88     3C E4 85 F1 | 	sub	objptr, #60
00f8c     19 53 02 F1 | 	add	local23, local07
00f90     80 52 06 F1 | 	add	local23, #128
00f94                 | LR__0028
00f94     29 41 52 F2 | 	cmps	local14, local23 wc
00f98     20 00 90 3D |  if_ae	jmp	#LR__0029
00f9c     20 13 02 F6 | 	mov	arg01, local14
00fa0     01 12 06 F1 | 	add	arg01, #1
00fa4     EC ED B1 FD | 	call	#_pspeek
00fa8     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fac     20 13 02 F6 | 	mov	arg01, local14
00fb0     98 ED B1 FD | 	call	#_pspoke
00fb4     01 40 06 F1 | 	add	local14, #1
00fb8     D8 FF 9F FD | 	jmp	#LR__0028
00fbc                 | LR__0029
00fbc     3E E4 05 F1 | 	add	objptr, #62
00fc0     F2 36 C2 FA | 	rdbyte	local09, objptr
00fc4     07 36 66 F0 | 	shl	local09, #7
00fc8     3A E4 85 F1 | 	sub	objptr, #58
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     04 E4 85 F1 | 	sub	objptr, #4
00fd4     1B 13 02 F1 | 	add	arg01, local09
00fd8     7F 12 06 F1 | 	add	arg01, #127
00fdc     20 14 06 F6 | 	mov	arg02, #32
00fe0     68 ED B1 FD | 	call	#_pspoke
00fe4     52 00 00 FF 
00fe8     40 E5 05 F1 | 	add	objptr, ##42304
00fec     F2 00 68 FC | 	wrlong	#0, objptr
00ff0     52 00 00 FF 
00ff4     02 E5 85 F1 | 	sub	objptr, ##42242
00ff8     F2 3C C2 FA | 	rdbyte	local12, objptr
00ffc     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01000     07 34 66 F0 | 	shl	local08, #7
01004     3A E4 85 F1 | 	sub	objptr, #58
01008     F2 36 02 FB | 	rdlong	local09, objptr
0100c     1B 41 02 F6 | 	mov	local14, local09
01010     1A 41 02 F1 | 	add	local14, local08
01014     38 E4 05 F1 | 	add	objptr, #56
01018     F2 42 E2 FA | 	rdword	local15, objptr
0101c     21 39 32 F9 | 	getword	local10, local15, #0
01020     1C 4D 52 F6 | 	abs	local20, local10 wc
01024     01 4C 46 F0 | 	shr	local20, #1
01028     26 4D 82 F6 | 	negc	local20, local20
0102c     26 41 02 F1 | 	add	local14, local20
01030     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01034     18 33 02 F6 | 	mov	local07, local06
01038     07 32 66 F0 | 	shl	local07, #7
0103c     1B 35 02 F6 | 	mov	local08, local09
01040     3C E4 85 F1 | 	sub	objptr, #60
01044     1A 55 02 F6 | 	mov	local24, local08
01048     19 55 02 F1 | 	add	local24, local07
0104c     80 54 06 F1 | 	add	local24, #128
01050                 | LR__0030
01050     2A 41 52 F2 | 	cmps	local14, local24 wc
01054     A0 00 90 3D |  if_ae	jmp	#LR__0031
01058     3C E4 05 F1 | 	add	objptr, #60
0105c     F2 30 E2 FA | 	rdword	local06, objptr
01060     52 00 00 FF 
01064     04 E5 05 F1 | 	add	objptr, ##42244
01068     F2 34 02 FB | 	rdlong	local08, objptr
0106c     01 34 66 F0 | 	shl	local08, #1
01070     1A 31 02 F1 | 	add	local06, local08
01074     52 00 00 FF 
01078     02 E5 85 F1 | 	sub	objptr, ##42242
0107c     F2 3C C2 FA | 	rdbyte	local12, objptr
01080     3E E4 85 F1 | 	sub	objptr, #62
01084     04 3C 66 F0 | 	shl	local12, #4
01088     04 3C 06 F1 | 	add	local12, #4
0108c     20 13 02 F6 | 	mov	arg01, local14
01090     00 ED B1 FD | 	call	#_pspeek
01094     FD 32 E2 F8 | 	getbyte	local07, result1, #0
01098     41 E4 05 F1 | 	add	objptr, #65
0109c     F2 34 02 FB | 	rdlong	local08, objptr
010a0     04 E4 05 F1 | 	add	objptr, #4
010a4     F2 38 02 FB | 	rdlong	local10, objptr
010a8     45 E4 85 F1 | 	sub	objptr, #69
010ac     1C 37 02 F6 | 	mov	local09, local10
010b0     18 13 02 F6 | 	mov	arg01, local06
010b4     1E 15 02 F6 | 	mov	arg02, local12
010b8     19 17 02 F6 | 	mov	arg03, local07
010bc     1A 19 02 F6 | 	mov	arg04, local08
010c0     1B 1B 02 F6 | 	mov	arg05, local09
010c4     AC 27 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010c8     52 00 00 FF 
010cc     40 E5 05 F1 | 	add	objptr, ##42304
010d0     F2 30 02 FB | 	rdlong	local06, objptr
010d4     01 30 06 F1 | 	add	local06, #1
010d8     F2 30 62 FC | 	wrlong	local06, objptr
010dc     52 00 00 FF 
010e0     40 E5 85 F1 | 	sub	objptr, ##42304
010e4     20 31 02 F6 | 	mov	local06, local14
010e8     20 3D 02 F6 | 	mov	local12, local14
010ec     01 3C 06 F1 | 	add	local12, #1
010f0     1E 41 02 F6 | 	mov	local14, local12
010f4     58 FF 9F FD | 	jmp	#LR__0030
010f8                 | LR__0031
010f8                 | LR__0032
010f8                 | ' 
010f8                 | '   if key4 = 42 then  'backspace
010f8     2A 3A 0E F2 | 	cmp	local11, #42 wz
010fc     14 02 90 5D |  if_ne	jmp	#LR__0038
01100                 | '     if v.cursor_x>editor_spaces*2 then 
01100     3C E4 05 F1 | 	add	objptr, #60
01104     F2 3C E2 FA | 	rdword	local12, objptr
01108     1E 31 32 F9 | 	getword	local06, local12, #0
0110c     37 00 00 FF 
01110     18 E4 05 F1 | 	add	objptr, ##28184
01114     F2 36 02 FB | 	rdlong	local09, objptr
01118     37 00 00 FF 
0111c     54 E4 85 F1 | 	sub	objptr, ##28244
01120     1B 35 02 F6 | 	mov	local08, local09
01124     1A 33 02 F6 | 	mov	local07, local08
01128     01 32 66 F0 | 	shl	local07, #1
0112c     19 31 5A F2 | 	cmps	local06, local07 wcz
01130     C8 01 90 ED |  if_be	jmp	#LR__0036
01134     3C E4 05 F1 | 	add	objptr, #60
01138     F2 12 E2 FA | 	rdword	arg01, objptr
0113c     02 12 86 F1 | 	sub	arg01, #2
01140     02 E4 05 F1 | 	add	objptr, #2
01144     F2 14 C2 FA | 	rdbyte	arg02, objptr
01148     3E E4 85 F1 | 	sub	objptr, #62
0114c     C4 28 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01150                 | '       position v.cursor_x-2,v.cursor_y
01150                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01150     3E E4 05 F1 | 	add	objptr, #62
01154     F2 32 C2 FA | 	rdbyte	local07, objptr
01158     19 35 E2 F8 | 	getbyte	local08, local07, #0
0115c     07 34 66 F0 | 	shl	local08, #7
01160     3A E4 85 F1 | 	sub	objptr, #58
01164     F2 56 02 FB | 	rdlong	local25, objptr
01168     2B 41 02 F6 | 	mov	local14, local25
0116c     1A 41 02 F1 | 	add	local14, local08
01170     38 E4 05 F1 | 	add	objptr, #56
01174     F2 38 E2 FA | 	rdword	local10, objptr
01178     1C 4D 52 F6 | 	abs	local20, local10 wc
0117c     01 4C 46 F0 | 	shr	local20, #1
01180     26 41 82 F3 | 	sumc	local14, local20
01184     19 33 E2 F8 | 	getbyte	local07, local07, #0
01188     07 32 66 F0 | 	shl	local07, #7
0118c     3C E4 85 F1 | 	sub	objptr, #60
01190     19 57 02 F1 | 	add	local25, local07
01194     80 56 06 F1 | 	add	local25, #128
01198                 | LR__0033
01198     2B 41 52 F2 | 	cmps	local14, local25 wc
0119c     20 00 90 3D |  if_ae	jmp	#LR__0034
011a0     20 13 02 F6 | 	mov	arg01, local14
011a4     01 12 06 F1 | 	add	arg01, #1
011a8     E8 EB B1 FD | 	call	#_pspeek
011ac     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011b0     20 13 02 F6 | 	mov	arg01, local14
011b4     94 EB B1 FD | 	call	#_pspoke
011b8     01 40 06 F1 | 	add	local14, #1
011bc     D8 FF 9F FD | 	jmp	#LR__0033
011c0                 | LR__0034
011c0     3E E4 05 F1 | 	add	objptr, #62
011c4     F2 36 C2 FA | 	rdbyte	local09, objptr
011c8     07 36 66 F0 | 	shl	local09, #7
011cc     3A E4 85 F1 | 	sub	objptr, #58
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     04 E4 85 F1 | 	sub	objptr, #4
011d8     1B 13 02 F1 | 	add	arg01, local09
011dc     7F 12 06 F1 | 	add	arg01, #127
011e0     20 14 06 F6 | 	mov	arg02, #32
011e4     64 EB B1 FD | 	call	#_pspoke
011e8     52 00 00 FF 
011ec     40 E5 05 F1 | 	add	objptr, ##42304
011f0     F2 00 68 FC | 	wrlong	#0, objptr
011f4     52 00 00 FF 
011f8     02 E5 85 F1 | 	sub	objptr, ##42242
011fc     F2 3C C2 FA | 	rdbyte	local12, objptr
01200     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01204     07 34 66 F0 | 	shl	local08, #7
01208     3A E4 85 F1 | 	sub	objptr, #58
0120c     F2 36 02 FB | 	rdlong	local09, objptr
01210     1B 41 02 F6 | 	mov	local14, local09
01214     1A 41 02 F1 | 	add	local14, local08
01218     38 E4 05 F1 | 	add	objptr, #56
0121c     F2 42 E2 FA | 	rdword	local15, objptr
01220     21 39 32 F9 | 	getword	local10, local15, #0
01224     1C 4D 52 F6 | 	abs	local20, local10 wc
01228     01 4C 46 F0 | 	shr	local20, #1
0122c     26 4D 82 F6 | 	negc	local20, local20
01230     26 41 02 F1 | 	add	local14, local20
01234     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01238     18 33 02 F6 | 	mov	local07, local06
0123c     07 32 66 F0 | 	shl	local07, #7
01240     1B 35 02 F6 | 	mov	local08, local09
01244     3C E4 85 F1 | 	sub	objptr, #60
01248     1A 59 02 F6 | 	mov	local26, local08
0124c     19 59 02 F1 | 	add	local26, local07
01250     80 58 06 F1 | 	add	local26, #128
01254                 | LR__0035
01254     2C 41 52 F2 | 	cmps	local14, local26 wc
01258     B8 00 90 3D |  if_ae	jmp	#LR__0037
0125c     3C E4 05 F1 | 	add	objptr, #60
01260     F2 30 E2 FA | 	rdword	local06, objptr
01264     52 00 00 FF 
01268     04 E5 05 F1 | 	add	objptr, ##42244
0126c     F2 34 02 FB | 	rdlong	local08, objptr
01270     01 34 66 F0 | 	shl	local08, #1
01274     1A 31 02 F1 | 	add	local06, local08
01278     52 00 00 FF 
0127c     02 E5 85 F1 | 	sub	objptr, ##42242
01280     F2 3C C2 FA | 	rdbyte	local12, objptr
01284     3E E4 85 F1 | 	sub	objptr, #62
01288     04 3C 66 F0 | 	shl	local12, #4
0128c     04 3C 06 F1 | 	add	local12, #4
01290     20 13 02 F6 | 	mov	arg01, local14
01294     FC EA B1 FD | 	call	#_pspeek
01298     FD 32 E2 F8 | 	getbyte	local07, result1, #0
0129c     41 E4 05 F1 | 	add	objptr, #65
012a0     F2 34 02 FB | 	rdlong	local08, objptr
012a4     04 E4 05 F1 | 	add	objptr, #4
012a8     F2 38 02 FB | 	rdlong	local10, objptr
012ac     45 E4 85 F1 | 	sub	objptr, #69
012b0     1C 37 02 F6 | 	mov	local09, local10
012b4     18 13 02 F6 | 	mov	arg01, local06
012b8     1E 15 02 F6 | 	mov	arg02, local12
012bc     19 17 02 F6 | 	mov	arg03, local07
012c0     1A 19 02 F6 | 	mov	arg04, local08
012c4     1B 1B 02 F6 | 	mov	arg05, local09
012c8     A8 25 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012cc     52 00 00 FF 
012d0     40 E5 05 F1 | 	add	objptr, ##42304
012d4     F2 30 02 FB | 	rdlong	local06, objptr
012d8     01 30 06 F1 | 	add	local06, #1
012dc     F2 30 62 FC | 	wrlong	local06, objptr
012e0     52 00 00 FF 
012e4     40 E5 85 F1 | 	sub	objptr, ##42304
012e8     20 31 02 F6 | 	mov	local06, local14
012ec     20 3D 02 F6 | 	mov	local12, local14
012f0     01 3C 06 F1 | 	add	local12, #1
012f4     1E 41 02 F6 | 	mov	local14, local12
012f8     58 FF 9F FD | 	jmp	#LR__0035
012fc                 | LR__0036
012fc     8D 01 00 FF 
01300     AF 51 06 F6 | 	mov	local22, ##@LR__5088
01304     04 30 06 F6 | 	mov	local06, #4
01308     3C E4 05 F1 | 	add	objptr, #60
0130c     F2 08 58 FC | 	wrword	#4, objptr
01310     3C E4 85 F1 | 	sub	objptr, #60
01314                 | LR__0037
01314                 | LR__0038
01314                 | ' 
01314                 | '   if key4=82 then 						' arrow up
01314     52 3A 0E F2 | 	cmp	local11, #82 wz
01318     58 00 90 5D |  if_ne	jmp	#LR__0039
0131c                 | ' return cursor_y
0131c     3E E4 05 F1 | 	add	objptr, #62
01320     F2 FA C1 FA | 	rdbyte	result1, objptr
01324     01 FA 85 F1 | 	sub	result1, #1
01328     52 00 00 FF 
0132c     E6 E4 05 F1 | 	add	objptr, ##42214
01330     F2 FA 61 FC | 	wrlong	result1, objptr
01334                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01334     52 00 00 FF 
01338     24 E5 85 F1 | 	sub	objptr, ##42276
0133c     00 FA 55 F2 | 	cmps	result1, #0 wc
01340     52 00 00 CF 
01344     24 E5 05 C1 |  if_b	add	objptr, ##42276
01348     F2 00 68 CC |  if_b	wrlong	#0, objptr
0134c     52 00 00 CF 
01350     24 E5 85 C1 |  if_b	sub	objptr, ##42276
01354     52 00 00 FF 
01358     24 E5 05 F1 | 	add	objptr, ##42276
0135c     F2 3C 02 FB | 	rdlong	local12, objptr
01360     52 00 00 FF 
01364     24 E5 85 F1 | 	sub	objptr, ##42276
01368     1E 31 02 F6 | 	mov	local06, local12
0136c     18 13 02 F6 | 	mov	arg01, local06
01370     1C 27 B2 FD | 	call	#_hg010b_spin2_setcursory
01374                 | LR__0039
01374                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01374     51 3A 0E F2 | 	cmp	local11, #81 wz
01378     58 00 90 5D |  if_ne	jmp	#LR__0040
0137c                 | ' return cursor_y
0137c     3E E4 05 F1 | 	add	objptr, #62
01380     F2 FA C1 FA | 	rdbyte	result1, objptr
01384     01 FA 05 F1 | 	add	result1, #1
01388     52 00 00 FF 
0138c     E6 E4 05 F1 | 	add	objptr, ##42214
01390     F2 FA 61 FC | 	wrlong	result1, objptr
01394                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01394     52 00 00 FF 
01398     24 E5 85 F1 | 	sub	objptr, ##42276
0139c     25 FA 55 F2 | 	cmps	result1, #37 wc
013a0     52 00 00 3F 
013a4     24 E5 05 31 |  if_ae	add	objptr, ##42276
013a8     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013ac     52 00 00 3F 
013b0     24 E5 85 31 |  if_ae	sub	objptr, ##42276
013b4     52 00 00 FF 
013b8     24 E5 05 F1 | 	add	objptr, ##42276
013bc     F2 3C 02 FB | 	rdlong	local12, objptr
013c0     52 00 00 FF 
013c4     24 E5 85 F1 | 	sub	objptr, ##42276
013c8     1E 31 02 F6 | 	mov	local06, local12
013cc     18 13 02 F6 | 	mov	arg01, local06
013d0     BC 26 B2 FD | 	call	#_hg010b_spin2_setcursory
013d4                 | LR__0040
013d4                 | '   if key4=80 then
013d4     50 3A 0E F2 | 	cmp	local11, #80 wz
013d8     74 00 90 5D |  if_ne	jmp	#LR__0041
013dc                 | ' return cursor_x
013dc     3C E4 05 F1 | 	add	objptr, #60
013e0     F2 30 E2 FA | 	rdword	local06, objptr
013e4     02 30 86 F1 | 	sub	local06, #2
013e8     52 00 00 FF 
013ec     EC E4 05 F1 | 	add	objptr, ##42220
013f0     F2 30 62 FC | 	wrlong	local06, objptr
013f4                 | '     cx=v.getcursorx()-2 					' arrow left
013f4                 | '     if cx<editor_spaces then cx=editor_spaces			
013f4     1B 00 00 FF 
013f8     D4 E4 85 F1 | 	sub	objptr, ##14036
013fc     F2 34 02 FB | 	rdlong	local08, objptr
01400     37 00 00 FF 
01404     54 E4 85 F1 | 	sub	objptr, ##28244
01408     1A 33 02 F6 | 	mov	local07, local08
0140c     19 31 52 F2 | 	cmps	local06, local07 wc
01410     37 00 00 CF 
01414     54 E4 05 C1 |  if_b	add	objptr, ##28244
01418     F2 30 02 CB |  if_b	rdlong	local06, objptr
0141c     1B 00 00 CF 
01420     D4 E4 05 C1 |  if_b	add	objptr, ##14036
01424     F2 30 62 CC |  if_b	wrlong	local06, objptr
01428     52 00 00 CF 
0142c     28 E5 85 C1 |  if_b	sub	objptr, ##42280
01430     52 00 00 FF 
01434     28 E5 05 F1 | 	add	objptr, ##42280
01438     F2 3C 02 FB | 	rdlong	local12, objptr
0143c     52 00 00 FF 
01440     28 E5 85 F1 | 	sub	objptr, ##42280
01444     1E 31 02 F6 | 	mov	local06, local12
01448     18 13 02 F6 | 	mov	arg01, local06
0144c     10 26 B2 FD | 	call	#_hg010b_spin2_setcursorx
01450                 | LR__0041
01450                 | '   if key4=79 then						' arrow right
01450     4F 3A 0E F2 | 	cmp	local11, #79 wz
01454     54 00 90 5D |  if_ne	jmp	#LR__0042
01458                 | ' return cursor_x
01458     3C E4 05 F1 | 	add	objptr, #60
0145c     F2 FA E1 FA | 	rdword	result1, objptr
01460     02 FA 05 F1 | 	add	result1, #2
01464     52 00 00 FF 
01468     EC E4 05 F1 | 	add	objptr, ##42220
0146c     F2 FA 61 FC | 	wrlong	result1, objptr
01470                 | '     cx=v.getcursorx()+2 
01470                 | '     if cx>254  then cx=254 
01470     52 00 00 FF 
01474     28 E5 85 F1 | 	sub	objptr, ##42280
01478     FF FA 55 F2 | 	cmps	result1, #255 wc
0147c     52 00 00 3F 
01480     28 E5 05 31 |  if_ae	add	objptr, ##42280
01484     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
01488     52 00 00 3F 
0148c     28 E5 85 31 |  if_ae	sub	objptr, ##42280
01490     52 00 00 FF 
01494     28 E5 05 F1 | 	add	objptr, ##42280
01498     F2 30 02 FB | 	rdlong	local06, objptr
0149c     52 00 00 FF 
014a0     28 E5 85 F1 | 	sub	objptr, ##42280
014a4     18 13 02 F6 | 	mov	arg01, local06
014a8     B4 25 B2 FD | 	call	#_hg010b_spin2_setcursorx
014ac                 | LR__0042
014ac                 | ' 
014ac                 | '   if key4=73 then 						' ins
014ac     49 3A 0E F2 | 	cmp	local11, #73 wz
014b0     40 00 90 5D |  if_ne	jmp	#LR__0045
014b4     52 00 00 FF 
014b8     20 E5 05 F1 | 	add	objptr, ##42272
014bc     F2 30 02 FB | 	rdlong	local06, objptr
014c0     18 3D 22 F6 | 	not	local12, local06
014c4     F2 3C 62 FC | 	wrlong	local12, objptr
014c8                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014c8     52 00 00 FF 
014cc     20 E5 85 F1 | 	sub	objptr, ##42272
014d0     00 3C 0E F2 | 	cmp	local12, #0 wz
014d4     10 00 90 AD |  if_e	jmp	#LR__0043
014d8     0E 30 06 F6 | 	mov	local06, #14
014dc     0E 12 06 F6 | 	mov	arg01, #14
014e0     68 1B B2 FD | 	call	#_hg010b_spin2_setcursorshape
014e4     0C 00 90 FD | 	jmp	#LR__0044
014e8                 | LR__0043
014e8     00 30 06 F6 | 	mov	local06, #0
014ec     00 12 06 F6 | 	mov	arg01, #0
014f0     58 1B B2 FD | 	call	#_hg010b_spin2_setcursorshape
014f4                 | LR__0044
014f4                 | LR__0045
014f4     00 2C 06 F6 | 	mov	local04, #0
014f8     20 F3 9F FD | 	jmp	#LR__0001
014fc                 | LR__0046
014fc     A7 F0 03 F6 | 	mov	ptra, fp
01500     B2 00 A0 FD | 	call	#popregs_
01504                 | _edit_ret
01504     2D 00 64 FD | 	ret
01508                 | 
01508                 | ' 
01508                 | ' ''-----------------------------------------------------------------------------------------------------------
01508                 | ' ' 					A housekeepeer.
01508                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01508                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01508                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01508                 | ' ''-----------------------------------------------------------------------------------------------------------
01508                 | ' 
01508                 | ' sub housekeeper
01508                 | _housekeeper
01508                 | ' 
01508                 | ' do
01508                 | LR__0050
01508                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01508     49 E4 05 F1 | 	add	objptr, #73
0150c                 | LR__0051
0150c     F2 12 02 FB | 	rdlong	arg01, objptr
01510     01 12 0E F2 | 	cmp	arg01, #1 wz
01514     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01518     52 00 00 FF 
0151c     A3 E4 05 F1 | 	add	objptr, ##42147
01520     F2 12 02 FB | 	rdlong	arg01, objptr
01524     01 12 06 F1 | 	add	arg01, #1
01528     F2 12 62 FC | 	wrlong	arg01, objptr
0152c     52 00 00 FF 
01530     EC E4 85 F1 | 	sub	objptr, ##42220
01534     80 00 B0 FD | 	call	#_gethdi
01538     05 12 06 F6 | 	mov	arg01, #5
0153c     04 3E B2 FD | 	call	#__system___waitms
01540     52 00 00 FF 
01544     EC E4 05 F1 | 	add	objptr, ##42220
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     EC E4 85 F1 | 	sub	objptr, ##42220
0155c     58 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     DC 3D B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     EC E4 05 F1 | 	add	objptr, ##42220
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     EC E4 85 F1 | 	sub	objptr, ##42220
01584     30 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     B4 3D B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     EC E4 05 F1 | 	add	objptr, ##42220
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     EC E4 85 F1 | 	sub	objptr, ##42220
015ac     08 00 B0 FD | 	call	#_gethdi
015b0     54 FF 9F FD | 	jmp	#LR__0050
015b4                 | _housekeeper_ret
015b4     2D 00 64 FD | 	ret
015b8                 | 
015b8                 | ' 
015b8                 | ' '----------------------------------------------------------------------------------------------------------
015b8                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015b8                 | ' '----------------------------------------------------------------------------------------------------------
015b8                 | ' 
015b8                 | ' sub gethdi
015b8                 | _gethdi
015b8     0A 4A 05 F6 | 	mov	COUNT_, #10
015bc     A8 00 A0 FD | 	call	#pushregs_
015c0                 | '   x := mouse_xacc
015c0     14 00 00 FF 
015c4     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
015c8     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015cc                 | '   y := mouse_yacc
015cc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015d0     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015d4     51 00 00 FF 
015d8     68 E5 05 F1 | 	add	objptr, ##41832
015dc     F2 14 62 FC | 	wrlong	arg02, objptr
015e0     04 E4 05 F1 | 	add	objptr, #4
015e4     F2 12 62 FC | 	wrlong	arg01, objptr
015e8                 | '   x := 0
015e8                 | '   y := mouse_zacc
015e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015ec     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
015f0     08 E4 05 F1 | 	add	objptr, #8
015f4     F2 FA 61 FC | 	wrlong	result1, objptr
015f8                 | '   return mouse_bstate
015f8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015fc     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01600     14 00 00 FF 
01604     ED F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
01608     04 E4 85 F1 | 	sub	objptr, #4
0160c     F2 FA 61 FC | 	wrlong	result1, objptr
01610     51 00 00 FF 
01614     70 E5 85 F1 | 	sub	objptr, ##41840
01618     00 26 06 F6 | 	mov	local01, #0
0161c                 | ' 
0161c                 | ' mousex,mousey=kbm.mouse_xy()
0161c                 | ' dummy,mousew=kbm.mouse_scroll()
0161c                 | ' mousek=kbm.mouse_buttons()
0161c                 | ' i=0
0161c                 | ' for j=0 to 6
0161c     00 28 06 F6 | 	mov	local02, #0
01620                 | LR__0060
01620                 | '   if kbm.hidpad_id(j)>0 then
01620     14 13 02 F6 | 	mov	arg01, local02
01624                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01624     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01628     13 00 00 FF 
0162c     F8 FB 05 F1 | 	add	result1, ##10232
01630     05 12 66 F0 | 	shl	arg01, #5
01634     09 FB 01 F1 | 	add	result1, arg01
01638     FD FA 01 FB | 	rdlong	result1, result1
0163c     01 FA 55 F2 | 	cmps	result1, #1 wc
01640     C8 01 90 CD |  if_b	jmp	#LR__0061
01644     14 13 02 F6 | 	mov	arg01, local02
01648     00 14 06 F6 | 	mov	arg02, #0
0164c     34 36 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01650     FD 2A 02 F6 | 	mov	local03, result1
01654     14 13 02 F6 | 	mov	arg01, local02
01658     01 14 06 F6 | 	mov	arg02, #1
0165c     24 36 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01660     FD 2C 02 F6 | 	mov	local04, result1
01664     14 13 02 F6 | 	mov	arg01, local02
01668     02 14 06 F6 | 	mov	arg02, #2
0166c     14 36 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01670     FD 2E 02 F6 | 	mov	local05, result1
01674     14 13 02 F6 | 	mov	arg01, local02
01678     00 14 06 F6 | 	mov	arg02, #0
0167c     3C 36 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01680     FD 30 02 F6 | 	mov	local06, result1
01684     14 13 02 F6 | 	mov	arg01, local02
01688     03 14 06 F6 | 	mov	arg02, #3
0168c     F4 35 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01690     FD 32 02 F6 | 	mov	local07, result1
01694     14 13 02 F6 | 	mov	arg01, local02
01698     04 14 06 F6 | 	mov	arg02, #4
0169c     E4 35 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a0     FD 34 02 F6 | 	mov	local08, result1
016a4     14 13 02 F6 | 	mov	arg01, local02
016a8     05 14 06 F6 | 	mov	arg02, #5
016ac     D4 35 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b0     FD 36 02 F6 | 	mov	local09, result1
016b4     14 13 02 F6 | 	mov	arg01, local02
016b8     06 14 06 F6 | 	mov	arg02, #6
016bc     C4 35 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c0     FD 38 02 F6 | 	mov	local10, result1
016c4     14 13 02 F6 | 	mov	arg01, local02
016c8     07 14 06 F6 | 	mov	arg02, #7
016cc     B4 35 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016d0     13 13 02 F6 | 	mov	arg01, local01
016d4     02 12 66 F0 | 	shl	arg01, #2
016d8     51 00 00 FF 
016dc     78 E5 05 F1 | 	add	objptr, ##41848
016e0     F2 12 02 F1 | 	add	arg01, objptr
016e4     09 2B 62 FC | 	wrlong	local03, arg01
016e8     13 13 02 F6 | 	mov	arg01, local01
016ec     02 12 66 F0 | 	shl	arg01, #2
016f0     1C E4 05 F1 | 	add	objptr, #28
016f4     F2 12 02 F1 | 	add	arg01, objptr
016f8     09 2D 62 FC | 	wrlong	local04, arg01
016fc     13 13 02 F6 | 	mov	arg01, local01
01700     02 12 66 F0 | 	shl	arg01, #2
01704     1C E4 05 F1 | 	add	objptr, #28
01708     F2 12 02 F1 | 	add	arg01, objptr
0170c     09 2F 62 FC | 	wrlong	local05, arg01
01710     13 2F 02 F6 | 	mov	local05, local01
01714     02 2E 66 F0 | 	shl	local05, #2
01718     1C E4 05 F1 | 	add	objptr, #28
0171c     F2 2E 02 F1 | 	add	local05, objptr
01720     17 31 62 FC | 	wrlong	local06, local05
01724     13 31 02 F6 | 	mov	local06, local01
01728     02 30 66 F0 | 	shl	local06, #2
0172c     1C E4 05 F1 | 	add	objptr, #28
01730     F2 30 02 F1 | 	add	local06, objptr
01734     18 33 62 FC | 	wrlong	local07, local06
01738     13 33 02 F6 | 	mov	local07, local01
0173c     02 32 66 F0 | 	shl	local07, #2
01740     1C E4 05 F1 | 	add	objptr, #28
01744     F2 32 02 F1 | 	add	local07, objptr
01748     19 35 62 FC | 	wrlong	local08, local07
0174c     13 35 02 F6 | 	mov	local08, local01
01750     02 34 66 F0 | 	shl	local08, #2
01754     1C E4 05 F1 | 	add	objptr, #28
01758     F2 34 02 F1 | 	add	local08, objptr
0175c     1A 37 62 FC | 	wrlong	local09, local08
01760     13 37 02 F6 | 	mov	local09, local01
01764     02 36 66 F0 | 	shl	local09, #2
01768     1C E4 05 F1 | 	add	objptr, #28
0176c     F2 36 02 F1 | 	add	local09, objptr
01770     1B 39 62 FC | 	wrlong	local10, local09
01774     13 39 02 F6 | 	mov	local10, local01
01778     02 38 66 F0 | 	shl	local10, #2
0177c     1C E4 05 F1 | 	add	objptr, #28
01780     F2 38 02 F1 | 	add	local10, objptr
01784     1C FB 61 FC | 	wrlong	result1, local10
01788     60 00 00 FF 
0178c     00 2A 06 F1 | 	add	local03, ##49152
01790     0F 2A 46 F0 | 	shr	local03, #15
01794     01 38 06 F6 | 	mov	local10, #1
01798     15 39 02 F1 | 	add	local10, local03
0179c     60 00 00 FF 
017a0     00 2C 06 F1 | 	add	local04, ##49152
017a4     0F 2C 46 F0 | 	shr	local04, #15
017a8     01 36 06 F6 | 	mov	local09, #1
017ac     16 37 02 F1 | 	add	local09, local04
017b0     13 35 02 F6 | 	mov	local08, local01
017b4     02 34 66 F0 | 	shl	local08, #2
017b8     1C E4 05 F1 | 	add	objptr, #28
017bc     F2 34 02 F1 | 	add	local08, objptr
017c0     02 36 66 F0 | 	shl	local09, #2
017c4     1B 39 02 F1 | 	add	local10, local09
017c8     1A 39 62 FC | 	wrlong	local10, local08
017cc     13 39 02 F6 | 	mov	local10, local01
017d0     02 38 66 F0 | 	shl	local10, #2
017d4     1C E4 05 F1 | 	add	objptr, #28
017d8     F2 38 02 F1 | 	add	local10, objptr
017dc     14 13 02 F6 | 	mov	arg01, local02
017e0     52 00 00 FF 
017e4     90 E4 85 F1 | 	sub	objptr, ##42128
017e8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
017e8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
017ec     13 00 00 FF 
017f0     F8 FB 05 F1 | 	add	result1, ##10232
017f4     05 12 66 F0 | 	shl	arg01, #5
017f8     09 FB 01 F1 | 	add	result1, arg01
017fc     18 FA 05 F1 | 	add	result1, #24
01800     FD FA 01 FB | 	rdlong	result1, result1
01804     1C FB 61 FC | 	wrlong	result1, local10
01808     01 26 06 F1 | 	add	local01, #1
0180c                 | LR__0061
0180c     01 28 06 F1 | 	add	local02, #1
01810     07 28 16 F2 | 	cmp	local02, #7 wc
01814     08 FE 9F CD |  if_b	jmp	#LR__0060
01818     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0181c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0181c                 | LR__0062
0181c     07 26 16 F2 | 	cmp	local01, #7 wc
01820     3C 00 90 3D |  if_ae	jmp	#LR__0064
01824     13 39 02 F6 | 	mov	local10, local01
01828     02 38 66 F0 | 	shl	local10, #2
0182c     52 00 00 FF 
01830     74 E4 05 F1 | 	add	objptr, ##42100
01834     F2 38 02 F1 | 	add	local10, objptr
01838     1C 01 68 FC | 	wrlong	#0, local10
0183c     13 39 02 F6 | 	mov	local10, local01
01840     02 38 66 F0 | 	shl	local10, #2
01844     1C E4 05 F1 | 	add	objptr, #28
01848     F2 38 02 F1 | 	add	local10, objptr
0184c     1C 01 68 FC | 	wrlong	#0, local10
01850     01 26 06 F1 | 	add	local01, #1
01854     52 00 00 FF 
01858     90 E4 85 F1 | 	sub	objptr, ##42128
0185c     BC FF 9F FD | 	jmp	#LR__0062
01860                 | LR__0063
01860                 | LR__0064
01860     A7 F0 03 F6 | 	mov	ptra, fp
01864     B2 00 A0 FD | 	call	#popregs_
01868                 | _gethdi_ret
01868     2D 00 64 FD | 	ret
0186c                 | 
0186c                 | ' 
0186c                 | ' '-------------------------------------------------------------------------------------------------------------
0186c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0186c                 | ' '-------------------------------------------------------------------------------------------------------------
0186c                 | ' 
0186c                 | ' '-------------------------------------------------------------------------------------------------------------
0186c                 | ' '
0186c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0186c                 | ' '
0186c                 | ' '-------------------------------------------------------------------------------------------------------------
0186c                 | ' 
0186c                 | ' 
0186c                 | ' sub interpret
0186c                 | _interpret
0186c     34 4A 05 F6 | 	mov	COUNT_, #52
01870     A8 00 A0 FD | 	call	#pushregs_
01874     01 00 00 FF 
01878     80 F0 07 F1 | 	add	ptra, ##640
0187c     37 00 00 FF 
01880     3C E4 05 F1 | 	add	objptr, ##28220
01884     F2 12 02 FB | 	rdlong	arg01, objptr
01888     37 00 00 FF 
0188c     3C E4 85 F1 | 	sub	objptr, ##28220
01890     64 50 B2 FD | 	call	#__system__RTrim_S
01894     FD 12 02 F6 | 	mov	arg01, result1
01898     9C 4F B2 FD | 	call	#__system__LTrim_S
0189c     37 00 00 FF 
018a0     40 E4 05 F1 | 	add	objptr, ##28224
018a4     F2 FA 61 FC | 	wrlong	result1, objptr
018a8     04 E4 05 F1 | 	add	objptr, #4
018ac     FF FF FF FF 
018b0     F2 FE 6B FC | 	wrlong	##-1, objptr
018b4     1B 00 00 FF 
018b8     C4 E4 05 F1 | 	add	objptr, ##14020
018bc     F2 00 68 FC | 	wrlong	#0, objptr
018c0     08 00 00 FF 
018c4     6C E4 85 F1 | 	sub	objptr, ##4204
018c8     F2 00 68 FC | 	wrlong	#0, objptr
018cc     4A 00 00 FF 
018d0     9C E4 85 F1 | 	sub	objptr, ##38044
018d4     00 26 06 F6 | 	mov	local01, #0
018d8                 | LR__0070
018d8                 | ' 
018d8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
018d8                 | ' 
018d8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
018d8                 | ' 
018d8                 | ' 108 
018d8                 | ' for i=0 to 125: separators(i)=0 :next i
018d8     00 28 06 F6 | 	mov	local02, #0
018dc     38 4E 05 F1 | 	add	fp, #56
018e0     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018e4                 | LR__0071
018e4     14 2B 02 F6 | 	mov	local03, local02
018e8     02 2A 66 F0 | 	shl	local03, #2
018ec     A7 2A 02 F1 | 	add	local03, fp
018f0     15 01 68 FC | 	wrlong	#0, local03
018f4     01 28 06 F1 | 	add	local02, #1
018f8     7E 28 56 F2 | 	cmps	local02, #126 wc
018fc     E4 FF 9F CD |  if_b	jmp	#LR__0071
01900                 | LR__0072
01900     38 4E 85 F1 | 	sub	fp, #56
01904                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01904     00 28 06 F6 | 	mov	local02, #0
01908     35 00 00 FF 
0190c     2C E4 05 F1 | 	add	objptr, ##27180
01910     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01914                 | LR__0073
01914     14 2D 02 F6 | 	mov	local04, local02
01918     03 2C 66 F0 | 	shl	local04, #3
0191c     F2 2C 02 F1 | 	add	local04, objptr
01920     8D 01 00 FF 
01924     B0 17 06 F6 | 	mov	arg03, ##@LR__5089
01928     16 17 62 FC | 	wrlong	arg03, local04
0192c     14 2D 02 F6 | 	mov	local04, local02
01930     03 2C 66 F0 | 	shl	local04, #3
01934     F2 2E 02 F6 | 	mov	local05, objptr
01938     F2 2C 02 F1 | 	add	local04, objptr
0193c     00 30 06 F6 | 	mov	local06, #0
01940     04 2C 06 F1 | 	add	local04, #4
01944     16 01 68 FC | 	wrlong	#0, local04
01948     01 28 06 F1 | 	add	local02, #1
0194c     7E 28 56 F2 | 	cmps	local02, #126 wc
01950     C0 FF 9F CD |  if_b	jmp	#LR__0073
01954                 | LR__0074
01954     02 00 00 FF 
01958     10 E4 05 F1 | 	add	objptr, ##1040
0195c     F2 12 02 FB | 	rdlong	arg01, objptr
01960     37 00 00 FF 
01964     3C E4 85 F1 | 	sub	objptr, ##28220
01968     8C 4F B2 FD | 	call	#__system__RTrim_S
0196c     FD 12 02 F6 | 	mov	arg01, result1
01970     C4 4E B2 FD | 	call	#__system__LTrim_S
01974     37 00 00 FF 
01978     3C E4 05 F1 | 	add	objptr, ##28220
0197c     F2 FA 61 FC | 	wrlong	result1, objptr
01980     8D 01 00 FF 
01984     B1 2D 06 F6 | 	mov	local04, ##@LR__5090
01988     1B 00 00 FF 
0198c     08 E5 05 F1 | 	add	objptr, ##14088
01990     F2 2C 62 FC | 	wrlong	local04, objptr
01994     1B 00 00 FF 
01998     08 E5 85 F1 | 	sub	objptr, ##14088
0199c     F2 12 02 FB | 	rdlong	arg01, objptr
019a0     37 00 00 FF 
019a4     3C E4 85 F1 | 	sub	objptr, ##28220
019a8     09 33 02 F6 | 	mov	local07, arg01
019ac     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
019b0                 | LR__0075
019b0     19 FB C9 FA | 	rdbyte	result1, local07 wz
019b4     01 32 06 51 |  if_ne	add	local07, #1
019b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
019bc                 | LR__0076
019bc     09 33 8A F1 | 	sub	local07, arg01 wz
019c0     52 00 00 FF 
019c4     48 E5 05 F1 | 	add	objptr, ##42312
019c8     F2 32 62 FC | 	wrlong	local07, objptr
019cc                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
019cc     52 00 00 FF 
019d0     48 E5 85 F1 | 	sub	objptr, ##42312
019d4     80 28 90 AD |  if_e	jmp	#LR__0189
019d8     00 34 06 F6 | 	mov	local08, #0
019dc                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
019dc                 | ' for i=1 to len(line$)
019dc     01 28 06 F6 | 	mov	local02, #1
019e0     37 00 00 FF 
019e4     3C E4 05 F1 | 	add	objptr, ##28220
019e8     F2 12 02 FB | 	rdlong	arg01, objptr
019ec     37 00 00 FF 
019f0     3C E4 85 F1 | 	sub	objptr, ##28220
019f4     09 33 02 F6 | 	mov	local07, arg01
019f8     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019fc                 | LR__0077
019fc     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a00     01 32 06 51 |  if_ne	add	local07, #1
01a04     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01a08                 | LR__0078
01a08     09 33 82 F1 | 	sub	local07, arg01
01a0c     19 37 02 F6 | 	mov	local09, local07
01a10     01 36 06 F1 | 	add	local09, #1
01a14                 | LR__0079
01a14     1B 29 52 F2 | 	cmps	local02, local09 wc
01a18     A4 00 90 3D |  if_ae	jmp	#LR__0081
01a1c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01a1c     37 00 00 FF 
01a20     3C E4 05 F1 | 	add	objptr, ##28220
01a24     F2 12 02 FB | 	rdlong	arg01, objptr
01a28     37 00 00 FF 
01a2c     3C E4 85 F1 | 	sub	objptr, ##28220
01a30     14 15 02 F6 | 	mov	arg02, local02
01a34     01 16 06 F6 | 	mov	arg03, #1
01a38     44 4B B2 FD | 	call	#__system__Mid_S
01a3c     FD 12 02 F6 | 	mov	arg01, result1
01a40     8D 01 00 FF 
01a44     B2 15 06 F6 | 	mov	arg02, ##@LR__5091
01a48     84 36 B2 FD | 	call	#__system___string_cmp
01a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a50     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a54     01 34 06 A6 |  if_e	mov	local08, #1
01a58     3C 00 90 AD |  if_e	jmp	#LR__0080
01a5c     37 00 00 FF 
01a60     3C E4 05 F1 | 	add	objptr, ##28220
01a64     F2 12 02 FB | 	rdlong	arg01, objptr
01a68     37 00 00 FF 
01a6c     3C E4 85 F1 | 	sub	objptr, ##28220
01a70     14 15 02 F6 | 	mov	arg02, local02
01a74     01 16 06 F6 | 	mov	arg03, #1
01a78     04 4B B2 FD | 	call	#__system__Mid_S
01a7c     FD 12 02 F6 | 	mov	arg01, result1
01a80     8D 01 00 FF 
01a84     B4 15 06 F6 | 	mov	arg02, ##@LR__5092
01a88     44 36 B2 FD | 	call	#__system___string_cmp
01a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a90     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a94     00 34 06 A6 |  if_e	mov	local08, #0
01a98                 | LR__0080
01a98     14 2D 02 F6 | 	mov	local04, local02
01a9c     03 2C 66 F0 | 	shl	local04, #3
01aa0     F2 2E 02 F6 | 	mov	local05, objptr
01aa4     35 00 00 FF 
01aa8     2C 2E 06 F1 | 	add	local05, ##27180
01aac     17 2D 02 F1 | 	add	local04, local05
01ab0     04 2C 06 F1 | 	add	local04, #4
01ab4     16 35 62 FC | 	wrlong	local08, local04
01ab8     01 28 06 F1 | 	add	local02, #1
01abc     54 FF 9F FD | 	jmp	#LR__0079
01ac0                 | LR__0081
01ac0     01 28 06 F6 | 	mov	local02, #1
01ac4                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01ac4                 | LR__0082
01ac4     37 00 00 FF 
01ac8     3C E4 05 F1 | 	add	objptr, ##28220
01acc     F2 12 02 FB | 	rdlong	arg01, objptr
01ad0     37 00 00 FF 
01ad4     3C E4 85 F1 | 	sub	objptr, ##28220
01ad8     14 15 02 F6 | 	mov	arg02, local02
01adc     01 16 06 F6 | 	mov	arg03, #1
01ae0     9C 4A B2 FD | 	call	#__system__Mid_S
01ae4     FD 12 02 F6 | 	mov	arg01, result1
01ae8     8D 01 00 FF 
01aec     B6 39 06 F6 | 	mov	local10, ##@LR__5093
01af0     1C 15 02 F6 | 	mov	arg02, local10
01af4     D8 35 B2 FD | 	call	#__system___string_cmp
01af8     00 FA 0D F2 | 	cmp	result1, #0 wz
01afc     14 2F 02 A6 |  if_e	mov	local05, local02
01b00     03 2E 66 A0 |  if_e	shl	local05, #3
01b04     F2 30 02 A6 |  if_e	mov	local06, objptr
01b08     35 00 00 AF 
01b0c     2C 30 06 A1 |  if_e	add	local06, ##27180
01b10     18 2F 02 A1 |  if_e	add	local05, local06
01b14     04 2E 06 A1 |  if_e	add	local05, #4
01b18     17 3B 02 AB |  if_e	rdlong	local11, local05
01b1c     04 2E 86 A1 |  if_e	sub	local05, #4
01b20     1D 3D 0A A6 |  if_e	mov	local12, local11 wz
01b24     52 00 00 5F 
01b28     48 E5 05 51 |  if_ne	add	objptr, ##42312
01b2c     F2 3E 02 5B |  if_ne	rdlong	local13, objptr
01b30     52 00 00 5F 
01b34     48 E5 85 51 |  if_ne	sub	objptr, ##42312
01b38     1F 41 02 56 |  if_ne	mov	local14, local13
01b3c     20 29 52 52 |  if_ne	cmps	local02, local14 wc
01b40     01 28 06 41 |  if_c_and_nz	add	local02, #1
01b44     7C FF 9F 4D |  if_c_and_nz	jmp	#LR__0082
01b48                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b48     52 00 00 FF 
01b4c     48 E5 05 F1 | 	add	objptr, ##42312
01b50     F2 2C 02 FB | 	rdlong	local04, objptr
01b54     52 00 00 FF 
01b58     48 E5 85 F1 | 	sub	objptr, ##42312
01b5c     16 29 52 F2 | 	cmps	local02, local04 wc
01b60     A4 00 90 3D |  if_ae	jmp	#LR__0085
01b64     37 00 00 FF 
01b68     3C E4 05 F1 | 	add	objptr, ##28220
01b6c     F2 30 02 FB | 	rdlong	local06, objptr
01b70     37 00 00 FF 
01b74     3C E4 85 F1 | 	sub	objptr, ##28220
01b78     18 13 02 F6 | 	mov	arg01, local06
01b7c     09 33 02 F6 | 	mov	local07, arg01
01b80     97 06 48 FB | 	callpa	#(@LR__0084-@LR__0083)>>2,fcache_load_ptr_
01b84                 | LR__0083
01b84     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b88     01 32 06 51 |  if_ne	add	local07, #1
01b8c     F4 FF 9F 5D |  if_ne	jmp	#LR__0083
01b90                 | LR__0084
01b90     09 33 82 F1 | 	sub	local07, arg01
01b94     19 15 02 F6 | 	mov	arg02, local07
01b98     14 15 82 F1 | 	sub	arg02, local02
01b9c     18 13 02 F6 | 	mov	arg01, local06
01ba0     50 49 B2 FD | 	call	#__system__Right_S
01ba4     FD 12 02 F6 | 	mov	arg01, result1
01ba8     4C 4D B2 FD | 	call	#__system__RTrim_S
01bac     FD 12 02 F6 | 	mov	arg01, result1
01bb0     84 4C B2 FD | 	call	#__system__LTrim_S
01bb4     52 00 00 FF 
01bb8     4C E5 05 F1 | 	add	objptr, ##42316
01bbc     F2 FA 61 FC | 	wrlong	result1, objptr
01bc0     1B 00 00 FF 
01bc4     10 E5 85 F1 | 	sub	objptr, ##14096
01bc8     F2 12 02 FB | 	rdlong	arg01, objptr
01bcc     37 00 00 FF 
01bd0     3C E4 85 F1 | 	sub	objptr, ##28220
01bd4     01 28 86 F1 | 	sub	local02, #1
01bd8     14 15 02 F6 | 	mov	arg02, local02
01bdc     8C 48 B2 FD | 	call	#__system__Left_S
01be0     FD 12 02 F6 | 	mov	arg01, result1
01be4     10 4D B2 FD | 	call	#__system__RTrim_S
01be8     FD 12 02 F6 | 	mov	arg01, result1
01bec     48 4C B2 FD | 	call	#__system__LTrim_S
01bf0     37 00 00 FF 
01bf4     3C E4 05 F1 | 	add	objptr, ##28220
01bf8     F2 FA 61 FC | 	wrlong	result1, objptr
01bfc     37 00 00 FF 
01c00     3C E4 85 F1 | 	sub	objptr, ##28220
01c04     1C 00 90 FD | 	jmp	#LR__0086
01c08                 | LR__0085
01c08     8D 01 00 FF 
01c0c     B8 2D 06 F6 | 	mov	local04, ##@LR__5094
01c10     52 00 00 FF 
01c14     4C E5 05 F1 | 	add	objptr, ##42316
01c18     F2 2C 62 FC | 	wrlong	local04, objptr
01c1c     52 00 00 FF 
01c20     4C E5 85 F1 | 	sub	objptr, ##42316
01c24                 | LR__0086
01c24                 | ' 
01c24                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01c24     37 00 00 FF 
01c28     44 E4 05 F1 | 	add	objptr, ##28228
01c2c     F2 2C 02 FB | 	rdlong	local04, objptr
01c30     37 00 00 FF 
01c34     44 E4 85 F1 | 	sub	objptr, ##28228
01c38     FF FF 7F FF 
01c3c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c40     40 00 90 5D |  if_ne	jmp	#LR__0087
01c44     52 00 00 FF 
01c48     4C E5 05 F1 | 	add	objptr, ##42316
01c4c     F2 12 02 FB | 	rdlong	arg01, objptr
01c50     52 00 00 FF 
01c54     4C E5 85 F1 | 	sub	objptr, ##42316
01c58     8D 01 00 FF 
01c5c     B9 31 06 F6 | 	mov	local06, ##@LR__5095
01c60     18 15 02 F6 | 	mov	arg02, local06
01c64     68 34 B2 FD | 	call	#__system___string_cmp
01c68     00 FA 0D F2 | 	cmp	result1, #0 wz
01c6c     37 00 00 5F 
01c70     44 E4 05 51 |  if_ne	add	objptr, ##28228
01c74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c78     37 00 00 5F 
01c7c     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01c80     08 01 90 5D |  if_ne	jmp	#LR__0091
01c84                 | LR__0087
01c84                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c84     37 00 00 FF 
01c88     44 E4 05 F1 | 	add	objptr, ##28228
01c8c     F2 2C 02 FB | 	rdlong	local04, objptr
01c90     37 00 00 FF 
01c94     44 E4 85 F1 | 	sub	objptr, ##28228
01c98     FF FF 7F FF 
01c9c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01ca0     3C 00 90 5D |  if_ne	jmp	#LR__0088
01ca4     52 00 00 FF 
01ca8     4C E5 05 F1 | 	add	objptr, ##42316
01cac     F2 12 02 FB | 	rdlong	arg01, objptr
01cb0     52 00 00 FF 
01cb4     4C E5 85 F1 | 	sub	objptr, ##42316
01cb8     8D 01 00 FF 
01cbc     BA 15 06 F6 | 	mov	arg02, ##@LR__5096
01cc0     0C 34 B2 FD | 	call	#__system___string_cmp
01cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cc8     37 00 00 AF 
01ccc     44 E4 05 A1 |  if_e	add	objptr, ##28228
01cd0     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cd4     37 00 00 AF 
01cd8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01cdc     AC 00 90 AD |  if_e	jmp	#LR__0091
01ce0                 | LR__0088
01ce0                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01ce0     37 00 00 FF 
01ce4     44 E4 05 F1 | 	add	objptr, ##28228
01ce8     F2 2C 02 FB | 	rdlong	local04, objptr
01cec     37 00 00 FF 
01cf0     44 E4 85 F1 | 	sub	objptr, ##28228
01cf4     04 2C 0E F2 | 	cmp	local04, #4 wz
01cf8     3C 00 90 5D |  if_ne	jmp	#LR__0089
01cfc     52 00 00 FF 
01d00     4C E5 05 F1 | 	add	objptr, ##42316
01d04     F2 12 02 FB | 	rdlong	arg01, objptr
01d08     52 00 00 FF 
01d0c     4C E5 85 F1 | 	sub	objptr, ##42316
01d10     8D 01 00 FF 
01d14     BB 15 06 F6 | 	mov	arg02, ##@LR__5097
01d18     B4 33 B2 FD | 	call	#__system___string_cmp
01d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d20     37 00 00 5F 
01d24     44 E4 05 51 |  if_ne	add	objptr, ##28228
01d28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d2c     37 00 00 5F 
01d30     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01d34     54 00 90 5D |  if_ne	jmp	#LR__0091
01d38                 | LR__0089
01d38                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d38     37 00 00 FF 
01d3c     44 E4 05 F1 | 	add	objptr, ##28228
01d40     F2 2C 02 FB | 	rdlong	local04, objptr
01d44     37 00 00 FF 
01d48     44 E4 85 F1 | 	sub	objptr, ##28228
01d4c     04 2C 0E F2 | 	cmp	local04, #4 wz
01d50     38 00 90 5D |  if_ne	jmp	#LR__0090
01d54     52 00 00 FF 
01d58     4C E5 05 F1 | 	add	objptr, ##42316
01d5c     F2 12 02 FB | 	rdlong	arg01, objptr
01d60     52 00 00 FF 
01d64     4C E5 85 F1 | 	sub	objptr, ##42316
01d68     8D 01 00 FF 
01d6c     BC 15 06 F6 | 	mov	arg02, ##@LR__5098
01d70     5C 33 B2 FD | 	call	#__system___string_cmp
01d74     00 FA 0D F2 | 	cmp	result1, #0 wz
01d78     37 00 00 AF 
01d7c     44 E4 05 A1 |  if_e	add	objptr, ##28228
01d80     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d84     37 00 00 AF 
01d88     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01d8c                 | LR__0090
01d8c                 | LR__0091
01d8c     38 4E 05 F1 | 	add	fp, #56
01d90     A7 00 68 FC | 	wrlong	#0, fp
01d94     38 4E 85 F1 | 	sub	fp, #56
01d98     00 28 06 F6 | 	mov	local02, #0
01d9c     01 42 06 F6 | 	mov	local15, #1
01da0                 | ' 
01da0                 | ' ' 1b: find separators
01da0                 | ' 
01da0                 | ' 107
01da0                 | ' separators(0)=0
01da0                 | ' i=0: j=1
01da0                 | ' do: 
01da0                 | LR__0092
01da0     01 28 06 F1 | 	add	local02, #1
01da4     37 00 00 FF 
01da8     3C E4 05 F1 | 	add	objptr, ##28220
01dac     F2 12 02 FB | 	rdlong	arg01, objptr
01db0     37 00 00 FF 
01db4     3C E4 85 F1 | 	sub	objptr, ##28220
01db8     14 15 02 F6 | 	mov	arg02, local02
01dbc     01 16 06 F6 | 	mov	arg03, #1
01dc0     BC 47 B2 FD | 	call	#__system__Mid_S
01dc4     FD 44 02 F6 | 	mov	local16, result1
01dc8                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01dc8     22 13 02 F6 | 	mov	arg01, local16
01dcc     F0 2C B0 FD | 	call	#_isseparator
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     21 2B 02 56 |  if_ne	mov	local03, local15
01dd8     02 2A 66 50 |  if_ne	shl	local03, #2
01ddc     A7 38 02 56 |  if_ne	mov	local10, fp
01de0     38 38 06 51 |  if_ne	add	local10, #56
01de4     1C 2B 02 51 |  if_ne	add	local03, local10
01de8     15 29 62 5C |  if_ne	wrlong	local02, local03
01dec     01 42 06 51 |  if_ne	add	local15, #1
01df0     52 00 00 FF 
01df4     48 E5 05 F1 | 	add	objptr, ##42312
01df8     F2 2C 02 FB | 	rdlong	local04, objptr
01dfc     52 00 00 FF 
01e00     48 E5 85 F1 | 	sub	objptr, ##42312
01e04     16 29 5A F2 | 	cmps	local02, local04 wcz
01e08     94 FF 9F ED |  if_be	jmp	#LR__0092
01e0c     21 2B 02 F6 | 	mov	local03, local15
01e10     02 2A 66 F0 | 	shl	local03, #2
01e14     A7 38 02 F6 | 	mov	local10, fp
01e18     38 38 06 F1 | 	add	local10, #56
01e1c     1C 2B 02 F1 | 	add	local03, local10
01e20     15 29 62 FC | 	wrlong	local02, local03
01e24     00 46 06 F6 | 	mov	local17, #0
01e28                 | ' for i=0 to j-1 
01e28     00 28 06 F6 | 	mov	local02, #0
01e2c     21 49 02 F6 | 	mov	local18, local15
01e30                 | LR__0093
01e30     24 29 52 F2 | 	cmps	local02, local18 wc
01e34     40 01 90 3D |  if_ae	jmp	#LR__0095
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     02 2A 66 F0 | 	shl	local03, #2
01e40     38 4E 05 F1 | 	add	fp, #56
01e44     A7 2A 02 F1 | 	add	local03, fp
01e48     15 2F 02 FB | 	rdlong	local05, local03
01e4c     52 00 00 FF 
01e50     54 E5 05 F1 | 	add	objptr, ##42324
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58     14 2B 02 F6 | 	mov	local03, local02
01e5c     01 2A 06 F1 | 	add	local03, #1
01e60     02 2A 66 F0 | 	shl	local03, #2
01e64     A7 38 02 F6 | 	mov	local10, fp
01e68     A7 2A 02 F1 | 	add	local03, fp
01e6c     15 2F 02 FB | 	rdlong	local05, local03
01e70     04 E4 05 F1 | 	add	objptr, #4
01e74     F2 2E 62 FC | 	wrlong	local05, objptr
01e78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e78     04 E4 85 F1 | 	sub	objptr, #4
01e7c     F2 2C 02 FB | 	rdlong	local04, objptr
01e80     52 00 00 FF 
01e84     54 E5 85 F1 | 	sub	objptr, ##42324
01e88     01 2C 56 F2 | 	cmps	local04, #1 wc
01e8c     38 4E 85 F1 | 	sub	fp, #56
01e90     60 00 90 CD |  if_b	jmp	#LR__0094
01e94     37 00 00 FF 
01e98     3C E4 05 F1 | 	add	objptr, ##28220
01e9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ea0     1B 00 00 FF 
01ea4     18 E5 05 F1 | 	add	objptr, ##14104
01ea8     F2 14 02 FB | 	rdlong	arg02, objptr
01eac     52 00 00 FF 
01eb0     54 E5 85 F1 | 	sub	objptr, ##42324
01eb4     01 16 06 F6 | 	mov	arg03, #1
01eb8     C4 46 B2 FD | 	call	#__system__Mid_S
01ebc     FD 3C 02 F6 | 	mov	local12, result1
01ec0     8D 01 00 FF 
01ec4     BD 15 06 F6 | 	mov	arg02, ##@LR__5099
01ec8     1E 13 02 F6 | 	mov	arg01, local12
01ecc     00 32 B2 FD | 	call	#__system___string_cmp
01ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ed4     23 39 02 56 |  if_ne	mov	local10, local17
01ed8     03 38 66 50 |  if_ne	shl	local10, #3
01edc     F2 2E 02 56 |  if_ne	mov	local05, objptr
01ee0     35 00 00 5F 
01ee4     2C 2E 06 51 |  if_ne	add	local05, ##27180
01ee8     17 39 02 51 |  if_ne	add	local10, local05
01eec     1C 3D 62 5C |  if_ne	wrlong	local12, local10
01ef0     01 46 06 51 |  if_ne	add	local17, #1
01ef4                 | LR__0094
01ef4     37 00 00 FF 
01ef8     3C E4 05 F1 | 	add	objptr, ##28220
01efc     F2 12 02 FB | 	rdlong	arg01, objptr
01f00     1B 00 00 FF 
01f04     18 E5 05 F1 | 	add	objptr, ##14104
01f08     F2 14 02 FB | 	rdlong	arg02, objptr
01f0c     01 14 06 F1 | 	add	arg02, #1
01f10     04 E4 05 F1 | 	add	objptr, #4
01f14     F2 16 02 FB | 	rdlong	arg03, objptr
01f18     04 E4 85 F1 | 	sub	objptr, #4
01f1c     F2 3A 02 FB | 	rdlong	local11, objptr
01f20     52 00 00 FF 
01f24     54 E5 85 F1 | 	sub	objptr, ##42324
01f28     1D 3D 02 F6 | 	mov	local12, local11
01f2c     1E 17 82 F1 | 	sub	arg03, local12
01f30     01 16 86 F1 | 	sub	arg03, #1
01f34     48 46 B2 FD | 	call	#__system__Mid_S
01f38     FD 4A 02 F6 | 	mov	local19, result1
01f3c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f3c     8D 01 00 FF 
01f40     BE 15 06 F6 | 	mov	arg02, ##@LR__5100
01f44     25 13 02 F6 | 	mov	arg01, local19
01f48     84 31 B2 FD | 	call	#__system___string_cmp
01f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01f50     23 39 02 56 |  if_ne	mov	local10, local17
01f54     03 38 66 50 |  if_ne	shl	local10, #3
01f58     F2 2E 02 56 |  if_ne	mov	local05, objptr
01f5c     35 00 00 5F 
01f60     2C 2E 06 51 |  if_ne	add	local05, ##27180
01f64     17 39 02 51 |  if_ne	add	local10, local05
01f68     1C 4B 62 5C |  if_ne	wrlong	local19, local10
01f6c     01 46 06 51 |  if_ne	add	local17, #1
01f70     01 28 06 F1 | 	add	local02, #1
01f74     B8 FE 9F FD | 	jmp	#LR__0093
01f78                 | LR__0095
01f78                 | ' 
01f78                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f78                 | ' 
01f78                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f78     37 00 00 FF 
01f7c     44 E4 05 F1 | 	add	objptr, ##28228
01f80     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f84     37 00 00 FF 
01f88     44 E4 85 F1 | 	sub	objptr, ##28228
01f8c     37 00 00 5F 
01f90     44 E4 05 51 |  if_ne	add	objptr, ##28228
01f94     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f98     37 00 00 5F 
01f9c     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01fa0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01fa4     C0 00 90 5D |  if_ne	jmp	#LR__0098
01fa8     35 00 00 FF 
01fac     2C E4 05 F1 | 	add	objptr, ##27180
01fb0     F2 3A 02 FB | 	rdlong	local11, objptr
01fb4     35 00 00 FF 
01fb8     2C E4 85 F1 | 	sub	objptr, ##27180
01fbc     1D 13 02 F6 | 	mov	arg01, local11
01fc0     E0 4F B0 FD | 	call	#_isdec
01fc4     FD 3C 02 F6 | 	mov	local12, result1
01fc8     1E 31 02 F6 | 	mov	local06, local12
01fcc     07 30 66 F7 | 	signx	local06, #7
01fd0     18 31 22 F6 | 	not	local06, local06
01fd4     00 30 0E F2 | 	cmp	local06, #0 wz
01fd8     8C 00 90 AD |  if_e	jmp	#LR__0098
01fdc     23 29 02 F6 | 	mov	local02, local17
01fe0     35 00 00 FF 
01fe4     2C E4 05 F1 | 	add	objptr, ##27180
01fe8     97 32 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01fec                 | LR__0096
01fec     14 2F 02 F6 | 	mov	local05, local02
01ff0     01 2E 86 F1 | 	sub	local05, #1
01ff4     03 2E 66 F0 | 	shl	local05, #3
01ff8     F2 2E 02 F1 | 	add	local05, objptr
01ffc     17 2D 02 FB | 	rdlong	local04, local05
02000     14 31 02 F6 | 	mov	local06, local02
02004     01 30 86 F1 | 	sub	local06, #1
02008     03 30 66 F0 | 	shl	local06, #3
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     04 30 06 F1 | 	add	local06, #4
02014     18 2B 02 FB | 	rdlong	local03, local06
02018     14 31 02 F6 | 	mov	local06, local02
0201c     03 30 66 F0 | 	shl	local06, #3
02020     F2 3C 02 F6 | 	mov	local12, objptr
02024     F2 30 02 F1 | 	add	local06, objptr
02028     18 2D 62 FC | 	wrlong	local04, local06
0202c     14 3B 02 F6 | 	mov	local11, local02
02030     1D 3F 02 F6 | 	mov	local13, local11
02034     03 3E 66 F0 | 	shl	local13, #3
02038     F2 3E 02 F1 | 	add	local13, objptr
0203c     04 3E 06 F1 | 	add	local13, #4
02040     1F 2B 62 FC | 	wrlong	local03, local13
02044     01 28 86 F1 | 	sub	local02, #1
02048     01 28 56 F2 | 	cmps	local02, #1 wc
0204c     9C FF 9F 3D |  if_ae	jmp	#LR__0096
02050                 | LR__0097
02050     8D 01 00 FF 
02054     BF 2D 06 F6 | 	mov	local04, ##@LR__5101
02058     F2 2C 62 FC | 	wrlong	local04, objptr
0205c     35 00 00 FF 
02060     2C E4 85 F1 | 	sub	objptr, ##27180
02064     01 46 06 F1 | 	add	local17, #1
02068                 | LR__0098
02068     00 28 06 F6 | 	mov	local02, #0
0206c                 | ' 
0206c                 | ' ' 1e : find strings
0206c                 | ' 
0206c                 | ' i=0
0206c                 | ' do
0206c                 | LR__0099
0206c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0206c     14 2F 02 F6 | 	mov	local05, local02
02070     03 2E 66 F0 | 	shl	local05, #3
02074     F2 30 02 F6 | 	mov	local06, objptr
02078     35 00 00 FF 
0207c     2C 30 06 F1 | 	add	local06, ##27180
02080     18 2F 02 F1 | 	add	local05, local06
02084     17 13 02 FB | 	rdlong	arg01, local05
02088     8D 01 00 FF 
0208c     C1 15 06 F6 | 	mov	arg02, ##@LR__5102
02090     3C 30 B2 FD | 	call	#__system___string_cmp
02094     00 FA 0D F2 | 	cmp	result1, #0 wz
02098     01 28 06 51 |  if_ne	add	local02, #1
0209c     20 01 90 5D |  if_ne	jmp	#LR__0104
020a0     14 4D 02 F6 | 	mov	local20, local02
020a4                 | LR__0100
020a4     14 39 02 F6 | 	mov	local10, local02
020a8     01 38 06 F1 | 	add	local10, #1
020ac     03 38 66 F0 | 	shl	local10, #3
020b0     35 00 00 FF 
020b4     2C E4 05 F1 | 	add	objptr, ##27180
020b8     F2 38 02 F1 | 	add	local10, objptr
020bc     1C 4B 02 FB | 	rdlong	local19, local10
020c0     26 39 02 F6 | 	mov	local10, local20
020c4     03 38 66 F0 | 	shl	local10, #3
020c8     F2 38 02 F1 | 	add	local10, objptr
020cc     26 3B 02 F6 | 	mov	local11, local20
020d0     1D 41 02 F6 | 	mov	local14, local11
020d4     03 40 66 F0 | 	shl	local14, #3
020d8     F2 40 02 F1 | 	add	local14, objptr
020dc     20 13 02 FB | 	rdlong	arg01, local14
020e0     25 3D 02 F6 | 	mov	local12, local19
020e4     1E 15 02 F6 | 	mov	arg02, local12
020e8     35 00 00 FF 
020ec     2C E4 85 F1 | 	sub	objptr, ##27180
020f0     10 30 B2 FD | 	call	#__system___string_concat
020f4     1C FB 61 FC | 	wrlong	result1, local10
020f8     14 43 02 F6 | 	mov	local15, local02
020fc     01 42 06 F1 | 	add	local15, #1
02100     23 4F 02 F6 | 	mov	local21, local17
02104     01 4E 06 F1 | 	add	local21, #1
02108     97 3C 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
0210c                 | LR__0101
0210c     27 43 52 F2 | 	cmps	local15, local21 wc
02110     70 00 90 3D |  if_ae	jmp	#LR__0103
02114     21 2F 02 F6 | 	mov	local05, local15
02118     01 2E 06 F1 | 	add	local05, #1
0211c     03 2E 66 F0 | 	shl	local05, #3
02120     35 00 00 FF 
02124     2C E4 05 F1 | 	add	objptr, ##27180
02128     F2 2E 02 F1 | 	add	local05, objptr
0212c     17 2D 02 FB | 	rdlong	local04, local05
02130     21 31 02 F6 | 	mov	local06, local15
02134     01 30 06 F1 | 	add	local06, #1
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 30 02 F1 | 	add	local06, objptr
02140     04 30 06 F1 | 	add	local06, #4
02144     18 2B 02 FB | 	rdlong	local03, local06
02148     21 31 02 F6 | 	mov	local06, local15
0214c     03 30 66 F0 | 	shl	local06, #3
02150     F2 3C 02 F6 | 	mov	local12, objptr
02154     F2 30 02 F1 | 	add	local06, objptr
02158     18 2D 62 FC | 	wrlong	local04, local06
0215c     21 3B 02 F6 | 	mov	local11, local15
02160     1D 3F 02 F6 | 	mov	local13, local11
02164     03 3E 66 F0 | 	shl	local13, #3
02168     F2 3E 02 F1 | 	add	local13, objptr
0216c     04 3E 06 F1 | 	add	local13, #4
02170     1F 2B 62 FC | 	wrlong	local03, local13
02174     01 42 06 F1 | 	add	local15, #1
02178     35 00 00 FF 
0217c     2C E4 85 F1 | 	sub	objptr, ##27180
02180     88 FF 9F FD | 	jmp	#LR__0101
02184                 | LR__0102
02184                 | LR__0103
02184     01 46 86 F1 | 	sub	local17, #1
02188     8D 01 00 FF 
0218c     C3 15 06 F6 | 	mov	arg02, ##@LR__5103
02190     25 13 02 F6 | 	mov	arg01, local19
02194     38 2F B2 FD | 	call	#__system___string_cmp
02198     00 FA 0D F2 | 	cmp	result1, #0 wz
0219c     23 29 52 52 |  if_ne	cmps	local02, local17 wc
021a0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0100
021a4                 | '   if p$<>"""" then k+=1:i+=1
021a4     8D 01 00 FF 
021a8     C5 15 06 F6 | 	mov	arg02, ##@LR__5104
021ac     25 13 02 F6 | 	mov	arg01, local19
021b0     1C 2F B2 FD | 	call	#__system___string_cmp
021b4     00 FA 0D F2 | 	cmp	result1, #0 wz
021b8     01 46 06 51 |  if_ne	add	local17, #1
021bc     01 28 06 51 |  if_ne	add	local02, #1
021c0                 | LR__0104
021c0     23 29 52 F2 | 	cmps	local02, local17 wc
021c4     A4 FE 9F CD |  if_b	jmp	#LR__0099
021c8     00 28 06 F6 | 	mov	local02, #0
021cc                 | ' 
021cc                 | ' ' 1f : concatenate strings if "" detected between
021cc                 | '  
021cc                 | ' i=0
021cc                 | ' do
021cc                 | LR__0105
021cc                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021cc     14 2F 02 F6 | 	mov	local05, local02
021d0     03 2E 66 F0 | 	shl	local05, #3
021d4     F2 30 02 F6 | 	mov	local06, objptr
021d8     35 00 00 FF 
021dc     2C 30 06 F1 | 	add	local06, ##27180
021e0     18 2F 02 F1 | 	add	local05, local06
021e4     17 13 02 FB | 	rdlong	arg01, local05
021e8     01 14 06 F6 | 	mov	arg02, #1
021ec     04 43 B2 FD | 	call	#__system__Right_S
021f0     FD 12 02 F6 | 	mov	arg01, result1
021f4     8D 01 00 FF 
021f8     C7 15 06 F6 | 	mov	arg02, ##@LR__5105
021fc     D0 2E B2 FD | 	call	#__system___string_cmp
02200     00 FA 0D F2 | 	cmp	result1, #0 wz
02204     74 01 90 5D |  if_ne	jmp	#LR__0111
02208     14 31 02 F6 | 	mov	local06, local02
0220c     01 30 06 F1 | 	add	local06, #1
02210     03 30 66 F0 | 	shl	local06, #3
02214     F2 3C 02 F6 | 	mov	local12, objptr
02218     35 00 00 FF 
0221c     2C 3C 06 F1 | 	add	local12, ##27180
02220     1E 31 02 F1 | 	add	local06, local12
02224     18 13 02 FB | 	rdlong	arg01, local06
02228     01 14 06 F6 | 	mov	arg02, #1
0222c     3C 42 B2 FD | 	call	#__system__Left_S
02230     FD 12 02 F6 | 	mov	arg01, result1
02234     8D 01 00 FF 
02238     C9 15 06 F6 | 	mov	arg02, ##@LR__5106
0223c     90 2E B2 FD | 	call	#__system___string_cmp
02240     00 FA 0D F2 | 	cmp	result1, #0 wz
02244     34 01 90 5D |  if_ne	jmp	#LR__0111
02248     14 39 02 F6 | 	mov	local10, local02
0224c     03 38 66 F0 | 	shl	local10, #3
02250     35 00 00 FF 
02254     2C E4 05 F1 | 	add	objptr, ##27180
02258     F2 38 02 F1 | 	add	local10, objptr
0225c     14 41 02 F6 | 	mov	local14, local02
02260     03 40 66 F0 | 	shl	local14, #3
02264     F2 40 02 F1 | 	add	local14, objptr
02268     20 31 02 FB | 	rdlong	local06, local14
0226c     14 3F 02 F6 | 	mov	local13, local02
02270     01 3E 06 F1 | 	add	local13, #1
02274     03 3E 66 F0 | 	shl	local13, #3
02278     F2 3E 02 F1 | 	add	local13, objptr
0227c     1F 3D 02 FB | 	rdlong	local12, local13
02280     14 51 02 F6 | 	mov	local22, local02
02284     01 50 06 F1 | 	add	local22, #1
02288     28 53 02 F6 | 	mov	local23, local22
0228c     03 52 66 F0 | 	shl	local23, #3
02290     F2 54 02 F6 | 	mov	local24, objptr
02294     F2 52 02 F1 | 	add	local23, objptr
02298     29 13 02 FB | 	rdlong	arg01, local23
0229c     35 00 00 FF 
022a0     2C E4 85 F1 | 	sub	objptr, ##27180
022a4     09 33 02 F6 | 	mov	local07, arg01
022a8     97 06 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
022ac                 | LR__0106
022ac     19 FB C9 FA | 	rdbyte	result1, local07 wz
022b0     01 32 06 51 |  if_ne	add	local07, #1
022b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0106
022b8                 | LR__0107
022b8     09 33 82 F1 | 	sub	local07, arg01
022bc     19 3B 02 F6 | 	mov	local11, local07
022c0     01 3A 86 F1 | 	sub	local11, #1
022c4     1E 13 02 F6 | 	mov	arg01, local12
022c8     1D 15 02 F6 | 	mov	arg02, local11
022cc     24 42 B2 FD | 	call	#__system__Right_S
022d0     FD 3C 02 F6 | 	mov	local12, result1
022d4     18 13 02 F6 | 	mov	arg01, local06
022d8     1E 15 02 F6 | 	mov	arg02, local12
022dc     24 2E B2 FD | 	call	#__system___string_concat
022e0     FD 30 02 F6 | 	mov	local06, result1
022e4     1C 31 62 FC | 	wrlong	local06, local10
022e8                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e8     14 43 02 F6 | 	mov	local15, local02
022ec     01 42 06 F1 | 	add	local15, #1
022f0     23 57 02 F6 | 	mov	local25, local17
022f4     01 56 06 F1 | 	add	local25, #1
022f8     97 3C 48 FB | 	callpa	#(@LR__0109-@LR__0108)>>2,fcache_load_ptr_
022fc                 | LR__0108
022fc     2B 43 52 F2 | 	cmps	local15, local25 wc
02300     70 00 90 3D |  if_ae	jmp	#LR__0110
02304     21 2F 02 F6 | 	mov	local05, local15
02308     01 2E 06 F1 | 	add	local05, #1
0230c     03 2E 66 F0 | 	shl	local05, #3
02310     35 00 00 FF 
02314     2C E4 05 F1 | 	add	objptr, ##27180
02318     F2 2E 02 F1 | 	add	local05, objptr
0231c     17 2D 02 FB | 	rdlong	local04, local05
02320     21 31 02 F6 | 	mov	local06, local15
02324     01 30 06 F1 | 	add	local06, #1
02328     03 30 66 F0 | 	shl	local06, #3
0232c     F2 30 02 F1 | 	add	local06, objptr
02330     04 30 06 F1 | 	add	local06, #4
02334     18 2B 02 FB | 	rdlong	local03, local06
02338     21 31 02 F6 | 	mov	local06, local15
0233c     03 30 66 F0 | 	shl	local06, #3
02340     F2 3C 02 F6 | 	mov	local12, objptr
02344     F2 30 02 F1 | 	add	local06, objptr
02348     18 2D 62 FC | 	wrlong	local04, local06
0234c     21 3B 02 F6 | 	mov	local11, local15
02350     1D 3F 02 F6 | 	mov	local13, local11
02354     03 3E 66 F0 | 	shl	local13, #3
02358     F2 3E 02 F1 | 	add	local13, objptr
0235c     04 3E 06 F1 | 	add	local13, #4
02360     1F 2B 62 FC | 	wrlong	local03, local13
02364     01 42 06 F1 | 	add	local15, #1
02368     35 00 00 FF 
0236c     2C E4 85 F1 | 	sub	objptr, ##27180
02370     88 FF 9F FD | 	jmp	#LR__0108
02374                 | LR__0109
02374                 | LR__0110
02374     01 28 86 F1 | 	sub	local02, #1
02378     01 46 86 F1 | 	sub	local17, #1
0237c                 | LR__0111
0237c     01 28 06 F1 | 	add	local02, #1
02380     23 29 52 F2 | 	cmps	local02, local17 wc
02384     44 FE 9F CD |  if_b	jmp	#LR__0105
02388     00 28 06 F6 | 	mov	local02, #0
0238c                 | '  
0238c                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0238c                 | '  
0238c                 | ' i=0 
0238c                 | ' do
0238c                 | LR__0112
0238c     14 39 02 F6 | 	mov	local10, local02
02390     03 38 66 F0 | 	shl	local10, #3
02394     35 00 00 FF 
02398     2C E4 05 F1 | 	add	objptr, ##27180
0239c     F2 38 02 F1 | 	add	local10, objptr
023a0     1C 59 02 FB | 	rdlong	local26, local10
023a4     14 39 02 F6 | 	mov	local10, local02
023a8     01 38 06 F1 | 	add	local10, #1
023ac     03 38 66 F0 | 	shl	local10, #3
023b0     F2 38 02 F1 | 	add	local10, objptr
023b4     1C 5B 02 FB | 	rdlong	local27, local10
023b8                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b8                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b8     8D 01 00 FF 
023bc     CB 15 06 F6 | 	mov	arg02, ##@LR__5107
023c0     2C 13 02 F6 | 	mov	arg01, local26
023c4     35 00 00 FF 
023c8     2C E4 85 F1 | 	sub	objptr, ##27180
023cc     00 2D B2 FD | 	call	#__system___string_cmp
023d0     00 FA 0D F2 | 	cmp	result1, #0 wz
023d4     A8 00 90 AD |  if_e	jmp	#LR__0113
023d8     8D 01 00 FF 
023dc     CD 15 06 F6 | 	mov	arg02, ##@LR__5108
023e0     2C 13 02 F6 | 	mov	arg01, local26
023e4     E8 2C B2 FD | 	call	#__system___string_cmp
023e8     FD 2A 0A F6 | 	mov	local03, result1 wz
023ec     90 00 90 AD |  if_e	jmp	#LR__0113
023f0     8D 01 00 FF 
023f4     CF 31 06 F6 | 	mov	local06, ##@LR__5109
023f8     2C 13 02 F6 | 	mov	arg01, local26
023fc     18 15 02 F6 | 	mov	arg02, local06
02400     CC 2C B2 FD | 	call	#__system___string_cmp
02404     00 FA 0D F2 | 	cmp	result1, #0 wz
02408     74 00 90 AD |  if_e	jmp	#LR__0113
0240c     8D 01 00 FF 
02410     D1 3D 06 F6 | 	mov	local12, ##@LR__5110
02414     2C 13 02 F6 | 	mov	arg01, local26
02418     1E 15 02 F6 | 	mov	arg02, local12
0241c     B0 2C B2 FD | 	call	#__system___string_cmp
02420     00 FA 0D F2 | 	cmp	result1, #0 wz
02424     58 00 90 AD |  if_e	jmp	#LR__0113
02428     8D 01 00 FF 
0242c     D3 3B 06 F6 | 	mov	local11, ##@LR__5111
02430     1D 3D 02 F6 | 	mov	local12, local11
02434     2C 13 02 F6 | 	mov	arg01, local26
02438     1E 15 02 F6 | 	mov	arg02, local12
0243c     90 2C B2 FD | 	call	#__system___string_cmp
02440     FD 30 0A F6 | 	mov	local06, result1 wz
02444     38 00 90 AD |  if_e	jmp	#LR__0113
02448     8D 01 00 FF 
0244c     D5 3B 06 F6 | 	mov	local11, ##@LR__5112
02450     2C 13 02 F6 | 	mov	arg01, local26
02454     1D 15 02 F6 | 	mov	arg02, local11
02458     74 2C B2 FD | 	call	#__system___string_cmp
0245c     FD 3C 0A F6 | 	mov	local12, result1 wz
02460     1C 00 90 AD |  if_e	jmp	#LR__0113
02464     8D 01 00 FF 
02468     D7 41 06 F6 | 	mov	local14, ##@LR__5113
0246c     2C 13 02 F6 | 	mov	arg01, local26
02470     20 15 02 F6 | 	mov	arg02, local14
02474     58 2C B2 FD | 	call	#__system___string_cmp
02478     FD 3A 0A F6 | 	mov	local11, result1 wz
0247c     20 00 90 5D |  if_ne	jmp	#LR__0114
02480                 | LR__0113
02480     8D 01 00 FF 
02484     D9 5D 06 F6 | 	mov	local28, ##@LR__5114
02488     2E 3F 02 F6 | 	mov	local13, local28
0248c     2D 13 02 F6 | 	mov	arg01, local27
02490     1F 15 02 F6 | 	mov	arg02, local13
02494     38 2C B2 FD | 	call	#__system___string_cmp
02498     FD 40 0A F6 | 	mov	local14, result1 wz
0249c     B8 00 90 AD |  if_e	jmp	#LR__0117
024a0                 | LR__0114
024a0     8D 01 00 FF 
024a4     DB 5D 06 F6 | 	mov	local28, ##@LR__5115
024a8     2C 13 02 F6 | 	mov	arg01, local26
024ac     2E 15 02 F6 | 	mov	arg02, local28
024b0     1C 2C B2 FD | 	call	#__system___string_cmp
024b4     FD 3E 0A F6 | 	mov	local13, result1 wz
024b8     20 00 90 5D |  if_ne	jmp	#LR__0115
024bc     8D 01 00 FF 
024c0     DD 53 06 F6 | 	mov	local23, ##@LR__5116
024c4     29 51 02 F6 | 	mov	local22, local23
024c8     2D 13 02 F6 | 	mov	arg01, local27
024cc     28 15 02 F6 | 	mov	arg02, local22
024d0     FC 2B B2 FD | 	call	#__system___string_cmp
024d4     FD 5C 0A F6 | 	mov	local28, result1 wz
024d8     7C 00 90 AD |  if_e	jmp	#LR__0117
024dc                 | LR__0115
024dc     8D 01 00 FF 
024e0     DF 53 06 F6 | 	mov	local23, ##@LR__5117
024e4     2C 13 02 F6 | 	mov	arg01, local26
024e8     29 15 02 F6 | 	mov	arg02, local23
024ec     E0 2B B2 FD | 	call	#__system___string_cmp
024f0     FD 50 0A F6 | 	mov	local22, result1 wz
024f4     20 00 90 5D |  if_ne	jmp	#LR__0116
024f8     8D 01 00 FF 
024fc     E1 5F 06 F6 | 	mov	local29, ##@LR__5118
02500     2F 55 02 F6 | 	mov	local24, local29
02504     2D 13 02 F6 | 	mov	arg01, local27
02508     2A 15 02 F6 | 	mov	arg02, local24
0250c     C0 2B B2 FD | 	call	#__system___string_cmp
02510     FD 52 0A F6 | 	mov	local23, result1 wz
02514     40 00 90 AD |  if_e	jmp	#LR__0117
02518                 | LR__0116
02518     8D 01 00 FF 
0251c     E3 61 06 F6 | 	mov	local30, ##@LR__5119
02520     30 5F 02 F6 | 	mov	local29, local30
02524     2C 13 02 F6 | 	mov	arg01, local26
02528     2F 15 02 F6 | 	mov	arg02, local29
0252c     A0 2B B2 FD | 	call	#__system___string_cmp
02530     FD 54 0A F6 | 	mov	local24, result1 wz
02534     EC 00 90 5D |  if_ne	jmp	#LR__0121
02538     8D 01 00 FF 
0253c     E5 63 06 F6 | 	mov	local31, ##@LR__5120
02540     31 61 02 F6 | 	mov	local30, local31
02544     2D 13 02 F6 | 	mov	arg01, local27
02548     30 15 02 F6 | 	mov	arg02, local30
0254c     80 2B B2 FD | 	call	#__system___string_cmp
02550     FD 5E 0A F6 | 	mov	local29, result1 wz
02554     CC 00 90 5D |  if_ne	jmp	#LR__0121
02558                 | LR__0117
02558     14 39 02 F6 | 	mov	local10, local02
0255c     03 38 66 F0 | 	shl	local10, #3
02560     F2 2E 02 F6 | 	mov	local05, objptr
02564     35 00 00 FF 
02568     2C 2E 06 F1 | 	add	local05, ##27180
0256c     17 39 02 F1 | 	add	local10, local05
02570     2D 3D 02 F6 | 	mov	local12, local27
02574     2C 13 02 F6 | 	mov	arg01, local26
02578     1E 15 02 F6 | 	mov	arg02, local12
0257c     84 2B B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0119-@LR__0118)>>2,fcache_load_ptr_
02598                 | LR__0118
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0120
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     2C E4 05 F1 | 	add	objptr, ##27180
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     2C E4 85 F1 | 	sub	objptr, ##27180
02618     7C FF 9F FD | 	jmp	#LR__0118
0261c                 | LR__0119
0261c                 | LR__0120
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0121
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     5C FD 9F CD |  if_b	jmp	#LR__0112
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0122
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0123
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     2C E4 05 F1 | 	add	objptr, ##27180
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     2C E4 85 F1 | 	sub	objptr, ##27180
0267c     78 42 B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     B0 41 B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0122
02694                 | LR__0123
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0130-@LR__0124)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0124
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     F2 30 02 F6 | 	mov	local06, objptr
026a8     35 00 00 FF 
026ac     2C 30 06 F1 | 	add	local06, ##27180
026b0     18 2F 02 F1 | 	add	local05, local06
026b4     17 13 02 FB | 	rdlong	arg01, local05
026b8     09 33 02 F6 | 	mov	local07, arg01
026bc                 | LR__0125
026bc     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c0     01 32 06 51 |  if_ne	add	local07, #1
026c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0125
026c8     09 33 8A F1 | 	sub	local07, arg01 wz
026cc     C8 00 90 5D |  if_ne	jmp	#LR__0129
026d0                 | '     if i=k-1 then k-=1  :  exit
026d0     23 2D 02 F6 | 	mov	local04, local17
026d4     01 2C 86 F1 | 	sub	local04, #1
026d8     16 29 0A F2 | 	cmp	local02, local04 wz
026dc     01 46 86 A1 |  if_e	sub	local17, #1
026e0     C8 00 90 AD |  if_e	jmp	#LR__0131
026e4                 | '     if i<k-1 then 
026e4     23 2D 02 F6 | 	mov	local04, local17
026e8     01 2C 86 F1 | 	sub	local04, #1
026ec     16 29 52 F2 | 	cmps	local02, local04 wc
026f0     A4 00 90 3D |  if_ae	jmp	#LR__0128
026f4                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f4     14 43 02 F6 | 	mov	local15, local02
026f8     23 69 02 F6 | 	mov	local34, local17
026fc     01 68 86 F1 | 	sub	local34, #1
02700                 | LR__0126
02700     34 43 52 F2 | 	cmps	local15, local34 wc
02704     84 00 90 3D |  if_ae	jmp	#LR__0127
02708     21 2F 02 F6 | 	mov	local05, local15
0270c     01 2E 06 F1 | 	add	local05, #1
02710     03 2E 66 F0 | 	shl	local05, #3
02714     35 00 00 FF 
02718     2C E4 05 F1 | 	add	objptr, ##27180
0271c     F2 2E 02 F1 | 	add	local05, objptr
02720     17 2D 02 FB | 	rdlong	local04, local05
02724     21 31 02 F6 | 	mov	local06, local15
02728     01 30 06 F1 | 	add	local06, #1
0272c     03 30 66 F0 | 	shl	local06, #3
02730     F2 30 02 F1 | 	add	local06, objptr
02734     04 30 06 F1 | 	add	local06, #4
02738     18 2B 02 FB | 	rdlong	local03, local06
0273c     21 39 02 F6 | 	mov	local10, local15
02740     1C 2F 02 F6 | 	mov	local05, local10
02744     17 31 02 F6 | 	mov	local06, local05
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     2C E4 85 F1 | 	sub	objptr, ##27180
02788     74 FF 9F FD | 	jmp	#LR__0126
0278c                 | LR__0127
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0128
02798                 | LR__0129
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0124
027ac                 | LR__0130
027ac                 | LR__0131
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0132
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     C0 00 90 3D |  if_ae	jmp	#LR__0135
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     F2 30 02 F6 | 	mov	local06, objptr
027c8     35 00 00 FF 
027cc     2C 30 06 F1 | 	add	local06, ##27180
027d0     18 2F 02 F1 | 	add	local05, local06
027d4     17 13 02 FB | 	rdlong	arg01, local05
027d8     01 14 06 F6 | 	mov	arg02, #1
027dc     8C 3C B2 FD | 	call	#__system__Left_S
027e0     FD 12 02 F6 | 	mov	arg01, result1
027e4     8D 01 00 FF 
027e8     E7 15 06 F6 | 	mov	arg02, ##@LR__5121
027ec     E0 28 B2 FD | 	call	#__system___string_cmp
027f0     00 FA 0D F2 | 	cmp	result1, #0 wz
027f4     3C 00 90 5D |  if_ne	jmp	#LR__0133
027f8     21 31 02 F6 | 	mov	local06, local15
027fc     03 30 66 F0 | 	shl	local06, #3
02800     F2 3C 02 F6 | 	mov	local12, objptr
02804     35 00 00 FF 
02808     2C 3C 06 F1 | 	add	local12, ##27180
0280c     1E 31 02 F1 | 	add	local06, local12
02810     18 13 02 FB | 	rdlong	arg01, local06
02814     01 14 06 F6 | 	mov	arg02, #1
02818     D8 3C B2 FD | 	call	#__system__Right_S
0281c     FD 12 02 F6 | 	mov	arg01, result1
02820     8D 01 00 FF 
02824     E9 15 06 F6 | 	mov	arg02, ##@LR__5122
02828     A4 28 B2 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     40 00 90 AD |  if_e	jmp	#LR__0134
02834                 | LR__0133
02834     21 39 02 F6 | 	mov	local10, local15
02838     03 38 66 F0 | 	shl	local10, #3
0283c     35 00 00 FF 
02840     2C E4 05 F1 | 	add	objptr, ##27180
02844     F2 2E 02 F6 | 	mov	local05, objptr
02848     F2 38 02 F1 | 	add	local10, objptr
0284c     21 3B 02 F6 | 	mov	local11, local15
02850     1D 41 02 F6 | 	mov	local14, local11
02854     03 40 66 F0 | 	shl	local14, #3
02858     F2 3E 02 F6 | 	mov	local13, objptr
0285c     F2 40 02 F1 | 	add	local14, objptr
02860     20 13 02 FB | 	rdlong	arg01, local14
02864     35 00 00 FF 
02868     2C E4 85 F1 | 	sub	objptr, ##27180
0286c     08 3F B2 FD | 	call	#__system__LCase_S
02870     1C FB 61 FC | 	wrlong	result1, local10
02874                 | LR__0134
02874     01 42 06 F1 | 	add	local15, #1
02878     38 FF 9F FD | 	jmp	#LR__0132
0287c                 | LR__0135
0287c                 | ' 
0287c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
0287c                 | ' 
0287c                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
0287c     00 28 06 F6 | 	mov	local02, #0
02880     23 6D 02 F6 | 	mov	local36, local17
02884     01 6C 06 F1 | 	add	local36, #1
02888     97 18 48 FB | 	callpa	#(@LR__0137-@LR__0136)>>2,fcache_load_ptr_
0288c                 | LR__0136
0288c     36 29 52 F2 | 	cmps	local02, local36 wc
02890     14 39 02 C6 |  if_b	mov	local10, local02
02894     03 38 66 C0 |  if_b	shl	local10, #3
02898     F2 2E 02 C6 |  if_b	mov	local05, objptr
0289c     35 00 00 CF 
028a0     2C 2E 06 C1 |  if_b	add	local05, ##27180
028a4     17 39 02 C1 |  if_b	add	local10, local05
028a8     04 38 06 C1 |  if_b	add	local10, #4
028ac     FF FF FF CF 
028b0     1C FF 6B CC |  if_b	wrlong	##-1, local10
028b4     01 28 06 C1 |  if_b	add	local02, #1
028b8     D0 FF 9F CD |  if_b	jmp	#LR__0136
028bc                 | LR__0137
028bc                 | ' 
028bc                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028bc     35 00 00 FF 
028c0     2C E4 05 F1 | 	add	objptr, ##27180
028c4     F2 12 02 FB | 	rdlong	arg01, objptr
028c8     35 00 00 FF 
028cc     2C E4 85 F1 | 	sub	objptr, ##27180
028d0     D0 46 B0 FD | 	call	#_isdec
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     01 6E 06 56 |  if_ne	mov	local37, #1
028dc     00 6E 06 A6 |  if_e	mov	local37, #0
028e0                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028e0     35 00 00 FF 
028e4     2C E4 05 F1 | 	add	objptr, ##27180
028e8     F2 12 02 FB | 	rdlong	arg01, objptr
028ec     35 00 00 FF 
028f0     2C E4 85 F1 | 	sub	objptr, ##27180
028f4     8D 01 00 FF 
028f8     EB 15 06 F6 | 	mov	arg02, ##@LR__5123
028fc     D0 27 B2 FD | 	call	#__system___string_cmp
02900     00 FA 0D F2 | 	cmp	result1, #0 wz
02904     01 6E 06 A6 |  if_e	mov	local37, #1
02908     00 28 06 F6 | 	mov	local02, #0
0290c                 | ' i=0 : do 
0290c                 | LR__0138
0290c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0290c     14 2F 02 F6 | 	mov	local05, local02
02910     03 2E 66 F0 | 	shl	local05, #3
02914     F2 30 02 F6 | 	mov	local06, objptr
02918     35 00 00 FF 
0291c     2C 30 06 F1 | 	add	local06, ##27180
02920     18 2F 02 F1 | 	add	local05, local06
02924     17 13 02 FB | 	rdlong	arg01, local05
02928     8D 01 00 FF 
0292c     F0 15 06 F6 | 	mov	arg02, ##@LR__5124
02930     9C 27 B2 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 00 90 AD |  if_e	jmp	#LR__0139
0293c     01 28 06 F1 | 	add	local02, #1
02940     23 29 5A F2 | 	cmps	local02, local17 wcz
02944     C4 FF 9F ED |  if_be	jmp	#LR__0138
02948                 | LR__0139
02948                 | ' if i<k then addptr=i+1	 							' then found
02948     23 29 52 F2 | 	cmps	local02, local17 wc
0294c     14 6F 02 C6 |  if_b	mov	local37, local02
02950     01 6E 06 C1 |  if_b	add	local37, #1
02954     35 00 00 FF 
02958     2C E4 05 F1 | 	add	objptr, ##27180
0295c                 | ' lp$=lparts(addptr).part$ 
0295c                 | ' 
0295c                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
0295c     37 2F 02 F6 | 	mov	local05, local37
02960     03 2E 66 F0 | 	shl	local05, #3
02964     F2 2E 02 F1 | 	add	local05, objptr
02968     17 13 02 FB | 	rdlong	arg01, local05
0296c     01 14 06 F6 | 	mov	arg02, #1
02970     35 00 00 FF 
02974     2C E4 85 F1 | 	sub	objptr, ##27180
02978     F0 3A B2 FD | 	call	#__system__Left_S
0297c     FD 12 02 F6 | 	mov	arg01, result1
02980     8D 01 00 FF 
02984     F5 15 06 F6 | 	mov	arg02, ##@LR__5125
02988     44 27 B2 FD | 	call	#__system___string_cmp
0298c     00 FA 0D F2 | 	cmp	result1, #0 wz
02990     58 01 90 5D |  if_ne	jmp	#LR__0146
02994     37 31 02 F6 | 	mov	local06, local37
02998     03 30 66 F0 | 	shl	local06, #3
0299c     F2 3C 02 F6 | 	mov	local12, objptr
029a0     35 00 00 FF 
029a4     2C 3C 06 F1 | 	add	local12, ##27180
029a8     1E 31 02 F1 | 	add	local06, local12
029ac     18 13 02 FB | 	rdlong	arg01, local06
029b0     09 33 02 F6 | 	mov	local07, arg01
029b4     97 06 48 FB | 	callpa	#(@LR__0141-@LR__0140)>>2,fcache_load_ptr_
029b8                 | LR__0140
029b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029bc     01 32 06 51 |  if_ne	add	local07, #1
029c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0140
029c4                 | LR__0141
029c4     09 33 82 F1 | 	sub	local07, arg01
029c8     02 32 56 F2 | 	cmps	local07, #2 wc
029cc     1C 01 90 CD |  if_b	jmp	#LR__0146
029d0     01 46 06 F1 | 	add	local17, #1
029d4                 | '   k+=1
029d4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029d4     23 29 02 F6 | 	mov	local02, local17
029d8     37 71 02 F6 | 	mov	local38, local37
029dc     01 70 06 F1 | 	add	local38, #1
029e0     35 00 00 FF 
029e4     2C E4 05 F1 | 	add	objptr, ##27180
029e8     97 2E 48 FB | 	callpa	#(@LR__0143-@LR__0142)>>2,fcache_load_ptr_
029ec                 | LR__0142
029ec     14 2F 02 F6 | 	mov	local05, local02
029f0     01 2E 86 F1 | 	sub	local05, #1
029f4     03 2E 66 F0 | 	shl	local05, #3
029f8     F2 2E 02 F1 | 	add	local05, objptr
029fc     17 2D 02 FB | 	rdlong	local04, local05
02a00     14 31 02 F6 | 	mov	local06, local02
02a04     01 30 86 F1 | 	sub	local06, #1
02a08     03 30 66 F0 | 	shl	local06, #3
02a0c     F2 30 02 F1 | 	add	local06, objptr
02a10     04 30 06 F1 | 	add	local06, #4
02a14     18 2B 02 FB | 	rdlong	local03, local06
02a18     14 31 02 F6 | 	mov	local06, local02
02a1c     03 30 66 F0 | 	shl	local06, #3
02a20     F2 30 02 F1 | 	add	local06, objptr
02a24     18 2D 62 FC | 	wrlong	local04, local06
02a28     14 3F 02 F6 | 	mov	local13, local02
02a2c     03 3E 66 F0 | 	shl	local13, #3
02a30     F2 3E 02 F1 | 	add	local13, objptr
02a34     04 3E 06 F1 | 	add	local13, #4
02a38     1F 2B 62 FC | 	wrlong	local03, local13
02a3c     01 28 86 F1 | 	sub	local02, #1
02a40     38 29 52 F2 | 	cmps	local02, local38 wc
02a44     A4 FF 9F 3D |  if_ae	jmp	#LR__0142
02a48                 | LR__0143
02a48     37 39 02 F6 | 	mov	local10, local37
02a4c     01 38 06 F1 | 	add	local10, #1
02a50     03 38 66 F0 | 	shl	local10, #3
02a54     F2 38 02 F1 | 	add	local10, objptr
02a58     37 41 02 F6 | 	mov	local14, local37
02a5c     03 40 66 F0 | 	shl	local14, #3
02a60     F2 40 02 F1 | 	add	local14, objptr
02a64     20 31 02 FB | 	rdlong	local06, local14
02a68     37 3F 02 F6 | 	mov	local13, local37
02a6c     1F 5D 02 F6 | 	mov	local28, local13
02a70     2E 51 02 F6 | 	mov	local22, local28
02a74     03 50 66 F0 | 	shl	local22, #3
02a78     F2 52 02 F6 | 	mov	local23, objptr
02a7c     F2 50 02 F1 | 	add	local22, objptr
02a80     28 13 02 FB | 	rdlong	arg01, local22
02a84     35 00 00 FF 
02a88     2C E4 85 F1 | 	sub	objptr, ##27180
02a8c     09 33 02 F6 | 	mov	local07, arg01
02a90     97 06 48 FB | 	callpa	#(@LR__0145-@LR__0144)>>2,fcache_load_ptr_
02a94                 | LR__0144
02a94     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a98     01 32 06 51 |  if_ne	add	local07, #1
02a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0144
02aa0                 | LR__0145
02aa0     09 33 82 F1 | 	sub	local07, arg01
02aa4     19 41 02 F6 | 	mov	local14, local07
02aa8     20 3B 02 F6 | 	mov	local11, local14
02aac     01 3A 86 F1 | 	sub	local11, #1
02ab0     1D 3D 02 F6 | 	mov	local12, local11
02ab4     18 13 02 F6 | 	mov	arg01, local06
02ab8     1E 15 02 F6 | 	mov	arg02, local12
02abc     34 3A B2 FD | 	call	#__system__Right_S
02ac0     1C FB 61 FC | 	wrlong	result1, local10
02ac4     37 39 02 F6 | 	mov	local10, local37
02ac8     03 38 66 F0 | 	shl	local10, #3
02acc     F2 2E 02 F6 | 	mov	local05, objptr
02ad0     35 00 00 FF 
02ad4     2C 2E 06 F1 | 	add	local05, ##27180
02ad8     17 39 02 F1 | 	add	local10, local05
02adc     8D 01 00 FF 
02ae0     F7 31 06 F6 | 	mov	local06, ##@LR__5126
02ae4     1C 31 62 FC | 	wrlong	local06, local10
02ae8     98 01 90 FD | 	jmp	#LR__0154
02aec                 | LR__0146
02aec     37 31 02 F6 | 	mov	local06, local37
02af0     03 30 66 F0 | 	shl	local06, #3
02af4     F2 3C 02 F6 | 	mov	local12, objptr
02af8     35 00 00 FF 
02afc     2C 3C 06 F1 | 	add	local12, ##27180
02b00     1E 31 02 F1 | 	add	local06, local12
02b04     18 15 02 FB | 	rdlong	arg02, local06
02b08     8D 01 00 FF 
02b0c     F9 17 06 F6 | 	mov	arg03, ##@LR__5127
02b10     01 12 06 F6 | 	mov	arg01, #1
02b14     98 3E B2 FD | 	call	#__system__Instr
02b18     FD 72 02 F6 | 	mov	local39, result1
02b1c                 | ' 
02b1c                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b1c                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b1c     01 72 56 F2 | 	cmps	local39, #1 wc
02b20     60 01 90 CD |  if_b	jmp	#LR__0153
02b24     37 2F 02 F6 | 	mov	local05, local37
02b28     03 2E 66 F0 | 	shl	local05, #3
02b2c     F2 30 02 F6 | 	mov	local06, objptr
02b30     35 00 00 FF 
02b34     2C 30 06 F1 | 	add	local06, ##27180
02b38     18 2F 02 F1 | 	add	local05, local06
02b3c     17 13 02 FB | 	rdlong	arg01, local05
02b40     09 33 02 F6 | 	mov	local07, arg01
02b44     97 06 48 FB | 	callpa	#(@LR__0148-@LR__0147)>>2,fcache_load_ptr_
02b48                 | LR__0147
02b48     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b4c     01 32 06 51 |  if_ne	add	local07, #1
02b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0147
02b54                 | LR__0148
02b54     09 33 82 F1 | 	sub	local07, arg01
02b58     19 73 52 F2 | 	cmps	local39, local07 wc
02b5c     24 01 90 3D |  if_ae	jmp	#LR__0153
02b60     01 46 06 F1 | 	add	local17, #1
02b64                 | '   k+=1
02b64                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b64     23 29 02 F6 | 	mov	local02, local17
02b68     37 75 02 F6 | 	mov	local40, local37
02b6c     01 74 06 F1 | 	add	local40, #1
02b70     35 00 00 FF 
02b74     2C E4 05 F1 | 	add	objptr, ##27180
02b78     97 2E 48 FB | 	callpa	#(@LR__0150-@LR__0149)>>2,fcache_load_ptr_
02b7c                 | LR__0149
02b7c     14 2F 02 F6 | 	mov	local05, local02
02b80     01 2E 86 F1 | 	sub	local05, #1
02b84     03 2E 66 F0 | 	shl	local05, #3
02b88     F2 2E 02 F1 | 	add	local05, objptr
02b8c     17 2D 02 FB | 	rdlong	local04, local05
02b90     14 31 02 F6 | 	mov	local06, local02
02b94     01 30 86 F1 | 	sub	local06, #1
02b98     03 30 66 F0 | 	shl	local06, #3
02b9c     F2 30 02 F1 | 	add	local06, objptr
02ba0     04 30 06 F1 | 	add	local06, #4
02ba4     18 2B 02 FB | 	rdlong	local03, local06
02ba8     14 31 02 F6 | 	mov	local06, local02
02bac     03 30 66 F0 | 	shl	local06, #3
02bb0     F2 30 02 F1 | 	add	local06, objptr
02bb4     18 2D 62 FC | 	wrlong	local04, local06
02bb8     14 3F 02 F6 | 	mov	local13, local02
02bbc     03 3E 66 F0 | 	shl	local13, #3
02bc0     F2 3E 02 F1 | 	add	local13, objptr
02bc4     04 3E 06 F1 | 	add	local13, #4
02bc8     1F 2B 62 FC | 	wrlong	local03, local13
02bcc     01 28 86 F1 | 	sub	local02, #1
02bd0     3A 29 52 F2 | 	cmps	local02, local40 wc
02bd4     A4 FF 9F 3D |  if_ae	jmp	#LR__0149
02bd8                 | LR__0150
02bd8     37 39 02 F6 | 	mov	local10, local37
02bdc     01 38 06 F1 | 	add	local10, #1
02be0     03 38 66 F0 | 	shl	local10, #3
02be4     F2 38 02 F1 | 	add	local10, objptr
02be8     37 41 02 F6 | 	mov	local14, local37
02bec     03 40 66 F0 | 	shl	local14, #3
02bf0     F2 40 02 F1 | 	add	local14, objptr
02bf4     20 31 02 FB | 	rdlong	local06, local14
02bf8     37 51 02 F6 | 	mov	local22, local37
02bfc     03 50 66 F0 | 	shl	local22, #3
02c00     F2 52 02 F6 | 	mov	local23, objptr
02c04     F2 50 02 F1 | 	add	local22, objptr
02c08     28 13 02 FB | 	rdlong	arg01, local22
02c0c     35 00 00 FF 
02c10     2C E4 85 F1 | 	sub	objptr, ##27180
02c14     09 33 02 F6 | 	mov	local07, arg01
02c18     97 06 48 FB | 	callpa	#(@LR__0152-@LR__0151)>>2,fcache_load_ptr_
02c1c                 | LR__0151
02c1c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c20     01 32 06 51 |  if_ne	add	local07, #1
02c24     F4 FF 9F 5D |  if_ne	jmp	#LR__0151
02c28                 | LR__0152
02c28     09 33 82 F1 | 	sub	local07, arg01
02c2c     19 15 02 F6 | 	mov	arg02, local07
02c30     39 15 82 F1 | 	sub	arg02, local39
02c34     18 13 02 F6 | 	mov	arg01, local06
02c38     B8 38 B2 FD | 	call	#__system__Right_S
02c3c     1C FB 61 FC | 	wrlong	result1, local10
02c40     37 39 02 F6 | 	mov	local10, local37
02c44     03 38 66 F0 | 	shl	local10, #3
02c48     35 00 00 FF 
02c4c     2C E4 05 F1 | 	add	objptr, ##27180
02c50     F2 38 02 F1 | 	add	local10, objptr
02c54     37 3B 02 F6 | 	mov	local11, local37
02c58     1D 41 02 F6 | 	mov	local14, local11
02c5c     03 40 66 F0 | 	shl	local14, #3
02c60     F2 3E 02 F6 | 	mov	local13, objptr
02c64     F2 40 02 F1 | 	add	local14, objptr
02c68     20 13 02 FB | 	rdlong	arg01, local14
02c6c     39 3D 02 F6 | 	mov	local12, local39
02c70     1E 15 02 F6 | 	mov	arg02, local12
02c74     35 00 00 FF 
02c78     2C E4 85 F1 | 	sub	objptr, ##27180
02c7c     EC 37 B2 FD | 	call	#__system__Left_S
02c80     1C FB 61 FC | 	wrlong	result1, local10
02c84                 | LR__0153
02c84                 | LR__0154
02c84     37 39 02 F6 | 	mov	local10, local37
02c88     03 38 66 F0 | 	shl	local10, #3
02c8c     F2 2E 02 F6 | 	mov	local05, objptr
02c90     35 00 00 FF 
02c94     2C 2E 06 F1 | 	add	local05, ##27180
02c98     17 39 02 F1 | 	add	local10, local05
02c9c     1C 77 02 FB | 	rdlong	local41, local10
02ca0                 | ' 
02ca0                 | ' 825
02ca0                 | ' lp$=lparts(addptr).part$ 
02ca0                 | ' 
02ca0                 | ' ' process mouse/cursor/click on/off
02ca0                 | ' 
02ca0                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ca0     8D 01 00 FF 
02ca4     FB 15 06 F6 | 	mov	arg02, ##@LR__5128
02ca8     3B 13 02 F6 | 	mov	arg01, local41
02cac     20 24 B2 FD | 	call	#__system___string_cmp
02cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb4     30 00 90 AD |  if_e	jmp	#LR__0155
02cb8     8E 01 00 FF 
02cbc     01 14 06 F6 | 	mov	arg02, ##@LR__5129
02cc0     3B 13 02 F6 | 	mov	arg01, local41
02cc4     08 24 B2 FD | 	call	#__system___string_cmp
02cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02ccc     18 00 90 AD |  if_e	jmp	#LR__0155
02cd0     8E 01 00 FF 
02cd4     08 14 06 F6 | 	mov	arg02, ##@LR__5130
02cd8     3B 13 02 F6 | 	mov	arg01, local41
02cdc     F0 23 B2 FD | 	call	#__system___string_cmp
02ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce4     D0 00 90 5D |  if_ne	jmp	#LR__0156
02ce8                 | LR__0155
02ce8                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02ce8     37 2F 02 F6 | 	mov	local05, local37
02cec     01 2E 06 F1 | 	add	local05, #1
02cf0     03 2E 66 F0 | 	shl	local05, #3
02cf4     F2 30 02 F6 | 	mov	local06, objptr
02cf8     35 00 00 FF 
02cfc     2C 30 06 F1 | 	add	local06, ##27180
02d00     18 2F 02 F1 | 	add	local05, local06
02d04     17 13 02 FB | 	rdlong	arg01, local05
02d08     8E 01 00 FF 
02d0c     0E 14 06 F6 | 	mov	arg02, ##@LR__5131
02d10     BC 23 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     37 39 02 A6 |  if_e	mov	local10, local37
02d1c     01 38 06 A1 |  if_e	add	local10, #1
02d20     03 38 66 A0 |  if_e	shl	local10, #3
02d24     35 00 00 AF 
02d28     2C E4 05 A1 |  if_e	add	objptr, ##27180
02d2c     F2 38 02 A1 |  if_e	add	local10, objptr
02d30     8E 01 00 AF 
02d34     11 30 06 A6 |  if_e	mov	local06, ##@LR__5132
02d38     1C 31 62 AC |  if_e	wrlong	local06, local10
02d3c     14 E4 05 A1 |  if_e	add	objptr, #20
02d40     01 00 80 AF 
02d44     F2 00 68 AC |  if_e	wrlong	##512, objptr
02d48     35 00 00 AF 
02d4c     40 E4 85 A1 |  if_e	sub	objptr, ##27200
02d50                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d50     37 2F 02 F6 | 	mov	local05, local37
02d54     01 2E 06 F1 | 	add	local05, #1
02d58     03 2E 66 F0 | 	shl	local05, #3
02d5c     F2 30 02 F6 | 	mov	local06, objptr
02d60     35 00 00 FF 
02d64     2C 30 06 F1 | 	add	local06, ##27180
02d68     18 2F 02 F1 | 	add	local05, local06
02d6c     17 13 02 FB | 	rdlong	arg01, local05
02d70     8E 01 00 FF 
02d74     13 14 06 F6 | 	mov	arg02, ##@LR__5133
02d78     54 23 B2 FD | 	call	#__system___string_cmp
02d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d80     37 39 02 A6 |  if_e	mov	local10, local37
02d84     01 38 06 A1 |  if_e	add	local10, #1
02d88     03 38 66 A0 |  if_e	shl	local10, #3
02d8c     35 00 00 AF 
02d90     2C E4 05 A1 |  if_e	add	objptr, ##27180
02d94     F2 38 02 A1 |  if_e	add	local10, objptr
02d98     8E 01 00 AF 
02d9c     17 30 06 A6 |  if_e	mov	local06, ##@LR__5134
02da0     1C 31 62 AC |  if_e	wrlong	local06, local10
02da4     14 E4 05 A1 |  if_e	add	objptr, #20
02da8     01 00 80 AF 
02dac     F2 00 68 AC |  if_e	wrlong	##512, objptr
02db0     35 00 00 AF 
02db4     40 E4 85 A1 |  if_e	sub	objptr, ##27200
02db8                 | LR__0156
02db8                 | ' 		
02db8                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02db8                 | ' 
02db8                 | ' if (lp$="mode" orelse lp$="m.") then 
02db8     8E 01 00 FF 
02dbc     19 14 06 F6 | 	mov	arg02, ##@LR__5135
02dc0     3B 13 02 F6 | 	mov	arg01, local41
02dc4     08 23 B2 FD | 	call	#__system___string_cmp
02dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02dcc     18 00 90 AD |  if_e	jmp	#LR__0157
02dd0     8E 01 00 FF 
02dd4     1E 14 06 F6 | 	mov	arg02, ##@LR__5136
02dd8     3B 13 02 F6 | 	mov	arg01, local41
02ddc     F0 22 B2 FD | 	call	#__system___string_cmp
02de0     00 FA 0D F2 | 	cmp	result1, #0 wz
02de4     10 02 90 5D |  if_ne	jmp	#LR__0158
02de8                 | LR__0157
02de8                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02de8     37 2F 02 F6 | 	mov	local05, local37
02dec     01 2E 06 F1 | 	add	local05, #1
02df0     03 2E 66 F0 | 	shl	local05, #3
02df4     F2 30 02 F6 | 	mov	local06, objptr
02df8     35 00 00 FF 
02dfc     2C 30 06 F1 | 	add	local06, ##27180
02e00     18 2F 02 F1 | 	add	local05, local06
02e04     17 13 02 FB | 	rdlong	arg01, local05
02e08     8E 01 00 FF 
02e0c     21 14 06 F6 | 	mov	arg02, ##@LR__5137
02e10     BC 22 B2 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     37 39 02 A6 |  if_e	mov	local10, local37
02e1c     01 38 06 A1 |  if_e	add	local10, #1
02e20     03 38 66 A0 |  if_e	shl	local10, #3
02e24     F2 2E 02 A6 |  if_e	mov	local05, objptr
02e28     35 00 00 AF 
02e2c     2C 2E 06 A1 |  if_e	add	local05, ##27180
02e30     17 39 02 A1 |  if_e	add	local10, local05
02e34     8E 01 00 AF 
02e38     27 30 06 A6 |  if_e	mov	local06, ##@LR__5138
02e3c     1C 31 62 AC |  if_e	wrlong	local06, local10
02e40                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e40     37 2F 02 F6 | 	mov	local05, local37
02e44     01 2E 06 F1 | 	add	local05, #1
02e48     03 2E 66 F0 | 	shl	local05, #3
02e4c     F2 30 02 F6 | 	mov	local06, objptr
02e50     35 00 00 FF 
02e54     2C 30 06 F1 | 	add	local06, ##27180
02e58     18 2F 02 F1 | 	add	local05, local06
02e5c     17 13 02 FB | 	rdlong	arg01, local05
02e60     8E 01 00 FF 
02e64     29 14 06 F6 | 	mov	arg02, ##@LR__5139
02e68     64 22 B2 FD | 	call	#__system___string_cmp
02e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e70     37 39 02 A6 |  if_e	mov	local10, local37
02e74     01 38 06 A1 |  if_e	add	local10, #1
02e78     03 38 66 A0 |  if_e	shl	local10, #3
02e7c     F2 2E 02 A6 |  if_e	mov	local05, objptr
02e80     35 00 00 AF 
02e84     2C 2E 06 A1 |  if_e	add	local05, ##27180
02e88     17 39 02 A1 |  if_e	add	local10, local05
02e8c     8E 01 00 AF 
02e90     32 30 06 A6 |  if_e	mov	local06, ##@LR__5140
02e94     1C 31 62 AC |  if_e	wrlong	local06, local10
02e98                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e98     37 2F 02 F6 | 	mov	local05, local37
02e9c     01 2E 06 F1 | 	add	local05, #1
02ea0     03 2E 66 F0 | 	shl	local05, #3
02ea4     F2 30 02 F6 | 	mov	local06, objptr
02ea8     35 00 00 FF 
02eac     2C 30 06 F1 | 	add	local06, ##27180
02eb0     18 2F 02 F1 | 	add	local05, local06
02eb4     17 13 02 FB | 	rdlong	arg01, local05
02eb8     8E 01 00 FF 
02ebc     34 14 06 F6 | 	mov	arg02, ##@LR__5141
02ec0     0C 22 B2 FD | 	call	#__system___string_cmp
02ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec8     37 39 02 A6 |  if_e	mov	local10, local37
02ecc     01 38 06 A1 |  if_e	add	local10, #1
02ed0     03 38 66 A0 |  if_e	shl	local10, #3
02ed4     F2 2E 02 A6 |  if_e	mov	local05, objptr
02ed8     35 00 00 AF 
02edc     2C 2E 06 A1 |  if_e	add	local05, ##27180
02ee0     17 39 02 A1 |  if_e	add	local10, local05
02ee4     8E 01 00 AF 
02ee8     3D 30 06 A6 |  if_e	mov	local06, ##@LR__5142
02eec     1C 31 62 AC |  if_e	wrlong	local06, local10
02ef0                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ef0     37 2F 02 F6 | 	mov	local05, local37
02ef4     01 2E 06 F1 | 	add	local05, #1
02ef8     03 2E 66 F0 | 	shl	local05, #3
02efc     F2 30 02 F6 | 	mov	local06, objptr
02f00     35 00 00 FF 
02f04     2C 30 06 F1 | 	add	local06, ##27180
02f08     18 2F 02 F1 | 	add	local05, local06
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     8E 01 00 FF 
02f14     3F 14 06 F6 | 	mov	arg02, ##@LR__5143
02f18     B4 21 B2 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     37 39 02 A6 |  if_e	mov	local10, local37
02f24     01 38 06 A1 |  if_e	add	local10, #1
02f28     03 38 66 A0 |  if_e	shl	local10, #3
02f2c     F2 2E 02 A6 |  if_e	mov	local05, objptr
02f30     35 00 00 AF 
02f34     2C 2E 06 A1 |  if_e	add	local05, ##27180
02f38     17 39 02 A1 |  if_e	add	local10, local05
02f3c     8E 01 00 AF 
02f40     48 30 06 A6 |  if_e	mov	local06, ##@LR__5144
02f44     1C 31 62 AC |  if_e	wrlong	local06, local10
02f48                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02f48     37 2F 02 F6 | 	mov	local05, local37
02f4c     01 2E 06 F1 | 	add	local05, #1
02f50     03 2E 66 F0 | 	shl	local05, #3
02f54     F2 30 02 F6 | 	mov	local06, objptr
02f58     35 00 00 FF 
02f5c     2C 30 06 F1 | 	add	local06, ##27180
02f60     18 2F 02 F1 | 	add	local05, local06
02f64     17 13 02 FB | 	rdlong	arg01, local05
02f68     8E 01 00 FF 
02f6c     4A 14 06 F6 | 	mov	arg02, ##@LR__5145
02f70     5C 21 B2 FD | 	call	#__system___string_cmp
02f74     00 FA 0D F2 | 	cmp	result1, #0 wz
02f78     37 39 02 A6 |  if_e	mov	local10, local37
02f7c     01 38 06 A1 |  if_e	add	local10, #1
02f80     03 38 66 A0 |  if_e	shl	local10, #3
02f84     F2 2E 02 A6 |  if_e	mov	local05, objptr
02f88     35 00 00 AF 
02f8c     2C 2E 06 A1 |  if_e	add	local05, ##27180
02f90     17 39 02 A1 |  if_e	add	local10, local05
02f94     8E 01 00 AF 
02f98     4D 30 06 A6 |  if_e	mov	local06, ##@LR__5146
02f9c     1C 31 62 AC |  if_e	wrlong	local06, local10
02fa0                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
02fa0     37 2F 02 F6 | 	mov	local05, local37
02fa4     01 2E 06 F1 | 	add	local05, #1
02fa8     03 2E 66 F0 | 	shl	local05, #3
02fac     F2 30 02 F6 | 	mov	local06, objptr
02fb0     35 00 00 FF 
02fb4     2C 30 06 F1 | 	add	local06, ##27180
02fb8     18 2F 02 F1 | 	add	local05, local06
02fbc     17 13 02 FB | 	rdlong	arg01, local05
02fc0     8E 01 00 FF 
02fc4     4F 14 06 F6 | 	mov	arg02, ##@LR__5147
02fc8     04 21 B2 FD | 	call	#__system___string_cmp
02fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fd0     37 39 02 A6 |  if_e	mov	local10, local37
02fd4     01 38 06 A1 |  if_e	add	local10, #1
02fd8     03 38 66 A0 |  if_e	shl	local10, #3
02fdc     F2 2E 02 A6 |  if_e	mov	local05, objptr
02fe0     35 00 00 AF 
02fe4     2C 2E 06 A1 |  if_e	add	local05, ##27180
02fe8     17 39 02 A1 |  if_e	add	local10, local05
02fec     8E 01 00 AF 
02ff0     55 30 06 A6 |  if_e	mov	local06, ##@LR__5148
02ff4     1C 31 62 AC |  if_e	wrlong	local06, local10
02ff8                 | LR__0158
02ff8                 | ' 
02ff8                 | ' ' find part types 
02ff8                 | ' 
02ff8                 | ' for i=0 to k-1
02ff8     00 28 06 F6 | 	mov	local02, #0
02ffc     23 79 02 F6 | 	mov	local42, local17
03000                 | LR__0159
03000     3C 29 52 F2 | 	cmps	local02, local42 wc
03004     44 07 90 3D |  if_ae	jmp	#LR__0167
03008     14 39 02 F6 | 	mov	local10, local02
0300c     03 38 66 F0 | 	shl	local10, #3
03010     35 00 00 FF 
03014     2C E4 05 F1 | 	add	objptr, ##27180
03018     F2 38 02 F1 | 	add	local10, objptr
0301c     14 3B 02 F6 | 	mov	local11, local02
03020     1D 41 02 F6 | 	mov	local14, local11
03024     20 3F 02 F6 | 	mov	local13, local14
03028     03 3E 66 F0 | 	shl	local13, #3
0302c     F2 3E 02 F1 | 	add	local13, objptr
03030     1F 13 02 FB | 	rdlong	arg01, local13
03034     35 00 00 FF 
03038     2C E4 85 F1 | 	sub	objptr, ##27180
0303c     80 1A B0 FD | 	call	#_isseparator
03040     FD FA E1 F8 | 	getbyte	result1, result1, #0
03044     04 38 06 F1 | 	add	local10, #4
03048     1C FB 61 FC | 	wrlong	result1, local10
0304c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0304c     14 39 02 F6 | 	mov	local10, local02
03050     03 38 66 F0 | 	shl	local10, #3
03054     F2 2E 02 F6 | 	mov	local05, objptr
03058     35 00 00 FF 
0305c     2C 2E 06 F1 | 	add	local05, ##27180
03060     17 39 02 F1 | 	add	local10, local05
03064     04 38 06 F1 | 	add	local10, #4
03068     1C 3D 02 FB | 	rdlong	local12, local10
0306c     01 3C 56 F2 | 	cmps	local12, #1 wc
03070     D0 06 90 3D |  if_ae	jmp	#LR__0166
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     2C E4 05 F1 | 	add	objptr, ##27180
03084     F2 38 02 F1 | 	add	local10, objptr
03088     14 3B 02 F6 | 	mov	local11, local02
0308c     1D 41 02 F6 | 	mov	local14, local11
03090     20 3F 02 F6 | 	mov	local13, local14
03094     03 3E 66 F0 | 	shl	local13, #3
03098     F2 3E 02 F1 | 	add	local13, objptr
0309c     1F 13 02 FB | 	rdlong	arg01, local13
030a0     35 00 00 FF 
030a4     2C E4 85 F1 | 	sub	objptr, ##27180
030a8     60 12 B0 FD | 	call	#_isoperator
030ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
030b0     04 38 06 F1 | 	add	local10, #4
030b4     1C FB 61 FC | 	wrlong	result1, local10
030b8                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030b8     14 39 02 F6 | 	mov	local10, local02
030bc     03 38 66 F0 | 	shl	local10, #3
030c0     F2 2E 02 F6 | 	mov	local05, objptr
030c4     35 00 00 FF 
030c8     2C 2E 06 F1 | 	add	local05, ##27180
030cc     17 39 02 F1 | 	add	local10, local05
030d0     04 38 06 F1 | 	add	local10, #4
030d4     1C 3D 02 FB | 	rdlong	local12, local10
030d8     01 3C 56 F2 | 	cmps	local12, #1 wc
030dc     64 06 90 3D |  if_ae	jmp	#LR__0166
030e0     14 39 02 F6 | 	mov	local10, local02
030e4     03 38 66 F0 | 	shl	local10, #3
030e8     35 00 00 FF 
030ec     2C E4 05 F1 | 	add	objptr, ##27180
030f0     F2 38 02 F1 | 	add	local10, objptr
030f4     14 3B 02 F6 | 	mov	local11, local02
030f8     1D 41 02 F6 | 	mov	local14, local11
030fc     20 3F 02 F6 | 	mov	local13, local14
03100     03 3E 66 F0 | 	shl	local13, #3
03104     F2 3E 02 F1 | 	add	local13, objptr
03108     1F 13 02 FB | 	rdlong	arg01, local13
0310c     35 00 00 FF 
03110     2C E4 85 F1 | 	sub	objptr, ##27180
03114                 | ' 
03114                 | ' select case s
03114     8E 01 00 FF 
03118     5A 15 06 F6 | 	mov	arg02, ##@LR__5239
0311c     B0 1F B2 FD | 	call	#__system___string_cmp
03120     00 FA 0D F2 | 	cmp	result1, #0 wz
03124     1B FA 05 A6 |  if_e	mov	result1, #27
03128     00 FA 05 56 |  if_ne	mov	result1, #0
0312c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03130     04 38 06 F1 | 	add	local10, #4
03134     1C FB 61 FC | 	wrlong	result1, local10
03138                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03138     14 39 02 F6 | 	mov	local10, local02
0313c     03 38 66 F0 | 	shl	local10, #3
03140     F2 2E 02 F6 | 	mov	local05, objptr
03144     35 00 00 FF 
03148     2C 2E 06 F1 | 	add	local05, ##27180
0314c     17 39 02 F1 | 	add	local10, local05
03150     04 38 06 F1 | 	add	local10, #4
03154     1C 3D 02 FB | 	rdlong	local12, local10
03158     01 3C 56 F2 | 	cmps	local12, #1 wc
0315c     E4 05 90 3D |  if_ae	jmp	#LR__0166
03160     14 39 02 F6 | 	mov	local10, local02
03164     03 38 66 F0 | 	shl	local10, #3
03168     35 00 00 FF 
0316c     2C E4 05 F1 | 	add	objptr, ##27180
03170     F2 38 02 F1 | 	add	local10, objptr
03174     14 3B 02 F6 | 	mov	local11, local02
03178     1D 41 02 F6 | 	mov	local14, local11
0317c     20 3F 02 F6 | 	mov	local13, local14
03180     03 3E 66 F0 | 	shl	local13, #3
03184     F2 3E 02 F1 | 	add	local13, objptr
03188     1F 13 02 FB | 	rdlong	arg01, local13
0318c     35 00 00 FF 
03190     2C E4 85 F1 | 	sub	objptr, ##27180
03194     28 1B B0 FD | 	call	#_iscommand
03198     FD FA E1 F8 | 	getbyte	result1, result1, #0
0319c     04 38 06 F1 | 	add	local10, #4
031a0     1C FB 61 FC | 	wrlong	result1, local10
031a4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031a4     14 39 02 F6 | 	mov	local10, local02
031a8     03 38 66 F0 | 	shl	local10, #3
031ac     F2 2E 02 F6 | 	mov	local05, objptr
031b0     35 00 00 FF 
031b4     2C 2E 06 F1 | 	add	local05, ##27180
031b8     17 39 02 F1 | 	add	local10, local05
031bc     04 38 06 F1 | 	add	local10, #4
031c0     1C 3D 02 FB | 	rdlong	local12, local10
031c4     01 3C 56 F2 | 	cmps	local12, #1 wc
031c8     78 05 90 3D |  if_ae	jmp	#LR__0166
031cc     14 39 02 F6 | 	mov	local10, local02
031d0     03 38 66 F0 | 	shl	local10, #3
031d4     35 00 00 FF 
031d8     2C E4 05 F1 | 	add	objptr, ##27180
031dc     F2 38 02 F1 | 	add	local10, objptr
031e0     14 3B 02 F6 | 	mov	local11, local02
031e4     1D 41 02 F6 | 	mov	local14, local11
031e8     20 3F 02 F6 | 	mov	local13, local14
031ec     03 3E 66 F0 | 	shl	local13, #3
031f0     F2 5C 02 F6 | 	mov	local28, objptr
031f4     F2 3E 02 F1 | 	add	local13, objptr
031f8     1F 13 02 FB | 	rdlong	arg01, local13
031fc     35 00 00 FF 
03200     2C E4 85 F1 | 	sub	objptr, ##27180
03204     78 2C B0 FD | 	call	#_isfunction
03208     FD FA E1 F8 | 	getbyte	result1, result1, #0
0320c     04 38 06 F1 | 	add	local10, #4
03210     1C FB 61 FC | 	wrlong	result1, local10
03214                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03214     14 39 02 F6 | 	mov	local10, local02
03218     03 38 66 F0 | 	shl	local10, #3
0321c     F2 2E 02 F6 | 	mov	local05, objptr
03220     35 00 00 FF 
03224     2C 2E 06 F1 | 	add	local05, ##27180
03228     17 39 02 F1 | 	add	local10, local05
0322c     04 38 06 F1 | 	add	local10, #4
03230     1C 3D 02 FB | 	rdlong	local12, local10
03234     01 3C 56 F2 | 	cmps	local12, #1 wc
03238     08 05 90 3D |  if_ae	jmp	#LR__0166
0323c     14 39 02 F6 | 	mov	local10, local02
03240     03 38 66 F0 | 	shl	local10, #3
03244     35 00 00 FF 
03248     2C E4 05 F1 | 	add	objptr, ##27180
0324c     F2 38 02 F1 | 	add	local10, objptr
03250     14 3B 02 F6 | 	mov	local11, local02
03254     1D 41 02 F6 | 	mov	local14, local11
03258     03 40 66 F0 | 	shl	local14, #3
0325c     F2 3E 02 F6 | 	mov	local13, objptr
03260     F2 40 02 F1 | 	add	local14, objptr
03264     20 13 02 FB | 	rdlong	arg01, local14
03268     35 00 00 FF 
0326c     2C E4 85 F1 | 	sub	objptr, ##27180
03270     E0 14 B0 FD | 	call	#_isnotename
03274     04 38 06 F1 | 	add	local10, #4
03278     1C FB 61 FC | 	wrlong	result1, local10
0327c                 | ' lparts(i).token=isnotename(lparts(i).part$) 
0327c                 | ' if lparts(i).token>0 then 
0327c     14 39 02 F6 | 	mov	local10, local02
03280     03 38 66 F0 | 	shl	local10, #3
03284     F2 2E 02 F6 | 	mov	local05, objptr
03288     35 00 00 FF 
0328c     2C 2E 06 F1 | 	add	local05, ##27180
03290     17 39 02 F1 | 	add	local10, local05
03294     04 38 06 F1 | 	add	local10, #4
03298     1C 31 02 FB | 	rdlong	local06, local10
0329c     01 30 56 F2 | 	cmps	local06, #1 wc
032a0     80 00 90 CD |  if_b	jmp	#LR__0160
032a4     14 2F 02 F6 | 	mov	local05, local02
032a8     03 2E 66 F0 | 	shl	local05, #3
032ac     F2 30 02 F6 | 	mov	local06, objptr
032b0     35 00 00 FF 
032b4     2C 30 06 F1 | 	add	local06, ##27180
032b8     18 2F 02 F1 | 	add	local05, local06
032bc     04 2E 06 F1 | 	add	local05, #4
032c0     17 3D 02 FB | 	rdlong	local12, local05
032c4     1E 13 02 F6 | 	mov	arg01, local12
032c8     FC 3D B0 FD | 	call	#_getnoteval
032cc     FD 7A 02 F6 | 	mov	local43, result1
032d0     14 39 02 F6 | 	mov	local10, local02
032d4     03 38 66 F0 | 	shl	local10, #3
032d8     F2 2E 02 F6 | 	mov	local05, objptr
032dc     35 00 00 FF 
032e0     2C 2E 06 F1 | 	add	local05, ##27180
032e4     17 39 02 F1 | 	add	local10, local05
032e8     3D 13 02 F6 | 	mov	arg01, local43
032ec     70 33 B2 FD | 	call	#__system__str_S
032f0     1C FB 61 FC | 	wrlong	result1, local10
032f4     14 2D 02 F6 | 	mov	local04, local02
032f8     16 2B 02 F6 | 	mov	local03, local04
032fc     15 39 02 F6 | 	mov	local10, local03
03300     03 38 66 F0 | 	shl	local10, #3
03304     F2 2E 02 F6 | 	mov	local05, objptr
03308     35 00 00 FF 
0330c     2C 2E 06 F1 | 	add	local05, ##27180
03310     17 39 02 F1 | 	add	local10, local05
03314     04 38 06 F1 | 	add	local10, #4
03318     01 00 80 FF 
0331c     1C 05 68 FC | 	wrlong	##514, local10
03320     20 04 90 FD | 	jmp	#LR__0166
03324                 | LR__0160
03324     14 39 02 F6 | 	mov	local10, local02
03328     03 38 66 F0 | 	shl	local10, #3
0332c     35 00 00 FF 
03330     2C E4 05 F1 | 	add	objptr, ##27180
03334     F2 38 02 F1 | 	add	local10, objptr
03338     14 41 02 F6 | 	mov	local14, local02
0333c     03 40 66 F0 | 	shl	local14, #3
03340     F2 40 02 F1 | 	add	local14, objptr
03344     20 13 02 FB | 	rdlong	arg01, local14
03348     35 00 00 FF 
0334c     2C E4 85 F1 | 	sub	objptr, ##27180
03350     98 12 B0 FD | 	call	#_ischannel
03354     04 38 06 F1 | 	add	local10, #4
03358     1C FB 61 FC | 	wrlong	result1, local10
0335c                 | ' 
0335c                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
0335c                 | ' 
0335c                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
0335c     14 39 02 F6 | 	mov	local10, local02
03360     03 38 66 F0 | 	shl	local10, #3
03364     F2 2E 02 F6 | 	mov	local05, objptr
03368     35 00 00 FF 
0336c     2C 2E 06 F1 | 	add	local05, ##27180
03370     17 39 02 F1 | 	add	local10, local05
03374     04 38 06 F1 | 	add	local10, #4
03378     1C 31 02 FB | 	rdlong	local06, local10
0337c     01 30 56 F2 | 	cmps	local06, #1 wc
03380     70 00 90 CD |  if_b	jmp	#LR__0161
03384     14 39 02 F6 | 	mov	local10, local02
03388     03 38 66 F0 | 	shl	local10, #3
0338c     35 00 00 FF 
03390     2C E4 05 F1 | 	add	objptr, ##27180
03394     F2 38 02 F1 | 	add	local10, objptr
03398     14 3B 02 F6 | 	mov	local11, local02
0339c     1D 41 02 F6 | 	mov	local14, local11
033a0     03 40 66 F0 | 	shl	local14, #3
033a4     F2 3E 02 F6 | 	mov	local13, objptr
033a8     F2 40 02 F1 | 	add	local14, objptr
033ac     20 13 02 FB | 	rdlong	arg01, local14
033b0     01 3C 06 F6 | 	mov	local12, #1
033b4     01 14 06 F6 | 	mov	arg02, #1
033b8     35 00 00 FF 
033bc     2C E4 85 F1 | 	sub	objptr, ##27180
033c0     30 31 B2 FD | 	call	#__system__Right_S
033c4     1C FB 61 FC | 	wrlong	result1, local10
033c8     14 2D 02 F6 | 	mov	local04, local02
033cc     16 2B 02 F6 | 	mov	local03, local04
033d0     15 39 02 F6 | 	mov	local10, local03
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     F2 2E 02 F6 | 	mov	local05, objptr
033dc     35 00 00 FF 
033e0     2C 2E 06 F1 | 	add	local05, ##27180
033e4     17 39 02 F1 | 	add	local10, local05
033e8     04 38 06 F1 | 	add	local10, #4
033ec     1C 59 68 FC | 	wrlong	#44, local10
033f0     50 03 90 FD | 	jmp	#LR__0166
033f4                 | LR__0161
033f4     14 39 02 F6 | 	mov	local10, local02
033f8     03 38 66 F0 | 	shl	local10, #3
033fc     35 00 00 FF 
03400     2C E4 05 F1 | 	add	objptr, ##27180
03404     F2 38 02 F1 | 	add	local10, objptr
03408     14 3B 02 F6 | 	mov	local11, local02
0340c     1D 41 02 F6 | 	mov	local14, local11
03410     03 40 66 F0 | 	shl	local14, #3
03414     F2 3E 02 F6 | 	mov	local13, objptr
03418     F2 40 02 F1 | 	add	local14, objptr
0341c     20 13 02 FB | 	rdlong	arg01, local14
03420     35 00 00 FF 
03424     2C E4 85 F1 | 	sub	objptr, ##27180
03428     A8 12 B0 FD | 	call	#_isconstant
0342c     04 38 06 F1 | 	add	local10, #4
03430     1C FB 61 FC | 	wrlong	result1, local10
03434                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03434     14 39 02 F6 | 	mov	local10, local02
03438     03 38 66 F0 | 	shl	local10, #3
0343c     F2 2E 02 F6 | 	mov	local05, objptr
03440     35 00 00 FF 
03444     2C 2E 06 F1 | 	add	local05, ##27180
03448     17 39 02 F1 | 	add	local10, local05
0344c     04 38 06 F1 | 	add	local10, #4
03450     1C 31 02 FB | 	rdlong	local06, local10
03454     01 30 56 F2 | 	cmps	local06, #1 wc
03458     90 00 90 CD |  if_b	jmp	#LR__0162
0345c     14 39 02 F6 | 	mov	local10, local02
03460     03 38 66 F0 | 	shl	local10, #3
03464     35 00 00 FF 
03468     2C E4 05 F1 | 	add	objptr, ##27180
0346c     F2 38 02 F1 | 	add	local10, objptr
03470     14 3D 02 F6 | 	mov	local12, local02
03474     1E 3B 02 F6 | 	mov	local11, local12
03478     1D 41 02 F6 | 	mov	local14, local11
0347c     03 40 66 F0 | 	shl	local14, #3
03480     F2 3E 02 F6 | 	mov	local13, objptr
03484     F2 40 02 F1 | 	add	local14, objptr
03488     04 40 06 F1 | 	add	local14, #4
0348c     20 13 02 FB | 	rdlong	arg01, local14
03490     04 40 86 F1 | 	sub	local14, #4
03494     35 00 00 FF 
03498     2C E4 85 F1 | 	sub	objptr, ##27180
0349c     09 13 52 F6 | 	abs	arg01, arg01 wc
034a0     1F 7C C6 C9 |  if_b	decod	local44, #31
034a4     00 7C 06 36 |  if_ae	mov	local44, #0
034a8     C8 36 B2 FD | 	call	#__system___float_fromuns
034ac     3E FB 61 F5 | 	xor	result1, local44
034b0     FD 12 02 F6 | 	mov	arg01, result1
034b4     A8 31 B2 FD | 	call	#__system__str_S
034b8     1C FB 61 FC | 	wrlong	result1, local10
034bc     14 2D 02 F6 | 	mov	local04, local02
034c0     16 2B 02 F6 | 	mov	local03, local04
034c4     15 39 02 F6 | 	mov	local10, local03
034c8     03 38 66 F0 | 	shl	local10, #3
034cc     F2 2E 02 F6 | 	mov	local05, objptr
034d0     35 00 00 FF 
034d4     2C 2E 06 F1 | 	add	local05, ##27180
034d8     17 39 02 F1 | 	add	local10, local05
034dc     04 38 06 F1 | 	add	local10, #4
034e0     01 00 80 FF 
034e4     1C 03 68 FC | 	wrlong	##513, local10
034e8     58 02 90 FD | 	jmp	#LR__0166
034ec                 | LR__0162
034ec     14 31 02 F6 | 	mov	local06, local02
034f0     03 30 66 F0 | 	shl	local06, #3
034f4     F2 3C 02 F6 | 	mov	local12, objptr
034f8     35 00 00 FF 
034fc     2C 3C 06 F1 | 	add	local12, ##27180
03500     1E 31 02 F1 | 	add	local06, local12
03504     18 13 02 FB | 	rdlong	arg01, local06
03508     08 34 B0 FD | 	call	#_isnum
0350c     FD 7E 02 F6 | 	mov	local45, result1
03510     07 7E 66 F7 | 	signx	local45, #7
03514     14 31 02 F6 | 	mov	local06, local02
03518     03 30 66 F0 | 	shl	local06, #3
0351c     F2 3C 02 F6 | 	mov	local12, objptr
03520     35 00 00 FF 
03524     2C 3C 06 F1 | 	add	local12, ##27180
03528     1E 31 02 F1 | 	add	local06, local12
0352c     18 13 02 FB | 	rdlong	arg01, local06
03530     CC 37 B0 FD | 	call	#_isint
03534     FD 80 02 F6 | 	mov	local46, result1
03538     07 80 66 F7 | 	signx	local46, #7
0353c     14 31 02 F6 | 	mov	local06, local02
03540     03 30 66 F0 | 	shl	local06, #3
03544     F2 3C 02 F6 | 	mov	local12, objptr
03548     35 00 00 FF 
0354c     2C 3C 06 F1 | 	add	local12, ##27180
03550     1E 31 02 F1 | 	add	local06, local12
03554     18 13 02 FB | 	rdlong	arg01, local06
03558     48 3A B0 FD | 	call	#_isdec
0355c     07 FA 65 F7 | 	signx	result1, #7
03560     FD 82 02 F6 | 	mov	local47, result1
03564                 | ' 
03564                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03564                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03564     00 7E 0E F2 | 	cmp	local45, #0 wz
03568     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0356c     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03570     14 2D 02 56 |  if_ne	mov	local04, local02
03574     16 2B 02 56 |  if_ne	mov	local03, local04
03578     15 39 02 56 |  if_ne	mov	local10, local03
0357c     03 38 66 50 |  if_ne	shl	local10, #3
03580     F2 2E 02 56 |  if_ne	mov	local05, objptr
03584     35 00 00 5F 
03588     2C 2E 06 51 |  if_ne	add	local05, ##27180
0358c     17 39 02 51 |  if_ne	add	local10, local05
03590     04 38 06 51 |  if_ne	add	local10, #4
03594     01 00 80 5F 
03598     1C 01 68 5C |  if_ne	wrlong	##512, local10
0359c     A4 01 90 5D |  if_ne	jmp	#LR__0166
035a0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
035a0     00 7E 0E F2 | 	cmp	local45, #0 wz
035a4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035a8     41 2D 22 56 |  if_ne	not	local04, local47
035ac     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
035b0     14 2D 02 56 |  if_ne	mov	local04, local02
035b4     16 2B 02 56 |  if_ne	mov	local03, local04
035b8     15 39 02 56 |  if_ne	mov	local10, local03
035bc     03 38 66 50 |  if_ne	shl	local10, #3
035c0     F2 2E 02 56 |  if_ne	mov	local05, objptr
035c4     35 00 00 5F 
035c8     2C 2E 06 51 |  if_ne	add	local05, ##27180
035cc     17 39 02 51 |  if_ne	add	local10, local05
035d0     04 38 06 51 |  if_ne	add	local10, #4
035d4     01 00 80 5F 
035d8     1C 03 68 5C |  if_ne	wrlong	##513, local10
035dc     64 01 90 5D |  if_ne	jmp	#LR__0166
035e0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
035e0     00 7E 0E F2 | 	cmp	local45, #0 wz
035e4     40 2D 22 56 |  if_ne	not	local04, local46
035e8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
035ec     41 2B 22 56 |  if_ne	not	local03, local47
035f0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
035f4     14 2D 02 56 |  if_ne	mov	local04, local02
035f8     16 2B 02 56 |  if_ne	mov	local03, local04
035fc     15 39 02 56 |  if_ne	mov	local10, local03
03600     03 38 66 50 |  if_ne	shl	local10, #3
03604     F2 2E 02 56 |  if_ne	mov	local05, objptr
03608     35 00 00 5F 
0360c     2C 2E 06 51 |  if_ne	add	local05, ##27180
03610     17 39 02 51 |  if_ne	add	local10, local05
03614     04 38 06 51 |  if_ne	add	local10, #4
03618     01 00 80 5F 
0361c     1C 05 68 5C |  if_ne	wrlong	##514, local10
03620     20 01 90 5D |  if_ne	jmp	#LR__0166
03624                 | ' 
03624                 | ' if isstring(lparts(i).part$) then 
03624     14 2F 02 F6 | 	mov	local05, local02
03628     03 2E 66 F0 | 	shl	local05, #3
0362c     F2 30 02 F6 | 	mov	local06, objptr
03630     35 00 00 FF 
03634     2C 30 06 F1 | 	add	local06, ##27180
03638     18 2F 02 F1 | 	add	local05, local06
0363c     17 13 02 FB | 	rdlong	arg01, local05
03640     20 3A B0 FD | 	call	#_isstring
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     A4 00 90 AD |  if_e	jmp	#LR__0165
0364c     14 39 02 F6 | 	mov	local10, local02
03650     03 38 66 F0 | 	shl	local10, #3
03654     35 00 00 FF 
03658     2C E4 05 F1 | 	add	objptr, ##27180
0365c     F2 38 02 F1 | 	add	local10, objptr
03660     04 38 06 F1 | 	add	local10, #4
03664     01 00 80 FF 
03668     1C 07 68 FC | 	wrlong	##515, local10
0366c     14 2D 02 F6 | 	mov	local04, local02
03670     16 2B 02 F6 | 	mov	local03, local04
03674     15 39 02 F6 | 	mov	local10, local03
03678     03 38 66 F0 | 	shl	local10, #3
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     14 41 02 F6 | 	mov	local14, local02
03684     03 40 66 F0 | 	shl	local14, #3
03688     F2 40 02 F1 | 	add	local14, objptr
0368c     20 31 02 FB | 	rdlong	local06, local14
03690     02 3C 06 F6 | 	mov	local12, #2
03694     14 53 02 F6 | 	mov	local23, local02
03698     03 52 66 F0 | 	shl	local23, #3
0369c     F2 54 02 F6 | 	mov	local24, objptr
036a0     F2 52 02 F1 | 	add	local23, objptr
036a4     29 13 02 FB | 	rdlong	arg01, local23
036a8     35 00 00 FF 
036ac     2C E4 85 F1 | 	sub	objptr, ##27180
036b0     09 33 02 F6 | 	mov	local07, arg01
036b4     97 06 48 FB | 	callpa	#(@LR__0164-@LR__0163)>>2,fcache_load_ptr_
036b8                 | LR__0163
036b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
036bc     01 32 06 51 |  if_ne	add	local07, #1
036c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0163
036c4                 | LR__0164
036c4     09 33 82 F1 | 	sub	local07, arg01
036c8     19 3F 02 F6 | 	mov	local13, local07
036cc     1F 41 02 F6 | 	mov	local14, local13
036d0     02 40 86 F1 | 	sub	local14, #2
036d4     20 3B 02 F6 | 	mov	local11, local14
036d8     18 13 02 F6 | 	mov	arg01, local06
036dc     1E 15 02 F6 | 	mov	arg02, local12
036e0     1D 17 02 F6 | 	mov	arg03, local11
036e4     98 2E B2 FD | 	call	#__system__Mid_S
036e8     1C FB 61 FC | 	wrlong	result1, local10
036ec     54 00 90 FD | 	jmp	#LR__0166
036f0                 | LR__0165
036f0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
036f0     14 2B 02 F6 | 	mov	local03, local02
036f4     15 2F 02 F6 | 	mov	local05, local03
036f8     03 2E 66 F0 | 	shl	local05, #3
036fc     F2 30 02 F6 | 	mov	local06, objptr
03700     35 00 00 FF 
03704     2C 30 06 F1 | 	add	local06, ##27180
03708     18 2F 02 F1 | 	add	local05, local06
0370c     17 13 02 FB | 	rdlong	arg01, local05
03710     8C 2F B0 FD | 	call	#_isname
03714     FD 2C 0A F6 | 	mov	local04, result1 wz
03718     14 2D 02 56 |  if_ne	mov	local04, local02
0371c     16 2B 02 56 |  if_ne	mov	local03, local04
03720     15 39 02 56 |  if_ne	mov	local10, local03
03724     03 38 66 50 |  if_ne	shl	local10, #3
03728     F2 2E 02 56 |  if_ne	mov	local05, objptr
0372c     35 00 00 5F 
03730     2C 2E 06 51 |  if_ne	add	local05, ##27180
03734     17 39 02 51 |  if_ne	add	local10, local05
03738     04 38 06 51 |  if_ne	add	local10, #4
0373c     01 00 80 5F 
03740     1C 09 68 5C |  if_ne	wrlong	##516, local10
03744                 | LR__0166
03744     01 28 06 F1 | 	add	local02, #1
03748     B4 F8 9F FD | 	jmp	#LR__0159
0374c                 | LR__0167
0374c     23 39 02 F6 | 	mov	local10, local17
03750     03 38 66 F0 | 	shl	local10, #3
03754     35 00 00 FF 
03758     2C E4 05 F1 | 	add	objptr, ##27180
0375c     F2 38 02 F1 | 	add	local10, objptr
03760     04 38 06 F1 | 	add	local10, #4
03764     1C FD 6B FC | 	wrlong	#510, local10
03768     23 39 02 F6 | 	mov	local10, local17
0376c     03 38 66 F0 | 	shl	local10, #3
03770     F2 2E 02 F6 | 	mov	local05, objptr
03774     F2 38 02 F1 | 	add	local10, objptr
03778     8E 01 00 FF 
0377c     57 30 06 F6 | 	mov	local06, ##@LR__5149
03780     1C 31 62 FC | 	wrlong	local06, local10
03784     10 00 00 FF 
03788     54 E4 05 F1 | 	add	objptr, ##8276
0378c     F2 46 62 FC | 	wrlong	local17, objptr
03790     45 00 00 FF 
03794     80 E4 85 F1 | 	sub	objptr, ##35456
03798                 | ' 
03798                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03798                 | ' 
03798                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03798                 | '  
03798                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03798     8E 01 00 FF 
0379c     58 14 06 F6 | 	mov	arg02, ##@LR__5150
037a0     3B 13 02 F6 | 	mov	arg01, local41
037a4     28 19 B2 FD | 	call	#__system___string_cmp
037a8     00 FA 0D F2 | 	cmp	result1, #0 wz
037ac     F0 00 90 AD |  if_e	jmp	#LR__0168
037b0     8E 01 00 FF 
037b4     5D 14 06 F6 | 	mov	arg02, ##@LR__5151
037b8     3B 13 02 F6 | 	mov	arg01, local41
037bc     10 19 B2 FD | 	call	#__system___string_cmp
037c0     00 FA 0D F2 | 	cmp	result1, #0 wz
037c4     D8 00 90 AD |  if_e	jmp	#LR__0168
037c8     8E 01 00 FF 
037cc     62 30 06 F6 | 	mov	local06, ##@LR__5152
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     18 15 02 F6 | 	mov	arg02, local06
037d8     F4 18 B2 FD | 	call	#__system___string_cmp
037dc     00 FA 0D F2 | 	cmp	result1, #0 wz
037e0     BC 00 90 AD |  if_e	jmp	#LR__0168
037e4     8E 01 00 FF 
037e8     67 3C 06 F6 | 	mov	local12, ##@LR__5153
037ec     1E 31 02 F6 | 	mov	local06, local12
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     18 15 02 F6 | 	mov	arg02, local06
037f8     D4 18 B2 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     9C 00 90 AD |  if_e	jmp	#LR__0168
03804     8E 01 00 FF 
03808     6B 3A 06 F6 | 	mov	local11, ##@LR__5154
0380c     1D 3D 02 F6 | 	mov	local12, local11
03810     3B 13 02 F6 | 	mov	arg01, local41
03814     1E 15 02 F6 | 	mov	arg02, local12
03818     B4 18 B2 FD | 	call	#__system___string_cmp
0381c     FD 30 0A F6 | 	mov	local06, result1 wz
03820     7C 00 90 AD |  if_e	jmp	#LR__0168
03824     8E 01 00 FF 
03828     6F 40 06 F6 | 	mov	local14, ##@LR__5155
0382c     20 3B 02 F6 | 	mov	local11, local14
03830     3B 13 02 F6 | 	mov	arg01, local41
03834     1D 15 02 F6 | 	mov	arg02, local11
03838     94 18 B2 FD | 	call	#__system___string_cmp
0383c     FD 3C 0A F6 | 	mov	local12, result1 wz
03840     5C 00 90 AD |  if_e	jmp	#LR__0168
03844     8E 01 00 FF 
03848     72 3E 06 F6 | 	mov	local13, ##@LR__5156
0384c     1F 41 02 F6 | 	mov	local14, local13
03850     3B 13 02 F6 | 	mov	arg01, local41
03854     20 15 02 F6 | 	mov	arg02, local14
03858     74 18 B2 FD | 	call	#__system___string_cmp
0385c     FD 3A 0A F6 | 	mov	local11, result1 wz
03860     3C 00 90 AD |  if_e	jmp	#LR__0168
03864     8E 01 00 FF 
03868     76 3E 06 F6 | 	mov	local13, ##@LR__5157
0386c     3B 13 02 F6 | 	mov	arg01, local41
03870     1F 15 02 F6 | 	mov	arg02, local13
03874     58 18 B2 FD | 	call	#__system___string_cmp
03878     FD 40 0A F6 | 	mov	local14, result1 wz
0387c     20 00 90 AD |  if_e	jmp	#LR__0168
03880     8E 01 00 FF 
03884     7C 50 06 F6 | 	mov	local22, ##@LR__5158
03888     28 5D 02 F6 | 	mov	local28, local22
0388c     3B 13 02 F6 | 	mov	arg01, local41
03890     2E 15 02 F6 | 	mov	arg02, local28
03894     38 18 B2 FD | 	call	#__system___string_cmp
03898     FD 3E 0A F6 | 	mov	local13, result1 wz
0389c     B4 00 90 5D |  if_ne	jmp	#LR__0169
038a0                 | LR__0168
038a0     37 5D 02 F6 | 	mov	local28, local37
038a4     01 5C 06 F1 | 	add	local28, #1
038a8     2E 51 02 F6 | 	mov	local22, local28
038ac     28 53 02 F6 | 	mov	local23, local22
038b0     03 52 66 F0 | 	shl	local23, #3
038b4     F2 54 02 F6 | 	mov	local24, objptr
038b8     35 00 00 FF 
038bc     2C 54 06 F1 | 	add	local24, ##27180
038c0     2A 53 02 F1 | 	add	local23, local24
038c4     04 52 06 F1 | 	add	local23, #4
038c8     29 61 02 FB | 	rdlong	local30, local23
038cc     04 52 86 F1 | 	sub	local23, #4
038d0     30 5F 02 F6 | 	mov	local29, local30
038d4     01 00 00 FF 
038d8     04 5E 0E F2 | 	cmp	local29, ##516 wz
038dc     74 00 90 5D |  if_ne	jmp	#LR__0169
038e0     37 85 02 F6 | 	mov	local48, local37
038e4     01 84 06 F1 | 	add	local48, #1
038e8     03 84 66 F0 | 	shl	local48, #3
038ec     F2 86 02 F6 | 	mov	local49, objptr
038f0     35 00 00 FF 
038f4     2C 86 06 F1 | 	add	local49, ##27180
038f8     43 85 02 F1 | 	add	local48, local49
038fc     42 13 02 FB | 	rdlong	arg01, local48
03900     01 14 06 F6 | 	mov	arg02, #1
03904     EC 2B B2 FD | 	call	#__system__Right_S
03908     FD 12 02 F6 | 	mov	arg01, result1
0390c     8E 01 00 FF 
03910     7F 88 06 F6 | 	mov	local50, ##@LR__5159
03914     44 8B 02 F6 | 	mov	local51, local50
03918     45 15 02 F6 | 	mov	arg02, local51
0391c     B0 17 B2 FD | 	call	#__system___string_cmp
03920     FD 62 0A F6 | 	mov	local31, result1 wz
03924     37 39 02 56 |  if_ne	mov	local10, local37
03928     01 38 06 51 |  if_ne	add	local10, #1
0392c     03 38 66 50 |  if_ne	shl	local10, #3
03930     F2 2E 02 56 |  if_ne	mov	local05, objptr
03934     35 00 00 5F 
03938     2C 2E 06 51 |  if_ne	add	local05, ##27180
0393c     17 39 02 51 |  if_ne	add	local10, local05
03940     01 00 00 5F 
03944     03 30 06 56 |  if_ne	mov	local06, ##515
03948     04 38 06 51 |  if_ne	add	local10, #4
0394c     01 00 80 5F 
03950     1C 07 68 5C |  if_ne	wrlong	##515, local10
03954                 | LR__0169
03954                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03954     8E 01 00 FF 
03958     81 14 06 F6 | 	mov	arg02, ##@LR__5160
0395c     3B 13 02 F6 | 	mov	arg01, local41
03960     6C 17 B2 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     1C 00 90 AD |  if_e	jmp	#LR__0170
0396c     8E 01 00 FF 
03970     88 2E 06 F6 | 	mov	local05, ##@LR__5161
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     17 15 02 F6 | 	mov	arg02, local05
0397c     50 17 B2 FD | 	call	#__system___string_cmp
03980     00 FA 0D F2 | 	cmp	result1, #0 wz
03984     B0 00 90 5D |  if_ne	jmp	#LR__0171
03988                 | LR__0170
03988     37 2F 02 F6 | 	mov	local05, local37
0398c     01 2E 06 F1 | 	add	local05, #1
03990     17 31 02 F6 | 	mov	local06, local05
03994     03 30 66 F0 | 	shl	local06, #3
03998     F2 3C 02 F6 | 	mov	local12, objptr
0399c     35 00 00 FF 
039a0     2C 3C 06 F1 | 	add	local12, ##27180
039a4     1E 31 02 F1 | 	add	local06, local12
039a8     04 30 06 F1 | 	add	local06, #4
039ac     18 41 02 FB | 	rdlong	local14, local06
039b0     04 30 86 F1 | 	sub	local06, #4
039b4     20 3B 02 F6 | 	mov	local11, local14
039b8     01 00 00 FF 
039bc     04 3A 0E F2 | 	cmp	local11, ##516 wz
039c0     74 00 90 5D |  if_ne	jmp	#LR__0171
039c4     37 53 02 F6 | 	mov	local23, local37
039c8     01 52 06 F1 | 	add	local23, #1
039cc     03 52 66 F0 | 	shl	local23, #3
039d0     F2 54 02 F6 | 	mov	local24, objptr
039d4     35 00 00 FF 
039d8     2C 54 06 F1 | 	add	local24, ##27180
039dc     2A 53 02 F1 | 	add	local23, local24
039e0     29 13 02 FB | 	rdlong	arg01, local23
039e4     01 14 06 F6 | 	mov	arg02, #1
039e8     08 2B B2 FD | 	call	#__system__Right_S
039ec     FD 12 02 F6 | 	mov	arg01, result1
039f0     8E 01 00 FF 
039f4     8E 50 06 F6 | 	mov	local22, ##@LR__5162
039f8     28 5D 02 F6 | 	mov	local28, local22
039fc     2E 15 02 F6 | 	mov	arg02, local28
03a00     CC 16 B2 FD | 	call	#__system___string_cmp
03a04     FD 3E 0A F6 | 	mov	local13, result1 wz
03a08     37 39 02 56 |  if_ne	mov	local10, local37
03a0c     01 38 06 51 |  if_ne	add	local10, #1
03a10     03 38 66 50 |  if_ne	shl	local10, #3
03a14     F2 2E 02 56 |  if_ne	mov	local05, objptr
03a18     35 00 00 5F 
03a1c     2C 2E 06 51 |  if_ne	add	local05, ##27180
03a20     17 39 02 51 |  if_ne	add	local10, local05
03a24     01 00 00 5F 
03a28     03 30 06 56 |  if_ne	mov	local06, ##515
03a2c     04 38 06 51 |  if_ne	add	local10, #4
03a30     01 00 80 5F 
03a34     1C 07 68 5C |  if_ne	wrlong	##515, local10
03a38                 | LR__0171
03a38                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a38     8E 01 00 FF 
03a3c     90 14 06 F6 | 	mov	arg02, ##@LR__5163
03a40     3B 13 02 F6 | 	mov	arg01, local41
03a44     88 16 B2 FD | 	call	#__system___string_cmp
03a48     00 FA 0D F2 | 	cmp	result1, #0 wz
03a4c     AC 00 90 5D |  if_ne	jmp	#LR__0172
03a50     37 2F 02 F6 | 	mov	local05, local37
03a54     01 2E 06 F1 | 	add	local05, #1
03a58     03 2E 66 F0 | 	shl	local05, #3
03a5c     F2 30 02 F6 | 	mov	local06, objptr
03a60     35 00 00 FF 
03a64     2C 30 06 F1 | 	add	local06, ##27180
03a68     18 2F 02 F1 | 	add	local05, local06
03a6c     04 2E 06 F1 | 	add	local05, #4
03a70     17 3B 02 FB | 	rdlong	local11, local05
03a74     04 2E 86 F1 | 	sub	local05, #4
03a78     1D 3D 02 F6 | 	mov	local12, local11
03a7c     01 00 00 FF 
03a80     04 3C 0E F2 | 	cmp	local12, ##516 wz
03a84     74 00 90 5D |  if_ne	jmp	#LR__0172
03a88     37 51 02 F6 | 	mov	local22, local37
03a8c     01 50 06 F1 | 	add	local22, #1
03a90     03 50 66 F0 | 	shl	local22, #3
03a94     F2 52 02 F6 | 	mov	local23, objptr
03a98     35 00 00 FF 
03a9c     2C 52 06 F1 | 	add	local23, ##27180
03aa0     29 51 02 F1 | 	add	local22, local23
03aa4     28 13 02 FB | 	rdlong	arg01, local22
03aa8     01 14 06 F6 | 	mov	arg02, #1
03aac     44 2A B2 FD | 	call	#__system__Right_S
03ab0     FD 12 02 F6 | 	mov	arg01, result1
03ab4     8E 01 00 FF 
03ab8     95 5C 06 F6 | 	mov	local28, ##@LR__5164
03abc     2E 3F 02 F6 | 	mov	local13, local28
03ac0     1F 15 02 F6 | 	mov	arg02, local13
03ac4     08 16 B2 FD | 	call	#__system___string_cmp
03ac8     FD 40 0A F6 | 	mov	local14, result1 wz
03acc     37 39 02 56 |  if_ne	mov	local10, local37
03ad0     01 38 06 51 |  if_ne	add	local10, #1
03ad4     03 38 66 50 |  if_ne	shl	local10, #3
03ad8     F2 2E 02 56 |  if_ne	mov	local05, objptr
03adc     35 00 00 5F 
03ae0     2C 2E 06 51 |  if_ne	add	local05, ##27180
03ae4     17 39 02 51 |  if_ne	add	local10, local05
03ae8     01 00 00 5F 
03aec     03 30 06 56 |  if_ne	mov	local06, ##515
03af0     04 38 06 51 |  if_ne	add	local10, #4
03af4     01 00 80 5F 
03af8     1C 07 68 5C |  if_ne	wrlong	##515, local10
03afc                 | LR__0172
03afc                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03afc     8E 01 00 FF 
03b00     97 14 06 F6 | 	mov	arg02, ##@LR__5165
03b04     3B 13 02 F6 | 	mov	arg01, local41
03b08     C4 15 B2 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     AC 00 90 5D |  if_ne	jmp	#LR__0173
03b14     37 2F 02 F6 | 	mov	local05, local37
03b18     03 2E 06 F1 | 	add	local05, #3
03b1c     03 2E 66 F0 | 	shl	local05, #3
03b20     F2 30 02 F6 | 	mov	local06, objptr
03b24     35 00 00 FF 
03b28     2C 30 06 F1 | 	add	local06, ##27180
03b2c     18 2F 02 F1 | 	add	local05, local06
03b30     04 2E 06 F1 | 	add	local05, #4
03b34     17 3B 02 FB | 	rdlong	local11, local05
03b38     04 2E 86 F1 | 	sub	local05, #4
03b3c     1D 3D 02 F6 | 	mov	local12, local11
03b40     01 00 00 FF 
03b44     04 3C 0E F2 | 	cmp	local12, ##516 wz
03b48     74 00 90 5D |  if_ne	jmp	#LR__0173
03b4c     37 51 02 F6 | 	mov	local22, local37
03b50     03 50 06 F1 | 	add	local22, #3
03b54     03 50 66 F0 | 	shl	local22, #3
03b58     F2 52 02 F6 | 	mov	local23, objptr
03b5c     35 00 00 FF 
03b60     2C 52 06 F1 | 	add	local23, ##27180
03b64     29 51 02 F1 | 	add	local22, local23
03b68     28 13 02 FB | 	rdlong	arg01, local22
03b6c     01 14 06 F6 | 	mov	arg02, #1
03b70     80 29 B2 FD | 	call	#__system__Right_S
03b74     FD 12 02 F6 | 	mov	arg01, result1
03b78     8E 01 00 FF 
03b7c     9C 5C 06 F6 | 	mov	local28, ##@LR__5166
03b80     2E 3F 02 F6 | 	mov	local13, local28
03b84     1F 15 02 F6 | 	mov	arg02, local13
03b88     44 15 B2 FD | 	call	#__system___string_cmp
03b8c     FD 40 0A F6 | 	mov	local14, result1 wz
03b90     37 39 02 56 |  if_ne	mov	local10, local37
03b94     03 38 06 51 |  if_ne	add	local10, #3
03b98     03 38 66 50 |  if_ne	shl	local10, #3
03b9c     F2 2E 02 56 |  if_ne	mov	local05, objptr
03ba0     35 00 00 5F 
03ba4     2C 2E 06 51 |  if_ne	add	local05, ##27180
03ba8     17 39 02 51 |  if_ne	add	local10, local05
03bac     01 00 00 5F 
03bb0     03 30 06 56 |  if_ne	mov	local06, ##515
03bb4     04 38 06 51 |  if_ne	add	local10, #4
03bb8     01 00 80 5F 
03bbc     1C 07 68 5C |  if_ne	wrlong	##515, local10
03bc0                 | LR__0173
03bc0                 | ' 
03bc0                 | ' ' cd needs special treatment..
03bc0                 | ' 
03bc0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03bc0     8E 01 00 FF 
03bc4     9E 14 06 F6 | 	mov	arg02, ##@LR__5167
03bc8     3B 13 02 F6 | 	mov	arg01, local41
03bcc     00 15 B2 FD | 	call	#__system___string_cmp
03bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd4     37 39 02 A6 |  if_e	mov	local10, local37
03bd8     01 38 06 A1 |  if_e	add	local10, #1
03bdc     03 38 66 A0 |  if_e	shl	local10, #3
03be0     F2 2E 02 A6 |  if_e	mov	local05, objptr
03be4     35 00 00 AF 
03be8     2C 2E 06 A1 |  if_e	add	local05, ##27180
03bec     17 39 02 A1 |  if_e	add	local10, local05
03bf0     01 00 00 AF 
03bf4     03 30 06 A6 |  if_e	mov	local06, ##515
03bf8     04 38 06 A1 |  if_e	add	local10, #4
03bfc     01 00 80 AF 
03c00     1C 07 68 AC |  if_e	wrlong	##515, local10
03c04                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03c04     8E 01 00 FF 
03c08     A1 14 06 F6 | 	mov	arg02, ##@LR__5168
03c0c     3B 13 02 F6 | 	mov	arg01, local41
03c10     BC 14 B2 FD | 	call	#__system___string_cmp
03c14     00 FA 0D F2 | 	cmp	result1, #0 wz
03c18     9C 00 90 5D |  if_ne	jmp	#LR__0174
03c1c     37 31 02 F6 | 	mov	local06, local37
03c20     01 30 06 F1 | 	add	local06, #1
03c24     03 30 66 F0 | 	shl	local06, #3
03c28     F2 3C 02 F6 | 	mov	local12, objptr
03c2c     35 00 00 FF 
03c30     2C 3C 06 F1 | 	add	local12, ##27180
03c34     1E 31 02 F1 | 	add	local06, local12
03c38     18 13 02 FB | 	rdlong	arg01, local06
03c3c     8E 01 00 FF 
03c40     A5 2E 06 F6 | 	mov	local05, ##@LR__5169
03c44     17 15 02 F6 | 	mov	arg02, local05
03c48     84 14 B2 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     64 00 90 5D |  if_ne	jmp	#LR__0174
03c54     37 39 02 F6 | 	mov	local10, local37
03c58     01 38 06 F1 | 	add	local10, #1
03c5c     03 38 66 F0 | 	shl	local10, #3
03c60     35 00 00 FF 
03c64     2C E4 05 F1 | 	add	objptr, ##27180
03c68     F2 38 02 F1 | 	add	local10, objptr
03c6c     04 38 06 F1 | 	add	local10, #4
03c70     01 00 80 FF 
03c74     1C 07 68 FC | 	wrlong	##515, local10
03c78     37 39 02 F6 | 	mov	local10, local37
03c7c     01 38 06 F1 | 	add	local10, #1
03c80     03 38 66 F0 | 	shl	local10, #3
03c84     F2 38 02 F1 | 	add	local10, objptr
03c88     8E 01 00 FF 
03c8c     A7 30 06 F6 | 	mov	local06, ##@LR__5170
03c90     1C 31 62 FC | 	wrlong	local06, local10
03c94     37 39 02 F6 | 	mov	local10, local37
03c98     03 38 66 F0 | 	shl	local10, #3
03c9c     F2 2E 02 F6 | 	mov	local05, objptr
03ca0     F2 38 02 F1 | 	add	local10, objptr
03ca4     C3 30 06 F6 | 	mov	local06, #195
03ca8     04 38 06 F1 | 	add	local10, #4
03cac     1C 87 69 FC | 	wrlong	#195, local10
03cb0     35 00 00 FF 
03cb4     2C E4 85 F1 | 	sub	objptr, ##27180
03cb8                 | LR__0174
03cb8                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03cb8     8E 01 00 FF 
03cbc     AA 38 06 F6 | 	mov	local10, ##@LR__5171
03cc0     3B 13 02 F6 | 	mov	arg01, local41
03cc4     1C 15 02 F6 | 	mov	arg02, local10
03cc8     04 14 B2 FD | 	call	#__system___string_cmp
03ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd0     F4 00 90 5D |  if_ne	jmp	#LR__0177
03cd4     37 31 02 F6 | 	mov	local06, local37
03cd8     01 30 06 F1 | 	add	local06, #1
03cdc     03 30 66 F0 | 	shl	local06, #3
03ce0     F2 3C 02 F6 | 	mov	local12, objptr
03ce4     35 00 00 FF 
03ce8     2C 3C 06 F1 | 	add	local12, ##27180
03cec     1E 31 02 F1 | 	add	local06, local12
03cf0     18 13 02 FB | 	rdlong	arg01, local06
03cf4     8E 01 00 FF 
03cf8     AD 2E 06 F6 | 	mov	local05, ##@LR__5172
03cfc     17 39 02 F6 | 	mov	local10, local05
03d00     1C 15 02 F6 | 	mov	arg02, local10
03d04     C8 13 B2 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     B8 00 90 5D |  if_ne	jmp	#LR__0177
03d10     37 39 02 F6 | 	mov	local10, local37
03d14     01 38 06 F1 | 	add	local10, #1
03d18     03 38 66 F0 | 	shl	local10, #3
03d1c     F2 2E 02 F6 | 	mov	local05, objptr
03d20     35 00 00 FF 
03d24     2C 2E 06 F1 | 	add	local05, ##27180
03d28     17 39 02 F1 | 	add	local10, local05
03d2c     01 00 00 FF 
03d30     03 30 06 F6 | 	mov	local06, ##515
03d34     04 38 06 F1 | 	add	local10, #4
03d38     01 00 80 FF 
03d3c     1C 07 68 FC | 	wrlong	##515, local10
03d40     04 38 86 F1 | 	sub	local10, #4
03d44     37 29 02 F6 | 	mov	local02, local37
03d48     02 28 06 F1 | 	add	local02, #2
03d4c     23 8D 02 F6 | 	mov	local52, local17
03d50     01 8C 06 F1 | 	add	local52, #1
03d54                 | LR__0175
03d54     46 29 52 F2 | 	cmps	local02, local52 wc
03d58     6C 00 90 3D |  if_ae	jmp	#LR__0176
03d5c     37 39 02 F6 | 	mov	local10, local37
03d60     01 38 06 F1 | 	add	local10, #1
03d64     03 38 66 F0 | 	shl	local10, #3
03d68     35 00 00 FF 
03d6c     2C E4 05 F1 | 	add	objptr, ##27180
03d70     F2 2E 02 F6 | 	mov	local05, objptr
03d74     F2 38 02 F1 | 	add	local10, objptr
03d78     37 41 02 F6 | 	mov	local14, local37
03d7c     01 40 06 F1 | 	add	local14, #1
03d80     03 40 66 F0 | 	shl	local14, #3
03d84     F2 40 02 F1 | 	add	local14, objptr
03d88     20 13 02 FB | 	rdlong	arg01, local14
03d8c     14 3B 02 F6 | 	mov	local11, local02
03d90     1D 41 02 F6 | 	mov	local14, local11
03d94     20 3F 02 F6 | 	mov	local13, local14
03d98     03 3E 66 F0 | 	shl	local13, #3
03d9c     F2 5C 02 F6 | 	mov	local28, objptr
03da0     F2 3E 02 F1 | 	add	local13, objptr
03da4     1F 3D 02 FB | 	rdlong	local12, local13
03da8     1E 15 02 F6 | 	mov	arg02, local12
03dac     35 00 00 FF 
03db0     2C E4 85 F1 | 	sub	objptr, ##27180
03db4     4C 13 B2 FD | 	call	#__system___string_concat
03db8     FD 30 02 F6 | 	mov	local06, result1
03dbc     1C 31 62 FC | 	wrlong	local06, local10
03dc0     01 28 06 F1 | 	add	local02, #1
03dc4     8C FF 9F FD | 	jmp	#LR__0175
03dc8                 | LR__0176
03dc8                 | LR__0177
03dc8                 | ' 
03dc8                 | ' ' determine a type of the line and compile it
03dc8                 | ' 
03dc8                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03dc8     35 00 00 FF 
03dcc     2C E4 05 F1 | 	add	objptr, ##27180
03dd0     F2 12 02 FB | 	rdlong	arg01, objptr
03dd4     35 00 00 FF 
03dd8     2C E4 85 F1 | 	sub	objptr, ##27180
03ddc     C4 31 B0 FD | 	call	#_isdec
03de0     00 FA 0D F2 | 	cmp	result1, #0 wz
03de4     30 00 90 AD |  if_e	jmp	#LR__0178
03de8     35 00 00 FF 
03dec     2C E4 05 F1 | 	add	objptr, ##27180
03df0     F2 12 02 FB | 	rdlong	arg01, objptr
03df4     35 00 00 FF 
03df8     2C E4 85 F1 | 	sub	objptr, ##27180
03dfc     00 14 06 F6 | 	mov	arg02, #0
03e00     9C 37 B2 FD | 	call	#__system____builtin_atoi
03e04     52 00 00 FF 
03e08     08 E5 05 F1 | 	add	objptr, ##42248
03e0c     F2 FA 61 FC | 	wrlong	result1, objptr
03e10     52 00 00 FF 
03e14     08 E5 85 F1 | 	sub	objptr, ##42248
03e18                 | LR__0178
03e18                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03e18     52 00 00 FF 
03e1c     08 E5 05 F1 | 	add	objptr, ##42248
03e20     F2 2C 02 FB | 	rdlong	local04, objptr
03e24     52 00 00 FF 
03e28     08 E5 85 F1 | 	sub	objptr, ##42248
03e2c     01 2C 16 F2 | 	cmp	local04, #1 wc
03e30     40 00 90 CD |  if_b	jmp	#LR__0179
03e34     01 46 0E F2 | 	cmp	local17, #1 wz
03e38     37 00 00 AF 
03e3c     44 E4 05 A1 |  if_e	add	objptr, ##28228
03e40     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03e44     37 00 00 AF 
03e48     44 E4 85 A1 |  if_e	sub	objptr, ##28228
03e4c     17 39 02 A6 |  if_e	mov	local10, local05
03e50     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03e54     1C 00 90 5D |  if_ne	jmp	#LR__0179
03e58     52 00 00 FF 
03e5c     08 E5 05 F1 | 	add	objptr, ##42248
03e60     F2 12 02 FB | 	rdlong	arg01, objptr
03e64     52 00 00 FF 
03e68     08 E5 85 F1 | 	sub	objptr, ##42248
03e6c     DC 32 B0 FD | 	call	#_deleteline
03e70     C4 03 90 FD | 	jmp	#LR__0188
03e74                 | LR__0179
03e74                 | ' 
03e74                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03e74     37 00 00 FF 
03e78     44 E4 05 F1 | 	add	objptr, ##28228
03e7c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e80     37 00 00 FF 
03e84     44 E4 85 F1 | 	sub	objptr, ##28228
03e88     37 00 00 5F 
03e8c     44 E4 05 51 |  if_ne	add	objptr, ##28228
03e90     F2 2E 02 5B |  if_ne	rdlong	local05, objptr
03e94     37 00 00 5F 
03e98     44 E4 85 51 |  if_ne	sub	objptr, ##28228
03e9c     17 39 02 56 |  if_ne	mov	local10, local05
03ea0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03ea4     C0 00 90 5D |  if_ne	jmp	#LR__0181
03ea8     35 00 00 FF 
03eac     40 E4 05 F1 | 	add	objptr, ##27200
03eb0     F2 3C 02 FB | 	rdlong	local12, objptr
03eb4     35 00 00 FF 
03eb8     40 E4 85 F1 | 	sub	objptr, ##27200
03ebc     1B 3C 0E F2 | 	cmp	local12, #27 wz
03ec0     A4 00 90 AD |  if_e	jmp	#LR__0181
03ec4     52 00 00 FF 
03ec8     08 E5 05 F1 | 	add	objptr, ##42248
03ecc     F2 12 02 FB | 	rdlong	arg01, objptr
03ed0     1B 00 00 FF 
03ed4     C4 E4 85 F1 | 	sub	objptr, ##14020
03ed8     F2 16 02 FB | 	rdlong	arg03, objptr
03edc     37 00 00 FF 
03ee0     44 E4 85 F1 | 	sub	objptr, ##28228
03ee4     00 14 06 F6 | 	mov	arg02, #0
03ee8     30 46 B0 FD | 	call	#_compile
03eec     FD 26 0A F6 | 	mov	local01, result1 wz
03ef0                 | '   err=compile(linenum,0,cont) 
03ef0                 | '   if err<>0 then printerror(err,linenum): goto 101
03ef0     20 00 90 AD |  if_e	jmp	#LR__0180
03ef4     52 00 00 FF 
03ef8     08 E5 05 F1 | 	add	objptr, ##42248
03efc     F2 14 02 FB | 	rdlong	arg02, objptr
03f00     52 00 00 FF 
03f04     08 E5 85 F1 | 	sub	objptr, ##42248
03f08     13 13 02 F6 | 	mov	arg01, local01
03f0c     10 BD B1 FD | 	call	#_printerror
03f10     44 03 90 FD | 	jmp	#LR__0189
03f14                 | LR__0180
03f14                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03f14     52 00 00 FF 
03f18     4C E5 05 F1 | 	add	objptr, ##42316
03f1c     F2 12 02 FB | 	rdlong	arg01, objptr
03f20     52 00 00 FF 
03f24     4C E5 85 F1 | 	sub	objptr, ##42316
03f28     8E 01 00 FF 
03f2c     AF 14 06 F6 | 	mov	arg02, ##@LR__5173
03f30     9C 11 B2 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     52 00 00 5F 
03f3c     4C E5 05 51 |  if_ne	add	objptr, ##42316
03f40     F2 2C 02 5B |  if_ne	rdlong	local04, objptr
03f44     1B 00 00 5F 
03f48     10 E5 85 51 |  if_ne	sub	objptr, ##14096
03f4c     F2 2C 62 5C |  if_ne	wrlong	local04, objptr
03f50     08 E4 05 51 |  if_ne	add	objptr, #8
03f54     F2 08 68 5C |  if_ne	wrlong	#4, objptr
03f58     37 00 00 5F 
03f5c     44 E4 85 51 |  if_ne	sub	objptr, ##28228
03f60     74 D9 9F 5D |  if_ne	jmp	#LR__0070
03f64     D0 02 90 FD | 	jmp	#LR__0188
03f68                 | LR__0181
03f68                 | '       							
03f68                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03f68     37 00 00 FF 
03f6c     44 E4 05 F1 | 	add	objptr, ##28228
03f70     F2 2C 02 FB | 	rdlong	local04, objptr
03f74     37 00 00 FF 
03f78     44 E4 85 F1 | 	sub	objptr, ##28228
03f7c     01 2C 0E F2 | 	cmp	local04, #1 wz
03f80     37 00 00 5F 
03f84     44 E4 05 51 |  if_ne	add	objptr, ##28228
03f88     F2 2E 02 5B |  if_ne	rdlong	local05, objptr
03f8c     37 00 00 5F 
03f90     44 E4 85 51 |  if_ne	sub	objptr, ##28228
03f94     17 39 02 56 |  if_ne	mov	local10, local05
03f98     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f9c     C0 00 90 5D |  if_ne	jmp	#LR__0183
03fa0     35 00 00 FF 
03fa4     38 E4 05 F1 | 	add	objptr, ##27192
03fa8     F2 3C 02 FB | 	rdlong	local12, objptr
03fac     35 00 00 FF 
03fb0     38 E4 85 F1 | 	sub	objptr, ##27192
03fb4     1B 3C 0E F2 | 	cmp	local12, #27 wz
03fb8     A4 00 90 AD |  if_e	jmp	#LR__0183
03fbc     52 00 00 FF 
03fc0     08 E5 05 F1 | 	add	objptr, ##42248
03fc4     F2 12 02 FB | 	rdlong	arg01, objptr
03fc8     1B 00 00 FF 
03fcc     C4 E4 85 F1 | 	sub	objptr, ##14020
03fd0     F2 16 02 FB | 	rdlong	arg03, objptr
03fd4     37 00 00 FF 
03fd8     44 E4 85 F1 | 	sub	objptr, ##28228
03fdc     00 14 06 F6 | 	mov	arg02, #0
03fe0     38 45 B0 FD | 	call	#_compile
03fe4     FD 26 0A F6 | 	mov	local01, result1 wz
03fe8                 | '   err=compile(linenum,0,cont) 
03fe8                 | '   if err<>0 then printerror(err,linenum): goto 101
03fe8     20 00 90 AD |  if_e	jmp	#LR__0182
03fec     52 00 00 FF 
03ff0     08 E5 05 F1 | 	add	objptr, ##42248
03ff4     F2 14 02 FB | 	rdlong	arg02, objptr
03ff8     52 00 00 FF 
03ffc     08 E5 85 F1 | 	sub	objptr, ##42248
04000     13 13 02 F6 | 	mov	arg01, local01
04004     18 BC B1 FD | 	call	#_printerror
04008     4C 02 90 FD | 	jmp	#LR__0189
0400c                 | LR__0182
0400c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0400c     52 00 00 FF 
04010     4C E5 05 F1 | 	add	objptr, ##42316
04014     F2 12 02 FB | 	rdlong	arg01, objptr
04018     52 00 00 FF 
0401c     4C E5 85 F1 | 	sub	objptr, ##42316
04020     8E 01 00 FF 
04024     B0 14 06 F6 | 	mov	arg02, ##@LR__5174
04028     A4 10 B2 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     52 00 00 5F 
04034     4C E5 05 51 |  if_ne	add	objptr, ##42316
04038     F2 2C 02 5B |  if_ne	rdlong	local04, objptr
0403c     1B 00 00 5F 
04040     10 E5 85 51 |  if_ne	sub	objptr, ##14096
04044     F2 2C 62 5C |  if_ne	wrlong	local04, objptr
04048     08 E4 05 51 |  if_ne	add	objptr, #8
0404c     F2 08 68 5C |  if_ne	wrlong	#4, objptr
04050     37 00 00 5F 
04054     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04058     7C D8 9F 5D |  if_ne	jmp	#LR__0070
0405c     D8 01 90 FD | 	jmp	#LR__0188
04060                 | LR__0183
04060                 | ' 							 
04060                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
04060     37 00 00 FF 
04064     44 E4 05 F1 | 	add	objptr, ##28228
04068     F2 2C 0A FB | 	rdlong	local04, objptr wz
0406c     37 00 00 FF 
04070     44 E4 85 F1 | 	sub	objptr, ##28228
04074     37 00 00 5F 
04078     44 E4 05 51 |  if_ne	add	objptr, ##28228
0407c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04080     37 00 00 5F 
04084     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04088     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
0408c     35 00 00 AF 
04090     40 E4 05 A1 |  if_e	add	objptr, ##27200
04094     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04098     35 00 00 AF 
0409c     40 E4 85 A1 |  if_e	sub	objptr, ##27200
040a0     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
040a4     A4 00 90 5D |  if_ne	jmp	#LR__0185
040a8     52 00 00 FF 
040ac     08 E5 05 F1 | 	add	objptr, ##42248
040b0     F2 12 02 FB | 	rdlong	arg01, objptr
040b4     1B 00 00 FF 
040b8     C4 E4 85 F1 | 	sub	objptr, ##14020
040bc     F2 16 02 FB | 	rdlong	arg03, objptr
040c0     37 00 00 FF 
040c4     44 E4 85 F1 | 	sub	objptr, ##28228
040c8     00 14 06 F6 | 	mov	arg02, #0
040cc     14 45 B0 FD | 	call	#_compile_assign
040d0     FD 26 0A F6 | 	mov	local01, result1 wz
040d4                 | '   err=compile_assign(linenum,0,cont)
040d4                 | '   if err<>0 then printerror(err,linenum): goto 101
040d4     20 00 90 AD |  if_e	jmp	#LR__0184
040d8     52 00 00 FF 
040dc     08 E5 05 F1 | 	add	objptr, ##42248
040e0     F2 14 02 FB | 	rdlong	arg02, objptr
040e4     52 00 00 FF 
040e8     08 E5 85 F1 | 	sub	objptr, ##42248
040ec     13 13 02 F6 | 	mov	arg01, local01
040f0     2C BB B1 FD | 	call	#_printerror
040f4     60 01 90 FD | 	jmp	#LR__0189
040f8                 | LR__0184
040f8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
040f8     52 00 00 FF 
040fc     4C E5 05 F1 | 	add	objptr, ##42316
04100     F2 12 02 FB | 	rdlong	arg01, objptr
04104     52 00 00 FF 
04108     4C E5 85 F1 | 	sub	objptr, ##42316
0410c     8E 01 00 FF 
04110     B1 14 06 F6 | 	mov	arg02, ##@LR__5175
04114     B8 0F B2 FD | 	call	#__system___string_cmp
04118     00 FA 0D F2 | 	cmp	result1, #0 wz
0411c     52 00 00 5F 
04120     4C E5 05 51 |  if_ne	add	objptr, ##42316
04124     F2 2C 02 5B |  if_ne	rdlong	local04, objptr
04128     1B 00 00 5F 
0412c     10 E5 85 51 |  if_ne	sub	objptr, ##14096
04130     F2 2C 62 5C |  if_ne	wrlong	local04, objptr
04134     08 E4 05 51 |  if_ne	add	objptr, #8
04138     F2 08 68 5C |  if_ne	wrlong	#4, objptr
0413c     37 00 00 5F 
04140     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04144     90 D7 9F 5D |  if_ne	jmp	#LR__0070
04148     EC 00 90 FD | 	jmp	#LR__0188
0414c                 | LR__0185
0414c                 | '     							 
0414c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
0414c     37 00 00 FF 
04150     44 E4 05 F1 | 	add	objptr, ##28228
04154     F2 2C 02 FB | 	rdlong	local04, objptr
04158     37 00 00 FF 
0415c     44 E4 85 F1 | 	sub	objptr, ##28228
04160     01 2C 0E F2 | 	cmp	local04, #1 wz
04164     37 00 00 5F 
04168     44 E4 05 51 |  if_ne	add	objptr, ##28228
0416c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04170     37 00 00 5F 
04174     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04178     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
0417c     35 00 00 AF 
04180     38 E4 05 A1 |  if_e	add	objptr, ##27192
04184     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04188     35 00 00 AF 
0418c     38 E4 85 A1 |  if_e	sub	objptr, ##27192
04190     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04194     A0 00 90 5D |  if_ne	jmp	#LR__0187
04198     52 00 00 FF 
0419c     08 E5 05 F1 | 	add	objptr, ##42248
041a0     F2 12 02 FB | 	rdlong	arg01, objptr
041a4     1B 00 00 FF 
041a8     C4 E4 85 F1 | 	sub	objptr, ##14020
041ac     F2 16 02 FB | 	rdlong	arg03, objptr
041b0     37 00 00 FF 
041b4     44 E4 85 F1 | 	sub	objptr, ##28228
041b8     00 14 06 F6 | 	mov	arg02, #0
041bc     24 44 B0 FD | 	call	#_compile_assign
041c0     FD 26 0A F6 | 	mov	local01, result1 wz
041c4                 | '   err=compile_assign(linenum,0,cont) 
041c4                 | '   if err<>0 then printerror(err,linenum): goto 101
041c4     20 00 90 AD |  if_e	jmp	#LR__0186
041c8     52 00 00 FF 
041cc     08 E5 05 F1 | 	add	objptr, ##42248
041d0     F2 14 02 FB | 	rdlong	arg02, objptr
041d4     52 00 00 FF 
041d8     08 E5 85 F1 | 	sub	objptr, ##42248
041dc     13 13 02 F6 | 	mov	arg01, local01
041e0     3C BA B1 FD | 	call	#_printerror
041e4     70 00 90 FD | 	jmp	#LR__0189
041e8                 | LR__0186
041e8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
041e8     52 00 00 FF 
041ec     4C E5 05 F1 | 	add	objptr, ##42316
041f0     F2 12 02 FB | 	rdlong	arg01, objptr
041f4     52 00 00 FF 
041f8     4C E5 85 F1 | 	sub	objptr, ##42316
041fc     8E 01 00 FF 
04200     B2 14 06 F6 | 	mov	arg02, ##@LR__5176
04204     C8 0E B2 FD | 	call	#__system___string_cmp
04208     FD 2C 0A F6 | 	mov	local04, result1 wz
0420c     52 00 00 5F 
04210     4C E5 05 51 |  if_ne	add	objptr, ##42316
04214     F2 2C 02 5B |  if_ne	rdlong	local04, objptr
04218     1B 00 00 5F 
0421c     10 E5 85 51 |  if_ne	sub	objptr, ##14096
04220     F2 2C 62 5C |  if_ne	wrlong	local04, objptr
04224     08 E4 05 51 |  if_ne	add	objptr, #8
04228     F2 08 68 5C |  if_ne	wrlong	#4, objptr
0422c     37 00 00 5F 
04230     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04234     A0 D6 9F 5D |  if_ne	jmp	#LR__0070
04238                 | LR__0187
04238                 | LR__0188
04238                 | ' 
04238                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04238     52 00 00 FF 
0423c     08 E5 05 F1 | 	add	objptr, ##42248
04240     F2 2C 0A FB | 	rdlong	local04, objptr wz
04244     52 00 00 FF 
04248     08 E5 85 F1 | 	sub	objptr, ##42248
0424c     B0 00 90 5D |  if_ne	jmp	#LR__0192
04250     02 12 06 F6 | 	mov	arg01, #2
04254     E4 91 B0 FD | 	call	#_execute_line
04258                 | LR__0189
04258                 | '   execute_line(2)
04258                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04258     52 00 00 FF 
0425c     2C E5 05 F1 | 	add	objptr, ##42284
04260     F2 2C 0A FB | 	rdlong	local04, objptr wz
04264     52 00 00 FF 
04268     2C E5 85 F1 | 	sub	objptr, ##42284
0426c     20 00 90 5D |  if_ne	jmp	#LR__0190
04270     8E 01 00 FF 
04274     B3 12 06 F6 | 	mov	arg01, ##@LR__5177
04278                 | ' 
04278                 | ' write(text)
04278     64 FC B1 FD | 	call	#_hg010b_spin2_write
0427c                 | ' crlf
0427c     00 01 B2 FD | 	call	#_hg010b_spin2_crlf
04280     8E 01 00 FF 
04284     B4 12 06 F6 | 	mov	arg01, ##@LR__5178
04288                 | ' 
04288                 | ' write(text)
04288     54 FC B1 FD | 	call	#_hg010b_spin2_write
0428c                 | ' crlf
0428c     F0 00 B2 FD | 	call	#_hg010b_spin2_crlf
04290                 | LR__0190
04290                 | '     if inload=1 andalso err>0 then print fullline$
04290     52 00 00 FF 
04294     2C E5 05 F1 | 	add	objptr, ##42284
04298     F2 2C 02 FB | 	rdlong	local04, objptr
0429c     52 00 00 FF 
042a0     2C E5 85 F1 | 	sub	objptr, ##42284
042a4     01 2C 0E F2 | 	cmp	local04, #1 wz
042a8     54 00 90 5D |  if_ne	jmp	#LR__0191
042ac     01 26 56 F2 | 	cmps	local01, #1 wc
042b0     4C 00 90 CD |  if_b	jmp	#LR__0191
042b4     00 12 06 F6 | 	mov	arg01, #0
042b8     D8 58 B2 FD | 	call	#__system___getiolock_0622
042bc     FD 12 02 F6 | 	mov	arg01, result1
042c0     E4 0D B2 FD | 	call	#__system___lockmem
042c4     37 00 00 FF 
042c8     40 E4 05 F1 | 	add	objptr, ##28224
042cc     F2 14 02 FB | 	rdlong	arg02, objptr
042d0     37 00 00 FF 
042d4     40 E4 85 F1 | 	sub	objptr, ##28224
042d8     00 12 06 F6 | 	mov	arg01, #0
042dc     00 16 06 F6 | 	mov	arg03, #0
042e0     E4 15 B2 FD | 	call	#__system___basic_print_string
042e4     00 12 06 F6 | 	mov	arg01, #0
042e8     0A 14 06 F6 | 	mov	arg02, #10
042ec     00 16 06 F6 | 	mov	arg03, #0
042f0     7C 15 B2 FD | 	call	#__system___basic_print_char
042f4     00 12 06 F6 | 	mov	arg01, #0
042f8     98 58 B2 FD | 	call	#__system___getiolock_0622
042fc     FD 00 68 FC | 	wrlong	#0, result1
04300                 | LR__0191
04300                 | LR__0192
04300     A7 F0 03 F6 | 	mov	ptra, fp
04304     B2 00 A0 FD | 	call	#popregs_
04308                 | _interpret_ret
04308     2D 00 64 FD | 	ret
0430c                 | 
0430c                 | ' 
0430c                 | ' '---------------------------------------------------------------------------------------------------------------------
0430c                 | ' '
0430c                 | ' '                          END OF TOKENIZER MAIN CODE
0430c                 | ' '
0430c                 | ' '---------------------------------------------------------------------------------------------------------------------
0430c                 | ' 
0430c                 | ' '---------------------------------------------------------------------------------------------------------------------
0430c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
0430c                 | ' '---------------------------------------------------------------------------------------------------------------------
0430c                 | ' 
0430c                 | ' ' Check if the part is an operator, return a token or 0 if not found
0430c                 | ' 
0430c                 | ' function isoperator(s as string) as ubyte
0430c                 | _isoperator
0430c     01 4A 05 F6 | 	mov	COUNT_, #1
04310     A8 00 A0 FD | 	call	#pushregs_
04314                 | ' 
04314                 | ' select case s
04314     09 27 02 F6 | 	mov	local01, arg01
04318     8E 01 00 FF 
0431c     BA 14 06 F6 | 	mov	arg02, ##@LR__5179
04320     13 13 02 F6 | 	mov	arg01, local01
04324     A8 0D B2 FD | 	call	#__system___string_cmp
04328     00 FA 0D F2 | 	cmp	result1, #0 wz
0432c     FC 01 90 AD |  if_e	jmp	#LR__0200
04330     8E 01 00 FF 
04334     BC 14 06 F6 | 	mov	arg02, ##@LR__5180
04338     13 13 02 F6 | 	mov	arg01, local01
0433c     90 0D B2 FD | 	call	#__system___string_cmp
04340     00 FA 0D F2 | 	cmp	result1, #0 wz
04344     EC 01 90 AD |  if_e	jmp	#LR__0201
04348     8E 01 00 FF 
0434c     BE 14 06 F6 | 	mov	arg02, ##@LR__5181
04350     13 13 02 F6 | 	mov	arg01, local01
04354     78 0D B2 FD | 	call	#__system___string_cmp
04358     00 FA 0D F2 | 	cmp	result1, #0 wz
0435c     DC 01 90 AD |  if_e	jmp	#LR__0202
04360     8E 01 00 FF 
04364     C1 14 06 F6 | 	mov	arg02, ##@LR__5182
04368     13 13 02 F6 | 	mov	arg01, local01
0436c     60 0D B2 FD | 	call	#__system___string_cmp
04370     00 FA 0D F2 | 	cmp	result1, #0 wz
04374     CC 01 90 AD |  if_e	jmp	#LR__0203
04378     8E 01 00 FF 
0437c     C5 14 06 F6 | 	mov	arg02, ##@LR__5183
04380     13 13 02 F6 | 	mov	arg01, local01
04384     48 0D B2 FD | 	call	#__system___string_cmp
04388     00 FA 0D F2 | 	cmp	result1, #0 wz
0438c     BC 01 90 AD |  if_e	jmp	#LR__0204
04390     8E 01 00 FF 
04394     C7 14 06 F6 | 	mov	arg02, ##@LR__5184
04398     13 13 02 F6 | 	mov	arg01, local01
0439c     30 0D B2 FD | 	call	#__system___string_cmp
043a0     00 FA 0D F2 | 	cmp	result1, #0 wz
043a4     AC 01 90 AD |  if_e	jmp	#LR__0205
043a8     8E 01 00 FF 
043ac     C9 14 06 F6 | 	mov	arg02, ##@LR__5185
043b0     13 13 02 F6 | 	mov	arg01, local01
043b4     18 0D B2 FD | 	call	#__system___string_cmp
043b8     00 FA 0D F2 | 	cmp	result1, #0 wz
043bc     9C 01 90 AD |  if_e	jmp	#LR__0206
043c0     8E 01 00 FF 
043c4     CD 14 06 F6 | 	mov	arg02, ##@LR__5186
043c8     13 13 02 F6 | 	mov	arg01, local01
043cc     00 0D B2 FD | 	call	#__system___string_cmp
043d0     00 FA 0D F2 | 	cmp	result1, #0 wz
043d4     8C 01 90 AD |  if_e	jmp	#LR__0207
043d8     8E 01 00 FF 
043dc     D1 14 06 F6 | 	mov	arg02, ##@LR__5187
043e0     13 13 02 F6 | 	mov	arg01, local01
043e4     E8 0C B2 FD | 	call	#__system___string_cmp
043e8     00 FA 0D F2 | 	cmp	result1, #0 wz
043ec     7C 01 90 AD |  if_e	jmp	#LR__0208
043f0     8E 01 00 FF 
043f4     D5 14 06 F6 | 	mov	arg02, ##@LR__5188
043f8     13 13 02 F6 | 	mov	arg01, local01
043fc     D0 0C B2 FD | 	call	#__system___string_cmp
04400     00 FA 0D F2 | 	cmp	result1, #0 wz
04404     6C 01 90 AD |  if_e	jmp	#LR__0209
04408     8E 01 00 FF 
0440c     D9 14 06 F6 | 	mov	arg02, ##@LR__5189
04410     13 13 02 F6 | 	mov	arg01, local01
04414     B8 0C B2 FD | 	call	#__system___string_cmp
04418     00 FA 0D F2 | 	cmp	result1, #0 wz
0441c     5C 01 90 AD |  if_e	jmp	#LR__0210
04420     8E 01 00 FF 
04424     DD 14 06 F6 | 	mov	arg02, ##@LR__5190
04428     13 13 02 F6 | 	mov	arg01, local01
0442c     A0 0C B2 FD | 	call	#__system___string_cmp
04430     00 FA 0D F2 | 	cmp	result1, #0 wz
04434     4C 01 90 AD |  if_e	jmp	#LR__0211
04438     8E 01 00 FF 
0443c     DF 14 06 F6 | 	mov	arg02, ##@LR__5191
04440     13 13 02 F6 | 	mov	arg01, local01
04444     88 0C B2 FD | 	call	#__system___string_cmp
04448     00 FA 0D F2 | 	cmp	result1, #0 wz
0444c     3C 01 90 AD |  if_e	jmp	#LR__0212
04450     8E 01 00 FF 
04454     E3 14 06 F6 | 	mov	arg02, ##@LR__5192
04458     13 13 02 F6 | 	mov	arg01, local01
0445c     70 0C B2 FD | 	call	#__system___string_cmp
04460     00 FA 0D F2 | 	cmp	result1, #0 wz
04464     2C 01 90 AD |  if_e	jmp	#LR__0213
04468     8E 01 00 FF 
0446c     E5 14 06 F6 | 	mov	arg02, ##@LR__5193
04470     13 13 02 F6 | 	mov	arg01, local01
04474     58 0C B2 FD | 	call	#__system___string_cmp
04478     00 FA 0D F2 | 	cmp	result1, #0 wz
0447c     1C 01 90 AD |  if_e	jmp	#LR__0214
04480     8E 01 00 FF 
04484     E7 14 06 F6 | 	mov	arg02, ##@LR__5194
04488     13 13 02 F6 | 	mov	arg01, local01
0448c     40 0C B2 FD | 	call	#__system___string_cmp
04490     00 FA 0D F2 | 	cmp	result1, #0 wz
04494     0C 01 90 AD |  if_e	jmp	#LR__0215
04498     8E 01 00 FF 
0449c     EA 14 06 F6 | 	mov	arg02, ##@LR__5195
044a0     13 13 02 F6 | 	mov	arg01, local01
044a4     28 0C B2 FD | 	call	#__system___string_cmp
044a8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ac     FC 00 90 AD |  if_e	jmp	#LR__0216
044b0     8E 01 00 FF 
044b4     ED 14 06 F6 | 	mov	arg02, ##@LR__5196
044b8     13 13 02 F6 | 	mov	arg01, local01
044bc     10 0C B2 FD | 	call	#__system___string_cmp
044c0     00 FA 0D F2 | 	cmp	result1, #0 wz
044c4     EC 00 90 AD |  if_e	jmp	#LR__0217
044c8     8E 01 00 FF 
044cc     EF 14 06 F6 | 	mov	arg02, ##@LR__5197
044d0     13 13 02 F6 | 	mov	arg01, local01
044d4     F8 0B B2 FD | 	call	#__system___string_cmp
044d8     00 FA 0D F2 | 	cmp	result1, #0 wz
044dc     DC 00 90 AD |  if_e	jmp	#LR__0218
044e0     8E 01 00 FF 
044e4     F1 14 06 F6 | 	mov	arg02, ##@LR__5198
044e8     13 13 02 F6 | 	mov	arg01, local01
044ec     E0 0B B2 FD | 	call	#__system___string_cmp
044f0     00 FA 0D F2 | 	cmp	result1, #0 wz
044f4     CC 00 90 AD |  if_e	jmp	#LR__0219
044f8     8E 01 00 FF 
044fc     F4 14 06 F6 | 	mov	arg02, ##@LR__5199
04500     13 13 02 F6 | 	mov	arg01, local01
04504     C8 0B B2 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     BC 00 90 AD |  if_e	jmp	#LR__0220
04510     8E 01 00 FF 
04514     F7 14 06 F6 | 	mov	arg02, ##@LR__5200
04518     13 13 02 F6 | 	mov	arg01, local01
0451c     B0 0B B2 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     AC 00 90 AD |  if_e	jmp	#LR__0221
04528     B0 00 90 FD | 	jmp	#LR__0222
0452c                 | LR__0200
0452c     01 FA 05 F6 | 	mov	result1, #1
04530     AC 00 90 FD | 	jmp	#LR__0223
04534                 | LR__0201
04534     02 FA 05 F6 | 	mov	result1, #2
04538     A4 00 90 FD | 	jmp	#LR__0223
0453c                 | LR__0202
0453c     03 FA 05 F6 | 	mov	result1, #3
04540     9C 00 90 FD | 	jmp	#LR__0223
04544                 | LR__0203
04544     04 FA 05 F6 | 	mov	result1, #4
04548     94 00 90 FD | 	jmp	#LR__0223
0454c                 | LR__0204
0454c     05 FA 05 F6 | 	mov	result1, #5
04550     8C 00 90 FD | 	jmp	#LR__0223
04554                 | LR__0205
04554     06 FA 05 F6 | 	mov	result1, #6
04558     84 00 90 FD | 	jmp	#LR__0223
0455c                 | LR__0206
0455c     07 FA 05 F6 | 	mov	result1, #7
04560     7C 00 90 FD | 	jmp	#LR__0223
04564                 | LR__0207
04564     08 FA 05 F6 | 	mov	result1, #8
04568     74 00 90 FD | 	jmp	#LR__0223
0456c                 | LR__0208
0456c     09 FA 05 F6 | 	mov	result1, #9
04570     6C 00 90 FD | 	jmp	#LR__0223
04574                 | LR__0209
04574     0A FA 05 F6 | 	mov	result1, #10
04578     64 00 90 FD | 	jmp	#LR__0223
0457c                 | LR__0210
0457c     0B FA 05 F6 | 	mov	result1, #11
04580     5C 00 90 FD | 	jmp	#LR__0223
04584                 | LR__0211
04584     0C FA 05 F6 | 	mov	result1, #12
04588     54 00 90 FD | 	jmp	#LR__0223
0458c                 | LR__0212
0458c     0D FA 05 F6 | 	mov	result1, #13
04590     4C 00 90 FD | 	jmp	#LR__0223
04594                 | LR__0213
04594     0E FA 05 F6 | 	mov	result1, #14
04598     44 00 90 FD | 	jmp	#LR__0223
0459c                 | LR__0214
0459c     1B FA 05 F6 | 	mov	result1, #27
045a0     3C 00 90 FD | 	jmp	#LR__0223
045a4                 | LR__0215
045a4     27 FA 05 F6 | 	mov	result1, #39
045a8     34 00 90 FD | 	jmp	#LR__0223
045ac                 | LR__0216
045ac     26 FA 05 F6 | 	mov	result1, #38
045b0     2C 00 90 FD | 	jmp	#LR__0223
045b4                 | LR__0217
045b4     10 FA 05 F6 | 	mov	result1, #16
045b8     24 00 90 FD | 	jmp	#LR__0223
045bc                 | LR__0218
045bc     0F FA 05 F6 | 	mov	result1, #15
045c0     1C 00 90 FD | 	jmp	#LR__0223
045c4                 | LR__0219
045c4     2A FA 05 F6 | 	mov	result1, #42
045c8     14 00 90 FD | 	jmp	#LR__0223
045cc                 | LR__0220
045cc     28 FA 05 F6 | 	mov	result1, #40
045d0     0C 00 90 FD | 	jmp	#LR__0223
045d4                 | LR__0221
045d4     29 FA 05 F6 | 	mov	result1, #41
045d8     04 00 90 FD | 	jmp	#LR__0223
045dc                 | LR__0222
045dc     00 FA 05 F6 | 	mov	result1, #0
045e0                 | LR__0223
045e0     A7 F0 03 F6 | 	mov	ptra, fp
045e4     B2 00 A0 FD | 	call	#popregs_
045e8                 | _isoperator_ret
045e8     2D 00 64 FD | 	ret
045ec                 | 
045ec                 | ' 
045ec                 | ' ' Check if the part is a channel#, return a token or 0 if not found
045ec                 | ' 
045ec                 | ' function ischannel(s as string) as ulong
045ec                 | _ischannel
045ec     02 4A 05 F6 | 	mov	COUNT_, #2
045f0     A8 00 A0 FD | 	call	#pushregs_
045f4                 | ' if left$(s,1)<>"#" then return 0
045f4     09 27 02 F6 | 	mov	local01, arg01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     6C 1E B2 FD | 	call	#__system__Left_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     8E 01 00 FF 
04608     FA 14 06 F6 | 	mov	arg02, ##@LR__5201
0460c     C0 0A B2 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     00 FA 05 56 |  if_ne	mov	result1, #0
04618     AC 00 90 5D |  if_ne	jmp	#LR__0234
0461c                 | ' if len(s)<>2 then return 0
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     09 29 02 F6 | 	mov	local02, arg01
04624     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
04628                 | LR__0230
04628     14 FB C9 FA | 	rdbyte	result1, local02 wz
0462c     01 28 06 51 |  if_ne	add	local02, #1
04630     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
04634                 | LR__0231
04634     09 29 82 F1 | 	sub	local02, arg01
04638     14 FB 01 F6 | 	mov	result1, local02
0463c     02 FA 0D F2 | 	cmp	result1, #2 wz
04640     00 FA 05 56 |  if_ne	mov	result1, #0
04644     80 00 90 5D |  if_ne	jmp	#LR__0234
04648                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04648     13 13 02 F6 | 	mov	arg01, local01
0464c     01 14 06 F6 | 	mov	arg02, #1
04650     A0 1E B2 FD | 	call	#__system__Right_S
04654     FD 12 02 F6 | 	mov	arg01, result1
04658     8E 01 00 FF 
0465c     FC 14 06 F6 | 	mov	arg02, ##@LR__5202
04660     6C 0A B2 FD | 	call	#__system___string_cmp
04664     00 FA 55 F2 | 	cmps	result1, #0 wc
04668     24 00 90 CD |  if_b	jmp	#LR__0232
0466c     13 13 02 F6 | 	mov	arg01, local01
04670     01 14 06 F6 | 	mov	arg02, #1
04674     7C 1E B2 FD | 	call	#__system__Right_S
04678     FD 12 02 F6 | 	mov	arg01, result1
0467c     8E 01 00 FF 
04680     FE 14 06 F6 | 	mov	arg02, ##@LR__5203
04684     48 0A B2 FD | 	call	#__system___string_cmp
04688     01 FA 55 F2 | 	cmps	result1, #1 wc
0468c     08 00 90 CD |  if_b	jmp	#LR__0233
04690                 | LR__0232
04690     00 FA 05 F6 | 	mov	result1, #0
04694     30 00 90 FD | 	jmp	#LR__0234
04698                 | LR__0233
04698                 | ' return token_channel+val(right$(s,1))
04698     13 13 02 F6 | 	mov	arg01, local01
0469c     01 14 06 F6 | 	mov	arg02, #1
046a0     50 1E B2 FD | 	call	#__system__Right_S
046a4     FD 12 02 F6 | 	mov	arg01, result1
046a8     8C 30 B2 FD | 	call	#__system____builtin_atof
046ac     FD 14 02 F6 | 	mov	arg02, result1
046b0     00 18 21 FF 
046b4     00 12 06 F6 | 	mov	arg01, ##1110441984
046b8     FC 24 B2 FD | 	call	#__system___float_add
046bc     FD 12 02 F6 | 	mov	arg01, result1
046c0     00 14 06 F6 | 	mov	arg02, #0
046c4     38 2D B2 FD | 	call	#__system___float_tointeger
046c8                 | LR__0234
046c8     A7 F0 03 F6 | 	mov	ptra, fp
046cc     B2 00 A0 FD | 	call	#popregs_
046d0                 | _ischannel_ret
046d0     2D 00 64 FD | 	ret
046d4                 | 
046d4                 | ' 
046d4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
046d4                 | ' ' todo: add spin2/pasm constants for pin control
046d4                 | ' 
046d4                 | ' function isconstant(s as string) as integer
046d4                 | _isconstant
046d4     01 4A 05 F6 | 	mov	COUNT_, #1
046d8     A8 00 A0 FD | 	call	#pushregs_
046dc                 | ' 
046dc                 | ' select case s
046dc     09 27 02 F6 | 	mov	local01, arg01
046e0     8E 01 00 FF 
046e4     00 15 06 F6 | 	mov	arg02, ##@LR__5204
046e8     13 13 02 F6 | 	mov	arg01, local01
046ec     E0 09 B2 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     34 00 90 AD |  if_e	jmp	#LR__0240
046f8     8E 01 00 FF 
046fc     06 15 06 F6 | 	mov	arg02, ##@LR__5205
04700     13 13 02 F6 | 	mov	arg01, local01
04704     C8 09 B2 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     24 00 90 AD |  if_e	jmp	#LR__0241
04710     8E 01 00 FF 
04714     0D 15 06 F6 | 	mov	arg02, ##@LR__5206
04718     13 13 02 F6 | 	mov	arg01, local01
0471c     B0 09 B2 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     14 00 90 AD |  if_e	jmp	#LR__0242
04728     18 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0240
0472c     01 FA 05 F6 | 	mov	result1, #1
04730     14 00 90 FD | 	jmp	#LR__0244
04734                 | LR__0241
04734     02 FA 05 F6 | 	mov	result1, #2
04738     0C 00 90 FD | 	jmp	#LR__0244
0473c                 | LR__0242
0473c     04 FA 05 F6 | 	mov	result1, #4
04740     04 00 90 FD | 	jmp	#LR__0244
04744                 | LR__0243
04744     00 FA 05 F6 | 	mov	result1, #0
04748                 | LR__0244
04748     A7 F0 03 F6 | 	mov	ptra, fp
0474c     B2 00 A0 FD | 	call	#popregs_
04750                 | _isconstant_ret
04750     2D 00 64 FD | 	ret
04754                 | 
04754                 | ' 
04754                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04754                 | ' 
04754                 | ' function isnotename(s as string) as ulong
04754                 | _isnotename
04754     07 4A 05 F6 | 	mov	COUNT_, #7
04758     A8 00 A0 FD | 	call	#pushregs_
0475c                 | ' if left$(s,1)<>"#" then return 0
0475c     09 27 02 F6 | 	mov	local01, arg01
04760     01 14 06 F6 | 	mov	arg02, #1
04764     04 1D B2 FD | 	call	#__system__Left_S
04768     FD 12 02 F6 | 	mov	arg01, result1
0476c     8E 01 00 FF 
04770     15 15 06 F6 | 	mov	arg02, ##@LR__5207
04774     58 09 B2 FD | 	call	#__system___string_cmp
04778     00 FA 0D F2 | 	cmp	result1, #0 wz
0477c     00 FA 05 56 |  if_ne	mov	result1, #0
04780     30 03 90 5D |  if_ne	jmp	#LR__0273
04784                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04784     13 13 02 F6 | 	mov	arg01, local01
04788     03 14 06 F6 | 	mov	arg02, #3
0478c     01 16 06 F6 | 	mov	arg03, #1
04790     EC 1D B2 FD | 	call	#__system__Mid_S
04794     FD 12 02 F6 | 	mov	arg01, result1
04798     8E 01 00 FF 
0479c     17 15 06 F6 | 	mov	arg02, ##@LR__5208
047a0     2C 09 B2 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     18 00 90 5D |  if_ne	jmp	#LR__0250
047ac     13 13 02 F6 | 	mov	arg01, local01
047b0     02 14 06 F6 | 	mov	arg02, #2
047b4     02 16 06 F6 | 	mov	arg03, #2
047b8     C4 1D B2 FD | 	call	#__system__Mid_S
047bc     FD 28 02 F6 | 	mov	local02, result1
047c0     14 00 90 FD | 	jmp	#LR__0251
047c4                 | LR__0250
047c4     13 13 02 F6 | 	mov	arg01, local01
047c8     02 14 06 F6 | 	mov	arg02, #2
047cc     01 16 06 F6 | 	mov	arg03, #1
047d0     AC 1D B2 FD | 	call	#__system__Mid_S
047d4     FD 28 02 F6 | 	mov	local02, result1
047d8                 | LR__0251
047d8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
047d8     13 13 02 F6 | 	mov	arg01, local01
047dc     09 2B 02 F6 | 	mov	local03, arg01
047e0     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
047e4                 | LR__0252
047e4     15 FB C9 FA | 	rdbyte	result1, local03 wz
047e8     01 2A 06 51 |  if_ne	add	local03, #1
047ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
047f0                 | LR__0253
047f0     09 2B 82 F1 | 	sub	local03, arg01
047f4     15 15 02 F6 | 	mov	arg02, local03
047f8     01 14 86 F1 | 	sub	arg02, #1
047fc     13 13 02 F6 | 	mov	arg01, local01
04800     01 16 06 F6 | 	mov	arg03, #1
04804     78 1D B2 FD | 	call	#__system__Mid_S
04808     FD 12 02 F6 | 	mov	arg01, result1
0480c     8E 01 00 FF 
04810     19 15 06 F6 | 	mov	arg02, ##@LR__5209
04814     B8 08 B2 FD | 	call	#__system___string_cmp
04818     00 FA 0D F2 | 	cmp	result1, #0 wz
0481c     28 00 90 AD |  if_e	jmp	#LR__0254
04820     13 13 02 F6 | 	mov	arg01, local01
04824     01 14 06 F6 | 	mov	arg02, #1
04828     C8 1C B2 FD | 	call	#__system__Right_S
0482c     FD 12 02 F6 | 	mov	arg01, result1
04830     04 2F B2 FD | 	call	#__system____builtin_atof
04834     FD 12 02 F6 | 	mov	arg01, result1
04838     00 14 06 F6 | 	mov	arg02, #0
0483c     C0 2B B2 FD | 	call	#__system___float_tointeger
04840     FD 2C 02 F6 | 	mov	local04, result1
04844     34 00 90 FD | 	jmp	#LR__0255
04848                 | LR__0254
04848     13 13 02 F6 | 	mov	arg01, local01
0484c     01 14 06 F6 | 	mov	arg02, #1
04850     A0 1C B2 FD | 	call	#__system__Right_S
04854     FD 12 02 F6 | 	mov	arg01, result1
04858     DC 2E B2 FD | 	call	#__system____builtin_atof
0485c     FD 14 02 F6 | 	mov	arg02, result1
04860     00 C0 5F FF 
04864     00 12 06 F6 | 	mov	arg01, ##-1082130432
04868     08 27 B2 FD | 	call	#__system___float_mul
0486c     FD 12 02 F6 | 	mov	arg01, result1
04870     00 14 06 F6 | 	mov	arg02, #0
04874     88 2B B2 FD | 	call	#__system___float_tointeger
04878     FD 2C 02 F6 | 	mov	local04, result1
0487c                 | LR__0255
0487c                 | ' 
0487c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
0487c     00 2C 0E F2 | 	cmp	local04, #0 wz
04880     24 00 90 5D |  if_ne	jmp	#LR__0256
04884     13 13 02 F6 | 	mov	arg01, local01
04888     01 14 06 F6 | 	mov	arg02, #1
0488c     64 1C B2 FD | 	call	#__system__Right_S
04890     FD 12 02 F6 | 	mov	arg01, result1
04894     8E 01 00 FF 
04898     1B 15 06 F6 | 	mov	arg02, ##@LR__5210
0489c     30 08 B2 FD | 	call	#__system___string_cmp
048a0     00 FA 0D F2 | 	cmp	result1, #0 wz
048a4     04 2C 06 56 |  if_ne	mov	local04, #4
048a8                 | LR__0256
048a8                 | ' 
048a8                 | ' select case s1
048a8     14 2F 02 F6 | 	mov	local05, local02
048ac     8E 01 00 FF 
048b0     1D 15 06 F6 | 	mov	arg02, ##@LR__5211
048b4     17 13 02 F6 | 	mov	arg01, local05
048b8     14 08 B2 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     24 01 90 AD |  if_e	jmp	#LR__0257
048c4     8E 01 00 FF 
048c8     1F 15 06 F6 | 	mov	arg02, ##@LR__5212
048cc     17 13 02 F6 | 	mov	arg01, local05
048d0     FC 07 B2 FD | 	call	#__system___string_cmp
048d4     00 FA 0D F2 | 	cmp	result1, #0 wz
048d8     18 01 90 AD |  if_e	jmp	#LR__0258
048dc     8E 01 00 FF 
048e0     22 15 06 F6 | 	mov	arg02, ##@LR__5213
048e4     17 13 02 F6 | 	mov	arg01, local05
048e8     E4 07 B2 FD | 	call	#__system___string_cmp
048ec     00 FA 0D F2 | 	cmp	result1, #0 wz
048f0     0C 01 90 AD |  if_e	jmp	#LR__0259
048f4     8E 01 00 FF 
048f8     24 15 06 F6 | 	mov	arg02, ##@LR__5214
048fc     17 13 02 F6 | 	mov	arg01, local05
04900     CC 07 B2 FD | 	call	#__system___string_cmp
04904     00 FA 0D F2 | 	cmp	result1, #0 wz
04908     00 01 90 AD |  if_e	jmp	#LR__0260
0490c     8E 01 00 FF 
04910     27 15 06 F6 | 	mov	arg02, ##@LR__5215
04914     17 13 02 F6 | 	mov	arg01, local05
04918     B4 07 B2 FD | 	call	#__system___string_cmp
0491c     00 FA 0D F2 | 	cmp	result1, #0 wz
04920     F4 00 90 AD |  if_e	jmp	#LR__0261
04924     8E 01 00 FF 
04928     29 15 06 F6 | 	mov	arg02, ##@LR__5216
0492c     17 13 02 F6 | 	mov	arg01, local05
04930     9C 07 B2 FD | 	call	#__system___string_cmp
04934     00 FA 0D F2 | 	cmp	result1, #0 wz
04938     E8 00 90 AD |  if_e	jmp	#LR__0262
0493c     8E 01 00 FF 
04940     2B 15 06 F6 | 	mov	arg02, ##@LR__5217
04944     17 13 02 F6 | 	mov	arg01, local05
04948     84 07 B2 FD | 	call	#__system___string_cmp
0494c     00 FA 0D F2 | 	cmp	result1, #0 wz
04950     DC 00 90 AD |  if_e	jmp	#LR__0263
04954     8E 01 00 FF 
04958     2E 15 06 F6 | 	mov	arg02, ##@LR__5218
0495c     17 13 02 F6 | 	mov	arg01, local05
04960     6C 07 B2 FD | 	call	#__system___string_cmp
04964     00 FA 0D F2 | 	cmp	result1, #0 wz
04968     D0 00 90 AD |  if_e	jmp	#LR__0264
0496c     8E 01 00 FF 
04970     30 15 06 F6 | 	mov	arg02, ##@LR__5219
04974     17 13 02 F6 | 	mov	arg01, local05
04978     54 07 B2 FD | 	call	#__system___string_cmp
0497c     00 FA 0D F2 | 	cmp	result1, #0 wz
04980     C4 00 90 AD |  if_e	jmp	#LR__0265
04984     8E 01 00 FF 
04988     33 15 06 F6 | 	mov	arg02, ##@LR__5220
0498c     17 13 02 F6 | 	mov	arg01, local05
04990     3C 07 B2 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     B8 00 90 AD |  if_e	jmp	#LR__0266
0499c     8E 01 00 FF 
049a0     35 15 06 F6 | 	mov	arg02, ##@LR__5221
049a4     17 13 02 F6 | 	mov	arg01, local05
049a8     24 07 B2 FD | 	call	#__system___string_cmp
049ac     00 FA 0D F2 | 	cmp	result1, #0 wz
049b0     AC 00 90 AD |  if_e	jmp	#LR__0267
049b4     8E 01 00 FF 
049b8     38 15 06 F6 | 	mov	arg02, ##@LR__5222
049bc     17 13 02 F6 | 	mov	arg01, local05
049c0     0C 07 B2 FD | 	call	#__system___string_cmp
049c4     00 FA 0D F2 | 	cmp	result1, #0 wz
049c8     A0 00 90 AD |  if_e	jmp	#LR__0268
049cc     8E 01 00 FF 
049d0     3A 15 06 F6 | 	mov	arg02, ##@LR__5223
049d4     17 13 02 F6 | 	mov	arg01, local05
049d8     F4 06 B2 FD | 	call	#__system___string_cmp
049dc     00 FA 0D F2 | 	cmp	result1, #0 wz
049e0     94 00 90 AD |  if_e	jmp	#LR__0269
049e4     9C 00 90 FD | 	jmp	#LR__0270
049e8                 | LR__0257
049e8     01 00 00 FF 
049ec     00 31 06 F6 | 	mov	local06, ##768
049f0     98 00 90 FD | 	jmp	#LR__0271
049f4                 | LR__0258
049f4     01 00 00 FF 
049f8     01 31 06 F6 | 	mov	local06, ##769
049fc     8C 00 90 FD | 	jmp	#LR__0271
04a00                 | LR__0259
04a00     01 00 00 FF 
04a04     02 31 06 F6 | 	mov	local06, ##770
04a08     80 00 90 FD | 	jmp	#LR__0271
04a0c                 | LR__0260
04a0c     01 00 00 FF 
04a10     03 31 06 F6 | 	mov	local06, ##771
04a14     74 00 90 FD | 	jmp	#LR__0271
04a18                 | LR__0261
04a18     01 00 00 FF 
04a1c     04 31 06 F6 | 	mov	local06, ##772
04a20     68 00 90 FD | 	jmp	#LR__0271
04a24                 | LR__0262
04a24     01 00 00 FF 
04a28     05 31 06 F6 | 	mov	local06, ##773
04a2c     5C 00 90 FD | 	jmp	#LR__0271
04a30                 | LR__0263
04a30     01 00 00 FF 
04a34     06 31 06 F6 | 	mov	local06, ##774
04a38     50 00 90 FD | 	jmp	#LR__0271
04a3c                 | LR__0264
04a3c     01 00 00 FF 
04a40     07 31 06 F6 | 	mov	local06, ##775
04a44     44 00 90 FD | 	jmp	#LR__0271
04a48                 | LR__0265
04a48     01 00 00 FF 
04a4c     08 31 06 F6 | 	mov	local06, ##776
04a50     38 00 90 FD | 	jmp	#LR__0271
04a54                 | LR__0266
04a54     01 00 00 FF 
04a58     09 31 06 F6 | 	mov	local06, ##777
04a5c     2C 00 90 FD | 	jmp	#LR__0271
04a60                 | LR__0267
04a60     01 00 00 FF 
04a64     0A 31 06 F6 | 	mov	local06, ##778
04a68     20 00 90 FD | 	jmp	#LR__0271
04a6c                 | LR__0268
04a6c     01 00 00 FF 
04a70     0B 31 06 F6 | 	mov	local06, ##779
04a74     14 00 90 FD | 	jmp	#LR__0271
04a78                 | LR__0269
04a78     01 00 00 FF 
04a7c     0B 31 06 F6 | 	mov	local06, ##779
04a80     08 00 90 FD | 	jmp	#LR__0271
04a84                 | LR__0270
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88     28 00 90 FD | 	jmp	#LR__0273
04a8c                 | LR__0271
04a8c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04a8c     FF FF 7F FF 
04a90     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04a94     18 00 90 CD |  if_b	jmp	#LR__0272
04a98     0A 2C 56 F2 | 	cmps	local04, #10 wc
04a9c     16 33 02 C6 |  if_b	mov	local07, local04
04aa0     01 32 66 C0 |  if_b	shl	local07, #1
04aa4     16 33 02 C1 |  if_b	add	local07, local04
04aa8     02 32 66 C0 |  if_b	shl	local07, #2
04aac     19 31 02 C1 |  if_b	add	local06, local07
04ab0                 | LR__0272
04ab0                 | ' return token
04ab0     18 FB 01 F6 | 	mov	result1, local06
04ab4                 | LR__0273
04ab4     A7 F0 03 F6 | 	mov	ptra, fp
04ab8     B2 00 A0 FD | 	call	#popregs_
04abc                 | _isnotename_ret
04abc     2D 00 64 FD | 	ret
04ac0                 | 
04ac0                 | ' 
04ac0                 | ' ' Check if the part is a separator, return a token or 0 if not found
04ac0                 | ' 
04ac0                 | ' function isseparator(s as string) as ubyte
04ac0                 | _isseparator
04ac0     01 4A 05 F6 | 	mov	COUNT_, #1
04ac4     A8 00 A0 FD | 	call	#pushregs_
04ac8                 | ' 
04ac8                 | ' select case s
04ac8     09 27 02 F6 | 	mov	local01, arg01
04acc     8E 01 00 FF 
04ad0     3C 15 06 F6 | 	mov	arg02, ##@LR__5224
04ad4     13 13 02 F6 | 	mov	arg01, local01
04ad8     F4 05 B2 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     54 01 90 AD |  if_e	jmp	#LR__0280
04ae4     8E 01 00 FF 
04ae8     3E 15 06 F6 | 	mov	arg02, ##@LR__5225
04aec     13 13 02 F6 | 	mov	arg01, local01
04af0     DC 05 B2 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     44 01 90 AD |  if_e	jmp	#LR__0281
04afc     8E 01 00 FF 
04b00     40 15 06 F6 | 	mov	arg02, ##@LR__5226
04b04     13 13 02 F6 | 	mov	arg01, local01
04b08     C4 05 B2 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     34 01 90 AD |  if_e	jmp	#LR__0282
04b14     8E 01 00 FF 
04b18     42 15 06 F6 | 	mov	arg02, ##@LR__5227
04b1c     13 13 02 F6 | 	mov	arg01, local01
04b20     AC 05 B2 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     24 01 90 AD |  if_e	jmp	#LR__0283
04b2c     8E 01 00 FF 
04b30     44 15 06 F6 | 	mov	arg02, ##@LR__5228
04b34     13 13 02 F6 | 	mov	arg01, local01
04b38     94 05 B2 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     14 01 90 AD |  if_e	jmp	#LR__0284
04b44     8E 01 00 FF 
04b48     46 15 06 F6 | 	mov	arg02, ##@LR__5229
04b4c     13 13 02 F6 | 	mov	arg01, local01
04b50     7C 05 B2 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     04 01 90 AD |  if_e	jmp	#LR__0285
04b5c     8E 01 00 FF 
04b60     48 15 06 F6 | 	mov	arg02, ##@LR__5230
04b64     13 13 02 F6 | 	mov	arg01, local01
04b68     64 05 B2 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     F4 00 90 AD |  if_e	jmp	#LR__0286
04b74     8E 01 00 FF 
04b78     4A 15 06 F6 | 	mov	arg02, ##@LR__5231
04b7c     13 13 02 F6 | 	mov	arg01, local01
04b80     4C 05 B2 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     E4 00 90 AD |  if_e	jmp	#LR__0287
04b8c     8E 01 00 FF 
04b90     4C 15 06 F6 | 	mov	arg02, ##@LR__5232
04b94     13 13 02 F6 | 	mov	arg01, local01
04b98     34 05 B2 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     D4 00 90 AD |  if_e	jmp	#LR__0288
04ba4     8E 01 00 FF 
04ba8     4E 15 06 F6 | 	mov	arg02, ##@LR__5233
04bac     13 13 02 F6 | 	mov	arg01, local01
04bb0     1C 05 B2 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     C4 00 90 AD |  if_e	jmp	#LR__0289
04bbc     8E 01 00 FF 
04bc0     50 15 06 F6 | 	mov	arg02, ##@LR__5234
04bc4     13 13 02 F6 | 	mov	arg01, local01
04bc8     04 05 B2 FD | 	call	#__system___string_cmp
04bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd0     B4 00 90 AD |  if_e	jmp	#LR__0290
04bd4     8E 01 00 FF 
04bd8     52 15 06 F6 | 	mov	arg02, ##@LR__5235
04bdc     13 13 02 F6 | 	mov	arg01, local01
04be0     EC 04 B2 FD | 	call	#__system___string_cmp
04be4     00 FA 0D F2 | 	cmp	result1, #0 wz
04be8     A4 00 90 AD |  if_e	jmp	#LR__0291
04bec     8E 01 00 FF 
04bf0     54 15 06 F6 | 	mov	arg02, ##@LR__5236
04bf4     13 13 02 F6 | 	mov	arg01, local01
04bf8     D4 04 B2 FD | 	call	#__system___string_cmp
04bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04c00     94 00 90 AD |  if_e	jmp	#LR__0292
04c04     8E 01 00 FF 
04c08     56 15 06 F6 | 	mov	arg02, ##@LR__5237
04c0c     13 13 02 F6 | 	mov	arg01, local01
04c10     BC 04 B2 FD | 	call	#__system___string_cmp
04c14     00 FA 0D F2 | 	cmp	result1, #0 wz
04c18     84 00 90 AD |  if_e	jmp	#LR__0293
04c1c     8E 01 00 FF 
04c20     58 15 06 F6 | 	mov	arg02, ##@LR__5238
04c24     13 13 02 F6 | 	mov	arg01, local01
04c28     A4 04 B2 FD | 	call	#__system___string_cmp
04c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c30     74 00 90 AD |  if_e	jmp	#LR__0294
04c34     78 00 90 FD | 	jmp	#LR__0295
04c38                 | LR__0280
04c38     01 FA 05 F6 | 	mov	result1, #1
04c3c     74 00 90 FD | 	jmp	#LR__0296
04c40                 | LR__0281
04c40     02 FA 05 F6 | 	mov	result1, #2
04c44     6C 00 90 FD | 	jmp	#LR__0296
04c48                 | LR__0282
04c48     1B FA 05 F6 | 	mov	result1, #27
04c4c     64 00 90 FD | 	jmp	#LR__0296
04c50                 | LR__0283
04c50     11 FA 05 F6 | 	mov	result1, #17
04c54     5C 00 90 FD | 	jmp	#LR__0296
04c58                 | LR__0284
04c58     05 FA 05 F6 | 	mov	result1, #5
04c5c     54 00 90 FD | 	jmp	#LR__0296
04c60                 | LR__0285
04c60     06 FA 05 F6 | 	mov	result1, #6
04c64     4C 00 90 FD | 	jmp	#LR__0296
04c68                 | LR__0286
04c68     12 FA 05 F6 | 	mov	result1, #18
04c6c     44 00 90 FD | 	jmp	#LR__0296
04c70                 | LR__0287
04c70     13 FA 05 F6 | 	mov	result1, #19
04c74     3C 00 90 FD | 	jmp	#LR__0296
04c78                 | LR__0288
04c78     0C FA 05 F6 | 	mov	result1, #12
04c7c     34 00 90 FD | 	jmp	#LR__0296
04c80                 | LR__0289
04c80     14 FA 05 F6 | 	mov	result1, #20
04c84     2C 00 90 FD | 	jmp	#LR__0296
04c88                 | LR__0290
04c88     15 FA 05 F6 | 	mov	result1, #21
04c8c     24 00 90 FD | 	jmp	#LR__0296
04c90                 | LR__0291
04c90     16 FA 05 F6 | 	mov	result1, #22
04c94     1C 00 90 FD | 	jmp	#LR__0296
04c98                 | LR__0292
04c98     FF FB 05 F6 | 	mov	result1, #511
04c9c     14 00 90 FD | 	jmp	#LR__0296
04ca0                 | LR__0293
04ca0     0F FA 05 F6 | 	mov	result1, #15
04ca4     0C 00 90 FD | 	jmp	#LR__0296
04ca8                 | LR__0294
04ca8     10 FA 05 F6 | 	mov	result1, #16
04cac     04 00 90 FD | 	jmp	#LR__0296
04cb0                 | LR__0295
04cb0     00 FA 05 F6 | 	mov	result1, #0
04cb4                 | LR__0296
04cb4     A7 F0 03 F6 | 	mov	ptra, fp
04cb8     B2 00 A0 FD | 	call	#popregs_
04cbc                 | _isseparator_ret
04cbc     2D 00 64 FD | 	ret
04cc0                 | 
04cc0                 | ' 
04cc0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04cc0                 | ' 
04cc0                 | ' function iscommand(s as string) as ubyte
04cc0                 | _iscommand
04cc0     01 4A 05 F6 | 	mov	COUNT_, #1
04cc4     A8 00 A0 FD | 	call	#pushregs_
04cc8                 | ' 
04cc8                 | ' select case s
04cc8     09 27 02 F6 | 	mov	local01, arg01
04ccc     8E 01 00 FF 
04cd0     5C 15 06 F6 | 	mov	arg02, ##@LR__5240
04cd4     13 13 02 F6 | 	mov	arg01, local01
04cd8     F4 03 B2 FD | 	call	#__system___string_cmp
04cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce0     24 0D 90 AD |  if_e	jmp	#LR__0300
04ce4     8E 01 00 FF 
04ce8     61 15 06 F6 | 	mov	arg02, ##@LR__5241
04cec     13 13 02 F6 | 	mov	arg01, local01
04cf0     DC 03 B2 FD | 	call	#__system___string_cmp
04cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf8     14 0D 90 AD |  if_e	jmp	#LR__0301
04cfc     8E 01 00 FF 
04d00     64 15 06 F6 | 	mov	arg02, ##@LR__5242
04d04     13 13 02 F6 | 	mov	arg01, local01
04d08     C4 03 B2 FD | 	call	#__system___string_cmp
04d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d10     04 0D 90 AD |  if_e	jmp	#LR__0302
04d14     8E 01 00 FF 
04d18     69 15 06 F6 | 	mov	arg02, ##@LR__5243
04d1c     13 13 02 F6 | 	mov	arg01, local01
04d20     AC 03 B2 FD | 	call	#__system___string_cmp
04d24     00 FA 0D F2 | 	cmp	result1, #0 wz
04d28     F4 0C 90 AD |  if_e	jmp	#LR__0303
04d2c     8E 01 00 FF 
04d30     6D 15 06 F6 | 	mov	arg02, ##@LR__5244
04d34     13 13 02 F6 | 	mov	arg01, local01
04d38     94 03 B2 FD | 	call	#__system___string_cmp
04d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d40     E4 0C 90 AD |  if_e	jmp	#LR__0304
04d44     8E 01 00 FF 
04d48     72 15 06 F6 | 	mov	arg02, ##@LR__5245
04d4c     13 13 02 F6 | 	mov	arg01, local01
04d50     7C 03 B2 FD | 	call	#__system___string_cmp
04d54     00 FA 0D F2 | 	cmp	result1, #0 wz
04d58     D4 0C 90 AD |  if_e	jmp	#LR__0305
04d5c     8E 01 00 FF 
04d60     76 15 06 F6 | 	mov	arg02, ##@LR__5246
04d64     13 13 02 F6 | 	mov	arg01, local01
04d68     64 03 B2 FD | 	call	#__system___string_cmp
04d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d70     C4 0C 90 AD |  if_e	jmp	#LR__0306
04d74     8E 01 00 FF 
04d78     79 15 06 F6 | 	mov	arg02, ##@LR__5247
04d7c     13 13 02 F6 | 	mov	arg01, local01
04d80     4C 03 B2 FD | 	call	#__system___string_cmp
04d84     00 FA 0D F2 | 	cmp	result1, #0 wz
04d88     B4 0C 90 AD |  if_e	jmp	#LR__0307
04d8c     8E 01 00 FF 
04d90     84 15 06 F6 | 	mov	arg02, ##@LR__5248
04d94     13 13 02 F6 | 	mov	arg01, local01
04d98     34 03 B2 FD | 	call	#__system___string_cmp
04d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04da0     A4 0C 90 AD |  if_e	jmp	#LR__0308
04da4     8E 01 00 FF 
04da8     88 15 06 F6 | 	mov	arg02, ##@LR__5249
04dac     13 13 02 F6 | 	mov	arg01, local01
04db0     1C 03 B2 FD | 	call	#__system___string_cmp
04db4     00 FA 0D F2 | 	cmp	result1, #0 wz
04db8     94 0C 90 AD |  if_e	jmp	#LR__0309
04dbc     8E 01 00 FF 
04dc0     92 15 06 F6 | 	mov	arg02, ##@LR__5250
04dc4     13 13 02 F6 | 	mov	arg01, local01
04dc8     04 03 B2 FD | 	call	#__system___string_cmp
04dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd0     84 0C 90 AD |  if_e	jmp	#LR__0310
04dd4     8E 01 00 FF 
04dd8     96 15 06 F6 | 	mov	arg02, ##@LR__5251
04ddc     13 13 02 F6 | 	mov	arg01, local01
04de0     EC 02 B2 FD | 	call	#__system___string_cmp
04de4     00 FA 0D F2 | 	cmp	result1, #0 wz
04de8     74 0C 90 AD |  if_e	jmp	#LR__0311
04dec     8E 01 00 FF 
04df0     A0 15 06 F6 | 	mov	arg02, ##@LR__5252
04df4     13 13 02 F6 | 	mov	arg01, local01
04df8     D4 02 B2 FD | 	call	#__system___string_cmp
04dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04e00     64 0C 90 AD |  if_e	jmp	#LR__0312
04e04     8E 01 00 FF 
04e08     A4 15 06 F6 | 	mov	arg02, ##@LR__5253
04e0c     13 13 02 F6 | 	mov	arg01, local01
04e10     BC 02 B2 FD | 	call	#__system___string_cmp
04e14     00 FA 0D F2 | 	cmp	result1, #0 wz
04e18     54 0C 90 AD |  if_e	jmp	#LR__0313
04e1c     8E 01 00 FF 
04e20     AF 15 06 F6 | 	mov	arg02, ##@LR__5254
04e24     13 13 02 F6 | 	mov	arg01, local01
04e28     A4 02 B2 FD | 	call	#__system___string_cmp
04e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e30     44 0C 90 AD |  if_e	jmp	#LR__0314
04e34     8E 01 00 FF 
04e38     B3 15 06 F6 | 	mov	arg02, ##@LR__5255
04e3c     13 13 02 F6 | 	mov	arg01, local01
04e40     8C 02 B2 FD | 	call	#__system___string_cmp
04e44     00 FA 0D F2 | 	cmp	result1, #0 wz
04e48     34 0C 90 AD |  if_e	jmp	#LR__0315
04e4c     8E 01 00 FF 
04e50     BA 15 06 F6 | 	mov	arg02, ##@LR__5256
04e54     13 13 02 F6 | 	mov	arg01, local01
04e58     74 02 B2 FD | 	call	#__system___string_cmp
04e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e60     24 0C 90 AD |  if_e	jmp	#LR__0316
04e64     8E 01 00 FF 
04e68     BE 15 06 F6 | 	mov	arg02, ##@LR__5257
04e6c     13 13 02 F6 | 	mov	arg01, local01
04e70     5C 02 B2 FD | 	call	#__system___string_cmp
04e74     00 FA 0D F2 | 	cmp	result1, #0 wz
04e78     14 0C 90 AD |  if_e	jmp	#LR__0317
04e7c     8E 01 00 FF 
04e80     C4 15 06 F6 | 	mov	arg02, ##@LR__5258
04e84     13 13 02 F6 | 	mov	arg01, local01
04e88     44 02 B2 FD | 	call	#__system___string_cmp
04e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e90     04 0C 90 AD |  if_e	jmp	#LR__0318
04e94     8E 01 00 FF 
04e98     CA 15 06 F6 | 	mov	arg02, ##@LR__5259
04e9c     13 13 02 F6 | 	mov	arg01, local01
04ea0     2C 02 B2 FD | 	call	#__system___string_cmp
04ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea8     F4 0B 90 AD |  if_e	jmp	#LR__0319
04eac     8E 01 00 FF 
04eb0     CE 15 06 F6 | 	mov	arg02, ##@LR__5260
04eb4     13 13 02 F6 | 	mov	arg01, local01
04eb8     14 02 B2 FD | 	call	#__system___string_cmp
04ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec0     E4 0B 90 AD |  if_e	jmp	#LR__0320
04ec4     8E 01 00 FF 
04ec8     D6 15 06 F6 | 	mov	arg02, ##@LR__5261
04ecc     13 13 02 F6 | 	mov	arg01, local01
04ed0     FC 01 B2 FD | 	call	#__system___string_cmp
04ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed8     D4 0B 90 AD |  if_e	jmp	#LR__0321
04edc     8E 01 00 FF 
04ee0     DC 15 06 F6 | 	mov	arg02, ##@LR__5262
04ee4     13 13 02 F6 | 	mov	arg01, local01
04ee8     E4 01 B2 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     C4 0B 90 AD |  if_e	jmp	#LR__0322
04ef4     8E 01 00 FF 
04ef8     DF 15 06 F6 | 	mov	arg02, ##@LR__5263
04efc     13 13 02 F6 | 	mov	arg01, local01
04f00     CC 01 B2 FD | 	call	#__system___string_cmp
04f04     00 FA 0D F2 | 	cmp	result1, #0 wz
04f08     B4 0B 90 AD |  if_e	jmp	#LR__0323
04f0c     8E 01 00 FF 
04f10     E4 15 06 F6 | 	mov	arg02, ##@LR__5264
04f14     13 13 02 F6 | 	mov	arg01, local01
04f18     B4 01 B2 FD | 	call	#__system___string_cmp
04f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f20     A4 0B 90 AD |  if_e	jmp	#LR__0324
04f24     8E 01 00 FF 
04f28     EB 15 06 F6 | 	mov	arg02, ##@LR__5265
04f2c     13 13 02 F6 | 	mov	arg01, local01
04f30     9C 01 B2 FD | 	call	#__system___string_cmp
04f34     00 FA 0D F2 | 	cmp	result1, #0 wz
04f38     94 0B 90 AD |  if_e	jmp	#LR__0325
04f3c     8E 01 00 FF 
04f40     F0 15 06 F6 | 	mov	arg02, ##@LR__5266
04f44     13 13 02 F6 | 	mov	arg01, local01
04f48     84 01 B2 FD | 	call	#__system___string_cmp
04f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f50     84 0B 90 AD |  if_e	jmp	#LR__0326
04f54     8E 01 00 FF 
04f58     F8 15 06 F6 | 	mov	arg02, ##@LR__5267
04f5c     13 13 02 F6 | 	mov	arg01, local01
04f60     6C 01 B2 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     74 0B 90 AD |  if_e	jmp	#LR__0327
04f6c     8E 01 00 FF 
04f70     FF 15 06 F6 | 	mov	arg02, ##@LR__5268
04f74     13 13 02 F6 | 	mov	arg01, local01
04f78     54 01 B2 FD | 	call	#__system___string_cmp
04f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f80     64 0B 90 AD |  if_e	jmp	#LR__0328
04f84     8F 01 00 FF 
04f88     06 14 06 F6 | 	mov	arg02, ##@LR__5269
04f8c     13 13 02 F6 | 	mov	arg01, local01
04f90     3C 01 B2 FD | 	call	#__system___string_cmp
04f94     00 FA 0D F2 | 	cmp	result1, #0 wz
04f98     54 0B 90 AD |  if_e	jmp	#LR__0329
04f9c     8F 01 00 FF 
04fa0     10 14 06 F6 | 	mov	arg02, ##@LR__5270
04fa4     13 13 02 F6 | 	mov	arg01, local01
04fa8     24 01 B2 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     44 0B 90 AD |  if_e	jmp	#LR__0330
04fb4     8F 01 00 FF 
04fb8     14 14 06 F6 | 	mov	arg02, ##@LR__5271
04fbc     13 13 02 F6 | 	mov	arg01, local01
04fc0     0C 01 B2 FD | 	call	#__system___string_cmp
04fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc8     34 0B 90 AD |  if_e	jmp	#LR__0331
04fcc     8F 01 00 FF 
04fd0     18 14 06 F6 | 	mov	arg02, ##@LR__5272
04fd4     13 13 02 F6 | 	mov	arg01, local01
04fd8     F4 00 B2 FD | 	call	#__system___string_cmp
04fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe0     24 0B 90 AD |  if_e	jmp	#LR__0332
04fe4     8F 01 00 FF 
04fe8     1F 14 06 F6 | 	mov	arg02, ##@LR__5273
04fec     13 13 02 F6 | 	mov	arg01, local01
04ff0     DC 00 B2 FD | 	call	#__system___string_cmp
04ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff8     14 0B 90 AD |  if_e	jmp	#LR__0333
04ffc     8F 01 00 FF 
05000     23 14 06 F6 | 	mov	arg02, ##@LR__5274
05004     13 13 02 F6 | 	mov	arg01, local01
05008     C4 00 B2 FD | 	call	#__system___string_cmp
0500c     00 FA 0D F2 | 	cmp	result1, #0 wz
05010     04 0B 90 AD |  if_e	jmp	#LR__0334
05014     8F 01 00 FF 
05018     27 14 06 F6 | 	mov	arg02, ##@LR__5275
0501c     13 13 02 F6 | 	mov	arg01, local01
05020     AC 00 B2 FD | 	call	#__system___string_cmp
05024     00 FA 0D F2 | 	cmp	result1, #0 wz
05028     F4 0A 90 AD |  if_e	jmp	#LR__0335
0502c     8F 01 00 FF 
05030     2D 14 06 F6 | 	mov	arg02, ##@LR__5276
05034     13 13 02 F6 | 	mov	arg01, local01
05038     94 00 B2 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     E4 0A 90 AD |  if_e	jmp	#LR__0336
05044     8F 01 00 FF 
05048     32 14 06 F6 | 	mov	arg02, ##@LR__5277
0504c     13 13 02 F6 | 	mov	arg01, local01
05050     7C 00 B2 FD | 	call	#__system___string_cmp
05054     00 FA 0D F2 | 	cmp	result1, #0 wz
05058     D4 0A 90 AD |  if_e	jmp	#LR__0337
0505c     8F 01 00 FF 
05060     39 14 06 F6 | 	mov	arg02, ##@LR__5278
05064     13 13 02 F6 | 	mov	arg01, local01
05068     64 00 B2 FD | 	call	#__system___string_cmp
0506c     00 FA 0D F2 | 	cmp	result1, #0 wz
05070     C4 0A 90 AD |  if_e	jmp	#LR__0338
05074     8F 01 00 FF 
05078     3D 14 06 F6 | 	mov	arg02, ##@LR__5279
0507c     13 13 02 F6 | 	mov	arg01, local01
05080     4C 00 B2 FD | 	call	#__system___string_cmp
05084     00 FA 0D F2 | 	cmp	result1, #0 wz
05088     B4 0A 90 AD |  if_e	jmp	#LR__0339
0508c     8F 01 00 FF 
05090     42 14 06 F6 | 	mov	arg02, ##@LR__5280
05094     13 13 02 F6 | 	mov	arg01, local01
05098     34 00 B2 FD | 	call	#__system___string_cmp
0509c     00 FA 0D F2 | 	cmp	result1, #0 wz
050a0     A4 0A 90 AD |  if_e	jmp	#LR__0340
050a4     8F 01 00 FF 
050a8     46 14 06 F6 | 	mov	arg02, ##@LR__5281
050ac     13 13 02 F6 | 	mov	arg01, local01
050b0     1C 00 B2 FD | 	call	#__system___string_cmp
050b4     00 FA 0D F2 | 	cmp	result1, #0 wz
050b8     94 0A 90 AD |  if_e	jmp	#LR__0341
050bc     8F 01 00 FF 
050c0     4C 14 06 F6 | 	mov	arg02, ##@LR__5282
050c4     13 13 02 F6 | 	mov	arg01, local01
050c8     04 00 B2 FD | 	call	#__system___string_cmp
050cc     00 FA 0D F2 | 	cmp	result1, #0 wz
050d0     84 0A 90 AD |  if_e	jmp	#LR__0342
050d4     8F 01 00 FF 
050d8     4F 14 06 F6 | 	mov	arg02, ##@LR__5283
050dc     13 13 02 F6 | 	mov	arg01, local01
050e0     EC FF B1 FD | 	call	#__system___string_cmp
050e4     00 FA 0D F2 | 	cmp	result1, #0 wz
050e8     74 0A 90 AD |  if_e	jmp	#LR__0343
050ec     8F 01 00 FF 
050f0     57 14 06 F6 | 	mov	arg02, ##@LR__5284
050f4     13 13 02 F6 | 	mov	arg01, local01
050f8     D4 FF B1 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     64 0A 90 AD |  if_e	jmp	#LR__0344
05104     8F 01 00 FF 
05108     5B 14 06 F6 | 	mov	arg02, ##@LR__5285
0510c     13 13 02 F6 | 	mov	arg01, local01
05110     BC FF B1 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     54 0A 90 AD |  if_e	jmp	#LR__0345
0511c     8F 01 00 FF 
05120     60 14 06 F6 | 	mov	arg02, ##@LR__5286
05124     13 13 02 F6 | 	mov	arg01, local01
05128     A4 FF B1 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     44 0A 90 AD |  if_e	jmp	#LR__0346
05134     8F 01 00 FF 
05138     64 14 06 F6 | 	mov	arg02, ##@LR__5287
0513c     13 13 02 F6 | 	mov	arg01, local01
05140     8C FF B1 FD | 	call	#__system___string_cmp
05144     00 FA 0D F2 | 	cmp	result1, #0 wz
05148     34 0A 90 AD |  if_e	jmp	#LR__0347
0514c     8F 01 00 FF 
05150     69 14 06 F6 | 	mov	arg02, ##@LR__5288
05154     13 13 02 F6 | 	mov	arg01, local01
05158     74 FF B1 FD | 	call	#__system___string_cmp
0515c     00 FA 0D F2 | 	cmp	result1, #0 wz
05160     24 0A 90 AD |  if_e	jmp	#LR__0348
05164     8F 01 00 FF 
05168     6D 14 06 F6 | 	mov	arg02, ##@LR__5289
0516c     13 13 02 F6 | 	mov	arg01, local01
05170     5C FF B1 FD | 	call	#__system___string_cmp
05174     00 FA 0D F2 | 	cmp	result1, #0 wz
05178     14 0A 90 AD |  if_e	jmp	#LR__0349
0517c     8F 01 00 FF 
05180     70 14 06 F6 | 	mov	arg02, ##@LR__5290
05184     13 13 02 F6 | 	mov	arg01, local01
05188     44 FF B1 FD | 	call	#__system___string_cmp
0518c     00 FA 0D F2 | 	cmp	result1, #0 wz
05190     04 0A 90 AD |  if_e	jmp	#LR__0350
05194     8F 01 00 FF 
05198     76 14 06 F6 | 	mov	arg02, ##@LR__5291
0519c     13 13 02 F6 | 	mov	arg01, local01
051a0     2C FF B1 FD | 	call	#__system___string_cmp
051a4     00 FA 0D F2 | 	cmp	result1, #0 wz
051a8     F4 09 90 AD |  if_e	jmp	#LR__0351
051ac     8F 01 00 FF 
051b0     7A 14 06 F6 | 	mov	arg02, ##@LR__5292
051b4     13 13 02 F6 | 	mov	arg01, local01
051b8     14 FF B1 FD | 	call	#__system___string_cmp
051bc     00 FA 0D F2 | 	cmp	result1, #0 wz
051c0     E4 09 90 AD |  if_e	jmp	#LR__0352
051c4     8F 01 00 FF 
051c8     7E 14 06 F6 | 	mov	arg02, ##@LR__5293
051cc     13 13 02 F6 | 	mov	arg01, local01
051d0     FC FE B1 FD | 	call	#__system___string_cmp
051d4     00 FA 0D F2 | 	cmp	result1, #0 wz
051d8     D4 09 90 AD |  if_e	jmp	#LR__0353
051dc     8F 01 00 FF 
051e0     84 14 06 F6 | 	mov	arg02, ##@LR__5294
051e4     13 13 02 F6 | 	mov	arg01, local01
051e8     E4 FE B1 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     C4 09 90 AD |  if_e	jmp	#LR__0354
051f4     8F 01 00 FF 
051f8     89 14 06 F6 | 	mov	arg02, ##@LR__5295
051fc     13 13 02 F6 | 	mov	arg01, local01
05200     CC FE B1 FD | 	call	#__system___string_cmp
05204     00 FA 0D F2 | 	cmp	result1, #0 wz
05208     B4 09 90 AD |  if_e	jmp	#LR__0355
0520c     8F 01 00 FF 
05210     8C 14 06 F6 | 	mov	arg02, ##@LR__5296
05214     13 13 02 F6 | 	mov	arg01, local01
05218     B4 FE B1 FD | 	call	#__system___string_cmp
0521c     00 FA 0D F2 | 	cmp	result1, #0 wz
05220     A4 09 90 AD |  if_e	jmp	#LR__0356
05224     8F 01 00 FF 
05228     8F 14 06 F6 | 	mov	arg02, ##@LR__5297
0522c     13 13 02 F6 | 	mov	arg01, local01
05230     9C FE B1 FD | 	call	#__system___string_cmp
05234     00 FA 0D F2 | 	cmp	result1, #0 wz
05238     94 09 90 AD |  if_e	jmp	#LR__0357
0523c     8F 01 00 FF 
05240     93 14 06 F6 | 	mov	arg02, ##@LR__5298
05244     13 13 02 F6 | 	mov	arg01, local01
05248     84 FE B1 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     84 09 90 AD |  if_e	jmp	#LR__0358
05254     8F 01 00 FF 
05258     96 14 06 F6 | 	mov	arg02, ##@LR__5299
0525c     13 13 02 F6 | 	mov	arg01, local01
05260     6C FE B1 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     74 09 90 AD |  if_e	jmp	#LR__0359
0526c     8F 01 00 FF 
05270     9C 14 06 F6 | 	mov	arg02, ##@LR__5300
05274     13 13 02 F6 | 	mov	arg01, local01
05278     54 FE B1 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     64 09 90 AD |  if_e	jmp	#LR__0360
05284     8F 01 00 FF 
05288     A1 14 06 F6 | 	mov	arg02, ##@LR__5301
0528c     13 13 02 F6 | 	mov	arg01, local01
05290     3C FE B1 FD | 	call	#__system___string_cmp
05294     00 FA 0D F2 | 	cmp	result1, #0 wz
05298     54 09 90 AD |  if_e	jmp	#LR__0361
0529c     8F 01 00 FF 
052a0     A4 14 06 F6 | 	mov	arg02, ##@LR__5302
052a4     13 13 02 F6 | 	mov	arg01, local01
052a8     24 FE B1 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     44 09 90 AD |  if_e	jmp	#LR__0362
052b4     8F 01 00 FF 
052b8     A9 14 06 F6 | 	mov	arg02, ##@LR__5303
052bc     13 13 02 F6 | 	mov	arg01, local01
052c0     0C FE B1 FD | 	call	#__system___string_cmp
052c4     00 FA 0D F2 | 	cmp	result1, #0 wz
052c8     34 09 90 AD |  if_e	jmp	#LR__0363
052cc     8F 01 00 FF 
052d0     AD 14 06 F6 | 	mov	arg02, ##@LR__5304
052d4     13 13 02 F6 | 	mov	arg01, local01
052d8     F4 FD B1 FD | 	call	#__system___string_cmp
052dc     00 FA 0D F2 | 	cmp	result1, #0 wz
052e0     24 09 90 AD |  if_e	jmp	#LR__0364
052e4     8F 01 00 FF 
052e8     B3 14 06 F6 | 	mov	arg02, ##@LR__5305
052ec     13 13 02 F6 | 	mov	arg01, local01
052f0     DC FD B1 FD | 	call	#__system___string_cmp
052f4     00 FA 0D F2 | 	cmp	result1, #0 wz
052f8     14 09 90 AD |  if_e	jmp	#LR__0365
052fc     8F 01 00 FF 
05300     B9 14 06 F6 | 	mov	arg02, ##@LR__5306
05304     13 13 02 F6 | 	mov	arg01, local01
05308     C4 FD B1 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     04 09 90 AD |  if_e	jmp	#LR__0366
05314     8F 01 00 FF 
05318     BE 14 06 F6 | 	mov	arg02, ##@LR__5307
0531c     13 13 02 F6 | 	mov	arg01, local01
05320     AC FD B1 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     F4 08 90 AD |  if_e	jmp	#LR__0367
0532c     8F 01 00 FF 
05330     C1 14 06 F6 | 	mov	arg02, ##@LR__5308
05334     13 13 02 F6 | 	mov	arg01, local01
05338     94 FD B1 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     E4 08 90 AD |  if_e	jmp	#LR__0368
05344     8F 01 00 FF 
05348     C7 14 06 F6 | 	mov	arg02, ##@LR__5309
0534c     13 13 02 F6 | 	mov	arg01, local01
05350     7C FD B1 FD | 	call	#__system___string_cmp
05354     00 FA 0D F2 | 	cmp	result1, #0 wz
05358     D4 08 90 AD |  if_e	jmp	#LR__0369
0535c     8F 01 00 FF 
05360     CB 14 06 F6 | 	mov	arg02, ##@LR__5310
05364     13 13 02 F6 | 	mov	arg01, local01
05368     64 FD B1 FD | 	call	#__system___string_cmp
0536c     00 FA 0D F2 | 	cmp	result1, #0 wz
05370     C4 08 90 AD |  if_e	jmp	#LR__0370
05374     8F 01 00 FF 
05378     D0 14 06 F6 | 	mov	arg02, ##@LR__5311
0537c     13 13 02 F6 | 	mov	arg01, local01
05380     4C FD B1 FD | 	call	#__system___string_cmp
05384     00 FA 0D F2 | 	cmp	result1, #0 wz
05388     B4 08 90 AD |  if_e	jmp	#LR__0371
0538c     8F 01 00 FF 
05390     D3 14 06 F6 | 	mov	arg02, ##@LR__5312
05394     13 13 02 F6 | 	mov	arg01, local01
05398     34 FD B1 FD | 	call	#__system___string_cmp
0539c     00 FA 0D F2 | 	cmp	result1, #0 wz
053a0     A4 08 90 AD |  if_e	jmp	#LR__0372
053a4     8F 01 00 FF 
053a8     D6 14 06 F6 | 	mov	arg02, ##@LR__5313
053ac     13 13 02 F6 | 	mov	arg01, local01
053b0     1C FD B1 FD | 	call	#__system___string_cmp
053b4     00 FA 0D F2 | 	cmp	result1, #0 wz
053b8     94 08 90 AD |  if_e	jmp	#LR__0373
053bc     8F 01 00 FF 
053c0     DB 14 06 F6 | 	mov	arg02, ##@LR__5314
053c4     13 13 02 F6 | 	mov	arg01, local01
053c8     04 FD B1 FD | 	call	#__system___string_cmp
053cc     00 FA 0D F2 | 	cmp	result1, #0 wz
053d0     84 08 90 AD |  if_e	jmp	#LR__0374
053d4     8F 01 00 FF 
053d8     E1 14 06 F6 | 	mov	arg02, ##@LR__5315
053dc     13 13 02 F6 | 	mov	arg01, local01
053e0     EC FC B1 FD | 	call	#__system___string_cmp
053e4     00 FA 0D F2 | 	cmp	result1, #0 wz
053e8     74 08 90 AD |  if_e	jmp	#LR__0375
053ec     8F 01 00 FF 
053f0     E5 14 06 F6 | 	mov	arg02, ##@LR__5316
053f4     13 13 02 F6 | 	mov	arg01, local01
053f8     D4 FC B1 FD | 	call	#__system___string_cmp
053fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05400     64 08 90 AD |  if_e	jmp	#LR__0376
05404     8F 01 00 FF 
05408     EE 14 06 F6 | 	mov	arg02, ##@LR__5317
0540c     13 13 02 F6 | 	mov	arg01, local01
05410     BC FC B1 FD | 	call	#__system___string_cmp
05414     00 FA 0D F2 | 	cmp	result1, #0 wz
05418     54 08 90 AD |  if_e	jmp	#LR__0377
0541c     8F 01 00 FF 
05420     F4 14 06 F6 | 	mov	arg02, ##@LR__5318
05424     13 13 02 F6 | 	mov	arg01, local01
05428     A4 FC B1 FD | 	call	#__system___string_cmp
0542c     00 FA 0D F2 | 	cmp	result1, #0 wz
05430     44 08 90 AD |  if_e	jmp	#LR__0378
05434     8F 01 00 FF 
05438     FA 14 06 F6 | 	mov	arg02, ##@LR__5319
0543c     13 13 02 F6 | 	mov	arg01, local01
05440     8C FC B1 FD | 	call	#__system___string_cmp
05444     00 FA 0D F2 | 	cmp	result1, #0 wz
05448     34 08 90 AD |  if_e	jmp	#LR__0379
0544c     8F 01 00 FF 
05450     03 15 06 F6 | 	mov	arg02, ##@LR__5320
05454     13 13 02 F6 | 	mov	arg01, local01
05458     74 FC B1 FD | 	call	#__system___string_cmp
0545c     00 FA 0D F2 | 	cmp	result1, #0 wz
05460     24 08 90 AD |  if_e	jmp	#LR__0380
05464     8F 01 00 FF 
05468     0D 15 06 F6 | 	mov	arg02, ##@LR__5321
0546c     13 13 02 F6 | 	mov	arg01, local01
05470     5C FC B1 FD | 	call	#__system___string_cmp
05474     00 FA 0D F2 | 	cmp	result1, #0 wz
05478     14 08 90 AD |  if_e	jmp	#LR__0381
0547c     8F 01 00 FF 
05480     16 15 06 F6 | 	mov	arg02, ##@LR__5322
05484     13 13 02 F6 | 	mov	arg01, local01
05488     44 FC B1 FD | 	call	#__system___string_cmp
0548c     00 FA 0D F2 | 	cmp	result1, #0 wz
05490     04 08 90 AD |  if_e	jmp	#LR__0382
05494     8F 01 00 FF 
05498     1B 15 06 F6 | 	mov	arg02, ##@LR__5323
0549c     13 13 02 F6 | 	mov	arg01, local01
054a0     2C FC B1 FD | 	call	#__system___string_cmp
054a4     00 FA 0D F2 | 	cmp	result1, #0 wz
054a8     F4 07 90 AD |  if_e	jmp	#LR__0383
054ac     8F 01 00 FF 
054b0     1E 15 06 F6 | 	mov	arg02, ##@LR__5324
054b4     13 13 02 F6 | 	mov	arg01, local01
054b8     14 FC B1 FD | 	call	#__system___string_cmp
054bc     00 FA 0D F2 | 	cmp	result1, #0 wz
054c0     E4 07 90 AD |  if_e	jmp	#LR__0384
054c4     8F 01 00 FF 
054c8     23 15 06 F6 | 	mov	arg02, ##@LR__5325
054cc     13 13 02 F6 | 	mov	arg01, local01
054d0     FC FB B1 FD | 	call	#__system___string_cmp
054d4     00 FA 0D F2 | 	cmp	result1, #0 wz
054d8     D4 07 90 AD |  if_e	jmp	#LR__0385
054dc     8F 01 00 FF 
054e0     27 15 06 F6 | 	mov	arg02, ##@LR__5326
054e4     13 13 02 F6 | 	mov	arg01, local01
054e8     E4 FB B1 FD | 	call	#__system___string_cmp
054ec     00 FA 0D F2 | 	cmp	result1, #0 wz
054f0     C4 07 90 AD |  if_e	jmp	#LR__0386
054f4     8F 01 00 FF 
054f8     2C 15 06 F6 | 	mov	arg02, ##@LR__5327
054fc     13 13 02 F6 | 	mov	arg01, local01
05500     CC FB B1 FD | 	call	#__system___string_cmp
05504     00 FA 0D F2 | 	cmp	result1, #0 wz
05508     B4 07 90 AD |  if_e	jmp	#LR__0387
0550c     8F 01 00 FF 
05510     30 15 06 F6 | 	mov	arg02, ##@LR__5328
05514     13 13 02 F6 | 	mov	arg01, local01
05518     B4 FB B1 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     A4 07 90 AD |  if_e	jmp	#LR__0388
05524     8F 01 00 FF 
05528     39 15 06 F6 | 	mov	arg02, ##@LR__5329
0552c     13 13 02 F6 | 	mov	arg01, local01
05530     9C FB B1 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     94 07 90 AD |  if_e	jmp	#LR__0389
0553c     8F 01 00 FF 
05540     3E 15 06 F6 | 	mov	arg02, ##@LR__5330
05544     13 13 02 F6 | 	mov	arg01, local01
05548     84 FB B1 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     84 07 90 AD |  if_e	jmp	#LR__0390
05554     8F 01 00 FF 
05558     44 15 06 F6 | 	mov	arg02, ##@LR__5331
0555c     13 13 02 F6 | 	mov	arg01, local01
05560     6C FB B1 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     74 07 90 AD |  if_e	jmp	#LR__0391
0556c     8F 01 00 FF 
05570     46 15 06 F6 | 	mov	arg02, ##@LR__5332
05574     13 13 02 F6 | 	mov	arg01, local01
05578     54 FB B1 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     64 07 90 AD |  if_e	jmp	#LR__0392
05584     8F 01 00 FF 
05588     4A 15 06 F6 | 	mov	arg02, ##@LR__5333
0558c     13 13 02 F6 | 	mov	arg01, local01
05590     3C FB B1 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     54 07 90 AD |  if_e	jmp	#LR__0393
0559c     8F 01 00 FF 
055a0     4E 15 06 F6 | 	mov	arg02, ##@LR__5334
055a4     13 13 02 F6 | 	mov	arg01, local01
055a8     24 FB B1 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     44 07 90 AD |  if_e	jmp	#LR__0394
055b4     8F 01 00 FF 
055b8     53 15 06 F6 | 	mov	arg02, ##@LR__5335
055bc     13 13 02 F6 | 	mov	arg01, local01
055c0     0C FB B1 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     34 07 90 AD |  if_e	jmp	#LR__0395
055cc     8F 01 00 FF 
055d0     5B 15 06 F6 | 	mov	arg02, ##@LR__5336
055d4     13 13 02 F6 | 	mov	arg01, local01
055d8     F4 FA B1 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     24 07 90 AD |  if_e	jmp	#LR__0396
055e4     8F 01 00 FF 
055e8     5F 15 06 F6 | 	mov	arg02, ##@LR__5337
055ec     13 13 02 F6 | 	mov	arg01, local01
055f0     DC FA B1 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     14 07 90 AD |  if_e	jmp	#LR__0397
055fc     8F 01 00 FF 
05600     61 15 06 F6 | 	mov	arg02, ##@LR__5338
05604     13 13 02 F6 | 	mov	arg01, local01
05608     C4 FA B1 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     04 07 90 AD |  if_e	jmp	#LR__0398
05614     8F 01 00 FF 
05618     69 15 06 F6 | 	mov	arg02, ##@LR__5339
0561c     13 13 02 F6 | 	mov	arg01, local01
05620     AC FA B1 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     F4 06 90 AD |  if_e	jmp	#LR__0399
0562c     8F 01 00 FF 
05630     78 15 06 F6 | 	mov	arg02, ##@LR__5340
05634     13 13 02 F6 | 	mov	arg01, local01
05638     94 FA B1 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     E4 06 90 AD |  if_e	jmp	#LR__0400
05644     8F 01 00 FF 
05648     7C 15 06 F6 | 	mov	arg02, ##@LR__5341
0564c     13 13 02 F6 | 	mov	arg01, local01
05650     7C FA B1 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     D4 06 90 AD |  if_e	jmp	#LR__0401
0565c     8F 01 00 FF 
05660     83 15 06 F6 | 	mov	arg02, ##@LR__5342
05664     13 13 02 F6 | 	mov	arg01, local01
05668     64 FA B1 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     C4 06 90 AD |  if_e	jmp	#LR__0402
05674     8F 01 00 FF 
05678     87 15 06 F6 | 	mov	arg02, ##@LR__5343
0567c     13 13 02 F6 | 	mov	arg01, local01
05680     4C FA B1 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     B4 06 90 AD |  if_e	jmp	#LR__0403
0568c     8F 01 00 FF 
05690     8A 15 06 F6 | 	mov	arg02, ##@LR__5344
05694     13 13 02 F6 | 	mov	arg01, local01
05698     34 FA B1 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     A4 06 90 AD |  if_e	jmp	#LR__0404
056a4     8F 01 00 FF 
056a8     8F 15 06 F6 | 	mov	arg02, ##@LR__5345
056ac     13 13 02 F6 | 	mov	arg01, local01
056b0     1C FA B1 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     94 06 90 AD |  if_e	jmp	#LR__0405
056bc     8F 01 00 FF 
056c0     92 15 06 F6 | 	mov	arg02, ##@LR__5346
056c4     13 13 02 F6 | 	mov	arg01, local01
056c8     04 FA B1 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     84 06 90 AD |  if_e	jmp	#LR__0406
056d4     8F 01 00 FF 
056d8     9B 15 06 F6 | 	mov	arg02, ##@LR__5347
056dc     13 13 02 F6 | 	mov	arg01, local01
056e0     EC F9 B1 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     74 06 90 AD |  if_e	jmp	#LR__0407
056ec     8F 01 00 FF 
056f0     9F 15 06 F6 | 	mov	arg02, ##@LR__5348
056f4     13 13 02 F6 | 	mov	arg01, local01
056f8     D4 F9 B1 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     64 06 90 AD |  if_e	jmp	#LR__0408
05704     8F 01 00 FF 
05708     A8 15 06 F6 | 	mov	arg02, ##@LR__5349
0570c     13 13 02 F6 | 	mov	arg01, local01
05710     BC F9 B1 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     54 06 90 AD |  if_e	jmp	#LR__0409
0571c     8F 01 00 FF 
05720     AC 15 06 F6 | 	mov	arg02, ##@LR__5350
05724     13 13 02 F6 | 	mov	arg01, local01
05728     A4 F9 B1 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     44 06 90 AD |  if_e	jmp	#LR__0410
05734     8F 01 00 FF 
05738     B5 15 06 F6 | 	mov	arg02, ##@LR__5351
0573c     13 13 02 F6 | 	mov	arg01, local01
05740     8C F9 B1 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     34 06 90 AD |  if_e	jmp	#LR__0411
0574c     8F 01 00 FF 
05750     B9 15 06 F6 | 	mov	arg02, ##@LR__5352
05754     13 13 02 F6 | 	mov	arg01, local01
05758     74 F9 B1 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     24 06 90 AD |  if_e	jmp	#LR__0412
05764     8F 01 00 FF 
05768     C0 15 06 F6 | 	mov	arg02, ##@LR__5353
0576c     13 13 02 F6 | 	mov	arg01, local01
05770     5C F9 B1 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     14 06 90 AD |  if_e	jmp	#LR__0413
0577c     8F 01 00 FF 
05780     C4 15 06 F6 | 	mov	arg02, ##@LR__5354
05784     13 13 02 F6 | 	mov	arg01, local01
05788     44 F9 B1 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     04 06 90 AD |  if_e	jmp	#LR__0414
05794     8F 01 00 FF 
05798     CB 15 06 F6 | 	mov	arg02, ##@LR__5355
0579c     13 13 02 F6 | 	mov	arg01, local01
057a0     2C F9 B1 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     F4 05 90 AD |  if_e	jmp	#LR__0415
057ac     8F 01 00 FF 
057b0     CF 15 06 F6 | 	mov	arg02, ##@LR__5356
057b4     13 13 02 F6 | 	mov	arg01, local01
057b8     14 F9 B1 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     E4 05 90 AD |  if_e	jmp	#LR__0416
057c4     8F 01 00 FF 
057c8     D6 15 06 F6 | 	mov	arg02, ##@LR__5357
057cc     13 13 02 F6 | 	mov	arg01, local01
057d0     FC F8 B1 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     D4 05 90 AD |  if_e	jmp	#LR__0417
057dc     8F 01 00 FF 
057e0     DA 15 06 F6 | 	mov	arg02, ##@LR__5358
057e4     13 13 02 F6 | 	mov	arg01, local01
057e8     E4 F8 B1 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     C4 05 90 AD |  if_e	jmp	#LR__0418
057f4     8F 01 00 FF 
057f8     E5 15 06 F6 | 	mov	arg02, ##@LR__5359
057fc     13 13 02 F6 | 	mov	arg01, local01
05800     CC F8 B1 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     B4 05 90 AD |  if_e	jmp	#LR__0419
0580c     8F 01 00 FF 
05810     E9 15 06 F6 | 	mov	arg02, ##@LR__5360
05814     13 13 02 F6 | 	mov	arg01, local01
05818     B4 F8 B1 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     A4 05 90 AD |  if_e	jmp	#LR__0420
05824     8F 01 00 FF 
05828     F0 15 06 F6 | 	mov	arg02, ##@LR__5361
0582c     13 13 02 F6 | 	mov	arg01, local01
05830     9C F8 B1 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     94 05 90 AD |  if_e	jmp	#LR__0421
0583c     8F 01 00 FF 
05840     F4 15 06 F6 | 	mov	arg02, ##@LR__5362
05844     13 13 02 F6 | 	mov	arg01, local01
05848     84 F8 B1 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     84 05 90 AD |  if_e	jmp	#LR__0422
05854     8F 01 00 FF 
05858     FC 15 06 F6 | 	mov	arg02, ##@LR__5363
0585c     13 13 02 F6 | 	mov	arg01, local01
05860     6C F8 B1 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     74 05 90 AD |  if_e	jmp	#LR__0423
0586c     90 01 00 FF 
05870     00 14 06 F6 | 	mov	arg02, ##@LR__5364
05874     13 13 02 F6 | 	mov	arg01, local01
05878     54 F8 B1 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     64 05 90 AD |  if_e	jmp	#LR__0424
05884     90 01 00 FF 
05888     07 14 06 F6 | 	mov	arg02, ##@LR__5365
0588c     13 13 02 F6 | 	mov	arg01, local01
05890     3C F8 B1 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     54 05 90 AD |  if_e	jmp	#LR__0425
0589c     90 01 00 FF 
058a0     0E 14 06 F6 | 	mov	arg02, ##@LR__5366
058a4     13 13 02 F6 | 	mov	arg01, local01
058a8     24 F8 B1 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     44 05 90 AD |  if_e	jmp	#LR__0426
058b4     90 01 00 FF 
058b8     12 14 06 F6 | 	mov	arg02, ##@LR__5367
058bc     13 13 02 F6 | 	mov	arg01, local01
058c0     0C F8 B1 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     34 05 90 AD |  if_e	jmp	#LR__0427
058cc     90 01 00 FF 
058d0     18 14 06 F6 | 	mov	arg02, ##@LR__5368
058d4     13 13 02 F6 | 	mov	arg01, local01
058d8     F4 F7 B1 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     24 05 90 AD |  if_e	jmp	#LR__0428
058e4     90 01 00 FF 
058e8     1C 14 06 F6 | 	mov	arg02, ##@LR__5369
058ec     13 13 02 F6 | 	mov	arg01, local01
058f0     DC F7 B1 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     14 05 90 AD |  if_e	jmp	#LR__0429
058fc     90 01 00 FF 
05900     23 14 06 F6 | 	mov	arg02, ##@LR__5370
05904     13 13 02 F6 | 	mov	arg01, local01
05908     C4 F7 B1 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     04 05 90 AD |  if_e	jmp	#LR__0430
05914     90 01 00 FF 
05918     28 14 06 F6 | 	mov	arg02, ##@LR__5371
0591c     13 13 02 F6 | 	mov	arg01, local01
05920     AC F7 B1 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     F4 04 90 AD |  if_e	jmp	#LR__0431
0592c     90 01 00 FF 
05930     2D 14 06 F6 | 	mov	arg02, ##@LR__5372
05934     13 13 02 F6 | 	mov	arg01, local01
05938     94 F7 B1 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     E4 04 90 AD |  if_e	jmp	#LR__0432
05944     90 01 00 FF 
05948     34 14 06 F6 | 	mov	arg02, ##@LR__5373
0594c     13 13 02 F6 | 	mov	arg01, local01
05950     7C F7 B1 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     D4 04 90 AD |  if_e	jmp	#LR__0433
0595c     90 01 00 FF 
05960     37 14 06 F6 | 	mov	arg02, ##@LR__5374
05964     13 13 02 F6 | 	mov	arg01, local01
05968     64 F7 B1 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     C4 04 90 AD |  if_e	jmp	#LR__0434
05974     90 01 00 FF 
05978     41 14 06 F6 | 	mov	arg02, ##@LR__5375
0597c     13 13 02 F6 | 	mov	arg01, local01
05980     4C F7 B1 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     B4 04 90 AD |  if_e	jmp	#LR__0435
0598c     90 01 00 FF 
05990     45 14 06 F6 | 	mov	arg02, ##@LR__5376
05994     13 13 02 F6 | 	mov	arg01, local01
05998     34 F7 B1 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     A4 04 90 AD |  if_e	jmp	#LR__0436
059a4     90 01 00 FF 
059a8     4D 14 06 F6 | 	mov	arg02, ##@LR__5377
059ac     13 13 02 F6 | 	mov	arg01, local01
059b0     1C F7 B1 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     94 04 90 AD |  if_e	jmp	#LR__0437
059bc     90 01 00 FF 
059c0     51 14 06 F6 | 	mov	arg02, ##@LR__5378
059c4     13 13 02 F6 | 	mov	arg01, local01
059c8     04 F7 B1 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     84 04 90 AD |  if_e	jmp	#LR__0438
059d4     90 01 00 FF 
059d8     57 14 06 F6 | 	mov	arg02, ##@LR__5379
059dc     13 13 02 F6 | 	mov	arg01, local01
059e0     EC F6 B1 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     74 04 90 AD |  if_e	jmp	#LR__0439
059ec     90 01 00 FF 
059f0     5D 14 06 F6 | 	mov	arg02, ##@LR__5380
059f4     13 13 02 F6 | 	mov	arg01, local01
059f8     D4 F6 B1 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     64 04 90 AD |  if_e	jmp	#LR__0440
05a04     68 04 90 FD | 	jmp	#LR__0441
05a08                 | LR__0300
05a08     5C FA 05 F6 | 	mov	result1, #92
05a0c     64 04 90 FD | 	jmp	#LR__0442
05a10                 | LR__0301
05a10     5C FA 05 F6 | 	mov	result1, #92
05a14     5C 04 90 FD | 	jmp	#LR__0442
05a18                 | LR__0302
05a18     B9 FA 05 F6 | 	mov	result1, #185
05a1c     54 04 90 FD | 	jmp	#LR__0442
05a20                 | LR__0303
05a20     47 FA 05 F6 | 	mov	result1, #71
05a24     4C 04 90 FD | 	jmp	#LR__0442
05a28                 | LR__0304
05a28     59 FA 05 F6 | 	mov	result1, #89
05a2c     44 04 90 FD | 	jmp	#LR__0442
05a30                 | LR__0305
05a30     59 FA 05 F6 | 	mov	result1, #89
05a34     3C 04 90 FD | 	jmp	#LR__0442
05a38                 | LR__0306
05a38     C3 FA 05 F6 | 	mov	result1, #195
05a3c     34 04 90 FD | 	jmp	#LR__0442
05a40                 | LR__0307
05a40     AE FA 05 F6 | 	mov	result1, #174
05a44     2C 04 90 FD | 	jmp	#LR__0442
05a48                 | LR__0308
05a48     AE FA 05 F6 | 	mov	result1, #174
05a4c     24 04 90 FD | 	jmp	#LR__0442
05a50                 | LR__0309
05a50     B1 FA 05 F6 | 	mov	result1, #177
05a54     1C 04 90 FD | 	jmp	#LR__0442
05a58                 | LR__0310
05a58     B1 FA 05 F6 | 	mov	result1, #177
05a5c     14 04 90 FD | 	jmp	#LR__0442
05a60                 | LR__0311
05a60     AF FA 05 F6 | 	mov	result1, #175
05a64     0C 04 90 FD | 	jmp	#LR__0442
05a68                 | LR__0312
05a68     AF FA 05 F6 | 	mov	result1, #175
05a6c     04 04 90 FD | 	jmp	#LR__0442
05a70                 | LR__0313
05a70     B0 FA 05 F6 | 	mov	result1, #176
05a74     FC 03 90 FD | 	jmp	#LR__0442
05a78                 | LR__0314
05a78     B0 FA 05 F6 | 	mov	result1, #176
05a7c     F4 03 90 FD | 	jmp	#LR__0442
05a80                 | LR__0315
05a80     45 FA 05 F6 | 	mov	result1, #69
05a84     EC 03 90 FD | 	jmp	#LR__0442
05a88                 | LR__0316
05a88     45 FA 05 F6 | 	mov	result1, #69
05a8c     E4 03 90 FD | 	jmp	#LR__0442
05a90                 | LR__0317
05a90     69 FA 05 F6 | 	mov	result1, #105
05a94     DC 03 90 FD | 	jmp	#LR__0442
05a98                 | LR__0318
05a98     B4 FA 05 F6 | 	mov	result1, #180
05a9c     D4 03 90 FD | 	jmp	#LR__0442
05aa0                 | LR__0319
05aa0     40 FA 05 F6 | 	mov	result1, #64
05aa4     CC 03 90 FD | 	jmp	#LR__0442
05aa8                 | LR__0320
05aa8     CF FA 05 F6 | 	mov	result1, #207
05aac     C4 03 90 FD | 	jmp	#LR__0442
05ab0                 | LR__0321
05ab0     49 FA 05 F6 | 	mov	result1, #73
05ab4     BC 03 90 FD | 	jmp	#LR__0442
05ab8                 | LR__0322
05ab8     49 FA 05 F6 | 	mov	result1, #73
05abc     B4 03 90 FD | 	jmp	#LR__0442
05ac0                 | LR__0323
05ac0     C4 FA 05 F6 | 	mov	result1, #196
05ac4     AC 03 90 FD | 	jmp	#LR__0442
05ac8                 | LR__0324
05ac8     68 FA 05 F6 | 	mov	result1, #104
05acc     A4 03 90 FD | 	jmp	#LR__0442
05ad0                 | LR__0325
05ad0     B7 FA 05 F6 | 	mov	result1, #183
05ad4     9C 03 90 FD | 	jmp	#LR__0442
05ad8                 | LR__0326
05ad8     D9 FA 05 F6 | 	mov	result1, #217
05adc     94 03 90 FD | 	jmp	#LR__0442
05ae0                 | LR__0327
05ae0     73 FA 05 F6 | 	mov	result1, #115
05ae4     8C 03 90 FD | 	jmp	#LR__0442
05ae8                 | LR__0328
05ae8     74 FA 05 F6 | 	mov	result1, #116
05aec     84 03 90 FD | 	jmp	#LR__0442
05af0                 | LR__0329
05af0     6C FA 05 F6 | 	mov	result1, #108
05af4     7C 03 90 FD | 	jmp	#LR__0442
05af8                 | LR__0330
05af8     6C FA 05 F6 | 	mov	result1, #108
05afc     74 03 90 FD | 	jmp	#LR__0442
05b00                 | LR__0331
05b00     89 FA 05 F6 | 	mov	result1, #137
05b04     6C 03 90 FD | 	jmp	#LR__0442
05b08                 | LR__0332
05b08     C2 FA 05 F6 | 	mov	result1, #194
05b0c     64 03 90 FD | 	jmp	#LR__0442
05b10                 | LR__0333
05b10     72 FA 05 F6 | 	mov	result1, #114
05b14     5C 03 90 FD | 	jmp	#LR__0442
05b18                 | LR__0334
05b18     5D FA 05 F6 | 	mov	result1, #93
05b1c     54 03 90 FD | 	jmp	#LR__0442
05b20                 | LR__0335
05b20     96 FA 05 F6 | 	mov	result1, #150
05b24     4C 03 90 FD | 	jmp	#LR__0442
05b28                 | LR__0336
05b28     43 FA 05 F6 | 	mov	result1, #67
05b2c     44 03 90 FD | 	jmp	#LR__0442
05b30                 | LR__0337
05b30     43 FA 05 F6 | 	mov	result1, #67
05b34     3C 03 90 FD | 	jmp	#LR__0442
05b38                 | LR__0338
05b38     43 FA 05 F6 | 	mov	result1, #67
05b3c     34 03 90 FD | 	jmp	#LR__0442
05b40                 | LR__0339
05b40     5A FA 05 F6 | 	mov	result1, #90
05b44     2C 03 90 FD | 	jmp	#LR__0442
05b48                 | LR__0340
05b48     AB FA 05 F6 | 	mov	result1, #171
05b4c     24 03 90 FD | 	jmp	#LR__0442
05b50                 | LR__0341
05b50     BD FA 05 F6 | 	mov	result1, #189
05b54     1C 03 90 FD | 	jmp	#LR__0442
05b58                 | LR__0342
05b58     BD FA 05 F6 | 	mov	result1, #189
05b5c     14 03 90 FD | 	jmp	#LR__0442
05b60                 | LR__0343
05b60     46 FA 05 F6 | 	mov	result1, #70
05b64     0C 03 90 FD | 	jmp	#LR__0442
05b68                 | LR__0344
05b68     46 FA 05 F6 | 	mov	result1, #70
05b6c     04 03 90 FD | 	jmp	#LR__0442
05b70                 | LR__0345
05b70     71 FA 05 F6 | 	mov	result1, #113
05b74     FC 02 90 FD | 	jmp	#LR__0442
05b78                 | LR__0346
05b78     71 FA 05 F6 | 	mov	result1, #113
05b7c     F4 02 90 FD | 	jmp	#LR__0442
05b80                 | LR__0347
05b80     60 FA 05 F6 | 	mov	result1, #96
05b84     EC 02 90 FD | 	jmp	#LR__0442
05b88                 | LR__0348
05b88     4A FA 05 F6 | 	mov	result1, #74
05b8c     E4 02 90 FD | 	jmp	#LR__0442
05b90                 | LR__0349
05b90     4A FA 05 F6 | 	mov	result1, #74
05b94     DC 02 90 FD | 	jmp	#LR__0442
05b98                 | LR__0350
05b98     48 FA 05 F6 | 	mov	result1, #72
05b9c     D4 02 90 FD | 	jmp	#LR__0442
05ba0                 | LR__0351
05ba0     48 FA 05 F6 | 	mov	result1, #72
05ba4     CC 02 90 FD | 	jmp	#LR__0442
05ba8                 | LR__0352
05ba8     BB FA 05 F6 | 	mov	result1, #187
05bac     C4 02 90 FD | 	jmp	#LR__0442
05bb0                 | LR__0353
05bb0     A9 FA 05 F6 | 	mov	result1, #169
05bb4     BC 02 90 FD | 	jmp	#LR__0442
05bb8                 | LR__0354
05bb8     4E FA 05 F6 | 	mov	result1, #78
05bbc     B4 02 90 FD | 	jmp	#LR__0442
05bc0                 | LR__0355
05bc0     4E FA 05 F6 | 	mov	result1, #78
05bc4     AC 02 90 FD | 	jmp	#LR__0442
05bc8                 | LR__0356
05bc8     58 FA 05 F6 | 	mov	result1, #88
05bcc     A4 02 90 FD | 	jmp	#LR__0442
05bd0                 | LR__0357
05bd0     5F FA 05 F6 | 	mov	result1, #95
05bd4     9C 02 90 FD | 	jmp	#LR__0442
05bd8                 | LR__0358
05bd8     5F FA 05 F6 | 	mov	result1, #95
05bdc     94 02 90 FD | 	jmp	#LR__0442
05be0                 | LR__0359
05be0     B5 FA 05 F6 | 	mov	result1, #181
05be4     8C 02 90 FD | 	jmp	#LR__0442
05be8                 | LR__0360
05be8     4C FA 05 F6 | 	mov	result1, #76
05bec     84 02 90 FD | 	jmp	#LR__0442
05bf0                 | LR__0361
05bf0     4C FA 05 F6 | 	mov	result1, #76
05bf4     7C 02 90 FD | 	jmp	#LR__0442
05bf8                 | LR__0362
05bf8     52 FA 05 F6 | 	mov	result1, #82
05bfc     74 02 90 FD | 	jmp	#LR__0442
05c00                 | LR__0363
05c00     52 FA 05 F6 | 	mov	result1, #82
05c04     6C 02 90 FD | 	jmp	#LR__0442
05c08                 | LR__0364
05c08     97 FA 05 F6 | 	mov	result1, #151
05c0c     64 02 90 FD | 	jmp	#LR__0442
05c10                 | LR__0365
05c10     C6 FA 05 F6 | 	mov	result1, #198
05c14     5C 02 90 FD | 	jmp	#LR__0442
05c18                 | LR__0366
05c18     61 FA 05 F6 | 	mov	result1, #97
05c1c     54 02 90 FD | 	jmp	#LR__0442
05c20                 | LR__0367
05c20     61 FA 05 F6 | 	mov	result1, #97
05c24     4C 02 90 FD | 	jmp	#LR__0442
05c28                 | LR__0368
05c28     63 FA 05 F6 | 	mov	result1, #99
05c2c     44 02 90 FD | 	jmp	#LR__0442
05c30                 | LR__0369
05c30     41 FA 05 F6 | 	mov	result1, #65
05c34     3C 02 90 FD | 	jmp	#LR__0442
05c38                 | LR__0370
05c38     4B FA 05 F6 | 	mov	result1, #75
05c3c     34 02 90 FD | 	jmp	#LR__0442
05c40                 | LR__0371
05c40     4B FA 05 F6 | 	mov	result1, #75
05c44     2C 02 90 FD | 	jmp	#LR__0442
05c48                 | LR__0372
05c48     C1 FA 05 F6 | 	mov	result1, #193
05c4c     24 02 90 FD | 	jmp	#LR__0442
05c50                 | LR__0373
05c50     B3 FA 05 F6 | 	mov	result1, #179
05c54     1C 02 90 FD | 	jmp	#LR__0442
05c58                 | LR__0374
05c58     5E FA 05 F6 | 	mov	result1, #94
05c5c     14 02 90 FD | 	jmp	#LR__0442
05c60                 | LR__0375
05c60     5E FA 05 F6 | 	mov	result1, #94
05c64     0C 02 90 FD | 	jmp	#LR__0442
05c68                 | LR__0376
05c68     7C FA 05 F6 | 	mov	result1, #124
05c6c     04 02 90 FD | 	jmp	#LR__0442
05c70                 | LR__0377
05c70     7E FA 05 F6 | 	mov	result1, #126
05c74     FC 01 90 FD | 	jmp	#LR__0442
05c78                 | LR__0378
05c78     7D FA 05 F6 | 	mov	result1, #125
05c7c     F4 01 90 FD | 	jmp	#LR__0442
05c80                 | LR__0379
05c80     7F FA 05 F6 | 	mov	result1, #127
05c84     EC 01 90 FD | 	jmp	#LR__0442
05c88                 | LR__0380
05c88     80 FA 05 F6 | 	mov	result1, #128
05c8c     E4 01 90 FD | 	jmp	#LR__0442
05c90                 | LR__0381
05c90     55 FA 05 F6 | 	mov	result1, #85
05c94     DC 01 90 FD | 	jmp	#LR__0442
05c98                 | LR__0382
05c98     75 FA 05 F6 | 	mov	result1, #117
05c9c     D4 01 90 FD | 	jmp	#LR__0442
05ca0                 | LR__0383
05ca0     75 FA 05 F6 | 	mov	result1, #117
05ca4     CC 01 90 FD | 	jmp	#LR__0442
05ca8                 | LR__0384
05ca8     42 FA 05 F6 | 	mov	result1, #66
05cac     C4 01 90 FD | 	jmp	#LR__0442
05cb0                 | LR__0385
05cb0     42 FA 05 F6 | 	mov	result1, #66
05cb4     BC 01 90 FD | 	jmp	#LR__0442
05cb8                 | LR__0386
05cb8     95 FA 05 F6 | 	mov	result1, #149
05cbc     B4 01 90 FD | 	jmp	#LR__0442
05cc0                 | LR__0387
05cc0     AC FA 05 F6 | 	mov	result1, #172
05cc4     AC 01 90 FD | 	jmp	#LR__0442
05cc8                 | LR__0388
05cc8     81 FA 05 F6 | 	mov	result1, #129
05ccc     A4 01 90 FD | 	jmp	#LR__0442
05cd0                 | LR__0389
05cd0     81 FA 05 F6 | 	mov	result1, #129
05cd4     9C 01 90 FD | 	jmp	#LR__0442
05cd8                 | LR__0390
05cd8     44 FA 05 F6 | 	mov	result1, #68
05cdc     94 01 90 FD | 	jmp	#LR__0442
05ce0                 | LR__0391
05ce0     44 FA 05 F6 | 	mov	result1, #68
05ce4     8C 01 90 FD | 	jmp	#LR__0442
05ce8                 | LR__0392
05ce8     BC FA 05 F6 | 	mov	result1, #188
05cec     84 01 90 FD | 	jmp	#LR__0442
05cf0                 | LR__0393
05cf0     88 FA 05 F6 | 	mov	result1, #136
05cf4     7C 01 90 FD | 	jmp	#LR__0442
05cf8                 | LR__0394
05cf8     B6 FA 05 F6 | 	mov	result1, #182
05cfc     74 01 90 FD | 	jmp	#LR__0442
05d00                 | LR__0395
05d00     92 FA 05 F6 | 	mov	result1, #146
05d04     6C 01 90 FD | 	jmp	#LR__0442
05d08                 | LR__0396
05d08     BE FA 05 F6 | 	mov	result1, #190
05d0c     64 01 90 FD | 	jmp	#LR__0442
05d10                 | LR__0397
05d10     BE FA 05 F6 | 	mov	result1, #190
05d14     5C 01 90 FD | 	jmp	#LR__0442
05d18                 | LR__0398
05d18     C7 FA 05 F6 | 	mov	result1, #199
05d1c     54 01 90 FD | 	jmp	#LR__0442
05d20                 | LR__0399
05d20     D4 FA 05 F6 | 	mov	result1, #212
05d24     4C 01 90 FD | 	jmp	#LR__0442
05d28                 | LR__0400
05d28     D4 FA 05 F6 | 	mov	result1, #212
05d2c     44 01 90 FD | 	jmp	#LR__0442
05d30                 | LR__0401
05d30     AA FA 05 F6 | 	mov	result1, #170
05d34     3C 01 90 FD | 	jmp	#LR__0442
05d38                 | LR__0402
05d38     4D FA 05 F6 | 	mov	result1, #77
05d3c     34 01 90 FD | 	jmp	#LR__0442
05d40                 | LR__0403
05d40     4D FA 05 F6 | 	mov	result1, #77
05d44     2C 01 90 FD | 	jmp	#LR__0442
05d48                 | LR__0404
05d48     51 FA 05 F6 | 	mov	result1, #81
05d4c     24 01 90 FD | 	jmp	#LR__0442
05d50                 | LR__0405
05d50     51 FA 05 F6 | 	mov	result1, #81
05d54     1C 01 90 FD | 	jmp	#LR__0442
05d58                 | LR__0406
05d58     D2 FA 05 F6 | 	mov	result1, #210
05d5c     14 01 90 FD | 	jmp	#LR__0442
05d60                 | LR__0407
05d60     D2 FA 05 F6 | 	mov	result1, #210
05d64     0C 01 90 FD | 	jmp	#LR__0442
05d68                 | LR__0408
05d68     DA FA 05 F6 | 	mov	result1, #218
05d6c     04 01 90 FD | 	jmp	#LR__0442
05d70                 | LR__0409
05d70     DA FA 05 F6 | 	mov	result1, #218
05d74     FC 00 90 FD | 	jmp	#LR__0442
05d78                 | LR__0410
05d78     8E FA 05 F6 | 	mov	result1, #142
05d7c     F4 00 90 FD | 	jmp	#LR__0442
05d80                 | LR__0411
05d80     8E FA 05 F6 | 	mov	result1, #142
05d84     EC 00 90 FD | 	jmp	#LR__0442
05d88                 | LR__0412
05d88     90 FA 05 F6 | 	mov	result1, #144
05d8c     E4 00 90 FD | 	jmp	#LR__0442
05d90                 | LR__0413
05d90     90 FA 05 F6 | 	mov	result1, #144
05d94     DC 00 90 FD | 	jmp	#LR__0442
05d98                 | LR__0414
05d98     8D FA 05 F6 | 	mov	result1, #141
05d9c     D4 00 90 FD | 	jmp	#LR__0442
05da0                 | LR__0415
05da0     8D FA 05 F6 | 	mov	result1, #141
05da4     CC 00 90 FD | 	jmp	#LR__0442
05da8                 | LR__0416
05da8     8C FA 05 F6 | 	mov	result1, #140
05dac     C4 00 90 FD | 	jmp	#LR__0442
05db0                 | LR__0417
05db0     8C FA 05 F6 | 	mov	result1, #140
05db4     BC 00 90 FD | 	jmp	#LR__0442
05db8                 | LR__0418
05db8     91 FA 05 F6 | 	mov	result1, #145
05dbc     B4 00 90 FD | 	jmp	#LR__0442
05dc0                 | LR__0419
05dc0     91 FA 05 F6 | 	mov	result1, #145
05dc4     AC 00 90 FD | 	jmp	#LR__0442
05dc8                 | LR__0420
05dc8     8B FA 05 F6 | 	mov	result1, #139
05dcc     A4 00 90 FD | 	jmp	#LR__0442
05dd0                 | LR__0421
05dd0     8B FA 05 F6 | 	mov	result1, #139
05dd4     9C 00 90 FD | 	jmp	#LR__0442
05dd8                 | LR__0422
05dd8     8F FA 05 F6 | 	mov	result1, #143
05ddc     94 00 90 FD | 	jmp	#LR__0442
05de0                 | LR__0423
05de0     8F FA 05 F6 | 	mov	result1, #143
05de4     8C 00 90 FD | 	jmp	#LR__0442
05de8                 | LR__0424
05de8     8F FA 05 F6 | 	mov	result1, #143
05dec     84 00 90 FD | 	jmp	#LR__0442
05df0                 | LR__0425
05df0     B2 FA 05 F6 | 	mov	result1, #178
05df4     7C 00 90 FD | 	jmp	#LR__0442
05df8                 | LR__0426
05df8     B2 FA 05 F6 | 	mov	result1, #178
05dfc     74 00 90 FD | 	jmp	#LR__0442
05e00                 | LR__0427
05e00     75 FA 05 F6 | 	mov	result1, #117
05e04     6C 00 90 FD | 	jmp	#LR__0442
05e08                 | LR__0428
05e08     75 FA 05 F6 | 	mov	result1, #117
05e0c     64 00 90 FD | 	jmp	#LR__0442
05e10                 | LR__0429
05e10     6D FA 05 F6 | 	mov	result1, #109
05e14     5C 00 90 FD | 	jmp	#LR__0442
05e18                 | LR__0430
05e18     6D FA 05 F6 | 	mov	result1, #109
05e1c     54 00 90 FD | 	jmp	#LR__0442
05e20                 | LR__0431
05e20     5B FA 05 F6 | 	mov	result1, #91
05e24     4C 00 90 FD | 	jmp	#LR__0442
05e28                 | LR__0432
05e28     56 FA 05 F6 | 	mov	result1, #86
05e2c     44 00 90 FD | 	jmp	#LR__0442
05e30                 | LR__0433
05e30     56 FA 05 F6 | 	mov	result1, #86
05e34     3C 00 90 FD | 	jmp	#LR__0442
05e38                 | LR__0434
05e38     70 FA 05 F6 | 	mov	result1, #112
05e3c     34 00 90 FD | 	jmp	#LR__0442
05e40                 | LR__0435
05e40     70 FA 05 F6 | 	mov	result1, #112
05e44     2C 00 90 FD | 	jmp	#LR__0442
05e48                 | LR__0436
05e48     57 FA 05 F6 | 	mov	result1, #87
05e4c     24 00 90 FD | 	jmp	#LR__0442
05e50                 | LR__0437
05e50     57 FA 05 F6 | 	mov	result1, #87
05e54     1C 00 90 FD | 	jmp	#LR__0442
05e58                 | LR__0438
05e58     79 FA 05 F6 | 	mov	result1, #121
05e5c     14 00 90 FD | 	jmp	#LR__0442
05e60                 | LR__0439
05e60     77 FA 05 F6 | 	mov	result1, #119
05e64     0C 00 90 FD | 	jmp	#LR__0442
05e68                 | LR__0440
05e68     78 FA 05 F6 | 	mov	result1, #120
05e6c     04 00 90 FD | 	jmp	#LR__0442
05e70                 | LR__0441
05e70     00 FA 05 F6 | 	mov	result1, #0
05e74                 | LR__0442
05e74     A7 F0 03 F6 | 	mov	ptra, fp
05e78     B2 00 A0 FD | 	call	#popregs_
05e7c                 | _iscommand_ret
05e7c     2D 00 64 FD | 	ret
05e80                 | 
05e80                 | ' 
05e80                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05e80                 | ' 
05e80                 | ' function isfunction(s as string) as ubyte
05e80                 | _isfunction
05e80     01 4A 05 F6 | 	mov	COUNT_, #1
05e84     A8 00 A0 FD | 	call	#pushregs_
05e88                 | ' 
05e88                 | ' select case s
05e88     09 27 02 F6 | 	mov	local01, arg01
05e8c     90 01 00 FF 
05e90     63 14 06 F6 | 	mov	arg02, ##@LR__5381
05e94     13 13 02 F6 | 	mov	arg01, local01
05e98     34 F2 B1 FD | 	call	#__system___string_cmp
05e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea0     EC 05 90 AD |  if_e	jmp	#LR__0450
05ea4     90 01 00 FF 
05ea8     67 14 06 F6 | 	mov	arg02, ##@LR__5382
05eac     13 13 02 F6 | 	mov	arg01, local01
05eb0     1C F2 B1 FD | 	call	#__system___string_cmp
05eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb8     DC 05 90 AD |  if_e	jmp	#LR__0451
05ebc     90 01 00 FF 
05ec0     6C 14 06 F6 | 	mov	arg02, ##@LR__5383
05ec4     13 13 02 F6 | 	mov	arg01, local01
05ec8     04 F2 B1 FD | 	call	#__system___string_cmp
05ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed0     CC 05 90 AD |  if_e	jmp	#LR__0452
05ed4     90 01 00 FF 
05ed8     70 14 06 F6 | 	mov	arg02, ##@LR__5384
05edc     13 13 02 F6 | 	mov	arg01, local01
05ee0     EC F1 B1 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     BC 05 90 AD |  if_e	jmp	#LR__0453
05eec     90 01 00 FF 
05ef0     75 14 06 F6 | 	mov	arg02, ##@LR__5385
05ef4     13 13 02 F6 | 	mov	arg01, local01
05ef8     D4 F1 B1 FD | 	call	#__system___string_cmp
05efc     00 FA 0D F2 | 	cmp	result1, #0 wz
05f00     AC 05 90 AD |  if_e	jmp	#LR__0454
05f04     90 01 00 FF 
05f08     79 14 06 F6 | 	mov	arg02, ##@LR__5386
05f0c     13 13 02 F6 | 	mov	arg01, local01
05f10     BC F1 B1 FD | 	call	#__system___string_cmp
05f14     00 FA 0D F2 | 	cmp	result1, #0 wz
05f18     9C 05 90 AD |  if_e	jmp	#LR__0455
05f1c     90 01 00 FF 
05f20     7E 14 06 F6 | 	mov	arg02, ##@LR__5387
05f24     13 13 02 F6 | 	mov	arg01, local01
05f28     A4 F1 B1 FD | 	call	#__system___string_cmp
05f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f30     8C 05 90 AD |  if_e	jmp	#LR__0456
05f34     90 01 00 FF 
05f38     82 14 06 F6 | 	mov	arg02, ##@LR__5388
05f3c     13 13 02 F6 | 	mov	arg01, local01
05f40     8C F1 B1 FD | 	call	#__system___string_cmp
05f44     00 FA 0D F2 | 	cmp	result1, #0 wz
05f48     7C 05 90 AD |  if_e	jmp	#LR__0457
05f4c     90 01 00 FF 
05f50     87 14 06 F6 | 	mov	arg02, ##@LR__5389
05f54     13 13 02 F6 | 	mov	arg01, local01
05f58     74 F1 B1 FD | 	call	#__system___string_cmp
05f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f60     6C 05 90 AD |  if_e	jmp	#LR__0458
05f64     90 01 00 FF 
05f68     8C 14 06 F6 | 	mov	arg02, ##@LR__5390
05f6c     13 13 02 F6 | 	mov	arg01, local01
05f70     5C F1 B1 FD | 	call	#__system___string_cmp
05f74     00 FA 0D F2 | 	cmp	result1, #0 wz
05f78     5C 05 90 AD |  if_e	jmp	#LR__0459
05f7c     90 01 00 FF 
05f80     94 14 06 F6 | 	mov	arg02, ##@LR__5391
05f84     13 13 02 F6 | 	mov	arg01, local01
05f88     44 F1 B1 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     4C 05 90 AD |  if_e	jmp	#LR__0460
05f94     90 01 00 FF 
05f98     98 14 06 F6 | 	mov	arg02, ##@LR__5392
05f9c     13 13 02 F6 | 	mov	arg01, local01
05fa0     2C F1 B1 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     3C 05 90 AD |  if_e	jmp	#LR__0461
05fac     90 01 00 FF 
05fb0     9E 14 06 F6 | 	mov	arg02, ##@LR__5393
05fb4     13 13 02 F6 | 	mov	arg01, local01
05fb8     14 F1 B1 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     2C 05 90 AD |  if_e	jmp	#LR__0462
05fc4     90 01 00 FF 
05fc8     A8 14 06 F6 | 	mov	arg02, ##@LR__5394
05fcc     13 13 02 F6 | 	mov	arg01, local01
05fd0     FC F0 B1 FD | 	call	#__system___string_cmp
05fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd8     1C 05 90 AD |  if_e	jmp	#LR__0463
05fdc     90 01 00 FF 
05fe0     B1 14 06 F6 | 	mov	arg02, ##@LR__5395
05fe4     13 13 02 F6 | 	mov	arg01, local01
05fe8     E4 F0 B1 FD | 	call	#__system___string_cmp
05fec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff0     0C 05 90 AD |  if_e	jmp	#LR__0464
05ff4     90 01 00 FF 
05ff8     BA 14 06 F6 | 	mov	arg02, ##@LR__5396
05ffc     13 13 02 F6 | 	mov	arg01, local01
06000     CC F0 B1 FD | 	call	#__system___string_cmp
06004     00 FA 0D F2 | 	cmp	result1, #0 wz
06008     FC 04 90 AD |  if_e	jmp	#LR__0465
0600c     90 01 00 FF 
06010     BE 14 06 F6 | 	mov	arg02, ##@LR__5397
06014     13 13 02 F6 | 	mov	arg01, local01
06018     B4 F0 B1 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     EC 04 90 AD |  if_e	jmp	#LR__0466
06024     90 01 00 FF 
06028     C2 14 06 F6 | 	mov	arg02, ##@LR__5398
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     9C F0 B1 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     DC 04 90 AD |  if_e	jmp	#LR__0467
0603c     90 01 00 FF 
06040     C6 14 06 F6 | 	mov	arg02, ##@LR__5399
06044     13 13 02 F6 | 	mov	arg01, local01
06048     84 F0 B1 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     CC 04 90 AD |  if_e	jmp	#LR__0468
06054     90 01 00 FF 
06058     CF 14 06 F6 | 	mov	arg02, ##@LR__5400
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     6C F0 B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     BC 04 90 AD |  if_e	jmp	#LR__0469
0606c     90 01 00 FF 
06070     D8 14 06 F6 | 	mov	arg02, ##@LR__5401
06074     13 13 02 F6 | 	mov	arg01, local01
06078     54 F0 B1 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     AC 04 90 AD |  if_e	jmp	#LR__0470
06084     90 01 00 FF 
06088     DC 14 06 F6 | 	mov	arg02, ##@LR__5402
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     3C F0 B1 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     9C 04 90 AD |  if_e	jmp	#LR__0471
0609c     90 01 00 FF 
060a0     EA 14 06 F6 | 	mov	arg02, ##@LR__5403
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     24 F0 B1 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     8C 04 90 AD |  if_e	jmp	#LR__0472
060b4     90 01 00 FF 
060b8     F7 14 06 F6 | 	mov	arg02, ##@LR__5404
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     0C F0 B1 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     7C 04 90 AD |  if_e	jmp	#LR__0473
060cc     90 01 00 FF 
060d0     03 15 06 F6 | 	mov	arg02, ##@LR__5405
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     F4 EF B1 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     6C 04 90 AD |  if_e	jmp	#LR__0474
060e4     90 01 00 FF 
060e8     0B 15 06 F6 | 	mov	arg02, ##@LR__5406
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     DC EF B1 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     5C 04 90 AD |  if_e	jmp	#LR__0475
060fc     90 01 00 FF 
06100     0F 15 06 F6 | 	mov	arg02, ##@LR__5407
06104     13 13 02 F6 | 	mov	arg01, local01
06108     C4 EF B1 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     4C 04 90 AD |  if_e	jmp	#LR__0476
06114     90 01 00 FF 
06118     14 15 06 F6 | 	mov	arg02, ##@LR__5408
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     AC EF B1 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     3C 04 90 AD |  if_e	jmp	#LR__0477
0612c     90 01 00 FF 
06130     1B 15 06 F6 | 	mov	arg02, ##@LR__5409
06134     13 13 02 F6 | 	mov	arg01, local01
06138     94 EF B1 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     2C 04 90 AD |  if_e	jmp	#LR__0478
06144     90 01 00 FF 
06148     1F 15 06 F6 | 	mov	arg02, ##@LR__5410
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     7C EF B1 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     1C 04 90 AD |  if_e	jmp	#LR__0479
0615c     90 01 00 FF 
06160     25 15 06 F6 | 	mov	arg02, ##@LR__5411
06164     13 13 02 F6 | 	mov	arg01, local01
06168     64 EF B1 FD | 	call	#__system___string_cmp
0616c     00 FA 0D F2 | 	cmp	result1, #0 wz
06170     0C 04 90 AD |  if_e	jmp	#LR__0480
06174     90 01 00 FF 
06178     29 15 06 F6 | 	mov	arg02, ##@LR__5412
0617c     13 13 02 F6 | 	mov	arg01, local01
06180     4C EF B1 FD | 	call	#__system___string_cmp
06184     00 FA 0D F2 | 	cmp	result1, #0 wz
06188     FC 03 90 AD |  if_e	jmp	#LR__0481
0618c     90 01 00 FF 
06190     2D 15 06 F6 | 	mov	arg02, ##@LR__5413
06194     13 13 02 F6 | 	mov	arg01, local01
06198     34 EF B1 FD | 	call	#__system___string_cmp
0619c     00 FA 0D F2 | 	cmp	result1, #0 wz
061a0     EC 03 90 AD |  if_e	jmp	#LR__0482
061a4     90 01 00 FF 
061a8     33 15 06 F6 | 	mov	arg02, ##@LR__5414
061ac     13 13 02 F6 | 	mov	arg01, local01
061b0     1C EF B1 FD | 	call	#__system___string_cmp
061b4     00 FA 0D F2 | 	cmp	result1, #0 wz
061b8     DC 03 90 AD |  if_e	jmp	#LR__0483
061bc     90 01 00 FF 
061c0     3A 15 06 F6 | 	mov	arg02, ##@LR__5415
061c4     13 13 02 F6 | 	mov	arg01, local01
061c8     04 EF B1 FD | 	call	#__system___string_cmp
061cc     00 FA 0D F2 | 	cmp	result1, #0 wz
061d0     CC 03 90 AD |  if_e	jmp	#LR__0484
061d4     90 01 00 FF 
061d8     40 15 06 F6 | 	mov	arg02, ##@LR__5416
061dc     13 13 02 F6 | 	mov	arg01, local01
061e0     EC EE B1 FD | 	call	#__system___string_cmp
061e4     00 FA 0D F2 | 	cmp	result1, #0 wz
061e8     BC 03 90 AD |  if_e	jmp	#LR__0485
061ec     90 01 00 FF 
061f0     45 15 06 F6 | 	mov	arg02, ##@LR__5417
061f4     13 13 02 F6 | 	mov	arg01, local01
061f8     D4 EE B1 FD | 	call	#__system___string_cmp
061fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06200     AC 03 90 AD |  if_e	jmp	#LR__0486
06204     90 01 00 FF 
06208     4C 15 06 F6 | 	mov	arg02, ##@LR__5418
0620c     13 13 02 F6 | 	mov	arg01, local01
06210     BC EE B1 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     9C 03 90 AD |  if_e	jmp	#LR__0487
0621c     90 01 00 FF 
06220     53 15 06 F6 | 	mov	arg02, ##@LR__5419
06224     13 13 02 F6 | 	mov	arg01, local01
06228     A4 EE B1 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     8C 03 90 AD |  if_e	jmp	#LR__0488
06234     90 01 00 FF 
06238     5A 15 06 F6 | 	mov	arg02, ##@LR__5420
0623c     13 13 02 F6 | 	mov	arg01, local01
06240     8C EE B1 FD | 	call	#__system___string_cmp
06244     00 FA 0D F2 | 	cmp	result1, #0 wz
06248     7C 03 90 AD |  if_e	jmp	#LR__0489
0624c     90 01 00 FF 
06250     61 15 06 F6 | 	mov	arg02, ##@LR__5421
06254     13 13 02 F6 | 	mov	arg01, local01
06258     74 EE B1 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     6C 03 90 AD |  if_e	jmp	#LR__0490
06264     90 01 00 FF 
06268     66 15 06 F6 | 	mov	arg02, ##@LR__5422
0626c     13 13 02 F6 | 	mov	arg01, local01
06270     5C EE B1 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     5C 03 90 AD |  if_e	jmp	#LR__0491
0627c     90 01 00 FF 
06280     6B 15 06 F6 | 	mov	arg02, ##@LR__5423
06284     13 13 02 F6 | 	mov	arg01, local01
06288     44 EE B1 FD | 	call	#__system___string_cmp
0628c     00 FA 0D F2 | 	cmp	result1, #0 wz
06290     4C 03 90 AD |  if_e	jmp	#LR__0492
06294     90 01 00 FF 
06298     70 15 06 F6 | 	mov	arg02, ##@LR__5424
0629c     13 13 02 F6 | 	mov	arg01, local01
062a0     2C EE B1 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     3C 03 90 AD |  if_e	jmp	#LR__0493
062ac     90 01 00 FF 
062b0     75 15 06 F6 | 	mov	arg02, ##@LR__5425
062b4     13 13 02 F6 | 	mov	arg01, local01
062b8     14 EE B1 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     2C 03 90 AD |  if_e	jmp	#LR__0494
062c4     90 01 00 FF 
062c8     7A 15 06 F6 | 	mov	arg02, ##@LR__5426
062cc     13 13 02 F6 | 	mov	arg01, local01
062d0     FC ED B1 FD | 	call	#__system___string_cmp
062d4     00 FA 0D F2 | 	cmp	result1, #0 wz
062d8     1C 03 90 AD |  if_e	jmp	#LR__0495
062dc     90 01 00 FF 
062e0     80 15 06 F6 | 	mov	arg02, ##@LR__5427
062e4     13 13 02 F6 | 	mov	arg01, local01
062e8     E4 ED B1 FD | 	call	#__system___string_cmp
062ec     00 FA 0D F2 | 	cmp	result1, #0 wz
062f0     0C 03 90 AD |  if_e	jmp	#LR__0496
062f4     90 01 00 FF 
062f8     86 15 06 F6 | 	mov	arg02, ##@LR__5428
062fc     13 13 02 F6 | 	mov	arg01, local01
06300     CC ED B1 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     FC 02 90 AD |  if_e	jmp	#LR__0497
0630c     90 01 00 FF 
06310     8C 15 06 F6 | 	mov	arg02, ##@LR__5429
06314     13 13 02 F6 | 	mov	arg01, local01
06318     B4 ED B1 FD | 	call	#__system___string_cmp
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     EC 02 90 AD |  if_e	jmp	#LR__0498
06324     90 01 00 FF 
06328     91 15 06 F6 | 	mov	arg02, ##@LR__5430
0632c     13 13 02 F6 | 	mov	arg01, local01
06330     9C ED B1 FD | 	call	#__system___string_cmp
06334     00 FA 0D F2 | 	cmp	result1, #0 wz
06338     DC 02 90 AD |  if_e	jmp	#LR__0499
0633c     90 01 00 FF 
06340     96 15 06 F6 | 	mov	arg02, ##@LR__5431
06344     13 13 02 F6 | 	mov	arg01, local01
06348     84 ED B1 FD | 	call	#__system___string_cmp
0634c     00 FA 0D F2 | 	cmp	result1, #0 wz
06350     CC 02 90 AD |  if_e	jmp	#LR__0500
06354     90 01 00 FF 
06358     9E 15 06 F6 | 	mov	arg02, ##@LR__5432
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     6C ED B1 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     BC 02 90 AD |  if_e	jmp	#LR__0501
0636c     90 01 00 FF 
06370     A4 15 06 F6 | 	mov	arg02, ##@LR__5433
06374     13 13 02 F6 | 	mov	arg01, local01
06378     54 ED B1 FD | 	call	#__system___string_cmp
0637c     00 FA 0D F2 | 	cmp	result1, #0 wz
06380     AC 02 90 AD |  if_e	jmp	#LR__0502
06384     90 01 00 FF 
06388     AB 15 06 F6 | 	mov	arg02, ##@LR__5434
0638c     13 13 02 F6 | 	mov	arg01, local01
06390     3C ED B1 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     9C 02 90 AD |  if_e	jmp	#LR__0503
0639c     90 01 00 FF 
063a0     B1 15 06 F6 | 	mov	arg02, ##@LR__5435
063a4     13 13 02 F6 | 	mov	arg01, local01
063a8     24 ED B1 FD | 	call	#__system___string_cmp
063ac     00 FA 0D F2 | 	cmp	result1, #0 wz
063b0     8C 02 90 AD |  if_e	jmp	#LR__0504
063b4     90 01 00 FF 
063b8     B7 15 06 F6 | 	mov	arg02, ##@LR__5436
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     0C ED B1 FD | 	call	#__system___string_cmp
063c4     00 FA 0D F2 | 	cmp	result1, #0 wz
063c8     7C 02 90 AD |  if_e	jmp	#LR__0505
063cc     90 01 00 FF 
063d0     BB 15 06 F6 | 	mov	arg02, ##@LR__5437
063d4     13 13 02 F6 | 	mov	arg01, local01
063d8     F4 EC B1 FD | 	call	#__system___string_cmp
063dc     00 FA 0D F2 | 	cmp	result1, #0 wz
063e0     6C 02 90 AD |  if_e	jmp	#LR__0506
063e4     90 01 00 FF 
063e8     BF 15 06 F6 | 	mov	arg02, ##@LR__5438
063ec     13 13 02 F6 | 	mov	arg01, local01
063f0     DC EC B1 FD | 	call	#__system___string_cmp
063f4     00 FA 0D F2 | 	cmp	result1, #0 wz
063f8     5C 02 90 AD |  if_e	jmp	#LR__0507
063fc     90 01 00 FF 
06400     C3 15 06 F6 | 	mov	arg02, ##@LR__5439
06404     13 13 02 F6 | 	mov	arg01, local01
06408     C4 EC B1 FD | 	call	#__system___string_cmp
0640c     00 FA 0D F2 | 	cmp	result1, #0 wz
06410     4C 02 90 AD |  if_e	jmp	#LR__0508
06414     90 01 00 FF 
06418     C9 15 06 F6 | 	mov	arg02, ##@LR__5440
0641c     13 13 02 F6 | 	mov	arg01, local01
06420     AC EC B1 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     3C 02 90 AD |  if_e	jmp	#LR__0509
0642c     90 01 00 FF 
06430     CF 15 06 F6 | 	mov	arg02, ##@LR__5441
06434     13 13 02 F6 | 	mov	arg01, local01
06438     94 EC B1 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     2C 02 90 AD |  if_e	jmp	#LR__0510
06444     90 01 00 FF 
06448     D4 15 06 F6 | 	mov	arg02, ##@LR__5442
0644c     13 13 02 F6 | 	mov	arg01, local01
06450     7C EC B1 FD | 	call	#__system___string_cmp
06454     00 FA 0D F2 | 	cmp	result1, #0 wz
06458     1C 02 90 AD |  if_e	jmp	#LR__0511
0645c     90 01 00 FF 
06460     D8 15 06 F6 | 	mov	arg02, ##@LR__5443
06464     13 13 02 F6 | 	mov	arg01, local01
06468     64 EC B1 FD | 	call	#__system___string_cmp
0646c     00 FA 0D F2 | 	cmp	result1, #0 wz
06470     0C 02 90 AD |  if_e	jmp	#LR__0512
06474     90 01 00 FF 
06478     DC 15 06 F6 | 	mov	arg02, ##@LR__5444
0647c     13 13 02 F6 | 	mov	arg01, local01
06480     4C EC B1 FD | 	call	#__system___string_cmp
06484     00 FA 0D F2 | 	cmp	result1, #0 wz
06488     FC 01 90 AD |  if_e	jmp	#LR__0513
0648c     00 02 90 FD | 	jmp	#LR__0514
06490                 | LR__0450
06490     9E FA 05 F6 | 	mov	result1, #158
06494     FC 01 90 FD | 	jmp	#LR__0515
06498                 | LR__0451
06498     85 FA 05 F6 | 	mov	result1, #133
0649c     F4 01 90 FD | 	jmp	#LR__0515
064a0                 | LR__0452
064a0     9B FA 05 F6 | 	mov	result1, #155
064a4     EC 01 90 FD | 	jmp	#LR__0515
064a8                 | LR__0453
064a8     9B FA 05 F6 | 	mov	result1, #155
064ac     E4 01 90 FD | 	jmp	#LR__0515
064b0                 | LR__0454
064b0     A7 FA 05 F6 | 	mov	result1, #167
064b4     DC 01 90 FD | 	jmp	#LR__0515
064b8                 | LR__0455
064b8     84 FA 05 F6 | 	mov	result1, #132
064bc     D4 01 90 FD | 	jmp	#LR__0515
064c0                 | LR__0456
064c0     86 FA 05 F6 | 	mov	result1, #134
064c4     CC 01 90 FD | 	jmp	#LR__0515
064c8                 | LR__0457
064c8     A2 FA 05 F6 | 	mov	result1, #162
064cc     C4 01 90 FD | 	jmp	#LR__0515
064d0                 | LR__0458
064d0     9F FA 05 F6 | 	mov	result1, #159
064d4     BC 01 90 FD | 	jmp	#LR__0515
064d8                 | LR__0459
064d8     C0 FA 05 F6 | 	mov	result1, #192
064dc     B4 01 90 FD | 	jmp	#LR__0515
064e0                 | LR__0460
064e0     82 FA 05 F6 | 	mov	result1, #130
064e4     AC 01 90 FD | 	jmp	#LR__0515
064e8                 | LR__0461
064e8     99 FA 05 F6 | 	mov	result1, #153
064ec     A4 01 90 FD | 	jmp	#LR__0515
064f0                 | LR__0462
064f0     D7 FA 05 F6 | 	mov	result1, #215
064f4     9C 01 90 FD | 	jmp	#LR__0515
064f8                 | LR__0463
064f8     D8 FA 05 F6 | 	mov	result1, #216
064fc     94 01 90 FD | 	jmp	#LR__0515
06500                 | LR__0464
06500     C5 FA 05 F6 | 	mov	result1, #197
06504     8C 01 90 FD | 	jmp	#LR__0515
06508                 | LR__0465
06508     C5 FA 05 F6 | 	mov	result1, #197
0650c     84 01 90 FD | 	jmp	#LR__0515
06510                 | LR__0466
06510     9C FA 05 F6 | 	mov	result1, #156
06514     7C 01 90 FD | 	jmp	#LR__0515
06518                 | LR__0467
06518     D3 FA 05 F6 | 	mov	result1, #211
0651c     74 01 90 FD | 	jmp	#LR__0515
06520                 | LR__0468
06520     D3 FA 05 F6 | 	mov	result1, #211
06524     6C 01 90 FD | 	jmp	#LR__0515
06528                 | LR__0469
06528     6F FA 05 F6 | 	mov	result1, #111
0652c     64 01 90 FD | 	jmp	#LR__0515
06530                 | LR__0470
06530     6F FA 05 F6 | 	mov	result1, #111
06534     5C 01 90 FD | 	jmp	#LR__0515
06538                 | LR__0471
06538     93 FA 05 F6 | 	mov	result1, #147
0653c     54 01 90 FD | 	jmp	#LR__0515
06540                 | LR__0472
06540     94 FA 05 F6 | 	mov	result1, #148
06544     4C 01 90 FD | 	jmp	#LR__0515
06548                 | LR__0473
06548     DB FA 05 F6 | 	mov	result1, #219
0654c     44 01 90 FD | 	jmp	#LR__0515
06550                 | LR__0474
06550     62 FA 05 F6 | 	mov	result1, #98
06554     3C 01 90 FD | 	jmp	#LR__0515
06558                 | LR__0475
06558     62 FA 05 F6 | 	mov	result1, #98
0655c     34 01 90 FD | 	jmp	#LR__0515
06560                 | LR__0476
06560     A3 FA 05 F6 | 	mov	result1, #163
06564     2C 01 90 FD | 	jmp	#LR__0515
06568                 | LR__0477
06568     9D FA 05 F6 | 	mov	result1, #157
0656c     24 01 90 FD | 	jmp	#LR__0515
06570                 | LR__0478
06570     8A FA 05 F6 | 	mov	result1, #138
06574     1C 01 90 FD | 	jmp	#LR__0515
06578                 | LR__0479
06578     A4 FA 05 F6 | 	mov	result1, #164
0657c     14 01 90 FD | 	jmp	#LR__0515
06580                 | LR__0480
06580     A8 FA 05 F6 | 	mov	result1, #168
06584     0C 01 90 FD | 	jmp	#LR__0515
06588                 | LR__0481
06588     AD FA 05 F6 | 	mov	result1, #173
0658c     04 01 90 FD | 	jmp	#LR__0515
06590                 | LR__0482
06590     9A FA 05 F6 | 	mov	result1, #154
06594     FC 00 90 FD | 	jmp	#LR__0515
06598                 | LR__0483
06598     D1 FA 05 F6 | 	mov	result1, #209
0659c     F4 00 90 FD | 	jmp	#LR__0515
065a0                 | LR__0484
065a0     D0 FA 05 F6 | 	mov	result1, #208
065a4     EC 00 90 FD | 	jmp	#LR__0515
065a8                 | LR__0485
065a8     A6 FA 05 F6 | 	mov	result1, #166
065ac     E4 00 90 FD | 	jmp	#LR__0515
065b0                 | LR__0486
065b0     66 FA 05 F6 | 	mov	result1, #102
065b4     DC 00 90 FD | 	jmp	#LR__0515
065b8                 | LR__0487
065b8     67 FA 05 F6 | 	mov	result1, #103
065bc     D4 00 90 FD | 	jmp	#LR__0515
065c0                 | LR__0488
065c0     64 FA 05 F6 | 	mov	result1, #100
065c4     CC 00 90 FD | 	jmp	#LR__0515
065c8                 | LR__0489
065c8     65 FA 05 F6 | 	mov	result1, #101
065cc     C4 00 90 FD | 	jmp	#LR__0515
065d0                 | LR__0490
065d0     D5 FA 05 F6 | 	mov	result1, #213
065d4     BC 00 90 FD | 	jmp	#LR__0515
065d8                 | LR__0491
065d8     D6 FA 05 F6 | 	mov	result1, #214
065dc     B4 00 90 FD | 	jmp	#LR__0515
065e0                 | LR__0492
065e0     C8 FA 05 F6 | 	mov	result1, #200
065e4     AC 00 90 FD | 	jmp	#LR__0515
065e8                 | LR__0493
065e8     C9 FA 05 F6 | 	mov	result1, #201
065ec     A4 00 90 FD | 	jmp	#LR__0515
065f0                 | LR__0494
065f0     CA FA 05 F6 | 	mov	result1, #202
065f4     9C 00 90 FD | 	jmp	#LR__0515
065f8                 | LR__0495
065f8     CC FA 05 F6 | 	mov	result1, #204
065fc     94 00 90 FD | 	jmp	#LR__0515
06600                 | LR__0496
06600     CD FA 05 F6 | 	mov	result1, #205
06604     8C 00 90 FD | 	jmp	#LR__0515
06608                 | LR__0497
06608     CE FA 05 F6 | 	mov	result1, #206
0660c     84 00 90 FD | 	jmp	#LR__0515
06610                 | LR__0498
06610     CB FA 05 F6 | 	mov	result1, #203
06614     7C 00 90 FD | 	jmp	#LR__0515
06618                 | LR__0499
06618     98 FA 05 F6 | 	mov	result1, #152
0661c     74 00 90 FD | 	jmp	#LR__0515
06620                 | LR__0500
06620     7B FA 05 F6 | 	mov	result1, #123
06624     6C 00 90 FD | 	jmp	#LR__0515
06628                 | LR__0501
06628     76 FA 05 F6 | 	mov	result1, #118
0662c     64 00 90 FD | 	jmp	#LR__0515
06630                 | LR__0502
06630     A5 FA 05 F6 | 	mov	result1, #165
06634     5C 00 90 FD | 	jmp	#LR__0515
06638                 | LR__0503
06638     7A FA 05 F6 | 	mov	result1, #122
0663c     54 00 90 FD | 	jmp	#LR__0515
06640                 | LR__0504
06640     BF FA 05 F6 | 	mov	result1, #191
06644     4C 00 90 FD | 	jmp	#LR__0515
06648                 | LR__0505
06648     54 FA 05 F6 | 	mov	result1, #84
0664c     44 00 90 FD | 	jmp	#LR__0515
06650                 | LR__0506
06650     6B FA 05 F6 | 	mov	result1, #107
06654     3C 00 90 FD | 	jmp	#LR__0515
06658                 | LR__0507
06658     87 FA 05 F6 | 	mov	result1, #135
0665c     34 00 90 FD | 	jmp	#LR__0515
06660                 | LR__0508
06660     6A FA 05 F6 | 	mov	result1, #106
06664     2C 00 90 FD | 	jmp	#LR__0515
06668                 | LR__0509
06668     6E FA 05 F6 | 	mov	result1, #110
0666c     24 00 90 FD | 	jmp	#LR__0515
06670                 | LR__0510
06670     A1 FA 05 F6 | 	mov	result1, #161
06674     1C 00 90 FD | 	jmp	#LR__0515
06678                 | LR__0511
06678     83 FA 05 F6 | 	mov	result1, #131
0667c     14 00 90 FD | 	jmp	#LR__0515
06680                 | LR__0512
06680     A0 FA 05 F6 | 	mov	result1, #160
06684     0C 00 90 FD | 	jmp	#LR__0515
06688                 | LR__0513
06688     9B FA 05 F6 | 	mov	result1, #155
0668c     04 00 90 FD | 	jmp	#LR__0515
06690                 | LR__0514
06690     00 FA 05 F6 | 	mov	result1, #0
06694                 | LR__0515
06694     A7 F0 03 F6 | 	mov	ptra, fp
06698     B2 00 A0 FD | 	call	#popregs_
0669c                 | _isfunction_ret
0669c     2D 00 64 FD | 	ret
066a0                 | 
066a0                 | ' 
066a0                 | ' ' Check if the part is a name
066a0                 | ' 
066a0                 | ' function isname(s as string) as boolean
066a0                 | _isname
066a0     0D 4A 05 F6 | 	mov	COUNT_, #13
066a4     A8 00 A0 FD | 	call	#pushregs_
066a8     09 27 02 F6 | 	mov	local01, arg01
066ac     09 29 02 F6 | 	mov	local02, arg01
066b0     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
066b4                 | LR__0520
066b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
066b8     01 28 06 51 |  if_ne	add	local02, #1
066bc     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
066c0                 | LR__0521
066c0     09 29 82 F1 | 	sub	local02, arg01
066c4     14 FB 01 F6 | 	mov	result1, local02
066c8     FD 2A 0A F6 | 	mov	local03, result1 wz
066cc     00 FA 05 A6 |  if_e	mov	result1, #0
066d0     34 02 90 AD |  if_e	jmp	#LR__0533
066d4     13 13 02 F6 | 	mov	arg01, local01
066d8     01 14 06 F6 | 	mov	arg02, #1
066dc     01 16 06 F6 | 	mov	arg03, #1
066e0     9C FE B1 FD | 	call	#__system__Mid_S
066e4     FD 2C 02 F6 | 	mov	local04, result1
066e8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
066e8     90 01 00 FF 
066ec     E3 15 06 F6 | 	mov	arg02, ##@LR__5445
066f0     16 13 02 F6 | 	mov	arg01, local04
066f4     D8 E9 B1 FD | 	call	#__system___string_cmp
066f8     00 FA 55 F2 | 	cmps	result1, #0 wc
066fc     18 00 90 CD |  if_b	jmp	#LR__0522
06700     90 01 00 FF 
06704     E5 15 06 F6 | 	mov	arg02, ##@LR__5446
06708     16 13 02 F6 | 	mov	arg01, local04
0670c     C0 E9 B1 FD | 	call	#__system___string_cmp
06710     01 FA 55 F2 | 	cmps	result1, #1 wc
06714     1C 00 90 CD |  if_b	jmp	#LR__0523
06718                 | LR__0522
06718     90 01 00 FF 
0671c     E7 15 06 F6 | 	mov	arg02, ##@LR__5447
06720     16 13 02 F6 | 	mov	arg01, local04
06724     A8 E9 B1 FD | 	call	#__system___string_cmp
06728     00 FA 0D F2 | 	cmp	result1, #0 wz
0672c     00 FA 05 56 |  if_ne	mov	result1, #0
06730     D4 01 90 5D |  if_ne	jmp	#LR__0533
06734                 | LR__0523
06734                 | ' if l>2 then 
06734     03 2A 56 F2 | 	cmps	local03, #3 wc
06738     C8 01 90 CD |  if_b	jmp	#LR__0532
0673c                 | '   for i=2 to l
0673c     02 2E 06 F6 | 	mov	local05, #2
06740     15 31 02 F6 | 	mov	local06, local03
06744     01 30 06 F1 | 	add	local06, #1
06748                 | LR__0524
06748     18 2F 52 F2 | 	cmps	local05, local06 wc
0674c     B4 01 90 3D |  if_ae	jmp	#LR__0531
06750     13 13 02 F6 | 	mov	arg01, local01
06754     17 15 02 F6 | 	mov	arg02, local05
06758     01 16 06 F6 | 	mov	arg03, #1
0675c     20 FE B1 FD | 	call	#__system__Mid_S
06760     FD 2C 02 F6 | 	mov	local04, result1
06764                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06764     15 2F 52 F2 | 	cmps	local05, local03 wc
06768     9C 00 90 3D |  if_ae	jmp	#LR__0527
0676c     90 01 00 FF 
06770     E9 15 06 F6 | 	mov	arg02, ##@LR__5448
06774     16 13 02 F6 | 	mov	arg01, local04
06778     54 E9 B1 FD | 	call	#__system___string_cmp
0677c     00 FA 55 F2 | 	cmps	result1, #0 wc
06780     18 00 90 CD |  if_b	jmp	#LR__0525
06784     90 01 00 FF 
06788     EB 15 06 F6 | 	mov	arg02, ##@LR__5449
0678c     16 13 02 F6 | 	mov	arg01, local04
06790     3C E9 B1 FD | 	call	#__system___string_cmp
06794     01 FA 55 F2 | 	cmps	result1, #1 wc
06798     6C 00 90 CD |  if_b	jmp	#LR__0527
0679c                 | LR__0525
0679c     90 01 00 FF 
067a0     ED 15 06 F6 | 	mov	arg02, ##@LR__5450
067a4     16 13 02 F6 | 	mov	arg01, local04
067a8     24 E9 B1 FD | 	call	#__system___string_cmp
067ac     00 FA 55 F2 | 	cmps	result1, #0 wc
067b0     18 00 90 CD |  if_b	jmp	#LR__0526
067b4     90 01 00 FF 
067b8     EF 15 06 F6 | 	mov	arg02, ##@LR__5451
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     0C E9 B1 FD | 	call	#__system___string_cmp
067c4     01 FA 55 F2 | 	cmps	result1, #1 wc
067c8     3C 00 90 CD |  if_b	jmp	#LR__0527
067cc                 | LR__0526
067cc     90 01 00 FF 
067d0     F1 33 06 F6 | 	mov	local07, ##@LR__5452
067d4     16 13 02 F6 | 	mov	arg01, local04
067d8     19 15 02 F6 | 	mov	arg02, local07
067dc     F0 E8 B1 FD | 	call	#__system___string_cmp
067e0     00 FA 0D F2 | 	cmp	result1, #0 wz
067e4     20 00 90 AD |  if_e	jmp	#LR__0527
067e8     90 01 00 FF 
067ec     F3 35 06 F6 | 	mov	local08, ##@LR__5453
067f0     16 13 02 F6 | 	mov	arg01, local04
067f4     1A 15 02 F6 | 	mov	arg02, local08
067f8     D4 E8 B1 FD | 	call	#__system___string_cmp
067fc     FD 36 0A F6 | 	mov	local09, result1 wz
06800     00 FA 05 56 |  if_ne	mov	result1, #0
06804     00 01 90 5D |  if_ne	jmp	#LR__0533
06808                 | LR__0527
06808                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06808     15 2F 0A F2 | 	cmp	local05, local03 wz
0680c     EC 00 90 5D |  if_ne	jmp	#LR__0530
06810     90 01 00 FF 
06814     F5 39 06 F6 | 	mov	local10, ##@LR__5454
06818     16 13 02 F6 | 	mov	arg01, local04
0681c     1C 15 02 F6 | 	mov	arg02, local10
06820     AC E8 B1 FD | 	call	#__system___string_cmp
06824     FD 3A 02 F6 | 	mov	local11, result1
06828     00 3A 56 F2 | 	cmps	local11, #0 wc
0682c     1C 00 90 CD |  if_b	jmp	#LR__0528
06830     90 01 00 FF 
06834     F7 15 06 F6 | 	mov	arg02, ##@LR__5455
06838     16 13 02 F6 | 	mov	arg01, local04
0683c     90 E8 B1 FD | 	call	#__system___string_cmp
06840     FD 38 02 F6 | 	mov	local10, result1
06844     01 38 56 F2 | 	cmps	local10, #1 wc
06848     B0 00 90 CD |  if_b	jmp	#LR__0530
0684c                 | LR__0528
0684c     90 01 00 FF 
06850     F9 15 06 F6 | 	mov	arg02, ##@LR__5456
06854     16 13 02 F6 | 	mov	arg01, local04
06858     74 E8 B1 FD | 	call	#__system___string_cmp
0685c     00 FA 55 F2 | 	cmps	result1, #0 wc
06860     1C 00 90 CD |  if_b	jmp	#LR__0529
06864     90 01 00 FF 
06868     FB 37 06 F6 | 	mov	local09, ##@LR__5457
0686c     16 13 02 F6 | 	mov	arg01, local04
06870     1B 15 02 F6 | 	mov	arg02, local09
06874     58 E8 B1 FD | 	call	#__system___string_cmp
06878     01 FA 55 F2 | 	cmps	result1, #1 wc
0687c     7C 00 90 CD |  if_b	jmp	#LR__0530
06880                 | LR__0529
06880     90 01 00 FF 
06884     FD 37 06 F6 | 	mov	local09, ##@LR__5458
06888     16 13 02 F6 | 	mov	arg01, local04
0688c     1B 15 02 F6 | 	mov	arg02, local09
06890     3C E8 B1 FD | 	call	#__system___string_cmp
06894     00 FA 4D F2 | 	cmps	result1, #0 wz
06898     60 00 90 AD |  if_e	jmp	#LR__0530
0689c     90 01 00 FF 
068a0     FF 35 06 F6 | 	mov	local08, ##@LR__5459
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     1A 15 02 F6 | 	mov	arg02, local08
068ac     20 E8 B1 FD | 	call	#__system___string_cmp
068b0     FD 36 0A F6 | 	mov	local09, result1 wz
068b4     44 00 90 AD |  if_e	jmp	#LR__0530
068b8     91 01 00 FF 
068bc     01 3C 06 F6 | 	mov	local12, ##@LR__5460
068c0     1E 35 02 F6 | 	mov	local08, local12
068c4     16 13 02 F6 | 	mov	arg01, local04
068c8     1A 15 02 F6 | 	mov	arg02, local08
068cc     00 E8 B1 FD | 	call	#__system___string_cmp
068d0     FD 32 0A F6 | 	mov	local07, result1 wz
068d4     24 00 90 AD |  if_e	jmp	#LR__0530
068d8     91 01 00 FF 
068dc     03 3E 06 F6 | 	mov	local13, ##@LR__5461
068e0     1F 3D 02 F6 | 	mov	local12, local13
068e4     16 13 02 F6 | 	mov	arg01, local04
068e8     1E 15 02 F6 | 	mov	arg02, local12
068ec     E0 E7 B1 FD | 	call	#__system___string_cmp
068f0     FD 34 0A F6 | 	mov	local08, result1 wz
068f4     00 FA 05 56 |  if_ne	mov	result1, #0
068f8     0C 00 90 5D |  if_ne	jmp	#LR__0533
068fc                 | LR__0530
068fc     01 2E 06 F1 | 	add	local05, #1
06900     44 FE 9F FD | 	jmp	#LR__0524
06904                 | LR__0531
06904                 | LR__0532
06904                 | ' return true
06904     01 FA 65 F6 | 	neg	result1, #1
06908                 | LR__0533
06908     A7 F0 03 F6 | 	mov	ptra, fp
0690c     B2 00 A0 FD | 	call	#popregs_
06910                 | _isname_ret
06910     2D 00 64 FD | 	ret
06914                 | 
06914                 | ' 
06914                 | ' ' Check if the part is a number.  
06914                 | ' 
06914                 | ' function isnum(s as string) as boolean 
06914                 | _isnum
06914     13 4A 05 F6 | 	mov	COUNT_, #19
06918     A8 00 A0 FD | 	call	#pushregs_
0691c     09 27 02 F6 | 	mov	local01, arg01
06920     00 28 06 F6 | 	mov	local02, #0
06924     00 2A 06 F6 | 	mov	local03, #0
06928     13 13 02 F6 | 	mov	arg01, local01
0692c     09 2D 02 F6 | 	mov	local04, arg01
06930     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
06934                 | LR__0540
06934     16 FB C9 FA | 	rdbyte	result1, local04 wz
06938     01 2C 06 51 |  if_ne	add	local04, #1
0693c     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06940                 | LR__0541
06940     09 2D 82 F1 | 	sub	local04, arg01
06944     16 FB 01 F6 | 	mov	result1, local04
06948     FD 2E 0A F6 | 	mov	local05, result1 wz
0694c     00 FA 05 A6 |  if_e	mov	result1, #0
06950     A0 03 90 AD |  if_e	jmp	#LR__0556
06954     13 13 02 F6 | 	mov	arg01, local01
06958     01 14 06 F6 | 	mov	arg02, #1
0695c     01 16 06 F6 | 	mov	arg03, #1
06960     1C FC B1 FD | 	call	#__system__Mid_S
06964     FD 30 02 F6 | 	mov	local06, result1
06968                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06968     91 01 00 FF 
0696c     05 14 06 F6 | 	mov	arg02, ##@LR__5462
06970     18 13 02 F6 | 	mov	arg01, local06
06974     58 E7 B1 FD | 	call	#__system___string_cmp
06978     00 FA 55 F2 | 	cmps	result1, #0 wc
0697c     1C 00 90 CD |  if_b	jmp	#LR__0542
06980     91 01 00 FF 
06984     07 32 06 F6 | 	mov	local07, ##@LR__5463
06988     18 13 02 F6 | 	mov	arg01, local06
0698c     19 15 02 F6 | 	mov	arg02, local07
06990     3C E7 B1 FD | 	call	#__system___string_cmp
06994     01 FA 55 F2 | 	cmps	result1, #1 wc
06998     84 00 90 CD |  if_b	jmp	#LR__0543
0699c                 | LR__0542
0699c     91 01 00 FF 
069a0     09 34 06 F6 | 	mov	local08, ##@LR__5464
069a4     1A 33 02 F6 | 	mov	local07, local08
069a8     18 13 02 F6 | 	mov	arg01, local06
069ac     19 15 02 F6 | 	mov	arg02, local07
069b0     1C E7 B1 FD | 	call	#__system___string_cmp
069b4     00 FA 0D F2 | 	cmp	result1, #0 wz
069b8     64 00 90 AD |  if_e	jmp	#LR__0543
069bc     91 01 00 FF 
069c0     0B 36 06 F6 | 	mov	local09, ##@LR__5465
069c4     1B 35 02 F6 | 	mov	local08, local09
069c8     18 13 02 F6 | 	mov	arg01, local06
069cc     1A 15 02 F6 | 	mov	arg02, local08
069d0     FC E6 B1 FD | 	call	#__system___string_cmp
069d4     FD 32 0A F6 | 	mov	local07, result1 wz
069d8     44 00 90 AD |  if_e	jmp	#LR__0543
069dc     91 01 00 FF 
069e0     0D 38 06 F6 | 	mov	local10, ##@LR__5466
069e4     1C 37 02 F6 | 	mov	local09, local10
069e8     18 13 02 F6 | 	mov	arg01, local06
069ec     1B 15 02 F6 | 	mov	arg02, local09
069f0     DC E6 B1 FD | 	call	#__system___string_cmp
069f4     FD 34 0A F6 | 	mov	local08, result1 wz
069f8     24 00 90 AD |  if_e	jmp	#LR__0543
069fc     91 01 00 FF 
06a00     0F 3A 06 F6 | 	mov	local11, ##@LR__5467
06a04     1D 39 02 F6 | 	mov	local10, local11
06a08     18 13 02 F6 | 	mov	arg01, local06
06a0c     1C 15 02 F6 | 	mov	arg02, local10
06a10     BC E6 B1 FD | 	call	#__system___string_cmp
06a14     FD 36 0A F6 | 	mov	local09, result1 wz
06a18     00 FA 05 56 |  if_ne	mov	result1, #0
06a1c     D4 02 90 5D |  if_ne	jmp	#LR__0556
06a20                 | LR__0543
06a20                 | ' if m$="." then ds=1
06a20     91 01 00 FF 
06a24     11 14 06 F6 | 	mov	arg02, ##@LR__5468
06a28     18 13 02 F6 | 	mov	arg01, local06
06a2c     A0 E6 B1 FD | 	call	#__system___string_cmp
06a30     00 FA 0D F2 | 	cmp	result1, #0 wz
06a34     01 28 06 A6 |  if_e	mov	local02, #1
06a38                 | ' if m$="$" then hex=1 else hex=0
06a38     91 01 00 FF 
06a3c     13 14 06 F6 | 	mov	arg02, ##@LR__5469
06a40     18 13 02 F6 | 	mov	arg01, local06
06a44     88 E6 B1 FD | 	call	#__system___string_cmp
06a48     00 FA 0D F2 | 	cmp	result1, #0 wz
06a4c     01 3C 06 A6 |  if_e	mov	local12, #1
06a50     00 3C 06 56 |  if_ne	mov	local12, #0
06a54                 | ' if m$="%" then bin=1 else bin=0
06a54     91 01 00 FF 
06a58     15 14 06 F6 | 	mov	arg02, ##@LR__5470
06a5c     18 13 02 F6 | 	mov	arg01, local06
06a60     6C E6 B1 FD | 	call	#__system___string_cmp
06a64     00 FA 0D F2 | 	cmp	result1, #0 wz
06a68     01 3E 06 A6 |  if_e	mov	local13, #1
06a6c     00 3E 06 56 |  if_ne	mov	local13, #0
06a70                 | ' if l>1 then 
06a70     02 2E 56 F2 | 	cmps	local05, #2 wc
06a74     78 02 90 CD |  if_b	jmp	#LR__0555
06a78                 | '   for i=2 to l
06a78     02 40 06 F6 | 	mov	local14, #2
06a7c     17 43 02 F6 | 	mov	local15, local05
06a80     01 42 06 F1 | 	add	local15, #1
06a84                 | LR__0544
06a84     21 41 52 F2 | 	cmps	local14, local15 wc
06a88     64 02 90 3D |  if_ae	jmp	#LR__0554
06a8c     13 13 02 F6 | 	mov	arg01, local01
06a90     20 15 02 F6 | 	mov	arg02, local14
06a94     01 16 06 F6 | 	mov	arg03, #1
06a98     E4 FA B1 FD | 	call	#__system__Mid_S
06a9c     FD 30 02 F6 | 	mov	local06, result1
06aa0     00 44 06 F6 | 	mov	local16, #0
06aa4                 | '     m$=mid$(s,i,1) : b=false
06aa4                 | '     if m$>="0" andalso m$<="9" then b=true  
06aa4     91 01 00 FF 
06aa8     17 14 06 F6 | 	mov	arg02, ##@LR__5471
06aac     18 13 02 F6 | 	mov	arg01, local06
06ab0     1C E6 B1 FD | 	call	#__system___string_cmp
06ab4     00 FA 55 F2 | 	cmps	result1, #0 wc
06ab8     1C 00 90 CD |  if_b	jmp	#LR__0545
06abc     91 01 00 FF 
06ac0     19 32 06 F6 | 	mov	local07, ##@LR__5472
06ac4     18 13 02 F6 | 	mov	arg01, local06
06ac8     19 15 02 F6 | 	mov	arg02, local07
06acc     00 E6 B1 FD | 	call	#__system___string_cmp
06ad0     01 FA 55 F2 | 	cmps	result1, #1 wc
06ad4     01 44 66 C6 |  if_b	neg	local16, #1
06ad8                 | LR__0545
06ad8                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06ad8     91 01 00 FF 
06adc     1B 14 06 F6 | 	mov	arg02, ##@LR__5473
06ae0     18 13 02 F6 | 	mov	arg01, local06
06ae4     E8 E5 B1 FD | 	call	#__system___string_cmp
06ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
06aec     7C 00 90 AD |  if_e	jmp	#LR__0546
06af0     91 01 00 FF 
06af4     1D 32 06 F6 | 	mov	local07, ##@LR__5474
06af8     18 13 02 F6 | 	mov	arg01, local06
06afc     19 15 02 F6 | 	mov	arg02, local07
06b00     CC E5 B1 FD | 	call	#__system___string_cmp
06b04     00 FA 0D F2 | 	cmp	result1, #0 wz
06b08     60 00 90 AD |  if_e	jmp	#LR__0546
06b0c     91 01 00 FF 
06b10     1F 34 06 F6 | 	mov	local08, ##@LR__5475
06b14     1A 33 02 F6 | 	mov	local07, local08
06b18     18 13 02 F6 | 	mov	arg01, local06
06b1c     19 15 02 F6 | 	mov	arg02, local07
06b20     AC E5 B1 FD | 	call	#__system___string_cmp
06b24     00 FA 0D F2 | 	cmp	result1, #0 wz
06b28     40 00 90 AD |  if_e	jmp	#LR__0546
06b2c     91 01 00 FF 
06b30     21 36 06 F6 | 	mov	local09, ##@LR__5476
06b34     1B 35 02 F6 | 	mov	local08, local09
06b38     18 13 02 F6 | 	mov	arg01, local06
06b3c     1A 15 02 F6 | 	mov	arg02, local08
06b40     8C E5 B1 FD | 	call	#__system___string_cmp
06b44     FD 32 0A F6 | 	mov	local07, result1 wz
06b48     20 00 90 AD |  if_e	jmp	#LR__0546
06b4c     91 01 00 FF 
06b50     23 38 06 F6 | 	mov	local10, ##@LR__5477
06b54     1C 37 02 F6 | 	mov	local09, local10
06b58     18 13 02 F6 | 	mov	arg01, local06
06b5c     1B 15 02 F6 | 	mov	arg02, local09
06b60     6C E5 B1 FD | 	call	#__system___string_cmp
06b64     FD 34 0A F6 | 	mov	local08, result1 wz
06b68     04 00 90 5D |  if_ne	jmp	#LR__0547
06b6c                 | LR__0546
06b6c     01 44 66 F6 | 	neg	local16, #1
06b70                 | LR__0547
06b70                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06b70     01 3C 0E F2 | 	cmp	local12, #1 wz
06b74     34 00 90 5D |  if_ne	jmp	#LR__0548
06b78     91 01 00 FF 
06b7c     25 14 06 F6 | 	mov	arg02, ##@LR__5478
06b80     18 13 02 F6 | 	mov	arg01, local06
06b84     48 E5 B1 FD | 	call	#__system___string_cmp
06b88     00 FA 55 F2 | 	cmps	result1, #0 wc
06b8c     1C 00 90 CD |  if_b	jmp	#LR__0548
06b90     91 01 00 FF 
06b94     27 32 06 F6 | 	mov	local07, ##@LR__5479
06b98     18 13 02 F6 | 	mov	arg01, local06
06b9c     19 15 02 F6 | 	mov	arg02, local07
06ba0     2C E5 B1 FD | 	call	#__system___string_cmp
06ba4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ba8     01 44 66 C6 |  if_b	neg	local16, #1
06bac                 | LR__0548
06bac                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06bac     01 3E 0E F2 | 	cmp	local13, #1 wz
06bb0     58 00 90 5D |  if_ne	jmp	#LR__0550
06bb4     91 01 00 FF 
06bb8     29 14 06 F6 | 	mov	arg02, ##@LR__5480
06bbc     18 13 02 F6 | 	mov	arg01, local06
06bc0     0C E5 B1 FD | 	call	#__system___string_cmp
06bc4     00 FA 55 F2 | 	cmps	result1, #0 wc
06bc8     1C 00 90 CD |  if_b	jmp	#LR__0549
06bcc     91 01 00 FF 
06bd0     2B 32 06 F6 | 	mov	local07, ##@LR__5481
06bd4     18 13 02 F6 | 	mov	arg01, local06
06bd8     19 15 02 F6 | 	mov	arg02, local07
06bdc     F0 E4 B1 FD | 	call	#__system___string_cmp
06be0     01 FA 55 F2 | 	cmps	result1, #1 wc
06be4     24 00 90 CD |  if_b	jmp	#LR__0550
06be8                 | LR__0549
06be8     91 01 00 FF 
06bec     2D 34 06 F6 | 	mov	local08, ##@LR__5482
06bf0     1A 33 02 F6 | 	mov	local07, local08
06bf4     18 13 02 F6 | 	mov	arg01, local06
06bf8     19 15 02 F6 | 	mov	arg02, local07
06bfc     D0 E4 B1 FD | 	call	#__system___string_cmp
06c00     00 FA 0D F2 | 	cmp	result1, #0 wz
06c04     00 FA 05 56 |  if_ne	mov	result1, #0
06c08     E8 00 90 5D |  if_ne	jmp	#LR__0556
06c0c                 | LR__0550
06c0c                 | '     if not b then return false
06c0c     22 45 22 F6 | 	not	local16, local16
06c10     00 44 0E F2 | 	cmp	local16, #0 wz
06c14     00 FA 05 56 |  if_ne	mov	result1, #0
06c18     D8 00 90 5D |  if_ne	jmp	#LR__0556
06c1c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06c1c     91 01 00 FF 
06c20     2F 14 06 F6 | 	mov	arg02, ##@LR__5483
06c24     18 13 02 F6 | 	mov	arg01, local06
06c28     A4 E4 B1 FD | 	call	#__system___string_cmp
06c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c30     3C 00 90 5D |  if_ne	jmp	#LR__0551
06c34     20 15 02 F6 | 	mov	arg02, local14
06c38     01 14 86 F1 | 	sub	arg02, #1
06c3c     13 13 02 F6 | 	mov	arg01, local01
06c40     01 16 06 F6 | 	mov	arg03, #1
06c44     38 F9 B1 FD | 	call	#__system__Mid_S
06c48     FD 12 02 F6 | 	mov	arg01, result1
06c4c     28 FB B1 FD | 	call	#__system__LCase_S
06c50     FD 12 02 F6 | 	mov	arg01, result1
06c54     91 01 00 FF 
06c58     31 32 06 F6 | 	mov	local07, ##@LR__5484
06c5c     19 15 02 F6 | 	mov	arg02, local07
06c60     6C E4 B1 FD | 	call	#__system___string_cmp
06c64     00 FA 0D F2 | 	cmp	result1, #0 wz
06c68     00 FA 05 56 |  if_ne	mov	result1, #0
06c6c     84 00 90 5D |  if_ne	jmp	#LR__0556
06c70                 | LR__0551
06c70                 | '     if m$="." then ds+=1: if ds>1 then return false
06c70     91 01 00 FF 
06c74     33 14 06 F6 | 	mov	arg02, ##@LR__5485
06c78     18 13 02 F6 | 	mov	arg01, local06
06c7c     50 E4 B1 FD | 	call	#__system___string_cmp
06c80     00 FA 0D F2 | 	cmp	result1, #0 wz
06c84     01 28 06 A1 |  if_e	add	local02, #1
06c88     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06c8c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06c90     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06c94                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06c94     91 01 00 FF 
06c98     35 46 06 F6 | 	mov	local17, ##@LR__5486
06c9c     23 49 02 F6 | 	mov	local18, local17
06ca0     18 13 02 F6 | 	mov	arg01, local06
06ca4     24 15 02 F6 | 	mov	arg02, local18
06ca8     24 E4 B1 FD | 	call	#__system___string_cmp
06cac     FD 4A 0A F6 | 	mov	local19, result1 wz
06cb0     20 00 90 AD |  if_e	jmp	#LR__0552
06cb4     91 01 00 FF 
06cb8     37 32 06 F6 | 	mov	local07, ##@LR__5487
06cbc     19 47 02 F6 | 	mov	local17, local07
06cc0     18 13 02 F6 | 	mov	arg01, local06
06cc4     23 15 02 F6 | 	mov	arg02, local17
06cc8     04 E4 B1 FD | 	call	#__system___string_cmp
06ccc     FD 48 0A F6 | 	mov	local18, result1 wz
06cd0     14 00 90 5D |  if_ne	jmp	#LR__0553
06cd4                 | LR__0552
06cd4     01 2A 06 F1 | 	add	local03, #1
06cd8     00 3C 0E F2 | 	cmp	local12, #0 wz
06cdc     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06ce0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06ce4     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06ce8                 | LR__0553
06ce8     01 40 06 F1 | 	add	local14, #1
06cec     94 FD 9F FD | 	jmp	#LR__0544
06cf0                 | LR__0554
06cf0                 | LR__0555
06cf0                 | ' return true
06cf0     01 FA 65 F6 | 	neg	result1, #1
06cf4                 | LR__0556
06cf4     A7 F0 03 F6 | 	mov	ptra, fp
06cf8     B2 00 A0 FD | 	call	#popregs_
06cfc                 | _isnum_ret
06cfc     2D 00 64 FD | 	ret
06d00                 | 
06d00                 | '   
06d00                 | ' ' Check if the part is an integer number.    
06d00                 | '   
06d00                 | ' function isint(s as string) as boolean
06d00                 | _isint
06d00     0E 4A 05 F6 | 	mov	COUNT_, #14
06d04     A8 00 A0 FD | 	call	#pushregs_
06d08     09 27 02 F6 | 	mov	local01, arg01
06d0c     09 29 02 F6 | 	mov	local02, arg01
06d10     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06d14                 | LR__0560
06d14     14 FB C9 FA | 	rdbyte	result1, local02 wz
06d18     01 28 06 51 |  if_ne	add	local02, #1
06d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06d20                 | LR__0561
06d20     09 29 82 F1 | 	sub	local02, arg01
06d24     14 FB 01 F6 | 	mov	result1, local02
06d28     FD 2A 0A F6 | 	mov	local03, result1 wz
06d2c     00 FA 05 A6 |  if_e	mov	result1, #0
06d30     64 02 90 AD |  if_e	jmp	#LR__0574
06d34     13 13 02 F6 | 	mov	arg01, local01
06d38     01 14 06 F6 | 	mov	arg02, #1
06d3c     01 16 06 F6 | 	mov	arg03, #1
06d40     3C F8 B1 FD | 	call	#__system__Mid_S
06d44     FD 2C 02 F6 | 	mov	local04, result1
06d48                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06d48     91 01 00 FF 
06d4c     39 14 06 F6 | 	mov	arg02, ##@LR__5488
06d50     16 13 02 F6 | 	mov	arg01, local04
06d54     78 E3 B1 FD | 	call	#__system___string_cmp
06d58     00 FA 55 F2 | 	cmps	result1, #0 wc
06d5c     1C 00 90 CD |  if_b	jmp	#LR__0562
06d60     91 01 00 FF 
06d64     3B 2E 06 F6 | 	mov	local05, ##@LR__5489
06d68     16 13 02 F6 | 	mov	arg01, local04
06d6c     17 15 02 F6 | 	mov	arg02, local05
06d70     5C E3 B1 FD | 	call	#__system___string_cmp
06d74     01 FA 55 F2 | 	cmps	result1, #1 wc
06d78     64 00 90 CD |  if_b	jmp	#LR__0563
06d7c                 | LR__0562
06d7c     91 01 00 FF 
06d80     3D 30 06 F6 | 	mov	local06, ##@LR__5490
06d84     18 2F 02 F6 | 	mov	local05, local06
06d88     16 13 02 F6 | 	mov	arg01, local04
06d8c     17 15 02 F6 | 	mov	arg02, local05
06d90     3C E3 B1 FD | 	call	#__system___string_cmp
06d94     00 FA 0D F2 | 	cmp	result1, #0 wz
06d98     44 00 90 AD |  if_e	jmp	#LR__0563
06d9c     91 01 00 FF 
06da0     3F 32 06 F6 | 	mov	local07, ##@LR__5491
06da4     19 31 02 F6 | 	mov	local06, local07
06da8     16 13 02 F6 | 	mov	arg01, local04
06dac     18 15 02 F6 | 	mov	arg02, local06
06db0     1C E3 B1 FD | 	call	#__system___string_cmp
06db4     FD 2E 0A F6 | 	mov	local05, result1 wz
06db8     24 00 90 AD |  if_e	jmp	#LR__0563
06dbc     91 01 00 FF 
06dc0     41 34 06 F6 | 	mov	local08, ##@LR__5492
06dc4     1A 33 02 F6 | 	mov	local07, local08
06dc8     16 13 02 F6 | 	mov	arg01, local04
06dcc     19 15 02 F6 | 	mov	arg02, local07
06dd0     FC E2 B1 FD | 	call	#__system___string_cmp
06dd4     FD 30 0A F6 | 	mov	local06, result1 wz
06dd8     00 FA 05 56 |  if_ne	mov	result1, #0
06ddc     B8 01 90 5D |  if_ne	jmp	#LR__0574
06de0                 | LR__0563
06de0                 | ' if m$="$" then hex=1 else hex=0
06de0     91 01 00 FF 
06de4     43 14 06 F6 | 	mov	arg02, ##@LR__5493
06de8     16 13 02 F6 | 	mov	arg01, local04
06dec     E0 E2 B1 FD | 	call	#__system___string_cmp
06df0     00 FA 0D F2 | 	cmp	result1, #0 wz
06df4     01 36 06 A6 |  if_e	mov	local09, #1
06df8     00 36 06 56 |  if_ne	mov	local09, #0
06dfc                 | ' if m$="%" then bin=1 else bin=0
06dfc     91 01 00 FF 
06e00     45 14 06 F6 | 	mov	arg02, ##@LR__5494
06e04     16 13 02 F6 | 	mov	arg01, local04
06e08     C4 E2 B1 FD | 	call	#__system___string_cmp
06e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e10     01 38 06 A6 |  if_e	mov	local10, #1
06e14     00 38 06 56 |  if_ne	mov	local10, #0
06e18                 | ' if l>1 then 
06e18     02 2A 56 F2 | 	cmps	local03, #2 wc
06e1c     74 01 90 CD |  if_b	jmp	#LR__0573
06e20                 | '   for i=2 to l
06e20     02 3A 06 F6 | 	mov	local11, #2
06e24     15 3D 02 F6 | 	mov	local12, local03
06e28     01 3C 06 F1 | 	add	local12, #1
06e2c                 | LR__0564
06e2c     1E 3B 52 F2 | 	cmps	local11, local12 wc
06e30     60 01 90 3D |  if_ae	jmp	#LR__0572
06e34     13 13 02 F6 | 	mov	arg01, local01
06e38     1D 15 02 F6 | 	mov	arg02, local11
06e3c     01 16 06 F6 | 	mov	arg03, #1
06e40     3C F7 B1 FD | 	call	#__system__Mid_S
06e44     FD 2C 02 F6 | 	mov	local04, result1
06e48                 | '     m$=mid$(s,i,1) 
06e48                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06e48     00 36 0E F2 | 	cmp	local09, #0 wz
06e4c     50 00 90 5D |  if_ne	jmp	#LR__0566
06e50     91 01 00 FF 
06e54     47 14 06 F6 | 	mov	arg02, ##@LR__5495
06e58     16 13 02 F6 | 	mov	arg01, local04
06e5c     70 E2 B1 FD | 	call	#__system___string_cmp
06e60     00 FA 55 F2 | 	cmps	result1, #0 wc
06e64     18 00 90 CD |  if_b	jmp	#LR__0565
06e68     91 01 00 FF 
06e6c     49 14 06 F6 | 	mov	arg02, ##@LR__5496
06e70     16 13 02 F6 | 	mov	arg01, local04
06e74     58 E2 B1 FD | 	call	#__system___string_cmp
06e78     01 FA 55 F2 | 	cmps	result1, #1 wc
06e7c     20 00 90 CD |  if_b	jmp	#LR__0566
06e80                 | LR__0565
06e80     91 01 00 FF 
06e84     4B 30 06 F6 | 	mov	local06, ##@LR__5497
06e88     16 13 02 F6 | 	mov	arg01, local04
06e8c     18 15 02 F6 | 	mov	arg02, local06
06e90     3C E2 B1 FD | 	call	#__system___string_cmp
06e94     00 FA 0D F2 | 	cmp	result1, #0 wz
06e98     00 FA 05 56 |  if_ne	mov	result1, #0
06e9c     F8 00 90 5D |  if_ne	jmp	#LR__0574
06ea0                 | LR__0566
06ea0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06ea0     01 36 0E F2 | 	cmp	local09, #1 wz
06ea4     90 00 90 5D |  if_ne	jmp	#LR__0569
06ea8     91 01 00 FF 
06eac     4D 14 06 F6 | 	mov	arg02, ##@LR__5498
06eb0     16 13 02 F6 | 	mov	arg01, local04
06eb4     18 E2 B1 FD | 	call	#__system___string_cmp
06eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
06ebc     1C 00 90 CD |  if_b	jmp	#LR__0567
06ec0     91 01 00 FF 
06ec4     4F 14 06 F6 | 	mov	arg02, ##@LR__5499
06ec8     16 13 02 F6 | 	mov	arg01, local04
06ecc     00 E2 B1 FD | 	call	#__system___string_cmp
06ed0     FD 3E 02 F6 | 	mov	local13, result1
06ed4     01 3E 56 F2 | 	cmps	local13, #1 wc
06ed8     5C 00 90 CD |  if_b	jmp	#LR__0569
06edc                 | LR__0567
06edc     91 01 00 FF 
06ee0     51 2E 06 F6 | 	mov	local05, ##@LR__5500
06ee4     16 13 02 F6 | 	mov	arg01, local04
06ee8     17 15 02 F6 | 	mov	arg02, local05
06eec     E0 E1 B1 FD | 	call	#__system___string_cmp
06ef0     FD 40 02 F6 | 	mov	local14, result1
06ef4     00 40 56 F2 | 	cmps	local14, #0 wc
06ef8     1C 00 90 CD |  if_b	jmp	#LR__0568
06efc     91 01 00 FF 
06f00     53 32 06 F6 | 	mov	local07, ##@LR__5501
06f04     16 13 02 F6 | 	mov	arg01, local04
06f08     19 15 02 F6 | 	mov	arg02, local07
06f0c     C0 E1 B1 FD | 	call	#__system___string_cmp
06f10     01 FA 55 F2 | 	cmps	result1, #1 wc
06f14     20 00 90 CD |  if_b	jmp	#LR__0569
06f18                 | LR__0568
06f18     91 01 00 FF 
06f1c     55 34 06 F6 | 	mov	local08, ##@LR__5502
06f20     16 13 02 F6 | 	mov	arg01, local04
06f24     1A 15 02 F6 | 	mov	arg02, local08
06f28     A4 E1 B1 FD | 	call	#__system___string_cmp
06f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f30     00 FA 05 56 |  if_ne	mov	result1, #0
06f34     60 00 90 5D |  if_ne	jmp	#LR__0574
06f38                 | LR__0569
06f38                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06f38     01 38 0E F2 | 	cmp	local10, #1 wz
06f3c     4C 00 90 5D |  if_ne	jmp	#LR__0571
06f40     91 01 00 FF 
06f44     57 14 06 F6 | 	mov	arg02, ##@LR__5503
06f48     16 13 02 F6 | 	mov	arg01, local04
06f4c     80 E1 B1 FD | 	call	#__system___string_cmp
06f50     00 FA 55 F2 | 	cmps	result1, #0 wc
06f54     18 00 90 CD |  if_b	jmp	#LR__0570
06f58     91 01 00 FF 
06f5c     59 14 06 F6 | 	mov	arg02, ##@LR__5504
06f60     16 13 02 F6 | 	mov	arg01, local04
06f64     68 E1 B1 FD | 	call	#__system___string_cmp
06f68     01 FA 55 F2 | 	cmps	result1, #1 wc
06f6c     1C 00 90 CD |  if_b	jmp	#LR__0571
06f70                 | LR__0570
06f70     91 01 00 FF 
06f74     5B 14 06 F6 | 	mov	arg02, ##@LR__5505
06f78     16 13 02 F6 | 	mov	arg01, local04
06f7c     50 E1 B1 FD | 	call	#__system___string_cmp
06f80     00 FA 0D F2 | 	cmp	result1, #0 wz
06f84     00 FA 05 56 |  if_ne	mov	result1, #0
06f88     0C 00 90 5D |  if_ne	jmp	#LR__0574
06f8c                 | LR__0571
06f8c     01 3A 06 F1 | 	add	local11, #1
06f90     98 FE 9F FD | 	jmp	#LR__0564
06f94                 | LR__0572
06f94                 | LR__0573
06f94                 | ' return true
06f94     01 FA 65 F6 | 	neg	result1, #1
06f98                 | LR__0574
06f98     A7 F0 03 F6 | 	mov	ptra, fp
06f9c     B2 00 A0 FD | 	call	#popregs_
06fa0                 | _isint_ret
06fa0     2D 00 64 FD | 	ret
06fa4                 | 
06fa4                 | ' 
06fa4                 | ' ' Check if the part is a positive decimal number.  
06fa4                 | ' 
06fa4                 | ' function isdec(s as string) as boolean
06fa4                 | _isdec
06fa4     05 4A 05 F6 | 	mov	COUNT_, #5
06fa8     A8 00 A0 FD | 	call	#pushregs_
06fac     09 27 02 F6 | 	mov	local01, arg01
06fb0     09 29 02 F6 | 	mov	local02, arg01
06fb4     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06fb8                 | LR__0580
06fb8     14 FB C9 FA | 	rdbyte	result1, local02 wz
06fbc     01 28 06 51 |  if_ne	add	local02, #1
06fc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06fc4                 | LR__0581
06fc4     09 29 82 F1 | 	sub	local02, arg01
06fc8     14 FB 01 F6 | 	mov	result1, local02
06fcc     FD 28 0A F6 | 	mov	local02, result1 wz
06fd0     00 FA 05 A6 |  if_e	mov	result1, #0
06fd4     80 00 90 AD |  if_e	jmp	#LR__0586
06fd8                 | ' for i=1 to l
06fd8     01 2A 06 F6 | 	mov	local03, #1
06fdc     14 2D 02 F6 | 	mov	local04, local02
06fe0     01 2C 06 F1 | 	add	local04, #1
06fe4                 | LR__0582
06fe4     16 2B 52 F2 | 	cmps	local03, local04 wc
06fe8     68 00 90 3D |  if_ae	jmp	#LR__0585
06fec     13 13 02 F6 | 	mov	arg01, local01
06ff0     15 15 02 F6 | 	mov	arg02, local03
06ff4     01 16 06 F6 | 	mov	arg03, #1
06ff8     84 F5 B1 FD | 	call	#__system__Mid_S
06ffc     FD 2E 02 F6 | 	mov	local05, result1
07000                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07000     91 01 00 FF 
07004     5D 14 06 F6 | 	mov	arg02, ##@LR__5506
07008     17 13 02 F6 | 	mov	arg01, local05
0700c     C0 E0 B1 FD | 	call	#__system___string_cmp
07010     00 FA 55 F2 | 	cmps	result1, #0 wc
07014     18 00 90 CD |  if_b	jmp	#LR__0583
07018     91 01 00 FF 
0701c     5F 14 06 F6 | 	mov	arg02, ##@LR__5507
07020     17 13 02 F6 | 	mov	arg01, local05
07024     A8 E0 B1 FD | 	call	#__system___string_cmp
07028     01 FA 55 F2 | 	cmps	result1, #1 wc
0702c     1C 00 90 CD |  if_b	jmp	#LR__0584
07030                 | LR__0583
07030     91 01 00 FF 
07034     61 14 06 F6 | 	mov	arg02, ##@LR__5508
07038     17 13 02 F6 | 	mov	arg01, local05
0703c     90 E0 B1 FD | 	call	#__system___string_cmp
07040     00 FA 0D F2 | 	cmp	result1, #0 wz
07044     00 FA 05 56 |  if_ne	mov	result1, #0
07048     0C 00 90 5D |  if_ne	jmp	#LR__0586
0704c                 | LR__0584
0704c     01 2A 06 F1 | 	add	local03, #1
07050     90 FF 9F FD | 	jmp	#LR__0582
07054                 | LR__0585
07054                 | ' return true
07054     01 FA 65 F6 | 	neg	result1, #1
07058                 | LR__0586
07058     A7 F0 03 F6 | 	mov	ptra, fp
0705c     B2 00 A0 FD | 	call	#popregs_
07060                 | _isdec_ret
07060     2D 00 64 FD | 	ret
07064                 | 
07064                 | ' 
07064                 | ' ' Check if the part is a string.  
07064                 | ' 
07064                 | ' function isstring(s as string) as boolean
07064                 | _isstring
07064     01 4A 05 F6 | 	mov	COUNT_, #1
07068     A8 00 A0 FD | 	call	#pushregs_
0706c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
0706c     09 27 02 F6 | 	mov	local01, arg01
07070     01 14 06 F6 | 	mov	arg02, #1
07074     F4 F3 B1 FD | 	call	#__system__Left_S
07078     FD 12 02 F6 | 	mov	arg01, result1
0707c     91 01 00 FF 
07080     63 14 06 F6 | 	mov	arg02, ##@LR__5509
07084     48 E0 B1 FD | 	call	#__system___string_cmp
07088     00 FA 4D F2 | 	cmps	result1, #0 wz
0708c     28 00 90 5D |  if_ne	jmp	#LR__0590
07090     13 13 02 F6 | 	mov	arg01, local01
07094     01 14 06 F6 | 	mov	arg02, #1
07098     58 F4 B1 FD | 	call	#__system__Right_S
0709c     FD 12 02 F6 | 	mov	arg01, result1
070a0     91 01 00 FF 
070a4     65 14 06 F6 | 	mov	arg02, ##@LR__5510
070a8     24 E0 B1 FD | 	call	#__system___string_cmp
070ac     00 FA 4D F2 | 	cmps	result1, #0 wz
070b0     01 FA 65 A6 |  if_e	neg	result1, #1
070b4     04 00 90 AD |  if_e	jmp	#LR__0591
070b8                 | LR__0590
070b8     00 FA 05 F6 | 	mov	result1, #0
070bc                 | LR__0591
070bc     A7 F0 03 F6 | 	mov	ptra, fp
070c0     B2 00 A0 FD | 	call	#popregs_
070c4                 | _isstring_ret
070c4     2D 00 64 FD | 	ret
070c8                 | 
070c8                 | ' 
070c8                 | ' ' getnoteval. Returns the frequency of note token
070c8                 | ' 
070c8                 | ' function getnoteval(token) as single
070c8                 | _getnoteval
070c8     02 4A 05 F6 | 	mov	COUNT_, #2
070cc     A8 00 A0 FD | 	call	#pushregs_
070d0     01 00 00 FF 
070d4     00 13 86 F1 | 	sub	arg01, ##768
070d8     09 15 52 F6 | 	abs	arg02, arg01 wc
070dc     0C 14 16 FD | 	qdiv	arg02, #12
070e0     F2 14 02 F6 | 	mov	arg02, objptr
070e4     14 00 00 FF 
070e8     D8 14 06 F1 | 	add	arg02, ##10456
070ec     19 FA 61 FD | 	getqy	result1
070f0     FD FA 81 F6 | 	negc	result1, result1
070f4     02 FA 65 F0 | 	shl	result1, #2
070f8     0A FB 01 F1 | 	add	result1, arg02
070fc     09 15 52 F6 | 	abs	arg02, arg01 wc
07100     0C 14 16 FD | 	qdiv	arg02, #12
07104     FD 26 02 FB | 	rdlong	local01, result1
07108     01 12 06 F6 | 	mov	arg01, #1
0710c                 | ' noteexp=1+(note/12) 
0710c                 | ' return (2.0^noteexp)*notebase
0710c     18 14 62 FD | 	getqx	arg02
07110     0A 13 82 F3 | 	sumc	arg01, arg02
07114     09 13 52 F6 | 	abs	arg01, arg01 wc
07118     1F 28 C6 C9 |  if_b	decod	local02, #31
0711c     00 28 06 36 |  if_ae	mov	local02, #0
07120     50 FA B1 FD | 	call	#__system___float_fromuns
07124     14 FB 61 F5 | 	xor	result1, local02
07128     FD 14 02 F6 | 	mov	arg02, result1
0712c     1E 12 C6 F9 | 	decod	arg01, #30
07130     1C 0C B2 FD | 	call	#__system____builtin_powf
07134     FD 12 02 F6 | 	mov	arg01, result1
07138     13 15 02 F6 | 	mov	arg02, local01
0713c     34 FE B1 FD | 	call	#__system___float_mul
07140     A7 F0 03 F6 | 	mov	ptra, fp
07144     B2 00 A0 FD | 	call	#popregs_
07148                 | _getnoteval_ret
07148     2D 00 64 FD | 	ret
0714c                 | 
0714c                 | ' 
0714c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0714c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0714c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0714c                 | ' 
0714c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0714c                 | ' '
0714c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0714c                 | ' '
0714c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0714c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0714c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0714c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0714c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0714c                 | ' ' 
0714c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0714c                 | ' 
0714c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0714c                 | ' ' Helper functions to manage program lines
0714c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0714c                 | ' 
0714c                 | ' '----- delete a line from a program
0714c                 | ' 
0714c                 | ' function deleteline(aline as ulong) as integer
0714c                 | _deleteline
0714c     05 4A 05 F6 | 	mov	COUNT_, #5
07150     A8 00 A0 FD | 	call	#pushregs_
07154     2C F0 07 F1 | 	add	ptra, #44
07158     09 27 02 F6 | 	mov	local01, arg01
0715c     4A 00 00 FF 
07160     A8 E4 05 F1 | 	add	objptr, ##38056
07164     F2 28 02 FB | 	rdlong	local02, objptr
07168                 | ' 
07168                 | ' searchptr=programstart
07168                 | ' do
07168     3E 00 00 FF 
0716c     DC E5 85 F1 | 	sub	objptr, ##32220
07170                 | LR__0600
07170     A7 12 02 F6 | 	mov	arg01, fp
07174     14 12 06 F1 | 	add	arg01, #20
07178     14 15 02 F6 | 	mov	arg02, local02
0717c     18 16 06 F6 | 	mov	arg03, #24
07180     20 D7 B1 FD | 	call	#_psram_spin2_read1
07184     14 17 02 F6 | 	mov	arg03, local02
07188     28 4E 05 F1 | 	add	fp, #40
0718c     A7 28 02 FB | 	rdlong	local02, fp
07190     14 4E 85 F1 | 	sub	fp, #20
07194     A7 14 02 FB | 	rdlong	arg02, fp
07198     14 4E 85 F1 | 	sub	fp, #20
0719c     13 15 12 F2 | 	cmp	arg02, local01 wc
071a0     28 4E 05 C1 |  if_b	add	fp, #40
071a4     A7 2A 02 CB |  if_b	rdlong	local03, fp
071a8     28 4E 85 C1 |  if_b	sub	fp, #40
071ac     FF FF 3F CF 
071b0     FF 2B 0E C2 |  if_b	cmp	local03, ##2147483647 wz
071b4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
071b8     0B 00 00 FF 
071bc     CC E4 85 F1 | 	sub	objptr, ##5836
071c0                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
071c0     14 4E 05 F1 | 	add	fp, #20
071c4     A7 2A 02 FB | 	rdlong	local03, fp
071c8     14 4E 85 F1 | 	sub	fp, #20
071cc     13 2B 0A F2 | 	cmp	local03, local01 wz
071d0     01 FA 65 56 |  if_ne	neg	result1, #1
071d4     2C 02 90 5D |  if_ne	jmp	#LR__0605
071d8     0B 13 02 F6 | 	mov	arg01, arg03
071dc     01 14 66 F6 | 	neg	arg02, #1
071e0     D8 8A B1 FD | 	call	#_pslpoke
071e4                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
071e4                 | ' 
071e4                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
071e4     28 4E 05 F1 | 	add	fp, #40
071e8     A7 16 02 FB | 	rdlong	arg03, fp
071ec     28 4E 85 F1 | 	sub	fp, #40
071f0     FF FF 3F FF 
071f4     FF 17 0E F2 | 	cmp	arg03, ##2147483647 wz
071f8     24 4E 05 A1 |  if_e	add	fp, #36
071fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
07200     24 4E 85 A1 |  if_e	sub	fp, #36
07204     FF FF 7F AF 
07208     FF 2D 0E A2 |  if_e	cmp	local04, ##-1 wz
0720c     88 00 90 5D |  if_ne	jmp	#LR__0601
07210     4A 00 00 FF 
07214     A8 E4 05 F1 | 	add	objptr, ##38056
07218     00 04 80 FF 
0721c     F2 00 68 FC | 	wrlong	##524288, objptr
07220     07 00 00 FF 
07224     2C E4 85 F1 | 	sub	objptr, ##3628
07228     00 04 80 FF 
0722c     F2 00 68 FC | 	wrlong	##524288, objptr
07230     07 00 00 FF 
07234     30 E4 05 F1 | 	add	objptr, ##3632
07238     F2 00 68 FC | 	wrlong	#0, objptr
0723c     04 E4 05 F1 | 	add	objptr, #4
07240     FF FF FF FF 
07244     F2 FE 6B FC | 	wrlong	##-1, objptr
07248     4A 00 00 FF 
0724c     B0 E4 85 F1 | 	sub	objptr, ##38064
07250     00 12 06 F6 | 	mov	arg01, #0
07254     01 14 66 F6 | 	neg	arg02, #1
07258     60 8A B1 FD | 	call	#_pslpoke
0725c     10 12 06 F6 | 	mov	arg01, #16
07260     01 14 66 F6 | 	neg	arg02, #1
07264     54 8A B1 FD | 	call	#_pslpoke
07268     14 12 06 F6 | 	mov	arg01, #20
0726c     1E 14 CE F9 | 	bmask	arg02, #30
07270     48 8A B1 FD | 	call	#_pslpoke
07274     50 00 00 FF 
07278     D8 E4 05 F1 | 	add	objptr, ##41176
0727c     00 04 80 FF 
07280     F2 00 68 FC | 	wrlong	##524288, objptr
07284     04 E4 05 F1 | 	add	objptr, #4
07288     00 04 80 FF 
0728c     F2 00 68 FC | 	wrlong	##524288, objptr
07290     50 00 00 FF 
07294     DC E4 85 F1 | 	sub	objptr, ##41180
07298                 | LR__0601
07298                 | ' 
07298                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07298     28 4E 05 F1 | 	add	fp, #40
0729c     A7 2E 02 FB | 	rdlong	local05, fp
072a0     28 4E 85 F1 | 	sub	fp, #40
072a4     FF FF 3F FF 
072a8     FF 2F 0E F2 | 	cmp	local05, ##2147483647 wz
072ac     74 00 90 5D |  if_ne	jmp	#LR__0602
072b0     24 4E 05 F1 | 	add	fp, #36
072b4     A7 2C 02 FB | 	rdlong	local04, fp
072b8     24 4E 85 F1 | 	sub	fp, #36
072bc     FF FF 7F FF 
072c0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
072c4     5C 00 90 AD |  if_e	jmp	#LR__0602
072c8     24 4E 05 F1 | 	add	fp, #36
072cc     A7 12 02 FB | 	rdlong	arg01, fp
072d0     24 4E 85 F1 | 	sub	fp, #36
072d4     14 12 06 F1 | 	add	arg01, #20
072d8     1E 14 CE F9 | 	bmask	arg02, #30
072dc     DC 89 B1 FD | 	call	#_pslpoke
072e0     24 4E 05 F1 | 	add	fp, #36
072e4     A7 2E 02 FB | 	rdlong	local05, fp
072e8     4A 00 00 FF 
072ec     B0 E4 05 F1 | 	add	objptr, ##38064
072f0     F2 2E 62 FC | 	wrlong	local05, objptr
072f4     4A 00 00 FF 
072f8     B0 E4 85 F1 | 	sub	objptr, ##38064
072fc     A7 12 02 FB | 	rdlong	arg01, fp
07300     24 4E 85 F1 | 	sub	fp, #36
07304     D4 8A B1 FD | 	call	#_pslpeek
07308     4A 00 00 FF 
0730c     AC E4 05 F1 | 	add	objptr, ##38060
07310     F2 FA 61 FC | 	wrlong	result1, objptr
07314     4A 00 00 FF 
07318     AC E4 85 F1 | 	sub	objptr, ##38060
0731c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0731c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0731c                 | '   lastline=pslpeek(header(4))
0731c                 | '   return 0
0731c     00 FA 05 F6 | 	mov	result1, #0
07320     E0 00 90 FD | 	jmp	#LR__0605
07324                 | LR__0602
07324                 | ' 
07324                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07324     28 4E 05 F1 | 	add	fp, #40
07328     A7 2E 02 FB | 	rdlong	local05, fp
0732c     28 4E 85 F1 | 	sub	fp, #40
07330     FF FF 3F FF 
07334     FF 2F 0E F2 | 	cmp	local05, ##2147483647 wz
07338     58 00 90 AD |  if_e	jmp	#LR__0603
0733c     24 4E 05 F1 | 	add	fp, #36
07340     A7 2C 02 FB | 	rdlong	local04, fp
07344     24 4E 85 F1 | 	sub	fp, #36
07348     FF FF 7F FF 
0734c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
07350     40 00 90 5D |  if_ne	jmp	#LR__0603
07354     28 4E 05 F1 | 	add	fp, #40
07358     A7 12 02 FB | 	rdlong	arg01, fp
0735c     28 4E 85 F1 | 	sub	fp, #40
07360     10 12 06 F1 | 	add	arg01, #16
07364     01 14 66 F6 | 	neg	arg02, #1
07368     50 89 B1 FD | 	call	#_pslpoke
0736c     28 4E 05 F1 | 	add	fp, #40
07370     A7 2E 02 FB | 	rdlong	local05, fp
07374     28 4E 85 F1 | 	sub	fp, #40
07378     4A 00 00 FF 
0737c     A8 E4 05 F1 | 	add	objptr, ##38056
07380     F2 2E 62 FC | 	wrlong	local05, objptr
07384     4A 00 00 FF 
07388     A8 E4 85 F1 | 	sub	objptr, ##38056
0738c                 | ' '   print "deleted first line"
0738c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
0738c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
0738c                 | '   return 0
0738c     00 FA 05 F6 | 	mov	result1, #0
07390     70 00 90 FD | 	jmp	#LR__0605
07394                 | LR__0603
07394                 | ' 
07394                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07394     28 4E 05 F1 | 	add	fp, #40
07398     A7 2E 02 FB | 	rdlong	local05, fp
0739c     28 4E 85 F1 | 	sub	fp, #40
073a0     FF FF 3F FF 
073a4     FF 2F 0E F2 | 	cmp	local05, ##2147483647 wz
073a8     24 4E 05 51 |  if_ne	add	fp, #36
073ac     A7 2C 02 5B |  if_ne	rdlong	local04, fp
073b0     24 4E 85 51 |  if_ne	sub	fp, #36
073b4     FF FF 7F 5F 
073b8     FF 2D 0E 52 |  if_ne	cmp	local04, ##-1 wz
073bc     40 00 90 AD |  if_e	jmp	#LR__0604
073c0     28 4E 05 F1 | 	add	fp, #40
073c4     A7 12 02 FB | 	rdlong	arg01, fp
073c8     10 12 06 F1 | 	add	arg01, #16
073cc     04 4E 85 F1 | 	sub	fp, #4
073d0     A7 14 02 FB | 	rdlong	arg02, fp
073d4     24 4E 85 F1 | 	sub	fp, #36
073d8     E0 88 B1 FD | 	call	#_pslpoke
073dc     24 4E 05 F1 | 	add	fp, #36
073e0     A7 12 02 FB | 	rdlong	arg01, fp
073e4     14 12 06 F1 | 	add	arg01, #20
073e8     04 4E 05 F1 | 	add	fp, #4
073ec     A7 14 02 FB | 	rdlong	arg02, fp
073f0     28 4E 85 F1 | 	sub	fp, #40
073f4     C4 88 B1 FD | 	call	#_pslpoke
073f8                 | '    pslpoke(header(5)+16,header(4))  
073f8                 | '    pslpoke(header(4)+20, header(5))
073f8                 | '    return 0
073f8     00 FA 05 F6 | 	mov	result1, #0
073fc     04 00 90 FD | 	jmp	#LR__0605
07400                 | LR__0604
07400     00 FA 05 F6 | 	mov	result1, #0
07404                 | LR__0605
07404     A7 F0 03 F6 | 	mov	ptra, fp
07408     B2 00 A0 FD | 	call	#popregs_
0740c                 | _deleteline_ret
0740c     2D 00 64 FD | 	ret
07410                 | 
07410                 | ' 
07410                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07410                 | ' 
07410                 | ' sub save_line
07410                 | _save_line
07410     03 4A 05 F6 | 	mov	COUNT_, #3
07414     A8 00 A0 FD | 	call	#pushregs_
07418     4A 00 00 FF 
0741c     9C E4 05 F1 | 	add	objptr, ##38044
07420     F2 16 02 FB | 	rdlong	arg03, objptr
07424     01 16 06 F1 | 	add	arg03, #1
07428     05 00 00 FF 
0742c     18 E4 85 F1 | 	sub	objptr, ##2584
07430     F2 14 02 FB | 	rdlong	arg02, objptr
07434     0B 15 02 FD | 	qmul	arg02, arg03
07438     0E 00 00 FF 
0743c     44 E4 85 F1 | 	sub	objptr, ##7236
07440     F2 12 02 FB | 	rdlong	arg01, objptr
07444     37 00 00 FF 
07448     40 E4 85 F1 | 	sub	objptr, ##28224
0744c     09 27 02 F6 | 	mov	local01, arg01
07450     18 28 62 FD | 	getqx	local02
07454     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07458                 | LR__0610
07458     13 FB C9 FA | 	rdbyte	result1, local01 wz
0745c     01 26 06 51 |  if_ne	add	local01, #1
07460     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
07464                 | LR__0611
07464     09 27 82 F1 | 	sub	local01, arg01
07468     03 26 CE F7 | 	test	local01, #3 wz
0746c     02 26 46 50 |  if_ne	shr	local01, #2
07470     01 26 06 51 |  if_ne	add	local01, #1
07474     02 26 66 50 |  if_ne	shl	local01, #2
07478     14 2B 02 F6 | 	mov	local03, local02
0747c     13 2B 02 F1 | 	add	local03, local01
07480     43 00 00 FF 
07484     7C E4 05 F1 | 	add	objptr, ##34428
07488     F2 16 02 FB | 	rdlong	arg03, objptr
0748c     14 17 02 F1 | 	add	arg03, local02
07490     04 00 00 FF 
07494     28 E4 05 F1 | 	add	objptr, ##2088
07498     F2 16 62 FC | 	wrlong	arg03, objptr
0749c     04 E4 05 F1 | 	add	objptr, #4
074a0     F2 26 62 FC | 	wrlong	local01, objptr
074a4     0C E4 85 F1 | 	sub	objptr, #12
074a8     F2 12 02 F6 | 	mov	arg01, objptr
074ac     04 00 00 FF 
074b0     20 E4 85 F1 | 	sub	objptr, ##2080
074b4     F2 14 02 FB | 	rdlong	arg02, objptr
074b8     14 17 02 F6 | 	mov	arg03, local02
074bc     37 00 00 FF 
074c0     B0 E5 85 F1 | 	sub	objptr, ##28592
074c4     78 D4 B1 FD | 	call	#_psram_spin2_write
074c8     2B 00 00 FF 
074cc     74 E5 05 F1 | 	add	objptr, ##22388
074d0     F2 12 02 FB | 	rdlong	arg01, objptr
074d4     0C 00 00 FF 
074d8     3C E4 05 F1 | 	add	objptr, ##6204
074dc     F2 14 02 FB | 	rdlong	arg02, objptr
074e0     14 15 02 F1 | 	add	arg02, local02
074e4     13 17 02 F6 | 	mov	arg03, local01
074e8     37 00 00 FF 
074ec     B0 E5 85 F1 | 	sub	objptr, ##28592
074f0     4C D4 B1 FD | 	call	#_psram_spin2_write
074f4     37 00 00 FF 
074f8     B0 E5 05 F1 | 	add	objptr, ##28592
074fc     F2 26 02 FB | 	rdlong	local01, objptr
07500     15 27 02 F1 | 	add	local01, local03
07504     F2 26 62 FC | 	wrlong	local01, objptr
07508     43 00 00 FF 
0750c     7C E4 85 F1 | 	sub	objptr, ##34428
07510     A7 F0 03 F6 | 	mov	ptra, fp
07514     B2 00 A0 FD | 	call	#popregs_
07518                 | _save_line_ret
07518     2D 00 64 FD | 	ret
0751c                 | 
0751c                 | ' 
0751c                 | ' '----- Insert a new line into the middle of the program
0751c                 | ' 
0751c                 | ' function insertline(aline as ulong) as integer
0751c                 | _insertline
0751c     04 4A 05 F6 | 	mov	COUNT_, #4
07520     A8 00 A0 FD | 	call	#pushregs_
07524     28 F0 07 F1 | 	add	ptra, #40
07528     09 27 02 F6 | 	mov	local01, arg01
0752c     4A 00 00 FF 
07530     A8 E4 05 F1 | 	add	objptr, ##38056
07534     F2 28 02 FB | 	rdlong	local02, objptr
07538                 | ' 
07538                 | ' do
07538     3E 00 00 FF 
0753c     DC E5 85 F1 | 	sub	objptr, ##32220
07540                 | LR__0620
07540     A7 12 02 F6 | 	mov	arg01, fp
07544     10 12 06 F1 | 	add	arg01, #16
07548     14 15 02 F6 | 	mov	arg02, local02
0754c     18 16 06 F6 | 	mov	arg03, #24
07550     50 D3 B1 FD | 	call	#_psram_spin2_read1
07554     14 2B 02 F6 | 	mov	local03, local02
07558     24 4E 05 F1 | 	add	fp, #36
0755c     A7 28 02 FB | 	rdlong	local02, fp
07560     14 4E 85 F1 | 	sub	fp, #20
07564     A7 16 02 FB | 	rdlong	arg03, fp
07568     10 4E 85 F1 | 	sub	fp, #16
0756c     13 17 12 F2 | 	cmp	arg03, local01 wc
07570     24 4E 05 C1 |  if_b	add	fp, #36
07574     A7 2C 02 CB |  if_b	rdlong	local04, fp
07578     24 4E 85 C1 |  if_b	sub	fp, #36
0757c     FF FF 3F CF 
07580     FF 2D 0E C2 |  if_b	cmp	local04, ##2147483647 wz
07584     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
07588     0B 00 00 FF 
0758c     CC E4 85 F1 | 	sub	objptr, ##5836
07590                 | ' 
07590                 | ' if header(0)=aline then return -1 				' delete it first
07590     10 4E 05 F1 | 	add	fp, #16
07594     A7 2C 02 FB | 	rdlong	local04, fp
07598     10 4E 85 F1 | 	sub	fp, #16
0759c     13 2D 0A F2 | 	cmp	local04, local01 wz
075a0     01 FA 65 A6 |  if_e	neg	result1, #1
075a4     24 01 90 AD |  if_e	jmp	#LR__0623
075a8                 | ' if header(0)<aline then return -2 				' end of program reached
075a8     10 4E 05 F1 | 	add	fp, #16
075ac     A7 2C 02 FB | 	rdlong	local04, fp
075b0     10 4E 85 F1 | 	sub	fp, #16
075b4     13 2D 12 F2 | 	cmp	local04, local01 wc
075b8     02 FA 65 C6 |  if_b	neg	result1, #2
075bc     0C 01 90 CD |  if_b	jmp	#LR__0623
075c0                 | ' 
075c0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
075c0     20 4E 05 F1 | 	add	fp, #32
075c4     A7 2C 02 FB | 	rdlong	local04, fp
075c8     20 4E 85 F1 | 	sub	fp, #32
075cc     FF FF 7F FF 
075d0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
075d4     64 00 90 5D |  if_ne	jmp	#LR__0621
075d8     43 00 00 FF 
075dc     7C E4 05 F1 | 	add	objptr, ##34428
075e0     F2 2C 02 FB | 	rdlong	local04, objptr
075e4     07 00 00 FF 
075e8     2C E4 05 F1 | 	add	objptr, ##3628
075ec     F2 2C 62 FC | 	wrlong	local04, objptr
075f0     15 13 02 F6 | 	mov	arg01, local03
075f4     10 12 06 F1 | 	add	arg01, #16
075f8     07 00 00 FF 
075fc     2C E4 85 F1 | 	sub	objptr, ##3628
07600     F2 14 02 FB | 	rdlong	arg02, objptr
07604     43 00 00 FF 
07608     7C E4 85 F1 | 	sub	objptr, ##34428
0760c     AC 86 B1 FD | 	call	#_pslpoke
07610     47 00 00 FF 
07614     AC E4 05 F1 | 	add	objptr, ##36524
07618     FF FF FF FF 
0761c     F2 FE 6B FC | 	wrlong	##-1, objptr
07620     04 E4 05 F1 | 	add	objptr, #4
07624     F2 2A 62 FC | 	wrlong	local03, objptr
07628     47 00 00 FF 
0762c     B0 E4 85 F1 | 	sub	objptr, ##36528
07630     DC FD BF FD | 	call	#_save_line
07634                 | '   programstart=programptr
07634                 | '   pslpoke(lineptr2+16,programptr)
07634                 | '   ucompiledline(4)=$FFFF_FFFF
07634                 | '   ucompiledline(5)=lineptr2
07634                 | '   save_line
07634                 | '   return 0
07634     00 FA 05 F6 | 	mov	result1, #0
07638     90 00 90 FD | 	jmp	#LR__0623
0763c                 | LR__0621
0763c                 | ' 
0763c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0763c     20 4E 05 F1 | 	add	fp, #32
07640     A7 2C 02 FB | 	rdlong	local04, fp
07644     20 4E 85 F1 | 	sub	fp, #32
07648     FF FF 7F FF 
0764c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
07650     74 00 90 AD |  if_e	jmp	#LR__0622
07654     20 4E 05 F1 | 	add	fp, #32
07658     A7 2C 02 FB | 	rdlong	local04, fp
0765c     20 4E 85 F1 | 	sub	fp, #32
07660     47 00 00 FF 
07664     AC E4 05 F1 | 	add	objptr, ##36524
07668     F2 2C 62 FC | 	wrlong	local04, objptr
0766c     04 E4 05 F1 | 	add	objptr, #4
07670     F2 2A 62 FC | 	wrlong	local03, objptr
07674     10 2A 06 F1 | 	add	local03, #16
07678     04 00 00 FF 
0767c     34 E4 85 F1 | 	sub	objptr, ##2100
07680     F2 14 02 FB | 	rdlong	arg02, objptr
07684     43 00 00 FF 
07688     7C E4 85 F1 | 	sub	objptr, ##34428
0768c     15 13 02 F6 | 	mov	arg01, local03
07690     28 86 B1 FD | 	call	#_pslpoke
07694     20 4E 05 F1 | 	add	fp, #32
07698     A7 12 02 FB | 	rdlong	arg01, fp
0769c     20 4E 85 F1 | 	sub	fp, #32
076a0     14 12 06 F1 | 	add	arg01, #20
076a4     43 00 00 FF 
076a8     7C E4 05 F1 | 	add	objptr, ##34428
076ac     F2 14 02 FB | 	rdlong	arg02, objptr
076b0     43 00 00 FF 
076b4     7C E4 85 F1 | 	sub	objptr, ##34428
076b8     00 86 B1 FD | 	call	#_pslpoke
076bc     50 FD BF FD | 	call	#_save_line
076c0                 | '   ucompiledline(4)=header(4)
076c0                 | '   ucompiledline(5)=lineptr2
076c0                 | '   pslpoke(lineptr2+16,programptr)
076c0                 | '   pslpoke(header(4)+20,programptr)
076c0                 | '   save_line
076c0                 | '   return 0
076c0     00 FA 05 F6 | 	mov	result1, #0
076c4     04 00 90 FD | 	jmp	#LR__0623
076c8                 | LR__0622
076c8     00 FA 05 F6 | 	mov	result1, #0
076cc                 | LR__0623
076cc     A7 F0 03 F6 | 	mov	ptra, fp
076d0     B2 00 A0 FD | 	call	#popregs_
076d4                 | _insertline_ret
076d4     2D 00 64 FD | 	ret
076d8                 | 
076d8                 | ' 
076d8                 | ' '----- Adds a new line at the end of the program
076d8                 | ' 
076d8                 | ' sub add_line_at_end(aline) 
076d8                 | _add_line_at_end
076d8     4A 00 00 FF 
076dc     AC E4 05 F1 | 	add	objptr, ##38060
076e0     F2 12 62 FC | 	wrlong	arg01, objptr
076e4     04 E4 05 F1 | 	add	objptr, #4
076e8     F2 14 02 FB | 	rdlong	arg02, objptr
076ec     03 00 00 FF 
076f0     04 E4 85 F1 | 	sub	objptr, ##1540
076f4     F2 14 62 FC | 	wrlong	arg02, objptr
076f8     03 00 00 FF 
076fc     04 E4 05 F1 | 	add	objptr, ##1540
07700     F2 12 02 FB | 	rdlong	arg01, objptr
07704     14 12 06 F1 | 	add	arg01, #20
07708     07 00 00 FF 
0770c     34 E4 85 F1 | 	sub	objptr, ##3636
07710     F2 14 02 FB | 	rdlong	arg02, objptr
07714     43 00 00 FF 
07718     7C E4 85 F1 | 	sub	objptr, ##34428
0771c     9C 85 B1 FD | 	call	#_pslpoke
07720     43 00 00 FF 
07724     7C E4 05 F1 | 	add	objptr, ##34428
07728     F2 14 02 FB | 	rdlong	arg02, objptr
0772c     07 00 00 FF 
07730     34 E4 05 F1 | 	add	objptr, ##3636
07734     F2 14 62 FC | 	wrlong	arg02, objptr
07738     03 00 00 FF 
0773c     00 E4 85 F1 | 	sub	objptr, ##1536
07740     FF FF BF FF 
07744     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07748                 | ' 
07748                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07748                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07748     04 00 00 FF 
0774c     34 E4 85 F1 | 	sub	objptr, ##2100
07750     F2 14 02 FB | 	rdlong	arg02, objptr
07754     43 00 00 FF 
07758     7C E4 85 F1 | 	sub	objptr, ##34428
0775c     00 04 00 FF 
07760     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07764     47 00 00 AF 
07768     AC E4 05 A1 |  if_e	add	objptr, ##36524
0776c     FF FF FF AF 
07770     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07774     47 00 00 AF 
07778     AC E4 85 A1 |  if_e	sub	objptr, ##36524
0777c     90 FC BF FD | 	call	#_save_line
07780     43 00 00 FF 
07784     7C E4 05 F1 | 	add	objptr, ##34428
07788     F2 12 02 FB | 	rdlong	arg01, objptr
0778c     43 00 00 FF 
07790     7C E4 85 F1 | 	sub	objptr, ##34428
07794     01 14 66 F6 | 	neg	arg02, #1
07798     20 85 B1 FD | 	call	#_pslpoke
0779c                 | _add_line_at_end_ret
0779c     2D 00 64 FD | 	ret
077a0                 | 
077a0                 | ' 
077a0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077a0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
077a0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077a0                 | ' 
077a0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077a0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
077a0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077a0                 | ' 
077a0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
077a0                 | ' 
077a0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
077a0                 | _compile_immediate
077a0     0A 4A 05 F6 | 	mov	COUNT_, #10
077a4     A8 00 A0 FD | 	call	#pushregs_
077a8                 | _compile_immediate_enter
077a8     09 2D 02 F6 | 	mov	local04, arg01
077ac     0A 2F 02 F6 | 	mov	local05, arg02
077b0     00 30 06 F6 | 	mov	local06, #0
077b4     00 32 06 F6 | 	mov	local07, #0
077b8     00 34 06 F6 | 	mov	local08, #0
077bc                 | ' 
077bc                 | ' ' linetype=cont+1
077bc                 | ' ' 1 : this is the first part of the line that will continue
077bc                 | ' ' 2 - this is the continuation of the line
077bc                 | ' ' 3 - this is the last continued line
077bc                 | ' ' 4 - this is the one and only part
077bc                 | ' ' 5 - continued after if/else
077bc                 | ' 
077bc                 | ' err=0
077bc                 | ' cmd=0
077bc                 | ' vars=0
077bc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
077bc     02 2C 0E F2 | 	cmp	local04, #2 wz
077c0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
077c4     35 00 00 AF 
077c8     30 E4 05 A1 |  if_e	add	objptr, ##27184
077cc     F2 32 02 AB |  if_e	rdlong	local07, objptr
077d0     02 00 00 AF 
077d4     34 E4 05 A1 |  if_e	add	objptr, ##1076
077d8     F2 02 68 AC |  if_e	wrlong	#1, objptr
077dc     37 00 00 AF 
077e0     64 E4 85 A1 |  if_e	sub	objptr, ##28260
077e4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
077e4     04 2C 0E F2 | 	cmp	local04, #4 wz
077e8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
077ec     35 00 00 AF 
077f0     38 E4 05 A1 |  if_e	add	objptr, ##27192
077f4     F2 32 02 AB |  if_e	rdlong	local07, objptr
077f8     02 00 00 AF 
077fc     2C E4 05 A1 |  if_e	add	objptr, ##1068
07800     F2 04 68 AC |  if_e	wrlong	#2, objptr
07804     13 00 00 AF 
07808     38 E4 05 A1 |  if_e	add	objptr, ##9784
0780c     F2 04 68 AC |  if_e	wrlong	#2, objptr
07810     4A 00 00 AF 
07814     9C E4 85 A1 |  if_e	sub	objptr, ##38044
07818                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07818     05 2C 0E F2 | 	cmp	local04, #5 wz
0781c     40 00 90 5D |  if_ne	jmp	#LR__0630
07820     37 00 00 FF 
07824     64 E4 05 F1 | 	add	objptr, ##28260
07828     F2 FC 01 FB | 	rdlong	result2, objptr
0782c     FE 36 02 F6 | 	mov	local09, result2
07830     03 36 66 F0 | 	shl	local09, #3
07834     02 00 00 FF 
07838     38 E4 85 F1 | 	sub	objptr, ##1080
0783c     F2 36 02 F1 | 	add	local09, objptr
07840     04 36 06 F1 | 	add	local09, #4
07844     1B 33 02 FB | 	rdlong	local07, local09
07848     01 FC 05 F1 | 	add	result2, #1
0784c     02 00 00 FF 
07850     38 E4 05 F1 | 	add	objptr, ##1080
07854     F2 FC 61 FC | 	wrlong	result2, objptr
07858     37 00 00 FF 
0785c     64 E4 85 F1 | 	sub	objptr, ##28260
07860                 | LR__0630
07860                 | ' 
07860                 | ' 'print  "In compile_immediate cmd=:", cmd
07860                 | ' 451 select case cmd
07860     5C 32 0E F2 | 	cmp	local07, #92 wz
07864     E8 02 90 AD |  if_e	jmp	#LR__0631
07868     B9 32 0E F2 | 	cmp	local07, #185 wz
0786c     EC 02 90 AD |  if_e	jmp	#LR__0632
07870     47 32 0E F2 | 	cmp	local07, #71 wz
07874     F4 02 90 AD |  if_e	jmp	#LR__0633
07878     59 32 0E F2 | 	cmp	local07, #89 wz
0787c     FC 02 90 AD |  if_e	jmp	#LR__0634
07880     C3 32 0E F2 | 	cmp	local07, #195 wz
07884     04 03 90 AD |  if_e	jmp	#LR__0635
07888     45 32 0E F2 | 	cmp	local07, #69 wz
0788c     08 03 90 AD |  if_e	jmp	#LR__0636
07890     69 32 0E F2 | 	cmp	local07, #105 wz
07894     10 03 90 AD |  if_e	jmp	#LR__0637
07898     40 32 0E F2 | 	cmp	local07, #64 wz
0789c     18 07 90 AD |  if_e	jmp	#LR__0714
078a0     B4 32 0E F2 | 	cmp	local07, #180 wz
078a4     0C 03 90 AD |  if_e	jmp	#LR__0638
078a8     49 32 0E F2 | 	cmp	local07, #73 wz
078ac     10 03 90 AD |  if_e	jmp	#LR__0639
078b0     C4 32 0E F2 | 	cmp	local07, #196 wz
078b4     14 03 90 AD |  if_e	jmp	#LR__0640
078b8     AE 32 0E F2 | 	cmp	local07, #174 wz
078bc     18 03 90 AD |  if_e	jmp	#LR__0641
078c0     B0 32 0E F2 | 	cmp	local07, #176 wz
078c4     1C 03 90 AD |  if_e	jmp	#LR__0642
078c8     AF 32 0E F2 | 	cmp	local07, #175 wz
078cc     20 03 90 AD |  if_e	jmp	#LR__0643
078d0     B1 32 0E F2 | 	cmp	local07, #177 wz
078d4     24 03 90 AD |  if_e	jmp	#LR__0644
078d8     CF 32 0E F2 | 	cmp	local07, #207 wz
078dc     28 03 90 AD |  if_e	jmp	#LR__0645
078e0     68 32 0E F2 | 	cmp	local07, #104 wz
078e4     2C 03 90 AD |  if_e	jmp	#LR__0646
078e8     B7 32 0E F2 | 	cmp	local07, #183 wz
078ec     C8 06 90 AD |  if_e	jmp	#LR__0714
078f0     D9 32 0E F2 | 	cmp	local07, #217 wz
078f4     28 03 90 AD |  if_e	jmp	#LR__0647
078f8     74 32 0E F2 | 	cmp	local07, #116 wz
078fc     2C 03 90 AD |  if_e	jmp	#LR__0648
07900     73 32 0E F2 | 	cmp	local07, #115 wz
07904     34 03 90 AD |  if_e	jmp	#LR__0649
07908     6C 32 0E F2 | 	cmp	local07, #108 wz
0790c     3C 03 90 AD |  if_e	jmp	#LR__0650
07910     89 32 0E F2 | 	cmp	local07, #137 wz
07914     A0 06 90 AD |  if_e	jmp	#LR__0714
07918     C2 32 0E F2 | 	cmp	local07, #194 wz
0791c     3C 03 90 AD |  if_e	jmp	#LR__0651
07920     72 32 0E F2 | 	cmp	local07, #114 wz
07924     40 03 90 AD |  if_e	jmp	#LR__0652
07928     5D 32 0E F2 | 	cmp	local07, #93 wz
0792c     44 03 90 AD |  if_e	jmp	#LR__0653
07930     96 32 0E F2 | 	cmp	local07, #150 wz
07934     4C 03 90 AD |  if_e	jmp	#LR__0654
07938     43 32 0E F2 | 	cmp	local07, #67 wz
0793c     50 03 90 AD |  if_e	jmp	#LR__0655
07940     5A 32 0E F2 | 	cmp	local07, #90 wz
07944     58 03 90 AD |  if_e	jmp	#LR__0656
07948     AB 32 0E F2 | 	cmp	local07, #171 wz
0794c     68 06 90 AD |  if_e	jmp	#LR__0714
07950     BD 32 0E F2 | 	cmp	local07, #189 wz
07954     58 03 90 AD |  if_e	jmp	#LR__0657
07958     BB 32 0E F2 | 	cmp	local07, #187 wz
0795c     60 03 90 AD |  if_e	jmp	#LR__0658
07960     4E 32 0E F2 | 	cmp	local07, #78 wz
07964     68 03 90 AD |  if_e	jmp	#LR__0659
07968     A9 32 0E F2 | 	cmp	local07, #169 wz
0796c     80 03 90 AD |  if_e	jmp	#LR__0661
07970     46 32 0E F2 | 	cmp	local07, #70 wz
07974     98 03 90 AD |  if_e	jmp	#LR__0663
07978     71 32 0E F2 | 	cmp	local07, #113 wz
0797c     A0 03 90 AD |  if_e	jmp	#LR__0664
07980     60 32 0E F2 | 	cmp	local07, #96 wz
07984     A4 03 90 AD |  if_e	jmp	#LR__0665
07988     4A 32 0E F2 | 	cmp	local07, #74 wz
0798c     A8 03 90 AD |  if_e	jmp	#LR__0666
07990     48 32 0E F2 | 	cmp	local07, #72 wz
07994     AC 03 90 AD |  if_e	jmp	#LR__0667
07998     58 32 0E F2 | 	cmp	local07, #88 wz
0799c     B4 03 90 AD |  if_e	jmp	#LR__0668
079a0     5F 32 0E F2 | 	cmp	local07, #95 wz
079a4     BC 03 90 AD |  if_e	jmp	#LR__0669
079a8     B5 32 0E F2 | 	cmp	local07, #181 wz
079ac     C0 03 90 AD |  if_e	jmp	#LR__0670
079b0     8A 32 0E F2 | 	cmp	local07, #138 wz
079b4     C8 03 90 AD |  if_e	jmp	#LR__0671
079b8     4C 32 0E F2 | 	cmp	local07, #76 wz
079bc     CC 03 90 AD |  if_e	jmp	#LR__0672
079c0     52 32 0E F2 | 	cmp	local07, #82 wz
079c4     D4 03 90 AD |  if_e	jmp	#LR__0673
079c8     97 32 0E F2 | 	cmp	local07, #151 wz
079cc     DC 03 90 AD |  if_e	jmp	#LR__0674
079d0     C6 32 0E F2 | 	cmp	local07, #198 wz
079d4     E0 03 90 AD |  if_e	jmp	#LR__0675
079d8     61 32 0E F2 | 	cmp	local07, #97 wz
079dc     E4 03 90 AD |  if_e	jmp	#LR__0676
079e0     63 32 0E F2 | 	cmp	local07, #99 wz
079e4     E8 03 90 AD |  if_e	jmp	#LR__0677
079e8     41 32 0E F2 | 	cmp	local07, #65 wz
079ec     C8 05 90 AD |  if_e	jmp	#LR__0714
079f0     4B 32 0E F2 | 	cmp	local07, #75 wz
079f4     E4 03 90 AD |  if_e	jmp	#LR__0678
079f8     C1 32 0E F2 | 	cmp	local07, #193 wz
079fc     E8 03 90 AD |  if_e	jmp	#LR__0679
07a00     B3 32 0E F2 | 	cmp	local07, #179 wz
07a04     EC 03 90 AD |  if_e	jmp	#LR__0680
07a08     5E 32 0E F2 | 	cmp	local07, #94 wz
07a0c     F0 03 90 AD |  if_e	jmp	#LR__0681
07a10     7C 32 0E F2 | 	cmp	local07, #124 wz
07a14     F4 03 90 AD |  if_e	jmp	#LR__0682
07a18     7D 32 0E F2 | 	cmp	local07, #125 wz
07a1c     F8 03 90 AD |  if_e	jmp	#LR__0683
07a20     7E 32 0E F2 | 	cmp	local07, #126 wz
07a24     FC 03 90 AD |  if_e	jmp	#LR__0684
07a28     7F 32 0E F2 | 	cmp	local07, #127 wz
07a2c     00 04 90 AD |  if_e	jmp	#LR__0685
07a30     80 32 0E F2 | 	cmp	local07, #128 wz
07a34     04 04 90 AD |  if_e	jmp	#LR__0686
07a38     55 32 0E F2 | 	cmp	local07, #85 wz
07a3c     08 04 90 AD |  if_e	jmp	#LR__0687
07a40     75 32 0E F2 | 	cmp	local07, #117 wz
07a44     0C 04 90 AD |  if_e	jmp	#LR__0688
07a48     42 32 0E F2 | 	cmp	local07, #66 wz
07a4c     14 04 90 AD |  if_e	jmp	#LR__0689
07a50     95 32 0E F2 | 	cmp	local07, #149 wz
07a54     1C 04 90 AD |  if_e	jmp	#LR__0690
07a58     AC 32 0E F2 | 	cmp	local07, #172 wz
07a5c     58 05 90 AD |  if_e	jmp	#LR__0714
07a60     81 32 0E F2 | 	cmp	local07, #129 wz
07a64     18 04 90 AD |  if_e	jmp	#LR__0691
07a68     44 32 0E F2 | 	cmp	local07, #68 wz
07a6c     1C 04 90 AD |  if_e	jmp	#LR__0692
07a70     BC 32 0E F2 | 	cmp	local07, #188 wz
07a74     20 04 90 AD |  if_e	jmp	#LR__0693
07a78     88 32 0E F2 | 	cmp	local07, #136 wz
07a7c     38 05 90 AD |  if_e	jmp	#LR__0714
07a80     B6 32 0E F2 | 	cmp	local07, #182 wz
07a84     20 04 90 AD |  if_e	jmp	#LR__0694
07a88     92 32 0E F2 | 	cmp	local07, #146 wz
07a8c     28 04 90 AD |  if_e	jmp	#LR__0695
07a90     BE 32 0E F2 | 	cmp	local07, #190 wz
07a94     DC 05 90 AD |  if_e	jmp	#LR__0715
07a98     C7 32 0E F2 | 	cmp	local07, #199 wz
07a9c     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07aa0     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07aa4     10 05 90 AD |  if_e	jmp	#LR__0714
07aa8     4D 32 0E F2 | 	cmp	local07, #77 wz
07aac     14 04 90 AD |  if_e	jmp	#LR__0696
07ab0     51 32 0E F2 | 	cmp	local07, #81 wz
07ab4     1C 04 90 AD |  if_e	jmp	#LR__0697
07ab8     DA 32 0E F2 | 	cmp	local07, #218 wz
07abc     24 04 90 AD |  if_e	jmp	#LR__0698
07ac0     D2 32 0E F2 | 	cmp	local07, #210 wz
07ac4     28 04 90 AD |  if_e	jmp	#LR__0699
07ac8     8E 32 0E F2 | 	cmp	local07, #142 wz
07acc     30 04 90 AD |  if_e	jmp	#LR__0700
07ad0     90 32 0E F2 | 	cmp	local07, #144 wz
07ad4     34 04 90 AD |  if_e	jmp	#LR__0701
07ad8     8D 32 0E F2 | 	cmp	local07, #141 wz
07adc     38 04 90 AD |  if_e	jmp	#LR__0702
07ae0     8C 32 0E F2 | 	cmp	local07, #140 wz
07ae4     3C 04 90 AD |  if_e	jmp	#LR__0703
07ae8     91 32 0E F2 | 	cmp	local07, #145 wz
07aec     40 04 90 AD |  if_e	jmp	#LR__0704
07af0     8B 32 0E F2 | 	cmp	local07, #139 wz
07af4     44 04 90 AD |  if_e	jmp	#LR__0705
07af8     8F 32 0E F2 | 	cmp	local07, #143 wz
07afc     48 04 90 AD |  if_e	jmp	#LR__0706
07b00     B2 32 0E F2 | 	cmp	local07, #178 wz
07b04     4C 04 90 AD |  if_e	jmp	#LR__0707
07b08     6D 32 0E F2 | 	cmp	local07, #109 wz
07b0c     54 04 90 AD |  if_e	jmp	#LR__0708
07b10     70 32 0E F2 | 	cmp	local07, #112 wz
07b14     A0 04 90 AD |  if_e	jmp	#LR__0714
07b18     56 32 0E F2 | 	cmp	local07, #86 wz
07b1c     50 04 90 AD |  if_e	jmp	#LR__0709
07b20     57 32 0E F2 | 	cmp	local07, #87 wz
07b24     90 04 90 AD |  if_e	jmp	#LR__0714
07b28     79 32 0E F2 | 	cmp	local07, #121 wz
07b2c     4C 04 90 AD |  if_e	jmp	#LR__0710
07b30     77 32 0E F2 | 	cmp	local07, #119 wz
07b34     50 04 90 AD |  if_e	jmp	#LR__0711
07b38     78 32 0E F2 | 	cmp	local07, #120 wz
07b3c     54 04 90 AD |  if_e	jmp	#LR__0712
07b40     01 00 00 FF 
07b44     04 32 0E F2 | 	cmp	local07, ##516 wz
07b48     54 04 90 AD |  if_e	jmp	#LR__0713
07b4c     24 05 90 FD | 	jmp	#LR__0715
07b50                 | LR__0631
07b50     50 0B B0 FD | 	call	#_compile_fun_2p
07b54     FD 30 02 F6 | 	mov	local06, result1
07b58     5C 04 90 FD | 	jmp	#LR__0714
07b5c                 | LR__0632
07b5c     14 0E B0 FD | 	call	#_compile_fun_varp
07b60     FD 34 02 F6 | 	mov	local08, result1
07b64     FE 30 02 F6 | 	mov	local06, result2
07b68     4C 04 90 FD | 	jmp	#LR__0714
07b6c                 | LR__0633
07b6c     04 0E B0 FD | 	call	#_compile_fun_varp
07b70     FD 34 02 F6 | 	mov	local08, result1
07b74     FE 30 02 F6 | 	mov	local06, result2
07b78     3C 04 90 FD | 	jmp	#LR__0714
07b7c                 | LR__0634
07b7c     F4 0D B0 FD | 	call	#_compile_fun_varp
07b80     FD 34 02 F6 | 	mov	local08, result1
07b84     FE 30 02 F6 | 	mov	local06, result2
07b88     2C 04 90 FD | 	jmp	#LR__0714
07b8c                 | LR__0635
07b8c                 | ' return expr()
07b8c     9C 41 B0 FD | 	call	#_expr
07b90     FD 30 02 F6 | 	mov	local06, result1
07b94     20 04 90 FD | 	jmp	#LR__0714
07b98                 | LR__0636
07b98     D8 0D B0 FD | 	call	#_compile_fun_varp
07b9c     FD 34 02 F6 | 	mov	local08, result1
07ba0     FE 30 02 F6 | 	mov	local06, result2
07ba4     10 04 90 FD | 	jmp	#LR__0714
07ba8                 | LR__0637
07ba8                 | ' return expr()
07ba8     80 41 B0 FD | 	call	#_expr
07bac     FD 30 02 F6 | 	mov	local06, result1
07bb0     04 04 90 FD | 	jmp	#LR__0714
07bb4                 | LR__0638
07bb4                 | ' return expr()
07bb4     74 41 B0 FD | 	call	#_expr
07bb8     FD 30 02 F6 | 	mov	local06, result1
07bbc     F8 03 90 FD | 	jmp	#LR__0714
07bc0                 | LR__0639
07bc0                 | ' return expr()
07bc0     68 41 B0 FD | 	call	#_expr
07bc4     FD 30 02 F6 | 	mov	local06, result1
07bc8     EC 03 90 FD | 	jmp	#LR__0714
07bcc                 | LR__0640
07bcc     D4 0A B0 FD | 	call	#_compile_fun_2p
07bd0     FD 30 02 F6 | 	mov	local06, result1
07bd4     E0 03 90 FD | 	jmp	#LR__0714
07bd8                 | LR__0641
07bd8     C8 0A B0 FD | 	call	#_compile_fun_2p
07bdc     FD 30 02 F6 | 	mov	local06, result1
07be0     D4 03 90 FD | 	jmp	#LR__0714
07be4                 | LR__0642
07be4     BC 0A B0 FD | 	call	#_compile_fun_2p
07be8     FD 30 02 F6 | 	mov	local06, result1
07bec     C8 03 90 FD | 	jmp	#LR__0714
07bf0                 | LR__0643
07bf0     B0 0A B0 FD | 	call	#_compile_fun_2p
07bf4     FD 30 02 F6 | 	mov	local06, result1
07bf8     BC 03 90 FD | 	jmp	#LR__0714
07bfc                 | LR__0644
07bfc     A4 0A B0 FD | 	call	#_compile_fun_2p
07c00     FD 30 02 F6 | 	mov	local06, result1
07c04     B0 03 90 FD | 	jmp	#LR__0714
07c08                 | LR__0645
07c08                 | ' return expr()
07c08     20 41 B0 FD | 	call	#_expr
07c0c     FD 30 02 F6 | 	mov	local06, result1
07c10     A4 03 90 FD | 	jmp	#LR__0714
07c14                 | LR__0646
07c14                 | ' return expr()
07c14     14 41 B0 FD | 	call	#_expr
07c18     FD 30 02 F6 | 	mov	local06, result1
07c1c     98 03 90 FD | 	jmp	#LR__0714
07c20                 | LR__0647
07c20     80 0A B0 FD | 	call	#_compile_fun_2p
07c24     FD 30 02 F6 | 	mov	local06, result1
07c28     8C 03 90 FD | 	jmp	#LR__0714
07c2c                 | LR__0648
07c2c     44 0D B0 FD | 	call	#_compile_fun_varp
07c30     FD 34 02 F6 | 	mov	local08, result1
07c34     FE 30 02 F6 | 	mov	local06, result2
07c38     7C 03 90 FD | 	jmp	#LR__0714
07c3c                 | LR__0649
07c3c     34 0D B0 FD | 	call	#_compile_fun_varp
07c40     FD 34 02 F6 | 	mov	local08, result1
07c44     FE 30 02 F6 | 	mov	local06, result2
07c48     6C 03 90 FD | 	jmp	#LR__0714
07c4c                 | LR__0650
07c4c     24 0D B0 FD | 	call	#_compile_fun_varp
07c50     FD 34 02 F6 | 	mov	local08, result1
07c54     FE 30 02 F6 | 	mov	local06, result2
07c58     5C 03 90 FD | 	jmp	#LR__0714
07c5c                 | LR__0651
07c5c                 | ' return expr()
07c5c     CC 40 B0 FD | 	call	#_expr
07c60     FD 30 02 F6 | 	mov	local06, result1
07c64     50 03 90 FD | 	jmp	#LR__0714
07c68                 | LR__0652
07c68     48 22 B0 FD | 	call	#_compile_dim
07c6c     FD 30 02 F6 | 	mov	local06, result1
07c70     00 04 90 FD | 	jmp	#LR__0715
07c74                 | LR__0653
07c74     FC 0C B0 FD | 	call	#_compile_fun_varp
07c78     FD 34 02 F6 | 	mov	local08, result1
07c7c     FE 30 02 F6 | 	mov	local06, result2
07c80     34 03 90 FD | 	jmp	#LR__0714
07c84                 | LR__0654
07c84     1C 0A B0 FD | 	call	#_compile_fun_2p
07c88     FD 30 02 F6 | 	mov	local06, result1
07c8c     28 03 90 FD | 	jmp	#LR__0714
07c90                 | LR__0655
07c90     E0 0C B0 FD | 	call	#_compile_fun_varp
07c94     FD 34 02 F6 | 	mov	local08, result1
07c98     FE 30 02 F6 | 	mov	local06, result2
07c9c     18 03 90 FD | 	jmp	#LR__0714
07ca0                 | LR__0656
07ca0     17 13 02 F6 | 	mov	arg01, local05
07ca4     D4 20 B0 FD | 	call	#_compile_else
07ca8     FD 30 02 F6 | 	mov	local06, result1
07cac     C4 03 90 FD | 	jmp	#LR__0715
07cb0                 | LR__0657
07cb0     C0 0C B0 FD | 	call	#_compile_fun_varp
07cb4     FD 34 02 F6 | 	mov	local08, result1
07cb8     FE 30 02 F6 | 	mov	local06, result2
07cbc     F8 02 90 FD | 	jmp	#LR__0714
07cc0                 | LR__0658
07cc0     B0 0C B0 FD | 	call	#_compile_fun_varp
07cc4     FD 34 02 F6 | 	mov	local08, result1
07cc8     FE 30 02 F6 | 	mov	local06, result2
07ccc     E8 02 90 FD | 	jmp	#LR__0714
07cd0                 | LR__0659
07cd0     01 2E 16 F2 | 	cmp	local05, #1 wc
07cd4     08 00 90 CD |  if_b	jmp	#LR__0660
07cd8     5C 33 B0 FD | 	call	#_compile_goto
07cdc     94 03 90 FD | 	jmp	#LR__0715
07ce0                 | LR__0660
07ce0     19 12 06 F6 | 	mov	arg01, #25
07ce4     00 14 06 F6 | 	mov	arg02, #0
07ce8     34 7F B1 FD | 	call	#_printerror
07cec     84 03 90 FD | 	jmp	#LR__0715
07cf0                 | LR__0661
07cf0     01 2E 16 F2 | 	cmp	local05, #1 wc
07cf4     08 00 90 CD |  if_b	jmp	#LR__0662
07cf8     D8 32 B0 FD | 	call	#_compile_gosub
07cfc     74 03 90 FD | 	jmp	#LR__0715
07d00                 | LR__0662
07d00     19 12 06 F6 | 	mov	arg01, #25
07d04     00 14 06 F6 | 	mov	arg02, #0
07d08     14 7F B1 FD | 	call	#_printerror
07d0c     64 03 90 FD | 	jmp	#LR__0715
07d10                 | LR__0663
07d10     60 0C B0 FD | 	call	#_compile_fun_varp
07d14     FD 34 02 F6 | 	mov	local08, result1
07d18     FE 30 02 F6 | 	mov	local06, result2
07d1c     98 02 90 FD | 	jmp	#LR__0714
07d20                 | LR__0664
07d20     F8 0A B0 FD | 	call	#_compile_fun_4p
07d24     FD 30 02 F6 | 	mov	local06, result1
07d28     8C 02 90 FD | 	jmp	#LR__0714
07d2c                 | LR__0665
07d2c                 | ' return expr()
07d2c     FC 3F B0 FD | 	call	#_expr
07d30     FD 30 02 F6 | 	mov	local06, result1
07d34     80 02 90 FD | 	jmp	#LR__0714
07d38                 | LR__0666
07d38     2C 28 B0 FD | 	call	#_compile_for
07d3c     FD 30 02 F6 | 	mov	local06, result1
07d40     30 03 90 FD | 	jmp	#LR__0715
07d44                 | LR__0667
07d44     2C 0C B0 FD | 	call	#_compile_fun_varp
07d48     FD 34 02 F6 | 	mov	local08, result1
07d4c     FE 30 02 F6 | 	mov	local06, result2
07d50     64 02 90 FD | 	jmp	#LR__0714
07d54                 | LR__0668
07d54     17 13 02 F6 | 	mov	arg01, local05
07d58     98 1E B0 FD | 	call	#_compile_if
07d5c     FD 30 02 F6 | 	mov	local06, result1
07d60     10 03 90 FD | 	jmp	#LR__0715
07d64                 | LR__0669
07d64                 | ' return expr()
07d64     C4 3F B0 FD | 	call	#_expr
07d68     FD 30 02 F6 | 	mov	local06, result1
07d6c     48 02 90 FD | 	jmp	#LR__0714
07d70                 | LR__0670
07d70     D0 0D B0 FD | 	call	#_compile_input
07d74     FD 34 02 F6 | 	mov	local08, result1
07d78     FE 30 02 F6 | 	mov	local06, result2
07d7c     38 02 90 FD | 	jmp	#LR__0714
07d80                 | LR__0671
07d80                 | ' return expr()
07d80     A8 3F B0 FD | 	call	#_expr
07d84     FD 30 02 F6 | 	mov	local06, result1
07d88     2C 02 90 FD | 	jmp	#LR__0714
07d8c                 | LR__0672
07d8c     E4 0B B0 FD | 	call	#_compile_fun_varp
07d90     FD 34 02 F6 | 	mov	local08, result1
07d94     FE 30 02 F6 | 	mov	local06, result2
07d98     1C 02 90 FD | 	jmp	#LR__0714
07d9c                 | LR__0673
07d9c     D4 0B B0 FD | 	call	#_compile_fun_varp
07da0     FD 34 02 F6 | 	mov	local08, result1
07da4     FE 30 02 F6 | 	mov	local06, result2
07da8     0C 02 90 FD | 	jmp	#LR__0714
07dac                 | LR__0674
07dac     F4 08 B0 FD | 	call	#_compile_fun_2p
07db0     FD 30 02 F6 | 	mov	local06, result1
07db4     00 02 90 FD | 	jmp	#LR__0714
07db8                 | LR__0675
07db8                 | ' return expr()
07db8     70 3F B0 FD | 	call	#_expr
07dbc     FD 30 02 F6 | 	mov	local06, result1
07dc0     F4 01 90 FD | 	jmp	#LR__0714
07dc4                 | LR__0676
07dc4                 | ' return expr()
07dc4     64 3F B0 FD | 	call	#_expr
07dc8     FD 30 02 F6 | 	mov	local06, result1
07dcc     E8 01 90 FD | 	jmp	#LR__0714
07dd0                 | LR__0677
07dd0                 | ' return expr()
07dd0     58 3F B0 FD | 	call	#_expr
07dd4     FD 30 02 F6 | 	mov	local06, result1
07dd8     DC 01 90 FD | 	jmp	#LR__0714
07ddc                 | LR__0678
07ddc     60 30 B0 FD | 	call	#_compile_next
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     8C 02 90 FD | 	jmp	#LR__0715
07de8                 | LR__0679
07de8     C0 35 B0 FD | 	call	#_compile_on
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     80 02 90 FD | 	jmp	#LR__0715
07df4                 | LR__0680
07df4     34 09 B0 FD | 	call	#_compile_fun_3p
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     B8 01 90 FD | 	jmp	#LR__0714
07e00                 | LR__0681
07e00                 | ' return expr()
07e00     28 3F B0 FD | 	call	#_expr
07e04     FD 30 02 F6 | 	mov	local06, result1
07e08     AC 01 90 FD | 	jmp	#LR__0714
07e0c                 | LR__0682
07e0c                 | ' return expr()
07e0c     1C 3F B0 FD | 	call	#_expr
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     A0 01 90 FD | 	jmp	#LR__0714
07e18                 | LR__0683
07e18                 | ' return expr()
07e18     10 3F B0 FD | 	call	#_expr
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     94 01 90 FD | 	jmp	#LR__0714
07e24                 | LR__0684
07e24                 | ' return expr()
07e24     04 3F B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     88 01 90 FD | 	jmp	#LR__0714
07e30                 | LR__0685
07e30     E8 09 B0 FD | 	call	#_compile_fun_4p
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     7C 01 90 FD | 	jmp	#LR__0714
07e3c                 | LR__0686
07e3c                 | ' return expr()
07e3c     EC 3E B0 FD | 	call	#_expr
07e40     FD 30 02 F6 | 	mov	local06, result1
07e44     70 01 90 FD | 	jmp	#LR__0714
07e48                 | LR__0687
07e48     58 08 B0 FD | 	call	#_compile_fun_2p
07e4c     FD 30 02 F6 | 	mov	local06, result1
07e50     64 01 90 FD | 	jmp	#LR__0714
07e54                 | LR__0688
07e54     1C 0B B0 FD | 	call	#_compile_fun_varp
07e58     FD 34 02 F6 | 	mov	local08, result1
07e5c     FE 30 02 F6 | 	mov	local06, result2
07e60     54 01 90 FD | 	jmp	#LR__0714
07e64                 | LR__0689
07e64     0C 0B B0 FD | 	call	#_compile_fun_varp
07e68     FD 34 02 F6 | 	mov	local08, result1
07e6c     FE 30 02 F6 | 	mov	local06, result2
07e70     44 01 90 FD | 	jmp	#LR__0714
07e74                 | LR__0690
07e74     2C 08 B0 FD | 	call	#_compile_fun_2p
07e78     FD 30 02 F6 | 	mov	local06, result1
07e7c     38 01 90 FD | 	jmp	#LR__0714
07e80                 | LR__0691
07e80     20 08 B0 FD | 	call	#_compile_fun_2p
07e84     FD 30 02 F6 | 	mov	local06, result1
07e88     2C 01 90 FD | 	jmp	#LR__0714
07e8c                 | LR__0692
07e8c     84 16 B0 FD | 	call	#_compile_print
07e90     FD 30 02 F6 | 	mov	local06, result1
07e94     DC 01 90 FD | 	jmp	#LR__0715
07e98                 | LR__0693
07e98     D8 0A B0 FD | 	call	#_compile_fun_varp
07e9c     FD 34 02 F6 | 	mov	local08, result1
07ea0     FE 30 02 F6 | 	mov	local06, result2
07ea4     10 01 90 FD | 	jmp	#LR__0714
07ea8                 | LR__0694
07ea8     A4 0B B0 FD | 	call	#_compile_read
07eac     FD 34 02 F6 | 	mov	local08, result1
07eb0     FE 30 02 F6 | 	mov	local06, result2
07eb4     00 01 90 FD | 	jmp	#LR__0714
07eb8                 | LR__0695
07eb8                 | ' return expr()
07eb8     70 3E B0 FD | 	call	#_expr
07ebc     FD 30 02 F6 | 	mov	local06, result1
07ec0     F4 00 90 FD | 	jmp	#LR__0714
07ec4                 | LR__0696
07ec4     AC 0A B0 FD | 	call	#_compile_fun_varp
07ec8     FD 34 02 F6 | 	mov	local08, result1
07ecc     FE 30 02 F6 | 	mov	local06, result2
07ed0     E4 00 90 FD | 	jmp	#LR__0714
07ed4                 | LR__0697
07ed4     9C 0A B0 FD | 	call	#_compile_fun_varp
07ed8     FD 34 02 F6 | 	mov	local08, result1
07edc     FE 30 02 F6 | 	mov	local06, result2
07ee0     D4 00 90 FD | 	jmp	#LR__0714
07ee4                 | LR__0698
07ee4     BC 07 B0 FD | 	call	#_compile_fun_2p
07ee8     FD 30 02 F6 | 	mov	local06, result1
07eec     C8 00 90 FD | 	jmp	#LR__0714
07ef0                 | LR__0699
07ef0     80 0A B0 FD | 	call	#_compile_fun_varp
07ef4     FD 34 02 F6 | 	mov	local08, result1
07ef8     FE 30 02 F6 | 	mov	local06, result2
07efc     B8 00 90 FD | 	jmp	#LR__0714
07f00                 | LR__0700
07f00     A0 07 B0 FD | 	call	#_compile_fun_2p
07f04     FD 30 02 F6 | 	mov	local06, result1
07f08     AC 00 90 FD | 	jmp	#LR__0714
07f0c                 | LR__0701
07f0c     94 07 B0 FD | 	call	#_compile_fun_2p
07f10     FD 30 02 F6 | 	mov	local06, result1
07f14     A0 00 90 FD | 	jmp	#LR__0714
07f18                 | LR__0702
07f18     88 07 B0 FD | 	call	#_compile_fun_2p
07f1c     FD 30 02 F6 | 	mov	local06, result1
07f20     94 00 90 FD | 	jmp	#LR__0714
07f24                 | LR__0703
07f24     7C 07 B0 FD | 	call	#_compile_fun_2p
07f28     FD 30 02 F6 | 	mov	local06, result1
07f2c     88 00 90 FD | 	jmp	#LR__0714
07f30                 | LR__0704
07f30     70 07 B0 FD | 	call	#_compile_fun_2p
07f34     FD 30 02 F6 | 	mov	local06, result1
07f38     7C 00 90 FD | 	jmp	#LR__0714
07f3c                 | LR__0705
07f3c     64 07 B0 FD | 	call	#_compile_fun_2p
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     70 00 90 FD | 	jmp	#LR__0714
07f48                 | LR__0706
07f48     58 07 B0 FD | 	call	#_compile_fun_2p
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     64 00 90 FD | 	jmp	#LR__0714
07f54                 | LR__0707
07f54     1C 0A B0 FD | 	call	#_compile_fun_varp
07f58     FD 34 02 F6 | 	mov	local08, result1
07f5c     FE 30 02 F6 | 	mov	local06, result2
07f60     54 00 90 FD | 	jmp	#LR__0714
07f64                 | LR__0708
07f64     C4 07 B0 FD | 	call	#_compile_fun_3p
07f68     FD 30 02 F6 | 	mov	local06, result1
07f6c     48 00 90 FD | 	jmp	#LR__0714
07f70                 | LR__0709
07f70                 | ' return expr()
07f70     B8 3D B0 FD | 	call	#_expr
07f74     FD 30 02 F6 | 	mov	local06, result1
07f78     3C 00 90 FD | 	jmp	#LR__0714
07f7c                 | LR__0710
07f7c     24 07 B0 FD | 	call	#_compile_fun_2p
07f80     FD 30 02 F6 | 	mov	local06, result1
07f84     30 00 90 FD | 	jmp	#LR__0714
07f88                 | LR__0711
07f88     18 07 B0 FD | 	call	#_compile_fun_2p
07f8c     FD 30 02 F6 | 	mov	local06, result1
07f90     24 00 90 FD | 	jmp	#LR__0714
07f94                 | LR__0712
07f94     0C 07 B0 FD | 	call	#_compile_fun_2p
07f98     FD 30 02 F6 | 	mov	local06, result1
07f9c     18 00 90 FD | 	jmp	#LR__0714
07fa0                 | LR__0713
07fa0     14 13 B0 FD | 	call	#_compile_array_assign
07fa4     FD 30 02 F6 | 	mov	local06, result1
07fa8     0E 30 0E F2 | 	cmp	local06, #14 wz
07fac     C4 00 90 5D |  if_ne	jmp	#LR__0715
07fb0                 | ' return 23
07fb0     17 30 06 F6 | 	mov	local06, #23
07fb4     BC 00 90 FD | 	jmp	#LR__0715
07fb8                 | ' return 23
07fb8                 | LR__0714
07fb8     19 2B 02 F6 | 	mov	local03, local07
07fbc     1A 27 02 F6 | 	mov	local01, local08
07fc0     13 37 02 F6 | 	mov	local09, local01
07fc4     14 39 02 F6 | 	mov	local10, local02
07fc8     15 33 02 F6 | 	mov	local07, local03
07fcc     4A 00 00 FF 
07fd0     9C E4 05 F1 | 	add	objptr, ##38044
07fd4     F2 26 02 FB | 	rdlong	local01, objptr
07fd8     13 35 02 F6 | 	mov	local08, local01
07fdc     01 34 66 F0 | 	shl	local08, #1
07fe0     13 35 02 F1 | 	add	local08, local01
07fe4     02 34 66 F0 | 	shl	local08, #2
07fe8     03 00 00 FF 
07fec     00 E4 85 F1 | 	sub	objptr, ##1536
07ff0     F2 34 02 F1 | 	add	local08, objptr
07ff4     1A 37 62 FC | 	wrlong	local09, local08
07ff8     03 00 00 FF 
07ffc     00 E4 05 F1 | 	add	objptr, ##1536
08000     F2 26 02 FB | 	rdlong	local01, objptr
08004     13 37 02 F6 | 	mov	local09, local01
08008     01 36 66 F0 | 	shl	local09, #1
0800c     13 37 02 F1 | 	add	local09, local01
08010     02 36 66 F0 | 	shl	local09, #2
08014     03 00 00 FF 
08018     00 E4 85 F1 | 	sub	objptr, ##1536
0801c     F2 36 02 F1 | 	add	local09, objptr
08020     04 36 06 F1 | 	add	local09, #4
08024     1B 39 62 FC | 	wrlong	local10, local09
08028     03 00 00 FF 
0802c     00 E4 05 F1 | 	add	objptr, ##1536
08030     F2 26 02 FB | 	rdlong	local01, objptr
08034     13 39 02 F6 | 	mov	local10, local01
08038     01 38 66 F0 | 	shl	local10, #1
0803c     13 39 02 F1 | 	add	local10, local01
08040     02 38 66 F0 | 	shl	local10, #2
08044     03 00 00 FF 
08048     00 E4 85 F1 | 	sub	objptr, ##1536
0804c     F2 38 02 F1 | 	add	local10, objptr
08050     08 38 06 F1 | 	add	local10, #8
08054     1C 33 62 FC | 	wrlong	local07, local10
08058     03 00 00 FF 
0805c     00 E4 05 F1 | 	add	objptr, ##1536
08060     F2 36 02 FB | 	rdlong	local09, objptr
08064     01 36 06 F1 | 	add	local09, #1
08068     F2 36 62 FC | 	wrlong	local09, objptr
0806c     4A 00 00 FF 
08070     9C E4 85 F1 | 	sub	objptr, ##38044
08074                 | LR__0715
08074                 | ' 
08074                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08074                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08074     03 2C 0E F2 | 	cmp	local04, #3 wz
08078     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0807c     38 00 90 5D |  if_ne	jmp	#LR__0716
08080     4A 00 00 FF 
08084     9C E4 05 F1 | 	add	objptr, ##38044
08088     F2 38 02 FB | 	rdlong	local10, objptr
0808c     1C 27 02 F6 | 	mov	local01, local10
08090     01 26 66 F0 | 	shl	local01, #1
08094     1C 27 02 F1 | 	add	local01, local10
08098     02 26 66 F0 | 	shl	local01, #2
0809c     03 00 00 FF 
080a0     00 E4 85 F1 | 	sub	objptr, ##1536
080a4     F2 26 02 F1 | 	add	local01, objptr
080a8     08 26 06 F1 | 	add	local01, #8
080ac     13 FD 6B FC | 	wrlong	#510, local01
080b0     47 00 00 FF 
080b4     9C E4 85 F1 | 	sub	objptr, ##36508
080b8                 | LR__0716
080b8                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
080b8                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
080b8     4A 00 00 FF 
080bc     9C E4 05 F1 | 	add	objptr, ##38044
080c0     F2 26 02 FB | 	rdlong	local01, objptr
080c4     4A 00 00 FF 
080c8     9C E4 85 F1 | 	sub	objptr, ##38044
080cc     97 52 48 FB | 	callpa	#(@LR__0719-@LR__0717)>>2,fcache_load_ptr_
080d0                 | LR__0717
080d0     13 37 02 F6 | 	mov	local09, local01
080d4     01 36 66 F0 | 	shl	local09, #1
080d8     13 37 02 F1 | 	add	local09, local01
080dc     02 36 66 F0 | 	shl	local09, #2
080e0     F2 38 02 F6 | 	mov	local10, objptr
080e4     47 00 00 FF 
080e8     9C 38 06 F1 | 	add	local10, ##36508
080ec     1C 37 02 F1 | 	add	local09, local10
080f0     08 36 06 F1 | 	add	local09, #8
080f4     1B 37 02 FB | 	rdlong	local09, local09
080f8     9B 36 0E F2 | 	cmp	local09, #155 wz
080fc     68 00 90 5D |  if_ne	jmp	#LR__0718
08100     13 37 02 F6 | 	mov	local09, local01
08104     01 36 86 F1 | 	sub	local09, #1
08108     1B 39 02 F6 | 	mov	local10, local09
0810c     01 38 66 F0 | 	shl	local10, #1
08110     1B 39 02 F1 | 	add	local10, local09
08114     02 38 66 F0 | 	shl	local10, #2
08118     F2 36 02 F6 | 	mov	local09, objptr
0811c     47 00 00 FF 
08120     9C 36 06 F1 | 	add	local09, ##36508
08124     1B 39 02 F1 | 	add	local10, local09
08128     08 38 06 F1 | 	add	local10, #8
0812c     1C 39 02 FB | 	rdlong	local10, local10
08130     11 38 0E F2 | 	cmp	local10, #17 wz
08134     30 00 90 5D |  if_ne	jmp	#LR__0718
08138     13 37 02 F6 | 	mov	local09, local01
0813c     01 36 86 F1 | 	sub	local09, #1
08140     1B 39 02 F6 | 	mov	local10, local09
08144     01 38 66 F0 | 	shl	local10, #1
08148     1B 39 02 F1 | 	add	local10, local09
0814c     02 38 66 F0 | 	shl	local10, #2
08150     F2 36 02 F6 | 	mov	local09, objptr
08154     47 00 00 FF 
08158     9C 36 06 F1 | 	add	local09, ##36508
0815c     1B 39 02 F1 | 	add	local10, local09
08160     08 38 06 F1 | 	add	local10, #8
08164     1C 25 68 FC | 	wrlong	#18, local10
08168                 | LR__0718
08168     01 26 86 F1 | 	sub	local01, #1
0816c     01 26 56 F2 | 	cmps	local01, #1 wc
08170     5C FF 9F 3D |  if_ae	jmp	#LR__0717
08174                 | LR__0719
08174                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08174                 | ' return err
08174     18 FB 01 F6 | 	mov	result1, local06
08178     A7 F0 03 F6 | 	mov	ptra, fp
0817c     B2 00 A0 FD | 	call	#popregs_
08180                 | _compile_immediate_ret
08180     2D 00 64 FD | 	ret
08184                 | 
08184                 | ' 
08184                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08184                 | ' 
08184                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08184                 | _compile_immediate_assign
08184     0C 4A 05 F6 | 	mov	COUNT_, #12
08188     A8 00 A0 FD | 	call	#pushregs_
0818c     09 2D 02 F6 | 	mov	local04, arg01
08190     FF 2A 06 F6 | 	mov	local03, #255
08194     01 2E 66 F6 | 	neg	local05, #1
08198     00 30 06 F6 | 	mov	local06, #0
0819c                 | ' 
0819c                 | ' t1.result_type=result_error : t1.result.uresult=0
0819c                 | ' i=-1: j=-1 : err=0
0819c                 | ' 
0819c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0819c     02 2C 0E F2 | 	cmp	local04, #2 wz
081a0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
081a4     35 00 00 AF 
081a8     2C E4 05 A1 |  if_e	add	objptr, ##27180
081ac     F2 32 02 AB |  if_e	rdlong	local07, objptr
081b0     02 00 00 AF 
081b4     38 E4 05 A1 |  if_e	add	objptr, ##1080
081b8     F2 04 68 AC |  if_e	wrlong	#2, objptr
081bc     37 00 00 AF 
081c0     64 E4 85 A1 |  if_e	sub	objptr, ##28260
081c4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
081c4     04 2C 0E F2 | 	cmp	local04, #4 wz
081c8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
081cc     35 00 00 AF 
081d0     34 E4 05 A1 |  if_e	add	objptr, ##27188
081d4     F2 32 02 AB |  if_e	rdlong	local07, objptr
081d8     02 00 00 AF 
081dc     30 E4 05 A1 |  if_e	add	objptr, ##1072
081e0     F2 06 68 AC |  if_e	wrlong	#3, objptr
081e4     13 00 00 AF 
081e8     38 E4 05 A1 |  if_e	add	objptr, ##9784
081ec     F2 04 68 AC |  if_e	wrlong	#2, objptr
081f0     4A 00 00 AF 
081f4     9C E4 85 A1 |  if_e	sub	objptr, ##38044
081f8                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
081f8     05 2C 0E F2 | 	cmp	local04, #5 wz
081fc     3C 00 90 5D |  if_ne	jmp	#LR__0720
08200     37 00 00 FF 
08204     64 E4 05 F1 | 	add	objptr, ##28260
08208     F2 FA 01 FB | 	rdlong	result1, objptr
0820c     FD 32 02 F6 | 	mov	local07, result1
08210     03 32 66 F0 | 	shl	local07, #3
08214     02 00 00 FF 
08218     38 E4 85 F1 | 	sub	objptr, ##1080
0821c     F2 32 02 F1 | 	add	local07, objptr
08220     19 33 02 FB | 	rdlong	local07, local07
08224     02 FA 05 F1 | 	add	result1, #2
08228     02 00 00 FF 
0822c     38 E4 05 F1 | 	add	objptr, ##1080
08230     F2 FA 61 FC | 	wrlong	result1, objptr
08234     37 00 00 FF 
08238     64 E4 85 F1 | 	sub	objptr, ##28260
0823c                 | LR__0720
0823c     19 13 02 F6 | 	mov	arg01, local07
08240     01 14 06 F6 | 	mov	arg02, #1
08244     AC E2 B1 FD | 	call	#__system__Right_S
08248     FD 34 02 F6 | 	mov	local08, result1
0824c     DC 3A B0 FD | 	call	#_expr
08250                 | ' 
08250                 | ' suffix2$=right$(varname2$,1)
08250                 | ' expr()
08250                 | ' if varnum>0 then					' try to find a variable
08250     35 00 00 FF 
08254     28 E4 05 F1 | 	add	objptr, ##27176
08258     F2 36 02 FB | 	rdlong	local09, objptr
0825c     35 00 00 FF 
08260     28 E4 85 F1 | 	sub	objptr, ##27176
08264     01 36 56 F2 | 	cmps	local09, #1 wc
08268     54 00 90 CD |  if_b	jmp	#LR__0723
0826c                 | '   for i=0 to varnum-1
0826c     00 38 06 F6 | 	mov	local10, #0
08270     35 00 00 FF 
08274     28 E4 05 F1 | 	add	objptr, ##27176
08278     F2 3A 02 FB | 	rdlong	local11, objptr
0827c     35 00 00 FF 
08280     28 E4 85 F1 | 	sub	objptr, ##27176
08284                 | LR__0721
08284     1D 39 52 F2 | 	cmps	local10, local11 wc
08288     34 00 90 3D |  if_ae	jmp	#LR__0722
0828c                 | '     if variables(i).name=varname2$ then j=i : exit
0828c     1C 37 02 F6 | 	mov	local09, local10
08290     04 36 66 F0 | 	shl	local09, #4
08294     F2 14 02 F6 | 	mov	arg02, objptr
08298     15 00 00 FF 
0829c     18 14 06 F1 | 	add	arg02, ##10776
082a0     0A 37 02 F1 | 	add	local09, arg02
082a4     1B 13 02 FB | 	rdlong	arg01, local09
082a8     19 15 02 F6 | 	mov	arg02, local07
082ac     20 CE B1 FD | 	call	#__system___string_cmp
082b0     00 FA 0D F2 | 	cmp	result1, #0 wz
082b4     1C 2F 02 A6 |  if_e	mov	local05, local10
082b8     01 38 06 51 |  if_ne	add	local10, #1
082bc     C4 FF 9F 5D |  if_ne	jmp	#LR__0721
082c0                 | LR__0722
082c0                 | LR__0723
082c0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
082c0     FF FF 7F FF 
082c4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
082c8     60 00 90 5D |  if_ne	jmp	#LR__0724
082cc     35 00 00 FF 
082d0     28 E4 05 F1 | 	add	objptr, ##27176
082d4     F2 36 02 FB | 	rdlong	local09, objptr
082d8     35 00 00 FF 
082dc     28 E4 85 F1 | 	sub	objptr, ##27176
082e0     02 00 00 FF 
082e4     00 36 56 F2 | 	cmps	local09, ##1024 wc
082e8     40 00 90 3D |  if_ae	jmp	#LR__0724
082ec     35 00 00 FF 
082f0     28 E4 05 F1 | 	add	objptr, ##27176
082f4     F2 3A 02 FB | 	rdlong	local11, objptr
082f8     04 3A 66 F0 | 	shl	local11, #4
082fc     20 00 00 FF 
08300     10 E4 85 F1 | 	sub	objptr, ##16400
08304     F2 3A 02 F1 | 	add	local11, objptr
08308     1D 33 62 FC | 	wrlong	local07, local11
0830c     20 00 00 FF 
08310     10 E4 05 F1 | 	add	objptr, ##16400
08314     F2 36 02 FB | 	rdlong	local09, objptr
08318     1B 2F 02 F6 | 	mov	local05, local09
0831c     01 36 06 F1 | 	add	local09, #1
08320     F2 36 62 FC | 	wrlong	local09, objptr
08324     35 00 00 FF 
08328     28 E4 85 F1 | 	sub	objptr, ##27176
0832c                 | LR__0724
0832c                 | ' if varnum>=maxvars then
0832c     35 00 00 FF 
08330     28 E4 05 F1 | 	add	objptr, ##27176
08334     F2 36 02 FB | 	rdlong	local09, objptr
08338     35 00 00 FF 
0833c     28 E4 85 F1 | 	sub	objptr, ##27176
08340     02 00 00 FF 
08344     00 36 56 F2 | 	cmps	local09, ##1024 wc
08348     2D 30 06 36 |  if_ae	mov	local06, #45
0834c     BC 01 90 3D |  if_ae	jmp	#LR__0729
08350     17 27 02 F6 | 	mov	local01, local05
08354     17 2A 06 F6 | 	mov	local03, #23
08358     13 37 02 F6 | 	mov	local09, local01
0835c     14 3D 02 F6 | 	mov	local12, local02
08360     15 27 02 F6 | 	mov	local01, local03
08364     4A 00 00 FF 
08368     9C E4 05 F1 | 	add	objptr, ##38044
0836c     F2 3A 02 FB | 	rdlong	local11, objptr
08370     1D 39 02 F6 | 	mov	local10, local11
08374     01 38 66 F0 | 	shl	local10, #1
08378     1D 39 02 F1 | 	add	local10, local11
0837c     02 38 66 F0 | 	shl	local10, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 38 02 F1 | 	add	local10, objptr
0838c     1C 37 62 FC | 	wrlong	local09, local10
08390     03 00 00 FF 
08394     00 E4 05 F1 | 	add	objptr, ##1536
08398     F2 36 02 FB | 	rdlong	local09, objptr
0839c     1B 3B 02 F6 | 	mov	local11, local09
083a0     01 3A 66 F0 | 	shl	local11, #1
083a4     1B 3B 02 F1 | 	add	local11, local09
083a8     02 3A 66 F0 | 	shl	local11, #2
083ac     03 00 00 FF 
083b0     00 E4 85 F1 | 	sub	objptr, ##1536
083b4     F2 3A 02 F1 | 	add	local11, objptr
083b8     04 3A 06 F1 | 	add	local11, #4
083bc     1D 3D 62 FC | 	wrlong	local12, local11
083c0     03 00 00 FF 
083c4     00 E4 05 F1 | 	add	objptr, ##1536
083c8     F2 36 02 FB | 	rdlong	local09, objptr
083cc     1B 3D 02 F6 | 	mov	local12, local09
083d0     01 3C 66 F0 | 	shl	local12, #1
083d4     1B 3D 02 F1 | 	add	local12, local09
083d8     02 3C 66 F0 | 	shl	local12, #2
083dc     03 00 00 FF 
083e0     00 E4 85 F1 | 	sub	objptr, ##1536
083e4     F2 3C 02 F1 | 	add	local12, objptr
083e8     08 3C 06 F1 | 	add	local12, #8
083ec     1E 27 62 FC | 	wrlong	local01, local12
083f0     03 00 00 FF 
083f4     00 E4 05 F1 | 	add	objptr, ##1536
083f8     F2 36 02 FB | 	rdlong	local09, objptr
083fc     01 36 06 F1 | 	add	local09, #1
08400     F2 36 62 FC | 	wrlong	local09, objptr
08404     4A 00 00 FF 
08408     9C E4 85 F1 | 	sub	objptr, ##38044
0840c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0840c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0840c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0840c     03 2C 0E F2 | 	cmp	local04, #3 wz
08410     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08414     38 00 90 5D |  if_ne	jmp	#LR__0725
08418     4A 00 00 FF 
0841c     9C E4 05 F1 | 	add	objptr, ##38044
08420     F2 3C 02 FB | 	rdlong	local12, objptr
08424     1E 27 02 F6 | 	mov	local01, local12
08428     01 26 66 F0 | 	shl	local01, #1
0842c     1E 27 02 F1 | 	add	local01, local12
08430     02 26 66 F0 | 	shl	local01, #2
08434     03 00 00 FF 
08438     00 E4 85 F1 | 	sub	objptr, ##1536
0843c     F2 26 02 F1 | 	add	local01, objptr
08440     08 26 06 F1 | 	add	local01, #8
08444     13 FD 6B FC | 	wrlong	#510, local01
08448     47 00 00 FF 
0844c     9C E4 85 F1 | 	sub	objptr, ##36508
08450                 | LR__0725
08450                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08450     4A 00 00 FF 
08454     9C E4 05 F1 | 	add	objptr, ##38044
08458     F2 38 02 FB | 	rdlong	local10, objptr
0845c     4A 00 00 FF 
08460     9C E4 85 F1 | 	sub	objptr, ##38044
08464     97 52 48 FB | 	callpa	#(@LR__0728-@LR__0726)>>2,fcache_load_ptr_
08468                 | LR__0726
08468     1C 3D 02 F6 | 	mov	local12, local10
0846c     01 3C 66 F0 | 	shl	local12, #1
08470     1C 3D 02 F1 | 	add	local12, local10
08474     02 3C 66 F0 | 	shl	local12, #2
08478     F2 26 02 F6 | 	mov	local01, objptr
0847c     47 00 00 FF 
08480     9C 26 06 F1 | 	add	local01, ##36508
08484     13 3D 02 F1 | 	add	local12, local01
08488     08 3C 06 F1 | 	add	local12, #8
0848c     1E 3D 02 FB | 	rdlong	local12, local12
08490     9B 3C 0E F2 | 	cmp	local12, #155 wz
08494     68 00 90 5D |  if_ne	jmp	#LR__0727
08498     1C 3D 02 F6 | 	mov	local12, local10
0849c     01 3C 86 F1 | 	sub	local12, #1
084a0     1E 27 02 F6 | 	mov	local01, local12
084a4     01 26 66 F0 | 	shl	local01, #1
084a8     1E 27 02 F1 | 	add	local01, local12
084ac     02 26 66 F0 | 	shl	local01, #2
084b0     F2 3C 02 F6 | 	mov	local12, objptr
084b4     47 00 00 FF 
084b8     9C 3C 06 F1 | 	add	local12, ##36508
084bc     1E 27 02 F1 | 	add	local01, local12
084c0     08 26 06 F1 | 	add	local01, #8
084c4     13 27 02 FB | 	rdlong	local01, local01
084c8     11 26 0E F2 | 	cmp	local01, #17 wz
084cc     30 00 90 5D |  if_ne	jmp	#LR__0727
084d0     1C 3D 02 F6 | 	mov	local12, local10
084d4     01 3C 86 F1 | 	sub	local12, #1
084d8     1E 27 02 F6 | 	mov	local01, local12
084dc     01 26 66 F0 | 	shl	local01, #1
084e0     1E 27 02 F1 | 	add	local01, local12
084e4     02 26 66 F0 | 	shl	local01, #2
084e8     F2 3C 02 F6 | 	mov	local12, objptr
084ec     47 00 00 FF 
084f0     9C 3C 06 F1 | 	add	local12, ##36508
084f4     1E 27 02 F1 | 	add	local01, local12
084f8     08 26 06 F1 | 	add	local01, #8
084fc     13 25 68 FC | 	wrlong	#18, local01
08500                 | LR__0727
08500     01 38 86 F1 | 	sub	local10, #1
08504     01 38 56 F2 | 	cmps	local10, #1 wc
08508     5C FF 9F 3D |  if_ae	jmp	#LR__0726
0850c                 | LR__0728
0850c                 | LR__0729
0850c                 | ' return err
0850c     18 FB 01 F6 | 	mov	result1, local06
08510     A7 F0 03 F6 | 	mov	ptra, fp
08514     B2 00 A0 FD | 	call	#popregs_
08518                 | _compile_immediate_assign_ret
08518     2D 00 64 FD | 	ret
0851c                 | 
0851c                 | ' 
0851c                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
0851c                 | ' 
0851c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
0851c                 | _compile
0851c     03 4A 05 F6 | 	mov	COUNT_, #3
08520     A8 00 A0 FD | 	call	#pushregs_
08524     09 27 02 F6 | 	mov	local01, arg01
08528     0B 29 02 F6 | 	mov	local02, arg03
0852c     47 00 00 FF 
08530     9C E4 05 F1 | 	add	objptr, ##36508
08534     F2 26 62 FC | 	wrlong	local01, objptr
08538     04 E4 05 F1 | 	add	objptr, #4
0853c     F2 14 62 FC | 	wrlong	arg02, objptr
08540     47 00 00 FF 
08544     A0 E4 85 F1 | 	sub	objptr, ##36512
08548     14 13 02 F6 | 	mov	arg01, local02
0854c     01 12 06 F1 | 	add	arg01, #1
08550     13 15 02 F6 | 	mov	arg02, local01
08554     48 F2 BF FD | 	call	#_compile_immediate
08558     FD 2A 0A F6 | 	mov	local03, result1 wz
0855c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0855c                 | ' ucompiledline(0)=alinemajor
0855c                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
0855c                 | ' 
0855c                 | ' ' cont: 
0855c                 | ' ' 0 - this is the first part of the line that will continue
0855c                 | ' ' 1 - this is the continuation of the line
0855c                 | ' ' 2 - this is the last continued line
0855c                 | ' ' 3 - this is the one and only part
0855c                 | ' 
0855c                 | ' err=compile_immediate(cont+1,alinemajor) 
0855c                 | ' if err=0 andalso alinemajor>0 then
0855c     74 00 90 5D |  if_ne	jmp	#LR__0735
08560     01 26 16 F2 | 	cmp	local01, #1 wc
08564     6C 00 90 CD |  if_b	jmp	#LR__0735
08568                 | '   if cont=3 orelse cont=2 then 
08568     03 28 0E F2 | 	cmp	local02, #3 wz
0856c     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08570     60 00 90 5D |  if_ne	jmp	#LR__0734
08574                 | '     if alinemajor >lastline then 
08574     4A 00 00 FF 
08578     AC E4 05 F1 | 	add	objptr, ##38060
0857c     F2 14 02 FB | 	rdlong	arg02, objptr
08580     4A 00 00 FF 
08584     AC E4 85 F1 | 	sub	objptr, ##38060
08588     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0858c     0C 00 90 ED |  if_be	jmp	#LR__0730
08590     13 13 02 F6 | 	mov	arg01, local01
08594     40 F1 BF FD | 	call	#_add_line_at_end
08598     38 00 90 FD | 	jmp	#LR__0733
0859c                 | LR__0730
0859c     13 13 02 F6 | 	mov	arg01, local01
085a0     A8 EB BF FD | 	call	#_deleteline
085a4                 | '       deleteline(alinemajor)  
085a4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
085a4     4A 00 00 FF 
085a8     AC E4 05 F1 | 	add	objptr, ##38060
085ac     F2 14 02 FB | 	rdlong	arg02, objptr
085b0     4A 00 00 FF 
085b4     AC E4 85 F1 | 	sub	objptr, ##38060
085b8     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085bc     0C 00 90 ED |  if_be	jmp	#LR__0731
085c0     13 13 02 F6 | 	mov	arg01, local01
085c4     10 F1 BF FD | 	call	#_add_line_at_end
085c8     08 00 90 FD | 	jmp	#LR__0732
085cc                 | LR__0731
085cc     13 13 02 F6 | 	mov	arg01, local01
085d0     48 EF BF FD | 	call	#_insertline
085d4                 | LR__0732
085d4                 | LR__0733
085d4                 | LR__0734
085d4                 | LR__0735
085d4                 | ' return err
085d4     15 FB 01 F6 | 	mov	result1, local03
085d8     A7 F0 03 F6 | 	mov	ptra, fp
085dc     B2 00 A0 FD | 	call	#popregs_
085e0                 | _compile_ret
085e0     2D 00 64 FD | 	ret
085e4                 | 
085e4                 | ' 
085e4                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
085e4                 | ' 
085e4                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
085e4                 | _compile_assign
085e4     03 4A 05 F6 | 	mov	COUNT_, #3
085e8     A8 00 A0 FD | 	call	#pushregs_
085ec     09 27 02 F6 | 	mov	local01, arg01
085f0     0B 29 02 F6 | 	mov	local02, arg03
085f4     47 00 00 FF 
085f8     9C E4 05 F1 | 	add	objptr, ##36508
085fc     F2 26 62 FC | 	wrlong	local01, objptr
08600     04 E4 05 F1 | 	add	objptr, #4
08604     F2 14 62 FC | 	wrlong	arg02, objptr
08608     47 00 00 FF 
0860c     A0 E4 85 F1 | 	sub	objptr, ##36512
08610     14 13 02 F6 | 	mov	arg01, local02
08614     01 12 06 F1 | 	add	arg01, #1
08618     68 FB BF FD | 	call	#_compile_immediate_assign
0861c     FD 2A 02 F6 | 	mov	local03, result1
08620                 | ' 
08620                 | ' ucompiledline(0)=alinemajor
08620                 | ' ucompiledline(1)=alineminor
08620                 | ' 
08620                 | ' err=compile_immediate_assign(cont+1) 
08620                 | ' if alinemajor>0 then
08620     01 26 16 F2 | 	cmp	local01, #1 wc
08624     6C 00 90 CD |  if_b	jmp	#LR__0745
08628                 | '   if cont=3 orelse cont=2 then 
08628     03 28 0E F2 | 	cmp	local02, #3 wz
0862c     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08630     60 00 90 5D |  if_ne	jmp	#LR__0744
08634                 | '     if alinemajor >lastline then 
08634     4A 00 00 FF 
08638     AC E4 05 F1 | 	add	objptr, ##38060
0863c     F2 14 02 FB | 	rdlong	arg02, objptr
08640     4A 00 00 FF 
08644     AC E4 85 F1 | 	sub	objptr, ##38060
08648     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0864c     0C 00 90 ED |  if_be	jmp	#LR__0740
08650     13 13 02 F6 | 	mov	arg01, local01
08654     80 F0 BF FD | 	call	#_add_line_at_end
08658     38 00 90 FD | 	jmp	#LR__0743
0865c                 | LR__0740
0865c     13 13 02 F6 | 	mov	arg01, local01
08660     E8 EA BF FD | 	call	#_deleteline
08664                 | '       deleteline(alinemajor)  
08664                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08664     4A 00 00 FF 
08668     AC E4 05 F1 | 	add	objptr, ##38060
0866c     F2 14 02 FB | 	rdlong	arg02, objptr
08670     4A 00 00 FF 
08674     AC E4 85 F1 | 	sub	objptr, ##38060
08678     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0867c     0C 00 90 ED |  if_be	jmp	#LR__0741
08680     13 13 02 F6 | 	mov	arg01, local01
08684     50 F0 BF FD | 	call	#_add_line_at_end
08688     08 00 90 FD | 	jmp	#LR__0742
0868c                 | LR__0741
0868c     13 13 02 F6 | 	mov	arg01, local01
08690     88 EE BF FD | 	call	#_insertline
08694                 | LR__0742
08694                 | LR__0743
08694                 | LR__0744
08694                 | LR__0745
08694                 | ' return err
08694     15 FB 01 F6 | 	mov	result1, local03
08698     A7 F0 03 F6 | 	mov	ptra, fp
0869c     B2 00 A0 FD | 	call	#popregs_
086a0                 | _compile_assign_ret
086a0     2D 00 64 FD | 	ret
086a4                 | 
086a4                 | ' 
086a4                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
086a4                 | ' 
086a4                 | ' function compile_fun_2p() as ulong
086a4                 | _compile_fun_2p
086a4     01 4A 05 F6 | 	mov	COUNT_, #1
086a8     A8 00 A0 FD | 	call	#pushregs_
086ac     7C 36 B0 FD | 	call	#_expr
086b0     FD 26 02 F6 | 	mov	local01, result1
086b4                 | ' err=expr() : if err>0 then return err
086b4     01 26 16 F2 | 	cmp	local01, #1 wc
086b8     13 FB 01 36 |  if_ae	mov	result1, local01
086bc     60 00 90 3D |  if_ae	jmp	#LR__0750
086c0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
086c0     37 00 00 FF 
086c4     64 E4 05 F1 | 	add	objptr, ##28260
086c8     F2 26 02 FB | 	rdlong	local01, objptr
086cc     03 26 66 F0 | 	shl	local01, #3
086d0     02 00 00 FF 
086d4     38 E4 85 F1 | 	sub	objptr, ##1080
086d8     F2 26 02 F1 | 	add	local01, objptr
086dc     04 26 06 F1 | 	add	local01, #4
086e0     13 27 02 FB | 	rdlong	local01, local01
086e4     11 26 0E F2 | 	cmp	local01, #17 wz
086e8     35 00 00 FF 
086ec     2C E4 85 F1 | 	sub	objptr, ##27180
086f0     15 FA 05 56 |  if_ne	mov	result1, #21
086f4     28 00 90 5D |  if_ne	jmp	#LR__0750
086f8     37 00 00 FF 
086fc     64 E4 05 F1 | 	add	objptr, ##28260
08700     F2 26 02 FB | 	rdlong	local01, objptr
08704     01 26 06 F1 | 	add	local01, #1
08708     F2 26 62 FC | 	wrlong	local01, objptr
0870c     37 00 00 FF 
08710     64 E4 85 F1 | 	sub	objptr, ##28260
08714     14 36 B0 FD | 	call	#_expr
08718                 | ' err=expr() : if err>0 then return err
08718     01 FA 15 F2 | 	cmp	result1, #1 wc
0871c                 | ' return 0
0871c     00 FA 05 C6 |  if_b	mov	result1, #0
08720                 | LR__0750
08720     A7 F0 03 F6 | 	mov	ptra, fp
08724     B2 00 A0 FD | 	call	#popregs_
08728                 | _compile_fun_2p_ret
08728     2D 00 64 FD | 	ret
0872c                 | 
0872c                 | ' 
0872c                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
0872c                 | ' 
0872c                 | ' function compile_fun_3p() as ulong
0872c                 | _compile_fun_3p
0872c     01 4A 05 F6 | 	mov	COUNT_, #1
08730     A8 00 A0 FD | 	call	#pushregs_
08734     F4 35 B0 FD | 	call	#_expr
08738     FD 26 02 F6 | 	mov	local01, result1
0873c                 | ' err=expr() : if err>0 then return err
0873c     01 26 16 F2 | 	cmp	local01, #1 wc
08740     13 FB 01 36 |  if_ae	mov	result1, local01
08744     C8 00 90 3D |  if_ae	jmp	#LR__0760
08748                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08748     37 00 00 FF 
0874c     64 E4 05 F1 | 	add	objptr, ##28260
08750     F2 26 02 FB | 	rdlong	local01, objptr
08754     03 26 66 F0 | 	shl	local01, #3
08758     02 00 00 FF 
0875c     38 E4 85 F1 | 	sub	objptr, ##1080
08760     F2 26 02 F1 | 	add	local01, objptr
08764     04 26 06 F1 | 	add	local01, #4
08768     13 27 02 FB | 	rdlong	local01, local01
0876c     11 26 0E F2 | 	cmp	local01, #17 wz
08770     35 00 00 FF 
08774     2C E4 85 F1 | 	sub	objptr, ##27180
08778     15 FA 05 56 |  if_ne	mov	result1, #21
0877c     90 00 90 5D |  if_ne	jmp	#LR__0760
08780     37 00 00 FF 
08784     64 E4 05 F1 | 	add	objptr, ##28260
08788     F2 26 02 FB | 	rdlong	local01, objptr
0878c     01 26 06 F1 | 	add	local01, #1
08790     F2 26 62 FC | 	wrlong	local01, objptr
08794     37 00 00 FF 
08798     64 E4 85 F1 | 	sub	objptr, ##28260
0879c     8C 35 B0 FD | 	call	#_expr
087a0     FD 26 02 F6 | 	mov	local01, result1
087a4                 | ' err=expr() : if err>0 then return err
087a4     01 26 16 F2 | 	cmp	local01, #1 wc
087a8     13 FB 01 36 |  if_ae	mov	result1, local01
087ac     60 00 90 3D |  if_ae	jmp	#LR__0760
087b0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
087b0     37 00 00 FF 
087b4     64 E4 05 F1 | 	add	objptr, ##28260
087b8     F2 26 02 FB | 	rdlong	local01, objptr
087bc     03 26 66 F0 | 	shl	local01, #3
087c0     02 00 00 FF 
087c4     38 E4 85 F1 | 	sub	objptr, ##1080
087c8     F2 26 02 F1 | 	add	local01, objptr
087cc     04 26 06 F1 | 	add	local01, #4
087d0     13 27 02 FB | 	rdlong	local01, local01
087d4     11 26 0E F2 | 	cmp	local01, #17 wz
087d8     35 00 00 FF 
087dc     2C E4 85 F1 | 	sub	objptr, ##27180
087e0     15 FA 05 56 |  if_ne	mov	result1, #21
087e4     28 00 90 5D |  if_ne	jmp	#LR__0760
087e8     37 00 00 FF 
087ec     64 E4 05 F1 | 	add	objptr, ##28260
087f0     F2 26 02 FB | 	rdlong	local01, objptr
087f4     01 26 06 F1 | 	add	local01, #1
087f8     F2 26 62 FC | 	wrlong	local01, objptr
087fc     37 00 00 FF 
08800     64 E4 85 F1 | 	sub	objptr, ##28260
08804     24 35 B0 FD | 	call	#_expr
08808                 | ' err=expr() : if err>0 then return err
08808     01 FA 15 F2 | 	cmp	result1, #1 wc
0880c                 | ' return 0
0880c     00 FA 05 C6 |  if_b	mov	result1, #0
08810                 | LR__0760
08810     A7 F0 03 F6 | 	mov	ptra, fp
08814     B2 00 A0 FD | 	call	#popregs_
08818                 | _compile_fun_3p_ret
08818     2D 00 64 FD | 	ret
0881c                 | 
0881c                 | ' 
0881c                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
0881c                 | ' 
0881c                 | ' function compile_fun_4p() as ulong
0881c                 | _compile_fun_4p
0881c     01 4A 05 F6 | 	mov	COUNT_, #1
08820     A8 00 A0 FD | 	call	#pushregs_
08824     04 35 B0 FD | 	call	#_expr
08828     FD 26 02 F6 | 	mov	local01, result1
0882c                 | ' err=expr() : if err>0 then return err
0882c     01 26 16 F2 | 	cmp	local01, #1 wc
08830     13 FB 01 36 |  if_ae	mov	result1, local01
08834     30 01 90 3D |  if_ae	jmp	#LR__0770
08838                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08838     37 00 00 FF 
0883c     64 E4 05 F1 | 	add	objptr, ##28260
08840     F2 26 02 FB | 	rdlong	local01, objptr
08844     03 26 66 F0 | 	shl	local01, #3
08848     02 00 00 FF 
0884c     38 E4 85 F1 | 	sub	objptr, ##1080
08850     F2 26 02 F1 | 	add	local01, objptr
08854     04 26 06 F1 | 	add	local01, #4
08858     13 27 02 FB | 	rdlong	local01, local01
0885c     11 26 0E F2 | 	cmp	local01, #17 wz
08860     35 00 00 FF 
08864     2C E4 85 F1 | 	sub	objptr, ##27180
08868     15 FA 05 56 |  if_ne	mov	result1, #21
0886c     F8 00 90 5D |  if_ne	jmp	#LR__0770
08870     37 00 00 FF 
08874     64 E4 05 F1 | 	add	objptr, ##28260
08878     F2 26 02 FB | 	rdlong	local01, objptr
0887c     01 26 06 F1 | 	add	local01, #1
08880     F2 26 62 FC | 	wrlong	local01, objptr
08884     37 00 00 FF 
08888     64 E4 85 F1 | 	sub	objptr, ##28260
0888c     9C 34 B0 FD | 	call	#_expr
08890     FD 26 02 F6 | 	mov	local01, result1
08894                 | ' err=expr() : if err>0 then return err
08894     01 26 16 F2 | 	cmp	local01, #1 wc
08898     13 FB 01 36 |  if_ae	mov	result1, local01
0889c     C8 00 90 3D |  if_ae	jmp	#LR__0770
088a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
088a0     37 00 00 FF 
088a4     64 E4 05 F1 | 	add	objptr, ##28260
088a8     F2 26 02 FB | 	rdlong	local01, objptr
088ac     03 26 66 F0 | 	shl	local01, #3
088b0     02 00 00 FF 
088b4     38 E4 85 F1 | 	sub	objptr, ##1080
088b8     F2 26 02 F1 | 	add	local01, objptr
088bc     04 26 06 F1 | 	add	local01, #4
088c0     13 27 02 FB | 	rdlong	local01, local01
088c4     11 26 0E F2 | 	cmp	local01, #17 wz
088c8     35 00 00 FF 
088cc     2C E4 85 F1 | 	sub	objptr, ##27180
088d0     15 FA 05 56 |  if_ne	mov	result1, #21
088d4     90 00 90 5D |  if_ne	jmp	#LR__0770
088d8     37 00 00 FF 
088dc     64 E4 05 F1 | 	add	objptr, ##28260
088e0     F2 26 02 FB | 	rdlong	local01, objptr
088e4     01 26 06 F1 | 	add	local01, #1
088e8     F2 26 62 FC | 	wrlong	local01, objptr
088ec     37 00 00 FF 
088f0     64 E4 85 F1 | 	sub	objptr, ##28260
088f4     34 34 B0 FD | 	call	#_expr
088f8     FD 26 02 F6 | 	mov	local01, result1
088fc                 | ' err=expr() : if err>0 then return err
088fc     01 26 16 F2 | 	cmp	local01, #1 wc
08900     13 FB 01 36 |  if_ae	mov	result1, local01
08904     60 00 90 3D |  if_ae	jmp	#LR__0770
08908                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08908     37 00 00 FF 
0890c     64 E4 05 F1 | 	add	objptr, ##28260
08910     F2 26 02 FB | 	rdlong	local01, objptr
08914     03 26 66 F0 | 	shl	local01, #3
08918     02 00 00 FF 
0891c     38 E4 85 F1 | 	sub	objptr, ##1080
08920     F2 26 02 F1 | 	add	local01, objptr
08924     04 26 06 F1 | 	add	local01, #4
08928     13 27 02 FB | 	rdlong	local01, local01
0892c     11 26 0E F2 | 	cmp	local01, #17 wz
08930     35 00 00 FF 
08934     2C E4 85 F1 | 	sub	objptr, ##27180
08938     15 FA 05 56 |  if_ne	mov	result1, #21
0893c     28 00 90 5D |  if_ne	jmp	#LR__0770
08940     37 00 00 FF 
08944     64 E4 05 F1 | 	add	objptr, ##28260
08948     F2 26 02 FB | 	rdlong	local01, objptr
0894c     01 26 06 F1 | 	add	local01, #1
08950     F2 26 62 FC | 	wrlong	local01, objptr
08954     37 00 00 FF 
08958     64 E4 85 F1 | 	sub	objptr, ##28260
0895c     CC 33 B0 FD | 	call	#_expr
08960                 | ' err=expr() : if err>0 then return err
08960     01 FA 15 F2 | 	cmp	result1, #1 wc
08964                 | ' return 0
08964     00 FA 05 C6 |  if_b	mov	result1, #0
08968                 | LR__0770
08968     A7 F0 03 F6 | 	mov	ptra, fp
0896c     B2 00 A0 FD | 	call	#popregs_
08970                 | _compile_fun_4p_ret
08970     2D 00 64 FD | 	ret
08974                 | 
08974                 | ' 
08974                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08974                 | ' 
08974                 | ' function compile_fun_varp() as ulong,ulong 
08974                 | _compile_fun_varp
08974     03 4A 05 F6 | 	mov	COUNT_, #3
08978     A8 00 A0 FD | 	call	#pushregs_
0897c     00 26 06 F6 | 	mov	local01, #0
08980                 | ' 
08980                 | ' i=0 : err=0
08980                 | ' if lparts(ct).token<>token_end then
08980     37 00 00 FF 
08984     64 E4 05 F1 | 	add	objptr, ##28260
08988     F2 28 02 FB | 	rdlong	local02, objptr
0898c     03 28 66 F0 | 	shl	local02, #3
08990     02 00 00 FF 
08994     38 E4 85 F1 | 	sub	objptr, ##1080
08998     F2 28 02 F1 | 	add	local02, objptr
0899c     04 28 06 F1 | 	add	local02, #4
089a0     14 29 02 FB | 	rdlong	local02, local02
089a4     FE 29 0E F2 | 	cmp	local02, #510 wz
089a8     35 00 00 FF 
089ac     2C E4 85 F1 | 	sub	objptr, ##27180
089b0     88 00 90 AD |  if_e	jmp	#LR__0781
089b4                 | '   do
089b4                 | LR__0780
089b4     74 33 B0 FD | 	call	#_expr
089b8     01 26 06 F1 | 	add	local01, #1
089bc                 | '     expr()
089bc                 | '     i+=1
089bc                 | '     if lparts(ct).token=token_comma then ct+=1
089bc     37 00 00 FF 
089c0     64 E4 05 F1 | 	add	objptr, ##28260
089c4     F2 28 02 FB | 	rdlong	local02, objptr
089c8     03 28 66 F0 | 	shl	local02, #3
089cc     02 00 00 FF 
089d0     38 E4 85 F1 | 	sub	objptr, ##1080
089d4     F2 28 02 F1 | 	add	local02, objptr
089d8     04 28 06 F1 | 	add	local02, #4
089dc     14 29 02 FB | 	rdlong	local02, local02
089e0     11 28 0E F2 | 	cmp	local02, #17 wz
089e4     35 00 00 FF 
089e8     2C E4 85 F1 | 	sub	objptr, ##27180
089ec     37 00 00 AF 
089f0     64 E4 05 A1 |  if_e	add	objptr, ##28260
089f4     F2 2A 02 AB |  if_e	rdlong	local03, objptr
089f8     01 2A 06 A1 |  if_e	add	local03, #1
089fc     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08a00     37 00 00 AF 
08a04     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08a08                 | '     if lparts(ct).token=token_end then exit loop
08a08     37 00 00 FF 
08a0c     64 E4 05 F1 | 	add	objptr, ##28260
08a10     F2 28 02 FB | 	rdlong	local02, objptr
08a14     03 28 66 F0 | 	shl	local02, #3
08a18     02 00 00 FF 
08a1c     38 E4 85 F1 | 	sub	objptr, ##1080
08a20     F2 28 02 F1 | 	add	local02, objptr
08a24     04 28 06 F1 | 	add	local02, #4
08a28     14 29 02 FB | 	rdlong	local02, local02
08a2c     FE 29 0E F2 | 	cmp	local02, #510 wz
08a30     35 00 00 FF 
08a34     2C E4 85 F1 | 	sub	objptr, ##27180
08a38     78 FF 9F 5D |  if_ne	jmp	#LR__0780
08a3c                 | LR__0781
08a3c                 | ' return i,err
08a3c     13 FB 01 F6 | 	mov	result1, local01
08a40     00 FC 05 F6 | 	mov	result2, #0
08a44     A7 F0 03 F6 | 	mov	ptra, fp
08a48     B2 00 A0 FD | 	call	#popregs_
08a4c                 | _compile_fun_varp_ret
08a4c     2D 00 64 FD | 	ret
08a50                 | 
08a50                 | ' 
08a50                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08a50                 | ' 
08a50                 | ' function compile_read() as ulong,ulong 
08a50                 | _compile_read
08a50     04 4A 05 F6 | 	mov	COUNT_, #4
08a54     A8 00 A0 FD | 	call	#pushregs_
08a58     00 26 06 F6 | 	mov	local01, #0
08a5c                 | ' 
08a5c                 | ' i=0 : err=0
08a5c                 | ' if lparts(ct).token<>token_end then
08a5c     37 00 00 FF 
08a60     64 E4 05 F1 | 	add	objptr, ##28260
08a64     F2 28 02 FB | 	rdlong	local02, objptr
08a68     03 28 66 F0 | 	shl	local02, #3
08a6c     02 00 00 FF 
08a70     38 E4 85 F1 | 	sub	objptr, ##1080
08a74     F2 28 02 F1 | 	add	local02, objptr
08a78     04 28 06 F1 | 	add	local02, #4
08a7c     14 29 02 FB | 	rdlong	local02, local02
08a80     FE 29 0E F2 | 	cmp	local02, #510 wz
08a84     35 00 00 FF 
08a88     2C E4 85 F1 | 	sub	objptr, ##27180
08a8c     9C 00 90 AD |  if_e	jmp	#LR__0791
08a90                 | '   do
08a90                 | LR__0790
08a90     08 2F B0 FD | 	call	#_getaddr
08a94     FD 2A 02 F6 | 	mov	local03, result1
08a98     37 00 00 FF 
08a9c     64 E4 05 F1 | 	add	objptr, ##28260
08aa0     F2 2C 02 FB | 	rdlong	local04, objptr
08aa4     01 2C 06 F1 | 	add	local04, #1
08aa8     F2 2C 62 FC | 	wrlong	local04, objptr
08aac     01 26 06 F1 | 	add	local01, #1
08ab0                 | '     err=getaddr() :ct+=1
08ab0                 | '     i+=1 
08ab0                 | '     if lparts(ct).token=token_comma then ct+=1 
08ab0     16 29 02 F6 | 	mov	local02, local04
08ab4     03 28 66 F0 | 	shl	local02, #3
08ab8     02 00 00 FF 
08abc     38 E4 85 F1 | 	sub	objptr, ##1080
08ac0     F2 28 02 F1 | 	add	local02, objptr
08ac4     04 28 06 F1 | 	add	local02, #4
08ac8     14 29 02 FB | 	rdlong	local02, local02
08acc     11 28 0E F2 | 	cmp	local02, #17 wz
08ad0     35 00 00 FF 
08ad4     2C E4 85 F1 | 	sub	objptr, ##27180
08ad8     37 00 00 AF 
08adc     64 E4 05 A1 |  if_e	add	objptr, ##28260
08ae0     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08ae4     01 2C 06 A1 |  if_e	add	local04, #1
08ae8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08aec     37 00 00 AF 
08af0     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08af4                 | '     if lparts(ct).token=token_end then exit loop
08af4     37 00 00 FF 
08af8     64 E4 05 F1 | 	add	objptr, ##28260
08afc     F2 28 02 FB | 	rdlong	local02, objptr
08b00     03 28 66 F0 | 	shl	local02, #3
08b04     02 00 00 FF 
08b08     38 E4 85 F1 | 	sub	objptr, ##1080
08b0c     F2 28 02 F1 | 	add	local02, objptr
08b10     04 28 06 F1 | 	add	local02, #4
08b14     14 2D 02 FB | 	rdlong	local04, local02
08b18     FE 2D 0E F2 | 	cmp	local04, #510 wz
08b1c     35 00 00 FF 
08b20     2C E4 85 F1 | 	sub	objptr, ##27180
08b24     08 00 90 AD |  if_e	jmp	#LR__0792
08b28     64 FF 9F FD | 	jmp	#LR__0790
08b2c                 | LR__0791
08b2c     36 2A 06 F6 | 	mov	local03, #54
08b30                 | LR__0792
08b30                 | ' return i,err
08b30     13 FB 01 F6 | 	mov	result1, local01
08b34     15 FD 01 F6 | 	mov	result2, local03
08b38     A7 F0 03 F6 | 	mov	ptra, fp
08b3c     B2 00 A0 FD | 	call	#popregs_
08b40                 | _compile_read_ret
08b40     2D 00 64 FD | 	ret
08b44                 | 
08b44                 | ' 
08b44                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08b44                 | ' 
08b44                 | ' function compile_input() as ulong,ulong 
08b44                 | _compile_input
08b44     0F 4A 05 F6 | 	mov	COUNT_, #15
08b48     A8 00 A0 FD | 	call	#pushregs_
08b4c                 | ' 
08b4c                 | ' if lparts(ct).token=token_string then
08b4c     37 00 00 FF 
08b50     64 E4 05 F1 | 	add	objptr, ##28260
08b54     F2 16 02 FB | 	rdlong	arg03, objptr
08b58     03 16 66 F0 | 	shl	arg03, #3
08b5c     02 00 00 FF 
08b60     38 E4 85 F1 | 	sub	objptr, ##1080
08b64     F2 16 02 F1 | 	add	arg03, objptr
08b68     04 16 06 F1 | 	add	arg03, #4
08b6c     0B FD 01 FB | 	rdlong	result2, arg03
08b70     01 00 00 FF 
08b74     03 FC 0D F2 | 	cmp	result2, ##515 wz
08b78     35 00 00 FF 
08b7c     2C E4 85 F1 | 	sub	objptr, ##27180
08b80     48 06 90 5D |  if_ne	jmp	#LR__0807
08b84     37 00 00 FF 
08b88     64 E4 05 F1 | 	add	objptr, ##28260
08b8c     F2 14 02 FB | 	rdlong	arg02, objptr
08b90     03 14 66 F0 | 	shl	arg02, #3
08b94     02 00 00 FF 
08b98     38 E4 85 F1 | 	sub	objptr, ##1080
08b9c     F2 14 02 F1 | 	add	arg02, objptr
08ba0     0A 13 02 FB | 	rdlong	arg01, arg02
08ba4     35 00 00 FF 
08ba8     2C E4 85 F1 | 	sub	objptr, ##27180
08bac     09 2D 02 F6 | 	mov	local04, arg01
08bb0     97 06 48 FB | 	callpa	#(@LR__0801-@LR__0800)>>2,fcache_load_ptr_
08bb4                 | LR__0800
08bb4     16 FB C9 FA | 	rdbyte	result1, local04 wz
08bb8     01 2C 06 51 |  if_ne	add	local04, #1
08bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0800
08bc0                 | LR__0801
08bc0     09 2D 82 F1 | 	sub	local04, arg01
08bc4     16 FB 01 F6 | 	mov	result1, local04
08bc8     52 00 00 FF 
08bcc     48 E5 05 F1 | 	add	objptr, ##42312
08bd0     F2 FA 61 FC | 	wrlong	result1, objptr
08bd4     58 E4 85 F1 | 	sub	objptr, #88
08bd8     F2 12 02 FB | 	rdlong	arg01, objptr
08bdc     FD 12 82 F1 | 	sub	arg01, result1
08be0     04 12 86 F1 | 	sub	arg01, #4
08be4     03 12 26 F5 | 	andn	arg01, #3
08be8     F2 12 62 FC | 	wrlong	arg01, objptr
08bec     58 E4 05 F1 | 	add	objptr, #88
08bf0     F2 14 02 FB | 	rdlong	arg02, objptr
08bf4     52 00 00 FF 
08bf8     48 E5 85 F1 | 	sub	objptr, ##42312
08bfc     BC 70 B1 FD | 	call	#_pslpoke
08c00                 | '   pslpoke memtop,l
08c00                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08c00     01 2E 06 F6 | 	mov	local05, #1
08c04     52 00 00 FF 
08c08     48 E5 05 F1 | 	add	objptr, ##42312
08c0c     F2 30 02 FB | 	rdlong	local06, objptr
08c10     52 00 00 FF 
08c14     48 E5 85 F1 | 	sub	objptr, ##42312
08c18     01 30 06 F1 | 	add	local06, #1
08c1c                 | LR__0802
08c1c     18 2F 52 F2 | 	cmps	local05, local06 wc
08c20     5C 00 90 3D |  if_ae	jmp	#LR__0803
08c24     52 00 00 FF 
08c28     F0 E4 05 F1 | 	add	objptr, ##42224
08c2c     F2 32 02 FB | 	rdlong	local07, objptr
08c30     03 32 06 F1 | 	add	local07, #3
08c34     17 33 02 F1 | 	add	local07, local05
08c38     1B 00 00 FF 
08c3c     8C E4 85 F1 | 	sub	objptr, ##13964
08c40     F2 14 02 FB | 	rdlong	arg02, objptr
08c44     03 14 66 F0 | 	shl	arg02, #3
08c48     02 00 00 FF 
08c4c     38 E4 85 F1 | 	sub	objptr, ##1080
08c50     F2 14 02 F1 | 	add	arg02, objptr
08c54     0A 13 02 FB | 	rdlong	arg01, arg02
08c58     17 15 02 F6 | 	mov	arg02, local05
08c5c     01 16 06 F6 | 	mov	arg03, #1
08c60     35 00 00 FF 
08c64     2C E4 85 F1 | 	sub	objptr, ##27180
08c68     14 D9 B1 FD | 	call	#__system__Mid_S
08c6c     FD 14 C2 FA | 	rdbyte	arg02, result1
08c70     19 13 02 F6 | 	mov	arg01, local07
08c74     D4 70 B1 FD | 	call	#_pspoke
08c78     01 2E 06 F1 | 	add	local05, #1
08c7c     9C FF 9F FD | 	jmp	#LR__0802
08c80                 | LR__0803
08c80     52 00 00 FF 
08c84     F0 E4 05 F1 | 	add	objptr, ##42224
08c88     F2 26 02 FB | 	rdlong	local01, objptr
08c8c     2B 2A 06 F6 | 	mov	local03, #43
08c90     13 35 02 F6 | 	mov	local08, local01
08c94     14 33 02 F6 | 	mov	local07, local02
08c98     15 37 02 F6 | 	mov	local09, local03
08c9c     08 00 00 FF 
08ca0     54 E4 85 F1 | 	sub	objptr, ##4180
08ca4     F2 30 02 FB | 	rdlong	local06, objptr
08ca8     18 2F 02 F6 | 	mov	local05, local06
08cac     01 2E 66 F0 | 	shl	local05, #1
08cb0     18 2F 02 F1 | 	add	local05, local06
08cb4     02 2E 66 F0 | 	shl	local05, #2
08cb8     03 00 00 FF 
08cbc     00 E4 85 F1 | 	sub	objptr, ##1536
08cc0     F2 2E 02 F1 | 	add	local05, objptr
08cc4     17 35 62 FC | 	wrlong	local08, local05
08cc8     03 00 00 FF 
08ccc     00 E4 05 F1 | 	add	objptr, ##1536
08cd0     F2 38 02 FB | 	rdlong	local10, objptr
08cd4     1C 3B 02 F6 | 	mov	local11, local10
08cd8     01 3A 66 F0 | 	shl	local11, #1
08cdc     1C 3B 02 F1 | 	add	local11, local10
08ce0     02 3A 66 F0 | 	shl	local11, #2
08ce4     03 00 00 FF 
08ce8     00 E4 85 F1 | 	sub	objptr, ##1536
08cec     F2 3C 02 F6 | 	mov	local12, objptr
08cf0     F2 3A 02 F1 | 	add	local11, objptr
08cf4     04 3A 06 F1 | 	add	local11, #4
08cf8     1D 33 62 FC | 	wrlong	local07, local11
08cfc     04 3A 86 F1 | 	sub	local11, #4
08d00     03 00 00 FF 
08d04     00 E4 05 F1 | 	add	objptr, ##1536
08d08     F2 34 02 FB | 	rdlong	local08, objptr
08d0c     1A 33 02 F6 | 	mov	local07, local08
08d10     01 32 66 F0 | 	shl	local07, #1
08d14     1A 33 02 F1 | 	add	local07, local08
08d18     02 32 66 F0 | 	shl	local07, #2
08d1c     03 00 00 FF 
08d20     00 E4 85 F1 | 	sub	objptr, ##1536
08d24     F2 32 02 F1 | 	add	local07, objptr
08d28     08 32 06 F1 | 	add	local07, #8
08d2c     19 37 62 FC | 	wrlong	local09, local07
08d30     03 00 00 FF 
08d34     00 E4 05 F1 | 	add	objptr, ##1536
08d38     F2 34 02 FB | 	rdlong	local08, objptr
08d3c     01 34 06 F1 | 	add	local08, #1
08d40     F2 34 62 FC | 	wrlong	local08, objptr
08d44     13 00 00 FF 
08d48     38 E4 85 F1 | 	sub	objptr, ##9784
08d4c     F2 34 02 FB | 	rdlong	local08, objptr
08d50     01 34 06 F1 | 	add	local08, #1
08d54     F2 34 62 FC | 	wrlong	local08, objptr
08d58                 | '   t1.result.uresult=memtop
08d58                 | '   t1.result_type=result_string2  
08d58                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08d58                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08d58     03 34 66 F0 | 	shl	local08, #3
08d5c     02 00 00 FF 
08d60     38 E4 85 F1 | 	sub	objptr, ##1080
08d64     F2 34 02 F1 | 	add	local08, objptr
08d68     04 34 06 F1 | 	add	local08, #4
08d6c     1A 35 02 FB | 	rdlong	local08, local08
08d70     11 34 0E F2 | 	cmp	local08, #17 wz
08d74     35 00 00 FF 
08d78     2C E4 85 F1 | 	sub	objptr, ##27180
08d7c     64 01 90 5D |  if_ne	jmp	#LR__0804
08d80     21 2A 06 F6 | 	mov	local03, #33
08d84     13 35 02 F6 | 	mov	local08, local01
08d88     14 33 02 F6 | 	mov	local07, local02
08d8c     15 3F 02 F6 | 	mov	local13, local03
08d90     4A 00 00 FF 
08d94     9C E4 05 F1 | 	add	objptr, ##38044
08d98     F2 3C 02 FB | 	rdlong	local12, objptr
08d9c     1E 3B 02 F6 | 	mov	local11, local12
08da0     01 3A 66 F0 | 	shl	local11, #1
08da4     1E 3B 02 F1 | 	add	local11, local12
08da8     02 3A 66 F0 | 	shl	local11, #2
08dac     03 00 00 FF 
08db0     00 E4 85 F1 | 	sub	objptr, ##1536
08db4     F2 3A 02 F1 | 	add	local11, objptr
08db8     1D 35 62 FC | 	wrlong	local08, local11
08dbc     03 00 00 FF 
08dc0     00 E4 05 F1 | 	add	objptr, ##1536
08dc4     F2 38 02 FB | 	rdlong	local10, objptr
08dc8     1C 3B 02 F6 | 	mov	local11, local10
08dcc     01 3A 66 F0 | 	shl	local11, #1
08dd0     1C 3B 02 F1 | 	add	local11, local10
08dd4     02 3A 66 F0 | 	shl	local11, #2
08dd8     03 00 00 FF 
08ddc     00 E4 85 F1 | 	sub	objptr, ##1536
08de0     F2 3A 02 F1 | 	add	local11, objptr
08de4     04 3A 06 F1 | 	add	local11, #4
08de8     1D 33 62 FC | 	wrlong	local07, local11
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     F2 34 02 FB | 	rdlong	local08, objptr
08df8     1A 41 02 F6 | 	mov	local14, local08
08dfc     01 40 66 F0 | 	shl	local14, #1
08e00     1A 41 02 F1 | 	add	local14, local08
08e04     02 40 66 F0 | 	shl	local14, #2
08e08     03 00 00 FF 
08e0c     00 E4 85 F1 | 	sub	objptr, ##1536
08e10     F2 40 02 F1 | 	add	local14, objptr
08e14     08 40 06 F1 | 	add	local14, #8
08e18     20 3F 62 FC | 	wrlong	local13, local14
08e1c     03 00 00 FF 
08e20     00 E4 05 F1 | 	add	objptr, ##1536
08e24     F2 34 02 FB | 	rdlong	local08, objptr
08e28     01 34 06 F1 | 	add	local08, #1
08e2c     F2 34 62 FC | 	wrlong	local08, objptr
08e30     44 2A 06 F6 | 	mov	local03, #68
08e34     13 35 02 F6 | 	mov	local08, local01
08e38     14 33 02 F6 | 	mov	local07, local02
08e3c     15 3F 02 F6 | 	mov	local13, local03
08e40     F2 40 02 FB | 	rdlong	local14, objptr
08e44     20 3D 02 F6 | 	mov	local12, local14
08e48     01 3C 66 F0 | 	shl	local12, #1
08e4c     20 3D 02 F1 | 	add	local12, local14
08e50     02 3C 66 F0 | 	shl	local12, #2
08e54     03 00 00 FF 
08e58     00 E4 85 F1 | 	sub	objptr, ##1536
08e5c     F2 3C 02 F1 | 	add	local12, objptr
08e60     1E 35 62 FC | 	wrlong	local08, local12
08e64     03 00 00 FF 
08e68     00 E4 05 F1 | 	add	objptr, ##1536
08e6c     F2 38 02 FB | 	rdlong	local10, objptr
08e70     1C 3B 02 F6 | 	mov	local11, local10
08e74     01 3A 66 F0 | 	shl	local11, #1
08e78     1C 3B 02 F1 | 	add	local11, local10
08e7c     02 3A 66 F0 | 	shl	local11, #2
08e80     03 00 00 FF 
08e84     00 E4 85 F1 | 	sub	objptr, ##1536
08e88     F2 3C 02 F6 | 	mov	local12, objptr
08e8c     F2 3A 02 F1 | 	add	local11, objptr
08e90     04 3A 06 F1 | 	add	local11, #4
08e94     1D 33 62 FC | 	wrlong	local07, local11
08e98     03 00 00 FF 
08e9c     00 E4 05 F1 | 	add	objptr, ##1536
08ea0     F2 34 02 FB | 	rdlong	local08, objptr
08ea4     1A 41 02 F6 | 	mov	local14, local08
08ea8     01 40 66 F0 | 	shl	local14, #1
08eac     1A 41 02 F1 | 	add	local14, local08
08eb0     02 40 66 F0 | 	shl	local14, #2
08eb4     03 00 00 FF 
08eb8     00 E4 85 F1 | 	sub	objptr, ##1536
08ebc     F2 40 02 F1 | 	add	local14, objptr
08ec0     08 40 06 F1 | 	add	local14, #8
08ec4     20 3F 62 FC | 	wrlong	local13, local14
08ec8     03 00 00 FF 
08ecc     00 E4 05 F1 | 	add	objptr, ##1536
08ed0     F2 34 02 FB | 	rdlong	local08, objptr
08ed4     01 34 06 F1 | 	add	local08, #1
08ed8     F2 34 62 FC | 	wrlong	local08, objptr
08edc     4A 00 00 FF 
08ee0     9C E4 85 F1 | 	sub	objptr, ##38044
08ee4                 | LR__0804
08ee4                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08ee4     37 00 00 FF 
08ee8     64 E4 05 F1 | 	add	objptr, ##28260
08eec     F2 34 02 FB | 	rdlong	local08, objptr
08ef0     03 34 66 F0 | 	shl	local08, #3
08ef4     02 00 00 FF 
08ef8     38 E4 85 F1 | 	sub	objptr, ##1080
08efc     F2 34 02 F1 | 	add	local08, objptr
08f00     04 34 06 F1 | 	add	local08, #4
08f04     1A 41 02 FB | 	rdlong	local14, local08
08f08     12 40 0E F2 | 	cmp	local14, #18 wz
08f0c     35 00 00 FF 
08f10     2C E4 85 F1 | 	sub	objptr, ##27180
08f14     64 01 90 5D |  if_ne	jmp	#LR__0805
08f18     22 2A 06 F6 | 	mov	local03, #34
08f1c     13 35 02 F6 | 	mov	local08, local01
08f20     14 33 02 F6 | 	mov	local07, local02
08f24     15 3F 02 F6 | 	mov	local13, local03
08f28     4A 00 00 FF 
08f2c     9C E4 05 F1 | 	add	objptr, ##38044
08f30     F2 40 02 FB | 	rdlong	local14, objptr
08f34     20 3B 02 F6 | 	mov	local11, local14
08f38     01 3A 66 F0 | 	shl	local11, #1
08f3c     20 3B 02 F1 | 	add	local11, local14
08f40     02 3A 66 F0 | 	shl	local11, #2
08f44     03 00 00 FF 
08f48     00 E4 85 F1 | 	sub	objptr, ##1536
08f4c     F2 3A 02 F1 | 	add	local11, objptr
08f50     1D 35 62 FC | 	wrlong	local08, local11
08f54     03 00 00 FF 
08f58     00 E4 05 F1 | 	add	objptr, ##1536
08f5c     F2 38 02 FB | 	rdlong	local10, objptr
08f60     1C 3B 02 F6 | 	mov	local11, local10
08f64     01 3A 66 F0 | 	shl	local11, #1
08f68     1C 3B 02 F1 | 	add	local11, local10
08f6c     02 3A 66 F0 | 	shl	local11, #2
08f70     03 00 00 FF 
08f74     00 E4 85 F1 | 	sub	objptr, ##1536
08f78     F2 3A 02 F1 | 	add	local11, objptr
08f7c     04 3A 06 F1 | 	add	local11, #4
08f80     1D 33 62 FC | 	wrlong	local07, local11
08f84     03 00 00 FF 
08f88     00 E4 05 F1 | 	add	objptr, ##1536
08f8c     F2 34 02 FB | 	rdlong	local08, objptr
08f90     1A 41 02 F6 | 	mov	local14, local08
08f94     01 40 66 F0 | 	shl	local14, #1
08f98     1A 41 02 F1 | 	add	local14, local08
08f9c     02 40 66 F0 | 	shl	local14, #2
08fa0     03 00 00 FF 
08fa4     00 E4 85 F1 | 	sub	objptr, ##1536
08fa8     F2 40 02 F1 | 	add	local14, objptr
08fac     08 40 06 F1 | 	add	local14, #8
08fb0     20 3F 62 FC | 	wrlong	local13, local14
08fb4     03 00 00 FF 
08fb8     00 E4 05 F1 | 	add	objptr, ##1536
08fbc     F2 34 02 FB | 	rdlong	local08, objptr
08fc0     01 34 06 F1 | 	add	local08, #1
08fc4     F2 34 62 FC | 	wrlong	local08, objptr
08fc8     44 2A 06 F6 | 	mov	local03, #68
08fcc     13 35 02 F6 | 	mov	local08, local01
08fd0     14 33 02 F6 | 	mov	local07, local02
08fd4     15 3F 02 F6 | 	mov	local13, local03
08fd8     F2 40 02 FB | 	rdlong	local14, objptr
08fdc     20 3D 02 F6 | 	mov	local12, local14
08fe0     01 3C 66 F0 | 	shl	local12, #1
08fe4     20 3D 02 F1 | 	add	local12, local14
08fe8     02 3C 66 F0 | 	shl	local12, #2
08fec     03 00 00 FF 
08ff0     00 E4 85 F1 | 	sub	objptr, ##1536
08ff4     F2 3C 02 F1 | 	add	local12, objptr
08ff8     1E 35 62 FC | 	wrlong	local08, local12
08ffc     03 00 00 FF 
09000     00 E4 05 F1 | 	add	objptr, ##1536
09004     F2 38 02 FB | 	rdlong	local10, objptr
09008     1C 3B 02 F6 | 	mov	local11, local10
0900c     01 3A 66 F0 | 	shl	local11, #1
09010     1C 3B 02 F1 | 	add	local11, local10
09014     02 3A 66 F0 | 	shl	local11, #2
09018     03 00 00 FF 
0901c     00 E4 85 F1 | 	sub	objptr, ##1536
09020     F2 3C 02 F6 | 	mov	local12, objptr
09024     F2 3A 02 F1 | 	add	local11, objptr
09028     04 3A 06 F1 | 	add	local11, #4
0902c     1D 33 62 FC | 	wrlong	local07, local11
09030     03 00 00 FF 
09034     00 E4 05 F1 | 	add	objptr, ##1536
09038     F2 34 02 FB | 	rdlong	local08, objptr
0903c     1A 41 02 F6 | 	mov	local14, local08
09040     01 40 66 F0 | 	shl	local14, #1
09044     1A 41 02 F1 | 	add	local14, local08
09048     02 40 66 F0 | 	shl	local14, #2
0904c     03 00 00 FF 
09050     00 E4 85 F1 | 	sub	objptr, ##1536
09054     F2 40 02 F1 | 	add	local14, objptr
09058     08 40 06 F1 | 	add	local14, #8
0905c     20 3F 62 FC | 	wrlong	local13, local14
09060     03 00 00 FF 
09064     00 E4 05 F1 | 	add	objptr, ##1536
09068     F2 34 02 FB | 	rdlong	local08, objptr
0906c     01 34 06 F1 | 	add	local08, #1
09070     F2 34 62 FC | 	wrlong	local08, objptr
09074     4A 00 00 FF 
09078     9C E4 85 F1 | 	sub	objptr, ##38044
0907c                 | LR__0805
0907c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
0907c     37 00 00 FF 
09080     64 E4 05 F1 | 	add	objptr, ##28260
09084     F2 34 02 FB | 	rdlong	local08, objptr
09088     03 34 66 F0 | 	shl	local08, #3
0908c     02 00 00 FF 
09090     38 E4 85 F1 | 	sub	objptr, ##1080
09094     F2 34 02 F1 | 	add	local08, objptr
09098     04 34 06 F1 | 	add	local08, #4
0909c     1A 41 02 FB | 	rdlong	local14, local08
090a0     12 40 0E F2 | 	cmp	local14, #18 wz
090a4     35 00 00 FF 
090a8     2C E4 85 F1 | 	sub	objptr, ##27180
090ac     37 00 00 5F 
090b0     64 E4 05 51 |  if_ne	add	objptr, ##28260
090b4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
090b8     03 38 66 50 |  if_ne	shl	local10, #3
090bc     02 00 00 5F 
090c0     38 E4 85 51 |  if_ne	sub	objptr, ##1080
090c4     F2 3A 02 56 |  if_ne	mov	local11, objptr
090c8     35 00 00 5F 
090cc     2C E4 85 51 |  if_ne	sub	objptr, ##27180
090d0     1D 39 02 51 |  if_ne	add	local10, local11
090d4     04 38 06 51 |  if_ne	add	local10, #4
090d8     1C 3D 02 5B |  if_ne	rdlong	local12, local10
090dc     11 3C 0E 52 |  if_ne	cmp	local12, #17 wz
090e0     CC 00 90 AD |  if_e	jmp	#LR__0806
090e4     44 2A 06 F6 | 	mov	local03, #68
090e8     13 35 02 F6 | 	mov	local08, local01
090ec     14 33 02 F6 | 	mov	local07, local02
090f0     15 3F 02 F6 | 	mov	local13, local03
090f4     4A 00 00 FF 
090f8     9C E4 05 F1 | 	add	objptr, ##38044
090fc     F2 40 02 FB | 	rdlong	local14, objptr
09100     20 3D 02 F6 | 	mov	local12, local14
09104     01 3C 66 F0 | 	shl	local12, #1
09108     20 3D 02 F1 | 	add	local12, local14
0910c     02 3C 66 F0 | 	shl	local12, #2
09110     03 00 00 FF 
09114     00 E4 85 F1 | 	sub	objptr, ##1536
09118     F2 3C 02 F1 | 	add	local12, objptr
0911c     1E 35 62 FC | 	wrlong	local08, local12
09120     03 00 00 FF 
09124     00 E4 05 F1 | 	add	objptr, ##1536
09128     F2 38 02 FB | 	rdlong	local10, objptr
0912c     1C 3B 02 F6 | 	mov	local11, local10
09130     01 3A 66 F0 | 	shl	local11, #1
09134     1C 3B 02 F1 | 	add	local11, local10
09138     02 3A 66 F0 | 	shl	local11, #2
0913c     03 00 00 FF 
09140     00 E4 85 F1 | 	sub	objptr, ##1536
09144     F2 3A 02 F1 | 	add	local11, objptr
09148     04 3A 06 F1 | 	add	local11, #4
0914c     1D 33 62 FC | 	wrlong	local07, local11
09150     03 00 00 FF 
09154     00 E4 05 F1 | 	add	objptr, ##1536
09158     F2 3C 02 FB | 	rdlong	local12, objptr
0915c     1E 41 02 F6 | 	mov	local14, local12
09160     01 40 66 F0 | 	shl	local14, #1
09164     1E 41 02 F1 | 	add	local14, local12
09168     02 40 66 F0 | 	shl	local14, #2
0916c     03 00 00 FF 
09170     00 E4 85 F1 | 	sub	objptr, ##1536
09174     F2 40 02 F1 | 	add	local14, objptr
09178     08 40 06 F1 | 	add	local14, #8
0917c     20 3F 62 FC | 	wrlong	local13, local14
09180     03 00 00 FF 
09184     00 E4 05 F1 | 	add	objptr, ##1536
09188     F2 34 02 FB | 	rdlong	local08, objptr
0918c     01 34 06 F1 | 	add	local08, #1
09190     F2 34 62 FC | 	wrlong	local08, objptr
09194     13 00 00 FF 
09198     38 E4 85 F1 | 	sub	objptr, ##9784
0919c     F2 34 02 FB | 	rdlong	local08, objptr
091a0     01 34 86 F1 | 	sub	local08, #1
091a4     F2 34 62 FC | 	wrlong	local08, objptr
091a8     37 00 00 FF 
091ac     64 E4 85 F1 | 	sub	objptr, ##28260
091b0                 | LR__0806
091b0     37 00 00 FF 
091b4     64 E4 05 F1 | 	add	objptr, ##28260
091b8     F2 34 02 FB | 	rdlong	local08, objptr
091bc     01 34 06 F1 | 	add	local08, #1
091c0     F2 34 62 FC | 	wrlong	local08, objptr
091c4     37 00 00 FF 
091c8     64 E4 85 F1 | 	sub	objptr, ##28260
091cc                 | LR__0807
091cc     00 2E 06 F6 | 	mov	local05, #0
091d0                 | ' i=0 : err=0
091d0                 | ' if lparts(ct).token<>token_end then
091d0     37 00 00 FF 
091d4     64 E4 05 F1 | 	add	objptr, ##28260
091d8     F2 40 02 FB | 	rdlong	local14, objptr
091dc     03 40 66 F0 | 	shl	local14, #3
091e0     02 00 00 FF 
091e4     38 E4 85 F1 | 	sub	objptr, ##1080
091e8     F2 40 02 F1 | 	add	local14, objptr
091ec     04 40 06 F1 | 	add	local14, #4
091f0     20 41 02 FB | 	rdlong	local14, local14
091f4     FE 41 0E F2 | 	cmp	local14, #510 wz
091f8     35 00 00 FF 
091fc     2C E4 85 F1 | 	sub	objptr, ##27180
09200     9C 00 90 AD |  if_e	jmp	#LR__0809
09204                 | '   do
09204                 | LR__0808
09204     94 27 B0 FD | 	call	#_getaddr
09208     FD 42 02 F6 | 	mov	local15, result1
0920c     37 00 00 FF 
09210     64 E4 05 F1 | 	add	objptr, ##28260
09214     F2 34 02 FB | 	rdlong	local08, objptr
09218     01 34 06 F1 | 	add	local08, #1
0921c     F2 34 62 FC | 	wrlong	local08, objptr
09220     01 2E 06 F1 | 	add	local05, #1
09224                 | '     err=getaddr() :ct+=1
09224                 | '     i+=1 
09224                 | '     if lparts(ct).token=token_comma then ct+=1 
09224     1A 41 02 F6 | 	mov	local14, local08
09228     03 40 66 F0 | 	shl	local14, #3
0922c     02 00 00 FF 
09230     38 E4 85 F1 | 	sub	objptr, ##1080
09234     F2 40 02 F1 | 	add	local14, objptr
09238     04 40 06 F1 | 	add	local14, #4
0923c     20 41 02 FB | 	rdlong	local14, local14
09240     11 40 0E F2 | 	cmp	local14, #17 wz
09244     35 00 00 FF 
09248     2C E4 85 F1 | 	sub	objptr, ##27180
0924c     37 00 00 AF 
09250     64 E4 05 A1 |  if_e	add	objptr, ##28260
09254     F2 34 02 AB |  if_e	rdlong	local08, objptr
09258     01 34 06 A1 |  if_e	add	local08, #1
0925c     F2 34 62 AC |  if_e	wrlong	local08, objptr
09260     37 00 00 AF 
09264     64 E4 85 A1 |  if_e	sub	objptr, ##28260
09268                 | '     if lparts(ct).token=token_end then exit loop
09268     37 00 00 FF 
0926c     64 E4 05 F1 | 	add	objptr, ##28260
09270     F2 40 02 FB | 	rdlong	local14, objptr
09274     03 40 66 F0 | 	shl	local14, #3
09278     02 00 00 FF 
0927c     38 E4 85 F1 | 	sub	objptr, ##1080
09280     F2 40 02 F1 | 	add	local14, objptr
09284     04 40 06 F1 | 	add	local14, #4
09288     20 41 02 FB | 	rdlong	local14, local14
0928c     FE 41 0E F2 | 	cmp	local14, #510 wz
09290     35 00 00 FF 
09294     2C E4 85 F1 | 	sub	objptr, ##27180
09298     08 00 90 AD |  if_e	jmp	#LR__0810
0929c     64 FF 9F FD | 	jmp	#LR__0808
092a0                 | LR__0809
092a0     36 42 06 F6 | 	mov	local15, #54
092a4                 | LR__0810
092a4                 | ' return i,err
092a4     17 FB 01 F6 | 	mov	result1, local05
092a8     21 FD 01 F6 | 	mov	result2, local15
092ac     A7 F0 03 F6 | 	mov	ptra, fp
092b0     B2 00 A0 FD | 	call	#popregs_
092b4                 | _compile_input_ret
092b4     2D 00 64 FD | 	ret
092b8                 | 
092b8                 | ' 
092b8                 | ' '----- compile assign to an array element
092b8                 | ' 
092b8                 | ' function compile_array_assign() as ulong 
092b8                 | _compile_array_assign
092b8     0B 4A 05 F6 | 	mov	COUNT_, #11
092bc     A8 00 A0 FD | 	call	#pushregs_
092c0     00 2C 06 F6 | 	mov	local04, #0
092c4     00 2E 06 F6 | 	mov	local05, #0
092c8     37 00 00 FF 
092cc     64 E4 05 F1 | 	add	objptr, ##28260
092d0     F2 30 02 FB | 	rdlong	local06, objptr
092d4     18 FB 01 F6 | 	mov	result1, local06
092d8     01 FA 85 F1 | 	sub	result1, #1
092dc     03 FA 65 F0 | 	shl	result1, #3
092e0     02 00 00 FF 
092e4     38 E4 85 F1 | 	sub	objptr, ##1080
092e8     F2 FA 01 F1 | 	add	result1, objptr
092ec     FD 32 02 FB | 	rdlong	local07, result1
092f0                 | ' numpar=0 : err=0
092f0                 | ' varname$=lparts(ct-1).part$
092f0                 | ' if lparts(ct).token=token_lpar then
092f0     03 30 66 F0 | 	shl	local06, #3
092f4     F2 30 02 F1 | 	add	local06, objptr
092f8     04 30 06 F1 | 	add	local06, #4
092fc     18 31 02 FB | 	rdlong	local06, local06
09300     15 30 0E F2 | 	cmp	local06, #21 wz
09304     35 00 00 FF 
09308     2C E4 85 F1 | 	sub	objptr, ##27180
0930c     F0 01 90 5D |  if_ne	jmp	#LR__0824
09310     37 00 00 FF 
09314     64 E4 05 F1 | 	add	objptr, ##28260
09318     F2 34 02 FB | 	rdlong	local08, objptr
0931c     01 34 06 F1 | 	add	local08, #1
09320     F2 34 62 FC | 	wrlong	local08, objptr
09324     37 00 00 FF 
09328     64 E4 85 F1 | 	sub	objptr, ##28260
0932c                 | '   ct+=1 											' omit this lpar, this is for expr list
0932c                 | '   do
0932c                 | LR__0820
0932c     FC 29 B0 FD | 	call	#_expr
09330     37 00 00 FF 
09334     64 E4 05 F1 | 	add	objptr, ##28260
09338     F2 30 02 FB | 	rdlong	local06, objptr
0933c     01 30 06 F1 | 	add	local06, #1
09340     F2 30 62 FC | 	wrlong	local06, objptr
09344     01 2C 06 F1 | 	add	local04, #1
09348     01 30 86 F1 | 	sub	local06, #1
0934c     03 30 66 F0 | 	shl	local06, #3
09350     02 00 00 FF 
09354     38 E4 85 F1 | 	sub	objptr, ##1080
09358     F2 30 02 F1 | 	add	local06, objptr
0935c     04 30 06 F1 | 	add	local06, #4
09360     18 35 02 FB | 	rdlong	local08, local06
09364     14 34 0E F2 | 	cmp	local08, #20 wz
09368     35 00 00 FF 
0936c     2C E4 85 F1 | 	sub	objptr, ##27180
09370     34 00 90 AD |  if_e	jmp	#LR__0821
09374     37 00 00 FF 
09378     64 E4 05 F1 | 	add	objptr, ##28260
0937c     F2 34 02 FB | 	rdlong	local08, objptr
09380     03 34 66 F0 | 	shl	local08, #3
09384     02 00 00 FF 
09388     38 E4 85 F1 | 	sub	objptr, ##1080
0938c     F2 34 02 F1 | 	add	local08, objptr
09390     04 34 06 F1 | 	add	local08, #4
09394     1A 35 02 FB | 	rdlong	local08, local08
09398     FE 35 0E F2 | 	cmp	local08, #510 wz
0939c     35 00 00 FF 
093a0     2C E4 85 F1 | 	sub	objptr, ##27180
093a4     84 FF 9F 5D |  if_ne	jmp	#LR__0820
093a8                 | LR__0821
093a8     37 00 00 FF 
093ac     64 E4 05 F1 | 	add	objptr, ##28260
093b0     F2 34 02 FB | 	rdlong	local08, objptr
093b4     01 34 06 F1 | 	add	local08, #1
093b8     F2 34 62 FC | 	wrlong	local08, objptr
093bc     37 00 00 FF 
093c0     64 E4 85 F1 | 	sub	objptr, ##28260
093c4     64 29 B0 FD | 	call	#_expr
093c8     01 36 66 F6 | 	neg	local09, #1
093cc     00 38 06 F6 | 	mov	local10, #0
093d0                 | '   ct+=1 : expr()
093d0                 | '   j=-1 : i=0 
093d0                 | '   do 
093d0                 | LR__0822
093d0                 | '     if variables(i).name=varname$ then j=i: exit loop
093d0     1C 31 02 F6 | 	mov	local06, local10
093d4     04 30 66 F0 | 	shl	local06, #4
093d8     F2 34 02 F6 | 	mov	local08, objptr
093dc     15 00 00 FF 
093e0     18 34 06 F1 | 	add	local08, ##10776
093e4     1A 31 02 F1 | 	add	local06, local08
093e8     18 13 02 FB | 	rdlong	arg01, local06
093ec     19 15 02 F6 | 	mov	arg02, local07
093f0     DC BC B1 FD | 	call	#__system___string_cmp
093f4     00 FA 0D F2 | 	cmp	result1, #0 wz
093f8     1C 37 02 A6 |  if_e	mov	local09, local10
093fc     20 00 90 AD |  if_e	jmp	#LR__0823
09400     01 38 06 F1 | 	add	local10, #1
09404     35 00 00 FF 
09408     28 E4 05 F1 | 	add	objptr, ##27176
0940c     F2 34 02 FB | 	rdlong	local08, objptr
09410     35 00 00 FF 
09414     28 E4 85 F1 | 	sub	objptr, ##27176
09418     1A 39 5A F2 | 	cmps	local10, local08 wcz
0941c     B0 FF 9F ED |  if_be	jmp	#LR__0822
09420                 | LR__0823
09420     1B 27 02 F6 | 	mov	local01, local09
09424     16 29 02 F6 | 	mov	local02, local04
09428     17 2A 06 F6 | 	mov	local03, #23
0942c     13 35 02 F6 | 	mov	local08, local01
09430     14 3B 02 F6 | 	mov	local11, local02
09434     15 33 02 F6 | 	mov	local07, local03
09438     4A 00 00 FF 
0943c     9C E4 05 F1 | 	add	objptr, ##38044
09440     F2 26 02 FB | 	rdlong	local01, objptr
09444     13 37 02 F6 | 	mov	local09, local01
09448     01 36 66 F0 | 	shl	local09, #1
0944c     13 37 02 F1 | 	add	local09, local01
09450     02 36 66 F0 | 	shl	local09, #2
09454     03 00 00 FF 
09458     00 E4 85 F1 | 	sub	objptr, ##1536
0945c     F2 36 02 F1 | 	add	local09, objptr
09460     1B 35 62 FC | 	wrlong	local08, local09
09464     03 00 00 FF 
09468     00 E4 05 F1 | 	add	objptr, ##1536
0946c     F2 26 02 FB | 	rdlong	local01, objptr
09470     13 37 02 F6 | 	mov	local09, local01
09474     01 36 66 F0 | 	shl	local09, #1
09478     13 37 02 F1 | 	add	local09, local01
0947c     02 36 66 F0 | 	shl	local09, #2
09480     03 00 00 FF 
09484     00 E4 85 F1 | 	sub	objptr, ##1536
09488     F2 36 02 F1 | 	add	local09, objptr
0948c     04 36 06 F1 | 	add	local09, #4
09490     1B 3B 62 FC | 	wrlong	local11, local09
09494     03 00 00 FF 
09498     00 E4 05 F1 | 	add	objptr, ##1536
0949c     F2 3A 02 FB | 	rdlong	local11, objptr
094a0     1D 27 02 F6 | 	mov	local01, local11
094a4     01 26 66 F0 | 	shl	local01, #1
094a8     1D 27 02 F1 | 	add	local01, local11
094ac     02 26 66 F0 | 	shl	local01, #2
094b0     03 00 00 FF 
094b4     00 E4 85 F1 | 	sub	objptr, ##1536
094b8     F2 26 02 F1 | 	add	local01, objptr
094bc     08 26 06 F1 | 	add	local01, #8
094c0     13 33 62 FC | 	wrlong	local07, local01
094c4     03 00 00 FF 
094c8     00 E4 05 F1 | 	add	objptr, ##1536
094cc     F2 34 02 FB | 	rdlong	local08, objptr
094d0     01 34 06 F1 | 	add	local08, #1
094d4     F2 34 62 FC | 	wrlong	local08, objptr
094d8                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
094d8                 | '   if numpar>3 then err=45
094d8     04 2C 16 F2 | 	cmp	local04, #4 wc
094dc     2D 2E 06 36 |  if_ae	mov	local05, #45
094e0                 | '   if i>varnum then err=20
094e0     15 00 00 FF 
094e4     74 E4 85 F1 | 	sub	objptr, ##10868
094e8     F2 34 02 FB | 	rdlong	local08, objptr
094ec     35 00 00 FF 
094f0     28 E4 85 F1 | 	sub	objptr, ##27176
094f4     1A 39 5A F2 | 	cmps	local10, local08 wcz
094f8     14 2E 06 16 |  if_a	mov	local05, #20
094fc     04 00 90 FD | 	jmp	#LR__0825
09500                 | LR__0824
09500     0E 2E 06 F6 | 	mov	local05, #14
09504                 | LR__0825
09504                 | ' return err
09504     17 FB 01 F6 | 	mov	result1, local05
09508     A7 F0 03 F6 | 	mov	ptra, fp
0950c     B2 00 A0 FD | 	call	#popregs_
09510                 | _compile_array_assign_ret
09510     2D 00 64 FD | 	ret
09514                 | 
09514                 | ' 
09514                 | ' '----- compile print command with its ";" and "," modifiers
09514                 | ' 
09514                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09514                 | _compile_print
09514     0F 4A 05 F6 | 	mov	COUNT_, #15
09518     A8 00 A0 FD | 	call	#pushregs_
0951c     00 26 06 F6 | 	mov	local01, #0
09520     1D 2A 06 F6 | 	mov	local03, #29
09524                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09524                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09524     37 00 00 FF 
09528     64 E4 05 F1 | 	add	objptr, ##28260
0952c     F2 2C 02 FB | 	rdlong	local04, objptr
09530     03 2C 66 F0 | 	shl	local04, #3
09534     02 00 00 FF 
09538     38 E4 85 F1 | 	sub	objptr, ##1080
0953c     F2 2C 02 F1 | 	add	local04, objptr
09540     04 2C 06 F1 | 	add	local04, #4
09544     16 2D 02 FB | 	rdlong	local04, local04
09548     FE 2D 0E F2 | 	cmp	local04, #510 wz
0954c     35 00 00 FF 
09550     2C E4 85 F1 | 	sub	objptr, ##27180
09554     68 01 90 5D |  if_ne	jmp	#LR__0830
09558     20 2A 06 F6 | 	mov	local03, #32
0955c     13 2F 02 F6 | 	mov	local05, local01
09560     14 31 02 F6 | 	mov	local06, local02
09564     15 33 02 F6 | 	mov	local07, local03
09568     4A 00 00 FF 
0956c     9C E4 05 F1 | 	add	objptr, ##38044
09570     F2 34 02 FB | 	rdlong	local08, objptr
09574     1A 37 02 F6 | 	mov	local09, local08
09578     01 36 66 F0 | 	shl	local09, #1
0957c     1A 37 02 F1 | 	add	local09, local08
09580     02 36 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 E4 85 F1 | 	sub	objptr, ##1536
0958c     F2 36 02 F1 | 	add	local09, objptr
09590     1B 2F 62 FC | 	wrlong	local05, local09
09594     03 00 00 FF 
09598     00 E4 05 F1 | 	add	objptr, ##1536
0959c     F2 2E 02 FB | 	rdlong	local05, objptr
095a0     17 39 02 F6 | 	mov	local10, local05
095a4     01 38 66 F0 | 	shl	local10, #1
095a8     17 39 02 F1 | 	add	local10, local05
095ac     02 38 66 F0 | 	shl	local10, #2
095b0     03 00 00 FF 
095b4     00 E4 85 F1 | 	sub	objptr, ##1536
095b8     F2 38 02 F1 | 	add	local10, objptr
095bc     04 38 06 F1 | 	add	local10, #4
095c0     1C 31 62 FC | 	wrlong	local06, local10
095c4     03 00 00 FF 
095c8     00 E4 05 F1 | 	add	objptr, ##1536
095cc     F2 2E 02 FB | 	rdlong	local05, objptr
095d0     17 3B 02 F6 | 	mov	local11, local05
095d4     01 3A 66 F0 | 	shl	local11, #1
095d8     17 3B 02 F1 | 	add	local11, local05
095dc     02 3A 66 F0 | 	shl	local11, #2
095e0     03 00 00 FF 
095e4     00 E4 85 F1 | 	sub	objptr, ##1536
095e8     F2 3A 02 F1 | 	add	local11, objptr
095ec     08 3A 06 F1 | 	add	local11, #8
095f0     1D 33 62 FC | 	wrlong	local07, local11
095f4     03 00 00 FF 
095f8     00 E4 05 F1 | 	add	objptr, ##1536
095fc     F2 2E 02 FB | 	rdlong	local05, objptr
09600     01 2E 06 F1 | 	add	local05, #1
09604     F2 2E 62 FC | 	wrlong	local05, objptr
09608     44 2A 06 F6 | 	mov	local03, #68
0960c     13 2F 02 F6 | 	mov	local05, local01
09610     14 31 02 F6 | 	mov	local06, local02
09614     15 33 02 F6 | 	mov	local07, local03
09618     F2 34 02 FB | 	rdlong	local08, objptr
0961c     1A 37 02 F6 | 	mov	local09, local08
09620     01 36 66 F0 | 	shl	local09, #1
09624     1A 37 02 F1 | 	add	local09, local08
09628     02 36 66 F0 | 	shl	local09, #2
0962c     03 00 00 FF 
09630     00 E4 85 F1 | 	sub	objptr, ##1536
09634     F2 36 02 F1 | 	add	local09, objptr
09638     1B 2F 62 FC | 	wrlong	local05, local09
0963c     03 00 00 FF 
09640     00 E4 05 F1 | 	add	objptr, ##1536
09644     F2 3A 02 FB | 	rdlong	local11, objptr
09648     1D 39 02 F6 | 	mov	local10, local11
0964c     01 38 66 F0 | 	shl	local10, #1
09650     1D 39 02 F1 | 	add	local10, local11
09654     02 38 66 F0 | 	shl	local10, #2
09658     03 00 00 FF 
0965c     00 E4 85 F1 | 	sub	objptr, ##1536
09660     F2 38 02 F1 | 	add	local10, objptr
09664     04 38 06 F1 | 	add	local10, #4
09668     1C 31 62 FC | 	wrlong	local06, local10
0966c     03 00 00 FF 
09670     00 E4 05 F1 | 	add	objptr, ##1536
09674     F2 38 02 FB | 	rdlong	local10, objptr
09678     1C 3B 02 F6 | 	mov	local11, local10
0967c     01 3A 66 F0 | 	shl	local11, #1
09680     1C 3B 02 F1 | 	add	local11, local10
09684     02 3A 66 F0 | 	shl	local11, #2
09688     03 00 00 FF 
0968c     00 E4 85 F1 | 	sub	objptr, ##1536
09690     F2 3A 02 F1 | 	add	local11, objptr
09694     08 3A 06 F1 | 	add	local11, #8
09698     1D 33 62 FC | 	wrlong	local07, local11
0969c     03 00 00 FF 
096a0     00 E4 05 F1 | 	add	objptr, ##1536
096a4     F2 2E 02 FB | 	rdlong	local05, objptr
096a8     01 2E 06 F1 | 	add	local05, #1
096ac     F2 2E 62 FC | 	wrlong	local05, objptr
096b0     4A 00 00 FF 
096b4     9C E4 85 F1 | 	sub	objptr, ##38044
096b8     00 FA 05 F6 | 	mov	result1, #0
096bc     28 05 90 FD | 	jmp	#LR__0836
096c0                 | LR__0830
096c0                 | ' do
096c0                 | LR__0831
096c0     68 26 B0 FD | 	call	#_expr
096c4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
096c4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
096c4     37 00 00 FF 
096c8     64 E4 05 F1 | 	add	objptr, ##28260
096cc     F2 2C 02 FB | 	rdlong	local04, objptr
096d0     03 2C 66 F0 | 	shl	local04, #3
096d4     02 00 00 FF 
096d8     38 E4 85 F1 | 	sub	objptr, ##1080
096dc     F2 2C 02 F1 | 	add	local04, objptr
096e0     04 2C 06 F1 | 	add	local04, #4
096e4     16 35 02 FB | 	rdlong	local08, local04
096e8     11 34 0E F2 | 	cmp	local08, #17 wz
096ec     35 00 00 FF 
096f0     2C E4 85 F1 | 	sub	objptr, ##27180
096f4     64 01 90 5D |  if_ne	jmp	#LR__0832
096f8     21 2A 06 F6 | 	mov	local03, #33
096fc     13 2F 02 F6 | 	mov	local05, local01
09700     14 31 02 F6 | 	mov	local06, local02
09704     15 33 02 F6 | 	mov	local07, local03
09708     4A 00 00 FF 
0970c     9C E4 05 F1 | 	add	objptr, ##38044
09710     F2 34 02 FB | 	rdlong	local08, objptr
09714     1A 37 02 F6 | 	mov	local09, local08
09718     01 36 66 F0 | 	shl	local09, #1
0971c     1A 37 02 F1 | 	add	local09, local08
09720     02 36 66 F0 | 	shl	local09, #2
09724     03 00 00 FF 
09728     00 E4 85 F1 | 	sub	objptr, ##1536
0972c     F2 36 02 F1 | 	add	local09, objptr
09730     1B 2F 62 FC | 	wrlong	local05, local09
09734     03 00 00 FF 
09738     00 E4 05 F1 | 	add	objptr, ##1536
0973c     F2 3A 02 FB | 	rdlong	local11, objptr
09740     1D 39 02 F6 | 	mov	local10, local11
09744     01 38 66 F0 | 	shl	local10, #1
09748     1D 39 02 F1 | 	add	local10, local11
0974c     02 38 66 F0 | 	shl	local10, #2
09750     03 00 00 FF 
09754     00 E4 85 F1 | 	sub	objptr, ##1536
09758     F2 38 02 F1 | 	add	local10, objptr
0975c     04 38 06 F1 | 	add	local10, #4
09760     1C 31 62 FC | 	wrlong	local06, local10
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 2E 02 FB | 	rdlong	local05, objptr
09770     17 3B 02 F6 | 	mov	local11, local05
09774     01 3A 66 F0 | 	shl	local11, #1
09778     17 3B 02 F1 | 	add	local11, local05
0977c     02 3A 66 F0 | 	shl	local11, #2
09780     03 00 00 FF 
09784     00 E4 85 F1 | 	sub	objptr, ##1536
09788     F2 3A 02 F1 | 	add	local11, objptr
0978c     08 3A 06 F1 | 	add	local11, #8
09790     1D 33 62 FC | 	wrlong	local07, local11
09794     03 00 00 FF 
09798     00 E4 05 F1 | 	add	objptr, ##1536
0979c     F2 2E 02 FB | 	rdlong	local05, objptr
097a0     01 2E 06 F1 | 	add	local05, #1
097a4     F2 2E 62 FC | 	wrlong	local05, objptr
097a8     44 2A 06 F6 | 	mov	local03, #68
097ac     13 2F 02 F6 | 	mov	local05, local01
097b0     14 31 02 F6 | 	mov	local06, local02
097b4     15 33 02 F6 | 	mov	local07, local03
097b8     F2 34 02 FB | 	rdlong	local08, objptr
097bc     1A 37 02 F6 | 	mov	local09, local08
097c0     01 36 66 F0 | 	shl	local09, #1
097c4     1A 37 02 F1 | 	add	local09, local08
097c8     02 36 66 F0 | 	shl	local09, #2
097cc     03 00 00 FF 
097d0     00 E4 85 F1 | 	sub	objptr, ##1536
097d4     F2 3C 02 F6 | 	mov	local12, objptr
097d8     F2 36 02 F1 | 	add	local09, objptr
097dc     1B 2F 62 FC | 	wrlong	local05, local09
097e0     03 00 00 FF 
097e4     00 E4 05 F1 | 	add	objptr, ##1536
097e8     F2 3E 02 FB | 	rdlong	local13, objptr
097ec     1F 39 02 F6 | 	mov	local10, local13
097f0     01 38 66 F0 | 	shl	local10, #1
097f4     1F 39 02 F1 | 	add	local10, local13
097f8     02 38 66 F0 | 	shl	local10, #2
097fc     03 00 00 FF 
09800     00 E4 85 F1 | 	sub	objptr, ##1536
09804     F2 38 02 F1 | 	add	local10, objptr
09808     04 38 06 F1 | 	add	local10, #4
0980c     1C 31 62 FC | 	wrlong	local06, local10
09810     03 00 00 FF 
09814     00 E4 05 F1 | 	add	objptr, ##1536
09818     F2 36 02 FB | 	rdlong	local09, objptr
0981c     1B 3B 02 F6 | 	mov	local11, local09
09820     01 3A 66 F0 | 	shl	local11, #1
09824     1B 3B 02 F1 | 	add	local11, local09
09828     02 3A 66 F0 | 	shl	local11, #2
0982c     03 00 00 FF 
09830     00 E4 85 F1 | 	sub	objptr, ##1536
09834     F2 3A 02 F1 | 	add	local11, objptr
09838     08 3A 06 F1 | 	add	local11, #8
0983c     1D 33 62 FC | 	wrlong	local07, local11
09840     03 00 00 FF 
09844     00 E4 05 F1 | 	add	objptr, ##1536
09848     F2 2E 02 FB | 	rdlong	local05, objptr
0984c     01 2E 06 F1 | 	add	local05, #1
09850     F2 2E 62 FC | 	wrlong	local05, objptr
09854     4A 00 00 FF 
09858     9C E4 85 F1 | 	sub	objptr, ##38044
0985c                 | LR__0832
0985c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0985c     37 00 00 FF 
09860     64 E4 05 F1 | 	add	objptr, ##28260
09864     F2 2C 02 FB | 	rdlong	local04, objptr
09868     03 2C 66 F0 | 	shl	local04, #3
0986c     02 00 00 FF 
09870     38 E4 85 F1 | 	sub	objptr, ##1080
09874     F2 2C 02 F1 | 	add	local04, objptr
09878     04 2C 06 F1 | 	add	local04, #4
0987c     16 35 02 FB | 	rdlong	local08, local04
09880     12 34 0E F2 | 	cmp	local08, #18 wz
09884     35 00 00 FF 
09888     2C E4 85 F1 | 	sub	objptr, ##27180
0988c     64 01 90 5D |  if_ne	jmp	#LR__0833
09890     22 2A 06 F6 | 	mov	local03, #34
09894     13 2F 02 F6 | 	mov	local05, local01
09898     14 31 02 F6 | 	mov	local06, local02
0989c     15 33 02 F6 | 	mov	local07, local03
098a0     4A 00 00 FF 
098a4     9C E4 05 F1 | 	add	objptr, ##38044
098a8     F2 34 02 FB | 	rdlong	local08, objptr
098ac     1A 37 02 F6 | 	mov	local09, local08
098b0     01 36 66 F0 | 	shl	local09, #1
098b4     1A 37 02 F1 | 	add	local09, local08
098b8     02 36 66 F0 | 	shl	local09, #2
098bc     03 00 00 FF 
098c0     00 E4 85 F1 | 	sub	objptr, ##1536
098c4     F2 36 02 F1 | 	add	local09, objptr
098c8     1B 2F 62 FC | 	wrlong	local05, local09
098cc     03 00 00 FF 
098d0     00 E4 05 F1 | 	add	objptr, ##1536
098d4     F2 3E 02 FB | 	rdlong	local13, objptr
098d8     1F 39 02 F6 | 	mov	local10, local13
098dc     01 38 66 F0 | 	shl	local10, #1
098e0     1F 39 02 F1 | 	add	local10, local13
098e4     02 38 66 F0 | 	shl	local10, #2
098e8     03 00 00 FF 
098ec     00 E4 85 F1 | 	sub	objptr, ##1536
098f0     F2 38 02 F1 | 	add	local10, objptr
098f4     04 38 06 F1 | 	add	local10, #4
098f8     1C 31 62 FC | 	wrlong	local06, local10
098fc     03 00 00 FF 
09900     00 E4 05 F1 | 	add	objptr, ##1536
09904     F2 2E 02 FB | 	rdlong	local05, objptr
09908     17 3B 02 F6 | 	mov	local11, local05
0990c     01 3A 66 F0 | 	shl	local11, #1
09910     17 3B 02 F1 | 	add	local11, local05
09914     02 3A 66 F0 | 	shl	local11, #2
09918     03 00 00 FF 
0991c     00 E4 85 F1 | 	sub	objptr, ##1536
09920     F2 3A 02 F1 | 	add	local11, objptr
09924     08 3A 06 F1 | 	add	local11, #8
09928     1D 33 62 FC | 	wrlong	local07, local11
0992c     03 00 00 FF 
09930     00 E4 05 F1 | 	add	objptr, ##1536
09934     F2 2E 02 FB | 	rdlong	local05, objptr
09938     01 2E 06 F1 | 	add	local05, #1
0993c     F2 2E 62 FC | 	wrlong	local05, objptr
09940     44 2A 06 F6 | 	mov	local03, #68
09944     13 2F 02 F6 | 	mov	local05, local01
09948     14 31 02 F6 | 	mov	local06, local02
0994c     15 33 02 F6 | 	mov	local07, local03
09950     F2 34 02 FB | 	rdlong	local08, objptr
09954     1A 37 02 F6 | 	mov	local09, local08
09958     01 36 66 F0 | 	shl	local09, #1
0995c     1A 37 02 F1 | 	add	local09, local08
09960     02 36 66 F0 | 	shl	local09, #2
09964     03 00 00 FF 
09968     00 E4 85 F1 | 	sub	objptr, ##1536
0996c     F2 3C 02 F6 | 	mov	local12, objptr
09970     F2 36 02 F1 | 	add	local09, objptr
09974     1B 2F 62 FC | 	wrlong	local05, local09
09978     03 00 00 FF 
0997c     00 E4 05 F1 | 	add	objptr, ##1536
09980     F2 3E 02 FB | 	rdlong	local13, objptr
09984     1F 39 02 F6 | 	mov	local10, local13
09988     01 38 66 F0 | 	shl	local10, #1
0998c     1F 39 02 F1 | 	add	local10, local13
09990     02 38 66 F0 | 	shl	local10, #2
09994     03 00 00 FF 
09998     00 E4 85 F1 | 	sub	objptr, ##1536
0999c     F2 38 02 F1 | 	add	local10, objptr
099a0     04 38 06 F1 | 	add	local10, #4
099a4     1C 31 62 FC | 	wrlong	local06, local10
099a8     03 00 00 FF 
099ac     00 E4 05 F1 | 	add	objptr, ##1536
099b0     F2 36 02 FB | 	rdlong	local09, objptr
099b4     1B 3B 02 F6 | 	mov	local11, local09
099b8     01 3A 66 F0 | 	shl	local11, #1
099bc     1B 3B 02 F1 | 	add	local11, local09
099c0     02 3A 66 F0 | 	shl	local11, #2
099c4     03 00 00 FF 
099c8     00 E4 85 F1 | 	sub	objptr, ##1536
099cc     F2 3A 02 F1 | 	add	local11, objptr
099d0     08 3A 06 F1 | 	add	local11, #8
099d4     1D 33 62 FC | 	wrlong	local07, local11
099d8     03 00 00 FF 
099dc     00 E4 05 F1 | 	add	objptr, ##1536
099e0     F2 2E 02 FB | 	rdlong	local05, objptr
099e4     01 2E 06 F1 | 	add	local05, #1
099e8     F2 2E 62 FC | 	wrlong	local05, objptr
099ec     4A 00 00 FF 
099f0     9C E4 85 F1 | 	sub	objptr, ##38044
099f4                 | LR__0833
099f4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
099f4     37 00 00 FF 
099f8     64 E4 05 F1 | 	add	objptr, ##28260
099fc     F2 2C 02 FB | 	rdlong	local04, objptr
09a00     03 2C 66 F0 | 	shl	local04, #3
09a04     02 00 00 FF 
09a08     38 E4 85 F1 | 	sub	objptr, ##1080
09a0c     F2 2C 02 F1 | 	add	local04, objptr
09a10     04 2C 06 F1 | 	add	local04, #4
09a14     16 35 02 FB | 	rdlong	local08, local04
09a18     FE 35 0E F2 | 	cmp	local08, #510 wz
09a1c     35 00 00 FF 
09a20     2C E4 85 F1 | 	sub	objptr, ##27180
09a24     BC 00 90 5D |  if_ne	jmp	#LR__0834
09a28     44 2A 06 F6 | 	mov	local03, #68
09a2c     13 2F 02 F6 | 	mov	local05, local01
09a30     14 31 02 F6 | 	mov	local06, local02
09a34     15 33 02 F6 | 	mov	local07, local03
09a38     4A 00 00 FF 
09a3c     9C E4 05 F1 | 	add	objptr, ##38044
09a40     F2 34 02 FB | 	rdlong	local08, objptr
09a44     1A 37 02 F6 | 	mov	local09, local08
09a48     01 36 66 F0 | 	shl	local09, #1
09a4c     1A 37 02 F1 | 	add	local09, local08
09a50     02 36 66 F0 | 	shl	local09, #2
09a54     03 00 00 FF 
09a58     00 E4 85 F1 | 	sub	objptr, ##1536
09a5c     F2 3C 02 F6 | 	mov	local12, objptr
09a60     F2 36 02 F1 | 	add	local09, objptr
09a64     1B 2F 62 FC | 	wrlong	local05, local09
09a68     03 00 00 FF 
09a6c     00 E4 05 F1 | 	add	objptr, ##1536
09a70     F2 3E 02 FB | 	rdlong	local13, objptr
09a74     1F 39 02 F6 | 	mov	local10, local13
09a78     01 38 66 F0 | 	shl	local10, #1
09a7c     1F 39 02 F1 | 	add	local10, local13
09a80     02 38 66 F0 | 	shl	local10, #2
09a84     03 00 00 FF 
09a88     00 E4 85 F1 | 	sub	objptr, ##1536
09a8c     F2 38 02 F1 | 	add	local10, objptr
09a90     04 38 06 F1 | 	add	local10, #4
09a94     1C 31 62 FC | 	wrlong	local06, local10
09a98     03 00 00 FF 
09a9c     00 E4 05 F1 | 	add	objptr, ##1536
09aa0     F2 36 02 FB | 	rdlong	local09, objptr
09aa4     1B 3B 02 F6 | 	mov	local11, local09
09aa8     01 3A 66 F0 | 	shl	local11, #1
09aac     1B 3B 02 F1 | 	add	local11, local09
09ab0     02 3A 66 F0 | 	shl	local11, #2
09ab4     03 00 00 FF 
09ab8     00 E4 85 F1 | 	sub	objptr, ##1536
09abc     F2 3A 02 F1 | 	add	local11, objptr
09ac0     08 3A 06 F1 | 	add	local11, #8
09ac4     1D 33 62 FC | 	wrlong	local07, local11
09ac8     03 00 00 FF 
09acc     00 E4 05 F1 | 	add	objptr, ##1536
09ad0     F2 2E 02 FB | 	rdlong	local05, objptr
09ad4     01 2E 06 F1 | 	add	local05, #1
09ad8     F2 2E 62 FC | 	wrlong	local05, objptr
09adc     4A 00 00 FF 
09ae0     9C E4 85 F1 | 	sub	objptr, ##38044
09ae4                 | LR__0834
09ae4                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09ae4     37 00 00 FF 
09ae8     64 E4 05 F1 | 	add	objptr, ##28260
09aec     F2 2C 02 FB | 	rdlong	local04, objptr
09af0     03 2C 66 F0 | 	shl	local04, #3
09af4     02 00 00 FF 
09af8     38 E4 85 F1 | 	sub	objptr, ##1080
09afc     F2 2C 02 F1 | 	add	local04, objptr
09b00     04 2C 06 F1 | 	add	local04, #4
09b04     16 35 02 FB | 	rdlong	local08, local04
09b08     11 34 0E F2 | 	cmp	local08, #17 wz
09b0c     35 00 00 FF 
09b10     2C E4 85 F1 | 	sub	objptr, ##27180
09b14     37 00 00 5F 
09b18     64 E4 05 51 |  if_ne	add	objptr, ##28260
09b1c     F2 3E 02 5B |  if_ne	rdlong	local13, objptr
09b20     03 3E 66 50 |  if_ne	shl	local13, #3
09b24     02 00 00 5F 
09b28     38 E4 85 51 |  if_ne	sub	objptr, ##1080
09b2c     F2 38 02 56 |  if_ne	mov	local10, objptr
09b30     35 00 00 5F 
09b34     2C E4 85 51 |  if_ne	sub	objptr, ##27180
09b38     1C 3F 02 51 |  if_ne	add	local13, local10
09b3c     04 3E 06 51 |  if_ne	add	local13, #4
09b40     1F 41 02 5B |  if_ne	rdlong	local14, local13
09b44     12 40 0E 52 |  if_ne	cmp	local14, #18 wz
09b48     38 00 90 AD |  if_e	jmp	#LR__0835
09b4c     37 00 00 FF 
09b50     64 E4 05 F1 | 	add	objptr, ##28260
09b54     F2 3A 02 FB | 	rdlong	local11, objptr
09b58     03 3A 66 F0 | 	shl	local11, #3
09b5c     02 00 00 FF 
09b60     38 E4 85 F1 | 	sub	objptr, ##1080
09b64     F2 3A 02 F1 | 	add	local11, objptr
09b68     04 3A 06 F1 | 	add	local11, #4
09b6c     1D 3B 02 FB | 	rdlong	local11, local11
09b70     FE 3B 0E F2 | 	cmp	local11, #510 wz
09b74     35 00 00 FF 
09b78     2C E4 85 F1 | 	sub	objptr, ##27180
09b7c     16 FA 05 56 |  if_ne	mov	result1, #22
09b80     64 00 90 5D |  if_ne	jmp	#LR__0836
09b84                 | LR__0835
09b84     37 00 00 FF 
09b88     64 E4 05 F1 | 	add	objptr, ##28260
09b8c     F2 2C 02 FB | 	rdlong	local04, objptr
09b90     01 2C 06 F1 | 	add	local04, #1
09b94     F2 2C 62 FC | 	wrlong	local04, objptr
09b98     03 2C 66 F0 | 	shl	local04, #3
09b9c     02 00 00 FF 
09ba0     38 E4 85 F1 | 	sub	objptr, ##1080
09ba4     F2 2C 02 F1 | 	add	local04, objptr
09ba8     04 2C 06 F1 | 	add	local04, #4
09bac     16 35 02 FB | 	rdlong	local08, local04
09bb0     FE 35 0E F2 | 	cmp	local08, #510 wz
09bb4     35 00 00 FF 
09bb8     2C E4 85 F1 | 	sub	objptr, ##27180
09bbc     37 00 00 5F 
09bc0     64 E4 05 51 |  if_ne	add	objptr, ##28260
09bc4     F2 3C 02 5B |  if_ne	rdlong	local12, objptr
09bc8     0E 00 00 5F 
09bcc     1C E4 05 51 |  if_ne	add	objptr, ##7196
09bd0     F2 42 02 5B |  if_ne	rdlong	local15, objptr
09bd4     45 00 00 5F 
09bd8     80 E4 85 51 |  if_ne	sub	objptr, ##35456
09bdc     21 3D 52 52 |  if_ne	cmps	local12, local15 wc
09be0     DC FA 9F 4D |  if_c_and_nz	jmp	#LR__0831
09be4                 | ' return 0
09be4     00 FA 05 F6 | 	mov	result1, #0
09be8                 | LR__0836
09be8     A7 F0 03 F6 | 	mov	ptra, fp
09bec     B2 00 A0 FD | 	call	#popregs_
09bf0                 | _compile_print_ret
09bf0     2D 00 64 FD | 	ret
09bf4                 | 
09bf4                 | ' 
09bf4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09bf4                 | ' 
09bf4                 | ' function compile_if(aline as ulong) as ulong  
09bf4                 | _compile_if
09bf4     09 4A 05 F6 | 	mov	COUNT_, #9
09bf8     A8 00 A0 FD | 	call	#pushregs_
09bfc                 | _compile_if_enter
09bfc     09 2D 02 F6 | 	mov	local04, arg01
09c00                 | ' return expr()
09c00     28 21 B0 FD | 	call	#_expr
09c04     37 00 00 FF 
09c08     64 E4 05 F1 | 	add	objptr, ##28260
09c0c     F2 14 02 FB | 	rdlong	arg02, objptr
09c10     0A 2F 02 F6 | 	mov	local05, arg02
09c14     03 2E 66 F0 | 	shl	local05, #3
09c18     02 00 00 FF 
09c1c     38 E4 85 F1 | 	sub	objptr, ##1080
09c20     F2 2E 02 F1 | 	add	local05, objptr
09c24     04 2E 06 F1 | 	add	local05, #4
09c28     17 2F 02 FB | 	rdlong	local05, local05
09c2c     01 14 06 F1 | 	add	arg02, #1
09c30     02 00 00 FF 
09c34     38 E4 05 F1 | 	add	objptr, ##1080
09c38     F2 14 62 FC | 	wrlong	arg02, objptr
09c3c     37 00 00 FF 
09c40     64 E4 85 F1 | 	sub	objptr, ##28260
09c44                 | ' 
09c44                 | ' err=compile_fun_1p()
09c44                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09c44     5B 2E 0E F2 | 	cmp	local05, #91 wz
09c48     34 FA 05 56 |  if_ne	mov	result1, #52
09c4c     20 01 90 5D |  if_ne	jmp	#LR__0842
09c50     58 2A 06 F6 | 	mov	local03, #88
09c54     13 31 02 F6 | 	mov	local06, local01
09c58     14 33 02 F6 | 	mov	local07, local02
09c5c     15 15 02 F6 | 	mov	arg02, local03
09c60     4A 00 00 FF 
09c64     9C E4 05 F1 | 	add	objptr, ##38044
09c68     F2 12 02 FB | 	rdlong	arg01, objptr
09c6c     09 35 02 F6 | 	mov	local08, arg01
09c70     01 34 66 F0 | 	shl	local08, #1
09c74     09 35 02 F1 | 	add	local08, arg01
09c78     02 34 66 F0 | 	shl	local08, #2
09c7c     03 00 00 FF 
09c80     00 E4 85 F1 | 	sub	objptr, ##1536
09c84     F2 34 02 F1 | 	add	local08, objptr
09c88     1A 31 62 FC | 	wrlong	local06, local08
09c8c     03 00 00 FF 
09c90     00 E4 05 F1 | 	add	objptr, ##1536
09c94     F2 30 02 FB | 	rdlong	local06, objptr
09c98     18 13 02 F6 | 	mov	arg01, local06
09c9c     01 12 66 F0 | 	shl	arg01, #1
09ca0     18 13 02 F1 | 	add	arg01, local06
09ca4     02 12 66 F0 | 	shl	arg01, #2
09ca8     03 00 00 FF 
09cac     00 E4 85 F1 | 	sub	objptr, ##1536
09cb0     F2 12 02 F1 | 	add	arg01, objptr
09cb4     04 12 06 F1 | 	add	arg01, #4
09cb8     09 33 62 FC | 	wrlong	local07, arg01
09cbc     03 00 00 FF 
09cc0     00 E4 05 F1 | 	add	objptr, ##1536
09cc4     F2 30 02 FB | 	rdlong	local06, objptr
09cc8     18 13 02 F6 | 	mov	arg01, local06
09ccc     01 12 66 F0 | 	shl	arg01, #1
09cd0     18 13 02 F1 | 	add	arg01, local06
09cd4     02 12 66 F0 | 	shl	arg01, #2
09cd8     03 00 00 FF 
09cdc     00 E4 85 F1 | 	sub	objptr, ##1536
09ce0     F2 12 02 F1 | 	add	arg01, objptr
09ce4     08 12 06 F1 | 	add	arg01, #8
09ce8     09 15 62 FC | 	wrlong	arg02, arg01
09cec     03 00 00 FF 
09cf0     00 E4 05 F1 | 	add	objptr, ##1536
09cf4     F2 30 02 FB | 	rdlong	local06, objptr
09cf8     01 30 06 F1 | 	add	local06, #1
09cfc     F2 30 62 FC | 	wrlong	local06, objptr
09d00                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09d00                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09d00     13 00 00 FF 
09d04     38 E4 85 F1 | 	sub	objptr, ##9784
09d08     F2 14 02 FB | 	rdlong	arg02, objptr
09d0c     01 14 06 F1 | 	add	arg02, #1
09d10     03 14 66 F0 | 	shl	arg02, #3
09d14     02 00 00 FF 
09d18     38 E4 85 F1 | 	sub	objptr, ##1080
09d1c     F2 14 02 F1 | 	add	arg02, objptr
09d20     0A 13 02 FB | 	rdlong	arg01, arg02
09d24     35 00 00 FF 
09d28     2C E4 85 F1 | 	sub	objptr, ##27180
09d2c                 | ' 
09d2c                 | ' select case s
09d2c     8E 01 00 FF 
09d30     5A 15 06 F6 | 	mov	arg02, ##@LR__5239
09d34     98 B3 B1 FD | 	call	#__system___string_cmp
09d38     00 FA 0D F2 | 	cmp	result1, #0 wz
09d3c     1B FA 05 A6 |  if_e	mov	result1, #27
09d40     00 FA 05 56 |  if_ne	mov	result1, #0
09d44     00 FA 0D F2 | 	cmp	result1, #0 wz
09d48     10 00 90 AD |  if_e	jmp	#LR__0840
09d4c     05 12 06 F6 | 	mov	arg01, #5
09d50     30 E4 BF FD | 	call	#_compile_immediate_assign
09d54     FD 36 02 F6 | 	mov	local09, result1
09d58     10 00 90 FD | 	jmp	#LR__0841
09d5c                 | LR__0840
09d5c     05 12 06 F6 | 	mov	arg01, #5
09d60     16 15 02 F6 | 	mov	arg02, local04
09d64     38 DA BF FD | 	call	#_compile_immediate
09d68     FD 36 02 F6 | 	mov	local09, result1
09d6c                 | LR__0841
09d6c                 | ' return err
09d6c     1B FB 01 F6 | 	mov	result1, local09
09d70                 | LR__0842
09d70     A7 F0 03 F6 | 	mov	ptra, fp
09d74     B2 00 A0 FD | 	call	#popregs_
09d78                 | _compile_if_ret
09d78     2D 00 64 FD | 	ret
09d7c                 | 
09d7c                 | ' 
09d7c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d7c                 | ' 
09d7c                 | ' function compile_else(aline as ulong) as ulong  
09d7c                 | _compile_else
09d7c     07 4A 05 F6 | 	mov	COUNT_, #7
09d80     A8 00 A0 FD | 	call	#pushregs_
09d84                 | _compile_else_enter
09d84     09 2D 02 F6 | 	mov	local04, arg01
09d88     5A 2A 06 F6 | 	mov	local03, #90
09d8c     13 2F 02 F6 | 	mov	local05, local01
09d90     14 31 02 F6 | 	mov	local06, local02
09d94     15 27 02 F6 | 	mov	local01, local03
09d98     4A 00 00 FF 
09d9c     9C E4 05 F1 | 	add	objptr, ##38044
09da0     F2 14 02 FB | 	rdlong	arg02, objptr
09da4     0A 13 02 F6 | 	mov	arg01, arg02
09da8     01 12 66 F0 | 	shl	arg01, #1
09dac     0A 13 02 F1 | 	add	arg01, arg02
09db0     02 12 66 F0 | 	shl	arg01, #2
09db4     03 00 00 FF 
09db8     00 E4 85 F1 | 	sub	objptr, ##1536
09dbc     F2 12 02 F1 | 	add	arg01, objptr
09dc0     09 2F 62 FC | 	wrlong	local05, arg01
09dc4     03 00 00 FF 
09dc8     00 E4 05 F1 | 	add	objptr, ##1536
09dcc     F2 2E 02 FB | 	rdlong	local05, objptr
09dd0     17 15 02 F6 | 	mov	arg02, local05
09dd4     01 14 66 F0 | 	shl	arg02, #1
09dd8     17 15 02 F1 | 	add	arg02, local05
09ddc     02 14 66 F0 | 	shl	arg02, #2
09de0     03 00 00 FF 
09de4     00 E4 85 F1 | 	sub	objptr, ##1536
09de8     F2 14 02 F1 | 	add	arg02, objptr
09dec     04 14 06 F1 | 	add	arg02, #4
09df0     0A 31 62 FC | 	wrlong	local06, arg02
09df4     03 00 00 FF 
09df8     00 E4 05 F1 | 	add	objptr, ##1536
09dfc     F2 30 02 FB | 	rdlong	local06, objptr
09e00     18 2F 02 F6 | 	mov	local05, local06
09e04     01 2E 66 F0 | 	shl	local05, #1
09e08     18 2F 02 F1 | 	add	local05, local06
09e0c     02 2E 66 F0 | 	shl	local05, #2
09e10     03 00 00 FF 
09e14     00 E4 85 F1 | 	sub	objptr, ##1536
09e18     F2 2E 02 F1 | 	add	local05, objptr
09e1c     08 2E 06 F1 | 	add	local05, #8
09e20     17 27 62 FC | 	wrlong	local01, local05
09e24     03 00 00 FF 
09e28     00 E4 05 F1 | 	add	objptr, ##1536
09e2c     F2 2E 02 FB | 	rdlong	local05, objptr
09e30     01 2E 06 F1 | 	add	local05, #1
09e34     F2 2E 62 FC | 	wrlong	local05, objptr
09e38                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09e38                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e38     13 00 00 FF 
09e3c     38 E4 85 F1 | 	sub	objptr, ##9784
09e40     F2 30 02 FB | 	rdlong	local06, objptr
09e44     01 30 06 F1 | 	add	local06, #1
09e48     03 30 66 F0 | 	shl	local06, #3
09e4c     02 00 00 FF 
09e50     38 E4 85 F1 | 	sub	objptr, ##1080
09e54     F2 30 02 F1 | 	add	local06, objptr
09e58     18 13 02 FB | 	rdlong	arg01, local06
09e5c     35 00 00 FF 
09e60     2C E4 85 F1 | 	sub	objptr, ##27180
09e64                 | ' 
09e64                 | ' select case s
09e64     8E 01 00 FF 
09e68     5A 15 06 F6 | 	mov	arg02, ##@LR__5239
09e6c     60 B2 B1 FD | 	call	#__system___string_cmp
09e70     00 FA 0D F2 | 	cmp	result1, #0 wz
09e74     1B FA 05 A6 |  if_e	mov	result1, #27
09e78     00 FA 05 56 |  if_ne	mov	result1, #0
09e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e80     10 00 90 AD |  if_e	jmp	#LR__0850
09e84     05 12 06 F6 | 	mov	arg01, #5
09e88     F8 E2 BF FD | 	call	#_compile_immediate_assign
09e8c     FD 32 02 F6 | 	mov	local07, result1
09e90     10 00 90 FD | 	jmp	#LR__0851
09e94                 | LR__0850
09e94     05 12 06 F6 | 	mov	arg01, #5
09e98     16 15 02 F6 | 	mov	arg02, local04
09e9c     00 D9 BF FD | 	call	#_compile_immediate
09ea0     FD 32 02 F6 | 	mov	local07, result1
09ea4                 | LR__0851
09ea4                 | ' return err
09ea4     19 FB 01 F6 | 	mov	result1, local07
09ea8     A7 F0 03 F6 | 	mov	ptra, fp
09eac     B2 00 A0 FD | 	call	#popregs_
09eb0                 | _compile_else_ret
09eb0     2D 00 64 FD | 	ret
09eb4                 | 
09eb4                 | ' 
09eb4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09eb4                 | ' 
09eb4                 | ' function compile_dim() as ulong  
09eb4                 | _compile_dim
09eb4     11 4A 05 F6 | 	mov	COUNT_, #17
09eb8     A8 00 A0 FD | 	call	#pushregs_
09ebc     01 26 06 F6 | 	mov	local01, #1
09ec0     01 28 06 F6 | 	mov	local02, #1
09ec4     01 2A 06 F6 | 	mov	local03, #1
09ec8                 | ' 
09ec8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ec8                 | ' if isname(lparts(ct).part$) then 
09ec8     37 00 00 FF 
09ecc     64 E4 05 F1 | 	add	objptr, ##28260
09ed0     F2 18 02 FB | 	rdlong	arg04, objptr
09ed4     03 18 66 F0 | 	shl	arg04, #3
09ed8     02 00 00 FF 
09edc     38 E4 85 F1 | 	sub	objptr, ##1080
09ee0     F2 18 02 F1 | 	add	arg04, objptr
09ee4     0C 13 02 FB | 	rdlong	arg01, arg04
09ee8     35 00 00 FF 
09eec     2C E4 85 F1 | 	sub	objptr, ##27180
09ef0     AC C7 BF FD | 	call	#_isname
09ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
09ef8     58 05 90 AD |  if_e	jmp	#LR__0883
09efc     37 00 00 FF 
09f00     64 E4 05 F1 | 	add	objptr, ##28260
09f04     F2 2C 02 FB | 	rdlong	local04, objptr
09f08     03 2C 66 F0 | 	shl	local04, #3
09f0c     02 00 00 FF 
09f10     38 E4 85 F1 | 	sub	objptr, ##1080
09f14     F2 2C 02 F1 | 	add	local04, objptr
09f18     16 2F 02 FB | 	rdlong	local05, local04
09f1c     01 30 66 F6 | 	neg	local06, #1
09f20                 | '   varname2$=lparts(ct).part$ 
09f20                 | '   j=-1
09f20                 | '   if varnum>0 then
09f20     04 E4 85 F1 | 	sub	objptr, #4
09f24     F2 32 02 FB | 	rdlong	local07, objptr
09f28     35 00 00 FF 
09f2c     28 E4 85 F1 | 	sub	objptr, ##27176
09f30     01 32 56 F2 | 	cmps	local07, #1 wc
09f34     54 00 90 CD |  if_b	jmp	#LR__0862
09f38                 | '     for i=0 to varnum-1
09f38     00 34 06 F6 | 	mov	local08, #0
09f3c     35 00 00 FF 
09f40     28 E4 05 F1 | 	add	objptr, ##27176
09f44     F2 36 02 FB | 	rdlong	local09, objptr
09f48     35 00 00 FF 
09f4c     28 E4 85 F1 | 	sub	objptr, ##27176
09f50                 | LR__0860
09f50     1B 35 52 F2 | 	cmps	local08, local09 wc
09f54     34 00 90 3D |  if_ae	jmp	#LR__0861
09f58                 | '       if variables(i).name=varname2$ then j=i : exit
09f58     1A 2D 02 F6 | 	mov	local04, local08
09f5c     04 2C 66 F0 | 	shl	local04, #4
09f60     F2 14 02 F6 | 	mov	arg02, objptr
09f64     15 00 00 FF 
09f68     18 14 06 F1 | 	add	arg02, ##10776
09f6c     0A 2D 02 F1 | 	add	local04, arg02
09f70     16 13 02 FB | 	rdlong	arg01, local04
09f74     17 15 02 F6 | 	mov	arg02, local05
09f78     54 B1 B1 FD | 	call	#__system___string_cmp
09f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f80     1A 31 02 A6 |  if_e	mov	local06, local08
09f84     01 34 06 51 |  if_ne	add	local08, #1
09f88     C4 FF 9F 5D |  if_ne	jmp	#LR__0860
09f8c                 | LR__0861
09f8c                 | LR__0862
09f8c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09f8c     FF FF 7F FF 
09f90     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09f94     35 00 00 AF 
09f98     28 E4 05 A1 |  if_e	add	objptr, ##27176
09f9c     F2 30 02 AB |  if_e	rdlong	local06, objptr
09fa0     35 00 00 AF 
09fa4     28 E4 85 A1 |  if_e	sub	objptr, ##27176
09fa8     78 00 90 AD |  if_e	jmp	#LR__0863
09fac     00 12 06 F6 | 	mov	arg01, #0
09fb0     E0 FB B1 FD | 	call	#__system___getiolock_0622
09fb4     FD 12 02 F6 | 	mov	arg01, result1
09fb8     EC B0 B1 FD | 	call	#__system___lockmem
09fbc     91 01 00 FF 
09fc0     67 14 06 F6 | 	mov	arg02, ##@LR__5511
09fc4     00 12 06 F6 | 	mov	arg01, #0
09fc8     00 16 06 F6 | 	mov	arg03, #0
09fcc     F8 B8 B1 FD | 	call	#__system___basic_print_string
09fd0     52 00 00 FF 
09fd4     08 E5 05 F1 | 	add	objptr, ##42248
09fd8     F2 14 02 FB | 	rdlong	arg02, objptr
09fdc     52 00 00 FF 
09fe0     08 E5 85 F1 | 	sub	objptr, ##42248
09fe4     00 12 06 F6 | 	mov	arg01, #0
09fe8     00 16 06 F6 | 	mov	arg03, #0
09fec     0A 18 06 F6 | 	mov	arg04, #10
09ff0     58 B9 B1 FD | 	call	#__system___basic_print_unsigned
09ff4     91 01 00 FF 
09ff8     75 14 06 F6 | 	mov	arg02, ##@LR__5512
09ffc     00 12 06 F6 | 	mov	arg01, #0
0a000     00 16 06 F6 | 	mov	arg03, #0
0a004     C0 B8 B1 FD | 	call	#__system___basic_print_string
0a008     00 12 06 F6 | 	mov	arg01, #0
0a00c     0A 14 06 F6 | 	mov	arg02, #10
0a010     00 16 06 F6 | 	mov	arg03, #0
0a014     58 B8 B1 FD | 	call	#__system___basic_print_char
0a018     00 12 06 F6 | 	mov	arg01, #0
0a01c     74 FB B1 FD | 	call	#__system___getiolock_0622
0a020     FD 00 68 FC | 	wrlong	#0, result1
0a024                 | LR__0863
0a024                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a024     37 00 00 FF 
0a028     64 E4 05 F1 | 	add	objptr, ##28260
0a02c     F2 14 02 FB | 	rdlong	arg02, objptr
0a030     01 14 06 F1 | 	add	arg02, #1
0a034     03 14 66 F0 | 	shl	arg02, #3
0a038     02 00 00 FF 
0a03c     38 E4 85 F1 | 	sub	objptr, ##1080
0a040     F2 14 02 F1 | 	add	arg02, objptr
0a044     0A 13 02 FB | 	rdlong	arg01, arg02
0a048     91 01 00 FF 
0a04c     96 14 06 F6 | 	mov	arg02, ##@LR__5513
0a050     35 00 00 FF 
0a054     2C E4 85 F1 | 	sub	objptr, ##27180
0a058     74 B0 B1 FD | 	call	#__system___string_cmp
0a05c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a060     44 00 90 AD |  if_e	jmp	#LR__0864
0a064     37 00 00 FF 
0a068     64 E4 05 F1 | 	add	objptr, ##28260
0a06c     F2 36 02 FB | 	rdlong	local09, objptr
0a070     01 36 06 F1 | 	add	local09, #1
0a074     03 36 66 F0 | 	shl	local09, #3
0a078     02 00 00 FF 
0a07c     38 E4 85 F1 | 	sub	objptr, ##1080
0a080     F2 36 02 F1 | 	add	local09, objptr
0a084     1B 13 02 FB | 	rdlong	arg01, local09
0a088     91 01 00 FF 
0a08c     98 14 06 F6 | 	mov	arg02, ##@LR__5514
0a090     35 00 00 FF 
0a094     2C E4 85 F1 | 	sub	objptr, ##27180
0a098     34 B0 B1 FD | 	call	#__system___string_cmp
0a09c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0a0     2B FA 05 56 |  if_ne	mov	result1, #43
0a0a4     B4 04 90 5D |  if_ne	jmp	#LR__0885
0a0a8                 | LR__0864
0a0a8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a0a8     37 00 00 FF 
0a0ac     64 E4 05 F1 | 	add	objptr, ##28260
0a0b0     F2 14 02 FB | 	rdlong	arg02, objptr
0a0b4     01 14 06 F1 | 	add	arg02, #1
0a0b8     03 14 66 F0 | 	shl	arg02, #3
0a0bc     02 00 00 FF 
0a0c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a0c4     F2 14 02 F1 | 	add	arg02, objptr
0a0c8     0A 13 02 FB | 	rdlong	arg01, arg02
0a0cc     91 01 00 FF 
0a0d0     9B 14 06 F6 | 	mov	arg02, ##@LR__5515
0a0d4     35 00 00 FF 
0a0d8     2C E4 85 F1 | 	sub	objptr, ##27180
0a0dc     F0 AF B1 FD | 	call	#__system___string_cmp
0a0e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0e4     37 00 00 AF 
0a0e8     64 E4 05 A1 |  if_e	add	objptr, ##28260
0a0ec     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a0f0     37 00 00 AF 
0a0f4     64 E4 85 A1 |  if_e	sub	objptr, ##28260
0a0f8     01 38 06 A1 |  if_e	add	local10, #1
0a0fc     48 01 90 AD |  if_e	jmp	#LR__0869
0a100     37 00 00 FF 
0a104     64 E4 05 F1 | 	add	objptr, ##28260
0a108     F2 38 02 FB | 	rdlong	local10, objptr
0a10c     37 00 00 FF 
0a110     64 E4 85 F1 | 	sub	objptr, ##28260
0a114     02 38 06 F1 | 	add	local10, #2
0a118     00 3A 06 F6 | 	mov	local11, #0
0a11c                 | '   l=ct+2 : m=0 : do
0a11c                 | LR__0865
0a11c                 | '   if isdec(lparts(l).part$) then 
0a11c     1C 2D 02 F6 | 	mov	local04, local10
0a120     03 2C 66 F0 | 	shl	local04, #3
0a124     F2 36 02 F6 | 	mov	local09, objptr
0a128     35 00 00 FF 
0a12c     2C 36 06 F1 | 	add	local09, ##27180
0a130     1B 2D 02 F1 | 	add	local04, local09
0a134     16 13 02 FB | 	rdlong	arg01, local04
0a138     68 CE BF FD | 	call	#_isdec
0a13c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a140     40 00 90 AD |  if_e	jmp	#LR__0866
0a144     1D 3D 02 F6 | 	mov	local12, local11
0a148     13 3D 06 F1 | 	add	local12, #local01
0a14c     1C 37 02 F6 | 	mov	local09, local10
0a150     03 36 66 F0 | 	shl	local09, #3
0a154     F2 34 02 F6 | 	mov	local08, objptr
0a158     35 00 00 FF 
0a15c     2C 34 06 F1 | 	add	local08, ##27180
0a160     1A 37 02 F1 | 	add	local09, local08
0a164     1B 13 02 FB | 	rdlong	arg01, local09
0a168     00 14 06 F6 | 	mov	arg02, #0
0a16c     30 D4 B1 FD | 	call	#__system____builtin_atoi
0a170     FD 3E 02 F6 | 	mov	local13, result1
0a174                 | 	'.live	local13
0a174                 | 	'.live	local12
0a174     00 3C 8E F9 | 	altd	local12, #0
0a178     1F 3D 02 F6 | 	mov	local12, local13
0a17c     01 3A 06 F1 | 	add	local11, #1
0a180     08 00 90 FD | 	jmp	#LR__0867
0a184                 | LR__0866
0a184                 | '     return(17)
0a184     11 FA 05 F6 | 	mov	result1, #17
0a188     D0 03 90 FD | 	jmp	#LR__0885
0a18c                 | LR__0867
0a18c                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a18c     1C 2D 02 F6 | 	mov	local04, local10
0a190     01 2C 06 F1 | 	add	local04, #1
0a194     03 2C 66 F0 | 	shl	local04, #3
0a198     F2 3E 02 F6 | 	mov	local13, objptr
0a19c     35 00 00 FF 
0a1a0     2C 3E 06 F1 | 	add	local13, ##27180
0a1a4     1F 2D 02 F1 | 	add	local04, local13
0a1a8     16 13 02 FB | 	rdlong	arg01, local04
0a1ac     91 01 00 FF 
0a1b0     9E 14 06 F6 | 	mov	arg02, ##@LR__5516
0a1b4     18 AF B1 FD | 	call	#__system___string_cmp
0a1b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1bc     38 00 90 AD |  if_e	jmp	#LR__0868
0a1c0     1C 3F 02 F6 | 	mov	local13, local10
0a1c4     01 3E 06 F1 | 	add	local13, #1
0a1c8     03 3E 66 F0 | 	shl	local13, #3
0a1cc     F2 3C 02 F6 | 	mov	local12, objptr
0a1d0     35 00 00 FF 
0a1d4     2C 3C 06 F1 | 	add	local12, ##27180
0a1d8     1E 3F 02 F1 | 	add	local13, local12
0a1dc     1F 13 02 FB | 	rdlong	arg01, local13
0a1e0     91 01 00 FF 
0a1e4     A0 14 06 F6 | 	mov	arg02, ##@LR__5517
0a1e8     E4 AE B1 FD | 	call	#__system___string_cmp
0a1ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1f0     2C FA 05 56 |  if_ne	mov	result1, #44
0a1f4     64 03 90 5D |  if_ne	jmp	#LR__0885
0a1f8                 | LR__0868
0a1f8     02 38 06 F1 | 	add	local10, #2
0a1fc     1C 2D 02 F6 | 	mov	local04, local10
0a200     01 2C 86 F1 | 	sub	local04, #1
0a204     03 2C 66 F0 | 	shl	local04, #3
0a208     F2 3E 02 F6 | 	mov	local13, objptr
0a20c     35 00 00 FF 
0a210     2C 3E 06 F1 | 	add	local13, ##27180
0a214     1F 2D 02 F1 | 	add	local04, local13
0a218     16 13 02 FB | 	rdlong	arg01, local04
0a21c     91 01 00 FF 
0a220     A2 14 06 F6 | 	mov	arg02, ##@LR__5518
0a224     A8 AE B1 FD | 	call	#__system___string_cmp
0a228     00 FA 0D F2 | 	cmp	result1, #0 wz
0a22c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a230     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0865
0a234                 | '   if m>3 then return 45
0a234     04 3A 56 F2 | 	cmps	local11, #4 wc
0a238     2D FA 05 36 |  if_ae	mov	result1, #45
0a23c     1C 03 90 3D |  if_ae	jmp	#LR__0885
0a240     00 41 06 F6 | 	mov	local14, #256
0a244     0C 42 06 F6 | 	mov	local15, #12
0a248                 | LR__0869
0a248                 | '   arraytype=array_no_type : esize=12
0a248                 | ' 1350 
0a248                 | '   if lparts(l).part$="as" then
0a248     1C 2D 02 F6 | 	mov	local04, local10
0a24c     03 2C 66 F0 | 	shl	local04, #3
0a250     F2 3E 02 F6 | 	mov	local13, objptr
0a254     35 00 00 FF 
0a258     2C 3E 06 F1 | 	add	local13, ##27180
0a25c     1F 2D 02 F1 | 	add	local04, local13
0a260     16 13 02 FB | 	rdlong	arg01, local04
0a264     91 01 00 FF 
0a268     A4 14 06 F6 | 	mov	arg02, ##@LR__5519
0a26c     60 AE B1 FD | 	call	#__system___string_cmp
0a270     00 FA 0D F2 | 	cmp	result1, #0 wz
0a274     E4 01 90 5D |  if_ne	jmp	#LR__0884
0a278                 | '     select case lparts(l+1).part$
0a278     1C 3D 02 F6 | 	mov	local12, local10
0a27c     01 3C 06 F1 | 	add	local12, #1
0a280     03 3C 66 F0 | 	shl	local12, #3
0a284     F2 2C 02 F6 | 	mov	local04, objptr
0a288     35 00 00 FF 
0a28c     2C 2C 06 F1 | 	add	local04, ##27180
0a290     16 3D 02 F1 | 	add	local12, local04
0a294     1E 45 02 FB | 	rdlong	local16, local12
0a298     91 01 00 FF 
0a29c     A7 14 06 F6 | 	mov	arg02, ##@LR__5520
0a2a0     22 13 02 F6 | 	mov	arg01, local16
0a2a4     28 AE B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     0C 01 90 AD |  if_e	jmp	#LR__0870
0a2b0     91 01 00 FF 
0a2b4     AC 14 06 F6 | 	mov	arg02, ##@LR__5521
0a2b8     22 13 02 F6 | 	mov	arg01, local16
0a2bc     10 AE B1 FD | 	call	#__system___string_cmp
0a2c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2c4     00 01 90 AD |  if_e	jmp	#LR__0871
0a2c8     91 01 00 FF 
0a2cc     B2 14 06 F6 | 	mov	arg02, ##@LR__5522
0a2d0     22 13 02 F6 | 	mov	arg01, local16
0a2d4     F8 AD B1 FD | 	call	#__system___string_cmp
0a2d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2dc     F4 00 90 AD |  if_e	jmp	#LR__0872
0a2e0     91 01 00 FF 
0a2e4     B8 14 06 F6 | 	mov	arg02, ##@LR__5523
0a2e8     22 13 02 F6 | 	mov	arg01, local16
0a2ec     E0 AD B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     E8 00 90 AD |  if_e	jmp	#LR__0873
0a2f8     91 01 00 FF 
0a2fc     BF 14 06 F6 | 	mov	arg02, ##@LR__5524
0a300     22 13 02 F6 | 	mov	arg01, local16
0a304     C8 AD B1 FD | 	call	#__system___string_cmp
0a308     00 FA 0D F2 | 	cmp	result1, #0 wz
0a30c     DC 00 90 AD |  if_e	jmp	#LR__0874
0a310     91 01 00 FF 
0a314     C4 14 06 F6 | 	mov	arg02, ##@LR__5525
0a318     22 13 02 F6 | 	mov	arg01, local16
0a31c     B0 AD B1 FD | 	call	#__system___string_cmp
0a320     00 FA 0D F2 | 	cmp	result1, #0 wz
0a324     D0 00 90 AD |  if_e	jmp	#LR__0875
0a328     91 01 00 FF 
0a32c     CC 14 06 F6 | 	mov	arg02, ##@LR__5526
0a330     22 13 02 F6 | 	mov	arg01, local16
0a334     98 AD B1 FD | 	call	#__system___string_cmp
0a338     00 FA 0D F2 | 	cmp	result1, #0 wz
0a33c     C4 00 90 AD |  if_e	jmp	#LR__0876
0a340     91 01 00 FF 
0a344     D2 14 06 F6 | 	mov	arg02, ##@LR__5527
0a348     22 13 02 F6 | 	mov	arg01, local16
0a34c     80 AD B1 FD | 	call	#__system___string_cmp
0a350     00 FA 0D F2 | 	cmp	result1, #0 wz
0a354     B8 00 90 AD |  if_e	jmp	#LR__0877
0a358     91 01 00 FF 
0a35c     D8 14 06 F6 | 	mov	arg02, ##@LR__5528
0a360     22 13 02 F6 | 	mov	arg01, local16
0a364     68 AD B1 FD | 	call	#__system___string_cmp
0a368     00 FA 0D F2 | 	cmp	result1, #0 wz
0a36c     AC 00 90 AD |  if_e	jmp	#LR__0878
0a370     91 01 00 FF 
0a374     DF 14 06 F6 | 	mov	arg02, ##@LR__5529
0a378     22 13 02 F6 | 	mov	arg01, local16
0a37c     50 AD B1 FD | 	call	#__system___string_cmp
0a380     00 FA 0D F2 | 	cmp	result1, #0 wz
0a384     A0 00 90 AD |  if_e	jmp	#LR__0879
0a388     91 01 00 FF 
0a38c     E6 14 06 F6 | 	mov	arg02, ##@LR__5530
0a390     22 13 02 F6 | 	mov	arg01, local16
0a394     38 AD B1 FD | 	call	#__system___string_cmp
0a398     00 FA 0D F2 | 	cmp	result1, #0 wz
0a39c     94 00 90 AD |  if_e	jmp	#LR__0880
0a3a0     91 01 00 FF 
0a3a4     ED 14 06 F6 | 	mov	arg02, ##@LR__5531
0a3a8     22 13 02 F6 | 	mov	arg01, local16
0a3ac     20 AD B1 FD | 	call	#__system___string_cmp
0a3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3b4     88 00 90 AD |  if_e	jmp	#LR__0881
0a3b8     90 00 90 FD | 	jmp	#LR__0882
0a3bc                 | LR__0870
0a3bc     01 41 06 F6 | 	mov	local14, #257
0a3c0     01 42 06 F6 | 	mov	local15, #1
0a3c4     94 00 90 FD | 	jmp	#LR__0884
0a3c8                 | LR__0871
0a3c8     02 41 06 F6 | 	mov	local14, #258
0a3cc     01 42 06 F6 | 	mov	local15, #1
0a3d0     88 00 90 FD | 	jmp	#LR__0884
0a3d4                 | LR__0872
0a3d4     03 41 06 F6 | 	mov	local14, #259
0a3d8     02 42 06 F6 | 	mov	local15, #2
0a3dc     7C 00 90 FD | 	jmp	#LR__0884
0a3e0                 | LR__0873
0a3e0     04 41 06 F6 | 	mov	local14, #260
0a3e4     02 42 06 F6 | 	mov	local15, #2
0a3e8     70 00 90 FD | 	jmp	#LR__0884
0a3ec                 | LR__0874
0a3ec     05 41 06 F6 | 	mov	local14, #261
0a3f0     04 42 06 F6 | 	mov	local15, #4
0a3f4     64 00 90 FD | 	jmp	#LR__0884
0a3f8                 | LR__0875
0a3f8     05 41 06 F6 | 	mov	local14, #261
0a3fc     04 42 06 F6 | 	mov	local15, #4
0a400     58 00 90 FD | 	jmp	#LR__0884
0a404                 | LR__0876
0a404     06 41 06 F6 | 	mov	local14, #262
0a408     04 42 06 F6 | 	mov	local15, #4
0a40c     4C 00 90 FD | 	jmp	#LR__0884
0a410                 | LR__0877
0a410     07 41 06 F6 | 	mov	local14, #263
0a414     08 42 06 F6 | 	mov	local15, #8
0a418     40 00 90 FD | 	jmp	#LR__0884
0a41c                 | LR__0878
0a41c     08 41 06 F6 | 	mov	local14, #264
0a420     08 42 06 F6 | 	mov	local15, #8
0a424     34 00 90 FD | 	jmp	#LR__0884
0a428                 | LR__0879
0a428     09 41 06 F6 | 	mov	local14, #265
0a42c     04 42 06 F6 | 	mov	local15, #4
0a430     28 00 90 FD | 	jmp	#LR__0884
0a434                 | LR__0880
0a434     0A 41 06 F6 | 	mov	local14, #266
0a438     08 42 06 F6 | 	mov	local15, #8
0a43c     1C 00 90 FD | 	jmp	#LR__0884
0a440                 | LR__0881
0a440     0B 41 06 F6 | 	mov	local14, #267
0a444     04 42 06 F6 | 	mov	local15, #4
0a448     10 00 90 FD | 	jmp	#LR__0884
0a44c                 | LR__0882
0a44c     2F FA 05 F6 | 	mov	result1, #47
0a450     08 01 90 FD | 	jmp	#LR__0885
0a454                 | LR__0883
0a454                 | '   return 46
0a454     2E FA 05 F6 | 	mov	result1, #46
0a458     00 01 90 FD | 	jmp	#LR__0885
0a45c                 | LR__0884
0a45c     13 43 02 FD | 	qmul	local15, local01
0a460     18 32 62 FD | 	getqx	local07
0a464     14 33 02 FD | 	qmul	local07, local02
0a468     18 44 62 FD | 	getqx	local16
0a46c     15 45 02 FD | 	qmul	local16, local03
0a470     52 00 00 FF 
0a474     F0 E4 05 F1 | 	add	objptr, ##42224
0a478     F2 46 02 FB | 	rdlong	local17, objptr
0a47c     20 15 02 F6 | 	mov	arg02, local14
0a480     18 44 62 FD | 	getqx	local16
0a484     22 47 82 F1 | 	sub	local17, local16
0a488     10 46 86 F1 | 	sub	local17, #16
0a48c     0F 46 26 F5 | 	andn	local17, #15
0a490     F2 46 62 FC | 	wrlong	local17, objptr
0a494     52 00 00 FF 
0a498     F0 E4 85 F1 | 	sub	objptr, ##42224
0a49c     23 13 02 F6 | 	mov	arg01, local17
0a4a0     60 58 B1 FD | 	call	#_psdpoke
0a4a4     23 13 02 F6 | 	mov	arg01, local17
0a4a8     02 12 06 F1 | 	add	arg01, #2
0a4ac     21 15 02 F6 | 	mov	arg02, local15
0a4b0     50 58 B1 FD | 	call	#_psdpoke
0a4b4     23 13 02 F6 | 	mov	arg01, local17
0a4b8     04 12 06 F1 | 	add	arg01, #4
0a4bc     13 15 02 F6 | 	mov	arg02, local01
0a4c0     F8 57 B1 FD | 	call	#_pslpoke
0a4c4     23 13 02 F6 | 	mov	arg01, local17
0a4c8     08 12 06 F1 | 	add	arg01, #8
0a4cc     14 15 02 F6 | 	mov	arg02, local02
0a4d0     E8 57 B1 FD | 	call	#_pslpoke
0a4d4     23 13 02 F6 | 	mov	arg01, local17
0a4d8     0C 12 06 F1 | 	add	arg01, #12
0a4dc     15 15 02 F6 | 	mov	arg02, local03
0a4e0     D8 57 B1 FD | 	call	#_pslpoke
0a4e4     18 3D 02 F6 | 	mov	local12, local06
0a4e8     04 3C 66 F0 | 	shl	local12, #4
0a4ec     15 00 00 FF 
0a4f0     18 E4 05 F1 | 	add	objptr, ##10776
0a4f4     F2 3C 02 F1 | 	add	local12, objptr
0a4f8     1E 2F 62 FC | 	wrlong	local05, local12
0a4fc     18 3D 02 F6 | 	mov	local12, local06
0a500     04 3C 66 F0 | 	shl	local12, #4
0a504     F2 3C 02 F1 | 	add	local12, objptr
0a508     04 3C 06 F1 | 	add	local12, #4
0a50c     1E 47 62 FC | 	wrlong	local17, local12
0a510     18 3D 02 F6 | 	mov	local12, local06
0a514     04 3C 66 F0 | 	shl	local12, #4
0a518     F2 3C 02 F1 | 	add	local12, objptr
0a51c     0C 3C 06 F1 | 	add	local12, #12
0a520     1E 41 62 FC | 	wrlong	local14, local12
0a524                 | ' memtop=arrayptr
0a524                 | ' psdpoke arrayptr,arraytype 
0a524                 | ' psdpoke arrayptr+2,esize 
0a524                 | ' pslpoke arrayptr+4,dims(0)
0a524                 | ' pslpoke arrayptr+8,dims(1)
0a524                 | ' pslpoke arrayptr+12,dims(2)
0a524                 | ' variables(j).name=varname2$
0a524                 | ' variables(j).value.uresult=arrayptr
0a524                 | ' variables(j).vartype=arraytype
0a524                 | ' if j=varnum then varnum+=1
0a524     20 00 00 FF 
0a528     10 E4 05 F1 | 	add	objptr, ##16400
0a52c     F2 32 02 FB | 	rdlong	local07, objptr
0a530     35 00 00 FF 
0a534     28 E4 85 F1 | 	sub	objptr, ##27176
0a538     19 31 0A F2 | 	cmp	local06, local07 wz
0a53c     35 00 00 AF 
0a540     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a544     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a548     01 32 06 A1 |  if_e	add	local07, #1
0a54c     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a550     35 00 00 AF 
0a554     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a558                 | ' return 0
0a558     00 FA 05 F6 | 	mov	result1, #0
0a55c                 | LR__0885
0a55c     A7 F0 03 F6 | 	mov	ptra, fp
0a560     B2 00 A0 FD | 	call	#popregs_
0a564                 | _compile_dim_ret
0a564     2D 00 64 FD | 	ret
0a568                 | 
0a568                 | ' 
0a568                 | ' '----- compile 'for' command. 
0a568                 | ' 
0a568                 | ' function compile_for() as ulong  
0a568                 | _compile_for
0a568     0C 4A 05 F6 | 	mov	COUNT_, #12
0a56c     A8 00 A0 FD | 	call	#pushregs_
0a570                 | ' 
0a570                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a570     37 00 00 FF 
0a574     64 E4 05 F1 | 	add	objptr, ##28260
0a578     F2 14 02 FB | 	rdlong	arg02, objptr
0a57c     01 14 06 F1 | 	add	arg02, #1
0a580     03 14 66 F0 | 	shl	arg02, #3
0a584     02 00 00 FF 
0a588     38 E4 85 F1 | 	sub	objptr, ##1080
0a58c     F2 14 02 F1 | 	add	arg02, objptr
0a590     0A 13 02 FB | 	rdlong	arg01, arg02
0a594     35 00 00 FF 
0a598     2C E4 85 F1 | 	sub	objptr, ##27180
0a59c                 | ' 
0a59c                 | ' select case s
0a59c     8E 01 00 FF 
0a5a0     5A 15 06 F6 | 	mov	arg02, ##@LR__5239
0a5a4     28 AB B1 FD | 	call	#__system___string_cmp
0a5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5ac     1B FA 05 A6 |  if_e	mov	result1, #27
0a5b0     00 FA 05 56 |  if_ne	mov	result1, #0
0a5b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5b8     0C 00 90 AD |  if_e	jmp	#LR__0890
0a5bc     05 12 06 F6 | 	mov	arg01, #5
0a5c0     C0 DB BF FD | 	call	#_compile_immediate_assign
0a5c4     08 00 90 FD | 	jmp	#LR__0891
0a5c8                 | LR__0890
0a5c8     20 FA 05 F6 | 	mov	result1, #32
0a5cc     64 08 90 FD | 	jmp	#LR__0903
0a5d0                 | LR__0891
0a5d0     4A 00 00 FF 
0a5d4     9C E4 05 F1 | 	add	objptr, ##38044
0a5d8     F2 14 02 FB | 	rdlong	arg02, objptr
0a5dc     0A 13 02 F6 | 	mov	arg01, arg02
0a5e0     01 12 86 F1 | 	sub	arg01, #1
0a5e4     09 2D 02 F6 | 	mov	local04, arg01
0a5e8     01 2C 66 F0 | 	shl	local04, #1
0a5ec     09 2D 02 F1 | 	add	local04, arg01
0a5f0     02 2C 66 F0 | 	shl	local04, #2
0a5f4     03 00 00 FF 
0a5f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a5fc     F2 2C 02 F1 | 	add	local04, objptr
0a600     16 27 02 FB | 	rdlong	local01, local04
0a604     04 2C 06 F1 | 	add	local04, #4
0a608     16 2D 02 FB | 	rdlong	local04, local04
0a60c     01 14 86 F1 | 	sub	arg02, #1
0a610     0A 13 02 F6 | 	mov	arg01, arg02
0a614     01 12 66 F0 | 	shl	arg01, #1
0a618     0A 13 02 F1 | 	add	arg01, arg02
0a61c     02 12 66 F0 | 	shl	arg01, #2
0a620     F2 12 02 F1 | 	add	arg01, objptr
0a624     08 12 06 F1 | 	add	arg01, #8
0a628     09 15 02 FB | 	rdlong	arg02, arg01
0a62c     16 29 02 F6 | 	mov	local02, local04
0a630     0A 2B 02 F6 | 	mov	local03, arg02
0a634                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a634     17 2A 0E F2 | 	cmp	local03, #23 wz
0a638     47 00 00 FF 
0a63c     9C E4 85 F1 | 	sub	objptr, ##36508
0a640     22 FA 05 56 |  if_ne	mov	result1, #34
0a644     EC 07 90 5D |  if_ne	jmp	#LR__0903
0a648     13 2F 02 F6 | 	mov	local05, local01
0a64c                 | ' varnum=t1.result.uresult
0a64c                 | ' if lparts(ct).part$<>"to" then return 33
0a64c     37 00 00 FF 
0a650     64 E4 05 F1 | 	add	objptr, ##28260
0a654     F2 26 02 FB | 	rdlong	local01, objptr
0a658     03 26 66 F0 | 	shl	local01, #3
0a65c     02 00 00 FF 
0a660     38 E4 85 F1 | 	sub	objptr, ##1080
0a664     F2 26 02 F1 | 	add	local01, objptr
0a668     13 13 02 FB | 	rdlong	arg01, local01
0a66c     91 01 00 FF 
0a670     F4 14 06 F6 | 	mov	arg02, ##@LR__5532
0a674     35 00 00 FF 
0a678     2C E4 85 F1 | 	sub	objptr, ##27180
0a67c     50 AA B1 FD | 	call	#__system___string_cmp
0a680     00 FA 0D F2 | 	cmp	result1, #0 wz
0a684     21 FA 05 56 |  if_ne	mov	result1, #33
0a688     A8 07 90 5D |  if_ne	jmp	#LR__0903
0a68c     37 00 00 FF 
0a690     64 E4 05 F1 | 	add	objptr, ##28260
0a694     F2 30 02 FB | 	rdlong	local06, objptr
0a698     01 30 06 F1 | 	add	local06, #1
0a69c     F2 30 62 FC | 	wrlong	local06, objptr
0a6a0     37 00 00 FF 
0a6a4     64 E4 85 F1 | 	sub	objptr, ##28260
0a6a8     80 16 B0 FD | 	call	#_expr
0a6ac                 | ' ct+=1
0a6ac                 | ' expr()  										' there is "to" value pushed on the stack
0a6ac                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a6ac     37 00 00 FF 
0a6b0     64 E4 05 F1 | 	add	objptr, ##28260
0a6b4     F2 2C 02 FB | 	rdlong	local04, objptr
0a6b8     03 2C 66 F0 | 	shl	local04, #3
0a6bc     02 00 00 FF 
0a6c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6c4     F2 2C 02 F1 | 	add	local04, objptr
0a6c8     16 13 02 FB | 	rdlong	arg01, local04
0a6cc     91 01 00 FF 
0a6d0     F7 14 06 F6 | 	mov	arg02, ##@LR__5533
0a6d4     35 00 00 FF 
0a6d8     2C E4 85 F1 | 	sub	objptr, ##27180
0a6dc     F0 A9 B1 FD | 	call	#__system___string_cmp
0a6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6e4     48 00 90 AD |  if_e	jmp	#LR__0892
0a6e8     37 00 00 FF 
0a6ec     64 E4 05 F1 | 	add	objptr, ##28260
0a6f0     F2 2C 02 FB | 	rdlong	local04, objptr
0a6f4     03 2C 66 F0 | 	shl	local04, #3
0a6f8     02 00 00 FF 
0a6fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a700     F2 2C 02 F1 | 	add	local04, objptr
0a704     16 13 02 FB | 	rdlong	arg01, local04
0a708     02 14 06 F6 | 	mov	arg02, #2
0a70c     35 00 00 FF 
0a710     2C E4 85 F1 | 	sub	objptr, ##27180
0a714     54 BD B1 FD | 	call	#__system__Left_S
0a718     FD 12 02 F6 | 	mov	arg01, result1
0a71c     91 01 00 FF 
0a720     FC 14 06 F6 | 	mov	arg02, ##@LR__5534
0a724     A8 A9 B1 FD | 	call	#__system___string_cmp
0a728     00 FA 0D F2 | 	cmp	result1, #0 wz
0a72c     AC 05 90 5D |  if_ne	jmp	#LR__0901
0a730                 | LR__0892
0a730                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a730     37 00 00 FF 
0a734     64 E4 05 F1 | 	add	objptr, ##28260
0a738     F2 26 02 FB | 	rdlong	local01, objptr
0a73c     03 26 66 F0 | 	shl	local01, #3
0a740     02 00 00 FF 
0a744     38 E4 85 F1 | 	sub	objptr, ##1080
0a748     F2 26 02 F1 | 	add	local01, objptr
0a74c     13 13 02 FB | 	rdlong	arg01, local01
0a750     02 14 06 F6 | 	mov	arg02, #2
0a754     35 00 00 FF 
0a758     2C E4 85 F1 | 	sub	objptr, ##27180
0a75c     0C BD B1 FD | 	call	#__system__Left_S
0a760     FD 12 02 F6 | 	mov	arg01, result1
0a764     91 01 00 FF 
0a768     FF 14 06 F6 | 	mov	arg02, ##@LR__5535
0a76c     60 A9 B1 FD | 	call	#__system___string_cmp
0a770     00 FA 0D F2 | 	cmp	result1, #0 wz
0a774     40 05 90 5D |  if_ne	jmp	#LR__0900
0a778     37 00 00 FF 
0a77c     64 E4 05 F1 | 	add	objptr, ##28260
0a780     F2 2C 02 FB | 	rdlong	local04, objptr
0a784     03 2C 66 F0 | 	shl	local04, #3
0a788     02 00 00 FF 
0a78c     38 E4 85 F1 | 	sub	objptr, ##1080
0a790     F2 2C 02 F1 | 	add	local04, objptr
0a794     16 13 02 FB | 	rdlong	arg01, local04
0a798     35 00 00 FF 
0a79c     2C E4 85 F1 | 	sub	objptr, ##27180
0a7a0     09 33 02 F6 | 	mov	local07, arg01
0a7a4     97 06 48 FB | 	callpa	#(@LR__0894-@LR__0893)>>2,fcache_load_ptr_
0a7a8                 | LR__0893
0a7a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
0a7ac     01 32 06 51 |  if_ne	add	local07, #1
0a7b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0893
0a7b4                 | LR__0894
0a7b4     09 33 82 F1 | 	sub	local07, arg01
0a7b8     03 32 56 F2 | 	cmps	local07, #3 wc
0a7bc     F8 04 90 CD |  if_b	jmp	#LR__0900
0a7c0     37 00 00 FF 
0a7c4     64 E4 05 F1 | 	add	objptr, ##28260
0a7c8     F2 26 02 FB | 	rdlong	local01, objptr
0a7cc     13 35 02 F6 | 	mov	local08, local01
0a7d0     03 34 66 F0 | 	shl	local08, #3
0a7d4     02 00 00 FF 
0a7d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7dc     F2 34 02 F1 | 	add	local08, objptr
0a7e0     03 26 66 F0 | 	shl	local01, #3
0a7e4     F2 26 02 F1 | 	add	local01, objptr
0a7e8     13 2D 02 FB | 	rdlong	local04, local01
0a7ec     02 00 00 FF 
0a7f0     38 E4 05 F1 | 	add	objptr, ##1080
0a7f4     F2 14 02 FB | 	rdlong	arg02, objptr
0a7f8     03 14 66 F0 | 	shl	arg02, #3
0a7fc     02 00 00 FF 
0a800     38 E4 85 F1 | 	sub	objptr, ##1080
0a804     F2 14 02 F1 | 	add	arg02, objptr
0a808     0A 13 02 FB | 	rdlong	arg01, arg02
0a80c     35 00 00 FF 
0a810     2C E4 85 F1 | 	sub	objptr, ##27180
0a814     09 33 02 F6 | 	mov	local07, arg01
0a818     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a81c                 | LR__0895
0a81c     19 FB C9 FA | 	rdbyte	result1, local07 wz
0a820     01 32 06 51 |  if_ne	add	local07, #1
0a824     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a828                 | LR__0896
0a828     09 33 82 F1 | 	sub	local07, arg01
0a82c     19 15 02 F6 | 	mov	arg02, local07
0a830     02 14 86 F1 | 	sub	arg02, #2
0a834     16 13 02 F6 | 	mov	arg01, local04
0a838     B8 BC B1 FD | 	call	#__system__Right_S
0a83c     1A FB 61 FC | 	wrlong	result1, local08
0a840     37 00 00 FF 
0a844     64 E4 05 F1 | 	add	objptr, ##28260
0a848     F2 2C 02 FB | 	rdlong	local04, objptr
0a84c     16 35 02 F6 | 	mov	local08, local04
0a850     03 34 66 F0 | 	shl	local08, #3
0a854     02 00 00 FF 
0a858     38 E4 85 F1 | 	sub	objptr, ##1080
0a85c     F2 34 02 F1 | 	add	local08, objptr
0a860     03 2C 66 F0 | 	shl	local04, #3
0a864     F2 2C 02 F1 | 	add	local04, objptr
0a868     16 13 02 FB | 	rdlong	arg01, local04
0a86c     35 00 00 FF 
0a870     2C E4 85 F1 | 	sub	objptr, ##27180
0a874     08 B6 BF FD | 	call	#_isfunction
0a878     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a87c     04 34 06 F1 | 	add	local08, #4
0a880     1A FB 61 FC | 	wrlong	result1, local08
0a884                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a884     37 00 00 FF 
0a888     64 E4 05 F1 | 	add	objptr, ##28260
0a88c     F2 34 02 FB | 	rdlong	local08, objptr
0a890     03 34 66 F0 | 	shl	local08, #3
0a894     02 00 00 FF 
0a898     38 E4 85 F1 | 	sub	objptr, ##1080
0a89c     F2 34 02 F1 | 	add	local08, objptr
0a8a0     04 34 06 F1 | 	add	local08, #4
0a8a4     1A 2D 02 FB | 	rdlong	local04, local08
0a8a8     01 2C 56 F2 | 	cmps	local04, #1 wc
0a8ac     35 00 00 FF 
0a8b0     2C E4 85 F1 | 	sub	objptr, ##27180
0a8b4     E4 03 90 3D |  if_ae	jmp	#LR__0899
0a8b8     37 00 00 FF 
0a8bc     64 E4 05 F1 | 	add	objptr, ##28260
0a8c0     F2 2C 02 FB | 	rdlong	local04, objptr
0a8c4     16 35 02 F6 | 	mov	local08, local04
0a8c8     03 34 66 F0 | 	shl	local08, #3
0a8cc     02 00 00 FF 
0a8d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8d4     F2 34 02 F1 | 	add	local08, objptr
0a8d8     03 2C 66 F0 | 	shl	local04, #3
0a8dc     F2 2C 02 F1 | 	add	local04, objptr
0a8e0     16 13 02 FB | 	rdlong	arg01, local04
0a8e4     35 00 00 FF 
0a8e8     2C E4 85 F1 | 	sub	objptr, ##27180
0a8ec     64 9E BF FD | 	call	#_isnotename
0a8f0     04 34 06 F1 | 	add	local08, #4
0a8f4     1A FB 61 FC | 	wrlong	result1, local08
0a8f8                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a8f8                 | '     if lparts(ct).token>0 then 
0a8f8     37 00 00 FF 
0a8fc     64 E4 05 F1 | 	add	objptr, ##28260
0a900     F2 34 02 FB | 	rdlong	local08, objptr
0a904     03 34 66 F0 | 	shl	local08, #3
0a908     02 00 00 FF 
0a90c     38 E4 85 F1 | 	sub	objptr, ##1080
0a910     F2 34 02 F1 | 	add	local08, objptr
0a914     04 34 06 F1 | 	add	local08, #4
0a918     1A 2D 02 FB | 	rdlong	local04, local08
0a91c     01 2C 56 F2 | 	cmps	local04, #1 wc
0a920     35 00 00 FF 
0a924     2C E4 85 F1 | 	sub	objptr, ##27180
0a928     94 00 90 CD |  if_b	jmp	#LR__0897
0a92c     37 00 00 FF 
0a930     64 E4 05 F1 | 	add	objptr, ##28260
0a934     F2 34 02 FB | 	rdlong	local08, objptr
0a938     03 34 66 F0 | 	shl	local08, #3
0a93c     02 00 00 FF 
0a940     38 E4 85 F1 | 	sub	objptr, ##1080
0a944     F2 34 02 F1 | 	add	local08, objptr
0a948     04 34 06 F1 | 	add	local08, #4
0a94c     1A 13 02 FB | 	rdlong	arg01, local08
0a950     35 00 00 FF 
0a954     2C E4 85 F1 | 	sub	objptr, ##27180
0a958     6C C7 BF FD | 	call	#_getnoteval
0a95c     FD 12 02 F6 | 	mov	arg01, result1
0a960     37 00 00 FF 
0a964     64 E4 05 F1 | 	add	objptr, ##28260
0a968     F2 34 02 FB | 	rdlong	local08, objptr
0a96c     03 34 66 F0 | 	shl	local08, #3
0a970     02 00 00 FF 
0a974     38 E4 85 F1 | 	sub	objptr, ##1080
0a978     F2 34 02 F1 | 	add	local08, objptr
0a97c     35 00 00 FF 
0a980     2C E4 85 F1 | 	sub	objptr, ##27180
0a984     D8 BC B1 FD | 	call	#__system__str_S
0a988     1A FB 61 FC | 	wrlong	result1, local08
0a98c     37 00 00 FF 
0a990     64 E4 05 F1 | 	add	objptr, ##28260
0a994     F2 34 02 FB | 	rdlong	local08, objptr
0a998     03 34 66 F0 | 	shl	local08, #3
0a99c     02 00 00 FF 
0a9a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a9a4     F2 34 02 F1 | 	add	local08, objptr
0a9a8     04 34 06 F1 | 	add	local08, #4
0a9ac     01 00 80 FF 
0a9b0     1A 05 68 FC | 	wrlong	##514, local08
0a9b4     35 00 00 FF 
0a9b8     2C E4 85 F1 | 	sub	objptr, ##27180
0a9bc     DC 02 90 FD | 	jmp	#LR__0899
0a9c0                 | LR__0897
0a9c0     37 00 00 FF 
0a9c4     64 E4 05 F1 | 	add	objptr, ##28260
0a9c8     F2 26 02 FB | 	rdlong	local01, objptr
0a9cc     13 35 02 F6 | 	mov	local08, local01
0a9d0     03 34 66 F0 | 	shl	local08, #3
0a9d4     02 00 00 FF 
0a9d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9dc     F2 34 02 F1 | 	add	local08, objptr
0a9e0     03 26 66 F0 | 	shl	local01, #3
0a9e4     F2 26 02 F1 | 	add	local01, objptr
0a9e8     13 13 02 FB | 	rdlong	arg01, local01
0a9ec     35 00 00 FF 
0a9f0     2C E4 85 F1 | 	sub	objptr, ##27180
0a9f4     DC 9C BF FD | 	call	#_isconstant
0a9f8     04 34 06 F1 | 	add	local08, #4
0a9fc     1A FB 61 FC | 	wrlong	result1, local08
0aa00                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0aa00     37 00 00 FF 
0aa04     64 E4 05 F1 | 	add	objptr, ##28260
0aa08     F2 34 02 FB | 	rdlong	local08, objptr
0aa0c     03 34 66 F0 | 	shl	local08, #3
0aa10     02 00 00 FF 
0aa14     38 E4 85 F1 | 	sub	objptr, ##1080
0aa18     F2 36 02 F6 | 	mov	local09, objptr
0aa1c     F2 34 02 F1 | 	add	local08, objptr
0aa20     04 34 06 F1 | 	add	local08, #4
0aa24     1A 2D 02 FB | 	rdlong	local04, local08
0aa28     01 2C 56 F2 | 	cmps	local04, #1 wc
0aa2c     35 00 00 FF 
0aa30     2C E4 85 F1 | 	sub	objptr, ##27180
0aa34     8C 00 90 CD |  if_b	jmp	#LR__0898
0aa38     37 00 00 FF 
0aa3c     64 E4 05 F1 | 	add	objptr, ##28260
0aa40     F2 36 02 FB | 	rdlong	local09, objptr
0aa44     1B 35 02 F6 | 	mov	local08, local09
0aa48     03 34 66 F0 | 	shl	local08, #3
0aa4c     02 00 00 FF 
0aa50     38 E4 85 F1 | 	sub	objptr, ##1080
0aa54     F2 34 02 F1 | 	add	local08, objptr
0aa58     03 36 66 F0 | 	shl	local09, #3
0aa5c     F2 36 02 F1 | 	add	local09, objptr
0aa60     04 36 06 F1 | 	add	local09, #4
0aa64     1B 13 02 FB | 	rdlong	arg01, local09
0aa68     35 00 00 FF 
0aa6c     2C E4 85 F1 | 	sub	objptr, ##27180
0aa70     09 13 52 F6 | 	abs	arg01, arg01 wc
0aa74     1F 38 C6 C9 |  if_b	decod	local10, #31
0aa78     00 38 06 36 |  if_ae	mov	local10, #0
0aa7c     F4 C0 B1 FD | 	call	#__system___float_fromuns
0aa80     1C FB 61 F5 | 	xor	result1, local10
0aa84     FD 12 02 F6 | 	mov	arg01, result1
0aa88     D4 BB B1 FD | 	call	#__system__str_S
0aa8c     1A FB 61 FC | 	wrlong	result1, local08
0aa90     37 00 00 FF 
0aa94     64 E4 05 F1 | 	add	objptr, ##28260
0aa98     F2 34 02 FB | 	rdlong	local08, objptr
0aa9c     03 34 66 F0 | 	shl	local08, #3
0aaa0     02 00 00 FF 
0aaa4     38 E4 85 F1 | 	sub	objptr, ##1080
0aaa8     F2 34 02 F1 | 	add	local08, objptr
0aaac     04 34 06 F1 | 	add	local08, #4
0aab0     01 00 80 FF 
0aab4     1A 03 68 FC | 	wrlong	##513, local08
0aab8     35 00 00 FF 
0aabc     2C E4 85 F1 | 	sub	objptr, ##27180
0aac0     D8 01 90 FD | 	jmp	#LR__0899
0aac4                 | LR__0898
0aac4     37 00 00 FF 
0aac8     64 E4 05 F1 | 	add	objptr, ##28260
0aacc     F2 2C 02 FB | 	rdlong	local04, objptr
0aad0     03 2C 66 F0 | 	shl	local04, #3
0aad4     02 00 00 FF 
0aad8     38 E4 85 F1 | 	sub	objptr, ##1080
0aadc     F2 2C 02 F1 | 	add	local04, objptr
0aae0     16 13 02 FB | 	rdlong	arg01, local04
0aae4     35 00 00 FF 
0aae8     2C E4 85 F1 | 	sub	objptr, ##27180
0aaec     24 BE BF FD | 	call	#_isnum
0aaf0     FD 26 02 F6 | 	mov	local01, result1
0aaf4     07 26 66 F7 | 	signx	local01, #7
0aaf8     37 00 00 FF 
0aafc     64 E4 05 F1 | 	add	objptr, ##28260
0ab00     F2 2C 02 FB | 	rdlong	local04, objptr
0ab04     03 2C 66 F0 | 	shl	local04, #3
0ab08     02 00 00 FF 
0ab0c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab10     F2 2C 02 F1 | 	add	local04, objptr
0ab14     16 13 02 FB | 	rdlong	arg01, local04
0ab18     35 00 00 FF 
0ab1c     2C E4 85 F1 | 	sub	objptr, ##27180
0ab20     DC C1 BF FD | 	call	#_isint
0ab24     FD 3A 02 F6 | 	mov	local11, result1
0ab28     07 3A 66 F7 | 	signx	local11, #7
0ab2c     37 00 00 FF 
0ab30     64 E4 05 F1 | 	add	objptr, ##28260
0ab34     F2 2C 02 FB | 	rdlong	local04, objptr
0ab38     03 2C 66 F0 | 	shl	local04, #3
0ab3c     02 00 00 FF 
0ab40     38 E4 85 F1 | 	sub	objptr, ##1080
0ab44     F2 2C 02 F1 | 	add	local04, objptr
0ab48     16 13 02 FB | 	rdlong	arg01, local04
0ab4c     35 00 00 FF 
0ab50     2C E4 85 F1 | 	sub	objptr, ##27180
0ab54     4C C4 BF FD | 	call	#_isdec
0ab58     07 FA 65 F7 | 	signx	result1, #7
0ab5c     FD 3C 02 F6 | 	mov	local12, result1
0ab60                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ab60                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ab60     00 26 0E F2 | 	cmp	local01, #0 wz
0ab64     00 3A 0E 52 |  if_ne	cmp	local11, #0 wz
0ab68     00 3C 0E 52 |  if_ne	cmp	local12, #0 wz
0ab6c     37 00 00 5F 
0ab70     64 E4 05 51 |  if_ne	add	objptr, ##28260
0ab74     F2 34 02 5B |  if_ne	rdlong	local08, objptr
0ab78     03 34 66 50 |  if_ne	shl	local08, #3
0ab7c     02 00 00 5F 
0ab80     38 E4 85 51 |  if_ne	sub	objptr, ##1080
0ab84     F2 36 02 56 |  if_ne	mov	local09, objptr
0ab88     35 00 00 5F 
0ab8c     2C E4 85 51 |  if_ne	sub	objptr, ##27180
0ab90     1B 35 02 51 |  if_ne	add	local08, local09
0ab94     04 34 06 51 |  if_ne	add	local08, #4
0ab98     01 00 80 5F 
0ab9c     1A 01 68 5C |  if_ne	wrlong	##512, local08
0aba0     F8 00 90 5D |  if_ne	jmp	#LR__0899
0aba4                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0aba4     00 26 0E F2 | 	cmp	local01, #0 wz
0aba8     00 3A 0E 52 |  if_ne	cmp	local11, #0 wz
0abac     1E 31 22 56 |  if_ne	not	local06, local12
0abb0     00 30 0E 52 |  if_ne	cmp	local06, #0 wz
0abb4     37 00 00 5F 
0abb8     64 E4 05 51 |  if_ne	add	objptr, ##28260
0abbc     F2 34 02 5B |  if_ne	rdlong	local08, objptr
0abc0     03 34 66 50 |  if_ne	shl	local08, #3
0abc4     02 00 00 5F 
0abc8     38 E4 85 51 |  if_ne	sub	objptr, ##1080
0abcc     F2 36 02 56 |  if_ne	mov	local09, objptr
0abd0     35 00 00 5F 
0abd4     2C E4 85 51 |  if_ne	sub	objptr, ##27180
0abd8     1B 35 02 51 |  if_ne	add	local08, local09
0abdc     04 34 06 51 |  if_ne	add	local08, #4
0abe0     01 00 80 5F 
0abe4     1A 03 68 5C |  if_ne	wrlong	##513, local08
0abe8     B0 00 90 5D |  if_ne	jmp	#LR__0899
0abec                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0abec     00 26 0E F2 | 	cmp	local01, #0 wz
0abf0     1D 3B 22 56 |  if_ne	not	local11, local11
0abf4     00 3A 0E 52 |  if_ne	cmp	local11, #0 wz
0abf8     1E 3D 22 56 |  if_ne	not	local12, local12
0abfc     00 3C 0E 52 |  if_ne	cmp	local12, #0 wz
0ac00     37 00 00 5F 
0ac04     64 E4 05 51 |  if_ne	add	objptr, ##28260
0ac08     F2 34 02 5B |  if_ne	rdlong	local08, objptr
0ac0c     03 34 66 50 |  if_ne	shl	local08, #3
0ac10     02 00 00 5F 
0ac14     38 E4 85 51 |  if_ne	sub	objptr, ##1080
0ac18     F2 36 02 56 |  if_ne	mov	local09, objptr
0ac1c     35 00 00 5F 
0ac20     2C E4 85 51 |  if_ne	sub	objptr, ##27180
0ac24     1B 35 02 51 |  if_ne	add	local08, local09
0ac28     04 34 06 51 |  if_ne	add	local08, #4
0ac2c     01 00 80 5F 
0ac30     1A 05 68 5C |  if_ne	wrlong	##514, local08
0ac34     64 00 90 5D |  if_ne	jmp	#LR__0899
0ac38                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ac38     37 00 00 FF 
0ac3c     64 E4 05 F1 | 	add	objptr, ##28260
0ac40     F2 36 02 FB | 	rdlong	local09, objptr
0ac44     03 36 66 F0 | 	shl	local09, #3
0ac48     02 00 00 FF 
0ac4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac50     F2 36 02 F1 | 	add	local09, objptr
0ac54     1B 13 02 FB | 	rdlong	arg01, local09
0ac58     35 00 00 FF 
0ac5c     2C E4 85 F1 | 	sub	objptr, ##27180
0ac60     3C BA BF FD | 	call	#_isname
0ac64     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac68     37 00 00 5F 
0ac6c     64 E4 05 51 |  if_ne	add	objptr, ##28260
0ac70     F2 34 02 5B |  if_ne	rdlong	local08, objptr
0ac74     03 34 66 50 |  if_ne	shl	local08, #3
0ac78     02 00 00 5F 
0ac7c     38 E4 85 51 |  if_ne	sub	objptr, ##1080
0ac80     F2 36 02 56 |  if_ne	mov	local09, objptr
0ac84     35 00 00 5F 
0ac88     2C E4 85 51 |  if_ne	sub	objptr, ##27180
0ac8c     1B 35 02 51 |  if_ne	add	local08, local09
0ac90     04 34 06 51 |  if_ne	add	local08, #4
0ac94     01 00 80 5F 
0ac98     1A 09 68 5C |  if_ne	wrlong	##516, local08
0ac9c                 | LR__0899
0ac9c     37 00 00 FF 
0aca0     64 E4 05 F1 | 	add	objptr, ##28260
0aca4     F2 30 02 FB | 	rdlong	local06, objptr
0aca8     01 30 86 F1 | 	sub	local06, #1
0acac     F2 30 62 FC | 	wrlong	local06, objptr
0acb0     37 00 00 FF 
0acb4     64 E4 85 F1 | 	sub	objptr, ##28260
0acb8                 | LR__0900
0acb8     37 00 00 FF 
0acbc     64 E4 05 F1 | 	add	objptr, ##28260
0acc0     F2 30 02 FB | 	rdlong	local06, objptr
0acc4     01 30 06 F1 | 	add	local06, #1
0acc8     F2 30 62 FC | 	wrlong	local06, objptr
0accc     37 00 00 FF 
0acd0     64 E4 85 F1 | 	sub	objptr, ##28260
0acd4     54 10 B0 FD | 	call	#_expr
0acd8     78 00 90 FD | 	jmp	#LR__0902
0acdc                 | LR__0901
0acdc     4A 00 00 FF 
0ace0     9C E4 05 F1 | 	add	objptr, ##38044
0ace4     F2 3C 02 FB | 	rdlong	local12, objptr
0ace8     1E 35 02 F6 | 	mov	local08, local12
0acec     01 34 66 F0 | 	shl	local08, #1
0acf0     1E 35 02 F1 | 	add	local08, local12
0acf4     02 34 66 F0 | 	shl	local08, #2
0acf8     03 00 00 FF 
0acfc     00 E4 85 F1 | 	sub	objptr, ##1536
0ad00     F2 34 02 F1 | 	add	local08, objptr
0ad04     08 34 06 F1 | 	add	local08, #8
0ad08     1A 39 68 FC | 	wrlong	#28, local08
0ad0c     03 00 00 FF 
0ad10     00 E4 05 F1 | 	add	objptr, ##1536
0ad14     F2 3C 02 FB | 	rdlong	local12, objptr
0ad18     1E 35 02 F6 | 	mov	local08, local12
0ad1c     01 34 66 F0 | 	shl	local08, #1
0ad20     1E 35 02 F1 | 	add	local08, local12
0ad24     02 34 66 F0 | 	shl	local08, #2
0ad28     03 00 00 FF 
0ad2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad30     F2 34 02 F1 | 	add	local08, objptr
0ad34     1A 03 68 FC | 	wrlong	#1, local08
0ad38     03 00 00 FF 
0ad3c     00 E4 05 F1 | 	add	objptr, ##1536
0ad40     F2 30 02 FB | 	rdlong	local06, objptr
0ad44     01 30 06 F1 | 	add	local06, #1
0ad48     F2 30 62 FC | 	wrlong	local06, objptr
0ad4c     4A 00 00 FF 
0ad50     9C E4 85 F1 | 	sub	objptr, ##38044
0ad54                 | LR__0902
0ad54     4A 00 00 FF 
0ad58     9C E4 05 F1 | 	add	objptr, ##38044
0ad5c     F2 3C 02 FB | 	rdlong	local12, objptr
0ad60     1E 35 02 F6 | 	mov	local08, local12
0ad64     01 34 66 F0 | 	shl	local08, #1
0ad68     1E 35 02 F1 | 	add	local08, local12
0ad6c     02 34 66 F0 | 	shl	local08, #2
0ad70     03 00 00 FF 
0ad74     00 E4 85 F1 | 	sub	objptr, ##1536
0ad78     F2 34 02 F1 | 	add	local08, objptr
0ad7c     08 34 06 F1 | 	add	local08, #8
0ad80     1A 39 68 FC | 	wrlong	#28, local08
0ad84     03 00 00 FF 
0ad88     00 E4 05 F1 | 	add	objptr, ##1536
0ad8c     F2 3C 02 FB | 	rdlong	local12, objptr
0ad90     1E 35 02 F6 | 	mov	local08, local12
0ad94     01 34 66 F0 | 	shl	local08, #1
0ad98     1E 35 02 F1 | 	add	local08, local12
0ad9c     02 34 66 F0 | 	shl	local08, #2
0ada0     03 00 00 FF 
0ada4     00 E4 85 F1 | 	sub	objptr, ##1536
0ada8     F2 34 02 F1 | 	add	local08, objptr
0adac     1A 2F 62 FC | 	wrlong	local05, local08
0adb0     03 00 00 FF 
0adb4     00 E4 05 F1 | 	add	objptr, ##1536
0adb8     F2 3C 02 FB | 	rdlong	local12, objptr
0adbc     01 3C 06 F1 | 	add	local12, #1
0adc0     F2 3C 62 FC | 	wrlong	local12, objptr
0adc4     1E 35 02 F6 | 	mov	local08, local12
0adc8     01 34 66 F0 | 	shl	local08, #1
0adcc     1E 35 02 F1 | 	add	local08, local12
0add0     02 34 66 F0 | 	shl	local08, #2
0add4     03 00 00 FF 
0add8     00 E4 85 F1 | 	sub	objptr, ##1536
0addc     F2 34 02 F1 | 	add	local08, objptr
0ade0     08 34 06 F1 | 	add	local08, #8
0ade4     1A 95 68 FC | 	wrlong	#74, local08
0ade8     03 00 00 FF 
0adec     00 E4 05 F1 | 	add	objptr, ##1536
0adf0     F2 3C 02 FB | 	rdlong	local12, objptr
0adf4     1E 35 02 F6 | 	mov	local08, local12
0adf8     01 34 66 F0 | 	shl	local08, #1
0adfc     1E 35 02 F1 | 	add	local08, local12
0ae00     02 34 66 F0 | 	shl	local08, #2
0ae04     03 00 00 FF 
0ae08     00 E4 85 F1 | 	sub	objptr, ##1536
0ae0c     F2 34 02 F1 | 	add	local08, objptr
0ae10     1A 01 68 FC | 	wrlong	#0, local08
0ae14     03 00 00 FF 
0ae18     00 E4 05 F1 | 	add	objptr, ##1536
0ae1c     F2 30 02 FB | 	rdlong	local06, objptr
0ae20     01 30 06 F1 | 	add	local06, #1
0ae24     F2 30 62 FC | 	wrlong	local06, objptr
0ae28     4A 00 00 FF 
0ae2c     9C E4 85 F1 | 	sub	objptr, ##38044
0ae30                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ae30                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ae30                 | ' return 0
0ae30     00 FA 05 F6 | 	mov	result1, #0
0ae34                 | LR__0903
0ae34     A7 F0 03 F6 | 	mov	ptra, fp
0ae38     B2 00 A0 FD | 	call	#popregs_
0ae3c                 | _compile_for_ret
0ae3c     2D 00 64 FD | 	ret
0ae40                 | 
0ae40                 | ' 
0ae40                 | ' '----- compile 'next' command. 
0ae40                 | ' 
0ae40                 | ' function compile_next() as ulong
0ae40                 | _compile_next
0ae40     04 4A 05 F6 | 	mov	COUNT_, #4
0ae44     A8 00 A0 FD | 	call	#pushregs_
0ae48     37 00 00 FF 
0ae4c     64 E4 05 F1 | 	add	objptr, ##28260
0ae50     F2 12 02 FB | 	rdlong	arg01, objptr
0ae54     03 12 66 F0 | 	shl	arg01, #3
0ae58     02 00 00 FF 
0ae5c     38 E4 85 F1 | 	sub	objptr, ##1080
0ae60     F2 12 02 F1 | 	add	arg01, objptr
0ae64     09 27 02 FB | 	rdlong	local01, arg01
0ae68                 | ' 
0ae68                 | ' varname$=lparts(ct).part$ 
0ae68                 | ' if varnum=0 then return 35
0ae68     04 E4 85 F1 | 	sub	objptr, #4
0ae6c     F2 12 0A FB | 	rdlong	arg01, objptr wz
0ae70     35 00 00 FF 
0ae74     28 E4 85 F1 | 	sub	objptr, ##27176
0ae78     23 FA 05 A6 |  if_e	mov	result1, #35
0ae7c     48 01 90 AD |  if_e	jmp	#LR__0912
0ae80     01 28 66 F6 | 	neg	local02, #1
0ae84                 | ' j=-1
0ae84                 | ' for i=0 to varnum-1
0ae84     00 2A 06 F6 | 	mov	local03, #0
0ae88     35 00 00 FF 
0ae8c     28 E4 05 F1 | 	add	objptr, ##27176
0ae90     F2 2C 02 FB | 	rdlong	local04, objptr
0ae94     35 00 00 FF 
0ae98     28 E4 85 F1 | 	sub	objptr, ##27176
0ae9c                 | LR__0910
0ae9c     16 2B 12 F2 | 	cmp	local03, local04 wc
0aea0     34 00 90 3D |  if_ae	jmp	#LR__0911
0aea4                 | '   if variables(i).name=varname$ then j=i : exit
0aea4     15 13 02 F6 | 	mov	arg01, local03
0aea8     04 12 66 F0 | 	shl	arg01, #4
0aeac     F2 14 02 F6 | 	mov	arg02, objptr
0aeb0     15 00 00 FF 
0aeb4     18 14 06 F1 | 	add	arg02, ##10776
0aeb8     0A 13 02 F1 | 	add	arg01, arg02
0aebc     09 13 02 FB | 	rdlong	arg01, arg01
0aec0     13 15 02 F6 | 	mov	arg02, local01
0aec4     08 A2 B1 FD | 	call	#__system___string_cmp
0aec8     00 FA 0D F2 | 	cmp	result1, #0 wz
0aecc     15 29 02 A6 |  if_e	mov	local02, local03
0aed0     01 2A 06 51 |  if_ne	add	local03, #1
0aed4     C4 FF 9F 5D |  if_ne	jmp	#LR__0910
0aed8                 | LR__0911
0aed8                 | ' if j=-1 then return 35
0aed8     FF FF 7F FF 
0aedc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0aee0     23 FA 05 A6 |  if_e	mov	result1, #35
0aee4     E0 00 90 AD |  if_e	jmp	#LR__0912
0aee8     4A 00 00 FF 
0aeec     9C E4 05 F1 | 	add	objptr, ##38044
0aef0     F2 2C 02 FB | 	rdlong	local04, objptr
0aef4     16 2B 02 F6 | 	mov	local03, local04
0aef8     01 2A 66 F0 | 	shl	local03, #1
0aefc     16 2B 02 F1 | 	add	local03, local04
0af00     02 2A 66 F0 | 	shl	local03, #2
0af04     03 00 00 FF 
0af08     00 E4 85 F1 | 	sub	objptr, ##1536
0af0c     F2 2A 02 F1 | 	add	local03, objptr
0af10     08 2A 06 F1 | 	add	local03, #8
0af14     15 39 68 FC | 	wrlong	#28, local03
0af18     03 00 00 FF 
0af1c     00 E4 05 F1 | 	add	objptr, ##1536
0af20     F2 2C 02 FB | 	rdlong	local04, objptr
0af24     16 2B 02 F6 | 	mov	local03, local04
0af28     01 2A 66 F0 | 	shl	local03, #1
0af2c     16 2B 02 F1 | 	add	local03, local04
0af30     02 2A 66 F0 | 	shl	local03, #2
0af34     03 00 00 FF 
0af38     00 E4 85 F1 | 	sub	objptr, ##1536
0af3c     F2 2A 02 F1 | 	add	local03, objptr
0af40     15 29 62 FC | 	wrlong	local02, local03
0af44     03 00 00 FF 
0af48     00 E4 05 F1 | 	add	objptr, ##1536
0af4c     F2 2C 02 FB | 	rdlong	local04, objptr
0af50     01 2C 06 F1 | 	add	local04, #1
0af54     F2 2C 62 FC | 	wrlong	local04, objptr
0af58     16 2B 02 F6 | 	mov	local03, local04
0af5c     01 2A 66 F0 | 	shl	local03, #1
0af60     16 2B 02 F1 | 	add	local03, local04
0af64     02 2A 66 F0 | 	shl	local03, #2
0af68     03 00 00 FF 
0af6c     00 E4 85 F1 | 	sub	objptr, ##1536
0af70     F2 2A 02 F1 | 	add	local03, objptr
0af74     08 2A 06 F1 | 	add	local03, #8
0af78     15 97 68 FC | 	wrlong	#75, local03
0af7c     03 00 00 FF 
0af80     00 E4 05 F1 | 	add	objptr, ##1536
0af84     F2 2C 02 FB | 	rdlong	local04, objptr
0af88     16 2B 02 F6 | 	mov	local03, local04
0af8c     01 2A 66 F0 | 	shl	local03, #1
0af90     16 2B 02 F1 | 	add	local03, local04
0af94     02 2A 66 F0 | 	shl	local03, #2
0af98     03 00 00 FF 
0af9c     00 E4 85 F1 | 	sub	objptr, ##1536
0afa0     F2 2A 02 F1 | 	add	local03, objptr
0afa4     15 01 68 FC | 	wrlong	#0, local03
0afa8     03 00 00 FF 
0afac     00 E4 05 F1 | 	add	objptr, ##1536
0afb0     F2 2C 02 FB | 	rdlong	local04, objptr
0afb4     01 2C 06 F1 | 	add	local04, #1
0afb8     F2 2C 62 FC | 	wrlong	local04, objptr
0afbc     4A 00 00 FF 
0afc0     9C E4 85 F1 | 	sub	objptr, ##38044
0afc4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0afc4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0afc4                 | ' return 0
0afc4     00 FA 05 F6 | 	mov	result1, #0
0afc8                 | LR__0912
0afc8     A7 F0 03 F6 | 	mov	ptra, fp
0afcc     B2 00 A0 FD | 	call	#popregs_
0afd0                 | _compile_next_ret
0afd0     2D 00 64 FD | 	ret
0afd4                 | 
0afd4                 | ' 
0afd4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0afd4                 | ' 
0afd4                 | ' function compile_gosub() as ulong
0afd4                 | _compile_gosub
0afd4     02 4A 05 F6 | 	mov	COUNT_, #2
0afd8     A8 00 A0 FD | 	call	#pushregs_
0afdc     4A 00 00 FF 
0afe0     9C E4 05 F1 | 	add	objptr, ##38044
0afe4     F2 26 02 FB | 	rdlong	local01, objptr
0afe8     13 29 02 F6 | 	mov	local02, local01
0afec     01 28 66 F0 | 	shl	local02, #1
0aff0     13 29 02 F1 | 	add	local02, local01
0aff4     02 28 66 F0 | 	shl	local02, #2
0aff8     03 00 00 FF 
0affc     00 E4 85 F1 | 	sub	objptr, ##1536
0b000     F2 28 02 F1 | 	add	local02, objptr
0b004     08 28 06 F1 | 	add	local02, #8
0b008     14 53 69 FC | 	wrlong	#169, local02
0b00c     03 00 00 FF 
0b010     00 E4 05 F1 | 	add	objptr, ##1536
0b014     F2 28 02 FB | 	rdlong	local02, objptr
0b018     01 28 06 F1 | 	add	local02, #1
0b01c     F2 28 62 FC | 	wrlong	local02, objptr
0b020     4A 00 00 FF 
0b024     9C E4 85 F1 | 	sub	objptr, ##38044
0b028     0C 00 B0 FD | 	call	#_compile_goto
0b02c                 | ' compiledline(lineptr).result_type=token_gosub
0b02c                 | ' lineptr+=1
0b02c                 | ' err=compile_goto()
0b02c                 | ' return err
0b02c     A7 F0 03 F6 | 	mov	ptra, fp
0b030     B2 00 A0 FD | 	call	#popregs_
0b034                 | _compile_gosub_ret
0b034     2D 00 64 FD | 	ret
0b038                 | 
0b038                 | ' 
0b038                 | ' '----- compile 'goto' 
0b038                 | ' 
0b038                 | ' function compile_goto() as ulong
0b038                 | _compile_goto
0b038     0A 4A 05 F6 | 	mov	COUNT_, #10
0b03c     A8 00 A0 FD | 	call	#pushregs_
0b040     34 F0 07 F1 | 	add	ptra, #52
0b044                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b044     37 00 00 FF 
0b048     64 E4 05 F1 | 	add	objptr, ##28260
0b04c     F2 16 02 FB | 	rdlong	arg03, objptr
0b050     03 16 66 F0 | 	shl	arg03, #3
0b054     02 00 00 FF 
0b058     38 E4 85 F1 | 	sub	objptr, ##1080
0b05c     F2 16 02 F1 | 	add	arg03, objptr
0b060     04 16 06 F1 | 	add	arg03, #4
0b064     0B 17 02 FB | 	rdlong	arg03, arg03
0b068     01 00 00 FF 
0b06c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b070     35 00 00 FF 
0b074     2C E4 85 F1 | 	sub	objptr, ##27180
0b078     64 02 90 5D |  if_ne	jmp	#LR__0923
0b07c     37 00 00 FF 
0b080     64 E4 05 F1 | 	add	objptr, ##28260
0b084     F2 16 02 FB | 	rdlong	arg03, objptr
0b088     01 16 06 F1 | 	add	arg03, #1
0b08c     03 16 66 F0 | 	shl	arg03, #3
0b090     02 00 00 FF 
0b094     38 E4 85 F1 | 	sub	objptr, ##1080
0b098     F2 16 02 F1 | 	add	arg03, objptr
0b09c     04 16 06 F1 | 	add	arg03, #4
0b0a0     0B 17 02 FB | 	rdlong	arg03, arg03
0b0a4     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b0a8     35 00 00 FF 
0b0ac     2C E4 85 F1 | 	sub	objptr, ##27180
0b0b0     2C 02 90 5D |  if_ne	jmp	#LR__0923
0b0b4     37 00 00 FF 
0b0b8     64 E4 05 F1 | 	add	objptr, ##28260
0b0bc     F2 16 02 FB | 	rdlong	arg03, objptr
0b0c0     03 16 66 F0 | 	shl	arg03, #3
0b0c4     02 00 00 FF 
0b0c8     38 E4 85 F1 | 	sub	objptr, ##1080
0b0cc     F2 16 02 F1 | 	add	arg03, objptr
0b0d0     0B 13 02 FB | 	rdlong	arg01, arg03
0b0d4     00 14 06 F6 | 	mov	arg02, #0
0b0d8     35 00 00 FF 
0b0dc     2C E4 85 F1 | 	sub	objptr, ##27180
0b0e0     BC C4 B1 FD | 	call	#__system____builtin_atoi
0b0e4     FD 2C 02 F6 | 	mov	local04, result1
0b0e8     4A 00 00 FF 
0b0ec     9C E4 05 F1 | 	add	objptr, ##38044
0b0f0     F2 2E 02 FB | 	rdlong	local05, objptr
0b0f4     17 31 02 F6 | 	mov	local06, local05
0b0f8     01 30 66 F0 | 	shl	local06, #1
0b0fc     17 31 02 F1 | 	add	local06, local05
0b100     02 30 66 F0 | 	shl	local06, #2
0b104     03 00 00 FF 
0b108     00 E4 85 F1 | 	sub	objptr, ##1536
0b10c     F2 32 02 F6 | 	mov	local07, objptr
0b110     F2 30 02 F1 | 	add	local06, objptr
0b114     08 30 06 F1 | 	add	local06, #8
0b118     18 9D 68 FC | 	wrlong	#78, local06
0b11c     03 00 00 FF 
0b120     0C E4 05 F1 | 	add	objptr, ##1548
0b124     F2 34 02 FB | 	rdlong	local08, objptr
0b128                 | '   gotoline=val%(lparts(ct).part$) 
0b128                 | '   compiledline(lineptr).result_type=token_fast_goto
0b128                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b128                 | '   do
0b128     3E 00 00 FF 
0b12c     DC E5 85 F1 | 	sub	objptr, ##32220
0b130                 | LR__0920
0b130     A7 12 02 F6 | 	mov	arg01, fp
0b134     10 12 06 F1 | 	add	arg01, #16
0b138     1A 15 02 F6 | 	mov	arg02, local08
0b13c     18 16 06 F6 | 	mov	arg03, #24
0b140     60 97 B1 FD | 	call	#_psram_spin2_read1
0b144                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b144                 | '     if gotoheader(0)<>$FFFFFFFF then
0b144     10 4E 05 F1 | 	add	fp, #16
0b148     A7 30 02 FB | 	rdlong	local06, fp
0b14c     10 4E 85 F1 | 	sub	fp, #16
0b150     FF FF 7F FF 
0b154     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b158     1A 37 02 56 |  if_ne	mov	local09, local08
0b15c     24 4E 05 51 |  if_ne	add	fp, #36
0b160     A7 34 02 5B |  if_ne	rdlong	local08, fp
0b164     24 4E 85 51 |  if_ne	sub	fp, #36
0b168     24 4E 05 F1 | 	add	fp, #36
0b16c     A7 30 02 FB | 	rdlong	local06, fp
0b170     24 4E 85 F1 | 	sub	fp, #36
0b174     FF FF 3F FF 
0b178     FF 31 0E F2 | 	cmp	local06, ##2147483647 wz
0b17c     10 4E 05 51 |  if_ne	add	fp, #16
0b180     A7 2E 02 5B |  if_ne	rdlong	local05, fp
0b184     10 4E 85 51 |  if_ne	sub	fp, #16
0b188     FF FF 7F 5F 
0b18c     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b190     10 4E 05 51 |  if_ne	add	fp, #16
0b194     17 33 02 56 |  if_ne	mov	local07, local05
0b198     10 4E 85 51 |  if_ne	sub	fp, #16
0b19c     16 33 0A 52 |  if_ne	cmp	local07, local04 wz
0b1a0     8C FF 9F 5D |  if_ne	jmp	#LR__0920
0b1a4     0B 00 00 FF 
0b1a8     CC E4 85 F1 | 	sub	objptr, ##5836
0b1ac                 | '   if gotoheader(0)=gotoline then
0b1ac     10 4E 05 F1 | 	add	fp, #16
0b1b0     A7 30 02 FB | 	rdlong	local06, fp
0b1b4     10 4E 85 F1 | 	sub	fp, #16
0b1b8     16 31 0A F2 | 	cmp	local06, local04 wz
0b1bc     68 00 90 5D |  if_ne	jmp	#LR__0921
0b1c0     4A 00 00 FF 
0b1c4     9C E4 05 F1 | 	add	objptr, ##38044
0b1c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b1cc     17 31 02 F6 | 	mov	local06, local05
0b1d0     01 30 66 F0 | 	shl	local06, #1
0b1d4     17 31 02 F1 | 	add	local06, local05
0b1d8     02 30 66 F0 | 	shl	local06, #2
0b1dc     03 00 00 FF 
0b1e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b1e4     F2 30 02 F1 | 	add	local06, objptr
0b1e8     18 37 62 FC | 	wrlong	local09, local06
0b1ec     03 00 00 FF 
0b1f0     00 E4 05 F1 | 	add	objptr, ##1536
0b1f4     F2 2E 02 FB | 	rdlong	local05, objptr
0b1f8     17 31 02 F6 | 	mov	local06, local05
0b1fc     01 30 66 F0 | 	shl	local06, #1
0b200     17 31 02 F1 | 	add	local06, local05
0b204     02 30 66 F0 | 	shl	local06, #2
0b208     03 00 00 FF 
0b20c     00 E4 85 F1 | 	sub	objptr, ##1536
0b210     F2 30 02 F1 | 	add	local06, objptr
0b214     04 30 06 F1 | 	add	local06, #4
0b218     18 2D 62 FC | 	wrlong	local04, local06
0b21c     47 00 00 FF 
0b220     9C E4 85 F1 | 	sub	objptr, ##36508
0b224     98 00 90 FD | 	jmp	#LR__0922
0b228                 | LR__0921
0b228     4A 00 00 FF 
0b22c     9C E4 05 F1 | 	add	objptr, ##38044
0b230     F2 2E 02 FB | 	rdlong	local05, objptr
0b234     17 31 02 F6 | 	mov	local06, local05
0b238     01 30 66 F0 | 	shl	local06, #1
0b23c     17 31 02 F1 | 	add	local06, local05
0b240     02 30 66 F0 | 	shl	local06, #2
0b244     03 00 00 FF 
0b248     00 E4 85 F1 | 	sub	objptr, ##1536
0b24c     F2 30 02 F1 | 	add	local06, objptr
0b250     00 00 C0 FF 
0b254     18 01 68 FC | 	wrlong	##-2147483648, local06
0b258     03 00 00 FF 
0b25c     00 E4 05 F1 | 	add	objptr, ##1536
0b260     F2 2E 02 FB | 	rdlong	local05, objptr
0b264     17 31 02 F6 | 	mov	local06, local05
0b268     01 30 66 F0 | 	shl	local06, #1
0b26c     17 31 02 F1 | 	add	local06, local05
0b270     02 30 66 F0 | 	shl	local06, #2
0b274     03 00 00 FF 
0b278     00 E4 85 F1 | 	sub	objptr, ##1536
0b27c     F2 30 02 F1 | 	add	local06, objptr
0b280     04 30 06 F1 | 	add	local06, #4
0b284     18 2D 62 FC | 	wrlong	local04, local06
0b288     03 00 00 FF 
0b28c     00 E4 05 F1 | 	add	objptr, ##1536
0b290     F2 2E 02 FB | 	rdlong	local05, objptr
0b294     17 31 02 F6 | 	mov	local06, local05
0b298     01 30 66 F0 | 	shl	local06, #1
0b29c     17 31 02 F1 | 	add	local06, local05
0b2a0     02 30 66 F0 | 	shl	local06, #2
0b2a4     03 00 00 FF 
0b2a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2ac     F2 30 02 F1 | 	add	local06, objptr
0b2b0     08 30 06 F1 | 	add	local06, #8
0b2b4     18 A7 68 FC | 	wrlong	#83, local06
0b2b8     47 00 00 FF 
0b2bc     9C E4 85 F1 | 	sub	objptr, ##36508
0b2c0                 | LR__0922
0b2c0     4A 00 00 FF 
0b2c4     9C E4 05 F1 | 	add	objptr, ##38044
0b2c8     F2 36 02 FB | 	rdlong	local09, objptr
0b2cc     01 36 06 F1 | 	add	local09, #1
0b2d0     F2 36 62 FC | 	wrlong	local09, objptr
0b2d4     4A 00 00 FF 
0b2d8     9C E4 85 F1 | 	sub	objptr, ##38044
0b2dc     BC 00 90 FD | 	jmp	#LR__0924
0b2e0                 | LR__0923
0b2e0     48 0A B0 FD | 	call	#_expr
0b2e4     4F 2A 06 F6 | 	mov	local03, #79
0b2e8     00 26 06 F6 | 	mov	local01, #0
0b2ec     14 39 02 F6 | 	mov	local10, local02
0b2f0     15 2F 02 F6 | 	mov	local05, local03
0b2f4     4A 00 00 FF 
0b2f8     9C E4 05 F1 | 	add	objptr, ##38044
0b2fc     F2 26 02 FB | 	rdlong	local01, objptr
0b300     13 37 02 F6 | 	mov	local09, local01
0b304     01 36 66 F0 | 	shl	local09, #1
0b308     13 37 02 F1 | 	add	local09, local01
0b30c     02 36 66 F0 | 	shl	local09, #2
0b310     03 00 00 FF 
0b314     00 E4 85 F1 | 	sub	objptr, ##1536
0b318     F2 36 02 F1 | 	add	local09, objptr
0b31c     1B 01 68 FC | 	wrlong	#0, local09
0b320     03 00 00 FF 
0b324     00 E4 05 F1 | 	add	objptr, ##1536
0b328     F2 26 02 FB | 	rdlong	local01, objptr
0b32c     13 37 02 F6 | 	mov	local09, local01
0b330     01 36 66 F0 | 	shl	local09, #1
0b334     13 37 02 F1 | 	add	local09, local01
0b338     02 36 66 F0 | 	shl	local09, #2
0b33c     03 00 00 FF 
0b340     00 E4 85 F1 | 	sub	objptr, ##1536
0b344     F2 36 02 F1 | 	add	local09, objptr
0b348     04 36 06 F1 | 	add	local09, #4
0b34c     1B 39 62 FC | 	wrlong	local10, local09
0b350     03 00 00 FF 
0b354     00 E4 05 F1 | 	add	objptr, ##1536
0b358     F2 38 02 FB | 	rdlong	local10, objptr
0b35c     1C 27 02 F6 | 	mov	local01, local10
0b360     01 26 66 F0 | 	shl	local01, #1
0b364     1C 27 02 F1 | 	add	local01, local10
0b368     02 26 66 F0 | 	shl	local01, #2
0b36c     03 00 00 FF 
0b370     00 E4 85 F1 | 	sub	objptr, ##1536
0b374     F2 26 02 F1 | 	add	local01, objptr
0b378     08 26 06 F1 | 	add	local01, #8
0b37c     13 2F 62 FC | 	wrlong	local05, local01
0b380     03 00 00 FF 
0b384     00 E4 05 F1 | 	add	objptr, ##1536
0b388     F2 38 02 FB | 	rdlong	local10, objptr
0b38c     01 38 06 F1 | 	add	local10, #1
0b390     F2 38 62 FC | 	wrlong	local10, objptr
0b394     4A 00 00 FF 
0b398     9C E4 85 F1 | 	sub	objptr, ##38044
0b39c                 | LR__0924
0b39c                 | ' return 0
0b39c     00 FA 05 F6 | 	mov	result1, #0
0b3a0     A7 F0 03 F6 | 	mov	ptra, fp
0b3a4     B2 00 A0 FD | 	call	#popregs_
0b3a8                 | _compile_goto_ret
0b3a8     2D 00 64 FD | 	ret
0b3ac                 | 
0b3ac                 | ' 
0b3ac                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b3ac                 | ' 
0b3ac                 | ' function compile_on() as ulong
0b3ac                 | _compile_on
0b3ac     0A 4A 05 F6 | 	mov	COUNT_, #10
0b3b0     A8 00 A0 FD | 	call	#pushregs_
0b3b4     74 09 B0 FD | 	call	#_expr
0b3b8     00 26 06 F6 | 	mov	local01, #0
0b3bc     4A 00 00 FF 
0b3c0     9C E4 05 F1 | 	add	objptr, ##38044
0b3c4     F2 14 02 FB | 	rdlong	arg02, objptr
0b3c8     0A 13 02 F6 | 	mov	arg01, arg02
0b3cc     01 12 66 F0 | 	shl	arg01, #1
0b3d0     0A 13 02 F1 | 	add	arg01, arg02
0b3d4     02 12 66 F0 | 	shl	arg01, #2
0b3d8     03 00 00 FF 
0b3dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e0     F2 12 02 F1 | 	add	arg01, objptr
0b3e4     08 12 06 F1 | 	add	arg01, #8
0b3e8     09 83 69 FC | 	wrlong	#193, arg01
0b3ec     03 00 00 FF 
0b3f0     00 E4 05 F1 | 	add	objptr, ##1536
0b3f4     F2 14 02 FB | 	rdlong	arg02, objptr
0b3f8     0A 29 02 F6 | 	mov	local02, arg02
0b3fc     01 14 06 F1 | 	add	arg02, #1
0b400     F2 14 62 FC | 	wrlong	arg02, objptr
0b404                 | ' expr()
0b404                 | ' 'print lparts(ct).part$ 'ok
0b404                 | ' numpar=0
0b404                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b404                 | ' if lparts(ct).part$="goto" then
0b404     13 00 00 FF 
0b408     38 E4 85 F1 | 	sub	objptr, ##9784
0b40c     F2 14 02 FB | 	rdlong	arg02, objptr
0b410     03 14 66 F0 | 	shl	arg02, #3
0b414     02 00 00 FF 
0b418     38 E4 85 F1 | 	sub	objptr, ##1080
0b41c     F2 14 02 F1 | 	add	arg02, objptr
0b420     0A 13 02 FB | 	rdlong	arg01, arg02
0b424     91 01 00 FF 
0b428     02 15 06 F6 | 	mov	arg02, ##@LR__5536
0b42c     35 00 00 FF 
0b430     2C E4 85 F1 | 	sub	objptr, ##27180
0b434     98 9C B1 FD | 	call	#__system___string_cmp
0b438     00 FA 0D F2 | 	cmp	result1, #0 wz
0b43c     FC 01 90 5D |  if_ne	jmp	#LR__0933
0b440     37 00 00 FF 
0b444     64 E4 05 F1 | 	add	objptr, ##28260
0b448     F2 2A 02 FB | 	rdlong	local03, objptr
0b44c     37 00 00 FF 
0b450     64 E4 85 F1 | 	sub	objptr, ##28260
0b454     01 2A 06 F1 | 	add	local03, #1
0b458                 | '   i=ct+1
0b458                 | '   do
0b458                 | LR__0930
0b458                 | '     if lparts(i).token=token_decimal then
0b458     15 FB 01 F6 | 	mov	result1, local03
0b45c     03 FA 65 F0 | 	shl	result1, #3
0b460     F2 14 02 F6 | 	mov	arg02, objptr
0b464     35 00 00 FF 
0b468     2C 14 06 F1 | 	add	arg02, ##27180
0b46c     0A FB 01 F1 | 	add	result1, arg02
0b470     04 FA 05 F1 | 	add	result1, #4
0b474     FD FA 01 FB | 	rdlong	result1, result1
0b478     01 00 00 FF 
0b47c     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b480     E0 00 90 5D |  if_ne	jmp	#LR__0931
0b484     4A 00 00 FF 
0b488     9C E4 05 F1 | 	add	objptr, ##38044
0b48c     F2 FA 01 FB | 	rdlong	result1, objptr
0b490     FD 14 02 F6 | 	mov	arg02, result1
0b494     01 14 66 F0 | 	shl	arg02, #1
0b498     FD 14 02 F1 | 	add	arg02, result1
0b49c     02 14 66 F0 | 	shl	arg02, #2
0b4a0     03 00 00 FF 
0b4a4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4a8     F2 14 02 F1 | 	add	arg02, objptr
0b4ac     00 00 C0 FF 
0b4b0     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b4b4     03 00 00 FF 
0b4b8     00 E4 05 F1 | 	add	objptr, ##1536
0b4bc     F2 14 02 FB | 	rdlong	arg02, objptr
0b4c0     0A 2D 02 F6 | 	mov	local04, arg02
0b4c4     01 2C 66 F0 | 	shl	local04, #1
0b4c8     0A 2D 02 F1 | 	add	local04, arg02
0b4cc     02 2C 66 F0 | 	shl	local04, #2
0b4d0     03 00 00 FF 
0b4d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4d8     F2 2C 02 F1 | 	add	local04, objptr
0b4dc     15 2F 02 F6 | 	mov	local05, local03
0b4e0     03 2E 66 F0 | 	shl	local05, #3
0b4e4     12 00 00 FF 
0b4e8     70 E4 85 F1 | 	sub	objptr, ##9328
0b4ec     F2 30 02 F6 | 	mov	local06, objptr
0b4f0     F2 2E 02 F1 | 	add	local05, objptr
0b4f4     17 13 02 FB | 	rdlong	arg01, local05
0b4f8     00 14 06 F6 | 	mov	arg02, #0
0b4fc     35 00 00 FF 
0b500     2C E4 85 F1 | 	sub	objptr, ##27180
0b504     98 C0 B1 FD | 	call	#__system____builtin_atoi
0b508     04 2C 06 F1 | 	add	local04, #4
0b50c     16 FB 61 FC | 	wrlong	result1, local04
0b510     4A 00 00 FF 
0b514     9C E4 05 F1 | 	add	objptr, ##38044
0b518     F2 14 02 FB | 	rdlong	arg02, objptr
0b51c     0A 2D 02 F6 | 	mov	local04, arg02
0b520     01 2C 66 F0 | 	shl	local04, #1
0b524     0A 2D 02 F1 | 	add	local04, arg02
0b528     02 2C 66 F0 | 	shl	local04, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 2C 02 F1 | 	add	local04, objptr
0b538     08 2C 06 F1 | 	add	local04, #8
0b53c     16 A7 68 FC | 	wrlong	#83, local04
0b540     03 00 00 FF 
0b544     00 E4 05 F1 | 	add	objptr, ##1536
0b548     F2 2C 02 FB | 	rdlong	local04, objptr
0b54c     01 2C 06 F1 | 	add	local04, #1
0b550     F2 2C 62 FC | 	wrlong	local04, objptr
0b554     4A 00 00 FF 
0b558     9C E4 85 F1 | 	sub	objptr, ##38044
0b55c     01 26 06 F1 | 	add	local01, #1
0b560     08 00 90 FD | 	jmp	#LR__0932
0b564                 | LR__0931
0b564                 | '       return 17
0b564     11 FA 05 F6 | 	mov	result1, #17
0b568     24 04 90 FD | 	jmp	#LR__0941
0b56c                 | LR__0932
0b56c     01 2A 06 F1 | 	add	local03, #1
0b570                 | '     i+=1
0b570                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b570     15 15 02 F6 | 	mov	arg02, local03
0b574     03 14 66 F0 | 	shl	arg02, #3
0b578     F2 2C 02 F6 | 	mov	local04, objptr
0b57c     35 00 00 FF 
0b580     2C 2C 06 F1 | 	add	local04, ##27180
0b584     16 15 02 F1 | 	add	arg02, local04
0b588     04 14 06 F1 | 	add	arg02, #4
0b58c     0A 2D 02 FB | 	rdlong	local04, arg02
0b590     11 2C 0E F2 | 	cmp	local04, #17 wz
0b594     15 2F 02 56 |  if_ne	mov	local05, local03
0b598     03 2E 66 50 |  if_ne	shl	local05, #3
0b59c     F2 30 02 56 |  if_ne	mov	local06, objptr
0b5a0     35 00 00 5F 
0b5a4     2C 30 06 51 |  if_ne	add	local06, ##27180
0b5a8     18 2F 02 51 |  if_ne	add	local05, local06
0b5ac     04 2E 06 51 |  if_ne	add	local05, #4
0b5b0     17 33 02 5B |  if_ne	rdlong	local07, local05
0b5b4     19 35 02 56 |  if_ne	mov	local08, local07
0b5b8     FE 35 0E 52 |  if_ne	cmp	local08, #510 wz
0b5bc     15 FA 05 56 |  if_ne	mov	result1, #21
0b5c0     CC 03 90 5D |  if_ne	jmp	#LR__0941
0b5c4                 | '     if lparts(i).token=token_end then exit loop
0b5c4     15 37 02 F6 | 	mov	local09, local03
0b5c8     03 36 66 F0 | 	shl	local09, #3
0b5cc     F2 2C 02 F6 | 	mov	local04, objptr
0b5d0     35 00 00 FF 
0b5d4     2C 2C 06 F1 | 	add	local04, ##27180
0b5d8     16 37 02 F1 | 	add	local09, local04
0b5dc     04 36 06 F1 | 	add	local09, #4
0b5e0     1B 39 02 FB | 	rdlong	local10, local09
0b5e4     FE 39 0E F2 | 	cmp	local10, #510 wz
0b5e8     01 2A 06 51 |  if_ne	add	local03, #1
0b5ec     15 37 02 56 |  if_ne	mov	local09, local03
0b5f0     03 36 66 50 |  if_ne	shl	local09, #3
0b5f4     F2 2C 02 56 |  if_ne	mov	local04, objptr
0b5f8     35 00 00 5F 
0b5fc     2C 2C 06 51 |  if_ne	add	local04, ##27180
0b600     16 37 02 51 |  if_ne	add	local09, local04
0b604     04 36 06 51 |  if_ne	add	local09, #4
0b608     1B 39 02 5B |  if_ne	rdlong	local10, local09
0b60c     FE 39 0E 52 |  if_ne	cmp	local10, #510 wz
0b610     44 FE 9F 5D |  if_ne	jmp	#LR__0930
0b614     14 37 02 F6 | 	mov	local09, local02
0b618     01 36 66 F0 | 	shl	local09, #1
0b61c     14 37 02 F1 | 	add	local09, local02
0b620     02 36 66 F0 | 	shl	local09, #2
0b624     F2 2C 02 F6 | 	mov	local04, objptr
0b628     47 00 00 FF 
0b62c     9C 2C 06 F1 | 	add	local04, ##36508
0b630     16 37 02 F1 | 	add	local09, local04
0b634     04 36 06 F1 | 	add	local09, #4
0b638     1B 03 68 FC | 	wrlong	#1, local09
0b63c                 | LR__0933
0b63c                 | ' 
0b63c                 | ' if lparts(ct).part$="gosub" then
0b63c     37 00 00 FF 
0b640     64 E4 05 F1 | 	add	objptr, ##28260
0b644     F2 38 02 FB | 	rdlong	local10, objptr
0b648     03 38 66 F0 | 	shl	local10, #3
0b64c     02 00 00 FF 
0b650     38 E4 85 F1 | 	sub	objptr, ##1080
0b654     F2 38 02 F1 | 	add	local10, objptr
0b658     1C 13 02 FB | 	rdlong	arg01, local10
0b65c     91 01 00 FF 
0b660     07 15 06 F6 | 	mov	arg02, ##@LR__5537
0b664     35 00 00 FF 
0b668     2C E4 85 F1 | 	sub	objptr, ##27180
0b66c     60 9A B1 FD | 	call	#__system___string_cmp
0b670     00 FA 0D F2 | 	cmp	result1, #0 wz
0b674     68 02 90 5D |  if_ne	jmp	#LR__0937
0b678     37 00 00 FF 
0b67c     64 E4 05 F1 | 	add	objptr, ##28260
0b680     F2 2A 02 FB | 	rdlong	local03, objptr
0b684     37 00 00 FF 
0b688     64 E4 85 F1 | 	sub	objptr, ##28260
0b68c     01 2A 06 F1 | 	add	local03, #1
0b690                 | '   i=ct+1
0b690                 | '   do
0b690                 | LR__0934
0b690                 | '     if lparts(i).token=token_decimal then
0b690     15 37 02 F6 | 	mov	local09, local03
0b694     03 36 66 F0 | 	shl	local09, #3
0b698     F2 2C 02 F6 | 	mov	local04, objptr
0b69c     35 00 00 FF 
0b6a0     2C 2C 06 F1 | 	add	local04, ##27180
0b6a4     16 37 02 F1 | 	add	local09, local04
0b6a8     04 36 06 F1 | 	add	local09, #4
0b6ac     1B 39 02 FB | 	rdlong	local10, local09
0b6b0     01 00 00 FF 
0b6b4     00 38 0E F2 | 	cmp	local10, ##512 wz
0b6b8     50 01 90 5D |  if_ne	jmp	#LR__0935
0b6bc     4A 00 00 FF 
0b6c0     9C E4 05 F1 | 	add	objptr, ##38044
0b6c4     F2 36 02 FB | 	rdlong	local09, objptr
0b6c8     1B 2D 02 F6 | 	mov	local04, local09
0b6cc     01 2C 66 F0 | 	shl	local04, #1
0b6d0     1B 2D 02 F1 | 	add	local04, local09
0b6d4     02 2C 66 F0 | 	shl	local04, #2
0b6d8     03 00 00 FF 
0b6dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b6e0     F2 2C 02 F1 | 	add	local04, objptr
0b6e4     08 2C 06 F1 | 	add	local04, #8
0b6e8     16 53 69 FC | 	wrlong	#169, local04
0b6ec     03 00 00 FF 
0b6f0     00 E4 05 F1 | 	add	objptr, ##1536
0b6f4     F2 36 02 FB | 	rdlong	local09, objptr
0b6f8     01 36 06 F1 | 	add	local09, #1
0b6fc     F2 36 62 FC | 	wrlong	local09, objptr
0b700     1B 2D 02 F6 | 	mov	local04, local09
0b704     01 2C 66 F0 | 	shl	local04, #1
0b708     1B 2D 02 F1 | 	add	local04, local09
0b70c     02 2C 66 F0 | 	shl	local04, #2
0b710     03 00 00 FF 
0b714     00 E4 85 F1 | 	sub	objptr, ##1536
0b718     F2 2C 02 F1 | 	add	local04, objptr
0b71c     00 00 C0 FF 
0b720     16 01 68 FC | 	wrlong	##-2147483648, local04
0b724     03 00 00 FF 
0b728     00 E4 05 F1 | 	add	objptr, ##1536
0b72c     F2 36 02 FB | 	rdlong	local09, objptr
0b730     1B 2D 02 F6 | 	mov	local04, local09
0b734     01 2C 66 F0 | 	shl	local04, #1
0b738     1B 2D 02 F1 | 	add	local04, local09
0b73c     02 2C 66 F0 | 	shl	local04, #2
0b740     03 00 00 FF 
0b744     00 E4 85 F1 | 	sub	objptr, ##1536
0b748     F2 2C 02 F1 | 	add	local04, objptr
0b74c     15 2F 02 F6 | 	mov	local05, local03
0b750     03 2E 66 F0 | 	shl	local05, #3
0b754     12 00 00 FF 
0b758     70 E4 85 F1 | 	sub	objptr, ##9328
0b75c     F2 30 02 F6 | 	mov	local06, objptr
0b760     F2 2E 02 F1 | 	add	local05, objptr
0b764     17 13 02 FB | 	rdlong	arg01, local05
0b768     00 14 06 F6 | 	mov	arg02, #0
0b76c     35 00 00 FF 
0b770     2C E4 85 F1 | 	sub	objptr, ##27180
0b774     28 BE B1 FD | 	call	#__system____builtin_atoi
0b778     04 2C 06 F1 | 	add	local04, #4
0b77c     16 FB 61 FC | 	wrlong	result1, local04
0b780     4A 00 00 FF 
0b784     9C E4 05 F1 | 	add	objptr, ##38044
0b788     F2 36 02 FB | 	rdlong	local09, objptr
0b78c     1B 2D 02 F6 | 	mov	local04, local09
0b790     01 2C 66 F0 | 	shl	local04, #1
0b794     1B 2D 02 F1 | 	add	local04, local09
0b798     02 2C 66 F0 | 	shl	local04, #2
0b79c     03 00 00 FF 
0b7a0     00 E4 85 F1 | 	sub	objptr, ##1536
0b7a4     F2 2C 02 F1 | 	add	local04, objptr
0b7a8     08 2C 06 F1 | 	add	local04, #8
0b7ac     16 A7 68 FC | 	wrlong	#83, local04
0b7b0     03 00 00 FF 
0b7b4     00 E4 05 F1 | 	add	objptr, ##1536
0b7b8     F2 36 02 FB | 	rdlong	local09, objptr
0b7bc     01 36 06 F1 | 	add	local09, #1
0b7c0     F2 36 62 FC | 	wrlong	local09, objptr
0b7c4     01 26 06 F1 | 	add	local01, #1
0b7c8     1B 2D 02 F6 | 	mov	local04, local09
0b7cc     01 2C 66 F0 | 	shl	local04, #1
0b7d0     1B 2D 02 F1 | 	add	local04, local09
0b7d4     02 2C 66 F0 | 	shl	local04, #2
0b7d8     03 00 00 FF 
0b7dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b7e0     F2 2C 02 F1 | 	add	local04, objptr
0b7e4     08 2C 06 F1 | 	add	local04, #8
0b7e8     16 5B 68 FC | 	wrlong	#45, local04
0b7ec     03 00 00 FF 
0b7f0     00 E4 05 F1 | 	add	objptr, ##1536
0b7f4     F2 38 02 FB | 	rdlong	local10, objptr
0b7f8     01 38 06 F1 | 	add	local10, #1
0b7fc     F2 38 62 FC | 	wrlong	local10, objptr
0b800     4A 00 00 FF 
0b804     9C E4 85 F1 | 	sub	objptr, ##38044
0b808     08 00 90 FD | 	jmp	#LR__0936
0b80c                 | LR__0935
0b80c                 | '       return 17
0b80c     11 FA 05 F6 | 	mov	result1, #17
0b810     7C 01 90 FD | 	jmp	#LR__0941
0b814                 | LR__0936
0b814     01 2A 06 F1 | 	add	local03, #1
0b818                 | '     i+=1
0b818                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b818     15 37 02 F6 | 	mov	local09, local03
0b81c     03 36 66 F0 | 	shl	local09, #3
0b820     F2 2C 02 F6 | 	mov	local04, objptr
0b824     35 00 00 FF 
0b828     2C 2C 06 F1 | 	add	local04, ##27180
0b82c     16 37 02 F1 | 	add	local09, local04
0b830     04 36 06 F1 | 	add	local09, #4
0b834     1B 39 02 FB | 	rdlong	local10, local09
0b838     11 38 0E F2 | 	cmp	local10, #17 wz
0b83c     15 2F 02 56 |  if_ne	mov	local05, local03
0b840     03 2E 66 50 |  if_ne	shl	local05, #3
0b844     F2 30 02 56 |  if_ne	mov	local06, objptr
0b848     35 00 00 5F 
0b84c     2C 30 06 51 |  if_ne	add	local06, ##27180
0b850     18 2F 02 51 |  if_ne	add	local05, local06
0b854     04 2E 06 51 |  if_ne	add	local05, #4
0b858     17 35 02 5B |  if_ne	rdlong	local08, local05
0b85c     FE 35 0E 52 |  if_ne	cmp	local08, #510 wz
0b860     15 FA 05 56 |  if_ne	mov	result1, #21
0b864     28 01 90 5D |  if_ne	jmp	#LR__0941
0b868                 | '     if lparts(i).token=token_end then exit loop
0b868     15 37 02 F6 | 	mov	local09, local03
0b86c     03 36 66 F0 | 	shl	local09, #3
0b870     F2 2C 02 F6 | 	mov	local04, objptr
0b874     35 00 00 FF 
0b878     2C 2C 06 F1 | 	add	local04, ##27180
0b87c     16 37 02 F1 | 	add	local09, local04
0b880     04 36 06 F1 | 	add	local09, #4
0b884     1B 39 02 FB | 	rdlong	local10, local09
0b888     FE 39 0E F2 | 	cmp	local10, #510 wz
0b88c     01 2A 06 51 |  if_ne	add	local03, #1
0b890     15 37 02 56 |  if_ne	mov	local09, local03
0b894     03 36 66 50 |  if_ne	shl	local09, #3
0b898     F2 2C 02 56 |  if_ne	mov	local04, objptr
0b89c     35 00 00 5F 
0b8a0     2C 2C 06 51 |  if_ne	add	local04, ##27180
0b8a4     16 37 02 51 |  if_ne	add	local09, local04
0b8a8     04 36 06 51 |  if_ne	add	local09, #4
0b8ac     1B 39 02 5B |  if_ne	rdlong	local10, local09
0b8b0     FE 39 0E 52 |  if_ne	cmp	local10, #510 wz
0b8b4     D8 FD 9F 5D |  if_ne	jmp	#LR__0934
0b8b8     14 37 02 F6 | 	mov	local09, local02
0b8bc     01 36 66 F0 | 	shl	local09, #1
0b8c0     14 37 02 F1 | 	add	local09, local02
0b8c4     02 36 66 F0 | 	shl	local09, #2
0b8c8     F2 2C 02 F6 | 	mov	local04, objptr
0b8cc     47 00 00 FF 
0b8d0     9C 2C 06 F1 | 	add	local04, ##36508
0b8d4     16 37 02 F1 | 	add	local09, local04
0b8d8     04 36 06 F1 | 	add	local09, #4
0b8dc     1B 07 68 FC | 	wrlong	#3, local09
0b8e0                 | LR__0937
0b8e0     14 37 02 F6 | 	mov	local09, local02
0b8e4     01 36 66 F0 | 	shl	local09, #1
0b8e8     14 37 02 F1 | 	add	local09, local02
0b8ec     02 36 66 F0 | 	shl	local09, #2
0b8f0     47 00 00 FF 
0b8f4     9C E4 05 F1 | 	add	objptr, ##36508
0b8f8     F2 36 02 F1 | 	add	local09, objptr
0b8fc     1B 27 62 FC | 	wrlong	local01, local09
0b900                 | ' compiledline(onlineptr).result.uresult=numpar
0b900                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b900     03 00 00 FF 
0b904     00 E4 05 F1 | 	add	objptr, ##1536
0b908     F2 2A 02 FB | 	rdlong	local03, objptr
0b90c     4A 00 00 FF 
0b910     9C E4 85 F1 | 	sub	objptr, ##38044
0b914     97 3A 48 FB | 	callpa	#(@LR__0940-@LR__0938)>>2,fcache_load_ptr_
0b918                 | LR__0938
0b918     15 2D 02 F6 | 	mov	local04, local03
0b91c     01 2C 66 F0 | 	shl	local04, #1
0b920     15 2D 02 F1 | 	add	local04, local03
0b924     02 2C 66 F0 | 	shl	local04, #2
0b928     F2 38 02 F6 | 	mov	local10, objptr
0b92c     47 00 00 FF 
0b930     9C 38 06 F1 | 	add	local10, ##36508
0b934     1C 2D 02 F1 | 	add	local04, local10
0b938     08 2C 06 F1 | 	add	local04, #8
0b93c     16 39 02 FB | 	rdlong	local10, local04
0b940     2D 38 0E F2 | 	cmp	local10, #45 wz
0b944     38 00 90 5D |  if_ne	jmp	#LR__0939
0b948     15 2D 02 F6 | 	mov	local04, local03
0b94c     01 2C 66 F0 | 	shl	local04, #1
0b950     15 2D 02 F1 | 	add	local04, local03
0b954     02 2C 66 F0 | 	shl	local04, #2
0b958     47 00 00 FF 
0b95c     9C E4 05 F1 | 	add	objptr, ##36508
0b960     F2 2C 02 F1 | 	add	local04, objptr
0b964     03 00 00 FF 
0b968     00 E4 05 F1 | 	add	objptr, ##1536
0b96c     F2 38 02 FB | 	rdlong	local10, objptr
0b970     4A 00 00 FF 
0b974     9C E4 85 F1 | 	sub	objptr, ##38044
0b978     02 38 86 F1 | 	sub	local10, #2
0b97c     16 39 62 FC | 	wrlong	local10, local04
0b980                 | LR__0939
0b980     01 2A 86 F1 | 	sub	local03, #1
0b984     14 2B 52 F2 | 	cmps	local03, local02 wc
0b988     8C FF 9F 3D |  if_ae	jmp	#LR__0938
0b98c                 | LR__0940
0b98c                 | ' return 0
0b98c     00 FA 05 F6 | 	mov	result1, #0
0b990                 | LR__0941
0b990     A7 F0 03 F6 | 	mov	ptra, fp
0b994     B2 00 A0 FD | 	call	#popregs_
0b998                 | _compile_on_ret
0b998     2D 00 64 FD | 	ret
0b99c                 | 
0b99c                 | ' 
0b99c                 | ' '----- A helper for compile_input and compile_read
0b99c                 | '  
0b99c                 | ' function getaddr() as ulong
0b99c                 | _getaddr
0b99c     0B 4A 05 F6 | 	mov	COUNT_, #11
0b9a0     A8 00 A0 FD | 	call	#pushregs_
0b9a4     37 00 00 FF 
0b9a8     64 E4 05 F1 | 	add	objptr, ##28260
0b9ac     F2 2C 02 FB | 	rdlong	local04, objptr
0b9b0     03 2C 66 F0 | 	shl	local04, #3
0b9b4     02 00 00 FF 
0b9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0b9bc     F2 2C 02 F1 | 	add	local04, objptr
0b9c0     16 2F 02 FB | 	rdlong	local05, local04
0b9c4     01 30 66 F6 | 	neg	local06, #1
0b9c8                 | ' 
0b9c8                 | ' varname$=lparts(ct).part$
0b9c8                 | ' j=-1
0b9c8                 | ' 
0b9c8                 | ' for i=0 to varnum-1
0b9c8     00 32 06 F6 | 	mov	local07, #0
0b9cc     04 E4 85 F1 | 	sub	objptr, #4
0b9d0     F2 34 02 FB | 	rdlong	local08, objptr
0b9d4     35 00 00 FF 
0b9d8     28 E4 85 F1 | 	sub	objptr, ##27176
0b9dc                 | LR__0950
0b9dc     1A 33 52 F2 | 	cmps	local07, local08 wc
0b9e0     34 00 90 3D |  if_ae	jmp	#LR__0951
0b9e4                 | '   if variables(i).name=varname$ then j=i : exit
0b9e4     19 2D 02 F6 | 	mov	local04, local07
0b9e8     04 2C 66 F0 | 	shl	local04, #4
0b9ec     F2 14 02 F6 | 	mov	arg02, objptr
0b9f0     15 00 00 FF 
0b9f4     18 14 06 F1 | 	add	arg02, ##10776
0b9f8     0A 2D 02 F1 | 	add	local04, arg02
0b9fc     16 13 02 FB | 	rdlong	arg01, local04
0ba00     17 15 02 F6 | 	mov	arg02, local05
0ba04     C8 96 B1 FD | 	call	#__system___string_cmp
0ba08     00 FA 0D F2 | 	cmp	result1, #0 wz
0ba0c     19 31 02 A6 |  if_e	mov	local06, local07
0ba10     01 32 06 51 |  if_ne	add	local07, #1
0ba14     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0ba18                 | LR__0951
0ba18                 | ' if  j=-1 andalso varnum<maxvars then   
0ba18     FF FF 7F FF 
0ba1c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0ba20     A8 00 90 5D |  if_ne	jmp	#LR__0952
0ba24     35 00 00 FF 
0ba28     28 E4 05 F1 | 	add	objptr, ##27176
0ba2c     F2 34 02 FB | 	rdlong	local08, objptr
0ba30     35 00 00 FF 
0ba34     28 E4 85 F1 | 	sub	objptr, ##27176
0ba38     02 00 00 FF 
0ba3c     00 34 56 F2 | 	cmps	local08, ##1024 wc
0ba40     88 00 90 3D |  if_ae	jmp	#LR__0952
0ba44     35 00 00 FF 
0ba48     28 E4 05 F1 | 	add	objptr, ##27176
0ba4c     F2 2C 02 FB | 	rdlong	local04, objptr
0ba50     04 2C 66 F0 | 	shl	local04, #4
0ba54     20 00 00 FF 
0ba58     10 E4 85 F1 | 	sub	objptr, ##16400
0ba5c     F2 2C 02 F1 | 	add	local04, objptr
0ba60     16 2F 62 FC | 	wrlong	local05, local04
0ba64     20 00 00 FF 
0ba68     10 E4 05 F1 | 	add	objptr, ##16400
0ba6c     F2 2C 02 FB | 	rdlong	local04, objptr
0ba70     04 2C 66 F0 | 	shl	local04, #4
0ba74     20 00 00 FF 
0ba78     10 E4 85 F1 | 	sub	objptr, ##16400
0ba7c     F2 2C 02 F1 | 	add	local04, objptr
0ba80     04 2C 06 F1 | 	add	local04, #4
0ba84     16 01 68 FC | 	wrlong	#0, local04
0ba88     20 00 00 FF 
0ba8c     10 E4 05 F1 | 	add	objptr, ##16400
0ba90     F2 2C 02 FB | 	rdlong	local04, objptr
0ba94     04 2C 66 F0 | 	shl	local04, #4
0ba98     20 00 00 FF 
0ba9c     10 E4 85 F1 | 	sub	objptr, ##16400
0baa0     F2 2C 02 F1 | 	add	local04, objptr
0baa4     0C 2C 06 F1 | 	add	local04, #12
0baa8     16 39 68 FC | 	wrlong	#28, local04
0baac     20 00 00 FF 
0bab0     10 E4 05 F1 | 	add	objptr, ##16400
0bab4     F2 34 02 FB | 	rdlong	local08, objptr
0bab8     1A 31 02 F6 | 	mov	local06, local08
0babc     01 34 06 F1 | 	add	local08, #1
0bac0     F2 34 62 FC | 	wrlong	local08, objptr
0bac4     35 00 00 FF 
0bac8     28 E4 85 F1 | 	sub	objptr, ##27176
0bacc                 | LR__0952
0bacc     00 32 06 F6 | 	mov	local07, #0
0bad0                 | ' numpar=0
0bad0                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bad0     37 00 00 FF 
0bad4     64 E4 05 F1 | 	add	objptr, ##28260
0bad8     F2 2C 02 FB | 	rdlong	local04, objptr
0badc     01 2C 06 F1 | 	add	local04, #1
0bae0     03 2C 66 F0 | 	shl	local04, #3
0bae4     02 00 00 FF 
0bae8     38 E4 85 F1 | 	sub	objptr, ##1080
0baec     F2 2C 02 F1 | 	add	local04, objptr
0baf0     04 2C 06 F1 | 	add	local04, #4
0baf4     16 35 02 FB | 	rdlong	local08, local04
0baf8     15 34 0E F2 | 	cmp	local08, #21 wz
0bafc     35 00 00 FF 
0bb00     2C E4 85 F1 | 	sub	objptr, ##27180
0bb04     54 01 90 5D |  if_ne	jmp	#LR__0957
0bb08     37 00 00 FF 
0bb0c     64 E4 05 F1 | 	add	objptr, ##28260
0bb10     F2 36 02 FB | 	rdlong	local09, objptr
0bb14     01 36 06 F1 | 	add	local09, #1
0bb18     F2 36 62 FC | 	wrlong	local09, objptr
0bb1c     37 00 00 FF 
0bb20     64 E4 85 F1 | 	sub	objptr, ##28260
0bb24                 | '   ct+=1 											' omit this lpar, this is for expr list
0bb24                 | '   do
0bb24                 | LR__0953
0bb24     37 00 00 FF 
0bb28     64 E4 05 F1 | 	add	objptr, ##28260
0bb2c     F2 2C 02 FB | 	rdlong	local04, objptr
0bb30     01 2C 06 F1 | 	add	local04, #1
0bb34     F2 2C 62 FC | 	wrlong	local04, objptr
0bb38                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bb38                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bb38     03 2C 66 F0 | 	shl	local04, #3
0bb3c     02 00 00 FF 
0bb40     38 E4 85 F1 | 	sub	objptr, ##1080
0bb44     F2 2C 02 F1 | 	add	local04, objptr
0bb48     04 2C 06 F1 | 	add	local04, #4
0bb4c     16 37 02 FB | 	rdlong	local09, local04
0bb50     15 36 0E F2 | 	cmp	local09, #21 wz
0bb54     35 00 00 FF 
0bb58     2C E4 85 F1 | 	sub	objptr, ##27180
0bb5c     44 00 90 5D |  if_ne	jmp	#LR__0954
0bb60     37 00 00 FF 
0bb64     64 E4 05 F1 | 	add	objptr, ##28260
0bb68     F2 36 02 FB | 	rdlong	local09, objptr
0bb6c     01 36 06 F1 | 	add	local09, #1
0bb70     F2 36 62 FC | 	wrlong	local09, objptr
0bb74     37 00 00 FF 
0bb78     64 E4 85 F1 | 	sub	objptr, ##28260
0bb7c     AC 01 B0 FD | 	call	#_expr
0bb80     FD 38 02 F6 | 	mov	local10, result1
0bb84     37 00 00 FF 
0bb88     64 E4 05 F1 | 	add	objptr, ##28260
0bb8c     F2 36 02 FB | 	rdlong	local09, objptr
0bb90     01 36 06 F1 | 	add	local09, #1
0bb94     F2 36 62 FC | 	wrlong	local09, objptr
0bb98     37 00 00 FF 
0bb9c     64 E4 85 F1 | 	sub	objptr, ##28260
0bba0     08 00 90 FD | 	jmp	#LR__0955
0bba4                 | LR__0954
0bba4     84 01 B0 FD | 	call	#_expr
0bba8     FD 38 02 F6 | 	mov	local10, result1
0bbac                 | LR__0955
0bbac                 | '     if err>0 then return err
0bbac     01 38 56 F2 | 	cmps	local10, #1 wc
0bbb0     1C FB 01 36 |  if_ae	mov	result1, local10
0bbb4     68 01 90 3D |  if_ae	jmp	#LR__0958
0bbb8     01 32 06 F1 | 	add	local07, #1
0bbbc     37 00 00 FF 
0bbc0     64 E4 05 F1 | 	add	objptr, ##28260
0bbc4     F2 2C 02 FB | 	rdlong	local04, objptr
0bbc8     03 2C 66 F0 | 	shl	local04, #3
0bbcc     02 00 00 FF 
0bbd0     38 E4 85 F1 | 	sub	objptr, ##1080
0bbd4     F2 2C 02 F1 | 	add	local04, objptr
0bbd8     04 2C 06 F1 | 	add	local04, #4
0bbdc     16 39 02 FB | 	rdlong	local10, local04
0bbe0     14 38 0E F2 | 	cmp	local10, #20 wz
0bbe4     35 00 00 FF 
0bbe8     2C E4 85 F1 | 	sub	objptr, ##27180
0bbec     34 00 90 AD |  if_e	jmp	#LR__0956
0bbf0     37 00 00 FF 
0bbf4     64 E4 05 F1 | 	add	objptr, ##28260
0bbf8     F2 38 02 FB | 	rdlong	local10, objptr
0bbfc     03 38 66 F0 | 	shl	local10, #3
0bc00     02 00 00 FF 
0bc04     38 E4 85 F1 | 	sub	objptr, ##1080
0bc08     F2 38 02 F1 | 	add	local10, objptr
0bc0c     04 38 06 F1 | 	add	local10, #4
0bc10     1C 39 02 FB | 	rdlong	local10, local10
0bc14     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc18     35 00 00 FF 
0bc1c     2C E4 85 F1 | 	sub	objptr, ##27180
0bc20     00 FF 9F 5D |  if_ne	jmp	#LR__0953
0bc24                 | LR__0956
0bc24                 | '     if lparts(ct).token=token_end then return 14
0bc24     37 00 00 FF 
0bc28     64 E4 05 F1 | 	add	objptr, ##28260
0bc2c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc30     03 2C 66 F0 | 	shl	local04, #3
0bc34     02 00 00 FF 
0bc38     38 E4 85 F1 | 	sub	objptr, ##1080
0bc3c     F2 2C 02 F1 | 	add	local04, objptr
0bc40     04 2C 06 F1 | 	add	local04, #4
0bc44     16 39 02 FB | 	rdlong	local10, local04
0bc48     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc4c     35 00 00 FF 
0bc50     2C E4 85 F1 | 	sub	objptr, ##27180
0bc54     0E FA 05 A6 |  if_e	mov	result1, #14
0bc58     C4 00 90 AD |  if_e	jmp	#LR__0958
0bc5c                 | LR__0957
0bc5c     19 29 02 F6 | 	mov	local02, local07
0bc60     12 2A 06 F6 | 	mov	local03, #18
0bc64     18 27 02 F6 | 	mov	local01, local06
0bc68     13 37 02 F6 | 	mov	local09, local01
0bc6c     14 3B 02 F6 | 	mov	local11, local02
0bc70     15 27 02 F6 | 	mov	local01, local03
0bc74     4A 00 00 FF 
0bc78     9C E4 05 F1 | 	add	objptr, ##38044
0bc7c     F2 38 02 FB | 	rdlong	local10, objptr
0bc80     1C 33 02 F6 | 	mov	local07, local10
0bc84     01 32 66 F0 | 	shl	local07, #1
0bc88     1C 33 02 F1 | 	add	local07, local10
0bc8c     02 32 66 F0 | 	shl	local07, #2
0bc90     03 00 00 FF 
0bc94     00 E4 85 F1 | 	sub	objptr, ##1536
0bc98     F2 32 02 F1 | 	add	local07, objptr
0bc9c     19 37 62 FC | 	wrlong	local09, local07
0bca0     03 00 00 FF 
0bca4     00 E4 05 F1 | 	add	objptr, ##1536
0bca8     F2 38 02 FB | 	rdlong	local10, objptr
0bcac     1C 37 02 F6 | 	mov	local09, local10
0bcb0     01 36 66 F0 | 	shl	local09, #1
0bcb4     1C 37 02 F1 | 	add	local09, local10
0bcb8     02 36 66 F0 | 	shl	local09, #2
0bcbc     03 00 00 FF 
0bcc0     00 E4 85 F1 | 	sub	objptr, ##1536
0bcc4     F2 36 02 F1 | 	add	local09, objptr
0bcc8     04 36 06 F1 | 	add	local09, #4
0bccc     1B 3B 62 FC | 	wrlong	local11, local09
0bcd0     03 00 00 FF 
0bcd4     00 E4 05 F1 | 	add	objptr, ##1536
0bcd8     F2 3A 02 FB | 	rdlong	local11, objptr
0bcdc     1D 39 02 F6 | 	mov	local10, local11
0bce0     01 38 66 F0 | 	shl	local10, #1
0bce4     1D 39 02 F1 | 	add	local10, local11
0bce8     02 38 66 F0 | 	shl	local10, #2
0bcec     03 00 00 FF 
0bcf0     00 E4 85 F1 | 	sub	objptr, ##1536
0bcf4     F2 38 02 F1 | 	add	local10, objptr
0bcf8     08 38 06 F1 | 	add	local10, #8
0bcfc     1C 27 62 FC | 	wrlong	local01, local10
0bd00     03 00 00 FF 
0bd04     00 E4 05 F1 | 	add	objptr, ##1536
0bd08     F2 36 02 FB | 	rdlong	local09, objptr
0bd0c     01 36 06 F1 | 	add	local09, #1
0bd10     F2 36 62 FC | 	wrlong	local09, objptr
0bd14     4A 00 00 FF 
0bd18     9C E4 85 F1 | 	sub	objptr, ##38044
0bd1c                 | ' t2.result.twowords(1)=numpar
0bd1c                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bd1c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bd1c                 | ' return 0
0bd1c     00 FA 05 F6 | 	mov	result1, #0
0bd20                 | LR__0958
0bd20     A7 F0 03 F6 | 	mov	ptra, fp
0bd24     B2 00 A0 FD | 	call	#popregs_
0bd28                 | _getaddr_ret
0bd28     2D 00 64 FD | 	ret
0bd2c                 | 
0bd2c                 | ' 
0bd2c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bd2c                 | ' '--------------------------------------------- 
0bd2c                 | ' 
0bd2c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd2c                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bd2c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd2c                 | ' 
0bd2c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd2c                 | ' '
0bd2c                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bd2c                 | ' '
0bd2c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd2c                 | ' 
0bd2c                 | ' function expr() as ulong 
0bd2c                 | _expr
0bd2c     07 4A 05 F6 | 	mov	COUNT_, #7
0bd30     A8 00 A0 FD | 	call	#pushregs_
0bd34                 | _expr_enter
0bd34     37 00 00 FF 
0bd38     64 E4 05 F1 | 	add	objptr, ##28260
0bd3c     F2 2C 02 FB | 	rdlong	local04, objptr
0bd40     03 2C 66 F0 | 	shl	local04, #3
0bd44     02 00 00 FF 
0bd48     38 E4 85 F1 | 	sub	objptr, ##1080
0bd4c     F2 2C 02 F1 | 	add	local04, objptr
0bd50     04 2C 06 F1 | 	add	local04, #4
0bd54     16 2F 02 FB | 	rdlong	local05, local04
0bd58                 | ' 
0bd58                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bd58     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bd5c     35 00 00 FF 
0bd60     2C E4 85 F1 | 	sub	objptr, ##27180
0bd64     C4 00 90 5D |  if_ne	jmp	#LR__0960
0bd68     1D 26 06 F6 | 	mov	local01, #29
0bd6c     FF 2A 06 F6 | 	mov	local03, #255
0bd70     13 31 02 F6 | 	mov	local06, local01
0bd74     14 33 02 F6 | 	mov	local07, local02
0bd78     15 27 02 F6 | 	mov	local01, local03
0bd7c     4A 00 00 FF 
0bd80     9C E4 05 F1 | 	add	objptr, ##38044
0bd84     F2 2E 02 FB | 	rdlong	local05, objptr
0bd88     17 2D 02 F6 | 	mov	local04, local05
0bd8c     01 2C 66 F0 | 	shl	local04, #1
0bd90     17 2D 02 F1 | 	add	local04, local05
0bd94     02 2C 66 F0 | 	shl	local04, #2
0bd98     03 00 00 FF 
0bd9c     00 E4 85 F1 | 	sub	objptr, ##1536
0bda0     F2 2C 02 F1 | 	add	local04, objptr
0bda4     16 31 62 FC | 	wrlong	local06, local04
0bda8     03 00 00 FF 
0bdac     00 E4 05 F1 | 	add	objptr, ##1536
0bdb0     F2 30 02 FB | 	rdlong	local06, objptr
0bdb4     18 2F 02 F6 | 	mov	local05, local06
0bdb8     01 2E 66 F0 | 	shl	local05, #1
0bdbc     18 2F 02 F1 | 	add	local05, local06
0bdc0     02 2E 66 F0 | 	shl	local05, #2
0bdc4     03 00 00 FF 
0bdc8     00 E4 85 F1 | 	sub	objptr, ##1536
0bdcc     F2 2E 02 F1 | 	add	local05, objptr
0bdd0     04 2E 06 F1 | 	add	local05, #4
0bdd4     17 33 62 FC | 	wrlong	local07, local05
0bdd8     03 00 00 FF 
0bddc     00 E4 05 F1 | 	add	objptr, ##1536
0bde0     F2 32 02 FB | 	rdlong	local07, objptr
0bde4     19 31 02 F6 | 	mov	local06, local07
0bde8     01 30 66 F0 | 	shl	local06, #1
0bdec     19 31 02 F1 | 	add	local06, local07
0bdf0     02 30 66 F0 | 	shl	local06, #2
0bdf4     03 00 00 FF 
0bdf8     00 E4 85 F1 | 	sub	objptr, ##1536
0bdfc     F2 30 02 F1 | 	add	local06, objptr
0be00     08 30 06 F1 | 	add	local06, #8
0be04     18 27 62 FC | 	wrlong	local01, local06
0be08     03 00 00 FF 
0be0c     00 E4 05 F1 | 	add	objptr, ##1536
0be10     F2 30 02 FB | 	rdlong	local06, objptr
0be14     01 30 06 F1 | 	add	local06, #1
0be18     F2 30 62 FC | 	wrlong	local06, objptr
0be1c     4A 00 00 FF 
0be20     9C E4 85 F1 | 	sub	objptr, ##38044
0be24     1D FA 05 F6 | 	mov	result1, #29
0be28     64 01 90 FD | 	jmp	#LR__0963
0be2c                 | LR__0960
0be2c     00 26 06 F6 | 	mov	local01, #0
0be30     68 01 B0 FD | 	call	#_addsub
0be34                 | ' t3.result.uresult=0
0be34                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0be34                 | ' if err>0 then return err
0be34     01 FA 15 F2 | 	cmp	result1, #1 wc
0be38     54 01 90 3D |  if_ae	jmp	#LR__0963
0be3c     37 00 00 FF 
0be40     64 E4 05 F1 | 	add	objptr, ##28260
0be44     F2 2C 02 FB | 	rdlong	local04, objptr
0be48     03 2C 66 F0 | 	shl	local04, #3
0be4c     02 00 00 FF 
0be50     38 E4 85 F1 | 	sub	objptr, ##1080
0be54     F2 2C 02 F1 | 	add	local04, objptr
0be58     04 2C 06 F1 | 	add	local04, #4
0be5c     16 2F 02 FB | 	rdlong	local05, local04
0be60                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0be60                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0be60     35 00 00 FF 
0be64     2C E4 85 F1 | 	sub	objptr, ##27180
0be68                 | LR__0961
0be68     1B 2E 0E F2 | 	cmp	local05, #27 wz
0be6c     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0be70     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0be74     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0be78     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0be7c     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0be80     08 01 90 5D |  if_ne	jmp	#LR__0962
0be84     37 00 00 FF 
0be88     64 E4 05 F1 | 	add	objptr, ##28260
0be8c     F2 30 02 FB | 	rdlong	local06, objptr
0be90     01 30 06 F1 | 	add	local06, #1
0be94     F2 30 62 FC | 	wrlong	local06, objptr
0be98     37 00 00 FF 
0be9c     64 E4 85 F1 | 	sub	objptr, ##28260
0bea0     F8 00 B0 FD | 	call	#_addsub
0bea4                 | '   ct+=1
0bea4                 | '   err=addsub() : if err>0 then return err
0bea4     01 FA 15 F2 | 	cmp	result1, #1 wc
0bea8     E4 00 90 3D |  if_ae	jmp	#LR__0963
0beac     17 2B 02 F6 | 	mov	local03, local05
0beb0     13 31 02 F6 | 	mov	local06, local01
0beb4     14 33 02 F6 | 	mov	local07, local02
0beb8     15 2F 02 F6 | 	mov	local05, local03
0bebc     4A 00 00 FF 
0bec0     9C E4 05 F1 | 	add	objptr, ##38044
0bec4     F2 2C 02 FB | 	rdlong	local04, objptr
0bec8     16 FB 01 F6 | 	mov	result1, local04
0becc     01 FA 65 F0 | 	shl	result1, #1
0bed0     16 FB 01 F1 | 	add	result1, local04
0bed4     02 FA 65 F0 | 	shl	result1, #2
0bed8     03 00 00 FF 
0bedc     00 E4 85 F1 | 	sub	objptr, ##1536
0bee0     F2 FA 01 F1 | 	add	result1, objptr
0bee4     FD 30 62 FC | 	wrlong	local06, result1
0bee8     03 00 00 FF 
0beec     00 E4 05 F1 | 	add	objptr, ##1536
0bef0     F2 30 02 FB | 	rdlong	local06, objptr
0bef4     18 2D 02 F6 | 	mov	local04, local06
0bef8     01 2C 66 F0 | 	shl	local04, #1
0befc     18 2D 02 F1 | 	add	local04, local06
0bf00     02 2C 66 F0 | 	shl	local04, #2
0bf04     03 00 00 FF 
0bf08     00 E4 85 F1 | 	sub	objptr, ##1536
0bf0c     F2 2C 02 F1 | 	add	local04, objptr
0bf10     04 2C 06 F1 | 	add	local04, #4
0bf14     16 33 62 FC | 	wrlong	local07, local04
0bf18     03 00 00 FF 
0bf1c     00 E4 05 F1 | 	add	objptr, ##1536
0bf20     F2 32 02 FB | 	rdlong	local07, objptr
0bf24     19 31 02 F6 | 	mov	local06, local07
0bf28     01 30 66 F0 | 	shl	local06, #1
0bf2c     19 31 02 F1 | 	add	local06, local07
0bf30     02 30 66 F0 | 	shl	local06, #2
0bf34     03 00 00 FF 
0bf38     00 E4 85 F1 | 	sub	objptr, ##1536
0bf3c     F2 30 02 F1 | 	add	local06, objptr
0bf40     08 30 06 F1 | 	add	local06, #8
0bf44     18 2F 62 FC | 	wrlong	local05, local06
0bf48     03 00 00 FF 
0bf4c     00 E4 05 F1 | 	add	objptr, ##1536
0bf50     F2 30 02 FB | 	rdlong	local06, objptr
0bf54     01 30 06 F1 | 	add	local06, #1
0bf58     F2 30 62 FC | 	wrlong	local06, objptr
0bf5c     13 00 00 FF 
0bf60     38 E4 85 F1 | 	sub	objptr, ##9784
0bf64     F2 2C 02 FB | 	rdlong	local04, objptr
0bf68     03 2C 66 F0 | 	shl	local04, #3
0bf6c     02 00 00 FF 
0bf70     38 E4 85 F1 | 	sub	objptr, ##1080
0bf74     F2 2C 02 F1 | 	add	local04, objptr
0bf78     04 2C 06 F1 | 	add	local04, #4
0bf7c     16 2F 02 FB | 	rdlong	local05, local04
0bf80     35 00 00 FF 
0bf84     2C E4 85 F1 | 	sub	objptr, ##27180
0bf88     DC FE 9F FD | 	jmp	#LR__0961
0bf8c                 | LR__0962
0bf8c                 | ' return 0  
0bf8c     00 FA 05 F6 | 	mov	result1, #0
0bf90                 | LR__0963
0bf90     A7 F0 03 F6 | 	mov	ptra, fp
0bf94     B2 00 A0 FD | 	call	#popregs_
0bf98                 | _expr_ret
0bf98     2D 00 64 FD | 	ret
0bf9c                 | 
0bf9c                 | ' 
0bf9c                 | ' ' Second level operators : add, sub, logic
0bf9c                 | ' 
0bf9c                 | ' function addsub() as ulong
0bf9c                 | _addsub
0bf9c     07 4A 05 F6 | 	mov	COUNT_, #7
0bfa0     A8 00 A0 FD | 	call	#pushregs_
0bfa4                 | _addsub_enter
0bfa4     00 26 06 F6 | 	mov	local01, #0
0bfa8     60 01 B0 FD | 	call	#_muldiv
0bfac                 | ' 
0bfac                 | ' t3.result.uresult=0
0bfac                 | ' err=muldiv() : if err>0 then return err           			 
0bfac     01 FA 15 F2 | 	cmp	result1, #1 wc
0bfb0     4C 01 90 3D |  if_ae	jmp	#LR__0972
0bfb4     37 00 00 FF 
0bfb8     64 E4 05 F1 | 	add	objptr, ##28260
0bfbc     F2 2C 02 FB | 	rdlong	local04, objptr
0bfc0     03 2C 66 F0 | 	shl	local04, #3
0bfc4     02 00 00 FF 
0bfc8     38 E4 85 F1 | 	sub	objptr, ##1080
0bfcc     F2 2C 02 F1 | 	add	local04, objptr
0bfd0     04 2C 06 F1 | 	add	local04, #4
0bfd4     16 2F 02 FB | 	rdlong	local05, local04
0bfd8                 | ' op = lparts(ct).token				 
0bfd8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0bfd8     35 00 00 FF 
0bfdc     2C E4 85 F1 | 	sub	objptr, ##27180
0bfe0                 | LR__0970
0bfe0     01 2E 0E F2 | 	cmp	local05, #1 wz
0bfe4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0bfe8     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0bfec     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0bff0     08 01 90 5D |  if_ne	jmp	#LR__0971
0bff4     37 00 00 FF 
0bff8     64 E4 05 F1 | 	add	objptr, ##28260
0bffc     F2 2C 02 FB | 	rdlong	local04, objptr
0c000     01 2C 06 F1 | 	add	local04, #1
0c004     F2 2C 62 FC | 	wrlong	local04, objptr
0c008     37 00 00 FF 
0c00c     64 E4 85 F1 | 	sub	objptr, ##28260
0c010     F8 00 B0 FD | 	call	#_muldiv
0c014                 | '   ct+=1
0c014                 | '   err=muldiv() : if err>0 then return err   
0c014     01 FA 15 F2 | 	cmp	result1, #1 wc
0c018     E4 00 90 3D |  if_ae	jmp	#LR__0972
0c01c     17 2B 02 F6 | 	mov	local03, local05
0c020     13 31 02 F6 | 	mov	local06, local01
0c024     14 33 02 F6 | 	mov	local07, local02
0c028     15 2F 02 F6 | 	mov	local05, local03
0c02c     4A 00 00 FF 
0c030     9C E4 05 F1 | 	add	objptr, ##38044
0c034     F2 2C 02 FB | 	rdlong	local04, objptr
0c038     16 FB 01 F6 | 	mov	result1, local04
0c03c     01 FA 65 F0 | 	shl	result1, #1
0c040     16 FB 01 F1 | 	add	result1, local04
0c044     02 FA 65 F0 | 	shl	result1, #2
0c048     03 00 00 FF 
0c04c     00 E4 85 F1 | 	sub	objptr, ##1536
0c050     F2 FA 01 F1 | 	add	result1, objptr
0c054     FD 30 62 FC | 	wrlong	local06, result1
0c058     03 00 00 FF 
0c05c     00 E4 05 F1 | 	add	objptr, ##1536
0c060     F2 30 02 FB | 	rdlong	local06, objptr
0c064     18 2D 02 F6 | 	mov	local04, local06
0c068     01 2C 66 F0 | 	shl	local04, #1
0c06c     18 2D 02 F1 | 	add	local04, local06
0c070     02 2C 66 F0 | 	shl	local04, #2
0c074     03 00 00 FF 
0c078     00 E4 85 F1 | 	sub	objptr, ##1536
0c07c     F2 2C 02 F1 | 	add	local04, objptr
0c080     04 2C 06 F1 | 	add	local04, #4
0c084     16 33 62 FC | 	wrlong	local07, local04
0c088     03 00 00 FF 
0c08c     00 E4 05 F1 | 	add	objptr, ##1536
0c090     F2 32 02 FB | 	rdlong	local07, objptr
0c094     19 31 02 F6 | 	mov	local06, local07
0c098     01 30 66 F0 | 	shl	local06, #1
0c09c     19 31 02 F1 | 	add	local06, local07
0c0a0     02 30 66 F0 | 	shl	local06, #2
0c0a4     03 00 00 FF 
0c0a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0ac     F2 30 02 F1 | 	add	local06, objptr
0c0b0     08 30 06 F1 | 	add	local06, #8
0c0b4     18 2F 62 FC | 	wrlong	local05, local06
0c0b8     03 00 00 FF 
0c0bc     00 E4 05 F1 | 	add	objptr, ##1536
0c0c0     F2 30 02 FB | 	rdlong	local06, objptr
0c0c4     01 30 06 F1 | 	add	local06, #1
0c0c8     F2 30 62 FC | 	wrlong	local06, objptr
0c0cc     13 00 00 FF 
0c0d0     38 E4 85 F1 | 	sub	objptr, ##9784
0c0d4     F2 2C 02 FB | 	rdlong	local04, objptr
0c0d8     03 2C 66 F0 | 	shl	local04, #3
0c0dc     02 00 00 FF 
0c0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c0e4     F2 2C 02 F1 | 	add	local04, objptr
0c0e8     04 2C 06 F1 | 	add	local04, #4
0c0ec     16 2F 02 FB | 	rdlong	local05, local04
0c0f0     35 00 00 FF 
0c0f4     2C E4 85 F1 | 	sub	objptr, ##27180
0c0f8     E4 FE 9F FD | 	jmp	#LR__0970
0c0fc                 | LR__0971
0c0fc                 | ' return 0
0c0fc     00 FA 05 F6 | 	mov	result1, #0
0c100                 | LR__0972
0c100     A7 F0 03 F6 | 	mov	ptra, fp
0c104     B2 00 A0 FD | 	call	#popregs_
0c108                 | _addsub_ret
0c108     2D 00 64 FD | 	ret
0c10c                 | 
0c10c                 | ' 
0c10c                 | ' ' Third level operators : mul,div,shift,power
0c10c                 | ' 
0c10c                 | ' function muldiv() as ulong
0c10c                 | _muldiv
0c10c     07 4A 05 F6 | 	mov	COUNT_, #7
0c110     A8 00 A0 FD | 	call	#pushregs_
0c114                 | _muldiv_enter
0c114     00 26 06 F6 | 	mov	local01, #0
0c118     6C 01 B0 FD | 	call	#_getvalue
0c11c                 | ' 
0c11c                 | ' t3.result.uresult=0
0c11c                 | ' err=getvalue() : if err>0 then return err     
0c11c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c120     58 01 90 3D |  if_ae	jmp	#LR__0982
0c124     37 00 00 FF 
0c128     64 E4 05 F1 | 	add	objptr, ##28260
0c12c     F2 2C 02 FB | 	rdlong	local04, objptr
0c130     03 2C 66 F0 | 	shl	local04, #3
0c134     02 00 00 FF 
0c138     38 E4 85 F1 | 	sub	objptr, ##1080
0c13c     F2 2C 02 F1 | 	add	local04, objptr
0c140     04 2C 06 F1 | 	add	local04, #4
0c144     16 2F 02 FB | 	rdlong	local05, local04
0c148                 | ' op = lparts(ct).token
0c148                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c148     35 00 00 FF 
0c14c     2C E4 85 F1 | 	sub	objptr, ##27180
0c150                 | LR__0980
0c150     05 2E 0E F2 | 	cmp	local05, #5 wz
0c154     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c158     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c15c     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c160     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c164     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c168     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c16c     08 01 90 5D |  if_ne	jmp	#LR__0981
0c170     37 00 00 FF 
0c174     64 E4 05 F1 | 	add	objptr, ##28260
0c178     F2 2C 02 FB | 	rdlong	local04, objptr
0c17c     01 2C 06 F1 | 	add	local04, #1
0c180     F2 2C 62 FC | 	wrlong	local04, objptr
0c184     37 00 00 FF 
0c188     64 E4 85 F1 | 	sub	objptr, ##28260
0c18c     F8 00 B0 FD | 	call	#_getvalue
0c190                 | '   ct+=1
0c190                 | '   err=getvalue() :if err>0 then return err   
0c190     01 FA 15 F2 | 	cmp	result1, #1 wc
0c194     E4 00 90 3D |  if_ae	jmp	#LR__0982
0c198     17 2B 02 F6 | 	mov	local03, local05
0c19c     13 31 02 F6 | 	mov	local06, local01
0c1a0     14 33 02 F6 | 	mov	local07, local02
0c1a4     15 2F 02 F6 | 	mov	local05, local03
0c1a8     4A 00 00 FF 
0c1ac     9C E4 05 F1 | 	add	objptr, ##38044
0c1b0     F2 2C 02 FB | 	rdlong	local04, objptr
0c1b4     16 FB 01 F6 | 	mov	result1, local04
0c1b8     01 FA 65 F0 | 	shl	result1, #1
0c1bc     16 FB 01 F1 | 	add	result1, local04
0c1c0     02 FA 65 F0 | 	shl	result1, #2
0c1c4     03 00 00 FF 
0c1c8     00 E4 85 F1 | 	sub	objptr, ##1536
0c1cc     F2 FA 01 F1 | 	add	result1, objptr
0c1d0     FD 30 62 FC | 	wrlong	local06, result1
0c1d4     03 00 00 FF 
0c1d8     00 E4 05 F1 | 	add	objptr, ##1536
0c1dc     F2 30 02 FB | 	rdlong	local06, objptr
0c1e0     18 2D 02 F6 | 	mov	local04, local06
0c1e4     01 2C 66 F0 | 	shl	local04, #1
0c1e8     18 2D 02 F1 | 	add	local04, local06
0c1ec     02 2C 66 F0 | 	shl	local04, #2
0c1f0     03 00 00 FF 
0c1f4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1f8     F2 2C 02 F1 | 	add	local04, objptr
0c1fc     04 2C 06 F1 | 	add	local04, #4
0c200     16 33 62 FC | 	wrlong	local07, local04
0c204     03 00 00 FF 
0c208     00 E4 05 F1 | 	add	objptr, ##1536
0c20c     F2 32 02 FB | 	rdlong	local07, objptr
0c210     19 31 02 F6 | 	mov	local06, local07
0c214     01 30 66 F0 | 	shl	local06, #1
0c218     19 31 02 F1 | 	add	local06, local07
0c21c     02 30 66 F0 | 	shl	local06, #2
0c220     03 00 00 FF 
0c224     00 E4 85 F1 | 	sub	objptr, ##1536
0c228     F2 30 02 F1 | 	add	local06, objptr
0c22c     08 30 06 F1 | 	add	local06, #8
0c230     18 2F 62 FC | 	wrlong	local05, local06
0c234     03 00 00 FF 
0c238     00 E4 05 F1 | 	add	objptr, ##1536
0c23c     F2 30 02 FB | 	rdlong	local06, objptr
0c240     01 30 06 F1 | 	add	local06, #1
0c244     F2 30 62 FC | 	wrlong	local06, objptr
0c248     13 00 00 FF 
0c24c     38 E4 85 F1 | 	sub	objptr, ##9784
0c250     F2 2C 02 FB | 	rdlong	local04, objptr
0c254     03 2C 66 F0 | 	shl	local04, #3
0c258     02 00 00 FF 
0c25c     38 E4 85 F1 | 	sub	objptr, ##1080
0c260     F2 2C 02 F1 | 	add	local04, objptr
0c264     04 2C 06 F1 | 	add	local04, #4
0c268     16 2F 02 FB | 	rdlong	local05, local04
0c26c     35 00 00 FF 
0c270     2C E4 85 F1 | 	sub	objptr, ##27180
0c274     D8 FE 9F FD | 	jmp	#LR__0980
0c278                 | LR__0981
0c278                 | ' return 0
0c278     00 FA 05 F6 | 	mov	result1, #0
0c27c                 | LR__0982
0c27c     A7 F0 03 F6 | 	mov	ptra, fp
0c280     B2 00 A0 FD | 	call	#popregs_
0c284                 | _muldiv_ret
0c284     2D 00 64 FD | 	ret
0c288                 | 
0c288                 | ' 
0c288                 | ' ' Get a value for operations
0c288                 | ' 
0c288                 | ' function getvalue()  as ulong
0c288                 | _getvalue
0c288     0B 4A 05 F6 | 	mov	COUNT_, #11
0c28c     A8 00 A0 FD | 	call	#pushregs_
0c290                 | _getvalue_enter
0c290     01 2C 06 F6 | 	mov	local04, #1
0c294     00 26 06 F6 | 	mov	local01, #0
0c298     1D 2A 06 F6 | 	mov	local03, #29
0c29c     37 00 00 FF 
0c2a0     64 E4 05 F1 | 	add	objptr, ##28260
0c2a4     F2 16 02 FB | 	rdlong	arg03, objptr
0c2a8     03 16 66 F0 | 	shl	arg03, #3
0c2ac     02 00 00 FF 
0c2b0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2b4     F2 16 02 F1 | 	add	arg03, objptr
0c2b8     04 16 06 F1 | 	add	arg03, #4
0c2bc     0B 2F 02 FB | 	rdlong	local05, arg03
0c2c0                 | ' 
0c2c0                 | ' m=1											' for negative numbers
0c2c0                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c2c0                 | ' op=lparts(ct).token
0c2c0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c2c0     02 2E 0E F2 | 	cmp	local05, #2 wz
0c2c4     35 00 00 FF 
0c2c8     2C E4 85 F1 | 	sub	objptr, ##27180
0c2cc     38 00 90 5D |  if_ne	jmp	#LR__0990
0c2d0     01 2C 66 F6 | 	neg	local04, #1
0c2d4     37 00 00 FF 
0c2d8     64 E4 05 F1 | 	add	objptr, ##28260
0c2dc     F2 2E 02 FB | 	rdlong	local05, objptr
0c2e0     01 2E 06 F1 | 	add	local05, #1
0c2e4     F2 2E 62 FC | 	wrlong	local05, objptr
0c2e8     03 2E 66 F0 | 	shl	local05, #3
0c2ec     02 00 00 FF 
0c2f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2f4     F2 2E 02 F1 | 	add	local05, objptr
0c2f8     04 2E 06 F1 | 	add	local05, #4
0c2fc     17 2F 02 FB | 	rdlong	local05, local05
0c300     35 00 00 FF 
0c304     2C E4 85 F1 | 	sub	objptr, ##27180
0c308                 | LR__0990
0c308                 | ' select case op
0c308     01 00 00 FF 
0c30c     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c310     44 00 90 AD |  if_e	jmp	#LR__0991
0c314     01 00 00 FF 
0c318     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c31c     90 01 90 AD |  if_e	jmp	#LR__0994
0c320     01 00 00 FF 
0c324     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c328     44 04 90 AD |  if_e	jmp	#LR__1001
0c32c     01 00 00 FF 
0c330     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c334     A8 05 90 AD |  if_e	jmp	#LR__1004
0c338     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c33c     78 07 90 AD |  if_e	jmp	#LR__1009
0c340     01 00 00 FF 
0c344     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c348     70 08 90 AD |  if_e	jmp	#LR__1010
0c34c     15 2E 0E F2 | 	cmp	local05, #21 wz
0c350     98 08 90 AD |  if_e	jmp	#LR__1011
0c354     0C 09 90 FD | 	jmp	#LR__1012
0c358                 | LR__0991
0c358                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c358     01 2C 0E F2 | 	cmp	local04, #1 wz
0c35c     3C 00 90 5D |  if_ne	jmp	#LR__0992
0c360     37 00 00 FF 
0c364     64 E4 05 F1 | 	add	objptr, ##28260
0c368     F2 2E 02 FB | 	rdlong	local05, objptr
0c36c     03 2E 66 F0 | 	shl	local05, #3
0c370     02 00 00 FF 
0c374     38 E4 85 F1 | 	sub	objptr, ##1080
0c378     F2 2E 02 F1 | 	add	local05, objptr
0c37c     17 13 02 FB | 	rdlong	arg01, local05
0c380     00 14 06 F6 | 	mov	arg02, #0
0c384     35 00 00 FF 
0c388     2C E4 85 F1 | 	sub	objptr, ##27180
0c38c     10 B2 B1 FD | 	call	#__system____builtin_atoi
0c390     FD 2C 02 FD | 	qmul	local04, result1
0c394     18 26 62 FD | 	getqx	local01
0c398     1C 2A 06 F6 | 	mov	local03, #28
0c39c                 | LR__0992
0c39c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c39c     FF FF 7F FF 
0c3a0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c3a4     3C 00 90 5D |  if_ne	jmp	#LR__0993
0c3a8     37 00 00 FF 
0c3ac     64 E4 05 F1 | 	add	objptr, ##28260
0c3b0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3b4     03 2E 66 F0 | 	shl	local05, #3
0c3b8     02 00 00 FF 
0c3bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c3c0     F2 2E 02 F1 | 	add	local05, objptr
0c3c4     17 13 02 FB | 	rdlong	arg01, local05
0c3c8     00 14 06 F6 | 	mov	arg02, #0
0c3cc     35 00 00 FF 
0c3d0     2C E4 85 F1 | 	sub	objptr, ##27180
0c3d4     C8 B1 B1 FD | 	call	#__system____builtin_atoi
0c3d8     FD 2C 02 FD | 	qmul	local04, result1
0c3dc     18 26 62 FD | 	getqx	local01
0c3e0     1C 2A 06 F6 | 	mov	local03, #28
0c3e4                 | LR__0993
0c3e4     13 31 02 F6 | 	mov	local06, local01
0c3e8     14 33 02 F6 | 	mov	local07, local02
0c3ec     15 2F 02 F6 | 	mov	local05, local03
0c3f0     4A 00 00 FF 
0c3f4     9C E4 05 F1 | 	add	objptr, ##38044
0c3f8     F2 26 02 FB | 	rdlong	local01, objptr
0c3fc     13 2D 02 F6 | 	mov	local04, local01
0c400     01 2C 66 F0 | 	shl	local04, #1
0c404     13 2D 02 F1 | 	add	local04, local01
0c408     02 2C 66 F0 | 	shl	local04, #2
0c40c     03 00 00 FF 
0c410     00 E4 85 F1 | 	sub	objptr, ##1536
0c414     F2 2C 02 F1 | 	add	local04, objptr
0c418     16 31 62 FC | 	wrlong	local06, local04
0c41c     03 00 00 FF 
0c420     00 E4 05 F1 | 	add	objptr, ##1536
0c424     F2 30 02 FB | 	rdlong	local06, objptr
0c428     18 27 02 F6 | 	mov	local01, local06
0c42c     01 26 66 F0 | 	shl	local01, #1
0c430     18 27 02 F1 | 	add	local01, local06
0c434     02 26 66 F0 | 	shl	local01, #2
0c438     03 00 00 FF 
0c43c     00 E4 85 F1 | 	sub	objptr, ##1536
0c440     F2 26 02 F1 | 	add	local01, objptr
0c444     04 26 06 F1 | 	add	local01, #4
0c448     13 33 62 FC | 	wrlong	local07, local01
0c44c     03 00 00 FF 
0c450     00 E4 05 F1 | 	add	objptr, ##1536
0c454     F2 32 02 FB | 	rdlong	local07, objptr
0c458     19 31 02 F6 | 	mov	local06, local07
0c45c     01 30 66 F0 | 	shl	local06, #1
0c460     19 31 02 F1 | 	add	local06, local07
0c464     02 30 66 F0 | 	shl	local06, #2
0c468     03 00 00 FF 
0c46c     00 E4 85 F1 | 	sub	objptr, ##1536
0c470     F2 30 02 F1 | 	add	local06, objptr
0c474     08 30 06 F1 | 	add	local06, #8
0c478     18 2F 62 FC | 	wrlong	local05, local06
0c47c     03 00 00 FF 
0c480     00 E4 05 F1 | 	add	objptr, ##1536
0c484     F2 30 02 FB | 	rdlong	local06, objptr
0c488     01 30 06 F1 | 	add	local06, #1
0c48c     F2 30 62 FC | 	wrlong	local06, objptr
0c490     13 00 00 FF 
0c494     38 E4 85 F1 | 	sub	objptr, ##9784
0c498     F2 30 02 FB | 	rdlong	local06, objptr
0c49c     01 30 06 F1 | 	add	local06, #1
0c4a0     F2 30 62 FC | 	wrlong	local06, objptr
0c4a4     37 00 00 FF 
0c4a8     64 E4 85 F1 | 	sub	objptr, ##28260
0c4ac     E0 07 90 FD | 	jmp	#LR__1013
0c4b0                 | LR__0994
0c4b0                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c4b0     37 00 00 FF 
0c4b4     64 E4 05 F1 | 	add	objptr, ##28260
0c4b8     F2 16 02 FB | 	rdlong	arg03, objptr
0c4bc     03 16 66 F0 | 	shl	arg03, #3
0c4c0     02 00 00 FF 
0c4c4     38 E4 85 F1 | 	sub	objptr, ##1080
0c4c8     F2 16 02 F1 | 	add	arg03, objptr
0c4cc     0B 13 02 FB | 	rdlong	arg01, arg03
0c4d0     01 14 06 F6 | 	mov	arg02, #1
0c4d4     35 00 00 FF 
0c4d8     2C E4 85 F1 | 	sub	objptr, ##27180
0c4dc     8C 9F B1 FD | 	call	#__system__Left_S
0c4e0     FD 12 02 F6 | 	mov	arg01, result1
0c4e4     91 01 00 FF 
0c4e8     0D 15 06 F6 | 	mov	arg02, ##@LR__5538
0c4ec     E0 8B B1 FD | 	call	#__system___string_cmp
0c4f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c4f4     94 00 90 5D |  if_ne	jmp	#LR__0997
0c4f8     37 00 00 FF 
0c4fc     64 E4 05 F1 | 	add	objptr, ##28260
0c500     F2 32 02 FB | 	rdlong	local07, objptr
0c504     19 31 02 F6 | 	mov	local06, local07
0c508     03 30 66 F0 | 	shl	local06, #3
0c50c     02 00 00 FF 
0c510     38 E4 85 F1 | 	sub	objptr, ##1080
0c514     F2 30 02 F1 | 	add	local06, objptr
0c518     91 01 00 FF 
0c51c     0F 2F 06 F6 | 	mov	local05, ##@LR__5539
0c520     03 32 66 F0 | 	shl	local07, #3
0c524     F2 32 02 F1 | 	add	local07, objptr
0c528     19 33 02 FB | 	rdlong	local07, local07
0c52c     02 00 00 FF 
0c530     38 E4 05 F1 | 	add	objptr, ##1080
0c534     F2 26 02 FB | 	rdlong	local01, objptr
0c538     03 26 66 F0 | 	shl	local01, #3
0c53c     02 00 00 FF 
0c540     38 E4 85 F1 | 	sub	objptr, ##1080
0c544     F2 26 02 F1 | 	add	local01, objptr
0c548     13 13 02 FB | 	rdlong	arg01, local01
0c54c     35 00 00 FF 
0c550     2C E4 85 F1 | 	sub	objptr, ##27180
0c554     09 35 02 F6 | 	mov	local08, arg01
0c558     97 06 48 FB | 	callpa	#(@LR__0996-@LR__0995)>>2,fcache_load_ptr_
0c55c                 | LR__0995
0c55c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c560     01 34 06 51 |  if_ne	add	local08, #1
0c564     F4 FF 9F 5D |  if_ne	jmp	#LR__0995
0c568                 | LR__0996
0c568     09 35 82 F1 | 	sub	local08, arg01
0c56c     1A 15 02 F6 | 	mov	arg02, local08
0c570     01 14 86 F1 | 	sub	arg02, #1
0c574     19 13 02 F6 | 	mov	arg01, local07
0c578     78 9F B1 FD | 	call	#__system__Right_S
0c57c     FD 14 02 F6 | 	mov	arg02, result1
0c580     17 13 02 F6 | 	mov	arg01, local05
0c584     7C 8B B1 FD | 	call	#__system___string_concat
0c588     18 FB 61 FC | 	wrlong	result1, local06
0c58c                 | LR__0997
0c58c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c58c     37 00 00 FF 
0c590     64 E4 05 F1 | 	add	objptr, ##28260
0c594     F2 16 02 FB | 	rdlong	arg03, objptr
0c598     03 16 66 F0 | 	shl	arg03, #3
0c59c     02 00 00 FF 
0c5a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c5a4     F2 16 02 F1 | 	add	arg03, objptr
0c5a8     0B 13 02 FB | 	rdlong	arg01, arg03
0c5ac     01 14 06 F6 | 	mov	arg02, #1
0c5b0     35 00 00 FF 
0c5b4     2C E4 85 F1 | 	sub	objptr, ##27180
0c5b8     B0 9E B1 FD | 	call	#__system__Left_S
0c5bc     FD 12 02 F6 | 	mov	arg01, result1
0c5c0     91 01 00 FF 
0c5c4     12 15 06 F6 | 	mov	arg02, ##@LR__5540
0c5c8     04 8B B1 FD | 	call	#__system___string_cmp
0c5cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c5d0     94 00 90 5D |  if_ne	jmp	#LR__1000
0c5d4     37 00 00 FF 
0c5d8     64 E4 05 F1 | 	add	objptr, ##28260
0c5dc     F2 32 02 FB | 	rdlong	local07, objptr
0c5e0     19 31 02 F6 | 	mov	local06, local07
0c5e4     03 30 66 F0 | 	shl	local06, #3
0c5e8     02 00 00 FF 
0c5ec     38 E4 85 F1 | 	sub	objptr, ##1080
0c5f0     F2 30 02 F1 | 	add	local06, objptr
0c5f4     91 01 00 FF 
0c5f8     14 2F 06 F6 | 	mov	local05, ##@LR__5541
0c5fc     03 32 66 F0 | 	shl	local07, #3
0c600     F2 32 02 F1 | 	add	local07, objptr
0c604     19 33 02 FB | 	rdlong	local07, local07
0c608     02 00 00 FF 
0c60c     38 E4 05 F1 | 	add	objptr, ##1080
0c610     F2 26 02 FB | 	rdlong	local01, objptr
0c614     03 26 66 F0 | 	shl	local01, #3
0c618     02 00 00 FF 
0c61c     38 E4 85 F1 | 	sub	objptr, ##1080
0c620     F2 26 02 F1 | 	add	local01, objptr
0c624     13 13 02 FB | 	rdlong	arg01, local01
0c628     35 00 00 FF 
0c62c     2C E4 85 F1 | 	sub	objptr, ##27180
0c630     09 35 02 F6 | 	mov	local08, arg01
0c634     97 06 48 FB | 	callpa	#(@LR__0999-@LR__0998)>>2,fcache_load_ptr_
0c638                 | LR__0998
0c638     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c63c     01 34 06 51 |  if_ne	add	local08, #1
0c640     F4 FF 9F 5D |  if_ne	jmp	#LR__0998
0c644                 | LR__0999
0c644     09 35 82 F1 | 	sub	local08, arg01
0c648     1A 15 02 F6 | 	mov	arg02, local08
0c64c     01 14 86 F1 | 	sub	arg02, #1
0c650     19 13 02 F6 | 	mov	arg01, local07
0c654     9C 9E B1 FD | 	call	#__system__Right_S
0c658     FD 14 02 F6 | 	mov	arg02, result1
0c65c     17 13 02 F6 | 	mov	arg01, local05
0c660     A0 8A B1 FD | 	call	#__system___string_concat
0c664     18 FB 61 FC | 	wrlong	result1, local06
0c668                 | LR__1000
0c668     37 00 00 FF 
0c66c     64 E4 05 F1 | 	add	objptr, ##28260
0c670     F2 30 02 FB | 	rdlong	local06, objptr
0c674     03 30 66 F0 | 	shl	local06, #3
0c678     02 00 00 FF 
0c67c     38 E4 85 F1 | 	sub	objptr, ##1080
0c680     F2 30 02 F1 | 	add	local06, objptr
0c684     18 13 02 FB | 	rdlong	arg01, local06
0c688     00 14 06 F6 | 	mov	arg02, #0
0c68c     35 00 00 FF 
0c690     2C E4 85 F1 | 	sub	objptr, ##27180
0c694     08 AF B1 FD | 	call	#__system____builtin_atoi
0c698     FD 2C 02 FD | 	qmul	local04, result1
0c69c     4A 00 00 FF 
0c6a0     9C E4 05 F1 | 	add	objptr, ##38044
0c6a4     F2 30 02 FB | 	rdlong	local06, objptr
0c6a8     18 37 02 F6 | 	mov	local09, local06
0c6ac     01 36 66 F0 | 	shl	local09, #1
0c6b0     18 37 02 F1 | 	add	local09, local06
0c6b4     02 36 66 F0 | 	shl	local09, #2
0c6b8     03 00 00 FF 
0c6bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c6c0     F2 36 02 F1 | 	add	local09, objptr
0c6c4     03 00 00 FF 
0c6c8     00 E4 05 F1 | 	add	objptr, ##1536
0c6cc     18 26 62 FD | 	getqx	local01
0c6d0     1C 2A 06 F6 | 	mov	local03, #28
0c6d4     13 31 02 F6 | 	mov	local06, local01
0c6d8     14 33 02 F6 | 	mov	local07, local02
0c6dc     1B 31 62 FC | 	wrlong	local06, local09
0c6e0     15 37 02 F6 | 	mov	local09, local03
0c6e4     F2 30 02 FB | 	rdlong	local06, objptr
0c6e8     18 2F 02 F6 | 	mov	local05, local06
0c6ec     01 2E 66 F0 | 	shl	local05, #1
0c6f0     18 2F 02 F1 | 	add	local05, local06
0c6f4     02 2E 66 F0 | 	shl	local05, #2
0c6f8     03 00 00 FF 
0c6fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c700     F2 2E 02 F1 | 	add	local05, objptr
0c704     04 2E 06 F1 | 	add	local05, #4
0c708     17 33 62 FC | 	wrlong	local07, local05
0c70c     03 00 00 FF 
0c710     00 E4 05 F1 | 	add	objptr, ##1536
0c714     F2 32 02 FB | 	rdlong	local07, objptr
0c718     19 31 02 F6 | 	mov	local06, local07
0c71c     01 30 66 F0 | 	shl	local06, #1
0c720     19 31 02 F1 | 	add	local06, local07
0c724     02 30 66 F0 | 	shl	local06, #2
0c728     03 00 00 FF 
0c72c     00 E4 85 F1 | 	sub	objptr, ##1536
0c730     F2 30 02 F1 | 	add	local06, objptr
0c734     08 30 06 F1 | 	add	local06, #8
0c738     18 37 62 FC | 	wrlong	local09, local06
0c73c     03 00 00 FF 
0c740     00 E4 05 F1 | 	add	objptr, ##1536
0c744     F2 30 02 FB | 	rdlong	local06, objptr
0c748     01 30 06 F1 | 	add	local06, #1
0c74c     F2 30 62 FC | 	wrlong	local06, objptr
0c750     13 00 00 FF 
0c754     38 E4 85 F1 | 	sub	objptr, ##9784
0c758     F2 30 02 FB | 	rdlong	local06, objptr
0c75c     01 30 06 F1 | 	add	local06, #1
0c760     F2 30 62 FC | 	wrlong	local06, objptr
0c764     37 00 00 FF 
0c768     64 E4 85 F1 | 	sub	objptr, ##28260
0c76c     20 05 90 FD | 	jmp	#LR__1013
0c770                 | LR__1001
0c770                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c770     01 2C 0E F2 | 	cmp	local04, #1 wz
0c774     48 00 90 5D |  if_ne	jmp	#LR__1002
0c778     00 C0 1F FF 
0c77c     00 30 06 F6 | 	mov	local06, ##1065353216
0c780     37 00 00 FF 
0c784     64 E4 05 F1 | 	add	objptr, ##28260
0c788     F2 36 02 FB | 	rdlong	local09, objptr
0c78c     03 36 66 F0 | 	shl	local09, #3
0c790     02 00 00 FF 
0c794     38 E4 85 F1 | 	sub	objptr, ##1080
0c798     F2 36 02 F1 | 	add	local09, objptr
0c79c     1B 13 02 FB | 	rdlong	arg01, local09
0c7a0     35 00 00 FF 
0c7a4     2C E4 85 F1 | 	sub	objptr, ##27180
0c7a8     8C AF B1 FD | 	call	#__system____builtin_atof
0c7ac     FD 14 02 F6 | 	mov	arg02, result1
0c7b0     18 13 02 F6 | 	mov	arg01, local06
0c7b4     BC A7 B1 FD | 	call	#__system___float_mul
0c7b8     FD 26 02 F6 | 	mov	local01, result1
0c7bc     1E 2A 06 F6 | 	mov	local03, #30
0c7c0                 | LR__1002
0c7c0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c7c0     FF FF 7F FF 
0c7c4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c7c8     48 00 90 5D |  if_ne	jmp	#LR__1003
0c7cc     00 C0 5F FF 
0c7d0     00 30 06 F6 | 	mov	local06, ##-1082130432
0c7d4     37 00 00 FF 
0c7d8     64 E4 05 F1 | 	add	objptr, ##28260
0c7dc     F2 36 02 FB | 	rdlong	local09, objptr
0c7e0     03 36 66 F0 | 	shl	local09, #3
0c7e4     02 00 00 FF 
0c7e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7ec     F2 36 02 F1 | 	add	local09, objptr
0c7f0     1B 13 02 FB | 	rdlong	arg01, local09
0c7f4     35 00 00 FF 
0c7f8     2C E4 85 F1 | 	sub	objptr, ##27180
0c7fc     38 AF B1 FD | 	call	#__system____builtin_atof
0c800     FD 14 02 F6 | 	mov	arg02, result1
0c804     18 13 02 F6 | 	mov	arg01, local06
0c808     68 A7 B1 FD | 	call	#__system___float_mul
0c80c     FD 26 02 F6 | 	mov	local01, result1
0c810     1E 2A 06 F6 | 	mov	local03, #30
0c814                 | LR__1003
0c814     13 31 02 F6 | 	mov	local06, local01
0c818     14 33 02 F6 | 	mov	local07, local02
0c81c     15 2F 02 F6 | 	mov	local05, local03
0c820     4A 00 00 FF 
0c824     9C E4 05 F1 | 	add	objptr, ##38044
0c828     F2 26 02 FB | 	rdlong	local01, objptr
0c82c     13 37 02 F6 | 	mov	local09, local01
0c830     01 36 66 F0 | 	shl	local09, #1
0c834     13 37 02 F1 | 	add	local09, local01
0c838     02 36 66 F0 | 	shl	local09, #2
0c83c     03 00 00 FF 
0c840     00 E4 85 F1 | 	sub	objptr, ##1536
0c844     F2 36 02 F1 | 	add	local09, objptr
0c848     1B 31 62 FC | 	wrlong	local06, local09
0c84c     03 00 00 FF 
0c850     00 E4 05 F1 | 	add	objptr, ##1536
0c854     F2 36 02 FB | 	rdlong	local09, objptr
0c858     1B 31 02 F6 | 	mov	local06, local09
0c85c     01 30 66 F0 | 	shl	local06, #1
0c860     1B 31 02 F1 | 	add	local06, local09
0c864     02 30 66 F0 | 	shl	local06, #2
0c868     03 00 00 FF 
0c86c     00 E4 85 F1 | 	sub	objptr, ##1536
0c870     F2 30 02 F1 | 	add	local06, objptr
0c874     04 30 06 F1 | 	add	local06, #4
0c878     18 33 62 FC | 	wrlong	local07, local06
0c87c     03 00 00 FF 
0c880     00 E4 05 F1 | 	add	objptr, ##1536
0c884     F2 36 02 FB | 	rdlong	local09, objptr
0c888     1B 33 02 F6 | 	mov	local07, local09
0c88c     01 32 66 F0 | 	shl	local07, #1
0c890     1B 33 02 F1 | 	add	local07, local09
0c894     02 32 66 F0 | 	shl	local07, #2
0c898     03 00 00 FF 
0c89c     00 E4 85 F1 | 	sub	objptr, ##1536
0c8a0     F2 32 02 F1 | 	add	local07, objptr
0c8a4     08 32 06 F1 | 	add	local07, #8
0c8a8     19 2F 62 FC | 	wrlong	local05, local07
0c8ac     03 00 00 FF 
0c8b0     00 E4 05 F1 | 	add	objptr, ##1536
0c8b4     F2 30 02 FB | 	rdlong	local06, objptr
0c8b8     01 30 06 F1 | 	add	local06, #1
0c8bc     F2 30 62 FC | 	wrlong	local06, objptr
0c8c0     13 00 00 FF 
0c8c4     38 E4 85 F1 | 	sub	objptr, ##9784
0c8c8     F2 30 02 FB | 	rdlong	local06, objptr
0c8cc     01 30 06 F1 | 	add	local06, #1
0c8d0     F2 30 62 FC | 	wrlong	local06, objptr
0c8d4     37 00 00 FF 
0c8d8     64 E4 85 F1 | 	sub	objptr, ##28260
0c8dc     B0 03 90 FD | 	jmp	#LR__1013
0c8e0                 | LR__1004
0c8e0     37 00 00 FF 
0c8e4     64 E4 05 F1 | 	add	objptr, ##28260
0c8e8     F2 16 02 FB | 	rdlong	arg03, objptr
0c8ec     03 16 66 F0 | 	shl	arg03, #3
0c8f0     02 00 00 FF 
0c8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8f8     F2 16 02 F1 | 	add	arg03, objptr
0c8fc     0B 13 02 FB | 	rdlong	arg01, arg03
0c900     35 00 00 FF 
0c904     2C E4 85 F1 | 	sub	objptr, ##27180
0c908     09 35 02 F6 | 	mov	local08, arg01
0c90c     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c910                 | LR__1005
0c910     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c914     01 34 06 51 |  if_ne	add	local08, #1
0c918     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c91c                 | LR__1006
0c91c     09 35 82 F1 | 	sub	local08, arg01
0c920     1A FB 01 F6 | 	mov	result1, local08
0c924     52 00 00 FF 
0c928     48 E5 05 F1 | 	add	objptr, ##42312
0c92c     F2 FA 61 FC | 	wrlong	result1, objptr
0c930     58 E4 85 F1 | 	sub	objptr, #88
0c934     F2 12 02 FB | 	rdlong	arg01, objptr
0c938     FD 12 82 F1 | 	sub	arg01, result1
0c93c     04 12 86 F1 | 	sub	arg01, #4
0c940     03 12 26 F5 | 	andn	arg01, #3
0c944     F2 12 62 FC | 	wrlong	arg01, objptr
0c948     58 E4 05 F1 | 	add	objptr, #88
0c94c     F2 14 02 FB | 	rdlong	arg02, objptr
0c950     52 00 00 FF 
0c954     48 E5 85 F1 | 	sub	objptr, ##42312
0c958     60 33 B1 FD | 	call	#_pslpoke
0c95c                 | '     pslpoke memtop,l
0c95c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c95c     01 38 06 F6 | 	mov	local10, #1
0c960     52 00 00 FF 
0c964     48 E5 05 F1 | 	add	objptr, ##42312
0c968     F2 3A 02 FB | 	rdlong	local11, objptr
0c96c     52 00 00 FF 
0c970     48 E5 85 F1 | 	sub	objptr, ##42312
0c974     01 3A 06 F1 | 	add	local11, #1
0c978                 | LR__1007
0c978     1D 39 52 F2 | 	cmps	local10, local11 wc
0c97c     5C 00 90 3D |  if_ae	jmp	#LR__1008
0c980     52 00 00 FF 
0c984     F0 E4 05 F1 | 	add	objptr, ##42224
0c988     F2 32 02 FB | 	rdlong	local07, objptr
0c98c     03 32 06 F1 | 	add	local07, #3
0c990     1C 33 02 F1 | 	add	local07, local10
0c994     1B 00 00 FF 
0c998     8C E4 85 F1 | 	sub	objptr, ##13964
0c99c     F2 36 02 FB | 	rdlong	local09, objptr
0c9a0     03 36 66 F0 | 	shl	local09, #3
0c9a4     02 00 00 FF 
0c9a8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9ac     F2 36 02 F1 | 	add	local09, objptr
0c9b0     1B 13 02 FB | 	rdlong	arg01, local09
0c9b4     1C 15 02 F6 | 	mov	arg02, local10
0c9b8     01 16 06 F6 | 	mov	arg03, #1
0c9bc     35 00 00 FF 
0c9c0     2C E4 85 F1 | 	sub	objptr, ##27180
0c9c4     B8 9B B1 FD | 	call	#__system__Mid_S
0c9c8     FD 14 C2 FA | 	rdbyte	arg02, result1
0c9cc     19 13 02 F6 | 	mov	arg01, local07
0c9d0     78 33 B1 FD | 	call	#_pspoke
0c9d4     01 38 06 F1 | 	add	local10, #1
0c9d8     9C FF 9F FD | 	jmp	#LR__1007
0c9dc                 | LR__1008
0c9dc     52 00 00 FF 
0c9e0     F0 E4 05 F1 | 	add	objptr, ##42224
0c9e4     F2 26 02 FB | 	rdlong	local01, objptr
0c9e8     2B 2A 06 F6 | 	mov	local03, #43
0c9ec     13 31 02 F6 | 	mov	local06, local01
0c9f0     14 33 02 F6 | 	mov	local07, local02
0c9f4     15 3B 02 F6 | 	mov	local11, local03
0c9f8     08 00 00 FF 
0c9fc     54 E4 85 F1 | 	sub	objptr, ##4180
0ca00     F2 38 02 FB | 	rdlong	local10, objptr
0ca04     1C 37 02 F6 | 	mov	local09, local10
0ca08     01 36 66 F0 | 	shl	local09, #1
0ca0c     1C 37 02 F1 | 	add	local09, local10
0ca10     02 36 66 F0 | 	shl	local09, #2
0ca14     03 00 00 FF 
0ca18     00 E4 85 F1 | 	sub	objptr, ##1536
0ca1c     F2 36 02 F1 | 	add	local09, objptr
0ca20     1B 31 62 FC | 	wrlong	local06, local09
0ca24     03 00 00 FF 
0ca28     00 E4 05 F1 | 	add	objptr, ##1536
0ca2c     F2 38 02 FB | 	rdlong	local10, objptr
0ca30     1C 37 02 F6 | 	mov	local09, local10
0ca34     01 36 66 F0 | 	shl	local09, #1
0ca38     1C 37 02 F1 | 	add	local09, local10
0ca3c     02 36 66 F0 | 	shl	local09, #2
0ca40     03 00 00 FF 
0ca44     00 E4 85 F1 | 	sub	objptr, ##1536
0ca48     F2 36 02 F1 | 	add	local09, objptr
0ca4c     04 36 06 F1 | 	add	local09, #4
0ca50     1B 33 62 FC | 	wrlong	local07, local09
0ca54     03 00 00 FF 
0ca58     00 E4 05 F1 | 	add	objptr, ##1536
0ca5c     F2 38 02 FB | 	rdlong	local10, objptr
0ca60     1C 37 02 F6 | 	mov	local09, local10
0ca64     01 36 66 F0 | 	shl	local09, #1
0ca68     1C 37 02 F1 | 	add	local09, local10
0ca6c     02 36 66 F0 | 	shl	local09, #2
0ca70     03 00 00 FF 
0ca74     00 E4 85 F1 | 	sub	objptr, ##1536
0ca78     F2 36 02 F1 | 	add	local09, objptr
0ca7c     08 36 06 F1 | 	add	local09, #8
0ca80     1B 3B 62 FC | 	wrlong	local11, local09
0ca84     03 00 00 FF 
0ca88     00 E4 05 F1 | 	add	objptr, ##1536
0ca8c     F2 30 02 FB | 	rdlong	local06, objptr
0ca90     01 30 06 F1 | 	add	local06, #1
0ca94     F2 30 62 FC | 	wrlong	local06, objptr
0ca98     13 00 00 FF 
0ca9c     38 E4 85 F1 | 	sub	objptr, ##9784
0caa0     F2 30 02 FB | 	rdlong	local06, objptr
0caa4     01 30 06 F1 | 	add	local06, #1
0caa8     F2 30 62 FC | 	wrlong	local06, objptr
0caac     37 00 00 FF 
0cab0     64 E4 85 F1 | 	sub	objptr, ##28260
0cab4     D8 01 90 FD | 	jmp	#LR__1013
0cab8                 | LR__1009
0cab8     2C 2A 06 F6 | 	mov	local03, #44
0cabc     37 00 00 FF 
0cac0     64 E4 05 F1 | 	add	objptr, ##28260
0cac4     F2 30 02 FB | 	rdlong	local06, objptr
0cac8     03 30 66 F0 | 	shl	local06, #3
0cacc     02 00 00 FF 
0cad0     38 E4 85 F1 | 	sub	objptr, ##1080
0cad4     F2 30 02 F1 | 	add	local06, objptr
0cad8     18 13 02 FB | 	rdlong	arg01, local06
0cadc     00 14 06 F6 | 	mov	arg02, #0
0cae0     35 00 00 FF 
0cae4     2C E4 85 F1 | 	sub	objptr, ##27180
0cae8     B4 AA B1 FD | 	call	#__system____builtin_atoi
0caec     FD 26 02 F6 | 	mov	local01, result1
0caf0     13 31 02 F6 | 	mov	local06, local01
0caf4     14 33 02 F6 | 	mov	local07, local02
0caf8     15 3B 02 F6 | 	mov	local11, local03
0cafc     4A 00 00 FF 
0cb00     9C E4 05 F1 | 	add	objptr, ##38044
0cb04     F2 38 02 FB | 	rdlong	local10, objptr
0cb08     1C 37 02 F6 | 	mov	local09, local10
0cb0c     01 36 66 F0 | 	shl	local09, #1
0cb10     1C 37 02 F1 | 	add	local09, local10
0cb14     02 36 66 F0 | 	shl	local09, #2
0cb18     03 00 00 FF 
0cb1c     00 E4 85 F1 | 	sub	objptr, ##1536
0cb20     F2 36 02 F1 | 	add	local09, objptr
0cb24     1B 31 62 FC | 	wrlong	local06, local09
0cb28     03 00 00 FF 
0cb2c     00 E4 05 F1 | 	add	objptr, ##1536
0cb30     F2 38 02 FB | 	rdlong	local10, objptr
0cb34     1C 37 02 F6 | 	mov	local09, local10
0cb38     01 36 66 F0 | 	shl	local09, #1
0cb3c     1C 37 02 F1 | 	add	local09, local10
0cb40     02 36 66 F0 | 	shl	local09, #2
0cb44     03 00 00 FF 
0cb48     00 E4 85 F1 | 	sub	objptr, ##1536
0cb4c     F2 36 02 F1 | 	add	local09, objptr
0cb50     04 36 06 F1 | 	add	local09, #4
0cb54     1B 33 62 FC | 	wrlong	local07, local09
0cb58     03 00 00 FF 
0cb5c     00 E4 05 F1 | 	add	objptr, ##1536
0cb60     F2 38 02 FB | 	rdlong	local10, objptr
0cb64     1C 37 02 F6 | 	mov	local09, local10
0cb68     01 36 66 F0 | 	shl	local09, #1
0cb6c     1C 37 02 F1 | 	add	local09, local10
0cb70     02 36 66 F0 | 	shl	local09, #2
0cb74     03 00 00 FF 
0cb78     00 E4 85 F1 | 	sub	objptr, ##1536
0cb7c     F2 36 02 F1 | 	add	local09, objptr
0cb80     08 36 06 F1 | 	add	local09, #8
0cb84     1B 3B 62 FC | 	wrlong	local11, local09
0cb88     03 00 00 FF 
0cb8c     00 E4 05 F1 | 	add	objptr, ##1536
0cb90     F2 30 02 FB | 	rdlong	local06, objptr
0cb94     01 30 06 F1 | 	add	local06, #1
0cb98     F2 30 62 FC | 	wrlong	local06, objptr
0cb9c     13 00 00 FF 
0cba0     38 E4 85 F1 | 	sub	objptr, ##9784
0cba4     F2 30 02 FB | 	rdlong	local06, objptr
0cba8     01 30 06 F1 | 	add	local06, #1
0cbac     F2 30 62 FC | 	wrlong	local06, objptr
0cbb0     37 00 00 FF 
0cbb4     64 E4 85 F1 | 	sub	objptr, ##28260
0cbb8     D4 00 90 FD | 	jmp	#LR__1013
0cbbc                 | LR__1010
0cbbc     16 13 02 F6 | 	mov	arg01, local04
0cbc0     20 04 B0 FD | 	call	#_getvar
0cbc4     37 00 00 FF 
0cbc8     64 E4 05 F1 | 	add	objptr, ##28260
0cbcc     F2 30 02 FB | 	rdlong	local06, objptr
0cbd0     01 30 06 F1 | 	add	local06, #1
0cbd4     F2 30 62 FC | 	wrlong	local06, objptr
0cbd8     37 00 00 FF 
0cbdc     64 E4 85 F1 | 	sub	objptr, ##28260
0cbe0                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cbe0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cbe4     AC 00 90 3D |  if_ae	jmp	#LR__1014
0cbe8     A4 00 90 FD | 	jmp	#LR__1013
0cbec                 | LR__1011
0cbec     37 00 00 FF 
0cbf0     64 E4 05 F1 | 	add	objptr, ##28260
0cbf4     F2 30 02 FB | 	rdlong	local06, objptr
0cbf8     01 30 06 F1 | 	add	local06, #1
0cbfc     F2 30 62 FC | 	wrlong	local06, objptr
0cc00     37 00 00 FF 
0cc04     64 E4 85 F1 | 	sub	objptr, ##28260
0cc08     20 F1 BF FD | 	call	#_expr
0cc0c                 | '     ct+=1
0cc0c                 | '     err=expr() : if err>0 then return err 
0cc0c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc10     80 00 90 3D |  if_ae	jmp	#LR__1014
0cc14                 | '     if lparts(ct).token=token_rpar then ct+=1
0cc14     37 00 00 FF 
0cc18     64 E4 05 F1 | 	add	objptr, ##28260
0cc1c     F2 3A 02 FB | 	rdlong	local11, objptr
0cc20     03 3A 66 F0 | 	shl	local11, #3
0cc24     02 00 00 FF 
0cc28     38 E4 85 F1 | 	sub	objptr, ##1080
0cc2c     F2 3A 02 F1 | 	add	local11, objptr
0cc30     04 3A 06 F1 | 	add	local11, #4
0cc34     1D 3B 02 FB | 	rdlong	local11, local11
0cc38     14 3A 0E F2 | 	cmp	local11, #20 wz
0cc3c     35 00 00 FF 
0cc40     2C E4 85 F1 | 	sub	objptr, ##27180
0cc44     37 00 00 AF 
0cc48     64 E4 05 A1 |  if_e	add	objptr, ##28260
0cc4c     F2 30 02 AB |  if_e	rdlong	local06, objptr
0cc50     01 30 06 A1 |  if_e	add	local06, #1
0cc54     F2 30 62 AC |  if_e	wrlong	local06, objptr
0cc58     37 00 00 AF 
0cc5c     64 E4 85 A1 |  if_e	sub	objptr, ##28260
0cc60     2C 00 90 FD | 	jmp	#LR__1013
0cc64                 | LR__1012
0cc64     16 13 02 F6 | 	mov	arg01, local04
0cc68     34 00 B0 FD | 	call	#_getfun
0cc6c     37 00 00 FF 
0cc70     64 E4 05 F1 | 	add	objptr, ##28260
0cc74     F2 30 02 FB | 	rdlong	local06, objptr
0cc78     01 30 06 F1 | 	add	local06, #1
0cc7c     F2 30 62 FC | 	wrlong	local06, objptr
0cc80     37 00 00 FF 
0cc84     64 E4 85 F1 | 	sub	objptr, ##28260
0cc88                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cc88     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc8c     04 00 90 3D |  if_ae	jmp	#LR__1014
0cc90                 | LR__1013
0cc90                 | ' return 0  
0cc90     00 FA 05 F6 | 	mov	result1, #0
0cc94                 | LR__1014
0cc94     A7 F0 03 F6 | 	mov	ptra, fp
0cc98     B2 00 A0 FD | 	call	#popregs_
0cc9c                 | _getvalue_ret
0cc9c     2D 00 64 FD | 	ret
0cca0                 | 
0cca0                 | ' 
0cca0                 | ' ' Get a function result 
0cca0                 | ' 
0cca0                 | ' function getfun(m as integer) as ulong
0cca0                 | _getfun
0cca0     0F 4A 05 F6 | 	mov	COUNT_, #15
0cca4     A8 00 A0 FD | 	call	#pushregs_
0cca8                 | _getfun_enter
0cca8     09 2D 02 F6 | 	mov	local04, arg01
0ccac     37 00 00 FF 
0ccb0     64 E4 05 F1 | 	add	objptr, ##28260
0ccb4     F2 2E 02 FB | 	rdlong	local05, objptr
0ccb8     17 31 02 F6 | 	mov	local06, local05
0ccbc     00 32 06 F6 | 	mov	local07, #0
0ccc0                 | ' oldct=ct
0ccc0                 | ' numpar=0
0ccc0                 | ' if lparts(ct+1).token=token_lpar then
0ccc0     01 2E 06 F1 | 	add	local05, #1
0ccc4     03 2E 66 F0 | 	shl	local05, #3
0ccc8     02 00 00 FF 
0cccc     38 E4 85 F1 | 	sub	objptr, ##1080
0ccd0     F2 2E 02 F1 | 	add	local05, objptr
0ccd4     04 2E 06 F1 | 	add	local05, #4
0ccd8     17 2F 02 FB | 	rdlong	local05, local05
0ccdc     15 2E 0E F2 | 	cmp	local05, #21 wz
0cce0     35 00 00 FF 
0cce4     2C E4 85 F1 | 	sub	objptr, ##27180
0cce8     54 01 90 5D |  if_ne	jmp	#LR__1024
0ccec     37 00 00 FF 
0ccf0     64 E4 05 F1 | 	add	objptr, ##28260
0ccf4     F2 34 02 FB | 	rdlong	local08, objptr
0ccf8     01 34 06 F1 | 	add	local08, #1
0ccfc     F2 34 62 FC | 	wrlong	local08, objptr
0cd00     37 00 00 FF 
0cd04     64 E4 85 F1 | 	sub	objptr, ##28260
0cd08                 | '   ct+=1 											' omit this lpar, this is for expr list
0cd08                 | '   do
0cd08                 | LR__1020
0cd08     37 00 00 FF 
0cd0c     64 E4 05 F1 | 	add	objptr, ##28260
0cd10     F2 2E 02 FB | 	rdlong	local05, objptr
0cd14     01 2E 06 F1 | 	add	local05, #1
0cd18     F2 2E 62 FC | 	wrlong	local05, objptr
0cd1c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cd1c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cd1c     03 2E 66 F0 | 	shl	local05, #3
0cd20     02 00 00 FF 
0cd24     38 E4 85 F1 | 	sub	objptr, ##1080
0cd28     F2 2E 02 F1 | 	add	local05, objptr
0cd2c     04 2E 06 F1 | 	add	local05, #4
0cd30     17 35 02 FB | 	rdlong	local08, local05
0cd34     15 34 0E F2 | 	cmp	local08, #21 wz
0cd38     35 00 00 FF 
0cd3c     2C E4 85 F1 | 	sub	objptr, ##27180
0cd40     44 00 90 5D |  if_ne	jmp	#LR__1021
0cd44     37 00 00 FF 
0cd48     64 E4 05 F1 | 	add	objptr, ##28260
0cd4c     F2 34 02 FB | 	rdlong	local08, objptr
0cd50     01 34 06 F1 | 	add	local08, #1
0cd54     F2 34 62 FC | 	wrlong	local08, objptr
0cd58     37 00 00 FF 
0cd5c     64 E4 85 F1 | 	sub	objptr, ##28260
0cd60     C8 EF BF FD | 	call	#_expr
0cd64     FD 36 02 F6 | 	mov	local09, result1
0cd68     37 00 00 FF 
0cd6c     64 E4 05 F1 | 	add	objptr, ##28260
0cd70     F2 34 02 FB | 	rdlong	local08, objptr
0cd74     01 34 06 F1 | 	add	local08, #1
0cd78     F2 34 62 FC | 	wrlong	local08, objptr
0cd7c     37 00 00 FF 
0cd80     64 E4 85 F1 | 	sub	objptr, ##28260
0cd84     08 00 90 FD | 	jmp	#LR__1022
0cd88                 | LR__1021
0cd88     A0 EF BF FD | 	call	#_expr
0cd8c     FD 36 02 F6 | 	mov	local09, result1
0cd90                 | LR__1022
0cd90                 | '     if err>0 then return err
0cd90     01 36 16 F2 | 	cmp	local09, #1 wc
0cd94     1B FB 01 36 |  if_ae	mov	result1, local09
0cd98     3C 02 90 3D |  if_ae	jmp	#LR__1026
0cd9c     01 32 06 F1 | 	add	local07, #1
0cda0     37 00 00 FF 
0cda4     64 E4 05 F1 | 	add	objptr, ##28260
0cda8     F2 2E 02 FB | 	rdlong	local05, objptr
0cdac     03 2E 66 F0 | 	shl	local05, #3
0cdb0     02 00 00 FF 
0cdb4     38 E4 85 F1 | 	sub	objptr, ##1080
0cdb8     F2 2E 02 F1 | 	add	local05, objptr
0cdbc     04 2E 06 F1 | 	add	local05, #4
0cdc0     17 37 02 FB | 	rdlong	local09, local05
0cdc4     14 36 0E F2 | 	cmp	local09, #20 wz
0cdc8     35 00 00 FF 
0cdcc     2C E4 85 F1 | 	sub	objptr, ##27180
0cdd0     34 00 90 AD |  if_e	jmp	#LR__1023
0cdd4     37 00 00 FF 
0cdd8     64 E4 05 F1 | 	add	objptr, ##28260
0cddc     F2 36 02 FB | 	rdlong	local09, objptr
0cde0     03 36 66 F0 | 	shl	local09, #3
0cde4     02 00 00 FF 
0cde8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdec     F2 36 02 F1 | 	add	local09, objptr
0cdf0     04 36 06 F1 | 	add	local09, #4
0cdf4     1B 37 02 FB | 	rdlong	local09, local09
0cdf8     FE 37 0E F2 | 	cmp	local09, #510 wz
0cdfc     35 00 00 FF 
0ce00     2C E4 85 F1 | 	sub	objptr, ##27180
0ce04     00 FF 9F 5D |  if_ne	jmp	#LR__1020
0ce08                 | LR__1023
0ce08                 | '   if lparts(ct).token=token_end then return 14
0ce08     37 00 00 FF 
0ce0c     64 E4 05 F1 | 	add	objptr, ##28260
0ce10     F2 2E 02 FB | 	rdlong	local05, objptr
0ce14     03 2E 66 F0 | 	shl	local05, #3
0ce18     02 00 00 FF 
0ce1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce20     F2 2E 02 F1 | 	add	local05, objptr
0ce24     04 2E 06 F1 | 	add	local05, #4
0ce28     17 37 02 FB | 	rdlong	local09, local05
0ce2c     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce30     35 00 00 FF 
0ce34     2C E4 85 F1 | 	sub	objptr, ##27180
0ce38     0E FA 05 A6 |  if_e	mov	result1, #14
0ce3c     98 01 90 AD |  if_e	jmp	#LR__1026
0ce40                 | LR__1024
0ce40     19 27 02 F6 | 	mov	local01, local07
0ce44     03 30 66 F0 | 	shl	local06, #3
0ce48     35 00 00 FF 
0ce4c     2C E4 05 F1 | 	add	objptr, ##27180
0ce50     F2 30 02 F1 | 	add	local06, objptr
0ce54     04 30 06 F1 | 	add	local06, #4
0ce58     18 2B 02 FB | 	rdlong	local03, local06
0ce5c     13 35 02 F6 | 	mov	local08, local01
0ce60     14 39 02 F6 | 	mov	local10, local02
0ce64     15 3B 02 F6 | 	mov	local11, local03
0ce68     15 00 00 FF 
0ce6c     70 E4 05 F1 | 	add	objptr, ##10864
0ce70     F2 3C 02 FB | 	rdlong	local12, objptr
0ce74     1E 3F 02 F6 | 	mov	local13, local12
0ce78     01 3E 66 F0 | 	shl	local13, #1
0ce7c     1E 3F 02 F1 | 	add	local13, local12
0ce80     02 3E 66 F0 | 	shl	local13, #2
0ce84     03 00 00 FF 
0ce88     00 E4 85 F1 | 	sub	objptr, ##1536
0ce8c     F2 3E 02 F1 | 	add	local13, objptr
0ce90     1F 35 62 FC | 	wrlong	local08, local13
0ce94     03 00 00 FF 
0ce98     00 E4 05 F1 | 	add	objptr, ##1536
0ce9c     F2 34 02 FB | 	rdlong	local08, objptr
0cea0     1A 41 02 F6 | 	mov	local14, local08
0cea4     01 40 66 F0 | 	shl	local14, #1
0cea8     1A 41 02 F1 | 	add	local14, local08
0ceac     02 40 66 F0 | 	shl	local14, #2
0ceb0     03 00 00 FF 
0ceb4     00 E4 85 F1 | 	sub	objptr, ##1536
0ceb8     F2 40 02 F1 | 	add	local14, objptr
0cebc     04 40 06 F1 | 	add	local14, #4
0cec0     20 39 62 FC | 	wrlong	local10, local14
0cec4     03 00 00 FF 
0cec8     00 E4 05 F1 | 	add	objptr, ##1536
0cecc     F2 34 02 FB | 	rdlong	local08, objptr
0ced0     1A 43 02 F6 | 	mov	local15, local08
0ced4     01 42 66 F0 | 	shl	local15, #1
0ced8     1A 43 02 F1 | 	add	local15, local08
0cedc     02 42 66 F0 | 	shl	local15, #2
0cee0     03 00 00 FF 
0cee4     00 E4 85 F1 | 	sub	objptr, ##1536
0cee8     F2 42 02 F1 | 	add	local15, objptr
0ceec     08 42 06 F1 | 	add	local15, #8
0cef0     21 3B 62 FC | 	wrlong	local11, local15
0cef4     03 00 00 FF 
0cef8     00 E4 05 F1 | 	add	objptr, ##1536
0cefc     F2 34 02 FB | 	rdlong	local08, objptr
0cf00     01 34 06 F1 | 	add	local08, #1
0cf04     F2 34 62 FC | 	wrlong	local08, objptr
0cf08     4A 00 00 FF 
0cf0c     9C E4 85 F1 | 	sub	objptr, ##38044
0cf10                 | ' t2.result.uresult=numpar
0cf10                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0cf10                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0cf10                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0cf10     FF FF 7F FF 
0cf14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cf18     B8 00 90 5D |  if_ne	jmp	#LR__1025
0cf1c     15 2A 06 F6 | 	mov	local03, #21
0cf20     13 35 02 F6 | 	mov	local08, local01
0cf24     14 39 02 F6 | 	mov	local10, local02
0cf28     15 3B 02 F6 | 	mov	local11, local03
0cf2c     4A 00 00 FF 
0cf30     9C E4 05 F1 | 	add	objptr, ##38044
0cf34     F2 3C 02 FB | 	rdlong	local12, objptr
0cf38     1E 3F 02 F6 | 	mov	local13, local12
0cf3c     01 3E 66 F0 | 	shl	local13, #1
0cf40     1E 3F 02 F1 | 	add	local13, local12
0cf44     02 3E 66 F0 | 	shl	local13, #2
0cf48     03 00 00 FF 
0cf4c     00 E4 85 F1 | 	sub	objptr, ##1536
0cf50     F2 3E 02 F1 | 	add	local13, objptr
0cf54     1F 35 62 FC | 	wrlong	local08, local13
0cf58     03 00 00 FF 
0cf5c     00 E4 05 F1 | 	add	objptr, ##1536
0cf60     F2 42 02 FB | 	rdlong	local15, objptr
0cf64     21 41 02 F6 | 	mov	local14, local15
0cf68     01 40 66 F0 | 	shl	local14, #1
0cf6c     21 41 02 F1 | 	add	local14, local15
0cf70     02 40 66 F0 | 	shl	local14, #2
0cf74     03 00 00 FF 
0cf78     00 E4 85 F1 | 	sub	objptr, ##1536
0cf7c     F2 40 02 F1 | 	add	local14, objptr
0cf80     04 40 06 F1 | 	add	local14, #4
0cf84     20 39 62 FC | 	wrlong	local10, local14
0cf88     03 00 00 FF 
0cf8c     00 E4 05 F1 | 	add	objptr, ##1536
0cf90     F2 40 02 FB | 	rdlong	local14, objptr
0cf94     20 43 02 F6 | 	mov	local15, local14
0cf98     01 42 66 F0 | 	shl	local15, #1
0cf9c     20 43 02 F1 | 	add	local15, local14
0cfa0     02 42 66 F0 | 	shl	local15, #2
0cfa4     03 00 00 FF 
0cfa8     00 E4 85 F1 | 	sub	objptr, ##1536
0cfac     F2 42 02 F1 | 	add	local15, objptr
0cfb0     08 42 06 F1 | 	add	local15, #8
0cfb4     21 3B 62 FC | 	wrlong	local11, local15
0cfb8     03 00 00 FF 
0cfbc     00 E4 05 F1 | 	add	objptr, ##1536
0cfc0     F2 34 02 FB | 	rdlong	local08, objptr
0cfc4     01 34 06 F1 | 	add	local08, #1
0cfc8     F2 34 62 FC | 	wrlong	local08, objptr
0cfcc     4A 00 00 FF 
0cfd0     9C E4 85 F1 | 	sub	objptr, ##38044
0cfd4                 | LR__1025
0cfd4                 | ' return 0
0cfd4     00 FA 05 F6 | 	mov	result1, #0
0cfd8                 | LR__1026
0cfd8     A7 F0 03 F6 | 	mov	ptra, fp
0cfdc     B2 00 A0 FD | 	call	#popregs_
0cfe0                 | _getfun_ret
0cfe0     2D 00 64 FD | 	ret
0cfe4                 | 
0cfe4                 | '   
0cfe4                 | '   
0cfe4                 | ' function getvar(m as integer) as ulong
0cfe4                 | _getvar
0cfe4     11 4A 05 F6 | 	mov	COUNT_, #17
0cfe8     A8 00 A0 FD | 	call	#pushregs_
0cfec                 | _getvar_enter
0cfec     09 2D 02 F6 | 	mov	local04, arg01
0cff0     37 00 00 FF 
0cff4     64 E4 05 F1 | 	add	objptr, ##28260
0cff8     F2 2E 02 FB | 	rdlong	local05, objptr
0cffc     03 2E 66 F0 | 	shl	local05, #3
0d000     02 00 00 FF 
0d004     38 E4 85 F1 | 	sub	objptr, ##1080
0d008     F2 2E 02 F1 | 	add	local05, objptr
0d00c     17 31 02 FB | 	rdlong	local06, local05
0d010     01 32 66 F6 | 	neg	local07, #1
0d014                 | ' 
0d014                 | ' varname$=lparts(ct).part$
0d014                 | ' j=-1
0d014                 | ' 
0d014                 | ' for i=0 to varnum-1
0d014     00 34 06 F6 | 	mov	local08, #0
0d018     04 E4 85 F1 | 	sub	objptr, #4
0d01c     F2 36 02 FB | 	rdlong	local09, objptr
0d020     35 00 00 FF 
0d024     28 E4 85 F1 | 	sub	objptr, ##27176
0d028                 | LR__1030
0d028     1B 35 52 F2 | 	cmps	local08, local09 wc
0d02c     34 00 90 3D |  if_ae	jmp	#LR__1031
0d030                 | '   if variables(i).name=varname$ then j=i : exit
0d030     1A 2F 02 F6 | 	mov	local05, local08
0d034     04 2E 66 F0 | 	shl	local05, #4
0d038     F2 14 02 F6 | 	mov	arg02, objptr
0d03c     15 00 00 FF 
0d040     18 14 06 F1 | 	add	arg02, ##10776
0d044     0A 2F 02 F1 | 	add	local05, arg02
0d048     17 13 02 FB | 	rdlong	arg01, local05
0d04c     18 15 02 F6 | 	mov	arg02, local06
0d050     7C 80 B1 FD | 	call	#__system___string_cmp
0d054     00 FA 0D F2 | 	cmp	result1, #0 wz
0d058     1A 33 02 A6 |  if_e	mov	local07, local08
0d05c     01 34 06 51 |  if_ne	add	local08, #1
0d060     C4 FF 9F 5D |  if_ne	jmp	#LR__1030
0d064                 | LR__1031
0d064                 | ' if  j=-1 andalso varnum<maxvars then   
0d064     FF FF 7F FF 
0d068     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d06c     A8 00 90 5D |  if_ne	jmp	#LR__1032
0d070     35 00 00 FF 
0d074     28 E4 05 F1 | 	add	objptr, ##27176
0d078     F2 36 02 FB | 	rdlong	local09, objptr
0d07c     35 00 00 FF 
0d080     28 E4 85 F1 | 	sub	objptr, ##27176
0d084     02 00 00 FF 
0d088     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d08c     88 00 90 3D |  if_ae	jmp	#LR__1032
0d090     35 00 00 FF 
0d094     28 E4 05 F1 | 	add	objptr, ##27176
0d098     F2 2E 02 FB | 	rdlong	local05, objptr
0d09c     04 2E 66 F0 | 	shl	local05, #4
0d0a0     20 00 00 FF 
0d0a4     10 E4 85 F1 | 	sub	objptr, ##16400
0d0a8     F2 2E 02 F1 | 	add	local05, objptr
0d0ac     17 31 62 FC | 	wrlong	local06, local05
0d0b0     20 00 00 FF 
0d0b4     10 E4 05 F1 | 	add	objptr, ##16400
0d0b8     F2 2E 02 FB | 	rdlong	local05, objptr
0d0bc     04 2E 66 F0 | 	shl	local05, #4
0d0c0     20 00 00 FF 
0d0c4     10 E4 85 F1 | 	sub	objptr, ##16400
0d0c8     F2 2E 02 F1 | 	add	local05, objptr
0d0cc     04 2E 06 F1 | 	add	local05, #4
0d0d0     17 01 68 FC | 	wrlong	#0, local05
0d0d4     20 00 00 FF 
0d0d8     10 E4 05 F1 | 	add	objptr, ##16400
0d0dc     F2 2E 02 FB | 	rdlong	local05, objptr
0d0e0     04 2E 66 F0 | 	shl	local05, #4
0d0e4     20 00 00 FF 
0d0e8     10 E4 85 F1 | 	sub	objptr, ##16400
0d0ec     F2 2E 02 F1 | 	add	local05, objptr
0d0f0     0C 2E 06 F1 | 	add	local05, #12
0d0f4     17 39 68 FC | 	wrlong	#28, local05
0d0f8     20 00 00 FF 
0d0fc     10 E4 05 F1 | 	add	objptr, ##16400
0d100     F2 36 02 FB | 	rdlong	local09, objptr
0d104     1B 33 02 F6 | 	mov	local07, local09
0d108     01 36 06 F1 | 	add	local09, #1
0d10c     F2 36 62 FC | 	wrlong	local09, objptr
0d110     35 00 00 FF 
0d114     28 E4 85 F1 | 	sub	objptr, ##27176
0d118                 | LR__1032
0d118     00 34 06 F6 | 	mov	local08, #0
0d11c                 | ' numpar=0
0d11c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d11c     37 00 00 FF 
0d120     64 E4 05 F1 | 	add	objptr, ##28260
0d124     F2 2E 02 FB | 	rdlong	local05, objptr
0d128     01 2E 06 F1 | 	add	local05, #1
0d12c     03 2E 66 F0 | 	shl	local05, #3
0d130     02 00 00 FF 
0d134     38 E4 85 F1 | 	sub	objptr, ##1080
0d138     F2 2E 02 F1 | 	add	local05, objptr
0d13c     04 2E 06 F1 | 	add	local05, #4
0d140     17 37 02 FB | 	rdlong	local09, local05
0d144     15 36 0E F2 | 	cmp	local09, #21 wz
0d148     35 00 00 FF 
0d14c     2C E4 85 F1 | 	sub	objptr, ##27180
0d150     54 01 90 5D |  if_ne	jmp	#LR__1037
0d154     37 00 00 FF 
0d158     64 E4 05 F1 | 	add	objptr, ##28260
0d15c     F2 38 02 FB | 	rdlong	local10, objptr
0d160     01 38 06 F1 | 	add	local10, #1
0d164     F2 38 62 FC | 	wrlong	local10, objptr
0d168     37 00 00 FF 
0d16c     64 E4 85 F1 | 	sub	objptr, ##28260
0d170                 | '   ct+=1 											' omit this lpar, this is for expr list
0d170                 | '   do
0d170                 | LR__1033
0d170     37 00 00 FF 
0d174     64 E4 05 F1 | 	add	objptr, ##28260
0d178     F2 2E 02 FB | 	rdlong	local05, objptr
0d17c     01 2E 06 F1 | 	add	local05, #1
0d180     F2 2E 62 FC | 	wrlong	local05, objptr
0d184                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d184                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d184     03 2E 66 F0 | 	shl	local05, #3
0d188     02 00 00 FF 
0d18c     38 E4 85 F1 | 	sub	objptr, ##1080
0d190     F2 2E 02 F1 | 	add	local05, objptr
0d194     04 2E 06 F1 | 	add	local05, #4
0d198     17 39 02 FB | 	rdlong	local10, local05
0d19c     15 38 0E F2 | 	cmp	local10, #21 wz
0d1a0     35 00 00 FF 
0d1a4     2C E4 85 F1 | 	sub	objptr, ##27180
0d1a8     44 00 90 5D |  if_ne	jmp	#LR__1034
0d1ac     37 00 00 FF 
0d1b0     64 E4 05 F1 | 	add	objptr, ##28260
0d1b4     F2 38 02 FB | 	rdlong	local10, objptr
0d1b8     01 38 06 F1 | 	add	local10, #1
0d1bc     F2 38 62 FC | 	wrlong	local10, objptr
0d1c0     37 00 00 FF 
0d1c4     64 E4 85 F1 | 	sub	objptr, ##28260
0d1c8     60 EB BF FD | 	call	#_expr
0d1cc     FD 3A 02 F6 | 	mov	local11, result1
0d1d0     37 00 00 FF 
0d1d4     64 E4 05 F1 | 	add	objptr, ##28260
0d1d8     F2 38 02 FB | 	rdlong	local10, objptr
0d1dc     01 38 06 F1 | 	add	local10, #1
0d1e0     F2 38 62 FC | 	wrlong	local10, objptr
0d1e4     37 00 00 FF 
0d1e8     64 E4 85 F1 | 	sub	objptr, ##28260
0d1ec     08 00 90 FD | 	jmp	#LR__1035
0d1f0                 | LR__1034
0d1f0     38 EB BF FD | 	call	#_expr
0d1f4     FD 3A 02 F6 | 	mov	local11, result1
0d1f8                 | LR__1035
0d1f8                 | '     if err>0 then return err
0d1f8     01 3A 56 F2 | 	cmps	local11, #1 wc
0d1fc     1D FB 01 36 |  if_ae	mov	result1, local11
0d200     2C 02 90 3D |  if_ae	jmp	#LR__1039
0d204     01 34 06 F1 | 	add	local08, #1
0d208     37 00 00 FF 
0d20c     64 E4 05 F1 | 	add	objptr, ##28260
0d210     F2 2E 02 FB | 	rdlong	local05, objptr
0d214     03 2E 66 F0 | 	shl	local05, #3
0d218     02 00 00 FF 
0d21c     38 E4 85 F1 | 	sub	objptr, ##1080
0d220     F2 2E 02 F1 | 	add	local05, objptr
0d224     04 2E 06 F1 | 	add	local05, #4
0d228     17 3B 02 FB | 	rdlong	local11, local05
0d22c     14 3A 0E F2 | 	cmp	local11, #20 wz
0d230     35 00 00 FF 
0d234     2C E4 85 F1 | 	sub	objptr, ##27180
0d238     34 00 90 AD |  if_e	jmp	#LR__1036
0d23c     37 00 00 FF 
0d240     64 E4 05 F1 | 	add	objptr, ##28260
0d244     F2 3A 02 FB | 	rdlong	local11, objptr
0d248     03 3A 66 F0 | 	shl	local11, #3
0d24c     02 00 00 FF 
0d250     38 E4 85 F1 | 	sub	objptr, ##1080
0d254     F2 3A 02 F1 | 	add	local11, objptr
0d258     04 3A 06 F1 | 	add	local11, #4
0d25c     1D 3B 02 FB | 	rdlong	local11, local11
0d260     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d264     35 00 00 FF 
0d268     2C E4 85 F1 | 	sub	objptr, ##27180
0d26c     00 FF 9F 5D |  if_ne	jmp	#LR__1033
0d270                 | LR__1036
0d270                 | '     if lparts(ct).token=token_end then return 14
0d270     37 00 00 FF 
0d274     64 E4 05 F1 | 	add	objptr, ##28260
0d278     F2 2E 02 FB | 	rdlong	local05, objptr
0d27c     03 2E 66 F0 | 	shl	local05, #3
0d280     02 00 00 FF 
0d284     38 E4 85 F1 | 	sub	objptr, ##1080
0d288     F2 2E 02 F1 | 	add	local05, objptr
0d28c     04 2E 06 F1 | 	add	local05, #4
0d290     17 3B 02 FB | 	rdlong	local11, local05
0d294     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d298     35 00 00 FF 
0d29c     2C E4 85 F1 | 	sub	objptr, ##27180
0d2a0     0E FA 05 A6 |  if_e	mov	result1, #14
0d2a4     88 01 90 AD |  if_e	jmp	#LR__1039
0d2a8                 | LR__1037
0d2a8     1A 29 02 F6 | 	mov	local02, local08
0d2ac     11 2A 06 F6 | 	mov	local03, #17
0d2b0     19 27 02 F6 | 	mov	local01, local07
0d2b4     13 39 02 F6 | 	mov	local10, local01
0d2b8     14 3D 02 F6 | 	mov	local12, local02
0d2bc     15 3F 02 F6 | 	mov	local13, local03
0d2c0     4A 00 00 FF 
0d2c4     9C E4 05 F1 | 	add	objptr, ##38044
0d2c8     F2 40 02 FB | 	rdlong	local14, objptr
0d2cc     20 43 02 F6 | 	mov	local15, local14
0d2d0     01 42 66 F0 | 	shl	local15, #1
0d2d4     20 43 02 F1 | 	add	local15, local14
0d2d8     02 42 66 F0 | 	shl	local15, #2
0d2dc     03 00 00 FF 
0d2e0     00 E4 85 F1 | 	sub	objptr, ##1536
0d2e4     F2 42 02 F1 | 	add	local15, objptr
0d2e8     21 39 62 FC | 	wrlong	local10, local15
0d2ec     03 00 00 FF 
0d2f0     00 E4 05 F1 | 	add	objptr, ##1536
0d2f4     F2 38 02 FB | 	rdlong	local10, objptr
0d2f8     1C 45 02 F6 | 	mov	local16, local10
0d2fc     01 44 66 F0 | 	shl	local16, #1
0d300     1C 45 02 F1 | 	add	local16, local10
0d304     02 44 66 F0 | 	shl	local16, #2
0d308     03 00 00 FF 
0d30c     00 E4 85 F1 | 	sub	objptr, ##1536
0d310     F2 44 02 F1 | 	add	local16, objptr
0d314     04 44 06 F1 | 	add	local16, #4
0d318     22 3D 62 FC | 	wrlong	local12, local16
0d31c     03 00 00 FF 
0d320     00 E4 05 F1 | 	add	objptr, ##1536
0d324     F2 38 02 FB | 	rdlong	local10, objptr
0d328     1C 47 02 F6 | 	mov	local17, local10
0d32c     01 46 66 F0 | 	shl	local17, #1
0d330     1C 47 02 F1 | 	add	local17, local10
0d334     02 46 66 F0 | 	shl	local17, #2
0d338     03 00 00 FF 
0d33c     00 E4 85 F1 | 	sub	objptr, ##1536
0d340     F2 46 02 F1 | 	add	local17, objptr
0d344     08 46 06 F1 | 	add	local17, #8
0d348     23 3F 62 FC | 	wrlong	local13, local17
0d34c     03 00 00 FF 
0d350     00 E4 05 F1 | 	add	objptr, ##1536
0d354     F2 38 02 FB | 	rdlong	local10, objptr
0d358     01 38 06 F1 | 	add	local10, #1
0d35c     F2 38 62 FC | 	wrlong	local10, objptr
0d360     4A 00 00 FF 
0d364     9C E4 85 F1 | 	sub	objptr, ##38044
0d368                 | ' t2.result.twowords(1)=numpar
0d368                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d368                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d368                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d368     FF FF 7F FF 
0d36c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d370     B8 00 90 5D |  if_ne	jmp	#LR__1038
0d374     15 2A 06 F6 | 	mov	local03, #21
0d378     13 39 02 F6 | 	mov	local10, local01
0d37c     14 3D 02 F6 | 	mov	local12, local02
0d380     15 3F 02 F6 | 	mov	local13, local03
0d384     4A 00 00 FF 
0d388     9C E4 05 F1 | 	add	objptr, ##38044
0d38c     F2 40 02 FB | 	rdlong	local14, objptr
0d390     20 43 02 F6 | 	mov	local15, local14
0d394     01 42 66 F0 | 	shl	local15, #1
0d398     20 43 02 F1 | 	add	local15, local14
0d39c     02 42 66 F0 | 	shl	local15, #2
0d3a0     03 00 00 FF 
0d3a4     00 E4 85 F1 | 	sub	objptr, ##1536
0d3a8     F2 42 02 F1 | 	add	local15, objptr
0d3ac     21 39 62 FC | 	wrlong	local10, local15
0d3b0     03 00 00 FF 
0d3b4     00 E4 05 F1 | 	add	objptr, ##1536
0d3b8     F2 46 02 FB | 	rdlong	local17, objptr
0d3bc     23 45 02 F6 | 	mov	local16, local17
0d3c0     01 44 66 F0 | 	shl	local16, #1
0d3c4     23 45 02 F1 | 	add	local16, local17
0d3c8     02 44 66 F0 | 	shl	local16, #2
0d3cc     03 00 00 FF 
0d3d0     00 E4 85 F1 | 	sub	objptr, ##1536
0d3d4     F2 44 02 F1 | 	add	local16, objptr
0d3d8     04 44 06 F1 | 	add	local16, #4
0d3dc     22 3D 62 FC | 	wrlong	local12, local16
0d3e0     03 00 00 FF 
0d3e4     00 E4 05 F1 | 	add	objptr, ##1536
0d3e8     F2 44 02 FB | 	rdlong	local16, objptr
0d3ec     22 47 02 F6 | 	mov	local17, local16
0d3f0     01 46 66 F0 | 	shl	local17, #1
0d3f4     22 47 02 F1 | 	add	local17, local16
0d3f8     02 46 66 F0 | 	shl	local17, #2
0d3fc     03 00 00 FF 
0d400     00 E4 85 F1 | 	sub	objptr, ##1536
0d404     F2 46 02 F1 | 	add	local17, objptr
0d408     08 46 06 F1 | 	add	local17, #8
0d40c     23 3F 62 FC | 	wrlong	local13, local17
0d410     03 00 00 FF 
0d414     00 E4 05 F1 | 	add	objptr, ##1536
0d418     F2 38 02 FB | 	rdlong	local10, objptr
0d41c     01 38 06 F1 | 	add	local10, #1
0d420     F2 38 62 FC | 	wrlong	local10, objptr
0d424     4A 00 00 FF 
0d428     9C E4 85 F1 | 	sub	objptr, ##38044
0d42c                 | LR__1038
0d42c                 | ' return 0
0d42c     00 FA 05 F6 | 	mov	result1, #0
0d430                 | LR__1039
0d430     A7 F0 03 F6 | 	mov	ptra, fp
0d434     B2 00 A0 FD | 	call	#popregs_
0d438                 | _getvar_ret
0d438     2D 00 64 FD | 	ret
0d43c                 | 
0d43c                 | ' 
0d43c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d43c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d43c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d43c                 | ' 
0d43c                 | ' 
0d43c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d43c                 | ' '                                                                                                                                       -
0d43c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d43c                 | ' '                                                                                                                                       -
0d43c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d43c                 | ' 
0d43c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d43c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d43c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d43c                 | ' 
0d43c                 | ' function execute_line (astart=0 as integer) as integer
0d43c                 | _execute_line
0d43c     04 4A 05 F6 | 	mov	COUNT_, #4
0d440     A8 00 A0 FD | 	call	#pushregs_
0d444     50 00 00 FF 
0d448     DC E4 05 F1 | 	add	objptr, ##41180
0d44c     F2 00 68 FC | 	wrlong	#0, objptr
0d450                 | ' 
0d450                 | ' runptr2=0
0d450                 | ' for lineptr_e=astart to lineptr-1
0d450     06 00 00 FF 
0d454     3C E4 85 F1 | 	sub	objptr, ##3132
0d458     F2 12 62 FC | 	wrlong	arg01, objptr
0d45c     04 E4 85 F1 | 	sub	objptr, #4
0d460     F2 26 02 FB | 	rdlong	local01, objptr
0d464     4A 00 00 FF 
0d468     9C E4 85 F1 | 	sub	objptr, ##38044
0d46c                 | LR__1040
0d46c     4A 00 00 FF 
0d470     A0 E4 05 F1 | 	add	objptr, ##38048
0d474     F2 FA 01 FB | 	rdlong	result1, objptr
0d478     4A 00 00 FF 
0d47c     A0 E4 85 F1 | 	sub	objptr, ##38048
0d480     13 FB 51 F2 | 	cmps	result1, local01 wc
0d484     98 00 90 3D |  if_ae	jmp	#LR__1041
0d488     4A 00 00 FF 
0d48c     A0 E4 05 F1 | 	add	objptr, ##38048
0d490     F2 FA 01 FB | 	rdlong	result1, objptr
0d494     FD 28 02 F6 | 	mov	local02, result1
0d498     01 28 66 F0 | 	shl	local02, #1
0d49c     FD 28 02 F1 | 	add	local02, result1
0d4a0     02 28 66 F0 | 	shl	local02, #2
0d4a4     03 00 00 FF 
0d4a8     04 E4 85 F1 | 	sub	objptr, ##1540
0d4ac     F2 28 02 F1 | 	add	local02, objptr
0d4b0     08 28 06 F1 | 	add	local02, #8
0d4b4     14 29 02 FB | 	rdlong	local02, local02
0d4b8     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d4bc     02 28 66 F0 | 	shl	local02, #2
0d4c0     04 00 00 FF 
0d4c4     1C E4 85 F1 | 	sub	objptr, ##2076
0d4c8     F2 28 02 F1 | 	add	local02, objptr
0d4cc     14 29 02 FB | 	rdlong	local02, local02
0d4d0     14 2B 02 F6 | 	mov	local03, local02
0d4d4     13 28 46 F7 | 	zerox	local02, #19
0d4d8     14 2A 46 F0 | 	shr	local03, #20
0d4dc     02 2A 66 F0 | 	shl	local03, #2
0d4e0     ED 2A 02 F1 | 	add	local03, __methods__
0d4e4     15 2B 02 FB | 	rdlong	local03, local03
0d4e8     43 00 00 FF 
0d4ec     80 E4 85 F1 | 	sub	objptr, ##34432
0d4f0     F2 2C 02 F6 | 	mov	local04, objptr
0d4f4     14 E5 01 F6 | 	mov	objptr, local02
0d4f8     2D 2A 62 FD | 	call	local03
0d4fc     16 E5 01 F6 | 	mov	objptr, local04
0d500     4A 00 00 FF 
0d504     A0 E4 05 F1 | 	add	objptr, ##38048
0d508     F2 2C 02 FB | 	rdlong	local04, objptr
0d50c     01 2C 06 F1 | 	add	local04, #1
0d510     F2 2C 62 FC | 	wrlong	local04, objptr
0d514     4A 00 00 FF 
0d518     A0 E4 85 F1 | 	sub	objptr, ##38048
0d51c     4C FF 9F FD | 	jmp	#LR__1040
0d520                 | LR__1041
0d520                 | ' return runptr2
0d520     50 00 00 FF 
0d524     DC E4 05 F1 | 	add	objptr, ##41180
0d528     F2 FA 01 FB | 	rdlong	result1, objptr
0d52c     50 00 00 FF 
0d530     DC E4 85 F1 | 	sub	objptr, ##41180
0d534     A7 F0 03 F6 | 	mov	ptra, fp
0d538     B2 00 A0 FD | 	call	#popregs_
0d53c                 | _execute_line_ret
0d53c     2D 00 64 FD | 	ret
0d540                 | 
0d540                 | ' 
0d540                 | ' 
0d540                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d540                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d540                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d540                 | ' 
0d540                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d540                 | ' 
0d540                 | ' function pop() as expr_result
0d540                 | _pop
0d540                 | ' if stackpointer=0 then
0d540     43 00 00 FF 
0d544     78 E4 05 F1 | 	add	objptr, ##34424
0d548     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d54c     43 00 00 FF 
0d550     78 E4 85 F1 | 	sub	objptr, ##34424
0d554     FF 04 06 A6 |  if_e	mov	_var03, #255
0d558     18 00 06 A6 |  if_e	mov	_var01, #24
0d55c     60 00 90 AD |  if_e	jmp	#LR__1050
0d560     43 00 00 FF 
0d564     78 E4 05 F1 | 	add	objptr, ##34424
0d568     F2 FA 01 FB | 	rdlong	result1, objptr
0d56c     01 FA 85 F1 | 	sub	result1, #1
0d570     F2 FA 61 FC | 	wrlong	result1, objptr
0d574     FD FE 01 F6 | 	mov	result3, result1
0d578     01 FE 65 F0 | 	shl	result3, #1
0d57c     FD FE 01 F1 | 	add	result3, result1
0d580     02 FE 65 F0 | 	shl	result3, #2
0d584     0C 00 00 FF 
0d588     0C E4 85 F1 | 	sub	objptr, ##6156
0d58c     F2 FE 01 F1 | 	add	result3, objptr
0d590     FF 00 02 FB | 	rdlong	_var01, result3
0d594     04 FE 05 F1 | 	add	result3, #4
0d598     FF 02 02 FB | 	rdlong	_var02, result3
0d59c     FD FC 01 F6 | 	mov	result2, result1
0d5a0     01 FC 65 F0 | 	shl	result2, #1
0d5a4     FD FC 01 F1 | 	add	result2, result1
0d5a8     02 FC 65 F0 | 	shl	result2, #2
0d5ac     F2 FC 01 F1 | 	add	result2, objptr
0d5b0     08 FC 05 F1 | 	add	result2, #8
0d5b4     FE 04 02 FB | 	rdlong	_var03, result2
0d5b8     37 00 00 FF 
0d5bc     6C E4 85 F1 | 	sub	objptr, ##28268
0d5c0                 | LR__1050
0d5c0                 | ' return t1
0d5c0     01 FD 01 F6 | 	mov	result2, _var02
0d5c4     02 FF 01 F6 | 	mov	result3, _var03
0d5c8     00 FB 01 F6 | 	mov	result1, _var01
0d5cc                 | _pop_ret
0d5cc     2D 00 64 FD | 	ret
0d5d0                 | 
0d5d0                 | ' 
0d5d0                 | ' sub push(t1 as expr_result )
0d5d0                 | _push
0d5d0                 | ' if stackpointer<maxstack then 
0d5d0     43 00 00 FF 
0d5d4     78 E4 05 F1 | 	add	objptr, ##34424
0d5d8     F2 00 02 FB | 	rdlong	_var01, objptr
0d5dc     43 00 00 FF 
0d5e0     78 E4 85 F1 | 	sub	objptr, ##34424
0d5e4     01 00 00 FF 
0d5e8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d5ec     BC 00 90 3D |  if_ae	jmp	#LR__1060
0d5f0     09 01 02 FB | 	rdlong	_var01, arg01
0d5f4     04 12 06 F1 | 	add	arg01, #4
0d5f8     09 03 02 FB | 	rdlong	_var02, arg01
0d5fc     04 12 06 F1 | 	add	arg01, #4
0d600     09 13 02 FB | 	rdlong	arg01, arg01
0d604     43 00 00 FF 
0d608     78 E4 05 F1 | 	add	objptr, ##34424
0d60c     F2 04 02 FB | 	rdlong	_var03, objptr
0d610     02 07 02 F6 | 	mov	_var04, _var03
0d614     01 06 66 F0 | 	shl	_var04, #1
0d618     02 07 02 F1 | 	add	_var04, _var03
0d61c     02 06 66 F0 | 	shl	_var04, #2
0d620     0C 00 00 FF 
0d624     0C E4 85 F1 | 	sub	objptr, ##6156
0d628     F2 06 02 F1 | 	add	_var04, objptr
0d62c     03 01 62 FC | 	wrlong	_var01, _var04
0d630     0C 00 00 FF 
0d634     0C E4 05 F1 | 	add	objptr, ##6156
0d638     F2 06 02 FB | 	rdlong	_var04, objptr
0d63c     03 05 02 F6 | 	mov	_var03, _var04
0d640     01 04 66 F0 | 	shl	_var03, #1
0d644     03 05 02 F1 | 	add	_var03, _var04
0d648     02 04 66 F0 | 	shl	_var03, #2
0d64c     0C 00 00 FF 
0d650     0C E4 85 F1 | 	sub	objptr, ##6156
0d654     F2 04 02 F1 | 	add	_var03, objptr
0d658     04 04 06 F1 | 	add	_var03, #4
0d65c     02 03 62 FC | 	wrlong	_var02, _var03
0d660     0C 00 00 FF 
0d664     0C E4 05 F1 | 	add	objptr, ##6156
0d668     F2 06 02 FB | 	rdlong	_var04, objptr
0d66c     03 05 02 F6 | 	mov	_var03, _var04
0d670     01 04 66 F0 | 	shl	_var03, #1
0d674     03 05 02 F1 | 	add	_var03, _var04
0d678     02 04 66 F0 | 	shl	_var03, #2
0d67c     0C 00 00 FF 
0d680     0C E4 85 F1 | 	sub	objptr, ##6156
0d684     F2 04 02 F1 | 	add	_var03, objptr
0d688     08 04 06 F1 | 	add	_var03, #8
0d68c     02 13 62 FC | 	wrlong	arg01, _var03
0d690     0C 00 00 FF 
0d694     0C E4 05 F1 | 	add	objptr, ##6156
0d698     F2 00 02 FB | 	rdlong	_var01, objptr
0d69c     01 00 06 F1 | 	add	_var01, #1
0d6a0     F2 00 62 FC | 	wrlong	_var01, objptr
0d6a4     43 00 00 FF 
0d6a8     78 E4 85 F1 | 	sub	objptr, ##34424
0d6ac                 | LR__1060
0d6ac                 | _push_ret
0d6ac     2D 00 64 FD | 	ret
0d6b0                 | 
0d6b0                 | ' 
0d6b0                 | ' ' -------------------------------- Runtime converting functions
0d6b0                 | ' 
0d6b0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d6b0                 | ' 
0d6b0                 | ' function  convertstring(psaddr as ulong) as string
0d6b0                 | _convertstring
0d6b0     04 4A 05 F6 | 	mov	COUNT_, #4
0d6b4     A8 00 A0 FD | 	call	#pushregs_
0d6b8     09 27 02 F6 | 	mov	local01, arg01
0d6bc     1C 27 B1 FD | 	call	#_pslpeek
0d6c0     FD 28 02 F6 | 	mov	local02, result1
0d6c4     91 01 00 FF 
0d6c8     17 2B 06 F6 | 	mov	local03, ##@LR__5542
0d6cc                 | ' l=pslpeek(psaddr) 
0d6cc                 | ' s="" 
0d6cc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d6cc     01 2C 06 F6 | 	mov	local04, #1
0d6d0     01 28 06 F1 | 	add	local02, #1
0d6d4                 | LR__1070
0d6d4     14 2D 52 F2 | 	cmps	local04, local02 wc
0d6d8     30 00 90 3D |  if_ae	jmp	#LR__1071
0d6dc     13 13 02 F6 | 	mov	arg01, local01
0d6e0     03 12 06 F1 | 	add	arg01, #3
0d6e4     16 13 02 F1 | 	add	arg01, local04
0d6e8     A8 26 B1 FD | 	call	#_pspeek
0d6ec     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d6f0     38 8F B1 FD | 	call	#__system__Chr_S
0d6f4     FD 14 02 F6 | 	mov	arg02, result1
0d6f8     15 13 02 F6 | 	mov	arg01, local03
0d6fc     04 7A B1 FD | 	call	#__system___string_concat
0d700     FD 2A 02 F6 | 	mov	local03, result1
0d704     01 2C 06 F1 | 	add	local04, #1
0d708     C8 FF 9F FD | 	jmp	#LR__1070
0d70c                 | LR__1071
0d70c                 | ' return s
0d70c     15 FB 01 F6 | 	mov	result1, local03
0d710     A7 F0 03 F6 | 	mov	ptra, fp
0d714     B2 00 A0 FD | 	call	#popregs_
0d718                 | _convertstring_ret
0d718     2D 00 64 FD | 	ret
0d71c                 | 
0d71c                 | ' 
0d71c                 | ' ' converts a variable to an integer
0d71c                 | ' 
0d71c                 | ' function converttoint (t1 as expr_result) as integer 
0d71c                 | _converttoint
0d71c     02 4A 05 F6 | 	mov	COUNT_, #2
0d720     A8 00 A0 FD | 	call	#pushregs_
0d724     09 27 02 F6 | 	mov	local01, arg01
0d728                 | ' 
0d728                 | ' select case t1.result_type
0d728     08 26 06 F1 | 	add	local01, #8
0d72c     13 29 02 FB | 	rdlong	local02, local01
0d730     08 26 86 F1 | 	sub	local01, #8
0d734     1C 28 0E F2 | 	cmp	local02, #28 wz
0d738     2C 00 90 AD |  if_e	jmp	#LR__1080
0d73c     1D 28 0E F2 | 	cmp	local02, #29 wz
0d740     2C 00 90 AD |  if_e	jmp	#LR__1081
0d744     1E 28 0E F2 | 	cmp	local02, #30 wz
0d748     2C 00 90 AD |  if_e	jmp	#LR__1082
0d74c     1F 28 0E F2 | 	cmp	local02, #31 wz
0d750     34 00 90 AD |  if_e	jmp	#LR__1083
0d754     2B 28 0E F2 | 	cmp	local02, #43 wz
0d758     44 00 90 AD |  if_e	jmp	#LR__1084
0d75c     2C 28 0E F2 | 	cmp	local02, #44 wz
0d760     5C 00 90 AD |  if_e	jmp	#LR__1085
0d764     60 00 90 FD | 	jmp	#LR__1086
0d768                 | LR__1080
0d768     13 FB 01 FB | 	rdlong	result1, local01
0d76c     5C 00 90 FD | 	jmp	#LR__1087
0d770                 | LR__1081
0d770     13 FB 01 FB | 	rdlong	result1, local01
0d774     54 00 90 FD | 	jmp	#LR__1087
0d778                 | LR__1082
0d778     13 13 02 FB | 	rdlong	arg01, local01
0d77c     01 14 06 F6 | 	mov	arg02, #1
0d780     7C 9C B1 FD | 	call	#__system___float_tointeger
0d784     44 00 90 FD | 	jmp	#LR__1087
0d788                 | LR__1083
0d788     13 13 02 FB | 	rdlong	arg01, local01
0d78c     A8 9F B1 FD | 	call	#__system____builtin_atof
0d790     FD 12 02 F6 | 	mov	arg01, result1
0d794     01 14 06 F6 | 	mov	arg02, #1
0d798     64 9C B1 FD | 	call	#__system___float_tointeger
0d79c     2C 00 90 FD | 	jmp	#LR__1087
0d7a0                 | LR__1084
0d7a0     13 13 02 FB | 	rdlong	arg01, local01
0d7a4     08 FF BF FD | 	call	#_convertstring
0d7a8     FD 12 02 F6 | 	mov	arg01, result1
0d7ac     88 9F B1 FD | 	call	#__system____builtin_atof
0d7b0     FD 12 02 F6 | 	mov	arg01, result1
0d7b4     01 14 06 F6 | 	mov	arg02, #1
0d7b8     44 9C B1 FD | 	call	#__system___float_tointeger
0d7bc     0C 00 90 FD | 	jmp	#LR__1087
0d7c0                 | LR__1085
0d7c0     13 FB 01 FB | 	rdlong	result1, local01
0d7c4     04 00 90 FD | 	jmp	#LR__1087
0d7c8                 | LR__1086
0d7c8     00 FA 05 F6 | 	mov	result1, #0
0d7cc                 | LR__1087
0d7cc     A7 F0 03 F6 | 	mov	ptra, fp
0d7d0     B2 00 A0 FD | 	call	#popregs_
0d7d4                 | _converttoint_ret
0d7d4     2D 00 64 FD | 	ret
0d7d8                 | 
0d7d8                 | ' 
0d7d8                 | ' ' converts a variable to float
0d7d8                 | ' 
0d7d8                 | ' function converttofloat (t1 as expr_result) as single
0d7d8                 | _converttofloat
0d7d8     03 4A 05 F6 | 	mov	COUNT_, #3
0d7dc     A8 00 A0 FD | 	call	#pushregs_
0d7e0     09 27 02 F6 | 	mov	local01, arg01
0d7e4                 | ' 
0d7e4                 | ' select case t1.result_type
0d7e4     08 26 06 F1 | 	add	local01, #8
0d7e8     13 29 02 FB | 	rdlong	local02, local01
0d7ec     08 26 86 F1 | 	sub	local01, #8
0d7f0     1C 28 0E F2 | 	cmp	local02, #28 wz
0d7f4     24 00 90 AD |  if_e	jmp	#LR__1090
0d7f8     1D 28 0E F2 | 	cmp	local02, #29 wz
0d7fc     38 00 90 AD |  if_e	jmp	#LR__1091
0d800     1E 28 0E F2 | 	cmp	local02, #30 wz
0d804     3C 00 90 AD |  if_e	jmp	#LR__1092
0d808     1F 28 0E F2 | 	cmp	local02, #31 wz
0d80c     3C 00 90 AD |  if_e	jmp	#LR__1093
0d810     2B 28 0E F2 | 	cmp	local02, #43 wz
0d814     40 00 90 AD |  if_e	jmp	#LR__1094
0d818     50 00 90 FD | 	jmp	#LR__1095
0d81c                 | LR__1090
0d81c     13 13 02 FB | 	rdlong	arg01, local01
0d820     09 13 52 F6 | 	abs	arg01, arg01 wc
0d824     1F 2A C6 C9 |  if_b	decod	local03, #31
0d828     00 2A 06 36 |  if_ae	mov	local03, #0
0d82c     44 93 B1 FD | 	call	#__system___float_fromuns
0d830     15 FB 61 F5 | 	xor	result1, local03
0d834     38 00 90 FD | 	jmp	#LR__1096
0d838                 | LR__1091
0d838     13 13 02 FB | 	rdlong	arg01, local01
0d83c     34 93 B1 FD | 	call	#__system___float_fromuns
0d840     2C 00 90 FD | 	jmp	#LR__1096
0d844                 | LR__1092
0d844     13 FB 01 FB | 	rdlong	result1, local01
0d848     24 00 90 FD | 	jmp	#LR__1096
0d84c                 | LR__1093
0d84c     13 13 02 FB | 	rdlong	arg01, local01
0d850     E4 9E B1 FD | 	call	#__system____builtin_atof
0d854     18 00 90 FD | 	jmp	#LR__1096
0d858                 | LR__1094
0d858     13 13 02 FB | 	rdlong	arg01, local01
0d85c     50 FE BF FD | 	call	#_convertstring
0d860     FD 12 02 F6 | 	mov	arg01, result1
0d864     D0 9E B1 FD | 	call	#__system____builtin_atof
0d868     04 00 90 FD | 	jmp	#LR__1096
0d86c                 | LR__1095
0d86c     00 FA 05 F6 | 	mov	result1, #0
0d870                 | LR__1096
0d870     A7 F0 03 F6 | 	mov	ptra, fp
0d874     B2 00 A0 FD | 	call	#popregs_
0d878                 | _converttofloat_ret
0d878     2D 00 64 FD | 	ret
0d87c                 | 
0d87c                 | ' 
0d87c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d87c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d87c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d87c                 | ' 
0d87c                 | ' 
0d87c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d87c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d87c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d87c                 | ' 
0d87c                 | ' '-------------------- abs
0d87c                 | ' 
0d87c                 | ' sub do_abs
0d87c                 | _do_abs
0d87c     01 4A 05 F6 | 	mov	COUNT_, #1
0d880     A8 00 A0 FD | 	call	#pushregs_
0d884     0C F0 07 F1 | 	add	ptra, #12
0d888     B4 FC BF FD | 	call	#_pop
0d88c     FF 26 02 F6 | 	mov	local01, result3
0d890     A7 FA 61 FC | 	wrlong	result1, fp
0d894     04 4E 05 F1 | 	add	fp, #4
0d898     A7 FC 61 FC | 	wrlong	result2, fp
0d89c     04 4E 05 F1 | 	add	fp, #4
0d8a0     A7 26 62 FC | 	wrlong	local01, fp
0d8a4                 | ' 
0d8a4                 | ' t1=pop()
0d8a4                 | ' if t1.result_type=result_int then 
0d8a4     08 4E 85 F1 | 	sub	fp, #8
0d8a8     1C 26 0E F2 | 	cmp	local01, #28 wz
0d8ac     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d8b0     09 27 42 A6 |  if_e	abs	local01, arg01
0d8b4     A7 26 62 AC |  if_e	wrlong	local01, fp
0d8b8     2C 00 90 AD |  if_e	jmp	#LR__1100
0d8bc     08 4E 05 F1 | 	add	fp, #8
0d8c0     A7 26 02 FB | 	rdlong	local01, fp
0d8c4     08 4E 85 F1 | 	sub	fp, #8
0d8c8     1E 26 0E F2 | 	cmp	local01, #30 wz
0d8cc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d8d0     1F FA 05 A4 |  if_e	bitl	result1, #31
0d8d4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d8d8     08 4E 05 51 |  if_ne	add	fp, #8
0d8dc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d8e0     08 4E 85 51 |  if_ne	sub	fp, #8
0d8e4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d8e8                 | LR__1100
0d8e8     A7 12 02 F6 | 	mov	arg01, fp
0d8ec     E0 FC BF FD | 	call	#_push
0d8f0     A7 F0 03 F6 | 	mov	ptra, fp
0d8f4     B2 00 A0 FD | 	call	#popregs_
0d8f8                 | _do_abs_ret
0d8f8     2D 00 64 FD | 	ret
0d8fc                 | 
0d8fc                 | ' 
0d8fc                 | ' '-------------------- acos
0d8fc                 | ' 
0d8fc                 | ' sub do_acos
0d8fc                 | _do_acos
0d8fc     01 4A 05 F6 | 	mov	COUNT_, #1
0d900     A8 00 A0 FD | 	call	#pushregs_
0d904     10 F0 07 F1 | 	add	ptra, #16
0d908     4A 00 00 FF 
0d90c     A0 E4 05 F1 | 	add	objptr, ##38048
0d910     F2 16 02 FB | 	rdlong	arg03, objptr
0d914     0B 15 02 F6 | 	mov	arg02, arg03
0d918     01 14 66 F0 | 	shl	arg02, #1
0d91c     0B 15 02 F1 | 	add	arg02, arg03
0d920     02 14 66 F0 | 	shl	arg02, #2
0d924     03 00 00 FF 
0d928     04 E4 85 F1 | 	sub	objptr, ##1540
0d92c     F2 14 02 F1 | 	add	arg02, objptr
0d930     0A 17 02 FB | 	rdlong	arg03, arg02
0d934                 | ' 
0d934                 | ' numpar=compiledline(lineptr_e).result.uresult
0d934                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d934     02 16 16 F2 | 	cmp	arg03, #2 wc
0d938     47 00 00 FF 
0d93c     9C E4 85 F1 | 	sub	objptr, ##36508
0d940     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
0d944     40 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0d948     00 12 06 F6 | 	mov	arg01, #0
0d94c     44 C2 B1 FD | 	call	#__system___getiolock_0622
0d950     FD 12 02 F6 | 	mov	arg01, result1
0d954     50 77 B1 FD | 	call	#__system___lockmem
0d958     91 01 00 FF 
0d95c     18 15 06 F6 | 	mov	arg02, ##@LR__5543
0d960     00 12 06 F6 | 	mov	arg01, #0
0d964     00 16 06 F6 | 	mov	arg03, #0
0d968     5C 7F B1 FD | 	call	#__system___basic_print_string
0d96c     00 12 06 F6 | 	mov	arg01, #0
0d970     20 C2 B1 FD | 	call	#__system___getiolock_0622
0d974     FD 00 68 FC | 	wrlong	#0, result1
0d978     27 12 06 F6 | 	mov	arg01, #39
0d97c     00 14 06 F6 | 	mov	arg02, #0
0d980     9C 22 B1 FD | 	call	#_printerror
0d984     94 00 90 FD | 	jmp	#LR__1111
0d988                 | LR__1110
0d988     B4 FB BF FD | 	call	#_pop
0d98c     FF 16 02 F6 | 	mov	arg03, result3
0d990     A7 FA 61 FC | 	wrlong	result1, fp
0d994     04 4E 05 F1 | 	add	fp, #4
0d998     A7 FC 61 FC | 	wrlong	result2, fp
0d99c     04 4E 05 F1 | 	add	fp, #4
0d9a0     A7 16 62 FC | 	wrlong	arg03, fp
0d9a4     08 4E 85 F1 | 	sub	fp, #8
0d9a8     A7 12 02 F6 | 	mov	arg01, fp
0d9ac     28 FE BF FD | 	call	#_converttofloat
0d9b0     FD 26 02 F6 | 	mov	local01, result1
0d9b4     13 15 02 F6 | 	mov	arg02, local01
0d9b8     13 13 02 F6 | 	mov	arg01, local01
0d9bc     B4 95 B1 FD | 	call	#__system___float_mul
0d9c0     FD 14 02 F6 | 	mov	arg02, result1
0d9c4     00 C0 1F FF 
0d9c8     00 12 06 F6 | 	mov	arg01, ##1065353216
0d9cc     1F 14 E6 F4 | 	bitnot	arg02, #31
0d9d0     E4 91 B1 FD | 	call	#__system___float_add
0d9d4     FD 12 02 F6 | 	mov	arg01, result1
0d9d8     C0 94 B1 FD | 	call	#__system___float_sqrt
0d9dc     FD 12 02 F6 | 	mov	arg01, result1
0d9e0     13 15 02 F6 | 	mov	arg02, local01
0d9e4     F0 9F B1 FD | 	call	#__system____builtin_atan2f
0d9e8     FD 12 02 F6 | 	mov	arg01, result1
0d9ec     52 00 00 FF 
0d9f0     04 E5 05 F1 | 	add	objptr, ##42244
0d9f4     F2 14 02 FB | 	rdlong	arg02, objptr
0d9f8     52 00 00 FF 
0d9fc     04 E5 85 F1 | 	sub	objptr, ##42244
0da00     70 95 B1 FD | 	call	#__system___float_mul
0da04     A7 FA 61 FC | 	wrlong	result1, fp
0da08     08 4E 05 F1 | 	add	fp, #8
0da0c     A7 3C 68 FC | 	wrlong	#30, fp
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     A7 12 02 F6 | 	mov	arg01, fp
0da18     B4 FB BF FD | 	call	#_push
0da1c                 | LR__1111
0da1c     A7 F0 03 F6 | 	mov	ptra, fp
0da20     B2 00 A0 FD | 	call	#popregs_
0da24                 | _do_acos_ret
0da24     2D 00 64 FD | 	ret
0da28                 | 
0da28                 | ' 
0da28                 | ' '-------------------- asc
0da28                 | ' 
0da28                 | ' sub do_asc
0da28                 | _do_asc
0da28     00 4A 05 F6 | 	mov	COUNT_, #0
0da2c     A8 00 A0 FD | 	call	#pushregs_
0da30     14 F0 07 F1 | 	add	ptra, #20
0da34     4A 00 00 FF 
0da38     A0 E4 05 F1 | 	add	objptr, ##38048
0da3c     F2 16 02 FB | 	rdlong	arg03, objptr
0da40     0B 15 02 F6 | 	mov	arg02, arg03
0da44     01 14 66 F0 | 	shl	arg02, #1
0da48     0B 15 02 F1 | 	add	arg02, arg03
0da4c     02 14 66 F0 | 	shl	arg02, #2
0da50     03 00 00 FF 
0da54     04 E4 85 F1 | 	sub	objptr, ##1540
0da58     F2 14 02 F1 | 	add	arg02, objptr
0da5c     0A 17 02 FB | 	rdlong	arg03, arg02
0da60                 | ' 
0da60                 | ' numpar=compiledline(lineptr_e).result.uresult
0da60                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0da60     02 16 16 F2 | 	cmp	arg03, #2 wc
0da64     47 00 00 FF 
0da68     9C E4 85 F1 | 	sub	objptr, ##36508
0da6c     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
0da70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0da74     00 12 06 F6 | 	mov	arg01, #0
0da78     18 C1 B1 FD | 	call	#__system___getiolock_0622
0da7c     FD 12 02 F6 | 	mov	arg01, result1
0da80     24 76 B1 FD | 	call	#__system___lockmem
0da84     91 01 00 FF 
0da88     1F 15 06 F6 | 	mov	arg02, ##@LR__5544
0da8c     00 12 06 F6 | 	mov	arg01, #0
0da90     00 16 06 F6 | 	mov	arg03, #0
0da94     30 7E B1 FD | 	call	#__system___basic_print_string
0da98     00 12 06 F6 | 	mov	arg01, #0
0da9c     F4 C0 B1 FD | 	call	#__system___getiolock_0622
0daa0     FD 00 68 FC | 	wrlong	#0, result1
0daa4     27 12 06 F6 | 	mov	arg01, #39
0daa8     00 14 06 F6 | 	mov	arg02, #0
0daac     70 21 B1 FD | 	call	#_printerror
0dab0     B4 00 90 FD | 	jmp	#LR__1123
0dab4                 | LR__1120
0dab4     88 FA BF FD | 	call	#_pop
0dab8     FF 16 02 F6 | 	mov	arg03, result3
0dabc     A7 FA 61 FC | 	wrlong	result1, fp
0dac0     04 4E 05 F1 | 	add	fp, #4
0dac4     A7 FC 61 FC | 	wrlong	result2, fp
0dac8     04 4E 05 F1 | 	add	fp, #4
0dacc     A7 16 62 FC | 	wrlong	arg03, fp
0dad0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dad0     08 4E 85 F1 | 	sub	fp, #8
0dad4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dad8     18 00 90 5D |  if_ne	jmp	#LR__1121
0dadc     A7 12 02 FB | 	rdlong	arg01, fp
0dae0     CC FB BF FD | 	call	#_convertstring
0dae4     A7 FA 61 FC | 	wrlong	result1, fp
0dae8     08 4E 05 F1 | 	add	fp, #8
0daec     A7 3E 68 FC | 	wrlong	#31, fp
0daf0     08 4E 85 F1 | 	sub	fp, #8
0daf4                 | LR__1121
0daf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0daf4     08 4E 05 F1 | 	add	fp, #8
0daf8     A7 16 02 FB | 	rdlong	arg03, fp
0dafc     08 4E 85 F1 | 	sub	fp, #8
0db00     1F 16 0E F2 | 	cmp	arg03, #31 wz
0db04     40 00 90 AD |  if_e	jmp	#LR__1122
0db08     00 12 06 F6 | 	mov	arg01, #0
0db0c     84 C0 B1 FD | 	call	#__system___getiolock_0622
0db10     FD 12 02 F6 | 	mov	arg01, result1
0db14     90 75 B1 FD | 	call	#__system___lockmem
0db18     91 01 00 FF 
0db1c     25 15 06 F6 | 	mov	arg02, ##@LR__5545
0db20     00 12 06 F6 | 	mov	arg01, #0
0db24     00 16 06 F6 | 	mov	arg03, #0
0db28     9C 7D B1 FD | 	call	#__system___basic_print_string
0db2c     00 12 06 F6 | 	mov	arg01, #0
0db30     60 C0 B1 FD | 	call	#__system___getiolock_0622
0db34     FD 00 68 FC | 	wrlong	#0, result1
0db38     0F 12 06 F6 | 	mov	arg01, #15
0db3c     00 14 06 F6 | 	mov	arg02, #0
0db40     DC 20 B1 FD | 	call	#_printerror
0db44     20 00 90 FD | 	jmp	#LR__1123
0db48                 | LR__1122
0db48     A7 FC 01 FB | 	rdlong	result2, fp
0db4c     FE FC C1 FA | 	rdbyte	result2, result2
0db50     A7 FC 61 FC | 	wrlong	result2, fp
0db54     08 4E 05 F1 | 	add	fp, #8
0db58     A7 38 68 FC | 	wrlong	#28, fp
0db5c     08 4E 85 F1 | 	sub	fp, #8
0db60     A7 12 02 F6 | 	mov	arg01, fp
0db64     68 FA BF FD | 	call	#_push
0db68                 | LR__1123
0db68     A7 F0 03 F6 | 	mov	ptra, fp
0db6c     B2 00 A0 FD | 	call	#popregs_
0db70                 | _do_asc_ret
0db70     2D 00 64 FD | 	ret
0db74                 | 
0db74                 | ' 
0db74                 | ' '-------------------- asin
0db74                 | ' 
0db74                 | ' sub do_asin
0db74                 | _do_asin
0db74     01 4A 05 F6 | 	mov	COUNT_, #1
0db78     A8 00 A0 FD | 	call	#pushregs_
0db7c     10 F0 07 F1 | 	add	ptra, #16
0db80     4A 00 00 FF 
0db84     A0 E4 05 F1 | 	add	objptr, ##38048
0db88     F2 16 02 FB | 	rdlong	arg03, objptr
0db8c     0B 15 02 F6 | 	mov	arg02, arg03
0db90     01 14 66 F0 | 	shl	arg02, #1
0db94     0B 15 02 F1 | 	add	arg02, arg03
0db98     02 14 66 F0 | 	shl	arg02, #2
0db9c     03 00 00 FF 
0dba0     04 E4 85 F1 | 	sub	objptr, ##1540
0dba4     F2 14 02 F1 | 	add	arg02, objptr
0dba8     0A 17 02 FB | 	rdlong	arg03, arg02
0dbac                 | ' 
0dbac                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbac                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dbac     02 16 16 F2 | 	cmp	arg03, #2 wc
0dbb0     47 00 00 FF 
0dbb4     9C E4 85 F1 | 	sub	objptr, ##36508
0dbb8     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
0dbbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0dbc0     00 12 06 F6 | 	mov	arg01, #0
0dbc4     CC BF B1 FD | 	call	#__system___getiolock_0622
0dbc8     FD 12 02 F6 | 	mov	arg01, result1
0dbcc     D8 74 B1 FD | 	call	#__system___lockmem
0dbd0     91 01 00 FF 
0dbd4     2B 15 06 F6 | 	mov	arg02, ##@LR__5546
0dbd8     00 12 06 F6 | 	mov	arg01, #0
0dbdc     00 16 06 F6 | 	mov	arg03, #0
0dbe0     E4 7C B1 FD | 	call	#__system___basic_print_string
0dbe4     00 12 06 F6 | 	mov	arg01, #0
0dbe8     A8 BF B1 FD | 	call	#__system___getiolock_0622
0dbec     FD 00 68 FC | 	wrlong	#0, result1
0dbf0     27 12 06 F6 | 	mov	arg01, #39
0dbf4     00 14 06 F6 | 	mov	arg02, #0
0dbf8     24 20 B1 FD | 	call	#_printerror
0dbfc     94 00 90 FD | 	jmp	#LR__1131
0dc00                 | LR__1130
0dc00     3C F9 BF FD | 	call	#_pop
0dc04     FF 16 02 F6 | 	mov	arg03, result3
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 FC 61 FC | 	wrlong	result2, fp
0dc14     04 4E 05 F1 | 	add	fp, #4
0dc18     A7 16 62 FC | 	wrlong	arg03, fp
0dc1c     08 4E 85 F1 | 	sub	fp, #8
0dc20     A7 12 02 F6 | 	mov	arg01, fp
0dc24     B0 FB BF FD | 	call	#_converttofloat
0dc28     FD 26 02 F6 | 	mov	local01, result1
0dc2c     13 15 02 F6 | 	mov	arg02, local01
0dc30     13 13 02 F6 | 	mov	arg01, local01
0dc34     3C 93 B1 FD | 	call	#__system___float_mul
0dc38     FD 14 02 F6 | 	mov	arg02, result1
0dc3c     00 C0 1F FF 
0dc40     00 12 06 F6 | 	mov	arg01, ##1065353216
0dc44     1F 14 E6 F4 | 	bitnot	arg02, #31
0dc48     6C 8F B1 FD | 	call	#__system___float_add
0dc4c     FD 12 02 F6 | 	mov	arg01, result1
0dc50     48 92 B1 FD | 	call	#__system___float_sqrt
0dc54     FD 14 02 F6 | 	mov	arg02, result1
0dc58     13 13 02 F6 | 	mov	arg01, local01
0dc5c     78 9D B1 FD | 	call	#__system____builtin_atan2f
0dc60     FD 12 02 F6 | 	mov	arg01, result1
0dc64     52 00 00 FF 
0dc68     04 E5 05 F1 | 	add	objptr, ##42244
0dc6c     F2 14 02 FB | 	rdlong	arg02, objptr
0dc70     52 00 00 FF 
0dc74     04 E5 85 F1 | 	sub	objptr, ##42244
0dc78     F8 92 B1 FD | 	call	#__system___float_mul
0dc7c     A7 FA 61 FC | 	wrlong	result1, fp
0dc80     08 4E 05 F1 | 	add	fp, #8
0dc84     A7 3C 68 FC | 	wrlong	#30, fp
0dc88     08 4E 85 F1 | 	sub	fp, #8
0dc8c     A7 12 02 F6 | 	mov	arg01, fp
0dc90     3C F9 BF FD | 	call	#_push
0dc94                 | LR__1131
0dc94     A7 F0 03 F6 | 	mov	ptra, fp
0dc98     B2 00 A0 FD | 	call	#popregs_
0dc9c                 | _do_asin_ret
0dc9c     2D 00 64 FD | 	ret
0dca0                 | 
0dca0                 | ' 
0dca0                 | ' '-------------------- atn
0dca0                 | ' 
0dca0                 | ' sub do_atn
0dca0                 | _do_atn
0dca0     00 4A 05 F6 | 	mov	COUNT_, #0
0dca4     A8 00 A0 FD | 	call	#pushregs_
0dca8     10 F0 07 F1 | 	add	ptra, #16
0dcac     4A 00 00 FF 
0dcb0     A0 E4 05 F1 | 	add	objptr, ##38048
0dcb4     F2 16 02 FB | 	rdlong	arg03, objptr
0dcb8     0B 15 02 F6 | 	mov	arg02, arg03
0dcbc     01 14 66 F0 | 	shl	arg02, #1
0dcc0     0B 15 02 F1 | 	add	arg02, arg03
0dcc4     02 14 66 F0 | 	shl	arg02, #2
0dcc8     03 00 00 FF 
0dccc     04 E4 85 F1 | 	sub	objptr, ##1540
0dcd0     F2 14 02 F1 | 	add	arg02, objptr
0dcd4     0A 17 02 FB | 	rdlong	arg03, arg02
0dcd8                 | ' 
0dcd8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcd8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dcd8     02 16 16 F2 | 	cmp	arg03, #2 wc
0dcdc     47 00 00 FF 
0dce0     9C E4 85 F1 | 	sub	objptr, ##36508
0dce4     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
0dce8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dcec     00 12 06 F6 | 	mov	arg01, #0
0dcf0     A0 BE B1 FD | 	call	#__system___getiolock_0622
0dcf4     FD 12 02 F6 | 	mov	arg01, result1
0dcf8     AC 73 B1 FD | 	call	#__system___lockmem
0dcfc     91 01 00 FF 
0dd00     32 15 06 F6 | 	mov	arg02, ##@LR__5547
0dd04     00 12 06 F6 | 	mov	arg01, #0
0dd08     00 16 06 F6 | 	mov	arg03, #0
0dd0c     B8 7B B1 FD | 	call	#__system___basic_print_string
0dd10     00 12 06 F6 | 	mov	arg01, #0
0dd14     7C BE B1 FD | 	call	#__system___getiolock_0622
0dd18     FD 00 68 FC | 	wrlong	#0, result1
0dd1c     27 12 06 F6 | 	mov	arg01, #39
0dd20     00 14 06 F6 | 	mov	arg02, #0
0dd24     F8 1E B1 FD | 	call	#_printerror
0dd28     6C 00 90 FD | 	jmp	#LR__1141
0dd2c                 | LR__1140
0dd2c     10 F8 BF FD | 	call	#_pop
0dd30     FF 16 02 F6 | 	mov	arg03, result3
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 05 F1 | 	add	fp, #4
0dd3c     A7 FC 61 FC | 	wrlong	result2, fp
0dd40     04 4E 05 F1 | 	add	fp, #4
0dd44     A7 16 62 FC | 	wrlong	arg03, fp
0dd48     08 4E 85 F1 | 	sub	fp, #8
0dd4c     A7 12 02 F6 | 	mov	arg01, fp
0dd50     84 FA BF FD | 	call	#_converttofloat
0dd54     FD 12 02 F6 | 	mov	arg01, result1
0dd58     00 C0 1F FF 
0dd5c     00 14 06 F6 | 	mov	arg02, ##1065353216
0dd60     74 9C B1 FD | 	call	#__system____builtin_atan2f
0dd64     FD 12 02 F6 | 	mov	arg01, result1
0dd68     52 00 00 FF 
0dd6c     04 E5 05 F1 | 	add	objptr, ##42244
0dd70     F2 14 02 FB | 	rdlong	arg02, objptr
0dd74     52 00 00 FF 
0dd78     04 E5 85 F1 | 	sub	objptr, ##42244
0dd7c     F4 91 B1 FD | 	call	#__system___float_mul
0dd80     A7 FA 61 FC | 	wrlong	result1, fp
0dd84     08 4E 05 F1 | 	add	fp, #8
0dd88     A7 3C 68 FC | 	wrlong	#30, fp
0dd8c     08 4E 85 F1 | 	sub	fp, #8
0dd90     A7 12 02 F6 | 	mov	arg01, fp
0dd94     38 F8 BF FD | 	call	#_push
0dd98                 | LR__1141
0dd98     A7 F0 03 F6 | 	mov	ptra, fp
0dd9c     B2 00 A0 FD | 	call	#popregs_
0dda0                 | _do_atn_ret
0dda0     2D 00 64 FD | 	ret
0dda4                 | 
0dda4                 | ' 
0dda4                 | ' '-------------------- beep
0dda4                 | ' 
0dda4                 | ' sub do_beep
0dda4                 | _do_beep
0dda4     02 4A 05 F6 | 	mov	COUNT_, #2
0dda8     A8 00 A0 FD | 	call	#pushregs_
0ddac     20 F0 07 F1 | 	add	ptra, #32
0ddb0     8C F7 BF FD | 	call	#_pop
0ddb4     FD 1C 02 F6 | 	mov	arg06, result1
0ddb8     FE 1A 02 F6 | 	mov	arg05, result2
0ddbc     FF 26 02 F6 | 	mov	local01, result3
0ddc0     0C 4E 05 F1 | 	add	fp, #12
0ddc4     A7 1C 62 FC | 	wrlong	arg06, fp
0ddc8     04 4E 05 F1 | 	add	fp, #4
0ddcc     A7 1A 62 FC | 	wrlong	arg05, fp
0ddd0     04 4E 05 F1 | 	add	fp, #4
0ddd4     A7 26 62 FC | 	wrlong	local01, fp
0ddd8     14 4E 85 F1 | 	sub	fp, #20
0dddc     60 F7 BF FD | 	call	#_pop
0dde0     A7 FA 61 FC | 	wrlong	result1, fp
0dde4     04 4E 05 F1 | 	add	fp, #4
0dde8     A7 FC 61 FC | 	wrlong	result2, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 FE 61 FC | 	wrlong	result3, fp
0ddf4                 | ' 
0ddf4                 | ' t2=pop()
0ddf4                 | ' t1=pop()
0ddf4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0ddf4     FF 1C 02 F6 | 	mov	arg06, result3
0ddf8     08 4E 85 F1 | 	sub	fp, #8
0ddfc     1C 1C 0E F2 | 	cmp	arg06, #28 wz
0de00     08 4E 05 51 |  if_ne	add	fp, #8
0de04     A7 26 02 5B |  if_ne	rdlong	local01, fp
0de08     08 4E 85 51 |  if_ne	sub	fp, #8
0de0c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0de10     A7 28 02 AB |  if_e	rdlong	local02, fp
0de14     0C 00 90 AD |  if_e	jmp	#LR__1150
0de18     A7 12 02 F6 | 	mov	arg01, fp
0de1c     FC F8 BF FD | 	call	#_converttoint
0de20     FD 28 02 F6 | 	mov	local02, result1
0de24                 | LR__1150
0de24     1C 4E 05 F1 | 	add	fp, #28
0de28     A7 FE 48 FC | 	wrbyte	#127, fp
0de2c     01 4E 05 F1 | 	add	fp, #1
0de30     A7 00 49 FC | 	wrbyte	#128, fp
0de34     01 28 66 F0 | 	shl	local02, #1
0de38     14 29 52 F6 | 	abs	local02, local02 wc
0de3c     0F 1B 80 FF 
0de40     14 1F 1A FD | 	qdiv	##3546895, local02
0de44     01 4E 85 F1 | 	sub	fp, #1
0de48     A7 14 02 F6 | 	mov	arg02, fp
0de4c     1C 4E 85 F1 | 	sub	fp, #28
0de50     0B 00 00 FF 
0de54     CC E4 05 F1 | 	add	objptr, ##5836
0de58     F2 28 02 F6 | 	mov	local02, objptr
0de5c     CC 29 06 F1 | 	add	local02, #460
0de60     14 01 68 FC | 	wrlong	#0, local02
0de64     00 00 20 FF 
0de68     00 14 06 F1 | 	add	arg02, ##1073741824
0de6c     14 13 02 F6 | 	mov	arg01, local02
0de70     08 12 06 F1 | 	add	arg01, #8
0de74     09 15 62 FC | 	wrlong	arg02, arg01
0de78     14 15 02 F6 | 	mov	arg02, local02
0de7c     0C 14 06 F1 | 	add	arg02, #12
0de80     0A 01 68 FC | 	wrlong	#0, arg02
0de84     14 27 02 F6 | 	mov	local01, local02
0de88     10 26 06 F1 | 	add	local01, #16
0de8c     13 05 68 FC | 	wrlong	#2, local01
0de90                 | ' 
0de90                 | ' base2:=@channel1[0]+64*channel
0de90                 | ' long[base2]:=0
0de90                 | ' long[base2+8]:=sample+$40000000 
0de90                 | ' if loop>=0
0de90                 | '   long[base2+12]:=loop
0de90                 | '   long[base2+16]:= len
0de90                 | ' else
0de90                 | '   long[base2+12]:= len
0de90                 | '   long[base2+16]:= len+1
0de90                 | ' word[base2+20]:=vol
0de90     14 27 02 F6 | 	mov	local01, local02
0de94     14 26 06 F1 | 	add	local01, #20
0de98     20 00 80 FF 
0de9c     13 01 58 FC | 	wrword	##16384, local01
0dea0                 | ' word[base2+24]:= 3546895 /splfreq 
0dea0     14 13 02 F6 | 	mov	arg01, local02
0dea4     18 12 06 F1 | 	add	arg01, #24
0dea8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
0dea8     1A 28 06 F1 | 	add	local02, #26
0deac     18 26 62 FD | 	getqx	local01
0deb0     13 27 82 F6 | 	negc	local01, local01
0deb4     09 27 52 FC | 	wrword	local01, arg01
0deb8     14 01 5A FC | 	wrword	#256, local02
0debc     0B 00 00 FF 
0dec0     CC E4 85 F1 | 	sub	objptr, ##5836
0dec4     A7 12 02 F6 | 	mov	arg01, fp
0dec8     0C 12 06 F1 | 	add	arg01, #12
0decc     00 F7 BF FD | 	call	#_push
0ded0     A4 DE B0 FD | 	call	#_do_waitms
0ded4     07 12 06 F6 | 	mov	arg01, #7
0ded8     0B 00 00 FF 
0dedc     CC E4 05 F1 | 	add	objptr, ##5836
0dee0     D0 6E B1 FD | 	call	#_audio096_spin2_stop
0dee4     0B 00 00 FF 
0dee8     CC E4 85 F1 | 	sub	objptr, ##5836
0deec     A7 F0 03 F6 | 	mov	ptra, fp
0def0     B2 00 A0 FD | 	call	#popregs_
0def4                 | _do_beep_ret
0def4     2D 00 64 FD | 	ret
0def8                 | 
0def8                 | ' 
0def8                 | ' '-------------------- blit
0def8                 | ' 
0def8                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0def8                 | ' sub do_blit
0def8                 | _do_blit
0def8     03 4A 05 F6 | 	mov	COUNT_, #3
0defc     A8 00 A0 FD | 	call	#pushregs_
0df00     3C F0 07 F1 | 	add	ptra, #60
0df04     4A 00 00 FF 
0df08     A0 E4 05 F1 | 	add	objptr, ##38048
0df0c     F2 24 02 FB | 	rdlong	arg10, objptr
0df10     12 23 02 F6 | 	mov	arg09, arg10
0df14     01 22 66 F0 | 	shl	arg09, #1
0df18     12 23 02 F1 | 	add	arg09, arg10
0df1c     02 22 66 F0 | 	shl	arg09, #2
0df20     03 00 00 FF 
0df24     04 E4 85 F1 | 	sub	objptr, ##1540
0df28     F2 22 02 F1 | 	add	arg09, objptr
0df2c     11 27 02 FB | 	rdlong	local01, arg09
0df30                 | ' 
0df30                 | ' numpar=compiledline(lineptr_e).result.uresult
0df30                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df30     0A 26 0E F2 | 	cmp	local01, #10 wz
0df34     47 00 00 FF 
0df38     9C E4 85 F1 | 	sub	objptr, ##36508
0df3c     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0df40     50 00 90 AD |  if_e	jmp	#LR__1160
0df44     00 12 06 F6 | 	mov	arg01, #0
0df48     48 BC B1 FD | 	call	#__system___getiolock_0622
0df4c     FD 12 02 F6 | 	mov	arg01, result1
0df50     54 71 B1 FD | 	call	#__system___lockmem
0df54     91 01 00 FF 
0df58     38 15 06 F6 | 	mov	arg02, ##@LR__5548
0df5c     00 12 06 F6 | 	mov	arg01, #0
0df60     00 16 06 F6 | 	mov	arg03, #0
0df64     60 79 B1 FD | 	call	#__system___basic_print_string
0df68     00 12 06 F6 | 	mov	arg01, #0
0df6c     24 BC B1 FD | 	call	#__system___getiolock_0622
0df70     FD 00 68 FC | 	wrlong	#0, result1
0df74     50 00 00 FF 
0df78     10 E5 05 F1 | 	add	objptr, ##41232
0df7c     F2 14 02 FB | 	rdlong	arg02, objptr
0df80     50 00 00 FF 
0df84     10 E5 85 F1 | 	sub	objptr, ##41232
0df88     27 12 06 F6 | 	mov	arg01, #39
0df8c     90 1C B1 FD | 	call	#_printerror
0df90     04 01 90 FD | 	jmp	#LR__1165
0df94                 | LR__1160
0df94                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0df94     13 29 02 F6 | 	mov	local02, local01
0df98     01 28 86 F1 | 	sub	local02, #1
0df9c                 | LR__1161
0df9c     13 25 02 F6 | 	mov	arg10, local01
0dfa0     01 24 86 F1 | 	sub	arg10, #1
0dfa4     12 29 1A F2 | 	cmp	local02, arg10 wcz
0dfa8     40 00 90 1D |  if_a	jmp	#LR__1162
0dfac     90 F5 BF FD | 	call	#_pop
0dfb0     A7 FA 61 FC | 	wrlong	result1, fp
0dfb4     04 4E 05 F1 | 	add	fp, #4
0dfb8     A7 FC 61 FC | 	wrlong	result2, fp
0dfbc     04 4E 05 F1 | 	add	fp, #4
0dfc0     A7 FE 61 FC | 	wrlong	result3, fp
0dfc4     14 2B 02 F6 | 	mov	local03, local02
0dfc8     02 2A 66 F0 | 	shl	local03, #2
0dfcc     04 4E 05 F1 | 	add	fp, #4
0dfd0     A7 2A 02 F1 | 	add	local03, fp
0dfd4     0C 4E 85 F1 | 	sub	fp, #12
0dfd8     A7 12 02 F6 | 	mov	arg01, fp
0dfdc     3C F7 BF FD | 	call	#_converttoint
0dfe0     15 FB 61 FC | 	wrlong	result1, local03
0dfe4     01 28 86 F1 | 	sub	local02, #1
0dfe8     B0 FF 9F FD | 	jmp	#LR__1161
0dfec                 | LR__1162
0dfec                 | ' if numpar=10 then 
0dfec     0A 26 0E F2 | 	cmp	local01, #10 wz
0dff0     5C 00 90 5D |  if_ne	jmp	#LR__1163
0dff4     0C 4E 05 F1 | 	add	fp, #12
0dff8     A7 12 02 FB | 	rdlong	arg01, fp
0dffc     04 4E 05 F1 | 	add	fp, #4
0e000     A7 14 02 FB | 	rdlong	arg02, fp
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 16 02 FB | 	rdlong	arg03, fp
0e00c     04 4E 05 F1 | 	add	fp, #4
0e010     A7 18 02 FB | 	rdlong	arg04, fp
0e014     04 4E 05 F1 | 	add	fp, #4
0e018     A7 1A 02 FB | 	rdlong	arg05, fp
0e01c     04 4E 05 F1 | 	add	fp, #4
0e020     A7 1C 02 FB | 	rdlong	arg06, fp
0e024     04 4E 05 F1 | 	add	fp, #4
0e028     A7 1E 02 FB | 	rdlong	arg07, fp
0e02c     04 4E 05 F1 | 	add	fp, #4
0e030     A7 20 02 FB | 	rdlong	arg08, fp
0e034     04 4E 05 F1 | 	add	fp, #4
0e038     A7 22 02 FB | 	rdlong	arg09, fp
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 24 02 FB | 	rdlong	arg10, fp
0e044     30 4E 85 F1 | 	sub	fp, #48
0e048     DC 64 B1 FD | 	call	#_hg010b_spin2_blit
0e04c     48 00 90 FD | 	jmp	#LR__1164
0e050                 | LR__1163
0e050     F2 1E 02 FB | 	rdlong	arg07, objptr
0e054     0C 4E 05 F1 | 	add	fp, #12
0e058     A7 14 02 FB | 	rdlong	arg02, fp
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 16 02 FB | 	rdlong	arg03, fp
0e064     04 4E 05 F1 | 	add	fp, #4
0e068     A7 18 02 FB | 	rdlong	arg04, fp
0e06c     04 4E 05 F1 | 	add	fp, #4
0e070     A7 1A 02 FB | 	rdlong	arg05, fp
0e074     04 4E 05 F1 | 	add	fp, #4
0e078     A7 20 02 FB | 	rdlong	arg08, fp
0e07c     04 4E 05 F1 | 	add	fp, #4
0e080     A7 22 02 FB | 	rdlong	arg09, fp
0e084     20 4E 85 F1 | 	sub	fp, #32
0e088     0F 13 02 F6 | 	mov	arg01, arg07
0e08c     0A 1C C6 F9 | 	decod	arg06, #10
0e090     0A 24 C6 F9 | 	decod	arg10, #10
0e094     90 64 B1 FD | 	call	#_hg010b_spin2_blit
0e098                 | LR__1164
0e098                 | LR__1165
0e098     A7 F0 03 F6 | 	mov	ptra, fp
0e09c     B2 00 A0 FD | 	call	#popregs_
0e0a0                 | _do_blit_ret
0e0a0     2D 00 64 FD | 	ret
0e0a4                 | 
0e0a4                 | ' 
0e0a4                 | ' 
0e0a4                 | ' '-------------------- bin$
0e0a4                 | ' 
0e0a4                 | ' sub do_bin
0e0a4                 | _do_bin
0e0a4     02 4A 05 F6 | 	mov	COUNT_, #2
0e0a8     A8 00 A0 FD | 	call	#pushregs_
0e0ac     18 F0 07 F1 | 	add	ptra, #24
0e0b0     4A 00 00 FF 
0e0b4     A0 E4 05 F1 | 	add	objptr, ##38048
0e0b8     F2 16 02 FB | 	rdlong	arg03, objptr
0e0bc     0B 15 02 F6 | 	mov	arg02, arg03
0e0c0     01 14 66 F0 | 	shl	arg02, #1
0e0c4     0B 15 02 F1 | 	add	arg02, arg03
0e0c8     02 14 66 F0 | 	shl	arg02, #2
0e0cc     03 00 00 FF 
0e0d0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0d4     F2 14 02 F1 | 	add	arg02, objptr
0e0d8     0A 27 02 FB | 	rdlong	local01, arg02
0e0dc                 | ' 
0e0dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0dc                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e0dc     03 26 16 F2 | 	cmp	local01, #3 wc
0e0e0     47 00 00 FF 
0e0e4     9C E4 85 F1 | 	sub	objptr, ##36508
0e0e8     00 26 0E C2 |  if_b	cmp	local01, #0 wz
0e0ec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0e0f0     00 12 06 F6 | 	mov	arg01, #0
0e0f4     9C BA B1 FD | 	call	#__system___getiolock_0622
0e0f8     FD 12 02 F6 | 	mov	arg01, result1
0e0fc     A8 6F B1 FD | 	call	#__system___lockmem
0e100     91 01 00 FF 
0e104     3F 15 06 F6 | 	mov	arg02, ##@LR__5549
0e108     00 12 06 F6 | 	mov	arg01, #0
0e10c     00 16 06 F6 | 	mov	arg03, #0
0e110     B4 77 B1 FD | 	call	#__system___basic_print_string
0e114     00 12 06 F6 | 	mov	arg01, #0
0e118     78 BA B1 FD | 	call	#__system___getiolock_0622
0e11c     FD 00 68 FC | 	wrlong	#0, result1
0e120     27 12 06 F6 | 	mov	arg01, #39
0e124     00 14 06 F6 | 	mov	arg02, #0
0e128     F4 1A B1 FD | 	call	#_printerror
0e12c     8C 00 90 FD | 	jmp	#LR__1173
0e130                 | LR__1170
0e130                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e130     02 26 0E F2 | 	cmp	local01, #2 wz
0e134     30 00 90 5D |  if_ne	jmp	#LR__1171
0e138     04 F4 BF FD | 	call	#_pop
0e13c     FF 26 02 F6 | 	mov	local01, result3
0e140     A7 FA 61 FC | 	wrlong	result1, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 FC 61 FC | 	wrlong	result2, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 26 62 FC | 	wrlong	local01, fp
0e154     08 4E 85 F1 | 	sub	fp, #8
0e158     A7 12 02 F6 | 	mov	arg01, fp
0e15c     BC F5 BF FD | 	call	#_converttoint
0e160     FD 28 02 F6 | 	mov	local02, result1
0e164     04 00 90 FD | 	jmp	#LR__1172
0e168                 | LR__1171
0e168     00 28 06 F6 | 	mov	local02, #0
0e16c                 | LR__1172
0e16c     D0 F3 BF FD | 	call	#_pop
0e170     FF 26 02 F6 | 	mov	local01, result3
0e174     A7 FA 61 FC | 	wrlong	result1, fp
0e178     04 4E 05 F1 | 	add	fp, #4
0e17c     A7 FC 61 FC | 	wrlong	result2, fp
0e180     04 4E 05 F1 | 	add	fp, #4
0e184     A7 26 62 FC | 	wrlong	local01, fp
0e188     08 4E 85 F1 | 	sub	fp, #8
0e18c     A7 12 02 F6 | 	mov	arg01, fp
0e190     88 F5 BF FD | 	call	#_converttoint
0e194     FD 12 02 F6 | 	mov	arg01, result1
0e198     14 15 02 F6 | 	mov	arg02, local02
0e19c     02 16 06 F6 | 	mov	arg03, #2
0e1a0     18 85 B1 FD | 	call	#__system__Number_S
0e1a4     A7 FA 61 FC | 	wrlong	result1, fp
0e1a8     08 4E 05 F1 | 	add	fp, #8
0e1ac     A7 3E 68 FC | 	wrlong	#31, fp
0e1b0     08 4E 85 F1 | 	sub	fp, #8
0e1b4     A7 12 02 F6 | 	mov	arg01, fp
0e1b8     14 F4 BF FD | 	call	#_push
0e1bc                 | LR__1173
0e1bc     A7 F0 03 F6 | 	mov	ptra, fp
0e1c0     B2 00 A0 FD | 	call	#popregs_
0e1c4                 | _do_bin_ret
0e1c4     2D 00 64 FD | 	ret
0e1c8                 | 
0e1c8                 | ' 
0e1c8                 | ' '-------------------- box
0e1c8                 | ' 
0e1c8                 | ' sub do_box
0e1c8                 | _do_box
0e1c8     03 4A 05 F6 | 	mov	COUNT_, #3
0e1cc     A8 00 A0 FD | 	call	#pushregs_
0e1d0     30 F0 07 F1 | 	add	ptra, #48
0e1d4     68 F3 BF FD | 	call	#_pop
0e1d8     FD 1A 02 F6 | 	mov	arg05, result1
0e1dc     FE 18 02 F6 | 	mov	arg04, result2
0e1e0     FF 16 02 F6 | 	mov	arg03, result3
0e1e4     24 4E 05 F1 | 	add	fp, #36
0e1e8     A7 1A 62 FC | 	wrlong	arg05, fp
0e1ec     04 4E 05 F1 | 	add	fp, #4
0e1f0     A7 18 62 FC | 	wrlong	arg04, fp
0e1f4     04 4E 05 F1 | 	add	fp, #4
0e1f8     A7 16 62 FC | 	wrlong	arg03, fp
0e1fc     2C 4E 85 F1 | 	sub	fp, #44
0e200     3C F3 BF FD | 	call	#_pop
0e204     FD 1A 02 F6 | 	mov	arg05, result1
0e208     FE 18 02 F6 | 	mov	arg04, result2
0e20c     FF 16 02 F6 | 	mov	arg03, result3
0e210     18 4E 05 F1 | 	add	fp, #24
0e214     A7 1A 62 FC | 	wrlong	arg05, fp
0e218     04 4E 05 F1 | 	add	fp, #4
0e21c     A7 18 62 FC | 	wrlong	arg04, fp
0e220     04 4E 05 F1 | 	add	fp, #4
0e224     A7 16 62 FC | 	wrlong	arg03, fp
0e228     20 4E 85 F1 | 	sub	fp, #32
0e22c     10 F3 BF FD | 	call	#_pop
0e230     FD 1A 02 F6 | 	mov	arg05, result1
0e234     FE 18 02 F6 | 	mov	arg04, result2
0e238     FF 26 02 F6 | 	mov	local01, result3
0e23c     0C 4E 05 F1 | 	add	fp, #12
0e240     A7 1A 62 FC | 	wrlong	arg05, fp
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 18 62 FC | 	wrlong	arg04, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 26 62 FC | 	wrlong	local01, fp
0e254     14 4E 85 F1 | 	sub	fp, #20
0e258     E4 F2 BF FD | 	call	#_pop
0e25c     A7 FA 61 FC | 	wrlong	result1, fp
0e260     04 4E 05 F1 | 	add	fp, #4
0e264     A7 FC 61 FC | 	wrlong	result2, fp
0e268     04 4E 05 F1 | 	add	fp, #4
0e26c     A7 FE 61 FC | 	wrlong	result3, fp
0e270                 | ' 
0e270                 | ' t4=pop()
0e270                 | ' t3=pop()
0e270                 | ' t2=pop()
0e270                 | ' t1=pop()
0e270                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e270     FF 1A 02 F6 | 	mov	arg05, result3
0e274     08 4E 85 F1 | 	sub	fp, #8
0e278     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e27c     08 4E 05 51 |  if_ne	add	fp, #8
0e280     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e284     08 4E 85 51 |  if_ne	sub	fp, #8
0e288     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e28c     A8 00 90 5D |  if_ne	jmp	#LR__1180
0e290     14 4E 05 F1 | 	add	fp, #20
0e294     A7 26 02 FB | 	rdlong	local01, fp
0e298     14 4E 85 F1 | 	sub	fp, #20
0e29c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2a0     14 4E 05 51 |  if_ne	add	fp, #20
0e2a4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2a8     14 4E 85 51 |  if_ne	sub	fp, #20
0e2ac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2b0     84 00 90 5D |  if_ne	jmp	#LR__1180
0e2b4     20 4E 05 F1 | 	add	fp, #32
0e2b8     A7 26 02 FB | 	rdlong	local01, fp
0e2bc     20 4E 85 F1 | 	sub	fp, #32
0e2c0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2c4     20 4E 05 51 |  if_ne	add	fp, #32
0e2c8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2cc     20 4E 85 51 |  if_ne	sub	fp, #32
0e2d0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2d4     60 00 90 5D |  if_ne	jmp	#LR__1180
0e2d8     2C 4E 05 F1 | 	add	fp, #44
0e2dc     A7 26 02 FB | 	rdlong	local01, fp
0e2e0     2C 4E 85 F1 | 	sub	fp, #44
0e2e4     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2e8     2C 4E 05 51 |  if_ne	add	fp, #44
0e2ec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2f0     2C 4E 85 51 |  if_ne	sub	fp, #44
0e2f4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2f8     3C 00 90 5D |  if_ne	jmp	#LR__1180
0e2fc     A7 12 02 FB | 	rdlong	arg01, fp
0e300     0C 4E 05 F1 | 	add	fp, #12
0e304     A7 14 02 FB | 	rdlong	arg02, fp
0e308     0C 4E 05 F1 | 	add	fp, #12
0e30c     A7 16 02 FB | 	rdlong	arg03, fp
0e310     0C 4E 05 F1 | 	add	fp, #12
0e314     A7 18 02 FB | 	rdlong	arg04, fp
0e318     24 4E 85 F1 | 	sub	fp, #36
0e31c     37 00 00 FF 
0e320     48 E4 05 F1 | 	add	objptr, ##28232
0e324     F2 1A 02 FB | 	rdlong	arg05, objptr
0e328     37 00 00 FF 
0e32c     48 E4 85 F1 | 	sub	objptr, ##28232
0e330     EC 54 B1 FD | 	call	#_hg010b_spin2_box
0e334                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e334     60 00 90 FD | 	jmp	#LR__1181
0e338                 | LR__1180
0e338     A7 12 02 F6 | 	mov	arg01, fp
0e33c     DC F3 BF FD | 	call	#_converttoint
0e340     FD 28 02 F6 | 	mov	local02, result1
0e344     A7 12 02 F6 | 	mov	arg01, fp
0e348     0C 12 06 F1 | 	add	arg01, #12
0e34c     CC F3 BF FD | 	call	#_converttoint
0e350     FD 2A 02 F6 | 	mov	local03, result1
0e354     A7 12 02 F6 | 	mov	arg01, fp
0e358     18 12 06 F1 | 	add	arg01, #24
0e35c     BC F3 BF FD | 	call	#_converttoint
0e360     FD 26 02 F6 | 	mov	local01, result1
0e364     A7 12 02 F6 | 	mov	arg01, fp
0e368     24 12 06 F1 | 	add	arg01, #36
0e36c     AC F3 BF FD | 	call	#_converttoint
0e370     FD 18 02 F6 | 	mov	arg04, result1
0e374     37 00 00 FF 
0e378     48 E4 05 F1 | 	add	objptr, ##28232
0e37c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e380     37 00 00 FF 
0e384     48 E4 85 F1 | 	sub	objptr, ##28232
0e388     14 13 02 F6 | 	mov	arg01, local02
0e38c     15 15 02 F6 | 	mov	arg02, local03
0e390     13 17 02 F6 | 	mov	arg03, local01
0e394     88 54 B1 FD | 	call	#_hg010b_spin2_box
0e398                 | LR__1181
0e398     A7 F0 03 F6 | 	mov	ptra, fp
0e39c     B2 00 A0 FD | 	call	#popregs_
0e3a0                 | _do_box_ret
0e3a0     2D 00 64 FD | 	ret
0e3a4                 | 
0e3a4                 | ' 
0e3a4                 | ' '-------------------- brun
0e3a4                 | ' 
0e3a4                 | ' sub do_brun
0e3a4                 | _do_brun
0e3a4     08 4A 05 F6 | 	mov	COUNT_, #8
0e3a8     A8 00 A0 FD | 	call	#pushregs_
0e3ac     90 F1 BF FD | 	call	#_pop
0e3b0     FE 1A 02 F6 | 	mov	arg05, result2
0e3b4     FF 18 02 F6 | 	mov	arg04, result3
0e3b8     FD 26 02 F6 | 	mov	local01, result1
0e3bc     0D 29 02 F6 | 	mov	local02, arg05
0e3c0     0C 2B 02 F6 | 	mov	local03, arg04
0e3c4                 | ' 
0e3c4                 | ' t1=pop() 
0e3c4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e3c4     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e3c8     10 00 90 5D |  if_ne	jmp	#LR__1190
0e3cc     13 13 02 F6 | 	mov	arg01, local01
0e3d0     DC F2 BF FD | 	call	#_convertstring
0e3d4     FD 26 02 F6 | 	mov	local01, result1
0e3d8     1F 2A 06 F6 | 	mov	local03, #31
0e3dc                 | LR__1190
0e3dc                 | ' if t1.result_type=result_string then
0e3dc     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e3e0     EC 01 90 5D |  if_ne	jmp	#LR__1194
0e3e4     13 2D 02 F6 | 	mov	local04, local01
0e3e8                 | '   filename=t1.result.sresult
0e3e8                 | '   if left$(filename,1)="/" then 
0e3e8     16 13 02 F6 | 	mov	arg01, local04
0e3ec     01 14 06 F6 | 	mov	arg02, #1
0e3f0     78 80 B1 FD | 	call	#__system__Left_S
0e3f4     FD 12 02 F6 | 	mov	arg01, result1
0e3f8     91 01 00 FF 
0e3fc     46 15 06 F6 | 	mov	arg02, ##@LR__5550
0e400     CC 6C B1 FD | 	call	#__system___string_cmp
0e404     00 FA 0D F2 | 	cmp	result1, #0 wz
0e408     16 2F 02 A6 |  if_e	mov	local05, local04
0e40c     14 00 90 AD |  if_e	jmp	#LR__1191
0e410     91 01 00 FF 
0e414     48 13 06 F6 | 	mov	arg01, ##@LR__5551
0e418     16 15 02 F6 | 	mov	arg02, local04
0e41c     E4 6C B1 FD | 	call	#__system___string_concat
0e420     FD 2E 02 F6 | 	mov	local05, result1
0e424                 | LR__1191
0e424                 | '   open fullfilename for input as #9
0e424     09 12 06 F6 | 	mov	arg01, #9
0e428     17 15 02 F6 | 	mov	arg02, local05
0e42c     00 16 06 F6 | 	mov	arg03, #0
0e430     A4 73 B1 FD | 	call	#__system___basic_open_string
0e434     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e438     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e43c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e440     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e444     FD 30 0A F6 | 	mov	local06, result1 wz
0e448                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e448     8C 00 90 AD |  if_e	jmp	#LR__1192
0e44c     00 12 06 F6 | 	mov	arg01, #0
0e450     40 B7 B1 FD | 	call	#__system___getiolock_0622
0e454     FD 12 02 F6 | 	mov	arg01, result1
0e458     4C 6C B1 FD | 	call	#__system___lockmem
0e45c     91 01 00 FF 
0e460     51 15 06 F6 | 	mov	arg02, ##@LR__5552
0e464     00 12 06 F6 | 	mov	arg01, #0
0e468     00 16 06 F6 | 	mov	arg03, #0
0e46c     58 74 B1 FD | 	call	#__system___basic_print_string
0e470     00 12 06 F6 | 	mov	arg01, #0
0e474     18 15 02 F6 | 	mov	arg02, local06
0e478     00 16 06 F6 | 	mov	arg03, #0
0e47c     0A 18 06 F6 | 	mov	arg04, #10
0e480     88 74 B1 FD | 	call	#__system___basic_print_integer
0e484     91 01 00 FF 
0e488     5F 15 06 F6 | 	mov	arg02, ##@LR__5553
0e48c     00 12 06 F6 | 	mov	arg01, #0
0e490     00 16 06 F6 | 	mov	arg03, #0
0e494     30 74 B1 FD | 	call	#__system___basic_print_string
0e498     18 13 02 F6 | 	mov	arg01, local06
0e49c     14 86 B1 FD | 	call	#__system___strerror
0e4a0     FD 14 02 F6 | 	mov	arg02, result1
0e4a4     00 12 06 F6 | 	mov	arg01, #0
0e4a8     00 16 06 F6 | 	mov	arg03, #0
0e4ac     18 74 B1 FD | 	call	#__system___basic_print_string
0e4b0     00 12 06 F6 | 	mov	arg01, #0
0e4b4     0A 14 06 F6 | 	mov	arg02, #10
0e4b8     00 16 06 F6 | 	mov	arg03, #0
0e4bc     B0 73 B1 FD | 	call	#__system___basic_print_char
0e4c0     00 12 06 F6 | 	mov	arg01, #0
0e4c4     CC B6 B1 FD | 	call	#__system___getiolock_0622
0e4c8     FD 00 68 FC | 	wrlong	#0, result1
0e4cc     09 12 06 F6 | 	mov	arg01, #9
0e4d0     44 AD B1 FD | 	call	#__system__close
0e4d4     F8 00 90 FD | 	jmp	#LR__1195
0e4d8                 | LR__1192
0e4d8     01 32 06 F6 | 	mov	local07, #1
0e4dc     00 34 06 F6 | 	mov	local08, #0
0e4e0                 | '   do
0e4e0                 | LR__1193
0e4e0                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e4e0     F2 16 02 F6 | 	mov	arg03, objptr
0e4e4     4E 00 00 FF 
0e4e8     D4 16 06 F1 | 	add	arg03, ##40148
0e4ec     09 12 06 F6 | 	mov	arg01, #9
0e4f0     19 15 02 F6 | 	mov	arg02, local07
0e4f4     0A 18 C6 F9 | 	decod	arg04, #10
0e4f8     01 1A 06 F6 | 	mov	arg05, #1
0e4fc     50 75 B1 FD | 	call	#__system___basic_get
0e500     FD 30 02 F6 | 	mov	local06, result1
0e504     FD 32 02 F1 | 	add	local07, result1
0e508     F2 12 02 F6 | 	mov	arg01, objptr
0e50c     4E 00 00 FF 
0e510     D4 12 06 F1 | 	add	arg01, ##40148
0e514     1A 15 02 F6 | 	mov	arg02, local08
0e518     0A 16 C6 F9 | 	decod	arg03, #10
0e51c     0B 00 00 FF 
0e520     CC E4 05 F1 | 	add	objptr, ##5836
0e524     18 64 B1 FD | 	call	#_psram_spin2_write
0e528     0B 00 00 FF 
0e52c     CC E4 85 F1 | 	sub	objptr, ##5836
0e530     18 35 02 F1 | 	add	local08, local06
0e534     02 00 00 FF 
0e538     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e53c     E0 03 00 AF 
0e540     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e544     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1193
0e548     37 00 00 FF 
0e54c     1C E4 05 F1 | 	add	objptr, ##28188
0e550     F2 12 02 FB | 	rdlong	arg01, objptr
0e554     03 12 62 FD | 	cogstop	arg01
0e558     04 E4 05 F1 | 	add	objptr, #4
0e55c     F2 12 02 FB | 	rdlong	arg01, objptr
0e560     03 12 62 FD | 	cogstop	arg01
0e564     04 E4 05 F1 | 	add	objptr, #4
0e568     F2 12 02 FB | 	rdlong	arg01, objptr
0e56c     03 12 62 FD | 	cogstop	arg01
0e570     19 00 00 FF 
0e574     3C E5 05 F1 | 	add	objptr, ##13116
0e578     F2 12 02 FB | 	rdlong	arg01, objptr
0e57c     50 00 00 FF 
0e580     60 E5 85 F1 | 	sub	objptr, ##41312
0e584     03 12 62 FD | 	cogstop	arg01
0e588     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e58c     18 00 00 FF 
0e590     CC 14 06 F1 | 	add	arg02, ##12492
0e594     F2 16 02 F6 | 	mov	arg03, objptr
0e598     37 00 00 FF 
0e59c     2C 16 06 F1 | 	add	arg03, ##28204
0e5a0     1E 34 06 F6 | 	mov	local08, #30
0e5a4     28 16 62 FD | 	setq	arg03
0e5a8     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e5ac     01 34 66 C6 |  if_b	neg	local08, #1
0e5b0     52 00 00 FF 
0e5b4     70 E5 05 F1 | 	add	objptr, ##42352
0e5b8     F2 34 62 FC | 	wrlong	local08, objptr
0e5bc     52 00 00 FF 
0e5c0     70 E5 85 F1 | 	sub	objptr, ##42352
0e5c4     00 12 06 F6 | 	mov	arg01, #0
0e5c8     01 12 62 FD | 	cogid	arg01
0e5cc     03 12 62 FD | 	cogstop	arg01
0e5d0                 | LR__1194
0e5d0                 | LR__1195
0e5d0     A7 F0 03 F6 | 	mov	ptra, fp
0e5d4     B2 00 A0 FD | 	call	#popregs_
0e5d8                 | _do_brun_ret
0e5d8     2D 00 64 FD | 	ret
0e5dc                 | 
0e5dc                 | ' 
0e5dc                 | ' '-------------------- cd
0e5dc                 | ' 
0e5dc                 | ' sub do_cd
0e5dc                 | _do_cd
0e5dc     0D 4A 05 F6 | 	mov	COUNT_, #13
0e5e0     A8 00 A0 FD | 	call	#pushregs_
0e5e4     91 01 00 FF 
0e5e8     62 13 06 F6 | 	mov	arg01, ##@LR__5554
0e5ec     31 14 06 F6 | 	mov	arg02, #49
0e5f0     58 B7 B1 FD | 	call	#__system___basic_dir
0e5f4     48 EF BF FD | 	call	#_pop
0e5f8     FE 18 02 F6 | 	mov	arg04, result2
0e5fc     FF 16 02 F6 | 	mov	arg03, result3
0e600     FD 26 02 F6 | 	mov	local01, result1
0e604     0C 29 02 F6 | 	mov	local02, arg04
0e608     0B 2B 02 F6 | 	mov	local03, arg03
0e60c                 | ' t1=pop()
0e60c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e60c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e610     10 00 90 5D |  if_ne	jmp	#LR__1200
0e614     13 13 02 F6 | 	mov	arg01, local01
0e618     94 F0 BF FD | 	call	#_convertstring
0e61c     FD 26 02 F6 | 	mov	local01, result1
0e620     1F 2A 06 F6 | 	mov	local03, #31
0e624                 | LR__1200
0e624                 | ' if t1.result_type<>result_string then printerror(15): return
0e624     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e628     10 00 90 AD |  if_e	jmp	#LR__1201
0e62c     0F 12 06 F6 | 	mov	arg01, #15
0e630     00 14 06 F6 | 	mov	arg02, #0
0e634     E8 15 B1 FD | 	call	#_printerror
0e638     38 06 90 FD | 	jmp	#LR__1227
0e63c                 | LR__1201
0e63c     13 2D 02 F6 | 	mov	local04, local01
0e640                 | ' newdir$=t1.result.sresult
0e640                 | ' if newdir$=".." then 
0e640     91 01 00 FF 
0e644     64 15 06 F6 | 	mov	arg02, ##@LR__5555
0e648     16 13 02 F6 | 	mov	arg01, local04
0e64c     80 6A B1 FD | 	call	#__system___string_cmp
0e650     00 FA 0D F2 | 	cmp	result1, #0 wz
0e654     AC 02 90 5D |  if_ne	jmp	#LR__1216
0e658     4A 00 00 FF 
0e65c     B4 E4 05 F1 | 	add	objptr, ##38068
0e660     F2 12 02 FB | 	rdlong	arg01, objptr
0e664     4A 00 00 FF 
0e668     B4 E4 85 F1 | 	sub	objptr, ##38068
0e66c     09 2F 02 F6 | 	mov	local05, arg01
0e670     97 06 48 FB | 	callpa	#(@LR__1203-@LR__1202)>>2,fcache_load_ptr_
0e674                 | LR__1202
0e674     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e678     01 2E 06 51 |  if_ne	add	local05, #1
0e67c     F4 FF 9F 5D |  if_ne	jmp	#LR__1202
0e680                 | LR__1203
0e680     09 2F 82 F1 | 	sub	local05, arg01
0e684     4A 00 00 FF 
0e688     B4 E4 05 F1 | 	add	objptr, ##38068
0e68c     F2 30 02 FB | 	rdlong	local06, objptr
0e690     4A 00 00 FF 
0e694     B4 E4 85 F1 | 	sub	objptr, ##38068
0e698     91 01 00 FF 
0e69c     67 33 06 F6 | 	mov	local07, ##@LR__5556
0e6a0     17 35 02 F6 | 	mov	local08, local05
0e6a4     19 13 02 F6 | 	mov	arg01, local07
0e6a8     09 37 02 F6 | 	mov	local09, arg01
0e6ac     97 06 48 FB | 	callpa	#(@LR__1205-@LR__1204)>>2,fcache_load_ptr_
0e6b0                 | LR__1204
0e6b0     1B FB C9 FA | 	rdbyte	result1, local09 wz
0e6b4     01 36 06 51 |  if_ne	add	local09, #1
0e6b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1204
0e6bc                 | LR__1205
0e6bc     09 37 82 F1 | 	sub	local09, arg01
0e6c0     1B 39 02 F6 | 	mov	local10, local09
0e6c4     18 13 02 F6 | 	mov	arg01, local06
0e6c8     09 37 02 F6 | 	mov	local09, arg01
0e6cc     97 06 48 FB | 	callpa	#(@LR__1207-@LR__1206)>>2,fcache_load_ptr_
0e6d0                 | LR__1206
0e6d0     1B FB C9 FA | 	rdbyte	result1, local09 wz
0e6d4     01 36 06 51 |  if_ne	add	local09, #1
0e6d8     F4 FF 9F 5D |  if_ne	jmp	#LR__1206
0e6dc                 | LR__1207
0e6dc     09 37 82 F1 | 	sub	local09, arg01
0e6e0     1B FB 01 F6 | 	mov	result1, local09
0e6e4     FD 18 0A F6 | 	mov	arg04, result1 wz
0e6e8     00 FA 05 A6 |  if_e	mov	result1, #0
0e6ec     98 00 90 AD |  if_e	jmp	#LR__1211
0e6f0     00 38 0E F2 | 	cmp	local10, #0 wz
0e6f4     00 FA 05 A6 |  if_e	mov	result1, #0
0e6f8     8C 00 90 AD |  if_e	jmp	#LR__1211
0e6fc     0C 35 5A F2 | 	cmps	local08, arg04 wcz
0e700     0C 35 02 16 |  if_a	mov	local08, arg04
0e704     01 34 56 F2 | 	cmps	local08, #1 wc
0e708     01 34 06 C6 |  if_b	mov	local08, #1
0e70c     19 3B C2 FA | 	rdbyte	local11, local07
0e710     01 38 0E F2 | 	cmp	local10, #1 wz
0e714     18 00 90 5D |  if_ne	jmp	#LR__1208
0e718     18 13 02 F6 | 	mov	arg01, local06
0e71c     1D 15 02 F6 | 	mov	arg02, local11
0e720     1A 17 02 F6 | 	mov	arg03, local08
0e724     01 18 06 F6 | 	mov	arg04, #1
0e728     38 B5 B1 FD | 	call	#__system____ScanForChar
0e72c     58 00 90 FD | 	jmp	#LR__1211
0e730                 | LR__1208
0e730     1C 3D 02 F6 | 	mov	local12, local10
0e734     01 3C 86 F1 | 	sub	local12, #1
0e738                 | LR__1209
0e738     18 13 02 F6 | 	mov	arg01, local06
0e73c     1D 15 02 F6 | 	mov	arg02, local11
0e740     1E 17 02 F6 | 	mov	arg03, local12
0e744     01 18 06 F6 | 	mov	arg04, #1
0e748     18 B5 B1 FD | 	call	#__system____ScanForChar
0e74c     FD 3C 0A F6 | 	mov	local12, result1 wz
0e750     30 00 90 AD |  if_e	jmp	#LR__1210
0e754     1C 17 02 F6 | 	mov	arg03, local10
0e758     18 13 02 F6 | 	mov	arg01, local06
0e75c     1E 15 02 F6 | 	mov	arg02, local12
0e760     1C 7E B1 FD | 	call	#__system__Mid_S
0e764     FD 12 02 F6 | 	mov	arg01, result1
0e768     19 15 02 F6 | 	mov	arg02, local07
0e76c     60 69 B1 FD | 	call	#__system___string_cmp
0e770     00 FA 0D F2 | 	cmp	result1, #0 wz
0e774     1E FB 01 A6 |  if_e	mov	result1, local12
0e778     0C 00 90 AD |  if_e	jmp	#LR__1211
0e77c     1C 3D 82 F1 | 	sub	local12, local10
0e780     B4 FF 9F FD | 	jmp	#LR__1209
0e784                 | LR__1210
0e784     00 FA 05 F6 | 	mov	result1, #0
0e788                 | LR__1211
0e788     FD 2C 02 F6 | 	mov	local04, result1
0e78c                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e78c     02 2C 56 F2 | 	cmps	local04, #2 wc
0e790     28 00 90 CD |  if_b	jmp	#LR__1212
0e794     4A 00 00 FF 
0e798     B4 E4 05 F1 | 	add	objptr, ##38068
0e79c     F2 12 02 FB | 	rdlong	arg01, objptr
0e7a0     4A 00 00 FF 
0e7a4     B4 E4 85 F1 | 	sub	objptr, ##38068
0e7a8     01 2C 86 F1 | 	sub	local04, #1
0e7ac     16 15 02 F6 | 	mov	arg02, local04
0e7b0     B8 7C B1 FD | 	call	#__system__Left_S
0e7b4     FD 2C 02 F6 | 	mov	local04, result1
0e7b8     08 00 90 FD | 	jmp	#LR__1213
0e7bc                 | LR__1212
0e7bc     91 01 00 FF 
0e7c0     69 2D 06 F6 | 	mov	local04, ##@LR__5557
0e7c4                 | LR__1213
0e7c4     16 13 02 F6 | 	mov	arg01, local04
0e7c8     48 6C B1 FD | 	call	#__system___chdir
0e7cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e7d0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e7d4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e7d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e7dc     FD 3E 0A F6 | 	mov	local13, result1 wz
0e7e0                 | '   chdir newdir$
0e7e0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e7e0     05 3E 0E 52 |  if_ne	cmp	local13, #5 wz
0e7e4     A4 00 90 AD |  if_e	jmp	#LR__1214
0e7e8     00 12 06 F6 | 	mov	arg01, #0
0e7ec     A4 B3 B1 FD | 	call	#__system___getiolock_0622
0e7f0     FD 12 02 F6 | 	mov	arg01, result1
0e7f4     B0 68 B1 FD | 	call	#__system___lockmem
0e7f8     91 01 00 FF 
0e7fc     6B 15 06 F6 | 	mov	arg02, ##@LR__5558
0e800     00 12 06 F6 | 	mov	arg01, #0
0e804     00 16 06 F6 | 	mov	arg03, #0
0e808     BC 70 B1 FD | 	call	#__system___basic_print_string
0e80c     00 12 06 F6 | 	mov	arg01, #0
0e810     1F 15 02 F6 | 	mov	arg02, local13
0e814     00 16 06 F6 | 	mov	arg03, #0
0e818     0A 18 06 F6 | 	mov	arg04, #10
0e81c     EC 70 B1 FD | 	call	#__system___basic_print_integer
0e820     91 01 00 FF 
0e824     79 15 06 F6 | 	mov	arg02, ##@LR__5559
0e828     00 12 06 F6 | 	mov	arg01, #0
0e82c     00 16 06 F6 | 	mov	arg03, #0
0e830     94 70 B1 FD | 	call	#__system___basic_print_string
0e834     45 00 00 FF 
0e838     70 E5 05 F1 | 	add	objptr, ##35696
0e83c     F2 14 02 FB | 	rdlong	arg02, objptr
0e840     45 00 00 FF 
0e844     70 E5 85 F1 | 	sub	objptr, ##35696
0e848     00 12 06 F6 | 	mov	arg01, #0
0e84c     00 16 06 F6 | 	mov	arg03, #0
0e850     74 70 B1 FD | 	call	#__system___basic_print_string
0e854     00 12 06 F6 | 	mov	arg01, #0
0e858     0A 14 06 F6 | 	mov	arg02, #10
0e85c     00 16 06 F6 | 	mov	arg03, #0
0e860     0C 70 B1 FD | 	call	#__system___basic_print_char
0e864     00 12 06 F6 | 	mov	arg01, #0
0e868     28 B3 B1 FD | 	call	#__system___getiolock_0622
0e86c     FD 00 68 FC | 	wrlong	#0, result1
0e870     4A 00 00 FF 
0e874     B4 E4 05 F1 | 	add	objptr, ##38068
0e878     F2 12 02 FB | 	rdlong	arg01, objptr
0e87c     4A 00 00 FF 
0e880     B4 E4 85 F1 | 	sub	objptr, ##38068
0e884     8C 6B B1 FD | 	call	#__system___chdir
0e888     14 00 90 FD | 	jmp	#LR__1215
0e88c                 | LR__1214
0e88c     4A 00 00 FF 
0e890     B4 E4 05 F1 | 	add	objptr, ##38068
0e894     F2 2C 62 FC | 	wrlong	local04, objptr
0e898     4A 00 00 FF 
0e89c     B4 E4 85 F1 | 	sub	objptr, ##38068
0e8a0                 | LR__1215
0e8a0                 | '   print "Current directory: ";currentdir$
0e8a0     00 12 06 F6 | 	mov	arg01, #0
0e8a4     EC B2 B1 FD | 	call	#__system___getiolock_0622
0e8a8     FD 12 02 F6 | 	mov	arg01, result1
0e8ac     F8 67 B1 FD | 	call	#__system___lockmem
0e8b0     91 01 00 FF 
0e8b4     7C 15 06 F6 | 	mov	arg02, ##@LR__5560
0e8b8     00 12 06 F6 | 	mov	arg01, #0
0e8bc     00 16 06 F6 | 	mov	arg03, #0
0e8c0     04 70 B1 FD | 	call	#__system___basic_print_string
0e8c4     4A 00 00 FF 
0e8c8     B4 E4 05 F1 | 	add	objptr, ##38068
0e8cc     F2 14 02 FB | 	rdlong	arg02, objptr
0e8d0     4A 00 00 FF 
0e8d4     B4 E4 85 F1 | 	sub	objptr, ##38068
0e8d8     00 12 06 F6 | 	mov	arg01, #0
0e8dc     00 16 06 F6 | 	mov	arg03, #0
0e8e0     E4 6F B1 FD | 	call	#__system___basic_print_string
0e8e4     00 12 06 F6 | 	mov	arg01, #0
0e8e8     0A 14 06 F6 | 	mov	arg02, #10
0e8ec     00 16 06 F6 | 	mov	arg03, #0
0e8f0     7C 6F B1 FD | 	call	#__system___basic_print_char
0e8f4     00 12 06 F6 | 	mov	arg01, #0
0e8f8     98 B2 B1 FD | 	call	#__system___getiolock_0622
0e8fc     FD 00 68 FC | 	wrlong	#0, result1
0e900                 | '   return
0e900     70 03 90 FD | 	jmp	#LR__1227
0e904                 | LR__1216
0e904                 | ' if left$(newdir$,1)="/" then 
0e904     16 13 02 F6 | 	mov	arg01, local04
0e908     01 14 06 F6 | 	mov	arg02, #1
0e90c     5C 7B B1 FD | 	call	#__system__Left_S
0e910     FD 12 02 F6 | 	mov	arg01, result1
0e914     91 01 00 FF 
0e918     90 15 06 F6 | 	mov	arg02, ##@LR__5561
0e91c     B0 67 B1 FD | 	call	#__system___string_cmp
0e920     00 FA 0D F2 | 	cmp	result1, #0 wz
0e924     40 01 90 5D |  if_ne	jmp	#LR__1219
0e928     16 13 02 F6 | 	mov	arg01, local04
0e92c     E4 6A B1 FD | 	call	#__system___chdir
0e930     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e934     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e938     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e93c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e940     FD 3E 0A F6 | 	mov	local13, result1 wz
0e944                 | '   chdir(newdir$)
0e944                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e944     05 3E 0E 52 |  if_ne	cmp	local13, #5 wz
0e948     A4 00 90 AD |  if_e	jmp	#LR__1217
0e94c     00 12 06 F6 | 	mov	arg01, #0
0e950     40 B2 B1 FD | 	call	#__system___getiolock_0622
0e954     FD 12 02 F6 | 	mov	arg01, result1
0e958     4C 67 B1 FD | 	call	#__system___lockmem
0e95c     91 01 00 FF 
0e960     92 15 06 F6 | 	mov	arg02, ##@LR__5562
0e964     00 12 06 F6 | 	mov	arg01, #0
0e968     00 16 06 F6 | 	mov	arg03, #0
0e96c     58 6F B1 FD | 	call	#__system___basic_print_string
0e970     00 12 06 F6 | 	mov	arg01, #0
0e974     1F 15 02 F6 | 	mov	arg02, local13
0e978     00 16 06 F6 | 	mov	arg03, #0
0e97c     0A 18 06 F6 | 	mov	arg04, #10
0e980     88 6F B1 FD | 	call	#__system___basic_print_integer
0e984     91 01 00 FF 
0e988     A0 15 06 F6 | 	mov	arg02, ##@LR__5563
0e98c     00 12 06 F6 | 	mov	arg01, #0
0e990     00 16 06 F6 | 	mov	arg03, #0
0e994     30 6F B1 FD | 	call	#__system___basic_print_string
0e998     45 00 00 FF 
0e99c     70 E5 05 F1 | 	add	objptr, ##35696
0e9a0     F2 14 02 FB | 	rdlong	arg02, objptr
0e9a4     45 00 00 FF 
0e9a8     70 E5 85 F1 | 	sub	objptr, ##35696
0e9ac     00 12 06 F6 | 	mov	arg01, #0
0e9b0     00 16 06 F6 | 	mov	arg03, #0
0e9b4     10 6F B1 FD | 	call	#__system___basic_print_string
0e9b8     00 12 06 F6 | 	mov	arg01, #0
0e9bc     0A 14 06 F6 | 	mov	arg02, #10
0e9c0     00 16 06 F6 | 	mov	arg03, #0
0e9c4     A8 6E B1 FD | 	call	#__system___basic_print_char
0e9c8     00 12 06 F6 | 	mov	arg01, #0
0e9cc     C4 B1 B1 FD | 	call	#__system___getiolock_0622
0e9d0     FD 00 68 FC | 	wrlong	#0, result1
0e9d4     4A 00 00 FF 
0e9d8     B4 E4 05 F1 | 	add	objptr, ##38068
0e9dc     F2 12 02 FB | 	rdlong	arg01, objptr
0e9e0     4A 00 00 FF 
0e9e4     B4 E4 85 F1 | 	sub	objptr, ##38068
0e9e8     28 6A B1 FD | 	call	#__system___chdir
0e9ec     14 00 90 FD | 	jmp	#LR__1218
0e9f0                 | LR__1217
0e9f0     4A 00 00 FF 
0e9f4     B4 E4 05 F1 | 	add	objptr, ##38068
0e9f8     F2 2C 62 FC | 	wrlong	local04, objptr
0e9fc     4A 00 00 FF 
0ea00     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea04                 | LR__1218
0ea04                 | '   print "Current directory: ";currentdir$
0ea04     00 12 06 F6 | 	mov	arg01, #0
0ea08     88 B1 B1 FD | 	call	#__system___getiolock_0622
0ea0c     FD 12 02 F6 | 	mov	arg01, result1
0ea10     94 66 B1 FD | 	call	#__system___lockmem
0ea14     91 01 00 FF 
0ea18     A3 15 06 F6 | 	mov	arg02, ##@LR__5564
0ea1c     00 12 06 F6 | 	mov	arg01, #0
0ea20     00 16 06 F6 | 	mov	arg03, #0
0ea24     A0 6E B1 FD | 	call	#__system___basic_print_string
0ea28     4A 00 00 FF 
0ea2c     B4 E4 05 F1 | 	add	objptr, ##38068
0ea30     F2 14 02 FB | 	rdlong	arg02, objptr
0ea34     4A 00 00 FF 
0ea38     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea3c     00 12 06 F6 | 	mov	arg01, #0
0ea40     00 16 06 F6 | 	mov	arg03, #0
0ea44     80 6E B1 FD | 	call	#__system___basic_print_string
0ea48     00 12 06 F6 | 	mov	arg01, #0
0ea4c     0A 14 06 F6 | 	mov	arg02, #10
0ea50     00 16 06 F6 | 	mov	arg03, #0
0ea54     18 6E B1 FD | 	call	#__system___basic_print_char
0ea58     00 12 06 F6 | 	mov	arg01, #0
0ea5c     34 B1 B1 FD | 	call	#__system___getiolock_0622
0ea60     FD 00 68 FC | 	wrlong	#0, result1
0ea64                 | '   return
0ea64     0C 02 90 FD | 	jmp	#LR__1227
0ea68                 | LR__1219
0ea68                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea68     4A 00 00 FF 
0ea6c     B4 E4 05 F1 | 	add	objptr, ##38068
0ea70     F2 12 02 FB | 	rdlong	arg01, objptr
0ea74     4A 00 00 FF 
0ea78     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea7c     91 01 00 FF 
0ea80     B7 15 06 F6 | 	mov	arg02, ##@LR__5565
0ea84     48 66 B1 FD | 	call	#__system___string_cmp
0ea88     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea8c     34 00 90 AD |  if_e	jmp	#LR__1220
0ea90     4A 00 00 FF 
0ea94     B4 E4 05 F1 | 	add	objptr, ##38068
0ea98     F2 12 02 FB | 	rdlong	arg01, objptr
0ea9c     4A 00 00 FF 
0eaa0     B4 E4 85 F1 | 	sub	objptr, ##38068
0eaa4     91 01 00 FF 
0eaa8     B9 15 06 F6 | 	mov	arg02, ##@LR__5566
0eaac     54 66 B1 FD | 	call	#__system___string_concat
0eab0     FD 12 02 F6 | 	mov	arg01, result1
0eab4     16 15 02 F6 | 	mov	arg02, local04
0eab8     48 66 B1 FD | 	call	#__system___string_concat
0eabc     FD 2C 02 F6 | 	mov	local04, result1
0eac0     20 00 90 FD | 	jmp	#LR__1221
0eac4                 | LR__1220
0eac4     4A 00 00 FF 
0eac8     B4 E4 05 F1 | 	add	objptr, ##38068
0eacc     F2 12 02 FB | 	rdlong	arg01, objptr
0ead0     4A 00 00 FF 
0ead4     B4 E4 85 F1 | 	sub	objptr, ##38068
0ead8     16 15 02 F6 | 	mov	arg02, local04
0eadc     24 66 B1 FD | 	call	#__system___string_concat
0eae0     FD 2C 02 F6 | 	mov	local04, result1
0eae4                 | LR__1221
0eae4                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0eae4     16 13 02 F6 | 	mov	arg01, local04
0eae8     01 14 06 F6 | 	mov	arg02, #1
0eaec     04 7A B1 FD | 	call	#__system__Right_S
0eaf0     FD 12 02 F6 | 	mov	arg01, result1
0eaf4     91 01 00 FF 
0eaf8     BB 15 06 F6 | 	mov	arg02, ##@LR__5567
0eafc     D0 65 B1 FD | 	call	#__system___string_cmp
0eb00     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb04     30 00 90 5D |  if_ne	jmp	#LR__1224
0eb08     16 13 02 F6 | 	mov	arg01, local04
0eb0c     09 2F 02 F6 | 	mov	local05, arg01
0eb10     97 06 48 FB | 	callpa	#(@LR__1223-@LR__1222)>>2,fcache_load_ptr_
0eb14                 | LR__1222
0eb14     17 FB C9 FA | 	rdbyte	result1, local05 wz
0eb18     01 2E 06 51 |  if_ne	add	local05, #1
0eb1c     F4 FF 9F 5D |  if_ne	jmp	#LR__1222
0eb20                 | LR__1223
0eb20     09 2F 82 F1 | 	sub	local05, arg01
0eb24     17 15 02 F6 | 	mov	arg02, local05
0eb28     01 14 86 F1 | 	sub	arg02, #1
0eb2c     16 13 02 F6 | 	mov	arg01, local04
0eb30     38 79 B1 FD | 	call	#__system__Left_S
0eb34     FD 2C 02 F6 | 	mov	local04, result1
0eb38                 | LR__1224
0eb38     16 13 02 F6 | 	mov	arg01, local04
0eb3c     D4 68 B1 FD | 	call	#__system___chdir
0eb40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb44     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb48     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb50     FD 3E 0A F6 | 	mov	local13, result1 wz
0eb54                 | '   chdir(newdir$)
0eb54                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eb54     05 3E 0E 52 |  if_ne	cmp	local13, #5 wz
0eb58     A4 00 90 AD |  if_e	jmp	#LR__1225
0eb5c     00 12 06 F6 | 	mov	arg01, #0
0eb60     30 B0 B1 FD | 	call	#__system___getiolock_0622
0eb64     FD 12 02 F6 | 	mov	arg01, result1
0eb68     3C 65 B1 FD | 	call	#__system___lockmem
0eb6c     91 01 00 FF 
0eb70     BD 15 06 F6 | 	mov	arg02, ##@LR__5568
0eb74     00 12 06 F6 | 	mov	arg01, #0
0eb78     00 16 06 F6 | 	mov	arg03, #0
0eb7c     48 6D B1 FD | 	call	#__system___basic_print_string
0eb80     00 12 06 F6 | 	mov	arg01, #0
0eb84     1F 15 02 F6 | 	mov	arg02, local13
0eb88     00 16 06 F6 | 	mov	arg03, #0
0eb8c     0A 18 06 F6 | 	mov	arg04, #10
0eb90     78 6D B1 FD | 	call	#__system___basic_print_integer
0eb94     91 01 00 FF 
0eb98     CB 15 06 F6 | 	mov	arg02, ##@LR__5569
0eb9c     00 12 06 F6 | 	mov	arg01, #0
0eba0     00 16 06 F6 | 	mov	arg03, #0
0eba4     20 6D B1 FD | 	call	#__system___basic_print_string
0eba8     45 00 00 FF 
0ebac     70 E5 05 F1 | 	add	objptr, ##35696
0ebb0     F2 14 02 FB | 	rdlong	arg02, objptr
0ebb4     45 00 00 FF 
0ebb8     70 E5 85 F1 | 	sub	objptr, ##35696
0ebbc     00 12 06 F6 | 	mov	arg01, #0
0ebc0     00 16 06 F6 | 	mov	arg03, #0
0ebc4     00 6D B1 FD | 	call	#__system___basic_print_string
0ebc8     00 12 06 F6 | 	mov	arg01, #0
0ebcc     0A 14 06 F6 | 	mov	arg02, #10
0ebd0     00 16 06 F6 | 	mov	arg03, #0
0ebd4     98 6C B1 FD | 	call	#__system___basic_print_char
0ebd8     00 12 06 F6 | 	mov	arg01, #0
0ebdc     B4 AF B1 FD | 	call	#__system___getiolock_0622
0ebe0     FD 00 68 FC | 	wrlong	#0, result1
0ebe4     4A 00 00 FF 
0ebe8     B4 E4 05 F1 | 	add	objptr, ##38068
0ebec     F2 12 02 FB | 	rdlong	arg01, objptr
0ebf0     4A 00 00 FF 
0ebf4     B4 E4 85 F1 | 	sub	objptr, ##38068
0ebf8     18 68 B1 FD | 	call	#__system___chdir
0ebfc     14 00 90 FD | 	jmp	#LR__1226
0ec00                 | LR__1225
0ec00     4A 00 00 FF 
0ec04     B4 E4 05 F1 | 	add	objptr, ##38068
0ec08     F2 2C 62 FC | 	wrlong	local04, objptr
0ec0c     4A 00 00 FF 
0ec10     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec14                 | LR__1226
0ec14                 | '   print "Current directory: ";currentdir$
0ec14     00 12 06 F6 | 	mov	arg01, #0
0ec18     78 AF B1 FD | 	call	#__system___getiolock_0622
0ec1c     FD 12 02 F6 | 	mov	arg01, result1
0ec20     84 64 B1 FD | 	call	#__system___lockmem
0ec24     91 01 00 FF 
0ec28     CE 15 06 F6 | 	mov	arg02, ##@LR__5570
0ec2c     00 12 06 F6 | 	mov	arg01, #0
0ec30     00 16 06 F6 | 	mov	arg03, #0
0ec34     90 6C B1 FD | 	call	#__system___basic_print_string
0ec38     4A 00 00 FF 
0ec3c     B4 E4 05 F1 | 	add	objptr, ##38068
0ec40     F2 14 02 FB | 	rdlong	arg02, objptr
0ec44     4A 00 00 FF 
0ec48     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec4c     00 12 06 F6 | 	mov	arg01, #0
0ec50     00 16 06 F6 | 	mov	arg03, #0
0ec54     70 6C B1 FD | 	call	#__system___basic_print_string
0ec58     00 12 06 F6 | 	mov	arg01, #0
0ec5c     0A 14 06 F6 | 	mov	arg02, #10
0ec60     00 16 06 F6 | 	mov	arg03, #0
0ec64     08 6C B1 FD | 	call	#__system___basic_print_char
0ec68     00 12 06 F6 | 	mov	arg01, #0
0ec6c     24 AF B1 FD | 	call	#__system___getiolock_0622
0ec70     FD 00 68 FC | 	wrlong	#0, result1
0ec74                 | LR__1227
0ec74     A7 F0 03 F6 | 	mov	ptra, fp
0ec78     B2 00 A0 FD | 	call	#popregs_
0ec7c                 | _do_cd_ret
0ec7c     2D 00 64 FD | 	ret
0ec80                 | 
0ec80                 | ' 
0ec80                 | ' '-------------------- changefreq
0ec80                 | ' 
0ec80                 | ' sub do_changefreq
0ec80                 | _do_changefreq
0ec80     0A 4A 05 F6 | 	mov	COUNT_, #10
0ec84     A8 00 A0 FD | 	call	#pushregs_
0ec88     2C F0 07 F1 | 	add	ptra, #44
0ec8c     B0 E8 BF FD | 	call	#_pop
0ec90     FF 14 02 F6 | 	mov	arg02, result3
0ec94     A7 FA 61 FC | 	wrlong	result1, fp
0ec98     04 4E 05 F1 | 	add	fp, #4
0ec9c     A7 FC 61 FC | 	wrlong	result2, fp
0eca0     04 4E 05 F1 | 	add	fp, #4
0eca4     A7 14 62 FC | 	wrlong	arg02, fp
0eca8     08 4E 85 F1 | 	sub	fp, #8
0ecac     A7 12 02 F6 | 	mov	arg01, fp
0ecb0     24 EB BF FD | 	call	#_converttofloat
0ecb4     FD 26 02 F6 | 	mov	local01, result1
0ecb8     84 E8 BF FD | 	call	#_pop
0ecbc     FF 14 02 F6 | 	mov	arg02, result3
0ecc0     A7 FA 61 FC | 	wrlong	result1, fp
0ecc4     04 4E 05 F1 | 	add	fp, #4
0ecc8     A7 FC 61 FC | 	wrlong	result2, fp
0eccc     04 4E 05 F1 | 	add	fp, #4
0ecd0     A7 14 62 FC | 	wrlong	arg02, fp
0ecd4     08 4E 85 F1 | 	sub	fp, #8
0ecd8     A7 12 02 F6 | 	mov	arg01, fp
0ecdc     3C EA BF FD | 	call	#_converttoint
0ece0     FD 28 52 F6 | 	abs	local02, result1 wc
0ece4     07 28 06 F5 | 	and	local02, #7
0ece8     14 29 82 F6 | 	negc	local02, local02
0ecec     14 15 02 F6 | 	mov	arg02, local02
0ecf0     03 14 66 F0 | 	shl	arg02, #3
0ecf4     14 15 82 F1 | 	sub	arg02, local02
0ecf8     02 14 66 F0 | 	shl	arg02, #2
0ecfc     F2 12 02 F6 | 	mov	arg01, objptr
0ed00     14 00 00 FF 
0ed04     38 13 06 F1 | 	add	arg01, ##10552
0ed08     09 15 02 F1 | 	add	arg02, arg01
0ed0c     16 14 06 F1 | 	add	arg02, #22
0ed10     0A 2B E2 FA | 	rdword	local03, arg02
0ed14                 | ' amode=channels(channel).amode
0ed14                 | ' if amode>0 then
0ed14     01 2A 56 F2 | 	cmps	local03, #1 wc
0ed18     AC 01 90 CD |  if_b	jmp	#LR__1232
0ed1c     13 15 02 F6 | 	mov	arg02, local01
0ed20     FC 16 20 FF 
0ed24     54 12 06 F6 | 	mov	arg01, ##1076754516
0ed28     EC 90 B1 FD | 	call	#__system____builtin_logbase
0ed2c     FD 2C 02 F6 | 	mov	local04, result1
0ed30     1E 14 C6 F9 | 	decod	arg02, #30
0ed34     FC 16 20 FF 
0ed38     54 12 06 F6 | 	mov	arg01, ##1076754516
0ed3c     D8 90 B1 FD | 	call	#__system____builtin_logbase
0ed40     FD 14 02 F6 | 	mov	arg02, result1
0ed44     16 13 02 F6 | 	mov	arg01, local04
0ed48     1C 84 B1 FD | 	call	#__system___float_div
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     00 14 06 F6 | 	mov	arg02, #0
0ed54     A8 86 B1 FD | 	call	#__system___float_tointeger
0ed58     FD 2E 02 F6 | 	mov	local05, result1
0ed5c     1E 2C C6 F9 | 	decod	local04, #30
0ed60     17 13 02 F6 | 	mov	arg01, local05
0ed64     15 13 02 F1 | 	add	arg01, local03
0ed68     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed6c     1F 30 C6 C9 |  if_b	decod	local06, #31
0ed70     00 30 06 36 |  if_ae	mov	local06, #0
0ed74     FC 7D B1 FD | 	call	#__system___float_fromuns
0ed78     18 FB 61 F5 | 	xor	result1, local06
0ed7c     FD 14 02 F6 | 	mov	arg02, result1
0ed80     16 13 02 F6 | 	mov	arg01, local04
0ed84     C8 8F B1 FD | 	call	#__system____builtin_powf
0ed88     FD 12 02 F6 | 	mov	arg01, result1
0ed8c     01 14 06 F6 | 	mov	arg02, #1
0ed90     6C 86 B1 FD | 	call	#__system___float_tointeger
0ed94     FD 32 02 F6 | 	mov	local07, result1
0ed98                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed98                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed98     40 00 00 FF 
0ed9c     01 32 56 F2 | 	cmps	local07, ##32769 wc
0eda0     14 00 90 CD |  if_b	jmp	#LR__1230
0eda4     19 35 52 F6 | 	abs	local08, local07 wc
0eda8     0F 34 46 F0 | 	shr	local08, #15
0edac     1A 35 82 F6 | 	negc	local08, local08
0edb0     0F 32 C6 F9 | 	decod	local07, #15
0edb4     04 00 90 FD | 	jmp	#LR__1231
0edb8                 | LR__1230
0edb8     01 34 06 F6 | 	mov	local08, #1
0edbc                 | LR__1231
0edbc     AA 2B 25 FF 
0edc0     00 13 06 F6 | 	mov	arg01, ##1247237376
0edc4     13 15 02 F6 | 	mov	arg02, local01
0edc8     9C 83 B1 FD | 	call	#__system___float_div
0edcc     FD 2C 02 F6 | 	mov	local04, result1
0edd0     1A 13 52 F6 | 	abs	arg01, local08 wc
0edd4     1F 30 C6 C9 |  if_b	decod	local06, #31
0edd8     00 30 06 36 |  if_ae	mov	local06, #0
0eddc     94 7D B1 FD | 	call	#__system___float_fromuns
0ede0     18 FB 61 F5 | 	xor	result1, local06
0ede4     FD 34 02 F6 | 	mov	local08, result1
0ede8     1E 36 C6 F9 | 	decod	local09, #30
0edec     12 12 06 F6 | 	mov	arg01, #18
0edf0     15 13 82 F1 | 	sub	arg01, local03
0edf4     17 13 82 F1 | 	sub	arg01, local05
0edf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0edfc     1F 30 C6 C9 |  if_b	decod	local06, #31
0ee00     00 30 06 36 |  if_ae	mov	local06, #0
0ee04     6C 7D B1 FD | 	call	#__system___float_fromuns
0ee08     18 FB 61 F5 | 	xor	result1, local06
0ee0c     FD 14 02 F6 | 	mov	arg02, result1
0ee10     1B 13 02 F6 | 	mov	arg01, local09
0ee14     38 8F B1 FD | 	call	#__system____builtin_powf
0ee18     FD 14 02 F6 | 	mov	arg02, result1
0ee1c     1A 13 02 F6 | 	mov	arg01, local08
0ee20     50 81 B1 FD | 	call	#__system___float_mul
0ee24     FD 14 02 F6 | 	mov	arg02, result1
0ee28     16 13 02 F6 | 	mov	arg01, local04
0ee2c     38 83 B1 FD | 	call	#__system___float_div
0ee30     FD 12 02 F6 | 	mov	arg01, result1
0ee34     01 14 06 F6 | 	mov	arg02, #1
0ee38     C4 85 B1 FD | 	call	#__system___float_tointeger
0ee3c     FD 38 02 F6 | 	mov	local10, result1
0ee40     14 37 02 F6 | 	mov	local09, local02
0ee44     03 36 66 F0 | 	shl	local09, #3
0ee48     14 37 82 F1 | 	sub	local09, local02
0ee4c     02 36 66 F0 | 	shl	local09, #2
0ee50     F2 34 02 F6 | 	mov	local08, objptr
0ee54     14 00 00 FF 
0ee58     38 35 06 F1 | 	add	local08, ##10552
0ee5c     1A 37 02 F1 | 	add	local09, local08
0ee60     AA 2B 25 FF 
0ee64     00 35 06 F6 | 	mov	local08, ##1247237376
0ee68     1C 13 52 F6 | 	abs	arg01, local10 wc
0ee6c     1F 30 C6 C9 |  if_b	decod	local06, #31
0ee70     00 30 06 36 |  if_ae	mov	local06, #0
0ee74     FC 7C B1 FD | 	call	#__system___float_fromuns
0ee78     18 FB 61 F5 | 	xor	result1, local06
0ee7c     FD 14 02 F6 | 	mov	arg02, result1
0ee80     1A 13 02 F6 | 	mov	arg01, local08
0ee84     E0 82 B1 FD | 	call	#__system___float_div
0ee88     FD 34 02 F6 | 	mov	local08, result1
0ee8c     19 13 52 F6 | 	abs	arg01, local07 wc
0ee90     1F 30 C6 C9 |  if_b	decod	local06, #31
0ee94     00 30 06 36 |  if_ae	mov	local06, #0
0ee98     D8 7C B1 FD | 	call	#__system___float_fromuns
0ee9c     18 FB 61 F5 | 	xor	result1, local06
0eea0     FD 12 02 F6 | 	mov	arg01, result1
0eea4     00 40 24 FF 
0eea8     00 14 06 F6 | 	mov	arg02, ##1216348160
0eeac     B8 82 B1 FD | 	call	#__system___float_div
0eeb0     FD 14 02 F6 | 	mov	arg02, result1
0eeb4     1A 13 02 F6 | 	mov	arg01, local08
0eeb8     B8 80 B1 FD | 	call	#__system___float_mul
0eebc     18 36 06 F1 | 	add	local09, #24
0eec0     1B FB 61 FC | 	wrlong	result1, local09
0eec4     BC 00 90 FD | 	jmp	#LR__1233
0eec8                 | LR__1232
0eec8     18 38 06 F6 | 	mov	local10, #24
0eecc     00 40 24 FF 
0eed0     00 2C 06 F6 | 	mov	local04, ##1216348160
0eed4     13 13 02 F6 | 	mov	arg01, local01
0eed8     C7 07 24 FF 
0eedc     00 14 06 F6 | 	mov	arg02, ##1208978944
0eee0     84 82 B1 FD | 	call	#__system___float_div
0eee4     FD 14 02 F6 | 	mov	arg02, result1
0eee8     16 13 02 F6 | 	mov	arg01, local04
0eeec     84 80 B1 FD | 	call	#__system___float_mul
0eef0     FD 12 02 F6 | 	mov	arg01, result1
0eef4     01 14 06 F6 | 	mov	arg02, #1
0eef8     04 85 B1 FD | 	call	#__system___float_tointeger
0eefc     FD 32 02 F6 | 	mov	local07, result1
0ef00     14 37 02 F6 | 	mov	local09, local02
0ef04     03 36 66 F0 | 	shl	local09, #3
0ef08     14 37 82 F1 | 	sub	local09, local02
0ef0c     02 36 66 F0 | 	shl	local09, #2
0ef10     F2 34 02 F6 | 	mov	local08, objptr
0ef14     14 00 00 FF 
0ef18     38 35 06 F1 | 	add	local08, ##10552
0ef1c     1A 37 02 F1 | 	add	local09, local08
0ef20     AA 2B 25 FF 
0ef24     00 35 06 F6 | 	mov	local08, ##1247237376
0ef28     1C 13 52 F6 | 	abs	arg01, local10 wc
0ef2c     1F 30 C6 C9 |  if_b	decod	local06, #31
0ef30     00 30 06 36 |  if_ae	mov	local06, #0
0ef34     3C 7C B1 FD | 	call	#__system___float_fromuns
0ef38     18 FB 61 F5 | 	xor	result1, local06
0ef3c     FD 14 02 F6 | 	mov	arg02, result1
0ef40     1A 13 02 F6 | 	mov	arg01, local08
0ef44     20 82 B1 FD | 	call	#__system___float_div
0ef48     FD 34 02 F6 | 	mov	local08, result1
0ef4c     19 13 52 F6 | 	abs	arg01, local07 wc
0ef50     1F 30 C6 C9 |  if_b	decod	local06, #31
0ef54     00 30 06 36 |  if_ae	mov	local06, #0
0ef58     18 7C B1 FD | 	call	#__system___float_fromuns
0ef5c     18 FB 61 F5 | 	xor	result1, local06
0ef60     FD 12 02 F6 | 	mov	arg01, result1
0ef64     00 40 24 FF 
0ef68     00 14 06 F6 | 	mov	arg02, ##1216348160
0ef6c     F8 81 B1 FD | 	call	#__system___float_div
0ef70     FD 14 02 F6 | 	mov	arg02, result1
0ef74     1A 13 02 F6 | 	mov	arg01, local08
0ef78     F8 7F B1 FD | 	call	#__system___float_mul
0ef7c     18 36 06 F1 | 	add	local09, #24
0ef80     1B FB 61 FC | 	wrlong	result1, local09
0ef84                 | LR__1233
0ef84     10 32 66 F0 | 	shl	local07, #16
0ef88     1C 33 02 F1 | 	add	local07, local10
0ef8c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef8c     37 00 00 FF 
0ef90     30 E4 05 F1 | 	add	objptr, ##28208
0ef94     F2 12 02 FB | 	rdlong	arg01, objptr
0ef98     37 00 00 FF 
0ef9c     30 E4 85 F1 | 	sub	objptr, ##28208
0efa0     14 39 02 F6 | 	mov	local10, local02
0efa4     06 38 66 F0 | 	shl	local10, #6
0efa8     1C 13 02 F1 | 	add	arg01, local10
0efac     08 12 06 F1 | 	add	arg01, #8
0efb0     09 FB 01 FB | 	rdlong	result1, arg01
0efb4     1B FA 2D F4 | 	testbn	result1, #27 wz
0efb8     37 00 00 AF 
0efbc     30 E4 05 A1 |  if_e	add	objptr, ##28208
0efc0     F2 12 02 AB |  if_e	rdlong	arg01, objptr
0efc4     37 00 00 AF 
0efc8     30 E4 85 A1 |  if_e	sub	objptr, ##28208
0efcc     06 28 66 A0 |  if_e	shl	local02, #6
0efd0     14 13 02 A1 |  if_e	add	arg01, local02
0efd4     18 12 06 A1 |  if_e	add	arg01, #24
0efd8     09 33 62 AC |  if_e	wrlong	local07, arg01
0efdc     68 00 90 AD |  if_e	jmp	#LR__1234
0efe0     37 00 00 FF 
0efe4     30 E4 05 F1 | 	add	objptr, ##28208
0efe8     F2 2C 02 FB | 	rdlong	local04, objptr
0efec     37 00 00 FF 
0eff0     30 E4 85 F1 | 	sub	objptr, ##28208
0eff4     14 39 02 F6 | 	mov	local10, local02
0eff8     06 38 66 F0 | 	shl	local10, #6
0effc     1C 2D 02 F1 | 	add	local04, local10
0f000     18 2C 06 F1 | 	add	local04, #24
0f004     3E 2C 25 FF 
0f008     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f00c     13 15 02 F6 | 	mov	arg02, local01
0f010     54 81 B1 FD | 	call	#__system___float_div
0f014     FD 12 02 F6 | 	mov	arg01, result1
0f018     01 14 06 F6 | 	mov	arg02, #1
0f01c     E0 83 B1 FD | 	call	#__system___float_tointeger
0f020     16 FB 51 FC | 	wrword	result1, local04
0f024     37 00 00 FF 
0f028     30 E4 05 F1 | 	add	objptr, ##28208
0f02c     F2 12 02 FB | 	rdlong	arg01, objptr
0f030     37 00 00 FF 
0f034     30 E4 85 F1 | 	sub	objptr, ##28208
0f038     06 28 66 F0 | 	shl	local02, #6
0f03c     14 13 02 F1 | 	add	arg01, local02
0f040     1A 12 06 F1 | 	add	arg01, #26
0f044     09 01 5A FC | 	wrword	#256, arg01
0f048                 | LR__1234
0f048     A7 F0 03 F6 | 	mov	ptra, fp
0f04c     B2 00 A0 FD | 	call	#popregs_
0f050                 | _do_changefreq_ret
0f050     2D 00 64 FD | 	ret
0f054                 | 
0f054                 | ' 
0f054                 | ' '-------------------- changepan
0f054                 | ' 
0f054                 | ' sub do_changepan
0f054                 | _do_changepan
0f054     02 4A 05 F6 | 	mov	COUNT_, #2
0f058     A8 00 A0 FD | 	call	#pushregs_
0f05c     14 F0 07 F1 | 	add	ptra, #20
0f060     DC E4 BF FD | 	call	#_pop
0f064     A7 FA 61 FC | 	wrlong	result1, fp
0f068     04 4E 05 F1 | 	add	fp, #4
0f06c     A7 FC 61 FC | 	wrlong	result2, fp
0f070     04 4E 05 F1 | 	add	fp, #4
0f074     A7 FE 61 FC | 	wrlong	result3, fp
0f078     08 4E 85 F1 | 	sub	fp, #8
0f07c     00 00 23 FF 
0f080     00 26 06 F6 | 	mov	local01, ##1174405120
0f084     A7 12 02 F6 | 	mov	arg01, fp
0f088     4C E7 BF FD | 	call	#_converttofloat
0f08c     FD 14 02 F6 | 	mov	arg02, result1
0f090     13 13 02 F6 | 	mov	arg01, local01
0f094     DC 7E B1 FD | 	call	#__system___float_mul
0f098     FD 12 02 F6 | 	mov	arg01, result1
0f09c     01 14 06 F6 | 	mov	arg02, #1
0f0a0     5C 83 B1 FD | 	call	#__system___float_tointeger
0f0a4     FD 26 02 F6 | 	mov	local01, result1
0f0a8     0D 28 C6 F9 | 	decod	local02, #13
0f0ac     13 29 02 F1 | 	add	local02, local01
0f0b0                 | ' 
0f0b0                 | ' t1=pop()
0f0b0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f0b0                 | ' if pan<0 then pan=0
0f0b0     00 28 56 F2 | 	cmps	local02, #0 wc
0f0b4     00 28 06 C6 |  if_b	mov	local02, #0
0f0b8                 | ' if pan>16384 then pan=16384
0f0b8     20 00 00 FF 
0f0bc     01 28 56 F2 | 	cmps	local02, ##16385 wc
0f0c0     0E 28 C6 39 |  if_ae	decod	local02, #14
0f0c4     78 E4 BF FD | 	call	#_pop
0f0c8     FF 26 02 F6 | 	mov	local01, result3
0f0cc     A7 FA 61 FC | 	wrlong	result1, fp
0f0d0     04 4E 05 F1 | 	add	fp, #4
0f0d4     A7 FC 61 FC | 	wrlong	result2, fp
0f0d8     04 4E 05 F1 | 	add	fp, #4
0f0dc     A7 26 62 FC | 	wrlong	local01, fp
0f0e0     08 4E 85 F1 | 	sub	fp, #8
0f0e4     A7 12 02 F6 | 	mov	arg01, fp
0f0e8     30 E6 BF FD | 	call	#_converttoint
0f0ec     FD 26 52 F6 | 	abs	local01, result1 wc
0f0f0     07 26 06 F5 | 	and	local01, #7
0f0f4     13 27 82 F6 | 	negc	local01, local01
0f0f8     37 00 00 FF 
0f0fc     30 E4 05 F1 | 	add	objptr, ##28208
0f100     F2 12 02 FB | 	rdlong	arg01, objptr
0f104     37 00 00 FF 
0f108     30 E4 85 F1 | 	sub	objptr, ##28208
0f10c     06 26 66 F0 | 	shl	local01, #6
0f110     13 13 02 F1 | 	add	arg01, local01
0f114     16 12 06 F1 | 	add	arg01, #22
0f118     09 29 52 FC | 	wrword	local02, arg01
0f11c     A7 F0 03 F6 | 	mov	ptra, fp
0f120     B2 00 A0 FD | 	call	#popregs_
0f124                 | _do_changepan_ret
0f124     2D 00 64 FD | 	ret
0f128                 | 
0f128                 | ' 
0f128                 | ' '-------------------- changevol
0f128                 | ' 
0f128                 | ' sub do_changevol
0f128                 | _do_changevol
0f128     01 4A 05 F6 | 	mov	COUNT_, #1
0f12c     A8 00 A0 FD | 	call	#pushregs_
0f130     14 F0 07 F1 | 	add	ptra, #20
0f134     08 E4 BF FD | 	call	#_pop
0f138     FF 14 02 F6 | 	mov	arg02, result3
0f13c     A7 FA 61 FC | 	wrlong	result1, fp
0f140     04 4E 05 F1 | 	add	fp, #4
0f144     A7 FC 61 FC | 	wrlong	result2, fp
0f148     04 4E 05 F1 | 	add	fp, #4
0f14c     A7 14 62 FC | 	wrlong	arg02, fp
0f150     08 4E 85 F1 | 	sub	fp, #8
0f154     A7 12 02 F6 | 	mov	arg01, fp
0f158     7C E6 BF FD | 	call	#_converttofloat
0f15c     FD 12 02 F6 | 	mov	arg01, result1
0f160     00 3D 22 FF 
0f164     00 14 06 F6 | 	mov	arg02, ##1148846080
0f168     08 7E B1 FD | 	call	#__system___float_mul
0f16c     FD 12 02 F6 | 	mov	arg01, result1
0f170     01 14 06 F6 | 	mov	arg02, #1
0f174     88 82 B1 FD | 	call	#__system___float_tointeger
0f178     FD 14 52 F6 | 	abs	arg02, result1 wc
0f17c     0D 14 46 F7 | 	zerox	arg02, #13
0f180     0A 27 82 F6 | 	negc	local01, arg02
0f184     B8 E3 BF FD | 	call	#_pop
0f188     FF 14 02 F6 | 	mov	arg02, result3
0f18c     A7 FA 61 FC | 	wrlong	result1, fp
0f190     04 4E 05 F1 | 	add	fp, #4
0f194     A7 FC 61 FC | 	wrlong	result2, fp
0f198     04 4E 05 F1 | 	add	fp, #4
0f19c     A7 14 62 FC | 	wrlong	arg02, fp
0f1a0     08 4E 85 F1 | 	sub	fp, #8
0f1a4     A7 12 02 F6 | 	mov	arg01, fp
0f1a8     70 E5 BF FD | 	call	#_converttoint
0f1ac     FD 14 52 F6 | 	abs	arg02, result1 wc
0f1b0     07 14 06 F5 | 	and	arg02, #7
0f1b4     0A 15 82 F6 | 	negc	arg02, arg02
0f1b8     37 00 00 FF 
0f1bc     30 E4 05 F1 | 	add	objptr, ##28208
0f1c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f1c4     37 00 00 FF 
0f1c8     30 E4 85 F1 | 	sub	objptr, ##28208
0f1cc     06 14 66 F0 | 	shl	arg02, #6
0f1d0     0A 13 02 F1 | 	add	arg01, arg02
0f1d4     14 12 06 F1 | 	add	arg01, #20
0f1d8     09 27 52 FC | 	wrword	local01, arg01
0f1dc     A7 F0 03 F6 | 	mov	ptra, fp
0f1e0     B2 00 A0 FD | 	call	#popregs_
0f1e4                 | _do_changevol_ret
0f1e4     2D 00 64 FD | 	ret
0f1e8                 | 
0f1e8                 | ' 
0f1e8                 | ' '-------------------- changewav
0f1e8                 | ' 
0f1e8                 | ' sub do_changewav
0f1e8                 | _do_changewav
0f1e8     01 4A 05 F6 | 	mov	COUNT_, #1
0f1ec     A8 00 A0 FD | 	call	#pushregs_
0f1f0     14 F0 07 F1 | 	add	ptra, #20
0f1f4     48 E3 BF FD | 	call	#_pop
0f1f8     FF 14 02 F6 | 	mov	arg02, result3
0f1fc     A7 FA 61 FC | 	wrlong	result1, fp
0f200     04 4E 05 F1 | 	add	fp, #4
0f204     A7 FC 61 FC | 	wrlong	result2, fp
0f208     04 4E 05 F1 | 	add	fp, #4
0f20c     A7 14 62 FC | 	wrlong	arg02, fp
0f210     08 4E 85 F1 | 	sub	fp, #8
0f214     A7 12 02 F6 | 	mov	arg01, fp
0f218     00 E5 BF FD | 	call	#_converttoint
0f21c     FD 26 02 F6 | 	mov	local01, result1
0f220                 | ' 
0f220                 | ' t1=pop()
0f220                 | ' wave=converttoint(t1)
0f220                 | ' if wave<0 then wave=0
0f220     00 26 56 F2 | 	cmps	local01, #0 wc
0f224     00 26 06 C6 |  if_b	mov	local01, #0
0f228     14 E3 BF FD | 	call	#_pop
0f22c     FF 14 02 F6 | 	mov	arg02, result3
0f230     A7 FA 61 FC | 	wrlong	result1, fp
0f234     04 4E 05 F1 | 	add	fp, #4
0f238     A7 FC 61 FC | 	wrlong	result2, fp
0f23c     04 4E 05 F1 | 	add	fp, #4
0f240     A7 14 62 FC | 	wrlong	arg02, fp
0f244     08 4E 85 F1 | 	sub	fp, #8
0f248     A7 12 02 F6 | 	mov	arg01, fp
0f24c     CC E4 BF FD | 	call	#_converttoint
0f250     FD FC 51 F6 | 	abs	result2, result1 wc
0f254     07 FC 05 F5 | 	and	result2, #7
0f258     FE FC 81 F6 | 	negc	result2, result2
0f25c                 | ' if wave <32 then 
0f25c     20 26 56 F2 | 	cmps	local01, #32 wc
0f260     37 00 00 CF 
0f264     30 E4 05 C1 |  if_b	add	objptr, ##28208
0f268     F2 12 02 CB |  if_b	rdlong	arg01, objptr
0f26c     37 00 00 CF 
0f270     30 E4 85 C1 |  if_b	sub	objptr, ##28208
0f274     06 FC 65 C0 |  if_b	shl	result2, #6
0f278     FE 12 02 C1 |  if_b	add	arg01, result2
0f27c     08 12 06 C1 |  if_b	add	arg01, #8
0f280     0B 26 66 C0 |  if_b	shl	local01, #11
0f284     00 00 40 CF 
0f288     00 26 06 C1 |  if_b	add	local01, ##-2147483648
0f28c     09 27 62 CC |  if_b	wrlong	local01, arg01
0f290     37 00 00 3F 
0f294     30 E4 05 31 |  if_ae	add	objptr, ##28208
0f298     F2 12 02 3B |  if_ae	rdlong	arg01, objptr
0f29c     37 00 00 3F 
0f2a0     30 E4 85 31 |  if_ae	sub	objptr, ##28208
0f2a4     06 FC 65 30 |  if_ae	shl	result2, #6
0f2a8     FE 12 02 31 |  if_ae	add	arg01, result2
0f2ac     08 12 06 31 |  if_ae	add	arg01, #8
0f2b0     00 00 C4 3F 
0f2b4     09 01 68 3C |  if_ae	wrlong	##-2013265920, arg01
0f2b8     A7 F0 03 F6 | 	mov	ptra, fp
0f2bc     B2 00 A0 FD | 	call	#popregs_
0f2c0                 | _do_changewav_ret
0f2c0     2D 00 64 FD | 	ret
0f2c4                 | 
0f2c4                 | ' 
0f2c4                 | ' '-------------------- chr$
0f2c4                 | ' 
0f2c4                 | ' sub do_chr
0f2c4                 | _do_chr
0f2c4     00 4A 05 F6 | 	mov	COUNT_, #0
0f2c8     A8 00 A0 FD | 	call	#pushregs_
0f2cc     14 F0 07 F1 | 	add	ptra, #20
0f2d0     4A 00 00 FF 
0f2d4     A0 E4 05 F1 | 	add	objptr, ##38048
0f2d8     F2 16 02 FB | 	rdlong	arg03, objptr
0f2dc     0B 15 02 F6 | 	mov	arg02, arg03
0f2e0     01 14 66 F0 | 	shl	arg02, #1
0f2e4     0B 15 02 F1 | 	add	arg02, arg03
0f2e8     02 14 66 F0 | 	shl	arg02, #2
0f2ec     03 00 00 FF 
0f2f0     04 E4 85 F1 | 	sub	objptr, ##1540
0f2f4     F2 14 02 F1 | 	add	arg02, objptr
0f2f8     0A 17 02 FB | 	rdlong	arg03, arg02
0f2fc                 | ' 
0f2fc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2fc                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f2fc     02 16 16 F2 | 	cmp	arg03, #2 wc
0f300     47 00 00 FF 
0f304     9C E4 85 F1 | 	sub	objptr, ##36508
0f308     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
0f30c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1240
0f310     00 12 06 F6 | 	mov	arg01, #0
0f314     7C A8 B1 FD | 	call	#__system___getiolock_0622
0f318     FD 12 02 F6 | 	mov	arg01, result1
0f31c     88 5D B1 FD | 	call	#__system___lockmem
0f320     91 01 00 FF 
0f324     E2 15 06 F6 | 	mov	arg02, ##@LR__5571
0f328     00 12 06 F6 | 	mov	arg01, #0
0f32c     00 16 06 F6 | 	mov	arg03, #0
0f330     94 65 B1 FD | 	call	#__system___basic_print_string
0f334     00 12 06 F6 | 	mov	arg01, #0
0f338     58 A8 B1 FD | 	call	#__system___getiolock_0622
0f33c     FD 00 68 FC | 	wrlong	#0, result1
0f340     27 12 06 F6 | 	mov	arg01, #39
0f344     00 14 06 F6 | 	mov	arg02, #0
0f348     D4 08 B1 FD | 	call	#_printerror
0f34c     48 00 90 FD | 	jmp	#LR__1241
0f350                 | LR__1240
0f350     EC E1 BF FD | 	call	#_pop
0f354     FF 16 02 F6 | 	mov	arg03, result3
0f358     A7 FA 61 FC | 	wrlong	result1, fp
0f35c     04 4E 05 F1 | 	add	fp, #4
0f360     A7 FC 61 FC | 	wrlong	result2, fp
0f364     04 4E 05 F1 | 	add	fp, #4
0f368     A7 16 62 FC | 	wrlong	arg03, fp
0f36c     08 4E 85 F1 | 	sub	fp, #8
0f370     A7 12 02 F6 | 	mov	arg01, fp
0f374     A4 E3 BF FD | 	call	#_converttoint
0f378     FD 12 02 F6 | 	mov	arg01, result1
0f37c     AC 72 B1 FD | 	call	#__system__Chr_S
0f380     A7 FA 61 FC | 	wrlong	result1, fp
0f384     08 4E 05 F1 | 	add	fp, #8
0f388     A7 3E 68 FC | 	wrlong	#31, fp
0f38c     08 4E 85 F1 | 	sub	fp, #8
0f390     A7 12 02 F6 | 	mov	arg01, fp
0f394     38 E2 BF FD | 	call	#_push
0f398                 | LR__1241
0f398     A7 F0 03 F6 | 	mov	ptra, fp
0f39c     B2 00 A0 FD | 	call	#popregs_
0f3a0                 | _do_chr_ret
0f3a0     2D 00 64 FD | 	ret
0f3a4                 | 
0f3a4                 | ' 
0f3a4                 | ' '-------------------- circle
0f3a4                 | ' 
0f3a4                 | ' sub do_circle
0f3a4                 | _do_circle
0f3a4     02 4A 05 F6 | 	mov	COUNT_, #2
0f3a8     A8 00 A0 FD | 	call	#pushregs_
0f3ac     24 F0 07 F1 | 	add	ptra, #36
0f3b0     8C E1 BF FD | 	call	#_pop
0f3b4     FD 18 02 F6 | 	mov	arg04, result1
0f3b8     FE 16 02 F6 | 	mov	arg03, result2
0f3bc     FF 14 02 F6 | 	mov	arg02, result3
0f3c0     18 4E 05 F1 | 	add	fp, #24
0f3c4     A7 18 62 FC | 	wrlong	arg04, fp
0f3c8     04 4E 05 F1 | 	add	fp, #4
0f3cc     A7 16 62 FC | 	wrlong	arg03, fp
0f3d0     04 4E 05 F1 | 	add	fp, #4
0f3d4     A7 14 62 FC | 	wrlong	arg02, fp
0f3d8     20 4E 85 F1 | 	sub	fp, #32
0f3dc     60 E1 BF FD | 	call	#_pop
0f3e0     FD 18 02 F6 | 	mov	arg04, result1
0f3e4     FE 16 02 F6 | 	mov	arg03, result2
0f3e8     FF 26 02 F6 | 	mov	local01, result3
0f3ec     0C 4E 05 F1 | 	add	fp, #12
0f3f0     A7 18 62 FC | 	wrlong	arg04, fp
0f3f4     04 4E 05 F1 | 	add	fp, #4
0f3f8     A7 16 62 FC | 	wrlong	arg03, fp
0f3fc     04 4E 05 F1 | 	add	fp, #4
0f400     A7 26 62 FC | 	wrlong	local01, fp
0f404     14 4E 85 F1 | 	sub	fp, #20
0f408     34 E1 BF FD | 	call	#_pop
0f40c     A7 FA 61 FC | 	wrlong	result1, fp
0f410     04 4E 05 F1 | 	add	fp, #4
0f414     A7 FC 61 FC | 	wrlong	result2, fp
0f418     04 4E 05 F1 | 	add	fp, #4
0f41c     A7 FE 61 FC | 	wrlong	result3, fp
0f420                 | ' 
0f420                 | ' t3=pop()
0f420                 | ' t2=pop()
0f420                 | ' t1=pop()
0f420                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f420     FF 18 02 F6 | 	mov	arg04, result3
0f424     08 4E 85 F1 | 	sub	fp, #8
0f428     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f42c     08 4E 05 51 |  if_ne	add	fp, #8
0f430     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f434     08 4E 85 51 |  if_ne	sub	fp, #8
0f438     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f43c     7C 00 90 5D |  if_ne	jmp	#LR__1250
0f440     14 4E 05 F1 | 	add	fp, #20
0f444     A7 26 02 FB | 	rdlong	local01, fp
0f448     14 4E 85 F1 | 	sub	fp, #20
0f44c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f450     14 4E 05 51 |  if_ne	add	fp, #20
0f454     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f458     14 4E 85 51 |  if_ne	sub	fp, #20
0f45c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f460     58 00 90 5D |  if_ne	jmp	#LR__1250
0f464     20 4E 05 F1 | 	add	fp, #32
0f468     A7 26 02 FB | 	rdlong	local01, fp
0f46c     20 4E 85 F1 | 	sub	fp, #32
0f470     1C 26 0E F2 | 	cmp	local01, #28 wz
0f474     20 4E 05 51 |  if_ne	add	fp, #32
0f478     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f47c     20 4E 85 51 |  if_ne	sub	fp, #32
0f480     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f484     34 00 90 5D |  if_ne	jmp	#LR__1250
0f488     A7 12 02 FB | 	rdlong	arg01, fp
0f48c     0C 4E 05 F1 | 	add	fp, #12
0f490     A7 14 02 FB | 	rdlong	arg02, fp
0f494     0C 4E 05 F1 | 	add	fp, #12
0f498     A7 16 02 FB | 	rdlong	arg03, fp
0f49c     18 4E 85 F1 | 	sub	fp, #24
0f4a0     37 00 00 FF 
0f4a4     48 E4 05 F1 | 	add	objptr, ##28232
0f4a8     F2 18 02 FB | 	rdlong	arg04, objptr
0f4ac     37 00 00 FF 
0f4b0     48 E4 85 F1 | 	sub	objptr, ##28232
0f4b4     20 42 B1 FD | 	call	#_hg010b_spin2_circle
0f4b8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f4b8     4C 00 90 FD | 	jmp	#LR__1251
0f4bc                 | LR__1250
0f4bc     A7 12 02 F6 | 	mov	arg01, fp
0f4c0     58 E2 BF FD | 	call	#_converttoint
0f4c4     FD 26 02 F6 | 	mov	local01, result1
0f4c8     A7 12 02 F6 | 	mov	arg01, fp
0f4cc     0C 12 06 F1 | 	add	arg01, #12
0f4d0     48 E2 BF FD | 	call	#_converttoint
0f4d4     FD 28 02 F6 | 	mov	local02, result1
0f4d8     A7 12 02 F6 | 	mov	arg01, fp
0f4dc     18 12 06 F1 | 	add	arg01, #24
0f4e0     38 E2 BF FD | 	call	#_converttoint
0f4e4     FD 16 02 F6 | 	mov	arg03, result1
0f4e8     37 00 00 FF 
0f4ec     48 E4 05 F1 | 	add	objptr, ##28232
0f4f0     F2 18 02 FB | 	rdlong	arg04, objptr
0f4f4     37 00 00 FF 
0f4f8     48 E4 85 F1 | 	sub	objptr, ##28232
0f4fc     13 13 02 F6 | 	mov	arg01, local01
0f500     14 15 02 F6 | 	mov	arg02, local02
0f504     D0 41 B1 FD | 	call	#_hg010b_spin2_circle
0f508                 | LR__1251
0f508     A7 F0 03 F6 | 	mov	ptra, fp
0f50c     B2 00 A0 FD | 	call	#popregs_
0f510                 | _do_circle_ret
0f510     2D 00 64 FD | 	ret
0f514                 | 
0f514                 | ' 
0f514                 | ' '-------------------- click
0f514                 | ' 
0f514                 | ' sub do_click
0f514                 | _do_click
0f514     28 E0 BF FD | 	call	#_pop
0f518     00 FA 4D F2 | 	cmps	result1, #0 wz
0f51c                 | ' 
0f51c                 | ' t1=pop()
0f51c                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f51c     50 00 00 AF 
0f520     5C E5 05 A1 |  if_e	add	objptr, ##41308
0f524     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f528     50 00 00 FF 
0f52c     5C E5 C5 F3 | 	sumz	objptr, ##41308
0f530     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f534     50 00 00 5F 
0f538     5C E5 85 51 |  if_ne	sub	objptr, ##41308
0f53c                 | _do_click_ret
0f53c     2D 00 64 FD | 	ret
0f540                 | 
0f540                 | ' 
0f540                 | ' '-------------------- close
0f540                 | ' 
0f540                 | ' sub do_close
0f540                 | _do_close
0f540     03 4A 05 F6 | 	mov	COUNT_, #3
0f544     A8 00 A0 FD | 	call	#pushregs_
0f548     F4 DF BF FD | 	call	#_pop
0f54c     FD 26 02 F6 | 	mov	local01, result1
0f550     FF 16 02 F6 | 	mov	arg03, result3
0f554     FE 28 02 F6 | 	mov	local02, result2
0f558     0B 2B 02 F6 | 	mov	local03, arg03
0f55c                 | ' 
0f55c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f55c                 | ' t1=pop()
0f55c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f55c     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f560     44 00 90 AD |  if_e	jmp	#LR__1260
0f564     00 12 06 F6 | 	mov	arg01, #0
0f568     28 A6 B1 FD | 	call	#__system___getiolock_0622
0f56c     FD 12 02 F6 | 	mov	arg01, result1
0f570     34 5B B1 FD | 	call	#__system___lockmem
0f574     91 01 00 FF 
0f578     E9 15 06 F6 | 	mov	arg02, ##@LR__5572
0f57c     00 12 06 F6 | 	mov	arg01, #0
0f580     00 16 06 F6 | 	mov	arg03, #0
0f584     40 63 B1 FD | 	call	#__system___basic_print_string
0f588     00 12 06 F6 | 	mov	arg01, #0
0f58c     0A 14 06 F6 | 	mov	arg02, #10
0f590     00 16 06 F6 | 	mov	arg03, #0
0f594     D8 62 B1 FD | 	call	#__system___basic_print_char
0f598     00 12 06 F6 | 	mov	arg01, #0
0f59c     F4 A5 B1 FD | 	call	#__system___getiolock_0622
0f5a0     FD 00 68 FC | 	wrlong	#0, result1
0f5a4     08 00 90 FD | 	jmp	#LR__1261
0f5a8                 | LR__1260
0f5a8                 | ' channel  = t1.result.iresult
0f5a8                 | ' close #channel
0f5a8     13 13 02 F6 | 	mov	arg01, local01
0f5ac     68 9C B1 FD | 	call	#__system__close
0f5b0                 | LR__1261
0f5b0     A7 F0 03 F6 | 	mov	ptra, fp
0f5b4     B2 00 A0 FD | 	call	#popregs_
0f5b8                 | _do_close_ret
0f5b8     2D 00 64 FD | 	ret
0f5bc                 | 
0f5bc                 | ' 
0f5bc                 | ' '-------------------- cls
0f5bc                 | ' 
0f5bc                 | ' sub do_cls
0f5bc                 | _do_cls
0f5bc     37 00 00 FF 
0f5c0     5C E4 05 F1 | 	add	objptr, ##28252
0f5c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f5c8     04 E4 85 F1 | 	sub	objptr, #4
0f5cc     F2 14 02 FB | 	rdlong	arg02, objptr
0f5d0     37 00 00 FF 
0f5d4     58 E4 85 F1 | 	sub	objptr, ##28248
0f5d8     54 45 B1 FD | 	call	#_hg010b_spin2_cls
0f5dc     37 00 00 FF 
0f5e0     5C E4 05 F1 | 	add	objptr, ##28252
0f5e4     F2 14 02 FB | 	rdlong	arg02, objptr
0f5e8     14 E4 85 F1 | 	sub	objptr, #20
0f5ec     F2 14 62 FC | 	wrlong	arg02, objptr
0f5f0     37 00 00 FF 
0f5f4     48 E4 85 F1 | 	sub	objptr, ##28232
0f5f8                 | _do_cls_ret
0f5f8     2D 00 64 FD | 	ret
0f5fc                 | 
0f5fc                 | ' 
0f5fc                 | ' sub do_coginit
0f5fc                 | _do_coginit
0f5fc     05 4A 05 F6 | 	mov	COUNT_, #5
0f600     A8 00 A0 FD | 	call	#pushregs_
0f604     08 00 00 FF 
0f608     1C F0 07 F1 | 	add	ptra, ##4124
0f60c     4A 00 00 FF 
0f610     A0 E4 05 F1 | 	add	objptr, ##38048
0f614     F2 26 02 FB | 	rdlong	local01, objptr
0f618     13 29 02 F6 | 	mov	local02, local01
0f61c     01 28 66 F0 | 	shl	local02, #1
0f620     13 29 02 F1 | 	add	local02, local01
0f624     02 28 66 F0 | 	shl	local02, #2
0f628     03 00 00 FF 
0f62c     04 E4 85 F1 | 	sub	objptr, ##1540
0f630     F2 28 02 F1 | 	add	local02, objptr
0f634     14 29 02 FB | 	rdlong	local02, local02
0f638                 | ' numpar=compiledline(lineptr_e).result.uresult
0f638                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f638     02 28 56 F2 | 	cmps	local02, #2 wc
0f63c     47 00 00 FF 
0f640     9C E4 85 F1 | 	sub	objptr, ##36508
0f644     08 00 90 CD |  if_b	jmp	#LR__1270
0f648     04 28 56 F2 | 	cmps	local02, #4 wc
0f64c     40 00 90 CD |  if_b	jmp	#LR__1271
0f650                 | LR__1270
0f650     00 12 06 F6 | 	mov	arg01, #0
0f654     3C A5 B1 FD | 	call	#__system___getiolock_0622
0f658     FD 12 02 F6 | 	mov	arg01, result1
0f65c     48 5A B1 FD | 	call	#__system___lockmem
0f660     91 01 00 FF 
0f664     FB 15 06 F6 | 	mov	arg02, ##@LR__5573
0f668     00 12 06 F6 | 	mov	arg01, #0
0f66c     00 16 06 F6 | 	mov	arg03, #0
0f670     54 62 B1 FD | 	call	#__system___basic_print_string
0f674     00 12 06 F6 | 	mov	arg01, #0
0f678     18 A5 B1 FD | 	call	#__system___getiolock_0622
0f67c     FD 00 68 FC | 	wrlong	#0, result1
0f680     27 12 06 F6 | 	mov	arg01, #39
0f684     00 14 06 F6 | 	mov	arg02, #0
0f688     94 05 B1 FD | 	call	#_printerror
0f68c     2C 01 90 FD | 	jmp	#LR__1275
0f690                 | LR__1271
0f690     AC DE BF FD | 	call	#_pop
0f694     FF 26 02 F6 | 	mov	local01, result3
0f698     08 00 00 FF 
0f69c     10 4E 05 F1 | 	add	fp, ##4112
0f6a0     A7 FA 61 FC | 	wrlong	result1, fp
0f6a4     04 4E 05 F1 | 	add	fp, #4
0f6a8     A7 FC 61 FC | 	wrlong	result2, fp
0f6ac     04 4E 05 F1 | 	add	fp, #4
0f6b0     A7 26 62 FC | 	wrlong	local01, fp
0f6b4     08 4E 85 F1 | 	sub	fp, #8
0f6b8     A7 12 02 F6 | 	mov	arg01, fp
0f6bc     08 00 00 FF 
0f6c0     10 4E 85 F1 | 	sub	fp, ##4112
0f6c4     54 E0 BF FD | 	call	#_converttoint
0f6c8     FD 2A 02 F6 | 	mov	local03, result1
0f6cc     70 DE BF FD | 	call	#_pop
0f6d0     FF 26 02 F6 | 	mov	local01, result3
0f6d4     08 00 00 FF 
0f6d8     10 4E 05 F1 | 	add	fp, ##4112
0f6dc     A7 FA 61 FC | 	wrlong	result1, fp
0f6e0     04 4E 05 F1 | 	add	fp, #4
0f6e4     A7 FC 61 FC | 	wrlong	result2, fp
0f6e8     04 4E 05 F1 | 	add	fp, #4
0f6ec     A7 26 62 FC | 	wrlong	local01, fp
0f6f0     08 4E 85 F1 | 	sub	fp, #8
0f6f4     A7 12 02 F6 | 	mov	arg01, fp
0f6f8     08 00 00 FF 
0f6fc     10 4E 85 F1 | 	sub	fp, ##4112
0f700     18 E0 BF FD | 	call	#_converttoint
0f704     FD 2C 02 F6 | 	mov	local04, result1
0f708                 | ' t1=pop()
0f708                 | ' ptra_val=converttoint(t1)
0f708                 | ' t1=pop()
0f708                 | ' addrval=converttoint(t1)
0f708                 | ' if numpar=3 then 
0f708     03 28 0E F2 | 	cmp	local02, #3 wz
0f70c     40 00 90 5D |  if_ne	jmp	#LR__1272
0f710     2C DE BF FD | 	call	#_pop
0f714     FF 26 02 F6 | 	mov	local01, result3
0f718     08 00 00 FF 
0f71c     10 4E 05 F1 | 	add	fp, ##4112
0f720     A7 FA 61 FC | 	wrlong	result1, fp
0f724     04 4E 05 F1 | 	add	fp, #4
0f728     A7 FC 61 FC | 	wrlong	result2, fp
0f72c     04 4E 05 F1 | 	add	fp, #4
0f730     A7 26 62 FC | 	wrlong	local01, fp
0f734     08 4E 85 F1 | 	sub	fp, #8
0f738     A7 12 02 F6 | 	mov	arg01, fp
0f73c     08 00 00 FF 
0f740     10 4E 85 F1 | 	sub	fp, ##4112
0f744     D4 DF BF FD | 	call	#_converttoint
0f748     FD 2E 02 F6 | 	mov	local05, result1
0f74c     04 00 90 FD | 	jmp	#LR__1273
0f750                 | LR__1272
0f750     10 2E 06 F6 | 	mov	local05, #16
0f754                 | LR__1273
0f754                 | '     
0f754                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f754     00 04 00 FF 
0f758     01 2C 56 F2 | 	cmps	local04, ##524289 wc
0f75c     2C 00 90 CD |  if_b	jmp	#LR__1274
0f760     A7 12 02 F6 | 	mov	arg01, fp
0f764     10 12 06 F1 | 	add	arg01, #16
0f768     16 15 02 F6 | 	mov	arg02, local04
0f76c     0C 16 C6 F9 | 	decod	arg03, #12
0f770     0B 00 00 FF 
0f774     CC E4 05 F1 | 	add	objptr, ##5836
0f778     28 51 B1 FD | 	call	#_psram_spin2_read1
0f77c     0B 00 00 FF 
0f780     CC E4 85 F1 | 	sub	objptr, ##5836
0f784     A7 2C 02 F6 | 	mov	local04, fp
0f788     10 2C 06 F1 | 	add	local04, #16
0f78c                 | LR__1274
0f78c                 | ' 
0f78c                 | '  asm
0f78c     28 2A 62 FD | 	setq	local03
0f790     16 2F F2 FC | 	coginit	local05, local04 wc
0f794                 | '  
0f794                 | ' return cog 
0f794     08 00 00 FF 
0f798     10 4E 05 F1 | 	add	fp, ##4112
0f79c     A7 2E 62 FC | 	wrlong	local05, fp
0f7a0     08 4E 05 F1 | 	add	fp, #8
0f7a4     A7 38 68 FC | 	wrlong	#28, fp
0f7a8     08 4E 85 F1 | 	sub	fp, #8
0f7ac     A7 12 02 F6 | 	mov	arg01, fp
0f7b0     08 00 00 FF 
0f7b4     10 4E 85 F1 | 	sub	fp, ##4112
0f7b8     14 DE BF FD | 	call	#_push
0f7bc                 | LR__1275
0f7bc     A7 F0 03 F6 | 	mov	ptra, fp
0f7c0     B2 00 A0 FD | 	call	#popregs_
0f7c4                 | _do_coginit_ret
0f7c4     2D 00 64 FD | 	ret
0f7c8                 | 
0f7c8                 | ' 
0f7c8                 | ' '-------------------- cogstop
0f7c8                 | ' 
0f7c8                 | ' sub do_cogstop
0f7c8                 | _do_cogstop
0f7c8     00 4A 05 F6 | 	mov	COUNT_, #0
0f7cc     A8 00 A0 FD | 	call	#pushregs_
0f7d0     0C F0 07 F1 | 	add	ptra, #12
0f7d4     68 DD BF FD | 	call	#_pop
0f7d8     A7 FA 61 FC | 	wrlong	result1, fp
0f7dc     04 4E 05 F1 | 	add	fp, #4
0f7e0     A7 FC 61 FC | 	wrlong	result2, fp
0f7e4     04 4E 05 F1 | 	add	fp, #4
0f7e8     A7 FE 61 FC | 	wrlong	result3, fp
0f7ec     08 4E 85 F1 | 	sub	fp, #8
0f7f0     A7 12 02 F6 | 	mov	arg01, fp
0f7f4     24 DF BF FD | 	call	#_converttoint
0f7f8     03 FA 61 FD | 	cogstop	result1
0f7fc     A7 F0 03 F6 | 	mov	ptra, fp
0f800     B2 00 A0 FD | 	call	#popregs_
0f804                 | _do_cogstop_ret
0f804     2D 00 64 FD | 	ret
0f808                 | 
0f808                 | ' 
0f808                 | ' '-------------------- color
0f808                 | ' 
0f808                 | ' sub do_color
0f808                 | _do_color
0f808     03 4A 05 F6 | 	mov	COUNT_, #3
0f80c     A8 00 A0 FD | 	call	#pushregs_
0f810     2C DD BF FD | 	call	#_pop
0f814     FD 26 02 F6 | 	mov	local01, result1
0f818     FE 28 02 F6 | 	mov	local02, result2
0f81c     FF 2A 02 F6 | 	mov	local03, result3
0f820     37 00 00 FF 
0f824     48 E4 05 F1 | 	add	objptr, ##28232
0f828     F2 26 62 FC | 	wrlong	local01, objptr
0f82c     37 00 00 FF 
0f830     48 E4 85 F1 | 	sub	objptr, ##28232
0f834     A7 F0 03 F6 | 	mov	ptra, fp
0f838     B2 00 A0 FD | 	call	#popregs_
0f83c                 | _do_color_ret
0f83c     2D 00 64 FD | 	ret
0f840                 | 
0f840                 | ' 
0f840                 | ' '-------------------- copy
0f840                 | ' 
0f840                 | ' sub do_copy
0f840                 | _do_copy
0f840     08 4A 05 F6 | 	mov	COUNT_, #8
0f844     A8 00 A0 FD | 	call	#pushregs_
0f848     F4 DC BF FD | 	call	#_pop
0f84c     FD 26 02 F6 | 	mov	local01, result1
0f850     FE 1A 02 F6 | 	mov	arg05, result2
0f854     FF 18 02 F6 | 	mov	arg04, result3
0f858     0D 29 02 F6 | 	mov	local02, arg05
0f85c     0C 2B 02 F6 | 	mov	local03, arg04
0f860     DC DC BF FD | 	call	#_pop
0f864     FE 1A 02 F6 | 	mov	arg05, result2
0f868     FF 18 02 F6 | 	mov	arg04, result3
0f86c     FD 2C 02 F6 | 	mov	local04, result1
0f870     0D 2F 02 F6 | 	mov	local05, arg05
0f874     0C 31 02 F6 | 	mov	local06, arg04
0f878                 | ' 
0f878                 | ' t1=pop()
0f878                 | ' t2=pop()
0f878                 | ' if t2.result_type=result_string2 then 
0f878     2B 30 0E F2 | 	cmp	local06, #43 wz
0f87c     10 00 90 5D |  if_ne	jmp	#LR__1280
0f880     16 13 02 F6 | 	mov	arg01, local04
0f884     28 DE BF FD | 	call	#_convertstring
0f888     FD 32 02 F6 | 	mov	local07, result1
0f88c     2C 00 90 FD | 	jmp	#LR__1282
0f890                 | LR__1280
0f890     1F 30 0E F2 | 	cmp	local06, #31 wz
0f894     16 33 02 A6 |  if_e	mov	local07, local04
0f898     20 00 90 AD |  if_e	jmp	#LR__1281
0f89c     50 00 00 FF 
0f8a0     10 E5 05 F1 | 	add	objptr, ##41232
0f8a4     F2 14 02 FB | 	rdlong	arg02, objptr
0f8a8     50 00 00 FF 
0f8ac     10 E5 85 F1 | 	sub	objptr, ##41232
0f8b0     0F 12 06 F6 | 	mov	arg01, #15
0f8b4     68 03 B1 FD | 	call	#_printerror
0f8b8                 | '   printerror(15,runheader(0)) : return
0f8b8     50 03 90 FD | 	jmp	#LR__1289
0f8bc                 | LR__1281
0f8bc                 | LR__1282
0f8bc                 | ' if t1.result_type=result_string2 then 
0f8bc     2B 2A 0E F2 | 	cmp	local03, #43 wz
0f8c0     10 00 90 5D |  if_ne	jmp	#LR__1283
0f8c4     13 13 02 F6 | 	mov	arg01, local01
0f8c8     E4 DD BF FD | 	call	#_convertstring
0f8cc     FD 34 02 F6 | 	mov	local08, result1
0f8d0     2C 00 90 FD | 	jmp	#LR__1285
0f8d4                 | LR__1283
0f8d4     1F 2A 0E F2 | 	cmp	local03, #31 wz
0f8d8     13 35 02 A6 |  if_e	mov	local08, local01
0f8dc     20 00 90 AD |  if_e	jmp	#LR__1284
0f8e0     50 00 00 FF 
0f8e4     10 E5 05 F1 | 	add	objptr, ##41232
0f8e8     F2 14 02 FB | 	rdlong	arg02, objptr
0f8ec     50 00 00 FF 
0f8f0     10 E5 85 F1 | 	sub	objptr, ##41232
0f8f4     0F 12 06 F6 | 	mov	arg01, #15
0f8f8     24 03 B1 FD | 	call	#_printerror
0f8fc                 | '   printerror(15,runheader(0)) : return
0f8fc     0C 03 90 FD | 	jmp	#LR__1289
0f900                 | LR__1284
0f900                 | LR__1285
0f900                 | ' 
0f900                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f900     09 12 06 F6 | 	mov	arg01, #9
0f904     19 15 02 F6 | 	mov	arg02, local07
0f908     00 16 06 F6 | 	mov	arg03, #0
0f90c     C8 5E B1 FD | 	call	#__system___basic_open_string
0f910     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f914     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f918     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0f91c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f920     52 00 00 FF 
0f924     30 E5 05 F1 | 	add	objptr, ##42288
0f928     F2 FA 61 FC | 	wrlong	result1, objptr
0f92c     52 00 00 FF 
0f930     30 E5 85 F1 | 	sub	objptr, ##42288
0f934     0C 01 90 AD |  if_e	jmp	#LR__1286
0f938     00 12 06 F6 | 	mov	arg01, #0
0f93c     54 A2 B1 FD | 	call	#__system___getiolock_0622
0f940     FD 12 02 F6 | 	mov	arg01, result1
0f944     60 57 B1 FD | 	call	#__system___lockmem
0f948     92 01 00 FF 
0f94c     05 14 06 F6 | 	mov	arg02, ##@LR__5574
0f950     00 12 06 F6 | 	mov	arg01, #0
0f954     00 16 06 F6 | 	mov	arg03, #0
0f958     6C 5F B1 FD | 	call	#__system___basic_print_string
0f95c     52 00 00 FF 
0f960     30 E5 05 F1 | 	add	objptr, ##42288
0f964     F2 14 02 FB | 	rdlong	arg02, objptr
0f968     52 00 00 FF 
0f96c     30 E5 85 F1 | 	sub	objptr, ##42288
0f970     00 12 06 F6 | 	mov	arg01, #0
0f974     00 16 06 F6 | 	mov	arg03, #0
0f978     0A 18 06 F6 | 	mov	arg04, #10
0f97c     8C 5F B1 FD | 	call	#__system___basic_print_integer
0f980     92 01 00 FF 
0f984     15 14 06 F6 | 	mov	arg02, ##@LR__5575
0f988     00 12 06 F6 | 	mov	arg01, #0
0f98c     00 16 06 F6 | 	mov	arg03, #0
0f990     34 5F B1 FD | 	call	#__system___basic_print_string
0f994     50 00 00 FF 
0f998     10 E5 05 F1 | 	add	objptr, ##41232
0f99c     F2 14 02 FB | 	rdlong	arg02, objptr
0f9a0     50 00 00 FF 
0f9a4     10 E5 85 F1 | 	sub	objptr, ##41232
0f9a8     00 12 06 F6 | 	mov	arg01, #0
0f9ac     00 16 06 F6 | 	mov	arg03, #0
0f9b0     0A 18 06 F6 | 	mov	arg04, #10
0f9b4     94 5F B1 FD | 	call	#__system___basic_print_unsigned
0f9b8     92 01 00 FF 
0f9bc     1F 14 06 F6 | 	mov	arg02, ##@LR__5576
0f9c0     00 12 06 F6 | 	mov	arg01, #0
0f9c4     00 16 06 F6 | 	mov	arg03, #0
0f9c8     FC 5E B1 FD | 	call	#__system___basic_print_string
0f9cc     00 34 06 F6 | 	mov	local08, #0
0f9d0     52 00 00 FF 
0f9d4     30 E5 05 F1 | 	add	objptr, ##42288
0f9d8     F2 12 02 FB | 	rdlong	arg01, objptr
0f9dc     52 00 00 FF 
0f9e0     30 E5 85 F1 | 	sub	objptr, ##42288
0f9e4     CC 70 B1 FD | 	call	#__system___strerror
0f9e8     FD 14 02 F6 | 	mov	arg02, result1
0f9ec     1A 13 02 F6 | 	mov	arg01, local08
0f9f0     00 16 06 F6 | 	mov	arg03, #0
0f9f4     D0 5E B1 FD | 	call	#__system___basic_print_string
0f9f8     92 01 00 FF 
0f9fc     22 14 06 F6 | 	mov	arg02, ##@LR__5577
0fa00     00 12 06 F6 | 	mov	arg01, #0
0fa04     00 16 06 F6 | 	mov	arg03, #0
0fa08     BC 5E B1 FD | 	call	#__system___basic_print_string
0fa0c     00 12 06 F6 | 	mov	arg01, #0
0fa10     19 15 02 F6 | 	mov	arg02, local07
0fa14     00 16 06 F6 | 	mov	arg03, #0
0fa18     AC 5E B1 FD | 	call	#__system___basic_print_string
0fa1c     00 12 06 F6 | 	mov	arg01, #0
0fa20     0A 14 06 F6 | 	mov	arg02, #10
0fa24     00 16 06 F6 | 	mov	arg03, #0
0fa28     44 5E B1 FD | 	call	#__system___basic_print_char
0fa2c     00 12 06 F6 | 	mov	arg01, #0
0fa30     60 A1 B1 FD | 	call	#__system___getiolock_0622
0fa34     FD 00 68 FC | 	wrlong	#0, result1
0fa38     09 12 06 F6 | 	mov	arg01, #9
0fa3c     D8 97 B1 FD | 	call	#__system__close
0fa40     C8 01 90 FD | 	jmp	#LR__1289
0fa44                 | LR__1286
0fa44                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fa44     08 12 06 F6 | 	mov	arg01, #8
0fa48     1A 15 02 F6 | 	mov	arg02, local08
0fa4c     0D 16 06 F6 | 	mov	arg03, #13
0fa50     84 5D B1 FD | 	call	#__system___basic_open_string
0fa54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fa58     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fa5c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fa60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fa64     52 00 00 FF 
0fa68     30 E5 05 F1 | 	add	objptr, ##42288
0fa6c     F2 FA 61 FC | 	wrlong	result1, objptr
0fa70     52 00 00 FF 
0fa74     30 E5 85 F1 | 	sub	objptr, ##42288
0fa78     0C 01 90 AD |  if_e	jmp	#LR__1287
0fa7c     00 12 06 F6 | 	mov	arg01, #0
0fa80     10 A1 B1 FD | 	call	#__system___getiolock_0622
0fa84     FD 12 02 F6 | 	mov	arg01, result1
0fa88     1C 56 B1 FD | 	call	#__system___lockmem
0fa8c     92 01 00 FF 
0fa90     30 14 06 F6 | 	mov	arg02, ##@LR__5578
0fa94     00 12 06 F6 | 	mov	arg01, #0
0fa98     00 16 06 F6 | 	mov	arg03, #0
0fa9c     28 5E B1 FD | 	call	#__system___basic_print_string
0faa0     52 00 00 FF 
0faa4     30 E5 05 F1 | 	add	objptr, ##42288
0faa8     F2 14 02 FB | 	rdlong	arg02, objptr
0faac     52 00 00 FF 
0fab0     30 E5 85 F1 | 	sub	objptr, ##42288
0fab4     00 12 06 F6 | 	mov	arg01, #0
0fab8     00 16 06 F6 | 	mov	arg03, #0
0fabc     0A 18 06 F6 | 	mov	arg04, #10
0fac0     48 5E B1 FD | 	call	#__system___basic_print_integer
0fac4     92 01 00 FF 
0fac8     40 14 06 F6 | 	mov	arg02, ##@LR__5579
0facc     00 12 06 F6 | 	mov	arg01, #0
0fad0     00 16 06 F6 | 	mov	arg03, #0
0fad4     F0 5D B1 FD | 	call	#__system___basic_print_string
0fad8     50 00 00 FF 
0fadc     10 E5 05 F1 | 	add	objptr, ##41232
0fae0     F2 14 02 FB | 	rdlong	arg02, objptr
0fae4     50 00 00 FF 
0fae8     10 E5 85 F1 | 	sub	objptr, ##41232
0faec     00 12 06 F6 | 	mov	arg01, #0
0faf0     00 16 06 F6 | 	mov	arg03, #0
0faf4     0A 18 06 F6 | 	mov	arg04, #10
0faf8     50 5E B1 FD | 	call	#__system___basic_print_unsigned
0fafc     92 01 00 FF 
0fb00     4A 14 06 F6 | 	mov	arg02, ##@LR__5580
0fb04     00 12 06 F6 | 	mov	arg01, #0
0fb08     00 16 06 F6 | 	mov	arg03, #0
0fb0c     B8 5D B1 FD | 	call	#__system___basic_print_string
0fb10     00 32 06 F6 | 	mov	local07, #0
0fb14     52 00 00 FF 
0fb18     30 E5 05 F1 | 	add	objptr, ##42288
0fb1c     F2 12 02 FB | 	rdlong	arg01, objptr
0fb20     52 00 00 FF 
0fb24     30 E5 85 F1 | 	sub	objptr, ##42288
0fb28     88 6F B1 FD | 	call	#__system___strerror
0fb2c     FD 14 02 F6 | 	mov	arg02, result1
0fb30     19 13 02 F6 | 	mov	arg01, local07
0fb34     00 16 06 F6 | 	mov	arg03, #0
0fb38     8C 5D B1 FD | 	call	#__system___basic_print_string
0fb3c     92 01 00 FF 
0fb40     4D 14 06 F6 | 	mov	arg02, ##@LR__5581
0fb44     00 12 06 F6 | 	mov	arg01, #0
0fb48     00 16 06 F6 | 	mov	arg03, #0
0fb4c     78 5D B1 FD | 	call	#__system___basic_print_string
0fb50     00 12 06 F6 | 	mov	arg01, #0
0fb54     1A 15 02 F6 | 	mov	arg02, local08
0fb58     00 16 06 F6 | 	mov	arg03, #0
0fb5c     68 5D B1 FD | 	call	#__system___basic_print_string
0fb60     00 12 06 F6 | 	mov	arg01, #0
0fb64     0A 14 06 F6 | 	mov	arg02, #10
0fb68     00 16 06 F6 | 	mov	arg03, #0
0fb6c     00 5D B1 FD | 	call	#__system___basic_print_char
0fb70     00 12 06 F6 | 	mov	arg01, #0
0fb74     1C A0 B1 FD | 	call	#__system___getiolock_0622
0fb78     FD 00 68 FC | 	wrlong	#0, result1
0fb7c     08 12 06 F6 | 	mov	arg01, #8
0fb80     94 96 B1 FD | 	call	#__system__close
0fb84     84 00 90 FD | 	jmp	#LR__1289
0fb88                 | LR__1287
0fb88                 | ' 
0fb88                 | ' do
0fb88                 | LR__1288
0fb88                 | '   get #9,,block(0),1024,r
0fb88     F2 16 02 F6 | 	mov	arg03, objptr
0fb8c     4E 00 00 FF 
0fb90     D4 16 06 F1 | 	add	arg03, ##40148
0fb94     09 12 06 F6 | 	mov	arg01, #9
0fb98     00 14 06 F6 | 	mov	arg02, #0
0fb9c     0A 18 C6 F9 | 	decod	arg04, #10
0fba0     01 1A 06 F6 | 	mov	arg05, #1
0fba4     A8 5E B1 FD | 	call	#__system___basic_get
0fba8     52 00 00 FF 
0fbac     68 E5 05 F1 | 	add	objptr, ##42344
0fbb0     F2 FA 61 FC | 	wrlong	result1, objptr
0fbb4                 | '   put #8,,block(0),r
0fbb4     04 00 00 FF 
0fbb8     94 E4 85 F1 | 	sub	objptr, ##2196
0fbbc     F2 16 02 F6 | 	mov	arg03, objptr
0fbc0     FD 18 02 F6 | 	mov	arg04, result1
0fbc4     4E 00 00 FF 
0fbc8     D4 E4 85 F1 | 	sub	objptr, ##40148
0fbcc     08 12 06 F6 | 	mov	arg01, #8
0fbd0     00 14 06 F6 | 	mov	arg02, #0
0fbd4     01 1A 06 F6 | 	mov	arg05, #1
0fbd8     00 5E B1 FD | 	call	#__system___basic_put
0fbdc     52 00 00 FF 
0fbe0     68 E5 05 F1 | 	add	objptr, ##42344
0fbe4     F2 34 02 FB | 	rdlong	local08, objptr
0fbe8     52 00 00 FF 
0fbec     68 E5 85 F1 | 	sub	objptr, ##42344
0fbf0     02 00 00 FF 
0fbf4     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fbf8     8C FF 9F AD |  if_e	jmp	#LR__1288
0fbfc                 | ' close #8
0fbfc     08 12 06 F6 | 	mov	arg01, #8
0fc00     14 96 B1 FD | 	call	#__system__close
0fc04                 | ' close #9
0fc04     09 12 06 F6 | 	mov	arg01, #9
0fc08     0C 96 B1 FD | 	call	#__system__close
0fc0c                 | LR__1289
0fc0c     A7 F0 03 F6 | 	mov	ptra, fp
0fc10     B2 00 A0 FD | 	call	#popregs_
0fc14                 | _do_copy_ret
0fc14     2D 00 64 FD | 	ret
0fc18                 | 
0fc18                 | ' 
0fc18                 | ' '-------------------- cos
0fc18                 | ' 
0fc18                 | ' sub do_cos
0fc18                 | _do_cos
0fc18     01 4A 05 F6 | 	mov	COUNT_, #1
0fc1c     A8 00 A0 FD | 	call	#pushregs_
0fc20     10 F0 07 F1 | 	add	ptra, #16
0fc24     4A 00 00 FF 
0fc28     A0 E4 05 F1 | 	add	objptr, ##38048
0fc2c     F2 16 02 FB | 	rdlong	arg03, objptr
0fc30     0B 15 02 F6 | 	mov	arg02, arg03
0fc34     01 14 66 F0 | 	shl	arg02, #1
0fc38     0B 15 02 F1 | 	add	arg02, arg03
0fc3c     02 14 66 F0 | 	shl	arg02, #2
0fc40     03 00 00 FF 
0fc44     04 E4 85 F1 | 	sub	objptr, ##1540
0fc48     F2 14 02 F1 | 	add	arg02, objptr
0fc4c     0A 17 02 FB | 	rdlong	arg03, arg02
0fc50                 | ' 
0fc50                 | ' numpar=compiledline(lineptr_e).result.uresult
0fc50                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fc50     02 16 16 F2 | 	cmp	arg03, #2 wc
0fc54     47 00 00 FF 
0fc58     9C E4 85 F1 | 	sub	objptr, ##36508
0fc5c     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
0fc60     40 00 90 4D |  if_c_and_nz	jmp	#LR__1290
0fc64     00 12 06 F6 | 	mov	arg01, #0
0fc68     28 9F B1 FD | 	call	#__system___getiolock_0622
0fc6c     FD 12 02 F6 | 	mov	arg01, result1
0fc70     34 54 B1 FD | 	call	#__system___lockmem
0fc74     92 01 00 FF 
0fc78     5B 14 06 F6 | 	mov	arg02, ##@LR__5582
0fc7c     00 12 06 F6 | 	mov	arg01, #0
0fc80     00 16 06 F6 | 	mov	arg03, #0
0fc84     40 5C B1 FD | 	call	#__system___basic_print_string
0fc88     00 12 06 F6 | 	mov	arg01, #0
0fc8c     04 9F B1 FD | 	call	#__system___getiolock_0622
0fc90     FD 00 68 FC | 	wrlong	#0, result1
0fc94     27 12 06 F6 | 	mov	arg01, #39
0fc98     00 14 06 F6 | 	mov	arg02, #0
0fc9c     80 FF B0 FD | 	call	#_printerror
0fca0     78 00 90 FD | 	jmp	#LR__1291
0fca4                 | LR__1290
0fca4     98 D8 BF FD | 	call	#_pop
0fca8     A7 FA 61 FC | 	wrlong	result1, fp
0fcac     04 4E 05 F1 | 	add	fp, #4
0fcb0     A7 FC 61 FC | 	wrlong	result2, fp
0fcb4     04 4E 05 F1 | 	add	fp, #4
0fcb8     A7 FE 61 FC | 	wrlong	result3, fp
0fcbc     08 4E 85 F1 | 	sub	fp, #8
0fcc0     52 00 00 FF 
0fcc4     00 E5 05 F1 | 	add	objptr, ##42240
0fcc8     F2 26 02 FB | 	rdlong	local01, objptr
0fccc     52 00 00 FF 
0fcd0     00 E5 85 F1 | 	sub	objptr, ##42240
0fcd4     A7 12 02 F6 | 	mov	arg01, fp
0fcd8     FC DA BF FD | 	call	#_converttofloat
0fcdc     FD 14 02 F6 | 	mov	arg02, result1
0fce0     13 13 02 F6 | 	mov	arg01, local01
0fce4     8C 72 B1 FD | 	call	#__system___float_mul
0fce8     FD 14 02 F6 | 	mov	arg02, result1
0fcec     87 E4 1F FF 
0fcf0     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fcf4     1F 14 E6 F4 | 	bitnot	arg02, #31
0fcf8     BC 6E B1 FD | 	call	#__system___float_add
0fcfc     FD 12 02 F6 | 	mov	arg01, result1
0fd00     88 7B B1 FD | 	call	#__system____builtin_sinf
0fd04     A7 FA 61 FC | 	wrlong	result1, fp
0fd08     08 4E 05 F1 | 	add	fp, #8
0fd0c     A7 3C 68 FC | 	wrlong	#30, fp
0fd10     08 4E 85 F1 | 	sub	fp, #8
0fd14     A7 12 02 F6 | 	mov	arg01, fp
0fd18     B4 D8 BF FD | 	call	#_push
0fd1c                 | LR__1291
0fd1c     A7 F0 03 F6 | 	mov	ptra, fp
0fd20     B2 00 A0 FD | 	call	#popregs_
0fd24                 | _do_cos_ret
0fd24     2D 00 64 FD | 	ret
0fd28                 | 
0fd28                 | ' 
0fd28                 | ' '-------------------- cursor
0fd28                 | ' 
0fd28                 | ' sub do_cursor
0fd28                 | _do_cursor
0fd28     14 D8 BF FD | 	call	#_pop
0fd2c     00 FA 4D F2 | 	cmps	result1, #0 wz
0fd30                 | ' t1=pop()
0fd30                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fd30     14 00 90 5D |  if_ne	jmp	#LR__1300
0fd34     11 12 06 F6 | 	mov	arg01, #17
0fd38     00 14 06 F6 | 	mov	arg02, #0
0fd3c     00 16 06 F6 | 	mov	arg03, #0
0fd40     10 35 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd44     10 00 90 FD | 	jmp	#LR__1301
0fd48                 | LR__1300
0fd48     11 12 06 F6 | 	mov	arg01, #17
0fd4c     08 14 06 F6 | 	mov	arg02, #8
0fd50     10 16 06 F6 | 	mov	arg03, #16
0fd54     FC 34 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd58                 | LR__1301
0fd58                 | _do_cursor_ret
0fd58     2D 00 64 FD | 	ret
0fd5c                 | 
0fd5c                 | ' 
0fd5c                 | ' '-------------------- defchar
0fd5c                 | ' 
0fd5c                 | ' sub do_defchar
0fd5c                 | _do_defchar
0fd5c     04 4A 05 F6 | 	mov	COUNT_, #4
0fd60     A8 00 A0 FD | 	call	#pushregs_
0fd64     28 F0 07 F1 | 	add	ptra, #40
0fd68     D4 D7 BF FD | 	call	#_pop
0fd6c     FF 14 02 F6 | 	mov	arg02, result3
0fd70     A7 FA 61 FC | 	wrlong	result1, fp
0fd74     04 4E 05 F1 | 	add	fp, #4
0fd78     A7 FC 61 FC | 	wrlong	result2, fp
0fd7c     04 4E 05 F1 | 	add	fp, #4
0fd80     A7 14 62 FC | 	wrlong	arg02, fp
0fd84     08 4E 85 F1 | 	sub	fp, #8
0fd88     A7 12 02 F6 | 	mov	arg01, fp
0fd8c     8C D9 BF FD | 	call	#_converttoint
0fd90     FD 26 02 F6 | 	mov	local01, result1
0fd94     A8 D7 BF FD | 	call	#_pop
0fd98     FF 14 02 F6 | 	mov	arg02, result3
0fd9c     A7 FA 61 FC | 	wrlong	result1, fp
0fda0     04 4E 05 F1 | 	add	fp, #4
0fda4     A7 FC 61 FC | 	wrlong	result2, fp
0fda8     04 4E 05 F1 | 	add	fp, #4
0fdac     A7 14 62 FC | 	wrlong	arg02, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     A7 12 02 F6 | 	mov	arg01, fp
0fdb8     60 D9 BF FD | 	call	#_converttoint
0fdbc     FD 28 02 F6 | 	mov	local02, result1
0fdc0                 | ' 
0fdc0                 | ' t1=pop() : cptr=converttoint(t1)
0fdc0                 | ' t1=pop() : c=converttoint(t1)
0fdc0                 | ' if cptr<$80000 then 
0fdc0     00 04 00 FF 
0fdc4     00 26 16 F2 | 	cmp	local01, ##524288 wc
0fdc8     10 00 90 3D |  if_ae	jmp	#LR__1310
0fdcc     14 13 02 F6 | 	mov	arg01, local02
0fdd0     13 15 02 F6 | 	mov	arg02, local01
0fdd4     F8 3B B1 FD | 	call	#_hg010b_spin2_defchar
0fdd8     40 00 90 FD | 	jmp	#LR__1312
0fddc                 | LR__1310
0fddc                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fddc     00 2A 06 F6 | 	mov	local03, #0
0fde0                 | LR__1311
0fde0     15 2D 02 F6 | 	mov	local04, local03
0fde4     A7 14 02 F6 | 	mov	arg02, fp
0fde8     14 14 06 F1 | 	add	arg02, #20
0fdec     0A 2D 02 F1 | 	add	local04, arg02
0fdf0     13 13 02 F6 | 	mov	arg01, local01
0fdf4     15 13 02 F1 | 	add	arg01, local03
0fdf8     98 FF B0 FD | 	call	#_pspeek
0fdfc     16 FB 41 FC | 	wrbyte	result1, local04
0fe00     01 2A 06 F1 | 	add	local03, #1
0fe04     10 2A 56 F2 | 	cmps	local03, #16 wc
0fe08     D4 FF 9F CD |  if_b	jmp	#LR__1311
0fe0c     A7 14 02 F6 | 	mov	arg02, fp
0fe10     14 14 06 F1 | 	add	arg02, #20
0fe14     14 13 02 F6 | 	mov	arg01, local02
0fe18     B4 3B B1 FD | 	call	#_hg010b_spin2_defchar
0fe1c                 | LR__1312
0fe1c     A7 F0 03 F6 | 	mov	ptra, fp
0fe20     B2 00 A0 FD | 	call	#popregs_
0fe24                 | _do_defchar_ret
0fe24     2D 00 64 FD | 	ret
0fe28                 | 
0fe28                 | ' 
0fe28                 | ' '-------------------- defenv
0fe28                 | ' 
0fe28                 | ' sub do_defenv
0fe28                 | _do_defenv
0fe28     14 4A 05 F6 | 	mov	COUNT_, #20
0fe2c     A8 00 A0 FD | 	call	#pushregs_
0fe30     58 F0 07 F1 | 	add	ptra, #88
0fe34     4A 00 00 FF 
0fe38     A0 E4 05 F1 | 	add	objptr, ##38048
0fe3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fe40     0D 19 02 F6 | 	mov	arg04, arg05
0fe44     01 18 66 F0 | 	shl	arg04, #1
0fe48     0D 19 02 F1 | 	add	arg04, arg05
0fe4c     02 18 66 F0 | 	shl	arg04, #2
0fe50     03 00 00 FF 
0fe54     04 E4 85 F1 | 	sub	objptr, ##1540
0fe58     F2 18 02 F1 | 	add	arg04, objptr
0fe5c     0C 27 02 FB | 	rdlong	local01, arg04
0fe60                 | ' 
0fe60                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe60                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fe60     02 26 0E F2 | 	cmp	local01, #2 wz
0fe64     47 00 00 FF 
0fe68     9C E4 85 F1 | 	sub	objptr, ##36508
0fe6c     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0fe70     50 07 90 5D |  if_ne	jmp	#LR__1340
0fe74                 | ' 
0fe74                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe74     02 26 0E F2 | 	cmp	local01, #2 wz
0fe78     1C 03 90 5D |  if_ne	jmp	#LR__1332
0fe7c     C0 D6 BF FD | 	call	#_pop
0fe80     FF 1A 02 F6 | 	mov	arg05, result3
0fe84     40 4E 05 F1 | 	add	fp, #64
0fe88     A7 FA 61 FC | 	wrlong	result1, fp
0fe8c     04 4E 05 F1 | 	add	fp, #4
0fe90     A7 FC 61 FC | 	wrlong	result2, fp
0fe94     04 4E 05 F1 | 	add	fp, #4
0fe98     A7 1A 62 FC | 	wrlong	arg05, fp
0fe9c                 | '   t1=pop()
0fe9c                 | '   if t1.result_type=result_string2 then 
0fe9c     48 4E 85 F1 | 	sub	fp, #72
0fea0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0fea4     18 00 90 5D |  if_ne	jmp	#LR__1320
0fea8     40 4E 05 F1 | 	add	fp, #64
0feac     A7 12 02 FB | 	rdlong	arg01, fp
0feb0     40 4E 85 F1 | 	sub	fp, #64
0feb4     F8 D7 BF FD | 	call	#_convertstring
0feb8     FD 28 02 F6 | 	mov	local02, result1
0febc     38 00 90 FD | 	jmp	#LR__1322
0fec0                 | LR__1320
0fec0     48 4E 05 F1 | 	add	fp, #72
0fec4     A7 1A 02 FB | 	rdlong	arg05, fp
0fec8     48 4E 85 F1 | 	sub	fp, #72
0fecc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0fed0     40 4E 05 A1 |  if_e	add	fp, #64
0fed4     A7 28 02 AB |  if_e	rdlong	local02, fp
0fed8     40 4E 85 A1 |  if_e	sub	fp, #64
0fedc     18 00 90 AD |  if_e	jmp	#LR__1321
0fee0     92 01 00 FF 
0fee4     61 28 06 F6 | 	mov	local02, ##@LR__5583
0fee8     A7 12 02 F6 | 	mov	arg01, fp
0feec     40 12 06 F1 | 	add	arg01, #64
0fef0     28 D8 BF FD | 	call	#_converttoint
0fef4     FD 2A 02 F6 | 	mov	local03, result1
0fef8                 | LR__1321
0fef8                 | LR__1322
0fef8                 | '   if s1<>"" then 
0fef8     92 01 00 FF 
0fefc     62 14 06 F6 | 	mov	arg02, ##@LR__5584
0ff00     14 13 02 F6 | 	mov	arg01, local02
0ff04     C8 51 B1 FD | 	call	#__system___string_cmp
0ff08     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff0c     BC 01 90 AD |  if_e	jmp	#LR__1326
0ff10     2C D6 BF FD | 	call	#_pop
0ff14     FF 1A 02 F6 | 	mov	arg05, result3
0ff18     40 4E 05 F1 | 	add	fp, #64
0ff1c     A7 FA 61 FC | 	wrlong	result1, fp
0ff20     04 4E 05 F1 | 	add	fp, #4
0ff24     A7 FC 61 FC | 	wrlong	result2, fp
0ff28     04 4E 05 F1 | 	add	fp, #4
0ff2c     A7 1A 62 FC | 	wrlong	arg05, fp
0ff30     08 4E 85 F1 | 	sub	fp, #8
0ff34     A7 12 02 F6 | 	mov	arg01, fp
0ff38     40 4E 85 F1 | 	sub	fp, #64
0ff3c     DC D7 BF FD | 	call	#_converttoint
0ff40     FD 2C 02 F6 | 	mov	local04, result1
0ff44                 | '     t1=pop()
0ff44                 | '     channel=converttoint(t1) 
0ff44                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ff44     09 12 06 F6 | 	mov	arg01, #9
0ff48     CC 92 B1 FD | 	call	#__system__close
0ff4c     09 2E 06 F6 | 	mov	local05, #9
0ff50     92 01 00 FF 
0ff54     63 12 06 F6 | 	mov	arg01, ##@LR__5585
0ff58     14 15 02 F6 | 	mov	arg02, local02
0ff5c     A4 51 B1 FD | 	call	#__system___string_concat
0ff60     FD 14 02 F6 | 	mov	arg02, result1
0ff64     17 13 02 F6 | 	mov	arg01, local05
0ff68     00 16 06 F6 | 	mov	arg03, #0
0ff6c     68 58 B1 FD | 	call	#__system___basic_open_string
0ff70     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ff74     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ff78     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ff7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ff80     FD 30 0A F6 | 	mov	local06, result1 wz
0ff84                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff84     8C 00 90 AD |  if_e	jmp	#LR__1323
0ff88     00 12 06 F6 | 	mov	arg01, #0
0ff8c     04 9C B1 FD | 	call	#__system___getiolock_0622
0ff90     FD 12 02 F6 | 	mov	arg01, result1
0ff94     10 51 B1 FD | 	call	#__system___lockmem
0ff98     92 01 00 FF 
0ff9c     70 14 06 F6 | 	mov	arg02, ##@LR__5586
0ffa0     00 12 06 F6 | 	mov	arg01, #0
0ffa4     00 16 06 F6 | 	mov	arg03, #0
0ffa8     1C 59 B1 FD | 	call	#__system___basic_print_string
0ffac     00 12 06 F6 | 	mov	arg01, #0
0ffb0     18 15 02 F6 | 	mov	arg02, local06
0ffb4     00 16 06 F6 | 	mov	arg03, #0
0ffb8     0A 18 06 F6 | 	mov	arg04, #10
0ffbc     4C 59 B1 FD | 	call	#__system___basic_print_integer
0ffc0     92 01 00 FF 
0ffc4     7E 14 06 F6 | 	mov	arg02, ##@LR__5587
0ffc8     00 12 06 F6 | 	mov	arg01, #0
0ffcc     00 16 06 F6 | 	mov	arg03, #0
0ffd0     F4 58 B1 FD | 	call	#__system___basic_print_string
0ffd4     18 13 02 F6 | 	mov	arg01, local06
0ffd8     D8 6A B1 FD | 	call	#__system___strerror
0ffdc     FD 14 02 F6 | 	mov	arg02, result1
0ffe0     00 12 06 F6 | 	mov	arg01, #0
0ffe4     00 16 06 F6 | 	mov	arg03, #0
0ffe8     DC 58 B1 FD | 	call	#__system___basic_print_string
0ffec     00 12 06 F6 | 	mov	arg01, #0
0fff0     0A 14 06 F6 | 	mov	arg02, #10
0fff4     00 16 06 F6 | 	mov	arg03, #0
0fff8     74 58 B1 FD | 	call	#__system___basic_print_char
0fffc     00 12 06 F6 | 	mov	arg01, #0
10000     90 9B B1 FD | 	call	#__system___getiolock_0622
10004     FD 00 68 FC | 	wrlong	#0, result1
10008     09 12 06 F6 | 	mov	arg01, #9
1000c     08 92 B1 FD | 	call	#__system__close
10010     B0 05 90 FD | 	jmp	#LR__1340
10014                 | LR__1323
10014                 | '     get #9,17,envbuf8(channel,0),256
10014     16 17 02 F6 | 	mov	arg03, local04
10018     09 16 66 F0 | 	shl	arg03, #9
1001c     16 17 02 F1 | 	add	arg03, local04
10020     F2 1A 02 F6 | 	mov	arg05, objptr
10024     0C 00 00 FF 
10028     D8 1A 06 F1 | 	add	arg05, ##6360
1002c     0D 17 02 F1 | 	add	arg03, arg05
10030     09 12 06 F6 | 	mov	arg01, #9
10034     11 14 06 F6 | 	mov	arg02, #17
10038     00 19 06 F6 | 	mov	arg04, #256
1003c     01 1A 06 F6 | 	mov	arg05, #1
10040     0C 5A B1 FD | 	call	#__system___basic_get
10044                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10044     FF 32 06 F6 | 	mov	local07, #255
10048     0C 00 00 FF 
1004c     D8 E4 05 F1 | 	add	objptr, ##6360
10050     97 24 48 FB | 	callpa	#(@LR__1325-@LR__1324)>>2,fcache_load_ptr_
10054                 | LR__1324
10054     16 31 02 F6 | 	mov	local06, local04
10058     09 30 66 F0 | 	shl	local06, #9
1005c     F2 30 02 F1 | 	add	local06, objptr
10060     19 2F 02 F6 | 	mov	local05, local07
10064     01 2E 66 F0 | 	shl	local05, #1
10068     18 2F 02 F1 | 	add	local05, local06
1006c     16 2B 02 F6 | 	mov	local03, local04
10070     09 2A 66 F0 | 	shl	local03, #9
10074     16 2B 02 F1 | 	add	local03, local04
10078     F2 2A 02 F1 | 	add	local03, objptr
1007c     19 31 02 F6 | 	mov	local06, local07
10080     15 31 02 F1 | 	add	local06, local03
10084     18 31 C2 FA | 	rdbyte	local06, local06
10088     08 30 66 F0 | 	shl	local06, #8
1008c     17 31 52 FC | 	wrword	local06, local05
10090     01 32 86 F1 | 	sub	local07, #1
10094     00 32 56 F2 | 	cmps	local07, #0 wc
10098     B8 FF 9F 3D |  if_ae	jmp	#LR__1324
1009c                 | LR__1325
1009c     0C 00 00 FF 
100a0     D8 E4 85 F1 | 	sub	objptr, ##6360
100a4                 | '     close #9
100a4     09 12 06 F6 | 	mov	arg01, #9
100a8     6C 91 B1 FD | 	call	#__system__close
100ac     09 2C 66 F0 | 	shl	local04, #9
100b0     F2 32 02 F6 | 	mov	local07, objptr
100b4     0C 00 00 FF 
100b8     D8 32 06 F1 | 	add	local07, ##6360
100bc     19 2D 02 F1 | 	add	local04, local07
100c0     FE 2D 06 F1 | 	add	local04, #510
100c4     16 01 58 FC | 	wrword	#0, local04
100c8                 | '     envbuf(channel,255)=0                                                              
100c8                 | '     return
100c8     F8 04 90 FD | 	jmp	#LR__1340
100cc                 | LR__1326
100cc                 | '     if wptr < $80000 then 
100cc     00 04 00 FF 
100d0     00 2A 56 F2 | 	cmps	local03, ##524288 wc
100d4     54 00 90 3D |  if_ae	jmp	#LR__1329
100d8                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
100d8     00 32 06 F6 | 	mov	local07, #0
100dc     97 24 48 FB | 	callpa	#(@LR__1328-@LR__1327)>>2,fcache_load_ptr_
100e0                 | LR__1327
100e0     16 31 02 F6 | 	mov	local06, local04
100e4     09 30 66 F0 | 	shl	local06, #9
100e8     F2 2E 02 F6 | 	mov	local05, objptr
100ec     0C 00 00 FF 
100f0     D8 2E 06 F1 | 	add	local05, ##6360
100f4     17 31 02 F1 | 	add	local06, local05
100f8     19 2F 02 F6 | 	mov	local05, local07
100fc     01 2E 66 F0 | 	shl	local05, #1
10100     18 2F 02 F1 | 	add	local05, local06
10104     15 13 02 F6 | 	mov	arg01, local03
10108     19 31 02 F6 | 	mov	local06, local07
1010c     01 30 66 F0 | 	shl	local06, #1
10110     18 13 02 F1 | 	add	arg01, local06
10114     09 FB E1 FA | 	rdword	result1, arg01
10118     17 FB 51 FC | 	wrword	result1, local05
1011c     01 32 06 F1 | 	add	local07, #1
10120     00 33 56 F2 | 	cmps	local07, #256 wc
10124     B8 FF 9F CD |  if_b	jmp	#LR__1327
10128                 | LR__1328
10128     4C 00 90 FD | 	jmp	#LR__1331
1012c                 | LR__1329
1012c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
1012c     00 32 06 F6 | 	mov	local07, #0
10130                 | LR__1330
10130     16 31 02 F6 | 	mov	local06, local04
10134     09 30 66 F0 | 	shl	local06, #9
10138     F2 2E 02 F6 | 	mov	local05, objptr
1013c     0C 00 00 FF 
10140     D8 2E 06 F1 | 	add	local05, ##6360
10144     17 31 02 F1 | 	add	local06, local05
10148     19 2F 02 F6 | 	mov	local05, local07
1014c     01 2E 66 F0 | 	shl	local05, #1
10150     18 2F 02 F1 | 	add	local05, local06
10154     15 13 02 F6 | 	mov	arg01, local03
10158     19 31 02 F6 | 	mov	local06, local07
1015c     01 30 66 F0 | 	shl	local06, #1
10160     18 13 02 F1 | 	add	arg01, local06
10164     BC FC B0 FD | 	call	#_psdpeek
10168     17 FB 51 FC | 	wrword	result1, local05
1016c     01 32 06 F1 | 	add	local07, #1
10170     00 33 56 F2 | 	cmps	local07, #256 wc
10174     B8 FF 9F CD |  if_b	jmp	#LR__1330
10178                 | LR__1331
10178     09 2C 66 F0 | 	shl	local04, #9
1017c     F2 32 02 F6 | 	mov	local07, objptr
10180     0C 00 00 FF 
10184     D8 32 06 F1 | 	add	local07, ##6360
10188     19 2D 02 F1 | 	add	local04, local07
1018c     FE 2D 06 F1 | 	add	local04, #510
10190     16 01 58 FC | 	wrword	#0, local04
10194                 | '     envbuf(channel,255)=0
10194                 | '     return   
10194     2C 04 90 FD | 	jmp	#LR__1340
10198                 | LR__1332
10198                 | ' 
10198                 | ' if numpar=5 then   						 'simple adsr
10198     05 26 0E F2 | 	cmp	local01, #5 wz
1019c     08 04 90 5D |  if_ne	jmp	#LR__1339
101a0     9C D3 BF FD | 	call	#_pop
101a4     FF 32 02 F6 | 	mov	local07, result3
101a8     40 4E 05 F1 | 	add	fp, #64
101ac     A7 FA 61 FC | 	wrlong	result1, fp
101b0     04 4E 05 F1 | 	add	fp, #4
101b4     A7 FC 61 FC | 	wrlong	result2, fp
101b8     04 4E 05 F1 | 	add	fp, #4
101bc     A7 32 62 FC | 	wrlong	local07, fp
101c0     08 4E 85 F1 | 	sub	fp, #8
101c4     A7 12 02 F6 | 	mov	arg01, fp
101c8     40 4E 85 F1 | 	sub	fp, #64
101cc     08 D6 BF FD | 	call	#_converttofloat
101d0     FD 32 02 F6 | 	mov	local07, result1
101d4     68 D3 BF FD | 	call	#_pop
101d8     FF 30 02 F6 | 	mov	local06, result3
101dc     40 4E 05 F1 | 	add	fp, #64
101e0     A7 FA 61 FC | 	wrlong	result1, fp
101e4     04 4E 05 F1 | 	add	fp, #4
101e8     A7 FC 61 FC | 	wrlong	result2, fp
101ec     04 4E 05 F1 | 	add	fp, #4
101f0     A7 30 62 FC | 	wrlong	local06, fp
101f4     08 4E 85 F1 | 	sub	fp, #8
101f8     A7 12 02 F6 | 	mov	arg01, fp
101fc     40 4E 85 F1 | 	sub	fp, #64
10200     D4 D5 BF FD | 	call	#_converttofloat
10204     FD 34 02 F6 | 	mov	local08, result1
10208     34 D3 BF FD | 	call	#_pop
1020c     FF 30 02 F6 | 	mov	local06, result3
10210     40 4E 05 F1 | 	add	fp, #64
10214     A7 FA 61 FC | 	wrlong	result1, fp
10218     04 4E 05 F1 | 	add	fp, #4
1021c     A7 FC 61 FC | 	wrlong	result2, fp
10220     04 4E 05 F1 | 	add	fp, #4
10224     A7 30 62 FC | 	wrlong	local06, fp
10228     08 4E 85 F1 | 	sub	fp, #8
1022c     A7 12 02 F6 | 	mov	arg01, fp
10230     40 4E 85 F1 | 	sub	fp, #64
10234     A0 D5 BF FD | 	call	#_converttofloat
10238     FD 30 02 F6 | 	mov	local06, result1
1023c     00 D3 BF FD | 	call	#_pop
10240     FF 2E 02 F6 | 	mov	local05, result3
10244     40 4E 05 F1 | 	add	fp, #64
10248     A7 FA 61 FC | 	wrlong	result1, fp
1024c     04 4E 05 F1 | 	add	fp, #4
10250     A7 FC 61 FC | 	wrlong	result2, fp
10254     04 4E 05 F1 | 	add	fp, #4
10258     A7 2E 62 FC | 	wrlong	local05, fp
1025c     08 4E 85 F1 | 	sub	fp, #8
10260     A7 12 02 F6 | 	mov	arg01, fp
10264     40 4E 85 F1 | 	sub	fp, #64
10268     6C D5 BF FD | 	call	#_converttofloat
1026c     FD 2E 02 F6 | 	mov	local05, result1
10270     CC D2 BF FD | 	call	#_pop
10274     FF 2C 02 F6 | 	mov	local04, result3
10278     40 4E 05 F1 | 	add	fp, #64
1027c     A7 FA 61 FC | 	wrlong	result1, fp
10280     04 4E 05 F1 | 	add	fp, #4
10284     A7 FC 61 FC | 	wrlong	result2, fp
10288     04 4E 05 F1 | 	add	fp, #4
1028c     A7 2C 62 FC | 	wrlong	local04, fp
10290     08 4E 85 F1 | 	sub	fp, #8
10294     A7 12 02 F6 | 	mov	arg01, fp
10298     40 4E 85 F1 | 	sub	fp, #64
1029c     7C D4 BF FD | 	call	#_converttoint
102a0     FD 2C 02 F6 | 	mov	local04, result1
102a4                 | '   t1=pop() : rr=converttofloat(t1)
102a4                 | '   t1=pop() : ss=converttofloat(t1) 
102a4                 | '   t1=pop() : dd=converttofloat(t1)
102a4                 | '   t1=pop() : aa=converttofloat(t1)
102a4                 | '   t1=pop() : channel=converttoint(t1)
102a4                 | '   if ss<0.0 then ss=0.0 
102a4     1A 13 02 F6 | 	mov	arg01, local08
102a8     00 14 06 F6 | 	mov	arg02, #0
102ac     01 16 06 F6 | 	mov	arg03, #1
102b0     C4 70 B1 FD | 	call	#__system___float_cmp
102b4     00 FA 55 F2 | 	cmps	result1, #0 wc
102b8     00 34 06 C6 |  if_b	mov	local08, #0
102bc                 | '   if ss>1.0 then ss=1.0
102bc     1A 13 02 F6 | 	mov	arg01, local08
102c0     00 C0 1F FF 
102c4     00 14 06 F6 | 	mov	arg02, ##1065353216
102c8     01 16 66 F6 | 	neg	arg03, #1
102cc     A8 70 B1 FD | 	call	#__system___float_cmp
102d0     01 FA 55 F2 | 	cmps	result1, #1 wc
102d4     00 C0 1F 3F 
102d8     00 34 06 36 |  if_ae	mov	local08, ##1065353216
102dc     17 13 02 F6 | 	mov	arg01, local05
102e0     18 15 02 F6 | 	mov	arg02, local06
102e4     D0 68 B1 FD | 	call	#__system___float_add
102e8     FD 12 02 F6 | 	mov	arg01, result1
102ec     19 15 02 F6 | 	mov	arg02, local07
102f0     C4 68 B1 FD | 	call	#__system___float_add
102f4     FD 14 02 F6 | 	mov	arg02, result1
102f8     00 C0 21 FF 
102fc     00 12 06 F6 | 	mov	arg01, ##1132462080
10300     64 6E B1 FD | 	call	#__system___float_div
10304     FD 36 02 F6 | 	mov	local09, result1
10308     17 13 02 F6 | 	mov	arg01, local05
1030c     1B 15 02 F6 | 	mov	arg02, local09
10310     60 6C B1 FD | 	call	#__system___float_mul
10314     FD 12 02 F6 | 	mov	arg01, result1
10318     01 14 06 F6 | 	mov	arg02, #1
1031c     E0 70 B1 FD | 	call	#__system___float_tointeger
10320     FD 38 02 F6 | 	mov	local10, result1
10324     18 13 02 F6 | 	mov	arg01, local06
10328     1B 15 02 F6 | 	mov	arg02, local09
1032c     44 6C B1 FD | 	call	#__system___float_mul
10330     FD 12 02 F6 | 	mov	arg01, result1
10334     01 14 06 F6 | 	mov	arg02, #1
10338     C4 70 B1 FD | 	call	#__system___float_tointeger
1033c     FD 3A 02 F6 | 	mov	local11, result1
10340     19 13 02 F6 | 	mov	arg01, local07
10344     1B 15 02 F6 | 	mov	arg02, local09
10348     28 6C B1 FD | 	call	#__system___float_mul
1034c     FD 12 02 F6 | 	mov	arg01, result1
10350     01 14 06 F6 | 	mov	arg02, #1
10354     A8 70 B1 FD | 	call	#__system___float_tointeger
10358     FD 30 02 F6 | 	mov	local06, result1
1035c     F8 BF 23 FF 
10360     00 2E 06 F6 | 	mov	local05, ##1199566848
10364     1C 13 52 F6 | 	abs	arg01, local10 wc
10368     1F 3C C6 C9 |  if_b	decod	local12, #31
1036c     00 3C 06 36 |  if_ae	mov	local12, #0
10370     00 68 B1 FD | 	call	#__system___float_fromuns
10374     1E FB 61 F5 | 	xor	result1, local12
10378     FD 14 02 F6 | 	mov	arg02, result1
1037c     17 13 02 F6 | 	mov	arg01, local05
10380     E4 6D B1 FD | 	call	#__system___float_div
10384     FD 3E 02 F6 | 	mov	local13, result1
10388     F8 BF 23 FF 
1038c     00 2E 06 F6 | 	mov	local05, ##1199566848
10390     F8 BF 23 FF 
10394     00 12 06 F6 | 	mov	arg01, ##1199566848
10398     1A 15 02 F6 | 	mov	arg02, local08
1039c     D4 6B B1 FD | 	call	#__system___float_mul
103a0     FD 14 02 F6 | 	mov	arg02, result1
103a4     17 13 02 F6 | 	mov	arg01, local05
103a8     1F 14 E6 F4 | 	bitnot	arg02, #31
103ac     08 68 B1 FD | 	call	#__system___float_add
103b0     FD 2E 02 F6 | 	mov	local05, result1
103b4     1D 13 52 F6 | 	abs	arg01, local11 wc
103b8     1F 3C C6 C9 |  if_b	decod	local12, #31
103bc     00 3C 06 36 |  if_ae	mov	local12, #0
103c0     B0 67 B1 FD | 	call	#__system___float_fromuns
103c4     1E FB 61 F5 | 	xor	result1, local12
103c8     FD 14 02 F6 | 	mov	arg02, result1
103cc     17 13 02 F6 | 	mov	arg01, local05
103d0     94 6D B1 FD | 	call	#__system___float_div
103d4     FD 40 02 F6 | 	mov	local14, result1
103d8     F8 BF 23 FF 
103dc     00 12 06 F6 | 	mov	arg01, ##1199566848
103e0     1A 15 02 F6 | 	mov	arg02, local08
103e4     8C 6B B1 FD | 	call	#__system___float_mul
103e8     FD 2E 02 F6 | 	mov	local05, result1
103ec     18 13 52 F6 | 	abs	arg01, local06 wc
103f0     1F 3C C6 C9 |  if_b	decod	local12, #31
103f4     00 3C 06 36 |  if_ae	mov	local12, #0
103f8     78 67 B1 FD | 	call	#__system___float_fromuns
103fc     1E FB 61 F5 | 	xor	result1, local12
10400     FD 14 02 F6 | 	mov	arg02, result1
10404     17 13 02 F6 | 	mov	arg01, local05
10408     5C 6D B1 FD | 	call	#__system___float_div
1040c     FD 42 02 F6 | 	mov	local15, result1
10410     16 33 02 F6 | 	mov	local07, local04
10414     01 32 66 F0 | 	shl	local07, #1
10418     F2 44 02 F6 | 	mov	local16, objptr
1041c     52 00 00 FF 
10420     0C 45 06 F1 | 	add	local16, ##42252
10424     22 33 02 F1 | 	add	local07, local16
10428     1C 47 02 F6 | 	mov	local17, local10
1042c     1D 47 02 F1 | 	add	local17, local11
10430     19 47 52 FC | 	wrword	local17, local07
10434     00 48 06 F6 | 	mov	local18, #0
10438                 | '   fulltime=aa+dd+rr
10438                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10438                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10438                 | '   suspoints(channel)=a+d
10438                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10438     00 32 06 F6 | 	mov	local07, #0
1043c     1C 4B 02 F6 | 	mov	local19, local10
10440                 | LR__1333
10440     25 33 52 F2 | 	cmps	local07, local19 wc
10444     4C 00 90 3D |  if_ae	jmp	#LR__1334
10448     16 47 02 F6 | 	mov	local17, local04
1044c     09 46 66 F0 | 	shl	local17, #9
10450     F2 44 02 F6 | 	mov	local16, objptr
10454     0C 00 00 FF 
10458     D8 44 06 F1 | 	add	local16, ##6360
1045c     22 47 02 F1 | 	add	local17, local16
10460     19 45 02 F6 | 	mov	local16, local07
10464     01 44 66 F0 | 	shl	local16, #1
10468     23 45 02 F1 | 	add	local16, local17
1046c     24 13 02 F6 | 	mov	arg01, local18
10470     01 14 06 F6 | 	mov	arg02, #1
10474     88 6F B1 FD | 	call	#__system___float_tointeger
10478     22 FB 51 FC | 	wrword	result1, local16
1047c     1F 15 02 F6 | 	mov	arg02, local13
10480     24 13 02 F6 | 	mov	arg01, local18
10484     30 67 B1 FD | 	call	#__system___float_add
10488     FD 48 02 F6 | 	mov	local18, result1
1048c     01 32 06 F1 | 	add	local07, #1
10490     AC FF 9F FD | 	jmp	#LR__1333
10494                 | LR__1334
10494                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10494     1C 33 02 F6 | 	mov	local07, local10
10498     1C 4D 02 F6 | 	mov	local20, local10
1049c     1D 4D 02 F1 | 	add	local20, local11
104a0                 | LR__1335
104a0     26 33 52 F2 | 	cmps	local07, local20 wc
104a4     68 00 90 3D |  if_ae	jmp	#LR__1336
104a8     16 4B 02 F6 | 	mov	local19, local04
104ac     09 4A 66 F0 | 	shl	local19, #9
104b0     F2 44 02 F6 | 	mov	local16, objptr
104b4     0C 00 00 FF 
104b8     D8 44 06 F1 | 	add	local16, ##6360
104bc     22 4B 02 F1 | 	add	local19, local16
104c0     19 47 02 F6 | 	mov	local17, local07
104c4     01 46 66 F0 | 	shl	local17, #1
104c8     25 47 02 F1 | 	add	local17, local19
104cc     24 13 02 F6 | 	mov	arg01, local18
104d0     01 14 06 F6 | 	mov	arg02, #1
104d4     28 6F B1 FD | 	call	#__system___float_tointeger
104d8     23 FB 51 FC | 	wrword	result1, local17
104dc     24 13 02 F6 | 	mov	arg01, local18
104e0     20 15 02 F6 | 	mov	arg02, local14
104e4     1F 14 E6 F4 | 	bitnot	arg02, #31
104e8     CC 66 B1 FD | 	call	#__system___float_add
104ec     FD 48 02 F6 | 	mov	local18, result1
104f0     24 13 02 F6 | 	mov	arg01, local18
104f4     00 14 06 F6 | 	mov	arg02, #0
104f8     01 16 06 F6 | 	mov	arg03, #1
104fc     78 6E B1 FD | 	call	#__system___float_cmp
10500     00 FA 55 F2 | 	cmps	result1, #0 wc
10504     00 48 06 C6 |  if_b	mov	local18, #0
10508     01 32 06 F1 | 	add	local07, #1
1050c     90 FF 9F FD | 	jmp	#LR__1335
10510                 | LR__1336
10510                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10510     1C 33 02 F6 | 	mov	local07, local10
10514     1D 33 02 F1 | 	add	local07, local11
10518                 | LR__1337
10518     00 33 56 F2 | 	cmps	local07, #256 wc
1051c     68 00 90 3D |  if_ae	jmp	#LR__1338
10520     16 4D 02 F6 | 	mov	local20, local04
10524     09 4C 66 F0 | 	shl	local20, #9
10528     F2 46 02 F6 | 	mov	local17, objptr
1052c     0C 00 00 FF 
10530     D8 46 06 F1 | 	add	local17, ##6360
10534     23 4D 02 F1 | 	add	local20, local17
10538     19 4B 02 F6 | 	mov	local19, local07
1053c     01 4A 66 F0 | 	shl	local19, #1
10540     26 4B 02 F1 | 	add	local19, local20
10544     24 13 02 F6 | 	mov	arg01, local18
10548     01 14 06 F6 | 	mov	arg02, #1
1054c     B0 6E B1 FD | 	call	#__system___float_tointeger
10550     25 FB 51 FC | 	wrword	result1, local19
10554     24 13 02 F6 | 	mov	arg01, local18
10558     21 15 02 F6 | 	mov	arg02, local15
1055c     1F 14 E6 F4 | 	bitnot	arg02, #31
10560     54 66 B1 FD | 	call	#__system___float_add
10564     FD 48 02 F6 | 	mov	local18, result1
10568     24 13 02 F6 | 	mov	arg01, local18
1056c     00 14 06 F6 | 	mov	arg02, #0
10570     01 16 06 F6 | 	mov	arg03, #1
10574     00 6E B1 FD | 	call	#__system___float_cmp
10578     00 FA 55 F2 | 	cmps	result1, #0 wc
1057c     00 48 06 C6 |  if_b	mov	local18, #0
10580     01 32 06 F1 | 	add	local07, #1
10584     90 FF 9F FD | 	jmp	#LR__1337
10588                 | LR__1338
10588     16 4D 02 F6 | 	mov	local20, local04
1058c     09 4C 66 F0 | 	shl	local20, #9
10590     F2 44 02 F6 | 	mov	local16, objptr
10594     0C 00 00 FF 
10598     D8 44 06 F1 | 	add	local16, ##6360
1059c     22 4D 02 F1 | 	add	local20, local16
105a0     FE 4D 06 F1 | 	add	local20, #510
105a4     26 01 58 FC | 	wrword	#0, local20
105a8                 | LR__1339
105a8     09 2C 66 F0 | 	shl	local04, #9
105ac     F2 44 02 F6 | 	mov	local16, objptr
105b0     0C 00 00 FF 
105b4     D8 44 06 F1 | 	add	local16, ##6360
105b8     22 2D 02 F1 | 	add	local04, local16
105bc     FE 2D 06 F1 | 	add	local04, #510
105c0     16 01 58 FC | 	wrword	#0, local04
105c4                 | LR__1340
105c4     A7 F0 03 F6 | 	mov	ptra, fp
105c8     B2 00 A0 FD | 	call	#popregs_
105cc                 | _do_defenv_ret
105cc     2D 00 64 FD | 	ret
105d0                 | 
105d0                 | ' 
105d0                 | ' '-------------------- defsnd
105d0                 | ' 
105d0                 | ' sub do_defsnd
105d0                 | _do_defsnd
105d0     0D 4A 05 F6 | 	mov	COUNT_, #13
105d4     A8 00 A0 FD | 	call	#pushregs_
105d8     80 F0 07 F1 | 	add	ptra, #128
105dc     4A 00 00 FF 
105e0     A0 E4 05 F1 | 	add	objptr, ##38048
105e4     F2 1A 02 FB | 	rdlong	arg05, objptr
105e8     0D 19 02 F6 | 	mov	arg04, arg05
105ec     01 18 66 F0 | 	shl	arg04, #1
105f0     0D 19 02 F1 | 	add	arg04, arg05
105f4     02 18 66 F0 | 	shl	arg04, #2
105f8     03 00 00 FF 
105fc     04 E4 85 F1 | 	sub	objptr, ##1540
10600     F2 18 02 F1 | 	add	arg04, objptr
10604     0C 27 02 FB | 	rdlong	local01, arg04
10608                 | ' 
10608                 | ' numpar=compiledline(lineptr_e).result.uresult
10608                 | ' 
10608                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10608                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10608                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10608                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10608                 | ' 
10608                 | ' if numpar<2 then return
10608     02 26 56 F2 | 	cmps	local01, #2 wc
1060c     47 00 00 FF 
10610     9C E4 85 F1 | 	sub	objptr, ##36508
10614     88 06 90 CD |  if_b	jmp	#LR__1371
10618                 | '  
10618                 | ' if numpar=2 then
10618     02 26 0E F2 | 	cmp	local01, #2 wz
1061c     E4 02 90 5D |  if_ne	jmp	#LR__1359
10620     1C CF BF FD | 	call	#_pop
10624     FF 1A 02 F6 | 	mov	arg05, result3
10628     2C 4E 05 F1 | 	add	fp, #44
1062c     A7 FA 61 FC | 	wrlong	result1, fp
10630     04 4E 05 F1 | 	add	fp, #4
10634     A7 FC 61 FC | 	wrlong	result2, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 1A 62 FC | 	wrlong	arg05, fp
10640                 | '   t1=pop()
10640                 | '   if t1.result_type=result_string2 then 
10640     34 4E 85 F1 | 	sub	fp, #52
10644     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10648     18 00 90 5D |  if_ne	jmp	#LR__1350
1064c     2C 4E 05 F1 | 	add	fp, #44
10650     A7 12 02 FB | 	rdlong	arg01, fp
10654     2C 4E 85 F1 | 	sub	fp, #44
10658     54 D0 BF FD | 	call	#_convertstring
1065c     FD 28 02 F6 | 	mov	local02, result1
10660     38 00 90 FD | 	jmp	#LR__1352
10664                 | LR__1350
10664     34 4E 05 F1 | 	add	fp, #52
10668     A7 1A 02 FB | 	rdlong	arg05, fp
1066c     34 4E 85 F1 | 	sub	fp, #52
10670     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10674     2C 4E 05 A1 |  if_e	add	fp, #44
10678     A7 28 02 AB |  if_e	rdlong	local02, fp
1067c     2C 4E 85 A1 |  if_e	sub	fp, #44
10680     18 00 90 AD |  if_e	jmp	#LR__1351
10684     92 01 00 FF 
10688     81 28 06 F6 | 	mov	local02, ##@LR__5588
1068c     A7 12 02 F6 | 	mov	arg01, fp
10690     2C 12 06 F1 | 	add	arg01, #44
10694     84 D0 BF FD | 	call	#_converttoint
10698     FD 2A 02 F6 | 	mov	local03, result1
1069c                 | LR__1351
1069c                 | LR__1352
1069c                 | '   if s<>"" then 
1069c     92 01 00 FF 
106a0     82 14 06 F6 | 	mov	arg02, ##@LR__5589
106a4     14 13 02 F6 | 	mov	arg01, local02
106a8     24 4A B1 FD | 	call	#__system___string_cmp
106ac     00 FA 0D F2 | 	cmp	result1, #0 wz
106b0     B0 01 90 AD |  if_e	jmp	#LR__1355
106b4     88 CE BF FD | 	call	#_pop
106b8     FF 1A 02 F6 | 	mov	arg05, result3
106bc     2C 4E 05 F1 | 	add	fp, #44
106c0     A7 FA 61 FC | 	wrlong	result1, fp
106c4     04 4E 05 F1 | 	add	fp, #4
106c8     A7 FC 61 FC | 	wrlong	result2, fp
106cc     04 4E 05 F1 | 	add	fp, #4
106d0     A7 1A 62 FC | 	wrlong	arg05, fp
106d4     08 4E 85 F1 | 	sub	fp, #8
106d8     A7 12 02 F6 | 	mov	arg01, fp
106dc     2C 4E 85 F1 | 	sub	fp, #44
106e0     38 D0 BF FD | 	call	#_converttoint
106e4     FD 2C 02 F6 | 	mov	local04, result1
106e8                 | '     t1=pop()
106e8                 | '     channel=converttoint(t1) : if channel>31 then return
106e8     20 2C 56 F2 | 	cmps	local04, #32 wc
106ec     B0 05 90 3D |  if_ae	jmp	#LR__1371
106f0                 | '     close #9 : open "/sd/media/s/"+s for input as #9
106f0     09 12 06 F6 | 	mov	arg01, #9
106f4     20 8B B1 FD | 	call	#__system__close
106f8     09 2A 06 F6 | 	mov	local03, #9
106fc     92 01 00 FF 
10700     83 12 06 F6 | 	mov	arg01, ##@LR__5590
10704     14 15 02 F6 | 	mov	arg02, local02
10708     F8 49 B1 FD | 	call	#__system___string_concat
1070c     FD 14 02 F6 | 	mov	arg02, result1
10710     15 13 02 F6 | 	mov	arg01, local03
10714     00 16 06 F6 | 	mov	arg03, #0
10718     BC 50 B1 FD | 	call	#__system___basic_open_string
1071c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10720     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10724     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10728     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1072c     52 00 00 FF 
10730     68 E5 05 F1 | 	add	objptr, ##42344
10734     F2 FA 61 FC | 	wrlong	result1, objptr
10738                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10738     52 00 00 FF 
1073c     68 E5 85 F1 | 	sub	objptr, ##42344
10740     B0 00 90 AD |  if_e	jmp	#LR__1353
10744     00 12 06 F6 | 	mov	arg01, #0
10748     48 94 B1 FD | 	call	#__system___getiolock_0622
1074c     FD 12 02 F6 | 	mov	arg01, result1
10750     54 49 B1 FD | 	call	#__system___lockmem
10754     92 01 00 FF 
10758     90 14 06 F6 | 	mov	arg02, ##@LR__5591
1075c     00 12 06 F6 | 	mov	arg01, #0
10760     00 16 06 F6 | 	mov	arg03, #0
10764     60 51 B1 FD | 	call	#__system___basic_print_string
10768     52 00 00 FF 
1076c     68 E5 05 F1 | 	add	objptr, ##42344
10770     F2 14 02 FB | 	rdlong	arg02, objptr
10774     52 00 00 FF 
10778     68 E5 85 F1 | 	sub	objptr, ##42344
1077c     00 12 06 F6 | 	mov	arg01, #0
10780     00 16 06 F6 | 	mov	arg03, #0
10784     0A 18 06 F6 | 	mov	arg04, #10
10788     80 51 B1 FD | 	call	#__system___basic_print_integer
1078c     92 01 00 FF 
10790     9E 14 06 F6 | 	mov	arg02, ##@LR__5592
10794     00 12 06 F6 | 	mov	arg01, #0
10798     00 16 06 F6 | 	mov	arg03, #0
1079c     28 51 B1 FD | 	call	#__system___basic_print_string
107a0     00 2C 06 F6 | 	mov	local04, #0
107a4     52 00 00 FF 
107a8     68 E5 05 F1 | 	add	objptr, ##42344
107ac     F2 12 02 FB | 	rdlong	arg01, objptr
107b0     52 00 00 FF 
107b4     68 E5 85 F1 | 	sub	objptr, ##42344
107b8     F8 62 B1 FD | 	call	#__system___strerror
107bc     FD 14 02 F6 | 	mov	arg02, result1
107c0     16 13 02 F6 | 	mov	arg01, local04
107c4     00 16 06 F6 | 	mov	arg03, #0
107c8     FC 50 B1 FD | 	call	#__system___basic_print_string
107cc     00 12 06 F6 | 	mov	arg01, #0
107d0     0A 14 06 F6 | 	mov	arg02, #10
107d4     00 16 06 F6 | 	mov	arg03, #0
107d8     94 50 B1 FD | 	call	#__system___basic_print_char
107dc     00 12 06 F6 | 	mov	arg01, #0
107e0     B0 93 B1 FD | 	call	#__system___getiolock_0622
107e4     FD 00 68 FC | 	wrlong	#0, result1
107e8     09 12 06 F6 | 	mov	arg01, #9
107ec     28 8A B1 FD | 	call	#__system__close
107f0     AC 04 90 FD | 	jmp	#LR__1371
107f4                 | LR__1353
107f4                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
107f4     00 2E 06 F6 | 	mov	local05, #0
107f8                 | LR__1354
107f8     17 2B 02 F6 | 	mov	local03, local05
107fc     01 2A 66 F0 | 	shl	local03, #1
10800     11 14 06 F6 | 	mov	arg02, #17
10804     15 15 02 F1 | 	add	arg02, local03
10808     A7 16 02 F6 | 	mov	arg03, fp
1080c     7C 16 06 F1 | 	add	arg03, #124
10810     09 12 06 F6 | 	mov	arg01, #9
10814     01 18 06 F6 | 	mov	arg04, #1
10818     02 1A 06 F6 | 	mov	arg05, #2
1081c     30 52 B1 FD | 	call	#__system___basic_get
10820     16 13 02 F6 | 	mov	arg01, local04
10824     0B 12 66 F0 | 	shl	arg01, #11
10828     17 2B 02 F6 | 	mov	local03, local05
1082c     01 2A 66 F0 | 	shl	local03, #1
10830     15 13 02 F1 | 	add	arg01, local03
10834     7C 4E 05 F1 | 	add	fp, #124
10838     A7 14 E2 FA | 	rdword	arg02, fp
1083c     7C 4E 85 F1 | 	sub	fp, #124
10840     0F 14 66 F7 | 	signx	arg02, #15
10844     BC F4 B0 FD | 	call	#_psdpoke
10848     01 2E 06 F1 | 	add	local05, #1
1084c     02 00 00 FF 
10850     01 2E 56 F2 | 	cmps	local05, ##1025 wc
10854     A0 FF 9F CD |  if_b	jmp	#LR__1354
10858                 | '     close #9
10858     09 12 06 F6 | 	mov	arg01, #9
1085c     B8 89 B1 FD | 	call	#__system__close
10860                 | '     return
10860     3C 04 90 FD | 	jmp	#LR__1371
10864                 | LR__1355
10864                 | '     if wptr < ($80000 - 2048) then 
10864     FC 03 00 FF 
10868     00 2A 56 F2 | 	cmps	local03, ##522240 wc
1086c     48 00 90 3D |  if_ae	jmp	#LR__1357
10870                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10870     00 2E 06 F6 | 	mov	local05, #0
10874                 | LR__1356
10874     16 27 02 F6 | 	mov	local01, local04
10878     0B 26 66 F0 | 	shl	local01, #11
1087c     17 29 02 F6 | 	mov	local02, local05
10880     01 28 66 F0 | 	shl	local02, #1
10884     14 27 02 F1 | 	add	local01, local02
10888     15 13 02 F6 | 	mov	arg01, local03
1088c     17 29 02 F6 | 	mov	local02, local05
10890     01 28 66 F0 | 	shl	local02, #1
10894     14 13 02 F1 | 	add	arg01, local02
10898     09 15 E2 FA | 	rdword	arg02, arg01
1089c     13 13 02 F6 | 	mov	arg01, local01
108a0     60 F4 B0 FD | 	call	#_psdpoke
108a4     01 2E 06 F1 | 	add	local05, #1
108a8     02 00 00 FF 
108ac     00 2E 56 F2 | 	cmps	local05, ##1024 wc
108b0     C0 FF 9F CD |  if_b	jmp	#LR__1356
108b4     E8 03 90 FD | 	jmp	#LR__1371
108b8                 | LR__1357
108b8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
108b8     00 2E 06 F6 | 	mov	local05, #0
108bc                 | LR__1358
108bc     16 27 02 F6 | 	mov	local01, local04
108c0     0B 26 66 F0 | 	shl	local01, #11
108c4     17 29 02 F6 | 	mov	local02, local05
108c8     01 28 66 F0 | 	shl	local02, #1
108cc     14 27 02 F1 | 	add	local01, local02
108d0     15 13 02 F6 | 	mov	arg01, local03
108d4     17 29 02 F6 | 	mov	local02, local05
108d8     01 28 66 F0 | 	shl	local02, #1
108dc     14 13 02 F1 | 	add	arg01, local02
108e0     40 F5 B0 FD | 	call	#_psdpeek
108e4     FD 14 02 F6 | 	mov	arg02, result1
108e8     13 13 02 F6 | 	mov	arg01, local01
108ec     14 F4 B0 FD | 	call	#_psdpoke
108f0     01 2E 06 F1 | 	add	local05, #1
108f4     02 00 00 FF 
108f8     00 2E 56 F2 | 	cmps	local05, ##1024 wc
108fc     BC FF 9F CD |  if_b	jmp	#LR__1358
10900                 | '     return 
10900     9C 03 90 FD | 	jmp	#LR__1371
10904                 | '   return
10904                 | LR__1359
10904                 | ' for i=0 to 15 : harm(i)=0: next i  
10904     00 2E 06 F6 | 	mov	local05, #0
10908     3C 4E 05 F1 | 	add	fp, #60
1090c     97 0E 48 FB | 	callpa	#(@LR__1361-@LR__1360)>>2,fcache_load_ptr_
10910                 | LR__1360
10910     17 31 02 F6 | 	mov	local06, local05
10914     02 30 66 F0 | 	shl	local06, #2
10918     A7 30 02 F1 | 	add	local06, fp
1091c     18 01 68 FC | 	wrlong	#0, local06
10920     01 2E 06 F1 | 	add	local05, #1
10924     10 2E 56 F2 | 	cmps	local05, #16 wc
10928     E4 FF 9F CD |  if_b	jmp	#LR__1360
1092c                 | LR__1361
1092c     3C 4E 85 F1 | 	sub	fp, #60
10930                 | ' for i=numpar to 2 step -1 
10930     13 2F 02 F6 | 	mov	local05, local01
10934                 | LR__1362
10934     08 CC BF FD | 	call	#_pop
10938     2C 4E 05 F1 | 	add	fp, #44
1093c     A7 FA 61 FC | 	wrlong	result1, fp
10940     04 4E 05 F1 | 	add	fp, #4
10944     A7 FC 61 FC | 	wrlong	result2, fp
10948     04 4E 05 F1 | 	add	fp, #4
1094c     A7 FE 61 FC | 	wrlong	result3, fp
10950     17 31 02 F6 | 	mov	local06, local05
10954     02 30 86 F1 | 	sub	local06, #2
10958     02 30 66 F0 | 	shl	local06, #2
1095c     08 4E 05 F1 | 	add	fp, #8
10960     A7 30 02 F1 | 	add	local06, fp
10964     10 4E 85 F1 | 	sub	fp, #16
10968     A7 12 02 F6 | 	mov	arg01, fp
1096c     2C 4E 85 F1 | 	sub	fp, #44
10970     64 CE BF FD | 	call	#_converttofloat
10974     18 FB 61 FC | 	wrlong	result1, local06
10978     01 2E 86 F1 | 	sub	local05, #1
1097c     02 2E 56 F2 | 	cmps	local05, #2 wc
10980     B0 FF 9F 3D |  if_ae	jmp	#LR__1362
10984     B8 CB BF FD | 	call	#_pop
10988     FF 2E 02 F6 | 	mov	local05, result3
1098c     2C 4E 05 F1 | 	add	fp, #44
10990     A7 FA 61 FC | 	wrlong	result1, fp
10994     04 4E 05 F1 | 	add	fp, #4
10998     A7 FC 61 FC | 	wrlong	result2, fp
1099c     04 4E 05 F1 | 	add	fp, #4
109a0     A7 2E 62 FC | 	wrlong	local05, fp
109a4     08 4E 85 F1 | 	sub	fp, #8
109a8     A7 12 02 F6 | 	mov	arg01, fp
109ac     2C 4E 85 F1 | 	sub	fp, #44
109b0     68 CD BF FD | 	call	#_converttoint
109b4     FD 2C 02 F6 | 	mov	local04, result1
109b8                 | ' t1=pop()
109b8                 | ' channel=converttoint(t1) : : if channel>31 then return
109b8     20 2C 56 F2 | 	cmps	local04, #32 wc
109bc     E0 02 90 3D |  if_ae	jmp	#LR__1371
109c0     00 32 06 F6 | 	mov	local07, #0
109c4                 | ' max=0
109c4                 | ' if harm(0)<0 then
109c4     3C 4E 05 F1 | 	add	fp, #60
109c8     A7 12 02 FB | 	rdlong	arg01, fp
109cc     3C 4E 85 F1 | 	sub	fp, #60
109d0     00 14 06 F6 | 	mov	arg02, #0
109d4     01 16 06 F6 | 	mov	arg03, #1
109d8     9C 69 B1 FD | 	call	#__system___float_cmp
109dc     00 FA 55 F2 | 	cmps	result1, #0 wc
109e0     C0 00 90 3D |  if_ae	jmp	#LR__1365
109e4     3C 4E 05 F1 | 	add	fp, #60
109e8     A7 34 02 FB | 	rdlong	local08, fp
109ec     1F 34 06 F4 | 	bitl	local08, #31
109f0     04 4E 05 F1 | 	add	fp, #4
109f4     A7 36 02 FB | 	rdlong	local09, fp
109f8     1F 36 06 F4 | 	bitl	local09, #31
109fc     04 4E 85 F1 | 	sub	fp, #4
10a00     00 C0 9F FF 
10a04     A7 00 68 FC | 	wrlong	##1065353216, fp
10a08     04 4E 05 F1 | 	add	fp, #4
10a0c     A7 34 62 FC | 	wrlong	local08, fp
10a10     04 4E 05 F1 | 	add	fp, #4
10a14     A7 36 62 FC | 	wrlong	local09, fp
10a18     44 4E 85 F1 | 	sub	fp, #68
10a1c                 | '   harm(0)=1
10a1c                 | '   harm(1)=even
10a1c                 | '   harm(2)=odd
10a1c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10a1c     03 2E 06 F6 | 	mov	local05, #3
10a20                 | LR__1363
10a20     17 31 02 F6 | 	mov	local06, local05
10a24     02 30 66 F0 | 	shl	local06, #2
10a28     3C 4E 05 F1 | 	add	fp, #60
10a2c     A7 30 02 F1 | 	add	local06, fp
10a30     17 1B 02 F6 | 	mov	arg05, local05
10a34     02 1A 86 F1 | 	sub	arg05, #2
10a38     02 1A 66 F0 | 	shl	arg05, #2
10a3c     A7 1A 02 F1 | 	add	arg05, fp
10a40     0D 13 02 FB | 	rdlong	arg01, arg05
10a44     1A 15 02 F6 | 	mov	arg02, local08
10a48     3C 4E 85 F1 | 	sub	fp, #60
10a4c     24 65 B1 FD | 	call	#__system___float_mul
10a50     18 FB 61 FC | 	wrlong	result1, local06
10a54     02 2E 06 F1 | 	add	local05, #2
10a58     10 2E 56 F2 | 	cmps	local05, #16 wc
10a5c     C0 FF 9F CD |  if_b	jmp	#LR__1363
10a60                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10a60     04 2E 06 F6 | 	mov	local05, #4
10a64                 | LR__1364
10a64     17 31 02 F6 | 	mov	local06, local05
10a68     02 30 66 F0 | 	shl	local06, #2
10a6c     3C 4E 05 F1 | 	add	fp, #60
10a70     A7 30 02 F1 | 	add	local06, fp
10a74     17 35 02 F6 | 	mov	local08, local05
10a78     02 34 86 F1 | 	sub	local08, #2
10a7c     02 34 66 F0 | 	shl	local08, #2
10a80     A7 34 02 F1 | 	add	local08, fp
10a84     1A 13 02 FB | 	rdlong	arg01, local08
10a88     1B 15 02 F6 | 	mov	arg02, local09
10a8c     3C 4E 85 F1 | 	sub	fp, #60
10a90     E0 64 B1 FD | 	call	#__system___float_mul
10a94     18 FB 61 FC | 	wrlong	result1, local06
10a98     02 2E 06 F1 | 	add	local05, #2
10a9c     0F 2E 56 F2 | 	cmps	local05, #15 wc
10aa0     C0 FF 9F CD |  if_b	jmp	#LR__1364
10aa4                 | LR__1365
10aa4                 | ' if harm(0)>=0 then ' synthesize with harmonics
10aa4     3C 4E 05 F1 | 	add	fp, #60
10aa8     A7 12 02 FB | 	rdlong	arg01, fp
10aac     3C 4E 85 F1 | 	sub	fp, #60
10ab0     00 14 06 F6 | 	mov	arg02, #0
10ab4     01 16 66 F6 | 	neg	arg03, #1
10ab8     BC 68 B1 FD | 	call	#__system___float_cmp
10abc     00 FA 55 F2 | 	cmps	result1, #0 wc
10ac0     DC 01 90 CD |  if_b	jmp	#LR__1370
10ac4                 | '   for i=0 to 1023
10ac4     00 2E 06 F6 | 	mov	local05, #0
10ac8                 | LR__1366
10ac8     00 38 06 F6 | 	mov	local10, #0
10acc                 | '     spl=0
10acc                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10acc     00 3A 06 F6 | 	mov	local11, #0
10ad0                 | LR__1367
10ad0     1D 31 02 F6 | 	mov	local06, local11
10ad4     02 30 66 F0 | 	shl	local06, #2
10ad8     A7 1A 02 F6 | 	mov	arg05, fp
10adc     3C 1A 06 F1 | 	add	arg05, #60
10ae0     0D 31 02 F1 | 	add	local06, arg05
10ae4     18 31 02 FB | 	rdlong	local06, local06
10ae8     87 E4 1D FF 
10aec     DB 37 06 F6 | 	mov	local09, ##1003032539
10af0     17 13 52 F6 | 	abs	arg01, local05 wc
10af4     1F 3C C6 C9 |  if_b	decod	local12, #31
10af8     00 3C 06 36 |  if_ae	mov	local12, #0
10afc     74 60 B1 FD | 	call	#__system___float_fromuns
10b00     1E FB 61 F5 | 	xor	result1, local12
10b04     FD 14 02 F6 | 	mov	arg02, result1
10b08     1B 13 02 F6 | 	mov	arg01, local09
10b0c     64 64 B1 FD | 	call	#__system___float_mul
10b10     FD 3E 02 F6 | 	mov	local13, result1
10b14     1D 13 02 F6 | 	mov	arg01, local11
10b18     01 12 06 F1 | 	add	arg01, #1
10b1c     09 13 52 F6 | 	abs	arg01, arg01 wc
10b20     1F 3C C6 C9 |  if_b	decod	local12, #31
10b24     00 3C 06 36 |  if_ae	mov	local12, #0
10b28     48 60 B1 FD | 	call	#__system___float_fromuns
10b2c     1E FB 61 F5 | 	xor	result1, local12
10b30     FD 14 02 F6 | 	mov	arg02, result1
10b34     1F 13 02 F6 | 	mov	arg01, local13
10b38     38 64 B1 FD | 	call	#__system___float_mul
10b3c     FD 12 02 F6 | 	mov	arg01, result1
10b40     48 6D B1 FD | 	call	#__system____builtin_sinf
10b44     FD 14 02 F6 | 	mov	arg02, result1
10b48     18 13 02 F6 | 	mov	arg01, local06
10b4c     24 64 B1 FD | 	call	#__system___float_mul
10b50     FD 14 02 F6 | 	mov	arg02, result1
10b54     1C 13 02 F6 | 	mov	arg01, local10
10b58     5C 60 B1 FD | 	call	#__system___float_add
10b5c     FD 38 02 F6 | 	mov	local10, result1
10b60     01 3A 06 F1 | 	add	local11, #1
10b64     10 3A 56 F2 | 	cmps	local11, #16 wc
10b68     64 FF 9F CD |  if_b	jmp	#LR__1367
10b6c                 | '     if abs(spl)>max then max=abs(spl)  
10b6c     1C 13 02 F6 | 	mov	arg01, local10
10b70     1F 12 06 F4 | 	bitl	arg01, #31
10b74     19 15 02 F6 | 	mov	arg02, local07
10b78     01 16 66 F6 | 	neg	arg03, #1
10b7c     F8 67 B1 FD | 	call	#__system___float_cmp
10b80     01 FA 55 F2 | 	cmps	result1, #1 wc
10b84     1F 38 06 34 |  if_ae	bitl	local10, #31
10b88     1C 33 02 36 |  if_ae	mov	local07, local10
10b8c     01 2E 06 F1 | 	add	local05, #1
10b90     02 00 00 FF 
10b94     00 2E 56 F2 | 	cmps	local05, ##1024 wc
10b98     2C FF 9F CD |  if_b	jmp	#LR__1366
10b9c                 | '   for i=0 to 1023
10b9c     00 2E 06 F6 | 	mov	local05, #0
10ba0                 | LR__1368
10ba0     00 38 06 F6 | 	mov	local10, #0
10ba4                 | '     spl=0
10ba4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10ba4     00 3A 06 F6 | 	mov	local11, #0
10ba8                 | LR__1369
10ba8     1D 3F 02 F6 | 	mov	local13, local11
10bac     02 3E 66 F0 | 	shl	local13, #2
10bb0     A7 36 02 F6 | 	mov	local09, fp
10bb4     3C 36 06 F1 | 	add	local09, #60
10bb8     1B 3F 02 F1 | 	add	local13, local09
10bbc     1F 31 02 FB | 	rdlong	local06, local13
10bc0     58 7F 23 FF 
10bc4     00 12 06 F6 | 	mov	arg01, ##1191096320
10bc8     19 15 02 F6 | 	mov	arg02, local07
10bcc     98 65 B1 FD | 	call	#__system___float_div
10bd0     FD 14 02 F6 | 	mov	arg02, result1
10bd4     18 13 02 F6 | 	mov	arg01, local06
10bd8     98 63 B1 FD | 	call	#__system___float_mul
10bdc     FD 30 02 F6 | 	mov	local06, result1
10be0     87 E4 1D FF 
10be4     DB 3F 06 F6 | 	mov	local13, ##1003032539
10be8     17 13 52 F6 | 	abs	arg01, local05 wc
10bec     1F 3C C6 C9 |  if_b	decod	local12, #31
10bf0     00 3C 06 36 |  if_ae	mov	local12, #0
10bf4     7C 5F B1 FD | 	call	#__system___float_fromuns
10bf8     1E FB 61 F5 | 	xor	result1, local12
10bfc     FD 14 02 F6 | 	mov	arg02, result1
10c00     1F 13 02 F6 | 	mov	arg01, local13
10c04     6C 63 B1 FD | 	call	#__system___float_mul
10c08     FD 3E 02 F6 | 	mov	local13, result1
10c0c     1D 13 02 F6 | 	mov	arg01, local11
10c10     01 12 06 F1 | 	add	arg01, #1
10c14     09 13 52 F6 | 	abs	arg01, arg01 wc
10c18     1F 3C C6 C9 |  if_b	decod	local12, #31
10c1c     00 3C 06 36 |  if_ae	mov	local12, #0
10c20     50 5F B1 FD | 	call	#__system___float_fromuns
10c24     1E FB 61 F5 | 	xor	result1, local12
10c28     FD 14 02 F6 | 	mov	arg02, result1
10c2c     1F 13 02 F6 | 	mov	arg01, local13
10c30     40 63 B1 FD | 	call	#__system___float_mul
10c34     FD 12 02 F6 | 	mov	arg01, result1
10c38     50 6C B1 FD | 	call	#__system____builtin_sinf
10c3c     FD 14 02 F6 | 	mov	arg02, result1
10c40     18 13 02 F6 | 	mov	arg01, local06
10c44     2C 63 B1 FD | 	call	#__system___float_mul
10c48     FD 14 02 F6 | 	mov	arg02, result1
10c4c     1C 13 02 F6 | 	mov	arg01, local10
10c50     64 5F B1 FD | 	call	#__system___float_add
10c54     FD 38 02 F6 | 	mov	local10, result1
10c58     01 3A 06 F1 | 	add	local11, #1
10c5c     10 3A 56 F2 | 	cmps	local11, #16 wc
10c60     44 FF 9F CD |  if_b	jmp	#LR__1369
10c64     16 3B 02 F6 | 	mov	local11, local04
10c68     0B 3A 66 F0 | 	shl	local11, #11
10c6c     17 3F 02 F6 | 	mov	local13, local05
10c70     01 3E 66 F0 | 	shl	local13, #1
10c74     1F 3B 02 F1 | 	add	local11, local13
10c78     1C 13 02 F6 | 	mov	arg01, local10
10c7c     01 14 06 F6 | 	mov	arg02, #1
10c80     7C 67 B1 FD | 	call	#__system___float_tointeger
10c84     FD 14 02 F6 | 	mov	arg02, result1
10c88     1D 13 02 F6 | 	mov	arg01, local11
10c8c     74 F0 B0 FD | 	call	#_psdpoke
10c90     01 2E 06 F1 | 	add	local05, #1
10c94     02 00 00 FF 
10c98     00 2E 56 F2 | 	cmps	local05, ##1024 wc
10c9c     00 FF 9F CD |  if_b	jmp	#LR__1368
10ca0                 | LR__1370
10ca0                 | LR__1371
10ca0     A7 F0 03 F6 | 	mov	ptra, fp
10ca4     B2 00 A0 FD | 	call	#popregs_
10ca8                 | _do_defsnd_ret
10ca8     2D 00 64 FD | 	ret
10cac                 | 
10cac                 | ' 
10cac                 | ' '-------------------- defsprite
10cac                 | ' 
10cac                 | ' sub do_defsprite
10cac                 | _do_defsprite
10cac     0C 4A 05 F6 | 	mov	COUNT_, #12
10cb0     A8 00 A0 FD | 	call	#pushregs_
10cb4     60 F0 07 F1 | 	add	ptra, #96
10cb8     84 C8 BF FD | 	call	#_pop
10cbc     FD 16 02 F6 | 	mov	arg03, result1
10cc0     FE 14 02 F6 | 	mov	arg02, result2
10cc4     FF 12 02 F6 | 	mov	arg01, result3
10cc8     30 4E 05 F1 | 	add	fp, #48
10ccc     A7 16 62 FC | 	wrlong	arg03, fp
10cd0     04 4E 05 F1 | 	add	fp, #4
10cd4     A7 14 62 FC | 	wrlong	arg02, fp
10cd8     04 4E 05 F1 | 	add	fp, #4
10cdc     A7 12 62 FC | 	wrlong	arg01, fp
10ce0     38 4E 85 F1 | 	sub	fp, #56
10ce4     58 C8 BF FD | 	call	#_pop
10ce8     FD 16 02 F6 | 	mov	arg03, result1
10cec     FE 14 02 F6 | 	mov	arg02, result2
10cf0     FF 12 02 F6 | 	mov	arg01, result3
10cf4     24 4E 05 F1 | 	add	fp, #36
10cf8     A7 16 62 FC | 	wrlong	arg03, fp
10cfc     04 4E 05 F1 | 	add	fp, #4
10d00     A7 14 62 FC | 	wrlong	arg02, fp
10d04     04 4E 05 F1 | 	add	fp, #4
10d08     A7 12 62 FC | 	wrlong	arg01, fp
10d0c     2C 4E 85 F1 | 	sub	fp, #44
10d10     2C C8 BF FD | 	call	#_pop
10d14     FD 16 02 F6 | 	mov	arg03, result1
10d18     FE 14 02 F6 | 	mov	arg02, result2
10d1c     FF 12 02 F6 | 	mov	arg01, result3
10d20     18 4E 05 F1 | 	add	fp, #24
10d24     A7 16 62 FC | 	wrlong	arg03, fp
10d28     04 4E 05 F1 | 	add	fp, #4
10d2c     A7 14 62 FC | 	wrlong	arg02, fp
10d30     04 4E 05 F1 | 	add	fp, #4
10d34     A7 12 62 FC | 	wrlong	arg01, fp
10d38     20 4E 85 F1 | 	sub	fp, #32
10d3c     00 C8 BF FD | 	call	#_pop
10d40     FD 16 02 F6 | 	mov	arg03, result1
10d44     FE 14 02 F6 | 	mov	arg02, result2
10d48     FF 12 02 F6 | 	mov	arg01, result3
10d4c     0C 4E 05 F1 | 	add	fp, #12
10d50     A7 16 62 FC | 	wrlong	arg03, fp
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 14 62 FC | 	wrlong	arg02, fp
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 12 62 FC | 	wrlong	arg01, fp
10d64     14 4E 85 F1 | 	sub	fp, #20
10d68     D4 C7 BF FD | 	call	#_pop
10d6c     FF 16 02 F6 | 	mov	arg03, result3
10d70     A7 FA 61 FC | 	wrlong	result1, fp
10d74     04 4E 05 F1 | 	add	fp, #4
10d78     A7 FC 61 FC | 	wrlong	result2, fp
10d7c     04 4E 05 F1 | 	add	fp, #4
10d80     A7 16 62 FC | 	wrlong	arg03, fp
10d84     08 4E 85 F1 | 	sub	fp, #8
10d88     A7 12 02 F6 | 	mov	arg01, fp
10d8c     8C C9 BF FD | 	call	#_converttoint
10d90     FD 26 02 F6 | 	mov	local01, result1
10d94     A7 12 02 F6 | 	mov	arg01, fp
10d98     0C 12 06 F1 | 	add	arg01, #12
10d9c     7C C9 BF FD | 	call	#_converttoint
10da0     FD 28 02 F6 | 	mov	local02, result1
10da4     A7 12 02 F6 | 	mov	arg01, fp
10da8     18 12 06 F1 | 	add	arg01, #24
10dac     6C C9 BF FD | 	call	#_converttoint
10db0     FD 2A 02 F6 | 	mov	local03, result1
10db4     A7 12 02 F6 | 	mov	arg01, fp
10db8     24 12 06 F1 | 	add	arg01, #36
10dbc     5C C9 BF FD | 	call	#_converttoint
10dc0     FD 2C 02 F6 | 	mov	local04, result1
10dc4     A7 12 02 F6 | 	mov	arg01, fp
10dc8     30 12 06 F1 | 	add	arg01, #48
10dcc     4C C9 BF FD | 	call	#_converttoint
10dd0     FD 2E 02 F6 | 	mov	local05, result1
10dd4                 | ' 
10dd4                 | ' t5=pop()
10dd4                 | ' t4=pop()
10dd4                 | ' t3=pop()
10dd4                 | ' t2=pop()
10dd4                 | ' t1=pop()
10dd4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10dd4                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10dd4     13 17 02 F6 | 	mov	arg03, local01
10dd8     02 16 66 F0 | 	shl	arg03, #2
10ddc     F2 30 02 F6 | 	mov	local06, objptr
10de0     52 00 00 FF 
10de4     AC 30 06 F1 | 	add	local06, ##42156
10de8     18 17 02 F1 | 	add	arg03, local06
10dec     0B 33 0A FB | 	rdlong	local07, arg03 wz
10df0     13 31 02 56 |  if_ne	mov	local06, local01
10df4     02 30 66 50 |  if_ne	shl	local06, #2
10df8     F2 32 02 56 |  if_ne	mov	local07, objptr
10dfc     52 00 00 5F 
10e00     AC 32 06 51 |  if_ne	add	local07, ##42156
10e04     19 31 02 51 |  if_ne	add	local06, local07
10e08     18 13 02 5B |  if_ne	rdlong	arg01, local06
10e0c     90 74 B1 5D |  if_ne	call	#__system___gc_free
10e10     17 2D 02 FD | 	qmul	local04, local05
10e14     13 35 02 F6 | 	mov	local08, local01
10e18     02 34 66 F0 | 	shl	local08, #2
10e1c     F2 30 02 F6 | 	mov	local06, objptr
10e20     52 00 00 FF 
10e24     AC 30 06 F1 | 	add	local06, ##42156
10e28     18 35 02 F1 | 	add	local08, local06
10e2c     18 12 62 FD | 	getqx	arg01
10e30     38 73 B1 FD | 	call	#__system___gc_alloc_managed
10e34     1A FB 61 FC | 	wrlong	result1, local08
10e38                 | ' for y=a3 to a3+a5-1
10e38     15 37 02 F6 | 	mov	local09, local03
10e3c     15 39 02 F6 | 	mov	local10, local03
10e40     17 39 02 F1 | 	add	local10, local05
10e44                 | LR__1380
10e44     1C 37 52 F2 | 	cmps	local09, local10 wc
10e48     7C 00 90 3D |  if_ae	jmp	#LR__1383
10e4c                 | '   for x=a2 to a4+a2-1
10e4c     14 3B 02 F6 | 	mov	local11, local02
10e50     16 3D 02 F6 | 	mov	local12, local04
10e54     14 3D 02 F1 | 	add	local12, local02
10e58                 | LR__1381
10e58     1E 3B 52 F2 | 	cmps	local11, local12 wc
10e5c     60 00 90 3D |  if_ae	jmp	#LR__1382
10e60     1B 35 02 F6 | 	mov	local08, local09
10e64     15 35 82 F1 | 	sub	local08, local03
10e68     16 35 02 FD | 	qmul	local08, local04
10e6c     13 35 02 F6 | 	mov	local08, local01
10e70     02 34 66 F0 | 	shl	local08, #2
10e74     F2 30 02 F6 | 	mov	local06, objptr
10e78     52 00 00 FF 
10e7c     AC 30 06 F1 | 	add	local06, ##42156
10e80     18 35 02 F1 | 	add	local08, local06
10e84     1A 35 02 FB | 	rdlong	local08, local08
10e88     1D 33 02 F6 | 	mov	local07, local11
10e8c     14 33 82 F1 | 	sub	local07, local02
10e90     F2 12 02 FB | 	rdlong	arg01, objptr
10e94     1D 13 02 F1 | 	add	arg01, local11
10e98     1B 31 02 F6 | 	mov	local06, local09
10e9c     0A 30 66 F0 | 	shl	local06, #10
10ea0     18 13 02 F1 | 	add	arg01, local06
10ea4     18 30 62 FD | 	getqx	local06
10ea8     18 33 02 F1 | 	add	local07, local06
10eac     1A 33 02 F1 | 	add	local07, local08
10eb0     E0 EE B0 FD | 	call	#_pspeek
10eb4     19 FB 41 FC | 	wrbyte	result1, local07
10eb8     01 3A 06 F1 | 	add	local11, #1
10ebc     98 FF 9F FD | 	jmp	#LR__1381
10ec0                 | LR__1382
10ec0     01 36 06 F1 | 	add	local09, #1
10ec4     7C FF 9F FD | 	jmp	#LR__1380
10ec8                 | LR__1383
10ec8     13 33 02 F6 | 	mov	local07, local01
10ecc     02 32 66 F0 | 	shl	local07, #2
10ed0     F2 3C 02 F6 | 	mov	local12, objptr
10ed4     52 00 00 FF 
10ed8     AC 3C 06 F1 | 	add	local12, ##42156
10edc     1E 33 02 F1 | 	add	local07, local12
10ee0     19 15 02 FB | 	rdlong	arg02, local07
10ee4     13 13 02 F6 | 	mov	arg01, local01
10ee8     DC 22 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10eec     13 13 02 F6 | 	mov	arg01, local01
10ef0     16 15 02 F6 | 	mov	arg02, local04
10ef4     17 17 02 F6 | 	mov	arg03, local05
10ef8     58 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
10efc     A7 F0 03 F6 | 	mov	ptra, fp
10f00     B2 00 A0 FD | 	call	#popregs_
10f04                 | _do_defsprite_ret
10f04     2D 00 64 FD | 	ret
10f08                 | 
10f08                 | ' 
10f08                 | ' '-------------------- deg
10f08                 | ' 
10f08                 | ' sub do_deg
10f08                 | _do_deg
10f08     52 00 00 FF 
10f0c     00 E5 05 F1 | 	add	objptr, ##42240
10f10     7D 47 9E FF 
10f14     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10f18     04 E4 05 F1 | 	add	objptr, #4
10f1c     97 32 A1 FF 
10f20     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10f24     52 00 00 FF 
10f28     04 E5 85 F1 | 	sub	objptr, ##42244
10f2c                 | _do_deg_ret
10f2c     2D 00 64 FD | 	ret
10f30                 | 
10f30                 | ' 
10f30                 | ' '-------------------- delete
10f30                 | ' 
10f30                 | ' sub do_delete
10f30                 | _do_delete
10f30     09 4A 05 F6 | 	mov	COUNT_, #9
10f34     A8 00 A0 FD | 	call	#pushregs_
10f38     04 C6 BF FD | 	call	#_pop
10f3c     FE 18 02 F6 | 	mov	arg04, result2
10f40     FF 16 02 F6 | 	mov	arg03, result3
10f44     FD 26 02 F6 | 	mov	local01, result1
10f48     0C 29 02 F6 | 	mov	local02, arg04
10f4c     0B 2B 02 F6 | 	mov	local03, arg03
10f50                 | ' 
10f50                 | ' t1=pop()
10f50                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10f50     2B 2A 0E F2 | 	cmp	local03, #43 wz
10f54     10 00 90 5D |  if_ne	jmp	#LR__1390
10f58     13 13 02 F6 | 	mov	arg01, local01
10f5c     50 C7 BF FD | 	call	#_convertstring
10f60     FD 26 02 F6 | 	mov	local01, result1
10f64     1F 2A 06 F6 | 	mov	local03, #31
10f68                 | LR__1390
10f68                 | ' if t1.result_type<>result_string then printerror(15): return
10f68     1F 2A 0E F2 | 	cmp	local03, #31 wz
10f6c     10 00 90 AD |  if_e	jmp	#LR__1391
10f70     0F 12 06 F6 | 	mov	arg01, #15
10f74     00 14 06 F6 | 	mov	arg02, #0
10f78     A4 EC B0 FD | 	call	#_printerror
10f7c     B4 01 90 FD | 	jmp	#LR__1400
10f80                 | LR__1391
10f80                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f80     4A 00 00 FF 
10f84     B4 E4 05 F1 | 	add	objptr, ##38068
10f88     F2 12 02 FB | 	rdlong	arg01, objptr
10f8c     4A 00 00 FF 
10f90     B4 E4 85 F1 | 	sub	objptr, ##38068
10f94     92 01 00 FF 
10f98     A1 14 06 F6 | 	mov	arg02, ##@LR__5593
10f9c     30 41 B1 FD | 	call	#__system___string_cmp
10fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
10fa4     34 00 90 AD |  if_e	jmp	#LR__1392
10fa8     4A 00 00 FF 
10fac     B4 E4 05 F1 | 	add	objptr, ##38068
10fb0     F2 12 02 FB | 	rdlong	arg01, objptr
10fb4     4A 00 00 FF 
10fb8     B4 E4 85 F1 | 	sub	objptr, ##38068
10fbc     92 01 00 FF 
10fc0     A3 14 06 F6 | 	mov	arg02, ##@LR__5594
10fc4     3C 41 B1 FD | 	call	#__system___string_concat
10fc8     FD 12 02 F6 | 	mov	arg01, result1
10fcc     13 15 02 F6 | 	mov	arg02, local01
10fd0     30 41 B1 FD | 	call	#__system___string_concat
10fd4     FD 2C 02 F6 | 	mov	local04, result1
10fd8     14 00 90 FD | 	jmp	#LR__1393
10fdc                 | LR__1392
10fdc     92 01 00 FF 
10fe0     A5 12 06 F6 | 	mov	arg01, ##@LR__5595
10fe4     13 15 02 F6 | 	mov	arg02, local01
10fe8     18 41 B1 FD | 	call	#__system___string_concat
10fec     FD 2C 02 F6 | 	mov	local04, result1
10ff0                 | LR__1393
10ff0     F3 2E 02 F6 | 	mov	local05, ptr___system__dat__
10ff4     84 2F 06 F1 | 	add	local05, #388
10ff8     16 15 02 F6 | 	mov	arg02, local04
10ffc     17 13 02 F6 | 	mov	arg01, local05
11000     00 16 06 F6 | 	mov	arg03, #0
11004     C8 44 B1 FD | 	call	#__system____getvfsforfile
11008     FD 30 0A F6 | 	mov	local06, result1 wz
1100c     10 00 90 AD |  if_e	jmp	#LR__1394
11010     20 30 06 F1 | 	add	local06, #32
11014     18 13 0A FB | 	rdlong	arg01, local06 wz
11018     20 30 86 F1 | 	sub	local06, #32
1101c     10 00 90 5D |  if_ne	jmp	#LR__1395
11020                 | LR__1394
11020     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11024     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
11028     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1102c     98 00 90 FD | 	jmp	#LR__1398
11030                 | LR__1395
11030     40 30 06 F1 | 	add	local06, #64
11034     18 2D 02 FB | 	rdlong	local04, local06
11038     16 33 02 F6 | 	mov	local07, local04
1103c     40 30 86 F1 | 	sub	local06, #64
11040     13 32 46 F7 | 	zerox	local07, #19
11044     14 2C 46 F0 | 	shr	local04, #20
11048     02 2C 66 F0 | 	shl	local04, #2
1104c     ED 2C 02 F1 | 	add	local04, __methods__
11050     16 2D 02 FB | 	rdlong	local04, local04
11054     17 13 02 F6 | 	mov	arg01, local05
11058     F2 26 02 F6 | 	mov	local01, objptr
1105c     19 E5 01 F6 | 	mov	objptr, local07
11060     2D 2C 62 FD | 	call	local04
11064     13 E5 01 F6 | 	mov	objptr, local01
11068     FD 34 02 F6 | 	mov	local08, result1
1106c     FF FF 7F FF 
11070     F2 35 0E F2 | 	cmp	local08, ##-14 wz
11074     38 00 90 5D |  if_ne	jmp	#LR__1396
11078     3C 30 06 F1 | 	add	local06, #60
1107c     18 35 02 FB | 	rdlong	local08, local06
11080     1A 33 02 F6 | 	mov	local07, local08
11084     13 34 46 F7 | 	zerox	local08, #19
11088     14 32 46 F0 | 	shr	local07, #20
1108c     02 32 66 F0 | 	shl	local07, #2
11090     ED 32 02 F1 | 	add	local07, __methods__
11094     19 33 02 FB | 	rdlong	local07, local07
11098     17 13 02 F6 | 	mov	arg01, local05
1109c     F2 30 02 F6 | 	mov	local06, objptr
110a0     1A E5 01 F6 | 	mov	objptr, local08
110a4     2D 32 62 FD | 	call	local07
110a8     18 E5 01 F6 | 	mov	objptr, local06
110ac     FD 34 02 F6 | 	mov	local08, result1
110b0                 | LR__1396
110b0     00 34 0E F2 | 	cmp	local08, #0 wz
110b4     10 00 90 AD |  if_e	jmp	#LR__1397
110b8     1A 13 6A F6 | 	neg	arg01, local08 wz
110bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
110c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
110c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
110c8                 | LR__1397
110c8                 | LR__1398
110c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
110cc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
110d0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
110d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
110d8     FD 36 0A F6 | 	mov	local09, result1 wz
110dc                 | ' kill filename$
110dc                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
110dc     54 00 90 AD |  if_e	jmp	#LR__1399
110e0     00 12 06 F6 | 	mov	arg01, #0
110e4     AC 8A B1 FD | 	call	#__system___getiolock_0622
110e8     FD 12 02 F6 | 	mov	arg01, result1
110ec     B8 3F B1 FD | 	call	#__system___lockmem
110f0     92 01 00 FF 
110f4     A7 14 06 F6 | 	mov	arg02, ##@LR__5596
110f8     00 12 06 F6 | 	mov	arg01, #0
110fc     00 16 06 F6 | 	mov	arg03, #0
11100     C4 47 B1 FD | 	call	#__system___basic_print_string
11104     00 12 06 F6 | 	mov	arg01, #0
11108     1B 15 02 F6 | 	mov	arg02, local09
1110c     00 16 06 F6 | 	mov	arg03, #0
11110     0A 18 06 F6 | 	mov	arg04, #10
11114     F4 47 B1 FD | 	call	#__system___basic_print_integer
11118     00 12 06 F6 | 	mov	arg01, #0
1111c     0A 14 06 F6 | 	mov	arg02, #10
11120     00 16 06 F6 | 	mov	arg03, #0
11124     48 47 B1 FD | 	call	#__system___basic_print_char
11128     00 12 06 F6 | 	mov	arg01, #0
1112c     64 8A B1 FD | 	call	#__system___getiolock_0622
11130     FD 00 68 FC | 	wrlong	#0, result1
11134                 | LR__1399
11134                 | LR__1400
11134     A7 F0 03 F6 | 	mov	ptra, fp
11138     B2 00 A0 FD | 	call	#popregs_
1113c                 | _do_delete_ret
1113c     2D 00 64 FD | 	ret
11140                 | 
11140                 | ' 
11140                 | ' '-------------------- dir
11140                 | ' 
11140                 | ' sub do_dir
11140                 | _do_dir
11140     13 4A 05 F6 | 	mov	COUNT_, #19
11144     A8 00 A0 FD | 	call	#pushregs_
11148     01 00 00 FF 
1114c     38 F0 07 F1 | 	add	ptra, ##568
11150                 | ' 
11150                 | ' print "Current directory: "; currentdir$ 
11150     00 12 06 F6 | 	mov	arg01, #0
11154     3C 8A B1 FD | 	call	#__system___getiolock_0622
11158     FD 12 02 F6 | 	mov	arg01, result1
1115c     48 3F B1 FD | 	call	#__system___lockmem
11160     92 01 00 FF 
11164     DF 14 06 F6 | 	mov	arg02, ##@LR__5597
11168     00 12 06 F6 | 	mov	arg01, #0
1116c     00 16 06 F6 | 	mov	arg03, #0
11170     54 47 B1 FD | 	call	#__system___basic_print_string
11174     4A 00 00 FF 
11178     B4 E4 05 F1 | 	add	objptr, ##38068
1117c     F2 14 02 FB | 	rdlong	arg02, objptr
11180     4A 00 00 FF 
11184     B4 E4 85 F1 | 	sub	objptr, ##38068
11188     00 12 06 F6 | 	mov	arg01, #0
1118c     00 16 06 F6 | 	mov	arg03, #0
11190     34 47 B1 FD | 	call	#__system___basic_print_string
11194     00 12 06 F6 | 	mov	arg01, #0
11198     0A 14 06 F6 | 	mov	arg02, #10
1119c     00 16 06 F6 | 	mov	arg03, #0
111a0     CC 46 B1 FD | 	call	#__system___basic_print_char
111a4     01 26 06 F6 | 	mov	local01, #1
111a8     00 12 06 F6 | 	mov	arg01, #0
111ac     E4 89 B1 FD | 	call	#__system___getiolock_0622
111b0     FD 00 68 FC | 	wrlong	#0, result1
111b4     00 28 06 F6 | 	mov	local02, #0
111b8     00 2A 06 F6 | 	mov	local03, #0
111bc                 | ' px=0
111bc                 | ' for i=0 to 127: filelist(i)="" : next i
111bc     00 2C 06 F6 | 	mov	local04, #0
111c0     1C 4E 05 F1 | 	add	fp, #28
111c4     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
111c8                 | LR__1410
111c8     16 2F 02 F6 | 	mov	local05, local04
111cc     02 2E 66 F0 | 	shl	local05, #2
111d0     A7 2E 02 F1 | 	add	local05, fp
111d4     92 01 00 FF 
111d8     F3 30 06 F6 | 	mov	local06, ##@LR__5598
111dc     17 31 62 FC | 	wrlong	local06, local05
111e0     01 2C 06 F1 | 	add	local04, #1
111e4     80 2C 56 F2 | 	cmps	local04, #128 wc
111e8     DC FF 9F CD |  if_b	jmp	#LR__1410
111ec                 | LR__1411
111ec     1C 4E 85 F1 | 	sub	fp, #28
111f0     92 01 00 FF 
111f4     F4 12 06 F6 | 	mov	arg01, ##@LR__5599
111f8     10 14 06 F6 | 	mov	arg02, #16
111fc     4C 8B B1 FD | 	call	#__system___basic_dir
11200     FD 32 02 F6 | 	mov	local07, result1
11204     00 34 06 F6 | 	mov	local08, #0
11208                 | ' filename=dir$("*", fbDirectory)
11208                 | ' n=0
11208                 | ' while filename <> "" andalso filename <> nil andalso n<128
11208                 | LR__1412
11208     92 01 00 FF 
1120c     F6 36 06 F6 | 	mov	local09, ##@LR__5600
11210     19 13 02 F6 | 	mov	arg01, local07
11214     1B 15 02 F6 | 	mov	arg02, local09
11218     B4 3E B1 FD | 	call	#__system___string_cmp
1121c     00 FA 0D F2 | 	cmp	result1, #0 wz
11220     68 00 90 AD |  if_e	jmp	#LR__1413
11224     00 36 06 F6 | 	mov	local09, #0
11228     19 13 02 F6 | 	mov	arg01, local07
1122c     00 14 06 F6 | 	mov	arg02, #0
11230     9C 3E B1 FD | 	call	#__system___string_cmp
11234     00 FA 0D F2 | 	cmp	result1, #0 wz
11238     50 00 90 AD |  if_e	jmp	#LR__1413
1123c     80 34 56 F2 | 	cmps	local08, #128 wc
11240     48 00 90 3D |  if_ae	jmp	#LR__1413
11244     92 01 00 FF 
11248     F7 12 06 F6 | 	mov	arg01, ##@LR__5601
1124c     19 15 02 F6 | 	mov	arg02, local07
11250     B0 3E B1 FD | 	call	#__system___string_concat
11254     FD 32 02 F6 | 	mov	local07, result1
11258     1A 2F 02 F6 | 	mov	local05, local08
1125c     02 2E 66 F0 | 	shl	local05, #2
11260     A7 36 02 F6 | 	mov	local09, fp
11264     1C 36 06 F1 | 	add	local09, #28
11268     1B 2F 02 F1 | 	add	local05, local09
1126c     17 33 62 FC | 	wrlong	local07, local05
11270     01 34 06 F1 | 	add	local08, #1
11274     00 2E 06 F6 | 	mov	local05, #0
11278     00 12 06 F6 | 	mov	arg01, #0
1127c     00 14 06 F6 | 	mov	arg02, #0
11280     C8 8A B1 FD | 	call	#__system___basic_dir
11284     FD 32 02 F6 | 	mov	local07, result1
11288     7C FF 9F FD | 	jmp	#LR__1412
1128c                 | LR__1413
1128c                 | ' for i=0 to n-1			' now sort this
1128c     00 2C 06 F6 | 	mov	local04, #0
11290     1A 39 02 F6 | 	mov	local10, local08
11294                 | LR__1414
11294     1C 2D 52 F2 | 	cmps	local04, local10 wc
11298     DC 00 90 3D |  if_ae	jmp	#LR__1418
1129c     00 3A 06 F6 | 	mov	local11, #0
112a0                 | '   swapped=false
112a0                 | '   for j=0 to n-i-2
112a0     00 3C 06 F6 | 	mov	local12, #0
112a4     1A 3F 02 F6 | 	mov	local13, local08
112a8     16 3F 82 F1 | 	sub	local13, local04
112ac     01 3E 86 F1 | 	sub	local13, #1
112b0                 | LR__1415
112b0     1F 3D 52 F2 | 	cmps	local12, local13 wc
112b4     B0 00 90 3D |  if_ae	jmp	#LR__1417
112b8                 | '     if filelist(j) > filelist(j+1) then
112b8     1E 37 02 F6 | 	mov	local09, local12
112bc     02 36 66 F0 | 	shl	local09, #2
112c0     1C 4E 05 F1 | 	add	fp, #28
112c4     A7 36 02 F1 | 	add	local09, fp
112c8     1B 13 02 FB | 	rdlong	arg01, local09
112cc     1E 37 02 F6 | 	mov	local09, local12
112d0     01 36 06 F1 | 	add	local09, #1
112d4     1B 31 02 F6 | 	mov	local06, local09
112d8     02 30 66 F0 | 	shl	local06, #2
112dc     A7 26 02 F6 | 	mov	local01, fp
112e0     A7 30 02 F1 | 	add	local06, fp
112e4     18 2F 02 FB | 	rdlong	local05, local06
112e8     17 15 02 F6 | 	mov	arg02, local05
112ec     1C 4E 85 F1 | 	sub	fp, #28
112f0     DC 3D B1 FD | 	call	#__system___string_cmp
112f4     01 FA 55 F2 | 	cmps	result1, #1 wc
112f8     64 00 90 CD |  if_b	jmp	#LR__1416
112fc     1E 37 02 F6 | 	mov	local09, local12
11300     01 36 06 F1 | 	add	local09, #1
11304     02 36 66 F0 | 	shl	local09, #2
11308     1C 4E 05 F1 | 	add	fp, #28
1130c     A7 36 02 F1 | 	add	local09, fp
11310     1B 3B 02 FB | 	rdlong	local11, local09
11314     1E 31 02 F6 | 	mov	local06, local12
11318     02 30 66 F0 | 	shl	local06, #2
1131c     A7 30 02 F1 | 	add	local06, fp
11320     18 2F 02 FB | 	rdlong	local05, local06
11324     1E 37 02 F6 | 	mov	local09, local12
11328     1B 31 02 F6 | 	mov	local06, local09
1132c     02 30 66 F0 | 	shl	local06, #2
11330     A7 26 02 F6 | 	mov	local01, fp
11334     A7 30 02 F1 | 	add	local06, fp
11338     18 3B 62 FC | 	wrlong	local11, local06
1133c     1E 29 02 F6 | 	mov	local02, local12
11340     01 28 06 F1 | 	add	local02, #1
11344     14 41 02 F6 | 	mov	local14, local02
11348     02 40 66 F0 | 	shl	local14, #2
1134c     A7 42 02 F6 | 	mov	local15, fp
11350     A7 40 02 F1 | 	add	local14, fp
11354     20 2F 62 FC | 	wrlong	local05, local14
11358     01 3A 66 F6 | 	neg	local11, #1
1135c     1C 4E 85 F1 | 	sub	fp, #28
11360                 | LR__1416
11360     01 3C 06 F1 | 	add	local12, #1
11364     48 FF 9F FD | 	jmp	#LR__1415
11368                 | LR__1417
11368                 | ' if not swapped then exit for
11368     1D 45 22 F6 | 	not	local16, local11
1136c     00 44 0E F2 | 	cmp	local16, #0 wz
11370     01 2C 06 A1 |  if_e	add	local04, #1
11374     1C FF 9F AD |  if_e	jmp	#LR__1414
11378                 | LR__1418
11378                 | ' for i=0 to n-1
11378     00 2C 06 F6 | 	mov	local04, #0
1137c     1A 47 02 F6 | 	mov	local17, local08
11380                 | LR__1419
11380     23 2D 52 F2 | 	cmps	local04, local17 wc
11384     90 00 90 3D |  if_ae	jmp	#LR__1421
11388                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11388     00 12 06 F6 | 	mov	arg01, #0
1138c     04 88 B1 FD | 	call	#__system___getiolock_0622
11390     FD 12 02 F6 | 	mov	arg01, result1
11394     10 3D B1 FD | 	call	#__system___lockmem
11398     16 29 02 F6 | 	mov	local02, local04
1139c     02 28 66 F0 | 	shl	local02, #2
113a0     A7 40 02 F6 | 	mov	local14, fp
113a4     1C 40 06 F1 | 	add	local14, #28
113a8     20 29 02 F1 | 	add	local02, local14
113ac     14 15 02 FB | 	rdlong	arg02, local02
113b0     00 26 06 F6 | 	mov	local01, #0
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     00 16 06 F6 | 	mov	arg03, #0
113bc     08 45 B1 FD | 	call	#__system___basic_print_string
113c0     00 12 06 F6 | 	mov	arg01, #0
113c4     CC 87 B1 FD | 	call	#__system___getiolock_0622
113c8     FD 00 68 FC | 	wrlong	#0, result1
113cc     40 2A 06 F1 | 	add	local03, #64
113d0     15 13 02 F6 | 	mov	arg01, local03
113d4     88 26 B1 FD | 	call	#_hg010b_spin2_setcursorx
113d8     00 2B 56 F2 | 	cmps	local03, #256 wc
113dc     30 00 90 CD |  if_b	jmp	#LR__1420
113e0     00 2A 06 F6 | 	mov	local03, #0
113e4     00 12 06 F6 | 	mov	arg01, #0
113e8     A8 87 B1 FD | 	call	#__system___getiolock_0622
113ec     FD 12 02 F6 | 	mov	arg01, result1
113f0     B4 3C B1 FD | 	call	#__system___lockmem
113f4     00 12 06 F6 | 	mov	arg01, #0
113f8     0A 14 06 F6 | 	mov	arg02, #10
113fc     00 16 06 F6 | 	mov	arg03, #0
11400     6C 44 B1 FD | 	call	#__system___basic_print_char
11404     00 12 06 F6 | 	mov	arg01, #0
11408     88 87 B1 FD | 	call	#__system___getiolock_0622
1140c     FD 00 68 FC | 	wrlong	#0, result1
11410                 | LR__1420
11410     01 2C 06 F1 | 	add	local04, #1
11414     68 FF 9F FD | 	jmp	#LR__1419
11418                 | LR__1421
11418                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11418     80 34 56 F2 | 	cmps	local08, #128 wc
1141c     44 00 90 CD |  if_b	jmp	#LR__1422
11420     00 12 06 F6 | 	mov	arg01, #0
11424     6C 87 B1 FD | 	call	#__system___getiolock_0622
11428     FD 12 02 F6 | 	mov	arg01, result1
1142c     78 3C B1 FD | 	call	#__system___lockmem
11430     92 01 00 FF 
11434     FE 14 06 F6 | 	mov	arg02, ##@LR__5602
11438     00 12 06 F6 | 	mov	arg01, #0
1143c     00 16 06 F6 | 	mov	arg03, #0
11440     84 44 B1 FD | 	call	#__system___basic_print_string
11444     00 12 06 F6 | 	mov	arg01, #0
11448     0A 14 06 F6 | 	mov	arg02, #10
1144c     00 16 06 F6 | 	mov	arg03, #0
11450     1C 44 B1 FD | 	call	#__system___basic_print_char
11454     00 12 06 F6 | 	mov	arg01, #0
11458     38 87 B1 FD | 	call	#__system___getiolock_0622
1145c     FD 00 68 FC | 	wrlong	#0, result1
11460     00 26 06 F6 | 	mov	local01, #0
11464                 | LR__1422
11464                 | ' print
11464     00 12 06 F6 | 	mov	arg01, #0
11468     28 87 B1 FD | 	call	#__system___getiolock_0622
1146c     FD 12 02 F6 | 	mov	arg01, result1
11470     34 3C B1 FD | 	call	#__system___lockmem
11474     00 12 06 F6 | 	mov	arg01, #0
11478     0A 14 06 F6 | 	mov	arg02, #10
1147c     00 16 06 F6 | 	mov	arg03, #0
11480     EC 43 B1 FD | 	call	#__system___basic_print_char
11484     00 12 06 F6 | 	mov	arg01, #0
11488     08 87 B1 FD | 	call	#__system___getiolock_0622
1148c     FD 00 68 FC | 	wrlong	#0, result1
11490     00 30 06 F6 | 	mov	local06, #0
11494     00 34 06 F6 | 	mov	local08, #0
11498     00 2A 06 F6 | 	mov	local03, #0
1149c                 | ' return cursor_y
1149c     3E E4 05 F1 | 	add	objptr, #62
114a0     F2 48 C2 FA | 	rdbyte	local18, objptr
114a4     3E E4 85 F1 | 	sub	objptr, #62
114a8     92 01 00 FF 
114ac     30 13 06 F6 | 	mov	arg01, ##@LR__5603
114b0     21 14 06 F6 | 	mov	arg02, #33
114b4     94 88 B1 FD | 	call	#__system___basic_dir
114b8     FD 32 02 F6 | 	mov	local07, result1
114bc                 | ' n=0
114bc                 | ' px=0: py=v.getcursory()
114bc                 | ' filename = dir$("*", fbNormal )   
114bc                 | ' do while filename <> "" andalso filename <> nil andalso n<128
114bc                 | LR__1423
114bc     92 01 00 FF 
114c0     32 37 06 F6 | 	mov	local09, ##@LR__5604
114c4     19 13 02 F6 | 	mov	arg01, local07
114c8     1B 15 02 F6 | 	mov	arg02, local09
114cc     00 3C B1 FD | 	call	#__system___string_cmp
114d0     00 FA 0D F2 | 	cmp	result1, #0 wz
114d4     54 00 90 AD |  if_e	jmp	#LR__1424
114d8     00 36 06 F6 | 	mov	local09, #0
114dc     19 13 02 F6 | 	mov	arg01, local07
114e0     00 14 06 F6 | 	mov	arg02, #0
114e4     E8 3B B1 FD | 	call	#__system___string_cmp
114e8     00 FA 0D F2 | 	cmp	result1, #0 wz
114ec     3C 00 90 AD |  if_e	jmp	#LR__1424
114f0     80 34 56 F2 | 	cmps	local08, #128 wc
114f4     34 00 90 3D |  if_ae	jmp	#LR__1424
114f8     1A 2F 02 F6 | 	mov	local05, local08
114fc     02 2E 66 F0 | 	shl	local05, #2
11500     A7 36 02 F6 | 	mov	local09, fp
11504     1C 36 06 F1 | 	add	local09, #28
11508     1B 2F 02 F1 | 	add	local05, local09
1150c     17 33 62 FC | 	wrlong	local07, local05
11510     01 34 06 F1 | 	add	local08, #1
11514     00 2E 06 F6 | 	mov	local05, #0
11518     00 12 06 F6 | 	mov	arg01, #0
1151c     00 14 06 F6 | 	mov	arg02, #0
11520     28 88 B1 FD | 	call	#__system___basic_dir
11524     FD 32 02 F6 | 	mov	local07, result1
11528     90 FF 9F FD | 	jmp	#LR__1423
1152c                 | LR__1424
1152c                 | ' for i =0 to n-1
1152c     00 2C 06 F6 | 	mov	local04, #0
11530                 | LR__1425
11530     1A 2D 52 F2 | 	cmps	local04, local08 wc
11534     D8 00 90 3D |  if_ae	jmp	#LR__1429
11538     00 3A 06 F6 | 	mov	local11, #0
1153c                 | '   swapped=false
1153c                 | '   for j=0 to n-i-2
1153c     00 3C 06 F6 | 	mov	local12, #0
11540     1A 4B 02 F6 | 	mov	local19, local08
11544     16 4B 82 F1 | 	sub	local19, local04
11548     01 4A 86 F1 | 	sub	local19, #1
1154c                 | LR__1426
1154c     25 3D 52 F2 | 	cmps	local12, local19 wc
11550     AC 00 90 3D |  if_ae	jmp	#LR__1428
11554                 | '     if filelist(j) > filelist(j+1) then
11554     1E 37 02 F6 | 	mov	local09, local12
11558     02 36 66 F0 | 	shl	local09, #2
1155c     1C 4E 05 F1 | 	add	fp, #28
11560     A7 36 02 F1 | 	add	local09, fp
11564     1B 13 02 FB | 	rdlong	arg01, local09
11568     1E 37 02 F6 | 	mov	local09, local12
1156c     01 36 06 F1 | 	add	local09, #1
11570     1B 31 02 F6 | 	mov	local06, local09
11574     02 30 66 F0 | 	shl	local06, #2
11578     A7 26 02 F6 | 	mov	local01, fp
1157c     A7 30 02 F1 | 	add	local06, fp
11580     18 2F 02 FB | 	rdlong	local05, local06
11584     17 15 02 F6 | 	mov	arg02, local05
11588     1C 4E 85 F1 | 	sub	fp, #28
1158c     40 3B B1 FD | 	call	#__system___string_cmp
11590     01 FA 55 F2 | 	cmps	result1, #1 wc
11594     60 00 90 CD |  if_b	jmp	#LR__1427
11598     1E 37 02 F6 | 	mov	local09, local12
1159c     01 36 06 F1 | 	add	local09, #1
115a0     02 36 66 F0 | 	shl	local09, #2
115a4     1C 4E 05 F1 | 	add	fp, #28
115a8     A7 36 02 F1 | 	add	local09, fp
115ac     1B 45 02 FB | 	rdlong	local16, local09
115b0     1E 31 02 F6 | 	mov	local06, local12
115b4     02 30 66 F0 | 	shl	local06, #2
115b8     A7 30 02 F1 | 	add	local06, fp
115bc     18 2F 02 FB | 	rdlong	local05, local06
115c0     1E 37 02 F6 | 	mov	local09, local12
115c4     1B 31 02 F6 | 	mov	local06, local09
115c8     02 30 66 F0 | 	shl	local06, #2
115cc     A7 26 02 F6 | 	mov	local01, fp
115d0     A7 30 02 F1 | 	add	local06, fp
115d4     18 45 62 FC | 	wrlong	local16, local06
115d8     1E 41 02 F6 | 	mov	local14, local12
115dc     01 40 06 F1 | 	add	local14, #1
115e0     02 40 66 F0 | 	shl	local14, #2
115e4     A7 42 02 F6 | 	mov	local15, fp
115e8     A7 40 02 F1 | 	add	local14, fp
115ec     20 2F 62 FC | 	wrlong	local05, local14
115f0     01 3A 66 F6 | 	neg	local11, #1
115f4     1C 4E 85 F1 | 	sub	fp, #28
115f8                 | LR__1427
115f8     01 3C 06 F1 | 	add	local12, #1
115fc     4C FF 9F FD | 	jmp	#LR__1426
11600                 | LR__1428
11600                 | ' if not swapped then exit for
11600     1D 45 22 F6 | 	not	local16, local11
11604     00 44 0E F2 | 	cmp	local16, #0 wz
11608     01 2C 06 A1 |  if_e	add	local04, #1
1160c     20 FF 9F AD |  if_e	jmp	#LR__1425
11610                 | LR__1429
11610                 | ' for i=0 to n-1
11610     00 2C 06 F6 | 	mov	local04, #0
11614                 | LR__1430
11614     1A 2D 52 F2 | 	cmps	local04, local08 wc
11618     8C 00 90 3D |  if_ae	jmp	#LR__1432
1161c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1161c     00 12 06 F6 | 	mov	arg01, #0
11620     70 85 B1 FD | 	call	#__system___getiolock_0622
11624     FD 12 02 F6 | 	mov	arg01, result1
11628     7C 3A B1 FD | 	call	#__system___lockmem
1162c     16 29 02 F6 | 	mov	local02, local04
11630     02 28 66 F0 | 	shl	local02, #2
11634     A7 40 02 F6 | 	mov	local14, fp
11638     1C 40 06 F1 | 	add	local14, #28
1163c     20 29 02 F1 | 	add	local02, local14
11640     14 15 02 FB | 	rdlong	arg02, local02
11644     00 12 06 F6 | 	mov	arg01, #0
11648     00 16 06 F6 | 	mov	arg03, #0
1164c     78 42 B1 FD | 	call	#__system___basic_print_string
11650     00 12 06 F6 | 	mov	arg01, #0
11654     3C 85 B1 FD | 	call	#__system___getiolock_0622
11658     FD 00 68 FC | 	wrlong	#0, result1
1165c     40 2A 06 F1 | 	add	local03, #64
11660     15 13 02 F6 | 	mov	arg01, local03
11664     F8 23 B1 FD | 	call	#_hg010b_spin2_setcursorx
11668     00 2B 56 F2 | 	cmps	local03, #256 wc
1166c     30 00 90 CD |  if_b	jmp	#LR__1431
11670     00 2A 06 F6 | 	mov	local03, #0
11674     00 12 06 F6 | 	mov	arg01, #0
11678     18 85 B1 FD | 	call	#__system___getiolock_0622
1167c     FD 12 02 F6 | 	mov	arg01, result1
11680     24 3A B1 FD | 	call	#__system___lockmem
11684     00 12 06 F6 | 	mov	arg01, #0
11688     0A 14 06 F6 | 	mov	arg02, #10
1168c     00 16 06 F6 | 	mov	arg03, #0
11690     DC 41 B1 FD | 	call	#__system___basic_print_char
11694     00 12 06 F6 | 	mov	arg01, #0
11698     F8 84 B1 FD | 	call	#__system___getiolock_0622
1169c     FD 00 68 FC | 	wrlong	#0, result1
116a0                 | LR__1431
116a0     01 2C 06 F1 | 	add	local04, #1
116a4     6C FF 9F FD | 	jmp	#LR__1430
116a8                 | LR__1432
116a8                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
116a8     80 34 56 F2 | 	cmps	local08, #128 wc
116ac     40 00 90 CD |  if_b	jmp	#LR__1433
116b0     00 12 06 F6 | 	mov	arg01, #0
116b4     DC 84 B1 FD | 	call	#__system___getiolock_0622
116b8     FD 12 02 F6 | 	mov	arg01, result1
116bc     E8 39 B1 FD | 	call	#__system___lockmem
116c0     92 01 00 FF 
116c4     33 15 06 F6 | 	mov	arg02, ##@LR__5605
116c8     00 12 06 F6 | 	mov	arg01, #0
116cc     00 16 06 F6 | 	mov	arg03, #0
116d0     F4 41 B1 FD | 	call	#__system___basic_print_string
116d4     00 12 06 F6 | 	mov	arg01, #0
116d8     0A 14 06 F6 | 	mov	arg02, #10
116dc     00 16 06 F6 | 	mov	arg03, #0
116e0     8C 41 B1 FD | 	call	#__system___basic_print_char
116e4     00 12 06 F6 | 	mov	arg01, #0
116e8     A8 84 B1 FD | 	call	#__system___getiolock_0622
116ec     FD 00 68 FC | 	wrlong	#0, result1
116f0                 | LR__1433
116f0                 | ' print
116f0     00 12 06 F6 | 	mov	arg01, #0
116f4     9C 84 B1 FD | 	call	#__system___getiolock_0622
116f8     FD 12 02 F6 | 	mov	arg01, result1
116fc     A8 39 B1 FD | 	call	#__system___lockmem
11700     00 12 06 F6 | 	mov	arg01, #0
11704     0A 14 06 F6 | 	mov	arg02, #10
11708     00 16 06 F6 | 	mov	arg03, #0
1170c     60 41 B1 FD | 	call	#__system___basic_print_char
11710     00 12 06 F6 | 	mov	arg01, #0
11714     7C 84 B1 FD | 	call	#__system___getiolock_0622
11718     FD 00 68 FC | 	wrlong	#0, result1
1171c     A7 F0 03 F6 | 	mov	ptra, fp
11720     B2 00 A0 FD | 	call	#popregs_
11724                 | _do_dir_ret
11724     2D 00 64 FD | 	ret
11728                 | 
11728                 | ' 
11728                 | ' '-------------------- dpeek
11728                 | ' 
11728                 | ' sub do_dpeek
11728                 | _do_dpeek
11728     01 4A 05 F6 | 	mov	COUNT_, #1
1172c     A8 00 A0 FD | 	call	#pushregs_
11730     14 F0 07 F1 | 	add	ptra, #20
11734     08 BE BF FD | 	call	#_pop
11738     A7 FA 61 FC | 	wrlong	result1, fp
1173c     04 4E 05 F1 | 	add	fp, #4
11740     A7 FC 61 FC | 	wrlong	result2, fp
11744     04 4E 05 F1 | 	add	fp, #4
11748     A7 FE 61 FC | 	wrlong	result3, fp
1174c     08 4E 85 F1 | 	sub	fp, #8
11750     A7 12 02 F6 | 	mov	arg01, fp
11754     C4 BF BF FD | 	call	#_converttoint
11758     FD 12 02 F6 | 	mov	arg01, result1
1175c                 | ' 
1175c                 | ' t1=pop()
1175c                 | ' a=converttoint(t1)
1175c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1175c     00 04 00 FF 
11760     00 12 16 F2 | 	cmp	arg01, ##524288 wc
11764     09 27 E2 CA |  if_b	rdword	local01, arg01
11768     08 00 90 CD |  if_b	jmp	#LR__1440
1176c     B4 E6 B0 FD | 	call	#_psdpeek
11770     FD 26 02 F6 | 	mov	local01, result1
11774                 | LR__1440
11774     08 4E 05 F1 | 	add	fp, #8
11778     A7 3A 68 FC | 	wrlong	#29, fp
1177c     08 4E 85 F1 | 	sub	fp, #8
11780     A7 26 62 FC | 	wrlong	local01, fp
11784     A7 12 02 F6 | 	mov	arg01, fp
11788     44 BE BF FD | 	call	#_push
1178c     A7 F0 03 F6 | 	mov	ptra, fp
11790     B2 00 A0 FD | 	call	#popregs_
11794                 | _do_dpeek_ret
11794     2D 00 64 FD | 	ret
11798                 | 
11798                 | ' 
11798                 | ' '-------------------- dpoke
11798                 | ' 
11798                 | ' sub do_dpoke
11798                 | _do_dpoke
11798     02 4A 05 F6 | 	mov	COUNT_, #2
1179c     A8 00 A0 FD | 	call	#pushregs_
117a0     20 F0 07 F1 | 	add	ptra, #32
117a4     98 BD BF FD | 	call	#_pop
117a8     FD 14 02 F6 | 	mov	arg02, result1
117ac     FE 12 02 F6 | 	mov	arg01, result2
117b0     FF 26 02 F6 | 	mov	local01, result3
117b4     A7 14 62 FC | 	wrlong	arg02, fp
117b8     04 4E 05 F1 | 	add	fp, #4
117bc     A7 12 62 FC | 	wrlong	arg01, fp
117c0     04 4E 05 F1 | 	add	fp, #4
117c4     A7 26 62 FC | 	wrlong	local01, fp
117c8     08 4E 85 F1 | 	sub	fp, #8
117cc     70 BD BF FD | 	call	#_pop
117d0     FF 26 02 F6 | 	mov	local01, result3
117d4     0C 4E 05 F1 | 	add	fp, #12
117d8     A7 FA 61 FC | 	wrlong	result1, fp
117dc     04 4E 05 F1 | 	add	fp, #4
117e0     A7 FC 61 FC | 	wrlong	result2, fp
117e4     04 4E 05 F1 | 	add	fp, #4
117e8     A7 26 62 FC | 	wrlong	local01, fp
117ec     08 4E 85 F1 | 	sub	fp, #8
117f0     A7 12 02 F6 | 	mov	arg01, fp
117f4     0C 4E 85 F1 | 	sub	fp, #12
117f8     20 BF BF FD | 	call	#_converttoint
117fc     FD 26 02 F6 | 	mov	local01, result1
11800     A7 12 02 F6 | 	mov	arg01, fp
11804     14 BF BF FD | 	call	#_converttoint
11808     FD 28 02 F6 | 	mov	local02, result1
1180c                 | ' 
1180c                 | ' t1=pop() 'value
1180c                 | ' t2=pop() 
1180c                 | ' a=converttoint(t2) : v=converttoint(t1)
1180c                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1180c     00 04 00 FF 
11810     00 26 16 F2 | 	cmp	local01, ##524288 wc
11814     13 29 52 CC |  if_b	wrword	local02, local01
11818     13 13 02 36 |  if_ae	mov	arg01, local01
1181c     14 15 02 36 |  if_ae	mov	arg02, local02
11820     E0 E4 B0 3D |  if_ae	call	#_psdpoke
11824     A7 F0 03 F6 | 	mov	ptra, fp
11828     B2 00 A0 FD | 	call	#popregs_
1182c                 | _do_dpoke_ret
1182c     2D 00 64 FD | 	ret
11830                 | 
11830                 | ' '-------------------- draw
11830                 | ' 
11830                 | ' sub do_draw
11830                 | _do_draw
11830     02 4A 05 F6 | 	mov	COUNT_, #2
11834     A8 00 A0 FD | 	call	#pushregs_
11838     20 F0 07 F1 | 	add	ptra, #32
1183c     00 BD BF FD | 	call	#_pop
11840     FD 18 02 F6 | 	mov	arg04, result1
11844     FE 16 02 F6 | 	mov	arg03, result2
11848     FF 1A 02 F6 | 	mov	arg05, result3
1184c     0C 4E 05 F1 | 	add	fp, #12
11850     A7 18 62 FC | 	wrlong	arg04, fp
11854     04 4E 05 F1 | 	add	fp, #4
11858     A7 16 62 FC | 	wrlong	arg03, fp
1185c     04 4E 05 F1 | 	add	fp, #4
11860     A7 1A 62 FC | 	wrlong	arg05, fp
11864     14 4E 85 F1 | 	sub	fp, #20
11868     D4 BC BF FD | 	call	#_pop
1186c     FF 18 02 F6 | 	mov	arg04, result3
11870     A7 FA 61 FC | 	wrlong	result1, fp
11874     04 4E 05 F1 | 	add	fp, #4
11878     A7 FC 61 FC | 	wrlong	result2, fp
1187c     04 4E 05 F1 | 	add	fp, #4
11880     A7 18 62 FC | 	wrlong	arg04, fp
11884     08 4E 85 F1 | 	sub	fp, #8
11888     A7 12 02 F6 | 	mov	arg01, fp
1188c     8C BE BF FD | 	call	#_converttoint
11890     FD 26 02 F6 | 	mov	local01, result1
11894     A7 12 02 F6 | 	mov	arg01, fp
11898     0C 12 06 F1 | 	add	arg01, #12
1189c     7C BE BF FD | 	call	#_converttoint
118a0     FD 28 02 F6 | 	mov	local02, result1
118a4     37 00 00 FF 
118a8     4C E4 05 F1 | 	add	objptr, ##28236
118ac     F2 12 02 FB | 	rdlong	arg01, objptr
118b0     04 E4 05 F1 | 	add	objptr, #4
118b4     F2 14 02 FB | 	rdlong	arg02, objptr
118b8     08 E4 85 F1 | 	sub	objptr, #8
118bc     F2 1A 02 FB | 	rdlong	arg05, objptr
118c0     37 00 00 FF 
118c4     48 E4 85 F1 | 	sub	objptr, ##28232
118c8     13 17 02 F6 | 	mov	arg03, local01
118cc     14 19 02 F6 | 	mov	arg04, local02
118d0     1C 1C B1 FD | 	call	#_hg010b_spin2_draw
118d4     37 00 00 FF 
118d8     4C E4 05 F1 | 	add	objptr, ##28236
118dc     F2 26 62 FC | 	wrlong	local01, objptr
118e0     04 E4 05 F1 | 	add	objptr, #4
118e4     F2 28 62 FC | 	wrlong	local02, objptr
118e8     37 00 00 FF 
118ec     50 E4 85 F1 | 	sub	objptr, ##28240
118f0     A7 F0 03 F6 | 	mov	ptra, fp
118f4     B2 00 A0 FD | 	call	#popregs_
118f8                 | _do_draw_ret
118f8     2D 00 64 FD | 	ret
118fc                 | 
118fc                 | ' 
118fc                 | ' '-------------------- else
118fc                 | ' 
118fc                 | ' sub do_else
118fc                 | _do_else
118fc     4A 00 00 FF 
11900     9C E4 05 F1 | 	add	objptr, ##38044
11904     F2 00 02 FB | 	rdlong	_var01, objptr
11908     01 00 86 F1 | 	sub	_var01, #1
1190c     04 E4 05 F1 | 	add	objptr, #4
11910     F2 00 62 FC | 	wrlong	_var01, objptr
11914     4A 00 00 FF 
11918     A0 E4 85 F1 | 	sub	objptr, ##38048
1191c                 | _do_else_ret
1191c     2D 00 64 FD | 	ret
11920                 | 
11920                 | ' 
11920                 | ' '-------------------- end
11920                 | ' 
11920                 | ' sub do_end
11920                 | _do_end
11920     4A 00 00 FF 
11924     9C E4 05 F1 | 	add	objptr, ##38044
11928     F2 00 02 FB | 	rdlong	_var01, objptr
1192c     01 00 86 F1 | 	sub	_var01, #1
11930     04 E4 05 F1 | 	add	objptr, #4
11934     F2 00 62 FC | 	wrlong	_var01, objptr
11938     06 00 00 FF 
1193c     38 E4 05 F1 | 	add	objptr, ##3128
11940     FF FF BF FF 
11944     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11948     50 00 00 FF 
1194c     D8 E4 85 F1 | 	sub	objptr, ##41176
11950                 | _do_end_ret
11950     2D 00 64 FD | 	ret
11954                 | 
11954                 | ' 
11954                 | ' '-------------------- enter
11954                 | ' 
11954                 | ' sub do_enter
11954                 | _do_enter
11954     02 00 00 FF 
11958     D2 12 06 F6 | 	mov	arg01, ##1234
1195c     58 31 B0 FD | 	call	#_do_load
11960                 | _do_enter_ret
11960     2D 00 64 FD | 	ret
11964                 | 
11964                 | ' 
11964                 | ' '------------------- error processing
11964                 | ' 
11964                 | ' sub do_error
11964                 | _do_error
11964     01 4A 05 F6 | 	mov	COUNT_, #1
11968     A8 00 A0 FD | 	call	#pushregs_
1196c     4A 00 00 FF 
11970     A0 E4 05 F1 | 	add	objptr, ##38048
11974     F2 18 02 FB | 	rdlong	arg04, objptr
11978     0C 17 02 F6 | 	mov	arg03, arg04
1197c     01 16 66 F0 | 	shl	arg03, #1
11980     0C 17 02 F1 | 	add	arg03, arg04
11984     02 16 66 F0 | 	shl	arg03, #2
11988     03 00 00 FF 
1198c     04 E4 85 F1 | 	sub	objptr, ##1540
11990     F2 16 02 F1 | 	add	arg03, objptr
11994     0B 27 02 FB | 	rdlong	local01, arg03
11998                 | ' r=compiledline(lineptr_e).result.uresult
11998                 | ' print "Error ";r;": ";errors$(r)
11998     00 12 06 F6 | 	mov	arg01, #0
1199c     47 00 00 FF 
119a0     9C E4 85 F1 | 	sub	objptr, ##36508
119a4     EC 81 B1 FD | 	call	#__system___getiolock_0622
119a8     FD 12 02 F6 | 	mov	arg01, result1
119ac     F8 36 B1 FD | 	call	#__system___lockmem
119b0     92 01 00 FF 
119b4     65 15 06 F6 | 	mov	arg02, ##@LR__5606
119b8     00 12 06 F6 | 	mov	arg01, #0
119bc     00 16 06 F6 | 	mov	arg03, #0
119c0     04 3F B1 FD | 	call	#__system___basic_print_string
119c4     00 12 06 F6 | 	mov	arg01, #0
119c8     13 15 02 F6 | 	mov	arg02, local01
119cc     00 16 06 F6 | 	mov	arg03, #0
119d0     0A 18 06 F6 | 	mov	arg04, #10
119d4     74 3F B1 FD | 	call	#__system___basic_print_unsigned
119d8     92 01 00 FF 
119dc     6C 15 06 F6 | 	mov	arg02, ##@LR__5607
119e0     00 12 06 F6 | 	mov	arg01, #0
119e4     00 16 06 F6 | 	mov	arg03, #0
119e8     DC 3E B1 FD | 	call	#__system___basic_print_string
119ec     02 26 66 F0 | 	shl	local01, #2
119f0     F2 18 02 F6 | 	mov	arg04, objptr
119f4     45 00 00 FF 
119f8     9C 18 06 F1 | 	add	arg04, ##35484
119fc     0C 27 02 F1 | 	add	local01, arg04
11a00     13 15 02 FB | 	rdlong	arg02, local01
11a04     00 12 06 F6 | 	mov	arg01, #0
11a08     00 16 06 F6 | 	mov	arg03, #0
11a0c     B8 3E B1 FD | 	call	#__system___basic_print_string
11a10     00 12 06 F6 | 	mov	arg01, #0
11a14     0A 14 06 F6 | 	mov	arg02, #10
11a18     00 16 06 F6 | 	mov	arg03, #0
11a1c     50 3E B1 FD | 	call	#__system___basic_print_char
11a20     00 12 06 F6 | 	mov	arg01, #0
11a24     6C 81 B1 FD | 	call	#__system___getiolock_0622
11a28     FD 00 68 FC | 	wrlong	#0, result1
11a2c     A7 F0 03 F6 | 	mov	ptra, fp
11a30     B2 00 A0 FD | 	call	#popregs_
11a34                 | _do_error_ret
11a34     2D 00 64 FD | 	ret
11a38                 | 
11a38                 | ' 
11a38                 | ' '-------------------- fcircle
11a38                 | ' 
11a38                 | ' sub do_fcircle
11a38                 | _do_fcircle
11a38     08 4A 05 F6 | 	mov	COUNT_, #8
11a3c     A8 00 A0 FD | 	call	#pushregs_
11a40     24 F0 07 F1 | 	add	ptra, #36
11a44     F8 BA BF FD | 	call	#_pop
11a48     FD 14 02 F6 | 	mov	arg02, result1
11a4c     FE 18 02 F6 | 	mov	arg04, result2
11a50     FF 16 02 F6 | 	mov	arg03, result3
11a54     18 4E 05 F1 | 	add	fp, #24
11a58     A7 14 62 FC | 	wrlong	arg02, fp
11a5c     04 4E 05 F1 | 	add	fp, #4
11a60     A7 18 62 FC | 	wrlong	arg04, fp
11a64     04 4E 05 F1 | 	add	fp, #4
11a68     A7 16 62 FC | 	wrlong	arg03, fp
11a6c     20 4E 85 F1 | 	sub	fp, #32
11a70     CC BA BF FD | 	call	#_pop
11a74     FD 14 02 F6 | 	mov	arg02, result1
11a78     FE 18 02 F6 | 	mov	arg04, result2
11a7c     FF 16 02 F6 | 	mov	arg03, result3
11a80     0C 4E 05 F1 | 	add	fp, #12
11a84     A7 14 62 FC | 	wrlong	arg02, fp
11a88     04 4E 05 F1 | 	add	fp, #4
11a8c     A7 18 62 FC | 	wrlong	arg04, fp
11a90     04 4E 05 F1 | 	add	fp, #4
11a94     A7 16 62 FC | 	wrlong	arg03, fp
11a98     14 4E 85 F1 | 	sub	fp, #20
11a9c     A0 BA BF FD | 	call	#_pop
11aa0     FF 14 02 F6 | 	mov	arg02, result3
11aa4     A7 FA 61 FC | 	wrlong	result1, fp
11aa8     04 4E 05 F1 | 	add	fp, #4
11aac     A7 FC 61 FC | 	wrlong	result2, fp
11ab0     04 4E 05 F1 | 	add	fp, #4
11ab4     A7 14 62 FC | 	wrlong	arg02, fp
11ab8     08 4E 85 F1 | 	sub	fp, #8
11abc     A7 12 02 F6 | 	mov	arg01, fp
11ac0     58 BC BF FD | 	call	#_converttoint
11ac4     FD 26 02 F6 | 	mov	local01, result1
11ac8     A7 12 02 F6 | 	mov	arg01, fp
11acc     0C 12 06 F1 | 	add	arg01, #12
11ad0     48 BC BF FD | 	call	#_converttoint
11ad4     FD 28 02 F6 | 	mov	local02, result1
11ad8     A7 12 02 F6 | 	mov	arg01, fp
11adc     18 12 06 F1 | 	add	arg01, #24
11ae0     38 BC BF FD | 	call	#_converttoint
11ae4     FD 2A 02 F6 | 	mov	local03, result1
11ae8     FF FF 7F FF 
11aec     FE 2B 06 FD | 	qmul	local03, ##-2
11af0     37 00 00 FF 
11af4     48 E4 05 F1 | 	add	objptr, ##28232
11af8     F2 2C 02 FB | 	rdlong	local04, objptr
11afc     37 00 00 FF 
11b00     48 E4 85 F1 | 	sub	objptr, ##28232
11b04                 | ' 
11b04                 | ' d:=5-4*r
11b04     15 19 02 F6 | 	mov	arg04, local03
11b08     02 18 66 F0 | 	shl	arg04, #2
11b0c     05 2E 06 F6 | 	mov	local05, #5
11b10     0C 2F 82 F1 | 	sub	local05, arg04
11b14                 | ' x:=0
11b14     00 30 06 F6 | 	mov	local06, #0
11b18                 | ' y:=r
11b18                 | ' da:=(-2*r+5)*4
11b18                 | ' db:=3*4
11b18     0C 32 06 F6 | 	mov	local07, #12
11b1c                 | ' repeat while (x<=y) 
11b1c     18 34 62 FD | 	getqx	local08
11b20     05 34 06 F1 | 	add	local08, #5
11b24     02 34 66 F0 | 	shl	local08, #2
11b28                 | LR__1450
11b28     15 31 5A F2 | 	cmps	local06, local03 wcz
11b2c     B0 00 90 1D |  if_a	jmp	#LR__1451
11b30                 | '   fastline(x0-x,x0+x,y0-y,c)
11b30     13 13 02 F6 | 	mov	arg01, local01
11b34     18 13 82 F1 | 	sub	arg01, local06
11b38     13 15 02 F6 | 	mov	arg02, local01
11b3c     18 15 02 F1 | 	add	arg02, local06
11b40     14 17 02 F6 | 	mov	arg03, local02
11b44     15 17 82 F1 | 	sub	arg03, local03
11b48     16 19 02 F6 | 	mov	arg04, local04
11b4c     88 18 B1 FD | 	call	#_hg010b_spin2_fastline
11b50                 | '   fastline(x0-x,x0+x,y0+y,c)
11b50     13 13 02 F6 | 	mov	arg01, local01
11b54     18 13 82 F1 | 	sub	arg01, local06
11b58     13 15 02 F6 | 	mov	arg02, local01
11b5c     18 15 02 F1 | 	add	arg02, local06
11b60     14 17 02 F6 | 	mov	arg03, local02
11b64     15 17 02 F1 | 	add	arg03, local03
11b68     16 19 02 F6 | 	mov	arg04, local04
11b6c     68 18 B1 FD | 	call	#_hg010b_spin2_fastline
11b70                 | '   fastline(x0-y,x0+y,y0-x,c)
11b70     13 13 02 F6 | 	mov	arg01, local01
11b74     15 13 82 F1 | 	sub	arg01, local03
11b78     13 15 02 F6 | 	mov	arg02, local01
11b7c     15 15 02 F1 | 	add	arg02, local03
11b80     14 17 02 F6 | 	mov	arg03, local02
11b84     18 17 82 F1 | 	sub	arg03, local06
11b88     16 19 02 F6 | 	mov	arg04, local04
11b8c     48 18 B1 FD | 	call	#_hg010b_spin2_fastline
11b90                 | '   fastline(x0-y,x0+y,y0+x,c)
11b90     13 13 02 F6 | 	mov	arg01, local01
11b94     15 13 82 F1 | 	sub	arg01, local03
11b98     13 15 02 F6 | 	mov	arg02, local01
11b9c     15 15 02 F1 | 	add	arg02, local03
11ba0     14 17 02 F6 | 	mov	arg03, local02
11ba4     18 17 02 F1 | 	add	arg03, local06
11ba8     16 19 02 F6 | 	mov	arg04, local04
11bac     28 18 B1 FD | 	call	#_hg010b_spin2_fastline
11bb0                 | '   if d>0 
11bb0     01 2E 56 F2 | 	cmps	local05, #1 wc
11bb4                 | '     d+=da
11bb4     1A 2F 02 31 |  if_ae	add	local05, local08
11bb8                 | '     y-=1
11bb8     01 2A 86 31 |  if_ae	sub	local03, #1
11bbc                 | '     x+=1
11bbc     01 30 06 31 |  if_ae	add	local06, #1
11bc0                 | '     da+=4*4
11bc0     10 34 06 31 |  if_ae	add	local08, #16
11bc4                 | '     db+=2*4
11bc4     08 32 06 31 |  if_ae	add	local07, #8
11bc8     5C FF 9F 3D |  if_ae	jmp	#LR__1450
11bcc                 | '   else
11bcc                 | '     d+=db
11bcc     19 2F 02 F1 | 	add	local05, local07
11bd0                 | '     x+=1
11bd0     01 30 06 F1 | 	add	local06, #1
11bd4                 | '     da+=2*4
11bd4     08 34 06 F1 | 	add	local08, #8
11bd8                 | '     db+=2*4
11bd8     08 32 06 F1 | 	add	local07, #8
11bdc     48 FF 9F FD | 	jmp	#LR__1450
11be0                 | LR__1451
11be0     A7 F0 03 F6 | 	mov	ptra, fp
11be4     B2 00 A0 FD | 	call	#popregs_
11be8                 | _do_fcircle_ret
11be8     2D 00 64 FD | 	ret
11bec                 | 
11bec                 | ' 
11bec                 | ' '-------------------- fill
11bec                 | ' 
11bec                 | ' sub do_fill
11bec                 | _do_fill
11bec     0C 4A 05 F6 | 	mov	COUNT_, #12
11bf0     A8 00 A0 FD | 	call	#pushregs_
11bf4     30 F0 07 F1 | 	add	ptra, #48
11bf8     44 B9 BF FD | 	call	#_pop
11bfc     FD 16 02 F6 | 	mov	arg03, result1
11c00     FE 14 02 F6 | 	mov	arg02, result2
11c04     FF 18 02 F6 | 	mov	arg04, result3
11c08     24 4E 05 F1 | 	add	fp, #36
11c0c     A7 16 62 FC | 	wrlong	arg03, fp
11c10     04 4E 05 F1 | 	add	fp, #4
11c14     A7 14 62 FC | 	wrlong	arg02, fp
11c18     04 4E 05 F1 | 	add	fp, #4
11c1c     A7 18 62 FC | 	wrlong	arg04, fp
11c20     2C 4E 85 F1 | 	sub	fp, #44
11c24     18 B9 BF FD | 	call	#_pop
11c28     FD 16 02 F6 | 	mov	arg03, result1
11c2c     FE 14 02 F6 | 	mov	arg02, result2
11c30     FF 18 02 F6 | 	mov	arg04, result3
11c34     18 4E 05 F1 | 	add	fp, #24
11c38     A7 16 62 FC | 	wrlong	arg03, fp
11c3c     04 4E 05 F1 | 	add	fp, #4
11c40     A7 14 62 FC | 	wrlong	arg02, fp
11c44     04 4E 05 F1 | 	add	fp, #4
11c48     A7 18 62 FC | 	wrlong	arg04, fp
11c4c     20 4E 85 F1 | 	sub	fp, #32
11c50     EC B8 BF FD | 	call	#_pop
11c54     FD 16 02 F6 | 	mov	arg03, result1
11c58     FE 14 02 F6 | 	mov	arg02, result2
11c5c     FF 18 02 F6 | 	mov	arg04, result3
11c60     0C 4E 05 F1 | 	add	fp, #12
11c64     A7 16 62 FC | 	wrlong	arg03, fp
11c68     04 4E 05 F1 | 	add	fp, #4
11c6c     A7 14 62 FC | 	wrlong	arg02, fp
11c70     04 4E 05 F1 | 	add	fp, #4
11c74     A7 18 62 FC | 	wrlong	arg04, fp
11c78     14 4E 85 F1 | 	sub	fp, #20
11c7c     C0 B8 BF FD | 	call	#_pop
11c80     FF 16 02 F6 | 	mov	arg03, result3
11c84     A7 FA 61 FC | 	wrlong	result1, fp
11c88     04 4E 05 F1 | 	add	fp, #4
11c8c     A7 FC 61 FC | 	wrlong	result2, fp
11c90     04 4E 05 F1 | 	add	fp, #4
11c94     A7 16 62 FC | 	wrlong	arg03, fp
11c98     08 4E 85 F1 | 	sub	fp, #8
11c9c     A7 12 02 F6 | 	mov	arg01, fp
11ca0     78 BA BF FD | 	call	#_converttoint
11ca4     FD 26 02 F6 | 	mov	local01, result1
11ca8     A7 12 02 F6 | 	mov	arg01, fp
11cac     0C 12 06 F1 | 	add	arg01, #12
11cb0     68 BA BF FD | 	call	#_converttoint
11cb4     FD 28 02 F6 | 	mov	local02, result1
11cb8     A7 12 02 F6 | 	mov	arg01, fp
11cbc     18 12 06 F1 | 	add	arg01, #24
11cc0     58 BA BF FD | 	call	#_converttoint
11cc4     FD 2A 02 F6 | 	mov	local03, result1
11cc8     A7 12 02 F6 | 	mov	arg01, fp
11ccc     24 12 06 F1 | 	add	arg01, #36
11cd0     48 BA BF FD | 	call	#_converttoint
11cd4     13 13 02 F6 | 	mov	arg01, local01
11cd8     14 15 02 F6 | 	mov	arg02, local02
11cdc                 | ' 
11cdc                 | ' newcolor:=newcolor & 255
11cdc     15 2B E2 F8 | 	getbyte	local03, local03, #0
11ce0                 | ' oldcolor:=oldcolor & 255
11ce0     FD 28 E2 F8 | 	getbyte	local02, result1, #0
11ce4                 | ' 
11ce4                 | ' if (oldcolor == newcolor) 
11ce4     15 29 0A F2 | 	cmp	local02, local03 wz
11ce8                 | '   return
11ce8     A8 02 90 AD |  if_e	jmp	#LR__1469
11cec                 | ' 
11cec                 | ' fillptr:=0
11cec     0B 00 00 FF 
11cf0     BA E4 05 F1 | 	add	objptr, ##5818
11cf4     F2 00 68 FC | 	wrlong	#0, objptr
11cf8                 | ' fillmax:=0
11cf8     04 E4 05 F1 | 	add	objptr, #4
11cfc     F2 00 68 FC | 	wrlong	#0, objptr
11d00     0B 00 00 FF 
11d04     BE E4 85 F1 | 	sub	objptr, ##5822
11d08                 | ' fillpush(x)
11d08     24 19 B1 FD | 	call	#_hg010b_spin2_fillpush
11d0c                 | ' fillpush(y)
11d0c     0A 13 02 F6 | 	mov	arg01, arg02
11d10     1C 19 B1 FD | 	call	#_hg010b_spin2_fillpush
11d14                 | ' y:=fillpop()
11d14     58 19 B1 FD | 	call	#_hg010b_spin2_fillpop
11d18     FD 2C 02 F6 | 	mov	local04, result1
11d1c                 | ' x:=fillpop()
11d1c     50 19 B1 FD | 	call	#_hg010b_spin2_fillpop
11d20     FD 2E 02 F6 | 	mov	local05, result1
11d24                 | ' 'pinhigh(38)
11d24                 | ' repeat while (x>-1)       
11d24                 | LR__1460
11d24     00 2E 56 F2 | 	cmps	local05, #0 wc
11d28     68 02 90 CD |  if_b	jmp	#LR__1468
11d2c                 | '  ' pintoggle(39)
11d2c                 | '   x1 := x
11d2c     17 31 02 F6 | 	mov	local06, local05
11d30                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
11d30                 | LR__1461
11d30     00 32 06 F6 | 	mov	local07, #0
11d34     00 34 06 F6 | 	mov	local08, #0
11d38     00 30 56 F2 | 	cmps	local06, #0 wc
11d3c     01 34 66 36 |  if_ae	neg	local08, #1
11d40     00 34 0E F2 | 	cmp	local08, #0 wz
11d44     00 32 26 56 |  if_ne	not	local07, #0
11d48     00 36 06 F6 | 	mov	local09, #0
11d4c     00 38 06 F6 | 	mov	local10, #0
11d50     16 15 02 F6 | 	mov	arg02, local04
11d54     18 13 02 F6 | 	mov	arg01, local06
11d58     F4 15 B1 FD | 	call	#_hg010b_spin2_getpixel2
11d5c     14 FB 09 F2 | 	cmp	result1, local02 wz
11d60     00 38 26 A6 |  if_e	not	local10, #0
11d64     00 38 0E F2 | 	cmp	local10, #0 wz
11d68     00 36 26 56 |  if_ne	not	local09, #0
11d6c     1B 33 CA F7 | 	test	local07, local09 wz
11d70                 | '     x1--
11d70     01 30 86 51 |  if_ne	sub	local06, #1
11d74     B8 FF 9F 5D |  if_ne	jmp	#LR__1461
11d78                 | '   x1++
11d78     01 30 06 F1 | 	add	local06, #1
11d7c                 | '   spanabove := 0
11d7c     00 3A 06 F6 | 	mov	local11, #0
11d80                 | '   spanbelow := 0
11d80     00 3C 06 F6 | 	mov	local12, #0
11d84                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
11d84                 | LR__1462
11d84     00 32 06 F6 | 	mov	local07, #0
11d88     02 00 00 FF 
11d8c     00 30 56 F2 | 	cmps	local06, ##1024 wc
11d90     00 32 26 C6 |  if_b	not	local07, #0
11d94     00 36 06 F6 | 	mov	local09, #0
11d98     00 38 06 F6 | 	mov	local10, #0
11d9c     16 15 02 F6 | 	mov	arg02, local04
11da0     18 13 02 F6 | 	mov	arg01, local06
11da4     A8 15 B1 FD | 	call	#_hg010b_spin2_getpixel2
11da8     14 FB 09 F2 | 	cmp	result1, local02 wz
11dac     00 38 26 A6 |  if_e	not	local10, #0
11db0     00 38 0E F2 | 	cmp	local10, #0 wz
11db4     00 36 26 56 |  if_ne	not	local09, #0
11db8     1B 33 CA F7 | 	test	local07, local09 wz
11dbc     C0 01 90 AD |  if_e	jmp	#LR__1467
11dc0     DD E4 05 F1 | 	add	objptr, #221
11dc4     F2 12 02 FB | 	rdlong	arg01, objptr
11dc8     14 E4 05 F1 | 	add	objptr, #20
11dcc     F2 1A 02 FB | 	rdlong	arg05, objptr
11dd0     02 1A 66 F0 | 	shl	arg05, #2
11dd4     16 1B 02 FD | 	qmul	arg05, local04
11dd8                 | '     putpixel2 (x1,y, newcolor & 255)
11dd8     15 15 E2 F8 | 	getbyte	arg02, local03, #0
11ddc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
11ddc     01 16 06 F6 | 	mov	arg03, #1
11de0     00 18 06 F6 | 	mov	arg04, #0
11de4     01 1A 06 F6 | 	mov	arg05, #1
11de8     0A 00 00 FF 
11dec     DB E5 05 F1 | 	add	objptr, ##5595
11df0     18 38 62 FD | 	getqx	local10
11df4     18 39 02 F1 | 	add	local10, local06
11df8     1C 13 02 F1 | 	add	arg01, local10
11dfc     DC 2B B1 FD | 	call	#_psram_spin2_fill
11e00     0B 00 00 FF 
11e04     CC E4 85 F1 | 	sub	objptr, ##5836
11e08                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
11e08     00 32 06 F6 | 	mov	local07, #0
11e0c     00 34 06 F6 | 	mov	local08, #0
11e10     00 3A 0E F2 | 	cmp	local11, #0 wz
11e14     01 2C 56 A2 |  if_e	cmps	local04, #1 wc
11e18     01 34 66 26 |  if_nc_and_z	neg	local08, #1
11e1c     00 34 0E F2 | 	cmp	local08, #0 wz
11e20     00 32 26 56 |  if_ne	not	local07, #0
11e24     00 36 06 F6 | 	mov	local09, #0
11e28     00 38 06 F6 | 	mov	local10, #0
11e2c     16 15 02 F6 | 	mov	arg02, local04
11e30     01 14 86 F1 | 	sub	arg02, #1
11e34     18 13 02 F6 | 	mov	arg01, local06
11e38     14 15 B1 FD | 	call	#_hg010b_spin2_getpixel2
11e3c     14 FB 09 F2 | 	cmp	result1, local02 wz
11e40     00 38 26 A6 |  if_e	not	local10, #0
11e44     00 38 0E F2 | 	cmp	local10, #0 wz
11e48     00 36 26 56 |  if_ne	not	local09, #0
11e4c     1B 33 CA F7 | 	test	local07, local09 wz
11e50     1C 00 90 AD |  if_e	jmp	#LR__1463
11e54                 | '       fillpush(x1)
11e54     18 13 02 F6 | 	mov	arg01, local06
11e58     D4 17 B1 FD | 	call	#_hg010b_spin2_fillpush
11e5c                 | '       fillpush(y-1)
11e5c     16 13 02 F6 | 	mov	arg01, local04
11e60     01 12 86 F1 | 	sub	arg01, #1
11e64     C8 17 B1 FD | 	call	#_hg010b_spin2_fillpush
11e68                 | '       spanabove := 1 
11e68     01 3A 06 F6 | 	mov	local11, #1
11e6c     4C 00 90 FD | 	jmp	#LR__1464
11e70                 | LR__1463
11e70                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
11e70     00 32 06 F6 | 	mov	local07, #0
11e74     00 34 06 F6 | 	mov	local08, #0
11e78     00 3A 0E F2 | 	cmp	local11, #0 wz
11e7c     01 2C 56 52 |  if_ne	cmps	local04, #1 wc
11e80     01 34 66 16 |  if_a	neg	local08, #1
11e84     00 34 0E F2 | 	cmp	local08, #0 wz
11e88     00 32 26 56 |  if_ne	not	local07, #0
11e8c     00 36 06 F6 | 	mov	local09, #0
11e90     00 38 06 F6 | 	mov	local10, #0
11e94     16 15 02 F6 | 	mov	arg02, local04
11e98     01 14 86 F1 | 	sub	arg02, #1
11e9c     18 13 02 F6 | 	mov	arg01, local06
11ea0     AC 14 B1 FD | 	call	#_hg010b_spin2_getpixel2
11ea4     14 FB 09 F2 | 	cmp	result1, local02 wz
11ea8     00 38 26 56 |  if_ne	not	local10, #0
11eac     00 38 0E F2 | 	cmp	local10, #0 wz
11eb0     00 36 26 56 |  if_ne	not	local09, #0
11eb4     1B 33 CA F7 | 	test	local07, local09 wz
11eb8                 | '       spanabove := 0 
11eb8     00 3A 06 56 |  if_ne	mov	local11, #0
11ebc                 | LR__1464
11ebc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
11ebc     00 32 06 F6 | 	mov	local07, #0
11ec0     00 34 06 F6 | 	mov	local08, #0
11ec4     00 3C 0E F2 | 	cmp	local12, #0 wz
11ec8     01 00 00 AF 
11ecc     3F 2C 56 A2 |  if_e	cmps	local04, ##575 wc
11ed0     01 34 66 86 |  if_c_and_z	neg	local08, #1
11ed4     00 34 0E F2 | 	cmp	local08, #0 wz
11ed8     00 32 26 56 |  if_ne	not	local07, #0
11edc     00 36 06 F6 | 	mov	local09, #0
11ee0     00 38 06 F6 | 	mov	local10, #0
11ee4     16 15 02 F6 | 	mov	arg02, local04
11ee8     01 14 06 F1 | 	add	arg02, #1
11eec     18 13 02 F6 | 	mov	arg01, local06
11ef0     5C 14 B1 FD | 	call	#_hg010b_spin2_getpixel2
11ef4     14 FB 09 F2 | 	cmp	result1, local02 wz
11ef8     00 38 26 A6 |  if_e	not	local10, #0
11efc     00 38 0E F2 | 	cmp	local10, #0 wz
11f00     00 36 26 56 |  if_ne	not	local09, #0
11f04     1B 33 CA F7 | 	test	local07, local09 wz
11f08     1C 00 90 AD |  if_e	jmp	#LR__1465
11f0c                 | '       fillpush(x1)
11f0c     18 13 02 F6 | 	mov	arg01, local06
11f10     1C 17 B1 FD | 	call	#_hg010b_spin2_fillpush
11f14                 | '       fillpush(y + 1)
11f14     16 13 02 F6 | 	mov	arg01, local04
11f18     01 12 06 F1 | 	add	arg01, #1
11f1c     10 17 B1 FD | 	call	#_hg010b_spin2_fillpush
11f20                 | '       spanBelow := 1
11f20     01 3C 06 F6 | 	mov	local12, #1
11f24     50 00 90 FD | 	jmp	#LR__1466
11f28                 | LR__1465
11f28                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
11f28     00 32 06 F6 | 	mov	local07, #0
11f2c     00 34 06 F6 | 	mov	local08, #0
11f30     00 3C 0E F2 | 	cmp	local12, #0 wz
11f34     01 00 00 5F 
11f38     3F 2C 56 52 |  if_ne	cmps	local04, ##575 wc
11f3c     01 34 66 46 |  if_c_and_nz	neg	local08, #1
11f40     00 34 0E F2 | 	cmp	local08, #0 wz
11f44     00 32 26 56 |  if_ne	not	local07, #0
11f48     00 36 06 F6 | 	mov	local09, #0
11f4c     00 38 06 F6 | 	mov	local10, #0
11f50     16 15 02 F6 | 	mov	arg02, local04
11f54     01 14 06 F1 | 	add	arg02, #1
11f58     18 13 02 F6 | 	mov	arg01, local06
11f5c     F0 13 B1 FD | 	call	#_hg010b_spin2_getpixel2
11f60     14 FB 09 F2 | 	cmp	result1, local02 wz
11f64     00 38 26 56 |  if_ne	not	local10, #0
11f68     00 38 0E F2 | 	cmp	local10, #0 wz
11f6c     00 36 26 56 |  if_ne	not	local09, #0
11f70     1B 33 CA F7 | 	test	local07, local09 wz
11f74                 | '       spanbelow := 0
11f74     00 3C 06 56 |  if_ne	mov	local12, #0
11f78                 | LR__1466
11f78                 | '     x1++
11f78     01 30 06 F1 | 	add	local06, #1
11f7c     04 FE 9F FD | 	jmp	#LR__1462
11f80                 | LR__1467
11f80                 | '   y:=fillpop()
11f80     EC 16 B1 FD | 	call	#_hg010b_spin2_fillpop
11f84     FD 2C 02 F6 | 	mov	local04, result1
11f88                 | '   x:=fillpop()
11f88     E4 16 B1 FD | 	call	#_hg010b_spin2_fillpop
11f8c     FD 2E 02 F6 | 	mov	local05, result1
11f90     90 FD 9F FD | 	jmp	#LR__1460
11f94                 | LR__1468
11f94                 | LR__1469
11f94     A7 F0 03 F6 | 	mov	ptra, fp
11f98     B2 00 A0 FD | 	call	#popregs_
11f9c                 | _do_fill_ret
11f9c     2D 00 64 FD | 	ret
11fa0                 | 
11fa0                 | ' 
11fa0                 | ' '-------------------- findfirst
11fa0                 | ' 
11fa0                 | ' sub do_findfirst
11fa0                 | _do_findfirst
11fa0     04 4A 05 F6 | 	mov	COUNT_, #4
11fa4     A8 00 A0 FD | 	call	#pushregs_
11fa8     1C F0 07 F1 | 	add	ptra, #28
11fac     4A 00 00 FF 
11fb0     A0 E4 05 F1 | 	add	objptr, ##38048
11fb4     F2 16 02 FB | 	rdlong	arg03, objptr
11fb8     0B 15 02 F6 | 	mov	arg02, arg03
11fbc     01 14 66 F0 | 	shl	arg02, #1
11fc0     0B 15 02 F1 | 	add	arg02, arg03
11fc4     02 14 66 F0 | 	shl	arg02, #2
11fc8     03 00 00 FF 
11fcc     04 E4 85 F1 | 	sub	objptr, ##1540
11fd0     F2 14 02 F1 | 	add	arg02, objptr
11fd4     0A 27 02 FB | 	rdlong	local01, arg02
11fd8                 | ' 
11fd8                 | ' numpar=compiledline(lineptr_e).result.uresult
11fd8                 | ' if numpar=2 then
11fd8     02 26 0E F2 | 	cmp	local01, #2 wz
11fdc     47 00 00 FF 
11fe0     9C E4 85 F1 | 	sub	objptr, ##36508
11fe4     48 01 90 5D |  if_ne	jmp	#LR__1474
11fe8     54 B5 BF FD | 	call	#_pop
11fec     FF 16 02 F6 | 	mov	arg03, result3
11ff0     08 4E 05 F1 | 	add	fp, #8
11ff4     A7 FA 61 FC | 	wrlong	result1, fp
11ff8     04 4E 05 F1 | 	add	fp, #4
11ffc     A7 FC 61 FC | 	wrlong	result2, fp
12000     04 4E 05 F1 | 	add	fp, #4
12004     A7 16 62 FC | 	wrlong	arg03, fp
12008                 | '   t1=pop()
12008                 | '   if t1.result_type=result_string2 then 
12008     10 4E 85 F1 | 	sub	fp, #16
1200c     2B 16 0E F2 | 	cmp	arg03, #43 wz
12010     18 00 90 5D |  if_ne	jmp	#LR__1470
12014     08 4E 05 F1 | 	add	fp, #8
12018     A7 12 02 FB | 	rdlong	arg01, fp
1201c     08 4E 85 F1 | 	sub	fp, #8
12020     8C B6 BF FD | 	call	#_convertstring
12024     FD 28 02 F6 | 	mov	local02, result1
12028     60 00 90 FD | 	jmp	#LR__1472
1202c                 | LR__1470
1202c     10 4E 05 F1 | 	add	fp, #16
12030     A7 16 02 FB | 	rdlong	arg03, fp
12034     10 4E 85 F1 | 	sub	fp, #16
12038     1F 16 0E F2 | 	cmp	arg03, #31 wz
1203c     08 4E 05 A1 |  if_e	add	fp, #8
12040     A7 28 02 AB |  if_e	rdlong	local02, fp
12044     08 4E 85 A1 |  if_e	sub	fp, #8
12048     40 00 90 AD |  if_e	jmp	#LR__1471
1204c                 | '     print "findfirst: "; : printerror(30) : return  
1204c     00 12 06 F6 | 	mov	arg01, #0
12050     40 7B B1 FD | 	call	#__system___getiolock_0622
12054     FD 12 02 F6 | 	mov	arg01, result1
12058     4C 30 B1 FD | 	call	#__system___lockmem
1205c     92 01 00 FF 
12060     6F 15 06 F6 | 	mov	arg02, ##@LR__5608
12064     00 12 06 F6 | 	mov	arg01, #0
12068     00 16 06 F6 | 	mov	arg03, #0
1206c     58 38 B1 FD | 	call	#__system___basic_print_string
12070     00 12 06 F6 | 	mov	arg01, #0
12074     1C 7B B1 FD | 	call	#__system___getiolock_0622
12078     FD 00 68 FC | 	wrlong	#0, result1
1207c     1E 12 06 F6 | 	mov	arg01, #30
12080     00 14 06 F6 | 	mov	arg02, #0
12084     98 DB B0 FD | 	call	#_printerror
12088     08 02 90 FD | 	jmp	#LR__1482
1208c                 | LR__1471
1208c                 | LR__1472
1208c     B0 B4 BF FD | 	call	#_pop
12090     FF 16 02 F6 | 	mov	arg03, result3
12094     08 4E 05 F1 | 	add	fp, #8
12098     A7 FA 61 FC | 	wrlong	result1, fp
1209c     04 4E 05 F1 | 	add	fp, #4
120a0     A7 FC 61 FC | 	wrlong	result2, fp
120a4     04 4E 05 F1 | 	add	fp, #4
120a8     A7 16 62 FC | 	wrlong	arg03, fp
120ac                 | '   t1=pop()
120ac                 | '   if t1.result_type=result_string2 then 
120ac     10 4E 85 F1 | 	sub	fp, #16
120b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
120b4     18 00 90 5D |  if_ne	jmp	#LR__1473
120b8     08 4E 05 F1 | 	add	fp, #8
120bc     A7 12 02 FB | 	rdlong	arg01, fp
120c0     08 4E 85 F1 | 	sub	fp, #8
120c4     E8 B5 BF FD | 	call	#_convertstring
120c8     FD 2A 02 F6 | 	mov	local03, result1
120cc     58 01 90 FD | 	jmp	#LR__1480
120d0                 | LR__1473
120d0     10 4E 05 F1 | 	add	fp, #16
120d4     A7 26 02 FB | 	rdlong	local01, fp
120d8     10 4E 85 F1 | 	sub	fp, #16
120dc     1F 26 0E F2 | 	cmp	local01, #31 wz
120e0     08 4E 05 A1 |  if_e	add	fp, #8
120e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
120e8     08 4E 85 A1 |  if_e	sub	fp, #8
120ec     38 01 90 AD |  if_e	jmp	#LR__1480
120f0                 | '     print "findfirst: "; : printerror(30) : return  
120f0     00 12 06 F6 | 	mov	arg01, #0
120f4     9C 7A B1 FD | 	call	#__system___getiolock_0622
120f8     FD 12 02 F6 | 	mov	arg01, result1
120fc     A8 2F B1 FD | 	call	#__system___lockmem
12100     92 01 00 FF 
12104     7B 15 06 F6 | 	mov	arg02, ##@LR__5609
12108     00 12 06 F6 | 	mov	arg01, #0
1210c     00 16 06 F6 | 	mov	arg03, #0
12110     B4 37 B1 FD | 	call	#__system___basic_print_string
12114     00 12 06 F6 | 	mov	arg01, #0
12118     78 7A B1 FD | 	call	#__system___getiolock_0622
1211c     FD 00 68 FC | 	wrlong	#0, result1
12120     1E 12 06 F6 | 	mov	arg01, #30
12124     00 14 06 F6 | 	mov	arg02, #0
12128     F4 DA B0 FD | 	call	#_printerror
1212c     64 01 90 FD | 	jmp	#LR__1482
12130                 | LR__1474
12130     01 26 0E F2 | 	cmp	local01, #1 wz
12134     B0 00 90 5D |  if_ne	jmp	#LR__1478
12138     04 B4 BF FD | 	call	#_pop
1213c     FF 16 02 F6 | 	mov	arg03, result3
12140     08 4E 05 F1 | 	add	fp, #8
12144     A7 FA 61 FC | 	wrlong	result1, fp
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 FC 61 FC | 	wrlong	result2, fp
12150     04 4E 05 F1 | 	add	fp, #4
12154     A7 16 62 FC | 	wrlong	arg03, fp
12158                 | '   t1=pop()
12158                 | '   if t1.result_type=result_string2 then 
12158     10 4E 85 F1 | 	sub	fp, #16
1215c     2B 16 0E F2 | 	cmp	arg03, #43 wz
12160     18 00 90 5D |  if_ne	jmp	#LR__1475
12164     08 4E 05 F1 | 	add	fp, #8
12168     A7 12 02 FB | 	rdlong	arg01, fp
1216c     08 4E 85 F1 | 	sub	fp, #8
12170     3C B5 BF FD | 	call	#_convertstring
12174     FD 2A 02 F6 | 	mov	local03, result1
12178     60 00 90 FD | 	jmp	#LR__1477
1217c                 | LR__1475
1217c     10 4E 05 F1 | 	add	fp, #16
12180     A7 16 02 FB | 	rdlong	arg03, fp
12184     10 4E 85 F1 | 	sub	fp, #16
12188     1F 16 0E F2 | 	cmp	arg03, #31 wz
1218c     08 4E 05 A1 |  if_e	add	fp, #8
12190     A7 2A 02 AB |  if_e	rdlong	local03, fp
12194     08 4E 85 A1 |  if_e	sub	fp, #8
12198     40 00 90 AD |  if_e	jmp	#LR__1476
1219c                 | '     print "findfirst: "; : printerror(30) : return  
1219c     00 12 06 F6 | 	mov	arg01, #0
121a0     F0 79 B1 FD | 	call	#__system___getiolock_0622
121a4     FD 12 02 F6 | 	mov	arg01, result1
121a8     FC 2E B1 FD | 	call	#__system___lockmem
121ac     92 01 00 FF 
121b0     87 15 06 F6 | 	mov	arg02, ##@LR__5610
121b4     00 12 06 F6 | 	mov	arg01, #0
121b8     00 16 06 F6 | 	mov	arg03, #0
121bc     08 37 B1 FD | 	call	#__system___basic_print_string
121c0     00 12 06 F6 | 	mov	arg01, #0
121c4     CC 79 B1 FD | 	call	#__system___getiolock_0622
121c8     FD 00 68 FC | 	wrlong	#0, result1
121cc     1E 12 06 F6 | 	mov	arg01, #30
121d0     00 14 06 F6 | 	mov	arg02, #0
121d4     48 DA B0 FD | 	call	#_printerror
121d8     B8 00 90 FD | 	jmp	#LR__1482
121dc                 | LR__1476
121dc                 | LR__1477
121dc     92 01 00 FF 
121e0     93 29 06 F6 | 	mov	local02, ##@LR__5611
121e4     40 00 90 FD | 	jmp	#LR__1479
121e8                 | LR__1478
121e8                 | '   print "findfirst: "; : printerror(39) : return     
121e8     00 12 06 F6 | 	mov	arg01, #0
121ec     A4 79 B1 FD | 	call	#__system___getiolock_0622
121f0     FD 12 02 F6 | 	mov	arg01, result1
121f4     B0 2E B1 FD | 	call	#__system___lockmem
121f8     92 01 00 FF 
121fc     94 15 06 F6 | 	mov	arg02, ##@LR__5612
12200     00 12 06 F6 | 	mov	arg01, #0
12204     00 16 06 F6 | 	mov	arg03, #0
12208     BC 36 B1 FD | 	call	#__system___basic_print_string
1220c     00 12 06 F6 | 	mov	arg01, #0
12210     80 79 B1 FD | 	call	#__system___getiolock_0622
12214     FD 00 68 FC | 	wrlong	#0, result1
12218     27 12 06 F6 | 	mov	arg01, #39
1221c     00 14 06 F6 | 	mov	arg02, #0
12220     FC D9 B0 FD | 	call	#_printerror
12224     6C 00 90 FD | 	jmp	#LR__1482
12228                 | LR__1479
12228                 | LR__1480
12228                 | ' 
12228                 | ' if s2="" then
12228     92 01 00 FF 
1222c     A0 15 06 F6 | 	mov	arg02, ##@LR__5613
12230     14 13 02 F6 | 	mov	arg01, local02
12234     98 2E B1 FD | 	call	#__system___string_cmp
12238     00 FA 0D F2 | 	cmp	result1, #0 wz
1223c     31 2C 06 A6 |  if_e	mov	local04, #49
12240     24 00 90 AD |  if_e	jmp	#LR__1481
12244     14 13 02 F6 | 	mov	arg01, local02
12248     2C 45 B1 FD | 	call	#__system__LCase_S
1224c     FD 12 02 F6 | 	mov	arg01, result1
12250     92 01 00 FF 
12254     A1 15 06 F6 | 	mov	arg02, ##@LR__5614
12258     74 2E B1 FD | 	call	#__system___string_cmp
1225c     00 FA 0D F2 | 	cmp	result1, #0 wz
12260     10 2C 06 A6 |  if_e	mov	local04, #16
12264     21 2C 06 56 |  if_ne	mov	local04, #33
12268                 | LR__1481
12268     15 13 02 F6 | 	mov	arg01, local03
1226c     16 15 02 F6 | 	mov	arg02, local04
12270     D8 7A B1 FD | 	call	#__system___basic_dir
12274     FD 28 02 F6 | 	mov	local02, result1
12278     10 4E 05 F1 | 	add	fp, #16
1227c     A7 3E 68 FC | 	wrlong	#31, fp
12280     08 4E 85 F1 | 	sub	fp, #8
12284     A7 28 62 FC | 	wrlong	local02, fp
12288     A7 12 02 F6 | 	mov	arg01, fp
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     3C B3 BF FD | 	call	#_push
12294                 | LR__1482
12294     A7 F0 03 F6 | 	mov	ptra, fp
12298     B2 00 A0 FD | 	call	#popregs_
1229c                 | _do_findfirst_ret
1229c     2D 00 64 FD | 	ret
122a0                 | 
122a0                 | ' 
122a0                 | ' '-------------------- findnext
122a0                 | ' 
122a0                 | ' sub do_findnext
122a0                 | _do_findnext
122a0     00 4A 05 F6 | 	mov	COUNT_, #0
122a4     A8 00 A0 FD | 	call	#pushregs_
122a8     10 F0 07 F1 | 	add	ptra, #16
122ac                 | ' 
122ac                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
122ac     4A 00 00 FF 
122b0     A0 E4 05 F1 | 	add	objptr, ##38048
122b4     F2 16 02 FB | 	rdlong	arg03, objptr
122b8     0B 15 02 F6 | 	mov	arg02, arg03
122bc     01 14 66 F0 | 	shl	arg02, #1
122c0     0B 15 02 F1 | 	add	arg02, arg03
122c4     02 14 66 F0 | 	shl	arg02, #2
122c8     03 00 00 FF 
122cc     04 E4 85 F1 | 	sub	objptr, ##1540
122d0     F2 14 02 F1 | 	add	arg02, objptr
122d4     0A FB 01 FB | 	rdlong	result1, arg02
122d8     01 FA 15 F2 | 	cmp	result1, #1 wc
122dc     47 00 00 FF 
122e0     9C E4 85 F1 | 	sub	objptr, ##36508
122e4     40 00 90 CD |  if_b	jmp	#LR__1490
122e8     00 12 06 F6 | 	mov	arg01, #0
122ec     A4 78 B1 FD | 	call	#__system___getiolock_0622
122f0     FD 12 02 F6 | 	mov	arg01, result1
122f4     B0 2D B1 FD | 	call	#__system___lockmem
122f8     92 01 00 FF 
122fc     A5 15 06 F6 | 	mov	arg02, ##@LR__5615
12300     00 12 06 F6 | 	mov	arg01, #0
12304     00 16 06 F6 | 	mov	arg03, #0
12308     BC 35 B1 FD | 	call	#__system___basic_print_string
1230c     00 12 06 F6 | 	mov	arg01, #0
12310     80 78 B1 FD | 	call	#__system___getiolock_0622
12314     FD 00 68 FC | 	wrlong	#0, result1
12318     27 12 06 F6 | 	mov	arg01, #39
1231c     00 14 06 F6 | 	mov	arg02, #0
12320     FC D8 B0 FD | 	call	#_printerror
12324     28 00 90 FD | 	jmp	#LR__1491
12328                 | LR__1490
12328     00 12 06 F6 | 	mov	arg01, #0
1232c     00 14 06 F6 | 	mov	arg02, #0
12330     18 7A B1 FD | 	call	#__system___basic_dir
12334     FD 16 02 F6 | 	mov	arg03, result1
12338     08 4E 05 F1 | 	add	fp, #8
1233c     A7 3E 68 FC | 	wrlong	#31, fp
12340     08 4E 85 F1 | 	sub	fp, #8
12344     A7 16 62 FC | 	wrlong	arg03, fp
12348     A7 12 02 F6 | 	mov	arg01, fp
1234c     80 B2 BF FD | 	call	#_push
12350                 | LR__1491
12350     A7 F0 03 F6 | 	mov	ptra, fp
12354     B2 00 A0 FD | 	call	#popregs_
12358                 | _do_findnext_ret
12358     2D 00 64 FD | 	ret
1235c                 | 
1235c                 | ' 
1235c                 | ' '-------------------- font
1235c                 | ' 
1235c                 | ' sub do_font
1235c                 | _do_font
1235c     03 4A 05 F6 | 	mov	COUNT_, #3
12360     A8 00 A0 FD | 	call	#pushregs_
12364     D8 B1 BF FD | 	call	#_pop
12368     FD 26 02 F6 | 	mov	local01, result1
1236c     FE 28 02 F6 | 	mov	local02, result2
12370     FF 2A 02 F6 | 	mov	local03, result3
12374                 | ' 
12374                 | ' t1=pop() 
12374                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12374     1E 2A 0E F2 | 	cmp	local03, #30 wz
12378     10 00 90 5D |  if_ne	jmp	#LR__1500
1237c     13 13 02 F6 | 	mov	arg01, local01
12380     00 14 06 F6 | 	mov	arg02, #0
12384     78 50 B1 FD | 	call	#__system___float_tointeger
12388     FD 26 02 F6 | 	mov	local01, result1
1238c                 | LR__1500
1238c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1238c     1F 2A 0E F2 | 	cmp	local03, #31 wz
12390     18 00 90 5D |  if_ne	jmp	#LR__1501
12394     13 13 02 F6 | 	mov	arg01, local01
12398     9C 53 B1 FD | 	call	#__system____builtin_atof
1239c     FD 12 02 F6 | 	mov	arg01, result1
123a0     00 14 06 F6 | 	mov	arg02, #0
123a4     58 50 B1 FD | 	call	#__system___float_tointeger
123a8     FD 26 02 F6 | 	mov	local01, result1
123ac                 | LR__1501
123ac     37 00 00 FF 
123b0     60 E4 05 F1 | 	add	objptr, ##28256
123b4     F2 26 62 FC | 	wrlong	local01, objptr
123b8     37 00 00 FF 
123bc     60 E4 85 F1 | 	sub	objptr, ##28256
123c0     02 26 66 F0 | 	shl	local01, #2
123c4     13 13 02 F6 | 	mov	arg01, local01
123c8     C8 15 B1 FD | 	call	#_hg010b_spin2_setfontfamily
123cc     A7 F0 03 F6 | 	mov	ptra, fp
123d0     B2 00 A0 FD | 	call	#popregs_
123d4                 | _do_font_ret
123d4     2D 00 64 FD | 	ret
123d8                 | 
123d8                 | ' 
123d8                 | ' '-------------------- for
123d8                 | ' 
123d8                 | ' sub do_for()
123d8                 | _do_for
123d8     01 4A 05 F6 | 	mov	COUNT_, #1
123dc     A8 00 A0 FD | 	call	#pushregs_
123e0     10 F0 07 F1 | 	add	ptra, #16
123e4     50 00 00 FF 
123e8     50 E5 05 F1 | 	add	objptr, ##41296
123ec     F2 12 02 FB | 	rdlong	arg01, objptr
123f0     01 12 06 F1 | 	add	arg01, #1
123f4     F2 12 62 FC | 	wrlong	arg01, objptr
123f8     50 00 00 FF 
123fc     50 E5 85 F1 | 	sub	objptr, ##41296
12400     3C B1 BF FD | 	call	#_pop
12404     A7 FA 61 FC | 	wrlong	result1, fp
12408     04 4E 05 F1 | 	add	fp, #4
1240c     A7 FC 61 FC | 	wrlong	result2, fp
12410     04 4E 05 F1 | 	add	fp, #4
12414     A7 FE 61 FC | 	wrlong	result3, fp
12418     08 4E 85 F1 | 	sub	fp, #8
1241c     50 00 00 FF 
12420     50 E5 05 F1 | 	add	objptr, ##41296
12424     F2 12 02 FB | 	rdlong	arg01, objptr
12428     09 27 02 F6 | 	mov	local01, arg01
1242c     02 26 66 F0 | 	shl	local01, #2
12430     09 27 02 F1 | 	add	local01, arg01
12434     02 26 66 F0 | 	shl	local01, #2
12438     06 00 00 FF 
1243c     98 E4 85 F1 | 	sub	objptr, ##3224
12440     F2 26 02 F1 | 	add	local01, objptr
12444     A7 12 02 FB | 	rdlong	arg01, fp
12448     08 26 06 F1 | 	add	local01, #8
1244c     13 13 62 FC | 	wrlong	arg01, local01
12450     4A 00 00 FF 
12454     B8 E4 85 F1 | 	sub	objptr, ##38072
12458     E4 B0 BF FD | 	call	#_pop
1245c     A7 FA 61 FC | 	wrlong	result1, fp
12460     04 4E 05 F1 | 	add	fp, #4
12464     A7 FC 61 FC | 	wrlong	result2, fp
12468     04 4E 05 F1 | 	add	fp, #4
1246c     A7 FE 61 FC | 	wrlong	result3, fp
12470     08 4E 85 F1 | 	sub	fp, #8
12474     50 00 00 FF 
12478     50 E5 05 F1 | 	add	objptr, ##41296
1247c     F2 12 02 FB | 	rdlong	arg01, objptr
12480     09 27 02 F6 | 	mov	local01, arg01
12484     02 26 66 F0 | 	shl	local01, #2
12488     09 27 02 F1 | 	add	local01, arg01
1248c     02 26 66 F0 | 	shl	local01, #2
12490     06 00 00 FF 
12494     98 E4 85 F1 | 	sub	objptr, ##3224
12498     F2 26 02 F1 | 	add	local01, objptr
1249c     A7 12 02 F6 | 	mov	arg01, fp
124a0     4A 00 00 FF 
124a4     B8 E4 85 F1 | 	sub	objptr, ##38072
124a8     70 B2 BF FD | 	call	#_converttoint
124ac     FD 12 02 F6 | 	mov	arg01, result1
124b0     0C 26 06 F1 | 	add	local01, #12
124b4     13 13 62 FC | 	wrlong	arg01, local01
124b8     84 B0 BF FD | 	call	#_pop
124bc     A7 FA 61 FC | 	wrlong	result1, fp
124c0     04 4E 05 F1 | 	add	fp, #4
124c4     A7 FC 61 FC | 	wrlong	result2, fp
124c8     04 4E 05 F1 | 	add	fp, #4
124cc     A7 FE 61 FC | 	wrlong	result3, fp
124d0     08 4E 85 F1 | 	sub	fp, #8
124d4     50 00 00 FF 
124d8     50 E5 05 F1 | 	add	objptr, ##41296
124dc     F2 12 02 FB | 	rdlong	arg01, objptr
124e0     09 27 02 F6 | 	mov	local01, arg01
124e4     02 26 66 F0 | 	shl	local01, #2
124e8     09 27 02 F1 | 	add	local01, arg01
124ec     02 26 66 F0 | 	shl	local01, #2
124f0     06 00 00 FF 
124f4     98 E4 85 F1 | 	sub	objptr, ##3224
124f8     F2 26 02 F1 | 	add	local01, objptr
124fc     A7 12 02 F6 | 	mov	arg01, fp
12500     4A 00 00 FF 
12504     B8 E4 85 F1 | 	sub	objptr, ##38072
12508     10 B2 BF FD | 	call	#_converttoint
1250c     10 26 06 F1 | 	add	local01, #16
12510     13 FB 61 FC | 	wrlong	result1, local01
12514                 | ' fortop+=1
12514                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12514                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12514                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12514                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12514     4A 00 00 FF 
12518     A0 E4 05 F1 | 	add	objptr, ##38048
1251c     F2 12 02 FB | 	rdlong	arg01, objptr
12520     09 27 02 F6 | 	mov	local01, arg01
12524     01 26 66 F0 | 	shl	local01, #1
12528     09 27 02 F1 | 	add	local01, arg01
1252c     02 26 66 F0 | 	shl	local01, #2
12530     03 00 00 FF 
12534     04 E4 85 F1 | 	sub	objptr, ##1540
12538     F2 26 02 F1 | 	add	local01, objptr
1253c     08 26 06 F1 | 	add	local01, #8
12540     13 27 02 FB | 	rdlong	local01, local01
12544     FE 27 0E F2 | 	cmp	local01, #510 wz
12548     47 00 00 FF 
1254c     9C E4 85 F1 | 	sub	objptr, ##36508
12550     70 00 90 5D |  if_ne	jmp	#LR__1510
12554     50 00 00 FF 
12558     50 E5 05 F1 | 	add	objptr, ##41296
1255c     F2 12 02 FB | 	rdlong	arg01, objptr
12560     09 27 02 F6 | 	mov	local01, arg01
12564     02 26 66 F0 | 	shl	local01, #2
12568     09 27 02 F1 | 	add	local01, arg01
1256c     02 26 66 F0 | 	shl	local01, #2
12570     06 00 00 FF 
12574     98 E4 85 F1 | 	sub	objptr, ##3224
12578     F2 26 02 F1 | 	add	local01, objptr
1257c     06 00 00 FF 
12580     20 E4 05 F1 | 	add	objptr, ##3104
12584     F2 12 02 FB | 	rdlong	arg01, objptr
12588     13 13 62 FC | 	wrlong	arg01, local01
1258c     78 E4 05 F1 | 	add	objptr, #120
12590     F2 12 02 FB | 	rdlong	arg01, objptr
12594     09 27 02 F6 | 	mov	local01, arg01
12598     02 26 66 F0 | 	shl	local01, #2
1259c     09 27 02 F1 | 	add	local01, arg01
125a0     02 26 66 F0 | 	shl	local01, #2
125a4     06 00 00 FF 
125a8     98 E4 85 F1 | 	sub	objptr, ##3224
125ac     F2 26 02 F1 | 	add	local01, objptr
125b0     04 26 06 F1 | 	add	local01, #4
125b4     13 01 68 FC | 	wrlong	#0, local01
125b8     4A 00 00 FF 
125bc     B8 E4 85 F1 | 	sub	objptr, ##38072
125c0     78 00 90 FD | 	jmp	#LR__1511
125c4                 | LR__1510
125c4     50 00 00 FF 
125c8     50 E5 05 F1 | 	add	objptr, ##41296
125cc     F2 12 02 FB | 	rdlong	arg01, objptr
125d0     09 27 02 F6 | 	mov	local01, arg01
125d4     02 26 66 F0 | 	shl	local01, #2
125d8     09 27 02 F1 | 	add	local01, arg01
125dc     02 26 66 F0 | 	shl	local01, #2
125e0     06 00 00 FF 
125e4     98 E4 85 F1 | 	sub	objptr, ##3224
125e8     F2 26 02 F1 | 	add	local01, objptr
125ec     06 00 00 FF 
125f0     28 E4 05 F1 | 	add	objptr, ##3112
125f4     F2 12 02 FB | 	rdlong	arg01, objptr
125f8     13 13 62 FC | 	wrlong	arg01, local01
125fc     70 E4 05 F1 | 	add	objptr, #112
12600     F2 12 02 FB | 	rdlong	arg01, objptr
12604     09 27 02 F6 | 	mov	local01, arg01
12608     02 26 66 F0 | 	shl	local01, #2
1260c     09 27 02 F1 | 	add	local01, arg01
12610     02 26 66 F0 | 	shl	local01, #2
12614     06 00 00 FF 
12618     98 E4 85 F1 | 	sub	objptr, ##3224
1261c     F2 26 02 F1 | 	add	local01, objptr
12620     18 E4 85 F1 | 	sub	objptr, #24
12624     F2 12 02 FB | 	rdlong	arg01, objptr
12628     4A 00 00 FF 
1262c     A0 E4 85 F1 | 	sub	objptr, ##38048
12630     01 12 06 F1 | 	add	arg01, #1
12634     04 26 06 F1 | 	add	local01, #4
12638     13 13 62 FC | 	wrlong	arg01, local01
1263c                 | LR__1511
1263c     A7 F0 03 F6 | 	mov	ptra, fp
12640     B2 00 A0 FD | 	call	#popregs_
12644                 | _do_for_ret
12644     2D 00 64 FD | 	ret
12648                 | 
12648                 | ' 
12648                 | ' '-------------------- frame
12648                 | ' 
12648                 | ' sub do_frame
12648                 | _do_frame
12648     05 4A 05 F6 | 	mov	COUNT_, #5
1264c     A8 00 A0 FD | 	call	#pushregs_
12650     30 F0 07 F1 | 	add	ptra, #48
12654     E8 AE BF FD | 	call	#_pop
12658     FD 16 02 F6 | 	mov	arg03, result1
1265c     FE 14 02 F6 | 	mov	arg02, result2
12660     FF 1A 02 F6 | 	mov	arg05, result3
12664     24 4E 05 F1 | 	add	fp, #36
12668     A7 16 62 FC | 	wrlong	arg03, fp
1266c     04 4E 05 F1 | 	add	fp, #4
12670     A7 14 62 FC | 	wrlong	arg02, fp
12674     04 4E 05 F1 | 	add	fp, #4
12678     A7 1A 62 FC | 	wrlong	arg05, fp
1267c     2C 4E 85 F1 | 	sub	fp, #44
12680     BC AE BF FD | 	call	#_pop
12684     FD 16 02 F6 | 	mov	arg03, result1
12688     FE 14 02 F6 | 	mov	arg02, result2
1268c     FF 1A 02 F6 | 	mov	arg05, result3
12690     18 4E 05 F1 | 	add	fp, #24
12694     A7 16 62 FC | 	wrlong	arg03, fp
12698     04 4E 05 F1 | 	add	fp, #4
1269c     A7 14 62 FC | 	wrlong	arg02, fp
126a0     04 4E 05 F1 | 	add	fp, #4
126a4     A7 1A 62 FC | 	wrlong	arg05, fp
126a8     20 4E 85 F1 | 	sub	fp, #32
126ac     90 AE BF FD | 	call	#_pop
126b0     FD 16 02 F6 | 	mov	arg03, result1
126b4     FE 14 02 F6 | 	mov	arg02, result2
126b8     FF 1A 02 F6 | 	mov	arg05, result3
126bc     0C 4E 05 F1 | 	add	fp, #12
126c0     A7 16 62 FC | 	wrlong	arg03, fp
126c4     04 4E 05 F1 | 	add	fp, #4
126c8     A7 14 62 FC | 	wrlong	arg02, fp
126cc     04 4E 05 F1 | 	add	fp, #4
126d0     A7 1A 62 FC | 	wrlong	arg05, fp
126d4     14 4E 85 F1 | 	sub	fp, #20
126d8     64 AE BF FD | 	call	#_pop
126dc     FF 16 02 F6 | 	mov	arg03, result3
126e0     A7 FA 61 FC | 	wrlong	result1, fp
126e4     04 4E 05 F1 | 	add	fp, #4
126e8     A7 FC 61 FC | 	wrlong	result2, fp
126ec     04 4E 05 F1 | 	add	fp, #4
126f0     A7 16 62 FC | 	wrlong	arg03, fp
126f4     08 4E 85 F1 | 	sub	fp, #8
126f8     A7 12 02 F6 | 	mov	arg01, fp
126fc     1C B0 BF FD | 	call	#_converttoint
12700     FD 26 02 F6 | 	mov	local01, result1
12704     A7 12 02 F6 | 	mov	arg01, fp
12708     0C 12 06 F1 | 	add	arg01, #12
1270c     0C B0 BF FD | 	call	#_converttoint
12710     FD 28 02 F6 | 	mov	local02, result1
12714     A7 12 02 F6 | 	mov	arg01, fp
12718     18 12 06 F1 | 	add	arg01, #24
1271c     FC AF BF FD | 	call	#_converttoint
12720     FD 2A 02 F6 | 	mov	local03, result1
12724     A7 12 02 F6 | 	mov	arg01, fp
12728     24 12 06 F1 | 	add	arg01, #36
1272c     EC AF BF FD | 	call	#_converttoint
12730     37 00 00 FF 
12734     48 E4 05 F1 | 	add	objptr, ##28232
12738     F2 2C 02 FB | 	rdlong	local04, objptr
1273c     37 00 00 FF 
12740     48 E4 85 F1 | 	sub	objptr, ##28232
12744     FD 2E 02 F6 | 	mov	local05, result1
12748                 | ' 
12748                 | ' fastline(x1,x2,y1,c)
12748     13 13 02 F6 | 	mov	arg01, local01
1274c     15 15 02 F6 | 	mov	arg02, local03
12750     14 17 02 F6 | 	mov	arg03, local02
12754     16 19 02 F6 | 	mov	arg04, local04
12758     7C 0C B1 FD | 	call	#_hg010b_spin2_fastline
1275c                 | ' fastline(x1,x2,y2,c)
1275c     13 13 02 F6 | 	mov	arg01, local01
12760     15 15 02 F6 | 	mov	arg02, local03
12764     17 17 02 F6 | 	mov	arg03, local05
12768     16 19 02 F6 | 	mov	arg04, local04
1276c     68 0C B1 FD | 	call	#_hg010b_spin2_fastline
12770                 | ' line(x1,y1,x1,y2,c)
12770     13 13 02 F6 | 	mov	arg01, local01
12774     14 15 02 F6 | 	mov	arg02, local02
12778     13 17 02 F6 | 	mov	arg03, local01
1277c     17 19 02 F6 | 	mov	arg04, local05
12780     16 1B 02 F6 | 	mov	arg05, local04
12784                 | ' draw(x1,y1,x2,y2,c)
12784     68 0D B1 FD | 	call	#_hg010b_spin2_draw
12788                 | ' line(x2,y1,x2,y2,c)
12788     15 13 02 F6 | 	mov	arg01, local03
1278c     14 15 02 F6 | 	mov	arg02, local02
12790     15 17 02 F6 | 	mov	arg03, local03
12794     17 19 02 F6 | 	mov	arg04, local05
12798     16 1B 02 F6 | 	mov	arg05, local04
1279c                 | ' draw(x1,y1,x2,y2,c)
1279c     50 0D B1 FD | 	call	#_hg010b_spin2_draw
127a0     A7 F0 03 F6 | 	mov	ptra, fp
127a4     B2 00 A0 FD | 	call	#popregs_
127a8                 | _do_frame_ret
127a8     2D 00 64 FD | 	ret
127ac                 | 
127ac                 | ' 
127ac                 | ' '-------------------- framebuf
127ac                 | ' 
127ac                 | ' sub do_framebuf
127ac                 | _do_framebuf
127ac     00 4A 05 F6 | 	mov	COUNT_, #0
127b0     A8 00 A0 FD | 	call	#pushregs_
127b4     0C F0 07 F1 | 	add	ptra, #12
127b8     08 4E 05 F1 | 	add	fp, #8
127bc     A7 3A 68 FC | 	wrlong	#29, fp
127c0     F2 12 02 FB | 	rdlong	arg01, objptr
127c4     08 4E 85 F1 | 	sub	fp, #8
127c8     A7 12 62 FC | 	wrlong	arg01, fp
127cc     A7 12 02 F6 | 	mov	arg01, fp
127d0     FC AD BF FD | 	call	#_push
127d4     A7 F0 03 F6 | 	mov	ptra, fp
127d8     B2 00 A0 FD | 	call	#popregs_
127dc                 | _do_framebuf_ret
127dc     2D 00 64 FD | 	ret
127e0                 | 
127e0                 | ' '-------------------- fre
127e0                 | ' 
127e0                 | ' sub do_fre
127e0                 | _do_fre
127e0     01 4A 05 F6 | 	mov	COUNT_, #1
127e4     A8 00 A0 FD | 	call	#pushregs_
127e8     0C F0 07 F1 | 	add	ptra, #12
127ec     52 00 00 FF 
127f0     F0 E4 05 F1 | 	add	objptr, ##42224
127f4     F2 12 02 FB | 	rdlong	arg01, objptr
127f8     0F 00 00 FF 
127fc     74 E4 85 F1 | 	sub	objptr, ##7796
12800     F2 26 02 FB | 	rdlong	local01, objptr
12804     13 13 82 F1 | 	sub	arg01, local01
12808     0F 00 00 FF 
1280c     EC E4 05 F1 | 	add	objptr, ##7916
12810     F2 12 62 FC | 	wrlong	arg01, objptr
12814     08 4E 05 F1 | 	add	fp, #8
12818     A7 3A 68 FC | 	wrlong	#29, fp
1281c     08 4E 85 F1 | 	sub	fp, #8
12820     F2 26 02 FB | 	rdlong	local01, objptr
12824     52 00 00 FF 
12828     68 E5 85 F1 | 	sub	objptr, ##42344
1282c     A7 26 62 FC | 	wrlong	local01, fp
12830     A7 12 02 F6 | 	mov	arg01, fp
12834     98 AD BF FD | 	call	#_push
12838     A7 F0 03 F6 | 	mov	ptra, fp
1283c     B2 00 A0 FD | 	call	#popregs_
12840                 | _do_fre_ret
12840     2D 00 64 FD | 	ret
12844                 | 
12844                 | ' 
12844                 | ' '-------------------- get
12844                 | ' 
12844                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12844                 | _do_get
12844     10 4A 05 F6 | 	mov	COUNT_, #16
12848     A8 00 A0 FD | 	call	#pushregs_
1284c     40 F0 07 F1 | 	add	ptra, #64
12850     4A 00 00 FF 
12854     A0 E4 05 F1 | 	add	objptr, ##38048
12858     F2 1A 02 FB | 	rdlong	arg05, objptr
1285c     0D 27 02 F6 | 	mov	local01, arg05
12860     01 26 66 F0 | 	shl	local01, #1
12864     0D 27 02 F1 | 	add	local01, arg05
12868     02 26 66 F0 | 	shl	local01, #2
1286c     03 00 00 FF 
12870     04 E4 85 F1 | 	sub	objptr, ##1540
12874     F2 28 02 F6 | 	mov	local02, objptr
12878     F2 26 02 F1 | 	add	local01, objptr
1287c     13 2B 02 FB | 	rdlong	local03, local01
12880                 | ' 
12880                 | ' numpar=compiledline(lineptr_e).result.uresult
12880                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12880     04 2A 0E F2 | 	cmp	local03, #4 wz
12884     47 00 00 FF 
12888     9C E4 85 F1 | 	sub	objptr, ##36508
1288c     48 00 90 5D |  if_ne	jmp	#LR__1520
12890     AC AC BF FD | 	call	#_pop
12894     FF 1A 02 F6 | 	mov	arg05, result3
12898     1C 4E 05 F1 | 	add	fp, #28
1289c     A7 FA 61 FC | 	wrlong	result1, fp
128a0     04 4E 05 F1 | 	add	fp, #4
128a4     A7 FC 61 FC | 	wrlong	result2, fp
128a8     04 4E 05 F1 | 	add	fp, #4
128ac     A7 1A 62 FC | 	wrlong	arg05, fp
128b0     08 4E 85 F1 | 	sub	fp, #8
128b4     A7 12 02 F6 | 	mov	arg01, fp
128b8     1C 4E 85 F1 | 	sub	fp, #28
128bc     5C AE BF FD | 	call	#_converttoint
128c0     52 00 00 FF 
128c4     64 E5 05 F1 | 	add	objptr, ##42340
128c8     F2 FA 61 FC | 	wrlong	result1, objptr
128cc     52 00 00 FF 
128d0     64 E5 85 F1 | 	sub	objptr, ##42340
128d4     18 00 90 FD | 	jmp	#LR__1521
128d8                 | LR__1520
128d8     52 00 00 FF 
128dc     64 E5 05 F1 | 	add	objptr, ##42340
128e0     FF FF FF FF 
128e4     F2 FE 6B FC | 	wrlong	##-1, objptr
128e8     52 00 00 FF 
128ec     64 E5 85 F1 | 	sub	objptr, ##42340
128f0                 | LR__1521
128f0                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
128f0     03 2A 56 F2 | 	cmps	local03, #3 wc
128f4     38 00 90 CD |  if_b	jmp	#LR__1522
128f8     44 AC BF FD | 	call	#_pop
128fc     FF 26 02 F6 | 	mov	local01, result3
12900     1C 4E 05 F1 | 	add	fp, #28
12904     A7 FA 61 FC | 	wrlong	result1, fp
12908     04 4E 05 F1 | 	add	fp, #4
1290c     A7 FC 61 FC | 	wrlong	result2, fp
12910     04 4E 05 F1 | 	add	fp, #4
12914     A7 26 62 FC | 	wrlong	local01, fp
12918     08 4E 85 F1 | 	sub	fp, #8
1291c     A7 12 02 F6 | 	mov	arg01, fp
12920     1C 4E 85 F1 | 	sub	fp, #28
12924     F4 AD BF FD | 	call	#_converttoint
12928     FD 2C 02 F6 | 	mov	local04, result1
1292c     04 00 90 FD | 	jmp	#LR__1523
12930                 | LR__1522
12930     01 2C 06 F6 | 	mov	local04, #1
12934                 | LR__1523
12934                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12934     02 2A 56 F2 | 	cmps	local03, #2 wc
12938     34 00 90 CD |  if_b	jmp	#LR__1524
1293c     00 AC BF FD | 	call	#_pop
12940     FF 28 02 F6 | 	mov	local02, result3
12944     1C 4E 05 F1 | 	add	fp, #28
12948     A7 FA 61 FC | 	wrlong	result1, fp
1294c     04 4E 05 F1 | 	add	fp, #4
12950     A7 FC 61 FC | 	wrlong	result2, fp
12954     04 4E 05 F1 | 	add	fp, #4
12958     A7 28 62 FC | 	wrlong	local02, fp
1295c     08 4E 85 F1 | 	sub	fp, #8
12960     A7 12 02 F6 | 	mov	arg01, fp
12964     1C 4E 85 F1 | 	sub	fp, #28
12968     B0 AD BF FD | 	call	#_converttoint
1296c     FD 2E 02 F6 | 	mov	local05, result1
12970                 | LR__1524
12970     CC AB BF FD | 	call	#_pop
12974     FF 1A 02 F6 | 	mov	arg05, result3
12978     1C 4E 05 F1 | 	add	fp, #28
1297c     A7 FA 61 FC | 	wrlong	result1, fp
12980     04 4E 05 F1 | 	add	fp, #4
12984     A7 FC 61 FC | 	wrlong	result2, fp
12988     04 4E 05 F1 | 	add	fp, #4
1298c     A7 1A 62 FC | 	wrlong	arg05, fp
12990     08 4E 85 F1 | 	sub	fp, #8
12994     A7 12 02 F6 | 	mov	arg01, fp
12998     1C 4E 85 F1 | 	sub	fp, #28
1299c     7C AD BF FD | 	call	#_converttoint
129a0     FD 30 02 F6 | 	mov	local06, result1
129a4     02 32 66 F0 | 	shl	local07, #2
129a8     50 00 00 FF 
129ac     E4 E4 05 F1 | 	add	objptr, ##41188
129b0     F2 32 02 F1 | 	add	local07, objptr
129b4     19 01 68 FC | 	wrlong	#0, local07
129b8                 | ' t1=pop() : channel=converttoint(t1)
129b8                 | ' getres(j)=0
129b8                 | ' if pos>=0 then
129b8     02 00 00 FF 
129bc     80 E4 05 F1 | 	add	objptr, ##1152
129c0     F2 34 02 FB | 	rdlong	local08, objptr
129c4     52 00 00 FF 
129c8     64 E5 85 F1 | 	sub	objptr, ##42340
129cc     00 34 56 F2 | 	cmps	local08, #0 wc
129d0     28 01 90 CD |  if_b	jmp	#LR__1531
129d4                 | '   for i=0 to  amount/1024
129d4     00 36 06 F6 | 	mov	local09, #0
129d8     16 39 52 F6 | 	abs	local10, local04 wc
129dc     0A 38 46 F0 | 	shr	local10, #10
129e0     1C 39 82 F6 | 	negc	local10, local10
129e4     01 38 06 F1 | 	add	local10, #1
129e8                 | LR__1525
129e8     1C 37 52 F2 | 	cmps	local09, local10 wc
129ec     20 02 90 3D |  if_ae	jmp	#LR__1539
129f0                 | '     get #channel,pos+1,block(0),amount,r
129f0     52 00 00 FF 
129f4     64 E5 05 F1 | 	add	objptr, ##42340
129f8     F2 14 02 FB | 	rdlong	arg02, objptr
129fc     01 14 06 F1 | 	add	arg02, #1
12a00     04 00 00 FF 
12a04     90 E4 85 F1 | 	sub	objptr, ##2192
12a08     F2 16 02 F6 | 	mov	arg03, objptr
12a0c     4E 00 00 FF 
12a10     D4 E4 85 F1 | 	sub	objptr, ##40148
12a14     16 19 02 F6 | 	mov	arg04, local04
12a18     18 13 02 F6 | 	mov	arg01, local06
12a1c     01 1A 06 F6 | 	mov	arg05, #1
12a20     2C 30 B1 FD | 	call	#__system___basic_get
12a24     FD 3A 02 F6 | 	mov	local11, result1
12a28                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12a28     00 04 00 FF 
12a2c     00 2E 56 F2 | 	cmps	local05, ##524288 wc
12a30     48 00 90 3D |  if_ae	jmp	#LR__1527
12a34     00 32 06 F6 | 	mov	local07, #0
12a38     1D 3D 02 F6 | 	mov	local12, local11
12a3c                 | LR__1526
12a3c     1E 33 52 F2 | 	cmps	local07, local12 wc
12a40     80 00 90 3D |  if_ae	jmp	#LR__1530
12a44     17 13 02 F6 | 	mov	arg01, local05
12a48     1B 35 02 F6 | 	mov	local08, local09
12a4c     0A 34 66 F0 | 	shl	local08, #10
12a50     1A 13 02 F1 | 	add	arg01, local08
12a54     19 13 02 F1 | 	add	arg01, local07
12a58     19 29 02 F6 | 	mov	local02, local07
12a5c     F2 34 02 F6 | 	mov	local08, objptr
12a60     4E 00 00 FF 
12a64     D4 34 06 F1 | 	add	local08, ##40148
12a68     1A 29 02 F1 | 	add	local02, local08
12a6c     14 15 C2 FA | 	rdbyte	arg02, local02
12a70     09 15 42 FC | 	wrbyte	arg02, arg01
12a74     01 32 06 F1 | 	add	local07, #1
12a78     C0 FF 9F FD | 	jmp	#LR__1526
12a7c                 | LR__1527
12a7c     00 32 06 F6 | 	mov	local07, #0
12a80     1D 3F 02 F6 | 	mov	local13, local11
12a84                 | LR__1528
12a84     1F 33 52 F2 | 	cmps	local07, local13 wc
12a88     38 00 90 3D |  if_ae	jmp	#LR__1529
12a8c     17 13 02 F6 | 	mov	arg01, local05
12a90     1B 3D 02 F6 | 	mov	local12, local09
12a94     0A 3C 66 F0 | 	shl	local12, #10
12a98     1E 13 02 F1 | 	add	arg01, local12
12a9c     19 13 02 F1 | 	add	arg01, local07
12aa0     19 29 02 F6 | 	mov	local02, local07
12aa4     F2 3C 02 F6 | 	mov	local12, objptr
12aa8     4E 00 00 FF 
12aac     D4 3C 06 F1 | 	add	local12, ##40148
12ab0     1E 29 02 F1 | 	add	local02, local12
12ab4     14 15 C2 FA | 	rdbyte	arg02, local02
12ab8     90 D2 B0 FD | 	call	#_pspoke
12abc     01 32 06 F1 | 	add	local07, #1
12ac0     C0 FF 9F FD | 	jmp	#LR__1528
12ac4                 | LR__1529
12ac4                 | LR__1530
12ac4     19 3F 02 F6 | 	mov	local13, local07
12ac8     02 3E 66 F0 | 	shl	local13, #2
12acc     50 00 00 FF 
12ad0     E4 E4 05 F1 | 	add	objptr, ##41188
12ad4     F2 3E 02 F1 | 	add	local13, objptr
12ad8     02 32 66 F0 | 	shl	local07, #2
12adc     F2 32 02 F1 | 	add	local07, objptr
12ae0     19 27 02 FB | 	rdlong	local01, local07
12ae4     1D 27 02 F1 | 	add	local01, local11
12ae8     1F 27 62 FC | 	wrlong	local01, local13
12aec     01 36 06 F1 | 	add	local09, #1
12af0     50 00 00 FF 
12af4     E4 E4 85 F1 | 	sub	objptr, ##41188
12af8     EC FE 9F FD | 	jmp	#LR__1525
12afc                 | LR__1531
12afc                 | '   for i=0 to  amount/1024
12afc     00 36 06 F6 | 	mov	local09, #0
12b00     16 41 52 F6 | 	abs	local14, local04 wc
12b04     0A 40 46 F0 | 	shr	local14, #10
12b08     20 41 82 F6 | 	negc	local14, local14
12b0c     01 40 06 F1 | 	add	local14, #1
12b10                 | LR__1532
12b10     20 37 52 F2 | 	cmps	local09, local14 wc
12b14     F8 00 90 3D |  if_ae	jmp	#LR__1538
12b18                 | '     get #channel,,block(0),amount,r
12b18     F2 16 02 F6 | 	mov	arg03, objptr
12b1c     4E 00 00 FF 
12b20     D4 16 06 F1 | 	add	arg03, ##40148
12b24     16 19 02 F6 | 	mov	arg04, local04
12b28     18 13 02 F6 | 	mov	arg01, local06
12b2c     00 14 06 F6 | 	mov	arg02, #0
12b30     01 1A 06 F6 | 	mov	arg05, #1
12b34     18 2F B1 FD | 	call	#__system___basic_get
12b38     FD 3A 02 F6 | 	mov	local11, result1
12b3c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12b3c     00 04 00 FF 
12b40     00 2E 56 F2 | 	cmps	local05, ##524288 wc
12b44     48 00 90 3D |  if_ae	jmp	#LR__1534
12b48     00 32 06 F6 | 	mov	local07, #0
12b4c     1D 43 02 F6 | 	mov	local15, local11
12b50                 | LR__1533
12b50     21 33 52 F2 | 	cmps	local07, local15 wc
12b54     80 00 90 3D |  if_ae	jmp	#LR__1537
12b58     17 13 02 F6 | 	mov	arg01, local05
12b5c     1B 3F 02 F6 | 	mov	local13, local09
12b60     0A 3E 66 F0 | 	shl	local13, #10
12b64     1F 13 02 F1 | 	add	arg01, local13
12b68     19 13 02 F1 | 	add	arg01, local07
12b6c     19 29 02 F6 | 	mov	local02, local07
12b70     F2 3E 02 F6 | 	mov	local13, objptr
12b74     4E 00 00 FF 
12b78     D4 3E 06 F1 | 	add	local13, ##40148
12b7c     1F 29 02 F1 | 	add	local02, local13
12b80     14 15 C2 FA | 	rdbyte	arg02, local02
12b84     09 15 42 FC | 	wrbyte	arg02, arg01
12b88     01 32 06 F1 | 	add	local07, #1
12b8c     C0 FF 9F FD | 	jmp	#LR__1533
12b90                 | LR__1534
12b90     00 32 06 F6 | 	mov	local07, #0
12b94     1D 45 02 F6 | 	mov	local16, local11
12b98                 | LR__1535
12b98     22 33 52 F2 | 	cmps	local07, local16 wc
12b9c     38 00 90 3D |  if_ae	jmp	#LR__1536
12ba0     17 13 02 F6 | 	mov	arg01, local05
12ba4     1B 43 02 F6 | 	mov	local15, local09
12ba8     0A 42 66 F0 | 	shl	local15, #10
12bac     21 13 02 F1 | 	add	arg01, local15
12bb0     19 13 02 F1 | 	add	arg01, local07
12bb4     19 29 02 F6 | 	mov	local02, local07
12bb8     F2 42 02 F6 | 	mov	local15, objptr
12bbc     4E 00 00 FF 
12bc0     D4 42 06 F1 | 	add	local15, ##40148
12bc4     21 29 02 F1 | 	add	local02, local15
12bc8     14 15 C2 FA | 	rdbyte	arg02, local02
12bcc     7C D1 B0 FD | 	call	#_pspoke
12bd0     01 32 06 F1 | 	add	local07, #1
12bd4     C0 FF 9F FD | 	jmp	#LR__1535
12bd8                 | LR__1536
12bd8                 | LR__1537
12bd8     19 45 02 F6 | 	mov	local16, local07
12bdc     02 44 66 F0 | 	shl	local16, #2
12be0     50 00 00 FF 
12be4     E4 E4 05 F1 | 	add	objptr, ##41188
12be8     F2 44 02 F1 | 	add	local16, objptr
12bec     02 32 66 F0 | 	shl	local07, #2
12bf0     F2 32 02 F1 | 	add	local07, objptr
12bf4     19 27 02 FB | 	rdlong	local01, local07
12bf8     1D 27 02 F1 | 	add	local01, local11
12bfc     22 27 62 FC | 	wrlong	local01, local16
12c00     01 36 06 F1 | 	add	local09, #1
12c04     50 00 00 FF 
12c08     E4 E4 85 F1 | 	sub	objptr, ##41188
12c0c     00 FF 9F FD | 	jmp	#LR__1532
12c10                 | LR__1538
12c10                 | LR__1539
12c10     A7 F0 03 F6 | 	mov	ptra, fp
12c14     B2 00 A0 FD | 	call	#popregs_
12c18                 | _do_get_ret
12c18     2D 00 64 FD | 	ret
12c1c                 | 
12c1c                 | ' 
12c1c                 | ' '-------------------- getcolor
12c1c                 | ' 
12c1c                 | ' sub do_getcolor
12c1c                 | _do_getcolor
12c1c     00 4A 05 F6 | 	mov	COUNT_, #0
12c20     A8 00 A0 FD | 	call	#pushregs_
12c24     10 F0 07 F1 | 	add	ptra, #16
12c28     4A 00 00 FF 
12c2c     A0 E4 05 F1 | 	add	objptr, ##38048
12c30     F2 16 02 FB | 	rdlong	arg03, objptr
12c34     0B 15 02 F6 | 	mov	arg02, arg03
12c38     01 14 66 F0 | 	shl	arg02, #1
12c3c     0B 15 02 F1 | 	add	arg02, arg03
12c40     02 14 66 F0 | 	shl	arg02, #2
12c44     03 00 00 FF 
12c48     04 E4 85 F1 | 	sub	objptr, ##1540
12c4c     F2 14 02 F1 | 	add	arg02, objptr
12c50     0A 17 02 FB | 	rdlong	arg03, arg02
12c54                 | ' 
12c54                 | ' numpar=compiledline(lineptr_e).result.uresult
12c54                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12c54     02 16 16 F2 | 	cmp	arg03, #2 wc
12c58     47 00 00 FF 
12c5c     9C E4 85 F1 | 	sub	objptr, ##36508
12c60     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
12c64     40 00 90 4D |  if_c_and_nz	jmp	#LR__1540
12c68     00 12 06 F6 | 	mov	arg01, #0
12c6c     24 6F B1 FD | 	call	#__system___getiolock_0622
12c70     FD 12 02 F6 | 	mov	arg01, result1
12c74     30 24 B1 FD | 	call	#__system___lockmem
12c78     92 01 00 FF 
12c7c     B0 15 06 F6 | 	mov	arg02, ##@LR__5616
12c80     00 12 06 F6 | 	mov	arg01, #0
12c84     00 16 06 F6 | 	mov	arg03, #0
12c88     3C 2C B1 FD | 	call	#__system___basic_print_string
12c8c     00 12 06 F6 | 	mov	arg01, #0
12c90     00 6F B1 FD | 	call	#__system___getiolock_0622
12c94     FD 00 68 FC | 	wrlong	#0, result1
12c98     27 12 06 F6 | 	mov	arg01, #39
12c9c     00 14 06 F6 | 	mov	arg02, #0
12ca0     7C CF B0 FD | 	call	#_printerror
12ca4     60 00 90 FD | 	jmp	#LR__1541
12ca8                 | LR__1540
12ca8     94 A8 BF FD | 	call	#_pop
12cac     A7 FA 61 FC | 	wrlong	result1, fp
12cb0     04 4E 05 F1 | 	add	fp, #4
12cb4     A7 FC 61 FC | 	wrlong	result2, fp
12cb8     04 4E 05 F1 | 	add	fp, #4
12cbc     A7 FE 61 FC | 	wrlong	result3, fp
12cc0     08 4E 85 F1 | 	sub	fp, #8
12cc4     A7 12 02 F6 | 	mov	arg01, fp
12cc8     50 AA BF FD | 	call	#_converttoint
12ccc     FD 12 02 F6 | 	mov	arg01, result1
12cd0                 | ' 
12cd0                 | ' return long[palette_ptr+4*color]
12cd0     1C E4 05 F1 | 	add	objptr, #28
12cd4     F2 FA 01 FB | 	rdlong	result1, objptr
12cd8     1C E4 85 F1 | 	sub	objptr, #28
12cdc     02 12 66 F0 | 	shl	arg01, #2
12ce0     09 FB 01 F1 | 	add	result1, arg01
12ce4     FD FA 01 FB | 	rdlong	result1, result1
12ce8     08 FA C5 F0 | 	sar	result1, #8
12cec     F8 FA 05 F4 | 	bitl	result1, #248
12cf0     A7 FA 61 FC | 	wrlong	result1, fp
12cf4     08 4E 05 F1 | 	add	fp, #8
12cf8     A7 3A 68 FC | 	wrlong	#29, fp
12cfc     08 4E 85 F1 | 	sub	fp, #8
12d00     A7 12 02 F6 | 	mov	arg01, fp
12d04     C8 A8 BF FD | 	call	#_push
12d08                 | LR__1541
12d08     A7 F0 03 F6 | 	mov	ptra, fp
12d0c     B2 00 A0 FD | 	call	#popregs_
12d10                 | _do_getcolor_ret
12d10     2D 00 64 FD | 	ret
12d14                 | 
12d14                 | ' 
12d14                 | ' '-------------------- getenvsustain
12d14                 | ' 
12d14                 | ' sub do_getenvsustain
12d14                 | _do_getenvsustain
12d14     00 4A 05 F6 | 	mov	COUNT_, #0
12d18     A8 00 A0 FD | 	call	#pushregs_
12d1c     10 F0 07 F1 | 	add	ptra, #16
12d20     4A 00 00 FF 
12d24     A0 E4 05 F1 | 	add	objptr, ##38048
12d28     F2 16 02 FB | 	rdlong	arg03, objptr
12d2c     0B 15 02 F6 | 	mov	arg02, arg03
12d30     01 14 66 F0 | 	shl	arg02, #1
12d34     0B 15 02 F1 | 	add	arg02, arg03
12d38     02 14 66 F0 | 	shl	arg02, #2
12d3c     03 00 00 FF 
12d40     04 E4 85 F1 | 	sub	objptr, ##1540
12d44     F2 14 02 F1 | 	add	arg02, objptr
12d48     0A 17 02 FB | 	rdlong	arg03, arg02
12d4c                 | ' 
12d4c                 | ' numpar=compiledline(lineptr_e).result.uresult
12d4c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12d4c     02 16 16 F2 | 	cmp	arg03, #2 wc
12d50     47 00 00 FF 
12d54     9C E4 85 F1 | 	sub	objptr, ##36508
12d58     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
12d5c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12d60     00 12 06 F6 | 	mov	arg01, #0
12d64     2C 6E B1 FD | 	call	#__system___getiolock_0622
12d68     FD 12 02 F6 | 	mov	arg01, result1
12d6c     38 23 B1 FD | 	call	#__system___lockmem
12d70     92 01 00 FF 
12d74     BA 15 06 F6 | 	mov	arg02, ##@LR__5617
12d78     00 12 06 F6 | 	mov	arg01, #0
12d7c     00 16 06 F6 | 	mov	arg03, #0
12d80     44 2B B1 FD | 	call	#__system___basic_print_string
12d84     00 12 06 F6 | 	mov	arg01, #0
12d88     08 6E B1 FD | 	call	#__system___getiolock_0622
12d8c     FD 00 68 FC | 	wrlong	#0, result1
12d90     27 12 06 F6 | 	mov	arg01, #39
12d94     00 14 06 F6 | 	mov	arg02, #0
12d98     84 CE B0 FD | 	call	#_printerror
12d9c     60 00 90 FD | 	jmp	#LR__1551
12da0                 | LR__1550
12da0     9C A7 BF FD | 	call	#_pop
12da4     FD 16 02 F6 | 	mov	arg03, result1
12da8     FE 14 02 F6 | 	mov	arg02, result2
12dac     A7 16 62 FC | 	wrlong	arg03, fp
12db0     04 4E 05 F1 | 	add	fp, #4
12db4     A7 14 62 FC | 	wrlong	arg02, fp
12db8     04 4E 05 F1 | 	add	fp, #4
12dbc     A7 FE 61 FC | 	wrlong	result3, fp
12dc0     08 4E 85 F1 | 	sub	fp, #8
12dc4     A7 12 02 F6 | 	mov	arg01, fp
12dc8     50 A9 BF FD | 	call	#_converttoint
12dcc     FD 16 02 F6 | 	mov	arg03, result1
12dd0     01 16 66 F0 | 	shl	arg03, #1
12dd4     F2 14 02 F6 | 	mov	arg02, objptr
12dd8     52 00 00 FF 
12ddc     0C 15 06 F1 | 	add	arg02, ##42252
12de0     0A 17 02 F1 | 	add	arg03, arg02
12de4     0B FF E1 FA | 	rdword	result3, arg03
12de8     A7 FE 61 FC | 	wrlong	result3, fp
12dec     08 4E 05 F1 | 	add	fp, #8
12df0     A7 38 68 FC | 	wrlong	#28, fp
12df4     08 4E 85 F1 | 	sub	fp, #8
12df8     A7 12 02 F6 | 	mov	arg01, fp
12dfc     D0 A7 BF FD | 	call	#_push
12e00                 | LR__1551
12e00     A7 F0 03 F6 | 	mov	ptra, fp
12e04     B2 00 A0 FD | 	call	#popregs_
12e08                 | _do_getenvsustain_ret
12e08     2D 00 64 FD | 	ret
12e0c                 | 
12e0c                 | ' 
12e0c                 | ' '-------------------- getnotevalue
12e0c                 | ' 
12e0c                 | ' sub do_getnotevalue
12e0c                 | _do_getnotevalue
12e0c     02 4A 05 F6 | 	mov	COUNT_, #2
12e10     A8 00 A0 FD | 	call	#pushregs_
12e14     1C F0 07 F1 | 	add	ptra, #28
12e18     24 A7 BF FD | 	call	#_pop
12e1c     FF 14 02 F6 | 	mov	arg02, result3
12e20     10 4E 05 F1 | 	add	fp, #16
12e24     A7 FA 61 FC | 	wrlong	result1, fp
12e28     04 4E 05 F1 | 	add	fp, #4
12e2c     A7 FC 61 FC | 	wrlong	result2, fp
12e30     04 4E 05 F1 | 	add	fp, #4
12e34     A7 14 62 FC | 	wrlong	arg02, fp
12e38     08 4E 85 F1 | 	sub	fp, #8
12e3c     A7 12 02 F6 | 	mov	arg01, fp
12e40     10 4E 85 F1 | 	sub	fp, #16
12e44     D4 A8 BF FD | 	call	#_converttoint
12e48     FD 12 52 F6 | 	abs	arg01, result1 wc
12e4c     0C 12 16 FD | 	qdiv	arg01, #12
12e50     F2 12 02 F6 | 	mov	arg01, objptr
12e54     14 00 00 FF 
12e58     D8 12 06 F1 | 	add	arg01, ##10456
12e5c     19 FC 61 FD | 	getqy	result2
12e60     FE FC 81 F6 | 	negc	result2, result2
12e64     FD FA 51 F6 | 	abs	result1, result1 wc
12e68     0C FA 15 FD | 	qdiv	result1, #12
12e6c     02 FC 65 F0 | 	shl	result2, #2
12e70     09 FD 01 F1 | 	add	result2, arg01
12e74     FE 26 02 FB | 	rdlong	local01, result2
12e78     18 14 62 FD | 	getqx	arg02
12e7c     0A 13 82 F6 | 	negc	arg01, arg02
12e80     09 13 52 F6 | 	abs	arg01, arg01 wc
12e84     1F 28 C6 C9 |  if_b	decod	local02, #31
12e88     00 28 06 36 |  if_ae	mov	local02, #0
12e8c     E4 3C B1 FD | 	call	#__system___float_fromuns
12e90     14 FB 61 F5 | 	xor	result1, local02
12e94     FD 14 02 F6 | 	mov	arg02, result1
12e98     1E 12 C6 F9 | 	decod	arg01, #30
12e9c     B0 4E B1 FD | 	call	#__system____builtin_powf
12ea0     FD 12 02 F6 | 	mov	arg01, result1
12ea4     13 15 02 F6 | 	mov	arg02, local01
12ea8     C8 40 B1 FD | 	call	#__system___float_mul
12eac     FD 26 02 F6 | 	mov	local01, result1
12eb0     10 4E 05 F1 | 	add	fp, #16
12eb4     A7 26 62 FC | 	wrlong	local01, fp
12eb8     08 4E 05 F1 | 	add	fp, #8
12ebc     A7 3C 68 FC | 	wrlong	#30, fp
12ec0     08 4E 85 F1 | 	sub	fp, #8
12ec4     A7 12 02 F6 | 	mov	arg01, fp
12ec8     10 4E 85 F1 | 	sub	fp, #16
12ecc     00 A7 BF FD | 	call	#_push
12ed0     A7 F0 03 F6 | 	mov	ptra, fp
12ed4     B2 00 A0 FD | 	call	#popregs_
12ed8                 | _do_getnotevalue_ret
12ed8     2D 00 64 FD | 	ret
12edc                 | 
12edc                 | ' 
12edc                 | ' '-------------------- getpixel
12edc                 | ' 
12edc                 | ' sub do_getpixel
12edc                 | _do_getpixel
12edc     01 4A 05 F6 | 	mov	COUNT_, #1
12ee0     A8 00 A0 FD | 	call	#pushregs_
12ee4     24 F0 07 F1 | 	add	ptra, #36
12ee8     4A 00 00 FF 
12eec     A0 E4 05 F1 | 	add	objptr, ##38048
12ef0     F2 16 02 FB | 	rdlong	arg03, objptr
12ef4     0B 15 02 F6 | 	mov	arg02, arg03
12ef8     01 14 66 F0 | 	shl	arg02, #1
12efc     0B 15 02 F1 | 	add	arg02, arg03
12f00     02 14 66 F0 | 	shl	arg02, #2
12f04     03 00 00 FF 
12f08     04 E4 85 F1 | 	sub	objptr, ##1540
12f0c     F2 14 02 F1 | 	add	arg02, objptr
12f10     0A 17 02 FB | 	rdlong	arg03, arg02
12f14                 | ' 
12f14                 | ' numpar=compiledline(lineptr_e).result.uresult
12f14                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12f14     02 16 0E F2 | 	cmp	arg03, #2 wz
12f18     47 00 00 FF 
12f1c     9C E4 85 F1 | 	sub	objptr, ##36508
12f20     40 00 90 AD |  if_e	jmp	#LR__1560
12f24     00 12 06 F6 | 	mov	arg01, #0
12f28     68 6C B1 FD | 	call	#__system___getiolock_0622
12f2c     FD 12 02 F6 | 	mov	arg01, result1
12f30     74 21 B1 FD | 	call	#__system___lockmem
12f34     92 01 00 FF 
12f38     CA 15 06 F6 | 	mov	arg02, ##@LR__5618
12f3c     00 12 06 F6 | 	mov	arg01, #0
12f40     00 16 06 F6 | 	mov	arg03, #0
12f44     80 29 B1 FD | 	call	#__system___basic_print_string
12f48     00 12 06 F6 | 	mov	arg01, #0
12f4c     44 6C B1 FD | 	call	#__system___getiolock_0622
12f50     FD 00 68 FC | 	wrlong	#0, result1
12f54     27 12 06 F6 | 	mov	arg01, #39
12f58     00 14 06 F6 | 	mov	arg02, #0
12f5c     C0 CC B0 FD | 	call	#_printerror
12f60     98 00 90 FD | 	jmp	#LR__1561
12f64                 | LR__1560
12f64     D8 A5 BF FD | 	call	#_pop
12f68     FD 16 02 F6 | 	mov	arg03, result1
12f6c     FE 14 02 F6 | 	mov	arg02, result2
12f70     FF 12 02 F6 | 	mov	arg01, result3
12f74     0C 4E 05 F1 | 	add	fp, #12
12f78     A7 16 62 FC | 	wrlong	arg03, fp
12f7c     04 4E 05 F1 | 	add	fp, #4
12f80     A7 14 62 FC | 	wrlong	arg02, fp
12f84     04 4E 05 F1 | 	add	fp, #4
12f88     A7 12 62 FC | 	wrlong	arg01, fp
12f8c     14 4E 85 F1 | 	sub	fp, #20
12f90     AC A5 BF FD | 	call	#_pop
12f94     FF 16 02 F6 | 	mov	arg03, result3
12f98     A7 FA 61 FC | 	wrlong	result1, fp
12f9c     04 4E 05 F1 | 	add	fp, #4
12fa0     A7 FC 61 FC | 	wrlong	result2, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 16 62 FC | 	wrlong	arg03, fp
12fac     08 4E 85 F1 | 	sub	fp, #8
12fb0     A7 12 02 F6 | 	mov	arg01, fp
12fb4     64 A7 BF FD | 	call	#_converttoint
12fb8     FD 26 02 F6 | 	mov	local01, result1
12fbc     A7 12 02 F6 | 	mov	arg01, fp
12fc0     0C 12 06 F1 | 	add	arg01, #12
12fc4     54 A7 BF FD | 	call	#_converttoint
12fc8     FD 16 02 F6 | 	mov	arg03, result1
12fcc     F2 12 02 FB | 	rdlong	arg01, objptr
12fd0     13 13 02 F1 | 	add	arg01, local01
12fd4     0A 16 66 F0 | 	shl	arg03, #10
12fd8     0B 13 02 F1 | 	add	arg01, arg03
12fdc     B4 CD B0 FD | 	call	#_pspeek
12fe0     FD FA E1 F8 | 	getbyte	result1, result1, #0
12fe4     A7 FA 61 FC | 	wrlong	result1, fp
12fe8     08 4E 05 F1 | 	add	fp, #8
12fec     A7 3A 68 FC | 	wrlong	#29, fp
12ff0     08 4E 85 F1 | 	sub	fp, #8
12ff4     A7 12 02 F6 | 	mov	arg01, fp
12ff8     D4 A5 BF FD | 	call	#_push
12ffc                 | LR__1561
12ffc     A7 F0 03 F6 | 	mov	ptra, fp
13000     B2 00 A0 FD | 	call	#popregs_
13004                 | _do_getpixel_ret
13004     2D 00 64 FD | 	ret
13008                 | 
13008                 | ' 
13008                 | ' 
13008                 | ' sub do_getrealfreq
13008                 | _do_getrealfreq
13008     00 4A 05 F6 | 	mov	COUNT_, #0
1300c     A8 00 A0 FD | 	call	#pushregs_
13010     14 F0 07 F1 | 	add	ptra, #20
13014     4A 00 00 FF 
13018     A0 E4 05 F1 | 	add	objptr, ##38048
1301c     F2 16 02 FB | 	rdlong	arg03, objptr
13020     0B 15 02 F6 | 	mov	arg02, arg03
13024     01 14 66 F0 | 	shl	arg02, #1
13028     0B 15 02 F1 | 	add	arg02, arg03
1302c     02 14 66 F0 | 	shl	arg02, #2
13030     03 00 00 FF 
13034     04 E4 85 F1 | 	sub	objptr, ##1540
13038     F2 14 02 F1 | 	add	arg02, objptr
1303c     0A 17 02 FB | 	rdlong	arg03, arg02
13040                 | ' 
13040                 | ' numpar=compiledline(lineptr_e).result.uresult
13040                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
13040     01 16 0E F2 | 	cmp	arg03, #1 wz
13044     47 00 00 FF 
13048     9C E4 85 F1 | 	sub	objptr, ##36508
1304c     40 00 90 AD |  if_e	jmp	#LR__1570
13050     00 12 06 F6 | 	mov	arg01, #0
13054     3C 6B B1 FD | 	call	#__system___getiolock_0622
13058     FD 12 02 F6 | 	mov	arg01, result1
1305c     48 20 B1 FD | 	call	#__system___lockmem
13060     92 01 00 FF 
13064     D5 15 06 F6 | 	mov	arg02, ##@LR__5619
13068     00 12 06 F6 | 	mov	arg01, #0
1306c     00 16 06 F6 | 	mov	arg03, #0
13070     54 28 B1 FD | 	call	#__system___basic_print_string
13074     00 12 06 F6 | 	mov	arg01, #0
13078     18 6B B1 FD | 	call	#__system___getiolock_0622
1307c     FD 00 68 FC | 	wrlong	#0, result1
13080     27 12 06 F6 | 	mov	arg01, #39
13084     00 14 06 F6 | 	mov	arg02, #0
13088     94 CB B0 FD | 	call	#_printerror
1308c     78 00 90 FD | 	jmp	#LR__1571
13090                 | LR__1570
13090     AC A4 BF FD | 	call	#_pop
13094     FD 16 02 F6 | 	mov	arg03, result1
13098     04 4E 05 F1 | 	add	fp, #4
1309c     A7 16 62 FC | 	wrlong	arg03, fp
130a0     04 4E 05 F1 | 	add	fp, #4
130a4     A7 FC 61 FC | 	wrlong	result2, fp
130a8     04 4E 05 F1 | 	add	fp, #4
130ac     A7 FE 61 FC | 	wrlong	result3, fp
130b0     08 4E 85 F1 | 	sub	fp, #8
130b4     A7 12 02 F6 | 	mov	arg01, fp
130b8     04 4E 85 F1 | 	sub	fp, #4
130bc     5C A6 BF FD | 	call	#_converttoint
130c0     FD 14 02 F6 | 	mov	arg02, result1
130c4     03 14 66 F0 | 	shl	arg02, #3
130c8     FD 14 82 F1 | 	sub	arg02, result1
130cc     02 14 66 F0 | 	shl	arg02, #2
130d0     F2 16 02 F6 | 	mov	arg03, objptr
130d4     14 00 00 FF 
130d8     38 17 06 F1 | 	add	arg03, ##10552
130dc     0B 15 02 F1 | 	add	arg02, arg03
130e0     18 14 06 F1 | 	add	arg02, #24
130e4     0A 17 02 FB | 	rdlong	arg03, arg02
130e8     04 4E 05 F1 | 	add	fp, #4
130ec     A7 16 62 FC | 	wrlong	arg03, fp
130f0     08 4E 05 F1 | 	add	fp, #8
130f4     A7 3C 68 FC | 	wrlong	#30, fp
130f8     08 4E 85 F1 | 	sub	fp, #8
130fc     A7 12 02 F6 | 	mov	arg01, fp
13100     04 4E 85 F1 | 	sub	fp, #4
13104     C8 A4 BF FD | 	call	#_push
13108                 | LR__1571
13108     A7 F0 03 F6 | 	mov	ptra, fp
1310c     B2 00 A0 FD | 	call	#popregs_
13110                 | _do_getrealfreq_ret
13110     2D 00 64 FD | 	ret
13114                 | 
13114                 | ' 
13114                 | ' 
13114                 | ' '-------------------- gettime
13114                 | ' 
13114                 | ' sub do_gettime
13114                 | _do_gettime
13114     02 4A 05 F6 | 	mov	COUNT_, #2
13118     A8 00 A0 FD | 	call	#pushregs_
1311c     14 F0 07 F1 | 	add	ptra, #20
13120                 | ' 
13120                 | ' const asm 
13120     1A 26 72 FD | 	getct	local01 wc
13124     1A 28 62 FD | 	getct	local02
13128                 | ' return hi1, lo1
13128     14 FD 01 F6 | 	mov	result2, local02
1312c     13 FB 01 F6 | 	mov	result1, local01
13130     10 4E 05 F1 | 	add	fp, #16
13134     A7 3A 68 FC | 	wrlong	#29, fp
13138     08 4E 85 F1 | 	sub	fp, #8
1313c     A7 FC 61 FC | 	wrlong	result2, fp
13140     04 4E 05 F1 | 	add	fp, #4
13144     A7 FA 61 FC | 	wrlong	result1, fp
13148     04 4E 85 F1 | 	sub	fp, #4
1314c     A7 12 02 F6 | 	mov	arg01, fp
13150     08 4E 85 F1 | 	sub	fp, #8
13154     78 A4 BF FD | 	call	#_push
13158     A7 F0 03 F6 | 	mov	ptra, fp
1315c     B2 00 A0 FD | 	call	#popregs_
13160                 | _do_gettime_ret
13160     2D 00 64 FD | 	ret
13164                 | 
13164                 | ' 
13164                 | ' '-------------------- gosub
13164                 | ' 
13164                 | ' sub do_gosub()
13164                 | _do_gosub
13164     50 00 00 FF 
13168     54 E5 05 F1 | 	add	objptr, ##41300
1316c     F2 00 02 FB | 	rdlong	_var01, objptr
13170     01 00 06 F1 | 	add	_var01, #1
13174     F2 00 62 FC | 	wrlong	_var01, objptr
13178                 | ' gosubtop+=1
13178                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13178     06 00 00 FF 
1317c     B4 E4 85 F1 | 	sub	objptr, ##3252
13180     F2 00 02 FB | 	rdlong	_var01, objptr
13184     01 00 06 F1 | 	add	_var01, #1
13188     00 03 02 F6 | 	mov	_var02, _var01
1318c     01 02 66 F0 | 	shl	_var02, #1
13190     00 03 02 F1 | 	add	_var02, _var01
13194     02 02 66 F0 | 	shl	_var02, #2
13198     03 00 00 FF 
1319c     04 E4 85 F1 | 	sub	objptr, ##1540
131a0     F2 02 02 F1 | 	add	_var02, objptr
131a4     08 02 06 F1 | 	add	_var02, #8
131a8     01 03 02 FB | 	rdlong	_var02, _var02
131ac     FE 03 0E F2 | 	cmp	_var02, #510 wz
131b0     47 00 00 FF 
131b4     9C E4 85 F1 | 	sub	objptr, ##36508
131b8     58 00 90 5D |  if_ne	jmp	#LR__1580
131bc     50 00 00 FF 
131c0     54 E5 05 F1 | 	add	objptr, ##41300
131c4     F2 02 02 FB | 	rdlong	_var02, objptr
131c8     03 02 66 F0 | 	shl	_var02, #3
131cc     03 00 00 FF 
131d0     88 E5 85 F1 | 	sub	objptr, ##1928
131d4     F2 02 02 F1 | 	add	_var02, objptr
131d8     03 00 00 FF 
131dc     0C E5 05 F1 | 	add	objptr, ##1804
131e0     F2 00 02 FB | 	rdlong	_var01, objptr
131e4     01 01 62 FC | 	wrlong	_var01, _var02
131e8     7C E4 05 F1 | 	add	objptr, #124
131ec     F2 02 02 FB | 	rdlong	_var02, objptr
131f0     03 02 66 F0 | 	shl	_var02, #3
131f4     03 00 00 FF 
131f8     88 E5 85 F1 | 	sub	objptr, ##1928
131fc     F2 02 02 F1 | 	add	_var02, objptr
13200     04 02 06 F1 | 	add	_var02, #4
13204     01 01 68 FC | 	wrlong	#0, _var02
13208     4C 00 00 FF 
1320c     CC E5 85 F1 | 	sub	objptr, ##39372
13210     64 00 90 FD | 	jmp	#LR__1581
13214                 | LR__1580
13214     50 00 00 FF 
13218     54 E5 05 F1 | 	add	objptr, ##41300
1321c     F2 02 02 FB | 	rdlong	_var02, objptr
13220     03 02 66 F0 | 	shl	_var02, #3
13224     03 00 00 FF 
13228     88 E5 85 F1 | 	sub	objptr, ##1928
1322c     F2 02 02 F1 | 	add	_var02, objptr
13230     03 00 00 FF 
13234     14 E5 05 F1 | 	add	objptr, ##1812
13238     F2 00 02 FB | 	rdlong	_var01, objptr
1323c     01 01 62 FC | 	wrlong	_var01, _var02
13240     74 E4 05 F1 | 	add	objptr, #116
13244     F2 02 02 FB | 	rdlong	_var02, objptr
13248     03 02 66 F0 | 	shl	_var02, #3
1324c     03 00 00 FF 
13250     88 E5 85 F1 | 	sub	objptr, ##1928
13254     F2 02 02 F1 | 	add	_var02, objptr
13258     02 00 00 FF 
1325c     2C E5 85 F1 | 	sub	objptr, ##1324
13260     F2 00 02 FB | 	rdlong	_var01, objptr
13264     4A 00 00 FF 
13268     A0 E4 85 F1 | 	sub	objptr, ##38048
1326c     02 00 06 F1 | 	add	_var01, #2
13270     04 02 06 F1 | 	add	_var02, #4
13274     01 01 62 FC | 	wrlong	_var01, _var02
13278                 | LR__1581
13278                 | _do_gosub_ret
13278     2D 00 64 FD | 	ret
1327c                 | 
1327c                 | ' 
1327c                 | ' '--------------------- goto
1327c                 | ' 
1327c                 | ' '------- fast goto
1327c                 | ' 
1327c                 | ' sub do_fast_goto
1327c                 | _do_fast_goto
1327c     02 4A 05 F6 | 	mov	COUNT_, #2
13280     A8 00 A0 FD | 	call	#pushregs_
13284                 | _do_fast_goto_enter
13284     4A 00 00 FF 
13288     A0 E4 05 F1 | 	add	objptr, ##38048
1328c     F2 12 02 FB | 	rdlong	arg01, objptr
13290     09 27 02 F6 | 	mov	local01, arg01
13294     01 26 66 F0 | 	shl	local01, #1
13298     09 27 02 F1 | 	add	local01, arg01
1329c     02 26 66 F0 | 	shl	local01, #2
132a0     03 00 00 FF 
132a4     04 E4 85 F1 | 	sub	objptr, ##1540
132a8     F2 26 02 F1 | 	add	local01, objptr
132ac     13 29 02 FB | 	rdlong	local02, local01
132b0     14 13 02 F6 | 	mov	arg01, local02
132b4     47 00 00 FF 
132b8     9C E4 85 F1 | 	sub	objptr, ##36508
132bc     1C CB B0 FD | 	call	#_pslpeek
132c0     FD 12 02 F6 | 	mov	arg01, result1
132c4                 | ' 
132c4                 | ' testptr=compiledline(lineptr_e).result.uresult
132c4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
132c4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
132c4     4A 00 00 FF 
132c8     A0 E4 05 F1 | 	add	objptr, ##38048
132cc     F2 FA 01 FB | 	rdlong	result1, objptr
132d0     FD 26 02 F6 | 	mov	local01, result1
132d4     01 26 66 F0 | 	shl	local01, #1
132d8     FD 26 02 F1 | 	add	local01, result1
132dc     02 26 66 F0 | 	shl	local01, #2
132e0     03 00 00 FF 
132e4     04 E4 85 F1 | 	sub	objptr, ##1540
132e8     F2 26 02 F1 | 	add	local01, objptr
132ec     04 26 06 F1 | 	add	local01, #4
132f0     13 27 02 FB | 	rdlong	local01, local01
132f4     13 13 0A F2 | 	cmp	arg01, local01 wz
132f8     47 00 00 FF 
132fc     9C E4 85 F1 | 	sub	objptr, ##36508
13300     58 00 90 5D |  if_ne	jmp	#LR__1590
13304     50 00 00 FF 
13308     D8 E4 05 F1 | 	add	objptr, ##41176
1330c     F2 28 62 FC | 	wrlong	local02, objptr
13310     06 00 00 FF 
13314     3C E4 85 F1 | 	sub	objptr, ##3132
13318     F2 28 02 FB | 	rdlong	local02, objptr
1331c     01 28 86 F1 | 	sub	local02, #1
13320     04 E4 05 F1 | 	add	objptr, #4
13324     F2 28 62 FC | 	wrlong	local02, objptr
13328                 | '   runptr=testptr
13328                 | '   lineptr_e=lineptr-1
13328                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13328     06 00 00 FF 
1332c     84 E4 05 F1 | 	add	objptr, ##3204
13330     F2 28 02 FB | 	rdlong	local02, objptr
13334     50 00 00 FF 
13338     24 E5 85 F1 | 	sub	objptr, ##41252
1333c     FF FF 3F FF 
13340     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13344     50 00 00 AF 
13348     24 E5 05 A1 |  if_e	add	objptr, ##41252
1334c     F2 00 68 AC |  if_e	wrlong	#0, objptr
13350     50 00 00 AF 
13354     24 E5 85 A1 |  if_e	sub	objptr, ##41252
13358     04 00 90 FD | 	jmp	#LR__1591
1335c                 | LR__1590
1335c     0C 00 B0 FD | 	call	#_do_find_goto
13360                 | LR__1591
13360     A7 F0 03 F6 | 	mov	ptra, fp
13364     B2 00 A0 FD | 	call	#popregs_
13368                 | _do_fast_goto_ret
13368     2D 00 64 FD | 	ret
1336c                 | 
1336c                 | ' 
1336c                 | ' '------- find goto  
1336c                 | ' 
1336c                 | ' sub do_find_goto
1336c                 | _do_find_goto
1336c     06 4A 05 F6 | 	mov	COUNT_, #6
13370     A8 00 A0 FD | 	call	#pushregs_
13374     24 F0 07 F1 | 	add	ptra, #36
13378                 | _do_find_goto_enter
13378     4A 00 00 FF 
1337c     A0 E4 05 F1 | 	add	objptr, ##38048
13380     F2 26 02 FB | 	rdlong	local01, objptr
13384     13 29 02 F6 | 	mov	local02, local01
13388     01 28 66 F0 | 	shl	local02, #1
1338c     13 29 02 F1 | 	add	local02, local01
13390     02 28 66 F0 | 	shl	local02, #2
13394     03 00 00 FF 
13398     04 E4 85 F1 | 	sub	objptr, ##1540
1339c     F2 2A 02 F6 | 	mov	local03, objptr
133a0     F2 28 02 F1 | 	add	local02, objptr
133a4     04 28 06 F1 | 	add	local02, #4
133a8     14 2D 02 FB | 	rdlong	local04, local02
133ac     03 00 00 FF 
133b0     0C E4 05 F1 | 	add	objptr, ##1548
133b4     F2 2E 02 FB | 	rdlong	local05, objptr
133b8                 | ' 
133b8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
133b8                 | ' gotoptr=programstart
133b8                 | ' do
133b8     3E 00 00 FF 
133bc     DC E5 85 F1 | 	sub	objptr, ##32220
133c0                 | LR__1600
133c0     A7 12 02 F6 | 	mov	arg01, fp
133c4     0C 12 06 F1 | 	add	arg01, #12
133c8     17 15 02 F6 | 	mov	arg02, local05
133cc     18 16 06 F6 | 	mov	arg03, #24
133d0     D0 14 B1 FD | 	call	#_psram_spin2_read1
133d4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
133d4                 | '   if gotoheader(0)<>$FFFFFFFF then
133d4     0C 4E 05 F1 | 	add	fp, #12
133d8     A7 28 02 FB | 	rdlong	local02, fp
133dc     0C 4E 85 F1 | 	sub	fp, #12
133e0     FF FF 7F FF 
133e4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
133e8     17 31 02 56 |  if_ne	mov	local06, local05
133ec     20 4E 05 51 |  if_ne	add	fp, #32
133f0     A7 2E 02 5B |  if_ne	rdlong	local05, fp
133f4     20 4E 85 51 |  if_ne	sub	fp, #32
133f8     20 4E 05 F1 | 	add	fp, #32
133fc     A7 28 02 FB | 	rdlong	local02, fp
13400     20 4E 85 F1 | 	sub	fp, #32
13404     FF FF 3F FF 
13408     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
1340c     0C 4E 05 51 |  if_ne	add	fp, #12
13410     A7 26 02 5B |  if_ne	rdlong	local01, fp
13414     0C 4E 85 51 |  if_ne	sub	fp, #12
13418     FF FF 7F 5F 
1341c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13420     0C 4E 05 51 |  if_ne	add	fp, #12
13424     13 2B 02 56 |  if_ne	mov	local03, local01
13428     0C 4E 85 51 |  if_ne	sub	fp, #12
1342c     16 2B 0A 52 |  if_ne	cmp	local03, local04 wz
13430     8C FF 9F 5D |  if_ne	jmp	#LR__1600
13434     0B 00 00 FF 
13438     CC E4 85 F1 | 	sub	objptr, ##5836
1343c                 | ' 
1343c                 | ' if gotoheader(0)=gotoline then
1343c     0C 4E 05 F1 | 	add	fp, #12
13440     A7 2E 02 FB | 	rdlong	local05, fp
13444     0C 4E 85 F1 | 	sub	fp, #12
13448     16 2F 0A F2 | 	cmp	local05, local04 wz
1344c     CC 00 90 5D |  if_ne	jmp	#LR__1601
13450     4A 00 00 FF 
13454     A0 E4 05 F1 | 	add	objptr, ##38048
13458     F2 26 02 FB | 	rdlong	local01, objptr
1345c     13 29 02 F6 | 	mov	local02, local01
13460     01 28 66 F0 | 	shl	local02, #1
13464     13 29 02 F1 | 	add	local02, local01
13468     02 28 66 F0 | 	shl	local02, #2
1346c     03 00 00 FF 
13470     04 E4 85 F1 | 	sub	objptr, ##1540
13474     F2 28 02 F1 | 	add	local02, objptr
13478     14 31 62 FC | 	wrlong	local06, local02
1347c     03 00 00 FF 
13480     04 E4 05 F1 | 	add	objptr, ##1540
13484     F2 26 02 FB | 	rdlong	local01, objptr
13488     13 29 02 F6 | 	mov	local02, local01
1348c     01 28 66 F0 | 	shl	local02, #1
13490     13 29 02 F1 | 	add	local02, local01
13494     02 28 66 F0 | 	shl	local02, #2
13498     03 00 00 FF 
1349c     04 E4 85 F1 | 	sub	objptr, ##1540
134a0     F2 28 02 F1 | 	add	local02, objptr
134a4     08 28 06 F1 | 	add	local02, #8
134a8     14 9D 68 FC | 	wrlong	#78, local02
134ac     03 00 00 FF 
134b0     04 E4 05 F1 | 	add	objptr, ##1540
134b4     F2 30 02 FB | 	rdlong	local06, objptr
134b8     18 13 02 F6 | 	mov	arg01, local06
134bc     01 12 66 F0 | 	shl	arg01, #1
134c0     18 13 02 F1 | 	add	arg01, local06
134c4     02 12 66 F0 | 	shl	arg01, #2
134c8     03 00 00 FF 
134cc     04 E4 85 F1 | 	sub	objptr, ##1540
134d0     F2 12 02 F1 | 	add	arg01, objptr
134d4     09 00 00 FF 
134d8     44 E4 05 F1 | 	add	objptr, ##4676
134dc     F2 14 02 FB | 	rdlong	arg02, objptr
134e0     02 2A 06 F6 | 	mov	local03, #2
134e4     18 2B 02 F1 | 	add	local03, local06
134e8     0B 00 00 FF 
134ec     5C E4 85 F1 | 	sub	objptr, ##5724
134f0     F2 16 02 FB | 	rdlong	arg03, objptr
134f4     0B 2B 02 FD | 	qmul	local03, arg03
134f8     39 00 00 FF 
134fc     B8 E5 85 F1 | 	sub	objptr, ##29624
13500     18 30 62 FD | 	getqx	local06
13504     18 15 02 F1 | 	add	arg02, local06
13508     34 14 B1 FD | 	call	#_psram_spin2_write
1350c     0B 00 00 FF 
13510     CC E4 85 F1 | 	sub	objptr, ##5836
13514     64 FD BF FD | 	call	#_do_fast_goto
13518     0C 00 90 FD | 	jmp	#LR__1602
1351c                 | LR__1601
1351c     26 12 06 F6 | 	mov	arg01, #38
13520     00 14 06 F6 | 	mov	arg02, #0
13524     F8 C6 B0 FD | 	call	#_printerror
13528                 | LR__1602
13528     A7 F0 03 F6 | 	mov	ptra, fp
1352c     B2 00 A0 FD | 	call	#popregs_
13530                 | _do_find_goto_ret
13530     2D 00 64 FD | 	ret
13534                 | 
13534                 | ' 
13534                 | ' '------- slow goto  
13534                 | ' 
13534                 | ' sub do_slow_goto
13534                 | _do_slow_goto
13534     05 4A 05 F6 | 	mov	COUNT_, #5
13538     A8 00 A0 FD | 	call	#pushregs_
1353c     30 F0 07 F1 | 	add	ptra, #48
13540     FC 9F BF FD | 	call	#_pop
13544     FF 26 02 F6 | 	mov	local01, result3
13548     24 4E 05 F1 | 	add	fp, #36
1354c     A7 FA 61 FC | 	wrlong	result1, fp
13550     04 4E 05 F1 | 	add	fp, #4
13554     A7 FC 61 FC | 	wrlong	result2, fp
13558     04 4E 05 F1 | 	add	fp, #4
1355c     A7 26 62 FC | 	wrlong	local01, fp
13560     08 4E 85 F1 | 	sub	fp, #8
13564     A7 12 02 F6 | 	mov	arg01, fp
13568     24 4E 85 F1 | 	sub	fp, #36
1356c     AC A1 BF FD | 	call	#_converttoint
13570     FD 28 02 F6 | 	mov	local02, result1
13574     4A 00 00 FF 
13578     A8 E4 05 F1 | 	add	objptr, ##38056
1357c     F2 2A 02 FB | 	rdlong	local03, objptr
13580                 | ' 
13580                 | ' t1=pop() : gotoline=converttoint(t1)
13580                 | ' gotoptr=programstart
13580                 | ' do
13580     3E 00 00 FF 
13584     DC E5 85 F1 | 	sub	objptr, ##32220
13588                 | LR__1610
13588     A7 12 02 F6 | 	mov	arg01, fp
1358c     0C 12 06 F1 | 	add	arg01, #12
13590     15 15 02 F6 | 	mov	arg02, local03
13594     18 16 06 F6 | 	mov	arg03, #24
13598     08 13 B1 FD | 	call	#_psram_spin2_read1
1359c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
1359c                 | '   if gotoheader(0)<>$FFFFFFFF then
1359c     0C 4E 05 F1 | 	add	fp, #12
135a0     A7 16 02 FB | 	rdlong	arg03, fp
135a4     0C 4E 85 F1 | 	sub	fp, #12
135a8     FF FF 7F FF 
135ac     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
135b0     15 2D 02 56 |  if_ne	mov	local04, local03
135b4     20 4E 05 51 |  if_ne	add	fp, #32
135b8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
135bc     20 4E 85 51 |  if_ne	sub	fp, #32
135c0     20 4E 05 F1 | 	add	fp, #32
135c4     A7 16 02 FB | 	rdlong	arg03, fp
135c8     20 4E 85 F1 | 	sub	fp, #32
135cc     FF FF 3F FF 
135d0     FF 17 0E F2 | 	cmp	arg03, ##2147483647 wz
135d4     0C 4E 05 51 |  if_ne	add	fp, #12
135d8     A7 26 02 5B |  if_ne	rdlong	local01, fp
135dc     0C 4E 85 51 |  if_ne	sub	fp, #12
135e0     FF FF 7F 5F 
135e4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
135e8     0C 4E 05 51 |  if_ne	add	fp, #12
135ec     13 2F 02 56 |  if_ne	mov	local05, local01
135f0     0C 4E 85 51 |  if_ne	sub	fp, #12
135f4     14 2F 0A 52 |  if_ne	cmp	local05, local02 wz
135f8     8C FF 9F 5D |  if_ne	jmp	#LR__1610
135fc     0B 00 00 FF 
13600     CC E4 85 F1 | 	sub	objptr, ##5836
13604                 | ' if gotoheader(0)=gotoline then  
13604     0C 4E 05 F1 | 	add	fp, #12
13608     A7 2E 02 FB | 	rdlong	local05, fp
1360c     0C 4E 85 F1 | 	sub	fp, #12
13610     14 2F 0A F2 | 	cmp	local05, local02 wz
13614     54 00 90 5D |  if_ne	jmp	#LR__1611
13618     50 00 00 FF 
1361c     D8 E4 05 F1 | 	add	objptr, ##41176
13620     F2 2C 62 FC | 	wrlong	local04, objptr
13624     06 00 00 FF 
13628     3C E4 85 F1 | 	sub	objptr, ##3132
1362c     F2 2E 02 FB | 	rdlong	local05, objptr
13630     01 2E 86 F1 | 	sub	local05, #1
13634     04 E4 05 F1 | 	add	objptr, #4
13638     F2 2E 62 FC | 	wrlong	local05, objptr
1363c                 | '    runptr=oldgotoptr
1363c                 | '    lineptr_e=lineptr-1
1363c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
1363c     06 00 00 FF 
13640     84 E4 05 F1 | 	add	objptr, ##3204
13644     F2 2E 02 FB | 	rdlong	local05, objptr
13648     50 00 00 FF 
1364c     24 E5 85 F1 | 	sub	objptr, ##41252
13650     FF FF 3F FF 
13654     FF 2F 0E F2 | 	cmp	local05, ##2147483647 wz
13658     50 00 00 AF 
1365c     24 E5 05 A1 |  if_e	add	objptr, ##41252
13660     F2 00 68 AC |  if_e	wrlong	#0, objptr
13664     50 00 00 AF 
13668     24 E5 85 A1 |  if_e	sub	objptr, ##41252
1366c                 | LR__1611
1366c     A7 F0 03 F6 | 	mov	ptra, fp
13670     B2 00 A0 FD | 	call	#popregs_
13674                 | _do_slow_goto_ret
13674     2D 00 64 FD | 	ret
13678                 | 
13678                 | ' 
13678                 | ' ' ----------------  hex$
13678                 | ' 
13678                 | ' sub do_hex
13678                 | _do_hex
13678     02 4A 05 F6 | 	mov	COUNT_, #2
1367c     A8 00 A0 FD | 	call	#pushregs_
13680     18 F0 07 F1 | 	add	ptra, #24
13684     4A 00 00 FF 
13688     A0 E4 05 F1 | 	add	objptr, ##38048
1368c     F2 16 02 FB | 	rdlong	arg03, objptr
13690     0B 15 02 F6 | 	mov	arg02, arg03
13694     01 14 66 F0 | 	shl	arg02, #1
13698     0B 15 02 F1 | 	add	arg02, arg03
1369c     02 14 66 F0 | 	shl	arg02, #2
136a0     03 00 00 FF 
136a4     04 E4 85 F1 | 	sub	objptr, ##1540
136a8     F2 14 02 F1 | 	add	arg02, objptr
136ac     0A 27 02 FB | 	rdlong	local01, arg02
136b0                 | ' 
136b0                 | ' numpar=compiledline(lineptr_e).result.uresult
136b0                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
136b0     03 26 16 F2 | 	cmp	local01, #3 wc
136b4     47 00 00 FF 
136b8     9C E4 85 F1 | 	sub	objptr, ##36508
136bc     00 26 0E C2 |  if_b	cmp	local01, #0 wz
136c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1620
136c4     00 12 06 F6 | 	mov	arg01, #0
136c8     C8 64 B1 FD | 	call	#__system___getiolock_0622
136cc     FD 12 02 F6 | 	mov	arg01, result1
136d0     D4 19 B1 FD | 	call	#__system___lockmem
136d4     92 01 00 FF 
136d8     E3 15 06 F6 | 	mov	arg02, ##@LR__5620
136dc     00 12 06 F6 | 	mov	arg01, #0
136e0     00 16 06 F6 | 	mov	arg03, #0
136e4     E0 21 B1 FD | 	call	#__system___basic_print_string
136e8     00 12 06 F6 | 	mov	arg01, #0
136ec     A4 64 B1 FD | 	call	#__system___getiolock_0622
136f0     FD 00 68 FC | 	wrlong	#0, result1
136f4     27 12 06 F6 | 	mov	arg01, #39
136f8     00 14 06 F6 | 	mov	arg02, #0
136fc     20 C5 B0 FD | 	call	#_printerror
13700     8C 00 90 FD | 	jmp	#LR__1623
13704                 | LR__1620
13704                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13704     02 26 0E F2 | 	cmp	local01, #2 wz
13708     30 00 90 5D |  if_ne	jmp	#LR__1621
1370c     30 9E BF FD | 	call	#_pop
13710     FF 26 02 F6 | 	mov	local01, result3
13714     A7 FA 61 FC | 	wrlong	result1, fp
13718     04 4E 05 F1 | 	add	fp, #4
1371c     A7 FC 61 FC | 	wrlong	result2, fp
13720     04 4E 05 F1 | 	add	fp, #4
13724     A7 26 62 FC | 	wrlong	local01, fp
13728     08 4E 85 F1 | 	sub	fp, #8
1372c     A7 12 02 F6 | 	mov	arg01, fp
13730     E8 9F BF FD | 	call	#_converttoint
13734     FD 28 02 F6 | 	mov	local02, result1
13738     04 00 90 FD | 	jmp	#LR__1622
1373c                 | LR__1621
1373c     08 28 06 F6 | 	mov	local02, #8
13740                 | LR__1622
13740     FC 9D BF FD | 	call	#_pop
13744     FF 26 02 F6 | 	mov	local01, result3
13748     A7 FA 61 FC | 	wrlong	result1, fp
1374c     04 4E 05 F1 | 	add	fp, #4
13750     A7 FC 61 FC | 	wrlong	result2, fp
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 26 62 FC | 	wrlong	local01, fp
1375c     08 4E 85 F1 | 	sub	fp, #8
13760     A7 12 02 F6 | 	mov	arg01, fp
13764     B4 9F BF FD | 	call	#_converttoint
13768     FD 12 02 F6 | 	mov	arg01, result1
1376c     14 15 02 F6 | 	mov	arg02, local02
13770     10 16 06 F6 | 	mov	arg03, #16
13774     44 2F B1 FD | 	call	#__system__Number_S
13778     A7 FA 61 FC | 	wrlong	result1, fp
1377c     08 4E 05 F1 | 	add	fp, #8
13780     A7 3E 68 FC | 	wrlong	#31, fp
13784     08 4E 85 F1 | 	sub	fp, #8
13788     A7 12 02 F6 | 	mov	arg01, fp
1378c     40 9E BF FD | 	call	#_push
13790                 | LR__1623
13790     A7 F0 03 F6 | 	mov	ptra, fp
13794     B2 00 A0 FD | 	call	#popregs_
13798                 | _do_hex_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | ' ' ----------------  if
1379c                 | ' 
1379c                 | ' sub do_if
1379c                 | _do_if
1379c     05 4A 05 F6 | 	mov	COUNT_, #5
137a0     A8 00 A0 FD | 	call	#pushregs_
137a4     98 9D BF FD | 	call	#_pop
137a8     FD 26 0A F6 | 	mov	local01, result1 wz
137ac     FE 28 02 F6 | 	mov	local02, result2
137b0     FF 2A 02 F6 | 	mov	local03, result3
137b4                 | ' t1=pop()
137b4                 | ' ' if uresult=0, jump over else
137b4                 | ' if t1.result.uresult = 0 then 
137b4     BC 00 90 5D |  if_ne	jmp	#LR__1632
137b8                 | '   for i=lineptr_e to lineptr-1
137b8     4A 00 00 FF 
137bc     A0 E4 05 F1 | 	add	objptr, ##38048
137c0     F2 2C 02 FB | 	rdlong	local04, objptr
137c4     04 E4 85 F1 | 	sub	objptr, #4
137c8     F2 2E 02 FB | 	rdlong	local05, objptr
137cc     4A 00 00 FF 
137d0     9C E4 85 F1 | 	sub	objptr, ##38044
137d4                 | LR__1630
137d4     17 2D 52 F2 | 	cmps	local04, local05 wc
137d8     78 00 90 3D |  if_ae	jmp	#LR__1631
137dc     16 FF 01 F6 | 	mov	result3, local04
137e0     01 FE 65 F0 | 	shl	result3, #1
137e4     16 FF 01 F1 | 	add	result3, local04
137e8     02 FE 65 F0 | 	shl	result3, #2
137ec     47 00 00 FF 
137f0     9C E4 05 F1 | 	add	objptr, ##36508
137f4     F2 FE 01 F1 | 	add	result3, objptr
137f8     FF 26 02 FB | 	rdlong	local01, result3
137fc     04 FE 05 F1 | 	add	result3, #4
13800     FF FC 01 FB | 	rdlong	result2, result3
13804     16 FF 01 F6 | 	mov	result3, local04
13808     01 FE 65 F0 | 	shl	result3, #1
1380c     16 FF 01 F1 | 	add	result3, local04
13810     02 FE 65 F0 | 	shl	result3, #2
13814     F2 FE 01 F1 | 	add	result3, objptr
13818     08 FE 05 F1 | 	add	result3, #8
1381c     FF FE 01 FB | 	rdlong	result3, result3
13820     FE 28 02 F6 | 	mov	local02, result2
13824     FF 2A 02 F6 | 	mov	local03, result3
13828                 | '     t1=compiledline(i)
13828                 | '     if t1.result_type=token_else then lineptr_e=i : return
13828     5A 2A 0E F2 | 	cmp	local03, #90 wz
1382c     47 00 00 FF 
13830     9C E4 85 F1 | 	sub	objptr, ##36508
13834     4A 00 00 AF 
13838     A0 E4 05 A1 |  if_e	add	objptr, ##38048
1383c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13840     4A 00 00 AF 
13844     A0 E4 85 A1 |  if_e	sub	objptr, ##38048
13848     28 00 90 AD |  if_e	jmp	#LR__1633
1384c     01 2C 06 F1 | 	add	local04, #1
13850     80 FF 9F FD | 	jmp	#LR__1630
13854                 | LR__1631
13854     4A 00 00 FF 
13858     9C E4 05 F1 | 	add	objptr, ##38044
1385c     F2 2E 02 FB | 	rdlong	local05, objptr
13860     01 2E 86 F1 | 	sub	local05, #1
13864     04 E4 05 F1 | 	add	objptr, #4
13868     F2 2E 62 FC | 	wrlong	local05, objptr
1386c     4A 00 00 FF 
13870     A0 E4 85 F1 | 	sub	objptr, ##38048
13874                 | LR__1632
13874                 | LR__1633
13874     A7 F0 03 F6 | 	mov	ptra, fp
13878     B2 00 A0 FD | 	call	#popregs_
1387c                 | _do_if_ret
1387c     2D 00 64 FD | 	ret
13880                 | 
13880                 | ' 
13880                 | ' ' ----------------  inkey$
13880                 | ' 
13880                 | ' sub do_inkey
13880                 | _do_inkey
13880     02 4A 05 F6 | 	mov	COUNT_, #2
13884     A8 00 A0 FD | 	call	#pushregs_
13888     0C F0 07 F1 | 	add	ptra, #12
1388c     8C 13 B1 FD | 	call	#_usbnew_spin2_get_key
13890     45 00 00 FF 
13894     94 E4 05 F1 | 	add	objptr, ##35476
13898     F2 FA 61 FC | 	wrlong	result1, objptr
1389c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
1389c     45 00 00 FF 
138a0     94 E4 85 F1 | 	sub	objptr, ##35476
138a4     00 FA 0D F2 | 	cmp	result1, #0 wz
138a8     94 00 90 AD |  if_e	jmp	#LR__1641
138ac     45 00 00 FF 
138b0     94 E4 05 F1 | 	add	objptr, ##35476
138b4     F2 1C 02 FB | 	rdlong	arg06, objptr
138b8     45 00 00 FF 
138bc     94 E4 85 F1 | 	sub	objptr, ##35476
138c0     00 00 40 FF 
138c4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
138c8     45 00 00 CF 
138cc     94 E4 05 C1 |  if_b	add	objptr, ##35476
138d0     F2 26 02 CB |  if_b	rdlong	local01, objptr
138d4     45 00 00 CF 
138d8     94 E4 85 C1 |  if_b	sub	objptr, ##35476
138dc     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
138e0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
138e4     58 00 90 3D |  if_ae	jmp	#LR__1641
138e8                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
138e8     50 00 00 FF 
138ec     5C E5 05 F1 | 	add	objptr, ##41308
138f0     F2 1C 02 FB | 	rdlong	arg06, objptr
138f4     50 00 00 FF 
138f8     5C E5 85 F1 | 	sub	objptr, ##41308
138fc     01 1C 0E F2 | 	cmp	arg06, #1 wz
13900     3C 00 90 5D |  if_ne	jmp	#LR__1640
13904     52 00 00 FF 
13908     FC E4 05 F1 | 	add	objptr, ##42236
1390c     F2 14 02 FB | 	rdlong	arg02, objptr
13910     04 E4 85 F1 | 	sub	objptr, #4
13914     F2 1A 02 FB | 	rdlong	arg05, objptr
13918     07 12 06 F6 | 	mov	arg01, #7
1391c     56 00 00 FF 
13920     44 16 06 F6 | 	mov	arg03, ##44100
13924     0C 18 C6 F9 | 	decod	arg04, #12
13928     01 1C 66 F6 | 	neg	arg06, #1
1392c     47 00 00 FF 
13930     2C E4 85 F1 | 	sub	objptr, ##36396
13934     B4 13 B1 FD | 	call	#_audio096_spin2_play
13938     0B 00 00 FF 
1393c     CC E4 85 F1 | 	sub	objptr, ##5836
13940                 | LR__1640
13940                 | LR__1641
13940                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13940     45 00 00 FF 
13944     94 E4 05 F1 | 	add	objptr, ##35476
13948     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1394c     45 00 00 FF 
13950     94 E4 85 F1 | 	sub	objptr, ##35476
13954     C8 01 90 AD |  if_e	jmp	#LR__1650
13958     45 00 00 FF 
1395c     94 E4 05 F1 | 	add	objptr, ##35476
13960     F2 1C 02 FB | 	rdlong	arg06, objptr
13964     45 00 00 FF 
13968     94 E4 85 F1 | 	sub	objptr, ##35476
1396c     00 00 40 FF 
13970     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13974     45 00 00 CF 
13978     94 E4 05 C1 |  if_b	add	objptr, ##35476
1397c     F2 26 02 CB |  if_b	rdlong	local01, objptr
13980     45 00 00 CF 
13984     94 E4 85 C1 |  if_b	sub	objptr, ##35476
13988     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1398c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13990     8C 01 90 3D |  if_ae	jmp	#LR__1650
13994                 | '   if leds and 2 = 2 then 
13994     52 00 00 FF 
13998     38 E5 05 F1 | 	add	objptr, ##42296
1399c     F2 26 0A FB | 	rdlong	local01, objptr wz
139a0     52 00 00 FF 
139a4     38 E5 85 F1 | 	sub	objptr, ##42296
139a8     4C 01 90 AD |  if_e	jmp	#LR__1649
139ac                 | '     if key>96 andalso key<123 then
139ac     45 00 00 FF 
139b0     94 E4 05 F1 | 	add	objptr, ##35476
139b4     F2 28 02 FB | 	rdlong	local02, objptr
139b8     45 00 00 FF 
139bc     94 E4 85 F1 | 	sub	objptr, ##35476
139c0     61 28 16 F2 | 	cmp	local02, #97 wc
139c4     38 00 90 CD |  if_b	jmp	#LR__1642
139c8     45 00 00 FF 
139cc     94 E4 05 F1 | 	add	objptr, ##35476
139d0     F2 26 02 FB | 	rdlong	local01, objptr
139d4     45 00 00 FF 
139d8     94 E4 85 F1 | 	sub	objptr, ##35476
139dc     7B 26 16 F2 | 	cmp	local01, #123 wc
139e0     45 00 00 CF 
139e4     94 E4 05 C1 |  if_b	add	objptr, ##35476
139e8     F2 28 02 CB |  if_b	rdlong	local02, objptr
139ec     20 28 86 C1 |  if_b	sub	local02, #32
139f0     F2 28 62 CC |  if_b	wrlong	local02, objptr
139f4     45 00 00 CF 
139f8     94 E4 85 C1 |  if_b	sub	objptr, ##35476
139fc     F8 00 90 CD |  if_b	jmp	#LR__1648
13a00                 | LR__1642
13a00     45 00 00 FF 
13a04     94 E4 05 F1 | 	add	objptr, ##35476
13a08     F2 28 02 FB | 	rdlong	local02, objptr
13a0c     45 00 00 FF 
13a10     94 E4 85 F1 | 	sub	objptr, ##35476
13a14     41 28 16 F2 | 	cmp	local02, #65 wc
13a18     38 00 90 CD |  if_b	jmp	#LR__1643
13a1c     45 00 00 FF 
13a20     94 E4 05 F1 | 	add	objptr, ##35476
13a24     F2 26 02 FB | 	rdlong	local01, objptr
13a28     45 00 00 FF 
13a2c     94 E4 85 F1 | 	sub	objptr, ##35476
13a30     5B 26 16 F2 | 	cmp	local01, #91 wc
13a34     45 00 00 CF 
13a38     94 E4 05 C1 |  if_b	add	objptr, ##35476
13a3c     F2 28 02 CB |  if_b	rdlong	local02, objptr
13a40     20 28 06 C1 |  if_b	add	local02, #32
13a44     F2 28 62 CC |  if_b	wrlong	local02, objptr
13a48     45 00 00 CF 
13a4c     94 E4 85 C1 |  if_b	sub	objptr, ##35476
13a50     A4 00 90 CD |  if_b	jmp	#LR__1647
13a54                 | LR__1643
13a54     45 00 00 FF 
13a58     94 E4 05 F1 | 	add	objptr, ##35476
13a5c     F2 28 02 FB | 	rdlong	local02, objptr
13a60     45 00 00 FF 
13a64     94 E4 85 F1 | 	sub	objptr, ##35476
13a68     17 28 16 F2 | 	cmp	local02, #23 wc
13a6c     38 00 90 CD |  if_b	jmp	#LR__1644
13a70     45 00 00 FF 
13a74     94 E4 05 F1 | 	add	objptr, ##35476
13a78     F2 26 02 FB | 	rdlong	local01, objptr
13a7c     45 00 00 FF 
13a80     94 E4 85 F1 | 	sub	objptr, ##35476
13a84     20 26 16 F2 | 	cmp	local01, #32 wc
13a88     45 00 00 CF 
13a8c     94 E4 05 C1 |  if_b	add	objptr, ##35476
13a90     F2 28 02 CB |  if_b	rdlong	local02, objptr
13a94     09 28 86 C1 |  if_b	sub	local02, #9
13a98     F2 28 62 CC |  if_b	wrlong	local02, objptr
13a9c     45 00 00 CF 
13aa0     94 E4 85 C1 |  if_b	sub	objptr, ##35476
13aa4     50 00 90 CD |  if_b	jmp	#LR__1646
13aa8                 | LR__1644
13aa8     45 00 00 FF 
13aac     94 E4 05 F1 | 	add	objptr, ##35476
13ab0     F2 28 02 FB | 	rdlong	local02, objptr
13ab4     45 00 00 FF 
13ab8     94 E4 85 F1 | 	sub	objptr, ##35476
13abc     0E 28 16 F2 | 	cmp	local02, #14 wc
13ac0     34 00 90 CD |  if_b	jmp	#LR__1645
13ac4     45 00 00 FF 
13ac8     94 E4 05 F1 | 	add	objptr, ##35476
13acc     F2 26 02 FB | 	rdlong	local01, objptr
13ad0     45 00 00 FF 
13ad4     94 E4 85 F1 | 	sub	objptr, ##35476
13ad8     17 26 16 F2 | 	cmp	local01, #23 wc
13adc     52 00 00 CF 
13ae0     3C E5 05 C1 |  if_b	add	objptr, ##42300
13ae4     F2 28 02 CB |  if_b	rdlong	local02, objptr
13ae8     27 28 06 C1 |  if_b	add	local02, #39
13aec     F2 28 62 CC |  if_b	wrlong	local02, objptr
13af0     52 00 00 CF 
13af4     3C E5 85 C1 |  if_b	sub	objptr, ##42300
13af8                 | LR__1645
13af8                 | LR__1646
13af8                 | LR__1647
13af8                 | LR__1648
13af8                 | LR__1649
13af8     45 00 00 FF 
13afc     94 E4 05 F1 | 	add	objptr, ##35476
13b00     F2 12 02 FB | 	rdlong	arg01, objptr
13b04     45 00 00 FF 
13b08     94 E4 85 F1 | 	sub	objptr, ##35476
13b0c     5C C3 B0 FD | 	call	#_scantochar
13b10     FD 12 02 F6 | 	mov	arg01, result1
13b14     14 2B B1 FD | 	call	#__system__Chr_S
13b18     A7 FA 61 FC | 	wrlong	result1, fp
13b1c     0C 00 90 FD | 	jmp	#LR__1651
13b20                 | LR__1650
13b20     92 01 00 FF 
13b24     EA 29 06 F6 | 	mov	local02, ##@LR__5621
13b28     A7 28 62 FC | 	wrlong	local02, fp
13b2c                 | LR__1651
13b2c     08 4E 05 F1 | 	add	fp, #8
13b30     A7 3E 68 FC | 	wrlong	#31, fp
13b34     08 4E 85 F1 | 	sub	fp, #8
13b38     A7 12 02 F6 | 	mov	arg01, fp
13b3c     90 9A BF FD | 	call	#_push
13b40     A7 F0 03 F6 | 	mov	ptra, fp
13b44     B2 00 A0 FD | 	call	#popregs_
13b48                 | _do_inkey_ret
13b48     2D 00 64 FD | 	ret
13b4c                 | 
13b4c                 | ' 
13b4c                 | ' ' ----------------  ink
13b4c                 | ' 
13b4c                 | ' sub do_ink
13b4c                 | _do_ink
13b4c     00 4A 05 F6 | 	mov	COUNT_, #0
13b50     A8 00 A0 FD | 	call	#pushregs_
13b54     0C F0 07 F1 | 	add	ptra, #12
13b58     E4 99 BF FD | 	call	#_pop
13b5c     FF 14 02 F6 | 	mov	arg02, result3
13b60     A7 FA 61 FC | 	wrlong	result1, fp
13b64     04 4E 05 F1 | 	add	fp, #4
13b68     A7 FC 61 FC | 	wrlong	result2, fp
13b6c     04 4E 05 F1 | 	add	fp, #4
13b70     A7 14 62 FC | 	wrlong	arg02, fp
13b74     08 4E 85 F1 | 	sub	fp, #8
13b78     A7 12 02 F6 | 	mov	arg01, fp
13b7c     9C 9B BF FD | 	call	#_converttoint
13b80     37 00 00 FF 
13b84     5C E4 05 F1 | 	add	objptr, ##28252
13b88     F2 FA 61 FC | 	wrlong	result1, objptr
13b8c     04 E4 85 F1 | 	sub	objptr, #4
13b90     F2 14 02 FB | 	rdlong	arg02, objptr
13b94                 | ' 
13b94                 | ' write_color:=ff
13b94     37 00 00 FF 
13b98     17 E4 85 F1 | 	sub	objptr, ##28183
13b9c     F2 FA 61 FC | 	wrlong	result1, objptr
13ba0                 | ' write_background:=bb
13ba0     04 E4 05 F1 | 	add	objptr, #4
13ba4     F2 14 62 FC | 	wrlong	arg02, objptr
13ba8     37 00 00 FF 
13bac     17 E4 05 F1 | 	add	objptr, ##28183
13bb0     F2 12 02 FB | 	rdlong	arg01, objptr
13bb4     37 00 00 FF 
13bb8     5C E4 85 F1 | 	sub	objptr, ##28252
13bbc     48 F5 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13bc0     A7 F0 03 F6 | 	mov	ptra, fp
13bc4     B2 00 A0 FD | 	call	#popregs_
13bc8                 | _do_ink_ret
13bc8     2D 00 64 FD | 	ret
13bcc                 | 
13bcc                 | ' 
13bcc                 | ' ' ----------------  int
13bcc                 | ' 
13bcc                 | ' sub do_int
13bcc                 | _do_int
13bcc     02 4A 05 F6 | 	mov	COUNT_, #2
13bd0     A8 00 A0 FD | 	call	#pushregs_
13bd4     10 F0 07 F1 | 	add	ptra, #16
13bd8     64 99 BF FD | 	call	#_pop
13bdc     FE 26 02 F6 | 	mov	local01, result2
13be0     FF 28 02 F6 | 	mov	local02, result3
13be4     A7 FA 61 FC | 	wrlong	result1, fp
13be8     04 4E 05 F1 | 	add	fp, #4
13bec     A7 26 62 FC | 	wrlong	local01, fp
13bf0     04 4E 05 F1 | 	add	fp, #4
13bf4     A7 28 62 FC | 	wrlong	local02, fp
13bf8                 | ' 
13bf8                 | ' t1=pop()
13bf8                 | ' select case t1.result_type
13bf8     08 4E 85 F1 | 	sub	fp, #8
13bfc     1E 28 0E F2 | 	cmp	local02, #30 wz
13c00     14 00 90 AD |  if_e	jmp	#LR__1660
13c04     1F 28 0E F2 | 	cmp	local02, #31 wz
13c08     20 00 90 AD |  if_e	jmp	#LR__1661
13c0c     2B 28 0E F2 | 	cmp	local02, #43 wz
13c10     34 00 90 AD |  if_e	jmp	#LR__1662
13c14     50 00 90 FD | 	jmp	#LR__1663
13c18                 | LR__1660
13c18     A7 12 02 FB | 	rdlong	arg01, fp
13c1c     00 14 06 F6 | 	mov	arg02, #0
13c20     DC 37 B1 FD | 	call	#__system___float_tointeger
13c24     A7 FA 61 FC | 	wrlong	result1, fp
13c28     3C 00 90 FD | 	jmp	#LR__1663
13c2c                 | LR__1661
13c2c     A7 12 02 FB | 	rdlong	arg01, fp
13c30     04 3B B1 FD | 	call	#__system____builtin_atof
13c34     FD 12 02 F6 | 	mov	arg01, result1
13c38     00 14 06 F6 | 	mov	arg02, #0
13c3c     C0 37 B1 FD | 	call	#__system___float_tointeger
13c40     A7 FA 61 FC | 	wrlong	result1, fp
13c44     20 00 90 FD | 	jmp	#LR__1663
13c48                 | LR__1662
13c48     A7 12 02 FB | 	rdlong	arg01, fp
13c4c     60 9A BF FD | 	call	#_convertstring
13c50     FD 12 02 F6 | 	mov	arg01, result1
13c54     E0 3A B1 FD | 	call	#__system____builtin_atof
13c58     FD 12 02 F6 | 	mov	arg01, result1
13c5c     00 14 06 F6 | 	mov	arg02, #0
13c60     9C 37 B1 FD | 	call	#__system___float_tointeger
13c64     A7 FA 61 FC | 	wrlong	result1, fp
13c68                 | LR__1663
13c68     08 4E 05 F1 | 	add	fp, #8
13c6c     A7 38 68 FC | 	wrlong	#28, fp
13c70     08 4E 85 F1 | 	sub	fp, #8
13c74     A7 12 02 F6 | 	mov	arg01, fp
13c78     54 99 BF FD | 	call	#_push
13c7c     A7 F0 03 F6 | 	mov	ptra, fp
13c80     B2 00 A0 FD | 	call	#popregs_
13c84                 | _do_int_ret
13c84     2D 00 64 FD | 	ret
13c88                 | 
13c88                 | ' 
13c88                 | ' ' ----------------  input
13c88                 | ' 
13c88                 | ' sub do_input
13c88                 | _do_input
13c88     1A 4A 05 F6 | 	mov	COUNT_, #26
13c8c     A8 00 A0 FD | 	call	#pushregs_
13c90     50 F1 07 F1 | 	add	ptra, #336
13c94     4A 00 00 FF 
13c98     A0 E4 05 F1 | 	add	objptr, ##38048
13c9c     F2 2C 02 FB | 	rdlong	local04, objptr
13ca0     16 2F 02 F6 | 	mov	local05, local04
13ca4     01 2E 66 F0 | 	shl	local05, #1
13ca8     16 2F 02 F1 | 	add	local05, local04
13cac     02 2E 66 F0 | 	shl	local05, #2
13cb0     03 00 00 FF 
13cb4     04 E4 85 F1 | 	sub	objptr, ##1540
13cb8     F2 30 02 F6 | 	mov	local06, objptr
13cbc     F2 2E 02 F1 | 	add	local05, objptr
13cc0     17 33 02 FB | 	rdlong	local07, local05
13cc4                 | ' 
13cc4                 | ' numpar=compiledline(lineptr_e).result.uresult
13cc4                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13cc4     01 32 16 F2 | 	cmp	local07, #1 wc
13cc8     47 00 00 FF 
13ccc     9C E4 85 F1 | 	sub	objptr, ##36508
13cd0     08 00 90 CD |  if_b	jmp	#LR__1670
13cd4     41 32 16 F2 | 	cmp	local07, #65 wc
13cd8     50 00 90 CD |  if_b	jmp	#LR__1671
13cdc                 | LR__1670
13cdc     00 12 06 F6 | 	mov	arg01, #0
13ce0     B0 5E B1 FD | 	call	#__system___getiolock_0622
13ce4     FD 12 02 F6 | 	mov	arg01, result1
13ce8     BC 13 B1 FD | 	call	#__system___lockmem
13cec     92 01 00 FF 
13cf0     EB 15 06 F6 | 	mov	arg02, ##@LR__5622
13cf4     00 12 06 F6 | 	mov	arg01, #0
13cf8     00 16 06 F6 | 	mov	arg03, #0
13cfc     C8 1B B1 FD | 	call	#__system___basic_print_string
13d00     00 12 06 F6 | 	mov	arg01, #0
13d04     8C 5E B1 FD | 	call	#__system___getiolock_0622
13d08     FD 00 68 FC | 	wrlong	#0, result1
13d0c     50 00 00 FF 
13d10     10 E5 05 F1 | 	add	objptr, ##41232
13d14     F2 14 02 FB | 	rdlong	arg02, objptr
13d18     50 00 00 FF 
13d1c     10 E5 85 F1 | 	sub	objptr, ##41232
13d20     27 12 06 F6 | 	mov	arg01, #39
13d24     F8 BE B0 FD | 	call	#_printerror
13d28     5C 08 90 FD | 	jmp	#LR__1717
13d2c                 | LR__1671
13d2c     19 35 02 F6 | 	mov	local08, local07
13d30     01 34 86 F1 | 	sub	local08, #1
13d34     3C E4 05 F1 | 	add	objptr, #60
13d38     F2 2C E2 FA | 	rdword	local04, objptr
13d3c     16 37 52 F6 | 	abs	local09, local04 wc
13d40     01 36 46 F0 | 	shr	local09, #1
13d44     1B 37 82 F6 | 	negc	local09, local09
13d48     02 E4 05 F1 | 	add	objptr, #2
13d4c     F2 38 C2 FA | 	rdbyte	local10, objptr
13d50     3E E4 85 F1 | 	sub	objptr, #62
13d54                 | ' i=numpar-1
13d54                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13d54                 | ' do
13d54                 | LR__1672
13d54     AC CA BE FD | 	call	#_edit
13d58     FD 3A 02 F6 | 	mov	local11, result1
13d5c                 | ' 
13d5c                 | '   line$=edit()
13d5c                 | ' 
13d5c                 | '   if v.cursor_y=cpy+1 then
13d5c     3E E4 05 F1 | 	add	objptr, #62
13d60     F2 16 C2 FA | 	rdbyte	arg03, objptr
13d64     3E E4 85 F1 | 	sub	objptr, #62
13d68     1C 2D 02 F6 | 	mov	local04, local10
13d6c     01 2C 06 F1 | 	add	local04, #1
13d70     16 17 0A F2 | 	cmp	arg03, local04 wz
13d74     5C 00 90 5D |  if_ne	jmp	#LR__1675
13d78     1D 13 02 F6 | 	mov	arg01, local11
13d7c     09 3D 02 F6 | 	mov	local12, arg01
13d80     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
13d84                 | LR__1673
13d84     1E FB C9 FA | 	rdbyte	result1, local12 wz
13d88     01 3C 06 51 |  if_ne	add	local12, #1
13d8c     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
13d90                 | LR__1674
13d90     09 3D 82 F1 | 	sub	local12, arg01
13d94     1E 15 02 F6 | 	mov	arg02, local12
13d98     1B 15 82 F1 | 	sub	arg02, local09
13d9c     37 00 00 FF 
13da0     54 E4 05 F1 | 	add	objptr, ##28244
13da4     F2 2C 02 FB | 	rdlong	local04, objptr
13da8     37 00 00 FF 
13dac     54 E4 85 F1 | 	sub	objptr, ##28244
13db0     16 15 02 F1 | 	add	arg02, local04
13db4     1D 13 02 F6 | 	mov	arg01, local11
13db8     38 27 B1 FD | 	call	#__system__Right_S
13dbc     FD 12 02 F6 | 	mov	arg01, result1
13dc0     34 2B B1 FD | 	call	#__system__RTrim_S
13dc4     FD 12 02 F6 | 	mov	arg01, result1
13dc8     6C 2A B1 FD | 	call	#__system__LTrim_S
13dcc     FD 3A 02 F6 | 	mov	local11, result1
13dd0     14 00 90 FD | 	jmp	#LR__1676
13dd4                 | LR__1675
13dd4     1D 13 02 F6 | 	mov	arg01, local11
13dd8     1C 2B B1 FD | 	call	#__system__RTrim_S
13ddc     FD 12 02 F6 | 	mov	arg01, result1
13de0     54 2A B1 FD | 	call	#__system__LTrim_S
13de4     FD 3A 02 F6 | 	mov	local11, result1
13de8                 | LR__1676
13de8                 | '   do
13de8                 | LR__1677
13de8     92 01 00 FF 
13dec     F6 17 06 F6 | 	mov	arg03, ##@LR__5623
13df0     01 12 06 F6 | 	mov	arg01, #1
13df4     1D 15 02 F6 | 	mov	arg02, local11
13df8     B4 2B B1 FD | 	call	#__system__Instr
13dfc     FD 3E 02 F6 | 	mov	local13, result1
13e00                 | '    comma=instr(1,line$,",")  
13e00                 | '    if comma>0  then 
13e00     01 3E 16 F2 | 	cmp	local13, #1 wc
13e04     48 00 90 CD |  if_b	jmp	#LR__1680
13e08     1F 15 02 F6 | 	mov	arg02, local13
13e0c     01 14 86 F1 | 	sub	arg02, #1
13e10     1D 13 02 F6 | 	mov	arg01, local11
13e14     54 26 B1 FD | 	call	#__system__Left_S
13e18     FD 40 02 F6 | 	mov	local14, result1
13e1c     1D 13 02 F6 | 	mov	arg01, local11
13e20     09 3D 02 F6 | 	mov	local12, arg01
13e24     97 06 48 FB | 	callpa	#(@LR__1679-@LR__1678)>>2,fcache_load_ptr_
13e28                 | LR__1678
13e28     1E FB C9 FA | 	rdbyte	result1, local12 wz
13e2c     01 3C 06 51 |  if_ne	add	local12, #1
13e30     F4 FF 9F 5D |  if_ne	jmp	#LR__1678
13e34                 | LR__1679
13e34     09 3D 82 F1 | 	sub	local12, arg01
13e38     1E 15 02 F6 | 	mov	arg02, local12
13e3c     1F 15 82 F1 | 	sub	arg02, local13
13e40     1D 13 02 F6 | 	mov	arg01, local11
13e44     AC 26 B1 FD | 	call	#__system__Right_S
13e48     FD 3A 02 F6 | 	mov	local11, result1
13e4c     1C 00 90 FD | 	jmp	#LR__1681
13e50                 | LR__1680
13e50     1D 13 02 F6 | 	mov	arg01, local11
13e54     A0 2A B1 FD | 	call	#__system__RTrim_S
13e58     FD 12 02 F6 | 	mov	arg01, result1
13e5c     D8 29 B1 FD | 	call	#__system__LTrim_S
13e60     FD 40 02 F6 | 	mov	local14, result1
13e64     92 01 00 FF 
13e68     F8 3B 06 F6 | 	mov	local11, ##@LR__5624
13e6c                 | LR__1681
13e6c     1A 15 02 F6 | 	mov	arg02, local08
13e70     02 14 66 F0 | 	shl	arg02, #2
13e74     A7 2C 02 F6 | 	mov	local04, fp
13e78     2C 2C 06 F1 | 	add	local04, #44
13e7c     16 15 02 F1 | 	add	arg02, local04
13e80     0A 41 62 FC | 	wrlong	local14, arg02
13e84     01 34 86 F1 | 	sub	local08, #1
13e88     00 34 56 F2 | 	cmps	local08, #0 wc
13e8c     18 00 90 CD |  if_b	jmp	#LR__1682
13e90     92 01 00 FF 
13e94     F9 15 06 F6 | 	mov	arg02, ##@LR__5625
13e98     1D 13 02 F6 | 	mov	arg01, local11
13e9c     30 12 B1 FD | 	call	#__system___string_cmp
13ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
13ea4     40 FF 9F 5D |  if_ne	jmp	#LR__1677
13ea8                 | LR__1682
13ea8     00 34 56 F2 | 	cmps	local08, #0 wc
13eac     A4 FE 9F 3D |  if_ae	jmp	#LR__1672
13eb0                 | ' 
13eb0                 | ' for i=0 to numpar-1
13eb0     00 34 06 F6 | 	mov	local08, #0
13eb4     19 43 02 F6 | 	mov	local15, local07
13eb8                 | LR__1683
13eb8     21 35 52 F2 | 	cmps	local08, local15 wc
13ebc     C8 06 90 3D |  if_ae	jmp	#LR__1716
13ec0                 | ' 
13ec0                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13ec0     1A 2F 02 F6 | 	mov	local05, local08
13ec4     02 2E 66 F0 | 	shl	local05, #2
13ec8     A7 30 02 F6 | 	mov	local06, fp
13ecc     2C 30 06 F1 | 	add	local06, #44
13ed0     18 2F 02 F1 | 	add	local05, local06
13ed4     17 13 02 FB | 	rdlong	arg01, local05
13ed8     38 2A BF FD | 	call	#_isnum
13edc     FD 30 02 F6 | 	mov	local06, result1
13ee0     1A 45 02 F6 | 	mov	local16, local08
13ee4     02 44 66 F0 | 	shl	local16, #2
13ee8     A7 46 02 F6 | 	mov	local17, fp
13eec     2C 46 06 F1 | 	add	local17, #44
13ef0     23 45 02 F1 | 	add	local16, local17
13ef4     22 13 02 FB | 	rdlong	arg01, local16
13ef8     04 2E BF FD | 	call	#_isint
13efc     07 FA 65 F7 | 	signx	result1, #7
13f00     FD 30 2A F5 | 	andn	local06, result1 wz
13f04     52 00 00 5F 
13f08     68 E5 05 51 |  if_ne	add	objptr, ##42344
13f0c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13f10     52 00 00 5F 
13f14     68 E5 85 51 |  if_ne	sub	objptr, ##42344
13f18                 | '   if isint(args(i)) then r=result_int 
13f18     1A 2D 02 F6 | 	mov	local04, local08
13f1c     02 2C 66 F0 | 	shl	local04, #2
13f20     A7 2E 02 F6 | 	mov	local05, fp
13f24     2C 2E 06 F1 | 	add	local05, #44
13f28     17 2D 02 F1 | 	add	local04, local05
13f2c     16 13 02 FB | 	rdlong	arg01, local04
13f30     CC 2D BF FD | 	call	#_isint
13f34     00 FA 0D F2 | 	cmp	result1, #0 wz
13f38     52 00 00 5F 
13f3c     68 E5 05 51 |  if_ne	add	objptr, ##42344
13f40     F2 38 68 5C |  if_ne	wrlong	#28, objptr
13f44     52 00 00 5F 
13f48     68 E5 85 51 |  if_ne	sub	objptr, ##42344
13f4c                 | '   if isdec(args(i)) then r=result_uint 
13f4c     1A 2D 02 F6 | 	mov	local04, local08
13f50     02 2C 66 F0 | 	shl	local04, #2
13f54     A7 2E 02 F6 | 	mov	local05, fp
13f58     2C 2E 06 F1 | 	add	local05, #44
13f5c     17 2D 02 F1 | 	add	local04, local05
13f60     16 13 02 FB | 	rdlong	arg01, local04
13f64     3C 30 BF FD | 	call	#_isdec
13f68     00 FA 0D F2 | 	cmp	result1, #0 wz
13f6c     52 00 00 5F 
13f70     68 E5 05 51 |  if_ne	add	objptr, ##42344
13f74     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13f78     52 00 00 5F 
13f7c     68 E5 85 51 |  if_ne	sub	objptr, ##42344
13f80                 | '   if not isnum(args(i)) then 
13f80     1A 2F 02 F6 | 	mov	local05, local08
13f84     02 2E 66 F0 | 	shl	local05, #2
13f88     A7 30 02 F6 | 	mov	local06, fp
13f8c     2C 30 06 F1 | 	add	local06, #44
13f90     18 2F 02 F1 | 	add	local05, local06
13f94     17 13 02 FB | 	rdlong	arg01, local05
13f98     78 29 BF FD | 	call	#_isnum
13f9c     07 FA 65 F7 | 	signx	result1, #7
13fa0     FD FA 21 F6 | 	not	result1, result1
13fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
13fa8     E8 00 90 AD |  if_e	jmp	#LR__1688
13fac     52 00 00 FF 
13fb0     68 E5 05 F1 | 	add	objptr, ##42344
13fb4     F2 56 68 FC | 	wrlong	#43, objptr
13fb8     52 00 00 FF 
13fbc     68 E5 85 F1 | 	sub	objptr, ##42344
13fc0     20 13 02 F6 | 	mov	arg01, local14
13fc4     09 3D 02 F6 | 	mov	local12, arg01
13fc8     97 06 48 FB | 	callpa	#(@LR__1685-@LR__1684)>>2,fcache_load_ptr_
13fcc                 | LR__1684
13fcc     1E FB C9 FA | 	rdbyte	result1, local12 wz
13fd0     01 3C 06 51 |  if_ne	add	local12, #1
13fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__1684
13fd8                 | LR__1685
13fd8     09 3D 82 F1 | 	sub	local12, arg01
13fdc     1E 49 02 F6 | 	mov	local18, local12
13fe0     52 00 00 FF 
13fe4     F0 E4 05 F1 | 	add	objptr, ##42224
13fe8     F2 12 02 FB | 	rdlong	arg01, objptr
13fec     24 13 82 F1 | 	sub	arg01, local18
13ff0     04 12 86 F1 | 	sub	arg01, #4
13ff4     03 12 26 F5 | 	andn	arg01, #3
13ff8     F2 12 62 FC | 	wrlong	arg01, objptr
13ffc     52 00 00 FF 
14000     F0 E4 85 F1 | 	sub	objptr, ##42224
14004     24 15 02 F6 | 	mov	arg02, local18
14008     B0 BC B0 FD | 	call	#_pslpoke
1400c                 | '     pslpoke memtop,l
1400c                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1400c     01 4A 06 F6 | 	mov	local19, #1
14010     24 4D 02 F6 | 	mov	local20, local18
14014     01 4C 06 F1 | 	add	local20, #1
14018                 | LR__1686
14018     26 4B 52 F2 | 	cmps	local19, local20 wc
1401c     60 00 90 3D |  if_ae	jmp	#LR__1687
14020     52 00 00 FF 
14024     F0 E4 05 F1 | 	add	objptr, ##42224
14028     F2 2C 02 FB | 	rdlong	local04, objptr
1402c     52 00 00 FF 
14030     F0 E4 85 F1 | 	sub	objptr, ##42224
14034     03 2C 06 F1 | 	add	local04, #3
14038     25 2D 02 F1 | 	add	local04, local19
1403c     1A 45 02 F6 | 	mov	local16, local08
14040     02 44 66 F0 | 	shl	local16, #2
14044     A7 46 02 F6 | 	mov	local17, fp
14048     2C 46 06 F1 | 	add	local17, #44
1404c     23 45 02 F1 | 	add	local16, local17
14050     22 13 02 FB | 	rdlong	arg01, local16
14054     25 31 02 F6 | 	mov	local06, local19
14058     01 44 06 F6 | 	mov	local16, #1
1405c     18 15 02 F6 | 	mov	arg02, local06
14060     01 16 06 F6 | 	mov	arg03, #1
14064     18 25 B1 FD | 	call	#__system__Mid_S
14068     FD 2E 02 F6 | 	mov	local05, result1
1406c     17 15 C2 FA | 	rdbyte	arg02, local05
14070     16 13 02 F6 | 	mov	arg01, local04
14074     D4 BC B0 FD | 	call	#_pspoke
14078     01 4A 06 F1 | 	add	local19, #1
1407c     98 FF 9F FD | 	jmp	#LR__1686
14080                 | LR__1687
14080     52 00 00 FF 
14084     F0 E4 05 F1 | 	add	objptr, ##42224
14088     F2 4E 02 FB | 	rdlong	local21, objptr
1408c     52 00 00 FF 
14090     F0 E4 85 F1 | 	sub	objptr, ##42224
14094                 | LR__1688
14094     A8 94 BF FD | 	call	#_pop
14098     FD 50 02 F6 | 	mov	local22, result1
1409c     FE 52 02 F6 | 	mov	local23, result2
140a0     FF 2C 02 F6 | 	mov	local04, result3
140a4     28 27 02 F6 | 	mov	local01, local22
140a8     29 29 02 F6 | 	mov	local02, local23
140ac     16 2B 02 F6 | 	mov	local03, local04
140b0     14 55 02 F6 | 	mov	local24, local02
140b4                 | '   t1=pop() : vartype=t1.result.twowords(1)
140b4                 | '   select case vartype
140b4     2A 57 0A F6 | 	mov	local25, local24 wz
140b8     64 00 90 AD |  if_e	jmp	#LR__1689
140bc     00 57 0E F2 | 	cmp	local25, #256 wz
140c0     64 00 90 AD |  if_e	jmp	#LR__1690
140c4     01 57 0E F2 | 	cmp	local25, #257 wz
140c8     64 00 90 AD |  if_e	jmp	#LR__1691
140cc     02 57 0E F2 | 	cmp	local25, #258 wz
140d0     64 00 90 AD |  if_e	jmp	#LR__1692
140d4     03 57 0E F2 | 	cmp	local25, #259 wz
140d8     64 00 90 AD |  if_e	jmp	#LR__1693
140dc     04 57 0E F2 | 	cmp	local25, #260 wz
140e0     64 00 90 AD |  if_e	jmp	#LR__1694
140e4     05 57 0E F2 | 	cmp	local25, #261 wz
140e8     64 00 90 AD |  if_e	jmp	#LR__1695
140ec     06 57 0E F2 | 	cmp	local25, #262 wz
140f0     64 00 90 AD |  if_e	jmp	#LR__1696
140f4     07 57 0E F2 | 	cmp	local25, #263 wz
140f8     64 00 90 AD |  if_e	jmp	#LR__1697
140fc     08 57 0E F2 | 	cmp	local25, #264 wz
14100     64 00 90 AD |  if_e	jmp	#LR__1698
14104     09 57 0E F2 | 	cmp	local25, #265 wz
14108     64 00 90 AD |  if_e	jmp	#LR__1699
1410c     0A 57 0E F2 | 	cmp	local25, #266 wz
14110     64 00 90 AD |  if_e	jmp	#LR__1700
14114     0B 57 0E F2 | 	cmp	local25, #267 wz
14118     64 00 90 AD |  if_e	jmp	#LR__1701
1411c     68 00 90 FD | 	jmp	#LR__1702
14120                 | LR__1689
14120     0C 58 06 F6 | 	mov	local26, #12
14124     64 00 90 FD | 	jmp	#LR__1703
14128                 | LR__1690
14128     0C 58 06 F6 | 	mov	local26, #12
1412c     5C 00 90 FD | 	jmp	#LR__1703
14130                 | LR__1691
14130     01 58 06 F6 | 	mov	local26, #1
14134     54 00 90 FD | 	jmp	#LR__1703
14138                 | LR__1692
14138     01 58 06 F6 | 	mov	local26, #1
1413c     4C 00 90 FD | 	jmp	#LR__1703
14140                 | LR__1693
14140     02 58 06 F6 | 	mov	local26, #2
14144     44 00 90 FD | 	jmp	#LR__1703
14148                 | LR__1694
14148     02 58 06 F6 | 	mov	local26, #2
1414c     3C 00 90 FD | 	jmp	#LR__1703
14150                 | LR__1695
14150     04 58 06 F6 | 	mov	local26, #4
14154     34 00 90 FD | 	jmp	#LR__1703
14158                 | LR__1696
14158     04 58 06 F6 | 	mov	local26, #4
1415c     2C 00 90 FD | 	jmp	#LR__1703
14160                 | LR__1697
14160     08 58 06 F6 | 	mov	local26, #8
14164     24 00 90 FD | 	jmp	#LR__1703
14168                 | LR__1698
14168     08 58 06 F6 | 	mov	local26, #8
1416c     1C 00 90 FD | 	jmp	#LR__1703
14170                 | LR__1699
14170     06 58 06 F6 | 	mov	local26, #6
14174     14 00 90 FD | 	jmp	#LR__1703
14178                 | LR__1700
14178     08 58 06 F6 | 	mov	local26, #8
1417c     0C 00 90 FD | 	jmp	#LR__1703
14180                 | LR__1701
14180     05 58 06 F6 | 	mov	local26, #5
14184     04 00 90 FD | 	jmp	#LR__1703
14188                 | LR__1702
14188     0C 58 06 F6 | 	mov	local26, #12
1418c                 | LR__1703
1418c                 | '   if esize=12 andalso t1.result.uresult<$80000 then
1418c     0C 58 0E F2 | 	cmp	local26, #12 wz
14190     34 01 90 5D |  if_ne	jmp	#LR__1707
14194     00 04 00 FF 
14198     00 26 16 F2 | 	cmp	local01, ##524288 wc
1419c     28 01 90 3D |  if_ae	jmp	#LR__1707
141a0                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
141a0     52 00 00 FF 
141a4     68 E5 05 F1 | 	add	objptr, ##42344
141a8     F2 50 02 FB | 	rdlong	local22, objptr
141ac     52 00 00 FF 
141b0     68 E5 85 F1 | 	sub	objptr, ##42344
141b4     1C 50 0E F2 | 	cmp	local22, #28 wz
141b8     2C 00 90 5D |  if_ne	jmp	#LR__1704
141bc     1A 2F 02 F6 | 	mov	local05, local08
141c0     02 2E 66 F0 | 	shl	local05, #2
141c4     A7 30 02 F6 | 	mov	local06, fp
141c8     2C 30 06 F1 | 	add	local06, #44
141cc     18 2F 02 F1 | 	add	local05, local06
141d0     17 13 02 FB | 	rdlong	arg01, local05
141d4     00 14 06 F6 | 	mov	arg02, #0
141d8     C4 33 B1 FD | 	call	#__system____builtin_atoi
141dc     FD 14 02 F6 | 	mov	arg02, result1
141e0     13 13 02 F6 | 	mov	arg01, local01
141e4     09 15 62 FC | 	wrlong	arg02, arg01
141e8                 | LR__1704
141e8                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
141e8     52 00 00 FF 
141ec     68 E5 05 F1 | 	add	objptr, ##42344
141f0     F2 50 02 FB | 	rdlong	local22, objptr
141f4     52 00 00 FF 
141f8     68 E5 85 F1 | 	sub	objptr, ##42344
141fc     1D 50 0E F2 | 	cmp	local22, #29 wz
14200     2C 00 90 5D |  if_ne	jmp	#LR__1705
14204     1A 2F 02 F6 | 	mov	local05, local08
14208     02 2E 66 F0 | 	shl	local05, #2
1420c     A7 30 02 F6 | 	mov	local06, fp
14210     2C 30 06 F1 | 	add	local06, #44
14214     18 2F 02 F1 | 	add	local05, local06
14218     17 13 02 FB | 	rdlong	arg01, local05
1421c     00 14 06 F6 | 	mov	arg02, #0
14220     7C 33 B1 FD | 	call	#__system____builtin_atoi
14224     FD 14 02 F6 | 	mov	arg02, result1
14228     13 13 02 F6 | 	mov	arg01, local01
1422c     09 15 62 FC | 	wrlong	arg02, arg01
14230                 | LR__1705
14230                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14230     52 00 00 FF 
14234     68 E5 05 F1 | 	add	objptr, ##42344
14238     F2 50 02 FB | 	rdlong	local22, objptr
1423c     52 00 00 FF 
14240     68 E5 85 F1 | 	sub	objptr, ##42344
14244     1E 50 0E F2 | 	cmp	local22, #30 wz
14248     3C 00 90 5D |  if_ne	jmp	#LR__1706
1424c     1A 2D 02 F6 | 	mov	local04, local08
14250     02 2C 66 F0 | 	shl	local04, #2
14254     A7 2E 02 F6 | 	mov	local05, fp
14258     2C 2E 06 F1 | 	add	local05, #44
1425c     17 2D 02 F1 | 	add	local04, local05
14260     16 13 02 FB | 	rdlong	arg01, local04
14264     D0 34 B1 FD | 	call	#__system____builtin_atof
14268     28 4E 05 F1 | 	add	fp, #40
1426c     A7 FA 61 FC | 	wrlong	result1, fp
14270     A7 12 02 F6 | 	mov	arg01, fp
14274     28 4E 85 F1 | 	sub	fp, #40
14278     09 FB 01 FB | 	rdlong	result1, arg01
1427c     FD 14 02 F6 | 	mov	arg02, result1
14280     13 13 02 F6 | 	mov	arg01, local01
14284     09 15 62 FC | 	wrlong	arg02, arg01
14288                 | LR__1706
14288                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14288     52 00 00 FF 
1428c     68 E5 05 F1 | 	add	objptr, ##42344
14290     F2 50 02 FB | 	rdlong	local22, objptr
14294     2B 50 0E F2 | 	cmp	local22, #43 wz
14298     13 13 02 A6 |  if_e	mov	arg01, local01
1429c     27 15 02 A6 |  if_e	mov	arg02, local21
142a0     09 15 62 AC |  if_e	wrlong	arg02, arg01
142a4     13 51 02 F6 | 	mov	local22, local01
142a8     08 50 06 F1 | 	add	local22, #8
142ac     F2 2C 02 FB | 	rdlong	local04, objptr
142b0     52 00 00 FF 
142b4     68 E5 85 F1 | 	sub	objptr, ##42344
142b8     16 53 02 F6 | 	mov	local23, local04
142bc     28 13 02 F6 | 	mov	arg01, local22
142c0     29 15 02 F6 | 	mov	arg02, local23
142c4     09 15 62 FC | 	wrlong	arg02, arg01
142c8                 | LR__1707
142c8                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
142c8     0C 58 0E F2 | 	cmp	local26, #12 wz
142cc     38 01 90 5D |  if_ne	jmp	#LR__1711
142d0     00 04 00 FF 
142d4     00 26 16 F2 | 	cmp	local01, ##524288 wc
142d8     2C 01 90 CD |  if_b	jmp	#LR__1711
142dc                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
142dc     52 00 00 FF 
142e0     68 E5 05 F1 | 	add	objptr, ##42344
142e4     F2 50 02 FB | 	rdlong	local22, objptr
142e8     52 00 00 FF 
142ec     68 E5 85 F1 | 	sub	objptr, ##42344
142f0     1C 50 0E F2 | 	cmp	local22, #28 wz
142f4     2C 00 90 5D |  if_ne	jmp	#LR__1708
142f8     1A 2F 02 F6 | 	mov	local05, local08
142fc     02 2E 66 F0 | 	shl	local05, #2
14300     A7 30 02 F6 | 	mov	local06, fp
14304     2C 30 06 F1 | 	add	local06, #44
14308     18 2F 02 F1 | 	add	local05, local06
1430c     17 13 02 FB | 	rdlong	arg01, local05
14310     00 14 06 F6 | 	mov	arg02, #0
14314     88 32 B1 FD | 	call	#__system____builtin_atoi
14318     FD 14 02 F6 | 	mov	arg02, result1
1431c     13 13 02 F6 | 	mov	arg01, local01
14320     98 B9 B0 FD | 	call	#_pslpoke
14324                 | LR__1708
14324                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
14324     52 00 00 FF 
14328     68 E5 05 F1 | 	add	objptr, ##42344
1432c     F2 50 02 FB | 	rdlong	local22, objptr
14330     52 00 00 FF 
14334     68 E5 85 F1 | 	sub	objptr, ##42344
14338     1D 50 0E F2 | 	cmp	local22, #29 wz
1433c     2C 00 90 5D |  if_ne	jmp	#LR__1709
14340     1A 2F 02 F6 | 	mov	local05, local08
14344     02 2E 66 F0 | 	shl	local05, #2
14348     A7 30 02 F6 | 	mov	local06, fp
1434c     2C 30 06 F1 | 	add	local06, #44
14350     18 2F 02 F1 | 	add	local05, local06
14354     17 13 02 FB | 	rdlong	arg01, local05
14358     00 14 06 F6 | 	mov	arg02, #0
1435c     40 32 B1 FD | 	call	#__system____builtin_atoi
14360     FD 14 02 F6 | 	mov	arg02, result1
14364     13 13 02 F6 | 	mov	arg01, local01
14368     50 B9 B0 FD | 	call	#_pslpoke
1436c                 | LR__1709
1436c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1436c     52 00 00 FF 
14370     68 E5 05 F1 | 	add	objptr, ##42344
14374     F2 50 02 FB | 	rdlong	local22, objptr
14378     52 00 00 FF 
1437c     68 E5 85 F1 | 	sub	objptr, ##42344
14380     1E 50 0E F2 | 	cmp	local22, #30 wz
14384     38 00 90 5D |  if_ne	jmp	#LR__1710
14388     1A 2D 02 F6 | 	mov	local04, local08
1438c     02 2C 66 F0 | 	shl	local04, #2
14390     A7 2E 02 F6 | 	mov	local05, fp
14394     2C 2E 06 F1 | 	add	local05, #44
14398     17 2D 02 F1 | 	add	local04, local05
1439c     16 13 02 FB | 	rdlong	arg01, local04
143a0     94 33 B1 FD | 	call	#__system____builtin_atof
143a4     28 4E 05 F1 | 	add	fp, #40
143a8     A7 FA 61 FC | 	wrlong	result1, fp
143ac     A7 12 02 F6 | 	mov	arg01, fp
143b0     28 4E 85 F1 | 	sub	fp, #40
143b4     09 15 02 FB | 	rdlong	arg02, arg01
143b8     13 13 02 F6 | 	mov	arg01, local01
143bc     FC B8 B0 FD | 	call	#_pslpoke
143c0                 | LR__1710
143c0                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
143c0     52 00 00 FF 
143c4     68 E5 05 F1 | 	add	objptr, ##42344
143c8     F2 50 02 FB | 	rdlong	local22, objptr
143cc     52 00 00 FF 
143d0     68 E5 85 F1 | 	sub	objptr, ##42344
143d4     2B 50 0E F2 | 	cmp	local22, #43 wz
143d8     13 13 02 A6 |  if_e	mov	arg01, local01
143dc     27 15 02 A6 |  if_e	mov	arg02, local21
143e0     D8 B8 B0 AD |  if_e	call	#_pslpoke
143e4     13 13 02 F6 | 	mov	arg01, local01
143e8     08 12 06 F1 | 	add	arg01, #8
143ec     52 00 00 FF 
143f0     68 E5 05 F1 | 	add	objptr, ##42344
143f4     F2 52 02 FB | 	rdlong	local23, objptr
143f8     52 00 00 FF 
143fc     68 E5 85 F1 | 	sub	objptr, ##42344
14400     29 15 02 F6 | 	mov	arg02, local23
14404     B4 B8 B0 FD | 	call	#_pslpoke
14408                 | LR__1711
14408                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
14408     05 58 0E F2 | 	cmp	local26, #5 wz
1440c     52 00 00 AF 
14410     68 E5 05 A1 |  if_e	add	objptr, ##42344
14414     F2 52 02 AB |  if_e	rdlong	local23, objptr
14418     52 00 00 AF 
1441c     68 E5 85 A1 |  if_e	sub	objptr, ##42344
14420     2B 52 0E A2 |  if_e	cmp	local23, #43 wz
14424     27 53 02 A6 |  if_e	mov	local23, local21
14428     13 13 02 A6 |  if_e	mov	arg01, local01
1442c     29 15 02 A6 |  if_e	mov	arg02, local23
14430     88 B8 B0 AD |  if_e	call	#_pslpoke
14434                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
14434     04 58 0E F2 | 	cmp	local26, #4 wz
14438     48 00 90 5D |  if_ne	jmp	#LR__1712
1443c     52 00 00 FF 
14440     68 E5 05 F1 | 	add	objptr, ##42344
14444     F2 52 02 FB | 	rdlong	local23, objptr
14448     52 00 00 FF 
1444c     68 E5 85 F1 | 	sub	objptr, ##42344
14450     2B 52 0E F2 | 	cmp	local23, #43 wz
14454     2C 00 90 AD |  if_e	jmp	#LR__1712
14458     1A 2F 02 F6 | 	mov	local05, local08
1445c     02 2E 66 F0 | 	shl	local05, #2
14460     A7 30 02 F6 | 	mov	local06, fp
14464     2C 30 06 F1 | 	add	local06, #44
14468     18 2F 02 F1 | 	add	local05, local06
1446c     17 13 02 FB | 	rdlong	arg01, local05
14470     00 14 06 F6 | 	mov	arg02, #0
14474     28 31 B1 FD | 	call	#__system____builtin_atoi
14478     FD 14 02 F6 | 	mov	arg02, result1
1447c     13 13 02 F6 | 	mov	arg01, local01
14480     38 B8 B0 FD | 	call	#_pslpoke
14484                 | LR__1712
14484                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14484     02 58 0E F2 | 	cmp	local26, #2 wz
14488     48 00 90 5D |  if_ne	jmp	#LR__1713
1448c     52 00 00 FF 
14490     68 E5 05 F1 | 	add	objptr, ##42344
14494     F2 52 02 FB | 	rdlong	local23, objptr
14498     52 00 00 FF 
1449c     68 E5 85 F1 | 	sub	objptr, ##42344
144a0     2B 52 0E F2 | 	cmp	local23, #43 wz
144a4     2C 00 90 AD |  if_e	jmp	#LR__1713
144a8     1A 2F 02 F6 | 	mov	local05, local08
144ac     02 2E 66 F0 | 	shl	local05, #2
144b0     A7 30 02 F6 | 	mov	local06, fp
144b4     2C 30 06 F1 | 	add	local06, #44
144b8     18 2F 02 F1 | 	add	local05, local06
144bc     17 13 02 FB | 	rdlong	arg01, local05
144c0     00 14 06 F6 | 	mov	arg02, #0
144c4     D8 30 B1 FD | 	call	#__system____builtin_atoi
144c8     FD 14 02 F6 | 	mov	arg02, result1
144cc     13 13 02 F6 | 	mov	arg01, local01
144d0     30 B8 B0 FD | 	call	#_psdpoke
144d4                 | LR__1713
144d4                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
144d4     01 58 0E F2 | 	cmp	local26, #1 wz
144d8     48 00 90 5D |  if_ne	jmp	#LR__1714
144dc     52 00 00 FF 
144e0     68 E5 05 F1 | 	add	objptr, ##42344
144e4     F2 52 02 FB | 	rdlong	local23, objptr
144e8     52 00 00 FF 
144ec     68 E5 85 F1 | 	sub	objptr, ##42344
144f0     2B 52 0E F2 | 	cmp	local23, #43 wz
144f4     2C 00 90 AD |  if_e	jmp	#LR__1714
144f8     1A 2F 02 F6 | 	mov	local05, local08
144fc     02 2E 66 F0 | 	shl	local05, #2
14500     A7 30 02 F6 | 	mov	local06, fp
14504     2C 30 06 F1 | 	add	local06, #44
14508     18 2F 02 F1 | 	add	local05, local06
1450c     17 13 02 FB | 	rdlong	arg01, local05
14510     00 14 06 F6 | 	mov	arg02, #0
14514     88 30 B1 FD | 	call	#__system____builtin_atoi
14518     FD 14 02 F6 | 	mov	arg02, result1
1451c     13 13 02 F6 | 	mov	arg01, local01
14520     28 B8 B0 FD | 	call	#_pspoke
14524                 | LR__1714
14524                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14524     06 58 0E F2 | 	cmp	local26, #6 wz
14528     54 00 90 5D |  if_ne	jmp	#LR__1715
1452c     52 00 00 FF 
14530     68 E5 05 F1 | 	add	objptr, ##42344
14534     F2 52 02 FB | 	rdlong	local23, objptr
14538     52 00 00 FF 
1453c     68 E5 85 F1 | 	sub	objptr, ##42344
14540     2B 52 0E F2 | 	cmp	local23, #43 wz
14544     38 00 90 AD |  if_e	jmp	#LR__1715
14548     1A 2D 02 F6 | 	mov	local04, local08
1454c     02 2C 66 F0 | 	shl	local04, #2
14550     A7 2E 02 F6 | 	mov	local05, fp
14554     2C 2E 06 F1 | 	add	local05, #44
14558     17 2D 02 F1 | 	add	local04, local05
1455c     16 13 02 FB | 	rdlong	arg01, local04
14560     D4 31 B1 FD | 	call	#__system____builtin_atof
14564     28 4E 05 F1 | 	add	fp, #40
14568     A7 FA 61 FC | 	wrlong	result1, fp
1456c     A7 12 02 F6 | 	mov	arg01, fp
14570     28 4E 85 F1 | 	sub	fp, #40
14574     09 15 02 FB | 	rdlong	arg02, arg01
14578     13 13 02 F6 | 	mov	arg01, local01
1457c     3C B7 B0 FD | 	call	#_pslpoke
14580                 | LR__1715
14580     01 34 06 F1 | 	add	local08, #1
14584     30 F9 9F FD | 	jmp	#LR__1683
14588                 | LR__1716
14588                 | LR__1717
14588     A7 F0 03 F6 | 	mov	ptra, fp
1458c     B2 00 A0 FD | 	call	#popregs_
14590                 | _do_input_ret
14590     2D 00 64 FD | 	ret
14594                 | 
14594                 | ' 
14594                 | ' ' ----------------  left$
14594                 | ' 
14594                 | ' sub do_left
14594                 | _do_left
14594     01 4A 05 F6 | 	mov	COUNT_, #1
14598     A8 00 A0 FD | 	call	#pushregs_
1459c     14 F0 07 F1 | 	add	ptra, #20
145a0     4A 00 00 FF 
145a4     A0 E4 05 F1 | 	add	objptr, ##38048
145a8     F2 16 02 FB | 	rdlong	arg03, objptr
145ac     0B 15 02 F6 | 	mov	arg02, arg03
145b0     01 14 66 F0 | 	shl	arg02, #1
145b4     0B 15 02 F1 | 	add	arg02, arg03
145b8     02 14 66 F0 | 	shl	arg02, #2
145bc     03 00 00 FF 
145c0     04 E4 85 F1 | 	sub	objptr, ##1540
145c4     F2 14 02 F1 | 	add	arg02, objptr
145c8     0A 17 02 FB | 	rdlong	arg03, arg02
145cc                 | ' 
145cc                 | ' numpar=compiledline(lineptr_e).result.uresult
145cc                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
145cc     02 16 0E F2 | 	cmp	arg03, #2 wz
145d0     47 00 00 FF 
145d4     9C E4 85 F1 | 	sub	objptr, ##36508
145d8     40 00 90 AD |  if_e	jmp	#LR__1720
145dc     00 12 06 F6 | 	mov	arg01, #0
145e0     B0 55 B1 FD | 	call	#__system___getiolock_0622
145e4     FD 12 02 F6 | 	mov	arg01, result1
145e8     BC 0A B1 FD | 	call	#__system___lockmem
145ec     92 01 00 FF 
145f0     FA 15 06 F6 | 	mov	arg02, ##@LR__5626
145f4     00 12 06 F6 | 	mov	arg01, #0
145f8     00 16 06 F6 | 	mov	arg03, #0
145fc     C8 12 B1 FD | 	call	#__system___basic_print_string
14600     00 12 06 F6 | 	mov	arg01, #0
14604     8C 55 B1 FD | 	call	#__system___getiolock_0622
14608     FD 00 68 FC | 	wrlong	#0, result1
1460c     27 12 06 F6 | 	mov	arg01, #39
14610     00 14 06 F6 | 	mov	arg02, #0
14614     08 B6 B0 FD | 	call	#_printerror
14618     D8 00 90 FD | 	jmp	#LR__1723
1461c                 | LR__1720
1461c     20 8F BF FD | 	call	#_pop
14620     FF 16 02 F6 | 	mov	arg03, result3
14624     A7 FA 61 FC | 	wrlong	result1, fp
14628     04 4E 05 F1 | 	add	fp, #4
1462c     A7 FC 61 FC | 	wrlong	result2, fp
14630     04 4E 05 F1 | 	add	fp, #4
14634     A7 16 62 FC | 	wrlong	arg03, fp
14638     08 4E 85 F1 | 	sub	fp, #8
1463c     A7 12 02 F6 | 	mov	arg01, fp
14640     D8 90 BF FD | 	call	#_converttoint
14644     FD 26 02 F6 | 	mov	local01, result1
14648     F4 8E BF FD | 	call	#_pop
1464c     FF 16 02 F6 | 	mov	arg03, result3
14650     A7 FA 61 FC | 	wrlong	result1, fp
14654     04 4E 05 F1 | 	add	fp, #4
14658     A7 FC 61 FC | 	wrlong	result2, fp
1465c     04 4E 05 F1 | 	add	fp, #4
14660     A7 16 62 FC | 	wrlong	arg03, fp
14664                 | ' t1=pop() : arg=converttoint(t1)
14664                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14664     08 4E 85 F1 | 	sub	fp, #8
14668     2B 16 0E F2 | 	cmp	arg03, #43 wz
1466c     18 00 90 5D |  if_ne	jmp	#LR__1721
14670     A7 12 02 FB | 	rdlong	arg01, fp
14674     38 90 BF FD | 	call	#_convertstring
14678     A7 FA 61 FC | 	wrlong	result1, fp
1467c     08 4E 05 F1 | 	add	fp, #8
14680     A7 3E 68 FC | 	wrlong	#31, fp
14684     08 4E 85 F1 | 	sub	fp, #8
14688                 | LR__1721
14688                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14688     08 4E 05 F1 | 	add	fp, #8
1468c     A7 16 02 FB | 	rdlong	arg03, fp
14690     08 4E 85 F1 | 	sub	fp, #8
14694     1F 16 0E F2 | 	cmp	arg03, #31 wz
14698     40 00 90 AD |  if_e	jmp	#LR__1722
1469c     00 12 06 F6 | 	mov	arg01, #0
146a0     F0 54 B1 FD | 	call	#__system___getiolock_0622
146a4     FD 12 02 F6 | 	mov	arg01, result1
146a8     FC 09 B1 FD | 	call	#__system___lockmem
146ac     93 01 00 FF 
146b0     02 14 06 F6 | 	mov	arg02, ##@LR__5627
146b4     00 12 06 F6 | 	mov	arg01, #0
146b8     00 16 06 F6 | 	mov	arg03, #0
146bc     08 12 B1 FD | 	call	#__system___basic_print_string
146c0     00 12 06 F6 | 	mov	arg01, #0
146c4     CC 54 B1 FD | 	call	#__system___getiolock_0622
146c8     FD 00 68 FC | 	wrlong	#0, result1
146cc     0F 12 06 F6 | 	mov	arg01, #15
146d0     00 14 06 F6 | 	mov	arg02, #0
146d4     48 B5 B0 FD | 	call	#_printerror
146d8     18 00 90 FD | 	jmp	#LR__1723
146dc                 | LR__1722
146dc     A7 12 02 FB | 	rdlong	arg01, fp
146e0     13 15 02 F6 | 	mov	arg02, local01
146e4     84 1D B1 FD | 	call	#__system__Left_S
146e8     A7 FA 61 FC | 	wrlong	result1, fp
146ec     A7 12 02 F6 | 	mov	arg01, fp
146f0     DC 8E BF FD | 	call	#_push
146f4                 | LR__1723
146f4     A7 F0 03 F6 | 	mov	ptra, fp
146f8     B2 00 A0 FD | 	call	#popregs_
146fc                 | _do_left_ret
146fc     2D 00 64 FD | 	ret
14700                 | 
14700                 | ' 
14700                 | ' ' ----------------  len
14700                 | ' 
14700                 | ' sub do_len
14700                 | _do_len
14700     01 4A 05 F6 | 	mov	COUNT_, #1
14704     A8 00 A0 FD | 	call	#pushregs_
14708     14 F0 07 F1 | 	add	ptra, #20
1470c     4A 00 00 FF 
14710     A0 E4 05 F1 | 	add	objptr, ##38048
14714     F2 16 02 FB | 	rdlong	arg03, objptr
14718     0B 15 02 F6 | 	mov	arg02, arg03
1471c     01 14 66 F0 | 	shl	arg02, #1
14720     0B 15 02 F1 | 	add	arg02, arg03
14724     02 14 66 F0 | 	shl	arg02, #2
14728     03 00 00 FF 
1472c     04 E4 85 F1 | 	sub	objptr, ##1540
14730     F2 14 02 F1 | 	add	arg02, objptr
14734     0A 17 02 FB | 	rdlong	arg03, arg02
14738                 | ' 
14738                 | ' numpar=compiledline(lineptr_e).result.uresult
14738                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14738     02 16 16 F2 | 	cmp	arg03, #2 wc
1473c     47 00 00 FF 
14740     9C E4 85 F1 | 	sub	objptr, ##36508
14744     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
14748     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
1474c     00 12 06 F6 | 	mov	arg01, #0
14750     40 54 B1 FD | 	call	#__system___getiolock_0622
14754     FD 12 02 F6 | 	mov	arg01, result1
14758     4C 09 B1 FD | 	call	#__system___lockmem
1475c     93 01 00 FF 
14760     0A 14 06 F6 | 	mov	arg02, ##@LR__5628
14764     00 12 06 F6 | 	mov	arg01, #0
14768     00 16 06 F6 | 	mov	arg03, #0
1476c     58 11 B1 FD | 	call	#__system___basic_print_string
14770     00 12 06 F6 | 	mov	arg01, #0
14774     1C 54 B1 FD | 	call	#__system___getiolock_0622
14778     FD 00 68 FC | 	wrlong	#0, result1
1477c     27 12 06 F6 | 	mov	arg01, #39
14780     00 14 06 F6 | 	mov	arg02, #0
14784     98 B4 B0 FD | 	call	#_printerror
14788     C8 00 90 FD | 	jmp	#LR__1735
1478c                 | LR__1730
1478c     B0 8D BF FD | 	call	#_pop
14790     FF 16 02 F6 | 	mov	arg03, result3
14794     A7 FA 61 FC | 	wrlong	result1, fp
14798     04 4E 05 F1 | 	add	fp, #4
1479c     A7 FC 61 FC | 	wrlong	result2, fp
147a0     04 4E 05 F1 | 	add	fp, #4
147a4     A7 16 62 FC | 	wrlong	arg03, fp
147a8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
147a8     08 4E 85 F1 | 	sub	fp, #8
147ac     2B 16 0E F2 | 	cmp	arg03, #43 wz
147b0     18 00 90 5D |  if_ne	jmp	#LR__1731
147b4     A7 12 02 FB | 	rdlong	arg01, fp
147b8     F4 8E BF FD | 	call	#_convertstring
147bc     A7 FA 61 FC | 	wrlong	result1, fp
147c0     08 4E 05 F1 | 	add	fp, #8
147c4     A7 3E 68 FC | 	wrlong	#31, fp
147c8     08 4E 85 F1 | 	sub	fp, #8
147cc                 | LR__1731
147cc                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
147cc     08 4E 05 F1 | 	add	fp, #8
147d0     A7 16 02 FB | 	rdlong	arg03, fp
147d4     08 4E 85 F1 | 	sub	fp, #8
147d8     1F 16 0E F2 | 	cmp	arg03, #31 wz
147dc     40 00 90 AD |  if_e	jmp	#LR__1732
147e0     00 12 06 F6 | 	mov	arg01, #0
147e4     AC 53 B1 FD | 	call	#__system___getiolock_0622
147e8     FD 12 02 F6 | 	mov	arg01, result1
147ec     B8 08 B1 FD | 	call	#__system___lockmem
147f0     93 01 00 FF 
147f4     10 14 06 F6 | 	mov	arg02, ##@LR__5629
147f8     00 12 06 F6 | 	mov	arg01, #0
147fc     00 16 06 F6 | 	mov	arg03, #0
14800     C4 10 B1 FD | 	call	#__system___basic_print_string
14804     00 12 06 F6 | 	mov	arg01, #0
14808     88 53 B1 FD | 	call	#__system___getiolock_0622
1480c     FD 00 68 FC | 	wrlong	#0, result1
14810     0F 12 06 F6 | 	mov	arg01, #15
14814     00 14 06 F6 | 	mov	arg02, #0
14818     04 B4 B0 FD | 	call	#_printerror
1481c     34 00 90 FD | 	jmp	#LR__1735
14820                 | LR__1732
14820     A7 12 02 FB | 	rdlong	arg01, fp
14824     09 27 02 F6 | 	mov	local01, arg01
14828     97 06 48 FB | 	callpa	#(@LR__1734-@LR__1733)>>2,fcache_load_ptr_
1482c                 | LR__1733
1482c     13 FB C9 FA | 	rdbyte	result1, local01 wz
14830     01 26 06 51 |  if_ne	add	local01, #1
14834     F4 FF 9F 5D |  if_ne	jmp	#LR__1733
14838                 | LR__1734
14838     09 27 82 F1 | 	sub	local01, arg01
1483c     A7 26 62 FC | 	wrlong	local01, fp
14840     08 4E 05 F1 | 	add	fp, #8
14844     A7 38 68 FC | 	wrlong	#28, fp
14848     08 4E 85 F1 | 	sub	fp, #8
1484c     A7 12 02 F6 | 	mov	arg01, fp
14850     7C 8D BF FD | 	call	#_push
14854                 | LR__1735
14854     A7 F0 03 F6 | 	mov	ptra, fp
14858     B2 00 A0 FD | 	call	#popregs_
1485c                 | _do_len_ret
1485c     2D 00 64 FD | 	ret
14860                 | 
14860                 | ' 
14860                 | ' ' ----------------  list
14860                 | ' 
14860                 | ' sub do_list
14860                 | _do_list
14860     04 4A 05 F6 | 	mov	COUNT_, #4
14864     A8 00 A0 FD | 	call	#pushregs_
14868     B8 F0 07 F1 | 	add	ptra, #184
1486c     00 26 06 F6 | 	mov	local01, #0
14870     1E 28 CE F9 | 	bmask	local02, #30
14874     4A 00 00 FF 
14878     A0 E4 05 F1 | 	add	objptr, ##38048
1487c     F2 2A 02 FB | 	rdlong	local03, objptr
14880     15 17 02 F6 | 	mov	arg03, local03
14884     01 16 66 F0 | 	shl	arg03, #1
14888     15 17 02 F1 | 	add	arg03, local03
1488c     02 16 66 F0 | 	shl	arg03, #2
14890     03 00 00 FF 
14894     04 E4 85 F1 | 	sub	objptr, ##1540
14898     F2 16 02 F1 | 	add	arg03, objptr
1489c     0B 2D 02 FB | 	rdlong	local04, arg03
148a0                 | ' 
148a0                 | ' startline=0 : endline=$7FFFFFFF
148a0                 | ' numpar=compiledline(lineptr_e).result.uresult
148a0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
148a0     01 2C 0E F2 | 	cmp	local04, #1 wz
148a4     47 00 00 FF 
148a8     9C E4 85 F1 | 	sub	objptr, ##36508
148ac     34 00 90 5D |  if_ne	jmp	#LR__1740
148b0     8C 8C BF FD | 	call	#_pop
148b4     FF 2A 02 F6 | 	mov	local03, result3
148b8     0C 4E 05 F1 | 	add	fp, #12
148bc     A7 FA 61 FC | 	wrlong	result1, fp
148c0     04 4E 05 F1 | 	add	fp, #4
148c4     A7 FC 61 FC | 	wrlong	result2, fp
148c8     04 4E 05 F1 | 	add	fp, #4
148cc     A7 2A 62 FC | 	wrlong	local03, fp
148d0     08 4E 85 F1 | 	sub	fp, #8
148d4     A7 12 02 F6 | 	mov	arg01, fp
148d8     0C 4E 85 F1 | 	sub	fp, #12
148dc     3C 8E BF FD | 	call	#_converttoint
148e0     FD 26 02 F6 | 	mov	local01, result1
148e4                 | LR__1740
148e4                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
148e4     02 2C 0E F2 | 	cmp	local04, #2 wz
148e8     68 00 90 5D |  if_ne	jmp	#LR__1741
148ec     50 8C BF FD | 	call	#_pop
148f0     FF 2A 02 F6 | 	mov	local03, result3
148f4     0C 4E 05 F1 | 	add	fp, #12
148f8     A7 FA 61 FC | 	wrlong	result1, fp
148fc     04 4E 05 F1 | 	add	fp, #4
14900     A7 FC 61 FC | 	wrlong	result2, fp
14904     04 4E 05 F1 | 	add	fp, #4
14908     A7 2A 62 FC | 	wrlong	local03, fp
1490c     08 4E 85 F1 | 	sub	fp, #8
14910     A7 12 02 F6 | 	mov	arg01, fp
14914     0C 4E 85 F1 | 	sub	fp, #12
14918     00 8E BF FD | 	call	#_converttoint
1491c     FD 28 02 F6 | 	mov	local02, result1
14920     1C 8C BF FD | 	call	#_pop
14924     FF 2A 02 F6 | 	mov	local03, result3
14928     0C 4E 05 F1 | 	add	fp, #12
1492c     A7 FA 61 FC | 	wrlong	result1, fp
14930     04 4E 05 F1 | 	add	fp, #4
14934     A7 FC 61 FC | 	wrlong	result2, fp
14938     04 4E 05 F1 | 	add	fp, #4
1493c     A7 2A 62 FC | 	wrlong	local03, fp
14940     08 4E 85 F1 | 	sub	fp, #8
14944     A7 12 02 F6 | 	mov	arg01, fp
14948     0C 4E 85 F1 | 	sub	fp, #12
1494c     CC 8D BF FD | 	call	#_converttoint
14950     FD 26 02 F6 | 	mov	local01, result1
14954                 | LR__1741
14954                 | ' 
14954                 | ' 
14954                 | ' print
14954     00 12 06 F6 | 	mov	arg01, #0
14958     38 52 B1 FD | 	call	#__system___getiolock_0622
1495c     FD 12 02 F6 | 	mov	arg01, result1
14960     44 07 B1 FD | 	call	#__system___lockmem
14964     00 12 06 F6 | 	mov	arg01, #0
14968     0A 14 06 F6 | 	mov	arg02, #10
1496c     00 16 06 F6 | 	mov	arg03, #0
14970     FC 0E B1 FD | 	call	#__system___basic_print_char
14974     00 12 06 F6 | 	mov	arg01, #0
14978     18 52 B1 FD | 	call	#__system___getiolock_0622
1497c     FD 00 68 FC | 	wrlong	#0, result1
14980     4A 00 00 FF 
14984     A8 E4 05 F1 | 	add	objptr, ##38056
14988     F2 2C 02 FB | 	rdlong	local04, objptr
1498c     08 00 00 FF 
14990     CC E4 05 F1 | 	add	objptr, ##4300
14994     F2 2C 62 FC | 	wrlong	local04, objptr
14998     52 00 00 FF 
1499c     74 E5 85 F1 | 	sub	objptr, ##42356
149a0                 | ' do 
149a0                 | LR__1742
149a0     A7 12 02 F6 | 	mov	arg01, fp
149a4     20 12 06 F1 | 	add	arg01, #32
149a8     52 00 00 FF 
149ac     74 E5 05 F1 | 	add	objptr, ##42356
149b0     F2 14 02 FB | 	rdlong	arg02, objptr
149b4     18 16 06 F6 | 	mov	arg03, #24
149b8     47 00 00 FF 
149bc     A8 E4 85 F1 | 	sub	objptr, ##36520
149c0     E0 FE B0 FD | 	call	#_psram_spin2_read1
149c4     0B 00 00 FF 
149c8     CC E4 85 F1 | 	sub	objptr, ##5836
149cc                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
149cc                 | '   
149cc                 | '   if header(0)<> $FFFFFFFF then
149cc     20 4E 05 F1 | 	add	fp, #32
149d0     A7 2C 02 FB | 	rdlong	local04, fp
149d4     20 4E 85 F1 | 	sub	fp, #32
149d8     FF FF 7F FF 
149dc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
149e0     9C 00 90 AD |  if_e	jmp	#LR__1744
149e4     A7 12 02 F6 | 	mov	arg01, fp
149e8     38 12 06 F1 | 	add	arg01, #56
149ec     3F 16 06 F6 | 	mov	arg03, #63
149f0     28 16 62 FD | 	setq	arg03
149f4     09 01 68 FC | 	wrlong	#0, arg01
149f8     A7 12 02 F6 | 	mov	arg01, fp
149fc     38 12 06 F1 | 	add	arg01, #56
14a00     28 4E 05 F1 | 	add	fp, #40
14a04     A7 14 02 FB | 	rdlong	arg02, fp
14a08     04 4E 05 F1 | 	add	fp, #4
14a0c     A7 16 02 FB | 	rdlong	arg03, fp
14a10     2C 4E 85 F1 | 	sub	fp, #44
14a14     0B 00 00 FF 
14a18     CC E4 05 F1 | 	add	objptr, ##5836
14a1c     84 FE B0 FD | 	call	#_psram_spin2_read1
14a20     0B 00 00 FF 
14a24     CC E4 85 F1 | 	sub	objptr, ##5836
14a28                 | '     longfill(linebuf,0,64)
14a28                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14a28                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14a28     20 4E 05 F1 | 	add	fp, #32
14a2c     A7 2C 02 FB | 	rdlong	local04, fp
14a30     20 4E 85 F1 | 	sub	fp, #32
14a34     13 2D 52 F2 | 	cmps	local04, local01 wc
14a38     24 00 90 CD |  if_b	jmp	#LR__1743
14a3c     20 4E 05 F1 | 	add	fp, #32
14a40     A7 2A 02 FB | 	rdlong	local03, fp
14a44     20 4E 85 F1 | 	sub	fp, #32
14a48     14 2B 5A F2 | 	cmps	local03, local02 wcz
14a4c     10 00 90 1D |  if_a	jmp	#LR__1743
14a50     A7 12 02 F6 | 	mov	arg01, fp
14a54     38 12 06 F1 | 	add	arg01, #56
14a58                 | ' 
14a58                 | ' write(text)
14a58     84 F4 B0 FD | 	call	#_hg010b_spin2_write
14a5c                 | ' crlf
14a5c     20 F9 B0 FD | 	call	#_hg010b_spin2_crlf
14a60                 | LR__1743
14a60     34 4E 05 F1 | 	add	fp, #52
14a64     A7 2C 02 FB | 	rdlong	local04, fp
14a68     34 4E 85 F1 | 	sub	fp, #52
14a6c     52 00 00 FF 
14a70     74 E5 05 F1 | 	add	objptr, ##42356
14a74     F2 2C 62 FC | 	wrlong	local04, objptr
14a78     52 00 00 FF 
14a7c     74 E5 85 F1 | 	sub	objptr, ##42356
14a80                 | LR__1744
14a80     34 4E 05 F1 | 	add	fp, #52
14a84     A7 2C 02 FB | 	rdlong	local04, fp
14a88     34 4E 85 F1 | 	sub	fp, #52
14a8c     FF FF 3F FF 
14a90     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
14a94     20 4E 05 51 |  if_ne	add	fp, #32
14a98     A7 2A 02 5B |  if_ne	rdlong	local03, fp
14a9c     20 4E 85 51 |  if_ne	sub	fp, #32
14aa0     FF FF 7F 5F 
14aa4     FF 2B 0E 52 |  if_ne	cmp	local03, ##-1 wz
14aa8     F4 FE 9F 5D |  if_ne	jmp	#LR__1742
14aac     A7 F0 03 F6 | 	mov	ptra, fp
14ab0     B2 00 A0 FD | 	call	#popregs_
14ab4                 | _do_list_ret
14ab4     2D 00 64 FD | 	ret
14ab8                 | 
14ab8                 | ' 
14ab8                 | ' '-------------------- load
14ab8                 | ' 
14ab8                 | ' sub do_load(amode=0 as integer)  
14ab8                 | _do_load
14ab8     07 4A 05 F6 | 	mov	COUNT_, #7
14abc     A8 00 A0 FD | 	call	#pushregs_
14ac0     AC F0 07 F1 | 	add	ptra, #172
14ac4     09 2D 02 F6 | 	mov	local04, arg01
14ac8     52 00 00 FF 
14acc     2C E5 05 F1 | 	add	objptr, ##42284
14ad0     F2 02 68 FC | 	wrlong	#1, objptr
14ad4     08 00 00 FF 
14ad8     8C E4 85 F1 | 	sub	objptr, ##4236
14adc     F2 14 02 FB | 	rdlong	arg02, objptr
14ae0     0A 13 02 F6 | 	mov	arg01, arg02
14ae4     01 12 66 F0 | 	shl	arg01, #1
14ae8     0A 13 02 F1 | 	add	arg01, arg02
14aec     02 12 66 F0 | 	shl	arg01, #2
14af0     03 00 00 FF 
14af4     04 E4 85 F1 | 	sub	objptr, ##1540
14af8     F2 12 02 F1 | 	add	arg01, objptr
14afc     09 2F 02 FB | 	rdlong	local05, arg01
14b00     A7 12 02 F6 | 	mov	arg01, fp
14b04     A8 12 06 F1 | 	add	arg01, #168
14b08     47 00 00 FF 
14b0c     9C E4 85 F1 | 	sub	objptr, ##36508
14b10     A7 14 02 F6 | 	mov	arg02, fp
14b14     28 14 06 F1 | 	add	arg02, #40
14b18     09 15 62 FC | 	wrlong	arg02, arg01
14b1c                 | ' 
14b1c                 | ' inload=1
14b1c                 | ' numpar=compiledline(lineptr_e).result.uresult
14b1c                 | ' lpoke varptr(line2$),varptr(line2)
14b1c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14b1c     01 2E 56 F2 | 	cmps	local05, #1 wc
14b20     14 00 90 CD |  if_b	jmp	#LR__1750
14b24     18 8A BF FD | 	call	#_pop
14b28     FD 26 02 F6 | 	mov	local01, result1
14b2c     FE 28 02 F6 | 	mov	local02, result2
14b30     FF 2A 02 F6 | 	mov	local03, result3
14b34     18 00 90 FD | 	jmp	#LR__1751
14b38                 | LR__1750
14b38     52 00 00 FF 
14b3c     1C E5 05 F1 | 	add	objptr, ##42268
14b40     F2 26 02 FB | 	rdlong	local01, objptr
14b44     52 00 00 FF 
14b48     1C E5 85 F1 | 	sub	objptr, ##42268
14b4c     1F 2A 06 F6 | 	mov	local03, #31
14b50                 | LR__1751
14b50                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14b50                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14b50     2B 2A 0E F2 | 	cmp	local03, #43 wz
14b54     10 00 90 5D |  if_ne	jmp	#LR__1752
14b58     13 13 02 F6 | 	mov	arg01, local01
14b5c     50 8B BF FD | 	call	#_convertstring
14b60     FD 26 02 F6 | 	mov	local01, result1
14b64     1F 2A 06 F6 | 	mov	local03, #31
14b68                 | LR__1752
14b68                 | ' if t1.result_type=result_string then
14b68     1F 2A 0E F2 | 	cmp	local03, #31 wz
14b6c     7C 02 90 5D |  if_ne	jmp	#LR__1756
14b70                 | '   if amode<>1234 then do_new
14b70     02 00 00 FF 
14b74     D2 2C 0E F2 | 	cmp	local04, ##1234 wz
14b78     74 0E B0 5D |  if_ne	call	#_do_new
14b7c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14b7c     93 01 00 FF 
14b80     16 14 06 F6 | 	mov	arg02, ##@LR__5630
14b84     13 13 02 F6 | 	mov	arg01, local01
14b88     44 05 B1 FD | 	call	#__system___string_cmp
14b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
14b90     52 00 00 AF 
14b94     1C E5 05 A1 |  if_e	add	objptr, ##42268
14b98     F2 26 02 AB |  if_e	rdlong	local01, objptr
14b9c     52 00 00 FF 
14ba0     1C E5 C5 F3 | 	sumz	objptr, ##42268
14ba4     F2 26 62 5C |  if_ne	wrlong	local01, objptr
14ba8     52 00 00 5F 
14bac     1C E5 85 51 |  if_ne	sub	objptr, ##42268
14bb0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14bb0     09 12 06 F6 | 	mov	arg01, #9
14bb4     60 46 B1 FD | 	call	#__system__close
14bb8     09 2E 06 F6 | 	mov	local05, #9
14bbc     4A 00 00 FF 
14bc0     B4 E4 05 F1 | 	add	objptr, ##38068
14bc4     F2 12 02 FB | 	rdlong	arg01, objptr
14bc8     4A 00 00 FF 
14bcc     B4 E4 85 F1 | 	sub	objptr, ##38068
14bd0     93 01 00 FF 
14bd4     17 14 06 F6 | 	mov	arg02, ##@LR__5631
14bd8     28 05 B1 FD | 	call	#__system___string_concat
14bdc     FD 12 02 F6 | 	mov	arg01, result1
14be0     13 15 02 F6 | 	mov	arg02, local01
14be4     1C 05 B1 FD | 	call	#__system___string_concat
14be8     FD 14 02 F6 | 	mov	arg02, result1
14bec     17 13 02 F6 | 	mov	arg01, local05
14bf0     00 16 06 F6 | 	mov	arg03, #0
14bf4     E0 0B B1 FD | 	call	#__system___basic_open_string
14bf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14bfc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14c00     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
14c04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14c08                 | '   r=geterr() 
14c08                 | '   if r then 
14c08     30 01 90 AD |  if_e	jmp	#LR__1754
14c0c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14c0c     09 12 06 F6 | 	mov	arg01, #9
14c10     04 46 B1 FD | 	call	#__system__close
14c14     09 30 06 F6 | 	mov	local06, #9
14c18     4A 00 00 FF 
14c1c     B4 E4 05 F1 | 	add	objptr, ##38068
14c20     F2 12 02 FB | 	rdlong	arg01, objptr
14c24     4A 00 00 FF 
14c28     B4 E4 85 F1 | 	sub	objptr, ##38068
14c2c     93 01 00 FF 
14c30     19 14 06 F6 | 	mov	arg02, ##@LR__5632
14c34     CC 04 B1 FD | 	call	#__system___string_concat
14c38     FD 12 02 F6 | 	mov	arg01, result1
14c3c     13 15 02 F6 | 	mov	arg02, local01
14c40     C0 04 B1 FD | 	call	#__system___string_concat
14c44     FD 12 02 F6 | 	mov	arg01, result1
14c48     93 01 00 FF 
14c4c     1B 14 06 F6 | 	mov	arg02, ##@LR__5633
14c50     B0 04 B1 FD | 	call	#__system___string_concat
14c54     FD 14 02 F6 | 	mov	arg02, result1
14c58     18 13 02 F6 | 	mov	arg01, local06
14c5c     00 16 06 F6 | 	mov	arg03, #0
14c60     74 0B B1 FD | 	call	#__system___basic_open_string
14c64     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14c68     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14c6c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
14c70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14c74     FD 32 0A F6 | 	mov	local07, result1 wz
14c78                 | '     r=geterr() 
14c78                 | '     if r then 
14c78     8C 00 90 AD |  if_e	jmp	#LR__1753
14c7c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14c7c     00 12 06 F6 | 	mov	arg01, #0
14c80     10 4F B1 FD | 	call	#__system___getiolock_0622
14c84     FD 12 02 F6 | 	mov	arg01, result1
14c88     1C 04 B1 FD | 	call	#__system___lockmem
14c8c     93 01 00 FF 
14c90     20 14 06 F6 | 	mov	arg02, ##@LR__5634
14c94     00 12 06 F6 | 	mov	arg01, #0
14c98     00 16 06 F6 | 	mov	arg03, #0
14c9c     28 0C B1 FD | 	call	#__system___basic_print_string
14ca0     00 12 06 F6 | 	mov	arg01, #0
14ca4     19 15 02 F6 | 	mov	arg02, local07
14ca8     00 16 06 F6 | 	mov	arg03, #0
14cac     0A 18 06 F6 | 	mov	arg04, #10
14cb0     58 0C B1 FD | 	call	#__system___basic_print_integer
14cb4     93 01 00 FF 
14cb8     2E 14 06 F6 | 	mov	arg02, ##@LR__5635
14cbc     00 12 06 F6 | 	mov	arg01, #0
14cc0     00 16 06 F6 | 	mov	arg03, #0
14cc4     00 0C B1 FD | 	call	#__system___basic_print_string
14cc8     19 13 02 F6 | 	mov	arg01, local07
14ccc     E4 1D B1 FD | 	call	#__system___strerror
14cd0     FD 14 02 F6 | 	mov	arg02, result1
14cd4     00 12 06 F6 | 	mov	arg01, #0
14cd8     00 16 06 F6 | 	mov	arg03, #0
14cdc     E8 0B B1 FD | 	call	#__system___basic_print_string
14ce0     00 12 06 F6 | 	mov	arg01, #0
14ce4     0A 14 06 F6 | 	mov	arg02, #10
14ce8     00 16 06 F6 | 	mov	arg03, #0
14cec     80 0B B1 FD | 	call	#__system___basic_print_char
14cf0     00 12 06 F6 | 	mov	arg01, #0
14cf4     9C 4E B1 FD | 	call	#__system___getiolock_0622
14cf8     FD 00 68 FC | 	wrlong	#0, result1
14cfc     09 12 06 F6 | 	mov	arg01, #9
14d00     14 45 B1 FD | 	call	#__system__close
14d04     94 01 90 FD | 	jmp	#LR__1758
14d08                 | LR__1753
14d08     52 00 00 FF 
14d0c     1C E5 05 F1 | 	add	objptr, ##42268
14d10     F2 12 02 FB | 	rdlong	arg01, objptr
14d14     52 00 00 FF 
14d18     1C E5 85 F1 | 	sub	objptr, ##42268
14d1c     93 01 00 FF 
14d20     31 14 06 F6 | 	mov	arg02, ##@LR__5636
14d24     DC 03 B1 FD | 	call	#__system___string_concat
14d28     52 00 00 FF 
14d2c     1C E5 05 F1 | 	add	objptr, ##42268
14d30     F2 FA 61 FC | 	wrlong	result1, objptr
14d34     52 00 00 FF 
14d38     1C E5 85 F1 | 	sub	objptr, ##42268
14d3c                 | LR__1754
14d3c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14d3c     09 12 06 F6 | 	mov	arg01, #9
14d40     D4 44 B1 FD | 	call	#__system__close
14d44     09 30 06 F6 | 	mov	local06, #9
14d48     4A 00 00 FF 
14d4c     B4 E4 05 F1 | 	add	objptr, ##38068
14d50     F2 12 02 FB | 	rdlong	arg01, objptr
14d54     4A 00 00 FF 
14d58     B4 E4 85 F1 | 	sub	objptr, ##38068
14d5c     93 01 00 FF 
14d60     36 14 06 F6 | 	mov	arg02, ##@LR__5637
14d64     9C 03 B1 FD | 	call	#__system___string_concat
14d68     FD 12 02 F6 | 	mov	arg01, result1
14d6c     52 00 00 FF 
14d70     1C E5 05 F1 | 	add	objptr, ##42268
14d74     F2 14 02 FB | 	rdlong	arg02, objptr
14d78     52 00 00 FF 
14d7c     1C E5 85 F1 | 	sub	objptr, ##42268
14d80     80 03 B1 FD | 	call	#__system___string_concat
14d84     FD 14 02 F6 | 	mov	arg02, result1
14d88     18 13 02 F6 | 	mov	arg01, local06
14d8c     00 16 06 F6 | 	mov	arg03, #0
14d90     44 0A B1 FD | 	call	#__system___basic_open_string
14d94                 | '   do
14d94                 | LR__1755
14d94     09 12 06 F6 | 	mov	arg01, #9
14d98     C0 04 B1 FD | 	call	#__system___basic_read_line
14d9c     FD 30 02 F6 | 	mov	local06, result1
14da0     37 00 00 FF 
14da4     3C E4 05 F1 | 	add	objptr, ##28220
14da8     F2 30 62 FC | 	wrlong	local06, objptr
14dac     37 00 00 FF 
14db0     3C E4 85 F1 | 	sub	objptr, ##28220
14db4     B4 CA BE FD | 	call	#_interpret
14db8     37 00 00 FF 
14dbc     3C E4 05 F1 | 	add	objptr, ##28220
14dc0     F2 12 02 FB | 	rdlong	arg01, objptr
14dc4     37 00 00 FF 
14dc8     3C E4 85 F1 | 	sub	objptr, ##28220
14dcc     93 01 00 FF 
14dd0     38 14 06 F6 | 	mov	arg02, ##@LR__5638
14dd4     F8 02 B1 FD | 	call	#__system___string_cmp
14dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
14ddc     B4 FF 9F 5D |  if_ne	jmp	#LR__1755
14de0                 | '   close #9   
14de0     09 12 06 F6 | 	mov	arg01, #9
14de4     30 44 B1 FD | 	call	#__system__close
14de8     0C 00 90 FD | 	jmp	#LR__1757
14dec                 | LR__1756
14dec     1E 12 06 F6 | 	mov	arg01, #30
14df0     00 14 06 F6 | 	mov	arg02, #0
14df4     28 AE B0 FD | 	call	#_printerror
14df8                 | LR__1757
14df8                 | ' print "Loaded ";currentdir$+"/"+loadname
14df8     00 12 06 F6 | 	mov	arg01, #0
14dfc     94 4D B1 FD | 	call	#__system___getiolock_0622
14e00     FD 12 02 F6 | 	mov	arg01, result1
14e04     A0 02 B1 FD | 	call	#__system___lockmem
14e08     93 01 00 FF 
14e0c     39 14 06 F6 | 	mov	arg02, ##@LR__5639
14e10     00 12 06 F6 | 	mov	arg01, #0
14e14     00 16 06 F6 | 	mov	arg03, #0
14e18     AC 0A B1 FD | 	call	#__system___basic_print_string
14e1c     00 32 06 F6 | 	mov	local07, #0
14e20     4A 00 00 FF 
14e24     B4 E4 05 F1 | 	add	objptr, ##38068
14e28     F2 12 02 FB | 	rdlong	arg01, objptr
14e2c     4A 00 00 FF 
14e30     B4 E4 85 F1 | 	sub	objptr, ##38068
14e34     93 01 00 FF 
14e38     41 14 06 F6 | 	mov	arg02, ##@LR__5640
14e3c     C4 02 B1 FD | 	call	#__system___string_concat
14e40     FD 12 02 F6 | 	mov	arg01, result1
14e44     52 00 00 FF 
14e48     1C E5 05 F1 | 	add	objptr, ##42268
14e4c     F2 14 02 FB | 	rdlong	arg02, objptr
14e50     52 00 00 FF 
14e54     1C E5 85 F1 | 	sub	objptr, ##42268
14e58     A8 02 B1 FD | 	call	#__system___string_concat
14e5c     FD 14 02 F6 | 	mov	arg02, result1
14e60     19 13 02 F6 | 	mov	arg01, local07
14e64     00 16 06 F6 | 	mov	arg03, #0
14e68     5C 0A B1 FD | 	call	#__system___basic_print_string
14e6c     00 12 06 F6 | 	mov	arg01, #0
14e70     0A 14 06 F6 | 	mov	arg02, #10
14e74     00 16 06 F6 | 	mov	arg03, #0
14e78     F4 09 B1 FD | 	call	#__system___basic_print_char
14e7c     00 12 06 F6 | 	mov	arg01, #0
14e80     10 4D B1 FD | 	call	#__system___getiolock_0622
14e84     FD 00 68 FC | 	wrlong	#0, result1
14e88     52 00 00 FF 
14e8c     2C E5 05 F1 | 	add	objptr, ##42284
14e90     F2 00 68 FC | 	wrlong	#0, objptr
14e94     52 00 00 FF 
14e98     2C E5 85 F1 | 	sub	objptr, ##42284
14e9c                 | LR__1758
14e9c     A7 F0 03 F6 | 	mov	ptra, fp
14ea0     B2 00 A0 FD | 	call	#popregs_
14ea4                 | _do_load_ret
14ea4     2D 00 64 FD | 	ret
14ea8                 | 
14ea8                 | ' 
14ea8                 | ' '-------------------- log
14ea8                 | ' 
14ea8                 | ' sub do_log
14ea8                 | _do_log
14ea8     02 4A 05 F6 | 	mov	COUNT_, #2
14eac     A8 00 A0 FD | 	call	#pushregs_
14eb0     14 F0 07 F1 | 	add	ptra, #20
14eb4     4A 00 00 FF 
14eb8     A0 E4 05 F1 | 	add	objptr, ##38048
14ebc     F2 16 02 FB | 	rdlong	arg03, objptr
14ec0     0B 15 02 F6 | 	mov	arg02, arg03
14ec4     01 14 66 F0 | 	shl	arg02, #1
14ec8     0B 15 02 F1 | 	add	arg02, arg03
14ecc     02 14 66 F0 | 	shl	arg02, #2
14ed0     03 00 00 FF 
14ed4     04 E4 85 F1 | 	sub	objptr, ##1540
14ed8     F2 14 02 F1 | 	add	arg02, objptr
14edc     0A 27 0A FB | 	rdlong	local01, arg02 wz
14ee0                 | ' 
14ee0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ee0                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14ee0     47 00 00 FF 
14ee4     9C E4 85 F1 | 	sub	objptr, ##36508
14ee8     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14eec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1760
14ef0     00 12 06 F6 | 	mov	arg01, #0
14ef4     9C 4C B1 FD | 	call	#__system___getiolock_0622
14ef8     FD 12 02 F6 | 	mov	arg01, result1
14efc     A8 01 B1 FD | 	call	#__system___lockmem
14f00     93 01 00 FF 
14f04     43 14 06 F6 | 	mov	arg02, ##@LR__5641
14f08     00 12 06 F6 | 	mov	arg01, #0
14f0c     00 16 06 F6 | 	mov	arg03, #0
14f10     B4 09 B1 FD | 	call	#__system___basic_print_string
14f14     00 12 06 F6 | 	mov	arg01, #0
14f18     78 4C B1 FD | 	call	#__system___getiolock_0622
14f1c     FD 00 68 FC | 	wrlong	#0, result1
14f20     27 12 06 F6 | 	mov	arg01, #39
14f24     00 14 06 F6 | 	mov	arg02, #0
14f28     F4 AC B0 FD | 	call	#_printerror
14f2c     AC 00 90 FD | 	jmp	#LR__1763
14f30                 | LR__1760
14f30                 | ' if numpar=2 then 
14f30     02 26 0E F2 | 	cmp	local01, #2 wz
14f34     40 00 90 5D |  if_ne	jmp	#LR__1761
14f38     04 86 BF FD | 	call	#_pop
14f3c     FF 26 02 F6 | 	mov	local01, result3
14f40     A7 FA 61 FC | 	wrlong	result1, fp
14f44     04 4E 05 F1 | 	add	fp, #4
14f48     A7 FC 61 FC | 	wrlong	result2, fp
14f4c     04 4E 05 F1 | 	add	fp, #4
14f50     A7 26 62 FC | 	wrlong	local01, fp
14f54     08 4E 85 F1 | 	sub	fp, #8
14f58     A7 12 02 F6 | 	mov	arg01, fp
14f5c     78 88 BF FD | 	call	#_converttofloat
14f60     FD 14 02 F6 | 	mov	arg02, result1
14f64     FC 16 20 FF 
14f68     54 12 06 F6 | 	mov	arg01, ##1076754516
14f6c     A8 2E B1 FD | 	call	#__system____builtin_logbase
14f70     FD 28 02 F6 | 	mov	local02, result1
14f74     08 00 90 FD | 	jmp	#LR__1762
14f78                 | LR__1761
14f78     00 C0 1F FF 
14f7c     00 28 06 F6 | 	mov	local02, ##1065353216
14f80                 | LR__1762
14f80     BC 85 BF FD | 	call	#_pop
14f84     FF 26 02 F6 | 	mov	local01, result3
14f88     A7 FA 61 FC | 	wrlong	result1, fp
14f8c     04 4E 05 F1 | 	add	fp, #4
14f90     A7 FC 61 FC | 	wrlong	result2, fp
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 26 62 FC | 	wrlong	local01, fp
14f9c     08 4E 85 F1 | 	sub	fp, #8
14fa0     A7 12 02 F6 | 	mov	arg01, fp
14fa4     30 88 BF FD | 	call	#_converttofloat
14fa8     FD 14 02 F6 | 	mov	arg02, result1
14fac     FC 16 20 FF 
14fb0     54 12 06 F6 | 	mov	arg01, ##1076754516
14fb4     60 2E B1 FD | 	call	#__system____builtin_logbase
14fb8     FD 12 02 F6 | 	mov	arg01, result1
14fbc     14 15 02 F6 | 	mov	arg02, local02
14fc0     A4 21 B1 FD | 	call	#__system___float_div
14fc4     A7 FA 61 FC | 	wrlong	result1, fp
14fc8     08 4E 05 F1 | 	add	fp, #8
14fcc     A7 3C 68 FC | 	wrlong	#30, fp
14fd0     08 4E 85 F1 | 	sub	fp, #8
14fd4     A7 12 02 F6 | 	mov	arg01, fp
14fd8     F4 85 BF FD | 	call	#_push
14fdc                 | LR__1763
14fdc     A7 F0 03 F6 | 	mov	ptra, fp
14fe0     B2 00 A0 FD | 	call	#popregs_
14fe4                 | _do_log_ret
14fe4     2D 00 64 FD | 	ret
14fe8                 | 
14fe8                 | ' 
14fe8                 | ' '-------------------- lpeek
14fe8                 | ' 
14fe8                 | ' sub do_lpeek
14fe8                 | _do_lpeek
14fe8     01 4A 05 F6 | 	mov	COUNT_, #1
14fec     A8 00 A0 FD | 	call	#pushregs_
14ff0     14 F0 07 F1 | 	add	ptra, #20
14ff4     48 85 BF FD | 	call	#_pop
14ff8     A7 FA 61 FC | 	wrlong	result1, fp
14ffc     04 4E 05 F1 | 	add	fp, #4
15000     A7 FC 61 FC | 	wrlong	result2, fp
15004     04 4E 05 F1 | 	add	fp, #4
15008     A7 FE 61 FC | 	wrlong	result3, fp
1500c     08 4E 85 F1 | 	sub	fp, #8
15010     A7 12 02 F6 | 	mov	arg01, fp
15014     04 87 BF FD | 	call	#_converttoint
15018     FD 12 02 F6 | 	mov	arg01, result1
1501c                 | ' 
1501c                 | ' t1=pop()
1501c                 | ' a=converttoint(t1)
1501c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1501c     00 04 00 FF 
15020     00 12 16 F2 | 	cmp	arg01, ##524288 wc
15024     09 27 02 CB |  if_b	rdlong	local01, arg01
15028     08 00 90 CD |  if_b	jmp	#LR__1770
1502c     AC AD B0 FD | 	call	#_pslpeek
15030     FD 26 02 F6 | 	mov	local01, result1
15034                 | LR__1770
15034     08 4E 05 F1 | 	add	fp, #8
15038     A7 3A 68 FC | 	wrlong	#29, fp
1503c     08 4E 85 F1 | 	sub	fp, #8
15040     A7 26 62 FC | 	wrlong	local01, fp
15044     A7 12 02 F6 | 	mov	arg01, fp
15048     84 85 BF FD | 	call	#_push
1504c     A7 F0 03 F6 | 	mov	ptra, fp
15050     B2 00 A0 FD | 	call	#popregs_
15054                 | _do_lpeek_ret
15054     2D 00 64 FD | 	ret
15058                 | 
15058                 | ' 
15058                 | ' '-------------------- lpoke
15058                 | ' 
15058                 | ' sub do_lpoke
15058                 | _do_lpoke
15058     02 4A 05 F6 | 	mov	COUNT_, #2
1505c     A8 00 A0 FD | 	call	#pushregs_
15060     20 F0 07 F1 | 	add	ptra, #32
15064     D8 84 BF FD | 	call	#_pop
15068     FD 14 02 F6 | 	mov	arg02, result1
1506c     FE 12 02 F6 | 	mov	arg01, result2
15070     FF 26 02 F6 | 	mov	local01, result3
15074     A7 14 62 FC | 	wrlong	arg02, fp
15078     04 4E 05 F1 | 	add	fp, #4
1507c     A7 12 62 FC | 	wrlong	arg01, fp
15080     04 4E 05 F1 | 	add	fp, #4
15084     A7 26 62 FC | 	wrlong	local01, fp
15088     08 4E 85 F1 | 	sub	fp, #8
1508c     B0 84 BF FD | 	call	#_pop
15090     FF 26 02 F6 | 	mov	local01, result3
15094     0C 4E 05 F1 | 	add	fp, #12
15098     A7 FA 61 FC | 	wrlong	result1, fp
1509c     04 4E 05 F1 | 	add	fp, #4
150a0     A7 FC 61 FC | 	wrlong	result2, fp
150a4     04 4E 05 F1 | 	add	fp, #4
150a8     A7 26 62 FC | 	wrlong	local01, fp
150ac     08 4E 85 F1 | 	sub	fp, #8
150b0     A7 12 02 F6 | 	mov	arg01, fp
150b4     0C 4E 85 F1 | 	sub	fp, #12
150b8     60 86 BF FD | 	call	#_converttoint
150bc     FD 26 02 F6 | 	mov	local01, result1
150c0     A7 12 02 F6 | 	mov	arg01, fp
150c4     54 86 BF FD | 	call	#_converttoint
150c8     FD 28 02 F6 | 	mov	local02, result1
150cc                 | ' 
150cc                 | ' t1=pop() 'value
150cc                 | ' t2=pop() 
150cc                 | ' a=converttoint(t2) : v=converttoint(t1)
150cc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
150cc     00 04 00 FF 
150d0     00 26 16 F2 | 	cmp	local01, ##524288 wc
150d4     13 29 62 CC |  if_b	wrlong	local02, local01
150d8     13 13 02 36 |  if_ae	mov	arg01, local01
150dc     14 15 02 36 |  if_ae	mov	arg02, local02
150e0     D8 AB B0 3D |  if_ae	call	#_pslpoke
150e4     A7 F0 03 F6 | 	mov	ptra, fp
150e8     B2 00 A0 FD | 	call	#popregs_
150ec                 | _do_lpoke_ret
150ec     2D 00 64 FD | 	ret
150f0                 | 
150f0                 | ' 
150f0                 | ' '-------------------- memlo
150f0                 | ' 
150f0                 | ' sub do_memlo
150f0                 | _do_memlo
150f0     00 4A 05 F6 | 	mov	COUNT_, #0
150f4     A8 00 A0 FD | 	call	#pushregs_
150f8     0C F0 07 F1 | 	add	ptra, #12
150fc     43 00 00 FF 
15100     7C E4 05 F1 | 	add	objptr, ##34428
15104     F2 12 02 FB | 	rdlong	arg01, objptr
15108     43 00 00 FF 
1510c     7C E4 85 F1 | 	sub	objptr, ##34428
15110     A7 12 62 FC | 	wrlong	arg01, fp
15114     08 4E 05 F1 | 	add	fp, #8
15118     A7 3A 68 FC | 	wrlong	#29, fp
1511c     08 4E 85 F1 | 	sub	fp, #8
15120     A7 12 02 F6 | 	mov	arg01, fp
15124     A8 84 BF FD | 	call	#_push
15128     A7 F0 03 F6 | 	mov	ptra, fp
1512c     B2 00 A0 FD | 	call	#popregs_
15130                 | _do_memlo_ret
15130     2D 00 64 FD | 	ret
15134                 | 
15134                 | ' 
15134                 | ' '-------------------- memtop
15134                 | ' 
15134                 | ' sub do_memtop
15134                 | _do_memtop
15134     00 4A 05 F6 | 	mov	COUNT_, #0
15138     A8 00 A0 FD | 	call	#pushregs_
1513c     0C F0 07 F1 | 	add	ptra, #12
15140     52 00 00 FF 
15144     F0 E4 05 F1 | 	add	objptr, ##42224
15148     F2 12 02 FB | 	rdlong	arg01, objptr
1514c     52 00 00 FF 
15150     F0 E4 85 F1 | 	sub	objptr, ##42224
15154     A7 12 62 FC | 	wrlong	arg01, fp
15158     08 4E 05 F1 | 	add	fp, #8
1515c     A7 3A 68 FC | 	wrlong	#29, fp
15160     08 4E 85 F1 | 	sub	fp, #8
15164     A7 12 02 F6 | 	mov	arg01, fp
15168     64 84 BF FD | 	call	#_push
1516c     A7 F0 03 F6 | 	mov	ptra, fp
15170     B2 00 A0 FD | 	call	#popregs_
15174                 | _do_memtop_ret
15174     2D 00 64 FD | 	ret
15178                 | 
15178                 | ' 
15178                 | ' '-------------------- mid$
15178                 | ' 
15178                 | ' sub do_mid
15178                 | _do_mid
15178     02 4A 05 F6 | 	mov	COUNT_, #2
1517c     A8 00 A0 FD | 	call	#pushregs_
15180     18 F0 07 F1 | 	add	ptra, #24
15184     4A 00 00 FF 
15188     A0 E4 05 F1 | 	add	objptr, ##38048
1518c     F2 16 02 FB | 	rdlong	arg03, objptr
15190     0B 15 02 F6 | 	mov	arg02, arg03
15194     01 14 66 F0 | 	shl	arg02, #1
15198     0B 15 02 F1 | 	add	arg02, arg03
1519c     02 14 66 F0 | 	shl	arg02, #2
151a0     03 00 00 FF 
151a4     04 E4 85 F1 | 	sub	objptr, ##1540
151a8     F2 14 02 F1 | 	add	arg02, objptr
151ac     0A 17 02 FB | 	rdlong	arg03, arg02
151b0                 | ' 
151b0                 | ' numpar=compiledline(lineptr_e).result.uresult
151b0                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
151b0     03 16 0E F2 | 	cmp	arg03, #3 wz
151b4     47 00 00 FF 
151b8     9C E4 85 F1 | 	sub	objptr, ##36508
151bc     40 00 90 AD |  if_e	jmp	#LR__1780
151c0     00 12 06 F6 | 	mov	arg01, #0
151c4     CC 49 B1 FD | 	call	#__system___getiolock_0622
151c8     FD 12 02 F6 | 	mov	arg01, result1
151cc     D8 FE B0 FD | 	call	#__system___lockmem
151d0     93 01 00 FF 
151d4     49 14 06 F6 | 	mov	arg02, ##@LR__5642
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     00 16 06 F6 | 	mov	arg03, #0
151e0     E4 06 B1 FD | 	call	#__system___basic_print_string
151e4     00 12 06 F6 | 	mov	arg01, #0
151e8     A8 49 B1 FD | 	call	#__system___getiolock_0622
151ec     FD 00 68 FC | 	wrlong	#0, result1
151f0     27 12 06 F6 | 	mov	arg01, #39
151f4     00 14 06 F6 | 	mov	arg02, #0
151f8     24 AA B0 FD | 	call	#_printerror
151fc     08 01 90 FD | 	jmp	#LR__1783
15200                 | LR__1780
15200     3C 83 BF FD | 	call	#_pop
15204     FF 16 02 F6 | 	mov	arg03, result3
15208     A7 FA 61 FC | 	wrlong	result1, fp
1520c     04 4E 05 F1 | 	add	fp, #4
15210     A7 FC 61 FC | 	wrlong	result2, fp
15214     04 4E 05 F1 | 	add	fp, #4
15218     A7 16 62 FC | 	wrlong	arg03, fp
1521c     08 4E 85 F1 | 	sub	fp, #8
15220     A7 12 02 F6 | 	mov	arg01, fp
15224     F4 84 BF FD | 	call	#_converttoint
15228     FD 26 02 F6 | 	mov	local01, result1
1522c     10 83 BF FD | 	call	#_pop
15230     FF 16 02 F6 | 	mov	arg03, result3
15234     A7 FA 61 FC | 	wrlong	result1, fp
15238     04 4E 05 F1 | 	add	fp, #4
1523c     A7 FC 61 FC | 	wrlong	result2, fp
15240     04 4E 05 F1 | 	add	fp, #4
15244     A7 16 62 FC | 	wrlong	arg03, fp
15248     08 4E 85 F1 | 	sub	fp, #8
1524c     A7 12 02 F6 | 	mov	arg01, fp
15250     C8 84 BF FD | 	call	#_converttoint
15254     FD 28 02 F6 | 	mov	local02, result1
15258     E4 82 BF FD | 	call	#_pop
1525c     FF 16 02 F6 | 	mov	arg03, result3
15260     A7 FA 61 FC | 	wrlong	result1, fp
15264     04 4E 05 F1 | 	add	fp, #4
15268     A7 FC 61 FC | 	wrlong	result2, fp
1526c     04 4E 05 F1 | 	add	fp, #4
15270     A7 16 62 FC | 	wrlong	arg03, fp
15274                 | ' t1=pop() : arg2=converttoint(t1)
15274                 | ' t1=pop() : arg1=converttoint(t1)
15274                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15274     08 4E 85 F1 | 	sub	fp, #8
15278     2B 16 0E F2 | 	cmp	arg03, #43 wz
1527c     18 00 90 5D |  if_ne	jmp	#LR__1781
15280     A7 12 02 FB | 	rdlong	arg01, fp
15284     28 84 BF FD | 	call	#_convertstring
15288     A7 FA 61 FC | 	wrlong	result1, fp
1528c     08 4E 05 F1 | 	add	fp, #8
15290     A7 3E 68 FC | 	wrlong	#31, fp
15294     08 4E 85 F1 | 	sub	fp, #8
15298                 | LR__1781
15298                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15298     08 4E 05 F1 | 	add	fp, #8
1529c     A7 16 02 FB | 	rdlong	arg03, fp
152a0     08 4E 85 F1 | 	sub	fp, #8
152a4     1F 16 0E F2 | 	cmp	arg03, #31 wz
152a8     40 00 90 AD |  if_e	jmp	#LR__1782
152ac     00 12 06 F6 | 	mov	arg01, #0
152b0     E0 48 B1 FD | 	call	#__system___getiolock_0622
152b4     FD 12 02 F6 | 	mov	arg01, result1
152b8     EC FD B0 FD | 	call	#__system___lockmem
152bc     93 01 00 FF 
152c0     50 14 06 F6 | 	mov	arg02, ##@LR__5643
152c4     00 12 06 F6 | 	mov	arg01, #0
152c8     00 16 06 F6 | 	mov	arg03, #0
152cc     F8 05 B1 FD | 	call	#__system___basic_print_string
152d0     00 12 06 F6 | 	mov	arg01, #0
152d4     BC 48 B1 FD | 	call	#__system___getiolock_0622
152d8     FD 00 68 FC | 	wrlong	#0, result1
152dc     0F 12 06 F6 | 	mov	arg01, #15
152e0     00 14 06 F6 | 	mov	arg02, #0
152e4     38 A9 B0 FD | 	call	#_printerror
152e8     1C 00 90 FD | 	jmp	#LR__1783
152ec                 | LR__1782
152ec     A7 12 02 FB | 	rdlong	arg01, fp
152f0     14 15 02 F6 | 	mov	arg02, local02
152f4     13 17 02 F6 | 	mov	arg03, local01
152f8     84 12 B1 FD | 	call	#__system__Mid_S
152fc     A7 FA 61 FC | 	wrlong	result1, fp
15300     A7 12 02 F6 | 	mov	arg01, fp
15304     C8 82 BF FD | 	call	#_push
15308                 | LR__1783
15308     A7 F0 03 F6 | 	mov	ptra, fp
1530c     B2 00 A0 FD | 	call	#popregs_
15310                 | _do_mid_ret
15310     2D 00 64 FD | 	ret
15314                 | 
15314                 | ' 
15314                 | ' '-------------------- mkdir
15314                 | ' 
15314                 | ' sub do_mkdir
15314                 | _do_mkdir
15314     09 4A 05 F6 | 	mov	COUNT_, #9
15318     A8 00 A0 FD | 	call	#pushregs_
1531c     20 82 BF FD | 	call	#_pop
15320     FE 18 02 F6 | 	mov	arg04, result2
15324     FF 16 02 F6 | 	mov	arg03, result3
15328     FD 26 02 F6 | 	mov	local01, result1
1532c     0C 29 02 F6 | 	mov	local02, arg04
15330     0B 2B 02 F6 | 	mov	local03, arg03
15334                 | ' 
15334                 | ' t1=pop()
15334                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15334     2B 2A 0E F2 | 	cmp	local03, #43 wz
15338     10 00 90 5D |  if_ne	jmp	#LR__1790
1533c     13 13 02 F6 | 	mov	arg01, local01
15340     6C 83 BF FD | 	call	#_convertstring
15344     FD 26 02 F6 | 	mov	local01, result1
15348     1F 2A 06 F6 | 	mov	local03, #31
1534c                 | LR__1790
1534c                 | ' if t1.result_type<>result_string then printerror(15): return
1534c     1F 2A 0E F2 | 	cmp	local03, #31 wz
15350     10 00 90 AD |  if_e	jmp	#LR__1791
15354     0F 12 06 F6 | 	mov	arg01, #15
15358     00 14 06 F6 | 	mov	arg02, #0
1535c     C0 A8 B0 FD | 	call	#_printerror
15360     00 01 90 FD | 	jmp	#LR__1797
15364                 | LR__1791
15364     F3 2C 02 F6 | 	mov	local04, ptr___system__dat__
15368     84 2D 06 F1 | 	add	local04, #388
1536c     13 15 02 F6 | 	mov	arg02, local01
15370     16 13 02 F6 | 	mov	arg01, local04
15374     00 16 06 F6 | 	mov	arg03, #0
15378     54 01 B1 FD | 	call	#__system____getvfsforfile
1537c     FD 2E 0A F6 | 	mov	local05, result1 wz
15380     10 00 90 AD |  if_e	jmp	#LR__1792
15384     20 2E 06 F1 | 	add	local05, #32
15388     17 15 0A FB | 	rdlong	arg02, local05 wz
1538c     20 2E 86 F1 | 	sub	local05, #32
15390     14 00 90 5D |  if_ne	jmp	#LR__1793
15394                 | LR__1792
15394     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15398     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1539c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
153a0     01 FA 65 F6 | 	neg	result1, #1
153a4     60 00 90 FD | 	jmp	#LR__1795
153a8                 | LR__1793
153a8     38 2E 06 F1 | 	add	local05, #56
153ac     17 31 02 FB | 	rdlong	local06, local05
153b0     18 33 02 F6 | 	mov	local07, local06
153b4     13 30 46 F7 | 	zerox	local06, #19
153b8     14 32 46 F0 | 	shr	local07, #20
153bc     02 32 66 F0 | 	shl	local07, #2
153c0     ED 32 02 F1 | 	add	local07, __methods__
153c4     19 33 02 FB | 	rdlong	local07, local07
153c8     16 13 02 F6 | 	mov	arg01, local04
153cc     FF 15 06 F6 | 	mov	arg02, #511
153d0     F2 34 02 F6 | 	mov	local08, objptr
153d4     18 E5 01 F6 | 	mov	objptr, local06
153d8     2D 32 62 FD | 	call	local07
153dc     1A E5 01 F6 | 	mov	objptr, local08
153e0     FD 12 0A F6 | 	mov	arg01, result1 wz
153e4     1C 00 90 AD |  if_e	jmp	#LR__1794
153e8     09 13 6A F6 | 	neg	arg01, arg01 wz
153ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
153f0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
153f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
153f8     01 FA 65 56 |  if_ne	neg	result1, #1
153fc     00 FA 05 A6 |  if_e	mov	result1, #0
15400     04 00 90 FD | 	jmp	#LR__1795
15404                 | LR__1794
15404     00 FA 05 F6 | 	mov	result1, #0
15408                 | LR__1795
15408     FD 36 0A F6 | 	mov	local09, result1 wz
1540c                 | ' filename$=t1.result.sresult
1540c                 | ' err=mkdir(filename$)
1540c                 | ' 'err=geterr() : 
1540c                 | ' if err<>0 then print "Cannot create a directory: system error "; err
1540c     54 00 90 AD |  if_e	jmp	#LR__1796
15410     00 12 06 F6 | 	mov	arg01, #0
15414     7C 47 B1 FD | 	call	#__system___getiolock_0622
15418     FD 12 02 F6 | 	mov	arg01, result1
1541c     88 FC B0 FD | 	call	#__system___lockmem
15420     93 01 00 FF 
15424     57 14 06 F6 | 	mov	arg02, ##@LR__5644
15428     00 12 06 F6 | 	mov	arg01, #0
1542c     00 16 06 F6 | 	mov	arg03, #0
15430     94 04 B1 FD | 	call	#__system___basic_print_string
15434     00 12 06 F6 | 	mov	arg01, #0
15438     1B 15 02 F6 | 	mov	arg02, local09
1543c     00 16 06 F6 | 	mov	arg03, #0
15440     0A 18 06 F6 | 	mov	arg04, #10
15444     C4 04 B1 FD | 	call	#__system___basic_print_integer
15448     00 12 06 F6 | 	mov	arg01, #0
1544c     0A 14 06 F6 | 	mov	arg02, #10
15450     00 16 06 F6 | 	mov	arg03, #0
15454     18 04 B1 FD | 	call	#__system___basic_print_char
15458     00 12 06 F6 | 	mov	arg01, #0
1545c     34 47 B1 FD | 	call	#__system___getiolock_0622
15460     FD 00 68 FC | 	wrlong	#0, result1
15464                 | LR__1796
15464                 | LR__1797
15464     A7 F0 03 F6 | 	mov	ptra, fp
15468     B2 00 A0 FD | 	call	#popregs_
1546c                 | _do_mkdir_ret
1546c     2D 00 64 FD | 	ret
15470                 | 
15470                 | ' 
15470                 | ' '-------------------- mode
15470                 | ' 
15470                 | ' sub do_mode
15470                 | _do_mode
15470     05 4A 05 F6 | 	mov	COUNT_, #5
15474     A8 00 A0 FD | 	call	#pushregs_
15478     C4 80 BF FD | 	call	#_pop
1547c     FD 26 02 F6 | 	mov	local01, result1
15480     FE 28 02 F6 | 	mov	local02, result2
15484     FF 2A 02 F6 | 	mov	local03, result3
15488                 | ' t1=pop() 
15488                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15488     1E 2A 0E F2 | 	cmp	local03, #30 wz
1548c     10 00 90 5D |  if_ne	jmp	#LR__1800
15490     13 13 02 F6 | 	mov	arg01, local01
15494     00 14 06 F6 | 	mov	arg02, #0
15498     64 1F B1 FD | 	call	#__system___float_tointeger
1549c     FD 26 02 F6 | 	mov	local01, result1
154a0                 | LR__1800
154a0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
154a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
154a4     18 00 90 5D |  if_ne	jmp	#LR__1801
154a8     13 13 02 F6 | 	mov	arg01, local01
154ac     88 22 B1 FD | 	call	#__system____builtin_atof
154b0     FD 12 02 F6 | 	mov	arg01, result1
154b4     00 14 06 F6 | 	mov	arg02, #0
154b8     44 1F B1 FD | 	call	#__system___float_tointeger
154bc     FD 26 02 F6 | 	mov	local01, result1
154c0                 | LR__1801
154c0                 | ' select case t1.result.iresult
154c0     13 2D 02 F6 | 	mov	local04, local01
154c4     06 2C 26 F3 | 	fle	local04, #6
154c8     30 2C 62 FD | 	jmprel	local04
154cc                 | LR__1802
154cc     18 00 90 FD | 	jmp	#LR__1803
154d0     A8 00 90 FD | 	jmp	#LR__1804
154d4     10 01 90 FD | 	jmp	#LR__1805
154d8     78 01 90 FD | 	jmp	#LR__1806
154dc     E0 01 90 FD | 	jmp	#LR__1807
154e0     70 02 90 FD | 	jmp	#LR__1808
154e4     FC 02 90 FD | 	jmp	#LR__1809
154e8                 | LR__1803
154e8     37 00 00 FF 
154ec     60 E4 05 F1 | 	add	objptr, ##28256
154f0     F2 02 68 FC | 	wrlong	#1, objptr
154f4     04 E4 85 F1 | 	sub	objptr, #4
154f8     F2 34 69 FC | 	wrlong	#154, objptr
154fc     19 00 00 FF 
15500     00 E5 05 F1 | 	add	objptr, ##13056
15504     F2 02 68 FC | 	wrlong	#1, objptr
15508     19 00 00 FF 
1550c     04 E5 85 F1 | 	sub	objptr, ##13060
15510     F2 26 69 FC | 	wrlong	#147, objptr
15514     37 00 00 FF 
15518     58 E4 85 F1 | 	sub	objptr, ##28248
1551c     04 12 06 F6 | 	mov	arg01, #4
15520     70 E4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15524     37 00 00 FF 
15528     5C E4 05 F1 | 	add	objptr, ##28252
1552c     F2 12 02 FB | 	rdlong	arg01, objptr
15530     04 E4 85 F1 | 	sub	objptr, #4
15534     F2 14 02 FB | 	rdlong	arg02, objptr
15538                 | ' 
15538                 | ' write_color:=ff
15538     37 00 00 FF 
1553c     17 E4 85 F1 | 	sub	objptr, ##28183
15540     F2 12 62 FC | 	wrlong	arg01, objptr
15544                 | ' write_background:=bb
15544     04 E4 05 F1 | 	add	objptr, #4
15548     F2 14 62 FC | 	wrlong	arg02, objptr
1554c     F5 2C 02 F6 | 	mov	local04, ptr__dat__
15550     01 00 00 FF 
15554     00 2C 06 F1 | 	add	local04, ##512
15558     52 00 00 FF 
1555c     B7 E4 05 F1 | 	add	objptr, ##42167
15560     F2 2C 62 FC | 	wrlong	local04, objptr
15564     04 E4 85 F1 | 	sub	objptr, #4
15568     03 00 80 FF 
1556c     F2 30 69 FC | 	wrlong	##1688, objptr
15570     52 00 00 FF 
15574     F8 E4 85 F1 | 	sub	objptr, ##42232
15578     68 02 90 FD | 	jmp	#LR__1809
1557c                 | LR__1804
1557c     37 00 00 FF 
15580     60 E4 05 F1 | 	add	objptr, ##28256
15584     F2 00 68 FC | 	wrlong	#0, objptr
15588     04 E4 85 F1 | 	sub	objptr, #4
1558c     F2 2E 68 FC | 	wrlong	#23, objptr
15590     19 00 00 FF 
15594     00 E5 05 F1 | 	add	objptr, ##13056
15598     F2 00 68 FC | 	wrlong	#0, objptr
1559c     19 00 00 FF 
155a0     04 E5 85 F1 | 	sub	objptr, ##13060
155a4     F2 00 68 FC | 	wrlong	#0, objptr
155a8     37 00 00 FF 
155ac     58 E4 85 F1 | 	sub	objptr, ##28248
155b0     00 12 06 F6 | 	mov	arg01, #0
155b4     DC E3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
155b8     37 00 00 FF 
155bc     5C E4 05 F1 | 	add	objptr, ##28252
155c0     F2 12 02 FB | 	rdlong	arg01, objptr
155c4     04 E4 85 F1 | 	sub	objptr, #4
155c8     F2 14 02 FB | 	rdlong	arg02, objptr
155cc                 | ' 
155cc                 | ' write_color:=ff
155cc     37 00 00 FF 
155d0     17 E4 85 F1 | 	sub	objptr, ##28183
155d4     F2 12 62 FC | 	wrlong	arg01, objptr
155d8                 | ' write_background:=bb
155d8     04 E4 05 F1 | 	add	objptr, #4
155dc     F2 14 62 FC | 	wrlong	arg02, objptr
155e0     45 E4 85 F1 | 	sub	objptr, #69
155e4     FC 01 90 FD | 	jmp	#LR__1809
155e8                 | LR__1805
155e8     37 00 00 FF 
155ec     60 E4 05 F1 | 	add	objptr, ##28256
155f0     F2 00 68 FC | 	wrlong	#0, objptr
155f4     04 E4 85 F1 | 	sub	objptr, #4
155f8     F2 6A 69 FC | 	wrlong	#181, objptr
155fc     19 00 00 FF 
15600     00 E5 05 F1 | 	add	objptr, ##13056
15604     F2 00 68 FC | 	wrlong	#0, objptr
15608     19 00 00 FF 
1560c     04 E5 85 F1 | 	sub	objptr, ##13060
15610     F2 00 68 FC | 	wrlong	#0, objptr
15614     37 00 00 FF 
15618     58 E4 85 F1 | 	sub	objptr, ##28248
1561c     00 12 06 F6 | 	mov	arg01, #0
15620     70 E3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15624     37 00 00 FF 
15628     5C E4 05 F1 | 	add	objptr, ##28252
1562c     F2 12 02 FB | 	rdlong	arg01, objptr
15630     04 E4 85 F1 | 	sub	objptr, #4
15634     F2 14 02 FB | 	rdlong	arg02, objptr
15638                 | ' 
15638                 | ' write_color:=ff
15638     37 00 00 FF 
1563c     17 E4 85 F1 | 	sub	objptr, ##28183
15640     F2 12 62 FC | 	wrlong	arg01, objptr
15644                 | ' write_background:=bb
15644     04 E4 05 F1 | 	add	objptr, #4
15648     F2 14 62 FC | 	wrlong	arg02, objptr
1564c     45 E4 85 F1 | 	sub	objptr, #69
15650     90 01 90 FD | 	jmp	#LR__1809
15654                 | LR__1806
15654     37 00 00 FF 
15658     60 E4 05 F1 | 	add	objptr, ##28256
1565c     F2 00 68 FC | 	wrlong	#0, objptr
15660     04 E4 85 F1 | 	sub	objptr, #4
15664     F2 1E 68 FC | 	wrlong	#15, objptr
15668     19 00 00 FF 
1566c     00 E5 05 F1 | 	add	objptr, ##13056
15670     F2 00 68 FC | 	wrlong	#0, objptr
15674     19 00 00 FF 
15678     04 E5 85 F1 | 	sub	objptr, ##13060
1567c     F2 00 68 FC | 	wrlong	#0, objptr
15680     37 00 00 FF 
15684     58 E4 85 F1 | 	sub	objptr, ##28248
15688     00 12 06 F6 | 	mov	arg01, #0
1568c     04 E3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15690     37 00 00 FF 
15694     5C E4 05 F1 | 	add	objptr, ##28252
15698     F2 12 02 FB | 	rdlong	arg01, objptr
1569c     04 E4 85 F1 | 	sub	objptr, #4
156a0     F2 14 02 FB | 	rdlong	arg02, objptr
156a4                 | ' 
156a4                 | ' write_color:=ff
156a4     37 00 00 FF 
156a8     17 E4 85 F1 | 	sub	objptr, ##28183
156ac     F2 12 62 FC | 	wrlong	arg01, objptr
156b0                 | ' write_background:=bb
156b0     04 E4 05 F1 | 	add	objptr, #4
156b4     F2 14 62 FC | 	wrlong	arg02, objptr
156b8     45 E4 85 F1 | 	sub	objptr, #69
156bc     24 01 90 FD | 	jmp	#LR__1809
156c0                 | LR__1807
156c0     37 00 00 FF 
156c4     60 E4 05 F1 | 	add	objptr, ##28256
156c8     F2 02 68 FC | 	wrlong	#1, objptr
156cc     04 E4 85 F1 | 	sub	objptr, #4
156d0     F2 02 68 FC | 	wrlong	#1, objptr
156d4     19 00 00 FF 
156d8     00 E5 05 F1 | 	add	objptr, ##13056
156dc     F2 02 68 FC | 	wrlong	#1, objptr
156e0     19 00 00 FF 
156e4     04 E5 85 F1 | 	sub	objptr, ##13060
156e8     F2 1C 68 FC | 	wrlong	#14, objptr
156ec     37 00 00 FF 
156f0     58 E4 85 F1 | 	sub	objptr, ##28248
156f4     04 12 06 F6 | 	mov	arg01, #4
156f8     98 E2 B0 FD | 	call	#_hg010b_spin2_setfontfamily
156fc     37 00 00 FF 
15700     5C E4 05 F1 | 	add	objptr, ##28252
15704     F2 12 02 FB | 	rdlong	arg01, objptr
15708     04 E4 85 F1 | 	sub	objptr, #4
1570c     F2 14 02 FB | 	rdlong	arg02, objptr
15710                 | ' 
15710                 | ' write_color:=ff
15710     37 00 00 FF 
15714     17 E4 85 F1 | 	sub	objptr, ##28183
15718     F2 12 62 FC | 	wrlong	arg01, objptr
1571c                 | ' write_background:=bb
1571c     04 E4 05 F1 | 	add	objptr, #4
15720     F2 14 62 FC | 	wrlong	arg02, objptr
15724     F5 2E 02 F6 | 	mov	local05, ptr__dat__
15728     07 00 00 FF 
1572c     82 2F 06 F1 | 	add	local05, ##3970
15730     52 00 00 FF 
15734     B7 E4 05 F1 | 	add	objptr, ##42167
15738     F2 2E 62 FC | 	wrlong	local05, objptr
1573c     04 E4 85 F1 | 	sub	objptr, #4
15740     03 00 80 FF 
15744     F2 30 69 FC | 	wrlong	##1688, objptr
15748     52 00 00 FF 
1574c     F8 E4 85 F1 | 	sub	objptr, ##42232
15750     90 00 90 FD | 	jmp	#LR__1809
15754                 | LR__1808
15754     37 00 00 FF 
15758     60 E4 05 F1 | 	add	objptr, ##28256
1575c     F2 04 68 FC | 	wrlong	#2, objptr
15760     04 E4 85 F1 | 	sub	objptr, #4
15764     F2 02 68 FC | 	wrlong	#1, objptr
15768     19 00 00 FF 
1576c     00 E5 05 F1 | 	add	objptr, ##13056
15770     F2 02 68 FC | 	wrlong	#1, objptr
15774     19 00 00 FF 
15778     04 E5 85 F1 | 	sub	objptr, ##13060
1577c     F2 0E 68 FC | 	wrlong	#7, objptr
15780     37 00 00 FF 
15784     58 E4 85 F1 | 	sub	objptr, ##28248
15788     08 12 06 F6 | 	mov	arg01, #8
1578c     04 E2 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15790     37 00 00 FF 
15794     5C E4 05 F1 | 	add	objptr, ##28252
15798     F2 12 02 FB | 	rdlong	arg01, objptr
1579c     04 E4 85 F1 | 	sub	objptr, #4
157a0     F2 14 02 FB | 	rdlong	arg02, objptr
157a4                 | ' 
157a4                 | ' write_color:=ff
157a4     37 00 00 FF 
157a8     17 E4 85 F1 | 	sub	objptr, ##28183
157ac     F2 12 62 FC | 	wrlong	arg01, objptr
157b0                 | ' write_background:=bb
157b0     04 E4 05 F1 | 	add	objptr, #4
157b4     F2 14 62 FC | 	wrlong	arg02, objptr
157b8     F5 2E 02 F6 | 	mov	local05, ptr__dat__
157bc     07 00 00 FF 
157c0     82 2F 06 F1 | 	add	local05, ##3970
157c4     52 00 00 FF 
157c8     B7 E4 05 F1 | 	add	objptr, ##42167
157cc     F2 2E 62 FC | 	wrlong	local05, objptr
157d0     04 E4 85 F1 | 	sub	objptr, #4
157d4     03 00 80 FF 
157d8     F2 30 69 FC | 	wrlong	##1688, objptr
157dc     52 00 00 FF 
157e0     F8 E4 85 F1 | 	sub	objptr, ##42232
157e4                 | LR__1809
157e4     52 00 00 FF 
157e8     F4 E4 05 F1 | 	add	objptr, ##42228
157ec     F2 26 62 FC | 	wrlong	local01, objptr
157f0     04 E4 85 F1 | 	sub	objptr, #4
157f4     F2 12 02 FB | 	rdlong	arg01, objptr
157f8     0F 00 00 FF 
157fc     74 E4 85 F1 | 	sub	objptr, ##7796
15800     F2 2E 02 FB | 	rdlong	local05, objptr
15804     43 00 00 FF 
15808     7C E4 85 F1 | 	sub	objptr, ##34428
1580c     17 13 82 F1 | 	sub	arg01, local05
15810     00 14 06 F6 | 	mov	arg02, #0
15814     0A 16 06 F6 | 	mov	arg03, #10
15818     A0 0E B1 FD | 	call	#__system__Number_S
1581c     FD 12 02 F6 | 	mov	arg01, result1
15820     93 01 00 FF 
15824     80 14 06 F6 | 	mov	arg02, ##@LR__5645
15828     D8 F8 B0 FD | 	call	#__system___string_concat
1582c     50 00 00 FF 
15830     58 E5 05 F1 | 	add	objptr, ##41304
15834     F2 FA 61 FC | 	wrlong	result1, objptr
15838     19 00 00 FF 
1583c     FC E4 85 F1 | 	sub	objptr, ##13052
15840     F2 12 02 FB | 	rdlong	arg01, objptr
15844     04 E4 85 F1 | 	sub	objptr, #4
15848     F2 14 02 FB | 	rdlong	arg02, objptr
1584c     37 00 00 FF 
15850     58 E4 85 F1 | 	sub	objptr, ##28248
15854     D8 E2 B0 FD | 	call	#_hg010b_spin2_cls
15858     93 01 00 FF 
1585c     92 12 06 F6 | 	mov	arg01, ##@LR__5646
15860                 | ' 
15860                 | ' write(text)
15860     7C E6 B0 FD | 	call	#_hg010b_spin2_write
15864                 | ' crlf
15864     18 EB B0 FD | 	call	#_hg010b_spin2_crlf
15868     18 00 00 FF 
1586c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15870     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15874     18 00 00 FF 
15878     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1587c                 | ' 
1587c                 | ' write(text)
1587c     60 E6 B0 FD | 	call	#_hg010b_spin2_write
15880                 | ' crlf
15880     FC EA B0 FD | 	call	#_hg010b_spin2_crlf
15884     50 00 00 FF 
15888     58 E5 05 F1 | 	add	objptr, ##41304
1588c     F2 12 02 FB | 	rdlong	arg01, objptr
15890     50 00 00 FF 
15894     58 E5 85 F1 | 	sub	objptr, ##41304
15898                 | ' 
15898                 | ' write(text)
15898     44 E6 B0 FD | 	call	#_hg010b_spin2_write
1589c                 | ' crlf
1589c     E0 EA B0 FD | 	call	#_hg010b_spin2_crlf
158a0     A7 F0 03 F6 | 	mov	ptra, fp
158a4     B2 00 A0 FD | 	call	#popregs_
158a8                 | _do_mode_ret
158a8     2D 00 64 FD | 	ret
158ac                 | 
158ac                 | ' 
158ac                 | ' '-------------------- mouse
158ac                 | ' 
158ac                 | ' sub do_mouse
158ac                 | _do_mouse
158ac     90 7C BF FD | 	call	#_pop
158b0     00 FA 4D F2 | 	cmps	result1, #0 wz
158b4                 | ' 
158b4                 | ' t1=pop()
158b4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
158b4     14 00 90 5D |  if_ne	jmp	#LR__1810
158b8     10 12 06 F6 | 	mov	arg01, #16
158bc     00 14 06 F6 | 	mov	arg02, #0
158c0     00 16 06 F6 | 	mov	arg03, #0
158c4     8C D9 B0 FD | 	call	#_hg010b_spin2_setspritesize
158c8     10 00 90 FD | 	jmp	#LR__1811
158cc                 | LR__1810
158cc     10 12 06 F6 | 	mov	arg01, #16
158d0     20 14 06 F6 | 	mov	arg02, #32
158d4     20 16 06 F6 | 	mov	arg03, #32
158d8     78 D9 B0 FD | 	call	#_hg010b_spin2_setspritesize
158dc                 | LR__1811
158dc                 | _do_mouse_ret
158dc     2D 00 64 FD | 	ret
158e0                 | 
158e0                 | ' 
158e0                 | ' '-------------------- mousek
158e0                 | ' 
158e0                 | ' sub do_mousek
158e0                 | _do_mousek
158e0     00 4A 05 F6 | 	mov	COUNT_, #0
158e4     A8 00 A0 FD | 	call	#pushregs_
158e8     0C F0 07 F1 | 	add	ptra, #12
158ec     08 4E 05 F1 | 	add	fp, #8
158f0     A7 3A 68 FC | 	wrlong	#29, fp
158f4     08 4E 85 F1 | 	sub	fp, #8
158f8     51 00 00 FF 
158fc     70 E5 05 F1 | 	add	objptr, ##41840
15900     F2 12 02 FB | 	rdlong	arg01, objptr
15904     51 00 00 FF 
15908     70 E5 85 F1 | 	sub	objptr, ##41840
1590c     A7 12 62 FC | 	wrlong	arg01, fp
15910     A7 12 02 F6 | 	mov	arg01, fp
15914     B8 7C BF FD | 	call	#_push
15918     A7 F0 03 F6 | 	mov	ptra, fp
1591c     B2 00 A0 FD | 	call	#popregs_
15920                 | _do_mousek_ret
15920     2D 00 64 FD | 	ret
15924                 | 
15924                 | ' 
15924                 | ' '-------------------- mousew
15924                 | ' 
15924                 | ' sub do_mousew
15924                 | _do_mousew
15924     00 4A 05 F6 | 	mov	COUNT_, #0
15928     A8 00 A0 FD | 	call	#pushregs_
1592c     0C F0 07 F1 | 	add	ptra, #12
15930     08 4E 05 F1 | 	add	fp, #8
15934     A7 38 68 FC | 	wrlong	#28, fp
15938     08 4E 85 F1 | 	sub	fp, #8
1593c     51 00 00 FF 
15940     74 E5 05 F1 | 	add	objptr, ##41844
15944     F2 12 02 FB | 	rdlong	arg01, objptr
15948     51 00 00 FF 
1594c     74 E5 85 F1 | 	sub	objptr, ##41844
15950     A7 12 62 FC | 	wrlong	arg01, fp
15954     A7 12 02 F6 | 	mov	arg01, fp
15958     74 7C BF FD | 	call	#_push
1595c     A7 F0 03 F6 | 	mov	ptra, fp
15960     B2 00 A0 FD | 	call	#popregs_
15964                 | _do_mousew_ret
15964     2D 00 64 FD | 	ret
15968                 | 
15968                 | ' 
15968                 | ' '-------------------- mousex
15968                 | ' 
15968                 | ' sub do_mousex
15968                 | _do_mousex
15968     00 4A 05 F6 | 	mov	COUNT_, #0
1596c     A8 00 A0 FD | 	call	#pushregs_
15970     0C F0 07 F1 | 	add	ptra, #12
15974     08 4E 05 F1 | 	add	fp, #8
15978     A7 3A 68 FC | 	wrlong	#29, fp
1597c     08 4E 85 F1 | 	sub	fp, #8
15980     51 00 00 FF 
15984     68 E5 05 F1 | 	add	objptr, ##41832
15988     F2 12 02 FB | 	rdlong	arg01, objptr
1598c     51 00 00 FF 
15990     68 E5 85 F1 | 	sub	objptr, ##41832
15994     A7 12 62 FC | 	wrlong	arg01, fp
15998     A7 12 02 F6 | 	mov	arg01, fp
1599c     30 7C BF FD | 	call	#_push
159a0     A7 F0 03 F6 | 	mov	ptra, fp
159a4     B2 00 A0 FD | 	call	#popregs_
159a8                 | _do_mousex_ret
159a8     2D 00 64 FD | 	ret
159ac                 | 
159ac                 | ' 
159ac                 | ' '-------------------- mousey
159ac                 | ' 
159ac                 | ' sub do_mousey
159ac                 | _do_mousey
159ac     00 4A 05 F6 | 	mov	COUNT_, #0
159b0     A8 00 A0 FD | 	call	#pushregs_
159b4     0C F0 07 F1 | 	add	ptra, #12
159b8     08 4E 05 F1 | 	add	fp, #8
159bc     A7 3A 68 FC | 	wrlong	#29, fp
159c0     08 4E 85 F1 | 	sub	fp, #8
159c4     51 00 00 FF 
159c8     6C E5 05 F1 | 	add	objptr, ##41836
159cc     F2 12 02 FB | 	rdlong	arg01, objptr
159d0     51 00 00 FF 
159d4     6C E5 85 F1 | 	sub	objptr, ##41836
159d8     A7 12 62 FC | 	wrlong	arg01, fp
159dc     A7 12 02 F6 | 	mov	arg01, fp
159e0     EC 7B BF FD | 	call	#_push
159e4     A7 F0 03 F6 | 	mov	ptra, fp
159e8     B2 00 A0 FD | 	call	#popregs_
159ec                 | _do_mousey_ret
159ec     2D 00 64 FD | 	ret
159f0                 | 
159f0                 | ' 
159f0                 | ' '------------------ new
159f0                 | ' 
159f0                 | ' sub do_new
159f0                 | _do_new
159f0     03 4A 05 F6 | 	mov	COUNT_, #3
159f4     A8 00 A0 FD | 	call	#pushregs_
159f8                 | ' 
159f8                 | ' if inrun=1 then inrun=2
159f8     50 00 00 FF 
159fc     0C E5 05 F1 | 	add	objptr, ##41228
15a00     F2 16 02 FB | 	rdlong	arg03, objptr
15a04     50 00 00 FF 
15a08     0C E5 85 F1 | 	sub	objptr, ##41228
15a0c     01 16 0E F2 | 	cmp	arg03, #1 wz
15a10     50 00 00 AF 
15a14     0C E5 05 A1 |  if_e	add	objptr, ##41228
15a18     F2 04 68 AC |  if_e	wrlong	#2, objptr
15a1c     50 00 00 AF 
15a20     0C E5 85 A1 |  if_e	sub	objptr, ##41228
15a24     13 12 C6 F9 | 	decod	arg01, #19
15a28     01 14 66 F6 | 	neg	arg02, #1
15a2c     8C A2 B0 FD | 	call	#_pslpoke
15a30     35 00 00 FF 
15a34     28 E4 05 F1 | 	add	objptr, ##27176
15a38     F2 00 68 FC | 	wrlong	#0, objptr
15a3c                 | ' pslpoke(memlo,$FFFFFFFF)
15a3c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15a3c     00 26 06 F6 | 	mov	local01, #0
15a40     20 00 00 FF 
15a44     10 E4 85 F1 | 	sub	objptr, ##16400
15a48     97 1E 48 FB | 	callpa	#(@LR__1821-@LR__1820)>>2,fcache_load_ptr_
15a4c                 | LR__1820
15a4c     13 17 02 F6 | 	mov	arg03, local01
15a50     04 16 66 F0 | 	shl	arg03, #4
15a54     F2 16 02 F1 | 	add	arg03, objptr
15a58     93 01 00 FF 
15a5c     93 14 06 F6 | 	mov	arg02, ##@LR__5647
15a60     0B 15 62 FC | 	wrlong	arg02, arg03
15a64     13 29 02 F6 | 	mov	local02, local01
15a68     04 28 66 F0 | 	shl	local02, #4
15a6c     F2 28 02 F1 | 	add	local02, objptr
15a70     0C 28 06 F1 | 	add	local02, #12
15a74     14 01 68 FC | 	wrlong	#0, local02
15a78     01 26 06 F1 | 	add	local01, #1
15a7c     02 00 00 FF 
15a80     01 26 56 F2 | 	cmps	local01, ##1025 wc
15a84     C4 FF 9F CD |  if_b	jmp	#LR__1820
15a88                 | LR__1821
15a88     35 00 00 FF 
15a8c     90 E4 05 F1 | 	add	objptr, ##27280
15a90     00 04 80 FF 
15a94     F2 00 68 FC | 	wrlong	##524288, objptr
15a98     06 00 00 FF 
15a9c     30 E4 05 F1 | 	add	objptr, ##3120
15aa0     00 04 80 FF 
15aa4     F2 00 68 FC | 	wrlong	##524288, objptr
15aa8     04 E4 05 F1 | 	add	objptr, #4
15aac     00 04 80 FF 
15ab0     F2 00 68 FC | 	wrlong	##524288, objptr
15ab4     0D 00 00 FF 
15ab8     64 E4 85 F1 | 	sub	objptr, ##6756
15abc     F2 00 68 FC | 	wrlong	#0, objptr
15ac0     07 00 00 FF 
15ac4     24 E4 05 F1 | 	add	objptr, ##3620
15ac8     F2 00 68 FC | 	wrlong	#0, objptr
15acc     07 00 00 FF 
15ad0     20 E4 85 F1 | 	sub	objptr, ##3616
15ad4     00 04 80 FF 
15ad8     F2 00 68 FC | 	wrlong	##524288, objptr
15adc     0D 00 00 FF 
15ae0     D0 E4 05 F1 | 	add	objptr, ##6864
15ae4     F2 00 68 FC | 	wrlong	#0, objptr
15ae8     93 01 00 FF 
15aec     94 2A 06 F6 | 	mov	local03, ##@LR__5648
15af0     01 00 00 FF 
15af4     E8 E5 05 F1 | 	add	objptr, ##1000
15af8     F2 2A 62 FC | 	wrlong	local03, objptr
15afc     08 00 00 FF 
15b00     88 E4 85 F1 | 	sub	objptr, ##4232
15b04     F2 00 68 FC | 	wrlong	#0, objptr
15b08     04 E4 05 F1 | 	add	objptr, #4
15b0c     FF FF FF FF 
15b10     F2 FE 6B FC | 	wrlong	##-1, objptr
15b14     06 00 00 FF 
15b18     A0 E4 05 F1 | 	add	objptr, ##3232
15b1c     F2 00 68 FC | 	wrlong	#0, objptr
15b20     04 E4 05 F1 | 	add	objptr, #4
15b24     F2 00 68 FC | 	wrlong	#0, objptr
15b28                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15b28                 | ' stackpointer=0
15b28                 | ' lineptr=0 
15b28                 | ' programptr=memlo ': stringptr=0
15b28                 | ' dataptr=0 : readline=""
15b28                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15b28                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15b28     00 26 06 F6 | 	mov	local01, #0
15b2c     06 00 00 FF 
15b30     9C E4 85 F1 | 	sub	objptr, ##3228
15b34     97 16 48 FB | 	callpa	#(@LR__1823-@LR__1822)>>2,fcache_load_ptr_
15b38                 | LR__1822
15b38     13 29 02 F6 | 	mov	local02, local01
15b3c     02 28 66 F0 | 	shl	local02, #2
15b40     13 29 02 F1 | 	add	local02, local01
15b44     02 28 66 F0 | 	shl	local02, #2
15b48     F2 28 02 F1 | 	add	local02, objptr
15b4c     08 28 06 F1 | 	add	local02, #8
15b50     FF FF FF FF 
15b54     14 FF 6B FC | 	wrlong	##-1, local02
15b58     01 26 06 F1 | 	add	local01, #1
15b5c     41 26 56 F2 | 	cmps	local01, #65 wc
15b60     D4 FF 9F CD |  if_b	jmp	#LR__1822
15b64                 | LR__1823
15b64     4A 00 00 FF 
15b68     B8 E4 85 F1 | 	sub	objptr, ##38072
15b6c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15b6c     00 26 06 F6 | 	mov	local01, #0
15b70                 | LR__1824
15b70     13 17 02 F6 | 	mov	arg03, local01
15b74     02 16 66 F0 | 	shl	arg03, #2
15b78     F2 28 02 F6 | 	mov	local02, objptr
15b7c     52 00 00 FF 
15b80     AC 28 06 F1 | 	add	local02, ##42156
15b84     14 17 02 F1 | 	add	arg03, local02
15b88     0B 2B 0A FB | 	rdlong	local03, arg03 wz
15b8c     30 00 90 AD |  if_e	jmp	#LR__1825
15b90     13 13 02 F6 | 	mov	arg01, local01
15b94     00 14 06 F6 | 	mov	arg02, #0
15b98     00 16 06 F6 | 	mov	arg03, #0
15b9c     B4 D6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15ba0     13 29 02 F6 | 	mov	local02, local01
15ba4     02 28 66 F0 | 	shl	local02, #2
15ba8     F2 2A 02 F6 | 	mov	local03, objptr
15bac     52 00 00 FF 
15bb0     AC 2A 06 F1 | 	add	local03, ##42156
15bb4     15 29 02 F1 | 	add	local02, local03
15bb8     14 13 02 FB | 	rdlong	arg01, local02
15bbc     E0 26 B1 FD | 	call	#__system___gc_free
15bc0                 | LR__1825
15bc0     01 26 06 F1 | 	add	local01, #1
15bc4     10 26 56 F2 | 	cmps	local01, #16 wc
15bc8     A4 FF 9F CD |  if_b	jmp	#LR__1824
15bcc     52 00 00 FF 
15bd0     00 E5 05 F1 | 	add	objptr, ##42240
15bd4     00 C0 9F FF 
15bd8     F2 00 68 FC | 	wrlong	##1065353216, objptr
15bdc     04 E4 05 F1 | 	add	objptr, #4
15be0     00 C0 9F FF 
15be4     F2 00 68 FC | 	wrlong	##1065353216, objptr
15be8     52 00 00 FF 
15bec     00 E5 85 F1 | 	sub	objptr, ##42240
15bf0     F2 2A 02 FB | 	rdlong	local03, objptr
15bf4     52 00 00 FF 
15bf8     EC E4 05 F1 | 	add	objptr, ##42220
15bfc     F2 2A 62 FC | 	wrlong	local03, objptr
15c00     52 00 00 FF 
15c04     F0 E4 85 F1 | 	sub	objptr, ##42224
15c08     11 12 06 F6 | 	mov	arg01, #17
15c0c     08 14 06 F6 | 	mov	arg02, #8
15c10     10 16 06 F6 | 	mov	arg03, #16
15c14     3C D6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c18     10 12 06 F6 | 	mov	arg01, #16
15c1c     20 14 06 F6 | 	mov	arg02, #32
15c20     20 16 06 F6 | 	mov	arg03, #32
15c24     2C D6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c28     93 01 00 FF 
15c2c     95 2A 06 F6 | 	mov	local03, ##@LR__5649
15c30     52 00 00 FF 
15c34     1C E5 05 F1 | 	add	objptr, ##42268
15c38     F2 2A 62 FC | 	wrlong	local03, objptr
15c3c     52 00 00 FF 
15c40     1C E5 85 F1 | 	sub	objptr, ##42268
15c44     44 97 B0 FD | 	call	#_init_audio
15c48     A7 F0 03 F6 | 	mov	ptra, fp
15c4c     B2 00 A0 FD | 	call	#popregs_
15c50                 | _do_new_ret
15c50     2D 00 64 FD | 	ret
15c54                 | 
15c54                 | ' 
15c54                 | ' '-------------------- next
15c54                 | ' 
15c54                 | ' sub do_next()
15c54                 | _do_next
15c54     05 4A 05 F6 | 	mov	COUNT_, #5
15c58     A8 00 A0 FD | 	call	#pushregs_
15c5c     E0 78 BF FD | 	call	#_pop
15c60     FD 26 02 F6 | 	mov	local01, result1
15c64     FE 28 02 F6 | 	mov	local02, result2
15c68     FF 2A 02 F6 | 	mov	local03, result3
15c6c                 | ' t1=pop() :varnum=t1.result.uresult
15c6c                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15c6c     50 00 00 FF 
15c70     50 E5 05 F1 | 	add	objptr, ##41296
15c74     F2 14 02 FB | 	rdlong	arg02, objptr
15c78     0A 13 02 F6 | 	mov	arg01, arg02
15c7c     02 12 66 F0 | 	shl	arg01, #2
15c80     0A 13 02 F1 | 	add	arg01, arg02
15c84     02 12 66 F0 | 	shl	arg01, #2
15c88     06 00 00 FF 
15c8c     98 E4 85 F1 | 	sub	objptr, ##3224
15c90     F2 12 02 F1 | 	add	arg01, objptr
15c94     08 12 06 F1 | 	add	arg01, #8
15c98     09 15 02 FB | 	rdlong	arg02, arg01
15c9c     13 15 0A F2 | 	cmp	arg02, local01 wz
15ca0     4A 00 00 FF 
15ca4     B8 E4 85 F1 | 	sub	objptr, ##38072
15ca8     10 00 90 AD |  if_e	jmp	#LR__1830
15cac     25 12 06 F6 | 	mov	arg01, #37
15cb0     00 14 06 F6 | 	mov	arg02, #0
15cb4     68 9F B0 FD | 	call	#_printerror
15cb8     48 03 90 FD | 	jmp	#LR__1836
15cbc                 | LR__1830
15cbc                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15cbc     13 15 02 F6 | 	mov	arg02, local01
15cc0     04 14 66 F0 | 	shl	arg02, #4
15cc4     F2 12 02 F6 | 	mov	arg01, objptr
15cc8     15 00 00 FF 
15ccc     18 12 06 F1 | 	add	arg01, ##10776
15cd0     09 15 02 F1 | 	add	arg02, arg01
15cd4     0C 14 06 F1 | 	add	arg02, #12
15cd8     0A 15 02 FB | 	rdlong	arg02, arg02
15cdc     1E 14 0E F2 | 	cmp	arg02, #30 wz
15ce0     54 00 90 5D |  if_ne	jmp	#LR__1831
15ce4     13 15 02 F6 | 	mov	arg02, local01
15ce8     04 14 66 F0 | 	shl	arg02, #4
15cec     15 00 00 FF 
15cf0     18 E4 05 F1 | 	add	objptr, ##10776
15cf4     F2 14 02 F1 | 	add	arg02, objptr
15cf8     0C 14 06 F1 | 	add	arg02, #12
15cfc     0A 39 68 FC | 	wrlong	#28, arg02
15d00     13 2D 02 F6 | 	mov	local04, local01
15d04     04 2C 66 F0 | 	shl	local04, #4
15d08     F2 2C 02 F1 | 	add	local04, objptr
15d0c     13 15 02 F6 | 	mov	arg02, local01
15d10     04 14 66 F0 | 	shl	arg02, #4
15d14     F2 14 02 F1 | 	add	arg02, objptr
15d18     04 14 06 F1 | 	add	arg02, #4
15d1c     0A 13 02 FB | 	rdlong	arg01, arg02
15d20     15 00 00 FF 
15d24     18 E4 85 F1 | 	sub	objptr, ##10776
15d28     01 14 06 F6 | 	mov	arg02, #1
15d2c     D0 16 B1 FD | 	call	#__system___float_tointeger
15d30     04 2C 06 F1 | 	add	local04, #4
15d34     16 FB 61 FC | 	wrlong	result1, local04
15d38                 | LR__1831
15d38     13 2D 02 F6 | 	mov	local04, local01
15d3c     04 2C 66 F0 | 	shl	local04, #4
15d40     15 00 00 FF 
15d44     18 E4 05 F1 | 	add	objptr, ##10776
15d48     F2 2C 02 F1 | 	add	local04, objptr
15d4c     13 15 02 F6 | 	mov	arg02, local01
15d50     04 14 66 F0 | 	shl	arg02, #4
15d54     F2 14 02 F1 | 	add	arg02, objptr
15d58     3B 00 00 FF 
15d5c     38 E5 05 F1 | 	add	objptr, ##30520
15d60     F2 12 02 FB | 	rdlong	arg01, objptr
15d64     09 FF 01 F6 | 	mov	result3, arg01
15d68     02 FE 65 F0 | 	shl	result3, #2
15d6c     09 FF 01 F1 | 	add	result3, arg01
15d70     02 FE 65 F0 | 	shl	result3, #2
15d74     06 00 00 FF 
15d78     98 E4 85 F1 | 	sub	objptr, ##3224
15d7c     F2 FE 01 F1 | 	add	result3, objptr
15d80     04 14 06 F1 | 	add	arg02, #4
15d84     0A 13 02 FB | 	rdlong	arg01, arg02
15d88     0C FE 05 F1 | 	add	result3, #12
15d8c     FF FE 01 FB | 	rdlong	result3, result3
15d90     FF 12 02 F1 | 	add	arg01, result3
15d94     04 2C 06 F1 | 	add	local04, #4
15d98     16 13 62 FC | 	wrlong	arg01, local04
15d9c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15d9c                 | ' if fortable(fortop).stepval>=0 then
15d9c     06 00 00 FF 
15da0     98 E4 05 F1 | 	add	objptr, ##3224
15da4     F2 2C 02 FB | 	rdlong	local04, objptr
15da8     16 13 02 F6 | 	mov	arg01, local04
15dac     02 12 66 F0 | 	shl	arg01, #2
15db0     16 13 02 F1 | 	add	arg01, local04
15db4     02 12 66 F0 | 	shl	arg01, #2
15db8     06 00 00 FF 
15dbc     98 E4 85 F1 | 	sub	objptr, ##3224
15dc0     F2 12 02 F1 | 	add	arg01, objptr
15dc4     0C 12 06 F1 | 	add	arg01, #12
15dc8     09 13 02 FB | 	rdlong	arg01, arg01
15dcc     00 12 56 F2 | 	cmps	arg01, #0 wc
15dd0     4A 00 00 FF 
15dd4     B8 E4 85 F1 | 	sub	objptr, ##38072
15dd8     78 00 90 CD |  if_b	jmp	#LR__1832
15ddc                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15ddc     04 26 66 F0 | 	shl	local01, #4
15de0     15 00 00 FF 
15de4     18 E4 05 F1 | 	add	objptr, ##10776
15de8     F2 26 02 F1 | 	add	local01, objptr
15dec     3B 00 00 FF 
15df0     38 E5 05 F1 | 	add	objptr, ##30520
15df4     F2 12 02 FB | 	rdlong	arg01, objptr
15df8     09 2D 02 F6 | 	mov	local04, arg01
15dfc     02 2C 66 F0 | 	shl	local04, #2
15e00     09 2D 02 F1 | 	add	local04, arg01
15e04     02 2C 66 F0 | 	shl	local04, #2
15e08     06 00 00 FF 
15e0c     98 E4 85 F1 | 	sub	objptr, ##3224
15e10     F2 2C 02 F1 | 	add	local04, objptr
15e14     04 26 06 F1 | 	add	local01, #4
15e18     13 27 02 FB | 	rdlong	local01, local01
15e1c     10 2C 06 F1 | 	add	local04, #16
15e20     16 2D 02 FB | 	rdlong	local04, local04
15e24     16 27 5A F2 | 	cmps	local01, local04 wcz
15e28     4A 00 00 FF 
15e2c     B8 E4 85 F1 | 	sub	objptr, ##38072
15e30     50 00 00 1F 
15e34     50 E5 05 11 |  if_a	add	objptr, ##41296
15e38     F2 2E 02 1B |  if_a	rdlong	local05, objptr
15e3c     01 2E 86 11 |  if_a	sub	local05, #1
15e40     F2 2E 62 1C |  if_a	wrlong	local05, objptr
15e44     50 00 00 1F 
15e48     50 E5 85 11 |  if_a	sub	objptr, ##41296
15e4c     B4 01 90 1D |  if_a	jmp	#LR__1836
15e50     74 00 90 FD | 	jmp	#LR__1833
15e54                 | LR__1832
15e54                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
15e54     04 26 66 F0 | 	shl	local01, #4
15e58     15 00 00 FF 
15e5c     18 E4 05 F1 | 	add	objptr, ##10776
15e60     F2 26 02 F1 | 	add	local01, objptr
15e64     3B 00 00 FF 
15e68     38 E5 05 F1 | 	add	objptr, ##30520
15e6c     F2 12 02 FB | 	rdlong	arg01, objptr
15e70     09 2D 02 F6 | 	mov	local04, arg01
15e74     02 2C 66 F0 | 	shl	local04, #2
15e78     09 2D 02 F1 | 	add	local04, arg01
15e7c     02 2C 66 F0 | 	shl	local04, #2
15e80     06 00 00 FF 
15e84     98 E4 85 F1 | 	sub	objptr, ##3224
15e88     F2 2C 02 F1 | 	add	local04, objptr
15e8c     04 26 06 F1 | 	add	local01, #4
15e90     13 27 02 FB | 	rdlong	local01, local01
15e94     10 2C 06 F1 | 	add	local04, #16
15e98     16 2D 02 FB | 	rdlong	local04, local04
15e9c     16 27 52 F2 | 	cmps	local01, local04 wc
15ea0     4A 00 00 FF 
15ea4     B8 E4 85 F1 | 	sub	objptr, ##38072
15ea8     50 00 00 CF 
15eac     50 E5 05 C1 |  if_b	add	objptr, ##41296
15eb0     F2 2E 02 CB |  if_b	rdlong	local05, objptr
15eb4     01 2E 86 C1 |  if_b	sub	local05, #1
15eb8     F2 2E 62 CC |  if_b	wrlong	local05, objptr
15ebc     50 00 00 CF 
15ec0     50 E5 85 C1 |  if_b	sub	objptr, ##41296
15ec4     3C 01 90 CD |  if_b	jmp	#LR__1836
15ec8                 | LR__1833
15ec8                 | ' ' if not returned, goto pointer 
15ec8                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15ec8     50 00 00 FF 
15ecc     0C E5 05 F1 | 	add	objptr, ##41228
15ed0     F2 2E 02 FB | 	rdlong	local05, objptr
15ed4     50 00 00 FF 
15ed8     0C E5 85 F1 | 	sub	objptr, ##41228
15edc     01 2E 16 F2 | 	cmp	local05, #1 wc
15ee0     DC 00 90 CD |  if_b	jmp	#LR__1834
15ee4     50 00 00 FF 
15ee8     50 E5 05 F1 | 	add	objptr, ##41296
15eec     F2 2C 02 FB | 	rdlong	local04, objptr
15ef0     16 2F 02 F6 | 	mov	local05, local04
15ef4     02 2E 66 F0 | 	shl	local05, #2
15ef8     16 2F 02 F1 | 	add	local05, local04
15efc     02 2E 66 F0 | 	shl	local05, #2
15f00     06 00 00 FF 
15f04     98 E4 85 F1 | 	sub	objptr, ##3224
15f08     F2 2E 02 F1 | 	add	local05, objptr
15f0c     06 00 00 FF 
15f10     20 E4 05 F1 | 	add	objptr, ##3104
15f14     F2 2C 02 FB | 	rdlong	local04, objptr
15f18     50 00 00 FF 
15f1c     D8 E4 85 F1 | 	sub	objptr, ##41176
15f20     17 2F 02 FB | 	rdlong	local05, local05
15f24     17 2D 0A F2 | 	cmp	local04, local05 wz
15f28     94 00 90 AD |  if_e	jmp	#LR__1834
15f2c     50 00 00 FF 
15f30     50 E5 05 F1 | 	add	objptr, ##41296
15f34     F2 2C 02 FB | 	rdlong	local04, objptr
15f38     16 2F 02 F6 | 	mov	local05, local04
15f3c     02 2E 66 F0 | 	shl	local05, #2
15f40     16 2F 02 F1 | 	add	local05, local04
15f44     02 2E 66 F0 | 	shl	local05, #2
15f48     06 00 00 FF 
15f4c     98 E4 85 F1 | 	sub	objptr, ##3224
15f50     F2 2E 02 F1 | 	add	local05, objptr
15f54     17 2F 02 FB | 	rdlong	local05, local05
15f58     06 00 00 FF 
15f5c     20 E4 05 F1 | 	add	objptr, ##3104
15f60     F2 2E 62 FC | 	wrlong	local05, objptr
15f64     78 E4 05 F1 | 	add	objptr, #120
15f68     F2 2C 02 FB | 	rdlong	local04, objptr
15f6c     16 2F 02 F6 | 	mov	local05, local04
15f70     02 2E 66 F0 | 	shl	local05, #2
15f74     16 2F 02 F1 | 	add	local05, local04
15f78     02 2E 66 F0 | 	shl	local05, #2
15f7c     06 00 00 FF 
15f80     98 E4 85 F1 | 	sub	objptr, ##3224
15f84     F2 2E 02 F1 | 	add	local05, objptr
15f88     04 2E 06 F1 | 	add	local05, #4
15f8c     17 2F 02 FB | 	rdlong	local05, local05
15f90     06 00 00 FF 
15f94     24 E4 05 F1 | 	add	objptr, ##3108
15f98     F2 2E 62 FC | 	wrlong	local05, objptr
15f9c     06 00 00 FF 
15fa0     40 E4 85 F1 | 	sub	objptr, ##3136
15fa4     F2 2E 02 FB | 	rdlong	local05, objptr
15fa8     01 2E 86 F1 | 	sub	local05, #1
15fac     04 E4 05 F1 | 	add	objptr, #4
15fb0     F2 2E 62 FC | 	wrlong	local05, objptr
15fb4     4A 00 00 FF 
15fb8     A0 E4 85 F1 | 	sub	objptr, ##38048
15fbc     44 00 90 FD | 	jmp	#LR__1835
15fc0                 | LR__1834
15fc0     50 00 00 FF 
15fc4     50 E5 05 F1 | 	add	objptr, ##41296
15fc8     F2 2E 02 FB | 	rdlong	local05, objptr
15fcc     17 2D 02 F6 | 	mov	local04, local05
15fd0     02 2C 66 F0 | 	shl	local04, #2
15fd4     17 2D 02 F1 | 	add	local04, local05
15fd8     02 2C 66 F0 | 	shl	local04, #2
15fdc     06 00 00 FF 
15fe0     98 E4 85 F1 | 	sub	objptr, ##3224
15fe4     F2 2C 02 F1 | 	add	local04, objptr
15fe8     04 2C 06 F1 | 	add	local04, #4
15fec     16 2F 02 FB | 	rdlong	local05, local04
15ff0     01 2E 86 F1 | 	sub	local05, #1
15ff4     18 E4 85 F1 | 	sub	objptr, #24
15ff8     F2 2E 62 FC | 	wrlong	local05, objptr
15ffc     4A 00 00 FF 
16000     A0 E4 85 F1 | 	sub	objptr, ##38048
16004                 | LR__1835
16004                 | LR__1836
16004     A7 F0 03 F6 | 	mov	ptra, fp
16008     B2 00 A0 FD | 	call	#popregs_
1600c                 | _do_next_ret
1600c     2D 00 64 FD | 	ret
16010                 | 
16010                 | ' 
16010                 | ' '-------------------- no command (print "Unknown command")
16010                 | ' 
16010                 | ' sub do_no_command
16010                 | _do_no_command
16010     50 00 00 FF 
16014     10 E5 05 F1 | 	add	objptr, ##41232
16018     F2 14 02 FB | 	rdlong	arg02, objptr
1601c     50 00 00 FF 
16020     10 E5 85 F1 | 	sub	objptr, ##41232
16024     17 12 06 F6 | 	mov	arg01, #23
16028     F4 9B B0 FD | 	call	#_printerror
1602c                 | _do_no_command_ret
1602c     2D 00 64 FD | 	ret
16030                 | 
16030                 | ' 
16030                 | ' '-------------------- nothing
16030                 | ' 
16030                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16030                 | _do_nothing
16030                 | _do_nothing_ret
16030     2D 00 64 FD | 	ret
16034                 | 
16034                 | ' 
16034                 | ' '-------------------- on
16034                 | ' 
16034                 | ' sub do_on
16034                 | _do_on
16034     04 4A 05 F6 | 	mov	COUNT_, #4
16038     A8 00 A0 FD | 	call	#pushregs_
1603c     18 F0 07 F1 | 	add	ptra, #24
16040     4A 00 00 FF 
16044     A0 E4 05 F1 | 	add	objptr, ##38048
16048     F2 12 02 FB | 	rdlong	arg01, objptr
1604c     09 FD 01 F6 | 	mov	result2, arg01
16050     01 FC 65 F0 | 	shl	result2, #1
16054     09 FD 01 F1 | 	add	result2, arg01
16058     02 FC 65 F0 | 	shl	result2, #2
1605c     03 00 00 FF 
16060     04 E4 85 F1 | 	sub	objptr, ##1540
16064     F2 FC 01 F1 | 	add	result2, objptr
16068     FE 26 02 FB | 	rdlong	local01, result2
1606c     09 29 02 F6 | 	mov	local02, arg01
16070     01 28 66 F0 | 	shl	local02, #1
16074     09 29 02 F1 | 	add	local02, arg01
16078     02 28 66 F0 | 	shl	local02, #2
1607c     F2 28 02 F1 | 	add	local02, objptr
16080     04 28 06 F1 | 	add	local02, #4
16084     14 2B 02 FB | 	rdlong	local03, local02
16088     47 00 00 FF 
1608c     9C E4 85 F1 | 	sub	objptr, ##36508
16090     AC 74 BF FD | 	call	#_pop
16094     A7 FA 61 FC | 	wrlong	result1, fp
16098     04 4E 05 F1 | 	add	fp, #4
1609c     A7 FC 61 FC | 	wrlong	result2, fp
160a0     04 4E 05 F1 | 	add	fp, #4
160a4     A7 FE 61 FC | 	wrlong	result3, fp
160a8     08 4E 85 F1 | 	sub	fp, #8
160ac     A7 12 02 F6 | 	mov	arg01, fp
160b0     68 76 BF FD | 	call	#_converttoint
160b4                 | ' 
160b4                 | ' numpar=compiledline(lineptr_e).result.uresult
160b4                 | ' skip=compiledline(lineptr_e).result.twowords(1)
160b4                 | ' t1=pop()
160b4                 | ' t=converttoint(t1)
160b4                 | ' if t<1 orelse t>numpar then return
160b4     01 FA 55 F2 | 	cmps	result1, #1 wc
160b8     2C 00 90 CD |  if_b	jmp	#LR__1840
160bc     13 FB 59 F2 | 	cmps	result1, local01 wcz
160c0     01 FA 85 E1 |  if_be	sub	result1, #1
160c4     FD 2A 02 ED |  if_be	qmul	local03, result1
160c8     4A 00 00 EF 
160cc     A0 E4 05 E1 |  if_be	add	objptr, ##38048
160d0     F2 2C 02 EB |  if_be	rdlong	local04, objptr
160d4     18 28 62 ED |  if_be	getqx	local02
160d8     14 2D 02 E1 |  if_be	add	local04, local02
160dc     F2 2C 62 EC |  if_be	wrlong	local04, objptr
160e0     4A 00 00 EF 
160e4     A0 E4 85 E1 |  if_be	sub	objptr, ##38048
160e8                 | LR__1840
160e8     A7 F0 03 F6 | 	mov	ptra, fp
160ec     B2 00 A0 FD | 	call	#popregs_
160f0                 | _do_on_ret
160f0     2D 00 64 FD | 	ret
160f4                 | 
160f4                 | ' 
160f4                 | ' '-------------------- open
160f4                 | ' 
160f4                 | ' sub do_open
160f4                 | _do_open
160f4     04 4A 05 F6 | 	mov	COUNT_, #4
160f8     A8 00 A0 FD | 	call	#pushregs_
160fc     20 F0 07 F1 | 	add	ptra, #32
16100     3C 74 BF FD | 	call	#_pop
16104     FF 16 02 F6 | 	mov	arg03, result3
16108     A7 FA 61 FC | 	wrlong	result1, fp
1610c     04 4E 05 F1 | 	add	fp, #4
16110     A7 FC 61 FC | 	wrlong	result2, fp
16114     04 4E 05 F1 | 	add	fp, #4
16118     A7 16 62 FC | 	wrlong	arg03, fp
1611c                 | ' 
1611c                 | ' numpar=compiledline(lineptr_e).result.uresult
1611c                 | ' 
1611c                 | ' t1=pop()
1611c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1611c     08 4E 85 F1 | 	sub	fp, #8
16120     2B 16 0E F2 | 	cmp	arg03, #43 wz
16124     18 00 90 5D |  if_ne	jmp	#LR__1850
16128     A7 12 02 FB | 	rdlong	arg01, fp
1612c     80 75 BF FD | 	call	#_convertstring
16130     A7 FA 61 FC | 	wrlong	result1, fp
16134     08 4E 05 F1 | 	add	fp, #8
16138     A7 3E 68 FC | 	wrlong	#31, fp
1613c     08 4E 85 F1 | 	sub	fp, #8
16140                 | LR__1850
16140                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
16140     08 4E 05 F1 | 	add	fp, #8
16144     A7 16 02 FB | 	rdlong	arg03, fp
16148     08 4E 85 F1 | 	sub	fp, #8
1614c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16150     44 00 90 AD |  if_e	jmp	#LR__1851
16154     00 12 06 F6 | 	mov	arg01, #0
16158     38 3A B1 FD | 	call	#__system___getiolock_0622
1615c     FD 12 02 F6 | 	mov	arg01, result1
16160     44 EF B0 FD | 	call	#__system___lockmem
16164     93 01 00 FF 
16168     A0 14 06 F6 | 	mov	arg02, ##@LR__5650
1616c     00 12 06 F6 | 	mov	arg01, #0
16170     00 16 06 F6 | 	mov	arg03, #0
16174     50 F7 B0 FD | 	call	#__system___basic_print_string
16178     00 12 06 F6 | 	mov	arg01, #0
1617c     0A 14 06 F6 | 	mov	arg02, #10
16180     00 16 06 F6 | 	mov	arg03, #0
16184     E8 F6 B0 FD | 	call	#__system___basic_print_char
16188     00 12 06 F6 | 	mov	arg01, #0
1618c     04 3A B1 FD | 	call	#__system___getiolock_0622
16190     FD 00 68 FC | 	wrlong	#0, result1
16194     C4 01 90 FD | 	jmp	#LR__1862
16198                 | LR__1851
16198     A7 26 02 FB | 	rdlong	local01, fp
1619c     A0 73 BF FD | 	call	#_pop
161a0     FF 16 02 F6 | 	mov	arg03, result3
161a4     A7 FA 61 FC | 	wrlong	result1, fp
161a8     04 4E 05 F1 | 	add	fp, #4
161ac     A7 FC 61 FC | 	wrlong	result2, fp
161b0     04 4E 05 F1 | 	add	fp, #4
161b4     A7 16 62 FC | 	wrlong	arg03, fp
161b8                 | ' filename=t1.result.sresult
161b8                 | ' t1=pop()
161b8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
161b8     08 4E 85 F1 | 	sub	fp, #8
161bc     2B 16 0E F2 | 	cmp	arg03, #43 wz
161c0     18 00 90 5D |  if_ne	jmp	#LR__1852
161c4     A7 12 02 FB | 	rdlong	arg01, fp
161c8     E4 74 BF FD | 	call	#_convertstring
161cc     A7 FA 61 FC | 	wrlong	result1, fp
161d0     08 4E 05 F1 | 	add	fp, #8
161d4     A7 3E 68 FC | 	wrlong	#31, fp
161d8     08 4E 85 F1 | 	sub	fp, #8
161dc                 | LR__1852
161dc     00 28 06 F6 | 	mov	local02, #0
161e0                 | ' mode=0
161e0                 | ' if t1.result_type=result_string then
161e0     08 4E 05 F1 | 	add	fp, #8
161e4     A7 14 02 FB | 	rdlong	arg02, fp
161e8     08 4E 85 F1 | 	sub	fp, #8
161ec     1F 14 0E F2 | 	cmp	arg02, #31 wz
161f0     4C 00 90 5D |  if_ne	jmp	#LR__1853
161f4                 | '   if t1.result.sresult="read" then mode=1
161f4     A7 12 02 FB | 	rdlong	arg01, fp
161f8     93 01 00 FF 
161fc     B2 14 06 F6 | 	mov	arg02, ##@LR__5651
16200     CC EE B0 FD | 	call	#__system___string_cmp
16204     00 FA 0D F2 | 	cmp	result1, #0 wz
16208     01 28 06 A6 |  if_e	mov	local02, #1
1620c                 | '   if t1.result.sresult="write" then mode=2
1620c     A7 12 02 FB | 	rdlong	arg01, fp
16210     93 01 00 FF 
16214     B7 14 06 F6 | 	mov	arg02, ##@LR__5652
16218     B4 EE B0 FD | 	call	#__system___string_cmp
1621c     00 FA 0D F2 | 	cmp	result1, #0 wz
16220     02 28 06 A6 |  if_e	mov	local02, #2
16224                 | '   if t1.result.sresult="append" then mode=4
16224     A7 12 02 FB | 	rdlong	arg01, fp
16228     93 01 00 FF 
1622c     BD 14 06 F6 | 	mov	arg02, ##@LR__5653
16230     9C EE B0 FD | 	call	#__system___string_cmp
16234     00 FA 0D F2 | 	cmp	result1, #0 wz
16238     04 28 06 A6 |  if_e	mov	local02, #4
1623c     0C 00 90 FD | 	jmp	#LR__1854
16240                 | LR__1853
16240     A7 12 02 F6 | 	mov	arg01, fp
16244     D4 74 BF FD | 	call	#_converttoint
16248     FD 28 02 F6 | 	mov	local02, result1
1624c                 | LR__1854
1624c     F0 72 BF FD | 	call	#_pop
16250     FF 16 02 F6 | 	mov	arg03, result3
16254     A7 FA 61 FC | 	wrlong	result1, fp
16258     04 4E 05 F1 | 	add	fp, #4
1625c     A7 FC 61 FC | 	wrlong	result2, fp
16260     04 4E 05 F1 | 	add	fp, #4
16264     A7 16 62 FC | 	wrlong	arg03, fp
16268                 | ' t1=pop()
16268                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16268     08 4E 85 F1 | 	sub	fp, #8
1626c     2C 16 0E F2 | 	cmp	arg03, #44 wz
16270     44 00 90 AD |  if_e	jmp	#LR__1855
16274     00 12 06 F6 | 	mov	arg01, #0
16278     18 39 B1 FD | 	call	#__system___getiolock_0622
1627c     FD 12 02 F6 | 	mov	arg01, result1
16280     24 EE B0 FD | 	call	#__system___lockmem
16284     93 01 00 FF 
16288     C4 14 06 F6 | 	mov	arg02, ##@LR__5654
1628c     00 12 06 F6 | 	mov	arg01, #0
16290     00 16 06 F6 | 	mov	arg03, #0
16294     30 F6 B0 FD | 	call	#__system___basic_print_string
16298     00 12 06 F6 | 	mov	arg01, #0
1629c     0A 14 06 F6 | 	mov	arg02, #10
162a0     00 16 06 F6 | 	mov	arg03, #0
162a4     C8 F5 B0 FD | 	call	#__system___basic_print_char
162a8     00 12 06 F6 | 	mov	arg01, #0
162ac     E4 38 B1 FD | 	call	#__system___getiolock_0622
162b0     FD 00 68 FC | 	wrlong	#0, result1
162b4     A4 00 90 FD | 	jmp	#LR__1862
162b8                 | LR__1855
162b8     A7 2A 02 FB | 	rdlong	local03, fp
162bc                 | ' channel  = t1.result.iresult
162bc                 | ' select case  mode
162bc     14 2D 02 F6 | 	mov	local04, local02
162c0     01 2C 86 F1 | 	sub	local04, #1
162c4     04 2C 26 F3 | 	fle	local04, #4
162c8     30 2C 62 FD | 	jmprel	local04
162cc                 | LR__1856
162cc     10 00 90 FD | 	jmp	#LR__1857
162d0     20 00 90 FD | 	jmp	#LR__1858
162d4     44 00 90 FD | 	jmp	#LR__1860
162d8     2C 00 90 FD | 	jmp	#LR__1859
162dc     3C 00 90 FD | 	jmp	#LR__1860
162e0                 | LR__1857
162e0     15 13 02 F6 | 	mov	arg01, local03
162e4     13 15 02 F6 | 	mov	arg02, local01
162e8     00 16 06 F6 | 	mov	arg03, #0
162ec     E8 F4 B0 FD | 	call	#__system___basic_open_string
162f0     68 00 90 FD | 	jmp	#LR__1861
162f4                 | LR__1858
162f4     15 13 02 F6 | 	mov	arg01, local03
162f8     13 15 02 F6 | 	mov	arg02, local01
162fc     0D 16 06 F6 | 	mov	arg03, #13
16300     D4 F4 B0 FD | 	call	#__system___basic_open_string
16304     54 00 90 FD | 	jmp	#LR__1861
16308                 | LR__1859
16308     15 13 02 F6 | 	mov	arg01, local03
1630c     13 15 02 F6 | 	mov	arg02, local01
16310     25 16 06 F6 | 	mov	arg03, #37
16314     C0 F4 B0 FD | 	call	#__system___basic_open_string
16318     40 00 90 FD | 	jmp	#LR__1861
1631c                 | LR__1860
1631c     00 12 06 F6 | 	mov	arg01, #0
16320     70 38 B1 FD | 	call	#__system___getiolock_0622
16324     FD 12 02 F6 | 	mov	arg01, result1
16328     7C ED B0 FD | 	call	#__system___lockmem
1632c     93 01 00 FF 
16330     D6 14 06 F6 | 	mov	arg02, ##@LR__5655
16334     00 12 06 F6 | 	mov	arg01, #0
16338     00 16 06 F6 | 	mov	arg03, #0
1633c     88 F5 B0 FD | 	call	#__system___basic_print_string
16340     00 12 06 F6 | 	mov	arg01, #0
16344     0A 14 06 F6 | 	mov	arg02, #10
16348     00 16 06 F6 | 	mov	arg03, #0
1634c     20 F5 B0 FD | 	call	#__system___basic_print_char
16350     00 12 06 F6 | 	mov	arg01, #0
16354     3C 38 B1 FD | 	call	#__system___getiolock_0622
16358     FD 00 68 FC | 	wrlong	#0, result1
1635c                 | LR__1861
1635c                 | LR__1862
1635c     A7 F0 03 F6 | 	mov	ptra, fp
16360     B2 00 A0 FD | 	call	#popregs_
16364                 | _do_open_ret
16364     2D 00 64 FD | 	ret
16368                 | 
16368                 | ' 
16368                 | ' ' ------------------ padrx
16368                 | ' 
16368                 | ' sub do_padrx
16368                 | _do_padrx
16368     04 4A 05 F6 | 	mov	COUNT_, #4
1636c     A8 00 A0 FD | 	call	#pushregs_
16370     14 F0 07 F1 | 	add	ptra, #20
16374     4A 00 00 FF 
16378     A0 E4 05 F1 | 	add	objptr, ##38048
1637c     F2 26 02 FB | 	rdlong	local01, objptr
16380     13 17 02 F6 | 	mov	arg03, local01
16384     01 16 66 F0 | 	shl	arg03, #1
16388     13 17 02 F1 | 	add	arg03, local01
1638c     02 16 66 F0 | 	shl	arg03, #2
16390     03 00 00 FF 
16394     04 E4 85 F1 | 	sub	objptr, ##1540
16398     F2 16 02 F1 | 	add	arg03, objptr
1639c     0B 29 02 FB | 	rdlong	local02, arg03
163a0                 | ' 
163a0                 | ' numpar=compiledline(lineptr_e).result.uresult
163a0                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
163a0     02 28 16 F2 | 	cmp	local02, #2 wc
163a4     47 00 00 FF 
163a8     9C E4 85 F1 | 	sub	objptr, ##36508
163ac     40 00 90 CD |  if_b	jmp	#LR__1870
163b0     00 12 06 F6 | 	mov	arg01, #0
163b4     DC 37 B1 FD | 	call	#__system___getiolock_0622
163b8     FD 12 02 F6 | 	mov	arg01, result1
163bc     E8 EC B0 FD | 	call	#__system___lockmem
163c0     93 01 00 FF 
163c4     E9 14 06 F6 | 	mov	arg02, ##@LR__5656
163c8     00 12 06 F6 | 	mov	arg01, #0
163cc     00 16 06 F6 | 	mov	arg03, #0
163d0     F4 F4 B0 FD | 	call	#__system___basic_print_string
163d4     00 12 06 F6 | 	mov	arg01, #0
163d8     B8 37 B1 FD | 	call	#__system___getiolock_0622
163dc     FD 00 68 FC | 	wrlong	#0, result1
163e0     27 12 06 F6 | 	mov	arg01, #39
163e4     00 14 06 F6 | 	mov	arg02, #0
163e8     34 98 B0 FD | 	call	#_printerror
163ec     A0 01 90 FD | 	jmp	#LR__1874
163f0                 | LR__1870
163f0                 | ' if numpar=0 then 
163f0     00 28 0E F2 | 	cmp	local02, #0 wz
163f4     8C 00 90 5D |  if_ne	jmp	#LR__1871
163f8     00 C0 1B FF 
163fc     00 28 06 F6 | 	mov	local02, ##931135488
16400     51 00 00 FF 
16404     E8 E5 05 F1 | 	add	objptr, ##41960
16408     F2 12 02 FB | 	rdlong	arg01, objptr
1640c     51 00 00 FF 
16410     E8 E5 85 F1 | 	sub	objptr, ##41960
16414     09 13 52 F6 | 	abs	arg01, arg01 wc
16418     1F 2A C6 C9 |  if_b	decod	local03, #31
1641c     00 2A 06 36 |  if_ae	mov	local03, #0
16420     50 07 B1 FD | 	call	#__system___float_fromuns
16424     15 FB 61 F5 | 	xor	result1, local03
16428     FD 12 02 F6 | 	mov	arg01, result1
1642c     FF 7F 23 FF 
16430     00 14 06 F6 | 	mov	arg02, ##1191181824
16434     30 0D B1 FD | 	call	#__system___float_div
16438     FD 14 02 F6 | 	mov	arg02, result1
1643c     14 13 02 F6 | 	mov	arg01, local02
16440     74 07 B1 FD | 	call	#__system___float_add
16444     FD 2C 02 F6 | 	mov	local04, result1
16448                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16448     16 13 02 F6 | 	mov	arg01, local04
1644c     1F 12 06 F4 | 	bitl	arg01, #31
16450     89 41 1D FF 
16454     6F 14 06 F6 | 	mov	arg02, ##981668463
16458     01 16 06 F6 | 	mov	arg03, #1
1645c     18 0F B1 FD | 	call	#__system___float_cmp
16460     00 FA 55 F2 | 	cmps	result1, #0 wc
16464     00 2C 06 C6 |  if_b	mov	local04, #0
16468     A7 2C 62 FC | 	wrlong	local04, fp
1646c     08 4E 05 F1 | 	add	fp, #8
16470     A7 3C 68 FC | 	wrlong	#30, fp
16474     08 4E 85 F1 | 	sub	fp, #8
16478     A7 12 02 F6 | 	mov	arg01, fp
1647c     50 71 BF FD | 	call	#_push
16480                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16480     0C 01 90 FD | 	jmp	#LR__1874
16484                 | LR__1871
16484     B8 70 BF FD | 	call	#_pop
16488     A7 FA 61 FC | 	wrlong	result1, fp
1648c     04 4E 05 F1 | 	add	fp, #4
16490     A7 FC 61 FC | 	wrlong	result2, fp
16494     04 4E 05 F1 | 	add	fp, #4
16498     A7 FE 61 FC | 	wrlong	result3, fp
1649c                 | ' t1=pop()
1649c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1649c     08 4E 85 F1 | 	sub	fp, #8
164a0     1C FE 0D F2 | 	cmp	result3, #28 wz
164a4     08 4E 05 51 |  if_ne	add	fp, #8
164a8     A7 26 02 5B |  if_ne	rdlong	local01, fp
164ac     08 4E 85 51 |  if_ne	sub	fp, #8
164b0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
164b4     CC 00 90 5D |  if_ne	jmp	#LR__1873
164b8     A7 2C 02 FB | 	rdlong	local04, fp
164bc     52 00 00 FF 
164c0     60 E5 05 F1 | 	add	objptr, ##42336
164c4     F2 2C 62 FC | 	wrlong	local04, objptr
164c8                 | '   q=t1.result.uresult
164c8                 | '   if q<7 then 
164c8     52 00 00 FF 
164cc     60 E5 85 F1 | 	sub	objptr, ##42336
164d0     07 2C 56 F2 | 	cmps	local04, #7 wc
164d4     9C 00 90 3D |  if_ae	jmp	#LR__1872
164d8     00 C0 1B FF 
164dc     00 2C 06 F6 | 	mov	local04, ##931135488
164e0     52 00 00 FF 
164e4     60 E5 05 F1 | 	add	objptr, ##42336
164e8     F2 28 02 FB | 	rdlong	local02, objptr
164ec     02 28 66 F0 | 	shl	local02, #2
164f0     78 E5 85 F1 | 	sub	objptr, #376
164f4     F2 28 02 F1 | 	add	local02, objptr
164f8     14 13 02 FB | 	rdlong	arg01, local02
164fc     51 00 00 FF 
16500     E8 E5 85 F1 | 	sub	objptr, ##41960
16504     09 13 52 F6 | 	abs	arg01, arg01 wc
16508     1F 2A C6 C9 |  if_b	decod	local03, #31
1650c     00 2A 06 36 |  if_ae	mov	local03, #0
16510     60 06 B1 FD | 	call	#__system___float_fromuns
16514     15 FB 61 F5 | 	xor	result1, local03
16518     FD 12 02 F6 | 	mov	arg01, result1
1651c     FF 7F 23 FF 
16520     00 14 06 F6 | 	mov	arg02, ##1191181824
16524     40 0C B1 FD | 	call	#__system___float_div
16528     FD 14 02 F6 | 	mov	arg02, result1
1652c     16 13 02 F6 | 	mov	arg01, local04
16530     84 06 B1 FD | 	call	#__system___float_add
16534     FD 2C 02 F6 | 	mov	local04, result1
16538                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16538     16 13 02 F6 | 	mov	arg01, local04
1653c     1F 12 06 F4 | 	bitl	arg01, #31
16540     89 41 1D FF 
16544     6F 14 06 F6 | 	mov	arg02, ##981668463
16548     01 16 06 F6 | 	mov	arg03, #1
1654c     28 0E B1 FD | 	call	#__system___float_cmp
16550     00 FA 55 F2 | 	cmps	result1, #0 wc
16554     00 2C 06 C6 |  if_b	mov	local04, #0
16558     A7 2C 62 FC | 	wrlong	local04, fp
1655c     08 4E 05 F1 | 	add	fp, #8
16560     A7 3C 68 FC | 	wrlong	#30, fp
16564     08 4E 85 F1 | 	sub	fp, #8
16568     A7 12 02 F6 | 	mov	arg01, fp
1656c     60 70 BF FD | 	call	#_push
16570                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16570     1C 00 90 FD | 	jmp	#LR__1874
16574                 | LR__1872
16574     29 12 06 F6 | 	mov	arg01, #41
16578     00 14 06 F6 | 	mov	arg02, #0
1657c     A0 96 B0 FD | 	call	#_printerror
16580                 | '      printerror(41) : return
16580     0C 00 90 FD | 	jmp	#LR__1874
16584                 | LR__1873
16584     29 12 06 F6 | 	mov	arg01, #41
16588     00 14 06 F6 | 	mov	arg02, #0
1658c     90 96 B0 FD | 	call	#_printerror
16590                 | LR__1874
16590     A7 F0 03 F6 | 	mov	ptra, fp
16594     B2 00 A0 FD | 	call	#popregs_
16598                 | _do_padrx_ret
16598     2D 00 64 FD | 	ret
1659c                 | 
1659c                 | ' 
1659c                 | ' ' ------------------ padry
1659c                 | ' 
1659c                 | ' sub do_padry
1659c                 | _do_padry
1659c     04 4A 05 F6 | 	mov	COUNT_, #4
165a0     A8 00 A0 FD | 	call	#pushregs_
165a4     14 F0 07 F1 | 	add	ptra, #20
165a8     4A 00 00 FF 
165ac     A0 E4 05 F1 | 	add	objptr, ##38048
165b0     F2 26 02 FB | 	rdlong	local01, objptr
165b4     13 17 02 F6 | 	mov	arg03, local01
165b8     01 16 66 F0 | 	shl	arg03, #1
165bc     13 17 02 F1 | 	add	arg03, local01
165c0     02 16 66 F0 | 	shl	arg03, #2
165c4     03 00 00 FF 
165c8     04 E4 85 F1 | 	sub	objptr, ##1540
165cc     F2 16 02 F1 | 	add	arg03, objptr
165d0     0B 29 02 FB | 	rdlong	local02, arg03
165d4                 | ' 
165d4                 | ' numpar=compiledline(lineptr_e).result.uresult
165d4                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
165d4     02 28 16 F2 | 	cmp	local02, #2 wc
165d8     47 00 00 FF 
165dc     9C E4 85 F1 | 	sub	objptr, ##36508
165e0     40 00 90 CD |  if_b	jmp	#LR__1880
165e4     00 12 06 F6 | 	mov	arg01, #0
165e8     A8 35 B1 FD | 	call	#__system___getiolock_0622
165ec     FD 12 02 F6 | 	mov	arg01, result1
165f0     B4 EA B0 FD | 	call	#__system___lockmem
165f4     93 01 00 FF 
165f8     F1 14 06 F6 | 	mov	arg02, ##@LR__5657
165fc     00 12 06 F6 | 	mov	arg01, #0
16600     00 16 06 F6 | 	mov	arg03, #0
16604     C0 F2 B0 FD | 	call	#__system___basic_print_string
16608     00 12 06 F6 | 	mov	arg01, #0
1660c     84 35 B1 FD | 	call	#__system___getiolock_0622
16610     FD 00 68 FC | 	wrlong	#0, result1
16614     27 12 06 F6 | 	mov	arg01, #39
16618     00 14 06 F6 | 	mov	arg02, #0
1661c     00 96 B0 FD | 	call	#_printerror
16620     A0 01 90 FD | 	jmp	#LR__1884
16624                 | LR__1880
16624                 | ' if numpar=0 then 
16624     00 28 0E F2 | 	cmp	local02, #0 wz
16628     8C 00 90 5D |  if_ne	jmp	#LR__1881
1662c     00 C0 1B FF 
16630     00 28 06 F6 | 	mov	local02, ##931135488
16634     52 00 00 FF 
16638     04 E4 05 F1 | 	add	objptr, ##41988
1663c     F2 12 02 FB | 	rdlong	arg01, objptr
16640     52 00 00 FF 
16644     04 E4 85 F1 | 	sub	objptr, ##41988
16648     09 13 52 F6 | 	abs	arg01, arg01 wc
1664c     1F 2A C6 C9 |  if_b	decod	local03, #31
16650     00 2A 06 36 |  if_ae	mov	local03, #0
16654     1C 05 B1 FD | 	call	#__system___float_fromuns
16658     15 FB 61 F5 | 	xor	result1, local03
1665c     FD 12 02 F6 | 	mov	arg01, result1
16660     FF 7F 23 FF 
16664     00 14 06 F6 | 	mov	arg02, ##1191181824
16668     FC 0A B1 FD | 	call	#__system___float_div
1666c     FD 14 02 F6 | 	mov	arg02, result1
16670     14 13 02 F6 | 	mov	arg01, local02
16674     40 05 B1 FD | 	call	#__system___float_add
16678     FD 2C 02 F6 | 	mov	local04, result1
1667c                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1667c     16 13 02 F6 | 	mov	arg01, local04
16680     1F 12 06 F4 | 	bitl	arg01, #31
16684     89 41 1D FF 
16688     6F 14 06 F6 | 	mov	arg02, ##981668463
1668c     01 16 06 F6 | 	mov	arg03, #1
16690     E4 0C B1 FD | 	call	#__system___float_cmp
16694     00 FA 55 F2 | 	cmps	result1, #0 wc
16698     00 2C 06 C6 |  if_b	mov	local04, #0
1669c     A7 2C 62 FC | 	wrlong	local04, fp
166a0     08 4E 05 F1 | 	add	fp, #8
166a4     A7 3C 68 FC | 	wrlong	#30, fp
166a8     08 4E 85 F1 | 	sub	fp, #8
166ac     A7 12 02 F6 | 	mov	arg01, fp
166b0     1C 6F BF FD | 	call	#_push
166b4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
166b4     0C 01 90 FD | 	jmp	#LR__1884
166b8                 | LR__1881
166b8     84 6E BF FD | 	call	#_pop
166bc     A7 FA 61 FC | 	wrlong	result1, fp
166c0     04 4E 05 F1 | 	add	fp, #4
166c4     A7 FC 61 FC | 	wrlong	result2, fp
166c8     04 4E 05 F1 | 	add	fp, #4
166cc     A7 FE 61 FC | 	wrlong	result3, fp
166d0                 | ' t1=pop()
166d0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
166d0     08 4E 85 F1 | 	sub	fp, #8
166d4     1C FE 0D F2 | 	cmp	result3, #28 wz
166d8     08 4E 05 51 |  if_ne	add	fp, #8
166dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
166e0     08 4E 85 51 |  if_ne	sub	fp, #8
166e4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
166e8     CC 00 90 5D |  if_ne	jmp	#LR__1883
166ec     A7 2C 02 FB | 	rdlong	local04, fp
166f0     52 00 00 FF 
166f4     60 E5 05 F1 | 	add	objptr, ##42336
166f8     F2 2C 62 FC | 	wrlong	local04, objptr
166fc                 | '   q=t1.result.uresult
166fc                 | '   if q<7 then 
166fc     52 00 00 FF 
16700     60 E5 85 F1 | 	sub	objptr, ##42336
16704     07 2C 56 F2 | 	cmps	local04, #7 wc
16708     9C 00 90 3D |  if_ae	jmp	#LR__1882
1670c     00 C0 1B FF 
16710     00 2C 06 F6 | 	mov	local04, ##931135488
16714     52 00 00 FF 
16718     60 E5 05 F1 | 	add	objptr, ##42336
1671c     F2 28 02 FB | 	rdlong	local02, objptr
16720     02 28 66 F0 | 	shl	local02, #2
16724     5C E5 85 F1 | 	sub	objptr, #348
16728     F2 28 02 F1 | 	add	local02, objptr
1672c     14 13 02 FB | 	rdlong	arg01, local02
16730     52 00 00 FF 
16734     04 E4 85 F1 | 	sub	objptr, ##41988
16738     09 13 52 F6 | 	abs	arg01, arg01 wc
1673c     1F 2A C6 C9 |  if_b	decod	local03, #31
16740     00 2A 06 36 |  if_ae	mov	local03, #0
16744     2C 04 B1 FD | 	call	#__system___float_fromuns
16748     15 FB 61 F5 | 	xor	result1, local03
1674c     FD 12 02 F6 | 	mov	arg01, result1
16750     FF 7F 23 FF 
16754     00 14 06 F6 | 	mov	arg02, ##1191181824
16758     0C 0A B1 FD | 	call	#__system___float_div
1675c     FD 14 02 F6 | 	mov	arg02, result1
16760     16 13 02 F6 | 	mov	arg01, local04
16764     50 04 B1 FD | 	call	#__system___float_add
16768     FD 2C 02 F6 | 	mov	local04, result1
1676c                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1676c     16 13 02 F6 | 	mov	arg01, local04
16770     1F 12 06 F4 | 	bitl	arg01, #31
16774     89 41 1D FF 
16778     6F 14 06 F6 | 	mov	arg02, ##981668463
1677c     01 16 06 F6 | 	mov	arg03, #1
16780     F4 0B B1 FD | 	call	#__system___float_cmp
16784     00 FA 55 F2 | 	cmps	result1, #0 wc
16788     00 2C 06 C6 |  if_b	mov	local04, #0
1678c     A7 2C 62 FC | 	wrlong	local04, fp
16790     08 4E 05 F1 | 	add	fp, #8
16794     A7 3C 68 FC | 	wrlong	#30, fp
16798     08 4E 85 F1 | 	sub	fp, #8
1679c     A7 12 02 F6 | 	mov	arg01, fp
167a0     2C 6E BF FD | 	call	#_push
167a4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
167a4     1C 00 90 FD | 	jmp	#LR__1884
167a8                 | LR__1882
167a8     29 12 06 F6 | 	mov	arg01, #41
167ac     00 14 06 F6 | 	mov	arg02, #0
167b0     6C 94 B0 FD | 	call	#_printerror
167b4                 | '      printerror(41) : return
167b4     0C 00 90 FD | 	jmp	#LR__1884
167b8                 | LR__1883
167b8     29 12 06 F6 | 	mov	arg01, #41
167bc     00 14 06 F6 | 	mov	arg02, #0
167c0     5C 94 B0 FD | 	call	#_printerror
167c4                 | LR__1884
167c4     A7 F0 03 F6 | 	mov	ptra, fp
167c8     B2 00 A0 FD | 	call	#popregs_
167cc                 | _do_padry_ret
167cc     2D 00 64 FD | 	ret
167d0                 | 
167d0                 | ' 
167d0                 | ' ' ------------------ padrz
167d0                 | ' 
167d0                 | ' sub do_padrz
167d0                 | _do_padrz
167d0     04 4A 05 F6 | 	mov	COUNT_, #4
167d4     A8 00 A0 FD | 	call	#pushregs_
167d8     14 F0 07 F1 | 	add	ptra, #20
167dc     4A 00 00 FF 
167e0     A0 E4 05 F1 | 	add	objptr, ##38048
167e4     F2 26 02 FB | 	rdlong	local01, objptr
167e8     13 17 02 F6 | 	mov	arg03, local01
167ec     01 16 66 F0 | 	shl	arg03, #1
167f0     13 17 02 F1 | 	add	arg03, local01
167f4     02 16 66 F0 | 	shl	arg03, #2
167f8     03 00 00 FF 
167fc     04 E4 85 F1 | 	sub	objptr, ##1540
16800     F2 16 02 F1 | 	add	arg03, objptr
16804     0B 29 02 FB | 	rdlong	local02, arg03
16808                 | ' 
16808                 | ' numpar=compiledline(lineptr_e).result.uresult
16808                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
16808     02 28 16 F2 | 	cmp	local02, #2 wc
1680c     47 00 00 FF 
16810     9C E4 85 F1 | 	sub	objptr, ##36508
16814     40 00 90 CD |  if_b	jmp	#LR__1890
16818     00 12 06 F6 | 	mov	arg01, #0
1681c     74 33 B1 FD | 	call	#__system___getiolock_0622
16820     FD 12 02 F6 | 	mov	arg01, result1
16824     80 E8 B0 FD | 	call	#__system___lockmem
16828     93 01 00 FF 
1682c     F9 14 06 F6 | 	mov	arg02, ##@LR__5658
16830     00 12 06 F6 | 	mov	arg01, #0
16834     00 16 06 F6 | 	mov	arg03, #0
16838     8C F0 B0 FD | 	call	#__system___basic_print_string
1683c     00 12 06 F6 | 	mov	arg01, #0
16840     50 33 B1 FD | 	call	#__system___getiolock_0622
16844     FD 00 68 FC | 	wrlong	#0, result1
16848     27 12 06 F6 | 	mov	arg01, #39
1684c     00 14 06 F6 | 	mov	arg02, #0
16850     CC 93 B0 FD | 	call	#_printerror
16854     A0 01 90 FD | 	jmp	#LR__1894
16858                 | LR__1890
16858                 | ' if numpar=0 then 
16858     00 28 0E F2 | 	cmp	local02, #0 wz
1685c     8C 00 90 5D |  if_ne	jmp	#LR__1891
16860     00 C0 1B FF 
16864     00 28 06 F6 | 	mov	local02, ##931135488
16868     52 00 00 FF 
1686c     20 E4 05 F1 | 	add	objptr, ##42016
16870     F2 12 02 FB | 	rdlong	arg01, objptr
16874     52 00 00 FF 
16878     20 E4 85 F1 | 	sub	objptr, ##42016
1687c     09 13 52 F6 | 	abs	arg01, arg01 wc
16880     1F 2A C6 C9 |  if_b	decod	local03, #31
16884     00 2A 06 36 |  if_ae	mov	local03, #0
16888     E8 02 B1 FD | 	call	#__system___float_fromuns
1688c     15 FB 61 F5 | 	xor	result1, local03
16890     FD 12 02 F6 | 	mov	arg01, result1
16894     FF 7F 23 FF 
16898     00 14 06 F6 | 	mov	arg02, ##1191181824
1689c     C8 08 B1 FD | 	call	#__system___float_div
168a0     FD 14 02 F6 | 	mov	arg02, result1
168a4     14 13 02 F6 | 	mov	arg01, local02
168a8     0C 03 B1 FD | 	call	#__system___float_add
168ac     FD 2C 02 F6 | 	mov	local04, result1
168b0                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168b0     16 13 02 F6 | 	mov	arg01, local04
168b4     1F 12 06 F4 | 	bitl	arg01, #31
168b8     89 41 1D FF 
168bc     6F 14 06 F6 | 	mov	arg02, ##981668463
168c0     01 16 06 F6 | 	mov	arg03, #1
168c4     B0 0A B1 FD | 	call	#__system___float_cmp
168c8     00 FA 55 F2 | 	cmps	result1, #0 wc
168cc     00 2C 06 C6 |  if_b	mov	local04, #0
168d0     A7 2C 62 FC | 	wrlong	local04, fp
168d4     08 4E 05 F1 | 	add	fp, #8
168d8     A7 3C 68 FC | 	wrlong	#30, fp
168dc     08 4E 85 F1 | 	sub	fp, #8
168e0     A7 12 02 F6 | 	mov	arg01, fp
168e4     E8 6C BF FD | 	call	#_push
168e8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
168e8     0C 01 90 FD | 	jmp	#LR__1894
168ec                 | LR__1891
168ec     50 6C BF FD | 	call	#_pop
168f0     A7 FA 61 FC | 	wrlong	result1, fp
168f4     04 4E 05 F1 | 	add	fp, #4
168f8     A7 FC 61 FC | 	wrlong	result2, fp
168fc     04 4E 05 F1 | 	add	fp, #4
16900     A7 FE 61 FC | 	wrlong	result3, fp
16904                 | ' t1=pop()
16904                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16904     08 4E 85 F1 | 	sub	fp, #8
16908     1C FE 0D F2 | 	cmp	result3, #28 wz
1690c     08 4E 05 51 |  if_ne	add	fp, #8
16910     A7 26 02 5B |  if_ne	rdlong	local01, fp
16914     08 4E 85 51 |  if_ne	sub	fp, #8
16918     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1691c     CC 00 90 5D |  if_ne	jmp	#LR__1893
16920     A7 2C 02 FB | 	rdlong	local04, fp
16924     52 00 00 FF 
16928     60 E5 05 F1 | 	add	objptr, ##42336
1692c     F2 2C 62 FC | 	wrlong	local04, objptr
16930                 | '   q=t1.result.uresult
16930                 | '   if q<7 then 
16930     52 00 00 FF 
16934     60 E5 85 F1 | 	sub	objptr, ##42336
16938     07 2C 56 F2 | 	cmps	local04, #7 wc
1693c     9C 00 90 3D |  if_ae	jmp	#LR__1892
16940     00 C0 1B FF 
16944     00 2C 06 F6 | 	mov	local04, ##931135488
16948     52 00 00 FF 
1694c     60 E5 05 F1 | 	add	objptr, ##42336
16950     F2 28 02 FB | 	rdlong	local02, objptr
16954     02 28 66 F0 | 	shl	local02, #2
16958     40 E5 85 F1 | 	sub	objptr, #320
1695c     F2 28 02 F1 | 	add	local02, objptr
16960     14 13 02 FB | 	rdlong	arg01, local02
16964     52 00 00 FF 
16968     20 E4 85 F1 | 	sub	objptr, ##42016
1696c     09 13 52 F6 | 	abs	arg01, arg01 wc
16970     1F 2A C6 C9 |  if_b	decod	local03, #31
16974     00 2A 06 36 |  if_ae	mov	local03, #0
16978     F8 01 B1 FD | 	call	#__system___float_fromuns
1697c     15 FB 61 F5 | 	xor	result1, local03
16980     FD 12 02 F6 | 	mov	arg01, result1
16984     FF 7F 23 FF 
16988     00 14 06 F6 | 	mov	arg02, ##1191181824
1698c     D8 07 B1 FD | 	call	#__system___float_div
16990     FD 14 02 F6 | 	mov	arg02, result1
16994     16 13 02 F6 | 	mov	arg01, local04
16998     1C 02 B1 FD | 	call	#__system___float_add
1699c     FD 2C 02 F6 | 	mov	local04, result1
169a0                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169a0     16 13 02 F6 | 	mov	arg01, local04
169a4     1F 12 06 F4 | 	bitl	arg01, #31
169a8     89 41 1D FF 
169ac     6F 14 06 F6 | 	mov	arg02, ##981668463
169b0     01 16 06 F6 | 	mov	arg03, #1
169b4     C0 09 B1 FD | 	call	#__system___float_cmp
169b8     00 FA 55 F2 | 	cmps	result1, #0 wc
169bc     00 2C 06 C6 |  if_b	mov	local04, #0
169c0     A7 2C 62 FC | 	wrlong	local04, fp
169c4     08 4E 05 F1 | 	add	fp, #8
169c8     A7 3C 68 FC | 	wrlong	#30, fp
169cc     08 4E 85 F1 | 	sub	fp, #8
169d0     A7 12 02 F6 | 	mov	arg01, fp
169d4     F8 6B BF FD | 	call	#_push
169d8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
169d8     1C 00 90 FD | 	jmp	#LR__1894
169dc                 | LR__1892
169dc     29 12 06 F6 | 	mov	arg01, #41
169e0     00 14 06 F6 | 	mov	arg02, #0
169e4     38 92 B0 FD | 	call	#_printerror
169e8                 | '      printerror(41) : return
169e8     0C 00 90 FD | 	jmp	#LR__1894
169ec                 | LR__1893
169ec     29 12 06 F6 | 	mov	arg01, #41
169f0     00 14 06 F6 | 	mov	arg02, #0
169f4     28 92 B0 FD | 	call	#_printerror
169f8                 | LR__1894
169f8     A7 F0 03 F6 | 	mov	ptra, fp
169fc     B2 00 A0 FD | 	call	#popregs_
16a00                 | _do_padrz_ret
16a00     2D 00 64 FD | 	ret
16a04                 | 
16a04                 | ' 
16a04                 | ' ' ------------------ pads
16a04                 | ' 
16a04                 | ' sub do_pads
16a04                 | _do_pads
16a04     04 4A 05 F6 | 	mov	COUNT_, #4
16a08     A8 00 A0 FD | 	call	#pushregs_
16a0c     14 F0 07 F1 | 	add	ptra, #20
16a10     4A 00 00 FF 
16a14     A0 E4 05 F1 | 	add	objptr, ##38048
16a18     F2 26 02 FB | 	rdlong	local01, objptr
16a1c     13 17 02 F6 | 	mov	arg03, local01
16a20     01 16 66 F0 | 	shl	arg03, #1
16a24     13 17 02 F1 | 	add	arg03, local01
16a28     02 16 66 F0 | 	shl	arg03, #2
16a2c     03 00 00 FF 
16a30     04 E4 85 F1 | 	sub	objptr, ##1540
16a34     F2 16 02 F1 | 	add	arg03, objptr
16a38     0B 29 02 FB | 	rdlong	local02, arg03
16a3c                 | ' 
16a3c                 | ' numpar=compiledline(lineptr_e).result.uresult
16a3c                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
16a3c     02 28 16 F2 | 	cmp	local02, #2 wc
16a40     47 00 00 FF 
16a44     9C E4 85 F1 | 	sub	objptr, ##36508
16a48     40 00 90 CD |  if_b	jmp	#LR__1900
16a4c     00 12 06 F6 | 	mov	arg01, #0
16a50     40 31 B1 FD | 	call	#__system___getiolock_0622
16a54     FD 12 02 F6 | 	mov	arg01, result1
16a58     4C E6 B0 FD | 	call	#__system___lockmem
16a5c     93 01 00 FF 
16a60     01 15 06 F6 | 	mov	arg02, ##@LR__5659
16a64     00 12 06 F6 | 	mov	arg01, #0
16a68     00 16 06 F6 | 	mov	arg03, #0
16a6c     58 EE B0 FD | 	call	#__system___basic_print_string
16a70     00 12 06 F6 | 	mov	arg01, #0
16a74     1C 31 B1 FD | 	call	#__system___getiolock_0622
16a78     FD 00 68 FC | 	wrlong	#0, result1
16a7c     27 12 06 F6 | 	mov	arg01, #39
16a80     00 14 06 F6 | 	mov	arg02, #0
16a84     98 91 B0 FD | 	call	#_printerror
16a88     A0 01 90 FD | 	jmp	#LR__1904
16a8c                 | LR__1900
16a8c                 | ' if numpar=0 then 
16a8c     00 28 0E F2 | 	cmp	local02, #0 wz
16a90     8C 00 90 5D |  if_ne	jmp	#LR__1901
16a94     00 C0 1B FF 
16a98     00 28 06 F6 | 	mov	local02, ##931135488
16a9c     52 00 00 FF 
16aa0     3C E4 05 F1 | 	add	objptr, ##42044
16aa4     F2 12 02 FB | 	rdlong	arg01, objptr
16aa8     52 00 00 FF 
16aac     3C E4 85 F1 | 	sub	objptr, ##42044
16ab0     09 13 52 F6 | 	abs	arg01, arg01 wc
16ab4     1F 2A C6 C9 |  if_b	decod	local03, #31
16ab8     00 2A 06 36 |  if_ae	mov	local03, #0
16abc     B4 00 B1 FD | 	call	#__system___float_fromuns
16ac0     15 FB 61 F5 | 	xor	result1, local03
16ac4     FD 12 02 F6 | 	mov	arg01, result1
16ac8     FF 7F 23 FF 
16acc     00 14 06 F6 | 	mov	arg02, ##1191181824
16ad0     94 06 B1 FD | 	call	#__system___float_div
16ad4     FD 14 02 F6 | 	mov	arg02, result1
16ad8     14 13 02 F6 | 	mov	arg01, local02
16adc     D8 00 B1 FD | 	call	#__system___float_add
16ae0     FD 2C 02 F6 | 	mov	local04, result1
16ae4                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ae4     16 13 02 F6 | 	mov	arg01, local04
16ae8     1F 12 06 F4 | 	bitl	arg01, #31
16aec     89 41 1D FF 
16af0     6F 14 06 F6 | 	mov	arg02, ##981668463
16af4     01 16 06 F6 | 	mov	arg03, #1
16af8     7C 08 B1 FD | 	call	#__system___float_cmp
16afc     00 FA 55 F2 | 	cmps	result1, #0 wc
16b00     00 2C 06 C6 |  if_b	mov	local04, #0
16b04     A7 2C 62 FC | 	wrlong	local04, fp
16b08     08 4E 05 F1 | 	add	fp, #8
16b0c     A7 3C 68 FC | 	wrlong	#30, fp
16b10     08 4E 85 F1 | 	sub	fp, #8
16b14     A7 12 02 F6 | 	mov	arg01, fp
16b18     B4 6A BF FD | 	call	#_push
16b1c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16b1c     0C 01 90 FD | 	jmp	#LR__1904
16b20                 | LR__1901
16b20     1C 6A BF FD | 	call	#_pop
16b24     A7 FA 61 FC | 	wrlong	result1, fp
16b28     04 4E 05 F1 | 	add	fp, #4
16b2c     A7 FC 61 FC | 	wrlong	result2, fp
16b30     04 4E 05 F1 | 	add	fp, #4
16b34     A7 FE 61 FC | 	wrlong	result3, fp
16b38                 | ' t1=pop()
16b38                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16b38     08 4E 85 F1 | 	sub	fp, #8
16b3c     1C FE 0D F2 | 	cmp	result3, #28 wz
16b40     08 4E 05 51 |  if_ne	add	fp, #8
16b44     A7 26 02 5B |  if_ne	rdlong	local01, fp
16b48     08 4E 85 51 |  if_ne	sub	fp, #8
16b4c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16b50     CC 00 90 5D |  if_ne	jmp	#LR__1903
16b54     A7 2C 02 FB | 	rdlong	local04, fp
16b58     52 00 00 FF 
16b5c     60 E5 05 F1 | 	add	objptr, ##42336
16b60     F2 2C 62 FC | 	wrlong	local04, objptr
16b64                 | '   q=t1.result.uresult
16b64                 | '   if q<7 then 
16b64     52 00 00 FF 
16b68     60 E5 85 F1 | 	sub	objptr, ##42336
16b6c     07 2C 56 F2 | 	cmps	local04, #7 wc
16b70     9C 00 90 3D |  if_ae	jmp	#LR__1902
16b74     00 C0 1B FF 
16b78     00 2C 06 F6 | 	mov	local04, ##931135488
16b7c     52 00 00 FF 
16b80     60 E5 05 F1 | 	add	objptr, ##42336
16b84     F2 28 02 FB | 	rdlong	local02, objptr
16b88     02 28 66 F0 | 	shl	local02, #2
16b8c     24 E5 85 F1 | 	sub	objptr, #292
16b90     F2 28 02 F1 | 	add	local02, objptr
16b94     14 13 02 FB | 	rdlong	arg01, local02
16b98     52 00 00 FF 
16b9c     3C E4 85 F1 | 	sub	objptr, ##42044
16ba0     09 13 52 F6 | 	abs	arg01, arg01 wc
16ba4     1F 2A C6 C9 |  if_b	decod	local03, #31
16ba8     00 2A 06 36 |  if_ae	mov	local03, #0
16bac     C4 FF B0 FD | 	call	#__system___float_fromuns
16bb0     15 FB 61 F5 | 	xor	result1, local03
16bb4     FD 12 02 F6 | 	mov	arg01, result1
16bb8     FF 7F 23 FF 
16bbc     00 14 06 F6 | 	mov	arg02, ##1191181824
16bc0     A4 05 B1 FD | 	call	#__system___float_div
16bc4     FD 14 02 F6 | 	mov	arg02, result1
16bc8     16 13 02 F6 | 	mov	arg01, local04
16bcc     E8 FF B0 FD | 	call	#__system___float_add
16bd0     FD 2C 02 F6 | 	mov	local04, result1
16bd4                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16bd4     16 13 02 F6 | 	mov	arg01, local04
16bd8     1F 12 06 F4 | 	bitl	arg01, #31
16bdc     89 41 1D FF 
16be0     6F 14 06 F6 | 	mov	arg02, ##981668463
16be4     01 16 06 F6 | 	mov	arg03, #1
16be8     8C 07 B1 FD | 	call	#__system___float_cmp
16bec     00 FA 55 F2 | 	cmps	result1, #0 wc
16bf0     00 2C 06 C6 |  if_b	mov	local04, #0
16bf4     A7 2C 62 FC | 	wrlong	local04, fp
16bf8     08 4E 05 F1 | 	add	fp, #8
16bfc     A7 3C 68 FC | 	wrlong	#30, fp
16c00     08 4E 85 F1 | 	sub	fp, #8
16c04     A7 12 02 F6 | 	mov	arg01, fp
16c08     C4 69 BF FD | 	call	#_push
16c0c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16c0c     1C 00 90 FD | 	jmp	#LR__1904
16c10                 | LR__1902
16c10     29 12 06 F6 | 	mov	arg01, #41
16c14     00 14 06 F6 | 	mov	arg02, #0
16c18     04 90 B0 FD | 	call	#_printerror
16c1c                 | '      printerror(41) : return
16c1c     0C 00 90 FD | 	jmp	#LR__1904
16c20                 | LR__1903
16c20     29 12 06 F6 | 	mov	arg01, #41
16c24     00 14 06 F6 | 	mov	arg02, #0
16c28     F4 8F B0 FD | 	call	#_printerror
16c2c                 | LR__1904
16c2c     A7 F0 03 F6 | 	mov	ptra, fp
16c30     B2 00 A0 FD | 	call	#popregs_
16c34                 | _do_pads_ret
16c34     2D 00 64 FD | 	ret
16c38                 | 
16c38                 | ' 
16c38                 | ' ' ------------------ padw
16c38                 | ' 
16c38                 | ' sub do_padw
16c38                 | _do_padw
16c38     04 4A 05 F6 | 	mov	COUNT_, #4
16c3c     A8 00 A0 FD | 	call	#pushregs_
16c40     14 F0 07 F1 | 	add	ptra, #20
16c44     4A 00 00 FF 
16c48     A0 E4 05 F1 | 	add	objptr, ##38048
16c4c     F2 26 02 FB | 	rdlong	local01, objptr
16c50     13 17 02 F6 | 	mov	arg03, local01
16c54     01 16 66 F0 | 	shl	arg03, #1
16c58     13 17 02 F1 | 	add	arg03, local01
16c5c     02 16 66 F0 | 	shl	arg03, #2
16c60     03 00 00 FF 
16c64     04 E4 85 F1 | 	sub	objptr, ##1540
16c68     F2 16 02 F1 | 	add	arg03, objptr
16c6c     0B 29 02 FB | 	rdlong	local02, arg03
16c70                 | ' 
16c70                 | ' numpar=compiledline(lineptr_e).result.uresult
16c70                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
16c70     02 28 16 F2 | 	cmp	local02, #2 wc
16c74     47 00 00 FF 
16c78     9C E4 85 F1 | 	sub	objptr, ##36508
16c7c     40 00 90 CD |  if_b	jmp	#LR__1910
16c80     00 12 06 F6 | 	mov	arg01, #0
16c84     0C 2F B1 FD | 	call	#__system___getiolock_0622
16c88     FD 12 02 F6 | 	mov	arg01, result1
16c8c     18 E4 B0 FD | 	call	#__system___lockmem
16c90     93 01 00 FF 
16c94     08 15 06 F6 | 	mov	arg02, ##@LR__5660
16c98     00 12 06 F6 | 	mov	arg01, #0
16c9c     00 16 06 F6 | 	mov	arg03, #0
16ca0     24 EC B0 FD | 	call	#__system___basic_print_string
16ca4     00 12 06 F6 | 	mov	arg01, #0
16ca8     E8 2E B1 FD | 	call	#__system___getiolock_0622
16cac     FD 00 68 FC | 	wrlong	#0, result1
16cb0     27 12 06 F6 | 	mov	arg01, #39
16cb4     00 14 06 F6 | 	mov	arg02, #0
16cb8     64 8F B0 FD | 	call	#_printerror
16cbc     A0 01 90 FD | 	jmp	#LR__1914
16cc0                 | LR__1910
16cc0                 | ' if numpar=0 then 
16cc0     00 28 0E F2 | 	cmp	local02, #0 wz
16cc4     8C 00 90 5D |  if_ne	jmp	#LR__1911
16cc8     00 C0 1B FF 
16ccc     00 28 06 F6 | 	mov	local02, ##931135488
16cd0     52 00 00 FF 
16cd4     58 E4 05 F1 | 	add	objptr, ##42072
16cd8     F2 12 02 FB | 	rdlong	arg01, objptr
16cdc     52 00 00 FF 
16ce0     58 E4 85 F1 | 	sub	objptr, ##42072
16ce4     09 13 52 F6 | 	abs	arg01, arg01 wc
16ce8     1F 2A C6 C9 |  if_b	decod	local03, #31
16cec     00 2A 06 36 |  if_ae	mov	local03, #0
16cf0     80 FE B0 FD | 	call	#__system___float_fromuns
16cf4     15 FB 61 F5 | 	xor	result1, local03
16cf8     FD 12 02 F6 | 	mov	arg01, result1
16cfc     FF 7F 23 FF 
16d00     00 14 06 F6 | 	mov	arg02, ##1191181824
16d04     60 04 B1 FD | 	call	#__system___float_div
16d08     FD 14 02 F6 | 	mov	arg02, result1
16d0c     14 13 02 F6 | 	mov	arg01, local02
16d10     A4 FE B0 FD | 	call	#__system___float_add
16d14     FD 2C 02 F6 | 	mov	local04, result1
16d18                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d18     16 13 02 F6 | 	mov	arg01, local04
16d1c     1F 12 06 F4 | 	bitl	arg01, #31
16d20     89 41 1D FF 
16d24     6F 14 06 F6 | 	mov	arg02, ##981668463
16d28     01 16 06 F6 | 	mov	arg03, #1
16d2c     48 06 B1 FD | 	call	#__system___float_cmp
16d30     00 FA 55 F2 | 	cmps	result1, #0 wc
16d34     00 2C 06 C6 |  if_b	mov	local04, #0
16d38     A7 2C 62 FC | 	wrlong	local04, fp
16d3c     08 4E 05 F1 | 	add	fp, #8
16d40     A7 3C 68 FC | 	wrlong	#30, fp
16d44     08 4E 85 F1 | 	sub	fp, #8
16d48     A7 12 02 F6 | 	mov	arg01, fp
16d4c     80 68 BF FD | 	call	#_push
16d50                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16d50     0C 01 90 FD | 	jmp	#LR__1914
16d54                 | LR__1911
16d54     E8 67 BF FD | 	call	#_pop
16d58     A7 FA 61 FC | 	wrlong	result1, fp
16d5c     04 4E 05 F1 | 	add	fp, #4
16d60     A7 FC 61 FC | 	wrlong	result2, fp
16d64     04 4E 05 F1 | 	add	fp, #4
16d68     A7 FE 61 FC | 	wrlong	result3, fp
16d6c                 | ' t1=pop()
16d6c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16d6c     08 4E 85 F1 | 	sub	fp, #8
16d70     1C FE 0D F2 | 	cmp	result3, #28 wz
16d74     08 4E 05 51 |  if_ne	add	fp, #8
16d78     A7 26 02 5B |  if_ne	rdlong	local01, fp
16d7c     08 4E 85 51 |  if_ne	sub	fp, #8
16d80     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16d84     CC 00 90 5D |  if_ne	jmp	#LR__1913
16d88     A7 2C 02 FB | 	rdlong	local04, fp
16d8c     52 00 00 FF 
16d90     60 E5 05 F1 | 	add	objptr, ##42336
16d94     F2 2C 62 FC | 	wrlong	local04, objptr
16d98                 | '   q=t1.result.uresult
16d98                 | '   if q<7 then 
16d98     52 00 00 FF 
16d9c     60 E5 85 F1 | 	sub	objptr, ##42336
16da0     07 2C 56 F2 | 	cmps	local04, #7 wc
16da4     9C 00 90 3D |  if_ae	jmp	#LR__1912
16da8     00 C0 1B FF 
16dac     00 2C 06 F6 | 	mov	local04, ##931135488
16db0     52 00 00 FF 
16db4     60 E5 05 F1 | 	add	objptr, ##42336
16db8     F2 28 02 FB | 	rdlong	local02, objptr
16dbc     02 28 66 F0 | 	shl	local02, #2
16dc0     08 E5 85 F1 | 	sub	objptr, #264
16dc4     F2 28 02 F1 | 	add	local02, objptr
16dc8     14 13 02 FB | 	rdlong	arg01, local02
16dcc     52 00 00 FF 
16dd0     58 E4 85 F1 | 	sub	objptr, ##42072
16dd4     09 13 52 F6 | 	abs	arg01, arg01 wc
16dd8     1F 2A C6 C9 |  if_b	decod	local03, #31
16ddc     00 2A 06 36 |  if_ae	mov	local03, #0
16de0     90 FD B0 FD | 	call	#__system___float_fromuns
16de4     15 FB 61 F5 | 	xor	result1, local03
16de8     FD 12 02 F6 | 	mov	arg01, result1
16dec     FF 7F 23 FF 
16df0     00 14 06 F6 | 	mov	arg02, ##1191181824
16df4     70 03 B1 FD | 	call	#__system___float_div
16df8     FD 14 02 F6 | 	mov	arg02, result1
16dfc     16 13 02 F6 | 	mov	arg01, local04
16e00     B4 FD B0 FD | 	call	#__system___float_add
16e04     FD 2C 02 F6 | 	mov	local04, result1
16e08                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e08     16 13 02 F6 | 	mov	arg01, local04
16e0c     1F 12 06 F4 | 	bitl	arg01, #31
16e10     89 41 1D FF 
16e14     6F 14 06 F6 | 	mov	arg02, ##981668463
16e18     01 16 06 F6 | 	mov	arg03, #1
16e1c     58 05 B1 FD | 	call	#__system___float_cmp
16e20     00 FA 55 F2 | 	cmps	result1, #0 wc
16e24     00 2C 06 C6 |  if_b	mov	local04, #0
16e28     A7 2C 62 FC | 	wrlong	local04, fp
16e2c     08 4E 05 F1 | 	add	fp, #8
16e30     A7 3C 68 FC | 	wrlong	#30, fp
16e34     08 4E 85 F1 | 	sub	fp, #8
16e38     A7 12 02 F6 | 	mov	arg01, fp
16e3c     90 67 BF FD | 	call	#_push
16e40                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16e40     1C 00 90 FD | 	jmp	#LR__1914
16e44                 | LR__1912
16e44     29 12 06 F6 | 	mov	arg01, #41
16e48     00 14 06 F6 | 	mov	arg02, #0
16e4c     D0 8D B0 FD | 	call	#_printerror
16e50                 | '      printerror(41) : return
16e50     0C 00 90 FD | 	jmp	#LR__1914
16e54                 | LR__1913
16e54     29 12 06 F6 | 	mov	arg01, #41
16e58     00 14 06 F6 | 	mov	arg02, #0
16e5c     C0 8D B0 FD | 	call	#_printerror
16e60                 | LR__1914
16e60     A7 F0 03 F6 | 	mov	ptra, fp
16e64     B2 00 A0 FD | 	call	#popregs_
16e68                 | _do_padw_ret
16e68     2D 00 64 FD | 	ret
16e6c                 | 
16e6c                 | ' 
16e6c                 | ' ' ------------------ padx
16e6c                 | ' 
16e6c                 | ' sub do_padx
16e6c                 | _do_padx
16e6c     04 4A 05 F6 | 	mov	COUNT_, #4
16e70     A8 00 A0 FD | 	call	#pushregs_
16e74     14 F0 07 F1 | 	add	ptra, #20
16e78     4A 00 00 FF 
16e7c     A0 E4 05 F1 | 	add	objptr, ##38048
16e80     F2 26 02 FB | 	rdlong	local01, objptr
16e84     13 17 02 F6 | 	mov	arg03, local01
16e88     01 16 66 F0 | 	shl	arg03, #1
16e8c     13 17 02 F1 | 	add	arg03, local01
16e90     02 16 66 F0 | 	shl	arg03, #2
16e94     03 00 00 FF 
16e98     04 E4 85 F1 | 	sub	objptr, ##1540
16e9c     F2 16 02 F1 | 	add	arg03, objptr
16ea0     0B 29 02 FB | 	rdlong	local02, arg03
16ea4                 | ' 
16ea4                 | ' numpar=compiledline(lineptr_e).result.uresult
16ea4                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16ea4     02 28 16 F2 | 	cmp	local02, #2 wc
16ea8     47 00 00 FF 
16eac     9C E4 85 F1 | 	sub	objptr, ##36508
16eb0     40 00 90 CD |  if_b	jmp	#LR__1920
16eb4     00 12 06 F6 | 	mov	arg01, #0
16eb8     D8 2C B1 FD | 	call	#__system___getiolock_0622
16ebc     FD 12 02 F6 | 	mov	arg01, result1
16ec0     E4 E1 B0 FD | 	call	#__system___lockmem
16ec4     93 01 00 FF 
16ec8     0F 15 06 F6 | 	mov	arg02, ##@LR__5661
16ecc     00 12 06 F6 | 	mov	arg01, #0
16ed0     00 16 06 F6 | 	mov	arg03, #0
16ed4     F0 E9 B0 FD | 	call	#__system___basic_print_string
16ed8     00 12 06 F6 | 	mov	arg01, #0
16edc     B4 2C B1 FD | 	call	#__system___getiolock_0622
16ee0     FD 00 68 FC | 	wrlong	#0, result1
16ee4     27 12 06 F6 | 	mov	arg01, #39
16ee8     00 14 06 F6 | 	mov	arg02, #0
16eec     30 8D B0 FD | 	call	#_printerror
16ef0     A0 01 90 FD | 	jmp	#LR__1924
16ef4                 | LR__1920
16ef4                 | ' if numpar=0 then 
16ef4     00 28 0E F2 | 	cmp	local02, #0 wz
16ef8     8C 00 90 5D |  if_ne	jmp	#LR__1921
16efc     00 C0 1B FF 
16f00     00 28 06 F6 | 	mov	local02, ##931135488
16f04     51 00 00 FF 
16f08     78 E5 05 F1 | 	add	objptr, ##41848
16f0c     F2 12 02 FB | 	rdlong	arg01, objptr
16f10     51 00 00 FF 
16f14     78 E5 85 F1 | 	sub	objptr, ##41848
16f18     09 13 52 F6 | 	abs	arg01, arg01 wc
16f1c     1F 2A C6 C9 |  if_b	decod	local03, #31
16f20     00 2A 06 36 |  if_ae	mov	local03, #0
16f24     4C FC B0 FD | 	call	#__system___float_fromuns
16f28     15 FB 61 F5 | 	xor	result1, local03
16f2c     FD 12 02 F6 | 	mov	arg01, result1
16f30     FF 7F 23 FF 
16f34     00 14 06 F6 | 	mov	arg02, ##1191181824
16f38     2C 02 B1 FD | 	call	#__system___float_div
16f3c     FD 14 02 F6 | 	mov	arg02, result1
16f40     14 13 02 F6 | 	mov	arg01, local02
16f44     70 FC B0 FD | 	call	#__system___float_add
16f48     FD 2C 02 F6 | 	mov	local04, result1
16f4c                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f4c     16 13 02 F6 | 	mov	arg01, local04
16f50     1F 12 06 F4 | 	bitl	arg01, #31
16f54     89 41 1D FF 
16f58     6F 14 06 F6 | 	mov	arg02, ##981668463
16f5c     01 16 06 F6 | 	mov	arg03, #1
16f60     14 04 B1 FD | 	call	#__system___float_cmp
16f64     00 FA 55 F2 | 	cmps	result1, #0 wc
16f68     00 2C 06 C6 |  if_b	mov	local04, #0
16f6c     A7 2C 62 FC | 	wrlong	local04, fp
16f70     08 4E 05 F1 | 	add	fp, #8
16f74     A7 3C 68 FC | 	wrlong	#30, fp
16f78     08 4E 85 F1 | 	sub	fp, #8
16f7c     A7 12 02 F6 | 	mov	arg01, fp
16f80     4C 66 BF FD | 	call	#_push
16f84                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16f84     0C 01 90 FD | 	jmp	#LR__1924
16f88                 | LR__1921
16f88     B4 65 BF FD | 	call	#_pop
16f8c     A7 FA 61 FC | 	wrlong	result1, fp
16f90     04 4E 05 F1 | 	add	fp, #4
16f94     A7 FC 61 FC | 	wrlong	result2, fp
16f98     04 4E 05 F1 | 	add	fp, #4
16f9c     A7 FE 61 FC | 	wrlong	result3, fp
16fa0                 | ' t1=pop()
16fa0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16fa0     08 4E 85 F1 | 	sub	fp, #8
16fa4     1C FE 0D F2 | 	cmp	result3, #28 wz
16fa8     08 4E 05 51 |  if_ne	add	fp, #8
16fac     A7 26 02 5B |  if_ne	rdlong	local01, fp
16fb0     08 4E 85 51 |  if_ne	sub	fp, #8
16fb4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16fb8     CC 00 90 5D |  if_ne	jmp	#LR__1923
16fbc     A7 2C 02 FB | 	rdlong	local04, fp
16fc0     52 00 00 FF 
16fc4     60 E5 05 F1 | 	add	objptr, ##42336
16fc8     F2 2C 62 FC | 	wrlong	local04, objptr
16fcc                 | '   q=t1.result.uresult
16fcc                 | '   if q<7 then 
16fcc     52 00 00 FF 
16fd0     60 E5 85 F1 | 	sub	objptr, ##42336
16fd4     07 2C 56 F2 | 	cmps	local04, #7 wc
16fd8     9C 00 90 3D |  if_ae	jmp	#LR__1922
16fdc     00 C0 1B FF 
16fe0     00 2C 06 F6 | 	mov	local04, ##931135488
16fe4     52 00 00 FF 
16fe8     60 E5 05 F1 | 	add	objptr, ##42336
16fec     F2 28 02 FB | 	rdlong	local02, objptr
16ff0     02 28 66 F0 | 	shl	local02, #2
16ff4     E8 E5 85 F1 | 	sub	objptr, #488
16ff8     F2 28 02 F1 | 	add	local02, objptr
16ffc     14 13 02 FB | 	rdlong	arg01, local02
17000     51 00 00 FF 
17004     78 E5 85 F1 | 	sub	objptr, ##41848
17008     09 13 52 F6 | 	abs	arg01, arg01 wc
1700c     1F 2A C6 C9 |  if_b	decod	local03, #31
17010     00 2A 06 36 |  if_ae	mov	local03, #0
17014     5C FB B0 FD | 	call	#__system___float_fromuns
17018     15 FB 61 F5 | 	xor	result1, local03
1701c     FD 12 02 F6 | 	mov	arg01, result1
17020     FF 7F 23 FF 
17024     00 14 06 F6 | 	mov	arg02, ##1191181824
17028     3C 01 B1 FD | 	call	#__system___float_div
1702c     FD 14 02 F6 | 	mov	arg02, result1
17030     16 13 02 F6 | 	mov	arg01, local04
17034     80 FB B0 FD | 	call	#__system___float_add
17038     FD 2C 02 F6 | 	mov	local04, result1
1703c                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1703c     16 13 02 F6 | 	mov	arg01, local04
17040     1F 12 06 F4 | 	bitl	arg01, #31
17044     89 41 1D FF 
17048     6F 14 06 F6 | 	mov	arg02, ##981668463
1704c     01 16 06 F6 | 	mov	arg03, #1
17050     24 03 B1 FD | 	call	#__system___float_cmp
17054     00 FA 55 F2 | 	cmps	result1, #0 wc
17058     00 2C 06 C6 |  if_b	mov	local04, #0
1705c     A7 2C 62 FC | 	wrlong	local04, fp
17060     08 4E 05 F1 | 	add	fp, #8
17064     A7 3C 68 FC | 	wrlong	#30, fp
17068     08 4E 85 F1 | 	sub	fp, #8
1706c     A7 12 02 F6 | 	mov	arg01, fp
17070     5C 65 BF FD | 	call	#_push
17074                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17074     1C 00 90 FD | 	jmp	#LR__1924
17078                 | LR__1922
17078     29 12 06 F6 | 	mov	arg01, #41
1707c     00 14 06 F6 | 	mov	arg02, #0
17080     9C 8B B0 FD | 	call	#_printerror
17084                 | '      printerror(41) : return
17084     0C 00 90 FD | 	jmp	#LR__1924
17088                 | LR__1923
17088     29 12 06 F6 | 	mov	arg01, #41
1708c     00 14 06 F6 | 	mov	arg02, #0
17090     8C 8B B0 FD | 	call	#_printerror
17094                 | LR__1924
17094     A7 F0 03 F6 | 	mov	ptra, fp
17098     B2 00 A0 FD | 	call	#popregs_
1709c                 | _do_padx_ret
1709c     2D 00 64 FD | 	ret
170a0                 | 
170a0                 | ' 
170a0                 | ' ' ------------------ pady
170a0                 | ' 
170a0                 | ' sub do_pady
170a0                 | _do_pady
170a0     04 4A 05 F6 | 	mov	COUNT_, #4
170a4     A8 00 A0 FD | 	call	#pushregs_
170a8     14 F0 07 F1 | 	add	ptra, #20
170ac     4A 00 00 FF 
170b0     A0 E4 05 F1 | 	add	objptr, ##38048
170b4     F2 26 02 FB | 	rdlong	local01, objptr
170b8     13 17 02 F6 | 	mov	arg03, local01
170bc     01 16 66 F0 | 	shl	arg03, #1
170c0     13 17 02 F1 | 	add	arg03, local01
170c4     02 16 66 F0 | 	shl	arg03, #2
170c8     03 00 00 FF 
170cc     04 E4 85 F1 | 	sub	objptr, ##1540
170d0     F2 16 02 F1 | 	add	arg03, objptr
170d4     0B 29 02 FB | 	rdlong	local02, arg03
170d8                 | ' 
170d8                 | ' numpar=compiledline(lineptr_e).result.uresult
170d8                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
170d8     02 28 16 F2 | 	cmp	local02, #2 wc
170dc     47 00 00 FF 
170e0     9C E4 85 F1 | 	sub	objptr, ##36508
170e4     40 00 90 CD |  if_b	jmp	#LR__1930
170e8     00 12 06 F6 | 	mov	arg01, #0
170ec     A4 2A B1 FD | 	call	#__system___getiolock_0622
170f0     FD 12 02 F6 | 	mov	arg01, result1
170f4     B0 DF B0 FD | 	call	#__system___lockmem
170f8     93 01 00 FF 
170fc     16 15 06 F6 | 	mov	arg02, ##@LR__5662
17100     00 12 06 F6 | 	mov	arg01, #0
17104     00 16 06 F6 | 	mov	arg03, #0
17108     BC E7 B0 FD | 	call	#__system___basic_print_string
1710c     00 12 06 F6 | 	mov	arg01, #0
17110     80 2A B1 FD | 	call	#__system___getiolock_0622
17114     FD 00 68 FC | 	wrlong	#0, result1
17118     27 12 06 F6 | 	mov	arg01, #39
1711c     00 14 06 F6 | 	mov	arg02, #0
17120     FC 8A B0 FD | 	call	#_printerror
17124     A0 01 90 FD | 	jmp	#LR__1934
17128                 | LR__1930
17128                 | ' if numpar=0 then 
17128     00 28 0E F2 | 	cmp	local02, #0 wz
1712c     8C 00 90 5D |  if_ne	jmp	#LR__1931
17130     00 C0 1B FF 
17134     00 28 06 F6 | 	mov	local02, ##931135488
17138     51 00 00 FF 
1713c     94 E5 05 F1 | 	add	objptr, ##41876
17140     F2 12 02 FB | 	rdlong	arg01, objptr
17144     51 00 00 FF 
17148     94 E5 85 F1 | 	sub	objptr, ##41876
1714c     09 13 52 F6 | 	abs	arg01, arg01 wc
17150     1F 2A C6 C9 |  if_b	decod	local03, #31
17154     00 2A 06 36 |  if_ae	mov	local03, #0
17158     18 FA B0 FD | 	call	#__system___float_fromuns
1715c     15 FB 61 F5 | 	xor	result1, local03
17160     FD 12 02 F6 | 	mov	arg01, result1
17164     FF 7F 23 FF 
17168     00 14 06 F6 | 	mov	arg02, ##1191181824
1716c     F8 FF B0 FD | 	call	#__system___float_div
17170     FD 14 02 F6 | 	mov	arg02, result1
17174     14 13 02 F6 | 	mov	arg01, local02
17178     3C FA B0 FD | 	call	#__system___float_add
1717c     FD 2C 02 F6 | 	mov	local04, result1
17180                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17180     16 13 02 F6 | 	mov	arg01, local04
17184     1F 12 06 F4 | 	bitl	arg01, #31
17188     89 41 1D FF 
1718c     6F 14 06 F6 | 	mov	arg02, ##981668463
17190     01 16 06 F6 | 	mov	arg03, #1
17194     E0 01 B1 FD | 	call	#__system___float_cmp
17198     00 FA 55 F2 | 	cmps	result1, #0 wc
1719c     00 2C 06 C6 |  if_b	mov	local04, #0
171a0     A7 2C 62 FC | 	wrlong	local04, fp
171a4     08 4E 05 F1 | 	add	fp, #8
171a8     A7 3C 68 FC | 	wrlong	#30, fp
171ac     08 4E 85 F1 | 	sub	fp, #8
171b0     A7 12 02 F6 | 	mov	arg01, fp
171b4     18 64 BF FD | 	call	#_push
171b8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
171b8     0C 01 90 FD | 	jmp	#LR__1934
171bc                 | LR__1931
171bc     80 63 BF FD | 	call	#_pop
171c0     A7 FA 61 FC | 	wrlong	result1, fp
171c4     04 4E 05 F1 | 	add	fp, #4
171c8     A7 FC 61 FC | 	wrlong	result2, fp
171cc     04 4E 05 F1 | 	add	fp, #4
171d0     A7 FE 61 FC | 	wrlong	result3, fp
171d4                 | ' t1=pop()
171d4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
171d4     08 4E 85 F1 | 	sub	fp, #8
171d8     1C FE 0D F2 | 	cmp	result3, #28 wz
171dc     08 4E 05 51 |  if_ne	add	fp, #8
171e0     A7 26 02 5B |  if_ne	rdlong	local01, fp
171e4     08 4E 85 51 |  if_ne	sub	fp, #8
171e8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
171ec     CC 00 90 5D |  if_ne	jmp	#LR__1933
171f0     A7 2C 02 FB | 	rdlong	local04, fp
171f4     52 00 00 FF 
171f8     60 E5 05 F1 | 	add	objptr, ##42336
171fc     F2 2C 62 FC | 	wrlong	local04, objptr
17200                 | '   q=t1.result.uresult
17200                 | '   if q<7 then 
17200     52 00 00 FF 
17204     60 E5 85 F1 | 	sub	objptr, ##42336
17208     07 2C 56 F2 | 	cmps	local04, #7 wc
1720c     9C 00 90 3D |  if_ae	jmp	#LR__1932
17210     00 C0 1B FF 
17214     00 2C 06 F6 | 	mov	local04, ##931135488
17218     52 00 00 FF 
1721c     60 E5 05 F1 | 	add	objptr, ##42336
17220     F2 28 02 FB | 	rdlong	local02, objptr
17224     02 28 66 F0 | 	shl	local02, #2
17228     CC E5 85 F1 | 	sub	objptr, #460
1722c     F2 28 02 F1 | 	add	local02, objptr
17230     14 13 02 FB | 	rdlong	arg01, local02
17234     51 00 00 FF 
17238     94 E5 85 F1 | 	sub	objptr, ##41876
1723c     09 13 52 F6 | 	abs	arg01, arg01 wc
17240     1F 2A C6 C9 |  if_b	decod	local03, #31
17244     00 2A 06 36 |  if_ae	mov	local03, #0
17248     28 F9 B0 FD | 	call	#__system___float_fromuns
1724c     15 FB 61 F5 | 	xor	result1, local03
17250     FD 12 02 F6 | 	mov	arg01, result1
17254     FF 7F 23 FF 
17258     00 14 06 F6 | 	mov	arg02, ##1191181824
1725c     08 FF B0 FD | 	call	#__system___float_div
17260     FD 14 02 F6 | 	mov	arg02, result1
17264     16 13 02 F6 | 	mov	arg01, local04
17268     4C F9 B0 FD | 	call	#__system___float_add
1726c     FD 2C 02 F6 | 	mov	local04, result1
17270                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17270     16 13 02 F6 | 	mov	arg01, local04
17274     1F 12 06 F4 | 	bitl	arg01, #31
17278     89 41 1D FF 
1727c     6F 14 06 F6 | 	mov	arg02, ##981668463
17280     01 16 06 F6 | 	mov	arg03, #1
17284     F0 00 B1 FD | 	call	#__system___float_cmp
17288     00 FA 55 F2 | 	cmps	result1, #0 wc
1728c     00 2C 06 C6 |  if_b	mov	local04, #0
17290     A7 2C 62 FC | 	wrlong	local04, fp
17294     08 4E 05 F1 | 	add	fp, #8
17298     A7 3C 68 FC | 	wrlong	#30, fp
1729c     08 4E 85 F1 | 	sub	fp, #8
172a0     A7 12 02 F6 | 	mov	arg01, fp
172a4     28 63 BF FD | 	call	#_push
172a8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
172a8     1C 00 90 FD | 	jmp	#LR__1934
172ac                 | LR__1932
172ac     29 12 06 F6 | 	mov	arg01, #41
172b0     00 14 06 F6 | 	mov	arg02, #0
172b4     68 89 B0 FD | 	call	#_printerror
172b8                 | '      printerror(41) : return
172b8     0C 00 90 FD | 	jmp	#LR__1934
172bc                 | LR__1933
172bc     29 12 06 F6 | 	mov	arg01, #41
172c0     00 14 06 F6 | 	mov	arg02, #0
172c4     58 89 B0 FD | 	call	#_printerror
172c8                 | LR__1934
172c8     A7 F0 03 F6 | 	mov	ptra, fp
172cc     B2 00 A0 FD | 	call	#popregs_
172d0                 | _do_pady_ret
172d0     2D 00 64 FD | 	ret
172d4                 | 
172d4                 | ' 
172d4                 | ' ' ------------------ padz
172d4                 | ' 
172d4                 | ' sub do_padz
172d4                 | _do_padz
172d4     04 4A 05 F6 | 	mov	COUNT_, #4
172d8     A8 00 A0 FD | 	call	#pushregs_
172dc     14 F0 07 F1 | 	add	ptra, #20
172e0     4A 00 00 FF 
172e4     A0 E4 05 F1 | 	add	objptr, ##38048
172e8     F2 26 02 FB | 	rdlong	local01, objptr
172ec     13 17 02 F6 | 	mov	arg03, local01
172f0     01 16 66 F0 | 	shl	arg03, #1
172f4     13 17 02 F1 | 	add	arg03, local01
172f8     02 16 66 F0 | 	shl	arg03, #2
172fc     03 00 00 FF 
17300     04 E4 85 F1 | 	sub	objptr, ##1540
17304     F2 16 02 F1 | 	add	arg03, objptr
17308     0B 29 02 FB | 	rdlong	local02, arg03
1730c                 | ' 
1730c                 | ' numpar=compiledline(lineptr_e).result.uresult
1730c                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
1730c     02 28 16 F2 | 	cmp	local02, #2 wc
17310     47 00 00 FF 
17314     9C E4 85 F1 | 	sub	objptr, ##36508
17318     40 00 90 CD |  if_b	jmp	#LR__1940
1731c     00 12 06 F6 | 	mov	arg01, #0
17320     70 28 B1 FD | 	call	#__system___getiolock_0622
17324     FD 12 02 F6 | 	mov	arg01, result1
17328     7C DD B0 FD | 	call	#__system___lockmem
1732c     93 01 00 FF 
17330     1D 15 06 F6 | 	mov	arg02, ##@LR__5663
17334     00 12 06 F6 | 	mov	arg01, #0
17338     00 16 06 F6 | 	mov	arg03, #0
1733c     88 E5 B0 FD | 	call	#__system___basic_print_string
17340     00 12 06 F6 | 	mov	arg01, #0
17344     4C 28 B1 FD | 	call	#__system___getiolock_0622
17348     FD 00 68 FC | 	wrlong	#0, result1
1734c     27 12 06 F6 | 	mov	arg01, #39
17350     00 14 06 F6 | 	mov	arg02, #0
17354     C8 88 B0 FD | 	call	#_printerror
17358     A0 01 90 FD | 	jmp	#LR__1944
1735c                 | LR__1940
1735c                 | ' if numpar=0 then 
1735c     00 28 0E F2 | 	cmp	local02, #0 wz
17360     8C 00 90 5D |  if_ne	jmp	#LR__1941
17364     00 C0 1B FF 
17368     00 28 06 F6 | 	mov	local02, ##931135488
1736c     51 00 00 FF 
17370     B0 E5 05 F1 | 	add	objptr, ##41904
17374     F2 12 02 FB | 	rdlong	arg01, objptr
17378     51 00 00 FF 
1737c     B0 E5 85 F1 | 	sub	objptr, ##41904
17380     09 13 52 F6 | 	abs	arg01, arg01 wc
17384     1F 2A C6 C9 |  if_b	decod	local03, #31
17388     00 2A 06 36 |  if_ae	mov	local03, #0
1738c     E4 F7 B0 FD | 	call	#__system___float_fromuns
17390     15 FB 61 F5 | 	xor	result1, local03
17394     FD 12 02 F6 | 	mov	arg01, result1
17398     FF 7F 23 FF 
1739c     00 14 06 F6 | 	mov	arg02, ##1191181824
173a0     C4 FD B0 FD | 	call	#__system___float_div
173a4     FD 14 02 F6 | 	mov	arg02, result1
173a8     14 13 02 F6 | 	mov	arg01, local02
173ac     08 F8 B0 FD | 	call	#__system___float_add
173b0     FD 2C 02 F6 | 	mov	local04, result1
173b4                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
173b4     16 13 02 F6 | 	mov	arg01, local04
173b8     1F 12 06 F4 | 	bitl	arg01, #31
173bc     89 41 1D FF 
173c0     6F 14 06 F6 | 	mov	arg02, ##981668463
173c4     01 16 06 F6 | 	mov	arg03, #1
173c8     AC FF B0 FD | 	call	#__system___float_cmp
173cc     00 FA 55 F2 | 	cmps	result1, #0 wc
173d0     00 2C 06 C6 |  if_b	mov	local04, #0
173d4     A7 2C 62 FC | 	wrlong	local04, fp
173d8     08 4E 05 F1 | 	add	fp, #8
173dc     A7 3C 68 FC | 	wrlong	#30, fp
173e0     08 4E 85 F1 | 	sub	fp, #8
173e4     A7 12 02 F6 | 	mov	arg01, fp
173e8     E4 61 BF FD | 	call	#_push
173ec                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
173ec     0C 01 90 FD | 	jmp	#LR__1944
173f0                 | LR__1941
173f0     4C 61 BF FD | 	call	#_pop
173f4     A7 FA 61 FC | 	wrlong	result1, fp
173f8     04 4E 05 F1 | 	add	fp, #4
173fc     A7 FC 61 FC | 	wrlong	result2, fp
17400     04 4E 05 F1 | 	add	fp, #4
17404     A7 FE 61 FC | 	wrlong	result3, fp
17408                 | ' t1=pop()
17408                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17408     08 4E 85 F1 | 	sub	fp, #8
1740c     1C FE 0D F2 | 	cmp	result3, #28 wz
17410     08 4E 05 51 |  if_ne	add	fp, #8
17414     A7 26 02 5B |  if_ne	rdlong	local01, fp
17418     08 4E 85 51 |  if_ne	sub	fp, #8
1741c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17420     CC 00 90 5D |  if_ne	jmp	#LR__1943
17424     A7 2C 02 FB | 	rdlong	local04, fp
17428     52 00 00 FF 
1742c     60 E5 05 F1 | 	add	objptr, ##42336
17430     F2 2C 62 FC | 	wrlong	local04, objptr
17434                 | '   q=t1.result.uresult
17434                 | '   if q<7 then 
17434     52 00 00 FF 
17438     60 E5 85 F1 | 	sub	objptr, ##42336
1743c     07 2C 56 F2 | 	cmps	local04, #7 wc
17440     9C 00 90 3D |  if_ae	jmp	#LR__1942
17444     00 C0 1B FF 
17448     00 2C 06 F6 | 	mov	local04, ##931135488
1744c     52 00 00 FF 
17450     60 E5 05 F1 | 	add	objptr, ##42336
17454     F2 28 02 FB | 	rdlong	local02, objptr
17458     02 28 66 F0 | 	shl	local02, #2
1745c     B0 E5 85 F1 | 	sub	objptr, #432
17460     F2 28 02 F1 | 	add	local02, objptr
17464     14 13 02 FB | 	rdlong	arg01, local02
17468     51 00 00 FF 
1746c     B0 E5 85 F1 | 	sub	objptr, ##41904
17470     09 13 52 F6 | 	abs	arg01, arg01 wc
17474     1F 2A C6 C9 |  if_b	decod	local03, #31
17478     00 2A 06 36 |  if_ae	mov	local03, #0
1747c     F4 F6 B0 FD | 	call	#__system___float_fromuns
17480     15 FB 61 F5 | 	xor	result1, local03
17484     FD 12 02 F6 | 	mov	arg01, result1
17488     FF 7F 23 FF 
1748c     00 14 06 F6 | 	mov	arg02, ##1191181824
17490     D4 FC B0 FD | 	call	#__system___float_div
17494     FD 14 02 F6 | 	mov	arg02, result1
17498     16 13 02 F6 | 	mov	arg01, local04
1749c     18 F7 B0 FD | 	call	#__system___float_add
174a0     FD 2C 02 F6 | 	mov	local04, result1
174a4                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
174a4     16 13 02 F6 | 	mov	arg01, local04
174a8     1F 12 06 F4 | 	bitl	arg01, #31
174ac     89 41 1D FF 
174b0     6F 14 06 F6 | 	mov	arg02, ##981668463
174b4     01 16 06 F6 | 	mov	arg03, #1
174b8     BC FE B0 FD | 	call	#__system___float_cmp
174bc     00 FA 55 F2 | 	cmps	result1, #0 wc
174c0     00 2C 06 C6 |  if_b	mov	local04, #0
174c4     A7 2C 62 FC | 	wrlong	local04, fp
174c8     08 4E 05 F1 | 	add	fp, #8
174cc     A7 3C 68 FC | 	wrlong	#30, fp
174d0     08 4E 85 F1 | 	sub	fp, #8
174d4     A7 12 02 F6 | 	mov	arg01, fp
174d8     F4 60 BF FD | 	call	#_push
174dc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
174dc     1C 00 90 FD | 	jmp	#LR__1944
174e0                 | LR__1942
174e0     29 12 06 F6 | 	mov	arg01, #41
174e4     00 14 06 F6 | 	mov	arg02, #0
174e8     34 87 B0 FD | 	call	#_printerror
174ec                 | '      printerror(41) : return
174ec     0C 00 90 FD | 	jmp	#LR__1944
174f0                 | LR__1943
174f0     29 12 06 F6 | 	mov	arg01, #41
174f4     00 14 06 F6 | 	mov	arg02, #0
174f8     24 87 B0 FD | 	call	#_printerror
174fc                 | LR__1944
174fc     A7 F0 03 F6 | 	mov	ptra, fp
17500     B2 00 A0 FD | 	call	#popregs_
17504                 | _do_padz_ret
17504     2D 00 64 FD | 	ret
17508                 | 
17508                 | ' 
17508                 | ' '-------------------- paper
17508                 | ' 
17508                 | ' sub do_paper
17508                 | _do_paper
17508     03 4A 05 F6 | 	mov	COUNT_, #3
1750c     A8 00 A0 FD | 	call	#pushregs_
17510     2C 60 BF FD | 	call	#_pop
17514     FD 26 02 F6 | 	mov	local01, result1
17518     FE 28 02 F6 | 	mov	local02, result2
1751c     FF 2A 02 F6 | 	mov	local03, result3
17520                 | ' t1=pop() 
17520                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17520     1E 2A 0E F2 | 	cmp	local03, #30 wz
17524     10 00 90 5D |  if_ne	jmp	#LR__1950
17528     13 13 02 F6 | 	mov	arg01, local01
1752c     00 14 06 F6 | 	mov	arg02, #0
17530     CC FE B0 FD | 	call	#__system___float_tointeger
17534     FD 26 02 F6 | 	mov	local01, result1
17538                 | LR__1950
17538                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17538     1F 2A 0E F2 | 	cmp	local03, #31 wz
1753c     18 00 90 5D |  if_ne	jmp	#LR__1951
17540     13 13 02 F6 | 	mov	arg01, local01
17544     F0 01 B1 FD | 	call	#__system____builtin_atof
17548     FD 12 02 F6 | 	mov	arg01, result1
1754c     00 14 06 F6 | 	mov	arg02, #0
17550     AC FE B0 FD | 	call	#__system___float_tointeger
17554     FD 26 02 F6 | 	mov	local01, result1
17558                 | LR__1951
17558     37 00 00 FF 
1755c     58 E4 05 F1 | 	add	objptr, ##28248
17560     F2 26 62 FC | 	wrlong	local01, objptr
17564     04 E4 05 F1 | 	add	objptr, #4
17568     F2 12 02 FB | 	rdlong	arg01, objptr
1756c                 | ' 
1756c                 | ' write_color:=ff
1756c     37 00 00 FF 
17570     1B E4 85 F1 | 	sub	objptr, ##28187
17574     F2 12 62 FC | 	wrlong	arg01, objptr
17578                 | ' write_background:=bb
17578     04 E4 05 F1 | 	add	objptr, #4
1757c     F2 26 62 FC | 	wrlong	local01, objptr
17580     45 E4 85 F1 | 	sub	objptr, #69
17584     A7 F0 03 F6 | 	mov	ptra, fp
17588     B2 00 A0 FD | 	call	#popregs_
1758c                 | _do_paper_ret
1758c     2D 00 64 FD | 	ret
17590                 | 
17590                 | ' 
17590                 | ' '-------------------- peek
17590                 | ' 
17590                 | ' sub do_peek
17590                 | _do_peek
17590     01 4A 05 F6 | 	mov	COUNT_, #1
17594     A8 00 A0 FD | 	call	#pushregs_
17598     14 F0 07 F1 | 	add	ptra, #20
1759c     A0 5F BF FD | 	call	#_pop
175a0     A7 FA 61 FC | 	wrlong	result1, fp
175a4     04 4E 05 F1 | 	add	fp, #4
175a8     A7 FC 61 FC | 	wrlong	result2, fp
175ac     04 4E 05 F1 | 	add	fp, #4
175b0     A7 FE 61 FC | 	wrlong	result3, fp
175b4     08 4E 85 F1 | 	sub	fp, #8
175b8     A7 12 02 F6 | 	mov	arg01, fp
175bc     5C 61 BF FD | 	call	#_converttoint
175c0     FD 12 02 F6 | 	mov	arg01, result1
175c4                 | ' 
175c4                 | ' t1=pop()
175c4                 | ' a=converttoint(t1)
175c4                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
175c4     00 04 00 FF 
175c8     00 12 16 F2 | 	cmp	arg01, ##524288 wc
175cc     09 27 C2 CA |  if_b	rdbyte	local01, arg01
175d0     08 00 90 CD |  if_b	jmp	#LR__1960
175d4     BC 87 B0 FD | 	call	#_pspeek
175d8     FD 26 E2 F8 | 	getbyte	local01, result1, #0
175dc                 | LR__1960
175dc     08 4E 05 F1 | 	add	fp, #8
175e0     A7 3A 68 FC | 	wrlong	#29, fp
175e4     08 4E 85 F1 | 	sub	fp, #8
175e8     A7 26 62 FC | 	wrlong	local01, fp
175ec     A7 12 02 F6 | 	mov	arg01, fp
175f0     DC 5F BF FD | 	call	#_push
175f4     A7 F0 03 F6 | 	mov	ptra, fp
175f8     B2 00 A0 FD | 	call	#popregs_
175fc                 | _do_peek_ret
175fc     2D 00 64 FD | 	ret
17600                 | 
17600                 | ' 
17600                 | ' '-------------------- pinfloat
17600                 | ' 
17600                 | ' sub do_pinfloat
17600                 | _do_pinfloat
17600     00 4A 05 F6 | 	mov	COUNT_, #0
17604     A8 00 A0 FD | 	call	#pushregs_
17608     0C F0 07 F1 | 	add	ptra, #12
1760c     30 5F BF FD | 	call	#_pop
17610     A7 FA 61 FC | 	wrlong	result1, fp
17614     04 4E 05 F1 | 	add	fp, #4
17618     A7 FC 61 FC | 	wrlong	result2, fp
1761c     04 4E 05 F1 | 	add	fp, #4
17620     A7 FE 61 FC | 	wrlong	result3, fp
17624     08 4E 85 F1 | 	sub	fp, #8
17628     A7 12 02 F6 | 	mov	arg01, fp
1762c     EC 60 BF FD | 	call	#_converttoint
17630     50 FA 61 FD | 	fltl	result1
17634     A7 F0 03 F6 | 	mov	ptra, fp
17638     B2 00 A0 FD | 	call	#popregs_
1763c                 | _do_pinfloat_ret
1763c     2D 00 64 FD | 	ret
17640                 | 
17640                 | ' 
17640                 | ' '-------------------- pinhi
17640                 | ' 
17640                 | ' sub do_pinhi
17640                 | _do_pinhi
17640     00 4A 05 F6 | 	mov	COUNT_, #0
17644     A8 00 A0 FD | 	call	#pushregs_
17648     0C F0 07 F1 | 	add	ptra, #12
1764c     F0 5E BF FD | 	call	#_pop
17650     A7 FA 61 FC | 	wrlong	result1, fp
17654     04 4E 05 F1 | 	add	fp, #4
17658     A7 FC 61 FC | 	wrlong	result2, fp
1765c     04 4E 05 F1 | 	add	fp, #4
17660     A7 FE 61 FC | 	wrlong	result3, fp
17664     08 4E 85 F1 | 	sub	fp, #8
17668     A7 12 02 F6 | 	mov	arg01, fp
1766c     AC 60 BF FD | 	call	#_converttoint
17670     59 FA 61 FD | 	drvh	result1
17674     A7 F0 03 F6 | 	mov	ptra, fp
17678     B2 00 A0 FD | 	call	#popregs_
1767c                 | _do_pinhi_ret
1767c     2D 00 64 FD | 	ret
17680                 | 
17680                 | ' 
17680                 | ' '-------------------- pinlo
17680                 | ' 
17680                 | ' sub do_pinlo
17680                 | _do_pinlo
17680     00 4A 05 F6 | 	mov	COUNT_, #0
17684     A8 00 A0 FD | 	call	#pushregs_
17688     0C F0 07 F1 | 	add	ptra, #12
1768c     B0 5E BF FD | 	call	#_pop
17690     A7 FA 61 FC | 	wrlong	result1, fp
17694     04 4E 05 F1 | 	add	fp, #4
17698     A7 FC 61 FC | 	wrlong	result2, fp
1769c     04 4E 05 F1 | 	add	fp, #4
176a0     A7 FE 61 FC | 	wrlong	result3, fp
176a4     08 4E 85 F1 | 	sub	fp, #8
176a8     A7 12 02 F6 | 	mov	arg01, fp
176ac     6C 60 BF FD | 	call	#_converttoint
176b0     58 FA 61 FD | 	drvl	result1
176b4     A7 F0 03 F6 | 	mov	ptra, fp
176b8     B2 00 A0 FD | 	call	#popregs_
176bc                 | _do_pinlo_ret
176bc     2D 00 64 FD | 	ret
176c0                 | 
176c0                 | ' 
176c0                 | ' '-------------------- pinread
176c0                 | ' 
176c0                 | ' sub do_pinread
176c0                 | _do_pinread
176c0     00 4A 05 F6 | 	mov	COUNT_, #0
176c4     A8 00 A0 FD | 	call	#pushregs_
176c8     0C F0 07 F1 | 	add	ptra, #12
176cc     70 5E BF FD | 	call	#_pop
176d0     A7 FA 61 FC | 	wrlong	result1, fp
176d4     04 4E 05 F1 | 	add	fp, #4
176d8     A7 FC 61 FC | 	wrlong	result2, fp
176dc     04 4E 05 F1 | 	add	fp, #4
176e0     A7 FE 61 FC | 	wrlong	result3, fp
176e4     08 4E 85 F1 | 	sub	fp, #8
176e8     A7 12 02 F6 | 	mov	arg01, fp
176ec     2C 60 BF FD | 	call	#_converttoint
176f0     FD 12 02 F6 | 	mov	arg01, result1
176f4     20 12 CE F7 | 	test	arg01, #32 wz
176f8     FF FB 01 56 |  if_ne	mov	result1, inb
176fc     FE FB 01 A6 |  if_e	mov	result1, ina
17700     09 FB 41 F0 | 	shr	result1, arg01
17704     06 12 46 F0 | 	shr	arg01, #6
17708     09 FB 41 F7 | 	zerox	result1, arg01
1770c     52 00 00 FF 
17710     68 E5 05 F1 | 	add	objptr, ##42344
17714     F2 FA 61 FC | 	wrlong	result1, objptr
17718     52 00 00 FF 
1771c     68 E5 85 F1 | 	sub	objptr, ##42344
17720     08 4E 05 F1 | 	add	fp, #8
17724     A7 3A 68 FC | 	wrlong	#29, fp
17728     08 4E 85 F1 | 	sub	fp, #8
1772c     A7 08 68 FC | 	wrlong	#4, fp
17730     A7 12 02 F6 | 	mov	arg01, fp
17734     98 5E BF FD | 	call	#_push
17738     A7 F0 03 F6 | 	mov	ptra, fp
1773c     B2 00 A0 FD | 	call	#popregs_
17740                 | _do_pinread_ret
17740     2D 00 64 FD | 	ret
17744                 | 
17744                 | ' 
17744                 | ' '-------------------- pinstart
17744                 | ' 
17744                 | ' sub do_pinstart
17744                 | _do_pinstart
17744     03 4A 05 F6 | 	mov	COUNT_, #3
17748     A8 00 A0 FD | 	call	#pushregs_
1774c     30 F0 07 F1 | 	add	ptra, #48
17750     EC 5D BF FD | 	call	#_pop
17754     FD 16 02 F6 | 	mov	arg03, result1
17758     FE 14 02 F6 | 	mov	arg02, result2
1775c     FF 18 02 F6 | 	mov	arg04, result3
17760     A7 16 62 FC | 	wrlong	arg03, fp
17764     04 4E 05 F1 | 	add	fp, #4
17768     A7 14 62 FC | 	wrlong	arg02, fp
1776c     04 4E 05 F1 | 	add	fp, #4
17770     A7 18 62 FC | 	wrlong	arg04, fp
17774     08 4E 85 F1 | 	sub	fp, #8
17778     C4 5D BF FD | 	call	#_pop
1777c     FD 16 02 F6 | 	mov	arg03, result1
17780     FE 14 02 F6 | 	mov	arg02, result2
17784     FF 18 02 F6 | 	mov	arg04, result3
17788     0C 4E 05 F1 | 	add	fp, #12
1778c     A7 16 62 FC | 	wrlong	arg03, fp
17790     04 4E 05 F1 | 	add	fp, #4
17794     A7 14 62 FC | 	wrlong	arg02, fp
17798     04 4E 05 F1 | 	add	fp, #4
1779c     A7 18 62 FC | 	wrlong	arg04, fp
177a0     14 4E 85 F1 | 	sub	fp, #20
177a4     98 5D BF FD | 	call	#_pop
177a8     FD 16 02 F6 | 	mov	arg03, result1
177ac     FE 14 02 F6 | 	mov	arg02, result2
177b0     FF 18 02 F6 | 	mov	arg04, result3
177b4     18 4E 05 F1 | 	add	fp, #24
177b8     A7 16 62 FC | 	wrlong	arg03, fp
177bc     04 4E 05 F1 | 	add	fp, #4
177c0     A7 14 62 FC | 	wrlong	arg02, fp
177c4     04 4E 05 F1 | 	add	fp, #4
177c8     A7 18 62 FC | 	wrlong	arg04, fp
177cc     20 4E 85 F1 | 	sub	fp, #32
177d0     6C 5D BF FD | 	call	#_pop
177d4     FF 16 02 F6 | 	mov	arg03, result3
177d8     24 4E 05 F1 | 	add	fp, #36
177dc     A7 FA 61 FC | 	wrlong	result1, fp
177e0     04 4E 05 F1 | 	add	fp, #4
177e4     A7 FC 61 FC | 	wrlong	result2, fp
177e8     04 4E 05 F1 | 	add	fp, #4
177ec     A7 16 62 FC | 	wrlong	arg03, fp
177f0     08 4E 85 F1 | 	sub	fp, #8
177f4     A7 12 02 F6 | 	mov	arg01, fp
177f8     24 4E 85 F1 | 	sub	fp, #36
177fc     1C 5F BF FD | 	call	#_converttoint
17800     FD 26 02 F6 | 	mov	local01, result1
17804     A7 12 02 F6 | 	mov	arg01, fp
17808     18 12 06 F1 | 	add	arg01, #24
1780c     0C 5F BF FD | 	call	#_converttoint
17810     FD 28 02 F6 | 	mov	local02, result1
17814     A7 12 02 F6 | 	mov	arg01, fp
17818     0C 12 06 F1 | 	add	arg01, #12
1781c     FC 5E BF FD | 	call	#_converttoint
17820     FD 2A 02 F6 | 	mov	local03, result1
17824     A7 12 02 F6 | 	mov	arg01, fp
17828     F0 5E BF FD | 	call	#_converttoint
1782c     40 26 62 FD | 	dirl	local01
17830     13 29 02 FC | 	wrpin	local02, local01
17834     13 2B 12 FC | 	wxpin	local03, local01
17838     13 FB 21 FC | 	wypin	result1, local01
1783c     41 26 62 FD | 	dirh	local01
17840     A7 F0 03 F6 | 	mov	ptra, fp
17844     B2 00 A0 FD | 	call	#popregs_
17848                 | _do_pinstart_ret
17848     2D 00 64 FD | 	ret
1784c                 | 
1784c                 | ' 
1784c                 | ' '-------------------- pintoggle
1784c                 | ' 
1784c                 | ' sub do_pintoggle
1784c                 | _do_pintoggle
1784c     00 4A 05 F6 | 	mov	COUNT_, #0
17850     A8 00 A0 FD | 	call	#pushregs_
17854     0C F0 07 F1 | 	add	ptra, #12
17858     E4 5C BF FD | 	call	#_pop
1785c     A7 FA 61 FC | 	wrlong	result1, fp
17860     04 4E 05 F1 | 	add	fp, #4
17864     A7 FC 61 FC | 	wrlong	result2, fp
17868     04 4E 05 F1 | 	add	fp, #4
1786c     A7 FE 61 FC | 	wrlong	result3, fp
17870     08 4E 85 F1 | 	sub	fp, #8
17874     A7 12 02 F6 | 	mov	arg01, fp
17878     A0 5E BF FD | 	call	#_converttoint
1787c     5F FA 61 FD | 	drvnot	result1
17880     A7 F0 03 F6 | 	mov	ptra, fp
17884     B2 00 A0 FD | 	call	#popregs_
17888                 | _do_pintoggle_ret
17888     2D 00 64 FD | 	ret
1788c                 | 
1788c                 | ' 
1788c                 | ' '-------------------- pinwrite
1788c                 | ' 
1788c                 | ' sub do_pinwrite
1788c                 | _do_pinwrite
1788c     02 4A 05 F6 | 	mov	COUNT_, #2
17890     A8 00 A0 FD | 	call	#pushregs_
17894     18 F0 07 F1 | 	add	ptra, #24
17898     A4 5C BF FD | 	call	#_pop
1789c     FD 14 02 F6 | 	mov	arg02, result1
178a0     FE 12 02 F6 | 	mov	arg01, result2
178a4     FF 26 02 F6 | 	mov	local01, result3
178a8     A7 14 62 FC | 	wrlong	arg02, fp
178ac     04 4E 05 F1 | 	add	fp, #4
178b0     A7 12 62 FC | 	wrlong	arg01, fp
178b4     04 4E 05 F1 | 	add	fp, #4
178b8     A7 26 62 FC | 	wrlong	local01, fp
178bc     08 4E 85 F1 | 	sub	fp, #8
178c0     7C 5C BF FD | 	call	#_pop
178c4     FF 26 02 F6 | 	mov	local01, result3
178c8     0C 4E 05 F1 | 	add	fp, #12
178cc     A7 FA 61 FC | 	wrlong	result1, fp
178d0     04 4E 05 F1 | 	add	fp, #4
178d4     A7 FC 61 FC | 	wrlong	result2, fp
178d8     04 4E 05 F1 | 	add	fp, #4
178dc     A7 26 62 FC | 	wrlong	local01, fp
178e0     08 4E 85 F1 | 	sub	fp, #8
178e4     A7 12 02 F6 | 	mov	arg01, fp
178e8     0C 4E 85 F1 | 	sub	fp, #12
178ec     2C 5E BF FD | 	call	#_converttoint
178f0     FD 26 02 F6 | 	mov	local01, result1
178f4     A7 12 02 F6 | 	mov	arg01, fp
178f8     20 5E BF FD | 	call	#_converttoint
178fc     13 FF 01 F6 | 	mov	result3, local01
17900     1F FE 05 F5 | 	and	result3, #31
17904     20 26 CE F7 | 	test	local01, #32 wz
17908     06 26 46 F0 | 	shr	local01, #6
1790c     13 27 CA F9 | 	bmask	local01, local01
17910     FF 26 62 F0 | 	shl	local01, result3
17914     FF FA 61 F0 | 	shl	result1, result3
17918     13 F7 43 55 |  if_ne	or	dirb, local01
1791c     FD 29 02 56 |  if_ne	mov	local02, outb
17920     13 29 22 55 |  if_ne	andn	local02, local01
17924     13 FB 01 55 |  if_ne	and	result1, local01
17928     FD 28 42 55 |  if_ne	or	local02, result1
1792c     14 FB 03 56 |  if_ne	mov	outb, local02
17930     13 F5 43 A5 |  if_e	or	dira, local01
17934     FC 29 02 A6 |  if_e	mov	local02, outa
17938     13 29 22 A5 |  if_e	andn	local02, local01
1793c     13 FB 01 A5 |  if_e	and	result1, local01
17940     FD 28 42 A5 |  if_e	or	local02, result1
17944     14 F9 03 A6 |  if_e	mov	outa, local02
17948     A7 F0 03 F6 | 	mov	ptra, fp
1794c     B2 00 A0 FD | 	call	#popregs_
17950                 | _do_pinwrite_ret
17950     2D 00 64 FD | 	ret
17954                 | 
17954                 | ' 
17954                 | ' '-------------------- play
17954                 | ' 
17954                 | ' sub do_play
17954                 | _do_play
17954     16 4A 05 F6 | 	mov	COUNT_, #22
17958     A8 00 A0 FD | 	call	#pushregs_
1795c     84 F0 07 F1 | 	add	ptra, #132
17960     77 CC 21 FF 
17964     BE 27 06 F6 | 	mov	local01, ##1134096318
17968                 | ' speed_coeff=305.873
17968                 | ' 
17968                 | ' for i=0 to 9 : params(i)=-2.0 : next i
17968     00 28 06 F6 | 	mov	local02, #0
1796c     3C 4E 05 F1 | 	add	fp, #60
17970     97 10 48 FB | 	callpa	#(@LR__1971-@LR__1970)>>2,fcache_load_ptr_
17974                 | LR__1970
17974     14 2B 02 F6 | 	mov	local03, local02
17978     02 2A 66 F0 | 	shl	local03, #2
1797c     A7 2A 02 F1 | 	add	local03, fp
17980     00 00 E0 FF 
17984     15 01 68 FC | 	wrlong	##-1073741824, local03
17988     01 28 06 F1 | 	add	local02, #1
1798c     0A 28 56 F2 | 	cmps	local02, #10 wc
17990     E0 FF 9F CD |  if_b	jmp	#LR__1970
17994                 | LR__1971
17994     3C 4E 85 F1 | 	sub	fp, #60
17998     4A 00 00 FF 
1799c     A0 E4 05 F1 | 	add	objptr, ##38048
179a0     F2 28 02 FB | 	rdlong	local02, objptr
179a4     14 2D 02 F6 | 	mov	local04, local02
179a8     01 2C 66 F0 | 	shl	local04, #1
179ac     14 2D 02 F1 | 	add	local04, local02
179b0     02 2C 66 F0 | 	shl	local04, #2
179b4     03 00 00 FF 
179b8     04 E4 85 F1 | 	sub	objptr, ##1540
179bc     F2 2C 02 F1 | 	add	local04, objptr
179c0     16 2F 02 FB | 	rdlong	local05, local04
179c4                 | ' numpar=compiledline(lineptr_e).result.uresult
179c4                 | ' for i=numpar to 1 step -1 
179c4     17 29 02 F6 | 	mov	local02, local05
179c8     47 00 00 FF 
179cc     9C E4 85 F1 | 	sub	objptr, ##36508
179d0                 | LR__1972
179d0     6C 5B BF FD | 	call	#_pop
179d4     64 4E 05 F1 | 	add	fp, #100
179d8     A7 FA 61 FC | 	wrlong	result1, fp
179dc     04 4E 05 F1 | 	add	fp, #4
179e0     A7 FC 61 FC | 	wrlong	result2, fp
179e4     04 4E 05 F1 | 	add	fp, #4
179e8     A7 FE 61 FC | 	wrlong	result3, fp
179ec     14 2B 02 F6 | 	mov	local03, local02
179f0     01 2A 86 F1 | 	sub	local03, #1
179f4     02 2A 66 F0 | 	shl	local03, #2
179f8     30 4E 85 F1 | 	sub	fp, #48
179fc     A7 30 02 F6 | 	mov	local06, fp
17a00     A7 2A 02 F1 | 	add	local03, fp
17a04     28 4E 05 F1 | 	add	fp, #40
17a08     A7 32 02 F6 | 	mov	local07, fp
17a0c     19 13 02 F6 | 	mov	arg01, local07
17a10     64 4E 85 F1 | 	sub	fp, #100
17a14     C0 5D BF FD | 	call	#_converttofloat
17a18     15 FB 61 FC | 	wrlong	result1, local03
17a1c     01 28 86 F1 | 	sub	local02, #1
17a20     01 28 56 F2 | 	cmps	local02, #1 wc
17a24     A8 FF 9F 3D |  if_ae	jmp	#LR__1972
17a28                 | ' 
17a28                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17a28     3C 4E 05 F1 | 	add	fp, #60
17a2c     A7 12 02 FB | 	rdlong	arg01, fp
17a30     3C 4E 85 F1 | 	sub	fp, #60
17a34     00 14 06 F6 | 	mov	arg02, #0
17a38     01 16 06 F6 | 	mov	arg03, #1
17a3c     38 F9 B0 FD | 	call	#__system___float_cmp
17a40     00 FA 55 F2 | 	cmps	result1, #0 wc
17a44     00 34 06 C6 |  if_b	mov	local08, #0
17a48     20 00 90 CD |  if_b	jmp	#LR__1973
17a4c     3C 4E 05 F1 | 	add	fp, #60
17a50     A7 12 02 FB | 	rdlong	arg01, fp
17a54     3C 4E 85 F1 | 	sub	fp, #60
17a58     01 14 06 F6 | 	mov	arg02, #1
17a5c     A0 F9 B0 FD | 	call	#__system___float_tointeger
17a60     FD 34 52 F6 | 	abs	local08, result1 wc
17a64     07 34 06 F5 | 	and	local08, #7
17a68     1A 35 82 F6 | 	negc	local08, local08
17a6c                 | LR__1973
17a6c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
17a6c     40 4E 05 F1 | 	add	fp, #64
17a70     A7 12 02 FB | 	rdlong	arg01, fp
17a74     40 4E 85 F1 | 	sub	fp, #64
17a78     00 14 06 F6 | 	mov	arg02, #0
17a7c     01 16 06 F6 | 	mov	arg03, #1
17a80     F4 F8 B0 FD | 	call	#__system___float_cmp
17a84     00 FA 55 F2 | 	cmps	result1, #0 wc
17a88     1A 31 02 C6 |  if_b	mov	local06, local08
17a8c     03 30 66 C0 |  if_b	shl	local06, #3
17a90     1A 31 82 C1 |  if_b	sub	local06, local08
17a94     02 30 66 C0 |  if_b	shl	local06, #2
17a98     F2 2C 02 C6 |  if_b	mov	local04, objptr
17a9c     14 00 00 CF 
17aa0     38 2D 06 C1 |  if_b	add	local04, ##10552
17aa4     16 31 02 C1 |  if_b	add	local06, local04
17aa8     18 37 02 CB |  if_b	rdlong	local09, local06
17aac     30 00 90 CD |  if_b	jmp	#LR__1974
17ab0     40 4E 05 F1 | 	add	fp, #64
17ab4     A7 36 02 FB | 	rdlong	local09, fp
17ab8     40 4E 85 F1 | 	sub	fp, #64
17abc     1A 31 02 F6 | 	mov	local06, local08
17ac0     03 30 66 F0 | 	shl	local06, #3
17ac4     1A 31 82 F1 | 	sub	local06, local08
17ac8     02 30 66 F0 | 	shl	local06, #2
17acc     F2 2C 02 F6 | 	mov	local04, objptr
17ad0     14 00 00 FF 
17ad4     38 2D 06 F1 | 	add	local04, ##10552
17ad8     16 31 02 F1 | 	add	local06, local04
17adc     18 37 62 FC | 	wrlong	local09, local06
17ae0                 | LR__1974
17ae0                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17ae0     44 4E 05 F1 | 	add	fp, #68
17ae4     A7 12 02 FB | 	rdlong	arg01, fp
17ae8     44 4E 85 F1 | 	sub	fp, #68
17aec     00 14 06 F6 | 	mov	arg02, #0
17af0     01 16 06 F6 | 	mov	arg03, #1
17af4     80 F8 B0 FD | 	call	#__system___float_cmp
17af8     00 FA 55 F2 | 	cmps	result1, #0 wc
17afc     24 00 90 CD |  if_b	jmp	#LR__1975
17b00     44 4E 05 F1 | 	add	fp, #68
17b04     A7 12 02 FB | 	rdlong	arg01, fp
17b08     44 4E 85 F1 | 	sub	fp, #68
17b0c     20 0E 23 FF 
17b10     00 14 06 F6 | 	mov	arg02, ##1176256512
17b14     01 16 66 F6 | 	neg	arg03, #1
17b18     5C F8 B0 FD | 	call	#__system___float_cmp
17b1c     01 FA 55 F2 | 	cmps	result1, #1 wc
17b20     30 00 90 CD |  if_b	jmp	#LR__1976
17b24                 | LR__1975
17b24     1A 2D 02 F6 | 	mov	local04, local08
17b28     03 2C 66 F0 | 	shl	local04, #3
17b2c     1A 2D 82 F1 | 	sub	local04, local08
17b30     02 2C 66 F0 | 	shl	local04, #2
17b34     F2 32 02 F6 | 	mov	local07, objptr
17b38     14 00 00 FF 
17b3c     38 33 06 F1 | 	add	local07, ##10552
17b40     19 2D 02 F1 | 	add	local04, local07
17b44     06 2C 06 F1 | 	add	local04, #6
17b48     16 39 E2 FA | 	rdword	local10, local04
17b4c     1C 3B 32 F9 | 	getword	local11, local10, #0
17b50     40 00 90 FD | 	jmp	#LR__1977
17b54                 | LR__1976
17b54     44 4E 05 F1 | 	add	fp, #68
17b58     A7 12 02 FB | 	rdlong	arg01, fp
17b5c     44 4E 85 F1 | 	sub	fp, #68
17b60     01 14 06 F6 | 	mov	arg02, #1
17b64     98 F8 B0 FD | 	call	#__system___float_tointeger
17b68     FD 3A 02 F6 | 	mov	local11, result1
17b6c     1A 31 02 F6 | 	mov	local06, local08
17b70     03 30 66 F0 | 	shl	local06, #3
17b74     1A 31 82 F1 | 	sub	local06, local08
17b78     02 30 66 F0 | 	shl	local06, #2
17b7c     F2 2C 02 F6 | 	mov	local04, objptr
17b80     14 00 00 FF 
17b84     38 2D 06 F1 | 	add	local04, ##10552
17b88     16 31 02 F1 | 	add	local06, local04
17b8c     06 30 06 F1 | 	add	local06, #6
17b90     18 3B 52 FC | 	wrword	local11, local06
17b94                 | LR__1977
17b94                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17b94     48 4E 05 F1 | 	add	fp, #72
17b98     A7 12 02 FB | 	rdlong	arg01, fp
17b9c     48 4E 85 F1 | 	sub	fp, #72
17ba0     00 14 06 F6 | 	mov	arg02, #0
17ba4     01 16 06 F6 | 	mov	arg03, #1
17ba8     CC F7 B0 FD | 	call	#__system___float_cmp
17bac     00 FA 55 F2 | 	cmps	result1, #0 wc
17bb0     24 00 90 CD |  if_b	jmp	#LR__1978
17bb4     48 4E 05 F1 | 	add	fp, #72
17bb8     A7 12 02 FB | 	rdlong	arg01, fp
17bbc     48 4E 85 F1 | 	sub	fp, #72
17bc0     89 C1 20 FF 
17bc4     6F 14 06 F6 | 	mov	arg02, ##1099108975
17bc8     01 16 66 F6 | 	neg	arg03, #1
17bcc     A8 F7 B0 FD | 	call	#__system___float_cmp
17bd0     01 FA 55 F2 | 	cmps	result1, #1 wc
17bd4     30 00 90 CD |  if_b	jmp	#LR__1979
17bd8                 | LR__1978
17bd8     1A 31 02 F6 | 	mov	local06, local08
17bdc     03 30 66 F0 | 	shl	local06, #3
17be0     1A 31 82 F1 | 	sub	local06, local08
17be4     02 30 66 F0 | 	shl	local06, #2
17be8     F2 2C 02 F6 | 	mov	local04, objptr
17bec     14 00 00 FF 
17bf0     38 2D 06 F1 | 	add	local04, ##10552
17bf4     16 31 02 F1 | 	add	local06, local04
17bf8     0C 30 06 F1 | 	add	local06, #12
17bfc     18 33 02 FB | 	rdlong	local07, local06
17c00     19 3D 02 F6 | 	mov	local12, local07
17c04     34 00 90 FD | 	jmp	#LR__1980
17c08                 | LR__1979
17c08     48 4E 05 F1 | 	add	fp, #72
17c0c     A7 3C 02 FB | 	rdlong	local12, fp
17c10     48 4E 85 F1 | 	sub	fp, #72
17c14     1A 31 02 F6 | 	mov	local06, local08
17c18     03 30 66 F0 | 	shl	local06, #3
17c1c     1A 31 82 F1 | 	sub	local06, local08
17c20     02 30 66 F0 | 	shl	local06, #2
17c24     F2 2C 02 F6 | 	mov	local04, objptr
17c28     14 00 00 FF 
17c2c     38 2D 06 F1 | 	add	local04, ##10552
17c30     16 31 02 F1 | 	add	local06, local04
17c34     0C 30 06 F1 | 	add	local06, #12
17c38     18 3D 62 FC | 	wrlong	local12, local06
17c3c                 | LR__1980
17c3c                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17c3c     4C 4E 05 F1 | 	add	fp, #76
17c40     A7 12 02 FB | 	rdlong	arg01, fp
17c44     4C 4E 85 F1 | 	sub	fp, #76
17c48     00 14 06 F6 | 	mov	arg02, #0
17c4c     01 16 06 F6 | 	mov	arg03, #1
17c50     24 F7 B0 FD | 	call	#__system___float_cmp
17c54     00 FA 55 F2 | 	cmps	result1, #0 wc
17c58     24 00 90 CD |  if_b	jmp	#LR__1981
17c5c     4C 4E 05 F1 | 	add	fp, #76
17c60     A7 12 02 FB | 	rdlong	arg01, fp
17c64     4C 4E 85 F1 | 	sub	fp, #76
17c68     00 00 21 FF 
17c6c     00 14 06 F6 | 	mov	arg02, ##1107296256
17c70     01 16 66 F6 | 	neg	arg03, #1
17c74     00 F7 B0 FD | 	call	#__system___float_cmp
17c78     01 FA 55 F2 | 	cmps	result1, #1 wc
17c7c     30 00 90 CD |  if_b	jmp	#LR__1982
17c80                 | LR__1981
17c80     1A 2D 02 F6 | 	mov	local04, local08
17c84     03 2C 66 F0 | 	shl	local04, #3
17c88     1A 2D 82 F1 | 	sub	local04, local08
17c8c     02 2C 66 F0 | 	shl	local04, #2
17c90     F2 32 02 F6 | 	mov	local07, objptr
17c94     14 00 00 FF 
17c98     38 33 06 F1 | 	add	local07, ##10552
17c9c     19 2D 02 F1 | 	add	local04, local07
17ca0     04 2C 06 F1 | 	add	local04, #4
17ca4     16 39 C2 FA | 	rdbyte	local10, local04
17ca8     1C 3F E2 F8 | 	getbyte	local13, local10, #0
17cac     40 00 90 FD | 	jmp	#LR__1983
17cb0                 | LR__1982
17cb0     4C 4E 05 F1 | 	add	fp, #76
17cb4     A7 12 02 FB | 	rdlong	arg01, fp
17cb8     4C 4E 85 F1 | 	sub	fp, #76
17cbc     01 14 06 F6 | 	mov	arg02, #1
17cc0     3C F7 B0 FD | 	call	#__system___float_tointeger
17cc4     FD 3E 02 F6 | 	mov	local13, result1
17cc8     1A 31 02 F6 | 	mov	local06, local08
17ccc     03 30 66 F0 | 	shl	local06, #3
17cd0     1A 31 82 F1 | 	sub	local06, local08
17cd4     02 30 66 F0 | 	shl	local06, #2
17cd8     F2 2C 02 F6 | 	mov	local04, objptr
17cdc     14 00 00 FF 
17ce0     38 2D 06 F1 | 	add	local04, ##10552
17ce4     16 31 02 F1 | 	add	local06, local04
17ce8     04 30 06 F1 | 	add	local06, #4
17cec     18 3F 42 FC | 	wrbyte	local13, local06
17cf0                 | LR__1983
17cf0                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17cf0     50 4E 05 F1 | 	add	fp, #80
17cf4     A7 12 02 FB | 	rdlong	arg01, fp
17cf8     50 4E 85 F1 | 	sub	fp, #80
17cfc     00 14 06 F6 | 	mov	arg02, #0
17d00     01 16 06 F6 | 	mov	arg03, #1
17d04     70 F6 B0 FD | 	call	#__system___float_cmp
17d08     00 FA 55 F2 | 	cmps	result1, #0 wc
17d0c     24 00 90 CD |  if_b	jmp	#LR__1984
17d10     50 4E 05 F1 | 	add	fp, #80
17d14     A7 12 02 FB | 	rdlong	arg01, fp
17d18     50 4E 85 F1 | 	sub	fp, #80
17d1c     00 80 20 FF 
17d20     00 14 06 F6 | 	mov	arg02, ##1090519040
17d24     01 16 66 F6 | 	neg	arg03, #1
17d28     4C F6 B0 FD | 	call	#__system___float_cmp
17d2c     01 FA 55 F2 | 	cmps	result1, #1 wc
17d30     30 00 90 CD |  if_b	jmp	#LR__1985
17d34                 | LR__1984
17d34     1A 2D 02 F6 | 	mov	local04, local08
17d38     03 2C 66 F0 | 	shl	local04, #3
17d3c     1A 2D 82 F1 | 	sub	local04, local08
17d40     02 2C 66 F0 | 	shl	local04, #2
17d44     F2 32 02 F6 | 	mov	local07, objptr
17d48     14 00 00 FF 
17d4c     38 33 06 F1 | 	add	local07, ##10552
17d50     19 2D 02 F1 | 	add	local04, local07
17d54     05 2C 06 F1 | 	add	local04, #5
17d58     16 39 C2 FA | 	rdbyte	local10, local04
17d5c     1C 41 E2 F8 | 	getbyte	local14, local10, #0
17d60     40 00 90 FD | 	jmp	#LR__1986
17d64                 | LR__1985
17d64     50 4E 05 F1 | 	add	fp, #80
17d68     A7 12 02 FB | 	rdlong	arg01, fp
17d6c     50 4E 85 F1 | 	sub	fp, #80
17d70     01 14 06 F6 | 	mov	arg02, #1
17d74     88 F6 B0 FD | 	call	#__system___float_tointeger
17d78     FD 40 02 F6 | 	mov	local14, result1
17d7c     1A 31 02 F6 | 	mov	local06, local08
17d80     03 30 66 F0 | 	shl	local06, #3
17d84     1A 31 82 F1 | 	sub	local06, local08
17d88     02 30 66 F0 | 	shl	local06, #2
17d8c     F2 2C 02 F6 | 	mov	local04, objptr
17d90     14 00 00 FF 
17d94     38 2D 06 F1 | 	add	local04, ##10552
17d98     16 31 02 F1 | 	add	local06, local04
17d9c     05 30 06 F1 | 	add	local06, #5
17da0     18 41 42 FC | 	wrbyte	local14, local06
17da4                 | LR__1986
17da4                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
17da4     54 4E 05 F1 | 	add	fp, #84
17da8     A7 12 02 FB | 	rdlong	arg01, fp
17dac     54 4E 85 F1 | 	sub	fp, #84
17db0     00 14 06 F6 | 	mov	arg02, #0
17db4     01 16 06 F6 | 	mov	arg03, #1
17db8     BC F5 B0 FD | 	call	#__system___float_cmp
17dbc     00 FA 55 F2 | 	cmps	result1, #0 wc
17dc0     24 00 90 CD |  if_b	jmp	#LR__1987
17dc4     54 4E 05 F1 | 	add	fp, #84
17dc8     A7 12 02 FB | 	rdlong	arg01, fp
17dcc     54 4E 85 F1 | 	sub	fp, #84
17dd0     00 3D 22 FF 
17dd4     00 14 06 F6 | 	mov	arg02, ##1148846080
17dd8     01 16 66 F6 | 	neg	arg03, #1
17ddc     98 F5 B0 FD | 	call	#__system___float_cmp
17de0     01 FA 55 F2 | 	cmps	result1, #1 wc
17de4     2C 00 90 CD |  if_b	jmp	#LR__1988
17de8                 | LR__1987
17de8     1A 31 02 F6 | 	mov	local06, local08
17dec     03 30 66 F0 | 	shl	local06, #3
17df0     1A 31 82 F1 | 	sub	local06, local08
17df4     02 30 66 F0 | 	shl	local06, #2
17df8     F2 2C 02 F6 | 	mov	local04, objptr
17dfc     14 00 00 FF 
17e00     38 2D 06 F1 | 	add	local04, ##10552
17e04     16 31 02 F1 | 	add	local06, local04
17e08     08 30 06 F1 | 	add	local06, #8
17e0c     18 43 02 FB | 	rdlong	local15, local06
17e10     34 00 90 FD | 	jmp	#LR__1989
17e14                 | LR__1988
17e14     54 4E 05 F1 | 	add	fp, #84
17e18     A7 42 02 FB | 	rdlong	local15, fp
17e1c     54 4E 85 F1 | 	sub	fp, #84
17e20     1A 31 02 F6 | 	mov	local06, local08
17e24     03 30 66 F0 | 	shl	local06, #3
17e28     1A 31 82 F1 | 	sub	local06, local08
17e2c     02 30 66 F0 | 	shl	local06, #2
17e30     F2 2C 02 F6 | 	mov	local04, objptr
17e34     14 00 00 FF 
17e38     38 2D 06 F1 | 	add	local04, ##10552
17e3c     16 31 02 F1 | 	add	local06, local04
17e40     08 30 06 F1 | 	add	local06, #8
17e44     18 43 62 FC | 	wrlong	local15, local06
17e48                 | LR__1989
17e48                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
17e48     58 4E 05 F1 | 	add	fp, #88
17e4c     A7 12 02 FB | 	rdlong	arg01, fp
17e50     58 4E 85 F1 | 	sub	fp, #88
17e54     00 C0 5F FF 
17e58     00 14 06 F6 | 	mov	arg02, ##-1082130432
17e5c     01 16 06 F6 | 	mov	arg03, #1
17e60     14 F5 B0 FD | 	call	#__system___float_cmp
17e64     00 FA 55 F2 | 	cmps	result1, #0 wc
17e68     24 00 90 CD |  if_b	jmp	#LR__1990
17e6c     58 4E 05 F1 | 	add	fp, #88
17e70     A7 12 02 FB | 	rdlong	arg01, fp
17e74     58 4E 85 F1 | 	sub	fp, #88
17e78     00 C0 1F FF 
17e7c     00 14 06 F6 | 	mov	arg02, ##1065353216
17e80     01 16 66 F6 | 	neg	arg03, #1
17e84     F0 F4 B0 FD | 	call	#__system___float_cmp
17e88     01 FA 55 F2 | 	cmps	result1, #1 wc
17e8c     2C 00 90 CD |  if_b	jmp	#LR__1991
17e90                 | LR__1990
17e90     1A 31 02 F6 | 	mov	local06, local08
17e94     03 30 66 F0 | 	shl	local06, #3
17e98     1A 31 82 F1 | 	sub	local06, local08
17e9c     02 30 66 F0 | 	shl	local06, #2
17ea0     F2 2C 02 F6 | 	mov	local04, objptr
17ea4     14 00 00 FF 
17ea8     38 2D 06 F1 | 	add	local04, ##10552
17eac     16 31 02 F1 | 	add	local06, local04
17eb0     10 30 06 F1 | 	add	local06, #16
17eb4     18 45 02 FB | 	rdlong	local16, local06
17eb8     34 00 90 FD | 	jmp	#LR__1992
17ebc                 | LR__1991
17ebc     58 4E 05 F1 | 	add	fp, #88
17ec0     A7 44 02 FB | 	rdlong	local16, fp
17ec4     58 4E 85 F1 | 	sub	fp, #88
17ec8     1A 31 02 F6 | 	mov	local06, local08
17ecc     03 30 66 F0 | 	shl	local06, #3
17ed0     1A 31 82 F1 | 	sub	local06, local08
17ed4     02 30 66 F0 | 	shl	local06, #2
17ed8     F2 2C 02 F6 | 	mov	local04, objptr
17edc     14 00 00 FF 
17ee0     38 2D 06 F1 | 	add	local04, ##10552
17ee4     16 31 02 F1 | 	add	local06, local04
17ee8     10 30 06 F1 | 	add	local06, #16
17eec     18 45 62 FC | 	wrlong	local16, local06
17ef0                 | LR__1992
17ef0                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17ef0     5C 4E 05 F1 | 	add	fp, #92
17ef4     A7 12 02 FB | 	rdlong	arg01, fp
17ef8     5C 4E 85 F1 | 	sub	fp, #92
17efc     00 14 06 F6 | 	mov	arg02, #0
17f00     01 16 06 F6 | 	mov	arg03, #1
17f04     70 F4 B0 FD | 	call	#__system___float_cmp
17f08     00 FA 55 F2 | 	cmps	result1, #0 wc
17f0c     24 00 90 CD |  if_b	jmp	#LR__1993
17f10     5C 4E 05 F1 | 	add	fp, #92
17f14     A7 12 02 FB | 	rdlong	arg01, fp
17f18     5C 4E 85 F1 | 	sub	fp, #92
17f1c     80 BF 21 FF 
17f20     00 14 06 F6 | 	mov	arg02, ##1132396544
17f24     01 16 66 F6 | 	neg	arg03, #1
17f28     4C F4 B0 FD | 	call	#__system___float_cmp
17f2c     01 FA 55 F2 | 	cmps	result1, #1 wc
17f30     2C 00 90 CD |  if_b	jmp	#LR__1994
17f34                 | LR__1993
17f34     1A 2D 02 F6 | 	mov	local04, local08
17f38     03 2C 66 F0 | 	shl	local04, #3
17f3c     1A 2D 82 F1 | 	sub	local04, local08
17f40     02 2C 66 F0 | 	shl	local04, #2
17f44     F2 32 02 F6 | 	mov	local07, objptr
17f48     14 00 00 FF 
17f4c     38 33 06 F1 | 	add	local07, ##10552
17f50     19 2D 02 F1 | 	add	local04, local07
17f54     14 2C 06 F1 | 	add	local04, #20
17f58     16 47 E2 FA | 	rdword	local17, local04
17f5c     40 00 90 FD | 	jmp	#LR__1995
17f60                 | LR__1994
17f60     5C 4E 05 F1 | 	add	fp, #92
17f64     A7 12 02 FB | 	rdlong	arg01, fp
17f68     5C 4E 85 F1 | 	sub	fp, #92
17f6c     01 14 06 F6 | 	mov	arg02, #1
17f70     8C F4 B0 FD | 	call	#__system___float_tointeger
17f74     FD 46 02 F6 | 	mov	local17, result1
17f78     1A 31 02 F6 | 	mov	local06, local08
17f7c     03 30 66 F0 | 	shl	local06, #3
17f80     1A 31 82 F1 | 	sub	local06, local08
17f84     02 30 66 F0 | 	shl	local06, #2
17f88     F2 2C 02 F6 | 	mov	local04, objptr
17f8c     14 00 00 FF 
17f90     38 2D 06 F1 | 	add	local04, ##10552
17f94     16 31 02 F1 | 	add	local06, local04
17f98     14 30 06 F1 | 	add	local06, #20
17f9c     18 47 52 FC | 	wrword	local17, local06
17fa0                 | LR__1995
17fa0                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
17fa0     60 4E 05 F1 | 	add	fp, #96
17fa4     A7 12 02 FB | 	rdlong	arg01, fp
17fa8     60 4E 85 F1 | 	sub	fp, #96
17fac     00 14 06 F6 | 	mov	arg02, #0
17fb0     01 16 06 F6 | 	mov	arg03, #1
17fb4     C0 F3 B0 FD | 	call	#__system___float_cmp
17fb8     00 FA 55 F2 | 	cmps	result1, #0 wc
17fbc     24 00 90 CD |  if_b	jmp	#LR__1996
17fc0     5C 4E 05 F1 | 	add	fp, #92
17fc4     A7 12 02 FB | 	rdlong	arg01, fp
17fc8     5C 4E 85 F1 | 	sub	fp, #92
17fcc     80 BF 21 FF 
17fd0     00 14 06 F6 | 	mov	arg02, ##1132396544
17fd4     01 16 66 F6 | 	neg	arg03, #1
17fd8     9C F3 B0 FD | 	call	#__system___float_cmp
17fdc     01 FA 55 F2 | 	cmps	result1, #1 wc
17fe0     2C 00 90 CD |  if_b	jmp	#LR__1997
17fe4                 | LR__1996
17fe4     1A 2D 02 F6 | 	mov	local04, local08
17fe8     03 2C 66 F0 | 	shl	local04, #3
17fec     1A 2D 82 F1 | 	sub	local04, local08
17ff0     02 2C 66 F0 | 	shl	local04, #2
17ff4     F2 32 02 F6 | 	mov	local07, objptr
17ff8     14 00 00 FF 
17ffc     38 33 06 F1 | 	add	local07, ##10552
18000     19 2D 02 F1 | 	add	local04, local07
18004     16 2C 06 F1 | 	add	local04, #22
18008     16 49 E2 FA | 	rdword	local18, local04
1800c     40 00 90 FD | 	jmp	#LR__1998
18010                 | LR__1997
18010     60 4E 05 F1 | 	add	fp, #96
18014     A7 12 02 FB | 	rdlong	arg01, fp
18018     60 4E 85 F1 | 	sub	fp, #96
1801c     01 14 06 F6 | 	mov	arg02, #1
18020     DC F3 B0 FD | 	call	#__system___float_tointeger
18024     FD 48 02 F6 | 	mov	local18, result1
18028     1A 31 02 F6 | 	mov	local06, local08
1802c     03 30 66 F0 | 	shl	local06, #3
18030     1A 31 82 F1 | 	sub	local06, local08
18034     02 30 66 F0 | 	shl	local06, #2
18038     F2 2C 02 F6 | 	mov	local04, objptr
1803c     14 00 00 FF 
18040     38 2D 06 F1 | 	add	local04, ##10552
18044     16 31 02 F1 | 	add	local06, local04
18048     16 30 06 F1 | 	add	local06, #22
1804c     18 49 52 FC | 	wrword	local18, local06
18050                 | LR__1998
18050                 | ' 
18050                 | ' 
18050                 | ' if amode>0 then
18050     01 48 56 F2 | 	cmps	local18, #1 wc
18054     AC 01 90 CD |  if_b	jmp	#LR__2001
18058     1B 15 02 F6 | 	mov	arg02, local09
1805c     FC 16 20 FF 
18060     54 12 06 F6 | 	mov	arg01, ##1076754516
18064     B0 FD B0 FD | 	call	#__system____builtin_logbase
18068     FD 38 02 F6 | 	mov	local10, result1
1806c     1E 14 C6 F9 | 	decod	arg02, #30
18070     FC 16 20 FF 
18074     54 12 06 F6 | 	mov	arg01, ##1076754516
18078     9C FD B0 FD | 	call	#__system____builtin_logbase
1807c     FD 14 02 F6 | 	mov	arg02, result1
18080     1C 13 02 F6 | 	mov	arg01, local10
18084     E0 F0 B0 FD | 	call	#__system___float_div
18088     FD 12 02 F6 | 	mov	arg01, result1
1808c     00 14 06 F6 | 	mov	arg02, #0
18090     6C F3 B0 FD | 	call	#__system___float_tointeger
18094     FD 4A 02 F6 | 	mov	local19, result1
18098     1E 28 C6 F9 | 	decod	local02, #30
1809c     25 13 02 F6 | 	mov	arg01, local19
180a0     24 13 02 F1 | 	add	arg01, local18
180a4     09 13 52 F6 | 	abs	arg01, arg01 wc
180a8     1F 4C C6 C9 |  if_b	decod	local20, #31
180ac     00 4C 06 36 |  if_ae	mov	local20, #0
180b0     C0 EA B0 FD | 	call	#__system___float_fromuns
180b4     26 FB 61 F5 | 	xor	result1, local20
180b8     FD 14 02 F6 | 	mov	arg02, result1
180bc     14 13 02 F6 | 	mov	arg01, local02
180c0     8C FC B0 FD | 	call	#__system____builtin_powf
180c4     FD 12 02 F6 | 	mov	arg01, result1
180c8     01 14 06 F6 | 	mov	arg02, #1
180cc     30 F3 B0 FD | 	call	#__system___float_tointeger
180d0     FD 4E 02 F6 | 	mov	local21, result1
180d4                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
180d4                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
180d4     40 00 00 FF 
180d8     01 4E 56 F2 | 	cmps	local21, ##32769 wc
180dc     14 00 90 CD |  if_b	jmp	#LR__1999
180e0     27 29 52 F6 | 	abs	local02, local21 wc
180e4     0F 28 46 F0 | 	shr	local02, #15
180e8     14 29 82 F6 | 	negc	local02, local02
180ec     0F 4E C6 F9 | 	decod	local21, #15
180f0     04 00 90 FD | 	jmp	#LR__2000
180f4                 | LR__1999
180f4     01 28 06 F6 | 	mov	local02, #1
180f8                 | LR__2000
180f8     AA 2B 25 FF 
180fc     00 13 06 F6 | 	mov	arg01, ##1247237376
18100     1B 15 02 F6 | 	mov	arg02, local09
18104     60 F0 B0 FD | 	call	#__system___float_div
18108     FD 38 02 F6 | 	mov	local10, result1
1810c     14 13 52 F6 | 	abs	arg01, local02 wc
18110     1F 4C C6 C9 |  if_b	decod	local20, #31
18114     00 4C 06 36 |  if_ae	mov	local20, #0
18118     58 EA B0 FD | 	call	#__system___float_fromuns
1811c     26 FB 61 F5 | 	xor	result1, local20
18120     FD 2A 02 F6 | 	mov	local03, result1
18124     1E 30 C6 F9 | 	decod	local06, #30
18128     12 12 06 F6 | 	mov	arg01, #18
1812c     24 13 82 F1 | 	sub	arg01, local18
18130     25 13 82 F1 | 	sub	arg01, local19
18134     09 13 52 F6 | 	abs	arg01, arg01 wc
18138     1F 4C C6 C9 |  if_b	decod	local20, #31
1813c     00 4C 06 36 |  if_ae	mov	local20, #0
18140     30 EA B0 FD | 	call	#__system___float_fromuns
18144     26 FB 61 F5 | 	xor	result1, local20
18148     FD 14 02 F6 | 	mov	arg02, result1
1814c     18 13 02 F6 | 	mov	arg01, local06
18150     FC FB B0 FD | 	call	#__system____builtin_powf
18154     FD 14 02 F6 | 	mov	arg02, result1
18158     15 13 02 F6 | 	mov	arg01, local03
1815c     14 EE B0 FD | 	call	#__system___float_mul
18160     FD 14 02 F6 | 	mov	arg02, result1
18164     1C 13 02 F6 | 	mov	arg01, local10
18168     FC EF B0 FD | 	call	#__system___float_div
1816c     FD 12 02 F6 | 	mov	arg01, result1
18170     01 14 06 F6 | 	mov	arg02, #1
18174     88 F2 B0 FD | 	call	#__system___float_tointeger
18178     FD 50 02 F6 | 	mov	local22, result1
1817c     1A 31 02 F6 | 	mov	local06, local08
18180     03 30 66 F0 | 	shl	local06, #3
18184     1A 31 82 F1 | 	sub	local06, local08
18188     02 30 66 F0 | 	shl	local06, #2
1818c     F2 2C 02 F6 | 	mov	local04, objptr
18190     14 00 00 FF 
18194     38 2D 06 F1 | 	add	local04, ##10552
18198     16 31 02 F1 | 	add	local06, local04
1819c     AA 2B 25 FF 
181a0     00 33 06 F6 | 	mov	local07, ##1247237376
181a4     28 13 52 F6 | 	abs	arg01, local22 wc
181a8     1F 4C C6 C9 |  if_b	decod	local20, #31
181ac     00 4C 06 36 |  if_ae	mov	local20, #0
181b0     C0 E9 B0 FD | 	call	#__system___float_fromuns
181b4     26 FB 61 F5 | 	xor	result1, local20
181b8     FD 14 02 F6 | 	mov	arg02, result1
181bc     19 13 02 F6 | 	mov	arg01, local07
181c0     A4 EF B0 FD | 	call	#__system___float_div
181c4     FD 32 02 F6 | 	mov	local07, result1
181c8     27 13 52 F6 | 	abs	arg01, local21 wc
181cc     1F 4C C6 C9 |  if_b	decod	local20, #31
181d0     00 4C 06 36 |  if_ae	mov	local20, #0
181d4     9C E9 B0 FD | 	call	#__system___float_fromuns
181d8     26 FB 61 F5 | 	xor	result1, local20
181dc     FD 12 02 F6 | 	mov	arg01, result1
181e0     00 40 24 FF 
181e4     00 14 06 F6 | 	mov	arg02, ##1216348160
181e8     7C EF B0 FD | 	call	#__system___float_div
181ec     FD 14 02 F6 | 	mov	arg02, result1
181f0     19 13 02 F6 | 	mov	arg01, local07
181f4     7C ED B0 FD | 	call	#__system___float_mul
181f8     18 30 06 F1 | 	add	local06, #24
181fc     18 FB 61 FC | 	wrlong	result1, local06
18200     BC 00 90 FD | 	jmp	#LR__2002
18204                 | LR__2001
18204     18 50 06 F6 | 	mov	local22, #24
18208     00 40 24 FF 
1820c     00 4E 06 F6 | 	mov	local21, ##1216348160
18210     1B 13 02 F6 | 	mov	arg01, local09
18214     C7 07 24 FF 
18218     00 14 06 F6 | 	mov	arg02, ##1208978944
1821c     48 EF B0 FD | 	call	#__system___float_div
18220     FD 14 02 F6 | 	mov	arg02, result1
18224     27 13 02 F6 | 	mov	arg01, local21
18228     48 ED B0 FD | 	call	#__system___float_mul
1822c     FD 12 02 F6 | 	mov	arg01, result1
18230     01 14 06 F6 | 	mov	arg02, #1
18234     C8 F1 B0 FD | 	call	#__system___float_tointeger
18238     FD 4E 02 F6 | 	mov	local21, result1
1823c     1A 31 02 F6 | 	mov	local06, local08
18240     03 30 66 F0 | 	shl	local06, #3
18244     1A 31 82 F1 | 	sub	local06, local08
18248     02 30 66 F0 | 	shl	local06, #2
1824c     F2 2C 02 F6 | 	mov	local04, objptr
18250     14 00 00 FF 
18254     38 2D 06 F1 | 	add	local04, ##10552
18258     16 31 02 F1 | 	add	local06, local04
1825c     AA 2B 25 FF 
18260     00 33 06 F6 | 	mov	local07, ##1247237376
18264     28 13 52 F6 | 	abs	arg01, local22 wc
18268     1F 4C C6 C9 |  if_b	decod	local20, #31
1826c     00 4C 06 36 |  if_ae	mov	local20, #0
18270     00 E9 B0 FD | 	call	#__system___float_fromuns
18274     26 FB 61 F5 | 	xor	result1, local20
18278     FD 14 02 F6 | 	mov	arg02, result1
1827c     19 13 02 F6 | 	mov	arg01, local07
18280     E4 EE B0 FD | 	call	#__system___float_div
18284     FD 32 02 F6 | 	mov	local07, result1
18288     27 13 52 F6 | 	abs	arg01, local21 wc
1828c     1F 4C C6 C9 |  if_b	decod	local20, #31
18290     00 4C 06 36 |  if_ae	mov	local20, #0
18294     DC E8 B0 FD | 	call	#__system___float_fromuns
18298     26 FB 61 F5 | 	xor	result1, local20
1829c     FD 12 02 F6 | 	mov	arg01, result1
182a0     00 40 24 FF 
182a4     00 14 06 F6 | 	mov	arg02, ##1216348160
182a8     BC EE B0 FD | 	call	#__system___float_div
182ac     FD 14 02 F6 | 	mov	arg02, result1
182b0     19 13 02 F6 | 	mov	arg01, local07
182b4     BC EC B0 FD | 	call	#__system___float_mul
182b8     18 30 06 F1 | 	add	local06, #24
182bc     18 FB 61 FC | 	wrlong	result1, local06
182c0                 | LR__2002
182c0     77 CC 21 FF 
182c4     BE 13 06 F6 | 	mov	arg01, ##1134096318
182c8     21 15 02 F6 | 	mov	arg02, local15
182cc     98 EE B0 FD | 	call	#__system___float_div
182d0     FD 12 02 F6 | 	mov	arg01, result1
182d4     01 14 06 F6 | 	mov	arg02, #1
182d8     24 F1 B0 FD | 	call	#__system___float_tointeger
182dc     FD 4A 02 F6 | 	mov	local19, result1
182e0     00 00 23 FF 
182e4     00 12 06 F6 | 	mov	arg01, ##1174405120
182e8     22 15 02 F6 | 	mov	arg02, local16
182ec     84 EC B0 FD | 	call	#__system___float_mul
182f0     FD 12 02 F6 | 	mov	arg01, result1
182f4     01 14 06 F6 | 	mov	arg02, #1
182f8     04 F1 B0 FD | 	call	#__system___float_tointeger
182fc     0D 48 C6 F9 | 	decod	local18, #13
18300     FD 48 02 F1 | 	add	local18, result1
18304     00 3D 22 FF 
18308     00 12 06 F6 | 	mov	arg01, ##1148846080
1830c     1E 15 02 F6 | 	mov	arg02, local12
18310     60 EC B0 FD | 	call	#__system___float_mul
18314     FD 12 02 F6 | 	mov	arg01, result1
18318     01 14 06 F6 | 	mov	arg02, #1
1831c     E0 F0 B0 FD | 	call	#__system___float_tointeger
18320     FD 44 02 F6 | 	mov	local16, result1
18324     37 00 00 FF 
18328     30 E4 05 F1 | 	add	objptr, ##28208
1832c     F2 42 02 FB | 	rdlong	local15, objptr
18330     37 00 00 FF 
18334     30 E4 85 F1 | 	sub	objptr, ##28208
18338     06 34 66 F0 | 	shl	local08, #6
1833c     1A 43 02 F1 | 	add	local15, local08
18340                 | ' 
18340                 | ' speed=round(speed_coeff/slen)
18340                 | ' ipan=8192+round(8192*pan)
18340                 | ' ivol=round(1000.0*vol)
18340                 | ' base2=base+64*channel
18340                 | ' if wave <32 then 
18340     20 3E 56 F2 | 	cmps	local13, #32 wc
18344     21 13 02 C6 |  if_b	mov	arg01, local15
18348     08 12 06 C1 |  if_b	add	arg01, #8
1834c     1F 15 02 C6 |  if_b	mov	arg02, local13
18350     0B 14 66 C0 |  if_b	shl	arg02, #11
18354     00 00 60 CF 
18358     00 14 06 C1 |  if_b	add	arg02, ##-1073741824
1835c     09 15 62 CC |  if_b	wrlong	arg02, arg01
18360     21 13 02 36 |  if_ae	mov	arg01, local15
18364     08 12 06 31 |  if_ae	add	arg01, #8
18368     00 00 E4 3F 
1836c     09 01 68 3C |  if_ae	wrlong	##-939524096, arg01
18370     21 13 02 F6 | 	mov	arg01, local15
18374     10 12 06 F1 | 	add	arg01, #16
18378     04 00 80 FF 
1837c     09 01 68 FC | 	wrlong	##2048, arg01
18380     21 13 02 F6 | 	mov	arg01, local15
18384     0C 12 06 F1 | 	add	arg01, #12
18388     09 01 68 FC | 	wrlong	#0, arg01
1838c     21 13 02 F6 | 	mov	arg01, local15
18390     14 12 06 F1 | 	add	arg01, #20
18394     09 45 52 FC | 	wrword	local16, arg01
18398     21 13 02 F6 | 	mov	arg01, local15
1839c     16 12 06 F1 | 	add	arg01, #22
183a0     09 49 52 FC | 	wrword	local18, arg01
183a4                 | ' lpoke base2+16,2048
183a4                 | ' lpoke base2+12,0
183a4                 | ' dpoke base2+20,ivol 
183a4                 | ' dpoke base2+22,ipan 
183a4                 | ' if wave<32 then
183a4     20 3E 56 F2 | 	cmps	local13, #32 wc
183a8     21 13 02 C6 |  if_b	mov	arg01, local15
183ac     18 12 06 C1 |  if_b	add	arg01, #24
183b0     09 51 52 CC |  if_b	wrword	local22, arg01
183b4     21 13 02 C6 |  if_b	mov	arg01, local15
183b8     1A 12 06 C1 |  if_b	add	arg01, #26
183bc     09 4F 52 CC |  if_b	wrword	local21, arg01
183c0     34 00 90 CD |  if_b	jmp	#LR__2003
183c4     21 51 02 F6 | 	mov	local22, local15
183c8     18 50 06 F1 | 	add	local22, #24
183cc     3E 2C 25 FF 
183d0     3C 12 06 F6 | 	mov	arg01, ##1247312956
183d4     1B 15 02 F6 | 	mov	arg02, local09
183d8     8C ED B0 FD | 	call	#__system___float_div
183dc     FD 12 02 F6 | 	mov	arg01, result1
183e0     01 14 06 F6 | 	mov	arg02, #1
183e4     18 F0 B0 FD | 	call	#__system___float_tointeger
183e8     28 FB 51 FC | 	wrword	result1, local22
183ec     21 13 02 F6 | 	mov	arg01, local15
183f0     1A 12 06 F1 | 	add	arg01, #26
183f4     09 01 5A FC | 	wrword	#256, arg01
183f8                 | LR__2003
183f8     21 13 02 F6 | 	mov	arg01, local15
183fc     1C 12 06 F1 | 	add	arg01, #28
18400     09 01 68 FC | 	wrlong	#0, arg01
18404     21 13 02 F6 | 	mov	arg01, local15
18408     20 12 06 F1 | 	add	arg01, #32
1840c     09 01 68 FC | 	wrlong	#0, arg01
18410                 | ' lpoke base2+28,$0000_0000
18410                 | ' lpoke base2+32,0 
18410                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18410     08 40 0E F2 | 	cmp	local14, #8 wz
18414     21 13 02 A6 |  if_e	mov	arg01, local15
18418     24 12 06 A1 |  if_e	add	arg01, #36
1841c     09 01 68 AC |  if_e	wrlong	#0, arg01
18420     21 13 02 56 |  if_ne	mov	arg01, local15
18424     24 12 06 51 |  if_ne	add	arg01, #36
18428     09 40 66 50 |  if_ne	shl	local14, #9
1842c     F2 38 02 56 |  if_ne	mov	local10, objptr
18430     0C 00 00 5F 
18434     D8 38 06 51 |  if_ne	add	local10, ##6360
18438     1C 41 02 51 |  if_ne	add	local14, local10
1843c     09 41 62 5C |  if_ne	wrlong	local14, arg01
18440     21 13 02 F6 | 	mov	arg01, local15
18444     28 12 06 F1 | 	add	arg01, #40
18448     09 4B 62 FC | 	wrlong	local19, arg01
1844c     2C 42 06 F1 | 	add	local15, #44
18450     21 13 02 F6 | 	mov	arg01, local15
18454     09 47 62 FC | 	wrlong	local17, arg01
18458                 | ' lpoke base2+40,speed 
18458                 | ' lpoke base2+44,sus 
18458                 | ' if delay>0 then waitms(delay) 
18458     01 3A 56 F2 | 	cmps	local11, #1 wc
1845c     1D 13 02 36 |  if_ae	mov	arg01, local11
18460     E0 CE B0 3D |  if_ae	call	#__system___waitms
18464     A7 F0 03 F6 | 	mov	ptra, fp
18468     B2 00 A0 FD | 	call	#popregs_
1846c                 | _do_play_ret
1846c     2D 00 64 FD | 	ret
18470                 | 
18470                 | ' 
18470                 | ' '-------------------- plot
18470                 | ' 
18470                 | ' sub do_plot
18470                 | _do_plot
18470     01 4A 05 F6 | 	mov	COUNT_, #1
18474     A8 00 A0 FD | 	call	#pushregs_
18478     20 F0 07 F1 | 	add	ptra, #32
1847c     C0 50 BF FD | 	call	#_pop
18480     FD 16 02 F6 | 	mov	arg03, result1
18484     FE 14 02 F6 | 	mov	arg02, result2
18488     FF 12 02 F6 | 	mov	arg01, result3
1848c     0C 4E 05 F1 | 	add	fp, #12
18490     A7 16 62 FC | 	wrlong	arg03, fp
18494     04 4E 05 F1 | 	add	fp, #4
18498     A7 14 62 FC | 	wrlong	arg02, fp
1849c     04 4E 05 F1 | 	add	fp, #4
184a0     A7 12 62 FC | 	wrlong	arg01, fp
184a4     14 4E 85 F1 | 	sub	fp, #20
184a8     94 50 BF FD | 	call	#_pop
184ac     FF 16 02 F6 | 	mov	arg03, result3
184b0     A7 FA 61 FC | 	wrlong	result1, fp
184b4     04 4E 05 F1 | 	add	fp, #4
184b8     A7 FC 61 FC | 	wrlong	result2, fp
184bc     04 4E 05 F1 | 	add	fp, #4
184c0     A7 16 62 FC | 	wrlong	arg03, fp
184c4     08 4E 85 F1 | 	sub	fp, #8
184c8     A7 12 02 F6 | 	mov	arg01, fp
184cc     4C 52 BF FD | 	call	#_converttoint
184d0     FD 26 02 F6 | 	mov	local01, result1
184d4     A7 12 02 F6 | 	mov	arg01, fp
184d8     0C 12 06 F1 | 	add	arg01, #12
184dc     3C 52 BF FD | 	call	#_converttoint
184e0     FD 14 02 F6 | 	mov	arg02, result1
184e4     37 00 00 FF 
184e8     4C E4 05 F1 | 	add	objptr, ##28236
184ec     F2 26 62 FC | 	wrlong	local01, objptr
184f0     04 E4 05 F1 | 	add	objptr, #4
184f4     F2 14 62 FC | 	wrlong	arg02, objptr
184f8     04 E4 85 F1 | 	sub	objptr, #4
184fc     F2 12 02 FB | 	rdlong	arg01, objptr
18500     04 E4 85 F1 | 	sub	objptr, #4
18504     F2 16 02 FB | 	rdlong	arg03, objptr
18508     37 00 00 FF 
1850c     48 E4 85 F1 | 	sub	objptr, ##28232
18510     8C AD B0 FD | 	call	#_hg010b_spin2_putpixel
18514     A7 F0 03 F6 | 	mov	ptra, fp
18518     B2 00 A0 FD | 	call	#popregs_
1851c                 | _do_plot_ret
1851c     2D 00 64 FD | 	ret
18520                 | 
18520                 | ' 
18520                 | ' '-------------------- poke
18520                 | ' 
18520                 | ' sub do_poke
18520                 | _do_poke
18520     02 4A 05 F6 | 	mov	COUNT_, #2
18524     A8 00 A0 FD | 	call	#pushregs_
18528     20 F0 07 F1 | 	add	ptra, #32
1852c     10 50 BF FD | 	call	#_pop
18530     FD 14 02 F6 | 	mov	arg02, result1
18534     FE 12 02 F6 | 	mov	arg01, result2
18538     FF 26 02 F6 | 	mov	local01, result3
1853c     A7 14 62 FC | 	wrlong	arg02, fp
18540     04 4E 05 F1 | 	add	fp, #4
18544     A7 12 62 FC | 	wrlong	arg01, fp
18548     04 4E 05 F1 | 	add	fp, #4
1854c     A7 26 62 FC | 	wrlong	local01, fp
18550     08 4E 85 F1 | 	sub	fp, #8
18554     E8 4F BF FD | 	call	#_pop
18558     FF 26 02 F6 | 	mov	local01, result3
1855c     0C 4E 05 F1 | 	add	fp, #12
18560     A7 FA 61 FC | 	wrlong	result1, fp
18564     04 4E 05 F1 | 	add	fp, #4
18568     A7 FC 61 FC | 	wrlong	result2, fp
1856c     04 4E 05 F1 | 	add	fp, #4
18570     A7 26 62 FC | 	wrlong	local01, fp
18574     08 4E 85 F1 | 	sub	fp, #8
18578     A7 12 02 F6 | 	mov	arg01, fp
1857c     0C 4E 85 F1 | 	sub	fp, #12
18580     98 51 BF FD | 	call	#_converttoint
18584     FD 26 02 F6 | 	mov	local01, result1
18588     A7 12 02 F6 | 	mov	arg01, fp
1858c     8C 51 BF FD | 	call	#_converttoint
18590     FD 28 02 F6 | 	mov	local02, result1
18594                 | ' t1=pop() 'value
18594                 | ' t2=pop() 
18594                 | ' a=converttoint(t2) : v=converttoint(t1)
18594                 | ' if a<$80000 then poke a,v else pspoke a,v
18594     00 04 00 FF 
18598     00 26 16 F2 | 	cmp	local01, ##524288 wc
1859c     13 29 42 CC |  if_b	wrbyte	local02, local01
185a0     13 13 02 36 |  if_ae	mov	arg01, local01
185a4     14 15 02 36 |  if_ae	mov	arg02, local02
185a8     A0 77 B0 3D |  if_ae	call	#_pspoke
185ac     A7 F0 03 F6 | 	mov	ptra, fp
185b0     B2 00 A0 FD | 	call	#popregs_
185b4                 | _do_poke_ret
185b4     2D 00 64 FD | 	ret
185b8                 | 
185b8                 | ' 
185b8                 | ' '-------------------- pop
185b8                 | ' 
185b8                 | ' sub do_pop()
185b8                 | _do_pop
185b8                 | ' if gosubtop>0 then  gosubtop -=1 
185b8     50 00 00 FF 
185bc     54 E5 05 F1 | 	add	objptr, ##41300
185c0     F2 00 02 FB | 	rdlong	_var01, objptr
185c4     50 00 00 FF 
185c8     54 E5 85 F1 | 	sub	objptr, ##41300
185cc     01 00 56 F2 | 	cmps	_var01, #1 wc
185d0     50 00 00 3F 
185d4     54 E5 05 31 |  if_ae	add	objptr, ##41300
185d8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
185dc     01 00 86 31 |  if_ae	sub	_var01, #1
185e0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
185e4     50 00 00 3F 
185e8     54 E5 85 31 |  if_ae	sub	objptr, ##41300
185ec                 | _do_pop_ret
185ec     2D 00 64 FD | 	ret
185f0                 | 
185f0                 | ' 
185f0                 | ' '-------------------- position
185f0                 | ' 
185f0                 | ' sub do_position
185f0                 | _do_position
185f0     01 4A 05 F6 | 	mov	COUNT_, #1
185f4     A8 00 A0 FD | 	call	#pushregs_
185f8     18 F0 07 F1 | 	add	ptra, #24
185fc     40 4F BF FD | 	call	#_pop
18600     FD 14 02 F6 | 	mov	arg02, result1
18604     FE 12 02 F6 | 	mov	arg01, result2
18608     FF 26 02 F6 | 	mov	local01, result3
1860c     A7 14 62 FC | 	wrlong	arg02, fp
18610     04 4E 05 F1 | 	add	fp, #4
18614     A7 12 62 FC | 	wrlong	arg01, fp
18618     04 4E 05 F1 | 	add	fp, #4
1861c     A7 26 62 FC | 	wrlong	local01, fp
18620     08 4E 85 F1 | 	sub	fp, #8
18624     18 4F BF FD | 	call	#_pop
18628     FF 26 02 F6 | 	mov	local01, result3
1862c     0C 4E 05 F1 | 	add	fp, #12
18630     A7 FA 61 FC | 	wrlong	result1, fp
18634     04 4E 05 F1 | 	add	fp, #4
18638     A7 FC 61 FC | 	wrlong	result2, fp
1863c     04 4E 05 F1 | 	add	fp, #4
18640     A7 26 62 FC | 	wrlong	local01, fp
18644     08 4E 85 F1 | 	sub	fp, #8
18648     A7 12 02 F6 | 	mov	arg01, fp
1864c     0C 4E 85 F1 | 	sub	fp, #12
18650     C8 50 BF FD | 	call	#_converttoint
18654     FD 26 02 F6 | 	mov	local01, result1
18658     A7 12 02 F6 | 	mov	arg01, fp
1865c     BC 50 BF FD | 	call	#_converttoint
18660     FD 14 02 F6 | 	mov	arg02, result1
18664     13 13 02 F6 | 	mov	arg01, local01
18668     A8 B3 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1866c     A7 F0 03 F6 | 	mov	ptra, fp
18670     B2 00 A0 FD | 	call	#popregs_
18674                 | _do_position_ret
18674     2D 00 64 FD | 	ret
18678                 | 
18678                 | ' 
18678                 | ' '-------------------- print
18678                 | ' 
18678                 | ' sub do_print  
18678                 | _do_print
18678     0B 4A 05 F6 | 	mov	COUNT_, #11
1867c     A8 00 A0 FD | 	call	#pushregs_
18680     00 2C 06 F6 | 	mov	local04, #0
18684     B8 4E BF FD | 	call	#_pop
18688     FD 2E 02 F6 | 	mov	local05, result1
1868c     FE 30 02 F6 | 	mov	local06, result2
18690     FF 32 02 F6 | 	mov	local07, result3
18694     17 27 02 F6 | 	mov	local01, local05
18698     18 29 02 F6 | 	mov	local02, local06
1869c     19 2B 02 F6 | 	mov	local03, local07
186a0                 | '  
186a0                 | ' r=0
186a0                 | ' t1=pop() 
186a0                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
186a0     21 2A 0E F2 | 	cmp	local03, #33 wz
186a4     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
186a8     20 00 90 5D |  if_ne	jmp	#LR__2010
186ac     15 2D 02 F6 | 	mov	local04, local03
186b0     8C 4E BF FD | 	call	#_pop
186b4     FD 2E 02 F6 | 	mov	local05, result1
186b8     FE 30 02 F6 | 	mov	local06, result2
186bc     FF 32 02 F6 | 	mov	local07, result3
186c0     17 27 02 F6 | 	mov	local01, local05
186c4     18 29 02 F6 | 	mov	local02, local06
186c8     19 2B 02 F6 | 	mov	local03, local07
186cc                 | LR__2010
186cc                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
186cc     20 2A 0E F2 | 	cmp	local03, #32 wz
186d0     15 2D 02 A6 |  if_e	mov	local04, local03
186d4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
186d4     FF 2A 0E F2 | 	cmp	local03, #255 wz
186d8     10 00 90 5D |  if_ne	jmp	#LR__2011
186dc     13 13 02 F6 | 	mov	arg01, local01
186e0     00 14 06 F6 | 	mov	arg02, #0
186e4     38 75 B0 FD | 	call	#_printerror
186e8     D4 04 90 FD | 	jmp	#LR__2030
186ec                 | LR__2011
186ec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
186ec     2B 2A 0E F2 | 	cmp	local03, #43 wz
186f0     14 00 90 5D |  if_ne	jmp	#LR__2012
186f4     13 13 02 F6 | 	mov	arg01, local01
186f8     B4 4F BF FD | 	call	#_convertstring
186fc     FD 2E 02 F6 | 	mov	local05, result1
18700     17 27 02 F6 | 	mov	local01, local05
18704     1F 2A 06 F6 | 	mov	local03, #31
18708                 | LR__2012
18708                 | ' 
18708                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18708     2C 2A 0E F2 | 	cmp	local03, #44 wz
1870c     80 00 90 5D |  if_ne	jmp	#LR__2013
18710     00 12 06 F6 | 	mov	arg01, #0
18714     7C 14 B1 FD | 	call	#__system___getiolock_0622
18718     FD 12 02 F6 | 	mov	arg01, result1
1871c     88 C9 B0 FD | 	call	#__system___lockmem
18720     93 01 00 FF 
18724     24 15 06 F6 | 	mov	arg02, ##@LR__5664
18728     00 12 06 F6 | 	mov	arg01, #0
1872c     00 16 06 F6 | 	mov	arg03, #0
18730     94 D1 B0 FD | 	call	#__system___basic_print_string
18734     0A 34 06 F6 | 	mov	local08, #10
18738     00 12 06 F6 | 	mov	arg01, #0
1873c     13 15 02 F6 | 	mov	arg02, local01
18740     00 16 06 F6 | 	mov	arg03, #0
18744     0A 18 06 F6 | 	mov	arg04, #10
18748     C0 D1 B0 FD | 	call	#__system___basic_print_integer
1874c     FD 36 02 F6 | 	mov	local09, result1
18750     00 12 06 F6 | 	mov	arg01, #0
18754     0A 14 06 F6 | 	mov	arg02, #10
18758     00 16 06 F6 | 	mov	arg03, #0
1875c     10 D1 B0 FD | 	call	#__system___basic_print_char
18760     01 38 06 F6 | 	mov	local10, #1
18764     00 12 06 F6 | 	mov	arg01, #0
18768     28 14 B1 FD | 	call	#__system___getiolock_0622
1876c     FD 00 68 FC | 	wrlong	#0, result1
18770     00 3A 06 F6 | 	mov	local11, #0
18774     C8 4D BF FD | 	call	#_pop
18778     FD 2E 02 F6 | 	mov	local05, result1
1877c     FE 30 02 F6 | 	mov	local06, result2
18780     FF 32 02 F6 | 	mov	local07, result3
18784     17 27 02 F6 | 	mov	local01, local05
18788     18 29 02 F6 | 	mov	local02, local06
1878c     19 2B 02 F6 | 	mov	local03, local07
18790                 | LR__2013
18790                 | ' 
18790                 | ' if r=print_mod_comma  then
18790     21 2C 0E F2 | 	cmp	local04, #33 wz
18794     AC 01 90 5D |  if_ne	jmp	#LR__2018
18798                 | '   if t1.result_type=result_int then print t1.result.iresult,
18798     1C 2A 0E F2 | 	cmp	local03, #28 wz
1879c     64 00 90 5D |  if_ne	jmp	#LR__2014
187a0     00 12 06 F6 | 	mov	arg01, #0
187a4     EC 13 B1 FD | 	call	#__system___getiolock_0622
187a8     FD 12 02 F6 | 	mov	arg01, result1
187ac     F8 C8 B0 FD | 	call	#__system___lockmem
187b0     00 30 06 F6 | 	mov	local06, #0
187b4     00 12 06 F6 | 	mov	arg01, #0
187b8     13 15 02 F6 | 	mov	arg02, local01
187bc     00 16 06 F6 | 	mov	arg03, #0
187c0     0A 18 06 F6 | 	mov	arg04, #10
187c4     44 D1 B0 FD | 	call	#__system___basic_print_integer
187c8     FD 32 02 F6 | 	mov	local07, result1
187cc     18 2F 02 F6 | 	mov	local05, local06
187d0     19 2F 02 F1 | 	add	local05, local07
187d4     00 3A 06 F6 | 	mov	local11, #0
187d8     00 12 06 F6 | 	mov	arg01, #0
187dc     09 14 06 F6 | 	mov	arg02, #9
187e0     00 16 06 F6 | 	mov	arg03, #0
187e4     88 D0 B0 FD | 	call	#__system___basic_print_char
187e8     FD 36 02 F6 | 	mov	local09, result1
187ec     FD 2E 02 F1 | 	add	local05, result1
187f0     00 12 06 F6 | 	mov	arg01, #0
187f4     9C 13 B1 FD | 	call	#__system___getiolock_0622
187f8     FD 00 68 FC | 	wrlong	#0, result1
187fc     00 FA 05 F6 | 	mov	result1, #0
18800     00 38 06 F6 | 	mov	local10, #0
18804                 | LR__2014
18804                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18804     1D 2A 0E F2 | 	cmp	local03, #29 wz
18808     64 00 90 5D |  if_ne	jmp	#LR__2015
1880c     00 12 06 F6 | 	mov	arg01, #0
18810     80 13 B1 FD | 	call	#__system___getiolock_0622
18814     FD 12 02 F6 | 	mov	arg01, result1
18818     8C C8 B0 FD | 	call	#__system___lockmem
1881c     00 30 06 F6 | 	mov	local06, #0
18820     00 12 06 F6 | 	mov	arg01, #0
18824     13 15 02 F6 | 	mov	arg02, local01
18828     00 16 06 F6 | 	mov	arg03, #0
1882c     0A 18 06 F6 | 	mov	arg04, #10
18830     18 D1 B0 FD | 	call	#__system___basic_print_unsigned
18834     FD 32 02 F6 | 	mov	local07, result1
18838     18 2F 02 F6 | 	mov	local05, local06
1883c     19 2F 02 F1 | 	add	local05, local07
18840     00 3A 06 F6 | 	mov	local11, #0
18844     00 12 06 F6 | 	mov	arg01, #0
18848     09 14 06 F6 | 	mov	arg02, #9
1884c     00 16 06 F6 | 	mov	arg03, #0
18850     1C D0 B0 FD | 	call	#__system___basic_print_char
18854     FD 36 02 F6 | 	mov	local09, result1
18858     FD 2E 02 F1 | 	add	local05, result1
1885c     00 12 06 F6 | 	mov	arg01, #0
18860     30 13 B1 FD | 	call	#__system___getiolock_0622
18864     FD 00 68 FC | 	wrlong	#0, result1
18868     00 FA 05 F6 | 	mov	result1, #0
1886c     00 38 06 F6 | 	mov	local10, #0
18870                 | LR__2015
18870                 | '   if t1.result_type=result_float then print t1.result.fresult,
18870     1E 2A 0E F2 | 	cmp	local03, #30 wz
18874     64 00 90 5D |  if_ne	jmp	#LR__2016
18878     00 12 06 F6 | 	mov	arg01, #0
1887c     14 13 B1 FD | 	call	#__system___getiolock_0622
18880     FD 12 02 F6 | 	mov	arg01, result1
18884     20 C8 B0 FD | 	call	#__system___lockmem
18888     00 30 06 F6 | 	mov	local06, #0
1888c     00 12 06 F6 | 	mov	arg01, #0
18890     13 15 02 F6 | 	mov	arg02, local01
18894     00 16 06 F6 | 	mov	arg03, #0
18898     23 18 06 F6 | 	mov	arg04, #35
1889c     A0 EC B0 FD | 	call	#__system___basic_print_float
188a0     FD 32 02 F6 | 	mov	local07, result1
188a4     18 2F 02 F6 | 	mov	local05, local06
188a8     19 2F 02 F1 | 	add	local05, local07
188ac     00 3A 06 F6 | 	mov	local11, #0
188b0     00 12 06 F6 | 	mov	arg01, #0
188b4     09 14 06 F6 | 	mov	arg02, #9
188b8     00 16 06 F6 | 	mov	arg03, #0
188bc     B0 CF B0 FD | 	call	#__system___basic_print_char
188c0     FD 36 02 F6 | 	mov	local09, result1
188c4     FD 2E 02 F1 | 	add	local05, result1
188c8     00 12 06 F6 | 	mov	arg01, #0
188cc     C4 12 B1 FD | 	call	#__system___getiolock_0622
188d0     FD 00 68 FC | 	wrlong	#0, result1
188d4     00 FA 05 F6 | 	mov	result1, #0
188d8     00 38 06 F6 | 	mov	local10, #0
188dc                 | LR__2016
188dc                 | '   if t1.result_type=result_string then print t1.result.sresult,
188dc     1F 2A 0E F2 | 	cmp	local03, #31 wz
188e0     60 00 90 5D |  if_ne	jmp	#LR__2017
188e4     00 12 06 F6 | 	mov	arg01, #0
188e8     A8 12 B1 FD | 	call	#__system___getiolock_0622
188ec     FD 12 02 F6 | 	mov	arg01, result1
188f0     B4 C7 B0 FD | 	call	#__system___lockmem
188f4     00 30 06 F6 | 	mov	local06, #0
188f8     00 12 06 F6 | 	mov	arg01, #0
188fc     13 15 02 F6 | 	mov	arg02, local01
18900     00 16 06 F6 | 	mov	arg03, #0
18904     C0 CF B0 FD | 	call	#__system___basic_print_string
18908     FD 32 02 F6 | 	mov	local07, result1
1890c     18 2F 02 F6 | 	mov	local05, local06
18910     19 2F 02 F1 | 	add	local05, local07
18914     00 3A 06 F6 | 	mov	local11, #0
18918     00 12 06 F6 | 	mov	arg01, #0
1891c     09 14 06 F6 | 	mov	arg02, #9
18920     00 16 06 F6 | 	mov	arg03, #0
18924     48 CF B0 FD | 	call	#__system___basic_print_char
18928     FD 36 02 F6 | 	mov	local09, result1
1892c     FD 2E 02 F1 | 	add	local05, result1
18930     00 12 06 F6 | 	mov	arg01, #0
18934     5C 12 B1 FD | 	call	#__system___getiolock_0622
18938     FD 00 68 FC | 	wrlong	#0, result1
1893c     00 FA 05 F6 | 	mov	result1, #0
18940     00 38 06 F6 | 	mov	local10, #0
18944                 | LR__2017
18944                 | LR__2018
18944                 | ' if r=print_mod_semicolon then 
18944     22 2C 0E F2 | 	cmp	local04, #34 wz
18948     1C 01 90 5D |  if_ne	jmp	#LR__2023
1894c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1894c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18950     50 00 90 5D |  if_ne	jmp	#LR__2019
18954     00 12 06 F6 | 	mov	arg01, #0
18958     38 12 B1 FD | 	call	#__system___getiolock_0622
1895c     FD 12 02 F6 | 	mov	arg01, result1
18960     44 C7 B0 FD | 	call	#__system___lockmem
18964     00 30 06 F6 | 	mov	local06, #0
18968     00 38 06 F6 | 	mov	local10, #0
1896c     0A 3A 06 F6 | 	mov	local11, #10
18970     00 12 06 F6 | 	mov	arg01, #0
18974     13 15 02 F6 | 	mov	arg02, local01
18978     00 16 06 F6 | 	mov	arg03, #0
1897c     0A 18 06 F6 | 	mov	arg04, #10
18980     88 CF B0 FD | 	call	#__system___basic_print_integer
18984     FD 32 02 F6 | 	mov	local07, result1
18988     18 2F 02 F6 | 	mov	local05, local06
1898c     19 2F 02 F1 | 	add	local05, local07
18990     00 12 06 F6 | 	mov	arg01, #0
18994     FC 11 B1 FD | 	call	#__system___getiolock_0622
18998     FD 00 68 FC | 	wrlong	#0, result1
1899c     00 FA 05 F6 | 	mov	result1, #0
189a0     00 36 06 F6 | 	mov	local09, #0
189a4                 | LR__2019
189a4                 | '   if t1.result_type=result_uint then print t1.result.uresult;
189a4     1D 2A 0E F2 | 	cmp	local03, #29 wz
189a8     50 00 90 5D |  if_ne	jmp	#LR__2020
189ac     00 12 06 F6 | 	mov	arg01, #0
189b0     E0 11 B1 FD | 	call	#__system___getiolock_0622
189b4     FD 12 02 F6 | 	mov	arg01, result1
189b8     EC C6 B0 FD | 	call	#__system___lockmem
189bc     00 30 06 F6 | 	mov	local06, #0
189c0     00 38 06 F6 | 	mov	local10, #0
189c4     0A 3A 06 F6 | 	mov	local11, #10
189c8     00 12 06 F6 | 	mov	arg01, #0
189cc     13 15 02 F6 | 	mov	arg02, local01
189d0     00 16 06 F6 | 	mov	arg03, #0
189d4     0A 18 06 F6 | 	mov	arg04, #10
189d8     70 CF B0 FD | 	call	#__system___basic_print_unsigned
189dc     FD 32 02 F6 | 	mov	local07, result1
189e0     18 2F 02 F6 | 	mov	local05, local06
189e4     19 2F 02 F1 | 	add	local05, local07
189e8     00 12 06 F6 | 	mov	arg01, #0
189ec     A4 11 B1 FD | 	call	#__system___getiolock_0622
189f0     FD 00 68 FC | 	wrlong	#0, result1
189f4     00 FA 05 F6 | 	mov	result1, #0
189f8     00 36 06 F6 | 	mov	local09, #0
189fc                 | LR__2020
189fc                 | '   if t1.result_type=result_float then print t1.result.fresult;
189fc     1E 2A 0E F2 | 	cmp	local03, #30 wz
18a00     30 00 90 5D |  if_ne	jmp	#LR__2021
18a04     00 12 06 F6 | 	mov	arg01, #0
18a08     88 11 B1 FD | 	call	#__system___getiolock_0622
18a0c     FD 12 02 F6 | 	mov	arg01, result1
18a10     94 C6 B0 FD | 	call	#__system___lockmem
18a14     00 12 06 F6 | 	mov	arg01, #0
18a18     13 15 02 F6 | 	mov	arg02, local01
18a1c     00 16 06 F6 | 	mov	arg03, #0
18a20     23 18 06 F6 | 	mov	arg04, #35
18a24     18 EB B0 FD | 	call	#__system___basic_print_float
18a28     00 12 06 F6 | 	mov	arg01, #0
18a2c     64 11 B1 FD | 	call	#__system___getiolock_0622
18a30     FD 00 68 FC | 	wrlong	#0, result1
18a34                 | LR__2021
18a34                 | '   if t1.result_type=result_string then print t1.result.sresult;
18a34     1F 2A 0E F2 | 	cmp	local03, #31 wz
18a38     2C 00 90 5D |  if_ne	jmp	#LR__2022
18a3c     00 12 06 F6 | 	mov	arg01, #0
18a40     50 11 B1 FD | 	call	#__system___getiolock_0622
18a44     FD 12 02 F6 | 	mov	arg01, result1
18a48     5C C6 B0 FD | 	call	#__system___lockmem
18a4c     00 12 06 F6 | 	mov	arg01, #0
18a50     13 15 02 F6 | 	mov	arg02, local01
18a54     00 16 06 F6 | 	mov	arg03, #0
18a58     6C CE B0 FD | 	call	#__system___basic_print_string
18a5c     00 12 06 F6 | 	mov	arg01, #0
18a60     30 11 B1 FD | 	call	#__system___getiolock_0622
18a64     FD 00 68 FC | 	wrlong	#0, result1
18a68                 | LR__2022
18a68                 | LR__2023
18a68                 | ' if r=0 then 
18a68     00 2C 0E F2 | 	cmp	local04, #0 wz
18a6c     1C 01 90 5D |  if_ne	jmp	#LR__2028
18a70                 | '   if t1.result_type=result_int then print t1.result.iresult
18a70     1C 2A 0E F2 | 	cmp	local03, #28 wz
18a74     40 00 90 5D |  if_ne	jmp	#LR__2024
18a78     00 12 06 F6 | 	mov	arg01, #0
18a7c     14 11 B1 FD | 	call	#__system___getiolock_0622
18a80     FD 12 02 F6 | 	mov	arg01, result1
18a84     20 C6 B0 FD | 	call	#__system___lockmem
18a88     00 12 06 F6 | 	mov	arg01, #0
18a8c     13 15 02 F6 | 	mov	arg02, local01
18a90     00 16 06 F6 | 	mov	arg03, #0
18a94     0A 18 06 F6 | 	mov	arg04, #10
18a98     70 CE B0 FD | 	call	#__system___basic_print_integer
18a9c     00 12 06 F6 | 	mov	arg01, #0
18aa0     0A 14 06 F6 | 	mov	arg02, #10
18aa4     00 16 06 F6 | 	mov	arg03, #0
18aa8     C4 CD B0 FD | 	call	#__system___basic_print_char
18aac     00 12 06 F6 | 	mov	arg01, #0
18ab0     E0 10 B1 FD | 	call	#__system___getiolock_0622
18ab4     FD 00 68 FC | 	wrlong	#0, result1
18ab8                 | LR__2024
18ab8                 | '   if t1.result_type=result_uint then print t1.result.uresult
18ab8     1D 2A 0E F2 | 	cmp	local03, #29 wz
18abc     40 00 90 5D |  if_ne	jmp	#LR__2025
18ac0     00 12 06 F6 | 	mov	arg01, #0
18ac4     CC 10 B1 FD | 	call	#__system___getiolock_0622
18ac8     FD 12 02 F6 | 	mov	arg01, result1
18acc     D8 C5 B0 FD | 	call	#__system___lockmem
18ad0     00 12 06 F6 | 	mov	arg01, #0
18ad4     13 15 02 F6 | 	mov	arg02, local01
18ad8     00 16 06 F6 | 	mov	arg03, #0
18adc     0A 18 06 F6 | 	mov	arg04, #10
18ae0     68 CE B0 FD | 	call	#__system___basic_print_unsigned
18ae4     00 12 06 F6 | 	mov	arg01, #0
18ae8     0A 14 06 F6 | 	mov	arg02, #10
18aec     00 16 06 F6 | 	mov	arg03, #0
18af0     7C CD B0 FD | 	call	#__system___basic_print_char
18af4     00 12 06 F6 | 	mov	arg01, #0
18af8     98 10 B1 FD | 	call	#__system___getiolock_0622
18afc     FD 00 68 FC | 	wrlong	#0, result1
18b00                 | LR__2025
18b00                 | '   if t1.result_type=result_float then print t1.result.fresult
18b00     1E 2A 0E F2 | 	cmp	local03, #30 wz
18b04     40 00 90 5D |  if_ne	jmp	#LR__2026
18b08     00 12 06 F6 | 	mov	arg01, #0
18b0c     84 10 B1 FD | 	call	#__system___getiolock_0622
18b10     FD 12 02 F6 | 	mov	arg01, result1
18b14     90 C5 B0 FD | 	call	#__system___lockmem
18b18     00 12 06 F6 | 	mov	arg01, #0
18b1c     13 15 02 F6 | 	mov	arg02, local01
18b20     00 16 06 F6 | 	mov	arg03, #0
18b24     23 18 06 F6 | 	mov	arg04, #35
18b28     14 EA B0 FD | 	call	#__system___basic_print_float
18b2c     00 12 06 F6 | 	mov	arg01, #0
18b30     0A 14 06 F6 | 	mov	arg02, #10
18b34     00 16 06 F6 | 	mov	arg03, #0
18b38     34 CD B0 FD | 	call	#__system___basic_print_char
18b3c     00 12 06 F6 | 	mov	arg01, #0
18b40     50 10 B1 FD | 	call	#__system___getiolock_0622
18b44     FD 00 68 FC | 	wrlong	#0, result1
18b48                 | LR__2026
18b48                 | '   if t1.result_type=result_string then print t1.result.sresult
18b48     1F 2A 0E F2 | 	cmp	local03, #31 wz
18b4c     3C 00 90 5D |  if_ne	jmp	#LR__2027
18b50     00 12 06 F6 | 	mov	arg01, #0
18b54     3C 10 B1 FD | 	call	#__system___getiolock_0622
18b58     FD 12 02 F6 | 	mov	arg01, result1
18b5c     48 C5 B0 FD | 	call	#__system___lockmem
18b60     00 12 06 F6 | 	mov	arg01, #0
18b64     13 15 02 F6 | 	mov	arg02, local01
18b68     00 16 06 F6 | 	mov	arg03, #0
18b6c     58 CD B0 FD | 	call	#__system___basic_print_string
18b70     00 12 06 F6 | 	mov	arg01, #0
18b74     0A 14 06 F6 | 	mov	arg02, #10
18b78     00 16 06 F6 | 	mov	arg03, #0
18b7c     F0 CC B0 FD | 	call	#__system___basic_print_char
18b80     00 12 06 F6 | 	mov	arg01, #0
18b84     0C 10 B1 FD | 	call	#__system___getiolock_0622
18b88     FD 00 68 FC | 	wrlong	#0, result1
18b8c                 | LR__2027
18b8c                 | LR__2028
18b8c                 | ' if r=print_mod_empty then print
18b8c     20 2C 0E F2 | 	cmp	local04, #32 wz
18b90     2C 00 90 5D |  if_ne	jmp	#LR__2029
18b94     00 12 06 F6 | 	mov	arg01, #0
18b98     F8 0F B1 FD | 	call	#__system___getiolock_0622
18b9c     FD 12 02 F6 | 	mov	arg01, result1
18ba0     04 C5 B0 FD | 	call	#__system___lockmem
18ba4     00 12 06 F6 | 	mov	arg01, #0
18ba8     0A 14 06 F6 | 	mov	arg02, #10
18bac     00 16 06 F6 | 	mov	arg03, #0
18bb0     BC CC B0 FD | 	call	#__system___basic_print_char
18bb4     00 12 06 F6 | 	mov	arg01, #0
18bb8     D8 0F B1 FD | 	call	#__system___getiolock_0622
18bbc     FD 00 68 FC | 	wrlong	#0, result1
18bc0                 | LR__2029
18bc0                 | LR__2030
18bc0     A7 F0 03 F6 | 	mov	ptra, fp
18bc4     B2 00 A0 FD | 	call	#popregs_
18bc8                 | _do_print_ret
18bc8     2D 00 64 FD | 	ret
18bcc                 | 
18bcc                 | ' 
18bcc                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18bcc                 | ' 
18bcc                 | ' sub do_push
18bcc                 | _do_push
18bcc                 | ' if stackpointer<maxstack then 
18bcc     43 00 00 FF 
18bd0     78 E4 05 F1 | 	add	objptr, ##34424
18bd4     F2 00 02 FB | 	rdlong	_var01, objptr
18bd8     43 00 00 FF 
18bdc     78 E4 85 F1 | 	sub	objptr, ##34424
18be0     01 00 00 FF 
18be4     00 00 56 F2 | 	cmps	_var01, ##512 wc
18be8     F8 00 90 3D |  if_ae	jmp	#LR__2040
18bec     4A 00 00 FF 
18bf0     A0 E4 05 F1 | 	add	objptr, ##38048
18bf4     F2 02 02 FB | 	rdlong	_var02, objptr
18bf8     01 05 02 F6 | 	mov	_var03, _var02
18bfc     01 04 66 F0 | 	shl	_var03, #1
18c00     01 05 02 F1 | 	add	_var03, _var02
18c04     02 04 66 F0 | 	shl	_var03, #2
18c08     03 00 00 FF 
18c0c     04 E4 85 F1 | 	sub	objptr, ##1540
18c10     F2 04 02 F1 | 	add	_var03, objptr
18c14     02 01 02 FB | 	rdlong	_var01, _var03
18c18     04 04 06 F1 | 	add	_var03, #4
18c1c     02 07 02 FB | 	rdlong	_var04, _var03
18c20     01 05 02 F6 | 	mov	_var03, _var02
18c24     01 04 66 F0 | 	shl	_var03, #1
18c28     01 05 02 F1 | 	add	_var03, _var02
18c2c     02 04 66 F0 | 	shl	_var03, #2
18c30     F2 04 02 F1 | 	add	_var03, objptr
18c34     08 04 06 F1 | 	add	_var03, #8
18c38     02 03 02 FB | 	rdlong	_var02, _var03
18c3c     04 00 00 FF 
18c40     24 E4 85 F1 | 	sub	objptr, ##2084
18c44     F2 04 02 FB | 	rdlong	_var03, objptr
18c48     02 09 02 F6 | 	mov	_var05, _var03
18c4c     01 08 66 F0 | 	shl	_var05, #1
18c50     02 09 02 F1 | 	add	_var05, _var03
18c54     02 08 66 F0 | 	shl	_var05, #2
18c58     0C 00 00 FF 
18c5c     0C E4 85 F1 | 	sub	objptr, ##6156
18c60     F2 08 02 F1 | 	add	_var05, objptr
18c64     04 01 62 FC | 	wrlong	_var01, _var05
18c68     0C 00 00 FF 
18c6c     0C E4 05 F1 | 	add	objptr, ##6156
18c70     F2 08 02 FB | 	rdlong	_var05, objptr
18c74     04 05 02 F6 | 	mov	_var03, _var05
18c78     01 04 66 F0 | 	shl	_var03, #1
18c7c     04 05 02 F1 | 	add	_var03, _var05
18c80     02 04 66 F0 | 	shl	_var03, #2
18c84     0C 00 00 FF 
18c88     0C E4 85 F1 | 	sub	objptr, ##6156
18c8c     F2 04 02 F1 | 	add	_var03, objptr
18c90     04 04 06 F1 | 	add	_var03, #4
18c94     02 07 62 FC | 	wrlong	_var04, _var03
18c98     0C 00 00 FF 
18c9c     0C E4 05 F1 | 	add	objptr, ##6156
18ca0     F2 08 02 FB | 	rdlong	_var05, objptr
18ca4     04 07 02 F6 | 	mov	_var04, _var05
18ca8     01 06 66 F0 | 	shl	_var04, #1
18cac     04 07 02 F1 | 	add	_var04, _var05
18cb0     02 06 66 F0 | 	shl	_var04, #2
18cb4     0C 00 00 FF 
18cb8     0C E4 85 F1 | 	sub	objptr, ##6156
18cbc     F2 06 02 F1 | 	add	_var04, objptr
18cc0     08 06 06 F1 | 	add	_var04, #8
18cc4     03 03 62 FC | 	wrlong	_var02, _var04
18cc8     0C 00 00 FF 
18ccc     0C E4 05 F1 | 	add	objptr, ##6156
18cd0     F2 00 02 FB | 	rdlong	_var01, objptr
18cd4     01 00 06 F1 | 	add	_var01, #1
18cd8     F2 00 62 FC | 	wrlong	_var01, objptr
18cdc     43 00 00 FF 
18ce0     78 E4 85 F1 | 	sub	objptr, ##34424
18ce4                 | LR__2040
18ce4                 | _do_push_ret
18ce4     2D 00 64 FD | 	ret
18ce8                 | 
18ce8                 | ' 
18ce8                 | ' '-------------------- put
18ce8                 | ' 
18ce8                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18ce8                 | _do_put
18ce8     07 4A 05 F6 | 	mov	COUNT_, #7
18cec     A8 00 A0 FD | 	call	#pushregs_
18cf0     28 F0 07 F1 | 	add	ptra, #40
18cf4     4A 00 00 FF 
18cf8     A0 E4 05 F1 | 	add	objptr, ##38048
18cfc     F2 1A 02 FB | 	rdlong	arg05, objptr
18d00     0D 19 02 F6 | 	mov	arg04, arg05
18d04     01 18 66 F0 | 	shl	arg04, #1
18d08     0D 19 02 F1 | 	add	arg04, arg05
18d0c     02 18 66 F0 | 	shl	arg04, #2
18d10     03 00 00 FF 
18d14     04 E4 85 F1 | 	sub	objptr, ##1540
18d18     F2 18 02 F1 | 	add	arg04, objptr
18d1c     0C 27 02 FB | 	rdlong	local01, arg04
18d20                 | ' 
18d20                 | ' numpar=compiledline(lineptr_e).result.uresult
18d20                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
18d20     04 26 0E F2 | 	cmp	local01, #4 wz
18d24     47 00 00 FF 
18d28     9C E4 85 F1 | 	sub	objptr, ##36508
18d2c     48 00 90 5D |  if_ne	jmp	#LR__2050
18d30     0C 48 BF FD | 	call	#_pop
18d34     FF 1A 02 F6 | 	mov	arg05, result3
18d38     1C 4E 05 F1 | 	add	fp, #28
18d3c     A7 FA 61 FC | 	wrlong	result1, fp
18d40     04 4E 05 F1 | 	add	fp, #4
18d44     A7 FC 61 FC | 	wrlong	result2, fp
18d48     04 4E 05 F1 | 	add	fp, #4
18d4c     A7 1A 62 FC | 	wrlong	arg05, fp
18d50     08 4E 85 F1 | 	sub	fp, #8
18d54     A7 12 02 F6 | 	mov	arg01, fp
18d58     1C 4E 85 F1 | 	sub	fp, #28
18d5c     BC 49 BF FD | 	call	#_converttoint
18d60     52 00 00 FF 
18d64     64 E5 05 F1 | 	add	objptr, ##42340
18d68     F2 FA 61 FC | 	wrlong	result1, objptr
18d6c     52 00 00 FF 
18d70     64 E5 85 F1 | 	sub	objptr, ##42340
18d74     18 00 90 FD | 	jmp	#LR__2051
18d78                 | LR__2050
18d78     52 00 00 FF 
18d7c     64 E5 05 F1 | 	add	objptr, ##42340
18d80     FF FF FF FF 
18d84     F2 FE 6B FC | 	wrlong	##-1, objptr
18d88     52 00 00 FF 
18d8c     64 E5 85 F1 | 	sub	objptr, ##42340
18d90                 | LR__2051
18d90                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18d90     03 26 56 F2 | 	cmps	local01, #3 wc
18d94     38 00 90 CD |  if_b	jmp	#LR__2052
18d98     A4 47 BF FD | 	call	#_pop
18d9c     FF 1A 02 F6 | 	mov	arg05, result3
18da0     1C 4E 05 F1 | 	add	fp, #28
18da4     A7 FA 61 FC | 	wrlong	result1, fp
18da8     04 4E 05 F1 | 	add	fp, #4
18dac     A7 FC 61 FC | 	wrlong	result2, fp
18db0     04 4E 05 F1 | 	add	fp, #4
18db4     A7 1A 62 FC | 	wrlong	arg05, fp
18db8     08 4E 85 F1 | 	sub	fp, #8
18dbc     A7 12 02 F6 | 	mov	arg01, fp
18dc0     1C 4E 85 F1 | 	sub	fp, #28
18dc4     54 49 BF FD | 	call	#_converttoint
18dc8     FD 28 02 F6 | 	mov	local02, result1
18dcc     04 00 90 FD | 	jmp	#LR__2053
18dd0                 | LR__2052
18dd0     01 28 06 F6 | 	mov	local02, #1
18dd4                 | LR__2053
18dd4                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18dd4     02 26 56 F2 | 	cmps	local01, #2 wc
18dd8     34 00 90 CD |  if_b	jmp	#LR__2054
18ddc     60 47 BF FD | 	call	#_pop
18de0     FF 26 02 F6 | 	mov	local01, result3
18de4     1C 4E 05 F1 | 	add	fp, #28
18de8     A7 FA 61 FC | 	wrlong	result1, fp
18dec     04 4E 05 F1 | 	add	fp, #4
18df0     A7 FC 61 FC | 	wrlong	result2, fp
18df4     04 4E 05 F1 | 	add	fp, #4
18df8     A7 26 62 FC | 	wrlong	local01, fp
18dfc     08 4E 85 F1 | 	sub	fp, #8
18e00     A7 12 02 F6 | 	mov	arg01, fp
18e04     1C 4E 85 F1 | 	sub	fp, #28
18e08     10 49 BF FD | 	call	#_converttoint
18e0c     FD 2A 02 F6 | 	mov	local03, result1
18e10                 | LR__2054
18e10     2C 47 BF FD | 	call	#_pop
18e14     FF 26 02 F6 | 	mov	local01, result3
18e18     1C 4E 05 F1 | 	add	fp, #28
18e1c     A7 FA 61 FC | 	wrlong	result1, fp
18e20     04 4E 05 F1 | 	add	fp, #4
18e24     A7 FC 61 FC | 	wrlong	result2, fp
18e28     04 4E 05 F1 | 	add	fp, #4
18e2c     A7 26 62 FC | 	wrlong	local01, fp
18e30     08 4E 85 F1 | 	sub	fp, #8
18e34     A7 12 02 F6 | 	mov	arg01, fp
18e38     1C 4E 85 F1 | 	sub	fp, #28
18e3c     DC 48 BF FD | 	call	#_converttoint
18e40     FD 2C 02 F6 | 	mov	local04, result1
18e44     02 2E 66 F0 | 	shl	local05, #2
18e48     50 00 00 FF 
18e4c     E4 E4 05 F1 | 	add	objptr, ##41188
18e50     F2 2E 02 F1 | 	add	local05, objptr
18e54     17 01 68 FC | 	wrlong	#0, local05
18e58                 | ' t1=pop() : channel=converttoint(t1)
18e58                 | ' getres(j)=0
18e58                 | ' if pos>=0 then
18e58     02 00 00 FF 
18e5c     80 E4 05 F1 | 	add	objptr, ##1152
18e60     F2 30 02 FB | 	rdlong	local06, objptr
18e64     52 00 00 FF 
18e68     64 E5 85 F1 | 	sub	objptr, ##42340
18e6c     00 30 56 F2 | 	cmps	local06, #0 wc
18e70     08 01 90 CD |  if_b	jmp	#LR__2060
18e74     00 32 06 F6 | 	mov	local07, #0
18e78                 | '    i=0: do
18e78                 | LR__2055
18e78     00 2E 06 F6 | 	mov	local05, #0
18e7c                 | '    j=0: do    
18e7c                 | LR__2056
18e7c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18e7c     00 04 00 FF 
18e80     00 2A 56 F2 | 	cmps	local03, ##524288 wc
18e84     34 00 90 3D |  if_ae	jmp	#LR__2057
18e88     17 31 02 F6 | 	mov	local06, local05
18e8c     F2 26 02 F6 | 	mov	local01, objptr
18e90     4E 00 00 FF 
18e94     D4 26 06 F1 | 	add	local01, ##40148
18e98     13 31 02 F1 | 	add	local06, local01
18e9c     15 13 02 F6 | 	mov	arg01, local03
18ea0     19 27 02 F6 | 	mov	local01, local07
18ea4     0A 26 66 F0 | 	shl	local01, #10
18ea8     13 13 02 F1 | 	add	arg01, local01
18eac     17 13 02 F1 | 	add	arg01, local05
18eb0     09 FB C1 FA | 	rdbyte	result1, arg01
18eb4     18 FB 41 FC | 	wrbyte	result1, local06
18eb8     30 00 90 FD | 	jmp	#LR__2058
18ebc                 | LR__2057
18ebc     17 31 02 F6 | 	mov	local06, local05
18ec0     F2 26 02 F6 | 	mov	local01, objptr
18ec4     4E 00 00 FF 
18ec8     D4 26 06 F1 | 	add	local01, ##40148
18ecc     13 31 02 F1 | 	add	local06, local01
18ed0     15 13 02 F6 | 	mov	arg01, local03
18ed4     19 27 02 F6 | 	mov	local01, local07
18ed8     0A 26 66 F0 | 	shl	local01, #10
18edc     13 13 02 F1 | 	add	arg01, local01
18ee0     17 13 02 F1 | 	add	arg01, local05
18ee4     AC 6E B0 FD | 	call	#_pspeek
18ee8     18 FB 41 FC | 	wrbyte	result1, local06
18eec                 | LR__2058
18eec     01 2E 06 F1 | 	add	local05, #1
18ef0     02 00 00 FF 
18ef4     00 2E 56 F2 | 	cmps	local05, ##1024 wc
18ef8     14 00 90 3D |  if_ae	jmp	#LR__2059
18efc     19 31 02 F6 | 	mov	local06, local07
18f00     0A 30 66 F0 | 	shl	local06, #10
18f04     17 31 02 F1 | 	add	local06, local05
18f08     14 31 5A F2 | 	cmps	local06, local02 wcz
18f0c     6C FF 9F ED |  if_be	jmp	#LR__2056
18f10                 | LR__2059
18f10                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18f10     52 00 00 FF 
18f14     64 E5 05 F1 | 	add	objptr, ##42340
18f18     F2 14 02 FB | 	rdlong	arg02, objptr
18f1c     01 14 06 F1 | 	add	arg02, #1
18f20     04 00 00 FF 
18f24     90 E4 85 F1 | 	sub	objptr, ##2192
18f28     F2 16 02 F6 | 	mov	arg03, objptr
18f2c     4E 00 00 FF 
18f30     D4 E4 85 F1 | 	sub	objptr, ##40148
18f34     14 19 02 F6 | 	mov	arg04, local02
18f38     16 13 02 F6 | 	mov	arg01, local04
18f3c     01 1A 06 F6 | 	mov	arg05, #1
18f40     98 CA B0 FD | 	call	#__system___basic_put
18f44     16 31 02 F6 | 	mov	local06, local04
18f48     02 30 66 F0 | 	shl	local06, #2
18f4c     F2 26 02 F6 | 	mov	local01, objptr
18f50     50 00 00 FF 
18f54     E4 26 06 F1 | 	add	local01, ##41188
18f58     13 31 02 F1 | 	add	local06, local01
18f5c     18 FB 61 FC | 	wrlong	result1, local06
18f60                 | '    if 1024*i+j>amount then exit loop
18f60     19 31 02 F6 | 	mov	local06, local07
18f64     0A 30 66 F0 | 	shl	local06, #10
18f68     17 31 02 F1 | 	add	local06, local05
18f6c     14 31 5A F2 | 	cmps	local06, local02 wcz
18f70     F8 00 90 1D |  if_a	jmp	#LR__2066
18f74     01 32 06 F1 | 	add	local07, #1
18f78     FC FE 9F FD | 	jmp	#LR__2055
18f7c                 | LR__2060
18f7c     00 32 06 F6 | 	mov	local07, #0
18f80                 | '    i=0: do
18f80                 | LR__2061
18f80     00 2E 06 F6 | 	mov	local05, #0
18f84                 | '    j=0: do  
18f84                 | LR__2062
18f84                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18f84     00 04 00 FF 
18f88     00 2A 56 F2 | 	cmps	local03, ##524288 wc
18f8c     34 00 90 3D |  if_ae	jmp	#LR__2063
18f90     17 31 02 F6 | 	mov	local06, local05
18f94     F2 26 02 F6 | 	mov	local01, objptr
18f98     4E 00 00 FF 
18f9c     D4 26 06 F1 | 	add	local01, ##40148
18fa0     13 31 02 F1 | 	add	local06, local01
18fa4     15 13 02 F6 | 	mov	arg01, local03
18fa8     19 27 02 F6 | 	mov	local01, local07
18fac     0A 26 66 F0 | 	shl	local01, #10
18fb0     13 13 02 F1 | 	add	arg01, local01
18fb4     17 13 02 F1 | 	add	arg01, local05
18fb8     09 FB C1 FA | 	rdbyte	result1, arg01
18fbc     18 FB 41 FC | 	wrbyte	result1, local06
18fc0     30 00 90 FD | 	jmp	#LR__2064
18fc4                 | LR__2063
18fc4     17 31 02 F6 | 	mov	local06, local05
18fc8     F2 26 02 F6 | 	mov	local01, objptr
18fcc     4E 00 00 FF 
18fd0     D4 26 06 F1 | 	add	local01, ##40148
18fd4     13 31 02 F1 | 	add	local06, local01
18fd8     15 13 02 F6 | 	mov	arg01, local03
18fdc     19 27 02 F6 | 	mov	local01, local07
18fe0     0A 26 66 F0 | 	shl	local01, #10
18fe4     13 13 02 F1 | 	add	arg01, local01
18fe8     17 13 02 F1 | 	add	arg01, local05
18fec     A4 6D B0 FD | 	call	#_pspeek
18ff0     18 FB 41 FC | 	wrbyte	result1, local06
18ff4                 | LR__2064
18ff4     01 2E 06 F1 | 	add	local05, #1
18ff8     02 00 00 FF 
18ffc     00 2E 56 F2 | 	cmps	local05, ##1024 wc
19000     14 00 90 3D |  if_ae	jmp	#LR__2065
19004     19 31 02 F6 | 	mov	local06, local07
19008     0A 30 66 F0 | 	shl	local06, #10
1900c     17 31 02 F1 | 	add	local06, local05
19010     14 31 5A F2 | 	cmps	local06, local02 wcz
19014     6C FF 9F ED |  if_be	jmp	#LR__2062
19018                 | LR__2065
19018                 | '    put #channel,,block(0),amount, r : getres(channel)=r
19018     F2 16 02 F6 | 	mov	arg03, objptr
1901c     4E 00 00 FF 
19020     D4 16 06 F1 | 	add	arg03, ##40148
19024     14 19 02 F6 | 	mov	arg04, local02
19028     16 13 02 F6 | 	mov	arg01, local04
1902c     00 14 06 F6 | 	mov	arg02, #0
19030     01 1A 06 F6 | 	mov	arg05, #1
19034     A4 C9 B0 FD | 	call	#__system___basic_put
19038     16 31 02 F6 | 	mov	local06, local04
1903c     02 30 66 F0 | 	shl	local06, #2
19040     F2 26 02 F6 | 	mov	local01, objptr
19044     50 00 00 FF 
19048     E4 26 06 F1 | 	add	local01, ##41188
1904c     13 31 02 F1 | 	add	local06, local01
19050     18 FB 61 FC | 	wrlong	result1, local06
19054                 | '    if 1024*i+j>amount then exit loop
19054     19 31 02 F6 | 	mov	local06, local07
19058     0A 30 66 F0 | 	shl	local06, #10
1905c     17 31 02 F1 | 	add	local06, local05
19060     14 31 5A F2 | 	cmps	local06, local02 wcz
19064     01 32 06 E1 |  if_be	add	local07, #1
19068     14 FF 9F ED |  if_be	jmp	#LR__2061
1906c                 | LR__2066
1906c     A7 F0 03 F6 | 	mov	ptra, fp
19070     B2 00 A0 FD | 	call	#popregs_
19074                 | _do_put_ret
19074     2D 00 64 FD | 	ret
19078                 | 
19078                 | ' 
19078                 | ' '-------------------- rad
19078                 | ' 
19078                 | ' sub do_rad
19078                 | _do_rad
19078     52 00 00 FF 
1907c     00 E5 05 F1 | 	add	objptr, ##42240
19080     00 C0 9F FF 
19084     F2 00 68 FC | 	wrlong	##1065353216, objptr
19088     04 E4 05 F1 | 	add	objptr, #4
1908c     00 C0 9F FF 
19090     F2 00 68 FC | 	wrlong	##1065353216, objptr
19094     52 00 00 FF 
19098     04 E5 85 F1 | 	sub	objptr, ##42244
1909c                 | _do_rad_ret
1909c     2D 00 64 FD | 	ret
190a0                 | 
190a0                 | ' 
190a0                 | ' '-------------------- rdpin
190a0                 | ' 
190a0                 | ' sub do_rdpin
190a0                 | _do_rdpin
190a0     00 4A 05 F6 | 	mov	COUNT_, #0
190a4     A8 00 A0 FD | 	call	#pushregs_
190a8     0C F0 07 F1 | 	add	ptra, #12
190ac     90 44 BF FD | 	call	#_pop
190b0     A7 FA 61 FC | 	wrlong	result1, fp
190b4     04 4E 05 F1 | 	add	fp, #4
190b8     A7 FC 61 FC | 	wrlong	result2, fp
190bc     04 4E 05 F1 | 	add	fp, #4
190c0     A7 FE 61 FC | 	wrlong	result3, fp
190c4     08 4E 85 F1 | 	sub	fp, #8
190c8     A7 12 02 F6 | 	mov	arg01, fp
190cc     4C 46 BF FD | 	call	#_converttoint
190d0     FD FA 89 FA | 	rdpin	result1, result1
190d4     52 00 00 FF 
190d8     68 E5 05 F1 | 	add	objptr, ##42344
190dc     F2 FA 61 FC | 	wrlong	result1, objptr
190e0     52 00 00 FF 
190e4     68 E5 85 F1 | 	sub	objptr, ##42344
190e8     08 4E 05 F1 | 	add	fp, #8
190ec     A7 3A 68 FC | 	wrlong	#29, fp
190f0     08 4E 85 F1 | 	sub	fp, #8
190f4     A7 08 68 FC | 	wrlong	#4, fp
190f8     A7 12 02 F6 | 	mov	arg01, fp
190fc     D0 44 BF FD | 	call	#_push
19100     A7 F0 03 F6 | 	mov	ptra, fp
19104     B2 00 A0 FD | 	call	#popregs_
19108                 | _do_rdpin_ret
19108     2D 00 64 FD | 	ret
1910c                 | 
1910c                 | ' 
1910c                 | ' ' ----------------  read
1910c                 | ' 
1910c                 | ' function read_next_line() as string
1910c                 | _read_next_line
1910c     07 4A 05 F6 | 	mov	COUNT_, #7
19110     A8 00 A0 FD | 	call	#pushregs_
19114                 | ' if dataptr=$7FFFFFFF then return("")
19114     50 00 00 FF 
19118     4C E5 05 F1 | 	add	objptr, ##41292
1911c     F2 26 02 FB | 	rdlong	local01, objptr
19120     50 00 00 FF 
19124     4C E5 85 F1 | 	sub	objptr, ##41292
19128     FF FF 3F FF 
1912c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19130     93 01 00 AF 
19134     4B FB 05 A6 |  if_e	mov	result1, ##@LR__5665
19138     C0 01 90 AD |  if_e	jmp	#LR__2077
1913c                 | ' do
1913c                 | LR__2070
1913c     F2 12 02 F6 | 	mov	arg01, objptr
19140     50 00 00 FF 
19144     28 13 06 F1 | 	add	arg01, ##41256
19148     50 00 00 FF 
1914c     4C E5 05 F1 | 	add	objptr, ##41292
19150     F2 14 02 FB | 	rdlong	arg02, objptr
19154     24 16 06 F6 | 	mov	arg03, #36
19158     45 00 00 FF 
1915c     80 E4 85 F1 | 	sub	objptr, ##35456
19160     40 B7 B0 FD | 	call	#_psram_spin2_read1
19164                 | '  ' print dataptr
19164                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19164                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19164     45 00 00 FF 
19168     5C E4 05 F1 | 	add	objptr, ##35420
1916c     F2 26 02 FB | 	rdlong	local01, objptr
19170     50 00 00 FF 
19174     28 E5 85 F1 | 	sub	objptr, ##41256
19178     FF FF 7F FF 
1917c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19180     50 00 00 5F 
19184     3C E5 05 51 |  if_ne	add	objptr, ##41276
19188     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1918c     10 E4 05 51 |  if_ne	add	objptr, #16
19190     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19194     50 00 00 5F 
19198     4C E5 85 51 |  if_ne	sub	objptr, ##41292
1919c     50 00 00 FF 
191a0     3C E5 05 F1 | 	add	objptr, ##41276
191a4     F2 26 02 FB | 	rdlong	local01, objptr
191a8     50 00 00 FF 
191ac     3C E5 85 F1 | 	sub	objptr, ##41276
191b0     FF FF 3F FF 
191b4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
191b8     50 00 00 5F 
191bc     28 E5 05 51 |  if_ne	add	objptr, ##41256
191c0     F2 28 02 5B |  if_ne	rdlong	local02, objptr
191c4     50 00 00 5F 
191c8     28 E5 85 51 |  if_ne	sub	objptr, ##41256
191cc     FF FF 7F 5F 
191d0     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
191d4     50 00 00 5F 
191d8     48 E5 05 51 |  if_ne	add	objptr, ##41288
191dc     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
191e0     50 00 00 5F 
191e4     48 E5 85 51 |  if_ne	sub	objptr, ##41288
191e8     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
191ec     4C FF 9F 5D |  if_ne	jmp	#LR__2070
191f0                 | ' if dataheader(8)=token_data then 
191f0     50 00 00 FF 
191f4     48 E5 05 F1 | 	add	objptr, ##41288
191f8     F2 26 02 FB | 	rdlong	local01, objptr
191fc     50 00 00 FF 
19200     48 E5 85 F1 | 	sub	objptr, ##41288
19204     B7 26 0E F2 | 	cmp	local01, #183 wz
19208     E0 00 90 5D |  if_ne	jmp	#LR__2075
1920c     50 00 00 FF 
19210     30 E5 05 F1 | 	add	objptr, ##41264
19214     F2 26 02 FB | 	rdlong	local01, objptr
19218     02 00 00 FF 
1921c     18 E4 05 F1 | 	add	objptr, ##1048
19220     F2 26 62 FC | 	wrlong	local01, objptr
19224     02 00 00 FF 
19228     14 E4 85 F1 | 	sub	objptr, ##1044
1922c     F2 2C 02 FB | 	rdlong	local04, objptr
19230     02 00 00 FF 
19234     0C E4 05 F1 | 	add	objptr, ##1036
19238     F2 2C 62 FC | 	wrlong	local04, objptr
1923c                 | '  'print "data found at line "; dataheader(0)
1923c                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1923c     00 2E 06 F6 | 	mov	local05, #0
19240     52 00 00 FF 
19244     40 E5 85 F1 | 	sub	objptr, ##42304
19248                 | LR__2071
19248     16 2F 52 F2 | 	cmps	local05, local04 wc
1924c     3C 00 90 3D |  if_ae	jmp	#LR__2072
19250     52 00 00 FF 
19254     48 E5 05 F1 | 	add	objptr, ##42312
19258     F2 12 02 FB | 	rdlong	arg01, objptr
1925c     52 00 00 FF 
19260     48 E5 85 F1 | 	sub	objptr, ##42312
19264     17 13 02 F1 | 	add	arg01, local05
19268     28 6B B0 FD | 	call	#_pspeek
1926c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
19270     B8 D3 B0 FD | 	call	#__system__Chr_S
19274     FD 14 02 F6 | 	mov	arg02, result1
19278     18 13 02 F6 | 	mov	arg01, local06
1927c     84 BE B0 FD | 	call	#__system___string_concat
19280     FD 30 02 F6 | 	mov	local06, result1
19284     01 2E 06 F1 | 	add	local05, #1
19288     BC FF 9F FD | 	jmp	#LR__2071
1928c                 | LR__2072
1928c     93 01 00 FF 
19290     4C 17 06 F6 | 	mov	arg03, ##@LR__5666
19294     01 12 06 F6 | 	mov	arg01, #1
19298     18 15 02 F6 | 	mov	arg02, local06
1929c     10 D7 B0 FD | 	call	#__system__Instr
192a0     FD 2E 02 F6 | 	mov	local05, result1
192a4     18 13 02 F6 | 	mov	arg01, local06
192a8     09 33 02 F6 | 	mov	local07, arg01
192ac     97 06 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
192b0                 | LR__2073
192b0     19 FB C9 FA | 	rdbyte	result1, local07 wz
192b4     01 32 06 51 |  if_ne	add	local07, #1
192b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2073
192bc                 | LR__2074
192bc     09 33 82 F1 | 	sub	local07, arg01
192c0     19 15 02 F6 | 	mov	arg02, local07
192c4     17 15 82 F1 | 	sub	arg02, local05
192c8     04 14 86 F1 | 	sub	arg02, #4
192cc     18 13 02 F6 | 	mov	arg01, local06
192d0     20 D2 B0 FD | 	call	#__system__Right_S
192d4     FD 12 02 F6 | 	mov	arg01, result1
192d8     1C D6 B0 FD | 	call	#__system__RTrim_S
192dc     FD 12 02 F6 | 	mov	arg01, result1
192e0     54 D5 B0 FD | 	call	#__system__LTrim_S
192e4     FD 30 02 F6 | 	mov	local06, result1
192e8     0C 00 90 FD | 	jmp	#LR__2076
192ec                 | LR__2075
192ec                 | '   return ("") 'todo proper err
192ec     93 01 00 FF 
192f0     51 FB 05 F6 | 	mov	result1, ##@LR__5667
192f4     04 00 90 FD | 	jmp	#LR__2077
192f8                 | LR__2076
192f8                 | ' return readline
192f8     18 FB 01 F6 | 	mov	result1, local06
192fc                 | LR__2077
192fc     A7 F0 03 F6 | 	mov	ptra, fp
19300     B2 00 A0 FD | 	call	#popregs_
19304                 | _read_next_line_ret
19304     2D 00 64 FD | 	ret
19308                 | 
19308                 | ' 
19308                 | ' sub do_read
19308                 | _do_read
19308     17 4A 05 F6 | 	mov	COUNT_, #23
1930c     A8 00 A0 FD | 	call	#pushregs_
19310     58 F1 07 F1 | 	add	ptra, #344
19314     4A 00 00 FF 
19318     A0 E4 05 F1 | 	add	objptr, ##38048
1931c     F2 2C 02 FB | 	rdlong	local04, objptr
19320     16 2F 02 F6 | 	mov	local05, local04
19324     01 2E 66 F0 | 	shl	local05, #1
19328     16 2F 02 F1 | 	add	local05, local04
1932c     02 2E 66 F0 | 	shl	local05, #2
19330     03 00 00 FF 
19334     04 E4 85 F1 | 	sub	objptr, ##1540
19338     F2 30 02 F6 | 	mov	local06, objptr
1933c     F2 2E 02 F1 | 	add	local05, objptr
19340     17 33 02 FB | 	rdlong	local07, local05
19344                 | ' 
19344                 | ' 
19344                 | ' numpar=compiledline(lineptr_e).result.uresult
19344                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
19344     01 32 16 F2 | 	cmp	local07, #1 wc
19348     47 00 00 FF 
1934c     9C E4 85 F1 | 	sub	objptr, ##36508
19350     08 00 90 CD |  if_b	jmp	#LR__2080
19354     41 32 16 F2 | 	cmp	local07, #65 wc
19358     50 00 90 CD |  if_b	jmp	#LR__2081
1935c                 | LR__2080
1935c     00 12 06 F6 | 	mov	arg01, #0
19360     30 08 B1 FD | 	call	#__system___getiolock_0622
19364     FD 12 02 F6 | 	mov	arg01, result1
19368     3C BD B0 FD | 	call	#__system___lockmem
1936c     93 01 00 FF 
19370     52 15 06 F6 | 	mov	arg02, ##@LR__5668
19374     00 12 06 F6 | 	mov	arg01, #0
19378     00 16 06 F6 | 	mov	arg03, #0
1937c     48 C5 B0 FD | 	call	#__system___basic_print_string
19380     00 12 06 F6 | 	mov	arg01, #0
19384     0C 08 B1 FD | 	call	#__system___getiolock_0622
19388     FD 00 68 FC | 	wrlong	#0, result1
1938c     50 00 00 FF 
19390     10 E5 05 F1 | 	add	objptr, ##41232
19394     F2 14 02 FB | 	rdlong	arg02, objptr
19398     50 00 00 FF 
1939c     10 E5 85 F1 | 	sub	objptr, ##41232
193a0     27 12 06 F6 | 	mov	arg01, #39
193a4     78 68 B0 FD | 	call	#_printerror
193a8     A8 09 90 FD | 	jmp	#LR__2128
193ac                 | LR__2081
193ac                 | ' i=numpar-1
193ac                 | ' if readline="" then readline=read_next_line() ': print readline
193ac     52 00 00 FF 
193b0     34 E5 05 F1 | 	add	objptr, ##42292
193b4     F2 12 02 FB | 	rdlong	arg01, objptr
193b8     52 00 00 FF 
193bc     34 E5 85 F1 | 	sub	objptr, ##42292
193c0     93 01 00 FF 
193c4     5C 15 06 F6 | 	mov	arg02, ##@LR__5669
193c8     04 BD B0 FD | 	call	#__system___string_cmp
193cc     00 FA 0D F2 | 	cmp	result1, #0 wz
193d0     18 00 90 5D |  if_ne	jmp	#LR__2082
193d4     34 FD BF FD | 	call	#_read_next_line
193d8     52 00 00 FF 
193dc     34 E5 05 F1 | 	add	objptr, ##42292
193e0     F2 FA 61 FC | 	wrlong	result1, objptr
193e4     52 00 00 FF 
193e8     34 E5 85 F1 | 	sub	objptr, ##42292
193ec                 | LR__2082
193ec                 | ' if readline="" then printerror(55,runheader(0)) :return
193ec     52 00 00 FF 
193f0     34 E5 05 F1 | 	add	objptr, ##42292
193f4     F2 12 02 FB | 	rdlong	arg01, objptr
193f8     52 00 00 FF 
193fc     34 E5 85 F1 | 	sub	objptr, ##42292
19400     93 01 00 FF 
19404     5D 15 06 F6 | 	mov	arg02, ##@LR__5670
19408     C4 BC B0 FD | 	call	#__system___string_cmp
1940c     00 FA 0D F2 | 	cmp	result1, #0 wz
19410     20 00 90 5D |  if_ne	jmp	#LR__2083
19414     50 00 00 FF 
19418     10 E5 05 F1 | 	add	objptr, ##41232
1941c     F2 14 02 FB | 	rdlong	arg02, objptr
19420     50 00 00 FF 
19424     10 E5 85 F1 | 	sub	objptr, ##41232
19428     37 12 06 F6 | 	mov	arg01, #55
1942c     F0 67 B0 FD | 	call	#_printerror
19430     20 09 90 FD | 	jmp	#LR__2128
19434                 | LR__2083
19434     00 34 06 F6 | 	mov	local08, #0
19438     19 37 02 F6 | 	mov	local09, local07
1943c     01 36 86 F1 | 	sub	local09, #1
19440                 | ' j=0
19440                 | ' i=numpar-1
19440                 | ' do
19440                 | LR__2084
19440                 | '   do
19440                 | LR__2085
19440     52 00 00 FF 
19444     34 E5 05 F1 | 	add	objptr, ##42292
19448     F2 14 02 FB | 	rdlong	arg02, objptr
1944c     52 00 00 FF 
19450     34 E5 85 F1 | 	sub	objptr, ##42292
19454     93 01 00 FF 
19458     5E 17 06 F6 | 	mov	arg03, ##@LR__5671
1945c     01 12 06 F6 | 	mov	arg01, #1
19460     4C D5 B0 FD | 	call	#__system__Instr
19464     FD 16 02 F6 | 	mov	arg03, result1
19468                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19468     01 16 16 F2 | 	cmp	arg03, #1 wc
1946c     34 00 90 CD |  if_b	jmp	#LR__2086
19470     52 00 00 FF 
19474     34 E5 05 F1 | 	add	objptr, ##42292
19478     F2 12 02 FB | 	rdlong	arg01, objptr
1947c     52 00 00 FF 
19480     34 E5 85 F1 | 	sub	objptr, ##42292
19484     01 16 86 F1 | 	sub	arg03, #1
19488     0B 15 02 F6 | 	mov	arg02, arg03
1948c     DC CF B0 FD | 	call	#__system__Left_S
19490     52 00 00 FF 
19494     34 E5 05 F1 | 	add	objptr, ##42292
19498     F2 FA 61 FC | 	wrlong	result1, objptr
1949c     52 00 00 FF 
194a0     34 E5 85 F1 | 	sub	objptr, ##42292
194a4                 | LR__2086
194a4     52 00 00 FF 
194a8     34 E5 05 F1 | 	add	objptr, ##42292
194ac     F2 14 02 FB | 	rdlong	arg02, objptr
194b0     52 00 00 FF 
194b4     34 E5 85 F1 | 	sub	objptr, ##42292
194b8     93 01 00 FF 
194bc     60 17 06 F6 | 	mov	arg03, ##@LR__5672
194c0     01 12 06 F6 | 	mov	arg01, #1
194c4     E8 D4 B0 FD | 	call	#__system__Instr
194c8     FD 38 02 F6 | 	mov	local10, result1
194cc                 | '     comma=instr(1,readline,",")  
194cc                 | '       if comma>0  then 
194cc     01 38 16 F2 | 	cmp	local10, #1 wc
194d0     7C 00 90 CD |  if_b	jmp	#LR__2089
194d4     52 00 00 FF 
194d8     34 E5 05 F1 | 	add	objptr, ##42292
194dc     F2 12 02 FB | 	rdlong	arg01, objptr
194e0     52 00 00 FF 
194e4     34 E5 85 F1 | 	sub	objptr, ##42292
194e8     1C 15 02 F6 | 	mov	arg02, local10
194ec     01 14 86 F1 | 	sub	arg02, #1
194f0     78 CF B0 FD | 	call	#__system__Left_S
194f4     FD 3A 02 F6 | 	mov	local11, result1
194f8     52 00 00 FF 
194fc     34 E5 05 F1 | 	add	objptr, ##42292
19500     F2 30 02 FB | 	rdlong	local06, objptr
19504     52 00 00 FF 
19508     34 E5 85 F1 | 	sub	objptr, ##42292
1950c     18 13 02 F6 | 	mov	arg01, local06
19510     09 3D 02 F6 | 	mov	local12, arg01
19514     97 06 48 FB | 	callpa	#(@LR__2088-@LR__2087)>>2,fcache_load_ptr_
19518                 | LR__2087
19518     1E FB C9 FA | 	rdbyte	result1, local12 wz
1951c     01 3C 06 51 |  if_ne	add	local12, #1
19520     F4 FF 9F 5D |  if_ne	jmp	#LR__2087
19524                 | LR__2088
19524     09 3D 82 F1 | 	sub	local12, arg01
19528     1E 15 02 F6 | 	mov	arg02, local12
1952c     1C 15 82 F1 | 	sub	arg02, local10
19530     18 13 02 F6 | 	mov	arg01, local06
19534     BC CF B0 FD | 	call	#__system__Right_S
19538     52 00 00 FF 
1953c     34 E5 05 F1 | 	add	objptr, ##42292
19540     F2 FA 61 FC | 	wrlong	result1, objptr
19544     52 00 00 FF 
19548     34 E5 85 F1 | 	sub	objptr, ##42292
1954c     40 00 90 FD | 	jmp	#LR__2090
19550                 | LR__2089
19550     52 00 00 FF 
19554     34 E5 05 F1 | 	add	objptr, ##42292
19558     F2 12 02 FB | 	rdlong	arg01, objptr
1955c     52 00 00 FF 
19560     34 E5 85 F1 | 	sub	objptr, ##42292
19564     90 D3 B0 FD | 	call	#__system__RTrim_S
19568     FD 12 02 F6 | 	mov	arg01, result1
1956c     C8 D2 B0 FD | 	call	#__system__LTrim_S
19570     FD 3A 02 F6 | 	mov	local11, result1
19574     93 01 00 FF 
19578     62 3F 06 F6 | 	mov	local13, ##@LR__5673
1957c     52 00 00 FF 
19580     34 E5 05 F1 | 	add	objptr, ##42292
19584     F2 3E 62 FC | 	wrlong	local13, objptr
19588     52 00 00 FF 
1958c     34 E5 85 F1 | 	sub	objptr, ##42292
19590                 | LR__2090
19590                 | '      
19590                 | '      if part$<>"" then j=j+1
19590     93 01 00 FF 
19594     63 15 06 F6 | 	mov	arg02, ##@LR__5674
19598     1D 13 02 F6 | 	mov	arg01, local11
1959c     30 BB B0 FD | 	call	#__system___string_cmp
195a0     00 FA 0D F2 | 	cmp	result1, #0 wz
195a4     01 34 06 51 |  if_ne	add	local08, #1
195a8     1B 17 02 F6 | 	mov	arg03, local09
195ac     02 16 66 F0 | 	shl	arg03, #2
195b0     A7 2C 02 F6 | 	mov	local04, fp
195b4     2C 2C 06 F1 | 	add	local04, #44
195b8     16 17 02 F1 | 	add	arg03, local04
195bc     0B 3B 62 FC | 	wrlong	local11, arg03
195c0     01 36 86 F1 | 	sub	local09, #1
195c4                 | '      args(i)=part$  
195c4                 | '      i=i-1
195c4                 | '     if readline="" then readline=read_next_line() 
195c4     52 00 00 FF 
195c8     34 E5 05 F1 | 	add	objptr, ##42292
195cc     F2 12 02 FB | 	rdlong	arg01, objptr
195d0     52 00 00 FF 
195d4     34 E5 85 F1 | 	sub	objptr, ##42292
195d8     93 01 00 FF 
195dc     64 15 06 F6 | 	mov	arg02, ##@LR__5675
195e0     EC BA B0 FD | 	call	#__system___string_cmp
195e4     00 FA 0D F2 | 	cmp	result1, #0 wz
195e8     18 00 90 5D |  if_ne	jmp	#LR__2091
195ec     1C FB BF FD | 	call	#_read_next_line
195f0     52 00 00 FF 
195f4     34 E5 05 F1 | 	add	objptr, ##42292
195f8     F2 FA 61 FC | 	wrlong	result1, objptr
195fc     52 00 00 FF 
19600     34 E5 85 F1 | 	sub	objptr, ##42292
19604                 | LR__2091
19604     00 36 56 F2 | 	cmps	local09, #0 wc
19608     28 00 90 CD |  if_b	jmp	#LR__2092
1960c     52 00 00 FF 
19610     34 E5 05 F1 | 	add	objptr, ##42292
19614     F2 12 02 FB | 	rdlong	arg01, objptr
19618     52 00 00 FF 
1961c     34 E5 85 F1 | 	sub	objptr, ##42292
19620     93 01 00 FF 
19624     65 15 06 F6 | 	mov	arg02, ##@LR__5676
19628     A4 BA B0 FD | 	call	#__system___string_cmp
1962c     00 FA 0D F2 | 	cmp	result1, #0 wz
19630     0C FE 9F 5D |  if_ne	jmp	#LR__2085
19634                 | LR__2092
19634     00 36 56 F2 | 	cmps	local09, #0 wc
19638     04 FE 9F 3D |  if_ae	jmp	#LR__2084
1963c                 | ' if j<numpar then printerror(55,runheader(0))
1963c     19 35 52 F2 | 	cmps	local08, local07 wc
19640     50 00 00 CF 
19644     10 E5 05 C1 |  if_b	add	objptr, ##41232
19648     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1964c     50 00 00 CF 
19650     10 E5 85 C1 |  if_b	sub	objptr, ##41232
19654     37 12 06 C6 |  if_b	mov	arg01, #55
19658     C4 65 B0 CD |  if_b	call	#_printerror
1965c                 | ' 
1965c                 | ' for i=0 to numpar-1
1965c     00 36 06 F6 | 	mov	local09, #0
19660     19 41 02 F6 | 	mov	local14, local07
19664                 | LR__2093
19664     20 37 52 F2 | 	cmps	local09, local14 wc
19668     E8 06 90 3D |  if_ae	jmp	#LR__2127
1966c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1966c     1B 2F 02 F6 | 	mov	local05, local09
19670     02 2E 66 F0 | 	shl	local05, #2
19674     A7 30 02 F6 | 	mov	local06, fp
19678     2C 30 06 F1 | 	add	local06, #44
1967c     18 2F 02 F1 | 	add	local05, local06
19680     17 13 02 FB | 	rdlong	arg01, local05
19684     8C D2 BE FD | 	call	#_isnum
19688     FD 3E 02 F6 | 	mov	local13, result1
1968c     1B 43 02 F6 | 	mov	local15, local09
19690     02 42 66 F0 | 	shl	local15, #2
19694     A7 44 02 F6 | 	mov	local16, fp
19698     2C 44 06 F1 | 	add	local16, #44
1969c     22 43 02 F1 | 	add	local15, local16
196a0     21 13 02 FB | 	rdlong	arg01, local15
196a4     58 D6 BE FD | 	call	#_isint
196a8     07 FA 65 F7 | 	signx	result1, #7
196ac     FD 3E 2A F5 | 	andn	local13, result1 wz
196b0     52 00 00 5F 
196b4     68 E5 05 51 |  if_ne	add	objptr, ##42344
196b8     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
196bc     52 00 00 5F 
196c0     68 E5 85 51 |  if_ne	sub	objptr, ##42344
196c4                 | '   if isint(args(i)) then r=result_int 
196c4     1B 2D 02 F6 | 	mov	local04, local09
196c8     02 2C 66 F0 | 	shl	local04, #2
196cc     A7 2E 02 F6 | 	mov	local05, fp
196d0     2C 2E 06 F1 | 	add	local05, #44
196d4     17 2D 02 F1 | 	add	local04, local05
196d8     16 13 02 FB | 	rdlong	arg01, local04
196dc     20 D6 BE FD | 	call	#_isint
196e0     00 FA 0D F2 | 	cmp	result1, #0 wz
196e4     52 00 00 5F 
196e8     68 E5 05 51 |  if_ne	add	objptr, ##42344
196ec     F2 38 68 5C |  if_ne	wrlong	#28, objptr
196f0     52 00 00 5F 
196f4     68 E5 85 51 |  if_ne	sub	objptr, ##42344
196f8                 | '   if isdec(args(i)) then r=result_uint 
196f8     1B 2D 02 F6 | 	mov	local04, local09
196fc     02 2C 66 F0 | 	shl	local04, #2
19700     A7 2E 02 F6 | 	mov	local05, fp
19704     2C 2E 06 F1 | 	add	local05, #44
19708     17 2D 02 F1 | 	add	local04, local05
1970c     16 13 02 FB | 	rdlong	arg01, local04
19710     90 D8 BE FD | 	call	#_isdec
19714     00 FA 0D F2 | 	cmp	result1, #0 wz
19718     52 00 00 5F 
1971c     68 E5 05 51 |  if_ne	add	objptr, ##42344
19720     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
19724     52 00 00 5F 
19728     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1972c                 | '   if not isnum(args(i)) then 
1972c     1B 2F 02 F6 | 	mov	local05, local09
19730     02 2E 66 F0 | 	shl	local05, #2
19734     A7 30 02 F6 | 	mov	local06, fp
19738     2C 30 06 F1 | 	add	local06, #44
1973c     18 2F 02 F1 | 	add	local05, local06
19740     17 13 02 FB | 	rdlong	arg01, local05
19744     CC D1 BE FD | 	call	#_isnum
19748     07 FA 65 F7 | 	signx	result1, #7
1974c     FD FA 21 F6 | 	not	result1, result1
19750     00 FA 0D F2 | 	cmp	result1, #0 wz
19754     FC 00 90 AD |  if_e	jmp	#LR__2098
19758     52 00 00 FF 
1975c     68 E5 05 F1 | 	add	objptr, ##42344
19760     F2 56 68 FC | 	wrlong	#43, objptr
19764     52 00 00 FF 
19768     68 E5 85 F1 | 	sub	objptr, ##42344
1976c     1B 2D 02 F6 | 	mov	local04, local09
19770     02 2C 66 F0 | 	shl	local04, #2
19774     A7 2E 02 F6 | 	mov	local05, fp
19778     2C 2E 06 F1 | 	add	local05, #44
1977c     17 2D 02 F1 | 	add	local04, local05
19780     16 13 02 FB | 	rdlong	arg01, local04
19784     09 3D 02 F6 | 	mov	local12, arg01
19788     97 06 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
1978c                 | LR__2094
1978c     1E FB C9 FA | 	rdbyte	result1, local12 wz
19790     01 3C 06 51 |  if_ne	add	local12, #1
19794     F4 FF 9F 5D |  if_ne	jmp	#LR__2094
19798                 | LR__2095
19798     09 3D 82 F1 | 	sub	local12, arg01
1979c     1E 47 02 F6 | 	mov	local17, local12
197a0     52 00 00 FF 
197a4     F0 E4 05 F1 | 	add	objptr, ##42224
197a8     F2 12 02 FB | 	rdlong	arg01, objptr
197ac     23 13 82 F1 | 	sub	arg01, local17
197b0     04 12 86 F1 | 	sub	arg01, #4
197b4     03 12 26 F5 | 	andn	arg01, #3
197b8     F2 12 62 FC | 	wrlong	arg01, objptr
197bc     52 00 00 FF 
197c0     F0 E4 85 F1 | 	sub	objptr, ##42224
197c4     23 15 02 F6 | 	mov	arg02, local17
197c8     F0 64 B0 FD | 	call	#_pslpoke
197cc                 | '     pslpoke memtop,l
197cc                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
197cc     01 34 06 F6 | 	mov	local08, #1
197d0     23 49 02 F6 | 	mov	local18, local17
197d4     01 48 06 F1 | 	add	local18, #1
197d8                 | LR__2096
197d8     24 35 52 F2 | 	cmps	local08, local18 wc
197dc     60 00 90 3D |  if_ae	jmp	#LR__2097
197e0     52 00 00 FF 
197e4     F0 E4 05 F1 | 	add	objptr, ##42224
197e8     F2 3E 02 FB | 	rdlong	local13, objptr
197ec     52 00 00 FF 
197f0     F0 E4 85 F1 | 	sub	objptr, ##42224
197f4     03 3E 06 F1 | 	add	local13, #3
197f8     1A 3F 02 F1 | 	add	local13, local08
197fc     1B 43 02 F6 | 	mov	local15, local09
19800     02 42 66 F0 | 	shl	local15, #2
19804     A7 44 02 F6 | 	mov	local16, fp
19808     2C 44 06 F1 | 	add	local16, #44
1980c     22 43 02 F1 | 	add	local15, local16
19810     21 13 02 FB | 	rdlong	arg01, local15
19814     1A 31 02 F6 | 	mov	local06, local08
19818     01 42 06 F6 | 	mov	local15, #1
1981c     18 15 02 F6 | 	mov	arg02, local06
19820     01 16 06 F6 | 	mov	arg03, #1
19824     58 CD B0 FD | 	call	#__system__Mid_S
19828     FD 2E 02 F6 | 	mov	local05, result1
1982c     17 15 C2 FA | 	rdbyte	arg02, local05
19830     1F 13 02 F6 | 	mov	arg01, local13
19834     14 65 B0 FD | 	call	#_pspoke
19838     01 34 06 F1 | 	add	local08, #1
1983c     98 FF 9F FD | 	jmp	#LR__2096
19840                 | LR__2097
19840     52 00 00 FF 
19844     F0 E4 05 F1 | 	add	objptr, ##42224
19848     F2 4A 02 FB | 	rdlong	local19, objptr
1984c     52 00 00 FF 
19850     F0 E4 85 F1 | 	sub	objptr, ##42224
19854                 | LR__2098
19854     E8 3C BF FD | 	call	#_pop
19858     FE 4C 02 F6 | 	mov	local20, result2
1985c     FF 2C 02 F6 | 	mov	local04, result3
19860     FD 26 02 F6 | 	mov	local01, result1
19864     26 29 02 F6 | 	mov	local02, local20
19868     16 2B 02 F6 | 	mov	local03, local04
1986c                 | '   t1=pop() 
1986c                 | '   if i>=numpar-j then
1986c     19 3F 02 F6 | 	mov	local13, local07
19870     1A 3F 82 F1 | 	sub	local13, local08
19874     1F 37 52 F2 | 	cmps	local09, local13 wc
19878     D0 04 90 CD |  if_b	jmp	#LR__2126
1987c     14 4F 02 F6 | 	mov	local21, local02
19880                 | '     vartype=t1.result.twowords(1)
19880                 | '     select case vartype
19880     27 51 0A F6 | 	mov	local22, local21 wz
19884     64 00 90 AD |  if_e	jmp	#LR__2099
19888     00 51 0E F2 | 	cmp	local22, #256 wz
1988c     64 00 90 AD |  if_e	jmp	#LR__2100
19890     01 51 0E F2 | 	cmp	local22, #257 wz
19894     64 00 90 AD |  if_e	jmp	#LR__2101
19898     02 51 0E F2 | 	cmp	local22, #258 wz
1989c     64 00 90 AD |  if_e	jmp	#LR__2102
198a0     03 51 0E F2 | 	cmp	local22, #259 wz
198a4     64 00 90 AD |  if_e	jmp	#LR__2103
198a8     04 51 0E F2 | 	cmp	local22, #260 wz
198ac     64 00 90 AD |  if_e	jmp	#LR__2104
198b0     05 51 0E F2 | 	cmp	local22, #261 wz
198b4     64 00 90 AD |  if_e	jmp	#LR__2105
198b8     06 51 0E F2 | 	cmp	local22, #262 wz
198bc     64 00 90 AD |  if_e	jmp	#LR__2106
198c0     07 51 0E F2 | 	cmp	local22, #263 wz
198c4     64 00 90 AD |  if_e	jmp	#LR__2107
198c8     08 51 0E F2 | 	cmp	local22, #264 wz
198cc     64 00 90 AD |  if_e	jmp	#LR__2108
198d0     09 51 0E F2 | 	cmp	local22, #265 wz
198d4     64 00 90 AD |  if_e	jmp	#LR__2109
198d8     0A 51 0E F2 | 	cmp	local22, #266 wz
198dc     64 00 90 AD |  if_e	jmp	#LR__2110
198e0     0B 51 0E F2 | 	cmp	local22, #267 wz
198e4     64 00 90 AD |  if_e	jmp	#LR__2111
198e8     68 00 90 FD | 	jmp	#LR__2112
198ec                 | LR__2099
198ec     0C 52 06 F6 | 	mov	local23, #12
198f0     64 00 90 FD | 	jmp	#LR__2113
198f4                 | LR__2100
198f4     0C 52 06 F6 | 	mov	local23, #12
198f8     5C 00 90 FD | 	jmp	#LR__2113
198fc                 | LR__2101
198fc     01 52 06 F6 | 	mov	local23, #1
19900     54 00 90 FD | 	jmp	#LR__2113
19904                 | LR__2102
19904     01 52 06 F6 | 	mov	local23, #1
19908     4C 00 90 FD | 	jmp	#LR__2113
1990c                 | LR__2103
1990c     02 52 06 F6 | 	mov	local23, #2
19910     44 00 90 FD | 	jmp	#LR__2113
19914                 | LR__2104
19914     02 52 06 F6 | 	mov	local23, #2
19918     3C 00 90 FD | 	jmp	#LR__2113
1991c                 | LR__2105
1991c     04 52 06 F6 | 	mov	local23, #4
19920     34 00 90 FD | 	jmp	#LR__2113
19924                 | LR__2106
19924     04 52 06 F6 | 	mov	local23, #4
19928     2C 00 90 FD | 	jmp	#LR__2113
1992c                 | LR__2107
1992c     08 52 06 F6 | 	mov	local23, #8
19930     24 00 90 FD | 	jmp	#LR__2113
19934                 | LR__2108
19934     08 52 06 F6 | 	mov	local23, #8
19938     1C 00 90 FD | 	jmp	#LR__2113
1993c                 | LR__2109
1993c     06 52 06 F6 | 	mov	local23, #6
19940     14 00 90 FD | 	jmp	#LR__2113
19944                 | LR__2110
19944     08 52 06 F6 | 	mov	local23, #8
19948     0C 00 90 FD | 	jmp	#LR__2113
1994c                 | LR__2111
1994c     05 52 06 F6 | 	mov	local23, #5
19950     04 00 90 FD | 	jmp	#LR__2113
19954                 | LR__2112
19954     0C 52 06 F6 | 	mov	local23, #12
19958                 | LR__2113
19958                 | '     if esize=12 andalso t1.result.uresult<$80000 then
19958     0C 52 0E F2 | 	cmp	local23, #12 wz
1995c     34 01 90 5D |  if_ne	jmp	#LR__2117
19960     00 04 00 FF 
19964     00 26 16 F2 | 	cmp	local01, ##524288 wc
19968     28 01 90 3D |  if_ae	jmp	#LR__2117
1996c                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1996c     52 00 00 FF 
19970     68 E5 05 F1 | 	add	objptr, ##42344
19974     F2 3E 02 FB | 	rdlong	local13, objptr
19978     52 00 00 FF 
1997c     68 E5 85 F1 | 	sub	objptr, ##42344
19980     1C 3E 0E F2 | 	cmp	local13, #28 wz
19984     2C 00 90 5D |  if_ne	jmp	#LR__2114
19988     1B 2F 02 F6 | 	mov	local05, local09
1998c     02 2E 66 F0 | 	shl	local05, #2
19990     A7 30 02 F6 | 	mov	local06, fp
19994     2C 30 06 F1 | 	add	local06, #44
19998     18 2F 02 F1 | 	add	local05, local06
1999c     17 13 02 FB | 	rdlong	arg01, local05
199a0     00 14 06 F6 | 	mov	arg02, #0
199a4     F8 DB B0 FD | 	call	#__system____builtin_atoi
199a8     FD 14 02 F6 | 	mov	arg02, result1
199ac     13 13 02 F6 | 	mov	arg01, local01
199b0     09 15 62 FC | 	wrlong	arg02, arg01
199b4                 | LR__2114
199b4                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
199b4     52 00 00 FF 
199b8     68 E5 05 F1 | 	add	objptr, ##42344
199bc     F2 3E 02 FB | 	rdlong	local13, objptr
199c0     52 00 00 FF 
199c4     68 E5 85 F1 | 	sub	objptr, ##42344
199c8     1D 3E 0E F2 | 	cmp	local13, #29 wz
199cc     2C 00 90 5D |  if_ne	jmp	#LR__2115
199d0     1B 2F 02 F6 | 	mov	local05, local09
199d4     02 2E 66 F0 | 	shl	local05, #2
199d8     A7 30 02 F6 | 	mov	local06, fp
199dc     2C 30 06 F1 | 	add	local06, #44
199e0     18 2F 02 F1 | 	add	local05, local06
199e4     17 13 02 FB | 	rdlong	arg01, local05
199e8     00 14 06 F6 | 	mov	arg02, #0
199ec     B0 DB B0 FD | 	call	#__system____builtin_atoi
199f0     FD 14 02 F6 | 	mov	arg02, result1
199f4     13 13 02 F6 | 	mov	arg01, local01
199f8     09 15 62 FC | 	wrlong	arg02, arg01
199fc                 | LR__2115
199fc                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
199fc     52 00 00 FF 
19a00     68 E5 05 F1 | 	add	objptr, ##42344
19a04     F2 3E 02 FB | 	rdlong	local13, objptr
19a08     52 00 00 FF 
19a0c     68 E5 85 F1 | 	sub	objptr, ##42344
19a10     1E 3E 0E F2 | 	cmp	local13, #30 wz
19a14     3C 00 90 5D |  if_ne	jmp	#LR__2116
19a18     1B 2D 02 F6 | 	mov	local04, local09
19a1c     02 2C 66 F0 | 	shl	local04, #2
19a20     A7 2E 02 F6 | 	mov	local05, fp
19a24     2C 2E 06 F1 | 	add	local05, #44
19a28     17 2D 02 F1 | 	add	local04, local05
19a2c     16 13 02 FB | 	rdlong	arg01, local04
19a30     04 DD B0 FD | 	call	#__system____builtin_atof
19a34     28 4E 05 F1 | 	add	fp, #40
19a38     A7 FA 61 FC | 	wrlong	result1, fp
19a3c     A7 12 02 F6 | 	mov	arg01, fp
19a40     28 4E 85 F1 | 	sub	fp, #40
19a44     09 FB 01 FB | 	rdlong	result1, arg01
19a48     FD 14 02 F6 | 	mov	arg02, result1
19a4c     13 13 02 F6 | 	mov	arg01, local01
19a50     09 15 62 FC | 	wrlong	arg02, arg01
19a54                 | LR__2116
19a54                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19a54     52 00 00 FF 
19a58     68 E5 05 F1 | 	add	objptr, ##42344
19a5c     F2 3E 02 FB | 	rdlong	local13, objptr
19a60     2B 3E 0E F2 | 	cmp	local13, #43 wz
19a64     13 13 02 A6 |  if_e	mov	arg01, local01
19a68     25 15 02 A6 |  if_e	mov	arg02, local19
19a6c     09 15 62 AC |  if_e	wrlong	arg02, arg01
19a70     13 3F 02 F6 | 	mov	local13, local01
19a74     08 3E 06 F1 | 	add	local13, #8
19a78     F2 2C 02 FB | 	rdlong	local04, objptr
19a7c     52 00 00 FF 
19a80     68 E5 85 F1 | 	sub	objptr, ##42344
19a84     16 4D 02 F6 | 	mov	local20, local04
19a88     1F 13 02 F6 | 	mov	arg01, local13
19a8c     26 15 02 F6 | 	mov	arg02, local20
19a90     09 15 62 FC | 	wrlong	arg02, arg01
19a94                 | LR__2117
19a94                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19a94     0C 52 0E F2 | 	cmp	local23, #12 wz
19a98     38 01 90 5D |  if_ne	jmp	#LR__2121
19a9c     00 04 00 FF 
19aa0     00 26 16 F2 | 	cmp	local01, ##524288 wc
19aa4     2C 01 90 CD |  if_b	jmp	#LR__2121
19aa8                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
19aa8     52 00 00 FF 
19aac     68 E5 05 F1 | 	add	objptr, ##42344
19ab0     F2 3E 02 FB | 	rdlong	local13, objptr
19ab4     52 00 00 FF 
19ab8     68 E5 85 F1 | 	sub	objptr, ##42344
19abc     1C 3E 0E F2 | 	cmp	local13, #28 wz
19ac0     2C 00 90 5D |  if_ne	jmp	#LR__2118
19ac4     1B 2F 02 F6 | 	mov	local05, local09
19ac8     02 2E 66 F0 | 	shl	local05, #2
19acc     A7 30 02 F6 | 	mov	local06, fp
19ad0     2C 30 06 F1 | 	add	local06, #44
19ad4     18 2F 02 F1 | 	add	local05, local06
19ad8     17 13 02 FB | 	rdlong	arg01, local05
19adc     00 14 06 F6 | 	mov	arg02, #0
19ae0     BC DA B0 FD | 	call	#__system____builtin_atoi
19ae4     FD 14 02 F6 | 	mov	arg02, result1
19ae8     13 13 02 F6 | 	mov	arg01, local01
19aec     CC 61 B0 FD | 	call	#_pslpoke
19af0                 | LR__2118
19af0                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
19af0     52 00 00 FF 
19af4     68 E5 05 F1 | 	add	objptr, ##42344
19af8     F2 3E 02 FB | 	rdlong	local13, objptr
19afc     52 00 00 FF 
19b00     68 E5 85 F1 | 	sub	objptr, ##42344
19b04     1D 3E 0E F2 | 	cmp	local13, #29 wz
19b08     2C 00 90 5D |  if_ne	jmp	#LR__2119
19b0c     1B 2F 02 F6 | 	mov	local05, local09
19b10     02 2E 66 F0 | 	shl	local05, #2
19b14     A7 30 02 F6 | 	mov	local06, fp
19b18     2C 30 06 F1 | 	add	local06, #44
19b1c     18 2F 02 F1 | 	add	local05, local06
19b20     17 13 02 FB | 	rdlong	arg01, local05
19b24     00 14 06 F6 | 	mov	arg02, #0
19b28     74 DA B0 FD | 	call	#__system____builtin_atoi
19b2c     FD 14 02 F6 | 	mov	arg02, result1
19b30     13 13 02 F6 | 	mov	arg01, local01
19b34     84 61 B0 FD | 	call	#_pslpoke
19b38                 | LR__2119
19b38                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19b38     52 00 00 FF 
19b3c     68 E5 05 F1 | 	add	objptr, ##42344
19b40     F2 3E 02 FB | 	rdlong	local13, objptr
19b44     52 00 00 FF 
19b48     68 E5 85 F1 | 	sub	objptr, ##42344
19b4c     1E 3E 0E F2 | 	cmp	local13, #30 wz
19b50     38 00 90 5D |  if_ne	jmp	#LR__2120
19b54     1B 2D 02 F6 | 	mov	local04, local09
19b58     02 2C 66 F0 | 	shl	local04, #2
19b5c     A7 2E 02 F6 | 	mov	local05, fp
19b60     2C 2E 06 F1 | 	add	local05, #44
19b64     17 2D 02 F1 | 	add	local04, local05
19b68     16 13 02 FB | 	rdlong	arg01, local04
19b6c     C8 DB B0 FD | 	call	#__system____builtin_atof
19b70     28 4E 05 F1 | 	add	fp, #40
19b74     A7 FA 61 FC | 	wrlong	result1, fp
19b78     A7 12 02 F6 | 	mov	arg01, fp
19b7c     28 4E 85 F1 | 	sub	fp, #40
19b80     09 15 02 FB | 	rdlong	arg02, arg01
19b84     13 13 02 F6 | 	mov	arg01, local01
19b88     30 61 B0 FD | 	call	#_pslpoke
19b8c                 | LR__2120
19b8c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
19b8c     52 00 00 FF 
19b90     68 E5 05 F1 | 	add	objptr, ##42344
19b94     F2 3E 02 FB | 	rdlong	local13, objptr
19b98     52 00 00 FF 
19b9c     68 E5 85 F1 | 	sub	objptr, ##42344
19ba0     2B 3E 0E F2 | 	cmp	local13, #43 wz
19ba4     13 13 02 A6 |  if_e	mov	arg01, local01
19ba8     25 15 02 A6 |  if_e	mov	arg02, local19
19bac     0C 61 B0 AD |  if_e	call	#_pslpoke
19bb0     13 13 02 F6 | 	mov	arg01, local01
19bb4     08 12 06 F1 | 	add	arg01, #8
19bb8     52 00 00 FF 
19bbc     68 E5 05 F1 | 	add	objptr, ##42344
19bc0     F2 4C 02 FB | 	rdlong	local20, objptr
19bc4     52 00 00 FF 
19bc8     68 E5 85 F1 | 	sub	objptr, ##42344
19bcc     26 15 02 F6 | 	mov	arg02, local20
19bd0     E8 60 B0 FD | 	call	#_pslpoke
19bd4                 | LR__2121
19bd4                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19bd4     05 52 0E F2 | 	cmp	local23, #5 wz
19bd8     52 00 00 AF 
19bdc     68 E5 05 A1 |  if_e	add	objptr, ##42344
19be0     F2 4C 02 AB |  if_e	rdlong	local20, objptr
19be4     52 00 00 AF 
19be8     68 E5 85 A1 |  if_e	sub	objptr, ##42344
19bec     2B 4C 0E A2 |  if_e	cmp	local20, #43 wz
19bf0     25 4D 02 A6 |  if_e	mov	local20, local19
19bf4     13 13 02 A6 |  if_e	mov	arg01, local01
19bf8     26 15 02 A6 |  if_e	mov	arg02, local20
19bfc     BC 60 B0 AD |  if_e	call	#_pslpoke
19c00                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19c00     04 52 0E F2 | 	cmp	local23, #4 wz
19c04     48 00 90 5D |  if_ne	jmp	#LR__2122
19c08     52 00 00 FF 
19c0c     68 E5 05 F1 | 	add	objptr, ##42344
19c10     F2 4C 02 FB | 	rdlong	local20, objptr
19c14     52 00 00 FF 
19c18     68 E5 85 F1 | 	sub	objptr, ##42344
19c1c     2B 4C 0E F2 | 	cmp	local20, #43 wz
19c20     2C 00 90 AD |  if_e	jmp	#LR__2122
19c24     1B 2F 02 F6 | 	mov	local05, local09
19c28     02 2E 66 F0 | 	shl	local05, #2
19c2c     A7 30 02 F6 | 	mov	local06, fp
19c30     2C 30 06 F1 | 	add	local06, #44
19c34     18 2F 02 F1 | 	add	local05, local06
19c38     17 13 02 FB | 	rdlong	arg01, local05
19c3c     00 14 06 F6 | 	mov	arg02, #0
19c40     5C D9 B0 FD | 	call	#__system____builtin_atoi
19c44     FD 14 02 F6 | 	mov	arg02, result1
19c48     13 13 02 F6 | 	mov	arg01, local01
19c4c     6C 60 B0 FD | 	call	#_pslpoke
19c50                 | LR__2122
19c50                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19c50     02 52 0E F2 | 	cmp	local23, #2 wz
19c54     48 00 90 5D |  if_ne	jmp	#LR__2123
19c58     52 00 00 FF 
19c5c     68 E5 05 F1 | 	add	objptr, ##42344
19c60     F2 4C 02 FB | 	rdlong	local20, objptr
19c64     52 00 00 FF 
19c68     68 E5 85 F1 | 	sub	objptr, ##42344
19c6c     2B 4C 0E F2 | 	cmp	local20, #43 wz
19c70     2C 00 90 AD |  if_e	jmp	#LR__2123
19c74     1B 2F 02 F6 | 	mov	local05, local09
19c78     02 2E 66 F0 | 	shl	local05, #2
19c7c     A7 30 02 F6 | 	mov	local06, fp
19c80     2C 30 06 F1 | 	add	local06, #44
19c84     18 2F 02 F1 | 	add	local05, local06
19c88     17 13 02 FB | 	rdlong	arg01, local05
19c8c     00 14 06 F6 | 	mov	arg02, #0
19c90     0C D9 B0 FD | 	call	#__system____builtin_atoi
19c94     FD 14 02 F6 | 	mov	arg02, result1
19c98     13 13 02 F6 | 	mov	arg01, local01
19c9c     64 60 B0 FD | 	call	#_psdpoke
19ca0                 | LR__2123
19ca0                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19ca0     01 52 0E F2 | 	cmp	local23, #1 wz
19ca4     48 00 90 5D |  if_ne	jmp	#LR__2124
19ca8     52 00 00 FF 
19cac     68 E5 05 F1 | 	add	objptr, ##42344
19cb0     F2 4C 02 FB | 	rdlong	local20, objptr
19cb4     52 00 00 FF 
19cb8     68 E5 85 F1 | 	sub	objptr, ##42344
19cbc     2B 4C 0E F2 | 	cmp	local20, #43 wz
19cc0     2C 00 90 AD |  if_e	jmp	#LR__2124
19cc4     1B 2F 02 F6 | 	mov	local05, local09
19cc8     02 2E 66 F0 | 	shl	local05, #2
19ccc     A7 30 02 F6 | 	mov	local06, fp
19cd0     2C 30 06 F1 | 	add	local06, #44
19cd4     18 2F 02 F1 | 	add	local05, local06
19cd8     17 13 02 FB | 	rdlong	arg01, local05
19cdc     00 14 06 F6 | 	mov	arg02, #0
19ce0     BC D8 B0 FD | 	call	#__system____builtin_atoi
19ce4     FD 14 02 F6 | 	mov	arg02, result1
19ce8     13 13 02 F6 | 	mov	arg01, local01
19cec     5C 60 B0 FD | 	call	#_pspoke
19cf0                 | LR__2124
19cf0                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19cf0     06 52 0E F2 | 	cmp	local23, #6 wz
19cf4     54 00 90 5D |  if_ne	jmp	#LR__2125
19cf8     52 00 00 FF 
19cfc     68 E5 05 F1 | 	add	objptr, ##42344
19d00     F2 4C 02 FB | 	rdlong	local20, objptr
19d04     52 00 00 FF 
19d08     68 E5 85 F1 | 	sub	objptr, ##42344
19d0c     2B 4C 0E F2 | 	cmp	local20, #43 wz
19d10     38 00 90 AD |  if_e	jmp	#LR__2125
19d14     1B 2D 02 F6 | 	mov	local04, local09
19d18     02 2C 66 F0 | 	shl	local04, #2
19d1c     A7 2E 02 F6 | 	mov	local05, fp
19d20     2C 2E 06 F1 | 	add	local05, #44
19d24     17 2D 02 F1 | 	add	local04, local05
19d28     16 13 02 FB | 	rdlong	arg01, local04
19d2c     08 DA B0 FD | 	call	#__system____builtin_atof
19d30     28 4E 05 F1 | 	add	fp, #40
19d34     A7 FA 61 FC | 	wrlong	result1, fp
19d38     A7 12 02 F6 | 	mov	arg01, fp
19d3c     28 4E 85 F1 | 	sub	fp, #40
19d40     09 15 02 FB | 	rdlong	arg02, arg01
19d44     13 13 02 F6 | 	mov	arg01, local01
19d48     70 5F B0 FD | 	call	#_pslpoke
19d4c                 | LR__2125
19d4c                 | LR__2126
19d4c     01 36 06 F1 | 	add	local09, #1
19d50     10 F9 9F FD | 	jmp	#LR__2093
19d54                 | LR__2127
19d54                 | LR__2128
19d54     A7 F0 03 F6 | 	mov	ptra, fp
19d58     B2 00 A0 FD | 	call	#popregs_
19d5c                 | _do_read_ret
19d5c     2D 00 64 FD | 	ret
19d60                 | 
19d60                 | ' 
19d60                 | ' '------------------- release
19d60                 | ' 
19d60                 | ' sub do_release
19d60                 | _do_release
19d60     00 4A 05 F6 | 	mov	COUNT_, #0
19d64     A8 00 A0 FD | 	call	#pushregs_
19d68     10 F0 07 F1 | 	add	ptra, #16
19d6c     D0 37 BF FD | 	call	#_pop
19d70     FF 14 02 F6 | 	mov	arg02, result3
19d74     A7 FA 61 FC | 	wrlong	result1, fp
19d78     04 4E 05 F1 | 	add	fp, #4
19d7c     A7 FC 61 FC | 	wrlong	result2, fp
19d80     04 4E 05 F1 | 	add	fp, #4
19d84     A7 14 62 FC | 	wrlong	arg02, fp
19d88     08 4E 85 F1 | 	sub	fp, #8
19d8c     A7 12 02 F6 | 	mov	arg01, fp
19d90     88 39 BF FD | 	call	#_converttoint
19d94                 | ' 
19d94                 | ' t1=pop()
19d94                 | ' channel=converttoint(t1)
19d94                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19d94     00 FA 55 F2 | 	cmps	result1, #0 wc
19d98     2C 00 90 CD |  if_b	jmp	#LR__2130
19d9c     08 FA 55 F2 | 	cmps	result1, #8 wc
19da0     37 00 00 CF 
19da4     30 E4 05 C1 |  if_b	add	objptr, ##28208
19da8     F2 12 02 CB |  if_b	rdlong	arg01, objptr
19dac     37 00 00 CF 
19db0     30 E4 85 C1 |  if_b	sub	objptr, ##28208
19db4     06 FA 65 C0 |  if_b	shl	result1, #6
19db8     FD 12 02 C1 |  if_b	add	arg01, result1
19dbc     2C 12 06 C1 |  if_b	add	arg01, #44
19dc0     FF 14 06 C6 |  if_b	mov	arg02, #255
19dc4     09 15 62 CC |  if_b	wrlong	arg02, arg01
19dc8                 | LR__2130
19dc8     A7 F0 03 F6 | 	mov	ptra, fp
19dcc     B2 00 A0 FD | 	call	#popregs_
19dd0                 | _do_release_ret
19dd0     2D 00 64 FD | 	ret
19dd4                 | 
19dd4                 | ' 
19dd4                 | ' '------------------- restore
19dd4                 | ' 
19dd4                 | ' sub do_restore()
19dd4                 | _do_restore
19dd4     4A 00 00 FF 
19dd8     A8 E4 05 F1 | 	add	objptr, ##38056
19ddc     F2 00 02 FB | 	rdlong	_var01, objptr
19de0     06 00 00 FF 
19de4     A4 E4 05 F1 | 	add	objptr, ##3236
19de8     F2 00 62 FC | 	wrlong	_var01, objptr
19dec     93 01 00 FF 
19df0     66 01 06 F6 | 	mov	_var01, ##@LR__5677
19df4     01 00 00 FF 
19df8     E8 E5 05 F1 | 	add	objptr, ##1000
19dfc     F2 00 62 FC | 	wrlong	_var01, objptr
19e00     52 00 00 FF 
19e04     34 E5 85 F1 | 	sub	objptr, ##42292
19e08                 | _do_restore_ret
19e08     2D 00 64 FD | 	ret
19e0c                 | 
19e0c                 | ' 
19e0c                 | ' '------------------- restorepalette
19e0c                 | ' 
19e0c                 | ' sub do_restorepalette()
19e0c                 | _do_restorepalette
19e0c                 | ' 
19e0c                 | ' longmove(@ataripalette,@ataripalette2,256)
19e0c     18 00 00 FF 
19e10     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
19e14     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
19e18     02 00 00 FF 
19e1c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
19e20     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19e24     1A 00 00 FF 
19e28     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
19e2c     00 17 06 F6 | 	mov	arg03, #256
19e30     0A 13 52 F2 | 	cmps	arg01, arg02 wc
19e34     1C 00 90 3D |  if_ae	jmp	#LR__2144
19e38     97 0A 48 FB | 	callpa	#(@LR__2142-@LR__2140)>>2,fcache_load_ptr_
19e3c                 | LR__2140
19e3c     00 09 DC FC | 	rep	@LR__2143, #256
19e40                 | LR__2141
19e40     0A 17 02 FB | 	rdlong	arg03, arg02
19e44     09 17 62 FC | 	wrlong	arg03, arg01
19e48     04 12 06 F1 | 	add	arg01, #4
19e4c     04 14 06 F1 | 	add	arg02, #4
19e50                 | LR__2142
19e50                 | LR__2143
19e50     38 00 90 FD | 	jmp	#LR__2150
19e54                 | LR__2144
19e54     0B 01 02 F6 | 	mov	_var01, arg03
19e58     02 00 66 F0 | 	shl	_var01, #2
19e5c     00 13 02 F1 | 	add	arg01, _var01
19e60     0B 03 02 F6 | 	mov	_var02, arg03
19e64     02 02 66 F0 | 	shl	_var02, #2
19e68     01 15 02 F1 | 	add	arg02, _var02
19e6c     0B 05 0A F6 | 	mov	_var03, arg03 wz
19e70     18 00 90 AD |  if_e	jmp	#LR__2149
19e74     97 0A 48 FB | 	callpa	#(@LR__2147-@LR__2145)>>2,fcache_load_ptr_
19e78                 | LR__2145
19e78     02 09 D8 FC | 	rep	@LR__2148, _var03
19e7c                 | LR__2146
19e7c     04 12 86 F1 | 	sub	arg01, #4
19e80     04 14 86 F1 | 	sub	arg02, #4
19e84     0A 05 02 FB | 	rdlong	_var03, arg02
19e88     09 05 62 FC | 	wrlong	_var03, arg01
19e8c                 | LR__2147
19e8c                 | LR__2148
19e8c                 | LR__2149
19e8c                 | LR__2150
19e8c                 | _do_restorepalette_ret
19e8c     2D 00 64 FD | 	ret
19e90                 | 
19e90                 | ' '------------------- return
19e90                 | ' 
19e90                 | ' sub do_return()
19e90                 | _do_return
19e90                 | ' if gosubtop>0 then
19e90     50 00 00 FF 
19e94     54 E5 05 F1 | 	add	objptr, ##41300
19e98     F2 00 02 FB | 	rdlong	_var01, objptr
19e9c     50 00 00 FF 
19ea0     54 E5 85 F1 | 	sub	objptr, ##41300
19ea4     01 00 56 F2 | 	cmps	_var01, #1 wc
19ea8     8C 00 90 CD |  if_b	jmp	#LR__2160
19eac     50 00 00 FF 
19eb0     54 E5 05 F1 | 	add	objptr, ##41300
19eb4     F2 00 02 FB | 	rdlong	_var01, objptr
19eb8     03 00 66 F0 | 	shl	_var01, #3
19ebc     03 00 00 FF 
19ec0     88 E5 85 F1 | 	sub	objptr, ##1928
19ec4     F2 00 02 F1 | 	add	_var01, objptr
19ec8     00 01 02 FB | 	rdlong	_var01, _var01
19ecc     03 00 00 FF 
19ed0     0C E5 05 F1 | 	add	objptr, ##1804
19ed4     F2 00 62 FC | 	wrlong	_var01, objptr
19ed8     7C E4 05 F1 | 	add	objptr, #124
19edc     F2 00 02 FB | 	rdlong	_var01, objptr
19ee0     03 00 66 F0 | 	shl	_var01, #3
19ee4     03 00 00 FF 
19ee8     88 E5 85 F1 | 	sub	objptr, ##1928
19eec     F2 00 02 F1 | 	add	_var01, objptr
19ef0     04 00 06 F1 | 	add	_var01, #4
19ef4     00 01 02 FB | 	rdlong	_var01, _var01
19ef8     03 00 00 FF 
19efc     10 E5 05 F1 | 	add	objptr, ##1808
19f00     F2 00 62 FC | 	wrlong	_var01, objptr
19f04     06 00 00 FF 
19f08     40 E4 85 F1 | 	sub	objptr, ##3136
19f0c     F2 00 02 FB | 	rdlong	_var01, objptr
19f10     01 00 86 F1 | 	sub	_var01, #1
19f14     04 E4 05 F1 | 	add	objptr, #4
19f18     F2 00 62 FC | 	wrlong	_var01, objptr
19f1c     06 00 00 FF 
19f20     B4 E4 05 F1 | 	add	objptr, ##3252
19f24     F2 00 02 FB | 	rdlong	_var01, objptr
19f28     01 00 86 F1 | 	sub	_var01, #1
19f2c     F2 00 62 FC | 	wrlong	_var01, objptr
19f30     50 00 00 FF 
19f34     54 E5 85 F1 | 	sub	objptr, ##41300
19f38                 | LR__2160
19f38                 | _do_return_ret
19f38     2D 00 64 FD | 	ret
19f3c                 | 
19f3c                 | ' 
19f3c                 | ' '------------------- right$
19f3c                 | ' 
19f3c                 | ' sub do_right
19f3c                 | _do_right
19f3c     01 4A 05 F6 | 	mov	COUNT_, #1
19f40     A8 00 A0 FD | 	call	#pushregs_
19f44     14 F0 07 F1 | 	add	ptra, #20
19f48     4A 00 00 FF 
19f4c     A0 E4 05 F1 | 	add	objptr, ##38048
19f50     F2 16 02 FB | 	rdlong	arg03, objptr
19f54     0B 15 02 F6 | 	mov	arg02, arg03
19f58     01 14 66 F0 | 	shl	arg02, #1
19f5c     0B 15 02 F1 | 	add	arg02, arg03
19f60     02 14 66 F0 | 	shl	arg02, #2
19f64     03 00 00 FF 
19f68     04 E4 85 F1 | 	sub	objptr, ##1540
19f6c     F2 14 02 F1 | 	add	arg02, objptr
19f70     0A 17 02 FB | 	rdlong	arg03, arg02
19f74                 | ' 
19f74                 | ' numpar=compiledline(lineptr_e).result.uresult
19f74                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
19f74     02 16 0E F2 | 	cmp	arg03, #2 wz
19f78     47 00 00 FF 
19f7c     9C E4 85 F1 | 	sub	objptr, ##36508
19f80     40 00 90 AD |  if_e	jmp	#LR__2170
19f84     00 12 06 F6 | 	mov	arg01, #0
19f88     08 FC B0 FD | 	call	#__system___getiolock_0622
19f8c     FD 12 02 F6 | 	mov	arg01, result1
19f90     14 B1 B0 FD | 	call	#__system___lockmem
19f94     93 01 00 FF 
19f98     67 15 06 F6 | 	mov	arg02, ##@LR__5678
19f9c     00 12 06 F6 | 	mov	arg01, #0
19fa0     00 16 06 F6 | 	mov	arg03, #0
19fa4     20 B9 B0 FD | 	call	#__system___basic_print_string
19fa8     00 12 06 F6 | 	mov	arg01, #0
19fac     E4 FB B0 FD | 	call	#__system___getiolock_0622
19fb0     FD 00 68 FC | 	wrlong	#0, result1
19fb4     27 12 06 F6 | 	mov	arg01, #39
19fb8     00 14 06 F6 | 	mov	arg02, #0
19fbc     60 5C B0 FD | 	call	#_printerror
19fc0     D8 00 90 FD | 	jmp	#LR__2173
19fc4                 | LR__2170
19fc4     78 35 BF FD | 	call	#_pop
19fc8     FF 16 02 F6 | 	mov	arg03, result3
19fcc     A7 FA 61 FC | 	wrlong	result1, fp
19fd0     04 4E 05 F1 | 	add	fp, #4
19fd4     A7 FC 61 FC | 	wrlong	result2, fp
19fd8     04 4E 05 F1 | 	add	fp, #4
19fdc     A7 16 62 FC | 	wrlong	arg03, fp
19fe0     08 4E 85 F1 | 	sub	fp, #8
19fe4     A7 12 02 F6 | 	mov	arg01, fp
19fe8     30 37 BF FD | 	call	#_converttoint
19fec     FD 26 02 F6 | 	mov	local01, result1
19ff0     4C 35 BF FD | 	call	#_pop
19ff4     FF 16 02 F6 | 	mov	arg03, result3
19ff8     A7 FA 61 FC | 	wrlong	result1, fp
19ffc     04 4E 05 F1 | 	add	fp, #4
1a000     A7 FC 61 FC | 	wrlong	result2, fp
1a004     04 4E 05 F1 | 	add	fp, #4
1a008     A7 16 62 FC | 	wrlong	arg03, fp
1a00c                 | ' t1=pop() : arg=converttoint(t1)
1a00c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a00c     08 4E 85 F1 | 	sub	fp, #8
1a010     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a014     18 00 90 5D |  if_ne	jmp	#LR__2171
1a018     A7 12 02 FB | 	rdlong	arg01, fp
1a01c     90 36 BF FD | 	call	#_convertstring
1a020     A7 FA 61 FC | 	wrlong	result1, fp
1a024     08 4E 05 F1 | 	add	fp, #8
1a028     A7 3E 68 FC | 	wrlong	#31, fp
1a02c     08 4E 85 F1 | 	sub	fp, #8
1a030                 | LR__2171
1a030                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a030     08 4E 05 F1 | 	add	fp, #8
1a034     A7 16 02 FB | 	rdlong	arg03, fp
1a038     08 4E 85 F1 | 	sub	fp, #8
1a03c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a040     40 00 90 AD |  if_e	jmp	#LR__2172
1a044     00 12 06 F6 | 	mov	arg01, #0
1a048     48 FB B0 FD | 	call	#__system___getiolock_0622
1a04c     FD 12 02 F6 | 	mov	arg01, result1
1a050     54 B0 B0 FD | 	call	#__system___lockmem
1a054     93 01 00 FF 
1a058     70 15 06 F6 | 	mov	arg02, ##@LR__5679
1a05c     00 12 06 F6 | 	mov	arg01, #0
1a060     00 16 06 F6 | 	mov	arg03, #0
1a064     60 B8 B0 FD | 	call	#__system___basic_print_string
1a068     00 12 06 F6 | 	mov	arg01, #0
1a06c     24 FB B0 FD | 	call	#__system___getiolock_0622
1a070     FD 00 68 FC | 	wrlong	#0, result1
1a074     0F 12 06 F6 | 	mov	arg01, #15
1a078     00 14 06 F6 | 	mov	arg02, #0
1a07c     A0 5B B0 FD | 	call	#_printerror
1a080     18 00 90 FD | 	jmp	#LR__2173
1a084                 | LR__2172
1a084     A7 12 02 FB | 	rdlong	arg01, fp
1a088     13 15 02 F6 | 	mov	arg02, local01
1a08c     64 C4 B0 FD | 	call	#__system__Right_S
1a090     A7 FA 61 FC | 	wrlong	result1, fp
1a094     A7 12 02 F6 | 	mov	arg01, fp
1a098     34 35 BF FD | 	call	#_push
1a09c                 | LR__2173
1a09c     A7 F0 03 F6 | 	mov	ptra, fp
1a0a0     B2 00 A0 FD | 	call	#popregs_
1a0a4                 | _do_right_ret
1a0a4     2D 00 64 FD | 	ret
1a0a8                 | 
1a0a8                 | ' 
1a0a8                 | ' '------------------- rnd
1a0a8                 | ' 
1a0a8                 | ' sub do_rnd
1a0a8                 | _do_rnd
1a0a8     02 4A 05 F6 | 	mov	COUNT_, #2
1a0ac     A8 00 A0 FD | 	call	#pushregs_
1a0b0     10 F0 07 F1 | 	add	ptra, #16
1a0b4     4A 00 00 FF 
1a0b8     A0 E4 05 F1 | 	add	objptr, ##38048
1a0bc     F2 26 02 FB | 	rdlong	local01, objptr
1a0c0     13 17 02 F6 | 	mov	arg03, local01
1a0c4     01 16 66 F0 | 	shl	arg03, #1
1a0c8     13 17 02 F1 | 	add	arg03, local01
1a0cc     02 16 66 F0 | 	shl	arg03, #2
1a0d0     03 00 00 FF 
1a0d4     04 E4 85 F1 | 	sub	objptr, ##1540
1a0d8     F2 16 02 F1 | 	add	arg03, objptr
1a0dc     0B 29 02 FB | 	rdlong	local02, arg03
1a0e0                 | ' 
1a0e0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a0e0                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1a0e0     02 28 16 F2 | 	cmp	local02, #2 wc
1a0e4     47 00 00 FF 
1a0e8     9C E4 85 F1 | 	sub	objptr, ##36508
1a0ec     40 00 90 CD |  if_b	jmp	#LR__2180
1a0f0     00 12 06 F6 | 	mov	arg01, #0
1a0f4     9C FA B0 FD | 	call	#__system___getiolock_0622
1a0f8     FD 12 02 F6 | 	mov	arg01, result1
1a0fc     A8 AF B0 FD | 	call	#__system___lockmem
1a100     93 01 00 FF 
1a104     79 15 06 F6 | 	mov	arg02, ##@LR__5680
1a108     00 12 06 F6 | 	mov	arg01, #0
1a10c     00 16 06 F6 | 	mov	arg03, #0
1a110     B4 B7 B0 FD | 	call	#__system___basic_print_string
1a114     00 12 06 F6 | 	mov	arg01, #0
1a118     78 FA B0 FD | 	call	#__system___getiolock_0622
1a11c     FD 00 68 FC | 	wrlong	#0, result1
1a120     27 12 06 F6 | 	mov	arg01, #39
1a124     00 14 06 F6 | 	mov	arg02, #0
1a128     F4 5A B0 FD | 	call	#_printerror
1a12c     28 01 90 FD | 	jmp	#LR__2187
1a130                 | LR__2180
1a130                 | ' if numpar=0 then
1a130     00 28 0E F2 | 	cmp	local02, #0 wz
1a134     20 00 90 5D |  if_ne	jmp	#LR__2181
1a138     08 4E 05 F1 | 	add	fp, #8
1a13c     A7 3A 68 FC | 	wrlong	#29, fp
1a140     08 4E 85 F1 | 	sub	fp, #8
1a144     1B FA 61 FD | 	getrnd	result1
1a148     A7 FA 61 FC | 	wrlong	result1, fp
1a14c     A7 12 02 F6 | 	mov	arg01, fp
1a150     7C 34 BF FD | 	call	#_push
1a154     00 01 90 FD | 	jmp	#LR__2186
1a158                 | LR__2181
1a158     E4 33 BF FD | 	call	#_pop
1a15c     A7 FA 61 FC | 	wrlong	result1, fp
1a160     04 4E 05 F1 | 	add	fp, #4
1a164     A7 FC 61 FC | 	wrlong	result2, fp
1a168     04 4E 05 F1 | 	add	fp, #4
1a16c     A7 FE 61 FC | 	wrlong	result3, fp
1a170                 | '   t1=pop()
1a170                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1a170     08 4E 85 F1 | 	sub	fp, #8
1a174     1C FE 0D F2 | 	cmp	result3, #28 wz
1a178     08 4E 05 51 |  if_ne	add	fp, #8
1a17c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a180     08 4E 85 51 |  if_ne	sub	fp, #8
1a184     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a188     2C 00 90 5D |  if_ne	jmp	#LR__2182
1a18c     1B FA 61 FD | 	getrnd	result1
1a190     A7 26 02 FB | 	rdlong	local01, fp
1a194     13 FB 11 FD | 	qdiv	result1, local01
1a198     A7 12 02 F6 | 	mov	arg01, fp
1a19c     19 28 62 FD | 	getqy	local02
1a1a0     A7 28 62 FC | 	wrlong	local02, fp
1a1a4     08 4E 05 F1 | 	add	fp, #8
1a1a8     A7 3A 68 FC | 	wrlong	#29, fp
1a1ac     08 4E 85 F1 | 	sub	fp, #8
1a1b0     1C 34 BF FD | 	call	#_push
1a1b4     A0 00 90 FD | 	jmp	#LR__2185
1a1b8                 | LR__2182
1a1b8     08 4E 05 F1 | 	add	fp, #8
1a1bc     A7 28 02 FB | 	rdlong	local02, fp
1a1c0     08 4E 85 F1 | 	sub	fp, #8
1a1c4     1E 28 0E F2 | 	cmp	local02, #30 wz
1a1c8     48 00 90 5D |  if_ne	jmp	#LR__2183
1a1cc     A7 12 02 FB | 	rdlong	arg01, fp
1a1d0     00 C0 24 FF 
1a1d4     00 14 06 F6 | 	mov	arg02, ##1233125376
1a1d8     8C CF B0 FD | 	call	#__system___float_div
1a1dc     FD 28 02 F6 | 	mov	local02, result1
1a1e0     1B 12 62 FD | 	getrnd	arg01
1a1e4     74 13 06 F4 | 	bitl	arg01, #372
1a1e8     88 C9 B0 FD | 	call	#__system___float_fromuns
1a1ec     FD 14 02 F6 | 	mov	arg02, result1
1a1f0     14 13 02 F6 | 	mov	arg01, local02
1a1f4     7C CD B0 FD | 	call	#__system___float_mul
1a1f8     A7 FA 61 FC | 	wrlong	result1, fp
1a1fc     08 4E 05 F1 | 	add	fp, #8
1a200     A7 3C 68 FC | 	wrlong	#30, fp
1a204     08 4E 85 F1 | 	sub	fp, #8
1a208     A7 12 02 F6 | 	mov	arg01, fp
1a20c     C0 33 BF FD | 	call	#_push
1a210     44 00 90 FD | 	jmp	#LR__2184
1a214                 | LR__2183
1a214                 | '     print "rnd: "; : printerror(40) 
1a214     00 12 06 F6 | 	mov	arg01, #0
1a218     78 F9 B0 FD | 	call	#__system___getiolock_0622
1a21c     FD 12 02 F6 | 	mov	arg01, result1
1a220     84 AE B0 FD | 	call	#__system___lockmem
1a224     93 01 00 FF 
1a228     7F 15 06 F6 | 	mov	arg02, ##@LR__5681
1a22c     00 12 06 F6 | 	mov	arg01, #0
1a230     00 16 06 F6 | 	mov	arg03, #0
1a234     90 B6 B0 FD | 	call	#__system___basic_print_string
1a238     00 12 06 F6 | 	mov	arg01, #0
1a23c     54 F9 B0 FD | 	call	#__system___getiolock_0622
1a240     FD 00 68 FC | 	wrlong	#0, result1
1a244     28 12 06 F6 | 	mov	arg01, #40
1a248     00 14 06 F6 | 	mov	arg02, #0
1a24c     D0 59 B0 FD | 	call	#_printerror
1a250     A7 12 02 F6 | 	mov	arg01, fp
1a254     78 33 BF FD | 	call	#_push
1a258                 | LR__2184
1a258                 | LR__2185
1a258                 | LR__2186
1a258                 | LR__2187
1a258     A7 F0 03 F6 | 	mov	ptra, fp
1a25c     B2 00 A0 FD | 	call	#popregs_
1a260                 | _do_rnd_ret
1a260     2D 00 64 FD | 	ret
1a264                 | 
1a264                 | ' 
1a264                 | ' '-------------------- round
1a264                 | ' 
1a264                 | ' sub do_round
1a264                 | _do_round
1a264     00 4A 05 F6 | 	mov	COUNT_, #0
1a268     A8 00 A0 FD | 	call	#pushregs_
1a26c     0C F0 07 F1 | 	add	ptra, #12
1a270     CC 32 BF FD | 	call	#_pop
1a274     A7 FA 61 FC | 	wrlong	result1, fp
1a278     04 4E 05 F1 | 	add	fp, #4
1a27c     A7 FC 61 FC | 	wrlong	result2, fp
1a280     04 4E 05 F1 | 	add	fp, #4
1a284     A7 FE 61 FC | 	wrlong	result3, fp
1a288     08 4E 85 F1 | 	sub	fp, #8
1a28c     A7 12 02 F6 | 	mov	arg01, fp
1a290     88 34 BF FD | 	call	#_converttoint
1a294     A7 FA 61 FC | 	wrlong	result1, fp
1a298     08 4E 05 F1 | 	add	fp, #8
1a29c     A7 38 68 FC | 	wrlong	#28, fp
1a2a0     08 4E 85 F1 | 	sub	fp, #8
1a2a4     A7 12 02 F6 | 	mov	arg01, fp
1a2a8     24 33 BF FD | 	call	#_push
1a2ac     A7 F0 03 F6 | 	mov	ptra, fp
1a2b0     B2 00 A0 FD | 	call	#popregs_
1a2b4                 | _do_round_ret
1a2b4     2D 00 64 FD | 	ret
1a2b8                 | 
1a2b8                 | ' 
1a2b8                 | ' '-------------------- rqpin
1a2b8                 | ' 
1a2b8                 | ' sub do_rqpin
1a2b8                 | _do_rqpin
1a2b8     00 4A 05 F6 | 	mov	COUNT_, #0
1a2bc     A8 00 A0 FD | 	call	#pushregs_
1a2c0     0C F0 07 F1 | 	add	ptra, #12
1a2c4     78 32 BF FD | 	call	#_pop
1a2c8     A7 FA 61 FC | 	wrlong	result1, fp
1a2cc     04 4E 05 F1 | 	add	fp, #4
1a2d0     A7 FC 61 FC | 	wrlong	result2, fp
1a2d4     04 4E 05 F1 | 	add	fp, #4
1a2d8     A7 FE 61 FC | 	wrlong	result3, fp
1a2dc     08 4E 85 F1 | 	sub	fp, #8
1a2e0     A7 12 02 F6 | 	mov	arg01, fp
1a2e4     34 34 BF FD | 	call	#_converttoint
1a2e8     FD 12 02 F6 | 	mov	arg01, result1
1a2ec     00 FA 05 F6 | 	mov	result1, #0
1a2f0     09 FB 81 FA | 	rqpin	result1, arg01
1a2f4     52 00 00 FF 
1a2f8     68 E5 05 F1 | 	add	objptr, ##42344
1a2fc     F2 FA 61 FC | 	wrlong	result1, objptr
1a300     52 00 00 FF 
1a304     68 E5 85 F1 | 	sub	objptr, ##42344
1a308     08 4E 05 F1 | 	add	fp, #8
1a30c     A7 3A 68 FC | 	wrlong	#29, fp
1a310     08 4E 85 F1 | 	sub	fp, #8
1a314     A7 08 68 FC | 	wrlong	#4, fp
1a318     A7 12 02 F6 | 	mov	arg01, fp
1a31c     B0 32 BF FD | 	call	#_push
1a320     A7 F0 03 F6 | 	mov	ptra, fp
1a324     B2 00 A0 FD | 	call	#popregs_
1a328                 | _do_rqpin_ret
1a328     2D 00 64 FD | 	ret
1a32c                 | 
1a32c                 | ' 
1a32c                 | ' ' ------------------ run
1a32c                 | ' 
1a32c                 | ' sub do_run
1a32c                 | _do_run
1a32c     04 4A 05 F6 | 	mov	COUNT_, #4
1a330     A8 00 A0 FD | 	call	#pushregs_
1a334     4A 00 00 FF 
1a338     A0 E4 05 F1 | 	add	objptr, ##38048
1a33c     F2 26 02 FB | 	rdlong	local01, objptr
1a340     06 00 00 FF 
1a344     38 E4 05 F1 | 	add	objptr, ##3128
1a348     F2 28 02 FB | 	rdlong	local02, objptr
1a34c     04 E4 05 F1 | 	add	objptr, #4
1a350     F2 2A 02 FB | 	rdlong	local03, objptr
1a354     13 19 02 F6 | 	mov	arg04, local01
1a358     0C 17 02 F6 | 	mov	arg03, arg04
1a35c     01 16 66 F0 | 	shl	arg03, #1
1a360     0C 17 02 F1 | 	add	arg03, arg04
1a364     02 16 66 F0 | 	shl	arg03, #2
1a368     09 00 00 FF 
1a36c     40 E4 85 F1 | 	sub	objptr, ##4672
1a370     F2 16 02 F1 | 	add	arg03, objptr
1a374     0B 15 02 FB | 	rdlong	arg02, arg03
1a378                 | ' 
1a378                 | ' r_lineptr_e=lineptr_e
1a378                 | ' r_runptr=runptr
1a378                 | ' r_runptr2=runptr2
1a378                 | ' 
1a378                 | ' numpar=compiledline(lineptr_e).result.uresult
1a378                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1a378     01 14 0E F2 | 	cmp	arg02, #1 wz
1a37c     47 00 00 FF 
1a380     9C E4 85 F1 | 	sub	objptr, ##36508
1a384     00 12 06 A6 |  if_e	mov	arg01, #0
1a388     2C A7 BF AD |  if_e	call	#_do_load
1a38c     4A 00 00 FF 
1a390     A8 E4 05 F1 | 	add	objptr, ##38056
1a394     F2 18 02 FB | 	rdlong	arg04, objptr
1a398     06 00 00 FF 
1a39c     30 E4 05 F1 | 	add	objptr, ##3120
1a3a0     F2 18 62 FC | 	wrlong	arg04, objptr
1a3a4     04 E4 05 F1 | 	add	objptr, #4
1a3a8     F2 00 68 FC | 	wrlong	#0, objptr
1a3ac     04 E4 05 F1 | 	add	objptr, #4
1a3b0     FF FF FF FF 
1a3b4     F2 FE 6B FC | 	wrlong	##-1, objptr
1a3b8     06 00 00 FF 
1a3bc     38 E4 85 F1 | 	sub	objptr, ##3128
1a3c0     F2 18 02 FB | 	rdlong	arg04, objptr
1a3c4     06 00 00 FF 
1a3c8     A4 E4 05 F1 | 	add	objptr, ##3236
1a3cc     F2 18 62 FC | 	wrlong	arg04, objptr
1a3d0     93 01 00 FF 
1a3d4     85 19 06 F6 | 	mov	arg04, ##@LR__5682
1a3d8     01 00 00 FF 
1a3dc     E8 E5 05 F1 | 	add	objptr, ##1000
1a3e0     F2 18 62 FC | 	wrlong	arg04, objptr
1a3e4                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1a3e4                 | ' dataptr=programstart : readline="" ' reset the data pointer
1a3e4                 | ' if inrun>0 then 
1a3e4     02 00 00 FF 
1a3e8     28 E4 85 F1 | 	sub	objptr, ##1064
1a3ec     F2 18 02 FB | 	rdlong	arg04, objptr
1a3f0     50 00 00 FF 
1a3f4     0C E5 85 F1 | 	sub	objptr, ##41228
1a3f8     01 18 16 F2 | 	cmp	arg04, #1 wc
1a3fc     34 00 90 CD |  if_b	jmp	#LR__2190
1a400     F2 12 02 F6 | 	mov	arg01, objptr
1a404     50 00 00 FF 
1a408     10 13 06 F1 | 	add	arg01, ##41232
1a40c     50 00 00 FF 
1a410     D8 E4 05 F1 | 	add	objptr, ##41176
1a414     F2 14 02 FB | 	rdlong	arg02, objptr
1a418     18 16 06 F6 | 	mov	arg03, #24
1a41c     45 00 00 FF 
1a420     0C E4 85 F1 | 	sub	objptr, ##35340
1a424     7C A4 B0 FD | 	call	#_psram_spin2_read1
1a428     0B 00 00 FF 
1a42c     CC E4 85 F1 | 	sub	objptr, ##5836
1a430                 | '   psram.read1(varptr(runheader),runptr,24)  
1a430                 | '   return
1a430     10 03 90 FD | 	jmp	#LR__2197
1a434                 | LR__2190
1a434     50 00 00 FF 
1a438     0C E5 05 F1 | 	add	objptr, ##41228
1a43c     F2 02 68 FC | 	wrlong	#1, objptr
1a440     04 E4 05 F1 | 	add	objptr, #4
1a444     F2 12 02 F6 | 	mov	arg01, objptr
1a448     38 E4 85 F1 | 	sub	objptr, #56
1a44c     F2 14 02 FB | 	rdlong	arg02, objptr
1a450     18 16 06 F6 | 	mov	arg03, #24
1a454     45 00 00 FF 
1a458     0C E4 85 F1 | 	sub	objptr, ##35340
1a45c     44 A4 B0 FD | 	call	#_psram_spin2_read1
1a460                 | ' inrun=1
1a460                 | ' psram.read1(varptr(runheader),runptr,24) 
1a460                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1a460     45 00 00 FF 
1a464     44 E4 05 F1 | 	add	objptr, ##35396
1a468     F2 2C 02 FB | 	rdlong	local04, objptr
1a46c     50 00 00 FF 
1a470     10 E5 85 F1 | 	sub	objptr, ##41232
1a474     FF FF 7F FF 
1a478     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1a47c     50 00 00 AF 
1a480     0C E5 05 A1 |  if_e	add	objptr, ##41228
1a484     F2 00 68 AC |  if_e	wrlong	#0, objptr
1a488     50 00 00 AF 
1a48c     0C E5 85 A1 |  if_e	sub	objptr, ##41228
1a490     B0 02 90 AD |  if_e	jmp	#LR__2197
1a494                 | ' do 
1a494                 | LR__2191
1a494                 | '   if runptr<>oldrunptr then
1a494     50 00 00 FF 
1a498     D8 E4 05 F1 | 	add	objptr, ##41176
1a49c     F2 2C 02 FB | 	rdlong	local04, objptr
1a4a0     08 E4 05 F1 | 	add	objptr, #8
1a4a4     F2 18 02 FB | 	rdlong	arg04, objptr
1a4a8     50 00 00 FF 
1a4ac     E0 E4 85 F1 | 	sub	objptr, ##41184
1a4b0     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1a4b4     D0 00 90 AD |  if_e	jmp	#LR__2192
1a4b8     F2 12 02 F6 | 	mov	arg01, objptr
1a4bc     50 00 00 FF 
1a4c0     10 13 06 F1 | 	add	arg01, ##41232
1a4c4     50 00 00 FF 
1a4c8     D8 E4 05 F1 | 	add	objptr, ##41176
1a4cc     F2 14 02 FB | 	rdlong	arg02, objptr
1a4d0     18 16 06 F6 | 	mov	arg03, #24
1a4d4     45 00 00 FF 
1a4d8     0C E4 85 F1 | 	sub	objptr, ##35340
1a4dc     C4 A3 B0 FD | 	call	#_psram_spin2_read1
1a4e0     3B 00 00 FF 
1a4e4     D0 E5 05 F1 | 	add	objptr, ##30672
1a4e8     F2 12 02 F6 | 	mov	arg01, objptr
1a4ec     09 00 00 FF 
1a4f0     3C E4 05 F1 | 	add	objptr, ##4668
1a4f4     F2 14 02 FB | 	rdlong	arg02, objptr
1a4f8     0B 00 00 FF 
1a4fc     54 E4 85 F1 | 	sub	objptr, ##5716
1a500     F2 2C 02 FB | 	rdlong	local04, objptr
1a504     01 2C 66 F0 | 	shl	local04, #1
1a508     16 15 02 F1 | 	add	arg02, local04
1a50c     0B 00 00 FF 
1a510     94 E4 05 F1 | 	add	objptr, ##5780
1a514     F2 16 02 FB | 	rdlong	arg03, objptr
1a518     40 E4 85 F1 | 	sub	objptr, #64
1a51c     F2 2C 02 FB | 	rdlong	local04, objptr
1a520     16 17 82 F1 | 	sub	arg03, local04
1a524     45 00 00 FF 
1a528     0C E4 85 F1 | 	sub	objptr, ##35340
1a52c     74 A3 B0 FD | 	call	#_psram_spin2_read1
1a530     45 00 00 FF 
1a534     4C E4 05 F1 | 	add	objptr, ##35404
1a538     F2 2C 02 FB | 	rdlong	local04, objptr
1a53c     40 E4 85 F1 | 	sub	objptr, #64
1a540     F2 14 02 FB | 	rdlong	arg02, objptr
1a544     0A 2D 82 F1 | 	sub	local04, arg02
1a548     0B 00 00 FF 
1a54c     54 E4 85 F1 | 	sub	objptr, ##5716
1a550     F2 14 02 FB | 	rdlong	arg02, objptr
1a554     0A 2D 12 FD | 	qdiv	local04, arg02
1a558     05 00 00 FF 
1a55c     18 E4 05 F1 | 	add	objptr, ##2584
1a560     18 2C 62 FD | 	getqx	local04
1a564     03 2C 86 F1 | 	sub	local04, #3
1a568     F2 2C 62 FC | 	wrlong	local04, objptr
1a56c     06 00 00 FF 
1a570     3C E4 05 F1 | 	add	objptr, ##3132
1a574     F2 2C 02 FB | 	rdlong	local04, objptr
1a578     08 E4 05 F1 | 	add	objptr, #8
1a57c     F2 2C 62 FC | 	wrlong	local04, objptr
1a580     50 00 00 FF 
1a584     E0 E4 85 F1 | 	sub	objptr, ##41184
1a588                 | LR__2192
1a588     50 00 00 FF 
1a58c     24 E5 05 F1 | 	add	objptr, ##41252
1a590     F2 2C 02 FB | 	rdlong	local04, objptr
1a594     4C E4 85 F1 | 	sub	objptr, #76
1a598     F2 2C 62 FC | 	wrlong	local04, objptr
1a59c     04 E4 05 F1 | 	add	objptr, #4
1a5a0     F2 12 02 FB | 	rdlong	arg01, objptr
1a5a4     50 00 00 FF 
1a5a8     DC E4 85 F1 | 	sub	objptr, ##41180
1a5ac     8C 2E BF FD | 	call	#_execute_line
1a5b0     50 00 00 FF 
1a5b4     DC E4 05 F1 | 	add	objptr, ##41180
1a5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1a5bc     04 E4 85 F1 | 	sub	objptr, #4
1a5c0     F2 2C 02 FB | 	rdlong	local04, objptr
1a5c4     50 00 00 FF 
1a5c8     D8 E4 85 F1 | 	sub	objptr, ##41176
1a5cc     FF FF 3F FF 
1a5d0     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a5d4     4C 00 90 AD |  if_e	jmp	#LR__2195
1a5d8     E0 12 06 F6 | 	mov	arg01, #224
1a5dc     B0 A5 B0 FD | 	call	#_usbnew_spin2_keystate
1a5e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5e4     10 00 90 5D |  if_ne	jmp	#LR__2193
1a5e8     E4 12 06 F6 | 	mov	arg01, #228
1a5ec     A0 A5 B0 FD | 	call	#_usbnew_spin2_keystate
1a5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5f4     10 00 90 AD |  if_e	jmp	#LR__2194
1a5f8                 | LR__2193
1a5f8     06 12 06 F6 | 	mov	arg01, #6
1a5fc     90 A5 B0 FD | 	call	#_usbnew_spin2_keystate
1a600     00 FA 0D F2 | 	cmp	result1, #0 wz
1a604     1C 00 90 5D |  if_ne	jmp	#LR__2195
1a608                 | LR__2194
1a608     50 00 00 FF 
1a60c     0C E5 05 F1 | 	add	objptr, ##41228
1a610     F2 2C 02 FB | 	rdlong	local04, objptr
1a614     50 00 00 FF 
1a618     0C E5 85 F1 | 	sub	objptr, ##41228
1a61c     02 2C 0E F2 | 	cmp	local04, #2 wz
1a620     70 FE 9F 5D |  if_ne	jmp	#LR__2191
1a624                 | LR__2195
1a624                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a624                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a624     50 00 00 FF 
1a628     D8 E4 05 F1 | 	add	objptr, ##41176
1a62c     F2 2C 02 FB | 	rdlong	local04, objptr
1a630     50 00 00 FF 
1a634     D8 E4 85 F1 | 	sub	objptr, ##41176
1a638     FF FF 3F FF 
1a63c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a640     AC 00 90 AD |  if_e	jmp	#LR__2196
1a644     50 00 00 FF 
1a648     0C E5 05 F1 | 	add	objptr, ##41228
1a64c     F2 2C 02 FB | 	rdlong	local04, objptr
1a650     50 00 00 FF 
1a654     0C E5 85 F1 | 	sub	objptr, ##41228
1a658     01 2C 0E F2 | 	cmp	local04, #1 wz
1a65c     90 00 90 5D |  if_ne	jmp	#LR__2196
1a660                 | '   print: print "Stopped at line ";runheader(0) 
1a660     00 12 06 F6 | 	mov	arg01, #0
1a664     2C F5 B0 FD | 	call	#__system___getiolock_0622
1a668     FD 12 02 F6 | 	mov	arg01, result1
1a66c     38 AA B0 FD | 	call	#__system___lockmem
1a670     00 12 06 F6 | 	mov	arg01, #0
1a674     0A 14 06 F6 | 	mov	arg02, #10
1a678     00 16 06 F6 | 	mov	arg03, #0
1a67c     F0 B1 B0 FD | 	call	#__system___basic_print_char
1a680     00 12 06 F6 | 	mov	arg01, #0
1a684     0C F5 B0 FD | 	call	#__system___getiolock_0622
1a688     FD 00 68 FC | 	wrlong	#0, result1
1a68c     00 12 06 F6 | 	mov	arg01, #0
1a690     00 F5 B0 FD | 	call	#__system___getiolock_0622
1a694     FD 12 02 F6 | 	mov	arg01, result1
1a698     0C AA B0 FD | 	call	#__system___lockmem
1a69c     93 01 00 FF 
1a6a0     86 15 06 F6 | 	mov	arg02, ##@LR__5683
1a6a4     00 12 06 F6 | 	mov	arg01, #0
1a6a8     00 16 06 F6 | 	mov	arg03, #0
1a6ac     18 B2 B0 FD | 	call	#__system___basic_print_string
1a6b0     50 00 00 FF 
1a6b4     10 E5 05 F1 | 	add	objptr, ##41232
1a6b8     F2 14 02 FB | 	rdlong	arg02, objptr
1a6bc     50 00 00 FF 
1a6c0     10 E5 85 F1 | 	sub	objptr, ##41232
1a6c4     00 12 06 F6 | 	mov	arg01, #0
1a6c8     00 16 06 F6 | 	mov	arg03, #0
1a6cc     0A 18 06 F6 | 	mov	arg04, #10
1a6d0     78 B2 B0 FD | 	call	#__system___basic_print_unsigned
1a6d4     00 12 06 F6 | 	mov	arg01, #0
1a6d8     0A 14 06 F6 | 	mov	arg02, #10
1a6dc     00 16 06 F6 | 	mov	arg03, #0
1a6e0     8C B1 B0 FD | 	call	#__system___basic_print_char
1a6e4     00 12 06 F6 | 	mov	arg01, #0
1a6e8     A8 F4 B0 FD | 	call	#__system___getiolock_0622
1a6ec     FD 00 68 FC | 	wrlong	#0, result1
1a6f0                 | LR__2196
1a6f0     50 00 00 FF 
1a6f4     0C E5 05 F1 | 	add	objptr, ##41228
1a6f8     F2 00 68 FC | 	wrlong	#0, objptr
1a6fc     06 00 00 FF 
1a700     6C E4 85 F1 | 	sub	objptr, ##3180
1a704     F2 26 62 FC | 	wrlong	local01, objptr
1a708     06 00 00 FF 
1a70c     38 E4 05 F1 | 	add	objptr, ##3128
1a710     F2 28 62 FC | 	wrlong	local02, objptr
1a714     04 E4 05 F1 | 	add	objptr, #4
1a718     F2 2A 62 FC | 	wrlong	local03, objptr
1a71c     50 00 00 FF 
1a720     DC E4 85 F1 | 	sub	objptr, ##41180
1a724     11 12 06 F6 | 	mov	arg01, #17
1a728     08 14 06 F6 | 	mov	arg02, #8
1a72c     10 16 06 F6 | 	mov	arg03, #16
1a730     20 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
1a734     10 12 06 F6 | 	mov	arg01, #16
1a738     20 14 06 F6 | 	mov	arg02, #32
1a73c     20 16 06 F6 | 	mov	arg03, #32
1a740     10 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
1a744                 | LR__2197
1a744     A7 F0 03 F6 | 	mov	ptra, fp
1a748     B2 00 A0 FD | 	call	#popregs_
1a74c                 | _do_run_ret
1a74c     2D 00 64 FD | 	ret
1a750                 | 
1a750                 | ' 
1a750                 | ' ' ------------------ save
1a750                 | ' 
1a750                 | ' sub do_save                        
1a750                 | _do_save
1a750     0A 4A 05 F6 | 	mov	COUNT_, #10
1a754     A8 00 A0 FD | 	call	#pushregs_
1a758     B8 F0 07 F1 | 	add	ptra, #184
1a75c     4A 00 00 FF 
1a760     A0 E4 05 F1 | 	add	objptr, ##38048
1a764     F2 16 02 FB | 	rdlong	arg03, objptr
1a768     0B 2D 02 F6 | 	mov	local04, arg03
1a76c     01 2C 66 F0 | 	shl	local04, #1
1a770     0B 2D 02 F1 | 	add	local04, arg03
1a774     02 2C 66 F0 | 	shl	local04, #2
1a778     03 00 00 FF 
1a77c     04 E4 85 F1 | 	sub	objptr, ##1540
1a780     F2 2C 02 F1 | 	add	local04, objptr
1a784     16 2F 02 FB | 	rdlong	local05, local04
1a788                 | ' 
1a788                 | ' numpar=compiledline(lineptr_e).result.uresult
1a788                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a788     01 2E 56 F2 | 	cmps	local05, #1 wc
1a78c     47 00 00 FF 
1a790     9C E4 85 F1 | 	sub	objptr, ##36508
1a794     14 00 90 CD |  if_b	jmp	#LR__2200
1a798     A4 2D BF FD | 	call	#_pop
1a79c     FD 26 02 F6 | 	mov	local01, result1
1a7a0     FE 28 02 F6 | 	mov	local02, result2
1a7a4     FF 2A 02 F6 | 	mov	local03, result3
1a7a8     18 00 90 FD | 	jmp	#LR__2201
1a7ac                 | LR__2200
1a7ac     52 00 00 FF 
1a7b0     1C E5 05 F1 | 	add	objptr, ##42268
1a7b4     F2 26 02 FB | 	rdlong	local01, objptr
1a7b8     52 00 00 FF 
1a7bc     1C E5 85 F1 | 	sub	objptr, ##42268
1a7c0     1F 2A 06 F6 | 	mov	local03, #31
1a7c4                 | LR__2201
1a7c4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a7c4     4A 00 00 FF 
1a7c8     A8 E4 05 F1 | 	add	objptr, ##38056
1a7cc     F2 12 02 FB | 	rdlong	arg01, objptr
1a7d0     4A 00 00 FF 
1a7d4     A8 E4 85 F1 | 	sub	objptr, ##38056
1a7d8     00 56 B0 FD | 	call	#_pslpeek
1a7dc     FF FF 7F FF 
1a7e0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1a7e4     10 00 90 5D |  if_ne	jmp	#LR__2202
1a7e8     1B 12 06 F6 | 	mov	arg01, #27
1a7ec     00 14 06 F6 | 	mov	arg02, #0
1a7f0     2C 54 B0 FD | 	call	#_printerror
1a7f4     3C 02 90 FD | 	jmp	#LR__2208
1a7f8                 | LR__2202
1a7f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a7f8     2B 2A 0E F2 | 	cmp	local03, #43 wz
1a7fc     10 00 90 5D |  if_ne	jmp	#LR__2203
1a800     13 13 02 F6 | 	mov	arg01, local01
1a804     A8 2E BF FD | 	call	#_convertstring
1a808     FD 26 02 F6 | 	mov	local01, result1
1a80c     1F 2A 06 F6 | 	mov	local03, #31
1a810                 | LR__2203
1a810                 | ' if t1.result_type=result_string then
1a810     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a814     1C 02 90 5D |  if_ne	jmp	#LR__2207
1a818                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a818     93 01 00 FF 
1a81c     97 15 06 F6 | 	mov	arg02, ##@LR__5684
1a820     13 13 02 F6 | 	mov	arg01, local01
1a824     A8 A8 B0 FD | 	call	#__system___string_cmp
1a828     00 FA 0D F2 | 	cmp	result1, #0 wz
1a82c     52 00 00 AF 
1a830     1C E5 05 A1 |  if_e	add	objptr, ##42268
1a834     F2 26 02 AB |  if_e	rdlong	local01, objptr
1a838     52 00 00 FF 
1a83c     1C E5 C5 F3 | 	sumz	objptr, ##42268
1a840     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1a844     52 00 00 5F 
1a848     1C E5 85 51 |  if_ne	sub	objptr, ##42268
1a84c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a84c     09 12 06 F6 | 	mov	arg01, #9
1a850     C4 E9 B0 FD | 	call	#__system__close
1a854     09 30 06 F6 | 	mov	local06, #9
1a858     4A 00 00 FF 
1a85c     B4 E4 05 F1 | 	add	objptr, ##38068
1a860     F2 12 02 FB | 	rdlong	arg01, objptr
1a864     4A 00 00 FF 
1a868     B4 E4 85 F1 | 	sub	objptr, ##38068
1a86c     93 01 00 FF 
1a870     98 15 06 F6 | 	mov	arg02, ##@LR__5685
1a874     8C A8 B0 FD | 	call	#__system___string_concat
1a878     FD 12 02 F6 | 	mov	arg01, result1
1a87c     13 15 02 F6 | 	mov	arg02, local01
1a880     80 A8 B0 FD | 	call	#__system___string_concat
1a884     FD 14 02 F6 | 	mov	arg02, result1
1a888     18 13 02 F6 | 	mov	arg01, local06
1a88c     0D 16 06 F6 | 	mov	arg03, #13
1a890     44 AF B0 FD | 	call	#__system___basic_open_string
1a894     4A 00 00 FF 
1a898     A8 E4 05 F1 | 	add	objptr, ##38056
1a89c     F2 32 02 FB | 	rdlong	local07, objptr
1a8a0     4A 00 00 FF 
1a8a4     A8 E4 85 F1 | 	sub	objptr, ##38056
1a8a8                 | '   saveptr=programstart
1a8a8                 | '   do
1a8a8                 | LR__2204
1a8a8     A7 12 02 F6 | 	mov	arg01, fp
1a8ac     14 12 06 F1 | 	add	arg01, #20
1a8b0     19 15 02 F6 | 	mov	arg02, local07
1a8b4     18 16 06 F6 | 	mov	arg03, #24
1a8b8     0B 00 00 FF 
1a8bc     CC E4 05 F1 | 	add	objptr, ##5836
1a8c0     E0 9F B0 FD | 	call	#_psram_spin2_read1
1a8c4     A7 12 02 F6 | 	mov	arg01, fp
1a8c8     2C 12 06 F1 | 	add	arg01, #44
1a8cc     1C 4E 05 F1 | 	add	fp, #28
1a8d0     A7 14 02 FB | 	rdlong	arg02, fp
1a8d4     04 4E 05 F1 | 	add	fp, #4
1a8d8     A7 16 02 FB | 	rdlong	arg03, fp
1a8dc     20 4E 85 F1 | 	sub	fp, #32
1a8e0     C0 9F B0 FD | 	call	#_psram_spin2_read1
1a8e4     0B 00 00 FF 
1a8e8     CC E4 85 F1 | 	sub	objptr, ##5836
1a8ec     93 01 00 FF 
1a8f0     9A 35 06 F6 | 	mov	local08, ##@LR__5686
1a8f4                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a8f4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a8f4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a8f4     01 36 06 F6 | 	mov	local09, #1
1a8f8     20 4E 05 F1 | 	add	fp, #32
1a8fc     A7 38 02 FB | 	rdlong	local10, fp
1a900     20 4E 85 F1 | 	sub	fp, #32
1a904     01 38 06 F1 | 	add	local10, #1
1a908                 | LR__2205
1a908     1C 37 52 F2 | 	cmps	local09, local10 wc
1a90c     34 00 90 3D |  if_ae	jmp	#LR__2206
1a910     1B 33 02 F6 | 	mov	local07, local09
1a914     01 32 86 F1 | 	sub	local07, #1
1a918     A7 30 02 F6 | 	mov	local06, fp
1a91c     2C 30 06 F1 | 	add	local06, #44
1a920     18 33 02 F1 | 	add	local07, local06
1a924     19 13 C2 FA | 	rdbyte	arg01, local07
1a928     00 BD B0 FD | 	call	#__system__Chr_S
1a92c     FD 14 02 F6 | 	mov	arg02, result1
1a930     1A 13 02 F6 | 	mov	arg01, local08
1a934     CC A7 B0 FD | 	call	#__system___string_concat
1a938     FD 34 02 F6 | 	mov	local08, result1
1a93c     01 36 06 F1 | 	add	local09, #1
1a940     C4 FF 9F FD | 	jmp	#LR__2205
1a944                 | LR__2206
1a944                 | '     print #9, saveline$
1a944     09 12 06 F6 | 	mov	arg01, #9
1a948     48 F2 B0 FD | 	call	#__system___getiolock_0622
1a94c     FD 12 02 F6 | 	mov	arg01, result1
1a950     54 A7 B0 FD | 	call	#__system___lockmem
1a954     09 12 06 F6 | 	mov	arg01, #9
1a958     1A 15 02 F6 | 	mov	arg02, local08
1a95c     00 16 06 F6 | 	mov	arg03, #0
1a960     64 AF B0 FD | 	call	#__system___basic_print_string
1a964     09 12 06 F6 | 	mov	arg01, #9
1a968     0A 14 06 F6 | 	mov	arg02, #10
1a96c     00 16 06 F6 | 	mov	arg03, #0
1a970     FC AE B0 FD | 	call	#__system___basic_print_char
1a974     09 12 06 F6 | 	mov	arg01, #9
1a978     18 F2 B0 FD | 	call	#__system___getiolock_0622
1a97c     FD 00 68 FC | 	wrlong	#0, result1
1a980     28 4E 05 F1 | 	add	fp, #40
1a984     A7 30 02 FB | 	rdlong	local06, fp
1a988     18 33 02 F6 | 	mov	local07, local06
1a98c     28 4E 85 F1 | 	sub	fp, #40
1a990     FF FF 3F FF 
1a994     FF 31 0E F2 | 	cmp	local06, ##2147483647 wz
1a998     0C FF 9F 5D |  if_ne	jmp	#LR__2204
1a99c                 | '   close #9  
1a99c     09 12 06 F6 | 	mov	arg01, #9
1a9a0     74 E8 B0 FD | 	call	#__system__close
1a9a4                 | '   print "Saved as ";currentdir$+"/"+loadname
1a9a4     00 12 06 F6 | 	mov	arg01, #0
1a9a8     E8 F1 B0 FD | 	call	#__system___getiolock_0622
1a9ac     FD 12 02 F6 | 	mov	arg01, result1
1a9b0     F4 A6 B0 FD | 	call	#__system___lockmem
1a9b4     93 01 00 FF 
1a9b8     9B 15 06 F6 | 	mov	arg02, ##@LR__5687
1a9bc     00 12 06 F6 | 	mov	arg01, #0
1a9c0     00 16 06 F6 | 	mov	arg03, #0
1a9c4     00 AF B0 FD | 	call	#__system___basic_print_string
1a9c8     00 2C 06 F6 | 	mov	local04, #0
1a9cc     4A 00 00 FF 
1a9d0     B4 E4 05 F1 | 	add	objptr, ##38068
1a9d4     F2 12 02 FB | 	rdlong	arg01, objptr
1a9d8     4A 00 00 FF 
1a9dc     B4 E4 85 F1 | 	sub	objptr, ##38068
1a9e0     93 01 00 FF 
1a9e4     A5 15 06 F6 | 	mov	arg02, ##@LR__5688
1a9e8     18 A7 B0 FD | 	call	#__system___string_concat
1a9ec     FD 12 02 F6 | 	mov	arg01, result1
1a9f0     52 00 00 FF 
1a9f4     1C E5 05 F1 | 	add	objptr, ##42268
1a9f8     F2 14 02 FB | 	rdlong	arg02, objptr
1a9fc     52 00 00 FF 
1aa00     1C E5 85 F1 | 	sub	objptr, ##42268
1aa04     FC A6 B0 FD | 	call	#__system___string_concat
1aa08     FD 14 02 F6 | 	mov	arg02, result1
1aa0c     16 13 02 F6 | 	mov	arg01, local04
1aa10     00 16 06 F6 | 	mov	arg03, #0
1aa14     B0 AE B0 FD | 	call	#__system___basic_print_string
1aa18     00 12 06 F6 | 	mov	arg01, #0
1aa1c     0A 14 06 F6 | 	mov	arg02, #10
1aa20     00 16 06 F6 | 	mov	arg03, #0
1aa24     48 AE B0 FD | 	call	#__system___basic_print_char
1aa28     00 12 06 F6 | 	mov	arg01, #0
1aa2c     64 F1 B0 FD | 	call	#__system___getiolock_0622
1aa30     FD 00 68 FC | 	wrlong	#0, result1
1aa34                 | LR__2207
1aa34                 | LR__2208
1aa34     A7 F0 03 F6 | 	mov	ptra, fp
1aa38     B2 00 A0 FD | 	call	#popregs_
1aa3c                 | _do_save_ret
1aa3c     2D 00 64 FD | 	ret
1aa40                 | 
1aa40                 | ' 
1aa40                 | ' ' ------------------ setamode
1aa40                 | ' 
1aa40                 | ' sub do_setamode
1aa40                 | _do_setamode
1aa40     02 4A 05 F6 | 	mov	COUNT_, #2
1aa44     A8 00 A0 FD | 	call	#pushregs_
1aa48     18 F0 07 F1 | 	add	ptra, #24
1aa4c     F0 2A BF FD | 	call	#_pop
1aa50     FD 12 02 F6 | 	mov	arg01, result1
1aa54     FE 26 02 F6 | 	mov	local01, result2
1aa58     FF 28 02 F6 | 	mov	local02, result3
1aa5c     A7 12 62 FC | 	wrlong	arg01, fp
1aa60     04 4E 05 F1 | 	add	fp, #4
1aa64     A7 26 62 FC | 	wrlong	local01, fp
1aa68     04 4E 05 F1 | 	add	fp, #4
1aa6c     A7 28 62 FC | 	wrlong	local02, fp
1aa70     08 4E 85 F1 | 	sub	fp, #8
1aa74     C8 2A BF FD | 	call	#_pop
1aa78     FD 28 02 F6 | 	mov	local02, result1
1aa7c     0C 4E 05 F1 | 	add	fp, #12
1aa80     A7 28 62 FC | 	wrlong	local02, fp
1aa84     04 4E 05 F1 | 	add	fp, #4
1aa88     A7 FC 61 FC | 	wrlong	result2, fp
1aa8c     04 4E 05 F1 | 	add	fp, #4
1aa90     A7 FE 61 FC | 	wrlong	result3, fp
1aa94     08 4E 85 F1 | 	sub	fp, #8
1aa98     A7 12 02 F6 | 	mov	arg01, fp
1aa9c     0C 4E 85 F1 | 	sub	fp, #12
1aaa0     78 2C BF FD | 	call	#_converttoint
1aaa4     FD 26 02 F6 | 	mov	local01, result1
1aaa8     03 26 66 F0 | 	shl	local01, #3
1aaac     FD 26 82 F1 | 	sub	local01, result1
1aab0     02 26 66 F0 | 	shl	local01, #2
1aab4     F2 28 02 F6 | 	mov	local02, objptr
1aab8     14 00 00 FF 
1aabc     38 29 06 F1 | 	add	local02, ##10552
1aac0     14 27 02 F1 | 	add	local01, local02
1aac4     A7 12 02 F6 | 	mov	arg01, fp
1aac8     50 2C BF FD | 	call	#_converttoint
1aacc     16 26 06 F1 | 	add	local01, #22
1aad0     13 FB 51 FC | 	wrword	result1, local01
1aad4     A7 F0 03 F6 | 	mov	ptra, fp
1aad8     B2 00 A0 FD | 	call	#popregs_
1aadc                 | _do_setamode_ret
1aadc     2D 00 64 FD | 	ret
1aae0                 | 
1aae0                 | ' 
1aae0                 | ' 
1aae0                 | ' ' ------------------ setcolor
1aae0                 | ' 
1aae0                 | ' sub do_setcolor
1aae0                 | _do_setcolor
1aae0     05 4A 05 F6 | 	mov	COUNT_, #5
1aae4     A8 00 A0 FD | 	call	#pushregs_
1aae8     20 F0 07 F1 | 	add	ptra, #32
1aaec     4A 00 00 FF 
1aaf0     A0 E4 05 F1 | 	add	objptr, ##38048
1aaf4     F2 18 02 FB | 	rdlong	arg04, objptr
1aaf8     0C 17 02 F6 | 	mov	arg03, arg04
1aafc     01 16 66 F0 | 	shl	arg03, #1
1ab00     0C 17 02 F1 | 	add	arg03, arg04
1ab04     02 16 66 F0 | 	shl	arg03, #2
1ab08     03 00 00 FF 
1ab0c     04 E4 85 F1 | 	sub	objptr, ##1540
1ab10     F2 16 02 F1 | 	add	arg03, objptr
1ab14     0B 27 02 FB | 	rdlong	local01, arg03
1ab18                 | ' 
1ab18                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab18                 | ' 
1ab18                 | ' if numpar=4 then
1ab18     04 26 0E F2 | 	cmp	local01, #4 wz
1ab1c     47 00 00 FF 
1ab20     9C E4 85 F1 | 	sub	objptr, ##36508
1ab24     B4 00 90 5D |  if_ne	jmp	#LR__2210
1ab28     14 2A BF FD | 	call	#_pop
1ab2c     FF 26 02 F6 | 	mov	local01, result3
1ab30     A7 FA 61 FC | 	wrlong	result1, fp
1ab34     04 4E 05 F1 | 	add	fp, #4
1ab38     A7 FC 61 FC | 	wrlong	result2, fp
1ab3c     04 4E 05 F1 | 	add	fp, #4
1ab40     A7 26 62 FC | 	wrlong	local01, fp
1ab44     08 4E 85 F1 | 	sub	fp, #8
1ab48     A7 12 02 F6 | 	mov	arg01, fp
1ab4c     CC 2B BF FD | 	call	#_converttoint
1ab50     FD 28 02 F6 | 	mov	local02, result1
1ab54     E8 29 BF FD | 	call	#_pop
1ab58     FF 26 02 F6 | 	mov	local01, result3
1ab5c     A7 FA 61 FC | 	wrlong	result1, fp
1ab60     04 4E 05 F1 | 	add	fp, #4
1ab64     A7 FC 61 FC | 	wrlong	result2, fp
1ab68     04 4E 05 F1 | 	add	fp, #4
1ab6c     A7 26 62 FC | 	wrlong	local01, fp
1ab70     08 4E 85 F1 | 	sub	fp, #8
1ab74     A7 12 02 F6 | 	mov	arg01, fp
1ab78     A0 2B BF FD | 	call	#_converttoint
1ab7c     FD 2A 02 F6 | 	mov	local03, result1
1ab80     BC 29 BF FD | 	call	#_pop
1ab84     FF 26 02 F6 | 	mov	local01, result3
1ab88     A7 FA 61 FC | 	wrlong	result1, fp
1ab8c     04 4E 05 F1 | 	add	fp, #4
1ab90     A7 FC 61 FC | 	wrlong	result2, fp
1ab94     04 4E 05 F1 | 	add	fp, #4
1ab98     A7 26 62 FC | 	wrlong	local01, fp
1ab9c     08 4E 85 F1 | 	sub	fp, #8
1aba0     A7 12 02 F6 | 	mov	arg01, fp
1aba4     74 2B BF FD | 	call	#_converttoint
1aba8     FD 2C 02 F6 | 	mov	local04, result1
1abac     90 29 BF FD | 	call	#_pop
1abb0     FF 26 02 F6 | 	mov	local01, result3
1abb4     A7 FA 61 FC | 	wrlong	result1, fp
1abb8     04 4E 05 F1 | 	add	fp, #4
1abbc     A7 FC 61 FC | 	wrlong	result2, fp
1abc0     04 4E 05 F1 | 	add	fp, #4
1abc4     A7 26 62 FC | 	wrlong	local01, fp
1abc8     08 4E 85 F1 | 	sub	fp, #8
1abcc     A7 12 02 F6 | 	mov	arg01, fp
1abd0     48 2B BF FD | 	call	#_converttoint
1abd4     FD 2E 02 F6 | 	mov	local05, result1
1abd8     C0 00 90 FD | 	jmp	#LR__2213
1abdc                 | LR__2210
1abdc     02 26 0E F2 | 	cmp	local01, #2 wz
1abe0     68 00 90 5D |  if_ne	jmp	#LR__2211
1abe4     58 29 BF FD | 	call	#_pop
1abe8     FF 2E 02 F6 | 	mov	local05, result3
1abec     A7 FA 61 FC | 	wrlong	result1, fp
1abf0     04 4E 05 F1 | 	add	fp, #4
1abf4     A7 FC 61 FC | 	wrlong	result2, fp
1abf8     04 4E 05 F1 | 	add	fp, #4
1abfc     A7 2E 62 FC | 	wrlong	local05, fp
1ac00     08 4E 85 F1 | 	sub	fp, #8
1ac04     A7 12 02 F6 | 	mov	arg01, fp
1ac08     10 2B BF FD | 	call	#_converttoint
1ac0c     FD 2C 02 F6 | 	mov	local04, result1
1ac10     16 29 E2 F8 | 	getbyte	local02, local04, #0
1ac14     16 2B EA F8 | 	getbyte	local03, local04, #1
1ac18     16 2D F2 F8 | 	getbyte	local04, local04, #2
1ac1c     20 29 BF FD | 	call	#_pop
1ac20     FF 2E 02 F6 | 	mov	local05, result3
1ac24     A7 FA 61 FC | 	wrlong	result1, fp
1ac28     04 4E 05 F1 | 	add	fp, #4
1ac2c     A7 FC 61 FC | 	wrlong	result2, fp
1ac30     04 4E 05 F1 | 	add	fp, #4
1ac34     A7 2E 62 FC | 	wrlong	local05, fp
1ac38     08 4E 85 F1 | 	sub	fp, #8
1ac3c     A7 12 02 F6 | 	mov	arg01, fp
1ac40     D8 2A BF FD | 	call	#_converttoint
1ac44     FD 2E 02 F6 | 	mov	local05, result1
1ac48     50 00 90 FD | 	jmp	#LR__2212
1ac4c                 | LR__2211
1ac4c                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1ac4c     00 12 06 F6 | 	mov	arg01, #0
1ac50     40 EF B0 FD | 	call	#__system___getiolock_0622
1ac54     FD 12 02 F6 | 	mov	arg01, result1
1ac58     4C A4 B0 FD | 	call	#__system___lockmem
1ac5c     93 01 00 FF 
1ac60     A7 15 06 F6 | 	mov	arg02, ##@LR__5689
1ac64     00 12 06 F6 | 	mov	arg01, #0
1ac68     00 16 06 F6 | 	mov	arg03, #0
1ac6c     58 AC B0 FD | 	call	#__system___basic_print_string
1ac70     00 12 06 F6 | 	mov	arg01, #0
1ac74     1C EF B0 FD | 	call	#__system___getiolock_0622
1ac78     FD 00 68 FC | 	wrlong	#0, result1
1ac7c     50 00 00 FF 
1ac80     10 E5 05 F1 | 	add	objptr, ##41232
1ac84     F2 14 02 FB | 	rdlong	arg02, objptr
1ac88     50 00 00 FF 
1ac8c     10 E5 85 F1 | 	sub	objptr, ##41232
1ac90     27 12 06 F6 | 	mov	arg01, #39
1ac94     88 4F B0 FD | 	call	#_printerror
1ac98     2C 00 90 FD | 	jmp	#LR__2214
1ac9c                 | LR__2212
1ac9c                 | LR__2213
1ac9c                 | ' 
1ac9c                 | ' cc:=r<<24+g<<16+b<<8
1ac9c     18 2C 66 F0 | 	shl	local04, #24
1aca0     10 2A 66 F0 | 	shl	local03, #16
1aca4     15 2D 02 F1 | 	add	local04, local03
1aca8     08 28 66 F0 | 	shl	local02, #8
1acac     14 2D 02 F1 | 	add	local04, local02
1acb0                 | ' long[palette_ptr+4*c]:=cc
1acb0     1C E4 05 F1 | 	add	objptr, #28
1acb4     F2 18 02 FB | 	rdlong	arg04, objptr
1acb8     1C E4 85 F1 | 	sub	objptr, #28
1acbc     02 2E 66 F0 | 	shl	local05, #2
1acc0     17 19 02 F1 | 	add	arg04, local05
1acc4     0C 2D 62 FC | 	wrlong	local04, arg04
1acc8                 | LR__2214
1acc8     A7 F0 03 F6 | 	mov	ptra, fp
1accc     B2 00 A0 FD | 	call	#popregs_
1acd0                 | _do_setcolor_ret
1acd0     2D 00 64 FD | 	ret
1acd4                 | 
1acd4                 | ' 
1acd4                 | ' ' ------------------ setdelay
1acd4                 | ' 
1acd4                 | ' sub do_setdelay
1acd4                 | _do_setdelay
1acd4     02 4A 05 F6 | 	mov	COUNT_, #2
1acd8     A8 00 A0 FD | 	call	#pushregs_
1acdc     18 F0 07 F1 | 	add	ptra, #24
1ace0     5C 28 BF FD | 	call	#_pop
1ace4     FD 12 02 F6 | 	mov	arg01, result1
1ace8     FE 26 02 F6 | 	mov	local01, result2
1acec     FF 28 02 F6 | 	mov	local02, result3
1acf0     A7 12 62 FC | 	wrlong	arg01, fp
1acf4     04 4E 05 F1 | 	add	fp, #4
1acf8     A7 26 62 FC | 	wrlong	local01, fp
1acfc     04 4E 05 F1 | 	add	fp, #4
1ad00     A7 28 62 FC | 	wrlong	local02, fp
1ad04     08 4E 85 F1 | 	sub	fp, #8
1ad08     34 28 BF FD | 	call	#_pop
1ad0c     FD 28 02 F6 | 	mov	local02, result1
1ad10     0C 4E 05 F1 | 	add	fp, #12
1ad14     A7 28 62 FC | 	wrlong	local02, fp
1ad18     04 4E 05 F1 | 	add	fp, #4
1ad1c     A7 FC 61 FC | 	wrlong	result2, fp
1ad20     04 4E 05 F1 | 	add	fp, #4
1ad24     A7 FE 61 FC | 	wrlong	result3, fp
1ad28     08 4E 85 F1 | 	sub	fp, #8
1ad2c     A7 12 02 F6 | 	mov	arg01, fp
1ad30     0C 4E 85 F1 | 	sub	fp, #12
1ad34     E4 29 BF FD | 	call	#_converttoint
1ad38     FD 26 02 F6 | 	mov	local01, result1
1ad3c     03 26 66 F0 | 	shl	local01, #3
1ad40     FD 26 82 F1 | 	sub	local01, result1
1ad44     02 26 66 F0 | 	shl	local01, #2
1ad48     F2 28 02 F6 | 	mov	local02, objptr
1ad4c     14 00 00 FF 
1ad50     38 29 06 F1 | 	add	local02, ##10552
1ad54     14 27 02 F1 | 	add	local01, local02
1ad58     A7 12 02 F6 | 	mov	arg01, fp
1ad5c     BC 29 BF FD | 	call	#_converttoint
1ad60     06 26 06 F1 | 	add	local01, #6
1ad64     13 FB 51 FC | 	wrword	result1, local01
1ad68     A7 F0 03 F6 | 	mov	ptra, fp
1ad6c     B2 00 A0 FD | 	call	#popregs_
1ad70                 | _do_setdelay_ret
1ad70     2D 00 64 FD | 	ret
1ad74                 | 
1ad74                 | ' 
1ad74                 | ' ' ------------------ setenv
1ad74                 | ' 
1ad74                 | ' sub do_setenv
1ad74                 | _do_setenv
1ad74     02 4A 05 F6 | 	mov	COUNT_, #2
1ad78     A8 00 A0 FD | 	call	#pushregs_
1ad7c     18 F0 07 F1 | 	add	ptra, #24
1ad80     BC 27 BF FD | 	call	#_pop
1ad84     FD 12 02 F6 | 	mov	arg01, result1
1ad88     FE 26 02 F6 | 	mov	local01, result2
1ad8c     FF 28 02 F6 | 	mov	local02, result3
1ad90     A7 12 62 FC | 	wrlong	arg01, fp
1ad94     04 4E 05 F1 | 	add	fp, #4
1ad98     A7 26 62 FC | 	wrlong	local01, fp
1ad9c     04 4E 05 F1 | 	add	fp, #4
1ada0     A7 28 62 FC | 	wrlong	local02, fp
1ada4     08 4E 85 F1 | 	sub	fp, #8
1ada8     94 27 BF FD | 	call	#_pop
1adac     FD 28 02 F6 | 	mov	local02, result1
1adb0     0C 4E 05 F1 | 	add	fp, #12
1adb4     A7 28 62 FC | 	wrlong	local02, fp
1adb8     04 4E 05 F1 | 	add	fp, #4
1adbc     A7 FC 61 FC | 	wrlong	result2, fp
1adc0     04 4E 05 F1 | 	add	fp, #4
1adc4     A7 FE 61 FC | 	wrlong	result3, fp
1adc8     08 4E 85 F1 | 	sub	fp, #8
1adcc     A7 12 02 F6 | 	mov	arg01, fp
1add0     0C 4E 85 F1 | 	sub	fp, #12
1add4     44 29 BF FD | 	call	#_converttoint
1add8     FD 26 02 F6 | 	mov	local01, result1
1addc     03 26 66 F0 | 	shl	local01, #3
1ade0     FD 26 82 F1 | 	sub	local01, result1
1ade4     02 26 66 F0 | 	shl	local01, #2
1ade8     F2 28 02 F6 | 	mov	local02, objptr
1adec     14 00 00 FF 
1adf0     38 29 06 F1 | 	add	local02, ##10552
1adf4     14 27 02 F1 | 	add	local01, local02
1adf8     A7 12 02 F6 | 	mov	arg01, fp
1adfc     1C 29 BF FD | 	call	#_converttoint
1ae00     05 26 06 F1 | 	add	local01, #5
1ae04     13 FB 41 FC | 	wrbyte	result1, local01
1ae08     A7 F0 03 F6 | 	mov	ptra, fp
1ae0c     B2 00 A0 FD | 	call	#popregs_
1ae10                 | _do_setenv_ret
1ae10     2D 00 64 FD | 	ret
1ae14                 | 
1ae14                 | ' 
1ae14                 | ' ' ------------------ setlen
1ae14                 | ' 
1ae14                 | ' sub do_setlen
1ae14                 | _do_setlen
1ae14     02 4A 05 F6 | 	mov	COUNT_, #2
1ae18     A8 00 A0 FD | 	call	#pushregs_
1ae1c     18 F0 07 F1 | 	add	ptra, #24
1ae20     1C 27 BF FD | 	call	#_pop
1ae24     FD 12 02 F6 | 	mov	arg01, result1
1ae28     FE 26 02 F6 | 	mov	local01, result2
1ae2c     FF 28 02 F6 | 	mov	local02, result3
1ae30     A7 12 62 FC | 	wrlong	arg01, fp
1ae34     04 4E 05 F1 | 	add	fp, #4
1ae38     A7 26 62 FC | 	wrlong	local01, fp
1ae3c     04 4E 05 F1 | 	add	fp, #4
1ae40     A7 28 62 FC | 	wrlong	local02, fp
1ae44     08 4E 85 F1 | 	sub	fp, #8
1ae48     F4 26 BF FD | 	call	#_pop
1ae4c     FD 28 02 F6 | 	mov	local02, result1
1ae50     0C 4E 05 F1 | 	add	fp, #12
1ae54     A7 28 62 FC | 	wrlong	local02, fp
1ae58     04 4E 05 F1 | 	add	fp, #4
1ae5c     A7 FC 61 FC | 	wrlong	result2, fp
1ae60     04 4E 05 F1 | 	add	fp, #4
1ae64     A7 FE 61 FC | 	wrlong	result3, fp
1ae68     08 4E 85 F1 | 	sub	fp, #8
1ae6c     A7 12 02 F6 | 	mov	arg01, fp
1ae70     0C 4E 85 F1 | 	sub	fp, #12
1ae74     A4 28 BF FD | 	call	#_converttoint
1ae78     FD 26 02 F6 | 	mov	local01, result1
1ae7c     03 26 66 F0 | 	shl	local01, #3
1ae80     FD 26 82 F1 | 	sub	local01, result1
1ae84     02 26 66 F0 | 	shl	local01, #2
1ae88     F2 28 02 F6 | 	mov	local02, objptr
1ae8c     14 00 00 FF 
1ae90     38 29 06 F1 | 	add	local02, ##10552
1ae94     14 27 02 F1 | 	add	local01, local02
1ae98     A7 12 02 F6 | 	mov	arg01, fp
1ae9c     38 29 BF FD | 	call	#_converttofloat
1aea0     08 26 06 F1 | 	add	local01, #8
1aea4     13 FB 61 FC | 	wrlong	result1, local01
1aea8     A7 F0 03 F6 | 	mov	ptra, fp
1aeac     B2 00 A0 FD | 	call	#popregs_
1aeb0                 | _do_setlen_ret
1aeb0     2D 00 64 FD | 	ret
1aeb4                 | 
1aeb4                 | ' 
1aeb4                 | ' ' ------------------ setpan
1aeb4                 | ' 
1aeb4                 | ' sub do_setpan
1aeb4                 | _do_setpan
1aeb4     02 4A 05 F6 | 	mov	COUNT_, #2
1aeb8     A8 00 A0 FD | 	call	#pushregs_
1aebc     18 F0 07 F1 | 	add	ptra, #24
1aec0     7C 26 BF FD | 	call	#_pop
1aec4     FD 12 02 F6 | 	mov	arg01, result1
1aec8     FE 26 02 F6 | 	mov	local01, result2
1aecc     FF 28 02 F6 | 	mov	local02, result3
1aed0     A7 12 62 FC | 	wrlong	arg01, fp
1aed4     04 4E 05 F1 | 	add	fp, #4
1aed8     A7 26 62 FC | 	wrlong	local01, fp
1aedc     04 4E 05 F1 | 	add	fp, #4
1aee0     A7 28 62 FC | 	wrlong	local02, fp
1aee4     08 4E 85 F1 | 	sub	fp, #8
1aee8     54 26 BF FD | 	call	#_pop
1aeec     FD 28 02 F6 | 	mov	local02, result1
1aef0     0C 4E 05 F1 | 	add	fp, #12
1aef4     A7 28 62 FC | 	wrlong	local02, fp
1aef8     04 4E 05 F1 | 	add	fp, #4
1aefc     A7 FC 61 FC | 	wrlong	result2, fp
1af00     04 4E 05 F1 | 	add	fp, #4
1af04     A7 FE 61 FC | 	wrlong	result3, fp
1af08     08 4E 85 F1 | 	sub	fp, #8
1af0c     A7 12 02 F6 | 	mov	arg01, fp
1af10     0C 4E 85 F1 | 	sub	fp, #12
1af14     04 28 BF FD | 	call	#_converttoint
1af18     FD 26 02 F6 | 	mov	local01, result1
1af1c     03 26 66 F0 | 	shl	local01, #3
1af20     FD 26 82 F1 | 	sub	local01, result1
1af24     02 26 66 F0 | 	shl	local01, #2
1af28     F2 28 02 F6 | 	mov	local02, objptr
1af2c     14 00 00 FF 
1af30     38 29 06 F1 | 	add	local02, ##10552
1af34     14 27 02 F1 | 	add	local01, local02
1af38     A7 12 02 F6 | 	mov	arg01, fp
1af3c     98 28 BF FD | 	call	#_converttofloat
1af40     10 26 06 F1 | 	add	local01, #16
1af44     13 FB 61 FC | 	wrlong	result1, local01
1af48     A7 F0 03 F6 | 	mov	ptra, fp
1af4c     B2 00 A0 FD | 	call	#popregs_
1af50                 | _do_setpan_ret
1af50     2D 00 64 FD | 	ret
1af54                 | 
1af54                 | ' 
1af54                 | ' ' ------------------ setsustain
1af54                 | ' 
1af54                 | ' sub do_setsustain
1af54                 | _do_setsustain
1af54     02 4A 05 F6 | 	mov	COUNT_, #2
1af58     A8 00 A0 FD | 	call	#pushregs_
1af5c     18 F0 07 F1 | 	add	ptra, #24
1af60     DC 25 BF FD | 	call	#_pop
1af64     FD 12 02 F6 | 	mov	arg01, result1
1af68     FE 26 02 F6 | 	mov	local01, result2
1af6c     FF 28 02 F6 | 	mov	local02, result3
1af70     A7 12 62 FC | 	wrlong	arg01, fp
1af74     04 4E 05 F1 | 	add	fp, #4
1af78     A7 26 62 FC | 	wrlong	local01, fp
1af7c     04 4E 05 F1 | 	add	fp, #4
1af80     A7 28 62 FC | 	wrlong	local02, fp
1af84     08 4E 85 F1 | 	sub	fp, #8
1af88     B4 25 BF FD | 	call	#_pop
1af8c     FD 28 02 F6 | 	mov	local02, result1
1af90     0C 4E 05 F1 | 	add	fp, #12
1af94     A7 28 62 FC | 	wrlong	local02, fp
1af98     04 4E 05 F1 | 	add	fp, #4
1af9c     A7 FC 61 FC | 	wrlong	result2, fp
1afa0     04 4E 05 F1 | 	add	fp, #4
1afa4     A7 FE 61 FC | 	wrlong	result3, fp
1afa8     08 4E 85 F1 | 	sub	fp, #8
1afac     A7 12 02 F6 | 	mov	arg01, fp
1afb0     0C 4E 85 F1 | 	sub	fp, #12
1afb4     64 27 BF FD | 	call	#_converttoint
1afb8     FD 26 02 F6 | 	mov	local01, result1
1afbc     03 26 66 F0 | 	shl	local01, #3
1afc0     FD 26 82 F1 | 	sub	local01, result1
1afc4     02 26 66 F0 | 	shl	local01, #2
1afc8     F2 28 02 F6 | 	mov	local02, objptr
1afcc     14 00 00 FF 
1afd0     38 29 06 F1 | 	add	local02, ##10552
1afd4     14 27 02 F1 | 	add	local01, local02
1afd8     A7 12 02 F6 | 	mov	arg01, fp
1afdc     3C 27 BF FD | 	call	#_converttoint
1afe0     14 26 06 F1 | 	add	local01, #20
1afe4     13 FB 51 FC | 	wrword	result1, local01
1afe8     A7 F0 03 F6 | 	mov	ptra, fp
1afec     B2 00 A0 FD | 	call	#popregs_
1aff0                 | _do_setsustain_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | ' 
1aff4                 | ' ' ------------------ setvol
1aff4                 | ' 
1aff4                 | ' sub do_setvol
1aff4                 | _do_setvol
1aff4     02 4A 05 F6 | 	mov	COUNT_, #2
1aff8     A8 00 A0 FD | 	call	#pushregs_
1affc     18 F0 07 F1 | 	add	ptra, #24
1b000     3C 25 BF FD | 	call	#_pop
1b004     FD 12 02 F6 | 	mov	arg01, result1
1b008     FE 26 02 F6 | 	mov	local01, result2
1b00c     FF 28 02 F6 | 	mov	local02, result3
1b010     A7 12 62 FC | 	wrlong	arg01, fp
1b014     04 4E 05 F1 | 	add	fp, #4
1b018     A7 26 62 FC | 	wrlong	local01, fp
1b01c     04 4E 05 F1 | 	add	fp, #4
1b020     A7 28 62 FC | 	wrlong	local02, fp
1b024     08 4E 85 F1 | 	sub	fp, #8
1b028     14 25 BF FD | 	call	#_pop
1b02c     FD 28 02 F6 | 	mov	local02, result1
1b030     0C 4E 05 F1 | 	add	fp, #12
1b034     A7 28 62 FC | 	wrlong	local02, fp
1b038     04 4E 05 F1 | 	add	fp, #4
1b03c     A7 FC 61 FC | 	wrlong	result2, fp
1b040     04 4E 05 F1 | 	add	fp, #4
1b044     A7 FE 61 FC | 	wrlong	result3, fp
1b048     08 4E 85 F1 | 	sub	fp, #8
1b04c     A7 12 02 F6 | 	mov	arg01, fp
1b050     0C 4E 85 F1 | 	sub	fp, #12
1b054     C4 26 BF FD | 	call	#_converttoint
1b058     FD 26 02 F6 | 	mov	local01, result1
1b05c     03 26 66 F0 | 	shl	local01, #3
1b060     FD 26 82 F1 | 	sub	local01, result1
1b064     02 26 66 F0 | 	shl	local01, #2
1b068     F2 28 02 F6 | 	mov	local02, objptr
1b06c     14 00 00 FF 
1b070     38 29 06 F1 | 	add	local02, ##10552
1b074     14 27 02 F1 | 	add	local01, local02
1b078     A7 12 02 F6 | 	mov	arg01, fp
1b07c     58 27 BF FD | 	call	#_converttofloat
1b080     0C 26 06 F1 | 	add	local01, #12
1b084     13 FB 61 FC | 	wrlong	result1, local01
1b088     A7 F0 03 F6 | 	mov	ptra, fp
1b08c     B2 00 A0 FD | 	call	#popregs_
1b090                 | _do_setvol_ret
1b090     2D 00 64 FD | 	ret
1b094                 | 
1b094                 | ' 
1b094                 | ' ' ------------------ setwave
1b094                 | ' 
1b094                 | ' sub do_setwave
1b094                 | _do_setwave
1b094     02 4A 05 F6 | 	mov	COUNT_, #2
1b098     A8 00 A0 FD | 	call	#pushregs_
1b09c     18 F0 07 F1 | 	add	ptra, #24
1b0a0     9C 24 BF FD | 	call	#_pop
1b0a4     FD 12 02 F6 | 	mov	arg01, result1
1b0a8     FE 26 02 F6 | 	mov	local01, result2
1b0ac     FF 28 02 F6 | 	mov	local02, result3
1b0b0     A7 12 62 FC | 	wrlong	arg01, fp
1b0b4     04 4E 05 F1 | 	add	fp, #4
1b0b8     A7 26 62 FC | 	wrlong	local01, fp
1b0bc     04 4E 05 F1 | 	add	fp, #4
1b0c0     A7 28 62 FC | 	wrlong	local02, fp
1b0c4     08 4E 85 F1 | 	sub	fp, #8
1b0c8     74 24 BF FD | 	call	#_pop
1b0cc     FD 28 02 F6 | 	mov	local02, result1
1b0d0     0C 4E 05 F1 | 	add	fp, #12
1b0d4     A7 28 62 FC | 	wrlong	local02, fp
1b0d8     04 4E 05 F1 | 	add	fp, #4
1b0dc     A7 FC 61 FC | 	wrlong	result2, fp
1b0e0     04 4E 05 F1 | 	add	fp, #4
1b0e4     A7 FE 61 FC | 	wrlong	result3, fp
1b0e8     08 4E 85 F1 | 	sub	fp, #8
1b0ec     A7 12 02 F6 | 	mov	arg01, fp
1b0f0     0C 4E 85 F1 | 	sub	fp, #12
1b0f4     24 26 BF FD | 	call	#_converttoint
1b0f8     FD 26 02 F6 | 	mov	local01, result1
1b0fc     03 26 66 F0 | 	shl	local01, #3
1b100     FD 26 82 F1 | 	sub	local01, result1
1b104     02 26 66 F0 | 	shl	local01, #2
1b108     F2 28 02 F6 | 	mov	local02, objptr
1b10c     14 00 00 FF 
1b110     38 29 06 F1 | 	add	local02, ##10552
1b114     14 27 02 F1 | 	add	local01, local02
1b118     A7 12 02 F6 | 	mov	arg01, fp
1b11c     FC 25 BF FD | 	call	#_converttoint
1b120     04 26 06 F1 | 	add	local01, #4
1b124     13 FB 41 FC | 	wrbyte	result1, local01
1b128     A7 F0 03 F6 | 	mov	ptra, fp
1b12c     B2 00 A0 FD | 	call	#popregs_
1b130                 | _do_setwave_ret
1b130     2D 00 64 FD | 	ret
1b134                 | 
1b134                 | ' 
1b134                 | ' ' ------------------ shutup
1b134                 | ' 
1b134                 | ' sub do_shutup
1b134                 | _do_shutup
1b134     03 4A 05 F6 | 	mov	COUNT_, #3
1b138     A8 00 A0 FD | 	call	#pushregs_
1b13c     18 F0 07 F1 | 	add	ptra, #24
1b140     4A 00 00 FF 
1b144     A0 E4 05 F1 | 	add	objptr, ##38048
1b148     F2 26 02 FB | 	rdlong	local01, objptr
1b14c     13 29 02 F6 | 	mov	local02, local01
1b150     01 28 66 F0 | 	shl	local02, #1
1b154     13 29 02 F1 | 	add	local02, local01
1b158     02 28 66 F0 | 	shl	local02, #2
1b15c     03 00 00 FF 
1b160     04 E4 85 F1 | 	sub	objptr, ##1540
1b164     F2 28 02 F1 | 	add	local02, objptr
1b168     14 29 0A FB | 	rdlong	local02, local02 wz
1b16c                 | ' 
1b16c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b16c                 | ' if numpar=0 then
1b16c     47 00 00 FF 
1b170     9C E4 85 F1 | 	sub	objptr, ##36508
1b174     40 00 90 5D |  if_ne	jmp	#LR__2222
1b178                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1b178     00 2A 06 F6 | 	mov	local03, #0
1b17c     37 00 00 FF 
1b180     30 E4 05 F1 | 	add	objptr, ##28208
1b184     97 12 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
1b188                 | LR__2220
1b188     F2 12 02 FB | 	rdlong	arg01, objptr
1b18c     15 29 02 F6 | 	mov	local02, local03
1b190     06 28 66 F0 | 	shl	local02, #6
1b194     14 13 02 F1 | 	add	arg01, local02
1b198     14 12 06 F1 | 	add	arg01, #20
1b19c     09 01 58 FC | 	wrword	#0, arg01
1b1a0     01 2A 06 F1 | 	add	local03, #1
1b1a4     08 2A 56 F2 | 	cmps	local03, #8 wc
1b1a8     DC FF 9F CD |  if_b	jmp	#LR__2220
1b1ac                 | LR__2221
1b1ac     37 00 00 FF 
1b1b0     30 E4 85 F1 | 	sub	objptr, ##28208
1b1b4     58 00 90 FD | 	jmp	#LR__2223
1b1b8                 | LR__2222
1b1b8     84 23 BF FD | 	call	#_pop
1b1bc     FF 26 02 F6 | 	mov	local01, result3
1b1c0     A7 FA 61 FC | 	wrlong	result1, fp
1b1c4     04 4E 05 F1 | 	add	fp, #4
1b1c8     A7 FC 61 FC | 	wrlong	result2, fp
1b1cc     04 4E 05 F1 | 	add	fp, #4
1b1d0     A7 26 62 FC | 	wrlong	local01, fp
1b1d4     08 4E 85 F1 | 	sub	fp, #8
1b1d8     A7 12 02 F6 | 	mov	arg01, fp
1b1dc     3C 25 BF FD | 	call	#_converttoint
1b1e0     FD 2A 52 F6 | 	abs	local03, result1 wc
1b1e4     07 2A 06 F5 | 	and	local03, #7
1b1e8     15 29 82 F6 | 	negc	local02, local03
1b1ec     37 00 00 FF 
1b1f0     30 E4 05 F1 | 	add	objptr, ##28208
1b1f4     F2 12 02 FB | 	rdlong	arg01, objptr
1b1f8     37 00 00 FF 
1b1fc     30 E4 85 F1 | 	sub	objptr, ##28208
1b200     06 28 66 F0 | 	shl	local02, #6
1b204     14 13 02 F1 | 	add	arg01, local02
1b208     14 12 06 F1 | 	add	arg01, #20
1b20c     09 01 58 FC | 	wrword	#0, arg01
1b210                 | LR__2223
1b210     A7 F0 03 F6 | 	mov	ptra, fp
1b214     B2 00 A0 FD | 	call	#popregs_
1b218                 | _do_shutup_ret
1b218     2D 00 64 FD | 	ret
1b21c                 | 
1b21c                 | ' 
1b21c                 | ' ' ------------------ sin
1b21c                 | ' 
1b21c                 | ' sub do_sin
1b21c                 | _do_sin
1b21c     01 4A 05 F6 | 	mov	COUNT_, #1
1b220     A8 00 A0 FD | 	call	#pushregs_
1b224     10 F0 07 F1 | 	add	ptra, #16
1b228     4A 00 00 FF 
1b22c     A0 E4 05 F1 | 	add	objptr, ##38048
1b230     F2 16 02 FB | 	rdlong	arg03, objptr
1b234     0B 15 02 F6 | 	mov	arg02, arg03
1b238     01 14 66 F0 | 	shl	arg02, #1
1b23c     0B 15 02 F1 | 	add	arg02, arg03
1b240     02 14 66 F0 | 	shl	arg02, #2
1b244     03 00 00 FF 
1b248     04 E4 85 F1 | 	sub	objptr, ##1540
1b24c     F2 14 02 F1 | 	add	arg02, objptr
1b250     0A 17 02 FB | 	rdlong	arg03, arg02
1b254                 | ' 
1b254                 | ' numpar=compiledline(lineptr_e).result.uresult
1b254                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1b254     02 16 16 F2 | 	cmp	arg03, #2 wc
1b258     47 00 00 FF 
1b25c     9C E4 85 F1 | 	sub	objptr, ##36508
1b260     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
1b264     40 00 90 4D |  if_c_and_nz	jmp	#LR__2230
1b268     00 12 06 F6 | 	mov	arg01, #0
1b26c     24 E9 B0 FD | 	call	#__system___getiolock_0622
1b270     FD 12 02 F6 | 	mov	arg01, result1
1b274     30 9E B0 FD | 	call	#__system___lockmem
1b278     93 01 00 FF 
1b27c     B2 15 06 F6 | 	mov	arg02, ##@LR__5690
1b280     00 12 06 F6 | 	mov	arg01, #0
1b284     00 16 06 F6 | 	mov	arg03, #0
1b288     3C A6 B0 FD | 	call	#__system___basic_print_string
1b28c     00 12 06 F6 | 	mov	arg01, #0
1b290     00 E9 B0 FD | 	call	#__system___getiolock_0622
1b294     FD 00 68 FC | 	wrlong	#0, result1
1b298     27 12 06 F6 | 	mov	arg01, #39
1b29c     00 14 06 F6 | 	mov	arg02, #0
1b2a0     7C 49 B0 FD | 	call	#_printerror
1b2a4     64 00 90 FD | 	jmp	#LR__2231
1b2a8                 | LR__2230
1b2a8     94 22 BF FD | 	call	#_pop
1b2ac     A7 FA 61 FC | 	wrlong	result1, fp
1b2b0     04 4E 05 F1 | 	add	fp, #4
1b2b4     A7 FC 61 FC | 	wrlong	result2, fp
1b2b8     04 4E 05 F1 | 	add	fp, #4
1b2bc     A7 FE 61 FC | 	wrlong	result3, fp
1b2c0     08 4E 85 F1 | 	sub	fp, #8
1b2c4     52 00 00 FF 
1b2c8     00 E5 05 F1 | 	add	objptr, ##42240
1b2cc     F2 26 02 FB | 	rdlong	local01, objptr
1b2d0     52 00 00 FF 
1b2d4     00 E5 85 F1 | 	sub	objptr, ##42240
1b2d8     A7 12 02 F6 | 	mov	arg01, fp
1b2dc     F8 24 BF FD | 	call	#_converttofloat
1b2e0     FD 14 02 F6 | 	mov	arg02, result1
1b2e4     13 13 02 F6 | 	mov	arg01, local01
1b2e8     88 BC B0 FD | 	call	#__system___float_mul
1b2ec     FD 12 02 F6 | 	mov	arg01, result1
1b2f0     98 C5 B0 FD | 	call	#__system____builtin_sinf
1b2f4     A7 FA 61 FC | 	wrlong	result1, fp
1b2f8     08 4E 05 F1 | 	add	fp, #8
1b2fc     A7 3C 68 FC | 	wrlong	#30, fp
1b300     08 4E 85 F1 | 	sub	fp, #8
1b304     A7 12 02 F6 | 	mov	arg01, fp
1b308     C4 22 BF FD | 	call	#_push
1b30c                 | LR__2231
1b30c     A7 F0 03 F6 | 	mov	ptra, fp
1b310     B2 00 A0 FD | 	call	#popregs_
1b314                 | _do_sin_ret
1b314     2D 00 64 FD | 	ret
1b318                 | 
1b318                 | ' 
1b318                 | ' ' ------------------ skip
1b318                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1b318                 | ' 
1b318                 | ' sub do_skip
1b318                 | _do_skip
1b318     4A 00 00 FF 
1b31c     A0 E4 05 F1 | 	add	objptr, ##38048
1b320     F2 00 02 FB | 	rdlong	_var01, objptr
1b324     00 03 02 F6 | 	mov	_var02, _var01
1b328     01 02 66 F0 | 	shl	_var02, #1
1b32c     00 03 02 F1 | 	add	_var02, _var01
1b330     02 02 66 F0 | 	shl	_var02, #2
1b334     03 00 00 FF 
1b338     04 E4 85 F1 | 	sub	objptr, ##1540
1b33c     F2 02 02 F1 | 	add	_var02, objptr
1b340     01 03 02 FB | 	rdlong	_var02, _var02
1b344     01 02 86 F1 | 	sub	_var02, #1
1b348     03 00 00 FF 
1b34c     04 E4 05 F1 | 	add	objptr, ##1540
1b350     F2 02 62 FC | 	wrlong	_var02, objptr
1b354     4A 00 00 FF 
1b358     A0 E4 85 F1 | 	sub	objptr, ##38048
1b35c                 | _do_skip_ret
1b35c     2D 00 64 FD | 	ret
1b360                 | 
1b360                 | ' 
1b360                 | ' ' ------------------ sprite
1b360                 | ' 
1b360                 | ' sub do_sprite
1b360                 | _do_sprite
1b360     02 4A 05 F6 | 	mov	COUNT_, #2
1b364     A8 00 A0 FD | 	call	#pushregs_
1b368     30 F0 07 F1 | 	add	ptra, #48
1b36c     D0 21 BF FD | 	call	#_pop
1b370     FD 14 02 F6 | 	mov	arg02, result1
1b374     FE 16 02 F6 | 	mov	arg03, result2
1b378     FF 12 02 F6 | 	mov	arg01, result3
1b37c     18 4E 05 F1 | 	add	fp, #24
1b380     A7 14 62 FC | 	wrlong	arg02, fp
1b384     04 4E 05 F1 | 	add	fp, #4
1b388     A7 16 62 FC | 	wrlong	arg03, fp
1b38c     04 4E 05 F1 | 	add	fp, #4
1b390     A7 12 62 FC | 	wrlong	arg01, fp
1b394     20 4E 85 F1 | 	sub	fp, #32
1b398     A4 21 BF FD | 	call	#_pop
1b39c     FD 14 02 F6 | 	mov	arg02, result1
1b3a0     FE 16 02 F6 | 	mov	arg03, result2
1b3a4     FF 12 02 F6 | 	mov	arg01, result3
1b3a8     0C 4E 05 F1 | 	add	fp, #12
1b3ac     A7 14 62 FC | 	wrlong	arg02, fp
1b3b0     04 4E 05 F1 | 	add	fp, #4
1b3b4     A7 16 62 FC | 	wrlong	arg03, fp
1b3b8     04 4E 05 F1 | 	add	fp, #4
1b3bc     A7 12 62 FC | 	wrlong	arg01, fp
1b3c0     14 4E 85 F1 | 	sub	fp, #20
1b3c4     78 21 BF FD | 	call	#_pop
1b3c8     FF 14 02 F6 | 	mov	arg02, result3
1b3cc     A7 FA 61 FC | 	wrlong	result1, fp
1b3d0     04 4E 05 F1 | 	add	fp, #4
1b3d4     A7 FC 61 FC | 	wrlong	result2, fp
1b3d8     04 4E 05 F1 | 	add	fp, #4
1b3dc     A7 14 62 FC | 	wrlong	arg02, fp
1b3e0     08 4E 85 F1 | 	sub	fp, #8
1b3e4     A7 12 02 F6 | 	mov	arg01, fp
1b3e8     30 23 BF FD | 	call	#_converttoint
1b3ec     FD 26 02 F6 | 	mov	local01, result1
1b3f0     A7 12 02 F6 | 	mov	arg01, fp
1b3f4     0C 12 06 F1 | 	add	arg01, #12
1b3f8     20 23 BF FD | 	call	#_converttoint
1b3fc     FD 28 02 F6 | 	mov	local02, result1
1b400     A7 12 02 F6 | 	mov	arg01, fp
1b404     18 12 06 F1 | 	add	arg01, #24
1b408     10 23 BF FD | 	call	#_converttoint
1b40c     FD 16 02 F6 | 	mov	arg03, result1
1b410     13 13 02 F6 | 	mov	arg01, local01
1b414     14 15 02 F6 | 	mov	arg02, local02
1b418     D0 7D B0 FD | 	call	#_hg010b_spin2_setspritepos
1b41c     A7 F0 03 F6 | 	mov	ptra, fp
1b420     B2 00 A0 FD | 	call	#popregs_
1b424                 | _do_sprite_ret
1b424     2D 00 64 FD | 	ret
1b428                 | 
1b428                 | ' 
1b428                 | ' ' ------------------ sqr
1b428                 | ' 
1b428                 | ' sub do_sqr
1b428                 | _do_sqr
1b428     00 4A 05 F6 | 	mov	COUNT_, #0
1b42c     A8 00 A0 FD | 	call	#pushregs_
1b430     10 F0 07 F1 | 	add	ptra, #16
1b434     4A 00 00 FF 
1b438     A0 E4 05 F1 | 	add	objptr, ##38048
1b43c     F2 16 02 FB | 	rdlong	arg03, objptr
1b440     0B 15 02 F6 | 	mov	arg02, arg03
1b444     01 14 66 F0 | 	shl	arg02, #1
1b448     0B 15 02 F1 | 	add	arg02, arg03
1b44c     02 14 66 F0 | 	shl	arg02, #2
1b450     03 00 00 FF 
1b454     04 E4 85 F1 | 	sub	objptr, ##1540
1b458     F2 14 02 F1 | 	add	arg02, objptr
1b45c     0A 17 02 FB | 	rdlong	arg03, arg02
1b460                 | ' 
1b460                 | ' numpar=compiledline(lineptr_e).result.uresult
1b460                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1b460     02 16 16 F2 | 	cmp	arg03, #2 wc
1b464     47 00 00 FF 
1b468     9C E4 85 F1 | 	sub	objptr, ##36508
1b46c     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
1b470     40 00 90 4D |  if_c_and_nz	jmp	#LR__2240
1b474     00 12 06 F6 | 	mov	arg01, #0
1b478     18 E7 B0 FD | 	call	#__system___getiolock_0622
1b47c     FD 12 02 F6 | 	mov	arg01, result1
1b480     24 9C B0 FD | 	call	#__system___lockmem
1b484     93 01 00 FF 
1b488     B8 15 06 F6 | 	mov	arg02, ##@LR__5691
1b48c     00 12 06 F6 | 	mov	arg01, #0
1b490     00 16 06 F6 | 	mov	arg03, #0
1b494     30 A4 B0 FD | 	call	#__system___basic_print_string
1b498     00 12 06 F6 | 	mov	arg01, #0
1b49c     F4 E6 B0 FD | 	call	#__system___getiolock_0622
1b4a0     FD 00 68 FC | 	wrlong	#0, result1
1b4a4     27 12 06 F6 | 	mov	arg01, #39
1b4a8     00 14 06 F6 | 	mov	arg02, #0
1b4ac     70 47 B0 FD | 	call	#_printerror
1b4b0     48 00 90 FD | 	jmp	#LR__2241
1b4b4                 | LR__2240
1b4b4     88 20 BF FD | 	call	#_pop
1b4b8     FF 16 02 F6 | 	mov	arg03, result3
1b4bc     A7 FA 61 FC | 	wrlong	result1, fp
1b4c0     04 4E 05 F1 | 	add	fp, #4
1b4c4     A7 FC 61 FC | 	wrlong	result2, fp
1b4c8     04 4E 05 F1 | 	add	fp, #4
1b4cc     A7 16 62 FC | 	wrlong	arg03, fp
1b4d0     08 4E 85 F1 | 	sub	fp, #8
1b4d4     A7 12 02 F6 | 	mov	arg01, fp
1b4d8     FC 22 BF FD | 	call	#_converttofloat
1b4dc     FD 12 02 F6 | 	mov	arg01, result1
1b4e0     B8 B9 B0 FD | 	call	#__system___float_sqrt
1b4e4     A7 FA 61 FC | 	wrlong	result1, fp
1b4e8     08 4E 05 F1 | 	add	fp, #8
1b4ec     A7 3C 68 FC | 	wrlong	#30, fp
1b4f0     08 4E 85 F1 | 	sub	fp, #8
1b4f4     A7 12 02 F6 | 	mov	arg01, fp
1b4f8     D4 20 BF FD | 	call	#_push
1b4fc                 | LR__2241
1b4fc     A7 F0 03 F6 | 	mov	ptra, fp
1b500     B2 00 A0 FD | 	call	#popregs_
1b504                 | _do_sqr_ret
1b504     2D 00 64 FD | 	ret
1b508                 | 
1b508                 | ' 
1b508                 | ' ' ------------------ stick
1b508                 | ' 
1b508                 | ' sub do_stick
1b508                 | _do_stick
1b508     02 4A 05 F6 | 	mov	COUNT_, #2
1b50c     A8 00 A0 FD | 	call	#pushregs_
1b510     10 F0 07 F1 | 	add	ptra, #16
1b514     4A 00 00 FF 
1b518     A0 E4 05 F1 | 	add	objptr, ##38048
1b51c     F2 26 02 FB | 	rdlong	local01, objptr
1b520     13 17 02 F6 | 	mov	arg03, local01
1b524     01 16 66 F0 | 	shl	arg03, #1
1b528     13 17 02 F1 | 	add	arg03, local01
1b52c     02 16 66 F0 | 	shl	arg03, #2
1b530     03 00 00 FF 
1b534     04 E4 85 F1 | 	sub	objptr, ##1540
1b538     F2 16 02 F1 | 	add	arg03, objptr
1b53c     0B 29 02 FB | 	rdlong	local02, arg03
1b540                 | ' 
1b540                 | ' numpar=compiledline(lineptr_e).result.uresult
1b540                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1b540     02 28 16 F2 | 	cmp	local02, #2 wc
1b544     47 00 00 FF 
1b548     9C E4 85 F1 | 	sub	objptr, ##36508
1b54c     40 00 90 CD |  if_b	jmp	#LR__2250
1b550     00 12 06 F6 | 	mov	arg01, #0
1b554     3C E6 B0 FD | 	call	#__system___getiolock_0622
1b558     FD 12 02 F6 | 	mov	arg01, result1
1b55c     48 9B B0 FD | 	call	#__system___lockmem
1b560     93 01 00 FF 
1b564     BE 15 06 F6 | 	mov	arg02, ##@LR__5692
1b568     00 12 06 F6 | 	mov	arg01, #0
1b56c     00 16 06 F6 | 	mov	arg03, #0
1b570     54 A3 B0 FD | 	call	#__system___basic_print_string
1b574     00 12 06 F6 | 	mov	arg01, #0
1b578     18 E6 B0 FD | 	call	#__system___getiolock_0622
1b57c     FD 00 68 FC | 	wrlong	#0, result1
1b580     27 12 06 F6 | 	mov	arg01, #39
1b584     00 14 06 F6 | 	mov	arg02, #0
1b588     94 46 B0 FD | 	call	#_printerror
1b58c     E8 00 90 FD | 	jmp	#LR__2254
1b590                 | LR__2250
1b590                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1b590     00 28 0E F2 | 	cmp	local02, #0 wz
1b594     30 00 90 5D |  if_ne	jmp	#LR__2251
1b598     52 00 00 FF 
1b59c     74 E4 05 F1 | 	add	objptr, ##42100
1b5a0     F2 28 02 FB | 	rdlong	local02, objptr
1b5a4     52 00 00 FF 
1b5a8     74 E4 85 F1 | 	sub	objptr, ##42100
1b5ac     A7 28 62 FC | 	wrlong	local02, fp
1b5b0     08 4E 05 F1 | 	add	fp, #8
1b5b4     A7 3A 68 FC | 	wrlong	#29, fp
1b5b8     08 4E 85 F1 | 	sub	fp, #8
1b5bc     A7 12 02 F6 | 	mov	arg01, fp
1b5c0     0C 20 BF FD | 	call	#_push
1b5c4     B0 00 90 FD | 	jmp	#LR__2254
1b5c8                 | LR__2251
1b5c8     74 1F BF FD | 	call	#_pop
1b5cc     A7 FA 61 FC | 	wrlong	result1, fp
1b5d0     04 4E 05 F1 | 	add	fp, #4
1b5d4     A7 FC 61 FC | 	wrlong	result2, fp
1b5d8     04 4E 05 F1 | 	add	fp, #4
1b5dc     A7 FE 61 FC | 	wrlong	result3, fp
1b5e0                 | ' t1=pop()
1b5e0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b5e0     08 4E 85 F1 | 	sub	fp, #8
1b5e4     1C FE 0D F2 | 	cmp	result3, #28 wz
1b5e8     08 4E 05 51 |  if_ne	add	fp, #8
1b5ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b5f0     08 4E 85 51 |  if_ne	sub	fp, #8
1b5f4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b5f8     70 00 90 5D |  if_ne	jmp	#LR__2253
1b5fc     A7 26 02 FB | 	rdlong	local01, fp
1b600     52 00 00 FF 
1b604     60 E5 05 F1 | 	add	objptr, ##42336
1b608     F2 26 62 FC | 	wrlong	local01, objptr
1b60c                 | '   q=t1.result.uresult
1b60c                 | '   if q<7 then 
1b60c     52 00 00 FF 
1b610     60 E5 85 F1 | 	sub	objptr, ##42336
1b614     07 26 56 F2 | 	cmps	local01, #7 wc
1b618     40 00 90 3D |  if_ae	jmp	#LR__2252
1b61c     52 00 00 FF 
1b620     60 E5 05 F1 | 	add	objptr, ##42336
1b624     F2 26 02 FB | 	rdlong	local01, objptr
1b628     02 26 66 F0 | 	shl	local01, #2
1b62c     EC E4 85 F1 | 	sub	objptr, #236
1b630     F2 26 02 F1 | 	add	local01, objptr
1b634     13 29 02 FB | 	rdlong	local02, local01
1b638     A7 28 62 FC | 	wrlong	local02, fp
1b63c     08 4E 05 F1 | 	add	fp, #8
1b640     A7 3A 68 FC | 	wrlong	#29, fp
1b644     08 4E 85 F1 | 	sub	fp, #8
1b648     A7 12 02 F6 | 	mov	arg01, fp
1b64c     52 00 00 FF 
1b650     74 E4 85 F1 | 	sub	objptr, ##42100
1b654     78 1F BF FD | 	call	#_push
1b658                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1b658     1C 00 90 FD | 	jmp	#LR__2254
1b65c                 | LR__2252
1b65c     29 12 06 F6 | 	mov	arg01, #41
1b660     00 14 06 F6 | 	mov	arg02, #0
1b664     B8 45 B0 FD | 	call	#_printerror
1b668                 | '      printerror(41) : return
1b668     0C 00 90 FD | 	jmp	#LR__2254
1b66c                 | LR__2253
1b66c     29 12 06 F6 | 	mov	arg01, #41
1b670     00 14 06 F6 | 	mov	arg02, #0
1b674     A8 45 B0 FD | 	call	#_printerror
1b678                 | LR__2254
1b678     A7 F0 03 F6 | 	mov	ptra, fp
1b67c     B2 00 A0 FD | 	call	#popregs_
1b680                 | _do_stick_ret
1b680     2D 00 64 FD | 	ret
1b684                 | 
1b684                 | ' 
1b684                 | ' 
1b684                 | ' sub do_str
1b684                 | _do_str
1b684     02 4A 05 F6 | 	mov	COUNT_, #2
1b688     A8 00 A0 FD | 	call	#pushregs_
1b68c     14 F0 07 F1 | 	add	ptra, #20
1b690     4A 00 00 FF 
1b694     A0 E4 05 F1 | 	add	objptr, ##38048
1b698     F2 16 02 FB | 	rdlong	arg03, objptr
1b69c     0B 15 02 F6 | 	mov	arg02, arg03
1b6a0     01 14 66 F0 | 	shl	arg02, #1
1b6a4     0B 15 02 F1 | 	add	arg02, arg03
1b6a8     02 14 66 F0 | 	shl	arg02, #2
1b6ac     03 00 00 FF 
1b6b0     04 E4 85 F1 | 	sub	objptr, ##1540
1b6b4     F2 14 02 F1 | 	add	arg02, objptr
1b6b8     0A 17 02 FB | 	rdlong	arg03, arg02
1b6bc                 | ' 
1b6bc                 | ' numpar=compiledline(lineptr_e).result.uresult
1b6bc                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1b6bc     01 16 0E F2 | 	cmp	arg03, #1 wz
1b6c0     47 00 00 FF 
1b6c4     9C E4 85 F1 | 	sub	objptr, ##36508
1b6c8     40 00 90 AD |  if_e	jmp	#LR__2260
1b6cc     00 12 06 F6 | 	mov	arg01, #0
1b6d0     C0 E4 B0 FD | 	call	#__system___getiolock_0622
1b6d4     FD 12 02 F6 | 	mov	arg01, result1
1b6d8     CC 99 B0 FD | 	call	#__system___lockmem
1b6dc     93 01 00 FF 
1b6e0     C6 15 06 F6 | 	mov	arg02, ##@LR__5693
1b6e4     00 12 06 F6 | 	mov	arg01, #0
1b6e8     00 16 06 F6 | 	mov	arg03, #0
1b6ec     D8 A1 B0 FD | 	call	#__system___basic_print_string
1b6f0     00 12 06 F6 | 	mov	arg01, #0
1b6f4     9C E4 B0 FD | 	call	#__system___getiolock_0622
1b6f8     FD 00 68 FC | 	wrlong	#0, result1
1b6fc     27 12 06 F6 | 	mov	arg01, #39
1b700     00 14 06 F6 | 	mov	arg02, #0
1b704     18 45 B0 FD | 	call	#_printerror
1b708     F0 00 90 FD | 	jmp	#LR__2269
1b70c                 | LR__2260
1b70c     30 1E BF FD | 	call	#_pop
1b710     FF 16 02 F6 | 	mov	arg03, result3
1b714     A7 FA 61 FC | 	wrlong	result1, fp
1b718     04 4E 05 F1 | 	add	fp, #4
1b71c     A7 FC 61 FC | 	wrlong	result2, fp
1b720     04 4E 05 F1 | 	add	fp, #4
1b724     A7 16 62 FC | 	wrlong	arg03, fp
1b728                 | ' 
1b728                 | ' t1=pop()
1b728                 | ' if t1.result_type=result_int then 
1b728     08 4E 85 F1 | 	sub	fp, #8
1b72c     1C 16 0E F2 | 	cmp	arg03, #28 wz
1b730     28 00 90 5D |  if_ne	jmp	#LR__2261
1b734     A7 12 02 FB | 	rdlong	arg01, fp
1b738     09 13 52 F6 | 	abs	arg01, arg01 wc
1b73c     1F 26 C6 C9 |  if_b	decod	local01, #31
1b740     00 26 06 36 |  if_ae	mov	local01, #0
1b744     2C B4 B0 FD | 	call	#__system___float_fromuns
1b748     13 FB 61 F5 | 	xor	result1, local01
1b74c     FD 12 02 F6 | 	mov	arg01, result1
1b750     0C AF B0 FD | 	call	#__system__str_S
1b754     FD 28 02 F6 | 	mov	local02, result1
1b758     88 00 90 FD | 	jmp	#LR__2268
1b75c                 | LR__2261
1b75c     08 4E 05 F1 | 	add	fp, #8
1b760     A7 16 02 FB | 	rdlong	arg03, fp
1b764     08 4E 85 F1 | 	sub	fp, #8
1b768     1D 16 0E F2 | 	cmp	arg03, #29 wz
1b76c     18 00 90 5D |  if_ne	jmp	#LR__2262
1b770     A7 12 02 FB | 	rdlong	arg01, fp
1b774     FC B3 B0 FD | 	call	#__system___float_fromuns
1b778     FD 12 02 F6 | 	mov	arg01, result1
1b77c     E0 AE B0 FD | 	call	#__system__str_S
1b780     FD 28 02 F6 | 	mov	local02, result1
1b784     5C 00 90 FD | 	jmp	#LR__2267
1b788                 | LR__2262
1b788     08 4E 05 F1 | 	add	fp, #8
1b78c     A7 16 02 FB | 	rdlong	arg03, fp
1b790     08 4E 85 F1 | 	sub	fp, #8
1b794     1E 16 0E F2 | 	cmp	arg03, #30 wz
1b798     10 00 90 5D |  if_ne	jmp	#LR__2263
1b79c     A7 12 02 FB | 	rdlong	arg01, fp
1b7a0     BC AE B0 FD | 	call	#__system__str_S
1b7a4     FD 28 02 F6 | 	mov	local02, result1
1b7a8     38 00 90 FD | 	jmp	#LR__2266
1b7ac                 | LR__2263
1b7ac     08 4E 05 F1 | 	add	fp, #8
1b7b0     A7 16 02 FB | 	rdlong	arg03, fp
1b7b4     08 4E 85 F1 | 	sub	fp, #8
1b7b8     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b7bc     10 00 90 5D |  if_ne	jmp	#LR__2264
1b7c0     A7 12 02 FB | 	rdlong	arg01, fp
1b7c4     E8 1E BF FD | 	call	#_convertstring
1b7c8     FD 28 02 F6 | 	mov	local02, result1
1b7cc     14 00 90 FD | 	jmp	#LR__2265
1b7d0                 | LR__2264
1b7d0     08 4E 05 F1 | 	add	fp, #8
1b7d4     A7 FC 01 FB | 	rdlong	result2, fp
1b7d8     08 4E 85 F1 | 	sub	fp, #8
1b7dc     1F FC 0D F2 | 	cmp	result2, #31 wz
1b7e0     A7 28 02 AB |  if_e	rdlong	local02, fp
1b7e4                 | LR__2265
1b7e4                 | LR__2266
1b7e4                 | LR__2267
1b7e4                 | LR__2268
1b7e4     A7 28 62 FC | 	wrlong	local02, fp
1b7e8     08 4E 05 F1 | 	add	fp, #8
1b7ec     A7 3E 68 FC | 	wrlong	#31, fp
1b7f0     08 4E 85 F1 | 	sub	fp, #8
1b7f4     A7 12 02 F6 | 	mov	arg01, fp
1b7f8     D4 1D BF FD | 	call	#_push
1b7fc                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1b7fc                 | LR__2269
1b7fc     A7 F0 03 F6 | 	mov	ptra, fp
1b800     B2 00 A0 FD | 	call	#popregs_
1b804                 | _do_str_ret
1b804     2D 00 64 FD | 	ret
1b808                 | 
1b808                 | ' ' ------------------ strig
1b808                 | ' 
1b808                 | ' sub do_strig
1b808                 | _do_strig
1b808     02 4A 05 F6 | 	mov	COUNT_, #2
1b80c     A8 00 A0 FD | 	call	#pushregs_
1b810     10 F0 07 F1 | 	add	ptra, #16
1b814     4A 00 00 FF 
1b818     A0 E4 05 F1 | 	add	objptr, ##38048
1b81c     F2 26 02 FB | 	rdlong	local01, objptr
1b820     13 17 02 F6 | 	mov	arg03, local01
1b824     01 16 66 F0 | 	shl	arg03, #1
1b828     13 17 02 F1 | 	add	arg03, local01
1b82c     02 16 66 F0 | 	shl	arg03, #2
1b830     03 00 00 FF 
1b834     04 E4 85 F1 | 	sub	objptr, ##1540
1b838     F2 16 02 F1 | 	add	arg03, objptr
1b83c     0B 29 02 FB | 	rdlong	local02, arg03
1b840                 | ' 
1b840                 | ' numpar=compiledline(lineptr_e).result.uresult
1b840                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b840     02 28 16 F2 | 	cmp	local02, #2 wc
1b844     47 00 00 FF 
1b848     9C E4 85 F1 | 	sub	objptr, ##36508
1b84c     40 00 90 CD |  if_b	jmp	#LR__2270
1b850     00 12 06 F6 | 	mov	arg01, #0
1b854     3C E3 B0 FD | 	call	#__system___getiolock_0622
1b858     FD 12 02 F6 | 	mov	arg01, result1
1b85c     48 98 B0 FD | 	call	#__system___lockmem
1b860     93 01 00 FF 
1b864     CD 15 06 F6 | 	mov	arg02, ##@LR__5694
1b868     00 12 06 F6 | 	mov	arg01, #0
1b86c     00 16 06 F6 | 	mov	arg03, #0
1b870     54 A0 B0 FD | 	call	#__system___basic_print_string
1b874     00 12 06 F6 | 	mov	arg01, #0
1b878     18 E3 B0 FD | 	call	#__system___getiolock_0622
1b87c     FD 00 68 FC | 	wrlong	#0, result1
1b880     27 12 06 F6 | 	mov	arg01, #39
1b884     00 14 06 F6 | 	mov	arg02, #0
1b888     94 43 B0 FD | 	call	#_printerror
1b88c     E8 00 90 FD | 	jmp	#LR__2274
1b890                 | LR__2270
1b890                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b890     00 28 0E F2 | 	cmp	local02, #0 wz
1b894     30 00 90 5D |  if_ne	jmp	#LR__2271
1b898     52 00 00 FF 
1b89c     90 E4 05 F1 | 	add	objptr, ##42128
1b8a0     F2 28 02 FB | 	rdlong	local02, objptr
1b8a4     52 00 00 FF 
1b8a8     90 E4 85 F1 | 	sub	objptr, ##42128
1b8ac     A7 28 62 FC | 	wrlong	local02, fp
1b8b0     08 4E 05 F1 | 	add	fp, #8
1b8b4     A7 3A 68 FC | 	wrlong	#29, fp
1b8b8     08 4E 85 F1 | 	sub	fp, #8
1b8bc     A7 12 02 F6 | 	mov	arg01, fp
1b8c0     0C 1D BF FD | 	call	#_push
1b8c4     B0 00 90 FD | 	jmp	#LR__2274
1b8c8                 | LR__2271
1b8c8     74 1C BF FD | 	call	#_pop
1b8cc     A7 FA 61 FC | 	wrlong	result1, fp
1b8d0     04 4E 05 F1 | 	add	fp, #4
1b8d4     A7 FC 61 FC | 	wrlong	result2, fp
1b8d8     04 4E 05 F1 | 	add	fp, #4
1b8dc     A7 FE 61 FC | 	wrlong	result3, fp
1b8e0                 | ' t1=pop()
1b8e0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b8e0     08 4E 85 F1 | 	sub	fp, #8
1b8e4     1C FE 0D F2 | 	cmp	result3, #28 wz
1b8e8     08 4E 05 51 |  if_ne	add	fp, #8
1b8ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b8f0     08 4E 85 51 |  if_ne	sub	fp, #8
1b8f4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b8f8     70 00 90 5D |  if_ne	jmp	#LR__2273
1b8fc     A7 26 02 FB | 	rdlong	local01, fp
1b900     52 00 00 FF 
1b904     60 E5 05 F1 | 	add	objptr, ##42336
1b908     F2 26 62 FC | 	wrlong	local01, objptr
1b90c                 | '   q=t1.result.uresult
1b90c                 | '   if q<7 then 
1b90c     52 00 00 FF 
1b910     60 E5 85 F1 | 	sub	objptr, ##42336
1b914     07 26 56 F2 | 	cmps	local01, #7 wc
1b918     40 00 90 3D |  if_ae	jmp	#LR__2272
1b91c     52 00 00 FF 
1b920     60 E5 05 F1 | 	add	objptr, ##42336
1b924     F2 26 02 FB | 	rdlong	local01, objptr
1b928     02 26 66 F0 | 	shl	local01, #2
1b92c     D0 E4 85 F1 | 	sub	objptr, #208
1b930     F2 26 02 F1 | 	add	local01, objptr
1b934     13 29 02 FB | 	rdlong	local02, local01
1b938     A7 28 62 FC | 	wrlong	local02, fp
1b93c     08 4E 05 F1 | 	add	fp, #8
1b940     A7 3A 68 FC | 	wrlong	#29, fp
1b944     08 4E 85 F1 | 	sub	fp, #8
1b948     A7 12 02 F6 | 	mov	arg01, fp
1b94c     52 00 00 FF 
1b950     90 E4 85 F1 | 	sub	objptr, ##42128
1b954     78 1C BF FD | 	call	#_push
1b958                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b958     1C 00 90 FD | 	jmp	#LR__2274
1b95c                 | LR__2272
1b95c     29 12 06 F6 | 	mov	arg01, #41
1b960     00 14 06 F6 | 	mov	arg02, #0
1b964     B8 42 B0 FD | 	call	#_printerror
1b968                 | '      printerror(41) : return
1b968     0C 00 90 FD | 	jmp	#LR__2274
1b96c                 | LR__2273
1b96c     29 12 06 F6 | 	mov	arg01, #41
1b970     00 14 06 F6 | 	mov	arg02, #0
1b974     A8 42 B0 FD | 	call	#_printerror
1b978                 | LR__2274
1b978     A7 F0 03 F6 | 	mov	ptra, fp
1b97c     B2 00 A0 FD | 	call	#popregs_
1b980                 | _do_strig_ret
1b980     2D 00 64 FD | 	ret
1b984                 | 
1b984                 | ' 
1b984                 | ' ' ------------------ tan
1b984                 | ' 
1b984                 | ' sub do_tan
1b984                 | _do_tan
1b984     02 4A 05 F6 | 	mov	COUNT_, #2
1b988     A8 00 A0 FD | 	call	#pushregs_
1b98c     10 F0 07 F1 | 	add	ptra, #16
1b990     4A 00 00 FF 
1b994     A0 E4 05 F1 | 	add	objptr, ##38048
1b998     F2 16 02 FB | 	rdlong	arg03, objptr
1b99c     0B 15 02 F6 | 	mov	arg02, arg03
1b9a0     01 14 66 F0 | 	shl	arg02, #1
1b9a4     0B 15 02 F1 | 	add	arg02, arg03
1b9a8     02 14 66 F0 | 	shl	arg02, #2
1b9ac     03 00 00 FF 
1b9b0     04 E4 85 F1 | 	sub	objptr, ##1540
1b9b4     F2 14 02 F1 | 	add	arg02, objptr
1b9b8     0A 17 02 FB | 	rdlong	arg03, arg02
1b9bc                 | ' 
1b9bc                 | ' numpar=compiledline(lineptr_e).result.uresult
1b9bc                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b9bc     02 16 16 F2 | 	cmp	arg03, #2 wc
1b9c0     47 00 00 FF 
1b9c4     9C E4 85 F1 | 	sub	objptr, ##36508
1b9c8     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
1b9cc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2280
1b9d0     00 12 06 F6 | 	mov	arg01, #0
1b9d4     BC E1 B0 FD | 	call	#__system___getiolock_0622
1b9d8     FD 12 02 F6 | 	mov	arg01, result1
1b9dc     C8 96 B0 FD | 	call	#__system___lockmem
1b9e0     93 01 00 FF 
1b9e4     D5 15 06 F6 | 	mov	arg02, ##@LR__5695
1b9e8     00 12 06 F6 | 	mov	arg01, #0
1b9ec     00 16 06 F6 | 	mov	arg03, #0
1b9f0     D4 9E B0 FD | 	call	#__system___basic_print_string
1b9f4     00 12 06 F6 | 	mov	arg01, #0
1b9f8     98 E1 B0 FD | 	call	#__system___getiolock_0622
1b9fc     FD 00 68 FC | 	wrlong	#0, result1
1ba00     27 12 06 F6 | 	mov	arg01, #39
1ba04     00 14 06 F6 | 	mov	arg02, #0
1ba08     14 42 B0 FD | 	call	#_printerror
1ba0c     94 00 90 FD | 	jmp	#LR__2281
1ba10                 | LR__2280
1ba10     2C 1B BF FD | 	call	#_pop
1ba14     A7 FA 61 FC | 	wrlong	result1, fp
1ba18     04 4E 05 F1 | 	add	fp, #4
1ba1c     A7 FC 61 FC | 	wrlong	result2, fp
1ba20     04 4E 05 F1 | 	add	fp, #4
1ba24     A7 FE 61 FC | 	wrlong	result3, fp
1ba28     08 4E 85 F1 | 	sub	fp, #8
1ba2c     52 00 00 FF 
1ba30     00 E5 05 F1 | 	add	objptr, ##42240
1ba34     F2 26 02 FB | 	rdlong	local01, objptr
1ba38     52 00 00 FF 
1ba3c     00 E5 85 F1 | 	sub	objptr, ##42240
1ba40     A7 12 02 F6 | 	mov	arg01, fp
1ba44     90 1D BF FD | 	call	#_converttofloat
1ba48     FD 14 02 F6 | 	mov	arg02, result1
1ba4c     13 13 02 F6 | 	mov	arg01, local01
1ba50     20 B5 B0 FD | 	call	#__system___float_mul
1ba54     FD 12 02 F6 | 	mov	arg01, result1
1ba58     09 27 02 F6 | 	mov	local01, arg01
1ba5c     2C BE B0 FD | 	call	#__system____builtin_sinf
1ba60     FD 28 02 F6 | 	mov	local02, result1
1ba64     13 15 02 F6 | 	mov	arg02, local01
1ba68     87 E4 1F FF 
1ba6c     DB 13 06 F6 | 	mov	arg01, ##1070141403
1ba70     1F 14 E6 F4 | 	bitnot	arg02, #31
1ba74     40 B1 B0 FD | 	call	#__system___float_add
1ba78     FD 12 02 F6 | 	mov	arg01, result1
1ba7c     0C BE B0 FD | 	call	#__system____builtin_sinf
1ba80     FD 14 02 F6 | 	mov	arg02, result1
1ba84     14 13 02 F6 | 	mov	arg01, local02
1ba88     DC B6 B0 FD | 	call	#__system___float_div
1ba8c     A7 FA 61 FC | 	wrlong	result1, fp
1ba90     08 4E 05 F1 | 	add	fp, #8
1ba94     A7 3C 68 FC | 	wrlong	#30, fp
1ba98     08 4E 85 F1 | 	sub	fp, #8
1ba9c     A7 12 02 F6 | 	mov	arg01, fp
1baa0     2C 1B BF FD | 	call	#_push
1baa4                 | LR__2281
1baa4     A7 F0 03 F6 | 	mov	ptra, fp
1baa8     B2 00 A0 FD | 	call	#popregs_
1baac                 | _do_tan_ret
1baac     2D 00 64 FD | 	ret
1bab0                 | 
1bab0                 | ' 
1bab0                 | ' ' ------------------ val
1bab0                 | ' 
1bab0                 | ' sub do_val
1bab0                 | _do_val
1bab0     05 4A 05 F6 | 	mov	COUNT_, #5
1bab4     A8 00 A0 FD | 	call	#pushregs_
1bab8     20 F0 07 F1 | 	add	ptra, #32
1babc     4A 00 00 FF 
1bac0     A0 E4 05 F1 | 	add	objptr, ##38048
1bac4     F2 16 02 FB | 	rdlong	arg03, objptr
1bac8     0B 15 02 F6 | 	mov	arg02, arg03
1bacc     01 14 66 F0 | 	shl	arg02, #1
1bad0     0B 15 02 F1 | 	add	arg02, arg03
1bad4     02 14 66 F0 | 	shl	arg02, #2
1bad8     03 00 00 FF 
1badc     04 E4 85 F1 | 	sub	objptr, ##1540
1bae0     F2 14 02 F1 | 	add	arg02, objptr
1bae4     0A 17 02 FB | 	rdlong	arg03, arg02
1bae8                 | ' 
1bae8                 | ' numpar=compiledline(lineptr_e).result.uresult
1bae8                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1bae8     02 16 16 F2 | 	cmp	arg03, #2 wc
1baec     47 00 00 FF 
1baf0     9C E4 85 F1 | 	sub	objptr, ##36508
1baf4     00 16 0E C2 |  if_b	cmp	arg03, #0 wz
1baf8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2290
1bafc     00 12 06 F6 | 	mov	arg01, #0
1bb00     90 E0 B0 FD | 	call	#__system___getiolock_0622
1bb04     FD 12 02 F6 | 	mov	arg01, result1
1bb08     9C 95 B0 FD | 	call	#__system___lockmem
1bb0c     93 01 00 FF 
1bb10     DB 15 06 F6 | 	mov	arg02, ##@LR__5696
1bb14     00 12 06 F6 | 	mov	arg01, #0
1bb18     00 16 06 F6 | 	mov	arg03, #0
1bb1c     A8 9D B0 FD | 	call	#__system___basic_print_string
1bb20     00 12 06 F6 | 	mov	arg01, #0
1bb24     6C E0 B0 FD | 	call	#__system___getiolock_0622
1bb28     FD 00 68 FC | 	wrlong	#0, result1
1bb2c     27 12 06 F6 | 	mov	arg01, #39
1bb30     00 14 06 F6 | 	mov	arg02, #0
1bb34     E8 40 B0 FD | 	call	#_printerror
1bb38     0C 02 90 FD | 	jmp	#LR__2302
1bb3c                 | LR__2290
1bb3c     00 1A BF FD | 	call	#_pop
1bb40     FF 16 02 F6 | 	mov	arg03, result3
1bb44     A7 FA 61 FC | 	wrlong	result1, fp
1bb48     04 4E 05 F1 | 	add	fp, #4
1bb4c     A7 FC 61 FC | 	wrlong	result2, fp
1bb50     04 4E 05 F1 | 	add	fp, #4
1bb54     A7 16 62 FC | 	wrlong	arg03, fp
1bb58                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1bb58     08 4E 85 F1 | 	sub	fp, #8
1bb5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1bb60     18 00 90 5D |  if_ne	jmp	#LR__2291
1bb64     A7 12 02 FB | 	rdlong	arg01, fp
1bb68     44 1B BF FD | 	call	#_convertstring
1bb6c     A7 FA 61 FC | 	wrlong	result1, fp
1bb70     08 4E 05 F1 | 	add	fp, #8
1bb74     A7 3E 68 FC | 	wrlong	#31, fp
1bb78     08 4E 85 F1 | 	sub	fp, #8
1bb7c                 | LR__2291
1bb7c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1bb7c     08 4E 05 F1 | 	add	fp, #8
1bb80     A7 16 02 FB | 	rdlong	arg03, fp
1bb84     08 4E 85 F1 | 	sub	fp, #8
1bb88     1F 16 0E F2 | 	cmp	arg03, #31 wz
1bb8c     40 00 90 AD |  if_e	jmp	#LR__2292
1bb90     00 12 06 F6 | 	mov	arg01, #0
1bb94     FC DF B0 FD | 	call	#__system___getiolock_0622
1bb98     FD 12 02 F6 | 	mov	arg01, result1
1bb9c     08 95 B0 FD | 	call	#__system___lockmem
1bba0     93 01 00 FF 
1bba4     E1 15 06 F6 | 	mov	arg02, ##@LR__5697
1bba8     00 12 06 F6 | 	mov	arg01, #0
1bbac     00 16 06 F6 | 	mov	arg03, #0
1bbb0     14 9D B0 FD | 	call	#__system___basic_print_string
1bbb4     00 12 06 F6 | 	mov	arg01, #0
1bbb8     D8 DF B0 FD | 	call	#__system___getiolock_0622
1bbbc     FD 00 68 FC | 	wrlong	#0, result1
1bbc0     0F 12 06 F6 | 	mov	arg01, #15
1bbc4     00 14 06 F6 | 	mov	arg02, #0
1bbc8     54 40 B0 FD | 	call	#_printerror
1bbcc     78 01 90 FD | 	jmp	#LR__2302
1bbd0                 | LR__2292
1bbd0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1bbd0     A7 12 02 FB | 	rdlong	arg01, fp
1bbd4     01 14 06 F6 | 	mov	arg02, #1
1bbd8     90 A8 B0 FD | 	call	#__system__Left_S
1bbdc     FD 12 02 F6 | 	mov	arg01, result1
1bbe0     93 01 00 FF 
1bbe4     E7 15 06 F6 | 	mov	arg02, ##@LR__5698
1bbe8     E4 94 B0 FD | 	call	#__system___string_cmp
1bbec     00 FA 0D F2 | 	cmp	result1, #0 wz
1bbf0     48 00 90 5D |  if_ne	jmp	#LR__2295
1bbf4     93 01 00 FF 
1bbf8     E9 27 06 F6 | 	mov	local01, ##@LR__5699
1bbfc     A7 16 02 FB | 	rdlong	arg03, fp
1bc00     0B 13 02 F6 | 	mov	arg01, arg03
1bc04     09 29 02 F6 | 	mov	local02, arg01
1bc08     97 06 48 FB | 	callpa	#(@LR__2294-@LR__2293)>>2,fcache_load_ptr_
1bc0c                 | LR__2293
1bc0c     14 FB C9 FA | 	rdbyte	result1, local02 wz
1bc10     01 28 06 51 |  if_ne	add	local02, #1
1bc14     F4 FF 9F 5D |  if_ne	jmp	#LR__2293
1bc18                 | LR__2294
1bc18     09 29 82 F1 | 	sub	local02, arg01
1bc1c     14 15 02 F6 | 	mov	arg02, local02
1bc20     01 14 86 F1 | 	sub	arg02, #1
1bc24     0B 13 02 F6 | 	mov	arg01, arg03
1bc28     C8 A8 B0 FD | 	call	#__system__Right_S
1bc2c     FD 14 02 F6 | 	mov	arg02, result1
1bc30     13 13 02 F6 | 	mov	arg01, local01
1bc34     CC 94 B0 FD | 	call	#__system___string_concat
1bc38     A7 FA 61 FC | 	wrlong	result1, fp
1bc3c                 | LR__2295
1bc3c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1bc3c     A7 12 02 FB | 	rdlong	arg01, fp
1bc40     01 14 06 F6 | 	mov	arg02, #1
1bc44     24 A8 B0 FD | 	call	#__system__Left_S
1bc48     FD 12 02 F6 | 	mov	arg01, result1
1bc4c     93 01 00 FF 
1bc50     EC 15 06 F6 | 	mov	arg02, ##@LR__5700
1bc54     78 94 B0 FD | 	call	#__system___string_cmp
1bc58     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc5c     48 00 90 5D |  if_ne	jmp	#LR__2298
1bc60     93 01 00 FF 
1bc64     EE 27 06 F6 | 	mov	local01, ##@LR__5701
1bc68     A7 16 02 FB | 	rdlong	arg03, fp
1bc6c     0B 13 02 F6 | 	mov	arg01, arg03
1bc70     09 29 02 F6 | 	mov	local02, arg01
1bc74     97 06 48 FB | 	callpa	#(@LR__2297-@LR__2296)>>2,fcache_load_ptr_
1bc78                 | LR__2296
1bc78     14 FB C9 FA | 	rdbyte	result1, local02 wz
1bc7c     01 28 06 51 |  if_ne	add	local02, #1
1bc80     F4 FF 9F 5D |  if_ne	jmp	#LR__2296
1bc84                 | LR__2297
1bc84     09 29 82 F1 | 	sub	local02, arg01
1bc88     14 15 02 F6 | 	mov	arg02, local02
1bc8c     01 14 86 F1 | 	sub	arg02, #1
1bc90     0B 13 02 F6 | 	mov	arg01, arg03
1bc94     5C A8 B0 FD | 	call	#__system__Right_S
1bc98     FD 14 02 F6 | 	mov	arg02, result1
1bc9c     13 13 02 F6 | 	mov	arg01, local01
1bca0     60 94 B0 FD | 	call	#__system___string_concat
1bca4     A7 FA 61 FC | 	wrlong	result1, fp
1bca8                 | LR__2298
1bca8     A7 12 02 FB | 	rdlong	arg01, fp
1bcac     88 BA B0 FD | 	call	#__system____builtin_atof
1bcb0     FD 2A 02 F6 | 	mov	local03, result1
1bcb4     A7 12 02 FB | 	rdlong	arg01, fp
1bcb8     00 14 06 F6 | 	mov	arg02, #0
1bcbc     E0 B8 B0 FD | 	call	#__system____builtin_atoi
1bcc0     FD 2C 02 F6 | 	mov	local04, result1
1bcc4                 | ' fval=val(t1.result.sresult)
1bcc4                 | ' ival=val%(t1.result.sresult)
1bcc4                 | ' if fval=ival then
1bcc4     16 13 52 F6 | 	abs	arg01, local04 wc
1bcc8     1F 2E C6 C9 |  if_b	decod	local05, #31
1bccc     00 2E 06 36 |  if_ae	mov	local05, #0
1bcd0     A0 AE B0 FD | 	call	#__system___float_fromuns
1bcd4     17 FB 61 F5 | 	xor	result1, local05
1bcd8     FD 14 02 F6 | 	mov	arg02, result1
1bcdc     15 13 02 F6 | 	mov	arg01, local03
1bce0     01 16 06 F6 | 	mov	arg03, #1
1bce4     90 B6 B0 FD | 	call	#__system___float_cmp
1bce8     00 FA 0D F2 | 	cmp	result1, #0 wz
1bcec     A7 2C 62 AC |  if_e	wrlong	local04, fp
1bcf0     08 4E 05 A1 |  if_e	add	fp, #8
1bcf4     A7 38 68 AC |  if_e	wrlong	#28, fp
1bcf8     08 4E 85 A1 |  if_e	sub	fp, #8
1bcfc     40 00 90 AD |  if_e	jmp	#LR__2301
1bd00                 | '   if fval=0 andalso ival<>0 then
1bd00     15 13 02 F6 | 	mov	arg01, local03
1bd04     00 14 06 F6 | 	mov	arg02, #0
1bd08     01 16 06 F6 | 	mov	arg03, #1
1bd0c     68 B6 B0 FD | 	call	#__system___float_cmp
1bd10     00 FA 0D F2 | 	cmp	result1, #0 wz
1bd14     18 00 90 5D |  if_ne	jmp	#LR__2299
1bd18     00 2C 0E F2 | 	cmp	local04, #0 wz
1bd1c     A7 2C 62 5C |  if_ne	wrlong	local04, fp
1bd20     08 4E 05 51 |  if_ne	add	fp, #8
1bd24     A7 38 68 5C |  if_ne	wrlong	#28, fp
1bd28     08 4E 85 51 |  if_ne	sub	fp, #8
1bd2c     10 00 90 5D |  if_ne	jmp	#LR__2300
1bd30                 | LR__2299
1bd30     A7 2A 62 FC | 	wrlong	local03, fp
1bd34     08 4E 05 F1 | 	add	fp, #8
1bd38     A7 3C 68 FC | 	wrlong	#30, fp
1bd3c     08 4E 85 F1 | 	sub	fp, #8
1bd40                 | LR__2300
1bd40                 | LR__2301
1bd40     A7 12 02 F6 | 	mov	arg01, fp
1bd44     88 18 BF FD | 	call	#_push
1bd48                 | LR__2302
1bd48     A7 F0 03 F6 | 	mov	ptra, fp
1bd4c     B2 00 A0 FD | 	call	#popregs_
1bd50                 | _do_val_ret
1bd50     2D 00 64 FD | 	ret
1bd54                 | 
1bd54                 | ' 
1bd54                 | ' ' ------------------ waitclock
1bd54                 | ' 
1bd54                 | ' sub do_waitclock
1bd54                 | _do_waitclock
1bd54     52 00 00 FF 
1bd58     EC E4 05 F1 | 	add	objptr, ##42220
1bd5c     F2 00 02 FB | 	rdlong	_var01, objptr
1bd60                 | ' c=hkcnt
1bd60                 | ' do: loop until hkcnt<>c
1bd60                 | LR__2310
1bd60     F2 02 02 FB | 	rdlong	_var02, objptr
1bd64     00 03 0A F2 | 	cmp	_var02, _var01 wz
1bd68     F4 FF 9F AD |  if_e	jmp	#LR__2310
1bd6c     52 00 00 FF 
1bd70     EC E4 85 F1 | 	sub	objptr, ##42220
1bd74                 | _do_waitclock_ret
1bd74     2D 00 64 FD | 	ret
1bd78                 | 
1bd78                 | ' 
1bd78                 | ' ' ------------------ waitms
1bd78                 | ' 
1bd78                 | ' sub do_waitms
1bd78                 | _do_waitms
1bd78     03 4A 05 F6 | 	mov	COUNT_, #3
1bd7c     A8 00 A0 FD | 	call	#pushregs_
1bd80     18 F0 07 F1 | 	add	ptra, #24
1bd84     B8 17 BF FD | 	call	#_pop
1bd88     A7 FA 61 FC | 	wrlong	result1, fp
1bd8c     04 4E 05 F1 | 	add	fp, #4
1bd90     A7 FC 61 FC | 	wrlong	result2, fp
1bd94     04 4E 05 F1 | 	add	fp, #4
1bd98     A7 FE 61 FC | 	wrlong	result3, fp
1bd9c     08 4E 85 F1 | 	sub	fp, #8
1bda0     A7 12 02 F6 | 	mov	arg01, fp
1bda4     74 19 BF FD | 	call	#_converttoint
1bda8     FD 26 02 F6 | 	mov	local01, result1
1bdac                 | ' 
1bdac                 | ' t1=pop()  
1bdac                 | ' t=converttoint(t1)
1bdac                 | ' if t<0 then return
1bdac     00 26 56 F2 | 	cmps	local01, #0 wc
1bdb0     98 00 90 CD |  if_b	jmp	#LR__2326
1bdb4                 | ' if t < 1000 then 
1bdb4     01 00 00 FF 
1bdb8     E8 27 56 F2 | 	cmps	local01, ##1000 wc
1bdbc     0C 00 90 3D |  if_ae	jmp	#LR__2320
1bdc0     13 13 02 F6 | 	mov	arg01, local01
1bdc4     7C 95 B0 FD | 	call	#__system___waitms
1bdc8     80 00 90 FD | 	jmp	#LR__2325
1bdcc                 | LR__2320
1bdcc     13 13 52 F6 | 	abs	arg01, local01 wc
1bdd0     01 00 00 FF 
1bdd4     E8 13 16 FD | 	qdiv	arg01, ##1000
1bdd8                 | '   for i=1 to t/1000
1bdd8     01 28 06 F6 | 	mov	local02, #1
1bddc     18 2A 62 FD | 	getqx	local03
1bde0     15 2B 82 F6 | 	negc	local03, local03
1bde4     01 2A 06 F1 | 	add	local03, #1
1bde8                 | LR__2321
1bde8     15 29 52 F2 | 	cmps	local02, local03 wc
1bdec     44 00 90 3D |  if_ae	jmp	#LR__2324
1bdf0     01 00 00 FF 
1bdf4     E8 13 06 F6 | 	mov	arg01, ##1000
1bdf8     48 95 B0 FD | 	call	#__system___waitms
1bdfc                 | '     waitms(1000)
1bdfc                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1bdfc     E0 12 06 F6 | 	mov	arg01, #224
1be00     8C 8D B0 FD | 	call	#_usbnew_spin2_keystate
1be04     00 FA 0D F2 | 	cmp	result1, #0 wz
1be08     10 00 90 5D |  if_ne	jmp	#LR__2322
1be0c     E4 12 06 F6 | 	mov	arg01, #228
1be10     7C 8D B0 FD | 	call	#_usbnew_spin2_keystate
1be14     00 FA 0D F2 | 	cmp	result1, #0 wz
1be18     10 00 90 AD |  if_e	jmp	#LR__2323
1be1c                 | LR__2322
1be1c     06 12 06 F6 | 	mov	arg01, #6
1be20     6C 8D B0 FD | 	call	#_usbnew_spin2_keystate
1be24     00 FA 0D F2 | 	cmp	result1, #0 wz
1be28     20 00 90 5D |  if_ne	jmp	#LR__2326
1be2c                 | LR__2323
1be2c     01 28 06 F1 | 	add	local02, #1
1be30     B4 FF 9F FD | 	jmp	#LR__2321
1be34                 | LR__2324
1be34     13 2B 52 F6 | 	abs	local03, local01 wc
1be38     01 00 00 FF 
1be3c     E8 2B 16 FD | 	qdiv	local03, ##1000
1be40     19 2A 62 FD | 	getqy	local03
1be44     15 13 82 F6 | 	negc	arg01, local03
1be48     F8 94 B0 FD | 	call	#__system___waitms
1be4c                 | LR__2325
1be4c                 | LR__2326
1be4c     A7 F0 03 F6 | 	mov	ptra, fp
1be50     B2 00 A0 FD | 	call	#popregs_
1be54                 | _do_waitms_ret
1be54     2D 00 64 FD | 	ret
1be58                 | 
1be58                 | ' 
1be58                 | ' ' ------------------ waitvbl
1be58                 | ' 
1be58                 | ' sub do_waitvbl
1be58                 | _do_waitvbl
1be58     01 12 06 F6 | 	mov	arg01, #1
1be5c     60 7C B0 FD | 	call	#_hg010b_spin2_waitvbl
1be60                 | _do_waitvbl_ret
1be60     2D 00 64 FD | 	ret
1be64                 | 
1be64                 | ' 
1be64                 | ' ' ------------------ wrpin
1be64                 | ' 
1be64                 | ' sub do_wrpin
1be64                 | _do_wrpin
1be64     01 4A 05 F6 | 	mov	COUNT_, #1
1be68     A8 00 A0 FD | 	call	#pushregs_
1be6c     18 F0 07 F1 | 	add	ptra, #24
1be70     CC 16 BF FD | 	call	#_pop
1be74     FD 14 02 F6 | 	mov	arg02, result1
1be78     FE 12 02 F6 | 	mov	arg01, result2
1be7c     FF 26 02 F6 | 	mov	local01, result3
1be80     A7 14 62 FC | 	wrlong	arg02, fp
1be84     04 4E 05 F1 | 	add	fp, #4
1be88     A7 12 62 FC | 	wrlong	arg01, fp
1be8c     04 4E 05 F1 | 	add	fp, #4
1be90     A7 26 62 FC | 	wrlong	local01, fp
1be94     08 4E 85 F1 | 	sub	fp, #8
1be98     A4 16 BF FD | 	call	#_pop
1be9c     FF 26 02 F6 | 	mov	local01, result3
1bea0     0C 4E 05 F1 | 	add	fp, #12
1bea4     A7 FA 61 FC | 	wrlong	result1, fp
1bea8     04 4E 05 F1 | 	add	fp, #4
1beac     A7 FC 61 FC | 	wrlong	result2, fp
1beb0     04 4E 05 F1 | 	add	fp, #4
1beb4     A7 26 62 FC | 	wrlong	local01, fp
1beb8     08 4E 85 F1 | 	sub	fp, #8
1bebc     A7 12 02 F6 | 	mov	arg01, fp
1bec0     0C 4E 85 F1 | 	sub	fp, #12
1bec4     54 18 BF FD | 	call	#_converttoint
1bec8     FD 26 02 F6 | 	mov	local01, result1
1becc     A7 12 02 F6 | 	mov	arg01, fp
1bed0     48 18 BF FD | 	call	#_converttoint
1bed4     13 FB 01 FC | 	wrpin	result1, local01
1bed8     A7 F0 03 F6 | 	mov	ptra, fp
1bedc     B2 00 A0 FD | 	call	#popregs_
1bee0                 | _do_wrpin_ret
1bee0     2D 00 64 FD | 	ret
1bee4                 | 
1bee4                 | ' 
1bee4                 | ' ' ------------------ wxpin
1bee4                 | ' 
1bee4                 | ' sub do_wxpin
1bee4                 | _do_wxpin
1bee4     01 4A 05 F6 | 	mov	COUNT_, #1
1bee8     A8 00 A0 FD | 	call	#pushregs_
1beec     18 F0 07 F1 | 	add	ptra, #24
1bef0     4C 16 BF FD | 	call	#_pop
1bef4     FD 14 02 F6 | 	mov	arg02, result1
1bef8     FE 12 02 F6 | 	mov	arg01, result2
1befc     FF 26 02 F6 | 	mov	local01, result3
1bf00     A7 14 62 FC | 	wrlong	arg02, fp
1bf04     04 4E 05 F1 | 	add	fp, #4
1bf08     A7 12 62 FC | 	wrlong	arg01, fp
1bf0c     04 4E 05 F1 | 	add	fp, #4
1bf10     A7 26 62 FC | 	wrlong	local01, fp
1bf14     08 4E 85 F1 | 	sub	fp, #8
1bf18     24 16 BF FD | 	call	#_pop
1bf1c     FF 26 02 F6 | 	mov	local01, result3
1bf20     0C 4E 05 F1 | 	add	fp, #12
1bf24     A7 FA 61 FC | 	wrlong	result1, fp
1bf28     04 4E 05 F1 | 	add	fp, #4
1bf2c     A7 FC 61 FC | 	wrlong	result2, fp
1bf30     04 4E 05 F1 | 	add	fp, #4
1bf34     A7 26 62 FC | 	wrlong	local01, fp
1bf38     08 4E 85 F1 | 	sub	fp, #8
1bf3c     A7 12 02 F6 | 	mov	arg01, fp
1bf40     0C 4E 85 F1 | 	sub	fp, #12
1bf44     D4 17 BF FD | 	call	#_converttoint
1bf48     FD 26 02 F6 | 	mov	local01, result1
1bf4c     A7 12 02 F6 | 	mov	arg01, fp
1bf50     C8 17 BF FD | 	call	#_converttoint
1bf54     13 FB 11 FC | 	wxpin	result1, local01
1bf58     A7 F0 03 F6 | 	mov	ptra, fp
1bf5c     B2 00 A0 FD | 	call	#popregs_
1bf60                 | _do_wxpin_ret
1bf60     2D 00 64 FD | 	ret
1bf64                 | 
1bf64                 | ' 
1bf64                 | ' ' ------------------ wypin
1bf64                 | ' 
1bf64                 | ' sub do_wypin
1bf64                 | _do_wypin
1bf64     01 4A 05 F6 | 	mov	COUNT_, #1
1bf68     A8 00 A0 FD | 	call	#pushregs_
1bf6c     18 F0 07 F1 | 	add	ptra, #24
1bf70     CC 15 BF FD | 	call	#_pop
1bf74     FD 14 02 F6 | 	mov	arg02, result1
1bf78     FE 12 02 F6 | 	mov	arg01, result2
1bf7c     FF 26 02 F6 | 	mov	local01, result3
1bf80     A7 14 62 FC | 	wrlong	arg02, fp
1bf84     04 4E 05 F1 | 	add	fp, #4
1bf88     A7 12 62 FC | 	wrlong	arg01, fp
1bf8c     04 4E 05 F1 | 	add	fp, #4
1bf90     A7 26 62 FC | 	wrlong	local01, fp
1bf94     08 4E 85 F1 | 	sub	fp, #8
1bf98     A4 15 BF FD | 	call	#_pop
1bf9c     FF 26 02 F6 | 	mov	local01, result3
1bfa0     0C 4E 05 F1 | 	add	fp, #12
1bfa4     A7 FA 61 FC | 	wrlong	result1, fp
1bfa8     04 4E 05 F1 | 	add	fp, #4
1bfac     A7 FC 61 FC | 	wrlong	result2, fp
1bfb0     04 4E 05 F1 | 	add	fp, #4
1bfb4     A7 26 62 FC | 	wrlong	local01, fp
1bfb8     08 4E 85 F1 | 	sub	fp, #8
1bfbc     A7 12 02 F6 | 	mov	arg01, fp
1bfc0     0C 4E 85 F1 | 	sub	fp, #12
1bfc4     54 17 BF FD | 	call	#_converttoint
1bfc8     FD 26 02 F6 | 	mov	local01, result1
1bfcc     A7 12 02 F6 | 	mov	arg01, fp
1bfd0     48 17 BF FD | 	call	#_converttoint
1bfd4     13 FB 21 FC | 	wypin	result1, local01
1bfd8     A7 F0 03 F6 | 	mov	ptra, fp
1bfdc     B2 00 A0 FD | 	call	#popregs_
1bfe0                 | _do_wypin_ret
1bfe0     2D 00 64 FD | 	ret
1bfe4                 | 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bfe4                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1bfe4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bfe4                 | ' 
1bfe4                 | ' 
1bfe4                 | ' '------------------ Assign
1bfe4                 | ' 
1bfe4                 | ' sub do_assign
1bfe4                 | _do_assign
1bfe4     0E 4A 05 F6 | 	mov	COUNT_, #14
1bfe8     A8 00 A0 FD | 	call	#pushregs_
1bfec     44 F0 07 F1 | 	add	ptra, #68
1bff0     4A 00 00 FF 
1bff4     A0 E4 05 F1 | 	add	objptr, ##38048
1bff8     F2 16 02 FB | 	rdlong	arg03, objptr
1bffc     0B 15 02 F6 | 	mov	arg02, arg03
1c000     01 14 66 F0 | 	shl	arg02, #1
1c004     0B 15 02 F1 | 	add	arg02, arg03
1c008     02 14 66 F0 | 	shl	arg02, #2
1c00c     03 00 00 FF 
1c010     04 E4 85 F1 | 	sub	objptr, ##1540
1c014     F2 14 02 F1 | 	add	arg02, objptr
1c018     0A 2D 02 FB | 	rdlong	local04, arg02
1c01c                 | ' 
1c01c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1c01c                 | ' if variables(varnum).vartype<array_no_type then 
1c01c     16 17 02 F6 | 	mov	arg03, local04
1c020     04 16 66 F0 | 	shl	arg03, #4
1c024     32 00 00 FF 
1c028     84 E4 85 F1 | 	sub	objptr, ##25732
1c02c     F2 16 02 F1 | 	add	arg03, objptr
1c030     0C 16 06 F1 | 	add	arg03, #12
1c034     0B 17 02 FB | 	rdlong	arg03, arg03
1c038     00 17 16 F2 | 	cmp	arg03, #256 wc
1c03c     15 00 00 FF 
1c040     18 E4 85 F1 | 	sub	objptr, ##10776
1c044     F8 00 90 3D |  if_ae	jmp	#LR__2330
1c048     F4 14 BF FD | 	call	#_pop
1c04c     A7 FA 61 FC | 	wrlong	result1, fp
1c050     04 4E 05 F1 | 	add	fp, #4
1c054     A7 FC 61 FC | 	wrlong	result2, fp
1c058     04 4E 05 F1 | 	add	fp, #4
1c05c     A7 FE 61 FC | 	wrlong	result3, fp
1c060     08 4E 85 F1 | 	sub	fp, #8
1c064     A7 16 02 FB | 	rdlong	arg03, fp
1c068     04 4E 05 F1 | 	add	fp, #4
1c06c     A7 14 02 FB | 	rdlong	arg02, fp
1c070     16 13 02 F6 | 	mov	arg01, local04
1c074     04 12 66 F0 | 	shl	arg01, #4
1c078     15 00 00 FF 
1c07c     18 E4 05 F1 | 	add	objptr, ##10776
1c080     F2 12 02 F1 | 	add	arg01, objptr
1c084     04 12 06 F1 | 	add	arg01, #4
1c088     09 17 62 FC | 	wrlong	arg03, arg01
1c08c     16 17 02 F6 | 	mov	arg03, local04
1c090     04 16 66 F0 | 	shl	arg03, #4
1c094     F2 16 02 F1 | 	add	arg03, objptr
1c098     08 16 06 F1 | 	add	arg03, #8
1c09c     0B 15 62 FC | 	wrlong	arg02, arg03
1c0a0     16 17 02 F6 | 	mov	arg03, local04
1c0a4     04 16 66 F0 | 	shl	arg03, #4
1c0a8     F2 16 02 F1 | 	add	arg03, objptr
1c0ac     04 4E 05 F1 | 	add	fp, #4
1c0b0     A7 14 02 FB | 	rdlong	arg02, fp
1c0b4     08 4E 85 F1 | 	sub	fp, #8
1c0b8     0C 16 06 F1 | 	add	arg03, #12
1c0bc     0B 15 62 FC | 	wrlong	arg02, arg03
1c0c0                 | '   t1=pop() 
1c0c0                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1c0c0                 | '   if variables(varnum).vartype<>result_string2 then return
1c0c0     16 17 02 F6 | 	mov	arg03, local04
1c0c4     04 16 66 F0 | 	shl	arg03, #4
1c0c8     F2 16 02 F1 | 	add	arg03, objptr
1c0cc     0C 16 06 F1 | 	add	arg03, #12
1c0d0     0B 17 02 FB | 	rdlong	arg03, arg03
1c0d4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c0d8     15 00 00 FF 
1c0dc     18 E4 85 F1 | 	sub	objptr, ##10776
1c0e0     68 03 90 5D |  if_ne	jmp	#LR__2352
1c0e4     16 2F 02 F6 | 	mov	local05, local04
1c0e8     04 2E 66 F0 | 	shl	local05, #4
1c0ec     15 00 00 FF 
1c0f0     18 E4 05 F1 | 	add	objptr, ##10776
1c0f4     F2 2E 02 F1 | 	add	local05, objptr
1c0f8     16 17 02 F6 | 	mov	arg03, local04
1c0fc     04 16 66 F0 | 	shl	arg03, #4
1c100     F2 16 02 F1 | 	add	arg03, objptr
1c104     04 16 06 F1 | 	add	arg03, #4
1c108     0B 13 02 FB | 	rdlong	arg01, arg03
1c10c     15 00 00 FF 
1c110     18 E4 85 F1 | 	sub	objptr, ##10776
1c114     98 15 BF FD | 	call	#_convertstring
1c118     04 2E 06 F1 | 	add	local05, #4
1c11c     17 FB 61 FC | 	wrlong	result1, local05
1c120     04 2C 66 F0 | 	shl	local04, #4
1c124     F2 2E 02 F6 | 	mov	local05, objptr
1c128     15 00 00 FF 
1c12c     18 2E 06 F1 | 	add	local05, ##10776
1c130     17 2D 02 F1 | 	add	local04, local05
1c134     0C 2C 06 F1 | 	add	local04, #12
1c138     16 3F 68 FC | 	wrlong	#31, local04
1c13c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1c13c                 | '   variables(varnum).vartype=result_string
1c13c                 | '   return
1c13c     0C 03 90 FD | 	jmp	#LR__2352
1c140                 | LR__2330
1c140                 | ' for i=0 to 2 : arrid(i)=0 : next i
1c140     00 30 06 F6 | 	mov	local06, #0
1c144                 | LR__2331
1c144     18 2F 02 F6 | 	mov	local05, local06
1c148     13 2F 06 F1 | 	add	local05, #local01
1c14c     00 32 06 F6 | 	mov	local07, #0
1c150                 | 	'.live	local07
1c150                 | 	'.live	local05
1c150     00 2E 8E F9 | 	altd	local05, #0
1c154     19 2F 02 F6 | 	mov	local05, local07
1c158     01 30 06 F1 | 	add	local06, #1
1c15c     03 30 16 F2 | 	cmp	local06, #3 wc
1c160     E0 FF 9F CD |  if_b	jmp	#LR__2331
1c164     4A 00 00 FF 
1c168     A0 E4 05 F1 | 	add	objptr, ##38048
1c16c     F2 2E 02 FB | 	rdlong	local05, objptr
1c170     17 31 02 F6 | 	mov	local06, local05
1c174     01 30 66 F0 | 	shl	local06, #1
1c178     17 31 02 F1 | 	add	local06, local05
1c17c     02 30 66 F0 | 	shl	local06, #2
1c180     03 00 00 FF 
1c184     04 E4 85 F1 | 	sub	objptr, ##1540
1c188     F2 30 02 F1 | 	add	local06, objptr
1c18c     04 30 06 F1 | 	add	local06, #4
1c190     18 31 02 FB | 	rdlong	local06, local06
1c194     47 00 00 FF 
1c198     9C E4 85 F1 | 	sub	objptr, ##36508
1c19c     A0 13 BF FD | 	call	#_pop
1c1a0     FD 34 02 F6 | 	mov	local08, result1
1c1a4     FE 36 02 F6 | 	mov	local09, result2
1c1a8     FF 2E 02 F6 | 	mov	local05, result3
1c1ac     A7 34 62 FC | 	wrlong	local08, fp
1c1b0     04 4E 05 F1 | 	add	fp, #4
1c1b4     A7 36 62 FC | 	wrlong	local09, fp
1c1b8     04 4E 05 F1 | 	add	fp, #4
1c1bc     A7 2E 62 FC | 	wrlong	local05, fp
1c1c0     08 4E 85 F1 | 	sub	fp, #8
1c1c4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1c1c4                 | ' t1=pop() ' var value
1c1c4                 | ' if numpar>0 then
1c1c4     01 30 16 F2 | 	cmp	local06, #1 wc
1c1c8     50 00 90 CD |  if_b	jmp	#LR__2334
1c1cc                 | '   for i=numpar to 1 step -1
1c1cc     00 30 4E F2 | 	cmps	local06, #0 wz
1c1d0     48 00 90 AD |  if_e	jmp	#LR__2333
1c1d4                 | LR__2332
1c1d4     68 13 BF FD | 	call	#_pop
1c1d8     0C 4E 05 F1 | 	add	fp, #12
1c1dc     A7 FA 61 FC | 	wrlong	result1, fp
1c1e0     04 4E 05 F1 | 	add	fp, #4
1c1e4     A7 FC 61 FC | 	wrlong	result2, fp
1c1e8     04 4E 05 F1 | 	add	fp, #4
1c1ec     A7 FE 61 FC | 	wrlong	result3, fp
1c1f0     18 2F 02 F6 | 	mov	local05, local06
1c1f4     01 2E 86 F1 | 	sub	local05, #1
1c1f8     13 2F 06 F1 | 	add	local05, #local01
1c1fc     08 4E 85 F1 | 	sub	fp, #8
1c200     A7 12 02 F6 | 	mov	arg01, fp
1c204     0C 4E 85 F1 | 	sub	fp, #12
1c208     10 15 BF FD | 	call	#_converttoint
1c20c     FD 32 02 F6 | 	mov	local07, result1
1c210                 | 	'.live	local07
1c210                 | 	'.live	local05
1c210     00 2E 8E F9 | 	altd	local05, #0
1c214     19 2F 02 F6 | 	mov	local05, local07
1c218     EE 31 6E FB | 	djnz	local06, #LR__2332
1c21c                 | LR__2333
1c21c                 | LR__2334
1c21c     04 2C 66 F0 | 	shl	local04, #4
1c220     F2 16 02 F6 | 	mov	arg03, objptr
1c224     15 00 00 FF 
1c228     18 16 06 F1 | 	add	arg03, ##10776
1c22c     0B 2D 02 F1 | 	add	local04, arg03
1c230     04 2C 06 F1 | 	add	local04, #4
1c234     16 39 02 FB | 	rdlong	local10, local04
1c238     1C 13 02 F6 | 	mov	arg01, local10
1c23c     9C 3B B0 FD | 	call	#_pslpeek
1c240     FD 3A 32 F9 | 	getword	local11, result1, #0
1c244     1C 13 02 F6 | 	mov	arg01, local10
1c248     02 12 06 F1 | 	add	arg01, #2
1c24c     44 3B B0 FD | 	call	#_pspeek
1c250     FD 3C E2 F8 | 	getbyte	local12, result1, #0
1c254                 | ' esize=pspeek(arrptr+2)
1c254                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1c254     1C 13 02 F6 | 	mov	arg01, local10
1c258     04 12 06 F1 | 	add	arg01, #4
1c25c     7C 3B B0 FD | 	call	#_pslpeek
1c260     FD 26 12 F2 | 	cmp	local01, result1 wc
1c264     28 00 90 3D |  if_ae	jmp	#LR__2335
1c268     1C 13 02 F6 | 	mov	arg01, local10
1c26c     08 12 06 F1 | 	add	arg01, #8
1c270     68 3B B0 FD | 	call	#_pslpeek
1c274     FD 28 12 F2 | 	cmp	local02, result1 wc
1c278     14 00 90 3D |  if_ae	jmp	#LR__2335
1c27c     1C 13 02 F6 | 	mov	arg01, local10
1c280     0C 12 06 F1 | 	add	arg01, #12
1c284     54 3B B0 FD | 	call	#_pslpeek
1c288     FD 2A 12 F2 | 	cmp	local03, result1 wc
1c28c     10 00 90 CD |  if_b	jmp	#LR__2336
1c290                 | LR__2335
1c290     31 12 06 F6 | 	mov	arg01, #49
1c294     00 14 06 F6 | 	mov	arg02, #0
1c298     84 39 B0 FD | 	call	#_printerror
1c29c     AC 01 90 FD | 	jmp	#LR__2352
1c2a0                 | LR__2336
1c2a0     1C 3F 02 F6 | 	mov	local13, local10
1c2a4     10 3E 06 F1 | 	add	local13, #16
1c2a8     1C 13 02 F6 | 	mov	arg01, local10
1c2ac     04 12 06 F1 | 	add	arg01, #4
1c2b0     28 3B B0 FD | 	call	#_pslpeek
1c2b4     14 FB 01 FD | 	qmul	result1, local02
1c2b8     13 37 02 F6 | 	mov	local09, local01
1c2bc     1C 13 02 F6 | 	mov	arg01, local10
1c2c0     08 12 06 F1 | 	add	arg01, #8
1c2c4     18 34 62 FD | 	getqx	local08
1c2c8     1A 37 02 F1 | 	add	local09, local08
1c2cc     0C 3B B0 FD | 	call	#_pslpeek
1c2d0     FD 32 02 F6 | 	mov	local07, result1
1c2d4     04 38 06 F1 | 	add	local10, #4
1c2d8     1C 13 02 F6 | 	mov	arg01, local10
1c2dc     FC 3A B0 FD | 	call	#_pslpeek
1c2e0     FD 32 02 FD | 	qmul	local07, result1
1c2e4     18 38 62 FD | 	getqx	local10
1c2e8     15 39 02 FD | 	qmul	local10, local03
1c2ec     18 26 62 FD | 	getqx	local01
1c2f0     13 37 02 F1 | 	add	local09, local01
1c2f4     1B 3D 02 FD | 	qmul	local12, local09
1c2f8                 | ' 
1c2f8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1c2f8                 | ' select case arrtype
1c2f8     1D 41 02 F6 | 	mov	local14, local11
1c2fc     00 41 86 F1 | 	sub	local14, #256
1c300     0C 40 26 F3 | 	fle	local14, #12
1c304     18 26 62 FD | 	getqx	local01
1c308     13 3F 02 F1 | 	add	local13, local01
1c30c     30 40 62 FD | 	jmprel	local14
1c310                 | LR__2337
1c310     30 00 90 FD | 	jmp	#LR__2338
1c314     50 00 90 FD | 	jmp	#LR__2339
1c318     5C 00 90 FD | 	jmp	#LR__2340
1c31c     68 00 90 FD | 	jmp	#LR__2341
1c320     88 00 90 FD | 	jmp	#LR__2342
1c324     A8 00 90 FD | 	jmp	#LR__2343
1c328     B4 00 90 FD | 	jmp	#LR__2344
1c32c     C0 00 90 FD | 	jmp	#LR__2345
1c330     CC 00 90 FD | 	jmp	#LR__2346
1c334     D8 00 90 FD | 	jmp	#LR__2347
1c338     E4 00 90 FD | 	jmp	#LR__2348
1c33c     F0 00 90 FD | 	jmp	#LR__2349
1c340     FC 00 90 FD | 	jmp	#LR__2350
1c344                 | LR__2338
1c344     A7 12 02 F6 | 	mov	arg01, fp
1c348     1F 15 02 F6 | 	mov	arg02, local13
1c34c     0C 16 06 F6 | 	mov	arg03, #12
1c350     0B 00 00 FF 
1c354     CC E4 05 F1 | 	add	objptr, ##5836
1c358     E4 85 B0 FD | 	call	#_psram_spin2_write
1c35c     0B 00 00 FF 
1c360     CC E4 85 F1 | 	sub	objptr, ##5836
1c364     E4 00 90 FD | 	jmp	#LR__2351
1c368                 | LR__2339
1c368     A7 14 02 FB | 	rdlong	arg02, fp
1c36c     1F 13 02 F6 | 	mov	arg01, local13
1c370     D8 39 B0 FD | 	call	#_pspoke
1c374     D4 00 90 FD | 	jmp	#LR__2351
1c378                 | LR__2340
1c378     A7 14 02 FB | 	rdlong	arg02, fp
1c37c     1F 13 02 F6 | 	mov	arg01, local13
1c380     C8 39 B0 FD | 	call	#_pspoke
1c384     C4 00 90 FD | 	jmp	#LR__2351
1c388                 | LR__2341
1c388     A7 14 02 FB | 	rdlong	arg02, fp
1c38c     1F 13 02 F6 | 	mov	arg01, local13
1c390     B8 39 B0 FD | 	call	#_pspoke
1c394     01 3E 06 F1 | 	add	local13, #1
1c398     A7 14 02 FB | 	rdlong	arg02, fp
1c39c     08 14 46 F0 | 	shr	arg02, #8
1c3a0     1F 13 02 F6 | 	mov	arg01, local13
1c3a4     A4 39 B0 FD | 	call	#_pspoke
1c3a8     A0 00 90 FD | 	jmp	#LR__2351
1c3ac                 | LR__2342
1c3ac     A7 14 02 FB | 	rdlong	arg02, fp
1c3b0     1F 13 02 F6 | 	mov	arg01, local13
1c3b4     94 39 B0 FD | 	call	#_pspoke
1c3b8     01 3E 06 F1 | 	add	local13, #1
1c3bc     A7 14 02 FB | 	rdlong	arg02, fp
1c3c0     08 14 46 F0 | 	shr	arg02, #8
1c3c4     1F 13 02 F6 | 	mov	arg01, local13
1c3c8     80 39 B0 FD | 	call	#_pspoke
1c3cc     7C 00 90 FD | 	jmp	#LR__2351
1c3d0                 | LR__2343
1c3d0     A7 14 02 FB | 	rdlong	arg02, fp
1c3d4     1F 13 02 F6 | 	mov	arg01, local13
1c3d8     E0 38 B0 FD | 	call	#_pslpoke
1c3dc     6C 00 90 FD | 	jmp	#LR__2351
1c3e0                 | LR__2344
1c3e0     A7 14 02 FB | 	rdlong	arg02, fp
1c3e4     1F 13 02 F6 | 	mov	arg01, local13
1c3e8     D0 38 B0 FD | 	call	#_pslpoke
1c3ec     5C 00 90 FD | 	jmp	#LR__2351
1c3f0                 | LR__2345
1c3f0     A7 14 02 FB | 	rdlong	arg02, fp
1c3f4     1F 13 02 F6 | 	mov	arg01, local13
1c3f8     C0 38 B0 FD | 	call	#_pslpoke
1c3fc     4C 00 90 FD | 	jmp	#LR__2351
1c400                 | LR__2346
1c400     A7 14 02 FB | 	rdlong	arg02, fp
1c404     1F 13 02 F6 | 	mov	arg01, local13
1c408     B0 38 B0 FD | 	call	#_pslpoke
1c40c     3C 00 90 FD | 	jmp	#LR__2351
1c410                 | LR__2347
1c410     A7 14 02 FB | 	rdlong	arg02, fp
1c414     1F 13 02 F6 | 	mov	arg01, local13
1c418     A0 38 B0 FD | 	call	#_pslpoke
1c41c     2C 00 90 FD | 	jmp	#LR__2351
1c420                 | LR__2348
1c420     A7 14 02 FB | 	rdlong	arg02, fp
1c424     1F 13 02 F6 | 	mov	arg01, local13
1c428     90 38 B0 FD | 	call	#_pslpoke
1c42c     1C 00 90 FD | 	jmp	#LR__2351
1c430                 | LR__2349
1c430     A7 14 02 FB | 	rdlong	arg02, fp
1c434     1F 13 02 F6 | 	mov	arg01, local13
1c438     80 38 B0 FD | 	call	#_pslpoke
1c43c     0C 00 90 FD | 	jmp	#LR__2351
1c440                 | LR__2350
1c440     32 12 06 F6 | 	mov	arg01, #50
1c444     00 14 06 F6 | 	mov	arg02, #0
1c448     D4 37 B0 FD | 	call	#_printerror
1c44c                 | LR__2351
1c44c                 | LR__2352
1c44c     A7 F0 03 F6 | 	mov	ptra, fp
1c450     B2 00 A0 FD | 	call	#popregs_
1c454                 | _do_assign_ret
1c454     2D 00 64 FD | 	ret
1c458                 | 
1c458                 | ' 
1c458                 | ' 
1c458                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1c458                 | ' 
1c458                 | ' sub do_getvar
1c458                 | _do_getvar
1c458     0D 4A 05 F6 | 	mov	COUNT_, #13
1c45c     A8 00 A0 FD | 	call	#pushregs_
1c460     3C F0 07 F1 | 	add	ptra, #60
1c464                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c464     4A 00 00 FF 
1c468     A0 E4 05 F1 | 	add	objptr, ##38048
1c46c     F2 26 02 FB | 	rdlong	local01, objptr
1c470     13 17 02 F6 | 	mov	arg03, local01
1c474     01 16 66 F0 | 	shl	arg03, #1
1c478     13 17 02 F1 | 	add	arg03, local01
1c47c     02 16 66 F0 | 	shl	arg03, #2
1c480     03 00 00 FF 
1c484     04 E4 85 F1 | 	sub	objptr, ##1540
1c488     F2 16 02 F1 | 	add	arg03, objptr
1c48c     04 16 06 F1 | 	add	arg03, #4
1c490     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1c494     47 00 00 FF 
1c498     9C E4 85 F1 | 	sub	objptr, ##36508
1c49c     C4 00 90 5D |  if_ne	jmp	#LR__2361
1c4a0     4A 00 00 FF 
1c4a4     A0 E4 05 F1 | 	add	objptr, ##38048
1c4a8     F2 26 02 FB | 	rdlong	local01, objptr
1c4ac     13 13 02 F6 | 	mov	arg01, local01
1c4b0     01 12 66 F0 | 	shl	arg01, #1
1c4b4     13 13 02 F1 | 	add	arg01, local01
1c4b8     02 12 66 F0 | 	shl	arg01, #2
1c4bc     03 00 00 FF 
1c4c0     04 E4 85 F1 | 	sub	objptr, ##1540
1c4c4     F2 12 02 F1 | 	add	arg01, objptr
1c4c8     09 27 02 FB | 	rdlong	local01, arg01
1c4cc     04 26 66 F0 | 	shl	local01, #4
1c4d0     32 00 00 FF 
1c4d4     84 E4 85 F1 | 	sub	objptr, ##25732
1c4d8     F2 26 02 F1 | 	add	local01, objptr
1c4dc     04 26 06 F1 | 	add	local01, #4
1c4e0     13 13 02 FB | 	rdlong	arg01, local01
1c4e4     04 26 06 F1 | 	add	local01, #4
1c4e8     13 27 02 FB | 	rdlong	local01, local01
1c4ec     A7 12 62 FC | 	wrlong	arg01, fp
1c4f0     04 4E 05 F1 | 	add	fp, #4
1c4f4     A7 26 62 FC | 	wrlong	local01, fp
1c4f8     35 00 00 FF 
1c4fc     88 E4 05 F1 | 	add	objptr, ##27272
1c500     F2 26 02 FB | 	rdlong	local01, objptr
1c504     13 13 02 F6 | 	mov	arg01, local01
1c508     01 12 66 F0 | 	shl	arg01, #1
1c50c     13 13 02 F1 | 	add	arg01, local01
1c510     02 12 66 F0 | 	shl	arg01, #2
1c514     03 00 00 FF 
1c518     04 E4 85 F1 | 	sub	objptr, ##1540
1c51c     F2 12 02 F1 | 	add	arg01, objptr
1c520     09 27 02 FB | 	rdlong	local01, arg01
1c524     04 26 66 F0 | 	shl	local01, #4
1c528     32 00 00 FF 
1c52c     84 E4 85 F1 | 	sub	objptr, ##25732
1c530     F2 26 02 F1 | 	add	local01, objptr
1c534     0C 26 06 F1 | 	add	local01, #12
1c538     13 27 02 FB | 	rdlong	local01, local01
1c53c     04 4E 05 F1 | 	add	fp, #4
1c540     A7 26 62 FC | 	wrlong	local01, fp
1c544                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1c544                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c544                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1c544     08 4E 85 F1 | 	sub	fp, #8
1c548     00 27 16 F2 | 	cmp	local01, #256 wc
1c54c     15 00 00 FF 
1c550     18 E4 85 F1 | 	sub	objptr, ##10776
1c554     0C 00 90 3D |  if_ae	jmp	#LR__2360
1c558     A7 12 02 F6 | 	mov	arg01, fp
1c55c     70 10 BF FD | 	call	#_push
1c560     94 03 90 FD | 	jmp	#LR__2382
1c564                 | LR__2360
1c564                 | LR__2361
1c564     4A 00 00 FF 
1c568     A0 E4 05 F1 | 	add	objptr, ##38048
1c56c     F2 16 02 FB | 	rdlong	arg03, objptr
1c570     0B 15 02 F6 | 	mov	arg02, arg03
1c574     01 14 66 F0 | 	shl	arg02, #1
1c578     0B 15 02 F1 | 	add	arg02, arg03
1c57c     02 14 66 F0 | 	shl	arg02, #2
1c580     03 00 00 FF 
1c584     04 E4 85 F1 | 	sub	objptr, ##1540
1c588     F2 14 02 F1 | 	add	arg02, objptr
1c58c     0A 17 02 FB | 	rdlong	arg03, arg02
1c590     04 16 66 F0 | 	shl	arg03, #4
1c594     32 00 00 FF 
1c598     84 E4 85 F1 | 	sub	objptr, ##25732
1c59c     F2 16 02 F1 | 	add	arg03, objptr
1c5a0     04 16 06 F1 | 	add	arg03, #4
1c5a4     0B 29 02 FB | 	rdlong	local02, arg03
1c5a8     14 13 02 F6 | 	mov	arg01, local02
1c5ac     15 00 00 FF 
1c5b0     18 E4 85 F1 | 	sub	objptr, ##10776
1c5b4     24 38 B0 FD | 	call	#_pslpeek
1c5b8     FD 2A 32 F9 | 	getword	local03, result1, #0
1c5bc     4A 00 00 FF 
1c5c0     A0 E4 05 F1 | 	add	objptr, ##38048
1c5c4     F2 16 02 FB | 	rdlong	arg03, objptr
1c5c8     0B 15 02 F6 | 	mov	arg02, arg03
1c5cc     01 14 66 F0 | 	shl	arg02, #1
1c5d0     0B 15 02 F1 | 	add	arg02, arg03
1c5d4     02 14 66 F0 | 	shl	arg02, #2
1c5d8     03 00 00 FF 
1c5dc     04 E4 85 F1 | 	sub	objptr, ##1540
1c5e0     F2 14 02 F1 | 	add	arg02, objptr
1c5e4     04 14 06 F1 | 	add	arg02, #4
1c5e8     0A 2D 02 FB | 	rdlong	local04, arg02
1c5ec     14 13 02 F6 | 	mov	arg01, local02
1c5f0     02 12 06 F1 | 	add	arg01, #2
1c5f4     47 00 00 FF 
1c5f8     9C E4 85 F1 | 	sub	objptr, ##36508
1c5fc     94 37 B0 FD | 	call	#_pspeek
1c600     FD 2E E2 F8 | 	getbyte	local05, result1, #0
1c604     14 13 02 F6 | 	mov	arg01, local02
1c608     04 12 06 F1 | 	add	arg01, #4
1c60c     CC 37 B0 FD | 	call	#_pslpeek
1c610     FD 30 02 F6 | 	mov	local06, result1
1c614     14 13 02 F6 | 	mov	arg01, local02
1c618     08 12 06 F1 | 	add	arg01, #8
1c61c     BC 37 B0 FD | 	call	#_pslpeek
1c620     FD 32 02 F6 | 	mov	local07, result1
1c624     14 13 02 F6 | 	mov	arg01, local02
1c628     0C 12 06 F1 | 	add	arg01, #12
1c62c     AC 37 B0 FD | 	call	#_pslpeek
1c630                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c630                 | ' esize=pspeek(arrptr+2)
1c630                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c630                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c630                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c630                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c630     03 2C 16 F2 | 	cmp	local04, #3 wc
1c634     30 00 90 CD |  if_b	jmp	#LR__2362
1c638     04 0F BF FD | 	call	#_pop
1c63c     FF 16 02 F6 | 	mov	arg03, result3
1c640     A7 FA 61 FC | 	wrlong	result1, fp
1c644     04 4E 05 F1 | 	add	fp, #4
1c648     A7 FC 61 FC | 	wrlong	result2, fp
1c64c     04 4E 05 F1 | 	add	fp, #4
1c650     A7 16 62 FC | 	wrlong	arg03, fp
1c654     08 4E 85 F1 | 	sub	fp, #8
1c658     A7 12 02 F6 | 	mov	arg01, fp
1c65c     BC 10 BF FD | 	call	#_converttoint
1c660     FD 34 02 F6 | 	mov	local08, result1
1c664     04 00 90 FD | 	jmp	#LR__2363
1c668                 | LR__2362
1c668     00 34 06 F6 | 	mov	local08, #0
1c66c                 | LR__2363
1c66c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c66c     02 2C 16 F2 | 	cmp	local04, #2 wc
1c670     30 00 90 CD |  if_b	jmp	#LR__2364
1c674     C8 0E BF FD | 	call	#_pop
1c678     FF 16 02 F6 | 	mov	arg03, result3
1c67c     A7 FA 61 FC | 	wrlong	result1, fp
1c680     04 4E 05 F1 | 	add	fp, #4
1c684     A7 FC 61 FC | 	wrlong	result2, fp
1c688     04 4E 05 F1 | 	add	fp, #4
1c68c     A7 16 62 FC | 	wrlong	arg03, fp
1c690     08 4E 85 F1 | 	sub	fp, #8
1c694     A7 12 02 F6 | 	mov	arg01, fp
1c698     80 10 BF FD | 	call	#_converttoint
1c69c     FD 36 02 F6 | 	mov	local09, result1
1c6a0     04 00 90 FD | 	jmp	#LR__2365
1c6a4                 | LR__2364
1c6a4     00 36 06 F6 | 	mov	local09, #0
1c6a8                 | LR__2365
1c6a8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c6a8     01 2C 16 F2 | 	cmp	local04, #1 wc
1c6ac     30 00 90 CD |  if_b	jmp	#LR__2366
1c6b0     8C 0E BF FD | 	call	#_pop
1c6b4     FF 2C 02 F6 | 	mov	local04, result3
1c6b8     A7 FA 61 FC | 	wrlong	result1, fp
1c6bc     04 4E 05 F1 | 	add	fp, #4
1c6c0     A7 FC 61 FC | 	wrlong	result2, fp
1c6c4     04 4E 05 F1 | 	add	fp, #4
1c6c8     A7 2C 62 FC | 	wrlong	local04, fp
1c6cc     08 4E 85 F1 | 	sub	fp, #8
1c6d0     A7 12 02 F6 | 	mov	arg01, fp
1c6d4     44 10 BF FD | 	call	#_converttoint
1c6d8     FD 38 02 F6 | 	mov	local10, result1
1c6dc     04 00 90 FD | 	jmp	#LR__2367
1c6e0                 | LR__2366
1c6e0     00 38 06 F6 | 	mov	local10, #0
1c6e4                 | LR__2367
1c6e4     18 37 02 FD | 	qmul	local09, local06
1c6e8     14 3B 02 F6 | 	mov	local11, local02
1c6ec     10 3A 06 F1 | 	add	local11, #16
1c6f0     1C 3D 02 F6 | 	mov	local12, local10
1c6f4     18 38 62 FD | 	getqx	local10
1c6f8     18 35 02 FD | 	qmul	local08, local06
1c6fc     1C 3D 02 F1 | 	add	local12, local10
1c700     18 38 62 FD | 	getqx	local10
1c704     19 39 02 FD | 	qmul	local10, local07
1c708     18 38 62 FD | 	getqx	local10
1c70c     1C 3D 02 F1 | 	add	local12, local10
1c710     17 3D 02 FD | 	qmul	local12, local05
1c714                 | ' 
1c714                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c714                 | ' 
1c714                 | ' select case vartype
1c714     15 3F 02 F6 | 	mov	local13, local03
1c718     00 3F 86 F1 | 	sub	local13, #256
1c71c     0C 3E 26 F3 | 	fle	local13, #12
1c720     18 38 62 FD | 	getqx	local10
1c724     1C 3B 02 F1 | 	add	local11, local10
1c728     30 3E 62 FD | 	jmprel	local13
1c72c                 | LR__2368
1c72c     30 00 90 FD | 	jmp	#LR__2369
1c730     50 00 90 FD | 	jmp	#LR__2370
1c734     80 00 90 FD | 	jmp	#LR__2371
1c738     9C 00 90 FD | 	jmp	#LR__2372
1c73c     D4 00 90 FD | 	jmp	#LR__2373
1c740     F0 00 90 FD | 	jmp	#LR__2374
1c744     08 01 90 FD | 	jmp	#LR__2375
1c748     20 01 90 FD | 	jmp	#LR__2376
1c74c     30 01 90 FD | 	jmp	#LR__2377
1c750     40 01 90 FD | 	jmp	#LR__2378
1c754     58 01 90 FD | 	jmp	#LR__2379
1c758     68 01 90 FD | 	jmp	#LR__2380
1c75c     90 01 90 FD | 	jmp	#LR__2381
1c760                 | LR__2369
1c760     A7 12 02 F6 | 	mov	arg01, fp
1c764     1D 15 02 F6 | 	mov	arg02, local11
1c768     0C 16 06 F6 | 	mov	arg03, #12
1c76c     0B 00 00 FF 
1c770     CC E4 05 F1 | 	add	objptr, ##5836
1c774     2C 81 B0 FD | 	call	#_psram_spin2_read1
1c778     0B 00 00 FF 
1c77c     CC E4 85 F1 | 	sub	objptr, ##5836
1c780     6C 01 90 FD | 	jmp	#LR__2381
1c784                 | LR__2370
1c784     08 4E 05 F1 | 	add	fp, #8
1c788     A7 38 68 FC | 	wrlong	#28, fp
1c78c     08 4E 85 F1 | 	sub	fp, #8
1c790     1D 13 02 F6 | 	mov	arg01, local11
1c794     FC 35 B0 FD | 	call	#_pspeek
1c798     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c79c     A7 FA 61 FC | 	wrlong	result1, fp
1c7a0     80 FA 15 F2 | 	cmp	result1, #128 wc
1c7a4     00 27 66 36 |  if_ae	neg	local01, #256
1c7a8     FD 3C 02 36 |  if_ae	mov	local12, result1
1c7ac     1E 27 42 35 |  if_ae	or	local01, local12
1c7b0     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c7b4     38 01 90 FD | 	jmp	#LR__2381
1c7b8                 | LR__2371
1c7b8     08 4E 05 F1 | 	add	fp, #8
1c7bc     A7 3A 68 FC | 	wrlong	#29, fp
1c7c0     08 4E 85 F1 | 	sub	fp, #8
1c7c4     1D 13 02 F6 | 	mov	arg01, local11
1c7c8     C8 35 B0 FD | 	call	#_pspeek
1c7cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c7d0     A7 FA 61 FC | 	wrlong	result1, fp
1c7d4     18 01 90 FD | 	jmp	#LR__2381
1c7d8                 | LR__2372
1c7d8     08 4E 05 F1 | 	add	fp, #8
1c7dc     A7 38 68 FC | 	wrlong	#28, fp
1c7e0     08 4E 85 F1 | 	sub	fp, #8
1c7e4     1D 13 02 F6 | 	mov	arg01, local11
1c7e8     F0 35 B0 FD | 	call	#_pslpeek
1c7ec     FD FA 31 F9 | 	getword	result1, result1, #0
1c7f0     A7 FA 61 FC | 	wrlong	result1, fp
1c7f4     40 00 00 FF 
1c7f8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1c7fc     FF 7F 00 3F 
1c800     00 27 06 36 |  if_ae	mov	local01, ##16776960
1c804     FD 3C 02 36 |  if_ae	mov	local12, result1
1c808     1E 27 42 35 |  if_ae	or	local01, local12
1c80c     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c810     DC 00 90 FD | 	jmp	#LR__2381
1c814                 | LR__2373
1c814     08 4E 05 F1 | 	add	fp, #8
1c818     A7 3A 68 FC | 	wrlong	#29, fp
1c81c     08 4E 85 F1 | 	sub	fp, #8
1c820     1D 13 02 F6 | 	mov	arg01, local11
1c824     B4 35 B0 FD | 	call	#_pslpeek
1c828     FD FA 31 F9 | 	getword	result1, result1, #0
1c82c     A7 FA 61 FC | 	wrlong	result1, fp
1c830     BC 00 90 FD | 	jmp	#LR__2381
1c834                 | LR__2374
1c834     08 4E 05 F1 | 	add	fp, #8
1c838     A7 38 68 FC | 	wrlong	#28, fp
1c83c     08 4E 85 F1 | 	sub	fp, #8
1c840     1D 13 02 F6 | 	mov	arg01, local11
1c844     94 35 B0 FD | 	call	#_pslpeek
1c848     A7 FA 61 FC | 	wrlong	result1, fp
1c84c     A0 00 90 FD | 	jmp	#LR__2381
1c850                 | LR__2375
1c850     08 4E 05 F1 | 	add	fp, #8
1c854     A7 3A 68 FC | 	wrlong	#29, fp
1c858     08 4E 85 F1 | 	sub	fp, #8
1c85c     1D 13 02 F6 | 	mov	arg01, local11
1c860     78 35 B0 FD | 	call	#_pslpeek
1c864     A7 FA 61 FC | 	wrlong	result1, fp
1c868     84 00 90 FD | 	jmp	#LR__2381
1c86c                 | LR__2376
1c86c     08 4E 05 F1 | 	add	fp, #8
1c870     A7 FE 69 FC | 	wrlong	#255, fp
1c874     08 4E 85 F1 | 	sub	fp, #8
1c878     A7 60 68 FC | 	wrlong	#48, fp
1c87c     70 00 90 FD | 	jmp	#LR__2381
1c880                 | LR__2377
1c880     08 4E 05 F1 | 	add	fp, #8
1c884     A7 FE 69 FC | 	wrlong	#255, fp
1c888     08 4E 85 F1 | 	sub	fp, #8
1c88c     A7 60 68 FC | 	wrlong	#48, fp
1c890     5C 00 90 FD | 	jmp	#LR__2381
1c894                 | LR__2378
1c894     08 4E 05 F1 | 	add	fp, #8
1c898     A7 3C 68 FC | 	wrlong	#30, fp
1c89c     08 4E 85 F1 | 	sub	fp, #8
1c8a0     1D 13 02 F6 | 	mov	arg01, local11
1c8a4     34 35 B0 FD | 	call	#_pslpeek
1c8a8     A7 FA 61 FC | 	wrlong	result1, fp
1c8ac     40 00 90 FD | 	jmp	#LR__2381
1c8b0                 | LR__2379
1c8b0     08 4E 05 F1 | 	add	fp, #8
1c8b4     A7 FE 69 FC | 	wrlong	#255, fp
1c8b8     08 4E 85 F1 | 	sub	fp, #8
1c8bc     A7 60 68 FC | 	wrlong	#48, fp
1c8c0     2C 00 90 FD | 	jmp	#LR__2381
1c8c4                 | LR__2380
1c8c4     08 4E 05 F1 | 	add	fp, #8
1c8c8     A7 3E 68 FC | 	wrlong	#31, fp
1c8cc     08 4E 85 F1 | 	sub	fp, #8
1c8d0     1D 13 02 F6 | 	mov	arg01, local11
1c8d4     04 35 B0 FD | 	call	#_pslpeek
1c8d8     A7 FA 61 FC | 	wrlong	result1, fp
1c8dc     00 04 00 FF 
1c8e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1c8e4     08 4E 05 31 |  if_ae	add	fp, #8
1c8e8     A7 56 68 3C |  if_ae	wrlong	#43, fp
1c8ec     08 4E 85 31 |  if_ae	sub	fp, #8
1c8f0                 | LR__2381
1c8f0     A7 12 02 F6 | 	mov	arg01, fp
1c8f4     D8 0C BF FD | 	call	#_push
1c8f8                 | LR__2382
1c8f8     A7 F0 03 F6 | 	mov	ptra, fp
1c8fc     B2 00 A0 FD | 	call	#popregs_
1c900                 | _do_getvar_ret
1c900     2D 00 64 FD | 	ret
1c904                 | 
1c904                 | ' 
1c904                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c904                 | ' 
1c904                 | ' sub do_getaddr
1c904                 | _do_getaddr
1c904     09 4A 05 F6 | 	mov	COUNT_, #9
1c908     A8 00 A0 FD | 	call	#pushregs_
1c90c     38 F0 07 F1 | 	add	ptra, #56
1c910                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c910                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c910     4A 00 00 FF 
1c914     A0 E4 05 F1 | 	add	objptr, ##38048
1c918     F2 12 02 FB | 	rdlong	arg01, objptr
1c91c     09 FD 01 F6 | 	mov	result2, arg01
1c920     01 FC 65 F0 | 	shl	result2, #1
1c924     09 FD 01 F1 | 	add	result2, arg01
1c928     02 FC 65 F0 | 	shl	result2, #2
1c92c     03 00 00 FF 
1c930     04 E4 85 F1 | 	sub	objptr, ##1540
1c934     F2 FC 01 F1 | 	add	result2, objptr
1c938     04 FC 05 F1 | 	add	result2, #4
1c93c     FE FC 09 FB | 	rdlong	result2, result2 wz
1c940     47 00 00 FF 
1c944     9C E4 85 F1 | 	sub	objptr, ##36508
1c948     10 01 90 5D |  if_ne	jmp	#LR__2390
1c94c     4A 00 00 FF 
1c950     A0 E4 05 F1 | 	add	objptr, ##38048
1c954     F2 12 02 FB | 	rdlong	arg01, objptr
1c958     09 FD 01 F6 | 	mov	result2, arg01
1c95c     01 FC 65 F0 | 	shl	result2, #1
1c960     09 FD 01 F1 | 	add	result2, arg01
1c964     02 FC 65 F0 | 	shl	result2, #2
1c968     03 00 00 FF 
1c96c     04 E4 85 F1 | 	sub	objptr, ##1540
1c970     F2 FC 01 F1 | 	add	result2, objptr
1c974     FE 12 02 FB | 	rdlong	arg01, result2
1c978     04 12 66 F0 | 	shl	arg01, #4
1c97c     32 00 00 FF 
1c980     84 E4 85 F1 | 	sub	objptr, ##25732
1c984     F2 12 02 F1 | 	add	arg01, objptr
1c988     0C 12 06 F1 | 	add	arg01, #12
1c98c     09 13 02 FB | 	rdlong	arg01, arg01
1c990     08 4E 05 F1 | 	add	fp, #8
1c994     A7 12 62 FC | 	wrlong	arg01, fp
1c998                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c998                 | '    if t1.result_type>=array_no_type then goto 2200
1c998     08 4E 85 F1 | 	sub	fp, #8
1c99c     00 13 16 F2 | 	cmp	arg01, #256 wc
1c9a0     15 00 00 FF 
1c9a4     18 E4 85 F1 | 	sub	objptr, ##10776
1c9a8     B0 00 90 3D |  if_ae	jmp	#LR__2391
1c9ac     4A 00 00 FF 
1c9b0     A0 E4 05 F1 | 	add	objptr, ##38048
1c9b4     F2 12 02 FB | 	rdlong	arg01, objptr
1c9b8     09 FF 01 F6 | 	mov	result3, arg01
1c9bc     01 FE 65 F0 | 	shl	result3, #1
1c9c0     09 FF 01 F1 | 	add	result3, arg01
1c9c4     02 FE 65 F0 | 	shl	result3, #2
1c9c8     03 00 00 FF 
1c9cc     04 E4 85 F1 | 	sub	objptr, ##1540
1c9d0     F2 FE 01 F1 | 	add	result3, objptr
1c9d4     FF FA 01 FB | 	rdlong	result1, result3
1c9d8     04 FA 65 F0 | 	shl	result1, #4
1c9dc     32 00 00 FF 
1c9e0     84 E4 85 F1 | 	sub	objptr, ##25732
1c9e4     F2 FA 01 F1 | 	add	result1, objptr
1c9e8     04 FA 05 F1 | 	add	result1, #4
1c9ec     A7 FA 61 FC | 	wrlong	result1, fp
1c9f0     35 00 00 FF 
1c9f4     88 E4 05 F1 | 	add	objptr, ##27272
1c9f8     F2 FE 01 FB | 	rdlong	result3, objptr
1c9fc     FF 12 02 F6 | 	mov	arg01, result3
1ca00     01 12 66 F0 | 	shl	arg01, #1
1ca04     FF 12 02 F1 | 	add	arg01, result3
1ca08     02 12 66 F0 | 	shl	arg01, #2
1ca0c     03 00 00 FF 
1ca10     04 E4 85 F1 | 	sub	objptr, ##1540
1ca14     F2 12 02 F1 | 	add	arg01, objptr
1ca18     09 13 02 FB | 	rdlong	arg01, arg01
1ca1c     04 12 66 F0 | 	shl	arg01, #4
1ca20     32 00 00 FF 
1ca24     84 E4 85 F1 | 	sub	objptr, ##25732
1ca28     F2 12 02 F1 | 	add	arg01, objptr
1ca2c     0C 12 06 F1 | 	add	arg01, #12
1ca30     09 13 02 FB | 	rdlong	arg01, arg01
1ca34     04 4E 05 F1 | 	add	fp, #4
1ca38     A7 12 62 FC | 	wrlong	arg01, fp
1ca3c     04 4E 05 F1 | 	add	fp, #4
1ca40     A7 3A 68 FC | 	wrlong	#29, fp
1ca44     08 4E 85 F1 | 	sub	fp, #8
1ca48     A7 12 02 F6 | 	mov	arg01, fp
1ca4c     15 00 00 FF 
1ca50     18 E4 85 F1 | 	sub	objptr, ##10776
1ca54     78 0B BF FD | 	call	#_push
1ca58                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1ca58                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1ca58                 | '   t1.result_type=result_uint
1ca58                 | '   push t1 : return
1ca58     24 02 90 FD | 	jmp	#LR__2400
1ca5c                 | LR__2390
1ca5c                 | LR__2391
1ca5c     4A 00 00 FF 
1ca60     A0 E4 05 F1 | 	add	objptr, ##38048
1ca64     F2 26 02 FB | 	rdlong	local01, objptr
1ca68     13 FD 01 F6 | 	mov	result2, local01
1ca6c     01 FC 65 F0 | 	shl	result2, #1
1ca70     13 FD 01 F1 | 	add	result2, local01
1ca74     02 FC 65 F0 | 	shl	result2, #2
1ca78     03 00 00 FF 
1ca7c     04 E4 85 F1 | 	sub	objptr, ##1540
1ca80     F2 FC 01 F1 | 	add	result2, objptr
1ca84     FE FC 01 FB | 	rdlong	result2, result2
1ca88     04 FC 65 F0 | 	shl	result2, #4
1ca8c     32 00 00 FF 
1ca90     84 E4 85 F1 | 	sub	objptr, ##25732
1ca94     F2 FC 01 F1 | 	add	result2, objptr
1ca98     04 FC 05 F1 | 	add	result2, #4
1ca9c     FE 28 02 FB | 	rdlong	local02, result2
1caa0     13 13 02 F6 | 	mov	arg01, local01
1caa4     01 12 66 F0 | 	shl	arg01, #1
1caa8     13 13 02 F1 | 	add	arg01, local01
1caac     02 12 66 F0 | 	shl	arg01, #2
1cab0     32 00 00 FF 
1cab4     84 E4 05 F1 | 	add	objptr, ##25732
1cab8     F2 12 02 F1 | 	add	arg01, objptr
1cabc     09 13 02 FB | 	rdlong	arg01, arg01
1cac0     04 12 66 F0 | 	shl	arg01, #4
1cac4     32 00 00 FF 
1cac8     84 E4 85 F1 | 	sub	objptr, ##25732
1cacc     F2 12 02 F1 | 	add	arg01, objptr
1cad0     0C 12 06 F1 | 	add	arg01, #12
1cad4     09 13 02 FB | 	rdlong	arg01, arg01
1cad8     04 4E 05 F1 | 	add	fp, #4
1cadc     A7 12 62 FC | 	wrlong	arg01, fp
1cae0     04 4E 85 F1 | 	sub	fp, #4
1cae4     14 13 02 F6 | 	mov	arg01, local02
1cae8     15 00 00 FF 
1caec     18 E4 85 F1 | 	sub	objptr, ##10776
1caf0     E8 32 B0 FD | 	call	#_pslpeek
1caf4     4A 00 00 FF 
1caf8     A0 E4 05 F1 | 	add	objptr, ##38048
1cafc     F2 26 02 FB | 	rdlong	local01, objptr
1cb00     13 13 02 F6 | 	mov	arg01, local01
1cb04     01 12 66 F0 | 	shl	arg01, #1
1cb08     13 13 02 F1 | 	add	arg01, local01
1cb0c     02 12 66 F0 | 	shl	arg01, #2
1cb10     03 00 00 FF 
1cb14     04 E4 85 F1 | 	sub	objptr, ##1540
1cb18     F2 12 02 F1 | 	add	arg01, objptr
1cb1c     04 12 06 F1 | 	add	arg01, #4
1cb20     09 2B 02 FB | 	rdlong	local03, arg01
1cb24     14 13 02 F6 | 	mov	arg01, local02
1cb28     02 12 06 F1 | 	add	arg01, #2
1cb2c     47 00 00 FF 
1cb30     9C E4 85 F1 | 	sub	objptr, ##36508
1cb34     5C 32 B0 FD | 	call	#_pspeek
1cb38     FD 2C E2 F8 | 	getbyte	local04, result1, #0
1cb3c     14 13 02 F6 | 	mov	arg01, local02
1cb40     04 12 06 F1 | 	add	arg01, #4
1cb44     94 32 B0 FD | 	call	#_pslpeek
1cb48     FD 2E 02 F6 | 	mov	local05, result1
1cb4c     14 13 02 F6 | 	mov	arg01, local02
1cb50     08 12 06 F1 | 	add	arg01, #8
1cb54     84 32 B0 FD | 	call	#_pslpeek
1cb58     FD 30 02 F6 | 	mov	local06, result1
1cb5c     14 13 02 F6 | 	mov	arg01, local02
1cb60     0C 12 06 F1 | 	add	arg01, #12
1cb64     74 32 B0 FD | 	call	#_pslpeek
1cb68                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1cb68                 | ' esize=pspeek(arrptr+2)
1cb68                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1cb68                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1cb68                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1cb68                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1cb68     03 2A 16 F2 | 	cmp	local03, #3 wc
1cb6c     30 00 90 CD |  if_b	jmp	#LR__2392
1cb70     CC 09 BF FD | 	call	#_pop
1cb74     FF 26 02 F6 | 	mov	local01, result3
1cb78     A7 FA 61 FC | 	wrlong	result1, fp
1cb7c     04 4E 05 F1 | 	add	fp, #4
1cb80     A7 FC 61 FC | 	wrlong	result2, fp
1cb84     04 4E 05 F1 | 	add	fp, #4
1cb88     A7 26 62 FC | 	wrlong	local01, fp
1cb8c     08 4E 85 F1 | 	sub	fp, #8
1cb90     A7 12 02 F6 | 	mov	arg01, fp
1cb94     84 0B BF FD | 	call	#_converttoint
1cb98     FD 32 02 F6 | 	mov	local07, result1
1cb9c     04 00 90 FD | 	jmp	#LR__2393
1cba0                 | LR__2392
1cba0     00 32 06 F6 | 	mov	local07, #0
1cba4                 | LR__2393
1cba4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1cba4     02 2A 16 F2 | 	cmp	local03, #2 wc
1cba8     30 00 90 CD |  if_b	jmp	#LR__2394
1cbac     90 09 BF FD | 	call	#_pop
1cbb0     FF 26 02 F6 | 	mov	local01, result3
1cbb4     A7 FA 61 FC | 	wrlong	result1, fp
1cbb8     04 4E 05 F1 | 	add	fp, #4
1cbbc     A7 FC 61 FC | 	wrlong	result2, fp
1cbc0     04 4E 05 F1 | 	add	fp, #4
1cbc4     A7 26 62 FC | 	wrlong	local01, fp
1cbc8     08 4E 85 F1 | 	sub	fp, #8
1cbcc     A7 12 02 F6 | 	mov	arg01, fp
1cbd0     48 0B BF FD | 	call	#_converttoint
1cbd4     FD 34 02 F6 | 	mov	local08, result1
1cbd8     04 00 90 FD | 	jmp	#LR__2395
1cbdc                 | LR__2394
1cbdc     00 34 06 F6 | 	mov	local08, #0
1cbe0                 | LR__2395
1cbe0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1cbe0     01 2A 16 F2 | 	cmp	local03, #1 wc
1cbe4     30 00 90 CD |  if_b	jmp	#LR__2396
1cbe8     54 09 BF FD | 	call	#_pop
1cbec     FF 26 02 F6 | 	mov	local01, result3
1cbf0     A7 FA 61 FC | 	wrlong	result1, fp
1cbf4     04 4E 05 F1 | 	add	fp, #4
1cbf8     A7 FC 61 FC | 	wrlong	result2, fp
1cbfc     04 4E 05 F1 | 	add	fp, #4
1cc00     A7 26 62 FC | 	wrlong	local01, fp
1cc04     08 4E 85 F1 | 	sub	fp, #8
1cc08     A7 12 02 F6 | 	mov	arg01, fp
1cc0c     0C 0B BF FD | 	call	#_converttoint
1cc10     FD 36 02 F6 | 	mov	local09, result1
1cc14     04 00 90 FD | 	jmp	#LR__2397
1cc18                 | LR__2396
1cc18     00 36 06 F6 | 	mov	local09, #0
1cc1c                 | LR__2397
1cc1c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1cc1c                 | ' if numpar>0 then
1cc1c     01 2A 16 F2 | 	cmp	local03, #1 wc
1cc20     44 00 90 CD |  if_b	jmp	#LR__2398
1cc24     17 35 02 FD | 	qmul	local08, local05
1cc28     10 28 06 F1 | 	add	local02, #16
1cc2c     18 34 62 FD | 	getqx	local08
1cc30     17 33 02 FD | 	qmul	local07, local05
1cc34     1A 37 02 F1 | 	add	local09, local08
1cc38     18 34 62 FD | 	getqx	local08
1cc3c     18 35 02 FD | 	qmul	local08, local06
1cc40     18 34 62 FD | 	getqx	local08
1cc44     1A 37 02 F1 | 	add	local09, local08
1cc48     16 37 02 FD | 	qmul	local09, local04
1cc4c     08 4E 05 F1 | 	add	fp, #8
1cc50     A7 3A 68 FC | 	wrlong	#29, fp
1cc54     08 4E 85 F1 | 	sub	fp, #8
1cc58     18 26 62 FD | 	getqx	local01
1cc5c     13 29 02 F1 | 	add	local02, local01
1cc60     A7 28 62 FC | 	wrlong	local02, fp
1cc64     10 00 90 FD | 	jmp	#LR__2399
1cc68                 | LR__2398
1cc68     08 4E 05 F1 | 	add	fp, #8
1cc6c     A7 3A 68 FC | 	wrlong	#29, fp
1cc70     08 4E 85 F1 | 	sub	fp, #8
1cc74     A7 28 62 FC | 	wrlong	local02, fp
1cc78                 | LR__2399
1cc78     A7 12 02 F6 | 	mov	arg01, fp
1cc7c     50 09 BF FD | 	call	#_push
1cc80                 | LR__2400
1cc80     A7 F0 03 F6 | 	mov	ptra, fp
1cc84     B2 00 A0 FD | 	call	#popregs_
1cc88                 | _do_getaddr_ret
1cc88     2D 00 64 FD | 	ret
1cc8c                 | 
1cc8c                 | ' 
1cc8c                 | ' 
1cc8c                 | ' 
1cc8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cc8c                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1cc8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cc8c                 | ' 
1cc8c                 | ' '--------------------------------- AND 
1cc8c                 | ' 
1cc8c                 | ' sub do_and 
1cc8c                 | _do_and
1cc8c     05 4A 05 F6 | 	mov	COUNT_, #5
1cc90     A8 00 A0 FD | 	call	#pushregs_
1cc94     18 F0 07 F1 | 	add	ptra, #24
1cc98     A4 08 BF FD | 	call	#_pop
1cc9c     FD 26 02 F6 | 	mov	local01, result1
1cca0     FE 12 02 F6 | 	mov	arg01, result2
1cca4     FF 2C 02 F6 | 	mov	local04, result3
1cca8     09 29 02 F6 | 	mov	local02, arg01
1ccac     16 2B 02 F6 | 	mov	local03, local04
1ccb0     8C 08 BF FD | 	call	#_pop
1ccb4     FF 2E 02 F6 | 	mov	local05, result3
1ccb8     A7 FA 61 FC | 	wrlong	result1, fp
1ccbc     04 4E 05 F1 | 	add	fp, #4
1ccc0     A7 FC 61 FC | 	wrlong	result2, fp
1ccc4     04 4E 05 F1 | 	add	fp, #4
1ccc8     A7 2E 62 FC | 	wrlong	local05, fp
1cccc                 | ' 
1cccc                 | ' t2=pop()
1cccc                 | ' t1=pop()
1cccc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1cccc     08 4E 85 F1 | 	sub	fp, #8
1ccd0     1C 2E 0E F2 | 	cmp	local05, #28 wz
1ccd4     A7 2E 02 AB |  if_e	rdlong	local05, fp
1ccd8     A7 2E 62 AC |  if_e	wrlong	local05, fp
1ccdc     08 4E 05 A1 |  if_e	add	fp, #8
1cce0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1cce4     08 4E 85 A1 |  if_e	sub	fp, #8
1cce8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1cce8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ccec     1D 2A 06 A6 |  if_e	mov	local03, #29
1ccf0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1ccf0     08 4E 05 F1 | 	add	fp, #8
1ccf4     A7 2E 02 FB | 	rdlong	local05, fp
1ccf8     08 4E 85 F1 | 	sub	fp, #8
1ccfc     1F 2E 0E F2 | 	cmp	local05, #31 wz
1cd00     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1cd04     08 4E 05 51 |  if_ne	add	fp, #8
1cd08     A7 2C 02 5B |  if_ne	rdlong	local04, fp
1cd0c     08 4E 85 51 |  if_ne	sub	fp, #8
1cd10     1E 2C 0E 52 |  if_ne	cmp	local04, #30 wz
1cd14     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1cd18     A7 0C 68 AC |  if_e	wrlong	#6, fp
1cd1c     08 4E 05 A1 |  if_e	add	fp, #8
1cd20     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cd24     08 4E 85 A1 |  if_e	sub	fp, #8
1cd28     A7 2E 02 5B |  if_ne	rdlong	local05, fp
1cd2c     13 2F 02 55 |  if_ne	and	local05, local01
1cd30     A7 2E 62 5C |  if_ne	wrlong	local05, fp
1cd34     A7 12 02 F6 | 	mov	arg01, fp
1cd38     94 08 BF FD | 	call	#_push
1cd3c     A7 F0 03 F6 | 	mov	ptra, fp
1cd40     B2 00 A0 FD | 	call	#popregs_
1cd44                 | _do_and_ret
1cd44     2D 00 64 FD | 	ret
1cd48                 | 
1cd48                 | ' 
1cd48                 | ' '--------------------------------- DIV (integer divide)
1cd48                 | ' 
1cd48                 | ' sub do_div 
1cd48                 | _do_div
1cd48     04 4A 05 F6 | 	mov	COUNT_, #4
1cd4c     A8 00 A0 FD | 	call	#pushregs_
1cd50     18 F0 07 F1 | 	add	ptra, #24
1cd54     E8 07 BF FD | 	call	#_pop
1cd58     FD 26 02 F6 | 	mov	local01, result1
1cd5c     FE 90 02 F6 | 	mov	muldivb_, result2
1cd60     FF 8E 02 F6 | 	mov	muldiva_, result3
1cd64     48 29 02 F6 | 	mov	local02, muldivb_
1cd68     47 2B 02 F6 | 	mov	local03, muldiva_
1cd6c     D0 07 BF FD | 	call	#_pop
1cd70     A7 FA 61 FC | 	wrlong	result1, fp
1cd74     04 4E 05 F1 | 	add	fp, #4
1cd78     A7 FC 61 FC | 	wrlong	result2, fp
1cd7c     04 4E 05 F1 | 	add	fp, #4
1cd80     A7 FE 61 FC | 	wrlong	result3, fp
1cd84                 | ' 
1cd84                 | ' t2=pop()
1cd84                 | ' t1=pop()
1cd84                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1cd84     08 4E 85 F1 | 	sub	fp, #8
1cd88     1F FE 0D F2 | 	cmp	result3, #31 wz
1cd8c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1cd90     A7 14 68 AC |  if_e	wrlong	#10, fp
1cd94     08 4E 05 A1 |  if_e	add	fp, #8
1cd98     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cd9c     08 4E 85 A1 |  if_e	sub	fp, #8
1cda0     10 01 90 AD |  if_e	jmp	#LR__2414
1cda4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1cda4     08 4E 05 F1 | 	add	fp, #8
1cda8     A7 90 02 FB | 	rdlong	muldivb_, fp
1cdac     08 4E 85 F1 | 	sub	fp, #8
1cdb0     1E 90 0E F2 | 	cmp	muldivb_, #30 wz
1cdb4     1C 00 90 5D |  if_ne	jmp	#LR__2410
1cdb8     08 4E 05 F1 | 	add	fp, #8
1cdbc     A7 38 68 FC | 	wrlong	#28, fp
1cdc0     08 4E 85 F1 | 	sub	fp, #8
1cdc4     A7 12 02 FB | 	rdlong	arg01, fp
1cdc8     00 14 06 F6 | 	mov	arg02, #0
1cdcc     30 A6 B0 FD | 	call	#__system___float_tointeger
1cdd0     A7 FA 61 FC | 	wrlong	result1, fp
1cdd4                 | LR__2410
1cdd4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1cdd4     1E 2A 0E F2 | 	cmp	local03, #30 wz
1cdd8     14 00 90 5D |  if_ne	jmp	#LR__2411
1cddc     1C 2A 06 F6 | 	mov	local03, #28
1cde0     13 13 02 F6 | 	mov	arg01, local01
1cde4     00 14 06 F6 | 	mov	arg02, #0
1cde8     14 A6 B0 FD | 	call	#__system___float_tointeger
1cdec     FD 26 02 F6 | 	mov	local01, result1
1cdf0                 | LR__2411
1cdf0     08 4E 05 F1 | 	add	fp, #8
1cdf4     A7 2C 02 FB | 	rdlong	local04, fp
1cdf8     08 4E 85 F1 | 	sub	fp, #8
1cdfc     1D 2C 0E F2 | 	cmp	local04, #29 wz
1ce00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ce04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce08     13 2D 12 AD |  if_e	qdiv	local04, local01
1ce0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1ce0c     18 2C 62 AD |  if_e	getqx	local04
1ce10     A7 2C 62 AC |  if_e	wrlong	local04, fp
1ce14     9C 00 90 AD |  if_e	jmp	#LR__2414
1ce18     08 4E 05 F1 | 	add	fp, #8
1ce1c     A7 2C 02 FB | 	rdlong	local04, fp
1ce20     08 4E 85 F1 | 	sub	fp, #8
1ce24     1D 2C 0E F2 | 	cmp	local04, #29 wz
1ce28     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ce2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce30     13 2D 12 AD |  if_e	qdiv	local04, local01
1ce34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1ce34     18 2C 62 AD |  if_e	getqx	local04
1ce38     A7 2C 62 AC |  if_e	wrlong	local04, fp
1ce3c     08 4E 05 A1 |  if_e	add	fp, #8
1ce40     A7 38 68 AC |  if_e	wrlong	#28, fp
1ce44     08 4E 85 A1 |  if_e	sub	fp, #8
1ce48     68 00 90 AD |  if_e	jmp	#LR__2414
1ce4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1ce4c     08 4E 05 F1 | 	add	fp, #8
1ce50     A7 2C 02 FB | 	rdlong	local04, fp
1ce54     08 4E 85 F1 | 	sub	fp, #8
1ce58     1C 2C 0E F2 | 	cmp	local04, #28 wz
1ce5c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ce60     14 00 90 5D |  if_ne	jmp	#LR__2412
1ce64     A7 8E 02 FB | 	rdlong	muldiva_, fp
1ce68     13 91 02 F6 | 	mov	muldivb_, local01
1ce6c     BA 00 A0 FD | 	call	#divide_
1ce70     A7 90 62 FC | 	wrlong	muldivb_, fp
1ce74     3C 00 90 FD | 	jmp	#LR__2414
1ce78                 | LR__2412
1ce78                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1ce78     08 4E 05 F1 | 	add	fp, #8
1ce7c     A7 2C 02 FB | 	rdlong	local04, fp
1ce80     08 4E 85 F1 | 	sub	fp, #8
1ce84     1C 2C 0E F2 | 	cmp	local04, #28 wz
1ce88     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ce8c     14 00 90 5D |  if_ne	jmp	#LR__2413
1ce90     A7 8E 02 FB | 	rdlong	muldiva_, fp
1ce94     13 91 02 F6 | 	mov	muldivb_, local01
1ce98     BA 00 A0 FD | 	call	#divide_
1ce9c     A7 90 62 FC | 	wrlong	muldivb_, fp
1cea0     10 00 90 FD | 	jmp	#LR__2414
1cea4                 | LR__2413
1cea4     A7 16 68 FC | 	wrlong	#11, fp
1cea8     08 4E 05 F1 | 	add	fp, #8
1ceac     A7 FE 69 FC | 	wrlong	#255, fp
1ceb0     08 4E 85 F1 | 	sub	fp, #8
1ceb4                 | LR__2414
1ceb4     A7 12 02 F6 | 	mov	arg01, fp
1ceb8     14 07 BF FD | 	call	#_push
1cebc     A7 F0 03 F6 | 	mov	ptra, fp
1cec0     B2 00 A0 FD | 	call	#popregs_
1cec4                 | _do_div_ret
1cec4     2D 00 64 FD | 	ret
1cec8                 | 
1cec8                 | ' 
1cec8                 | ' '--------------------------------- equal (=)
1cec8                 | ' 
1cec8                 | ' sub do_eq
1cec8                 | _do_eq
1cec8     07 4A 05 F6 | 	mov	COUNT_, #7
1cecc     A8 00 A0 FD | 	call	#pushregs_
1ced0     18 F0 07 F1 | 	add	ptra, #24
1ced4     68 06 BF FD | 	call	#_pop
1ced8     FD 26 02 F6 | 	mov	local01, result1
1cedc     FE 2C 02 F6 | 	mov	local04, result2
1cee0     FF 2E 02 F6 | 	mov	local05, result3
1cee4     16 29 02 F6 | 	mov	local02, local04
1cee8     17 2B 02 F6 | 	mov	local03, local05
1ceec     50 06 BF FD | 	call	#_pop
1cef0     FF 2E 02 F6 | 	mov	local05, result3
1cef4     A7 FA 61 FC | 	wrlong	result1, fp
1cef8     04 4E 05 F1 | 	add	fp, #4
1cefc     A7 FC 61 FC | 	wrlong	result2, fp
1cf00     04 4E 05 F1 | 	add	fp, #4
1cf04     A7 2E 62 FC | 	wrlong	local05, fp
1cf08                 | ' 
1cf08                 | ' t2=pop()
1cf08                 | ' t1=pop()
1cf08                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1cf08     08 4E 85 F1 | 	sub	fp, #8
1cf0c     1F 2E 0E F2 | 	cmp	local05, #31 wz
1cf10     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cf14     20 00 90 5D |  if_ne	jmp	#LR__2420
1cf18     00 30 06 F6 | 	mov	local06, #0
1cf1c     A7 12 02 FB | 	rdlong	arg01, fp
1cf20     13 15 02 F6 | 	mov	arg02, local01
1cf24     A8 81 B0 FD | 	call	#__system___string_cmp
1cf28     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf2c     00 30 26 A6 |  if_e	not	local06, #0
1cf30     A7 30 62 FC | 	wrlong	local06, fp
1cf34     04 03 90 FD | 	jmp	#LR__2433
1cf38                 | LR__2420
1cf38                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1cf38     08 4E 05 F1 | 	add	fp, #8
1cf3c     A7 30 02 FB | 	rdlong	local06, fp
1cf40     08 4E 85 F1 | 	sub	fp, #8
1cf44     1E 30 0E F2 | 	cmp	local06, #30 wz
1cf48     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cf4c     24 00 90 5D |  if_ne	jmp	#LR__2421
1cf50     00 30 06 F6 | 	mov	local06, #0
1cf54     A7 12 02 FB | 	rdlong	arg01, fp
1cf58     13 15 02 F6 | 	mov	arg02, local01
1cf5c     01 16 06 F6 | 	mov	arg03, #1
1cf60     14 A4 B0 FD | 	call	#__system___float_cmp
1cf64     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf68     00 30 26 A6 |  if_e	not	local06, #0
1cf6c     A7 30 62 FC | 	wrlong	local06, fp
1cf70     C8 02 90 FD | 	jmp	#LR__2433
1cf74                 | LR__2421
1cf74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1cf74     08 4E 05 F1 | 	add	fp, #8
1cf78     A7 30 02 FB | 	rdlong	local06, fp
1cf7c     08 4E 85 F1 | 	sub	fp, #8
1cf80     1E 30 0E F2 | 	cmp	local06, #30 wz
1cf84     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cf88     3C 00 90 5D |  if_ne	jmp	#LR__2422
1cf8c     00 30 06 F6 | 	mov	local06, #0
1cf90     A7 2C 02 FB | 	rdlong	local04, fp
1cf94     13 13 52 F6 | 	abs	arg01, local01 wc
1cf98     1F 32 C6 C9 |  if_b	decod	local07, #31
1cf9c     00 32 06 36 |  if_ae	mov	local07, #0
1cfa0     D0 9B B0 FD | 	call	#__system___float_fromuns
1cfa4     19 FB 61 F5 | 	xor	result1, local07
1cfa8     FD 14 02 F6 | 	mov	arg02, result1
1cfac     16 13 02 F6 | 	mov	arg01, local04
1cfb0     01 16 06 F6 | 	mov	arg03, #1
1cfb4     C0 A3 B0 FD | 	call	#__system___float_cmp
1cfb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cfbc     00 30 26 A6 |  if_e	not	local06, #0
1cfc0     A7 30 62 FC | 	wrlong	local06, fp
1cfc4     74 02 90 FD | 	jmp	#LR__2433
1cfc8                 | LR__2422
1cfc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1cfc8     08 4E 05 F1 | 	add	fp, #8
1cfcc     A7 30 02 FB | 	rdlong	local06, fp
1cfd0     08 4E 85 F1 | 	sub	fp, #8
1cfd4     1E 30 0E F2 | 	cmp	local06, #30 wz
1cfd8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cfdc     30 00 90 5D |  if_ne	jmp	#LR__2423
1cfe0     00 30 06 F6 | 	mov	local06, #0
1cfe4     A7 2C 02 FB | 	rdlong	local04, fp
1cfe8     13 13 02 F6 | 	mov	arg01, local01
1cfec     84 9B B0 FD | 	call	#__system___float_fromuns
1cff0     FD 14 02 F6 | 	mov	arg02, result1
1cff4     16 13 02 F6 | 	mov	arg01, local04
1cff8     01 16 06 F6 | 	mov	arg03, #1
1cffc     78 A3 B0 FD | 	call	#__system___float_cmp
1d000     00 FA 0D F2 | 	cmp	result1, #0 wz
1d004     00 30 26 A6 |  if_e	not	local06, #0
1d008     A7 30 62 FC | 	wrlong	local06, fp
1d00c     2C 02 90 FD | 	jmp	#LR__2433
1d010                 | LR__2423
1d010                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1d010     08 4E 05 F1 | 	add	fp, #8
1d014     A7 30 02 FB | 	rdlong	local06, fp
1d018     08 4E 85 F1 | 	sub	fp, #8
1d01c     1C 30 0E F2 | 	cmp	local06, #28 wz
1d020     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d024     3C 00 90 5D |  if_ne	jmp	#LR__2424
1d028     00 30 06 F6 | 	mov	local06, #0
1d02c     A7 12 02 FB | 	rdlong	arg01, fp
1d030     09 13 52 F6 | 	abs	arg01, arg01 wc
1d034     1F 32 C6 C9 |  if_b	decod	local07, #31
1d038     00 32 06 36 |  if_ae	mov	local07, #0
1d03c     34 9B B0 FD | 	call	#__system___float_fromuns
1d040     19 FB 61 F5 | 	xor	result1, local07
1d044     FD 12 02 F6 | 	mov	arg01, result1
1d048     13 15 02 F6 | 	mov	arg02, local01
1d04c     01 16 06 F6 | 	mov	arg03, #1
1d050     24 A3 B0 FD | 	call	#__system___float_cmp
1d054     00 FA 0D F2 | 	cmp	result1, #0 wz
1d058     00 30 26 A6 |  if_e	not	local06, #0
1d05c     A7 30 62 FC | 	wrlong	local06, fp
1d060     D8 01 90 FD | 	jmp	#LR__2433
1d064                 | LR__2424
1d064                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1d064     08 4E 05 F1 | 	add	fp, #8
1d068     A7 30 02 FB | 	rdlong	local06, fp
1d06c     08 4E 85 F1 | 	sub	fp, #8
1d070     1C 30 0E F2 | 	cmp	local06, #28 wz
1d074     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d078     18 00 90 5D |  if_ne	jmp	#LR__2425
1d07c     00 30 06 F6 | 	mov	local06, #0
1d080     A7 2C 02 FB | 	rdlong	local04, fp
1d084     13 2D 0A F2 | 	cmp	local04, local01 wz
1d088     01 30 66 A6 |  if_e	neg	local06, #1
1d08c     A7 30 62 FC | 	wrlong	local06, fp
1d090     A8 01 90 FD | 	jmp	#LR__2433
1d094                 | LR__2425
1d094                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1d094     08 4E 05 F1 | 	add	fp, #8
1d098     A7 30 02 FB | 	rdlong	local06, fp
1d09c     08 4E 85 F1 | 	sub	fp, #8
1d0a0     1C 30 0E F2 | 	cmp	local06, #28 wz
1d0a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d0a8     18 00 90 5D |  if_ne	jmp	#LR__2426
1d0ac     00 30 06 F6 | 	mov	local06, #0
1d0b0     A7 2C 02 FB | 	rdlong	local04, fp
1d0b4     13 2D 0A F2 | 	cmp	local04, local01 wz
1d0b8     01 30 66 A6 |  if_e	neg	local06, #1
1d0bc     A7 30 62 FC | 	wrlong	local06, fp
1d0c0     78 01 90 FD | 	jmp	#LR__2433
1d0c4                 | LR__2426
1d0c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1d0c4     08 4E 05 F1 | 	add	fp, #8
1d0c8     A7 30 02 FB | 	rdlong	local06, fp
1d0cc     08 4E 85 F1 | 	sub	fp, #8
1d0d0     1D 30 0E F2 | 	cmp	local06, #29 wz
1d0d4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d0d8     2C 00 90 5D |  if_ne	jmp	#LR__2427
1d0dc     00 30 06 F6 | 	mov	local06, #0
1d0e0     A7 12 02 FB | 	rdlong	arg01, fp
1d0e4     8C 9A B0 FD | 	call	#__system___float_fromuns
1d0e8     FD 12 02 F6 | 	mov	arg01, result1
1d0ec     13 15 02 F6 | 	mov	arg02, local01
1d0f0     01 16 06 F6 | 	mov	arg03, #1
1d0f4     80 A2 B0 FD | 	call	#__system___float_cmp
1d0f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0fc     00 30 26 A6 |  if_e	not	local06, #0
1d100     A7 30 62 FC | 	wrlong	local06, fp
1d104     34 01 90 FD | 	jmp	#LR__2433
1d108                 | LR__2427
1d108                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1d108     08 4E 05 F1 | 	add	fp, #8
1d10c     A7 30 02 FB | 	rdlong	local06, fp
1d110     08 4E 85 F1 | 	sub	fp, #8
1d114     1D 30 0E F2 | 	cmp	local06, #29 wz
1d118     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d11c     18 00 90 5D |  if_ne	jmp	#LR__2428
1d120     00 30 06 F6 | 	mov	local06, #0
1d124     A7 2C 02 FB | 	rdlong	local04, fp
1d128     13 2D 0A F2 | 	cmp	local04, local01 wz
1d12c     01 30 66 A6 |  if_e	neg	local06, #1
1d130     A7 30 62 FC | 	wrlong	local06, fp
1d134     04 01 90 FD | 	jmp	#LR__2433
1d138                 | LR__2428
1d138                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1d138     08 4E 05 F1 | 	add	fp, #8
1d13c     A7 30 02 FB | 	rdlong	local06, fp
1d140     08 4E 85 F1 | 	sub	fp, #8
1d144     1D 30 0E F2 | 	cmp	local06, #29 wz
1d148     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d14c     18 00 90 5D |  if_ne	jmp	#LR__2429
1d150     00 30 06 F6 | 	mov	local06, #0
1d154     A7 2C 02 FB | 	rdlong	local04, fp
1d158     13 2D 0A F2 | 	cmp	local04, local01 wz
1d15c     01 30 66 A6 |  if_e	neg	local06, #1
1d160     A7 30 62 FC | 	wrlong	local06, fp
1d164     D4 00 90 FD | 	jmp	#LR__2433
1d168                 | LR__2429
1d168                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1d168     08 4E 05 F1 | 	add	fp, #8
1d16c     A7 30 02 FB | 	rdlong	local06, fp
1d170     08 4E 85 F1 | 	sub	fp, #8
1d174     2B 30 0E F2 | 	cmp	local06, #43 wz
1d178     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d17c     28 00 90 5D |  if_ne	jmp	#LR__2430
1d180     00 30 06 F6 | 	mov	local06, #0
1d184     A7 12 02 FB | 	rdlong	arg01, fp
1d188     24 05 BF FD | 	call	#_convertstring
1d18c     FD 12 02 F6 | 	mov	arg01, result1
1d190     13 15 02 F6 | 	mov	arg02, local01
1d194     38 7F B0 FD | 	call	#__system___string_cmp
1d198     00 FA 0D F2 | 	cmp	result1, #0 wz
1d19c     00 30 26 A6 |  if_e	not	local06, #0
1d1a0     A7 30 62 FC | 	wrlong	local06, fp
1d1a4     94 00 90 FD | 	jmp	#LR__2433
1d1a8                 | LR__2430
1d1a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1d1a8     08 4E 05 F1 | 	add	fp, #8
1d1ac     A7 30 02 FB | 	rdlong	local06, fp
1d1b0     08 4E 85 F1 | 	sub	fp, #8
1d1b4     1F 30 0E F2 | 	cmp	local06, #31 wz
1d1b8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d1bc     2C 00 90 5D |  if_ne	jmp	#LR__2431
1d1c0     00 30 06 F6 | 	mov	local06, #0
1d1c4     A7 2C 02 FB | 	rdlong	local04, fp
1d1c8     13 13 02 F6 | 	mov	arg01, local01
1d1cc     E0 04 BF FD | 	call	#_convertstring
1d1d0     FD 14 02 F6 | 	mov	arg02, result1
1d1d4     16 13 02 F6 | 	mov	arg01, local04
1d1d8     F4 7E B0 FD | 	call	#__system___string_cmp
1d1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d1e0     00 30 26 A6 |  if_e	not	local06, #0
1d1e4     A7 30 62 FC | 	wrlong	local06, fp
1d1e8     50 00 90 FD | 	jmp	#LR__2433
1d1ec                 | LR__2431
1d1ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1d1ec     08 4E 05 F1 | 	add	fp, #8
1d1f0     A7 30 02 FB | 	rdlong	local06, fp
1d1f4     08 4E 85 F1 | 	sub	fp, #8
1d1f8     2B 30 0E F2 | 	cmp	local06, #43 wz
1d1fc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d200     34 00 90 5D |  if_ne	jmp	#LR__2432
1d204     00 30 06 F6 | 	mov	local06, #0
1d208     A7 12 02 FB | 	rdlong	arg01, fp
1d20c     A0 04 BF FD | 	call	#_convertstring
1d210     FD 2C 02 F6 | 	mov	local04, result1
1d214     13 13 02 F6 | 	mov	arg01, local01
1d218     94 04 BF FD | 	call	#_convertstring
1d21c     FD 14 02 F6 | 	mov	arg02, result1
1d220     16 13 02 F6 | 	mov	arg01, local04
1d224     A8 7E B0 FD | 	call	#__system___string_cmp
1d228     00 FA 0D F2 | 	cmp	result1, #0 wz
1d22c     00 30 26 A6 |  if_e	not	local06, #0
1d230     A7 30 62 FC | 	wrlong	local06, fp
1d234     04 00 90 FD | 	jmp	#LR__2433
1d238                 | LR__2432
1d238     A7 00 68 FC | 	wrlong	#0, fp
1d23c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d23c                 | LR__2433
1d23c     08 4E 05 F1 | 	add	fp, #8
1d240     A7 38 68 FC | 	wrlong	#28, fp
1d244     08 4E 85 F1 | 	sub	fp, #8
1d248     A7 12 02 F6 | 	mov	arg01, fp
1d24c     80 03 BF FD | 	call	#_push
1d250     A7 F0 03 F6 | 	mov	ptra, fp
1d254     B2 00 A0 FD | 	call	#popregs_
1d258                 | _do_eq_ret
1d258     2D 00 64 FD | 	ret
1d25c                 | 
1d25c                 | ' 
1d25c                 | ' '--------------------------------- fdiv (/) - float divide
1d25c                 | ' 
1d25c                 | ' sub do_fdiv 
1d25c                 | _do_fdiv
1d25c     04 4A 05 F6 | 	mov	COUNT_, #4
1d260     A8 00 A0 FD | 	call	#pushregs_
1d264     18 F0 07 F1 | 	add	ptra, #24
1d268     D4 02 BF FD | 	call	#_pop
1d26c     FD 26 02 F6 | 	mov	local01, result1
1d270     FE 14 02 F6 | 	mov	arg02, result2
1d274     FF 12 02 F6 | 	mov	arg01, result3
1d278     0A 29 02 F6 | 	mov	local02, arg02
1d27c     09 2B 02 F6 | 	mov	local03, arg01
1d280     BC 02 BF FD | 	call	#_pop
1d284     A7 FA 61 FC | 	wrlong	result1, fp
1d288     04 4E 05 F1 | 	add	fp, #4
1d28c     A7 FC 61 FC | 	wrlong	result2, fp
1d290     04 4E 05 F1 | 	add	fp, #4
1d294     A7 FE 61 FC | 	wrlong	result3, fp
1d298                 | ' 
1d298                 | ' t2=pop()
1d298                 | ' t1=pop()
1d298                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1d298     08 4E 85 F1 | 	sub	fp, #8
1d29c     1F FE 0D F2 | 	cmp	result3, #31 wz
1d2a0     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1d2a4     A7 14 68 AC |  if_e	wrlong	#10, fp
1d2a8     08 4E 05 A1 |  if_e	add	fp, #8
1d2ac     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d2b0     08 4E 85 A1 |  if_e	sub	fp, #8
1d2b4     E0 00 90 AD |  if_e	jmp	#LR__2445
1d2b8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1d2b8     08 4E 05 F1 | 	add	fp, #8
1d2bc     A7 14 02 FB | 	rdlong	arg02, fp
1d2c0     08 4E 85 F1 | 	sub	fp, #8
1d2c4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d2c8     28 00 90 5D |  if_ne	jmp	#LR__2440
1d2cc     08 4E 05 F1 | 	add	fp, #8
1d2d0     A7 3C 68 FC | 	wrlong	#30, fp
1d2d4     08 4E 85 F1 | 	sub	fp, #8
1d2d8     A7 12 02 FB | 	rdlong	arg01, fp
1d2dc     09 13 52 F6 | 	abs	arg01, arg01 wc
1d2e0     1F 2C C6 C9 |  if_b	decod	local04, #31
1d2e4     00 2C 06 36 |  if_ae	mov	local04, #0
1d2e8     88 98 B0 FD | 	call	#__system___float_fromuns
1d2ec     16 FB 61 F5 | 	xor	result1, local04
1d2f0     A7 FA 61 FC | 	wrlong	result1, fp
1d2f4                 | LR__2440
1d2f4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1d2f4     08 4E 05 F1 | 	add	fp, #8
1d2f8     A7 14 02 FB | 	rdlong	arg02, fp
1d2fc     08 4E 85 F1 | 	sub	fp, #8
1d300     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d304     18 00 90 5D |  if_ne	jmp	#LR__2441
1d308     08 4E 05 F1 | 	add	fp, #8
1d30c     A7 3C 68 FC | 	wrlong	#30, fp
1d310     08 4E 85 F1 | 	sub	fp, #8
1d314     A7 12 02 FB | 	rdlong	arg01, fp
1d318     58 98 B0 FD | 	call	#__system___float_fromuns
1d31c     A7 FA 61 FC | 	wrlong	result1, fp
1d320                 | LR__2441
1d320                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1d320     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d324     1C 00 90 5D |  if_ne	jmp	#LR__2442
1d328     1E 2A 06 F6 | 	mov	local03, #30
1d32c     13 13 52 F6 | 	abs	arg01, local01 wc
1d330     1F 2C C6 C9 |  if_b	decod	local04, #31
1d334     00 2C 06 36 |  if_ae	mov	local04, #0
1d338     38 98 B0 FD | 	call	#__system___float_fromuns
1d33c     16 FB 61 F5 | 	xor	result1, local04
1d340     FD 26 02 F6 | 	mov	local01, result1
1d344                 | LR__2442
1d344                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1d344     1D 2A 0E F2 | 	cmp	local03, #29 wz
1d348     10 00 90 5D |  if_ne	jmp	#LR__2443
1d34c     1E 2A 06 F6 | 	mov	local03, #30
1d350     13 13 02 F6 | 	mov	arg01, local01
1d354     1C 98 B0 FD | 	call	#__system___float_fromuns
1d358     FD 26 02 F6 | 	mov	local01, result1
1d35c                 | LR__2443
1d35c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1d35c     08 4E 05 F1 | 	add	fp, #8
1d360     A7 14 02 FB | 	rdlong	arg02, fp
1d364     08 4E 85 F1 | 	sub	fp, #8
1d368     1E 14 0E F2 | 	cmp	arg02, #30 wz
1d36c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d370     14 00 90 5D |  if_ne	jmp	#LR__2444
1d374     A7 12 02 FB | 	rdlong	arg01, fp
1d378     13 15 02 F6 | 	mov	arg02, local01
1d37c     E8 9D B0 FD | 	call	#__system___float_div
1d380     A7 FA 61 FC | 	wrlong	result1, fp
1d384     10 00 90 FD | 	jmp	#LR__2445
1d388                 | LR__2444
1d388     A7 16 68 FC | 	wrlong	#11, fp
1d38c     08 4E 05 F1 | 	add	fp, #8
1d390     A7 FE 69 FC | 	wrlong	#255, fp
1d394     08 4E 85 F1 | 	sub	fp, #8
1d398                 | LR__2445
1d398     A7 12 02 F6 | 	mov	arg01, fp
1d39c     30 02 BF FD | 	call	#_push
1d3a0     A7 F0 03 F6 | 	mov	ptra, fp
1d3a4     B2 00 A0 FD | 	call	#popregs_
1d3a8                 | _do_fdiv_ret
1d3a8     2D 00 64 FD | 	ret
1d3ac                 | 
1d3ac                 | ' 
1d3ac                 | ' '--------------------------------- greater or equal (>=)
1d3ac                 | ' 
1d3ac                 | ' sub do_ge
1d3ac                 | _do_ge
1d3ac     07 4A 05 F6 | 	mov	COUNT_, #7
1d3b0     A8 00 A0 FD | 	call	#pushregs_
1d3b4     18 F0 07 F1 | 	add	ptra, #24
1d3b8     84 01 BF FD | 	call	#_pop
1d3bc     FD 26 02 F6 | 	mov	local01, result1
1d3c0     FE 2C 02 F6 | 	mov	local04, result2
1d3c4     FF 2E 02 F6 | 	mov	local05, result3
1d3c8     16 29 02 F6 | 	mov	local02, local04
1d3cc     17 2B 02 F6 | 	mov	local03, local05
1d3d0     6C 01 BF FD | 	call	#_pop
1d3d4     FF 2E 02 F6 | 	mov	local05, result3
1d3d8     A7 FA 61 FC | 	wrlong	result1, fp
1d3dc     04 4E 05 F1 | 	add	fp, #4
1d3e0     A7 FC 61 FC | 	wrlong	result2, fp
1d3e4     04 4E 05 F1 | 	add	fp, #4
1d3e8     A7 2E 62 FC | 	wrlong	local05, fp
1d3ec                 | ' 
1d3ec                 | ' t2=pop()
1d3ec                 | ' t1=pop()
1d3ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1d3ec     08 4E 85 F1 | 	sub	fp, #8
1d3f0     1F 2E 0E F2 | 	cmp	local05, #31 wz
1d3f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d3f8     20 00 90 5D |  if_ne	jmp	#LR__2450
1d3fc     00 30 06 F6 | 	mov	local06, #0
1d400     A7 12 02 FB | 	rdlong	arg01, fp
1d404     13 15 02 F6 | 	mov	arg02, local01
1d408     C4 7C B0 FD | 	call	#__system___string_cmp
1d40c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d410     00 30 26 36 |  if_ae	not	local06, #0
1d414     A7 30 62 FC | 	wrlong	local06, fp
1d418     F4 02 90 FD | 	jmp	#LR__2459
1d41c                 | LR__2450
1d41c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1d41c     08 4E 05 F1 | 	add	fp, #8
1d420     A7 30 02 FB | 	rdlong	local06, fp
1d424     08 4E 85 F1 | 	sub	fp, #8
1d428     1E 30 0E F2 | 	cmp	local06, #30 wz
1d42c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d430     24 00 90 5D |  if_ne	jmp	#LR__2451
1d434     00 30 06 F6 | 	mov	local06, #0
1d438     A7 12 02 FB | 	rdlong	arg01, fp
1d43c     13 15 02 F6 | 	mov	arg02, local01
1d440     01 16 66 F6 | 	neg	arg03, #1
1d444     30 9F B0 FD | 	call	#__system___float_cmp
1d448     00 FA 55 F2 | 	cmps	result1, #0 wc
1d44c     00 30 26 36 |  if_ae	not	local06, #0
1d450     A7 30 62 FC | 	wrlong	local06, fp
1d454     B8 02 90 FD | 	jmp	#LR__2459
1d458                 | LR__2451
1d458                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1d458     08 4E 05 F1 | 	add	fp, #8
1d45c     A7 30 02 FB | 	rdlong	local06, fp
1d460     08 4E 85 F1 | 	sub	fp, #8
1d464     1E 30 0E F2 | 	cmp	local06, #30 wz
1d468     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d46c     3C 00 90 5D |  if_ne	jmp	#LR__2452
1d470     00 30 06 F6 | 	mov	local06, #0
1d474     A7 2C 02 FB | 	rdlong	local04, fp
1d478     13 13 52 F6 | 	abs	arg01, local01 wc
1d47c     1F 32 C6 C9 |  if_b	decod	local07, #31
1d480     00 32 06 36 |  if_ae	mov	local07, #0
1d484     EC 96 B0 FD | 	call	#__system___float_fromuns
1d488     19 FB 61 F5 | 	xor	result1, local07
1d48c     FD 14 02 F6 | 	mov	arg02, result1
1d490     16 13 02 F6 | 	mov	arg01, local04
1d494     01 16 66 F6 | 	neg	arg03, #1
1d498     DC 9E B0 FD | 	call	#__system___float_cmp
1d49c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d4a0     00 30 26 36 |  if_ae	not	local06, #0
1d4a4     A7 30 62 FC | 	wrlong	local06, fp
1d4a8     64 02 90 FD | 	jmp	#LR__2459
1d4ac                 | LR__2452
1d4ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1d4ac     08 4E 05 F1 | 	add	fp, #8
1d4b0     A7 30 02 FB | 	rdlong	local06, fp
1d4b4     08 4E 85 F1 | 	sub	fp, #8
1d4b8     1E 30 0E F2 | 	cmp	local06, #30 wz
1d4bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d4c0     30 00 90 5D |  if_ne	jmp	#LR__2453
1d4c4     00 30 06 F6 | 	mov	local06, #0
1d4c8     A7 2C 02 FB | 	rdlong	local04, fp
1d4cc     13 13 02 F6 | 	mov	arg01, local01
1d4d0     A0 96 B0 FD | 	call	#__system___float_fromuns
1d4d4     FD 14 02 F6 | 	mov	arg02, result1
1d4d8     16 13 02 F6 | 	mov	arg01, local04
1d4dc     01 16 66 F6 | 	neg	arg03, #1
1d4e0     94 9E B0 FD | 	call	#__system___float_cmp
1d4e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1d4e8     00 30 26 36 |  if_ae	not	local06, #0
1d4ec     A7 30 62 FC | 	wrlong	local06, fp
1d4f0     1C 02 90 FD | 	jmp	#LR__2459
1d4f4                 | LR__2453
1d4f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1d4f4     08 4E 05 F1 | 	add	fp, #8
1d4f8     A7 30 02 FB | 	rdlong	local06, fp
1d4fc     08 4E 85 F1 | 	sub	fp, #8
1d500     1C 30 0E F2 | 	cmp	local06, #28 wz
1d504     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d508     3C 00 90 5D |  if_ne	jmp	#LR__2454
1d50c     00 30 06 F6 | 	mov	local06, #0
1d510     A7 12 02 FB | 	rdlong	arg01, fp
1d514     09 13 52 F6 | 	abs	arg01, arg01 wc
1d518     1F 32 C6 C9 |  if_b	decod	local07, #31
1d51c     00 32 06 36 |  if_ae	mov	local07, #0
1d520     50 96 B0 FD | 	call	#__system___float_fromuns
1d524     19 FB 61 F5 | 	xor	result1, local07
1d528     FD 12 02 F6 | 	mov	arg01, result1
1d52c     13 15 02 F6 | 	mov	arg02, local01
1d530     01 16 66 F6 | 	neg	arg03, #1
1d534     40 9E B0 FD | 	call	#__system___float_cmp
1d538     00 FA 55 F2 | 	cmps	result1, #0 wc
1d53c     00 30 26 36 |  if_ae	not	local06, #0
1d540     A7 30 62 FC | 	wrlong	local06, fp
1d544     C8 01 90 FD | 	jmp	#LR__2459
1d548                 | LR__2454
1d548                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1d548     08 4E 05 F1 | 	add	fp, #8
1d54c     A7 30 02 FB | 	rdlong	local06, fp
1d550     08 4E 85 F1 | 	sub	fp, #8
1d554     1C 30 0E F2 | 	cmp	local06, #28 wz
1d558     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d55c     00 30 06 A6 |  if_e	mov	local06, #0
1d560     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d564     13 2D 52 A2 |  if_e	cmps	local04, local01 wc
1d568     01 30 66 26 |  if_nc_and_z	neg	local06, #1
1d56c     A7 30 62 AC |  if_e	wrlong	local06, fp
1d570     9C 01 90 AD |  if_e	jmp	#LR__2459
1d574                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1d574     08 4E 05 F1 | 	add	fp, #8
1d578     A7 30 02 FB | 	rdlong	local06, fp
1d57c     08 4E 85 F1 | 	sub	fp, #8
1d580     1C 30 0E F2 | 	cmp	local06, #28 wz
1d584     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d588     00 30 06 A6 |  if_e	mov	local06, #0
1d58c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d590     13 2D 52 A2 |  if_e	cmps	local04, local01 wc
1d594     01 30 66 26 |  if_nc_and_z	neg	local06, #1
1d598     A7 30 62 AC |  if_e	wrlong	local06, fp
1d59c     70 01 90 AD |  if_e	jmp	#LR__2459
1d5a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1d5a0     08 4E 05 F1 | 	add	fp, #8
1d5a4     A7 30 02 FB | 	rdlong	local06, fp
1d5a8     08 4E 85 F1 | 	sub	fp, #8
1d5ac     1D 30 0E F2 | 	cmp	local06, #29 wz
1d5b0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d5b4     2C 00 90 5D |  if_ne	jmp	#LR__2455
1d5b8     00 30 06 F6 | 	mov	local06, #0
1d5bc     A7 12 02 FB | 	rdlong	arg01, fp
1d5c0     B0 95 B0 FD | 	call	#__system___float_fromuns
1d5c4     FD 12 02 F6 | 	mov	arg01, result1
1d5c8     13 15 02 F6 | 	mov	arg02, local01
1d5cc     01 16 66 F6 | 	neg	arg03, #1
1d5d0     A4 9D B0 FD | 	call	#__system___float_cmp
1d5d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1d5d8     00 30 26 36 |  if_ae	not	local06, #0
1d5dc     A7 30 62 FC | 	wrlong	local06, fp
1d5e0     2C 01 90 FD | 	jmp	#LR__2459
1d5e4                 | LR__2455
1d5e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1d5e4     08 4E 05 F1 | 	add	fp, #8
1d5e8     A7 30 02 FB | 	rdlong	local06, fp
1d5ec     08 4E 85 F1 | 	sub	fp, #8
1d5f0     1D 30 0E F2 | 	cmp	local06, #29 wz
1d5f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d5f8     00 30 06 A6 |  if_e	mov	local06, #0
1d5fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d600     13 2D 52 A2 |  if_e	cmps	local04, local01 wc
1d604     01 30 66 26 |  if_nc_and_z	neg	local06, #1
1d608     A7 30 62 AC |  if_e	wrlong	local06, fp
1d60c     00 01 90 AD |  if_e	jmp	#LR__2459
1d610                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1d610     08 4E 05 F1 | 	add	fp, #8
1d614     A7 30 02 FB | 	rdlong	local06, fp
1d618     08 4E 85 F1 | 	sub	fp, #8
1d61c     1D 30 0E F2 | 	cmp	local06, #29 wz
1d620     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d624     00 30 06 A6 |  if_e	mov	local06, #0
1d628     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d62c     13 2D 12 A2 |  if_e	cmp	local04, local01 wc
1d630     01 30 66 26 |  if_nc_and_z	neg	local06, #1
1d634     A7 30 62 AC |  if_e	wrlong	local06, fp
1d638     D4 00 90 AD |  if_e	jmp	#LR__2459
1d63c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1d63c     08 4E 05 F1 | 	add	fp, #8
1d640     A7 30 02 FB | 	rdlong	local06, fp
1d644     08 4E 85 F1 | 	sub	fp, #8
1d648     2B 30 0E F2 | 	cmp	local06, #43 wz
1d64c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d650     28 00 90 5D |  if_ne	jmp	#LR__2456
1d654     00 30 06 F6 | 	mov	local06, #0
1d658     A7 12 02 FB | 	rdlong	arg01, fp
1d65c     50 00 BF FD | 	call	#_convertstring
1d660     FD 12 02 F6 | 	mov	arg01, result1
1d664     13 15 02 F6 | 	mov	arg02, local01
1d668     64 7A B0 FD | 	call	#__system___string_cmp
1d66c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d670     00 30 26 36 |  if_ae	not	local06, #0
1d674     A7 30 62 FC | 	wrlong	local06, fp
1d678     94 00 90 FD | 	jmp	#LR__2459
1d67c                 | LR__2456
1d67c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1d67c     08 4E 05 F1 | 	add	fp, #8
1d680     A7 30 02 FB | 	rdlong	local06, fp
1d684     08 4E 85 F1 | 	sub	fp, #8
1d688     1F 30 0E F2 | 	cmp	local06, #31 wz
1d68c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d690     2C 00 90 5D |  if_ne	jmp	#LR__2457
1d694     00 30 06 F6 | 	mov	local06, #0
1d698     A7 2C 02 FB | 	rdlong	local04, fp
1d69c     13 13 02 F6 | 	mov	arg01, local01
1d6a0     0C 00 BF FD | 	call	#_convertstring
1d6a4     FD 14 02 F6 | 	mov	arg02, result1
1d6a8     16 13 02 F6 | 	mov	arg01, local04
1d6ac     20 7A B0 FD | 	call	#__system___string_cmp
1d6b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1d6b4     00 30 26 36 |  if_ae	not	local06, #0
1d6b8     A7 30 62 FC | 	wrlong	local06, fp
1d6bc     50 00 90 FD | 	jmp	#LR__2459
1d6c0                 | LR__2457
1d6c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1d6c0     08 4E 05 F1 | 	add	fp, #8
1d6c4     A7 30 02 FB | 	rdlong	local06, fp
1d6c8     08 4E 85 F1 | 	sub	fp, #8
1d6cc     2B 30 0E F2 | 	cmp	local06, #43 wz
1d6d0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d6d4     34 00 90 5D |  if_ne	jmp	#LR__2458
1d6d8     00 30 06 F6 | 	mov	local06, #0
1d6dc     A7 12 02 FB | 	rdlong	arg01, fp
1d6e0     CC FF BE FD | 	call	#_convertstring
1d6e4     FD 2C 02 F6 | 	mov	local04, result1
1d6e8     13 13 02 F6 | 	mov	arg01, local01
1d6ec     C0 FF BE FD | 	call	#_convertstring
1d6f0     FD 14 02 F6 | 	mov	arg02, result1
1d6f4     16 13 02 F6 | 	mov	arg01, local04
1d6f8     D4 79 B0 FD | 	call	#__system___string_cmp
1d6fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d700     00 30 26 36 |  if_ae	not	local06, #0
1d704     A7 30 62 FC | 	wrlong	local06, fp
1d708     04 00 90 FD | 	jmp	#LR__2459
1d70c                 | LR__2458
1d70c     A7 00 68 FC | 	wrlong	#0, fp
1d710                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d710                 | LR__2459
1d710     08 4E 05 F1 | 	add	fp, #8
1d714     A7 38 68 FC | 	wrlong	#28, fp
1d718     08 4E 85 F1 | 	sub	fp, #8
1d71c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d71c     A7 30 0A FB | 	rdlong	local06, fp wz
1d720     A7 02 68 5C |  if_ne	wrlong	#1, fp
1d724     A7 12 02 F6 | 	mov	arg01, fp
1d728     A4 FE BE FD | 	call	#_push
1d72c     A7 F0 03 F6 | 	mov	ptra, fp
1d730     B2 00 A0 FD | 	call	#popregs_
1d734                 | _do_ge_ret
1d734     2D 00 64 FD | 	ret
1d738                 | 
1d738                 | ' 
1d738                 | ' '--------------------------------- greater than (>)
1d738                 | ' 
1d738                 | ' sub do_gt
1d738                 | _do_gt
1d738     07 4A 05 F6 | 	mov	COUNT_, #7
1d73c     A8 00 A0 FD | 	call	#pushregs_
1d740     18 F0 07 F1 | 	add	ptra, #24
1d744     F8 FD BE FD | 	call	#_pop
1d748     FD 26 02 F6 | 	mov	local01, result1
1d74c     FE 2C 02 F6 | 	mov	local04, result2
1d750     FF 2E 02 F6 | 	mov	local05, result3
1d754     16 29 02 F6 | 	mov	local02, local04
1d758     17 2B 02 F6 | 	mov	local03, local05
1d75c     E0 FD BE FD | 	call	#_pop
1d760     FF 2E 02 F6 | 	mov	local05, result3
1d764     A7 FA 61 FC | 	wrlong	result1, fp
1d768     04 4E 05 F1 | 	add	fp, #4
1d76c     A7 FC 61 FC | 	wrlong	result2, fp
1d770     04 4E 05 F1 | 	add	fp, #4
1d774     A7 2E 62 FC | 	wrlong	local05, fp
1d778                 | ' 
1d778                 | ' t2=pop()
1d778                 | ' t1=pop()
1d778                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1d778     08 4E 85 F1 | 	sub	fp, #8
1d77c     1F 2E 0E F2 | 	cmp	local05, #31 wz
1d780     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d784     20 00 90 5D |  if_ne	jmp	#LR__2460
1d788     00 30 06 F6 | 	mov	local06, #0
1d78c     A7 12 02 FB | 	rdlong	arg01, fp
1d790     13 15 02 F6 | 	mov	arg02, local01
1d794     38 79 B0 FD | 	call	#__system___string_cmp
1d798     01 FA 55 F2 | 	cmps	result1, #1 wc
1d79c     00 30 26 36 |  if_ae	not	local06, #0
1d7a0     A7 30 62 FC | 	wrlong	local06, fp
1d7a4     04 03 90 FD | 	jmp	#LR__2473
1d7a8                 | LR__2460
1d7a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1d7a8     08 4E 05 F1 | 	add	fp, #8
1d7ac     A7 30 02 FB | 	rdlong	local06, fp
1d7b0     08 4E 85 F1 | 	sub	fp, #8
1d7b4     1E 30 0E F2 | 	cmp	local06, #30 wz
1d7b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d7bc     24 00 90 5D |  if_ne	jmp	#LR__2461
1d7c0     00 30 06 F6 | 	mov	local06, #0
1d7c4     A7 12 02 FB | 	rdlong	arg01, fp
1d7c8     13 15 02 F6 | 	mov	arg02, local01
1d7cc     01 16 66 F6 | 	neg	arg03, #1
1d7d0     A4 9B B0 FD | 	call	#__system___float_cmp
1d7d4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d7d8     00 30 26 36 |  if_ae	not	local06, #0
1d7dc     A7 30 62 FC | 	wrlong	local06, fp
1d7e0     C8 02 90 FD | 	jmp	#LR__2473
1d7e4                 | LR__2461
1d7e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1d7e4     08 4E 05 F1 | 	add	fp, #8
1d7e8     A7 30 02 FB | 	rdlong	local06, fp
1d7ec     08 4E 85 F1 | 	sub	fp, #8
1d7f0     1E 30 0E F2 | 	cmp	local06, #30 wz
1d7f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d7f8     3C 00 90 5D |  if_ne	jmp	#LR__2462
1d7fc     00 30 06 F6 | 	mov	local06, #0
1d800     A7 2C 02 FB | 	rdlong	local04, fp
1d804     13 13 52 F6 | 	abs	arg01, local01 wc
1d808     1F 32 C6 C9 |  if_b	decod	local07, #31
1d80c     00 32 06 36 |  if_ae	mov	local07, #0
1d810     60 93 B0 FD | 	call	#__system___float_fromuns
1d814     19 FB 61 F5 | 	xor	result1, local07
1d818     FD 14 02 F6 | 	mov	arg02, result1
1d81c     16 13 02 F6 | 	mov	arg01, local04
1d820     01 16 66 F6 | 	neg	arg03, #1
1d824     50 9B B0 FD | 	call	#__system___float_cmp
1d828     01 FA 55 F2 | 	cmps	result1, #1 wc
1d82c     00 30 26 36 |  if_ae	not	local06, #0
1d830     A7 30 62 FC | 	wrlong	local06, fp
1d834     74 02 90 FD | 	jmp	#LR__2473
1d838                 | LR__2462
1d838                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d838     08 4E 05 F1 | 	add	fp, #8
1d83c     A7 30 02 FB | 	rdlong	local06, fp
1d840     08 4E 85 F1 | 	sub	fp, #8
1d844     1E 30 0E F2 | 	cmp	local06, #30 wz
1d848     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d84c     30 00 90 5D |  if_ne	jmp	#LR__2463
1d850     00 30 06 F6 | 	mov	local06, #0
1d854     A7 2C 02 FB | 	rdlong	local04, fp
1d858     13 13 02 F6 | 	mov	arg01, local01
1d85c     14 93 B0 FD | 	call	#__system___float_fromuns
1d860     FD 14 02 F6 | 	mov	arg02, result1
1d864     16 13 02 F6 | 	mov	arg01, local04
1d868     01 16 66 F6 | 	neg	arg03, #1
1d86c     08 9B B0 FD | 	call	#__system___float_cmp
1d870     01 FA 55 F2 | 	cmps	result1, #1 wc
1d874     00 30 26 36 |  if_ae	not	local06, #0
1d878     A7 30 62 FC | 	wrlong	local06, fp
1d87c     2C 02 90 FD | 	jmp	#LR__2473
1d880                 | LR__2463
1d880                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d880     08 4E 05 F1 | 	add	fp, #8
1d884     A7 30 02 FB | 	rdlong	local06, fp
1d888     08 4E 85 F1 | 	sub	fp, #8
1d88c     1C 30 0E F2 | 	cmp	local06, #28 wz
1d890     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d894     3C 00 90 5D |  if_ne	jmp	#LR__2464
1d898     00 30 06 F6 | 	mov	local06, #0
1d89c     A7 12 02 FB | 	rdlong	arg01, fp
1d8a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1d8a4     1F 32 C6 C9 |  if_b	decod	local07, #31
1d8a8     00 32 06 36 |  if_ae	mov	local07, #0
1d8ac     C4 92 B0 FD | 	call	#__system___float_fromuns
1d8b0     19 FB 61 F5 | 	xor	result1, local07
1d8b4     FD 12 02 F6 | 	mov	arg01, result1
1d8b8     13 15 02 F6 | 	mov	arg02, local01
1d8bc     01 16 66 F6 | 	neg	arg03, #1
1d8c0     B4 9A B0 FD | 	call	#__system___float_cmp
1d8c4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d8c8     00 30 26 36 |  if_ae	not	local06, #0
1d8cc     A7 30 62 FC | 	wrlong	local06, fp
1d8d0     D8 01 90 FD | 	jmp	#LR__2473
1d8d4                 | LR__2464
1d8d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d8d4     08 4E 05 F1 | 	add	fp, #8
1d8d8     A7 30 02 FB | 	rdlong	local06, fp
1d8dc     08 4E 85 F1 | 	sub	fp, #8
1d8e0     1C 30 0E F2 | 	cmp	local06, #28 wz
1d8e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d8e8     18 00 90 5D |  if_ne	jmp	#LR__2465
1d8ec     00 30 06 F6 | 	mov	local06, #0
1d8f0     A7 2C 02 FB | 	rdlong	local04, fp
1d8f4     13 2D 5A F2 | 	cmps	local04, local01 wcz
1d8f8     01 30 66 16 |  if_a	neg	local06, #1
1d8fc     A7 30 62 FC | 	wrlong	local06, fp
1d900     A8 01 90 FD | 	jmp	#LR__2473
1d904                 | LR__2465
1d904                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1d904     08 4E 05 F1 | 	add	fp, #8
1d908     A7 30 02 FB | 	rdlong	local06, fp
1d90c     08 4E 85 F1 | 	sub	fp, #8
1d910     1C 30 0E F2 | 	cmp	local06, #28 wz
1d914     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d918     18 00 90 5D |  if_ne	jmp	#LR__2466
1d91c     00 30 06 F6 | 	mov	local06, #0
1d920     A7 2C 02 FB | 	rdlong	local04, fp
1d924     13 2D 5A F2 | 	cmps	local04, local01 wcz
1d928     01 30 66 16 |  if_a	neg	local06, #1
1d92c     A7 30 62 FC | 	wrlong	local06, fp
1d930     78 01 90 FD | 	jmp	#LR__2473
1d934                 | LR__2466
1d934                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d934     08 4E 05 F1 | 	add	fp, #8
1d938     A7 30 02 FB | 	rdlong	local06, fp
1d93c     08 4E 85 F1 | 	sub	fp, #8
1d940     1D 30 0E F2 | 	cmp	local06, #29 wz
1d944     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d948     2C 00 90 5D |  if_ne	jmp	#LR__2467
1d94c     00 30 06 F6 | 	mov	local06, #0
1d950     A7 12 02 FB | 	rdlong	arg01, fp
1d954     1C 92 B0 FD | 	call	#__system___float_fromuns
1d958     FD 12 02 F6 | 	mov	arg01, result1
1d95c     13 15 02 F6 | 	mov	arg02, local01
1d960     01 16 66 F6 | 	neg	arg03, #1
1d964     10 9A B0 FD | 	call	#__system___float_cmp
1d968     01 FA 55 F2 | 	cmps	result1, #1 wc
1d96c     00 30 26 36 |  if_ae	not	local06, #0
1d970     A7 30 62 FC | 	wrlong	local06, fp
1d974     34 01 90 FD | 	jmp	#LR__2473
1d978                 | LR__2467
1d978                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d978     08 4E 05 F1 | 	add	fp, #8
1d97c     A7 30 02 FB | 	rdlong	local06, fp
1d980     08 4E 85 F1 | 	sub	fp, #8
1d984     1D 30 0E F2 | 	cmp	local06, #29 wz
1d988     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d98c     18 00 90 5D |  if_ne	jmp	#LR__2468
1d990     00 30 06 F6 | 	mov	local06, #0
1d994     A7 2C 02 FB | 	rdlong	local04, fp
1d998     13 2D 5A F2 | 	cmps	local04, local01 wcz
1d99c     01 30 66 16 |  if_a	neg	local06, #1
1d9a0     A7 30 62 FC | 	wrlong	local06, fp
1d9a4     04 01 90 FD | 	jmp	#LR__2473
1d9a8                 | LR__2468
1d9a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d9a8     08 4E 05 F1 | 	add	fp, #8
1d9ac     A7 30 02 FB | 	rdlong	local06, fp
1d9b0     08 4E 85 F1 | 	sub	fp, #8
1d9b4     1D 30 0E F2 | 	cmp	local06, #29 wz
1d9b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d9bc     18 00 90 5D |  if_ne	jmp	#LR__2469
1d9c0     00 30 06 F6 | 	mov	local06, #0
1d9c4     A7 2C 02 FB | 	rdlong	local04, fp
1d9c8     13 2D 1A F2 | 	cmp	local04, local01 wcz
1d9cc     01 30 66 16 |  if_a	neg	local06, #1
1d9d0     A7 30 62 FC | 	wrlong	local06, fp
1d9d4     D4 00 90 FD | 	jmp	#LR__2473
1d9d8                 | LR__2469
1d9d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d9d8     08 4E 05 F1 | 	add	fp, #8
1d9dc     A7 30 02 FB | 	rdlong	local06, fp
1d9e0     08 4E 85 F1 | 	sub	fp, #8
1d9e4     2B 30 0E F2 | 	cmp	local06, #43 wz
1d9e8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d9ec     28 00 90 5D |  if_ne	jmp	#LR__2470
1d9f0     00 30 06 F6 | 	mov	local06, #0
1d9f4     A7 12 02 FB | 	rdlong	arg01, fp
1d9f8     B4 FC BE FD | 	call	#_convertstring
1d9fc     FD 12 02 F6 | 	mov	arg01, result1
1da00     13 15 02 F6 | 	mov	arg02, local01
1da04     C8 76 B0 FD | 	call	#__system___string_cmp
1da08     01 FA 55 F2 | 	cmps	result1, #1 wc
1da0c     00 30 26 36 |  if_ae	not	local06, #0
1da10     A7 30 62 FC | 	wrlong	local06, fp
1da14     94 00 90 FD | 	jmp	#LR__2473
1da18                 | LR__2470
1da18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1da18     08 4E 05 F1 | 	add	fp, #8
1da1c     A7 30 02 FB | 	rdlong	local06, fp
1da20     08 4E 85 F1 | 	sub	fp, #8
1da24     1F 30 0E F2 | 	cmp	local06, #31 wz
1da28     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1da2c     2C 00 90 5D |  if_ne	jmp	#LR__2471
1da30     00 30 06 F6 | 	mov	local06, #0
1da34     A7 2C 02 FB | 	rdlong	local04, fp
1da38     13 13 02 F6 | 	mov	arg01, local01
1da3c     70 FC BE FD | 	call	#_convertstring
1da40     FD 14 02 F6 | 	mov	arg02, result1
1da44     16 13 02 F6 | 	mov	arg01, local04
1da48     84 76 B0 FD | 	call	#__system___string_cmp
1da4c     01 FA 55 F2 | 	cmps	result1, #1 wc
1da50     00 30 26 36 |  if_ae	not	local06, #0
1da54     A7 30 62 FC | 	wrlong	local06, fp
1da58     50 00 90 FD | 	jmp	#LR__2473
1da5c                 | LR__2471
1da5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1da5c     08 4E 05 F1 | 	add	fp, #8
1da60     A7 30 02 FB | 	rdlong	local06, fp
1da64     08 4E 85 F1 | 	sub	fp, #8
1da68     2B 30 0E F2 | 	cmp	local06, #43 wz
1da6c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1da70     34 00 90 5D |  if_ne	jmp	#LR__2472
1da74     00 30 06 F6 | 	mov	local06, #0
1da78     A7 12 02 FB | 	rdlong	arg01, fp
1da7c     30 FC BE FD | 	call	#_convertstring
1da80     FD 2C 02 F6 | 	mov	local04, result1
1da84     13 13 02 F6 | 	mov	arg01, local01
1da88     24 FC BE FD | 	call	#_convertstring
1da8c     FD 14 02 F6 | 	mov	arg02, result1
1da90     16 13 02 F6 | 	mov	arg01, local04
1da94     38 76 B0 FD | 	call	#__system___string_cmp
1da98     01 FA 55 F2 | 	cmps	result1, #1 wc
1da9c     00 30 26 36 |  if_ae	not	local06, #0
1daa0     A7 30 62 FC | 	wrlong	local06, fp
1daa4     04 00 90 FD | 	jmp	#LR__2473
1daa8                 | LR__2472
1daa8     A7 00 68 FC | 	wrlong	#0, fp
1daac                 | LR__2473
1daac     08 4E 05 F1 | 	add	fp, #8
1dab0     A7 38 68 FC | 	wrlong	#28, fp
1dab4     08 4E 85 F1 | 	sub	fp, #8
1dab8                 | ' t1.result.uresult=0
1dab8                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dab8     A7 30 0A FB | 	rdlong	local06, fp wz
1dabc     A7 02 68 5C |  if_ne	wrlong	#1, fp
1dac0     A7 12 02 F6 | 	mov	arg01, fp
1dac4     08 FB BE FD | 	call	#_push
1dac8     A7 F0 03 F6 | 	mov	ptra, fp
1dacc     B2 00 A0 FD | 	call	#popregs_
1dad0                 | _do_gt_ret
1dad0     2D 00 64 FD | 	ret
1dad4                 | 
1dad4                 | ' 
1dad4                 | ' '--------------------------------- less or equal (<=)
1dad4                 | ' 
1dad4                 | ' sub do_le
1dad4                 | _do_le
1dad4     07 4A 05 F6 | 	mov	COUNT_, #7
1dad8     A8 00 A0 FD | 	call	#pushregs_
1dadc     18 F0 07 F1 | 	add	ptra, #24
1dae0     5C FA BE FD | 	call	#_pop
1dae4     FD 26 02 F6 | 	mov	local01, result1
1dae8     FE 2C 02 F6 | 	mov	local04, result2
1daec     FF 2E 02 F6 | 	mov	local05, result3
1daf0     16 29 02 F6 | 	mov	local02, local04
1daf4     17 2B 02 F6 | 	mov	local03, local05
1daf8     44 FA BE FD | 	call	#_pop
1dafc     FF 2E 02 F6 | 	mov	local05, result3
1db00     A7 FA 61 FC | 	wrlong	result1, fp
1db04     04 4E 05 F1 | 	add	fp, #4
1db08     A7 FC 61 FC | 	wrlong	result2, fp
1db0c     04 4E 05 F1 | 	add	fp, #4
1db10     A7 2E 62 FC | 	wrlong	local05, fp
1db14                 | ' 
1db14                 | ' t2=pop()
1db14                 | ' t1=pop()
1db14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1db14     08 4E 85 F1 | 	sub	fp, #8
1db18     1F 2E 0E F2 | 	cmp	local05, #31 wz
1db1c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1db20     20 00 90 5D |  if_ne	jmp	#LR__2480
1db24     00 30 06 F6 | 	mov	local06, #0
1db28     A7 12 02 FB | 	rdlong	arg01, fp
1db2c     13 15 02 F6 | 	mov	arg02, local01
1db30     9C 75 B0 FD | 	call	#__system___string_cmp
1db34     01 FA 55 F2 | 	cmps	result1, #1 wc
1db38     00 30 26 C6 |  if_b	not	local06, #0
1db3c     A7 30 62 FC | 	wrlong	local06, fp
1db40     04 03 90 FD | 	jmp	#LR__2493
1db44                 | LR__2480
1db44                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1db44     08 4E 05 F1 | 	add	fp, #8
1db48     A7 30 02 FB | 	rdlong	local06, fp
1db4c     08 4E 85 F1 | 	sub	fp, #8
1db50     1E 30 0E F2 | 	cmp	local06, #30 wz
1db54     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1db58     24 00 90 5D |  if_ne	jmp	#LR__2481
1db5c     00 30 06 F6 | 	mov	local06, #0
1db60     A7 12 02 FB | 	rdlong	arg01, fp
1db64     13 15 02 F6 | 	mov	arg02, local01
1db68     01 16 06 F6 | 	mov	arg03, #1
1db6c     08 98 B0 FD | 	call	#__system___float_cmp
1db70     01 FA 55 F2 | 	cmps	result1, #1 wc
1db74     00 30 26 C6 |  if_b	not	local06, #0
1db78     A7 30 62 FC | 	wrlong	local06, fp
1db7c     C8 02 90 FD | 	jmp	#LR__2493
1db80                 | LR__2481
1db80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1db80     08 4E 05 F1 | 	add	fp, #8
1db84     A7 30 02 FB | 	rdlong	local06, fp
1db88     08 4E 85 F1 | 	sub	fp, #8
1db8c     1E 30 0E F2 | 	cmp	local06, #30 wz
1db90     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1db94     3C 00 90 5D |  if_ne	jmp	#LR__2482
1db98     00 30 06 F6 | 	mov	local06, #0
1db9c     A7 2C 02 FB | 	rdlong	local04, fp
1dba0     13 13 52 F6 | 	abs	arg01, local01 wc
1dba4     1F 32 C6 C9 |  if_b	decod	local07, #31
1dba8     00 32 06 36 |  if_ae	mov	local07, #0
1dbac     C4 8F B0 FD | 	call	#__system___float_fromuns
1dbb0     19 FB 61 F5 | 	xor	result1, local07
1dbb4     FD 14 02 F6 | 	mov	arg02, result1
1dbb8     16 13 02 F6 | 	mov	arg01, local04
1dbbc     01 16 06 F6 | 	mov	arg03, #1
1dbc0     B4 97 B0 FD | 	call	#__system___float_cmp
1dbc4     01 FA 55 F2 | 	cmps	result1, #1 wc
1dbc8     00 30 26 C6 |  if_b	not	local06, #0
1dbcc     A7 30 62 FC | 	wrlong	local06, fp
1dbd0     74 02 90 FD | 	jmp	#LR__2493
1dbd4                 | LR__2482
1dbd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1dbd4     08 4E 05 F1 | 	add	fp, #8
1dbd8     A7 30 02 FB | 	rdlong	local06, fp
1dbdc     08 4E 85 F1 | 	sub	fp, #8
1dbe0     1E 30 0E F2 | 	cmp	local06, #30 wz
1dbe4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dbe8     30 00 90 5D |  if_ne	jmp	#LR__2483
1dbec     00 30 06 F6 | 	mov	local06, #0
1dbf0     A7 2C 02 FB | 	rdlong	local04, fp
1dbf4     13 13 02 F6 | 	mov	arg01, local01
1dbf8     78 8F B0 FD | 	call	#__system___float_fromuns
1dbfc     FD 14 02 F6 | 	mov	arg02, result1
1dc00     16 13 02 F6 | 	mov	arg01, local04
1dc04     01 16 06 F6 | 	mov	arg03, #1
1dc08     6C 97 B0 FD | 	call	#__system___float_cmp
1dc0c     01 FA 55 F2 | 	cmps	result1, #1 wc
1dc10     00 30 26 C6 |  if_b	not	local06, #0
1dc14     A7 30 62 FC | 	wrlong	local06, fp
1dc18     2C 02 90 FD | 	jmp	#LR__2493
1dc1c                 | LR__2483
1dc1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1dc1c     08 4E 05 F1 | 	add	fp, #8
1dc20     A7 30 02 FB | 	rdlong	local06, fp
1dc24     08 4E 85 F1 | 	sub	fp, #8
1dc28     1C 30 0E F2 | 	cmp	local06, #28 wz
1dc2c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dc30     3C 00 90 5D |  if_ne	jmp	#LR__2484
1dc34     00 30 06 F6 | 	mov	local06, #0
1dc38     A7 12 02 FB | 	rdlong	arg01, fp
1dc3c     09 13 52 F6 | 	abs	arg01, arg01 wc
1dc40     1F 32 C6 C9 |  if_b	decod	local07, #31
1dc44     00 32 06 36 |  if_ae	mov	local07, #0
1dc48     28 8F B0 FD | 	call	#__system___float_fromuns
1dc4c     19 FB 61 F5 | 	xor	result1, local07
1dc50     FD 12 02 F6 | 	mov	arg01, result1
1dc54     13 15 02 F6 | 	mov	arg02, local01
1dc58     01 16 06 F6 | 	mov	arg03, #1
1dc5c     18 97 B0 FD | 	call	#__system___float_cmp
1dc60     01 FA 55 F2 | 	cmps	result1, #1 wc
1dc64     00 30 26 C6 |  if_b	not	local06, #0
1dc68     A7 30 62 FC | 	wrlong	local06, fp
1dc6c     D8 01 90 FD | 	jmp	#LR__2493
1dc70                 | LR__2484
1dc70                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1dc70     08 4E 05 F1 | 	add	fp, #8
1dc74     A7 30 02 FB | 	rdlong	local06, fp
1dc78     08 4E 85 F1 | 	sub	fp, #8
1dc7c     1C 30 0E F2 | 	cmp	local06, #28 wz
1dc80     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dc84     18 00 90 5D |  if_ne	jmp	#LR__2485
1dc88     00 30 06 F6 | 	mov	local06, #0
1dc8c     A7 2C 02 FB | 	rdlong	local04, fp
1dc90     13 2D 5A F2 | 	cmps	local04, local01 wcz
1dc94     01 30 66 E6 |  if_be	neg	local06, #1
1dc98     A7 30 62 FC | 	wrlong	local06, fp
1dc9c     A8 01 90 FD | 	jmp	#LR__2493
1dca0                 | LR__2485
1dca0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1dca0     08 4E 05 F1 | 	add	fp, #8
1dca4     A7 30 02 FB | 	rdlong	local06, fp
1dca8     08 4E 85 F1 | 	sub	fp, #8
1dcac     1C 30 0E F2 | 	cmp	local06, #28 wz
1dcb0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dcb4     18 00 90 5D |  if_ne	jmp	#LR__2486
1dcb8     00 30 06 F6 | 	mov	local06, #0
1dcbc     A7 2C 02 FB | 	rdlong	local04, fp
1dcc0     13 2D 5A F2 | 	cmps	local04, local01 wcz
1dcc4     01 30 66 E6 |  if_be	neg	local06, #1
1dcc8     A7 30 62 FC | 	wrlong	local06, fp
1dccc     78 01 90 FD | 	jmp	#LR__2493
1dcd0                 | LR__2486
1dcd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1dcd0     08 4E 05 F1 | 	add	fp, #8
1dcd4     A7 30 02 FB | 	rdlong	local06, fp
1dcd8     08 4E 85 F1 | 	sub	fp, #8
1dcdc     1D 30 0E F2 | 	cmp	local06, #29 wz
1dce0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dce4     2C 00 90 5D |  if_ne	jmp	#LR__2487
1dce8     00 30 06 F6 | 	mov	local06, #0
1dcec     A7 12 02 FB | 	rdlong	arg01, fp
1dcf0     80 8E B0 FD | 	call	#__system___float_fromuns
1dcf4     FD 12 02 F6 | 	mov	arg01, result1
1dcf8     13 15 02 F6 | 	mov	arg02, local01
1dcfc     01 16 06 F6 | 	mov	arg03, #1
1dd00     74 96 B0 FD | 	call	#__system___float_cmp
1dd04     01 FA 55 F2 | 	cmps	result1, #1 wc
1dd08     00 30 26 C6 |  if_b	not	local06, #0
1dd0c     A7 30 62 FC | 	wrlong	local06, fp
1dd10     34 01 90 FD | 	jmp	#LR__2493
1dd14                 | LR__2487
1dd14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1dd14     08 4E 05 F1 | 	add	fp, #8
1dd18     A7 30 02 FB | 	rdlong	local06, fp
1dd1c     08 4E 85 F1 | 	sub	fp, #8
1dd20     1D 30 0E F2 | 	cmp	local06, #29 wz
1dd24     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd28     18 00 90 5D |  if_ne	jmp	#LR__2488
1dd2c     00 30 06 F6 | 	mov	local06, #0
1dd30     A7 2C 02 FB | 	rdlong	local04, fp
1dd34     13 2D 5A F2 | 	cmps	local04, local01 wcz
1dd38     01 30 66 E6 |  if_be	neg	local06, #1
1dd3c     A7 30 62 FC | 	wrlong	local06, fp
1dd40     04 01 90 FD | 	jmp	#LR__2493
1dd44                 | LR__2488
1dd44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1dd44     08 4E 05 F1 | 	add	fp, #8
1dd48     A7 30 02 FB | 	rdlong	local06, fp
1dd4c     08 4E 85 F1 | 	sub	fp, #8
1dd50     1D 30 0E F2 | 	cmp	local06, #29 wz
1dd54     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dd58     18 00 90 5D |  if_ne	jmp	#LR__2489
1dd5c     00 30 06 F6 | 	mov	local06, #0
1dd60     A7 2C 02 FB | 	rdlong	local04, fp
1dd64     13 2D 1A F2 | 	cmp	local04, local01 wcz
1dd68     01 30 66 E6 |  if_be	neg	local06, #1
1dd6c     A7 30 62 FC | 	wrlong	local06, fp
1dd70     D4 00 90 FD | 	jmp	#LR__2493
1dd74                 | LR__2489
1dd74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1dd74     08 4E 05 F1 | 	add	fp, #8
1dd78     A7 30 02 FB | 	rdlong	local06, fp
1dd7c     08 4E 85 F1 | 	sub	fp, #8
1dd80     2B 30 0E F2 | 	cmp	local06, #43 wz
1dd84     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dd88     28 00 90 5D |  if_ne	jmp	#LR__2490
1dd8c     00 30 06 F6 | 	mov	local06, #0
1dd90     A7 12 02 FB | 	rdlong	arg01, fp
1dd94     18 F9 BE FD | 	call	#_convertstring
1dd98     FD 12 02 F6 | 	mov	arg01, result1
1dd9c     13 15 02 F6 | 	mov	arg02, local01
1dda0     2C 73 B0 FD | 	call	#__system___string_cmp
1dda4     01 FA 55 F2 | 	cmps	result1, #1 wc
1dda8     00 30 26 C6 |  if_b	not	local06, #0
1ddac     A7 30 62 FC | 	wrlong	local06, fp
1ddb0     94 00 90 FD | 	jmp	#LR__2493
1ddb4                 | LR__2490
1ddb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1ddb4     08 4E 05 F1 | 	add	fp, #8
1ddb8     A7 30 02 FB | 	rdlong	local06, fp
1ddbc     08 4E 85 F1 | 	sub	fp, #8
1ddc0     1F 30 0E F2 | 	cmp	local06, #31 wz
1ddc4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ddc8     2C 00 90 5D |  if_ne	jmp	#LR__2491
1ddcc     00 30 06 F6 | 	mov	local06, #0
1ddd0     A7 2C 02 FB | 	rdlong	local04, fp
1ddd4     13 13 02 F6 | 	mov	arg01, local01
1ddd8     D4 F8 BE FD | 	call	#_convertstring
1dddc     FD 14 02 F6 | 	mov	arg02, result1
1dde0     16 13 02 F6 | 	mov	arg01, local04
1dde4     E8 72 B0 FD | 	call	#__system___string_cmp
1dde8     01 FA 55 F2 | 	cmps	result1, #1 wc
1ddec     00 30 26 C6 |  if_b	not	local06, #0
1ddf0     A7 30 62 FC | 	wrlong	local06, fp
1ddf4     50 00 90 FD | 	jmp	#LR__2493
1ddf8                 | LR__2491
1ddf8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1ddf8     08 4E 05 F1 | 	add	fp, #8
1ddfc     A7 30 02 FB | 	rdlong	local06, fp
1de00     08 4E 85 F1 | 	sub	fp, #8
1de04     2B 30 0E F2 | 	cmp	local06, #43 wz
1de08     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1de0c     34 00 90 5D |  if_ne	jmp	#LR__2492
1de10     00 30 06 F6 | 	mov	local06, #0
1de14     A7 12 02 FB | 	rdlong	arg01, fp
1de18     94 F8 BE FD | 	call	#_convertstring
1de1c     FD 2C 02 F6 | 	mov	local04, result1
1de20     13 13 02 F6 | 	mov	arg01, local01
1de24     88 F8 BE FD | 	call	#_convertstring
1de28     FD 14 02 F6 | 	mov	arg02, result1
1de2c     16 13 02 F6 | 	mov	arg01, local04
1de30     9C 72 B0 FD | 	call	#__system___string_cmp
1de34     01 FA 55 F2 | 	cmps	result1, #1 wc
1de38     00 30 26 C6 |  if_b	not	local06, #0
1de3c     A7 30 62 FC | 	wrlong	local06, fp
1de40     04 00 90 FD | 	jmp	#LR__2493
1de44                 | LR__2492
1de44     A7 00 68 FC | 	wrlong	#0, fp
1de48                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1de48                 | LR__2493
1de48     08 4E 05 F1 | 	add	fp, #8
1de4c     A7 38 68 FC | 	wrlong	#28, fp
1de50     08 4E 85 F1 | 	sub	fp, #8
1de54     A7 12 02 F6 | 	mov	arg01, fp
1de58     74 F7 BE FD | 	call	#_push
1de5c     A7 F0 03 F6 | 	mov	ptra, fp
1de60     B2 00 A0 FD | 	call	#popregs_
1de64                 | _do_le_ret
1de64     2D 00 64 FD | 	ret
1de68                 | 
1de68                 | ' 
1de68                 | ' '--------------------------------- less than (<)
1de68                 | ' 
1de68                 | ' sub do_lt
1de68                 | _do_lt
1de68     07 4A 05 F6 | 	mov	COUNT_, #7
1de6c     A8 00 A0 FD | 	call	#pushregs_
1de70     18 F0 07 F1 | 	add	ptra, #24
1de74     C8 F6 BE FD | 	call	#_pop
1de78     FD 26 02 F6 | 	mov	local01, result1
1de7c     FE 2C 02 F6 | 	mov	local04, result2
1de80     FF 2E 02 F6 | 	mov	local05, result3
1de84     16 29 02 F6 | 	mov	local02, local04
1de88     17 2B 02 F6 | 	mov	local03, local05
1de8c     B0 F6 BE FD | 	call	#_pop
1de90     FF 2E 02 F6 | 	mov	local05, result3
1de94     A7 FA 61 FC | 	wrlong	result1, fp
1de98     04 4E 05 F1 | 	add	fp, #4
1de9c     A7 FC 61 FC | 	wrlong	result2, fp
1dea0     04 4E 05 F1 | 	add	fp, #4
1dea4     A7 2E 62 FC | 	wrlong	local05, fp
1dea8                 | ' 
1dea8                 | ' t2=pop()
1dea8                 | ' t1=pop()
1dea8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1dea8     08 4E 85 F1 | 	sub	fp, #8
1deac     1F 2E 0E F2 | 	cmp	local05, #31 wz
1deb0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1deb4     20 00 90 5D |  if_ne	jmp	#LR__2500
1deb8     00 30 06 F6 | 	mov	local06, #0
1debc     A7 12 02 FB | 	rdlong	arg01, fp
1dec0     13 15 02 F6 | 	mov	arg02, local01
1dec4     08 72 B0 FD | 	call	#__system___string_cmp
1dec8     00 FA 55 F2 | 	cmps	result1, #0 wc
1decc     00 30 26 C6 |  if_b	not	local06, #0
1ded0     A7 30 62 FC | 	wrlong	local06, fp
1ded4     E4 02 90 FD | 	jmp	#LR__2509
1ded8                 | LR__2500
1ded8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1ded8     08 4E 05 F1 | 	add	fp, #8
1dedc     A7 30 02 FB | 	rdlong	local06, fp
1dee0     08 4E 85 F1 | 	sub	fp, #8
1dee4     1E 30 0E F2 | 	cmp	local06, #30 wz
1dee8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1deec     24 00 90 5D |  if_ne	jmp	#LR__2501
1def0     00 30 06 F6 | 	mov	local06, #0
1def4     A7 12 02 FB | 	rdlong	arg01, fp
1def8     13 15 02 F6 | 	mov	arg02, local01
1defc     01 16 06 F6 | 	mov	arg03, #1
1df00     74 94 B0 FD | 	call	#__system___float_cmp
1df04     00 FA 55 F2 | 	cmps	result1, #0 wc
1df08     00 30 26 C6 |  if_b	not	local06, #0
1df0c     A7 30 62 FC | 	wrlong	local06, fp
1df10     A8 02 90 FD | 	jmp	#LR__2509
1df14                 | LR__2501
1df14                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1df14     08 4E 05 F1 | 	add	fp, #8
1df18     A7 30 02 FB | 	rdlong	local06, fp
1df1c     08 4E 85 F1 | 	sub	fp, #8
1df20     1E 30 0E F2 | 	cmp	local06, #30 wz
1df24     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1df28     3C 00 90 5D |  if_ne	jmp	#LR__2502
1df2c     00 30 06 F6 | 	mov	local06, #0
1df30     A7 2C 02 FB | 	rdlong	local04, fp
1df34     13 13 52 F6 | 	abs	arg01, local01 wc
1df38     1F 32 C6 C9 |  if_b	decod	local07, #31
1df3c     00 32 06 36 |  if_ae	mov	local07, #0
1df40     30 8C B0 FD | 	call	#__system___float_fromuns
1df44     19 FB 61 F5 | 	xor	result1, local07
1df48     FD 14 02 F6 | 	mov	arg02, result1
1df4c     16 13 02 F6 | 	mov	arg01, local04
1df50     01 16 06 F6 | 	mov	arg03, #1
1df54     20 94 B0 FD | 	call	#__system___float_cmp
1df58     00 FA 55 F2 | 	cmps	result1, #0 wc
1df5c     00 30 26 C6 |  if_b	not	local06, #0
1df60     A7 30 62 FC | 	wrlong	local06, fp
1df64     54 02 90 FD | 	jmp	#LR__2509
1df68                 | LR__2502
1df68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1df68     08 4E 05 F1 | 	add	fp, #8
1df6c     A7 30 02 FB | 	rdlong	local06, fp
1df70     08 4E 85 F1 | 	sub	fp, #8
1df74     1E 30 0E F2 | 	cmp	local06, #30 wz
1df78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1df7c     30 00 90 5D |  if_ne	jmp	#LR__2503
1df80     00 30 06 F6 | 	mov	local06, #0
1df84     A7 2C 02 FB | 	rdlong	local04, fp
1df88     13 13 02 F6 | 	mov	arg01, local01
1df8c     E4 8B B0 FD | 	call	#__system___float_fromuns
1df90     FD 14 02 F6 | 	mov	arg02, result1
1df94     16 13 02 F6 | 	mov	arg01, local04
1df98     01 16 06 F6 | 	mov	arg03, #1
1df9c     D8 93 B0 FD | 	call	#__system___float_cmp
1dfa0     00 FA 55 F2 | 	cmps	result1, #0 wc
1dfa4     00 30 26 C6 |  if_b	not	local06, #0
1dfa8     A7 30 62 FC | 	wrlong	local06, fp
1dfac     0C 02 90 FD | 	jmp	#LR__2509
1dfb0                 | LR__2503
1dfb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1dfb0     08 4E 05 F1 | 	add	fp, #8
1dfb4     A7 30 02 FB | 	rdlong	local06, fp
1dfb8     08 4E 85 F1 | 	sub	fp, #8
1dfbc     1C 30 0E F2 | 	cmp	local06, #28 wz
1dfc0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dfc4     3C 00 90 5D |  if_ne	jmp	#LR__2504
1dfc8     00 30 06 F6 | 	mov	local06, #0
1dfcc     A7 12 02 FB | 	rdlong	arg01, fp
1dfd0     09 13 52 F6 | 	abs	arg01, arg01 wc
1dfd4     1F 32 C6 C9 |  if_b	decod	local07, #31
1dfd8     00 32 06 36 |  if_ae	mov	local07, #0
1dfdc     94 8B B0 FD | 	call	#__system___float_fromuns
1dfe0     19 FB 61 F5 | 	xor	result1, local07
1dfe4     FD 12 02 F6 | 	mov	arg01, result1
1dfe8     13 15 02 F6 | 	mov	arg02, local01
1dfec     01 16 06 F6 | 	mov	arg03, #1
1dff0     84 93 B0 FD | 	call	#__system___float_cmp
1dff4     00 FA 55 F2 | 	cmps	result1, #0 wc
1dff8     00 30 26 C6 |  if_b	not	local06, #0
1dffc     A7 30 62 FC | 	wrlong	local06, fp
1e000     B8 01 90 FD | 	jmp	#LR__2509
1e004                 | LR__2504
1e004                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1e004     08 4E 05 F1 | 	add	fp, #8
1e008     A7 30 02 FB | 	rdlong	local06, fp
1e00c     08 4E 85 F1 | 	sub	fp, #8
1e010     1C 30 0E F2 | 	cmp	local06, #28 wz
1e014     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e018     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e01c     13 2D 52 A2 |  if_e	cmps	local04, local01 wc
1e020     18 31 A2 A1 |  if_e	subx	local06, local06
1e024     A7 30 62 AC |  if_e	wrlong	local06, fp
1e028     90 01 90 AD |  if_e	jmp	#LR__2509
1e02c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1e02c     08 4E 05 F1 | 	add	fp, #8
1e030     A7 30 02 FB | 	rdlong	local06, fp
1e034     08 4E 85 F1 | 	sub	fp, #8
1e038     1C 30 0E F2 | 	cmp	local06, #28 wz
1e03c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e040     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e044     13 2D 52 A2 |  if_e	cmps	local04, local01 wc
1e048     18 31 A2 A1 |  if_e	subx	local06, local06
1e04c     A7 30 62 AC |  if_e	wrlong	local06, fp
1e050     68 01 90 AD |  if_e	jmp	#LR__2509
1e054                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1e054     08 4E 05 F1 | 	add	fp, #8
1e058     A7 30 02 FB | 	rdlong	local06, fp
1e05c     08 4E 85 F1 | 	sub	fp, #8
1e060     1D 30 0E F2 | 	cmp	local06, #29 wz
1e064     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e068     2C 00 90 5D |  if_ne	jmp	#LR__2505
1e06c     00 30 06 F6 | 	mov	local06, #0
1e070     A7 12 02 FB | 	rdlong	arg01, fp
1e074     FC 8A B0 FD | 	call	#__system___float_fromuns
1e078     FD 12 02 F6 | 	mov	arg01, result1
1e07c     13 15 02 F6 | 	mov	arg02, local01
1e080     01 16 06 F6 | 	mov	arg03, #1
1e084     F0 92 B0 FD | 	call	#__system___float_cmp
1e088     00 FA 55 F2 | 	cmps	result1, #0 wc
1e08c     00 30 26 C6 |  if_b	not	local06, #0
1e090     A7 30 62 FC | 	wrlong	local06, fp
1e094     24 01 90 FD | 	jmp	#LR__2509
1e098                 | LR__2505
1e098                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1e098     08 4E 05 F1 | 	add	fp, #8
1e09c     A7 30 02 FB | 	rdlong	local06, fp
1e0a0     08 4E 85 F1 | 	sub	fp, #8
1e0a4     1D 30 0E F2 | 	cmp	local06, #29 wz
1e0a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e0ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e0b0     13 2D 52 A2 |  if_e	cmps	local04, local01 wc
1e0b4     18 31 A2 A1 |  if_e	subx	local06, local06
1e0b8     A7 30 62 AC |  if_e	wrlong	local06, fp
1e0bc     FC 00 90 AD |  if_e	jmp	#LR__2509
1e0c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1e0c0     08 4E 05 F1 | 	add	fp, #8
1e0c4     A7 30 02 FB | 	rdlong	local06, fp
1e0c8     08 4E 85 F1 | 	sub	fp, #8
1e0cc     1D 30 0E F2 | 	cmp	local06, #29 wz
1e0d0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e0d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e0d8     13 2D 12 A2 |  if_e	cmp	local04, local01 wc
1e0dc     18 31 A2 A1 |  if_e	subx	local06, local06
1e0e0     A7 30 62 AC |  if_e	wrlong	local06, fp
1e0e4     D4 00 90 AD |  if_e	jmp	#LR__2509
1e0e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1e0e8     08 4E 05 F1 | 	add	fp, #8
1e0ec     A7 30 02 FB | 	rdlong	local06, fp
1e0f0     08 4E 85 F1 | 	sub	fp, #8
1e0f4     2B 30 0E F2 | 	cmp	local06, #43 wz
1e0f8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e0fc     28 00 90 5D |  if_ne	jmp	#LR__2506
1e100     00 30 06 F6 | 	mov	local06, #0
1e104     A7 12 02 FB | 	rdlong	arg01, fp
1e108     A4 F5 BE FD | 	call	#_convertstring
1e10c     FD 12 02 F6 | 	mov	arg01, result1
1e110     13 15 02 F6 | 	mov	arg02, local01
1e114     B8 6F B0 FD | 	call	#__system___string_cmp
1e118     00 FA 55 F2 | 	cmps	result1, #0 wc
1e11c     00 30 26 C6 |  if_b	not	local06, #0
1e120     A7 30 62 FC | 	wrlong	local06, fp
1e124     94 00 90 FD | 	jmp	#LR__2509
1e128                 | LR__2506
1e128                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1e128     08 4E 05 F1 | 	add	fp, #8
1e12c     A7 30 02 FB | 	rdlong	local06, fp
1e130     08 4E 85 F1 | 	sub	fp, #8
1e134     1F 30 0E F2 | 	cmp	local06, #31 wz
1e138     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e13c     2C 00 90 5D |  if_ne	jmp	#LR__2507
1e140     00 30 06 F6 | 	mov	local06, #0
1e144     A7 2C 02 FB | 	rdlong	local04, fp
1e148     13 13 02 F6 | 	mov	arg01, local01
1e14c     60 F5 BE FD | 	call	#_convertstring
1e150     FD 14 02 F6 | 	mov	arg02, result1
1e154     16 13 02 F6 | 	mov	arg01, local04
1e158     74 6F B0 FD | 	call	#__system___string_cmp
1e15c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e160     00 30 26 C6 |  if_b	not	local06, #0
1e164     A7 30 62 FC | 	wrlong	local06, fp
1e168     50 00 90 FD | 	jmp	#LR__2509
1e16c                 | LR__2507
1e16c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1e16c     08 4E 05 F1 | 	add	fp, #8
1e170     A7 30 02 FB | 	rdlong	local06, fp
1e174     08 4E 85 F1 | 	sub	fp, #8
1e178     2B 30 0E F2 | 	cmp	local06, #43 wz
1e17c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e180     34 00 90 5D |  if_ne	jmp	#LR__2508
1e184     00 30 06 F6 | 	mov	local06, #0
1e188     A7 12 02 FB | 	rdlong	arg01, fp
1e18c     20 F5 BE FD | 	call	#_convertstring
1e190     FD 2C 02 F6 | 	mov	local04, result1
1e194     13 13 02 F6 | 	mov	arg01, local01
1e198     14 F5 BE FD | 	call	#_convertstring
1e19c     FD 14 02 F6 | 	mov	arg02, result1
1e1a0     16 13 02 F6 | 	mov	arg01, local04
1e1a4     28 6F B0 FD | 	call	#__system___string_cmp
1e1a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e1ac     00 30 26 C6 |  if_b	not	local06, #0
1e1b0     A7 30 62 FC | 	wrlong	local06, fp
1e1b4     04 00 90 FD | 	jmp	#LR__2509
1e1b8                 | LR__2508
1e1b8     A7 00 68 FC | 	wrlong	#0, fp
1e1bc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e1bc                 | LR__2509
1e1bc     08 4E 05 F1 | 	add	fp, #8
1e1c0     A7 38 68 FC | 	wrlong	#28, fp
1e1c4     08 4E 85 F1 | 	sub	fp, #8
1e1c8     A7 12 02 F6 | 	mov	arg01, fp
1e1cc     00 F4 BE FD | 	call	#_push
1e1d0     A7 F0 03 F6 | 	mov	ptra, fp
1e1d4     B2 00 A0 FD | 	call	#popregs_
1e1d8                 | _do_lt_ret
1e1d8     2D 00 64 FD | 	ret
1e1dc                 | 
1e1dc                 | ' 
1e1dc                 | ' '--------------------------------- minus (-)
1e1dc                 | ' 
1e1dc                 | ' sub do_minus
1e1dc                 | _do_minus
1e1dc     06 4A 05 F6 | 	mov	COUNT_, #6
1e1e0     A8 00 A0 FD | 	call	#pushregs_
1e1e4     18 F0 07 F1 | 	add	ptra, #24
1e1e8     54 F3 BE FD | 	call	#_pop
1e1ec     FD 26 02 F6 | 	mov	local01, result1
1e1f0     FE 12 02 F6 | 	mov	arg01, result2
1e1f4     FF 14 02 F6 | 	mov	arg02, result3
1e1f8     09 29 02 F6 | 	mov	local02, arg01
1e1fc     0A 2B 02 F6 | 	mov	local03, arg02
1e200     3C F3 BE FD | 	call	#_pop
1e204     FF 2C 02 F6 | 	mov	local04, result3
1e208     A7 FA 61 FC | 	wrlong	result1, fp
1e20c     04 4E 05 F1 | 	add	fp, #4
1e210     A7 FC 61 FC | 	wrlong	result2, fp
1e214     04 4E 05 F1 | 	add	fp, #4
1e218     A7 2C 62 FC | 	wrlong	local04, fp
1e21c                 | ' 
1e21c                 | ' t2=pop()
1e21c                 | ' t1=pop()
1e21c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1e21c     08 4E 85 F1 | 	sub	fp, #8
1e220     1D 2C 0E F2 | 	cmp	local04, #29 wz
1e224     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e228     30 00 90 5D |  if_ne	jmp	#LR__2510
1e22c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1e22c     A7 2E 02 FB | 	rdlong	local05, fp
1e230     17 27 12 F2 | 	cmp	local01, local05 wc
1e234     13 2F 82 C1 |  if_b	sub	local05, local01
1e238     A7 2E 62 CC |  if_b	wrlong	local05, fp
1e23c     14 02 90 CD |  if_b	jmp	#LR__2516
1e240     A7 2E 02 FB | 	rdlong	local05, fp
1e244     13 2F 82 F1 | 	sub	local05, local01
1e248     A7 2E 62 FC | 	wrlong	local05, fp
1e24c     08 4E 05 F1 | 	add	fp, #8
1e250     A7 38 68 FC | 	wrlong	#28, fp
1e254     08 4E 85 F1 | 	sub	fp, #8
1e258     F8 01 90 FD | 	jmp	#LR__2516
1e25c                 | LR__2510
1e25c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1e25c     08 4E 05 F1 | 	add	fp, #8
1e260     A7 2E 02 FB | 	rdlong	local05, fp
1e264     08 4E 85 F1 | 	sub	fp, #8
1e268     1D 2E 0E F2 | 	cmp	local05, #29 wz
1e26c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e270     A7 2E 02 AB |  if_e	rdlong	local05, fp
1e274     13 2F 82 A1 |  if_e	sub	local05, local01
1e278     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e27c     08 4E 05 A1 |  if_e	add	fp, #8
1e280     A7 38 68 AC |  if_e	wrlong	#28, fp
1e284     08 4E 85 A1 |  if_e	sub	fp, #8
1e288     C8 01 90 AD |  if_e	jmp	#LR__2516
1e28c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1e28c     08 4E 05 F1 | 	add	fp, #8
1e290     A7 2E 02 FB | 	rdlong	local05, fp
1e294     08 4E 85 F1 | 	sub	fp, #8
1e298     1D 2E 0E F2 | 	cmp	local05, #29 wz
1e29c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e2a0     2C 00 90 5D |  if_ne	jmp	#LR__2511
1e2a4     A7 12 02 FB | 	rdlong	arg01, fp
1e2a8     C8 88 B0 FD | 	call	#__system___float_fromuns
1e2ac     FD 12 02 F6 | 	mov	arg01, result1
1e2b0     13 15 02 F6 | 	mov	arg02, local01
1e2b4     1F 14 E6 F4 | 	bitnot	arg02, #31
1e2b8     FC 88 B0 FD | 	call	#__system___float_add
1e2bc     A7 FA 61 FC | 	wrlong	result1, fp
1e2c0     08 4E 05 F1 | 	add	fp, #8
1e2c4     A7 3C 68 FC | 	wrlong	#30, fp
1e2c8     08 4E 85 F1 | 	sub	fp, #8
1e2cc     84 01 90 FD | 	jmp	#LR__2516
1e2d0                 | LR__2511
1e2d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1e2d0     08 4E 05 F1 | 	add	fp, #8
1e2d4     A7 2E 02 FB | 	rdlong	local05, fp
1e2d8     08 4E 85 F1 | 	sub	fp, #8
1e2dc     1C 2E 0E F2 | 	cmp	local05, #28 wz
1e2e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e2e4     A7 2E 02 AB |  if_e	rdlong	local05, fp
1e2e8     13 2F 82 A1 |  if_e	sub	local05, local01
1e2ec     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e2f0     60 01 90 AD |  if_e	jmp	#LR__2516
1e2f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1e2f4     08 4E 05 F1 | 	add	fp, #8
1e2f8     A7 2E 02 FB | 	rdlong	local05, fp
1e2fc     08 4E 85 F1 | 	sub	fp, #8
1e300     1C 2E 0E F2 | 	cmp	local05, #28 wz
1e304     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e308     A7 2E 02 AB |  if_e	rdlong	local05, fp
1e30c     13 2F 82 A1 |  if_e	sub	local05, local01
1e310     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e314     3C 01 90 AD |  if_e	jmp	#LR__2516
1e318                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1e318     08 4E 05 F1 | 	add	fp, #8
1e31c     A7 2E 02 FB | 	rdlong	local05, fp
1e320     08 4E 85 F1 | 	sub	fp, #8
1e324     1C 2E 0E F2 | 	cmp	local05, #28 wz
1e328     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e32c     3C 00 90 5D |  if_ne	jmp	#LR__2512
1e330     A7 12 02 FB | 	rdlong	arg01, fp
1e334     09 13 52 F6 | 	abs	arg01, arg01 wc
1e338     1F 30 C6 C9 |  if_b	decod	local06, #31
1e33c     00 30 06 36 |  if_ae	mov	local06, #0
1e340     30 88 B0 FD | 	call	#__system___float_fromuns
1e344     18 FB 61 F5 | 	xor	result1, local06
1e348     FD 12 02 F6 | 	mov	arg01, result1
1e34c     13 15 02 F6 | 	mov	arg02, local01
1e350     1F 14 E6 F4 | 	bitnot	arg02, #31
1e354     60 88 B0 FD | 	call	#__system___float_add
1e358     A7 FA 61 FC | 	wrlong	result1, fp
1e35c     08 4E 05 F1 | 	add	fp, #8
1e360     A7 3C 68 FC | 	wrlong	#30, fp
1e364     08 4E 85 F1 | 	sub	fp, #8
1e368     E8 00 90 FD | 	jmp	#LR__2516
1e36c                 | LR__2512
1e36c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1e36c     08 4E 05 F1 | 	add	fp, #8
1e370     A7 2E 02 FB | 	rdlong	local05, fp
1e374     08 4E 85 F1 | 	sub	fp, #8
1e378     1E 2E 0E F2 | 	cmp	local05, #30 wz
1e37c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e380     24 00 90 5D |  if_ne	jmp	#LR__2513
1e384     A7 2E 02 FB | 	rdlong	local05, fp
1e388     13 13 02 F6 | 	mov	arg01, local01
1e38c     E4 87 B0 FD | 	call	#__system___float_fromuns
1e390     FD 14 02 F6 | 	mov	arg02, result1
1e394     17 13 02 F6 | 	mov	arg01, local05
1e398     1F 14 E6 F4 | 	bitnot	arg02, #31
1e39c     18 88 B0 FD | 	call	#__system___float_add
1e3a0     A7 FA 61 FC | 	wrlong	result1, fp
1e3a4     AC 00 90 FD | 	jmp	#LR__2516
1e3a8                 | LR__2513
1e3a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1e3a8     08 4E 05 F1 | 	add	fp, #8
1e3ac     A7 2E 02 FB | 	rdlong	local05, fp
1e3b0     08 4E 85 F1 | 	sub	fp, #8
1e3b4     1E 2E 0E F2 | 	cmp	local05, #30 wz
1e3b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e3bc     30 00 90 5D |  if_ne	jmp	#LR__2514
1e3c0     A7 2E 02 FB | 	rdlong	local05, fp
1e3c4     13 13 52 F6 | 	abs	arg01, local01 wc
1e3c8     1F 30 C6 C9 |  if_b	decod	local06, #31
1e3cc     00 30 06 36 |  if_ae	mov	local06, #0
1e3d0     A0 87 B0 FD | 	call	#__system___float_fromuns
1e3d4     18 FB 61 F5 | 	xor	result1, local06
1e3d8     FD 14 02 F6 | 	mov	arg02, result1
1e3dc     17 13 02 F6 | 	mov	arg01, local05
1e3e0     1F 14 E6 F4 | 	bitnot	arg02, #31
1e3e4     D0 87 B0 FD | 	call	#__system___float_add
1e3e8     A7 FA 61 FC | 	wrlong	result1, fp
1e3ec     64 00 90 FD | 	jmp	#LR__2516
1e3f0                 | LR__2514
1e3f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1e3f0     08 4E 05 F1 | 	add	fp, #8
1e3f4     A7 2E 02 FB | 	rdlong	local05, fp
1e3f8     08 4E 85 F1 | 	sub	fp, #8
1e3fc     1E 2E 0E F2 | 	cmp	local05, #30 wz
1e400     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e404     18 00 90 5D |  if_ne	jmp	#LR__2515
1e408     A7 12 02 FB | 	rdlong	arg01, fp
1e40c     13 15 02 F6 | 	mov	arg02, local01
1e410     1F 14 E6 F4 | 	bitnot	arg02, #31
1e414     A0 87 B0 FD | 	call	#__system___float_add
1e418     A7 FA 61 FC | 	wrlong	result1, fp
1e41c     34 00 90 FD | 	jmp	#LR__2516
1e420                 | LR__2515
1e420                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1e420     08 4E 05 F1 | 	add	fp, #8
1e424     A7 2E 02 FB | 	rdlong	local05, fp
1e428     08 4E 85 F1 | 	sub	fp, #8
1e42c     1F 2E 0E F2 | 	cmp	local05, #31 wz
1e430     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e434     A7 06 68 AC |  if_e	wrlong	#3, fp
1e438     08 4E 05 A1 |  if_e	add	fp, #8
1e43c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e440     08 4E 85 A1 |  if_e	sub	fp, #8
1e444     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1e448     08 4E 05 51 |  if_ne	add	fp, #8
1e44c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e450     08 4E 85 51 |  if_ne	sub	fp, #8
1e454                 | LR__2516
1e454     A7 12 02 F6 | 	mov	arg01, fp
1e458     74 F1 BE FD | 	call	#_push
1e45c     A7 F0 03 F6 | 	mov	ptra, fp
1e460     B2 00 A0 FD | 	call	#popregs_
1e464                 | _do_minus_ret
1e464     2D 00 64 FD | 	ret
1e468                 | 
1e468                 | ' 
1e468                 | ' '--------------------------------- negative (-), one argument negative
1e468                 | ' 
1e468                 | ' sub do_negative
1e468                 | _do_negative
1e468     02 4A 05 F6 | 	mov	COUNT_, #2
1e46c     A8 00 A0 FD | 	call	#pushregs_
1e470     0C F0 07 F1 | 	add	ptra, #12
1e474     C8 F0 BE FD | 	call	#_pop
1e478     FF 26 02 F6 | 	mov	local01, result3
1e47c     A7 FA 61 FC | 	wrlong	result1, fp
1e480     04 4E 05 F1 | 	add	fp, #4
1e484     A7 FC 61 FC | 	wrlong	result2, fp
1e488     04 4E 05 F1 | 	add	fp, #4
1e48c     A7 26 62 FC | 	wrlong	local01, fp
1e490                 | ' 
1e490                 | ' t1=pop()
1e490                 | ' if t1.result_type=result_int then 
1e490     08 4E 85 F1 | 	sub	fp, #8
1e494     1C 26 0E F2 | 	cmp	local01, #28 wz
1e498     A7 28 02 AB |  if_e	rdlong	local02, fp
1e49c     14 27 62 A6 |  if_e	neg	local01, local02
1e4a0     A7 26 62 AC |  if_e	wrlong	local01, fp
1e4a4     58 00 90 AD |  if_e	jmp	#LR__2521
1e4a8     08 4E 05 F1 | 	add	fp, #8
1e4ac     A7 26 02 FB | 	rdlong	local01, fp
1e4b0     08 4E 85 F1 | 	sub	fp, #8
1e4b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4b8     A7 28 02 AB |  if_e	rdlong	local02, fp
1e4bc     14 27 62 A6 |  if_e	neg	local01, local02
1e4c0     A7 26 62 AC |  if_e	wrlong	local01, fp
1e4c4     08 4E 05 A1 |  if_e	add	fp, #8
1e4c8     A7 38 68 AC |  if_e	wrlong	#28, fp
1e4cc     08 4E 85 A1 |  if_e	sub	fp, #8
1e4d0     2C 00 90 AD |  if_e	jmp	#LR__2520
1e4d4     08 4E 05 F1 | 	add	fp, #8
1e4d8     A7 26 02 FB | 	rdlong	local01, fp
1e4dc     08 4E 85 F1 | 	sub	fp, #8
1e4e0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e4e4     A7 FA 01 AB |  if_e	rdlong	result1, fp
1e4e8     1F FA E5 A4 |  if_e	bitnot	result1, #31
1e4ec     A7 FA 61 AC |  if_e	wrlong	result1, fp
1e4f0     08 4E 05 51 |  if_ne	add	fp, #8
1e4f4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e4f8     08 4E 85 51 |  if_ne	sub	fp, #8
1e4fc     A7 50 68 5C |  if_ne	wrlong	#40, fp
1e500                 | LR__2520
1e500                 | LR__2521
1e500     A7 12 02 F6 | 	mov	arg01, fp
1e504     C8 F0 BE FD | 	call	#_push
1e508     A7 F0 03 F6 | 	mov	ptra, fp
1e50c     B2 00 A0 FD | 	call	#popregs_
1e510                 | _do_negative_ret
1e510     2D 00 64 FD | 	ret
1e514                 | 
1e514                 | ' 
1e514                 | ' '--------------------------------- MOD (modulo)
1e514                 | ' 
1e514                 | ' sub do_mod 
1e514                 | _do_mod
1e514     04 4A 05 F6 | 	mov	COUNT_, #4
1e518     A8 00 A0 FD | 	call	#pushregs_
1e51c     18 F0 07 F1 | 	add	ptra, #24
1e520     1C F0 BE FD | 	call	#_pop
1e524     FD 26 02 F6 | 	mov	local01, result1
1e528     FE 90 02 F6 | 	mov	muldivb_, result2
1e52c     FF 8E 02 F6 | 	mov	muldiva_, result3
1e530     48 29 02 F6 | 	mov	local02, muldivb_
1e534     47 2B 02 F6 | 	mov	local03, muldiva_
1e538     04 F0 BE FD | 	call	#_pop
1e53c     A7 FA 61 FC | 	wrlong	result1, fp
1e540     04 4E 05 F1 | 	add	fp, #4
1e544     A7 FC 61 FC | 	wrlong	result2, fp
1e548     04 4E 05 F1 | 	add	fp, #4
1e54c     A7 FE 61 FC | 	wrlong	result3, fp
1e550                 | ' 
1e550                 | ' t2=pop()
1e550                 | ' t1=pop()
1e550                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1e550     08 4E 85 F1 | 	sub	fp, #8
1e554     1F FE 0D F2 | 	cmp	result3, #31 wz
1e558     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e55c     A7 14 68 AC |  if_e	wrlong	#10, fp
1e560     08 4E 05 A1 |  if_e	add	fp, #8
1e564     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e568     08 4E 85 A1 |  if_e	sub	fp, #8
1e56c     10 01 90 AD |  if_e	jmp	#LR__2534
1e570                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1e570     08 4E 05 F1 | 	add	fp, #8
1e574     A7 90 02 FB | 	rdlong	muldivb_, fp
1e578     08 4E 85 F1 | 	sub	fp, #8
1e57c     1E 90 0E F2 | 	cmp	muldivb_, #30 wz
1e580     1C 00 90 5D |  if_ne	jmp	#LR__2530
1e584     08 4E 05 F1 | 	add	fp, #8
1e588     A7 38 68 FC | 	wrlong	#28, fp
1e58c     08 4E 85 F1 | 	sub	fp, #8
1e590     A7 12 02 FB | 	rdlong	arg01, fp
1e594     00 14 06 F6 | 	mov	arg02, #0
1e598     64 8E B0 FD | 	call	#__system___float_tointeger
1e59c     A7 FA 61 FC | 	wrlong	result1, fp
1e5a0                 | LR__2530
1e5a0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1e5a0     1E 2A 0E F2 | 	cmp	local03, #30 wz
1e5a4     14 00 90 5D |  if_ne	jmp	#LR__2531
1e5a8     1C 2A 06 F6 | 	mov	local03, #28
1e5ac     13 13 02 F6 | 	mov	arg01, local01
1e5b0     00 14 06 F6 | 	mov	arg02, #0
1e5b4     48 8E B0 FD | 	call	#__system___float_tointeger
1e5b8     FD 26 02 F6 | 	mov	local01, result1
1e5bc                 | LR__2531
1e5bc     08 4E 05 F1 | 	add	fp, #8
1e5c0     A7 2C 02 FB | 	rdlong	local04, fp
1e5c4     08 4E 85 F1 | 	sub	fp, #8
1e5c8     1D 2C 0E F2 | 	cmp	local04, #29 wz
1e5cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e5d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e5d4     13 2D 12 AD |  if_e	qdiv	local04, local01
1e5d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1e5d8     19 2C 62 AD |  if_e	getqy	local04
1e5dc     A7 2C 62 AC |  if_e	wrlong	local04, fp
1e5e0     9C 00 90 AD |  if_e	jmp	#LR__2534
1e5e4     08 4E 05 F1 | 	add	fp, #8
1e5e8     A7 2C 02 FB | 	rdlong	local04, fp
1e5ec     08 4E 85 F1 | 	sub	fp, #8
1e5f0     1D 2C 0E F2 | 	cmp	local04, #29 wz
1e5f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e5f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e5fc     13 2D 12 AD |  if_e	qdiv	local04, local01
1e600                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1e600     19 2C 62 AD |  if_e	getqy	local04
1e604     A7 2C 62 AC |  if_e	wrlong	local04, fp
1e608     08 4E 05 A1 |  if_e	add	fp, #8
1e60c     A7 38 68 AC |  if_e	wrlong	#28, fp
1e610     08 4E 85 A1 |  if_e	sub	fp, #8
1e614     68 00 90 AD |  if_e	jmp	#LR__2534
1e618                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1e618     08 4E 05 F1 | 	add	fp, #8
1e61c     A7 2C 02 FB | 	rdlong	local04, fp
1e620     08 4E 85 F1 | 	sub	fp, #8
1e624     1C 2C 0E F2 | 	cmp	local04, #28 wz
1e628     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e62c     14 00 90 5D |  if_ne	jmp	#LR__2532
1e630     A7 8E 02 FB | 	rdlong	muldiva_, fp
1e634     13 91 02 F6 | 	mov	muldivb_, local01
1e638     BA 00 A0 FD | 	call	#divide_
1e63c     A7 8E 62 FC | 	wrlong	muldiva_, fp
1e640     3C 00 90 FD | 	jmp	#LR__2534
1e644                 | LR__2532
1e644                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1e644     08 4E 05 F1 | 	add	fp, #8
1e648     A7 2C 02 FB | 	rdlong	local04, fp
1e64c     08 4E 85 F1 | 	sub	fp, #8
1e650     1C 2C 0E F2 | 	cmp	local04, #28 wz
1e654     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e658     14 00 90 5D |  if_ne	jmp	#LR__2533
1e65c     A7 8E 02 FB | 	rdlong	muldiva_, fp
1e660     13 91 02 F6 | 	mov	muldivb_, local01
1e664     BA 00 A0 FD | 	call	#divide_
1e668     A7 8E 62 FC | 	wrlong	muldiva_, fp
1e66c     10 00 90 FD | 	jmp	#LR__2534
1e670                 | LR__2533
1e670     A7 16 68 FC | 	wrlong	#11, fp
1e674     08 4E 05 F1 | 	add	fp, #8
1e678     A7 FE 69 FC | 	wrlong	#255, fp
1e67c     08 4E 85 F1 | 	sub	fp, #8
1e680                 | LR__2534
1e680     A7 12 02 F6 | 	mov	arg01, fp
1e684     48 EF BE FD | 	call	#_push
1e688     A7 F0 03 F6 | 	mov	ptra, fp
1e68c     B2 00 A0 FD | 	call	#popregs_
1e690                 | _do_mod_ret
1e690     2D 00 64 FD | 	ret
1e694                 | 
1e694                 | ' 
1e694                 | ' '--------------------------------- mul (*)
1e694                 | ' 
1e694                 | ' sub do_mul
1e694                 | _do_mul
1e694     06 4A 05 F6 | 	mov	COUNT_, #6
1e698     A8 00 A0 FD | 	call	#pushregs_
1e69c     18 F0 07 F1 | 	add	ptra, #24
1e6a0     9C EE BE FD | 	call	#_pop
1e6a4     FD 26 02 F6 | 	mov	local01, result1
1e6a8     FE 2C 02 F6 | 	mov	local04, result2
1e6ac     FF 14 02 F6 | 	mov	arg02, result3
1e6b0     16 29 02 F6 | 	mov	local02, local04
1e6b4     0A 2B 02 F6 | 	mov	local03, arg02
1e6b8     84 EE BE FD | 	call	#_pop
1e6bc     FF 14 02 F6 | 	mov	arg02, result3
1e6c0     A7 FA 61 FC | 	wrlong	result1, fp
1e6c4     04 4E 05 F1 | 	add	fp, #4
1e6c8     A7 FC 61 FC | 	wrlong	result2, fp
1e6cc     04 4E 05 F1 | 	add	fp, #4
1e6d0     A7 14 62 FC | 	wrlong	arg02, fp
1e6d4     08 4E 85 F1 | 	sub	fp, #8
1e6d8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e6dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e6e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6e4     13 2D 02 AD |  if_e	qmul	local04, local01
1e6e8                 | ' 
1e6e8                 | ' t2=pop()
1e6e8                 | ' t1=pop()
1e6e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1e6e8     18 2E 62 AD |  if_e	getqx	local05
1e6ec     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e6f0     F0 01 90 AD |  if_e	jmp	#LR__2545
1e6f4     08 4E 05 F1 | 	add	fp, #8
1e6f8     A7 2E 02 FB | 	rdlong	local05, fp
1e6fc     08 4E 85 F1 | 	sub	fp, #8
1e700     1D 2E 0E F2 | 	cmp	local05, #29 wz
1e704     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e708     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e70c     13 2D 02 AD |  if_e	qmul	local04, local01
1e710                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1e710     18 2E 62 AD |  if_e	getqx	local05
1e714     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e718     08 4E 05 A1 |  if_e	add	fp, #8
1e71c     A7 38 68 AC |  if_e	wrlong	#28, fp
1e720     08 4E 85 A1 |  if_e	sub	fp, #8
1e724     BC 01 90 AD |  if_e	jmp	#LR__2545
1e728                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e728     08 4E 05 F1 | 	add	fp, #8
1e72c     A7 2E 02 FB | 	rdlong	local05, fp
1e730     08 4E 85 F1 | 	sub	fp, #8
1e734     1D 2E 0E F2 | 	cmp	local05, #29 wz
1e738     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e73c     28 00 90 5D |  if_ne	jmp	#LR__2540
1e740     A7 12 02 FB | 	rdlong	arg01, fp
1e744     2C 84 B0 FD | 	call	#__system___float_fromuns
1e748     FD 12 02 F6 | 	mov	arg01, result1
1e74c     13 15 02 F6 | 	mov	arg02, local01
1e750     20 88 B0 FD | 	call	#__system___float_mul
1e754     A7 FA 61 FC | 	wrlong	result1, fp
1e758     08 4E 05 F1 | 	add	fp, #8
1e75c     A7 3C 68 FC | 	wrlong	#30, fp
1e760     08 4E 85 F1 | 	sub	fp, #8
1e764     7C 01 90 FD | 	jmp	#LR__2545
1e768                 | LR__2540
1e768     08 4E 05 F1 | 	add	fp, #8
1e76c     A7 2E 02 FB | 	rdlong	local05, fp
1e770     08 4E 85 F1 | 	sub	fp, #8
1e774     1C 2E 0E F2 | 	cmp	local05, #28 wz
1e778     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e77c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e780     13 2D 02 AD |  if_e	qmul	local04, local01
1e784                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1e784     18 2E 62 AD |  if_e	getqx	local05
1e788     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e78c     54 01 90 AD |  if_e	jmp	#LR__2545
1e790     08 4E 05 F1 | 	add	fp, #8
1e794     A7 2E 02 FB | 	rdlong	local05, fp
1e798     08 4E 85 F1 | 	sub	fp, #8
1e79c     1C 2E 0E F2 | 	cmp	local05, #28 wz
1e7a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e7a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7a8     13 2D 02 AD |  if_e	qmul	local04, local01
1e7ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1e7ac     18 2E 62 AD |  if_e	getqx	local05
1e7b0     A7 2E 62 AC |  if_e	wrlong	local05, fp
1e7b4     2C 01 90 AD |  if_e	jmp	#LR__2545
1e7b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e7b8     08 4E 05 F1 | 	add	fp, #8
1e7bc     A7 2E 02 FB | 	rdlong	local05, fp
1e7c0     08 4E 85 F1 | 	sub	fp, #8
1e7c4     1C 2E 0E F2 | 	cmp	local05, #28 wz
1e7c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e7cc     38 00 90 5D |  if_ne	jmp	#LR__2541
1e7d0     A7 12 02 FB | 	rdlong	arg01, fp
1e7d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e7d8     1F 30 C6 C9 |  if_b	decod	local06, #31
1e7dc     00 30 06 36 |  if_ae	mov	local06, #0
1e7e0     90 83 B0 FD | 	call	#__system___float_fromuns
1e7e4     18 FB 61 F5 | 	xor	result1, local06
1e7e8     FD 12 02 F6 | 	mov	arg01, result1
1e7ec     13 15 02 F6 | 	mov	arg02, local01
1e7f0     80 87 B0 FD | 	call	#__system___float_mul
1e7f4     A7 FA 61 FC | 	wrlong	result1, fp
1e7f8     08 4E 05 F1 | 	add	fp, #8
1e7fc     A7 3C 68 FC | 	wrlong	#30, fp
1e800     08 4E 85 F1 | 	sub	fp, #8
1e804     DC 00 90 FD | 	jmp	#LR__2545
1e808                 | LR__2541
1e808                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e808     08 4E 05 F1 | 	add	fp, #8
1e80c     A7 2E 02 FB | 	rdlong	local05, fp
1e810     08 4E 85 F1 | 	sub	fp, #8
1e814     1E 2E 0E F2 | 	cmp	local05, #30 wz
1e818     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e81c     20 00 90 5D |  if_ne	jmp	#LR__2542
1e820     A7 2E 02 FB | 	rdlong	local05, fp
1e824     13 13 02 F6 | 	mov	arg01, local01
1e828     48 83 B0 FD | 	call	#__system___float_fromuns
1e82c     FD 14 02 F6 | 	mov	arg02, result1
1e830     17 13 02 F6 | 	mov	arg01, local05
1e834     3C 87 B0 FD | 	call	#__system___float_mul
1e838     A7 FA 61 FC | 	wrlong	result1, fp
1e83c     A4 00 90 FD | 	jmp	#LR__2545
1e840                 | LR__2542
1e840                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e840     08 4E 05 F1 | 	add	fp, #8
1e844     A7 2E 02 FB | 	rdlong	local05, fp
1e848     08 4E 85 F1 | 	sub	fp, #8
1e84c     1E 2E 0E F2 | 	cmp	local05, #30 wz
1e850     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e854     2C 00 90 5D |  if_ne	jmp	#LR__2543
1e858     A7 2E 02 FB | 	rdlong	local05, fp
1e85c     13 13 52 F6 | 	abs	arg01, local01 wc
1e860     1F 30 C6 C9 |  if_b	decod	local06, #31
1e864     00 30 06 36 |  if_ae	mov	local06, #0
1e868     08 83 B0 FD | 	call	#__system___float_fromuns
1e86c     18 FB 61 F5 | 	xor	result1, local06
1e870     FD 14 02 F6 | 	mov	arg02, result1
1e874     17 13 02 F6 | 	mov	arg01, local05
1e878     F8 86 B0 FD | 	call	#__system___float_mul
1e87c     A7 FA 61 FC | 	wrlong	result1, fp
1e880     60 00 90 FD | 	jmp	#LR__2545
1e884                 | LR__2543
1e884                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e884     08 4E 05 F1 | 	add	fp, #8
1e888     A7 2E 02 FB | 	rdlong	local05, fp
1e88c     08 4E 85 F1 | 	sub	fp, #8
1e890     1E 2E 0E F2 | 	cmp	local05, #30 wz
1e894     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e898     14 00 90 5D |  if_ne	jmp	#LR__2544
1e89c     A7 12 02 FB | 	rdlong	arg01, fp
1e8a0     13 15 02 F6 | 	mov	arg02, local01
1e8a4     CC 86 B0 FD | 	call	#__system___float_mul
1e8a8     A7 FA 61 FC | 	wrlong	result1, fp
1e8ac     34 00 90 FD | 	jmp	#LR__2545
1e8b0                 | LR__2544
1e8b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e8b0     08 4E 05 F1 | 	add	fp, #8
1e8b4     A7 2E 02 FB | 	rdlong	local05, fp
1e8b8     08 4E 85 F1 | 	sub	fp, #8
1e8bc     1F 2E 0E F2 | 	cmp	local05, #31 wz
1e8c0     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e8c4     A7 10 68 AC |  if_e	wrlong	#8, fp
1e8c8     08 4E 05 A1 |  if_e	add	fp, #8
1e8cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e8d0     08 4E 85 A1 |  if_e	sub	fp, #8
1e8d4     A7 12 68 5C |  if_ne	wrlong	#9, fp
1e8d8     08 4E 05 51 |  if_ne	add	fp, #8
1e8dc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e8e0     08 4E 85 51 |  if_ne	sub	fp, #8
1e8e4                 | LR__2545
1e8e4     A7 12 02 F6 | 	mov	arg01, fp
1e8e8     E4 EC BE FD | 	call	#_push
1e8ec     A7 F0 03 F6 | 	mov	ptra, fp
1e8f0     B2 00 A0 FD | 	call	#popregs_
1e8f4                 | _do_mul_ret
1e8f4     2D 00 64 FD | 	ret
1e8f8                 | 
1e8f8                 | ' 
1e8f8                 | ' '--------------------------------- not equal (<>)
1e8f8                 | ' 
1e8f8                 | ' sub do_ne
1e8f8                 | _do_ne
1e8f8     07 4A 05 F6 | 	mov	COUNT_, #7
1e8fc     A8 00 A0 FD | 	call	#pushregs_
1e900     18 F0 07 F1 | 	add	ptra, #24
1e904     38 EC BE FD | 	call	#_pop
1e908     FD 26 02 F6 | 	mov	local01, result1
1e90c     FE 2C 02 F6 | 	mov	local04, result2
1e910     FF 2E 02 F6 | 	mov	local05, result3
1e914     16 29 02 F6 | 	mov	local02, local04
1e918     17 2B 02 F6 | 	mov	local03, local05
1e91c     20 EC BE FD | 	call	#_pop
1e920     FF 2E 02 F6 | 	mov	local05, result3
1e924     A7 FA 61 FC | 	wrlong	result1, fp
1e928     04 4E 05 F1 | 	add	fp, #4
1e92c     A7 FC 61 FC | 	wrlong	result2, fp
1e930     04 4E 05 F1 | 	add	fp, #4
1e934     A7 2E 62 FC | 	wrlong	local05, fp
1e938                 | ' 
1e938                 | ' t2=pop()
1e938                 | ' t1=pop()
1e938                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e938     08 4E 85 F1 | 	sub	fp, #8
1e93c     1F 2E 0E F2 | 	cmp	local05, #31 wz
1e940     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e944     20 00 90 5D |  if_ne	jmp	#LR__2550
1e948     00 30 06 F6 | 	mov	local06, #0
1e94c     A7 12 02 FB | 	rdlong	arg01, fp
1e950     13 15 02 F6 | 	mov	arg02, local01
1e954     78 67 B0 FD | 	call	#__system___string_cmp
1e958     00 FA 0D F2 | 	cmp	result1, #0 wz
1e95c     00 30 26 56 |  if_ne	not	local06, #0
1e960     A7 30 62 FC | 	wrlong	local06, fp
1e964     04 03 90 FD | 	jmp	#LR__2563
1e968                 | LR__2550
1e968                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e968     08 4E 05 F1 | 	add	fp, #8
1e96c     A7 30 02 FB | 	rdlong	local06, fp
1e970     08 4E 85 F1 | 	sub	fp, #8
1e974     1E 30 0E F2 | 	cmp	local06, #30 wz
1e978     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e97c     24 00 90 5D |  if_ne	jmp	#LR__2551
1e980     00 30 06 F6 | 	mov	local06, #0
1e984     A7 12 02 FB | 	rdlong	arg01, fp
1e988     13 15 02 F6 | 	mov	arg02, local01
1e98c     01 16 06 F6 | 	mov	arg03, #1
1e990     E4 89 B0 FD | 	call	#__system___float_cmp
1e994     00 FA 0D F2 | 	cmp	result1, #0 wz
1e998     00 30 26 56 |  if_ne	not	local06, #0
1e99c     A7 30 62 FC | 	wrlong	local06, fp
1e9a0     C8 02 90 FD | 	jmp	#LR__2563
1e9a4                 | LR__2551
1e9a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e9a4     08 4E 05 F1 | 	add	fp, #8
1e9a8     A7 30 02 FB | 	rdlong	local06, fp
1e9ac     08 4E 85 F1 | 	sub	fp, #8
1e9b0     1E 30 0E F2 | 	cmp	local06, #30 wz
1e9b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e9b8     3C 00 90 5D |  if_ne	jmp	#LR__2552
1e9bc     00 30 06 F6 | 	mov	local06, #0
1e9c0     A7 2C 02 FB | 	rdlong	local04, fp
1e9c4     13 13 52 F6 | 	abs	arg01, local01 wc
1e9c8     1F 32 C6 C9 |  if_b	decod	local07, #31
1e9cc     00 32 06 36 |  if_ae	mov	local07, #0
1e9d0     A0 81 B0 FD | 	call	#__system___float_fromuns
1e9d4     19 FB 61 F5 | 	xor	result1, local07
1e9d8     FD 14 02 F6 | 	mov	arg02, result1
1e9dc     16 13 02 F6 | 	mov	arg01, local04
1e9e0     01 16 06 F6 | 	mov	arg03, #1
1e9e4     90 89 B0 FD | 	call	#__system___float_cmp
1e9e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9ec     00 30 26 56 |  if_ne	not	local06, #0
1e9f0     A7 30 62 FC | 	wrlong	local06, fp
1e9f4     74 02 90 FD | 	jmp	#LR__2563
1e9f8                 | LR__2552
1e9f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e9f8     08 4E 05 F1 | 	add	fp, #8
1e9fc     A7 30 02 FB | 	rdlong	local06, fp
1ea00     08 4E 85 F1 | 	sub	fp, #8
1ea04     1E 30 0E F2 | 	cmp	local06, #30 wz
1ea08     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea0c     30 00 90 5D |  if_ne	jmp	#LR__2553
1ea10     00 30 06 F6 | 	mov	local06, #0
1ea14     A7 2C 02 FB | 	rdlong	local04, fp
1ea18     13 13 02 F6 | 	mov	arg01, local01
1ea1c     54 81 B0 FD | 	call	#__system___float_fromuns
1ea20     FD 14 02 F6 | 	mov	arg02, result1
1ea24     16 13 02 F6 | 	mov	arg01, local04
1ea28     01 16 06 F6 | 	mov	arg03, #1
1ea2c     48 89 B0 FD | 	call	#__system___float_cmp
1ea30     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea34     00 30 26 56 |  if_ne	not	local06, #0
1ea38     A7 30 62 FC | 	wrlong	local06, fp
1ea3c     2C 02 90 FD | 	jmp	#LR__2563
1ea40                 | LR__2553
1ea40                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1ea40     08 4E 05 F1 | 	add	fp, #8
1ea44     A7 30 02 FB | 	rdlong	local06, fp
1ea48     08 4E 85 F1 | 	sub	fp, #8
1ea4c     1C 30 0E F2 | 	cmp	local06, #28 wz
1ea50     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ea54     3C 00 90 5D |  if_ne	jmp	#LR__2554
1ea58     00 30 06 F6 | 	mov	local06, #0
1ea5c     A7 12 02 FB | 	rdlong	arg01, fp
1ea60     09 13 52 F6 | 	abs	arg01, arg01 wc
1ea64     1F 32 C6 C9 |  if_b	decod	local07, #31
1ea68     00 32 06 36 |  if_ae	mov	local07, #0
1ea6c     04 81 B0 FD | 	call	#__system___float_fromuns
1ea70     19 FB 61 F5 | 	xor	result1, local07
1ea74     FD 12 02 F6 | 	mov	arg01, result1
1ea78     13 15 02 F6 | 	mov	arg02, local01
1ea7c     01 16 06 F6 | 	mov	arg03, #1
1ea80     F4 88 B0 FD | 	call	#__system___float_cmp
1ea84     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea88     00 30 26 56 |  if_ne	not	local06, #0
1ea8c     A7 30 62 FC | 	wrlong	local06, fp
1ea90     D8 01 90 FD | 	jmp	#LR__2563
1ea94                 | LR__2554
1ea94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1ea94     08 4E 05 F1 | 	add	fp, #8
1ea98     A7 30 02 FB | 	rdlong	local06, fp
1ea9c     08 4E 85 F1 | 	sub	fp, #8
1eaa0     1C 30 0E F2 | 	cmp	local06, #28 wz
1eaa4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eaa8     18 00 90 5D |  if_ne	jmp	#LR__2555
1eaac     00 30 06 F6 | 	mov	local06, #0
1eab0     A7 2C 02 FB | 	rdlong	local04, fp
1eab4     13 2D 0A F2 | 	cmp	local04, local01 wz
1eab8     01 30 66 56 |  if_ne	neg	local06, #1
1eabc     A7 30 62 FC | 	wrlong	local06, fp
1eac0     A8 01 90 FD | 	jmp	#LR__2563
1eac4                 | LR__2555
1eac4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1eac4     08 4E 05 F1 | 	add	fp, #8
1eac8     A7 30 02 FB | 	rdlong	local06, fp
1eacc     08 4E 85 F1 | 	sub	fp, #8
1ead0     1C 30 0E F2 | 	cmp	local06, #28 wz
1ead4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ead8     18 00 90 5D |  if_ne	jmp	#LR__2556
1eadc     00 30 06 F6 | 	mov	local06, #0
1eae0     A7 2C 02 FB | 	rdlong	local04, fp
1eae4     13 2D 0A F2 | 	cmp	local04, local01 wz
1eae8     01 30 66 56 |  if_ne	neg	local06, #1
1eaec     A7 30 62 FC | 	wrlong	local06, fp
1eaf0     78 01 90 FD | 	jmp	#LR__2563
1eaf4                 | LR__2556
1eaf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1eaf4     08 4E 05 F1 | 	add	fp, #8
1eaf8     A7 30 02 FB | 	rdlong	local06, fp
1eafc     08 4E 85 F1 | 	sub	fp, #8
1eb00     1D 30 0E F2 | 	cmp	local06, #29 wz
1eb04     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1eb08     2C 00 90 5D |  if_ne	jmp	#LR__2557
1eb0c     00 30 06 F6 | 	mov	local06, #0
1eb10     A7 12 02 FB | 	rdlong	arg01, fp
1eb14     5C 80 B0 FD | 	call	#__system___float_fromuns
1eb18     FD 12 02 F6 | 	mov	arg01, result1
1eb1c     13 15 02 F6 | 	mov	arg02, local01
1eb20     01 16 06 F6 | 	mov	arg03, #1
1eb24     50 88 B0 FD | 	call	#__system___float_cmp
1eb28     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb2c     00 30 26 56 |  if_ne	not	local06, #0
1eb30     A7 30 62 FC | 	wrlong	local06, fp
1eb34     34 01 90 FD | 	jmp	#LR__2563
1eb38                 | LR__2557
1eb38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1eb38     08 4E 05 F1 | 	add	fp, #8
1eb3c     A7 30 02 FB | 	rdlong	local06, fp
1eb40     08 4E 85 F1 | 	sub	fp, #8
1eb44     1D 30 0E F2 | 	cmp	local06, #29 wz
1eb48     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eb4c     18 00 90 5D |  if_ne	jmp	#LR__2558
1eb50     00 30 06 F6 | 	mov	local06, #0
1eb54     A7 2C 02 FB | 	rdlong	local04, fp
1eb58     13 2D 0A F2 | 	cmp	local04, local01 wz
1eb5c     01 30 66 56 |  if_ne	neg	local06, #1
1eb60     A7 30 62 FC | 	wrlong	local06, fp
1eb64     04 01 90 FD | 	jmp	#LR__2563
1eb68                 | LR__2558
1eb68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1eb68     08 4E 05 F1 | 	add	fp, #8
1eb6c     A7 30 02 FB | 	rdlong	local06, fp
1eb70     08 4E 85 F1 | 	sub	fp, #8
1eb74     1D 30 0E F2 | 	cmp	local06, #29 wz
1eb78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eb7c     18 00 90 5D |  if_ne	jmp	#LR__2559
1eb80     00 30 06 F6 | 	mov	local06, #0
1eb84     A7 2C 02 FB | 	rdlong	local04, fp
1eb88     13 2D 0A F2 | 	cmp	local04, local01 wz
1eb8c     01 30 66 56 |  if_ne	neg	local06, #1
1eb90     A7 30 62 FC | 	wrlong	local06, fp
1eb94     D4 00 90 FD | 	jmp	#LR__2563
1eb98                 | LR__2559
1eb98                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1eb98     08 4E 05 F1 | 	add	fp, #8
1eb9c     A7 30 02 FB | 	rdlong	local06, fp
1eba0     08 4E 85 F1 | 	sub	fp, #8
1eba4     2B 30 0E F2 | 	cmp	local06, #43 wz
1eba8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ebac     28 00 90 5D |  if_ne	jmp	#LR__2560
1ebb0     00 30 06 F6 | 	mov	local06, #0
1ebb4     A7 12 02 FB | 	rdlong	arg01, fp
1ebb8     F4 EA BE FD | 	call	#_convertstring
1ebbc     FD 12 02 F6 | 	mov	arg01, result1
1ebc0     13 15 02 F6 | 	mov	arg02, local01
1ebc4     08 65 B0 FD | 	call	#__system___string_cmp
1ebc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ebcc     00 30 26 56 |  if_ne	not	local06, #0
1ebd0     A7 30 62 FC | 	wrlong	local06, fp
1ebd4     94 00 90 FD | 	jmp	#LR__2563
1ebd8                 | LR__2560
1ebd8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1ebd8     08 4E 05 F1 | 	add	fp, #8
1ebdc     A7 30 02 FB | 	rdlong	local06, fp
1ebe0     08 4E 85 F1 | 	sub	fp, #8
1ebe4     1F 30 0E F2 | 	cmp	local06, #31 wz
1ebe8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ebec     2C 00 90 5D |  if_ne	jmp	#LR__2561
1ebf0     00 30 06 F6 | 	mov	local06, #0
1ebf4     A7 2C 02 FB | 	rdlong	local04, fp
1ebf8     13 13 02 F6 | 	mov	arg01, local01
1ebfc     B0 EA BE FD | 	call	#_convertstring
1ec00     FD 14 02 F6 | 	mov	arg02, result1
1ec04     16 13 02 F6 | 	mov	arg01, local04
1ec08     C4 64 B0 FD | 	call	#__system___string_cmp
1ec0c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec10     00 30 26 56 |  if_ne	not	local06, #0
1ec14     A7 30 62 FC | 	wrlong	local06, fp
1ec18     50 00 90 FD | 	jmp	#LR__2563
1ec1c                 | LR__2561
1ec1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1ec1c     08 4E 05 F1 | 	add	fp, #8
1ec20     A7 30 02 FB | 	rdlong	local06, fp
1ec24     08 4E 85 F1 | 	sub	fp, #8
1ec28     2B 30 0E F2 | 	cmp	local06, #43 wz
1ec2c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ec30     34 00 90 5D |  if_ne	jmp	#LR__2562
1ec34     00 30 06 F6 | 	mov	local06, #0
1ec38     A7 12 02 FB | 	rdlong	arg01, fp
1ec3c     70 EA BE FD | 	call	#_convertstring
1ec40     FD 2C 02 F6 | 	mov	local04, result1
1ec44     13 13 02 F6 | 	mov	arg01, local01
1ec48     64 EA BE FD | 	call	#_convertstring
1ec4c     FD 14 02 F6 | 	mov	arg02, result1
1ec50     16 13 02 F6 | 	mov	arg01, local04
1ec54     78 64 B0 FD | 	call	#__system___string_cmp
1ec58     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec5c     00 30 26 56 |  if_ne	not	local06, #0
1ec60     A7 30 62 FC | 	wrlong	local06, fp
1ec64     04 00 90 FD | 	jmp	#LR__2563
1ec68                 | LR__2562
1ec68     A7 00 68 FC | 	wrlong	#0, fp
1ec6c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec6c                 | LR__2563
1ec6c     08 4E 05 F1 | 	add	fp, #8
1ec70     A7 38 68 FC | 	wrlong	#28, fp
1ec74     08 4E 85 F1 | 	sub	fp, #8
1ec78     A7 12 02 F6 | 	mov	arg01, fp
1ec7c     50 E9 BE FD | 	call	#_push
1ec80     A7 F0 03 F6 | 	mov	ptra, fp
1ec84     B2 00 A0 FD | 	call	#popregs_
1ec88                 | _do_ne_ret
1ec88     2D 00 64 FD | 	ret
1ec8c                 | 
1ec8c                 | ' 
1ec8c                 | ' '--------------------------------- OR
1ec8c                 | ' 
1ec8c                 | ' sub do_or 
1ec8c                 | _do_or
1ec8c     05 4A 05 F6 | 	mov	COUNT_, #5
1ec90     A8 00 A0 FD | 	call	#pushregs_
1ec94     18 F0 07 F1 | 	add	ptra, #24
1ec98     A4 E8 BE FD | 	call	#_pop
1ec9c     FD 26 02 F6 | 	mov	local01, result1
1eca0     FE 12 02 F6 | 	mov	arg01, result2
1eca4     FF 2C 02 F6 | 	mov	local04, result3
1eca8     09 29 02 F6 | 	mov	local02, arg01
1ecac     16 2B 02 F6 | 	mov	local03, local04
1ecb0     8C E8 BE FD | 	call	#_pop
1ecb4     FF 2E 02 F6 | 	mov	local05, result3
1ecb8     A7 FA 61 FC | 	wrlong	result1, fp
1ecbc     04 4E 05 F1 | 	add	fp, #4
1ecc0     A7 FC 61 FC | 	wrlong	result2, fp
1ecc4     04 4E 05 F1 | 	add	fp, #4
1ecc8     A7 2E 62 FC | 	wrlong	local05, fp
1eccc                 | ' 
1eccc                 | ' t2=pop()
1eccc                 | ' t1=pop()
1eccc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1eccc     08 4E 85 F1 | 	sub	fp, #8
1ecd0     1C 2E 0E F2 | 	cmp	local05, #28 wz
1ecd4     A7 2E 02 AB |  if_e	rdlong	local05, fp
1ecd8     A7 2E 62 AC |  if_e	wrlong	local05, fp
1ecdc     08 4E 05 A1 |  if_e	add	fp, #8
1ece0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ece4     08 4E 85 A1 |  if_e	sub	fp, #8
1ece8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ece8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ecec     1D 2A 06 A6 |  if_e	mov	local03, #29
1ecf0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1ecf0     08 4E 05 F1 | 	add	fp, #8
1ecf4     A7 2E 02 FB | 	rdlong	local05, fp
1ecf8     08 4E 85 F1 | 	sub	fp, #8
1ecfc     1F 2E 0E F2 | 	cmp	local05, #31 wz
1ed00     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1ed04     08 4E 05 51 |  if_ne	add	fp, #8
1ed08     A7 2C 02 5B |  if_ne	rdlong	local04, fp
1ed0c     08 4E 85 51 |  if_ne	sub	fp, #8
1ed10     1E 2C 0E 52 |  if_ne	cmp	local04, #30 wz
1ed14     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1ed18     A7 0C 68 AC |  if_e	wrlong	#6, fp
1ed1c     08 4E 05 A1 |  if_e	add	fp, #8
1ed20     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ed24     08 4E 85 A1 |  if_e	sub	fp, #8
1ed28     A7 2E 02 5B |  if_ne	rdlong	local05, fp
1ed2c     13 2F 42 55 |  if_ne	or	local05, local01
1ed30     A7 2E 62 5C |  if_ne	wrlong	local05, fp
1ed34     A7 12 02 F6 | 	mov	arg01, fp
1ed38     94 E8 BE FD | 	call	#_push
1ed3c     A7 F0 03 F6 | 	mov	ptra, fp
1ed40     B2 00 A0 FD | 	call	#popregs_
1ed44                 | _do_or_ret
1ed44     2D 00 64 FD | 	ret
1ed48                 | 
1ed48                 | ' 
1ed48                 | ' '--------------------------------- plus (+)
1ed48                 | ' 
1ed48                 | ' sub do_plus 
1ed48                 | _do_plus
1ed48     07 4A 05 F6 | 	mov	COUNT_, #7
1ed4c     A8 00 A0 FD | 	call	#pushregs_
1ed50     18 F0 07 F1 | 	add	ptra, #24
1ed54     E8 E7 BE FD | 	call	#_pop
1ed58     FD 26 02 F6 | 	mov	local01, result1
1ed5c     FE 2C 02 F6 | 	mov	local04, result2
1ed60     FF 2E 02 F6 | 	mov	local05, result3
1ed64     16 29 02 F6 | 	mov	local02, local04
1ed68     17 2B 02 F6 | 	mov	local03, local05
1ed6c     D0 E7 BE FD | 	call	#_pop
1ed70     FF 2E 02 F6 | 	mov	local05, result3
1ed74     A7 FA 61 FC | 	wrlong	result1, fp
1ed78     04 4E 05 F1 | 	add	fp, #4
1ed7c     A7 FC 61 FC | 	wrlong	result2, fp
1ed80     04 4E 05 F1 | 	add	fp, #4
1ed84     A7 2E 62 FC | 	wrlong	local05, fp
1ed88                 | ' 
1ed88                 | ' t2=pop()
1ed88                 | ' t1=pop()
1ed88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1ed88     17 31 02 F6 | 	mov	local06, local05
1ed8c     08 4E 85 F1 | 	sub	fp, #8
1ed90     1D 30 0E F2 | 	cmp	local06, #29 wz
1ed94     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed98     A7 30 02 AB |  if_e	rdlong	local06, fp
1ed9c     13 31 02 A1 |  if_e	add	local06, local01
1eda0     A7 30 62 AC |  if_e	wrlong	local06, fp
1eda4     08 03 90 AD |  if_e	jmp	#LR__2581
1eda8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1eda8     08 4E 05 F1 | 	add	fp, #8
1edac     A7 30 02 FB | 	rdlong	local06, fp
1edb0     08 4E 85 F1 | 	sub	fp, #8
1edb4     1D 30 0E F2 | 	cmp	local06, #29 wz
1edb8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1edbc     A7 30 02 AB |  if_e	rdlong	local06, fp
1edc0     13 31 02 A1 |  if_e	add	local06, local01
1edc4     A7 30 62 AC |  if_e	wrlong	local06, fp
1edc8     08 4E 05 A1 |  if_e	add	fp, #8
1edcc     A7 38 68 AC |  if_e	wrlong	#28, fp
1edd0     08 4E 85 A1 |  if_e	sub	fp, #8
1edd4     D8 02 90 AD |  if_e	jmp	#LR__2581
1edd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1edd8     08 4E 05 F1 | 	add	fp, #8
1eddc     A7 30 02 FB | 	rdlong	local06, fp
1ede0     08 4E 85 F1 | 	sub	fp, #8
1ede4     1D 30 0E F2 | 	cmp	local06, #29 wz
1ede8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1edec     28 00 90 5D |  if_ne	jmp	#LR__2570
1edf0     A7 12 02 FB | 	rdlong	arg01, fp
1edf4     7C 7D B0 FD | 	call	#__system___float_fromuns
1edf8     FD 12 02 F6 | 	mov	arg01, result1
1edfc     13 15 02 F6 | 	mov	arg02, local01
1ee00     B4 7D B0 FD | 	call	#__system___float_add
1ee04     A7 FA 61 FC | 	wrlong	result1, fp
1ee08     08 4E 05 F1 | 	add	fp, #8
1ee0c     A7 3C 68 FC | 	wrlong	#30, fp
1ee10     08 4E 85 F1 | 	sub	fp, #8
1ee14     98 02 90 FD | 	jmp	#LR__2581
1ee18                 | LR__2570
1ee18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ee18     08 4E 05 F1 | 	add	fp, #8
1ee1c     A7 30 02 FB | 	rdlong	local06, fp
1ee20     08 4E 85 F1 | 	sub	fp, #8
1ee24     1C 30 0E F2 | 	cmp	local06, #28 wz
1ee28     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee2c     A7 30 02 AB |  if_e	rdlong	local06, fp
1ee30     13 31 02 A1 |  if_e	add	local06, local01
1ee34     A7 30 62 AC |  if_e	wrlong	local06, fp
1ee38     74 02 90 AD |  if_e	jmp	#LR__2581
1ee3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1ee3c     08 4E 05 F1 | 	add	fp, #8
1ee40     A7 30 02 FB | 	rdlong	local06, fp
1ee44     08 4E 85 F1 | 	sub	fp, #8
1ee48     1C 30 0E F2 | 	cmp	local06, #28 wz
1ee4c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee50     A7 30 02 AB |  if_e	rdlong	local06, fp
1ee54     13 31 02 A1 |  if_e	add	local06, local01
1ee58     A7 30 62 AC |  if_e	wrlong	local06, fp
1ee5c     50 02 90 AD |  if_e	jmp	#LR__2581
1ee60                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ee60     08 4E 05 F1 | 	add	fp, #8
1ee64     A7 30 02 FB | 	rdlong	local06, fp
1ee68     08 4E 85 F1 | 	sub	fp, #8
1ee6c     1C 30 0E F2 | 	cmp	local06, #28 wz
1ee70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee74     38 00 90 5D |  if_ne	jmp	#LR__2571
1ee78     A7 12 02 FB | 	rdlong	arg01, fp
1ee7c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee80     1F 32 C6 C9 |  if_b	decod	local07, #31
1ee84     00 32 06 36 |  if_ae	mov	local07, #0
1ee88     E8 7C B0 FD | 	call	#__system___float_fromuns
1ee8c     19 FB 61 F5 | 	xor	result1, local07
1ee90     FD 12 02 F6 | 	mov	arg01, result1
1ee94     13 15 02 F6 | 	mov	arg02, local01
1ee98     1C 7D B0 FD | 	call	#__system___float_add
1ee9c     A7 FA 61 FC | 	wrlong	result1, fp
1eea0     08 4E 05 F1 | 	add	fp, #8
1eea4     A7 3C 68 FC | 	wrlong	#30, fp
1eea8     08 4E 85 F1 | 	sub	fp, #8
1eeac     00 02 90 FD | 	jmp	#LR__2581
1eeb0                 | LR__2571
1eeb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1eeb0     08 4E 05 F1 | 	add	fp, #8
1eeb4     A7 30 02 FB | 	rdlong	local06, fp
1eeb8     08 4E 85 F1 | 	sub	fp, #8
1eebc     1E 30 0E F2 | 	cmp	local06, #30 wz
1eec0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eec4     20 00 90 5D |  if_ne	jmp	#LR__2572
1eec8     A7 30 02 FB | 	rdlong	local06, fp
1eecc     13 13 02 F6 | 	mov	arg01, local01
1eed0     A0 7C B0 FD | 	call	#__system___float_fromuns
1eed4     FD 14 02 F6 | 	mov	arg02, result1
1eed8     18 13 02 F6 | 	mov	arg01, local06
1eedc     D8 7C B0 FD | 	call	#__system___float_add
1eee0     A7 FA 61 FC | 	wrlong	result1, fp
1eee4     C8 01 90 FD | 	jmp	#LR__2581
1eee8                 | LR__2572
1eee8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1eee8     08 4E 05 F1 | 	add	fp, #8
1eeec     A7 30 02 FB | 	rdlong	local06, fp
1eef0     08 4E 85 F1 | 	sub	fp, #8
1eef4     1E 30 0E F2 | 	cmp	local06, #30 wz
1eef8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eefc     2C 00 90 5D |  if_ne	jmp	#LR__2573
1ef00     A7 30 02 FB | 	rdlong	local06, fp
1ef04     13 13 52 F6 | 	abs	arg01, local01 wc
1ef08     1F 32 C6 C9 |  if_b	decod	local07, #31
1ef0c     00 32 06 36 |  if_ae	mov	local07, #0
1ef10     60 7C B0 FD | 	call	#__system___float_fromuns
1ef14     19 FB 61 F5 | 	xor	result1, local07
1ef18     FD 14 02 F6 | 	mov	arg02, result1
1ef1c     18 13 02 F6 | 	mov	arg01, local06
1ef20     94 7C B0 FD | 	call	#__system___float_add
1ef24     A7 FA 61 FC | 	wrlong	result1, fp
1ef28     84 01 90 FD | 	jmp	#LR__2581
1ef2c                 | LR__2573
1ef2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1ef2c     08 4E 05 F1 | 	add	fp, #8
1ef30     A7 30 02 FB | 	rdlong	local06, fp
1ef34     08 4E 85 F1 | 	sub	fp, #8
1ef38     1E 30 0E F2 | 	cmp	local06, #30 wz
1ef3c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ef40     14 00 90 5D |  if_ne	jmp	#LR__2574
1ef44     A7 12 02 FB | 	rdlong	arg01, fp
1ef48     13 15 02 F6 | 	mov	arg02, local01
1ef4c     68 7C B0 FD | 	call	#__system___float_add
1ef50     A7 FA 61 FC | 	wrlong	result1, fp
1ef54     58 01 90 FD | 	jmp	#LR__2581
1ef58                 | LR__2574
1ef58                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ef58     08 4E 05 F1 | 	add	fp, #8
1ef5c     A7 30 02 FB | 	rdlong	local06, fp
1ef60     08 4E 85 F1 | 	sub	fp, #8
1ef64     1F 30 0E F2 | 	cmp	local06, #31 wz
1ef68     18 00 90 5D |  if_ne	jmp	#LR__2575
1ef6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ef70     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ef74     08 4E 05 51 |  if_ne	add	fp, #8
1ef78     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ef7c     08 4E 85 51 |  if_ne	sub	fp, #8
1ef80     2C 01 90 5D |  if_ne	jmp	#LR__2581
1ef84                 | LR__2575
1ef84                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ef84     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ef88     24 00 90 5D |  if_ne	jmp	#LR__2576
1ef8c     08 4E 05 F1 | 	add	fp, #8
1ef90     A7 30 02 FB | 	rdlong	local06, fp
1ef94     08 4E 85 F1 | 	sub	fp, #8
1ef98     1F 30 0E F2 | 	cmp	local06, #31 wz
1ef9c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1efa0     08 4E 05 51 |  if_ne	add	fp, #8
1efa4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1efa8     08 4E 85 51 |  if_ne	sub	fp, #8
1efac     00 01 90 5D |  if_ne	jmp	#LR__2581
1efb0                 | LR__2576
1efb0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1efb0     08 4E 05 F1 | 	add	fp, #8
1efb4     A7 30 02 FB | 	rdlong	local06, fp
1efb8     08 4E 85 F1 | 	sub	fp, #8
1efbc     1F 30 0E F2 | 	cmp	local06, #31 wz
1efc0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1efc4     14 00 90 5D |  if_ne	jmp	#LR__2577
1efc8     A7 12 02 FB | 	rdlong	arg01, fp
1efcc     13 15 02 F6 | 	mov	arg02, local01
1efd0     30 61 B0 FD | 	call	#__system___string_concat
1efd4     A7 FA 61 FC | 	wrlong	result1, fp
1efd8     D4 00 90 FD | 	jmp	#LR__2581
1efdc                 | LR__2577
1efdc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1efdc     08 4E 05 F1 | 	add	fp, #8
1efe0     A7 30 02 FB | 	rdlong	local06, fp
1efe4     08 4E 85 F1 | 	sub	fp, #8
1efe8     2B 30 0E F2 | 	cmp	local06, #43 wz
1efec     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eff0     28 00 90 5D |  if_ne	jmp	#LR__2578
1eff4     A7 12 02 FB | 	rdlong	arg01, fp
1eff8     B4 E6 BE FD | 	call	#_convertstring
1effc     FD 12 02 F6 | 	mov	arg01, result1
1f000     13 15 02 F6 | 	mov	arg02, local01
1f004     FC 60 B0 FD | 	call	#__system___string_concat
1f008     A7 FA 61 FC | 	wrlong	result1, fp
1f00c     08 4E 05 F1 | 	add	fp, #8
1f010     A7 3E 68 FC | 	wrlong	#31, fp
1f014     08 4E 85 F1 | 	sub	fp, #8
1f018     94 00 90 FD | 	jmp	#LR__2581
1f01c                 | LR__2578
1f01c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1f01c     08 4E 05 F1 | 	add	fp, #8
1f020     A7 30 02 FB | 	rdlong	local06, fp
1f024     08 4E 85 F1 | 	sub	fp, #8
1f028     1F 30 0E F2 | 	cmp	local06, #31 wz
1f02c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f030     20 00 90 5D |  if_ne	jmp	#LR__2579
1f034     A7 30 02 FB | 	rdlong	local06, fp
1f038     13 13 02 F6 | 	mov	arg01, local01
1f03c     70 E6 BE FD | 	call	#_convertstring
1f040     FD 14 02 F6 | 	mov	arg02, result1
1f044     18 13 02 F6 | 	mov	arg01, local06
1f048     B8 60 B0 FD | 	call	#__system___string_concat
1f04c     A7 FA 61 FC | 	wrlong	result1, fp
1f050     5C 00 90 FD | 	jmp	#LR__2581
1f054                 | LR__2579
1f054                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1f054     08 4E 05 F1 | 	add	fp, #8
1f058     A7 30 02 FB | 	rdlong	local06, fp
1f05c     08 4E 85 F1 | 	sub	fp, #8
1f060     2B 30 0E F2 | 	cmp	local06, #43 wz
1f064     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f068     34 00 90 5D |  if_ne	jmp	#LR__2580
1f06c     A7 12 02 FB | 	rdlong	arg01, fp
1f070     3C E6 BE FD | 	call	#_convertstring
1f074     FD 30 02 F6 | 	mov	local06, result1
1f078     13 13 02 F6 | 	mov	arg01, local01
1f07c     30 E6 BE FD | 	call	#_convertstring
1f080     FD 14 02 F6 | 	mov	arg02, result1
1f084     18 13 02 F6 | 	mov	arg01, local06
1f088     78 60 B0 FD | 	call	#__system___string_concat
1f08c     A7 FA 61 FC | 	wrlong	result1, fp
1f090     08 4E 05 F1 | 	add	fp, #8
1f094     A7 3E 68 FC | 	wrlong	#31, fp
1f098     08 4E 85 F1 | 	sub	fp, #8
1f09c     10 00 90 FD | 	jmp	#LR__2581
1f0a0                 | LR__2580
1f0a0     A7 08 68 FC | 	wrlong	#4, fp
1f0a4     08 4E 05 F1 | 	add	fp, #8
1f0a8     A7 FE 69 FC | 	wrlong	#255, fp
1f0ac     08 4E 85 F1 | 	sub	fp, #8
1f0b0                 | LR__2581
1f0b0     A7 12 02 F6 | 	mov	arg01, fp
1f0b4     18 E5 BE FD | 	call	#_push
1f0b8     A7 F0 03 F6 | 	mov	ptra, fp
1f0bc     B2 00 A0 FD | 	call	#popregs_
1f0c0                 | _do_plus_ret
1f0c0     2D 00 64 FD | 	ret
1f0c4                 | 
1f0c4                 | ' 
1f0c4                 | ' '--------------------------------- power (^)
1f0c4                 | ' 
1f0c4                 | ' sub do_power 
1f0c4                 | _do_power
1f0c4     04 4A 05 F6 | 	mov	COUNT_, #4
1f0c8     A8 00 A0 FD | 	call	#pushregs_
1f0cc     18 F0 07 F1 | 	add	ptra, #24
1f0d0     6C E4 BE FD | 	call	#_pop
1f0d4     FD 26 02 F6 | 	mov	local01, result1
1f0d8     FE 14 02 F6 | 	mov	arg02, result2
1f0dc     FF 12 02 F6 | 	mov	arg01, result3
1f0e0     0A 29 02 F6 | 	mov	local02, arg02
1f0e4     09 2B 02 F6 | 	mov	local03, arg01
1f0e8     54 E4 BE FD | 	call	#_pop
1f0ec     A7 FA 61 FC | 	wrlong	result1, fp
1f0f0     04 4E 05 F1 | 	add	fp, #4
1f0f4     A7 FC 61 FC | 	wrlong	result2, fp
1f0f8     04 4E 05 F1 | 	add	fp, #4
1f0fc     A7 FE 61 FC | 	wrlong	result3, fp
1f100                 | ' 
1f100                 | ' t2=pop()
1f100                 | ' t1=pop()
1f100                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1f100     08 4E 85 F1 | 	sub	fp, #8
1f104     1F FE 0D F2 | 	cmp	result3, #31 wz
1f108     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f10c     A7 18 68 AC |  if_e	wrlong	#12, fp
1f110     08 4E 05 A1 |  if_e	add	fp, #8
1f114     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f118     08 4E 85 A1 |  if_e	sub	fp, #8
1f11c     E0 00 90 AD |  if_e	jmp	#LR__2595
1f120                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f120     08 4E 05 F1 | 	add	fp, #8
1f124     A7 14 02 FB | 	rdlong	arg02, fp
1f128     08 4E 85 F1 | 	sub	fp, #8
1f12c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f130     28 00 90 5D |  if_ne	jmp	#LR__2590
1f134     08 4E 05 F1 | 	add	fp, #8
1f138     A7 3C 68 FC | 	wrlong	#30, fp
1f13c     08 4E 85 F1 | 	sub	fp, #8
1f140     A7 12 02 FB | 	rdlong	arg01, fp
1f144     09 13 52 F6 | 	abs	arg01, arg01 wc
1f148     1F 2C C6 C9 |  if_b	decod	local04, #31
1f14c     00 2C 06 36 |  if_ae	mov	local04, #0
1f150     20 7A B0 FD | 	call	#__system___float_fromuns
1f154     16 FB 61 F5 | 	xor	result1, local04
1f158     A7 FA 61 FC | 	wrlong	result1, fp
1f15c                 | LR__2590
1f15c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1f15c     08 4E 05 F1 | 	add	fp, #8
1f160     A7 14 02 FB | 	rdlong	arg02, fp
1f164     08 4E 85 F1 | 	sub	fp, #8
1f168     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f16c     18 00 90 5D |  if_ne	jmp	#LR__2591
1f170     08 4E 05 F1 | 	add	fp, #8
1f174     A7 3C 68 FC | 	wrlong	#30, fp
1f178     08 4E 85 F1 | 	sub	fp, #8
1f17c     A7 12 02 FB | 	rdlong	arg01, fp
1f180     F0 79 B0 FD | 	call	#__system___float_fromuns
1f184     A7 FA 61 FC | 	wrlong	result1, fp
1f188                 | LR__2591
1f188                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f188     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f18c     1C 00 90 5D |  if_ne	jmp	#LR__2592
1f190     1E 2A 06 F6 | 	mov	local03, #30
1f194     13 13 52 F6 | 	abs	arg01, local01 wc
1f198     1F 2C C6 C9 |  if_b	decod	local04, #31
1f19c     00 2C 06 36 |  if_ae	mov	local04, #0
1f1a0     D0 79 B0 FD | 	call	#__system___float_fromuns
1f1a4     16 FB 61 F5 | 	xor	result1, local04
1f1a8     FD 26 02 F6 | 	mov	local01, result1
1f1ac                 | LR__2592
1f1ac                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f1ac     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f1b0     10 00 90 5D |  if_ne	jmp	#LR__2593
1f1b4     1E 2A 06 F6 | 	mov	local03, #30
1f1b8     13 13 02 F6 | 	mov	arg01, local01
1f1bc     B4 79 B0 FD | 	call	#__system___float_fromuns
1f1c0     FD 26 02 F6 | 	mov	local01, result1
1f1c4                 | LR__2593
1f1c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1f1c4     08 4E 05 F1 | 	add	fp, #8
1f1c8     A7 14 02 FB | 	rdlong	arg02, fp
1f1cc     08 4E 85 F1 | 	sub	fp, #8
1f1d0     1E 14 0E F2 | 	cmp	arg02, #30 wz
1f1d4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f1d8     14 00 90 5D |  if_ne	jmp	#LR__2594
1f1dc     A7 12 02 FB | 	rdlong	arg01, fp
1f1e0     13 15 02 F6 | 	mov	arg02, local01
1f1e4     68 8B B0 FD | 	call	#__system____builtin_powf
1f1e8     A7 FA 61 FC | 	wrlong	result1, fp
1f1ec     10 00 90 FD | 	jmp	#LR__2595
1f1f0                 | LR__2594
1f1f0     A7 1A 68 FC | 	wrlong	#13, fp
1f1f4     08 4E 05 F1 | 	add	fp, #8
1f1f8     A7 FE 69 FC | 	wrlong	#255, fp
1f1fc     08 4E 85 F1 | 	sub	fp, #8
1f200                 | LR__2595
1f200     A7 12 02 F6 | 	mov	arg01, fp
1f204     C8 E3 BE FD | 	call	#_push
1f208     A7 F0 03 F6 | 	mov	ptra, fp
1f20c     B2 00 A0 FD | 	call	#popregs_
1f210                 | _do_power_ret
1f210     2D 00 64 FD | 	ret
1f214                 | 
1f214                 | ' 
1f214                 | ' '--------------------------------- SHL
1f214                 | ' 
1f214                 | ' sub do_shl 
1f214                 | _do_shl
1f214     05 4A 05 F6 | 	mov	COUNT_, #5
1f218     A8 00 A0 FD | 	call	#pushregs_
1f21c     18 F0 07 F1 | 	add	ptra, #24
1f220     1C E3 BE FD | 	call	#_pop
1f224     FD 26 02 F6 | 	mov	local01, result1
1f228     FE 12 02 F6 | 	mov	arg01, result2
1f22c     FF 2C 02 F6 | 	mov	local04, result3
1f230     09 29 02 F6 | 	mov	local02, arg01
1f234     16 2B 02 F6 | 	mov	local03, local04
1f238     04 E3 BE FD | 	call	#_pop
1f23c     FF 2E 02 F6 | 	mov	local05, result3
1f240     A7 FA 61 FC | 	wrlong	result1, fp
1f244     04 4E 05 F1 | 	add	fp, #4
1f248     A7 FC 61 FC | 	wrlong	result2, fp
1f24c     04 4E 05 F1 | 	add	fp, #4
1f250     A7 2E 62 FC | 	wrlong	local05, fp
1f254                 | ' 
1f254                 | ' t2=pop()
1f254                 | ' t1=pop()
1f254                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f254     08 4E 85 F1 | 	sub	fp, #8
1f258     1C 2E 0E F2 | 	cmp	local05, #28 wz
1f25c     A7 2E 02 AB |  if_e	rdlong	local05, fp
1f260     A7 2E 62 AC |  if_e	wrlong	local05, fp
1f264     08 4E 05 A1 |  if_e	add	fp, #8
1f268     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f26c     08 4E 85 A1 |  if_e	sub	fp, #8
1f270                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f270     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f274     1D 2A 06 A6 |  if_e	mov	local03, #29
1f278                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1f278     08 4E 05 F1 | 	add	fp, #8
1f27c     A7 2E 02 FB | 	rdlong	local05, fp
1f280     08 4E 85 F1 | 	sub	fp, #8
1f284     1F 2E 0E F2 | 	cmp	local05, #31 wz
1f288     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f28c     08 4E 05 51 |  if_ne	add	fp, #8
1f290     A7 2C 02 5B |  if_ne	rdlong	local04, fp
1f294     08 4E 85 51 |  if_ne	sub	fp, #8
1f298     1E 2C 0E 52 |  if_ne	cmp	local04, #30 wz
1f29c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f2a0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f2a4     08 4E 05 A1 |  if_e	add	fp, #8
1f2a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f2ac     08 4E 85 A1 |  if_e	sub	fp, #8
1f2b0     A7 2E 02 5B |  if_ne	rdlong	local05, fp
1f2b4     13 2F 62 50 |  if_ne	shl	local05, local01
1f2b8     A7 2E 62 5C |  if_ne	wrlong	local05, fp
1f2bc     A7 12 02 F6 | 	mov	arg01, fp
1f2c0     0C E3 BE FD | 	call	#_push
1f2c4     A7 F0 03 F6 | 	mov	ptra, fp
1f2c8     B2 00 A0 FD | 	call	#popregs_
1f2cc                 | _do_shl_ret
1f2cc     2D 00 64 FD | 	ret
1f2d0                 | 
1f2d0                 | ' 
1f2d0                 | ' '--------------------------------- SHR
1f2d0                 | ' 
1f2d0                 | ' sub do_shr 
1f2d0                 | _do_shr
1f2d0     05 4A 05 F6 | 	mov	COUNT_, #5
1f2d4     A8 00 A0 FD | 	call	#pushregs_
1f2d8     18 F0 07 F1 | 	add	ptra, #24
1f2dc     60 E2 BE FD | 	call	#_pop
1f2e0     FD 26 02 F6 | 	mov	local01, result1
1f2e4     FE 12 02 F6 | 	mov	arg01, result2
1f2e8     FF 2C 02 F6 | 	mov	local04, result3
1f2ec     09 29 02 F6 | 	mov	local02, arg01
1f2f0     16 2B 02 F6 | 	mov	local03, local04
1f2f4     48 E2 BE FD | 	call	#_pop
1f2f8     FF 2E 02 F6 | 	mov	local05, result3
1f2fc     A7 FA 61 FC | 	wrlong	result1, fp
1f300     04 4E 05 F1 | 	add	fp, #4
1f304     A7 FC 61 FC | 	wrlong	result2, fp
1f308     04 4E 05 F1 | 	add	fp, #4
1f30c     A7 2E 62 FC | 	wrlong	local05, fp
1f310                 | ' 
1f310                 | ' t2=pop()
1f310                 | ' t1=pop()
1f310                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f310     08 4E 85 F1 | 	sub	fp, #8
1f314     1C 2E 0E F2 | 	cmp	local05, #28 wz
1f318     A7 2E 02 AB |  if_e	rdlong	local05, fp
1f31c     A7 2E 62 AC |  if_e	wrlong	local05, fp
1f320     08 4E 05 A1 |  if_e	add	fp, #8
1f324     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f328     08 4E 85 A1 |  if_e	sub	fp, #8
1f32c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f32c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f330     1D 2A 06 A6 |  if_e	mov	local03, #29
1f334                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1f334     08 4E 05 F1 | 	add	fp, #8
1f338     A7 2E 02 FB | 	rdlong	local05, fp
1f33c     08 4E 85 F1 | 	sub	fp, #8
1f340     1F 2E 0E F2 | 	cmp	local05, #31 wz
1f344     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f348     08 4E 05 51 |  if_ne	add	fp, #8
1f34c     A7 2C 02 5B |  if_ne	rdlong	local04, fp
1f350     08 4E 85 51 |  if_ne	sub	fp, #8
1f354     1E 2C 0E 52 |  if_ne	cmp	local04, #30 wz
1f358     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f35c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f360     08 4E 05 A1 |  if_e	add	fp, #8
1f364     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f368     08 4E 85 A1 |  if_e	sub	fp, #8
1f36c     A7 2E 02 5B |  if_ne	rdlong	local05, fp
1f370     13 2F 42 50 |  if_ne	shr	local05, local01
1f374     A7 2E 62 5C |  if_ne	wrlong	local05, fp
1f378     A7 12 02 F6 | 	mov	arg01, fp
1f37c     50 E2 BE FD | 	call	#_push
1f380     A7 F0 03 F6 | 	mov	ptra, fp
1f384     B2 00 A0 FD | 	call	#popregs_
1f388                 | _do_shr_ret
1f388     2D 00 64 FD | 	ret
1f38c                 | 
1f38c                 | ' 
1f38c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1f38c                 | ' 
1f38c                 | ' sub init_audio
1f38c                 | _init_audio
1f38c     07 4A 05 F6 | 	mov	COUNT_, #7
1f390     A8 00 A0 FD | 	call	#pushregs_
1f394     00 C0 1F FF 
1f398     00 26 06 F6 | 	mov	local01, ##1065353216
1f39c                 | ' 
1f39c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1f39c     00 28 06 F6 | 	mov	local02, #0
1f3a0                 | LR__2600
1f3a0     14 2B 02 F6 | 	mov	local03, local02
1f3a4     01 2A 66 F0 | 	shl	local03, #1
1f3a8     58 7F 23 FF 
1f3ac     00 2C 06 F6 | 	mov	local04, ##1191096320
1f3b0     14 13 52 F6 | 	abs	arg01, local02 wc
1f3b4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f3b8     00 2E 06 36 |  if_ae	mov	local05, #0
1f3bc     B4 77 B0 FD | 	call	#__system___float_fromuns
1f3c0     17 FB 61 F5 | 	xor	result1, local05
1f3c4     FD 12 02 F6 | 	mov	arg01, result1
1f3c8     87 24 20 FF 
1f3cc     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f3d0     A0 7B B0 FD | 	call	#__system___float_mul
1f3d4     FD 12 02 F6 | 	mov	arg01, result1
1f3d8     00 00 22 FF 
1f3dc     00 14 06 F6 | 	mov	arg02, ##1140850688
1f3e0     84 7D B0 FD | 	call	#__system___float_div
1f3e4     FD 12 02 F6 | 	mov	arg01, result1
1f3e8     A0 84 B0 FD | 	call	#__system____builtin_sinf
1f3ec     FD 14 02 F6 | 	mov	arg02, result1
1f3f0     16 13 02 F6 | 	mov	arg01, local04
1f3f4     7C 7B B0 FD | 	call	#__system___float_mul
1f3f8     FD 12 02 F6 | 	mov	arg01, result1
1f3fc     01 14 06 F6 | 	mov	arg02, #1
1f400     FC 7F B0 FD | 	call	#__system___float_tointeger
1f404     FD 14 02 F6 | 	mov	arg02, result1
1f408     15 13 02 F6 | 	mov	arg01, local03
1f40c     F4 08 B0 FD | 	call	#_psdpoke
1f410     01 28 06 F1 | 	add	local02, #1
1f414     02 00 00 FF 
1f418     00 28 56 F2 | 	cmps	local02, ##1024 wc
1f41c     80 FF 9F CD |  if_b	jmp	#LR__2600
1f420                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1f420     00 28 06 F6 | 	mov	local02, #0
1f424                 | LR__2601
1f424     14 15 02 F6 | 	mov	arg02, local02
1f428     01 14 66 F0 | 	shl	arg02, #1
1f42c     0B 12 C6 F9 | 	decod	arg01, #11
1f430     0A 13 02 F1 | 	add	arg01, arg02
1f434     14 2D 02 F6 | 	mov	local04, local02
1f438     07 2C 66 F0 | 	shl	local04, #7
1f43c     14 2D 82 F1 | 	sub	local04, local02
1f440     C0 FF 7F FF 
1f444     00 15 06 F6 | 	mov	arg02, ##-32512
1f448     16 15 02 F1 | 	add	arg02, local04
1f44c     B4 08 B0 FD | 	call	#_psdpoke
1f450     09 2C C6 F9 | 	decod	local04, #9
1f454     14 2D 02 F1 | 	add	local04, local02
1f458     01 2C 66 F0 | 	shl	local04, #1
1f45c     0B 12 C6 F9 | 	decod	arg01, #11
1f460     16 13 02 F1 | 	add	arg01, local04
1f464     14 2F 02 F6 | 	mov	local05, local02
1f468     07 2E 66 F0 | 	shl	local05, #7
1f46c     14 2F 82 F1 | 	sub	local05, local02
1f470     3F 00 00 FF 
1f474     00 15 06 F6 | 	mov	arg02, ##32512
1f478     17 15 82 F1 | 	sub	arg02, local05
1f47c     84 08 B0 FD | 	call	#_psdpoke
1f480     01 28 06 F1 | 	add	local02, #1
1f484     01 00 00 FF 
1f488     00 28 56 F2 | 	cmps	local02, ##512 wc
1f48c     94 FF 9F CD |  if_b	jmp	#LR__2601
1f490                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1f490     00 28 06 F6 | 	mov	local02, #0
1f494                 | LR__2602
1f494     14 2F 02 F6 | 	mov	local05, local02
1f498     01 2E 66 F0 | 	shl	local05, #1
1f49c     0C 12 C6 F9 | 	decod	arg01, #12
1f4a0     17 13 02 F1 | 	add	arg01, local05
1f4a4     14 2F 02 F6 | 	mov	local05, local02
1f4a8     06 2E 66 F0 | 	shl	local05, #6
1f4ac     14 2F 82 F1 | 	sub	local05, local02
1f4b0     C1 FF 7F FF 
1f4b4     00 14 06 F6 | 	mov	arg02, ##-32256
1f4b8     17 15 02 F1 | 	add	arg02, local05
1f4bc     44 08 B0 FD | 	call	#_psdpoke
1f4c0     01 28 06 F1 | 	add	local02, #1
1f4c4     02 00 00 FF 
1f4c8     00 28 56 F2 | 	cmps	local02, ##1024 wc
1f4cc     C4 FF 9F CD |  if_b	jmp	#LR__2602
1f4d0                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1f4d0     00 28 06 F6 | 	mov	local02, #0
1f4d4                 | LR__2603
1f4d4     14 15 02 F6 | 	mov	arg02, local02
1f4d8     01 14 66 F0 | 	shl	arg02, #1
1f4dc     0C 00 00 FF 
1f4e0     00 12 06 F6 | 	mov	arg01, ##6144
1f4e4     0A 13 02 F1 | 	add	arg01, arg02
1f4e8     C0 FF 7F FF 
1f4ec     A8 14 06 F6 | 	mov	arg02, ##-32600
1f4f0     10 08 B0 FD | 	call	#_psdpoke
1f4f4     01 28 06 F1 | 	add	local02, #1
1f4f8     80 28 56 F2 | 	cmps	local02, #128 wc
1f4fc     D4 FF 9F CD |  if_b	jmp	#LR__2603
1f500     80 28 06 F6 | 	mov	local02, #128
1f504                 | LR__2604
1f504     14 15 02 F6 | 	mov	arg02, local02
1f508     01 14 66 F0 | 	shl	arg02, #1
1f50c     0C 00 00 FF 
1f510     00 12 06 F6 | 	mov	arg01, ##6144
1f514     0A 13 02 F1 | 	add	arg01, arg02
1f518     3F 00 00 FF 
1f51c     58 15 06 F6 | 	mov	arg02, ##32600
1f520     E0 07 B0 FD | 	call	#_psdpoke
1f524     01 28 06 F1 | 	add	local02, #1
1f528     02 00 00 FF 
1f52c     00 28 16 F2 | 	cmp	local02, ##1024 wc
1f530     D0 FF 9F CD |  if_b	jmp	#LR__2604
1f534                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1f534     00 28 06 F6 | 	mov	local02, #0
1f538                 | LR__2605
1f538     14 15 02 F6 | 	mov	arg02, local02
1f53c     01 14 66 F0 | 	shl	arg02, #1
1f540     0D 12 C6 F9 | 	decod	arg01, #13
1f544     0A 13 02 F1 | 	add	arg01, arg02
1f548     C0 FF 7F FF 
1f54c     A8 14 06 F6 | 	mov	arg02, ##-32600
1f550     B0 07 B0 FD | 	call	#_psdpoke
1f554     01 28 06 F1 | 	add	local02, #1
1f558     01 00 00 FF 
1f55c     00 28 56 F2 | 	cmps	local02, ##512 wc
1f560     D4 FF 9F CD |  if_b	jmp	#LR__2605
1f564     09 28 C6 F9 | 	decod	local02, #9
1f568                 | LR__2606
1f568     14 15 02 F6 | 	mov	arg02, local02
1f56c     01 14 66 F0 | 	shl	arg02, #1
1f570     0D 12 C6 F9 | 	decod	arg01, #13
1f574     0A 13 02 F1 | 	add	arg01, arg02
1f578     3F 00 00 FF 
1f57c     58 15 06 F6 | 	mov	arg02, ##32600
1f580     80 07 B0 FD | 	call	#_psdpoke
1f584     01 28 06 F1 | 	add	local02, #1
1f588     02 00 00 FF 
1f58c     00 28 16 F2 | 	cmp	local02, ##1024 wc
1f590     D4 FF 9F CD |  if_b	jmp	#LR__2606
1f594                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1f594     00 28 06 F6 | 	mov	local02, #0
1f598                 | LR__2607
1f598     14 15 02 F6 | 	mov	arg02, local02
1f59c     01 14 66 F0 | 	shl	arg02, #1
1f5a0     14 00 00 FF 
1f5a4     00 12 06 F6 | 	mov	arg01, ##10240
1f5a8     0A 13 02 F1 | 	add	arg01, arg02
1f5ac     C0 FF 7F FF 
1f5b0     A8 14 06 F6 | 	mov	arg02, ##-32600
1f5b4     4C 07 B0 FD | 	call	#_psdpoke
1f5b8     01 28 06 F1 | 	add	local02, #1
1f5bc     00 29 56 F2 | 	cmps	local02, #256 wc
1f5c0     D4 FF 9F CD |  if_b	jmp	#LR__2607
1f5c4     00 29 06 F6 | 	mov	local02, #256
1f5c8                 | LR__2608
1f5c8     14 15 02 F6 | 	mov	arg02, local02
1f5cc     01 14 66 F0 | 	shl	arg02, #1
1f5d0     14 00 00 FF 
1f5d4     00 12 06 F6 | 	mov	arg01, ##10240
1f5d8     0A 13 02 F1 | 	add	arg01, arg02
1f5dc     3F 00 00 FF 
1f5e0     58 15 06 F6 | 	mov	arg02, ##32600
1f5e4     1C 07 B0 FD | 	call	#_psdpoke
1f5e8     01 28 06 F1 | 	add	local02, #1
1f5ec     02 00 00 FF 
1f5f0     00 28 16 F2 | 	cmp	local02, ##1024 wc
1f5f4     D0 FF 9F CD |  if_b	jmp	#LR__2608
1f5f8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1f5f8     18 00 00 FF 
1f5fc     00 28 06 F6 | 	mov	local02, ##12288
1f600                 | LR__2609
1f600     14 13 02 F6 | 	mov	arg01, local02
1f604     00 14 06 F6 | 	mov	arg02, #0
1f608     B0 06 B0 FD | 	call	#_pslpoke
1f60c     04 28 06 F1 | 	add	local02, #4
1f610     77 00 00 FF 
1f614     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1f618     E4 FF 9F CD |  if_b	jmp	#LR__2609
1f61c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1f61c     00 28 06 F6 | 	mov	local02, #0
1f620                 | LR__2610
1f620     14 15 02 F6 | 	mov	arg02, local02
1f624     01 14 66 F0 | 	shl	arg02, #1
1f628     78 00 00 FF 
1f62c     00 2A 06 F6 | 	mov	local03, ##61440
1f630     0A 2B 02 F1 | 	add	local03, arg02
1f634     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1f638     12 00 00 FF 
1f63c     CA 12 06 F1 | 	add	arg01, ##9418
1f640     14 15 02 F6 | 	mov	arg02, local02
1f644     01 14 66 F0 | 	shl	arg02, #1
1f648     0A 13 02 F1 | 	add	arg01, arg02
1f64c     09 15 E2 FA | 	rdword	arg02, arg01
1f650     15 13 02 F6 | 	mov	arg01, local03
1f654     AC 06 B0 FD | 	call	#_psdpoke
1f658     01 28 06 F1 | 	add	local02, #1
1f65c     02 00 00 FF 
1f660     00 28 56 F2 | 	cmps	local02, ##1024 wc
1f664     B8 FF 9F CD |  if_b	jmp	#LR__2610
1f668                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1f668     00 28 06 F6 | 	mov	local02, #0
1f66c                 | LR__2611
1f66c     14 15 02 F6 | 	mov	arg02, local02
1f670     01 14 66 F0 | 	shl	arg02, #1
1f674     7C 00 00 FF 
1f678     00 2A 06 F6 | 	mov	local03, ##63488
1f67c     0A 2B 02 F1 | 	add	local03, arg02
1f680     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1f684     0E 00 00 FF 
1f688     BA 12 06 F1 | 	add	arg01, ##7354
1f68c     14 15 02 F6 | 	mov	arg02, local02
1f690     01 14 66 F0 | 	shl	arg02, #1
1f694     0A 13 02 F1 | 	add	arg01, arg02
1f698     09 15 E2 FA | 	rdword	arg02, arg01
1f69c     15 13 02 F6 | 	mov	arg01, local03
1f6a0     60 06 B0 FD | 	call	#_psdpoke
1f6a4     01 28 06 F1 | 	add	local02, #1
1f6a8     02 00 00 FF 
1f6ac     00 28 56 F2 | 	cmps	local02, ##1024 wc
1f6b0     B8 FF 9F CD |  if_b	jmp	#LR__2611
1f6b4                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1f6b4     00 28 06 F6 | 	mov	local02, #0
1f6b8     0C 00 00 FF 
1f6bc     D8 E4 05 F1 | 	add	objptr, ##6360
1f6c0     97 18 48 FB | 	callpa	#(@LR__2613-@LR__2612)>>2,fcache_load_ptr_
1f6c4                 | LR__2612
1f6c4     14 2B 02 F6 | 	mov	local03, local02
1f6c8     01 2A 66 F0 | 	shl	local03, #1
1f6cc     F2 2A 02 F1 | 	add	local03, objptr
1f6d0     14 31 02 F6 | 	mov	local06, local02
1f6d4     08 30 66 F0 | 	shl	local06, #8
1f6d8     7F 00 00 FF 
1f6dc     00 33 06 F6 | 	mov	local07, ##65280
1f6e0     18 33 82 F1 | 	sub	local07, local06
1f6e4     15 33 52 FC | 	wrword	local07, local03
1f6e8     01 28 06 F1 | 	add	local02, #1
1f6ec     00 29 56 F2 | 	cmps	local02, #256 wc
1f6f0     D0 FF 9F CD |  if_b	jmp	#LR__2612
1f6f4                 | LR__2613
1f6f4     0C 00 00 FF 
1f6f8     D8 E4 85 F1 | 	sub	objptr, ##6360
1f6fc                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1f6fc     00 28 06 F6 | 	mov	local02, #0
1f700                 | LR__2614
1f700     14 2B 02 F6 | 	mov	local03, local02
1f704     01 2A 66 F0 | 	shl	local03, #1
1f708     F2 2E 02 F6 | 	mov	local05, objptr
1f70c     0D 00 00 FF 
1f710     D8 2E 06 F1 | 	add	local05, ##6872
1f714     17 2B 02 F1 | 	add	local03, local05
1f718     80 BF 23 FF 
1f71c     00 12 06 F6 | 	mov	arg01, ##1199505408
1f720     13 15 02 F6 | 	mov	arg02, local01
1f724     4C 78 B0 FD | 	call	#__system___float_mul
1f728     FD 12 02 F6 | 	mov	arg01, result1
1f72c     01 14 06 F6 | 	mov	arg02, #1
1f730     CC 7C B0 FD | 	call	#__system___float_tointeger
1f734     15 FB 51 FC | 	wrword	result1, local03
1f738     13 13 02 F6 | 	mov	arg01, local01
1f73c     CC BC 1F FF 
1f740     9A 15 06 F6 | 	mov	arg02, ##1064933786
1f744     2C 78 B0 FD | 	call	#__system___float_mul
1f748     FD 26 02 F6 | 	mov	local01, result1
1f74c     01 28 06 F1 | 	add	local02, #1
1f750     00 29 56 F2 | 	cmps	local02, #256 wc
1f754     A8 FF 9F CD |  if_b	jmp	#LR__2614
1f758     0E 00 00 FF 
1f75c     D6 E4 05 F1 | 	add	objptr, ##7382
1f760     F2 00 58 FC | 	wrword	#0, objptr
1f764                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1f764     00 28 06 F6 | 	mov	local02, #0
1f768     02 E4 05 F1 | 	add	objptr, #2
1f76c     97 10 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
1f770                 | LR__2615
1f770     14 2B 02 F6 | 	mov	local03, local02
1f774     01 2A 66 F0 | 	shl	local03, #1
1f778     F2 2A 02 F1 | 	add	local03, objptr
1f77c     7F 00 80 FF 
1f780     15 01 5A FC | 	wrword	##65280, local03
1f784     01 28 06 F1 | 	add	local02, #1
1f788     FF 28 56 F2 | 	cmps	local02, #255 wc
1f78c     E0 FF 9F CD |  if_b	jmp	#LR__2615
1f790                 | LR__2616
1f790     FE E5 05 F1 | 	add	objptr, #510
1f794     F2 00 58 FC | 	wrword	#0, objptr
1f798                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1f798     00 28 06 F6 | 	mov	local02, #0
1f79c     02 E4 05 F1 | 	add	objptr, #2
1f7a0     97 12 48 FB | 	callpa	#(@LR__2618-@LR__2617)>>2,fcache_load_ptr_
1f7a4                 | LR__2617
1f7a4     14 2B 02 F6 | 	mov	local03, local02
1f7a8     01 2A 66 F0 | 	shl	local03, #1
1f7ac     F2 2A 02 F1 | 	add	local03, objptr
1f7b0     14 33 02 F6 | 	mov	local07, local02
1f7b4     0C 32 66 F0 | 	shl	local07, #12
1f7b8     15 33 52 FC | 	wrword	local07, local03
1f7bc     01 28 06 F1 | 	add	local02, #1
1f7c0     10 28 56 F2 | 	cmps	local02, #16 wc
1f7c4     DC FF 9F CD |  if_b	jmp	#LR__2617
1f7c8                 | LR__2618
1f7c8                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1f7c8     10 28 06 F6 | 	mov	local02, #16
1f7cc     97 10 48 FB | 	callpa	#(@LR__2620-@LR__2619)>>2,fcache_load_ptr_
1f7d0                 | LR__2619
1f7d0     14 2B 02 F6 | 	mov	local03, local02
1f7d4     01 2A 66 F0 | 	shl	local03, #1
1f7d8     F2 2A 02 F1 | 	add	local03, objptr
1f7dc     7F 00 80 FF 
1f7e0     15 01 5A FC | 	wrword	##65280, local03
1f7e4     01 28 06 F1 | 	add	local02, #1
1f7e8     F0 28 16 F2 | 	cmp	local02, #240 wc
1f7ec     E0 FF 9F CD |  if_b	jmp	#LR__2619
1f7f0                 | LR__2620
1f7f0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1f7f0     F0 28 06 F6 | 	mov	local02, #240
1f7f4     97 14 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
1f7f8                 | LR__2621
1f7f8     14 2B 02 F6 | 	mov	local03, local02
1f7fc     01 2A 66 F0 | 	shl	local03, #1
1f800     F2 2A 02 F1 | 	add	local03, objptr
1f804     FF 30 06 F6 | 	mov	local06, #255
1f808     14 31 82 F1 | 	sub	local06, local02
1f80c     0C 30 66 F0 | 	shl	local06, #12
1f810     15 31 52 FC | 	wrword	local06, local03
1f814     01 28 06 F1 | 	add	local02, #1
1f818     00 29 16 F2 | 	cmp	local02, #256 wc
1f81c     D8 FF 9F CD |  if_b	jmp	#LR__2621
1f820                 | LR__2622
1f820                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1f820     00 28 06 F6 | 	mov	local02, #0
1f824     01 00 00 FF 
1f828     00 E4 05 F1 | 	add	objptr, ##512
1f82c     97 12 48 FB | 	callpa	#(@LR__2624-@LR__2623)>>2,fcache_load_ptr_
1f830                 | LR__2623
1f830     14 2B 02 F6 | 	mov	local03, local02
1f834     01 2A 66 F0 | 	shl	local03, #1
1f838     F2 2A 02 F1 | 	add	local03, objptr
1f83c     14 33 02 F6 | 	mov	local07, local02
1f840     08 32 66 F0 | 	shl	local07, #8
1f844     15 33 52 FC | 	wrword	local07, local03
1f848     01 28 06 F1 | 	add	local02, #1
1f84c     00 29 56 F2 | 	cmps	local02, #256 wc
1f850     DC FF 9F CD |  if_b	jmp	#LR__2623
1f854                 | LR__2624
1f854     FE E5 05 F1 | 	add	objptr, #510
1f858     F2 00 58 FC | 	wrword	#0, objptr
1f85c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1f85c     00 28 06 F6 | 	mov	local02, #0
1f860     02 E4 05 F1 | 	add	objptr, #2
1f864     97 16 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
1f868                 | LR__2625
1f868     14 2B 02 F6 | 	mov	local03, local02
1f86c     01 2A 66 F0 | 	shl	local03, #1
1f870     F2 2A 02 F1 | 	add	local03, objptr
1f874     14 33 02 F6 | 	mov	local07, local02
1f878     04 32 66 F0 | 	shl	local07, #4
1f87c     14 33 02 F1 | 	add	local07, local02
1f880     04 32 66 F0 | 	shl	local07, #4
1f884     15 33 52 FC | 	wrword	local07, local03
1f888     01 28 06 F1 | 	add	local02, #1
1f88c     F0 28 56 F2 | 	cmps	local02, #240 wc
1f890     D4 FF 9F CD |  if_b	jmp	#LR__2625
1f894                 | LR__2626
1f894     F0 28 06 F6 | 	mov	local02, #240
1f898     97 14 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
1f89c                 | LR__2627
1f89c     14 2B 02 F6 | 	mov	local03, local02
1f8a0     01 2A 66 F0 | 	shl	local03, #1
1f8a4     F2 2A 02 F1 | 	add	local03, objptr
1f8a8     FF 30 06 F6 | 	mov	local06, #255
1f8ac     14 31 82 F1 | 	sub	local06, local02
1f8b0     0C 30 66 F0 | 	shl	local06, #12
1f8b4     15 31 52 FC | 	wrword	local06, local03
1f8b8     01 28 06 F1 | 	add	local02, #1
1f8bc     00 29 16 F2 | 	cmp	local02, #256 wc
1f8c0     D8 FF 9F CD |  if_b	jmp	#LR__2627
1f8c4                 | LR__2628
1f8c4                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1f8c4     00 28 06 F6 | 	mov	local02, #0
1f8c8     01 00 00 FF 
1f8cc     00 E4 05 F1 | 	add	objptr, ##512
1f8d0     97 20 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
1f8d4                 | LR__2629
1f8d4     14 2B 02 F6 | 	mov	local03, local02
1f8d8     01 2A 66 F0 | 	shl	local03, #1
1f8dc     F2 2A 02 F1 | 	add	local03, objptr
1f8e0     14 33 02 F6 | 	mov	local07, local02
1f8e4     09 32 66 F0 | 	shl	local07, #9
1f8e8     15 33 52 FC | 	wrword	local07, local03
1f8ec     FF 2A 06 F6 | 	mov	local03, #255
1f8f0     14 2B 82 F1 | 	sub	local03, local02
1f8f4     01 2A 66 F0 | 	shl	local03, #1
1f8f8     F2 2A 02 F1 | 	add	local03, objptr
1f8fc     14 33 02 F6 | 	mov	local07, local02
1f900     09 32 66 F0 | 	shl	local07, #9
1f904     15 33 52 FC | 	wrword	local07, local03
1f908     01 28 06 F1 | 	add	local02, #1
1f90c     80 28 56 F2 | 	cmps	local02, #128 wc
1f910     C0 FF 9F CD |  if_b	jmp	#LR__2629
1f914                 | LR__2630
1f914                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1f914     00 28 06 F6 | 	mov	local02, #0
1f918     01 00 00 FF 
1f91c     00 E4 05 F1 | 	add	objptr, ##512
1f920     97 12 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
1f924                 | LR__2631
1f924     14 2B 02 F6 | 	mov	local03, local02
1f928     01 2A 66 F0 | 	shl	local03, #1
1f92c     F2 2A 02 F1 | 	add	local03, objptr
1f930     14 33 02 F6 | 	mov	local07, local02
1f934     0D 32 66 F0 | 	shl	local07, #13
1f938     15 33 52 FC | 	wrword	local07, local03
1f93c     01 28 06 F1 | 	add	local02, #1
1f940     08 28 56 F2 | 	cmps	local02, #8 wc
1f944     DC FF 9F CD |  if_b	jmp	#LR__2631
1f948                 | LR__2632
1f948                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1f948     08 28 06 F6 | 	mov	local02, #8
1f94c     97 1A 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
1f950                 | LR__2633
1f950     14 2B 02 F6 | 	mov	local03, local02
1f954     01 2A 66 F0 | 	shl	local03, #1
1f958     F2 2A 02 F1 | 	add	local03, objptr
1f95c     14 2F 02 F6 | 	mov	local05, local02
1f960     08 2E 86 F1 | 	sub	local05, #8
1f964     0B 2E 66 F0 | 	shl	local05, #11
1f968     7F 00 00 FF 
1f96c     00 33 06 F6 | 	mov	local07, ##65280
1f970     17 33 82 F1 | 	sub	local07, local05
1f974     15 33 52 FC | 	wrword	local07, local03
1f978     01 28 06 F1 | 	add	local02, #1
1f97c     18 28 16 F2 | 	cmp	local02, #24 wc
1f980     CC FF 9F CD |  if_b	jmp	#LR__2633
1f984                 | LR__2634
1f984                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1f984     18 28 06 F6 | 	mov	local02, #24
1f988     97 10 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
1f98c                 | LR__2635
1f98c     14 2B 02 F6 | 	mov	local03, local02
1f990     01 2A 66 F0 | 	shl	local03, #1
1f994     F2 2A 02 F1 | 	add	local03, objptr
1f998     40 00 80 FF 
1f99c     15 01 58 FC | 	wrword	##32768, local03
1f9a0     01 28 06 F1 | 	add	local02, #1
1f9a4     81 28 16 F2 | 	cmp	local02, #129 wc
1f9a8     E0 FF 9F CD |  if_b	jmp	#LR__2635
1f9ac                 | LR__2636
1f9ac                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1f9ac     81 28 06 F6 | 	mov	local02, #129
1f9b0     97 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
1f9b4                 | LR__2637
1f9b4     14 2B 02 F6 | 	mov	local03, local02
1f9b8     01 2A 66 F0 | 	shl	local03, #1
1f9bc     F2 2A 02 F1 | 	add	local03, objptr
1f9c0     FF 30 06 F6 | 	mov	local06, #255
1f9c4     14 31 82 F1 | 	sub	local06, local02
1f9c8     08 30 66 F0 | 	shl	local06, #8
1f9cc     15 31 52 FC | 	wrword	local06, local03
1f9d0     01 28 06 F1 | 	add	local02, #1
1f9d4     00 29 16 F2 | 	cmp	local02, #256 wc
1f9d8     D8 FF 9F CD |  if_b	jmp	#LR__2637
1f9dc                 | LR__2638
1f9dc     3F 00 00 FF 
1f9e0     42 E4 05 F1 | 	add	objptr, ##32322
1f9e4     F2 00 59 FC | 	wrword	#128, objptr
1f9e8     52 00 00 FF 
1f9ec     1A E5 85 F1 | 	sub	objptr, ##42266
1f9f0                 | ' for i=0 to 7
1f9f0     00 28 06 F6 | 	mov	local02, #0
1f9f4     97 9C 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
1f9f8                 | LR__2639
1f9f8     14 2B 02 F6 | 	mov	local03, local02
1f9fc     03 2A 66 F0 | 	shl	local03, #3
1fa00     14 2B 82 F1 | 	sub	local03, local02
1fa04     02 2A 66 F0 | 	shl	local03, #2
1fa08     14 00 00 FF 
1fa0c     38 E5 05 F1 | 	add	objptr, ##10552
1fa10     F2 2A 02 F1 | 	add	local03, objptr
1fa14     00 EE A1 FF 
1fa18     15 01 68 FC | 	wrlong	##1138491392, local03
1fa1c     14 2B 02 F6 | 	mov	local03, local02
1fa20     03 2A 66 F0 | 	shl	local03, #3
1fa24     14 2B 82 F1 | 	sub	local03, local02
1fa28     02 2A 66 F0 | 	shl	local03, #2
1fa2c     F2 2A 02 F1 | 	add	local03, objptr
1fa30     04 2A 06 F1 | 	add	local03, #4
1fa34     15 29 42 FC | 	wrbyte	local02, local03
1fa38     14 2B 02 F6 | 	mov	local03, local02
1fa3c     03 2A 66 F0 | 	shl	local03, #3
1fa40     14 2B 82 F1 | 	sub	local03, local02
1fa44     02 2A 66 F0 | 	shl	local03, #2
1fa48     F2 2A 02 F1 | 	add	local03, objptr
1fa4c     05 2A 06 F1 | 	add	local03, #5
1fa50     15 29 42 FC | 	wrbyte	local02, local03
1fa54     14 2B 02 F6 | 	mov	local03, local02
1fa58     03 2A 66 F0 | 	shl	local03, #3
1fa5c     14 2B 82 F1 | 	sub	local03, local02
1fa60     02 2A 66 F0 | 	shl	local03, #2
1fa64     F2 2A 02 F1 | 	add	local03, objptr
1fa68     06 2A 06 F1 | 	add	local03, #6
1fa6c     15 01 58 FC | 	wrword	#0, local03
1fa70     14 2B 02 F6 | 	mov	local03, local02
1fa74     03 2A 66 F0 | 	shl	local03, #3
1fa78     14 2B 82 F1 | 	sub	local03, local02
1fa7c     02 2A 66 F0 | 	shl	local03, #2
1fa80     F2 2A 02 F1 | 	add	local03, objptr
1fa84     08 2A 06 F1 | 	add	local03, #8
1fa88     00 C0 9F FF 
1fa8c     15 01 68 FC | 	wrlong	##1065353216, local03
1fa90     14 2B 02 F6 | 	mov	local03, local02
1fa94     03 2A 66 F0 | 	shl	local03, #3
1fa98     14 2B 82 F1 | 	sub	local03, local02
1fa9c     02 2A 66 F0 | 	shl	local03, #2
1faa0     F2 2A 02 F1 | 	add	local03, objptr
1faa4     0C 2A 06 F1 | 	add	local03, #12
1faa8     00 40 A0 FF 
1faac     15 01 68 FC | 	wrlong	##1082130432, local03
1fab0     14 2B 02 F6 | 	mov	local03, local02
1fab4     03 2A 66 F0 | 	shl	local03, #3
1fab8     14 2B 82 F1 | 	sub	local03, local02
1fabc     02 2A 66 F0 | 	shl	local03, #2
1fac0     F2 2A 02 F1 | 	add	local03, objptr
1fac4     10 2A 06 F1 | 	add	local03, #16
1fac8     15 01 68 FC | 	wrlong	#0, local03
1facc     14 2B 02 F6 | 	mov	local03, local02
1fad0     03 2A 66 F0 | 	shl	local03, #3
1fad4     14 2B 82 F1 | 	sub	local03, local02
1fad8     02 2A 66 F0 | 	shl	local03, #2
1fadc     F2 2A 02 F1 | 	add	local03, objptr
1fae0     14 2A 06 F1 | 	add	local03, #20
1fae4     15 FF 59 FC | 	wrword	#255, local03
1fae8     14 2B 02 F6 | 	mov	local03, local02
1faec     03 2A 66 F0 | 	shl	local03, #3
1faf0     14 2B 82 F1 | 	sub	local03, local02
1faf4     02 2A 66 F0 | 	shl	local03, #2
1faf8     F2 2A 02 F1 | 	add	local03, objptr
1fafc     16 2A 06 F1 | 	add	local03, #22
1fb00     15 01 58 FC | 	wrword	#0, local03
1fb04     14 2B 02 F6 | 	mov	local03, local02
1fb08     01 2A 66 F0 | 	shl	local03, #1
1fb0c     3D 00 00 FF 
1fb10     D4 E5 05 F1 | 	add	objptr, ##31700
1fb14     F2 2A 02 F1 | 	add	local03, objptr
1fb18     15 FF 59 FC | 	wrword	#255, local03
1fb1c     01 28 06 F1 | 	add	local02, #1
1fb20     08 28 56 F2 | 	cmps	local02, #8 wc
1fb24     52 00 00 FF 
1fb28     0C E5 85 F1 | 	sub	objptr, ##42252
1fb2c     C8 FE 9F CD |  if_b	jmp	#LR__2639
1fb30                 | LR__2640
1fb30     00 6E 20 FF 
1fb34     00 32 06 F6 | 	mov	local07, ##1088159744
1fb38                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1fb38     03 30 06 F6 | 	mov	local06, #3
1fb3c                 | LR__2641
1fb3c     19 13 02 F6 | 	mov	arg01, local07
1fb40     CE C3 1F FF 
1fb44     7D 14 06 F6 | 	mov	arg02, ##1065852029
1fb48     28 74 B0 FD | 	call	#__system___float_mul
1fb4c     FD 32 02 F6 | 	mov	local07, result1
1fb50     FA 31 6E FB | 	djnz	local06, #LR__2641
1fb54     00 28 06 F6 | 	mov	local02, #0
1fb58                 | LR__2642
1fb58     14 2D 02 F6 | 	mov	local04, local02
1fb5c     02 2C 66 F0 | 	shl	local04, #2
1fb60     F2 2A 02 F6 | 	mov	local03, objptr
1fb64     14 00 00 FF 
1fb68     D8 2A 06 F1 | 	add	local03, ##10456
1fb6c     15 2D 02 F1 | 	add	local04, local03
1fb70     16 33 62 FC | 	wrlong	local07, local04
1fb74     19 13 02 F6 | 	mov	arg01, local07
1fb78     CE C3 1F FF 
1fb7c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1fb80     F0 73 B0 FD | 	call	#__system___float_mul
1fb84     FD 32 02 F6 | 	mov	local07, result1
1fb88     01 28 06 F1 | 	add	local02, #1
1fb8c     0C 28 56 F2 | 	cmps	local02, #12 wc
1fb90     C4 FF 9F CD |  if_b	jmp	#LR__2642
1fb94     14 00 00 FF 
1fb98     08 E5 05 F1 | 	add	objptr, ##10504
1fb9c     F2 50 6B FC | 	wrlong	#424, objptr
1fba0     04 E4 05 F1 | 	add	objptr, #4
1fba4     F2 20 6B FC | 	wrlong	#400, objptr
1fba8     04 E4 05 F1 | 	add	objptr, #4
1fbac     F2 F2 6A FC | 	wrlong	#377, objptr
1fbb0     04 E4 05 F1 | 	add	objptr, #4
1fbb4     F2 C8 6A FC | 	wrlong	#356, objptr
1fbb8     04 E4 05 F1 | 	add	objptr, #4
1fbbc     F2 A0 6A FC | 	wrlong	#336, objptr
1fbc0     04 E4 05 F1 | 	add	objptr, #4
1fbc4     F2 7A 6A FC | 	wrlong	#317, objptr
1fbc8     04 E4 05 F1 | 	add	objptr, #4
1fbcc     F2 58 6A FC | 	wrlong	#300, objptr
1fbd0     04 E4 05 F1 | 	add	objptr, #4
1fbd4     F2 36 6A FC | 	wrlong	#283, objptr
1fbd8     04 E4 05 F1 | 	add	objptr, #4
1fbdc     F2 16 6A FC | 	wrlong	#267, objptr
1fbe0     04 E4 05 F1 | 	add	objptr, #4
1fbe4     F2 F8 69 FC | 	wrlong	#252, objptr
1fbe8     04 E4 05 F1 | 	add	objptr, #4
1fbec     F2 DC 69 FC | 	wrlong	#238, objptr
1fbf0     04 E4 05 F1 | 	add	objptr, #4
1fbf4     F2 C0 69 FC | 	wrlong	#224, objptr
1fbf8     3D 00 00 FF 
1fbfc     E6 E5 05 F1 | 	add	objptr, ##31718
1fc00     F2 00 59 FC | 	wrword	#128, objptr
1fc04     02 E4 85 F1 | 	sub	objptr, #2
1fc08     F2 00 59 FC | 	wrword	#128, objptr
1fc0c     52 00 00 FF 
1fc10     18 E5 85 F1 | 	sub	objptr, ##42264
1fc14     A7 F0 03 F6 | 	mov	ptra, fp
1fc18     B2 00 A0 FD | 	call	#popregs_
1fc1c                 | _init_audio_ret
1fc1c     2D 00 64 FD | 	ret
1fc20                 | 
1fc20                 | '         
1fc20                 | ' sub printerror(err as integer, linenum=0 as integer)
1fc20                 | _printerror
1fc20     02 4A 05 F6 | 	mov	COUNT_, #2
1fc24     A8 00 A0 FD | 	call	#pushregs_
1fc28     09 27 02 F6 | 	mov	local01, arg01
1fc2c     0A 29 02 F6 | 	mov	local02, arg02
1fc30     96 01 00 FF 
1fc34     69 13 06 F6 | 	mov	arg01, ##@LR__5758
1fc38     A4 42 B0 FD | 	call	#_hg010b_spin2_write
1fc3c     13 13 02 F6 | 	mov	arg01, local01
1fc40     E0 47 B0 FD | 	call	#_hg010b_spin2_inttostr
1fc44     FD 12 02 F6 | 	mov	arg01, result1
1fc48     94 42 B0 FD | 	call	#_hg010b_spin2_write
1fc4c     96 01 00 FF 
1fc50     70 13 06 F6 | 	mov	arg01, ##@LR__5759
1fc54     88 42 B0 FD | 	call	#_hg010b_spin2_write
1fc58     02 26 66 F0 | 	shl	local01, #2
1fc5c     F2 14 02 F6 | 	mov	arg02, objptr
1fc60     45 00 00 FF 
1fc64     9C 14 06 F1 | 	add	arg02, ##35484
1fc68     0A 27 02 F1 | 	add	local01, arg02
1fc6c     13 13 02 FB | 	rdlong	arg01, local01
1fc70     6C 42 B0 FD | 	call	#_hg010b_spin2_write
1fc74                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
1fc74                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
1fc74     01 28 56 F2 | 	cmps	local02, #1 wc
1fc78     24 00 90 CD |  if_b	jmp	#LR__2650
1fc7c     96 01 00 FF 
1fc80     74 13 06 F6 | 	mov	arg01, ##@LR__5760
1fc84     58 42 B0 FD | 	call	#_hg010b_spin2_write
1fc88     14 13 02 F6 | 	mov	arg01, local02
1fc8c     94 47 B0 FD | 	call	#_hg010b_spin2_inttostr
1fc90     FD 12 02 F6 | 	mov	arg01, result1
1fc94                 | ' 
1fc94                 | ' write(text)
1fc94     48 42 B0 FD | 	call	#_hg010b_spin2_write
1fc98                 | ' crlf
1fc98     E4 46 B0 FD | 	call	#_hg010b_spin2_crlf
1fc9c     10 00 90 FD | 	jmp	#LR__2651
1fca0                 | LR__2650
1fca0     96 01 00 FF 
1fca4     7E 13 06 F6 | 	mov	arg01, ##@LR__5761
1fca8                 | ' 
1fca8                 | ' write(text)
1fca8     34 42 B0 FD | 	call	#_hg010b_spin2_write
1fcac                 | ' crlf
1fcac     D0 46 B0 FD | 	call	#_hg010b_spin2_crlf
1fcb0                 | LR__2651
1fcb0     A7 F0 03 F6 | 	mov	ptra, fp
1fcb4     B2 00 A0 FD | 	call	#popregs_
1fcb8                 | _printerror_ret
1fcb8     2D 00 64 FD | 	ret
1fcbc                 | 
1fcbc                 | ' 
1fcbc                 | ' 
1fcbc                 | ' 
1fcbc                 | ' '' ------------------------------- Convenient psram peek/poke
1fcbc                 | ' 
1fcbc                 | ' sub pslpoke(addr as ulong,value as ulong)
1fcbc                 | _pslpoke
1fcbc     00 4A 05 F6 | 	mov	COUNT_, #0
1fcc0     A8 00 A0 FD | 	call	#pushregs_
1fcc4     08 F0 07 F1 | 	add	ptra, #8
1fcc8     09 17 02 F6 | 	mov	arg03, arg01
1fccc     04 4E 05 F1 | 	add	fp, #4
1fcd0     A7 14 62 FC | 	wrlong	arg02, fp
1fcd4     A7 12 02 F6 | 	mov	arg01, fp
1fcd8     04 4E 85 F1 | 	sub	fp, #4
1fcdc     0B 15 02 F6 | 	mov	arg02, arg03
1fce0     04 16 06 F6 | 	mov	arg03, #4
1fce4     0B 00 00 FF 
1fce8     CC E4 05 F1 | 	add	objptr, ##5836
1fcec     50 4C B0 FD | 	call	#_psram_spin2_write
1fcf0     0B 00 00 FF 
1fcf4     CC E4 85 F1 | 	sub	objptr, ##5836
1fcf8     A7 F0 03 F6 | 	mov	ptra, fp
1fcfc     B2 00 A0 FD | 	call	#popregs_
1fd00                 | _pslpoke_ret
1fd00     2D 00 64 FD | 	ret
1fd04                 | 
1fd04                 | ' 
1fd04                 | ' sub psdpoke(addr as ulong,value as ulong)
1fd04                 | _psdpoke
1fd04     00 4A 05 F6 | 	mov	COUNT_, #0
1fd08     A8 00 A0 FD | 	call	#pushregs_
1fd0c     08 F0 07 F1 | 	add	ptra, #8
1fd10     09 17 02 F6 | 	mov	arg03, arg01
1fd14     04 4E 05 F1 | 	add	fp, #4
1fd18     A7 14 62 FC | 	wrlong	arg02, fp
1fd1c     A7 12 02 F6 | 	mov	arg01, fp
1fd20     04 4E 85 F1 | 	sub	fp, #4
1fd24     0B 15 02 F6 | 	mov	arg02, arg03
1fd28     02 16 06 F6 | 	mov	arg03, #2
1fd2c     0B 00 00 FF 
1fd30     CC E4 05 F1 | 	add	objptr, ##5836
1fd34     08 4C B0 FD | 	call	#_psram_spin2_write
1fd38     0B 00 00 FF 
1fd3c     CC E4 85 F1 | 	sub	objptr, ##5836
1fd40     A7 F0 03 F6 | 	mov	ptra, fp
1fd44     B2 00 A0 FD | 	call	#popregs_
1fd48                 | _psdpoke_ret
1fd48     2D 00 64 FD | 	ret
1fd4c                 | 
1fd4c                 | ' 
1fd4c                 | ' sub pspoke(addr as ulong,value as ulong)
1fd4c                 | _pspoke
1fd4c     00 4A 05 F6 | 	mov	COUNT_, #0
1fd50     A8 00 A0 FD | 	call	#pushregs_
1fd54     08 F0 07 F1 | 	add	ptra, #8
1fd58     09 17 02 F6 | 	mov	arg03, arg01
1fd5c     04 4E 05 F1 | 	add	fp, #4
1fd60     A7 14 62 FC | 	wrlong	arg02, fp
1fd64     A7 12 02 F6 | 	mov	arg01, fp
1fd68     04 4E 85 F1 | 	sub	fp, #4
1fd6c     0B 15 02 F6 | 	mov	arg02, arg03
1fd70     01 16 06 F6 | 	mov	arg03, #1
1fd74     0B 00 00 FF 
1fd78     CC E4 05 F1 | 	add	objptr, ##5836
1fd7c     C0 4B B0 FD | 	call	#_psram_spin2_write
1fd80     0B 00 00 FF 
1fd84     CC E4 85 F1 | 	sub	objptr, ##5836
1fd88     A7 F0 03 F6 | 	mov	ptra, fp
1fd8c     B2 00 A0 FD | 	call	#popregs_
1fd90                 | _pspoke_ret
1fd90     2D 00 64 FD | 	ret
1fd94                 | 
1fd94                 | ' 
1fd94                 | ' function pspeek(adr as ulong) as ubyte
1fd94                 | _pspeek
1fd94     00 4A 05 F6 | 	mov	COUNT_, #0
1fd98     A8 00 A0 FD | 	call	#pushregs_
1fd9c     0C F0 07 F1 | 	add	ptra, #12
1fda0     09 15 02 F6 | 	mov	arg02, arg01
1fda4     A7 12 02 F6 | 	mov	arg01, fp
1fda8     08 12 06 F1 | 	add	arg01, #8
1fdac     01 16 06 F6 | 	mov	arg03, #1
1fdb0     0B 00 00 FF 
1fdb4     CC E4 05 F1 | 	add	objptr, ##5836
1fdb8     E8 4A B0 FD | 	call	#_psram_spin2_read1
1fdbc     0B 00 00 FF 
1fdc0     CC E4 85 F1 | 	sub	objptr, ##5836
1fdc4                 | ' psram.read1(varptr(res),adr,1)
1fdc4                 | ' return res
1fdc4     08 4E 05 F1 | 	add	fp, #8
1fdc8     A7 FA C1 FA | 	rdbyte	result1, fp
1fdcc     08 4E 85 F1 | 	sub	fp, #8
1fdd0     A7 F0 03 F6 | 	mov	ptra, fp
1fdd4     B2 00 A0 FD | 	call	#popregs_
1fdd8                 | _pspeek_ret
1fdd8     2D 00 64 FD | 	ret
1fddc                 | 
1fddc                 | ' 
1fddc                 | ' function pslpeek(adr as ulong) as ulong
1fddc                 | _pslpeek
1fddc     00 4A 05 F6 | 	mov	COUNT_, #0
1fde0     A8 00 A0 FD | 	call	#pushregs_
1fde4     0C F0 07 F1 | 	add	ptra, #12
1fde8     09 15 02 F6 | 	mov	arg02, arg01
1fdec     A7 12 02 F6 | 	mov	arg01, fp
1fdf0     08 12 06 F1 | 	add	arg01, #8
1fdf4     04 16 06 F6 | 	mov	arg03, #4
1fdf8     0B 00 00 FF 
1fdfc     CC E4 05 F1 | 	add	objptr, ##5836
1fe00     A0 4A B0 FD | 	call	#_psram_spin2_read1
1fe04     0B 00 00 FF 
1fe08     CC E4 85 F1 | 	sub	objptr, ##5836
1fe0c                 | ' psram.read1(varptr(res),adr,4)
1fe0c                 | ' return res
1fe0c     08 4E 05 F1 | 	add	fp, #8
1fe10     A7 FA 01 FB | 	rdlong	result1, fp
1fe14     08 4E 85 F1 | 	sub	fp, #8
1fe18     A7 F0 03 F6 | 	mov	ptra, fp
1fe1c     B2 00 A0 FD | 	call	#popregs_
1fe20                 | _pslpeek_ret
1fe20     2D 00 64 FD | 	ret
1fe24                 | 
1fe24                 | ' 
1fe24                 | ' function psdpeek(adr as ulong) as ulong
1fe24                 | _psdpeek
1fe24     00 4A 05 F6 | 	mov	COUNT_, #0
1fe28     A8 00 A0 FD | 	call	#pushregs_
1fe2c     0C F0 07 F1 | 	add	ptra, #12
1fe30     09 15 02 F6 | 	mov	arg02, arg01
1fe34     A7 12 02 F6 | 	mov	arg01, fp
1fe38     08 12 06 F1 | 	add	arg01, #8
1fe3c     02 16 06 F6 | 	mov	arg03, #2
1fe40     0B 00 00 FF 
1fe44     CC E4 05 F1 | 	add	objptr, ##5836
1fe48     58 4A B0 FD | 	call	#_psram_spin2_read1
1fe4c     0B 00 00 FF 
1fe50     CC E4 85 F1 | 	sub	objptr, ##5836
1fe54                 | ' psram.read1(varptr(res),adr,2)
1fe54                 | ' return res
1fe54     08 4E 05 F1 | 	add	fp, #8
1fe58     A7 FA E1 FA | 	rdword	result1, fp
1fe5c     08 4E 85 F1 | 	sub	fp, #8
1fe60     A7 F0 03 F6 | 	mov	ptra, fp
1fe64     B2 00 A0 FD | 	call	#popregs_
1fe68                 | _psdpeek_ret
1fe68     2D 00 64 FD | 	ret
1fe6c                 | 
1fe6c                 | ' 
1fe6c                 | ' '' ------------------------------- USB keyboard scan to char translator
1fe6c                 | ' 
1fe6c                 | ' function scantochar(key)
1fe6c                 | _scantochar
1fe6c                 | ' 
1fe6c                 | ' select case (key shr 8) and 255
1fe6c     09 01 02 F6 | 	mov	_var01, arg01
1fe70     08 00 C6 F0 | 	sar	_var01, #8
1fe74     FF 00 0E F5 | 	and	_var01, #255 wz
1fe78     24 00 90 AD |  if_e	jmp	#LR__2660
1fe7c     02 00 0E F2 | 	cmp	_var01, #2 wz
1fe80     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1fe84     30 00 90 AD |  if_e	jmp	#LR__2661
1fe88     40 00 0E F2 | 	cmp	_var01, #64 wz
1fe8c     44 00 90 AD |  if_e	jmp	#LR__2662
1fe90     42 00 0E F2 | 	cmp	_var01, #66 wz
1fe94     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1fe98     70 00 90 5D |  if_ne	jmp	#LR__2664
1fe9c     50 00 90 FD | 	jmp	#LR__2663
1fea0                 | LR__2660
1fea0     09 FB 01 F6 | 	mov	result1, arg01
1fea4     7F FA 05 F5 | 	and	result1, #127
1fea8     02 FA 65 F0 | 	shl	result1, #2
1feac     F5 FA 01 F1 | 	add	result1, ptr__dat__
1feb0     FD FA C1 FA | 	rdbyte	result1, result1
1feb4     54 00 90 FD | 	jmp	#_scantochar_ret
1feb8                 | LR__2661
1feb8     09 FB 01 F6 | 	mov	result1, arg01
1febc     7F FA 05 F5 | 	and	result1, #127
1fec0     02 FA 65 F0 | 	shl	result1, #2
1fec4     01 FA 05 F1 | 	add	result1, #1
1fec8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1fecc     FD FA C1 FA | 	rdbyte	result1, result1
1fed0     38 00 90 FD | 	jmp	#_scantochar_ret
1fed4                 | LR__2662
1fed4     09 FB 01 F6 | 	mov	result1, arg01
1fed8     7F FA 05 F5 | 	and	result1, #127
1fedc     02 FA 65 F0 | 	shl	result1, #2
1fee0     02 FA 05 F1 | 	add	result1, #2
1fee4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1fee8     FD FA C1 FA | 	rdbyte	result1, result1
1feec     1C 00 90 FD | 	jmp	#_scantochar_ret
1fef0                 | LR__2663
1fef0     09 FB 01 F6 | 	mov	result1, arg01
1fef4     7F FA 05 F5 | 	and	result1, #127
1fef8     02 FA 65 F0 | 	shl	result1, #2
1fefc     03 FA 05 F1 | 	add	result1, #3
1ff00     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ff04     FD FA C1 FA | 	rdbyte	result1, result1
1ff08     00 00 90 FD | 	jmp	#_scantochar_ret
1ff0c                 | LR__2664
1ff0c                 | _scantochar_ret
1ff0c     2D 00 64 FD | 	ret
1ff10                 | 
1ff10                 | _program
1ff10     2F 4A 05 F6 | 	mov	COUNT_, #47
1ff14     A8 00 A0 FD | 	call	#pushregs_
1ff18     0B 00 00 FF 
1ff1c     CC E4 05 F1 | 	add	objptr, ##5836
1ff20     00 2A 06 F6 | 	mov	local03, #0
1ff24     0B 2C 06 F6 | 	mov	local04, #11
1ff28     07 2E 06 F6 | 	mov	local05, #7
1ff2c                 | '     stop() ' restart driver if required
1ff2c     00 30 06 F6 | 	mov	local06, #0
1ff30                 | '     if drivercog <> -1
1ff30     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff34     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ff38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff3c     FF FF 7F FF 
1ff40     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1ff44     6C 00 90 AD |  if_e	jmp	#LR__2672
1ff48                 | '         cogstop(drivercog) ' a rather brutal stop
1ff48     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff4c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ff50     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff54     03 12 62 FD | 	cogstop	arg01
1ff58     97 24 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
1ff5c                 | '         repeat i from 0 to 7
1ff5c                 | LR__2670
1ff5c                 | '             if long[$7FF00][i*3] < 0
1ff5c     18 33 02 F6 | 	mov	local07, local06
1ff60     01 32 66 F0 | 	shl	local07, #1
1ff64     18 33 02 F1 | 	add	local07, local06
1ff68     02 32 66 F0 | 	shl	local07, #2
1ff6c     FF 03 00 FF 
1ff70     00 33 06 F1 | 	add	local07, ##524032
1ff74     19 FB 01 FB | 	rdlong	result1, local07
1ff78     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff7c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1ff7c     18 33 02 C6 |  if_b	mov	local07, local06
1ff80     01 32 66 C0 |  if_b	shl	local07, #1
1ff84     18 33 02 C1 |  if_b	add	local07, local06
1ff88     02 32 66 C0 |  if_b	shl	local07, #2
1ff8c     FF 03 00 CF 
1ff90     00 33 06 C1 |  if_b	add	local07, ##524032
1ff94     19 21 68 CC |  if_b	wrlong	#16, local07
1ff98     01 30 06 F1 | 	add	local06, #1
1ff9c     08 30 56 F2 | 	cmps	local06, #8 wc
1ffa0     B8 FF 9F CD |  if_b	jmp	#LR__2670
1ffa4                 | LR__2671
1ffa4                 | '         drivercog := -1
1ffa4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ffa8     FF FF FF FF 
1ffac     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1ffb0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ffb4                 | LR__2672
1ffb4                 | '     if driverlock <> -1
1ffb4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ffb8     FA 34 02 FB | 	rdlong	local08, ptr__psram_spin2_dat__
1ffbc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ffc0     FF FF 7F FF 
1ffc4     FF 35 0E F2 | 	cmp	local08, ##-1 wz
1ffc8                 | '         LOCKRET(driverlock)
1ffc8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1ffcc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1ffd0     05 12 62 5D |  if_ne	lockret	arg01
1ffd4     FF FF FF 5F 
1ffd8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1ffdc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1ffe0     00 2A 0E F2 | 	cmp	local03, #0 wz
1ffe4     14 2A 06 AB |  if_e	rdlong	local03, #20
1ffe8     15 15 52 F6 | 	abs	arg02, local03 wc
1ffec     A1 07 00 FF 
1fff0     40 14 16 FD | 	qdiv	arg02, ##1000000
1fff4                 | '         driverlock := -1
1fff4     18 FB 01 F6 | 	mov	result1, local06
1fff8                 | ' 
1fff8                 | '     ' use current frequency if none specified
1fff8                 | ' 
1fff8                 | '     if freq == 0 
1fff8                 | '         freq := clkfreq 
1fff8                 | ' 
1fff8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fff8                 | ' 
1fff8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fff8                 | '     if burst < 0
1fff8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fff8     18 14 62 FD | 	getqx	arg02
1fffc     0A 19 82 F6 | 	negc	arg04, arg02
20000     03 18 66 F0 | 	shl	arg04, #3
20004     84 18 86 F1 | 	sub	arg04, #132
20008     04 18 46 F0 | 	shr	arg04, #4
2000c     04 18 66 F0 | 	shl	arg04, #4
20010     00 18 56 F2 | 	cmps	arg04, #0 wc
20014     0E FA 65 C6 |  if_b	neg	result1, #14
20018     4C 01 90 CD |  if_b	jmp	#LR__2679
2001c                 | ' 
2001c                 | '     ' compute the input delay
2001c                 | ' 
2001c                 | '     if delay <= 0
2001c     01 2C 56 F2 | 	cmps	local04, #1 wc
20020     44 00 90 3D |  if_ae	jmp	#LR__2675
20024                 | '         delay := lookupDelay(freq)
20024     15 13 02 F6 | 	mov	arg01, local03
20028                 | '     profile := @delayTable
20028     FA 36 02 F6 | 	mov	local09, ptr__psram_spin2_dat__
2002c     08 37 06 F1 | 	add	local09, #264
20030                 | '     delay := long[profile][0]
20030     1B 39 02 FB | 	rdlong	local10, local09
20034     97 14 48 FB | 	callpa	#(@LR__2674-@LR__2673)>>2,fcache_load_ptr_
20038                 | '     repeat while long[profile][1] 
20038                 | LR__2673
20038     04 36 06 F1 | 	add	local09, #4
2003c     1B 3B 0A FB | 	rdlong	local11, local09 wz
20040     04 36 86 F1 | 	sub	local09, #4
20044                 | '         if freq +< long[profile][1] 
20044     04 36 06 51 |  if_ne	add	local09, #4
20048     1B 3B 02 5B |  if_ne	rdlong	local11, local09
2004c     04 36 86 51 |  if_ne	sub	local09, #4
20050     1D 13 12 52 |  if_ne	cmp	arg01, local11 wc
20054                 | '             quit
20054                 | '         profile += 4
20054     04 36 06 11 |  if_a	add	local09, #4
20058                 | '         delay++
20058     01 38 06 11 |  if_a	add	local10, #1
2005c     D8 FF 9F 1D |  if_a	jmp	#LR__2673
20060                 | LR__2674
20060     1C 2D 02 F6 | 	mov	local04, local10
20064     04 00 90 FD | 	jmp	#LR__2676
20068                 | LR__2675
20068                 | '     else
20068                 | '         delay <#= $f ' limit to 15
20068     0F 2C 66 F3 | 	fles	local04, #15
2006c                 | LR__2676
2006c                 | ' 
2006c                 | '     ' create our lock
2006c                 | ' 
2006c                 | '     driverlock := LOCKNEW()  
2006c     00 FA 05 F6 | 	mov	result1, #0
20070     04 FA 61 FD | 	locknew	result1
20074     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20078     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
2007c                 | '     if driverlock == -1
2007c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20080     FF FF 7F FF 
20084     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20088                 | '         return ERR_NO_LOCK
20088     1A FA 65 A6 |  if_e	neg	result1, #26
2008c     D8 00 90 AD |  if_e	jmp	#LR__2679
20090                 | ' 
20090                 | '     ' patch in the proper data and HUB addresses to the startup structure
20090                 | ' 
20090                 | '     long[@startupData][0]:=clkfreq
20090     14 2A 06 FB | 	rdlong	local03, #20
20094     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
20098     FA 2A 62 FC | 	wrlong	local03, ptr__psram_spin2_dat__
2009c                 | ' '    long[@startupData][1]:=$1000_0000
2009c                 | '     long[@startupData][5]:=@deviceData
2009c     FA 2A 02 F6 | 	mov	local03, ptr__psram_spin2_dat__
200a0     20 2A 06 F1 | 	add	local03, #32
200a4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
200a8     14 14 06 F1 | 	add	arg02, #20
200ac     0A 2B 62 FC | 	wrlong	local03, arg02
200b0                 | '     long[@startupData][6]:=@qosData
200b0     FA 2A 02 F6 | 	mov	local03, ptr__psram_spin2_dat__
200b4     A0 2A 06 F1 | 	add	local03, #160
200b8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
200bc     18 14 06 F1 | 	add	arg02, #24
200c0     0A 2B 62 FC | 	wrlong	local03, arg02
200c4                 | '     long[@startupData][7]:=$7FF00
200c4     FA 2A 02 F6 | 	mov	local03, ptr__psram_spin2_dat__
200c8     1C 2A 06 F1 | 	add	local03, #28
200cc     FF 03 80 FF 
200d0     15 01 6A FC | 	wrlong	##524032, local03
200d4                 | ' 
200d4                 | '     ' setup some default bank and QoS parameter values
200d4                 | ' 
200d4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
200d4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
200d8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
200dc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
200e0     10 18 66 F0 | 	shl	arg04, #16
200e4     0C 2C 66 F0 | 	shl	local04, #12
200e8     16 19 42 F5 | 	or	arg04, local04
200ec     18 18 46 F5 | 	or	arg04, #24
200f0     0C 15 02 F6 | 	mov	arg02, arg04
200f4     02 16 06 F6 | 	mov	arg03, #2
200f8     A0 00 A0 FD | 	call	#\builtin_longfill_
200fc                 | '     longfill(@qosData, $FFFF0000, 8)
200fc     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
20100     C8 13 06 F1 | 	add	arg01, #456
20104     07 16 06 F6 | 	mov	arg03, #7
20108     28 16 62 FD | 	setq	arg03
2010c     80 FF FF FF 
20110     09 01 68 FC | 	wrlong	##-65536, arg01
20114                 | ' 
20114                 | '     ' get the address of the PSRAM memory driver so we can start it
20114                 | ' 
20114                 | '     driverAddr:= driver.getDriverAddr()
20114                 | '     return @driver_start
20114     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
20118     20 14 06 F1 | 	add	arg02, #32
2011c                 | ' 
2011c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2011c                 | ' 
2011c                 | '     if desiredcog < 0
2011c     00 2E 56 F2 | 	cmps	local05, #0 wc
20120                 | '         desiredcog := NEWCOG
20120     10 2E 06 C6 |  if_b	mov	local05, #16
20124                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
20124     FA 16 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
20128     28 17 06 F1 | 	add	arg03, #296
2012c     17 3D 02 F6 | 	mov	local12, local05
20130     28 16 62 FD | 	setq	arg03
20134     0A 3D F2 FC | 	coginit	local12, arg02 wc
20138     01 3C 66 C6 |  if_b	neg	local12, #1
2013c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20140     FA 3C 62 FC | 	wrlong	local12, ptr__psram_spin2_dat__
20144     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20148     97 08 48 FB | 	callpa	#(@LR__2678-@LR__2677)>>2,fcache_load_ptr_
2014c                 | '     repeat until long[@startupData] == 0 
2014c                 | LR__2677
2014c     FA 3C 02 F6 | 	mov	local12, ptr__psram_spin2_dat__
20150     28 3D 06 F1 | 	add	local12, #296
20154     1E 3D 0A FB | 	rdlong	local12, local12 wz
20158     F0 FF 9F 5D |  if_ne	jmp	#LR__2677
2015c                 | LR__2678
2015c                 | ' 
2015c                 | '     return drivercog
2015c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20160     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
20164     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20168                 | LR__2679
20168     2B 00 00 FF 
2016c     5C E5 05 F1 | 	add	objptr, ##22364
20170     F2 FA 61 FC | 	wrlong	result1, objptr
20174                 | '     return $7FF00 + cog*12
20174     0C E4 05 F1 | 	add	objptr, #12
20178     FF 03 80 FF 
2017c     F2 00 6A FC | 	wrlong	##524032, objptr
20180     2B 00 00 FF 
20184     68 E5 85 F1 | 	sub	objptr, ##22376
20188                 | ' 
20188                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
20188                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
20188                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
20188                 | ' 
20188                 | ' mailboxaddr:=mbox 
20188     FF 03 80 FF 
2018c     F2 00 6A FC | 	wrlong	##524032, objptr
20190                 | ' scope_ptr:=scope
20190     04 E4 05 F1 | 	add	objptr, #4
20194     F2 00 68 FC | 	wrlong	#0, objptr
20198                 | ' cache_ptr:=cache
20198     04 E4 05 F1 | 	add	objptr, #4
2019c     F0 03 80 FF 
201a0     F2 00 68 FC | 	wrlong	##516096, objptr
201a4                 | ' base:=@channel1[0]
201a4     04 E4 05 F1 | 	add	objptr, #4
201a8     F2 3E 02 F6 | 	mov	local13, objptr
201ac                 | ' long[$40]:=mbox
201ac     FF 03 80 FF 
201b0     40 00 6E FC | 	wrlong	##524032, #64
201b4                 | ' repeat iii from 0 to 7
201b4     00 40 06 F6 | 	mov	local14, #0
201b8     02 00 00 FF 
201bc     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
201c0     0C E4 85 F1 | 	sub	objptr, #12
201c4     97 BC 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
201c8                 | LR__2680
201c8                 | '   long[base+64*iii]:=0
201c8     1F 91 02 F6 | 	mov	muldivb_, local13
201cc     20 FD 01 F6 | 	mov	result2, local14
201d0     06 FC 65 F0 | 	shl	result2, #6
201d4     FE 90 02 F1 | 	add	muldivb_, result2
201d8     48 01 68 FC | 	wrlong	#0, muldivb_
201dc                 | '   long[base+64*iii+4]:=0
201dc     1F 91 02 F6 | 	mov	muldivb_, local13
201e0     20 FD 01 F6 | 	mov	result2, local14
201e4     06 FC 65 F0 | 	shl	result2, #6
201e8     FE 90 02 F1 | 	add	muldivb_, result2
201ec     04 90 06 F1 | 	add	muldivb_, #4
201f0     48 01 68 FC | 	wrlong	#0, muldivb_
201f4                 | '   long[base+64*iii+12]:=0
201f4     1F 43 02 F6 | 	mov	local15, local13
201f8     20 91 02 F6 | 	mov	muldivb_, local14
201fc     06 90 66 F0 | 	shl	muldivb_, #6
20200     48 43 02 F1 | 	add	local15, muldivb_
20204     0C 42 06 F1 | 	add	local15, #12
20208     21 01 68 FC | 	wrlong	#0, local15
2020c                 | '   long[base+64*iii+16]:=2 
2020c     1F 43 02 F6 | 	mov	local15, local13
20210     20 91 02 F6 | 	mov	muldivb_, local14
20214     06 90 66 F0 | 	shl	muldivb_, #6
20218     48 43 02 F1 | 	add	local15, muldivb_
2021c     10 42 06 F1 | 	add	local15, #16
20220     21 05 68 FC | 	wrlong	#2, local15
20224                 | '   word[base+64*iii+20]:=0
20224     1F 43 02 F6 | 	mov	local15, local13
20228     20 91 02 F6 | 	mov	muldivb_, local14
2022c     06 90 66 F0 | 	shl	muldivb_, #6
20230     48 43 02 F1 | 	add	local15, muldivb_
20234     14 42 06 F1 | 	add	local15, #20
20238     21 01 58 FC | 	wrword	#0, local15
2023c                 | '   word[base+64*iii+22]:=8192
2023c     1F 43 02 F6 | 	mov	local15, local13
20240     20 91 02 F6 | 	mov	muldivb_, local14
20244     06 90 66 F0 | 	shl	muldivb_, #6
20248     48 43 02 F1 | 	add	local15, muldivb_
2024c     16 42 06 F1 | 	add	local15, #22
20250     10 00 80 FF 
20254     21 01 58 FC | 	wrword	##8192, local15
20258                 | '   word[base+64*iii+24]:=4000+2*iii
20258     20 43 02 F6 | 	mov	local15, local14
2025c     01 42 66 F0 | 	shl	local15, #1
20260     07 00 00 FF 
20264     A0 91 06 F6 | 	mov	muldivb_, ##4000
20268     21 91 02 F1 | 	add	muldivb_, local15
2026c     1F 43 02 F6 | 	mov	local15, local13
20270     20 FD 01 F6 | 	mov	result2, local14
20274     06 FC 65 F0 | 	shl	result2, #6
20278     FE 42 02 F1 | 	add	local15, result2
2027c     18 42 06 F1 | 	add	local15, #24
20280     21 91 52 FC | 	wrword	muldivb_, local15
20284                 | '   word[base+64*iii+26]:=2
20284     1F 43 02 F6 | 	mov	local15, local13
20288     20 91 02 F6 | 	mov	muldivb_, local14
2028c     06 90 66 F0 | 	shl	muldivb_, #6
20290     48 43 02 F1 | 	add	local15, muldivb_
20294     1A 42 06 F1 | 	add	local15, #26
20298     21 05 58 FC | 	wrword	#2, local15
2029c                 | '   long [base+64*iii+8]:=@null | $C0000000
2029c     F4 90 02 F6 | 	mov	muldivb_, ptr__audio096_spin2_dat__
202a0     3E 90 26 F4 | 	bith	muldivb_, #62
202a4     1F 43 02 F6 | 	mov	local15, local13
202a8     20 17 02 F6 | 	mov	arg03, local14
202ac     06 16 66 F0 | 	shl	arg03, #6
202b0     0B 43 02 F1 | 	add	local15, arg03
202b4     08 42 06 F1 | 	add	local15, #8
202b8     21 91 62 FC | 	wrlong	muldivb_, local15
202bc                 | '   long[base+64*iii+32]:=0
202bc     1F 43 02 F6 | 	mov	local15, local13
202c0     20 91 02 F6 | 	mov	muldivb_, local14
202c4     06 90 66 F0 | 	shl	muldivb_, #6
202c8     48 43 02 F1 | 	add	local15, muldivb_
202cc     20 42 06 F1 | 	add	local15, #32
202d0     21 01 68 FC | 	wrlong	#0, local15
202d4                 | '   long[base+64*iii+36]:=0
202d4     1F 43 02 F6 | 	mov	local15, local13
202d8     20 91 02 F6 | 	mov	muldivb_, local14
202dc     06 90 66 F0 | 	shl	muldivb_, #6
202e0     48 43 02 F1 | 	add	local15, muldivb_
202e4     24 42 06 F1 | 	add	local15, #36
202e8     21 01 68 FC | 	wrlong	#0, local15
202ec                 | '   long[base+64*iii+40]:=0
202ec     1F 43 02 F6 | 	mov	local15, local13
202f0     20 91 02 F6 | 	mov	muldivb_, local14
202f4     06 90 66 F0 | 	shl	muldivb_, #6
202f8     48 43 02 F1 | 	add	local15, muldivb_
202fc     28 42 06 F1 | 	add	local15, #40
20300     21 01 68 FC | 	wrlong	#0, local15
20304                 | '   long[base+64*iii+44]:=0
20304     1F 43 02 F6 | 	mov	local15, local13
20308     20 91 02 F6 | 	mov	muldivb_, local14
2030c     06 90 66 F0 | 	shl	muldivb_, #6
20310     48 43 02 F1 | 	add	local15, muldivb_
20314     2C 42 06 F1 | 	add	local15, #44
20318     21 01 68 FC | 	wrlong	#0, local15
2031c                 | '   long[base+64*iii+28]:=0
2031c     1F 43 02 F6 | 	mov	local15, local13
20320     20 45 02 F6 | 	mov	local16, local14
20324     06 44 66 F0 | 	shl	local16, #6
20328     22 43 02 F1 | 	add	local15, local16
2032c     1C 42 06 F1 | 	add	local15, #28
20330     21 01 68 FC | 	wrlong	#0, local15
20334     01 40 06 F1 | 	add	local14, #1
20338     08 40 56 F2 | 	cmps	local14, #8 wc
2033c     88 FE 9F CD |  if_b	jmp	#LR__2680
20340                 | LR__2681
20340     02 00 00 FF 
20344     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20348                 | '   
20348                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20348     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
2034c     F2 16 02 F6 | 	mov	arg03, objptr
20350     10 42 06 F6 | 	mov	local15, #16
20354     28 16 62 FD | 	setq	arg03
20358     0A 43 F2 FC | 	coginit	local15, arg02 wc
2035c     01 42 66 C6 |  if_b	neg	local15, #1
20360                 | ' waitms(100)
20360     64 12 06 F6 | 	mov	arg01, #100
20364     DC 4F B0 FD | 	call	#__system___waitms
20368                 | ' return cog,base
20368     1F 17 02 F6 | 	mov	arg03, local13
2036c     21 FB 01 F6 | 	mov	result1, local15
20370     2B 00 00 FF 
20374     50 E5 05 F1 | 	add	objptr, ##22352
20378     F2 FA 61 FC | 	wrlong	result1, objptr
2037c     14 E4 05 F1 | 	add	objptr, #20
20380     F2 16 62 FC | 	wrlong	arg03, objptr
20384     37 00 00 FF 
20388     30 E4 85 F1 | 	sub	objptr, ##28208
2038c     32 12 06 F6 | 	mov	arg01, #50
20390     B0 4F B0 FD | 	call	#__system___waitms
20394     37 00 00 FF 
20398     30 E4 05 F1 | 	add	objptr, ##28208
2039c     F2 12 02 FB | 	rdlong	arg01, objptr
203a0     37 00 00 FF 
203a4     30 E4 85 F1 | 	sub	objptr, ##28208
203a8     14 12 06 F1 | 	add	arg01, #20
203ac     20 00 80 FF 
203b0     09 01 58 FC | 	wrword	##16384, arg01
203b4     00 46 06 F6 | 	mov	local17, #0
203b8                 | '   ifnot driver_cog
203b8     15 00 00 FF 
203bc     87 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
203c0     FB 48 CA FA | 	rdbyte	local18, ptr__usbnew_spin2_dat__ wz
203c4     15 00 00 FF 
203c8     87 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
203cc     38 00 90 5D |  if_ne	jmp	#LR__2682
203d0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
203d0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
203d4     10 46 06 F6 | 	mov	local17, #16
203d8     00 16 06 F6 | 	mov	arg03, #0
203dc     28 16 62 FD | 	setq	arg03
203e0     0A 47 F2 FC | 	coginit	local17, arg02 wc
203e4     01 46 66 C6 |  if_b	neg	local17, #1
203e8                 | '     if r >= 0
203e8     00 46 56 F2 | 	cmps	local17, #0 wc
203ec                 | '       driver_cog := r+1
203ec     23 49 02 36 |  if_ae	mov	local18, local17
203f0     01 48 06 31 |  if_ae	add	local18, #1
203f4     15 00 00 3F 
203f8     87 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
203fc     FB 48 42 3C |  if_ae	wrbyte	local18, ptr__usbnew_spin2_dat__
20400     15 00 00 3F 
20404     87 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
20408                 | LR__2682
20408     37 00 00 FF 
2040c     24 E4 05 F1 | 	add	objptr, ##28196
20410     F2 46 62 FC | 	wrlong	local17, objptr
20414     10 E4 05 F1 | 	add	objptr, #16
20418     F2 14 02 FB | 	rdlong	arg02, objptr
2041c     00 12 06 F6 | 	mov	arg01, #0
20420                 | ' 
20420                 | ' '--------------------------- initialize pointers and variables
20420                 | ' 
20420                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
20420     37 00 00 FF 
20424     00 E4 85 F1 | 	sub	objptr, ##28160
20428     F2 FA 01 F6 | 	mov	result1, objptr
2042c     28 E4 85 F1 | 	sub	objptr, #40
20430     F2 FA 61 FC | 	wrlong	result1, objptr
20434                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
20434                 | ' hdmibase:=base							' HDMI base pin, 8*n
20434     18 E4 05 F1 | 	add	objptr, #24
20438     F2 00 68 FC | 	wrlong	#0, objptr
2043c                 | ' mailbox_ptr:=mb		
2043c     04 E4 05 F1 | 	add	objptr, #4
20440     F2 14 62 FC | 	wrlong	arg02, objptr
20444                 | ' mailbox0:=mb				' PSRAM mailbox pointer
20444     C1 E5 05 F1 | 	add	objptr, #449
20448     F2 14 62 FC | 	wrlong	arg02, objptr
2044c                 | ' sprite_ptr:=@spr1ptr
2044c     D8 E4 85 F1 | 	sub	objptr, #216
20450     F2 FA 01 F6 | 	mov	result1, objptr
20454     E5 E4 85 F1 | 	sub	objptr, #229
20458     F2 FA 61 FC | 	wrlong	result1, objptr
2045c                 | ' 
2045c                 | ' 		'
2045c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
2045c     E5 E4 05 F1 | 	add	objptr, #229
20460     F2 FA 01 FB | 	rdlong	result1, objptr
20464     D0 FA 05 F1 | 	add	result1, #208
20468     FD 10 58 FC | 	wrword	#8, result1
2046c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
2046c     F2 16 02 FB | 	rdlong	arg03, objptr
20470     D2 16 06 F1 | 	add	arg03, #210
20474     0B 21 58 FC | 	wrword	#16, arg03
20478                 | ' leading_spaces:=0				'
20478     A5 E5 05 F1 | 	add	objptr, #421
2047c     F2 00 68 FC | 	wrlong	#0, objptr
20480                 | ' 
20480                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
20480     99 E4 85 F1 | 	sub	objptr, #153
20484     00 00 A0 FF 
20488     F2 0E 68 FC | 	wrlong	##1073741831, objptr
2048c                 | ' emptydl[1]:=0
2048c     04 E4 05 F1 | 	add	objptr, #4
20490     F2 00 68 FC | 	wrlong	#0, objptr
20494                 | ' 
20494                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
20494                 | ' 
20494                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
20494     28 E5 85 F1 | 	sub	objptr, #296
20498     F2 02 68 FC | 	wrlong	#1, objptr
2049c                 | ' if s_debug<>0
2049c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2049c     20 00 80 FF 
204a0     F2 00 68 FC | 	wrlong	##16384, objptr
204a4                 | ' setmode()							' set the mode, see below
204a4                 | ' 
204a4                 | ' 
204a4                 | ' dl_ptr:=@emptydl[0]
204a4     24 E5 05 F1 | 	add	objptr, #292
204a8     F2 1A 02 F6 | 	mov	arg05, objptr
204ac     FD E5 85 F1 | 	sub	objptr, #509
204b0     F2 1A 62 FC | 	wrlong	arg05, objptr
204b4                 | ' 
204b4                 | ' if cog>0 
204b4     10 E4 05 F1 | 	add	objptr, #16
204b8     F2 1A 02 FB | 	rdlong	arg05, objptr
204bc     30 E4 85 F1 | 	sub	objptr, #48
204c0     01 1A 56 F2 | 	cmps	arg05, #1 wc
204c4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
204c4     01 12 06 36 |  if_ae	mov	arg01, #1
204c8     F4 35 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
204cc                 | ' xres:=1024
204cc     01 00 00 FF 
204d0     26 E4 05 F1 | 	add	objptr, ##550
204d4     02 00 80 FF 
204d8     F2 00 68 FC | 	wrlong	##1024, objptr
204dc                 | ' yres:=600
204dc     04 E4 05 F1 | 	add	objptr, #4
204e0     01 00 80 FF 
204e4     F2 B0 68 FC | 	wrlong	##600, objptr
204e8                 | ' ppl:=(timings[3])
204e8     1C 00 00 FF 
204ec     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
204f0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
204f4     51 E5 85 F1 | 	sub	objptr, #337
204f8     F2 1A 62 FC | 	wrlong	arg05, objptr
204fc                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
204fc     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
20500     F7 4A 02 FB | 	rdlong	local19, ptr__hg010b_spin2_dat__
20504     01 4A 66 F0 | 	shl	local19, #1
20508     80 E4 85 F1 | 	sub	objptr, #128
2050c     F2 4A 62 FC | 	wrlong	local19, objptr
20510                 | ' cpl1:=cpl '' todo remove
20510     04 E4 05 F1 | 	add	objptr, #4
20514     F2 4A 62 FC | 	wrlong	local19, objptr
20518                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
20518     04 00 00 FF 
2051c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
20520     41 E4 85 F1 | 	sub	objptr, #65
20524     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
20528                 | ' repeat i from 0 to 3
20528     00 4C 06 F6 | 	mov	local20, #0
2052c     04 00 00 FF 
20530     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
20534     08 E4 05 F1 | 	add	objptr, #8
20538     97 20 48 FB | 	callpa	#(@LR__2684-@LR__2683)>>2,fcache_load_ptr_
2053c                 | LR__2683
2053c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2053c     26 4B 02 F6 | 	mov	local19, local20
20540     02 4A 66 F0 | 	shl	local19, #2
20544     F7 4A 02 F1 | 	add	local19, ptr__hg010b_spin2_dat__
20548     F2 1A 02 FB | 	rdlong	arg05, objptr
2054c     11 1A 66 F0 | 	shl	arg05, #17
20550     25 4B 02 FB | 	rdlong	local19, local19
20554     0D 4B 02 F1 | 	add	local19, arg05
20558     80 40 38 FF 
2055c     00 4A 06 F1 | 	add	local19, ##1887502336
20560     26 1B 02 F6 | 	mov	arg05, local20
20564     02 1A 66 F0 | 	shl	arg05, #2
20568     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
2056c     0D 4B 62 FC | 	wrlong	local19, arg05
20570     01 4C 06 F1 | 	add	local20, #1
20574     04 4C 56 F2 | 	cmps	local20, #4 wc
20578     C0 FF 9F CD |  if_b	jmp	#LR__2683
2057c                 | LR__2684
2057c     24 E4 85 F1 | 	sub	objptr, #36
20580     1C 00 00 FF 
20584     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
20588                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
20588                 | ' 'hubset(timings[10])
20588                 | ' waitms(1)                                                   	' wait for stabilization
20588     01 12 06 F6 | 	mov	arg01, #1
2058c     B4 4D B0 FD | 	call	#__system___waitms
20590     1C 00 00 FF 
20594     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
20598     F7 4C 02 FB | 	rdlong	local20, ptr__hg010b_spin2_dat__
2059c     61 E4 05 F1 | 	add	objptr, #97
205a0     F2 4C 62 FC | 	wrlong	local20, objptr
205a4     26 4B 52 F6 | 	abs	local19, local20 wc
205a8     04 4A 46 F0 | 	shr	local19, #4
205ac     25 4B 82 F6 | 	negc	local19, local19
205b0     9C E4 05 F1 | 	add	objptr, #156
205b4     F2 4A 62 FC | 	wrlong	local19, objptr
205b8     A4 E4 85 F1 | 	sub	objptr, #164
205bc     F2 4C 02 FB | 	rdlong	local20, objptr
205c0     08 E4 05 F1 | 	add	objptr, #8
205c4     F2 4A 02 FB | 	rdlong	local19, objptr
205c8     25 4D 02 FD | 	qmul	local20, local19
205cc                 | ' lines:=timings[11]
205cc                 | ' t_lines:=lines/16
205cc                 | ' buflen:=cpl*lines						' framebuffer length in longs
205cc     29 E4 85 F1 | 	sub	objptr, #41
205d0     19 4A C6 F9 | 	decod	local19, #25
205d4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
205d8     18 4C 62 FD | 	getqx	local20
205dc     F2 4C 62 FC | 	wrlong	local20, objptr
205e0     38 E4 85 F1 | 	sub	objptr, #56
205e4     02 4C 66 F0 | 	shl	local20, #2
205e8     26 4B 82 F1 | 	sub	local19, local20
205ec     F2 4A 62 FC | 	wrlong	local19, objptr
205f0     FD E4 05 F1 | 	add	objptr, #253
205f4     F2 4C 02 FB | 	rdlong	local20, objptr
205f8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
205fc     0D 4D 02 FD | 	qmul	local20, arg05
20600                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
20600                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
20600     F9 E4 85 F1 | 	sub	objptr, #249
20604                 | ' mode_ptr:=@timings						' set pointers to timings
20604     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
20608                 | ' graphmode:=1024+512+192+48							' det global variable
20608                 | ' makedl(graphmode)							' make a DL for the mode
20608                 | ' 
20608                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
20608                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
20608                 | ' repeat i from 0 to 11                                                           ' clear DL
20608     00 4E 06 F6 | 	mov	local21, #0
2060c     18 4C 62 FD | 	getqx	local20
20610     26 4B 82 F1 | 	sub	local19, local20
20614     F2 4A 62 FC | 	wrlong	local19, objptr
20618     14 E4 05 F1 | 	add	objptr, #20
2061c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
20620     79 E4 05 F1 | 	add	objptr, #121
20624     03 00 80 FF 
20628     F2 E0 69 FC | 	wrlong	##1776, objptr
2062c     1C 00 00 FF 
20630     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
20634     5C E5 05 F1 | 	add	objptr, #348
20638     97 0E 48 FB | 	callpa	#(@LR__2686-@LR__2685)>>2,fcache_load_ptr_
2063c                 | LR__2685
2063c                 | '   displaylist[i]:=0 
2063c     27 4D 02 F6 | 	mov	local20, local21
20640     02 4C 66 F0 | 	shl	local20, #2
20644     F2 4C 02 F1 | 	add	local20, objptr
20648     26 01 68 FC | 	wrlong	#0, local20
2064c     01 4E 06 F1 | 	add	local21, #1
20650     0C 4E 56 F2 | 	cmps	local21, #12 wc
20654     E4 FF 9F CD |  if_b	jmp	#LR__2685
20658                 | LR__2686
20658                 | '                         ' 
20658                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
20658     8C E5 85 F1 | 	sub	objptr, #396
2065c     F2 4C 02 FB | 	rdlong	local20, objptr
20660     14 4C 66 F0 | 	shl	local20, #20
20664     01 4C 06 F1 | 	add	local20, #1
20668     04 E4 85 F1 | 	sub	objptr, #4
2066c     F2 4E 02 FB | 	rdlong	local21, objptr
20670     06 4E 66 F0 | 	shl	local21, #6
20674     27 4D 02 F1 | 	add	local20, local21
20678     90 E5 05 F1 | 	add	objptr, #400
2067c     F2 4C 62 FC | 	wrlong	local20, objptr
20680     ED E5 85 F1 | 	sub	objptr, #493
20684                 | ' displaylist[1]:=buf_ptr<<4+%10  
20684     F2 4E 02 FB | 	rdlong	local21, objptr
20688     04 4E 66 F0 | 	shl	local21, #4
2068c     02 4E 06 F1 | 	add	local21, #2
20690     F1 E5 05 F1 | 	add	objptr, #497
20694     F2 4E 62 FC | 	wrlong	local21, objptr
20698                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
20698     04 E4 85 F1 | 	sub	objptr, #4
2069c     F2 4E 02 F6 | 	mov	local21, objptr
206a0     CD E5 85 F1 | 	sub	objptr, #461
206a4     F2 4E 62 FC | 	wrlong	local21, objptr
206a8     20 E4 85 F1 | 	sub	objptr, #32
206ac                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
206ac     F2 4A 02 FB | 	rdlong	local19, objptr
206b0     DD E4 05 F1 | 	add	objptr, #221
206b4     F2 4A 62 FC | 	wrlong	local19, objptr
206b8                 | ' s_font_ptr:=font_ptr
206b8     D5 E4 85 F1 | 	sub	objptr, #213
206bc     F2 4A 02 FB | 	rdlong	local19, objptr
206c0     D9 E4 05 F1 | 	add	objptr, #217
206c4     F2 4A 62 FC | 	wrlong	local19, objptr
206c8                 | ' s_lines:=lines
206c8     80 E4 85 F1 | 	sub	objptr, #128
206cc     F2 4A 02 FB | 	rdlong	local19, objptr
206d0     84 E4 05 F1 | 	add	objptr, #132
206d4     F2 4A 62 FC | 	wrlong	local19, objptr
206d8                 | ' s_buflen:=buflen
206d8     AD E4 85 F1 | 	sub	objptr, #173
206dc     F2 4A 02 FB | 	rdlong	local19, objptr
206e0     B5 E4 05 F1 | 	add	objptr, #181
206e4     F2 4A 62 FC | 	wrlong	local19, objptr
206e8                 | ' s_cpl:=cpl
206e8     94 E4 85 F1 | 	sub	objptr, #148
206ec     F2 4A 02 FB | 	rdlong	local19, objptr
206f0     90 E4 05 F1 | 	add	objptr, #144
206f4     F2 4A 62 FC | 	wrlong	local19, objptr
206f8                 | ' s_cpl1:=cpl
206f8     90 E4 85 F1 | 	sub	objptr, #144
206fc     F2 4A 02 FB | 	rdlong	local19, objptr
20700     98 E4 05 F1 | 	add	objptr, #152
20704     F2 4A 62 FC | 	wrlong	local19, objptr
20708                 | ' st_lines:=t_lines
20708     0C E4 05 F1 | 	add	objptr, #12
2070c     F2 4A 02 FB | 	rdlong	local19, objptr
20710     04 E4 05 F1 | 	add	objptr, #4
20714     F2 4A 62 FC | 	wrlong	local19, objptr
20718                 | ' ppl:=ppl/xzoom  
20718     28 E4 85 F1 | 	sub	objptr, #40
2071c     F2 8E 02 FB | 	rdlong	muldiva_, objptr
20720     2C E4 05 F1 | 	add	objptr, #44
20724     F2 90 02 FB | 	rdlong	muldivb_, objptr
20728     05 E5 85 F1 | 	sub	objptr, #261
2072c     BA 00 A0 FD | 	call	#divide_
20730     D9 E4 05 F1 | 	add	objptr, #217
20734     F2 90 62 FC | 	wrlong	muldivb_, objptr
20738                 | ' s_ppl:=ppl
20738     1C E4 05 F1 | 	add	objptr, #28
2073c     F2 90 62 FC | 	wrlong	muldivb_, objptr
20740     F5 E4 85 F1 | 	sub	objptr, #245
20744                 | ' waitms(20)							' wait 
20744     14 12 06 F6 | 	mov	arg01, #20
20748     F8 4B B0 FD | 	call	#__system___waitms
2074c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
2074c     04 E4 05 F1 | 	add	objptr, #4
20750     F2 12 02 FB | 	rdlong	arg01, objptr
20754     04 E4 85 F1 | 	sub	objptr, #4
20758     F2 16 02 FB | 	rdlong	arg03, objptr
2075c     09 17 82 F1 | 	sub	arg03, arg01
20760     20 14 06 F6 | 	mov	arg02, #32
20764     00 18 06 F6 | 	mov	arg04, #0
20768     01 1A 06 F6 | 	mov	arg05, #1
2076c     0B 00 00 FF 
20770     CC E4 05 F1 | 	add	objptr, ##5836
20774     64 42 B0 FD | 	call	#_psram_spin2_fill
20778                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
20778     0B 00 00 FF 
2077c     83 E4 85 F1 | 	sub	objptr, ##5763
20780     F2 FA 01 F6 | 	mov	result1, objptr
20784     35 E4 85 F1 | 	sub	objptr, #53
20788     F2 FA 61 FC | 	wrlong	result1, objptr
2078c                 | ' cursor_ptr:=@cursor_x						
2078c     28 E4 05 F1 | 	add	objptr, #40
20790     F2 16 02 F6 | 	mov	arg03, objptr
20794     2C E4 85 F1 | 	sub	objptr, #44
20798     F2 16 62 FC | 	wrlong	arg03, objptr
2079c                 | ' fontnum:=0  							' start with a PC type font 
2079c     55 E4 05 F1 | 	add	objptr, #85
207a0     F2 00 68 FC | 	wrlong	#0, objptr
207a4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
207a4     1C E4 05 F1 | 	add	objptr, #28
207a8     F2 12 02 F6 | 	mov	arg01, objptr
207ac     81 E4 85 F1 | 	sub	objptr, #129
207b0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
207b4     1C 00 00 FF 
207b8     80 14 06 F1 | 	add	arg02, ##14464
207bc     10 16 06 F6 | 	mov	arg03, #16
207c0     04 48 B0 FD | 	call	#__system____builtin_memmove
207c4                 | ' leading_spaces:=0
207c4     01 00 00 FF 
207c8     B6 E4 05 F1 | 	add	objptr, ##694
207cc     F2 00 68 FC | 	wrlong	#0, objptr
207d0                 | ' '---------------------------- initialize a cursor (MSDOS type)
207d0                 | ' 
207d0                 | ' initcursor(154)
207d0                 | ' 
207d0                 | ' cursor_x:=0							' place the cursor at 0:0
207d0     01 00 00 FF 
207d4     7A E4 85 F1 | 	sub	objptr, ##634
207d8     F2 00 58 FC | 	wrword	#0, objptr
207dc                 | ' cursor_y:=0
207dc     02 E4 05 F1 | 	add	objptr, #2
207e0     F2 00 48 FC | 	wrbyte	#0, objptr
207e4                 | ' repeat i from 0 to 111
207e4     00 4C 06 F6 | 	mov	local20, #0
207e8     F8 E5 05 F1 | 	add	objptr, #504
207ec     97 0C 48 FB | 	callpa	#(@LR__2688-@LR__2687)>>2,fcache_load_ptr_
207f0                 | LR__2687
207f0                 | '   cursor[i]:=0
207f0     26 51 02 F6 | 	mov	local22, local20
207f4     F2 50 02 F1 | 	add	local22, objptr
207f8     28 01 48 FC | 	wrbyte	#0, local22
207fc     01 4C 06 F1 | 	add	local20, #1
20800     70 4C 56 F2 | 	cmps	local20, #112 wc
20804     E8 FF 9F CD |  if_b	jmp	#LR__2687
20808                 | LR__2688
20808                 | ' repeat i from 112 to 127
20808     70 4C 06 F6 | 	mov	local20, #112
2080c     97 0C 48 FB | 	callpa	#(@LR__2690-@LR__2689)>>2,fcache_load_ptr_
20810                 | LR__2689
20810                 | '   cursor[i]:=color  
20810     26 51 02 F6 | 	mov	local22, local20
20814     F2 50 02 F1 | 	add	local22, objptr
20818     28 35 49 FC | 	wrbyte	#154, local22
2081c     01 4C 06 F1 | 	add	local20, #1
20820     80 4C 16 F2 | 	cmp	local20, #128 wc
20824     E8 FF 9F CD |  if_b	jmp	#LR__2689
20828                 | LR__2690
20828     01 00 00 FF 
2082c     36 E4 85 F1 | 	sub	objptr, ##566
20830                 | ' 'repeat i from 0 to 127
20830                 | ' '  if ((i/8)//2)
20830                 | ' '    cursor[i]:=15
20830                 | ' '  else
20830                 | ' '    cursor[i]:=0
20830                 | ' '  if i>=120    
20830                 | ' '    cursor[i]:=40
20830                 | ' setspriteptr(17,@cursor)
20830     F2 14 02 F6 | 	mov	arg02, objptr
20834     01 00 00 FF 
20838     36 14 06 F1 | 	add	arg02, ##566
2083c     11 12 06 F6 | 	mov	arg01, #17
20840     84 29 B0 FD | 	call	#_hg010b_spin2_setspriteptr
20844                 | ' setspritesize(17,8,16)
20844     11 12 06 F6 | 	mov	arg01, #17
20848     08 14 06 F6 | 	mov	arg02, #8
2084c     10 16 06 F6 | 	mov	arg03, #16
20850     00 2A B0 FD | 	call	#_hg010b_spin2_setspritesize
20854                 | ' setspritepos(17,0,0)
20854     11 12 06 F6 | 	mov	arg01, #17
20858     00 14 06 F6 | 	mov	arg02, #0
2085c     00 16 06 F6 | 	mov	arg03, #0
20860     88 29 B0 FD | 	call	#_hg010b_spin2_setspritepos
20864                 | ' cursorshape:=14
20864     0B 00 00 FF 
20868     C6 E4 05 F1 | 	add	objptr, ##5830
2086c     F2 1C 68 FC | 	wrlong	#14, objptr
20870                 | ' cursorcolor:=color
20870     04 E4 85 F1 | 	sub	objptr, #4
20874     F2 34 69 FC | 	wrlong	#154, objptr
20878     0B 00 00 FF 
2087c     C2 E4 85 F1 | 	sub	objptr, ##5826
20880                 | ' 
20880                 | ' '---------------------------- start the cog
20880                 | ' 
20880                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
20880     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
20884     1C 00 00 FF 
20888     90 14 06 F1 | 	add	arg02, ##14480
2088c     F2 16 02 F6 | 	mov	arg03, objptr
20890     14 16 06 F1 | 	add	arg03, #20
20894     10 FA 05 F6 | 	mov	result1, #16
20898     28 16 62 FD | 	setq	arg03
2089c     0A FB F1 FC | 	coginit	result1, arg02 wc
208a0     01 FA 65 C6 |  if_b	neg	result1, #1
208a4     30 E4 05 F1 | 	add	objptr, #48
208a8     F2 FA 61 FC | 	wrlong	result1, objptr
208ac     30 E4 85 F1 | 	sub	objptr, #48
208b0                 | ' waitms(40)							' wait for stabilize
208b0     28 12 06 F6 | 	mov	arg01, #40
208b4     8C 4A B0 FD | 	call	#__system___waitms
208b8                 | ' return cog							' return the driver's cog #
208b8     30 E4 05 F1 | 	add	objptr, #48
208bc     F2 FA 01 FB | 	rdlong	result1, objptr
208c0     36 00 00 FF 
208c4     F0 E5 05 F1 | 	add	objptr, ##28144
208c8     F2 FA 61 FC | 	wrlong	result1, objptr
208cc                 | ' 
208cc                 | ' videocog=v.start(pin,mbox)
208cc                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
208cc     00 50 06 F6 | 	mov	local22, #0
208d0     2B 00 00 FF 
208d4     54 E5 85 F1 | 	sub	objptr, ##22356
208d8                 | LR__2691
208d8     28 13 02 F6 | 	mov	arg01, local22
208dc     00 28 00 FF 
208e0     00 14 06 F6 | 	mov	arg02, ##5242880
208e4     E8 41 B0 FD | 	call	#_psram_spin2_setQos
208e8     01 50 06 F1 | 	add	local22, #1
208ec     08 50 56 F2 | 	cmps	local22, #8 wc
208f0     E4 FF 9F CD |  if_b	jmp	#LR__2691
208f4     2B 00 00 FF 
208f8     54 E5 05 F1 | 	add	objptr, ##22356
208fc     F2 12 02 FB | 	rdlong	arg01, objptr
20900     7A 00 02 FF 
20904     00 14 06 F6 | 	mov	arg02, ##67171328
20908     2B 00 00 FF 
2090c     54 E5 85 F1 | 	sub	objptr, ##22356
20910     BC 41 B0 FD | 	call	#_psram_spin2_setQos
20914     0B 00 00 FF 
20918     CC E4 85 F1 | 	sub	objptr, ##5836
2091c                 | ' psram.setQoS(videocog, $0400f400) 
2091c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
2091c     F2 50 02 F6 | 	mov	local22, objptr
20920     00 68 05 FF 
20924     00 50 46 F5 | 	or	local22, ##181403648
20928     00 18 06 F6 | 	mov	arg04, #0
2092c     00 12 06 F6 | 	mov	arg01, #0
20930     10 8B B0 FD | 	call	#__system____getftab
20934     FD 4C 0A F6 | 	mov	local20, result1 wz
20938     14 00 90 5D |  if_ne	jmp	#LR__2692
2093c     EE 12 02 F6 | 	mov	arg01, abortchain
20940     0C 14 06 F6 | 	mov	arg02, #12
20944     01 16 06 F6 | 	mov	arg03, #1
20948     DA 00 A0 FD | 	call	#__longjmp
2094c     5C 00 90 FD | 	jmp	#LR__2693
20950                 | LR__2692
20950     08 4C 06 F1 | 	add	local20, #8
20954     26 FB 09 FB | 	rdlong	result1, local20 wz
20958     08 4C 86 F1 | 	sub	local20, #8
2095c     26 13 02 56 |  if_ne	mov	arg01, local20
20960     CC 82 B0 5D |  if_ne	call	#__system___closeraw
20964     00 50 0E F2 | 	cmp	local22, #0 wz
20968     00 50 0E F2 | 	cmp	local22, #0 wz
2096c     00 50 66 5C |  if_ne	wrlong	local22, #0
20970     00 FA 05 56 |  if_ne	mov	result1, #0
20974     00 70 05 5F 
20978     00 FA 45 55 |  if_ne	or	result1, ##182452224
2097c     1C 4C 06 51 |  if_ne	add	local20, #28
20980     26 FB 61 5C |  if_ne	wrlong	result1, local20
20984     1C 4C E6 F3 | 	sumnz	local20, #28
20988     26 01 68 AC |  if_e	wrlong	#0, local20
2098c     1C 4C 86 A1 |  if_e	sub	local20, #28
20990     20 4C 06 F1 | 	add	local20, #32
20994     26 01 68 FC | 	wrlong	#0, local20
20998     04 4C 06 F1 | 	add	local20, #4
2099c     26 01 68 FC | 	wrlong	#0, local20
209a0     1C 4C 86 F1 | 	sub	local20, #28
209a4     40 00 80 FF 
209a8     26 07 68 FC | 	wrlong	##32771, local20
209ac                 | LR__2693
209ac                 | ' return videocog
209ac                 | '   mouse_limits[0] := xlim
209ac     0F 00 00 FF 
209b0     C8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
209b4     01 00 80 FF 
209b8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
209bc                 | '   mouse_limits[1] := ylim
209bc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
209c0     01 00 80 FF 
209c4     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
209c8     F2 12 02 F6 | 	mov	arg01, objptr
209cc     D5 13 06 F1 | 	add	arg01, #469
209d0                 | '   mouse_outptr := ptr
209d0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
209d4     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
209d8     0F 00 00 FF 
209dc     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
209e0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
209e4     16 00 00 FF 
209e8     CA 14 06 F1 | 	add	arg02, ##11466
209ec     10 12 06 F6 | 	mov	arg01, #16
209f0     D4 27 B0 FD | 	call	#_hg010b_spin2_setspriteptr
209f4     10 12 06 F6 | 	mov	arg01, #16
209f8     20 14 06 F6 | 	mov	arg02, #32
209fc     20 16 06 F6 | 	mov	arg03, #32
20a00     50 28 B0 FD | 	call	#_hg010b_spin2_setspritesize
20a04     09 52 C6 F9 | 	decod	local23, #9
20a08     2C 55 06 F6 | 	mov	local24, #300
20a0c                 | '   mouse_lock := 1
20a0c     14 00 00 FF 
20a10     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
20a14     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20a18     14 00 00 FF 
20a1c     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
20a20                 | '   waitus(2) ' hope driver is now done
20a20     02 12 06 F6 | 	mov	arg01, #2
20a24     84 49 B0 FD | 	call	#__system___waitus
20a28                 | '   mouse_xacc := x
20a28     14 00 00 FF 
20a2c     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
20a30     FB 52 62 FC | 	wrlong	local23, ptr__usbnew_spin2_dat__
20a34                 | '   mouse_yacc := y
20a34     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20a38     FB 54 62 FC | 	wrlong	local24, ptr__usbnew_spin2_dat__
20a3c                 | '   if mouse_outptr
20a3c     05 00 00 FF 
20a40     15 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
20a44     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
20a48     0F 00 00 FF 
20a4c     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
20a50                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
20a50     10 54 66 50 |  if_ne	shl	local24, #16
20a54     29 53 32 59 |  if_ne	getword	local23, local23, #0
20a58     29 55 42 55 |  if_ne	or	local24, local23
20a5c     0F 00 00 5F 
20a60     D0 F6 05 51 |  if_ne	add	ptr__usbnew_spin2_dat__, ##7888
20a64     FB 52 02 5B |  if_ne	rdlong	local23, ptr__usbnew_spin2_dat__
20a68     0F 00 00 5F 
20a6c     D0 F6 85 51 |  if_ne	sub	ptr__usbnew_spin2_dat__, ##7888
20a70     29 55 62 5C |  if_ne	wrlong	local24, local23
20a74                 | '   mouse_lock := 0
20a74     14 00 00 FF 
20a78     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
20a7c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20a80     14 00 00 FF 
20a84     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
20a88     F2 16 02 F6 | 	mov	arg03, objptr
20a8c     50 00 00 FF 
20a90     64 E5 05 F1 | 	add	objptr, ##41316
20a94     F2 14 02 F6 | 	mov	arg02, objptr
20a98     0A 17 62 FC | 	wrlong	arg03, arg02
20a9c     04 14 06 F1 | 	add	arg02, #4
20aa0     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
20aa4     EF 14 02 F6 | 	mov	arg02, entryptr__
20aa8     1E FA 05 F6 | 	mov	result1, #30
20aac     28 E4 61 FD | 	setq	objptr
20ab0     0A FB F1 FC | 	coginit	result1, arg02 wc
20ab4     01 FA 65 C6 |  if_b	neg	result1, #1
20ab8     04 E4 85 F1 | 	sub	objptr, #4
20abc     F2 FA 61 FC | 	wrlong	result1, objptr
20ac0     01 00 00 FF 
20ac4     8C E5 05 F1 | 	add	objptr, ##908
20ac8     F2 00 68 FC | 	wrlong	#0, objptr
20acc     1B 00 00 FF 
20ad0     98 E4 85 F1 | 	sub	objptr, ##13976
20ad4     F2 04 68 FC | 	wrlong	#2, objptr
20ad8     04 E4 05 F1 | 	add	objptr, #4
20adc     F2 26 69 FC | 	wrlong	#147, objptr
20ae0     04 E4 05 F1 | 	add	objptr, #4
20ae4     F2 34 69 FC | 	wrlong	#154, objptr
20ae8     04 E4 05 F1 | 	add	objptr, #4
20aec     F2 08 68 FC | 	wrlong	#4, objptr
20af0     04 E4 85 F1 | 	sub	objptr, #4
20af4     F2 FA 01 FB | 	rdlong	result1, objptr
20af8     14 E4 85 F1 | 	sub	objptr, #20
20afc     F2 FA 61 FC | 	wrlong	result1, objptr
20b00     04 E4 05 F1 | 	add	objptr, #4
20b04     F2 00 68 FC | 	wrlong	#0, objptr
20b08     04 E4 05 F1 | 	add	objptr, #4
20b0c     F2 00 68 FC | 	wrlong	#0, objptr
20b10     19 00 00 FF 
20b14     0C E5 05 F1 | 	add	objptr, ##13068
20b18     F2 02 68 FC | 	wrlong	#1, objptr
20b1c     01 00 00 FF 
20b20     98 E5 05 F1 | 	add	objptr, ##920
20b24     F2 00 68 FC | 	wrlong	#0, objptr
20b28     F5 16 02 F6 | 	mov	arg03, ptr__dat__
20b2c     01 00 00 FF 
20b30     00 16 06 F1 | 	add	arg03, ##512
20b34     08 E4 05 F1 | 	add	objptr, #8
20b38     F2 16 62 FC | 	wrlong	arg03, objptr
20b3c     04 E4 85 F1 | 	sub	objptr, #4
20b40     03 00 80 FF 
20b44     F2 3C 69 FC | 	wrlong	##1694, objptr
20b48     0D 00 00 FF 
20b4c     74 E4 85 F1 | 	sub	objptr, ##6772
20b50     F2 18 68 FC | 	wrlong	#12, objptr
20b54     45 00 00 FF 
20b58     84 E4 85 F1 | 	sub	objptr, ##35460
20b5c                 | ' 
20b5c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20b5c     00 56 06 F6 | 	mov	local25, #0
20b60     97 14 48 FB | 	callpa	#(@LR__2695-@LR__2694)>>2,fcache_load_ptr_
20b64                 | LR__2694
20b64     2B FB 01 F6 | 	mov	result1, local25
20b68     02 FA 65 F0 | 	shl	result1, #2
20b6c     F2 14 02 F6 | 	mov	arg02, objptr
20b70     43 00 00 FF 
20b74     80 14 06 F1 | 	add	arg02, ##34432
20b78     0A FB 01 F1 | 	add	result1, arg02
20b7c     FD E4 61 FC | 	wrlong	objptr, result1
20b80     01 56 06 F1 | 	add	local25, #1
20b84     00 57 56 F2 | 	cmps	local25, #256 wc
20b88     D8 FF 9F CD |  if_b	jmp	#LR__2694
20b8c                 | LR__2695
20b8c     F2 FA 01 F6 | 	mov	result1, objptr
20b90     14 FA 25 F4 | 	bith	result1, #20
20b94     43 00 00 FF 
20b98     84 E4 05 F1 | 	add	objptr, ##34436
20b9c     F2 FA 61 FC | 	wrlong	result1, objptr
20ba0     43 00 00 FF 
20ba4     84 E4 85 F1 | 	sub	objptr, ##34436
20ba8     F2 FA 01 F6 | 	mov	result1, objptr
20bac     15 FA 25 F4 | 	bith	result1, #21
20bb0     43 00 00 FF 
20bb4     88 E4 05 F1 | 	add	objptr, ##34440
20bb8     F2 FA 61 FC | 	wrlong	result1, objptr
20bbc     43 00 00 FF 
20bc0     88 E4 85 F1 | 	sub	objptr, ##34440
20bc4     F2 FA 01 F6 | 	mov	result1, objptr
20bc8     34 FA 25 F4 | 	bith	result1, #52
20bcc     43 00 00 FF 
20bd0     8C E4 05 F1 | 	add	objptr, ##34444
20bd4     F2 FA 61 FC | 	wrlong	result1, objptr
20bd8     43 00 00 FF 
20bdc     8C E4 85 F1 | 	sub	objptr, ##34444
20be0     F2 FA 01 F6 | 	mov	result1, objptr
20be4     16 FA 25 F4 | 	bith	result1, #22
20be8     43 00 00 FF 
20bec     94 E4 05 F1 | 	add	objptr, ##34452
20bf0     F2 FA 61 FC | 	wrlong	result1, objptr
20bf4     43 00 00 FF 
20bf8     94 E4 85 F1 | 	sub	objptr, ##34452
20bfc     F2 FA 01 F6 | 	mov	result1, objptr
20c00     00 28 00 FF 
20c04     00 FA 45 F5 | 	or	result1, ##5242880
20c08     43 00 00 FF 
20c0c     98 E4 05 F1 | 	add	objptr, ##34456
20c10     F2 FA 61 FC | 	wrlong	result1, objptr
20c14     43 00 00 FF 
20c18     98 E4 85 F1 | 	sub	objptr, ##34456
20c1c     F2 FA 01 F6 | 	mov	result1, objptr
20c20     35 FA 25 F4 | 	bith	result1, #53
20c24     43 00 00 FF 
20c28     9C E4 05 F1 | 	add	objptr, ##34460
20c2c     F2 FA 61 FC | 	wrlong	result1, objptr
20c30     43 00 00 FF 
20c34     9C E4 85 F1 | 	sub	objptr, ##34460
20c38     F2 FA 01 F6 | 	mov	result1, objptr
20c3c     54 FA 25 F4 | 	bith	result1, #84
20c40     43 00 00 FF 
20c44     A0 E4 05 F1 | 	add	objptr, ##34464
20c48     F2 FA 61 FC | 	wrlong	result1, objptr
20c4c     43 00 00 FF 
20c50     A0 E4 85 F1 | 	sub	objptr, ##34464
20c54     F2 FA 01 F6 | 	mov	result1, objptr
20c58     17 FA 25 F4 | 	bith	result1, #23
20c5c     43 00 00 FF 
20c60     A4 E4 05 F1 | 	add	objptr, ##34468
20c64     F2 FA 61 FC | 	wrlong	result1, objptr
20c68     43 00 00 FF 
20c6c     A4 E4 85 F1 | 	sub	objptr, ##34468
20c70     F2 FA 01 F6 | 	mov	result1, objptr
20c74     00 48 00 FF 
20c78     00 FA 45 F5 | 	or	result1, ##9437184
20c7c     43 00 00 FF 
20c80     A8 E4 05 F1 | 	add	objptr, ##34472
20c84     F2 FA 61 FC | 	wrlong	result1, objptr
20c88     43 00 00 FF 
20c8c     A8 E4 85 F1 | 	sub	objptr, ##34472
20c90     F2 FA 01 F6 | 	mov	result1, objptr
20c94     00 50 00 FF 
20c98     00 FA 45 F5 | 	or	result1, ##10485760
20c9c     43 00 00 FF 
20ca0     AC E4 05 F1 | 	add	objptr, ##34476
20ca4     F2 FA 61 FC | 	wrlong	result1, objptr
20ca8     43 00 00 FF 
20cac     AC E4 85 F1 | 	sub	objptr, ##34476
20cb0     F2 FA 01 F6 | 	mov	result1, objptr
20cb4     00 58 00 FF 
20cb8     00 FA 45 F5 | 	or	result1, ##11534336
20cbc     43 00 00 FF 
20cc0     B0 E4 05 F1 | 	add	objptr, ##34480
20cc4     F2 FA 61 FC | 	wrlong	result1, objptr
20cc8     43 00 00 FF 
20ccc     B0 E4 85 F1 | 	sub	objptr, ##34480
20cd0     F2 FA 01 F6 | 	mov	result1, objptr
20cd4     36 FA 25 F4 | 	bith	result1, #54
20cd8     43 00 00 FF 
20cdc     C4 E4 05 F1 | 	add	objptr, ##34500
20ce0     F2 FA 61 FC | 	wrlong	result1, objptr
20ce4     43 00 00 FF 
20ce8     C4 E4 85 F1 | 	sub	objptr, ##34500
20cec     F2 FA 01 F6 | 	mov	result1, objptr
20cf0     00 68 00 FF 
20cf4     00 FA 45 F5 | 	or	result1, ##13631488
20cf8     43 00 00 FF 
20cfc     F4 E4 05 F1 | 	add	objptr, ##34548
20d00     F2 FA 61 FC | 	wrlong	result1, objptr
20d04     43 00 00 FF 
20d08     F4 E4 85 F1 | 	sub	objptr, ##34548
20d0c     F2 FA 01 F6 | 	mov	result1, objptr
20d10     00 68 00 FF 
20d14     00 FA 45 F5 | 	or	result1, ##13631488
20d18     43 00 00 FF 
20d1c     F0 E4 05 F1 | 	add	objptr, ##34544
20d20     F2 FA 61 FC | 	wrlong	result1, objptr
20d24     43 00 00 FF 
20d28     F0 E4 85 F1 | 	sub	objptr, ##34544
20d2c     F2 FA 01 F6 | 	mov	result1, objptr
20d30     00 68 00 FF 
20d34     00 FA 45 F5 | 	or	result1, ##13631488
20d38     43 00 00 FF 
20d3c     F8 E4 05 F1 | 	add	objptr, ##34552
20d40     F2 FA 61 FC | 	wrlong	result1, objptr
20d44     43 00 00 FF 
20d48     F8 E4 85 F1 | 	sub	objptr, ##34552
20d4c     F2 FA 01 F6 | 	mov	result1, objptr
20d50     00 68 00 FF 
20d54     00 FA 45 F5 | 	or	result1, ##13631488
20d58     43 00 00 FF 
20d5c     FC E4 05 F1 | 	add	objptr, ##34556
20d60     F2 FA 61 FC | 	wrlong	result1, objptr
20d64     43 00 00 FF 
20d68     FC E4 85 F1 | 	sub	objptr, ##34556
20d6c     F2 FA 01 F6 | 	mov	result1, objptr
20d70     00 68 00 FF 
20d74     00 FA 45 F5 | 	or	result1, ##13631488
20d78     43 00 00 FF 
20d7c     2C E5 05 F1 | 	add	objptr, ##34604
20d80     F2 FA 61 FC | 	wrlong	result1, objptr
20d84     43 00 00 FF 
20d88     2C E5 85 F1 | 	sub	objptr, ##34604
20d8c     F2 FA 01 F6 | 	mov	result1, objptr
20d90     55 FA 25 F4 | 	bith	result1, #85
20d94     43 00 00 FF 
20d98     DC E4 05 F1 | 	add	objptr, ##34524
20d9c     F2 FA 61 FC | 	wrlong	result1, objptr
20da0     43 00 00 FF 
20da4     DC E4 85 F1 | 	sub	objptr, ##34524
20da8     F2 FA 01 F6 | 	mov	result1, objptr
20dac     00 68 00 FF 
20db0     00 FA 45 F5 | 	or	result1, ##13631488
20db4     43 00 00 FF 
20db8     30 E5 05 F1 | 	add	objptr, ##34608
20dbc     F2 FA 61 FC | 	wrlong	result1, objptr
20dc0     43 00 00 FF 
20dc4     30 E5 85 F1 | 	sub	objptr, ##34608
20dc8     F2 FA 01 F6 | 	mov	result1, objptr
20dcc     00 68 00 FF 
20dd0     00 FA 45 F5 | 	or	result1, ##13631488
20dd4     43 00 00 FF 
20dd8     00 E5 05 F1 | 	add	objptr, ##34560
20ddc     F2 FA 61 FC | 	wrlong	result1, objptr
20de0     43 00 00 FF 
20de4     00 E5 85 F1 | 	sub	objptr, ##34560
20de8     F2 FA 01 F6 | 	mov	result1, objptr
20dec     00 68 00 FF 
20df0     00 FA 45 F5 | 	or	result1, ##13631488
20df4     43 00 00 FF 
20df8     04 E5 05 F1 | 	add	objptr, ##34564
20dfc     F2 FA 61 FC | 	wrlong	result1, objptr
20e00     43 00 00 FF 
20e04     04 E5 85 F1 | 	sub	objptr, ##34564
20e08     F2 FA 01 F6 | 	mov	result1, objptr
20e0c     00 68 00 FF 
20e10     00 FA 45 F5 | 	or	result1, ##13631488
20e14     43 00 00 FF 
20e18     08 E5 05 F1 | 	add	objptr, ##34568
20e1c     F2 FA 61 FC | 	wrlong	result1, objptr
20e20     43 00 00 FF 
20e24     08 E5 85 F1 | 	sub	objptr, ##34568
20e28     F2 FA 01 F6 | 	mov	result1, objptr
20e2c     74 FA 25 F4 | 	bith	result1, #116
20e30     43 00 00 FF 
20e34     80 E5 05 F1 | 	add	objptr, ##34688
20e38     F2 FA 61 FC | 	wrlong	result1, objptr
20e3c     43 00 00 FF 
20e40     80 E5 85 F1 | 	sub	objptr, ##34688
20e44     F2 FA 01 F6 | 	mov	result1, objptr
20e48     18 FA 25 F4 | 	bith	result1, #24
20e4c     43 00 00 FF 
20e50     84 E5 05 F1 | 	add	objptr, ##34692
20e54     F2 FA 61 FC | 	wrlong	result1, objptr
20e58     43 00 00 FF 
20e5c     84 E5 85 F1 | 	sub	objptr, ##34692
20e60     F2 FA 01 F6 | 	mov	result1, objptr
20e64     00 88 00 FF 
20e68     00 FA 45 F5 | 	or	result1, ##17825792
20e6c     43 00 00 FF 
20e70     88 E5 05 F1 | 	add	objptr, ##34696
20e74     F2 FA 61 FC | 	wrlong	result1, objptr
20e78     43 00 00 FF 
20e7c     88 E5 85 F1 | 	sub	objptr, ##34696
20e80     F2 FA 01 F6 | 	mov	result1, objptr
20e84     00 90 00 FF 
20e88     00 FA 45 F5 | 	or	result1, ##18874368
20e8c     43 00 00 FF 
20e90     8C E5 05 F1 | 	add	objptr, ##34700
20e94     F2 FA 61 FC | 	wrlong	result1, objptr
20e98     43 00 00 FF 
20e9c     8C E5 85 F1 | 	sub	objptr, ##34700
20ea0     F2 FA 01 F6 | 	mov	result1, objptr
20ea4     00 98 00 FF 
20ea8     00 FA 45 F5 | 	or	result1, ##19922944
20eac     43 00 00 FF 
20eb0     90 E5 05 F1 | 	add	objptr, ##34704
20eb4     F2 FA 61 FC | 	wrlong	result1, objptr
20eb8     43 00 00 FF 
20ebc     90 E5 85 F1 | 	sub	objptr, ##34704
20ec0     F2 FA 01 F6 | 	mov	result1, objptr
20ec4     00 A0 00 FF 
20ec8     00 FA 45 F5 | 	or	result1, ##20971520
20ecc     43 00 00 FF 
20ed0     94 E5 05 F1 | 	add	objptr, ##34708
20ed4     F2 FA 61 FC | 	wrlong	result1, objptr
20ed8     43 00 00 FF 
20edc     94 E5 85 F1 | 	sub	objptr, ##34708
20ee0     F2 FA 01 F6 | 	mov	result1, objptr
20ee4     00 A8 00 FF 
20ee8     00 FA 45 F5 | 	or	result1, ##22020096
20eec     43 00 00 FF 
20ef0     98 E5 05 F1 | 	add	objptr, ##34712
20ef4     F2 FA 61 FC | 	wrlong	result1, objptr
20ef8     43 00 00 FF 
20efc     98 E5 85 F1 | 	sub	objptr, ##34712
20f00     F2 FA 01 F6 | 	mov	result1, objptr
20f04     00 B0 00 FF 
20f08     00 FA 45 F5 | 	or	result1, ##23068672
20f0c     43 00 00 FF 
20f10     9C E5 05 F1 | 	add	objptr, ##34716
20f14     F2 FA 61 FC | 	wrlong	result1, objptr
20f18     43 00 00 FF 
20f1c     9C E5 85 F1 | 	sub	objptr, ##34716
20f20     F2 FA 01 F6 | 	mov	result1, objptr
20f24     00 B8 00 FF 
20f28     00 FA 45 F5 | 	or	result1, ##24117248
20f2c     43 00 00 FF 
20f30     A0 E5 05 F1 | 	add	objptr, ##34720
20f34     F2 FA 61 FC | 	wrlong	result1, objptr
20f38     43 00 00 FF 
20f3c     A0 E5 85 F1 | 	sub	objptr, ##34720
20f40     F2 FA 01 F6 | 	mov	result1, objptr
20f44     37 FA 25 F4 | 	bith	result1, #55
20f48     43 00 00 FF 
20f4c     A4 E5 05 F1 | 	add	objptr, ##34724
20f50     F2 FA 61 FC | 	wrlong	result1, objptr
20f54     43 00 00 FF 
20f58     A4 E5 85 F1 | 	sub	objptr, ##34724
20f5c     F2 FA 01 F6 | 	mov	result1, objptr
20f60     00 C8 00 FF 
20f64     00 FA 45 F5 | 	or	result1, ##26214400
20f68     43 00 00 FF 
20f6c     A8 E5 05 F1 | 	add	objptr, ##34728
20f70     F2 FA 61 FC | 	wrlong	result1, objptr
20f74     43 00 00 FF 
20f78     A8 E5 85 F1 | 	sub	objptr, ##34728
20f7c     F2 FA 01 F6 | 	mov	result1, objptr
20f80     00 D0 00 FF 
20f84     00 FA 45 F5 | 	or	result1, ##27262976
20f88     43 00 00 FF 
20f8c     AC E5 05 F1 | 	add	objptr, ##34732
20f90     F2 FA 61 FC | 	wrlong	result1, objptr
20f94     43 00 00 FF 
20f98     AC E5 85 F1 | 	sub	objptr, ##34732
20f9c     F2 FA 01 F6 | 	mov	result1, objptr
20fa0     00 D8 00 FF 
20fa4     00 FA 45 F5 | 	or	result1, ##28311552
20fa8     43 00 00 FF 
20fac     B0 E5 05 F1 | 	add	objptr, ##34736
20fb0     F2 FA 61 FC | 	wrlong	result1, objptr
20fb4     43 00 00 FF 
20fb8     B0 E5 85 F1 | 	sub	objptr, ##34736
20fbc     F2 FA 01 F6 | 	mov	result1, objptr
20fc0     56 FA 25 F4 | 	bith	result1, #86
20fc4     43 00 00 FF 
20fc8     B4 E5 05 F1 | 	add	objptr, ##34740
20fcc     F2 FA 61 FC | 	wrlong	result1, objptr
20fd0     43 00 00 FF 
20fd4     B4 E5 85 F1 | 	sub	objptr, ##34740
20fd8     F2 FA 01 F6 | 	mov	result1, objptr
20fdc     00 E8 00 FF 
20fe0     00 FA 45 F5 | 	or	result1, ##30408704
20fe4     45 00 00 FF 
20fe8     7C E4 05 F1 | 	add	objptr, ##35452
20fec     F2 FA 61 FC | 	wrlong	result1, objptr
20ff0     45 00 00 FF 
20ff4     7C E4 85 F1 | 	sub	objptr, ##35452
20ff8     F2 FA 01 F6 | 	mov	result1, objptr
20ffc     75 FA 25 F4 | 	bith	result1, #117
21000     43 00 00 FF 
21004     B8 E5 05 F1 | 	add	objptr, ##34744
21008     F2 FA 61 FC | 	wrlong	result1, objptr
2100c     43 00 00 FF 
21010     B8 E5 85 F1 | 	sub	objptr, ##34744
21014     F2 FA 01 F6 | 	mov	result1, objptr
21018     94 FA 25 F4 | 	bith	result1, #148
2101c     43 00 00 FF 
21020     CC E5 05 F1 | 	add	objptr, ##34764
21024     F2 FA 61 FC | 	wrlong	result1, objptr
21028     43 00 00 FF 
2102c     CC E5 85 F1 | 	sub	objptr, ##34764
21030     F2 FA 01 F6 | 	mov	result1, objptr
21034     19 FA 25 F4 | 	bith	result1, #25
21038     43 00 00 FF 
2103c     BC E5 05 F1 | 	add	objptr, ##34748
21040     F2 FA 61 FC | 	wrlong	result1, objptr
21044     43 00 00 FF 
21048     BC E5 85 F1 | 	sub	objptr, ##34748
2104c     F2 FA 01 F6 | 	mov	result1, objptr
21050     00 08 01 FF 
21054     00 FA 45 F5 | 	or	result1, ##34603008
21058     43 00 00 FF 
2105c     D8 E4 05 F1 | 	add	objptr, ##34520
21060     F2 FA 61 FC | 	wrlong	result1, objptr
21064     43 00 00 FF 
21068     D8 E4 85 F1 | 	sub	objptr, ##34520
2106c     F2 FA 01 F6 | 	mov	result1, objptr
21070     00 10 01 FF 
21074     00 FA 45 F5 | 	or	result1, ##35651584
21078     43 00 00 FF 
2107c     C4 E5 05 F1 | 	add	objptr, ##34756
21080     F2 FA 61 FC | 	wrlong	result1, objptr
21084     43 00 00 FF 
21088     C4 E5 85 F1 | 	sub	objptr, ##34756
2108c     F2 FA 01 F6 | 	mov	result1, objptr
21090     00 18 01 FF 
21094     00 FA 45 F5 | 	or	result1, ##36700160
21098     43 00 00 FF 
2109c     C8 E5 05 F1 | 	add	objptr, ##34760
210a0     F2 FA 61 FC | 	wrlong	result1, objptr
210a4     43 00 00 FF 
210a8     C8 E5 85 F1 | 	sub	objptr, ##34760
210ac     F2 FA 01 F6 | 	mov	result1, objptr
210b0     00 20 01 FF 
210b4     00 FA 45 F5 | 	or	result1, ##37748736
210b8     43 00 00 FF 
210bc     D4 E5 05 F1 | 	add	objptr, ##34772
210c0     F2 FA 61 FC | 	wrlong	result1, objptr
210c4     43 00 00 FF 
210c8     D4 E5 85 F1 | 	sub	objptr, ##34772
210cc     F2 FA 01 F6 | 	mov	result1, objptr
210d0     00 28 01 FF 
210d4     00 FA 45 F5 | 	or	result1, ##38797312
210d8     43 00 00 FF 
210dc     D8 E5 05 F1 | 	add	objptr, ##34776
210e0     F2 FA 61 FC | 	wrlong	result1, objptr
210e4     43 00 00 FF 
210e8     D8 E5 85 F1 | 	sub	objptr, ##34776
210ec     F2 FA 01 F6 | 	mov	result1, objptr
210f0     00 30 01 FF 
210f4     00 FA 45 F5 | 	or	result1, ##39845888
210f8     43 00 00 FF 
210fc     DC E5 05 F1 | 	add	objptr, ##34780
21100     F2 FA 61 FC | 	wrlong	result1, objptr
21104     43 00 00 FF 
21108     DC E5 85 F1 | 	sub	objptr, ##34780
2110c     F2 FA 01 F6 | 	mov	result1, objptr
21110     00 38 01 FF 
21114     00 FA 45 F5 | 	or	result1, ##40894464
21118     43 00 00 FF 
2111c     E0 E5 05 F1 | 	add	objptr, ##34784
21120     F2 FA 61 FC | 	wrlong	result1, objptr
21124     43 00 00 FF 
21128     E0 E5 85 F1 | 	sub	objptr, ##34784
2112c     F2 FA 01 F6 | 	mov	result1, objptr
21130     00 40 01 FF 
21134     00 FA 45 F5 | 	or	result1, ##41943040
21138     43 00 00 FF 
2113c     E8 E5 05 F1 | 	add	objptr, ##34792
21140     F2 FA 61 FC | 	wrlong	result1, objptr
21144     43 00 00 FF 
21148     E8 E5 85 F1 | 	sub	objptr, ##34792
2114c     F2 FA 01 F6 | 	mov	result1, objptr
21150     00 08 01 FF 
21154     00 FA 45 F5 | 	or	result1, ##34603008
21158     43 00 00 FF 
2115c     EC E5 05 F1 | 	add	objptr, ##34796
21160     F2 FA 61 FC | 	wrlong	result1, objptr
21164     43 00 00 FF 
21168     EC E5 85 F1 | 	sub	objptr, ##34796
2116c     F2 FA 01 F6 | 	mov	result1, objptr
21170     00 48 01 FF 
21174     00 FA 45 F5 | 	or	result1, ##42991616
21178     43 00 00 FF 
2117c     EC E4 05 F1 | 	add	objptr, ##34540
21180     F2 FA 61 FC | 	wrlong	result1, objptr
21184     43 00 00 FF 
21188     EC E4 85 F1 | 	sub	objptr, ##34540
2118c     F2 FA 01 F6 | 	mov	result1, objptr
21190     00 50 01 FF 
21194     00 FA 45 F5 | 	or	result1, ##44040192
21198     43 00 00 FF 
2119c     1C E5 05 F1 | 	add	objptr, ##34588
211a0     F2 FA 61 FC | 	wrlong	result1, objptr
211a4     43 00 00 FF 
211a8     1C E5 85 F1 | 	sub	objptr, ##34588
211ac     F2 FA 01 F6 | 	mov	result1, objptr
211b0     00 58 01 FF 
211b4     00 FA 45 F5 | 	or	result1, ##45088768
211b8     43 00 00 FF 
211bc     18 E5 05 F1 | 	add	objptr, ##34584
211c0     F2 FA 61 FC | 	wrlong	result1, objptr
211c4     43 00 00 FF 
211c8     18 E5 85 F1 | 	sub	objptr, ##34584
211cc     F2 FA 01 F6 | 	mov	result1, objptr
211d0     00 60 01 FF 
211d4     00 FA 45 F5 | 	or	result1, ##46137344
211d8     43 00 00 FF 
211dc     BC E4 05 F1 | 	add	objptr, ##34492
211e0     F2 FA 61 FC | 	wrlong	result1, objptr
211e4     43 00 00 FF 
211e8     BC E4 85 F1 | 	sub	objptr, ##34492
211ec     F2 FA 01 F6 | 	mov	result1, objptr
211f0     00 68 01 FF 
211f4     00 FA 45 F5 | 	or	result1, ##47185920
211f8     43 00 00 FF 
211fc     C0 E4 05 F1 | 	add	objptr, ##34496
21200     F2 FA 61 FC | 	wrlong	result1, objptr
21204     43 00 00 FF 
21208     C0 E4 85 F1 | 	sub	objptr, ##34496
2120c     F2 FA 01 F6 | 	mov	result1, objptr
21210     00 70 01 FF 
21214     00 FA 45 F5 | 	or	result1, ##48234496
21218     43 00 00 FF 
2121c     28 E5 05 F1 | 	add	objptr, ##34600
21220     F2 FA 61 FC | 	wrlong	result1, objptr
21224     43 00 00 FF 
21228     28 E5 85 F1 | 	sub	objptr, ##34600
2122c     F2 FA 01 F6 | 	mov	result1, objptr
21230     00 78 01 FF 
21234     00 FA 45 F5 | 	or	result1, ##49283072
21238     43 00 00 FF 
2123c     D0 E5 05 F1 | 	add	objptr, ##34768
21240     F2 FA 61 FC | 	wrlong	result1, objptr
21244     43 00 00 FF 
21248     D0 E5 85 F1 | 	sub	objptr, ##34768
2124c     F2 FA 01 F6 | 	mov	result1, objptr
21250     38 FA 25 F4 | 	bith	result1, #56
21254     43 00 00 FF 
21258     E4 E5 05 F1 | 	add	objptr, ##34788
2125c     F2 FA 61 FC | 	wrlong	result1, objptr
21260     43 00 00 FF 
21264     E4 E5 85 F1 | 	sub	objptr, ##34788
21268     F2 FA 01 F6 | 	mov	result1, objptr
2126c     00 88 01 FF 
21270     00 FA 45 F5 | 	or	result1, ##51380224
21274     43 00 00 FF 
21278     F0 E5 05 F1 | 	add	objptr, ##34800
2127c     F2 FA 61 FC | 	wrlong	result1, objptr
21280     43 00 00 FF 
21284     F0 E5 85 F1 | 	sub	objptr, ##34800
21288     F2 FA 01 F6 | 	mov	result1, objptr
2128c     00 90 01 FF 
21290     00 FA 45 F5 | 	or	result1, ##52428800
21294     43 00 00 FF 
21298     F4 E5 05 F1 | 	add	objptr, ##34804
2129c     F2 FA 61 FC | 	wrlong	result1, objptr
212a0     43 00 00 FF 
212a4     F4 E5 85 F1 | 	sub	objptr, ##34804
212a8     F2 FA 01 F6 | 	mov	result1, objptr
212ac     00 98 01 FF 
212b0     00 FA 45 F5 | 	or	result1, ##53477376
212b4     43 00 00 FF 
212b8     F8 E5 05 F1 | 	add	objptr, ##34808
212bc     F2 FA 61 FC | 	wrlong	result1, objptr
212c0     43 00 00 FF 
212c4     F8 E5 85 F1 | 	sub	objptr, ##34808
212c8     F2 FA 01 F6 | 	mov	result1, objptr
212cc     00 A0 01 FF 
212d0     00 FA 45 F5 | 	or	result1, ##54525952
212d4     43 00 00 FF 
212d8     FC E5 05 F1 | 	add	objptr, ##34812
212dc     F2 FA 61 FC | 	wrlong	result1, objptr
212e0     43 00 00 FF 
212e4     FC E5 85 F1 | 	sub	objptr, ##34812
212e8     F2 FA 01 F6 | 	mov	result1, objptr
212ec     00 A8 01 FF 
212f0     00 FA 45 F5 | 	or	result1, ##55574528
212f4     44 00 00 FF 
212f8     00 E4 05 F1 | 	add	objptr, ##34816
212fc     F2 FA 61 FC | 	wrlong	result1, objptr
21300     44 00 00 FF 
21304     00 E4 85 F1 | 	sub	objptr, ##34816
21308     F2 FA 01 F6 | 	mov	result1, objptr
2130c     00 B0 01 FF 
21310     00 FA 45 F5 | 	or	result1, ##56623104
21314     44 00 00 FF 
21318     04 E4 05 F1 | 	add	objptr, ##34820
2131c     F2 FA 61 FC | 	wrlong	result1, objptr
21320     44 00 00 FF 
21324     04 E4 85 F1 | 	sub	objptr, ##34820
21328     F2 FA 01 F6 | 	mov	result1, objptr
2132c     94 FA 25 F4 | 	bith	result1, #148
21330     43 00 00 FF 
21334     CC E5 05 F1 | 	add	objptr, ##34764
21338     F2 FA 61 FC | 	wrlong	result1, objptr
2133c     43 00 00 FF 
21340     CC E5 85 F1 | 	sub	objptr, ##34764
21344     F2 FA 01 F6 | 	mov	result1, objptr
21348     00 B8 01 FF 
2134c     00 FA 45 F5 | 	or	result1, ##57671680
21350     44 00 00 FF 
21354     0C E4 05 F1 | 	add	objptr, ##34828
21358     F2 FA 61 FC | 	wrlong	result1, objptr
2135c     44 00 00 FF 
21360     0C E4 85 F1 | 	sub	objptr, ##34828
21364     F2 FA 01 F6 | 	mov	result1, objptr
21368     57 FA 25 F4 | 	bith	result1, #87
2136c     44 00 00 FF 
21370     08 E4 05 F1 | 	add	objptr, ##34824
21374     F2 FA 61 FC | 	wrlong	result1, objptr
21378     44 00 00 FF 
2137c     08 E4 85 F1 | 	sub	objptr, ##34824
21380     F2 FA 01 F6 | 	mov	result1, objptr
21384     00 C8 01 FF 
21388     00 FA 45 F5 | 	or	result1, ##59768832
2138c     44 00 00 FF 
21390     20 E4 05 F1 | 	add	objptr, ##34848
21394     F2 FA 61 FC | 	wrlong	result1, objptr
21398     44 00 00 FF 
2139c     20 E4 85 F1 | 	sub	objptr, ##34848
213a0     F2 FA 01 F6 | 	mov	result1, objptr
213a4     00 D0 01 FF 
213a8     00 FA 45 F5 | 	or	result1, ##60817408
213ac     44 00 00 FF 
213b0     24 E4 05 F1 | 	add	objptr, ##34852
213b4     F2 FA 61 FC | 	wrlong	result1, objptr
213b8     44 00 00 FF 
213bc     24 E4 85 F1 | 	sub	objptr, ##34852
213c0     F2 FA 01 F6 | 	mov	result1, objptr
213c4     00 D8 01 FF 
213c8     00 FA 45 F5 | 	or	result1, ##61865984
213cc     44 00 00 FF 
213d0     10 E4 05 F1 | 	add	objptr, ##34832
213d4     F2 FA 61 FC | 	wrlong	result1, objptr
213d8     44 00 00 FF 
213dc     10 E4 85 F1 | 	sub	objptr, ##34832
213e0     F2 FA 01 F6 | 	mov	result1, objptr
213e4     76 FA 25 F4 | 	bith	result1, #118
213e8     44 00 00 FF 
213ec     14 E4 05 F1 | 	add	objptr, ##34836
213f0     F2 FA 61 FC | 	wrlong	result1, objptr
213f4     44 00 00 FF 
213f8     14 E4 85 F1 | 	sub	objptr, ##34836
213fc     F2 FA 01 F6 | 	mov	result1, objptr
21400     00 E8 01 FF 
21404     00 FA 45 F5 | 	or	result1, ##63963136
21408     44 00 00 FF 
2140c     18 E4 05 F1 | 	add	objptr, ##34840
21410     F2 FA 61 FC | 	wrlong	result1, objptr
21414     44 00 00 FF 
21418     18 E4 85 F1 | 	sub	objptr, ##34840
2141c     F2 FA 01 F6 | 	mov	result1, objptr
21420     95 FA 25 F4 | 	bith	result1, #149
21424     44 00 00 FF 
21428     1C E4 05 F1 | 	add	objptr, ##34844
2142c     F2 FA 61 FC | 	wrlong	result1, objptr
21430     44 00 00 FF 
21434     1C E4 85 F1 | 	sub	objptr, ##34844
21438     F2 FA 01 F6 | 	mov	result1, objptr
2143c     B4 FA 25 F4 | 	bith	result1, #180
21440     44 00 00 FF 
21444     2C E4 05 F1 | 	add	objptr, ##34860
21448     F2 FA 61 FC | 	wrlong	result1, objptr
2144c     44 00 00 FF 
21450     2C E4 85 F1 | 	sub	objptr, ##34860
21454     F2 FA 01 F6 | 	mov	result1, objptr
21458     1A FA 25 F4 | 	bith	result1, #26
2145c     44 00 00 FF 
21460     28 E4 05 F1 | 	add	objptr, ##34856
21464     F2 FA 61 FC | 	wrlong	result1, objptr
21468     44 00 00 FF 
2146c     28 E4 85 F1 | 	sub	objptr, ##34856
21470     F2 FA 01 F6 | 	mov	result1, objptr
21474     00 08 02 FF 
21478     00 FA 45 F5 | 	or	result1, ##68157440
2147c     44 00 00 FF 
21480     38 E4 05 F1 | 	add	objptr, ##34872
21484     F2 FA 61 FC | 	wrlong	result1, objptr
21488     44 00 00 FF 
2148c     38 E4 85 F1 | 	sub	objptr, ##34872
21490     F2 FA 01 F6 | 	mov	result1, objptr
21494     00 10 02 FF 
21498     00 FA 45 F5 | 	or	result1, ##69206016
2149c     44 00 00 FF 
214a0     34 E4 05 F1 | 	add	objptr, ##34868
214a4     F2 FA 61 FC | 	wrlong	result1, objptr
214a8     44 00 00 FF 
214ac     34 E4 85 F1 | 	sub	objptr, ##34868
214b0     F2 FA 01 F6 | 	mov	result1, objptr
214b4     00 18 02 FF 
214b8     00 FA 45 F5 | 	or	result1, ##70254592
214bc     44 00 00 FF 
214c0     30 E4 05 F1 | 	add	objptr, ##34864
214c4     F2 FA 61 FC | 	wrlong	result1, objptr
214c8     44 00 00 FF 
214cc     30 E4 85 F1 | 	sub	objptr, ##34864
214d0     F2 FA 01 F6 | 	mov	result1, objptr
214d4     00 20 02 FF 
214d8     00 FA 45 F5 | 	or	result1, ##71303168
214dc     44 00 00 FF 
214e0     3C E4 05 F1 | 	add	objptr, ##34876
214e4     F2 FA 61 FC | 	wrlong	result1, objptr
214e8     44 00 00 FF 
214ec     3C E4 85 F1 | 	sub	objptr, ##34876
214f0     F2 FA 01 F6 | 	mov	result1, objptr
214f4     00 28 02 FF 
214f8     00 FA 45 F5 | 	or	result1, ##72351744
214fc     44 00 00 FF 
21500     40 E4 05 F1 | 	add	objptr, ##34880
21504     F2 FA 61 FC | 	wrlong	result1, objptr
21508     44 00 00 FF 
2150c     40 E4 85 F1 | 	sub	objptr, ##34880
21510     F2 FA 01 F6 | 	mov	result1, objptr
21514     00 30 02 FF 
21518     00 FA 45 F5 | 	or	result1, ##73400320
2151c     43 00 00 FF 
21520     D4 E4 05 F1 | 	add	objptr, ##34516
21524     F2 FA 61 FC | 	wrlong	result1, objptr
21528     43 00 00 FF 
2152c     D4 E4 85 F1 | 	sub	objptr, ##34516
21530     F2 FA 01 F6 | 	mov	result1, objptr
21534     00 38 02 FF 
21538     00 FA 45 F5 | 	or	result1, ##74448896
2153c     44 00 00 FF 
21540     58 E4 05 F1 | 	add	objptr, ##34904
21544     F2 FA 61 FC | 	wrlong	result1, objptr
21548     44 00 00 FF 
2154c     58 E4 85 F1 | 	sub	objptr, ##34904
21550     F2 FA 01 F6 | 	mov	result1, objptr
21554     00 40 02 FF 
21558     00 FA 45 F5 | 	or	result1, ##75497472
2155c     44 00 00 FF 
21560     68 E4 05 F1 | 	add	objptr, ##34920
21564     F2 FA 61 FC | 	wrlong	result1, objptr
21568     44 00 00 FF 
2156c     68 E4 85 F1 | 	sub	objptr, ##34920
21570     F2 FA 01 F6 | 	mov	result1, objptr
21574     00 48 02 FF 
21578     00 FA 45 F5 | 	or	result1, ##76546048
2157c     44 00 00 FF 
21580     6C E4 05 F1 | 	add	objptr, ##34924
21584     F2 FA 61 FC | 	wrlong	result1, objptr
21588     44 00 00 FF 
2158c     6C E4 85 F1 | 	sub	objptr, ##34924
21590     F2 FA 01 F6 | 	mov	result1, objptr
21594     00 50 02 FF 
21598     00 FA 45 F5 | 	or	result1, ##77594624
2159c     44 00 00 FF 
215a0     64 E4 05 F1 | 	add	objptr, ##34916
215a4     F2 FA 61 FC | 	wrlong	result1, objptr
215a8     44 00 00 FF 
215ac     64 E4 85 F1 | 	sub	objptr, ##34916
215b0     F2 FA 01 F6 | 	mov	result1, objptr
215b4     00 58 02 FF 
215b8     00 FA 45 F5 | 	or	result1, ##78643200
215bc     44 00 00 FF 
215c0     5C E4 05 F1 | 	add	objptr, ##34908
215c4     F2 FA 61 FC | 	wrlong	result1, objptr
215c8     44 00 00 FF 
215cc     5C E4 85 F1 | 	sub	objptr, ##34908
215d0     F2 FA 01 F6 | 	mov	result1, objptr
215d4     00 60 02 FF 
215d8     00 FA 45 F5 | 	or	result1, ##79691776
215dc     44 00 00 FF 
215e0     60 E4 05 F1 | 	add	objptr, ##34912
215e4     F2 FA 61 FC | 	wrlong	result1, objptr
215e8     44 00 00 FF 
215ec     60 E4 85 F1 | 	sub	objptr, ##34912
215f0     F2 FA 01 F6 | 	mov	result1, objptr
215f4     00 68 02 FF 
215f8     00 FA 45 F5 | 	or	result1, ##80740352
215fc     44 00 00 FF 
21600     70 E4 05 F1 | 	add	objptr, ##34928
21604     F2 FA 61 FC | 	wrlong	result1, objptr
21608     44 00 00 FF 
2160c     70 E4 85 F1 | 	sub	objptr, ##34928
21610     F2 FA 01 F6 | 	mov	result1, objptr
21614     00 70 02 FF 
21618     00 FA 45 F5 | 	or	result1, ##81788928
2161c     44 00 00 FF 
21620     74 E4 05 F1 | 	add	objptr, ##34932
21624     F2 FA 61 FC | 	wrlong	result1, objptr
21628     44 00 00 FF 
2162c     74 E4 85 F1 | 	sub	objptr, ##34932
21630     F2 FA 01 F6 | 	mov	result1, objptr
21634     00 78 02 FF 
21638     00 FA 45 F5 | 	or	result1, ##82837504
2163c     44 00 00 FF 
21640     78 E4 05 F1 | 	add	objptr, ##34936
21644     F2 FA 61 FC | 	wrlong	result1, objptr
21648     44 00 00 FF 
2164c     78 E4 85 F1 | 	sub	objptr, ##34936
21650     F2 FA 01 F6 | 	mov	result1, objptr
21654     00 80 02 FF 
21658     00 FA 45 F5 | 	or	result1, ##83886080
2165c     44 00 00 FF 
21660     7C E4 05 F1 | 	add	objptr, ##34940
21664     F2 FA 61 FC | 	wrlong	result1, objptr
21668     44 00 00 FF 
2166c     7C E4 85 F1 | 	sub	objptr, ##34940
21670     F2 FA 01 F6 | 	mov	result1, objptr
21674     00 88 02 FF 
21678     00 FA 45 F5 | 	or	result1, ##84934656
2167c     44 00 00 FF 
21680     80 E4 05 F1 | 	add	objptr, ##34944
21684     F2 FA 61 FC | 	wrlong	result1, objptr
21688     44 00 00 FF 
2168c     80 E4 85 F1 | 	sub	objptr, ##34944
21690     F2 FA 01 F6 | 	mov	result1, objptr
21694     00 90 02 FF 
21698     00 FA 45 F5 | 	or	result1, ##85983232
2169c     44 00 00 FF 
216a0     84 E4 05 F1 | 	add	objptr, ##34948
216a4     F2 FA 61 FC | 	wrlong	result1, objptr
216a8     44 00 00 FF 
216ac     84 E4 85 F1 | 	sub	objptr, ##34948
216b0     F2 FA 01 F6 | 	mov	result1, objptr
216b4     00 98 02 FF 
216b8     00 FA 45 F5 | 	or	result1, ##87031808
216bc     44 00 00 FF 
216c0     88 E4 05 F1 | 	add	objptr, ##34952
216c4     F2 FA 61 FC | 	wrlong	result1, objptr
216c8     44 00 00 FF 
216cc     88 E4 85 F1 | 	sub	objptr, ##34952
216d0     F2 FA 01 F6 | 	mov	result1, objptr
216d4     00 A0 02 FF 
216d8     00 FA 45 F5 | 	or	result1, ##88080384
216dc     44 00 00 FF 
216e0     8C E4 05 F1 | 	add	objptr, ##34956
216e4     F2 FA 61 FC | 	wrlong	result1, objptr
216e8     44 00 00 FF 
216ec     8C E4 85 F1 | 	sub	objptr, ##34956
216f0     F2 FA 01 F6 | 	mov	result1, objptr
216f4     00 A8 02 FF 
216f8     00 FA 45 F5 | 	or	result1, ##89128960
216fc     44 00 00 FF 
21700     98 E4 05 F1 | 	add	objptr, ##34968
21704     F2 FA 61 FC | 	wrlong	result1, objptr
21708     44 00 00 FF 
2170c     98 E4 85 F1 | 	sub	objptr, ##34968
21710     F2 FA 01 F6 | 	mov	result1, objptr
21714     00 B0 02 FF 
21718     00 FA 45 F5 | 	or	result1, ##90177536
2171c     44 00 00 FF 
21720     90 E4 05 F1 | 	add	objptr, ##34960
21724     F2 FA 61 FC | 	wrlong	result1, objptr
21728     44 00 00 FF 
2172c     90 E4 85 F1 | 	sub	objptr, ##34960
21730     F2 FA 01 F6 | 	mov	result1, objptr
21734     00 B8 02 FF 
21738     00 FA 45 F5 | 	or	result1, ##91226112
2173c     44 00 00 FF 
21740     94 E4 05 F1 | 	add	objptr, ##34964
21744     F2 FA 61 FC | 	wrlong	result1, objptr
21748     44 00 00 FF 
2174c     94 E4 85 F1 | 	sub	objptr, ##34964
21750     F2 FA 01 F6 | 	mov	result1, objptr
21754     00 C0 02 FF 
21758     00 FA 45 F5 | 	or	result1, ##92274688
2175c     44 00 00 FF 
21760     9C E4 05 F1 | 	add	objptr, ##34972
21764     F2 FA 61 FC | 	wrlong	result1, objptr
21768     44 00 00 FF 
2176c     9C E4 85 F1 | 	sub	objptr, ##34972
21770     F2 FA 01 F6 | 	mov	result1, objptr
21774     00 C8 02 FF 
21778     00 FA 45 F5 | 	or	result1, ##93323264
2177c     44 00 00 FF 
21780     44 E4 05 F1 | 	add	objptr, ##34884
21784     F2 FA 61 FC | 	wrlong	result1, objptr
21788     44 00 00 FF 
2178c     44 E4 85 F1 | 	sub	objptr, ##34884
21790     F2 FA 01 F6 | 	mov	result1, objptr
21794     00 D0 02 FF 
21798     00 FA 45 F5 | 	or	result1, ##94371840
2179c     44 00 00 FF 
217a0     4C E4 05 F1 | 	add	objptr, ##34892
217a4     F2 FA 61 FC | 	wrlong	result1, objptr
217a8     44 00 00 FF 
217ac     4C E4 85 F1 | 	sub	objptr, ##34892
217b0     F2 FA 01 F6 | 	mov	result1, objptr
217b4     00 D8 02 FF 
217b8     00 FA 45 F5 | 	or	result1, ##95420416
217bc     44 00 00 FF 
217c0     50 E4 05 F1 | 	add	objptr, ##34896
217c4     F2 FA 61 FC | 	wrlong	result1, objptr
217c8     44 00 00 FF 
217cc     50 E4 85 F1 | 	sub	objptr, ##34896
217d0     F2 FA 01 F6 | 	mov	result1, objptr
217d4     00 E0 02 FF 
217d8     00 FA 45 F5 | 	or	result1, ##96468992
217dc     44 00 00 FF 
217e0     A0 E4 05 F1 | 	add	objptr, ##34976
217e4     F2 FA 61 FC | 	wrlong	result1, objptr
217e8     44 00 00 FF 
217ec     A0 E4 85 F1 | 	sub	objptr, ##34976
217f0     F2 FA 01 F6 | 	mov	result1, objptr
217f4     00 E8 02 FF 
217f8     00 FA 45 F5 | 	or	result1, ##97517568
217fc     44 00 00 FF 
21800     A4 E4 05 F1 | 	add	objptr, ##34980
21804     F2 FA 61 FC | 	wrlong	result1, objptr
21808     44 00 00 FF 
2180c     A4 E4 85 F1 | 	sub	objptr, ##34980
21810     F2 FA 01 F6 | 	mov	result1, objptr
21814     00 F0 02 FF 
21818     00 FA 45 F5 | 	or	result1, ##98566144
2181c     44 00 00 FF 
21820     A8 E4 05 F1 | 	add	objptr, ##34984
21824     F2 FA 61 FC | 	wrlong	result1, objptr
21828     44 00 00 FF 
2182c     A8 E4 85 F1 | 	sub	objptr, ##34984
21830     F2 FA 01 F6 | 	mov	result1, objptr
21834     00 F8 02 FF 
21838     00 FA 45 F5 | 	or	result1, ##99614720
2183c     44 00 00 FF 
21840     54 E4 05 F1 | 	add	objptr, ##34900
21844     F2 FA 61 FC | 	wrlong	result1, objptr
21848     44 00 00 FF 
2184c     54 E4 85 F1 | 	sub	objptr, ##34900
21850     F2 FA 01 F6 | 	mov	result1, objptr
21854     39 FA 25 F4 | 	bith	result1, #57
21858     44 00 00 FF 
2185c     B8 E4 05 F1 | 	add	objptr, ##35000
21860     F2 FA 61 FC | 	wrlong	result1, objptr
21864     44 00 00 FF 
21868     B8 E4 85 F1 | 	sub	objptr, ##35000
2186c     F2 FA 01 F6 | 	mov	result1, objptr
21870     00 08 03 FF 
21874     00 FA 45 F5 | 	or	result1, ##101711872
21878     44 00 00 FF 
2187c     C0 E4 05 F1 | 	add	objptr, ##35008
21880     F2 FA 61 FC | 	wrlong	result1, objptr
21884     44 00 00 FF 
21888     C0 E4 85 F1 | 	sub	objptr, ##35008
2188c     F2 FA 01 F6 | 	mov	result1, objptr
21890     00 10 03 FF 
21894     00 FA 45 F5 | 	or	result1, ##102760448
21898     44 00 00 FF 
2189c     B4 E4 05 F1 | 	add	objptr, ##34996
218a0     F2 FA 61 FC | 	wrlong	result1, objptr
218a4     44 00 00 FF 
218a8     B4 E4 85 F1 | 	sub	objptr, ##34996
218ac     F2 FA 01 F6 | 	mov	result1, objptr
218b0     00 18 03 FF 
218b4     00 FA 45 F5 | 	or	result1, ##103809024
218b8     44 00 00 FF 
218bc     B0 E4 05 F1 | 	add	objptr, ##34992
218c0     F2 FA 61 FC | 	wrlong	result1, objptr
218c4     44 00 00 FF 
218c8     B0 E4 85 F1 | 	sub	objptr, ##34992
218cc     F2 FA 01 F6 | 	mov	result1, objptr
218d0     00 20 03 FF 
218d4     00 FA 45 F5 | 	or	result1, ##104857600
218d8     44 00 00 FF 
218dc     AC E4 05 F1 | 	add	objptr, ##34988
218e0     F2 FA 61 FC | 	wrlong	result1, objptr
218e4     44 00 00 FF 
218e8     AC E4 85 F1 | 	sub	objptr, ##34988
218ec     F2 FA 01 F6 | 	mov	result1, objptr
218f0     00 28 03 FF 
218f4     00 FA 45 F5 | 	or	result1, ##105906176
218f8     44 00 00 FF 
218fc     BC E4 05 F1 | 	add	objptr, ##35004
21900     F2 FA 61 FC | 	wrlong	result1, objptr
21904     44 00 00 FF 
21908     BC E4 85 F1 | 	sub	objptr, ##35004
2190c     F2 FA 01 F6 | 	mov	result1, objptr
21910     00 30 03 FF 
21914     00 FA 45 F5 | 	or	result1, ##106954752
21918     44 00 00 FF 
2191c     C4 E4 05 F1 | 	add	objptr, ##35012
21920     F2 FA 61 FC | 	wrlong	result1, objptr
21924     44 00 00 FF 
21928     C4 E4 85 F1 | 	sub	objptr, ##35012
2192c     F2 FA 01 F6 | 	mov	result1, objptr
21930     00 38 03 FF 
21934     00 FA 45 F5 | 	or	result1, ##108003328
21938     44 00 00 FF 
2193c     C8 E4 05 F1 | 	add	objptr, ##35016
21940     F2 FA 61 FC | 	wrlong	result1, objptr
21944     44 00 00 FF 
21948     C8 E4 85 F1 | 	sub	objptr, ##35016
2194c     F2 FA 01 F6 | 	mov	result1, objptr
21950     00 40 03 FF 
21954     00 FA 45 F5 | 	or	result1, ##109051904
21958     44 00 00 FF 
2195c     CC E4 05 F1 | 	add	objptr, ##35020
21960     F2 FA 61 FC | 	wrlong	result1, objptr
21964     44 00 00 FF 
21968     CC E4 85 F1 | 	sub	objptr, ##35020
2196c     F2 FA 01 F6 | 	mov	result1, objptr
21970     00 48 03 FF 
21974     00 FA 45 F5 | 	or	result1, ##110100480
21978     44 00 00 FF 
2197c     D4 E4 05 F1 | 	add	objptr, ##35028
21980     F2 FA 61 FC | 	wrlong	result1, objptr
21984     44 00 00 FF 
21988     D4 E4 85 F1 | 	sub	objptr, ##35028
2198c     F2 FA 01 F6 | 	mov	result1, objptr
21990     00 50 03 FF 
21994     00 FA 45 F5 | 	or	result1, ##111149056
21998     44 00 00 FF 
2199c     D8 E4 05 F1 | 	add	objptr, ##35032
219a0     F2 FA 61 FC | 	wrlong	result1, objptr
219a4     44 00 00 FF 
219a8     D8 E4 85 F1 | 	sub	objptr, ##35032
219ac     F2 FA 01 F6 | 	mov	result1, objptr
219b0     00 58 03 FF 
219b4     00 FA 45 F5 | 	or	result1, ##112197632
219b8     44 00 00 FF 
219bc     DC E4 05 F1 | 	add	objptr, ##35036
219c0     F2 FA 61 FC | 	wrlong	result1, objptr
219c4     44 00 00 FF 
219c8     DC E4 85 F1 | 	sub	objptr, ##35036
219cc     F2 FA 01 F6 | 	mov	result1, objptr
219d0     00 60 03 FF 
219d4     00 FA 45 F5 | 	or	result1, ##113246208
219d8     44 00 00 FF 
219dc     E0 E4 05 F1 | 	add	objptr, ##35040
219e0     F2 FA 61 FC | 	wrlong	result1, objptr
219e4     44 00 00 FF 
219e8     E0 E4 85 F1 | 	sub	objptr, ##35040
219ec     F2 FA 01 F6 | 	mov	result1, objptr
219f0     00 68 03 FF 
219f4     00 FA 45 F5 | 	or	result1, ##114294784
219f8     44 00 00 FF 
219fc     E4 E4 05 F1 | 	add	objptr, ##35044
21a00     F2 FA 61 FC | 	wrlong	result1, objptr
21a04     44 00 00 FF 
21a08     E4 E4 85 F1 | 	sub	objptr, ##35044
21a0c     F2 FA 01 F6 | 	mov	result1, objptr
21a10     00 70 03 FF 
21a14     00 FA 45 F5 | 	or	result1, ##115343360
21a18     44 00 00 FF 
21a1c     E8 E4 05 F1 | 	add	objptr, ##35048
21a20     F2 FA 61 FC | 	wrlong	result1, objptr
21a24     44 00 00 FF 
21a28     E8 E4 85 F1 | 	sub	objptr, ##35048
21a2c     F2 FA 01 F6 | 	mov	result1, objptr
21a30     00 08 01 FF 
21a34     00 FA 45 F5 | 	or	result1, ##34603008
21a38     44 00 00 FF 
21a3c     EC E4 05 F1 | 	add	objptr, ##35052
21a40     F2 FA 61 FC | 	wrlong	result1, objptr
21a44     44 00 00 FF 
21a48     EC E4 85 F1 | 	sub	objptr, ##35052
21a4c     F2 FA 01 F6 | 	mov	result1, objptr
21a50     00 78 03 FF 
21a54     00 FA 45 F5 | 	or	result1, ##116391936
21a58     44 00 00 FF 
21a5c     F0 E4 05 F1 | 	add	objptr, ##35056
21a60     F2 FA 61 FC | 	wrlong	result1, objptr
21a64     44 00 00 FF 
21a68     F0 E4 85 F1 | 	sub	objptr, ##35056
21a6c     F2 FA 01 F6 | 	mov	result1, objptr
21a70     58 FA 25 F4 | 	bith	result1, #88
21a74     44 00 00 FF 
21a78     D0 E4 05 F1 | 	add	objptr, ##35024
21a7c     F2 FA 61 FC | 	wrlong	result1, objptr
21a80     44 00 00 FF 
21a84     D0 E4 85 F1 | 	sub	objptr, ##35024
21a88     F2 FA 01 F6 | 	mov	result1, objptr
21a8c     00 88 03 FF 
21a90     00 FA 45 F5 | 	or	result1, ##118489088
21a94     43 00 00 FF 
21a98     C8 E4 05 F1 | 	add	objptr, ##34504
21a9c     F2 FA 61 FC | 	wrlong	result1, objptr
21aa0     43 00 00 FF 
21aa4     C8 E4 85 F1 | 	sub	objptr, ##34504
21aa8     F2 FA 01 F6 | 	mov	result1, objptr
21aac     00 90 03 FF 
21ab0     00 FA 45 F5 | 	or	result1, ##119537664
21ab4     44 00 00 FF 
21ab8     F4 E4 05 F1 | 	add	objptr, ##35060
21abc     F2 FA 61 FC | 	wrlong	result1, objptr
21ac0     44 00 00 FF 
21ac4     F4 E4 85 F1 | 	sub	objptr, ##35060
21ac8     F2 FA 01 F6 | 	mov	result1, objptr
21acc     00 98 03 FF 
21ad0     00 FA 45 F5 | 	or	result1, ##120586240
21ad4     44 00 00 FF 
21ad8     F8 E4 05 F1 | 	add	objptr, ##35064
21adc     F2 FA 61 FC | 	wrlong	result1, objptr
21ae0     44 00 00 FF 
21ae4     F8 E4 85 F1 | 	sub	objptr, ##35064
21ae8     F2 FA 01 F6 | 	mov	result1, objptr
21aec     00 A0 03 FF 
21af0     00 FA 45 F5 | 	or	result1, ##121634816
21af4     44 00 00 FF 
21af8     0C E5 05 F1 | 	add	objptr, ##35084
21afc     F2 FA 61 FC | 	wrlong	result1, objptr
21b00     44 00 00 FF 
21b04     0C E5 85 F1 | 	sub	objptr, ##35084
21b08     F2 FA 01 F6 | 	mov	result1, objptr
21b0c     00 A8 03 FF 
21b10     00 FA 45 F5 | 	or	result1, ##122683392
21b14     44 00 00 FF 
21b18     08 E5 05 F1 | 	add	objptr, ##35080
21b1c     F2 FA 61 FC | 	wrlong	result1, objptr
21b20     44 00 00 FF 
21b24     08 E5 85 F1 | 	sub	objptr, ##35080
21b28     F2 FA 01 F6 | 	mov	result1, objptr
21b2c     00 B0 03 FF 
21b30     00 FA 45 F5 | 	or	result1, ##123731968
21b34     44 00 00 FF 
21b38     00 E5 05 F1 | 	add	objptr, ##35072
21b3c     F2 FA 61 FC | 	wrlong	result1, objptr
21b40     44 00 00 FF 
21b44     00 E5 85 F1 | 	sub	objptr, ##35072
21b48     F2 FA 01 F6 | 	mov	result1, objptr
21b4c     00 B8 03 FF 
21b50     00 FA 45 F5 | 	or	result1, ##124780544
21b54     44 00 00 FF 
21b58     FC E4 05 F1 | 	add	objptr, ##35068
21b5c     F2 FA 61 FC | 	wrlong	result1, objptr
21b60     44 00 00 FF 
21b64     FC E4 85 F1 | 	sub	objptr, ##35068
21b68     F2 FA 01 F6 | 	mov	result1, objptr
21b6c     77 FA 25 F4 | 	bith	result1, #119
21b70     44 00 00 FF 
21b74     1C E5 05 F1 | 	add	objptr, ##35100
21b78     F2 FA 61 FC | 	wrlong	result1, objptr
21b7c     44 00 00 FF 
21b80     1C E5 85 F1 | 	sub	objptr, ##35100
21b84     F2 FA 01 F6 | 	mov	result1, objptr
21b88     00 C8 03 FF 
21b8c     00 FA 45 F5 | 	or	result1, ##126877696
21b90     44 00 00 FF 
21b94     10 E5 05 F1 | 	add	objptr, ##35088
21b98     F2 FA 61 FC | 	wrlong	result1, objptr
21b9c     44 00 00 FF 
21ba0     10 E5 85 F1 | 	sub	objptr, ##35088
21ba4     F2 FA 01 F6 | 	mov	result1, objptr
21ba8     00 D0 03 FF 
21bac     00 FA 45 F5 | 	or	result1, ##127926272
21bb0     44 00 00 FF 
21bb4     14 E5 05 F1 | 	add	objptr, ##35092
21bb8     F2 FA 61 FC | 	wrlong	result1, objptr
21bbc     44 00 00 FF 
21bc0     14 E5 85 F1 | 	sub	objptr, ##35092
21bc4     F2 FA 01 F6 | 	mov	result1, objptr
21bc8     00 D8 03 FF 
21bcc     00 FA 45 F5 | 	or	result1, ##128974848
21bd0     44 00 00 FF 
21bd4     18 E5 05 F1 | 	add	objptr, ##35096
21bd8     F2 FA 61 FC | 	wrlong	result1, objptr
21bdc     44 00 00 FF 
21be0     18 E5 85 F1 | 	sub	objptr, ##35096
21be4     F2 FA 01 F6 | 	mov	result1, objptr
21be8     96 FA 25 F4 | 	bith	result1, #150
21bec     44 00 00 FF 
21bf0     20 E5 05 F1 | 	add	objptr, ##35104
21bf4     F2 FA 61 FC | 	wrlong	result1, objptr
21bf8     44 00 00 FF 
21bfc     20 E5 85 F1 | 	sub	objptr, ##35104
21c00     F2 FA 01 F6 | 	mov	result1, objptr
21c04     00 E8 03 FF 
21c08     00 FA 45 F5 | 	or	result1, ##131072000
21c0c     44 00 00 FF 
21c10     24 E5 05 F1 | 	add	objptr, ##35108
21c14     F2 FA 61 FC | 	wrlong	result1, objptr
21c18     44 00 00 FF 
21c1c     24 E5 85 F1 | 	sub	objptr, ##35108
21c20     F2 FA 01 F6 | 	mov	result1, objptr
21c24     B5 FA 25 F4 | 	bith	result1, #181
21c28     44 00 00 FF 
21c2c     28 E5 05 F1 | 	add	objptr, ##35112
21c30     F2 FA 61 FC | 	wrlong	result1, objptr
21c34     44 00 00 FF 
21c38     28 E5 85 F1 | 	sub	objptr, ##35112
21c3c     F2 FA 01 F6 | 	mov	result1, objptr
21c40     D4 FA 25 F4 | 	bith	result1, #212
21c44     44 00 00 FF 
21c48     2C E5 05 F1 | 	add	objptr, ##35116
21c4c     F2 FA 61 FC | 	wrlong	result1, objptr
21c50     44 00 00 FF 
21c54     2C E5 85 F1 | 	sub	objptr, ##35116
21c58     F2 FA 01 F6 | 	mov	result1, objptr
21c5c     1B FA 25 F4 | 	bith	result1, #27
21c60     44 00 00 FF 
21c64     30 E5 05 F1 | 	add	objptr, ##35120
21c68     F2 FA 61 FC | 	wrlong	result1, objptr
21c6c     44 00 00 FF 
21c70     30 E5 85 F1 | 	sub	objptr, ##35120
21c74     F2 FA 01 F6 | 	mov	result1, objptr
21c78     00 08 04 FF 
21c7c     00 FA 45 F5 | 	or	result1, ##135266304
21c80     44 00 00 FF 
21c84     34 E5 05 F1 | 	add	objptr, ##35124
21c88     F2 FA 61 FC | 	wrlong	result1, objptr
21c8c     44 00 00 FF 
21c90     34 E5 85 F1 | 	sub	objptr, ##35124
21c94     F2 FA 01 F6 | 	mov	result1, objptr
21c98     00 10 04 FF 
21c9c     00 FA 45 F5 | 	or	result1, ##136314880
21ca0     44 00 00 FF 
21ca4     3C E5 05 F1 | 	add	objptr, ##35132
21ca8     F2 FA 61 FC | 	wrlong	result1, objptr
21cac     44 00 00 FF 
21cb0     3C E5 85 F1 | 	sub	objptr, ##35132
21cb4     F2 FA 01 F6 | 	mov	result1, objptr
21cb8     00 18 04 FF 
21cbc     00 FA 45 F5 | 	or	result1, ##137363456
21cc0     44 00 00 FF 
21cc4     40 E5 05 F1 | 	add	objptr, ##35136
21cc8     F2 FA 61 FC | 	wrlong	result1, objptr
21ccc     44 00 00 FF 
21cd0     40 E5 85 F1 | 	sub	objptr, ##35136
21cd4     F2 FA 01 F6 | 	mov	result1, objptr
21cd8     00 20 04 FF 
21cdc     00 FA 45 F5 | 	or	result1, ##138412032
21ce0     44 00 00 FF 
21ce4     44 E5 05 F1 | 	add	objptr, ##35140
21ce8     F2 FA 61 FC | 	wrlong	result1, objptr
21cec     44 00 00 FF 
21cf0     44 E5 85 F1 | 	sub	objptr, ##35140
21cf4     F2 FA 01 F6 | 	mov	result1, objptr
21cf8     00 28 04 FF 
21cfc     00 FA 45 F5 | 	or	result1, ##139460608
21d00     44 00 00 FF 
21d04     38 E5 05 F1 | 	add	objptr, ##35128
21d08     F2 FA 61 FC | 	wrlong	result1, objptr
21d0c     44 00 00 FF 
21d10     38 E5 85 F1 | 	sub	objptr, ##35128
21d14     F2 FA 01 F6 | 	mov	result1, objptr
21d18     00 30 04 FF 
21d1c     00 FA 45 F5 | 	or	result1, ##140509184
21d20     44 00 00 FF 
21d24     48 E5 05 F1 | 	add	objptr, ##35144
21d28     F2 FA 61 FC | 	wrlong	result1, objptr
21d2c     44 00 00 FF 
21d30     48 E5 85 F1 | 	sub	objptr, ##35144
21d34     F2 FA 01 F6 | 	mov	result1, objptr
21d38     00 38 04 FF 
21d3c     00 FA 45 F5 | 	or	result1, ##141557760
21d40     44 00 00 FF 
21d44     7C E5 05 F1 | 	add	objptr, ##35196
21d48     F2 FA 61 FC | 	wrlong	result1, objptr
21d4c     44 00 00 FF 
21d50     7C E5 85 F1 | 	sub	objptr, ##35196
21d54     F2 FA 01 F6 | 	mov	result1, objptr
21d58     00 40 04 FF 
21d5c     00 FA 45 F5 | 	or	result1, ##142606336
21d60     44 00 00 FF 
21d64     74 E5 05 F1 | 	add	objptr, ##35188
21d68     F2 FA 61 FC | 	wrlong	result1, objptr
21d6c     44 00 00 FF 
21d70     74 E5 85 F1 | 	sub	objptr, ##35188
21d74     F2 FA 01 F6 | 	mov	result1, objptr
21d78     00 48 04 FF 
21d7c     00 FA 45 F5 | 	or	result1, ##143654912
21d80     44 00 00 FF 
21d84     4C E5 05 F1 | 	add	objptr, ##35148
21d88     F2 FA 61 FC | 	wrlong	result1, objptr
21d8c     44 00 00 FF 
21d90     4C E5 85 F1 | 	sub	objptr, ##35148
21d94     F2 FA 01 F6 | 	mov	result1, objptr
21d98     00 50 04 FF 
21d9c     00 FA 45 F5 | 	or	result1, ##144703488
21da0     44 00 00 FF 
21da4     50 E5 05 F1 | 	add	objptr, ##35152
21da8     F2 FA 61 FC | 	wrlong	result1, objptr
21dac     44 00 00 FF 
21db0     50 E5 85 F1 | 	sub	objptr, ##35152
21db4     F2 FA 01 F6 | 	mov	result1, objptr
21db8     00 58 04 FF 
21dbc     00 FA 45 F5 | 	or	result1, ##145752064
21dc0     44 00 00 FF 
21dc4     6C E5 05 F1 | 	add	objptr, ##35180
21dc8     F2 FA 61 FC | 	wrlong	result1, objptr
21dcc     44 00 00 FF 
21dd0     6C E5 85 F1 | 	sub	objptr, ##35180
21dd4     F2 FA 01 F6 | 	mov	result1, objptr
21dd8     00 60 04 FF 
21ddc     00 FA 45 F5 | 	or	result1, ##146800640
21de0     44 00 00 FF 
21de4     70 E5 05 F1 | 	add	objptr, ##35184
21de8     F2 FA 61 FC | 	wrlong	result1, objptr
21dec     44 00 00 FF 
21df0     70 E5 85 F1 | 	sub	objptr, ##35184
21df4     F2 FA 01 F6 | 	mov	result1, objptr
21df8     00 68 04 FF 
21dfc     00 FA 45 F5 | 	or	result1, ##147849216
21e00     44 00 00 FF 
21e04     8C E5 05 F1 | 	add	objptr, ##35212
21e08     F2 FA 61 FC | 	wrlong	result1, objptr
21e0c     44 00 00 FF 
21e10     8C E5 85 F1 | 	sub	objptr, ##35212
21e14     F2 FA 01 F6 | 	mov	result1, objptr
21e18     00 70 04 FF 
21e1c     00 FA 45 F5 | 	or	result1, ##148897792
21e20     44 00 00 FF 
21e24     88 E5 05 F1 | 	add	objptr, ##35208
21e28     F2 FA 61 FC | 	wrlong	result1, objptr
21e2c     44 00 00 FF 
21e30     88 E5 85 F1 | 	sub	objptr, ##35208
21e34     F2 FA 01 F6 | 	mov	result1, objptr
21e38     00 78 04 FF 
21e3c     00 FA 45 F5 | 	or	result1, ##149946368
21e40     44 00 00 FF 
21e44     98 E5 05 F1 | 	add	objptr, ##35224
21e48     F2 FA 61 FC | 	wrlong	result1, objptr
21e4c     44 00 00 FF 
21e50     98 E5 85 F1 | 	sub	objptr, ##35224
21e54     F2 FA 01 F6 | 	mov	result1, objptr
21e58     00 80 04 FF 
21e5c     00 FA 45 F5 | 	or	result1, ##150994944
21e60     44 00 00 FF 
21e64     64 E5 05 F1 | 	add	objptr, ##35172
21e68     F2 FA 61 FC | 	wrlong	result1, objptr
21e6c     44 00 00 FF 
21e70     64 E5 85 F1 | 	sub	objptr, ##35172
21e74     F2 FA 01 F6 | 	mov	result1, objptr
21e78     00 88 04 FF 
21e7c     00 FA 45 F5 | 	or	result1, ##152043520
21e80     44 00 00 FF 
21e84     94 E5 05 F1 | 	add	objptr, ##35220
21e88     F2 FA 61 FC | 	wrlong	result1, objptr
21e8c     44 00 00 FF 
21e90     94 E5 85 F1 | 	sub	objptr, ##35220
21e94     F2 FA 01 F6 | 	mov	result1, objptr
21e98     00 90 04 FF 
21e9c     00 FA 45 F5 | 	or	result1, ##153092096
21ea0     44 00 00 FF 
21ea4     84 E5 05 F1 | 	add	objptr, ##35204
21ea8     F2 FA 61 FC | 	wrlong	result1, objptr
21eac     44 00 00 FF 
21eb0     84 E5 85 F1 | 	sub	objptr, ##35204
21eb4     F2 FA 01 F6 | 	mov	result1, objptr
21eb8     00 98 04 FF 
21ebc     00 FA 45 F5 | 	or	result1, ##154140672
21ec0     43 00 00 FF 
21ec4     34 E5 05 F1 | 	add	objptr, ##34612
21ec8     F2 FA 61 FC | 	wrlong	result1, objptr
21ecc     43 00 00 FF 
21ed0     34 E5 85 F1 | 	sub	objptr, ##34612
21ed4     F2 FA 01 F6 | 	mov	result1, objptr
21ed8     00 A0 04 FF 
21edc     00 FA 45 F5 | 	or	result1, ##155189248
21ee0     44 00 00 FF 
21ee4     54 E5 05 F1 | 	add	objptr, ##35156
21ee8     F2 FA 61 FC | 	wrlong	result1, objptr
21eec     44 00 00 FF 
21ef0     54 E5 85 F1 | 	sub	objptr, ##35156
21ef4     F2 FA 01 F6 | 	mov	result1, objptr
21ef8     00 08 01 FF 
21efc     00 FA 45 F5 | 	or	result1, ##34603008
21f00     44 00 00 FF 
21f04     5C E5 05 F1 | 	add	objptr, ##35164
21f08     F2 FA 61 FC | 	wrlong	result1, objptr
21f0c     44 00 00 FF 
21f10     5C E5 85 F1 | 	sub	objptr, ##35164
21f14     F2 FA 01 F6 | 	mov	result1, objptr
21f18     00 A8 04 FF 
21f1c     00 FA 45 F5 | 	or	result1, ##156237824
21f20     44 00 00 FF 
21f24     58 E5 05 F1 | 	add	objptr, ##35160
21f28     F2 FA 61 FC | 	wrlong	result1, objptr
21f2c     44 00 00 FF 
21f30     58 E5 85 F1 | 	sub	objptr, ##35160
21f34     F2 FA 01 F6 | 	mov	result1, objptr
21f38     00 B0 04 FF 
21f3c     00 FA 45 F5 | 	or	result1, ##157286400
21f40     44 00 00 FF 
21f44     9C E5 05 F1 | 	add	objptr, ##35228
21f48     F2 FA 61 FC | 	wrlong	result1, objptr
21f4c     44 00 00 FF 
21f50     9C E5 85 F1 | 	sub	objptr, ##35228
21f54     F2 FA 01 F6 | 	mov	result1, objptr
21f58     00 B8 04 FF 
21f5c     00 FA 45 F5 | 	or	result1, ##158334976
21f60     44 00 00 FF 
21f64     A0 E5 05 F1 | 	add	objptr, ##35232
21f68     F2 FA 61 FC | 	wrlong	result1, objptr
21f6c     44 00 00 FF 
21f70     A0 E5 85 F1 | 	sub	objptr, ##35232
21f74     F2 FA 01 F6 | 	mov	result1, objptr
21f78     00 C0 04 FF 
21f7c     00 FA 45 F5 | 	or	result1, ##159383552
21f80     44 00 00 FF 
21f84     A4 E5 05 F1 | 	add	objptr, ##35236
21f88     F2 FA 61 FC | 	wrlong	result1, objptr
21f8c     44 00 00 FF 
21f90     A4 E5 85 F1 | 	sub	objptr, ##35236
21f94     F2 FA 01 F6 | 	mov	result1, objptr
21f98     00 C8 04 FF 
21f9c     00 FA 45 F5 | 	or	result1, ##160432128
21fa0     44 00 00 FF 
21fa4     A8 E5 05 F1 | 	add	objptr, ##35240
21fa8     F2 FA 61 FC | 	wrlong	result1, objptr
21fac     44 00 00 FF 
21fb0     A8 E5 85 F1 | 	sub	objptr, ##35240
21fb4     F2 FA 01 F6 | 	mov	result1, objptr
21fb8     00 D0 04 FF 
21fbc     00 FA 45 F5 | 	or	result1, ##161480704
21fc0     44 00 00 FF 
21fc4     B0 E5 05 F1 | 	add	objptr, ##35248
21fc8     F2 FA 61 FC | 	wrlong	result1, objptr
21fcc     44 00 00 FF 
21fd0     B0 E5 85 F1 | 	sub	objptr, ##35248
21fd4     F2 FA 01 F6 | 	mov	result1, objptr
21fd8     00 D8 04 FF 
21fdc     00 FA 45 F5 | 	or	result1, ##162529280
21fe0     44 00 00 FF 
21fe4     B4 E5 05 F1 | 	add	objptr, ##35252
21fe8     F2 FA 61 FC | 	wrlong	result1, objptr
21fec     44 00 00 FF 
21ff0     B4 E5 85 F1 | 	sub	objptr, ##35252
21ff4     F2 FA 01 F6 | 	mov	result1, objptr
21ff8     00 E0 04 FF 
21ffc     00 FA 45 F5 | 	or	result1, ##163577856
22000     44 00 00 FF 
22004     B8 E5 05 F1 | 	add	objptr, ##35256
22008     F2 FA 61 FC | 	wrlong	result1, objptr
2200c     44 00 00 FF 
22010     B8 E5 85 F1 | 	sub	objptr, ##35256
22014     F2 FA 01 F6 | 	mov	result1, objptr
22018     00 E8 04 FF 
2201c     00 FA 45 F5 | 	or	result1, ##164626432
22020     44 00 00 FF 
22024     D8 E5 05 F1 | 	add	objptr, ##35288
22028     F2 FA 61 FC | 	wrlong	result1, objptr
2202c     44 00 00 FF 
22030     D8 E5 85 F1 | 	sub	objptr, ##35288
22034     F2 FA 01 F6 | 	mov	result1, objptr
22038     00 F0 04 FF 
2203c     00 FA 45 F5 | 	or	result1, ##165675008
22040     44 00 00 FF 
22044     D4 E5 05 F1 | 	add	objptr, ##35284
22048     F2 FA 61 FC | 	wrlong	result1, objptr
2204c     44 00 00 FF 
22050     D4 E5 85 F1 | 	sub	objptr, ##35284
22054     F2 FA 01 F6 | 	mov	result1, objptr
22058     00 F8 04 FF 
2205c     00 FA 45 F5 | 	or	result1, ##166723584
22060     44 00 00 FF 
22064     90 E5 05 F1 | 	add	objptr, ##35216
22068     F2 FA 61 FC | 	wrlong	result1, objptr
2206c     44 00 00 FF 
22070     90 E5 85 F1 | 	sub	objptr, ##35216
22074     F2 FA 01 F6 | 	mov	result1, objptr
22078     00 00 05 FF 
2207c     00 FA 45 F5 | 	or	result1, ##167772160
22080     44 00 00 FF 
22084     80 E5 05 F1 | 	add	objptr, ##35200
22088     F2 FA 61 FC | 	wrlong	result1, objptr
2208c     44 00 00 FF 
22090     80 E5 85 F1 | 	sub	objptr, ##35200
22094     F2 FA 01 F6 | 	mov	result1, objptr
22098     00 08 05 FF 
2209c     00 FA 45 F5 | 	or	result1, ##168820736
220a0     44 00 00 FF 
220a4     BC E5 05 F1 | 	add	objptr, ##35260
220a8     F2 FA 61 FC | 	wrlong	result1, objptr
220ac     44 00 00 FF 
220b0     BC E5 85 F1 | 	sub	objptr, ##35260
220b4     F2 FA 01 F6 | 	mov	result1, objptr
220b8     00 10 05 FF 
220bc     00 FA 45 F5 | 	or	result1, ##169869312
220c0     44 00 00 FF 
220c4     C0 E5 05 F1 | 	add	objptr, ##35264
220c8     F2 FA 61 FC | 	wrlong	result1, objptr
220cc     44 00 00 FF 
220d0     C0 E5 85 F1 | 	sub	objptr, ##35264
220d4     F2 FA 01 F6 | 	mov	result1, objptr
220d8     00 18 05 FF 
220dc     00 FA 45 F5 | 	or	result1, ##170917888
220e0     44 00 00 FF 
220e4     C4 E5 05 F1 | 	add	objptr, ##35268
220e8     F2 FA 61 FC | 	wrlong	result1, objptr
220ec     44 00 00 FF 
220f0     C4 E5 85 F1 | 	sub	objptr, ##35268
220f4     F2 FA 01 F6 | 	mov	result1, objptr
220f8     00 20 05 FF 
220fc     00 FA 45 F5 | 	or	result1, ##171966464
22100     44 00 00 FF 
22104     C8 E5 05 F1 | 	add	objptr, ##35272
22108     F2 FA 61 FC | 	wrlong	result1, objptr
2210c     44 00 00 FF 
22110     C8 E5 85 F1 | 	sub	objptr, ##35272
22114     F2 FA 01 F6 | 	mov	result1, objptr
22118     00 28 05 FF 
2211c     00 FA 45 F5 | 	or	result1, ##173015040
22120     44 00 00 FF 
22124     CC E5 05 F1 | 	add	objptr, ##35276
22128     F2 FA 61 FC | 	wrlong	result1, objptr
2212c     44 00 00 FF 
22130     CC E5 85 F1 | 	sub	objptr, ##35276
22134     F2 FA 01 F6 | 	mov	result1, objptr
22138     00 30 05 FF 
2213c     00 FA 45 F5 | 	or	result1, ##174063616
22140     44 00 00 FF 
22144     E4 E5 05 F1 | 	add	objptr, ##35300
22148     F2 FA 61 FC | 	wrlong	result1, objptr
2214c     44 00 00 FF 
22150     E4 E5 85 F1 | 	sub	objptr, ##35300
22154     F2 FA 01 F6 | 	mov	result1, objptr
22158     00 38 05 FF 
2215c     00 FA 45 F5 | 	or	result1, ##175112192
22160     44 00 00 FF 
22164     D0 E5 05 F1 | 	add	objptr, ##35280
22168     F2 FA 61 FC | 	wrlong	result1, objptr
2216c     44 00 00 FF 
22170     D0 E5 85 F1 | 	sub	objptr, ##35280
22174     F2 FA 01 F6 | 	mov	result1, objptr
22178     00 40 05 FF 
2217c     00 FA 45 F5 | 	or	result1, ##176160768
22180     44 00 00 FF 
22184     DC E5 05 F1 | 	add	objptr, ##35292
22188     F2 FA 61 FC | 	wrlong	result1, objptr
2218c     44 00 00 FF 
22190     DC E5 85 F1 | 	sub	objptr, ##35292
22194     F2 FA 01 F6 | 	mov	result1, objptr
22198     00 48 05 FF 
2219c     00 FA 45 F5 | 	or	result1, ##177209344
221a0     44 00 00 FF 
221a4     E0 E5 05 F1 | 	add	objptr, ##35296
221a8     F2 FA 61 FC | 	wrlong	result1, objptr
221ac     44 00 00 FF 
221b0     E0 E5 85 F1 | 	sub	objptr, ##35296
221b4     F2 FA 01 F6 | 	mov	result1, objptr
221b8     00 50 05 FF 
221bc     00 FA 45 F5 | 	or	result1, ##178257920
221c0     44 00 00 FF 
221c4     E8 E5 05 F1 | 	add	objptr, ##35304
221c8     F2 FA 61 FC | 	wrlong	result1, objptr
221cc     44 00 00 FF 
221d0     E8 E5 85 F1 | 	sub	objptr, ##35304
221d4     F2 FA 01 F6 | 	mov	result1, objptr
221d8     00 58 05 FF 
221dc     00 FA 45 F5 | 	or	result1, ##179306496
221e0     44 00 00 FF 
221e4     EC E5 05 F1 | 	add	objptr, ##35308
221e8     F2 FA 61 FC | 	wrlong	result1, objptr
221ec     44 00 00 FF 
221f0     EC E5 85 F1 | 	sub	objptr, ##35308
221f4     F2 FA 01 F6 | 	mov	result1, objptr
221f8     00 60 05 FF 
221fc     00 FA 45 F5 | 	or	result1, ##180355072
22200     44 00 00 FF 
22204     04 E5 05 F1 | 	add	objptr, ##35076
22208     F2 FA 61 FC | 	wrlong	result1, objptr
2220c     93 01 00 FF 
22210     F1 91 06 F6 | 	mov	muldivb_, ##@LR__5702
22214     98 E5 05 F1 | 	add	objptr, #408
22218     F2 90 62 FC | 	wrlong	muldivb_, objptr
2221c     93 01 00 FF 
22220     F2 91 06 F6 | 	mov	muldivb_, ##@LR__5703
22224     04 E4 05 F1 | 	add	objptr, #4
22228     F2 90 62 FC | 	wrlong	muldivb_, objptr
2222c     94 01 00 FF 
22230     16 90 06 F6 | 	mov	muldivb_, ##@LR__5704
22234     04 E4 05 F1 | 	add	objptr, #4
22238     F2 90 62 FC | 	wrlong	muldivb_, objptr
2223c     94 01 00 FF 
22240     36 90 06 F6 | 	mov	muldivb_, ##@LR__5705
22244     04 E4 05 F1 | 	add	objptr, #4
22248     F2 90 62 FC | 	wrlong	muldivb_, objptr
2224c     94 01 00 FF 
22250     4F 90 06 F6 | 	mov	muldivb_, ##@LR__5706
22254     04 E4 05 F1 | 	add	objptr, #4
22258     F2 90 62 FC | 	wrlong	muldivb_, objptr
2225c     94 01 00 FF 
22260     6A 90 06 F6 | 	mov	muldivb_, ##@LR__5707
22264     04 E4 05 F1 | 	add	objptr, #4
22268     F2 90 62 FC | 	wrlong	muldivb_, objptr
2226c     94 01 00 FF 
22270     8B 90 06 F6 | 	mov	muldivb_, ##@LR__5708
22274     04 E4 05 F1 | 	add	objptr, #4
22278     F2 90 62 FC | 	wrlong	muldivb_, objptr
2227c     94 01 00 FF 
22280     B8 90 06 F6 | 	mov	muldivb_, ##@LR__5709
22284     04 E4 05 F1 | 	add	objptr, #4
22288     F2 90 62 FC | 	wrlong	muldivb_, objptr
2228c     94 01 00 FF 
22290     E2 90 06 F6 | 	mov	muldivb_, ##@LR__5710
22294     04 E4 05 F1 | 	add	objptr, #4
22298     F2 90 62 FC | 	wrlong	muldivb_, objptr
2229c     94 01 00 FF 
222a0     FA 90 06 F6 | 	mov	muldivb_, ##@LR__5711
222a4     04 E4 05 F1 | 	add	objptr, #4
222a8     F2 90 62 FC | 	wrlong	muldivb_, objptr
222ac     94 01 00 FF 
222b0     1A 91 06 F6 | 	mov	muldivb_, ##@LR__5712
222b4     04 E4 05 F1 | 	add	objptr, #4
222b8     F2 90 62 FC | 	wrlong	muldivb_, objptr
222bc     94 01 00 FF 
222c0     30 91 06 F6 | 	mov	muldivb_, ##@LR__5713
222c4     04 E4 05 F1 | 	add	objptr, #4
222c8     F2 90 62 FC | 	wrlong	muldivb_, objptr
222cc     94 01 00 FF 
222d0     4D 91 06 F6 | 	mov	muldivb_, ##@LR__5714
222d4     04 E4 05 F1 | 	add	objptr, #4
222d8     F2 90 62 FC | 	wrlong	muldivb_, objptr
222dc     94 01 00 FF 
222e0     70 91 06 F6 | 	mov	muldivb_, ##@LR__5715
222e4     04 E4 05 F1 | 	add	objptr, #4
222e8     F2 90 62 FC | 	wrlong	muldivb_, objptr
222ec     94 01 00 FF 
222f0     96 91 06 F6 | 	mov	muldivb_, ##@LR__5716
222f4     04 E4 05 F1 | 	add	objptr, #4
222f8     F2 90 62 FC | 	wrlong	muldivb_, objptr
222fc     94 01 00 FF 
22300     B1 91 06 F6 | 	mov	muldivb_, ##@LR__5717
22304     04 E4 05 F1 | 	add	objptr, #4
22308     F2 90 62 FC | 	wrlong	muldivb_, objptr
2230c     94 01 00 FF 
22310     C1 91 06 F6 | 	mov	muldivb_, ##@LR__5718
22314     04 E4 05 F1 | 	add	objptr, #4
22318     F2 90 62 FC | 	wrlong	muldivb_, objptr
2231c     94 01 00 FF 
22320     D0 91 06 F6 | 	mov	muldivb_, ##@LR__5719
22324     04 E4 05 F1 | 	add	objptr, #4
22328     F2 90 62 FC | 	wrlong	muldivb_, objptr
2232c     94 01 00 FF 
22330     EA 91 06 F6 | 	mov	muldivb_, ##@LR__5720
22334     04 E4 05 F1 | 	add	objptr, #4
22338     F2 90 62 FC | 	wrlong	muldivb_, objptr
2233c     94 01 00 FF 
22340     FB 91 06 F6 | 	mov	muldivb_, ##@LR__5721
22344     04 E4 05 F1 | 	add	objptr, #4
22348     F2 90 62 FC | 	wrlong	muldivb_, objptr
2234c     95 01 00 FF 
22350     12 90 06 F6 | 	mov	muldivb_, ##@LR__5722
22354     04 E4 05 F1 | 	add	objptr, #4
22358     F2 90 62 FC | 	wrlong	muldivb_, objptr
2235c     95 01 00 FF 
22360     25 90 06 F6 | 	mov	muldivb_, ##@LR__5723
22364     04 E4 05 F1 | 	add	objptr, #4
22368     F2 90 62 FC | 	wrlong	muldivb_, objptr
2236c     95 01 00 FF 
22370     34 90 06 F6 | 	mov	muldivb_, ##@LR__5724
22374     04 E4 05 F1 | 	add	objptr, #4
22378     F2 90 62 FC | 	wrlong	muldivb_, objptr
2237c     95 01 00 FF 
22380     50 90 06 F6 | 	mov	muldivb_, ##@LR__5725
22384     04 E4 05 F1 | 	add	objptr, #4
22388     F2 90 62 FC | 	wrlong	muldivb_, objptr
2238c     95 01 00 FF 
22390     60 90 06 F6 | 	mov	muldivb_, ##@LR__5726
22394     04 E4 05 F1 | 	add	objptr, #4
22398     F2 90 62 FC | 	wrlong	muldivb_, objptr
2239c     95 01 00 FF 
223a0     70 90 06 F6 | 	mov	muldivb_, ##@LR__5727
223a4     04 E4 05 F1 | 	add	objptr, #4
223a8     F2 90 62 FC | 	wrlong	muldivb_, objptr
223ac     95 01 00 FF 
223b0     A3 90 06 F6 | 	mov	muldivb_, ##@LR__5728
223b4     04 E4 05 F1 | 	add	objptr, #4
223b8     F2 90 62 FC | 	wrlong	muldivb_, objptr
223bc     95 01 00 FF 
223c0     BE 90 06 F6 | 	mov	muldivb_, ##@LR__5729
223c4     04 E4 05 F1 | 	add	objptr, #4
223c8     F2 90 62 FC | 	wrlong	muldivb_, objptr
223cc     95 01 00 FF 
223d0     D3 90 06 F6 | 	mov	muldivb_, ##@LR__5730
223d4     04 E4 05 F1 | 	add	objptr, #4
223d8     F2 90 62 FC | 	wrlong	muldivb_, objptr
223dc     95 01 00 FF 
223e0     DF 90 06 F6 | 	mov	muldivb_, ##@LR__5731
223e4     04 E4 05 F1 | 	add	objptr, #4
223e8     F2 90 62 FC | 	wrlong	muldivb_, objptr
223ec     95 01 00 FF 
223f0     F0 90 06 F6 | 	mov	muldivb_, ##@LR__5732
223f4     04 E4 05 F1 | 	add	objptr, #4
223f8     F2 90 62 FC | 	wrlong	muldivb_, objptr
223fc     95 01 00 FF 
22400     00 91 06 F6 | 	mov	muldivb_, ##@LR__5733
22404     04 E4 05 F1 | 	add	objptr, #4
22408     F2 90 62 FC | 	wrlong	muldivb_, objptr
2240c     95 01 00 FF 
22410     1B 91 06 F6 | 	mov	muldivb_, ##@LR__5734
22414     04 E4 05 F1 | 	add	objptr, #4
22418     F2 90 62 FC | 	wrlong	muldivb_, objptr
2241c     95 01 00 FF 
22420     2B 91 06 F6 | 	mov	muldivb_, ##@LR__5735
22424     04 E4 05 F1 | 	add	objptr, #4
22428     F2 90 62 FC | 	wrlong	muldivb_, objptr
2242c     95 01 00 FF 
22430     39 91 06 F6 | 	mov	muldivb_, ##@LR__5736
22434     04 E4 05 F1 | 	add	objptr, #4
22438     F2 90 62 FC | 	wrlong	muldivb_, objptr
2243c     95 01 00 FF 
22440     53 91 06 F6 | 	mov	muldivb_, ##@LR__5737
22444     04 E4 05 F1 | 	add	objptr, #4
22448     F2 90 62 FC | 	wrlong	muldivb_, objptr
2244c     95 01 00 FF 
22450     86 91 06 F6 | 	mov	muldivb_, ##@LR__5738
22454     04 E4 05 F1 | 	add	objptr, #4
22458     F2 90 62 FC | 	wrlong	muldivb_, objptr
2245c     95 01 00 FF 
22460     9E 91 06 F6 | 	mov	muldivb_, ##@LR__5739
22464     04 E4 05 F1 | 	add	objptr, #4
22468     F2 90 62 FC | 	wrlong	muldivb_, objptr
2246c     95 01 00 FF 
22470     B9 91 06 F6 | 	mov	muldivb_, ##@LR__5740
22474     04 E4 05 F1 | 	add	objptr, #4
22478     F2 90 62 FC | 	wrlong	muldivb_, objptr
2247c     95 01 00 FF 
22480     D6 91 06 F6 | 	mov	muldivb_, ##@LR__5741
22484     04 E4 05 F1 | 	add	objptr, #4
22488     F2 90 62 FC | 	wrlong	muldivb_, objptr
2248c     95 01 00 FF 
22490     EF 91 06 F6 | 	mov	muldivb_, ##@LR__5742
22494     04 E4 05 F1 | 	add	objptr, #4
22498     F2 90 62 FC | 	wrlong	muldivb_, objptr
2249c     96 01 00 FF 
224a0     0E 90 06 F6 | 	mov	muldivb_, ##@LR__5743
224a4     04 E4 05 F1 | 	add	objptr, #4
224a8     F2 90 62 FC | 	wrlong	muldivb_, objptr
224ac     96 01 00 FF 
224b0     1C 90 06 F6 | 	mov	muldivb_, ##@LR__5744
224b4     04 E4 05 F1 | 	add	objptr, #4
224b8     F2 90 62 FC | 	wrlong	muldivb_, objptr
224bc     96 01 00 FF 
224c0     49 90 06 F6 | 	mov	muldivb_, ##@LR__5745
224c4     04 E4 05 F1 | 	add	objptr, #4
224c8     F2 90 62 FC | 	wrlong	muldivb_, objptr
224cc     96 01 00 FF 
224d0     56 90 06 F6 | 	mov	muldivb_, ##@LR__5746
224d4     04 E4 05 F1 | 	add	objptr, #4
224d8     F2 90 62 FC | 	wrlong	muldivb_, objptr
224dc     96 01 00 FF 
224e0     6A 90 06 F6 | 	mov	muldivb_, ##@LR__5747
224e4     04 E4 05 F1 | 	add	objptr, #4
224e8     F2 90 62 FC | 	wrlong	muldivb_, objptr
224ec     96 01 00 FF 
224f0     8E 90 06 F6 | 	mov	muldivb_, ##@LR__5748
224f4     04 E4 05 F1 | 	add	objptr, #4
224f8     F2 90 62 FC | 	wrlong	muldivb_, objptr
224fc     96 01 00 FF 
22500     A5 90 06 F6 | 	mov	muldivb_, ##@LR__5749
22504     04 E4 05 F1 | 	add	objptr, #4
22508     F2 90 62 FC | 	wrlong	muldivb_, objptr
2250c     96 01 00 FF 
22510     B8 90 06 F6 | 	mov	muldivb_, ##@LR__5750
22514     04 E4 05 F1 | 	add	objptr, #4
22518     F2 90 62 FC | 	wrlong	muldivb_, objptr
2251c     96 01 00 FF 
22520     CF 90 06 F6 | 	mov	muldivb_, ##@LR__5751
22524     04 E4 05 F1 | 	add	objptr, #4
22528     F2 90 62 FC | 	wrlong	muldivb_, objptr
2252c     96 01 00 FF 
22530     E8 90 06 F6 | 	mov	muldivb_, ##@LR__5752
22534     04 E4 05 F1 | 	add	objptr, #4
22538     F2 90 62 FC | 	wrlong	muldivb_, objptr
2253c     96 01 00 FF 
22540     0A 91 06 F6 | 	mov	muldivb_, ##@LR__5753
22544     04 E4 05 F1 | 	add	objptr, #4
22548     F2 90 62 FC | 	wrlong	muldivb_, objptr
2254c     96 01 00 FF 
22550     1D 91 06 F6 | 	mov	muldivb_, ##@LR__5754
22554     04 E4 05 F1 | 	add	objptr, #4
22558     F2 90 62 FC | 	wrlong	muldivb_, objptr
2255c     96 01 00 FF 
22560     2D 91 06 F6 | 	mov	muldivb_, ##@LR__5755
22564     04 E4 05 F1 | 	add	objptr, #4
22568     F2 90 62 FC | 	wrlong	muldivb_, objptr
2256c     96 01 00 FF 
22570     45 91 06 F6 | 	mov	muldivb_, ##@LR__5756
22574     04 E4 05 F1 | 	add	objptr, #4
22578     F2 90 62 FC | 	wrlong	muldivb_, objptr
2257c     96 01 00 FF 
22580     5C 59 06 F6 | 	mov	local26, ##@LR__5757
22584     04 E4 05 F1 | 	add	objptr, #4
22588     F2 58 62 FC | 	wrlong	local26, objptr
2258c     45 00 00 FF 
22590     78 E5 85 F1 | 	sub	objptr, ##35704
22594     F4 CD BF FD | 	call	#_init_audio
22598     54 34 BF FD | 	call	#_do_new
2259c     37 00 00 FF 
225a0     5C E4 05 F1 | 	add	objptr, ##28252
225a4     F2 12 02 FB | 	rdlong	arg01, objptr
225a8     04 E4 85 F1 | 	sub	objptr, #4
225ac     F2 14 02 FB | 	rdlong	arg02, objptr
225b0     37 00 00 FF 
225b4     58 E4 85 F1 | 	sub	objptr, ##28248
225b8     74 15 B0 FD | 	call	#_hg010b_spin2_cls
225bc     37 00 00 FF 
225c0     60 E4 05 F1 | 	add	objptr, ##28256
225c4     F2 12 02 FB | 	rdlong	arg01, objptr
225c8     37 00 00 FF 
225cc     60 E4 85 F1 | 	sub	objptr, ##28256
225d0     C0 13 B0 FD | 	call	#_hg010b_spin2_setfontfamily
225d4                 | ' 
225d4                 | ' leading_spaces:=amount
225d4     01 00 00 FF 
225d8     B6 E4 05 F1 | 	add	objptr, ##694
225dc     F2 04 68 FC | 	wrlong	#2, objptr
225e0     01 00 00 FF 
225e4     B6 E4 85 F1 | 	sub	objptr, ##694
225e8     96 01 00 FF 
225ec     7F 5B 06 F6 | 	mov	local27, ##@LR__5762
225f0     28 12 06 F6 | 	mov	arg01, #40
225f4     74 5B B0 FD | 	call	#__system___gc_alloc_managed
225f8     FD 5C 02 F6 | 	mov	local28, result1
225fc     3D 16 06 F6 | 	mov	arg03, #61
22600     00 18 06 F6 | 	mov	arg04, #0
22604     01 12 06 F6 | 	mov	arg01, #1
22608     00 14 06 F6 | 	mov	arg02, #0
2260c     D4 44 B0 FD | 	call	#__system___int64_shl
22610     FD 5E 02 F6 | 	mov	local29, result1
22614     FE 60 02 F6 | 	mov	local30, result2
22618     3C 16 06 F6 | 	mov	arg03, #60
2261c     00 18 06 F6 | 	mov	arg04, #0
22620     01 12 06 F6 | 	mov	arg01, #1
22624     00 14 06 F6 | 	mov	arg02, #0
22628     B8 44 B0 FD | 	call	#__system___int64_shl
2262c     FD 5E 42 F5 | 	or	local29, result1
22630     FE 60 42 F5 | 	or	local30, result2
22634     3B 16 06 F6 | 	mov	arg03, #59
22638     00 18 06 F6 | 	mov	arg04, #0
2263c     01 12 06 F6 | 	mov	arg01, #1
22640     00 14 06 F6 | 	mov	arg02, #0
22644     9C 44 B0 FD | 	call	#__system___int64_shl
22648     FD 5E 42 F5 | 	or	local29, result1
2264c     FE 60 42 F5 | 	or	local30, result2
22650     3A 16 06 F6 | 	mov	arg03, #58
22654     00 18 06 F6 | 	mov	arg04, #0
22658     01 12 06 F6 | 	mov	arg01, #1
2265c     00 14 06 F6 | 	mov	arg02, #0
22660     80 44 B0 FD | 	call	#__system___int64_shl
22664     30 15 02 F6 | 	mov	arg02, local30
22668     FD 5E 42 F5 | 	or	local29, result1
2266c     0A FD 41 F5 | 	or	result2, arg02
22670     2F FB 01 F6 | 	mov	result1, local29
22674     FD 26 02 F6 | 	mov	local01, result1
22678     FE 28 02 F6 | 	mov	local02, result2
2267c     13 13 02 F6 | 	mov	arg01, local01
22680     14 15 02 F6 | 	mov	arg02, local02
22684     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22688     F3 60 02 FB | 	rdlong	local30, ptr___system__dat__
2268c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
22690     30 13 CA F7 | 	test	arg01, local30 wz
22694     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
22698     F3 60 02 AB |  if_e	rdlong	local30, ptr___system__dat__
2269c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
226a0     30 15 CA A7 |  if_e	test	arg02, local30 wz
226a4     00 FA 05 56 |  if_ne	mov	result1, #0
226a8     14 E6 05 A1 |  if_e	add	ptr___system__dat__, #20
226ac     F3 60 02 AB |  if_e	rdlong	local30, ptr___system__dat__
226b0     09 61 42 A5 |  if_e	or	local30, arg01
226b4     F3 60 62 AC |  if_e	wrlong	local30, ptr___system__dat__
226b8     04 E6 05 A1 |  if_e	add	ptr___system__dat__, #4
226bc     F3 60 02 AB |  if_e	rdlong	local30, ptr___system__dat__
226c0     0A 61 42 A5 |  if_e	or	local30, arg02
226c4     F3 60 62 AC |  if_e	wrlong	local30, ptr___system__dat__
226c8     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
226cc     01 FA 65 A6 |  if_e	neg	result1, #1
226d0     00 FA 0D F2 | 	cmp	result1, #0 wz
226d4     1C 00 90 5D |  if_ne	jmp	#LR__2696
226d8     2E 13 02 F6 | 	mov	arg01, local28
226dc     C0 5B B0 FD | 	call	#__system___gc_free
226e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
226e4     F3 2C 68 FC | 	wrlong	#22, ptr___system__dat__
226e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
226ec     00 FA 05 F6 | 	mov	result1, #0
226f0     C4 01 90 FD | 	jmp	#LR__2700
226f4                 | LR__2696
226f4     13 63 02 F6 | 	mov	local31, local01
226f8     14 1B 02 F6 | 	mov	arg05, local02
226fc     20 5C 06 F1 | 	add	local28, #32
22700     2E 63 62 FC | 	wrlong	local31, local28
22704     04 5C 06 F1 | 	add	local28, #4
22708     2E 1B 62 FC | 	wrlong	arg05, local28
2270c     24 5C 86 F1 | 	sub	local28, #36
22710     00 12 06 F6 | 	mov	arg01, #0
22714     F2 62 02 F6 | 	mov	local31, objptr
22718     2E E5 01 F6 | 	mov	objptr, local28
2271c     F2 7A 68 FC | 	wrlong	#61, objptr
22720     04 E4 05 F1 | 	add	objptr, #4
22724     F2 78 68 FC | 	wrlong	#60, objptr
22728     04 E4 05 F1 | 	add	objptr, #4
2272c     F2 76 68 FC | 	wrlong	#59, objptr
22730     04 E4 05 F1 | 	add	objptr, #4
22734     F2 74 68 FC | 	wrlong	#58, objptr
22738                 | '     _pin_clk = pclk;
22738                 | '     _pin_ss = pss;
22738                 | '     _pin_di = pdi;
22738                 | '     _pin_do = pdo;
22738                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
22738                 | '     return 0;
22738     2E E5 01 F6 | 	mov	objptr, local28
2273c     9C 7E B0 FD | 	call	#_sdmm_cc_disk_initialize
22740     31 E5 01 F6 | 	mov	objptr, local31
22744     FD 62 E2 F8 | 	getbyte	local31, result1, #0
22748     00 62 0E F2 | 	cmp	local31, #0 wz
2274c     44 01 90 5D |  if_ne	jmp	#LR__2699
22750     F3 64 02 F6 | 	mov	local32, ptr___system__dat__
22754     02 00 00 FF 
22758     2C 65 06 F1 | 	add	local32, ##1324
2275c     00 66 06 F6 | 	mov	local33, #0
22760     97 10 48 FB | 	callpa	#(@LR__2698-@LR__2697)>>2,fcache_load_ptr_
22764                 | LR__2697
22764     0A 66 56 F2 | 	cmps	local33, #10 wc
22768     34 66 06 CD |  if_b	qmul	local33, #52
2276c     18 68 62 CD |  if_b	getqx	local34
22770     32 69 02 C1 |  if_b	add	local34, local32
22774     08 68 06 C1 |  if_b	add	local34, #8
22778     34 13 0A CB |  if_b	rdlong	arg01, local34 wz
2277c     01 66 06 41 |  if_c_and_nz	add	local33, #1
22780     E0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2697
22784                 | LR__2698
22784     0A 66 0E F2 | 	cmp	local33, #10 wz
22788     01 FA 65 A6 |  if_e	neg	result1, #1
2278c     33 FB 01 56 |  if_ne	mov	result1, local33
22790     FD 68 02 F6 | 	mov	local34, result1
22794     00 68 56 F2 | 	cmps	local34, #0 wc
22798     34 68 06 3D |  if_ae	qmul	local34, #52
2279c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
227a0     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
227a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
227a8     00 FA 05 C6 |  if_b	mov	result1, #0
227ac     F3 68 02 36 |  if_ae	mov	local34, ptr___system__dat__
227b0     02 00 00 3F 
227b4     2C 69 06 31 |  if_ae	add	local34, ##1324
227b8     18 FA 61 3D |  if_ae	getqx	result1
227bc     34 FB 01 31 |  if_ae	add	result1, local34
227c0     FD 68 0A F6 | 	mov	local34, result1 wz
227c4     CC 00 90 AD |  if_e	jmp	#LR__2699
227c8     04 68 06 F1 | 	add	local34, #4
227cc     34 05 58 FC | 	wrword	#2, local34
227d0     02 68 06 F1 | 	add	local34, #2
227d4     34 01 58 FC | 	wrword	#0, local34
227d8     02 68 06 F1 | 	add	local34, #2
227dc     40 00 80 FF 
227e0     34 07 68 FC | 	wrlong	##32771, local34
227e4     2E FB 01 F6 | 	mov	result1, local28
227e8     00 68 06 FF 
227ec     00 FA 45 F5 | 	or	result1, ##214958080
227f0     0C 68 06 F1 | 	add	local34, #12
227f4     34 FB 61 FC | 	wrlong	result1, local34
227f8     2E FB 01 F6 | 	mov	result1, local28
227fc     00 70 06 FF 
22800     00 FA 45 F5 | 	or	result1, ##216006656
22804     04 68 06 F1 | 	add	local34, #4
22808     34 FB 61 FC | 	wrlong	result1, local34
2280c     2E FB 01 F6 | 	mov	result1, local28
22810     00 78 06 FF 
22814     00 FA 45 F5 | 	or	result1, ##217055232
22818     0C 68 06 F1 | 	add	local34, #12
2281c     34 FB 61 FC | 	wrlong	result1, local34
22820     2E FB 01 F6 | 	mov	result1, local28
22824     00 80 06 FF 
22828     00 FA 45 F5 | 	or	result1, ##218103808
2282c     04 68 06 F1 | 	add	local34, #4
22830     34 FB 61 FC | 	wrlong	result1, local34
22834     2E FB 01 F6 | 	mov	result1, local28
22838     00 88 06 FF 
2283c     00 FA 45 F5 | 	or	result1, ##219152384
22840     04 68 06 F1 | 	add	local34, #4
22844     34 FB 61 FC | 	wrlong	result1, local34
22848     2E FB 01 F6 | 	mov	result1, local28
2284c     00 90 06 FF 
22850     00 FA 45 F5 | 	or	result1, ##220200960
22854     04 68 06 F1 | 	add	local34, #4
22858     34 FB 61 FC | 	wrlong	result1, local34
2285c     2E FB 01 F6 | 	mov	result1, local28
22860     00 98 06 FF 
22864     00 FA 45 F5 | 	or	result1, ##221249536
22868     14 68 86 F1 | 	sub	local34, #20
2286c     34 FB 61 FC | 	wrlong	result1, local34
22870     00 A0 06 FF 
22874     00 14 06 F6 | 	mov	arg02, ##222298112
22878     00 A0 06 FF 
2287c     00 5C 46 F5 | 	or	local28, ##222298112
22880     04 68 06 F1 | 	add	local34, #4
22884     34 5D 62 FC | 	wrlong	local28, local34
22888     20 68 86 F1 | 	sub	local34, #32
2288c     34 FB 01 F6 | 	mov	result1, local34
22890     24 00 90 FD | 	jmp	#LR__2700
22894                 | LR__2699
22894     13 13 02 F6 | 	mov	arg01, local01
22898     14 15 02 F6 | 	mov	arg02, local02
2289c     AC 42 B0 FD | 	call	#__system___freepins
228a0     2E 13 02 F6 | 	mov	arg01, local28
228a4     F8 59 B0 FD | 	call	#__system___gc_free
228a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
228ac     F3 18 68 FC | 	wrlong	#12, ptr___system__dat__
228b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
228b4     00 FA 05 F6 | 	mov	result1, #0
228b8                 | LR__2700
228b8     FD 68 0A F6 | 	mov	local34, result1 wz
228bc     00 FA 05 A6 |  if_e	mov	result1, #0
228c0     64 02 90 AD |  if_e	jmp	#LR__2704
228c4     34 6B 0A F6 | 	mov	local35, local34 wz
228c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
228cc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
228d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
228d4     01 FA 65 A6 |  if_e	neg	result1, #1
228d8     08 02 90 AD |  if_e	jmp	#LR__2702
228dc     01 00 00 FF 
228e0     14 12 06 F6 | 	mov	arg01, ##532
228e4     84 58 B0 FD | 	call	#__system___gc_alloc_managed
228e8     FD 6C 02 F6 | 	mov	local36, result1
228ec     01 00 00 FF 
228f0     34 12 06 F6 | 	mov	arg01, ##564
228f4     74 58 B0 FD | 	call	#__system___gc_alloc_managed
228f8     F2 6E 02 F6 | 	mov	local37, objptr
228fc     36 E5 01 F6 | 	mov	objptr, local36
22900     01 00 00 FF 
22904     10 E4 05 F1 | 	add	objptr, ##528
22908     F2 6A 62 FC | 	wrlong	local35, objptr
2290c                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/diskio.cc"
2290c                 | ' 
2290c                 | ' 
2290c                 | ' vfs_file_t *fh;
2290c                 | ' 
2290c                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
2290c                 | '     fh = fhandle;
2290c                 | '     return RES_OK;
2290c     8D 01 00 FF 
22910     86 15 06 F6 | 	mov	arg02, ##@LR__5077
22914     FD 12 02 F6 | 	mov	arg01, result1
22918     00 16 06 F6 | 	mov	arg03, #0
2291c     36 E5 01 F6 | 	mov	objptr, local36
22920     EC C4 B0 FD | 	call	#_fatfs_cc_f_mount
22924     37 E5 01 F6 | 	mov	objptr, local37
22928     FD 12 0A F6 | 	mov	arg01, result1 wz
2292c     18 00 90 AD |  if_e	jmp	#LR__2701
22930     09 13 6A F6 | 	neg	arg01, arg01 wz
22934     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22938     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2293c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22940     00 FA 05 F6 | 	mov	result1, #0
22944     9C 01 90 FD | 	jmp	#LR__2702
22948                 | LR__2701
22948     F2 6E 02 F6 | 	mov	local37, objptr
2294c     36 E5 01 F6 | 	mov	objptr, local36
22950     58 12 06 F6 | 	mov	arg01, #88
22954     14 58 B0 FD | 	call	#__system___gc_alloc_managed
22958     FD 6A 02 F6 | 	mov	local35, result1
2295c     F2 FA 01 F6 | 	mov	result1, objptr
22960     00 D8 05 FF 
22964     00 FA 45 F5 | 	or	result1, ##196083712
22968     35 FB 61 FC | 	wrlong	result1, local35
2296c     F2 FA 01 F6 | 	mov	result1, objptr
22970     00 E0 05 FF 
22974     00 FA 45 F5 | 	or	result1, ##197132288
22978     04 6A 06 F1 | 	add	local35, #4
2297c     35 FB 61 FC | 	wrlong	result1, local35
22980     F2 FA 01 F6 | 	mov	result1, objptr
22984     00 E8 05 FF 
22988     00 FA 45 F5 | 	or	result1, ##198180864
2298c     04 6A 06 F1 | 	add	local35, #4
22990     35 FB 61 FC | 	wrlong	result1, local35
22994     F2 FA 01 F6 | 	mov	result1, objptr
22998     00 F0 05 FF 
2299c     00 FA 45 F5 | 	or	result1, ##199229440
229a0     04 6A 06 F1 | 	add	local35, #4
229a4     35 FB 61 FC | 	wrlong	result1, local35
229a8     F2 FA 01 F6 | 	mov	result1, objptr
229ac     00 F8 05 FF 
229b0     00 FA 45 F5 | 	or	result1, ##200278016
229b4     04 6A 06 F1 | 	add	local35, #4
229b8     35 FB 61 FC | 	wrlong	result1, local35
229bc     F2 FA 01 F6 | 	mov	result1, objptr
229c0     3A FA 25 F4 | 	bith	result1, #58
229c4     04 6A 06 F1 | 	add	local35, #4
229c8     35 FB 61 FC | 	wrlong	result1, local35
229cc     04 6A 06 F1 | 	add	local35, #4
229d0     35 6D 62 FC | 	wrlong	local36, local35
229d4     04 6A 06 F1 | 	add	local35, #4
229d8     35 01 68 FC | 	wrlong	#0, local35
229dc     F2 FA 01 F6 | 	mov	result1, objptr
229e0     00 08 06 FF 
229e4     00 FA 45 F5 | 	or	result1, ##202375168
229e8     04 6A 06 F1 | 	add	local35, #4
229ec     35 FB 61 FC | 	wrlong	result1, local35
229f0     F2 FA 01 F6 | 	mov	result1, objptr
229f4     00 10 06 FF 
229f8     00 FA 45 F5 | 	or	result1, ##203423744
229fc     04 6A 06 F1 | 	add	local35, #4
22a00     35 FB 61 FC | 	wrlong	result1, local35
22a04     F2 FA 01 F6 | 	mov	result1, objptr
22a08     00 18 06 FF 
22a0c     00 FA 45 F5 | 	or	result1, ##204472320
22a10     04 6A 06 F1 | 	add	local35, #4
22a14     35 FB 61 FC | 	wrlong	result1, local35
22a18     F2 FA 01 F6 | 	mov	result1, objptr
22a1c     00 20 06 FF 
22a20     00 FA 45 F5 | 	or	result1, ##205520896
22a24     04 6A 06 F1 | 	add	local35, #4
22a28     35 FB 61 FC | 	wrlong	result1, local35
22a2c     F2 FA 01 F6 | 	mov	result1, objptr
22a30     00 28 06 FF 
22a34     00 FA 45 F5 | 	or	result1, ##206569472
22a38     04 6A 06 F1 | 	add	local35, #4
22a3c     35 FB 61 FC | 	wrlong	result1, local35
22a40     F2 FA 01 F6 | 	mov	result1, objptr
22a44     00 30 06 FF 
22a48     00 FA 45 F5 | 	or	result1, ##207618048
22a4c     04 6A 06 F1 | 	add	local35, #4
22a50     35 FB 61 FC | 	wrlong	result1, local35
22a54     F2 FA 01 F6 | 	mov	result1, objptr
22a58     00 38 06 FF 
22a5c     00 FA 45 F5 | 	or	result1, ##208666624
22a60     04 6A 06 F1 | 	add	local35, #4
22a64     35 FB 61 FC | 	wrlong	result1, local35
22a68     F2 FA 01 F6 | 	mov	result1, objptr
22a6c     00 40 06 FF 
22a70     00 FA 45 F5 | 	or	result1, ##209715200
22a74     04 6A 06 F1 | 	add	local35, #4
22a78     35 FB 61 FC | 	wrlong	result1, local35
22a7c     F2 FA 01 F6 | 	mov	result1, objptr
22a80     00 48 06 FF 
22a84     00 FA 45 F5 | 	or	result1, ##210763776
22a88     04 6A 06 F1 | 	add	local35, #4
22a8c     35 FB 61 FC | 	wrlong	result1, local35
22a90     F2 FA 01 F6 | 	mov	result1, objptr
22a94     00 50 06 FF 
22a98     00 FA 45 F5 | 	or	result1, ##211812352
22a9c     04 6A 06 F1 | 	add	local35, #4
22aa0     35 FB 61 FC | 	wrlong	result1, local35
22aa4     F2 FA 01 F6 | 	mov	result1, objptr
22aa8     00 58 06 FF 
22aac     00 FA 45 F5 | 	or	result1, ##212860928
22ab0     04 6A 06 F1 | 	add	local35, #4
22ab4     35 FB 61 FC | 	wrlong	result1, local35
22ab8     00 60 06 FF 
22abc     00 E4 45 F5 | 	or	objptr, ##213909504
22ac0     04 6A 06 F1 | 	add	local35, #4
22ac4     35 E5 61 FC | 	wrlong	objptr, local35
22ac8     04 6A 06 F1 | 	add	local35, #4
22acc     35 01 68 FC | 	wrlong	#0, local35
22ad0     04 6A 06 F1 | 	add	local35, #4
22ad4     35 01 68 FC | 	wrlong	#0, local35
22ad8     54 6A 86 F1 | 	sub	local35, #84
22adc                 | ' 
22adc                 | '     v->close = &v_close;
22adc                 | '     v->read = &v_read;
22adc                 | '     v->write = &v_write;
22adc                 | '     v->lseek = &v_lseek;
22adc                 | '     v->ioctl = &v_ioctl;
22adc                 | '     v->flush = &v_flush;
22adc                 | '     v->vfs_data = ptr;
22adc                 | '     v->reserved = 0;
22adc                 | ' 
22adc                 | '     v->open = &v_open;
22adc                 | '     v->creat = &v_creat;
22adc                 | '     v->opendir = &v_opendir;
22adc                 | '     v->closedir = &v_closedir;
22adc                 | '     v->readdir = &v_readdir;
22adc                 | '     v->stat = &v_stat;
22adc                 | ' 
22adc                 | '     v->mkdir = &v_mkdir;
22adc                 | '     v->rmdir = &v_rmdir;
22adc                 | ' 
22adc                 | '     v->remove = &v_remove;
22adc                 | '     v->rename = &v_rename;
22adc                 | ' 
22adc                 | '     v->init = &v_init;
22adc                 | '     v->deinit = &v_deinit;
22adc                 | ' 
22adc                 | ' 
22adc                 | '     v->getcf = 0;
22adc                 | '     v->putcf = 0;
22adc                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
22adc                 | '     return v;
22adc     35 FB 01 F6 | 	mov	result1, local35
22ae0     37 E5 01 F6 | 	mov	objptr, local37
22ae4                 | LR__2702
22ae4     FD 70 0A F6 | 	mov	local38, result1 wz
22ae8     38 00 90 5D |  if_ne	jmp	#LR__2703
22aec     24 68 06 F1 | 	add	local34, #36
22af0     34 73 02 FB | 	rdlong	local39, local34
22af4     39 6F 02 F6 | 	mov	local37, local39
22af8     24 68 86 F1 | 	sub	local34, #36
22afc     13 6E 46 F7 | 	zerox	local37, #19
22b00     14 72 46 F0 | 	shr	local39, #20
22b04     02 72 66 F0 | 	shl	local39, #2
22b08     ED 72 02 F1 | 	add	local39, __methods__
22b0c     39 73 02 FB | 	rdlong	local39, local39
22b10     34 13 02 F6 | 	mov	arg01, local34
22b14     F2 68 02 F6 | 	mov	local34, objptr
22b18     37 E5 01 F6 | 	mov	objptr, local37
22b1c     2D 72 62 FD | 	call	local39
22b20     34 E5 01 F6 | 	mov	objptr, local34
22b24                 | LR__2703
22b24     38 FB 01 F6 | 	mov	result1, local38
22b28                 | LR__2704
22b28     FD 14 02 F6 | 	mov	arg02, result1
22b2c     2D 75 02 F6 | 	mov	local40, local27
22b30     0A 77 0A F6 | 	mov	local41, arg02 wz
22b34     01 78 66 F6 | 	neg	local42, #1
22b38     7C 02 90 AD |  if_e	jmp	#LR__2719
22b3c     3A FB C1 FA | 	rdbyte	result1, local40
22b40     2F FA 0D F2 | 	cmp	result1, #47 wz
22b44     24 00 90 5D |  if_ne	jmp	#LR__2707
22b48     3A 13 02 F6 | 	mov	arg01, local40
22b4c     09 7B 02 F6 | 	mov	local43, arg01
22b50     97 06 48 FB | 	callpa	#(@LR__2706-@LR__2705)>>2,fcache_load_ptr_
22b54                 | LR__2705
22b54     3D FB C9 FA | 	rdbyte	result1, local43 wz
22b58     01 7A 06 51 |  if_ne	add	local43, #1
22b5c     F4 FF 9F 5D |  if_ne	jmp	#LR__2705
22b60                 | LR__2706
22b60     09 7B 82 F1 | 	sub	local43, arg01
22b64     10 7A 56 F2 | 	cmps	local43, #16 wc
22b68     10 00 90 CD |  if_b	jmp	#LR__2708
22b6c                 | LR__2707
22b6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22b70     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22b74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22b78     3C 02 90 FD | 	jmp	#LR__2719
22b7c                 | LR__2708
22b7c     00 7C 06 F6 | 	mov	local44, #0
22b80                 | LR__2709
22b80     04 7C 56 F2 | 	cmps	local44, #4 wc
22b84     B0 00 90 3D |  if_ae	jmp	#LR__2714
22b88     3E 13 02 F6 | 	mov	arg01, local44
22b8c     02 12 66 F0 | 	shl	arg01, #2
22b90     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
22b94     64 FA 05 F1 | 	add	result1, #100
22b98     FD 12 02 F1 | 	add	arg01, result1
22b9c     09 FB 09 FB | 	rdlong	result1, arg01 wz
22ba0     00 78 56 A2 |  if_e	cmps	local42, #0 wc
22ba4     3E 79 02 86 |  if_c_and_z	mov	local42, local44
22ba8     84 00 90 8D |  if_c_and_z	jmp	#LR__2713
22bac     3E 13 02 F6 | 	mov	arg01, local44
22bb0     02 12 66 F0 | 	shl	arg01, #2
22bb4     F3 7A 02 F6 | 	mov	local43, ptr___system__dat__
22bb8     64 7A 06 F1 | 	add	local43, #100
22bbc     3D 13 02 F1 | 	add	arg01, local43
22bc0     09 13 02 FB | 	rdlong	arg01, arg01
22bc4     09 7B 02 F6 | 	mov	local43, arg01
22bc8     97 06 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
22bcc                 | LR__2710
22bcc     3D FB C9 FA | 	rdbyte	result1, local43 wz
22bd0     01 7A 06 51 |  if_ne	add	local43, #1
22bd4     F4 FF 9F 5D |  if_ne	jmp	#LR__2710
22bd8                 | LR__2711
22bd8     09 7B 82 F1 | 	sub	local43, arg01
22bdc     3D 91 02 F6 | 	mov	muldivb_, local43
22be0     48 13 02 F6 | 	mov	arg01, muldivb_
22be4     3A 13 02 F1 | 	add	arg01, local40
22be8     09 7B C2 FA | 	rdbyte	local43, arg01
22bec     2F 7A 0E F2 | 	cmp	local43, #47 wz
22bf0     48 7F 02 56 |  if_ne	mov	local45, muldivb_
22bf4     3A 7F 02 51 |  if_ne	add	local45, local40
22bf8     3F 13 CA 5A |  if_ne	rdbyte	arg01, local45 wz
22bfc     30 00 90 5D |  if_ne	jmp	#LR__2712
22c00     3E 7B 02 F6 | 	mov	local43, local44
22c04     02 7A 66 F0 | 	shl	local43, #2
22c08     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
22c0c     64 16 06 F1 | 	add	arg03, #100
22c10     0B 7B 02 F1 | 	add	local43, arg03
22c14     3D 15 02 FB | 	rdlong	arg02, local43
22c18     3A 13 02 F6 | 	mov	arg01, local40
22c1c     48 17 02 F6 | 	mov	arg03, muldivb_
22c20     FC 68 B0 FD | 	call	#__system__strncmp
22c24     00 FA 0D F2 | 	cmp	result1, #0 wz
22c28     3E 79 02 A6 |  if_e	mov	local42, local44
22c2c     08 00 90 AD |  if_e	jmp	#LR__2714
22c30                 | LR__2712
22c30                 | LR__2713
22c30     01 7C 06 F1 | 	add	local44, #1
22c34     48 FF 9F FD | 	jmp	#LR__2709
22c38                 | LR__2714
22c38     FF FF 7F FF 
22c3c     FF 79 0E F2 | 	cmp	local42, ##-1 wz
22c40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22c44     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
22c48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22c4c     68 01 90 AD |  if_e	jmp	#LR__2719
22c50     3C 7D 02 F6 | 	mov	local44, local42
22c54     3E 7F 02 F6 | 	mov	local45, local44
22c58     02 7E 66 F0 | 	shl	local45, #2
22c5c     F3 7A 02 F6 | 	mov	local43, ptr___system__dat__
22c60     74 7A 06 F1 | 	add	local43, #116
22c64     3D 7F 02 F1 | 	add	local45, local43
22c68     3F 7B 0A FB | 	rdlong	local43, local45 wz
22c6c     58 00 90 AD |  if_e	jmp	#LR__2715
22c70     4C 7A 06 F1 | 	add	local43, #76
22c74     3D 7F 0A FB | 	rdlong	local45, local43 wz
22c78     4C 7A 86 F1 | 	sub	local43, #76
22c7c     48 00 90 AD |  if_e	jmp	#LR__2715
22c80     4C 7A 06 F1 | 	add	local43, #76
22c84     3D 7F 02 FB | 	rdlong	local45, local43
22c88     3F 7B 02 F6 | 	mov	local43, local45
22c8c     13 7E 46 F7 | 	zerox	local45, #19
22c90     14 7A 46 F0 | 	shr	local43, #20
22c94     02 7A 66 F0 | 	shl	local43, #2
22c98     ED 7A 02 F1 | 	add	local43, __methods__
22c9c     3D 7B 02 FB | 	rdlong	local43, local43
22ca0     3E 71 02 F6 | 	mov	local38, local44
22ca4     02 70 66 F0 | 	shl	local38, #2
22ca8     F3 78 02 F6 | 	mov	local42, ptr___system__dat__
22cac     64 78 06 F1 | 	add	local42, #100
22cb0     3C 71 02 F1 | 	add	local38, local42
22cb4     38 13 02 FB | 	rdlong	arg01, local38
22cb8     F2 78 02 F6 | 	mov	local42, objptr
22cbc     3F E5 01 F6 | 	mov	objptr, local45
22cc0     2D 7A 62 FD | 	call	local43
22cc4     3C E5 01 F6 | 	mov	objptr, local42
22cc8                 | LR__2715
22cc8     3E 7F 02 F6 | 	mov	local45, local44
22ccc     02 7E 66 F0 | 	shl	local45, #2
22cd0     F3 80 02 F6 | 	mov	local46, ptr___system__dat__
22cd4     74 80 06 F1 | 	add	local46, #116
22cd8     40 7F 02 F1 | 	add	local45, local46
22cdc     3F 77 62 FC | 	wrlong	local41, local45
22ce0     00 76 0E F2 | 	cmp	local41, #0 wz
22ce4     02 7C 66 A0 |  if_e	shl	local44, #2
22ce8     F3 80 02 A6 |  if_e	mov	local46, ptr___system__dat__
22cec     64 80 06 A1 |  if_e	add	local46, #100
22cf0     40 7D 02 A1 |  if_e	add	local44, local46
22cf4     3E 01 68 AC |  if_e	wrlong	#0, local44
22cf8     BC 00 90 AD |  if_e	jmp	#LR__2718
22cfc     3E 83 02 F6 | 	mov	local47, local44
22d00     04 82 66 F0 | 	shl	local47, #4
22d04     F3 80 02 F6 | 	mov	local46, ptr___system__dat__
22d08     24 80 06 F1 | 	add	local46, #36
22d0c     40 83 02 F1 | 	add	local47, local46
22d10     41 13 02 F6 | 	mov	arg01, local47
22d14     3A 15 02 F6 | 	mov	arg02, local40
22d18     10 16 06 F6 | 	mov	arg03, #16
22d1c     48 67 B0 FD | 	call	#__system__strncpy
22d20     48 76 06 F1 | 	add	local41, #72
22d24     3B 81 0A FB | 	rdlong	local46, local41 wz
22d28     48 76 86 F1 | 	sub	local41, #72
22d2c     74 00 90 AD |  if_e	jmp	#LR__2717
22d30     48 76 06 F1 | 	add	local41, #72
22d34     3B 7F 02 FB | 	rdlong	local45, local41
22d38     3F 91 02 F6 | 	mov	muldivb_, local45
22d3c     13 7E 46 F7 | 	zerox	local45, #19
22d40     14 90 46 F0 | 	shr	muldivb_, #20
22d44     02 90 66 F0 | 	shl	muldivb_, #2
22d48     ED 90 02 F1 | 	add	muldivb_, __methods__
22d4c     48 91 02 FB | 	rdlong	muldivb_, muldivb_
22d50     41 13 02 F6 | 	mov	arg01, local47
22d54     F2 80 02 F6 | 	mov	local46, objptr
22d58     3F E5 01 F6 | 	mov	objptr, local45
22d5c     2D 90 62 FD | 	call	muldivb_
22d60     40 E5 01 F6 | 	mov	objptr, local46
22d64     FD 12 0A F6 | 	mov	arg01, result1 wz
22d68     38 00 90 AD |  if_e	jmp	#LR__2716
22d6c     3E 83 02 F6 | 	mov	local47, local44
22d70     02 82 66 F0 | 	shl	local47, #2
22d74     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22d78     F3 82 02 F1 | 	add	local47, ptr___system__dat__
22d7c     41 01 68 FC | 	wrlong	#0, local47
22d80     02 7C 66 F0 | 	shl	local44, #2
22d84     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
22d88     F3 7C 02 F1 | 	add	local44, ptr___system__dat__
22d8c     3E 01 68 FC | 	wrlong	#0, local44
22d90     09 13 6A F6 | 	neg	arg01, arg01 wz
22d94     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
22d98     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22d9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22da0     14 00 90 FD | 	jmp	#LR__2719
22da4                 | LR__2716
22da4                 | LR__2717
22da4     02 7C 66 F0 | 	shl	local44, #2
22da8     F3 80 02 F6 | 	mov	local46, ptr___system__dat__
22dac     64 80 06 F1 | 	add	local46, #100
22db0     40 7D 02 F1 | 	add	local44, local46
22db4     3E 83 62 FC | 	wrlong	local47, local44
22db8                 | LR__2718
22db8                 | LR__2719
22db8     96 01 00 FF 
22dbc     83 13 06 F6 | 	mov	arg01, ##@LR__5763
22dc0     50 26 B0 FD | 	call	#__system___chdir
22dc4     96 01 00 FF 
22dc8     8B 5B 06 F6 | 	mov	local27, ##@LR__5764
22dcc     4A 00 00 FF 
22dd0     B4 E4 05 F1 | 	add	objptr, ##38068
22dd4     F2 5A 62 FC | 	wrlong	local27, objptr
22dd8     13 00 00 FF 
22ddc     60 E4 85 F1 | 	sub	objptr, ##9824
22de0     F2 12 02 FB | 	rdlong	arg01, objptr
22de4     37 00 00 FF 
22de8     54 E4 85 F1 | 	sub	objptr, ##28244
22dec     01 12 66 F0 | 	shl	arg01, #1
22df0     01 14 06 F6 | 	mov	arg02, #1
22df4     1C 0C B0 FD | 	call	#_hg010b_spin2_setcursorpos
22df8                 | ' init_commands
22df8                 | ' init_error_strings
22df8                 | ' init_audio
22df8                 | ' do_new
22df8                 | ' cls(ink, paper)
22df8                 | ' v.setfontfamily(font) 				' use ST Mono font
22df8                 | ' v.setleadingspaces(2)
22df8                 | ' mount "/sd", _vfs_open_sdcard()
22df8                 | ' chdir "/sd/bas"
22df8                 | ' currentdir$="/sd/bas"
22df8                 | ' position 2*editor_spaces,1 : print ver$
22df8     00 12 06 F6 | 	mov	arg01, #0
22dfc     94 6D B0 FD | 	call	#__system___getiolock_0622
22e00     FD 12 02 F6 | 	mov	arg01, result1
22e04     A0 22 B0 FD | 	call	#__system___lockmem
22e08     18 00 00 FF 
22e0c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
22e10     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
22e14     18 00 00 FF 
22e18     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
22e1c     00 12 06 F6 | 	mov	arg01, #0
22e20     00 16 06 F6 | 	mov	arg03, #0
22e24     A0 2A B0 FD | 	call	#__system___basic_print_string
22e28     00 12 06 F6 | 	mov	arg01, #0
22e2c     0A 14 06 F6 | 	mov	arg02, #10
22e30     00 16 06 F6 | 	mov	arg03, #0
22e34     38 2A B0 FD | 	call	#__system___basic_print_char
22e38     00 12 06 F6 | 	mov	arg01, #0
22e3c     54 6D B0 FD | 	call	#__system___getiolock_0622
22e40     FD 00 68 FC | 	wrlong	#0, result1
22e44     52 00 00 FF 
22e48     F0 E4 05 F1 | 	add	objptr, ##42224
22e4c     F2 12 02 FB | 	rdlong	arg01, objptr
22e50     0F 00 00 FF 
22e54     74 E4 85 F1 | 	sub	objptr, ##7796
22e58     F2 5A 02 FB | 	rdlong	local27, objptr
22e5c     43 00 00 FF 
22e60     7C E4 85 F1 | 	sub	objptr, ##34428
22e64     2D 13 82 F1 | 	sub	arg01, local27
22e68     00 14 06 F6 | 	mov	arg02, #0
22e6c     0A 16 06 F6 | 	mov	arg03, #10
22e70     48 38 B0 FD | 	call	#__system__Number_S
22e74     FD 12 02 F6 | 	mov	arg01, result1
22e78     96 01 00 FF 
22e7c     93 15 06 F6 | 	mov	arg02, ##@LR__5765
22e80     80 22 B0 FD | 	call	#__system___string_concat
22e84     FD 5A 02 F6 | 	mov	local27, result1
22e88     50 00 00 FF 
22e8c     58 E5 05 F1 | 	add	objptr, ##41304
22e90     F2 5A 62 FC | 	wrlong	local27, objptr
22e94     50 00 00 FF 
22e98     58 E5 85 F1 | 	sub	objptr, ##41304
22e9c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
22e9c     00 12 06 F6 | 	mov	arg01, #0
22ea0     F0 6C B0 FD | 	call	#__system___getiolock_0622
22ea4     FD 12 02 F6 | 	mov	arg01, result1
22ea8     FC 21 B0 FD | 	call	#__system___lockmem
22eac     50 00 00 FF 
22eb0     58 E5 05 F1 | 	add	objptr, ##41304
22eb4     F2 14 02 FB | 	rdlong	arg02, objptr
22eb8     50 00 00 FF 
22ebc     58 E5 85 F1 | 	sub	objptr, ##41304
22ec0     00 12 06 F6 | 	mov	arg01, #0
22ec4     00 16 06 F6 | 	mov	arg03, #0
22ec8     FC 29 B0 FD | 	call	#__system___basic_print_string
22ecc     00 12 06 F6 | 	mov	arg01, #0
22ed0     0A 14 06 F6 | 	mov	arg02, #10
22ed4     00 16 06 F6 | 	mov	arg03, #0
22ed8     94 29 B0 FD | 	call	#__system___basic_print_char
22edc     00 12 06 F6 | 	mov	arg01, #0
22ee0     B0 6C B0 FD | 	call	#__system___getiolock_0622
22ee4     FD 00 68 FC | 	wrlong	#0, result1
22ee8     37 00 00 FF 
22eec     54 E4 05 F1 | 	add	objptr, ##28244
22ef0     F2 12 02 FB | 	rdlong	arg01, objptr
22ef4     37 00 00 FF 
22ef8     54 E4 85 F1 | 	sub	objptr, ##28244
22efc     01 12 66 F0 | 	shl	arg01, #1
22f00     04 14 06 F6 | 	mov	arg02, #4
22f04     0C 0B B0 FD | 	call	#_hg010b_spin2_setcursorpos
22f08                 | ' position 2*editor_spaces,4 : print "Ready"
22f08     00 12 06 F6 | 	mov	arg01, #0
22f0c     84 6C B0 FD | 	call	#__system___getiolock_0622
22f10     FD 12 02 F6 | 	mov	arg01, result1
22f14     90 21 B0 FD | 	call	#__system___lockmem
22f18     96 01 00 FF 
22f1c     A5 15 06 F6 | 	mov	arg02, ##@LR__5766
22f20     00 12 06 F6 | 	mov	arg01, #0
22f24     00 16 06 F6 | 	mov	arg03, #0
22f28     9C 29 B0 FD | 	call	#__system___basic_print_string
22f2c     00 12 06 F6 | 	mov	arg01, #0
22f30     0A 14 06 F6 | 	mov	arg02, #10
22f34     00 16 06 F6 | 	mov	arg03, #0
22f38     34 29 B0 FD | 	call	#__system___basic_print_char
22f3c     00 12 06 F6 | 	mov	arg01, #0
22f40     50 6C B0 FD | 	call	#__system___getiolock_0622
22f44     FD 00 68 FC | 	wrlong	#0, result1
22f48     00 14 06 F6 | 	mov	arg02, #0
22f4c     01 14 D6 F7 | 	test	arg02, #1 wc
22f50     5A 4C 64 FD | 	drvc	#38
22f54     01 14 D6 F7 | 	test	arg02, #1 wc
22f58     5A 4E 64 FD | 	drvc	#39
22f5c     96 01 00 FF 
22f60     AB 5B 06 F6 | 	mov	local27, ##@LR__5767
22f64     52 00 00 FF 
22f68     1C E5 05 F1 | 	add	objptr, ##42268
22f6c     F2 5A 62 FC | 	wrlong	local27, objptr
22f70     04 E4 05 F1 | 	add	objptr, #4
22f74     FF FF FF FF 
22f78     F2 FE 6B FC | 	wrlong	##-1, objptr
22f7c     0C E4 05 F1 | 	add	objptr, #12
22f80     F2 00 68 FC | 	wrlong	#0, objptr
22f84     52 00 00 FF 
22f88     2C E5 85 F1 | 	sub	objptr, ##42284
22f8c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
22f8c                 | ' loadname="noname.bas"
22f8c                 | ' do_insert=-1
22f8c                 | ' inload=0
22f8c                 | ' 
22f8c                 | ' open "/sd/bas/autorun.bas" for input as #9
22f8c     96 01 00 FF 
22f90     B6 15 06 F6 | 	mov	arg02, ##@LR__5768
22f94     09 12 06 F6 | 	mov	arg01, #9
22f98     00 16 06 F6 | 	mov	arg03, #0
22f9c     38 28 B0 FD | 	call	#__system___basic_open_string
22fa0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22fa4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22fa8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
22fac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22fb0     52 00 00 FF 
22fb4     30 E5 05 F1 | 	add	objptr, ##42288
22fb8     F2 FA 61 FC | 	wrlong	result1, objptr
22fbc     52 00 00 FF 
22fc0     30 E5 85 F1 | 	sub	objptr, ##42288
22fc4                 | ' err=geterr()
22fc4                 | ' close #9
22fc4     09 12 06 F6 | 	mov	arg01, #9
22fc8     4C 62 B0 FD | 	call	#__system__close
22fcc                 | ' if err=0 then line$="run autorun.bas" : interpret
22fcc     52 00 00 FF 
22fd0     30 E5 05 F1 | 	add	objptr, ##42288
22fd4     F2 5A 0A FB | 	rdlong	local27, objptr wz
22fd8     52 00 00 FF 
22fdc     30 E5 85 F1 | 	sub	objptr, ##42288
22fe0     96 01 00 AF 
22fe4     CA 5B 06 A6 |  if_e	mov	local27, ##@LR__5769
22fe8     37 00 00 AF 
22fec     3C E4 05 A1 |  if_e	add	objptr, ##28220
22ff0     F2 5A 62 AC |  if_e	wrlong	local27, objptr
22ff4     37 00 00 AF 
22ff8     3C E4 85 A1 |  if_e	sub	objptr, ##28220
22ffc     6C E8 BD AD |  if_e	call	#_interpret
23000                 | ' 
23000                 | ' 
23000                 | ' '-------------------------------------------------------------------------------------------------------- 
23000                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23000                 | ' '--------------------------------------------------------------------------------------------------------
23000                 | ' 
23000                 | ' do
23000                 | LR__2720
23000     00 D8 BD FD | 	call	#_edit
23004     FD 5A 02 F6 | 	mov	local27, result1
23008     37 00 00 FF 
2300c     3C E4 05 F1 | 	add	objptr, ##28220
23010     F2 5A 62 FC | 	wrlong	local27, objptr
23014     37 00 00 FF 
23018     3C E4 85 F1 | 	sub	objptr, ##28220
2301c     4C E8 BD FD | 	call	#_interpret
23020     96 01 00 FF 
23024     DA 5B 06 F6 | 	mov	local27, ##@LR__5770
23028     37 00 00 FF 
2302c     3C E4 05 F1 | 	add	objptr, ##28220
23030     F2 5A 62 FC | 	wrlong	local27, objptr
23034     37 00 00 FF 
23038     3C E4 85 F1 | 	sub	objptr, ##28220
2303c     C0 FF 9F FD | 	jmp	#LR__2720
23040     A7 F0 03 F6 | 	mov	ptra, fp
23044     B2 00 A0 FD | 	call	#popregs_
23048                 | _program_ret
23048     2D 00 64 FD | 	ret
2304c                 | 
2304c                 | ' 
2304c                 | ' pub setcursorshape(shape) | i
2304c                 | _hg010b_spin2_setcursorshape
2304c                 | ' 
2304c                 | ' cursorshape:=shape
2304c     0B 00 00 FF 
23050     C6 E4 05 F1 | 	add	objptr, ##5830
23054     F2 12 62 FC | 	wrlong	arg01, objptr
23058                 | ' repeat i from 0 to (8*cursorshape)-1
23058     00 00 06 F6 | 	mov	_var01, #0
2305c     09 03 02 F6 | 	mov	_var02, arg01
23060     03 02 66 F0 | 	shl	_var02, #3
23064     01 02 86 F1 | 	sub	_var02, #1
23068     00 02 56 F2 | 	cmps	_var02, #0 wc
2306c     01 04 86 F6 | 	negc	_var03, #1
23070     02 07 02 F6 | 	mov	_var04, _var03
23074     02 03 02 F1 | 	add	_var02, _var03
23078     0A 00 00 FF 
2307c     90 E4 85 F1 | 	sub	objptr, ##5264
23080     97 0C 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
23084                 | LR__2730
23084                 | '   cursor[i]:=0
23084     00 05 02 F6 | 	mov	_var03, _var01
23088     F2 04 02 F1 | 	add	_var03, objptr
2308c     02 01 48 FC | 	wrbyte	#0, _var03
23090     03 01 02 F1 | 	add	_var01, _var04
23094     01 01 0A F2 | 	cmp	_var01, _var02 wz
23098     E8 FF 9F 5D |  if_ne	jmp	#LR__2730
2309c                 | LR__2731
2309c                 | ' repeat i from 8*cursorshape to 127
2309c     0A 00 00 FF 
230a0     90 E4 05 F1 | 	add	objptr, ##5264
230a4     F2 06 02 FB | 	rdlong	_var04, objptr
230a8     03 01 02 F6 | 	mov	_var01, _var04
230ac     03 00 66 F0 | 	shl	_var01, #3
230b0     0B 00 00 FF 
230b4     C6 E4 85 F1 | 	sub	objptr, ##5830
230b8     03 06 66 F0 | 	shl	_var04, #3
230bc     80 06 56 F2 | 	cmps	_var04, #128 wc
230c0     01 04 A6 F6 | 	negnc	_var03, #1
230c4     7F 02 06 F6 | 	mov	_var02, #127
230c8     02 03 02 F1 | 	add	_var02, _var03
230cc     97 1A 48 FB | 	callpa	#(@LR__2733-@LR__2732)>>2,fcache_load_ptr_
230d0                 | LR__2732
230d0                 | '   cursor[i]:=cursorcolor
230d0     00 07 02 F6 | 	mov	_var04, _var01
230d4     01 00 00 FF 
230d8     36 E4 05 F1 | 	add	objptr, ##566
230dc     F2 06 02 F1 | 	add	_var04, objptr
230e0     0A 00 00 FF 
230e4     8C E4 05 F1 | 	add	objptr, ##5260
230e8     F2 12 02 FB | 	rdlong	arg01, objptr
230ec     0B 00 00 FF 
230f0     C2 E4 85 F1 | 	sub	objptr, ##5826
230f4     03 13 42 FC | 	wrbyte	arg01, _var04
230f8     02 01 02 F1 | 	add	_var01, _var03
230fc     01 01 0A F2 | 	cmp	_var01, _var02 wz
23100     CC FF 9F 5D |  if_ne	jmp	#LR__2732
23104                 | LR__2733
23104                 | _hg010b_spin2_setcursorshape_ret
23104     2D 00 64 FD | 	ret
23108                 | 
23108                 | ' 
23108                 | ' pub setcursorcolor(color) | i
23108                 | _hg010b_spin2_setcursorcolor
23108                 | ' 
23108                 | ' cursorcolor:=color
23108     0B 00 00 FF 
2310c     C2 E4 05 F1 | 	add	objptr, ##5826
23110     F2 12 62 FC | 	wrlong	arg01, objptr
23114                 | ' repeat i from 0 to (8*cursorshape)-1
23114     00 12 06 F6 | 	mov	arg01, #0
23118     04 E4 05 F1 | 	add	objptr, #4
2311c     F2 00 02 FB | 	rdlong	_var01, objptr
23120     03 00 66 F0 | 	shl	_var01, #3
23124     01 00 86 F1 | 	sub	_var01, #1
23128     00 00 56 F2 | 	cmps	_var01, #0 wc
2312c     01 02 86 F6 | 	negc	_var02, #1
23130     01 05 02 F6 | 	mov	_var03, _var02
23134     01 01 02 F1 | 	add	_var01, _var02
23138     0A 00 00 FF 
2313c     90 E4 85 F1 | 	sub	objptr, ##5264
23140     97 0C 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
23144                 | LR__2740
23144                 | '   cursor[i]:=0
23144     09 03 02 F6 | 	mov	_var02, arg01
23148     F2 02 02 F1 | 	add	_var02, objptr
2314c     01 01 48 FC | 	wrbyte	#0, _var02
23150     02 13 02 F1 | 	add	arg01, _var03
23154     00 13 0A F2 | 	cmp	arg01, _var01 wz
23158     E8 FF 9F 5D |  if_ne	jmp	#LR__2740
2315c                 | LR__2741
2315c                 | ' repeat i from 8*cursorshape to 127
2315c     0A 00 00 FF 
23160     90 E4 05 F1 | 	add	objptr, ##5264
23164     F2 04 02 FB | 	rdlong	_var03, objptr
23168     02 13 02 F6 | 	mov	arg01, _var03
2316c     03 12 66 F0 | 	shl	arg01, #3
23170     0B 00 00 FF 
23174     C6 E4 85 F1 | 	sub	objptr, ##5830
23178     03 04 66 F0 | 	shl	_var03, #3
2317c     80 04 56 F2 | 	cmps	_var03, #128 wc
23180     01 02 A6 F6 | 	negnc	_var02, #1
23184     7F 00 06 F6 | 	mov	_var01, #127
23188     01 01 02 F1 | 	add	_var01, _var02
2318c     97 1A 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
23190                 | LR__2742
23190                 | '   cursor[i]:=cursorcolor
23190     09 05 02 F6 | 	mov	_var03, arg01
23194     01 00 00 FF 
23198     36 E4 05 F1 | 	add	objptr, ##566
2319c     F2 04 02 F1 | 	add	_var03, objptr
231a0     0A 00 00 FF 
231a4     8C E4 05 F1 | 	add	objptr, ##5260
231a8     F2 06 02 FB | 	rdlong	_var04, objptr
231ac     0B 00 00 FF 
231b0     C2 E4 85 F1 | 	sub	objptr, ##5826
231b4     02 07 42 FC | 	wrbyte	_var04, _var03
231b8     01 13 02 F1 | 	add	arg01, _var02
231bc     00 13 0A F2 | 	cmp	arg01, _var01 wz
231c0     CC FF 9F 5D |  if_ne	jmp	#LR__2742
231c4                 | LR__2743
231c4                 | _hg010b_spin2_setcursorcolor_ret
231c4     2D 00 64 FD | 	ret
231c8                 | 
231c8                 | ' 
231c8                 | ' 
231c8                 | ' '****************************************************************************************************************
231c8                 | ' '                                                                        					*
231c8                 | ' '  Graphic primitives                                                    					*
231c8                 | ' '                                                                        					*
231c8                 | ' '****************************************************************************************************************
231c8                 | ' 
231c8                 | ' pub setspriteptr(num,ptr)
231c8                 | _hg010b_spin2_setspriteptr
231c8                 | ' long[@spr1ptr+12*num]:=ptr
231c8     F2 00 02 F6 | 	mov	_var01, objptr
231cc     11 01 06 F1 | 	add	_var01, #273
231d0     09 03 02 F6 | 	mov	_var02, arg01
231d4     01 02 66 F0 | 	shl	_var02, #1
231d8     09 03 02 F1 | 	add	_var02, arg01
231dc     02 02 66 F0 | 	shl	_var02, #2
231e0     01 01 02 F1 | 	add	_var01, _var02
231e4     00 15 62 FC | 	wrlong	arg02, _var01
231e8                 | _hg010b_spin2_setspriteptr_ret
231e8     2D 00 64 FD | 	ret
231ec                 | 
231ec                 | ' 
231ec                 | ' pub setspritepos(num,x,y)
231ec                 | _hg010b_spin2_setspritepos
231ec                 | ' if y>601
231ec     01 00 00 FF 
231f0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
231f4                 | '   y:=601
231f4     01 00 00 3F 
231f8     59 16 06 36 |  if_ae	mov	arg03, ##601
231fc                 | ' if x>1024
231fc     02 00 00 FF 
23200     01 14 56 F2 | 	cmps	arg02, ##1025 wc
23204                 | '   x:=1024
23204     0A 14 C6 39 |  if_ae	decod	arg02, #10
23208                 | ' word[@spr1ptr+12*num+4]:=x
23208     11 E5 05 F1 | 	add	objptr, #273
2320c     F2 00 02 F6 | 	mov	_var01, objptr
23210     09 03 02 F6 | 	mov	_var02, arg01
23214     01 02 66 F0 | 	shl	_var02, #1
23218     09 03 02 F1 | 	add	_var02, arg01
2321c     02 02 66 F0 | 	shl	_var02, #2
23220     01 01 02 F1 | 	add	_var01, _var02
23224     04 00 06 F1 | 	add	_var01, #4
23228     00 15 52 FC | 	wrword	arg02, _var01
2322c                 | ' word[@spr1ptr+12*num+6]:=y
2322c     F2 00 02 F6 | 	mov	_var01, objptr
23230     09 03 02 F6 | 	mov	_var02, arg01
23234     01 02 66 F0 | 	shl	_var02, #1
23238     09 03 02 F1 | 	add	_var02, arg01
2323c     02 02 66 F0 | 	shl	_var02, #2
23240     01 01 02 F1 | 	add	_var01, _var02
23244     06 00 06 F1 | 	add	_var01, #6
23248     00 17 52 FC | 	wrword	arg03, _var01
2324c     11 E5 85 F1 | 	sub	objptr, #273
23250                 | _hg010b_spin2_setspritepos_ret
23250     2D 00 64 FD | 	ret
23254                 | 
23254                 | ' 
23254                 | ' pub setspritesize(num,w,h)
23254                 | _hg010b_spin2_setspritesize
23254                 | ' word[@spr1ptr+12*num+8]:=w
23254     11 E5 05 F1 | 	add	objptr, #273
23258     F2 00 02 F6 | 	mov	_var01, objptr
2325c     09 03 02 F6 | 	mov	_var02, arg01
23260     01 02 66 F0 | 	shl	_var02, #1
23264     09 03 02 F1 | 	add	_var02, arg01
23268     02 02 66 F0 | 	shl	_var02, #2
2326c     01 01 02 F1 | 	add	_var01, _var02
23270     08 00 06 F1 | 	add	_var01, #8
23274     00 15 52 FC | 	wrword	arg02, _var01
23278                 | ' word[@spr1ptr+12*num+10]:=h
23278     F2 00 02 F6 | 	mov	_var01, objptr
2327c     09 03 02 F6 | 	mov	_var02, arg01
23280     01 02 66 F0 | 	shl	_var02, #1
23284     09 03 02 F1 | 	add	_var02, arg01
23288     02 02 66 F0 | 	shl	_var02, #2
2328c     01 01 02 F1 | 	add	_var01, _var02
23290     0A 00 06 F1 | 	add	_var01, #10
23294     00 17 52 FC | 	wrword	arg03, _var01
23298     11 E5 85 F1 | 	sub	objptr, #273
2329c                 | _hg010b_spin2_setspritesize_ret
2329c     2D 00 64 FD | 	ret
232a0                 | 
232a0                 | ' 
232a0                 | ' 
232a0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
232a0                 | ' 
232a0                 | ' 
232a0                 | ' pub putpixel(x,y,c)
232a0                 | _hg010b_spin2_putpixel
232a0     04 4A 05 F6 | 	mov	COUNT_, #4
232a4     A8 00 A0 FD | 	call	#pushregs_
232a8     09 27 02 F6 | 	mov	local01, arg01
232ac                 | ' 
232ac                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
232ac     00 28 06 F6 | 	mov	local02, #0
232b0     00 26 56 F2 | 	cmps	local01, #0 wc
232b4     01 28 66 36 |  if_ae	neg	local02, #1
232b8     E9 E4 05 F1 | 	add	objptr, #233
232bc     F2 1A 02 FB | 	rdlong	arg05, objptr
232c0     02 1A 66 F0 | 	shl	arg05, #2
232c4     0D 27 52 F2 | 	cmps	local01, arg05 wc
232c8     15 2B A2 F1 | 	subx	local03, local03
232cc     15 29 02 F5 | 	and	local02, local03
232d0     00 2A 06 F6 | 	mov	local03, #0
232d4     00 14 56 F2 | 	cmps	arg02, #0 wc
232d8     01 2A 66 36 |  if_ae	neg	local03, #1
232dc     15 29 02 F5 | 	and	local02, local03
232e0     04 E4 85 F1 | 	sub	objptr, #4
232e4     F2 2A 02 FB | 	rdlong	local03, objptr
232e8     E5 E4 85 F1 | 	sub	objptr, #229
232ec     15 15 52 F2 | 	cmps	arg02, local03 wc
232f0     16 2D A2 F1 | 	subx	local04, local04
232f4     16 29 CA F7 | 	test	local02, local04 wz
232f8     48 00 90 AD |  if_e	jmp	#LR__2750
232fc     DD E4 05 F1 | 	add	objptr, #221
23300     F2 12 02 FB | 	rdlong	arg01, objptr
23304     14 E4 05 F1 | 	add	objptr, #20
23308     F2 2C 02 FB | 	rdlong	local04, objptr
2330c     02 2C 66 F0 | 	shl	local04, #2
23310     0A 2D 02 FD | 	qmul	local04, arg02
23314                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23314     0B 15 02 F6 | 	mov	arg02, arg03
23318     01 16 06 F6 | 	mov	arg03, #1
2331c     00 18 06 F6 | 	mov	arg04, #0
23320     01 1A 06 F6 | 	mov	arg05, #1
23324     0A 00 00 FF 
23328     DB E5 05 F1 | 	add	objptr, ##5595
2332c     18 2C 62 FD | 	getqx	local04
23330     13 2D 02 F1 | 	add	local04, local01
23334     16 13 02 F1 | 	add	arg01, local04
23338     A0 16 B0 FD | 	call	#_psram_spin2_fill
2333c     0B 00 00 FF 
23340     CC E4 85 F1 | 	sub	objptr, ##5836
23344                 | LR__2750
23344     A7 F0 03 F6 | 	mov	ptra, fp
23348     B2 00 A0 FD | 	call	#popregs_
2334c                 | _hg010b_spin2_putpixel_ret
2334c     2D 00 64 FD | 	ret
23350                 | 
23350                 | ' 
23350                 | ' pub getpixel2(x,y): c 
23350                 | _hg010b_spin2_getpixel2
23350     02 4A 05 F6 | 	mov	COUNT_, #2
23354     A8 00 A0 FD | 	call	#pushregs_
23358     0C F0 07 F1 | 	add	ptra, #12
2335c     04 4E 05 F1 | 	add	fp, #4
23360     A7 12 62 FC | 	wrlong	arg01, fp
23364     04 4E 05 F1 | 	add	fp, #4
23368     A7 14 62 FC | 	wrlong	arg02, fp
2336c     08 4E 85 F1 | 	sub	fp, #8
23370     A7 00 68 FC | 	wrlong	#0, fp
23374     A7 12 02 F6 | 	mov	arg01, fp
23378     DD E4 05 F1 | 	add	objptr, #221
2337c     F2 14 02 FB | 	rdlong	arg02, objptr
23380     14 E4 05 F1 | 	add	objptr, #20
23384     F2 16 02 FB | 	rdlong	arg03, objptr
23388     02 16 66 F0 | 	shl	arg03, #2
2338c     08 4E 05 F1 | 	add	fp, #8
23390     A7 FA 01 FB | 	rdlong	result1, fp
23394     FD 16 02 FD | 	qmul	arg03, result1
23398                 | ' 
23398                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
23398     04 4E 85 F1 | 	sub	fp, #4
2339c     A7 26 02 FB | 	rdlong	local01, fp
233a0     04 4E 85 F1 | 	sub	fp, #4
233a4     01 16 06 F6 | 	mov	arg03, #1
233a8     0A 00 00 FF 
233ac     DB E5 05 F1 | 	add	objptr, ##5595
233b0     18 28 62 FD | 	getqx	local02
233b4     13 29 02 F1 | 	add	local02, local01
233b8     14 15 02 F1 | 	add	arg02, local02
233bc     E4 14 B0 FD | 	call	#_psram_spin2_read1
233c0     0B 00 00 FF 
233c4     CC E4 85 F1 | 	sub	objptr, ##5836
233c8                 | ' return c
233c8     A7 FA 01 FB | 	rdlong	result1, fp
233cc     A7 F0 03 F6 | 	mov	ptra, fp
233d0     B2 00 A0 FD | 	call	#popregs_
233d4                 | _hg010b_spin2_getpixel2_ret
233d4     2D 00 64 FD | 	ret
233d8                 | 
233d8                 | '   
233d8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
233d8                 | ' 
233d8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
233d8                 | _hg010b_spin2_fastline
233d8     02 4A 05 F6 | 	mov	COUNT_, #2
233dc     A8 00 A0 FD | 	call	#pushregs_
233e0     09 27 02 F6 | 	mov	local01, arg01
233e4     0A 29 02 F6 | 	mov	local02, arg02
233e8                 | ' 
233e8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
233e8     00 16 56 F2 | 	cmps	arg03, #0 wc
233ec     F4 00 90 CD |  if_b	jmp	#LR__2760
233f0     01 00 00 FF 
233f4     2A E4 05 F1 | 	add	objptr, ##554
233f8     F2 1A 02 FB | 	rdlong	arg05, objptr
233fc     01 00 00 FF 
23400     2A E4 85 F1 | 	sub	objptr, ##554
23404     0D 17 52 F2 | 	cmps	arg03, arg05 wc
23408     D8 00 90 3D |  if_ae	jmp	#LR__2760
2340c     00 26 56 F2 | 	cmps	local01, #0 wc
23410     00 28 56 C2 |  if_b	cmps	local02, #0 wc
23414     CC 00 90 CD |  if_b	jmp	#LR__2760
23418     01 00 00 FF 
2341c     26 E4 05 F1 | 	add	objptr, ##550
23420     F2 1A 02 FB | 	rdlong	arg05, objptr
23424     01 00 00 FF 
23428     26 E4 85 F1 | 	sub	objptr, ##550
2342c     0D 27 5A F2 | 	cmps	local01, arg05 wcz
23430     01 00 00 1F 
23434     26 E4 05 11 |  if_a	add	objptr, ##550
23438     F2 12 02 1B |  if_a	rdlong	arg01, objptr
2343c     01 00 00 1F 
23440     26 E4 85 11 |  if_a	sub	objptr, ##550
23444     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
23448                 | '   return
23448     98 00 90 1D |  if_a	jmp	#LR__2760
2344c     14 27 5A F2 | 	cmps	local01, local02 wcz
23450     13 1B 02 16 |  if_a	mov	arg05, local01
23454     14 27 02 16 |  if_a	mov	local01, local02
23458     0D 29 02 16 |  if_a	mov	local02, arg05
2345c     00 26 56 F2 | 	cmps	local01, #0 wc
23460     00 26 06 C6 |  if_b	mov	local01, #0
23464     01 00 00 FF 
23468     26 E4 05 F1 | 	add	objptr, ##550
2346c     F2 1A 02 FB | 	rdlong	arg05, objptr
23470     01 00 00 FF 
23474     26 E4 85 F1 | 	sub	objptr, ##550
23478     0D 29 52 F2 | 	cmps	local02, arg05 wc
2347c     01 00 00 3F 
23480     26 E4 05 31 |  if_ae	add	objptr, ##550
23484     F2 28 02 3B |  if_ae	rdlong	local02, objptr
23488     01 00 00 3F 
2348c     26 E4 85 31 |  if_ae	sub	objptr, ##550
23490     DD E4 05 F1 | 	add	objptr, #221
23494     F2 12 02 FB | 	rdlong	arg01, objptr
23498     14 E4 05 F1 | 	add	objptr, #20
2349c     F2 1A 02 FB | 	rdlong	arg05, objptr
234a0     02 1A 66 F0 | 	shl	arg05, #2
234a4     0B 1B 02 FD | 	qmul	arg05, arg03
234a8                 | ' if x1>x2
234a8                 | '   x1,x2:=x2,x1
234a8                 | ' if x1<0 
234a8                 | '   x1:=0
234a8                 | ' if x2>=xres
234a8                 | '   x2:=xres-1  
234a8     01 28 86 31 |  if_ae	sub	local02, #1
234ac                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
234ac     01 16 06 F6 | 	mov	arg03, #1
234b0     14 17 02 F1 | 	add	arg03, local02
234b4     13 17 82 F1 | 	sub	arg03, local01
234b8     0C 15 02 F6 | 	mov	arg02, arg04
234bc     00 18 06 F6 | 	mov	arg04, #0
234c0     01 1A 06 F6 | 	mov	arg05, #1
234c4     0A 00 00 FF 
234c8     DB E5 05 F1 | 	add	objptr, ##5595
234cc     18 28 62 FD | 	getqx	local02
234d0     13 29 02 F1 | 	add	local02, local01
234d4     14 13 02 F1 | 	add	arg01, local02
234d8     00 15 B0 FD | 	call	#_psram_spin2_fill
234dc     0B 00 00 FF 
234e0     CC E4 85 F1 | 	sub	objptr, ##5836
234e4                 | LR__2760
234e4     A7 F0 03 F6 | 	mov	ptra, fp
234e8     B2 00 A0 FD | 	call	#popregs_
234ec                 | _hg010b_spin2_fastline_ret
234ec     2D 00 64 FD | 	ret
234f0                 | 
234f0                 | ' 
234f0                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
234f0                 | _hg010b_spin2_draw
234f0     0E 4A 05 F6 | 	mov	COUNT_, #14
234f4     A8 00 A0 FD | 	call	#pushregs_
234f8     09 27 02 F6 | 	mov	local01, arg01
234fc     0A 29 02 F6 | 	mov	local02, arg02
23500     0B 2B 02 F6 | 	mov	local03, arg03
23504     0C 2D 02 F6 | 	mov	local04, arg04
23508     0D 2F 02 F6 | 	mov	local05, arg05
2350c                 | ' 
2350c                 | ' if (y1==y2)
2350c     16 29 0A F2 | 	cmp	local02, local04 wz
23510     18 00 90 5D |  if_ne	jmp	#LR__2770
23514                 | '   fastline(x1,x2,y1,c)
23514     13 13 02 F6 | 	mov	arg01, local01
23518     15 15 02 F6 | 	mov	arg02, local03
2351c     14 17 02 F6 | 	mov	arg03, local02
23520     17 19 02 F6 | 	mov	arg04, local05
23524     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
23528     F8 00 90 FD | 	jmp	#LR__2776
2352c                 | LR__2770
2352c                 | ' else  
2352c                 | '   x:=x1
2352c     13 31 02 F6 | 	mov	local06, local01
23530                 | '   y:=y1
23530     14 33 02 F6 | 	mov	local07, local02
23534                 | ' 
23534                 | '   if (x1<x2) 
23534     15 27 52 F2 | 	cmps	local01, local03 wc
23538                 | '     xi:=1
23538     01 34 06 C6 |  if_b	mov	local08, #1
2353c                 | '     dx:=x2-x1
2353c     15 37 02 C6 |  if_b	mov	local09, local03
23540     13 37 82 C1 |  if_b	sub	local09, local01
23544                 | '   else
23544                 | '     xi:=-1
23544     01 34 66 36 |  if_ae	neg	local08, #1
23548                 | '     dx:=x1-x2
23548     15 27 82 31 |  if_ae	sub	local01, local03
2354c     13 37 02 36 |  if_ae	mov	local09, local01
23550                 | '   
23550                 | '   if (y1<y2) 
23550     16 29 52 F2 | 	cmps	local02, local04 wc
23554                 | '     yi:=1
23554     01 38 06 C6 |  if_b	mov	local10, #1
23558                 | '     dy:=y2-y1
23558     16 3B 02 C6 |  if_b	mov	local11, local04
2355c     14 3B 82 C1 |  if_b	sub	local11, local02
23560                 | '   else
23560                 | '     yi:=-1
23560     01 38 66 36 |  if_ae	neg	local10, #1
23564                 | '     dy:=y1-y2
23564     16 29 82 31 |  if_ae	sub	local02, local04
23568     14 3B 02 36 |  if_ae	mov	local11, local02
2356c                 | ' 
2356c                 | '   putpixel(x,y,c)
2356c     17 17 02 F6 | 	mov	arg03, local05
23570     18 13 02 F6 | 	mov	arg01, local06
23574     19 15 02 F6 | 	mov	arg02, local07
23578     24 FD BF FD | 	call	#_hg010b_spin2_putpixel
2357c                 | ' 
2357c                 | '   if (dx>dy)
2357c     1D 37 5A F2 | 	cmps	local09, local11 wcz
23580     50 00 90 ED |  if_be	jmp	#LR__2772
23584                 | '     ai:=(dy-dx)*2
23584     1D 3D 02 F6 | 	mov	local12, local11
23588     1B 3D 82 F1 | 	sub	local12, local09
2358c     01 3C 66 F0 | 	shl	local12, #1
23590                 | '     bi:=dy*2
23590     01 3A 66 F0 | 	shl	local11, #1
23594     1D 3F 02 F6 | 	mov	local13, local11
23598                 | '     d:= bi-dx
23598     1F 41 02 F6 | 	mov	local14, local13
2359c     1B 41 82 F1 | 	sub	local14, local09
235a0                 | '     repeat while (x<>x2) 
235a0                 | LR__2771
235a0     15 31 0A F2 | 	cmp	local06, local03 wz
235a4     7C 00 90 AD |  if_e	jmp	#LR__2775
235a8                 | '       if (d>=0) 
235a8     00 40 56 F2 | 	cmps	local14, #0 wc
235ac                 | '         x+=xi
235ac     1A 31 02 31 |  if_ae	add	local06, local08
235b0                 | '         y+=yi
235b0     1C 33 02 31 |  if_ae	add	local07, local10
235b4                 | '         d+=ai
235b4     1E 41 02 31 |  if_ae	add	local14, local12
235b8                 | '       else
235b8                 | '         d+=bi
235b8     1F 41 02 C1 |  if_b	add	local14, local13
235bc                 | '         x+=xi
235bc     1A 31 02 C1 |  if_b	add	local06, local08
235c0                 | '       putpixel(x,y,c)
235c0     18 13 02 F6 | 	mov	arg01, local06
235c4     19 15 02 F6 | 	mov	arg02, local07
235c8     17 17 02 F6 | 	mov	arg03, local05
235cc     D0 FC BF FD | 	call	#_hg010b_spin2_putpixel
235d0     CC FF 9F FD | 	jmp	#LR__2771
235d4                 | LR__2772
235d4                 | '   else
235d4                 | '     ai:=(dx-dy)*2
235d4     1B 3D 02 F6 | 	mov	local12, local09
235d8     1D 3D 82 F1 | 	sub	local12, local11
235dc     01 3C 66 F0 | 	shl	local12, #1
235e0                 | '     bi:=dx*2
235e0     01 36 66 F0 | 	shl	local09, #1
235e4     1B 3F 02 F6 | 	mov	local13, local09
235e8                 | '     d:=bi-dy
235e8     1F 41 02 F6 | 	mov	local14, local13
235ec     1D 41 82 F1 | 	sub	local14, local11
235f0                 | '     repeat while (y<>y2)
235f0                 | LR__2773
235f0     16 33 0A F2 | 	cmp	local07, local04 wz
235f4     2C 00 90 AD |  if_e	jmp	#LR__2774
235f8                 | '       if (d>=0)
235f8     00 40 56 F2 | 	cmps	local14, #0 wc
235fc                 | '         x+=xi
235fc     1A 31 02 31 |  if_ae	add	local06, local08
23600                 | '         y+=yi
23600     1C 33 02 31 |  if_ae	add	local07, local10
23604                 | '         d+=ai
23604     1E 41 02 31 |  if_ae	add	local14, local12
23608                 | '       else
23608                 | '         d+=bi
23608     1F 41 02 C1 |  if_b	add	local14, local13
2360c                 | '         y+=yi
2360c     1C 33 02 C1 |  if_b	add	local07, local10
23610                 | '       putpixel(x, y,c)
23610     18 13 02 F6 | 	mov	arg01, local06
23614     19 15 02 F6 | 	mov	arg02, local07
23618     17 17 02 F6 | 	mov	arg03, local05
2361c     80 FC BF FD | 	call	#_hg010b_spin2_putpixel
23620     CC FF 9F FD | 	jmp	#LR__2773
23624                 | LR__2774
23624                 | LR__2775
23624                 | LR__2776
23624     A7 F0 03 F6 | 	mov	ptra, fp
23628     B2 00 A0 FD | 	call	#popregs_
2362c                 | _hg010b_spin2_draw_ret
2362c     2D 00 64 FD | 	ret
23630                 | 
23630                 | '  
23630                 | ' pub fillpush(val) 
23630                 | _hg010b_spin2_fillpush
23630                 | ' fillstack[fillptr]:=val
23630     0B 00 00 FF 
23634     BA E4 05 F1 | 	add	objptr, ##5818
23638     F2 00 02 FB | 	rdlong	_var01, objptr
2363c     02 00 66 F0 | 	shl	_var01, #2
23640     0A 00 00 FF 
23644     00 E4 85 F1 | 	sub	objptr, ##5120
23648     F2 00 02 F1 | 	add	_var01, objptr
2364c     00 13 62 FC | 	wrlong	arg01, _var01
23650                 | ' fillptr+=1   
23650     0A 00 00 FF 
23654     00 E4 05 F1 | 	add	objptr, ##5120
23658     F2 00 02 FB | 	rdlong	_var01, objptr
2365c     01 00 06 F1 | 	add	_var01, #1
23660     F2 00 62 FC | 	wrlong	_var01, objptr
23664     0B 00 00 FF 
23668     BA E4 85 F1 | 	sub	objptr, ##5818
2366c                 | _hg010b_spin2_fillpush_ret
2366c     2D 00 64 FD | 	ret
23670                 | 
23670                 | ' 
23670                 | '     
23670                 | ' pub fillpop() : val
23670                 | _hg010b_spin2_fillpop
23670                 | ' 
23670                 | ' fillptr-=1
23670     0B 00 00 FF 
23674     BA E4 05 F1 | 	add	objptr, ##5818
23678     F2 00 02 FB | 	rdlong	_var01, objptr
2367c     01 00 86 F1 | 	sub	_var01, #1
23680     F2 00 62 FC | 	wrlong	_var01, objptr
23684                 | ' if fillptr<0
23684     0B 00 00 FF 
23688     BA E4 85 F1 | 	sub	objptr, ##5818
2368c     00 00 56 F2 | 	cmps	_var01, #0 wc
23690                 | '   fillptr:=0
23690     0B 00 00 CF 
23694     BA E4 05 C1 |  if_b	add	objptr, ##5818
23698     F2 00 68 CC |  if_b	wrlong	#0, objptr
2369c     0B 00 00 CF 
236a0     BA E4 85 C1 |  if_b	sub	objptr, ##5818
236a4                 | '   val:=-12345
236a4     E7 FF 7F CF 
236a8     C7 FB 05 C6 |  if_b	mov	result1, ##-12345
236ac                 | ' else 
236ac                 | '   val:=fillstack[fillptr]
236ac     0B 00 00 3F 
236b0     BA E4 05 31 |  if_ae	add	objptr, ##5818
236b4     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
236b8     02 00 66 30 |  if_ae	shl	_var01, #2
236bc     0A 00 00 3F 
236c0     00 E4 85 31 |  if_ae	sub	objptr, ##5120
236c4     F2 00 02 31 |  if_ae	add	_var01, objptr
236c8     00 FB 01 3B |  if_ae	rdlong	result1, _var01
236cc     01 00 00 3F 
236d0     BA E4 85 31 |  if_ae	sub	objptr, ##698
236d4                 | ' return val
236d4                 | _hg010b_spin2_fillpop_ret
236d4     2D 00 64 FD | 	ret
236d8                 | 
236d8                 | '  
236d8                 | ' '-- A circle ------------------------------------------------------------ 
236d8                 | '  
236d8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
236d8                 | _hg010b_spin2_circle
236d8     08 4A 05 F6 | 	mov	COUNT_, #8
236dc     A8 00 A0 FD | 	call	#pushregs_
236e0     0B 27 02 F6 | 	mov	local01, arg03
236e4     FF FF 7F FF 
236e8     FE 27 06 FD | 	qmul	local01, ##-2
236ec     09 29 02 F6 | 	mov	local02, arg01
236f0     0A 2B 02 F6 | 	mov	local03, arg02
236f4     0C 2D 02 F6 | 	mov	local04, arg04
236f8                 | ' 
236f8                 | '  
236f8                 | ' d:=5-4*r
236f8     13 19 02 F6 | 	mov	arg04, local01
236fc     02 18 66 F0 | 	shl	arg04, #2
23700     05 2E 06 F6 | 	mov	local05, #5
23704     0C 2F 82 F1 | 	sub	local05, arg04
23708                 | ' x:=0
23708     00 30 06 F6 | 	mov	local06, #0
2370c                 | ' y:=r
2370c                 | ' da:=(-2*r+5)*4
2370c                 | ' db:=3*4
2370c     0C 32 06 F6 | 	mov	local07, #12
23710                 | ' repeat while (x<=y) 
23710     18 34 62 FD | 	getqx	local08
23714     05 34 06 F1 | 	add	local08, #5
23718     02 34 66 F0 | 	shl	local08, #2
2371c                 | LR__2780
2371c     13 31 5A F2 | 	cmps	local06, local01 wcz
23720     F0 00 90 1D |  if_a	jmp	#LR__2781
23724                 | '   putpixel(x0-x,y0-y,c)
23724     14 13 02 F6 | 	mov	arg01, local02
23728     18 13 82 F1 | 	sub	arg01, local06
2372c     15 15 02 F6 | 	mov	arg02, local03
23730     13 15 82 F1 | 	sub	arg02, local01
23734     16 17 02 F6 | 	mov	arg03, local04
23738     64 FB BF FD | 	call	#_hg010b_spin2_putpixel
2373c                 | '   putpixel(x0-x,y0+y,c)
2373c     14 13 02 F6 | 	mov	arg01, local02
23740     18 13 82 F1 | 	sub	arg01, local06
23744     15 15 02 F6 | 	mov	arg02, local03
23748     13 15 02 F1 | 	add	arg02, local01
2374c     16 17 02 F6 | 	mov	arg03, local04
23750     4C FB BF FD | 	call	#_hg010b_spin2_putpixel
23754                 | '   putpixel(x0+x,y0-y,c)
23754     14 13 02 F6 | 	mov	arg01, local02
23758     18 13 02 F1 | 	add	arg01, local06
2375c     15 15 02 F6 | 	mov	arg02, local03
23760     13 15 82 F1 | 	sub	arg02, local01
23764     16 17 02 F6 | 	mov	arg03, local04
23768     34 FB BF FD | 	call	#_hg010b_spin2_putpixel
2376c                 | '   putpixel(x0+x,y0+y,c)
2376c     14 13 02 F6 | 	mov	arg01, local02
23770     18 13 02 F1 | 	add	arg01, local06
23774     15 15 02 F6 | 	mov	arg02, local03
23778     13 15 02 F1 | 	add	arg02, local01
2377c     16 17 02 F6 | 	mov	arg03, local04
23780     1C FB BF FD | 	call	#_hg010b_spin2_putpixel
23784                 | '   putpixel(x0-y,y0-x,c)
23784     14 13 02 F6 | 	mov	arg01, local02
23788     13 13 82 F1 | 	sub	arg01, local01
2378c     15 15 02 F6 | 	mov	arg02, local03
23790     18 15 82 F1 | 	sub	arg02, local06
23794     16 17 02 F6 | 	mov	arg03, local04
23798     04 FB BF FD | 	call	#_hg010b_spin2_putpixel
2379c                 | '   putpixel(x0-y,y0+x,c)
2379c     14 13 02 F6 | 	mov	arg01, local02
237a0     13 13 82 F1 | 	sub	arg01, local01
237a4     15 15 02 F6 | 	mov	arg02, local03
237a8     18 15 02 F1 | 	add	arg02, local06
237ac     16 17 02 F6 | 	mov	arg03, local04
237b0     EC FA BF FD | 	call	#_hg010b_spin2_putpixel
237b4                 | '   putpixel(x0+y,y0-x,c)
237b4     14 13 02 F6 | 	mov	arg01, local02
237b8     13 13 02 F1 | 	add	arg01, local01
237bc     15 15 02 F6 | 	mov	arg02, local03
237c0     18 15 82 F1 | 	sub	arg02, local06
237c4     16 17 02 F6 | 	mov	arg03, local04
237c8     D4 FA BF FD | 	call	#_hg010b_spin2_putpixel
237cc                 | '   putpixel(x0+y,y0+x,c)
237cc     14 13 02 F6 | 	mov	arg01, local02
237d0     13 13 02 F1 | 	add	arg01, local01
237d4     15 15 02 F6 | 	mov	arg02, local03
237d8     18 15 02 F1 | 	add	arg02, local06
237dc     16 17 02 F6 | 	mov	arg03, local04
237e0     BC FA BF FD | 	call	#_hg010b_spin2_putpixel
237e4                 | '   if d>0 
237e4     01 2E 56 F2 | 	cmps	local05, #1 wc
237e8                 | '     d+=da
237e8     1A 2F 02 31 |  if_ae	add	local05, local08
237ec                 | '     y-=1
237ec     01 26 86 31 |  if_ae	sub	local01, #1
237f0                 | '     x+=1
237f0     01 30 06 31 |  if_ae	add	local06, #1
237f4                 | '     da+=4*4
237f4     10 34 06 31 |  if_ae	add	local08, #16
237f8                 | '     db+=2*4
237f8     08 32 06 31 |  if_ae	add	local07, #8
237fc     1C FF 9F 3D |  if_ae	jmp	#LR__2780
23800                 | '   else
23800                 | '     d+=db
23800     19 2F 02 F1 | 	add	local05, local07
23804                 | '     x+=1
23804     01 30 06 F1 | 	add	local06, #1
23808                 | '     da+=2*4
23808     08 34 06 F1 | 	add	local08, #8
2380c                 | '     db+=2*4
2380c     08 32 06 F1 | 	add	local07, #8
23810     08 FF 9F FD | 	jmp	#LR__2780
23814                 | LR__2781
23814     A7 F0 03 F6 | 	mov	ptra, fp
23818     B2 00 A0 FD | 	call	#popregs_
2381c                 | _hg010b_spin2_circle_ret
2381c     2D 00 64 FD | 	ret
23820                 | 
23820                 | ' 
23820                 | ' '-- A box (a filled rectangle) ----------------------------------------
23820                 | ' 
23820                 | ' pub box(x1,y1,x2,y2,c) |yy
23820                 | _hg010b_spin2_box
23820     06 4A 05 F6 | 	mov	COUNT_, #6
23824     A8 00 A0 FD | 	call	#pushregs_
23828     09 27 02 F6 | 	mov	local01, arg01
2382c     0A 29 02 F6 | 	mov	local02, arg02
23830     0B 2B 02 F6 | 	mov	local03, arg03
23834     0C 2D 02 F6 | 	mov	local04, arg04
23838     0D 2F 02 F6 | 	mov	local05, arg05
2383c                 | ' 
2383c                 | ' repeat yy from y1 to y2
2383c     14 2D 52 F2 | 	cmps	local04, local02 wc
23840     01 30 86 F6 | 	negc	local06, #1
23844     18 2D 02 F1 | 	add	local04, local06
23848                 | LR__2790
23848                 | '   fastline(x1,x2,yy,c)
23848     13 13 02 F6 | 	mov	arg01, local01
2384c     15 15 02 F6 | 	mov	arg02, local03
23850     17 19 02 F6 | 	mov	arg04, local05
23854     14 17 02 F6 | 	mov	arg03, local02
23858     7C FB BF FD | 	call	#_hg010b_spin2_fastline
2385c     18 29 02 F1 | 	add	local02, local06
23860     16 29 0A F2 | 	cmp	local02, local04 wz
23864     E0 FF 9F 5D |  if_ne	jmp	#LR__2790
23868     A7 F0 03 F6 | 	mov	ptra, fp
2386c     B2 00 A0 FD | 	call	#popregs_
23870                 | _hg010b_spin2_box_ret
23870     2D 00 64 FD | 	ret
23874                 | 
23874                 | '       
23874                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
23874                 | _hg010b_spin2_putcharxycgf
23874                 | ' 
23874                 | '  
23874                 | ' repeat yy from 0 to 15
23874     00 00 06 F6 | 	mov	_var01, #0
23878     97 8A 48 FB | 	callpa	#(@LR__2802-@LR__2800)>>2,fcache_load_ptr_
2387c                 | LR__2800
2387c                 | ' 
2387c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
2387c     95 E4 05 F1 | 	add	objptr, #149
23880     F2 02 02 FB | 	rdlong	_var02, objptr
23884     0A 02 66 F0 | 	shl	_var02, #10
23888     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
2388c     01 05 02 F1 | 	add	_var03, _var02
23890     0B 03 02 F6 | 	mov	_var02, arg03
23894     04 02 66 F0 | 	shl	_var02, #4
23898     01 05 02 F1 | 	add	_var03, _var02
2389c     00 05 02 F1 | 	add	_var03, _var01
238a0     02 05 C2 FA | 	rdbyte	_var03, _var03
238a4                 | '   asm
238a4     00 04 0E F4 | 	testb	_var03, #0 wz
238a8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
238ac     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
238b0     01 04 0E F4 | 	testb	_var03, #1 wz
238b4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
238b8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
238bc     02 04 0E F4 | 	testb	_var03, #2 wz
238c0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
238c4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
238c8     03 04 0E F4 | 	testb	_var03, #3 wz
238cc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
238d0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
238d4     04 04 0E F4 | 	testb	_var03, #4 wz
238d8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
238dc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
238e0     05 04 0E F4 | 	testb	_var03, #5 wz
238e4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
238e8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
238ec     06 04 0E F4 | 	testb	_var03, #6 wz
238f0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
238f4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
238f8     07 04 0E F4 | 	testb	_var03, #7 wz
238fc     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
23900     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
23904                 | '   
23904                 | '   ccc[0]:=c1
23904     99 E5 05 F1 | 	add	objptr, #409
23908     F2 06 62 FC | 	wrlong	_var04, objptr
2390c                 | '   ccc[1]:=c2 
2390c     04 E4 05 F1 | 	add	objptr, #4
23910     F2 08 62 FC | 	wrlong	_var05, objptr
23914                 | '   long[mailbox0][2]:=8
23914     49 E4 85 F1 | 	sub	objptr, #73
23918     F2 04 02 FB | 	rdlong	_var03, objptr
2391c     08 04 06 F1 | 	add	_var03, #8
23920     02 11 68 FC | 	wrlong	#8, _var03
23924                 | '   long[mailbox0][1]:=@ccc
23924     F2 04 02 F6 | 	mov	_var03, objptr
23928     45 04 06 F1 | 	add	_var03, #69
2392c     F2 02 02 FB | 	rdlong	_var02, objptr
23930     04 02 06 F1 | 	add	_var02, #4
23934     01 05 62 FC | 	wrlong	_var03, _var02
23938                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
23938     0C E5 85 F1 | 	sub	objptr, #268
2393c     F2 04 02 FB | 	rdlong	_var03, objptr
23940     0A 03 02 F6 | 	mov	_var02, arg02
23944     00 03 02 F1 | 	add	_var02, _var01
23948     0A 02 66 F0 | 	shl	_var02, #10
2394c     09 0B 02 F6 | 	mov	_var06, arg01
23950     02 0A 66 F0 | 	shl	_var06, #2
23954     05 03 02 F1 | 	add	_var02, _var06
23958     01 05 02 F1 | 	add	_var03, _var02
2395c     00 00 78 FF 
23960     00 04 06 F1 | 	add	_var03, ##-268435456
23964     0C E5 05 F1 | 	add	objptr, #268
23968     F2 0A 02 FB | 	rdlong	_var06, objptr
2396c     05 05 62 FC | 	wrlong	_var03, _var06
23970                 | '   repeat
23970                 | LR__2801
23970     F2 04 02 FB | 	rdlong	_var03, objptr
23974     02 03 02 FB | 	rdlong	_var02, _var03
23978     00 02 56 F2 | 	cmps	_var02, #0 wc
2397c     F0 FF 9F CD |  if_b	jmp	#LR__2801
23980     E9 E5 85 F1 | 	sub	objptr, #489
23984     01 00 06 F1 | 	add	_var01, #1
23988     10 00 56 F2 | 	cmps	_var01, #16 wc
2398c     EC FE 9F CD |  if_b	jmp	#LR__2800
23990                 | LR__2802
23990                 | _hg010b_spin2_putcharxycgf_ret
23990     2D 00 64 FD | 	ret
23994                 | 
23994                 | ' 
23994                 | ' 
23994                 | ' '**********************************************************************r***
23994                 | ' '                                                                        *
23994                 | ' ' Font related functions                                                 *
23994                 | ' '                                                                        *
23994                 | ' '*************************************************************************
23994                 | ' 
23994                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
23994                 | ' 
23994                 | ' pub setfontfamily(afontnum)
23994                 | _hg010b_spin2_setfontfamily
23994                 | ' 
23994                 | ' font_family:=afontnum
23994     95 E4 05 F1 | 	add	objptr, #149
23998     F2 12 62 FC | 	wrlong	arg01, objptr
2399c     95 E4 85 F1 | 	sub	objptr, #149
239a0                 | ' 'if afontnum==8
239a0                 | ' '  font_ptr:=@amiga_font
239a0                 | ' 
239a0                 | ' if afontnum==4
239a0     04 12 0E F2 | 	cmp	arg01, #4 wz
239a4                 | '   font_ptr:=@st_font
239a4     F7 00 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
239a8     08 00 00 AF 
239ac     00 00 06 A1 |  if_e	add	_var01, ##4096
239b0     08 E4 05 A1 |  if_e	add	objptr, #8
239b4     F2 00 62 AC |  if_e	wrlong	_var01, objptr
239b8     08 E4 85 A1 |  if_e	sub	objptr, #8
239bc                 | ' if afontnum==0
239bc     00 12 0E F2 | 	cmp	arg01, #0 wz
239c0                 | '   font_ptr:=@vga_font
239c0     08 E4 05 A1 |  if_e	add	objptr, #8
239c4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
239c8     08 E4 85 A1 |  if_e	sub	objptr, #8
239cc                 | _hg010b_spin2_setfontfamily_ret
239cc     2D 00 64 FD | 	ret
239d0                 | 
239d0                 | ' 
239d0                 | ' ''--------- Redefine a character
239d0                 | ' 
239d0                 | ' pub defchar(ch,ptr) | s,i ' 
239d0                 | _hg010b_spin2_defchar
239d0                 | ' 
239d0                 | ' s:=font_ptr+ch*16
239d0     08 E4 05 F1 | 	add	objptr, #8
239d4     F2 00 02 FB | 	rdlong	_var01, objptr
239d8     08 E4 85 F1 | 	sub	objptr, #8
239dc     04 12 66 F0 | 	shl	arg01, #4
239e0     09 01 02 F1 | 	add	_var01, arg01
239e4                 | ' repeat i from 0 to 15
239e4     00 02 06 F6 | 	mov	_var02, #0
239e8     97 12 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
239ec                 | LR__2810
239ec                 | '   byte[s+i]:=byte[ptr+i]
239ec     0A 13 02 F6 | 	mov	arg01, arg02
239f0     01 13 02 F1 | 	add	arg01, _var02
239f4     00 05 02 F6 | 	mov	_var03, _var01
239f8     09 13 C2 FA | 	rdbyte	arg01, arg01
239fc     01 05 02 F1 | 	add	_var03, _var02
23a00     02 13 42 FC | 	wrbyte	arg01, _var03
23a04     01 02 06 F1 | 	add	_var02, #1
23a08     10 02 56 F2 | 	cmps	_var02, #16 wc
23a0c     DC FF 9F CD |  if_b	jmp	#LR__2810
23a10                 | LR__2811
23a10                 | _hg010b_spin2_defchar_ret
23a10     2D 00 64 FD | 	ret
23a14                 | 
23a14                 | ' 
23a14                 | ' 
23a14                 | ' '*************************************************************************
23a14                 | ' '                                                                        *
23a14                 | ' '  Cursor functions                                                      *
23a14                 | ' '                                                                        *
23a14                 | ' '*************************************************************************
23a14                 | ' 
23a14                 | ' 
23a14                 | ' pub setcursorpos(x,y)
23a14                 | _hg010b_spin2_setcursorpos
23a14     01 4A 05 F6 | 	mov	COUNT_, #1
23a18     A8 00 A0 FD | 	call	#pushregs_
23a1c                 | ' 
23a1c                 | ' ''---------- Set the (x,y) position of cursor
23a1c                 | ' 
23a1c                 | ' cursor_x:=x
23a1c     3C E4 05 F1 | 	add	objptr, #60
23a20     F2 12 52 FC | 	wrword	arg01, objptr
23a24                 | ' cursor_y:=y
23a24     02 E4 05 F1 | 	add	objptr, #2
23a28     F2 14 42 FC | 	wrbyte	arg02, objptr
23a2c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23a2c     02 E4 85 F1 | 	sub	objptr, #2
23a30     F2 26 E2 FA | 	rdword	local01, objptr
23a34     02 26 66 F0 | 	shl	local01, #2
23a38     0A 17 E2 F8 | 	getbyte	arg03, arg02, #0
23a3c     3C E4 85 F1 | 	sub	objptr, #60
23a40     04 16 66 F0 | 	shl	arg03, #4
23a44     04 16 06 F1 | 	add	arg03, #4
23a48     11 12 06 F6 | 	mov	arg01, #17
23a4c     13 15 02 F6 | 	mov	arg02, local01
23a50     98 F7 BF FD | 	call	#_hg010b_spin2_setspritepos
23a54     A7 F0 03 F6 | 	mov	ptra, fp
23a58     B2 00 A0 FD | 	call	#popregs_
23a5c                 | _hg010b_spin2_setcursorpos_ret
23a5c     2D 00 64 FD | 	ret
23a60                 | 
23a60                 | ' 
23a60                 | ' pub setcursorx(x)
23a60                 | _hg010b_spin2_setcursorx
23a60                 | ' cursor_x:=x
23a60     3C E4 05 F1 | 	add	objptr, #60
23a64     F2 12 52 FC | 	wrword	arg01, objptr
23a68                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23a68     09 15 32 F9 | 	getword	arg02, arg01, #0
23a6c     02 14 66 F0 | 	shl	arg02, #2
23a70     02 E4 05 F1 | 	add	objptr, #2
23a74     F2 16 C2 FA | 	rdbyte	arg03, objptr
23a78     3E E4 85 F1 | 	sub	objptr, #62
23a7c     04 16 66 F0 | 	shl	arg03, #4
23a80     04 16 06 F1 | 	add	arg03, #4
23a84     11 12 06 F6 | 	mov	arg01, #17
23a88     60 F7 BF FD | 	call	#_hg010b_spin2_setspritepos
23a8c                 | _hg010b_spin2_setcursorx_ret
23a8c     2D 00 64 FD | 	ret
23a90                 | 
23a90                 | ' 
23a90                 | ' pub setcursory(y) 
23a90                 | _hg010b_spin2_setcursory
23a90                 | ' cursor_y:=y
23a90     3E E4 05 F1 | 	add	objptr, #62
23a94     F2 12 42 FC | 	wrbyte	arg01, objptr
23a98                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
23a98     02 E4 85 F1 | 	sub	objptr, #2
23a9c     F2 14 E2 FA | 	rdword	arg02, objptr
23aa0     02 14 66 F0 | 	shl	arg02, #2
23aa4     09 17 E2 F8 | 	getbyte	arg03, arg01, #0
23aa8     3C E4 85 F1 | 	sub	objptr, #60
23aac     04 16 66 F0 | 	shl	arg03, #4
23ab0     04 16 06 F1 | 	add	arg03, #4
23ab4     11 12 06 F6 | 	mov	arg01, #17
23ab8     30 F7 BF FD | 	call	#_hg010b_spin2_setspritepos
23abc                 | _hg010b_spin2_setcursory_ret
23abc     2D 00 64 FD | 	ret
23ac0                 | 
23ac0                 | ' 
23ac0                 | ' '*************************************************************************
23ac0                 | ' '                                                                        *
23ac0                 | ' '  VBlank functions                                                      *
23ac0                 | ' '                                                                        *
23ac0                 | ' '*************************************************************************
23ac0                 | ' 
23ac0                 | ' pub waitvbl(amount) | i
23ac0                 | _hg010b_spin2_waitvbl
23ac0     03 4A 05 F6 | 	mov	COUNT_, #3
23ac4     A8 00 A0 FD | 	call	#pushregs_
23ac8     09 27 02 F6 | 	mov	local01, arg01
23acc                 | ' 
23acc                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
23acc                 | ' 
23acc                 | ' repeat i from 1 to amount
23acc     01 28 06 F6 | 	mov	local02, #1
23ad0     01 26 56 F2 | 	cmps	local01, #1 wc
23ad4     01 2A 86 F6 | 	negc	local03, #1
23ad8     15 27 02 F1 | 	add	local01, local03
23adc                 | LR__2820
23adc                 | '   repeat until vblank==0
23adc                 | LR__2821
23adc     49 E4 05 F1 | 	add	objptr, #73
23ae0     F2 12 0A FB | 	rdlong	arg01, objptr wz
23ae4     49 E4 85 F1 | 	sub	objptr, #73
23ae8     0C 00 90 AD |  if_e	jmp	#LR__2822
23aec                 | '     waitus(100)
23aec     64 12 06 F6 | 	mov	arg01, #100
23af0     B8 18 B0 FD | 	call	#__system___waitus
23af4     E4 FF 9F FD | 	jmp	#LR__2821
23af8                 | LR__2822
23af8                 | '   repeat until vblank==1
23af8                 | LR__2823
23af8     49 E4 05 F1 | 	add	objptr, #73
23afc     F2 12 02 FB | 	rdlong	arg01, objptr
23b00     49 E4 85 F1 | 	sub	objptr, #73
23b04     01 12 0E F2 | 	cmp	arg01, #1 wz
23b08     0C 00 90 AD |  if_e	jmp	#LR__2824
23b0c                 | '     waitus(100)
23b0c     64 12 06 F6 | 	mov	arg01, #100
23b10     98 18 B0 FD | 	call	#__system___waitus
23b14     E0 FF 9F FD | 	jmp	#LR__2823
23b18                 | LR__2824
23b18     15 29 02 F1 | 	add	local02, local03
23b1c     13 29 0A F2 | 	cmp	local02, local01 wz
23b20     B8 FF 9F 5D |  if_ne	jmp	#LR__2820
23b24     A7 F0 03 F6 | 	mov	ptra, fp
23b28     B2 00 A0 FD | 	call	#popregs_
23b2c                 | _hg010b_spin2_waitvbl_ret
23b2c     2D 00 64 FD | 	ret
23b30                 | 
23b30                 | ' 
23b30                 | ' 
23b30                 | ' pub cls(fc,bc)   :c,i
23b30                 | _hg010b_spin2_cls
23b30     02 4A 05 F6 | 	mov	COUNT_, #2
23b34     A8 00 A0 FD | 	call	#pushregs_
23b38     09 27 02 F6 | 	mov	local01, arg01
23b3c     0A 29 02 F6 | 	mov	local02, arg02
23b40                 | ' 
23b40                 | ' c:=bc
23b40                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
23b40     DD E4 05 F1 | 	add	objptr, #221
23b44     F2 12 02 FB | 	rdlong	arg01, objptr
23b48     A5 E4 85 F1 | 	sub	objptr, #165
23b4c     F2 16 02 FB | 	rdlong	arg03, objptr
23b50     02 16 66 F0 | 	shl	arg03, #2
23b54     14 15 02 F6 | 	mov	arg02, local02
23b58     00 18 06 F6 | 	mov	arg04, #0
23b5c     01 1A 06 F6 | 	mov	arg05, #1
23b60     0B 00 00 FF 
23b64     94 E4 05 F1 | 	add	objptr, ##5780
23b68     70 0E B0 FD | 	call	#_psram_spin2_fill
23b6c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23b6c     0B 00 00 FF 
23b70     C8 E4 85 F1 | 	sub	objptr, ##5832
23b74     F2 12 02 FB | 	rdlong	arg01, objptr
23b78     04 E4 85 F1 | 	sub	objptr, #4
23b7c     F2 16 02 FB | 	rdlong	arg03, objptr
23b80     09 17 82 F1 | 	sub	arg03, arg01
23b84     20 14 06 F6 | 	mov	arg02, #32
23b88     00 18 06 F6 | 	mov	arg04, #0
23b8c     01 1A 06 F6 | 	mov	arg05, #1
23b90     0B 00 00 FF 
23b94     CC E4 05 F1 | 	add	objptr, ##5836
23b98     40 0E B0 FD | 	call	#_psram_spin2_fill
23b9c                 | ' setwritecolors(fc,bc)
23b9c                 | ' 
23b9c                 | ' write_color:=ff
23b9c     0B 00 00 FF 
23ba0     8B E4 85 F1 | 	sub	objptr, ##5771
23ba4     F2 26 62 FC | 	wrlong	local01, objptr
23ba8                 | ' write_background:=bb
23ba8     04 E4 05 F1 | 	add	objptr, #4
23bac     F2 28 62 FC | 	wrlong	local02, objptr
23bb0                 | ' cursor_x:=0
23bb0     09 E4 85 F1 | 	sub	objptr, #9
23bb4     F2 00 58 FC | 	wrword	#0, objptr
23bb8                 | ' cursor_y:=0
23bb8     02 E4 05 F1 | 	add	objptr, #2
23bbc     F2 00 48 FC | 	wrbyte	#0, objptr
23bc0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23bc0     02 E4 85 F1 | 	sub	objptr, #2
23bc4     F2 14 E2 FA | 	rdword	arg02, objptr
23bc8     02 14 66 F0 | 	shl	arg02, #2
23bcc     3C E4 85 F1 | 	sub	objptr, #60
23bd0     04 16 06 F6 | 	mov	arg03, #4
23bd4     11 12 06 F6 | 	mov	arg01, #17
23bd8     10 F6 BF FD | 	call	#_hg010b_spin2_setspritepos
23bdc                 | ' setcursorcolor(fc)
23bdc     13 13 02 F6 | 	mov	arg01, local01
23be0     24 F5 BF FD | 	call	#_hg010b_spin2_setcursorcolor
23be4     14 FB 01 F6 | 	mov	result1, local02
23be8     00 FC 05 F6 | 	mov	result2, #0
23bec     A7 F0 03 F6 | 	mov	ptra, fp
23bf0     B2 00 A0 FD | 	call	#popregs_
23bf4                 | _hg010b_spin2_cls_ret
23bf4     2D 00 64 FD | 	ret
23bf8                 | 
23bf8                 | ' 
23bf8                 | ' ''---------- Output a char at the cursor position, move the cursor 
23bf8                 | ' 
23bf8                 | ' pub putchar(achar) | c,x,y,l,newcpl
23bf8                 | _hg010b_spin2_putchar
23bf8     02 4A 05 F6 | 	mov	COUNT_, #2
23bfc     A8 00 A0 FD | 	call	#pushregs_
23c00     09 27 02 F6 | 	mov	local01, arg01
23c04                 | ' 
23c04                 | ' if achar==10
23c04     0A 26 0E F2 | 	cmp	local01, #10 wz
23c08                 | '   crlf()
23c08     74 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
23c0c                 | ' if achar==9
23c0c     09 26 0E F2 | 	cmp	local01, #9 wz
23c10                 | '   cursor_x:=(cursor_x& %11110000)+16
23c10     3C E4 05 A1 |  if_e	add	objptr, #60
23c14     F2 16 E2 AA |  if_e	rdword	arg03, objptr
23c18     F0 16 06 A5 |  if_e	and	arg03, #240
23c1c     10 16 06 A1 |  if_e	add	arg03, #16
23c20     F2 16 52 AC |  if_e	wrword	arg03, objptr
23c24     3C E4 85 A1 |  if_e	sub	objptr, #60
23c28                 | '   
23c28                 | ' if (achar<>9) && (achar<>10) 
23c28     09 26 0E F2 | 	cmp	local01, #9 wz
23c2c     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
23c30     A8 00 90 AD |  if_e	jmp	#LR__2830
23c34                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23c34     3C E4 05 F1 | 	add	objptr, #60
23c38     F2 12 E2 FA | 	rdword	arg01, objptr
23c3c     02 E4 05 F1 | 	add	objptr, #2
23c40     F2 14 C2 FA | 	rdbyte	arg02, objptr
23c44     04 14 66 F0 | 	shl	arg02, #4
23c48     04 14 06 F1 | 	add	arg02, #4
23c4c     03 E4 05 F1 | 	add	objptr, #3
23c50     F2 18 02 FB | 	rdlong	arg04, objptr
23c54     04 E4 05 F1 | 	add	objptr, #4
23c58     F2 1A 02 FB | 	rdlong	arg05, objptr
23c5c     45 E4 85 F1 | 	sub	objptr, #69
23c60     13 17 02 F6 | 	mov	arg03, local01
23c64     0C FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
23c68     04 E4 05 F1 | 	add	objptr, #4
23c6c     F2 12 02 FB | 	rdlong	arg01, objptr
23c70     1C 00 00 FF 
23c74     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23c78     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23c7c     3A E4 05 F1 | 	add	objptr, #58
23c80     F2 1A C2 FA | 	rdbyte	arg05, objptr
23c84     0D 17 02 FD | 	qmul	arg03, arg05
23c88                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23c88     1C 00 00 FF 
23c8c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23c90     02 E4 85 F1 | 	sub	objptr, #2
23c94     F2 28 E2 FA | 	rdword	local02, objptr
23c98     01 28 46 F0 | 	shr	local02, #1
23c9c     13 15 02 F6 | 	mov	arg02, local01
23ca0     01 16 06 F6 | 	mov	arg03, #1
23ca4     00 18 06 F6 | 	mov	arg04, #0
23ca8     01 1A 06 F6 | 	mov	arg05, #1
23cac     0B 00 00 FF 
23cb0     90 E4 05 F1 | 	add	objptr, ##5776
23cb4     18 26 62 FD | 	getqx	local01
23cb8     14 27 02 F1 | 	add	local01, local02
23cbc     13 13 02 F1 | 	add	arg01, local01
23cc0     18 0D B0 FD | 	call	#_psram_spin2_fill
23cc4                 | '   cursor_x+=2
23cc4     0B 00 00 FF 
23cc8     90 E4 85 F1 | 	sub	objptr, ##5776
23ccc     F2 28 E2 FA | 	rdword	local02, objptr
23cd0     02 28 06 F1 | 	add	local02, #2
23cd4     F2 28 52 FC | 	wrword	local02, objptr
23cd8     3C E4 85 F1 | 	sub	objptr, #60
23cdc                 | LR__2830
23cdc                 | ' 
23cdc                 | ' if cursor_x>=256
23cdc     3C E4 05 F1 | 	add	objptr, #60
23ce0     F2 28 E2 FA | 	rdword	local02, objptr
23ce4     3C E4 85 F1 | 	sub	objptr, #60
23ce8     00 29 56 F2 | 	cmps	local02, #256 wc
23cec     64 00 90 CD |  if_b	jmp	#LR__2832
23cf0                 | '   cursor_x:=0
23cf0     3C E4 05 F1 | 	add	objptr, #60
23cf4     F2 00 58 FC | 	wrword	#0, objptr
23cf8                 | '   cursor_y+=1
23cf8     02 E4 05 F1 | 	add	objptr, #2
23cfc     F2 28 C2 FA | 	rdbyte	local02, objptr
23d00     01 28 06 F1 | 	add	local02, #1
23d04     F2 28 42 FC | 	wrbyte	local02, objptr
23d08                 | '   if cursor_y>st_lines-1
23d08     C3 E4 05 F1 | 	add	objptr, #195
23d0c     F2 28 02 FB | 	rdlong	local02, objptr
23d10     01 28 86 F1 | 	sub	local02, #1
23d14     C3 E4 85 F1 | 	sub	objptr, #195
23d18     F2 16 C2 FA | 	rdbyte	arg03, objptr
23d1c     3E E4 85 F1 | 	sub	objptr, #62
23d20     14 17 5A F2 | 	cmps	arg03, local02 wcz
23d24     2C 00 90 ED |  if_be	jmp	#LR__2831
23d28                 | '     scrollup2()
23d28     00 12 06 F6 | 	mov	arg01, #0
23d2c     01 00 00 FF 
23d30     58 14 06 F6 | 	mov	arg02, ##600
23d34     10 16 06 F6 | 	mov	arg03, #16
23d38     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
23d3c                 | '     cursor_y:=st_lines-1
23d3c     01 E5 05 F1 | 	add	objptr, #257
23d40     F2 28 02 FB | 	rdlong	local02, objptr
23d44     01 28 86 F1 | 	sub	local02, #1
23d48     C3 E4 85 F1 | 	sub	objptr, #195
23d4c     F2 28 42 FC | 	wrbyte	local02, objptr
23d50     3E E4 85 F1 | 	sub	objptr, #62
23d54                 | LR__2831
23d54                 | LR__2832
23d54                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23d54     3C E4 05 F1 | 	add	objptr, #60
23d58     F2 14 E2 FA | 	rdword	arg02, objptr
23d5c     02 14 66 F0 | 	shl	arg02, #2
23d60     02 E4 05 F1 | 	add	objptr, #2
23d64     F2 16 C2 FA | 	rdbyte	arg03, objptr
23d68     3E E4 85 F1 | 	sub	objptr, #62
23d6c     04 16 66 F0 | 	shl	arg03, #4
23d70     04 16 06 F1 | 	add	arg03, #4
23d74     11 12 06 F6 | 	mov	arg01, #17
23d78     70 F4 BF FD | 	call	#_hg010b_spin2_setspritepos
23d7c     A7 F0 03 F6 | 	mov	ptra, fp
23d80     B2 00 A0 FD | 	call	#popregs_
23d84                 | _hg010b_spin2_putchar_ret
23d84     2D 00 64 FD | 	ret
23d88                 | 
23d88                 | '     
23d88                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23d88                 | ' 
23d88                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23d88                 | _hg010b_spin2_putchar2
23d88     02 4A 05 F6 | 	mov	COUNT_, #2
23d8c     A8 00 A0 FD | 	call	#pushregs_
23d90     09 27 02 F6 | 	mov	local01, arg01
23d94                 | ' 
23d94                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23d94     3C E4 05 F1 | 	add	objptr, #60
23d98     F2 12 E2 FA | 	rdword	arg01, objptr
23d9c     02 E4 05 F1 | 	add	objptr, #2
23da0     F2 14 C2 FA | 	rdbyte	arg02, objptr
23da4     04 14 66 F0 | 	shl	arg02, #4
23da8     04 14 06 F1 | 	add	arg02, #4
23dac     03 E4 05 F1 | 	add	objptr, #3
23db0     F2 18 02 FB | 	rdlong	arg04, objptr
23db4     04 E4 05 F1 | 	add	objptr, #4
23db8     F2 1A 02 FB | 	rdlong	arg05, objptr
23dbc     45 E4 85 F1 | 	sub	objptr, #69
23dc0     13 17 02 F6 | 	mov	arg03, local01
23dc4     AC FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
23dc8     04 E4 05 F1 | 	add	objptr, #4
23dcc     F2 12 02 FB | 	rdlong	arg01, objptr
23dd0     1C 00 00 FF 
23dd4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23dd8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23ddc     3A E4 05 F1 | 	add	objptr, #58
23de0     F2 1A C2 FA | 	rdbyte	arg05, objptr
23de4     0D 17 02 FD | 	qmul	arg03, arg05
23de8                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23de8     1C 00 00 FF 
23dec     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23df0     02 E4 85 F1 | 	sub	objptr, #2
23df4     F2 28 E2 FA | 	rdword	local02, objptr
23df8     01 28 46 F0 | 	shr	local02, #1
23dfc     13 15 02 F6 | 	mov	arg02, local01
23e00     01 16 06 F6 | 	mov	arg03, #1
23e04     00 18 06 F6 | 	mov	arg04, #0
23e08     01 1A 06 F6 | 	mov	arg05, #1
23e0c     0B 00 00 FF 
23e10     90 E4 05 F1 | 	add	objptr, ##5776
23e14     18 26 62 FD | 	getqx	local01
23e18     14 27 02 F1 | 	add	local01, local02
23e1c     13 13 02 F1 | 	add	arg01, local01
23e20     B8 0B B0 FD | 	call	#_psram_spin2_fill
23e24                 | ' 
23e24                 | ' cursor_x+=2
23e24     0B 00 00 FF 
23e28     90 E4 85 F1 | 	sub	objptr, ##5776
23e2c     F2 28 E2 FA | 	rdword	local02, objptr
23e30     02 28 06 F1 | 	add	local02, #2
23e34     F2 28 52 FC | 	wrword	local02, objptr
23e38                 | ' if cursor_x>=256
23e38     14 29 32 F9 | 	getword	local02, local02, #0
23e3c     3C E4 85 F1 | 	sub	objptr, #60
23e40     00 29 56 F2 | 	cmps	local02, #256 wc
23e44     64 00 90 CD |  if_b	jmp	#LR__2841
23e48                 | '   cursor_x:=0
23e48     3C E4 05 F1 | 	add	objptr, #60
23e4c     F2 00 58 FC | 	wrword	#0, objptr
23e50                 | '   cursor_y+=1
23e50     02 E4 05 F1 | 	add	objptr, #2
23e54     F2 28 C2 FA | 	rdbyte	local02, objptr
23e58     01 28 06 F1 | 	add	local02, #1
23e5c     F2 28 42 FC | 	wrbyte	local02, objptr
23e60                 | '   if cursor_y>st_lines-1
23e60     C3 E4 05 F1 | 	add	objptr, #195
23e64     F2 28 02 FB | 	rdlong	local02, objptr
23e68     01 28 86 F1 | 	sub	local02, #1
23e6c     C3 E4 85 F1 | 	sub	objptr, #195
23e70     F2 16 C2 FA | 	rdbyte	arg03, objptr
23e74     3E E4 85 F1 | 	sub	objptr, #62
23e78     14 17 5A F2 | 	cmps	arg03, local02 wcz
23e7c     2C 00 90 ED |  if_be	jmp	#LR__2840
23e80                 | '     scrollup2()
23e80     00 12 06 F6 | 	mov	arg01, #0
23e84     01 00 00 FF 
23e88     58 14 06 F6 | 	mov	arg02, ##600
23e8c     10 16 06 F6 | 	mov	arg03, #16
23e90     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
23e94                 | '     cursor_y:=st_lines-1
23e94     01 E5 05 F1 | 	add	objptr, #257
23e98     F2 28 02 FB | 	rdlong	local02, objptr
23e9c     01 28 86 F1 | 	sub	local02, #1
23ea0     C3 E4 85 F1 | 	sub	objptr, #195
23ea4     F2 28 42 FC | 	wrbyte	local02, objptr
23ea8     3E E4 85 F1 | 	sub	objptr, #62
23eac                 | LR__2840
23eac                 | LR__2841
23eac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
23eac     3C E4 05 F1 | 	add	objptr, #60
23eb0     F2 14 E2 FA | 	rdword	arg02, objptr
23eb4     02 14 66 F0 | 	shl	arg02, #2
23eb8     02 E4 05 F1 | 	add	objptr, #2
23ebc     F2 16 C2 FA | 	rdbyte	arg03, objptr
23ec0     3E E4 85 F1 | 	sub	objptr, #62
23ec4     04 16 66 F0 | 	shl	arg03, #4
23ec8     04 16 06 F1 | 	add	arg03, #4
23ecc     11 12 06 F6 | 	mov	arg01, #17
23ed0     18 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23ed4     A7 F0 03 F6 | 	mov	ptra, fp
23ed8     B2 00 A0 FD | 	call	#popregs_
23edc                 | _hg010b_spin2_putchar2_ret
23edc     2D 00 64 FD | 	ret
23ee0                 | 
23ee0                 | ' ''--------- Output a string at the cursor position, move the cursor  
23ee0                 | ' 
23ee0                 | ' pub write(text) | iii,c,ncx,ncy
23ee0                 | _hg010b_spin2_write
23ee0     04 4A 05 F6 | 	mov	COUNT_, #4
23ee4     A8 00 A0 FD | 	call	#pushregs_
23ee8     09 27 02 F6 | 	mov	local01, arg01
23eec                 | ' 
23eec                 | ' repeat iii from 0 to strsize(text)-1
23eec     00 28 06 F6 | 	mov	local02, #0
23ef0     13 13 02 F6 | 	mov	arg01, local01
23ef4     09 2B 02 F6 | 	mov	local03, arg01
23ef8     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
23efc                 | LR__2850
23efc     15 FB C9 FA | 	rdbyte	result1, local03 wz
23f00     01 2A 06 51 |  if_ne	add	local03, #1
23f04     F4 FF 9F 5D |  if_ne	jmp	#LR__2850
23f08                 | LR__2851
23f08     09 2B 82 F1 | 	sub	local03, arg01
23f0c     01 2A 86 F1 | 	sub	local03, #1
23f10     00 2A 56 F2 | 	cmps	local03, #0 wc
23f14     01 2C 86 F6 | 	negc	local04, #1
23f18     16 2B 02 F1 | 	add	local03, local04
23f1c                 | LR__2852
23f1c                 | '   putchar2(byte[text+iii])
23f1c     13 13 02 F6 | 	mov	arg01, local01
23f20     14 13 02 F1 | 	add	arg01, local02
23f24     09 13 C2 FA | 	rdbyte	arg01, arg01
23f28     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
23f2c     16 29 02 F1 | 	add	local02, local04
23f30     15 29 0A F2 | 	cmp	local02, local03 wz
23f34     E4 FF 9F 5D |  if_ne	jmp	#LR__2852
23f38     A7 F0 03 F6 | 	mov	ptra, fp
23f3c     B2 00 A0 FD | 	call	#popregs_
23f40                 | _hg010b_spin2_write_ret
23f40     2D 00 64 FD | 	ret
23f44                 | 
23f44                 | '    
23f44                 | ' ' a version for text scrolling in Basic shifted 4 lines down
23f44                 | ' 
23f44                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
23f44                 | _hg010b_spin2_scrollup2
23f44     03 4A 05 F6 | 	mov	COUNT_, #3
23f48     A8 00 A0 FD | 	call	#pushregs_
23f4c                 | ' 	
23f4c                 | ' repeat i from 4 to 579 
23f4c     04 26 06 F6 | 	mov	local01, #4
23f50                 | LR__2860
23f50     DD E4 05 F1 | 	add	objptr, #221
23f54     F2 14 02 FB | 	rdlong	arg02, objptr
23f58     13 1B 02 F6 | 	mov	arg05, local01
23f5c     10 1A 06 F1 | 	add	arg05, #16
23f60     02 1A 66 F0 | 	shl	arg05, #2
23f64     14 E4 05 F1 | 	add	objptr, #20
23f68     F2 16 02 FB | 	rdlong	arg03, objptr
23f6c     0B 1B 02 FD | 	qmul	arg05, arg03
23f70                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
23f70     02 16 66 F0 | 	shl	arg03, #2
23f74     F4 03 00 FF 
23f78     00 12 06 F6 | 	mov	arg01, ##518144
23f7c     0A 00 00 FF 
23f80     DB E5 05 F1 | 	add	objptr, ##5595
23f84     18 1A 62 FD | 	getqx	arg05
23f88     0D 15 02 F1 | 	add	arg02, arg05
23f8c     14 09 B0 FD | 	call	#_psram_spin2_read1
23f90     0A 00 00 FF 
23f94     EF E5 85 F1 | 	sub	objptr, ##5615
23f98     F2 14 02 FB | 	rdlong	arg02, objptr
23f9c     13 1B 02 F6 | 	mov	arg05, local01
23fa0     02 1A 66 F0 | 	shl	arg05, #2
23fa4     14 E4 05 F1 | 	add	objptr, #20
23fa8     F2 16 02 FB | 	rdlong	arg03, objptr
23fac     0B 1B 02 FD | 	qmul	arg05, arg03
23fb0                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23fb0     02 16 66 F0 | 	shl	arg03, #2
23fb4     F4 03 00 FF 
23fb8     00 12 06 F6 | 	mov	arg01, ##518144
23fbc     0A 00 00 FF 
23fc0     DB E5 05 F1 | 	add	objptr, ##5595
23fc4     18 1A 62 FD | 	getqx	arg05
23fc8     0D 15 02 F1 | 	add	arg02, arg05
23fcc     70 09 B0 FD | 	call	#_psram_spin2_write
23fd0     0B 00 00 FF 
23fd4     CC E4 85 F1 | 	sub	objptr, ##5836
23fd8     01 26 06 F1 | 	add	local01, #1
23fdc     01 00 00 FF 
23fe0     44 26 16 F2 | 	cmp	local01, ##580 wc
23fe4     68 FF 9F CD |  if_b	jmp	#LR__2860
23fe8                 | ' 
23fe8                 | ' repeat i from 580 to 599
23fe8     01 00 00 FF 
23fec     44 26 06 F6 | 	mov	local01, ##580
23ff0                 | LR__2861
23ff0                 | '    fastline(0,1023,i,write_background)   
23ff0     45 E4 05 F1 | 	add	objptr, #69
23ff4     F2 18 02 FB | 	rdlong	arg04, objptr
23ff8     45 E4 85 F1 | 	sub	objptr, #69
23ffc     00 12 06 F6 | 	mov	arg01, #0
24000     09 14 CE F9 | 	bmask	arg02, #9
24004     13 17 02 F6 | 	mov	arg03, local01
24008     CC F3 BF FD | 	call	#_hg010b_spin2_fastline
2400c     01 26 06 F1 | 	add	local01, #1
24010     01 00 00 FF 
24014     58 26 16 F2 | 	cmp	local01, ##600 wc
24018     D4 FF 9F CD |  if_b	jmp	#LR__2861
2401c                 | ' repeat i from 0 to 3
2401c     00 26 06 F6 | 	mov	local01, #0
24020                 | LR__2862
24020                 | '    fastline(0,1023,i,write_background)      
24020     45 E4 05 F1 | 	add	objptr, #69
24024     F2 18 02 FB | 	rdlong	arg04, objptr
24028     45 E4 85 F1 | 	sub	objptr, #69
2402c     00 12 06 F6 | 	mov	arg01, #0
24030     09 14 CE F9 | 	bmask	arg02, #9
24034     13 17 02 F6 | 	mov	arg03, local01
24038     9C F3 BF FD | 	call	#_hg010b_spin2_fastline
2403c     01 26 06 F1 | 	add	local01, #1
24040     04 26 56 F2 | 	cmps	local01, #4 wc
24044     D8 FF 9F CD |  if_b	jmp	#LR__2862
24048                 | ' 
24048                 | ' repeat i from 0 to 35
24048     00 26 06 F6 | 	mov	local01, #0
2404c                 | LR__2863
2404c     13 1B 02 F6 | 	mov	arg05, local01
24050     01 1A 06 F1 | 	add	arg05, #1
24054     1C 00 00 FF 
24058     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2405c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24060     0B 1B 02 FD | 	qmul	arg05, arg03
24064                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
24064     04 E4 05 F1 | 	add	objptr, #4
24068     F2 14 02 FB | 	rdlong	arg02, objptr
2406c     1C 00 00 FF 
24070     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
24074     F4 03 00 FF 
24078     00 12 06 F6 | 	mov	arg01, ##518144
2407c     0B 00 00 FF 
24080     C8 E4 05 F1 | 	add	objptr, ##5832
24084     18 1A 62 FD | 	getqx	arg05
24088     0D 15 02 F1 | 	add	arg02, arg05
2408c     14 08 B0 FD | 	call	#_psram_spin2_read1
24090     1C 00 00 FF 
24094     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
24098     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2409c     0B 27 02 FD | 	qmul	local01, arg03
240a0                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
240a0     0B 00 00 FF 
240a4     C8 E4 85 F1 | 	sub	objptr, ##5832
240a8     F2 14 02 FB | 	rdlong	arg02, objptr
240ac     1C 00 00 FF 
240b0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
240b4     F4 03 00 FF 
240b8     00 12 06 F6 | 	mov	arg01, ##518144
240bc     0B 00 00 FF 
240c0     C8 E4 05 F1 | 	add	objptr, ##5832
240c4     18 1A 62 FD | 	getqx	arg05
240c8     0D 15 02 F1 | 	add	arg02, arg05
240cc     70 08 B0 FD | 	call	#_psram_spin2_write
240d0     0B 00 00 FF 
240d4     CC E4 85 F1 | 	sub	objptr, ##5836
240d8     01 26 06 F1 | 	add	local01, #1
240dc     24 26 56 F2 | 	cmps	local01, #36 wc
240e0     68 FF 9F CD |  if_b	jmp	#LR__2863
240e4                 | ' repeat i from 0 to timings[7]-1
240e4     00 26 06 F6 | 	mov	local01, #0
240e8     1C 00 00 FF 
240ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
240f0     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
240f4     1C 00 00 FF 
240f8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
240fc     01 28 86 F1 | 	sub	local02, #1
24100     00 28 56 F2 | 	cmps	local02, #0 wc
24104     01 2A 86 F6 | 	negc	local03, #1
24108     15 29 02 F1 | 	add	local02, local03
2410c                 | LR__2864
2410c                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
2410c     04 E4 05 F1 | 	add	objptr, #4
24110     F2 12 02 FB | 	rdlong	arg01, objptr
24114     1C 00 00 FF 
24118     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2411c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24120     1C 00 00 FF 
24124     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
24128     0D 19 02 F6 | 	mov	arg04, arg05
2412c     03 18 66 F0 | 	shl	arg04, #3
24130     0D 19 02 F1 | 	add	arg04, arg05
24134     02 18 66 F0 | 	shl	arg04, #2
24138     13 19 02 F1 | 	add	arg04, local01
2413c     0C 13 02 F1 | 	add	arg01, arg04
24140     20 14 06 F6 | 	mov	arg02, #32
24144     01 16 06 F6 | 	mov	arg03, #1
24148     00 18 06 F6 | 	mov	arg04, #0
2414c     01 1A 06 F6 | 	mov	arg05, #1
24150     0B 00 00 FF 
24154     C8 E4 05 F1 | 	add	objptr, ##5832
24158     80 08 B0 FD | 	call	#_psram_spin2_fill
2415c     0B 00 00 FF 
24160     CC E4 85 F1 | 	sub	objptr, ##5836
24164     15 27 02 F1 | 	add	local01, local03
24168     14 27 0A F2 | 	cmp	local01, local02 wz
2416c     9C FF 9F 5D |  if_ne	jmp	#LR__2864
24170     A7 F0 03 F6 | 	mov	ptra, fp
24174     B2 00 A0 FD | 	call	#popregs_
24178                 | _hg010b_spin2_scrollup2_ret
24178     2D 00 64 FD | 	ret
2417c                 | 
2417c                 | '  
2417c                 | ' ''----------- Scroll the screen one line down 
2417c                 | ' 
2417c                 | ' pub scrolldown(start=0) | i
2417c                 | _hg010b_spin2_scrolldown
2417c     05 4A 05 F6 | 	mov	COUNT_, #5
24180     A8 00 A0 FD | 	call	#pushregs_
24184     09 27 02 F6 | 	mov	local01, arg01
24188                 | ' 
24188                 | ' repeat i from 579 to (start*16)+4
24188     01 00 00 FF 
2418c     43 28 06 F6 | 	mov	local02, ##579
24190     13 2B 02 F6 | 	mov	local03, local01
24194     04 2A 66 F0 | 	shl	local03, #4
24198     04 2A 06 F1 | 	add	local03, #4
2419c     01 00 00 FF 
241a0     43 2A 56 F2 | 	cmps	local03, ##579 wc
241a4     01 2C 86 F6 | 	negc	local04, #1
241a8     16 2F 02 F6 | 	mov	local05, local04
241ac     16 2B 02 F1 | 	add	local03, local04
241b0                 | LR__2870
241b0     DD E4 05 F1 | 	add	objptr, #221
241b4     F2 14 02 FB | 	rdlong	arg02, objptr
241b8     14 2D 02 F6 | 	mov	local04, local02
241bc     02 2C 66 F0 | 	shl	local04, #2
241c0     14 E4 05 F1 | 	add	objptr, #20
241c4     F2 16 02 FB | 	rdlong	arg03, objptr
241c8     0B 2D 02 FD | 	qmul	local04, arg03
241cc                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
241cc     02 16 66 F0 | 	shl	arg03, #2
241d0     F4 03 00 FF 
241d4     00 12 06 F6 | 	mov	arg01, ##518144
241d8     0A 00 00 FF 
241dc     DB E5 05 F1 | 	add	objptr, ##5595
241e0     18 2C 62 FD | 	getqx	local04
241e4     16 15 02 F1 | 	add	arg02, local04
241e8     B8 06 B0 FD | 	call	#_psram_spin2_read1
241ec     0A 00 00 FF 
241f0     EF E5 85 F1 | 	sub	objptr, ##5615
241f4     F2 14 02 FB | 	rdlong	arg02, objptr
241f8     14 2D 02 F6 | 	mov	local04, local02
241fc     10 2C 06 F1 | 	add	local04, #16
24200     02 2C 66 F0 | 	shl	local04, #2
24204     14 E4 05 F1 | 	add	objptr, #20
24208     F2 16 02 FB | 	rdlong	arg03, objptr
2420c     0B 2D 02 FD | 	qmul	local04, arg03
24210                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
24210     02 16 66 F0 | 	shl	arg03, #2
24214     F4 03 00 FF 
24218     00 12 06 F6 | 	mov	arg01, ##518144
2421c     0A 00 00 FF 
24220     DB E5 05 F1 | 	add	objptr, ##5595
24224     18 2C 62 FD | 	getqx	local04
24228     16 15 02 F1 | 	add	arg02, local04
2422c     10 07 B0 FD | 	call	#_psram_spin2_write
24230     0B 00 00 FF 
24234     CC E4 85 F1 | 	sub	objptr, ##5836
24238     17 29 02 F1 | 	add	local02, local05
2423c     15 29 0A F2 | 	cmp	local02, local03 wz
24240     6C FF 9F 5D |  if_ne	jmp	#LR__2870
24244                 | ' 
24244                 | ' repeat i from (start*16)+4 to (start*16)+19
24244     13 29 02 F6 | 	mov	local02, local01
24248     04 28 66 F0 | 	shl	local02, #4
2424c     04 28 06 F1 | 	add	local02, #4
24250     13 2F 02 F6 | 	mov	local05, local01
24254     04 2E 66 F0 | 	shl	local05, #4
24258     13 2E 06 F1 | 	add	local05, #19
2425c     13 2D 02 F6 | 	mov	local04, local01
24260     04 2C 66 F0 | 	shl	local04, #4
24264     04 2C 06 F1 | 	add	local04, #4
24268     16 2F 52 F2 | 	cmps	local05, local04 wc
2426c     01 2C 86 F6 | 	negc	local04, #1
24270     16 2B 02 F6 | 	mov	local03, local04
24274     16 2F 02 F1 | 	add	local05, local04
24278                 | LR__2871
24278                 | '    fastline(0,1023,i,write_background)    
24278     45 E4 05 F1 | 	add	objptr, #69
2427c     F2 18 02 FB | 	rdlong	arg04, objptr
24280     45 E4 85 F1 | 	sub	objptr, #69
24284     00 12 06 F6 | 	mov	arg01, #0
24288     09 14 CE F9 | 	bmask	arg02, #9
2428c     14 17 02 F6 | 	mov	arg03, local02
24290     44 F1 BF FD | 	call	#_hg010b_spin2_fastline
24294     15 29 02 F1 | 	add	local02, local03
24298     17 29 0A F2 | 	cmp	local02, local05 wz
2429c     D8 FF 9F 5D |  if_ne	jmp	#LR__2871
242a0                 | '    
242a0                 | ' repeat i from 35 to start
242a0     23 28 06 F6 | 	mov	local02, #35
242a4     23 26 56 F2 | 	cmps	local01, #35 wc
242a8     01 2C 86 F6 | 	negc	local04, #1
242ac     13 2F 02 F6 | 	mov	local05, local01
242b0     16 2F 02 F1 | 	add	local05, local04
242b4                 | LR__2872
242b4                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
242b4     04 E4 05 F1 | 	add	objptr, #4
242b8     F2 14 02 FB | 	rdlong	arg02, objptr
242bc     14 2B 02 F6 | 	mov	local03, local02
242c0     07 2A 66 F0 | 	shl	local03, #7
242c4     15 15 02 F1 | 	add	arg02, local03
242c8     F4 03 00 FF 
242cc     00 12 06 F6 | 	mov	arg01, ##518144
242d0     80 16 06 F6 | 	mov	arg03, #128
242d4     0B 00 00 FF 
242d8     C8 E4 05 F1 | 	add	objptr, ##5832
242dc     C4 05 B0 FD | 	call	#_psram_spin2_read1
242e0                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
242e0     0B 00 00 FF 
242e4     C8 E4 85 F1 | 	sub	objptr, ##5832
242e8     F2 14 02 FB | 	rdlong	arg02, objptr
242ec     14 2B 02 F6 | 	mov	local03, local02
242f0     01 2A 06 F1 | 	add	local03, #1
242f4     07 2A 66 F0 | 	shl	local03, #7
242f8     15 15 02 F1 | 	add	arg02, local03
242fc     F4 03 00 FF 
24300     00 12 06 F6 | 	mov	arg01, ##518144
24304     80 16 06 F6 | 	mov	arg03, #128
24308     0B 00 00 FF 
2430c     C8 E4 05 F1 | 	add	objptr, ##5832
24310     2C 06 B0 FD | 	call	#_psram_spin2_write
24314     0B 00 00 FF 
24318     CC E4 85 F1 | 	sub	objptr, ##5836
2431c     16 29 02 F1 | 	add	local02, local04
24320     17 29 0A F2 | 	cmp	local02, local05 wz
24324     8C FF 9F 5D |  if_ne	jmp	#LR__2872
24328                 | ' repeat i from 0 to 127
24328     00 28 06 F6 | 	mov	local02, #0
2432c                 | LR__2873
2432c                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
2432c     04 E4 05 F1 | 	add	objptr, #4
24330     F2 12 02 FB | 	rdlong	arg01, objptr
24334     13 2F 02 F6 | 	mov	local05, local01
24338     07 2E 66 F0 | 	shl	local05, #7
2433c     17 13 02 F1 | 	add	arg01, local05
24340     14 13 02 F1 | 	add	arg01, local02
24344     20 14 06 F6 | 	mov	arg02, #32
24348     01 16 06 F6 | 	mov	arg03, #1
2434c     00 18 06 F6 | 	mov	arg04, #0
24350     01 1A 06 F6 | 	mov	arg05, #1
24354     0B 00 00 FF 
24358     C8 E4 05 F1 | 	add	objptr, ##5832
2435c     7C 06 B0 FD | 	call	#_psram_spin2_fill
24360     0B 00 00 FF 
24364     CC E4 85 F1 | 	sub	objptr, ##5836
24368     01 28 06 F1 | 	add	local02, #1
2436c     80 28 56 F2 | 	cmps	local02, #128 wc
24370     B8 FF 9F CD |  if_b	jmp	#LR__2873
24374     A7 F0 03 F6 | 	mov	ptra, fp
24378     B2 00 A0 FD | 	call	#popregs_
2437c                 | _hg010b_spin2_scrolldown_ret
2437c     2D 00 64 FD | 	ret
24380                 | 
24380                 | ' 
24380                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
24380                 | ' 
24380                 | ' pub crlf()
24380                 | _hg010b_spin2_crlf
24380                 | ' 
24380                 | ' cursor_x:=leading_spaces*2
24380     01 00 00 FF 
24384     B6 E4 05 F1 | 	add	objptr, ##694
24388     F2 16 02 FB | 	rdlong	arg03, objptr
2438c     01 16 66 F0 | 	shl	arg03, #1
24390     01 00 00 FF 
24394     7A E4 85 F1 | 	sub	objptr, ##634
24398     F2 16 52 FC | 	wrword	arg03, objptr
2439c                 | ' cursor_y+=1
2439c     02 E4 05 F1 | 	add	objptr, #2
243a0     F2 16 C2 FA | 	rdbyte	arg03, objptr
243a4     01 16 06 F1 | 	add	arg03, #1
243a8     F2 16 42 FC | 	wrbyte	arg03, objptr
243ac                 | ' if cursor_y>st_lines-1
243ac     C3 E4 05 F1 | 	add	objptr, #195
243b0     F2 16 02 FB | 	rdlong	arg03, objptr
243b4     01 16 86 F1 | 	sub	arg03, #1
243b8     C3 E4 85 F1 | 	sub	objptr, #195
243bc     F2 14 C2 FA | 	rdbyte	arg02, objptr
243c0     3E E4 85 F1 | 	sub	objptr, #62
243c4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
243c8     2C 00 90 ED |  if_be	jmp	#LR__2880
243cc                 | '   scrollup2()
243cc     00 12 06 F6 | 	mov	arg01, #0
243d0     01 00 00 FF 
243d4     58 14 06 F6 | 	mov	arg02, ##600
243d8     10 16 06 F6 | 	mov	arg03, #16
243dc     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
243e0                 | '   cursor_y:=st_lines-1
243e0     01 E5 05 F1 | 	add	objptr, #257
243e4     F2 16 02 FB | 	rdlong	arg03, objptr
243e8     01 16 86 F1 | 	sub	arg03, #1
243ec     C3 E4 85 F1 | 	sub	objptr, #195
243f0     F2 16 42 FC | 	wrbyte	arg03, objptr
243f4     3E E4 85 F1 | 	sub	objptr, #62
243f8                 | LR__2880
243f8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
243f8     3C E4 05 F1 | 	add	objptr, #60
243fc     F2 14 E2 FA | 	rdword	arg02, objptr
24400     02 14 66 F0 | 	shl	arg02, #2
24404     02 E4 05 F1 | 	add	objptr, #2
24408     F2 16 C2 FA | 	rdbyte	arg03, objptr
2440c     3E E4 85 F1 | 	sub	objptr, #62
24410     04 16 66 F0 | 	shl	arg03, #4
24414     04 16 06 F1 | 	add	arg03, #4
24418     11 12 06 F6 | 	mov	arg01, #17
2441c     CC ED BF FD | 	call	#_hg010b_spin2_setspritepos
24420                 | _hg010b_spin2_crlf_ret
24420     2D 00 64 FD | 	ret
24424                 | 
24424                 | ' 
24424                 | ' 
24424                 | ' '*************************************************************************
24424                 | ' '                                                                        *
24424                 | ' '  Conversions                                                           *
24424                 | ' '                                                                        *
24424                 | ' '*************************************************************************
24424                 | ' 
24424                 | ' ''---------- Convert a integer to dec string, return a pointer
24424                 | ' 
24424                 | ' pub inttostr(i):result |q,pos,k,j
24424                 | _hg010b_spin2_inttostr
24424     03 4A 05 F6 | 	mov	COUNT_, #3
24428     A8 00 A0 FD | 	call	#pushregs_
2442c     09 27 0A F6 | 	mov	local01, arg01 wz
24430                 | ' 
24430                 | ' j:=i
24430                 | ' pos:=10
24430     0A 28 06 F6 | 	mov	local02, #10
24434                 | ' k:=0
24434     00 2A 06 F6 | 	mov	local03, #0
24438                 | ' 
24438                 | ' if (j==0)
24438                 | '   n_string[0]:=48
24438     4D E4 05 A1 |  if_e	add	objptr, #77
2443c     F2 60 48 AC |  if_e	wrbyte	#48, objptr
24440                 | '   n_string[1]:=0
24440     01 E4 05 A1 |  if_e	add	objptr, #1
24444     F2 00 48 AC |  if_e	wrbyte	#0, objptr
24448     4E E4 85 A1 |  if_e	sub	objptr, #78
2444c     C4 00 90 AD |  if_e	jmp	#LR__2896
24450                 | ' 
24450                 | ' else
24450                 | '   if (j<0)
24450     13 27 52 F6 | 	abs	local01, local01 wc
24454                 | '     j:=0-j
24454                 | '     k:=45
24454     2D 2A 06 C6 |  if_b	mov	local03, #45
24458                 | ' 
24458                 | '   n_string[11]:=0
24458     58 E4 05 F1 | 	add	objptr, #88
2445c     F2 00 48 FC | 	wrbyte	#0, objptr
24460     58 E4 85 F1 | 	sub	objptr, #88
24464     97 24 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
24468                 | '   repeat while (pos>-1)
24468                 | LR__2890
24468     00 28 56 F2 | 	cmps	local02, #0 wc
2446c     40 00 90 CD |  if_b	jmp	#LR__2892
24470     13 FB 51 F6 | 	abs	result1, local01 wc
24474     0A FA 15 FD | 	qdiv	result1, #10
24478                 | '     q:=j//10
24478     19 FA 61 FD | 	getqy	result1
2447c     FD FA 81 F6 | 	negc	result1, result1
24480     13 27 52 F6 | 	abs	local01, local01 wc
24484     0A 26 16 FD | 	qdiv	local01, #10
24488                 | '     q:=48+q
24488     30 FA 05 F1 | 	add	result1, #48
2448c                 | '     n_string[pos]:=q
2448c     14 27 02 F6 | 	mov	local01, local02
24490     F2 16 02 F6 | 	mov	arg03, objptr
24494     4D 16 06 F1 | 	add	arg03, #77
24498     0B 27 02 F1 | 	add	local01, arg03
2449c     13 FB 41 FC | 	wrbyte	result1, local01
244a0                 | '     j:=j/10
244a0                 | '     pos-=1
244a0     01 28 86 F1 | 	sub	local02, #1
244a4     18 26 62 FD | 	getqx	local01
244a8     13 27 82 F6 | 	negc	local01, local01
244ac     B8 FF 9F FD | 	jmp	#LR__2890
244b0                 | LR__2891
244b0                 | LR__2892
244b0                 | '   repeat while n_string[0]==48
244b0                 | LR__2893
244b0     4D E4 05 F1 | 	add	objptr, #77
244b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
244b8     4D E4 85 F1 | 	sub	objptr, #77
244bc     30 16 0E F2 | 	cmp	arg03, #48 wz
244c0     20 00 90 5D |  if_ne	jmp	#LR__2894
244c4                 | '     bytemove(@n_string,@n_string+1,12)
244c4     4D E4 05 F1 | 	add	objptr, #77
244c8     F2 12 02 F6 | 	mov	arg01, objptr
244cc     F2 14 02 F6 | 	mov	arg02, objptr
244d0     4D E4 85 F1 | 	sub	objptr, #77
244d4     01 14 06 F1 | 	add	arg02, #1
244d8     0C 16 06 F6 | 	mov	arg03, #12
244dc     E8 0A B0 FD | 	call	#__system____builtin_memmove
244e0     CC FF 9F FD | 	jmp	#LR__2893
244e4                 | LR__2894
244e4                 | ' 
244e4                 | '   if k==45
244e4     2D 2A 0E F2 | 	cmp	local03, #45 wz
244e8     28 00 90 5D |  if_ne	jmp	#LR__2895
244ec                 | '      bytemove(@n_string+1,@n_string,12)
244ec     4D E4 05 F1 | 	add	objptr, #77
244f0     F2 12 02 F6 | 	mov	arg01, objptr
244f4     01 12 06 F1 | 	add	arg01, #1
244f8     F2 14 02 F6 | 	mov	arg02, objptr
244fc     4D E4 85 F1 | 	sub	objptr, #77
24500     0C 16 06 F6 | 	mov	arg03, #12
24504     C0 0A B0 FD | 	call	#__system____builtin_memmove
24508                 | '      n_string[0]:=k
24508     4D E4 05 F1 | 	add	objptr, #77
2450c     F2 2A 42 FC | 	wrbyte	local03, objptr
24510     4D E4 85 F1 | 	sub	objptr, #77
24514                 | LR__2895
24514                 | LR__2896
24514                 | ' 
24514                 | ' q:=@n_string
24514     F2 FA 01 F6 | 	mov	result1, objptr
24518     4D FA 05 F1 | 	add	result1, #77
2451c                 | ' return q
2451c     A7 F0 03 F6 | 	mov	ptra, fp
24520     B2 00 A0 FD | 	call	#popregs_
24524                 | _hg010b_spin2_inttostr_ret
24524     2D 00 64 FD | 	ret
24528                 | 
24528                 | ' 
24528                 | ' '**********************************************************************************
24528                 | ' '
24528                 | ' '        Blitting
24528                 | ' '
24528                 | ' '**********************************************************************************
24528                 | ' 
24528                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
24528                 | _hg010b_spin2_blit
24528     18 4A 05 F6 | 	mov	COUNT_, #24
2452c     A8 00 A0 FD | 	call	#pushregs_
24530     09 27 02 F6 | 	mov	local01, arg01
24534     0A 29 02 F6 | 	mov	local02, arg02
24538     0B 2B 02 F6 | 	mov	local03, arg03
2453c     0C 2D 02 F6 | 	mov	local04, arg04
24540     0D 2F 02 F6 | 	mov	local05, arg05
24544     0E 31 02 F6 | 	mov	local06, arg06
24548     0F 33 02 F6 | 	mov	local07, arg07
2454c     10 35 02 F6 | 	mov	local08, arg08
24550     11 37 02 F6 | 	mov	local09, arg09
24554     12 39 02 F6 | 	mov	local10, arg10
24558                 | ' 
24558                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
24558     00 04 00 FF 
2455c     00 26 56 F2 | 	cmps	local01, ##524288 wc
24560     00 04 00 3F 
24564     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
24568     98 01 90 CD |  if_b	jmp	#LR__2904
2456c     16 29 5A F2 | 	cmps	local02, local04 wcz
24570     14 3B 02 16 |  if_a	mov	local11, local02
24574     16 29 02 16 |  if_a	mov	local02, local04
24578     1D 2D 02 16 |  if_a	mov	local04, local11
2457c     17 2B 5A F2 | 	cmps	local03, local05 wcz
24580     15 3B 02 16 |  if_a	mov	local11, local03
24584     17 2B 02 16 |  if_a	mov	local03, local05
24588     18 2B 02 FD | 	qmul	local03, local06
2458c                 | '   if x1a>x2a
2458c                 | '     x1a,x2a:=x2a,x1a
2458c                 | '   if y1a>y2a
2458c                 | '     y1a,y2a:=y2a,y1a  
2458c     1D 2F 02 16 |  if_a	mov	local05, local11
24590                 | '   if x2a-x1a>1023 
24590     16 3B 02 F6 | 	mov	local11, local04
24594     14 3B 82 F1 | 	sub	local11, local02
24598     02 00 00 FF 
2459c     00 3A 56 F2 | 	cmps	local11, ##1024 wc
245a0                 | '     x2a:=x1a+1023 ' limit the line to 1024
245a0     14 2D 02 36 |  if_ae	mov	local04, local02
245a4     01 00 00 3F 
245a8     FF 2D 06 31 |  if_ae	add	local04, ##1023
245ac                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
245ac     19 3D 02 F6 | 	mov	local12, local07
245b0     14 3D 02 F1 | 	add	local12, local02
245b4     18 3A 62 FD | 	getqx	local11
245b8     1C 37 02 FD | 	qmul	local09, local10
245bc     1D 3D 02 F1 | 	add	local12, local11
245c0     13 3F 02 F6 | 	mov	local13, local01
245c4     1A 3F 02 F1 | 	add	local13, local08
245c8     18 3A 62 FD | 	getqx	local11
245cc     1D 3F 02 F1 | 	add	local13, local11
245d0     1F 3D 5A F2 | 	cmps	local12, local13 wcz
245d4     98 00 90 ED |  if_be	jmp	#LR__2901
245d8                 | '     repeat y from y1a to y2a
245d8     15 41 02 F6 | 	mov	local14, local03
245dc     15 2F 52 F2 | 	cmps	local05, local03 wc
245e0     01 42 86 F6 | 	negc	local15, #1
245e4     17 45 02 F6 | 	mov	local16, local05
245e8     21 45 02 F1 | 	add	local16, local15
245ec     0B 00 00 FF 
245f0     CC E4 05 F1 | 	add	objptr, ##5836
245f4                 | LR__2900
245f4     18 41 02 FD | 	qmul	local14, local06
245f8                 | '   '    writeln(string("I am here"))
245f8                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
245f8     13 15 02 F6 | 	mov	arg02, local01
245fc     16 17 02 F6 | 	mov	arg03, local04
24600     14 17 82 F1 | 	sub	arg03, local02
24604     01 16 06 F1 | 	add	arg03, #1
24608     F4 03 00 FF 
2460c     00 12 06 F6 | 	mov	arg01, ##518144
24610     18 3E 62 FD | 	getqx	local13
24614     1F 15 02 F1 | 	add	arg02, local13
24618     14 15 02 F1 | 	add	arg02, local02
2461c     84 02 B0 FD | 	call	#_psram_spin2_read1
24620     1B 3F 02 F6 | 	mov	local13, local09
24624     15 3F 82 F1 | 	sub	local13, local03
24628     20 3F 02 F1 | 	add	local13, local14
2462c     1C 3F 02 FD | 	qmul	local13, local10
24630                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
24630     19 15 02 F6 | 	mov	arg02, local07
24634     16 17 02 F6 | 	mov	arg03, local04
24638     14 17 82 F1 | 	sub	arg03, local02
2463c     01 16 06 F1 | 	add	arg03, #1
24640     F4 03 00 FF 
24644     00 12 06 F6 | 	mov	arg01, ##518144
24648     18 3E 62 FD | 	getqx	local13
2464c     1F 15 02 F1 | 	add	arg02, local13
24650     1A 15 02 F1 | 	add	arg02, local08
24654     E8 02 B0 FD | 	call	#_psram_spin2_write
24658     21 41 02 F1 | 	add	local14, local15
2465c     22 41 0A F2 | 	cmp	local14, local16 wz
24660     90 FF 9F 5D |  if_ne	jmp	#LR__2900
24664     0B 00 00 FF 
24668     CC E4 85 F1 | 	sub	objptr, ##5836
2466c     94 00 90 FD | 	jmp	#LR__2903
24670                 | LR__2901
24670                 | '   else
24670                 | '     repeat y from y2a to y1a
24670     17 41 02 F6 | 	mov	local14, local05
24674     17 2B 52 F2 | 	cmps	local03, local05 wc
24678     01 46 86 F6 | 	negc	local17, #1
2467c     15 49 02 F6 | 	mov	local18, local03
24680     23 49 02 F1 | 	add	local18, local17
24684     0B 00 00 FF 
24688     CC E4 05 F1 | 	add	objptr, ##5836
2468c                 | LR__2902
2468c     18 41 02 FD | 	qmul	local14, local06
24690                 | '  '     writeln(string("I am there"))
24690                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
24690     13 15 02 F6 | 	mov	arg02, local01
24694     16 17 02 F6 | 	mov	arg03, local04
24698     14 17 82 F1 | 	sub	arg03, local02
2469c     01 16 06 F1 | 	add	arg03, #1
246a0     F4 03 00 FF 
246a4     00 12 06 F6 | 	mov	arg01, ##518144
246a8     18 44 62 FD | 	getqx	local16
246ac     22 15 02 F1 | 	add	arg02, local16
246b0     14 15 02 F1 | 	add	arg02, local02
246b4     EC 01 B0 FD | 	call	#_psram_spin2_read1
246b8     1B 45 02 F6 | 	mov	local16, local09
246bc     15 45 82 F1 | 	sub	local16, local03
246c0     20 45 02 F1 | 	add	local16, local14
246c4     1C 45 02 FD | 	qmul	local16, local10
246c8                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
246c8     19 15 02 F6 | 	mov	arg02, local07
246cc     16 17 02 F6 | 	mov	arg03, local04
246d0     14 17 82 F1 | 	sub	arg03, local02
246d4     01 16 06 F1 | 	add	arg03, #1
246d8     F4 03 00 FF 
246dc     00 12 06 F6 | 	mov	arg01, ##518144
246e0     18 44 62 FD | 	getqx	local16
246e4     22 15 02 F1 | 	add	arg02, local16
246e8     1A 15 02 F1 | 	add	arg02, local08
246ec     50 02 B0 FD | 	call	#_psram_spin2_write
246f0     23 41 02 F1 | 	add	local14, local17
246f4     24 41 0A F2 | 	cmp	local14, local18 wz
246f8     90 FF 9F 5D |  if_ne	jmp	#LR__2902
246fc     0B 00 00 FF 
24700     CC E4 85 F1 | 	sub	objptr, ##5836
24704                 | LR__2903
24704                 | LR__2904
24704                 | '     
24704                 | ' if ((f>=$80000) && (t<$80000)) 
24704     00 04 00 FF 
24708     00 26 56 F2 | 	cmps	local01, ##524288 wc
2470c     80 00 90 CD |  if_b	jmp	#LR__2906
24710     00 04 00 FF 
24714     00 32 56 F2 | 	cmps	local07, ##524288 wc
24718     74 00 90 3D |  if_ae	jmp	#LR__2906
2471c                 | '   repeat y from y1a to y2a
2471c     15 41 02 F6 | 	mov	local14, local03
24720     15 2F 52 F2 | 	cmps	local05, local03 wc
24724     01 4A 86 F6 | 	negc	local19, #1
24728     17 4D 02 F6 | 	mov	local20, local05
2472c     25 4D 02 F1 | 	add	local20, local19
24730     0B 00 00 FF 
24734     CC E4 05 F1 | 	add	objptr, ##5836
24738                 | LR__2905
24738     1B 49 02 F6 | 	mov	local18, local09
2473c     15 49 82 F1 | 	sub	local18, local03
24740     20 49 02 F1 | 	add	local18, local14
24744     1C 49 02 FD | 	qmul	local18, local10
24748                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
24748     19 13 02 F6 | 	mov	arg01, local07
2474c     18 48 62 FD | 	getqx	local18
24750     18 41 02 FD | 	qmul	local14, local06
24754     24 13 02 F1 | 	add	arg01, local18
24758     1A 13 02 F1 | 	add	arg01, local08
2475c     13 15 02 F6 | 	mov	arg02, local01
24760     16 17 02 F6 | 	mov	arg03, local04
24764     14 17 82 F1 | 	sub	arg03, local02
24768     01 16 06 F1 | 	add	arg03, #1
2476c     18 48 62 FD | 	getqx	local18
24770     24 15 02 F1 | 	add	arg02, local18
24774     14 15 02 F1 | 	add	arg02, local02
24778     28 01 B0 FD | 	call	#_psram_spin2_read1
2477c     25 41 02 F1 | 	add	local14, local19
24780     26 41 0A F2 | 	cmp	local14, local20 wz
24784     B0 FF 9F 5D |  if_ne	jmp	#LR__2905
24788     0B 00 00 FF 
2478c     CC E4 85 F1 | 	sub	objptr, ##5836
24790                 | LR__2906
24790                 | '     
24790                 | ' if ((f<$80000) && (t>=$80000)) 
24790     00 04 00 FF 
24794     00 26 56 F2 | 	cmps	local01, ##524288 wc
24798     84 00 90 3D |  if_ae	jmp	#LR__2908
2479c     00 04 00 FF 
247a0     00 32 56 F2 | 	cmps	local07, ##524288 wc
247a4     78 00 90 CD |  if_b	jmp	#LR__2908
247a8                 | '   t:=t & $FFFFFFF
247a8     7C 32 06 F4 | 	bitl	local07, #124
247ac                 | '   repeat y from y1a to y2a
247ac     15 41 02 F6 | 	mov	local14, local03
247b0     15 2F 52 F2 | 	cmps	local05, local03 wc
247b4     01 4E 86 F6 | 	negc	local21, #1
247b8     17 51 02 F6 | 	mov	local22, local05
247bc     27 51 02 F1 | 	add	local22, local21
247c0     0B 00 00 FF 
247c4     CC E4 05 F1 | 	add	objptr, ##5836
247c8                 | LR__2907
247c8     18 41 02 FD | 	qmul	local14, local06
247cc                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
247cc     13 13 02 F6 | 	mov	arg01, local01
247d0     1B 4D 02 F6 | 	mov	local20, local09
247d4     15 4D 82 F1 | 	sub	local20, local03
247d8     20 4D 02 F1 | 	add	local20, local14
247dc     18 4A 62 FD | 	getqx	local19
247e0     1C 4D 02 FD | 	qmul	local20, local10
247e4     25 13 02 F1 | 	add	arg01, local19
247e8     14 13 02 F1 | 	add	arg01, local02
247ec     19 15 02 F6 | 	mov	arg02, local07
247f0     16 17 02 F6 | 	mov	arg03, local04
247f4     14 17 82 F1 | 	sub	arg03, local02
247f8     01 16 06 F1 | 	add	arg03, #1
247fc     18 4C 62 FD | 	getqx	local20
24800     26 15 02 F1 | 	add	arg02, local20
24804     1A 15 02 F1 | 	add	arg02, local08
24808     34 01 B0 FD | 	call	#_psram_spin2_write
2480c     27 41 02 F1 | 	add	local14, local21
24810     28 41 0A F2 | 	cmp	local14, local22 wz
24814     B0 FF 9F 5D |  if_ne	jmp	#LR__2907
24818     0B 00 00 FF 
2481c     CC E4 85 F1 | 	sub	objptr, ##5836
24820                 | LR__2908
24820                 | '     
24820                 | ' if ((f<$80000) && (t<$80000)) 
24820     00 04 00 FF 
24824     00 26 56 F2 | 	cmps	local01, ##524288 wc
24828     00 04 00 CF 
2482c     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
24830     64 00 90 3D |  if_ae	jmp	#LR__2910
24834                 | '   repeat y from y1a to y2a
24834     15 41 02 F6 | 	mov	local14, local03
24838     15 2F 52 F2 | 	cmps	local05, local03 wc
2483c     01 52 86 F6 | 	negc	local23, #1
24840     17 55 02 F6 | 	mov	local24, local05
24844     29 55 02 F1 | 	add	local24, local23
24848                 | LR__2909
24848     18 41 02 FD | 	qmul	local14, local06
2484c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2484c     13 13 02 F6 | 	mov	arg01, local01
24850     1B 51 02 F6 | 	mov	local22, local09
24854     15 51 82 F1 | 	sub	local22, local03
24858     20 51 02 F1 | 	add	local22, local14
2485c     18 4E 62 FD | 	getqx	local21
24860     1C 51 02 FD | 	qmul	local22, local10
24864     27 13 02 F1 | 	add	arg01, local21
24868     14 13 02 F1 | 	add	arg01, local02
2486c     19 15 02 F6 | 	mov	arg02, local07
24870     16 17 02 F6 | 	mov	arg03, local04
24874     14 17 82 F1 | 	sub	arg03, local02
24878     01 16 06 F1 | 	add	arg03, #1
2487c     18 50 62 FD | 	getqx	local22
24880     28 15 02 F1 | 	add	arg02, local22
24884     1A 15 02 F1 | 	add	arg02, local08
24888     3C 07 B0 FD | 	call	#__system____builtin_memmove
2488c     29 41 02 F1 | 	add	local14, local23
24890     2A 41 0A F2 | 	cmp	local14, local24 wz
24894     B0 FF 9F 5D |  if_ne	jmp	#LR__2909
24898                 | LR__2910
24898     A7 F0 03 F6 | 	mov	ptra, fp
2489c     B2 00 A0 FD | 	call	#popregs_
248a0                 | _hg010b_spin2_blit_ret
248a0     2D 00 64 FD | 	ret
248a4                 | 
248a4                 | ' 
248a4                 | ' '..............................................................................
248a4                 | ' 
248a4                 | ' {{
248a4                 | ' }}
248a4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
248a4                 | _psram_spin2_read1
248a4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
248a4                 | '     if drivercog == -1 ' driver must be running
248a4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
248a8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
248ac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
248b0     FF FF 7F FF 
248b4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
248b8                 | '         return ERR_INACTIVE
248b8     0F FA 65 A6 |  if_e	neg	result1, #15
248bc     7C 00 90 AD |  if_e	jmp	#LR__2921
248c0                 | '     if count == 0 ' don't even bother reading
248c0     00 16 0E F2 | 	cmp	arg03, #0 wz
248c4                 | '         return 0
248c4     00 FA 05 A6 |  if_e	mov	result1, #0
248c8     70 00 90 AD |  if_e	jmp	#LR__2921
248cc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
248cc     00 FA 05 F6 | 	mov	result1, #0
248d0     01 FA 61 FD | 	cogid	result1
248d4     FD 00 02 F6 | 	mov	_var01, result1
248d8     01 00 66 F0 | 	shl	_var01, #1
248dc     FD 00 02 F1 | 	add	_var01, result1
248e0     02 00 66 F0 | 	shl	_var01, #2
248e4     FF 03 00 FF 
248e8     00 03 06 F6 | 	mov	_var02, ##524032
248ec     00 03 02 F1 | 	add	_var02, _var01
248f0                 | '     if long[mailbox] < 0
248f0     01 01 02 FB | 	rdlong	_var01, _var02
248f4     00 00 56 F2 | 	cmps	_var01, #0 wc
248f8                 | '         return ERR_MAILBOX_BUSY
248f8     1C FA 65 C6 |  if_b	neg	result1, #28
248fc     3C 00 90 CD |  if_b	jmp	#LR__2921
24900                 | '     long[mailbox][2] := count
24900     08 02 06 F1 | 	add	_var02, #8
24904     01 17 62 FC | 	wrlong	arg03, _var02
24908                 | '     long[mailbox][1] := dstHubAddr
24908     04 02 86 F1 | 	sub	_var02, #4
2490c     01 13 62 FC | 	wrlong	arg01, _var02
24910     04 02 86 F1 | 	sub	_var02, #4
24914                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
24914     0A 05 02 F6 | 	mov	_var03, arg02
24918     D9 04 06 F4 | 	bitl	_var03, #217
2491c     00 00 58 FF 
24920     00 00 06 F6 | 	mov	_var01, ##-1342177280
24924     02 01 02 F1 | 	add	_var01, _var03
24928     01 01 62 FC | 	wrlong	_var01, _var02
2492c                 | '     repeat
2492c                 | LR__2920
2492c                 | '         result := long[mailbox]    
2492c     01 05 02 FB | 	rdlong	_var03, _var02
24930     00 04 56 F2 | 	cmps	_var03, #0 wc
24934     F4 FF 9F CD |  if_b	jmp	#LR__2920
24938                 | '     while result < 0   
24938                 | '     return -result                       'return success or error
24938     02 FB 61 F6 | 	neg	result1, _var03
2493c                 | LR__2921
2493c                 | _psram_spin2_read1_ret
2493c     2D 00 64 FD | 	ret
24940                 | 
24940                 | ' 
24940                 | ' '..............................................................................
24940                 | ' 
24940                 | ' {{
24940                 | ' }}
24940                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
24940                 | _psram_spin2_write
24940                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24940                 | '     if drivercog == -1 ' driver must be running
24940     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24944     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
24948     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2494c     FF FF 7F FF 
24950     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24954                 | '         return ERR_INACTIVE
24954     0F FA 65 A6 |  if_e	neg	result1, #15
24958     7C 00 90 AD |  if_e	jmp	#LR__2931
2495c                 | '     if count == 0 ' don't even bother writing
2495c     00 16 0E F2 | 	cmp	arg03, #0 wz
24960                 | '         return 0
24960     00 FA 05 A6 |  if_e	mov	result1, #0
24964     70 00 90 AD |  if_e	jmp	#LR__2931
24968                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
24968     00 FA 05 F6 | 	mov	result1, #0
2496c     01 FA 61 FD | 	cogid	result1
24970     FD 00 02 F6 | 	mov	_var01, result1
24974     01 00 66 F0 | 	shl	_var01, #1
24978     FD 00 02 F1 | 	add	_var01, result1
2497c     02 00 66 F0 | 	shl	_var01, #2
24980     FF 03 00 FF 
24984     00 03 06 F6 | 	mov	_var02, ##524032
24988     00 03 02 F1 | 	add	_var02, _var01
2498c                 | '     if long[mailbox] < 0
2498c     01 01 02 FB | 	rdlong	_var01, _var02
24990     00 00 56 F2 | 	cmps	_var01, #0 wc
24994                 | '         return ERR_MAILBOX_BUSY
24994     1C FA 65 C6 |  if_b	neg	result1, #28
24998     3C 00 90 CD |  if_b	jmp	#LR__2931
2499c                 | '     long[mailbox][2] := count
2499c     08 02 06 F1 | 	add	_var02, #8
249a0     01 17 62 FC | 	wrlong	arg03, _var02
249a4                 | '     long[mailbox][1] := srcHubAddr
249a4     04 02 86 F1 | 	sub	_var02, #4
249a8     01 13 62 FC | 	wrlong	arg01, _var02
249ac     04 02 86 F1 | 	sub	_var02, #4
249b0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
249b0     0A 05 02 F6 | 	mov	_var03, arg02
249b4     D9 04 06 F4 | 	bitl	_var03, #217
249b8     00 00 78 FF 
249bc     00 00 06 F6 | 	mov	_var01, ##-268435456
249c0     02 01 02 F1 | 	add	_var01, _var03
249c4     01 01 62 FC | 	wrlong	_var01, _var02
249c8                 | '     repeat
249c8                 | LR__2930
249c8                 | '         result := long[mailbox]    
249c8     01 05 02 FB | 	rdlong	_var03, _var02
249cc     00 04 56 F2 | 	cmps	_var03, #0 wc
249d0     F4 FF 9F CD |  if_b	jmp	#LR__2930
249d4                 | '     while result < 0   
249d4                 | '     return -result                       'return success or error
249d4     02 FB 61 F6 | 	neg	result1, _var03
249d8                 | LR__2931
249d8                 | _psram_spin2_write_ret
249d8     2D 00 64 FD | 	ret
249dc                 | 
249dc                 | ' 
249dc                 | ' ' generalized fill
249dc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
249dc                 | _psram_spin2_fill
249dc     09 01 02 F6 | 	mov	_var01, arg01
249e0     0A 03 02 F6 | 	mov	_var02, arg02
249e4     0B 05 02 F6 | 	mov	_var03, arg03
249e8     0D 07 02 F6 | 	mov	_var04, arg05
249ec                 | '     case datasize 
249ec     01 06 86 F1 | 	sub	_var04, #1
249f0     04 06 26 F3 | 	fle	_var04, #4
249f4     30 06 62 FD | 	jmprel	_var04
249f8                 | LR__2940
249f8     10 00 90 FD | 	jmp	#LR__2941
249fc     18 00 90 FD | 	jmp	#LR__2942
24a00     2C 00 90 FD | 	jmp	#LR__2944
24a04     1C 00 90 FD | 	jmp	#LR__2943
24a08     24 00 90 FD | 	jmp	#LR__2944
24a0c                 | LR__2941
24a0c                 | '         1: req := driver.R_WRITEBYTE
24a0c     00 00 60 FF 
24a10     00 08 06 F6 | 	mov	_var05, ##-1073741824
24a14     20 00 90 FD | 	jmp	#LR__2945
24a18                 | LR__2942
24a18                 | '         2: req := driver.R_WRITEWORD
24a18     00 00 68 FF 
24a1c     00 08 06 F6 | 	mov	_var05, ##-805306368
24a20     14 00 90 FD | 	jmp	#LR__2945
24a24                 | LR__2943
24a24                 | '         4: req := driver.R_WRITELONG
24a24     00 00 70 FF 
24a28     00 08 06 F6 | 	mov	_var05, ##-536870912
24a2c     08 00 90 FD | 	jmp	#LR__2945
24a30                 | LR__2944
24a30                 | '         other : return ERR_INVALID
24a30     06 FA 65 F6 | 	neg	result1, #6
24a34     94 00 90 FD | 	jmp	#LR__2947
24a38                 | LR__2945
24a38                 | '     if count == 0   ' nothing to do
24a38     00 04 0E F2 | 	cmp	_var03, #0 wz
24a3c                 | '         return 0
24a3c     00 FA 05 A6 |  if_e	mov	result1, #0
24a40     88 00 90 AD |  if_e	jmp	#LR__2947
24a44                 | '     if drivercog == -1
24a44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24a48     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
24a4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24a50     FF FF 7F FF 
24a54     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
24a58                 | '         return ERR_INACTIVE
24a58     0F FA 65 A6 |  if_e	neg	result1, #15
24a5c     6C 00 90 AD |  if_e	jmp	#LR__2947
24a60                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
24a60     00 FA 05 F6 | 	mov	result1, #0
24a64     01 FA 61 FD | 	cogid	result1
24a68     FD 06 02 F6 | 	mov	_var04, result1
24a6c     01 06 66 F0 | 	shl	_var04, #1
24a70     FD 06 02 F1 | 	add	_var04, result1
24a74     02 06 66 F0 | 	shl	_var04, #2
24a78     FF 03 00 FF 
24a7c     00 0B 06 F6 | 	mov	_var06, ##524032
24a80     03 0B 02 F1 | 	add	_var06, _var04
24a84                 | '     if long[mailbox] < 0
24a84     05 07 02 FB | 	rdlong	_var04, _var06
24a88     00 06 56 F2 | 	cmps	_var04, #0 wc
24a8c                 | '         return ERR_MAILBOX_BUSY
24a8c     1C FA 65 C6 |  if_b	neg	result1, #28
24a90     38 00 90 CD |  if_b	jmp	#LR__2947
24a94                 | '     long[mailbox][2] := count
24a94     08 0A 06 F1 | 	add	_var06, #8
24a98     05 05 62 FC | 	wrlong	_var03, _var06
24a9c                 | '     long[mailbox][1] := pattern
24a9c     04 0A 86 F1 | 	sub	_var06, #4
24aa0     05 03 62 FC | 	wrlong	_var02, _var06
24aa4     04 0A 86 F1 | 	sub	_var06, #4
24aa8                 | '     long[mailbox] := req + (addr & $1ffffff)
24aa8     04 0D 02 F6 | 	mov	_var07, _var05
24aac     00 0F 02 F6 | 	mov	_var08, _var01
24ab0     D9 0E 06 F4 | 	bitl	_var08, #217
24ab4     07 0D 02 F1 | 	add	_var07, _var08
24ab8     05 0D 62 FC | 	wrlong	_var07, _var06
24abc                 | '     repeat
24abc                 | LR__2946
24abc                 | '         r := long[mailbox]
24abc     05 0F 02 FB | 	rdlong	_var08, _var06
24ac0     00 0E 56 F2 | 	cmps	_var08, #0 wc
24ac4     F4 FF 9F CD |  if_b	jmp	#LR__2946
24ac8                 | '     while r < 0
24ac8                 | '     return -r                  ' return 0 for success or negated error code
24ac8     07 FB 61 F6 | 	neg	result1, _var08
24acc                 | LR__2947
24acc                 | _psram_spin2_fill_ret
24acc     2D 00 64 FD | 	ret
24ad0                 | 
24ad0                 | ' 
24ad0                 | ' '..............................................................................
24ad0                 | ' 
24ad0                 | ' {{
24ad0                 | ' }}
24ad0                 | ' PUB setQos(cog, qos) : result | mailbox
24ad0                 | _psram_spin2_setQos
24ad0     09 01 02 F6 | 	mov	_var01, arg01
24ad4                 | '     if drivercog == -1 ' driver must be running
24ad4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24ad8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24adc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24ae0     FF FF 7F FF 
24ae4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24ae8                 | '         return ERR_INACTIVE
24ae8     0F FA 65 A6 |  if_e	neg	result1, #15
24aec     9C 00 90 AD |  if_e	jmp	#LR__2954
24af0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
24af0     00 00 56 F2 | 	cmps	_var01, #0 wc
24af4     08 00 90 CD |  if_b	jmp	#LR__2950
24af8     08 00 56 F2 | 	cmps	_var01, #8 wc
24afc     08 00 90 CD |  if_b	jmp	#LR__2951
24b00                 | LR__2950
24b00                 | '         return ERR_INVALID
24b00     06 FA 65 F6 | 	neg	result1, #6
24b04     84 00 90 FD | 	jmp	#LR__2954
24b08                 | LR__2951
24b08                 | '     long[@qosData][cog] := qos & !$1ff
24b08     FF 15 26 F5 | 	andn	arg02, #511
24b0c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24b10     02 00 66 F0 | 	shl	_var01, #2
24b14     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
24b18     00 15 62 FC | 	wrlong	arg02, _var01
24b1c                 | '     mailbox := $7FF00 + drivercog*12
24b1c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
24b20     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
24b24     02 07 02 F6 | 	mov	_var04, _var03
24b28     01 06 66 F0 | 	shl	_var04, #1
24b2c     02 07 02 F1 | 	add	_var04, _var03
24b30     02 06 66 F0 | 	shl	_var04, #2
24b34     FF 03 00 FF 
24b38     00 09 06 F6 | 	mov	_var05, ##524032
24b3c     03 09 02 F1 | 	add	_var05, _var04
24b40                 | '     repeat until LOCKTRY(driverlock)
24b40     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
24b44                 | LR__2952
24b44     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24b48     06 12 72 FD | 	locktry	arg01 wc
24b4c     F4 FF 9F 3D |  if_ae	jmp	#LR__2952
24b50     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24b54                 | '     long[mailbox] := driver.R_CONFIG + cogid()
24b54     00 06 06 F6 | 	mov	_var04, #0
24b58     01 06 62 FD | 	cogid	_var04
24b5c     00 00 78 FF 
24b60     00 02 06 F6 | 	mov	_var02, ##-268435456
24b64     03 03 02 F1 | 	add	_var02, _var04
24b68     04 03 62 FC | 	wrlong	_var02, _var05
24b6c                 | '     repeat while long[mailbox] < 0
24b6c                 | LR__2953
24b6c     04 03 02 FB | 	rdlong	_var02, _var05
24b70     00 02 56 F2 | 	cmps	_var02, #0 wc
24b74     F4 FF 9F CD |  if_b	jmp	#LR__2953
24b78                 | '     LOCKREL(driverlock)
24b78     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24b7c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24b80     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24b84     07 12 72 FD | 	lockrel	arg01 wc
24b88     00 FA 05 F6 | 	mov	result1, #0
24b8c                 | LR__2954
24b8c                 | _psram_spin2_setQos_ret
24b8c     2D 00 64 FD | 	ret
24b90                 | 
24b90                 | '     '' (Always enabled)
24b90                 | ' 
24b90                 | ' '' Get current pressed state of a keyboard key
24b90                 | ' PUB keystate(key) : r | buf[2],tmp
24b90                 | _usbnew_spin2_keystate
24b90     00 04 06 F6 | 	mov	_var03, #0
24b94                 | '   if key >= $E0 && key < $E8
24b94     E0 12 56 F2 | 	cmps	arg01, #224 wc
24b98     2C 00 90 CD |  if_b	jmp	#LR__2960
24b9c     E8 12 56 F2 | 	cmps	arg01, #232 wc
24ba0                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
24ba0     00 FA 05 C6 |  if_b	mov	result1, #0
24ba4     FB 06 02 C6 |  if_b	mov	_var04, ptr__usbnew_spin2_dat__
24ba8     13 00 00 CF 
24bac     D8 07 06 C1 |  if_b	add	_var04, ##10200
24bb0     09 09 02 C6 |  if_b	mov	_var05, arg01
24bb4     E0 08 86 C1 |  if_b	sub	_var05, #224
24bb8     03 0B C2 CA |  if_b	rdbyte	_var06, _var04
24bbc     04 0B 4A C0 |  if_b	shr	_var06, _var05 wz
24bc0     01 FA 65 46 |  if_c_and_nz	neg	result1, #1
24bc4     50 00 90 CD |  if_b	jmp	#_usbnew_spin2_keystate_ret
24bc8                 | LR__2960
24bc8                 | '   else
24bc8                 | '     '' Do this in inline ASM to ensure atomicity
24bc8                 | '     tmp := @hkbd_report
24bc8     FB 0A 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
24bcc     13 00 00 FF 
24bd0     D8 0B 06 F1 | 	add	_var06, ##10200
24bd4                 | '     org
24bd4     97 1E 48 FB | 	callpa	#(@LR__2962-@LR__2961)>>2,fcache_load_ptr_
24bd8                 | LR__2961
24bd8 000             | 	org	0
24bd8 000 28 02 64 FD | 	setq	#1
24bdc 001 05 01 02 FB | 	rdlong	_var01, _var06
24be0 002 00 0D F2 F8 | 	getbyte	_var07, _var01, #2
24be4 003 09 0D 0A F2 | 	cmp	_var07, arg01 wz
24be8 004 00 0D FA F8 | 	getbyte	_var07, _var01, #3
24bec 005 09 0D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24bf0 006 01 0D E2 F8 | 	getbyte	_var07, _var02, #0
24bf4 007 09 0D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24bf8 008 01 0D EA F8 | 	getbyte	_var07, _var02, #1
24bfc 009 09 0D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24c00 00a 01 0D F2 F8 | 	getbyte	_var07, _var02, #2
24c04 00b 09 0D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24c08 00c 01 0D FA F8 | 	getbyte	_var07, _var02, #3
24c0c 00d 09 0D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24c10 00e 01 04 66 A6 |  if_e	neg	_var03, #1
24c14 00f             | 	fit	128
24c14 00f             | LR__2962
24c14                 | 	orgh
24c14     02 FB 01 F6 | 	mov	result1, _var03
24c18                 | _usbnew_spin2_keystate_ret
24c18     2D 00 64 FD | 	ret
24c1c                 | 
24c1c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
24c1c                 | ' 
24c1c                 | ' '' Return key event from buffer if there is one
24c1c                 | ' PUB get_key() : r | tail
24c1c                 | _usbnew_spin2_get_key
24c1c                 | '   tail := keyq_tail
24c1c     0F 00 00 FF 
24c20     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
24c24     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
24c28                 | '   if keyq_head == tail
24c28     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
24c2c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
24c30     0F 00 00 FF 
24c34     D4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
24c38     00 03 0A F2 | 	cmp	_var02, _var01 wz
24c3c                 | '     return 0 ' No event
24c3c     00 FA 05 A6 |  if_e	mov	result1, #0
24c40     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
24c44                 | '   r := keyq_data[tail]
24c44     00 03 02 F6 | 	mov	_var02, _var01
24c48     02 02 66 F0 | 	shl	_var02, #2
24c4c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24c50     0F 00 00 FF 
24c54     D6 FA 05 F1 | 	add	result1, ##7894
24c58     FD 02 02 F1 | 	add	_var02, result1
24c5c     01 FB 01 FB | 	rdlong	result1, _var02
24c60                 | '   if ++tail == KEYQUEUE_SIZE
24c60     01 00 06 F1 | 	add	_var01, #1
24c64     80 00 0E F2 | 	cmp	_var01, #128 wz
24c68                 | '     tail := 0
24c68     00 00 06 A6 |  if_e	mov	_var01, #0
24c6c                 | '   keyq_tail := tail
24c6c     0F 00 00 FF 
24c70     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
24c74     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
24c78     0F 00 00 FF 
24c7c     D5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
24c80                 | _usbnew_spin2_get_key_ret
24c80     2D 00 64 FD | 	ret
24c84                 | 
24c84                 | ' 
24c84                 | ' '' Get state of an axis (normalized between -32768 and 32767)
24c84                 | ' PUB hidpad_axis(dev,axnum) : r
24c84                 | _usbnew_spin2_hidpad_axis
24c84                 | '   if axnum +>= 8
24c84     08 14 16 F2 | 	cmp	arg02, #8 wc
24c88                 | '     return 0
24c88     00 FA 05 36 |  if_ae	mov	result1, #0
24c8c                 | '   else 
24c8c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
24c8c     FB 00 02 C6 |  if_b	mov	_var01, ptr__usbnew_spin2_dat__
24c90     13 00 00 CF 
24c94     F8 01 06 C1 |  if_b	add	_var01, ##10232
24c98     05 12 66 C0 |  if_b	shl	arg01, #5
24c9c     09 01 02 C1 |  if_b	add	_var01, arg01
24ca0     04 12 06 C6 |  if_b	mov	arg01, #4
24ca4     0A 13 02 C1 |  if_b	add	arg01, arg02
24ca8     01 12 66 C0 |  if_b	shl	arg01, #1
24cac     00 13 02 C1 |  if_b	add	arg01, _var01
24cb0     09 FB E1 CA |  if_b	rdword	result1, arg01
24cb4     0F FA 65 C7 |  if_b	signx	result1, #15
24cb8                 | _usbnew_spin2_hidpad_axis_ret
24cb8     2D 00 64 FD | 	ret
24cbc                 | 
24cbc                 | ' 
24cbc                 | ' '' Get state of a hat
24cbc                 | ' PUB hidpad_hat(dev,hatnum) : r
24cbc                 | _usbnew_spin2_hidpad_hat
24cbc                 | '   if hatnum +>= 4
24cbc     04 14 16 F2 | 	cmp	arg02, #4 wc
24cc0                 | '     return 0
24cc0     00 FA 05 36 |  if_ae	mov	result1, #0
24cc4                 | '   else 
24cc4                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
24cc4     FB 00 02 C6 |  if_b	mov	_var01, ptr__usbnew_spin2_dat__
24cc8     13 00 00 CF 
24ccc     F8 01 06 C1 |  if_b	add	_var01, ##10232
24cd0     05 12 66 C0 |  if_b	shl	arg01, #5
24cd4     09 01 02 C1 |  if_b	add	_var01, arg01
24cd8     1C 12 06 C6 |  if_b	mov	arg01, #28
24cdc     0A 13 02 C1 |  if_b	add	arg01, arg02
24ce0     00 13 02 C1 |  if_b	add	arg01, _var01
24ce4     09 FB C1 CA |  if_b	rdbyte	result1, arg01
24ce8                 | _usbnew_spin2_hidpad_hat_ret
24ce8     2D 00 64 FD | 	ret
24cec                 | 
24cec                 | ' 
24cec                 | ' ' a simple play procedure to not poke everything. 
24cec                 | ' 
24cec                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
24cec                 | _audio096_spin2_play
24cec     F2 00 02 F6 | 	mov	_var01, objptr
24cf0     0C 00 06 F1 | 	add	_var01, #12
24cf4     06 12 66 F0 | 	shl	arg01, #6
24cf8     09 01 02 F1 | 	add	_var01, arg01
24cfc     00 13 02 F6 | 	mov	arg01, _var01
24d00     0C 12 06 F1 | 	add	arg01, #12
24d04     09 1B 62 FC | 	wrlong	arg05, arg01
24d08     00 1C 56 F2 | 	cmps	arg06, #0 wc
24d0c     00 13 02 36 |  if_ae	mov	arg01, _var01
24d10     10 12 06 31 |  if_ae	add	arg01, #16
24d14     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
24d18     02 1A 06 C1 |  if_b	add	arg05, #2
24d1c     00 13 02 C6 |  if_b	mov	arg01, _var01
24d20     10 12 06 C1 |  if_b	add	arg01, #16
24d24     09 1B 62 CC |  if_b	wrlong	arg05, arg01
24d28     0B 13 52 F6 | 	abs	arg01, arg03 wc
24d2c     0F 1B 80 FF 
24d30     09 1F 1A FD | 	qdiv	##3546895, arg01
24d34                 | ' 
24d34                 | ' base2:=@channel1[0]+64*channel
24d34                 | ' 
24d34                 | ' 
24d34                 | ' long[base2+12]:= len
24d34                 | ' if loop >=0 
24d34                 | '   long[base2+16]:= loop
24d34                 | ' else
24d34                 | '   long[base2+16]:= len+2
24d34                 | ' word[base2+20]:=vol
24d34     00 13 02 F6 | 	mov	arg01, _var01
24d38     14 12 06 F1 | 	add	arg01, #20
24d3c     09 19 52 FC | 	wrword	arg04, arg01
24d40                 | ' word[base2+24]:= 3546895/splfreq 
24d40     00 19 02 F6 | 	mov	arg04, _var01
24d44     18 18 06 F1 | 	add	arg04, #24
24d48                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24d48                 | ' long[base2+28]:=$40000000    
24d48                 | ' long[base2+32]:=0    
24d48                 | ' long[base2+36]:=0    
24d48                 | ' long[base2+40]:=0    
24d48                 | ' long[base2+44]:=0    
24d48                 | ' long[base2+8]:=sample+$C0000000     
24d48     00 00 60 FF 
24d4c     00 14 06 F1 | 	add	arg02, ##-1073741824
24d50     18 12 62 FD | 	getqx	arg01
24d54     09 13 82 F6 | 	negc	arg01, arg01
24d58     0C 13 52 FC | 	wrword	arg01, arg04
24d5c     00 13 02 F6 | 	mov	arg01, _var01
24d60     1A 12 06 F1 | 	add	arg01, #26
24d64     09 01 5A FC | 	wrword	#256, arg01
24d68     00 13 02 F6 | 	mov	arg01, _var01
24d6c     1C 12 06 F1 | 	add	arg01, #28
24d70     00 00 A0 FF 
24d74     09 01 68 FC | 	wrlong	##1073741824, arg01
24d78     00 13 02 F6 | 	mov	arg01, _var01
24d7c     20 12 06 F1 | 	add	arg01, #32
24d80     09 01 68 FC | 	wrlong	#0, arg01
24d84     00 13 02 F6 | 	mov	arg01, _var01
24d88     24 12 06 F1 | 	add	arg01, #36
24d8c     09 01 68 FC | 	wrlong	#0, arg01
24d90     00 13 02 F6 | 	mov	arg01, _var01
24d94     28 12 06 F1 | 	add	arg01, #40
24d98     09 01 68 FC | 	wrlong	#0, arg01
24d9c     00 13 02 F6 | 	mov	arg01, _var01
24da0     2C 12 06 F1 | 	add	arg01, #44
24da4     09 01 68 FC | 	wrlong	#0, arg01
24da8     08 00 06 F1 | 	add	_var01, #8
24dac     00 15 62 FC | 	wrlong	arg02, _var01
24db0                 | _audio096_spin2_play_ret
24db0     2D 00 64 FD | 	ret
24db4                 | 
24db4                 | ' 'long[base2+28]:=$40000000
24db4                 | ' 
24db4                 | '     
24db4                 | ' pub stop(channel) 'silence it
24db4                 | _audio096_spin2_stop
24db4                 | ' 
24db4                 | ' word[@channel1[0]+64*channel+20]:=0
24db4     0C E4 05 F1 | 	add	objptr, #12
24db8     F2 00 02 F6 | 	mov	_var01, objptr
24dbc     09 03 02 F6 | 	mov	_var02, arg01
24dc0     06 02 66 F0 | 	shl	_var02, #6
24dc4     01 01 02 F1 | 	add	_var01, _var02
24dc8     14 00 06 F1 | 	add	_var01, #20
24dcc     00 01 58 FC | 	wrword	#0, _var01
24dd0                 | ' word[@channel1[0]+64*channel+20]:=0
24dd0     F2 00 02 F6 | 	mov	_var01, objptr
24dd4     06 12 66 F0 | 	shl	arg01, #6
24dd8     09 01 02 F1 | 	add	_var01, arg01
24ddc     14 00 06 F1 | 	add	_var01, #20
24de0     00 01 58 FC | 	wrword	#0, _var01
24de4     0C E4 85 F1 | 	sub	objptr, #12
24de8                 | _audio096_spin2_stop_ret
24de8     2D 00 64 FD | 	ret
24dec                 | hubexit
24dec     81 00 80 FD | 	jmp	#cogexit
24df0                 | 
24df0                 | __system___setbaud
24df0     14 8E 06 FB | 	rdlong	muldiva_, #20
24df4     09 91 02 F6 | 	mov	muldivb_, arg01
24df8     BA 00 A0 FD | 	call	#divide_
24dfc     97 06 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
24e00                 | LR__2970
24e00     3E FA 9D FA | 	rdpin	result1, #62 wc
24e04     FE FC A1 F1 | 	subx	result2, result2
24e08     F4 FF 9F CD |  if_b	jmp	#LR__2970
24e0c                 | LR__2971
24e0c     40 7C 64 FD | 	dirl	#62
24e10     40 7E 64 FD | 	dirl	#63
24e14     F3 90 62 FC | 	wrlong	muldivb_, ptr___system__dat__
24e18     10 90 66 F0 | 	shl	muldivb_, #16
24e1c     07 14 06 F6 | 	mov	arg02, #7
24e20     48 15 02 F1 | 	add	arg02, muldivb_
24e24     3E F8 0C FC | 	wrpin	#124, #62
24e28     3E 14 16 FC | 	wxpin	arg02, #62
24e2c     3F 7C 0C FC | 	wrpin	#62, #63
24e30     14 14 06 F1 | 	add	arg02, #20
24e34     3F 14 16 FC | 	wxpin	arg02, #63
24e38     41 7C 64 FD | 	dirh	#62
24e3c     41 7E 64 FD | 	dirh	#63
24e40                 | __system___setbaud_ret
24e40     2D 00 64 FD | 	ret
24e44                 | 
24e44                 | __system___txraw
24e44     01 4A 05 F6 | 	mov	COUNT_, #1
24e48     A8 00 A0 FD | 	call	#pushregs_
24e4c     09 27 02 F6 | 	mov	local01, arg01
24e50     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
24e54                 | LR__2980
24e54     3E FA 9D FA | 	rdpin	result1, #62 wc
24e58     FE FC A1 F1 | 	subx	result2, result2
24e5c     F4 FF 9F CD |  if_b	jmp	#LR__2980
24e60                 | LR__2981
24e60     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
24e64     C2 01 00 AF 
24e68     00 12 06 A6 |  if_e	mov	arg01, ##230400
24e6c     80 FF BF AD |  if_e	call	#__system___setbaud
24e70     58 7C 64 FD | 	drvl	#62
24e74     3E 26 26 FC | 	wypin	local01, #62
24e78     01 FA 05 F6 | 	mov	result1, #1
24e7c     A7 F0 03 F6 | 	mov	ptra, fp
24e80     B2 00 A0 FD | 	call	#popregs_
24e84                 | __system___txraw_ret
24e84     2D 00 64 FD | 	ret
24e88                 | 
24e88                 | __system___rxraw
24e88     0D 4A 05 F6 | 	mov	COUNT_, #13
24e8c     A8 00 A0 FD | 	call	#pushregs_
24e90     09 27 02 F6 | 	mov	local01, arg01
24e94     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24e98     C2 01 00 AF 
24e9c     00 12 06 A6 |  if_e	mov	arg01, ##230400
24ea0     4C FF BF AD |  if_e	call	#__system___setbaud
24ea4     00 26 0E F2 | 	cmp	local01, #0 wz
24ea8     14 2A 06 5B |  if_ne	rdlong	local03, #20
24eac     0A 2A 46 50 |  if_ne	shr	local03, #10
24eb0     15 27 02 5D |  if_ne	qmul	local01, local03
24eb4     1A FA 61 5D |  if_ne	getct	result1
24eb8     01 2C 66 F6 | 	neg	local04, #1
24ebc     3F 2E 06 F6 | 	mov	local05, #63
24ec0     00 30 06 F6 | 	mov	local06, #0
24ec4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24ec8     F3 32 02 FB | 	rdlong	local07, ptr___system__dat__
24ecc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
24ed0     18 34 62 5D |  if_ne	getqx	local08
24ed4     1A FB 01 51 |  if_ne	add	result1, local08
24ed8     FD 36 02 56 |  if_ne	mov	local09, result1
24edc     00 36 06 A6 |  if_e	mov	local09, #0
24ee0                 | LR__2990
24ee0     08 32 16 F4 | 	testb	local07, #8 wc
24ee4     09 32 76 F4 | 	testbn	local07, #9 andc
24ee8     0A 32 46 F0 | 	shr	local07, #10
24eec     01 30 06 C6 |  if_b	mov	local06, #1
24ef0     40 7E 6C 3D |  if_ae	testp	#63 wz
24ef4     01 30 06 26 |  if_nc_and_z	mov	local06, #1
24ef8     3F 32 8E 2A |  if_nc_and_z	rdpin	local07, #63
24efc     04 32 46 20 |  if_nc_and_z	shr	local07, #4
24f00                 | LR__2991
24f00     00 28 06 F6 | 	mov	local02, #0
24f04     00 30 0E F2 | 	cmp	local06, #0 wz
24f08     01 28 66 56 |  if_ne	neg	local02, #1
24f0c     00 38 06 F6 | 	mov	local10, #0
24f10     00 2A 06 F6 | 	mov	local03, #0
24f14     00 26 0E F2 | 	cmp	local01, #0 wz
24f18     01 2A 66 56 |  if_ne	neg	local03, #1
24f1c     00 34 06 F6 | 	mov	local08, #0
24f20     00 3A 06 F6 | 	mov	local11, #0
24f24     1B 3D 02 F6 | 	mov	local12, local09
24f28     1A FA 61 FD | 	getct	result1
24f2c     FD 3E 02 F6 | 	mov	local13, result1
24f30     1F 3D 82 F1 | 	sub	local12, local13
24f34     00 3C 56 F2 | 	cmps	local12, #0 wc
24f38     00 3A 26 C6 |  if_b	not	local11, #0
24f3c     00 3A 0E F2 | 	cmp	local11, #0 wz
24f40     00 34 26 56 |  if_ne	not	local08, #0
24f44     1A 2B CA F7 | 	test	local03, local08 wz
24f48     00 38 26 56 |  if_ne	not	local10, #0
24f4c     1C 29 4A F5 | 	or	local02, local10 wz
24f50     8C FF 9F AD |  if_e	jmp	#LR__2990
24f54     00 30 0E F2 | 	cmp	local06, #0 wz
24f58     19 2D 02 56 |  if_ne	mov	local04, local07
24f5c     16 2D E2 58 |  if_ne	getbyte	local04, local04, #0
24f60     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24f64     F3 32 62 FC | 	wrlong	local07, ptr___system__dat__
24f68     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
24f6c     16 FB 01 F6 | 	mov	result1, local04
24f70     A7 F0 03 F6 | 	mov	ptra, fp
24f74     B2 00 A0 FD | 	call	#popregs_
24f78                 | __system___rxraw_ret
24f78     2D 00 64 FD | 	ret
24f7c                 | 
24f7c                 | __system___getus
24f7c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
24f80     F3 00 0A FB | 	rdlong	_var01, ptr___system__dat__ wz
24f84     14 02 06 AB |  if_e	rdlong	_var02, #20
24f88     A1 07 00 AF 
24f8c     40 02 16 AD |  if_e	qdiv	_var02, ##1000000
24f90     1A FC 71 FD | 	getct	result2 wc
24f94     1A FA 61 FD | 	getct	result1
24f98     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24f9c     18 02 62 AD |  if_e	getqx	_var02
24fa0     01 01 02 A6 |  if_e	mov	_var01, _var02
24fa4     00 FD 11 FD | 	qdiv	result2, _var01
24fa8     10 E6 05 A1 |  if_e	add	ptr___system__dat__, #16
24fac     F3 02 62 AC |  if_e	wrlong	_var02, ptr___system__dat__
24fb0     10 E6 85 A1 |  if_e	sub	ptr___system__dat__, #16
24fb4     19 FC 61 FD | 	getqy	result2
24fb8     28 FC 61 FD | 	setq	result2
24fbc     00 FB 11 FD | 	qdiv	result1, _var01
24fc0     18 FA 61 FD | 	getqx	result1
24fc4                 | __system___getus_ret
24fc4     2D 00 64 FD | 	ret
24fc8                 | 
24fc8                 | __system____builtin_memmove
24fc8     09 01 02 F6 | 	mov	_var01, arg01
24fcc     0A 13 52 F2 | 	cmps	arg01, arg02 wc
24fd0     10 00 90 CD |  if_b	jmp	#LR__3000
24fd4     0A 03 02 F6 | 	mov	_var02, arg02
24fd8     0B 03 02 F1 | 	add	_var02, arg03
24fdc     01 13 52 F2 | 	cmps	arg01, _var02 wc
24fe0     48 00 90 CD |  if_b	jmp	#LR__3006
24fe4                 | LR__3000
24fe4     0B 05 02 F6 | 	mov	_var03, arg03
24fe8     02 04 4E F0 | 	shr	_var03, #2 wz
24fec     18 00 90 AD |  if_e	jmp	#LR__3005
24ff0     97 0A 48 FB | 	callpa	#(@LR__3003-@LR__3001)>>2,fcache_load_ptr_
24ff4                 | LR__3001
24ff4     02 09 D8 FC | 	rep	@LR__3004, _var03
24ff8                 | LR__3002
24ff8     0A 05 02 FB | 	rdlong	_var03, arg02
24ffc     09 05 62 FC | 	wrlong	_var03, arg01
25000     04 12 06 F1 | 	add	arg01, #4
25004     04 14 06 F1 | 	add	arg02, #4
25008                 | LR__3003
25008                 | LR__3004
25008                 | LR__3005
25008     02 16 CE F7 | 	test	arg03, #2 wz
2500c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
25010     09 03 52 5C |  if_ne	wrword	_var02, arg01
25014     02 12 06 51 |  if_ne	add	arg01, #2
25018     02 14 06 51 |  if_ne	add	arg02, #2
2501c     01 16 CE F7 | 	test	arg03, #1 wz
25020     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25024     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
25028     28 00 90 FD | 	jmp	#LR__3012
2502c                 | LR__3006
2502c     0B 13 02 F1 | 	add	arg01, arg03
25030     0B 15 02 F1 | 	add	arg02, arg03
25034     0B 07 0A F6 | 	mov	_var04, arg03 wz
25038     18 00 90 AD |  if_e	jmp	#LR__3011
2503c     97 0A 48 FB | 	callpa	#(@LR__3009-@LR__3007)>>2,fcache_load_ptr_
25040                 | LR__3007
25040     03 09 D8 FC | 	rep	@LR__3010, _var04
25044                 | LR__3008
25044     01 12 86 F1 | 	sub	arg01, #1
25048     01 14 86 F1 | 	sub	arg02, #1
2504c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25050     09 03 42 FC | 	wrbyte	_var02, arg01
25054                 | LR__3009
25054                 | LR__3010
25054                 | LR__3011
25054                 | LR__3012
25054     00 FB 01 F6 | 	mov	result1, _var01
25058                 | __system____builtin_memmove_ret
25058     2D 00 64 FD | 	ret
2505c                 | 
2505c                 | __system____builtin_strcpy
2505c     09 01 02 F6 | 	mov	_var01, arg01
25060     97 0A 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
25064                 | LR__3020
25064     0A FB C9 FA | 	rdbyte	result1, arg02 wz
25068     09 FB 41 FC | 	wrbyte	result1, arg01
2506c     01 14 06 F1 | 	add	arg02, #1
25070     01 12 06 F1 | 	add	arg01, #1
25074     EC FF 9F 5D |  if_ne	jmp	#LR__3020
25078                 | LR__3021
25078     00 FB 01 F6 | 	mov	result1, _var01
2507c                 | __system____builtin_strcpy_ret
2507c     2D 00 64 FD | 	ret
25080                 | 
25080                 | __system____topofstack
25080     00 4A 05 F6 | 	mov	COUNT_, #0
25084     A8 00 A0 FD | 	call	#pushregs_
25088     08 F0 07 F1 | 	add	ptra, #8
2508c     04 4E 05 F1 | 	add	fp, #4
25090     A7 12 62 FC | 	wrlong	arg01, fp
25094     A7 FA 01 F6 | 	mov	result1, fp
25098     04 4E 85 F1 | 	sub	fp, #4
2509c     A7 F0 03 F6 | 	mov	ptra, fp
250a0     B2 00 A0 FD | 	call	#popregs_
250a4                 | __system____topofstack_ret
250a4     2D 00 64 FD | 	ret
250a8                 | 
250a8                 | __system___lockmem
250a8     00 FA 05 F6 | 	mov	result1, #0
250ac     01 FA 61 FD | 	cogid	result1
250b0     00 FB 05 F1 | 	add	result1, #256
250b4                 | LR__3030
250b4     09 01 0A FB | 	rdlong	_var01, arg01 wz
250b8     09 FB 61 AC |  if_e	wrlong	result1, arg01
250bc     09 01 02 AB |  if_e	rdlong	_var01, arg01
250c0     09 01 02 AB |  if_e	rdlong	_var01, arg01
250c4     FD 00 0A F2 | 	cmp	_var01, result1 wz
250c8     E8 FF 9F 5D |  if_ne	jmp	#LR__3030
250cc                 | __system___lockmem_ret
250cc     2D 00 64 FD | 	ret
250d0                 | 
250d0                 | __system___string_cmp
250d0     97 14 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
250d4                 | LR__3040
250d4     09 01 C2 FA | 	rdbyte	_var01, arg01
250d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
250dc     00 05 02 F6 | 	mov	_var03, _var01
250e0     01 05 8A F1 | 	sub	_var03, _var02 wz
250e4     01 12 06 F1 | 	add	arg01, #1
250e8     01 14 06 F1 | 	add	arg02, #1
250ec     0C 00 90 5D |  if_ne	jmp	#LR__3042
250f0     00 00 0E F2 | 	cmp	_var01, #0 wz
250f4     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
250f8     D8 FF 9F 5D |  if_ne	jmp	#LR__3040
250fc                 | LR__3041
250fc                 | LR__3042
250fc     02 FB 01 F6 | 	mov	result1, _var03
25100                 | __system___string_cmp_ret
25100     2D 00 64 FD | 	ret
25104                 | 
25104                 | __system___string_concat
25104     05 4A 05 F6 | 	mov	COUNT_, #5
25108     A8 00 A0 FD | 	call	#pushregs_
2510c     09 27 02 F6 | 	mov	local01, arg01
25110     0A 29 02 F6 | 	mov	local02, arg02
25114     13 13 02 F6 | 	mov	arg01, local01
25118     09 2B 02 F6 | 	mov	local03, arg01
2511c     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
25120                 | LR__3050
25120     15 FB C9 FA | 	rdbyte	result1, local03 wz
25124     01 2A 06 51 |  if_ne	add	local03, #1
25128     F4 FF 9F 5D |  if_ne	jmp	#LR__3050
2512c                 | LR__3051
2512c     09 2B 82 F1 | 	sub	local03, arg01
25130     15 2D 02 F6 | 	mov	local04, local03
25134     14 13 02 F6 | 	mov	arg01, local02
25138     09 2B 02 F6 | 	mov	local03, arg01
2513c     97 06 48 FB | 	callpa	#(@LR__3053-@LR__3052)>>2,fcache_load_ptr_
25140                 | LR__3052
25140     15 FB C9 FA | 	rdbyte	result1, local03 wz
25144     01 2A 06 51 |  if_ne	add	local03, #1
25148     F4 FF 9F 5D |  if_ne	jmp	#LR__3052
2514c                 | LR__3053
2514c     09 2B 82 F1 | 	sub	local03, arg01
25150     16 13 02 F6 | 	mov	arg01, local04
25154     15 13 02 F1 | 	add	arg01, local03
25158     01 12 06 F1 | 	add	arg01, #1
2515c     0C 30 B0 FD | 	call	#__system___gc_alloc_managed
25160     FD 2E 0A F6 | 	mov	local05, result1 wz
25164     28 00 90 AD |  if_e	jmp	#LR__3054
25168     17 13 02 F6 | 	mov	arg01, local05
2516c     13 15 02 F6 | 	mov	arg02, local01
25170     16 17 02 F6 | 	mov	arg03, local04
25174     50 FE BF FD | 	call	#__system____builtin_memmove
25178     17 13 02 F6 | 	mov	arg01, local05
2517c     16 13 02 F1 | 	add	arg01, local04
25180     01 2A 06 F1 | 	add	local03, #1
25184     14 15 02 F6 | 	mov	arg02, local02
25188     15 17 02 F6 | 	mov	arg03, local03
2518c     38 FE BF FD | 	call	#__system____builtin_memmove
25190                 | LR__3054
25190     17 FB 01 F6 | 	mov	result1, local05
25194     A7 F0 03 F6 | 	mov	ptra, fp
25198     B2 00 A0 FD | 	call	#popregs_
2519c                 | __system___string_concat_ret
2519c     2D 00 64 FD | 	ret
251a0                 | 
251a0                 | __system___tx
251a0     02 4A 05 F6 | 	mov	COUNT_, #2
251a4     A8 00 A0 FD | 	call	#pushregs_
251a8     09 27 02 F6 | 	mov	local01, arg01
251ac     0A 26 0E F2 | 	cmp	local01, #10 wz
251b0     18 00 90 5D |  if_ne	jmp	#LR__3060
251b4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
251b8     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
251bc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
251c0     02 28 CE F7 | 	test	local02, #2 wz
251c4     0D 12 06 56 |  if_ne	mov	arg01, #13
251c8     78 FC BF 5D |  if_ne	call	#__system___txraw
251cc                 | LR__3060
251cc     13 13 02 F6 | 	mov	arg01, local01
251d0     70 FC BF FD | 	call	#__system___txraw
251d4     A7 F0 03 F6 | 	mov	ptra, fp
251d8     B2 00 A0 FD | 	call	#popregs_
251dc                 | __system___tx_ret
251dc     2D 00 64 FD | 	ret
251e0                 | 
251e0                 | __system___rx
251e0     01 4A 05 F6 | 	mov	COUNT_, #1
251e4     A8 00 A0 FD | 	call	#pushregs_
251e8                 | LR__3070
251e8     00 12 06 F6 | 	mov	arg01, #0
251ec     98 FC BF FD | 	call	#__system___rxraw
251f0     FD 26 02 F6 | 	mov	local01, result1
251f4     FF FF 7F FF 
251f8     FF 27 0E F2 | 	cmp	local01, ##-1 wz
251fc     E8 FF 9F AD |  if_e	jmp	#LR__3070
25200     0D 26 0E F2 | 	cmp	local01, #13 wz
25204     14 00 90 5D |  if_ne	jmp	#LR__3071
25208     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2520c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
25210     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25214     02 FA CD F7 | 	test	result1, #2 wz
25218     0A 26 06 56 |  if_ne	mov	local01, #10
2521c                 | LR__3071
2521c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25220     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
25224     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25228     01 12 CE F7 | 	test	arg01, #1 wz
2522c     1C 00 90 AD |  if_e	jmp	#LR__3074
25230     7F 26 0E F2 | 	cmp	local01, #127 wz
25234     0C 00 90 5D |  if_ne	jmp	#LR__3072
25238     08 12 06 F6 | 	mov	arg01, #8
2523c     60 FF BF FD | 	call	#__system___tx
25240     08 00 90 FD | 	jmp	#LR__3073
25244                 | LR__3072
25244     13 13 02 F6 | 	mov	arg01, local01
25248     54 FF BF FD | 	call	#__system___tx
2524c                 | LR__3073
2524c                 | LR__3074
2524c     13 FB 01 F6 | 	mov	result1, local01
25250     A7 F0 03 F6 | 	mov	ptra, fp
25254     B2 00 A0 FD | 	call	#popregs_
25258                 | __system___rx_ret
25258     2D 00 64 FD | 	ret
2525c                 | 
2525c                 | __system___basic_read_line
2525c     06 4A 05 F6 | 	mov	COUNT_, #6
25260     A8 00 A0 FD | 	call	#pushregs_
25264     09 27 02 F6 | 	mov	local01, arg01
25268     00 28 06 F6 | 	mov	local02, #0
2526c     18 2A 06 F6 | 	mov	local03, #24
25270     00 2C 06 F6 | 	mov	local04, #0
25274     18 12 06 F6 | 	mov	arg01, #24
25278     F0 2E B0 FD | 	call	#__system___gc_alloc_managed
2527c     FD 2E 0A F6 | 	mov	local05, result1 wz
25280     17 FB 01 A6 |  if_e	mov	result1, local05
25284     B0 00 90 AD |  if_e	jmp	#LR__3083
25288                 | LR__3080
25288     13 13 02 F6 | 	mov	arg01, local01
2528c     00 07 B0 FD | 	call	#__system___basic_get_char
25290     FD 30 02 F6 | 	mov	local06, result1
25294     01 30 56 F2 | 	cmps	local06, #1 wc
25298     8C 00 90 CD |  if_b	jmp	#LR__3082
2529c     0A 30 0E F2 | 	cmp	local06, #10 wz
252a0     10 00 90 5D |  if_ne	jmp	#LR__3081
252a4     00 2C 0E F2 | 	cmp	local04, #0 wz
252a8     01 28 56 52 |  if_ne	cmps	local02, #1 wc
252ac     01 28 86 11 |  if_a	sub	local02, #1
252b0     74 00 90 FD | 	jmp	#LR__3082
252b4                 | LR__3081
252b4     0D 30 0E F2 | 	cmp	local06, #13 wz
252b8     01 2C 06 A6 |  if_e	mov	local04, #1
252bc     00 2C 06 56 |  if_ne	mov	local04, #0
252c0     08 30 0E F2 | 	cmp	local06, #8 wz
252c4     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
252c8     01 28 56 A2 |  if_e	cmps	local02, #1 wc
252cc     01 28 86 21 |  if_nc_and_z	sub	local02, #1
252d0     B4 FF 9F AD |  if_e	jmp	#LR__3080
252d4     17 17 02 F6 | 	mov	arg03, local05
252d8     14 17 02 F1 | 	add	arg03, local02
252dc     0B 31 42 FC | 	wrbyte	local06, arg03
252e0     01 28 06 F1 | 	add	local02, #1
252e4     15 29 0A F2 | 	cmp	local02, local03 wz
252e8     9C FF 9F 5D |  if_ne	jmp	#LR__3080
252ec     15 13 02 F6 | 	mov	arg01, local03
252f0     20 12 06 F1 | 	add	arg01, #32
252f4     74 2E B0 FD | 	call	#__system___gc_alloc_managed
252f8     FD 30 0A F6 | 	mov	local06, result1 wz
252fc     18 FB 01 A6 |  if_e	mov	result1, local06
25300     34 00 90 AD |  if_e	jmp	#LR__3083
25304     18 13 02 F6 | 	mov	arg01, local06
25308     17 15 02 F6 | 	mov	arg02, local05
2530c     15 17 02 F6 | 	mov	arg03, local03
25310     B4 FC BF FD | 	call	#__system____builtin_memmove
25314     20 2A 06 F1 | 	add	local03, #32
25318     17 13 02 F6 | 	mov	arg01, local05
2531c     80 2F B0 FD | 	call	#__system___gc_free
25320     18 2F 02 F6 | 	mov	local05, local06
25324     60 FF 9F FD | 	jmp	#LR__3080
25328                 | LR__3082
25328     17 31 02 F6 | 	mov	local06, local05
2532c     14 31 02 F1 | 	add	local06, local02
25330     18 01 48 FC | 	wrbyte	#0, local06
25334     17 FB 01 F6 | 	mov	result1, local05
25338                 | LR__3083
25338     A7 F0 03 F6 | 	mov	ptra, fp
2533c     B2 00 A0 FD | 	call	#popregs_
25340                 | __system___basic_read_line_ret
25340     2D 00 64 FD | 	ret
25344                 | 
25344                 | __system___waitms
25344     09 01 02 F6 | 	mov	_var01, arg01
25348     1A 02 62 FD | 	getct	_var02
2534c     14 04 06 FB | 	rdlong	_var03, #20
25350     97 12 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
25354                 | LR__3090
25354     01 00 00 FF 
25358     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2535c     02 03 02 31 |  if_ae	add	_var02, _var03
25360     01 13 02 36 |  if_ae	mov	arg01, _var02
25364     00 12 66 3A |  if_ae	addct1	arg01, #0
25368     24 22 60 3D |  if_ae	waitct1
2536c     01 00 00 3F 
25370     E8 01 86 31 |  if_ae	sub	_var01, ##1000
25374     DC FF 9F 3D |  if_ae	jmp	#LR__3090
25378                 | LR__3091
25378     01 00 56 F2 | 	cmps	_var01, #1 wc
2537c     02 01 02 3D |  if_ae	qmul	_var01, _var03
25380     01 00 00 3F 
25384     E8 17 06 36 |  if_ae	mov	arg03, ##1000
25388     19 FA 61 3D |  if_ae	getqy	result1
2538c     18 12 62 3D |  if_ae	getqx	arg01
25390     28 FA 61 3D |  if_ae	setq	result1
25394     0B 13 12 3D |  if_ae	qdiv	arg01, arg03
25398     18 12 62 3D |  if_ae	getqx	arg01
2539c     01 13 02 31 |  if_ae	add	arg01, _var02
253a0     00 12 66 3A |  if_ae	addct1	arg01, #0
253a4     24 22 60 3D |  if_ae	waitct1
253a8                 | __system___waitms_ret
253a8     2D 00 64 FD | 	ret
253ac                 | 
253ac                 | __system___waitus
253ac     09 01 02 F6 | 	mov	_var01, arg01
253b0     1A 02 62 FD | 	getct	_var02
253b4     14 04 06 FB | 	rdlong	_var03, #20
253b8     97 12 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
253bc                 | LR__3100
253bc     A1 07 00 FF 
253c0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
253c4     02 03 02 31 |  if_ae	add	_var02, _var03
253c8     01 13 02 36 |  if_ae	mov	arg01, _var02
253cc     00 12 66 3A |  if_ae	addct1	arg01, #0
253d0     24 22 60 3D |  if_ae	waitct1
253d4     A1 07 00 3F 
253d8     40 00 86 31 |  if_ae	sub	_var01, ##1000000
253dc     DC FF 9F 3D |  if_ae	jmp	#LR__3100
253e0                 | LR__3101
253e0     01 00 56 F2 | 	cmps	_var01, #1 wc
253e4     02 01 02 3D |  if_ae	qmul	_var01, _var03
253e8     A1 07 00 3F 
253ec     40 16 06 36 |  if_ae	mov	arg03, ##1000000
253f0     19 FA 61 3D |  if_ae	getqy	result1
253f4     18 12 62 3D |  if_ae	getqx	arg01
253f8     28 FA 61 3D |  if_ae	setq	result1
253fc     0B 13 12 3D |  if_ae	qdiv	arg01, arg03
25400     18 FA 61 3D |  if_ae	getqx	result1
25404     FD 02 02 31 |  if_ae	add	_var02, result1
25408     00 02 66 3A |  if_ae	addct1	_var02, #0
2540c     24 22 60 3D |  if_ae	waitct1
25410                 | __system___waitus_ret
25410     2D 00 64 FD | 	ret
25414                 | 
25414                 | __system___chdir
25414     02 4A 05 F6 | 	mov	COUNT_, #2
25418     A8 00 A0 FD | 	call	#pushregs_
2541c     44 F0 07 F1 | 	add	ptra, #68
25420     09 27 02 F6 | 	mov	local01, arg01
25424     A7 14 02 F6 | 	mov	arg02, fp
25428     08 14 06 F1 | 	add	arg02, #8
2542c     13 13 02 F6 | 	mov	arg01, local01
25430     98 3C B0 FD | 	call	#__system__stat
25434     00 FA 0D F2 | 	cmp	result1, #0 wz
25438     88 00 90 5D |  if_ne	jmp	#LR__3112
2543c     10 4E 05 F1 | 	add	fp, #16
25440     A7 12 02 FB | 	rdlong	arg01, fp
25444     10 4E 85 F1 | 	sub	fp, #16
25448     78 00 00 FF 
2544c     00 12 06 F5 | 	and	arg01, ##61440
25450     08 00 00 FF 
25454     00 12 0E F2 | 	cmp	arg01, ##4096 wz
25458     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2545c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
25460     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
25464     01 FA 65 56 |  if_ne	neg	result1, #1
25468     58 00 90 5D |  if_ne	jmp	#LR__3112
2546c     13 17 C2 FA | 	rdbyte	arg03, local01
25470     2F 16 0E F2 | 	cmp	arg03, #47 wz
25474     18 00 90 5D |  if_ne	jmp	#LR__3110
25478     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2547c     84 12 06 F1 | 	add	arg01, #132
25480     13 15 02 F6 | 	mov	arg02, local01
25484     00 17 06 F6 | 	mov	arg03, #256
25488     DC 3F B0 FD | 	call	#__system__strncpy
2548c     30 00 90 FD | 	jmp	#LR__3111
25490                 | LR__3110
25490     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
25494     84 29 06 F1 | 	add	local02, #388
25498     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2549c     84 14 06 F1 | 	add	arg02, #132
254a0     14 13 02 F6 | 	mov	arg01, local02
254a4     00 17 06 F6 | 	mov	arg03, #256
254a8     BC 3F B0 FD | 	call	#__system__strncpy
254ac     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
254b0     84 16 06 F1 | 	add	arg03, #132
254b4     14 13 02 F6 | 	mov	arg01, local02
254b8     13 15 02 F6 | 	mov	arg02, local01
254bc     10 00 B0 FD | 	call	#__system____getvfsforfile
254c0                 | LR__3111
254c0     00 FA 05 F6 | 	mov	result1, #0
254c4                 | LR__3112
254c4     A7 F0 03 F6 | 	mov	ptra, fp
254c8     B2 00 A0 FD | 	call	#popregs_
254cc                 | __system___chdir_ret
254cc     2D 00 64 FD | 	ret
254d0                 | 
254d0                 | __system____getvfsforfile
254d0     10 4A 05 F6 | 	mov	COUNT_, #16
254d4     A8 00 A0 FD | 	call	#pushregs_
254d8     09 27 02 F6 | 	mov	local01, arg01
254dc     0A 29 02 F6 | 	mov	local02, arg02
254e0     0B 2B 02 F6 | 	mov	local03, arg03
254e4     97 10 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
254e8                 | LR__3120
254e8     14 FB C1 FA | 	rdbyte	result1, local02
254ec     2F FA 0D F2 | 	cmp	result1, #47 wz
254f0     01 28 06 A1 |  if_e	add	local02, #1
254f4     14 2D C2 AA |  if_e	rdbyte	local04, local02
254f8     01 28 86 A1 |  if_e	sub	local02, #1
254fc     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
25500     01 28 06 A1 |  if_e	add	local02, #1
25504     E0 FF 9F AD |  if_e	jmp	#LR__3120
25508                 | LR__3121
25508     14 2D C2 FA | 	rdbyte	local04, local02
2550c     2F 2C 0E F2 | 	cmp	local04, #47 wz
25510     14 00 90 5D |  if_ne	jmp	#LR__3122
25514     13 13 02 F6 | 	mov	arg01, local01
25518     14 15 02 F6 | 	mov	arg02, local02
2551c     00 17 06 F6 | 	mov	arg03, #256
25520     44 3F B0 FD | 	call	#__system__strncpy
25524     78 00 90 FD | 	jmp	#LR__3124
25528                 | LR__3122
25528     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2552c     84 14 06 F1 | 	add	arg02, #132
25530     13 13 02 F6 | 	mov	arg01, local01
25534     00 17 06 F6 | 	mov	arg03, #256
25538     2C 3F B0 FD | 	call	#__system__strncpy
2553c     14 2D CA FA | 	rdbyte	local04, local02 wz
25540     5C 00 90 AD |  if_e	jmp	#LR__3123
25544     14 2D C2 FA | 	rdbyte	local04, local02
25548     2E 2C 0E F2 | 	cmp	local04, #46 wz
2554c     01 28 06 A1 |  if_e	add	local02, #1
25550     14 2F C2 AA |  if_e	rdbyte	local05, local02
25554     01 28 86 A1 |  if_e	sub	local02, #1
25558     17 31 02 A6 |  if_e	mov	local06, local05
2555c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
25560     3C 00 90 AD |  if_e	jmp	#LR__3123
25564     13 FB C1 FA | 	rdbyte	result1, local01
25568     2F FA 0D F2 | 	cmp	result1, #47 wz
2556c     01 26 06 A1 |  if_e	add	local01, #1
25570     13 2D C2 AA |  if_e	rdbyte	local04, local01
25574     01 26 86 A1 |  if_e	sub	local01, #1
25578     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
2557c     8D 01 00 5F 
25580     1C 15 06 56 |  if_ne	mov	arg02, ##@LR__5060
25584     13 13 02 56 |  if_ne	mov	arg01, local01
25588     00 17 06 56 |  if_ne	mov	arg03, #256
2558c     30 3F B0 5D |  if_ne	call	#__system__strncat
25590     13 13 02 F6 | 	mov	arg01, local01
25594     14 15 02 F6 | 	mov	arg02, local02
25598     00 17 06 F6 | 	mov	arg03, #256
2559c     20 3F B0 FD | 	call	#__system__strncat
255a0                 | LR__3123
255a0                 | LR__3124
255a0     13 13 02 F6 | 	mov	arg01, local01
255a4     D4 40 B0 FD | 	call	#__system___normalizeName
255a8     13 2D CA FA | 	rdbyte	local04, local01 wz
255ac     1C 00 90 AD |  if_e	jmp	#LR__3125
255b0     13 2D C2 FA | 	rdbyte	local04, local01
255b4     2F 2C 0E F2 | 	cmp	local04, #47 wz
255b8     01 26 06 A1 |  if_e	add	local01, #1
255bc     13 31 C2 AA |  if_e	rdbyte	local06, local01
255c0     01 26 86 A1 |  if_e	sub	local01, #1
255c4     00 30 4E A2 |  if_e	cmps	local06, #0 wz
255c8     10 00 90 5D |  if_ne	jmp	#LR__3126
255cc                 | LR__3125
255cc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
255d0     01 00 00 FF 
255d4     84 FA 05 F1 | 	add	result1, ##644
255d8     F0 01 90 FD | 	jmp	#LR__3140
255dc                 | LR__3126
255dc     00 32 06 F6 | 	mov	local07, #0
255e0                 | LR__3127
255e0     04 32 56 F2 | 	cmps	local07, #4 wc
255e4     D0 01 90 3D |  if_ae	jmp	#LR__3139
255e8     19 31 02 F6 | 	mov	local06, local07
255ec     02 30 66 F0 | 	shl	local06, #2
255f0     F3 2C 02 F6 | 	mov	local04, ptr___system__dat__
255f4     64 2C 06 F1 | 	add	local04, #100
255f8     16 31 02 F1 | 	add	local06, local04
255fc     18 31 0A FB | 	rdlong	local06, local06 wz
25600     AC 01 90 AD |  if_e	jmp	#LR__3138
25604     19 2D 02 F6 | 	mov	local04, local07
25608     02 2C 66 F0 | 	shl	local04, #2
2560c     F3 30 02 F6 | 	mov	local06, ptr___system__dat__
25610     64 30 06 F1 | 	add	local06, #100
25614     18 2D 02 F1 | 	add	local04, local06
25618     16 13 02 FB | 	rdlong	arg01, local04
2561c     09 35 02 F6 | 	mov	local08, arg01
25620     97 06 48 FB | 	callpa	#(@LR__3129-@LR__3128)>>2,fcache_load_ptr_
25624                 | LR__3128
25624     1A FB C9 FA | 	rdbyte	result1, local08 wz
25628     01 34 06 51 |  if_ne	add	local08, #1
2562c     F4 FF 9F 5D |  if_ne	jmp	#LR__3128
25630                 | LR__3129
25630     09 35 82 F1 | 	sub	local08, arg01
25634     1A 37 02 F6 | 	mov	local09, local08
25638     1B 2D 02 F6 | 	mov	local04, local09
2563c     13 2D 02 F1 | 	add	local04, local01
25640     16 31 C2 FA | 	rdbyte	local06, local04
25644     2F 30 0E F2 | 	cmp	local06, #47 wz
25648     1B 39 02 56 |  if_ne	mov	local10, local09
2564c     13 3B 02 56 |  if_ne	mov	local11, local01
25650     13 39 02 51 |  if_ne	add	local10, local01
25654     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
25658     54 01 90 5D |  if_ne	jmp	#LR__3137
2565c     19 2D 02 F6 | 	mov	local04, local07
25660     02 2C 66 F0 | 	shl	local04, #2
25664     F3 3C 02 F6 | 	mov	local12, ptr___system__dat__
25668     64 3C 06 F1 | 	add	local12, #100
2566c     1E 2D 02 F1 | 	add	local04, local12
25670     16 15 02 FB | 	rdlong	arg02, local04
25674     1B 17 02 F6 | 	mov	arg03, local09
25678     13 13 02 F6 | 	mov	arg01, local01
2567c     A0 3E B0 FD | 	call	#__system__strncmp
25680     00 FA 4D F2 | 	cmps	result1, #0 wz
25684     28 01 90 5D |  if_ne	jmp	#LR__3137
25688     19 3F 02 F6 | 	mov	local13, local07
2568c     02 3E 66 F0 | 	shl	local13, #2
25690     F3 2C 02 F6 | 	mov	local04, ptr___system__dat__
25694     74 2C 06 F1 | 	add	local04, #116
25698     16 3F 02 F1 | 	add	local13, local04
2569c     1F 41 02 FB | 	rdlong	local14, local13
256a0     97 26 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
256a4                 | LR__3130
256a4     1B 31 02 F6 | 	mov	local06, local09
256a8     01 30 06 F1 | 	add	local06, #1
256ac     13 31 02 F1 | 	add	local06, local01
256b0     18 3F C2 FA | 	rdbyte	local13, local06
256b4     2E 3E 0E F2 | 	cmp	local13, #46 wz
256b8     34 00 90 5D |  if_ne	jmp	#LR__3132
256bc     1B 3B 02 F6 | 	mov	local11, local09
256c0     02 3A 06 F1 | 	add	local11, #2
256c4     1D 3F 02 F6 | 	mov	local13, local11
256c8     13 3F 02 F1 | 	add	local13, local01
256cc     1F 39 C2 FA | 	rdbyte	local10, local13
256d0     2F 38 0E F2 | 	cmp	local10, #47 wz
256d4     1B 3D 02 56 |  if_ne	mov	local12, local09
256d8     02 3C 06 51 |  if_ne	add	local12, #2
256dc     1E 43 02 56 |  if_ne	mov	local15, local12
256e0     13 43 02 51 |  if_ne	add	local15, local01
256e4     21 45 CA 5A |  if_ne	rdbyte	local16, local15 wz
256e8     01 36 06 A1 |  if_e	add	local09, #1
256ec     B4 FF 9F AD |  if_e	jmp	#LR__3130
256f0                 | LR__3131
256f0                 | LR__3132
256f0     00 2A 0E F2 | 	cmp	local03, #0 wz
256f4     15 13 02 56 |  if_ne	mov	arg01, local03
256f8     13 15 02 56 |  if_ne	mov	arg02, local01
256fc     00 17 06 56 |  if_ne	mov	arg03, #256
25700     64 3D B0 5D |  if_ne	call	#__system__strncpy
25704     13 15 02 F6 | 	mov	arg02, local01
25708     1B 15 02 F1 | 	add	arg02, local09
2570c     01 14 06 F1 | 	add	arg02, #1
25710     13 13 02 F6 | 	mov	arg01, local01
25714     44 F9 BF FD | 	call	#__system____builtin_strcpy
25718     13 13 02 F6 | 	mov	arg01, local01
2571c     09 35 02 F6 | 	mov	local08, arg01
25720     97 06 48 FB | 	callpa	#(@LR__3134-@LR__3133)>>2,fcache_load_ptr_
25724                 | LR__3133
25724     1A FB C9 FA | 	rdbyte	result1, local08 wz
25728     01 34 06 51 |  if_ne	add	local08, #1
2572c     F4 FF 9F 5D |  if_ne	jmp	#LR__3133
25730                 | LR__3134
25730     09 35 82 F1 | 	sub	local08, arg01
25734     1A 37 02 F6 | 	mov	local09, local08
25738                 | LR__3135
25738     01 36 56 F2 | 	cmps	local09, #1 wc
2573c     68 00 90 CD |  if_b	jmp	#LR__3136
25740     1B 2D 02 F6 | 	mov	local04, local09
25744     13 2D 02 F1 | 	add	local04, local01
25748     16 3F C2 FA | 	rdbyte	local13, local04
2574c     2F 3E 0E F2 | 	cmp	local13, #47 wz
25750     1B 3F 02 A6 |  if_e	mov	local13, local09
25754     13 3F 02 A1 |  if_e	add	local13, local01
25758     1F 01 48 AC |  if_e	wrbyte	#0, local13
2575c     01 36 86 A1 |  if_e	sub	local09, #1
25760     D4 FF 9F AD |  if_e	jmp	#LR__3135
25764     1B 2D 02 F6 | 	mov	local04, local09
25768     13 2D 02 F1 | 	add	local04, local01
2576c     16 3F C2 FA | 	rdbyte	local13, local04
25770     2E 3E 0E F2 | 	cmp	local13, #46 wz
25774     02 36 56 A2 |  if_e	cmps	local09, #2 wc
25778     2C 00 90 8D |  if_c_and_z	jmp	#LR__3136
2577c     1B 3B 02 A6 |  if_e	mov	local11, local09
25780     01 3A 86 A1 |  if_e	sub	local11, #1
25784     13 3B 02 A1 |  if_e	add	local11, local01
25788     1D 2F C2 AA |  if_e	rdbyte	local05, local11
2578c     2F 2E 0E A2 |  if_e	cmp	local05, #47 wz
25790     1B 2D 02 A6 |  if_e	mov	local04, local09
25794     01 2C 86 A1 |  if_e	sub	local04, #1
25798     13 2D 02 A1 |  if_e	add	local04, local01
2579c     16 01 48 AC |  if_e	wrbyte	#0, local04
257a0     02 36 86 A1 |  if_e	sub	local09, #2
257a4     90 FF 9F AD |  if_e	jmp	#LR__3135
257a8                 | LR__3136
257a8     20 FB 01 F6 | 	mov	result1, local14
257ac     1C 00 90 FD | 	jmp	#LR__3140
257b0                 | LR__3137
257b0                 | LR__3138
257b0     01 32 06 F1 | 	add	local07, #1
257b4     28 FE 9F FD | 	jmp	#LR__3127
257b8                 | LR__3139
257b8     02 00 00 FF 
257bc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1320
257c0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
257c4     02 00 00 FF 
257c8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1320
257cc                 | LR__3140
257cc     A7 F0 03 F6 | 	mov	ptra, fp
257d0     B2 00 A0 FD | 	call	#popregs_
257d4                 | __system____getvfsforfile_ret
257d4     2D 00 64 FD | 	ret
257d8                 | 
257d8                 | __system___basic_open_string
257d8     04 4A 05 F6 | 	mov	COUNT_, #4
257dc     A8 00 A0 FD | 	call	#pushregs_
257e0     0A 27 02 F6 | 	mov	local01, arg02
257e4     0B 29 02 F6 | 	mov	local02, arg03
257e8     58 3C B0 FD | 	call	#__system____getftab
257ec     FD 2A 0A F6 | 	mov	local03, result1 wz
257f0     18 00 90 5D |  if_ne	jmp	#LR__3150
257f4     EE 12 02 F6 | 	mov	arg01, abortchain
257f8     0C 14 06 F6 | 	mov	arg02, #12
257fc     01 16 06 F6 | 	mov	arg03, #1
25800     DA 00 A0 FD | 	call	#__longjmp
25804     01 FA 65 F6 | 	neg	result1, #1
25808     58 00 90 FD | 	jmp	#LR__3152
2580c                 | LR__3150
2580c     08 2A 06 F1 | 	add	local03, #8
25810     15 19 0A FB | 	rdlong	arg04, local03 wz
25814     08 2A 86 F1 | 	sub	local03, #8
25818     15 13 02 56 |  if_ne	mov	arg01, local03
2581c     10 34 B0 5D |  if_ne	call	#__system___closeraw
25820     13 15 02 F6 | 	mov	arg02, local01
25824     14 17 02 F6 | 	mov	arg03, local02
25828     15 13 02 F6 | 	mov	arg01, local03
2582c     B6 19 06 F6 | 	mov	arg04, #438
25830     0C 31 B0 FD | 	call	#__system___openraw
25834     FD 2C 02 F6 | 	mov	local04, result1
25838     00 2C 56 F2 | 	cmps	local04, #0 wc
2583c     20 00 90 3D |  if_ae	jmp	#LR__3151
25840     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
25844     20 FA 05 F1 | 	add	result1, #32
25848     EE 12 02 F6 | 	mov	arg01, abortchain
2584c     FD 14 02 FB | 	rdlong	arg02, result1
25850     01 16 06 F6 | 	mov	arg03, #1
25854     DA 00 A0 FD | 	call	#__longjmp
25858     01 FA 65 F6 | 	neg	result1, #1
2585c     04 00 90 FD | 	jmp	#LR__3152
25860                 | LR__3151
25860     16 FB 01 F6 | 	mov	result1, local04
25864                 | LR__3152
25864     A7 F0 03 F6 | 	mov	ptra, fp
25868     B2 00 A0 FD | 	call	#popregs_
2586c                 | __system___basic_open_string_ret
2586c     2D 00 64 FD | 	ret
25870                 | 
25870                 | __system___basic_print_char
25870     03 4A 05 F6 | 	mov	COUNT_, #3
25874     A8 00 A0 FD | 	call	#pushregs_
25878     0A 27 02 F6 | 	mov	local01, arg02
2587c     5C 43 B0 FD | 	call	#__system___gettxfunc
25880     FD 28 0A F6 | 	mov	local02, result1 wz
25884     00 FA 05 A6 |  if_e	mov	result1, #0
25888     30 00 90 AD |  if_e	jmp	#LR__3160
2588c     14 2B 02 F6 | 	mov	local03, local02
25890     13 28 46 F7 | 	zerox	local02, #19
25894     14 2A 46 F0 | 	shr	local03, #20
25898     02 2A 66 F0 | 	shl	local03, #2
2589c     ED 2A 02 F1 | 	add	local03, __methods__
258a0     15 2B 02 FB | 	rdlong	local03, local03
258a4     13 13 02 F6 | 	mov	arg01, local01
258a8     F2 26 02 F6 | 	mov	local01, objptr
258ac     14 E5 01 F6 | 	mov	objptr, local02
258b0     2D 2A 62 FD | 	call	local03
258b4     13 E5 01 F6 | 	mov	objptr, local01
258b8     01 FA 05 F6 | 	mov	result1, #1
258bc                 | LR__3160
258bc     A7 F0 03 F6 | 	mov	ptra, fp
258c0     B2 00 A0 FD | 	call	#popregs_
258c4                 | __system___basic_print_char_ret
258c4     2D 00 64 FD | 	ret
258c8                 | 
258c8                 | __system___basic_print_string
258c8     03 4A 05 F6 | 	mov	COUNT_, #3
258cc     A8 00 A0 FD | 	call	#pushregs_
258d0     0A 27 02 F6 | 	mov	local01, arg02
258d4     0B 29 02 F6 | 	mov	local02, arg03
258d8     00 43 B0 FD | 	call	#__system___gettxfunc
258dc     FD 2A 0A F6 | 	mov	local03, result1 wz
258e0     00 FA 05 A6 |  if_e	mov	result1, #0
258e4     18 00 90 AD |  if_e	jmp	#LR__3170
258e8     00 26 0E F2 | 	cmp	local01, #0 wz
258ec     00 FA 05 A6 |  if_e	mov	result1, #0
258f0     15 13 02 56 |  if_ne	mov	arg01, local03
258f4     14 15 02 56 |  if_ne	mov	arg02, local02
258f8     13 17 02 56 |  if_ne	mov	arg03, local01
258fc     F8 01 B0 5D |  if_ne	call	#__system___fmtstr
25900                 | LR__3170
25900     A7 F0 03 F6 | 	mov	ptra, fp
25904     B2 00 A0 FD | 	call	#popregs_
25908                 | __system___basic_print_string_ret
25908     2D 00 64 FD | 	ret
2590c                 | 
2590c                 | __system___basic_print_integer
2590c     04 4A 05 F6 | 	mov	COUNT_, #4
25910     A8 00 A0 FD | 	call	#pushregs_
25914     0A 27 02 F6 | 	mov	local01, arg02
25918     0B 29 02 F6 | 	mov	local02, arg03
2591c     0C 2B 02 F6 | 	mov	local03, arg04
25920     B8 42 B0 FD | 	call	#__system___gettxfunc
25924     FD 2C 0A F6 | 	mov	local04, result1 wz
25928     00 FA 05 A6 |  if_e	mov	result1, #0
2592c     16 13 02 56 |  if_ne	mov	arg01, local04
25930     14 15 02 56 |  if_ne	mov	arg02, local02
25934     13 17 02 56 |  if_ne	mov	arg03, local01
25938     15 19 02 56 |  if_ne	mov	arg04, local03
2593c     A4 02 B0 5D |  if_ne	call	#__system___fmtnum
25940     A7 F0 03 F6 | 	mov	ptra, fp
25944     B2 00 A0 FD | 	call	#popregs_
25948                 | __system___basic_print_integer_ret
25948     2D 00 64 FD | 	ret
2594c                 | 
2594c                 | __system___basic_print_unsigned
2594c     04 4A 05 F6 | 	mov	COUNT_, #4
25950     A8 00 A0 FD | 	call	#pushregs_
25954     0A 27 02 F6 | 	mov	local01, arg02
25958     0B 29 02 F6 | 	mov	local02, arg03
2595c     0C 2B 02 F6 | 	mov	local03, arg04
25960     78 42 B0 FD | 	call	#__system___gettxfunc
25964     FD 2C 0A F6 | 	mov	local04, result1 wz
25968     00 FA 05 A6 |  if_e	mov	result1, #0
2596c     3A 28 26 54 |  if_ne	bith	local02, #58
25970     16 13 02 56 |  if_ne	mov	arg01, local04
25974     14 15 02 56 |  if_ne	mov	arg02, local02
25978     13 17 02 56 |  if_ne	mov	arg03, local01
2597c     15 19 02 56 |  if_ne	mov	arg04, local03
25980     60 02 B0 5D |  if_ne	call	#__system___fmtnum
25984     A7 F0 03 F6 | 	mov	ptra, fp
25988     B2 00 A0 FD | 	call	#popregs_
2598c                 | __system___basic_print_unsigned_ret
2598c     2D 00 64 FD | 	ret
25990                 | 
25990                 | __system___basic_get_char
25990     03 4A 05 F6 | 	mov	COUNT_, #3
25994     A8 00 A0 FD | 	call	#pushregs_
25998     84 42 B0 FD | 	call	#__system___getrxfunc
2599c     FD 26 0A F6 | 	mov	local01, result1 wz
259a0     01 FA 65 A6 |  if_e	neg	result1, #1
259a4     28 00 90 AD |  if_e	jmp	#LR__3180
259a8     13 29 02 F6 | 	mov	local02, local01
259ac     13 26 46 F7 | 	zerox	local01, #19
259b0     14 28 46 F0 | 	shr	local02, #20
259b4     02 28 66 F0 | 	shl	local02, #2
259b8     ED 28 02 F1 | 	add	local02, __methods__
259bc     14 29 02 FB | 	rdlong	local02, local02
259c0     F2 2A 02 F6 | 	mov	local03, objptr
259c4     13 E5 01 F6 | 	mov	objptr, local01
259c8     2D 28 62 FD | 	call	local02
259cc     15 E5 01 F6 | 	mov	objptr, local03
259d0                 | LR__3180
259d0     A7 F0 03 F6 | 	mov	ptra, fp
259d4     B2 00 A0 FD | 	call	#popregs_
259d8                 | __system___basic_get_char_ret
259d8     2D 00 64 FD | 	ret
259dc                 | 
259dc                 | __system___basic_put
259dc     04 4A 05 F6 | 	mov	COUNT_, #4
259e0     A8 00 A0 FD | 	call	#pushregs_
259e4     0D 27 02 F6 | 	mov	local01, arg05
259e8     13 19 02 FD | 	qmul	arg04, local01
259ec     09 29 02 F6 | 	mov	local02, arg01
259f0     0B 2B 02 F6 | 	mov	local03, arg03
259f4     00 14 0E F2 | 	cmp	arg02, #0 wz
259f8     01 14 86 51 |  if_ne	sub	arg02, #1
259fc     0A 17 02 56 |  if_ne	mov	arg03, arg02
25a00     1F 16 C6 50 |  if_ne	sar	arg03, #31
25a04     14 13 02 56 |  if_ne	mov	arg01, local02
25a08     00 18 06 56 |  if_ne	mov	arg04, #0
25a0c     18 2C 62 FD | 	getqx	local04
25a10     48 38 B0 5D |  if_ne	call	#__system__lseek
25a14     15 15 02 F6 | 	mov	arg02, local03
25a18     16 17 02 F6 | 	mov	arg03, local04
25a1c     14 13 02 F6 | 	mov	arg01, local02
25a20     6C 37 B0 FD | 	call	#__system__write
25a24     FD 2C 02 F6 | 	mov	local04, result1
25a28     01 2C 56 F2 | 	cmps	local04, #1 wc
25a2c     10 00 90 CD |  if_b	jmp	#LR__3190
25a30     16 8F 02 F6 | 	mov	muldiva_, local04
25a34     13 91 02 F6 | 	mov	muldivb_, local01
25a38     BA 00 A0 FD | 	call	#divide_
25a3c     48 2D 02 F6 | 	mov	local04, muldivb_
25a40                 | LR__3190
25a40     16 FB 01 F6 | 	mov	result1, local04
25a44     A7 F0 03 F6 | 	mov	ptra, fp
25a48     B2 00 A0 FD | 	call	#popregs_
25a4c                 | __system___basic_put_ret
25a4c     2D 00 64 FD | 	ret
25a50                 | 
25a50                 | __system___basic_get
25a50     04 4A 05 F6 | 	mov	COUNT_, #4
25a54     A8 00 A0 FD | 	call	#pushregs_
25a58     0D 27 02 F6 | 	mov	local01, arg05
25a5c     13 19 02 FD | 	qmul	arg04, local01
25a60     09 29 02 F6 | 	mov	local02, arg01
25a64     0B 2B 02 F6 | 	mov	local03, arg03
25a68     00 14 0E F2 | 	cmp	arg02, #0 wz
25a6c     01 14 86 51 |  if_ne	sub	arg02, #1
25a70     0A 17 02 56 |  if_ne	mov	arg03, arg02
25a74     1F 16 C6 50 |  if_ne	sar	arg03, #31
25a78     14 13 02 56 |  if_ne	mov	arg01, local02
25a7c     00 18 06 56 |  if_ne	mov	arg04, #0
25a80     18 2C 62 FD | 	getqx	local04
25a84     D4 37 B0 5D |  if_ne	call	#__system__lseek
25a88     15 15 02 F6 | 	mov	arg02, local03
25a8c     16 17 02 F6 | 	mov	arg03, local04
25a90     14 13 02 F6 | 	mov	arg01, local02
25a94     3C 37 B0 FD | 	call	#__system__read
25a98     FD 2C 02 F6 | 	mov	local04, result1
25a9c     01 2C 56 F2 | 	cmps	local04, #1 wc
25aa0     10 00 90 CD |  if_b	jmp	#LR__3200
25aa4     16 8F 02 F6 | 	mov	muldiva_, local04
25aa8     13 91 02 F6 | 	mov	muldivb_, local01
25aac     BA 00 A0 FD | 	call	#divide_
25ab0     48 2D 02 F6 | 	mov	local04, muldivb_
25ab4                 | LR__3200
25ab4     16 FB 01 F6 | 	mov	result1, local04
25ab8     A7 F0 03 F6 | 	mov	ptra, fp
25abc     B2 00 A0 FD | 	call	#popregs_
25ac0                 | __system___basic_get_ret
25ac0     2D 00 64 FD | 	ret
25ac4                 | 
25ac4                 | __system___fmtchar
25ac4     00 4A 05 F6 | 	mov	COUNT_, #0
25ac8     A8 00 A0 FD | 	call	#pushregs_
25acc     10 F0 07 F1 | 	add	ptra, #16
25ad0     0C 4E 05 F1 | 	add	fp, #12
25ad4     A7 16 62 FC | 	wrlong	arg03, fp
25ad8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
25adc     A7 16 62 FC | 	wrlong	arg03, fp
25ae0     A7 16 02 F6 | 	mov	arg03, fp
25ae4     0C 4E 85 F1 | 	sub	fp, #12
25ae8     0C 00 B0 FD | 	call	#__system___fmtstr
25aec     A7 F0 03 F6 | 	mov	ptra, fp
25af0     B2 00 A0 FD | 	call	#popregs_
25af4                 | __system___fmtchar_ret
25af4     2D 00 64 FD | 	ret
25af8                 | 
25af8                 | __system___fmtstr
25af8     09 4A 05 F6 | 	mov	COUNT_, #9
25afc     A8 00 A0 FD | 	call	#pushregs_
25b00     09 27 02 F6 | 	mov	local01, arg01
25b04     0A 29 02 F6 | 	mov	local02, arg02
25b08     0B 2B 02 F6 | 	mov	local03, arg03
25b0c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
25b10     15 13 02 F6 | 	mov	arg01, local03
25b14     09 2D 02 F6 | 	mov	local04, arg01
25b18     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
25b1c                 | LR__3210
25b1c     16 FB C9 FA | 	rdbyte	result1, local04 wz
25b20     01 2C 06 51 |  if_ne	add	local04, #1
25b24     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
25b28                 | LR__3211
25b28     09 2D 82 F1 | 	sub	local04, arg01
25b2c     00 18 0E F2 | 	cmp	arg04, #0 wz
25b30     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
25b34     14 15 02 F6 | 	mov	arg02, local02
25b38     16 17 02 F6 | 	mov	arg03, local04
25b3c     13 13 02 F6 | 	mov	arg01, local01
25b40     02 18 06 F6 | 	mov	arg04, #2
25b44     F4 3C B0 FD | 	call	#__system___fmtpad
25b48     FD 2E 02 F6 | 	mov	local05, result1
25b4c     00 2E 56 F2 | 	cmps	local05, #0 wc
25b50     17 FB 01 C6 |  if_b	mov	result1, local05
25b54     80 00 90 CD |  if_b	jmp	#LR__3214
25b58     01 2C 56 F2 | 	cmps	local04, #1 wc
25b5c     50 00 90 CD |  if_b	jmp	#LR__3213
25b60     16 31 02 F6 | 	mov	local06, local04
25b64                 | LR__3212
25b64     13 33 02 F6 | 	mov	local07, local01
25b68     13 35 02 F6 | 	mov	local08, local01
25b6c     13 32 46 F7 | 	zerox	local07, #19
25b70     14 34 46 F0 | 	shr	local08, #20
25b74     02 34 66 F0 | 	shl	local08, #2
25b78     ED 34 02 F1 | 	add	local08, __methods__
25b7c     1A 35 02 FB | 	rdlong	local08, local08
25b80     15 13 C2 FA | 	rdbyte	arg01, local03
25b84     F2 36 02 F6 | 	mov	local09, objptr
25b88     19 E5 01 F6 | 	mov	objptr, local07
25b8c     01 2A 06 F1 | 	add	local03, #1
25b90     2D 34 62 FD | 	call	local08
25b94     1B E5 01 F6 | 	mov	objptr, local09
25b98     FD 36 02 F6 | 	mov	local09, result1
25b9c     00 36 56 F2 | 	cmps	local09, #0 wc
25ba0     1B FB 01 C6 |  if_b	mov	result1, local09
25ba4     30 00 90 CD |  if_b	jmp	#LR__3214
25ba8     1B 2F 02 F1 | 	add	local05, local09
25bac     ED 31 6E FB | 	djnz	local06, #LR__3212
25bb0                 | LR__3213
25bb0     14 15 02 F6 | 	mov	arg02, local02
25bb4     16 17 02 F6 | 	mov	arg03, local04
25bb8     13 13 02 F6 | 	mov	arg01, local01
25bbc     01 18 06 F6 | 	mov	arg04, #1
25bc0     78 3C B0 FD | 	call	#__system___fmtpad
25bc4     FD 36 02 F6 | 	mov	local09, result1
25bc8     00 36 56 F2 | 	cmps	local09, #0 wc
25bcc     1B FB 01 C6 |  if_b	mov	result1, local09
25bd0     1B 2F 02 31 |  if_ae	add	local05, local09
25bd4     17 FB 01 36 |  if_ae	mov	result1, local05
25bd8                 | LR__3214
25bd8     A7 F0 03 F6 | 	mov	ptra, fp
25bdc     B2 00 A0 FD | 	call	#popregs_
25be0                 | __system___fmtstr_ret
25be0     2D 00 64 FD | 	ret
25be4                 | 
25be4                 | __system___fmtnum
25be4     0B 4A 05 F6 | 	mov	COUNT_, #11
25be8     A8 00 A0 FD | 	call	#pushregs_
25bec     09 27 02 F6 | 	mov	local01, arg01
25bf0     0A 29 02 F6 | 	mov	local02, arg02
25bf4     0B 2B 02 F6 | 	mov	local03, arg03
25bf8     0C 2D 02 F6 | 	mov	local04, arg04
25bfc     F8 2F 02 F6 | 	mov	local05, ptra
25c00     17 31 02 F6 | 	mov	local06, local05
25c04     00 32 06 F6 | 	mov	local07, #0
25c08     14 35 02 F6 | 	mov	local08, local02
25c0c     10 34 46 F0 | 	shr	local08, #16
25c10     3F 34 06 F5 | 	and	local08, #63
25c14     14 37 E2 F8 | 	getbyte	local09, local02, #0
25c18     14 39 02 F6 | 	mov	local10, local02
25c1c     1A 38 46 F0 | 	shr	local10, #26
25c20     03 38 06 F5 | 	and	local10, #3
25c24     1C 3B 02 F6 | 	mov	local11, local10
25c28     01 34 56 F2 | 	cmps	local08, #1 wc
25c2c     44 F0 07 F1 | 	add	ptra, #68
25c30     01 34 86 31 |  if_ae	sub	local08, #1
25c34     41 36 56 F2 | 	cmps	local09, #65 wc
25c38     00 36 0E C2 |  if_b	cmp	local09, #0 wz
25c3c     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
25c40     03 3A 0E F2 | 	cmp	local11, #3 wz
25c44     00 3A 06 A6 |  if_e	mov	local11, #0
25c48     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
25c4c     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
25c50     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
25c54     00 3A 0E F2 | 	cmp	local11, #0 wz
25c58     4C 00 90 AD |  if_e	jmp	#LR__3223
25c5c     01 32 06 F6 | 	mov	local07, #1
25c60     1B 35 0A F2 | 	cmp	local08, local09 wz
25c64     18 00 90 5D |  if_ne	jmp	#LR__3221
25c68     05 34 6E FB | 	djnz	local08, #LR__3220
25c6c     13 13 02 F6 | 	mov	arg01, local01
25c70     14 15 02 F6 | 	mov	arg02, local02
25c74     23 16 06 F6 | 	mov	arg03, #35
25c78     48 FE BF FD | 	call	#__system___fmtchar
25c7c     8C 00 90 FD | 	jmp	#LR__3227
25c80                 | LR__3220
25c80                 | LR__3221
25c80     02 3A 0E F2 | 	cmp	local11, #2 wz
25c84     18 39 02 A6 |  if_e	mov	local10, local06
25c88     01 30 06 A1 |  if_e	add	local06, #1
25c8c     1C 41 48 AC |  if_e	wrbyte	#32, local10
25c90     14 00 90 AD |  if_e	jmp	#LR__3222
25c94     04 3A 0E F2 | 	cmp	local11, #4 wz
25c98     18 5B 48 AC |  if_e	wrbyte	#45, local06
25c9c     01 30 06 A1 |  if_e	add	local06, #1
25ca0     18 57 48 5C |  if_ne	wrbyte	#43, local06
25ca4     01 30 06 51 |  if_ne	add	local06, #1
25ca8                 | LR__3222
25ca8                 | LR__3223
25ca8     19 39 02 F6 | 	mov	local10, local07
25cac     18 13 02 F6 | 	mov	arg01, local06
25cb0     15 15 02 F6 | 	mov	arg02, local03
25cb4     16 17 02 F6 | 	mov	arg03, local04
25cb8     1A 19 02 F6 | 	mov	arg04, local08
25cbc     00 1A 06 F6 | 	mov	arg05, #0
25cc0     1D 28 2E F4 | 	testbn	local02, #29 wz
25cc4     01 1A 06 56 |  if_ne	mov	arg05, #1
25cc8     38 3C B0 FD | 	call	#__system___uitoa
25ccc     FD 38 02 F1 | 	add	local10, result1
25cd0     1B 39 5A F2 | 	cmps	local10, local09 wcz
25cd4     24 00 90 ED |  if_be	jmp	#LR__3226
25cd8     97 0E 48 FB | 	callpa	#(@LR__3225-@LR__3224)>>2,fcache_load_ptr_
25cdc                 | LR__3224
25cdc     1B 39 02 F6 | 	mov	local10, local09
25ce0     01 38 56 F2 | 	cmps	local10, #1 wc
25ce4     01 36 86 F1 | 	sub	local09, #1
25ce8     18 39 02 36 |  if_ae	mov	local10, local06
25cec     01 30 06 31 |  if_ae	add	local06, #1
25cf0     1C 47 48 3C |  if_ae	wrbyte	#35, local10
25cf4     E4 FF 9F 3D |  if_ae	jmp	#LR__3224
25cf8                 | LR__3225
25cf8     18 01 48 FC | 	wrbyte	#0, local06
25cfc                 | LR__3226
25cfc     13 13 02 F6 | 	mov	arg01, local01
25d00     14 15 02 F6 | 	mov	arg02, local02
25d04     17 17 02 F6 | 	mov	arg03, local05
25d08     EC FD BF FD | 	call	#__system___fmtstr
25d0c                 | LR__3227
25d0c     A7 F0 03 F6 | 	mov	ptra, fp
25d10     B2 00 A0 FD | 	call	#popregs_
25d14                 | __system___fmtnum_ret
25d14     2D 00 64 FD | 	ret
25d18                 | 
25d18                 | __system___fmtfloat
25d18     29 4A 05 F6 | 	mov	COUNT_, #41
25d1c     A8 00 A0 FD | 	call	#pushregs_
25d20     24 F1 07 F1 | 	add	ptra, #292
25d24     09 27 02 F6 | 	mov	local01, arg01
25d28     0A 29 02 F6 | 	mov	local02, arg02
25d2c     0B 2B 02 F6 | 	mov	local03, arg03
25d30     0C 2D 02 F6 | 	mov	local04, arg04
25d34     0A 2E 06 F6 | 	mov	local05, #10
25d38     00 30 06 F6 | 	mov	local06, #0
25d3c     00 32 06 F6 | 	mov	local07, #0
25d40     02 34 06 F6 | 	mov	local08, #2
25d44     00 36 06 F6 | 	mov	local09, #0
25d48     00 38 06 F6 | 	mov	local10, #0
25d4c     00 3A 06 F6 | 	mov	local11, #0
25d50     A7 3C 02 F6 | 	mov	local12, fp
25d54     C8 3C 06 F1 | 	add	local12, #200
25d58     1E 3F 02 F6 | 	mov	local13, local12
25d5c     14 41 02 F6 | 	mov	local14, local02
25d60     10 40 46 F0 | 	shr	local14, #16
25d64     3F 40 0E F5 | 	and	local14, #63 wz
25d68     14 43 02 F6 | 	mov	local15, local02
25d6c     1C 42 46 F0 | 	shr	local15, #28
25d70     01 42 06 F5 | 	and	local15, #1
25d74     18 00 90 5D |  if_ne	jmp	#LR__3230
25d78     61 2C 0E F2 | 	cmp	local04, #97 wz
25d7c     0D 40 06 A6 |  if_e	mov	local14, #13
25d80     01 32 06 A6 |  if_e	mov	local07, #1
25d84     0C 00 90 AD |  if_e	jmp	#LR__3231
25d88     06 40 06 F6 | 	mov	local14, #6
25d8c     04 00 90 FD | 	jmp	#LR__3231
25d90                 | LR__3230
25d90     01 40 86 F1 | 	sub	local14, #1
25d94                 | LR__3231
25d94     14 45 02 F6 | 	mov	local16, local02
25d98     16 44 46 F0 | 	shr	local16, #22
25d9c     03 44 06 F5 | 	and	local16, #3
25da0     14 47 02 F6 | 	mov	local17, local02
25da4     1D 46 46 F0 | 	shr	local17, #29
25da8     01 46 06 F5 | 	and	local17, #1
25dac     14 49 EA F8 | 	getbyte	local18, local02, #1
25db0     14 4B E2 F8 | 	getbyte	local19, local02, #0
25db4     65 2C 0E F2 | 	cmp	local04, #101 wz
25db8     6E 4C 62 FD | 	wrz	local20
25dbc     26 4F 02 F6 | 	mov	local21, local20
25dc0     00 46 0E F2 | 	cmp	local17, #0 wz
25dc4     45 4C 06 56 |  if_ne	mov	local20, #69
25dc8     65 4C 06 A6 |  if_e	mov	local20, #101
25dcc     26 51 02 F6 | 	mov	local22, local20
25dd0     61 2C 0E F2 | 	cmp	local04, #97 wz
25dd4     2C 00 90 5D |  if_ne	jmp	#LR__3232
25dd8     01 4E 06 F6 | 	mov	local21, #1
25ddc     00 46 0E F2 | 	cmp	local17, #0 wz
25de0     50 4C 06 56 |  if_ne	mov	local20, #80
25de4     70 4C 06 A6 |  if_e	mov	local20, #112
25de8     26 51 02 F6 | 	mov	local22, local20
25dec     02 2E 06 F6 | 	mov	local05, #2
25df0     01 34 06 F6 | 	mov	local08, #1
25df4     00 46 0E F2 | 	cmp	local17, #0 wz
25df8     58 4C 06 56 |  if_ne	mov	local20, #88
25dfc     78 4C 06 A6 |  if_e	mov	local20, #120
25e00     26 37 02 F6 | 	mov	local09, local20
25e04                 | LR__3232
25e04     23 2C 0E F2 | 	cmp	local04, #35 wz
25e08     14 00 90 5D |  if_ne	jmp	#LR__3233
25e0c     01 38 06 F6 | 	mov	local10, #1
25e10     00 42 0E F2 | 	cmp	local15, #0 wz
25e14     66 2C 06 56 |  if_ne	mov	local04, #102
25e18     00 42 06 56 |  if_ne	mov	local15, #0
25e1c     01 42 06 A6 |  if_e	mov	local15, #1
25e20                 | LR__3233
25e20     14 53 02 F6 | 	mov	local23, local02
25e24     1A 52 46 F0 | 	shr	local23, #26
25e28     03 52 06 F5 | 	and	local23, #3
25e2c     15 FB 01 F6 | 	mov	result1, local03
25e30     1F FA 4D F0 | 	shr	result1, #31 wz
25e34     2D 30 06 56 |  if_ne	mov	local06, #45
25e38     1F 2A E6 54 |  if_ne	bitnot	local03, #31
25e3c     14 00 90 5D |  if_ne	jmp	#LR__3235
25e40     01 52 0E F2 | 	cmp	local23, #1 wz
25e44     2B 30 06 A6 |  if_e	mov	local06, #43
25e48     08 00 90 AD |  if_e	jmp	#LR__3234
25e4c     02 52 0E F2 | 	cmp	local23, #2 wz
25e50     20 30 06 A6 |  if_e	mov	local06, #32
25e54                 | LR__3234
25e54                 | LR__3235
25e54     14 55 02 F6 | 	mov	local24, local02
25e58     18 54 46 F0 | 	shr	local24, #24
25e5c     03 54 06 F5 | 	and	local24, #3
25e60     00 4C 06 F6 | 	mov	local20, #0
25e64     00 30 0E F2 | 	cmp	local06, #0 wz
25e68     0A 2E 0E A2 |  if_e	cmp	local05, #10 wz
25e6c     01 4C 06 56 |  if_ne	mov	local20, #1
25e70     26 57 0A F6 | 	mov	local25, local20 wz
25e74     5C 00 90 AD |  if_e	jmp	#LR__3236
25e78     02 54 0E F2 | 	cmp	local24, #2 wz
25e7c     54 00 90 5D |  if_ne	jmp	#LR__3236
25e80     02 44 0E F2 | 	cmp	local16, #2 wz
25e84     4C 00 90 AD |  if_e	jmp	#LR__3236
25e88     18 15 02 F6 | 	mov	arg02, local06
25e8c     1B 59 02 F6 | 	mov	local26, local09
25e90     1E 13 02 F6 | 	mov	arg01, local12
25e94     2C 17 02 F6 | 	mov	arg03, local26
25e98     C8 3C B0 FD | 	call	#__system__emitsign_0584
25e9c     FD 5A 02 F6 | 	mov	local27, result1
25ea0     00 5A 56 F2 | 	cmps	local27, #0 wc
25ea4     2D FB 01 C6 |  if_b	mov	result1, local27
25ea8     B4 05 90 CD |  if_b	jmp	#LR__3277
25eac     2D 5D 02 F6 | 	mov	local28, local27
25eb0     2D 3D 02 F1 | 	add	local12, local27
25eb4     00 48 0E F2 | 	cmp	local18, #0 wz
25eb8     2D 49 82 51 |  if_ne	sub	local18, local27
25ebc     00 48 56 53 |  if_ne	fges	local18, #0 wc
25ec0     E8 28 06 54 |  if_ne	bitl	local02, #232
25ec4     24 5D 02 56 |  if_ne	mov	local28, local18
25ec8     08 5C 66 50 |  if_ne	shl	local28, #8
25ecc     2E 29 42 55 |  if_ne	or	local02, local28
25ed0     00 56 06 F6 | 	mov	local25, #0
25ed4                 | LR__3236
25ed4     15 13 02 F6 | 	mov	arg01, local03
25ed8     74 19 B0 FD | 	call	#__system____builtin_ilogb
25edc     FF FF 3F FF 
25ee0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
25ee4     24 00 90 5D |  if_ne	jmp	#LR__3237
25ee8     00 30 0E F2 | 	cmp	local06, #0 wz
25eec     1E 4D 02 56 |  if_ne	mov	local20, local12
25ef0     01 3C 06 51 |  if_ne	add	local12, #1
25ef4     26 31 42 5C |  if_ne	wrbyte	local06, local20
25ef8     8D 01 00 FF 
25efc     1E 15 06 F6 | 	mov	arg02, ##@LR__5061
25f00     1E 13 02 F6 | 	mov	arg01, local12
25f04     54 F1 BF FD | 	call	#__system____builtin_strcpy
25f08     A4 04 90 FD | 	jmp	#LR__3267
25f0c                 | LR__3237
25f0c     15 13 02 F6 | 	mov	arg01, local03
25f10     3C 19 B0 FD | 	call	#__system____builtin_ilogb
25f14     FD 4C 02 F6 | 	mov	local20, result1
25f18     00 00 40 FF 
25f1c     00 4C 0E F2 | 	cmp	local20, ##-2147483648 wz
25f20     24 00 90 5D |  if_ne	jmp	#LR__3238
25f24     00 30 0E F2 | 	cmp	local06, #0 wz
25f28     1E 4D 02 56 |  if_ne	mov	local20, local12
25f2c     01 3C 06 51 |  if_ne	add	local12, #1
25f30     26 31 42 5C |  if_ne	wrbyte	local06, local20
25f34     1E 13 02 F6 | 	mov	arg01, local12
25f38     8D 01 00 FF 
25f3c     22 15 06 F6 | 	mov	arg02, ##@LR__5062
25f40     18 F1 BF FD | 	call	#__system____builtin_strcpy
25f44     68 04 90 FD | 	jmp	#LR__3267
25f48                 | LR__3238
25f48     67 2C 0E F2 | 	cmp	local04, #103 wz
25f4c     23 2C 0E 52 |  if_ne	cmp	local04, #35 wz
25f50     0C 01 90 5D |  if_ne	jmp	#LR__3243
25f54     14 4E 05 F1 | 	add	fp, #20
25f58     A7 14 02 F6 | 	mov	arg02, fp
25f5c     0C 4E 05 F1 | 	add	fp, #12
25f60     A7 16 02 F6 | 	mov	arg03, fp
25f64     20 4E 85 F1 | 	sub	fp, #32
25f68     20 19 02 F6 | 	mov	arg04, local14
25f6c     17 1B 02 F6 | 	mov	arg05, local05
25f70     15 13 02 F6 | 	mov	arg01, local03
25f74     00 3A B0 FD | 	call	#__system__disassemble_0582
25f78     23 2C 0E F2 | 	cmp	local04, #35 wz
25f7c     6C 00 90 5D |  if_ne	jmp	#LR__3240
25f80     20 4E 05 F1 | 	add	fp, #32
25f84     A7 4C 02 FB | 	rdlong	local20, fp
25f88     20 4E 85 F1 | 	sub	fp, #32
25f8c     20 4D 5A F2 | 	cmps	local20, local14 wcz
25f90     01 4E 06 16 |  if_a	mov	local21, #1
25f94     24 01 90 1D |  if_a	jmp	#LR__3246
25f98     20 4E 05 F1 | 	add	fp, #32
25f9c     A7 4C 02 FB | 	rdlong	local20, fp
25fa0     20 4E 85 F1 | 	sub	fp, #32
25fa4     00 4C 56 F2 | 	cmps	local20, #0 wc
25fa8     1C 00 90 3D |  if_ae	jmp	#LR__3239
25fac     20 4D 62 F6 | 	neg	local20, local14
25fb0     20 4E 05 F1 | 	add	fp, #32
25fb4     A7 5C 02 FB | 	rdlong	local28, fp
25fb8     20 4E 85 F1 | 	sub	fp, #32
25fbc     26 5D 5A F2 | 	cmps	local28, local20 wcz
25fc0     01 4E 06 E6 |  if_be	mov	local21, #1
25fc4     F4 00 90 FD | 	jmp	#LR__3246
25fc8                 | LR__3239
25fc8     20 4E 05 F1 | 	add	fp, #32
25fcc     A7 4C 02 FB | 	rdlong	local20, fp
25fd0     20 4E 85 F1 | 	sub	fp, #32
25fd4     01 4C 56 F2 | 	cmps	local20, #1 wc
25fd8     20 4E 05 31 |  if_ae	add	fp, #32
25fdc     A7 5C 02 3B |  if_ae	rdlong	local28, fp
25fe0     20 4E 85 31 |  if_ae	sub	fp, #32
25fe4     2E 41 82 31 |  if_ae	sub	local14, local28
25fe8     D0 00 90 FD | 	jmp	#LR__3246
25fec                 | LR__3240
25fec     00 32 06 F6 | 	mov	local07, #0
25ff0     1C 28 2E F4 | 	testbn	local02, #28 wz
25ff4     01 32 06 A6 |  if_e	mov	local07, #1
25ff8     20 4E 05 F1 | 	add	fp, #32
25ffc     A7 4C 02 FB | 	rdlong	local20, fp
26000     20 4E 85 F1 | 	sub	fp, #32
26004     20 4D 52 F2 | 	cmps	local20, local14 wc
26008     18 00 90 3D |  if_ae	jmp	#LR__3241
2600c     20 4E 05 F1 | 	add	fp, #32
26010     A7 58 02 FB | 	rdlong	local26, fp
26014     20 4E 85 F1 | 	sub	fp, #32
26018     FF FF 7F FF 
2601c     FC 59 56 F2 | 	cmps	local26, ##-4 wc
26020     08 00 90 3D |  if_ae	jmp	#LR__3242
26024                 | LR__3241
26024     01 4E 06 F6 | 	mov	local21, #1
26028     90 00 90 FD | 	jmp	#LR__3246
2602c                 | LR__3242
2602c     20 4E 05 F1 | 	add	fp, #32
26030     A7 5C 02 FB | 	rdlong	local28, fp
26034     2E 41 82 F1 | 	sub	local14, local28
26038     0C 4E 85 F1 | 	sub	fp, #12
2603c     A7 14 02 F6 | 	mov	arg02, fp
26040     0C 4E 05 F1 | 	add	fp, #12
26044     A7 16 02 F6 | 	mov	arg03, fp
26048     20 4E 85 F1 | 	sub	fp, #32
2604c     20 19 62 F6 | 	neg	arg04, local14
26050     15 13 02 F6 | 	mov	arg01, local03
26054     17 1B 02 F6 | 	mov	arg05, local05
26058     1C 39 B0 FD | 	call	#__system__disassemble_0582
2605c     5C 00 90 FD | 	jmp	#LR__3246
26060                 | LR__3243
26060     00 4E 0E F2 | 	cmp	local21, #0 wz
26064     28 00 90 AD |  if_e	jmp	#LR__3244
26068     14 4E 05 F1 | 	add	fp, #20
2606c     A7 14 02 F6 | 	mov	arg02, fp
26070     0C 4E 05 F1 | 	add	fp, #12
26074     A7 16 02 F6 | 	mov	arg03, fp
26078     20 4E 85 F1 | 	sub	fp, #32
2607c     15 13 02 F6 | 	mov	arg01, local03
26080     20 19 02 F6 | 	mov	arg04, local14
26084     17 1B 02 F6 | 	mov	arg05, local05
26088     EC 38 B0 FD | 	call	#__system__disassemble_0582
2608c     2C 00 90 FD | 	jmp	#LR__3245
26090                 | LR__3244
26090     14 4E 05 F1 | 	add	fp, #20
26094     A7 14 02 F6 | 	mov	arg02, fp
26098     0C 4E 05 F1 | 	add	fp, #12
2609c     A7 16 02 F6 | 	mov	arg03, fp
260a0     20 4E 85 F1 | 	sub	fp, #32
260a4     20 5D 02 F6 | 	mov	local28, local14
260a8     01 5C 06 F1 | 	add	local28, #1
260ac     2E 19 62 F6 | 	neg	arg04, local28
260b0     15 13 02 F6 | 	mov	arg01, local03
260b4     17 1B 02 F6 | 	mov	arg05, local05
260b8     BC 38 B0 FD | 	call	#__system__disassemble_0582
260bc                 | LR__3245
260bc                 | LR__3246
260bc     02 2E 0E F2 | 	cmp	local05, #2 wz
260c0     40 00 90 5D |  if_ne	jmp	#LR__3249
260c4     10 2E 06 F6 | 	mov	local05, #16
260c8     97 1C 48 FB | 	callpa	#(@LR__3248-@LR__3247)>>2,fcache_load_ptr_
260cc                 | LR__3247
260cc     14 4E 05 F1 | 	add	fp, #20
260d0     A7 4C 0A FB | 	rdlong	local20, fp wz
260d4     14 4E 85 F1 | 	sub	fp, #20
260d8     14 4E 05 51 |  if_ne	add	fp, #20
260dc     A7 58 02 5B |  if_ne	rdlong	local26, fp
260e0     14 4E 85 51 |  if_ne	sub	fp, #20
260e4     00 80 00 5F 
260e8     00 58 16 52 |  if_ne	cmp	local26, ##16777216 wc
260ec     14 4E 05 41 |  if_c_and_nz	add	fp, #20
260f0     A7 4C 02 4B |  if_c_and_nz	rdlong	local20, fp
260f4     01 4C 66 40 |  if_c_and_nz	shl	local20, #1
260f8     A7 4C 62 4C |  if_c_and_nz	wrlong	local20, fp
260fc     14 4E 85 41 |  if_c_and_nz	sub	fp, #20
26100     C8 FF 9F 4D |  if_c_and_nz	jmp	#LR__3247
26104                 | LR__3248
26104                 | LR__3249
26104     70 4E 05 F1 | 	add	fp, #112
26108     A7 12 02 F6 | 	mov	arg01, fp
2610c     5C 4E 85 F1 | 	sub	fp, #92
26110     A7 14 02 FB | 	rdlong	arg02, fp
26114     14 4E 85 F1 | 	sub	fp, #20
26118     17 17 02 F6 | 	mov	arg03, local05
2611c     01 18 06 F6 | 	mov	arg04, #1
26120     23 1B 02 F6 | 	mov	arg05, local17
26124     DC 37 B0 FD | 	call	#__system___uitoa
26128     FD 5E 02 F6 | 	mov	local29, result1
2612c     20 4E 05 F1 | 	add	fp, #32
26130     A7 4C 02 FB | 	rdlong	local20, fp
26134     20 4E 85 F1 | 	sub	fp, #32
26138     00 4C 56 F2 | 	cmps	local20, #0 wc
2613c     44 00 90 3D |  if_ae	jmp	#LR__3250
26140     2D 3A 06 F6 | 	mov	local11, #45
26144     B0 4E 05 F1 | 	add	fp, #176
26148     A7 12 02 F6 | 	mov	arg01, fp
2614c     90 4E 85 F1 | 	sub	fp, #144
26150     A7 58 02 FB | 	rdlong	local26, fp
26154     20 4E 85 F1 | 	sub	fp, #32
26158     2C 5D 62 F6 | 	neg	local28, local26
2615c     0A 58 06 F6 | 	mov	local26, #10
26160     1A 61 02 F6 | 	mov	local30, local08
26164     23 63 02 F6 | 	mov	local31, local17
26168     2E 15 02 F6 | 	mov	arg02, local28
2616c     0A 16 06 F6 | 	mov	arg03, #10
26170     30 19 02 F6 | 	mov	arg04, local30
26174     31 1B 02 F6 | 	mov	arg05, local31
26178     88 37 B0 FD | 	call	#__system___uitoa
2617c     FD 64 02 F6 | 	mov	local32, result1
26180     3C 00 90 FD | 	jmp	#LR__3251
26184                 | LR__3250
26184     2B 3A 06 F6 | 	mov	local11, #43
26188     B0 4E 05 F1 | 	add	fp, #176
2618c     A7 12 02 F6 | 	mov	arg01, fp
26190     90 4E 85 F1 | 	sub	fp, #144
26194     A7 5C 02 FB | 	rdlong	local28, fp
26198     20 4E 85 F1 | 	sub	fp, #32
2619c     0A 58 06 F6 | 	mov	local26, #10
261a0     1A 61 02 F6 | 	mov	local30, local08
261a4     23 63 02 F6 | 	mov	local31, local17
261a8     2E 15 02 F6 | 	mov	arg02, local28
261ac     0A 16 06 F6 | 	mov	arg03, #10
261b0     30 19 02 F6 | 	mov	arg04, local30
261b4     31 1B 02 F6 | 	mov	arg05, local31
261b8     48 37 B0 FD | 	call	#__system___uitoa
261bc     FD 64 02 F6 | 	mov	local32, result1
261c0                 | LR__3251
261c0     00 4E 0E F2 | 	cmp	local21, #0 wz
261c4     00 66 06 56 |  if_ne	mov	local33, #0
261c8     00 68 06 56 |  if_ne	mov	local34, #0
261cc     20 6B 02 56 |  if_ne	mov	local35, local14
261d0     01 6A 06 51 |  if_ne	add	local35, #1
261d4     4C 00 90 5D |  if_ne	jmp	#LR__3252
261d8     20 4E 05 F1 | 	add	fp, #32
261dc     A7 5C 02 FB | 	rdlong	local28, fp
261e0     20 4E 85 F1 | 	sub	fp, #32
261e4     00 5C 56 F2 | 	cmps	local28, #0 wc
261e8     20 4E 05 C1 |  if_b	add	fp, #32
261ec     A7 5C 02 CB |  if_b	rdlong	local28, fp
261f0     2E 67 02 C6 |  if_b	mov	local33, local28
261f4     33 69 02 C6 |  if_b	mov	local34, local33
261f8     20 4E 85 C1 |  if_b	sub	fp, #32
261fc     2E 6B 02 C6 |  if_b	mov	local35, local28
26200     20 6B 02 C1 |  if_b	add	local35, local14
26204     01 6A 06 C1 |  if_b	add	local35, #1
26208     00 68 06 36 |  if_ae	mov	local34, #0
2620c     20 4E 05 31 |  if_ae	add	fp, #32
26210     A7 66 02 3B |  if_ae	rdlong	local33, fp
26214     20 4E 85 31 |  if_ae	sub	fp, #32
26218     33 6B 02 36 |  if_ae	mov	local35, local33
2621c     20 6B 02 31 |  if_ae	add	local35, local14
26220     01 6A 06 31 |  if_ae	add	local35, #1
26224                 | LR__3252
26224     35 4D 02 F6 | 	mov	local20, local35
26228     34 4D 82 F1 | 	sub	local20, local34
2622c     01 4C 06 F1 | 	add	local20, #1
26230     26 6D 02 F6 | 	mov	local36, local20
26234     00 30 0E F2 | 	cmp	local06, #0 wz
26238     36 4D 02 56 |  if_ne	mov	local20, local36
2623c     36 5D 02 56 |  if_ne	mov	local28, local36
26240     01 5C 06 51 |  if_ne	add	local28, #1
26244     2E 6D 02 56 |  if_ne	mov	local36, local28
26248     10 2E 0E F2 | 	cmp	local05, #16 wz
2624c     02 6C 06 A1 |  if_e	add	local36, #2
26250     00 4E 0E F2 | 	cmp	local21, #0 wz
26254     02 5C 06 56 |  if_ne	mov	local28, #2
26258     32 5D 02 51 |  if_ne	add	local28, local32
2625c     2E 6D 02 51 |  if_ne	add	local36, local28
26260     41 6C 56 F2 | 	cmps	local36, #65 wc
26264     01 FA 65 36 |  if_ae	neg	result1, #1
26268     F4 01 90 3D |  if_ae	jmp	#LR__3277
2626c     00 56 0E F2 | 	cmp	local25, #0 wz
26270     28 00 90 AD |  if_e	jmp	#LR__3253
26274     18 15 02 F6 | 	mov	arg02, local06
26278     1B 59 02 F6 | 	mov	local26, local09
2627c     1E 13 02 F6 | 	mov	arg01, local12
26280     2C 17 02 F6 | 	mov	arg03, local26
26284     DC 38 B0 FD | 	call	#__system__emitsign_0584
26288     FD 6E 02 F6 | 	mov	local37, result1
2628c     00 6E 56 F2 | 	cmps	local37, #0 wc
26290     37 FB 01 C6 |  if_b	mov	result1, local37
26294     C8 01 90 CD |  if_b	jmp	#LR__3277
26298     37 3D 02 F1 | 	add	local12, local37
2629c                 | LR__3253
2629c     34 71 02 F6 | 	mov	local38, local34
262a0     97 40 48 FB | 	callpa	#(@LR__3258-@LR__3254)>>2,fcache_load_ptr_
262a4                 | LR__3254
262a4     35 71 52 F2 | 	cmps	local38, local35 wc
262a8     78 00 90 3D |  if_ae	jmp	#LR__3259
262ac     00 70 56 F2 | 	cmps	local38, #0 wc
262b0     28 00 90 CD |  if_b	jmp	#LR__3255
262b4     2F 71 52 F2 | 	cmps	local38, local29 wc
262b8     1E 4D 02 C6 |  if_b	mov	local20, local12
262bc     01 3C 06 C1 |  if_b	add	local12, #1
262c0     38 59 02 C6 |  if_b	mov	local26, local38
262c4     A7 60 02 C6 |  if_b	mov	local30, fp
262c8     70 60 06 C1 |  if_b	add	local30, #112
262cc     30 59 02 C1 |  if_b	add	local26, local30
262d0     2C 63 C2 CA |  if_b	rdbyte	local31, local26
262d4     26 63 42 CC |  if_b	wrbyte	local31, local20
262d8     10 00 90 CD |  if_b	jmp	#LR__3256
262dc                 | LR__3255
262dc     1E 4D 02 F6 | 	mov	local20, local12
262e0     30 58 06 F6 | 	mov	local26, #48
262e4     26 61 48 FC | 	wrbyte	#48, local20
262e8     01 3C 06 F1 | 	add	local12, #1
262ec                 | LR__3256
262ec     33 71 0A F2 | 	cmp	local38, local33 wz
262f0     20 00 90 5D |  if_ne	jmp	#LR__3257
262f4     00 42 0E F2 | 	cmp	local15, #0 wz
262f8     35 4D 02 A6 |  if_e	mov	local20, local35
262fc     01 4C 86 A1 |  if_e	sub	local20, #1
26300     26 71 52 A2 |  if_e	cmps	local38, local20 wc
26304     1E 4D 02 D6 |  if_c_or_nz	mov	local20, local12
26308     2E 58 06 D6 |  if_c_or_nz	mov	local26, #46
2630c     26 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
26310     01 3C 06 D1 |  if_c_or_nz	add	local12, #1
26314                 | LR__3257
26314     38 5D 02 F6 | 	mov	local28, local38
26318     01 5C 06 F1 | 	add	local28, #1
2631c     2E 71 02 F6 | 	mov	local38, local28
26320     80 FF 9F FD | 	jmp	#LR__3254
26324                 | LR__3258
26324                 | LR__3259
26324     00 32 0E F2 | 	cmp	local07, #0 wz
26328     30 00 90 AD |  if_e	jmp	#LR__3263
2632c     01 3C 86 F1 | 	sub	local12, #1
26330     97 0C 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
26334                 | LR__3260
26334     1F 3D 5A F2 | 	cmps	local12, local13 wcz
26338     10 00 90 ED |  if_be	jmp	#LR__3262
2633c     1E 4D C2 FA | 	rdbyte	local20, local12
26340     30 4C 0E F2 | 	cmp	local20, #48 wz
26344     01 3C 86 A1 |  if_e	sub	local12, #1
26348     E8 FF 9F AD |  if_e	jmp	#LR__3260
2634c                 | LR__3261
2634c                 | LR__3262
2634c     1E 4D C2 FA | 	rdbyte	local20, local12
26350     2E 4C 0E F2 | 	cmp	local20, #46 wz
26354     01 3C 86 A1 |  if_e	sub	local12, #1
26358     01 3C 06 F1 | 	add	local12, #1
2635c                 | LR__3263
2635c     00 4E 0E F2 | 	cmp	local21, #0 wz
26360     48 00 90 AD |  if_e	jmp	#LR__3266
26364     1E 51 42 FC | 	wrbyte	local22, local12
26368     01 3C 06 F1 | 	add	local12, #1
2636c     1E 4D 02 F6 | 	mov	local20, local12
26370     26 3B 42 FC | 	wrbyte	local11, local20
26374     00 70 06 F6 | 	mov	local38, #0
26378     01 3C 06 F1 | 	add	local12, #1
2637c     97 16 48 FB | 	callpa	#(@LR__3265-@LR__3264)>>2,fcache_load_ptr_
26380                 | LR__3264
26380     32 71 52 F2 | 	cmps	local38, local32 wc
26384     1E 4D 02 C6 |  if_b	mov	local20, local12
26388     01 3C 06 C1 |  if_b	add	local12, #1
2638c     38 59 02 C6 |  if_b	mov	local26, local38
26390     A7 60 02 C6 |  if_b	mov	local30, fp
26394     B0 60 06 C1 |  if_b	add	local30, #176
26398     30 59 02 C1 |  if_b	add	local26, local30
2639c     2C 63 C2 CA |  if_b	rdbyte	local31, local26
263a0     26 63 42 CC |  if_b	wrbyte	local31, local20
263a4     01 70 06 C1 |  if_b	add	local38, #1
263a8     D4 FF 9F CD |  if_b	jmp	#LR__3264
263ac                 | LR__3265
263ac                 | LR__3266
263ac     1E 01 48 FC | 	wrbyte	#0, local12
263b0                 | LR__3267
263b0     00 4A 0E F2 | 	cmp	local19, #0 wz
263b4     00 38 0E 52 |  if_ne	cmp	local10, #0 wz
263b8     94 00 90 AD |  if_e	jmp	#LR__3276
263bc     1F 13 02 F6 | 	mov	arg01, local13
263c0     09 73 02 F6 | 	mov	local39, arg01
263c4     97 06 48 FB | 	callpa	#(@LR__3269-@LR__3268)>>2,fcache_load_ptr_
263c8                 | LR__3268
263c8     39 FB C9 FA | 	rdbyte	result1, local39 wz
263cc     01 72 06 51 |  if_ne	add	local39, #1
263d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3268
263d4                 | LR__3269
263d4     09 73 82 F1 | 	sub	local39, arg01
263d8     25 73 5A F2 | 	cmps	local39, local19 wcz
263dc     70 00 90 ED |  if_be	jmp	#LR__3276
263e0     1F 75 02 F6 | 	mov	local40, local13
263e4     00 4E 0E F2 | 	cmp	local21, #0 wz
263e8     00 40 06 56 |  if_ne	mov	local14, #0
263ec     25 77 02 56 |  if_ne	mov	local41, local19
263f0     01 4A 86 A1 |  if_e	sub	local19, #1
263f4     20 4B 82 A1 |  if_e	sub	local19, local14
263f8     25 77 02 A6 |  if_e	mov	local41, local19
263fc     00 76 0E F2 | 	cmp	local41, #0 wz
26400     14 00 90 AD |  if_e	jmp	#LR__3272
26404     97 08 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
26408                 | LR__3270
26408     3A 55 48 FC | 	wrbyte	#42, local40
2640c     01 76 8E F1 | 	sub	local41, #1 wz
26410     01 74 06 F1 | 	add	local40, #1
26414     F0 FF 9F 5D |  if_ne	jmp	#LR__3270
26418                 | LR__3271
26418                 | LR__3272
26418     00 40 0E F2 | 	cmp	local14, #0 wz
2641c     2C 00 90 AD |  if_e	jmp	#LR__3275
26420     3A 4D 02 F6 | 	mov	local20, local40
26424     26 5D 48 FC | 	wrbyte	#46, local20
26428     00 76 06 F6 | 	mov	local41, #0
2642c     01 74 06 F1 | 	add	local40, #1
26430     97 0C 48 FB | 	callpa	#(@LR__3274-@LR__3273)>>2,fcache_load_ptr_
26434                 | LR__3273
26434     20 77 52 F2 | 	cmps	local41, local14 wc
26438     3A 4D 02 C6 |  if_b	mov	local20, local40
2643c     01 74 06 C1 |  if_b	add	local40, #1
26440     26 55 48 CC |  if_b	wrbyte	#42, local20
26444     01 76 06 C1 |  if_b	add	local41, #1
26448     E8 FF 9F CD |  if_b	jmp	#LR__3273
2644c                 | LR__3274
2644c                 | LR__3275
2644c     3A 01 48 FC | 	wrbyte	#0, local40
26450                 | LR__3276
26450     13 13 02 F6 | 	mov	arg01, local01
26454     14 15 02 F6 | 	mov	arg02, local02
26458     1F 17 02 F6 | 	mov	arg03, local13
2645c     98 F6 BF FD | 	call	#__system___fmtstr
26460                 | LR__3277
26460     A7 F0 03 F6 | 	mov	ptra, fp
26464     B2 00 A0 FD | 	call	#popregs_
26468                 | __system___fmtfloat_ret
26468     2D 00 64 FD | 	ret
2646c                 | 
2646c                 | __system__Left_S
2646c     04 4A 05 F6 | 	mov	COUNT_, #4
26470     A8 00 A0 FD | 	call	#pushregs_
26474     09 27 02 F6 | 	mov	local01, arg01
26478     0A 29 02 F6 | 	mov	local02, arg02
2647c     01 28 56 F2 | 	cmps	local02, #1 wc
26480     8D 01 00 CF 
26484     26 FB 05 C6 |  if_b	mov	result1, ##@LR__5063
26488     5C 00 90 CD |  if_b	jmp	#LR__3283
2648c     13 13 02 F6 | 	mov	arg01, local01
26490     09 2B 02 F6 | 	mov	local03, arg01
26494     97 06 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
26498                 | LR__3280
26498     15 FB C9 FA | 	rdbyte	result1, local03 wz
2649c     01 2A 06 51 |  if_ne	add	local03, #1
264a0     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
264a4                 | LR__3281
264a4     09 2B 82 F1 | 	sub	local03, arg01
264a8     15 FB 01 F6 | 	mov	result1, local03
264ac     14 FB 59 F2 | 	cmps	result1, local02 wcz
264b0     13 FB 01 E6 |  if_be	mov	result1, local01
264b4     30 00 90 ED |  if_be	jmp	#LR__3283
264b8     14 13 02 F6 | 	mov	arg01, local02
264bc     02 12 06 F1 | 	add	arg01, #2
264c0     A8 1C B0 FD | 	call	#__system___gc_alloc_managed
264c4     FD 2C 0A F6 | 	mov	local04, result1 wz
264c8     18 00 90 AD |  if_e	jmp	#LR__3282
264cc     16 13 02 F6 | 	mov	arg01, local04
264d0     13 15 02 F6 | 	mov	arg02, local01
264d4     14 17 02 F6 | 	mov	arg03, local02
264d8     EC EA BF FD | 	call	#__system____builtin_memmove
264dc     16 29 02 F1 | 	add	local02, local04
264e0     14 01 48 FC | 	wrbyte	#0, local02
264e4                 | LR__3282
264e4     16 FB 01 F6 | 	mov	result1, local04
264e8                 | LR__3283
264e8     A7 F0 03 F6 | 	mov	ptra, fp
264ec     B2 00 A0 FD | 	call	#popregs_
264f0                 | __system__Left_S_ret
264f0     2D 00 64 FD | 	ret
264f4                 | 
264f4                 | __system__Right_S
264f4     04 4A 05 F6 | 	mov	COUNT_, #4
264f8     A8 00 A0 FD | 	call	#pushregs_
264fc     09 27 02 F6 | 	mov	local01, arg01
26500     0A 29 02 F6 | 	mov	local02, arg02
26504     01 28 56 F2 | 	cmps	local02, #1 wc
26508     8D 01 00 CF 
2650c     27 FB 05 C6 |  if_b	mov	result1, ##@LR__5064
26510     60 00 90 CD |  if_b	jmp	#LR__3292
26514     13 13 02 F6 | 	mov	arg01, local01
26518     09 2B 02 F6 | 	mov	local03, arg01
2651c     97 06 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
26520                 | LR__3290
26520     15 FB C9 FA | 	rdbyte	result1, local03 wz
26524     01 2A 06 51 |  if_ne	add	local03, #1
26528     F4 FF 9F 5D |  if_ne	jmp	#LR__3290
2652c                 | LR__3291
2652c     09 2B 82 F1 | 	sub	local03, arg01
26530     15 FB 01 F6 | 	mov	result1, local03
26534     FD 2C 02 F6 | 	mov	local04, result1
26538     14 2D 5A F2 | 	cmps	local04, local02 wcz
2653c     13 FB 01 E6 |  if_be	mov	result1, local01
26540     30 00 90 ED |  if_be	jmp	#LR__3292
26544     14 13 02 F6 | 	mov	arg01, local02
26548     02 12 06 F1 | 	add	arg01, #2
2654c     1C 1C B0 FD | 	call	#__system___gc_alloc_managed
26550     FD 2A 0A F6 | 	mov	local03, result1 wz
26554     14 2D 82 51 |  if_ne	sub	local04, local02
26558     13 2D 02 51 |  if_ne	add	local04, local01
2655c     01 28 06 51 |  if_ne	add	local02, #1
26560     15 13 02 56 |  if_ne	mov	arg01, local03
26564     16 15 02 56 |  if_ne	mov	arg02, local04
26568     14 17 02 56 |  if_ne	mov	arg03, local02
2656c     58 EA BF 5D |  if_ne	call	#__system____builtin_memmove
26570     15 FB 01 F6 | 	mov	result1, local03
26574                 | LR__3292
26574     A7 F0 03 F6 | 	mov	ptra, fp
26578     B2 00 A0 FD | 	call	#popregs_
2657c                 | __system__Right_S_ret
2657c     2D 00 64 FD | 	ret
26580                 | 
26580                 | __system__Mid_S
26580     05 4A 05 F6 | 	mov	COUNT_, #5
26584     A8 00 A0 FD | 	call	#pushregs_
26588     09 27 02 F6 | 	mov	local01, arg01
2658c     0A 29 02 F6 | 	mov	local02, arg02
26590     01 16 56 F2 | 	cmps	arg03, #1 wc
26594     8D 01 00 CF 
26598     28 FB 05 C6 |  if_b	mov	result1, ##@LR__5065
2659c     80 00 90 CD |  if_b	jmp	#LR__3303
265a0     01 28 86 F1 | 	sub	local02, #1
265a4     00 28 56 F3 | 	fges	local02, #0 wc
265a8     13 13 02 F6 | 	mov	arg01, local01
265ac     09 2B 02 F6 | 	mov	local03, arg01
265b0     97 06 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
265b4                 | LR__3300
265b4     15 FB C9 FA | 	rdbyte	result1, local03 wz
265b8     01 2A 06 51 |  if_ne	add	local03, #1
265bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3300
265c0                 | LR__3301
265c0     09 2B 82 F1 | 	sub	local03, arg01
265c4     15 FB 01 F6 | 	mov	result1, local03
265c8     FD 14 02 F6 | 	mov	arg02, result1
265cc     14 15 52 F2 | 	cmps	arg02, local02 wc
265d0     8D 01 00 CF 
265d4     29 FB 05 C6 |  if_b	mov	result1, ##@LR__5066
265d8     44 00 90 CD |  if_b	jmp	#LR__3303
265dc     0A 2D 02 F6 | 	mov	local04, arg02
265e0     14 2D 82 F1 | 	sub	local04, local02
265e4     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
265e8     0B 2D 02 16 |  if_a	mov	local04, arg03
265ec     16 13 02 F6 | 	mov	arg01, local04
265f0     02 12 06 F1 | 	add	arg01, #2
265f4     74 1B B0 FD | 	call	#__system___gc_alloc_managed
265f8     FD 2E 0A F6 | 	mov	local05, result1 wz
265fc     1C 00 90 AD |  if_e	jmp	#LR__3302
26600     13 29 02 F1 | 	add	local02, local01
26604     17 13 02 F6 | 	mov	arg01, local05
26608     14 15 02 F6 | 	mov	arg02, local02
2660c     16 17 02 F6 | 	mov	arg03, local04
26610     B4 E9 BF FD | 	call	#__system____builtin_memmove
26614     17 2D 02 F1 | 	add	local04, local05
26618     16 01 48 FC | 	wrbyte	#0, local04
2661c                 | LR__3302
2661c     17 FB 01 F6 | 	mov	result1, local05
26620                 | LR__3303
26620     A7 F0 03 F6 | 	mov	ptra, fp
26624     B2 00 A0 FD | 	call	#popregs_
26628                 | __system__Mid_S_ret
26628     2D 00 64 FD | 	ret
2662c                 | 
2662c                 | __system__Chr_S
2662c     01 4A 05 F6 | 	mov	COUNT_, #1
26630     A8 00 A0 FD | 	call	#pushregs_
26634     09 27 02 F6 | 	mov	local01, arg01
26638     03 12 06 F6 | 	mov	arg01, #3
2663c     2C 1B B0 FD | 	call	#__system___gc_alloc_managed
26640     00 FA 4D F2 | 	cmps	result1, #0 wz
26644     FD 26 42 5C |  if_ne	wrbyte	local01, result1
26648     01 FA 05 51 |  if_ne	add	result1, #1
2664c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
26650     01 FA 85 51 |  if_ne	sub	result1, #1
26654     A7 F0 03 F6 | 	mov	ptra, fp
26658     B2 00 A0 FD | 	call	#popregs_
2665c                 | __system__Chr_S_ret
2665c     2D 00 64 FD | 	ret
26660                 | 
26660                 | __system__str_S
26660     02 4A 05 F6 | 	mov	COUNT_, #2
26664     A8 00 A0 FD | 	call	#pushregs_
26668     09 27 02 F6 | 	mov	local01, arg01
2666c     10 12 06 F6 | 	mov	arg01, #16
26670     F8 1A B0 FD | 	call	#__system___gc_alloc_managed
26674     FD 28 0A F6 | 	mov	local02, result1 wz
26678     30 00 90 AD |  if_e	jmp	#LR__3310
2667c     F8 13 02 F6 | 	mov	arg01, ptra
26680     08 F0 07 F1 | 	add	ptra, #8
26684     09 29 62 FC | 	wrlong	local02, arg01
26688     04 12 06 F1 | 	add	arg01, #4
2668c     09 01 68 FC | 	wrlong	#0, arg01
26690     04 12 86 F1 | 	sub	arg01, #4
26694     00 98 05 FF 
26698     00 12 46 F5 | 	or	arg01, ##187695104
2669c     00 14 06 F6 | 	mov	arg02, #0
266a0     13 17 02 F6 | 	mov	arg03, local01
266a4     67 18 06 F6 | 	mov	arg04, #103
266a8     6C F6 BF FD | 	call	#__system___fmtfloat
266ac                 | LR__3310
266ac     14 FB 01 F6 | 	mov	result1, local02
266b0     A7 F0 03 F6 | 	mov	ptra, fp
266b4     B2 00 A0 FD | 	call	#popregs_
266b8                 | __system__str_S_ret
266b8     2D 00 64 FD | 	ret
266bc                 | 
266bc                 | __system__Number_S
266bc     08 4A 05 F6 | 	mov	COUNT_, #8
266c0     A8 00 A0 FD | 	call	#pushregs_
266c4     09 27 02 F6 | 	mov	local01, arg01
266c8     0A 29 0A F6 | 	mov	local02, arg02 wz
266cc     0B 2B 02 F6 | 	mov	local03, arg03
266d0     3C 00 90 5D |  if_ne	jmp	#LR__3322
266d4     01 28 06 F6 | 	mov	local02, #1
266d8     15 2D 02 F6 | 	mov	local04, local03
266dc     01 2E 06 F6 | 	mov	local05, #1
266e0     97 16 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
266e4                 | LR__3320
266e4     00 30 06 F6 | 	mov	local06, #0
266e8     13 2D 1A F2 | 	cmp	local04, local01 wcz
266ec     01 30 66 E6 |  if_be	neg	local06, #1
266f0     16 2F 12 F2 | 	cmp	local05, local04 wc
266f4     19 33 A2 F1 | 	subx	local07, local07
266f8     19 31 CA F7 | 	test	local06, local07 wz
266fc     15 2D 02 5D |  if_ne	qmul	local04, local03
26700     16 2F 02 56 |  if_ne	mov	local05, local04
26704     01 28 06 51 |  if_ne	add	local02, #1
26708     18 2C 62 5D |  if_ne	getqx	local04
2670c     D4 FF 9F 5D |  if_ne	jmp	#LR__3320
26710                 | LR__3321
26710                 | LR__3322
26710     20 28 36 F3 | 	fle	local02, #32 wc
26714     14 13 02 F6 | 	mov	arg01, local02
26718     02 12 06 F1 | 	add	arg01, #2
2671c     4C 1A B0 FD | 	call	#__system___gc_alloc_managed
26720     FD 30 02 F6 | 	mov	local06, result1
26724     14 33 02 F6 | 	mov	local07, local02
26728     18 33 02 F1 | 	add	local07, local06
2672c     19 01 48 FC | 	wrbyte	#0, local07
26730     97 1A 48 FB | 	callpa	#(@LR__3324-@LR__3323)>>2,fcache_load_ptr_
26734                 | LR__3323
26734     01 28 16 F2 | 	cmp	local02, #1 wc
26738     2C 00 90 CD |  if_b	jmp	#LR__3325
2673c     15 27 12 FD | 	qdiv	local01, local03
26740     01 28 86 F1 | 	sub	local02, #1
26744     14 33 02 F6 | 	mov	local07, local02
26748     18 33 02 F1 | 	add	local07, local06
2674c     19 34 62 FD | 	getqy	local08
26750     0A 34 16 F2 | 	cmp	local08, #10 wc
26754     30 34 06 C1 |  if_b	add	local08, #48
26758     37 34 06 31 |  if_ae	add	local08, #55
2675c     19 35 42 FC | 	wrbyte	local08, local07
26760     18 26 62 FD | 	getqx	local01
26764     CC FF 9F FD | 	jmp	#LR__3323
26768                 | LR__3324
26768                 | LR__3325
26768     18 FB 01 F6 | 	mov	result1, local06
2676c     A7 F0 03 F6 | 	mov	ptra, fp
26770     B2 00 A0 FD | 	call	#popregs_
26774                 | __system__Number_S_ret
26774     2D 00 64 FD | 	ret
26778                 | 
26778                 | __system__LCase_S
26778     07 4A 05 F6 | 	mov	COUNT_, #7
2677c     A8 00 A0 FD | 	call	#pushregs_
26780     09 27 02 F6 | 	mov	local01, arg01
26784     09 29 02 F6 | 	mov	local02, arg01
26788     97 06 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
2678c                 | LR__3330
2678c     14 FB C9 FA | 	rdbyte	result1, local02 wz
26790     01 28 06 51 |  if_ne	add	local02, #1
26794     F4 FF 9F 5D |  if_ne	jmp	#LR__3330
26798                 | LR__3331
26798     09 29 82 F1 | 	sub	local02, arg01
2679c     14 FB 01 F6 | 	mov	result1, local02
267a0     FD 28 0A F6 | 	mov	local02, result1 wz
267a4     8D 01 00 AF 
267a8     2A FB 05 A6 |  if_e	mov	result1, ##@LR__5067
267ac     7C 00 90 AD |  if_e	jmp	#LR__3337
267b0     14 13 02 F6 | 	mov	arg01, local02
267b4     02 12 06 F1 | 	add	arg01, #2
267b8     B0 19 B0 FD | 	call	#__system___gc_alloc_managed
267bc     FD 2A 0A F6 | 	mov	local03, result1 wz
267c0     64 00 90 AD |  if_e	jmp	#LR__3336
267c4     01 2C 66 F6 | 	neg	local04, #1
267c8     97 26 48 FB | 	callpa	#(@LR__3335-@LR__3332)>>2,fcache_load_ptr_
267cc                 | LR__3332
267cc     01 2C 06 F1 | 	add	local04, #1
267d0     16 2F 02 F6 | 	mov	local05, local04
267d4     13 2F 02 F1 | 	add	local05, local01
267d8     17 31 C2 FA | 	rdbyte	local06, local05
267dc     41 30 56 F2 | 	cmps	local06, #65 wc
267e0     18 00 90 CD |  if_b	jmp	#LR__3333
267e4     5B 30 56 F2 | 	cmps	local06, #91 wc
267e8     16 33 02 C6 |  if_b	mov	local07, local04
267ec     15 33 02 C1 |  if_b	add	local07, local03
267f0     20 30 06 C1 |  if_b	add	local06, #32
267f4     19 31 42 CC |  if_b	wrbyte	local06, local07
267f8     0C 00 90 CD |  if_b	jmp	#LR__3334
267fc                 | LR__3333
267fc     16 33 02 F6 | 	mov	local07, local04
26800     15 33 02 F1 | 	add	local07, local03
26804     19 31 42 FC | 	wrbyte	local06, local07
26808                 | LR__3334
26808     14 31 02 F6 | 	mov	local06, local02
2680c     01 30 86 F1 | 	sub	local06, #1
26810     18 2D 0A F2 | 	cmp	local04, local06 wz
26814     B4 FF 9F 5D |  if_ne	jmp	#LR__3332
26818                 | LR__3335
26818     15 29 02 F1 | 	add	local02, local03
2681c     14 01 48 FC | 	wrbyte	#0, local02
26820     15 FB 01 F6 | 	mov	result1, local03
26824     04 00 90 FD | 	jmp	#LR__3337
26828                 | LR__3336
26828     15 FB 01 F6 | 	mov	result1, local03
2682c                 | LR__3337
2682c     A7 F0 03 F6 | 	mov	ptra, fp
26830     B2 00 A0 FD | 	call	#popregs_
26834                 | __system__LCase_S_ret
26834     2D 00 64 FD | 	ret
26838                 | 
26838                 | __system__LTrim_S
26838     05 4A 05 F6 | 	mov	COUNT_, #5
2683c     A8 00 A0 FD | 	call	#pushregs_
26840     09 27 02 F6 | 	mov	local01, arg01
26844     09 29 02 F6 | 	mov	local02, arg01
26848     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
2684c                 | LR__3340
2684c     14 FB C9 FA | 	rdbyte	result1, local02 wz
26850     01 28 06 51 |  if_ne	add	local02, #1
26854     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
26858                 | LR__3341
26858     09 29 82 F1 | 	sub	local02, arg01
2685c     14 FB 01 F6 | 	mov	result1, local02
26860     FD 28 0A F6 | 	mov	local02, result1 wz
26864     8D 01 00 AF 
26868     2B FB 05 A6 |  if_e	mov	result1, ##@LR__5068
2686c     7C 00 90 AD |  if_e	jmp	#LR__3346
26870     00 2A 06 F6 | 	mov	local03, #0
26874     14 2D 02 F6 | 	mov	local04, local02
26878                 | LR__3342
26878     16 2B 52 F2 | 	cmps	local03, local04 wc
2687c     68 00 90 3D |  if_ae	jmp	#LR__3345
26880     15 17 02 F6 | 	mov	arg03, local03
26884     13 17 02 F1 | 	add	arg03, local01
26888     0B 17 C2 FA | 	rdbyte	arg03, arg03
2688c     20 16 0E F2 | 	cmp	arg03, #32 wz
26890     4C 00 90 AD |  if_e	jmp	#LR__3344
26894     14 13 02 F6 | 	mov	arg01, local02
26898     15 13 82 F1 | 	sub	arg01, local03
2689c     02 12 06 F1 | 	add	arg01, #2
268a0     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
268a4     FD 2E 0A F6 | 	mov	local05, result1 wz
268a8     2C 00 90 AD |  if_e	jmp	#LR__3343
268ac     15 15 02 F6 | 	mov	arg02, local03
268b0     13 15 02 F1 | 	add	arg02, local01
268b4     14 17 02 F6 | 	mov	arg03, local02
268b8     15 17 82 F1 | 	sub	arg03, local03
268bc     17 13 02 F6 | 	mov	arg01, local05
268c0     04 E7 BF FD | 	call	#__system____builtin_memmove
268c4     15 29 82 F1 | 	sub	local02, local03
268c8     17 29 02 F1 | 	add	local02, local05
268cc     14 01 48 FC | 	wrbyte	#0, local02
268d0     17 FB 01 F6 | 	mov	result1, local05
268d4     14 00 90 FD | 	jmp	#LR__3346
268d8                 | LR__3343
268d8     17 FB 01 F6 | 	mov	result1, local05
268dc     0C 00 90 FD | 	jmp	#LR__3346
268e0                 | LR__3344
268e0     01 2A 06 F1 | 	add	local03, #1
268e4     90 FF 9F FD | 	jmp	#LR__3342
268e8                 | LR__3345
268e8     13 FB 01 F6 | 	mov	result1, local01
268ec                 | LR__3346
268ec     A7 F0 03 F6 | 	mov	ptra, fp
268f0     B2 00 A0 FD | 	call	#popregs_
268f4                 | __system__LTrim_S_ret
268f4     2D 00 64 FD | 	ret
268f8                 | 
268f8                 | __system__RTrim_S
268f8     04 4A 05 F6 | 	mov	COUNT_, #4
268fc     A8 00 A0 FD | 	call	#pushregs_
26900     09 27 02 F6 | 	mov	local01, arg01
26904     09 29 02 F6 | 	mov	local02, arg01
26908     97 06 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
2690c                 | LR__3350
2690c     14 FB C9 FA | 	rdbyte	result1, local02 wz
26910     01 28 06 51 |  if_ne	add	local02, #1
26914     F4 FF 9F 5D |  if_ne	jmp	#LR__3350
26918                 | LR__3351
26918     09 29 82 F1 | 	sub	local02, arg01
2691c     14 FB 01 F6 | 	mov	result1, local02
26920     FD 28 0A F6 | 	mov	local02, result1 wz
26924     8D 01 00 AF 
26928     2C FB 05 A6 |  if_e	mov	result1, ##@LR__5069
2692c     74 00 90 AD |  if_e	jmp	#LR__3355
26930     14 2B 02 F6 | 	mov	local03, local02
26934     01 2A 86 F1 | 	sub	local03, #1
26938                 | LR__3352
26938     15 15 02 F6 | 	mov	arg02, local03
2693c     13 15 02 F1 | 	add	arg02, local01
26940     0A 29 C2 FA | 	rdbyte	local02, arg02
26944     20 28 0E F2 | 	cmp	local02, #32 wz
26948     44 00 90 AD |  if_e	jmp	#LR__3354
2694c     15 13 02 F6 | 	mov	arg01, local03
26950     02 12 06 F1 | 	add	arg01, #2
26954     14 18 B0 FD | 	call	#__system___gc_alloc_managed
26958     FD 2C 0A F6 | 	mov	local04, result1 wz
2695c     28 00 90 AD |  if_e	jmp	#LR__3353
26960     15 17 02 F6 | 	mov	arg03, local03
26964     01 16 06 F1 | 	add	arg03, #1
26968     16 13 02 F6 | 	mov	arg01, local04
2696c     13 15 02 F6 | 	mov	arg02, local01
26970     54 E6 BF FD | 	call	#__system____builtin_memmove
26974     01 2A 06 F1 | 	add	local03, #1
26978     16 2B 02 F1 | 	add	local03, local04
2697c     15 01 48 FC | 	wrbyte	#0, local03
26980     16 FB 01 F6 | 	mov	result1, local04
26984     1C 00 90 FD | 	jmp	#LR__3355
26988                 | LR__3353
26988     16 FB 01 F6 | 	mov	result1, local04
2698c     14 00 90 FD | 	jmp	#LR__3355
26990                 | LR__3354
26990     01 2A 86 F1 | 	sub	local03, #1
26994     00 2A 56 F2 | 	cmps	local03, #0 wc
26998     9C FF 9F 3D |  if_ae	jmp	#LR__3352
2699c     8D 01 00 FF 
269a0     2D FB 05 F6 | 	mov	result1, ##@LR__5070
269a4                 | LR__3355
269a4     A7 F0 03 F6 | 	mov	ptra, fp
269a8     B2 00 A0 FD | 	call	#popregs_
269ac                 | __system__RTrim_S_ret
269ac     2D 00 64 FD | 	ret
269b0                 | 
269b0                 | __system__Instr
269b0     07 4A 05 F6 | 	mov	COUNT_, #7
269b4     A8 00 A0 FD | 	call	#pushregs_
269b8     09 27 02 F6 | 	mov	local01, arg01
269bc     0A 29 02 F6 | 	mov	local02, arg02
269c0     0B 2B 02 F6 | 	mov	local03, arg03
269c4     15 13 02 F6 | 	mov	arg01, local03
269c8     09 2D 02 F6 | 	mov	local04, arg01
269cc     97 06 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
269d0                 | LR__3360
269d0     16 FB C9 FA | 	rdbyte	result1, local04 wz
269d4     01 2C 06 51 |  if_ne	add	local04, #1
269d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3360
269dc                 | LR__3361
269dc     09 2D 82 F1 | 	sub	local04, arg01
269e0     16 2F 02 F6 | 	mov	local05, local04
269e4     14 13 02 F6 | 	mov	arg01, local02
269e8     09 2D 02 F6 | 	mov	local04, arg01
269ec     97 06 48 FB | 	callpa	#(@LR__3363-@LR__3362)>>2,fcache_load_ptr_
269f0                 | LR__3362
269f0     16 FB C9 FA | 	rdbyte	result1, local04 wz
269f4     01 2C 06 51 |  if_ne	add	local04, #1
269f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3362
269fc                 | LR__3363
269fc     09 2D 82 F1 | 	sub	local04, arg01
26a00     16 FB 01 F6 | 	mov	result1, local04
26a04     FD 18 0A F6 | 	mov	arg04, result1 wz
26a08     00 FA 05 A6 |  if_e	mov	result1, #0
26a0c     98 00 90 AD |  if_e	jmp	#LR__3367
26a10     00 2E 0E F2 | 	cmp	local05, #0 wz
26a14     00 FA 05 A6 |  if_e	mov	result1, #0
26a18     8C 00 90 AD |  if_e	jmp	#LR__3367
26a1c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
26a20     00 FA 05 16 |  if_a	mov	result1, #0
26a24     80 00 90 1D |  if_a	jmp	#LR__3367
26a28     01 26 56 F2 | 	cmps	local01, #1 wc
26a2c     01 26 06 C6 |  if_b	mov	local01, #1
26a30     15 31 C2 FA | 	rdbyte	local06, local03
26a34     01 2E 0E F2 | 	cmp	local05, #1 wz
26a38     18 00 90 5D |  if_ne	jmp	#LR__3364
26a3c     14 13 02 F6 | 	mov	arg01, local02
26a40     18 15 02 F6 | 	mov	arg02, local06
26a44     13 17 02 F6 | 	mov	arg03, local01
26a48     00 18 06 F6 | 	mov	arg04, #0
26a4c     14 32 B0 FD | 	call	#__system____ScanForChar
26a50     54 00 90 FD | 	jmp	#LR__3367
26a54                 | LR__3364
26a54     13 33 02 F6 | 	mov	local07, local01
26a58                 | LR__3365
26a58     14 13 02 F6 | 	mov	arg01, local02
26a5c     18 15 02 F6 | 	mov	arg02, local06
26a60     19 17 02 F6 | 	mov	arg03, local07
26a64     00 18 06 F6 | 	mov	arg04, #0
26a68     F8 31 B0 FD | 	call	#__system____ScanForChar
26a6c     FD 32 0A F6 | 	mov	local07, result1 wz
26a70     30 00 90 AD |  if_e	jmp	#LR__3366
26a74     17 17 02 F6 | 	mov	arg03, local05
26a78     14 13 02 F6 | 	mov	arg01, local02
26a7c     19 15 02 F6 | 	mov	arg02, local07
26a80     FC FA BF FD | 	call	#__system__Mid_S
26a84     FD 12 02 F6 | 	mov	arg01, result1
26a88     15 15 02 F6 | 	mov	arg02, local03
26a8c     40 E6 BF FD | 	call	#__system___string_cmp
26a90     00 FA 0D F2 | 	cmp	result1, #0 wz
26a94     19 FB 01 A6 |  if_e	mov	result1, local07
26a98     0C 00 90 AD |  if_e	jmp	#LR__3367
26a9c     17 33 02 F1 | 	add	local07, local05
26aa0     B4 FF 9F FD | 	jmp	#LR__3365
26aa4                 | LR__3366
26aa4     00 FA 05 F6 | 	mov	result1, #0
26aa8                 | LR__3367
26aa8     A7 F0 03 F6 | 	mov	ptra, fp
26aac     B2 00 A0 FD | 	call	#popregs_
26ab0                 | __system__Instr_ret
26ab0     2D 00 64 FD | 	ret
26ab4                 | 
26ab4                 | __system___strerror
26ab4     00 12 56 F2 | 	cmps	arg01, #0 wc
26ab8     08 00 90 CD |  if_b	jmp	#LR__3370
26abc     1A 12 56 F2 | 	cmps	arg01, #26 wc
26ac0     04 00 90 CD |  if_b	jmp	#LR__3371
26ac4                 | LR__3370
26ac4     19 12 06 F6 | 	mov	arg01, #25
26ac8                 | LR__3371
26ac8     02 12 66 F0 | 	shl	arg01, #2
26acc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26ad0     01 00 00 FF 
26ad4     E0 FA 05 F1 | 	add	result1, ##736
26ad8     FD 12 02 F1 | 	add	arg01, result1
26adc     09 FB 01 FB | 	rdlong	result1, arg01
26ae0                 | __system___strerror_ret
26ae0     2D 00 64 FD | 	ret
26ae4                 | 
26ae4                 | __system___int64_shl
26ae4     20 16 CE F7 | 	test	arg03, #32 wz
26ae8     09 15 02 56 |  if_ne	mov	arg02, arg01
26aec     00 12 06 56 |  if_ne	mov	arg01, #0
26af0     1F 16 CE F7 | 	test	arg03, #31 wz
26af4     0B 15 62 50 |  if_ne	shl	arg02, arg03
26af8     09 FB 01 56 |  if_ne	mov	result1, arg01
26afc     0B FD 61 56 |  if_ne	neg	result2, arg03
26b00     FE FA 41 50 |  if_ne	shr	result1, result2
26b04     FD 14 42 55 |  if_ne	or	arg02, result1
26b08     0B 13 62 50 |  if_ne	shl	arg01, arg03
26b0c     0A FD 01 F6 | 	mov	result2, arg02
26b10     09 FB 01 F6 | 	mov	result1, arg01
26b14                 | __system___int64_shl_ret
26b14     2D 00 64 FD | 	ret
26b18                 | 
26b18                 | __system___int64_sar
26b18     20 16 CE F7 | 	test	arg03, #32 wz
26b1c     0A 13 02 56 |  if_ne	mov	arg01, arg02
26b20     1F 14 C6 50 |  if_ne	sar	arg02, #31
26b24     1F 16 CE F7 | 	test	arg03, #31 wz
26b28     0B 13 42 50 |  if_ne	shr	arg01, arg03
26b2c     0A FB 01 56 |  if_ne	mov	result1, arg02
26b30     0B FD 61 56 |  if_ne	neg	result2, arg03
26b34     FE FA 61 50 |  if_ne	shl	result1, result2
26b38     FD 12 42 55 |  if_ne	or	arg01, result1
26b3c     0B 15 C2 50 |  if_ne	sar	arg02, arg03
26b40     0A FD 01 F6 | 	mov	result2, arg02
26b44     09 FB 01 F6 | 	mov	result1, arg01
26b48                 | __system___int64_sar_ret
26b48     2D 00 64 FD | 	ret
26b4c                 | 
26b4c                 | __system___freepins
26b4c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26b50     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26b54     09 01 22 F5 | 	andn	_var01, arg01
26b58     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
26b5c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26b60     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26b64     0A 01 22 F5 | 	andn	_var01, arg02
26b68     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
26b6c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
26b70                 | __system___freepins_ret
26b70     2D 00 64 FD | 	ret
26b74                 | 
26b74                 | __system___float_fromuns
26b74     02 4A 05 F6 | 	mov	COUNT_, #2
26b78     A8 00 A0 FD | 	call	#pushregs_
26b7c     09 27 0A F6 | 	mov	local01, arg01 wz
26b80     13 FB 01 A6 |  if_e	mov	result1, local01
26b84     13 15 92 57 |  if_ne	encod	arg02, local01 wc
26b88     01 14 06 41 |  if_c_and_nz	add	arg02, #1
26b8c     01 14 86 51 |  if_ne	sub	arg02, #1
26b90     1F 28 06 56 |  if_ne	mov	local02, #31
26b94     0A 29 82 51 |  if_ne	sub	local02, arg02
26b98     14 27 62 50 |  if_ne	shl	local01, local02
26b9c     02 26 46 50 |  if_ne	shr	local01, #2
26ba0     00 12 06 56 |  if_ne	mov	arg01, #0
26ba4     13 17 02 56 |  if_ne	mov	arg03, local01
26ba8     00 09 B0 5D |  if_ne	call	#__system___float_Pack
26bac     A7 F0 03 F6 | 	mov	ptra, fp
26bb0     B2 00 A0 FD | 	call	#popregs_
26bb4                 | __system___float_fromuns_ret
26bb4     2D 00 64 FD | 	ret
26bb8                 | 
26bb8                 | __system___float_add
26bb8     11 4A 05 F6 | 	mov	COUNT_, #17
26bbc     A8 00 A0 FD | 	call	#pushregs_
26bc0     09 27 02 F6 | 	mov	local01, arg01
26bc4     0A 29 02 F6 | 	mov	local02, arg02
26bc8     00 2A 06 F6 | 	mov	local03, #0
26bcc     13 2D 02 F6 | 	mov	local04, local01
26bd0     16 2F 02 F6 | 	mov	local05, local04
26bd4     16 2E 46 F7 | 	zerox	local05, #22
26bd8     16 31 02 F6 | 	mov	local06, local04
26bdc     01 30 66 F0 | 	shl	local06, #1
26be0     18 30 46 F0 | 	shr	local06, #24
26be4     1F 2C 46 F0 | 	shr	local04, #31
26be8     14 13 02 F6 | 	mov	arg01, local02
26bec     09 FB 01 F6 | 	mov	result1, arg01
26bf0     FD 32 02 F6 | 	mov	local07, result1
26bf4     19 35 02 F6 | 	mov	local08, local07
26bf8     16 34 46 F7 | 	zerox	local08, #22
26bfc     19 37 02 F6 | 	mov	local09, local07
26c00     01 36 66 F0 | 	shl	local09, #1
26c04     18 36 46 F0 | 	shr	local09, #24
26c08     1B 39 02 F6 | 	mov	local10, local09
26c0c     1F 32 46 F0 | 	shr	local07, #31
26c10     00 3A 06 F6 | 	mov	local11, #0
26c14     00 3C 06 F6 | 	mov	local12, #0
26c18     1C 31 12 F2 | 	cmp	local06, local10 wc
26c1c     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
26c20     1A 2F 12 22 |  if_nc_and_z	cmp	local05, local08 wc
26c24     17 3F 02 C6 |  if_b	mov	local13, local05
26c28     1A 2F 02 C6 |  if_b	mov	local05, local08
26c2c     1F 35 02 C6 |  if_b	mov	local08, local13
26c30     18 3F 02 C6 |  if_b	mov	local13, local06
26c34     1C 31 02 C6 |  if_b	mov	local06, local10
26c38     1F 39 02 C6 |  if_b	mov	local10, local13
26c3c     16 3F 02 C6 |  if_b	mov	local13, local04
26c40     19 2D 02 C6 |  if_b	mov	local04, local07
26c44     1F 33 02 C6 |  if_b	mov	local07, local13
26c48     FF 30 0E F2 | 	cmp	local06, #255 wz
26c4c     64 01 90 AD |  if_e	jmp	#LR__3391
26c50     00 30 0E F2 | 	cmp	local06, #0 wz
26c54     A0 01 90 AD |  if_e	jmp	#LR__3393
26c58     17 2E 26 F4 | 	bith	local05, #23
26c5c                 | LR__3380
26c5c     00 38 0E F2 | 	cmp	local10, #0 wz
26c60     E4 01 90 AD |  if_e	jmp	#LR__3397
26c64     17 34 26 F4 | 	bith	local08, #23
26c68                 | LR__3381
26c68     7F 30 86 F1 | 	sub	local06, #127
26c6c     7F 38 86 F1 | 	sub	local10, #127
26c70     18 41 02 F6 | 	mov	local14, local06
26c74     1C 41 82 F1 | 	sub	local14, local10
26c78     97 12 48 FB | 	callpa	#(@LR__3383-@LR__3382)>>2,fcache_load_ptr_
26c7c                 | LR__3382
26c7c     20 40 56 F2 | 	cmps	local14, #32 wc
26c80     1A 37 02 36 |  if_ae	mov	local09, local08
26c84     00 3A 0E 32 |  if_ae	cmp	local11, #0 wz
26c88     6F 42 62 3D |  if_ae	wrnz	local15
26c8c     21 37 42 35 |  if_ae	or	local09, local15
26c90     1B 3B 02 36 |  if_ae	mov	local11, local09
26c94     00 34 06 36 |  if_ae	mov	local08, #0
26c98     20 40 86 31 |  if_ae	sub	local14, #32
26c9c     DC FF 9F 3D |  if_ae	jmp	#LR__3382
26ca0                 | LR__3383
26ca0     00 40 0E F2 | 	cmp	local14, #0 wz
26ca4     38 00 90 AD |  if_e	jmp	#LR__3384
26ca8     1A 3F 02 F6 | 	mov	local13, local08
26cac     20 42 06 F6 | 	mov	local15, #32
26cb0     20 43 82 F1 | 	sub	local15, local14
26cb4     21 3F 62 F0 | 	shl	local13, local15
26cb8     1D 39 02 F6 | 	mov	local10, local11
26cbc     20 42 06 F6 | 	mov	local15, #32
26cc0     20 43 82 F1 | 	sub	local15, local14
26cc4     21 39 6A F0 | 	shl	local10, local15 wz
26cc8     20 3B 42 F0 | 	shr	local11, local14
26ccc     20 35 42 F0 | 	shr	local08, local14
26cd0     1F 3B 42 F5 | 	or	local11, local13
26cd4     00 42 06 F6 | 	mov	local15, #0
26cd8     01 42 06 56 |  if_ne	mov	local15, #1
26cdc     21 3B 42 F5 | 	or	local11, local15
26ce0                 | LR__3384
26ce0     16 45 02 F6 | 	mov	local16, local04
26ce4     19 45 62 F5 | 	xor	local16, local07
26ce8     01 44 CE F7 | 	test	local16, #1 wz
26cec     18 00 90 AD |  if_e	jmp	#LR__3385
26cf0     1A 35 22 F6 | 	not	local08, local08
26cf4     1D 3B 22 F6 | 	not	local11, local11
26cf8     01 3A 0E F1 | 	add	local11, #1 wz
26cfc     00 42 06 F6 | 	mov	local15, #0
26d00     01 42 06 A6 |  if_e	mov	local15, #1
26d04     21 35 02 F1 | 	add	local08, local15
26d08                 | LR__3385
26d08     1D 3D 12 F1 | 	add	local12, local11 wc
26d0c     1A 2F 22 F1 | 	addx	local05, local08
26d10     00 2E 56 F2 | 	cmps	local05, #0 wc
26d14     01 2C 66 C5 |  if_b	xor	local04, #1
26d18     17 2F 22 C6 |  if_b	not	local05, local05
26d1c     1E 3D 22 C6 |  if_b	not	local12, local12
26d20     01 3C 0E C1 |  if_b	add	local12, #1 wz
26d24     00 42 06 C6 |  if_b	mov	local15, #0
26d28     01 42 06 86 |  if_c_and_z	mov	local15, #1
26d2c     21 2F 02 C1 |  if_b	add	local05, local15
26d30     00 80 00 FF 
26d34     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
26d38     01 30 06 31 |  if_ae	add	local06, #1
26d3c     1E 47 02 36 |  if_ae	mov	local17, local12
26d40     01 46 06 35 |  if_ae	and	local17, #1
26d44     01 3C 46 30 |  if_ae	shr	local12, #1
26d48     17 43 02 36 |  if_ae	mov	local15, local05
26d4c     1F 42 66 30 |  if_ae	shl	local15, #31
26d50     21 3D 42 35 |  if_ae	or	local12, local15
26d54     23 3D 42 35 |  if_ae	or	local12, local17
26d58     01 2E 46 30 |  if_ae	shr	local05, #1
26d5c     3C 00 90 3D |  if_ae	jmp	#LR__3390
26d60     00 40 00 FF 
26d64     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26d68     30 00 90 3D |  if_ae	jmp	#LR__3389
26d6c     00 2E 0E F2 | 	cmp	local05, #0 wz
26d70     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
26d74     08 2C 46 A5 |  if_e	or	local04, #8
26d78     01 2C 26 A5 |  if_e	andn	local04, #1
26d7c     1C 00 90 AD |  if_e	jmp	#LR__3388
26d80                 | LR__3386
26d80     00 40 00 FF 
26d84     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26d88     10 00 90 3D |  if_ae	jmp	#LR__3387
26d8c     1E 3D 12 F1 | 	add	local12, local12 wc
26d90     17 2F 22 F1 | 	addx	local05, local05
26d94     01 30 86 F1 | 	sub	local06, #1
26d98     E4 FF 9F FD | 	jmp	#LR__3386
26d9c                 | LR__3387
26d9c                 | LR__3388
26d9c                 | LR__3389
26d9c                 | LR__3390
26d9c     17 13 02 F6 | 	mov	arg01, local05
26da0     1E 15 02 F6 | 	mov	arg02, local12
26da4     18 17 02 F6 | 	mov	arg03, local06
26da8     16 19 02 F6 | 	mov	arg04, local04
26dac     BC 31 B0 FD | 	call	#__system__pack_0698
26db0     DC 00 90 FD | 	jmp	#LR__3401
26db4                 | LR__3391
26db4     FF 38 0E F2 | 	cmp	local10, #255 wz
26db8     10 00 90 5D |  if_ne	jmp	#LR__3392
26dbc     16 33 0A F2 | 	cmp	local07, local04 wz
26dc0     00 F8 3F 5F 
26dc4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26dc8     C4 00 90 5D |  if_ne	jmp	#LR__3401
26dcc                 | LR__3392
26dcc     00 2E 0E F2 | 	cmp	local05, #0 wz
26dd0     00 F8 3F 5F 
26dd4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26dd8     B4 00 90 5D |  if_ne	jmp	#LR__3401
26ddc     1E 15 02 F6 | 	mov	arg02, local12
26de0     18 17 02 F6 | 	mov	arg03, local06
26de4     16 19 02 F6 | 	mov	arg04, local04
26de8     02 18 46 F5 | 	or	arg04, #2
26dec     17 13 02 F6 | 	mov	arg01, local05
26df0     78 31 B0 FD | 	call	#__system__pack_0698
26df4     98 00 90 FD | 	jmp	#LR__3401
26df8                 | LR__3393
26df8     00 2E 0E F2 | 	cmp	local05, #0 wz
26dfc     28 00 90 AD |  if_e	jmp	#LR__3396
26e00     01 2E 66 F0 | 	shl	local05, #1
26e04     97 0E 48 FB | 	callpa	#(@LR__3395-@LR__3394)>>2,fcache_load_ptr_
26e08                 | LR__3394
26e08     00 40 00 FF 
26e0c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26e10     18 43 02 C6 |  if_b	mov	local15, local06
26e14     01 42 86 C1 |  if_b	sub	local15, #1
26e18     21 31 02 C6 |  if_b	mov	local06, local15
26e1c     01 2E 66 C0 |  if_b	shl	local05, #1
26e20     E4 FF 9F CD |  if_b	jmp	#LR__3394
26e24                 | LR__3395
26e24     34 FE 9F FD | 	jmp	#LR__3380
26e28                 | LR__3396
26e28     19 2D 02 F5 | 	and	local04, local07
26e2c     16 19 02 F6 | 	mov	arg04, local04
26e30     08 18 46 F5 | 	or	arg04, #8
26e34     00 12 06 F6 | 	mov	arg01, #0
26e38     00 14 06 F6 | 	mov	arg02, #0
26e3c     00 16 06 F6 | 	mov	arg03, #0
26e40     28 31 B0 FD | 	call	#__system__pack_0698
26e44     48 00 90 FD | 	jmp	#LR__3401
26e48                 | LR__3397
26e48     00 34 0E F2 | 	cmp	local08, #0 wz
26e4c     28 00 90 AD |  if_e	jmp	#LR__3400
26e50     01 34 66 F0 | 	shl	local08, #1
26e54     97 0E 48 FB | 	callpa	#(@LR__3399-@LR__3398)>>2,fcache_load_ptr_
26e58                 | LR__3398
26e58     00 40 00 FF 
26e5c     00 34 16 F2 | 	cmp	local08, ##8388608 wc
26e60     1C 43 02 C6 |  if_b	mov	local15, local10
26e64     01 42 86 C1 |  if_b	sub	local15, #1
26e68     21 39 02 C6 |  if_b	mov	local10, local15
26e6c     01 34 66 C0 |  if_b	shl	local08, #1
26e70     E4 FF 9F CD |  if_b	jmp	#LR__3398
26e74                 | LR__3399
26e74     F0 FD 9F FD | 	jmp	#LR__3381
26e78                 | LR__3400
26e78     7F 30 86 F1 | 	sub	local06, #127
26e7c     17 13 02 F6 | 	mov	arg01, local05
26e80     1E 15 02 F6 | 	mov	arg02, local12
26e84     18 17 02 F6 | 	mov	arg03, local06
26e88     16 19 02 F6 | 	mov	arg04, local04
26e8c     DC 30 B0 FD | 	call	#__system__pack_0698
26e90                 | LR__3401
26e90     A7 F0 03 F6 | 	mov	ptra, fp
26e94     B2 00 A0 FD | 	call	#popregs_
26e98                 | __system___float_add_ret
26e98     2D 00 64 FD | 	ret
26e9c                 | 
26e9c                 | __system___float_sqrt
26e9c     04 4A 05 F6 | 	mov	COUNT_, #4
26ea0     A8 00 A0 FD | 	call	#pushregs_
26ea4     09 27 02 F6 | 	mov	local01, arg01
26ea8     09 FB 01 F6 | 	mov	result1, arg01
26eac     FD 28 02 F6 | 	mov	local02, result1
26eb0     14 2B 02 F6 | 	mov	local03, local02
26eb4     16 2A 46 F7 | 	zerox	local03, #22
26eb8     14 2D 02 F6 | 	mov	local04, local02
26ebc     01 2C 66 F0 | 	shl	local04, #1
26ec0     18 2C 4E F0 | 	shr	local04, #24 wz
26ec4     1F 28 46 F0 | 	shr	local02, #31
26ec8     70 00 90 AD |  if_e	jmp	#LR__3411
26ecc     17 2A 26 F4 | 	bith	local03, #23
26ed0                 | LR__3410
26ed0     00 28 0E F2 | 	cmp	local02, #0 wz
26ed4     00 F8 3F 5F 
26ed8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26edc     88 00 90 5D |  if_ne	jmp	#LR__3414
26ee0     FF 2C 0E F2 | 	cmp	local04, #255 wz
26ee4     13 FB 01 A6 |  if_e	mov	result1, local01
26ee8     7C 00 90 AD |  if_e	jmp	#LR__3414
26eec     7F 2C 86 F1 | 	sub	local04, #127
26ef0     01 2C CE F7 | 	test	local04, #1 wz
26ef4     01 2A 66 50 |  if_ne	shl	local03, #1
26ef8     05 2A 66 F0 | 	shl	local03, #5
26efc     15 01 38 FD | 	qsqrt	#0, local03
26f00     01 2C 86 51 |  if_ne	sub	local04, #1
26f04     16 2D 52 F6 | 	abs	local04, local04 wc
26f08     01 2C 46 F0 | 	shr	local04, #1
26f0c     16 17 82 F6 | 	negc	arg03, local04
26f10     14 19 02 F6 | 	mov	arg04, local02
26f14     18 12 62 FD | 	getqx	arg01
26f18     09 15 02 F6 | 	mov	arg02, arg01
26f1c     19 14 66 F0 | 	shl	arg02, #25
26f20     07 12 46 F0 | 	shr	arg01, #7
26f24     00 80 00 FF 
26f28     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
26f2c     01 16 06 31 |  if_ae	add	arg03, #1
26f30     01 12 46 30 |  if_ae	shr	arg01, #1
26f34     34 30 B0 FD | 	call	#__system__pack_0698
26f38     2C 00 90 FD | 	jmp	#LR__3414
26f3c                 | LR__3411
26f3c     00 2A 0E F2 | 	cmp	local03, #0 wz
26f40     13 FB 01 A6 |  if_e	mov	result1, local01
26f44     20 00 90 AD |  if_e	jmp	#LR__3414
26f48     01 2A 66 F0 | 	shl	local03, #1
26f4c     97 0A 48 FB | 	callpa	#(@LR__3413-@LR__3412)>>2,fcache_load_ptr_
26f50                 | LR__3412
26f50     00 40 00 FF 
26f54     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
26f58     01 2C 86 C1 |  if_b	sub	local04, #1
26f5c     01 2A 66 C0 |  if_b	shl	local03, #1
26f60     EC FF 9F CD |  if_b	jmp	#LR__3412
26f64                 | LR__3413
26f64     68 FF 9F FD | 	jmp	#LR__3410
26f68                 | LR__3414
26f68     A7 F0 03 F6 | 	mov	ptra, fp
26f6c     B2 00 A0 FD | 	call	#popregs_
26f70                 | __system___float_sqrt_ret
26f70     2D 00 64 FD | 	ret
26f74                 | 
26f74                 | __system___float_mul
26f74     09 4A 05 F6 | 	mov	COUNT_, #9
26f78     A8 00 A0 FD | 	call	#pushregs_
26f7c     09 27 02 F6 | 	mov	local01, arg01
26f80     0A 29 02 F6 | 	mov	local02, arg02
26f84     13 2B 02 F6 | 	mov	local03, local01
26f88     15 2D 02 F6 | 	mov	local04, local03
26f8c     16 2C 46 F7 | 	zerox	local04, #22
26f90     15 2F 02 F6 | 	mov	local05, local03
26f94     01 2E 66 F0 | 	shl	local05, #1
26f98     18 2E 46 F0 | 	shr	local05, #24
26f9c     1F 2A 46 F0 | 	shr	local03, #31
26fa0     14 FB 01 F6 | 	mov	result1, local02
26fa4     FD 30 02 F6 | 	mov	local06, result1
26fa8     18 33 02 F6 | 	mov	local07, local06
26fac     16 32 46 F7 | 	zerox	local07, #22
26fb0     18 35 02 F6 | 	mov	local08, local06
26fb4     01 34 66 F0 | 	shl	local08, #1
26fb8     18 34 46 F0 | 	shr	local08, #24
26fbc     1F 30 46 F0 | 	shr	local06, #31
26fc0     18 2B 62 F5 | 	xor	local03, local06
26fc4     FF 2E 0E F2 | 	cmp	local05, #255 wz
26fc8     80 00 90 AD |  if_e	jmp	#LR__3422
26fcc     FF 34 0E F2 | 	cmp	local08, #255 wz
26fd0     C8 00 90 AD |  if_e	jmp	#LR__3424
26fd4     00 2E 0E F2 | 	cmp	local05, #0 wz
26fd8     FC 00 90 AD |  if_e	jmp	#LR__3425
26fdc     17 2C 26 F4 | 	bith	local04, #23
26fe0                 | LR__3420
26fe0     00 34 0E F2 | 	cmp	local08, #0 wz
26fe4     34 01 90 AD |  if_e	jmp	#LR__3429
26fe8     17 32 26 F4 | 	bith	local07, #23
26fec                 | LR__3421
26fec     16 31 02 F6 | 	mov	local06, local04
26ff0     04 30 66 F0 | 	shl	local06, #4
26ff4     19 37 02 F6 | 	mov	local09, local07
26ff8     05 36 66 F0 | 	shl	local09, #5
26ffc     1B 31 02 FD | 	qmul	local06, local09
27000     1A 2F 02 F1 | 	add	local05, local08
27004     FE 2E 86 F1 | 	sub	local05, #254
27008     17 17 02 F6 | 	mov	arg03, local05
2700c     04 2C 66 F0 | 	shl	local04, #4
27010     05 32 66 F0 | 	shl	local07, #5
27014     18 14 62 FD | 	getqx	arg02
27018     19 2D 02 FD | 	qmul	local04, local07
2701c     15 19 02 F6 | 	mov	arg04, local03
27020     19 12 62 FD | 	getqy	arg01
27024     00 80 00 FF 
27028     00 12 16 F2 | 	cmp	arg01, ##16777216 wc
2702c     01 16 06 31 |  if_ae	add	arg03, #1
27030     01 14 46 30 |  if_ae	shr	arg02, #1
27034     09 37 02 36 |  if_ae	mov	local09, arg01
27038     1F 36 66 30 |  if_ae	shl	local09, #31
2703c     1B 15 42 35 |  if_ae	or	arg02, local09
27040     01 12 46 30 |  if_ae	shr	arg01, #1
27044     24 2F B0 FD | 	call	#__system__pack_0698
27048     10 01 90 FD | 	jmp	#LR__3433
2704c                 | LR__3422
2704c     00 2C 0E F2 | 	cmp	local04, #0 wz
27050     13 FB 01 56 |  if_ne	mov	result1, local01
27054     04 01 90 5D |  if_ne	jmp	#LR__3433
27058     FF 34 56 F2 | 	cmps	local08, #255 wc
2705c     00 34 0E C2 |  if_b	cmp	local08, #0 wz
27060     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
27064     18 00 90 4D |  if_c_and_nz	jmp	#LR__3423
27068     00 F8 3F CF 
2706c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
27070     E8 00 90 CD |  if_b	jmp	#LR__3433
27074     00 32 0E F2 | 	cmp	local07, #0 wz
27078     14 FB 01 56 |  if_ne	mov	result1, local02
2707c     DC 00 90 5D |  if_ne	jmp	#LR__3433
27080                 | LR__3423
27080     02 2A 46 F5 | 	or	local03, #2
27084     00 12 06 F6 | 	mov	arg01, #0
27088     00 14 06 F6 | 	mov	arg02, #0
2708c     17 17 02 F6 | 	mov	arg03, local05
27090     15 19 02 F6 | 	mov	arg04, local03
27094     D4 2E B0 FD | 	call	#__system__pack_0698
27098     C0 00 90 FD | 	jmp	#LR__3433
2709c                 | LR__3424
2709c     00 2E 0E F2 | 	cmp	local05, #0 wz
270a0     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
270a4     00 F8 3F AF 
270a8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
270ac     AC 00 90 AD |  if_e	jmp	#LR__3433
270b0     00 32 0E F2 | 	cmp	local07, #0 wz
270b4     14 FB 01 56 |  if_ne	mov	result1, local02
270b8     A0 00 90 5D |  if_ne	jmp	#LR__3433
270bc     1A 17 02 F6 | 	mov	arg03, local08
270c0     15 19 02 F6 | 	mov	arg04, local03
270c4     02 18 46 F5 | 	or	arg04, #2
270c8     00 12 06 F6 | 	mov	arg01, #0
270cc     00 14 06 F6 | 	mov	arg02, #0
270d0     98 2E B0 FD | 	call	#__system__pack_0698
270d4     84 00 90 FD | 	jmp	#LR__3433
270d8                 | LR__3425
270d8     00 2C 0E F2 | 	cmp	local04, #0 wz
270dc     20 00 90 AD |  if_e	jmp	#LR__3428
270e0     01 2C 66 F0 | 	shl	local04, #1
270e4     97 0A 48 FB | 	callpa	#(@LR__3427-@LR__3426)>>2,fcache_load_ptr_
270e8                 | LR__3426
270e8     00 40 00 FF 
270ec     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
270f0     01 2E 86 C1 |  if_b	sub	local05, #1
270f4     01 2C 66 C0 |  if_b	shl	local04, #1
270f8     EC FF 9F CD |  if_b	jmp	#LR__3426
270fc                 | LR__3427
270fc     E0 FE 9F FD | 	jmp	#LR__3420
27100                 | LR__3428
27100     08 2A 46 F5 | 	or	local03, #8
27104     00 12 06 F6 | 	mov	arg01, #0
27108     00 14 06 F6 | 	mov	arg02, #0
2710c     00 16 06 F6 | 	mov	arg03, #0
27110     15 19 02 F6 | 	mov	arg04, local03
27114     54 2E B0 FD | 	call	#__system__pack_0698
27118     40 00 90 FD | 	jmp	#LR__3433
2711c                 | LR__3429
2711c     00 32 0E F2 | 	cmp	local07, #0 wz
27120     20 00 90 AD |  if_e	jmp	#LR__3432
27124     01 32 66 F0 | 	shl	local07, #1
27128     97 0A 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
2712c                 | LR__3430
2712c     00 40 00 FF 
27130     00 32 16 F2 | 	cmp	local07, ##8388608 wc
27134     01 34 86 C1 |  if_b	sub	local08, #1
27138     01 32 66 C0 |  if_b	shl	local07, #1
2713c     EC FF 9F CD |  if_b	jmp	#LR__3430
27140                 | LR__3431
27140     A8 FE 9F FD | 	jmp	#LR__3421
27144                 | LR__3432
27144     08 2A 46 F5 | 	or	local03, #8
27148     00 12 06 F6 | 	mov	arg01, #0
2714c     00 14 06 F6 | 	mov	arg02, #0
27150     00 16 06 F6 | 	mov	arg03, #0
27154     15 19 02 F6 | 	mov	arg04, local03
27158     10 2E B0 FD | 	call	#__system__pack_0698
2715c                 | LR__3433
2715c     A7 F0 03 F6 | 	mov	ptra, fp
27160     B2 00 A0 FD | 	call	#popregs_
27164                 | __system___float_mul_ret
27164     2D 00 64 FD | 	ret
27168                 | 
27168                 | __system___float_div
27168     0B 4A 05 F6 | 	mov	COUNT_, #11
2716c     A8 00 A0 FD | 	call	#pushregs_
27170     09 2B 02 F6 | 	mov	local03, arg01
27174     0A 2D 02 F6 | 	mov	local04, arg02
27178     15 2F 02 F6 | 	mov	local05, local03
2717c     17 31 02 F6 | 	mov	local06, local05
27180     16 30 46 F7 | 	zerox	local06, #22
27184     17 33 02 F6 | 	mov	local07, local05
27188     01 32 66 F0 | 	shl	local07, #1
2718c     18 32 46 F0 | 	shr	local07, #24
27190     1F 2E 46 F0 | 	shr	local05, #31
27194     16 FB 01 F6 | 	mov	result1, local04
27198     FD 34 02 F6 | 	mov	local08, result1
2719c     1A 37 02 F6 | 	mov	local09, local08
271a0     16 36 46 F7 | 	zerox	local09, #22
271a4     1A 39 02 F6 | 	mov	local10, local08
271a8     01 38 66 F0 | 	shl	local10, #1
271ac     18 38 46 F0 | 	shr	local10, #24
271b0     1F 34 46 F0 | 	shr	local08, #31
271b4     1A 2F 62 F5 | 	xor	local05, local08
271b8     FF 32 0E F2 | 	cmp	local07, #255 wz
271bc     B4 00 90 AD |  if_e	jmp	#LR__3442
271c0     FF 38 0E F2 | 	cmp	local10, #255 wz
271c4     E4 00 90 AD |  if_e	jmp	#LR__3443
271c8     00 32 0E F2 | 	cmp	local07, #0 wz
271cc     04 01 90 AD |  if_e	jmp	#LR__3444
271d0     17 30 26 F4 | 	bith	local06, #23
271d4                 | LR__3440
271d4     00 38 0E F2 | 	cmp	local10, #0 wz
271d8     50 01 90 AD |  if_e	jmp	#LR__3448
271dc     17 36 26 F4 | 	bith	local09, #23
271e0                 | LR__3441
271e0     1C 33 82 F1 | 	sub	local07, local10
271e4     19 17 02 F6 | 	mov	arg03, local07
271e8     18 13 02 F6 | 	mov	arg01, local06
271ec     02 12 46 F0 | 	shr	arg01, #2
271f0     1E 30 66 F0 | 	shl	local06, #30
271f4     28 12 62 FD | 	setq	arg01
271f8     1B 31 12 FD | 	qdiv	local06, local09
271fc     00 3A 06 F6 | 	mov	local11, #0
27200     17 19 02 F6 | 	mov	arg04, local05
27204     18 26 62 FD | 	getqx	local01
27208     19 FC 61 FD | 	getqy	result2
2720c     FE 28 02 F6 | 	mov	local02, result2
27210     13 13 02 F6 | 	mov	arg01, local01
27214     00 28 4E F2 | 	cmps	local02, #0 wz
27218     09 15 02 F6 | 	mov	arg02, arg01
2721c     19 14 66 F0 | 	shl	arg02, #25
27220     01 3A 06 56 |  if_ne	mov	local11, #1
27224     1D 15 42 F5 | 	or	arg02, local11
27228     07 12 46 F0 | 	shr	arg01, #7
2722c     00 80 00 FF 
27230     00 12 16 F2 | 	cmp	arg01, ##16777216 wc
27234     01 16 06 31 |  if_ae	add	arg03, #1
27238     01 14 46 30 |  if_ae	shr	arg02, #1
2723c     09 3B 02 36 |  if_ae	mov	local11, arg01
27240     1F 3A 66 30 |  if_ae	shl	local11, #31
27244     1D 15 42 35 |  if_ae	or	arg02, local11
27248     01 12 46 30 |  if_ae	shr	arg01, #1
2724c     00 40 00 CF 
27250     00 12 16 C2 |  if_b	cmp	arg01, ##8388608 wc
27254     01 16 86 C1 |  if_b	sub	arg03, #1
27258     01 12 66 C0 |  if_b	shl	arg01, #1
2725c     0A 3B 02 C6 |  if_b	mov	local11, arg02
27260     1F 3A 46 C0 |  if_b	shr	local11, #31
27264     1D 13 42 C5 |  if_b	or	arg01, local11
27268     01 14 66 C0 |  if_b	shl	arg02, #1
2726c     FC 2C B0 FD | 	call	#__system__pack_0698
27270     F8 00 90 FD | 	jmp	#LR__3452
27274                 | LR__3442
27274     00 30 0E F2 | 	cmp	local06, #0 wz
27278     15 FB 01 56 |  if_ne	mov	result1, local03
2727c     EC 00 90 5D |  if_ne	jmp	#LR__3452
27280     FF 38 0E F2 | 	cmp	local10, #255 wz
27284     00 F8 3F AF 
27288     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2728c     DC 00 90 AD |  if_e	jmp	#LR__3452
27290     02 2E 46 F5 | 	or	local05, #2
27294     00 12 06 F6 | 	mov	arg01, #0
27298     00 14 06 F6 | 	mov	arg02, #0
2729c     19 17 02 F6 | 	mov	arg03, local07
272a0     17 19 02 F6 | 	mov	arg04, local05
272a4     C4 2C B0 FD | 	call	#__system__pack_0698
272a8     C0 00 90 FD | 	jmp	#LR__3452
272ac                 | LR__3443
272ac     00 36 0E F2 | 	cmp	local09, #0 wz
272b0     16 FB 01 56 |  if_ne	mov	result1, local04
272b4     B4 00 90 5D |  if_ne	jmp	#LR__3452
272b8     17 19 02 F6 | 	mov	arg04, local05
272bc     08 18 46 F5 | 	or	arg04, #8
272c0     00 12 06 F6 | 	mov	arg01, #0
272c4     00 14 06 F6 | 	mov	arg02, #0
272c8     00 16 06 F6 | 	mov	arg03, #0
272cc     9C 2C B0 FD | 	call	#__system__pack_0698
272d0     98 00 90 FD | 	jmp	#LR__3452
272d4                 | LR__3444
272d4     00 30 0E F2 | 	cmp	local06, #0 wz
272d8     20 00 90 AD |  if_e	jmp	#LR__3447
272dc     01 30 66 F0 | 	shl	local06, #1
272e0     97 0A 48 FB | 	callpa	#(@LR__3446-@LR__3445)>>2,fcache_load_ptr_
272e4                 | LR__3445
272e4     00 40 00 FF 
272e8     00 30 16 F2 | 	cmp	local06, ##8388608 wc
272ec     01 32 86 C1 |  if_b	sub	local07, #1
272f0     01 30 66 C0 |  if_b	shl	local06, #1
272f4     EC FF 9F CD |  if_b	jmp	#LR__3445
272f8                 | LR__3446
272f8     D8 FE 9F FD | 	jmp	#LR__3440
272fc                 | LR__3447
272fc     00 38 0E F2 | 	cmp	local10, #0 wz
27300     00 36 0E A2 |  if_e	cmp	local09, #0 wz
27304     00 F8 3F AF 
27308     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2730c     5C 00 90 AD |  if_e	jmp	#LR__3452
27310     17 19 02 F6 | 	mov	arg04, local05
27314     08 18 46 F5 | 	or	arg04, #8
27318     00 12 06 F6 | 	mov	arg01, #0
2731c     00 14 06 F6 | 	mov	arg02, #0
27320     00 16 06 F6 | 	mov	arg03, #0
27324     44 2C B0 FD | 	call	#__system__pack_0698
27328     40 00 90 FD | 	jmp	#LR__3452
2732c                 | LR__3448
2732c     00 36 0E F2 | 	cmp	local09, #0 wz
27330     20 00 90 AD |  if_e	jmp	#LR__3451
27334     01 36 66 F0 | 	shl	local09, #1
27338     97 0A 48 FB | 	callpa	#(@LR__3450-@LR__3449)>>2,fcache_load_ptr_
2733c                 | LR__3449
2733c     00 40 00 FF 
27340     00 36 16 F2 | 	cmp	local09, ##8388608 wc
27344     01 38 86 C1 |  if_b	sub	local10, #1
27348     01 36 66 C0 |  if_b	shl	local09, #1
2734c     EC FF 9F CD |  if_b	jmp	#LR__3449
27350                 | LR__3450
27350     8C FE 9F FD | 	jmp	#LR__3441
27354                 | LR__3451
27354     02 2E 46 F5 | 	or	local05, #2
27358     00 12 06 F6 | 	mov	arg01, #0
2735c     00 14 06 F6 | 	mov	arg02, #0
27360     00 16 06 F6 | 	mov	arg03, #0
27364     17 19 02 F6 | 	mov	arg04, local05
27368     00 2C B0 FD | 	call	#__system__pack_0698
2736c                 | LR__3452
2736c     A7 F0 03 F6 | 	mov	ptra, fp
27370     B2 00 A0 FD | 	call	#popregs_
27374                 | __system___float_div_ret
27374     2D 00 64 FD | 	ret
27378                 | 
27378                 | __system___float_cmp
27378     00 C0 3F FF 
2737c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
27380     00 C0 3F CF 
27384     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
27388     0B FB 01 36 |  if_ae	mov	result1, arg03
2738c     6C 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27390     00 C0 7F FF 
27394     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
27398     00 C0 7F CF 
2739c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
273a0     0B FB 01 36 |  if_ae	mov	result1, arg03
273a4     54 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
273a8     00 12 56 F2 | 	cmps	arg01, #0 wc
273ac     2C 00 90 3D |  if_ae	jmp	#LR__3460
273b0     00 14 56 F2 | 	cmps	arg02, #0 wc
273b4     0A FB 01 C6 |  if_b	mov	result1, arg02
273b8     09 FB 81 C1 |  if_b	sub	result1, arg01
273bc     3C 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
273c0     00 14 0E F2 | 	cmp	arg02, #0 wz
273c4     00 00 40 AF 
273c8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
273cc     00 FA 05 A6 |  if_e	mov	result1, #0
273d0     28 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
273d4     01 FA 65 F6 | 	neg	result1, #1
273d8     20 00 90 FD | 	jmp	#__system___float_cmp_ret
273dc                 | LR__3460
273dc     00 14 56 F2 | 	cmps	arg02, #0 wc
273e0     00 12 0E C2 |  if_b	cmp	arg01, #0 wz
273e4     00 00 40 8F 
273e8     00 14 0E 82 |  if_c_and_z	cmp	arg02, ##-2147483648 wz
273ec     00 FA 05 86 |  if_c_and_z	mov	result1, #0
273f0     01 FA 05 46 |  if_c_and_nz	mov	result1, #1
273f4     0A 13 82 31 |  if_ae	sub	arg01, arg02
273f8     09 FB 01 36 |  if_ae	mov	result1, arg01
273fc                 | __system___float_cmp_ret
273fc     2D 00 64 FD | 	ret
27400                 | 
27400                 | __system___float_tointeger
27400     03 4A 05 F6 | 	mov	COUNT_, #3
27404     A8 00 A0 FD | 	call	#pushregs_
27408     58 00 B0 FD | 	call	#__system___float_Unpack
2740c     FD 26 02 F6 | 	mov	local01, result1
27410     1F FC 55 F2 | 	cmps	result2, #31 wc
27414     00 26 0E 32 |  if_ae	cmp	local01, #0 wz
27418     1F 28 C6 19 |  if_a	decod	local02, #31
2741c     1E 28 CE 29 |  if_nc_and_z	bmask	local02, #30
27420     14 FF 01 36 |  if_ae	mov	result3, local02
27424     2C 00 90 3D |  if_ae	jmp	#LR__3470
27428     FF FF 7F FF 
2742c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
27430     00 FE 05 C6 |  if_b	mov	result3, #0
27434     02 FE 65 30 |  if_ae	shl	result3, #2
27438     1E 2A 06 36 |  if_ae	mov	local03, #30
2743c     FE 2A 82 31 |  if_ae	sub	local03, result2
27440     15 FF 41 30 |  if_ae	shr	result3, local03
27444     0A FF 01 31 |  if_ae	add	result3, arg02
27448     01 FE 45 30 |  if_ae	shr	result3, #1
2744c     00 26 0E 32 |  if_ae	cmp	local01, #0 wz
27450     FF FE 61 16 |  if_a	neg	result3, result3
27454                 | LR__3470
27454     FF FA 01 F6 | 	mov	result1, result3
27458     A7 F0 03 F6 | 	mov	ptra, fp
2745c     B2 00 A0 FD | 	call	#popregs_
27460                 | __system___float_tointeger_ret
27460     2D 00 64 FD | 	ret
27464                 | 
27464                 | __system___float_Unpack
27464     09 FB 01 F6 | 	mov	result1, arg01
27468     1F FA 45 F0 | 	shr	result1, #31
2746c     09 FD 01 F6 | 	mov	result2, arg01
27470     01 FC 65 F0 | 	shl	result2, #1
27474     18 FC 4D F0 | 	shr	result2, #24 wz
27478     17 13 06 F4 | 	bitl	arg01, #279
2747c     06 12 66 50 |  if_ne	shl	arg01, #6
27480     1D 12 26 54 |  if_ne	bith	arg01, #29
27484     09 01 92 A7 |  if_e	encod	_var01, arg01 wc
27488     01 00 06 81 |  if_c_and_z	add	_var01, #1
2748c     17 00 86 A1 |  if_e	sub	_var01, #23
27490     00 FD 01 A6 |  if_e	mov	result2, _var01
27494     07 FE 05 A6 |  if_e	mov	result3, #7
27498     00 FF 81 A1 |  if_e	sub	result3, _var01
2749c     FF 12 62 A0 |  if_e	shl	arg01, result3
274a0     7F FC 85 F1 | 	sub	result2, #127
274a4     09 FF 01 F6 | 	mov	result3, arg01
274a8                 | __system___float_Unpack_ret
274a8     2D 00 64 FD | 	ret
274ac                 | 
274ac                 | __system___float_Pack
274ac     00 00 06 F6 | 	mov	_var01, #0
274b0     00 16 0E F2 | 	cmp	arg03, #0 wz
274b4     80 00 90 AD |  if_e	jmp	#LR__3480
274b8     0B 03 92 F7 | 	encod	_var02, arg03 wc
274bc     01 02 06 C1 |  if_b	add	_var02, #1
274c0     21 00 06 F6 | 	mov	_var01, #33
274c4     01 01 82 F1 | 	sub	_var01, _var02
274c8     00 17 62 F0 | 	shl	arg03, _var01
274cc     03 02 06 F6 | 	mov	_var02, #3
274d0     00 03 82 F1 | 	sub	_var02, _var01
274d4     0A 03 02 F1 | 	add	_var02, arg02
274d8     00 17 06 F1 | 	add	arg03, #256
274dc     0B 05 02 F6 | 	mov	_var03, arg03
274e0     FF 04 2E F5 | 	andn	_var03, #255 wz
274e4     01 02 06 A1 |  if_e	add	_var02, #1
274e8     7F 02 06 F1 | 	add	_var02, #127
274ec     FF FF 7F FF 
274f0     E9 03 46 F3 | 	fges	_var02, ##-23
274f4     FF 02 66 F3 | 	fles	_var02, #255
274f8     01 02 56 F2 | 	cmps	_var02, #1 wc
274fc     01 16 46 C0 |  if_b	shr	arg03, #1
27500     1F 04 C6 C9 |  if_b	decod	_var03, #31
27504     0B 05 02 C1 |  if_b	add	_var03, arg03
27508     01 03 62 C6 |  if_b	neg	_var02, _var02
2750c     01 05 42 C0 |  if_b	shr	_var03, _var02
27510     02 17 02 C6 |  if_b	mov	arg03, _var03
27514     00 02 06 C6 |  if_b	mov	_var02, #0
27518     09 FB 01 F6 | 	mov	result1, arg01
2751c     1F FA 65 F0 | 	shl	result1, #31
27520     17 02 66 F0 | 	shl	_var02, #23
27524     01 FB 41 F5 | 	or	result1, _var02
27528     0B 07 02 F6 | 	mov	_var04, arg03
2752c     09 06 46 F0 | 	shr	_var04, #9
27530     03 FB 41 F5 | 	or	result1, _var04
27534     04 00 90 FD | 	jmp	#__system___float_Pack_ret
27538                 | LR__3480
27538     00 FB 01 F6 | 	mov	result1, _var01
2753c                 | __system___float_Pack_ret
2753c     2D 00 64 FD | 	ret
27540                 | 
27540                 | __system___basic_print_float
27540     05 4A 05 F6 | 	mov	COUNT_, #5
27544     A8 00 A0 FD | 	call	#pushregs_
27548     09 27 02 F6 | 	mov	local01, arg01
2754c     0A 29 02 F6 | 	mov	local02, arg02
27550     0B 2B 0A F6 | 	mov	local03, arg03 wz
27554     0C 2D 02 F6 | 	mov	local04, arg04
27558     14 00 90 5D |  if_ne	jmp	#LR__3490
2755c     23 2C 0E F2 | 	cmp	local04, #35 wz
27560     80 02 10 AF 
27564     00 2E 06 A6 |  if_e	mov	local05, ##537198592
27568     1D 2E C6 59 |  if_ne	decod	local05, #29
2756c     17 2B 02 F6 | 	mov	local03, local05
27570                 | LR__3490
27570     13 13 02 F6 | 	mov	arg01, local01
27574     64 26 B0 FD | 	call	#__system___gettxfunc
27578     FD 2E 0A F6 | 	mov	local05, result1 wz
2757c     00 FA 05 A6 |  if_e	mov	result1, #0
27580     17 13 02 56 |  if_ne	mov	arg01, local05
27584     15 15 02 56 |  if_ne	mov	arg02, local03
27588     14 17 02 56 |  if_ne	mov	arg03, local02
2758c     16 19 02 56 |  if_ne	mov	arg04, local04
27590     84 E7 BF 5D |  if_ne	call	#__system___fmtfloat
27594     A7 F0 03 F6 | 	mov	ptra, fp
27598     B2 00 A0 FD | 	call	#popregs_
2759c                 | __system___basic_print_float_ret
2759c     2D 00 64 FD | 	ret
275a0                 | 
275a0                 | __system____builtin_atoi
275a0     07 4A 05 F6 | 	mov	COUNT_, #7
275a4     A8 00 A0 FD | 	call	#pushregs_
275a8                 | __system____builtin_atoi_enter
275a8     09 27 02 F6 | 	mov	local01, arg01
275ac     0A 29 02 F6 | 	mov	local02, arg02
275b0     00 2A 06 F6 | 	mov	local03, #0
275b4     00 2C 06 F6 | 	mov	local04, #0
275b8     00 2E 06 F6 | 	mov	local05, #0
275bc     97 08 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
275c0                 | LR__3500
275c0     13 31 C2 FA | 	rdbyte	local06, local01
275c4     20 30 0E F2 | 	cmp	local06, #32 wz
275c8     01 26 06 A1 |  if_e	add	local01, #1
275cc     F0 FF 9F AD |  if_e	jmp	#LR__3500
275d0                 | LR__3501
275d0     13 33 C2 FA | 	rdbyte	local07, local01
275d4     97 12 48 FB | 	callpa	#(@LR__3503-@LR__3502)>>2,fcache_load_ptr_
275d8                 | LR__3502
275d8     2D 32 0E F2 | 	cmp	local07, #45 wz
275dc     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
275e0     18 00 90 5D |  if_ne	jmp	#LR__3504
275e4     01 26 06 F1 | 	add	local01, #1
275e8     2D 32 0E F2 | 	cmp	local07, #45 wz
275ec     01 30 06 A6 |  if_e	mov	local06, #1
275f0     18 2F C2 A2 |  if_e	subr	local05, local06
275f4     13 33 C2 FA | 	rdbyte	local07, local01
275f8     DC FF 9F FD | 	jmp	#LR__3502
275fc                 | LR__3503
275fc                 | LR__3504
275fc     00 28 0E F2 | 	cmp	local02, #0 wz
27600     1C 00 90 5D |  if_ne	jmp	#LR__3506
27604     24 32 0E F2 | 	cmp	local07, #36 wz
27608     10 28 06 A6 |  if_e	mov	local02, #16
2760c     01 26 06 A1 |  if_e	add	local01, #1
27610     0C 00 90 AD |  if_e	jmp	#LR__3505
27614     25 32 0E F2 | 	cmp	local07, #37 wz
27618     02 28 06 A6 |  if_e	mov	local02, #2
2761c     01 26 06 A1 |  if_e	add	local01, #1
27620                 | LR__3505
27620                 | LR__3506
27620     97 48 48 FB | 	callpa	#(@LR__3514-@LR__3507)>>2,fcache_load_ptr_
27624                 | LR__3507
27624                 | LR__3508
27624     13 33 C2 FA | 	rdbyte	local07, local01
27628     5F 32 0E F2 | 	cmp	local07, #95 wz
2762c     01 26 06 F1 | 	add	local01, #1
27630     F0 FF 9F AD |  if_e	jmp	#LR__3508
27634     30 32 0E F2 | 	cmp	local07, #48 wz
27638     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2763c     00 2C 06 A6 |  if_e	mov	local04, #0
27640     60 00 90 AD |  if_e	jmp	#LR__3513
27644     31 32 56 F2 | 	cmps	local07, #49 wc
27648     18 00 90 CD |  if_b	jmp	#LR__3509
2764c     3A 32 56 F2 | 	cmps	local07, #58 wc
27650     19 2D 02 C6 |  if_b	mov	local04, local07
27654     30 2C 86 C1 |  if_b	sub	local04, #48
27658     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2765c     0A 28 06 86 |  if_c_and_z	mov	local02, #10
27660     40 00 90 CD |  if_b	jmp	#LR__3512
27664                 | LR__3509
27664     0B 28 56 F2 | 	cmps	local02, #11 wc
27668     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2766c     14 00 90 CD |  if_b	jmp	#LR__3510
27670     67 32 56 F2 | 	cmps	local07, #103 wc
27674     61 32 86 C1 |  if_b	sub	local07, #97
27678     0A 2C 06 C6 |  if_b	mov	local04, #10
2767c     19 2D 02 C1 |  if_b	add	local04, local07
27680     20 00 90 CD |  if_b	jmp	#LR__3511
27684                 | LR__3510
27684     0B 28 56 F2 | 	cmps	local02, #11 wc
27688     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2768c     24 00 90 CD |  if_b	jmp	#LR__3515
27690     47 32 56 F2 | 	cmps	local07, #71 wc
27694     41 32 86 C1 |  if_b	sub	local07, #65
27698     0A 2C 06 C6 |  if_b	mov	local04, #10
2769c     19 2D 02 C1 |  if_b	add	local04, local07
276a0     10 00 90 3D |  if_ae	jmp	#LR__3515
276a4                 | LR__3511
276a4                 | LR__3512
276a4                 | LR__3513
276a4     15 29 02 FD | 	qmul	local02, local03
276a8     18 2A 62 FD | 	getqx	local03
276ac     16 2B 02 F1 | 	add	local03, local04
276b0     70 FF 9F FD | 	jmp	#LR__3507
276b4                 | LR__3514
276b4                 | LR__3515
276b4     00 28 0E F2 | 	cmp	local02, #0 wz
276b8     64 00 90 5D |  if_ne	jmp	#LR__3521
276bc     78 32 0E F2 | 	cmp	local07, #120 wz
276c0     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
276c4     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
276c8     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
276cc     14 00 90 5D |  if_ne	jmp	#LR__3516
276d0     13 13 02 F6 | 	mov	arg01, local01
276d4     10 14 06 F6 | 	mov	arg02, #16
276d8     C4 FE BF FD | 	call	#__system____builtin_atoi
276dc     FD 2A 02 F6 | 	mov	local03, result1
276e0     3C 00 90 FD | 	jmp	#LR__3520
276e4                 | LR__3516
276e4     62 32 0E F2 | 	cmp	local07, #98 wz
276e8     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
276ec     14 00 90 5D |  if_ne	jmp	#LR__3517
276f0     13 13 02 F6 | 	mov	arg01, local01
276f4     02 14 06 F6 | 	mov	arg02, #2
276f8     A4 FE BF FD | 	call	#__system____builtin_atoi
276fc     FD 2A 02 F6 | 	mov	local03, result1
27700     1C 00 90 FD | 	jmp	#LR__3519
27704                 | LR__3517
27704     6F 32 0E F2 | 	cmp	local07, #111 wz
27708     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2770c     10 00 90 5D |  if_ne	jmp	#LR__3518
27710     13 13 02 F6 | 	mov	arg01, local01
27714     08 14 06 F6 | 	mov	arg02, #8
27718     84 FE BF FD | 	call	#__system____builtin_atoi
2771c     FD 2A 02 F6 | 	mov	local03, result1
27720                 | LR__3518
27720                 | LR__3519
27720                 | LR__3520
27720                 | LR__3521
27720     00 2E 0E F2 | 	cmp	local05, #0 wz
27724     15 2B 62 56 |  if_ne	neg	local03, local03
27728     15 FB 01 F6 | 	mov	result1, local03
2772c     A7 F0 03 F6 | 	mov	ptra, fp
27730     B2 00 A0 FD | 	call	#popregs_
27734                 | __system____builtin_atoi_ret
27734     2D 00 64 FD | 	ret
27738                 | 
27738                 | __system____builtin_atof
27738     07 4A 05 F6 | 	mov	COUNT_, #7
2773c     A8 00 A0 FD | 	call	#pushregs_
27740     09 27 02 F6 | 	mov	local01, arg01
27744     00 28 06 F6 | 	mov	local02, #0
27748     00 2A 06 F6 | 	mov	local03, #0
2774c     00 2C 06 F6 | 	mov	local04, #0
27750     00 2E 06 F6 | 	mov	local05, #0
27754     97 08 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
27758                 | LR__3530
27758     13 17 C2 FA | 	rdbyte	arg03, local01
2775c     20 16 0E F2 | 	cmp	arg03, #32 wz
27760     01 26 06 A1 |  if_e	add	local01, #1
27764     F0 FF 9F AD |  if_e	jmp	#LR__3530
27768                 | LR__3531
27768     13 31 C2 FA | 	rdbyte	local06, local01
2776c                 | LR__3532
2776c     2B 30 0E F2 | 	cmp	local06, #43 wz
27770     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
27774     14 00 90 5D |  if_ne	jmp	#LR__3533
27778     2D 30 0E F2 | 	cmp	local06, #45 wz
2777c     1F 2C E6 A4 |  if_e	bitnot	local04, #31
27780     01 26 06 F1 | 	add	local01, #1
27784     13 31 C2 FA | 	rdbyte	local06, local01
27788     E0 FF 9F FD | 	jmp	#LR__3532
2778c                 | LR__3533
2778c                 | LR__3534
2778c     97 08 48 FB | 	callpa	#(@LR__3536-@LR__3535)>>2,fcache_load_ptr_
27790                 | LR__3535
27790     13 31 C2 FA | 	rdbyte	local06, local01
27794     5F 30 0E F2 | 	cmp	local06, #95 wz
27798     01 26 06 F1 | 	add	local01, #1
2779c     F0 FF 9F AD |  if_e	jmp	#LR__3535
277a0                 | LR__3536
277a0     00 30 0E F2 | 	cmp	local06, #0 wz
277a4     5C 00 90 AD |  if_e	jmp	#LR__3538
277a8     30 30 56 F2 | 	cmps	local06, #48 wc
277ac     44 00 90 CD |  if_b	jmp	#LR__3537
277b0     3A 30 56 F2 | 	cmps	local06, #58 wc
277b4     3C 00 90 3D |  if_ae	jmp	#LR__3537
277b8     14 13 02 F6 | 	mov	arg01, local02
277bc     00 90 20 FF 
277c0     00 14 06 F6 | 	mov	arg02, ##1092616192
277c4     AC F7 BF FD | 	call	#__system___float_mul
277c8     FD 28 02 F6 | 	mov	local02, result1
277cc     30 30 86 F1 | 	sub	local06, #48
277d0     18 13 02 F6 | 	mov	arg01, local06
277d4     9C F3 BF FD | 	call	#__system___float_fromuns
277d8     FD 14 02 F6 | 	mov	arg02, result1
277dc     14 13 02 F6 | 	mov	arg01, local02
277e0     D4 F3 BF FD | 	call	#__system___float_add
277e4     FD 28 02 F6 | 	mov	local02, result1
277e8     00 2E 0E F2 | 	cmp	local05, #0 wz
277ec     01 2A 86 51 |  if_ne	sub	local03, #1
277f0     98 FF 9F FD | 	jmp	#LR__3534
277f4                 | LR__3537
277f4     2E 30 0E F2 | 	cmp	local06, #46 wz
277f8     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
277fc     01 2E 06 A6 |  if_e	mov	local05, #1
27800     88 FF 9F AD |  if_e	jmp	#LR__3534
27804                 | LR__3538
27804     45 30 0E F2 | 	cmp	local06, #69 wz
27808     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2780c     18 00 90 5D |  if_ne	jmp	#LR__3539
27810     13 13 02 F6 | 	mov	arg01, local01
27814     00 14 06 F6 | 	mov	arg02, #0
27818     84 FD BF FD | 	call	#__system____builtin_atoi
2781c     15 FB 01 F1 | 	add	result1, local03
27820     FD 32 02 F6 | 	mov	local07, result1
27824     04 00 90 FD | 	jmp	#LR__3540
27828                 | LR__3539
27828     15 33 02 F6 | 	mov	local07, local03
2782c                 | LR__3540
2782c     19 17 02 F6 | 	mov	arg03, local07
27830     14 13 02 F6 | 	mov	arg01, local02
27834     00 90 20 FF 
27838     00 14 06 F6 | 	mov	arg02, ##1092616192
2783c     10 06 B0 FD | 	call	#__system___float_pow_n
27840     16 FB 61 F5 | 	xor	result1, local04
27844     A7 F0 03 F6 | 	mov	ptra, fp
27848     B2 00 A0 FD | 	call	#popregs_
2784c                 | __system____builtin_atof_ret
2784c     2D 00 64 FD | 	ret
27850                 | 
27850                 | __system____builtin_ilogb
27850     10 FC BF FD | 	call	#__system___float_Unpack
27854     00 FE 0D F2 | 	cmp	result3, #0 wz
27858     00 00 40 AF 
2785c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
27860     24 00 90 AD |  if_e	jmp	#LR__3551
27864     80 FC 0D F2 | 	cmp	result2, #128 wz
27868     18 00 90 5D |  if_ne	jmp	#LR__3550
2786c     00 00 10 FF 
27870     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
27874     1E FA CD A9 |  if_e	bmask	result1, #30
27878     0C 00 90 AD |  if_e	jmp	#LR__3551
2787c     1F FA C5 F9 | 	decod	result1, #31
27880     04 00 90 FD | 	jmp	#LR__3551
27884                 | LR__3550
27884     FE FA 01 F6 | 	mov	result1, result2
27888                 | LR__3551
27888                 | __system____builtin_ilogb_ret
27888     2D 00 64 FD | 	ret
2788c                 | 
2788c                 | __system____builtin_sinf
2788c     03 4A 05 F6 | 	mov	COUNT_, #3
27890     A8 00 A0 FD | 	call	#pushregs_
27894     09 27 02 F6 | 	mov	local01, arg01
27898     87 64 20 FF 
2789c     DB 15 06 F6 | 	mov	arg02, ##1086918619
278a0     C4 F8 BF FD | 	call	#__system___float_div
278a4     FD 12 02 F6 | 	mov	arg01, result1
278a8     00 14 06 F6 | 	mov	arg02, #0
278ac     50 FB BF FD | 	call	#__system___float_tointeger
278b0     FD 16 0A F6 | 	mov	arg03, result1 wz
278b4     44 00 90 AD |  if_e	jmp	#LR__3560
278b8     0B 13 52 F6 | 	abs	arg01, arg03 wc
278bc     1F 28 C6 C9 |  if_b	decod	local02, #31
278c0     00 28 06 36 |  if_ae	mov	local02, #0
278c4     AC F2 BF FD | 	call	#__system___float_fromuns
278c8     14 FB 61 F5 | 	xor	result1, local02
278cc     FD 12 02 F6 | 	mov	arg01, result1
278d0     1E 14 C6 F9 | 	decod	arg02, #30
278d4     9C F6 BF FD | 	call	#__system___float_mul
278d8     FD 12 02 F6 | 	mov	arg01, result1
278dc     87 24 20 FF 
278e0     DB 15 06 F6 | 	mov	arg02, ##1078530011
278e4     8C F6 BF FD | 	call	#__system___float_mul
278e8     FD 14 02 F6 | 	mov	arg02, result1
278ec     13 13 02 F6 | 	mov	arg01, local01
278f0     1F 14 E6 F4 | 	bitnot	arg02, #31
278f4     C0 F2 BF FD | 	call	#__system___float_add
278f8     FD 26 02 F6 | 	mov	local01, result1
278fc                 | LR__3560
278fc     13 13 02 F6 | 	mov	arg01, local01
27900     66 E6 1E FF 
27904     CD 14 06 F6 | 	mov	arg02, ##1036831949
27908     01 16 06 F6 | 	mov	arg03, #1
2790c     68 FA BF FD | 	call	#__system___float_cmp
27910     00 FA 55 F2 | 	cmps	result1, #0 wc
27914     5C 00 90 3D |  if_ae	jmp	#LR__3561
27918     13 13 02 F6 | 	mov	arg01, local01
2791c     66 E6 5E FF 
27920     CD 14 06 F6 | 	mov	arg02, ##-1110651699
27924     01 16 66 F6 | 	neg	arg03, #1
27928     4C FA BF FD | 	call	#__system___float_cmp
2792c     01 FA 55 F2 | 	cmps	result1, #1 wc
27930     40 00 90 CD |  if_b	jmp	#LR__3561
27934     13 13 02 F6 | 	mov	arg01, local01
27938     13 15 02 F6 | 	mov	arg02, local01
2793c     34 F6 BF FD | 	call	#__system___float_mul
27940     FD 12 02 F6 | 	mov	arg01, result1
27944     13 15 02 F6 | 	mov	arg02, local01
27948     28 F6 BF FD | 	call	#__system___float_mul
2794c     FD 12 02 F6 | 	mov	arg01, result1
27950     00 60 20 FF 
27954     00 14 06 F6 | 	mov	arg02, ##1086324736
27958     0C F8 BF FD | 	call	#__system___float_div
2795c     FD 14 02 F6 | 	mov	arg02, result1
27960     13 13 02 F6 | 	mov	arg01, local01
27964     1F 14 E6 F4 | 	bitnot	arg02, #31
27968     4C F2 BF FD | 	call	#__system___float_add
2796c     FD 2A 02 F6 | 	mov	local03, result1
27970     54 00 90 FD | 	jmp	#LR__3562
27974                 | LR__3561
27974     13 13 02 F6 | 	mov	arg01, local01
27978     7C 91 26 FF 
2797c     83 15 06 F6 | 	mov	arg02, ##1294137731
27980     F0 F5 BF FD | 	call	#__system___float_mul
27984     FD 12 02 F6 | 	mov	arg01, result1
27988     00 14 06 F6 | 	mov	arg02, #0
2798c     70 FA BF FD | 	call	#__system___float_tointeger
27990     02 FA 65 F0 | 	shl	result1, #2
27994     00 00 A0 FF 
27998     FD 00 48 FD | 	qrotate	##1073741824, result1
2799c     19 12 62 FD | 	getqy	arg01
279a0     09 13 52 F6 | 	abs	arg01, arg01 wc
279a4     1F 28 C6 C9 |  if_b	decod	local02, #31
279a8     00 28 06 36 |  if_ae	mov	local02, #0
279ac     C4 F1 BF FD | 	call	#__system___float_fromuns
279b0     14 FB 61 F5 | 	xor	result1, local02
279b4     FD 12 02 F6 | 	mov	arg01, result1
279b8     00 40 27 FF 
279bc     00 14 06 F6 | 	mov	arg02, ##1317011456
279c0     A4 F7 BF FD | 	call	#__system___float_div
279c4     FD 2A 02 F6 | 	mov	local03, result1
279c8                 | LR__3562
279c8     15 FB 01 F6 | 	mov	result1, local03
279cc     A7 F0 03 F6 | 	mov	ptra, fp
279d0     B2 00 A0 FD | 	call	#popregs_
279d4                 | __system____builtin_sinf_ret
279d4     2D 00 64 FD | 	ret
279d8                 | 
279d8                 | __system____builtin_atan2f
279d8     04 4A 05 F6 | 	mov	COUNT_, #4
279dc     A8 00 A0 FD | 	call	#pushregs_
279e0     09 27 02 F6 | 	mov	local01, arg01
279e4     0A 29 02 F6 | 	mov	local02, arg02
279e8     13 13 02 F6 | 	mov	arg01, local01
279ec     00 14 06 F6 | 	mov	arg02, #0
279f0     01 16 06 F6 | 	mov	arg03, #1
279f4     80 F9 BF FD | 	call	#__system___float_cmp
279f8     00 FA 0D F2 | 	cmp	result1, #0 wz
279fc     28 00 90 5D |  if_ne	jmp	#LR__3570
27a00     14 13 02 F6 | 	mov	arg01, local02
27a04     00 14 06 F6 | 	mov	arg02, #0
27a08     01 16 06 F6 | 	mov	arg03, #1
27a0c     68 F9 BF FD | 	call	#__system___float_cmp
27a10     00 FA 55 F2 | 	cmps	result1, #0 wc
27a14     87 24 60 CF 
27a18     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
27a1c     DC 00 90 CD |  if_b	jmp	#LR__3571
27a20     00 FA 05 F6 | 	mov	result1, #0
27a24     D4 00 90 FD | 	jmp	#LR__3571
27a28                 | LR__3570
27a28     14 13 02 F6 | 	mov	arg01, local02
27a2c     14 15 02 F6 | 	mov	arg02, local02
27a30     40 F5 BF FD | 	call	#__system___float_mul
27a34     FD 2A 02 F6 | 	mov	local03, result1
27a38     13 13 02 F6 | 	mov	arg01, local01
27a3c     13 15 02 F6 | 	mov	arg02, local01
27a40     30 F5 BF FD | 	call	#__system___float_mul
27a44     FD 14 02 F6 | 	mov	arg02, result1
27a48     15 13 02 F6 | 	mov	arg01, local03
27a4c     68 F1 BF FD | 	call	#__system___float_add
27a50     FD 12 02 F6 | 	mov	arg01, result1
27a54     44 F4 BF FD | 	call	#__system___float_sqrt
27a58     FD 2A 02 F6 | 	mov	local03, result1
27a5c     14 13 02 F6 | 	mov	arg01, local02
27a60     15 15 02 F6 | 	mov	arg02, local03
27a64     00 F7 BF FD | 	call	#__system___float_div
27a68     FD 28 02 F6 | 	mov	local02, result1
27a6c     13 13 02 F6 | 	mov	arg01, local01
27a70     15 15 02 F6 | 	mov	arg02, local03
27a74     F0 F6 BF FD | 	call	#__system___float_div
27a78     FD 26 02 F6 | 	mov	local01, result1
27a7c     00 40 27 FF 
27a80     00 12 06 F6 | 	mov	arg01, ##1317011456
27a84     14 15 02 F6 | 	mov	arg02, local02
27a88     E8 F4 BF FD | 	call	#__system___float_mul
27a8c     FD 12 02 F6 | 	mov	arg01, result1
27a90     00 14 06 F6 | 	mov	arg02, #0
27a94     68 F9 BF FD | 	call	#__system___float_tointeger
27a98     FD 2A 02 F6 | 	mov	local03, result1
27a9c     00 40 27 FF 
27aa0     00 12 06 F6 | 	mov	arg01, ##1317011456
27aa4     13 15 02 F6 | 	mov	arg02, local01
27aa8     C8 F4 BF FD | 	call	#__system___float_mul
27aac     FD 12 02 F6 | 	mov	arg01, result1
27ab0     00 14 06 F6 | 	mov	arg02, #0
27ab4     48 F9 BF FD | 	call	#__system___float_tointeger
27ab8     FD 2A 52 FD | 	qvector	local03, result1
27abc     87 24 20 FF 
27ac0     DB 2B 06 F6 | 	mov	local03, ##1078530011
27ac4     19 12 62 FD | 	getqy	arg01
27ac8     01 12 C6 F0 | 	sar	arg01, #1
27acc     09 13 52 F6 | 	abs	arg01, arg01 wc
27ad0     1F 2C C6 C9 |  if_b	decod	local04, #31
27ad4     00 2C 06 36 |  if_ae	mov	local04, #0
27ad8     98 F0 BF FD | 	call	#__system___float_fromuns
27adc     16 FB 61 F5 | 	xor	result1, local04
27ae0     FD 12 02 F6 | 	mov	arg01, result1
27ae4     00 40 27 FF 
27ae8     00 14 06 F6 | 	mov	arg02, ##1317011456
27aec     78 F6 BF FD | 	call	#__system___float_div
27af0     FD 14 02 F6 | 	mov	arg02, result1
27af4     15 13 02 F6 | 	mov	arg01, local03
27af8     78 F4 BF FD | 	call	#__system___float_mul
27afc                 | LR__3571
27afc     A7 F0 03 F6 | 	mov	ptra, fp
27b00     B2 00 A0 FD | 	call	#popregs_
27b04                 | __system____builtin_atan2f_ret
27b04     2D 00 64 FD | 	ret
27b08                 | 
27b08                 | __system____builtin_exp2f
27b08     05 4A 05 F6 | 	mov	COUNT_, #5
27b0c     A8 00 A0 FD | 	call	#pushregs_
27b10     09 27 02 F6 | 	mov	local01, arg01
27b14     00 7F 21 FF 
27b18     00 14 06 F6 | 	mov	arg02, ##1123942400
27b1c     01 16 66 F6 | 	neg	arg03, #1
27b20     54 F8 BF FD | 	call	#__system___float_cmp
27b24     00 FA 55 F2 | 	cmps	result1, #0 wc
27b28     00 C0 3F 3F 
27b2c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
27b30     D8 00 90 3D |  if_ae	jmp	#LR__3581
27b34     13 13 02 F6 | 	mov	arg01, local01
27b38     00 7F 61 FF 
27b3c     00 14 06 F6 | 	mov	arg02, ##-1023541248
27b40     01 16 06 F6 | 	mov	arg03, #1
27b44     30 F8 BF FD | 	call	#__system___float_cmp
27b48     00 FA 55 F2 | 	cmps	result1, #0 wc
27b4c     00 FA 05 C6 |  if_b	mov	result1, #0
27b50     B8 00 90 CD |  if_b	jmp	#LR__3581
27b54     13 13 02 F6 | 	mov	arg01, local01
27b58     00 14 06 F6 | 	mov	arg02, #0
27b5c     A0 F8 BF FD | 	call	#__system___float_tointeger
27b60     FD 28 02 F6 | 	mov	local02, result1
27b64     14 13 52 F6 | 	abs	arg01, local02 wc
27b68     1F 2A C6 C9 |  if_b	decod	local03, #31
27b6c     00 2A 06 36 |  if_ae	mov	local03, #0
27b70     00 F0 BF FD | 	call	#__system___float_fromuns
27b74     15 FB 61 F5 | 	xor	result1, local03
27b78     FD 14 02 F6 | 	mov	arg02, result1
27b7c     13 13 02 F6 | 	mov	arg01, local01
27b80     1F 14 E6 F4 | 	bitnot	arg02, #31
27b84     30 F0 BF FD | 	call	#__system___float_add
27b88     FD 2C 02 F6 | 	mov	local04, result1
27b8c     16 13 02 F6 | 	mov	arg01, local04
27b90     00 14 06 F6 | 	mov	arg02, #0
27b94     01 16 06 F6 | 	mov	arg03, #1
27b98     DC F7 BF FD | 	call	#__system___float_cmp
27b9c     00 FA 55 F2 | 	cmps	result1, #0 wc
27ba0     18 00 90 3D |  if_ae	jmp	#LR__3580
27ba4     16 13 02 F6 | 	mov	arg01, local04
27ba8     00 C0 1F FF 
27bac     00 14 06 F6 | 	mov	arg02, ##1065353216
27bb0     04 F0 BF FD | 	call	#__system___float_add
27bb4     FD 2C 02 F6 | 	mov	local04, result1
27bb8     01 28 86 F1 | 	sub	local02, #1
27bbc                 | LR__3580
27bbc     7F 28 06 F1 | 	add	local02, #127
27bc0     17 28 66 F0 | 	shl	local02, #23
27bc4     16 13 02 F6 | 	mov	arg01, local04
27bc8     00 80 26 FF 
27bcc     00 14 06 F6 | 	mov	arg02, ##1291845632
27bd0     A0 F3 BF FD | 	call	#__system___float_mul
27bd4     FD 12 02 F6 | 	mov	arg01, result1
27bd8     00 14 06 F6 | 	mov	arg02, #0
27bdc     20 F8 BF FD | 	call	#__system___float_tointeger
27be0     FD 2E 0A F6 | 	mov	local05, result1 wz
27be4     3E 2E 26 54 |  if_ne	bith	local05, #62
27be8     0F 2E 62 5D |  if_ne	qexp	local05
27bec     14 FB 01 A6 |  if_e	mov	result1, local02
27bf0     14 13 02 56 |  if_ne	mov	arg01, local02
27bf4     18 14 62 5D |  if_ne	getqx	arg02
27bf8     01 14 06 51 |  if_ne	add	arg02, #1
27bfc     01 14 46 50 |  if_ne	shr	arg02, #1
27c00     00 80 1F 5F 
27c04     00 14 06 51 |  if_ne	add	arg02, ##1056964608
27c08     68 F3 BF 5D |  if_ne	call	#__system___float_mul
27c0c                 | LR__3581
27c0c     A7 F0 03 F6 | 	mov	ptra, fp
27c10     B2 00 A0 FD | 	call	#popregs_
27c14                 | __system____builtin_exp2f_ret
27c14     2D 00 64 FD | 	ret
27c18                 | 
27c18                 | __system____builtin_log2f
27c18     06 4A 05 F6 | 	mov	COUNT_, #6
27c1c     A8 00 A0 FD | 	call	#pushregs_
27c20     09 27 02 F6 | 	mov	local01, arg01
27c24     09 29 0A F6 | 	mov	local02, arg01 wz
27c28     00 00 40 5F 
27c2c     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27c30     00 40 00 AF 
27c34     00 FA 65 A6 |  if_e	neg	result1, ##8388608
27c38     08 01 90 AD |  if_e	jmp	#LR__3594
27c3c     00 28 56 F2 | 	cmps	local02, #0 wc
27c40     00 E0 3F CF 
27c44     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
27c48     F8 00 90 CD |  if_b	jmp	#LR__3594
27c4c     13 13 02 F6 | 	mov	arg01, local01
27c50     00 90 20 FF 
27c54     00 14 06 F6 | 	mov	arg02, ##1092616192
27c58     01 16 06 F6 | 	mov	arg03, #1
27c5c     18 F7 BF FD | 	call	#__system___float_cmp
27c60     00 FA 0D F2 | 	cmp	result1, #0 wz
27c64     4D 2A 20 AF 
27c68     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
27c6c     D4 00 90 AD |  if_e	jmp	#LR__3594
27c70     13 13 02 F6 | 	mov	arg01, local01
27c74     FC 16 20 FF 
27c78     54 14 06 F6 | 	mov	arg02, ##1076754516
27c7c     01 16 06 F6 | 	mov	arg03, #1
27c80     F4 F6 BF FD | 	call	#__system___float_cmp
27c84     00 FA 0D F2 | 	cmp	result1, #0 wz
27c88     55 DC 1F AF 
27c8c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
27c90     B0 00 90 AD |  if_e	jmp	#LR__3594
27c94     14 2B 02 F6 | 	mov	local03, local02
27c98     17 2A 46 F0 | 	shr	local03, #23
27c9c     15 2B E2 F8 | 	getbyte	local03, local03, #0
27ca0     17 29 06 F4 | 	bitl	local02, #279
27ca4     14 2D 02 F6 | 	mov	local04, local02
27ca8     FF 2A 0E F2 | 	cmp	local03, #255 wz
27cac     1C 00 90 5D |  if_ne	jmp	#LR__3590
27cb0     00 2C 0E F2 | 	cmp	local04, #0 wz
27cb4     00 C0 3F 5F 
27cb8     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
27cbc     00 E0 3F AF 
27cc0     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
27cc4     17 FB 01 F6 | 	mov	result1, local05
27cc8     78 00 90 FD | 	jmp	#LR__3594
27ccc                 | LR__3590
27ccc     00 2A 0E F2 | 	cmp	local03, #0 wz
27cd0     17 2C 26 54 |  if_ne	bith	local04, #23
27cd4     7F 2A 86 51 |  if_ne	sub	local03, #127
27cd8     28 00 90 5D |  if_ne	jmp	#LR__3593
27cdc     00 2C 0E F2 | 	cmp	local04, #0 wz
27ce0     00 40 00 AF 
27ce4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
27ce8     58 00 90 AD |  if_e	jmp	#LR__3594
27cec     7E 2A 66 F6 | 	neg	local03, #126
27cf0     97 08 48 FB | 	callpa	#(@LR__3592-@LR__3591)>>2,fcache_load_ptr_
27cf4                 | LR__3591
27cf4     17 2C 2E F4 | 	testbn	local04, #23 wz
27cf8     01 2C 66 A0 |  if_e	shl	local04, #1
27cfc     01 2A 06 A1 |  if_e	add	local03, #1
27d00     F0 FF 9F AD |  if_e	jmp	#LR__3591
27d04                 | LR__3592
27d04                 | LR__3593
27d04     0E 2C 62 FD | 	qlog	local04
27d08     01 2A 86 F1 | 	sub	local03, #1
27d0c     15 13 52 F6 | 	abs	arg01, local03 wc
27d10     1F 30 C6 C9 |  if_b	decod	local06, #31
27d14     00 30 06 36 |  if_ae	mov	local06, #0
27d18     18 2E 62 FD | 	getqx	local05
27d1c     9B 2E 06 F4 | 	bitl	local05, #155
27d20     08 2E 06 F1 | 	add	local05, #8
27d24     04 2E 46 F0 | 	shr	local05, #4
27d28     00 C0 1F FF 
27d2c     00 2E 06 F1 | 	add	local05, ##1065353216
27d30     40 EE BF FD | 	call	#__system___float_fromuns
27d34     18 FB 61 F5 | 	xor	result1, local06
27d38     FD 14 02 F6 | 	mov	arg02, result1
27d3c     17 13 02 F6 | 	mov	arg01, local05
27d40     74 EE BF FD | 	call	#__system___float_add
27d44                 | LR__3594
27d44     A7 F0 03 F6 | 	mov	ptra, fp
27d48     B2 00 A0 FD | 	call	#popregs_
27d4c                 | __system____builtin_log2f_ret
27d4c     2D 00 64 FD | 	ret
27d50                 | 
27d50                 | __system____builtin_powf
27d50     04 4A 05 F6 | 	mov	COUNT_, #4
27d54     A8 00 A0 FD | 	call	#pushregs_
27d58     09 27 02 F6 | 	mov	local01, arg01
27d5c     0A 29 02 F6 | 	mov	local02, arg02
27d60     14 13 02 F6 | 	mov	arg01, local02
27d64     00 14 06 F6 | 	mov	arg02, #0
27d68     94 F6 BF FD | 	call	#__system___float_tointeger
27d6c     FD 2A 02 F6 | 	mov	local03, result1
27d70     15 13 52 F6 | 	abs	arg01, local03 wc
27d74     1F 2C C6 C9 |  if_b	decod	local04, #31
27d78     00 2C 06 36 |  if_ae	mov	local04, #0
27d7c     F4 ED BF FD | 	call	#__system___float_fromuns
27d80     16 FB 61 F5 | 	xor	result1, local04
27d84     FD 12 02 F6 | 	mov	arg01, result1
27d88     14 15 02 F6 | 	mov	arg02, local02
27d8c     01 16 06 F6 | 	mov	arg03, #1
27d90     E4 F5 BF FD | 	call	#__system___float_cmp
27d94     00 FA 0D F2 | 	cmp	result1, #0 wz
27d98     18 00 90 5D |  if_ne	jmp	#LR__3600
27d9c     00 C0 1F FF 
27da0     00 12 06 F6 | 	mov	arg01, ##1065353216
27da4     13 15 02 F6 | 	mov	arg02, local01
27da8     15 17 02 F6 | 	mov	arg03, local03
27dac     A0 00 B0 FD | 	call	#__system___float_pow_n
27db0     58 00 90 FD | 	jmp	#LR__3601
27db4                 | LR__3600
27db4     13 13 02 F6 | 	mov	arg01, local01
27db8     00 14 06 F6 | 	mov	arg02, #0
27dbc     01 16 06 F6 | 	mov	arg03, #1
27dc0     B4 F5 BF FD | 	call	#__system___float_cmp
27dc4     00 FA 55 F2 | 	cmps	result1, #0 wc
27dc8     00 E0 3F CF 
27dcc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
27dd0     38 00 90 CD |  if_b	jmp	#LR__3601
27dd4     13 13 02 F6 | 	mov	arg01, local01
27dd8     00 14 06 F6 | 	mov	arg02, #0
27ddc     01 16 06 F6 | 	mov	arg03, #1
27de0     94 F5 BF FD | 	call	#__system___float_cmp
27de4     00 FA 0D F2 | 	cmp	result1, #0 wz
27de8     00 FA 05 A6 |  if_e	mov	result1, #0
27dec     1C 00 90 AD |  if_e	jmp	#LR__3601
27df0     13 13 02 F6 | 	mov	arg01, local01
27df4     20 FE BF FD | 	call	#__system____builtin_log2f
27df8     FD 12 02 F6 | 	mov	arg01, result1
27dfc     14 15 02 F6 | 	mov	arg02, local02
27e00     70 F1 BF FD | 	call	#__system___float_mul
27e04     FD 12 02 F6 | 	mov	arg01, result1
27e08     FC FC BF FD | 	call	#__system____builtin_exp2f
27e0c                 | LR__3601
27e0c     A7 F0 03 F6 | 	mov	ptra, fp
27e10     B2 00 A0 FD | 	call	#popregs_
27e14                 | __system____builtin_powf_ret
27e14     2D 00 64 FD | 	ret
27e18                 | 
27e18                 | __system____builtin_logbase
27e18     02 4A 05 F6 | 	mov	COUNT_, #2
27e1c     A8 00 A0 FD | 	call	#pushregs_
27e20     09 27 02 F6 | 	mov	local01, arg01
27e24     0A 13 02 F6 | 	mov	arg01, arg02
27e28     EC FD BF FD | 	call	#__system____builtin_log2f
27e2c     FD 28 02 F6 | 	mov	local02, result1
27e30     13 13 02 F6 | 	mov	arg01, local01
27e34     E0 FD BF FD | 	call	#__system____builtin_log2f
27e38     FD 14 02 F6 | 	mov	arg02, result1
27e3c     14 13 02 F6 | 	mov	arg01, local02
27e40     24 F3 BF FD | 	call	#__system___float_div
27e44     A7 F0 03 F6 | 	mov	ptra, fp
27e48     B2 00 A0 FD | 	call	#popregs_
27e4c                 | __system____builtin_logbase_ret
27e4c     2D 00 64 FD | 	ret
27e50                 | 
27e50                 | __system___float_pow_n
27e50     05 4A 05 F6 | 	mov	COUNT_, #5
27e54     A8 00 A0 FD | 	call	#pushregs_
27e58     09 27 02 F6 | 	mov	local01, arg01
27e5c     0A 29 02 F6 | 	mov	local02, arg02
27e60     0B 2B 02 F6 | 	mov	local03, arg03
27e64     00 2A 56 F2 | 	cmps	local03, #0 wc
27e68     18 00 90 3D |  if_ae	jmp	#LR__3610
27e6c     01 2C 06 F6 | 	mov	local04, #1
27e70     15 2B 62 F6 | 	neg	local03, local03
27e74     00 2A 56 F2 | 	cmps	local03, #0 wc
27e78     00 FA 05 C6 |  if_b	mov	result1, #0
27e7c     94 00 90 CD |  if_b	jmp	#LR__3618
27e80     04 00 90 FD | 	jmp	#LR__3611
27e84                 | LR__3610
27e84     00 2C 06 F6 | 	mov	local04, #0
27e88                 | LR__3611
27e88     00 C0 1F FF 
27e8c     00 2E 06 F6 | 	mov	local05, ##1065353216
27e90                 | LR__3612
27e90     01 2A 56 F2 | 	cmps	local03, #1 wc
27e94     30 00 90 CD |  if_b	jmp	#LR__3614
27e98     01 2A CE F7 | 	test	local03, #1 wz
27e9c     10 00 90 AD |  if_e	jmp	#LR__3613
27ea0     17 13 02 F6 | 	mov	arg01, local05
27ea4     14 15 02 F6 | 	mov	arg02, local02
27ea8     C8 F0 BF FD | 	call	#__system___float_mul
27eac     FD 2E 02 F6 | 	mov	local05, result1
27eb0                 | LR__3613
27eb0     01 2A C6 F0 | 	sar	local03, #1
27eb4     14 13 02 F6 | 	mov	arg01, local02
27eb8     14 15 02 F6 | 	mov	arg02, local02
27ebc     B4 F0 BF FD | 	call	#__system___float_mul
27ec0     FD 28 02 F6 | 	mov	local02, result1
27ec4     C8 FF 9F FD | 	jmp	#LR__3612
27ec8                 | LR__3614
27ec8     00 2C 0E F2 | 	cmp	local04, #0 wz
27ecc     14 00 90 AD |  if_e	jmp	#LR__3615
27ed0     13 13 02 F6 | 	mov	arg01, local01
27ed4     17 15 02 F6 | 	mov	arg02, local05
27ed8     8C F2 BF FD | 	call	#__system___float_div
27edc     FD 2E 02 F6 | 	mov	local05, result1
27ee0     2C 00 90 FD | 	jmp	#LR__3617
27ee4                 | LR__3615
27ee4     13 13 02 F6 | 	mov	arg01, local01
27ee8     00 C0 1F FF 
27eec     00 14 06 F6 | 	mov	arg02, ##1065353216
27ef0     01 16 06 F6 | 	mov	arg03, #1
27ef4     80 F4 BF FD | 	call	#__system___float_cmp
27ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
27efc     10 00 90 AD |  if_e	jmp	#LR__3616
27f00     13 13 02 F6 | 	mov	arg01, local01
27f04     17 15 02 F6 | 	mov	arg02, local05
27f08     68 F0 BF FD | 	call	#__system___float_mul
27f0c     FD 2E 02 F6 | 	mov	local05, result1
27f10                 | LR__3616
27f10                 | LR__3617
27f10     17 FB 01 F6 | 	mov	result1, local05
27f14                 | LR__3618
27f14     A7 F0 03 F6 | 	mov	ptra, fp
27f18     B2 00 A0 FD | 	call	#popregs_
27f1c                 | __system___float_pow_n_ret
27f1c     2D 00 64 FD | 	ret
27f20                 | 
27f20                 | __system___gc_ptrs
27f20     EC 00 02 F6 | 	mov	_var01, __heap_ptr
27f24     00 03 02 F6 | 	mov	_var02, _var01
27f28     BB 00 00 FF 
27f2c     F8 02 06 F1 | 	add	_var02, ##95992
27f30     00 FD 09 FB | 	rdlong	result2, _var01 wz
27f34     74 00 90 5D |  if_ne	jmp	#LR__3620
27f38     01 FD 01 F6 | 	mov	result2, _var02
27f3c     00 FD 81 F1 | 	sub	result2, _var01
27f40     00 03 58 FC | 	wrword	#1, _var01
27f44     00 FB 01 F6 | 	mov	result1, _var01
27f48     02 FA 05 F1 | 	add	result1, #2
27f4c     36 00 80 FF 
27f50     FD 20 59 FC | 	wrword	##27792, result1
27f54     00 FB 01 F6 | 	mov	result1, _var01
27f58     04 FA 05 F1 | 	add	result1, #4
27f5c     FD 00 58 FC | 	wrword	#0, result1
27f60     00 FB 01 F6 | 	mov	result1, _var01
27f64     06 FA 05 F1 | 	add	result1, #6
27f68     FD 02 58 FC | 	wrword	#1, result1
27f6c     10 00 06 F1 | 	add	_var01, #16
27f70     FE FC 51 F6 | 	abs	result2, result2 wc
27f74     04 FC 45 F0 | 	shr	result2, #4
27f78     FE FC 81 F6 | 	negc	result2, result2
27f7c     00 FD 51 FC | 	wrword	result2, _var01
27f80     00 FD 01 F6 | 	mov	result2, _var01
27f84     02 FC 05 F1 | 	add	result2, #2
27f88     36 00 80 FF 
27f8c     FE 1E 59 FC | 	wrword	##27791, result2
27f90     00 FD 01 F6 | 	mov	result2, _var01
27f94     04 FC 05 F1 | 	add	result2, #4
27f98     FE 00 58 FC | 	wrword	#0, result2
27f9c     00 FD 01 F6 | 	mov	result2, _var01
27fa0     06 FC 05 F1 | 	add	result2, #6
27fa4     FE 00 58 FC | 	wrword	#0, result2
27fa8     10 00 86 F1 | 	sub	_var01, #16
27fac                 | LR__3620
27fac     00 FB 01 F6 | 	mov	result1, _var01
27fb0     01 FD 01 F6 | 	mov	result2, _var02
27fb4                 | __system___gc_ptrs_ret
27fb4     2D 00 64 FD | 	ret
27fb8                 | 
27fb8                 | __system___gc_tryalloc
27fb8     0B 4A 05 F6 | 	mov	COUNT_, #11
27fbc     A8 00 A0 FD | 	call	#pushregs_
27fc0     09 27 02 F6 | 	mov	local01, arg01
27fc4     0A 29 02 F6 | 	mov	local02, arg02
27fc8     54 FF BF FD | 	call	#__system___gc_ptrs
27fcc     FD 2A 02 F6 | 	mov	local03, result1
27fd0     FE 2C 02 F6 | 	mov	local04, result2
27fd4     15 2F 02 F6 | 	mov	local05, local03
27fd8     00 30 06 F6 | 	mov	local06, #0
27fdc     97 1E 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
27fe0                 | LR__3630
27fe0     17 33 02 F6 | 	mov	local07, local05
27fe4     06 2E 06 F1 | 	add	local05, #6
27fe8     17 15 EA FA | 	rdword	arg02, local05 wz
27fec     15 13 02 F6 | 	mov	arg01, local03
27ff0     00 FA 05 A6 |  if_e	mov	result1, #0
27ff4     04 14 66 50 |  if_ne	shl	arg02, #4
27ff8     0A 13 02 51 |  if_ne	add	arg01, arg02
27ffc     09 FB 01 56 |  if_ne	mov	result1, arg01
28000     FD 2E 0A F6 | 	mov	local05, result1 wz
28004     17 31 E2 5A |  if_ne	rdword	local06, local05
28008     00 2E 0E F2 | 	cmp	local05, #0 wz
2800c     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
28010     08 00 90 1D |  if_a	jmp	#LR__3632
28014     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
28018     C4 FF 9F 1D |  if_a	jmp	#LR__3630
2801c                 | LR__3631
2801c                 | LR__3632
2801c     00 2E 0E F2 | 	cmp	local05, #0 wz
28020     17 FB 01 A6 |  if_e	mov	result1, local05
28024     38 01 90 AD |  if_e	jmp	#LR__3635
28028     17 FD 01 F6 | 	mov	result2, local05
2802c     06 FC 05 F1 | 	add	result2, #6
28030     FE 34 E2 FA | 	rdword	local08, result2
28034     18 27 52 F2 | 	cmps	local01, local06 wc
28038     BC 00 90 3D |  if_ae	jmp	#LR__3634
2803c     17 27 52 FC | 	wrword	local01, local05
28040     17 13 02 F6 | 	mov	arg01, local05
28044     13 35 02 F6 | 	mov	local08, local01
28048     04 34 66 F0 | 	shl	local08, #4
2804c     1A 13 02 F1 | 	add	arg01, local08
28050     13 31 82 F1 | 	sub	local06, local01
28054     09 31 52 FC | 	wrword	local06, arg01
28058     09 35 02 F6 | 	mov	local08, arg01
2805c     02 34 06 F1 | 	add	local08, #2
28060     36 00 80 FF 
28064     1A 1F 59 FC | 	wrword	##27791, local08
28068     17 15 0A F6 | 	mov	arg02, local05 wz
2806c     00 FA 05 A6 |  if_e	mov	result1, #0
28070     15 15 82 51 |  if_ne	sub	arg02, local03
28074     04 14 46 50 |  if_ne	shr	arg02, #4
28078     0A FB 01 56 |  if_ne	mov	result1, arg02
2807c     09 35 02 F6 | 	mov	local08, arg01
28080     04 34 06 F1 | 	add	local08, #4
28084     1A FB 51 FC | 	wrword	result1, local08
28088     17 35 02 F6 | 	mov	local08, local05
2808c     06 34 06 F1 | 	add	local08, #6
28090     09 15 02 F6 | 	mov	arg02, arg01
28094     1A 35 E2 FA | 	rdword	local08, local08
28098     06 14 06 F1 | 	add	arg02, #6
2809c     0A 35 52 FC | 	wrword	local08, arg02
280a0     09 37 02 F6 | 	mov	local09, arg01
280a4     1B 15 0A F6 | 	mov	arg02, local09 wz
280a8     00 FA 05 A6 |  if_e	mov	result1, #0
280ac     15 15 82 51 |  if_ne	sub	arg02, local03
280b0     04 14 46 50 |  if_ne	shr	arg02, #4
280b4     0A FB 01 56 |  if_ne	mov	result1, arg02
280b8     FD 34 02 F6 | 	mov	local08, result1
280bc     09 39 EA FA | 	rdword	local10, arg01 wz
280c0     00 FA 05 A6 |  if_e	mov	result1, #0
280c4     04 38 66 50 |  if_ne	shl	local10, #4
280c8     1C 13 02 51 |  if_ne	add	arg01, local10
280cc     09 FB 01 56 |  if_ne	mov	result1, arg01
280d0     FD 3A 0A F6 | 	mov	local11, result1 wz
280d4     20 00 90 AD |  if_e	jmp	#LR__3633
280d8     16 3B 52 F2 | 	cmps	local11, local04 wc
280dc     1B 15 0A C6 |  if_b	mov	arg02, local09 wz
280e0     00 FA 05 86 |  if_c_and_z	mov	result1, #0
280e4     15 15 82 41 |  if_c_and_nz	sub	arg02, local03
280e8     04 14 46 40 |  if_c_and_nz	shr	arg02, #4
280ec     0A FB 01 46 |  if_c_and_nz	mov	result1, arg02
280f0     04 3A 06 C1 |  if_b	add	local11, #4
280f4     1D FB 51 CC |  if_b	wrword	result1, local11
280f8                 | LR__3633
280f8                 | LR__3634
280f8     06 32 06 F1 | 	add	local07, #6
280fc     19 35 52 FC | 	wrword	local08, local07
28100     36 00 00 FF 
28104     80 36 06 F6 | 	mov	local09, ##27776
28108     14 37 42 F5 | 	or	local09, local02
2810c     00 FA 05 F6 | 	mov	result1, #0
28110     01 FA 61 FD | 	cogid	result1
28114     FD 36 42 F5 | 	or	local09, result1
28118     17 3B 02 F6 | 	mov	local11, local05
2811c     02 3A 06 F1 | 	add	local11, #2
28120     1D 37 52 FC | 	wrword	local09, local11
28124     15 37 02 F6 | 	mov	local09, local03
28128     08 36 06 F1 | 	add	local09, #8
2812c     17 3B 02 F6 | 	mov	local11, local05
28130     1B 37 E2 FA | 	rdword	local09, local09
28134     06 3A 06 F1 | 	add	local11, #6
28138     1D 37 52 FC | 	wrword	local09, local11
2813c     17 15 0A F6 | 	mov	arg02, local05 wz
28140     00 FA 05 A6 |  if_e	mov	result1, #0
28144     15 15 82 51 |  if_ne	sub	arg02, local03
28148     04 14 46 50 |  if_ne	shr	arg02, #4
2814c     0A FB 01 56 |  if_ne	mov	result1, arg02
28150     08 2A 06 F1 | 	add	local03, #8
28154     15 FB 51 FC | 	wrword	result1, local03
28158     08 2E 06 F1 | 	add	local05, #8
2815c     17 FB 01 F6 | 	mov	result1, local05
28160                 | LR__3635
28160     A7 F0 03 F6 | 	mov	ptra, fp
28164     B2 00 A0 FD | 	call	#popregs_
28168                 | __system___gc_tryalloc_ret
28168     2D 00 64 FD | 	ret
2816c                 | 
2816c                 | __system___gc_alloc_managed
2816c     01 4A 05 F6 | 	mov	COUNT_, #1
28170     A8 00 A0 FD | 	call	#pushregs_
28174     09 27 02 F6 | 	mov	local01, arg01
28178     00 14 06 F6 | 	mov	arg02, #0
2817c     1C 00 B0 FD | 	call	#__system___gc_doalloc
28180     FD 14 0A F6 | 	mov	arg02, result1 wz
28184     01 26 56 A2 |  if_e	cmps	local01, #1 wc
28188     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2818c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
28190     A7 F0 03 F6 | 	mov	ptra, fp
28194     B2 00 A0 FD | 	call	#popregs_
28198                 | __system___gc_alloc_managed_ret
28198     2D 00 64 FD | 	ret
2819c                 | 
2819c                 | __system___gc_doalloc
2819c     06 4A 05 F6 | 	mov	COUNT_, #6
281a0     A8 00 A0 FD | 	call	#pushregs_
281a4     09 27 0A F6 | 	mov	local01, arg01 wz
281a8     0A 29 02 F6 | 	mov	local02, arg02
281ac     00 FA 05 A6 |  if_e	mov	result1, #0
281b0     84 00 90 AD |  if_e	jmp	#LR__3647
281b4     17 26 06 F1 | 	add	local01, #23
281b8     0F 26 26 F5 | 	andn	local01, #15
281bc     04 26 46 F0 | 	shr	local01, #4
281c0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
281c4     1C 12 06 F1 | 	add	arg01, #28
281c8     DC CE BF FD | 	call	#__system___lockmem
281cc     13 13 02 F6 | 	mov	arg01, local01
281d0     14 15 02 F6 | 	mov	arg02, local02
281d4     E0 FD BF FD | 	call	#__system___gc_tryalloc
281d8     FD 2A 0A F6 | 	mov	local03, result1 wz
281dc     14 00 90 5D |  if_ne	jmp	#LR__3640
281e0     5C 03 B0 FD | 	call	#__system___gc_docollect
281e4     13 13 02 F6 | 	mov	arg01, local01
281e8     14 15 02 F6 | 	mov	arg02, local02
281ec     C8 FD BF FD | 	call	#__system___gc_tryalloc
281f0     FD 2A 02 F6 | 	mov	local03, result1
281f4                 | LR__3640
281f4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
281f8     1C 12 06 F1 | 	add	arg01, #28
281fc     09 01 68 FC | 	wrlong	#0, arg01
28200     00 2A 0E F2 | 	cmp	local03, #0 wz
28204     2C 00 90 AD |  if_e	jmp	#LR__3646
28208     04 26 66 F0 | 	shl	local01, #4
2820c     08 26 86 F1 | 	sub	local01, #8
28210     13 2D 52 F6 | 	abs	local04, local01 wc
28214     02 2C 46 F0 | 	shr	local04, #2
28218     16 2F 8A F6 | 	negc	local05, local04 wz
2821c     15 31 02 F6 | 	mov	local06, local03
28220     10 00 90 AD |  if_e	jmp	#LR__3645
28224     97 06 48 FB | 	callpa	#(@LR__3643-@LR__3641)>>2,fcache_load_ptr_
28228                 | LR__3641
28228     17 05 D8 FC | 	rep	@LR__3644, local05
2822c                 | LR__3642
2822c     18 01 68 FC | 	wrlong	#0, local06
28230     04 30 06 F1 | 	add	local06, #4
28234                 | LR__3643
28234                 | LR__3644
28234                 | LR__3645
28234                 | LR__3646
28234     15 FB 01 F6 | 	mov	result1, local03
28238                 | LR__3647
28238     A7 F0 03 F6 | 	mov	ptra, fp
2823c     B2 00 A0 FD | 	call	#popregs_
28240                 | __system___gc_doalloc_ret
28240     2D 00 64 FD | 	ret
28244                 | 
28244                 | __system___gc_isvalidptr
28244     F8 16 06 F4 | 	bitl	arg03, #248
28248     08 16 86 F1 | 	sub	arg03, #8
2824c     09 17 52 F2 | 	cmps	arg03, arg01 wc
28250     08 00 90 CD |  if_b	jmp	#LR__3650
28254     0A 17 52 F2 | 	cmps	arg03, arg02 wc
28258     08 00 90 CD |  if_b	jmp	#LR__3651
2825c                 | LR__3650
2825c     00 FA 05 F6 | 	mov	result1, #0
28260     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
28264                 | LR__3651
28264     0B 01 02 F6 | 	mov	_var01, arg03
28268     09 01 62 F5 | 	xor	_var01, arg01
2826c     0F 00 CE F7 | 	test	_var01, #15 wz
28270     00 FA 05 56 |  if_ne	mov	result1, #0
28274     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
28278     0B 01 02 F6 | 	mov	_var01, arg03
2827c     02 00 06 F1 | 	add	_var01, #2
28280     00 01 E2 FA | 	rdword	_var01, _var01
28284     7F 00 00 FF 
28288     C0 01 06 F5 | 	and	_var01, ##65472
2828c     36 00 00 FF 
28290     80 00 0E F2 | 	cmp	_var01, ##27776 wz
28294     00 FA 05 56 |  if_ne	mov	result1, #0
28298     0B FB 01 A6 |  if_e	mov	result1, arg03
2829c                 | __system___gc_isvalidptr_ret
2829c     2D 00 64 FD | 	ret
282a0                 | 
282a0                 | __system___gc_free
282a0     09 17 02 F6 | 	mov	arg03, arg01
282a4     78 FC BF FD | 	call	#__system___gc_ptrs
282a8     FD 12 02 F6 | 	mov	arg01, result1
282ac     FE 14 02 F6 | 	mov	arg02, result2
282b0     90 FF BF FD | 	call	#__system___gc_isvalidptr
282b4     FD 14 0A F6 | 	mov	arg02, result1 wz
282b8     20 00 90 AD |  if_e	jmp	#LR__3660
282bc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
282c0     1C 12 06 F1 | 	add	arg01, #28
282c4     E0 CD BF FD | 	call	#__system___lockmem
282c8     0A 13 02 F6 | 	mov	arg01, arg02
282cc     10 00 B0 FD | 	call	#__system___gc_dofree
282d0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
282d4     1C 12 06 F1 | 	add	arg01, #28
282d8     09 01 68 FC | 	wrlong	#0, arg01
282dc                 | LR__3660
282dc                 | __system___gc_free_ret
282dc     2D 00 64 FD | 	ret
282e0                 | 
282e0                 | __system___gc_dofree
282e0     06 4A 05 F6 | 	mov	COUNT_, #6
282e4     A8 00 A0 FD | 	call	#pushregs_
282e8     09 27 02 F6 | 	mov	local01, arg01
282ec     30 FC BF FD | 	call	#__system___gc_ptrs
282f0     FD 28 02 F6 | 	mov	local02, result1
282f4     FE 2A 02 F6 | 	mov	local03, result2
282f8     13 15 02 F6 | 	mov	arg02, local01
282fc     02 14 06 F1 | 	add	arg02, #2
28300     36 00 80 FF 
28304     0A 1F 59 FC | 	wrword	##27791, arg02
28308     13 2D 02 F6 | 	mov	local04, local01
2830c     13 13 02 F6 | 	mov	arg01, local01
28310     09 2F EA FA | 	rdword	local05, arg01 wz
28314     00 FA 05 A6 |  if_e	mov	result1, #0
28318     04 2E 66 50 |  if_ne	shl	local05, #4
2831c     17 13 02 51 |  if_ne	add	arg01, local05
28320     09 FB 01 56 |  if_ne	mov	result1, arg01
28324     FD 30 02 F6 | 	mov	local06, result1
28328     97 24 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
2832c                 | LR__3670
2832c     04 2C 06 F1 | 	add	local04, #4
28330     16 15 EA FA | 	rdword	arg02, local04 wz
28334     14 13 02 F6 | 	mov	arg01, local02
28338     00 FA 05 A6 |  if_e	mov	result1, #0
2833c     04 14 66 50 |  if_ne	shl	arg02, #4
28340     0A 13 02 51 |  if_ne	add	arg01, arg02
28344     09 FB 01 56 |  if_ne	mov	result1, arg01
28348     FD 2C 0A F6 | 	mov	local04, result1 wz
2834c     24 00 90 AD |  if_e	jmp	#LR__3672
28350     16 13 02 F6 | 	mov	arg01, local04
28354     00 FA 05 F6 | 	mov	result1, #0
28358     02 12 06 F1 | 	add	arg01, #2
2835c     09 13 E2 FA | 	rdword	arg01, arg01
28360     36 00 00 FF 
28364     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
28368     01 FA 65 A6 |  if_e	neg	result1, #1
2836c     00 FA 0D F2 | 	cmp	result1, #0 wz
28370     B8 FF 9F AD |  if_e	jmp	#LR__3670
28374                 | LR__3671
28374                 | LR__3672
28374     00 2C 0E F2 | 	cmp	local04, #0 wz
28378     14 2D 02 A6 |  if_e	mov	local04, local02
2837c     16 15 02 F6 | 	mov	arg02, local04
28380     06 14 06 F1 | 	add	arg02, #6
28384     13 13 02 F6 | 	mov	arg01, local01
28388     0A 15 E2 FA | 	rdword	arg02, arg02
2838c     06 12 06 F1 | 	add	arg01, #6
28390     09 15 52 FC | 	wrword	arg02, arg01
28394     13 15 0A F6 | 	mov	arg02, local01 wz
28398     00 FA 05 A6 |  if_e	mov	result1, #0
2839c     14 15 82 51 |  if_ne	sub	arg02, local02
283a0     04 14 46 50 |  if_ne	shr	arg02, #4
283a4     0A FB 01 56 |  if_ne	mov	result1, arg02
283a8     16 15 02 F6 | 	mov	arg02, local04
283ac     06 14 06 F1 | 	add	arg02, #6
283b0     0A FB 51 FC | 	wrword	result1, arg02
283b4     14 2D 0A F2 | 	cmp	local04, local02 wz
283b8     A0 00 90 AD |  if_e	jmp	#LR__3674
283bc     16 13 02 F6 | 	mov	arg01, local04
283c0     09 2F EA FA | 	rdword	local05, arg01 wz
283c4     00 FA 05 A6 |  if_e	mov	result1, #0
283c8     04 2E 66 50 |  if_ne	shl	local05, #4
283cc     17 13 02 51 |  if_ne	add	arg01, local05
283d0     09 FB 01 56 |  if_ne	mov	result1, arg01
283d4     13 FB 09 F2 | 	cmp	result1, local01 wz
283d8     80 00 90 5D |  if_ne	jmp	#LR__3673
283dc     16 31 E2 FA | 	rdword	local06, local04
283e0     13 15 E2 FA | 	rdword	arg02, local01
283e4     0A 31 02 F1 | 	add	local06, arg02
283e8     16 31 52 FC | 	wrword	local06, local04
283ec     13 31 02 F6 | 	mov	local06, local01
283f0     02 30 06 F1 | 	add	local06, #2
283f4     18 01 58 FC | 	wrword	#0, local06
283f8     13 13 02 F6 | 	mov	arg01, local01
283fc     09 2F EA FA | 	rdword	local05, arg01 wz
28400     00 FA 05 A6 |  if_e	mov	result1, #0
28404     04 2E 66 50 |  if_ne	shl	local05, #4
28408     17 13 02 51 |  if_ne	add	arg01, local05
2840c     09 FB 01 56 |  if_ne	mov	result1, arg01
28410     FD 30 02 F6 | 	mov	local06, result1
28414     15 31 52 F2 | 	cmps	local06, local03 wc
28418     16 15 0A C6 |  if_b	mov	arg02, local04 wz
2841c     00 FA 05 86 |  if_c_and_z	mov	result1, #0
28420     14 15 82 41 |  if_c_and_nz	sub	arg02, local02
28424     04 14 46 40 |  if_c_and_nz	shr	arg02, #4
28428     0A FB 01 46 |  if_c_and_nz	mov	result1, arg02
2842c     18 15 02 C6 |  if_b	mov	arg02, local06
28430     04 14 06 C1 |  if_b	add	arg02, #4
28434     0A FB 51 CC |  if_b	wrword	result1, arg02
28438     13 15 02 F6 | 	mov	arg02, local01
2843c     06 14 06 F1 | 	add	arg02, #6
28440     16 FD 01 F6 | 	mov	result2, local04
28444     0A 15 E2 FA | 	rdword	arg02, arg02
28448     06 FC 05 F1 | 	add	result2, #6
2844c     FE 14 52 FC | 	wrword	arg02, result2
28450     06 26 06 F1 | 	add	local01, #6
28454     13 01 58 FC | 	wrword	#0, local01
28458     16 27 02 F6 | 	mov	local01, local04
2845c                 | LR__3673
2845c                 | LR__3674
2845c     13 13 02 F6 | 	mov	arg01, local01
28460     09 2F EA FA | 	rdword	local05, arg01 wz
28464     00 FA 05 A6 |  if_e	mov	result1, #0
28468     04 2E 66 50 |  if_ne	shl	local05, #4
2846c     17 13 02 51 |  if_ne	add	arg01, local05
28470     09 FB 01 56 |  if_ne	mov	result1, arg01
28474     FD 14 0A F6 | 	mov	arg02, result1 wz
28478     B4 00 90 AD |  if_e	jmp	#LR__3676
2847c     15 15 52 F2 | 	cmps	arg02, local03 wc
28480     AC 00 90 3D |  if_ae	jmp	#LR__3676
28484     0A 13 02 F6 | 	mov	arg01, arg02
28488     00 FA 05 F6 | 	mov	result1, #0
2848c     02 12 06 F1 | 	add	arg01, #2
28490     09 13 E2 FA | 	rdword	arg01, arg01
28494     36 00 00 FF 
28498     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2849c     01 FA 65 A6 |  if_e	neg	result1, #1
284a0     00 FA 0D F2 | 	cmp	result1, #0 wz
284a4     88 00 90 AD |  if_e	jmp	#LR__3676
284a8     13 2D 02 F6 | 	mov	local04, local01
284ac     16 31 E2 FA | 	rdword	local06, local04
284b0     0A 13 02 F6 | 	mov	arg01, arg02
284b4     09 27 E2 FA | 	rdword	local01, arg01
284b8     13 31 02 F1 | 	add	local06, local01
284bc     16 31 52 FC | 	wrword	local06, local04
284c0     09 31 02 F6 | 	mov	local06, arg01
284c4     06 30 06 F1 | 	add	local06, #6
284c8     16 27 02 F6 | 	mov	local01, local04
284cc     18 31 E2 FA | 	rdword	local06, local06
284d0     06 26 06 F1 | 	add	local01, #6
284d4     13 31 52 FC | 	wrword	local06, local01
284d8     09 31 02 F6 | 	mov	local06, arg01
284dc     02 30 06 F1 | 	add	local06, #2
284e0     18 55 59 FC | 	wrword	#170, local06
284e4     09 31 02 F6 | 	mov	local06, arg01
284e8     06 30 06 F1 | 	add	local06, #6
284ec     18 01 58 FC | 	wrword	#0, local06
284f0     09 2F EA FA | 	rdword	local05, arg01 wz
284f4     00 FA 05 A6 |  if_e	mov	result1, #0
284f8     04 2E 66 50 |  if_ne	shl	local05, #4
284fc     17 13 02 51 |  if_ne	add	arg01, local05
28500     09 FB 01 56 |  if_ne	mov	result1, arg01
28504     FD 30 0A F6 | 	mov	local06, result1 wz
28508     24 00 90 AD |  if_e	jmp	#LR__3675
2850c     15 31 52 F2 | 	cmps	local06, local03 wc
28510     16 15 0A C6 |  if_b	mov	arg02, local04 wz
28514     00 FA 05 86 |  if_c_and_z	mov	result1, #0
28518     14 15 82 41 |  if_c_and_nz	sub	arg02, local02
2851c     04 14 46 40 |  if_c_and_nz	shr	arg02, #4
28520     0A FB 01 46 |  if_c_and_nz	mov	result1, arg02
28524     18 2D 02 C6 |  if_b	mov	local04, local06
28528     04 2C 06 C1 |  if_b	add	local04, #4
2852c     16 FB 51 CC |  if_b	wrword	result1, local04
28530                 | LR__3675
28530                 | LR__3676
28530     18 FB 01 F6 | 	mov	result1, local06
28534     A7 F0 03 F6 | 	mov	ptra, fp
28538     B2 00 A0 FD | 	call	#popregs_
2853c                 | __system___gc_dofree_ret
2853c     2D 00 64 FD | 	ret
28540                 | 
28540                 | __system___gc_docollect
28540     05 4A 05 F6 | 	mov	COUNT_, #5
28544     A8 00 A0 FD | 	call	#pushregs_
28548     D4 F9 BF FD | 	call	#__system___gc_ptrs
2854c     FE 26 02 F6 | 	mov	local01, result2
28550     FD 28 02 F6 | 	mov	local02, result1
28554     14 13 02 F6 | 	mov	arg01, local02
28558     09 2B EA FA | 	rdword	local03, arg01 wz
2855c     00 FA 05 A6 |  if_e	mov	result1, #0
28560     04 2A 66 50 |  if_ne	shl	local03, #4
28564     15 13 02 51 |  if_ne	add	arg01, local03
28568     09 FB 01 56 |  if_ne	mov	result1, arg01
2856c     FD 2C 0A F6 | 	mov	local04, result1 wz
28570     00 FA 05 F6 | 	mov	result1, #0
28574     01 FA 61 FD | 	cogid	result1
28578     FD 2E 02 F6 | 	mov	local05, result1
2857c     48 00 90 AD |  if_e	jmp	#LR__3682
28580     97 22 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
28584                 | LR__3680
28584     13 2D 52 F2 | 	cmps	local04, local01 wc
28588     3C 00 90 3D |  if_ae	jmp	#LR__3682
2858c     16 15 02 F6 | 	mov	arg02, local04
28590     02 14 06 F1 | 	add	arg02, #2
28594     0A 15 E2 FA | 	rdword	arg02, arg02
28598     20 14 26 F5 | 	andn	arg02, #32
2859c     16 13 02 F6 | 	mov	arg01, local04
285a0     02 12 06 F1 | 	add	arg01, #2
285a4     09 15 52 FC | 	wrword	arg02, arg01
285a8     16 13 02 F6 | 	mov	arg01, local04
285ac     09 2B EA FA | 	rdword	local03, arg01 wz
285b0     00 FA 05 A6 |  if_e	mov	result1, #0
285b4     04 2A 66 50 |  if_ne	shl	local03, #4
285b8     15 13 02 51 |  if_ne	add	arg01, local03
285bc     09 FB 01 56 |  if_ne	mov	result1, arg01
285c0     FD 2C 0A F6 | 	mov	local04, result1 wz
285c4     BC FF 9F 5D |  if_ne	jmp	#LR__3680
285c8                 | LR__3681
285c8                 | LR__3682
285c8     00 2A 06 F6 | 	mov	local03, #0
285cc     00 12 06 F6 | 	mov	arg01, #0
285d0     AC CA BF FD | 	call	#__system____topofstack
285d4     FD 14 02 F6 | 	mov	arg02, result1
285d8     15 13 02 F6 | 	mov	arg01, local03
285dc     90 00 B0 FD | 	call	#__system___gc_markhub
285e0     18 01 B0 FD | 	call	#__system___gc_markcog
285e4     14 13 02 F6 | 	mov	arg01, local02
285e8     09 2B EA FA | 	rdword	local03, arg01 wz
285ec     00 FA 05 A6 |  if_e	mov	result1, #0
285f0     04 2A 66 50 |  if_ne	shl	local03, #4
285f4     15 13 02 51 |  if_ne	add	arg01, local03
285f8     09 FB 01 56 |  if_ne	mov	result1, arg01
285fc     FD 28 0A F6 | 	mov	local02, result1 wz
28600     60 00 90 AD |  if_e	jmp	#LR__3686
28604                 | LR__3683
28604     14 2D 02 F6 | 	mov	local04, local02
28608     16 13 02 F6 | 	mov	arg01, local04
2860c     09 2B EA FA | 	rdword	local03, arg01 wz
28610     00 FA 05 A6 |  if_e	mov	result1, #0
28614     04 2A 66 50 |  if_ne	shl	local03, #4
28618     15 13 02 51 |  if_ne	add	arg01, local03
2861c     09 FB 01 56 |  if_ne	mov	result1, arg01
28620     FD 28 02 F6 | 	mov	local02, result1
28624     16 15 02 F6 | 	mov	arg02, local04
28628     02 14 06 F1 | 	add	arg02, #2
2862c     0A 15 E2 FA | 	rdword	arg02, arg02
28630     20 14 CE F7 | 	test	arg02, #32 wz
28634     10 14 CE A7 |  if_e	test	arg02, #16 wz
28638     1C 00 90 5D |  if_ne	jmp	#LR__3685
2863c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
28640     17 15 0A F2 | 	cmp	arg02, local05 wz
28644     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
28648     0C 00 90 5D |  if_ne	jmp	#LR__3684
2864c     16 13 02 F6 | 	mov	arg01, local04
28650     8C FC BF FD | 	call	#__system___gc_dofree
28654     FD 28 02 F6 | 	mov	local02, result1
28658                 | LR__3684
28658                 | LR__3685
28658     00 28 0E F2 | 	cmp	local02, #0 wz
2865c     13 29 52 52 |  if_ne	cmps	local02, local01 wc
28660     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3683
28664                 | LR__3686
28664     A7 F0 03 F6 | 	mov	ptra, fp
28668     B2 00 A0 FD | 	call	#popregs_
2866c                 | __system___gc_docollect_ret
2866c     2D 00 64 FD | 	ret
28670                 | 
28670                 | __system___gc_markhub
28670     07 4A 05 F6 | 	mov	COUNT_, #7
28674     A8 00 A0 FD | 	call	#pushregs_
28678     09 27 02 F6 | 	mov	local01, arg01
2867c     0A 29 02 F6 | 	mov	local02, arg02
28680     9C F8 BF FD | 	call	#__system___gc_ptrs
28684     FD 2A 02 F6 | 	mov	local03, result1
28688     FE 2C 02 F6 | 	mov	local04, result2
2868c                 | LR__3690
2868c     14 27 52 F2 | 	cmps	local01, local02 wc
28690     5C 00 90 3D |  if_ae	jmp	#LR__3691
28694     13 17 02 FB | 	rdlong	arg03, local01
28698     04 26 06 F1 | 	add	local01, #4
2869c     16 15 02 F6 | 	mov	arg02, local04
286a0     15 13 02 F6 | 	mov	arg01, local03
286a4     9C FB BF FD | 	call	#__system___gc_isvalidptr
286a8     FD 2E 0A F6 | 	mov	local05, result1 wz
286ac     DC FF 9F AD |  if_e	jmp	#LR__3690
286b0     17 13 02 F6 | 	mov	arg01, local05
286b4     00 FA 05 F6 | 	mov	result1, #0
286b8     02 12 06 F1 | 	add	arg01, #2
286bc     09 13 E2 FA | 	rdword	arg01, arg01
286c0     36 00 00 FF 
286c4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
286c8     01 FA 65 A6 |  if_e	neg	result1, #1
286cc     00 FA 0D F2 | 	cmp	result1, #0 wz
286d0     17 31 02 A6 |  if_e	mov	local06, local05
286d4     02 30 06 A1 |  if_e	add	local06, #2
286d8     18 33 E2 AA |  if_e	rdword	local07, local06
286dc     0F 32 26 A5 |  if_e	andn	local07, #15
286e0     2E 32 46 A5 |  if_e	or	local07, #46
286e4     02 2E 06 A1 |  if_e	add	local05, #2
286e8     17 33 52 AC |  if_e	wrword	local07, local05
286ec     9C FF 9F FD | 	jmp	#LR__3690
286f0                 | LR__3691
286f0     A7 F0 03 F6 | 	mov	ptra, fp
286f4     B2 00 A0 FD | 	call	#popregs_
286f8                 | __system___gc_markhub_ret
286f8     2D 00 64 FD | 	ret
286fc                 | 
286fc                 | __system___gc_markcog
286fc     06 4A 05 F6 | 	mov	COUNT_, #6
28700     A8 00 A0 FD | 	call	#pushregs_
28704     18 F8 BF FD | 	call	#__system___gc_ptrs
28708     FD 26 02 F6 | 	mov	local01, result1
2870c     FE 28 02 F6 | 	mov	local02, result2
28710     EF 2B 06 F6 | 	mov	local03, #495
28714                 | LR__3700
28714                 | 	'.live	local03
28714     00 2A 96 F9 | 	alts	local03, #0
28718     15 2D 02 F6 | 	mov	local04, local03
2871c     13 13 02 F6 | 	mov	arg01, local01
28720     14 15 02 F6 | 	mov	arg02, local02
28724     16 17 02 F6 | 	mov	arg03, local04
28728     18 FB BF FD | 	call	#__system___gc_isvalidptr
2872c     00 FA 0D F2 | 	cmp	result1, #0 wz
28730     FD 2E 02 56 |  if_ne	mov	local05, result1
28734     02 2E 06 51 |  if_ne	add	local05, #2
28738     17 31 E2 5A |  if_ne	rdword	local06, local05
2873c     20 30 46 55 |  if_ne	or	local06, #32
28740     02 FA 05 51 |  if_ne	add	result1, #2
28744     FD 30 52 5C |  if_ne	wrword	local06, result1
28748     01 2A 86 F1 | 	sub	local03, #1
2874c     00 2A 56 F2 | 	cmps	local03, #0 wc
28750     C0 FF 9F 3D |  if_ae	jmp	#LR__3700
28754     A7 F0 03 F6 | 	mov	ptra, fp
28758     B2 00 A0 FD | 	call	#popregs_
2875c                 | __system___gc_markcog_ret
2875c     2D 00 64 FD | 	ret
28760                 | 
28760                 | __system__opendir
28760     06 4A 05 F6 | 	mov	COUNT_, #6
28764     A8 00 A0 FD | 	call	#pushregs_
28768     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2876c     84 27 06 F1 | 	add	local01, #388
28770     09 15 02 F6 | 	mov	arg02, arg01
28774     13 13 02 F6 | 	mov	arg01, local01
28778     00 16 06 F6 | 	mov	arg03, #0
2877c     50 CD BF FD | 	call	#__system____getvfsforfile
28780     FD 28 0A F6 | 	mov	local02, result1 wz
28784     10 00 90 AD |  if_e	jmp	#LR__3710
28788     28 28 06 F1 | 	add	local02, #40
2878c     14 17 0A FB | 	rdlong	arg03, local02 wz
28790     28 28 86 F1 | 	sub	local02, #40
28794     14 00 90 5D |  if_ne	jmp	#LR__3711
28798                 | LR__3710
28798     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2879c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
287a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
287a4     00 FA 05 F6 | 	mov	result1, #0
287a8     90 00 90 FD | 	jmp	#LR__3713
287ac                 | LR__3711
287ac     5C 12 06 F6 | 	mov	arg01, #92
287b0     10 14 06 F6 | 	mov	arg02, #16
287b4     E4 F9 BF FD | 	call	#__system___gc_doalloc
287b8     FD 2A 0A F6 | 	mov	local03, result1 wz
287bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
287c0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
287c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
287c8     00 FA 05 A6 |  if_e	mov	result1, #0
287cc     6C 00 90 AD |  if_e	jmp	#LR__3713
287d0     28 28 06 F1 | 	add	local02, #40
287d4     14 2D 02 FB | 	rdlong	local04, local02
287d8     16 2F 02 F6 | 	mov	local05, local04
287dc     28 28 86 F1 | 	sub	local02, #40
287e0     13 2E 46 F7 | 	zerox	local05, #19
287e4     14 2C 46 F0 | 	shr	local04, #20
287e8     02 2C 66 F0 | 	shl	local04, #2
287ec     ED 2C 02 F1 | 	add	local04, __methods__
287f0     16 2D 02 FB | 	rdlong	local04, local04
287f4     15 13 02 F6 | 	mov	arg01, local03
287f8     13 15 02 F6 | 	mov	arg02, local01
287fc     F2 30 02 F6 | 	mov	local06, objptr
28800     17 E5 01 F6 | 	mov	objptr, local05
28804     2D 2C 62 FD | 	call	local04
28808     18 E5 01 F6 | 	mov	objptr, local06
2880c     FD 16 0A F6 | 	mov	arg03, result1 wz
28810     20 00 90 AD |  if_e	jmp	#LR__3712
28814     00 16 4E F2 | 	cmps	arg03, #0 wz
28818     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2881c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
28820     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28824     15 13 02 F6 | 	mov	arg01, local03
28828     74 FA BF FD | 	call	#__system___gc_free
2882c     00 FA 05 F6 | 	mov	result1, #0
28830     08 00 90 FD | 	jmp	#LR__3713
28834                 | LR__3712
28834     15 29 62 FC | 	wrlong	local02, local03
28838     15 FB 01 F6 | 	mov	result1, local03
2883c                 | LR__3713
2883c     A7 F0 03 F6 | 	mov	ptra, fp
28840     B2 00 A0 FD | 	call	#popregs_
28844                 | __system__opendir_ret
28844     2D 00 64 FD | 	ret
28848                 | 
28848                 | __system__closedir
28848     04 4A 05 F6 | 	mov	COUNT_, #4
2884c     A8 00 A0 FD | 	call	#pushregs_
28850     09 27 02 F6 | 	mov	local01, arg01
28854     13 13 02 FB | 	rdlong	arg01, local01
28858     2C 12 06 F1 | 	add	arg01, #44
2885c     09 29 02 FB | 	rdlong	local02, arg01
28860     14 2B 02 F6 | 	mov	local03, local02
28864     13 2A 46 F7 | 	zerox	local03, #19
28868     14 28 46 F0 | 	shr	local02, #20
2886c     02 28 66 F0 | 	shl	local02, #2
28870     ED 28 02 F1 | 	add	local02, __methods__
28874     14 29 02 FB | 	rdlong	local02, local02
28878     13 13 02 F6 | 	mov	arg01, local01
2887c     F2 2C 02 F6 | 	mov	local04, objptr
28880     15 E5 01 F6 | 	mov	objptr, local03
28884     2D 28 62 FD | 	call	local02
28888     16 E5 01 F6 | 	mov	objptr, local04
2888c     FD 2C 02 F6 | 	mov	local04, result1
28890     13 13 02 F6 | 	mov	arg01, local01
28894     08 FA BF FD | 	call	#__system___gc_free
28898     00 2C 4E F2 | 	cmps	local04, #0 wz
2889c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
288a0     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
288a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
288a8     01 FA 65 56 |  if_ne	neg	result1, #1
288ac     00 FA 05 A6 |  if_e	mov	result1, #0
288b0     A7 F0 03 F6 | 	mov	ptra, fp
288b4     B2 00 A0 FD | 	call	#popregs_
288b8                 | __system__closedir_ret
288b8     2D 00 64 FD | 	ret
288bc                 | 
288bc                 | __system__readdir
288bc     04 4A 05 F6 | 	mov	COUNT_, #4
288c0     A8 00 A0 FD | 	call	#pushregs_
288c4     09 15 0A FB | 	rdlong	arg02, arg01 wz
288c8     09 27 02 F6 | 	mov	local01, arg01
288cc     08 26 06 F1 | 	add	local01, #8
288d0     00 FA 05 A6 |  if_e	mov	result1, #0
288d4     5C 00 90 AD |  if_e	jmp	#LR__3721
288d8     30 14 06 F1 | 	add	arg02, #48
288dc     0A 29 02 FB | 	rdlong	local02, arg02
288e0     14 2B 02 F6 | 	mov	local03, local02
288e4     13 2A 46 F7 | 	zerox	local03, #19
288e8     14 28 46 F0 | 	shr	local02, #20
288ec     02 28 66 F0 | 	shl	local02, #2
288f0     ED 28 02 F1 | 	add	local02, __methods__
288f4     14 29 02 FB | 	rdlong	local02, local02
288f8     13 15 02 F6 | 	mov	arg02, local01
288fc     F2 2C 02 F6 | 	mov	local04, objptr
28900     15 E5 01 F6 | 	mov	objptr, local03
28904     2D 28 62 FD | 	call	local02
28908     16 E5 01 F6 | 	mov	objptr, local04
2890c     00 FA 4D F2 | 	cmps	result1, #0 wz
28910     1C 00 90 AD |  if_e	jmp	#LR__3720
28914     01 FA 55 F2 | 	cmps	result1, #1 wc
28918     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2891c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
28920     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
28924     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
28928     00 FA 05 F6 | 	mov	result1, #0
2892c     04 00 90 FD | 	jmp	#LR__3721
28930                 | LR__3720
28930     13 FB 01 F6 | 	mov	result1, local01
28934                 | LR__3721
28934     A7 F0 03 F6 | 	mov	ptra, fp
28938     B2 00 A0 FD | 	call	#popregs_
2893c                 | __system__readdir_ret
2893c     2D 00 64 FD | 	ret
28940                 | 
28940                 | __system___openraw
28940     0C 4A 05 F6 | 	mov	COUNT_, #12
28944     A8 00 A0 FD | 	call	#pushregs_
28948     0B 27 02 F6 | 	mov	local01, arg03
2894c     0C 29 02 F6 | 	mov	local02, arg04
28950     0F 2A C6 F9 | 	decod	local03, #15
28954     09 2D 02 F6 | 	mov	local04, arg01
28958     00 2E 06 F6 | 	mov	local05, #0
2895c     F3 30 02 F6 | 	mov	local06, ptr___system__dat__
28960     84 31 06 F1 | 	add	local06, #388
28964     18 13 02 F6 | 	mov	arg01, local06
28968     00 16 06 F6 | 	mov	arg03, #0
2896c     60 CB BF FD | 	call	#__system____getvfsforfile
28970     FD 32 0A F6 | 	mov	local07, result1 wz
28974     10 00 90 AD |  if_e	jmp	#LR__3730
28978     20 32 06 F1 | 	add	local07, #32
2897c     19 15 0A FB | 	rdlong	arg02, local07 wz
28980     20 32 86 F1 | 	sub	local07, #32
28984     14 00 90 5D |  if_ne	jmp	#LR__3731
28988                 | LR__3730
28988     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2898c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28990     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28994     01 FA 65 F6 | 	neg	result1, #1
28998     88 02 90 FD | 	jmp	#LR__3736
2899c                 | LR__3731
2899c     16 13 02 F6 | 	mov	arg01, local04
289a0     00 14 06 F6 | 	mov	arg02, #0
289a4     34 16 06 F6 | 	mov	arg03, #52
289a8     98 00 A0 FD | 	call	#\builtin_bytefill_
289ac     20 32 06 F1 | 	add	local07, #32
289b0     19 35 02 FB | 	rdlong	local08, local07
289b4     20 32 86 F1 | 	sub	local07, #32
289b8     1A 37 02 F6 | 	mov	local09, local08
289bc     13 34 46 F7 | 	zerox	local08, #19
289c0     14 36 46 F0 | 	shr	local09, #20
289c4     02 36 66 F0 | 	shl	local09, #2
289c8     ED 36 02 F1 | 	add	local09, __methods__
289cc     1B 37 02 FB | 	rdlong	local09, local09
289d0     16 13 02 F6 | 	mov	arg01, local04
289d4     18 15 02 F6 | 	mov	arg02, local06
289d8     13 17 02 F6 | 	mov	arg03, local01
289dc     F2 38 02 F6 | 	mov	local10, objptr
289e0     1A E5 01 F6 | 	mov	objptr, local08
289e4     2D 36 62 FD | 	call	local09
289e8     1C E5 01 F6 | 	mov	objptr, local10
289ec     FD 3A 0A F6 | 	mov	local11, result1 wz
289f0     04 26 CE 57 |  if_ne	test	local01, #4 wz
289f4     44 00 90 AD |  if_e	jmp	#LR__3732
289f8     24 32 06 F1 | 	add	local07, #36
289fc     19 35 02 FB | 	rdlong	local08, local07
28a00     24 32 86 F1 | 	sub	local07, #36
28a04     1A 37 02 F6 | 	mov	local09, local08
28a08     13 34 46 F7 | 	zerox	local08, #19
28a0c     14 36 46 F0 | 	shr	local09, #20
28a10     02 36 66 F0 | 	shl	local09, #2
28a14     ED 36 02 F1 | 	add	local09, __methods__
28a18     1B 37 02 FB | 	rdlong	local09, local09
28a1c     16 13 02 F6 | 	mov	arg01, local04
28a20     18 15 02 F6 | 	mov	arg02, local06
28a24     14 17 02 F6 | 	mov	arg03, local02
28a28     F2 38 02 F6 | 	mov	local10, objptr
28a2c     1A E5 01 F6 | 	mov	objptr, local08
28a30     2D 36 62 FD | 	call	local09
28a34     1C E5 01 F6 | 	mov	objptr, local10
28a38     FD 3A 02 F6 | 	mov	local11, result1
28a3c                 | LR__3732
28a3c     00 3A 0E F2 | 	cmp	local11, #0 wz
28a40     B4 01 90 5D |  if_ne	jmp	#LR__3734
28a44     13 15 02 F6 | 	mov	arg02, local01
28a48     03 14 0E F5 | 	and	arg02, #3 wz
28a4c     02 2A 46 55 |  if_ne	or	local03, #2
28a50     01 14 0E F2 | 	cmp	arg02, #1 wz
28a54     01 2A 46 55 |  if_ne	or	local03, #1
28a58     20 26 CE F7 | 	test	local01, #32 wz
28a5c     80 2B 46 55 |  if_ne	or	local03, #384
28a60     08 2C 06 F1 | 	add	local04, #8
28a64     16 2B 62 FC | 	wrlong	local03, local04
28a68     0C 2C 06 F1 | 	add	local04, #12
28a6c     16 3D 0A FB | 	rdlong	local12, local04 wz
28a70     14 2C 86 F1 | 	sub	local04, #20
28a74     04 32 06 A1 |  if_e	add	local07, #4
28a78     19 3D 02 AB |  if_e	rdlong	local12, local07
28a7c     04 32 86 A1 |  if_e	sub	local07, #4
28a80     14 2C 06 A1 |  if_e	add	local04, #20
28a84     16 3D 62 AC |  if_e	wrlong	local12, local04
28a88     14 2C 86 A1 |  if_e	sub	local04, #20
28a8c     18 2C 06 F1 | 	add	local04, #24
28a90     16 3D 0A FB | 	rdlong	local12, local04 wz
28a94     18 2C 86 F1 | 	sub	local04, #24
28a98     08 32 06 A1 |  if_e	add	local07, #8
28a9c     19 3D 02 AB |  if_e	rdlong	local12, local07
28aa0     08 32 86 A1 |  if_e	sub	local07, #8
28aa4     18 2C 06 A1 |  if_e	add	local04, #24
28aa8     16 3D 62 AC |  if_e	wrlong	local12, local04
28aac     18 2C 86 A1 |  if_e	sub	local04, #24
28ab0     24 2C 06 F1 | 	add	local04, #36
28ab4     16 3D 0A FB | 	rdlong	local12, local04 wz
28ab8     24 2C 86 F1 | 	sub	local04, #36
28abc     19 3D 02 AB |  if_e	rdlong	local12, local07
28ac0     24 2C 06 A1 |  if_e	add	local04, #36
28ac4     16 3D 62 AC |  if_e	wrlong	local12, local04
28ac8     24 2C 86 A1 |  if_e	sub	local04, #36
28acc     28 2C 06 F1 | 	add	local04, #40
28ad0     16 3D 0A FB | 	rdlong	local12, local04 wz
28ad4     28 2C 86 F1 | 	sub	local04, #40
28ad8     10 32 06 A1 |  if_e	add	local07, #16
28adc     19 3D 02 AB |  if_e	rdlong	local12, local07
28ae0     10 32 86 A1 |  if_e	sub	local07, #16
28ae4     28 2C 06 A1 |  if_e	add	local04, #40
28ae8     16 3D 62 AC |  if_e	wrlong	local12, local04
28aec     28 2C 86 A1 |  if_e	sub	local04, #40
28af0     30 2C 06 F1 | 	add	local04, #48
28af4     16 3D 0A FB | 	rdlong	local12, local04 wz
28af8     30 2C 86 F1 | 	sub	local04, #48
28afc     0C 32 06 A1 |  if_e	add	local07, #12
28b00     19 3D 02 AB |  if_e	rdlong	local12, local07
28b04     0C 32 86 A1 |  if_e	sub	local07, #12
28b08     30 2C 06 A1 |  if_e	add	local04, #48
28b0c     16 3D 62 AC |  if_e	wrlong	local12, local04
28b10     30 2C 86 A1 |  if_e	sub	local04, #48
28b14     20 2C 06 F1 | 	add	local04, #32
28b18     16 3D 0A FB | 	rdlong	local12, local04 wz
28b1c     20 2C 86 F1 | 	sub	local04, #32
28b20     50 32 06 A1 |  if_e	add	local07, #80
28b24     19 3D 02 AB |  if_e	rdlong	local12, local07
28b28     50 32 86 A1 |  if_e	sub	local07, #80
28b2c     20 2C 06 A1 |  if_e	add	local04, #32
28b30     16 3D 62 AC |  if_e	wrlong	local12, local04
28b34     20 2C 86 A1 |  if_e	sub	local04, #32
28b38     1C 2C 06 F1 | 	add	local04, #28
28b3c     16 3D 0A FB | 	rdlong	local12, local04 wz
28b40     1C 2C 86 F1 | 	sub	local04, #28
28b44     54 32 06 A1 |  if_e	add	local07, #84
28b48     19 3D 02 AB |  if_e	rdlong	local12, local07
28b4c     54 32 86 A1 |  if_e	sub	local07, #84
28b50     1C 2C 06 A1 |  if_e	add	local04, #28
28b54     16 3D 62 AC |  if_e	wrlong	local12, local04
28b58     1C 2C 86 A1 |  if_e	sub	local04, #28
28b5c     1C 2C 06 F1 | 	add	local04, #28
28b60     16 3D 0A FB | 	rdlong	local12, local04 wz
28b64     1C 2C 86 F1 | 	sub	local04, #28
28b68     01 2E 06 A6 |  if_e	mov	local05, #1
28b6c     F2 12 02 A6 |  if_e	mov	arg01, objptr
28b70     00 C0 05 AF 
28b74     00 12 46 A5 |  if_e	or	arg01, ##192937984
28b78     1C 2C 06 A1 |  if_e	add	local04, #28
28b7c     16 13 62 AC |  if_e	wrlong	arg01, local04
28b80     1C 2C 86 A1 |  if_e	sub	local04, #28
28b84     20 2C 06 F1 | 	add	local04, #32
28b88     16 3D 0A FB | 	rdlong	local12, local04 wz
28b8c     20 2C 86 F1 | 	sub	local04, #32
28b90     01 2E 06 A6 |  if_e	mov	local05, #1
28b94     F2 12 02 A6 |  if_e	mov	arg01, objptr
28b98     00 C8 05 AF 
28b9c     00 12 46 A5 |  if_e	or	arg01, ##193986560
28ba0     20 2C 06 A1 |  if_e	add	local04, #32
28ba4     16 13 62 AC |  if_e	wrlong	arg01, local04
28ba8     20 2C 86 A1 |  if_e	sub	local04, #32
28bac     2C 2C 06 F1 | 	add	local04, #44
28bb0     16 3D 0A FB | 	rdlong	local12, local04 wz
28bb4     2C 2C 86 F1 | 	sub	local04, #44
28bb8     3C 00 90 5D |  if_ne	jmp	#LR__3733
28bbc     14 32 06 F1 | 	add	local07, #20
28bc0     19 3D 0A FB | 	rdlong	local12, local07 wz
28bc4     14 32 86 F1 | 	sub	local07, #20
28bc8     14 32 06 51 |  if_ne	add	local07, #20
28bcc     19 3D 02 5B |  if_ne	rdlong	local12, local07
28bd0     2C 2C 06 51 |  if_ne	add	local04, #44
28bd4     16 3D 62 5C |  if_ne	wrlong	local12, local04
28bd8     2C 2C 86 51 |  if_ne	sub	local04, #44
28bdc     01 2E 06 A6 |  if_e	mov	local05, #1
28be0     F2 12 02 A6 |  if_e	mov	arg01, objptr
28be4     00 D0 05 AF 
28be8     00 12 46 A5 |  if_e	or	arg01, ##195035136
28bec     2C 2C 06 A1 |  if_e	add	local04, #44
28bf0     16 13 62 AC |  if_e	wrlong	arg01, local04
28bf4     2C 2C 86 A1 |  if_e	sub	local04, #44
28bf8                 | LR__3733
28bf8                 | LR__3734
28bf8     00 2E 0E F2 | 	cmp	local05, #0 wz
28bfc     16 13 02 56 |  if_ne	mov	arg01, local04
28c00     70 04 B0 5D |  if_ne	call	#__system____default_buffer_init
28c04     00 3A 0E F2 | 	cmp	local11, #0 wz
28c08     00 12 06 A6 |  if_e	mov	arg01, #0
28c0c     10 00 90 5D |  if_ne	jmp	#LR__3735
28c10     00 12 4E F2 | 	cmps	arg01, #0 wz
28c14     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28c18     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28c1c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28c20                 | LR__3735
28c20     1D FB 01 F6 | 	mov	result1, local11
28c24                 | LR__3736
28c24     A7 F0 03 F6 | 	mov	ptra, fp
28c28     B2 00 A0 FD | 	call	#popregs_
28c2c                 | __system___openraw_ret
28c2c     2D 00 64 FD | 	ret
28c30                 | 
28c30                 | __system___closeraw
28c30     05 4A 05 F6 | 	mov	COUNT_, #5
28c34     A8 00 A0 FD | 	call	#pushregs_
28c38     09 27 02 F6 | 	mov	local01, arg01
28c3c     00 28 06 F6 | 	mov	local02, #0
28c40     08 26 06 F1 | 	add	local01, #8
28c44     13 FB 09 FB | 	rdlong	result1, local01 wz
28c48     08 26 86 F1 | 	sub	local01, #8
28c4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28c50     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28c54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28c58     01 FA 65 A6 |  if_e	neg	result1, #1
28c5c     A8 00 90 AD |  if_e	jmp	#LR__3742
28c60     2C 26 06 F1 | 	add	local01, #44
28c64     13 FB 09 FB | 	rdlong	result1, local01 wz
28c68     2C 26 86 F1 | 	sub	local01, #44
28c6c     38 00 90 AD |  if_e	jmp	#LR__3740
28c70     2C 26 06 F1 | 	add	local01, #44
28c74     13 2B 02 FB | 	rdlong	local03, local01
28c78     15 2D 02 F6 | 	mov	local04, local03
28c7c     2C 26 86 F1 | 	sub	local01, #44
28c80     13 2C 46 F7 | 	zerox	local04, #19
28c84     14 2A 46 F0 | 	shr	local03, #20
28c88     02 2A 66 F0 | 	shl	local03, #2
28c8c     ED 2A 02 F1 | 	add	local03, __methods__
28c90     15 2B 02 FB | 	rdlong	local03, local03
28c94     13 13 02 F6 | 	mov	arg01, local01
28c98     F2 2E 02 F6 | 	mov	local05, objptr
28c9c     16 E5 01 F6 | 	mov	objptr, local04
28ca0     2D 2A 62 FD | 	call	local03
28ca4     17 E5 01 F6 | 	mov	objptr, local05
28ca8                 | LR__3740
28ca8     24 26 06 F1 | 	add	local01, #36
28cac     13 2F 0A FB | 	rdlong	local05, local01 wz
28cb0     24 26 86 F1 | 	sub	local01, #36
28cb4     3C 00 90 AD |  if_e	jmp	#LR__3741
28cb8     24 26 06 F1 | 	add	local01, #36
28cbc     13 2B 02 FB | 	rdlong	local03, local01
28cc0     15 2D 02 F6 | 	mov	local04, local03
28cc4     24 26 86 F1 | 	sub	local01, #36
28cc8     13 2C 46 F7 | 	zerox	local04, #19
28ccc     14 2A 46 F0 | 	shr	local03, #20
28cd0     02 2A 66 F0 | 	shl	local03, #2
28cd4     ED 2A 02 F1 | 	add	local03, __methods__
28cd8     15 2B 02 FB | 	rdlong	local03, local03
28cdc     13 13 02 F6 | 	mov	arg01, local01
28ce0     F2 2E 02 F6 | 	mov	local05, objptr
28ce4     16 E5 01 F6 | 	mov	objptr, local04
28ce8     2D 2A 62 FD | 	call	local03
28cec     17 E5 01 F6 | 	mov	objptr, local05
28cf0     FD 28 02 F6 | 	mov	local02, result1
28cf4                 | LR__3741
28cf4     13 13 02 F6 | 	mov	arg01, local01
28cf8     00 14 06 F6 | 	mov	arg02, #0
28cfc     34 16 06 F6 | 	mov	arg03, #52
28d00     98 00 A0 FD | 	call	#\builtin_bytefill_
28d04     14 FB 01 F6 | 	mov	result1, local02
28d08                 | LR__3742
28d08     A7 F0 03 F6 | 	mov	ptra, fp
28d0c     B2 00 A0 FD | 	call	#popregs_
28d10                 | __system___closeraw_ret
28d10     2D 00 64 FD | 	ret
28d14                 | 
28d14                 | __system____default_getc
28d14     07 4A 05 F6 | 	mov	COUNT_, #7
28d18     A8 00 A0 FD | 	call	#pushregs_
28d1c     09 27 02 F6 | 	mov	local01, arg01
28d20     13 29 02 FB | 	rdlong	local02, local01
28d24     08 26 06 F1 | 	add	local01, #8
28d28     13 17 02 FB | 	rdlong	arg03, local01
28d2c     08 26 86 F1 | 	sub	local01, #8
28d30     08 16 CE F7 | 	test	arg03, #8 wz
28d34     13 13 02 56 |  if_ne	mov	arg01, local01
28d38     B0 01 B0 5D |  if_ne	call	#__system____default_flush
28d3c     08 26 06 F1 | 	add	local01, #8
28d40     13 17 02 FB | 	rdlong	arg03, local01
28d44     04 16 46 F5 | 	or	arg03, #4
28d48     13 17 62 FC | 	wrlong	arg03, local01
28d4c     08 26 86 F1 | 	sub	local01, #8
28d50     14 2B 0A FB | 	rdlong	local03, local02 wz
28d54     B8 00 90 5D |  if_ne	jmp	#LR__3750
28d58     13 2D 02 F6 | 	mov	local04, local01
28d5c     16 2F 02 FB | 	rdlong	local05, local04
28d60     08 2E 06 F1 | 	add	local05, #8
28d64     17 31 0A FB | 	rdlong	local06, local05 wz
28d68     08 2E 86 F1 | 	sub	local05, #8
28d6c     10 2E 06 A1 |  if_e	add	local05, #16
28d70     17 31 02 A6 |  if_e	mov	local06, local05
28d74     04 2E 86 A1 |  if_e	sub	local05, #4
28d78     17 31 62 AC |  if_e	wrlong	local06, local05
28d7c     04 2E 86 A1 |  if_e	sub	local05, #4
28d80     02 00 80 AF 
28d84     17 01 68 AC |  if_e	wrlong	##1024, local05
28d88     08 2E 86 A1 |  if_e	sub	local05, #8
28d8c     14 2C 06 F1 | 	add	local04, #20
28d90     16 33 02 FB | 	rdlong	local07, local04
28d94     19 2B 02 F6 | 	mov	local03, local07
28d98     14 2C 86 F1 | 	sub	local04, #20
28d9c     13 2A 46 F7 | 	zerox	local03, #19
28da0     14 32 46 F0 | 	shr	local07, #20
28da4     02 32 66 F0 | 	shl	local07, #2
28da8     ED 32 02 F1 | 	add	local07, __methods__
28dac     19 33 02 FB | 	rdlong	local07, local07
28db0     16 13 02 F6 | 	mov	arg01, local04
28db4     0C 2E 06 F1 | 	add	local05, #12
28db8     17 15 02 FB | 	rdlong	arg02, local05
28dbc     04 2E 86 F1 | 	sub	local05, #4
28dc0     17 17 02 FB | 	rdlong	arg03, local05
28dc4     08 2E 86 F1 | 	sub	local05, #8
28dc8     F2 26 02 F6 | 	mov	local01, objptr
28dcc     15 E5 01 F6 | 	mov	objptr, local03
28dd0     2D 32 62 FD | 	call	local07
28dd4     13 E5 01 F6 | 	mov	objptr, local01
28dd8     FD 2A 02 F6 | 	mov	local03, result1
28ddc     00 2A 56 F2 | 	cmps	local03, #0 wc
28de0     01 FA 65 C6 |  if_b	neg	result1, #1
28de4     17 2B 62 3C |  if_ae	wrlong	local03, local05
28de8     0C 2E 06 31 |  if_ae	add	local05, #12
28dec     17 33 02 3B |  if_ae	rdlong	local07, local05
28df0     08 2E 86 31 |  if_ae	sub	local05, #8
28df4     17 33 62 3C |  if_ae	wrlong	local07, local05
28df8     08 2C 06 31 |  if_ae	add	local04, #8
28dfc     16 31 02 3B |  if_ae	rdlong	local06, local04
28e00     04 30 46 35 |  if_ae	or	local06, #4
28e04     16 31 62 3C |  if_ae	wrlong	local06, local04
28e08     15 FB 01 36 |  if_ae	mov	result1, local03
28e0c     FD 2A 02 F6 | 	mov	local03, result1
28e10                 | LR__3750
28e10     01 2A 56 F2 | 	cmps	local03, #1 wc
28e14     01 FA 65 C6 |  if_b	neg	result1, #1
28e18     01 2A 86 31 |  if_ae	sub	local03, #1
28e1c     14 2B 62 3C |  if_ae	wrlong	local03, local02
28e20     04 28 06 31 |  if_ae	add	local02, #4
28e24     14 2B 02 3B |  if_ae	rdlong	local03, local02
28e28     15 FB C1 3A |  if_ae	rdbyte	result1, local03
28e2c     01 2A 06 31 |  if_ae	add	local03, #1
28e30     14 2B 62 3C |  if_ae	wrlong	local03, local02
28e34     A7 F0 03 F6 | 	mov	ptra, fp
28e38     B2 00 A0 FD | 	call	#popregs_
28e3c                 | __system____default_getc_ret
28e3c     2D 00 64 FD | 	ret
28e40                 | 
28e40                 | __system____default_putc
28e40     06 4A 05 F6 | 	mov	COUNT_, #6
28e44     A8 00 A0 FD | 	call	#pushregs_
28e48     09 27 02 F6 | 	mov	local01, arg01
28e4c     0A 29 02 F6 | 	mov	local02, arg02
28e50     14 2B 02 FB | 	rdlong	local03, local02
28e54     08 28 06 F1 | 	add	local02, #8
28e58     14 15 02 FB | 	rdlong	arg02, local02
28e5c     08 28 86 F1 | 	sub	local02, #8
28e60     04 14 CE F7 | 	test	arg02, #4 wz
28e64     14 13 02 56 |  if_ne	mov	arg01, local02
28e68     80 00 B0 5D |  if_ne	call	#__system____default_flush
28e6c     08 28 06 F1 | 	add	local02, #8
28e70     14 2D 02 FB | 	rdlong	local04, local02
28e74     08 2C 46 F5 | 	or	local04, #8
28e78     14 2D 62 FC | 	wrlong	local04, local02
28e7c     15 2F 02 FB | 	rdlong	local05, local03
28e80     0C 2A 06 F1 | 	add	local03, #12
28e84     15 15 02 FB | 	rdlong	arg02, local03
28e88     0C 2A 86 F1 | 	sub	local03, #12
28e8c     17 FB 01 F6 | 	mov	result1, local05
28e90     0A FB 01 F1 | 	add	result1, arg02
28e94     FD 26 42 FC | 	wrbyte	local01, result1
28e98     13 27 E2 F8 | 	getbyte	local01, local01, #0
28e9c     01 2E 06 F1 | 	add	local05, #1
28ea0     15 2F 62 FC | 	wrlong	local05, local03
28ea4     02 28 86 F1 | 	sub	local02, #2
28ea8     14 31 EA FA | 	rdword	local06, local02 wz
28eac     06 28 86 F1 | 	sub	local02, #6
28eb0     08 2A 06 51 |  if_ne	add	local03, #8
28eb4     15 2D 02 5B |  if_ne	rdlong	local04, local03
28eb8     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
28ebc     0C 00 90 AD |  if_e	jmp	#LR__3760
28ec0     0A 26 0E F2 | 	cmp	local01, #10 wz
28ec4     01 30 0E A2 |  if_e	cmp	local06, #1 wz
28ec8     10 00 90 5D |  if_ne	jmp	#LR__3761
28ecc                 | LR__3760
28ecc     14 13 02 F6 | 	mov	arg01, local02
28ed0     18 00 B0 FD | 	call	#__system____default_flush
28ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
28ed8     01 26 66 56 |  if_ne	neg	local01, #1
28edc                 | LR__3761
28edc     13 FB 01 F6 | 	mov	result1, local01
28ee0     A7 F0 03 F6 | 	mov	ptra, fp
28ee4     B2 00 A0 FD | 	call	#popregs_
28ee8                 | __system____default_putc_ret
28ee8     2D 00 64 FD | 	ret
28eec                 | 
28eec                 | __system____default_flush
28eec     07 4A 05 F6 | 	mov	COUNT_, #7
28ef0     A8 00 A0 FD | 	call	#pushregs_
28ef4     09 27 02 F6 | 	mov	local01, arg01
28ef8     13 29 02 FB | 	rdlong	local02, local01
28efc     14 2B 02 FB | 	rdlong	local03, local02
28f00     08 26 06 F1 | 	add	local01, #8
28f04     13 FD 01 FB | 	rdlong	result2, local01
28f08     08 26 86 F1 | 	sub	local01, #8
28f0c     08 FC CD F7 | 	test	result2, #8 wz
28f10     D4 00 90 AD |  if_e	jmp	#LR__3772
28f14     01 2A 56 F2 | 	cmps	local03, #1 wc
28f18     2C 01 90 CD |  if_b	jmp	#LR__3774
28f1c     08 26 06 F1 | 	add	local01, #8
28f20     13 FD 01 FB | 	rdlong	result2, local01
28f24     08 26 86 F1 | 	sub	local01, #8
28f28     80 FC CD F7 | 	test	result2, #128 wz
28f2c     6C 00 90 AD |  if_e	jmp	#LR__3771
28f30     08 26 06 F1 | 	add	local01, #8
28f34     13 17 02 FB | 	rdlong	arg03, local01
28f38     08 26 86 F1 | 	sub	local01, #8
28f3c     00 17 CE F7 | 	test	arg03, #256 wz
28f40     58 00 90 AD |  if_e	jmp	#LR__3770
28f44     30 26 06 F1 | 	add	local01, #48
28f48     13 2D 02 FB | 	rdlong	local04, local01
28f4c     16 2F 02 F6 | 	mov	local05, local04
28f50     30 26 86 F1 | 	sub	local01, #48
28f54     13 2E 46 F7 | 	zerox	local05, #19
28f58     14 2C 46 F0 | 	shr	local04, #20
28f5c     02 2C 66 F0 | 	shl	local04, #2
28f60     ED 2C 02 F1 | 	add	local04, __methods__
28f64     16 2D 02 FB | 	rdlong	local04, local04
28f68     13 13 02 F6 | 	mov	arg01, local01
28f6c     00 14 06 F6 | 	mov	arg02, #0
28f70     00 16 06 F6 | 	mov	arg03, #0
28f74     02 18 06 F6 | 	mov	arg04, #2
28f78     F2 30 02 F6 | 	mov	local06, objptr
28f7c     17 E5 01 F6 | 	mov	objptr, local05
28f80     2D 2C 62 FD | 	call	local04
28f84     18 E5 01 F6 | 	mov	objptr, local06
28f88     08 26 06 F1 | 	add	local01, #8
28f8c     13 31 02 FB | 	rdlong	local06, local01
28f90     00 31 26 F5 | 	andn	local06, #256
28f94     13 31 62 FC | 	wrlong	local06, local01
28f98     08 26 86 F1 | 	sub	local01, #8
28f9c                 | LR__3770
28f9c                 | LR__3771
28f9c     18 26 06 F1 | 	add	local01, #24
28fa0     13 2D 02 FB | 	rdlong	local04, local01
28fa4     16 2F 02 F6 | 	mov	local05, local04
28fa8     18 26 86 F1 | 	sub	local01, #24
28fac     13 2E 46 F7 | 	zerox	local05, #19
28fb0     14 2C 46 F0 | 	shr	local04, #20
28fb4     02 2C 66 F0 | 	shl	local04, #2
28fb8     ED 2C 02 F1 | 	add	local04, __methods__
28fbc     16 2D 02 FB | 	rdlong	local04, local04
28fc0     0C 28 06 F1 | 	add	local02, #12
28fc4     14 15 02 FB | 	rdlong	arg02, local02
28fc8     0C 28 86 F1 | 	sub	local02, #12
28fcc     13 13 02 F6 | 	mov	arg01, local01
28fd0     15 17 02 F6 | 	mov	arg03, local03
28fd4     F2 30 02 F6 | 	mov	local06, objptr
28fd8     17 E5 01 F6 | 	mov	objptr, local05
28fdc     2D 2C 62 FD | 	call	local04
28fe0     18 E5 01 F6 | 	mov	objptr, local06
28fe4     60 00 90 FD | 	jmp	#LR__3774
28fe8                 | LR__3772
28fe8     08 26 06 F1 | 	add	local01, #8
28fec     13 31 02 FB | 	rdlong	local06, local01
28ff0     08 26 86 F1 | 	sub	local01, #8
28ff4     04 30 CE F7 | 	test	local06, #4 wz
28ff8     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
28ffc     48 00 90 AD |  if_e	jmp	#LR__3773
29000     15 15 62 F6 | 	neg	arg02, local03
29004     0A 17 02 F6 | 	mov	arg03, arg02
29008     1F 16 C6 F0 | 	sar	arg03, #31
2900c     30 26 06 F1 | 	add	local01, #48
29010     13 2D 02 FB | 	rdlong	local04, local01
29014     16 2F 02 F6 | 	mov	local05, local04
29018     30 26 86 F1 | 	sub	local01, #48
2901c     13 2E 46 F7 | 	zerox	local05, #19
29020     14 2C 46 F0 | 	shr	local04, #20
29024     02 2C 66 F0 | 	shl	local04, #2
29028     ED 2C 02 F1 | 	add	local04, __methods__
2902c     16 2D 02 FB | 	rdlong	local04, local04
29030     13 13 02 F6 | 	mov	arg01, local01
29034     01 18 06 F6 | 	mov	arg04, #1
29038     F2 30 02 F6 | 	mov	local06, objptr
2903c     17 E5 01 F6 | 	mov	objptr, local05
29040     2D 2C 62 FD | 	call	local04
29044     18 E5 01 F6 | 	mov	objptr, local06
29048                 | LR__3773
29048                 | LR__3774
29048     14 01 68 FC | 	wrlong	#0, local02
2904c     04 28 06 F1 | 	add	local02, #4
29050     14 01 68 FC | 	wrlong	#0, local02
29054     08 26 06 F1 | 	add	local01, #8
29058     13 33 02 FB | 	rdlong	local07, local01
2905c     0C 32 26 F5 | 	andn	local07, #12
29060     13 33 62 FC | 	wrlong	local07, local01
29064     00 FA 05 F6 | 	mov	result1, #0
29068     A7 F0 03 F6 | 	mov	ptra, fp
2906c     B2 00 A0 FD | 	call	#popregs_
29070                 | __system____default_flush_ret
29070     2D 00 64 FD | 	ret
29074                 | 
29074                 | __system____default_buffer_init
29074     02 4A 05 F6 | 	mov	COUNT_, #2
29078     A8 00 A0 FD | 	call	#pushregs_
2907c     09 27 02 F6 | 	mov	local01, arg01
29080     13 29 02 FB | 	rdlong	local02, local01
29084     13 13 02 F6 | 	mov	arg01, local01
29088     84 03 B0 FD | 	call	#__system___isatty
2908c     00 FA 0D F2 | 	cmp	result1, #0 wz
29090     06 26 06 51 |  if_ne	add	local01, #6
29094     13 0B 58 5C |  if_ne	wrword	#5, local01
29098     06 26 06 A1 |  if_e	add	local01, #6
2909c     13 0D 58 AC |  if_e	wrword	#6, local01
290a0     10 28 06 F1 | 	add	local02, #16
290a4     14 27 02 F6 | 	mov	local01, local02
290a8     04 28 86 F1 | 	sub	local02, #4
290ac     14 27 62 FC | 	wrlong	local01, local02
290b0     04 28 86 F1 | 	sub	local02, #4
290b4     02 00 80 FF 
290b8     14 01 68 FC | 	wrlong	##1024, local02
290bc     00 FA 05 F6 | 	mov	result1, #0
290c0     A7 F0 03 F6 | 	mov	ptra, fp
290c4     B2 00 A0 FD | 	call	#popregs_
290c8                 | __system____default_buffer_init_ret
290c8     2D 00 64 FD | 	ret
290cc                 | 
290cc                 | __system__stat
290cc     04 4A 05 F6 | 	mov	COUNT_, #4
290d0     A8 00 A0 FD | 	call	#pushregs_
290d4     0A 27 02 F6 | 	mov	local01, arg02
290d8     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
290dc     84 29 06 F1 | 	add	local02, #388
290e0     09 15 02 F6 | 	mov	arg02, arg01
290e4     14 13 02 F6 | 	mov	arg01, local02
290e8     00 16 06 F6 | 	mov	arg03, #0
290ec     E0 C3 BF FD | 	call	#__system____getvfsforfile
290f0     FD 2A 0A F6 | 	mov	local03, result1 wz
290f4     10 00 90 AD |  if_e	jmp	#LR__3780
290f8     34 2A 06 F1 | 	add	local03, #52
290fc     15 17 0A FB | 	rdlong	arg03, local03 wz
29100     34 2A 86 F1 | 	sub	local03, #52
29104     14 00 90 5D |  if_ne	jmp	#LR__3781
29108                 | LR__3780
29108     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2910c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29110     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29114     01 FA 65 F6 | 	neg	result1, #1
29118     68 00 90 FD | 	jmp	#LR__3782
2911c                 | LR__3781
2911c     13 13 02 F6 | 	mov	arg01, local01
29120     00 14 06 F6 | 	mov	arg02, #0
29124     34 16 06 F6 | 	mov	arg03, #52
29128     09 2D 02 F6 | 	mov	local04, arg01
2912c     98 00 A0 FD | 	call	#\builtin_bytefill_
29130     16 FB 01 F6 | 	mov	result1, local04
29134     14 13 CA FA | 	rdbyte	arg01, local02 wz
29138     08 26 06 A1 |  if_e	add	local01, #8
2913c     08 00 80 AF 
29140     13 FF 6B AC |  if_e	wrlong	##4607, local01
29144     00 FA 05 A6 |  if_e	mov	result1, #0
29148     38 00 90 AD |  if_e	jmp	#LR__3782
2914c     34 2A 06 F1 | 	add	local03, #52
29150     15 2B 02 FB | 	rdlong	local03, local03
29154     15 2D 02 F6 | 	mov	local04, local03
29158     13 2A 46 F7 | 	zerox	local03, #19
2915c     14 2C 46 F0 | 	shr	local04, #20
29160     02 2C 66 F0 | 	shl	local04, #2
29164     ED 2C 02 F1 | 	add	local04, __methods__
29168     16 2D 02 FB | 	rdlong	local04, local04
2916c     14 13 02 F6 | 	mov	arg01, local02
29170     13 15 02 F6 | 	mov	arg02, local01
29174     F2 28 02 F6 | 	mov	local02, objptr
29178     15 E5 01 F6 | 	mov	objptr, local03
2917c     2D 2C 62 FD | 	call	local04
29180     14 E5 01 F6 | 	mov	objptr, local02
29184                 | LR__3782
29184     A7 F0 03 F6 | 	mov	ptra, fp
29188     B2 00 A0 FD | 	call	#popregs_
2918c                 | __system__stat_ret
2918c     2D 00 64 FD | 	ret
29190                 | 
29190                 | __system__write
29190     01 4A 05 F6 | 	mov	COUNT_, #1
29194     A8 00 A0 FD | 	call	#pushregs_
29198     0A 12 16 F2 | 	cmp	arg01, #10 wc
2919c     34 12 06 CD |  if_b	qmul	arg01, #52
291a0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
291a4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
291a8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
291ac     01 FA 65 36 |  if_ae	neg	result1, #1
291b0     F3 26 02 C6 |  if_b	mov	local01, ptr___system__dat__
291b4     02 00 00 CF 
291b8     2C 27 06 C1 |  if_b	add	local01, ##1324
291bc     18 12 62 CD |  if_b	getqx	arg01
291c0     13 13 02 C1 |  if_b	add	arg01, local01
291c4     0C 0F B0 CD |  if_b	call	#__system___vfswrite
291c8     A7 F0 03 F6 | 	mov	ptra, fp
291cc     B2 00 A0 FD | 	call	#popregs_
291d0                 | __system__write_ret
291d0     2D 00 64 FD | 	ret
291d4                 | 
291d4                 | __system__read
291d4     01 4A 05 F6 | 	mov	COUNT_, #1
291d8     A8 00 A0 FD | 	call	#pushregs_
291dc     0A 12 16 F2 | 	cmp	arg01, #10 wc
291e0     34 12 06 CD |  if_b	qmul	arg01, #52
291e4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
291e8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
291ec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
291f0     01 FA 65 36 |  if_ae	neg	result1, #1
291f4     F3 26 02 C6 |  if_b	mov	local01, ptr___system__dat__
291f8     02 00 00 CF 
291fc     2C 27 06 C1 |  if_b	add	local01, ##1324
29200     18 12 62 CD |  if_b	getqx	arg01
29204     13 13 02 C1 |  if_b	add	arg01, local01
29208     94 10 B0 CD |  if_b	call	#__system___vfsread
2920c     A7 F0 03 F6 | 	mov	ptra, fp
29210     B2 00 A0 FD | 	call	#popregs_
29214                 | __system__read_ret
29214     2D 00 64 FD | 	ret
29218                 | 
29218                 | __system__close
29218     01 4A 05 F6 | 	mov	COUNT_, #1
2921c     A8 00 A0 FD | 	call	#pushregs_
29220     0A 12 16 F2 | 	cmp	arg01, #10 wc
29224     34 12 06 CD |  if_b	qmul	arg01, #52
29228     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2922c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29230     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
29234     01 FA 65 36 |  if_ae	neg	result1, #1
29238     F3 26 02 C6 |  if_b	mov	local01, ptr___system__dat__
2923c     02 00 00 CF 
29240     2C 27 06 C1 |  if_b	add	local01, ##1324
29244     18 12 62 CD |  if_b	getqx	arg01
29248     13 13 02 C1 |  if_b	add	arg01, local01
2924c     E0 F9 BF CD |  if_b	call	#__system___closeraw
29250     A7 F0 03 F6 | 	mov	ptra, fp
29254     B2 00 A0 FD | 	call	#popregs_
29258                 | __system__close_ret
29258     2D 00 64 FD | 	ret
2925c                 | 
2925c                 | __system__lseek
2925c     0A 4A 05 F6 | 	mov	COUNT_, #10
29260     A8 00 A0 FD | 	call	#pushregs_
29264     0A 27 02 F6 | 	mov	local01, arg02
29268     0B 29 02 F6 | 	mov	local02, arg03
2926c     0C 2F 02 F6 | 	mov	local05, arg04
29270     0A 12 16 F2 | 	cmp	arg01, #10 wc
29274     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
29278     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2927c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
29280     01 FC 65 36 |  if_ae	neg	result2, #1
29284     01 FA 65 36 |  if_ae	neg	result1, #1
29288     F0 00 90 3D |  if_ae	jmp	#LR__3790
2928c     34 12 06 FD | 	qmul	arg01, #52
29290     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29294     02 00 00 FF 
29298     2C 13 06 F1 | 	add	arg01, ##1324
2929c     18 30 62 FD | 	getqx	local06
292a0     09 31 02 F1 | 	add	local06, arg01
292a4     30 30 06 F1 | 	add	local06, #48
292a8     18 13 0A FB | 	rdlong	arg01, local06 wz
292ac     30 30 86 F1 | 	sub	local06, #48
292b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
292b4     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
292b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
292bc     01 FC 65 A6 |  if_e	neg	result2, #1
292c0     01 FA 65 A6 |  if_e	neg	result1, #1
292c4     B4 00 90 AD |  if_e	jmp	#LR__3790
292c8     08 30 06 F1 | 	add	local06, #8
292cc     18 33 02 FB | 	rdlong	local07, local06
292d0     08 30 86 F1 | 	sub	local06, #8
292d4     80 32 CE F7 | 	test	local07, #128 wz
292d8     08 30 06 51 |  if_ne	add	local06, #8
292dc     18 33 02 5B |  if_ne	rdlong	local07, local06
292e0     00 33 46 55 |  if_ne	or	local07, #256
292e4     18 33 62 5C |  if_ne	wrlong	local07, local06
292e8     08 30 86 51 |  if_ne	sub	local06, #8
292ec     13 15 02 F6 | 	mov	arg02, local01
292f0     14 17 02 F6 | 	mov	arg03, local02
292f4     30 30 06 F1 | 	add	local06, #48
292f8     18 35 02 FB | 	rdlong	local08, local06
292fc     1A 37 02 F6 | 	mov	local09, local08
29300     30 30 86 F1 | 	sub	local06, #48
29304     13 36 46 F7 | 	zerox	local09, #19
29308     14 34 46 F0 | 	shr	local08, #20
2930c     02 34 66 F0 | 	shl	local08, #2
29310     ED 34 02 F1 | 	add	local08, __methods__
29314     1A 35 02 FB | 	rdlong	local08, local08
29318     18 13 02 F6 | 	mov	arg01, local06
2931c     17 19 02 F6 | 	mov	arg04, local05
29320     F2 38 02 F6 | 	mov	local10, objptr
29324     1B E5 01 F6 | 	mov	objptr, local09
29328     2D 34 62 FD | 	call	local08
2932c     1C E5 01 F6 | 	mov	objptr, local10
29330     FD 2A 02 F6 | 	mov	local03, result1
29334     FE 2C 02 F6 | 	mov	local04, result2
29338     15 13 02 F6 | 	mov	arg01, local03
2933c     16 15 02 F6 | 	mov	arg02, local04
29340     00 FA 05 F6 | 	mov	result1, #0
29344     00 12 1E F2 | 	cmp	arg01, #0 wcz
29348     00 14 7E F2 | 	cmpsx	arg02, #0 wcz
2934c     01 FA 85 56 |  if_ne	negc	result1, #1
29350     00 FA 55 F2 | 	cmps	result1, #0 wc
29354     15 13 6A C6 |  if_b	neg	arg01, local03 wz
29358     20 E6 05 C1 |  if_b	add	ptr___system__dat__, #32
2935c     F3 12 62 CC |  if_b	wrlong	arg01, ptr___system__dat__
29360     20 E6 85 C1 |  if_b	sub	ptr___system__dat__, #32
29364     01 FA 65 46 |  if_c_and_nz	neg	result1, #1
29368     00 FA 05 86 |  if_c_and_z	mov	result1, #0
2936c     FD FC 01 C6 |  if_b	mov	result2, result1
29370     1F FC C5 C0 |  if_b	sar	result2, #31
29374     15 FB 01 36 |  if_ae	mov	result1, local03
29378     16 FD 01 36 |  if_ae	mov	result2, local04
2937c                 | LR__3790
2937c     A7 F0 03 F6 | 	mov	ptra, fp
29380     B2 00 A0 FD | 	call	#popregs_
29384                 | __system__lseek_ret
29384     2D 00 64 FD | 	ret
29388                 | 
29388                 | __system___ioctl
29388     03 4A 05 F6 | 	mov	COUNT_, #3
2938c     A8 00 A0 FD | 	call	#pushregs_
29390     00 12 4E F2 | 	cmps	arg01, #0 wz
29394     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29398     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2939c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
293a0     01 FA 65 A6 |  if_e	neg	result1, #1
293a4     5C 00 90 AD |  if_e	jmp	#LR__3801
293a8     28 12 06 F1 | 	add	arg01, #40
293ac     09 27 02 FB | 	rdlong	local01, arg01
293b0     13 29 02 F6 | 	mov	local02, local01
293b4     28 12 86 F1 | 	sub	arg01, #40
293b8     13 28 46 F7 | 	zerox	local02, #19
293bc     14 26 46 F0 | 	shr	local01, #20
293c0     02 26 66 F0 | 	shl	local01, #2
293c4     ED 26 02 F1 | 	add	local01, __methods__
293c8     13 27 02 FB | 	rdlong	local01, local01
293cc     F2 2A 02 F6 | 	mov	local03, objptr
293d0     14 E5 01 F6 | 	mov	objptr, local02
293d4     2D 26 62 FD | 	call	local01
293d8     15 E5 01 F6 | 	mov	objptr, local03
293dc     FD 12 0A F6 | 	mov	arg01, result1 wz
293e0     1C 00 90 AD |  if_e	jmp	#LR__3800
293e4     00 12 4E F2 | 	cmps	arg01, #0 wz
293e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
293ec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
293f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
293f4     01 FA 65 56 |  if_ne	neg	result1, #1
293f8     00 FA 05 A6 |  if_e	mov	result1, #0
293fc     04 00 90 FD | 	jmp	#LR__3801
29400                 | LR__3800
29400     00 FA 05 F6 | 	mov	result1, #0
29404                 | LR__3801
29404     A7 F0 03 F6 | 	mov	ptra, fp
29408     B2 00 A0 FD | 	call	#popregs_
2940c                 | __system___ioctl_ret
2940c     2D 00 64 FD | 	ret
29410                 | 
29410                 | __system___isatty
29410     00 4A 05 F6 | 	mov	COUNT_, #0
29414     A8 00 A0 FD | 	call	#pushregs_
29418     0C F0 07 F1 | 	add	ptra, #12
2941c     A7 16 02 F6 | 	mov	arg03, fp
29420     08 16 06 F1 | 	add	arg03, #8
29424     00 15 06 F6 | 	mov	arg02, #256
29428     5C FF BF FD | 	call	#__system___ioctl
2942c     00 FA 0D F2 | 	cmp	result1, #0 wz
29430     01 FA 05 A6 |  if_e	mov	result1, #1
29434     00 FA 05 56 |  if_ne	mov	result1, #0
29438     A7 F0 03 F6 | 	mov	ptra, fp
2943c     B2 00 A0 FD | 	call	#popregs_
29440                 | __system___isatty_ret
29440     2D 00 64 FD | 	ret
29444                 | 
29444                 | __system____getftab
29444     0A 12 16 F2 | 	cmp	arg01, #10 wc
29448     34 12 06 CD |  if_b	qmul	arg01, #52
2944c     00 FA 05 36 |  if_ae	mov	result1, #0
29450     F3 12 02 C6 |  if_b	mov	arg01, ptr___system__dat__
29454     02 00 00 CF 
29458     2C 13 06 C1 |  if_b	add	arg01, ##1324
2945c     18 FA 61 CD |  if_b	getqx	result1
29460     09 FB 01 C1 |  if_b	add	result1, arg01
29464                 | __system____getftab_ret
29464     2D 00 64 FD | 	ret
29468                 | 
29468                 | __system__strncpy
29468     09 01 02 F6 | 	mov	_var01, arg01
2946c     97 16 48 FB | 	callpa	#(@LR__3811-@LR__3810)>>2,fcache_load_ptr_
29470                 | LR__3810
29470     01 16 86 F1 | 	sub	arg03, #1
29474     00 16 56 F2 | 	cmps	arg03, #0 wc
29478     0A 03 02 36 |  if_ae	mov	_var02, arg02
2947c     01 02 06 31 |  if_ae	add	_var02, #1
29480     0A 05 C2 3A |  if_ae	rdbyte	_var03, arg02
29484     01 15 02 36 |  if_ae	mov	arg02, _var02
29488     00 05 42 3C |  if_ae	wrbyte	_var03, _var01
2948c     02 07 E2 38 |  if_ae	getbyte	_var04, _var03, #0
29490     07 06 4E 37 |  if_ae	zerox	_var04, #7 wz
29494     01 00 06 31 |  if_ae	add	_var01, #1
29498     D4 FF 9F 1D |  if_a	jmp	#LR__3810
2949c                 | LR__3811
2949c     97 0C 48 FB | 	callpa	#(@LR__3813-@LR__3812)>>2,fcache_load_ptr_
294a0                 | LR__3812
294a0     01 16 86 F1 | 	sub	arg03, #1
294a4     00 16 56 F2 | 	cmps	arg03, #0 wc
294a8     00 09 02 36 |  if_ae	mov	_var05, _var01
294ac     01 00 06 31 |  if_ae	add	_var01, #1
294b0     04 01 48 3C |  if_ae	wrbyte	#0, _var05
294b4     E8 FF 9F 3D |  if_ae	jmp	#LR__3812
294b8                 | LR__3813
294b8     09 FB 01 F6 | 	mov	result1, arg01
294bc                 | __system__strncpy_ret
294bc     2D 00 64 FD | 	ret
294c0                 | 
294c0                 | __system__strncat
294c0     00 14 4E F2 | 	cmps	arg02, #0 wz
294c4     50 00 90 AD |  if_e	jmp	#LR__3824
294c8     01 16 16 F2 | 	cmp	arg03, #1 wc
294cc     48 00 90 CD |  if_b	jmp	#LR__3824
294d0     09 01 02 F6 | 	mov	_var01, arg01
294d4     97 06 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
294d8                 | LR__3820
294d8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
294dc     01 00 06 51 |  if_ne	add	_var01, #1
294e0     F4 FF 9F 5D |  if_ne	jmp	#LR__3820
294e4                 | LR__3821
294e4     0B 03 02 F6 | 	mov	_var02, arg03
294e8     97 14 48 FB | 	callpa	#(@LR__3823-@LR__3822)>>2,fcache_load_ptr_
294ec                 | LR__3822
294ec     0A FB C1 FA | 	rdbyte	result1, arg02
294f0     FD 04 02 F6 | 	mov	_var03, result1
294f4     07 04 4E F7 | 	zerox	_var03, #7 wz
294f8     01 14 06 F1 | 	add	arg02, #1
294fc     01 02 86 51 |  if_ne	sub	_var02, #1
29500     00 02 56 52 |  if_ne	cmps	_var02, #0 wc
29504     00 05 02 16 |  if_a	mov	_var03, _var01
29508     01 00 06 11 |  if_a	add	_var01, #1
2950c     02 FB 41 1C |  if_a	wrbyte	result1, _var03
29510     D8 FF 9F 1D |  if_a	jmp	#LR__3822
29514                 | LR__3823
29514     00 01 48 FC | 	wrbyte	#0, _var01
29518                 | LR__3824
29518     09 FB 01 F6 | 	mov	result1, arg01
2951c                 | __system__strncat_ret
2951c     2D 00 64 FD | 	ret
29520                 | 
29520                 | __system__strncmp
29520     09 01 0A F6 | 	mov	_var01, arg01 wz
29524     14 00 90 5D |  if_ne	jmp	#LR__3830
29528     00 14 0E F2 | 	cmp	arg02, #0 wz
2952c     01 02 66 56 |  if_ne	neg	_var02, #1
29530     00 02 06 A6 |  if_e	mov	_var02, #0
29534     01 FB 01 F6 | 	mov	result1, _var02
29538     70 00 90 FD | 	jmp	#__system__strncmp_ret
2953c                 | LR__3830
2953c     00 14 0E F2 | 	cmp	arg02, #0 wz
29540     01 FA 05 A6 |  if_e	mov	result1, #1
29544     64 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29548     0B 05 02 F6 | 	mov	_var03, arg03
2954c     97 16 48 FB | 	callpa	#(@LR__3832-@LR__3831)>>2,fcache_load_ptr_
29550                 | LR__3831
29550     00 07 C2 FA | 	rdbyte	_var04, _var01
29554     0A 09 02 F6 | 	mov	_var05, arg02
29558     04 0B C2 FA | 	rdbyte	_var06, _var05
2955c     01 04 86 F1 | 	sub	_var03, #1
29560     00 04 56 F2 | 	cmps	_var03, #0 wc
29564     01 00 06 F1 | 	add	_var01, #1
29568     01 14 06 F1 | 	add	arg02, #1
2956c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
29570     08 00 90 2D |  if_nc_and_z	jmp	#LR__3833
29574     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
29578     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3831
2957c                 | LR__3832
2957c                 | LR__3833
2957c     00 04 56 F2 | 	cmps	_var03, #0 wc
29580     00 FA 05 C6 |  if_b	mov	result1, #0
29584     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
29588     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2958c     1C 00 90 2D |  if_nc_and_z	jmp	#__system__strncmp_ret
29590     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
29594     01 FA 65 26 |  if_nc_and_z	neg	result1, #1
29598     10 00 90 2D |  if_nc_and_z	jmp	#__system__strncmp_ret
2959c     00 0A 0E 32 |  if_ae	cmp	_var06, #0 wz
295a0     01 FA 05 26 |  if_nc_and_z	mov	result1, #1
295a4     03 FB 01 16 |  if_a	mov	result1, _var04
295a8     05 FB 81 11 |  if_a	sub	result1, _var06
295ac                 | __system__strncmp_ret
295ac     2D 00 64 FD | 	ret
295b0                 | 
295b0                 | __system____root_opendir
295b0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
295b4     64 FA 05 F1 | 	add	result1, #100
295b8     04 12 06 F1 | 	add	arg01, #4
295bc     09 FB 61 FC | 	wrlong	result1, arg01
295c0     00 FA 05 F6 | 	mov	result1, #0
295c4                 | __system____root_opendir_ret
295c4     2D 00 64 FD | 	ret
295c8                 | 
295c8                 | __system____root_readdir
295c8     03 4A 05 F6 | 	mov	COUNT_, #3
295cc     A8 00 A0 FD | 	call	#pushregs_
295d0     09 27 02 F6 | 	mov	local01, arg01
295d4     0A 29 02 F6 | 	mov	local02, arg02
295d8     04 26 06 F1 | 	add	local01, #4
295dc     13 2B 02 FB | 	rdlong	local03, local01
295e0     04 26 86 F1 | 	sub	local01, #4
295e4                 | LR__3840
295e4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
295e8     74 16 06 F1 | 	add	arg03, #116
295ec     0B 2B 0A F2 | 	cmp	local03, arg03 wz
295f0     01 FA 65 A6 |  if_e	neg	result1, #1
295f4     48 00 90 AD |  if_e	jmp	#LR__3841
295f8     15 17 0A FB | 	rdlong	arg03, local03 wz
295fc     04 2A 06 A1 |  if_e	add	local03, #4
29600     E0 FF 9F AD |  if_e	jmp	#LR__3840
29604     15 15 02 FB | 	rdlong	arg02, local03
29608     01 14 06 F1 | 	add	arg02, #1
2960c     14 13 02 F6 | 	mov	arg01, local02
29610     40 16 06 F6 | 	mov	arg03, #64
29614     50 FE BF FD | 	call	#__system__strncpy
29618     50 28 06 F1 | 	add	local02, #80
2961c     14 03 48 FC | 	wrbyte	#1, local02
29620     08 28 86 F1 | 	sub	local02, #8
29624     14 01 68 FC | 	wrlong	#0, local02
29628     04 28 06 F1 | 	add	local02, #4
2962c     14 01 68 FC | 	wrlong	#0, local02
29630     04 2A 06 F1 | 	add	local03, #4
29634     04 26 06 F1 | 	add	local01, #4
29638     13 2B 62 FC | 	wrlong	local03, local01
2963c     00 FA 05 F6 | 	mov	result1, #0
29640                 | LR__3841
29640     A7 F0 03 F6 | 	mov	ptra, fp
29644     B2 00 A0 FD | 	call	#popregs_
29648                 | __system____root_readdir_ret
29648     2D 00 64 FD | 	ret
2964c                 | 
2964c                 | __system____root_closedir
2964c     00 FA 05 F6 | 	mov	result1, #0
29650                 | __system____root_closedir_ret
29650     2D 00 64 FD | 	ret
29654                 | 
29654                 | __system____root_stat
29654     0A 01 02 F6 | 	mov	_var01, arg02
29658     00 13 02 F6 | 	mov	arg01, _var01
2965c     00 14 06 F6 | 	mov	arg02, #0
29660     34 16 06 F6 | 	mov	arg03, #52
29664     98 00 A0 FD | 	call	#\builtin_bytefill_
29668     08 00 06 F1 | 	add	_var01, #8
2966c     08 00 80 FF 
29670     00 FF 6B FC | 	wrlong	##4607, _var01
29674     00 FA 05 F6 | 	mov	result1, #0
29678                 | __system____root_stat_ret
29678     2D 00 64 FD | 	ret
2967c                 | 
2967c                 | __system___normalizeName
2967c     00 00 06 F6 | 	mov	_var01, #0
29680     09 03 02 F6 | 	mov	_var02, arg01
29684     01 05 02 F6 | 	mov	_var03, _var02
29688                 | LR__3850
29688     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2968c     54 01 90 AD |  if_e	jmp	#LR__3865
29690     00 00 0E F2 | 	cmp	_var01, #0 wz
29694     02 07 02 56 |  if_ne	mov	_var04, _var03
29698     01 04 06 51 |  if_ne	add	_var03, #1
2969c     2F 08 06 56 |  if_ne	mov	_var05, #47
296a0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
296a4     00 00 06 56 |  if_ne	mov	_var01, #0
296a8     01 07 C2 FA | 	rdbyte	_var04, _var02
296ac     2E 06 0E F2 | 	cmp	_var04, #46 wz
296b0     CC 00 90 5D |  if_ne	jmp	#LR__3859
296b4     01 02 06 F1 | 	add	_var02, #1
296b8     01 07 C2 FA | 	rdbyte	_var04, _var02
296bc     01 02 86 F1 | 	sub	_var02, #1
296c0     2F 06 0E F2 | 	cmp	_var04, #47 wz
296c4     01 02 06 51 |  if_ne	add	_var02, #1
296c8     01 0B C2 5A |  if_ne	rdbyte	_var06, _var02
296cc     01 02 86 51 |  if_ne	sub	_var02, #1
296d0     05 09 02 56 |  if_ne	mov	_var05, _var06
296d4     07 08 4E 57 |  if_ne	zerox	_var05, #7 wz
296d8     01 0D 02 A6 |  if_e	mov	_var07, _var02
296dc     01 0C 06 A1 |  if_e	add	_var07, #1
296e0     06 03 02 A6 |  if_e	mov	_var02, _var07
296e4     DC 00 90 AD |  if_e	jmp	#LR__3862
296e8     01 02 06 F1 | 	add	_var02, #1
296ec     01 0D C2 FA | 	rdbyte	_var07, _var02
296f0     01 02 86 F1 | 	sub	_var02, #1
296f4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
296f8     2E 06 0E F2 | 	cmp	_var04, #46 wz
296fc     80 00 90 5D |  if_ne	jmp	#LR__3858
29700     02 02 06 F1 | 	add	_var02, #2
29704     01 0D C2 FA | 	rdbyte	_var07, _var02
29708     02 02 86 F1 | 	sub	_var02, #2
2970c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
29710     2F 06 0E F2 | 	cmp	_var04, #47 wz
29714     02 02 06 51 |  if_ne	add	_var02, #2
29718     01 0B C2 5A |  if_ne	rdbyte	_var06, _var02
2971c     02 02 86 51 |  if_ne	sub	_var02, #2
29720     05 09 02 56 |  if_ne	mov	_var05, _var06
29724     07 08 4E 57 |  if_ne	zerox	_var05, #7 wz
29728     54 00 90 5D |  if_ne	jmp	#LR__3857
2972c     02 02 06 F1 | 	add	_var02, #2
29730     09 05 5A F2 | 	cmps	_var03, arg01 wcz
29734     40 00 90 ED |  if_be	jmp	#LR__3856
29738     02 0F 02 F6 | 	mov	_var08, _var03
2973c     01 0E 86 F1 | 	sub	_var08, #1
29740                 | LR__3851
29740     07 07 C2 FA | 	rdbyte	_var04, _var08
29744     2F 06 0E F2 | 	cmp	_var04, #47 wz
29748     0C 00 90 5D |  if_ne	jmp	#LR__3852
2974c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
29750     01 0E 86 11 |  if_a	sub	_var08, #1
29754     E8 FF 9F 1D |  if_a	jmp	#LR__3851
29758                 | LR__3852
29758     97 0C 48 FB | 	callpa	#(@LR__3854-@LR__3853)>>2,fcache_load_ptr_
2975c                 | LR__3853
2975c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
29760     10 00 90 ED |  if_be	jmp	#LR__3855
29764     07 07 C2 FA | 	rdbyte	_var04, _var08
29768     2F 06 0E F2 | 	cmp	_var04, #47 wz
2976c     01 0E 86 51 |  if_ne	sub	_var08, #1
29770     E8 FF 9F 5D |  if_ne	jmp	#LR__3853
29774                 | LR__3854
29774                 | LR__3855
29774     07 05 02 F6 | 	mov	_var03, _var08
29778                 | LR__3856
29778     01 00 06 F6 | 	mov	_var01, #1
2977c     44 00 90 FD | 	jmp	#LR__3862
29780                 | LR__3857
29780                 | LR__3858
29780                 | LR__3859
29780     97 18 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
29784                 | LR__3860
29784     01 07 CA FA | 	rdbyte	_var04, _var02 wz
29788     03 0D 02 56 |  if_ne	mov	_var07, _var04
2978c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
29790     02 07 02 56 |  if_ne	mov	_var04, _var03
29794     01 04 06 51 |  if_ne	add	_var03, #1
29798     01 09 02 56 |  if_ne	mov	_var05, _var02
2979c     01 0B 02 56 |  if_ne	mov	_var06, _var02
297a0     01 0A 06 51 |  if_ne	add	_var06, #1
297a4     04 11 C2 5A |  if_ne	rdbyte	_var09, _var05
297a8     05 03 02 56 |  if_ne	mov	_var02, _var06
297ac     03 11 42 5C |  if_ne	wrbyte	_var09, _var04
297b0     D0 FF 9F 5D |  if_ne	jmp	#LR__3860
297b4                 | LR__3861
297b4     01 07 C2 FA | 	rdbyte	_var04, _var02
297b8     2F 06 0E F2 | 	cmp	_var04, #47 wz
297bc     C8 FE 9F 5D |  if_ne	jmp	#LR__3850
297c0     01 00 06 F6 | 	mov	_var01, #1
297c4                 | LR__3862
297c4     97 0C 48 FB | 	callpa	#(@LR__3864-@LR__3863)>>2,fcache_load_ptr_
297c8                 | LR__3863
297c8     01 07 C2 FA | 	rdbyte	_var04, _var02
297cc     2F 06 0E F2 | 	cmp	_var04, #47 wz
297d0     01 0D 02 A6 |  if_e	mov	_var07, _var02
297d4     01 0C 06 A1 |  if_e	add	_var07, #1
297d8     06 03 02 A6 |  if_e	mov	_var02, _var07
297dc     E8 FF 9F AD |  if_e	jmp	#LR__3863
297e0                 | LR__3864
297e0     A4 FE 9F FD | 	jmp	#LR__3850
297e4                 | LR__3865
297e4     02 01 48 FC | 	wrbyte	#0, _var03
297e8                 | __system___normalizeName_ret
297e8     2D 00 64 FD | 	ret
297ec                 | 
297ec                 | __system___strrev
297ec     09 01 CA FA | 	rdbyte	_var01, arg01 wz
297f0     44 00 90 AD |  if_e	jmp	#__system___strrev_ret
297f4     09 03 02 F6 | 	mov	_var02, arg01
297f8     97 06 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
297fc                 | LR__3870
297fc     01 01 CA FA | 	rdbyte	_var01, _var02 wz
29800     01 02 06 51 |  if_ne	add	_var02, #1
29804     F4 FF 9F 5D |  if_ne	jmp	#LR__3870
29808                 | LR__3871
29808     01 02 86 F1 | 	sub	_var02, #1
2980c     97 14 48 FB | 	callpa	#(@LR__3873-@LR__3872)>>2,fcache_load_ptr_
29810                 | LR__3872
29810     09 03 5A F2 | 	cmps	_var02, arg01 wcz
29814     09 05 C2 1A |  if_a	rdbyte	_var03, arg01
29818     09 01 02 16 |  if_a	mov	_var01, arg01
2981c     01 07 C2 1A |  if_a	rdbyte	_var04, _var02
29820     01 12 06 11 |  if_a	add	arg01, #1
29824     00 07 42 1C |  if_a	wrbyte	_var04, _var01
29828     01 01 02 16 |  if_a	mov	_var01, _var02
2982c     01 02 86 11 |  if_a	sub	_var02, #1
29830     00 05 42 1C |  if_a	wrbyte	_var03, _var01
29834     D8 FF 9F 1D |  if_a	jmp	#LR__3872
29838                 | LR__3873
29838                 | __system___strrev_ret
29838     2D 00 64 FD | 	ret
2983c                 | 
2983c                 | __system___fmtpad
2983c     06 4A 05 F6 | 	mov	COUNT_, #6
29840     A8 00 A0 FD | 	call	#pushregs_
29844     09 27 02 F6 | 	mov	local01, arg01
29848     0A 29 02 F6 | 	mov	local02, arg02
2984c     0B 2B 02 F6 | 	mov	local03, arg03
29850     14 13 EA F8 | 	getbyte	arg01, local02, #1
29854     16 28 46 F0 | 	shr	local02, #22
29858     03 28 0E F5 | 	and	local02, #3 wz
2985c     00 2C 06 F6 | 	mov	local04, #0
29860     01 28 06 A6 |  if_e	mov	local02, #1
29864     0C 29 CA F7 | 	test	local02, arg04 wz
29868     00 FA 05 A6 |  if_e	mov	result1, #0
2986c     88 00 90 AD |  if_e	jmp	#LR__3883
29870     09 2B C2 F2 | 	subr	local03, arg01
29874     01 2A 56 F2 | 	cmps	local03, #1 wc
29878     00 FA 05 C6 |  if_b	mov	result1, #0
2987c     78 00 90 CD |  if_b	jmp	#LR__3883
29880     03 28 0E F2 | 	cmp	local02, #3 wz
29884     18 00 90 5D |  if_ne	jmp	#LR__3880
29888     01 18 0E F2 | 	cmp	arg04, #1 wz
2988c     6E 28 62 FD | 	wrz	local02
29890     14 2B 02 F1 | 	add	local03, local02
29894     15 2B 52 F6 | 	abs	local03, local03 wc
29898     01 2A 46 F0 | 	shr	local03, #1
2989c     15 2B 82 F6 | 	negc	local03, local03
298a0                 | LR__3880
298a0     01 2A 56 F2 | 	cmps	local03, #1 wc
298a4     4C 00 90 CD |  if_b	jmp	#LR__3882
298a8     15 2F 02 F6 | 	mov	local05, local03
298ac                 | LR__3881
298ac     13 29 02 F6 | 	mov	local02, local01
298b0     13 31 02 F6 | 	mov	local06, local01
298b4     13 28 46 F7 | 	zerox	local02, #19
298b8     14 30 46 F0 | 	shr	local06, #20
298bc     02 30 66 F0 | 	shl	local06, #2
298c0     ED 30 02 F1 | 	add	local06, __methods__
298c4     18 31 02 FB | 	rdlong	local06, local06
298c8     20 12 06 F6 | 	mov	arg01, #32
298cc     F2 2A 02 F6 | 	mov	local03, objptr
298d0     14 E5 01 F6 | 	mov	objptr, local02
298d4     2D 30 62 FD | 	call	local06
298d8     15 E5 01 F6 | 	mov	objptr, local03
298dc     FD 30 02 F6 | 	mov	local06, result1
298e0     00 30 56 F2 | 	cmps	local06, #0 wc
298e4     18 FB 01 C6 |  if_b	mov	result1, local06
298e8     0C 00 90 CD |  if_b	jmp	#LR__3883
298ec     18 2D 02 F1 | 	add	local04, local06
298f0     EE 2F 6E FB | 	djnz	local05, #LR__3881
298f4                 | LR__3882
298f4     16 FB 01 F6 | 	mov	result1, local04
298f8                 | LR__3883
298f8     A7 F0 03 F6 | 	mov	ptra, fp
298fc     B2 00 A0 FD | 	call	#popregs_
29900                 | __system___fmtpad_ret
29900     2D 00 64 FD | 	ret
29904                 | 
29904                 | __system___uitoa
29904     04 4A 05 F6 | 	mov	COUNT_, #4
29908     A8 00 A0 FD | 	call	#pushregs_
2990c     09 27 02 F6 | 	mov	local01, arg01
29910     00 1A 4E F2 | 	cmps	arg05, #0 wz
29914     13 1B 02 F6 | 	mov	arg05, local01
29918     00 28 06 F6 | 	mov	local02, #0
2991c     37 2A 06 56 |  if_ne	mov	local03, #55
29920     57 2A 06 A6 |  if_e	mov	local03, #87
29924                 | LR__3890
29924     0B 15 12 FD | 	qdiv	arg02, arg03
29928     19 2C 62 FD | 	getqy	local04
2992c     0B 15 12 FD | 	qdiv	arg02, arg03
29930     0A 2C 16 F2 | 	cmp	local04, #10 wc
29934     30 2C 06 C1 |  if_b	add	local04, #48
29938     15 2D 02 31 |  if_ae	add	local04, local03
2993c     0D 2D 42 FC | 	wrbyte	local04, arg05
29940     01 1A 06 F1 | 	add	arg05, #1
29944     01 28 06 F1 | 	add	local02, #1
29948     18 14 62 FD | 	getqx	arg02
2994c     00 14 0E F2 | 	cmp	arg02, #0 wz
29950     D0 FF 9F 5D |  if_ne	jmp	#LR__3890
29954     0C 29 12 F2 | 	cmp	local02, arg04 wc
29958     C8 FF 9F CD |  if_b	jmp	#LR__3890
2995c     0D 01 48 FC | 	wrbyte	#0, arg05
29960     13 13 02 F6 | 	mov	arg01, local01
29964     84 FE BF FD | 	call	#__system___strrev
29968     14 FB 01 F6 | 	mov	result1, local02
2996c     A7 F0 03 F6 | 	mov	ptra, fp
29970     B2 00 A0 FD | 	call	#popregs_
29974                 | __system___uitoa_ret
29974     2D 00 64 FD | 	ret
29978                 | 
29978                 | __system__disassemble_0582
29978     10 4A 05 F6 | 	mov	COUNT_, #16
2997c     A8 00 A0 FD | 	call	#pushregs_
29980     09 27 02 F6 | 	mov	local01, arg01
29984     0A 29 02 F6 | 	mov	local02, arg02
29988     0B 2B 02 F6 | 	mov	local03, arg03
2998c     0C 2D 02 F6 | 	mov	local04, arg04
29990     0D 2F 02 F6 | 	mov	local05, arg05
29994     17 13 52 F6 | 	abs	arg01, local05 wc
29998     1F 30 C6 C9 |  if_b	decod	local06, #31
2999c     00 30 06 36 |  if_ae	mov	local06, #0
299a0     D0 D1 BF FD | 	call	#__system___float_fromuns
299a4     18 FB 61 F5 | 	xor	result1, local06
299a8     FD 32 02 F6 | 	mov	local07, result1
299ac     00 34 06 F6 | 	mov	local08, #0
299b0     13 13 02 F6 | 	mov	arg01, local01
299b4     00 14 06 F6 | 	mov	arg02, #0
299b8     01 16 06 F6 | 	mov	arg03, #1
299bc     B8 D9 BF FD | 	call	#__system___float_cmp
299c0     00 FA 0D F2 | 	cmp	result1, #0 wz
299c4     00 36 06 A6 |  if_e	mov	local09, #0
299c8     14 01 68 AC |  if_e	wrlong	#0, local02
299cc     15 37 62 AC |  if_e	wrlong	local09, local03
299d0     84 01 90 AD |  if_e	jmp	#LR__3910
299d4     13 13 02 F6 | 	mov	arg01, local01
299d8     74 DE BF FD | 	call	#__system____builtin_ilogb
299dc     FD 38 02 F6 | 	mov	local10, result1
299e0     0A 2E 0E F2 | 	cmp	local05, #10 wz
299e4     1C 37 02 A6 |  if_e	mov	local09, local10
299e8     01 36 66 A0 |  if_e	shl	local09, #1
299ec     1C 37 02 A1 |  if_e	add	local09, local10
299f0     1B 39 52 A6 |  if_e	abs	local10, local09 wc
299f4     0A 38 16 AD |  if_e	qdiv	local10, #10
299f8     09 3A 06 A6 |  if_e	mov	local11, #9
299fc     18 3A 06 56 |  if_ne	mov	local11, #24
29a00     18 38 62 AD |  if_e	getqx	local10
29a04     1C 39 82 A6 |  if_e	negc	local10, local10
29a08                 | LR__3900
29a08     08 34 56 F2 | 	cmps	local08, #8 wc
29a0c     01 34 06 F1 | 	add	local08, #1
29a10     60 00 90 3D |  if_ae	jmp	#LR__3901
29a14     00 C0 1F FF 
29a18     00 12 06 F6 | 	mov	arg01, ##1065353216
29a1c     19 15 02 F6 | 	mov	arg02, local07
29a20     1C 17 02 F6 | 	mov	arg03, local10
29a24     28 E4 BF FD | 	call	#__system___float_pow_n
29a28     FD 14 02 F6 | 	mov	arg02, result1
29a2c     13 13 02 F6 | 	mov	arg01, local01
29a30     34 D7 BF FD | 	call	#__system___float_div
29a34     FD 3C 02 F6 | 	mov	local12, result1
29a38     1E 13 02 F6 | 	mov	arg01, local12
29a3c     00 C0 1F FF 
29a40     00 14 06 F6 | 	mov	arg02, ##1065353216
29a44     01 16 06 F6 | 	mov	arg03, #1
29a48     2C D9 BF FD | 	call	#__system___float_cmp
29a4c     00 FA 55 F2 | 	cmps	result1, #0 wc
29a50     01 38 86 C1 |  if_b	sub	local10, #1
29a54     B0 FF 9F CD |  if_b	jmp	#LR__3900
29a58     19 15 02 F6 | 	mov	arg02, local07
29a5c     1E 13 02 F6 | 	mov	arg01, local12
29a60     01 16 66 F6 | 	neg	arg03, #1
29a64     10 D9 BF FD | 	call	#__system___float_cmp
29a68     00 FA 55 F2 | 	cmps	result1, #0 wc
29a6c     01 38 06 31 |  if_ae	add	local10, #1
29a70     94 FF 9F 3D |  if_ae	jmp	#LR__3900
29a74                 | LR__3901
29a74     1E 13 02 F6 | 	mov	arg01, local12
29a78     D4 DD BF FD | 	call	#__system____builtin_ilogb
29a7c     FD 3E 02 F6 | 	mov	local13, result1
29a80     1E 41 02 F6 | 	mov	local14, local12
29a84     17 41 06 F4 | 	bitl	local14, #279
29a88     17 40 26 F4 | 	bith	local14, #23
29a8c     1F 41 62 F0 | 	shl	local14, local13
29a90     02 2E 0E F2 | 	cmp	local05, #2 wz
29a94     02 2C 66 A0 |  if_e	shl	local04, #2
29a98     00 42 06 F6 | 	mov	local15, #0
29a9c     00 2C 56 F2 | 	cmps	local04, #0 wc
29aa0     10 00 90 3D |  if_ae	jmp	#LR__3902
29aa4     1C 2D C2 F2 | 	subr	local04, local10
29aa8     00 2C 56 F2 | 	cmps	local04, #0 wc
29aac     A0 00 90 CD |  if_b	jmp	#LR__3909
29ab0     04 00 90 FD | 	jmp	#LR__3903
29ab4                 | LR__3902
29ab4     01 2C 06 F1 | 	add	local04, #1
29ab8                 | LR__3903
29ab8     1D 2D 7A F3 | 	fles	local04, local11 wcz
29abc     01 44 06 F6 | 	mov	local16, #1
29ac0     97 22 48 FB | 	callpa	#(@LR__3905-@LR__3904)>>2,fcache_load_ptr_
29ac4                 | LR__3904
29ac4     00 40 00 FF 
29ac8     00 42 16 F2 | 	cmp	local15, ##8388608 wc
29acc     38 00 90 3D |  if_ae	jmp	#LR__3906
29ad0     01 2C 56 F2 | 	cmps	local04, #1 wc
29ad4     01 2C 86 F1 | 	sub	local04, #1
29ad8     2C 00 90 CD |  if_b	jmp	#LR__3906
29adc     17 43 02 FD | 	qmul	local15, local05
29ae0     20 3F 02 F6 | 	mov	local13, local14
29ae4     17 3E 46 F0 | 	shr	local13, #23
29ae8     17 41 06 F4 | 	bitl	local14, #279
29aec     18 42 62 FD | 	getqx	local15
29af0     17 45 02 FD | 	qmul	local16, local05
29af4     18 44 62 FD | 	getqx	local16
29af8     17 41 02 FD | 	qmul	local14, local05
29afc     1F 43 02 F1 | 	add	local15, local13
29b00     18 40 62 FD | 	getqx	local14
29b04     BC FF 9F FD | 	jmp	#LR__3904
29b08                 | LR__3905
29b08                 | LR__3906
29b08     17 37 02 F6 | 	mov	local09, local05
29b0c     17 36 66 F0 | 	shl	local09, #23
29b10     1B 3F 52 F6 | 	abs	local13, local09 wc
29b14     01 3E 46 F0 | 	shr	local13, #1
29b18     1F 3F 82 F6 | 	negc	local13, local13
29b1c     1F 41 1A F2 | 	cmp	local14, local13 wcz
29b20     20 00 90 1D |  if_a	jmp	#LR__3907
29b24     17 2E 66 F0 | 	shl	local05, #23
29b28     17 3F 52 F6 | 	abs	local13, local05 wc
29b2c     01 3E 46 F0 | 	shr	local13, #1
29b30     1F 3F 82 F6 | 	negc	local13, local13
29b34     1F 41 0A F2 | 	cmp	local14, local13 wz
29b38     14 00 90 5D |  if_ne	jmp	#LR__3908
29b3c     01 42 CE F7 | 	test	local15, #1 wz
29b40     0C 00 90 AD |  if_e	jmp	#LR__3908
29b44                 | LR__3907
29b44     01 42 06 F1 | 	add	local15, #1
29b48     22 43 0A F2 | 	cmp	local15, local16 wz
29b4c     01 38 06 A1 |  if_e	add	local10, #1
29b50                 | LR__3908
29b50                 | LR__3909
29b50     14 43 62 FC | 	wrlong	local15, local02
29b54     15 39 62 FC | 	wrlong	local10, local03
29b58                 | LR__3910
29b58     A7 F0 03 F6 | 	mov	ptra, fp
29b5c     B2 00 A0 FD | 	call	#popregs_
29b60                 | __system__disassemble_0582_ret
29b60     2D 00 64 FD | 	ret
29b64                 | 
29b64                 | __system__emitsign_0584
29b64     00 FA 05 F6 | 	mov	result1, #0
29b68     00 14 0E F2 | 	cmp	arg02, #0 wz
29b6c     09 01 02 56 |  if_ne	mov	_var01, arg01
29b70     01 12 06 51 |  if_ne	add	arg01, #1
29b74     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
29b78     01 FA 05 56 |  if_ne	mov	result1, #1
29b7c     00 16 0E F2 | 	cmp	arg03, #0 wz
29b80     09 61 48 5C |  if_ne	wrbyte	#48, arg01
29b84     01 12 06 51 |  if_ne	add	arg01, #1
29b88     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
29b8c     02 FA 05 51 |  if_ne	add	result1, #2
29b90                 | __system__emitsign_0584_ret
29b90     2D 00 64 FD | 	ret
29b94                 | 
29b94                 | __system___getiolock_0622
29b94     01 4A 05 F6 | 	mov	COUNT_, #1
29b98     A8 00 A0 FD | 	call	#pushregs_
29b9c     A4 F8 BF FD | 	call	#__system____getftab
29ba0     FD 26 0A F6 | 	mov	local01, result1 wz
29ba4     10 00 90 AD |  if_e	jmp	#LR__3920
29ba8     08 26 06 F1 | 	add	local01, #8
29bac     13 FB 09 FB | 	rdlong	result1, local01 wz
29bb0     08 26 86 F1 | 	sub	local01, #8
29bb4     10 00 90 5D |  if_ne	jmp	#LR__3921
29bb8                 | LR__3920
29bb8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
29bbc     01 00 00 FF 
29bc0     DC FA 05 F1 | 	add	result1, ##732
29bc4     08 00 90 FD | 	jmp	#LR__3922
29bc8                 | LR__3921
29bc8     0C 26 06 F1 | 	add	local01, #12
29bcc     13 FB 01 F6 | 	mov	result1, local01
29bd0                 | LR__3922
29bd0     A7 F0 03 F6 | 	mov	ptra, fp
29bd4     B2 00 A0 FD | 	call	#popregs_
29bd8                 | __system___getiolock_0622_ret
29bd8     2D 00 64 FD | 	ret
29bdc                 | 
29bdc                 | __system___gettxfunc
29bdc     01 4A 05 F6 | 	mov	COUNT_, #1
29be0     A8 00 A0 FD | 	call	#pushregs_
29be4     5C F8 BF FD | 	call	#__system____getftab
29be8     FD 26 0A F6 | 	mov	local01, result1 wz
29bec     10 00 90 AD |  if_e	jmp	#LR__3930
29bf0     08 26 06 F1 | 	add	local01, #8
29bf4     13 15 0A FB | 	rdlong	arg02, local01 wz
29bf8     08 26 86 F1 | 	sub	local01, #8
29bfc     08 00 90 5D |  if_ne	jmp	#LR__3931
29c00                 | LR__3930
29c00     00 FA 05 F6 | 	mov	result1, #0
29c04     0C 00 90 FD | 	jmp	#LR__3932
29c08                 | LR__3931
29c08     00 88 05 FF 
29c0c     00 26 46 F5 | 	or	local01, ##185597952
29c10     13 FB 01 F6 | 	mov	result1, local01
29c14                 | LR__3932
29c14     A7 F0 03 F6 | 	mov	ptra, fp
29c18     B2 00 A0 FD | 	call	#popregs_
29c1c                 | __system___gettxfunc_ret
29c1c     2D 00 64 FD | 	ret
29c20                 | 
29c20                 | __system___getrxfunc
29c20     01 4A 05 F6 | 	mov	COUNT_, #1
29c24     A8 00 A0 FD | 	call	#pushregs_
29c28     18 F8 BF FD | 	call	#__system____getftab
29c2c     FD 26 0A F6 | 	mov	local01, result1 wz
29c30     10 00 90 AD |  if_e	jmp	#LR__3940
29c34     08 26 06 F1 | 	add	local01, #8
29c38     13 15 0A FB | 	rdlong	arg02, local01 wz
29c3c     08 26 86 F1 | 	sub	local01, #8
29c40     08 00 90 5D |  if_ne	jmp	#LR__3941
29c44                 | LR__3940
29c44     00 FA 05 F6 | 	mov	result1, #0
29c48     0C 00 90 FD | 	jmp	#LR__3942
29c4c                 | LR__3941
29c4c     00 90 05 FF 
29c50     00 26 46 F5 | 	or	local01, ##186646528
29c54     13 FB 01 F6 | 	mov	result1, local01
29c58                 | LR__3942
29c58     A7 F0 03 F6 | 	mov	ptra, fp
29c5c     B2 00 A0 FD | 	call	#popregs_
29c60                 | __system___getrxfunc_ret
29c60     2D 00 64 FD | 	ret
29c64                 | 
29c64                 | __system____ScanForChar
29c64     09 01 02 F6 | 	mov	_var01, arg01
29c68     09 03 02 F6 | 	mov	_var02, arg01
29c6c     97 06 48 FB | 	callpa	#(@LR__3951-@LR__3950)>>2,fcache_load_ptr_
29c70                 | LR__3950
29c70     01 FB C9 FA | 	rdbyte	result1, _var02 wz
29c74     01 02 06 51 |  if_ne	add	_var02, #1
29c78     F4 FF 9F 5D |  if_ne	jmp	#LR__3950
29c7c                 | LR__3951
29c7c     09 03 82 F1 | 	sub	_var02, arg01
29c80     01 FB 01 F6 | 	mov	result1, _var02
29c84     FD 12 0A F6 | 	mov	arg01, result1 wz
29c88     00 FA 05 A6 |  if_e	mov	result1, #0
29c8c     B8 00 90 AD |  if_e	jmp	#LR__3958
29c90     0A 05 02 F6 | 	mov	_var03, arg02
29c94     07 04 4E F7 | 	zerox	_var03, #7 wz
29c98     00 FA 05 A6 |  if_e	mov	result1, #0
29c9c     A8 00 90 AD |  if_e	jmp	#LR__3958
29ca0     01 16 16 F2 | 	cmp	arg03, #1 wc
29ca4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
29ca8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
29cac     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
29cb0     94 00 90 4D |  if_c_and_nz	jmp	#LR__3958
29cb4     09 17 1A F2 | 	cmp	arg03, arg01 wcz
29cb8     10 00 90 ED |  if_be	jmp	#LR__3952
29cbc     00 18 0E F2 | 	cmp	arg04, #0 wz
29cc0     00 FA 05 A6 |  if_e	mov	result1, #0
29cc4     80 00 90 AD |  if_e	jmp	#LR__3958
29cc8     09 17 02 F6 | 	mov	arg03, arg01
29ccc                 | LR__3952
29ccc     01 16 86 F1 | 	sub	arg03, #1
29cd0     00 18 0E F2 | 	cmp	arg04, #0 wz
29cd4     38 00 90 5D |  if_ne	jmp	#LR__3954
29cd8     0B 07 02 F6 | 	mov	_var04, arg03
29cdc     09 09 02 F6 | 	mov	_var05, arg01
29ce0                 | LR__3953
29ce0     04 07 12 F2 | 	cmp	_var04, _var05 wc
29ce4     5C 00 90 3D |  if_ae	jmp	#LR__3957
29ce8     03 05 02 F6 | 	mov	_var03, _var04
29cec     00 05 02 F1 | 	add	_var03, _var01
29cf0     02 05 C2 FA | 	rdbyte	_var03, _var03
29cf4     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
29cf8     0C 05 0A F2 | 	cmp	_var03, arg04 wz
29cfc     01 06 06 A1 |  if_e	add	_var04, #1
29d00     03 FB 01 A6 |  if_e	mov	result1, _var04
29d04     40 00 90 AD |  if_e	jmp	#LR__3958
29d08     01 06 06 F1 | 	add	_var04, #1
29d0c     D0 FF 9F FD | 	jmp	#LR__3953
29d10                 | LR__3954
29d10     0B 07 02 F6 | 	mov	_var04, arg03
29d14                 | LR__3955
29d14     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
29d18     28 00 90 1D |  if_a	jmp	#LR__3956
29d1c     03 09 02 F6 | 	mov	_var05, _var04
29d20     00 09 02 F1 | 	add	_var05, _var01
29d24     04 05 C2 FA | 	rdbyte	_var03, _var05
29d28     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
29d2c     04 05 0A F2 | 	cmp	_var03, _var05 wz
29d30     01 06 06 A1 |  if_e	add	_var04, #1
29d34     03 FB 01 A6 |  if_e	mov	result1, _var04
29d38     0C 00 90 AD |  if_e	jmp	#LR__3958
29d3c     01 06 86 F1 | 	sub	_var04, #1
29d40     D0 FF 9F FD | 	jmp	#LR__3955
29d44                 | LR__3956
29d44                 | LR__3957
29d44     00 FA 05 F6 | 	mov	result1, #0
29d48                 | LR__3958
29d48                 | __system____ScanForChar_ret
29d48     2D 00 64 FD | 	ret
29d4c                 | 
29d4c                 | __system___basic_dir
29d4c     06 4A 05 F6 | 	mov	COUNT_, #6
29d50     A8 00 A0 FD | 	call	#pushregs_
29d54     50 F0 07 F1 | 	add	ptra, #80
29d58     09 27 0A F6 | 	mov	local01, arg01 wz
29d5c     0A 29 02 F6 | 	mov	local02, arg02
29d60     13 2B CA 5A |  if_ne	rdbyte	local03, local01 wz
29d64     5C 00 90 AD |  if_e	jmp	#LR__3960
29d68     03 00 00 FF 
29d6c     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29d70     F3 2A 0A FB | 	rdlong	local03, ptr___system__dat__ wz
29d74     03 00 00 FF 
29d78     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29d7c     03 00 00 5F 
29d80     34 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1844
29d84     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
29d88     03 00 00 5F 
29d8c     34 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1844
29d90     B4 EA BF 5D |  if_ne	call	#__system__closedir
29d94     8D 01 00 FF 
29d98     88 13 06 F6 | 	mov	arg01, ##@LR__5078
29d9c     C0 E9 BF FD | 	call	#__system__opendir
29da0     03 00 00 FF 
29da4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29da8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
29dac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29db0     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
29db4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29db8     F3 26 62 FC | 	wrlong	local01, ptr___system__dat__
29dbc     03 00 00 FF 
29dc0     3C E7 85 F1 | 	sub	ptr___system__dat__, ##1852
29dc4                 | LR__3960
29dc4     03 00 00 FF 
29dc8     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29dcc     F3 2A 0A FB | 	rdlong	local03, ptr___system__dat__ wz
29dd0     03 00 00 FF 
29dd4     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29dd8     8D 01 00 AF 
29ddc     8A FB 05 A6 |  if_e	mov	result1, ##@LR__5079
29de0     7C 01 90 AD |  if_e	jmp	#LR__3968
29de4                 | LR__3961
29de4     03 00 00 FF 
29de8     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29dec     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
29df0     03 00 00 FF 
29df4     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29df8     C0 EA BF FD | 	call	#__system__readdir
29dfc     FD 2C 0A F6 | 	mov	local04, result1 wz
29e00     38 00 90 5D |  if_ne	jmp	#LR__3962
29e04     03 00 00 FF 
29e08     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29e0c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
29e10     03 00 00 FF 
29e14     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29e18     2C EA BF FD | 	call	#__system__closedir
29e1c     03 00 00 FF 
29e20     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29e24     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
29e28     03 00 00 FF 
29e2c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29e30     8D 01 00 FF 
29e34     8C FB 05 F6 | 	mov	result1, ##@LR__5080
29e38     24 01 90 FD | 	jmp	#LR__3968
29e3c                 | LR__3962
29e3c     03 00 00 FF 
29e40     3C E7 05 F1 | 	add	ptr___system__dat__, ##1852
29e44     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
29e48     03 00 00 FF 
29e4c     3C E7 85 F1 | 	sub	ptr___system__dat__, ##1852
29e50     16 13 02 F6 | 	mov	arg01, local04
29e54     34 06 B0 FD | 	call	#__system___pat_match
29e58     00 FA 0D F2 | 	cmp	result1, #0 wz
29e5c     84 FF 9F AD |  if_e	jmp	#LR__3961
29e60     03 00 00 FF 
29e64     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
29e68     F3 2A 0A FB | 	rdlong	local03, ptr___system__dat__ wz
29e6c     03 00 00 FF 
29e70     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
29e74     B0 00 90 AD |  if_e	jmp	#LR__3965
29e78     A7 14 02 F6 | 	mov	arg02, fp
29e7c     10 14 06 F1 | 	add	arg02, #16
29e80     16 13 02 F6 | 	mov	arg01, local04
29e84     44 F2 BF FD | 	call	#__system__stat
29e88     00 FA 4D F2 | 	cmps	result1, #0 wz
29e8c     8D 01 00 5F 
29e90     8E FB 05 56 |  if_ne	mov	result1, ##@LR__5081
29e94     C8 00 90 5D |  if_ne	jmp	#LR__3968
29e98     18 4E 05 F1 | 	add	fp, #24
29e9c     A7 2E 02 FB | 	rdlong	local05, fp
29ea0     18 4E 85 F1 | 	sub	fp, #24
29ea4     78 00 00 FF 
29ea8     00 2E 06 F5 | 	and	local05, ##61440
29eac     16 2B C2 FA | 	rdbyte	local03, local04
29eb0     2E 2A 0E F2 | 	cmp	local03, #46 wz
29eb4     02 28 06 A6 |  if_e	mov	local02, #2
29eb8     00 28 06 56 |  if_ne	mov	local02, #0
29ebc     08 00 00 FF 
29ec0     00 2E 0E F2 | 	cmp	local05, ##4096 wz
29ec4     10 28 46 A5 |  if_e	or	local02, #16
29ec8     40 00 90 AD |  if_e	jmp	#LR__3964
29ecc     10 00 00 FF 
29ed0     00 2E 0E F2 | 	cmp	local05, ##8192 wz
29ed4     18 00 00 5F 
29ed8     00 2E 0E 52 |  if_ne	cmp	local05, ##12288 wz
29edc     20 00 00 5F 
29ee0     00 2E 0E 52 |  if_ne	cmp	local05, ##16384 wz
29ee4     04 28 46 A5 |  if_e	or	local02, #4
29ee8     20 00 90 AD |  if_e	jmp	#LR__3963
29eec     18 4E 05 F1 | 	add	fp, #24
29ef0     A7 2A 02 FB | 	rdlong	local03, fp
29ef4     18 4E 85 F1 | 	sub	fp, #24
29ef8     92 2A CE F7 | 	test	local03, #146 wz
29efc     01 28 46 A5 |  if_e	or	local02, #1
29f00     08 00 00 5F 
29f04     00 2E 0E 52 |  if_ne	cmp	local05, ##4096 wz
29f08     20 28 46 55 |  if_ne	or	local02, #32
29f0c                 | LR__3963
29f0c                 | LR__3964
29f0c     03 00 00 FF 
29f10     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
29f14     F3 2E 02 FB | 	rdlong	local05, ptr___system__dat__
29f18     03 00 00 FF 
29f1c     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
29f20     17 29 CA F7 | 	test	local02, local05 wz
29f24     BC FE 9F AD |  if_e	jmp	#LR__3961
29f28                 | LR__3965
29f28     16 13 02 F6 | 	mov	arg01, local04
29f2c     09 31 02 F6 | 	mov	local06, arg01
29f30     97 06 48 FB | 	callpa	#(@LR__3967-@LR__3966)>>2,fcache_load_ptr_
29f34                 | LR__3966
29f34     18 FB C9 FA | 	rdbyte	result1, local06 wz
29f38     01 30 06 51 |  if_ne	add	local06, #1
29f3c     F4 FF 9F 5D |  if_ne	jmp	#LR__3966
29f40                 | LR__3967
29f40     18 13 C2 F2 | 	subr	arg01, local06
29f44     01 12 06 F1 | 	add	arg01, #1
29f48     20 E2 BF FD | 	call	#__system___gc_alloc_managed
29f4c     FD 2E 0A F6 | 	mov	local05, result1 wz
29f50     17 13 02 56 |  if_ne	mov	arg01, local05
29f54     16 15 02 56 |  if_ne	mov	arg02, local04
29f58     00 B1 BF 5D |  if_ne	call	#__system____builtin_strcpy
29f5c     17 FB 01 F6 | 	mov	result1, local05
29f60                 | LR__3968
29f60     A7 F0 03 F6 | 	mov	ptra, fp
29f64     B2 00 A0 FD | 	call	#popregs_
29f68                 | __system___basic_dir_ret
29f68     2D 00 64 FD | 	ret
29f6c                 | 
29f6c                 | __system__pack_0698
29f6c     09 01 02 F6 | 	mov	_var01, arg01
29f70     7F 16 06 F1 | 	add	arg03, #127
29f74     04 18 CE F7 | 	test	arg04, #4 wz
29f78     10 00 90 AD |  if_e	jmp	#LR__3970
29f7c     00 00 0E F2 | 	cmp	_var01, #0 wz
29f80     16 00 C6 A9 |  if_e	decod	_var01, #22
29f84     F7 00 26 F4 | 	bith	_var01, #247
29f88     B4 00 90 FD | 	jmp	#LR__3979
29f8c                 | LR__3970
29f8c     02 18 CE F7 | 	test	arg04, #2 wz
29f90     00 C0 3F 5F 
29f94     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
29f98     00 14 06 56 |  if_ne	mov	arg02, #0
29f9c     A0 00 90 5D |  if_ne	jmp	#LR__3978
29fa0     08 18 CE F7 | 	test	arg04, #8 wz
29fa4     00 00 06 56 |  if_ne	mov	_var01, #0
29fa8     94 00 90 5D |  if_ne	jmp	#LR__3977
29fac     FF 16 56 F2 | 	cmps	arg03, #255 wc
29fb0     00 C0 3F 3F 
29fb4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
29fb8     00 14 06 36 |  if_ae	mov	arg02, #0
29fbc     80 00 90 3D |  if_ae	jmp	#LR__3976
29fc0     01 16 56 F2 | 	cmps	arg03, #1 wc
29fc4     6C 00 90 3D |  if_ae	jmp	#LR__3974
29fc8     01 14 46 F0 | 	shr	arg02, #1
29fcc     00 03 02 F6 | 	mov	_var02, _var01
29fd0     01 02 06 F5 | 	and	_var02, #1
29fd4     1F 02 66 F0 | 	shl	_var02, #31
29fd8     01 15 42 F5 | 	or	arg02, _var02
29fdc     01 00 46 F0 | 	shr	_var01, #1
29fe0     97 1E 48 FB | 	callpa	#(@LR__3972-@LR__3971)>>2,fcache_load_ptr_
29fe4                 | LR__3971
29fe4     00 16 56 F2 | 	cmps	arg03, #0 wc
29fe8     34 00 90 3D |  if_ae	jmp	#LR__3973
29fec     00 00 0E F2 | 	cmp	_var01, #0 wz
29ff0     2C 00 90 AD |  if_e	jmp	#LR__3973
29ff4     0A 13 02 F6 | 	mov	arg01, arg02
29ff8     01 12 06 F5 | 	and	arg01, #1
29ffc     01 16 06 F1 | 	add	arg03, #1
2a000     01 14 46 F0 | 	shr	arg02, #1
2a004     00 03 02 F6 | 	mov	_var02, _var01
2a008     01 02 06 F5 | 	and	_var02, #1
2a00c     1F 02 66 F0 | 	shl	_var02, #31
2a010     01 15 42 F5 | 	or	arg02, _var02
2a014     09 15 42 F5 | 	or	arg02, arg01
2a018     01 00 46 F0 | 	shr	_var01, #1
2a01c     C4 FF 9F FD | 	jmp	#LR__3971
2a020                 | LR__3972
2a020                 | LR__3973
2a020     00 16 56 F2 | 	cmps	arg03, #0 wc
2a024     18 00 90 3D |  if_ae	jmp	#LR__3975
2a028     00 14 0E F2 | 	cmp	arg02, #0 wz
2a02c     6F 14 62 FD | 	wrnz	arg02
2a030     0C 00 90 FD | 	jmp	#LR__3975
2a034                 | LR__3974
2a034     17 01 06 F4 | 	bitl	_var01, #279
2a038     17 16 66 F0 | 	shl	arg03, #23
2a03c     0B 01 42 F5 | 	or	_var01, arg03
2a040                 | LR__3975
2a040                 | LR__3976
2a040                 | LR__3977
2a040                 | LR__3978
2a040                 | LR__3979
2a040     01 00 CE F7 | 	test	_var01, #1 wz
2a044     01 14 46 55 |  if_ne	or	arg02, #1
2a048     0A 17 02 F6 | 	mov	arg03, arg02
2a04c     00 02 06 F6 | 	mov	_var02, #0
2a050     FF FF 3F FF 
2a054     FF 15 06 F1 | 	add	arg02, ##2147483647
2a058     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2a05c     01 02 06 C6 |  if_b	mov	_var02, #1
2a060     01 01 02 F1 | 	add	_var01, _var02
2a064     01 18 CE F7 | 	test	arg04, #1 wz
2a068     1F 00 26 54 |  if_ne	bith	_var01, #31
2a06c     00 FB 01 F6 | 	mov	result1, _var01
2a070                 | __system__pack_0698_ret
2a070     2D 00 64 FD | 	ret
2a074                 | 
2a074                 | __system___rxtxioctl_0788
2a074     00 15 0E F2 | 	cmp	arg02, #256 wz
2a078     0C 00 90 AD |  if_e	jmp	#LR__3980
2a07c     01 15 0E F2 | 	cmp	arg02, #257 wz
2a080     1C 00 90 AD |  if_e	jmp	#LR__3981
2a084     30 00 90 FD | 	jmp	#LR__3982
2a088                 | LR__3980
2a088     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2a08c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2a090     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2a094     0B FB 61 FC | 	wrlong	result1, arg03
2a098     00 FA 05 F6 | 	mov	result1, #0
2a09c     28 00 90 FD | 	jmp	#LR__3983
2a0a0                 | LR__3981
2a0a0     0B 13 02 FB | 	rdlong	arg01, arg03
2a0a4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2a0a8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a0ac     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2a0b0     00 FA 05 F6 | 	mov	result1, #0
2a0b4     10 00 90 FD | 	jmp	#LR__3983
2a0b8                 | LR__3982
2a0b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a0bc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a0c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a0c4     01 FA 65 F6 | 	neg	result1, #1
2a0c8                 | LR__3983
2a0c8                 | __system___rxtxioctl_0788_ret
2a0c8     2D 00 64 FD | 	ret
2a0cc                 | 
2a0cc                 | __system____dummy_flush_0789
2a0cc     00 FA 05 F6 | 	mov	result1, #0
2a0d0                 | __system____dummy_flush_0789_ret
2a0d0     2D 00 64 FD | 	ret
2a0d4                 | 
2a0d4                 | __system___vfswrite
2a0d4     09 4A 05 F6 | 	mov	COUNT_, #9
2a0d8     A8 00 A0 FD | 	call	#pushregs_
2a0dc     09 27 02 F6 | 	mov	local01, arg01
2a0e0     0A 29 02 F6 | 	mov	local02, arg02
2a0e4     0B 2B 02 F6 | 	mov	local03, arg03
2a0e8     14 2D 02 F6 | 	mov	local04, local02
2a0ec     08 26 06 F1 | 	add	local01, #8
2a0f0     13 13 02 FB | 	rdlong	arg01, local01
2a0f4     08 26 86 F1 | 	sub	local01, #8
2a0f8     02 12 CE F7 | 	test	arg01, #2 wz
2a0fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a100     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a104     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a108     01 FA 65 A6 |  if_e	neg	result1, #1
2a10c     84 01 90 AD |  if_e	jmp	#LR__3996
2a110     08 26 06 F1 | 	add	local01, #8
2a114     13 FB 01 FB | 	rdlong	result1, local01
2a118     08 26 86 F1 | 	sub	local01, #8
2a11c     80 FA CD F7 | 	test	result1, #128 wz
2a120     6C 00 90 AD |  if_e	jmp	#LR__3991
2a124     08 26 06 F1 | 	add	local01, #8
2a128     13 15 02 FB | 	rdlong	arg02, local01
2a12c     08 26 86 F1 | 	sub	local01, #8
2a130     00 15 CE F7 | 	test	arg02, #256 wz
2a134     58 00 90 AD |  if_e	jmp	#LR__3990
2a138     30 26 06 F1 | 	add	local01, #48
2a13c     13 2F 02 FB | 	rdlong	local05, local01
2a140     17 31 02 F6 | 	mov	local06, local05
2a144     30 26 86 F1 | 	sub	local01, #48
2a148     13 30 46 F7 | 	zerox	local06, #19
2a14c     14 2E 46 F0 | 	shr	local05, #20
2a150     02 2E 66 F0 | 	shl	local05, #2
2a154     ED 2E 02 F1 | 	add	local05, __methods__
2a158     17 2F 02 FB | 	rdlong	local05, local05
2a15c     13 13 02 F6 | 	mov	arg01, local01
2a160     00 14 06 F6 | 	mov	arg02, #0
2a164     00 16 06 F6 | 	mov	arg03, #0
2a168     02 18 06 F6 | 	mov	arg04, #2
2a16c     F2 32 02 F6 | 	mov	local07, objptr
2a170     18 E5 01 F6 | 	mov	objptr, local06
2a174     2D 2E 62 FD | 	call	local05
2a178     19 E5 01 F6 | 	mov	objptr, local07
2a17c     08 26 06 F1 | 	add	local01, #8
2a180     13 33 02 FB | 	rdlong	local07, local01
2a184     00 33 26 F5 | 	andn	local07, #256
2a188     13 33 62 FC | 	wrlong	local07, local01
2a18c     08 26 86 F1 | 	sub	local01, #8
2a190                 | LR__3990
2a190                 | LR__3991
2a190     18 26 06 F1 | 	add	local01, #24
2a194     13 33 0A FB | 	rdlong	local07, local01 wz
2a198     18 26 86 F1 | 	sub	local01, #24
2a19c     80 00 90 AD |  if_e	jmp	#LR__3993
2a1a0     18 26 06 F1 | 	add	local01, #24
2a1a4     13 2F 02 FB | 	rdlong	local05, local01
2a1a8     17 31 02 F6 | 	mov	local06, local05
2a1ac     18 26 86 F1 | 	sub	local01, #24
2a1b0     13 30 46 F7 | 	zerox	local06, #19
2a1b4     14 2E 46 F0 | 	shr	local05, #20
2a1b8     02 2E 66 F0 | 	shl	local05, #2
2a1bc     ED 2E 02 F1 | 	add	local05, __methods__
2a1c0     17 2F 02 FB | 	rdlong	local05, local05
2a1c4     14 15 02 F6 | 	mov	arg02, local02
2a1c8     15 17 02 F6 | 	mov	arg03, local03
2a1cc     13 13 02 F6 | 	mov	arg01, local01
2a1d0     F2 32 02 F6 | 	mov	local07, objptr
2a1d4     18 E5 01 F6 | 	mov	objptr, local06
2a1d8     2D 2E 62 FD | 	call	local05
2a1dc     19 E5 01 F6 | 	mov	objptr, local07
2a1e0     FD 34 02 F6 | 	mov	local08, result1
2a1e4     00 34 56 F2 | 	cmps	local08, #0 wc
2a1e8     2C 00 90 3D |  if_ae	jmp	#LR__3992
2a1ec     08 26 06 F1 | 	add	local01, #8
2a1f0     13 33 02 FB | 	rdlong	local07, local01
2a1f4     20 32 46 F5 | 	or	local07, #32
2a1f8     13 33 62 FC | 	wrlong	local07, local01
2a1fc     00 34 4E F2 | 	cmps	local08, #0 wz
2a200     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a204     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2a208     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a20c     01 FA 65 56 |  if_ne	neg	result1, #1
2a210     00 FA 05 A6 |  if_e	mov	result1, #0
2a214     7C 00 90 FD | 	jmp	#LR__3996
2a218                 | LR__3992
2a218     1A FB 01 F6 | 	mov	result1, local08
2a21c     74 00 90 FD | 	jmp	#LR__3996
2a220                 | LR__3993
2a220     1C 26 06 F1 | 	add	local01, #28
2a224     13 37 0A FB | 	rdlong	local09, local01 wz
2a228     1C 26 86 F1 | 	sub	local01, #28
2a22c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a230     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a234     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a238     01 FA 65 A6 |  if_e	neg	result1, #1
2a23c     54 00 90 AD |  if_e	jmp	#LR__3996
2a240     00 34 06 F6 | 	mov	local08, #0
2a244                 | LR__3994
2a244     01 2A 16 F2 | 	cmp	local03, #1 wc
2a248     44 00 90 CD |  if_b	jmp	#LR__3995
2a24c     1B 2F 02 F6 | 	mov	local05, local09
2a250     1B 31 02 F6 | 	mov	local06, local09
2a254     13 2E 46 F7 | 	zerox	local05, #19
2a258     14 30 46 F0 | 	shr	local06, #20
2a25c     02 30 66 F0 | 	shl	local06, #2
2a260     ED 30 02 F1 | 	add	local06, __methods__
2a264     18 31 02 FB | 	rdlong	local06, local06
2a268     16 13 C2 FA | 	rdbyte	arg01, local04
2a26c     13 15 02 F6 | 	mov	arg02, local01
2a270     F2 32 02 F6 | 	mov	local07, objptr
2a274     17 E5 01 F6 | 	mov	objptr, local05
2a278     01 2C 06 F1 | 	add	local04, #1
2a27c     2D 30 62 FD | 	call	local06
2a280     19 E5 01 F6 | 	mov	objptr, local07
2a284     FD 34 02 F1 | 	add	local08, result1
2a288     01 2A 86 F1 | 	sub	local03, #1
2a28c     B4 FF 9F FD | 	jmp	#LR__3994
2a290                 | LR__3995
2a290     1A FB 01 F6 | 	mov	result1, local08
2a294                 | LR__3996
2a294     A7 F0 03 F6 | 	mov	ptra, fp
2a298     B2 00 A0 FD | 	call	#popregs_
2a29c                 | __system___vfswrite_ret
2a29c     2D 00 64 FD | 	ret
2a2a0                 | 
2a2a0                 | __system___vfsread
2a2a0     09 4A 05 F6 | 	mov	COUNT_, #9
2a2a4     A8 00 A0 FD | 	call	#pushregs_
2a2a8     28 F0 07 F1 | 	add	ptra, #40
2a2ac     09 27 02 F6 | 	mov	local01, arg01
2a2b0     0B 29 02 F6 | 	mov	local02, arg03
2a2b4     0A 2B 02 F6 | 	mov	local03, arg02
2a2b8     00 2C 06 F6 | 	mov	local04, #0
2a2bc     08 26 06 F1 | 	add	local01, #8
2a2c0     13 13 02 FB | 	rdlong	arg01, local01
2a2c4     08 26 86 F1 | 	sub	local01, #8
2a2c8     01 12 CE F7 | 	test	arg01, #1 wz
2a2cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a2d0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a2d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a2d8     01 FA 65 A6 |  if_e	neg	result1, #1
2a2dc     80 01 90 AD |  if_e	jmp	#LR__4006
2a2e0     14 26 06 F1 | 	add	local01, #20
2a2e4     13 FB 09 FB | 	rdlong	result1, local01 wz
2a2e8     14 26 86 F1 | 	sub	local01, #20
2a2ec     7C 00 90 AD |  if_e	jmp	#LR__4001
2a2f0     14 26 06 F1 | 	add	local01, #20
2a2f4     13 2F 02 FB | 	rdlong	local05, local01
2a2f8     17 2B 02 F6 | 	mov	local03, local05
2a2fc     14 26 86 F1 | 	sub	local01, #20
2a300     13 2A 46 F7 | 	zerox	local03, #19
2a304     14 2E 46 F0 | 	shr	local05, #20
2a308     02 2E 66 F0 | 	shl	local05, #2
2a30c     ED 2E 02 F1 | 	add	local05, __methods__
2a310     17 2F 02 FB | 	rdlong	local05, local05
2a314     14 17 02 F6 | 	mov	arg03, local02
2a318     13 13 02 F6 | 	mov	arg01, local01
2a31c     F2 2C 02 F6 | 	mov	local04, objptr
2a320     15 E5 01 F6 | 	mov	objptr, local03
2a324     2D 2E 62 FD | 	call	local05
2a328     16 E5 01 F6 | 	mov	objptr, local04
2a32c     FD 30 02 F6 | 	mov	local06, result1
2a330     00 30 56 F2 | 	cmps	local06, #0 wc
2a334     2C 00 90 3D |  if_ae	jmp	#LR__4000
2a338     08 26 06 F1 | 	add	local01, #8
2a33c     13 2F 02 FB | 	rdlong	local05, local01
2a340     20 2E 46 F5 | 	or	local05, #32
2a344     13 2F 62 FC | 	wrlong	local05, local01
2a348     00 30 4E F2 | 	cmps	local06, #0 wz
2a34c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a350     F3 30 62 FC | 	wrlong	local06, ptr___system__dat__
2a354     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a358     01 FA 65 56 |  if_ne	neg	result1, #1
2a35c     00 FA 05 A6 |  if_e	mov	result1, #0
2a360     FC 00 90 FD | 	jmp	#LR__4006
2a364                 | LR__4000
2a364     18 FB 01 F6 | 	mov	result1, local06
2a368     F4 00 90 FD | 	jmp	#LR__4006
2a36c                 | LR__4001
2a36c     20 26 06 F1 | 	add	local01, #32
2a370     13 33 0A FB | 	rdlong	local07, local01 wz
2a374     20 26 86 F1 | 	sub	local01, #32
2a378     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a37c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a380     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a384     01 FA 65 A6 |  if_e	neg	result1, #1
2a388     D4 00 90 AD |  if_e	jmp	#LR__4006
2a38c     28 26 06 F1 | 	add	local01, #40
2a390     13 31 0A FB | 	rdlong	local06, local01 wz
2a394     28 26 86 F1 | 	sub	local01, #40
2a398     60 00 90 AD |  if_e	jmp	#LR__4003
2a39c     28 26 06 F1 | 	add	local01, #40
2a3a0     13 2F 02 FB | 	rdlong	local05, local01
2a3a4     17 35 02 F6 | 	mov	local08, local05
2a3a8     28 26 86 F1 | 	sub	local01, #40
2a3ac     13 34 46 F7 | 	zerox	local08, #19
2a3b0     14 2E 46 F0 | 	shr	local05, #20
2a3b4     02 2E 66 F0 | 	shl	local05, #2
2a3b8     ED 2E 02 F1 | 	add	local05, __methods__
2a3bc     17 2F 02 FB | 	rdlong	local05, local05
2a3c0     13 13 02 F6 | 	mov	arg01, local01
2a3c4     A7 16 02 F6 | 	mov	arg03, fp
2a3c8     24 16 06 F1 | 	add	arg03, #36
2a3cc     00 15 06 F6 | 	mov	arg02, #256
2a3d0     F2 30 02 F6 | 	mov	local06, objptr
2a3d4     1A E5 01 F6 | 	mov	objptr, local08
2a3d8     2D 2E 62 FD | 	call	local05
2a3dc     18 E5 01 F6 | 	mov	objptr, local06
2a3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3e4     14 00 90 5D |  if_ne	jmp	#LR__4002
2a3e8     24 4E 05 F1 | 	add	fp, #36
2a3ec     A7 30 02 FB | 	rdlong	local06, fp
2a3f0     24 4E 85 F1 | 	sub	fp, #36
2a3f4     02 30 CE F7 | 	test	local06, #2 wz
2a3f8     01 2C 06 56 |  if_ne	mov	local04, #1
2a3fc                 | LR__4002
2a3fc                 | LR__4003
2a3fc     00 30 06 F6 | 	mov	local06, #0
2a400                 | LR__4004
2a400     01 28 16 F2 | 	cmp	local02, #1 wc
2a404     54 00 90 CD |  if_b	jmp	#LR__4005
2a408     19 35 02 F6 | 	mov	local08, local07
2a40c     19 2F 02 F6 | 	mov	local05, local07
2a410     13 34 46 F7 | 	zerox	local08, #19
2a414     14 2E 46 F0 | 	shr	local05, #20
2a418     02 2E 66 F0 | 	shl	local05, #2
2a41c     ED 2E 02 F1 | 	add	local05, __methods__
2a420     17 2F 02 FB | 	rdlong	local05, local05
2a424     13 13 02 F6 | 	mov	arg01, local01
2a428     F2 36 02 F6 | 	mov	local09, objptr
2a42c     1A E5 01 F6 | 	mov	objptr, local08
2a430     2D 2E 62 FD | 	call	local05
2a434     1B E5 01 F6 | 	mov	objptr, local09
2a438     00 FA 55 F2 | 	cmps	result1, #0 wc
2a43c     15 FB 41 3C |  if_ae	wrbyte	result1, local03
2a440     01 30 06 31 |  if_ae	add	local06, #1
2a444     01 28 86 31 |  if_ae	sub	local02, #1
2a448     00 2C 0E 32 |  if_ae	cmp	local04, #0 wz
2a44c     01 2A 06 31 |  if_ae	add	local03, #1
2a450     AC FF 9F 2D |  if_nc_and_z	jmp	#LR__4004
2a454     0A FA 0D 32 |  if_ae	cmp	result1, #10 wz
2a458     A4 FF 9F 1D |  if_a	jmp	#LR__4004
2a45c                 | LR__4005
2a45c     18 FB 01 F6 | 	mov	result1, local06
2a460                 | LR__4006
2a460     A7 F0 03 F6 | 	mov	ptra, fp
2a464     B2 00 A0 FD | 	call	#popregs_
2a468                 | __system___vfsread_ret
2a468     2D 00 64 FD | 	ret
2a46c                 | 
2a46c                 | __system__getlower_1283
2a46c     41 12 56 F2 | 	cmps	arg01, #65 wc
2a470     10 00 90 CD |  if_b	jmp	#LR__4010
2a474     5B 12 56 F2 | 	cmps	arg01, #91 wc
2a478     09 FB 01 C6 |  if_b	mov	result1, arg01
2a47c     20 FA 05 C1 |  if_b	add	result1, #32
2a480     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2a484                 | LR__4010
2a484     09 FB 01 F6 | 	mov	result1, arg01
2a488                 | __system__getlower_1283_ret
2a488     2D 00 64 FD | 	ret
2a48c                 | 
2a48c                 | __system___pat_match
2a48c     09 4A 05 F6 | 	mov	COUNT_, #9
2a490     A8 00 A0 FD | 	call	#pushregs_
2a494     09 27 02 F6 | 	mov	local01, arg01
2a498                 | LR__4020
2a498     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2a49c     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2a4a0     09 2B 02 56 |  if_ne	mov	local03, arg01
2a4a4     2A 2A 0E 52 |  if_ne	cmp	local03, #42 wz
2a4a8     2C 00 90 AD |  if_e	jmp	#LR__4021
2a4ac     0A 13 C2 FA | 	rdbyte	arg01, arg02
2a4b0     B8 FF BF FD | 	call	#__system__getlower_1283
2a4b4     FD 28 02 F6 | 	mov	local02, result1
2a4b8     13 13 C2 FA | 	rdbyte	arg01, local01
2a4bc     AC FF BF FD | 	call	#__system__getlower_1283
2a4c0     14 FB 09 F2 | 	cmp	result1, local02 wz
2a4c4     00 FA 05 56 |  if_ne	mov	result1, #0
2a4c8     04 01 90 5D |  if_ne	jmp	#LR__4029
2a4cc     01 26 06 F1 | 	add	local01, #1
2a4d0     01 14 06 F1 | 	add	arg02, #1
2a4d4     C0 FF 9F FD | 	jmp	#LR__4020
2a4d8                 | LR__4021
2a4d8     0A 29 C2 FA | 	rdbyte	local02, arg02
2a4dc     2A 28 0E F2 | 	cmp	local02, #42 wz
2a4e0     DC 00 90 5D |  if_ne	jmp	#LR__4028
2a4e4     01 14 06 F1 | 	add	arg02, #1
2a4e8     0A 2D C2 FA | 	rdbyte	local04, arg02
2a4ec     01 14 86 F1 | 	sub	arg02, #1
2a4f0     2E 2C 0E F2 | 	cmp	local04, #46 wz
2a4f4     02 14 06 A1 |  if_e	add	arg02, #2
2a4f8     0A 2F C2 AA |  if_e	rdbyte	local05, arg02
2a4fc     02 14 86 A1 |  if_e	sub	arg02, #2
2a500     17 2B 02 A6 |  if_e	mov	local03, local05
2a504     15 2B E2 A8 |  if_e	getbyte	local03, local03, #0
2a508     2A 2A 0E A2 |  if_e	cmp	local03, #42 wz
2a50c     03 14 06 A1 |  if_e	add	arg02, #3
2a510     0A 31 C2 AA |  if_e	rdbyte	local06, arg02
2a514     03 14 86 A1 |  if_e	sub	arg02, #3
2a518     18 33 0A A6 |  if_e	mov	local07, local06 wz
2a51c     01 FA 05 A6 |  if_e	mov	result1, #1
2a520     AC 00 90 AD |  if_e	jmp	#LR__4029
2a524     01 14 06 F1 | 	add	arg02, #1
2a528     00 34 06 F6 | 	mov	local08, #0
2a52c     97 0E 48 FB | 	callpa	#(@LR__4023-@LR__4022)>>2,fcache_load_ptr_
2a530                 | LR__4022
2a530     1A 29 02 F6 | 	mov	local02, local08
2a534     0A 29 02 F1 | 	add	local02, arg02
2a538     14 2D CA FA | 	rdbyte	local04, local02 wz
2a53c     1A 33 02 56 |  if_ne	mov	local07, local08
2a540     01 32 06 51 |  if_ne	add	local07, #1
2a544     19 35 02 56 |  if_ne	mov	local08, local07
2a548     E4 FF 9F 5D |  if_ne	jmp	#LR__4022
2a54c                 | LR__4023
2a54c     00 36 06 F6 | 	mov	local09, #0
2a550     97 0E 48 FB | 	callpa	#(@LR__4025-@LR__4024)>>2,fcache_load_ptr_
2a554                 | LR__4024
2a554     1B 29 02 F6 | 	mov	local02, local09
2a558     13 29 02 F1 | 	add	local02, local01
2a55c     14 2D CA FA | 	rdbyte	local04, local02 wz
2a560     1B 33 02 56 |  if_ne	mov	local07, local09
2a564     01 32 06 51 |  if_ne	add	local07, #1
2a568     19 37 02 56 |  if_ne	mov	local09, local07
2a56c     E4 FF 9F 5D |  if_ne	jmp	#LR__4024
2a570                 | LR__4025
2a570     1A 37 52 F2 | 	cmps	local09, local08 wc
2a574     00 FA 05 C6 |  if_b	mov	result1, #0
2a578     54 00 90 CD |  if_b	jmp	#LR__4029
2a57c     1B 2B 02 F6 | 	mov	local03, local09
2a580     1A 2B 82 F1 | 	sub	local03, local08
2a584     15 27 02 F1 | 	add	local01, local03
2a588                 | LR__4026
2a588     01 34 56 F2 | 	cmps	local08, #1 wc
2a58c     30 00 90 CD |  if_b	jmp	#LR__4027
2a590     13 13 C2 FA | 	rdbyte	arg01, local01
2a594     D4 FE BF FD | 	call	#__system__getlower_1283
2a598     FD 2C 02 F6 | 	mov	local04, result1
2a59c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2a5a0     C8 FE BF FD | 	call	#__system__getlower_1283
2a5a4     FD 2C 0A F2 | 	cmp	local04, result1 wz
2a5a8     00 FA 05 56 |  if_ne	mov	result1, #0
2a5ac     20 00 90 5D |  if_ne	jmp	#LR__4029
2a5b0     01 26 06 F1 | 	add	local01, #1
2a5b4     01 14 06 F1 | 	add	arg02, #1
2a5b8     01 34 86 F1 | 	sub	local08, #1
2a5bc     C8 FF 9F FD | 	jmp	#LR__4026
2a5c0                 | LR__4027
2a5c0                 | LR__4028
2a5c0     0A 2D CA FA | 	rdbyte	local04, arg02 wz
2a5c4     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
2a5c8     01 FA 05 A6 |  if_e	mov	result1, #1
2a5cc     00 FA 05 56 |  if_ne	mov	result1, #0
2a5d0                 | LR__4029
2a5d0     A7 F0 03 F6 | 	mov	ptra, fp
2a5d4     B2 00 A0 FD | 	call	#popregs_
2a5d8                 | __system___pat_match_ret
2a5d8     2D 00 64 FD | 	ret
2a5dc                 | 
2a5dc                 | _sdmm_cc_disk_initialize
2a5dc     10 4A 05 F6 | 	mov	COUNT_, #16
2a5e0     A8 00 A0 FD | 	call	#pushregs_
2a5e4     09 27 0A F6 | 	mov	local01, arg01 wz
2a5e8     F8 29 02 F6 | 	mov	local02, ptra
2a5ec     F2 2A 02 FB | 	rdlong	local03, objptr
2a5f0     04 E4 05 F1 | 	add	objptr, #4
2a5f4     F2 2C 02 FB | 	rdlong	local04, objptr
2a5f8     04 E4 05 F1 | 	add	objptr, #4
2a5fc     F2 2E 02 FB | 	rdlong	local05, objptr
2a600     04 E4 05 F1 | 	add	objptr, #4
2a604     F2 30 02 FB | 	rdlong	local06, objptr
2a608     08 E4 05 F1 | 	add	objptr, #8
2a60c     F2 02 48 FC | 	wrbyte	#1, objptr
2a610     14 E4 85 F1 | 	sub	objptr, #20
2a614                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2a614                 | ' 		return RES_NOTRDY;
2a614     0C F0 07 F1 | 	add	ptra, #12
2a618     03 FA 05 56 |  if_ne	mov	result1, #3
2a61c     74 04 90 5D |  if_ne	jmp	#LR__4050
2a620     13 00 00 FF 
2a624     10 13 06 F6 | 	mov	arg01, ##10000
2a628     80 AD BF FD | 	call	#__system___waitus
2a62c     15 19 02 F6 | 	mov	arg04, local03
2a630     17 19 82 F1 | 	sub	arg04, local05
2a634     0C 19 42 F6 | 	abs	arg04, arg04
2a638     04 18 56 F2 | 	cmps	arg04, #4 wc
2a63c     04 FA 05 36 |  if_ae	mov	result1, #4
2a640     50 04 90 3D |  if_ae	jmp	#LR__4050
2a644     15 33 02 F6 | 	mov	local07, local03
2a648     18 33 82 F1 | 	sub	local07, local06
2a64c     19 33 42 F6 | 	abs	local07, local07
2a650     04 32 56 F2 | 	cmps	local07, #4 wc
2a654     34 00 90 3D |  if_ae	jmp	#LR__4030
2a658     15 35 02 F6 | 	mov	local08, local03
2a65c     18 35 82 F1 | 	sub	local08, local06
2a660     07 34 06 F5 | 	and	local08, #7
2a664     18 34 66 F0 | 	shl	local08, #24
2a668     29 00 00 FF 
2a66c     7A 34 46 F5 | 	or	local08, ##21114
2a670     18 37 02 F6 | 	mov	local09, local06
2a674     0C E4 05 F1 | 	add	objptr, #12
2a678     F2 36 62 FC | 	wrlong	local09, objptr
2a67c     04 E4 05 F1 | 	add	objptr, #4
2a680     F2 36 62 FC | 	wrlong	local09, objptr
2a684     10 E4 85 F1 | 	sub	objptr, #16
2a688     A4 00 90 FD | 	jmp	#LR__4033
2a68c                 | LR__4030
2a68c     18 2B 5A F2 | 	cmps	local03, local06 wcz
2a690     28 00 90 ED |  if_be	jmp	#LR__4031
2a694     15 37 02 F6 | 	mov	local09, local03
2a698     03 36 86 F1 | 	sub	local09, #3
2a69c     17 37 0A F2 | 	cmp	local09, local05 wz
2a6a0     16 37 0A 52 |  if_ne	cmp	local09, local04 wz
2a6a4     01 36 06 A1 |  if_e	add	local09, #1
2a6a8     17 37 0A F2 | 	cmp	local09, local05 wz
2a6ac     16 37 0A 52 |  if_ne	cmp	local09, local04 wz
2a6b0     28 00 90 5D |  if_ne	jmp	#LR__4032
2a6b4     01 36 06 F1 | 	add	local09, #1
2a6b8     20 00 90 FD | 	jmp	#LR__4032
2a6bc                 | LR__4031
2a6bc     15 37 02 F6 | 	mov	local09, local03
2a6c0     03 36 06 F1 | 	add	local09, #3
2a6c4     17 37 0A F2 | 	cmp	local09, local05 wz
2a6c8     16 37 0A 52 |  if_ne	cmp	local09, local04 wz
2a6cc     01 36 86 A1 |  if_e	sub	local09, #1
2a6d0     17 37 0A F2 | 	cmp	local09, local05 wz
2a6d4     16 37 0A 52 |  if_ne	cmp	local09, local04 wz
2a6d8     01 36 86 A1 |  if_e	sub	local09, #1
2a6dc                 | LR__4032
2a6dc     18 33 02 F6 | 	mov	local07, local06
2a6e0     1B 33 82 F1 | 	sub	local07, local09
2a6e4     19 33 42 F6 | 	abs	local07, local07
2a6e8     04 32 56 F2 | 	cmps	local07, #4 wc
2a6ec     04 FA 05 36 |  if_ae	mov	result1, #4
2a6f0     A0 03 90 3D |  if_ae	jmp	#LR__4050
2a6f4     18 35 02 F6 | 	mov	local08, local06
2a6f8     1B 35 82 F1 | 	sub	local08, local09
2a6fc     07 34 06 F5 | 	and	local08, #7
2a700     1C 34 66 F0 | 	shl	local08, #28
2a704     15 33 02 F6 | 	mov	local07, local03
2a708     1B 33 82 F1 | 	sub	local07, local09
2a70c     07 32 06 F5 | 	and	local07, #7
2a710     18 32 66 F0 | 	shl	local07, #24
2a714     19 35 42 F5 | 	or	local08, local07
2a718     3A 34 46 F5 | 	or	local08, #58
2a71c     10 E4 05 F1 | 	add	objptr, #16
2a720     F2 30 62 FC | 	wrlong	local06, objptr
2a724     04 E4 85 F1 | 	sub	objptr, #4
2a728     F2 36 62 FC | 	wrlong	local09, objptr
2a72c     0C E4 85 F1 | 	sub	objptr, #12
2a730                 | LR__4033
2a730     16 01 08 FC | 	wrpin	#0, local04
2a734     59 2C 62 FD | 	drvh	local04
2a738     00 08 00 FF 
2a73c     20 38 06 F6 | 	mov	local10, ##1048608
2a740     40 2A 62 FD | 	dirl	local03
2a744     A0 03 80 FF 
2a748     15 91 08 FC | 	wrpin	##475208, local03
2a74c     00 08 80 FF 
2a750     15 41 18 FC | 	wxpin	##1048608, local03
2a754     15 01 28 FC | 	wypin	#0, local03
2a758     41 2A 62 FD | 	dirh	local03
2a75c     15 33 02 F6 | 	mov	local07, local03
2a760     17 33 82 F1 | 	sub	local07, local05
2a764     07 32 06 F5 | 	and	local07, #7
2a768     18 32 66 F0 | 	shl	local07, #24
2a76c     78 3A 06 F6 | 	mov	local11, #120
2a770     19 3B 42 F5 | 	or	local11, local07
2a774     1D 15 02 F6 | 	mov	arg02, local11
2a778     10 14 26 F4 | 	bith	arg02, #16
2a77c     40 2E 62 FD | 	dirl	local05
2a780     17 15 02 FC | 	wrpin	arg02, local05
2a784     17 3F 18 FC | 	wxpin	#31, local05
2a788     FF FF FF FF 
2a78c     17 FF 2B FC | 	wypin	##-1, local05
2a790     41 2E 62 FD | 	dirh	local05
2a794     29 00 80 FF 
2a798     18 01 08 FC | 	wrpin	##20992, local06
2a79c     00 3C 06 F6 | 	mov	local12, #0
2a7a0     40 36 62 FD | 	dirl	local09
2a7a4     1B 35 02 FC | 	wrpin	local08, local09
2a7a8     1B 4F 18 FC | 	wxpin	#39, local09
2a7ac     1B 01 28 FC | 	wypin	#0, local09
2a7b0     41 36 62 FD | 	dirh	local09
2a7b4     14 13 02 F6 | 	mov	arg01, local02
2a7b8     0A 14 06 F6 | 	mov	arg02, #10
2a7bc     64 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2a7c0     00 12 06 F6 | 	mov	arg01, #0
2a7c4     00 14 06 F6 | 	mov	arg02, #0
2a7c8     DC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a7cc     28 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2a7d0     64 12 06 F6 | 	mov	arg01, #100
2a7d4     D4 AB BF FD | 	call	#__system___waitus
2a7d8     14 13 02 F6 | 	mov	arg01, local02
2a7dc     0A 14 06 F6 | 	mov	arg02, #10
2a7e0     40 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2a7e4     00 3E 06 F6 | 	mov	local13, #0
2a7e8     00 12 06 F6 | 	mov	arg01, #0
2a7ec     00 14 06 F6 | 	mov	arg02, #0
2a7f0     B4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a7f4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
2a7f8     01 32 0E F2 | 	cmp	local07, #1 wz
2a7fc     64 02 90 5D |  if_ne	jmp	#LR__4049
2a800     08 12 06 F6 | 	mov	arg01, #8
2a804     AA 15 06 F6 | 	mov	arg02, #426
2a808     9C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a80c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a810     01 FA 0D F2 | 	cmp	result1, #1 wz
2a814     38 01 90 5D |  if_ne	jmp	#LR__4038
2a818     14 13 02 F6 | 	mov	arg01, local02
2a81c     04 14 06 F6 | 	mov	arg02, #4
2a820     00 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2a824     02 28 06 F1 | 	add	local02, #2
2a828     14 33 C2 FA | 	rdbyte	local07, local02
2a82c     02 28 86 F1 | 	sub	local02, #2
2a830     01 32 0E F2 | 	cmp	local07, #1 wz
2a834     03 28 06 A1 |  if_e	add	local02, #3
2a838     14 3D C2 AA |  if_e	rdbyte	local12, local02
2a83c     03 28 86 A1 |  if_e	sub	local02, #3
2a840     1E 41 02 A6 |  if_e	mov	local14, local12
2a844     20 41 E2 A8 |  if_e	getbyte	local14, local14, #0
2a848     AA 40 0E A2 |  if_e	cmp	local14, #170 wz
2a84c     14 02 90 5D |  if_ne	jmp	#LR__4048
2a850                 | ' 				for (tmr = 1000; tmr; tmr--) {
2a850     01 00 00 FF 
2a854     E8 43 06 F6 | 	mov	local15, ##1000
2a858                 | LR__4034
2a858     A9 12 06 F6 | 	mov	arg01, #169
2a85c     1E 14 C6 F9 | 	decod	arg02, #30
2a860     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a864     FD 32 02 F6 | 	mov	local07, result1
2a868     07 32 4E F7 | 	zerox	local07, #7 wz
2a86c     18 00 90 AD |  if_e	jmp	#LR__4035
2a870     01 00 00 FF 
2a874     E8 13 06 F6 | 	mov	arg01, ##1000
2a878     30 AB BF FD | 	call	#__system___waitus
2a87c     21 33 02 F6 | 	mov	local07, local15
2a880     01 42 8E F1 | 	sub	local15, #1 wz
2a884     D0 FF 9F 5D |  if_ne	jmp	#LR__4034
2a888                 | LR__4035
2a888     00 42 0E F2 | 	cmp	local15, #0 wz
2a88c     38 00 90 AD |  if_e	jmp	#LR__4036
2a890     3A 12 06 F6 | 	mov	arg01, #58
2a894     00 14 06 F6 | 	mov	arg02, #0
2a898     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a89c     FD 32 02 F6 | 	mov	local07, result1
2a8a0     07 32 4E F7 | 	zerox	local07, #7 wz
2a8a4     20 00 90 5D |  if_ne	jmp	#LR__4036
2a8a8     14 13 02 F6 | 	mov	arg01, local02
2a8ac     04 14 06 F6 | 	mov	arg02, #4
2a8b0     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2a8b4     14 43 C2 FA | 	rdbyte	local15, local02
2a8b8     40 42 CE F7 | 	test	local15, #64 wz
2a8bc     0C 32 06 56 |  if_ne	mov	local07, #12
2a8c0     04 32 06 A6 |  if_e	mov	local07, #4
2a8c4     19 3F 02 F6 | 	mov	local13, local07
2a8c8                 | LR__4036
2a8c8     14 42 06 FB | 	rdlong	local15, #20
2a8cc     F0 FA 02 FF 
2a8d0     01 43 16 F2 | 	cmp	local15, ##100000001 wc
2a8d4     1D 33 02 C6 |  if_b	mov	local07, local11
2a8d8     1B 32 26 C4 |  if_b	bith	local07, #27
2a8dc     19 3B 02 C6 |  if_b	mov	local11, local07
2a8e0     10 00 90 CD |  if_b	jmp	#LR__4037
2a8e4     E1 F5 05 FF 
2a8e8     01 42 16 F2 | 	cmp	local15, ##200000001 wc
2a8ec     80 00 04 CF 
2a8f0     00 3A 46 C5 |  if_b	or	local11, ##134283264
2a8f4                 | LR__4037
2a8f4     F0 FA 02 FF 
2a8f8     01 43 16 F2 | 	cmp	local15, ##100000001 wc
2a8fc     00 01 00 CF 
2a900     04 38 06 C6 |  if_b	mov	local10, ##131076
2a904     5C 01 90 CD |  if_b	jmp	#LR__4048
2a908     68 78 04 FF 
2a90c     81 43 16 F2 | 	cmp	local15, ##150000001 wc
2a910     80 01 00 CF 
2a914     06 38 06 C6 |  if_b	mov	local10, ##196614
2a918     48 01 90 CD |  if_b	jmp	#LR__4048
2a91c     E1 F5 05 FF 
2a920     01 42 16 F2 | 	cmp	local15, ##200000001 wc
2a924     00 02 00 CF 
2a928     08 38 06 C6 |  if_b	mov	local10, ##262152
2a92c     34 01 90 CD |  if_b	jmp	#LR__4048
2a930     59 73 07 FF 
2a934     81 42 16 F2 | 	cmp	local15, ##250000001 wc
2a938     80 02 00 CF 
2a93c     0A 38 06 C6 |  if_b	mov	local10, ##327690
2a940     20 01 90 CD |  if_b	jmp	#LR__4048
2a944     00 03 00 FF 
2a948     0C 38 06 F6 | 	mov	local10, ##393228
2a94c     14 01 90 FD | 	jmp	#LR__4048
2a950                 | LR__4038
2a950     A9 12 06 F6 | 	mov	arg01, #169
2a954     00 14 06 F6 | 	mov	arg02, #0
2a958     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a95c     FD 32 E2 F8 | 	getbyte	local07, result1, #0
2a960     02 32 16 F2 | 	cmp	local07, #2 wc
2a964     02 3E 06 C6 |  if_b	mov	local13, #2
2a968     A9 44 06 C6 |  if_b	mov	local16, #169
2a96c     01 3E 06 36 |  if_ae	mov	local13, #1
2a970     01 44 06 36 |  if_ae	mov	local16, #1
2a974                 | ' 				ty =  0x01 ; cmd =  (1) ;
2a974                 | ' 			}
2a974                 | ' 			for (tmr = 1000; tmr; tmr--) {
2a974     01 00 00 FF 
2a978     E8 43 06 F6 | 	mov	local15, ##1000
2a97c                 | LR__4039
2a97c     22 13 02 F6 | 	mov	arg01, local16
2a980     00 14 06 F6 | 	mov	arg02, #0
2a984     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a988     FD 32 02 F6 | 	mov	local07, result1
2a98c     07 32 4E F7 | 	zerox	local07, #7 wz
2a990     18 00 90 AD |  if_e	jmp	#LR__4040
2a994     01 00 00 FF 
2a998     E8 13 06 F6 | 	mov	arg01, ##1000
2a99c     0C AA BF FD | 	call	#__system___waitus
2a9a0     21 33 02 F6 | 	mov	local07, local15
2a9a4     01 42 8E F1 | 	sub	local15, #1 wz
2a9a8     D0 FF 9F 5D |  if_ne	jmp	#LR__4039
2a9ac                 | LR__4040
2a9ac     00 42 0E F2 | 	cmp	local15, #0 wz
2a9b0     18 00 90 AD |  if_e	jmp	#LR__4041
2a9b4     10 12 06 F6 | 	mov	arg01, #16
2a9b8     09 14 C6 F9 | 	decod	arg02, #9
2a9bc     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2a9c0     FD 32 02 F6 | 	mov	local07, result1
2a9c4     07 32 4E F7 | 	zerox	local07, #7 wz
2a9c8     04 00 90 AD |  if_e	jmp	#LR__4042
2a9cc                 | LR__4041
2a9cc     00 3E 06 F6 | 	mov	local13, #0
2a9d0                 | LR__4042
2a9d0     14 42 06 FB | 	rdlong	local15, #20
2a9d4     F0 FA 02 FF 
2a9d8     01 43 16 F2 | 	cmp	local15, ##100000001 wc
2a9dc     1D 33 02 C6 |  if_b	mov	local07, local11
2a9e0     1B 32 26 C4 |  if_b	bith	local07, #27
2a9e4     19 3B 02 C6 |  if_b	mov	local11, local07
2a9e8     10 00 90 CD |  if_b	jmp	#LR__4043
2a9ec     E1 F5 05 FF 
2a9f0     01 42 16 F2 | 	cmp	local15, ##200000001 wc
2a9f4     80 00 04 CF 
2a9f8     00 3A 46 C5 |  if_b	or	local11, ##134283264
2a9fc                 | LR__4043
2a9fc     F0 FA 02 FF 
2aa00     01 43 16 F2 | 	cmp	local15, ##100000001 wc
2aa04     00 01 00 CF 
2aa08     04 38 06 C6 |  if_b	mov	local10, ##131076
2aa0c     54 00 90 CD |  if_b	jmp	#LR__4047
2aa10     68 78 04 FF 
2aa14     81 43 16 F2 | 	cmp	local15, ##150000001 wc
2aa18     80 01 00 CF 
2aa1c     06 38 06 C6 |  if_b	mov	local10, ##196614
2aa20     40 00 90 CD |  if_b	jmp	#LR__4046
2aa24     E1 F5 05 FF 
2aa28     01 42 16 F2 | 	cmp	local15, ##200000001 wc
2aa2c     00 02 00 CF 
2aa30     08 38 06 C6 |  if_b	mov	local10, ##262152
2aa34     2C 00 90 CD |  if_b	jmp	#LR__4045
2aa38     59 73 07 FF 
2aa3c     81 42 16 F2 | 	cmp	local15, ##250000001 wc
2aa40     80 02 00 CF 
2aa44     0A 38 06 C6 |  if_b	mov	local10, ##327690
2aa48     18 00 90 CD |  if_b	jmp	#LR__4044
2aa4c     D1 F0 08 FF 
2aa50     01 43 16 F2 | 	cmp	local15, ##300000001 wc
2aa54     00 03 00 CF 
2aa58     0C 38 06 C6 |  if_b	mov	local10, ##393228
2aa5c     80 03 00 3F 
2aa60     0E 38 06 36 |  if_ae	mov	local10, ##458766
2aa64                 | LR__4044
2aa64                 | LR__4045
2aa64                 | LR__4046
2aa64                 | LR__4047
2aa64                 | LR__4048
2aa64                 | LR__4049
2aa64     15 E4 05 F1 | 	add	objptr, #21
2aa68     F2 3E 42 FC | 	wrbyte	local13, objptr
2aa6c     00 3E 0E F2 | 	cmp	local13, #0 wz
2aa70     00 32 06 56 |  if_ne	mov	local07, #0
2aa74     01 32 06 A6 |  if_e	mov	local07, #1
2aa78     01 E4 85 F1 | 	sub	objptr, #1
2aa7c     F2 32 42 FC | 	wrbyte	local07, objptr
2aa80     14 E4 85 F1 | 	sub	objptr, #20
2aa84     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2aa88     15 39 12 FC | 	wxpin	local10, local03
2aa8c     17 3B 02 FC | 	wrpin	local11, local05
2aa90                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2aa90                 | ' 		}
2aa90                 | ' 	}
2aa90                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2aa90                 | ' 	CardType = ty;
2aa90                 | ' 	s = ty ? 0 :  0x01 ;
2aa90                 | ' 	Stat = s;
2aa90                 | ' 
2aa90                 | ' 	deselect();
2aa90                 | ' 
2aa90                 | ' 
2aa90                 | ' 	_wxpin( PIN_CLK, ck_div );
2aa90                 | ' 	_wrpin( PIN_DI, spm_tx );
2aa90                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2aa90                 | ' 	return s;
2aa90     19 FB 01 F6 | 	mov	result1, local07
2aa94                 | LR__4050
2aa94     A7 F0 03 F6 | 	mov	ptra, fp
2aa98     B2 00 A0 FD | 	call	#popregs_
2aa9c                 | _sdmm_cc_disk_initialize_ret
2aa9c     2D 00 64 FD | 	ret
2aaa0                 | 
2aaa0                 | _sdmm_cc_disk_read
2aaa0     05 4A 05 F6 | 	mov	COUNT_, #5
2aaa4     A8 00 A0 FD | 	call	#pushregs_
2aaa8     0A 27 02 F6 | 	mov	local01, arg02
2aaac     0B 29 02 F6 | 	mov	local02, arg03
2aab0     0C 2B 02 F6 | 	mov	local03, arg04
2aab4     00 12 0E F2 | 	cmp	arg01, #0 wz
2aab8     01 FA 05 56 |  if_ne	mov	result1, #1
2aabc                 | ' 
2aabc                 | ' 	return Stat;
2aabc     14 E4 05 A1 |  if_e	add	objptr, #20
2aac0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2aac4     14 E4 85 A1 |  if_e	sub	objptr, #20
2aac8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2aacc     01 FA CD F7 | 	test	result1, #1 wz
2aad0     03 FA 05 56 |  if_ne	mov	result1, #3
2aad4     7C 00 90 5D |  if_ne	jmp	#LR__4062
2aad8     15 E4 05 F1 | 	add	objptr, #21
2aadc     F2 2C C2 FA | 	rdbyte	local04, objptr
2aae0     15 E4 85 F1 | 	sub	objptr, #21
2aae4     08 2C CE F7 | 	test	local04, #8 wz
2aae8     09 28 66 A0 |  if_e	shl	local02, #9
2aaec     02 2A 16 F2 | 	cmp	local03, #2 wc
2aaf0     12 2C 06 36 |  if_ae	mov	local04, #18
2aaf4     11 2C 06 C6 |  if_b	mov	local04, #17
2aaf8     14 15 02 F6 | 	mov	arg02, local02
2aafc     16 13 02 F6 | 	mov	arg01, local04
2ab00     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ab04     FD 2E 02 F6 | 	mov	local05, result1
2ab08     07 2E 4E F7 | 	zerox	local05, #7 wz
2ab0c     30 00 90 5D |  if_ne	jmp	#LR__4061
2ab10                 | ' 		do {
2ab10                 | LR__4060
2ab10     13 13 02 F6 | 	mov	arg01, local01
2ab14     09 14 C6 F9 | 	decod	arg02, #9
2ab18     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2ab1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab20     01 00 00 5F 
2ab24     00 26 06 51 |  if_ne	add	local01, ##512
2ab28     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4060
2ab2c     16 2D E2 F8 | 	getbyte	local04, local04, #0
2ab30     12 2C 0E F2 | 	cmp	local04, #18 wz
2ab34     0C 12 06 A6 |  if_e	mov	arg01, #12
2ab38     00 14 06 A6 |  if_e	mov	arg02, #0
2ab3c     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2ab40                 | LR__4061
2ab40     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2ab44                 | ' 	}
2ab44                 | ' 	deselect();
2ab44                 | ' 
2ab44                 | ' 	return count ? RES_ERROR : RES_OK;
2ab44     00 2A 0E F2 | 	cmp	local03, #0 wz
2ab48     01 2E 06 56 |  if_ne	mov	local05, #1
2ab4c     00 2E 06 A6 |  if_e	mov	local05, #0
2ab50     17 FB 01 F6 | 	mov	result1, local05
2ab54                 | LR__4062
2ab54     A7 F0 03 F6 | 	mov	ptra, fp
2ab58     B2 00 A0 FD | 	call	#popregs_
2ab5c                 | _sdmm_cc_disk_read_ret
2ab5c     2D 00 64 FD | 	ret
2ab60                 | 
2ab60                 | _sdmm_cc_disk_write
2ab60     04 4A 05 F6 | 	mov	COUNT_, #4
2ab64     A8 00 A0 FD | 	call	#pushregs_
2ab68     0A 27 02 F6 | 	mov	local01, arg02
2ab6c     0C 29 02 F6 | 	mov	local02, arg04
2ab70     0B 2B 02 F6 | 	mov	local03, arg03
2ab74     00 12 0E F2 | 	cmp	arg01, #0 wz
2ab78     01 FA 05 56 |  if_ne	mov	result1, #1
2ab7c                 | ' 
2ab7c                 | ' 	return Stat;
2ab7c     14 E4 05 A1 |  if_e	add	objptr, #20
2ab80     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ab84     14 E4 85 A1 |  if_e	sub	objptr, #20
2ab88     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ab8c     01 FA CD F7 | 	test	result1, #1 wz
2ab90     03 FA 05 56 |  if_ne	mov	result1, #3
2ab94     C4 00 90 5D |  if_ne	jmp	#LR__4074
2ab98     15 E4 05 F1 | 	add	objptr, #21
2ab9c     F2 16 C2 FA | 	rdbyte	arg03, objptr
2aba0     15 E4 85 F1 | 	sub	objptr, #21
2aba4     08 16 CE F7 | 	test	arg03, #8 wz
2aba8     09 2A 66 A0 |  if_e	shl	local03, #9
2abac     01 28 0E F2 | 	cmp	local02, #1 wz
2abb0     30 00 90 5D |  if_ne	jmp	#LR__4070
2abb4     18 12 06 F6 | 	mov	arg01, #24
2abb8     15 15 02 F6 | 	mov	arg02, local03
2abbc     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2abc0     FD 2C 02 F6 | 	mov	local04, result1
2abc4     07 2C 4E F7 | 	zerox	local04, #7 wz
2abc8     7C 00 90 5D |  if_ne	jmp	#LR__4073
2abcc     13 13 02 F6 | 	mov	arg01, local01
2abd0     FE 14 06 F6 | 	mov	arg02, #254
2abd4     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2abd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2abdc     00 28 06 56 |  if_ne	mov	local02, #0
2abe0     64 00 90 FD | 	jmp	#LR__4073
2abe4                 | LR__4070
2abe4     15 E4 05 F1 | 	add	objptr, #21
2abe8     F2 2C C2 FA | 	rdbyte	local04, objptr
2abec     15 E4 85 F1 | 	sub	objptr, #21
2abf0     06 2C CE F7 | 	test	local04, #6 wz
2abf4     97 12 06 56 |  if_ne	mov	arg01, #151
2abf8     14 15 02 56 |  if_ne	mov	arg02, local02
2abfc     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2ac00     15 15 02 F6 | 	mov	arg02, local03
2ac04     19 12 06 F6 | 	mov	arg01, #25
2ac08     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ac0c     FD 2C 02 F6 | 	mov	local04, result1
2ac10     07 2C 4E F7 | 	zerox	local04, #7 wz
2ac14     30 00 90 5D |  if_ne	jmp	#LR__4072
2ac18                 | ' 			do {
2ac18                 | LR__4071
2ac18     13 13 02 F6 | 	mov	arg01, local01
2ac1c     FC 14 06 F6 | 	mov	arg02, #252
2ac20     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2ac24     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac28     01 00 00 5F 
2ac2c     00 26 06 51 |  if_ne	add	local01, ##512
2ac30     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4071
2ac34     00 12 06 F6 | 	mov	arg01, #0
2ac38     FD 14 06 F6 | 	mov	arg02, #253
2ac3c     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2ac40     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac44     01 28 06 A6 |  if_e	mov	local02, #1
2ac48                 | LR__4072
2ac48                 | LR__4073
2ac48     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2ac4c                 | ' 				count = 1;
2ac4c                 | ' 		}
2ac4c                 | ' 	}
2ac4c                 | ' 	deselect();
2ac4c                 | ' 
2ac4c                 | ' 	return count ? RES_ERROR : RES_OK;
2ac4c     00 28 0E F2 | 	cmp	local02, #0 wz
2ac50     01 2C 06 56 |  if_ne	mov	local04, #1
2ac54     00 2C 06 A6 |  if_e	mov	local04, #0
2ac58     16 FB 01 F6 | 	mov	result1, local04
2ac5c                 | LR__4074
2ac5c     A7 F0 03 F6 | 	mov	ptra, fp
2ac60     B2 00 A0 FD | 	call	#popregs_
2ac64                 | _sdmm_cc_disk_write_ret
2ac64     2D 00 64 FD | 	ret
2ac68                 | 
2ac68                 | _sdmm_cc_disk_ioctl
2ac68     06 4A 05 F6 | 	mov	COUNT_, #6
2ac6c     A8 00 A0 FD | 	call	#pushregs_
2ac70     30 F0 07 F1 | 	add	ptra, #48
2ac74     0A 27 02 F6 | 	mov	local01, arg02
2ac78     0B 29 02 F6 | 	mov	local02, arg03
2ac7c     00 12 0E F2 | 	cmp	arg01, #0 wz
2ac80     01 FA 05 56 |  if_ne	mov	result1, #1
2ac84                 | ' 
2ac84                 | ' 	return Stat;
2ac84     14 E4 05 A1 |  if_e	add	objptr, #20
2ac88     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ac8c     14 E4 85 A1 |  if_e	sub	objptr, #20
2ac90     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ac94     01 FA CD F7 | 	test	result1, #1 wz
2ac98     03 FA 05 56 |  if_ne	mov	result1, #3
2ac9c     F4 00 90 5D |  if_ne	jmp	#LR__4087
2aca0     01 2A 06 F6 | 	mov	local03, #1
2aca4                 | ' 
2aca4                 | ' 	res = RES_ERROR;
2aca4                 | ' 	switch (ctrl) {
2aca4     13 2D E2 F8 | 	getbyte	local04, local01, #0
2aca8     04 2C 26 F3 | 	fle	local04, #4
2acac     30 2C 62 FD | 	jmprel	local04
2acb0                 | LR__4080
2acb0     10 00 90 FD | 	jmp	#LR__4081
2acb4     1C 00 90 FD | 	jmp	#LR__4082
2acb8     CC 00 90 FD | 	jmp	#LR__4085
2acbc     BC 00 90 FD | 	jmp	#LR__4084
2acc0     C4 00 90 FD | 	jmp	#LR__4085
2acc4                 | LR__4081
2acc4     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2acc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2accc     00 2A 06 56 |  if_ne	mov	local03, #0
2acd0                 | ' 			break;
2acd0     B8 00 90 FD | 	jmp	#LR__4086
2acd4                 | LR__4082
2acd4     09 12 06 F6 | 	mov	arg01, #9
2acd8     00 14 06 F6 | 	mov	arg02, #0
2acdc     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ace0     FD 2C 02 F6 | 	mov	local04, result1
2ace4     07 2C 4E F7 | 	zerox	local04, #7 wz
2ace8     A0 00 90 5D |  if_ne	jmp	#LR__4086
2acec     A7 12 02 F6 | 	mov	arg01, fp
2acf0     18 12 06 F1 | 	add	arg01, #24
2acf4     10 14 06 F6 | 	mov	arg02, #16
2acf8     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2acfc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad00     88 00 90 AD |  if_e	jmp	#LR__4086
2ad04     A7 12 02 F6 | 	mov	arg01, fp
2ad08     18 12 06 F1 | 	add	arg01, #24
2ad0c     09 FB 01 F6 | 	mov	result1, arg01
2ad10     06 12 06 F1 | 	add	arg01, #6
2ad14     09 2F 02 FB | 	rdlong	local05, arg01
2ad18     1B 2E FE F9 | 	movbyts	local05, #27
2ad1c     FD 12 C2 FA | 	rdbyte	arg01, result1
2ad20     06 12 46 F0 | 	shr	arg01, #6
2ad24     01 12 0E F2 | 	cmp	arg01, #1 wz
2ad28     36 2F 06 A4 |  if_e	bitl	local05, #310
2ad2c     01 2E 06 A1 |  if_e	add	local05, #1
2ad30     0A 30 06 A6 |  if_e	mov	local06, #10
2ad34     34 00 90 AD |  if_e	jmp	#LR__4083
2ad38     0E 2E 46 F0 | 	shr	local05, #14
2ad3c     0B 2E 46 F7 | 	zerox	local05, #11
2ad40     01 2E 06 F1 | 	add	local05, #1
2ad44     05 FA 05 F1 | 	add	result1, #5
2ad48     FD 30 C2 FA | 	rdbyte	local06, result1
2ad4c     18 31 42 F8 | 	getnib	local06, local06, #0
2ad50     04 FA 05 F1 | 	add	result1, #4
2ad54     FD FA E1 FA | 	rdword	result1, result1
2ad58     1B FA FD F9 | 	movbyts	result1, #27
2ad5c     17 FA 45 F0 | 	shr	result1, #23
2ad60     07 FA 05 F5 | 	and	result1, #7
2ad64     FD 30 02 F1 | 	add	local06, result1
2ad68     07 30 86 F1 | 	sub	local06, #7
2ad6c                 | LR__4083
2ad6c                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2ad6c                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2ad6c                 | '     }
2ad6c                 | '     return (LBA_t)cs << n;
2ad6c     18 2F 62 F0 | 	shl	local05, local06
2ad70     14 2F 62 FC | 	wrlong	local05, local02
2ad74     00 2A 06 F6 | 	mov	local03, #0
2ad78                 | '                			*(LBA_t*)buff = disc_size(csd);
2ad78                 | ' 				res = RES_OK;
2ad78                 | ' 			}
2ad78                 | ' 			break;
2ad78     10 00 90 FD | 	jmp	#LR__4086
2ad7c                 | LR__4084
2ad7c     14 01 69 FC | 	wrlong	#128, local02
2ad80     00 2A 06 F6 | 	mov	local03, #0
2ad84                 | ' 			*(DWORD*)buff = 128;
2ad84                 | ' 			res = RES_OK;
2ad84                 | ' 			break;
2ad84     04 00 90 FD | 	jmp	#LR__4086
2ad88                 | LR__4085
2ad88     04 2A 06 F6 | 	mov	local03, #4
2ad8c                 | LR__4086
2ad8c     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2ad90                 | ' 			res = RES_PARERR;
2ad90                 | ' 	}
2ad90                 | ' 
2ad90                 | ' 	deselect();
2ad90                 | ' 
2ad90                 | ' 	return res;
2ad90     15 FB 01 F6 | 	mov	result1, local03
2ad94                 | LR__4087
2ad94     A7 F0 03 F6 | 	mov	ptra, fp
2ad98     B2 00 A0 FD | 	call	#popregs_
2ad9c                 | _sdmm_cc_disk_ioctl_ret
2ad9c     2D 00 64 FD | 	ret
2ada0                 | 
2ada0                 | _sdmm_cc_xmit_mmc_0841
2ada0     F2 00 02 FB | 	rdlong	_var01, objptr
2ada4     08 E4 05 F1 | 	add	objptr, #8
2ada8     F2 02 02 FB | 	rdlong	_var02, objptr
2adac     08 E4 85 F1 | 	sub	objptr, #8
2adb0     40 02 62 FD | 	dirl	_var02
2adb4     28 02 64 FD | 	setq	#1
2adb8     09 05 02 FB | 	rdlong	_var03, arg01
2adbc     69 04 62 FD | 	rev	_var03
2adc0     1B 04 FE F9 | 	movbyts	_var03, #27
2adc4     01 05 22 FC | 	wypin	_var03, _var02
2adc8     0A 05 02 F6 | 	mov	_var03, arg02
2adcc     02 14 4E F0 | 	shr	arg02, #2 wz
2add0     03 04 66 F0 | 	shl	_var03, #3
2add4     00 05 22 FC | 	wypin	_var03, _var01
2add8     41 02 62 FD | 	dirh	_var02
2addc     08 12 06 F1 | 	add	arg01, #8
2ade0     69 06 62 FD | 	rev	_var04
2ade4     1B 06 FE F9 | 	movbyts	_var04, #27
2ade8                 | LR__4090
2ade8     01 07 22 5C |  if_ne	wypin	_var04, _var02
2adec     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2adf0     04 12 06 51 |  if_ne	add	arg01, #4
2adf4     69 06 62 5D |  if_ne	rev	_var04
2adf8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2adfc                 | LR__4091
2adfc     40 02 72 5D |  if_ne	testp	_var02 wc
2ae00     F8 FF 9F 1D |  if_a	jmp	#LR__4091
2ae04     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4090
2ae08                 | LR__4092
2ae08     40 00 72 FD | 	testp	_var01 wc
2ae0c     F8 FF 9F 3D |  if_ae	jmp	#LR__4092
2ae10     40 02 62 FD | 	dirl	_var02
2ae14     FF FF FF FF 
2ae18     01 FF 2B FC | 	wypin	##-1, _var02
2ae1c     41 02 62 FD | 	dirh	_var02
2ae20                 | _sdmm_cc_xmit_mmc_0841_ret
2ae20     2D 00 64 FD | 	ret
2ae24                 | 
2ae24                 | _sdmm_cc_rcvr_mmc_0848
2ae24     F2 00 02 FB | 	rdlong	_var01, objptr
2ae28     0C E4 05 F1 | 	add	objptr, #12
2ae2c     F2 02 02 FB | 	rdlong	_var02, objptr
2ae30     0C E4 85 F1 | 	sub	objptr, #12
2ae34     01 03 08 FC | 	akpin	_var02
2ae38     0A 05 0A F6 | 	mov	_var03, arg02 wz
2ae3c     02 04 4E F0 | 	shr	_var03, #2 wz
2ae40     30 00 90 AD |  if_e	jmp	#LR__4102
2ae44     02 07 02 F6 | 	mov	_var04, _var03
2ae48     05 06 66 F0 | 	shl	_var04, #5
2ae4c     00 07 22 FC | 	wypin	_var04, _var01
2ae50     01 7F 18 FC | 	wxpin	#63, _var02
2ae54                 | LR__4100
2ae54                 | LR__4101
2ae54     40 02 72 FD | 	testp	_var02 wc
2ae58     F8 FF 9F 3D |  if_ae	jmp	#LR__4101
2ae5c     01 07 8A FA | 	rdpin	_var04, _var02
2ae60     69 06 62 FD | 	rev	_var04
2ae64     1B 06 FE F9 | 	movbyts	_var04, #27
2ae68     09 07 62 FC | 	wrlong	_var04, arg01
2ae6c     04 12 06 F1 | 	add	arg01, #4
2ae70     F8 05 6E FB | 	djnz	_var03, #LR__4100
2ae74                 | LR__4102
2ae74     03 14 0E F5 | 	and	arg02, #3 wz
2ae78     24 00 90 AD |  if_e	jmp	#LR__4105
2ae7c     01 4F 18 FC | 	wxpin	#39, _var02
2ae80                 | LR__4103
2ae80     00 11 28 FC | 	wypin	#8, _var01
2ae84                 | LR__4104
2ae84     40 02 72 FD | 	testp	_var02 wc
2ae88     F8 FF 9F 3D |  if_ae	jmp	#LR__4104
2ae8c     01 07 8A FA | 	rdpin	_var04, _var02
2ae90     69 06 62 FD | 	rev	_var04
2ae94     09 07 42 FC | 	wrbyte	_var04, arg01
2ae98     01 12 06 F1 | 	add	arg01, #1
2ae9c     F8 15 6E FB | 	djnz	arg02, #LR__4103
2aea0                 | LR__4105
2aea0                 | _sdmm_cc_rcvr_mmc_0848_ret
2aea0     2D 00 64 FD | 	ret
2aea4                 | 
2aea4                 | _sdmm_cc_wait_ready_0852
2aea4     03 4A 05 F6 | 	mov	COUNT_, #3
2aea8     A8 00 A0 FD | 	call	#pushregs_
2aeac     F8 27 02 F6 | 	mov	local01, ptra
2aeb0     1A 28 62 FD | 	getct	local02
2aeb4     14 2A 06 FB | 	rdlong	local03, #20
2aeb8     01 2A 46 F0 | 	shr	local03, #1
2aebc                 | ' 	UINT tmr, tmout;
2aebc                 | ' 
2aebc                 | ' 	tmr = _cnt();
2aebc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2aebc                 | ' 	for(;;) {
2aebc     04 F0 07 F1 | 	add	ptra, #4
2aec0                 | LR__4110
2aec0     13 13 02 F6 | 	mov	arg01, local01
2aec4     01 14 06 F6 | 	mov	arg02, #1
2aec8     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aecc     13 15 C2 FA | 	rdbyte	arg02, local01
2aed0     FF 14 0E F2 | 	cmp	arg02, #255 wz
2aed4     01 FA 05 A6 |  if_e	mov	result1, #1
2aed8     1A FA 61 5D |  if_ne	getct	result1
2aedc     14 FB 81 51 |  if_ne	sub	result1, local02
2aee0     15 FB 11 52 |  if_ne	cmp	result1, local03 wc
2aee4     00 FA 05 16 |  if_a	mov	result1, #0
2aee8     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4110
2aeec     A7 F0 03 F6 | 	mov	ptra, fp
2aef0     B2 00 A0 FD | 	call	#popregs_
2aef4                 | _sdmm_cc_wait_ready_0852_ret
2aef4     2D 00 64 FD | 	ret
2aef8                 | 
2aef8                 | _sdmm_cc_deselect_0858
2aef8     00 4A 05 F6 | 	mov	COUNT_, #0
2aefc     A8 00 A0 FD | 	call	#pushregs_
2af00     F8 15 02 F6 | 	mov	arg02, ptra
2af04     04 E4 05 F1 | 	add	objptr, #4
2af08     F2 12 02 FB | 	rdlong	arg01, objptr
2af0c     04 E4 85 F1 | 	sub	objptr, #4
2af10     04 F0 07 F1 | 	add	ptra, #4
2af14     59 12 62 FD | 	drvh	arg01
2af18     1F 20 64 FD | 	waitx	#16
2af1c     0A 13 02 F6 | 	mov	arg01, arg02
2af20     01 14 06 F6 | 	mov	arg02, #1
2af24     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af28     A7 F0 03 F6 | 	mov	ptra, fp
2af2c     B2 00 A0 FD | 	call	#popregs_
2af30                 | _sdmm_cc_deselect_0858_ret
2af30     2D 00 64 FD | 	ret
2af34                 | 
2af34                 | _sdmm_cc_select_0862
2af34     01 4A 05 F6 | 	mov	COUNT_, #1
2af38     A8 00 A0 FD | 	call	#pushregs_
2af3c     F8 15 02 F6 | 	mov	arg02, ptra
2af40     04 E4 05 F1 | 	add	objptr, #4
2af44     F2 12 02 FB | 	rdlong	arg01, objptr
2af48     08 E4 05 F1 | 	add	objptr, #8
2af4c     F2 26 02 FB | 	rdlong	local01, objptr
2af50     0C E4 85 F1 | 	sub	objptr, #12
2af54     04 F0 07 F1 | 	add	ptra, #4
2af58     50 26 62 FD | 	fltl	local01
2af5c     58 12 62 FD | 	drvl	arg01
2af60     1F 20 64 FD | 	waitx	#16
2af64     41 26 62 FD | 	dirh	local01
2af68     0A 13 02 F6 | 	mov	arg01, arg02
2af6c     01 14 06 F6 | 	mov	arg02, #1
2af70     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af74     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2af78     00 FA 0D F2 | 	cmp	result1, #0 wz
2af7c     01 FA 05 56 |  if_ne	mov	result1, #1
2af80     08 00 90 5D |  if_ne	jmp	#LR__4120
2af84     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2af88                 | ' 
2af88                 | ' 	deselect();
2af88                 | ' 	return 0;
2af88     00 FA 05 F6 | 	mov	result1, #0
2af8c                 | LR__4120
2af8c     A7 F0 03 F6 | 	mov	ptra, fp
2af90     B2 00 A0 FD | 	call	#popregs_
2af94                 | _sdmm_cc_select_0862_ret
2af94     2D 00 64 FD | 	ret
2af98                 | 
2af98                 | _sdmm_cc_rcvr_datablock_0866
2af98     05 4A 05 F6 | 	mov	COUNT_, #5
2af9c     A8 00 A0 FD | 	call	#pushregs_
2afa0     09 27 02 F6 | 	mov	local01, arg01
2afa4     0A 29 02 F6 | 	mov	local02, arg02
2afa8     F8 2B 02 F6 | 	mov	local03, ptra
2afac     1A 2C 62 FD | 	getct	local04
2afb0     14 2E 06 FB | 	rdlong	local05, #20
2afb4     03 2E 46 F0 | 	shr	local05, #3
2afb8                 | ' 	UINT tmr, tmout;
2afb8                 | ' 
2afb8                 | ' 	tmr = _cnt();
2afb8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2afb8                 | ' 	for(;;) {
2afb8     04 F0 07 F1 | 	add	ptra, #4
2afbc                 | LR__4130
2afbc     15 13 02 F6 | 	mov	arg01, local03
2afc0     01 14 06 F6 | 	mov	arg02, #1
2afc4     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2afc8     15 15 C2 FA | 	rdbyte	arg02, local03
2afcc     FF 14 0E F2 | 	cmp	arg02, #255 wz
2afd0     1A FA 61 AD |  if_e	getct	result1
2afd4     FD 14 02 A6 |  if_e	mov	arg02, result1
2afd8     16 15 82 A1 |  if_e	sub	arg02, local04
2afdc     17 15 12 A2 |  if_e	cmp	arg02, local05 wc
2afe0     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4130
2afe4     15 2F C2 FA | 	rdbyte	local05, local03
2afe8     FE 2E 0E F2 | 	cmp	local05, #254 wz
2afec     00 FA 05 56 |  if_ne	mov	result1, #0
2aff0     1C 00 90 5D |  if_ne	jmp	#LR__4131
2aff4     13 13 02 F6 | 	mov	arg01, local01
2aff8     14 15 02 F6 | 	mov	arg02, local02
2affc     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b000     15 13 02 F6 | 	mov	arg01, local03
2b004     02 14 06 F6 | 	mov	arg02, #2
2b008     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b00c                 | ' 
2b00c                 | ' 	rcvr_mmc(buff, btr);
2b00c                 | ' 	rcvr_mmc(d, 2);
2b00c                 | ' 
2b00c                 | ' 	return 1;
2b00c     01 FA 05 F6 | 	mov	result1, #1
2b010                 | LR__4131
2b010     A7 F0 03 F6 | 	mov	ptra, fp
2b014     B2 00 A0 FD | 	call	#popregs_
2b018                 | _sdmm_cc_rcvr_datablock_0866_ret
2b018     2D 00 64 FD | 	ret
2b01c                 | 
2b01c                 | _sdmm_cc_xmit_datablock_0868
2b01c     03 4A 05 F6 | 	mov	COUNT_, #3
2b020     A8 00 A0 FD | 	call	#pushregs_
2b024     09 27 02 F6 | 	mov	local01, arg01
2b028     0A 29 02 F6 | 	mov	local02, arg02
2b02c     F8 2B 02 F6 | 	mov	local03, ptra
2b030     04 F0 07 F1 | 	add	ptra, #4
2b034     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b038     00 FA 0D F2 | 	cmp	result1, #0 wz
2b03c     00 FA 05 A6 |  if_e	mov	result1, #0
2b040     58 00 90 AD |  if_e	jmp	#LR__4141
2b044     15 29 42 FC | 	wrbyte	local02, local03
2b048     15 13 02 F6 | 	mov	arg01, local03
2b04c     01 14 06 F6 | 	mov	arg02, #1
2b050     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b054     14 29 E2 F8 | 	getbyte	local02, local02, #0
2b058     FD 28 0E F2 | 	cmp	local02, #253 wz
2b05c     38 00 90 AD |  if_e	jmp	#LR__4140
2b060     13 13 02 F6 | 	mov	arg01, local01
2b064     09 14 C6 F9 | 	decod	arg02, #9
2b068     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b06c     15 13 02 F6 | 	mov	arg01, local03
2b070     02 14 06 F6 | 	mov	arg02, #2
2b074     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b078     15 13 02 F6 | 	mov	arg01, local03
2b07c     01 14 06 F6 | 	mov	arg02, #1
2b080     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b084     15 2B C2 FA | 	rdbyte	local03, local03
2b088     1F 2A 06 F5 | 	and	local03, #31
2b08c     05 2A 0E F2 | 	cmp	local03, #5 wz
2b090                 | ' 			return 0;
2b090     00 FA 05 56 |  if_ne	mov	result1, #0
2b094     04 00 90 5D |  if_ne	jmp	#LR__4141
2b098                 | LR__4140
2b098                 | ' 	}
2b098                 | ' 
2b098                 | ' 	return 1;
2b098     01 FA 05 F6 | 	mov	result1, #1
2b09c                 | LR__4141
2b09c     A7 F0 03 F6 | 	mov	ptra, fp
2b0a0     B2 00 A0 FD | 	call	#popregs_
2b0a4                 | _sdmm_cc_xmit_datablock_0868_ret
2b0a4     2D 00 64 FD | 	ret
2b0a8                 | 
2b0a8                 | _sdmm_cc_send_cmd_0871
2b0a8     04 4A 05 F6 | 	mov	COUNT_, #4
2b0ac     A8 00 A0 FD | 	call	#pushregs_
2b0b0                 | _sdmm_cc_send_cmd_0871_enter
2b0b0     09 27 02 F6 | 	mov	local01, arg01
2b0b4     0A 29 02 F6 | 	mov	local02, arg02
2b0b8     F8 2B 02 F6 | 	mov	local03, ptra
2b0bc     13 FB E1 F8 | 	getbyte	result1, local01, #0
2b0c0     80 FA CD F7 | 	test	result1, #128 wz
2b0c4     08 F0 07 F1 | 	add	ptra, #8
2b0c8     20 00 90 AD |  if_e	jmp	#LR__4150
2b0cc     13 27 E2 F8 | 	getbyte	local01, local01, #0
2b0d0     7F 26 06 F5 | 	and	local01, #127
2b0d4     37 12 06 F6 | 	mov	arg01, #55
2b0d8     00 14 06 F6 | 	mov	arg02, #0
2b0dc     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b0e0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
2b0e4     02 14 16 F2 | 	cmp	arg02, #2 wc
2b0e8     BC 00 90 3D |  if_ae	jmp	#LR__4153
2b0ec                 | LR__4150
2b0ec     13 FB E1 F8 | 	getbyte	result1, local01, #0
2b0f0     0C FA 0D F2 | 	cmp	result1, #12 wz
2b0f4     14 00 90 AD |  if_e	jmp	#LR__4151
2b0f8     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b0fc     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b100     00 FA 0D F2 | 	cmp	result1, #0 wz
2b104     FF FA 05 A6 |  if_e	mov	result1, #255
2b108     9C 00 90 AD |  if_e	jmp	#LR__4153
2b10c                 | LR__4151
2b10c     13 15 E2 F8 | 	getbyte	arg02, local01, #0
2b110     40 FA 05 F6 | 	mov	result1, #64
2b114     0A FB 41 F5 | 	or	result1, arg02
2b118     15 FB 41 FC | 	wrbyte	result1, local03
2b11c     15 15 02 F6 | 	mov	arg02, local03
2b120     01 14 06 F1 | 	add	arg02, #1
2b124     1B 28 FE F9 | 	movbyts	local02, #27
2b128     0A 29 62 FC | 	wrlong	local02, arg02
2b12c     01 2C 06 F6 | 	mov	local04, #1
2b130     13 29 02 F6 | 	mov	local02, local01
2b134     07 28 4E F7 | 	zerox	local02, #7 wz
2b138     95 2C 06 A6 |  if_e	mov	local04, #149
2b13c     13 29 E2 F8 | 	getbyte	local02, local01, #0
2b140     08 28 0E F2 | 	cmp	local02, #8 wz
2b144     87 2C 06 A6 |  if_e	mov	local04, #135
2b148     05 2A 06 F1 | 	add	local03, #5
2b14c     15 2D 42 FC | 	wrbyte	local04, local03
2b150     05 2A 86 F1 | 	sub	local03, #5
2b154     15 13 02 F6 | 	mov	arg01, local03
2b158     06 14 06 F6 | 	mov	arg02, #6
2b15c     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b160     13 27 E2 F8 | 	getbyte	local01, local01, #0
2b164     0C 26 0E F2 | 	cmp	local01, #12 wz
2b168     15 13 02 A6 |  if_e	mov	arg01, local03
2b16c     06 12 06 A1 |  if_e	add	arg01, #6
2b170     01 14 06 A6 |  if_e	mov	arg02, #1
2b174     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2b178     0A 2C 06 F6 | 	mov	local04, #10
2b17c                 | ' 	n = 10;
2b17c                 | ' 	do
2b17c                 | LR__4152
2b17c     15 13 02 F6 | 	mov	arg01, local03
2b180     06 12 06 F1 | 	add	arg01, #6
2b184     01 14 06 F6 | 	mov	arg02, #1
2b188     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b18c     06 2A 06 F1 | 	add	local03, #6
2b190     15 29 C2 FA | 	rdbyte	local02, local03
2b194     06 2A 86 F1 | 	sub	local03, #6
2b198     80 28 CE F7 | 	test	local02, #128 wz
2b19c     F7 2D 6E 5B |  if_ne	djnz	local04, #LR__4152
2b1a0                 | ' 
2b1a0                 | ' 	return buf[6];
2b1a0     06 2A 06 F1 | 	add	local03, #6
2b1a4     15 FB C1 FA | 	rdbyte	result1, local03
2b1a8                 | LR__4153
2b1a8     A7 F0 03 F6 | 	mov	ptra, fp
2b1ac     B2 00 A0 FD | 	call	#popregs_
2b1b0                 | _sdmm_cc_send_cmd_0871_ret
2b1b0     2D 00 64 FD | 	ret
2b1b4                 | 
2b1b4                 | _sdmm_cc_v_do_io
2b1b4     08 4A 05 F6 | 	mov	COUNT_, #8
2b1b8     A8 00 A0 FD | 	call	#pushregs_
2b1bc     0B 27 02 F6 | 	mov	local01, arg03
2b1c0     0C 29 02 F6 | 	mov	local02, arg04
2b1c4     0A 2B 02 F6 | 	mov	local03, arg02
2b1c8     18 E4 05 F1 | 	add	objptr, #24
2b1cc     F2 2C 02 FB | 	rdlong	local04, objptr
2b1d0     00 18 06 F6 | 	mov	arg04, #0
2b1d4     FF 2D 06 F5 | 	and	local04, #511
2b1d8     00 2E 06 F6 | 	mov	local05, #0
2b1dc     F2 12 02 FB | 	rdlong	arg01, objptr
2b1e0     04 E4 05 F1 | 	add	objptr, #4
2b1e4     F2 14 02 FB | 	rdlong	arg02, objptr
2b1e8     1C E4 85 F1 | 	sub	objptr, #28
2b1ec     09 16 06 F6 | 	mov	arg03, #9
2b1f0     24 B9 BF FD | 	call	#__system___int64_sar
2b1f4     FD 30 02 F6 | 	mov	local06, result1
2b1f8     00 2C 0E F2 | 	cmp	local04, #0 wz
2b1fc                 | ' 
2b1fc                 | ' 
2b1fc                 | '         return -1;
2b1fc     01 FA 65 56 |  if_ne	neg	result1, #1
2b200     84 00 90 5D |  if_ne	jmp	#LR__4163
2b204     13 33 02 F6 | 	mov	local07, local01
2b208     09 32 46 F0 | 	shr	local07, #9
2b20c     00 28 0E F2 | 	cmp	local02, #0 wz
2b210     1C 00 90 AD |  if_e	jmp	#LR__4160
2b214     00 12 06 F6 | 	mov	arg01, #0
2b218     15 15 02 F6 | 	mov	arg02, local03
2b21c     18 17 02 F6 | 	mov	arg03, local06
2b220     19 19 02 F6 | 	mov	arg04, local07
2b224     38 F9 BF FD | 	call	#_sdmm_cc_disk_write
2b228     FD 34 02 F6 | 	mov	local08, result1
2b22c     18 00 90 FD | 	jmp	#LR__4161
2b230                 | LR__4160
2b230     00 12 06 F6 | 	mov	arg01, #0
2b234     15 15 02 F6 | 	mov	arg02, local03
2b238     18 17 02 F6 | 	mov	arg03, local06
2b23c     19 19 02 F6 | 	mov	arg04, local07
2b240     5C F8 BF FD | 	call	#_sdmm_cc_disk_read
2b244     FD 34 02 F6 | 	mov	local08, result1
2b248                 | LR__4161
2b248     00 34 0E F2 | 	cmp	local08, #0 wz
2b24c     34 00 90 5D |  if_ne	jmp	#LR__4162
2b250     09 32 66 F0 | 	shl	local07, #9
2b254     19 2F 02 F1 | 	add	local05, local07
2b258     18 E4 05 F1 | 	add	objptr, #24
2b25c     F2 FA 01 FB | 	rdlong	result1, objptr
2b260     04 E4 05 F1 | 	add	objptr, #4
2b264     F2 FC 01 FB | 	rdlong	result2, objptr
2b268     19 FB 11 F1 | 	add	result1, local07 wc
2b26c     00 FC 25 F1 | 	addx	result2, #0
2b270     04 E4 85 F1 | 	sub	objptr, #4
2b274     F2 FA 61 FC | 	wrlong	result1, objptr
2b278     04 E4 05 F1 | 	add	objptr, #4
2b27c     F2 FC 61 FC | 	wrlong	result2, objptr
2b280     1C E4 85 F1 | 	sub	objptr, #28
2b284                 | LR__4162
2b284                 | ' 
2b284                 | ' 
2b284                 | '     }
2b284                 | '     return bytes_io;
2b284     17 FB 01 F6 | 	mov	result1, local05
2b288                 | LR__4163
2b288     A7 F0 03 F6 | 	mov	ptra, fp
2b28c     B2 00 A0 FD | 	call	#popregs_
2b290                 | _sdmm_cc_v_do_io_ret
2b290     2D 00 64 FD | 	ret
2b294                 | 
2b294                 | _sdmm_cc_v_read
2b294                 | ' {
2b294                 | '     return v_do_io(fil, buf, count,  (0) );
2b294     00 18 06 F6 | 	mov	arg04, #0
2b298     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2b29c                 | _sdmm_cc_v_read_ret
2b29c     2D 00 64 FD | 	ret
2b2a0                 | 
2b2a0                 | _sdmm_cc_v_write
2b2a0                 | ' {
2b2a0                 | '     return v_do_io(fil, buf, count,  (1) );
2b2a0     01 18 06 F6 | 	mov	arg04, #1
2b2a4     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2b2a8                 | _sdmm_cc_v_write_ret
2b2a8     2D 00 64 FD | 	ret
2b2ac                 | 
2b2ac                 | _sdmm_cc_v_ioctl
2b2ac     00 12 06 F6 | 	mov	arg01, #0
2b2b0     B4 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2b2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2b8                 | '         return _seterror( 10 );
2b2b8     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2b2bc     F3 14 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2b2c0     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2b2c4     01 FA 65 56 |  if_ne	neg	result1, #1
2b2c8                 | '     return 0;
2b2c8     00 FA 05 A6 |  if_e	mov	result1, #0
2b2cc                 | _sdmm_cc_v_ioctl_ret
2b2cc     2D 00 64 FD | 	ret
2b2d0                 | 
2b2d0                 | _sdmm_cc_v_lseek
2b2d0     0A 01 02 F6 | 	mov	_var01, arg02
2b2d4     0C 05 0A F6 | 	mov	_var03, arg04 wz
2b2d8     18 E4 05 A1 |  if_e	add	objptr, #24
2b2dc     F2 00 62 AC |  if_e	wrlong	_var01, objptr
2b2e0     04 E4 05 A1 |  if_e	add	objptr, #4
2b2e4     F2 16 62 AC |  if_e	wrlong	arg03, objptr
2b2e8     1C E4 85 A1 |  if_e	sub	objptr, #28
2b2ec     64 00 90 AD |  if_e	jmp	#LR__4172
2b2f0     01 04 0E F2 | 	cmp	_var03, #1 wz
2b2f4     30 00 90 5D |  if_ne	jmp	#LR__4170
2b2f8     18 E4 05 F1 | 	add	objptr, #24
2b2fc     F2 FA 01 FB | 	rdlong	result1, objptr
2b300     04 E4 05 F1 | 	add	objptr, #4
2b304     F2 FC 01 FB | 	rdlong	result2, objptr
2b308     00 FB 11 F1 | 	add	result1, _var01 wc
2b30c     0B FD 21 F1 | 	addx	result2, arg03
2b310     04 E4 85 F1 | 	sub	objptr, #4
2b314     F2 FA 61 FC | 	wrlong	result1, objptr
2b318     04 E4 05 F1 | 	add	objptr, #4
2b31c     F2 FC 61 FC | 	wrlong	result2, objptr
2b320     1C E4 85 F1 | 	sub	objptr, #28
2b324     2C 00 90 FD | 	jmp	#LR__4171
2b328                 | LR__4170
2b328     00 FB 21 F6 | 	not	result1, _var01
2b32c     01 FA 0D F1 | 	add	result1, #1 wz
2b330     0B FD 21 F6 | 	not	result2, arg03
2b334     00 14 06 F6 | 	mov	arg02, #0
2b338     01 14 66 A6 |  if_e	neg	arg02, #1
2b33c     0A FD 81 F1 | 	sub	result2, arg02
2b340     18 E4 05 F1 | 	add	objptr, #24
2b344     F2 FA 61 FC | 	wrlong	result1, objptr
2b348     04 E4 05 F1 | 	add	objptr, #4
2b34c     F2 FC 61 FC | 	wrlong	result2, objptr
2b350     1C E4 85 F1 | 	sub	objptr, #28
2b354                 | LR__4171
2b354                 | LR__4172
2b354                 | '         curpos = -off;
2b354                 | '     }
2b354                 | '     return curpos;
2b354     18 E4 05 F1 | 	add	objptr, #24
2b358     F2 FA 01 FB | 	rdlong	result1, objptr
2b35c     04 E4 05 F1 | 	add	objptr, #4
2b360     F2 FC 01 FB | 	rdlong	result2, objptr
2b364     1C E4 85 F1 | 	sub	objptr, #28
2b368                 | _sdmm_cc_v_lseek_ret
2b368     2D 00 64 FD | 	ret
2b36c                 | 
2b36c                 | _sdmm_cc_v_flush
2b36c                 | ' {
2b36c                 | '     return 0;
2b36c     00 FA 05 F6 | 	mov	result1, #0
2b370                 | _sdmm_cc_v_flush_ret
2b370     2D 00 64 FD | 	ret
2b374                 | 
2b374                 | _sdmm_cc_v_close
2b374     03 4A 05 F6 | 	mov	COUNT_, #3
2b378     A8 00 A0 FD | 	call	#pushregs_
2b37c     F2 14 02 FB | 	rdlong	arg02, objptr
2b380     04 E4 05 F1 | 	add	objptr, #4
2b384     F2 26 02 FB | 	rdlong	local01, objptr
2b388     04 E4 05 F1 | 	add	objptr, #4
2b38c     F2 28 02 FB | 	rdlong	local02, objptr
2b390     08 E4 05 F1 | 	add	objptr, #8
2b394     F2 2A 02 FB | 	rdlong	local03, objptr
2b398     04 E4 85 F1 | 	sub	objptr, #4
2b39c     F2 12 02 FB | 	rdlong	arg01, objptr
2b3a0     0C E4 85 F1 | 	sub	objptr, #12
2b3a4                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b3a4                 | '         return RES_NOTRDY;
2b3a4     50 12 62 FD | 	fltl	arg01
2b3a8     09 01 08 FC | 	wrpin	#0, arg01
2b3ac     50 2A 62 FD | 	fltl	local03
2b3b0     15 01 08 FC | 	wrpin	#0, local03
2b3b4     50 28 62 FD | 	fltl	local02
2b3b8     14 01 08 FC | 	wrpin	#0, local02
2b3bc     50 14 62 FD | 	fltl	arg02
2b3c0     0A 01 08 FC | 	wrpin	#0, arg02
2b3c4     50 26 62 FD | 	fltl	local01
2b3c8     13 01 08 FC | 	wrpin	#0, local01
2b3cc     0A 12 06 F6 | 	mov	arg01, #10
2b3d0     70 9F BF FD | 	call	#__system___waitms
2b3d4                 | '     }
2b3d4                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b3d4                 | '     _pinclear(SMPIN_DO);
2b3d4                 | '     _pinclear(PIN_DO);
2b3d4                 | '     _pinclear(PIN_DI);
2b3d4                 | '     _pinclear(PIN_CLK);
2b3d4                 | '     _pinclear(PIN_SS);
2b3d4                 | ' 
2b3d4                 | '     _waitms(10);
2b3d4                 | ' 
2b3d4                 | '     return 0;
2b3d4     20 E4 05 F1 | 	add	objptr, #32
2b3d8     F2 12 02 FB | 	rdlong	arg01, objptr
2b3dc     04 E4 05 F1 | 	add	objptr, #4
2b3e0     F2 14 02 FB | 	rdlong	arg02, objptr
2b3e4     24 E4 85 F1 | 	sub	objptr, #36
2b3e8     60 B7 BF FD | 	call	#__system___freepins
2b3ec                 | ' {
2b3ec                 | '     disk_deinitialize(0);
2b3ec                 | '     _freepins(f_pinmask);
2b3ec                 | '     return 0;
2b3ec     00 FA 05 F6 | 	mov	result1, #0
2b3f0     A7 F0 03 F6 | 	mov	ptra, fp
2b3f4     B2 00 A0 FD | 	call	#popregs_
2b3f8                 | _sdmm_cc_v_close_ret
2b3f8     2D 00 64 FD | 	ret
2b3fc                 | 
2b3fc                 | _sdmm_cc_v_putc
2b3fc     00 4A 05 F6 | 	mov	COUNT_, #0
2b400     A8 00 A0 FD | 	call	#pushregs_
2b404     0C F0 07 F1 | 	add	ptra, #12
2b408     04 4E 05 F1 | 	add	fp, #4
2b40c     A7 12 62 FC | 	wrlong	arg01, fp
2b410     0A 13 02 F6 | 	mov	arg01, arg02
2b414     A7 14 02 F6 | 	mov	arg02, fp
2b418     01 16 06 F6 | 	mov	arg03, #1
2b41c     04 4E 85 F1 | 	sub	fp, #4
2b420                 | ' {
2b420                 | '     return v_do_io(fil, buf, count,  (1) );
2b420     01 18 06 F6 | 	mov	arg04, #1
2b424     8C FD BF FD | 	call	#_sdmm_cc_v_do_io
2b428     01 FA 0D F2 | 	cmp	result1, #1 wz
2b42c     04 4E 05 A1 |  if_e	add	fp, #4
2b430     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b434     04 4E 85 A1 |  if_e	sub	fp, #4
2b438                 | '     return -1;
2b438     01 FA 65 56 |  if_ne	neg	result1, #1
2b43c     A7 F0 03 F6 | 	mov	ptra, fp
2b440     B2 00 A0 FD | 	call	#popregs_
2b444                 | _sdmm_cc_v_putc_ret
2b444     2D 00 64 FD | 	ret
2b448                 | 
2b448                 | _sdmm_cc_v_getc
2b448     00 4A 05 F6 | 	mov	COUNT_, #0
2b44c     A8 00 A0 FD | 	call	#pushregs_
2b450     0C F0 07 F1 | 	add	ptra, #12
2b454     08 4E 05 F1 | 	add	fp, #8
2b458     A7 00 68 FC | 	wrlong	#0, fp
2b45c     A7 14 02 F6 | 	mov	arg02, fp
2b460     08 4E 85 F1 | 	sub	fp, #8
2b464     01 16 06 F6 | 	mov	arg03, #1
2b468                 | ' {
2b468                 | '     return v_do_io(fil, buf, count,  (0) );
2b468     00 18 06 F6 | 	mov	arg04, #0
2b46c     44 FD BF FD | 	call	#_sdmm_cc_v_do_io
2b470     01 FA 0D F2 | 	cmp	result1, #1 wz
2b474     08 4E 05 A1 |  if_e	add	fp, #8
2b478     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b47c     08 4E 85 A1 |  if_e	sub	fp, #8
2b480                 | '     return -1;
2b480     01 FA 65 56 |  if_ne	neg	result1, #1
2b484     A7 F0 03 F6 | 	mov	ptra, fp
2b488     B2 00 A0 FD | 	call	#popregs_
2b48c                 | _sdmm_cc_v_getc_ret
2b48c     2D 00 64 FD | 	ret
2b490                 | 
2b490                 | _fatfs_cc_ff_uni2oem
2b490     00 00 06 F6 | 	mov	_var01, #0
2b494     80 12 16 F2 | 	cmp	arg01, #128 wc
2b498     09 01 02 C6 |  if_b	mov	_var01, arg01
2b49c     58 00 90 CD |  if_b	jmp	#LR__4183
2b4a0     80 00 00 FF 
2b4a4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2b4a8     4C 00 90 3D |  if_ae	jmp	#LR__4182
2b4ac     0A FB 31 F9 | 	getword	result1, arg02, #0
2b4b0     01 00 00 FF 
2b4b4     52 FB 0D F2 | 	cmp	result1, ##850 wz
2b4b8     3C 00 90 5D |  if_ne	jmp	#LR__4182
2b4bc                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2b4bc     00 00 06 F6 | 	mov	_var01, #0
2b4c0     97 14 48 FB | 	callpa	#(@LR__4181-@LR__4180)>>2,fcache_load_ptr_
2b4c4                 | LR__4180
2b4c4     00 FB 31 F9 | 	getword	result1, _var01, #0
2b4c8     80 FA 15 F2 | 	cmp	result1, #128 wc
2b4cc     00 03 02 C6 |  if_b	mov	_var02, _var01
2b4d0     01 03 32 C9 |  if_b	getword	_var02, _var02, #0
2b4d4     01 02 66 C0 |  if_b	shl	_var02, #1
2b4d8     F6 02 02 C1 |  if_b	add	_var02, ptr__fatfs_cc_dat__
2b4dc     01 05 E2 CA |  if_b	rdword	_var03, _var02
2b4e0     02 13 0A C2 |  if_b	cmp	arg01, _var03 wz
2b4e4     01 00 06 41 |  if_c_and_nz	add	_var01, #1
2b4e8     D8 FF 9F 4D |  if_c_and_nz	jmp	#LR__4180
2b4ec                 | LR__4181
2b4ec     00 01 32 F9 | 	getword	_var01, _var01, #0
2b4f0     80 00 06 F1 | 	add	_var01, #128
2b4f4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2b4f8                 | LR__4182
2b4f8                 | LR__4183
2b4f8                 | ' 			c = (c + 0x80) & 0xFF;
2b4f8                 | ' 		}
2b4f8                 | ' 	}
2b4f8                 | ' 
2b4f8                 | ' 	return c;
2b4f8     00 FB 01 F6 | 	mov	result1, _var01
2b4fc                 | _fatfs_cc_ff_uni2oem_ret
2b4fc     2D 00 64 FD | 	ret
2b500                 | 
2b500                 | _fatfs_cc_ff_oem2uni
2b500     00 00 06 F6 | 	mov	_var01, #0
2b504     09 03 32 F9 | 	getword	_var02, arg01, #0
2b508     80 02 16 F2 | 	cmp	_var02, #128 wc
2b50c     09 01 02 C6 |  if_b	mov	_var01, arg01
2b510     28 00 90 CD |  if_b	jmp	#LR__4190
2b514     0A 15 32 F9 | 	getword	arg02, arg02, #0
2b518     01 00 00 FF 
2b51c     52 15 0E F2 | 	cmp	arg02, ##850 wz
2b520     09 03 32 A9 |  if_e	getword	_var02, arg01, #0
2b524     00 03 16 A2 |  if_e	cmp	_var02, #256 wc
2b528     09 13 32 89 |  if_c_and_z	getword	arg01, arg01, #0
2b52c     80 12 86 81 |  if_c_and_z	sub	arg01, #128
2b530     01 12 66 80 |  if_c_and_z	shl	arg01, #1
2b534     F6 12 02 81 |  if_c_and_z	add	arg01, ptr__fatfs_cc_dat__
2b538     09 01 E2 8A |  if_c_and_z	rdword	_var01, arg01
2b53c                 | LR__4190
2b53c                 | ' 		}
2b53c                 | ' 	}
2b53c                 | ' 
2b53c                 | ' 	return c;
2b53c     00 FB 01 F6 | 	mov	result1, _var01
2b540                 | _fatfs_cc_ff_oem2uni_ret
2b540     2D 00 64 FD | 	ret
2b544                 | 
2b544                 | _fatfs_cc_ff_wtoupper
2b544     09 01 02 F6 | 	mov	_var01, arg01
2b548     80 00 00 FF 
2b54c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2b550     5C 01 90 3D |  if_ae	jmp	#LR__4213
2b554     00 03 02 F6 | 	mov	_var02, _var01
2b558     01 05 32 F9 | 	getword	_var03, _var02, #0
2b55c     08 00 00 FF 
2b560     00 04 16 F2 | 	cmp	_var03, ##4096 wc
2b564     F6 06 02 C6 |  if_b	mov	_var04, ptr__fatfs_cc_dat__
2b568     00 07 06 C1 |  if_b	add	_var04, #256
2b56c     F6 06 02 36 |  if_ae	mov	_var04, ptr__fatfs_cc_dat__
2b570     01 00 00 3F 
2b574     F2 06 06 31 |  if_ae	add	_var04, ##754
2b578     03 09 02 F6 | 	mov	_var05, _var04
2b57c                 | ' 		uc = (WORD)uni;
2b57c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2b57c                 | ' 		for (;;) {
2b57c                 | LR__4200
2b57c     04 0B E2 FA | 	rdword	_var06, _var05
2b580     05 07 02 F6 | 	mov	_var04, _var06
2b584     0F 06 4E F7 | 	zerox	_var04, #15 wz
2b588     02 08 06 F1 | 	add	_var05, #2
2b58c     01 05 02 56 |  if_ne	mov	_var03, _var02
2b590     02 05 32 59 |  if_ne	getword	_var03, _var03, #0
2b594     05 07 02 56 |  if_ne	mov	_var04, _var06
2b598     03 07 32 59 |  if_ne	getword	_var04, _var04, #0
2b59c     03 05 12 52 |  if_ne	cmp	_var03, _var04 wc
2b5a0     08 01 90 ED |  if_be	jmp	#LR__4212
2b5a4     04 0D E2 FA | 	rdword	_var07, _var05
2b5a8     06 0F 32 F9 | 	getword	_var08, _var07, #0
2b5ac     08 0E 46 F0 | 	shr	_var08, #8
2b5b0     06 0D 32 F9 | 	getword	_var07, _var07, #0
2b5b4     06 0D E2 F8 | 	getbyte	_var07, _var07, #0
2b5b8     01 07 32 F9 | 	getword	_var04, _var02, #0
2b5bc     05 05 32 F9 | 	getword	_var03, _var06, #0
2b5c0     06 01 32 F9 | 	getword	_var01, _var07, #0
2b5c4     00 05 02 F1 | 	add	_var03, _var01
2b5c8     02 07 52 F2 | 	cmps	_var04, _var03 wc
2b5cc     02 08 06 F1 | 	add	_var05, #2
2b5d0     C4 00 90 3D |  if_ae	jmp	#LR__4211
2b5d4                 | ' 				switch (cmd) {
2b5d4     07 11 32 F9 | 	getword	_var09, _var08, #0
2b5d8     09 10 26 F3 | 	fle	_var09, #9
2b5dc     30 10 62 FD | 	jmprel	_var09
2b5e0                 | LR__4201
2b5e0     24 00 90 FD | 	jmp	#LR__4202
2b5e4     3C 00 90 FD | 	jmp	#LR__4203
2b5e8     54 00 90 FD | 	jmp	#LR__4204
2b5ec     5C 00 90 FD | 	jmp	#LR__4205
2b5f0     64 00 90 FD | 	jmp	#LR__4206
2b5f4     6C 00 90 FD | 	jmp	#LR__4207
2b5f8     74 00 90 FD | 	jmp	#LR__4208
2b5fc     7C 00 90 FD | 	jmp	#LR__4209
2b600     84 00 90 FD | 	jmp	#LR__4210
2b604     A4 00 90 FD | 	jmp	#LR__4212
2b608                 | LR__4202
2b608     01 03 32 F9 | 	getword	_var02, _var02, #0
2b60c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2b610     05 03 82 F1 | 	sub	_var02, _var06
2b614     01 02 66 F0 | 	shl	_var02, #1
2b618     04 03 02 F1 | 	add	_var02, _var05
2b61c     01 03 E2 FA | 	rdword	_var02, _var02
2b620     88 00 90 FD | 	jmp	#LR__4212
2b624                 | LR__4203
2b624     01 07 32 F9 | 	getword	_var04, _var02, #0
2b628     01 03 32 F9 | 	getword	_var02, _var02, #0
2b62c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2b630     05 03 82 F1 | 	sub	_var02, _var06
2b634     01 02 06 F5 | 	and	_var02, #1
2b638     03 03 C2 F2 | 	subr	_var02, _var04
2b63c     6C 00 90 FD | 	jmp	#LR__4212
2b640                 | LR__4204
2b640     01 03 32 F9 | 	getword	_var02, _var02, #0
2b644     10 02 86 F1 | 	sub	_var02, #16
2b648     60 00 90 FD | 	jmp	#LR__4212
2b64c                 | LR__4205
2b64c     01 03 32 F9 | 	getword	_var02, _var02, #0
2b650     20 02 86 F1 | 	sub	_var02, #32
2b654     54 00 90 FD | 	jmp	#LR__4212
2b658                 | LR__4206
2b658     01 03 32 F9 | 	getword	_var02, _var02, #0
2b65c     30 02 86 F1 | 	sub	_var02, #48
2b660     48 00 90 FD | 	jmp	#LR__4212
2b664                 | LR__4207
2b664     01 03 32 F9 | 	getword	_var02, _var02, #0
2b668     1A 02 86 F1 | 	sub	_var02, #26
2b66c     3C 00 90 FD | 	jmp	#LR__4212
2b670                 | LR__4208
2b670     01 03 32 F9 | 	getword	_var02, _var02, #0
2b674     08 02 06 F1 | 	add	_var02, #8
2b678     30 00 90 FD | 	jmp	#LR__4212
2b67c                 | LR__4209
2b67c     01 03 32 F9 | 	getword	_var02, _var02, #0
2b680     50 02 86 F1 | 	sub	_var02, #80
2b684     24 00 90 FD | 	jmp	#LR__4212
2b688                 | LR__4210
2b688     01 03 32 F9 | 	getword	_var02, _var02, #0
2b68c     0E 00 00 FF 
2b690     60 02 86 F1 | 	sub	_var02, ##7264
2b694                 | ' 				}
2b694                 | ' 				break;
2b694     14 00 90 FD | 	jmp	#LR__4212
2b698                 | LR__4211
2b698     0F 0E 4E F7 | 	zerox	_var08, #15 wz
2b69c     06 0D 32 A9 |  if_e	getword	_var07, _var07, #0
2b6a0     01 0C 66 A0 |  if_e	shl	_var07, #1
2b6a4     06 09 02 A1 |  if_e	add	_var05, _var07
2b6a8     D0 FE 9F FD | 	jmp	#LR__4200
2b6ac                 | LR__4212
2b6ac     01 01 32 F9 | 	getword	_var01, _var02, #0
2b6b0                 | LR__4213
2b6b0                 | ' 		}
2b6b0                 | ' 		uni = uc;
2b6b0                 | ' 	}
2b6b0                 | ' 
2b6b0                 | ' 	return uni;
2b6b0     00 FB 01 F6 | 	mov	result1, _var01
2b6b4                 | _fatfs_cc_ff_wtoupper_ret
2b6b4     2D 00 64 FD | 	ret
2b6b8                 | 
2b6b8                 | _fatfs_cc_memcmp
2b6b8                 | ' 	for (n = size; n > 0; n--)
2b6b8     00 16 0E F2 | 	cmp	arg03, #0 wz
2b6bc     28 00 90 AD |  if_e	jmp	#LR__4221
2b6c0                 | LR__4220
2b6c0     09 01 C2 FA | 	rdbyte	_var01, arg01
2b6c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
2b6c8     01 01 0A F2 | 	cmp	_var01, _var02 wz
2b6cc     01 12 06 A1 |  if_e	add	arg01, #1
2b6d0     01 14 06 A1 |  if_e	add	arg02, #1
2b6d4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2b6d4     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2b6d8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2b6dc     01 FB 81 51 |  if_ne	sub	result1, _var02
2b6e0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2b6e4     F6 17 6E FB | 	djnz	arg03, #LR__4220
2b6e8                 | LR__4221
2b6e8                 | ' 
2b6e8                 | ' 	return(0);
2b6e8     00 FA 05 F6 | 	mov	result1, #0
2b6ec                 | _fatfs_cc_memcmp_ret
2b6ec     2D 00 64 FD | 	ret
2b6f0                 | 
2b6f0                 | _fatfs_cc_strncmp
2b6f0     09 01 0A F6 | 	mov	_var01, arg01 wz
2b6f4     14 00 90 5D |  if_ne	jmp	#LR__4230
2b6f8                 | ' 		return scan2 ? -1 : 0;
2b6f8     00 14 0E F2 | 	cmp	arg02, #0 wz
2b6fc     01 02 66 56 |  if_ne	neg	_var02, #1
2b700     00 02 06 A6 |  if_e	mov	_var02, #0
2b704     01 FB 01 F6 | 	mov	result1, _var02
2b708     70 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2b70c                 | LR__4230
2b70c     00 14 0E F2 | 	cmp	arg02, #0 wz
2b710     01 FA 05 A6 |  if_e	mov	result1, #1
2b714     64 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2b718     0B 05 02 F6 | 	mov	_var03, arg03
2b71c     97 16 48 FB | 	callpa	#(@LR__4232-@LR__4231)>>2,fcache_load_ptr_
2b720                 | ' 	count = n;
2b720                 | ' 	do {
2b720                 | LR__4231
2b720     00 07 C2 FA | 	rdbyte	_var04, _var01
2b724     0A 09 02 F6 | 	mov	_var05, arg02
2b728     04 0B C2 FA | 	rdbyte	_var06, _var05
2b72c     01 04 86 F1 | 	sub	_var03, #1
2b730     00 04 56 F2 | 	cmps	_var03, #0 wc
2b734     01 00 06 F1 | 	add	_var01, #1
2b738     01 14 06 F1 | 	add	arg02, #1
2b73c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2b740     08 00 90 2D |  if_nc_and_z	jmp	#LR__4233
2b744     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2b748     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4231
2b74c                 | LR__4232
2b74c                 | LR__4233
2b74c     00 04 56 F2 | 	cmps	_var03, #0 wc
2b750                 | ' 		return(0);
2b750     00 FA 05 C6 |  if_b	mov	result1, #0
2b754     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2b758                 | ' 		return(0);
2b758     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2b75c     1C 00 90 2D |  if_nc_and_z	jmp	#_fatfs_cc_strncmp_ret
2b760     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2b764                 | ' 		return(-1);
2b764     01 FA 65 26 |  if_nc_and_z	neg	result1, #1
2b768     10 00 90 2D |  if_nc_and_z	jmp	#_fatfs_cc_strncmp_ret
2b76c     00 0A 0E 32 |  if_ae	cmp	_var06, #0 wz
2b770                 | ' 		return(1);
2b770     01 FA 05 26 |  if_nc_and_z	mov	result1, #1
2b774                 | ' 		return(c1 - c2);
2b774     03 FB 01 16 |  if_a	mov	result1, _var04
2b778     05 FB 81 11 |  if_a	sub	result1, _var06
2b77c                 | _fatfs_cc_strncmp_ret
2b77c     2D 00 64 FD | 	ret
2b780                 | 
2b780                 | _fatfs_cc_strchr
2b780                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/libc/string/strchr.c"
2b780                 | ' 	while ((c = *s++) != (char) charwanted)
2b780                 | LR__4240
2b780     09 01 02 F6 | 	mov	_var01, arg01
2b784     00 03 C2 FA | 	rdbyte	_var02, _var01
2b788     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2b78c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2b790     03 05 0A F2 | 	cmp	_var03, _var04 wz
2b794     01 12 06 F1 | 	add	arg01, #1
2b798     14 00 90 AD |  if_e	jmp	#LR__4241
2b79c     01 05 02 F6 | 	mov	_var03, _var02
2b7a0     07 04 4E F7 | 	zerox	_var03, #7 wz
2b7a4     00 FA 05 A6 |  if_e	mov	result1, #0
2b7a8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2b7ac     D0 FF 9F FD | 	jmp	#LR__4240
2b7b0                 | LR__4241
2b7b0                 | ' 	return((char *)--s);
2b7b0     01 12 86 F1 | 	sub	arg01, #1
2b7b4     09 FB 01 F6 | 	mov	result1, arg01
2b7b8                 | _fatfs_cc_strchr_ret
2b7b8     2D 00 64 FD | 	ret
2b7bc                 | 
2b7bc                 | _fatfs_cc_time
2b7bc     01 4A 05 F6 | 	mov	COUNT_, #1
2b7c0     A8 00 A0 FD | 	call	#pushregs_
2b7c4     14 F0 07 F1 | 	add	ptra, #20
2b7c8     09 27 02 F6 | 	mov	local01, arg01
2b7cc     A7 12 02 F6 | 	mov	arg01, fp
2b7d0     08 12 06 F1 | 	add	arg01, #8
2b7d4     00 14 06 F6 | 	mov	arg02, #0
2b7d8     A8 5C B0 FD | 	call	#_fatfs_cc_gettimeofday
2b7dc     08 4E 05 F1 | 	add	fp, #8
2b7e0     A7 FA 01 FB | 	rdlong	result1, fp
2b7e4     08 4E 85 F1 | 	sub	fp, #8
2b7e8     00 26 0E F2 | 	cmp	local01, #0 wz
2b7ec     13 FB 61 5C |  if_ne	wrlong	result1, local01
2b7f0                 | '         *tp = now;
2b7f0                 | '     return now;
2b7f0     A7 F0 03 F6 | 	mov	ptra, fp
2b7f4     B2 00 A0 FD | 	call	#popregs_
2b7f8                 | _fatfs_cc_time_ret
2b7f8     2D 00 64 FD | 	ret
2b7fc                 | 
2b7fc                 | _fatfs_cc_mktime
2b7fc     07 4A 05 F6 | 	mov	COUNT_, #7
2b800     A8 00 A0 FD | 	call	#pushregs_
2b804     09 27 02 F6 | 	mov	local01, arg01
2b808     14 26 06 F1 | 	add	local01, #20
2b80c     13 13 02 FB | 	rdlong	arg01, local01
2b810     14 26 86 F1 | 	sub	local01, #20
2b814     46 12 56 F2 | 	cmps	arg01, #70 wc
2b818                 | '                 return (time_t) -1;
2b818     01 FA 65 C6 |  if_b	neg	result1, #1
2b81c     70 01 90 CD |  if_b	jmp	#LR__4252
2b820     03 00 00 FF 
2b824     6C 29 06 F6 | 	mov	local02, ##1900
2b828     14 26 06 F1 | 	add	local01, #20
2b82c     13 FB 01 FB | 	rdlong	result1, local01
2b830     FD 28 02 F1 | 	add	local02, result1
2b834     08 26 86 F1 | 	sub	local01, #8
2b838     13 2B 02 FB | 	rdlong	local03, local01
2b83c     01 2A 86 F1 | 	sub	local03, #1
2b840     04 26 06 F1 | 	add	local01, #4
2b844     13 13 02 FB | 	rdlong	arg01, local01
2b848     10 26 86 F1 | 	sub	local01, #16
2b84c     02 12 66 F0 | 	shl	arg01, #2
2b850     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2b854     02 00 00 FF 
2b858     78 FA 05 F1 | 	add	result1, ##1144
2b85c     FD 12 02 F1 | 	add	arg01, result1
2b860     09 2D 02 FB | 	rdlong	local04, arg01
2b864     16 2B 02 F1 | 	add	local03, local04
2b868     14 13 02 F6 | 	mov	arg01, local02
2b86c     C0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2b870     00 FA 0D F2 | 	cmp	result1, #0 wz
2b874     10 26 06 51 |  if_ne	add	local01, #16
2b878     13 2D 02 5B |  if_ne	rdlong	local04, local01
2b87c     10 26 86 51 |  if_ne	sub	local01, #16
2b880     04 26 06 F1 | 	add	local01, #4
2b884     13 FB 01 FB | 	rdlong	result1, local01
2b888     04 26 86 F1 | 	sub	local01, #4
2b88c     13 2F 02 FB | 	rdlong	local05, local01
2b890     08 26 06 F1 | 	add	local01, #8
2b894     13 13 02 FB | 	rdlong	arg01, local01
2b898     07 00 00 FF 
2b89c     10 12 06 FD | 	qmul	arg01, ##3600
2b8a0     00 30 06 56 |  if_ne	mov	local06, #0
2b8a4     02 2C 56 52 |  if_ne	cmps	local04, #2 wc
2b8a8     01 30 06 16 |  if_a	mov	local06, #1
2b8ac     00 30 06 A6 |  if_e	mov	local06, #0
2b8b0     18 2B 02 F1 | 	add	local03, local06
2b8b4     FD 2C 02 F6 | 	mov	local04, result1
2b8b8     04 2C 66 F0 | 	shl	local04, #4
2b8bc     FD 2C 82 F1 | 	sub	local04, result1
2b8c0     02 2C 66 F0 | 	shl	local04, #2
2b8c4     16 2F 02 F1 | 	add	local05, local04
2b8c8     08 26 86 F1 | 	sub	local01, #8
2b8cc     18 2C 62 FD | 	getqx	local04
2b8d0     A8 00 00 FF 
2b8d4     80 2B 06 FD | 	qmul	local03, ##86400
2b8d8     16 2F 02 F1 | 	add	local05, local04
2b8dc     14 2B 02 F6 | 	mov	local03, local02
2b8e0     03 00 00 FF 
2b8e4     B2 2B 86 F1 | 	sub	local03, ##1970
2b8e8     18 30 62 FD | 	getqx	local06
2b8ec     99 F0 00 FF 
2b8f0     80 2B 06 FD | 	qmul	local03, ##31536000
2b8f4     18 2F 02 F1 | 	add	local05, local06
2b8f8     14 2B 02 F6 | 	mov	local03, local02
2b8fc     03 00 00 FF 
2b900     B1 2B 86 F1 | 	sub	local03, ##1969
2b904     15 33 52 F6 | 	abs	local07, local03 wc
2b908     02 32 46 F0 | 	shr	local07, #2
2b90c     19 33 82 F6 | 	negc	local07, local07
2b910     03 00 00 FF 
2b914     D1 29 56 F2 | 	cmps	local02, ##2001 wc
2b918     18 30 62 FD | 	getqx	local06
2b91c     18 2F 02 F1 | 	add	local05, local06
2b920     18 00 90 CD |  if_b	jmp	#LR__4250
2b924     03 00 00 FF 
2b928     D0 29 86 F1 | 	sub	local02, ##2000
2b92c     14 31 52 F6 | 	abs	local06, local02 wc
2b930     64 30 16 FD | 	qdiv	local06, #100
2b934     18 30 62 FD | 	getqx	local06
2b938     18 33 A2 F3 | 	sumnc	local07, local06
2b93c                 | LR__4250
2b93c     A8 00 00 FF 
2b940     80 33 06 FD | 	qmul	local07, ##86400
2b944     18 32 62 FD | 	getqx	local07
2b948     19 2F 02 F1 | 	add	local05, local07
2b94c     E4 01 B0 FD | 	call	#_fatfs_cc__tzset
2b950     02 00 00 FF 
2b954     44 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2b958     F6 32 02 FB | 	rdlong	local07, ptr__fatfs_cc_dat__
2b95c     19 2F 02 F1 | 	add	local05, local07
2b960     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2b964     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2b968     02 00 00 FF 
2b96c     AC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2b970     01 2A 0E F2 | 	cmp	local03, #1 wz
2b974     14 00 90 5D |  if_ne	jmp	#LR__4251
2b978     13 13 02 F6 | 	mov	arg01, local01
2b97c     88 5E B0 FD | 	call	#_fatfs_cc___indst
2b980     00 FA 0D F2 | 	cmp	result1, #0 wz
2b984     07 00 00 5F 
2b988     10 2E 86 51 |  if_ne	sub	local05, ##3600
2b98c                 | LR__4251
2b98c                 | '                 s -=  (3600L) ;
2b98c                 | ' 
2b98c                 | '         return s;
2b98c     17 FB 01 F6 | 	mov	result1, local05
2b990                 | LR__4252
2b990     A7 F0 03 F6 | 	mov	ptra, fp
2b994     B2 00 A0 FD | 	call	#popregs_
2b998                 | _fatfs_cc_mktime_ret
2b998     2D 00 64 FD | 	ret
2b99c                 | 
2b99c                 | _fatfs_cc__gmtime_r
2b99c     06 4A 05 F6 | 	mov	COUNT_, #6
2b9a0     A8 00 A0 FD | 	call	#pushregs_
2b9a4     09 27 02 FB | 	rdlong	local01, arg01
2b9a8     A8 00 00 FF 
2b9ac     80 27 16 FD | 	qdiv	local01, ##86400
2b9b0     18 FA 61 FD | 	getqx	result1
2b9b4     04 FA 05 F1 | 	add	result1, #4
2b9b8     07 FA 15 FD | 	qdiv	result1, #7
2b9bc     18 14 06 F1 | 	add	arg02, #24
2b9c0     D1 7F 27 FF 
2b9c4     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
2b9c8     D1 7F 27 3F 
2b9cc     00 26 86 31 |  if_ae	sub	local01, ##1325376000
2b9d0     03 00 00 3F 
2b9d4     DC 29 06 36 |  if_ae	mov	local02, ##2012
2b9d8     03 00 00 CF 
2b9dc     B2 29 06 C6 |  if_b	mov	local02, ##1970
2b9e0                 | ' 	  year = 1970;
2b9e0                 | ' 	}
2b9e0                 | ' 
2b9e0                 | ' 	for(;;) {
2b9e0     19 FA 61 FD | 	getqy	result1
2b9e4     0A FB 61 FC | 	wrlong	result1, arg02
2b9e8     18 14 86 F1 | 	sub	arg02, #24
2b9ec                 | LR__4260
2b9ec     14 13 02 F6 | 	mov	arg01, local02
2b9f0     3C 5B B0 FD | 	call	#_fatfs_cc__is_leap_year
2b9f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9f8     42 F1 00 5F 
2b9fc     00 2B 06 56 |  if_ne	mov	local03, ##31622400
2ba00     99 F0 00 AF 
2ba04     80 2B 06 A6 |  if_e	mov	local03, ##31536000
2ba08     15 27 12 F2 | 	cmp	local01, local03 wc
2ba0c                 | ' 	    break;
2ba0c     01 28 06 31 |  if_ae	add	local02, #1
2ba10     15 27 82 31 |  if_ae	sub	local01, local03
2ba14     D4 FF 9F 3D |  if_ae	jmp	#LR__4260
2ba18     A8 00 00 FF 
2ba1c     80 27 16 FD | 	qdiv	local01, ##86400
2ba20     14 2B 02 F6 | 	mov	local03, local02
2ba24     03 00 00 FF 
2ba28     6C 2B 86 F1 | 	sub	local03, ##1900
2ba2c     14 14 06 F1 | 	add	arg02, #20
2ba30     0A 2B 62 FC | 	wrlong	local03, arg02
2ba34     08 14 06 F1 | 	add	arg02, #8
2ba38     14 13 02 F6 | 	mov	arg01, local02
2ba3c     18 28 62 FD | 	getqx	local02
2ba40     0A 29 62 FC | 	wrlong	local02, arg02
2ba44     1C 14 86 F1 | 	sub	arg02, #28
2ba48     E4 5A B0 FD | 	call	#_fatfs_cc__is_leap_year
2ba4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba50     1D 2A 06 56 |  if_ne	mov	local03, #29
2ba54     1C 2A 06 A6 |  if_e	mov	local03, #28
2ba58     02 00 00 FF 
2ba5c     4C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2ba60     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2ba64     02 00 00 FF 
2ba68     4C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2ba6c                 | ' 
2ba6c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2ba6c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2ba6c     00 12 06 F6 | 	mov	arg01, #0
2ba70     97 24 48 FB | 	callpa	#(@LR__4262-@LR__4261)>>2,fcache_load_ptr_
2ba74                 | LR__4261
2ba74     09 2B 02 F6 | 	mov	local03, arg01
2ba78     02 2A 66 F0 | 	shl	local03, #2
2ba7c     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2ba80     02 00 00 FF 
2ba84     48 FA 05 F1 | 	add	result1, ##1096
2ba88     FD 2A 02 F1 | 	add	local03, result1
2ba8c     15 2B 02 FB | 	rdlong	local03, local03
2ba90     15 29 52 F2 | 	cmps	local02, local03 wc
2ba94     09 2D 02 36 |  if_ae	mov	local04, arg01
2ba98     02 2C 66 30 |  if_ae	shl	local04, #2
2ba9c     F6 2E 02 36 |  if_ae	mov	local05, ptr__fatfs_cc_dat__
2baa0     02 00 00 3F 
2baa4     48 2E 06 31 |  if_ae	add	local05, ##1096
2baa8     17 2D 02 31 |  if_ae	add	local04, local05
2baac     16 31 02 3B |  if_ae	rdlong	local06, local04
2bab0     18 29 82 31 |  if_ae	sub	local02, local06
2bab4     01 12 06 31 |  if_ae	add	arg01, #1
2bab8     B8 FF 9F 3D |  if_ae	jmp	#LR__4261
2babc                 | LR__4262
2babc     A8 00 00 FF 
2bac0     80 27 16 FD | 	qdiv	local01, ##86400
2bac4     10 14 06 F1 | 	add	arg02, #16
2bac8     0A 13 62 FC | 	wrlong	arg01, arg02
2bacc     01 28 06 F1 | 	add	local02, #1
2bad0     04 14 86 F1 | 	sub	arg02, #4
2bad4     0A 29 62 FC | 	wrlong	local02, arg02
2bad8     19 26 62 FD | 	getqy	local01
2badc     07 00 00 FF 
2bae0     10 26 16 FD | 	qdiv	local01, ##3600
2bae4     18 2A 62 FD | 	getqx	local03
2bae8     07 00 00 FF 
2baec     10 26 16 FD | 	qdiv	local01, ##3600
2baf0     04 14 86 F1 | 	sub	arg02, #4
2baf4     0A 2B 62 FC | 	wrlong	local03, arg02
2baf8     19 26 62 FD | 	getqy	local01
2bafc     3C 26 16 FD | 	qdiv	local01, #60
2bb00     18 2A 62 FD | 	getqx	local03
2bb04     3C 26 16 FD | 	qdiv	local01, #60
2bb08     04 14 86 F1 | 	sub	arg02, #4
2bb0c     0A 2B 62 FC | 	wrlong	local03, arg02
2bb10     04 14 86 F1 | 	sub	arg02, #4
2bb14                 | '         stm->tm_isdst = 0;
2bb14                 | ' 
2bb14                 | ' ;
2bb14                 | '         return stm;
2bb14     0A FB 01 F6 | 	mov	result1, arg02
2bb18     19 2A 62 FD | 	getqy	local03
2bb1c     0A 2B 62 FC | 	wrlong	local03, arg02
2bb20     20 14 06 F1 | 	add	arg02, #32
2bb24     0A 01 68 FC | 	wrlong	#0, arg02
2bb28     A7 F0 03 F6 | 	mov	ptra, fp
2bb2c     B2 00 A0 FD | 	call	#popregs_
2bb30                 | _fatfs_cc__gmtime_r_ret
2bb30     2D 00 64 FD | 	ret
2bb34                 | 
2bb34                 | _fatfs_cc__tzset
2bb34     8D 01 00 FF 
2bb38     90 13 06 F6 | 	mov	arg01, ##@LR__5082
2bb3c     18 4E B0 FD | 	call	#_fatfs_cc_getenv
2bb40     FD 12 02 F6 | 	mov	arg01, result1
2bb44     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2bb48     02 00 00 FF 
2bb4c     AC 14 06 F1 | 	add	arg02, ##1196
2bb50     2C 5A B0 FD | 	call	#_fatfs_cc___tzoffset
2bb54     02 00 00 FF 
2bb58     44 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2bb5c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2bb60     02 00 00 FF 
2bb64     44 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2bb68                 | _fatfs_cc__tzset_ret
2bb68     2D 00 64 FD | 	ret
2bb6c                 | 
2bb6c                 | _fatfs_cc_disk_read
2bb6c     09 4A 05 F6 | 	mov	COUNT_, #9
2bb70     A8 00 A0 FD | 	call	#pushregs_
2bb74     0A 2F 02 F6 | 	mov	local05, arg02
2bb78     0C 31 02 F6 | 	mov	local06, arg04
2bb7c     0B 13 02 F6 | 	mov	arg01, arg03
2bb80     00 14 06 F6 | 	mov	arg02, #0
2bb84     09 16 06 F6 | 	mov	arg03, #9
2bb88     00 18 06 F6 | 	mov	arg04, #0
2bb8c     54 AF BF FD | 	call	#__system___int64_shl
2bb90     FD 26 02 F6 | 	mov	local01, result1
2bb94     FE 28 02 F6 | 	mov	local02, result2
2bb98     01 00 00 FF 
2bb9c     10 E4 05 F1 | 	add	objptr, ##528
2bba0     F2 FC 09 FB | 	rdlong	result2, objptr wz
2bba4     01 00 00 FF 
2bba8     10 E4 85 F1 | 	sub	objptr, ##528
2bbac                 | '         return RES_NOTRDY;
2bbac     03 FA 05 A6 |  if_e	mov	result1, #3
2bbb0     E8 00 90 AD |  if_e	jmp	#LR__4270
2bbb4     13 15 02 F6 | 	mov	arg02, local01
2bbb8     14 17 02 F6 | 	mov	arg03, local02
2bbbc     01 00 00 FF 
2bbc0     10 E4 05 F1 | 	add	objptr, ##528
2bbc4     F2 12 02 FB | 	rdlong	arg01, objptr
2bbc8     09 19 02 F6 | 	mov	arg04, arg01
2bbcc     30 18 06 F1 | 	add	arg04, #48
2bbd0     0C 33 02 FB | 	rdlong	local07, arg04
2bbd4     19 35 02 F6 | 	mov	local08, local07
2bbd8     13 32 46 F7 | 	zerox	local07, #19
2bbdc     14 34 46 F0 | 	shr	local08, #20
2bbe0     02 34 66 F0 | 	shl	local08, #2
2bbe4     ED 34 02 F1 | 	add	local08, __methods__
2bbe8     1A 35 02 FB | 	rdlong	local08, local08
2bbec     01 00 00 FF 
2bbf0     10 E4 85 F1 | 	sub	objptr, ##528
2bbf4     00 18 06 F6 | 	mov	arg04, #0
2bbf8     F2 36 02 F6 | 	mov	local09, objptr
2bbfc     19 E5 01 F6 | 	mov	objptr, local07
2bc00     2D 34 62 FD | 	call	local08
2bc04     1B E5 01 F6 | 	mov	objptr, local09
2bc08     FD 2A 02 F6 | 	mov	local03, result1
2bc0c     FE 2C 02 F6 | 	mov	local04, result2
2bc10     15 13 02 F6 | 	mov	arg01, local03
2bc14     16 15 02 F6 | 	mov	arg02, local04
2bc18     13 17 02 F6 | 	mov	arg03, local01
2bc1c     14 19 02 F6 | 	mov	arg04, local02
2bc20     00 FA 05 F6 | 	mov	result1, #0
2bc24     0B 13 1A F2 | 	cmp	arg01, arg03 wcz
2bc28     0C 15 7A F2 | 	cmpsx	arg02, arg04 wcz
2bc2c     01 FA 85 56 |  if_ne	negc	result1, #1
2bc30     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc34                 | '         return RES_ERROR;
2bc34     01 FA 05 56 |  if_ne	mov	result1, #1
2bc38     60 00 90 5D |  if_ne	jmp	#LR__4270
2bc3c     09 30 66 F0 | 	shl	local06, #9
2bc40     01 00 00 FF 
2bc44     10 E4 05 F1 | 	add	objptr, ##528
2bc48     F2 12 02 FB | 	rdlong	arg01, objptr
2bc4c     09 2B 02 F6 | 	mov	local03, arg01
2bc50     14 2A 06 F1 | 	add	local03, #20
2bc54     15 2B 02 FB | 	rdlong	local03, local03
2bc58     15 37 02 F6 | 	mov	local09, local03
2bc5c     13 36 46 F7 | 	zerox	local09, #19
2bc60     14 2A 46 F0 | 	shr	local03, #20
2bc64     02 2A 66 F0 | 	shl	local03, #2
2bc68     ED 2A 02 F1 | 	add	local03, __methods__
2bc6c     15 2B 02 FB | 	rdlong	local03, local03
2bc70     01 00 00 FF 
2bc74     10 E4 85 F1 | 	sub	objptr, ##528
2bc78     17 15 02 F6 | 	mov	arg02, local05
2bc7c     18 17 02 F6 | 	mov	arg03, local06
2bc80     F2 34 02 F6 | 	mov	local08, objptr
2bc84     1B E5 01 F6 | 	mov	objptr, local09
2bc88     2D 2A 62 FD | 	call	local03
2bc8c     1A E5 01 F6 | 	mov	objptr, local08
2bc90     18 FB 09 F2 | 	cmp	result1, local06 wz
2bc94                 | '         return RES_ERROR;
2bc94     01 FA 05 56 |  if_ne	mov	result1, #1
2bc98                 | '     }
2bc98                 | '     return RES_OK;
2bc98     00 FA 05 A6 |  if_e	mov	result1, #0
2bc9c                 | LR__4270
2bc9c     A7 F0 03 F6 | 	mov	ptra, fp
2bca0     B2 00 A0 FD | 	call	#popregs_
2bca4                 | _fatfs_cc_disk_read_ret
2bca4     2D 00 64 FD | 	ret
2bca8                 | 
2bca8                 | _fatfs_cc_disk_write
2bca8     09 4A 05 F6 | 	mov	COUNT_, #9
2bcac     A8 00 A0 FD | 	call	#pushregs_
2bcb0     0A 2F 02 F6 | 	mov	local05, arg02
2bcb4     0C 31 02 F6 | 	mov	local06, arg04
2bcb8     0B 13 02 F6 | 	mov	arg01, arg03
2bcbc     00 14 06 F6 | 	mov	arg02, #0
2bcc0     09 16 06 F6 | 	mov	arg03, #9
2bcc4     00 18 06 F6 | 	mov	arg04, #0
2bcc8     18 AE BF FD | 	call	#__system___int64_shl
2bccc     FD 26 02 F6 | 	mov	local01, result1
2bcd0     FE 28 02 F6 | 	mov	local02, result2
2bcd4     01 00 00 FF 
2bcd8     10 E4 05 F1 | 	add	objptr, ##528
2bcdc     F2 FC 09 FB | 	rdlong	result2, objptr wz
2bce0     01 00 00 FF 
2bce4     10 E4 85 F1 | 	sub	objptr, ##528
2bce8                 | '         return RES_NOTRDY;
2bce8     03 FA 05 A6 |  if_e	mov	result1, #3
2bcec     E8 00 90 AD |  if_e	jmp	#LR__4280
2bcf0     13 15 02 F6 | 	mov	arg02, local01
2bcf4     14 17 02 F6 | 	mov	arg03, local02
2bcf8     01 00 00 FF 
2bcfc     10 E4 05 F1 | 	add	objptr, ##528
2bd00     F2 12 02 FB | 	rdlong	arg01, objptr
2bd04     09 19 02 F6 | 	mov	arg04, arg01
2bd08     30 18 06 F1 | 	add	arg04, #48
2bd0c     0C 33 02 FB | 	rdlong	local07, arg04
2bd10     19 35 02 F6 | 	mov	local08, local07
2bd14     13 32 46 F7 | 	zerox	local07, #19
2bd18     14 34 46 F0 | 	shr	local08, #20
2bd1c     02 34 66 F0 | 	shl	local08, #2
2bd20     ED 34 02 F1 | 	add	local08, __methods__
2bd24     1A 35 02 FB | 	rdlong	local08, local08
2bd28     01 00 00 FF 
2bd2c     10 E4 85 F1 | 	sub	objptr, ##528
2bd30     00 18 06 F6 | 	mov	arg04, #0
2bd34     F2 36 02 F6 | 	mov	local09, objptr
2bd38     19 E5 01 F6 | 	mov	objptr, local07
2bd3c     2D 34 62 FD | 	call	local08
2bd40     1B E5 01 F6 | 	mov	objptr, local09
2bd44     FD 2A 02 F6 | 	mov	local03, result1
2bd48     FE 2C 02 F6 | 	mov	local04, result2
2bd4c     15 13 02 F6 | 	mov	arg01, local03
2bd50     16 15 02 F6 | 	mov	arg02, local04
2bd54     13 17 02 F6 | 	mov	arg03, local01
2bd58     14 19 02 F6 | 	mov	arg04, local02
2bd5c     00 FA 05 F6 | 	mov	result1, #0
2bd60     0B 13 1A F2 | 	cmp	arg01, arg03 wcz
2bd64     0C 15 7A F2 | 	cmpsx	arg02, arg04 wcz
2bd68     01 FA 85 56 |  if_ne	negc	result1, #1
2bd6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd70                 | '         return RES_ERROR;
2bd70     01 FA 05 56 |  if_ne	mov	result1, #1
2bd74     60 00 90 5D |  if_ne	jmp	#LR__4280
2bd78     09 30 66 F0 | 	shl	local06, #9
2bd7c     01 00 00 FF 
2bd80     10 E4 05 F1 | 	add	objptr, ##528
2bd84     F2 12 02 FB | 	rdlong	arg01, objptr
2bd88     09 2B 02 F6 | 	mov	local03, arg01
2bd8c     18 2A 06 F1 | 	add	local03, #24
2bd90     15 2B 02 FB | 	rdlong	local03, local03
2bd94     15 37 02 F6 | 	mov	local09, local03
2bd98     13 36 46 F7 | 	zerox	local09, #19
2bd9c     14 2A 46 F0 | 	shr	local03, #20
2bda0     02 2A 66 F0 | 	shl	local03, #2
2bda4     ED 2A 02 F1 | 	add	local03, __methods__
2bda8     15 2B 02 FB | 	rdlong	local03, local03
2bdac     01 00 00 FF 
2bdb0     10 E4 85 F1 | 	sub	objptr, ##528
2bdb4     17 15 02 F6 | 	mov	arg02, local05
2bdb8     18 17 02 F6 | 	mov	arg03, local06
2bdbc     F2 34 02 F6 | 	mov	local08, objptr
2bdc0     1B E5 01 F6 | 	mov	objptr, local09
2bdc4     2D 2A 62 FD | 	call	local03
2bdc8     1A E5 01 F6 | 	mov	objptr, local08
2bdcc     18 FB 09 F2 | 	cmp	result1, local06 wz
2bdd0                 | '         return RES_ERROR;
2bdd0     01 FA 05 56 |  if_ne	mov	result1, #1
2bdd4                 | '     }
2bdd4                 | '     return RES_OK;
2bdd4     00 FA 05 A6 |  if_e	mov	result1, #0
2bdd8                 | LR__4280
2bdd8     A7 F0 03 F6 | 	mov	ptra, fp
2bddc     B2 00 A0 FD | 	call	#popregs_
2bde0                 | _fatfs_cc_disk_write_ret
2bde0     2D 00 64 FD | 	ret
2bde4                 | 
2bde4                 | _fatfs_cc_disk_ioctl
2bde4     03 4A 05 F6 | 	mov	COUNT_, #3
2bde8     A8 00 A0 FD | 	call	#pushregs_
2bdec     01 00 00 FF 
2bdf0     10 E4 05 F1 | 	add	objptr, ##528
2bdf4     F2 12 0A FB | 	rdlong	arg01, objptr wz
2bdf8     01 00 00 FF 
2bdfc     10 E4 85 F1 | 	sub	objptr, ##528
2be00                 | '         return RES_NOTRDY;
2be00     03 FA 05 A6 |  if_e	mov	result1, #3
2be04     58 00 90 AD |  if_e	jmp	#LR__4290
2be08     01 00 00 FF 
2be0c     10 E4 05 F1 | 	add	objptr, ##528
2be10     F2 12 02 FB | 	rdlong	arg01, objptr
2be14     09 27 02 F6 | 	mov	local01, arg01
2be18     28 26 06 F1 | 	add	local01, #40
2be1c     13 27 02 FB | 	rdlong	local01, local01
2be20     13 29 02 F6 | 	mov	local02, local01
2be24     13 28 46 F7 | 	zerox	local02, #19
2be28     14 26 46 F0 | 	shr	local01, #20
2be2c     02 26 66 F0 | 	shl	local01, #2
2be30     ED 26 02 F1 | 	add	local01, __methods__
2be34     13 27 02 FB | 	rdlong	local01, local01
2be38     01 00 00 FF 
2be3c     10 E4 85 F1 | 	sub	objptr, ##528
2be40     0A 15 E2 F8 | 	getbyte	arg02, arg02, #0
2be44     F2 2A 02 F6 | 	mov	local03, objptr
2be48     14 E5 01 F6 | 	mov	objptr, local02
2be4c     2D 26 62 FD | 	call	local01
2be50     15 E5 01 F6 | 	mov	objptr, local03
2be54     00 FA 0D F2 | 	cmp	result1, #0 wz
2be58                 | '         return RES_ERROR;
2be58     01 FA 05 56 |  if_ne	mov	result1, #1
2be5c                 | '     return RES_OK;
2be5c     00 FA 05 A6 |  if_e	mov	result1, #0
2be60                 | LR__4290
2be60     A7 F0 03 F6 | 	mov	ptra, fp
2be64     B2 00 A0 FD | 	call	#popregs_
2be68                 | _fatfs_cc_disk_ioctl_ret
2be68     2D 00 64 FD | 	ret
2be6c                 | 
2be6c                 | _fatfs_cc_tchar2uni
2be6c     09 01 02 FB | 	rdlong	_var01, arg01
2be70     00 03 02 F6 | 	mov	_var02, _var01
2be74     01 00 06 F1 | 	add	_var01, #1
2be78     00 05 02 F6 | 	mov	_var03, _var01
2be7c     01 07 C2 FA | 	rdbyte	_var04, _var02
2be80     80 06 CE F7 | 	test	_var04, #128 wz
2be84     E4 00 90 AD |  if_e	jmp	#LR__4306
2be88     03 09 02 F6 | 	mov	_var05, _var04
2be8c     E0 08 06 F5 | 	and	_var05, #224
2be90     C0 08 0E F2 | 	cmp	_var05, #192 wz
2be94     1F 06 06 A5 |  if_e	and	_var04, #31
2be98     01 0A 06 A6 |  if_e	mov	_var06, #1
2be9c     34 00 90 AD |  if_e	jmp	#LR__4301
2bea0     03 09 02 F6 | 	mov	_var05, _var04
2bea4     F0 08 06 F5 | 	and	_var05, #240
2bea8     E0 08 0E F2 | 	cmp	_var05, #224 wz
2beac     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2beb0     02 0A 06 A6 |  if_e	mov	_var06, #2
2beb4     1C 00 90 AD |  if_e	jmp	#LR__4300
2beb8     03 09 02 F6 | 	mov	_var05, _var04
2bebc     F8 08 06 F5 | 	and	_var05, #248
2bec0     F0 08 0E F2 | 	cmp	_var05, #240 wz
2bec4     07 06 06 A5 |  if_e	and	_var04, #7
2bec8     03 0A 06 A6 |  if_e	mov	_var06, #3
2becc                 | ' 			return 0xFFFFFFFF;
2becc     01 FA 65 56 |  if_ne	neg	result1, #1
2bed0     A0 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2bed4                 | LR__4300
2bed4                 | LR__4301
2bed4                 | ' 		}
2bed4                 | ' 		do {
2bed4                 | LR__4302
2bed4     02 0D C2 FA | 	rdbyte	_var07, _var03
2bed8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2bedc     C0 08 06 F5 | 	and	_var05, #192
2bee0     80 08 0E F2 | 	cmp	_var05, #128 wz
2bee4     01 04 06 F1 | 	add	_var03, #1
2bee8     01 FA 65 56 |  if_ne	neg	result1, #1
2beec     84 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2bef0     06 06 66 F0 | 	shl	_var04, #6
2bef4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2bef8     3F 02 06 F5 | 	and	_var02, #63
2befc     01 07 42 F5 | 	or	_var04, _var02
2bf00     F4 0B 6E FB | 	djnz	_var06, #LR__4302
2bf04     80 06 16 F2 | 	cmp	_var04, #128 wc
2bf08     24 00 90 CD |  if_b	jmp	#LR__4304
2bf0c     6C 00 00 FF 
2bf10     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2bf14     0C 00 90 CD |  if_b	jmp	#LR__4303
2bf18     70 00 00 FF 
2bf1c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2bf20     0C 00 90 CD |  if_b	jmp	#LR__4304
2bf24                 | LR__4303
2bf24     80 08 00 FF 
2bf28     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2bf2c     08 00 90 CD |  if_b	jmp	#LR__4305
2bf30                 | LR__4304
2bf30     01 FA 65 F6 | 	neg	result1, #1
2bf34     3C 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2bf38                 | LR__4305
2bf38     80 00 00 FF 
2bf3c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2bf40     03 03 02 36 |  if_ae	mov	_var02, _var04
2bf44     80 00 00 3F 
2bf48     00 02 86 31 |  if_ae	sub	_var02, ##65536
2bf4c     06 02 66 30 |  if_ae	shl	_var02, #6
2bf50     80 FF 01 3F 
2bf54     00 02 06 35 |  if_ae	and	_var02, ##67043328
2bf58     6E 00 6C 3F 
2bf5c     00 08 06 36 |  if_ae	mov	_var05, ##-671032320
2bf60     01 09 42 35 |  if_ae	or	_var05, _var02
2bf64     09 06 46 37 |  if_ae	zerox	_var04, #9
2bf68     04 07 42 35 |  if_ae	or	_var04, _var05
2bf6c                 | LR__4306
2bf6c     09 05 62 FC | 	wrlong	_var03, arg01
2bf70                 | ' 	}
2bf70                 | ' #line 811 "ff.c"
2bf70                 | ' 	*str = p;
2bf70                 | ' 	return uc;
2bf70     03 FB 01 F6 | 	mov	result1, _var04
2bf74                 | _fatfs_cc_tchar2uni_ret
2bf74     2D 00 64 FD | 	ret
2bf78                 | 
2bf78                 | _fatfs_cc_put_utf
2bf78     80 12 16 F2 | 	cmp	arg01, #128 wc
2bf7c     18 00 90 3D |  if_ae	jmp	#LR__4310
2bf80     01 16 16 F2 | 	cmp	arg03, #1 wc
2bf84     00 FA 05 C6 |  if_b	mov	result1, #0
2bf88     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2bf8c     0A 13 42 FC | 	wrbyte	arg01, arg02
2bf90                 | ' 		*buf = (TCHAR)chr;
2bf90                 | ' 		return 1;
2bf90     01 FA 05 F6 | 	mov	result1, #1
2bf94     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2bf98                 | LR__4310
2bf98     04 00 00 FF 
2bf9c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2bfa0     40 00 90 3D |  if_ae	jmp	#LR__4311
2bfa4     02 16 16 F2 | 	cmp	arg03, #2 wc
2bfa8     00 FA 05 C6 |  if_b	mov	result1, #0
2bfac     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2bfb0     09 FB 01 F6 | 	mov	result1, arg01
2bfb4     06 FA 45 F0 | 	shr	result1, #6
2bfb8     1F FA 05 F5 | 	and	result1, #31
2bfbc     C0 16 06 F6 | 	mov	arg03, #192
2bfc0     FD 16 42 F5 | 	or	arg03, result1
2bfc4     0A 17 42 FC | 	wrbyte	arg03, arg02
2bfc8     01 14 06 F1 | 	add	arg02, #1
2bfcc     3F 12 06 F5 | 	and	arg01, #63
2bfd0     80 FA 05 F6 | 	mov	result1, #128
2bfd4     09 FB 41 F5 | 	or	result1, arg01
2bfd8     0A FB 41 FC | 	wrbyte	result1, arg02
2bfdc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2bfdc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2bfdc                 | ' 		return 2;
2bfdc     02 FA 05 F6 | 	mov	result1, #2
2bfe0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2bfe4                 | LR__4311
2bfe4     80 00 00 FF 
2bfe8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2bfec     70 00 90 3D |  if_ae	jmp	#LR__4314
2bff0     03 16 16 F2 | 	cmp	arg03, #3 wc
2bff4     18 00 90 CD |  if_b	jmp	#LR__4312
2bff8     6C 00 00 FF 
2bffc     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2c000     14 00 90 CD |  if_b	jmp	#LR__4313
2c004     70 00 00 FF 
2c008     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2c00c     08 00 90 3D |  if_ae	jmp	#LR__4313
2c010                 | LR__4312
2c010     00 FA 05 F6 | 	mov	result1, #0
2c014     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c018                 | LR__4313
2c018     09 FB 59 F8 | 	getnib	result1, arg01, #3
2c01c     E0 16 06 F6 | 	mov	arg03, #224
2c020     FD 16 42 F5 | 	or	arg03, result1
2c024     0A 17 42 FC | 	wrbyte	arg03, arg02
2c028     01 14 06 F1 | 	add	arg02, #1
2c02c     09 FB 01 F6 | 	mov	result1, arg01
2c030     06 FA 45 F0 | 	shr	result1, #6
2c034     3F FA 05 F5 | 	and	result1, #63
2c038     80 16 06 F6 | 	mov	arg03, #128
2c03c     FD 16 42 F5 | 	or	arg03, result1
2c040     0A 17 42 FC | 	wrbyte	arg03, arg02
2c044     01 14 06 F1 | 	add	arg02, #1
2c048     3F 12 06 F5 | 	and	arg01, #63
2c04c     80 FA 05 F6 | 	mov	result1, #128
2c050     09 FB 41 F5 | 	or	result1, arg01
2c054     0A FB 41 FC | 	wrbyte	result1, arg02
2c058                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c058                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c058                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c058                 | ' 		return 3;
2c058     03 FA 05 F6 | 	mov	result1, #3
2c05c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c060                 | LR__4314
2c060     04 16 16 F2 | 	cmp	arg03, #4 wc
2c064     00 FA 05 C6 |  if_b	mov	result1, #0
2c068     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c06c     09 01 02 F6 | 	mov	_var01, arg01
2c070     E0 01 06 F4 | 	bitl	_var01, #480
2c074     00 00 6C FF 
2c078     00 00 86 F1 | 	sub	_var01, ##-671088640
2c07c     06 00 46 F0 | 	shr	_var01, #6
2c080     09 13 32 F9 | 	getword	arg01, arg01, #0
2c084     6E 00 00 FF 
2c088     00 12 86 F1 | 	sub	arg01, ##56320
2c08c     00 08 00 FF 
2c090     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2c094     02 00 00 CF 
2c098     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c09c     00 FA 05 36 |  if_ae	mov	result1, #0
2c0a0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c0a4     09 01 42 F5 | 	or	_var01, arg01
2c0a8     80 00 00 FF 
2c0ac     00 00 06 F1 | 	add	_var01, ##65536
2c0b0     00 FB 01 F6 | 	mov	result1, _var01
2c0b4     12 FA 45 F0 | 	shr	result1, #18
2c0b8     07 FA 05 F5 | 	and	result1, #7
2c0bc     F0 16 06 F6 | 	mov	arg03, #240
2c0c0     FD 16 42 F5 | 	or	arg03, result1
2c0c4     0A 17 42 FC | 	wrbyte	arg03, arg02
2c0c8     01 14 06 F1 | 	add	arg02, #1
2c0cc     00 FB 01 F6 | 	mov	result1, _var01
2c0d0     0C FA 45 F0 | 	shr	result1, #12
2c0d4     3F FA 05 F5 | 	and	result1, #63
2c0d8     80 16 06 F6 | 	mov	arg03, #128
2c0dc     FD 16 42 F5 | 	or	arg03, result1
2c0e0     0A 17 42 FC | 	wrbyte	arg03, arg02
2c0e4     01 14 06 F1 | 	add	arg02, #1
2c0e8     00 FB 01 F6 | 	mov	result1, _var01
2c0ec     06 FA 45 F0 | 	shr	result1, #6
2c0f0     3F FA 05 F5 | 	and	result1, #63
2c0f4     80 16 06 F6 | 	mov	arg03, #128
2c0f8     FD 16 42 F5 | 	or	arg03, result1
2c0fc     0A 17 42 FC | 	wrbyte	arg03, arg02
2c100     01 14 06 F1 | 	add	arg02, #1
2c104     3F 00 06 F5 | 	and	_var01, #63
2c108     80 FA 05 F6 | 	mov	result1, #128
2c10c     00 FB 41 F5 | 	or	result1, _var01
2c110     0A FB 41 FC | 	wrbyte	result1, arg02
2c114                 | ' 	chr = (hc | chr) + 0x10000;
2c114                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c114                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c114                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c114                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c114                 | ' 	return 4;
2c114     04 FA 05 F6 | 	mov	result1, #4
2c118                 | _fatfs_cc_put_utf_ret
2c118     2D 00 64 FD | 	ret
2c11c                 | 
2c11c                 | _fatfs_cc_sync_window
2c11c     02 4A 05 F6 | 	mov	COUNT_, #2
2c120     A8 00 A0 FD | 	call	#pushregs_
2c124     09 27 02 F6 | 	mov	local01, arg01
2c128     00 28 06 F6 | 	mov	local02, #0
2c12c     03 26 06 F1 | 	add	local01, #3
2c130     13 FB C9 FA | 	rdbyte	result1, local01 wz
2c134     03 26 86 F1 | 	sub	local01, #3
2c138     A4 00 90 AD |  if_e	jmp	#LR__4322
2c13c     01 26 06 F1 | 	add	local01, #1
2c140     13 13 C2 FA | 	rdbyte	arg01, local01
2c144     33 26 06 F1 | 	add	local01, #51
2c148     13 15 02 F6 | 	mov	arg02, local01
2c14c     04 26 86 F1 | 	sub	local01, #4
2c150     13 17 02 FB | 	rdlong	arg03, local01
2c154     30 26 86 F1 | 	sub	local01, #48
2c158     01 18 06 F6 | 	mov	arg04, #1
2c15c     48 FB BF FD | 	call	#_fatfs_cc_disk_write
2c160     00 FA 0D F2 | 	cmp	result1, #0 wz
2c164     74 00 90 5D |  if_ne	jmp	#LR__4320
2c168     03 26 06 F1 | 	add	local01, #3
2c16c     13 01 48 FC | 	wrbyte	#0, local01
2c170     2D 26 06 F1 | 	add	local01, #45
2c174     13 FB 01 FB | 	rdlong	result1, local01
2c178     0C 26 86 F1 | 	sub	local01, #12
2c17c     13 19 02 FB | 	rdlong	arg04, local01
2c180     0C FB 81 F1 | 	sub	result1, arg04
2c184     08 26 86 F1 | 	sub	local01, #8
2c188     13 19 02 FB | 	rdlong	arg04, local01
2c18c     1C 26 86 F1 | 	sub	local01, #28
2c190     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c194     48 00 90 3D |  if_ae	jmp	#LR__4321
2c198     02 26 06 F1 | 	add	local01, #2
2c19c     13 19 C2 FA | 	rdbyte	arg04, local01
2c1a0     02 26 86 F1 | 	sub	local01, #2
2c1a4     02 18 0E F2 | 	cmp	arg04, #2 wz
2c1a8     34 00 90 5D |  if_ne	jmp	#LR__4321
2c1ac     01 26 06 F1 | 	add	local01, #1
2c1b0     13 13 C2 FA | 	rdbyte	arg01, local01
2c1b4     33 26 06 F1 | 	add	local01, #51
2c1b8     13 15 02 F6 | 	mov	arg02, local01
2c1bc     04 26 86 F1 | 	sub	local01, #4
2c1c0     13 17 02 FB | 	rdlong	arg03, local01
2c1c4     14 26 86 F1 | 	sub	local01, #20
2c1c8     13 27 02 FB | 	rdlong	local01, local01
2c1cc     13 17 02 F1 | 	add	arg03, local01
2c1d0     01 18 06 F6 | 	mov	arg04, #1
2c1d4     D0 FA BF FD | 	call	#_fatfs_cc_disk_write
2c1d8     04 00 90 FD | 	jmp	#LR__4321
2c1dc                 | LR__4320
2c1dc     01 28 06 F6 | 	mov	local02, #1
2c1e0                 | LR__4321
2c1e0                 | LR__4322
2c1e0                 | ' 			res = FR_DISK_ERR;
2c1e0                 | ' 		}
2c1e0                 | ' 	}
2c1e0                 | ' 	return res;
2c1e0     14 FB 01 F6 | 	mov	result1, local02
2c1e4     A7 F0 03 F6 | 	mov	ptra, fp
2c1e8     B2 00 A0 FD | 	call	#popregs_
2c1ec                 | _fatfs_cc_sync_window_ret
2c1ec     2D 00 64 FD | 	ret
2c1f0                 | 
2c1f0                 | _fatfs_cc_move_window
2c1f0     03 4A 05 F6 | 	mov	COUNT_, #3
2c1f4     A8 00 A0 FD | 	call	#pushregs_
2c1f8     09 27 02 F6 | 	mov	local01, arg01
2c1fc     0A 29 02 F6 | 	mov	local02, arg02
2c200     00 2A 06 F6 | 	mov	local03, #0
2c204     30 26 06 F1 | 	add	local01, #48
2c208     13 19 02 FB | 	rdlong	arg04, local01
2c20c     30 26 86 F1 | 	sub	local01, #48
2c210     0C 29 0A F2 | 	cmp	local02, arg04 wz
2c214     40 00 90 AD |  if_e	jmp	#LR__4331
2c218     13 13 02 F6 | 	mov	arg01, local01
2c21c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2c220     FD 2A 0A F6 | 	mov	local03, result1 wz
2c224     30 00 90 5D |  if_ne	jmp	#LR__4330
2c228     01 26 06 F1 | 	add	local01, #1
2c22c     13 13 C2 FA | 	rdbyte	arg01, local01
2c230     33 26 06 F1 | 	add	local01, #51
2c234     13 15 02 F6 | 	mov	arg02, local01
2c238     14 17 02 F6 | 	mov	arg03, local02
2c23c     01 18 06 F6 | 	mov	arg04, #1
2c240     28 F9 BF FD | 	call	#_fatfs_cc_disk_read
2c244     00 FA 0D F2 | 	cmp	result1, #0 wz
2c248     01 28 66 56 |  if_ne	neg	local02, #1
2c24c     01 2A 06 56 |  if_ne	mov	local03, #1
2c250     04 26 86 F1 | 	sub	local01, #4
2c254     13 29 62 FC | 	wrlong	local02, local01
2c258                 | LR__4330
2c258                 | LR__4331
2c258                 | ' 				sect = (LBA_t)0 - 1;
2c258                 | ' 				res = FR_DISK_ERR;
2c258                 | ' 			}
2c258                 | ' 			fs->winsect = sect;
2c258                 | ' 		}
2c258                 | ' 	}
2c258                 | ' 	return res;
2c258     15 FB 01 F6 | 	mov	result1, local03
2c25c     A7 F0 03 F6 | 	mov	ptra, fp
2c260     B2 00 A0 FD | 	call	#popregs_
2c264                 | _fatfs_cc_move_window_ret
2c264     2D 00 64 FD | 	ret
2c268                 | 
2c268                 | _fatfs_cc_sync_fs
2c268     02 4A 05 F6 | 	mov	COUNT_, #2
2c26c     A8 00 A0 FD | 	call	#pushregs_
2c270     09 27 02 F6 | 	mov	local01, arg01
2c274     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2c278     FD 28 0A F6 | 	mov	local02, result1 wz
2c27c     D8 00 90 5D |  if_ne	jmp	#LR__4341
2c280     13 19 C2 FA | 	rdbyte	arg04, local01
2c284     03 18 0E F2 | 	cmp	arg04, #3 wz
2c288     04 26 06 A1 |  if_e	add	local01, #4
2c28c     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2c290     04 26 86 A1 |  if_e	sub	local01, #4
2c294     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2c298     A0 00 90 5D |  if_ne	jmp	#LR__4340
2c29c     34 26 06 F1 | 	add	local01, #52
2c2a0     13 13 02 F6 | 	mov	arg01, local01
2c2a4     00 14 06 F6 | 	mov	arg02, #0
2c2a8     09 16 C6 F9 | 	decod	arg03, #9
2c2ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2c2b0     13 13 02 F6 | 	mov	arg01, local01
2c2b4     FE 13 06 F1 | 	add	arg01, #510
2c2b8     55 00 80 FF 
2c2bc     09 AB 58 FC | 	wrword	##43605, arg01
2c2c0     A9 B0 A0 FF 
2c2c4     13 A5 68 FC | 	wrlong	##1096897106, local01
2c2c8     13 13 02 F6 | 	mov	arg01, local01
2c2cc     E4 13 06 F1 | 	add	arg01, #484
2c2d0     B9 A0 B0 FF 
2c2d4     09 E5 68 FC | 	wrlong	##1631679090, arg01
2c2d8     13 13 02 F6 | 	mov	arg01, local01
2c2dc     E8 13 06 F1 | 	add	arg01, #488
2c2e0     20 26 86 F1 | 	sub	local01, #32
2c2e4     13 15 02 FB | 	rdlong	arg02, local01
2c2e8     09 15 62 FC | 	wrlong	arg02, arg01
2c2ec     20 26 06 F1 | 	add	local01, #32
2c2f0     13 13 02 F6 | 	mov	arg01, local01
2c2f4     EC 13 06 F1 | 	add	arg01, #492
2c2f8     24 26 86 F1 | 	sub	local01, #36
2c2fc     13 15 02 FB | 	rdlong	arg02, local01
2c300     09 15 62 FC | 	wrlong	arg02, arg01
2c304     10 26 06 F1 | 	add	local01, #16
2c308     13 17 02 FB | 	rdlong	arg03, local01
2c30c     01 16 06 F1 | 	add	arg03, #1
2c310     10 26 06 F1 | 	add	local01, #16
2c314     13 17 62 FC | 	wrlong	arg03, local01
2c318     2F 26 86 F1 | 	sub	local01, #47
2c31c     13 13 C2 FA | 	rdbyte	arg01, local01
2c320     33 26 06 F1 | 	add	local01, #51
2c324     13 15 02 F6 | 	mov	arg02, local01
2c328     01 18 06 F6 | 	mov	arg04, #1
2c32c     78 F9 BF FD | 	call	#_fatfs_cc_disk_write
2c330     30 26 86 F1 | 	sub	local01, #48
2c334     13 01 48 FC | 	wrbyte	#0, local01
2c338     04 26 86 F1 | 	sub	local01, #4
2c33c                 | LR__4340
2c33c     01 26 06 F1 | 	add	local01, #1
2c340     13 13 C2 FA | 	rdbyte	arg01, local01
2c344     00 14 06 F6 | 	mov	arg02, #0
2c348     00 16 06 F6 | 	mov	arg03, #0
2c34c     94 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2c350     00 FA 0D F2 | 	cmp	result1, #0 wz
2c354     01 28 06 56 |  if_ne	mov	local02, #1
2c358                 | LR__4341
2c358                 | ' 	}
2c358                 | ' 
2c358                 | ' 	return res;
2c358     14 FB 01 F6 | 	mov	result1, local02
2c35c     A7 F0 03 F6 | 	mov	ptra, fp
2c360     B2 00 A0 FD | 	call	#popregs_
2c364                 | _fatfs_cc_sync_fs_ret
2c364     2D 00 64 FD | 	ret
2c368                 | 
2c368                 | _fatfs_cc_clst2sect
2c368     02 14 86 F1 | 	sub	arg02, #2
2c36c     18 12 06 F1 | 	add	arg01, #24
2c370     09 01 02 FB | 	rdlong	_var01, arg01
2c374     18 12 86 F1 | 	sub	arg01, #24
2c378     02 00 86 F1 | 	sub	_var01, #2
2c37c     00 15 12 F2 | 	cmp	arg02, _var01 wc
2c380     0A 12 06 C1 |  if_b	add	arg01, #10
2c384     09 01 E2 CA |  if_b	rdword	_var01, arg01
2c388     0A 01 02 CD |  if_b	qmul	_var01, arg02
2c38c     00 FA 05 36 |  if_ae	mov	result1, #0
2c390                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2c390     22 12 06 C1 |  if_b	add	arg01, #34
2c394     09 FB 01 CB |  if_b	rdlong	result1, arg01
2c398     18 00 62 CD |  if_b	getqx	_var01
2c39c     00 FB 01 C1 |  if_b	add	result1, _var01
2c3a0                 | _fatfs_cc_clst2sect_ret
2c3a0     2D 00 64 FD | 	ret
2c3a4                 | 
2c3a4                 | _fatfs_cc_get_fat
2c3a4     07 4A 05 F6 | 	mov	COUNT_, #7
2c3a8     A8 00 A0 FD | 	call	#pushregs_
2c3ac     0A 27 02 F6 | 	mov	local01, arg02
2c3b0     09 29 02 FB | 	rdlong	local02, arg01
2c3b4     02 26 16 F2 | 	cmp	local01, #2 wc
2c3b8     14 00 90 CD |  if_b	jmp	#LR__4350
2c3bc     18 28 06 F1 | 	add	local02, #24
2c3c0     14 2B 02 FB | 	rdlong	local03, local02
2c3c4     18 28 86 F1 | 	sub	local02, #24
2c3c8     15 27 12 F2 | 	cmp	local01, local03 wc
2c3cc     08 00 90 CD |  if_b	jmp	#LR__4351
2c3d0                 | LR__4350
2c3d0     01 2C 06 F6 | 	mov	local04, #1
2c3d4     60 01 90 FD | 	jmp	#LR__4358
2c3d8                 | LR__4351
2c3d8     01 2C 66 F6 | 	neg	local04, #1
2c3dc                 | ' 		val = 0xFFFFFFFF;
2c3dc                 | ' 
2c3dc                 | ' 		switch (fs->fs_type) {
2c3dc     14 2F C2 FA | 	rdbyte	local05, local02
2c3e0     01 2E 86 F1 | 	sub	local05, #1
2c3e4     03 2E 26 F3 | 	fle	local05, #3
2c3e8     30 2E 62 FD | 	jmprel	local05
2c3ec                 | LR__4352
2c3ec     0C 00 90 FD | 	jmp	#LR__4353
2c3f0     B8 00 90 FD | 	jmp	#LR__4354
2c3f4     F8 00 90 FD | 	jmp	#LR__4355
2c3f8     38 01 90 FD | 	jmp	#LR__4356
2c3fc                 | LR__4353
2c3fc     13 2F 02 F6 | 	mov	local05, local01
2c400     13 13 02 F6 | 	mov	arg01, local01
2c404     01 12 46 F0 | 	shr	arg01, #1
2c408     09 2F 02 F1 | 	add	local05, arg01
2c40c     14 13 02 F6 | 	mov	arg01, local02
2c410     17 31 02 F6 | 	mov	local06, local05
2c414     09 30 46 F0 | 	shr	local06, #9
2c418     24 28 06 F1 | 	add	local02, #36
2c41c     14 15 02 FB | 	rdlong	arg02, local02
2c420     24 28 86 F1 | 	sub	local02, #36
2c424     18 15 02 F1 | 	add	arg02, local06
2c428     C4 FD BF FD | 	call	#_fatfs_cc_move_window
2c42c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c430     04 01 90 5D |  if_ne	jmp	#LR__4357
2c434     17 31 02 F6 | 	mov	local06, local05
2c438     FF 31 06 F5 | 	and	local06, #511
2c43c     14 13 02 F6 | 	mov	arg01, local02
2c440     34 12 06 F1 | 	add	arg01, #52
2c444     09 31 02 F1 | 	add	local06, arg01
2c448     18 33 C2 FA | 	rdbyte	local07, local06
2c44c     14 13 02 F6 | 	mov	arg01, local02
2c450     01 2E 06 F1 | 	add	local05, #1
2c454     17 31 02 F6 | 	mov	local06, local05
2c458     09 30 46 F0 | 	shr	local06, #9
2c45c     24 28 06 F1 | 	add	local02, #36
2c460     14 15 02 FB | 	rdlong	arg02, local02
2c464     24 28 86 F1 | 	sub	local02, #36
2c468     18 15 02 F1 | 	add	arg02, local06
2c46c     80 FD BF FD | 	call	#_fatfs_cc_move_window
2c470     00 FA 0D F2 | 	cmp	result1, #0 wz
2c474     C0 00 90 5D |  if_ne	jmp	#LR__4357
2c478     FF 2F 06 F5 | 	and	local05, #511
2c47c     34 28 06 F1 | 	add	local02, #52
2c480     14 2F 02 F1 | 	add	local05, local02
2c484     17 31 C2 FA | 	rdbyte	local06, local05
2c488     08 30 66 F0 | 	shl	local06, #8
2c48c     18 33 42 F5 | 	or	local07, local06
2c490     01 26 CE F7 | 	test	local01, #1 wz
2c494     04 32 46 50 |  if_ne	shr	local07, #4
2c498     19 2B 02 56 |  if_ne	mov	local03, local07
2c49c     0B 32 46 A7 |  if_e	zerox	local07, #11
2c4a0     19 2B 02 A6 |  if_e	mov	local03, local07
2c4a4     15 2D 02 F6 | 	mov	local04, local03
2c4a8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2c4a8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2c4a8                 | ' 			break;
2c4a8     8C 00 90 FD | 	jmp	#LR__4357
2c4ac                 | LR__4354
2c4ac     14 13 02 F6 | 	mov	arg01, local02
2c4b0     13 31 02 F6 | 	mov	local06, local01
2c4b4     08 30 46 F0 | 	shr	local06, #8
2c4b8     24 28 06 F1 | 	add	local02, #36
2c4bc     14 15 02 FB | 	rdlong	arg02, local02
2c4c0     24 28 86 F1 | 	sub	local02, #36
2c4c4     18 15 02 F1 | 	add	arg02, local06
2c4c8     24 FD BF FD | 	call	#_fatfs_cc_move_window
2c4cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4d0     64 00 90 5D |  if_ne	jmp	#LR__4357
2c4d4     34 28 06 F1 | 	add	local02, #52
2c4d8     01 26 66 F0 | 	shl	local01, #1
2c4dc     FF 27 06 F5 | 	and	local01, #511
2c4e0     13 29 02 F1 | 	add	local02, local01
2c4e4                 | ' {
2c4e4                 | ' 
2c4e4                 | ' 	return *((WORD*)ptr);
2c4e4     14 FB E1 FA | 	rdword	result1, local02
2c4e8     FD 2C 32 F9 | 	getword	local04, result1, #0
2c4ec                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2c4ec                 | ' 			break;
2c4ec     48 00 90 FD | 	jmp	#LR__4357
2c4f0                 | LR__4355
2c4f0     14 13 02 F6 | 	mov	arg01, local02
2c4f4     13 31 02 F6 | 	mov	local06, local01
2c4f8     07 30 46 F0 | 	shr	local06, #7
2c4fc     24 28 06 F1 | 	add	local02, #36
2c500     14 15 02 FB | 	rdlong	arg02, local02
2c504     24 28 86 F1 | 	sub	local02, #36
2c508     18 15 02 F1 | 	add	arg02, local06
2c50c     E0 FC BF FD | 	call	#_fatfs_cc_move_window
2c510     00 FA 0D F2 | 	cmp	result1, #0 wz
2c514     20 00 90 5D |  if_ne	jmp	#LR__4357
2c518     34 28 06 F1 | 	add	local02, #52
2c51c     02 26 66 F0 | 	shl	local01, #2
2c520     FF 27 06 F5 | 	and	local01, #511
2c524     13 29 02 F1 | 	add	local02, local01
2c528                 | ' {
2c528                 | ' 
2c528                 | ' 	return *((DWORD*)ptr);
2c528     14 2D 02 FB | 	rdlong	local04, local02
2c52c     7C 2C 06 F4 | 	bitl	local04, #124
2c530                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2c530                 | ' 			break;
2c530     04 00 90 FD | 	jmp	#LR__4357
2c534                 | LR__4356
2c534     01 2C 06 F6 | 	mov	local04, #1
2c538                 | LR__4357
2c538                 | LR__4358
2c538                 | ' 			val = 1;
2c538                 | ' 		}
2c538                 | ' 	}
2c538                 | ' 
2c538                 | ' 	return val;
2c538     16 FB 01 F6 | 	mov	result1, local04
2c53c     A7 F0 03 F6 | 	mov	ptra, fp
2c540     B2 00 A0 FD | 	call	#popregs_
2c544                 | _fatfs_cc_get_fat_ret
2c544     2D 00 64 FD | 	ret
2c548                 | 
2c548                 | _fatfs_cc_put_fat
2c548     07 4A 05 F6 | 	mov	COUNT_, #7
2c54c     A8 00 A0 FD | 	call	#pushregs_
2c550     09 27 02 F6 | 	mov	local01, arg01
2c554     0A 29 02 F6 | 	mov	local02, arg02
2c558     0B 2B 02 F6 | 	mov	local03, arg03
2c55c     02 2C 06 F6 | 	mov	local04, #2
2c560     02 28 16 F2 | 	cmp	local02, #2 wc
2c564     DC 01 90 CD |  if_b	jmp	#LR__4365
2c568     18 26 06 F1 | 	add	local01, #24
2c56c     13 2F 02 FB | 	rdlong	local05, local01
2c570     18 26 86 F1 | 	sub	local01, #24
2c574     17 29 12 F2 | 	cmp	local02, local05 wc
2c578     C8 01 90 3D |  if_ae	jmp	#LR__4365
2c57c                 | ' 		switch (fs->fs_type) {
2c57c     13 31 C2 FA | 	rdbyte	local06, local01
2c580     01 30 86 F1 | 	sub	local06, #1
2c584     03 30 26 F3 | 	fle	local06, #3
2c588     30 30 62 FD | 	jmprel	local06
2c58c                 | LR__4360
2c58c     0C 00 90 FD | 	jmp	#LR__4361
2c590     F0 00 90 FD | 	jmp	#LR__4362
2c594     38 01 90 FD | 	jmp	#LR__4363
2c598     A8 01 90 FD | 	jmp	#LR__4364
2c59c                 | LR__4361
2c59c     14 31 02 F6 | 	mov	local06, local02
2c5a0     14 2D 02 F6 | 	mov	local04, local02
2c5a4     01 2C 46 F0 | 	shr	local04, #1
2c5a8     16 31 02 F1 | 	add	local06, local04
2c5ac     13 13 02 F6 | 	mov	arg01, local01
2c5b0     18 33 02 F6 | 	mov	local07, local06
2c5b4     09 32 46 F0 | 	shr	local07, #9
2c5b8     24 26 06 F1 | 	add	local01, #36
2c5bc     13 15 02 FB | 	rdlong	arg02, local01
2c5c0     24 26 86 F1 | 	sub	local01, #36
2c5c4     19 15 02 F1 | 	add	arg02, local07
2c5c8     24 FC BF FD | 	call	#_fatfs_cc_move_window
2c5cc     FD 2C 0A F6 | 	mov	local04, result1 wz
2c5d0     70 01 90 5D |  if_ne	jmp	#LR__4364
2c5d4     13 2D 02 F6 | 	mov	local04, local01
2c5d8     34 2C 06 F1 | 	add	local04, #52
2c5dc     18 17 02 F6 | 	mov	arg03, local06
2c5e0     FF 17 06 F5 | 	and	arg03, #511
2c5e4     0B 2D 02 F1 | 	add	local04, arg03
2c5e8     01 28 CE F7 | 	test	local02, #1 wz
2c5ec     01 30 06 F1 | 	add	local06, #1
2c5f0     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2c5f4     17 2F 42 58 |  if_ne	getnib	local05, local05, #0
2c5f8     15 33 02 56 |  if_ne	mov	local07, local03
2c5fc     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2c600     04 32 66 50 |  if_ne	shl	local07, #4
2c604     19 2F 42 55 |  if_ne	or	local05, local07
2c608     15 2F 02 A6 |  if_e	mov	local05, local03
2c60c     16 2F 42 FC | 	wrbyte	local05, local04
2c610     03 26 06 F1 | 	add	local01, #3
2c614     13 03 48 FC | 	wrbyte	#1, local01
2c618     03 26 86 F1 | 	sub	local01, #3
2c61c     13 13 02 F6 | 	mov	arg01, local01
2c620     18 33 02 F6 | 	mov	local07, local06
2c624     09 32 46 F0 | 	shr	local07, #9
2c628     24 26 06 F1 | 	add	local01, #36
2c62c     13 15 02 FB | 	rdlong	arg02, local01
2c630     24 26 86 F1 | 	sub	local01, #36
2c634     19 15 02 F1 | 	add	arg02, local07
2c638     B4 FB BF FD | 	call	#_fatfs_cc_move_window
2c63c     FD 2C 0A F6 | 	mov	local04, result1 wz
2c640     00 01 90 5D |  if_ne	jmp	#LR__4364
2c644     13 33 02 F6 | 	mov	local07, local01
2c648     34 32 06 F1 | 	add	local07, #52
2c64c     FF 31 06 F5 | 	and	local06, #511
2c650     18 33 02 F1 | 	add	local07, local06
2c654     01 28 CE F7 | 	test	local02, #1 wz
2c658     04 2A 46 50 |  if_ne	shr	local03, #4
2c65c     15 2F 02 56 |  if_ne	mov	local05, local03
2c660     19 2F C2 AA |  if_e	rdbyte	local05, local07
2c664     F0 2E 06 A5 |  if_e	and	local05, #240
2c668     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2c66c     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2c670     15 2F 42 A5 |  if_e	or	local05, local03
2c674     19 2F 42 FC | 	wrbyte	local05, local07
2c678     03 26 06 F1 | 	add	local01, #3
2c67c     13 03 48 FC | 	wrbyte	#1, local01
2c680                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2c680                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2c680                 | ' 			fs->wflag = 1;
2c680                 | ' 			break;
2c680     C0 00 90 FD | 	jmp	#LR__4364
2c684                 | LR__4362
2c684     13 13 02 F6 | 	mov	arg01, local01
2c688     14 33 02 F6 | 	mov	local07, local02
2c68c     08 32 46 F0 | 	shr	local07, #8
2c690     24 26 06 F1 | 	add	local01, #36
2c694     13 15 02 FB | 	rdlong	arg02, local01
2c698     24 26 86 F1 | 	sub	local01, #36
2c69c     19 15 02 F1 | 	add	arg02, local07
2c6a0     4C FB BF FD | 	call	#_fatfs_cc_move_window
2c6a4     FD 2C 0A F6 | 	mov	local04, result1 wz
2c6a8     98 00 90 5D |  if_ne	jmp	#LR__4364
2c6ac     34 26 06 F1 | 	add	local01, #52
2c6b0     13 13 02 F6 | 	mov	arg01, local01
2c6b4     01 28 66 F0 | 	shl	local02, #1
2c6b8     FF 29 06 F5 | 	and	local02, #511
2c6bc     14 13 02 F1 | 	add	arg01, local02
2c6c0     09 2B 52 FC | 	wrword	local03, arg01
2c6c4     31 26 86 F1 | 	sub	local01, #49
2c6c8     13 03 48 FC | 	wrbyte	#1, local01
2c6cc                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2c6cc                 | ' 			fs->wflag = 1;
2c6cc                 | ' 			break;
2c6cc     74 00 90 FD | 	jmp	#LR__4364
2c6d0                 | LR__4363
2c6d0     13 13 02 F6 | 	mov	arg01, local01
2c6d4     14 33 02 F6 | 	mov	local07, local02
2c6d8     07 32 46 F0 | 	shr	local07, #7
2c6dc     24 26 06 F1 | 	add	local01, #36
2c6e0     13 15 02 FB | 	rdlong	arg02, local01
2c6e4     24 26 86 F1 | 	sub	local01, #36
2c6e8     19 15 02 F1 | 	add	arg02, local07
2c6ec     00 FB BF FD | 	call	#_fatfs_cc_move_window
2c6f0     FD 2C 0A F6 | 	mov	local04, result1 wz
2c6f4     4C 00 90 5D |  if_ne	jmp	#LR__4364
2c6f8     7C 2A 06 F4 | 	bitl	local03, #124
2c6fc     13 13 02 F6 | 	mov	arg01, local01
2c700     34 12 06 F1 | 	add	arg01, #52
2c704     14 33 02 F6 | 	mov	local07, local02
2c708     02 32 66 F0 | 	shl	local07, #2
2c70c     FF 33 06 F5 | 	and	local07, #511
2c710     19 13 02 F1 | 	add	arg01, local07
2c714                 | ' {
2c714                 | ' 
2c714                 | ' 	return *((DWORD*)ptr);
2c714     09 33 02 FB | 	rdlong	local07, arg01
2c718     00 00 78 FF 
2c71c     00 32 06 F5 | 	and	local07, ##-268435456
2c720     19 2B 42 F5 | 	or	local03, local07
2c724     34 26 06 F1 | 	add	local01, #52
2c728     13 13 02 F6 | 	mov	arg01, local01
2c72c     02 28 66 F0 | 	shl	local02, #2
2c730     FF 29 06 F5 | 	and	local02, #511
2c734     14 13 02 F1 | 	add	arg01, local02
2c738     09 2B 62 FC | 	wrlong	local03, arg01
2c73c     31 26 86 F1 | 	sub	local01, #49
2c740     13 03 48 FC | 	wrbyte	#1, local01
2c744                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2c744                 | ' 			}
2c744                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2c744                 | ' 			fs->wflag = 1;
2c744                 | ' 			break;
2c744                 | LR__4364
2c744                 | LR__4365
2c744                 | ' 		}
2c744                 | ' 	}
2c744                 | ' 	return res;
2c744     16 FB 01 F6 | 	mov	result1, local04
2c748     A7 F0 03 F6 | 	mov	ptra, fp
2c74c     B2 00 A0 FD | 	call	#popregs_
2c750                 | _fatfs_cc_put_fat_ret
2c750     2D 00 64 FD | 	ret
2c754                 | 
2c754                 | _fatfs_cc_remove_chain
2c754     07 4A 05 F6 | 	mov	COUNT_, #7
2c758     A8 00 A0 FD | 	call	#pushregs_
2c75c     09 27 02 F6 | 	mov	local01, arg01
2c760     0A 29 02 F6 | 	mov	local02, arg02
2c764     0B 2B 02 F6 | 	mov	local03, arg03
2c768     13 2D 02 FB | 	rdlong	local04, local01
2c76c     02 28 16 F2 | 	cmp	local02, #2 wc
2c770     14 00 90 CD |  if_b	jmp	#LR__4370
2c774     18 2C 06 F1 | 	add	local04, #24
2c778     16 FB 01 FB | 	rdlong	result1, local04
2c77c     18 2C 86 F1 | 	sub	local04, #24
2c780     FD 28 12 F2 | 	cmp	local02, result1 wc
2c784     08 00 90 CD |  if_b	jmp	#LR__4371
2c788                 | LR__4370
2c788     02 FA 05 F6 | 	mov	result1, #2
2c78c     CC 00 90 FD | 	jmp	#LR__4375
2c790                 | LR__4371
2c790     00 2A 0E F2 | 	cmp	local03, #0 wz
2c794     18 00 90 AD |  if_e	jmp	#LR__4372
2c798     15 15 02 F6 | 	mov	arg02, local03
2c79c     16 13 02 F6 | 	mov	arg01, local04
2c7a0     01 16 66 F6 | 	neg	arg03, #1
2c7a4     A0 FD BF FD | 	call	#_fatfs_cc_put_fat
2c7a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7ac     AC 00 90 5D |  if_ne	jmp	#LR__4375
2c7b0                 | LR__4372
2c7b0                 | ' 	}
2c7b0                 | ' 
2c7b0                 | ' 
2c7b0                 | ' 	do {
2c7b0                 | LR__4373
2c7b0     14 15 02 F6 | 	mov	arg02, local02
2c7b4     13 13 02 F6 | 	mov	arg01, local01
2c7b8     E8 FB BF FD | 	call	#_fatfs_cc_get_fat
2c7bc     FD 2E 0A F6 | 	mov	local05, result1 wz
2c7c0     94 00 90 AD |  if_e	jmp	#LR__4374
2c7c4     01 2E 0E F2 | 	cmp	local05, #1 wz
2c7c8     02 FA 05 A6 |  if_e	mov	result1, #2
2c7cc     8C 00 90 AD |  if_e	jmp	#LR__4375
2c7d0     FF FF 7F FF 
2c7d4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2c7d8     01 FA 05 A6 |  if_e	mov	result1, #1
2c7dc     7C 00 90 AD |  if_e	jmp	#LR__4375
2c7e0     00 30 06 F6 | 	mov	local06, #0
2c7e4     16 13 02 F6 | 	mov	arg01, local04
2c7e8     14 15 02 F6 | 	mov	arg02, local02
2c7ec     00 16 06 F6 | 	mov	arg03, #0
2c7f0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2c7f4     FD 2A 0A F6 | 	mov	local03, result1 wz
2c7f8     15 FB 01 56 |  if_ne	mov	result1, local03
2c7fc     5C 00 90 5D |  if_ne	jmp	#LR__4375
2c800     18 2C 06 F1 | 	add	local04, #24
2c804     16 33 02 FB | 	rdlong	local07, local04
2c808     02 32 86 F1 | 	sub	local07, #2
2c80c     04 2C 86 F1 | 	sub	local04, #4
2c810     16 2B 02 FB | 	rdlong	local03, local04
2c814     14 2C 86 F1 | 	sub	local04, #20
2c818     19 2B 12 F2 | 	cmp	local03, local07 wc
2c81c     14 2C 06 C1 |  if_b	add	local04, #20
2c820     16 31 02 CB |  if_b	rdlong	local06, local04
2c824     01 30 06 C1 |  if_b	add	local06, #1
2c828     16 31 62 CC |  if_b	wrlong	local06, local04
2c82c     10 2C 86 C1 |  if_b	sub	local04, #16
2c830     16 33 C2 CA |  if_b	rdbyte	local07, local04
2c834     01 32 46 C5 |  if_b	or	local07, #1
2c838     16 33 42 CC |  if_b	wrbyte	local07, local04
2c83c     04 2C 86 C1 |  if_b	sub	local04, #4
2c840     17 29 02 F6 | 	mov	local02, local05
2c844     18 2C 06 F1 | 	add	local04, #24
2c848     16 33 02 FB | 	rdlong	local07, local04
2c84c     18 2C 86 F1 | 	sub	local04, #24
2c850     19 29 12 F2 | 	cmp	local02, local07 wc
2c854     58 FF 9F CD |  if_b	jmp	#LR__4373
2c858                 | LR__4374
2c858                 | ' #line 1500 "ff.c"
2c858                 | ' 	return FR_OK;
2c858     00 FA 05 F6 | 	mov	result1, #0
2c85c                 | LR__4375
2c85c     A7 F0 03 F6 | 	mov	ptra, fp
2c860     B2 00 A0 FD | 	call	#popregs_
2c864                 | _fatfs_cc_remove_chain_ret
2c864     2D 00 64 FD | 	ret
2c868                 | 
2c868                 | _fatfs_cc_create_chain
2c868     09 4A 05 F6 | 	mov	COUNT_, #9
2c86c     A8 00 A0 FD | 	call	#pushregs_
2c870     09 27 02 F6 | 	mov	local01, arg01
2c874     0A 29 0A F6 | 	mov	local02, arg02 wz
2c878     13 2B 02 FB | 	rdlong	local03, local01
2c87c     28 00 90 5D |  if_ne	jmp	#LR__4380
2c880     10 2A 06 F1 | 	add	local03, #16
2c884     15 2D 0A FB | 	rdlong	local04, local03 wz
2c888     10 2A 86 F1 | 	sub	local03, #16
2c88c     18 2A 06 51 |  if_ne	add	local03, #24
2c890     15 2F 02 5B |  if_ne	rdlong	local05, local03
2c894     18 2A 86 51 |  if_ne	sub	local03, #24
2c898     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2c89c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4381
2c8a0     01 2C 06 F6 | 	mov	local04, #1
2c8a4     48 00 90 FD | 	jmp	#LR__4381
2c8a8                 | LR__4380
2c8a8     14 15 02 F6 | 	mov	arg02, local02
2c8ac     13 13 02 F6 | 	mov	arg01, local01
2c8b0     F0 FA BF FD | 	call	#_fatfs_cc_get_fat
2c8b4     FD 2C 02 F6 | 	mov	local04, result1
2c8b8     02 2C 16 F2 | 	cmp	local04, #2 wc
2c8bc     01 FA 05 C6 |  if_b	mov	result1, #1
2c8c0     BC 01 90 CD |  if_b	jmp	#LR__4391
2c8c4     FF FF 7F FF 
2c8c8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2c8cc     16 FB 01 A6 |  if_e	mov	result1, local04
2c8d0     AC 01 90 AD |  if_e	jmp	#LR__4391
2c8d4     18 2A 06 F1 | 	add	local03, #24
2c8d8     15 2F 02 FB | 	rdlong	local05, local03
2c8dc     18 2A 86 F1 | 	sub	local03, #24
2c8e0     17 2D 12 F2 | 	cmp	local04, local05 wc
2c8e4     16 FB 01 C6 |  if_b	mov	result1, local04
2c8e8     94 01 90 CD |  if_b	jmp	#LR__4391
2c8ec     14 2D 02 F6 | 	mov	local04, local02
2c8f0                 | LR__4381
2c8f0     14 2A 06 F1 | 	add	local03, #20
2c8f4     15 2F 0A FB | 	rdlong	local05, local03 wz
2c8f8     14 2A 86 F1 | 	sub	local03, #20
2c8fc     00 FA 05 A6 |  if_e	mov	result1, #0
2c900     7C 01 90 AD |  if_e	jmp	#LR__4391
2c904     00 30 06 F6 | 	mov	local06, #0
2c908     14 2D 0A F2 | 	cmp	local04, local02 wz
2c90c     74 00 90 5D |  if_ne	jmp	#LR__4384
2c910     16 31 02 F6 | 	mov	local06, local04
2c914     01 30 06 F1 | 	add	local06, #1
2c918     18 2A 06 F1 | 	add	local03, #24
2c91c     15 2F 02 FB | 	rdlong	local05, local03
2c920     18 2A 86 F1 | 	sub	local03, #24
2c924     17 31 12 F2 | 	cmp	local06, local05 wc
2c928     02 30 06 36 |  if_ae	mov	local06, #2
2c92c     18 15 02 F6 | 	mov	arg02, local06
2c930     13 13 02 F6 | 	mov	arg01, local01
2c934     6C FA BF FD | 	call	#_fatfs_cc_get_fat
2c938     FD 2E 02 F6 | 	mov	local05, result1
2c93c     01 2E 0E F2 | 	cmp	local05, #1 wz
2c940     FF FF 7F 5F 
2c944     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2c948     17 FB 01 A6 |  if_e	mov	result1, local05
2c94c     30 01 90 AD |  if_e	jmp	#LR__4391
2c950     00 2E 0E F2 | 	cmp	local05, #0 wz
2c954     2C 00 90 AD |  if_e	jmp	#LR__4383
2c958     10 2A 06 F1 | 	add	local03, #16
2c95c     15 33 02 FB | 	rdlong	local07, local03
2c960     10 2A 86 F1 | 	sub	local03, #16
2c964     02 32 16 F2 | 	cmp	local07, #2 wc
2c968     14 00 90 CD |  if_b	jmp	#LR__4382
2c96c     18 2A 06 F1 | 	add	local03, #24
2c970     15 2F 02 FB | 	rdlong	local05, local03
2c974     18 2A 86 F1 | 	sub	local03, #24
2c978     17 33 12 F2 | 	cmp	local07, local05 wc
2c97c     19 2D 02 C6 |  if_b	mov	local04, local07
2c980                 | LR__4382
2c980     00 30 06 F6 | 	mov	local06, #0
2c984                 | LR__4383
2c984                 | LR__4384
2c984     00 30 0E F2 | 	cmp	local06, #0 wz
2c988     60 00 90 5D |  if_ne	jmp	#LR__4387
2c98c     16 31 02 F6 | 	mov	local06, local04
2c990                 | ' 			ncl = scl;
2c990                 | ' 			for (;;) {
2c990                 | LR__4385
2c990     01 30 06 F1 | 	add	local06, #1
2c994     18 2A 06 F1 | 	add	local03, #24
2c998     15 2F 02 FB | 	rdlong	local05, local03
2c99c     18 2A 86 F1 | 	sub	local03, #24
2c9a0     17 31 12 F2 | 	cmp	local06, local05 wc
2c9a4     02 30 06 36 |  if_ae	mov	local06, #2
2c9a8     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2c9ac     00 FA 05 16 |  if_a	mov	result1, #0
2c9b0     CC 00 90 1D |  if_a	jmp	#LR__4391
2c9b4     18 15 02 F6 | 	mov	arg02, local06
2c9b8     13 13 02 F6 | 	mov	arg01, local01
2c9bc     E4 F9 BF FD | 	call	#_fatfs_cc_get_fat
2c9c0     FD 32 0A F6 | 	mov	local07, result1 wz
2c9c4     24 00 90 AD |  if_e	jmp	#LR__4386
2c9c8     01 32 0E F2 | 	cmp	local07, #1 wz
2c9cc     FF FF 7F 5F 
2c9d0     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2c9d4     19 FB 01 A6 |  if_e	mov	result1, local07
2c9d8     A4 00 90 AD |  if_e	jmp	#LR__4391
2c9dc     16 31 0A F2 | 	cmp	local06, local04 wz
2c9e0     00 FA 05 A6 |  if_e	mov	result1, #0
2c9e4     98 00 90 AD |  if_e	jmp	#LR__4391
2c9e8     A4 FF 9F FD | 	jmp	#LR__4385
2c9ec                 | LR__4386
2c9ec                 | LR__4387
2c9ec     15 13 02 F6 | 	mov	arg01, local03
2c9f0     18 15 02 F6 | 	mov	arg02, local06
2c9f4     01 16 66 F6 | 	neg	arg03, #1
2c9f8     4C FB BF FD | 	call	#_fatfs_cc_put_fat
2c9fc     FD 34 0A F6 | 	mov	local08, result1 wz
2ca00     1C 00 90 5D |  if_ne	jmp	#LR__4388
2ca04     00 28 0E F2 | 	cmp	local02, #0 wz
2ca08     14 00 90 AD |  if_e	jmp	#LR__4388
2ca0c     15 13 02 F6 | 	mov	arg01, local03
2ca10     14 15 02 F6 | 	mov	arg02, local02
2ca14     18 17 02 F6 | 	mov	arg03, local06
2ca18     2C FB BF FD | 	call	#_fatfs_cc_put_fat
2ca1c     FD 34 02 F6 | 	mov	local08, result1
2ca20                 | LR__4388
2ca20     00 34 0E F2 | 	cmp	local08, #0 wz
2ca24     4C 00 90 5D |  if_ne	jmp	#LR__4389
2ca28     10 2A 06 F1 | 	add	local03, #16
2ca2c     15 31 62 FC | 	wrlong	local06, local03
2ca30     08 2A 06 F1 | 	add	local03, #8
2ca34     15 2F 02 FB | 	rdlong	local05, local03
2ca38     02 2E 86 F1 | 	sub	local05, #2
2ca3c     04 2A 86 F1 | 	sub	local03, #4
2ca40     15 37 02 FB | 	rdlong	local09, local03
2ca44     14 2A 86 F1 | 	sub	local03, #20
2ca48     17 37 1A F2 | 	cmp	local09, local05 wcz
2ca4c     14 2A 06 E1 |  if_be	add	local03, #20
2ca50     15 37 02 EB |  if_be	rdlong	local09, local03
2ca54     01 36 86 E1 |  if_be	sub	local09, #1
2ca58     15 37 62 EC |  if_be	wrlong	local09, local03
2ca5c     14 2A 86 E1 |  if_be	sub	local03, #20
2ca60     04 2A 06 F1 | 	add	local03, #4
2ca64     15 2F C2 FA | 	rdbyte	local05, local03
2ca68     01 2E 46 F5 | 	or	local05, #1
2ca6c     15 2F 42 FC | 	wrbyte	local05, local03
2ca70     08 00 90 FD | 	jmp	#LR__4390
2ca74                 | LR__4389
2ca74     01 34 0E F2 | 	cmp	local08, #1 wz
2ca78     01 30 C6 F6 | 	negz	local06, #1
2ca7c                 | LR__4390
2ca7c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2ca7c                 | ' 	}
2ca7c                 | ' 
2ca7c                 | ' 	return ncl;
2ca7c     18 FB 01 F6 | 	mov	result1, local06
2ca80                 | LR__4391
2ca80     A7 F0 03 F6 | 	mov	ptra, fp
2ca84     B2 00 A0 FD | 	call	#popregs_
2ca88                 | _fatfs_cc_create_chain_ret
2ca88     2D 00 64 FD | 	ret
2ca8c                 | 
2ca8c                 | _fatfs_cc_dir_clear
2ca8c     06 4A 05 F6 | 	mov	COUNT_, #6
2ca90     A8 00 A0 FD | 	call	#pushregs_
2ca94     09 27 02 F6 | 	mov	local01, arg01
2ca98     0A 29 02 F6 | 	mov	local02, arg02
2ca9c     13 13 02 F6 | 	mov	arg01, local01
2caa0     78 F6 BF FD | 	call	#_fatfs_cc_sync_window
2caa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2caa8     01 FA 05 56 |  if_ne	mov	result1, #1
2caac     90 00 90 5D |  if_ne	jmp	#LR__4402
2cab0     13 13 02 F6 | 	mov	arg01, local01
2cab4     14 15 02 F6 | 	mov	arg02, local02
2cab8     AC F8 BF FD | 	call	#_fatfs_cc_clst2sect
2cabc     FD 2A 02 F6 | 	mov	local03, result1
2cac0     30 26 06 F1 | 	add	local01, #48
2cac4     13 2B 62 FC | 	wrlong	local03, local01
2cac8     04 26 06 F1 | 	add	local01, #4
2cacc     13 13 02 F6 | 	mov	arg01, local01
2cad0     00 14 06 F6 | 	mov	arg02, #0
2cad4     09 16 C6 F9 | 	decod	arg03, #9
2cad8     98 00 A0 FD | 	call	#\builtin_bytefill_
2cadc     13 2D 02 F6 | 	mov	local04, local01
2cae0                 | ' #line 1667 "ff.c"
2cae0                 | ' 	{
2cae0                 | ' 		ibuf = fs->win; szb = 1;
2cae0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2cae0     00 2E 06 F6 | 	mov	local05, #0
2cae4     34 26 86 F1 | 	sub	local01, #52
2cae8                 | LR__4400
2cae8     0A 26 06 F1 | 	add	local01, #10
2caec     13 31 E2 FA | 	rdword	local06, local01
2caf0     0A 26 86 F1 | 	sub	local01, #10
2caf4     18 2F 12 F2 | 	cmp	local05, local06 wc
2caf8     2C 00 90 3D |  if_ae	jmp	#LR__4401
2cafc     01 26 06 F1 | 	add	local01, #1
2cb00     13 13 C2 FA | 	rdbyte	arg01, local01
2cb04     01 26 86 F1 | 	sub	local01, #1
2cb08     16 15 02 F6 | 	mov	arg02, local04
2cb0c     15 17 02 F6 | 	mov	arg03, local03
2cb10     17 17 02 F1 | 	add	arg03, local05
2cb14     01 18 06 F6 | 	mov	arg04, #1
2cb18     8C F1 BF FD | 	call	#_fatfs_cc_disk_write
2cb1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb20     01 2E 06 A1 |  if_e	add	local05, #1
2cb24     C0 FF 9F AD |  if_e	jmp	#LR__4400
2cb28                 | LR__4401
2cb28                 | ' 	}
2cb28                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2cb28     0A 26 06 F1 | 	add	local01, #10
2cb2c     13 2D E2 FA | 	rdword	local04, local01
2cb30     16 2F 0A F2 | 	cmp	local05, local04 wz
2cb34     00 30 06 A6 |  if_e	mov	local06, #0
2cb38     01 30 06 56 |  if_ne	mov	local06, #1
2cb3c     18 FB 01 F6 | 	mov	result1, local06
2cb40                 | LR__4402
2cb40     A7 F0 03 F6 | 	mov	ptra, fp
2cb44     B2 00 A0 FD | 	call	#popregs_
2cb48                 | _fatfs_cc_dir_clear_ret
2cb48     2D 00 64 FD | 	ret
2cb4c                 | 
2cb4c                 | _fatfs_cc_dir_sdi
2cb4c     06 4A 05 F6 | 	mov	COUNT_, #6
2cb50     A8 00 A0 FD | 	call	#pushregs_
2cb54     09 27 02 F6 | 	mov	local01, arg01
2cb58     0A 29 02 F6 | 	mov	local02, arg02
2cb5c     13 2B 02 FB | 	rdlong	local03, local01
2cb60     00 10 00 FF 
2cb64     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2cb68     1F 28 CE C7 |  if_b	test	local02, #31 wz
2cb6c                 | ' 		return FR_INT_ERR;
2cb6c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2cb70     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4416
2cb74     10 26 06 F1 | 	add	local01, #16
2cb78     13 29 62 FC | 	wrlong	local02, local01
2cb7c     08 26 86 F1 | 	sub	local01, #8
2cb80     13 2D 0A FB | 	rdlong	local04, local01 wz
2cb84     08 26 86 F1 | 	sub	local01, #8
2cb88     15 2F C2 AA |  if_e	rdbyte	local05, local03
2cb8c     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2cb90     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2cb94     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2cb98     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2cb9c     00 2C 0E F2 | 	cmp	local04, #0 wz
2cba0     3C 00 90 5D |  if_ne	jmp	#LR__4410
2cba4     14 2F 02 F6 | 	mov	local05, local02
2cba8     05 2E 46 F0 | 	shr	local05, #5
2cbac     08 2A 06 F1 | 	add	local03, #8
2cbb0     15 15 E2 FA | 	rdword	arg02, local03
2cbb4     08 2A 86 F1 | 	sub	local03, #8
2cbb8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2cbbc     02 FA 05 36 |  if_ae	mov	result1, #2
2cbc0     E4 00 90 3D |  if_ae	jmp	#LR__4416
2cbc4     28 2A 06 F1 | 	add	local03, #40
2cbc8     15 2F 02 FB | 	rdlong	local05, local03
2cbcc     28 2A 86 F1 | 	sub	local03, #40
2cbd0     18 26 06 F1 | 	add	local01, #24
2cbd4     13 2F 62 FC | 	wrlong	local05, local01
2cbd8     18 26 86 F1 | 	sub	local01, #24
2cbdc     7C 00 90 FD | 	jmp	#LR__4415
2cbe0                 | LR__4410
2cbe0     0A 2A 06 F1 | 	add	local03, #10
2cbe4     15 31 E2 FA | 	rdword	local06, local03
2cbe8     0A 2A 86 F1 | 	sub	local03, #10
2cbec     09 30 66 F0 | 	shl	local06, #9
2cbf0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2cbf0                 | ' 		while (ofs >= csz) {
2cbf0                 | LR__4411
2cbf0     18 29 12 F2 | 	cmp	local02, local06 wc
2cbf4     4C 00 90 CD |  if_b	jmp	#LR__4414
2cbf8     13 13 02 F6 | 	mov	arg01, local01
2cbfc     16 15 02 F6 | 	mov	arg02, local04
2cc00     A0 F7 BF FD | 	call	#_fatfs_cc_get_fat
2cc04     FD 2C 02 F6 | 	mov	local04, result1
2cc08     FF FF 7F FF 
2cc0c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2cc10     01 FA 05 A6 |  if_e	mov	result1, #1
2cc14     90 00 90 AD |  if_e	jmp	#LR__4416
2cc18     02 2C 16 F2 | 	cmp	local04, #2 wc
2cc1c     14 00 90 CD |  if_b	jmp	#LR__4412
2cc20     18 2A 06 F1 | 	add	local03, #24
2cc24     15 2F 02 FB | 	rdlong	local05, local03
2cc28     18 2A 86 F1 | 	sub	local03, #24
2cc2c     17 2D 12 F2 | 	cmp	local04, local05 wc
2cc30     08 00 90 CD |  if_b	jmp	#LR__4413
2cc34                 | LR__4412
2cc34     02 FA 05 F6 | 	mov	result1, #2
2cc38     6C 00 90 FD | 	jmp	#LR__4416
2cc3c                 | LR__4413
2cc3c     18 29 82 F1 | 	sub	local02, local06
2cc40     AC FF 9F FD | 	jmp	#LR__4411
2cc44                 | LR__4414
2cc44     15 13 02 F6 | 	mov	arg01, local03
2cc48     16 15 02 F6 | 	mov	arg02, local04
2cc4c     18 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2cc50     18 26 06 F1 | 	add	local01, #24
2cc54     13 FB 61 FC | 	wrlong	result1, local01
2cc58     18 26 86 F1 | 	sub	local01, #24
2cc5c                 | LR__4415
2cc5c     14 26 06 F1 | 	add	local01, #20
2cc60     13 2D 62 FC | 	wrlong	local04, local01
2cc64     04 26 06 F1 | 	add	local01, #4
2cc68     13 2F 0A FB | 	rdlong	local05, local01 wz
2cc6c     18 26 86 F1 | 	sub	local01, #24
2cc70     02 FA 05 A6 |  if_e	mov	result1, #2
2cc74     30 00 90 AD |  if_e	jmp	#LR__4416
2cc78     14 31 02 F6 | 	mov	local06, local02
2cc7c     09 30 46 F0 | 	shr	local06, #9
2cc80     18 26 06 F1 | 	add	local01, #24
2cc84     13 2F 02 FB | 	rdlong	local05, local01
2cc88     18 2F 02 F1 | 	add	local05, local06
2cc8c     13 2F 62 FC | 	wrlong	local05, local01
2cc90     34 2A 06 F1 | 	add	local03, #52
2cc94     FF 29 06 F5 | 	and	local02, #511
2cc98     14 2B 02 F1 | 	add	local03, local02
2cc9c     04 26 06 F1 | 	add	local01, #4
2cca0     13 2B 62 FC | 	wrlong	local03, local01
2cca4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2cca4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2cca4                 | ' 
2cca4                 | ' 	return FR_OK;
2cca4     00 FA 05 F6 | 	mov	result1, #0
2cca8                 | LR__4416
2cca8     A7 F0 03 F6 | 	mov	ptra, fp
2ccac     B2 00 A0 FD | 	call	#popregs_
2ccb0                 | _fatfs_cc_dir_sdi_ret
2ccb0     2D 00 64 FD | 	ret
2ccb4                 | 
2ccb4                 | _fatfs_cc_dir_next
2ccb4     05 4A 05 F6 | 	mov	COUNT_, #5
2ccb8     A8 00 A0 FD | 	call	#pushregs_
2ccbc     09 27 02 F6 | 	mov	local01, arg01
2ccc0     0A 29 02 F6 | 	mov	local02, arg02
2ccc4     13 2B 02 FB | 	rdlong	local03, local01
2ccc8     10 26 06 F1 | 	add	local01, #16
2cccc     13 2D 02 FB | 	rdlong	local04, local01
2ccd0     10 26 86 F1 | 	sub	local01, #16
2ccd4     20 2C 06 F1 | 	add	local04, #32
2ccd8     00 10 00 FF 
2ccdc     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2cce0     18 26 06 31 |  if_ae	add	local01, #24
2cce4     13 01 68 3C |  if_ae	wrlong	#0, local01
2cce8     18 26 86 31 |  if_ae	sub	local01, #24
2ccec     18 26 06 F1 | 	add	local01, #24
2ccf0     13 15 0A FB | 	rdlong	arg02, local01 wz
2ccf4     18 26 86 F1 | 	sub	local01, #24
2ccf8     04 FA 05 A6 |  if_e	mov	result1, #4
2ccfc     64 01 90 AD |  if_e	jmp	#LR__4425
2cd00     FF 2D CE F7 | 	test	local04, #511 wz
2cd04     3C 01 90 5D |  if_ne	jmp	#LR__4424
2cd08     18 26 06 F1 | 	add	local01, #24
2cd0c     13 15 02 FB | 	rdlong	arg02, local01
2cd10     01 14 06 F1 | 	add	arg02, #1
2cd14     13 15 62 FC | 	wrlong	arg02, local01
2cd18     04 26 86 F1 | 	sub	local01, #4
2cd1c     13 15 0A FB | 	rdlong	arg02, local01 wz
2cd20     14 26 86 F1 | 	sub	local01, #20
2cd24     2C 00 90 5D |  if_ne	jmp	#LR__4420
2cd28     16 15 02 F6 | 	mov	arg02, local04
2cd2c     05 14 46 F0 | 	shr	arg02, #5
2cd30     08 2A 06 F1 | 	add	local03, #8
2cd34     15 29 E2 FA | 	rdword	local02, local03
2cd38     08 2A 86 F1 | 	sub	local03, #8
2cd3c     14 15 12 F2 | 	cmp	arg02, local02 wc
2cd40     18 26 06 31 |  if_ae	add	local01, #24
2cd44     13 01 68 3C |  if_ae	wrlong	#0, local01
2cd48                 | ' 				dp->sect = 0; return FR_NO_FILE;
2cd48     04 FA 05 36 |  if_ae	mov	result1, #4
2cd4c     14 01 90 3D |  if_ae	jmp	#LR__4425
2cd50     F0 00 90 FD | 	jmp	#LR__4423
2cd54                 | LR__4420
2cd54     16 13 02 F6 | 	mov	arg01, local04
2cd58     09 12 46 F0 | 	shr	arg01, #9
2cd5c     0A 2A 06 F1 | 	add	local03, #10
2cd60     15 15 E2 FA | 	rdword	arg02, local03
2cd64     0A 2A 86 F1 | 	sub	local03, #10
2cd68     01 14 86 F1 | 	sub	arg02, #1
2cd6c     0A 13 CA F7 | 	test	arg01, arg02 wz
2cd70     D0 00 90 5D |  if_ne	jmp	#LR__4422
2cd74     13 13 02 F6 | 	mov	arg01, local01
2cd78     14 26 06 F1 | 	add	local01, #20
2cd7c     13 15 02 FB | 	rdlong	arg02, local01
2cd80     14 26 86 F1 | 	sub	local01, #20
2cd84     1C F6 BF FD | 	call	#_fatfs_cc_get_fat
2cd88     FD 2E 02 F6 | 	mov	local05, result1
2cd8c     02 2E 16 F2 | 	cmp	local05, #2 wc
2cd90     02 FA 05 C6 |  if_b	mov	result1, #2
2cd94     CC 00 90 CD |  if_b	jmp	#LR__4425
2cd98     FF FF 7F FF 
2cd9c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2cda0     01 FA 05 A6 |  if_e	mov	result1, #1
2cda4     BC 00 90 AD |  if_e	jmp	#LR__4425
2cda8     18 2A 06 F1 | 	add	local03, #24
2cdac     15 15 02 FB | 	rdlong	arg02, local03
2cdb0     18 2A 86 F1 | 	sub	local03, #24
2cdb4     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2cdb8     68 00 90 CD |  if_b	jmp	#LR__4421
2cdbc     00 28 0E F2 | 	cmp	local02, #0 wz
2cdc0     18 26 06 A1 |  if_e	add	local01, #24
2cdc4     13 01 68 AC |  if_e	wrlong	#0, local01
2cdc8                 | ' 						dp->sect = 0; return FR_NO_FILE;
2cdc8     04 FA 05 A6 |  if_e	mov	result1, #4
2cdcc     94 00 90 AD |  if_e	jmp	#LR__4425
2cdd0     13 13 02 F6 | 	mov	arg01, local01
2cdd4     14 26 06 F1 | 	add	local01, #20
2cdd8     13 15 02 FB | 	rdlong	arg02, local01
2cddc     14 26 86 F1 | 	sub	local01, #20
2cde0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2cde4     FD 2E 0A F6 | 	mov	local05, result1 wz
2cde8     07 FA 05 A6 |  if_e	mov	result1, #7
2cdec     74 00 90 AD |  if_e	jmp	#LR__4425
2cdf0     01 2E 0E F2 | 	cmp	local05, #1 wz
2cdf4     02 FA 05 A6 |  if_e	mov	result1, #2
2cdf8     68 00 90 AD |  if_e	jmp	#LR__4425
2cdfc     FF FF 7F FF 
2ce00     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2ce04     01 FA 05 A6 |  if_e	mov	result1, #1
2ce08     58 00 90 AD |  if_e	jmp	#LR__4425
2ce0c     17 15 02 F6 | 	mov	arg02, local05
2ce10     15 13 02 F6 | 	mov	arg01, local03
2ce14     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2ce18     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce1c     01 FA 05 56 |  if_ne	mov	result1, #1
2ce20     40 00 90 5D |  if_ne	jmp	#LR__4425
2ce24                 | LR__4421
2ce24     14 26 06 F1 | 	add	local01, #20
2ce28     13 2F 62 FC | 	wrlong	local05, local01
2ce2c     15 13 02 F6 | 	mov	arg01, local03
2ce30     17 15 02 F6 | 	mov	arg02, local05
2ce34     30 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2ce38     04 26 06 F1 | 	add	local01, #4
2ce3c     13 FB 61 FC | 	wrlong	result1, local01
2ce40     18 26 86 F1 | 	sub	local01, #24
2ce44                 | LR__4422
2ce44                 | LR__4423
2ce44                 | LR__4424
2ce44     10 26 06 F1 | 	add	local01, #16
2ce48     13 2D 62 FC | 	wrlong	local04, local01
2ce4c     34 2A 06 F1 | 	add	local03, #52
2ce50     FF 2D 06 F5 | 	and	local04, #511
2ce54     16 2B 02 F1 | 	add	local03, local04
2ce58     0C 26 06 F1 | 	add	local01, #12
2ce5c     13 2B 62 FC | 	wrlong	local03, local01
2ce60                 | ' #line 1771 "ff.c"
2ce60                 | ' 				}
2ce60                 | ' 				dp->clust = clst;
2ce60                 | ' 				dp->sect = clst2sect(fs, clst);
2ce60                 | ' 			}
2ce60                 | ' 		}
2ce60                 | ' 	}
2ce60                 | ' 	dp->dptr = ofs;
2ce60                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2ce60                 | ' 
2ce60                 | ' 	return FR_OK;
2ce60     00 FA 05 F6 | 	mov	result1, #0
2ce64                 | LR__4425
2ce64     A7 F0 03 F6 | 	mov	ptra, fp
2ce68     B2 00 A0 FD | 	call	#popregs_
2ce6c                 | _fatfs_cc_dir_next_ret
2ce6c     2D 00 64 FD | 	ret
2ce70                 | 
2ce70                 | _fatfs_cc_dir_alloc
2ce70     08 4A 05 F6 | 	mov	COUNT_, #8
2ce74     A8 00 A0 FD | 	call	#pushregs_
2ce78     09 27 02 F6 | 	mov	local01, arg01
2ce7c     0A 29 02 F6 | 	mov	local02, arg02
2ce80     13 2B 02 FB | 	rdlong	local03, local01
2ce84     13 13 02 F6 | 	mov	arg01, local01
2ce88     00 14 06 F6 | 	mov	arg02, #0
2ce8c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2ce90     FD 2C 0A F6 | 	mov	local04, result1 wz
2ce94     70 00 90 5D |  if_ne	jmp	#LR__4434
2ce98     00 2E 06 F6 | 	mov	local05, #0
2ce9c                 | ' 		n = 0;
2ce9c                 | ' 		do {
2ce9c                 | LR__4430
2ce9c     18 26 06 F1 | 	add	local01, #24
2cea0     13 15 02 FB | 	rdlong	arg02, local01
2cea4     18 26 86 F1 | 	sub	local01, #24
2cea8     15 13 02 F6 | 	mov	arg01, local03
2ceac     40 F3 BF FD | 	call	#_fatfs_cc_move_window
2ceb0     FD 2C 0A F6 | 	mov	local04, result1 wz
2ceb4     50 00 90 5D |  if_ne	jmp	#LR__4433
2ceb8     1C 26 06 F1 | 	add	local01, #28
2cebc     13 31 02 FB | 	rdlong	local06, local01
2cec0     1C 26 86 F1 | 	sub	local01, #28
2cec4     18 31 C2 FA | 	rdbyte	local06, local06
2cec8     E5 30 0E F2 | 	cmp	local06, #229 wz
2cecc     1C 26 06 51 |  if_ne	add	local01, #28
2ced0     13 33 02 5B |  if_ne	rdlong	local07, local01
2ced4     1C 26 86 51 |  if_ne	sub	local01, #28
2ced8     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2cedc     10 00 90 5D |  if_ne	jmp	#LR__4431
2cee0     01 2E 06 F1 | 	add	local05, #1
2cee4     14 2F 0A F2 | 	cmp	local05, local02 wz
2cee8     1C 00 90 AD |  if_e	jmp	#LR__4433
2ceec     04 00 90 FD | 	jmp	#LR__4432
2cef0                 | LR__4431
2cef0     00 2E 06 F6 | 	mov	local05, #0
2cef4                 | LR__4432
2cef4     13 13 02 F6 | 	mov	arg01, local01
2cef8     01 14 06 F6 | 	mov	arg02, #1
2cefc     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2cf00     FD 2C 0A F6 | 	mov	local04, result1 wz
2cf04     94 FF 9F AD |  if_e	jmp	#LR__4430
2cf08                 | LR__4433
2cf08                 | LR__4434
2cf08     04 2C 0E F2 | 	cmp	local04, #4 wz
2cf0c     07 2C 06 A6 |  if_e	mov	local04, #7
2cf10                 | ' 	return res;
2cf10     16 FB 01 F6 | 	mov	result1, local04
2cf14     A7 F0 03 F6 | 	mov	ptra, fp
2cf18     B2 00 A0 FD | 	call	#popregs_
2cf1c                 | _fatfs_cc_dir_alloc_ret
2cf1c     2D 00 64 FD | 	ret
2cf20                 | 
2cf20                 | _fatfs_cc_ld_clust
2cf20     09 01 02 F6 | 	mov	_var01, arg01
2cf24     0A 13 02 F6 | 	mov	arg01, arg02
2cf28     1A 12 06 F1 | 	add	arg01, #26
2cf2c                 | ' {
2cf2c                 | ' 
2cf2c                 | ' 	return *((WORD*)ptr);
2cf2c     09 FB E1 FA | 	rdword	result1, arg01
2cf30     FD 12 32 F9 | 	getword	arg01, result1, #0
2cf34     00 01 C2 FA | 	rdbyte	_var01, _var01
2cf38     03 00 0E F2 | 	cmp	_var01, #3 wz
2cf3c     14 14 06 A1 |  if_e	add	arg02, #20
2cf40                 | ' {
2cf40                 | ' 
2cf40                 | ' 	return *((WORD*)ptr);
2cf40     0A FB E1 AA |  if_e	rdword	result1, arg02
2cf44     10 FA 65 A0 |  if_e	shl	result1, #16
2cf48     FD 12 42 A5 |  if_e	or	arg01, result1
2cf4c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2cf4c                 | ' 	}
2cf4c                 | ' 
2cf4c                 | ' 	return cl;
2cf4c     09 FB 01 F6 | 	mov	result1, arg01
2cf50                 | _fatfs_cc_ld_clust_ret
2cf50     2D 00 64 FD | 	ret
2cf54                 | 
2cf54                 | _fatfs_cc_st_clust
2cf54     09 01 02 F6 | 	mov	_var01, arg01
2cf58     0A 13 02 F6 | 	mov	arg01, arg02
2cf5c     1A 12 06 F1 | 	add	arg01, #26
2cf60     09 17 52 FC | 	wrword	arg03, arg01
2cf64     00 01 C2 FA | 	rdbyte	_var01, _var01
2cf68     03 00 0E F2 | 	cmp	_var01, #3 wz
2cf6c     14 14 06 A1 |  if_e	add	arg02, #20
2cf70     10 16 46 A0 |  if_e	shr	arg03, #16
2cf74     0A 17 52 AC |  if_e	wrword	arg03, arg02
2cf78                 | _fatfs_cc_st_clust_ret
2cf78     2D 00 64 FD | 	ret
2cf7c                 | 
2cf7c                 | _fatfs_cc_cmp_lfn
2cf7c     07 4A 05 F6 | 	mov	COUNT_, #7
2cf80     A8 00 A0 FD | 	call	#pushregs_
2cf84     09 27 02 F6 | 	mov	local01, arg01
2cf88     0A 13 02 F6 | 	mov	arg01, arg02
2cf8c     1A 12 06 F1 | 	add	arg01, #26
2cf90                 | ' {
2cf90                 | ' 
2cf90                 | ' 	return *((WORD*)ptr);
2cf90     09 FB E9 FA | 	rdword	result1, arg01 wz
2cf94     00 FA 05 56 |  if_ne	mov	result1, #0
2cf98     D8 00 90 5D |  if_ne	jmp	#LR__4446
2cf9c     0A 29 C2 FA | 	rdbyte	local02, arg02
2cfa0     3F 28 06 F5 | 	and	local02, #63
2cfa4     01 28 86 F1 | 	sub	local02, #1
2cfa8     0D 28 06 FD | 	qmul	local02, #13
2cfac                 | ' 
2cfac                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2cfac                 | ' 
2cfac                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2cfac     01 2A 06 F6 | 	mov	local03, #1
2cfb0     00 2C 06 F6 | 	mov	local04, #0
2cfb4     18 2E 62 FD | 	getqx	local05
2cfb8                 | LR__4440
2cfb8     0D 2C 16 F2 | 	cmp	local04, #13 wc
2cfbc     94 00 90 3D |  if_ae	jmp	#LR__4445
2cfc0     0A 13 02 F6 | 	mov	arg01, arg02
2cfc4     16 29 02 F6 | 	mov	local02, local04
2cfc8     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2cfcc     01 00 00 FF 
2cfd0     AE FB 05 F1 | 	add	result1, ##942
2cfd4     FD 28 02 F1 | 	add	local02, result1
2cfd8     14 29 C2 FA | 	rdbyte	local02, local02
2cfdc     14 13 02 F1 | 	add	arg01, local02
2cfe0                 | ' {
2cfe0                 | ' 
2cfe0                 | ' 	return *((WORD*)ptr);
2cfe0     09 FB E1 FA | 	rdword	result1, arg01
2cfe4     FD 30 02 F6 | 	mov	local06, result1
2cfe8     15 29 02 F6 | 	mov	local02, local03
2cfec     0F 28 4E F7 | 	zerox	local02, #15 wz
2cff0     44 00 90 AD |  if_e	jmp	#LR__4443
2cff4     00 2F 16 F2 | 	cmp	local05, #256 wc
2cff8     2C 00 90 3D |  if_ae	jmp	#LR__4441
2cffc     18 13 32 F9 | 	getword	arg01, local06, #0
2d000     40 E5 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d004     FD 28 02 F6 | 	mov	local02, result1
2d008     17 2B 02 F6 | 	mov	local03, local05
2d00c     01 2A 66 F0 | 	shl	local03, #1
2d010     13 2B 02 F1 | 	add	local03, local01
2d014     15 13 E2 FA | 	rdword	arg01, local03
2d018     01 2E 06 F1 | 	add	local05, #1
2d01c     24 E5 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d020     FD 28 0A F2 | 	cmp	local02, result1 wz
2d024     08 00 90 AD |  if_e	jmp	#LR__4442
2d028                 | LR__4441
2d028                 | ' 				return 0;
2d028     00 FA 05 F6 | 	mov	result1, #0
2d02c     44 00 90 FD | 	jmp	#LR__4446
2d030                 | LR__4442
2d030     18 2B 02 F6 | 	mov	local03, local06
2d034     14 00 90 FD | 	jmp	#LR__4444
2d038                 | LR__4443
2d038     18 31 32 F9 | 	getword	local06, local06, #0
2d03c     7F 00 00 FF 
2d040     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2d044     00 FA 05 56 |  if_ne	mov	result1, #0
2d048     28 00 90 5D |  if_ne	jmp	#LR__4446
2d04c                 | LR__4444
2d04c     01 2C 06 F1 | 	add	local04, #1
2d050     64 FF 9F FD | 	jmp	#LR__4440
2d054                 | LR__4445
2d054     0A 29 C2 FA | 	rdbyte	local02, arg02
2d058     40 28 CE F7 | 	test	local02, #64 wz
2d05c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2d060     01 2E 66 50 |  if_ne	shl	local05, #1
2d064     13 2F 02 51 |  if_ne	add	local05, local01
2d068     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2d06c     00 FA 05 56 |  if_ne	mov	result1, #0
2d070                 | ' 
2d070                 | ' 	return 1;
2d070     01 FA 05 A6 |  if_e	mov	result1, #1
2d074                 | LR__4446
2d074     A7 F0 03 F6 | 	mov	ptra, fp
2d078     B2 00 A0 FD | 	call	#popregs_
2d07c                 | _fatfs_cc_cmp_lfn_ret
2d07c     2D 00 64 FD | 	ret
2d080                 | 
2d080                 | _fatfs_cc_pick_lfn
2d080     09 01 02 F6 | 	mov	_var01, arg01
2d084     0A 13 02 F6 | 	mov	arg01, arg02
2d088     1A 12 06 F1 | 	add	arg01, #26
2d08c                 | ' {
2d08c                 | ' 
2d08c                 | ' 	return *((WORD*)ptr);
2d08c     09 FB E9 FA | 	rdword	result1, arg01 wz
2d090     00 FA 05 56 |  if_ne	mov	result1, #0
2d094     C0 00 90 5D |  if_ne	jmp	#LR__4453
2d098     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d09c     40 02 26 F5 | 	andn	_var02, #64
2d0a0     01 02 86 F1 | 	sub	_var02, #1
2d0a4     0D 02 06 FD | 	qmul	_var02, #13
2d0a8                 | ' 
2d0a8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d0a8                 | ' 
2d0a8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d0a8     01 04 06 F6 | 	mov	_var03, #1
2d0ac     00 06 06 F6 | 	mov	_var04, #0
2d0b0     18 08 62 FD | 	getqx	_var05
2d0b4                 | LR__4450
2d0b4     0D 06 16 F2 | 	cmp	_var04, #13 wc
2d0b8     74 00 90 3D |  if_ae	jmp	#LR__4452
2d0bc     0A 13 02 F6 | 	mov	arg01, arg02
2d0c0     03 0B 02 F6 | 	mov	_var06, _var04
2d0c4     F6 02 02 F6 | 	mov	_var02, ptr__fatfs_cc_dat__
2d0c8     01 00 00 FF 
2d0cc     AE 03 06 F1 | 	add	_var02, ##942
2d0d0     01 0B 02 F1 | 	add	_var06, _var02
2d0d4     05 03 C2 FA | 	rdbyte	_var02, _var06
2d0d8     01 13 02 F1 | 	add	arg01, _var02
2d0dc                 | ' {
2d0dc                 | ' 
2d0dc                 | ' 	return *((WORD*)ptr);
2d0dc     09 FB E1 FA | 	rdword	result1, arg01
2d0e0     FD 0C 02 F6 | 	mov	_var07, result1
2d0e4     02 03 02 F6 | 	mov	_var02, _var03
2d0e8     0F 02 4E F7 | 	zerox	_var02, #15 wz
2d0ec     00 09 16 52 |  if_ne	cmp	_var05, #256 wc
2d0f0     00 FA 05 16 |  if_a	mov	result1, #0
2d0f4     60 00 90 1D |  if_a	jmp	#LR__4453
2d0f8     04 0B 02 56 |  if_ne	mov	_var06, _var05
2d0fc     01 0A 66 50 |  if_ne	shl	_var06, #1
2d100     00 0B 02 51 |  if_ne	add	_var06, _var01
2d104     06 05 02 56 |  if_ne	mov	_var03, _var07
2d108     05 05 52 5C |  if_ne	wrword	_var03, _var06
2d10c     01 08 06 51 |  if_ne	add	_var05, #1
2d110     14 00 90 5D |  if_ne	jmp	#LR__4451
2d114     06 0D 32 F9 | 	getword	_var07, _var07, #0
2d118     7F 00 00 FF 
2d11c     FF 0D 0E F2 | 	cmp	_var07, ##65535 wz
2d120     00 FA 05 56 |  if_ne	mov	result1, #0
2d124     30 00 90 5D |  if_ne	jmp	#LR__4453
2d128                 | LR__4451
2d128     01 06 06 F1 | 	add	_var04, #1
2d12c     84 FF 9F FD | 	jmp	#LR__4450
2d130                 | LR__4452
2d130     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d134     40 02 CE F7 | 	test	_var02, #64 wz
2d138     02 0F 02 56 |  if_ne	mov	_var08, _var03
2d13c     0F 0E 4E 57 |  if_ne	zerox	_var08, #15 wz
2d140     00 09 16 52 |  if_ne	cmp	_var05, #256 wc
2d144     00 FA 05 16 |  if_a	mov	result1, #0
2d148     01 08 66 40 |  if_c_and_nz	shl	_var05, #1
2d14c     00 09 02 41 |  if_c_and_nz	add	_var05, _var01
2d150     04 01 58 4C |  if_c_and_nz	wrword	#0, _var05
2d154                 | ' 		lfnbuf[i] = 0;
2d154                 | ' 	}
2d154                 | ' 
2d154                 | ' 	return 1;
2d154     01 FA 05 E6 |  if_be	mov	result1, #1
2d158                 | LR__4453
2d158                 | _fatfs_cc_pick_lfn_ret
2d158     2D 00 64 FD | 	ret
2d15c                 | 
2d15c                 | _fatfs_cc_put_lfn
2d15c     0A 01 02 F6 | 	mov	_var01, arg02
2d160     0D 00 06 F1 | 	add	_var01, #13
2d164     00 19 42 FC | 	wrbyte	arg04, _var01
2d168     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2d16c     01 18 86 F1 | 	sub	arg04, #1
2d170     0D 18 06 FD | 	qmul	arg04, #13
2d174     09 03 02 F6 | 	mov	_var02, arg01
2d178     02 00 86 F1 | 	sub	_var01, #2
2d17c     00 1F 48 FC | 	wrbyte	#15, _var01
2d180     01 00 06 F1 | 	add	_var01, #1
2d184     00 01 48 FC | 	wrbyte	#0, _var01
2d188     0C 00 86 F1 | 	sub	_var01, #12
2d18c     00 13 02 F6 | 	mov	arg01, _var01
2d190     1A 12 06 F1 | 	add	arg01, #26
2d194     09 01 58 FC | 	wrword	#0, arg01
2d198     00 04 06 F6 | 	mov	_var03, #0
2d19c     00 06 06 F6 | 	mov	_var04, #0
2d1a0                 | ' 	BYTE* dir,
2d1a0                 | ' 	BYTE ord,
2d1a0                 | ' 	BYTE sum
2d1a0                 | ' )
2d1a0                 | ' {
2d1a0                 | ' 	UINT i, s;
2d1a0                 | ' 	WCHAR wc;
2d1a0                 | ' 
2d1a0                 | ' 
2d1a0                 | ' 	dir[ 13 ] = sum;
2d1a0                 | ' 	dir[ 11 ] =  0x0F ;
2d1a0                 | ' 	dir[ 12 ] = 0;
2d1a0                 | ' 	st_word(dir +  26 , 0);
2d1a0                 | ' 
2d1a0                 | ' 	i = (ord - 1) * 13;
2d1a0                 | ' 	s = wc = 0;
2d1a0                 | ' 	do {
2d1a0     18 08 62 FD | 	getqx	_var05
2d1a4     97 2E 48 FB | 	callpa	#(@LR__4461-@LR__4460)>>2,fcache_load_ptr_
2d1a8                 | LR__4460
2d1a8     02 19 32 F9 | 	getword	arg04, _var03, #0
2d1ac     7F 00 00 FF 
2d1b0     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2d1b4     04 13 02 56 |  if_ne	mov	arg01, _var05
2d1b8     01 08 06 51 |  if_ne	add	_var05, #1
2d1bc     01 12 66 50 |  if_ne	shl	arg01, #1
2d1c0     01 13 02 51 |  if_ne	add	arg01, _var02
2d1c4     09 05 E2 5A |  if_ne	rdword	_var03, arg01
2d1c8     00 13 02 F6 | 	mov	arg01, _var01
2d1cc     03 19 02 F6 | 	mov	arg04, _var04
2d1d0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d1d4     01 00 00 FF 
2d1d8     AE 15 06 F1 | 	add	arg02, ##942
2d1dc     0A 19 02 F1 | 	add	arg04, arg02
2d1e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d1e4     0C 13 02 F1 | 	add	arg01, arg04
2d1e8     09 05 52 FC | 	wrword	_var03, arg01
2d1ec     02 19 02 F6 | 	mov	arg04, _var03
2d1f0     0F 18 4E F7 | 	zerox	arg04, #15 wz
2d1f4     0F 04 CE A9 |  if_e	bmask	_var03, #15
2d1f8     01 06 06 F1 | 	add	_var04, #1
2d1fc     0D 06 16 F2 | 	cmp	_var04, #13 wc
2d200     A4 FF 9F CD |  if_b	jmp	#LR__4460
2d204                 | LR__4461
2d204     02 05 32 F9 | 	getword	_var03, _var03, #0
2d208     7F 00 00 FF 
2d20c     FF 05 0E F2 | 	cmp	_var03, ##65535 wz
2d210     01 08 66 50 |  if_ne	shl	_var05, #1
2d214     01 09 02 51 |  if_ne	add	_var05, _var02
2d218     04 09 EA 5A |  if_ne	rdword	_var05, _var05 wz
2d21c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2d220     40 16 46 A5 |  if_e	or	arg03, #64
2d224     00 17 42 FC | 	wrbyte	arg03, _var01
2d228                 | _fatfs_cc_put_lfn_ret
2d228     2D 00 64 FD | 	ret
2d22c                 | 
2d22c                 | _fatfs_cc_gen_numname
2d22c     0A 4A 05 F6 | 	mov	COUNT_, #10
2d230     A8 00 A0 FD | 	call	#pushregs_
2d234     2C F0 07 F1 | 	add	ptra, #44
2d238     09 27 02 F6 | 	mov	local01, arg01
2d23c     0A 29 02 F6 | 	mov	local02, arg02
2d240     0B 2B 02 F6 | 	mov	local03, arg03
2d244     0C 2D 02 F6 | 	mov	local04, arg04
2d248     13 13 02 F6 | 	mov	arg01, local01
2d24c     14 15 02 F6 | 	mov	arg02, local02
2d250     0B 16 06 F6 | 	mov	arg03, #11
2d254     70 7D BF FD | 	call	#__system____builtin_memmove
2d258     06 2C 16 F2 | 	cmp	local04, #6 wc
2d25c     48 00 90 CD |  if_b	jmp	#LR__4475
2d260     16 2F 02 F6 | 	mov	local05, local04
2d264     97 1E 48 FB | 	callpa	#(@LR__4473-@LR__4470)>>2,fcache_load_ptr_
2d268                 | ' 		sreg = seq;
2d268                 | ' 		while (*lfn) {
2d268                 | LR__4470
2d268     15 31 EA FA | 	rdword	local06, local03 wz
2d26c     34 00 90 AD |  if_e	jmp	#LR__4474
2d270     15 33 E2 FA | 	rdword	local07, local03
2d274                 | ' 			wc = *lfn++;
2d274                 | ' 			for (i = 0; i < 16; i++) {
2d274     02 2A 06 F1 | 	add	local03, #2
2d278     10 12 DC FC | 	rep	@LR__4472, #16
2d27c                 | LR__4471
2d27c     01 2E 66 F0 | 	shl	local05, #1
2d280     19 31 32 F9 | 	getword	local06, local07, #0
2d284     01 30 06 F5 | 	and	local06, #1
2d288     18 2F 02 F1 | 	add	local05, local06
2d28c     19 33 32 F9 | 	getword	local07, local07, #0
2d290     01 32 46 F0 | 	shr	local07, #1
2d294     10 2E 2E F4 | 	testbn	local05, #16 wz
2d298     88 00 00 5F 
2d29c     21 2E 66 55 |  if_ne	xor	local05, ##69665
2d2a0                 | LR__4472
2d2a0     C4 FF 9F FD | 	jmp	#LR__4470
2d2a4                 | LR__4473
2d2a4                 | LR__4474
2d2a4     17 2D 02 F6 | 	mov	local04, local05
2d2a8                 | LR__4475
2d2a8     07 32 06 F6 | 	mov	local07, #7
2d2ac     97 1E 48 FB | 	callpa	#(@LR__4477-@LR__4476)>>2,fcache_load_ptr_
2d2b0                 | ' 			}
2d2b0                 | ' 		}
2d2b0                 | ' 		seq = (UINT)sreg;
2d2b0                 | ' 	}
2d2b0                 | ' 
2d2b0                 | ' 
2d2b0                 | ' 	i = 7;
2d2b0                 | ' 	do {
2d2b0                 | LR__4476
2d2b0     16 2F 42 F8 | 	getnib	local05, local04, #0
2d2b4     30 2E 06 F1 | 	add	local05, #48
2d2b8     04 2C 46 F0 | 	shr	local04, #4
2d2bc     17 31 E2 F8 | 	getbyte	local06, local05, #0
2d2c0     3A 30 16 F2 | 	cmp	local06, #58 wc
2d2c4     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2d2c8     07 2E 06 31 |  if_ae	add	local05, #7
2d2cc     19 31 02 F6 | 	mov	local06, local07
2d2d0     01 32 8E F1 | 	sub	local07, #1 wz
2d2d4     A7 2A 02 F6 | 	mov	local03, fp
2d2d8     10 2A 06 F1 | 	add	local03, #16
2d2dc     15 31 02 F1 | 	add	local06, local03
2d2e0     18 2F 42 FC | 	wrbyte	local05, local06
2d2e4     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2d2e8     C4 FF 9F 5D |  if_ne	jmp	#LR__4476
2d2ec                 | LR__4477
2d2ec     19 31 02 F6 | 	mov	local06, local07
2d2f0     A7 2E 02 F6 | 	mov	local05, fp
2d2f4     10 2E 06 F1 | 	add	local05, #16
2d2f8     17 31 02 F1 | 	add	local06, local05
2d2fc     18 FD 48 FC | 	wrbyte	#126, local06
2d300                 | ' 	ns[i] = '~';
2d300                 | ' 
2d300                 | ' 
2d300                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2d300     00 2C 06 F6 | 	mov	local04, #0
2d304     97 2A 48 FB | 	callpa	#(@LR__4480-@LR__4478)>>2,fcache_load_ptr_
2d308                 | LR__4478
2d308     19 2D 12 F2 | 	cmp	local04, local07 wc
2d30c     4C 00 90 3D |  if_ae	jmp	#LR__4481
2d310     16 2F 02 F6 | 	mov	local05, local04
2d314     13 2F 02 F1 | 	add	local05, local01
2d318     17 31 C2 FA | 	rdbyte	local06, local05
2d31c     20 30 0E F2 | 	cmp	local06, #32 wz
2d320     38 00 90 AD |  if_e	jmp	#LR__4481
2d324     16 35 02 F6 | 	mov	local08, local04
2d328     13 35 02 F1 | 	add	local08, local01
2d32c     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2d330     00 FA 05 56 |  if_ne	mov	result1, #0
2d334                 | ' 
2d334                 | ' 	return 0;
2d334     00 FA 05 A6 |  if_e	mov	result1, #0
2d338     00 FA 0D F2 | 	cmp	result1, #0 wz
2d33c     14 00 90 AD |  if_e	jmp	#LR__4479
2d340     19 2B 02 F6 | 	mov	local03, local07
2d344     01 2A 86 F1 | 	sub	local03, #1
2d348     15 2D 0A F2 | 	cmp	local04, local03 wz
2d34c     0C 00 90 AD |  if_e	jmp	#LR__4481
2d350     01 2C 06 F1 | 	add	local04, #1
2d354                 | LR__4479
2d354     01 2C 06 F1 | 	add	local04, #1
2d358     AC FF 9F FD | 	jmp	#LR__4478
2d35c                 | LR__4480
2d35c                 | LR__4481
2d35c     97 1C 48 FB | 	callpa	#(@LR__4483-@LR__4482)>>2,fcache_load_ptr_
2d360                 | ' 			j++;
2d360                 | ' 		}
2d360                 | ' 	}
2d360                 | ' 	do {
2d360                 | LR__4482
2d360     16 31 02 F6 | 	mov	local06, local04
2d364     13 31 02 F1 | 	add	local06, local01
2d368     08 32 16 F2 | 	cmp	local07, #8 wc
2d36c     01 2C 06 F1 | 	add	local04, #1
2d370     19 37 02 C6 |  if_b	mov	local09, local07
2d374     01 32 06 C1 |  if_b	add	local07, #1
2d378     A7 38 02 C6 |  if_b	mov	local10, fp
2d37c     10 38 06 C1 |  if_b	add	local10, #16
2d380     1C 37 02 C1 |  if_b	add	local09, local10
2d384     1B 35 C2 CA |  if_b	rdbyte	local08, local09
2d388     20 34 06 36 |  if_ae	mov	local08, #32
2d38c     18 35 42 FC | 	wrbyte	local08, local06
2d390     08 2C 16 F2 | 	cmp	local04, #8 wc
2d394     C8 FF 9F CD |  if_b	jmp	#LR__4482
2d398                 | LR__4483
2d398     A7 F0 03 F6 | 	mov	ptra, fp
2d39c     B2 00 A0 FD | 	call	#popregs_
2d3a0                 | _fatfs_cc_gen_numname_ret
2d3a0     2D 00 64 FD | 	ret
2d3a4                 | 
2d3a4                 | _fatfs_cc_sum_sfn
2d3a4     00 00 06 F6 | 	mov	_var01, #0
2d3a8                 | ' )
2d3a8                 | ' {
2d3a8                 | ' 	BYTE sum = 0;
2d3a8                 | ' 	UINT n = 11;
2d3a8                 | ' 
2d3a8                 | ' 	do {
2d3a8     97 12 48 FB | 	callpa	#(@LR__4492-@LR__4490)>>2,fcache_load_ptr_
2d3ac                 | LR__4490
2d3ac     0B 10 DC FC | 	rep	@LR__4493, #11
2d3b0                 | LR__4491
2d3b0     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2d3b4     01 FA 45 F0 | 	shr	result1, #1
2d3b8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d3bc     07 00 66 F0 | 	shl	_var01, #7
2d3c0     00 FB 01 F1 | 	add	result1, _var01
2d3c4     09 01 C2 FA | 	rdbyte	_var01, arg01
2d3c8     FD 00 02 F1 | 	add	_var01, result1
2d3cc     01 12 06 F1 | 	add	arg01, #1
2d3d0                 | LR__4492
2d3d0                 | LR__4493
2d3d0                 | ' 	return sum;
2d3d0     00 FB 01 F6 | 	mov	result1, _var01
2d3d4                 | _fatfs_cc_sum_sfn_ret
2d3d4     2D 00 64 FD | 	ret
2d3d8                 | 
2d3d8                 | _fatfs_cc_dir_read
2d3d8     11 4A 05 F6 | 	mov	COUNT_, #17
2d3dc     A8 00 A0 FD | 	call	#pushregs_
2d3e0     09 27 02 F6 | 	mov	local01, arg01
2d3e4     0A 29 02 F6 | 	mov	local02, arg02
2d3e8     04 2A 06 F6 | 	mov	local03, #4
2d3ec     13 2D 02 FB | 	rdlong	local04, local01
2d3f0     FF 2E 06 F6 | 	mov	local05, #255
2d3f4     FF 30 06 F6 | 	mov	local06, #255
2d3f8                 | ' )
2d3f8                 | ' {
2d3f8                 | ' 	FRESULT res = FR_NO_FILE;
2d3f8                 | ' 	FATFS *fs = dp->obj.fs;
2d3f8                 | ' 	BYTE attr, b;
2d3f8                 | ' 
2d3f8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2d3f8                 | ' 
2d3f8                 | ' 
2d3f8                 | ' 	while (dp->sect) {
2d3f8                 | LR__4500
2d3f8     18 26 06 F1 | 	add	local01, #24
2d3fc     13 FB 09 FB | 	rdlong	result1, local01 wz
2d400     18 26 86 F1 | 	sub	local01, #24
2d404     B0 01 90 AD |  if_e	jmp	#LR__4510
2d408     18 26 06 F1 | 	add	local01, #24
2d40c     13 15 02 FB | 	rdlong	arg02, local01
2d410     18 26 86 F1 | 	sub	local01, #24
2d414     16 13 02 F6 | 	mov	arg01, local04
2d418     D4 ED BF FD | 	call	#_fatfs_cc_move_window
2d41c     FD 2A 0A F6 | 	mov	local03, result1 wz
2d420     94 01 90 5D |  if_ne	jmp	#LR__4510
2d424     1C 26 06 F1 | 	add	local01, #28
2d428     13 FB 01 FB | 	rdlong	result1, local01
2d42c     1C 26 86 F1 | 	sub	local01, #28
2d430     FD 32 C2 FA | 	rdbyte	local07, result1
2d434     19 FB 01 F6 | 	mov	result1, local07
2d438     07 FA 4D F7 | 	zerox	result1, #7 wz
2d43c     04 2A 06 A6 |  if_e	mov	local03, #4
2d440                 | ' 			res = FR_NO_FILE; break;
2d440     74 01 90 AD |  if_e	jmp	#LR__4510
2d444     1C 26 06 F1 | 	add	local01, #28
2d448     13 35 02 FB | 	rdlong	local08, local01
2d44c     0B 34 06 F1 | 	add	local08, #11
2d450     1A 37 C2 FA | 	rdbyte	local09, local08
2d454     3F 36 06 F5 | 	and	local09, #63
2d458     16 26 86 F1 | 	sub	local01, #22
2d45c     13 37 42 FC | 	wrbyte	local09, local01
2d460     06 26 86 F1 | 	sub	local01, #6
2d464     19 FB E1 F8 | 	getbyte	result1, local07, #0
2d468     E5 FA 0D F2 | 	cmp	result1, #229 wz
2d46c     19 35 02 56 |  if_ne	mov	local08, local07
2d470     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2d474     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2d478     1C 00 90 AD |  if_e	jmp	#LR__4501
2d47c     00 38 06 F6 | 	mov	local10, #0
2d480     1B 3B E2 F8 | 	getbyte	local11, local09, #0
2d484     20 3A 26 F5 | 	andn	local11, #32
2d488     08 3A 0E F2 | 	cmp	local11, #8 wz
2d48c     01 38 06 A6 |  if_e	mov	local10, #1
2d490     14 39 0A F2 | 	cmp	local10, local02 wz
2d494     08 00 90 AD |  if_e	jmp	#LR__4502
2d498                 | LR__4501
2d498     FF 2E 06 F6 | 	mov	local05, #255
2d49c     04 01 90 FD | 	jmp	#LR__4509
2d4a0                 | LR__4502
2d4a0     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2d4a4     0F 36 0E F2 | 	cmp	local09, #15 wz
2d4a8     B8 00 90 5D |  if_ne	jmp	#LR__4506
2d4ac     19 3D E2 F8 | 	getbyte	local12, local07, #0
2d4b0     40 3C CE F7 | 	test	local12, #64 wz
2d4b4     30 00 90 AD |  if_e	jmp	#LR__4503
2d4b8     1C 26 06 F1 | 	add	local01, #28
2d4bc     13 3D 02 FB | 	rdlong	local12, local01
2d4c0     0D 3C 06 F1 | 	add	local12, #13
2d4c4     1E 31 C2 FA | 	rdbyte	local06, local12
2d4c8     19 33 E2 F8 | 	getbyte	local07, local07, #0
2d4cc     BF 32 06 F5 | 	and	local07, #191
2d4d0     19 2F 02 F6 | 	mov	local05, local07
2d4d4     0C 26 86 F1 | 	sub	local01, #12
2d4d8     13 3D 02 FB | 	rdlong	local12, local01
2d4dc     1C 26 06 F1 | 	add	local01, #28
2d4e0     13 3D 62 FC | 	wrlong	local12, local01
2d4e4     2C 26 86 F1 | 	sub	local01, #44
2d4e8                 | LR__4503
2d4e8     19 35 E2 F8 | 	getbyte	local08, local07, #0
2d4ec     17 39 E2 F8 | 	getbyte	local10, local05, #0
2d4f0     1C 35 0A F2 | 	cmp	local08, local10 wz
2d4f4     18 3B E2 A8 |  if_e	getbyte	local11, local06, #0
2d4f8     1C 26 06 A1 |  if_e	add	local01, #28
2d4fc     13 3F 02 AB |  if_e	rdlong	local13, local01
2d500     1C 26 86 A1 |  if_e	sub	local01, #28
2d504     1F 41 02 A6 |  if_e	mov	local14, local13
2d508     0D 40 06 A1 |  if_e	add	local14, #13
2d50c     20 43 C2 AA |  if_e	rdbyte	local15, local14
2d510     0D 40 86 A1 |  if_e	sub	local14, #13
2d514     21 45 E2 A8 |  if_e	getbyte	local16, local15, #0
2d518     22 3B 0A A2 |  if_e	cmp	local11, local16 wz
2d51c     38 00 90 5D |  if_ne	jmp	#LR__4504
2d520     0C 2C 06 F1 | 	add	local04, #12
2d524     16 13 02 FB | 	rdlong	arg01, local04
2d528     0C 2C 86 F1 | 	sub	local04, #12
2d52c     1C 26 06 F1 | 	add	local01, #28
2d530     13 47 02 FB | 	rdlong	local17, local01
2d534     1C 26 86 F1 | 	sub	local01, #28
2d538     23 15 02 F6 | 	mov	arg02, local17
2d53c     40 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2d540     00 FA 4D F2 | 	cmps	result1, #0 wz
2d544     17 47 02 56 |  if_ne	mov	local17, local05
2d548     23 47 E2 58 |  if_ne	getbyte	local17, local17, #0
2d54c     01 46 86 51 |  if_ne	sub	local17, #1
2d550     23 3D 02 56 |  if_ne	mov	local12, local17
2d554     04 00 90 5D |  if_ne	jmp	#LR__4505
2d558                 | LR__4504
2d558     FF 3C 06 F6 | 	mov	local12, #255
2d55c                 | LR__4505
2d55c     1E 2F 02 F6 | 	mov	local05, local12
2d560     40 00 90 FD | 	jmp	#LR__4508
2d564                 | LR__4506
2d564     17 3D 02 F6 | 	mov	local12, local05
2d568     07 3C 4E F7 | 	zerox	local12, #7 wz
2d56c     20 00 90 5D |  if_ne	jmp	#LR__4507
2d570     18 31 E2 F8 | 	getbyte	local06, local06, #0
2d574     1C 26 06 F1 | 	add	local01, #28
2d578     13 13 02 FB | 	rdlong	arg01, local01
2d57c     1C 26 86 F1 | 	sub	local01, #28
2d580     20 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2d584     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d588     FD 30 0A F2 | 	cmp	local06, result1 wz
2d58c     28 00 90 AD |  if_e	jmp	#LR__4510
2d590                 | LR__4507
2d590     2C 26 06 F1 | 	add	local01, #44
2d594     FF FF FF FF 
2d598     13 FF 6B FC | 	wrlong	##-1, local01
2d59c     2C 26 86 F1 | 	sub	local01, #44
2d5a0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2d5a0                 | ' 					}
2d5a0                 | ' 					break;
2d5a0     14 00 90 FD | 	jmp	#LR__4510
2d5a4                 | LR__4508
2d5a4                 | LR__4509
2d5a4     13 13 02 F6 | 	mov	arg01, local01
2d5a8     00 14 06 F6 | 	mov	arg02, #0
2d5ac     04 F7 BF FD | 	call	#_fatfs_cc_dir_next
2d5b0     FD 2A 0A F6 | 	mov	local03, result1 wz
2d5b4     40 FE 9F AD |  if_e	jmp	#LR__4500
2d5b8                 | LR__4510
2d5b8     00 2A 0E F2 | 	cmp	local03, #0 wz
2d5bc     18 26 06 51 |  if_ne	add	local01, #24
2d5c0     13 01 68 5C |  if_ne	wrlong	#0, local01
2d5c4                 | ' 	return res;
2d5c4     15 FB 01 F6 | 	mov	result1, local03
2d5c8     A7 F0 03 F6 | 	mov	ptra, fp
2d5cc     B2 00 A0 FD | 	call	#popregs_
2d5d0                 | _fatfs_cc_dir_read_ret
2d5d0     2D 00 64 FD | 	ret
2d5d4                 | 
2d5d4                 | _fatfs_cc_dir_find
2d5d4     10 4A 05 F6 | 	mov	COUNT_, #16
2d5d8     A8 00 A0 FD | 	call	#pushregs_
2d5dc     09 27 02 F6 | 	mov	local01, arg01
2d5e0     13 29 02 FB | 	rdlong	local02, local01
2d5e4     13 13 02 F6 | 	mov	arg01, local01
2d5e8     00 14 06 F6 | 	mov	arg02, #0
2d5ec     5C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2d5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5f4     1C 02 90 5D |  if_ne	jmp	#LR__4532
2d5f8     FF 2A 06 F6 | 	mov	local03, #255
2d5fc     FF 2C 06 F6 | 	mov	local04, #255
2d600     2C 26 06 F1 | 	add	local01, #44
2d604     FF FF FF FF 
2d608     13 FF 6B FC | 	wrlong	##-1, local01
2d60c     2C 26 86 F1 | 	sub	local01, #44
2d610                 | ' #line 2404 "ff.c"
2d610                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2d610                 | ' 
2d610                 | ' 	do {
2d610                 | LR__4520
2d610     18 26 06 F1 | 	add	local01, #24
2d614     13 15 02 FB | 	rdlong	arg02, local01
2d618     18 26 86 F1 | 	sub	local01, #24
2d61c     14 13 02 F6 | 	mov	arg01, local02
2d620     CC EB BF FD | 	call	#_fatfs_cc_move_window
2d624     FD 2E 0A F6 | 	mov	local05, result1 wz
2d628     E4 01 90 5D |  if_ne	jmp	#LR__4531
2d62c     1C 26 06 F1 | 	add	local01, #28
2d630     13 17 02 FB | 	rdlong	arg03, local01
2d634     1C 26 86 F1 | 	sub	local01, #28
2d638     0B 31 C2 FA | 	rdbyte	local06, arg03
2d63c     18 17 02 F6 | 	mov	arg03, local06
2d640     07 16 4E F7 | 	zerox	arg03, #7 wz
2d644     04 2E 06 A6 |  if_e	mov	local05, #4
2d648     C4 01 90 AD |  if_e	jmp	#LR__4531
2d64c     1C 26 06 F1 | 	add	local01, #28
2d650     13 33 02 FB | 	rdlong	local07, local01
2d654     19 17 02 F6 | 	mov	arg03, local07
2d658     0B 16 06 F1 | 	add	arg03, #11
2d65c     0B 35 C2 FA | 	rdbyte	local08, arg03
2d660     3F 34 06 F5 | 	and	local08, #63
2d664     16 26 86 F1 | 	sub	local01, #22
2d668     13 35 42 FC | 	wrbyte	local08, local01
2d66c     06 26 86 F1 | 	sub	local01, #6
2d670     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2d674     E5 16 0E F2 | 	cmp	arg03, #229 wz
2d678     18 00 90 AD |  if_e	jmp	#LR__4521
2d67c     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2d680     08 16 CE F7 | 	test	arg03, #8 wz
2d684     1A 33 02 56 |  if_ne	mov	local07, local08
2d688     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2d68c     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2d690     18 00 90 AD |  if_e	jmp	#LR__4522
2d694                 | LR__4521
2d694     FF 2C 06 F6 | 	mov	local04, #255
2d698     2C 26 06 F1 | 	add	local01, #44
2d69c     FF FF FF FF 
2d6a0     13 FF 6B FC | 	wrlong	##-1, local01
2d6a4     2C 26 86 F1 | 	sub	local01, #44
2d6a8     50 01 90 FD | 	jmp	#LR__4530
2d6ac                 | LR__4522
2d6ac     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2d6b0     0F 34 0E F2 | 	cmp	local08, #15 wz
2d6b4     CC 00 90 5D |  if_ne	jmp	#LR__4526
2d6b8     2B 26 06 F1 | 	add	local01, #43
2d6bc     13 35 C2 FA | 	rdbyte	local08, local01
2d6c0     2B 26 86 F1 | 	sub	local01, #43
2d6c4     40 34 CE F7 | 	test	local08, #64 wz
2d6c8     30 01 90 5D |  if_ne	jmp	#LR__4529
2d6cc     18 37 E2 F8 | 	getbyte	local09, local06, #0
2d6d0     40 36 CE F7 | 	test	local09, #64 wz
2d6d4     30 00 90 AD |  if_e	jmp	#LR__4523
2d6d8     1C 26 06 F1 | 	add	local01, #28
2d6dc     13 37 02 FB | 	rdlong	local09, local01
2d6e0     0D 36 06 F1 | 	add	local09, #13
2d6e4     1B 2B C2 FA | 	rdbyte	local03, local09
2d6e8     18 31 E2 F8 | 	getbyte	local06, local06, #0
2d6ec     BF 30 06 F5 | 	and	local06, #191
2d6f0     18 2D 02 F6 | 	mov	local04, local06
2d6f4     0C 26 86 F1 | 	sub	local01, #12
2d6f8     13 37 02 FB | 	rdlong	local09, local01
2d6fc     1C 26 06 F1 | 	add	local01, #28
2d700     13 37 62 FC | 	wrlong	local09, local01
2d704     2C 26 86 F1 | 	sub	local01, #44
2d708                 | LR__4523
2d708     18 39 E2 F8 | 	getbyte	local10, local06, #0
2d70c     16 33 E2 F8 | 	getbyte	local07, local04, #0
2d710     19 39 0A F2 | 	cmp	local10, local07 wz
2d714     15 3B E2 A8 |  if_e	getbyte	local11, local03, #0
2d718     1C 26 06 A1 |  if_e	add	local01, #28
2d71c     13 3D 02 AB |  if_e	rdlong	local12, local01
2d720     1C 26 86 A1 |  if_e	sub	local01, #28
2d724     1E 3F 02 A6 |  if_e	mov	local13, local12
2d728     0D 3E 06 A1 |  if_e	add	local13, #13
2d72c     1F 41 C2 AA |  if_e	rdbyte	local14, local13
2d730     0D 3E 86 A1 |  if_e	sub	local13, #13
2d734     20 43 E2 A8 |  if_e	getbyte	local15, local14, #0
2d738     21 3B 0A A2 |  if_e	cmp	local11, local15 wz
2d73c     38 00 90 5D |  if_ne	jmp	#LR__4524
2d740     0C 28 06 F1 | 	add	local02, #12
2d744     14 13 02 FB | 	rdlong	arg01, local02
2d748     0C 28 86 F1 | 	sub	local02, #12
2d74c     1C 26 06 F1 | 	add	local01, #28
2d750     13 45 02 FB | 	rdlong	local16, local01
2d754     1C 26 86 F1 | 	sub	local01, #28
2d758     22 15 02 F6 | 	mov	arg02, local16
2d75c     1C F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2d760     00 FA 4D F2 | 	cmps	result1, #0 wz
2d764     16 45 02 56 |  if_ne	mov	local16, local04
2d768     22 45 E2 58 |  if_ne	getbyte	local16, local16, #0
2d76c     01 44 86 51 |  if_ne	sub	local16, #1
2d770     22 37 02 56 |  if_ne	mov	local09, local16
2d774     04 00 90 5D |  if_ne	jmp	#LR__4525
2d778                 | LR__4524
2d778     FF 36 06 F6 | 	mov	local09, #255
2d77c                 | LR__4525
2d77c     1B 2D 02 F6 | 	mov	local04, local09
2d780     78 00 90 FD | 	jmp	#LR__4529
2d784                 | LR__4526
2d784     16 37 02 F6 | 	mov	local09, local04
2d788     07 36 4E F7 | 	zerox	local09, #7 wz
2d78c     20 00 90 5D |  if_ne	jmp	#LR__4527
2d790     15 39 E2 F8 | 	getbyte	local10, local03, #0
2d794     1C 26 06 F1 | 	add	local01, #28
2d798     13 13 02 FB | 	rdlong	arg01, local01
2d79c     1C 26 86 F1 | 	sub	local01, #28
2d7a0     00 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2d7a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d7a8     FD 38 0A F2 | 	cmp	local10, result1 wz
2d7ac     60 00 90 AD |  if_e	jmp	#LR__4531
2d7b0                 | LR__4527
2d7b0     2B 26 06 F1 | 	add	local01, #43
2d7b4     13 37 C2 FA | 	rdbyte	local09, local01
2d7b8     2B 26 86 F1 | 	sub	local01, #43
2d7bc     01 36 CE F7 | 	test	local09, #1 wz
2d7c0     24 00 90 5D |  if_ne	jmp	#LR__4528
2d7c4     1C 26 06 F1 | 	add	local01, #28
2d7c8     13 13 02 FB | 	rdlong	arg01, local01
2d7cc     04 26 06 F1 | 	add	local01, #4
2d7d0     13 15 02 F6 | 	mov	arg02, local01
2d7d4     20 26 86 F1 | 	sub	local01, #32
2d7d8     0B 16 06 F6 | 	mov	arg03, #11
2d7dc     D8 DE BF FD | 	call	#_fatfs_cc_memcmp
2d7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7e4     28 00 90 AD |  if_e	jmp	#LR__4531
2d7e8                 | LR__4528
2d7e8     FF 2C 06 F6 | 	mov	local04, #255
2d7ec     2C 26 06 F1 | 	add	local01, #44
2d7f0     FF FF FF FF 
2d7f4     13 FF 6B FC | 	wrlong	##-1, local01
2d7f8     2C 26 86 F1 | 	sub	local01, #44
2d7fc                 | LR__4529
2d7fc                 | LR__4530
2d7fc     13 13 02 F6 | 	mov	arg01, local01
2d800     00 14 06 F6 | 	mov	arg02, #0
2d804     AC F4 BF FD | 	call	#_fatfs_cc_dir_next
2d808     FD 2E 0A F6 | 	mov	local05, result1 wz
2d80c     00 FE 9F AD |  if_e	jmp	#LR__4520
2d810                 | LR__4531
2d810                 | ' 
2d810                 | ' 	return res;
2d810     17 FB 01 F6 | 	mov	result1, local05
2d814                 | LR__4532
2d814     A7 F0 03 F6 | 	mov	ptra, fp
2d818     B2 00 A0 FD | 	call	#popregs_
2d81c                 | _fatfs_cc_dir_find_ret
2d81c     2D 00 64 FD | 	ret
2d820                 | 
2d820                 | _fatfs_cc_dir_register
2d820     09 4A 05 F6 | 	mov	COUNT_, #9
2d824     A8 00 A0 FD | 	call	#pushregs_
2d828     2C F0 07 F1 | 	add	ptra, #44
2d82c     09 27 02 F6 | 	mov	local01, arg01
2d830     13 29 02 FB | 	rdlong	local02, local01
2d834     2B 26 06 F1 | 	add	local01, #43
2d838     13 2B C2 FA | 	rdbyte	local03, local01
2d83c     2B 26 86 F1 | 	sub	local01, #43
2d840     A0 2A CE F7 | 	test	local03, #160 wz
2d844     06 FA 05 56 |  if_ne	mov	result1, #6
2d848     2C 02 90 5D |  if_ne	jmp	#LR__4551
2d84c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2d84c     00 2C 06 F6 | 	mov	local04, #0
2d850     0C 28 06 F1 | 	add	local02, #12
2d854     97 12 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2d858                 | LR__4540
2d858     14 2B 02 FB | 	rdlong	local03, local02
2d85c     16 19 02 F6 | 	mov	arg04, local04
2d860     01 18 66 F0 | 	shl	arg04, #1
2d864     15 19 02 F1 | 	add	arg04, local03
2d868     0C 2B EA FA | 	rdword	local03, arg04 wz
2d86c     16 2F 02 56 |  if_ne	mov	local05, local04
2d870     01 2E 06 51 |  if_ne	add	local05, #1
2d874     17 2D 02 56 |  if_ne	mov	local04, local05
2d878     DC FF 9F 5D |  if_ne	jmp	#LR__4540
2d87c                 | LR__4541
2d87c     0C 28 86 F1 | 	sub	local02, #12
2d880     A7 12 02 F6 | 	mov	arg01, fp
2d884     1C 12 06 F1 | 	add	arg01, #28
2d888     13 15 02 F6 | 	mov	arg02, local01
2d88c     20 14 06 F1 | 	add	arg02, #32
2d890     0C 16 06 F6 | 	mov	arg03, #12
2d894     30 77 BF FD | 	call	#__system____builtin_memmove
2d898     27 4E 05 F1 | 	add	fp, #39
2d89c     A7 2A C2 FA | 	rdbyte	local03, fp
2d8a0     27 4E 85 F1 | 	sub	fp, #39
2d8a4     01 2A CE F7 | 	test	local03, #1 wz
2d8a8     80 00 90 AD |  if_e	jmp	#LR__4544
2d8ac     2B 26 06 F1 | 	add	local01, #43
2d8b0     13 81 48 FC | 	wrbyte	#64, local01
2d8b4     2B 26 86 F1 | 	sub	local01, #43
2d8b8                 | ' 		dp->fn[ 11 ] =  0x40 ;
2d8b8                 | ' 		for (n = 1; n < 100; n++) {
2d8b8     01 30 06 F6 | 	mov	local06, #1
2d8bc                 | LR__4542
2d8bc     64 30 16 F2 | 	cmp	local06, #100 wc
2d8c0     38 00 90 3D |  if_ae	jmp	#LR__4543
2d8c4     13 13 02 F6 | 	mov	arg01, local01
2d8c8     20 12 06 F1 | 	add	arg01, #32
2d8cc     A7 14 02 F6 | 	mov	arg02, fp
2d8d0     1C 14 06 F1 | 	add	arg02, #28
2d8d4     0C 28 06 F1 | 	add	local02, #12
2d8d8     14 17 02 FB | 	rdlong	arg03, local02
2d8dc     0C 28 86 F1 | 	sub	local02, #12
2d8e0     18 19 02 F6 | 	mov	arg04, local06
2d8e4     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2d8e8     13 13 02 F6 | 	mov	arg01, local01
2d8ec     E4 FC BF FD | 	call	#_fatfs_cc_dir_find
2d8f0     FD 32 0A F6 | 	mov	local07, result1 wz
2d8f4     01 30 06 A1 |  if_e	add	local06, #1
2d8f8     C0 FF 9F AD |  if_e	jmp	#LR__4542
2d8fc                 | LR__4543
2d8fc     64 30 0E F2 | 	cmp	local06, #100 wz
2d900     07 FA 05 A6 |  if_e	mov	result1, #7
2d904     70 01 90 AD |  if_e	jmp	#LR__4551
2d908     04 32 0E F2 | 	cmp	local07, #4 wz
2d90c     19 FB 01 56 |  if_ne	mov	result1, local07
2d910     64 01 90 5D |  if_ne	jmp	#LR__4551
2d914     27 4E 05 F1 | 	add	fp, #39
2d918     A7 2A C2 FA | 	rdbyte	local03, fp
2d91c     27 4E 85 F1 | 	sub	fp, #39
2d920     2B 26 06 F1 | 	add	local01, #43
2d924     13 2B 42 FC | 	wrbyte	local03, local01
2d928     2B 26 86 F1 | 	sub	local01, #43
2d92c                 | LR__4544
2d92c     27 4E 05 F1 | 	add	fp, #39
2d930     A7 32 C2 FA | 	rdbyte	local07, fp
2d934     02 32 CE F7 | 	test	local07, #2 wz
2d938     0C 2C 06 51 |  if_ne	add	local04, #12
2d93c     0D 2C 16 5D |  if_ne	qdiv	local04, #13
2d940     27 4E 85 F1 | 	sub	fp, #39
2d944     13 13 02 F6 | 	mov	arg01, local01
2d948     18 2A 62 5D |  if_ne	getqx	local03
2d94c     01 2A 06 51 |  if_ne	add	local03, #1
2d950     01 2A 06 A6 |  if_e	mov	local03, #1
2d954     15 35 02 F6 | 	mov	local08, local03
2d958     1A 15 02 F6 | 	mov	arg02, local08
2d95c     10 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2d960     FD 32 0A F6 | 	mov	local07, result1 wz
2d964     9C 00 90 5D |  if_ne	jmp	#LR__4548
2d968     01 34 8E F1 | 	sub	local08, #1 wz
2d96c     94 00 90 AD |  if_e	jmp	#LR__4548
2d970     13 13 02 F6 | 	mov	arg01, local01
2d974     1A 33 02 F6 | 	mov	local07, local08
2d978     05 32 66 F0 | 	shl	local07, #5
2d97c     10 26 06 F1 | 	add	local01, #16
2d980     13 15 02 FB | 	rdlong	arg02, local01
2d984     10 26 86 F1 | 	sub	local01, #16
2d988     19 15 82 F1 | 	sub	arg02, local07
2d98c     BC F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2d990     FD 32 0A F6 | 	mov	local07, result1 wz
2d994     6C 00 90 5D |  if_ne	jmp	#LR__4547
2d998     13 13 02 F6 | 	mov	arg01, local01
2d99c     20 12 06 F1 | 	add	arg01, #32
2d9a0     00 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2d9a4     FD 36 02 F6 | 	mov	local09, result1
2d9a8                 | ' 			sum = sum_sfn(dp->fn);
2d9a8                 | ' 			do {
2d9a8                 | LR__4545
2d9a8     18 26 06 F1 | 	add	local01, #24
2d9ac     13 15 02 FB | 	rdlong	arg02, local01
2d9b0     18 26 86 F1 | 	sub	local01, #24
2d9b4     14 13 02 F6 | 	mov	arg01, local02
2d9b8     34 E8 BF FD | 	call	#_fatfs_cc_move_window
2d9bc     FD 32 0A F6 | 	mov	local07, result1 wz
2d9c0     40 00 90 5D |  if_ne	jmp	#LR__4546
2d9c4     0C 28 06 F1 | 	add	local02, #12
2d9c8     14 13 02 FB | 	rdlong	arg01, local02
2d9cc     1C 26 06 F1 | 	add	local01, #28
2d9d0     13 15 02 FB | 	rdlong	arg02, local01
2d9d4     1C 26 86 F1 | 	sub	local01, #28
2d9d8     1B 19 02 F6 | 	mov	arg04, local09
2d9dc     1A 17 02 F6 | 	mov	arg03, local08
2d9e0     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2d9e4     09 28 86 F1 | 	sub	local02, #9
2d9e8     14 03 48 FC | 	wrbyte	#1, local02
2d9ec     03 28 86 F1 | 	sub	local02, #3
2d9f0     13 13 02 F6 | 	mov	arg01, local01
2d9f4     00 14 06 F6 | 	mov	arg02, #0
2d9f8     B8 F2 BF FD | 	call	#_fatfs_cc_dir_next
2d9fc     FD 32 0A F6 | 	mov	local07, result1 wz
2da00     E9 35 6E AB |  if_e	djnz	local08, #LR__4545
2da04                 | LR__4546
2da04                 | LR__4547
2da04                 | LR__4548
2da04     00 32 0E F2 | 	cmp	local07, #0 wz
2da08     68 00 90 5D |  if_ne	jmp	#LR__4550
2da0c     18 26 06 F1 | 	add	local01, #24
2da10     13 15 02 FB | 	rdlong	arg02, local01
2da14     18 26 86 F1 | 	sub	local01, #24
2da18     14 13 02 F6 | 	mov	arg01, local02
2da1c     D0 E7 BF FD | 	call	#_fatfs_cc_move_window
2da20     FD 32 0A F6 | 	mov	local07, result1 wz
2da24     4C 00 90 5D |  if_ne	jmp	#LR__4549
2da28     1C 26 06 F1 | 	add	local01, #28
2da2c     13 13 02 FB | 	rdlong	arg01, local01
2da30     00 14 06 F6 | 	mov	arg02, #0
2da34     20 16 06 F6 | 	mov	arg03, #32
2da38     98 00 A0 FD | 	call	#\builtin_bytefill_
2da3c     13 13 02 FB | 	rdlong	arg01, local01
2da40     04 26 06 F1 | 	add	local01, #4
2da44     13 15 02 F6 | 	mov	arg02, local01
2da48     0B 16 06 F6 | 	mov	arg03, #11
2da4c     78 75 BF FD | 	call	#__system____builtin_memmove
2da50     04 26 86 F1 | 	sub	local01, #4
2da54     13 2B 02 FB | 	rdlong	local03, local01
2da58     0F 26 06 F1 | 	add	local01, #15
2da5c     13 37 C2 FA | 	rdbyte	local09, local01
2da60     18 36 06 F5 | 	and	local09, #24
2da64     0C 2A 06 F1 | 	add	local03, #12
2da68     15 37 42 FC | 	wrbyte	local09, local03
2da6c     03 28 06 F1 | 	add	local02, #3
2da70     14 03 48 FC | 	wrbyte	#1, local02
2da74                 | LR__4549
2da74                 | LR__4550
2da74                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2da74                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2da74                 | ' 
2da74                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2da74                 | ' 
2da74                 | ' 			fs->wflag = 1;
2da74                 | ' 		}
2da74                 | ' 	}
2da74                 | ' 
2da74                 | ' 	return res;
2da74     19 FB 01 F6 | 	mov	result1, local07
2da78                 | LR__4551
2da78     A7 F0 03 F6 | 	mov	ptra, fp
2da7c     B2 00 A0 FD | 	call	#popregs_
2da80                 | _fatfs_cc_dir_register_ret
2da80     2D 00 64 FD | 	ret
2da84                 | 
2da84                 | _fatfs_cc_dir_remove
2da84     05 4A 05 F6 | 	mov	COUNT_, #5
2da88     A8 00 A0 FD | 	call	#pushregs_
2da8c     09 27 02 F6 | 	mov	local01, arg01
2da90     13 29 02 FB | 	rdlong	local02, local01
2da94     10 26 06 F1 | 	add	local01, #16
2da98     13 2B 02 FB | 	rdlong	local03, local01
2da9c     1C 26 06 F1 | 	add	local01, #28
2daa0     13 15 02 FB | 	rdlong	arg02, local01
2daa4     2C 26 86 F1 | 	sub	local01, #44
2daa8     FF FF 7F FF 
2daac     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2dab0     00 2C 06 A6 |  if_e	mov	local04, #0
2dab4     18 00 90 AD |  if_e	jmp	#LR__4560
2dab8     13 13 02 F6 | 	mov	arg01, local01
2dabc     2C 26 06 F1 | 	add	local01, #44
2dac0     13 15 02 FB | 	rdlong	arg02, local01
2dac4     2C 26 86 F1 | 	sub	local01, #44
2dac8     80 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2dacc     FD 2C 02 F6 | 	mov	local04, result1
2dad0                 | LR__4560
2dad0     16 2F 0A F6 | 	mov	local05, local04 wz
2dad4     64 00 90 5D |  if_ne	jmp	#LR__4563
2dad8                 | ' 		do {
2dad8                 | LR__4561
2dad8     18 26 06 F1 | 	add	local01, #24
2dadc     13 15 02 FB | 	rdlong	arg02, local01
2dae0     18 26 86 F1 | 	sub	local01, #24
2dae4     14 13 02 F6 | 	mov	arg01, local02
2dae8     04 E7 BF FD | 	call	#_fatfs_cc_move_window
2daec     FD 2E 0A F6 | 	mov	local05, result1 wz
2daf0     40 00 90 5D |  if_ne	jmp	#LR__4562
2daf4     1C 26 06 F1 | 	add	local01, #28
2daf8     13 2D 02 FB | 	rdlong	local04, local01
2dafc     16 CB 49 FC | 	wrbyte	#229, local04
2db00     03 28 06 F1 | 	add	local02, #3
2db04     14 03 48 FC | 	wrbyte	#1, local02
2db08     03 28 86 F1 | 	sub	local02, #3
2db0c     0C 26 86 F1 | 	sub	local01, #12
2db10     13 2D 02 FB | 	rdlong	local04, local01
2db14     10 26 86 F1 | 	sub	local01, #16
2db18     15 2D 12 F2 | 	cmp	local04, local03 wc
2db1c     14 00 90 3D |  if_ae	jmp	#LR__4562
2db20     13 13 02 F6 | 	mov	arg01, local01
2db24     00 14 06 F6 | 	mov	arg02, #0
2db28     88 F1 BF FD | 	call	#_fatfs_cc_dir_next
2db2c     FD 2E 0A F6 | 	mov	local05, result1 wz
2db30     A4 FF 9F AD |  if_e	jmp	#LR__4561
2db34                 | LR__4562
2db34     04 2E 0E F2 | 	cmp	local05, #4 wz
2db38     02 2E 06 A6 |  if_e	mov	local05, #2
2db3c                 | LR__4563
2db3c                 | ' 	}
2db3c                 | ' #line 2590 "ff.c"
2db3c                 | ' 	return res;
2db3c     17 FB 01 F6 | 	mov	result1, local05
2db40     A7 F0 03 F6 | 	mov	ptra, fp
2db44     B2 00 A0 FD | 	call	#popregs_
2db48                 | _fatfs_cc_dir_remove_ret
2db48     2D 00 64 FD | 	ret
2db4c                 | 
2db4c                 | _fatfs_cc_get_fileinfo
2db4c     11 4A 05 F6 | 	mov	COUNT_, #17
2db50     A8 00 A0 FD | 	call	#pushregs_
2db54     09 27 02 F6 | 	mov	local01, arg01
2db58     0A 29 02 F6 | 	mov	local02, arg02
2db5c     13 2B 02 FB | 	rdlong	local03, local01
2db60     1C 28 06 F1 | 	add	local02, #28
2db64     14 01 48 FC | 	wrbyte	#0, local02
2db68     1C 28 86 F1 | 	sub	local02, #28
2db6c     18 26 06 F1 | 	add	local01, #24
2db70     13 2D 0A FB | 	rdlong	local04, local01 wz
2db74     18 26 86 F1 | 	sub	local01, #24
2db78     8C 03 90 AD |  if_e	jmp	#LR__4582
2db7c     2C 26 06 F1 | 	add	local01, #44
2db80     13 2D 02 FB | 	rdlong	local04, local01
2db84     2C 26 86 F1 | 	sub	local01, #44
2db88     FF FF 7F FF 
2db8c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2db90     E0 00 90 AD |  if_e	jmp	#LR__4573
2db94     00 2E 06 F6 | 	mov	local05, #0
2db98     00 30 06 F6 | 	mov	local06, #0
2db9c     00 32 06 F6 | 	mov	local07, #0
2dba0                 | ' 			si = di = 0;
2dba0                 | ' 			hs = 0;
2dba0                 | ' 			while (fs->lfnbuf[si] != 0) {
2dba0                 | LR__4570
2dba0     0C 2A 06 F1 | 	add	local03, #12
2dba4     15 2D 02 FB | 	rdlong	local04, local03
2dba8     0C 2A 86 F1 | 	sub	local03, #12
2dbac     18 35 02 F6 | 	mov	local08, local06
2dbb0     01 34 66 F0 | 	shl	local08, #1
2dbb4     16 35 02 F1 | 	add	local08, local04
2dbb8     1A 2D EA FA | 	rdword	local04, local08 wz
2dbbc     98 00 90 AD |  if_e	jmp	#LR__4572
2dbc0     0C 2A 06 F1 | 	add	local03, #12
2dbc4     15 37 02 FB | 	rdlong	local09, local03
2dbc8     0C 2A 86 F1 | 	sub	local03, #12
2dbcc     18 2D 02 F6 | 	mov	local04, local06
2dbd0     01 2C 66 F0 | 	shl	local04, #1
2dbd4     1B 2D 02 F1 | 	add	local04, local09
2dbd8     16 39 E2 FA | 	rdword	local10, local04
2dbdc     19 2D 02 F6 | 	mov	local04, local07
2dbe0     0F 2C 4E F7 | 	zerox	local04, #15 wz
2dbe4     01 30 06 F1 | 	add	local06, #1
2dbe8     1C 3B 02 A6 |  if_e	mov	local11, local10
2dbec     1D 3B 32 A9 |  if_e	getword	local11, local11, #0
2dbf0     6C 00 00 AF 
2dbf4     00 3A 16 A2 |  if_e	cmp	local11, ##55296 wc
2dbf8     18 00 90 8D |  if_c_and_z	jmp	#LR__4571
2dbfc     1C 3D 02 A6 |  if_e	mov	local12, local10
2dc00     1E 3D 32 A9 |  if_e	getword	local12, local12, #0
2dc04     70 00 00 AF 
2dc08     00 3C 16 A2 |  if_e	cmp	local12, ##57344 wc
2dc0c     1C 33 02 86 |  if_c_and_z	mov	local07, local10
2dc10                 | ' 					hs = wc; continue;
2dc10     8C FF 9F 8D |  if_c_and_z	jmp	#LR__4570
2dc14                 | LR__4571
2dc14     19 13 32 F9 | 	getword	arg01, local07, #0
2dc18     10 12 66 F0 | 	shl	arg01, #16
2dc1c     1C 3D 32 F9 | 	getword	local12, local10, #0
2dc20     1E 13 42 F5 | 	or	arg01, local12
2dc24     17 15 02 F6 | 	mov	arg02, local05
2dc28     14 39 02 F6 | 	mov	local10, local02
2dc2c     1C 38 06 F1 | 	add	local10, #28
2dc30     1C 15 02 F1 | 	add	arg02, local10
2dc34     FF 3E 06 F6 | 	mov	local13, #255
2dc38     17 3F 82 F1 | 	sub	local13, local05
2dc3c     1F 17 02 F6 | 	mov	arg03, local13
2dc40     34 E3 BF FD | 	call	#_fatfs_cc_put_utf
2dc44     FD 38 0A F6 | 	mov	local10, result1 wz
2dc48     00 2E 06 A6 |  if_e	mov	local05, #0
2dc4c     1C 2F 02 51 |  if_ne	add	local05, local10
2dc50     00 32 06 56 |  if_ne	mov	local07, #0
2dc54     48 FF 9F 5D |  if_ne	jmp	#LR__4570
2dc58                 | LR__4572
2dc58     19 2D 02 F6 | 	mov	local04, local07
2dc5c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2dc60     00 2E 06 56 |  if_ne	mov	local05, #0
2dc64     14 3B 02 F6 | 	mov	local11, local02
2dc68     1C 3A 06 F1 | 	add	local11, #28
2dc6c     1D 2F 02 F1 | 	add	local05, local11
2dc70     17 01 48 FC | 	wrbyte	#0, local05
2dc74                 | LR__4573
2dc74     00 2E 06 F6 | 	mov	local05, #0
2dc78     00 30 06 F6 | 	mov	local06, #0
2dc7c                 | ' 			fno->fname[di] = 0;
2dc7c                 | ' 		}
2dc7c                 | ' 	}
2dc7c                 | ' 
2dc7c                 | ' 	si = di = 0;
2dc7c                 | ' 	while (si < 11) {
2dc7c                 | LR__4574
2dc7c     0B 30 16 F2 | 	cmp	local06, #11 wc
2dc80     1C 01 90 3D |  if_ae	jmp	#LR__4576
2dc84     1C 26 06 F1 | 	add	local01, #28
2dc88     13 37 02 FB | 	rdlong	local09, local01
2dc8c     1C 26 86 F1 | 	sub	local01, #28
2dc90     18 3F 02 F6 | 	mov	local13, local06
2dc94     1F 39 02 F6 | 	mov	local10, local13
2dc98     1B 39 02 F1 | 	add	local10, local09
2dc9c     1C 39 C2 FA | 	rdbyte	local10, local10
2dca0     1C 2D 32 F9 | 	getword	local04, local10, #0
2dca4     20 2C 0E F2 | 	cmp	local04, #32 wz
2dca8     01 30 06 F1 | 	add	local06, #1
2dcac     CC FF 9F AD |  if_e	jmp	#LR__4574
2dcb0     1C 2D 32 F9 | 	getword	local04, local10, #0
2dcb4     05 2C 0E F2 | 	cmp	local04, #5 wz
2dcb8     E5 38 06 A6 |  if_e	mov	local10, #229
2dcbc     09 30 0E F2 | 	cmp	local06, #9 wz
2dcc0     0C 2E 16 A2 |  if_e	cmp	local05, #12 wc
2dcc4     17 3D 02 86 |  if_c_and_z	mov	local12, local05
2dcc8     01 2E 06 81 |  if_c_and_z	add	local05, #1
2dccc     14 3F 02 86 |  if_c_and_z	mov	local13, local02
2dcd0     0C 3E 06 81 |  if_c_and_z	add	local13, #12
2dcd4     1F 3D 02 81 |  if_c_and_z	add	local12, local13
2dcd8     1E 5D 48 8C |  if_c_and_z	wrbyte	#46, local12
2dcdc     1C 13 32 F9 | 	getword	arg01, local10, #0
2dce0     07 12 4E F7 | 	zerox	arg01, #7 wz
2dce4     00 FA 05 56 |  if_ne	mov	result1, #0
2dce8                 | ' 
2dce8                 | ' 	return 0;
2dce8     00 FA 05 A6 |  if_e	mov	result1, #0
2dcec     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcf0     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2dcf4     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2dcf8     4C 00 90 AD |  if_e	jmp	#LR__4575
2dcfc     1C 26 06 F1 | 	add	local01, #28
2dd00     13 33 02 FB | 	rdlong	local07, local01
2dd04     1C 26 86 F1 | 	sub	local01, #28
2dd08     18 35 02 F6 | 	mov	local08, local06
2dd0c     19 35 02 F1 | 	add	local08, local07
2dd10     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2dd14     00 FA 05 56 |  if_ne	mov	result1, #0
2dd18                 | ' 
2dd18                 | ' 	return 0;
2dd18     00 FA 05 A6 |  if_e	mov	result1, #0
2dd1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd20     1C 39 32 59 |  if_ne	getword	local10, local10, #0
2dd24     08 38 66 50 |  if_ne	shl	local10, #8
2dd28     1C 26 06 51 |  if_ne	add	local01, #28
2dd2c     13 41 02 5B |  if_ne	rdlong	local14, local01
2dd30     1C 26 86 51 |  if_ne	sub	local01, #28
2dd34     18 37 02 56 |  if_ne	mov	local09, local06
2dd38     01 30 06 51 |  if_ne	add	local06, #1
2dd3c     20 37 02 51 |  if_ne	add	local09, local14
2dd40     1B 3B C2 5A |  if_ne	rdbyte	local11, local09
2dd44     1D 39 42 55 |  if_ne	or	local10, local11
2dd48                 | LR__4575
2dd48     1C 13 02 F6 | 	mov	arg01, local10
2dd4c     01 00 00 FF 
2dd50     52 15 06 F6 | 	mov	arg02, ##850
2dd54     A8 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2dd58     FD 38 02 F6 | 	mov	local10, result1
2dd5c     1C 2D 02 F6 | 	mov	local04, local10
2dd60     0F 2C 4E F7 | 	zerox	local04, #15 wz
2dd64     00 2E 06 A6 |  if_e	mov	local05, #0
2dd68     34 00 90 AD |  if_e	jmp	#LR__4576
2dd6c     1C 13 32 F9 | 	getword	arg01, local10, #0
2dd70     17 15 02 F6 | 	mov	arg02, local05
2dd74     14 3F 02 F6 | 	mov	local13, local02
2dd78     0C 3E 06 F1 | 	add	local13, #12
2dd7c     1F 15 02 F1 | 	add	arg02, local13
2dd80     0C 3C 06 F6 | 	mov	local12, #12
2dd84     17 3D 82 F1 | 	sub	local12, local05
2dd88     1E 17 02 F6 | 	mov	arg03, local12
2dd8c     E8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2dd90     FD 38 0A F6 | 	mov	local10, result1 wz
2dd94     00 2E 06 A6 |  if_e	mov	local05, #0
2dd98     1C 2F 02 51 |  if_ne	add	local05, local10
2dd9c     DC FE 9F 5D |  if_ne	jmp	#LR__4574
2dda0                 | LR__4576
2dda0     17 2D 02 F6 | 	mov	local04, local05
2dda4     0C 28 06 F1 | 	add	local02, #12
2dda8     14 2D 02 F1 | 	add	local04, local02
2ddac     16 01 48 FC | 	wrbyte	#0, local04
2ddb0     10 28 06 F1 | 	add	local02, #16
2ddb4     14 2D CA FA | 	rdbyte	local04, local02 wz
2ddb8     1C 28 86 F1 | 	sub	local02, #28
2ddbc     F0 00 90 5D |  if_ne	jmp	#LR__4581
2ddc0     00 2E 0E F2 | 	cmp	local05, #0 wz
2ddc4     17 3D 02 A6 |  if_e	mov	local12, local05
2ddc8     01 2E 06 A1 |  if_e	add	local05, #1
2ddcc     14 3F 02 A6 |  if_e	mov	local13, local02
2ddd0     1C 3E 06 A1 |  if_e	add	local13, #28
2ddd4     1F 3D 02 A1 |  if_e	add	local12, local13
2ddd8     1E 7F 48 AC |  if_e	wrbyte	#63, local12
2dddc     A0 00 90 AD |  if_e	jmp	#LR__4580
2dde0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2dde0     00 2E 06 F6 | 	mov	local05, #0
2dde4     00 30 06 F6 | 	mov	local06, #0
2dde8     08 42 06 F6 | 	mov	local15, #8
2ddec                 | LR__4577
2ddec     18 2D 02 F6 | 	mov	local04, local06
2ddf0     14 3B 02 F6 | 	mov	local11, local02
2ddf4     0C 3A 06 F1 | 	add	local11, #12
2ddf8     1D 2D 02 F1 | 	add	local04, local11
2ddfc     16 3D CA FA | 	rdbyte	local12, local04 wz
2de00     7C 00 90 AD |  if_e	jmp	#LR__4579
2de04     18 35 02 F6 | 	mov	local08, local06
2de08     14 45 02 F6 | 	mov	local16, local02
2de0c     0C 44 06 F1 | 	add	local16, #12
2de10     22 35 02 F1 | 	add	local08, local16
2de14     1A 39 C2 FA | 	rdbyte	local10, local08
2de18     1C 3F 32 F9 | 	getword	local13, local10, #0
2de1c     2E 3E 0E F2 | 	cmp	local13, #46 wz
2de20     10 42 06 A6 |  if_e	mov	local15, #16
2de24     1C 3F 32 F9 | 	getword	local13, local10, #0
2de28     41 3E 16 F2 | 	cmp	local13, #65 wc
2de2c     2C 00 90 CD |  if_b	jmp	#LR__4578
2de30     1C 35 32 F9 | 	getword	local08, local10, #0
2de34     5B 34 16 F2 | 	cmp	local08, #91 wc
2de38     1C 26 06 C1 |  if_b	add	local01, #28
2de3c     13 37 02 CB |  if_b	rdlong	local09, local01
2de40     1C 26 86 C1 |  if_b	sub	local01, #28
2de44     0C 36 06 C1 |  if_b	add	local09, #12
2de48     1B 45 C2 CA |  if_b	rdbyte	local16, local09
2de4c     21 47 E2 C8 |  if_b	getbyte	local17, local15, #0
2de50     23 45 CA C7 |  if_b	test	local16, local17 wz
2de54     1C 39 32 49 |  if_c_and_nz	getword	local10, local10, #0
2de58     20 38 06 41 |  if_c_and_nz	add	local10, #32
2de5c                 | LR__4578
2de5c     17 3F 02 F6 | 	mov	local13, local05
2de60     14 35 02 F6 | 	mov	local08, local02
2de64     1C 34 06 F1 | 	add	local08, #28
2de68     1A 3F 02 F1 | 	add	local13, local08
2de6c     1C 39 32 F9 | 	getword	local10, local10, #0
2de70     1F 39 42 FC | 	wrbyte	local10, local13
2de74     01 30 06 F1 | 	add	local06, #1
2de78     01 2E 06 F1 | 	add	local05, #1
2de7c     6C FF 9F FD | 	jmp	#LR__4577
2de80                 | LR__4579
2de80                 | LR__4580
2de80     14 3B 02 F6 | 	mov	local11, local02
2de84     1C 3A 06 F1 | 	add	local11, #28
2de88     1D 2F 02 F1 | 	add	local05, local11
2de8c     17 01 48 FC | 	wrbyte	#0, local05
2de90     1C 26 06 F1 | 	add	local01, #28
2de94     13 2D 02 FB | 	rdlong	local04, local01
2de98     1C 26 86 F1 | 	sub	local01, #28
2de9c     0C 2C 06 F1 | 	add	local04, #12
2dea0     16 3D CA FA | 	rdbyte	local12, local04 wz
2dea4     0C 28 06 A1 |  if_e	add	local02, #12
2dea8     14 01 48 AC |  if_e	wrbyte	#0, local02
2deac     0C 28 86 A1 |  if_e	sub	local02, #12
2deb0                 | LR__4581
2deb0     1C 26 06 F1 | 	add	local01, #28
2deb4     13 3B 02 FB | 	rdlong	local11, local01
2deb8     0B 3A 06 F1 | 	add	local11, #11
2debc     1D 2D C2 FA | 	rdbyte	local04, local11
2dec0     3F 2C 06 F5 | 	and	local04, #63
2dec4     08 28 06 F1 | 	add	local02, #8
2dec8     14 2D 42 FC | 	wrbyte	local04, local02
2decc     08 28 86 F1 | 	sub	local02, #8
2ded0     13 13 02 FB | 	rdlong	arg01, local01
2ded4     1C 12 06 F1 | 	add	arg01, #28
2ded8                 | ' {
2ded8                 | ' 
2ded8                 | ' 	return *((DWORD*)ptr);
2ded8     09 FB 01 FB | 	rdlong	result1, arg01
2dedc     14 FB 61 FC | 	wrlong	result1, local02
2dee0     13 13 02 FB | 	rdlong	arg01, local01
2dee4     16 12 06 F1 | 	add	arg01, #22
2dee8                 | ' {
2dee8                 | ' 
2dee8                 | ' 	return *((WORD*)ptr);
2dee8     09 FB E1 FA | 	rdword	result1, arg01
2deec     06 28 06 F1 | 	add	local02, #6
2def0     14 FB 51 FC | 	wrword	result1, local02
2def4     13 13 02 FB | 	rdlong	arg01, local01
2def8     18 12 06 F1 | 	add	arg01, #24
2defc                 | ' {
2defc                 | ' 
2defc                 | ' 	return *((WORD*)ptr);
2defc     09 FB E1 FA | 	rdword	result1, arg01
2df00     02 28 86 F1 | 	sub	local02, #2
2df04     14 FB 51 FC | 	wrword	result1, local02
2df08                 | LR__4582
2df08     A7 F0 03 F6 | 	mov	ptra, fp
2df0c     B2 00 A0 FD | 	call	#popregs_
2df10                 | _fatfs_cc_get_fileinfo_ret
2df10     2D 00 64 FD | 	ret
2df14                 | 
2df14                 | _fatfs_cc_create_name
2df14     12 4A 05 F6 | 	mov	COUNT_, #18
2df18     A8 00 A0 FD | 	call	#pushregs_
2df1c     34 F0 07 F1 | 	add	ptra, #52
2df20     09 27 02 F6 | 	mov	local01, arg01
2df24     0A 29 02 F6 | 	mov	local02, arg02
2df28     14 17 02 FB | 	rdlong	arg03, local02
2df2c     30 4E 05 F1 | 	add	fp, #48
2df30     A7 16 62 FC | 	wrlong	arg03, fp
2df34     30 4E 85 F1 | 	sub	fp, #48
2df38     13 2B 02 FB | 	rdlong	local03, local01
2df3c     0C 2A 06 F1 | 	add	local03, #12
2df40     15 2D 02 FB | 	rdlong	local04, local03
2df44     00 2E 06 F6 | 	mov	local05, #0
2df48                 | ' 
2df48                 | ' 
2df48                 | ' 
2df48                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2df48                 | ' 	for (;;) {
2df48                 | LR__4590
2df48     A7 12 02 F6 | 	mov	arg01, fp
2df4c     30 12 06 F1 | 	add	arg01, #48
2df50     18 DF BF FD | 	call	#_fatfs_cc_tchar2uni
2df54     FD 30 02 F6 | 	mov	local06, result1
2df58     FF FF 7F FF 
2df5c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
2df60     06 FA 05 A6 |  if_e	mov	result1, #6
2df64     74 04 90 AD |  if_e	jmp	#LR__4617
2df68     80 00 00 FF 
2df6c     00 30 16 F2 | 	cmp	local06, ##65536 wc
2df70     17 33 02 36 |  if_ae	mov	local07, local05
2df74     01 2E 06 31 |  if_ae	add	local05, #1
2df78     01 32 66 30 |  if_ae	shl	local07, #1
2df7c     16 35 02 36 |  if_ae	mov	local08, local04
2df80     16 33 02 31 |  if_ae	add	local07, local04
2df84     18 37 02 36 |  if_ae	mov	local09, local06
2df88     10 36 46 30 |  if_ae	shr	local09, #16
2df8c     19 37 52 3C |  if_ae	wrword	local09, local07
2df90     18 39 02 F6 | 	mov	local10, local06
2df94     1C 2B 32 F9 | 	getword	local03, local10, #0
2df98     20 2A 16 F2 | 	cmp	local03, #32 wc
2df9c     1C 3B 02 36 |  if_ae	mov	local11, local10
2dfa0     1D 3B 32 39 |  if_ae	getword	local11, local11, #0
2dfa4     2F 3A 0E 32 |  if_ae	cmp	local11, #47 wz
2dfa8     1C 3D 02 16 |  if_a	mov	local12, local10
2dfac     1E 3D 32 19 |  if_a	getword	local12, local12, #0
2dfb0     5C 3C 0E 12 |  if_a	cmp	local12, #92 wz
2dfb4     54 00 90 ED |  if_be	jmp	#LR__4592
2dfb8     1C 2B 32 F9 | 	getword	local03, local10, #0
2dfbc     80 2A 16 F2 | 	cmp	local03, #128 wc
2dfc0     1C 00 90 3D |  if_ae	jmp	#LR__4591
2dfc4     8D 01 00 FF 
2dfc8     93 13 06 F6 | 	mov	arg01, ##@LR__5083
2dfcc     1C 15 32 F9 | 	getword	arg02, local10, #0
2dfd0     AC D7 BF FD | 	call	#_fatfs_cc_strchr
2dfd4     FD 3A 0A F6 | 	mov	local11, result1 wz
2dfd8     06 FA 05 56 |  if_ne	mov	result1, #6
2dfdc     FC 03 90 5D |  if_ne	jmp	#LR__4617
2dfe0                 | LR__4591
2dfe0     FF 2E 16 F2 | 	cmp	local05, #255 wc
2dfe4     06 FA 05 36 |  if_ae	mov	result1, #6
2dfe8     F0 03 90 3D |  if_ae	jmp	#LR__4617
2dfec     17 3D 02 F6 | 	mov	local12, local05
2dff0     1E 33 02 F6 | 	mov	local07, local12
2dff4     01 32 66 F0 | 	shl	local07, #1
2dff8     16 35 02 F6 | 	mov	local08, local04
2dffc     16 33 02 F1 | 	add	local07, local04
2e000     19 39 52 FC | 	wrword	local10, local07
2e004     01 2E 06 F1 | 	add	local05, #1
2e008     3C FF 9F FD | 	jmp	#LR__4590
2e00c                 | LR__4592
2e00c     1C 2B 32 F9 | 	getword	local03, local10, #0
2e010     20 2A 16 F2 | 	cmp	local03, #32 wc
2e014     04 3E 06 C6 |  if_b	mov	local13, #4
2e018     64 00 90 CD |  if_b	jmp	#LR__4595
2e01c     97 22 48 FB | 	callpa	#(@LR__4594-@LR__4593)>>2,fcache_load_ptr_
2e020                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e020                 | LR__4593
2e020     30 4E 05 F1 | 	add	fp, #48
2e024     A7 3A 02 FB | 	rdlong	local11, fp
2e028     30 4E 85 F1 | 	sub	fp, #48
2e02c     1D 2B C2 FA | 	rdbyte	local03, local11
2e030     2F 2A 0E F2 | 	cmp	local03, #47 wz
2e034     30 4E 05 51 |  if_ne	add	fp, #48
2e038     A7 36 02 5B |  if_ne	rdlong	local09, fp
2e03c     30 4E 85 51 |  if_ne	sub	fp, #48
2e040     1B 35 02 56 |  if_ne	mov	local08, local09
2e044     1A 33 C2 5A |  if_ne	rdbyte	local07, local08
2e048     5C 32 0E 52 |  if_ne	cmp	local07, #92 wz
2e04c     30 4E 05 A1 |  if_e	add	fp, #48
2e050     A7 3C 02 AB |  if_e	rdlong	local12, fp
2e054     01 3C 06 A1 |  if_e	add	local12, #1
2e058     A7 3C 62 AC |  if_e	wrlong	local12, fp
2e05c     30 4E 85 A1 |  if_e	sub	fp, #48
2e060     BC FF 9F AD |  if_e	jmp	#LR__4593
2e064                 | LR__4594
2e064     00 3E 06 F6 | 	mov	local13, #0
2e068     30 4E 05 F1 | 	add	fp, #48
2e06c     A7 3A 02 FB | 	rdlong	local11, fp
2e070     30 4E 85 F1 | 	sub	fp, #48
2e074     1D 2B C2 FA | 	rdbyte	local03, local11
2e078     20 2A 16 F2 | 	cmp	local03, #32 wc
2e07c     04 3E 06 C6 |  if_b	mov	local13, #4
2e080                 | LR__4595
2e080     30 4E 05 F1 | 	add	fp, #48
2e084     A7 2A 02 FB | 	rdlong	local03, fp
2e088     30 4E 85 F1 | 	sub	fp, #48
2e08c     14 2B 62 FC | 	wrlong	local03, local02
2e090                 | ' 	}
2e090                 | ' 	*path = p;
2e090                 | ' #line 2862 "ff.c"
2e090                 | ' 	while (di) {
2e090     00 2E 0E F2 | 	cmp	local05, #0 wz
2e094     30 00 90 AD |  if_e	jmp	#LR__4598
2e098     97 16 48 FB | 	callpa	#(@LR__4597-@LR__4596)>>2,fcache_load_ptr_
2e09c                 | LR__4596
2e09c     17 3D 02 F6 | 	mov	local12, local05
2e0a0     01 3C 86 F1 | 	sub	local12, #1
2e0a4     01 3C 66 F0 | 	shl	local12, #1
2e0a8     16 3D 02 F1 | 	add	local12, local04
2e0ac     1E 39 E2 FA | 	rdword	local10, local12
2e0b0     1C 2B 32 F9 | 	getword	local03, local10, #0
2e0b4     20 2A 0E F2 | 	cmp	local03, #32 wz
2e0b8     1C 3B 02 56 |  if_ne	mov	local11, local10
2e0bc     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2e0c0     2E 3A 0E 52 |  if_ne	cmp	local11, #46 wz
2e0c4     F5 2F 6E AB |  if_e	djnz	local05, #LR__4596
2e0c8                 | LR__4597
2e0c8                 | LR__4598
2e0c8     17 3B 02 F6 | 	mov	local11, local05
2e0cc     01 3A 66 F0 | 	shl	local11, #1
2e0d0     16 3B 02 F1 | 	add	local11, local04
2e0d4     1D 01 58 FC | 	wrword	#0, local11
2e0d8     00 2E 0E F2 | 	cmp	local05, #0 wz
2e0dc     06 FA 05 A6 |  if_e	mov	result1, #6
2e0e0     F8 02 90 AD |  if_e	jmp	#LR__4617
2e0e4                 | ' 
2e0e4                 | ' 
2e0e4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2e0e4     00 40 06 F6 | 	mov	local14, #0
2e0e8     97 12 48 FB | 	callpa	#(@LR__4600-@LR__4599)>>2,fcache_load_ptr_
2e0ec                 | LR__4599
2e0ec     20 3D 02 F6 | 	mov	local12, local14
2e0f0     01 3C 66 F0 | 	shl	local12, #1
2e0f4     16 3D 02 F1 | 	add	local12, local04
2e0f8     1E 2B E2 FA | 	rdword	local03, local12
2e0fc     20 2A 0E F2 | 	cmp	local03, #32 wz
2e100     20 37 02 A6 |  if_e	mov	local09, local14
2e104     01 36 06 A1 |  if_e	add	local09, #1
2e108     1B 41 02 A6 |  if_e	mov	local14, local09
2e10c     DC FF 9F AD |  if_e	jmp	#LR__4599
2e110                 | LR__4600
2e110     01 40 16 F2 | 	cmp	local14, #1 wc
2e114     20 3D 02 C6 |  if_b	mov	local12, local14
2e118     01 3C 66 C0 |  if_b	shl	local12, #1
2e11c     16 3D 02 C1 |  if_b	add	local12, local04
2e120     1E 2B E2 CA |  if_b	rdword	local03, local12
2e124     2E 2A 0E C2 |  if_b	cmp	local03, #46 wz
2e128     1F 3F E2 B8 |  if_nc_or_z	getbyte	local13, local13, #0
2e12c     03 3E 46 B5 |  if_nc_or_z	or	local13, #3
2e130     97 12 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2e134                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2e134                 | LR__4601
2e134     01 2E 16 F2 | 	cmp	local05, #1 wc
2e138     17 33 02 36 |  if_ae	mov	local07, local05
2e13c     01 32 86 31 |  if_ae	sub	local07, #1
2e140     01 32 66 30 |  if_ae	shl	local07, #1
2e144     16 33 02 31 |  if_ae	add	local07, local04
2e148     19 2B E2 3A |  if_ae	rdword	local03, local07
2e14c     2E 2A 0E 32 |  if_ae	cmp	local03, #46 wz
2e150     01 2E 86 11 |  if_a	sub	local05, #1
2e154     DC FF 9F 1D |  if_a	jmp	#LR__4601
2e158                 | LR__4602
2e158     13 13 02 F6 | 	mov	arg01, local01
2e15c     20 12 06 F1 | 	add	arg01, #32
2e160     20 14 06 F6 | 	mov	arg02, #32
2e164     0B 16 06 F6 | 	mov	arg03, #11
2e168     09 43 02 F6 | 	mov	local15, arg01
2e16c     98 00 A0 FD | 	call	#\builtin_bytefill_
2e170     21 FB 01 F6 | 	mov	result1, local15
2e174     00 44 06 F6 | 	mov	local16, #0
2e178     00 46 06 F6 | 	mov	local17, #0
2e17c     08 48 06 F6 | 	mov	local18, #8
2e180                 | ' 
2e180                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2e180                 | ' 	i = b = 0; ni = 8;
2e180                 | ' 	for (;;) {
2e180                 | LR__4603
2e180     20 3D 02 F6 | 	mov	local12, local14
2e184     1E 33 02 F6 | 	mov	local07, local12
2e188     01 32 66 F0 | 	shl	local07, #1
2e18c     16 35 02 F6 | 	mov	local08, local04
2e190     16 33 02 F1 | 	add	local07, local04
2e194     19 39 E2 FA | 	rdword	local10, local07
2e198     1C 2B 02 F6 | 	mov	local03, local10
2e19c     0F 2A 4E F7 | 	zerox	local03, #15 wz
2e1a0     01 40 06 F1 | 	add	local14, #1
2e1a4     B0 01 90 AD |  if_e	jmp	#LR__4615
2e1a8     1C 2B 32 F9 | 	getword	local03, local10, #0
2e1ac     20 2A 0E F2 | 	cmp	local03, #32 wz
2e1b0     14 00 90 AD |  if_e	jmp	#LR__4604
2e1b4     1C 3B 32 F9 | 	getword	local11, local10, #0
2e1b8     2E 3A 0E F2 | 	cmp	local11, #46 wz
2e1bc     14 00 90 5D |  if_ne	jmp	#LR__4605
2e1c0     17 41 0A F2 | 	cmp	local14, local05 wz
2e1c4     0C 00 90 AD |  if_e	jmp	#LR__4605
2e1c8                 | LR__4604
2e1c8     1F 3F E2 F8 | 	getbyte	local13, local13, #0
2e1cc     03 3E 46 F5 | 	or	local13, #3
2e1d0                 | ' 			cf |=  0x01  |  0x02 ;
2e1d0                 | ' 			continue;
2e1d0     AC FF 9F FD | 	jmp	#LR__4603
2e1d4                 | LR__4605
2e1d4     24 47 12 F2 | 	cmp	local17, local18 wc
2e1d8     17 41 0A C2 |  if_b	cmp	local14, local05 wz
2e1dc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4606
2e1e0     0B 48 0E F2 | 	cmp	local18, #11 wz
2e1e4     1F 3F E2 A8 |  if_e	getbyte	local13, local13, #0
2e1e8     03 3E 46 A5 |  if_e	or	local13, #3
2e1ec                 | ' 				cf |=  0x01  |  0x02 ;
2e1ec                 | ' 				break;
2e1ec     68 01 90 AD |  if_e	jmp	#LR__4615
2e1f0     17 41 0A F2 | 	cmp	local14, local05 wz
2e1f4     1F 3F E2 58 |  if_ne	getbyte	local13, local13, #0
2e1f8     03 3E 46 55 |  if_ne	or	local13, #3
2e1fc     17 41 1A F2 | 	cmp	local14, local05 wcz
2e200     54 01 90 1D |  if_a	jmp	#LR__4615
2e204     17 41 02 F6 | 	mov	local14, local05
2e208     08 46 06 F6 | 	mov	local17, #8
2e20c     0B 48 06 F6 | 	mov	local18, #11
2e210     22 45 E2 F8 | 	getbyte	local16, local16, #0
2e214     02 44 66 F0 | 	shl	local16, #2
2e218                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2e218                 | ' 			continue;
2e218     64 FF 9F FD | 	jmp	#LR__4603
2e21c                 | LR__4606
2e21c     1C 2B 32 F9 | 	getword	local03, local10, #0
2e220     80 2A 16 F2 | 	cmp	local03, #128 wc
2e224     50 00 90 CD |  if_b	jmp	#LR__4607
2e228     1F 3F E2 F8 | 	getbyte	local13, local13, #0
2e22c     02 3E 46 F5 | 	or	local13, #2
2e230     1C 13 32 F9 | 	getword	arg01, local10, #0
2e234     01 00 00 FF 
2e238     52 3B 06 F6 | 	mov	local11, ##850
2e23c     01 00 00 FF 
2e240     52 15 06 F6 | 	mov	arg02, ##850
2e244     48 D2 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2e248     FD 38 02 F6 | 	mov	local10, result1
2e24c     1C 2B 32 F9 | 	getword	local03, local10, #0
2e250     80 2A CE F7 | 	test	local03, #128 wz
2e254     1C 3B 02 56 |  if_ne	mov	local11, local10
2e258     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2e25c     7F 3A 06 55 |  if_ne	and	local11, #127
2e260     1D 3D 02 56 |  if_ne	mov	local12, local11
2e264     F6 32 02 56 |  if_ne	mov	local07, ptr__fatfs_cc_dat__
2e268     01 00 00 5F 
2e26c     BB 33 06 51 |  if_ne	add	local07, ##955
2e270     19 3D 02 51 |  if_ne	add	local12, local07
2e274     1E 39 C2 5A |  if_ne	rdbyte	local10, local12
2e278                 | LR__4607
2e278     1C 2B 32 F9 | 	getword	local03, local10, #0
2e27c     00 2B 16 F2 | 	cmp	local03, #256 wc
2e280     40 00 90 CD |  if_b	jmp	#LR__4608
2e284     24 2B 02 F6 | 	mov	local03, local18
2e288     01 2A 86 F1 | 	sub	local03, #1
2e28c     15 47 12 F2 | 	cmp	local17, local03 wc
2e290     1F 3F E2 38 |  if_ae	getbyte	local13, local13, #0
2e294     03 3E 46 35 |  if_ae	or	local13, #3
2e298     24 47 02 36 |  if_ae	mov	local17, local18
2e29c                 | ' 				cf |=  0x01  |  0x02 ;
2e29c                 | ' 				i = ni; continue;
2e29c     E0 FE 9F 3D |  if_ae	jmp	#LR__4603
2e2a0     23 3D 02 F6 | 	mov	local12, local17
2e2a4     13 33 02 F6 | 	mov	local07, local01
2e2a8     20 32 06 F1 | 	add	local07, #32
2e2ac     19 3D 02 F1 | 	add	local12, local07
2e2b0     1C 35 32 F9 | 	getword	local08, local10, #0
2e2b4     08 34 46 F0 | 	shr	local08, #8
2e2b8     1E 35 42 FC | 	wrbyte	local08, local12
2e2bc     01 46 06 F1 | 	add	local17, #1
2e2c0     74 00 90 FD | 	jmp	#LR__4614
2e2c4                 | LR__4608
2e2c4     1C 2B 02 F6 | 	mov	local03, local10
2e2c8     0F 2A 4E F7 | 	zerox	local03, #15 wz
2e2cc     18 00 90 AD |  if_e	jmp	#LR__4609
2e2d0     8D 01 00 FF 
2e2d4     9C 13 06 F6 | 	mov	arg01, ##@LR__5084
2e2d8     1C 15 32 F9 | 	getword	arg02, local10, #0
2e2dc     A0 D4 BF FD | 	call	#_fatfs_cc_strchr
2e2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2e4     10 00 90 AD |  if_e	jmp	#LR__4610
2e2e8                 | LR__4609
2e2e8     5F 38 06 F6 | 	mov	local10, #95
2e2ec     1F 3F E2 F8 | 	getbyte	local13, local13, #0
2e2f0     03 3E 46 F5 | 	or	local13, #3
2e2f4     40 00 90 FD | 	jmp	#LR__4613
2e2f8                 | LR__4610
2e2f8     1C 2B 32 F9 | 	getword	local03, local10, #0
2e2fc     41 2A 16 F2 | 	cmp	local03, #65 wc
2e300     10 00 90 CD |  if_b	jmp	#LR__4611
2e304     1C 3B 32 F9 | 	getword	local11, local10, #0
2e308     5B 3A 16 F2 | 	cmp	local11, #91 wc
2e30c     22 45 E2 C8 |  if_b	getbyte	local16, local16, #0
2e310     02 44 46 C5 |  if_b	or	local16, #2
2e314                 | LR__4611
2e314     1C 2B 32 F9 | 	getword	local03, local10, #0
2e318     61 2A 16 F2 | 	cmp	local03, #97 wc
2e31c     18 00 90 CD |  if_b	jmp	#LR__4612
2e320     1C 3B 32 F9 | 	getword	local11, local10, #0
2e324     7B 3A 16 F2 | 	cmp	local11, #123 wc
2e328     22 45 E2 C8 |  if_b	getbyte	local16, local16, #0
2e32c     01 44 46 C5 |  if_b	or	local16, #1
2e330     1C 39 32 C9 |  if_b	getword	local10, local10, #0
2e334     20 38 86 C1 |  if_b	sub	local10, #32
2e338                 | LR__4612
2e338                 | LR__4613
2e338                 | LR__4614
2e338     23 3D 02 F6 | 	mov	local12, local17
2e33c     13 33 02 F6 | 	mov	local07, local01
2e340     20 32 06 F1 | 	add	local07, #32
2e344     19 3D 02 F1 | 	add	local12, local07
2e348     1C 39 32 F9 | 	getword	local10, local10, #0
2e34c     1E 39 42 FC | 	wrbyte	local10, local12
2e350     01 46 06 F1 | 	add	local17, #1
2e354     28 FE 9F FD | 	jmp	#LR__4603
2e358                 | LR__4615
2e358     20 26 06 F1 | 	add	local01, #32
2e35c     13 2B C2 FA | 	rdbyte	local03, local01
2e360     20 26 86 F1 | 	sub	local01, #32
2e364     E5 2A 0E F2 | 	cmp	local03, #229 wz
2e368     20 26 06 A1 |  if_e	add	local01, #32
2e36c     13 0B 48 AC |  if_e	wrbyte	#5, local01
2e370     20 26 86 A1 |  if_e	sub	local01, #32
2e374     08 48 0E F2 | 	cmp	local18, #8 wz
2e378     22 45 E2 A8 |  if_e	getbyte	local16, local16, #0
2e37c     02 44 66 A0 |  if_e	shl	local16, #2
2e380     22 2B E2 F8 | 	getbyte	local03, local16, #0
2e384     0C 2A 06 F5 | 	and	local03, #12
2e388     0C 2A 0E F2 | 	cmp	local03, #12 wz
2e38c     22 3B 02 56 |  if_ne	mov	local11, local16
2e390     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2e394     03 3A 06 55 |  if_ne	and	local11, #3
2e398     03 3A 0E 52 |  if_ne	cmp	local11, #3 wz
2e39c     1F 3F E2 A8 |  if_e	getbyte	local13, local13, #0
2e3a0     02 3E 46 A5 |  if_e	or	local13, #2
2e3a4     1F 2B E2 F8 | 	getbyte	local03, local13, #0
2e3a8     02 2A CE F7 | 	test	local03, #2 wz
2e3ac     20 00 90 5D |  if_ne	jmp	#LR__4616
2e3b0     22 2B E2 F8 | 	getbyte	local03, local16, #0
2e3b4     01 2A CE F7 | 	test	local03, #1 wz
2e3b8     1F 3F E2 58 |  if_ne	getbyte	local13, local13, #0
2e3bc     10 3E 46 55 |  if_ne	or	local13, #16
2e3c0     22 45 E2 F8 | 	getbyte	local16, local16, #0
2e3c4     04 44 CE F7 | 	test	local16, #4 wz
2e3c8     1F 3F E2 58 |  if_ne	getbyte	local13, local13, #0
2e3cc     08 3E 46 55 |  if_ne	or	local13, #8
2e3d0                 | LR__4616
2e3d0     2B 26 06 F1 | 	add	local01, #43
2e3d4     13 3F 42 FC | 	wrbyte	local13, local01
2e3d8                 | ' 	}
2e3d8                 | ' 
2e3d8                 | ' 	dp->fn[ 11 ] = cf;
2e3d8                 | ' 
2e3d8                 | ' 	return FR_OK;
2e3d8     00 FA 05 F6 | 	mov	result1, #0
2e3dc                 | LR__4617
2e3dc     A7 F0 03 F6 | 	mov	ptra, fp
2e3e0     B2 00 A0 FD | 	call	#popregs_
2e3e4                 | _fatfs_cc_create_name_ret
2e3e4     2D 00 64 FD | 	ret
2e3e8                 | 
2e3e8                 | _fatfs_cc_follow_path
2e3e8     07 4A 05 F6 | 	mov	COUNT_, #7
2e3ec     A8 00 A0 FD | 	call	#pushregs_
2e3f0     18 F0 07 F1 | 	add	ptra, #24
2e3f4     09 27 02 F6 | 	mov	local01, arg01
2e3f8     08 4E 05 F1 | 	add	fp, #8
2e3fc     A7 14 62 FC | 	wrlong	arg02, fp
2e400     08 4E 85 F1 | 	sub	fp, #8
2e404     13 29 02 FB | 	rdlong	local02, local01
2e408     97 20 48 FB | 	callpa	#(@LR__4621-@LR__4620)>>2,fcache_load_ptr_
2e40c                 | ' )
2e40c                 | ' {
2e40c                 | ' 	FRESULT res;
2e40c                 | ' 	BYTE ns;
2e40c                 | ' 	FATFS *fs = dp->obj.fs;
2e40c                 | ' #line 3034 "ff.c"
2e40c                 | ' 	{
2e40c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2e40c                 | LR__4620
2e40c     08 4E 05 F1 | 	add	fp, #8
2e410     A7 FA 01 FB | 	rdlong	result1, fp
2e414     08 4E 85 F1 | 	sub	fp, #8
2e418     FD FA C1 FA | 	rdbyte	result1, result1
2e41c     2F FA 0D F2 | 	cmp	result1, #47 wz
2e420     08 4E 05 51 |  if_ne	add	fp, #8
2e424     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2e428     08 4E 85 51 |  if_ne	sub	fp, #8
2e42c     15 2D C2 5A |  if_ne	rdbyte	local04, local03
2e430     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2e434     08 4E 05 A1 |  if_e	add	fp, #8
2e438     A7 2E 02 AB |  if_e	rdlong	local05, fp
2e43c     01 2E 06 A1 |  if_e	add	local05, #1
2e440     A7 2E 62 AC |  if_e	wrlong	local05, fp
2e444     08 4E 85 A1 |  if_e	sub	fp, #8
2e448     C0 FF 9F AD |  if_e	jmp	#LR__4620
2e44c                 | LR__4621
2e44c     08 26 06 F1 | 	add	local01, #8
2e450     13 01 68 FC | 	wrlong	#0, local01
2e454     08 26 86 F1 | 	sub	local01, #8
2e458     08 4E 05 F1 | 	add	fp, #8
2e45c     A7 2E 02 FB | 	rdlong	local05, fp
2e460     08 4E 85 F1 | 	sub	fp, #8
2e464     17 2F C2 FA | 	rdbyte	local05, local05
2e468     20 2E 16 F2 | 	cmp	local05, #32 wc
2e46c     20 00 90 3D |  if_ae	jmp	#LR__4622
2e470     2B 26 06 F1 | 	add	local01, #43
2e474     13 01 49 FC | 	wrbyte	#128, local01
2e478     2B 26 86 F1 | 	sub	local01, #43
2e47c     13 13 02 F6 | 	mov	arg01, local01
2e480     00 14 06 F6 | 	mov	arg02, #0
2e484     C4 E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2e488     FD 30 02 F6 | 	mov	local06, result1
2e48c     A0 00 90 FD | 	jmp	#LR__4626
2e490                 | LR__4622
2e490                 | ' 		for (;;) {
2e490                 | LR__4623
2e490     A7 14 02 F6 | 	mov	arg02, fp
2e494     08 14 06 F1 | 	add	arg02, #8
2e498     13 13 02 F6 | 	mov	arg01, local01
2e49c     74 FA BF FD | 	call	#_fatfs_cc_create_name
2e4a0     FD 30 0A F6 | 	mov	local06, result1 wz
2e4a4     88 00 90 5D |  if_ne	jmp	#LR__4625
2e4a8     13 13 02 F6 | 	mov	arg01, local01
2e4ac     24 F1 BF FD | 	call	#_fatfs_cc_dir_find
2e4b0     FD 30 0A F6 | 	mov	local06, result1 wz
2e4b4     2B 26 06 F1 | 	add	local01, #43
2e4b8     13 33 C2 FA | 	rdbyte	local07, local01
2e4bc     2B 26 86 F1 | 	sub	local01, #43
2e4c0     18 00 90 AD |  if_e	jmp	#LR__4624
2e4c4     04 30 0E F2 | 	cmp	local06, #4 wz
2e4c8     64 00 90 5D |  if_ne	jmp	#LR__4625
2e4cc     19 33 E2 F8 | 	getbyte	local07, local07, #0
2e4d0     04 32 CE F7 | 	test	local07, #4 wz
2e4d4     05 30 06 A6 |  if_e	mov	local06, #5
2e4d8                 | ' 					}
2e4d8                 | ' 				}
2e4d8                 | ' 				break;
2e4d8     54 00 90 FD | 	jmp	#LR__4625
2e4dc                 | LR__4624
2e4dc     19 33 E2 F8 | 	getbyte	local07, local07, #0
2e4e0     04 32 CE F7 | 	test	local07, #4 wz
2e4e4     48 00 90 5D |  if_ne	jmp	#LR__4625
2e4e8     06 26 06 F1 | 	add	local01, #6
2e4ec     13 33 C2 FA | 	rdbyte	local07, local01
2e4f0     06 26 86 F1 | 	sub	local01, #6
2e4f4     10 32 CE F7 | 	test	local07, #16 wz
2e4f8     05 30 06 A6 |  if_e	mov	local06, #5
2e4fc                 | ' 				res = FR_NO_PATH; break;
2e4fc     30 00 90 AD |  if_e	jmp	#LR__4625
2e500     14 13 02 F6 | 	mov	arg01, local02
2e504     14 15 02 F6 | 	mov	arg02, local02
2e508     34 14 06 F1 | 	add	arg02, #52
2e50c     10 26 06 F1 | 	add	local01, #16
2e510     13 33 02 FB | 	rdlong	local07, local01
2e514     FF 33 06 F5 | 	and	local07, #511
2e518     19 15 02 F1 | 	add	arg02, local07
2e51c     00 EA BF FD | 	call	#_fatfs_cc_ld_clust
2e520     08 26 86 F1 | 	sub	local01, #8
2e524     13 FB 61 FC | 	wrlong	result1, local01
2e528     08 26 86 F1 | 	sub	local01, #8
2e52c     60 FF 9F FD | 	jmp	#LR__4623
2e530                 | LR__4625
2e530                 | LR__4626
2e530                 | ' 			}
2e530                 | ' #line 3090 "ff.c"
2e530                 | ' 			{
2e530                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2e530                 | ' 			}
2e530                 | ' 		}
2e530                 | ' 	}
2e530                 | ' 
2e530                 | ' 	return res;
2e530     18 FB 01 F6 | 	mov	result1, local06
2e534     A7 F0 03 F6 | 	mov	ptra, fp
2e538     B2 00 A0 FD | 	call	#popregs_
2e53c                 | _fatfs_cc_follow_path_ret
2e53c     2D 00 64 FD | 	ret
2e540                 | 
2e540                 | _fatfs_cc_get_ldnumber
2e540     01 00 66 F6 | 	neg	_var01, #1
2e544     09 03 0A FB | 	rdlong	_var02, arg01 wz
2e548     01 05 02 F6 | 	mov	_var03, _var02
2e54c     01 FA 65 A6 |  if_e	neg	result1, #1
2e550     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2e554     97 10 48 FB | 	callpa	#(@LR__4631-@LR__4630)>>2,fcache_load_ptr_
2e558                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2e558                 | LR__4630
2e558     02 07 C2 FA | 	rdbyte	_var04, _var03
2e55c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2e560     20 FA 15 F2 | 	cmp	result1, #32 wc
2e564     01 04 06 F1 | 	add	_var03, #1
2e568     03 09 02 36 |  if_ae	mov	_var05, _var04
2e56c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2e570     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2e574     E0 FF 9F 1D |  if_a	jmp	#LR__4630
2e578                 | LR__4631
2e578     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2e57c     3A 06 0E F2 | 	cmp	_var04, #58 wz
2e580     40 00 90 5D |  if_ne	jmp	#LR__4633
2e584     01 0A 06 F6 | 	mov	_var06, #1
2e588     01 09 C2 FA | 	rdbyte	_var05, _var02
2e58c     30 08 16 F2 | 	cmp	_var05, #48 wc
2e590     1C 00 90 CD |  if_b	jmp	#LR__4632
2e594     01 09 C2 FA | 	rdbyte	_var05, _var02
2e598     3A 08 16 F2 | 	cmp	_var05, #58 wc
2e59c     01 0D 02 C6 |  if_b	mov	_var07, _var02
2e5a0     02 0C 06 C1 |  if_b	add	_var07, #2
2e5a4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2e5a8     04 0B 02 86 |  if_c_and_z	mov	_var06, _var05
2e5ac     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2e5b0                 | LR__4632
2e5b0     01 0A 56 F2 | 	cmps	_var06, #1 wc
2e5b4     05 01 02 C6 |  if_b	mov	_var01, _var06
2e5b8     09 05 62 CC |  if_b	wrlong	_var03, arg01
2e5bc                 | ' 			vol = i;
2e5bc                 | ' 			*path = tt;
2e5bc                 | ' 		}
2e5bc                 | ' 		return vol;
2e5bc     00 FB 01 F6 | 	mov	result1, _var01
2e5c0     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2e5c4                 | LR__4633
2e5c4                 | ' 	}
2e5c4                 | ' #line 3170 "ff.c"
2e5c4                 | ' 	vol = 0;
2e5c4                 | ' 
2e5c4                 | ' 	return vol;
2e5c4     00 FA 05 F6 | 	mov	result1, #0
2e5c8                 | _fatfs_cc_get_ldnumber_ret
2e5c8     2D 00 64 FD | 	ret
2e5cc                 | 
2e5cc                 | _fatfs_cc_check_fs
2e5cc     04 4A 05 F6 | 	mov	COUNT_, #4
2e5d0     A8 00 A0 FD | 	call	#pushregs_
2e5d4     09 27 02 F6 | 	mov	local01, arg01
2e5d8     03 26 06 F1 | 	add	local01, #3
2e5dc     13 01 48 FC | 	wrbyte	#0, local01
2e5e0     2D 26 06 F1 | 	add	local01, #45
2e5e4     FF FF FF FF 
2e5e8     13 FF 6B FC | 	wrlong	##-1, local01
2e5ec     30 26 86 F1 | 	sub	local01, #48
2e5f0     13 13 02 F6 | 	mov	arg01, local01
2e5f4     F8 DB BF FD | 	call	#_fatfs_cc_move_window
2e5f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5fc     04 FA 05 56 |  if_ne	mov	result1, #4
2e600     60 01 90 5D |  if_ne	jmp	#LR__4643
2e604     34 26 06 F1 | 	add	local01, #52
2e608     13 13 02 F6 | 	mov	arg01, local01
2e60c     FE 13 06 F1 | 	add	arg01, #510
2e610                 | ' {
2e610                 | ' 
2e610                 | ' 	return *((WORD*)ptr);
2e610     09 29 E2 FA | 	rdword	local02, arg01
2e614     13 2B C2 FA | 	rdbyte	local03, local01
2e618     34 26 86 F1 | 	sub	local01, #52
2e61c     15 2D E2 F8 | 	getbyte	local04, local03, #0
2e620     EB 2C 0E F2 | 	cmp	local04, #235 wz
2e624     15 17 02 56 |  if_ne	mov	arg03, local03
2e628     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2e62c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2e630     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2e634     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2e638     10 01 90 5D |  if_ne	jmp	#LR__4642
2e63c     14 2D 32 F9 | 	getword	local04, local02, #0
2e640     55 00 00 FF 
2e644     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2e648     24 00 90 5D |  if_ne	jmp	#LR__4640
2e64c     13 13 02 F6 | 	mov	arg01, local01
2e650     86 12 06 F1 | 	add	arg01, #134
2e654     8D 01 00 FF 
2e658     A3 15 06 F6 | 	mov	arg02, ##@LR__5085
2e65c     08 16 06 F6 | 	mov	arg03, #8
2e660     54 D0 BF FD | 	call	#_fatfs_cc_memcmp
2e664     00 FA 0D F2 | 	cmp	result1, #0 wz
2e668                 | ' 			return 0;
2e668     00 FA 05 A6 |  if_e	mov	result1, #0
2e66c     F4 00 90 AD |  if_e	jmp	#LR__4643
2e670                 | LR__4640
2e670     34 26 06 F1 | 	add	local01, #52
2e674     13 13 02 F6 | 	mov	arg01, local01
2e678     0B 12 06 F1 | 	add	arg01, #11
2e67c                 | ' {
2e67c                 | ' 
2e67c                 | ' 	return *((WORD*)ptr);
2e67c     09 FB E1 FA | 	rdword	result1, arg01
2e680     0D 26 06 F1 | 	add	local01, #13
2e684     13 2B C2 FA | 	rdbyte	local03, local01
2e688     41 26 86 F1 | 	sub	local01, #65
2e68c     FD 2C 32 F9 | 	getword	local04, result1, #0
2e690     FD 14 32 F9 | 	getword	arg02, result1, #0
2e694     01 14 86 F1 | 	sub	arg02, #1
2e698     0A 2D CA F7 | 	test	local04, arg02 wz
2e69c     AC 00 90 5D |  if_ne	jmp	#LR__4641
2e6a0     FD 14 32 F9 | 	getword	arg02, result1, #0
2e6a4     01 00 00 FF 
2e6a8     00 14 16 F2 | 	cmp	arg02, ##512 wc
2e6ac     9C 00 90 CD |  if_b	jmp	#LR__4641
2e6b0     FD 14 32 F9 | 	getword	arg02, result1, #0
2e6b4     01 00 00 FF 
2e6b8     01 14 16 F2 | 	cmp	arg02, ##513 wc
2e6bc     8C 00 90 3D |  if_ae	jmp	#LR__4641
2e6c0     15 13 02 F6 | 	mov	arg01, local03
2e6c4     07 12 4E F7 | 	zerox	arg01, #7 wz
2e6c8     80 00 90 AD |  if_e	jmp	#LR__4641
2e6cc     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2e6d0     15 2B E2 F8 | 	getbyte	local03, local03, #0
2e6d4     01 2A 86 F1 | 	sub	local03, #1
2e6d8     15 13 CA F7 | 	test	arg01, local03 wz
2e6dc     6C 00 90 5D |  if_ne	jmp	#LR__4641
2e6e0     13 13 02 F6 | 	mov	arg01, local01
2e6e4     42 12 06 F1 | 	add	arg01, #66
2e6e8                 | ' {
2e6e8                 | ' 
2e6e8                 | ' 	return *((WORD*)ptr);
2e6e8     09 FB E9 FA | 	rdword	result1, arg01 wz
2e6ec     44 26 06 51 |  if_ne	add	local01, #68
2e6f0     13 13 C2 5A |  if_ne	rdbyte	arg01, local01
2e6f4     44 26 86 51 |  if_ne	sub	local01, #68
2e6f8     01 12 86 51 |  if_ne	sub	arg01, #1
2e6fc     02 12 16 52 |  if_ne	cmp	arg01, #2 wc
2e700     48 00 90 1D |  if_a	jmp	#LR__4641
2e704     13 13 02 56 |  if_ne	mov	arg01, local01
2e708     45 12 06 51 |  if_ne	add	arg01, #69
2e70c                 | ' {
2e70c                 | ' 
2e70c                 | ' 	return *((WORD*)ptr);
2e70c     09 FB E9 5A |  if_ne	rdword	result1, arg01 wz
2e710     38 00 90 AD |  if_e	jmp	#LR__4641
2e714     13 13 02 F6 | 	mov	arg01, local01
2e718     47 12 06 F1 | 	add	arg01, #71
2e71c                 | ' {
2e71c                 | ' 
2e71c                 | ' 	return *((WORD*)ptr);
2e71c     09 FB E1 FA | 	rdword	result1, arg01
2e720     FD 2A 32 F9 | 	getword	local03, result1, #0
2e724     80 2A 16 F2 | 	cmp	local03, #128 wc
2e728     13 13 02 C6 |  if_b	mov	arg01, local01
2e72c     54 12 06 C1 |  if_b	add	arg01, #84
2e730                 | ' {
2e730                 | ' 
2e730                 | ' 	return *((DWORD*)ptr);
2e730     09 FB 01 CB |  if_b	rdlong	result1, arg01
2e734     80 00 00 CF 
2e738     00 FA 15 C2 |  if_b	cmp	result1, ##65536 wc
2e73c     4A 26 06 31 |  if_ae	add	local01, #74
2e740                 | ' {
2e740                 | ' 
2e740                 | ' 	return *((WORD*)ptr);
2e740     13 FB E9 3A |  if_ae	rdword	result1, local01 wz
2e744                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2e744                 | ' 			&& ld_word(fs->win +  14 ) != 0
2e744                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2e744                 | ' 			&& ld_word(fs->win +  17 ) != 0
2e744                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2e744                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2e744                 | ' 				return 0;
2e744     00 FA 05 16 |  if_a	mov	result1, #0
2e748     18 00 90 1D |  if_a	jmp	#LR__4643
2e74c                 | LR__4641
2e74c                 | LR__4642
2e74c                 | ' 		}
2e74c                 | ' 	}
2e74c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2e74c     14 2B 32 F9 | 	getword	local03, local02, #0
2e750     55 00 00 FF 
2e754     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2e758     02 2C 06 A6 |  if_e	mov	local04, #2
2e75c     03 2C 06 56 |  if_ne	mov	local04, #3
2e760     16 FB 01 F6 | 	mov	result1, local04
2e764                 | LR__4643
2e764     A7 F0 03 F6 | 	mov	ptra, fp
2e768     B2 00 A0 FD | 	call	#popregs_
2e76c                 | _fatfs_cc_check_fs_ret
2e76c     2D 00 64 FD | 	ret
2e770                 | 
2e770                 | _fatfs_cc_find_volume
2e770     05 4A 05 F6 | 	mov	COUNT_, #5
2e774     A8 00 A0 FD | 	call	#pushregs_
2e778     24 F0 07 F1 | 	add	ptra, #36
2e77c     09 27 02 F6 | 	mov	local01, arg01
2e780     0A 29 02 F6 | 	mov	local02, arg02
2e784     13 13 02 F6 | 	mov	arg01, local01
2e788     00 14 06 F6 | 	mov	arg02, #0
2e78c     3C FE BF FD | 	call	#_fatfs_cc_check_fs
2e790     02 FA 0D F2 | 	cmp	result1, #2 wz
2e794     0C 00 90 AD |  if_e	jmp	#LR__4650
2e798     03 FA 15 F2 | 	cmp	result1, #3 wc
2e79c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2e7a0     C8 00 90 BD |  if_nc_or_z	jmp	#LR__4658
2e7a4                 | LR__4650
2e7a4                 | ' 	for (i = 0; i < 4; i++) {
2e7a4     00 2A 06 F6 | 	mov	local03, #0
2e7a8     97 22 48 FB | 	callpa	#(@LR__4652-@LR__4651)>>2,fcache_load_ptr_
2e7ac                 | LR__4651
2e7ac     04 2A 16 F2 | 	cmp	local03, #4 wc
2e7b0     3C 00 90 3D |  if_ae	jmp	#LR__4653
2e7b4     15 2D 02 F6 | 	mov	local04, local03
2e7b8     02 2C 66 F0 | 	shl	local04, #2
2e7bc     A7 14 02 F6 | 	mov	arg02, fp
2e7c0     14 14 06 F1 | 	add	arg02, #20
2e7c4     0A 2D 02 F1 | 	add	local04, arg02
2e7c8     13 13 02 F6 | 	mov	arg01, local01
2e7cc     F2 13 06 F1 | 	add	arg01, #498
2e7d0     15 15 02 F6 | 	mov	arg02, local03
2e7d4     04 14 66 F0 | 	shl	arg02, #4
2e7d8     0A 13 02 F1 | 	add	arg01, arg02
2e7dc     08 12 06 F1 | 	add	arg01, #8
2e7e0                 | ' {
2e7e0                 | ' 
2e7e0                 | ' 	return *((DWORD*)ptr);
2e7e0     09 FB 01 FB | 	rdlong	result1, arg01
2e7e4     16 FB 61 FC | 	wrlong	result1, local04
2e7e8     01 2A 06 F1 | 	add	local03, #1
2e7ec     BC FF 9F FD | 	jmp	#LR__4651
2e7f0                 | LR__4652
2e7f0                 | LR__4653
2e7f0     00 28 0E F2 | 	cmp	local02, #0 wz
2e7f4     14 2D 02 56 |  if_ne	mov	local04, local02
2e7f8     01 2C 86 51 |  if_ne	sub	local04, #1
2e7fc     00 2C 06 A6 |  if_e	mov	local04, #0
2e800     16 2B 02 F6 | 	mov	local03, local04
2e804                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2e804                 | ' 	}
2e804                 | ' 	i = part ? part - 1 : 0;
2e804                 | ' 	do {
2e804                 | LR__4654
2e804     15 2D 02 F6 | 	mov	local04, local03
2e808     02 2C 66 F0 | 	shl	local04, #2
2e80c     A7 14 02 F6 | 	mov	arg02, fp
2e810     14 14 06 F1 | 	add	arg02, #20
2e814     0A 2D 02 F1 | 	add	local04, arg02
2e818     16 2D 0A FB | 	rdlong	local04, local04 wz
2e81c     28 00 90 AD |  if_e	jmp	#LR__4655
2e820     15 2D 02 F6 | 	mov	local04, local03
2e824     02 2C 66 F0 | 	shl	local04, #2
2e828     A7 14 02 F6 | 	mov	arg02, fp
2e82c     14 14 06 F1 | 	add	arg02, #20
2e830     0A 2D 02 F1 | 	add	local04, arg02
2e834     16 15 02 FB | 	rdlong	arg02, local04
2e838     13 13 02 F6 | 	mov	arg01, local01
2e83c     8C FD BF FD | 	call	#_fatfs_cc_check_fs
2e840     FD 2C 02 F6 | 	mov	local04, result1
2e844     04 00 90 FD | 	jmp	#LR__4656
2e848                 | LR__4655
2e848     03 2C 06 F6 | 	mov	local04, #3
2e84c                 | LR__4656
2e84c     16 2F 02 F6 | 	mov	local05, local04
2e850     00 28 0E F2 | 	cmp	local02, #0 wz
2e854     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2e858     0C 00 90 8D |  if_c_and_z	jmp	#LR__4657
2e85c     01 2A 06 A1 |  if_e	add	local03, #1
2e860     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2e864     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4654
2e868                 | LR__4657
2e868                 | ' 	return fmt;
2e868     17 FB 01 F6 | 	mov	result1, local05
2e86c                 | LR__4658
2e86c     A7 F0 03 F6 | 	mov	ptra, fp
2e870     B2 00 A0 FD | 	call	#popregs_
2e874                 | _fatfs_cc_find_volume_ret
2e874     2D 00 64 FD | 	ret
2e878                 | 
2e878                 | _fatfs_cc_mount_volume
2e878     0B 4A 05 F6 | 	mov	COUNT_, #11
2e87c     A8 00 A0 FD | 	call	#pushregs_
2e880     0B 27 02 F6 | 	mov	local01, arg03
2e884     0A 01 68 FC | 	wrlong	#0, arg02
2e888     B4 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2e88c     FD 28 02 F6 | 	mov	local02, result1
2e890     00 28 56 F2 | 	cmps	local02, #0 wc
2e894     0B FA 05 C6 |  if_b	mov	result1, #11
2e898     F4 04 90 CD |  if_b	jmp	#LR__4668
2e89c     14 13 02 F6 | 	mov	arg01, local02
2e8a0     02 12 66 F0 | 	shl	arg01, #2
2e8a4     F2 12 02 F1 | 	add	arg01, objptr
2e8a8     09 2B 0A FB | 	rdlong	local03, arg01 wz
2e8ac     0C FA 05 A6 |  if_e	mov	result1, #12
2e8b0     DC 04 90 AD |  if_e	jmp	#LR__4668
2e8b4     0A 2B 62 FC | 	wrlong	local03, arg02
2e8b8     13 27 E2 F8 | 	getbyte	local01, local01, #0
2e8bc     FE 26 06 F5 | 	and	local01, #254
2e8c0     15 13 CA FA | 	rdbyte	arg01, local03 wz
2e8c4     44 00 90 AD |  if_e	jmp	#LR__4661
2e8c8     01 00 00 FF 
2e8cc     10 E4 05 F1 | 	add	objptr, ##528
2e8d0     F2 12 0A FB | 	rdlong	arg01, objptr wz
2e8d4     01 00 00 FF 
2e8d8     10 E4 85 F1 | 	sub	objptr, ##528
2e8dc                 | '         return RES_NOTRDY;
2e8dc     03 FA 05 A6 |  if_e	mov	result1, #3
2e8e0                 | '     }
2e8e0                 | '     return RES_OK;
2e8e0     00 FA 05 56 |  if_ne	mov	result1, #0
2e8e4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
2e8e8     01 12 CE F7 | 	test	arg01, #1 wz
2e8ec     1C 00 90 5D |  if_ne	jmp	#LR__4660
2e8f0     00 26 0E F2 | 	cmp	local01, #0 wz
2e8f4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2e8f8     04 FA CD 57 |  if_ne	test	result1, #4 wz
2e8fc                 | ' 				return FR_WRITE_PROTECTED;
2e8fc     0A FA 05 56 |  if_ne	mov	result1, #10
2e900     8C 04 90 5D |  if_ne	jmp	#LR__4668
2e904                 | ' 			}
2e904                 | ' 			return FR_OK;
2e904     00 FA 05 F6 | 	mov	result1, #0
2e908     84 04 90 FD | 	jmp	#LR__4668
2e90c                 | LR__4660
2e90c                 | LR__4661
2e90c     15 01 48 FC | 	wrbyte	#0, local03
2e910     01 2A 06 F1 | 	add	local03, #1
2e914     15 29 42 FC | 	wrbyte	local02, local03
2e918     01 2A 86 F1 | 	sub	local03, #1
2e91c     01 00 00 FF 
2e920     10 E4 05 F1 | 	add	objptr, ##528
2e924     F2 28 0A FB | 	rdlong	local02, objptr wz
2e928     01 00 00 FF 
2e92c     10 E4 85 F1 | 	sub	objptr, ##528
2e930                 | ' 
2e930                 | '         return RES_NOTRDY;
2e930     03 FA 05 A6 |  if_e	mov	result1, #3
2e934                 | '     }
2e934                 | '     return RES_OK;
2e934     00 FA 05 56 |  if_ne	mov	result1, #0
2e938     FD 12 02 F6 | 	mov	arg01, result1
2e93c     09 29 E2 F8 | 	getbyte	local02, arg01, #0
2e940     01 28 CE F7 | 	test	local02, #1 wz
2e944                 | ' 		return FR_NOT_READY;
2e944     03 FA 05 56 |  if_ne	mov	result1, #3
2e948     44 04 90 5D |  if_ne	jmp	#LR__4668
2e94c     00 26 0E F2 | 	cmp	local01, #0 wz
2e950     09 13 E2 58 |  if_ne	getbyte	arg01, arg01, #0
2e954     04 12 CE 57 |  if_ne	test	arg01, #4 wz
2e958                 | ' 		return FR_WRITE_PROTECTED;
2e958     0A FA 05 56 |  if_ne	mov	result1, #10
2e95c     30 04 90 5D |  if_ne	jmp	#LR__4668
2e960     15 13 02 F6 | 	mov	arg01, local03
2e964     00 14 06 F6 | 	mov	arg02, #0
2e968     04 FE BF FD | 	call	#_fatfs_cc_find_volume
2e96c     FD 12 02 F6 | 	mov	arg01, result1
2e970     04 12 0E F2 | 	cmp	arg01, #4 wz
2e974     01 FA 05 A6 |  if_e	mov	result1, #1
2e978     14 04 90 AD |  if_e	jmp	#LR__4668
2e97c     02 12 16 F2 | 	cmp	arg01, #2 wc
2e980     0D FA 05 36 |  if_ae	mov	result1, #13
2e984     08 04 90 3D |  if_ae	jmp	#LR__4668
2e988     30 2A 06 F1 | 	add	local03, #48
2e98c     15 2D 02 FB | 	rdlong	local04, local03
2e990     04 2A 06 F1 | 	add	local03, #4
2e994     15 13 02 F6 | 	mov	arg01, local03
2e998     34 2A 86 F1 | 	sub	local03, #52
2e99c     0B 12 06 F1 | 	add	arg01, #11
2e9a0                 | ' {
2e9a0                 | ' 
2e9a0                 | ' 	return *((WORD*)ptr);
2e9a0     09 FB E1 FA | 	rdword	result1, arg01
2e9a4     01 00 00 FF 
2e9a8     00 FA 0D F2 | 	cmp	result1, ##512 wz
2e9ac     0D FA 05 56 |  if_ne	mov	result1, #13
2e9b0     DC 03 90 5D |  if_ne	jmp	#LR__4668
2e9b4     15 13 02 F6 | 	mov	arg01, local03
2e9b8     4A 12 06 F1 | 	add	arg01, #74
2e9bc                 | ' {
2e9bc                 | ' 
2e9bc                 | ' 	return *((WORD*)ptr);
2e9bc     09 FB E1 FA | 	rdword	result1, arg01
2e9c0     FD 2E 0A F6 | 	mov	local05, result1 wz
2e9c4     15 13 02 A6 |  if_e	mov	arg01, local03
2e9c8     58 12 06 A1 |  if_e	add	arg01, #88
2e9cc                 | ' {
2e9cc                 | ' 
2e9cc                 | ' 	return *((DWORD*)ptr);
2e9cc     09 FB 01 AB |  if_e	rdlong	result1, arg01
2e9d0     FD 2E 02 A6 |  if_e	mov	local05, result1
2e9d4     1C 2A 06 F1 | 	add	local03, #28
2e9d8     15 2F 62 FC | 	wrlong	local05, local03
2e9dc     28 2A 06 F1 | 	add	local03, #40
2e9e0     15 31 C2 FA | 	rdbyte	local06, local03
2e9e4     42 2A 86 F1 | 	sub	local03, #66
2e9e8     15 31 42 FC | 	wrbyte	local06, local03
2e9ec     18 31 E2 F8 | 	getbyte	local06, local06, #0
2e9f0     02 2A 86 F1 | 	sub	local03, #2
2e9f4     01 30 0E F2 | 	cmp	local06, #1 wz
2e9f8     02 2A 06 51 |  if_ne	add	local03, #2
2e9fc     15 31 C2 5A |  if_ne	rdbyte	local06, local03
2ea00     02 2A 86 51 |  if_ne	sub	local03, #2
2ea04     02 30 0E 52 |  if_ne	cmp	local06, #2 wz
2ea08     0D FA 05 56 |  if_ne	mov	result1, #13
2ea0c     80 03 90 5D |  if_ne	jmp	#LR__4668
2ea10     02 2A 06 F1 | 	add	local03, #2
2ea14     15 31 C2 FA | 	rdbyte	local06, local03
2ea18     18 2F 02 FD | 	qmul	local05, local06
2ea1c     3F 2A 06 F1 | 	add	local03, #63
2ea20     15 31 C2 FA | 	rdbyte	local06, local03
2ea24     37 2A 86 F1 | 	sub	local03, #55
2ea28     15 31 52 FC | 	wrword	local06, local03
2ea2c     18 31 32 F9 | 	getword	local06, local06, #0
2ea30     0A 2A 86 F1 | 	sub	local03, #10
2ea34     0F 30 4E F7 | 	zerox	local06, #15 wz
2ea38     18 2E 62 FD | 	getqx	local05
2ea3c     20 00 90 AD |  if_e	jmp	#LR__4662
2ea40     0A 2A 06 F1 | 	add	local03, #10
2ea44     15 31 E2 FA | 	rdword	local06, local03
2ea48     18 29 32 F9 | 	getword	local02, local06, #0
2ea4c     0A 2A 86 F1 | 	sub	local03, #10
2ea50     18 31 32 F9 | 	getword	local06, local06, #0
2ea54     01 30 86 F1 | 	sub	local06, #1
2ea58     18 29 CA F7 | 	test	local02, local06 wz
2ea5c     08 00 90 AD |  if_e	jmp	#LR__4663
2ea60                 | LR__4662
2ea60     0D FA 05 F6 | 	mov	result1, #13
2ea64     28 03 90 FD | 	jmp	#LR__4668
2ea68                 | LR__4663
2ea68     34 2A 06 F1 | 	add	local03, #52
2ea6c     15 13 02 F6 | 	mov	arg01, local03
2ea70     11 12 06 F1 | 	add	arg01, #17
2ea74                 | ' {
2ea74                 | ' 
2ea74                 | ' 	return *((WORD*)ptr);
2ea74     09 FB E1 FA | 	rdword	result1, arg01
2ea78     2C 2A 86 F1 | 	sub	local03, #44
2ea7c     15 FB 51 FC | 	wrword	result1, local03
2ea80     FD 30 32 F9 | 	getword	local06, result1, #0
2ea84     08 2A 86 F1 | 	sub	local03, #8
2ea88     18 13 52 F6 | 	abs	arg01, local06 wc
2ea8c     09 13 42 F8 | 	getnib	arg01, arg01, #0
2ea90     09 13 8A F6 | 	negc	arg01, arg01 wz
2ea94     0D FA 05 56 |  if_ne	mov	result1, #13
2ea98     F4 02 90 5D |  if_ne	jmp	#LR__4668
2ea9c     15 13 02 F6 | 	mov	arg01, local03
2eaa0     47 12 06 F1 | 	add	arg01, #71
2eaa4                 | ' {
2eaa4                 | ' 
2eaa4                 | ' 	return *((WORD*)ptr);
2eaa4     09 FB E1 FA | 	rdword	result1, arg01
2eaa8     FD 32 0A F6 | 	mov	local07, result1 wz
2eaac     15 13 02 A6 |  if_e	mov	arg01, local03
2eab0     54 12 06 A1 |  if_e	add	arg01, #84
2eab4                 | ' {
2eab4                 | ' 
2eab4                 | ' 	return *((DWORD*)ptr);
2eab4     09 33 02 AB |  if_e	rdlong	local07, arg01
2eab8     15 13 02 F6 | 	mov	arg01, local03
2eabc     42 12 06 F1 | 	add	arg01, #66
2eac0                 | ' {
2eac0                 | ' 
2eac0                 | ' 	return *((WORD*)ptr);
2eac0     09 FB E1 FA | 	rdword	result1, arg01
2eac4     FD 12 02 F6 | 	mov	arg01, result1
2eac8     09 31 02 F6 | 	mov	local06, arg01
2eacc     0F 30 4E F7 | 	zerox	local06, #15 wz
2ead0     0D FA 05 A6 |  if_e	mov	result1, #13
2ead4     B8 02 90 AD |  if_e	jmp	#LR__4668
2ead8     09 35 32 F9 | 	getword	local08, arg01, #0
2eadc     17 35 02 F1 | 	add	local08, local05
2eae0     08 2A 06 F1 | 	add	local03, #8
2eae4     15 31 E2 FA | 	rdword	local06, local03
2eae8     08 2A 86 F1 | 	sub	local03, #8
2eaec     18 31 52 F6 | 	abs	local06, local06 wc
2eaf0     04 30 46 F0 | 	shr	local06, #4
2eaf4     18 35 82 F3 | 	sumc	local08, local06
2eaf8     1A 33 12 F2 | 	cmp	local07, local08 wc
2eafc     0D FA 05 C6 |  if_b	mov	result1, #13
2eb00     8C 02 90 CD |  if_b	jmp	#LR__4668
2eb04     1A 33 82 F1 | 	sub	local07, local08
2eb08     0A 2A 06 F1 | 	add	local03, #10
2eb0c     15 31 E2 FA | 	rdword	local06, local03
2eb10     18 33 12 FD | 	qdiv	local07, local06
2eb14     0A 2A 86 F1 | 	sub	local03, #10
2eb18     18 30 62 FD | 	getqx	local06
2eb1c     00 30 0E F2 | 	cmp	local06, #0 wz
2eb20     0D FA 05 A6 |  if_e	mov	result1, #13
2eb24     68 02 90 AD |  if_e	jmp	#LR__4668
2eb28     00 36 06 F6 | 	mov	local09, #0
2eb2c     FF FF 07 FF 
2eb30     F6 31 16 F2 | 	cmp	local06, ##268435446 wc
2eb34     03 36 06 C6 |  if_b	mov	local09, #3
2eb38     7F 00 00 FF 
2eb3c     F6 31 16 F2 | 	cmp	local06, ##65526 wc
2eb40     02 36 06 C6 |  if_b	mov	local09, #2
2eb44     07 00 00 FF 
2eb48     F6 31 16 F2 | 	cmp	local06, ##4086 wc
2eb4c     01 36 06 C6 |  if_b	mov	local09, #1
2eb50     00 36 0E F2 | 	cmp	local09, #0 wz
2eb54     0D FA 05 A6 |  if_e	mov	result1, #13
2eb58     34 02 90 AD |  if_e	jmp	#LR__4668
2eb5c     02 30 06 F1 | 	add	local06, #2
2eb60     18 2A 06 F1 | 	add	local03, #24
2eb64     15 31 62 FC | 	wrlong	local06, local03
2eb68     08 2A 06 F1 | 	add	local03, #8
2eb6c     15 2D 62 FC | 	wrlong	local04, local03
2eb70     16 31 02 F6 | 	mov	local06, local04
2eb74     09 13 32 F9 | 	getword	arg01, arg01, #0
2eb78     09 31 02 F1 | 	add	local06, arg01
2eb7c     04 2A 06 F1 | 	add	local03, #4
2eb80     15 31 62 FC | 	wrlong	local06, local03
2eb84     16 31 02 F6 | 	mov	local06, local04
2eb88     1A 31 02 F1 | 	add	local06, local08
2eb8c     08 2A 06 F1 | 	add	local03, #8
2eb90     15 31 62 FC | 	wrlong	local06, local03
2eb94     2C 2A 86 F1 | 	sub	local03, #44
2eb98     03 36 0E F2 | 	cmp	local09, #3 wz
2eb9c     54 00 90 5D |  if_ne	jmp	#LR__4664
2eba0     15 13 02 F6 | 	mov	arg01, local03
2eba4     5E 12 06 F1 | 	add	arg01, #94
2eba8                 | ' {
2eba8                 | ' 
2eba8                 | ' 	return *((WORD*)ptr);
2eba8     09 FB E9 FA | 	rdword	result1, arg01 wz
2ebac     0D FA 05 56 |  if_ne	mov	result1, #13
2ebb0     DC 01 90 5D |  if_ne	jmp	#LR__4668
2ebb4     08 2A 06 F1 | 	add	local03, #8
2ebb8     15 31 EA FA | 	rdword	local06, local03 wz
2ebbc     08 2A 86 F1 | 	sub	local03, #8
2ebc0     0D FA 05 56 |  if_ne	mov	result1, #13
2ebc4     C8 01 90 5D |  if_ne	jmp	#LR__4668
2ebc8     34 2A 06 F1 | 	add	local03, #52
2ebcc     15 13 02 F6 | 	mov	arg01, local03
2ebd0     2C 12 06 F1 | 	add	arg01, #44
2ebd4                 | ' {
2ebd4                 | ' 
2ebd4                 | ' 	return *((DWORD*)ptr);
2ebd4     09 FB 01 FB | 	rdlong	result1, arg01
2ebd8     0C 2A 86 F1 | 	sub	local03, #12
2ebdc     15 FB 61 FC | 	wrlong	result1, local03
2ebe0     10 2A 86 F1 | 	sub	local03, #16
2ebe4     15 39 02 FB | 	rdlong	local10, local03
2ebe8     18 2A 86 F1 | 	sub	local03, #24
2ebec     02 38 66 F0 | 	shl	local10, #2
2ebf0     64 00 90 FD | 	jmp	#LR__4665
2ebf4                 | LR__4664
2ebf4     08 2A 06 F1 | 	add	local03, #8
2ebf8     15 31 EA FA | 	rdword	local06, local03 wz
2ebfc     08 2A 86 F1 | 	sub	local03, #8
2ec00     0D FA 05 A6 |  if_e	mov	result1, #13
2ec04     88 01 90 AD |  if_e	jmp	#LR__4668
2ec08     24 2A 06 F1 | 	add	local03, #36
2ec0c     15 39 02 FB | 	rdlong	local10, local03
2ec10     17 39 02 F1 | 	add	local10, local05
2ec14     04 2A 06 F1 | 	add	local03, #4
2ec18     15 39 62 FC | 	wrlong	local10, local03
2ec1c     28 2A 86 F1 | 	sub	local03, #40
2ec20     02 36 0E F2 | 	cmp	local09, #2 wz
2ec24     18 2A 06 A1 |  if_e	add	local03, #24
2ec28     15 39 02 AB |  if_e	rdlong	local10, local03
2ec2c     18 2A 86 A1 |  if_e	sub	local03, #24
2ec30     01 38 66 A0 |  if_e	shl	local10, #1
2ec34     18 2A 06 51 |  if_ne	add	local03, #24
2ec38     15 3B 02 5B |  if_ne	rdlong	local11, local03
2ec3c     1D 39 02 56 |  if_ne	mov	local10, local11
2ec40     01 38 66 50 |  if_ne	shl	local10, #1
2ec44     1D 39 02 51 |  if_ne	add	local10, local11
2ec48     01 38 46 50 |  if_ne	shr	local10, #1
2ec4c     18 2A 86 51 |  if_ne	sub	local03, #24
2ec50     01 3A 06 55 |  if_ne	and	local11, #1
2ec54     1D 39 02 51 |  if_ne	add	local10, local11
2ec58                 | LR__4665
2ec58     FF 39 06 F1 | 	add	local10, #511
2ec5c     09 38 46 F0 | 	shr	local10, #9
2ec60     1C 2A 06 F1 | 	add	local03, #28
2ec64     15 13 02 FB | 	rdlong	arg01, local03
2ec68     1C 2A 86 F1 | 	sub	local03, #28
2ec6c     1C 13 12 F2 | 	cmp	arg01, local10 wc
2ec70     0D FA 05 C6 |  if_b	mov	result1, #13
2ec74     18 01 90 CD |  if_b	jmp	#LR__4668
2ec78     14 2A 06 F1 | 	add	local03, #20
2ec7c     FF FF FF FF 
2ec80     15 FF 6B FC | 	wrlong	##-1, local03
2ec84     04 2A 86 F1 | 	sub	local03, #4
2ec88     FF FF FF FF 
2ec8c     15 FF 6B FC | 	wrlong	##-1, local03
2ec90     0C 2A 86 F1 | 	sub	local03, #12
2ec94     15 01 49 FC | 	wrbyte	#128, local03
2ec98     04 2A 86 F1 | 	sub	local03, #4
2ec9c     03 36 0E F2 | 	cmp	local09, #3 wz
2eca0     15 13 02 A6 |  if_e	mov	arg01, local03
2eca4     64 12 06 A1 |  if_e	add	arg01, #100
2eca8                 | ' {
2eca8                 | ' 
2eca8                 | ' 	return *((WORD*)ptr);
2eca8     09 FB E1 AA |  if_e	rdword	result1, arg01
2ecac     FD 30 32 A9 |  if_e	getword	local06, result1, #0
2ecb0     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2ecb4     A4 00 90 5D |  if_ne	jmp	#LR__4667
2ecb8     01 2C 06 F1 | 	add	local04, #1
2ecbc     15 13 02 F6 | 	mov	arg01, local03
2ecc0     16 15 02 F6 | 	mov	arg02, local04
2ecc4     28 D5 BF FD | 	call	#_fatfs_cc_move_window
2ecc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2eccc     8C 00 90 5D |  if_ne	jmp	#LR__4667
2ecd0     04 2A 06 F1 | 	add	local03, #4
2ecd4     15 01 48 FC | 	wrbyte	#0, local03
2ecd8     30 2A 06 F1 | 	add	local03, #48
2ecdc     15 13 02 F6 | 	mov	arg01, local03
2ece0     34 2A 86 F1 | 	sub	local03, #52
2ece4     FE 13 06 F1 | 	add	arg01, #510
2ece8                 | ' {
2ece8                 | ' 
2ece8                 | ' 	return *((WORD*)ptr);
2ece8     09 FB E1 FA | 	rdword	result1, arg01
2ecec     FD 30 32 F9 | 	getword	local06, result1, #0
2ecf0     55 00 00 FF 
2ecf4     55 30 0E F2 | 	cmp	local06, ##43605 wz
2ecf8     15 13 02 A6 |  if_e	mov	arg01, local03
2ecfc     34 12 06 A1 |  if_e	add	arg01, #52
2ed00                 | ' {
2ed00                 | ' 
2ed00                 | ' 	return *((DWORD*)ptr);
2ed00     09 FB 01 AB |  if_e	rdlong	result1, arg01
2ed04     A9 B0 20 AF 
2ed08     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2ed0c     15 13 02 A6 |  if_e	mov	arg01, local03
2ed10     01 00 00 AF 
2ed14     18 12 06 A1 |  if_e	add	arg01, ##536
2ed18                 | ' {
2ed18                 | ' 
2ed18                 | ' 	return *((DWORD*)ptr);
2ed18     09 FB 01 AB |  if_e	rdlong	result1, arg01
2ed1c     B9 A0 30 AF 
2ed20     72 FA 0D A2 |  if_e	cmp	result1, ##1631679090 wz
2ed24     34 00 90 5D |  if_ne	jmp	#LR__4666
2ed28     34 2A 06 F1 | 	add	local03, #52
2ed2c     15 13 02 F6 | 	mov	arg01, local03
2ed30     E8 13 06 F1 | 	add	arg01, #488
2ed34                 | ' {
2ed34                 | ' 
2ed34                 | ' 	return *((DWORD*)ptr);
2ed34     09 FB 01 FB | 	rdlong	result1, arg01
2ed38     20 2A 86 F1 | 	sub	local03, #32
2ed3c     15 FB 61 FC | 	wrlong	result1, local03
2ed40     20 2A 06 F1 | 	add	local03, #32
2ed44     15 13 02 F6 | 	mov	arg01, local03
2ed48     EC 13 06 F1 | 	add	arg01, #492
2ed4c                 | ' {
2ed4c                 | ' 
2ed4c                 | ' 	return *((DWORD*)ptr);
2ed4c     09 FB 01 FB | 	rdlong	result1, arg01
2ed50     24 2A 86 F1 | 	sub	local03, #36
2ed54     15 FB 61 FC | 	wrlong	result1, local03
2ed58     10 2A 86 F1 | 	sub	local03, #16
2ed5c                 | LR__4666
2ed5c                 | LR__4667
2ed5c     15 37 42 FC | 	wrbyte	local09, local03
2ed60     04 E4 05 F1 | 	add	objptr, #4
2ed64     F2 30 E2 FA | 	rdword	local06, objptr
2ed68     01 30 06 F1 | 	add	local06, #1
2ed6c     F2 30 52 FC | 	wrword	local06, objptr
2ed70     18 3B 32 F9 | 	getword	local11, local06, #0
2ed74     06 2A 06 F1 | 	add	local03, #6
2ed78     15 3B 52 FC | 	wrword	local11, local03
2ed7c     04 E4 05 F1 | 	add	objptr, #4
2ed80     06 2A 06 F1 | 	add	local03, #6
2ed84     15 E5 61 FC | 	wrlong	objptr, local03
2ed88                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2ed88                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2ed88                 | ' 			{
2ed88                 | ' 
2ed88                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2ed88                 | ' 
2ed88                 | ' 
2ed88                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2ed88                 | ' 
2ed88                 | ' 			}
2ed88                 | ' 		}
2ed88                 | ' 
2ed88                 | ' 
2ed88                 | ' 	}
2ed88                 | ' 
2ed88                 | ' 	fs->fs_type = (BYTE)fmt;
2ed88                 | ' 	fs->id = ++Fsid;
2ed88                 | ' 
2ed88                 | ' 	fs->lfnbuf = LfnBuf;
2ed88                 | ' #line 3567 "ff.c"
2ed88                 | ' 	return FR_OK;
2ed88     00 FA 05 F6 | 	mov	result1, #0
2ed8c     08 E4 85 F1 | 	sub	objptr, #8
2ed90                 | LR__4668
2ed90     A7 F0 03 F6 | 	mov	ptra, fp
2ed94     B2 00 A0 FD | 	call	#popregs_
2ed98                 | _fatfs_cc_mount_volume_ret
2ed98     2D 00 64 FD | 	ret
2ed9c                 | 
2ed9c                 | _fatfs_cc_validate
2ed9c     09 01 0A F6 | 	mov	_var01, arg01 wz
2eda0     09 02 06 F6 | 	mov	_var02, #9
2eda4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2eda8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2edac     48 00 90 AD |  if_e	jmp	#LR__4670
2edb0     04 00 06 F1 | 	add	_var01, #4
2edb4     00 07 E2 FA | 	rdword	_var04, _var01
2edb8     04 00 86 F1 | 	sub	_var01, #4
2edbc     00 13 02 FB | 	rdlong	arg01, _var01
2edc0     06 12 06 F1 | 	add	arg01, #6
2edc4     09 FB E1 FA | 	rdword	result1, arg01
2edc8     FD 06 0A F2 | 	cmp	_var04, result1 wz
2edcc     28 00 90 5D |  if_ne	jmp	#LR__4670
2edd0     01 00 00 FF 
2edd4     10 E4 05 F1 | 	add	objptr, ##528
2edd8     F2 06 0A FB | 	rdlong	_var04, objptr wz
2eddc     01 00 00 FF 
2ede0     10 E4 85 F1 | 	sub	objptr, ##528
2ede4                 | '         return RES_NOTRDY;
2ede4     03 FA 05 A6 |  if_e	mov	result1, #3
2ede8                 | '     }
2ede8                 | '     return RES_OK;
2ede8     00 FA 05 56 |  if_ne	mov	result1, #0
2edec     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2edf0     01 04 CE F7 | 	test	_var03, #1 wz
2edf4     00 02 06 A6 |  if_e	mov	_var02, #0
2edf8                 | LR__4670
2edf8     00 02 0E F2 | 	cmp	_var02, #0 wz
2edfc     00 05 02 AB |  if_e	rdlong	_var03, _var01
2ee00     00 04 06 56 |  if_ne	mov	_var03, #0
2ee04     0A 05 62 FC | 	wrlong	_var03, arg02
2ee08                 | ' 			res = FR_OK;
2ee08                 | ' 		}
2ee08                 | ' 
2ee08                 | ' 	}
2ee08                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2ee08                 | ' 	return res;
2ee08     01 FB 01 F6 | 	mov	result1, _var02
2ee0c                 | _fatfs_cc_validate_ret
2ee0c     2D 00 64 FD | 	ret
2ee10                 | 
2ee10                 | _fatfs_cc_f_mount
2ee10     04 4A 05 F6 | 	mov	COUNT_, #4
2ee14     A8 00 A0 FD | 	call	#pushregs_
2ee18     20 F0 07 F1 | 	add	ptra, #32
2ee1c     04 4E 05 F1 | 	add	fp, #4
2ee20     A7 12 62 FC | 	wrlong	arg01, fp
2ee24     04 4E 05 F1 | 	add	fp, #4
2ee28     A7 14 62 FC | 	wrlong	arg02, fp
2ee2c     0B 27 02 F6 | 	mov	local01, arg03
2ee30     14 4E 05 F1 | 	add	fp, #20
2ee34     A7 14 62 FC | 	wrlong	arg02, fp
2ee38     A7 12 02 F6 | 	mov	arg01, fp
2ee3c     1C 4E 85 F1 | 	sub	fp, #28
2ee40     FC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2ee44     FD 28 02 F6 | 	mov	local02, result1
2ee48     00 28 56 F2 | 	cmps	local02, #0 wc
2ee4c     0B FA 05 C6 |  if_b	mov	result1, #11
2ee50     80 00 90 CD |  if_b	jmp	#LR__4681
2ee54     14 2B 02 F6 | 	mov	local03, local02
2ee58     02 2A 66 F0 | 	shl	local03, #2
2ee5c     F2 2A 02 F1 | 	add	local03, objptr
2ee60     15 2D 0A FB | 	rdlong	local04, local03 wz
2ee64     14 00 90 AD |  if_e	jmp	#LR__4680
2ee68     01 2C 06 F1 | 	add	local04, #1
2ee6c     16 13 C2 FA | 	rdbyte	arg01, local04
2ee70     01 2C 86 F1 | 	sub	local04, #1
2ee74     3C 2A B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2ee78     16 01 48 FC | 	wrbyte	#0, local04
2ee7c                 | LR__4680
2ee7c     04 4E 05 F1 | 	add	fp, #4
2ee80     A7 2A 0A FB | 	rdlong	local03, fp wz
2ee84     04 4E 85 F1 | 	sub	fp, #4
2ee88     04 4E 05 51 |  if_ne	add	fp, #4
2ee8c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2ee90     04 4E 85 51 |  if_ne	sub	fp, #4
2ee94     15 01 48 5C |  if_ne	wrbyte	#0, local03
2ee98     02 28 66 F0 | 	shl	local02, #2
2ee9c     F2 28 02 F1 | 	add	local02, objptr
2eea0     04 4E 05 F1 | 	add	fp, #4
2eea4     A7 2C 02 FB | 	rdlong	local04, fp
2eea8     04 4E 85 F1 | 	sub	fp, #4
2eeac     14 2D 62 FC | 	wrlong	local04, local02
2eeb0     07 26 4E F7 | 	zerox	local01, #7 wz
2eeb4     00 FA 05 A6 |  if_e	mov	result1, #0
2eeb8     08 4E 05 51 |  if_ne	add	fp, #8
2eebc     A7 12 02 56 |  if_ne	mov	arg01, fp
2eec0     04 4E 85 51 |  if_ne	sub	fp, #4
2eec4     A7 14 02 56 |  if_ne	mov	arg02, fp
2eec8     04 4E 85 51 |  if_ne	sub	fp, #4
2eecc     00 16 06 56 |  if_ne	mov	arg03, #0
2eed0     A4 F9 BF 5D |  if_ne	call	#_fatfs_cc_mount_volume
2eed4                 | ' 
2eed4                 | ' 	res = mount_volume(&path, &fs, 0);
2eed4                 | ' 	return res ;
2eed4                 | LR__4681
2eed4     A7 F0 03 F6 | 	mov	ptra, fp
2eed8     B2 00 A0 FD | 	call	#popregs_
2eedc                 | _fatfs_cc_f_mount_ret
2eedc     2D 00 64 FD | 	ret
2eee0                 | 
2eee0                 | _fatfs_cc_f_open
2eee0     08 4A 05 F6 | 	mov	COUNT_, #8
2eee4     A8 00 A0 FD | 	call	#pushregs_
2eee8     60 F0 07 F1 | 	add	ptra, #96
2eeec     09 27 0A F6 | 	mov	local01, arg01 wz
2eef0     08 4E 05 F1 | 	add	fp, #8
2eef4     A7 14 62 FC | 	wrlong	arg02, fp
2eef8     08 4E 85 F1 | 	sub	fp, #8
2eefc     0B 29 02 F6 | 	mov	local02, arg03
2ef00     09 FA 05 A6 |  if_e	mov	result1, #9
2ef04     24 04 90 AD |  if_e	jmp	#LR__4707
2ef08     14 29 E2 F8 | 	getbyte	local02, local02, #0
2ef0c     3F 28 06 F5 | 	and	local02, #63
2ef10     08 4E 05 F1 | 	add	fp, #8
2ef14     A7 12 02 F6 | 	mov	arg01, fp
2ef18     3C 4E 05 F1 | 	add	fp, #60
2ef1c     A7 14 02 F6 | 	mov	arg02, fp
2ef20     44 4E 85 F1 | 	sub	fp, #68
2ef24     14 17 02 F6 | 	mov	arg03, local02
2ef28     4C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2ef2c     FD 2A 0A F6 | 	mov	local03, result1 wz
2ef30     EC 03 90 5D |  if_ne	jmp	#LR__4706
2ef34     44 4E 05 F1 | 	add	fp, #68
2ef38     A7 2A 02 FB | 	rdlong	local03, fp
2ef3c     30 4E 85 F1 | 	sub	fp, #48
2ef40     A7 2A 62 FC | 	wrlong	local03, fp
2ef44     A7 12 02 F6 | 	mov	arg01, fp
2ef48     0C 4E 85 F1 | 	sub	fp, #12
2ef4c     A7 2C 02 FB | 	rdlong	local04, fp
2ef50     08 4E 85 F1 | 	sub	fp, #8
2ef54     16 15 02 F6 | 	mov	arg02, local04
2ef58     8C F4 BF FD | 	call	#_fatfs_cc_follow_path
2ef5c     FD 2A 0A F6 | 	mov	local03, result1 wz
2ef60     18 00 90 5D |  if_ne	jmp	#LR__4690
2ef64     3F 4E 05 F1 | 	add	fp, #63
2ef68     A7 2C C2 FA | 	rdbyte	local04, fp
2ef6c     3F 4E 85 F1 | 	sub	fp, #63
2ef70     16 19 E2 F8 | 	getbyte	arg04, local04, #0
2ef74     80 18 CE F7 | 	test	arg04, #128 wz
2ef78     06 2A 06 56 |  if_ne	mov	local03, #6
2ef7c                 | LR__4690
2ef7c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
2ef80     1C 18 CE F7 | 	test	arg04, #28 wz
2ef84     5C 01 90 AD |  if_e	jmp	#LR__4695
2ef88     00 2A 0E F2 | 	cmp	local03, #0 wz
2ef8c     24 00 90 AD |  if_e	jmp	#LR__4692
2ef90     04 2A 0E F2 | 	cmp	local03, #4 wz
2ef94     10 00 90 5D |  if_ne	jmp	#LR__4691
2ef98     A7 12 02 F6 | 	mov	arg01, fp
2ef9c     14 12 06 F1 | 	add	arg01, #20
2efa0     7C E8 BF FD | 	call	#_fatfs_cc_dir_register
2efa4     FD 2A 02 F6 | 	mov	local03, result1
2efa8                 | LR__4691
2efa8     14 29 E2 F8 | 	getbyte	local02, local02, #0
2efac     08 28 46 F5 | 	or	local02, #8
2efb0     24 00 90 FD | 	jmp	#LR__4694
2efb4                 | LR__4692
2efb4     1A 4E 05 F1 | 	add	fp, #26
2efb8     A7 2C C2 FA | 	rdbyte	local04, fp
2efbc     1A 4E 85 F1 | 	sub	fp, #26
2efc0     11 2C CE F7 | 	test	local04, #17 wz
2efc4     07 2A 06 56 |  if_ne	mov	local03, #7
2efc8     0C 00 90 5D |  if_ne	jmp	#LR__4693
2efcc     14 2D E2 F8 | 	getbyte	local04, local02, #0
2efd0     04 2C CE F7 | 	test	local04, #4 wz
2efd4     08 2A 06 56 |  if_ne	mov	local03, #8
2efd8                 | LR__4693
2efd8                 | LR__4694
2efd8     00 2A 0E F2 | 	cmp	local03, #0 wz
2efdc     40 01 90 5D |  if_ne	jmp	#LR__4698
2efe0     14 2D E2 F8 | 	getbyte	local04, local02, #0
2efe4     08 2C CE F7 | 	test	local04, #8 wz
2efe8     34 01 90 AD |  if_e	jmp	#LR__4698
2efec     14 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2eff0     30 4E 05 F1 | 	add	fp, #48
2eff4     A7 12 02 FB | 	rdlong	arg01, fp
2eff8     0E 12 06 F1 | 	add	arg01, #14
2effc     09 FB 61 FC | 	wrlong	result1, arg01
2f000     A7 12 02 FB | 	rdlong	arg01, fp
2f004     16 12 06 F1 | 	add	arg01, #22
2f008     09 FB 61 FC | 	wrlong	result1, arg01
2f00c     14 4E 05 F1 | 	add	fp, #20
2f010     A7 12 02 FB | 	rdlong	arg01, fp
2f014     14 4E 85 F1 | 	sub	fp, #20
2f018     A7 14 02 FB | 	rdlong	arg02, fp
2f01c     30 4E 85 F1 | 	sub	fp, #48
2f020     FC DE BF FD | 	call	#_fatfs_cc_ld_clust
2f024     FD 2C 02 F6 | 	mov	local04, result1
2f028     30 4E 05 F1 | 	add	fp, #48
2f02c     A7 18 02 FB | 	rdlong	arg04, fp
2f030     0B 18 06 F1 | 	add	arg04, #11
2f034     0C 41 48 FC | 	wrbyte	#32, arg04
2f038     14 4E 05 F1 | 	add	fp, #20
2f03c     A7 12 02 FB | 	rdlong	arg01, fp
2f040     14 4E 85 F1 | 	sub	fp, #20
2f044     A7 14 02 FB | 	rdlong	arg02, fp
2f048     30 4E 85 F1 | 	sub	fp, #48
2f04c     00 16 06 F6 | 	mov	arg03, #0
2f050     00 DF BF FD | 	call	#_fatfs_cc_st_clust
2f054     30 4E 05 F1 | 	add	fp, #48
2f058     A7 12 02 FB | 	rdlong	arg01, fp
2f05c     1C 12 06 F1 | 	add	arg01, #28
2f060     09 01 68 FC | 	wrlong	#0, arg01
2f064     14 4E 05 F1 | 	add	fp, #20
2f068     A7 18 02 FB | 	rdlong	arg04, fp
2f06c     44 4E 85 F1 | 	sub	fp, #68
2f070     03 18 06 F1 | 	add	arg04, #3
2f074     0C 03 48 FC | 	wrbyte	#1, arg04
2f078     00 2C 0E F2 | 	cmp	local04, #0 wz
2f07c     A0 00 90 AD |  if_e	jmp	#LR__4698
2f080     44 4E 05 F1 | 	add	fp, #68
2f084     A7 2A 02 FB | 	rdlong	local03, fp
2f088     30 2A 06 F1 | 	add	local03, #48
2f08c     15 2F 02 FB | 	rdlong	local05, local03
2f090     30 4E 85 F1 | 	sub	fp, #48
2f094     A7 12 02 F6 | 	mov	arg01, fp
2f098     14 4E 85 F1 | 	sub	fp, #20
2f09c     16 15 02 F6 | 	mov	arg02, local04
2f0a0     00 16 06 F6 | 	mov	arg03, #0
2f0a4     AC D6 BF FD | 	call	#_fatfs_cc_remove_chain
2f0a8     FD 2A 0A F6 | 	mov	local03, result1 wz
2f0ac     70 00 90 5D |  if_ne	jmp	#LR__4698
2f0b0     44 4E 05 F1 | 	add	fp, #68
2f0b4     A7 12 02 FB | 	rdlong	arg01, fp
2f0b8     44 4E 85 F1 | 	sub	fp, #68
2f0bc     17 15 02 F6 | 	mov	arg02, local05
2f0c0     2C D1 BF FD | 	call	#_fatfs_cc_move_window
2f0c4     FD 2A 02 F6 | 	mov	local03, result1
2f0c8     44 4E 05 F1 | 	add	fp, #68
2f0cc     A7 2E 02 FB | 	rdlong	local05, fp
2f0d0     44 4E 85 F1 | 	sub	fp, #68
2f0d4     01 2C 86 F1 | 	sub	local04, #1
2f0d8     10 2E 06 F1 | 	add	local05, #16
2f0dc     17 2D 62 FC | 	wrlong	local04, local05
2f0e0     3C 00 90 FD | 	jmp	#LR__4698
2f0e4                 | LR__4695
2f0e4     00 2A 0E F2 | 	cmp	local03, #0 wz
2f0e8     34 00 90 5D |  if_ne	jmp	#LR__4697
2f0ec     1A 4E 05 F1 | 	add	fp, #26
2f0f0     A7 2E C2 FA | 	rdbyte	local05, fp
2f0f4     1A 4E 85 F1 | 	sub	fp, #26
2f0f8     10 2E CE F7 | 	test	local05, #16 wz
2f0fc     04 2A 06 56 |  if_ne	mov	local03, #4
2f100     1C 00 90 5D |  if_ne	jmp	#LR__4696
2f104     14 2F E2 F8 | 	getbyte	local05, local02, #0
2f108     02 2E CE F7 | 	test	local05, #2 wz
2f10c     1A 4E 05 51 |  if_ne	add	fp, #26
2f110     A7 2C C2 5A |  if_ne	rdbyte	local04, fp
2f114     1A 4E 85 51 |  if_ne	sub	fp, #26
2f118     01 2C CE 57 |  if_ne	test	local04, #1 wz
2f11c     07 2A 06 56 |  if_ne	mov	local03, #7
2f120                 | LR__4696
2f120                 | LR__4697
2f120                 | LR__4698
2f120     00 2A 0E F2 | 	cmp	local03, #0 wz
2f124     40 00 90 5D |  if_ne	jmp	#LR__4699
2f128     14 2F E2 F8 | 	getbyte	local05, local02, #0
2f12c     08 2E CE F7 | 	test	local05, #8 wz
2f130     14 29 E2 58 |  if_ne	getbyte	local02, local02, #0
2f134     40 28 46 55 |  if_ne	or	local02, #64
2f138     44 4E 05 F1 | 	add	fp, #68
2f13c     A7 2E 02 FB | 	rdlong	local05, fp
2f140     30 2E 06 F1 | 	add	local05, #48
2f144     17 2F 02 FB | 	rdlong	local05, local05
2f148     20 26 06 F1 | 	add	local01, #32
2f14c     13 2F 62 FC | 	wrlong	local05, local01
2f150     14 4E 85 F1 | 	sub	fp, #20
2f154     A7 2E 02 FB | 	rdlong	local05, fp
2f158     30 4E 85 F1 | 	sub	fp, #48
2f15c     04 26 06 F1 | 	add	local01, #4
2f160     13 2F 62 FC | 	wrlong	local05, local01
2f164     24 26 86 F1 | 	sub	local01, #36
2f168                 | LR__4699
2f168     00 2A 0E F2 | 	cmp	local03, #0 wz
2f16c     B0 01 90 5D |  if_ne	jmp	#LR__4705
2f170     44 4E 05 F1 | 	add	fp, #68
2f174     A7 12 02 FB | 	rdlong	arg01, fp
2f178     14 4E 85 F1 | 	sub	fp, #20
2f17c     A7 14 02 FB | 	rdlong	arg02, fp
2f180     30 4E 85 F1 | 	sub	fp, #48
2f184     98 DD BF FD | 	call	#_fatfs_cc_ld_clust
2f188     08 26 06 F1 | 	add	local01, #8
2f18c     13 FB 61 FC | 	wrlong	result1, local01
2f190     30 4E 05 F1 | 	add	fp, #48
2f194     A7 12 02 FB | 	rdlong	arg01, fp
2f198     1C 12 06 F1 | 	add	arg01, #28
2f19c                 | ' {
2f19c                 | ' 
2f19c                 | ' 	return *((DWORD*)ptr);
2f19c     09 FB 01 FB | 	rdlong	result1, arg01
2f1a0     04 26 06 F1 | 	add	local01, #4
2f1a4     13 FB 61 FC | 	wrlong	result1, local01
2f1a8     0C 26 86 F1 | 	sub	local01, #12
2f1ac     14 4E 05 F1 | 	add	fp, #20
2f1b0     A7 2E 02 FB | 	rdlong	local05, fp
2f1b4     13 2F 62 FC | 	wrlong	local05, local01
2f1b8     A7 2E 02 FB | 	rdlong	local05, fp
2f1bc     44 4E 85 F1 | 	sub	fp, #68
2f1c0     06 2E 06 F1 | 	add	local05, #6
2f1c4     17 2D E2 FA | 	rdword	local04, local05
2f1c8     04 26 06 F1 | 	add	local01, #4
2f1cc     13 2D 52 FC | 	wrword	local04, local01
2f1d0     0C 26 06 F1 | 	add	local01, #12
2f1d4     13 29 42 FC | 	wrbyte	local02, local01
2f1d8     01 26 06 F1 | 	add	local01, #1
2f1dc     13 01 48 FC | 	wrbyte	#0, local01
2f1e0     0B 26 06 F1 | 	add	local01, #11
2f1e4     13 01 68 FC | 	wrlong	#0, local01
2f1e8     08 26 86 F1 | 	sub	local01, #8
2f1ec     13 01 68 FC | 	wrlong	#0, local01
2f1f0     14 26 06 F1 | 	add	local01, #20
2f1f4     13 13 02 F6 | 	mov	arg01, local01
2f1f8     28 26 86 F1 | 	sub	local01, #40
2f1fc     00 14 06 F6 | 	mov	arg02, #0
2f200     09 16 C6 F9 | 	decod	arg03, #9
2f204     98 00 A0 FD | 	call	#\builtin_bytefill_
2f208     14 29 E2 F8 | 	getbyte	local02, local02, #0
2f20c     20 28 CE F7 | 	test	local02, #32 wz
2f210     0C 01 90 AD |  if_e	jmp	#LR__4704
2f214     0C 26 06 F1 | 	add	local01, #12
2f218     13 2D 02 FB | 	rdlong	local04, local01
2f21c     0C 26 86 F1 | 	sub	local01, #12
2f220     01 2C 16 F2 | 	cmp	local04, #1 wc
2f224     F8 00 90 CD |  if_b	jmp	#LR__4704
2f228     0C 26 06 F1 | 	add	local01, #12
2f22c     13 2D 02 FB | 	rdlong	local04, local01
2f230     08 26 06 F1 | 	add	local01, #8
2f234     13 2D 62 FC | 	wrlong	local04, local01
2f238     44 4E 05 F1 | 	add	fp, #68
2f23c     A7 2C 02 FB | 	rdlong	local04, fp
2f240     44 4E 85 F1 | 	sub	fp, #68
2f244     0A 2C 06 F1 | 	add	local04, #10
2f248     16 31 E2 FA | 	rdword	local06, local04
2f24c     09 30 66 F0 | 	shl	local06, #9
2f250     0C 26 86 F1 | 	sub	local01, #12
2f254     13 33 02 FB | 	rdlong	local07, local01
2f258                 | ' 				fp->fptr = fp->obj.objsize;
2f258                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f258                 | ' 				clst = fp->obj.sclust;
2f258                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2f258     04 26 06 F1 | 	add	local01, #4
2f25c     13 35 02 FB | 	rdlong	local08, local01
2f260     0C 26 86 F1 | 	sub	local01, #12
2f264                 | LR__4700
2f264     00 2A 0E F2 | 	cmp	local03, #0 wz
2f268     34 00 90 5D |  if_ne	jmp	#LR__4701
2f26c     18 35 1A F2 | 	cmp	local08, local06 wcz
2f270     2C 00 90 ED |  if_be	jmp	#LR__4701
2f274     13 13 02 F6 | 	mov	arg01, local01
2f278     19 15 02 F6 | 	mov	arg02, local07
2f27c     24 D1 BF FD | 	call	#_fatfs_cc_get_fat
2f280     FD 32 02 F6 | 	mov	local07, result1
2f284     02 32 16 F2 | 	cmp	local07, #2 wc
2f288     02 2A 06 C6 |  if_b	mov	local03, #2
2f28c     FF FF 7F FF 
2f290     FF 33 0E F2 | 	cmp	local07, ##-1 wz
2f294     01 2A 06 A6 |  if_e	mov	local03, #1
2f298     18 35 82 F1 | 	sub	local08, local06
2f29c     C4 FF 9F FD | 	jmp	#LR__4700
2f2a0                 | LR__4701
2f2a0     18 26 06 F1 | 	add	local01, #24
2f2a4     13 33 62 FC | 	wrlong	local07, local01
2f2a8     18 26 86 F1 | 	sub	local01, #24
2f2ac     00 2A 0E F2 | 	cmp	local03, #0 wz
2f2b0     6C 00 90 5D |  if_ne	jmp	#LR__4703
2f2b4     FF 35 CE F7 | 	test	local08, #511 wz
2f2b8     64 00 90 AD |  if_e	jmp	#LR__4703
2f2bc     44 4E 05 F1 | 	add	fp, #68
2f2c0     A7 12 02 FB | 	rdlong	arg01, fp
2f2c4     44 4E 85 F1 | 	sub	fp, #68
2f2c8     19 15 02 F6 | 	mov	arg02, local07
2f2cc     98 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2f2d0     FD 2E 0A F6 | 	mov	local05, result1 wz
2f2d4     02 2A 06 A6 |  if_e	mov	local03, #2
2f2d8     44 00 90 AD |  if_e	jmp	#LR__4702
2f2dc     09 34 46 F0 | 	shr	local08, #9
2f2e0     1A 2F 02 F1 | 	add	local05, local08
2f2e4     1C 26 06 F1 | 	add	local01, #28
2f2e8     13 2F 62 FC | 	wrlong	local05, local01
2f2ec     44 4E 05 F1 | 	add	fp, #68
2f2f0     A7 2C 02 FB | 	rdlong	local04, fp
2f2f4     44 4E 85 F1 | 	sub	fp, #68
2f2f8     01 2C 06 F1 | 	add	local04, #1
2f2fc     16 13 C2 FA | 	rdbyte	arg01, local04
2f300     13 15 02 F6 | 	mov	arg02, local01
2f304     0C 14 06 F1 | 	add	arg02, #12
2f308     17 17 02 F6 | 	mov	arg03, local05
2f30c     1C 26 86 F1 | 	sub	local01, #28
2f310     01 18 06 F6 | 	mov	arg04, #1
2f314     54 C8 BF FD | 	call	#_fatfs_cc_disk_read
2f318     00 FA 0D F2 | 	cmp	result1, #0 wz
2f31c     01 2A 06 56 |  if_ne	mov	local03, #1
2f320                 | LR__4702
2f320                 | LR__4703
2f320                 | LR__4704
2f320                 | LR__4705
2f320                 | LR__4706
2f320     00 2A 0E F2 | 	cmp	local03, #0 wz
2f324     13 01 68 5C |  if_ne	wrlong	#0, local01
2f328                 | ' 
2f328                 | ' 	return res ;
2f328     15 FB 01 F6 | 	mov	result1, local03
2f32c                 | LR__4707
2f32c     A7 F0 03 F6 | 	mov	ptra, fp
2f330     B2 00 A0 FD | 	call	#popregs_
2f334                 | _fatfs_cc_f_open_ret
2f334     2D 00 64 FD | 	ret
2f338                 | 
2f338                 | _fatfs_cc_f_read
2f338     0F 4A 05 F6 | 	mov	COUNT_, #15
2f33c     A8 00 A0 FD | 	call	#pushregs_
2f340     38 F0 07 F1 | 	add	ptra, #56
2f344     09 27 02 F6 | 	mov	local01, arg01
2f348     0A 29 02 F6 | 	mov	local02, arg02
2f34c     0B 2B 02 F6 | 	mov	local03, arg03
2f350     0C 2D 02 F6 | 	mov	local04, arg04
2f354     14 2F 02 F6 | 	mov	local05, local02
2f358     16 01 68 FC | 	wrlong	#0, local04
2f35c     A7 14 02 F6 | 	mov	arg02, fp
2f360     18 14 06 F1 | 	add	arg02, #24
2f364     13 13 02 F6 | 	mov	arg01, local01
2f368     30 FA BF FD | 	call	#_fatfs_cc_validate
2f36c     FD 30 0A F6 | 	mov	local06, result1 wz
2f370     11 26 06 A1 |  if_e	add	local01, #17
2f374     13 31 C2 AA |  if_e	rdbyte	local06, local01
2f378     11 26 86 A1 |  if_e	sub	local01, #17
2f37c     00 30 4E A2 |  if_e	cmps	local06, #0 wz
2f380     18 FB 01 56 |  if_ne	mov	result1, local06
2f384     38 03 90 5D |  if_ne	jmp	#LR__4720
2f388     10 26 06 F1 | 	add	local01, #16
2f38c     13 33 C2 FA | 	rdbyte	local07, local01
2f390     10 26 86 F1 | 	sub	local01, #16
2f394     01 32 CE F7 | 	test	local07, #1 wz
2f398     07 FA 05 A6 |  if_e	mov	result1, #7
2f39c     20 03 90 AD |  if_e	jmp	#LR__4720
2f3a0     0C 26 06 F1 | 	add	local01, #12
2f3a4     13 35 02 FB | 	rdlong	local08, local01
2f3a8     08 26 06 F1 | 	add	local01, #8
2f3ac     13 37 02 FB | 	rdlong	local09, local01
2f3b0     14 26 86 F1 | 	sub	local01, #20
2f3b4     1B 35 82 F1 | 	sub	local08, local09
2f3b8     1A 2B 3A F3 | 	fle	local03, local08 wcz
2f3bc                 | ' 
2f3bc                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2f3bc                 | LR__4710
2f3bc     01 2A 16 F2 | 	cmp	local03, #1 wc
2f3c0     F8 02 90 CD |  if_b	jmp	#LR__4719
2f3c4     14 26 06 F1 | 	add	local01, #20
2f3c8     13 33 02 FB | 	rdlong	local07, local01
2f3cc     14 26 86 F1 | 	sub	local01, #20
2f3d0     FF 33 CE F7 | 	test	local07, #511 wz
2f3d4     7C 02 90 5D |  if_ne	jmp	#LR__4717
2f3d8     14 26 06 F1 | 	add	local01, #20
2f3dc     13 39 02 FB | 	rdlong	local10, local01
2f3e0     14 26 86 F1 | 	sub	local01, #20
2f3e4     09 38 46 F0 | 	shr	local10, #9
2f3e8     18 4E 05 F1 | 	add	fp, #24
2f3ec     A7 32 02 FB | 	rdlong	local07, fp
2f3f0     18 4E 85 F1 | 	sub	fp, #24
2f3f4     0A 32 06 F1 | 	add	local07, #10
2f3f8     19 33 E2 FA | 	rdword	local07, local07
2f3fc     01 32 86 F1 | 	sub	local07, #1
2f400     19 39 0A F5 | 	and	local10, local07 wz
2f404     6C 00 90 5D |  if_ne	jmp	#LR__4712
2f408     14 26 06 F1 | 	add	local01, #20
2f40c     13 33 0A FB | 	rdlong	local07, local01 wz
2f410     14 26 86 F1 | 	sub	local01, #20
2f414     08 26 06 A1 |  if_e	add	local01, #8
2f418     13 3B 02 AB |  if_e	rdlong	local11, local01
2f41c     08 26 86 A1 |  if_e	sub	local01, #8
2f420     18 00 90 AD |  if_e	jmp	#LR__4711
2f424     13 13 02 F6 | 	mov	arg01, local01
2f428     18 26 06 F1 | 	add	local01, #24
2f42c     13 15 02 FB | 	rdlong	arg02, local01
2f430     18 26 86 F1 | 	sub	local01, #24
2f434     6C CF BF FD | 	call	#_fatfs_cc_get_fat
2f438     FD 3A 02 F6 | 	mov	local11, result1
2f43c                 | LR__4711
2f43c     02 3A 16 F2 | 	cmp	local11, #2 wc
2f440     11 26 06 C1 |  if_b	add	local01, #17
2f444     13 05 48 CC |  if_b	wrbyte	#2, local01
2f448     02 FA 05 C6 |  if_b	mov	result1, #2
2f44c     70 02 90 CD |  if_b	jmp	#LR__4720
2f450     FF FF 7F FF 
2f454     FF 3B 0E F2 | 	cmp	local11, ##-1 wz
2f458     11 26 06 A1 |  if_e	add	local01, #17
2f45c     13 03 48 AC |  if_e	wrbyte	#1, local01
2f460     01 FA 05 A6 |  if_e	mov	result1, #1
2f464     58 02 90 AD |  if_e	jmp	#LR__4720
2f468     18 26 06 F1 | 	add	local01, #24
2f46c     13 3B 62 FC | 	wrlong	local11, local01
2f470     18 26 86 F1 | 	sub	local01, #24
2f474                 | LR__4712
2f474     18 4E 05 F1 | 	add	fp, #24
2f478     A7 12 02 FB | 	rdlong	arg01, fp
2f47c     18 4E 85 F1 | 	sub	fp, #24
2f480     18 26 06 F1 | 	add	local01, #24
2f484     13 15 02 FB | 	rdlong	arg02, local01
2f488     18 26 86 F1 | 	sub	local01, #24
2f48c     D8 CE BF FD | 	call	#_fatfs_cc_clst2sect
2f490     FD 3C 0A F6 | 	mov	local12, result1 wz
2f494     11 26 06 A1 |  if_e	add	local01, #17
2f498     13 05 48 AC |  if_e	wrbyte	#2, local01
2f49c     02 FA 05 A6 |  if_e	mov	result1, #2
2f4a0     1C 02 90 AD |  if_e	jmp	#LR__4720
2f4a4     1C 3D 02 F1 | 	add	local12, local10
2f4a8     15 3F 02 F6 | 	mov	local13, local03
2f4ac     09 3E 46 F0 | 	shr	local13, #9
2f4b0     01 3E 16 F2 | 	cmp	local13, #1 wc
2f4b4     D4 00 90 CD |  if_b	jmp	#LR__4714
2f4b8     1C 33 02 F6 | 	mov	local07, local10
2f4bc     1F 33 02 F1 | 	add	local07, local13
2f4c0     18 4E 05 F1 | 	add	fp, #24
2f4c4     A7 36 02 FB | 	rdlong	local09, fp
2f4c8     18 4E 85 F1 | 	sub	fp, #24
2f4cc     0A 36 06 F1 | 	add	local09, #10
2f4d0     1B 41 E2 FA | 	rdword	local14, local09
2f4d4     20 33 1A F2 | 	cmp	local07, local14 wcz
2f4d8     18 4E 05 11 |  if_a	add	fp, #24
2f4dc     A7 40 02 1B |  if_a	rdlong	local14, fp
2f4e0     18 4E 85 11 |  if_a	sub	fp, #24
2f4e4     0A 40 06 11 |  if_a	add	local14, #10
2f4e8     20 3F E2 1A |  if_a	rdword	local13, local14
2f4ec     1C 3F 82 11 |  if_a	sub	local13, local10
2f4f0     18 4E 05 F1 | 	add	fp, #24
2f4f4     A7 40 02 FB | 	rdlong	local14, fp
2f4f8     18 4E 85 F1 | 	sub	fp, #24
2f4fc     01 40 06 F1 | 	add	local14, #1
2f500     20 13 C2 FA | 	rdbyte	arg01, local14
2f504     17 15 02 F6 | 	mov	arg02, local05
2f508     1F 19 02 F6 | 	mov	arg04, local13
2f50c     1E 17 02 F6 | 	mov	arg03, local12
2f510     58 C6 BF FD | 	call	#_fatfs_cc_disk_read
2f514     00 FA 0D F2 | 	cmp	result1, #0 wz
2f518     11 26 06 51 |  if_ne	add	local01, #17
2f51c     13 03 48 5C |  if_ne	wrbyte	#1, local01
2f520     01 FA 05 56 |  if_ne	mov	result1, #1
2f524     98 01 90 5D |  if_ne	jmp	#LR__4720
2f528     10 26 06 F1 | 	add	local01, #16
2f52c     13 33 C2 FA | 	rdbyte	local07, local01
2f530     10 26 86 F1 | 	sub	local01, #16
2f534     80 32 CE F7 | 	test	local07, #128 wz
2f538     44 00 90 AD |  if_e	jmp	#LR__4713
2f53c     1C 26 06 F1 | 	add	local01, #28
2f540     13 37 02 FB | 	rdlong	local09, local01
2f544     1C 26 86 F1 | 	sub	local01, #28
2f548     1E 37 82 F1 | 	sub	local09, local12
2f54c     1F 37 12 F2 | 	cmp	local09, local13 wc
2f550     2C 00 90 3D |  if_ae	jmp	#LR__4713
2f554     17 13 02 F6 | 	mov	arg01, local05
2f558     1C 26 06 F1 | 	add	local01, #28
2f55c     13 41 02 FB | 	rdlong	local14, local01
2f560     1E 41 82 F1 | 	sub	local14, local12
2f564     09 40 66 F0 | 	shl	local14, #9
2f568     20 13 02 F1 | 	add	arg01, local14
2f56c     0C 26 06 F1 | 	add	local01, #12
2f570     13 15 02 F6 | 	mov	arg02, local01
2f574     28 26 86 F1 | 	sub	local01, #40
2f578     09 16 C6 F9 | 	decod	arg03, #9
2f57c     48 5A BF FD | 	call	#__system____builtin_memmove
2f580                 | LR__4713
2f580     09 3E 66 F0 | 	shl	local13, #9
2f584     1F 43 02 F6 | 	mov	local15, local13
2f588                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2f588                 | ' 				}
2f588                 | ' 
2f588                 | ' 
2f588                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2f588                 | ' 				continue;
2f588     04 01 90 FD | 	jmp	#LR__4718
2f58c                 | LR__4714
2f58c     1C 26 06 F1 | 	add	local01, #28
2f590     13 33 02 FB | 	rdlong	local07, local01
2f594     1C 26 86 F1 | 	sub	local01, #28
2f598     1E 33 0A F2 | 	cmp	local07, local12 wz
2f59c     A8 00 90 AD |  if_e	jmp	#LR__4716
2f5a0     10 26 06 F1 | 	add	local01, #16
2f5a4     13 33 C2 FA | 	rdbyte	local07, local01
2f5a8     10 26 86 F1 | 	sub	local01, #16
2f5ac     80 32 CE F7 | 	test	local07, #128 wz
2f5b0     58 00 90 AD |  if_e	jmp	#LR__4715
2f5b4     18 4E 05 F1 | 	add	fp, #24
2f5b8     A7 40 02 FB | 	rdlong	local14, fp
2f5bc     18 4E 85 F1 | 	sub	fp, #24
2f5c0     01 40 06 F1 | 	add	local14, #1
2f5c4     20 13 C2 FA | 	rdbyte	arg01, local14
2f5c8     28 26 06 F1 | 	add	local01, #40
2f5cc     13 15 02 F6 | 	mov	arg02, local01
2f5d0     0C 26 86 F1 | 	sub	local01, #12
2f5d4     13 17 02 FB | 	rdlong	arg03, local01
2f5d8     1C 26 86 F1 | 	sub	local01, #28
2f5dc     01 18 06 F6 | 	mov	arg04, #1
2f5e0     C4 C6 BF FD | 	call	#_fatfs_cc_disk_write
2f5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5e8     11 26 06 51 |  if_ne	add	local01, #17
2f5ec     13 03 48 5C |  if_ne	wrbyte	#1, local01
2f5f0     01 FA 05 56 |  if_ne	mov	result1, #1
2f5f4     C8 00 90 5D |  if_ne	jmp	#LR__4720
2f5f8     10 26 06 F1 | 	add	local01, #16
2f5fc     13 33 C2 FA | 	rdbyte	local07, local01
2f600     7F 32 06 F5 | 	and	local07, #127
2f604     13 33 42 FC | 	wrbyte	local07, local01
2f608     10 26 86 F1 | 	sub	local01, #16
2f60c                 | LR__4715
2f60c     18 4E 05 F1 | 	add	fp, #24
2f610     A7 40 02 FB | 	rdlong	local14, fp
2f614     18 4E 85 F1 | 	sub	fp, #24
2f618     01 40 06 F1 | 	add	local14, #1
2f61c     20 13 C2 FA | 	rdbyte	arg01, local14
2f620     13 15 02 F6 | 	mov	arg02, local01
2f624     28 14 06 F1 | 	add	arg02, #40
2f628     1E 17 02 F6 | 	mov	arg03, local12
2f62c     01 18 06 F6 | 	mov	arg04, #1
2f630     38 C5 BF FD | 	call	#_fatfs_cc_disk_read
2f634     00 FA 0D F2 | 	cmp	result1, #0 wz
2f638     11 26 06 51 |  if_ne	add	local01, #17
2f63c     13 03 48 5C |  if_ne	wrbyte	#1, local01
2f640     01 FA 05 56 |  if_ne	mov	result1, #1
2f644     78 00 90 5D |  if_ne	jmp	#LR__4720
2f648                 | LR__4716
2f648     1C 26 06 F1 | 	add	local01, #28
2f64c     13 3D 62 FC | 	wrlong	local12, local01
2f650     1C 26 86 F1 | 	sub	local01, #28
2f654                 | LR__4717
2f654     14 26 06 F1 | 	add	local01, #20
2f658     13 41 02 FB | 	rdlong	local14, local01
2f65c     FF 41 06 F5 | 	and	local14, #511
2f660     09 42 C6 F9 | 	decod	local15, #9
2f664     20 43 82 F1 | 	sub	local15, local14
2f668     15 43 3A F3 | 	fle	local15, local03 wcz
2f66c     13 15 02 F6 | 	mov	arg02, local01
2f670     14 14 06 F1 | 	add	arg02, #20
2f674     13 41 02 FB | 	rdlong	local14, local01
2f678     14 26 86 F1 | 	sub	local01, #20
2f67c     FF 41 06 F5 | 	and	local14, #511
2f680     20 15 02 F1 | 	add	arg02, local14
2f684     17 13 02 F6 | 	mov	arg01, local05
2f688     21 17 02 F6 | 	mov	arg03, local15
2f68c     38 59 BF FD | 	call	#__system____builtin_memmove
2f690                 | LR__4718
2f690     21 2B 82 F1 | 	sub	local03, local15
2f694     16 33 02 FB | 	rdlong	local07, local04
2f698     21 33 02 F1 | 	add	local07, local15
2f69c     16 33 62 FC | 	wrlong	local07, local04
2f6a0     21 2F 02 F1 | 	add	local05, local15
2f6a4     14 26 06 F1 | 	add	local01, #20
2f6a8     13 33 02 FB | 	rdlong	local07, local01
2f6ac     21 33 02 F1 | 	add	local07, local15
2f6b0     13 33 62 FC | 	wrlong	local07, local01
2f6b4     14 26 86 F1 | 	sub	local01, #20
2f6b8     00 FD 9F FD | 	jmp	#LR__4710
2f6bc                 | LR__4719
2f6bc                 | ' 
2f6bc                 | ' 
2f6bc                 | ' 
2f6bc                 | ' 
2f6bc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2f6bc                 | ' 
2f6bc                 | ' 	}
2f6bc                 | ' 
2f6bc                 | ' 	return FR_OK ;
2f6bc     00 FA 05 F6 | 	mov	result1, #0
2f6c0                 | LR__4720
2f6c0     A7 F0 03 F6 | 	mov	ptra, fp
2f6c4     B2 00 A0 FD | 	call	#popregs_
2f6c8                 | _fatfs_cc_f_read_ret
2f6c8     2D 00 64 FD | 	ret
2f6cc                 | 
2f6cc                 | _fatfs_cc_f_write
2f6cc     0F 4A 05 F6 | 	mov	COUNT_, #15
2f6d0     A8 00 A0 FD | 	call	#pushregs_
2f6d4     34 F0 07 F1 | 	add	ptra, #52
2f6d8     09 27 02 F6 | 	mov	local01, arg01
2f6dc     0A 29 02 F6 | 	mov	local02, arg02
2f6e0     0B 2B 02 F6 | 	mov	local03, arg03
2f6e4     0C 2D 02 F6 | 	mov	local04, arg04
2f6e8     14 2F 02 F6 | 	mov	local05, local02
2f6ec     16 01 68 FC | 	wrlong	#0, local04
2f6f0     A7 14 02 F6 | 	mov	arg02, fp
2f6f4     18 14 06 F1 | 	add	arg02, #24
2f6f8     13 13 02 F6 | 	mov	arg01, local01
2f6fc     9C F6 BF FD | 	call	#_fatfs_cc_validate
2f700     FD 30 0A F6 | 	mov	local06, result1 wz
2f704     11 26 06 A1 |  if_e	add	local01, #17
2f708     13 31 C2 AA |  if_e	rdbyte	local06, local01
2f70c     11 26 86 A1 |  if_e	sub	local01, #17
2f710     00 30 4E A2 |  if_e	cmps	local06, #0 wz
2f714     18 FB 01 56 |  if_ne	mov	result1, local06
2f718     E8 03 90 5D |  if_ne	jmp	#LR__4741
2f71c     10 26 06 F1 | 	add	local01, #16
2f720     13 33 C2 FA | 	rdbyte	local07, local01
2f724     10 26 86 F1 | 	sub	local01, #16
2f728     02 32 CE F7 | 	test	local07, #2 wz
2f72c     07 FA 05 A6 |  if_e	mov	result1, #7
2f730     D0 03 90 AD |  if_e	jmp	#LR__4741
2f734     14 26 06 F1 | 	add	local01, #20
2f738     13 35 02 FB | 	rdlong	local08, local01
2f73c     1A 37 02 F6 | 	mov	local09, local08
2f740     15 37 02 F1 | 	add	local09, local03
2f744     14 26 86 F1 | 	sub	local01, #20
2f748     1A 37 12 F2 | 	cmp	local09, local08 wc
2f74c     01 2A 66 C6 |  if_b	neg	local03, #1
2f750     14 26 06 C1 |  if_b	add	local01, #20
2f754     13 39 02 CB |  if_b	rdlong	local10, local01
2f758     14 26 86 C1 |  if_b	sub	local01, #20
2f75c     1C 2B 82 C1 |  if_b	sub	local03, local10
2f760                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2f760                 | ' 	}
2f760                 | ' 
2f760                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2f760                 | LR__4730
2f760     01 2A 16 F2 | 	cmp	local03, #1 wc
2f764     88 03 90 CD |  if_b	jmp	#LR__4740
2f768     14 26 06 F1 | 	add	local01, #20
2f76c     13 33 02 FB | 	rdlong	local07, local01
2f770     14 26 86 F1 | 	sub	local01, #20
2f774     FF 33 CE F7 | 	test	local07, #511 wz
2f778     CC 02 90 5D |  if_ne	jmp	#LR__4738
2f77c     14 26 06 F1 | 	add	local01, #20
2f780     13 3B 02 FB | 	rdlong	local11, local01
2f784     14 26 86 F1 | 	sub	local01, #20
2f788     09 3A 46 F0 | 	shr	local11, #9
2f78c     18 4E 05 F1 | 	add	fp, #24
2f790     A7 36 02 FB | 	rdlong	local09, fp
2f794     18 4E 85 F1 | 	sub	fp, #24
2f798     0A 36 06 F1 | 	add	local09, #10
2f79c     1B 39 E2 FA | 	rdword	local10, local09
2f7a0     1C 37 32 F9 | 	getword	local09, local10, #0
2f7a4     01 36 86 F1 | 	sub	local09, #1
2f7a8     1B 3B 0A F5 | 	and	local11, local09 wz
2f7ac     A0 00 90 5D |  if_ne	jmp	#LR__4733
2f7b0     14 26 06 F1 | 	add	local01, #20
2f7b4     13 33 0A FB | 	rdlong	local07, local01 wz
2f7b8     14 26 86 F1 | 	sub	local01, #20
2f7bc     24 00 90 5D |  if_ne	jmp	#LR__4731
2f7c0     08 26 06 F1 | 	add	local01, #8
2f7c4     13 3D 0A FB | 	rdlong	local12, local01 wz
2f7c8     08 26 86 F1 | 	sub	local01, #8
2f7cc     2C 00 90 5D |  if_ne	jmp	#LR__4732
2f7d0     13 13 02 F6 | 	mov	arg01, local01
2f7d4     00 14 06 F6 | 	mov	arg02, #0
2f7d8     8C D0 BF FD | 	call	#_fatfs_cc_create_chain
2f7dc     FD 3C 02 F6 | 	mov	local12, result1
2f7e0     18 00 90 FD | 	jmp	#LR__4732
2f7e4                 | LR__4731
2f7e4     13 13 02 F6 | 	mov	arg01, local01
2f7e8     18 26 06 F1 | 	add	local01, #24
2f7ec     13 15 02 FB | 	rdlong	arg02, local01
2f7f0     18 26 86 F1 | 	sub	local01, #24
2f7f4     70 D0 BF FD | 	call	#_fatfs_cc_create_chain
2f7f8     FD 3C 02 F6 | 	mov	local12, result1
2f7fc                 | LR__4732
2f7fc     00 3C 0E F2 | 	cmp	local12, #0 wz
2f800     EC 02 90 AD |  if_e	jmp	#LR__4740
2f804     01 3C 0E F2 | 	cmp	local12, #1 wz
2f808     11 26 06 A1 |  if_e	add	local01, #17
2f80c     13 05 48 AC |  if_e	wrbyte	#2, local01
2f810     02 FA 05 A6 |  if_e	mov	result1, #2
2f814     EC 02 90 AD |  if_e	jmp	#LR__4741
2f818     FF FF 7F FF 
2f81c     FF 3D 0E F2 | 	cmp	local12, ##-1 wz
2f820     11 26 06 A1 |  if_e	add	local01, #17
2f824     13 03 48 AC |  if_e	wrbyte	#1, local01
2f828     01 FA 05 A6 |  if_e	mov	result1, #1
2f82c     D4 02 90 AD |  if_e	jmp	#LR__4741
2f830     18 26 06 F1 | 	add	local01, #24
2f834     13 3D 62 FC | 	wrlong	local12, local01
2f838     10 26 86 F1 | 	sub	local01, #16
2f83c     13 33 0A FB | 	rdlong	local07, local01 wz
2f840     08 26 86 F1 | 	sub	local01, #8
2f844     08 26 06 A1 |  if_e	add	local01, #8
2f848     13 3D 62 AC |  if_e	wrlong	local12, local01
2f84c     08 26 86 A1 |  if_e	sub	local01, #8
2f850                 | LR__4733
2f850     10 26 06 F1 | 	add	local01, #16
2f854     13 33 C2 FA | 	rdbyte	local07, local01
2f858     10 26 86 F1 | 	sub	local01, #16
2f85c     80 32 CE F7 | 	test	local07, #128 wz
2f860     58 00 90 AD |  if_e	jmp	#LR__4734
2f864     18 4E 05 F1 | 	add	fp, #24
2f868     A7 38 02 FB | 	rdlong	local10, fp
2f86c     18 4E 85 F1 | 	sub	fp, #24
2f870     01 38 06 F1 | 	add	local10, #1
2f874     1C 13 C2 FA | 	rdbyte	arg01, local10
2f878     28 26 06 F1 | 	add	local01, #40
2f87c     13 15 02 F6 | 	mov	arg02, local01
2f880     0C 26 86 F1 | 	sub	local01, #12
2f884     13 17 02 FB | 	rdlong	arg03, local01
2f888     1C 26 86 F1 | 	sub	local01, #28
2f88c     01 18 06 F6 | 	mov	arg04, #1
2f890     14 C4 BF FD | 	call	#_fatfs_cc_disk_write
2f894     00 FA 0D F2 | 	cmp	result1, #0 wz
2f898     11 26 06 51 |  if_ne	add	local01, #17
2f89c     13 03 48 5C |  if_ne	wrbyte	#1, local01
2f8a0     01 FA 05 56 |  if_ne	mov	result1, #1
2f8a4     5C 02 90 5D |  if_ne	jmp	#LR__4741
2f8a8     10 26 06 F1 | 	add	local01, #16
2f8ac     13 33 C2 FA | 	rdbyte	local07, local01
2f8b0     7F 32 06 F5 | 	and	local07, #127
2f8b4     13 33 42 FC | 	wrbyte	local07, local01
2f8b8     10 26 86 F1 | 	sub	local01, #16
2f8bc                 | LR__4734
2f8bc     18 4E 05 F1 | 	add	fp, #24
2f8c0     A7 12 02 FB | 	rdlong	arg01, fp
2f8c4     18 4E 85 F1 | 	sub	fp, #24
2f8c8     18 26 06 F1 | 	add	local01, #24
2f8cc     13 15 02 FB | 	rdlong	arg02, local01
2f8d0     18 26 86 F1 | 	sub	local01, #24
2f8d4     90 CA BF FD | 	call	#_fatfs_cc_clst2sect
2f8d8     FD 3E 0A F6 | 	mov	local13, result1 wz
2f8dc     11 26 06 A1 |  if_e	add	local01, #17
2f8e0     13 05 48 AC |  if_e	wrbyte	#2, local01
2f8e4     02 FA 05 A6 |  if_e	mov	result1, #2
2f8e8     18 02 90 AD |  if_e	jmp	#LR__4741
2f8ec     1D 3F 02 F1 | 	add	local13, local11
2f8f0     15 41 02 F6 | 	mov	local14, local03
2f8f4     09 40 46 F0 | 	shr	local14, #9
2f8f8     01 40 16 F2 | 	cmp	local14, #1 wc
2f8fc     D0 00 90 CD |  if_b	jmp	#LR__4736
2f900     1D 33 02 F6 | 	mov	local07, local11
2f904     20 33 02 F1 | 	add	local07, local14
2f908     18 4E 05 F1 | 	add	fp, #24
2f90c     A7 36 02 FB | 	rdlong	local09, fp
2f910     18 4E 85 F1 | 	sub	fp, #24
2f914     0A 36 06 F1 | 	add	local09, #10
2f918     1B 39 E2 FA | 	rdword	local10, local09
2f91c     1C 33 1A F2 | 	cmp	local07, local10 wcz
2f920     18 4E 05 11 |  if_a	add	fp, #24
2f924     A7 38 02 1B |  if_a	rdlong	local10, fp
2f928     18 4E 85 11 |  if_a	sub	fp, #24
2f92c     0A 38 06 11 |  if_a	add	local10, #10
2f930     1C 41 E2 1A |  if_a	rdword	local14, local10
2f934     1D 41 82 11 |  if_a	sub	local14, local11
2f938     18 4E 05 F1 | 	add	fp, #24
2f93c     A7 38 02 FB | 	rdlong	local10, fp
2f940     18 4E 85 F1 | 	sub	fp, #24
2f944     01 38 06 F1 | 	add	local10, #1
2f948     1C 13 C2 FA | 	rdbyte	arg01, local10
2f94c     17 15 02 F6 | 	mov	arg02, local05
2f950     1F 17 02 F6 | 	mov	arg03, local13
2f954     20 19 02 F6 | 	mov	arg04, local14
2f958     4C C3 BF FD | 	call	#_fatfs_cc_disk_write
2f95c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f960     11 26 06 51 |  if_ne	add	local01, #17
2f964     13 03 48 5C |  if_ne	wrbyte	#1, local01
2f968     01 FA 05 56 |  if_ne	mov	result1, #1
2f96c     94 01 90 5D |  if_ne	jmp	#LR__4741
2f970     1C 26 06 F1 | 	add	local01, #28
2f974     13 33 02 FB | 	rdlong	local07, local01
2f978     1C 26 86 F1 | 	sub	local01, #28
2f97c     1F 33 82 F1 | 	sub	local07, local13
2f980     20 33 12 F2 | 	cmp	local07, local14 wc
2f984     3C 00 90 3D |  if_ae	jmp	#LR__4735
2f988     28 26 06 F1 | 	add	local01, #40
2f98c     13 13 02 F6 | 	mov	arg01, local01
2f990     17 15 02 F6 | 	mov	arg02, local05
2f994     0C 26 86 F1 | 	sub	local01, #12
2f998     13 3D 02 FB | 	rdlong	local12, local01
2f99c     1F 3D 82 F1 | 	sub	local12, local13
2f9a0     09 3C 66 F0 | 	shl	local12, #9
2f9a4     1E 15 02 F1 | 	add	arg02, local12
2f9a8     09 16 C6 F9 | 	decod	arg03, #9
2f9ac     18 56 BF FD | 	call	#__system____builtin_memmove
2f9b0     0C 26 86 F1 | 	sub	local01, #12
2f9b4     13 33 C2 FA | 	rdbyte	local07, local01
2f9b8     7F 32 06 F5 | 	and	local07, #127
2f9bc     13 33 42 FC | 	wrbyte	local07, local01
2f9c0     10 26 86 F1 | 	sub	local01, #16
2f9c4                 | LR__4735
2f9c4     20 43 02 F6 | 	mov	local15, local14
2f9c8     09 42 66 F0 | 	shl	local15, #9
2f9cc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2f9cc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2f9cc                 | ' 				}
2f9cc                 | ' 
2f9cc                 | ' 
2f9cc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2f9cc                 | ' 				continue;
2f9cc     C4 00 90 FD | 	jmp	#LR__4739
2f9d0                 | LR__4736
2f9d0     1C 26 06 F1 | 	add	local01, #28
2f9d4     13 33 02 FB | 	rdlong	local07, local01
2f9d8     1C 26 86 F1 | 	sub	local01, #28
2f9dc     1F 33 0A F2 | 	cmp	local07, local13 wz
2f9e0     58 00 90 AD |  if_e	jmp	#LR__4737
2f9e4     14 26 06 F1 | 	add	local01, #20
2f9e8     13 41 02 FB | 	rdlong	local14, local01
2f9ec     08 26 86 F1 | 	sub	local01, #8
2f9f0     13 43 02 FB | 	rdlong	local15, local01
2f9f4     0C 26 86 F1 | 	sub	local01, #12
2f9f8     21 41 12 F2 | 	cmp	local14, local15 wc
2f9fc     3C 00 90 3D |  if_ae	jmp	#LR__4737
2fa00     18 4E 05 F1 | 	add	fp, #24
2fa04     A7 42 02 FB | 	rdlong	local15, fp
2fa08     18 4E 85 F1 | 	sub	fp, #24
2fa0c     01 42 06 F1 | 	add	local15, #1
2fa10     21 13 C2 FA | 	rdbyte	arg01, local15
2fa14     13 15 02 F6 | 	mov	arg02, local01
2fa18     28 14 06 F1 | 	add	arg02, #40
2fa1c     1F 17 02 F6 | 	mov	arg03, local13
2fa20     01 18 06 F6 | 	mov	arg04, #1
2fa24     44 C1 BF FD | 	call	#_fatfs_cc_disk_read
2fa28     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa2c     11 26 06 51 |  if_ne	add	local01, #17
2fa30     13 03 48 5C |  if_ne	wrbyte	#1, local01
2fa34                 | ' 				fp->fptr < fp->obj.objsize &&
2fa34                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2fa34                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2fa34     01 FA 05 56 |  if_ne	mov	result1, #1
2fa38     C8 00 90 5D |  if_ne	jmp	#LR__4741
2fa3c                 | LR__4737
2fa3c     1C 26 06 F1 | 	add	local01, #28
2fa40     13 3F 62 FC | 	wrlong	local13, local01
2fa44     1C 26 86 F1 | 	sub	local01, #28
2fa48                 | LR__4738
2fa48     14 26 06 F1 | 	add	local01, #20
2fa4c     13 39 02 FB | 	rdlong	local10, local01
2fa50     FF 39 06 F5 | 	and	local10, #511
2fa54     09 42 C6 F9 | 	decod	local15, #9
2fa58     1C 43 82 F1 | 	sub	local15, local10
2fa5c     15 43 3A F3 | 	fle	local15, local03 wcz
2fa60     13 13 02 F6 | 	mov	arg01, local01
2fa64     14 12 06 F1 | 	add	arg01, #20
2fa68     13 41 02 FB | 	rdlong	local14, local01
2fa6c     FF 41 06 F5 | 	and	local14, #511
2fa70     20 13 02 F1 | 	add	arg01, local14
2fa74     17 15 02 F6 | 	mov	arg02, local05
2fa78     21 17 02 F6 | 	mov	arg03, local15
2fa7c     48 55 BF FD | 	call	#__system____builtin_memmove
2fa80     04 26 86 F1 | 	sub	local01, #4
2fa84     13 33 C2 FA | 	rdbyte	local07, local01
2fa88     80 32 46 F5 | 	or	local07, #128
2fa8c     13 33 42 FC | 	wrbyte	local07, local01
2fa90     10 26 86 F1 | 	sub	local01, #16
2fa94                 | LR__4739
2fa94     21 2B 82 F1 | 	sub	local03, local15
2fa98     16 33 02 FB | 	rdlong	local07, local04
2fa9c     21 33 02 F1 | 	add	local07, local15
2faa0     16 33 62 FC | 	wrlong	local07, local04
2faa4     21 2F 02 F1 | 	add	local05, local15
2faa8     14 26 06 F1 | 	add	local01, #20
2faac     13 39 02 FB | 	rdlong	local10, local01
2fab0     21 39 02 F1 | 	add	local10, local15
2fab4     13 39 62 FC | 	wrlong	local10, local01
2fab8     08 26 86 F1 | 	sub	local01, #8
2fabc     13 37 02 FB | 	rdlong	local09, local01
2fac0     0C 26 86 F1 | 	sub	local01, #12
2fac4     1B 39 1A F2 | 	cmp	local10, local09 wcz
2fac8     14 26 06 11 |  if_a	add	local01, #20
2facc     13 33 02 1B |  if_a	rdlong	local07, local01
2fad0     14 26 86 11 |  if_a	sub	local01, #20
2fad4     0C 26 06 E1 |  if_be	add	local01, #12
2fad8     13 33 02 EB |  if_be	rdlong	local07, local01
2fadc     0C 26 86 E1 |  if_be	sub	local01, #12
2fae0     0C 26 06 F1 | 	add	local01, #12
2fae4     13 33 62 FC | 	wrlong	local07, local01
2fae8     0C 26 86 F1 | 	sub	local01, #12
2faec     70 FC 9F FD | 	jmp	#LR__4730
2faf0                 | LR__4740
2faf0     10 26 06 F1 | 	add	local01, #16
2faf4     13 33 C2 FA | 	rdbyte	local07, local01
2faf8     40 32 46 F5 | 	or	local07, #64
2fafc     13 33 42 FC | 	wrbyte	local07, local01
2fb00                 | ' 
2fb00                 | ' 
2fb00                 | ' 
2fb00                 | ' 
2fb00                 | ' 
2fb00                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2fb00                 | ' 		fp->flag |=  0x80 ;
2fb00                 | ' 
2fb00                 | ' 	}
2fb00                 | ' 
2fb00                 | ' 	fp->flag |=  0x40 ;
2fb00                 | ' 
2fb00                 | ' 	return FR_OK ;
2fb00     00 FA 05 F6 | 	mov	result1, #0
2fb04                 | LR__4741
2fb04     A7 F0 03 F6 | 	mov	ptra, fp
2fb08     B2 00 A0 FD | 	call	#popregs_
2fb0c                 | _fatfs_cc_f_write_ret
2fb0c     2D 00 64 FD | 	ret
2fb10                 | 
2fb10                 | _fatfs_cc_f_sync
2fb10     03 4A 05 F6 | 	mov	COUNT_, #3
2fb14     A8 00 A0 FD | 	call	#pushregs_
2fb18     18 F0 07 F1 | 	add	ptra, #24
2fb1c     09 27 02 F6 | 	mov	local01, arg01
2fb20     A7 14 02 F6 | 	mov	arg02, fp
2fb24     0C 14 06 F1 | 	add	arg02, #12
2fb28     13 13 02 F6 | 	mov	arg01, local01
2fb2c     6C F2 BF FD | 	call	#_fatfs_cc_validate
2fb30     FD 28 0A F6 | 	mov	local02, result1 wz
2fb34     30 01 90 5D |  if_ne	jmp	#LR__4753
2fb38     10 26 06 F1 | 	add	local01, #16
2fb3c     13 19 C2 FA | 	rdbyte	arg04, local01
2fb40     10 26 86 F1 | 	sub	local01, #16
2fb44     40 18 CE F7 | 	test	arg04, #64 wz
2fb48     1C 01 90 AD |  if_e	jmp	#LR__4752
2fb4c     10 26 06 F1 | 	add	local01, #16
2fb50     13 29 C2 FA | 	rdbyte	local02, local01
2fb54     10 26 86 F1 | 	sub	local01, #16
2fb58     80 28 CE F7 | 	test	local02, #128 wz
2fb5c     50 00 90 AD |  if_e	jmp	#LR__4750
2fb60     0C 4E 05 F1 | 	add	fp, #12
2fb64     A7 28 02 FB | 	rdlong	local02, fp
2fb68     0C 4E 85 F1 | 	sub	fp, #12
2fb6c     01 28 06 F1 | 	add	local02, #1
2fb70     14 13 C2 FA | 	rdbyte	arg01, local02
2fb74     28 26 06 F1 | 	add	local01, #40
2fb78     13 15 02 F6 | 	mov	arg02, local01
2fb7c     0C 26 86 F1 | 	sub	local01, #12
2fb80     13 17 02 FB | 	rdlong	arg03, local01
2fb84     1C 26 86 F1 | 	sub	local01, #28
2fb88     01 18 06 F6 | 	mov	arg04, #1
2fb8c     18 C1 BF FD | 	call	#_fatfs_cc_disk_write
2fb90     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb94     01 FA 05 56 |  if_ne	mov	result1, #1
2fb98     D0 00 90 5D |  if_ne	jmp	#LR__4754
2fb9c     10 26 06 F1 | 	add	local01, #16
2fba0     13 29 C2 FA | 	rdbyte	local02, local01
2fba4     7F 28 06 F5 | 	and	local02, #127
2fba8     13 29 42 FC | 	wrbyte	local02, local01
2fbac     10 26 86 F1 | 	sub	local01, #16
2fbb0                 | LR__4750
2fbb0     50 0E B0 FD | 	call	#_fatfs_cc__get_fattime
2fbb4     FD 2A 02 F6 | 	mov	local03, result1
2fbb8     0C 4E 05 F1 | 	add	fp, #12
2fbbc     A7 12 02 FB | 	rdlong	arg01, fp
2fbc0     0C 4E 85 F1 | 	sub	fp, #12
2fbc4     20 26 06 F1 | 	add	local01, #32
2fbc8     13 15 02 FB | 	rdlong	arg02, local01
2fbcc     20 26 86 F1 | 	sub	local01, #32
2fbd0     1C C6 BF FD | 	call	#_fatfs_cc_move_window
2fbd4     FD 28 0A F6 | 	mov	local02, result1 wz
2fbd8     8C 00 90 5D |  if_ne	jmp	#LR__4751
2fbdc     24 26 06 F1 | 	add	local01, #36
2fbe0     13 29 02 FB | 	rdlong	local02, local01
2fbe4     24 26 86 F1 | 	sub	local01, #36
2fbe8     0B 28 06 F1 | 	add	local02, #11
2fbec     14 19 C2 FA | 	rdbyte	arg04, local02
2fbf0     20 18 46 F5 | 	or	arg04, #32
2fbf4     14 19 42 FC | 	wrbyte	arg04, local02
2fbf8     0B 28 86 F1 | 	sub	local02, #11
2fbfc     13 13 02 FB | 	rdlong	arg01, local01
2fc00     08 26 06 F1 | 	add	local01, #8
2fc04     13 17 02 FB | 	rdlong	arg03, local01
2fc08     14 15 02 F6 | 	mov	arg02, local02
2fc0c     44 D3 BF FD | 	call	#_fatfs_cc_st_clust
2fc10     14 13 02 F6 | 	mov	arg01, local02
2fc14     1C 12 06 F1 | 	add	arg01, #28
2fc18     04 26 06 F1 | 	add	local01, #4
2fc1c     13 15 02 FB | 	rdlong	arg02, local01
2fc20     09 15 62 FC | 	wrlong	arg02, arg01
2fc24     14 13 02 F6 | 	mov	arg01, local02
2fc28     16 12 06 F1 | 	add	arg01, #22
2fc2c     09 2B 62 FC | 	wrlong	local03, arg01
2fc30     12 28 06 F1 | 	add	local02, #18
2fc34     14 01 58 FC | 	wrword	#0, local02
2fc38     0C 4E 05 F1 | 	add	fp, #12
2fc3c     A7 2A 02 FB | 	rdlong	local03, fp
2fc40     03 2A 06 F1 | 	add	local03, #3
2fc44     15 03 48 FC | 	wrbyte	#1, local03
2fc48     A7 12 02 FB | 	rdlong	arg01, fp
2fc4c     0C 4E 85 F1 | 	sub	fp, #12
2fc50     14 C6 BF FD | 	call	#_fatfs_cc_sync_fs
2fc54     FD 28 02 F6 | 	mov	local02, result1
2fc58     04 26 06 F1 | 	add	local01, #4
2fc5c     13 2B C2 FA | 	rdbyte	local03, local01
2fc60     BF 2A 06 F5 | 	and	local03, #191
2fc64     13 2B 42 FC | 	wrbyte	local03, local01
2fc68                 | LR__4751
2fc68                 | LR__4752
2fc68                 | LR__4753
2fc68                 | ' 					dir = fp->dir_ptr;
2fc68                 | ' 					dir[ 11 ] |=  0x20 ;
2fc68                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2fc68                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2fc68                 | ' 					st_dword(dir +  22 , tm);
2fc68                 | ' 					st_word(dir +  18 , 0);
2fc68                 | ' 					fs->wflag = 1;
2fc68                 | ' 					res = sync_fs(fs);
2fc68                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2fc68                 | ' 				}
2fc68                 | ' 			}
2fc68                 | ' 		}
2fc68                 | ' 	}
2fc68                 | ' 
2fc68                 | ' 	return res ;
2fc68     14 FB 01 F6 | 	mov	result1, local02
2fc6c                 | LR__4754
2fc6c     A7 F0 03 F6 | 	mov	ptra, fp
2fc70     B2 00 A0 FD | 	call	#popregs_
2fc74                 | _fatfs_cc_f_sync_ret
2fc74     2D 00 64 FD | 	ret
2fc78                 | 
2fc78                 | _fatfs_cc_f_close
2fc78     02 4A 05 F6 | 	mov	COUNT_, #2
2fc7c     A8 00 A0 FD | 	call	#pushregs_
2fc80     10 F0 07 F1 | 	add	ptra, #16
2fc84     09 27 02 F6 | 	mov	local01, arg01
2fc88     84 FE BF FD | 	call	#_fatfs_cc_f_sync
2fc8c     FD 28 0A F6 | 	mov	local02, result1 wz
2fc90     18 00 90 5D |  if_ne	jmp	#LR__4760
2fc94     A7 14 02 F6 | 	mov	arg02, fp
2fc98     0C 14 06 F1 | 	add	arg02, #12
2fc9c     13 13 02 F6 | 	mov	arg01, local01
2fca0     F8 F0 BF FD | 	call	#_fatfs_cc_validate
2fca4     FD 28 0A F6 | 	mov	local02, result1 wz
2fca8     13 01 68 AC |  if_e	wrlong	#0, local01
2fcac                 | LR__4760
2fcac                 | ' 
2fcac                 | ' 
2fcac                 | ' 
2fcac                 | ' 
2fcac                 | ' 			fp->obj.fs = 0;
2fcac                 | ' #line 4192 "ff.c"
2fcac                 | ' 		}
2fcac                 | ' 	}
2fcac                 | ' 	return res;
2fcac     14 FB 01 F6 | 	mov	result1, local02
2fcb0     A7 F0 03 F6 | 	mov	ptra, fp
2fcb4     B2 00 A0 FD | 	call	#popregs_
2fcb8                 | _fatfs_cc_f_close_ret
2fcb8     2D 00 64 FD | 	ret
2fcbc                 | 
2fcbc                 | _fatfs_cc_f_lseek
2fcbc     0D 4A 05 F6 | 	mov	COUNT_, #13
2fcc0     A8 00 A0 FD | 	call	#pushregs_
2fcc4     24 F0 07 F1 | 	add	ptra, #36
2fcc8     09 27 02 F6 | 	mov	local01, arg01
2fccc     0A 29 02 F6 | 	mov	local02, arg02
2fcd0     A7 14 02 F6 | 	mov	arg02, fp
2fcd4     10 14 06 F1 | 	add	arg02, #16
2fcd8     13 13 02 F6 | 	mov	arg01, local01
2fcdc     BC F0 BF FD | 	call	#_fatfs_cc_validate
2fce0     FD 2A 0A F6 | 	mov	local03, result1 wz
2fce4     11 26 06 A1 |  if_e	add	local01, #17
2fce8     13 2B C2 AA |  if_e	rdbyte	local03, local01
2fcec     11 26 86 A1 |  if_e	sub	local01, #17
2fcf0     00 2A 0E F2 | 	cmp	local03, #0 wz
2fcf4     15 FB 01 56 |  if_ne	mov	result1, local03
2fcf8     54 03 90 5D |  if_ne	jmp	#LR__4785
2fcfc     0C 26 06 F1 | 	add	local01, #12
2fd00     13 2D 02 FB | 	rdlong	local04, local01
2fd04     0C 26 86 F1 | 	sub	local01, #12
2fd08     16 29 1A F2 | 	cmp	local02, local04 wcz
2fd0c     20 00 90 ED |  if_be	jmp	#LR__4770
2fd10     10 26 06 F1 | 	add	local01, #16
2fd14     13 2F C2 FA | 	rdbyte	local05, local01
2fd18     10 26 86 F1 | 	sub	local01, #16
2fd1c     17 31 E2 F8 | 	getbyte	local06, local05, #0
2fd20     02 30 CE F7 | 	test	local06, #2 wz
2fd24     0C 26 06 A1 |  if_e	add	local01, #12
2fd28     13 29 02 AB |  if_e	rdlong	local02, local01
2fd2c     0C 26 86 A1 |  if_e	sub	local01, #12
2fd30                 | LR__4770
2fd30     14 26 06 F1 | 	add	local01, #20
2fd34     13 33 02 FB | 	rdlong	local07, local01
2fd38     00 34 06 F6 | 	mov	local08, #0
2fd3c     13 01 68 FC | 	wrlong	#0, local01
2fd40     14 26 86 F1 | 	sub	local01, #20
2fd44     01 28 16 F2 | 	cmp	local02, #1 wc
2fd48     F0 01 90 CD |  if_b	jmp	#LR__4782
2fd4c     10 4E 05 F1 | 	add	fp, #16
2fd50     A7 36 02 FB | 	rdlong	local09, fp
2fd54     0A 36 06 F1 | 	add	local09, #10
2fd58     1B 2F E2 FA | 	rdword	local05, local09
2fd5c     17 39 32 F9 | 	getword	local10, local05, #0
2fd60     09 38 66 F0 | 	shl	local10, #9
2fd64     1C 3B 02 F6 | 	mov	local11, local10
2fd68     01 32 16 F2 | 	cmp	local07, #1 wc
2fd6c     14 37 02 36 |  if_ae	mov	local09, local02
2fd70     01 36 86 31 |  if_ae	sub	local09, #1
2fd74     1D 37 12 3D |  if_ae	qdiv	local09, local11
2fd78     10 4E 85 F1 | 	sub	fp, #16
2fd7c     19 2F 02 36 |  if_ae	mov	local05, local07
2fd80     01 2E 86 31 |  if_ae	sub	local05, #1
2fd84     1D 3D 02 36 |  if_ae	mov	local12, local11
2fd88     18 36 62 3D |  if_ae	getqx	local09
2fd8c     1E 2F 12 3D |  if_ae	qdiv	local05, local12
2fd90     18 38 62 3D |  if_ae	getqx	local10
2fd94     1C 37 12 32 |  if_ae	cmp	local09, local10 wc
2fd98     30 00 90 CD |  if_b	jmp	#LR__4771
2fd9c     19 31 02 F6 | 	mov	local06, local07
2fda0     01 30 86 F1 | 	sub	local06, #1
2fda4     1D 37 02 F6 | 	mov	local09, local11
2fda8     01 36 86 F1 | 	sub	local09, #1
2fdac     1B 31 22 F5 | 	andn	local06, local09
2fdb0     14 26 06 F1 | 	add	local01, #20
2fdb4     13 31 62 FC | 	wrlong	local06, local01
2fdb8     18 29 82 F1 | 	sub	local02, local06
2fdbc     04 26 06 F1 | 	add	local01, #4
2fdc0     13 3F 02 FB | 	rdlong	local13, local01
2fdc4     18 26 86 F1 | 	sub	local01, #24
2fdc8     64 00 90 FD | 	jmp	#LR__4773
2fdcc                 | LR__4771
2fdcc     08 26 06 F1 | 	add	local01, #8
2fdd0     13 3F 0A FB | 	rdlong	local13, local01 wz
2fdd4     08 26 86 F1 | 	sub	local01, #8
2fdd8     48 00 90 5D |  if_ne	jmp	#LR__4772
2fddc     13 13 02 F6 | 	mov	arg01, local01
2fde0     00 14 06 F6 | 	mov	arg02, #0
2fde4     80 CA BF FD | 	call	#_fatfs_cc_create_chain
2fde8     FD 3E 02 F6 | 	mov	local13, result1
2fdec     01 3E 0E F2 | 	cmp	local13, #1 wz
2fdf0     11 26 06 A1 |  if_e	add	local01, #17
2fdf4     13 05 48 AC |  if_e	wrbyte	#2, local01
2fdf8     02 FA 05 A6 |  if_e	mov	result1, #2
2fdfc     50 02 90 AD |  if_e	jmp	#LR__4785
2fe00     FF FF 7F FF 
2fe04     FF 3F 0E F2 | 	cmp	local13, ##-1 wz
2fe08     11 26 06 A1 |  if_e	add	local01, #17
2fe0c     13 03 48 AC |  if_e	wrbyte	#1, local01
2fe10     01 FA 05 A6 |  if_e	mov	result1, #1
2fe14     38 02 90 AD |  if_e	jmp	#LR__4785
2fe18     08 26 06 F1 | 	add	local01, #8
2fe1c     13 3F 62 FC | 	wrlong	local13, local01
2fe20     08 26 86 F1 | 	sub	local01, #8
2fe24                 | LR__4772
2fe24     18 26 06 F1 | 	add	local01, #24
2fe28     13 3F 62 FC | 	wrlong	local13, local01
2fe2c     18 26 86 F1 | 	sub	local01, #24
2fe30                 | LR__4773
2fe30     00 3E 0E F2 | 	cmp	local13, #0 wz
2fe34     04 01 90 AD |  if_e	jmp	#LR__4781
2fe38                 | ' 				while (ofs > bcs) {
2fe38                 | LR__4774
2fe38     1D 29 1A F2 | 	cmp	local02, local11 wcz
2fe3c     B0 00 90 ED |  if_be	jmp	#LR__4779
2fe40     1D 29 82 F1 | 	sub	local02, local11
2fe44     14 26 06 F1 | 	add	local01, #20
2fe48     13 2D 02 FB | 	rdlong	local04, local01
2fe4c     1D 2D 02 F1 | 	add	local04, local11
2fe50     13 2D 62 FC | 	wrlong	local04, local01
2fe54     04 26 86 F1 | 	sub	local01, #4
2fe58     13 2D C2 FA | 	rdbyte	local04, local01
2fe5c     10 26 86 F1 | 	sub	local01, #16
2fe60     02 2C CE F7 | 	test	local04, #2 wz
2fe64     1C 00 90 AD |  if_e	jmp	#LR__4775
2fe68     13 13 02 F6 | 	mov	arg01, local01
2fe6c     1F 15 02 F6 | 	mov	arg02, local13
2fe70     F4 C9 BF FD | 	call	#_fatfs_cc_create_chain
2fe74     FD 3E 0A F6 | 	mov	local13, result1 wz
2fe78     00 28 06 A6 |  if_e	mov	local02, #0
2fe7c                 | ' 							ofs = 0; break;
2fe7c     70 00 90 AD |  if_e	jmp	#LR__4779
2fe80     10 00 90 FD | 	jmp	#LR__4776
2fe84                 | LR__4775
2fe84     13 13 02 F6 | 	mov	arg01, local01
2fe88     1F 15 02 F6 | 	mov	arg02, local13
2fe8c     14 C5 BF FD | 	call	#_fatfs_cc_get_fat
2fe90     FD 3E 02 F6 | 	mov	local13, result1
2fe94                 | LR__4776
2fe94     FF FF 7F FF 
2fe98     FF 3F 0E F2 | 	cmp	local13, ##-1 wz
2fe9c     11 26 06 A1 |  if_e	add	local01, #17
2fea0     13 03 48 AC |  if_e	wrbyte	#1, local01
2fea4     01 FA 05 A6 |  if_e	mov	result1, #1
2fea8     A4 01 90 AD |  if_e	jmp	#LR__4785
2feac     02 3E 16 F2 | 	cmp	local13, #2 wc
2feb0     1C 00 90 CD |  if_b	jmp	#LR__4777
2feb4     10 4E 05 F1 | 	add	fp, #16
2feb8     A7 2C 02 FB | 	rdlong	local04, fp
2febc     10 4E 85 F1 | 	sub	fp, #16
2fec0     18 2C 06 F1 | 	add	local04, #24
2fec4     16 2F 02 FB | 	rdlong	local05, local04
2fec8     17 3F 12 F2 | 	cmp	local13, local05 wc
2fecc     10 00 90 CD |  if_b	jmp	#LR__4778
2fed0                 | LR__4777
2fed0     11 26 06 F1 | 	add	local01, #17
2fed4     13 05 48 FC | 	wrbyte	#2, local01
2fed8     02 FA 05 F6 | 	mov	result1, #2
2fedc     70 01 90 FD | 	jmp	#LR__4785
2fee0                 | LR__4778
2fee0     18 26 06 F1 | 	add	local01, #24
2fee4     13 3F 62 FC | 	wrlong	local13, local01
2fee8     18 26 86 F1 | 	sub	local01, #24
2feec     48 FF 9F FD | 	jmp	#LR__4774
2fef0                 | LR__4779
2fef0     14 26 06 F1 | 	add	local01, #20
2fef4     13 2D 02 FB | 	rdlong	local04, local01
2fef8     14 2D 02 F1 | 	add	local04, local02
2fefc     13 2D 62 FC | 	wrlong	local04, local01
2ff00     14 26 86 F1 | 	sub	local01, #20
2ff04     FF 29 CE F7 | 	test	local02, #511 wz
2ff08     30 00 90 AD |  if_e	jmp	#LR__4780
2ff0c     10 4E 05 F1 | 	add	fp, #16
2ff10     A7 12 02 FB | 	rdlong	arg01, fp
2ff14     10 4E 85 F1 | 	sub	fp, #16
2ff18     1F 15 02 F6 | 	mov	arg02, local13
2ff1c     48 C4 BF FD | 	call	#_fatfs_cc_clst2sect
2ff20     FD 34 0A F6 | 	mov	local08, result1 wz
2ff24     11 26 06 A1 |  if_e	add	local01, #17
2ff28     13 05 48 AC |  if_e	wrbyte	#2, local01
2ff2c     02 FA 05 A6 |  if_e	mov	result1, #2
2ff30     1C 01 90 AD |  if_e	jmp	#LR__4785
2ff34     09 28 46 F0 | 	shr	local02, #9
2ff38     14 35 02 F1 | 	add	local08, local02
2ff3c                 | LR__4780
2ff3c                 | LR__4781
2ff3c                 | LR__4782
2ff3c     14 26 06 F1 | 	add	local01, #20
2ff40     13 2D 02 FB | 	rdlong	local04, local01
2ff44     08 26 86 F1 | 	sub	local01, #8
2ff48     13 31 02 FB | 	rdlong	local06, local01
2ff4c     0C 26 86 F1 | 	sub	local01, #12
2ff50     18 2D 1A F2 | 	cmp	local04, local06 wcz
2ff54     14 26 06 11 |  if_a	add	local01, #20
2ff58     13 2D 02 1B |  if_a	rdlong	local04, local01
2ff5c     08 26 86 11 |  if_a	sub	local01, #8
2ff60     13 2D 62 1C |  if_a	wrlong	local04, local01
2ff64     04 26 06 11 |  if_a	add	local01, #4
2ff68     13 2D C2 1A |  if_a	rdbyte	local04, local01
2ff6c     40 2C 46 15 |  if_a	or	local04, #64
2ff70     13 2D 42 1C |  if_a	wrbyte	local04, local01
2ff74     10 26 86 11 |  if_a	sub	local01, #16
2ff78     14 26 06 F1 | 	add	local01, #20
2ff7c     13 2D 02 FB | 	rdlong	local04, local01
2ff80     14 26 86 F1 | 	sub	local01, #20
2ff84     FF 2D CE F7 | 	test	local04, #511 wz
2ff88     1C 26 06 51 |  if_ne	add	local01, #28
2ff8c     13 2F 02 5B |  if_ne	rdlong	local05, local01
2ff90     1C 26 86 51 |  if_ne	sub	local01, #28
2ff94     17 35 0A 52 |  if_ne	cmp	local08, local05 wz
2ff98     B0 00 90 AD |  if_e	jmp	#LR__4784
2ff9c     10 26 06 F1 | 	add	local01, #16
2ffa0     13 2D C2 FA | 	rdbyte	local04, local01
2ffa4     10 26 86 F1 | 	sub	local01, #16
2ffa8     80 2C CE F7 | 	test	local04, #128 wz
2ffac     58 00 90 AD |  if_e	jmp	#LR__4783
2ffb0     10 4E 05 F1 | 	add	fp, #16
2ffb4     A7 36 02 FB | 	rdlong	local09, fp
2ffb8     10 4E 85 F1 | 	sub	fp, #16
2ffbc     01 36 06 F1 | 	add	local09, #1
2ffc0     1B 13 C2 FA | 	rdbyte	arg01, local09
2ffc4     28 26 06 F1 | 	add	local01, #40
2ffc8     13 15 02 F6 | 	mov	arg02, local01
2ffcc     0C 26 86 F1 | 	sub	local01, #12
2ffd0     13 17 02 FB | 	rdlong	arg03, local01
2ffd4     1C 26 86 F1 | 	sub	local01, #28
2ffd8     01 18 06 F6 | 	mov	arg04, #1
2ffdc     C8 BC BF FD | 	call	#_fatfs_cc_disk_write
2ffe0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ffe4     11 26 06 51 |  if_ne	add	local01, #17
2ffe8     13 03 48 5C |  if_ne	wrbyte	#1, local01
2ffec     01 FA 05 56 |  if_ne	mov	result1, #1
2fff0     5C 00 90 5D |  if_ne	jmp	#LR__4785
2fff4     10 26 06 F1 | 	add	local01, #16
2fff8     13 2D C2 FA | 	rdbyte	local04, local01
2fffc     7F 2C 06 F5 | 	and	local04, #127
30000     13 2D 42 FC | 	wrbyte	local04, local01
30004     10 26 86 F1 | 	sub	local01, #16
30008                 | LR__4783
30008     10 4E 05 F1 | 	add	fp, #16
3000c     A7 36 02 FB | 	rdlong	local09, fp
30010     10 4E 85 F1 | 	sub	fp, #16
30014     01 36 06 F1 | 	add	local09, #1
30018     1B 13 C2 FA | 	rdbyte	arg01, local09
3001c     13 15 02 F6 | 	mov	arg02, local01
30020     28 14 06 F1 | 	add	arg02, #40
30024     1A 17 02 F6 | 	mov	arg03, local08
30028     01 18 06 F6 | 	mov	arg04, #1
3002c     3C BB BF FD | 	call	#_fatfs_cc_disk_read
30030     00 FA 0D F2 | 	cmp	result1, #0 wz
30034     11 26 06 51 |  if_ne	add	local01, #17
30038     13 03 48 5C |  if_ne	wrbyte	#1, local01
3003c     01 FA 05 56 |  if_ne	mov	result1, #1
30040     0C 00 90 5D |  if_ne	jmp	#LR__4785
30044     1C 26 06 F1 | 	add	local01, #28
30048     13 35 62 FC | 	wrlong	local08, local01
3004c                 | LR__4784
3004c                 | ' 
3004c                 | ' 			fp->sect = nsect;
3004c                 | ' 		}
3004c                 | ' 	}
3004c                 | ' 
3004c                 | ' 	return res ;
3004c     15 FB 01 F6 | 	mov	result1, local03
30050                 | LR__4785
30050     A7 F0 03 F6 | 	mov	ptra, fp
30054     B2 00 A0 FD | 	call	#popregs_
30058                 | _fatfs_cc_f_lseek_ret
30058     2D 00 64 FD | 	ret
3005c                 | 
3005c                 | _fatfs_cc_f_opendir
3005c     02 4A 05 F6 | 	mov	COUNT_, #2
30060     A8 00 A0 FD | 	call	#pushregs_
30064     14 F0 07 F1 | 	add	ptra, #20
30068     09 27 0A F6 | 	mov	local01, arg01 wz
3006c     08 4E 05 F1 | 	add	fp, #8
30070     A7 14 62 FC | 	wrlong	arg02, fp
30074     08 4E 85 F1 | 	sub	fp, #8
30078     09 FA 05 A6 |  if_e	mov	result1, #9
3007c     EC 00 90 AD |  if_e	jmp	#LR__4796
30080     08 4E 05 F1 | 	add	fp, #8
30084     A7 12 02 F6 | 	mov	arg01, fp
30088     08 4E 05 F1 | 	add	fp, #8
3008c     A7 14 02 F6 | 	mov	arg02, fp
30090     10 4E 85 F1 | 	sub	fp, #16
30094     00 16 06 F6 | 	mov	arg03, #0
30098     DC E7 BF FD | 	call	#_fatfs_cc_mount_volume
3009c     FD 28 0A F6 | 	mov	local02, result1 wz
300a0     BC 00 90 5D |  if_ne	jmp	#LR__4795
300a4     10 4E 05 F1 | 	add	fp, #16
300a8     A7 28 02 FB | 	rdlong	local02, fp
300ac     13 29 62 FC | 	wrlong	local02, local01
300b0     08 4E 85 F1 | 	sub	fp, #8
300b4     A7 14 02 FB | 	rdlong	arg02, fp
300b8     08 4E 85 F1 | 	sub	fp, #8
300bc     13 13 02 F6 | 	mov	arg01, local01
300c0     24 E3 BF FD | 	call	#_fatfs_cc_follow_path
300c4     FD 28 0A F6 | 	mov	local02, result1 wz
300c8     8C 00 90 5D |  if_ne	jmp	#LR__4794
300cc     2B 26 06 F1 | 	add	local01, #43
300d0     13 17 C2 FA | 	rdbyte	arg03, local01
300d4     2B 26 86 F1 | 	sub	local01, #43
300d8     80 16 CE F7 | 	test	arg03, #128 wz
300dc     40 00 90 5D |  if_ne	jmp	#LR__4792
300e0     06 26 06 F1 | 	add	local01, #6
300e4     13 17 C2 FA | 	rdbyte	arg03, local01
300e8     06 26 86 F1 | 	sub	local01, #6
300ec     10 16 CE F7 | 	test	arg03, #16 wz
300f0     28 00 90 AD |  if_e	jmp	#LR__4790
300f4     10 4E 05 F1 | 	add	fp, #16
300f8     A7 12 02 FB | 	rdlong	arg01, fp
300fc     10 4E 85 F1 | 	sub	fp, #16
30100     1C 26 06 F1 | 	add	local01, #28
30104     13 15 02 FB | 	rdlong	arg02, local01
30108     14 CE BF FD | 	call	#_fatfs_cc_ld_clust
3010c     14 26 86 F1 | 	sub	local01, #20
30110     13 FB 61 FC | 	wrlong	result1, local01
30114     08 26 86 F1 | 	sub	local01, #8
30118     04 00 90 FD | 	jmp	#LR__4791
3011c                 | LR__4790
3011c     05 28 06 F6 | 	mov	local02, #5
30120                 | LR__4791
30120                 | LR__4792
30120     00 28 0E F2 | 	cmp	local02, #0 wz
30124     30 00 90 5D |  if_ne	jmp	#LR__4793
30128     10 4E 05 F1 | 	add	fp, #16
3012c     A7 28 02 FB | 	rdlong	local02, fp
30130     10 4E 85 F1 | 	sub	fp, #16
30134     06 28 06 F1 | 	add	local02, #6
30138     14 29 E2 FA | 	rdword	local02, local02
3013c     04 26 06 F1 | 	add	local01, #4
30140     13 29 52 FC | 	wrword	local02, local01
30144     04 26 86 F1 | 	sub	local01, #4
30148     13 13 02 F6 | 	mov	arg01, local01
3014c     00 14 06 F6 | 	mov	arg02, #0
30150     F8 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30154     FD 28 02 F6 | 	mov	local02, result1
30158                 | LR__4793
30158                 | LR__4794
30158     04 28 0E F2 | 	cmp	local02, #4 wz
3015c     05 28 06 A6 |  if_e	mov	local02, #5
30160                 | LR__4795
30160     00 28 0E F2 | 	cmp	local02, #0 wz
30164     13 01 68 5C |  if_ne	wrlong	#0, local01
30168                 | ' 
30168                 | ' 	return res ;
30168     14 FB 01 F6 | 	mov	result1, local02
3016c                 | LR__4796
3016c     A7 F0 03 F6 | 	mov	ptra, fp
30170     B2 00 A0 FD | 	call	#popregs_
30174                 | _fatfs_cc_f_opendir_ret
30174     2D 00 64 FD | 	ret
30178                 | 
30178                 | _fatfs_cc_f_closedir
30178     01 4A 05 F6 | 	mov	COUNT_, #1
3017c     A8 00 A0 FD | 	call	#pushregs_
30180     10 F0 07 F1 | 	add	ptra, #16
30184     09 27 02 F6 | 	mov	local01, arg01
30188     A7 14 02 F6 | 	mov	arg02, fp
3018c     0C 14 06 F1 | 	add	arg02, #12
30190     13 13 02 F6 | 	mov	arg01, local01
30194     04 EC BF FD | 	call	#_fatfs_cc_validate
30198     00 FA 4D F2 | 	cmps	result1, #0 wz
3019c     13 01 68 AC |  if_e	wrlong	#0, local01
301a0                 | ' 
301a0                 | ' 
301a0                 | ' 
301a0                 | ' 
301a0                 | ' 		dp->obj.fs = 0;
301a0                 | ' #line 4633 "ff.c"
301a0                 | ' 	}
301a0                 | ' 	return res;
301a0     A7 F0 03 F6 | 	mov	ptra, fp
301a4     B2 00 A0 FD | 	call	#popregs_
301a8                 | _fatfs_cc_f_closedir_ret
301a8     2D 00 64 FD | 	ret
301ac                 | 
301ac                 | _fatfs_cc_f_readdir
301ac     03 4A 05 F6 | 	mov	COUNT_, #3
301b0     A8 00 A0 FD | 	call	#pushregs_
301b4     14 F0 07 F1 | 	add	ptra, #20
301b8     09 27 02 F6 | 	mov	local01, arg01
301bc     0A 29 02 F6 | 	mov	local02, arg02
301c0     A7 14 02 F6 | 	mov	arg02, fp
301c4     10 14 06 F1 | 	add	arg02, #16
301c8     13 13 02 F6 | 	mov	arg01, local01
301cc     CC EB BF FD | 	call	#_fatfs_cc_validate
301d0     FD 2A 0A F6 | 	mov	local03, result1 wz
301d4     60 00 90 5D |  if_ne	jmp	#LR__4803
301d8     00 28 0E F2 | 	cmp	local02, #0 wz
301dc     14 00 90 5D |  if_ne	jmp	#LR__4800
301e0     13 13 02 F6 | 	mov	arg01, local01
301e4     00 14 06 F6 | 	mov	arg02, #0
301e8     60 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
301ec     FD 2A 02 F6 | 	mov	local03, result1
301f0     44 00 90 FD | 	jmp	#LR__4802
301f4                 | LR__4800
301f4     13 13 02 F6 | 	mov	arg01, local01
301f8     00 14 06 F6 | 	mov	arg02, #0
301fc     D8 D1 BF FD | 	call	#_fatfs_cc_dir_read
30200     FD 2A 02 F6 | 	mov	local03, result1
30204     04 2A 0E F2 | 	cmp	local03, #4 wz
30208     00 2A 06 A6 |  if_e	mov	local03, #0
3020c     00 2A 0E F2 | 	cmp	local03, #0 wz
30210     24 00 90 5D |  if_ne	jmp	#LR__4801
30214     13 13 02 F6 | 	mov	arg01, local01
30218     14 15 02 F6 | 	mov	arg02, local02
3021c     2C D9 BF FD | 	call	#_fatfs_cc_get_fileinfo
30220     13 13 02 F6 | 	mov	arg01, local01
30224     00 14 06 F6 | 	mov	arg02, #0
30228     88 CA BF FD | 	call	#_fatfs_cc_dir_next
3022c     FD 2A 02 F6 | 	mov	local03, result1
30230     04 2A 0E F2 | 	cmp	local03, #4 wz
30234     00 2A 06 A6 |  if_e	mov	local03, #0
30238                 | LR__4801
30238                 | LR__4802
30238                 | LR__4803
30238                 | ' 			}
30238                 | ' 			;
30238                 | ' 		}
30238                 | ' 	}
30238                 | ' 	return res ;
30238     15 FB 01 F6 | 	mov	result1, local03
3023c     A7 F0 03 F6 | 	mov	ptra, fp
30240     B2 00 A0 FD | 	call	#popregs_
30244                 | _fatfs_cc_f_readdir_ret
30244     2D 00 64 FD | 	ret
30248                 | 
30248                 | _fatfs_cc_f_stat
30248     02 4A 05 F6 | 	mov	COUNT_, #2
3024c     A8 00 A0 FD | 	call	#pushregs_
30250     40 F0 07 F1 | 	add	ptra, #64
30254     04 4E 05 F1 | 	add	fp, #4
30258     A7 12 62 FC | 	wrlong	arg01, fp
3025c     0A 27 02 F6 | 	mov	local01, arg02
30260     A7 12 02 F6 | 	mov	arg01, fp
30264     0C 4E 05 F1 | 	add	fp, #12
30268     A7 14 02 F6 | 	mov	arg02, fp
3026c     10 4E 85 F1 | 	sub	fp, #16
30270     00 16 06 F6 | 	mov	arg03, #0
30274     00 E6 BF FD | 	call	#_fatfs_cc_mount_volume
30278     FD 28 0A F6 | 	mov	local02, result1 wz
3027c     4C 00 90 5D |  if_ne	jmp	#LR__4812
30280     10 4E 05 F1 | 	add	fp, #16
30284     A7 12 02 F6 | 	mov	arg01, fp
30288     0C 4E 85 F1 | 	sub	fp, #12
3028c     A7 14 02 FB | 	rdlong	arg02, fp
30290     04 4E 85 F1 | 	sub	fp, #4
30294     50 E1 BF FD | 	call	#_fatfs_cc_follow_path
30298     FD 28 0A F6 | 	mov	local02, result1 wz
3029c     2C 00 90 5D |  if_ne	jmp	#LR__4811
302a0     3B 4E 05 F1 | 	add	fp, #59
302a4     A7 16 C2 FA | 	rdbyte	arg03, fp
302a8     3B 4E 85 F1 | 	sub	fp, #59
302ac     80 16 CE F7 | 	test	arg03, #128 wz
302b0     06 28 06 56 |  if_ne	mov	local02, #6
302b4     14 00 90 5D |  if_ne	jmp	#LR__4810
302b8     00 26 0E F2 | 	cmp	local01, #0 wz
302bc     A7 12 02 56 |  if_ne	mov	arg01, fp
302c0     10 12 06 51 |  if_ne	add	arg01, #16
302c4     13 15 02 56 |  if_ne	mov	arg02, local01
302c8     80 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
302cc                 | LR__4810
302cc                 | LR__4811
302cc                 | LR__4812
302cc                 | ' 			}
302cc                 | ' 		}
302cc                 | ' 		;
302cc                 | ' 	}
302cc                 | ' 
302cc                 | ' 	return res ;
302cc     14 FB 01 F6 | 	mov	result1, local02
302d0     A7 F0 03 F6 | 	mov	ptra, fp
302d4     B2 00 A0 FD | 	call	#popregs_
302d8                 | _fatfs_cc_f_stat_ret
302d8     2D 00 64 FD | 	ret
302dc                 | 
302dc                 | _fatfs_cc_f_unlink
302dc     02 4A 05 F6 | 	mov	COUNT_, #2
302e0     A8 00 A0 FD | 	call	#pushregs_
302e4     74 F0 07 F1 | 	add	ptra, #116
302e8     04 4E 05 F1 | 	add	fp, #4
302ec     A7 12 62 FC | 	wrlong	arg01, fp
302f0     00 26 06 F6 | 	mov	local01, #0
302f4     A7 12 02 F6 | 	mov	arg01, fp
302f8     6C 4E 05 F1 | 	add	fp, #108
302fc     A7 14 02 F6 | 	mov	arg02, fp
30300     70 4E 85 F1 | 	sub	fp, #112
30304     02 16 06 F6 | 	mov	arg03, #2
30308     6C E5 BF FD | 	call	#_fatfs_cc_mount_volume
3030c     FD 28 0A F6 | 	mov	local02, result1 wz
30310     3C 01 90 5D |  if_ne	jmp	#LR__4828
30314     70 4E 05 F1 | 	add	fp, #112
30318     A7 28 02 FB | 	rdlong	local02, fp
3031c     64 4E 85 F1 | 	sub	fp, #100
30320     A7 28 62 FC | 	wrlong	local02, fp
30324     A7 12 02 F6 | 	mov	arg01, fp
30328     08 4E 85 F1 | 	sub	fp, #8
3032c     A7 14 02 FB | 	rdlong	arg02, fp
30330     04 4E 85 F1 | 	sub	fp, #4
30334     B0 E0 BF FD | 	call	#_fatfs_cc_follow_path
30338     FD 28 0A F6 | 	mov	local02, result1 wz
3033c     10 01 90 5D |  if_ne	jmp	#LR__4827
30340     37 4E 05 F1 | 	add	fp, #55
30344     A7 FA C1 FA | 	rdbyte	result1, fp
30348     37 4E 85 F1 | 	sub	fp, #55
3034c     80 FA CD F7 | 	test	result1, #128 wz
30350     06 28 06 56 |  if_ne	mov	local02, #6
30354     14 00 90 5D |  if_ne	jmp	#LR__4820
30358     12 4E 05 F1 | 	add	fp, #18
3035c     A7 FA C1 FA | 	rdbyte	result1, fp
30360     12 4E 85 F1 | 	sub	fp, #18
30364     01 FA CD F7 | 	test	result1, #1 wz
30368     07 28 06 56 |  if_ne	mov	local02, #7
3036c                 | LR__4820
3036c     00 28 0E F2 | 	cmp	local02, #0 wz
30370     84 00 90 5D |  if_ne	jmp	#LR__4823
30374     70 4E 05 F1 | 	add	fp, #112
30378     A7 12 02 FB | 	rdlong	arg01, fp
3037c     48 4E 85 F1 | 	sub	fp, #72
30380     A7 14 02 FB | 	rdlong	arg02, fp
30384     28 4E 85 F1 | 	sub	fp, #40
30388     94 CB BF FD | 	call	#_fatfs_cc_ld_clust
3038c     FD 26 02 F6 | 	mov	local01, result1
30390     12 4E 05 F1 | 	add	fp, #18
30394     A7 FA C1 FA | 	rdbyte	result1, fp
30398     12 4E 85 F1 | 	sub	fp, #18
3039c     10 FA CD F7 | 	test	result1, #16 wz
303a0     54 00 90 AD |  if_e	jmp	#LR__4822
303a4     70 4E 05 F1 | 	add	fp, #112
303a8     A7 28 02 FB | 	rdlong	local02, fp
303ac     34 4E 85 F1 | 	sub	fp, #52
303b0     A7 28 62 FC | 	wrlong	local02, fp
303b4     08 4E 05 F1 | 	add	fp, #8
303b8     A7 26 62 FC | 	wrlong	local01, fp
303bc     08 4E 85 F1 | 	sub	fp, #8
303c0     A7 12 02 F6 | 	mov	arg01, fp
303c4     3C 4E 85 F1 | 	sub	fp, #60
303c8     00 14 06 F6 | 	mov	arg02, #0
303cc     7C C7 BF FD | 	call	#_fatfs_cc_dir_sdi
303d0     FD 28 0A F6 | 	mov	local02, result1 wz
303d4     20 00 90 5D |  if_ne	jmp	#LR__4821
303d8     A7 12 02 F6 | 	mov	arg01, fp
303dc     3C 12 06 F1 | 	add	arg01, #60
303e0     00 14 06 F6 | 	mov	arg02, #0
303e4     F0 CF BF FD | 	call	#_fatfs_cc_dir_read
303e8     FD 28 0A F6 | 	mov	local02, result1 wz
303ec     07 28 06 A6 |  if_e	mov	local02, #7
303f0     04 28 0E F2 | 	cmp	local02, #4 wz
303f4     00 28 06 A6 |  if_e	mov	local02, #0
303f8                 | LR__4821
303f8                 | LR__4822
303f8                 | LR__4823
303f8     00 28 0E F2 | 	cmp	local02, #0 wz
303fc     50 00 90 5D |  if_ne	jmp	#LR__4826
30400     A7 12 02 F6 | 	mov	arg01, fp
30404     0C 12 06 F1 | 	add	arg01, #12
30408     78 D6 BF FD | 	call	#_fatfs_cc_dir_remove
3040c     FD 28 0A F6 | 	mov	local02, result1 wz
30410     20 00 90 5D |  if_ne	jmp	#LR__4824
30414     00 26 0E F2 | 	cmp	local01, #0 wz
30418     18 00 90 AD |  if_e	jmp	#LR__4824
3041c     A7 12 02 F6 | 	mov	arg01, fp
30420     0C 12 06 F1 | 	add	arg01, #12
30424     13 15 02 F6 | 	mov	arg02, local01
30428     00 16 06 F6 | 	mov	arg03, #0
3042c     24 C3 BF FD | 	call	#_fatfs_cc_remove_chain
30430     FD 28 02 F6 | 	mov	local02, result1
30434                 | LR__4824
30434     00 28 0E F2 | 	cmp	local02, #0 wz
30438     14 00 90 5D |  if_ne	jmp	#LR__4825
3043c     70 4E 05 F1 | 	add	fp, #112
30440     A7 12 02 FB | 	rdlong	arg01, fp
30444     70 4E 85 F1 | 	sub	fp, #112
30448     1C BE BF FD | 	call	#_fatfs_cc_sync_fs
3044c     FD 28 02 F6 | 	mov	local02, result1
30450                 | LR__4825
30450                 | LR__4826
30450                 | LR__4827
30450                 | LR__4828
30450                 | ' 			}
30450                 | ' 		}
30450                 | ' 		;
30450                 | ' 	}
30450                 | ' 
30450                 | ' 	return res ;
30450     14 FB 01 F6 | 	mov	result1, local02
30454     A7 F0 03 F6 | 	mov	ptra, fp
30458     B2 00 A0 FD | 	call	#popregs_
3045c                 | _fatfs_cc_f_unlink_ret
3045c     2D 00 64 FD | 	ret
30460                 | 
30460                 | _fatfs_cc_f_mkdir
30460     03 4A 05 F6 | 	mov	COUNT_, #3
30464     A8 00 A0 FD | 	call	#pushregs_
30468     5C F0 07 F1 | 	add	ptra, #92
3046c     04 4E 05 F1 | 	add	fp, #4
30470     A7 12 62 FC | 	wrlong	arg01, fp
30474     A7 12 02 F6 | 	mov	arg01, fp
30478     48 4E 05 F1 | 	add	fp, #72
3047c     A7 14 02 F6 | 	mov	arg02, fp
30480     4C 4E 85 F1 | 	sub	fp, #76
30484     02 16 06 F6 | 	mov	arg03, #2
30488     EC E3 BF FD | 	call	#_fatfs_cc_mount_volume
3048c     FD 26 0A F6 | 	mov	local01, result1 wz
30490     FC 01 90 5D |  if_ne	jmp	#LR__4835
30494     4C 4E 05 F1 | 	add	fp, #76
30498     A7 26 02 FB | 	rdlong	local01, fp
3049c     40 4E 85 F1 | 	sub	fp, #64
304a0     A7 26 62 FC | 	wrlong	local01, fp
304a4     A7 12 02 F6 | 	mov	arg01, fp
304a8     08 4E 85 F1 | 	sub	fp, #8
304ac     A7 14 02 FB | 	rdlong	arg02, fp
304b0     04 4E 85 F1 | 	sub	fp, #4
304b4     30 DF BF FD | 	call	#_fatfs_cc_follow_path
304b8     FD 26 0A F6 | 	mov	local01, result1 wz
304bc     08 26 06 A6 |  if_e	mov	local01, #8
304c0     04 26 0E F2 | 	cmp	local01, #4 wz
304c4     C8 01 90 5D |  if_ne	jmp	#LR__4834
304c8     4C 4E 05 F1 | 	add	fp, #76
304cc     A7 26 02 FB | 	rdlong	local01, fp
304d0     10 4E 85 F1 | 	sub	fp, #16
304d4     A7 26 62 FC | 	wrlong	local01, fp
304d8     A7 12 02 F6 | 	mov	arg01, fp
304dc     3C 4E 85 F1 | 	sub	fp, #60
304e0     00 14 06 F6 | 	mov	arg02, #0
304e4     80 C3 BF FD | 	call	#_fatfs_cc_create_chain
304e8     FD 28 0A F6 | 	mov	local02, result1 wz
304ec     00 26 06 F6 | 	mov	local01, #0
304f0     07 26 06 A6 |  if_e	mov	local01, #7
304f4     01 28 0E F2 | 	cmp	local02, #1 wz
304f8     02 26 06 A6 |  if_e	mov	local01, #2
304fc     FF FF 7F FF 
30500     FF 29 0E F2 | 	cmp	local02, ##-1 wz
30504     01 26 06 A6 |  if_e	mov	local01, #1
30508     F8 04 B0 FD | 	call	#_fatfs_cc__get_fattime
3050c     FD 2A 02 F6 | 	mov	local03, result1
30510     00 26 0E F2 | 	cmp	local01, #0 wz
30514     EC 00 90 5D |  if_ne	jmp	#LR__4831
30518     4C 4E 05 F1 | 	add	fp, #76
3051c     A7 12 02 FB | 	rdlong	arg01, fp
30520     4C 4E 85 F1 | 	sub	fp, #76
30524     14 15 02 F6 | 	mov	arg02, local02
30528     60 C5 BF FD | 	call	#_fatfs_cc_dir_clear
3052c     FD 26 0A F6 | 	mov	local01, result1 wz
30530     D0 00 90 5D |  if_ne	jmp	#LR__4830
30534     4C 4E 05 F1 | 	add	fp, #76
30538     A7 12 02 FB | 	rdlong	arg01, fp
3053c     4C 4E 85 F1 | 	sub	fp, #76
30540     34 12 06 F1 | 	add	arg01, #52
30544     20 14 06 F6 | 	mov	arg02, #32
30548     0B 16 06 F6 | 	mov	arg03, #11
3054c     98 00 A0 FD | 	call	#\builtin_bytefill_
30550     4C 4E 05 F1 | 	add	fp, #76
30554     A7 26 02 FB | 	rdlong	local01, fp
30558     34 26 06 F1 | 	add	local01, #52
3055c     13 5D 48 FC | 	wrbyte	#46, local01
30560     A7 26 02 FB | 	rdlong	local01, fp
30564     3F 26 06 F1 | 	add	local01, #63
30568     13 21 48 FC | 	wrbyte	#16, local01
3056c     A7 12 02 FB | 	rdlong	arg01, fp
30570     4A 12 06 F1 | 	add	arg01, #74
30574     09 2B 62 FC | 	wrlong	local03, arg01
30578     A7 14 02 FB | 	rdlong	arg02, fp
3057c     0A 13 02 F6 | 	mov	arg01, arg02
30580     4C 4E 85 F1 | 	sub	fp, #76
30584     34 14 06 F1 | 	add	arg02, #52
30588     14 17 02 F6 | 	mov	arg03, local02
3058c     C4 C9 BF FD | 	call	#_fatfs_cc_st_clust
30590     4C 4E 05 F1 | 	add	fp, #76
30594     A7 14 02 FB | 	rdlong	arg02, fp
30598     0A 13 02 F6 | 	mov	arg01, arg02
3059c     54 12 06 F1 | 	add	arg01, #84
305a0     4C 4E 85 F1 | 	sub	fp, #76
305a4     34 14 06 F1 | 	add	arg02, #52
305a8     20 16 06 F6 | 	mov	arg03, #32
305ac     18 4A BF FD | 	call	#__system____builtin_memmove
305b0     4C 4E 05 F1 | 	add	fp, #76
305b4     A7 26 02 FB | 	rdlong	local01, fp
305b8     55 26 06 F1 | 	add	local01, #85
305bc     13 5D 48 FC | 	wrbyte	#46, local01
305c0     38 4E 85 F1 | 	sub	fp, #56
305c4     A7 16 02 FB | 	rdlong	arg03, fp
305c8     38 4E 05 F1 | 	add	fp, #56
305cc     A7 14 02 FB | 	rdlong	arg02, fp
305d0     0A 13 02 F6 | 	mov	arg01, arg02
305d4     4C 4E 85 F1 | 	sub	fp, #76
305d8     54 14 06 F1 | 	add	arg02, #84
305dc     74 C9 BF FD | 	call	#_fatfs_cc_st_clust
305e0     4C 4E 05 F1 | 	add	fp, #76
305e4     A7 26 02 FB | 	rdlong	local01, fp
305e8     4C 4E 85 F1 | 	sub	fp, #76
305ec     03 26 06 F1 | 	add	local01, #3
305f0     13 03 48 FC | 	wrbyte	#1, local01
305f4     A7 12 02 F6 | 	mov	arg01, fp
305f8     0C 12 06 F1 | 	add	arg01, #12
305fc     20 D2 BF FD | 	call	#_fatfs_cc_dir_register
30600     FD 26 02 F6 | 	mov	local01, result1
30604                 | LR__4830
30604                 | LR__4831
30604     00 26 0E F2 | 	cmp	local01, #0 wz
30608     70 00 90 5D |  if_ne	jmp	#LR__4832
3060c     28 4E 05 F1 | 	add	fp, #40
30610     A7 12 02 FB | 	rdlong	arg01, fp
30614     16 12 06 F1 | 	add	arg01, #22
30618     09 2B 62 FC | 	wrlong	local03, arg01
3061c     24 4E 05 F1 | 	add	fp, #36
30620     A7 12 02 FB | 	rdlong	arg01, fp
30624     24 4E 85 F1 | 	sub	fp, #36
30628     A7 14 02 FB | 	rdlong	arg02, fp
3062c     28 4E 85 F1 | 	sub	fp, #40
30630     14 17 02 F6 | 	mov	arg03, local02
30634     1C C9 BF FD | 	call	#_fatfs_cc_st_clust
30638     28 4E 05 F1 | 	add	fp, #40
3063c     A7 2A 02 FB | 	rdlong	local03, fp
30640     0B 2A 06 F1 | 	add	local03, #11
30644     15 21 48 FC | 	wrbyte	#16, local03
30648     24 4E 05 F1 | 	add	fp, #36
3064c     A7 2A 02 FB | 	rdlong	local03, fp
30650     4C 4E 85 F1 | 	sub	fp, #76
30654     03 2A 06 F1 | 	add	local03, #3
30658     15 03 48 FC | 	wrbyte	#1, local03
3065c     00 26 0E F2 | 	cmp	local01, #0 wz
30660     2C 00 90 5D |  if_ne	jmp	#LR__4833
30664     4C 4E 05 F1 | 	add	fp, #76
30668     A7 12 02 FB | 	rdlong	arg01, fp
3066c     4C 4E 85 F1 | 	sub	fp, #76
30670     F4 BB BF FD | 	call	#_fatfs_cc_sync_fs
30674     FD 26 02 F6 | 	mov	local01, result1
30678     14 00 90 FD | 	jmp	#LR__4833
3067c                 | LR__4832
3067c     A7 12 02 F6 | 	mov	arg01, fp
30680     3C 12 06 F1 | 	add	arg01, #60
30684     14 15 02 F6 | 	mov	arg02, local02
30688     00 16 06 F6 | 	mov	arg03, #0
3068c     C4 C0 BF FD | 	call	#_fatfs_cc_remove_chain
30690                 | LR__4833
30690                 | LR__4834
30690                 | LR__4835
30690                 | ' 				remove_chain(&sobj, dcl, 0);
30690                 | ' 			}
30690                 | ' 		}
30690                 | ' 		;
30690                 | ' 	}
30690                 | ' 
30690                 | ' 	return res ;
30690     13 FB 01 F6 | 	mov	result1, local01
30694     A7 F0 03 F6 | 	mov	ptra, fp
30698     B2 00 A0 FD | 	call	#popregs_
3069c                 | _fatfs_cc_f_mkdir_ret
3069c     2D 00 64 FD | 	ret
306a0                 | 
306a0                 | _fatfs_cc_f_rename
306a0     04 4A 05 F6 | 	mov	COUNT_, #4
306a4     A8 00 A0 FD | 	call	#pushregs_
306a8     9C F0 07 F1 | 	add	ptra, #156
306ac     04 4E 05 F1 | 	add	fp, #4
306b0     A7 12 62 FC | 	wrlong	arg01, fp
306b4     04 4E 05 F1 | 	add	fp, #4
306b8     A7 14 62 FC | 	wrlong	arg02, fp
306bc     A7 12 02 F6 | 	mov	arg01, fp
306c0     08 4E 85 F1 | 	sub	fp, #8
306c4     78 DE BF FD | 	call	#_fatfs_cc_get_ldnumber
306c8     04 4E 05 F1 | 	add	fp, #4
306cc     A7 12 02 F6 | 	mov	arg01, fp
306d0     6C 4E 05 F1 | 	add	fp, #108
306d4     A7 14 02 F6 | 	mov	arg02, fp
306d8     70 4E 85 F1 | 	sub	fp, #112
306dc     02 16 06 F6 | 	mov	arg03, #2
306e0     94 E1 BF FD | 	call	#_fatfs_cc_mount_volume
306e4     FD 26 0A F6 | 	mov	local01, result1 wz
306e8     5C 02 90 5D |  if_ne	jmp	#LR__4850
306ec     70 4E 05 F1 | 	add	fp, #112
306f0     A7 28 02 FB | 	rdlong	local02, fp
306f4     60 4E 85 F1 | 	sub	fp, #96
306f8     A7 28 62 FC | 	wrlong	local02, fp
306fc     A7 12 02 F6 | 	mov	arg01, fp
30700     0C 4E 85 F1 | 	sub	fp, #12
30704     A7 14 02 FB | 	rdlong	arg02, fp
30708     04 4E 85 F1 | 	sub	fp, #4
3070c     D8 DC BF FD | 	call	#_fatfs_cc_follow_path
30710     FD 26 0A F6 | 	mov	local01, result1 wz
30714     14 00 90 5D |  if_ne	jmp	#LR__4840
30718     3B 4E 05 F1 | 	add	fp, #59
3071c     A7 28 C2 FA | 	rdbyte	local02, fp
30720     3B 4E 85 F1 | 	sub	fp, #59
30724     A0 28 CE F7 | 	test	local02, #160 wz
30728     06 26 06 56 |  if_ne	mov	local01, #6
3072c                 | LR__4840
3072c     00 26 0E F2 | 	cmp	local01, #0 wz
30730     14 02 90 5D |  if_ne	jmp	#LR__4849
30734     74 4E 05 F1 | 	add	fp, #116
30738     A7 12 02 F6 | 	mov	arg01, fp
3073c     48 4E 85 F1 | 	sub	fp, #72
30740     A7 14 02 FB | 	rdlong	arg02, fp
30744     2C 4E 85 F1 | 	sub	fp, #44
30748     20 16 06 F6 | 	mov	arg03, #32
3074c     78 48 BF FD | 	call	#__system____builtin_memmove
30750     40 4E 05 F1 | 	add	fp, #64
30754     A7 12 02 F6 | 	mov	arg01, fp
30758     30 4E 85 F1 | 	sub	fp, #48
3075c     A7 14 02 F6 | 	mov	arg02, fp
30760     10 4E 85 F1 | 	sub	fp, #16
30764     30 16 06 F6 | 	mov	arg03, #48
30768     5C 48 BF FD | 	call	#__system____builtin_memmove
3076c     40 4E 05 F1 | 	add	fp, #64
30770     A7 12 02 F6 | 	mov	arg01, fp
30774     38 4E 85 F1 | 	sub	fp, #56
30778     A7 14 02 FB | 	rdlong	arg02, fp
3077c     08 4E 85 F1 | 	sub	fp, #8
30780     64 DC BF FD | 	call	#_fatfs_cc_follow_path
30784     FD 26 0A F6 | 	mov	local01, result1 wz
30788     3C 00 90 5D |  if_ne	jmp	#LR__4841
3078c     48 4E 05 F1 | 	add	fp, #72
30790     A7 26 02 FB | 	rdlong	local01, fp
30794     30 4E 85 F1 | 	sub	fp, #48
30798     A7 FA 01 FB | 	rdlong	result1, fp
3079c     18 4E 85 F1 | 	sub	fp, #24
307a0     FD 26 0A F2 | 	cmp	local01, result1 wz
307a4     50 4E 05 A1 |  if_e	add	fp, #80
307a8     A7 26 02 AB |  if_e	rdlong	local01, fp
307ac     30 4E 85 A1 |  if_e	sub	fp, #48
307b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
307b4     20 4E 85 A1 |  if_e	sub	fp, #32
307b8     15 27 0A A2 |  if_e	cmp	local01, local03 wz
307bc     04 28 06 A6 |  if_e	mov	local02, #4
307c0     08 28 06 56 |  if_ne	mov	local02, #8
307c4     14 27 02 F6 | 	mov	local01, local02
307c8                 | LR__4841
307c8     04 26 0E F2 | 	cmp	local01, #4 wz
307cc     48 01 90 5D |  if_ne	jmp	#LR__4846
307d0     A7 12 02 F6 | 	mov	arg01, fp
307d4     40 12 06 F1 | 	add	arg01, #64
307d8     44 D0 BF FD | 	call	#_fatfs_cc_dir_register
307dc     FD 26 0A F6 | 	mov	local01, result1 wz
307e0     34 01 90 5D |  if_ne	jmp	#LR__4845
307e4     5C 4E 05 F1 | 	add	fp, #92
307e8     A7 2C 02 FB | 	rdlong	local04, fp
307ec     16 13 02 F6 | 	mov	arg01, local04
307f0     0D 12 06 F1 | 	add	arg01, #13
307f4     18 4E 05 F1 | 	add	fp, #24
307f8     A7 14 02 F6 | 	mov	arg02, fp
307fc     74 4E 85 F1 | 	sub	fp, #116
30800     0D 14 06 F1 | 	add	arg02, #13
30804     13 16 06 F6 | 	mov	arg03, #19
30808     BC 47 BF FD | 	call	#__system____builtin_memmove
3080c     7F 4E 05 F1 | 	add	fp, #127
30810     A7 28 C2 FA | 	rdbyte	local02, fp
30814     0B 2C 06 F1 | 	add	local04, #11
30818     16 29 42 FC | 	wrbyte	local02, local04
3081c     14 29 E2 F8 | 	getbyte	local02, local02, #0
30820     0B 2C 86 F1 | 	sub	local04, #11
30824     10 28 CE F7 | 	test	local02, #16 wz
30828     0B 2C 06 A1 |  if_e	add	local04, #11
3082c     16 29 C2 AA |  if_e	rdbyte	local02, local04
30830     20 28 46 A5 |  if_e	or	local02, #32
30834     16 29 42 AC |  if_e	wrbyte	local02, local04
30838     0B 2C 86 A1 |  if_e	sub	local04, #11
3083c     0F 4E 85 F1 | 	sub	fp, #15
30840     A7 28 02 FB | 	rdlong	local02, fp
30844     70 4E 85 F1 | 	sub	fp, #112
30848     03 28 06 F1 | 	add	local02, #3
3084c     14 03 48 FC | 	wrbyte	#1, local02
30850     0B 2C 06 F1 | 	add	local04, #11
30854     16 29 C2 FA | 	rdbyte	local02, local04
30858     0B 2C 86 F1 | 	sub	local04, #11
3085c     10 28 CE F7 | 	test	local02, #16 wz
30860     18 4E 05 51 |  if_ne	add	fp, #24
30864     A7 28 02 5B |  if_ne	rdlong	local02, fp
30868     30 4E 05 51 |  if_ne	add	fp, #48
3086c     A7 14 02 5B |  if_ne	rdlong	arg02, fp
30870     48 4E 85 51 |  if_ne	sub	fp, #72
30874     0A 29 0A 52 |  if_ne	cmp	local02, arg02 wz
30878     9C 00 90 AD |  if_e	jmp	#LR__4844
3087c     70 4E 05 F1 | 	add	fp, #112
30880     A7 12 02 FB | 	rdlong	arg01, fp
30884     09 29 02 F6 | 	mov	local02, arg01
30888     70 4E 85 F1 | 	sub	fp, #112
3088c     16 15 02 F6 | 	mov	arg02, local04
30890     8C C6 BF FD | 	call	#_fatfs_cc_ld_clust
30894     FD 14 02 F6 | 	mov	arg02, result1
30898     14 13 02 F6 | 	mov	arg01, local02
3089c     C8 BA BF FD | 	call	#_fatfs_cc_clst2sect
308a0     FD 2C 0A F6 | 	mov	local04, result1 wz
308a4     02 26 06 A6 |  if_e	mov	local01, #2
308a8     6C 00 90 AD |  if_e	jmp	#LR__4843
308ac     70 4E 05 F1 | 	add	fp, #112
308b0     A7 12 02 FB | 	rdlong	arg01, fp
308b4     70 4E 85 F1 | 	sub	fp, #112
308b8     16 15 02 F6 | 	mov	arg02, local04
308bc     30 B9 BF FD | 	call	#_fatfs_cc_move_window
308c0     FD 26 0A F6 | 	mov	local01, result1 wz
308c4     70 4E 05 F1 | 	add	fp, #112
308c8     A7 2C 02 FB | 	rdlong	local04, fp
308cc     70 4E 85 F1 | 	sub	fp, #112
308d0     54 2C 06 F1 | 	add	local04, #84
308d4     01 2C 06 A1 |  if_e	add	local04, #1
308d8     16 29 C2 AA |  if_e	rdbyte	local02, local04
308dc     01 2C 86 A1 |  if_e	sub	local04, #1
308e0     2E 28 0E A2 |  if_e	cmp	local02, #46 wz
308e4     30 00 90 5D |  if_ne	jmp	#LR__4842
308e8     70 4E 05 F1 | 	add	fp, #112
308ec     A7 12 02 FB | 	rdlong	arg01, fp
308f0     28 4E 85 F1 | 	sub	fp, #40
308f4     A7 16 02 FB | 	rdlong	arg03, fp
308f8     48 4E 85 F1 | 	sub	fp, #72
308fc     16 15 02 F6 | 	mov	arg02, local04
30900     50 C6 BF FD | 	call	#_fatfs_cc_st_clust
30904     70 4E 05 F1 | 	add	fp, #112
30908     A7 28 02 FB | 	rdlong	local02, fp
3090c     70 4E 85 F1 | 	sub	fp, #112
30910     03 28 06 F1 | 	add	local02, #3
30914     14 03 48 FC | 	wrbyte	#1, local02
30918                 | LR__4842
30918                 | LR__4843
30918                 | LR__4844
30918                 | LR__4845
30918                 | LR__4846
30918     00 26 0E F2 | 	cmp	local01, #0 wz
3091c     28 00 90 5D |  if_ne	jmp	#LR__4848
30920     A7 12 02 F6 | 	mov	arg01, fp
30924     10 12 06 F1 | 	add	arg01, #16
30928     58 D1 BF FD | 	call	#_fatfs_cc_dir_remove
3092c     FD 26 0A F6 | 	mov	local01, result1 wz
30930     14 00 90 5D |  if_ne	jmp	#LR__4847
30934     70 4E 05 F1 | 	add	fp, #112
30938     A7 12 02 FB | 	rdlong	arg01, fp
3093c     70 4E 85 F1 | 	sub	fp, #112
30940     24 B9 BF FD | 	call	#_fatfs_cc_sync_fs
30944     FD 26 02 F6 | 	mov	local01, result1
30948                 | LR__4847
30948                 | LR__4848
30948                 | LR__4849
30948                 | LR__4850
30948                 | ' 					res = sync_fs(fs);
30948                 | ' 				}
30948                 | ' 			}
30948                 | ' 
30948                 | ' 		}
30948                 | ' 		;
30948                 | ' 	}
30948                 | ' 
30948                 | ' 	return res ;
30948     13 FB 01 F6 | 	mov	result1, local01
3094c     A7 F0 03 F6 | 	mov	ptra, fp
30950     B2 00 A0 FD | 	call	#popregs_
30954                 | _fatfs_cc_f_rename_ret
30954     2D 00 64 FD | 	ret
30958                 | 
30958                 | _fatfs_cc_getenv
30958     06 4A 05 F6 | 	mov	COUNT_, #6
3095c     A8 00 A0 FD | 	call	#pushregs_
30960     09 27 02 F6 | 	mov	local01, arg01
30964     09 29 02 F6 | 	mov	local02, arg01
30968     97 06 48 FB | 	callpa	#(@LR__4861-@LR__4860)>>2,fcache_load_ptr_
3096c                 | LR__4860
3096c     14 FB C9 FA | 	rdbyte	result1, local02 wz
30970     01 28 06 51 |  if_ne	add	local02, #1
30974     F4 FF 9F 5D |  if_ne	jmp	#LR__4860
30978                 | LR__4861
30978     09 29 82 F1 | 	sub	local02, arg01
3097c     14 FB 01 F6 | 	mov	result1, local02
30980     02 00 00 FF 
30984     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
30988     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
3098c     02 00 00 FF 
30990     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
30994                 | '             return 0;
30994     00 FA 05 A6 |  if_e	mov	result1, #0
30998     5C 00 90 AD |  if_e	jmp	#LR__4864
3099c                 | ' 
3099c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
3099c     02 00 00 FF 
309a0     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
309a4     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
309a8     02 00 00 FF 
309ac     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
309b0                 | LR__4862
309b0     15 2D 0A FB | 	rdlong	local04, local03 wz
309b4     3C 00 90 AD |  if_e	jmp	#LR__4863
309b8     16 13 02 F6 | 	mov	arg01, local04
309bc     13 15 02 F6 | 	mov	arg02, local01
309c0     14 17 02 F6 | 	mov	arg03, local02
309c4     28 AD BF FD | 	call	#_fatfs_cc_strncmp
309c8     00 FA 0D F2 | 	cmp	result1, #0 wz
309cc     14 2F 02 A6 |  if_e	mov	local05, local02
309d0     16 2F 02 A1 |  if_e	add	local05, local04
309d4     17 31 C2 AA |  if_e	rdbyte	local06, local05
309d8     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
309dc                 | ' 			return name+len+1;
309dc     14 2D 02 A1 |  if_e	add	local04, local02
309e0     01 2C 06 A1 |  if_e	add	local04, #1
309e4     16 FB 01 A6 |  if_e	mov	result1, local04
309e8     0C 00 90 AD |  if_e	jmp	#LR__4864
309ec     04 2A 06 F1 | 	add	local03, #4
309f0     BC FF 9F FD | 	jmp	#LR__4862
309f4                 | LR__4863
309f4                 | ' 	}
309f4                 | ' 	return 0;
309f4     00 FA 05 F6 | 	mov	result1, #0
309f8                 | LR__4864
309f8     A7 F0 03 F6 | 	mov	ptra, fp
309fc     B2 00 A0 FD | 	call	#popregs_
30a00                 | _fatfs_cc_getenv_ret
30a00     2D 00 64 FD | 	ret
30a04                 | 
30a04                 | _fatfs_cc__get_fattime
30a04     00 4A 05 F6 | 	mov	COUNT_, #0
30a08     A8 00 A0 FD | 	call	#pushregs_
30a0c     34 F0 07 F1 | 	add	ptra, #52
30a10     00 12 06 F6 | 	mov	arg01, #0
30a14     A4 AD BF FD | 	call	#_fatfs_cc_time
30a18     04 4E 05 F1 | 	add	fp, #4
30a1c     A7 FA 61 FC | 	wrlong	result1, fp
30a20     A7 12 02 F6 | 	mov	arg01, fp
30a24     0C 4E 05 F1 | 	add	fp, #12
30a28     A7 14 02 F6 | 	mov	arg02, fp
30a2c     10 4E 85 F1 | 	sub	fp, #16
30a30     68 AF BF FD | 	call	#_fatfs_cc__gmtime_r
30a34     24 4E 05 F1 | 	add	fp, #36
30a38     A7 FA 01 FB | 	rdlong	result1, fp
30a3c     50 FA 85 F1 | 	sub	result1, #80
30a40     09 FA 65 F0 | 	shl	result1, #9
30a44     04 4E 85 F1 | 	sub	fp, #4
30a48     A7 14 02 FB | 	rdlong	arg02, fp
30a4c     01 14 06 F1 | 	add	arg02, #1
30a50     05 14 66 F0 | 	shl	arg02, #5
30a54     0A FB 41 F5 | 	or	result1, arg02
30a58     04 4E 85 F1 | 	sub	fp, #4
30a5c     A7 14 02 FB | 	rdlong	arg02, fp
30a60     0A FB 41 F5 | 	or	result1, arg02
30a64     04 4E 85 F1 | 	sub	fp, #4
30a68     A7 14 02 FB | 	rdlong	arg02, fp
30a6c     0B 14 66 F0 | 	shl	arg02, #11
30a70     04 4E 85 F1 | 	sub	fp, #4
30a74     A7 12 02 FB | 	rdlong	arg01, fp
30a78     05 12 66 F0 | 	shl	arg01, #5
30a7c     09 15 42 F5 | 	or	arg02, arg01
30a80     04 4E 85 F1 | 	sub	fp, #4
30a84     A7 12 02 FB | 	rdlong	arg01, fp
30a88     10 4E 85 F1 | 	sub	fp, #16
30a8c     09 15 42 F5 | 	or	arg02, arg01
30a90                 | ' 
30a90                 | '     now = time(0);
30a90                 | '     _gmtime_r (&now, &date);
30a90                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
30a90                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
30a90                 | '     return (ffdate << 16) | fftime;
30a90     10 FA 65 F0 | 	shl	result1, #16
30a94     0A FB 41 F5 | 	or	result1, arg02
30a98     A7 F0 03 F6 | 	mov	ptra, fp
30a9c     B2 00 A0 FD | 	call	#popregs_
30aa0                 | _fatfs_cc__get_fattime_ret
30aa0     2D 00 64 FD | 	ret
30aa4                 | 
30aa4                 | _fatfs_cc_unixtime_1154
30aa4     02 4A 05 F6 | 	mov	COUNT_, #2
30aa8     A8 00 A0 FD | 	call	#pushregs_
30aac     34 F0 07 F1 | 	add	ptra, #52
30ab0     09 27 02 F6 | 	mov	local01, arg01
30ab4     09 26 46 F0 | 	shr	local01, #9
30ab8     7F 26 06 F5 | 	and	local01, #127
30abc     50 28 06 F6 | 	mov	local02, #80
30ac0     13 29 02 F1 | 	add	local02, local01
30ac4     24 4E 05 F1 | 	add	fp, #36
30ac8     A7 28 62 FC | 	wrlong	local02, fp
30acc     09 29 02 F6 | 	mov	local02, arg01
30ad0     05 28 46 F0 | 	shr	local02, #5
30ad4     14 29 42 F8 | 	getnib	local02, local02, #0
30ad8     01 28 86 F1 | 	sub	local02, #1
30adc     04 4E 85 F1 | 	sub	fp, #4
30ae0     A7 28 62 FC | 	wrlong	local02, fp
30ae4     1F 12 06 F5 | 	and	arg01, #31
30ae8     04 4E 85 F1 | 	sub	fp, #4
30aec     A7 12 62 FC | 	wrlong	arg01, fp
30af0     0A 29 02 F6 | 	mov	local02, arg02
30af4     0B 28 46 F0 | 	shr	local02, #11
30af8     1F 28 06 F5 | 	and	local02, #31
30afc     04 4E 85 F1 | 	sub	fp, #4
30b00     A7 28 62 FC | 	wrlong	local02, fp
30b04     0A 29 02 F6 | 	mov	local02, arg02
30b08     05 28 46 F0 | 	shr	local02, #5
30b0c     3F 28 06 F5 | 	and	local02, #63
30b10     04 4E 85 F1 | 	sub	fp, #4
30b14     A7 28 62 FC | 	wrlong	local02, fp
30b18     1F 14 06 F5 | 	and	arg02, #31
30b1c     01 14 66 F0 | 	shl	arg02, #1
30b20     04 4E 85 F1 | 	sub	fp, #4
30b24     A7 14 62 FC | 	wrlong	arg02, fp
30b28     A7 12 02 F6 | 	mov	arg01, fp
30b2c     10 4E 85 F1 | 	sub	fp, #16
30b30     C8 AC BF FD | 	call	#_fatfs_cc_mktime
30b34                 | ' 
30b34                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
30b34                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
30b34                 | '     date.tm_mday = (dosdate & 0x1f);
30b34                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
30b34                 | '     date.tm_min = (dostime >> 5) & 0x3f;
30b34                 | '     date.tm_sec = (dostime & 0x1f) << 1;
30b34                 | ' 
30b34                 | '     t = mktime(&date);
30b34                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
30b34                 | '     return t;
30b34     A7 F0 03 F6 | 	mov	ptra, fp
30b38     B2 00 A0 FD | 	call	#popregs_
30b3c                 | _fatfs_cc_unixtime_1154_ret
30b3c     2D 00 64 FD | 	ret
30b40                 | 
30b40                 | _fatfs_cc__set_dos_error_1156
30b40     09 01 02 F6 | 	mov	_var01, arg01
30b44                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
30b44                 | '     switch (derr) {
30b44     14 00 26 F3 | 	fle	_var01, #20
30b48     30 00 62 FD | 	jmprel	_var01
30b4c                 | LR__4870
30b4c     50 00 90 FD | 	jmp	#LR__4871
30b50     84 00 90 FD | 	jmp	#LR__4885
30b54     80 00 90 FD | 	jmp	#LR__4886
30b58     7C 00 90 FD | 	jmp	#LR__4887
30b5c     48 00 90 FD | 	jmp	#LR__4872
30b60     44 00 90 FD | 	jmp	#LR__4873
30b64     40 00 90 FD | 	jmp	#LR__4874
30b68     44 00 90 FD | 	jmp	#LR__4875
30b6c     48 00 90 FD | 	jmp	#LR__4877
30b70     54 00 90 FD | 	jmp	#LR__4880
30b74     38 00 90 FD | 	jmp	#LR__4876
30b78     4C 00 90 FD | 	jmp	#LR__4881
30b7c     48 00 90 FD | 	jmp	#LR__4882
30b80     44 00 90 FD | 	jmp	#LR__4883
30b84     50 00 90 FD | 	jmp	#LR__4888
30b88     4C 00 90 FD | 	jmp	#LR__4888
30b8c     48 00 90 FD | 	jmp	#LR__4888
30b90     2C 00 90 FD | 	jmp	#LR__4878
30b94     38 00 90 FD | 	jmp	#LR__4884
30b98     2C 00 90 FD | 	jmp	#LR__4879
30b9c     38 00 90 FD | 	jmp	#LR__4888
30ba0                 | LR__4871
30ba0     00 02 06 F6 | 	mov	_var02, #0
30ba4                 | '         r = 0;
30ba4                 | '         break;
30ba4     34 00 90 FD | 	jmp	#LR__4889
30ba8                 | LR__4872
30ba8                 | LR__4873
30ba8                 | LR__4874
30ba8     04 02 06 F6 | 	mov	_var02, #4
30bac                 | '         r =  4 ;
30bac                 | '         break;
30bac     2C 00 90 FD | 	jmp	#LR__4889
30bb0                 | LR__4875
30bb0                 | LR__4876
30bb0     06 02 06 F6 | 	mov	_var02, #6
30bb4                 | '         r =  6 ;
30bb4                 | '         break;
30bb4     24 00 90 FD | 	jmp	#LR__4889
30bb8                 | LR__4877
30bb8     09 02 06 F6 | 	mov	_var02, #9
30bbc                 | '         r =  9 ;
30bbc                 | '         break;
30bbc     1C 00 90 FD | 	jmp	#LR__4889
30bc0                 | LR__4878
30bc0     07 02 06 F6 | 	mov	_var02, #7
30bc4                 | '         r =  7 ;
30bc4                 | '         break;
30bc4     14 00 90 FD | 	jmp	#LR__4889
30bc8                 | LR__4879
30bc8                 | LR__4880
30bc8                 | LR__4881
30bc8                 | LR__4882
30bc8                 | LR__4883
30bc8     0A 02 06 F6 | 	mov	_var02, #10
30bcc                 | '         r =  10 ;
30bcc                 | '         break;
30bcc     0C 00 90 FD | 	jmp	#LR__4889
30bd0                 | LR__4884
30bd0     0B 02 06 F6 | 	mov	_var02, #11
30bd4                 | '         r =  11 ;
30bd4                 | '         break;
30bd4     04 00 90 FD | 	jmp	#LR__4889
30bd8                 | LR__4885
30bd8                 | LR__4886
30bd8                 | LR__4887
30bd8                 | LR__4888
30bd8     0C 02 06 F6 | 	mov	_var02, #12
30bdc                 | '         r =  12 ;
30bdc                 | '         break;
30bdc                 | LR__4889
30bdc                 | '     }
30bdc                 | '     return _seterror(r);
30bdc     00 02 4E F2 | 	cmps	_var02, #0 wz
30be0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
30be4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
30be8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
30bec     01 FA 65 56 |  if_ne	neg	result1, #1
30bf0     00 FA 05 A6 |  if_e	mov	result1, #0
30bf4                 | _fatfs_cc__set_dos_error_1156_ret
30bf4     2D 00 64 FD | 	ret
30bf8                 | 
30bf8                 | _fatfs_cc_v_creat
30bf8     04 4A 05 F6 | 	mov	COUNT_, #4
30bfc     A8 00 A0 FD | 	call	#pushregs_
30c00     09 27 02 F6 | 	mov	local01, arg01
30c04     0A 29 02 F6 | 	mov	local02, arg02
30c08     03 00 00 FF 
30c0c     38 12 06 F6 | 	mov	arg01, ##1592
30c10                 | '     return _gc_alloc(size);
30c10     10 14 06 F6 | 	mov	arg02, #16
30c14     84 75 BF FD | 	call	#__system___gc_doalloc
30c18     FD 2A 0A F6 | 	mov	local03, result1 wz
30c1c                 | '       return _seterror( 7 );
30c1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30c20     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
30c24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30c28     01 FA 65 A6 |  if_e	neg	result1, #1
30c2c     50 00 90 AD |  if_e	jmp	#LR__4891
30c30     15 13 02 F6 | 	mov	arg01, local03
30c34     00 14 06 F6 | 	mov	arg02, #0
30c38     03 00 00 FF 
30c3c     38 16 06 F6 | 	mov	arg03, ##1592
30c40     98 00 A0 FD | 	call	#\builtin_bytefill_
30c44     15 13 02 F6 | 	mov	arg01, local03
30c48     02 00 00 FF 
30c4c     10 12 06 F1 | 	add	arg01, ##1040
30c50     14 15 02 F6 | 	mov	arg02, local02
30c54     07 16 06 F6 | 	mov	arg03, #7
30c58     84 E2 BF FD | 	call	#_fatfs_cc_f_open
30c5c     FD 2C 0A F6 | 	mov	local04, result1 wz
30c60     14 00 90 AD |  if_e	jmp	#LR__4890
30c64     15 13 02 F6 | 	mov	arg01, local03
30c68                 | '     return _gc_free(ptr);
30c68     34 76 BF FD | 	call	#__system___gc_free
30c6c                 | '     free(f);
30c6c                 | '     return _set_dos_error(r);
30c6c     16 13 02 F6 | 	mov	arg01, local04
30c70     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
30c74     08 00 90 FD | 	jmp	#LR__4891
30c78                 | LR__4890
30c78     13 2B 62 FC | 	wrlong	local03, local01
30c7c                 | '   }
30c7c                 | '   fil->vfsdata = f;
30c7c                 | '   return 0;
30c7c     00 FA 05 F6 | 	mov	result1, #0
30c80                 | LR__4891
30c80     A7 F0 03 F6 | 	mov	ptra, fp
30c84     B2 00 A0 FD | 	call	#popregs_
30c88                 | _fatfs_cc_v_creat_ret
30c88     2D 00 64 FD | 	ret
30c8c                 | 
30c8c                 | _fatfs_cc_v_close
30c8c     02 4A 05 F6 | 	mov	COUNT_, #2
30c90     A8 00 A0 FD | 	call	#pushregs_
30c94     09 27 02 FB | 	rdlong	local01, arg01
30c98     13 13 02 F6 | 	mov	arg01, local01
30c9c     02 00 00 FF 
30ca0     10 12 06 F1 | 	add	arg01, ##1040
30ca4     D0 EF BF FD | 	call	#_fatfs_cc_f_close
30ca8     FD 28 02 F6 | 	mov	local02, result1
30cac     13 13 02 F6 | 	mov	arg01, local01
30cb0                 | '     return _gc_free(ptr);
30cb0     EC 75 BF FD | 	call	#__system___gc_free
30cb4                 | '     FAT_FIL *f = fil->vfsdata;
30cb4                 | '     r=f_close(&f->fil);
30cb4                 | '     free(f);
30cb4                 | '     return _set_dos_error(r);
30cb4     14 13 02 F6 | 	mov	arg01, local02
30cb8     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
30cbc     A7 F0 03 F6 | 	mov	ptra, fp
30cc0     B2 00 A0 FD | 	call	#popregs_
30cc4                 | _fatfs_cc_v_close_ret
30cc4     2D 00 64 FD | 	ret
30cc8                 | 
30cc8                 | _fatfs_cc_v_opendir
30cc8     04 4A 05 F6 | 	mov	COUNT_, #4
30ccc     A8 00 A0 FD | 	call	#pushregs_
30cd0     09 27 02 F6 | 	mov	local01, arg01
30cd4     0A 29 02 F6 | 	mov	local02, arg02
30cd8     30 12 06 F6 | 	mov	arg01, #48
30cdc                 | '     return _gc_alloc(size);
30cdc     10 14 06 F6 | 	mov	arg02, #16
30ce0     B8 74 BF FD | 	call	#__system___gc_doalloc
30ce4     FD 2A 0A F6 | 	mov	local03, result1 wz
30ce8                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
30ce8                 | '       return _seterror( 7 );
30ce8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30cec     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
30cf0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30cf4     01 FA 65 A6 |  if_e	neg	result1, #1
30cf8     34 00 90 AD |  if_e	jmp	#LR__4901
30cfc     14 15 02 F6 | 	mov	arg02, local02
30d00     15 13 02 F6 | 	mov	arg01, local03
30d04     54 F3 BF FD | 	call	#_fatfs_cc_f_opendir
30d08     FD 2C 0A F6 | 	mov	local04, result1 wz
30d0c     14 00 90 AD |  if_e	jmp	#LR__4900
30d10     15 13 02 F6 | 	mov	arg01, local03
30d14                 | '     return _gc_free(ptr);
30d14     88 75 BF FD | 	call	#__system___gc_free
30d18                 | '         free(f);
30d18                 | '         return _set_dos_error(r);
30d18     16 13 02 F6 | 	mov	arg01, local04
30d1c     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
30d20     0C 00 90 FD | 	jmp	#LR__4901
30d24                 | LR__4900
30d24     04 26 06 F1 | 	add	local01, #4
30d28     13 2B 62 FC | 	wrlong	local03, local01
30d2c                 | '     }
30d2c                 | '     dir->vfsdata = f;
30d2c                 | '     return 0;
30d2c     00 FA 05 F6 | 	mov	result1, #0
30d30                 | LR__4901
30d30     A7 F0 03 F6 | 	mov	ptra, fp
30d34     B2 00 A0 FD | 	call	#popregs_
30d38                 | _fatfs_cc_v_opendir_ret
30d38     2D 00 64 FD | 	ret
30d3c                 | 
30d3c                 | _fatfs_cc_v_closedir
30d3c     02 4A 05 F6 | 	mov	COUNT_, #2
30d40     A8 00 A0 FD | 	call	#pushregs_
30d44     04 12 06 F1 | 	add	arg01, #4
30d48     09 27 02 FB | 	rdlong	local01, arg01
30d4c     13 13 02 F6 | 	mov	arg01, local01
30d50     24 F4 BF FD | 	call	#_fatfs_cc_f_closedir
30d54     FD 28 02 F6 | 	mov	local02, result1
30d58     13 13 02 F6 | 	mov	arg01, local01
30d5c                 | '     return _gc_free(ptr);
30d5c     40 75 BF FD | 	call	#__system___gc_free
30d60     00 28 0E F2 | 	cmp	local02, #0 wz
30d64     14 13 02 56 |  if_ne	mov	arg01, local02
30d68     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
30d6c                 | '     return r;
30d6c     14 FB 01 F6 | 	mov	result1, local02
30d70     A7 F0 03 F6 | 	mov	ptra, fp
30d74     B2 00 A0 FD | 	call	#popregs_
30d78                 | _fatfs_cc_v_closedir_ret
30d78     2D 00 64 FD | 	ret
30d7c                 | 
30d7c                 | _fatfs_cc_v_readdir
30d7c     06 4A 05 F6 | 	mov	COUNT_, #6
30d80     A8 00 A0 FD | 	call	#pushregs_
30d84     2C F1 07 F1 | 	add	ptra, #300
30d88     0A 27 02 F6 | 	mov	local01, arg02
30d8c     04 12 06 F1 | 	add	arg01, #4
30d90     09 13 02 FB | 	rdlong	arg01, arg01
30d94     A7 14 02 F6 | 	mov	arg02, fp
30d98     0C 14 06 F1 | 	add	arg02, #12
30d9c     0C F4 BF FD | 	call	#_fatfs_cc_f_readdir
30da0     FD 16 0A F6 | 	mov	arg03, result1 wz
30da4     0C 00 90 AD |  if_e	jmp	#LR__4910
30da8                 | '         return _set_dos_error(r);
30da8     0B 13 02 F6 | 	mov	arg01, arg03
30dac     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
30db0     D0 00 90 FD | 	jmp	#LR__4915
30db4                 | LR__4910
30db4     28 4E 05 F1 | 	add	fp, #40
30db8     A7 16 CA FA | 	rdbyte	arg03, fp wz
30dbc     28 4E 85 F1 | 	sub	fp, #40
30dc0                 | '         return -1;
30dc0     01 FA 65 A6 |  if_e	neg	result1, #1
30dc4     BC 00 90 AD |  if_e	jmp	#LR__4915
30dc8     A7 14 02 F6 | 	mov	arg02, fp
30dcc     28 14 06 F1 | 	add	arg02, #40
30dd0     13 29 02 F6 | 	mov	local02, local01
30dd4     3F 16 06 F6 | 	mov	arg03, #63
30dd8     97 16 48 FB | 	callpa	#(@LR__4912-@LR__4911)>>2,fcache_load_ptr_
30ddc                 | ' 
30ddc                 | ' 	dscan = dst;
30ddc                 | ' 	sscan = src;
30ddc                 | ' 	count = n;
30ddc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
30ddc                 | LR__4911
30ddc     01 16 86 F1 | 	sub	arg03, #1
30de0     00 16 56 F2 | 	cmps	arg03, #0 wc
30de4     0A 2B 02 36 |  if_ae	mov	local03, arg02
30de8     01 2A 06 31 |  if_ae	add	local03, #1
30dec     0A 2D C2 3A |  if_ae	rdbyte	local04, arg02
30df0     15 15 02 36 |  if_ae	mov	arg02, local03
30df4     14 2D 42 3C |  if_ae	wrbyte	local04, local02
30df8     16 2F E2 38 |  if_ae	getbyte	local05, local04, #0
30dfc     07 2E 4E 37 |  if_ae	zerox	local05, #7 wz
30e00                 | ' 		continue;
30e00     01 28 06 31 |  if_ae	add	local02, #1
30e04     D4 FF 9F 1D |  if_a	jmp	#LR__4911
30e08                 | LR__4912
30e08     97 0C 48 FB | 	callpa	#(@LR__4914-@LR__4913)>>2,fcache_load_ptr_
30e0c                 | ' 	while (--count >= 0)
30e0c                 | LR__4913
30e0c     01 16 86 F1 | 	sub	arg03, #1
30e10     00 16 56 F2 | 	cmps	arg03, #0 wc
30e14     14 31 02 36 |  if_ae	mov	local06, local02
30e18     01 28 06 31 |  if_ae	add	local02, #1
30e1c     18 01 48 3C |  if_ae	wrbyte	#0, local06
30e20     E8 FF 9F 3D |  if_ae	jmp	#LR__4913
30e24                 | LR__4914
30e24                 | ' 		*dscan++ = '\0';
30e24                 | ' 	return(dst);
30e24     3F 26 06 F1 | 	add	local01, #63
30e28     13 01 48 FC | 	wrbyte	#0, local01
30e2c     3F 26 86 F1 | 	sub	local01, #63
30e30     14 4E 05 F1 | 	add	fp, #20
30e34     A7 16 C2 FA | 	rdbyte	arg03, fp
30e38     10 16 CE F7 | 	test	arg03, #16 wz
30e3c     50 26 06 51 |  if_ne	add	local01, #80
30e40     13 03 48 5C |  if_ne	wrbyte	#1, local01
30e44     50 26 E6 F3 | 	sumnz	local01, #80
30e48     13 01 48 AC |  if_e	wrbyte	#0, local01
30e4c     50 26 86 A1 |  if_e	sub	local01, #80
30e50     08 4E 85 F1 | 	sub	fp, #8
30e54     A7 16 02 FB | 	rdlong	arg03, fp
30e58     48 26 06 F1 | 	add	local01, #72
30e5c     13 17 62 FC | 	wrlong	arg03, local01
30e60     04 4E 05 F1 | 	add	fp, #4
30e64     A7 12 E2 FA | 	rdword	arg01, fp
30e68     02 4E 05 F1 | 	add	fp, #2
30e6c     A7 14 E2 FA | 	rdword	arg02, fp
30e70     12 4E 85 F1 | 	sub	fp, #18
30e74     2C FC BF FD | 	call	#_fatfs_cc_unixtime_1154
30e78     04 26 06 F1 | 	add	local01, #4
30e7c     13 FB 61 FC | 	wrlong	result1, local01
30e80                 | '         ent->d_type =  (0) ;
30e80                 | '     }
30e80                 | '     ent->d_size = finfo.fsize;
30e80                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
30e80                 | '     return 0;
30e80     00 FA 05 F6 | 	mov	result1, #0
30e84                 | LR__4915
30e84     A7 F0 03 F6 | 	mov	ptra, fp
30e88     B2 00 A0 FD | 	call	#popregs_
30e8c                 | _fatfs_cc_v_readdir_ret
30e8c     2D 00 64 FD | 	ret
30e90                 | 
30e90                 | _fatfs_cc_v_stat
30e90     05 4A 05 F6 | 	mov	COUNT_, #5
30e94     A8 00 A0 FD | 	call	#pushregs_
30e98     30 F1 07 F1 | 	add	ptra, #304
30e9c     09 27 02 F6 | 	mov	local01, arg01
30ea0     0A 29 02 F6 | 	mov	local02, arg02
30ea4     14 13 02 F6 | 	mov	arg01, local02
30ea8     00 14 06 F6 | 	mov	arg02, #0
30eac     34 16 06 F6 | 	mov	arg03, #52
30eb0     98 00 A0 FD | 	call	#\builtin_bytefill_
30eb4     13 FD C9 FA | 	rdbyte	result2, local01 wz
30eb8     1C 00 90 AD |  if_e	jmp	#LR__4920
30ebc     13 FD C1 FA | 	rdbyte	result2, local01
30ec0     2E FC 0D F2 | 	cmp	result2, #46 wz
30ec4     01 26 06 A1 |  if_e	add	local01, #1
30ec8     13 2B C2 AA |  if_e	rdbyte	local03, local01
30ecc     01 26 86 A1 |  if_e	sub	local01, #1
30ed0     00 2A 4E A2 |  if_e	cmps	local03, #0 wz
30ed4     14 00 90 5D |  if_ne	jmp	#LR__4921
30ed8                 | LR__4920
30ed8     18 4E 05 F1 | 	add	fp, #24
30edc     A7 20 48 FC | 	wrbyte	#16, fp
30ee0     18 4E 85 F1 | 	sub	fp, #24
30ee4     00 2C 06 F6 | 	mov	local04, #0
30ee8     14 00 90 FD | 	jmp	#LR__4922
30eec                 | LR__4921
30eec     A7 14 02 F6 | 	mov	arg02, fp
30ef0     10 14 06 F1 | 	add	arg02, #16
30ef4     13 13 02 F6 | 	mov	arg01, local01
30ef8     4C F3 BF FD | 	call	#_fatfs_cc_f_stat
30efc     FD 2C 02 F6 | 	mov	local04, result1
30f00                 | LR__4922
30f00     00 2C 0E F2 | 	cmp	local04, #0 wz
30f04     0C 00 90 AD |  if_e	jmp	#LR__4923
30f08                 | '         return _set_dos_error(r);
30f08     16 13 02 F6 | 	mov	arg01, local04
30f0c     30 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
30f10     9C 00 90 FD | 	jmp	#LR__4924
30f14                 | LR__4923
30f14     24 2F 06 F6 | 	mov	local05, #292
30f18     18 4E 05 F1 | 	add	fp, #24
30f1c     A7 2A C2 FA | 	rdbyte	local03, fp
30f20     01 2A CE F7 | 	test	local03, #1 wz
30f24     B6 2F 06 A6 |  if_e	mov	local05, #438
30f28     10 2A CE F7 | 	test	local03, #16 wz
30f2c     08 00 00 5F 
30f30     49 2E 46 55 |  if_ne	or	local05, ##4169
30f34     08 28 06 F1 | 	add	local02, #8
30f38     14 2F 62 FC | 	wrlong	local05, local02
30f3c     04 28 06 F1 | 	add	local02, #4
30f40     14 03 68 FC | 	wrlong	#1, local02
30f44     08 4E 85 F1 | 	sub	fp, #8
30f48     A7 FA 01 FB | 	rdlong	result1, fp
30f4c     0C 28 06 F1 | 	add	local02, #12
30f50     14 FB 61 FC | 	wrlong	result1, local02
30f54     04 28 06 F1 | 	add	local02, #4
30f58     14 01 68 FC | 	wrlong	#0, local02
30f5c     04 28 06 F1 | 	add	local02, #4
30f60     01 00 80 FF 
30f64     14 01 68 FC | 	wrlong	##512, local02
30f68     A7 2A 02 FB | 	rdlong	local03, fp
30f6c     FF 2B 06 F1 | 	add	local03, #511
30f70     09 2A 46 F0 | 	shr	local03, #9
30f74     04 28 06 F1 | 	add	local02, #4
30f78     14 2B 62 FC | 	wrlong	local03, local02
30f7c     04 4E 05 F1 | 	add	fp, #4
30f80     A7 12 E2 FA | 	rdword	arg01, fp
30f84     02 4E 05 F1 | 	add	fp, #2
30f88     A7 14 E2 FA | 	rdword	arg02, fp
30f8c     16 4E 85 F1 | 	sub	fp, #22
30f90     10 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
30f94     0C 28 06 F1 | 	add	local02, #12
30f98     14 FB 61 FC | 	wrlong	result1, local02
30f9c     04 28 86 F1 | 	sub	local02, #4
30fa0     14 FB 61 FC | 	wrlong	result1, local02
30fa4     04 28 86 F1 | 	sub	local02, #4
30fa8     14 FB 61 FC | 	wrlong	result1, local02
30fac                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
30fac                 | '     }
30fac                 | '     buf->st_mode = mode;
30fac                 | '     buf->st_nlink = 1;
30fac                 | '     buf->st_size = finfo.fsize;
30fac                 | '     buf->st_blksize = 512;
30fac                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
30fac                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
30fac                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
30fac                 | '     return r;
30fac     16 FB 01 F6 | 	mov	result1, local04
30fb0                 | LR__4924
30fb0     A7 F0 03 F6 | 	mov	ptra, fp
30fb4     B2 00 A0 FD | 	call	#popregs_
30fb8                 | _fatfs_cc_v_stat_ret
30fb8     2D 00 64 FD | 	ret
30fbc                 | 
30fbc                 | _fatfs_cc_v_read
30fbc     02 4A 05 F6 | 	mov	COUNT_, #2
30fc0     A8 00 A0 FD | 	call	#pushregs_
30fc4     1C F0 07 F1 | 	add	ptra, #28
30fc8     09 27 02 F6 | 	mov	local01, arg01
30fcc     13 13 0A FB | 	rdlong	arg01, local01 wz
30fd0                 | '         return _seterror( 5 );
30fd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30fd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30fd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30fdc     01 FA 65 A6 |  if_e	neg	result1, #1
30fe0     58 00 90 AD |  if_e	jmp	#LR__4931
30fe4     02 00 00 FF 
30fe8     10 12 06 F1 | 	add	arg01, ##1040
30fec     A7 18 02 F6 | 	mov	arg04, fp
30ff0     18 18 06 F1 | 	add	arg04, #24
30ff4     40 E3 BF FD | 	call	#_fatfs_cc_f_read
30ff8     FD 18 0A F6 | 	mov	arg04, result1 wz
30ffc     1C 00 90 AD |  if_e	jmp	#LR__4930
31000     08 26 06 F1 | 	add	local01, #8
31004     13 13 02 FB | 	rdlong	arg01, local01
31008     20 12 46 F5 | 	or	arg01, #32
3100c     13 13 62 FC | 	wrlong	arg01, local01
31010                 | '         fil->state |=  (0x20) ;
31010                 | '         return _set_dos_error(r);
31010     0C 13 02 F6 | 	mov	arg01, arg04
31014     28 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31018     20 00 90 FD | 	jmp	#LR__4931
3101c                 | LR__4930
3101c     18 4E 05 F1 | 	add	fp, #24
31020     A7 28 0A FB | 	rdlong	local02, fp wz
31024     08 26 06 A1 |  if_e	add	local01, #8
31028     13 29 02 AB |  if_e	rdlong	local02, local01
3102c     10 28 46 A5 |  if_e	or	local02, #16
31030     13 29 62 AC |  if_e	wrlong	local02, local01
31034                 | '         fil->state |=  (0x10) ;
31034                 | '     }
31034                 | '     return x;
31034     A7 FA 01 FB | 	rdlong	result1, fp
31038     18 4E 85 F1 | 	sub	fp, #24
3103c                 | LR__4931
3103c     A7 F0 03 F6 | 	mov	ptra, fp
31040     B2 00 A0 FD | 	call	#popregs_
31044                 | _fatfs_cc_v_read_ret
31044     2D 00 64 FD | 	ret
31048                 | 
31048                 | _fatfs_cc_v_write
31048     01 4A 05 F6 | 	mov	COUNT_, #1
3104c     A8 00 A0 FD | 	call	#pushregs_
31050     1C F0 07 F1 | 	add	ptra, #28
31054     09 27 02 F6 | 	mov	local01, arg01
31058     13 13 0A FB | 	rdlong	arg01, local01 wz
3105c                 | '         return _seterror( 5 );
3105c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31060     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31064     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31068     01 FA 65 A6 |  if_e	neg	result1, #1
3106c     44 00 90 AD |  if_e	jmp	#LR__4941
31070     02 00 00 FF 
31074     10 12 06 F1 | 	add	arg01, ##1040
31078     A7 18 02 F6 | 	mov	arg04, fp
3107c     18 18 06 F1 | 	add	arg04, #24
31080     48 E6 BF FD | 	call	#_fatfs_cc_f_write
31084     FD 18 0A F6 | 	mov	arg04, result1 wz
31088     1C 00 90 AD |  if_e	jmp	#LR__4940
3108c     08 26 06 F1 | 	add	local01, #8
31090     13 13 02 FB | 	rdlong	arg01, local01
31094     20 12 46 F5 | 	or	arg01, #32
31098     13 13 62 FC | 	wrlong	arg01, local01
3109c                 | '         fil->state |=  (0x20) ;
3109c                 | '         return _set_dos_error(r);
3109c     0C 13 02 F6 | 	mov	arg01, arg04
310a0     9C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
310a4     0C 00 90 FD | 	jmp	#LR__4941
310a8                 | LR__4940
310a8                 | '     }
310a8                 | '     return x;
310a8     18 4E 05 F1 | 	add	fp, #24
310ac     A7 FA 01 FB | 	rdlong	result1, fp
310b0     18 4E 85 F1 | 	sub	fp, #24
310b4                 | LR__4941
310b4     A7 F0 03 F6 | 	mov	ptra, fp
310b8     B2 00 A0 FD | 	call	#popregs_
310bc                 | _fatfs_cc_v_write_ret
310bc     2D 00 64 FD | 	ret
310c0                 | 
310c0                 | _fatfs_cc_v_lseek
310c0     06 4A 05 F6 | 	mov	COUNT_, #6
310c4     A8 00 A0 FD | 	call	#pushregs_
310c8     0A 2B 02 F6 | 	mov	local03, arg02
310cc     0C 2D 02 F6 | 	mov	local04, arg04
310d0     09 2F 02 FB | 	rdlong	local05, arg01
310d4     02 00 00 FF 
310d8     10 2E 0E F1 | 	add	local05, ##1040 wz
310dc                 | '         return _seterror( 5 );
310dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
310e0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
310e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
310e8     01 FC 65 A6 |  if_e	neg	result2, #1
310ec     01 FA 65 A6 |  if_e	neg	result1, #1
310f0     58 00 90 AD |  if_e	jmp	#LR__4952
310f4     00 2C 0E F2 | 	cmp	local04, #0 wz
310f8     24 00 90 AD |  if_e	jmp	#LR__4950
310fc     01 2C 0E F2 | 	cmp	local04, #1 wz
31100     14 2E 06 A1 |  if_e	add	local05, #20
31104     17 31 02 AB |  if_e	rdlong	local06, local05
31108     14 2E 86 A1 |  if_e	sub	local05, #20
3110c     18 2B 02 A1 |  if_e	add	local03, local06
31110     0C 2E 06 51 |  if_ne	add	local05, #12
31114     17 31 02 5B |  if_ne	rdlong	local06, local05
31118     0C 2E 86 51 |  if_ne	sub	local05, #12
3111c     18 2B 02 51 |  if_ne	add	local03, local06
31120                 | LR__4950
31120     17 13 02 F6 | 	mov	arg01, local05
31124     15 15 02 F6 | 	mov	arg02, local03
31128     90 EB BF FD | 	call	#_fatfs_cc_f_lseek
3112c     FD 12 0A F6 | 	mov	arg01, result1 wz
31130     10 00 90 AD |  if_e	jmp	#LR__4951
31134                 | '         return _set_dos_error(result);
31134     08 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31138     FD FC 01 F6 | 	mov	result2, result1
3113c     1F FC C5 F0 | 	sar	result2, #31
31140     08 00 90 FD | 	jmp	#LR__4952
31144                 | LR__4951
31144                 | '     }
31144                 | '     return (off_t)offset;
31144     15 FB 01 F6 | 	mov	result1, local03
31148     14 FD 01 F6 | 	mov	result2, local02
3114c                 | LR__4952
3114c     A7 F0 03 F6 | 	mov	ptra, fp
31150     B2 00 A0 FD | 	call	#popregs_
31154                 | _fatfs_cc_v_lseek_ret
31154     2D 00 64 FD | 	ret
31158                 | 
31158                 | _fatfs_cc_v_ioctl
31158                 | ' {
31158                 | '     return _seterror( 10 );
31158     20 E6 05 F1 | 	add	ptr___system__dat__, #32
3115c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
31160     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
31164     01 FA 65 F6 | 	neg	result1, #1
31168                 | _fatfs_cc_v_ioctl_ret
31168     2D 00 64 FD | 	ret
3116c                 | 
3116c                 | _fatfs_cc_v_mkdir
3116c     F0 F2 BF FD | 	call	#_fatfs_cc_f_mkdir
31170     FD 12 02 F6 | 	mov	arg01, result1
31174                 | ' 
31174                 | '     r = f_mkdir(name);
31174                 | '     return _set_dos_error(r);
31174     C8 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31178                 | _fatfs_cc_v_mkdir_ret
31178     2D 00 64 FD | 	ret
3117c                 | 
3117c                 | _fatfs_cc_v_remove
3117c     5C F1 BF FD | 	call	#_fatfs_cc_f_unlink
31180     FD 12 02 F6 | 	mov	arg01, result1
31184                 | ' 
31184                 | '     r = f_unlink(name);
31184                 | '     return _set_dos_error(r);
31184     B8 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31188                 | _fatfs_cc_v_remove_ret
31188     2D 00 64 FD | 	ret
3118c                 | 
3118c                 | _fatfs_cc_v_rmdir
3118c     4C F1 BF FD | 	call	#_fatfs_cc_f_unlink
31190     FD 12 02 F6 | 	mov	arg01, result1
31194                 | ' 
31194                 | '     r = f_unlink(name);
31194                 | '     return _set_dos_error(r);
31194     A8 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31198                 | _fatfs_cc_v_rmdir_ret
31198     2D 00 64 FD | 	ret
3119c                 | 
3119c                 | _fatfs_cc_v_rename
3119c     00 F5 BF FD | 	call	#_fatfs_cc_f_rename
311a0     FD 12 02 F6 | 	mov	arg01, result1
311a4                 | '     return _set_dos_error(r);
311a4     98 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
311a8                 | _fatfs_cc_v_rename_ret
311a8     2D 00 64 FD | 	ret
311ac                 | 
311ac                 | _fatfs_cc_v_open
311ac     07 4A 05 F6 | 	mov	COUNT_, #7
311b0     A8 00 A0 FD | 	call	#pushregs_
311b4     09 27 02 F6 | 	mov	local01, arg01
311b8     0A 29 02 F6 | 	mov	local02, arg02
311bc     0B 2B 02 F6 | 	mov	local03, arg03
311c0     03 00 00 FF 
311c4     38 12 06 F6 | 	mov	arg01, ##1592
311c8                 | '     return _gc_alloc(size);
311c8     10 14 06 F6 | 	mov	arg02, #16
311cc     CC 6F BF FD | 	call	#__system___gc_doalloc
311d0     FD 2C 0A F6 | 	mov	local04, result1 wz
311d4                 | '       return _seterror( 7 );
311d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
311d8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
311dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
311e0     01 FA 65 A6 |  if_e	neg	result1, #1
311e4     90 00 90 AD |  if_e	jmp	#LR__4966
311e8     16 13 02 F6 | 	mov	arg01, local04
311ec     00 14 06 F6 | 	mov	arg02, #0
311f0     03 00 00 FF 
311f4     38 16 06 F6 | 	mov	arg03, ##1592
311f8     98 00 A0 FD | 	call	#\builtin_bytefill_
311fc                 | '   switch (flags & 3) {
311fc     15 2F 02 F6 | 	mov	local05, local03
31200     03 2E 0E F5 | 	and	local05, #3 wz
31204     0C 00 90 AD |  if_e	jmp	#LR__4960
31208     01 2E 0E F2 | 	cmp	local05, #1 wz
3120c     0C 00 90 AD |  if_e	jmp	#LR__4961
31210     10 00 90 FD | 	jmp	#LR__4962
31214                 | LR__4960
31214     01 30 06 F6 | 	mov	local06, #1
31218                 | '       fs_flags =  0x01 ;
31218                 | '       break;
31218     0C 00 90 FD | 	jmp	#LR__4963
3121c                 | LR__4961
3121c     02 30 06 F6 | 	mov	local06, #2
31220                 | '       fs_flags =  0x02 ;
31220                 | '       break;
31220     04 00 90 FD | 	jmp	#LR__4963
31224                 | LR__4962
31224     03 30 06 F6 | 	mov	local06, #3
31228                 | '       fs_flags =  0x01  |  0x02 ;
31228                 | '       break;
31228                 | LR__4963
31228     08 2A CE F7 | 	test	local03, #8 wz
3122c     18 30 46 55 |  if_ne	or	local06, #24
31230     08 00 90 5D |  if_ne	jmp	#LR__4964
31234     20 2A CE F7 | 	test	local03, #32 wz
31238     30 30 46 55 |  if_ne	or	local06, #48
3123c                 | LR__4964
3123c     16 13 02 F6 | 	mov	arg01, local04
31240     02 00 00 FF 
31244     10 12 06 F1 | 	add	arg01, ##1040
31248     14 15 02 F6 | 	mov	arg02, local02
3124c     18 17 02 F6 | 	mov	arg03, local06
31250     8C DC BF FD | 	call	#_fatfs_cc_f_open
31254     FD 32 0A F6 | 	mov	local07, result1 wz
31258     14 00 90 AD |  if_e	jmp	#LR__4965
3125c     16 13 02 F6 | 	mov	arg01, local04
31260                 | '     return _gc_free(ptr);
31260     3C 70 BF FD | 	call	#__system___gc_free
31264                 | '     free(f);
31264                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31264                 | '     return _set_dos_error(r);
31264     19 13 02 F6 | 	mov	arg01, local07
31268     D4 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3126c     08 00 90 FD | 	jmp	#LR__4966
31270                 | LR__4965
31270     13 2D 62 FC | 	wrlong	local04, local01
31274                 | '   }
31274                 | '   fil->vfsdata = f;
31274                 | '   return 0;
31274     00 FA 05 F6 | 	mov	result1, #0
31278                 | LR__4966
31278     A7 F0 03 F6 | 	mov	ptra, fp
3127c     B2 00 A0 FD | 	call	#popregs_
31280                 | _fatfs_cc_v_open_ret
31280     2D 00 64 FD | 	ret
31284                 | 
31284                 | _fatfs_cc_v_flush
31284     08 4A 05 F6 | 	mov	COUNT_, #8
31288     A8 00 A0 FD | 	call	#pushregs_
3128c     09 27 02 F6 | 	mov	local01, arg01
31290     09 29 02 F6 | 	mov	local02, arg01
31294     14 2B 02 FB | 	rdlong	local03, local02
31298     15 2D 02 FB | 	rdlong	local04, local03
3129c     08 28 06 F1 | 	add	local02, #8
312a0     14 FD 01 FB | 	rdlong	result2, local02
312a4     08 28 86 F1 | 	sub	local02, #8
312a8     08 FC CD F7 | 	test	result2, #8 wz
312ac     D4 00 90 AD |  if_e	jmp	#LR__4972
312b0     01 2C 56 F2 | 	cmps	local04, #1 wc
312b4     2C 01 90 CD |  if_b	jmp	#LR__4974
312b8     08 28 06 F1 | 	add	local02, #8
312bc     14 FD 01 FB | 	rdlong	result2, local02
312c0     08 28 86 F1 | 	sub	local02, #8
312c4     80 FC CD F7 | 	test	result2, #128 wz
312c8     6C 00 90 AD |  if_e	jmp	#LR__4971
312cc     08 28 06 F1 | 	add	local02, #8
312d0     14 17 02 FB | 	rdlong	arg03, local02
312d4     08 28 86 F1 | 	sub	local02, #8
312d8     00 17 CE F7 | 	test	arg03, #256 wz
312dc     58 00 90 AD |  if_e	jmp	#LR__4970
312e0     30 28 06 F1 | 	add	local02, #48
312e4     14 2F 02 FB | 	rdlong	local05, local02
312e8     17 31 02 F6 | 	mov	local06, local05
312ec     30 28 86 F1 | 	sub	local02, #48
312f0     13 30 46 F7 | 	zerox	local06, #19
312f4     14 2E 46 F0 | 	shr	local05, #20
312f8     02 2E 66 F0 | 	shl	local05, #2
312fc     ED 2E 02 F1 | 	add	local05, __methods__
31300     17 2F 02 FB | 	rdlong	local05, local05
31304     14 13 02 F6 | 	mov	arg01, local02
31308     00 14 06 F6 | 	mov	arg02, #0
3130c     00 16 06 F6 | 	mov	arg03, #0
31310     02 18 06 F6 | 	mov	arg04, #2
31314     F2 32 02 F6 | 	mov	local07, objptr
31318     18 E5 01 F6 | 	mov	objptr, local06
3131c     2D 2E 62 FD | 	call	local05
31320     19 E5 01 F6 | 	mov	objptr, local07
31324     08 28 06 F1 | 	add	local02, #8
31328     14 33 02 FB | 	rdlong	local07, local02
3132c     00 33 26 F5 | 	andn	local07, #256
31330     14 33 62 FC | 	wrlong	local07, local02
31334     08 28 86 F1 | 	sub	local02, #8
31338                 | LR__4970
31338                 | LR__4971
31338     18 28 06 F1 | 	add	local02, #24
3133c     14 2F 02 FB | 	rdlong	local05, local02
31340     17 31 02 F6 | 	mov	local06, local05
31344     18 28 86 F1 | 	sub	local02, #24
31348     13 30 46 F7 | 	zerox	local06, #19
3134c     14 2E 46 F0 | 	shr	local05, #20
31350     02 2E 66 F0 | 	shl	local05, #2
31354     ED 2E 02 F1 | 	add	local05, __methods__
31358     17 2F 02 FB | 	rdlong	local05, local05
3135c     0C 2A 06 F1 | 	add	local03, #12
31360     15 15 02 FB | 	rdlong	arg02, local03
31364     0C 2A 86 F1 | 	sub	local03, #12
31368     14 13 02 F6 | 	mov	arg01, local02
3136c     16 17 02 F6 | 	mov	arg03, local04
31370     F2 32 02 F6 | 	mov	local07, objptr
31374     18 E5 01 F6 | 	mov	objptr, local06
31378     2D 2E 62 FD | 	call	local05
3137c     19 E5 01 F6 | 	mov	objptr, local07
31380     60 00 90 FD | 	jmp	#LR__4974
31384                 | LR__4972
31384     08 28 06 F1 | 	add	local02, #8
31388     14 33 02 FB | 	rdlong	local07, local02
3138c     08 28 86 F1 | 	sub	local02, #8
31390     04 32 CE F7 | 	test	local07, #4 wz
31394     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
31398     48 00 90 AD |  if_e	jmp	#LR__4973
3139c     16 15 62 F6 | 	neg	arg02, local04
313a0     0A 17 02 F6 | 	mov	arg03, arg02
313a4     1F 16 C6 F0 | 	sar	arg03, #31
313a8     30 28 06 F1 | 	add	local02, #48
313ac     14 2F 02 FB | 	rdlong	local05, local02
313b0     17 31 02 F6 | 	mov	local06, local05
313b4     30 28 86 F1 | 	sub	local02, #48
313b8     13 30 46 F7 | 	zerox	local06, #19
313bc     14 2E 46 F0 | 	shr	local05, #20
313c0     02 2E 66 F0 | 	shl	local05, #2
313c4     ED 2E 02 F1 | 	add	local05, __methods__
313c8     17 2F 02 FB | 	rdlong	local05, local05
313cc     14 13 02 F6 | 	mov	arg01, local02
313d0     01 18 06 F6 | 	mov	arg04, #1
313d4     F2 32 02 F6 | 	mov	local07, objptr
313d8     18 E5 01 F6 | 	mov	objptr, local06
313dc     2D 2E 62 FD | 	call	local05
313e0     19 E5 01 F6 | 	mov	objptr, local07
313e4                 | LR__4973
313e4                 | LR__4974
313e4     15 01 68 FC | 	wrlong	#0, local03
313e8     04 2A 06 F1 | 	add	local03, #4
313ec     15 01 68 FC | 	wrlong	#0, local03
313f0     08 28 06 F1 | 	add	local02, #8
313f4     14 35 02 FB | 	rdlong	local08, local02
313f8     0C 34 26 F5 | 	andn	local08, #12
313fc     14 35 62 FC | 	wrlong	local08, local02
31400                 | '     }
31400                 | '     b->cnt = 0;
31400                 | '     b->ptr = 0;
31400                 | '     f->state &= ~( (0x08) | (0x04) );
31400                 | '     return 0;
31400     00 FA 05 F6 | 	mov	result1, #0
31404     13 27 02 FB | 	rdlong	local01, local01
31408     02 00 00 FF 
3140c     10 26 0E F1 | 	add	local01, ##1040 wz
31410                 | '         return _seterror( 5 );
31410     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31414     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31418     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3141c     01 FA 65 A6 |  if_e	neg	result1, #1
31420     10 00 90 AD |  if_e	jmp	#LR__4975
31424     13 13 02 F6 | 	mov	arg01, local01
31428     E4 E6 BF FD | 	call	#_fatfs_cc_f_sync
3142c     FD 12 02 F6 | 	mov	arg01, result1
31430                 | '     }
31430                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31430                 | '     result = f_sync(f);
31430                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31430                 | '     return _set_dos_error(result);
31430     0C F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31434                 | LR__4975
31434     A7 F0 03 F6 | 	mov	ptra, fp
31438     B2 00 A0 FD | 	call	#popregs_
3143c                 | _fatfs_cc_v_flush_ret
3143c     2D 00 64 FD | 	ret
31440                 | 
31440                 | _fatfs_cc_v_init
31440                 | ' {
31440                 | '     return 0;
31440     00 FA 05 F6 | 	mov	result1, #0
31444                 | _fatfs_cc_v_init_ret
31444     2D 00 64 FD | 	ret
31448                 | 
31448                 | _fatfs_cc_v_deinit
31448     8D 01 00 FF 
3144c     AC 15 06 F6 | 	mov	arg02, ##@LR__5086
31450     00 12 06 F6 | 	mov	arg01, #0
31454     00 16 06 F6 | 	mov	arg03, #0
31458     B4 D9 BF FD | 	call	#_fatfs_cc_f_mount
3145c     01 00 00 FF 
31460     08 E4 05 F1 | 	add	objptr, ##520
31464     F2 12 02 FB | 	rdlong	arg01, objptr
31468     04 E4 05 F1 | 	add	objptr, #4
3146c     F2 14 02 FB | 	rdlong	arg02, objptr
31470     01 00 00 FF 
31474     0C E4 85 F1 | 	sub	objptr, ##524
31478     D0 56 BF FD | 	call	#__system___freepins
3147c                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
3147c                 | '     _freepins(f_pinmask);
3147c                 | '     return 0;
3147c     00 FA 05 F6 | 	mov	result1, #0
31480                 | _fatfs_cc_v_deinit_ret
31480     2D 00 64 FD | 	ret
31484                 | 
31484                 | _fatfs_cc_gettimeofday
31484     03 4A 05 F6 | 	mov	COUNT_, #3
31488     A8 00 A0 FD | 	call	#pushregs_
3148c     09 27 02 F6 | 	mov	local01, arg01
31490     E8 3A BF FD | 	call	#__system___getus
31494     FD 12 02 F6 | 	mov	arg01, result1
31498     02 00 00 FF 
3149c     08 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
314a0     F6 FA 01 FB | 	rdlong	result1, ptr__fatfs_cc_dat__
314a4     09 29 02 F6 | 	mov	local02, arg01
314a8     FD 28 82 F1 | 	sub	local02, result1
314ac     A1 07 00 FF 
314b0     40 28 16 FD | 	qdiv	local02, ##1000000
314b4     02 00 00 FF 
314b8     08 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
314bc     A1 07 00 FF 
314c0     40 2A 06 F6 | 	mov	local03, ##1000000
314c4     18 FA 61 FD | 	getqx	result1
314c8     A1 07 00 FF 
314cc     40 28 16 FD | 	qdiv	local02, ##1000000
314d0     00 FA 0D F2 | 	cmp	result1, #0 wz
314d4     02 00 00 5F 
314d8     04 ED 05 51 |  if_ne	add	ptr__fatfs_cc_dat__, ##1284
314dc     F6 2A 02 5B |  if_ne	rdlong	local03, ptr__fatfs_cc_dat__
314e0     FD 2A 02 51 |  if_ne	add	local03, result1
314e4     F6 2A 62 5C |  if_ne	wrlong	local03, ptr__fatfs_cc_dat__
314e8     04 EC 05 51 |  if_ne	add	ptr__fatfs_cc_dat__, #4
314ec                 | '         lastsec += secs;
314ec                 | '         lastus = now - leftover;
314ec                 | '     }
314ec                 | '     tv->tv_sec = lastsec;
314ec                 | '     tv->tv_usec = leftover;
314ec                 | '     return 0;
314ec     00 FA 05 F6 | 	mov	result1, #0
314f0     19 28 62 FD | 	getqy	local02
314f4     14 13 82 51 |  if_ne	sub	arg01, local02
314f8     F6 12 62 5C |  if_ne	wrlong	arg01, ptr__fatfs_cc_dat__
314fc     02 00 00 5F 
31500     08 ED 85 51 |  if_ne	sub	ptr__fatfs_cc_dat__, ##1288
31504     02 00 00 FF 
31508     04 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
3150c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31510     02 00 00 FF 
31514     04 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
31518     13 2B 62 FC | 	wrlong	local03, local01
3151c     04 26 06 F1 | 	add	local01, #4
31520     13 29 62 FC | 	wrlong	local02, local01
31524     A7 F0 03 F6 | 	mov	ptra, fp
31528     B2 00 A0 FD | 	call	#popregs_
3152c                 | _fatfs_cc_gettimeofday_ret
3152c     2D 00 64 FD | 	ret
31530                 | 
31530                 | _fatfs_cc__is_leap_year
31530     09 FB 51 F6 | 	abs	result1, arg01 wc
31534     03 FA 05 F5 | 	and	result1, #3
31538     FD FA 89 F6 | 	negc	result1, result1 wz
3153c     38 00 90 5D |  if_ne	jmp	#LR__4981
31540     09 FB 51 F6 | 	abs	result1, arg01 wc
31544     64 FA 15 FD | 	qdiv	result1, #100
31548     19 FA 61 FD | 	getqy	result1
3154c     FD FA 89 F6 | 	negc	result1, result1 wz
31550     1C 00 90 5D |  if_ne	jmp	#LR__4980
31554     09 FB 51 F6 | 	abs	result1, arg01 wc
31558     90 FB 15 FD | 	qdiv	result1, #400
3155c                 | '       return (0 == y % 400);
3155c     00 FA 05 F6 | 	mov	result1, #0
31560     19 00 62 FD | 	getqy	_var01
31564     00 01 8A F6 | 	negc	_var01, _var01 wz
31568     01 FA 05 A6 |  if_e	mov	result1, #1
3156c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31570                 | LR__4980
31570                 | '     return 1;
31570     01 FA 05 F6 | 	mov	result1, #1
31574     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31578                 | LR__4981
31578                 | '   }
31578                 | '   return 0;
31578     00 FA 05 F6 | 	mov	result1, #0
3157c                 | _fatfs_cc__is_leap_year_ret
3157c     2D 00 64 FD | 	ret
31580                 | 
31580                 | _fatfs_cc___tzoffset
31580     09 01 0A F6 | 	mov	_var01, arg01 wz
31584     FF FF FF FF 
31588     0A FF 6B FC | 	wrlong	##-1, arg02
3158c     01 02 06 F6 | 	mov	_var02, #1
31590     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31594                 | '                 return 0;
31594     00 FA 05 A6 |  if_e	mov	result1, #0
31598     68 02 90 AD |  if_e	jmp	#LR__5001
3159c     0A 01 68 FC | 	wrlong	#0, arg02
315a0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
315a4     02 00 00 FF 
315a8     DC 06 06 F1 | 	add	_var04, ##1244
315ac     97 28 48 FB | 	callpa	#(@LR__4991-@LR__4990)>>2,fcache_load_ptr_
315b0                 | ' 
315b0                 | '        *hasdst = 0;
315b0                 | ' 
315b0                 | ' 	n = stdname;
315b0                 | '         while (*s && isalpha(*s)) {
315b0                 | LR__4990
315b0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
315b4     48 00 90 AD |  if_e	jmp	#LR__4992
315b8     00 09 C2 FA | 	rdbyte	_var05, _var01
315bc     04 13 02 F6 | 	mov	arg01, _var05
315c0                 | ' {
315c0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
315c0     80 12 36 F3 | 	fle	arg01, #128 wc
315c4                 | '     return __ctype[c];
315c4     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
315c8     02 00 00 FF 
315cc     0C FB 05 F1 | 	add	result1, ##1292
315d0     FD 12 02 F1 | 	add	arg01, result1
315d4     09 FB C1 FA | 	rdbyte	result1, arg01
315d8     0C FA CD F7 | 	test	result1, #12 wz
315dc     03 05 02 56 |  if_ne	mov	_var03, _var04
315e0     01 06 06 51 |  if_ne	add	_var04, #1
315e4     00 09 02 56 |  if_ne	mov	_var05, _var01
315e8     00 0B 02 56 |  if_ne	mov	_var06, _var01
315ec     01 0A 06 51 |  if_ne	add	_var06, #1
315f0     04 0D C2 5A |  if_ne	rdbyte	_var07, _var05
315f4     05 01 02 56 |  if_ne	mov	_var01, _var06
315f8     02 0D 42 5C |  if_ne	wrbyte	_var07, _var03
315fc     B0 FF 9F 5D |  if_ne	jmp	#LR__4990
31600                 | LR__4991
31600                 | LR__4992
31600     03 01 48 FC | 	wrbyte	#0, _var04
31604     00 0E 06 F6 | 	mov	_var08, #0
31608     00 05 C2 FA | 	rdbyte	_var03, _var01
3160c     2D 04 0E F2 | 	cmp	_var03, #45 wz
31610     01 02 66 A6 |  if_e	neg	_var02, #1
31614     01 00 06 A1 |  if_e	add	_var01, #1
31618     97 24 48 FB | 	callpa	#(@LR__4994-@LR__4993)>>2,fcache_load_ptr_
3161c                 | '                 sgn = -1;
3161c                 | '                 s++;
3161c                 | '         }
3161c                 | '         while (isdigit(*s)) {
3161c                 | LR__4993
3161c     00 13 C2 FA | 	rdbyte	arg01, _var01
31620                 | ' {
31620                 | '   return  (__ctype_get(c) & 0x02 ) ;
31620     80 12 36 F3 | 	fle	arg01, #128 wc
31624                 | '     return __ctype[c];
31624     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31628     02 00 00 FF 
3162c     0C FB 05 F1 | 	add	result1, ##1292
31630     FD 12 02 F1 | 	add	arg01, result1
31634     09 FB C1 FA | 	rdbyte	result1, arg01
31638     02 FA CD F7 | 	test	result1, #2 wz
3163c     07 05 02 56 |  if_ne	mov	_var03, _var08
31640     02 04 66 50 |  if_ne	shl	_var03, #2
31644     07 05 02 51 |  if_ne	add	_var03, _var08
31648     01 04 66 50 |  if_ne	shl	_var03, #1
3164c     00 09 C2 5A |  if_ne	rdbyte	_var05, _var01
31650     30 08 86 51 |  if_ne	sub	_var05, #48
31654     04 05 02 51 |  if_ne	add	_var03, _var05
31658     02 0F 02 56 |  if_ne	mov	_var08, _var03
3165c     01 00 06 51 |  if_ne	add	_var01, #1
31660     B8 FF 9F 5D |  if_ne	jmp	#LR__4993
31664                 | LR__4994
31664     07 00 00 FF 
31668     10 0E 06 FD | 	qmul	_var08, ##3600
3166c     00 05 C2 FA | 	rdbyte	_var03, _var01
31670     3A 04 0E F2 | 	cmp	_var03, #58 wz
31674     18 10 62 FD | 	getqx	_var09
31678     68 00 90 5D |  if_ne	jmp	#LR__4997
3167c     00 0E 06 F6 | 	mov	_var08, #0
31680     01 00 06 F1 | 	add	_var01, #1
31684     97 24 48 FB | 	callpa	#(@LR__4996-@LR__4995)>>2,fcache_load_ptr_
31688                 | '                 x = 0;
31688                 | '                 s++;
31688                 | '                 while (isdigit(*s)) {
31688                 | LR__4995
31688     00 13 C2 FA | 	rdbyte	arg01, _var01
3168c                 | ' {
3168c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3168c     80 12 36 F3 | 	fle	arg01, #128 wc
31690                 | '     return __ctype[c];
31690     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31694     02 00 00 FF 
31698     0C FB 05 F1 | 	add	result1, ##1292
3169c     FD 12 02 F1 | 	add	arg01, result1
316a0     09 FB C1 FA | 	rdbyte	result1, arg01
316a4     02 FA CD F7 | 	test	result1, #2 wz
316a8     07 05 02 56 |  if_ne	mov	_var03, _var08
316ac     02 04 66 50 |  if_ne	shl	_var03, #2
316b0     07 05 02 51 |  if_ne	add	_var03, _var08
316b4     01 04 66 50 |  if_ne	shl	_var03, #1
316b8     00 09 C2 5A |  if_ne	rdbyte	_var05, _var01
316bc     30 08 86 51 |  if_ne	sub	_var05, #48
316c0     04 05 02 51 |  if_ne	add	_var03, _var05
316c4     02 0F 02 56 |  if_ne	mov	_var08, _var03
316c8     01 00 06 51 |  if_ne	add	_var01, #1
316cc     B8 FF 9F 5D |  if_ne	jmp	#LR__4995
316d0                 | LR__4996
316d0     07 09 02 F6 | 	mov	_var05, _var08
316d4     04 08 66 F0 | 	shl	_var05, #4
316d8     07 09 82 F1 | 	sub	_var05, _var08
316dc     02 08 66 F0 | 	shl	_var05, #2
316e0     04 11 02 F1 | 	add	_var09, _var05
316e4                 | LR__4997
316e4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
316e8     02 00 00 FF 
316ec     E5 06 06 F1 | 	add	_var04, ##1253
316f0     00 13 C2 FA | 	rdbyte	arg01, _var01
316f4                 | ' {
316f4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
316f4     80 12 36 F3 | 	fle	arg01, #128 wc
316f8                 | '     return __ctype[c];
316f8     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
316fc     02 00 00 FF 
31700     0C FB 05 F1 | 	add	result1, ##1292
31704     FD 12 02 F1 | 	add	arg01, result1
31708     09 FB C1 FA | 	rdbyte	result1, arg01
3170c     0C FA CD F7 | 	test	result1, #12 wz
31710     4C 00 90 AD |  if_e	jmp	#LR__5000
31714     0A 03 68 FC | 	wrlong	#1, arg02
31718                 | '                 *hasdst = 1;
31718                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
31718                 | LR__4998
31718     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3171c     40 00 90 AD |  if_e	jmp	#LR__4999
31720     00 13 C2 FA | 	rdbyte	arg01, _var01
31724                 | ' {
31724                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31724     80 12 36 F3 | 	fle	arg01, #128 wc
31728                 | '     return __ctype[c];
31728     F6 FA 01 F6 | 	mov	result1, ptr__fatfs_cc_dat__
3172c     02 00 00 FF 
31730     0C FB 05 F1 | 	add	result1, ##1292
31734     FD 12 02 F1 | 	add	arg01, result1
31738     09 FB C1 FA | 	rdbyte	result1, arg01
3173c     0C FA CD F7 | 	test	result1, #12 wz
31740     03 05 02 56 |  if_ne	mov	_var03, _var04
31744     01 06 06 51 |  if_ne	add	_var04, #1
31748     00 0B 02 56 |  if_ne	mov	_var06, _var01
3174c     01 0A 06 51 |  if_ne	add	_var06, #1
31750     00 0D C2 5A |  if_ne	rdbyte	_var07, _var01
31754     05 01 02 56 |  if_ne	mov	_var01, _var06
31758     02 0D 42 5C |  if_ne	wrbyte	_var07, _var03
3175c     B8 FF 9F 5D |  if_ne	jmp	#LR__4998
31760                 | LR__4999
31760                 | LR__5000
31760     03 01 48 FC | 	wrbyte	#0, _var04
31764     02 00 00 FF 
31768     DC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
3176c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31770     02 00 00 FF 
31774     DC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
31778     02 00 00 5F 
3177c     DC EC 05 51 |  if_ne	add	ptr__fatfs_cc_dat__, ##1244
31780     F6 04 02 56 |  if_ne	mov	_var03, ptr__fatfs_cc_dat__
31784     08 EC 85 51 |  if_ne	sub	ptr__fatfs_cc_dat__, #8
31788     F6 04 62 5C |  if_ne	wrlong	_var03, ptr__fatfs_cc_dat__
3178c     02 00 00 5F 
31790     D4 EC 85 51 |  if_ne	sub	ptr__fatfs_cc_dat__, ##1236
31794     02 00 00 AF 
31798     EE EC 05 A1 |  if_e	add	ptr__fatfs_cc_dat__, ##1262
3179c     F6 04 02 A6 |  if_e	mov	_var03, ptr__fatfs_cc_dat__
317a0     08 03 02 FD | 	qmul	_var02, _var09
317a4     1A EC 85 A1 |  if_e	sub	ptr__fatfs_cc_dat__, #26
317a8     F6 04 62 AC |  if_e	wrlong	_var03, ptr__fatfs_cc_dat__
317ac     02 00 00 AF 
317b0     D4 EC 85 A1 |  if_e	sub	ptr__fatfs_cc_dat__, ##1236
317b4     02 00 00 FF 
317b8     E5 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
317bc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
317c0     02 00 00 FF 
317c4     E5 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
317c8     02 00 00 5F 
317cc     E5 EC 05 51 |  if_ne	add	ptr__fatfs_cc_dat__, ##1253
317d0     F6 04 02 56 |  if_ne	mov	_var03, ptr__fatfs_cc_dat__
317d4     0D EC 85 51 |  if_ne	sub	ptr__fatfs_cc_dat__, #13
317d8     F6 04 62 5C |  if_ne	wrlong	_var03, ptr__fatfs_cc_dat__
317dc     02 00 00 5F 
317e0     D8 EC 85 51 |  if_ne	sub	ptr__fatfs_cc_dat__, ##1240
317e4     02 00 00 AF 
317e8     DC EC 05 A1 |  if_e	add	ptr__fatfs_cc_dat__, ##1244
317ec     F6 04 02 A6 |  if_e	mov	_var03, ptr__fatfs_cc_dat__
317f0     04 EC 85 A1 |  if_e	sub	ptr__fatfs_cc_dat__, #4
317f4     F6 04 62 AC |  if_e	wrlong	_var03, ptr__fatfs_cc_dat__
317f8     02 00 00 AF 
317fc     D8 EC 85 A1 |  if_e	sub	ptr__fatfs_cc_dat__, ##1240
31800                 | ' 		_tzname[1] = stdname;
31800                 | ' 
31800                 | '         return sgn * off;
31800     18 FA 61 FD | 	getqx	result1
31804                 | LR__5001
31804                 | _fatfs_cc___tzoffset_ret
31804     2D 00 64 FD | 	ret
31808                 | 
31808                 | _fatfs_cc___indst
31808     10 12 06 F1 | 	add	arg01, #16
3180c     09 01 02 FB | 	rdlong	_var01, arg01
31810     10 12 86 F1 | 	sub	arg01, #16
31814     02 00 0E F2 | 	cmp	_var01, #2 wz
31818     30 00 90 5D |  if_ne	jmp	#LR__5010
3181c     07 00 06 F6 | 	mov	_var01, #7
31820     18 12 06 F1 | 	add	arg01, #24
31824     09 03 02 FB | 	rdlong	_var02, arg01
31828     01 01 02 F1 | 	add	_var01, _var02
3182c     0C 12 86 F1 | 	sub	arg01, #12
31830     09 05 02 FB | 	rdlong	_var03, arg01
31834     02 01 82 F1 | 	sub	_var01, _var03
31838     00 00 56 F2 | 	cmps	_var01, #0 wc
3183c                 | '                         return 1;
3183c     01 FA 05 C6 |  if_b	mov	result1, #1
31840     6C 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31844                 | '                 return 0;
31844     00 FA 05 F6 | 	mov	result1, #0
31848     64 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3184c                 | LR__5010
3184c     10 12 06 F1 | 	add	arg01, #16
31850     09 01 02 FB | 	rdlong	_var01, arg01
31854     10 12 86 F1 | 	sub	arg01, #16
31858     0A 00 0E F2 | 	cmp	_var01, #10 wz
3185c     18 12 06 A1 |  if_e	add	arg01, #24
31860     09 01 02 AB |  if_e	rdlong	_var01, arg01
31864     0C 12 86 A1 |  if_e	sub	arg01, #12
31868     09 07 02 AB |  if_e	rdlong	_var04, arg01
3186c     03 01 82 A1 |  if_e	sub	_var01, _var04
31870     00 00 56 A2 |  if_e	cmps	_var01, #0 wc
31874                 | '                         return 0;
31874     00 FA 05 86 |  if_c_and_z	mov	result1, #0
31878     34 00 90 8D |  if_c_and_z	jmp	#_fatfs_cc___indst_ret
3187c                 | '                 return 1;
3187c     01 FA 05 A6 |  if_e	mov	result1, #1
31880     2C 00 90 AD |  if_e	jmp	#_fatfs_cc___indst_ret
31884                 | '         }
31884                 | ' 
31884                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
31884     00 00 06 F6 | 	mov	_var01, #0
31888     10 12 06 F1 | 	add	arg01, #16
3188c     09 03 02 FB | 	rdlong	_var02, arg01
31890     10 12 86 F1 | 	sub	arg01, #16
31894     03 02 56 F2 | 	cmps	_var02, #3 wc
31898     10 00 90 CD |  if_b	jmp	#LR__5011
3189c     10 12 06 F1 | 	add	arg01, #16
318a0     09 05 02 FB | 	rdlong	_var03, arg01
318a4     0A 04 56 F2 | 	cmps	_var03, #10 wc
318a8     01 00 06 C6 |  if_b	mov	_var01, #1
318ac                 | LR__5011
318ac     00 FB 01 F6 | 	mov	result1, _var01
318b0                 | _fatfs_cc___indst_ret
318b0     2D 00 64 FD | 	ret
318b4                 | 
318b4                 | _fatfs_cc_disk_deinitialize
318b4     03 4A 05 F6 | 	mov	COUNT_, #3
318b8     A8 00 A0 FD | 	call	#pushregs_
318bc     01 00 00 FF 
318c0     10 E4 05 F1 | 	add	objptr, ##528
318c4     F2 12 0A FB | 	rdlong	arg01, objptr wz
318c8     01 00 00 FF 
318cc     10 E4 85 F1 | 	sub	objptr, ##528
318d0                 | ' 
318d0                 | '         return RES_NOTRDY;
318d0     03 FA 05 A6 |  if_e	mov	result1, #3
318d4     4C 00 90 AD |  if_e	jmp	#LR__5020
318d8     01 00 00 FF 
318dc     10 E4 05 F1 | 	add	objptr, ##528
318e0     F2 12 02 FB | 	rdlong	arg01, objptr
318e4     09 27 02 F6 | 	mov	local01, arg01
318e8     24 26 06 F1 | 	add	local01, #36
318ec     13 27 02 FB | 	rdlong	local01, local01
318f0     13 29 02 F6 | 	mov	local02, local01
318f4     13 26 46 F7 | 	zerox	local01, #19
318f8     14 28 46 F0 | 	shr	local02, #20
318fc     02 28 66 F0 | 	shl	local02, #2
31900     ED 28 02 F1 | 	add	local02, __methods__
31904     14 29 02 FB | 	rdlong	local02, local02
31908     01 00 00 FF 
3190c     10 E4 85 F1 | 	sub	objptr, ##528
31910     F2 2A 02 F6 | 	mov	local03, objptr
31914     13 E5 01 F6 | 	mov	objptr, local01
31918     2D 28 62 FD | 	call	local02
3191c     15 E5 01 F6 | 	mov	objptr, local03
31920                 | '     }
31920                 | '     fh->close(fh);
31920                 | '     return RES_OK;
31920     00 FA 05 F6 | 	mov	result1, #0
31924                 | LR__5020
31924     A7 F0 03 F6 | 	mov	ptra, fp
31928     B2 00 A0 FD | 	call	#popregs_
3192c                 | _fatfs_cc_disk_deinitialize_ret
3192c     2D 00 64 FD | 	ret
31930                 | 
31930                 | ' 	
31930                 | ' 	FUNCTION pfunc(c as integer) as integer
31930                 | __system____strs_cl_pfunc_
31930                 | ' 		if (i < 16) then
31930     04 E4 05 F1 | 	add	objptr, #4
31934     F2 FA 01 FB | 	rdlong	result1, objptr
31938     04 E4 85 F1 | 	sub	objptr, #4
3193c     10 FA 55 F2 | 	cmps	result1, #16 wc
31940     2C 00 90 3D |  if_ae	jmp	#LR__5030
31944     F2 FA 01 FB | 	rdlong	result1, objptr
31948     04 E4 05 F1 | 	add	objptr, #4
3194c     F2 00 02 FB | 	rdlong	_var01, objptr
31950     FD 00 02 F1 | 	add	_var01, result1
31954     00 13 42 FC | 	wrbyte	arg01, _var01
31958     F2 FA 01 FB | 	rdlong	result1, objptr
3195c     01 FA 05 F1 | 	add	result1, #1
31960     F2 FA 61 FC | 	wrlong	result1, objptr
31964     04 E4 85 F1 | 	sub	objptr, #4
31968                 | ' 			p(i) = c
31968                 | ' 			i = i+1
31968                 | ' 			return 1
31968     01 FA 05 F6 | 	mov	result1, #1
3196c     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
31970                 | LR__5030
31970                 | ' 			return -1
31970     01 FA 65 F6 | 	neg	result1, #1
31974                 | __system____strs_cl_pfunc__ret
31974     2D 00 64 FD | 	ret
31978                 | 
31978                 | __system___struct__s_vfs_file_t_putchar_
31978     04 4A 05 F6 | 	mov	COUNT_, #4
3197c     A8 00 A0 FD | 	call	#pushregs_
31980     1C E4 05 F1 | 	add	objptr, #28
31984     F2 26 0A FB | 	rdlong	local01, objptr wz
31988     1C E4 85 F1 | 	sub	objptr, #28
3198c     00 FA 05 A6 |  if_e	mov	result1, #0
31990     48 00 90 AD |  if_e	jmp	#LR__5040
31994     1C E4 05 F1 | 	add	objptr, #28
31998     F2 28 02 FB | 	rdlong	local02, objptr
3199c     14 2B 02 F6 | 	mov	local03, local02
319a0     1C E4 85 F1 | 	sub	objptr, #28
319a4     13 2A 46 F7 | 	zerox	local03, #19
319a8     14 28 46 F0 | 	shr	local02, #20
319ac     02 28 66 F0 | 	shl	local02, #2
319b0     ED 28 02 F1 | 	add	local02, __methods__
319b4     14 29 02 FB | 	rdlong	local02, local02
319b8     F2 14 02 F6 | 	mov	arg02, objptr
319bc     F2 2C 02 F6 | 	mov	local04, objptr
319c0     15 E5 01 F6 | 	mov	objptr, local03
319c4     2D 28 62 FD | 	call	local02
319c8     16 E5 01 F6 | 	mov	objptr, local04
319cc                 | '     return (i < 0) ? 0 : 1;
319cc     00 FA 55 F2 | 	cmps	result1, #0 wc
319d0     00 26 06 C6 |  if_b	mov	local01, #0
319d4     01 26 06 36 |  if_ae	mov	local01, #1
319d8     13 FB 01 F6 | 	mov	result1, local01
319dc                 | LR__5040
319dc     A7 F0 03 F6 | 	mov	ptra, fp
319e0     B2 00 A0 FD | 	call	#popregs_
319e4                 | __system___struct__s_vfs_file_t_putchar__ret
319e4     2D 00 64 FD | 	ret
319e8                 | 
319e8                 | __system___struct__s_vfs_file_t_getchar_
319e8     03 4A 05 F6 | 	mov	COUNT_, #3
319ec     A8 00 A0 FD | 	call	#pushregs_
319f0     20 E4 05 F1 | 	add	objptr, #32
319f4     F2 12 0A FB | 	rdlong	arg01, objptr wz
319f8     20 E4 85 F1 | 	sub	objptr, #32
319fc     01 FA 65 A6 |  if_e	neg	result1, #1
31a00     38 00 90 AD |  if_e	jmp	#LR__5050
31a04                 | '     return getcf(__this);
31a04     20 E4 05 F1 | 	add	objptr, #32
31a08     F2 26 02 FB | 	rdlong	local01, objptr
31a0c     13 29 02 F6 | 	mov	local02, local01
31a10     20 E4 85 F1 | 	sub	objptr, #32
31a14     13 28 46 F7 | 	zerox	local02, #19
31a18     14 26 46 F0 | 	shr	local01, #20
31a1c     02 26 66 F0 | 	shl	local01, #2
31a20     ED 26 02 F1 | 	add	local01, __methods__
31a24     13 27 02 FB | 	rdlong	local01, local01
31a28     F2 12 02 F6 | 	mov	arg01, objptr
31a2c     F2 2A 02 F6 | 	mov	local03, objptr
31a30     14 E5 01 F6 | 	mov	objptr, local02
31a34     2D 26 62 FD | 	call	local01
31a38     15 E5 01 F6 | 	mov	objptr, local03
31a3c                 | LR__5050
31a3c     A7 F0 03 F6 | 	mov	ptra, fp
31a40     B2 00 A0 FD | 	call	#popregs_
31a44                 | __system___struct__s_vfs_file_t_getchar__ret
31a44     2D 00 64 FD | 	ret
31a48                 | 
31a48                 | __system___struct___bas_wrap_sender_tx_
31a48     03 4A 05 F6 | 	mov	COUNT_, #3
31a4c     A8 00 A0 FD | 	call	#pushregs_
31a50     F2 26 02 FB | 	rdlong	local01, objptr
31a54     13 29 02 F6 | 	mov	local02, local01
31a58     13 26 46 F7 | 	zerox	local01, #19
31a5c     14 28 46 F0 | 	shr	local02, #20
31a60     02 28 66 F0 | 	shl	local02, #2
31a64     ED 28 02 F1 | 	add	local02, __methods__
31a68     14 29 02 FB | 	rdlong	local02, local02
31a6c     F2 2A 02 F6 | 	mov	local03, objptr
31a70     13 E5 01 F6 | 	mov	objptr, local01
31a74     2D 28 62 FD | 	call	local02
31a78     15 E5 01 F6 | 	mov	objptr, local03
31a7c     01 FA 05 F6 | 	mov	result1, #1
31a80     A7 F0 03 F6 | 	mov	ptra, fp
31a84     B2 00 A0 FD | 	call	#popregs_
31a88                 | __system___struct___bas_wrap_sender_tx__ret
31a88     2D 00 64 FD | 	ret
31a8c                 | 
31a8c                 | __system___struct___bas_wrap_sender_rx_
31a8c     03 4A 05 F6 | 	mov	COUNT_, #3
31a90     A8 00 A0 FD | 	call	#pushregs_
31a94     04 E4 05 F1 | 	add	objptr, #4
31a98     F2 26 02 FB | 	rdlong	local01, objptr
31a9c     13 29 02 F6 | 	mov	local02, local01
31aa0     04 E4 85 F1 | 	sub	objptr, #4
31aa4     13 28 46 F7 | 	zerox	local02, #19
31aa8     14 26 46 F0 | 	shr	local01, #20
31aac     02 26 66 F0 | 	shl	local01, #2
31ab0     ED 26 02 F1 | 	add	local01, __methods__
31ab4     13 27 02 FB | 	rdlong	local01, local01
31ab8     F2 2A 02 F6 | 	mov	local03, objptr
31abc     14 E5 01 F6 | 	mov	objptr, local02
31ac0     2D 26 62 FD | 	call	local01
31ac4     15 E5 01 F6 | 	mov	objptr, local03
31ac8     A7 F0 03 F6 | 	mov	ptra, fp
31acc     B2 00 A0 FD | 	call	#popregs_
31ad0                 | __system___struct___bas_wrap_sender_rx__ret
31ad0     2D 00 64 FD | 	ret
31ad4                 | 
31ad4                 | __system___struct___bas_wrap_sender_close_
31ad4     03 4A 05 F6 | 	mov	COUNT_, #3
31ad8     A8 00 A0 FD | 	call	#pushregs_
31adc     08 E4 05 F1 | 	add	objptr, #8
31ae0     F2 26 02 FB | 	rdlong	local01, objptr
31ae4     13 29 02 F6 | 	mov	local02, local01
31ae8     08 E4 85 F1 | 	sub	objptr, #8
31aec     13 28 46 F7 | 	zerox	local02, #19
31af0     14 26 46 F0 | 	shr	local01, #20
31af4     02 26 66 F0 | 	shl	local01, #2
31af8     ED 26 02 F1 | 	add	local01, __methods__
31afc     13 27 02 FB | 	rdlong	local01, local01
31b00     F2 2A 02 F6 | 	mov	local03, objptr
31b04     14 E5 01 F6 | 	mov	objptr, local02
31b08     2D 26 62 FD | 	call	local01
31b0c     15 E5 01 F6 | 	mov	objptr, local03
31b10     A7 F0 03 F6 | 	mov	ptra, fp
31b14     B2 00 A0 FD | 	call	#popregs_
31b18                 | __system___struct___bas_wrap_sender_close__ret
31b18     2D 00 64 FD | 	ret
31b1c                 | 
31b1c                 | LR__5060
31b1c     2F          | 	byte	"/"
31b1d     00          | 	byte	0
31b1e                 | LR__5061
31b1e     69 6E 66    | 	byte	"inf"
31b21     00          | 	byte	0
31b22                 | LR__5062
31b22     6E 61 6E    | 	byte	"nan"
31b25     00          | 	byte	0
31b26                 | LR__5063
31b26                 | 	byte	
31b26     00          | 	byte	0
31b27                 | LR__5064
31b27                 | 	byte	
31b27     00          | 	byte	0
31b28                 | LR__5065
31b28                 | 	byte	
31b28     00          | 	byte	0
31b29                 | LR__5066
31b29                 | 	byte	
31b29     00          | 	byte	0
31b2a                 | LR__5067
31b2a                 | 	byte	
31b2a     00          | 	byte	0
31b2b                 | LR__5068
31b2b                 | 	byte	
31b2b     00          | 	byte	0
31b2c                 | LR__5069
31b2c                 | 	byte	
31b2c     00          | 	byte	0
31b2d                 | LR__5070
31b2d                 | 	byte	
31b2d     00          | 	byte	0
31b2e                 | LR__5071
31b2e     00          | 	byte	0
31b2f     00          | 	byte	0
31b30                 | LR__5072
31b30     00          | 	byte	0
31b31     00          | 	byte	0
31b32                 | LR__5073
31b32     00          | 	byte	0
31b33     00          | 	byte	0
31b34                 | LR__5074
31b34     20 21 21 21 
31b38     20 63 6F 72 
31b3c     72 75 70 74 
31b40     65 64 20 68 
31b44     65 61 70 3F 
31b48     3F 3F 20 21 
31b4c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
31b4f     00          | 	byte	0
31b50                 | LR__5075
31b50     20 21 21 21 
31b54     20 6F 75 74 
31b58     20 6F 66 20 
31b5c     68 65 61 70 
31b60     20 6D 65 6D 
31b64     6F 72 79 20 
31b68     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
31b6c     00          | 	byte	0
31b6d                 | LR__5076
31b6d     20 21 21 21 
31b71     20 63 6F 72 
31b75     72 75 70 74 
31b79     65 64 20 68 
31b7d     65 61 70 20 
31b81     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
31b85     00          | 	byte	0
31b86                 | LR__5077
31b86     00          | 	byte	0
31b87     00          | 	byte	0
31b88                 | LR__5078
31b88     2E          | 	byte	"."
31b89     00          | 	byte	0
31b8a                 | LR__5079
31b8a     00          | 	byte	0
31b8b     00          | 	byte	0
31b8c                 | LR__5080
31b8c     00          | 	byte	0
31b8d     00          | 	byte	0
31b8e                 | LR__5081
31b8e     00          | 	byte	0
31b8f     00          | 	byte	0
31b90                 | LR__5082
31b90     54 5A       | 	byte	"TZ"
31b92     00          | 	byte	0
31b93                 | LR__5083
31b93     2A 3A 3C 3E 
31b97     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
31b9b     00          | 	byte	0
31b9c                 | LR__5084
31b9c     2B 2C 3B 3D 
31ba0     5B 5D       | 	byte	"+,;=[]"
31ba2     00          | 	byte	0
31ba3                 | LR__5085
31ba3     46 41 54 33 
31ba7     32 20 20 20 | 	byte	"FAT32   "
31bab     00          | 	byte	0
31bac                 | LR__5086
31bac     00          | 	byte	0
31bad     00          | 	byte	0
31bae                 | LR__5087
31bae                 | 	byte	
31bae     00          | 	byte	0
31baf                 | LR__5088
31baf                 | 	byte	
31baf     00          | 	byte	0
31bb0                 | LR__5089
31bb0                 | 	byte	
31bb0     00          | 	byte	0
31bb1                 | LR__5090
31bb1                 | 	byte	
31bb1     00          | 	byte	0
31bb2                 | LR__5091
31bb2     22          | 	byte	34
31bb3     00          | 	byte	0
31bb4                 | LR__5092
31bb4     22          | 	byte	34
31bb5     00          | 	byte	0
31bb6                 | LR__5093
31bb6     3A          | 	byte	":"
31bb7     00          | 	byte	0
31bb8                 | LR__5094
31bb8                 | 	byte	
31bb8     00          | 	byte	0
31bb9                 | LR__5095
31bb9                 | 	byte	
31bb9     00          | 	byte	0
31bba                 | LR__5096
31bba                 | 	byte	
31bba     00          | 	byte	0
31bbb                 | LR__5097
31bbb                 | 	byte	
31bbb     00          | 	byte	0
31bbc                 | LR__5098
31bbc                 | 	byte	
31bbc     00          | 	byte	0
31bbd                 | LR__5099
31bbd                 | 	byte	
31bbd     00          | 	byte	0
31bbe                 | LR__5100
31bbe                 | 	byte	
31bbe     00          | 	byte	0
31bbf                 | LR__5101
31bbf     30          | 	byte	"0"
31bc0     00          | 	byte	0
31bc1                 | LR__5102
31bc1     22          | 	byte	34
31bc2     00          | 	byte	0
31bc3                 | LR__5103
31bc3     22          | 	byte	34
31bc4     00          | 	byte	0
31bc5                 | LR__5104
31bc5     22          | 	byte	34
31bc6     00          | 	byte	0
31bc7                 | LR__5105
31bc7     22          | 	byte	34
31bc8     00          | 	byte	0
31bc9                 | LR__5106
31bc9     22          | 	byte	34
31bca     00          | 	byte	0
31bcb                 | LR__5107
31bcb     3E          | 	byte	">"
31bcc     00          | 	byte	0
31bcd                 | LR__5108
31bcd     3C          | 	byte	"<"
31bce     00          | 	byte	0
31bcf                 | LR__5109
31bcf     2B          | 	byte	"+"
31bd0     00          | 	byte	0
31bd1                 | LR__5110
31bd1     2D          | 	byte	"-"
31bd2     00          | 	byte	0
31bd3                 | LR__5111
31bd3     2A          | 	byte	"*"
31bd4     00          | 	byte	0
31bd5                 | LR__5112
31bd5     2F          | 	byte	"/"
31bd6     00          | 	byte	0
31bd7                 | LR__5113
31bd7     5E          | 	byte	"^"
31bd8     00          | 	byte	0
31bd9                 | LR__5114
31bd9     3D          | 	byte	"="
31bda     00          | 	byte	0
31bdb                 | LR__5115
31bdb     2B          | 	byte	"+"
31bdc     00          | 	byte	0
31bdd                 | LR__5116
31bdd     2B          | 	byte	"+"
31bde     00          | 	byte	0
31bdf                 | LR__5117
31bdf     2D          | 	byte	"-"
31be0     00          | 	byte	0
31be1                 | LR__5118
31be1     2D          | 	byte	"-"
31be2     00          | 	byte	0
31be3                 | LR__5119
31be3     3C          | 	byte	"<"
31be4     00          | 	byte	0
31be5                 | LR__5120
31be5     3E          | 	byte	">"
31be6     00          | 	byte	0
31be7                 | LR__5121
31be7     22          | 	byte	34
31be8     00          | 	byte	0
31be9                 | LR__5122
31be9     22          | 	byte	34
31bea     00          | 	byte	0
31beb                 | LR__5123
31beb     65 6C 73 65 | 	byte	"else"
31bef     00          | 	byte	0
31bf0                 | LR__5124
31bf0     74 68 65 6E | 	byte	"then"
31bf4     00          | 	byte	0
31bf5                 | LR__5125
31bf5     3F          | 	byte	"?"
31bf6     00          | 	byte	0
31bf7                 | LR__5126
31bf7     3F          | 	byte	"?"
31bf8     00          | 	byte	0
31bf9                 | LR__5127
31bf9     2E          | 	byte	"."
31bfa     00          | 	byte	0
31bfb                 | LR__5128
31bfb     6D 6F 75 73 
31bff     65          | 	byte	"mouse"
31c00     00          | 	byte	0
31c01                 | LR__5129
31c01     63 75 72 73 
31c05     6F 72       | 	byte	"cursor"
31c07     00          | 	byte	0
31c08                 | LR__5130
31c08     63 6C 69 63 
31c0c     6B          | 	byte	"click"
31c0d     00          | 	byte	0
31c0e                 | LR__5131
31c0e     6F 6E       | 	byte	"on"
31c10     00          | 	byte	0
31c11                 | LR__5132
31c11     31          | 	byte	"1"
31c12     00          | 	byte	0
31c13                 | LR__5133
31c13     6F 66 66    | 	byte	"off"
31c16     00          | 	byte	0
31c17                 | LR__5134
31c17     30          | 	byte	"0"
31c18     00          | 	byte	0
31c19                 | LR__5135
31c19     6D 6F 64 65 | 	byte	"mode"
31c1d     00          | 	byte	0
31c1e                 | LR__5136
31c1e     6D 2E       | 	byte	"m."
31c20     00          | 	byte	0
31c21                 | LR__5137
31c21     61 74 61 72 
31c25     69          | 	byte	"atari"
31c26     00          | 	byte	0
31c27                 | LR__5138
31c27     30          | 	byte	"0"
31c28     00          | 	byte	0
31c29                 | LR__5139
31c29     70 63 5F 61 
31c2d     6D 62 65 72 | 	byte	"pc_amber"
31c31     00          | 	byte	0
31c32                 | LR__5140
31c32     31          | 	byte	"1"
31c33     00          | 	byte	0
31c34                 | LR__5141
31c34     70 63 5F 67 
31c38     72 65 65 6E | 	byte	"pc_green"
31c3c     00          | 	byte	0
31c3d                 | LR__5142
31c3d     32          | 	byte	"2"
31c3e     00          | 	byte	0
31c3f                 | LR__5143
31c3f     70 63 5F 77 
31c43     68 69 74 65 | 	byte	"pc_white"
31c47     00          | 	byte	0
31c48                 | LR__5144
31c48     33          | 	byte	"3"
31c49     00          | 	byte	0
31c4a                 | LR__5145
31c4a     73 74       | 	byte	"st"
31c4c     00          | 	byte	0
31c4d                 | LR__5146
31c4d     34          | 	byte	"4"
31c4e     00          | 	byte	0
31c4f                 | LR__5147
31c4f     61 6D 69 67 
31c53     61          | 	byte	"amiga"
31c54     00          | 	byte	0
31c55                 | LR__5148
31c55     35          | 	byte	"5"
31c56     00          | 	byte	0
31c57                 | LR__5149
31c57                 | 	byte	
31c57     00          | 	byte	0
31c58                 | LR__5150
31c58     6C 6F 61 64 | 	byte	"load"
31c5c     00          | 	byte	0
31c5d                 | LR__5151
31c5d     73 61 76 65 | 	byte	"save"
31c61     00          | 	byte	0
31c62                 | LR__5152
31c62     62 72 75 6E | 	byte	"brun"
31c66     00          | 	byte	0
31c67                 | LR__5153
31c67     72 75 6E    | 	byte	"run"
31c6a     00          | 	byte	0
31c6b                 | LR__5154
31c6b     6C 6F 2E    | 	byte	"lo."
31c6e     00          | 	byte	0
31c6f                 | LR__5155
31c6f     73 2E       | 	byte	"s."
31c71     00          | 	byte	0
31c72                 | LR__5156
31c72     62 72 2E    | 	byte	"br."
31c75     00          | 	byte	0
31c76                 | LR__5157
31c76     65 6E 74 65 
31c7a     72          | 	byte	"enter"
31c7b     00          | 	byte	0
31c7c                 | LR__5158
31c7c     65 2E       | 	byte	"e."
31c7e     00          | 	byte	0
31c7f                 | LR__5159
31c7f     24          | 	byte	"$"
31c80     00          | 	byte	0
31c81                 | LR__5160
31c81     64 65 6C 65 
31c85     74 65       | 	byte	"delete"
31c87     00          | 	byte	0
31c88                 | LR__5161
31c88     6D 6B 64 69 
31c8c     72          | 	byte	"mkdir"
31c8d     00          | 	byte	0
31c8e                 | LR__5162
31c8e     24          | 	byte	"$"
31c8f     00          | 	byte	0
31c90                 | LR__5163
31c90     63 6F 70 79 | 	byte	"copy"
31c94     00          | 	byte	0
31c95                 | LR__5164
31c95     24          | 	byte	"$"
31c96     00          | 	byte	0
31c97                 | LR__5165
31c97     63 6F 70 79 | 	byte	"copy"
31c9b     00          | 	byte	0
31c9c                 | LR__5166
31c9c     24          | 	byte	"$"
31c9d     00          | 	byte	0
31c9e                 | LR__5167
31c9e     63 64       | 	byte	"cd"
31ca0     00          | 	byte	0
31ca1                 | LR__5168
31ca1     63 64 2E    | 	byte	"cd."
31ca4     00          | 	byte	0
31ca5                 | LR__5169
31ca5     2E          | 	byte	"."
31ca6     00          | 	byte	0
31ca7                 | LR__5170
31ca7     2E 2E       | 	byte	".."
31ca9     00          | 	byte	0
31caa                 | LR__5171
31caa     63 64       | 	byte	"cd"
31cac     00          | 	byte	0
31cad                 | LR__5172
31cad     2F          | 	byte	"/"
31cae     00          | 	byte	0
31caf                 | LR__5173
31caf                 | 	byte	
31caf     00          | 	byte	0
31cb0                 | LR__5174
31cb0                 | 	byte	
31cb0     00          | 	byte	0
31cb1                 | LR__5175
31cb1                 | 	byte	
31cb1     00          | 	byte	0
31cb2                 | LR__5176
31cb2                 | 	byte	
31cb2     00          | 	byte	0
31cb3                 | LR__5177
31cb3                 | 	byte	
31cb3     00          | 	byte	0
31cb4                 | LR__5178
31cb4     52 65 61 64 
31cb8     79          | 	byte	"Ready"
31cb9     00          | 	byte	0
31cba                 | LR__5179
31cba     2B          | 	byte	"+"
31cbb     00          | 	byte	0
31cbc                 | LR__5180
31cbc     2D          | 	byte	"-"
31cbd     00          | 	byte	0
31cbe                 | LR__5181
31cbe     6F 72       | 	byte	"or"
31cc0     00          | 	byte	0
31cc1                 | LR__5182
31cc1     78 6F 72    | 	byte	"xor"
31cc4     00          | 	byte	0
31cc5                 | LR__5183
31cc5     2A          | 	byte	"*"
31cc6     00          | 	byte	0
31cc7                 | LR__5184
31cc7     2F          | 	byte	"/"
31cc8     00          | 	byte	0
31cc9                 | LR__5185
31cc9     61 6E 64    | 	byte	"and"
31ccc     00          | 	byte	0
31ccd                 | LR__5186
31ccd     64 69 76    | 	byte	"div"
31cd0     00          | 	byte	0
31cd1                 | LR__5187
31cd1     6D 6F 64    | 	byte	"mod"
31cd4     00          | 	byte	0
31cd5                 | LR__5188
31cd5     73 68 6C    | 	byte	"shl"
31cd8     00          | 	byte	0
31cd9                 | LR__5189
31cd9     73 68 72    | 	byte	"shr"
31cdc     00          | 	byte	0
31cdd                 | LR__5190
31cdd     5E          | 	byte	"^"
31cde     00          | 	byte	0
31cdf                 | LR__5191
31cdf     6E 6F 74    | 	byte	"not"
31ce2     00          | 	byte	0
31ce3                 | LR__5192
31ce3     40          | 	byte	"@"
31ce4     00          | 	byte	0
31ce5                 | LR__5193
31ce5     3D          | 	byte	"="
31ce6     00          | 	byte	0
31ce7                 | LR__5194
31ce7     3E 3D       | 	byte	">="
31ce9     00          | 	byte	0
31cea                 | LR__5195
31cea     3C 3D       | 	byte	"<="
31cec     00          | 	byte	0
31ced                 | LR__5196
31ced     3C          | 	byte	"<"
31cee     00          | 	byte	0
31cef                 | LR__5197
31cef     3E          | 	byte	">"
31cf0     00          | 	byte	0
31cf1                 | LR__5198
31cf1     3C 3E       | 	byte	"<>"
31cf3     00          | 	byte	0
31cf4                 | LR__5199
31cf4     2B 2B       | 	byte	"++"
31cf6     00          | 	byte	0
31cf7                 | LR__5200
31cf7     2D 2D       | 	byte	"--"
31cf9     00          | 	byte	0
31cfa                 | LR__5201
31cfa     23          | 	byte	"#"
31cfb     00          | 	byte	0
31cfc                 | LR__5202
31cfc     30          | 	byte	"0"
31cfd     00          | 	byte	0
31cfe                 | LR__5203
31cfe     39          | 	byte	"9"
31cff     00          | 	byte	0
31d00                 | LR__5204
31d00     23 72 65 61 
31d04     64          | 	byte	"#read"
31d05     00          | 	byte	0
31d06                 | LR__5205
31d06     23 77 72 69 
31d0a     74 65       | 	byte	"#write"
31d0c     00          | 	byte	0
31d0d                 | LR__5206
31d0d     23 61 70 70 
31d11     65 6E 64    | 	byte	"#append"
31d14     00          | 	byte	0
31d15                 | LR__5207
31d15     23          | 	byte	"#"
31d16     00          | 	byte	0
31d17                 | LR__5208
31d17     23          | 	byte	"#"
31d18     00          | 	byte	0
31d19                 | LR__5209
31d19     2D          | 	byte	"-"
31d1a     00          | 	byte	0
31d1b                 | LR__5210
31d1b     30          | 	byte	"0"
31d1c     00          | 	byte	0
31d1d                 | LR__5211
31d1d     63          | 	byte	"c"
31d1e     00          | 	byte	0
31d1f                 | LR__5212
31d1f     63 23       | 	byte	"c#"
31d21     00          | 	byte	0
31d22                 | LR__5213
31d22     64          | 	byte	"d"
31d23     00          | 	byte	0
31d24                 | LR__5214
31d24     64 23       | 	byte	"d#"
31d26     00          | 	byte	0
31d27                 | LR__5215
31d27     65          | 	byte	"e"
31d28     00          | 	byte	0
31d29                 | LR__5216
31d29     66          | 	byte	"f"
31d2a     00          | 	byte	0
31d2b                 | LR__5217
31d2b     66 23       | 	byte	"f#"
31d2d     00          | 	byte	0
31d2e                 | LR__5218
31d2e     67          | 	byte	"g"
31d2f     00          | 	byte	0
31d30                 | LR__5219
31d30     67 23       | 	byte	"g#"
31d32     00          | 	byte	0
31d33                 | LR__5220
31d33     61          | 	byte	"a"
31d34     00          | 	byte	0
31d35                 | LR__5221
31d35     61 23       | 	byte	"a#"
31d37     00          | 	byte	0
31d38                 | LR__5222
31d38     68          | 	byte	"h"
31d39     00          | 	byte	0
31d3a                 | LR__5223
31d3a     62          | 	byte	"b"
31d3b     00          | 	byte	0
31d3c                 | LR__5224
31d3c     2B          | 	byte	"+"
31d3d     00          | 	byte	0
31d3e                 | LR__5225
31d3e     2D          | 	byte	"-"
31d3f     00          | 	byte	0
31d40                 | LR__5226
31d40     3D          | 	byte	"="
31d41     00          | 	byte	0
31d42                 | LR__5227
31d42     2C          | 	byte	","
31d43     00          | 	byte	0
31d44                 | LR__5228
31d44     2A          | 	byte	"*"
31d45     00          | 	byte	0
31d46                 | LR__5229
31d46     2F          | 	byte	"/"
31d47     00          | 	byte	0
31d48                 | LR__5230
31d48     3B          | 	byte	";"
31d49     00          | 	byte	0
31d4a                 | LR__5231
31d4a     22          | 	byte	34
31d4b     00          | 	byte	0
31d4c                 | LR__5232
31d4c     5E          | 	byte	"^"
31d4d     00          | 	byte	0
31d4e                 | LR__5233
31d4e     29          | 	byte	")"
31d4f     00          | 	byte	0
31d50                 | LR__5234
31d50     28          | 	byte	"("
31d51     00          | 	byte	0
31d52                 | LR__5235
31d52     3A          | 	byte	":"
31d53     00          | 	byte	0
31d54                 | LR__5236
31d54     20          | 	byte	" "
31d55     00          | 	byte	0
31d56                 | LR__5237
31d56     3E          | 	byte	">"
31d57     00          | 	byte	0
31d58                 | LR__5238
31d58     3C          | 	byte	"<"
31d59     00          | 	byte	0
31d5a                 | LR__5239
31d5a     3D          | 	byte	"="
31d5b     00          | 	byte	0
31d5c                 | LR__5240
31d5c     62 65 65 70 | 	byte	"beep"
31d60     00          | 	byte	0
31d61                 | LR__5241
31d61     62 2E       | 	byte	"b."
31d63     00          | 	byte	0
31d64                 | LR__5242
31d64     62 6C 69 74 | 	byte	"blit"
31d68     00          | 	byte	0
31d69                 | LR__5243
31d69     62 6F 78    | 	byte	"box"
31d6c     00          | 	byte	0
31d6d                 | LR__5244
31d6d     62 72 75 6E | 	byte	"brun"
31d71     00          | 	byte	0
31d72                 | LR__5245
31d72     62 72 2E    | 	byte	"br."
31d75     00          | 	byte	0
31d76                 | LR__5246
31d76     63 64       | 	byte	"cd"
31d78     00          | 	byte	0
31d79                 | LR__5247
31d79     63 68 61 6E 
31d7d     67 65 66 72 
31d81     65 71       | 	byte	"changefreq"
31d83     00          | 	byte	0
31d84                 | LR__5248
31d84     63 66 2E    | 	byte	"cf."
31d87     00          | 	byte	0
31d88                 | LR__5249
31d88     63 68 61 6E 
31d8c     67 65 70 61 
31d90     6E          | 	byte	"changepan"
31d91     00          | 	byte	0
31d92                 | LR__5250
31d92     63 70 2E    | 	byte	"cp."
31d95     00          | 	byte	0
31d96                 | LR__5251
31d96     63 68 61 6E 
31d9a     67 65 76 6F 
31d9e     6C          | 	byte	"changevol"
31d9f     00          | 	byte	0
31da0                 | LR__5252
31da0     63 76 2E    | 	byte	"cv."
31da3     00          | 	byte	0
31da4                 | LR__5253
31da4     63 68 61 6E 
31da8     67 65 77 61 
31dac     76 65       | 	byte	"changewave"
31dae     00          | 	byte	0
31daf                 | LR__5254
31daf     63 77 2E    | 	byte	"cw."
31db2     00          | 	byte	0
31db3                 | LR__5255
31db3     63 69 72 63 
31db7     6C 65       | 	byte	"circle"
31db9     00          | 	byte	0
31dba                 | LR__5256
31dba     63 69 2E    | 	byte	"ci."
31dbd     00          | 	byte	0
31dbe                 | LR__5257
31dbe     63 6C 69 63 
31dc2     6B          | 	byte	"click"
31dc3     00          | 	byte	0
31dc4                 | LR__5258
31dc4     63 6C 6F 73 
31dc8     65          | 	byte	"close"
31dc9     00          | 	byte	0
31dca                 | LR__5259
31dca     63 6C 73    | 	byte	"cls"
31dcd     00          | 	byte	0
31dce                 | LR__5260
31dce     63 6F 67 73 
31dd2     74 6F 70    | 	byte	"cogstop"
31dd5     00          | 	byte	0
31dd6                 | LR__5261
31dd6     63 6F 6C 6F 
31dda     72          | 	byte	"color"
31ddb     00          | 	byte	0
31ddc                 | LR__5262
31ddc     63 2E       | 	byte	"c."
31dde     00          | 	byte	0
31ddf                 | LR__5263
31ddf     63 6F 70 79 | 	byte	"copy"
31de3     00          | 	byte	0
31de4                 | LR__5264
31de4     63 75 72 73 
31de8     6F 72       | 	byte	"cursor"
31dea     00          | 	byte	0
31deb                 | LR__5265
31deb     64 61 74 61 | 	byte	"data"
31def     00          | 	byte	0
31df0                 | LR__5266
31df0     64 65 66 63 
31df4     68 61 72    | 	byte	"defchar"
31df7     00          | 	byte	0
31df8                 | LR__5267
31df8     64 65 66 73 
31dfc     6E 64       | 	byte	"defsnd"
31dfe     00          | 	byte	0
31dff                 | LR__5268
31dff     64 65 66 65 
31e03     6E 76       | 	byte	"defenv"
31e05     00          | 	byte	0
31e06                 | LR__5269
31e06     64 65 66 73 
31e0a     70 72 69 74 
31e0e     65          | 	byte	"defsprite"
31e0f     00          | 	byte	0
31e10                 | LR__5270
31e10     64 73 2E    | 	byte	"ds."
31e13     00          | 	byte	0
31e14                 | LR__5271
31e14     64 65 67    | 	byte	"deg"
31e17     00          | 	byte	0
31e18                 | LR__5272
31e18     64 65 6C 65 
31e1c     74 65       | 	byte	"delete"
31e1e     00          | 	byte	0
31e1f                 | LR__5273
31e1f     64 69 6D    | 	byte	"dim"
31e22     00          | 	byte	0
31e23                 | LR__5274
31e23     64 69 72    | 	byte	"dir"
31e26     00          | 	byte	0
31e27                 | LR__5275
31e27     64 70 6F 6B 
31e2b     65          | 	byte	"dpoke"
31e2c     00          | 	byte	0
31e2d                 | LR__5276
31e2d     64 72 61 77 | 	byte	"draw"
31e31     00          | 	byte	0
31e32                 | LR__5277
31e32     64 72 61 77 
31e36     74 6F       | 	byte	"drawto"
31e38     00          | 	byte	0
31e39                 | LR__5278
31e39     64 72 2E    | 	byte	"dr."
31e3c     00          | 	byte	0
31e3d                 | LR__5279
31e3d     65 6C 73 65 | 	byte	"else"
31e41     00          | 	byte	0
31e42                 | LR__5280
31e42     65 6E 64    | 	byte	"end"
31e45     00          | 	byte	0
31e46                 | LR__5281
31e46     65 6E 74 65 
31e4a     72          | 	byte	"enter"
31e4b     00          | 	byte	0
31e4c                 | LR__5282
31e4c     65 2E       | 	byte	"e."
31e4e     00          | 	byte	0
31e4f                 | LR__5283
31e4f     66 63 69 72 
31e53     63 6C 65    | 	byte	"fcircle"
31e56     00          | 	byte	0
31e57                 | LR__5284
31e57     66 63 2E    | 	byte	"fc."
31e5a     00          | 	byte	0
31e5b                 | LR__5285
31e5b     66 69 6C 6C | 	byte	"fill"
31e5f     00          | 	byte	0
31e60                 | LR__5286
31e60     66 69 2E    | 	byte	"fi."
31e63     00          | 	byte	0
31e64                 | LR__5287
31e64     66 6F 6E 74 | 	byte	"font"
31e68     00          | 	byte	0
31e69                 | LR__5288
31e69     66 6F 72    | 	byte	"for"
31e6c     00          | 	byte	0
31e6d                 | LR__5289
31e6d     66 2E       | 	byte	"f."
31e6f     00          | 	byte	0
31e70                 | LR__5290
31e70     66 72 61 6D 
31e74     65          | 	byte	"frame"
31e75     00          | 	byte	0
31e76                 | LR__5291
31e76     66 72 2E    | 	byte	"fr."
31e79     00          | 	byte	0
31e7a                 | LR__5292
31e7a     67 65 74    | 	byte	"get"
31e7d     00          | 	byte	0
31e7e                 | LR__5293
31e7e     67 6F 73 75 
31e82     62          | 	byte	"gosub"
31e83     00          | 	byte	0
31e84                 | LR__5294
31e84     67 6F 74 6F | 	byte	"goto"
31e88     00          | 	byte	0
31e89                 | LR__5295
31e89     67 2E       | 	byte	"g."
31e8b     00          | 	byte	0
31e8c                 | LR__5296
31e8c     69 66       | 	byte	"if"
31e8e     00          | 	byte	0
31e8f                 | LR__5297
31e8f     69 6E 6B    | 	byte	"ink"
31e92     00          | 	byte	0
31e93                 | LR__5298
31e93     69 2E       | 	byte	"i."
31e95     00          | 	byte	0
31e96                 | LR__5299
31e96     69 6E 70 75 
31e9a     74          | 	byte	"input"
31e9b     00          | 	byte	0
31e9c                 | LR__5300
31e9c     6C 69 73 74 | 	byte	"list"
31ea0     00          | 	byte	0
31ea1                 | LR__5301
31ea1     6C 2E       | 	byte	"l."
31ea3     00          | 	byte	0
31ea4                 | LR__5302
31ea4     6C 6F 61 64 | 	byte	"load"
31ea8     00          | 	byte	0
31ea9                 | LR__5303
31ea9     6C 6F 2E    | 	byte	"lo."
31eac     00          | 	byte	0
31ead                 | LR__5304
31ead     6C 70 6F 6B 
31eb1     65          | 	byte	"lpoke"
31eb2     00          | 	byte	0
31eb3                 | LR__5305
31eb3     6D 6B 64 69 
31eb7     72          | 	byte	"mkdir"
31eb8     00          | 	byte	0
31eb9                 | LR__5306
31eb9     6D 6F 64 65 | 	byte	"mode"
31ebd     00          | 	byte	0
31ebe                 | LR__5307
31ebe     6D 2E       | 	byte	"m."
31ec0     00          | 	byte	0
31ec1                 | LR__5308
31ec1     6D 6F 75 73 
31ec5     65          | 	byte	"mouse"
31ec6     00          | 	byte	0
31ec7                 | LR__5309
31ec7     6E 65 77    | 	byte	"new"
31eca     00          | 	byte	0
31ecb                 | LR__5310
31ecb     6E 65 78 74 | 	byte	"next"
31ecf     00          | 	byte	0
31ed0                 | LR__5311
31ed0     6E 2E       | 	byte	"n."
31ed2     00          | 	byte	0
31ed3                 | LR__5312
31ed3     6F 6E       | 	byte	"on"
31ed5     00          | 	byte	0
31ed6                 | LR__5313
31ed6     6F 70 65 6E | 	byte	"open"
31eda     00          | 	byte	0
31edb                 | LR__5314
31edb     70 61 70 65 
31edf     72          | 	byte	"paper"
31ee0     00          | 	byte	0
31ee1                 | LR__5315
31ee1     70 61 2E    | 	byte	"pa."
31ee4     00          | 	byte	0
31ee5                 | LR__5316
31ee5     70 69 6E 66 
31ee9     6C 6F 61 74 | 	byte	"pinfloat"
31eed     00          | 	byte	0
31eee                 | LR__5317
31eee     70 69 6E 68 
31ef2     69          | 	byte	"pinhi"
31ef3     00          | 	byte	0
31ef4                 | LR__5318
31ef4     70 69 6E 6C 
31ef8     6F          | 	byte	"pinlo"
31ef9     00          | 	byte	0
31efa                 | LR__5319
31efa     70 69 6E 73 
31efe     74 61 72 74 | 	byte	"pinstart"
31f02     00          | 	byte	0
31f03                 | LR__5320
31f03     70 69 6E 74 
31f07     6F 67 67 6C 
31f0b     65          | 	byte	"pintoggle"
31f0c     00          | 	byte	0
31f0d                 | LR__5321
31f0d     70 69 6E 77 
31f11     72 69 74 65 | 	byte	"pinwrite"
31f15     00          | 	byte	0
31f16                 | LR__5322
31f16     70 6C 61 79 | 	byte	"play"
31f1a     00          | 	byte	0
31f1b                 | LR__5323
31f1b     70 2E       | 	byte	"p."
31f1d     00          | 	byte	0
31f1e                 | LR__5324
31f1e     70 6C 6F 74 | 	byte	"plot"
31f22     00          | 	byte	0
31f23                 | LR__5325
31f23     70 6C 2E    | 	byte	"pl."
31f26     00          | 	byte	0
31f27                 | LR__5326
31f27     70 6F 6B 65 | 	byte	"poke"
31f2b     00          | 	byte	0
31f2c                 | LR__5327
31f2c     70 6F 70    | 	byte	"pop"
31f2f     00          | 	byte	0
31f30                 | LR__5328
31f30     70 6F 73 69 
31f34     74 69 6F 6E | 	byte	"position"
31f38     00          | 	byte	0
31f39                 | LR__5329
31f39     70 6F 73 2E | 	byte	"pos."
31f3d     00          | 	byte	0
31f3e                 | LR__5330
31f3e     70 72 69 6E 
31f42     74          | 	byte	"print"
31f43     00          | 	byte	0
31f44                 | LR__5331
31f44     3F          | 	byte	"?"
31f45     00          | 	byte	0
31f46                 | LR__5332
31f46     70 75 74    | 	byte	"put"
31f49     00          | 	byte	0
31f4a                 | LR__5333
31f4a     72 61 64    | 	byte	"rad"
31f4d     00          | 	byte	0
31f4e                 | LR__5334
31f4e     72 65 61 64 | 	byte	"read"
31f52     00          | 	byte	0
31f53                 | LR__5335
31f53     72 65 6C 65 
31f57     61 73 65    | 	byte	"release"
31f5a     00          | 	byte	0
31f5b                 | LR__5336
31f5b     72 65 6D    | 	byte	"rem"
31f5e     00          | 	byte	0
31f5f                 | LR__5337
31f5f     27          | 	byte	"'"
31f60     00          | 	byte	0
31f61                 | LR__5338
31f61     72 65 73 74 
31f65     6F 72 65    | 	byte	"restore"
31f68     00          | 	byte	0
31f69                 | LR__5339
31f69     72 65 73 74 
31f6d     6F 72 65 70 
31f71     61 6C 65 74 
31f75     74 65       | 	byte	"restorepalette"
31f77     00          | 	byte	0
31f78                 | LR__5340
31f78     72 70 2E    | 	byte	"rp."
31f7b     00          | 	byte	0
31f7c                 | LR__5341
31f7c     72 65 74 75 
31f80     72 6E       | 	byte	"return"
31f82     00          | 	byte	0
31f83                 | LR__5342
31f83     72 75 6E    | 	byte	"run"
31f86     00          | 	byte	0
31f87                 | LR__5343
31f87     72 2E       | 	byte	"r."
31f89     00          | 	byte	0
31f8a                 | LR__5344
31f8a     73 61 76 65 | 	byte	"save"
31f8e     00          | 	byte	0
31f8f                 | LR__5345
31f8f     73 2E       | 	byte	"s."
31f91     00          | 	byte	0
31f92                 | LR__5346
31f92     73 65 74 63 
31f96     6F 6C 6F 72 | 	byte	"setcolor"
31f9a     00          | 	byte	0
31f9b                 | LR__5347
31f9b     73 63 2E    | 	byte	"sc."
31f9e     00          | 	byte	0
31f9f                 | LR__5348
31f9f     73 65 74 61 
31fa3     6D 6F 64 65 | 	byte	"setamode"
31fa7     00          | 	byte	0
31fa8                 | LR__5349
31fa8     73 61 2E    | 	byte	"sa."
31fab     00          | 	byte	0
31fac                 | LR__5350
31fac     73 65 74 64 
31fb0     65 6C 61 79 | 	byte	"setdelay"
31fb4     00          | 	byte	0
31fb5                 | LR__5351
31fb5     73 64 2E    | 	byte	"sd."
31fb8     00          | 	byte	0
31fb9                 | LR__5352
31fb9     73 65 74 65 
31fbd     6E 76       | 	byte	"setenv"
31fbf     00          | 	byte	0
31fc0                 | LR__5353
31fc0     73 65 2E    | 	byte	"se."
31fc3     00          | 	byte	0
31fc4                 | LR__5354
31fc4     73 65 74 6C 
31fc8     65 6E       | 	byte	"setlen"
31fca     00          | 	byte	0
31fcb                 | LR__5355
31fcb     73 6C 2E    | 	byte	"sl."
31fce     00          | 	byte	0
31fcf                 | LR__5356
31fcf     73 65 74 70 
31fd3     61 6E       | 	byte	"setpan"
31fd5     00          | 	byte	0
31fd6                 | LR__5357
31fd6     73 70 2E    | 	byte	"sp."
31fd9     00          | 	byte	0
31fda                 | LR__5358
31fda     73 65 74 73 
31fde     75 73 74 61 
31fe2     69 6E       | 	byte	"setsustain"
31fe4     00          | 	byte	0
31fe5                 | LR__5359
31fe5     73 73 2E    | 	byte	"ss."
31fe8     00          | 	byte	0
31fe9                 | LR__5360
31fe9     73 65 74 76 
31fed     6F 6C       | 	byte	"setvol"
31fef     00          | 	byte	0
31ff0                 | LR__5361
31ff0     73 76 2E    | 	byte	"sv."
31ff3     00          | 	byte	0
31ff4                 | LR__5362
31ff4     73 65 74 77 
31ff8     61 76 65    | 	byte	"setwave"
31ffb     00          | 	byte	0
31ffc                 | LR__5363
31ffc     73 77 2E    | 	byte	"sw."
31fff     00          | 	byte	0
32000                 | LR__5364
32000     73 65 74 77 
32004     61 76       | 	byte	"setwav"
32006     00          | 	byte	0
32007                 | LR__5365
32007     73 68 75 74 
3200b     75 70       | 	byte	"shutup"
3200d     00          | 	byte	0
3200e                 | LR__5366
3200e     73 68 2E    | 	byte	"sh."
32011     00          | 	byte	0
32012                 | LR__5367
32012     73 6F 75 6E 
32016     64          | 	byte	"sound"
32017     00          | 	byte	0
32018                 | LR__5368
32018     73 6F 2E    | 	byte	"so."
3201b     00          | 	byte	0
3201c                 | LR__5369
3201c     73 70 72 69 
32020     74 65       | 	byte	"sprite"
32022     00          | 	byte	0
32023                 | LR__5370
32023     73 70 72 2E | 	byte	"spr."
32027     00          | 	byte	0
32028                 | LR__5371
32028     74 68 65 6E | 	byte	"then"
3202c     00          | 	byte	0
3202d                 | LR__5372
3202d     77 61 69 74 
32031     6D 73       | 	byte	"waitms"
32033     00          | 	byte	0
32034                 | LR__5373
32034     77 2E       | 	byte	"w."
32036     00          | 	byte	0
32037                 | LR__5374
32037     77 61 69 74 
3203b     63 6C 6F 63 
3203f     6B          | 	byte	"waitclock"
32040     00          | 	byte	0
32041                 | LR__5375
32041     77 63 2E    | 	byte	"wc."
32044     00          | 	byte	0
32045                 | LR__5376
32045     77 61 69 74 
32049     76 62 6C    | 	byte	"waitvbl"
3204c     00          | 	byte	0
3204d                 | LR__5377
3204d     77 76 2E    | 	byte	"wv."
32050     00          | 	byte	0
32051                 | LR__5378
32051     77 72 70 69 
32055     6E          | 	byte	"wrpin"
32056     00          | 	byte	0
32057                 | LR__5379
32057     77 78 70 69 
3205b     6E          | 	byte	"wxpin"
3205c     00          | 	byte	0
3205d                 | LR__5380
3205d     77 79 70 69 
32061     6E          | 	byte	"wypin"
32062     00          | 	byte	0
32063                 | LR__5381
32063     61 62 73    | 	byte	"abs"
32066     00          | 	byte	0
32067                 | LR__5382
32067     61 63 6F 73 | 	byte	"acos"
3206b     00          | 	byte	0
3206c                 | LR__5383
3206c     61 64 72    | 	byte	"adr"
3206f     00          | 	byte	0
32070                 | LR__5384
32070     61 64 64 72 | 	byte	"addr"
32074     00          | 	byte	0
32075                 | LR__5385
32075     61 73 63    | 	byte	"asc"
32078     00          | 	byte	0
32079                 | LR__5386
32079     61 73 69 6E | 	byte	"asin"
3207d     00          | 	byte	0
3207e                 | LR__5387
3207e     61 74 6E    | 	byte	"atn"
32081     00          | 	byte	0
32082                 | LR__5388
32082     62 69 6E 24 | 	byte	"bin$"
32086     00          | 	byte	0
32087                 | LR__5389
32087     63 68 72 24 | 	byte	"chr$"
3208b     00          | 	byte	0
3208c                 | LR__5390
3208c     63 6F 67 69 
32090     6E 69 74    | 	byte	"coginit"
32093     00          | 	byte	0
32094                 | LR__5391
32094     63 6F 73    | 	byte	"cos"
32097     00          | 	byte	0
32098                 | LR__5392
32098     64 70 65 65 
3209c     6B          | 	byte	"dpeek"
3209d     00          | 	byte	0
3209e                 | LR__5393
3209e     66 69 6E 64 
320a2     66 69 72 73 
320a6     74          | 	byte	"findfirst"
320a7     00          | 	byte	0
320a8                 | LR__5394
320a8     66 69 6E 64 
320ac     6E 65 78 74 | 	byte	"findnext"
320b0     00          | 	byte	0
320b1                 | LR__5395
320b1     66 72 61 6D 
320b5     65 62 75 66 | 	byte	"framebuf"
320b9     00          | 	byte	0
320ba                 | LR__5396
320ba     66 62 2E    | 	byte	"fb."
320bd     00          | 	byte	0
320be                 | LR__5397
320be     66 72 65    | 	byte	"fre"
320c1     00          | 	byte	0
320c2                 | LR__5398
320c2     67 63 2E    | 	byte	"gc."
320c5     00          | 	byte	0
320c6                 | LR__5399
320c6     67 65 74 63 
320ca     6F 6C 6F 72 | 	byte	"getcolor"
320ce     00          | 	byte	0
320cf                 | LR__5400
320cf     67 65 74 70 
320d3     69 78 65 6C | 	byte	"getpixel"
320d7     00          | 	byte	0
320d8                 | LR__5401
320d8     67 65 2E    | 	byte	"ge."
320db     00          | 	byte	0
320dc                 | LR__5402
320dc     67 65 74 65 
320e0     6E 76 73 75 
320e4     73 74 61 69 
320e8     6E          | 	byte	"getenvsustain"
320e9     00          | 	byte	0
320ea                 | LR__5403
320ea     67 65 74 6E 
320ee     6F 74 65 76 
320f2     61 6C 75 65 | 	byte	"getnotevalue"
320f6     00          | 	byte	0
320f7                 | LR__5404
320f7     67 65 74 72 
320fb     65 61 6C 66 
320ff     72 65 71    | 	byte	"getrealfreq"
32102     00          | 	byte	0
32103                 | LR__5405
32103     67 65 74 74 
32107     69 6D 65    | 	byte	"gettime"
3210a     00          | 	byte	0
3210b                 | LR__5406
3210b     67 74 2E    | 	byte	"gt."
3210e     00          | 	byte	0
3210f                 | LR__5407
3210f     68 65 78 24 | 	byte	"hex$"
32113     00          | 	byte	0
32114                 | LR__5408
32114     69 6E 6B 65 
32118     79 24       | 	byte	"inkey$"
3211a     00          | 	byte	0
3211b                 | LR__5409
3211b     69 6E 74    | 	byte	"int"
3211e     00          | 	byte	0
3211f                 | LR__5410
3211f     6C 65 66 74 
32123     24          | 	byte	"left$"
32124     00          | 	byte	0
32125                 | LR__5411
32125     6C 65 6E    | 	byte	"len"
32128     00          | 	byte	0
32129                 | LR__5412
32129     6C 6F 67    | 	byte	"log"
3212c     00          | 	byte	0
3212d                 | LR__5413
3212d     6C 70 65 65 
32131     6B          | 	byte	"lpeek"
32132     00          | 	byte	0
32133                 | LR__5414
32133     6D 65 6D 74 
32137     6F 70       | 	byte	"memtop"
32139     00          | 	byte	0
3213a                 | LR__5415
3213a     6D 65 6D 6C 
3213e     6F          | 	byte	"memlo"
3213f     00          | 	byte	0
32140                 | LR__5416
32140     6D 69 64 24 | 	byte	"mid$"
32144     00          | 	byte	0
32145                 | LR__5417
32145     6D 6F 75 73 
32149     65 6B       | 	byte	"mousek"
3214b     00          | 	byte	0
3214c                 | LR__5418
3214c     6D 6F 75 73 
32150     65 77       | 	byte	"mousew"
32152     00          | 	byte	0
32153                 | LR__5419
32153     6D 6F 75 73 
32157     65 78       | 	byte	"mousex"
32159     00          | 	byte	0
3215a                 | LR__5420
3215a     6D 6F 75 73 
3215e     65 79       | 	byte	"mousey"
32160     00          | 	byte	0
32161                 | LR__5421
32161     70 61 64 73 | 	byte	"pads"
32165     00          | 	byte	0
32166                 | LR__5422
32166     70 61 64 77 | 	byte	"padw"
3216a     00          | 	byte	0
3216b                 | LR__5423
3216b     70 61 64 78 | 	byte	"padx"
3216f     00          | 	byte	0
32170                 | LR__5424
32170     70 61 64 79 | 	byte	"pady"
32174     00          | 	byte	0
32175                 | LR__5425
32175     70 61 64 7A | 	byte	"padz"
32179     00          | 	byte	0
3217a                 | LR__5426
3217a     70 61 64 72 
3217e     78          | 	byte	"padrx"
3217f     00          | 	byte	0
32180                 | LR__5427
32180     70 61 64 72 
32184     79          | 	byte	"padry"
32185     00          | 	byte	0
32186                 | LR__5428
32186     70 61 64 72 
3218a     7A          | 	byte	"padrz"
3218b     00          | 	byte	0
3218c                 | LR__5429
3218c     70 61 64 68 | 	byte	"padh"
32190     00          | 	byte	0
32191                 | LR__5430
32191     70 65 65 6B | 	byte	"peek"
32195     00          | 	byte	0
32196                 | LR__5431
32196     70 69 6E 72 
3219a     65 61 64    | 	byte	"pinread"
3219d     00          | 	byte	0
3219e                 | LR__5432
3219e     72 64 70 69 
321a2     6E          | 	byte	"rdpin"
321a3     00          | 	byte	0
321a4                 | LR__5433
321a4     72 69 67 68 
321a8     74 24       | 	byte	"right$"
321aa     00          | 	byte	0
321ab                 | LR__5434
321ab     72 71 70 69 
321af     6E          | 	byte	"rqpin"
321b0     00          | 	byte	0
321b1                 | LR__5435
321b1     72 6F 75 6E 
321b5     64          | 	byte	"round"
321b6     00          | 	byte	0
321b7                 | LR__5436
321b7     72 6E 64    | 	byte	"rnd"
321ba     00          | 	byte	0
321bb                 | LR__5437
321bb     73 69 6E    | 	byte	"sin"
321be     00          | 	byte	0
321bf                 | LR__5438
321bf     73 71 72    | 	byte	"sqr"
321c2     00          | 	byte	0
321c3                 | LR__5439
321c3     73 74 69 63 
321c7     6B          | 	byte	"stick"
321c8     00          | 	byte	0
321c9                 | LR__5440
321c9     73 74 72 69 
321cd     67          | 	byte	"strig"
321ce     00          | 	byte	0
321cf                 | LR__5441
321cf     73 74 72 24 | 	byte	"str$"
321d3     00          | 	byte	0
321d4                 | LR__5442
321d4     74 61 6E    | 	byte	"tan"
321d7     00          | 	byte	0
321d8                 | LR__5443
321d8     76 61 6C    | 	byte	"val"
321db     00          | 	byte	0
321dc                 | LR__5444
321dc     76 61 72 70 
321e0     74 72       | 	byte	"varptr"
321e2     00          | 	byte	0
321e3                 | LR__5445
321e3     61          | 	byte	"a"
321e4     00          | 	byte	0
321e5                 | LR__5446
321e5     7A          | 	byte	"z"
321e6     00          | 	byte	0
321e7                 | LR__5447
321e7     5F          | 	byte	"_"
321e8     00          | 	byte	0
321e9                 | LR__5448
321e9     61          | 	byte	"a"
321ea     00          | 	byte	0
321eb                 | LR__5449
321eb     7A          | 	byte	"z"
321ec     00          | 	byte	0
321ed                 | LR__5450
321ed     30          | 	byte	"0"
321ee     00          | 	byte	0
321ef                 | LR__5451
321ef     39          | 	byte	"9"
321f0     00          | 	byte	0
321f1                 | LR__5452
321f1     5F          | 	byte	"_"
321f2     00          | 	byte	0
321f3                 | LR__5453
321f3     2E          | 	byte	"."
321f4     00          | 	byte	0
321f5                 | LR__5454
321f5     61          | 	byte	"a"
321f6     00          | 	byte	0
321f7                 | LR__5455
321f7     7A          | 	byte	"z"
321f8     00          | 	byte	0
321f9                 | LR__5456
321f9     30          | 	byte	"0"
321fa     00          | 	byte	0
321fb                 | LR__5457
321fb     39          | 	byte	"9"
321fc     00          | 	byte	0
321fd                 | LR__5458
321fd     5F          | 	byte	"_"
321fe     00          | 	byte	0
321ff                 | LR__5459
321ff     24          | 	byte	"$"
32200     00          | 	byte	0
32201                 | LR__5460
32201     25          | 	byte	"%"
32202     00          | 	byte	0
32203                 | LR__5461
32203     21          | 	byte	"!"
32204     00          | 	byte	0
32205                 | LR__5462
32205     30          | 	byte	"0"
32206     00          | 	byte	0
32207                 | LR__5463
32207     39          | 	byte	"9"
32208     00          | 	byte	0
32209                 | LR__5464
32209     2E          | 	byte	"."
3220a     00          | 	byte	0
3220b                 | LR__5465
3220b     24          | 	byte	"$"
3220c     00          | 	byte	0
3220d                 | LR__5466
3220d     25          | 	byte	"%"
3220e     00          | 	byte	0
3220f                 | LR__5467
3220f     2D          | 	byte	"-"
32210     00          | 	byte	0
32211                 | LR__5468
32211     2E          | 	byte	"."
32212     00          | 	byte	0
32213                 | LR__5469
32213     24          | 	byte	"$"
32214     00          | 	byte	0
32215                 | LR__5470
32215     25          | 	byte	"%"
32216     00          | 	byte	0
32217                 | LR__5471
32217     30          | 	byte	"0"
32218     00          | 	byte	0
32219                 | LR__5472
32219     39          | 	byte	"9"
3221a     00          | 	byte	0
3221b                 | LR__5473
3221b     5F          | 	byte	"_"
3221c     00          | 	byte	0
3221d                 | LR__5474
3221d     2E          | 	byte	"."
3221e     00          | 	byte	0
3221f                 | LR__5475
3221f     45          | 	byte	"E"
32220     00          | 	byte	0
32221                 | LR__5476
32221     65          | 	byte	"e"
32222     00          | 	byte	0
32223                 | LR__5477
32223     2D          | 	byte	"-"
32224     00          | 	byte	0
32225                 | LR__5478
32225     61          | 	byte	"a"
32226     00          | 	byte	0
32227                 | LR__5479
32227     66          | 	byte	"f"
32228     00          | 	byte	0
32229                 | LR__5480
32229     30          | 	byte	"0"
3222a     00          | 	byte	0
3222b                 | LR__5481
3222b     31          | 	byte	"1"
3222c     00          | 	byte	0
3222d                 | LR__5482
3222d     5F          | 	byte	"_"
3222e     00          | 	byte	0
3222f                 | LR__5483
3222f     2D          | 	byte	"-"
32230     00          | 	byte	0
32231                 | LR__5484
32231     65          | 	byte	"e"
32232     00          | 	byte	0
32233                 | LR__5485
32233     2E          | 	byte	"."
32234     00          | 	byte	0
32235                 | LR__5486
32235     45          | 	byte	"E"
32236     00          | 	byte	0
32237                 | LR__5487
32237     65          | 	byte	"e"
32238     00          | 	byte	0
32239                 | LR__5488
32239     30          | 	byte	"0"
3223a     00          | 	byte	0
3223b                 | LR__5489
3223b     39          | 	byte	"9"
3223c     00          | 	byte	0
3223d                 | LR__5490
3223d     24          | 	byte	"$"
3223e     00          | 	byte	0
3223f                 | LR__5491
3223f     25          | 	byte	"%"
32240     00          | 	byte	0
32241                 | LR__5492
32241     2D          | 	byte	"-"
32242     00          | 	byte	0
32243                 | LR__5493
32243     24          | 	byte	"$"
32244     00          | 	byte	0
32245                 | LR__5494
32245     25          | 	byte	"%"
32246     00          | 	byte	0
32247                 | LR__5495
32247     30          | 	byte	"0"
32248     00          | 	byte	0
32249                 | LR__5496
32249     39          | 	byte	"9"
3224a     00          | 	byte	0
3224b                 | LR__5497
3224b     5F          | 	byte	"_"
3224c     00          | 	byte	0
3224d                 | LR__5498
3224d     30          | 	byte	"0"
3224e     00          | 	byte	0
3224f                 | LR__5499
3224f     39          | 	byte	"9"
32250     00          | 	byte	0
32251                 | LR__5500
32251     61          | 	byte	"a"
32252     00          | 	byte	0
32253                 | LR__5501
32253     66          | 	byte	"f"
32254     00          | 	byte	0
32255                 | LR__5502
32255     5F          | 	byte	"_"
32256     00          | 	byte	0
32257                 | LR__5503
32257     30          | 	byte	"0"
32258     00          | 	byte	0
32259                 | LR__5504
32259     31          | 	byte	"1"
3225a     00          | 	byte	0
3225b                 | LR__5505
3225b     5F          | 	byte	"_"
3225c     00          | 	byte	0
3225d                 | LR__5506
3225d     30          | 	byte	"0"
3225e     00          | 	byte	0
3225f                 | LR__5507
3225f     39          | 	byte	"9"
32260     00          | 	byte	0
32261                 | LR__5508
32261     5F          | 	byte	"_"
32262     00          | 	byte	0
32263                 | LR__5509
32263     22          | 	byte	34
32264     00          | 	byte	0
32265                 | LR__5510
32265     22          | 	byte	34
32266     00          | 	byte	0
32267                 | LR__5511
32267     44 69 6D 3A 
3226b     20 61 74 20 
3226f     6C 69 6E 65 
32273     20          | 	byte	"Dim: at line "
32274     00          | 	byte	0
32275                 | LR__5512
32275     3A 20 77 61 
32279     72 6E 69 6E 
3227d     67 3A 20 74 
32281     68 65 20 76 
32285     61 72 69 61 
32289     62 6C 65 20 
3228d     65 78 69 73 
32291     74 65 64 2E | 	byte	": warning: the variable existed."
32295     00          | 	byte	0
32296                 | LR__5513
32296     28          | 	byte	"("
32297     00          | 	byte	0
32298                 | LR__5514
32298     61 73       | 	byte	"as"
3229a     00          | 	byte	0
3229b                 | LR__5515
3229b     61 73       | 	byte	"as"
3229d     00          | 	byte	0
3229e                 | LR__5516
3229e     2C          | 	byte	","
3229f     00          | 	byte	0
322a0                 | LR__5517
322a0     29          | 	byte	")"
322a1     00          | 	byte	0
322a2                 | LR__5518
322a2     29          | 	byte	")"
322a3     00          | 	byte	0
322a4                 | LR__5519
322a4     61 73       | 	byte	"as"
322a6     00          | 	byte	0
322a7                 | LR__5520
322a7     62 79 74 65 | 	byte	"byte"
322ab     00          | 	byte	0
322ac                 | LR__5521
322ac     75 62 79 74 
322b0     65          | 	byte	"ubyte"
322b1     00          | 	byte	0
322b2                 | LR__5522
322b2     73 68 6F 72 
322b6     74          | 	byte	"short"
322b7     00          | 	byte	0
322b8                 | LR__5523
322b8     75 73 68 6F 
322bc     72 74       | 	byte	"ushort"
322be     00          | 	byte	0
322bf                 | LR__5524
322bf     6C 6F 6E 67 | 	byte	"long"
322c3     00          | 	byte	0
322c4                 | LR__5525
322c4     69 6E 74 65 
322c8     67 65 72    | 	byte	"integer"
322cb     00          | 	byte	0
322cc                 | LR__5526
322cc     75 6C 6F 6E 
322d0     67          | 	byte	"ulong"
322d1     00          | 	byte	0
322d2                 | LR__5527
322d2     69 6E 74 36 
322d6     34          | 	byte	"int64"
322d7     00          | 	byte	0
322d8                 | LR__5528
322d8     75 69 6E 74 
322dc     36 34       | 	byte	"uint64"
322de     00          | 	byte	0
322df                 | LR__5529
322df     73 69 6E 67 
322e3     6C 65       | 	byte	"single"
322e5     00          | 	byte	0
322e6                 | LR__5530
322e6     64 6F 75 62 
322ea     6C 65       | 	byte	"double"
322ec     00          | 	byte	0
322ed                 | LR__5531
322ed     73 74 72 69 
322f1     6E 67       | 	byte	"string"
322f3     00          | 	byte	0
322f4                 | LR__5532
322f4     74 6F       | 	byte	"to"
322f6     00          | 	byte	0
322f7                 | LR__5533
322f7     73 74 65 70 | 	byte	"step"
322fb     00          | 	byte	0
322fc                 | LR__5534
322fc     73 2E       | 	byte	"s."
322fe     00          | 	byte	0
322ff                 | LR__5535
322ff     73 2E       | 	byte	"s."
32301     00          | 	byte	0
32302                 | LR__5536
32302     67 6F 74 6F | 	byte	"goto"
32306     00          | 	byte	0
32307                 | LR__5537
32307     67 6F 73 75 
3230b     62          | 	byte	"gosub"
3230c     00          | 	byte	0
3230d                 | LR__5538
3230d     24          | 	byte	"$"
3230e     00          | 	byte	0
3230f                 | LR__5539
3230f     26 68       | 	byte	"&h"
32311     00          | 	byte	0
32312                 | LR__5540
32312     25          | 	byte	"%"
32313     00          | 	byte	0
32314                 | LR__5541
32314     26 62       | 	byte	"&b"
32316     00          | 	byte	0
32317                 | LR__5542
32317                 | 	byte	
32317     00          | 	byte	0
32318                 | LR__5543
32318     61 63 6F 73 
3231c     3A 20       | 	byte	"acos: "
3231e     00          | 	byte	0
3231f                 | LR__5544
3231f     61 73 63 3A 
32323     20          | 	byte	"asc: "
32324     00          | 	byte	0
32325                 | LR__5545
32325     61 73 63 3A 
32329     20          | 	byte	"asc: "
3232a     00          | 	byte	0
3232b                 | LR__5546
3232b     61 73 69 6E 
3232f     3A 20       | 	byte	"asin: "
32331     00          | 	byte	0
32332                 | LR__5547
32332     61 74 6E 3A 
32336     20          | 	byte	"atn: "
32337     00          | 	byte	0
32338                 | LR__5548
32338     62 6C 69 74 
3233c     3A 20       | 	byte	"blit: "
3233e     00          | 	byte	0
3233f                 | LR__5549
3233f     62 69 6E 24 
32343     3A 20       | 	byte	"bin$: "
32345     00          | 	byte	0
32346                 | LR__5550
32346     2F          | 	byte	"/"
32347     00          | 	byte	0
32348                 | LR__5551
32348     2F 73 64 2F 
3234c     62 69 6E 2F | 	byte	"/sd/bin/"
32350     00          | 	byte	0
32351                 | LR__5552
32351     53 79 73 74 
32355     65 6D 20 65 
32359     72 72 6F 72 
3235d     20          | 	byte	"System error "
3235e     00          | 	byte	0
3235f                 | LR__5553
3235f     3A 20       | 	byte	": "
32361     00          | 	byte	0
32362                 | LR__5554
32362     2A          | 	byte	"*"
32363     00          | 	byte	0
32364                 | LR__5555
32364     2E 2E       | 	byte	".."
32366     00          | 	byte	0
32367                 | LR__5556
32367     2F          | 	byte	"/"
32368     00          | 	byte	0
32369                 | LR__5557
32369     2F          | 	byte	"/"
3236a     00          | 	byte	0
3236b                 | LR__5558
3236b     53 79 73 74 
3236f     65 6D 20 65 
32373     72 72 6F 72 
32377     20          | 	byte	"System error "
32378     00          | 	byte	0
32379                 | LR__5559
32379     3A 20       | 	byte	": "
3237b     00          | 	byte	0
3237c                 | LR__5560
3237c     43 75 72 72 
32380     65 6E 74 20 
32384     64 69 72 65 
32388     63 74 6F 72 
3238c     79 3A 20    | 	byte	"Current directory: "
3238f     00          | 	byte	0
32390                 | LR__5561
32390     2F          | 	byte	"/"
32391     00          | 	byte	0
32392                 | LR__5562
32392     53 79 73 74 
32396     65 6D 20 65 
3239a     72 72 6F 72 
3239e     20          | 	byte	"System error "
3239f     00          | 	byte	0
323a0                 | LR__5563
323a0     3A 20       | 	byte	": "
323a2     00          | 	byte	0
323a3                 | LR__5564
323a3     43 75 72 72 
323a7     65 6E 74 20 
323ab     64 69 72 65 
323af     63 74 6F 72 
323b3     79 3A 20    | 	byte	"Current directory: "
323b6     00          | 	byte	0
323b7                 | LR__5565
323b7     2F          | 	byte	"/"
323b8     00          | 	byte	0
323b9                 | LR__5566
323b9     2F          | 	byte	"/"
323ba     00          | 	byte	0
323bb                 | LR__5567
323bb     2F          | 	byte	"/"
323bc     00          | 	byte	0
323bd                 | LR__5568
323bd     53 79 73 74 
323c1     65 6D 20 65 
323c5     72 72 6F 72 
323c9     20          | 	byte	"System error "
323ca     00          | 	byte	0
323cb                 | LR__5569
323cb     3A 20       | 	byte	": "
323cd     00          | 	byte	0
323ce                 | LR__5570
323ce     43 75 72 72 
323d2     65 6E 74 20 
323d6     64 69 72 65 
323da     63 74 6F 72 
323de     79 3A 20    | 	byte	"Current directory: "
323e1     00          | 	byte	0
323e2                 | LR__5571
323e2     63 68 72 24 
323e6     3A 20       | 	byte	"chr$: "
323e8     00          | 	byte	0
323e9                 | LR__5572
323e9     63 68 61 6E 
323ed     6E 65 6C 23 
323f1     20 65 78 70 
323f5     65 63 74 65 
323f9     64          | 	byte	"channel# expected"
323fa     00          | 	byte	0
323fb                 | LR__5573
323fb     63 6F 67 69 
323ff     6E 69 74 3A 
32403     20          | 	byte	"coginit: "
32404     00          | 	byte	0
32405                 | LR__5574
32405     53 79 73 74 
32409     65 6D 20 65 
3240d     72 72 6F 72 
32411     20 2D 20    | 	byte	"System error - "
32414     00          | 	byte	0
32415                 | LR__5575
32415     20 69 6E 20 
32419     6C 69 6E 65 
3241d     20          | 	byte	" in line "
3241e     00          | 	byte	0
3241f                 | LR__5576
3241f     3A 20       | 	byte	": "
32421     00          | 	byte	0
32422                 | LR__5577
32422     2C 20 66 69 
32426     6C 65 20 6E 
3242a     61 6D 65 3A 
3242e     20          | 	byte	", file name: "
3242f     00          | 	byte	0
32430                 | LR__5578
32430     53 79 73 74 
32434     65 6D 20 65 
32438     72 72 6F 72 
3243c     20 2D 20    | 	byte	"System error - "
3243f     00          | 	byte	0
32440                 | LR__5579
32440     20 69 6E 20 
32444     6C 69 6E 65 
32448     20          | 	byte	" in line "
32449     00          | 	byte	0
3244a                 | LR__5580
3244a     3A 20       | 	byte	": "
3244c     00          | 	byte	0
3244d                 | LR__5581
3244d     2C 20 66 69 
32451     6C 65 20 6E 
32455     61 6D 65 3A 
32459     20          | 	byte	", file name: "
3245a     00          | 	byte	0
3245b                 | LR__5582
3245b     63 6F 73 3A 
3245f     20          | 	byte	"cos: "
32460     00          | 	byte	0
32461                 | LR__5583
32461                 | 	byte	
32461     00          | 	byte	0
32462                 | LR__5584
32462                 | 	byte	
32462     00          | 	byte	0
32463                 | LR__5585
32463     2F 73 64 2F 
32467     6D 65 64 69 
3246b     61 2F 68 2F | 	byte	"/sd/media/h/"
3246f     00          | 	byte	0
32470                 | LR__5586
32470     53 79 73 74 
32474     65 6D 20 65 
32478     72 72 6F 72 
3247c     20          | 	byte	"System error "
3247d     00          | 	byte	0
3247e                 | LR__5587
3247e     3A 20       | 	byte	": "
32480     00          | 	byte	0
32481                 | LR__5588
32481                 | 	byte	
32481     00          | 	byte	0
32482                 | LR__5589
32482                 | 	byte	
32482     00          | 	byte	0
32483                 | LR__5590
32483     2F 73 64 2F 
32487     6D 65 64 69 
3248b     61 2F 73 2F | 	byte	"/sd/media/s/"
3248f     00          | 	byte	0
32490                 | LR__5591
32490     53 79 73 74 
32494     65 6D 20 65 
32498     72 72 6F 72 
3249c     20          | 	byte	"System error "
3249d     00          | 	byte	0
3249e                 | LR__5592
3249e     3A 20       | 	byte	": "
324a0     00          | 	byte	0
324a1                 | LR__5593
324a1     2F          | 	byte	"/"
324a2     00          | 	byte	0
324a3                 | LR__5594
324a3     2F          | 	byte	"/"
324a4     00          | 	byte	0
324a5                 | LR__5595
324a5     2F          | 	byte	"/"
324a6     00          | 	byte	0
324a7                 | LR__5596
324a7     43 61 6E 6E 
324ab     6F 74 20 64 
324af     65 6C 65 74 
324b3     65 20 66 69 
324b7     6C 65 20 6F 
324bb     72 20 66 69 
324bf     6C 65 20 64 
324c3     6F 65 73 6E 
324c7     27 74 20 65 
324cb     78 69 73 74 
324cf     3A 20 73 79 
324d3     73 74 65 6D 
324d7     20 65 72 72 
324db     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
324de     00          | 	byte	0
324df                 | LR__5597
324df     43 75 72 72 
324e3     65 6E 74 20 
324e7     64 69 72 65 
324eb     63 74 6F 72 
324ef     79 3A 20    | 	byte	"Current directory: "
324f2     00          | 	byte	0
324f3                 | LR__5598
324f3                 | 	byte	
324f3     00          | 	byte	0
324f4                 | LR__5599
324f4     2A          | 	byte	"*"
324f5     00          | 	byte	0
324f6                 | LR__5600
324f6                 | 	byte	
324f6     00          | 	byte	0
324f7                 | LR__5601
324f7     5B 64 69 72 
324fb     5D 20       | 	byte	"[dir] "
324fd     00          | 	byte	0
324fe                 | LR__5602
324fe     4D 6F 72 65 
32502     20 74 68 61 
32506     6E 20 31 32 
3250a     38 20 65 6E 
3250e     74 72 69 65 
32512     73 20 66 6F 
32516     75 6E 64 3A 
3251a     20 63 6C 65 
3251e     61 6E 20 79 
32522     6F 75 72 20 
32526     64 69 72 65 
3252a     63 74 6F 72 
3252e     79          | 	byte	"More than 128 entries found: clean your directory"
3252f     00          | 	byte	0
32530                 | LR__5603
32530     2A          | 	byte	"*"
32531     00          | 	byte	0
32532                 | LR__5604
32532                 | 	byte	
32532     00          | 	byte	0
32533                 | LR__5605
32533     4D 6F 72 65 
32537     20 74 68 61 
3253b     6E 20 31 32 
3253f     38 20 65 6E 
32543     74 72 69 65 
32547     73 20 66 6F 
3254b     75 6E 64 3A 
3254f     20 63 6C 65 
32553     61 6E 20 79 
32557     6F 75 72 20 
3255b     64 69 72 65 
3255f     63 74 6F 72 
32563     79          | 	byte	"More than 128 entries found: clean your directory"
32564     00          | 	byte	0
32565                 | LR__5606
32565     45 72 72 6F 
32569     72 20       | 	byte	"Error "
3256b     00          | 	byte	0
3256c                 | LR__5607
3256c     3A 20       | 	byte	": "
3256e     00          | 	byte	0
3256f                 | LR__5608
3256f     66 69 6E 64 
32573     66 69 72 73 
32577     74 3A 20    | 	byte	"findfirst: "
3257a     00          | 	byte	0
3257b                 | LR__5609
3257b     66 69 6E 64 
3257f     66 69 72 73 
32583     74 3A 20    | 	byte	"findfirst: "
32586     00          | 	byte	0
32587                 | LR__5610
32587     66 69 6E 64 
3258b     66 69 72 73 
3258f     74 3A 20    | 	byte	"findfirst: "
32592     00          | 	byte	0
32593                 | LR__5611
32593                 | 	byte	
32593     00          | 	byte	0
32594                 | LR__5612
32594     66 69 6E 64 
32598     66 69 72 73 
3259c     74 3A 20    | 	byte	"findfirst: "
3259f     00          | 	byte	0
325a0                 | LR__5613
325a0                 | 	byte	
325a0     00          | 	byte	0
325a1                 | LR__5614
325a1     64 69 72    | 	byte	"dir"
325a4     00          | 	byte	0
325a5                 | LR__5615
325a5     66 69 6E 64 
325a9     6E 65 78 74 
325ad     3A 20       | 	byte	"findnext: "
325af     00          | 	byte	0
325b0                 | LR__5616
325b0     67 65 74 63 
325b4     6F 6C 6F 72 
325b8     20          | 	byte	"getcolor "
325b9     00          | 	byte	0
325ba                 | LR__5617
325ba     67 65 74 65 
325be     6E 76 73 75 
325c2     73 74 61 69 
325c6     6E 3A 20    | 	byte	"getenvsustain: "
325c9     00          | 	byte	0
325ca                 | LR__5618
325ca     67 65 74 70 
325ce     69 78 65 6C 
325d2     3A 20       | 	byte	"getpixel: "
325d4     00          | 	byte	0
325d5                 | LR__5619
325d5     67 65 74 72 
325d9     65 61 6C 66 
325dd     72 65 71 3A 
325e1     20          | 	byte	"getrealfreq: "
325e2     00          | 	byte	0
325e3                 | LR__5620
325e3     68 65 78 24 
325e7     3A 20       | 	byte	"hex$: "
325e9     00          | 	byte	0
325ea                 | LR__5621
325ea                 | 	byte	
325ea     00          | 	byte	0
325eb                 | LR__5622
325eb     49 6E 20 69 
325ef     6E 70 75 74 
325f3     3A 20       | 	byte	"In input: "
325f5     00          | 	byte	0
325f6                 | LR__5623
325f6     2C          | 	byte	","
325f7     00          | 	byte	0
325f8                 | LR__5624
325f8                 | 	byte	
325f8     00          | 	byte	0
325f9                 | LR__5625
325f9                 | 	byte	
325f9     00          | 	byte	0
325fa                 | LR__5626
325fa     6C 65 66 74 
325fe     24 3A 20    | 	byte	"left$: "
32601     00          | 	byte	0
32602                 | LR__5627
32602     6C 65 66 74 
32606     24 3A 20    | 	byte	"left$: "
32609     00          | 	byte	0
3260a                 | LR__5628
3260a     6C 65 6E 3A 
3260e     20          | 	byte	"len: "
3260f     00          | 	byte	0
32610                 | LR__5629
32610     6C 65 6E 3A 
32614     20          | 	byte	"len: "
32615     00          | 	byte	0
32616                 | LR__5630
32616                 | 	byte	
32616     00          | 	byte	0
32617                 | LR__5631
32617     2F          | 	byte	"/"
32618     00          | 	byte	0
32619                 | LR__5632
32619     2F          | 	byte	"/"
3261a     00          | 	byte	0
3261b                 | LR__5633
3261b     2E 62 61 73 | 	byte	".bas"
3261f     00          | 	byte	0
32620                 | LR__5634
32620     53 79 73 74 
32624     65 6D 20 65 
32628     72 72 6F 72 
3262c     20          | 	byte	"System error "
3262d     00          | 	byte	0
3262e                 | LR__5635
3262e     3A 20       | 	byte	": "
32630     00          | 	byte	0
32631                 | LR__5636
32631     2E 62 61 73 | 	byte	".bas"
32635     00          | 	byte	0
32636                 | LR__5637
32636     2F          | 	byte	"/"
32637     00          | 	byte	0
32638                 | LR__5638
32638                 | 	byte	
32638     00          | 	byte	0
32639                 | LR__5639
32639     4C 6F 61 64 
3263d     65 64 20    | 	byte	"Loaded "
32640     00          | 	byte	0
32641                 | LR__5640
32641     2F          | 	byte	"/"
32642     00          | 	byte	0
32643                 | LR__5641
32643     6C 6F 67 3A 
32647     20          | 	byte	"log: "
32648     00          | 	byte	0
32649                 | LR__5642
32649     6D 69 64 24 
3264d     3A 20       | 	byte	"mid$: "
3264f     00          | 	byte	0
32650                 | LR__5643
32650     6D 69 64 24 
32654     3A 20       | 	byte	"mid$: "
32656     00          | 	byte	0
32657                 | LR__5644
32657     43 61 6E 6E 
3265b     6F 74 20 63 
3265f     72 65 61 74 
32663     65 20 61 20 
32667     64 69 72 65 
3266b     63 74 6F 72 
3266f     79 3A 20 73 
32673     79 73 74 65 
32677     6D 20 65 72 
3267b     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
3267f     00          | 	byte	0
32680                 | LR__5645
32680     20 42 41 53 
32684     49 43 20 62 
32688     79 74 65 73 
3268c     20 66 72 65 
32690     65          | 	byte	" BASIC bytes free"
32691     00          | 	byte	0
32692                 | LR__5646
32692                 | 	byte	
32692     00          | 	byte	0
32693                 | LR__5647
32693                 | 	byte	
32693     00          | 	byte	0
32694                 | LR__5648
32694                 | 	byte	
32694     00          | 	byte	0
32695                 | LR__5649
32695     6E 6F 6E 61 
32699     6D 65 2E 62 
3269d     61 73       | 	byte	"noname.bas"
3269f     00          | 	byte	0
326a0                 | LR__5650
326a0     66 69 6C 65 
326a4     6E 61 6D 65 
326a8     20 65 78 70 
326ac     65 63 74 65 
326b0     64          | 	byte	"filename expected"
326b1     00          | 	byte	0
326b2                 | LR__5651
326b2     72 65 61 64 | 	byte	"read"
326b6     00          | 	byte	0
326b7                 | LR__5652
326b7     77 72 69 74 
326bb     65          | 	byte	"write"
326bc     00          | 	byte	0
326bd                 | LR__5653
326bd     61 70 70 65 
326c1     6E 64       | 	byte	"append"
326c3     00          | 	byte	0
326c4                 | LR__5654
326c4     63 68 61 6E 
326c8     6E 65 6C 23 
326cc     20 65 78 70 
326d0     65 63 74 65 
326d4     64          | 	byte	"channel# expected"
326d5     00          | 	byte	0
326d6                 | LR__5655
326d6     4F 70 65 6E 
326da     3A 20 69 6E 
326de     76 61 6C 69 
326e2     64 20 6D 6F 
326e6     64 65       | 	byte	"Open: invalid mode"
326e8     00          | 	byte	0
326e9                 | LR__5656
326e9     70 61 64 72 
326ed     78 3A 20    | 	byte	"padrx: "
326f0     00          | 	byte	0
326f1                 | LR__5657
326f1     70 61 64 72 
326f5     79 3A 20    | 	byte	"padry: "
326f8     00          | 	byte	0
326f9                 | LR__5658
326f9     70 61 64 72 
326fd     7A 3A 20    | 	byte	"padrz: "
32700     00          | 	byte	0
32701                 | LR__5659
32701     70 61 64 73 
32705     3A 20       | 	byte	"pads: "
32707     00          | 	byte	0
32708                 | LR__5660
32708     70 61 64 77 
3270c     3A 20       | 	byte	"padw: "
3270e     00          | 	byte	0
3270f                 | LR__5661
3270f     70 61 64 78 
32713     3A 20       | 	byte	"padx: "
32715     00          | 	byte	0
32716                 | LR__5662
32716     70 61 64 79 
3271a     3A 20       | 	byte	"pady: "
3271c     00          | 	byte	0
3271d                 | LR__5663
3271d     70 61 64 7A 
32721     3A 20       | 	byte	"padz: "
32723     00          | 	byte	0
32724                 | LR__5664
32724     50 72 69 6E 
32728     74 20 74 6F 
3272c     20 63 68 61 
32730     6E 6E 65 6C 
32734     20 28 6E 6F 
32738     74 20 79 65 
3273c     74 20 69 6D 
32740     70 6C 65 6D 
32744     65 6E 74 65 
32748     64 29       | 	byte	"Print to channel (not yet implemented)"
3274a     00          | 	byte	0
3274b                 | LR__5665
3274b                 | 	byte	
3274b     00          | 	byte	0
3274c                 | LR__5666
3274c     64 61 74 61 | 	byte	"data"
32750     00          | 	byte	0
32751                 | LR__5667
32751                 | 	byte	
32751     00          | 	byte	0
32752                 | LR__5668
32752     49 6E 20 72 
32756     65 61 64 3A 
3275a     20          | 	byte	"In read: "
3275b     00          | 	byte	0
3275c                 | LR__5669
3275c                 | 	byte	
3275c     00          | 	byte	0
3275d                 | LR__5670
3275d                 | 	byte	
3275d     00          | 	byte	0
3275e                 | LR__5671
3275e     27          | 	byte	"'"
3275f     00          | 	byte	0
32760                 | LR__5672
32760     2C          | 	byte	","
32761     00          | 	byte	0
32762                 | LR__5673
32762                 | 	byte	
32762     00          | 	byte	0
32763                 | LR__5674
32763                 | 	byte	
32763     00          | 	byte	0
32764                 | LR__5675
32764                 | 	byte	
32764     00          | 	byte	0
32765                 | LR__5676
32765                 | 	byte	
32765     00          | 	byte	0
32766                 | LR__5677
32766                 | 	byte	
32766     00          | 	byte	0
32767                 | LR__5678
32767     72 69 67 68 
3276b     74 24 3A 20 | 	byte	"right$: "
3276f     00          | 	byte	0
32770                 | LR__5679
32770     72 69 67 68 
32774     74 24 3A 20 | 	byte	"right$: "
32778     00          | 	byte	0
32779                 | LR__5680
32779     72 6E 64 3A 
3277d     20          | 	byte	"rnd: "
3277e     00          | 	byte	0
3277f                 | LR__5681
3277f     72 6E 64 3A 
32783     20          | 	byte	"rnd: "
32784     00          | 	byte	0
32785                 | LR__5682
32785                 | 	byte	
32785     00          | 	byte	0
32786                 | LR__5683
32786     53 74 6F 70 
3278a     70 65 64 20 
3278e     61 74 20 6C 
32792     69 6E 65 20 | 	byte	"Stopped at line "
32796     00          | 	byte	0
32797                 | LR__5684
32797                 | 	byte	
32797     00          | 	byte	0
32798                 | LR__5685
32798     2F          | 	byte	"/"
32799     00          | 	byte	0
3279a                 | LR__5686
3279a                 | 	byte	
3279a     00          | 	byte	0
3279b                 | LR__5687
3279b     53 61 76 65 
3279f     64 20 61 73 
327a3     20          | 	byte	"Saved as "
327a4     00          | 	byte	0
327a5                 | LR__5688
327a5     2F          | 	byte	"/"
327a6     00          | 	byte	0
327a7                 | LR__5689
327a7     73 65 74 63 
327ab     6F 6C 6F 72 
327af     3A 20       | 	byte	"setcolor: "
327b1     00          | 	byte	0
327b2                 | LR__5690
327b2     73 69 6E 3A 
327b6     20          | 	byte	"sin: "
327b7     00          | 	byte	0
327b8                 | LR__5691
327b8     73 71 72 3A 
327bc     20          | 	byte	"sqr: "
327bd     00          | 	byte	0
327be                 | LR__5692
327be     73 74 69 63 
327c2     6B 3A 20    | 	byte	"stick: "
327c5     00          | 	byte	0
327c6                 | LR__5693
327c6     73 74 72 24 
327ca     3A 20       | 	byte	"str$: "
327cc     00          | 	byte	0
327cd                 | LR__5694
327cd     73 74 72 69 
327d1     67 3A 20    | 	byte	"strig: "
327d4     00          | 	byte	0
327d5                 | LR__5695
327d5     74 61 6E 3A 
327d9     20          | 	byte	"tan: "
327da     00          | 	byte	0
327db                 | LR__5696
327db     76 61 6C 3A 
327df     20          | 	byte	"val: "
327e0     00          | 	byte	0
327e1                 | LR__5697
327e1     76 61 6C 3A 
327e5     20          | 	byte	"val: "
327e6     00          | 	byte	0
327e7                 | LR__5698
327e7     24          | 	byte	"$"
327e8     00          | 	byte	0
327e9                 | LR__5699
327e9     26 68       | 	byte	"&h"
327eb     00          | 	byte	0
327ec                 | LR__5700
327ec     25          | 	byte	"%"
327ed     00          | 	byte	0
327ee                 | LR__5701
327ee     26 62       | 	byte	"&b"
327f0     00          | 	byte	0
327f1                 | LR__5702
327f1                 | 	byte	
327f1     00          | 	byte	0
327f2                 | LR__5703
327f2     45 78 70 65 
327f6     63 74 65 64 
327fa     20 6E 75 6D 
327fe     62 65 72 2C 
32802     20 67 6F 74 
32806     20 73 6F 6D 
3280a     65 74 68 69 
3280e     6E 67 20 65 
32812     6C 73 65    | 	byte	"Expected number, got something else"
32815     00          | 	byte	0
32816                 | LR__5704
32816     43 61 6E 6E 
3281a     6F 74 20 61 
3281e     64 64 20 61 
32822     20 6E 75 6D 
32826     62 65 72 20 
3282a     74 6F 20 61 
3282e     20 73 74 72 
32832     69 6E 67    | 	byte	"Cannot add a number to a string"
32835     00          | 	byte	0
32836                 | LR__5705
32836     43 61 6E 6E 
3283a     6F 74 20 73 
3283e     75 62 73 74 
32842     72 61 63 74 
32846     20 73 74 72 
3284a     69 6E 67 73 | 	byte	"Cannot substract strings"
3284e     00          | 	byte	0
3284f                 | LR__5706
3284f     55 6E 6B 6E 
32853     6F 77 6E 20 
32857     65 72 72 6F 
3285b     72 20 77 68 
3285f     69 6C 65 20 
32863     61 64 64 69 
32867     6E 67       | 	byte	"Unknown error while adding"
32869     00          | 	byte	0
3286a                 | LR__5707
3286a     55 6E 6B 6E 
3286e     6F 77 6E 20 
32872     65 72 72 6F 
32876     72 20 77 68 
3287a     69 6C 65 20 
3287e     73 75 62 73 
32882     74 72 61 63 
32886     74 69 6E 67 | 	byte	"Unknown error while substracting"
3288a     00          | 	byte	0
3288b                 | LR__5708
3288b     43 61 6E 6E 
3288f     6F 74 20 64 
32893     6F 20 6C 6F 
32897     67 69 63 20 
3289b     6F 70 65 72 
3289f     61 74 69 6F 
328a3     6E 20 6F 6E 
328a7     20 73 74 72 
328ab     69 6E 67 20 
328af     6F 72 20 66 
328b3     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
328b7     00          | 	byte	0
328b8                 | LR__5709
328b8     55 6E 6B 6E 
328bc     6F 77 6E 20 
328c0     65 72 72 6F 
328c4     72 20 77 68 
328c8     69 6C 65 20 
328cc     64 6F 69 6E 
328d0     67 20 6C 6F 
328d4     67 69 63 20 
328d8     6F 70 65 72 
328dc     61 74 69 6F 
328e0     6E          | 	byte	"Unknown error while doing logic operation"
328e1     00          | 	byte	0
328e2                 | LR__5710
328e2     43 61 6E 6E 
328e6     6F 74 20 6D 
328ea     75 6C 74 69 
328ee     70 6C 79 20 
328f2     73 74 72 69 
328f6     6E 67 73    | 	byte	"Cannot multiply strings"
328f9     00          | 	byte	0
328fa                 | LR__5711
328fa     55 6E 6B 6E 
328fe     6F 77 6E 20 
32902     65 72 72 6F 
32906     72 20 77 68 
3290a     69 6C 65 20 
3290e     6D 75 6C 74 
32912     69 70 6C 79 
32916     69 6E 67    | 	byte	"Unknown error while multiplying"
32919     00          | 	byte	0
3291a                 | LR__5712
3291a     43 61 6E 6E 
3291e     6F 74 20 64 
32922     69 76 69 64 
32926     65 20 73 74 
3292a     72 69 6E 67 
3292e     73          | 	byte	"Cannot divide strings"
3292f     00          | 	byte	0
32930                 | LR__5713
32930     55 6E 6B 6E 
32934     6F 77 6E 20 
32938     65 72 72 6F 
3293c     72 20 77 68 
32940     69 6C 65 20 
32944     64 69 76 69 
32948     64 69 6E 67 | 	byte	"Unknown error while dividing"
3294c     00          | 	byte	0
3294d                 | LR__5714
3294d     43 61 6E 6E 
32951     6F 74 20 63 
32955     6F 6D 70 75 
32959     74 65 20 61 
3295d     20 70 6F 77 
32961     65 72 20 6F 
32965     66 20 61 20 
32969     73 74 72 69 
3296d     6E 67       | 	byte	"Cannot compute a power of a string"
3296f     00          | 	byte	0
32970                 | LR__5715
32970     55 6E 6B 6E 
32974     6F 77 6E 20 
32978     65 72 72 6F 
3297c     72 20 77 68 
32980     69 6C 65 20 
32984     63 6F 6D 70 
32988     75 74 69 6E 
3298c     67 20 61 20 
32990     70 6F 77 65 
32994     72          | 	byte	"Unknown error while computing a power"
32995     00          | 	byte	0
32996                 | LR__5716
32996     52 69 67 68 
3299a     74 20 70 61 
3299e     72 65 6E 74 
329a2     68 65 73 69 
329a6     73 20 65 78 
329aa     70 65 63 74 
329ae     65 64       | 	byte	"Right parenthesis expected"
329b0     00          | 	byte	0
329b1                 | LR__5717
329b1     45 78 70 65 
329b5     63 74 65 64 
329b9     20 73 74 72 
329bd     69 6E 67    | 	byte	"Expected string"
329c0     00          | 	byte	0
329c1                 | LR__5718
329c1     45 78 70 65 
329c5     63 74 65 64 
329c9     20 66 6C 6F 
329cd     61 74       | 	byte	"Expected float"
329cf     00          | 	byte	0
329d0                 | LR__5719
329d0     45 78 70 65 
329d4     63 74 65 64 
329d8     20 75 6E 73 
329dc     69 67 6E 65 
329e0     64 20 69 6E 
329e4     74 65 67 65 
329e8     72          | 	byte	"Expected unsigned integer"
329e9     00          | 	byte	0
329ea                 | LR__5720
329ea     45 78 70 65 
329ee     63 74 65 64 
329f2     20 69 6E 74 
329f6     65 67 65 72 | 	byte	"Expected integer"
329fa     00          | 	byte	0
329fb                 | LR__5721
329fb     4E 6F 20 6D 
329ff     6F 72 65 20 
32a03     76 61 72 69 
32a07     61 62 6C 65 
32a0b     20 73 6C 6F 
32a0f     74 73       | 	byte	"No more variable slots"
32a11     00          | 	byte	0
32a12                 | LR__5722
32a12     56 61 72 69 
32a16     61 62 6C 65 
32a1a     20 6E 6F 74 
32a1e     20 66 6F 75 
32a22     6E 64       | 	byte	"Variable not found"
32a24     00          | 	byte	0
32a25                 | LR__5723
32a25     43 6F 6D 6D 
32a29     61 20 65 78 
32a2d     70 65 63 74 
32a31     65 64       | 	byte	"Comma expected"
32a33     00          | 	byte	0
32a34                 | LR__5724
32a34     43 6F 6D 6D 
32a38     61 20 6F 72 
32a3c     20 73 65 6D 
32a40     69 63 6F 6C 
32a44     6F 6E 20 65 
32a48     78 70 65 63 
32a4c     74 65 64    | 	byte	"Comma or semicolon expected"
32a4f     00          | 	byte	0
32a50                 | LR__5725
32a50     55 6E 6B 6E 
32a54     6F 77 6E 20 
32a58     63 6F 6D 6D 
32a5c     61 6E 64    | 	byte	"Unknown command"
32a5f     00          | 	byte	0
32a60                 | LR__5726
32a60     53 74 61 63 
32a64     6B 20 75 6E 
32a68     64 65 72 66 
32a6c     6C 6F 77    | 	byte	"Stack underflow"
32a6f     00          | 	byte	0
32a70                 | LR__5727
32a70     43 61 6E 6E 
32a74     6F 74 20 65 
32a78     78 65 63 75 
32a7c     74 65 20 67 
32a80     6F 74 6F 20 
32a84     6F 72 20 67 
32a88     6F 73 75 62 
32a8c     20 69 6E 20 
32a90     74 68 65 20 
32a94     69 6D 6D 65 
32a98     64 69 61 74 
32a9c     65 20 6D 6F 
32aa0     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
32aa2     00          | 	byte	0
32aa3                 | LR__5728
32aa3     43 61 6E 6E 
32aa7     6F 74 20 6C 
32aab     6F 61 64 20 
32aaf     66 72 6F 6D 
32ab3     20 74 68 69 
32ab7     73 20 66 69 
32abb     6C 65       | 	byte	"Cannot load from this file"
32abd     00          | 	byte	0
32abe                 | LR__5729
32abe     54 68 65 20 
32ac2     70 72 6F 67 
32ac6     72 61 6D 20 
32aca     69 73 20 65 
32ace     6D 70 74 79 | 	byte	"The program is empty"
32ad2     00          | 	byte	0
32ad3                 | LR__5730
32ad3     49 66 20 61 
32ad7     66 74 65 72 
32adb     20 69 66    | 	byte	"If after if"
32ade     00          | 	byte	0
32adf                 | LR__5731
32adf     45 6D 70 74 
32ae3     79 20 65 78 
32ae7     70 72 65 73 
32aeb     73 69 6F 6E | 	byte	"Empty expression"
32aef     00          | 	byte	0
32af0                 | LR__5732
32af0     53 74 72 69 
32af4     6E 67 20 65 
32af8     78 70 65 63 
32afc     74 65 64    | 	byte	"String expected"
32aff     00          | 	byte	0
32b00                 | LR__5733
32b00     49 6E 74 65 
32b04     72 70 72 65 
32b08     74 65 72 20 
32b0c     69 6E 74 65 
32b10     72 6E 61 6C 
32b14     20 65 72 72 
32b18     6F 72       | 	byte	"Interpreter internal error"
32b1a     00          | 	byte	0
32b1b                 | LR__5734
32b1b     45 78 70 65 
32b1f     63 74 65 64 
32b23     20 61 73 73 
32b27     69 67 6E    | 	byte	"Expected assign"
32b2a     00          | 	byte	0
32b2b                 | LR__5735
32b2b     45 78 70 65 
32b2f     63 74 65 64 
32b33     20 27 74 6F 
32b37     27          | 	byte	"Expected 'to'"
32b38     00          | 	byte	0
32b39                 | LR__5736
32b39     45 78 70 65 
32b3d     63 74 65 64 
32b41     20 69 6E 74 
32b45     65 67 65 72 
32b49     20 76 61 72 
32b4d     69 61 62 6C 
32b51     65          | 	byte	"Expected integer variable"
32b52     00          | 	byte	0
32b53                 | LR__5737
32b53     55 6E 69 6E 
32b57     69 74 69 61 
32b5b     6C 69 7A 65 
32b5f     64 20 76 61 
32b63     72 69 61 62 
32b67     6C 65 20 69 
32b6b     6E 20 27 6E 
32b6f     65 78 74 27 
32b73     2C 20 75 73 
32b77     65 20 27 66 
32b7b     6F 72 27 20 
32b7f     62 65 66 6F 
32b83     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
32b85     00          | 	byte	0
32b86                 | LR__5738
32b86     4E 6F 20 6D 
32b8a     6F 72 65 20 
32b8e     73 6C 6F 74 
32b92     73 20 66 6F 
32b96     72 20 27 66 
32b9a     6F 72 27    | 	byte	"No more slots for 'for'"
32b9d     00          | 	byte	0
32b9e                 | LR__5739
32b9e     27 4E 65 78 
32ba2     74 27 20 64 
32ba6     6F 65 73 6E 
32baa     27 74 20 6D 
32bae     61 74 63 68 
32bb2     20 27 66 6F 
32bb6     72 27       | 	byte	"'Next' doesn't match 'for'"
32bb8     00          | 	byte	0
32bb9                 | LR__5740
32bb9     27 47 6F 74 
32bbd     6F 27 20 74 
32bc1     61 72 67 65 
32bc5     74 20 6C 69 
32bc9     6E 65 20 6E 
32bcd     6F 74 20 66 
32bd1     6F 75 6E 64 | 	byte	"'Goto' target line not found"
32bd5     00          | 	byte	0
32bd6                 | LR__5741
32bd6     42 61 64 20 
32bda     6E 75 6D 62 
32bde     65 72 20 6F 
32be2     66 20 70 61 
32be6     72 61 6D 65 
32bea     74 65 72 73 | 	byte	"Bad number of parameters"
32bee     00          | 	byte	0
32bef                 | LR__5742
32bef     46 75 6E 63 
32bf3     74 69 6F 6E 
32bf7     20 75 6E 64 
32bfb     65 66 69 6E 
32bff     65 64 20 66 
32c03     6F 72 20 73 
32c07     74 72 69 6E 
32c0b     67 73       | 	byte	"Function undefined for strings"
32c0d     00          | 	byte	0
32c0e                 | LR__5743
32c0e     42 61 64 20 
32c12     70 61 72 61 
32c16     6D 65 74 65 
32c1a     72          | 	byte	"Bad parameter"
32c1b     00          | 	byte	0
32c1c                 | LR__5744
32c1c     43 61 6E 6E 
32c20     6F 74 20 64 
32c24     65 63 6C 61 
32c28     72 65 20 61 
32c2c     6E 20 61 72 
32c30     72 61 79 3A 
32c34     20 74 68 65 
32c38     20 76 61 72 
32c3c     69 61 62 6C 
32c40     65 20 65 78 
32c44     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
32c48     00          | 	byte	0
32c49                 | LR__5745
32c49     45 78 70 65 
32c4d     63 74 65 64 
32c51     20 27 28 27 | 	byte	"Expected '('"
32c55     00          | 	byte	0
32c56                 | LR__5746
32c56     45 78 70 65 
32c5a     63 74 65 64 
32c5e     20 27 29 27 
32c62     20 6F 72 20 
32c66     27 2C 27    | 	byte	"Expected ')' or ','"
32c69     00          | 	byte	0
32c6a                 | LR__5747
32c6a     4E 6F 20 6D 
32c6e     6F 72 65 20 
32c72     74 68 61 6E 
32c76     20 33 20 64 
32c7a     69 6D 65 6E 
32c7e     73 69 6F 6E 
32c82     73 20 73 75 
32c86     70 70 6F 72 
32c8a     74 65 64    | 	byte	"No more than 3 dimensions supported"
32c8d     00          | 	byte	0
32c8e                 | LR__5748
32c8e     56 61 72 69 
32c92     61 62 6C 65 
32c96     20 6E 61 6D 
32c9a     65 20 65 78 
32c9e     70 65 63 74 
32ca2     65 64       | 	byte	"Variable name expected"
32ca4     00          | 	byte	0
32ca5                 | LR__5749
32ca5     54 79 70 65 
32ca9     20 6E 61 6D 
32cad     65 20 65 78 
32cb1     70 65 63 74 
32cb5     65 64       | 	byte	"Type name expected"
32cb7     00          | 	byte	0
32cb8                 | LR__5750
32cb8     54 79 70 65 
32cbc     20 6E 6F 74 
32cc0     20 73 75 70 
32cc4     70 6F 72 74 
32cc8     65 64 20 79 
32ccc     65 74       | 	byte	"Type not supported yet"
32cce     00          | 	byte	0
32ccf                 | LR__5751
32ccf     41 72 72 61 
32cd3     79 20 69 6E 
32cd7     64 65 78 20 
32cdb     6F 75 74 20 
32cdf     6F 66 20 72 
32ce3     61 6E 67 65 | 	byte	"Array index out of range"
32ce7     00          | 	byte	0
32ce8                 | LR__5752
32ce8     42 61 64 20 
32cec     74 79 70 65 
32cf0     20 77 68 69 
32cf4     6C 65 20 61 
32cf8     73 73 69 67 
32cfc     6E 69 6E 67 
32d00     20 74 6F 20 
32d04     61 72 72 61 
32d08     79          | 	byte	"Bad type while assigning to array"
32d09     00          | 	byte	0
32d0a                 | LR__5753
32d0a     54 6F 6F 20 
32d0e     6D 61 6E 79 
32d12     20 76 61 72 
32d16     69 61 62 6C 
32d1a     65 73       | 	byte	"Too many variables"
32d1c     00          | 	byte	0
32d1d                 | LR__5754
32d1d     27 54 68 65 
32d21     6E 27 20 65 
32d25     78 70 65 63 
32d29     74 65 64    | 	byte	"'Then' expected"
32d2c     00          | 	byte	0
32d2d                 | LR__5755
32d2d     44 69 72 65 
32d31     63 74 6F 72 
32d35     79 20 64 6F 
32d39     65 73 6E 27 
32d3d     74 20 65 78 
32d41     69 73 74    | 	byte	"Directory doesn't exist"
32d44     00          | 	byte	0
32d45                 | LR__5756
32d45     55 6E 65 78 
32d49     70 65 63 74 
32d4d     65 64 20 65 
32d51     6E 64 20 6F 
32d55     66 20 6C 69 
32d59     6E 65       | 	byte	"Unexpected end of line"
32d5b     00          | 	byte	0
32d5c                 | LR__5757
32d5c     4E 6F 20 6D 
32d60     6F 72 65 20 
32d64     64 61 74 61 | 	byte	"No more data"
32d68     00          | 	byte	0
32d69                 | LR__5758
32d69     45 72 72 6F 
32d6d     72 20       | 	byte	"Error "
32d6f     00          | 	byte	0
32d70                 | LR__5759
32d70     20 2D 20    | 	byte	" - "
32d73     00          | 	byte	0
32d74                 | LR__5760
32d74     20 69 6E 20 
32d78     6C 69 6E 65 
32d7c     20          | 	byte	" in line "
32d7d     00          | 	byte	0
32d7e                 | LR__5761
32d7e                 | 	byte	
32d7e     00          | 	byte	0
32d7f                 | LR__5762
32d7f     2F 73 64    | 	byte	"/sd"
32d82     00          | 	byte	0
32d83                 | LR__5763
32d83     2F 73 64 2F 
32d87     62 61 73    | 	byte	"/sd/bas"
32d8a     00          | 	byte	0
32d8b                 | LR__5764
32d8b     2F 73 64 2F 
32d8f     62 61 73    | 	byte	"/sd/bas"
32d92     00          | 	byte	0
32d93                 | LR__5765
32d93     20 42 41 53 
32d97     49 43 20 62 
32d9b     79 74 65 73 
32d9f     20 66 72 65 
32da3     65          | 	byte	" BASIC bytes free"
32da4     00          | 	byte	0
32da5                 | LR__5766
32da5     52 65 61 64 
32da9     79          | 	byte	"Ready"
32daa     00          | 	byte	0
32dab                 | LR__5767
32dab     6E 6F 6E 61 
32daf     6D 65 2E 62 
32db3     61 73       | 	byte	"noname.bas"
32db5     00          | 	byte	0
32db6                 | LR__5768
32db6     2F 73 64 2F 
32dba     62 61 73 2F 
32dbe     61 75 74 6F 
32dc2     72 75 6E 2E 
32dc6     62 61 73    | 	byte	"/sd/bas/autorun.bas"
32dc9     00          | 	byte	0
32dca                 | LR__5769
32dca     72 75 6E 20 
32dce     61 75 74 6F 
32dd2     72 75 6E 2E 
32dd6     62 61 73    | 	byte	"run autorun.bas"
32dd9     00          | 	byte	0
32dda                 | LR__5770
32dda                 | 	byte	
32dda     00          | 	byte	0
32ddb     00          | 	alignl
32ddc                 | _dat_
32ddc     00 00 00 00 
32de0     00 00 00 00 
32de4     00 00 00 00 
32de8     00 00 00 00 | 	byte	$00[16]
32dec     61 41 17 0E 
32df0     62 42 00 00 
32df4     63 43 19 10 
32df8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
32dfc     65 45 18 0F 
32e00     66 46 00 00 
32e04     67 47 00 00 
32e08     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
32e0c     69 49 00 00 
32e10     6A 4A 00 00 
32e14     6B 4B 00 00 
32e18     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
32e1c     6D 4D 00 00 
32e20     6E 4E 1A 11 
32e24     6F 4F 1E 15 
32e28     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
32e2c     71 51 00 00 
32e30     72 52 00 00 
32e34     73 53 1B 12 
32e38     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
32e3c     75 55 00 00 
32e40     76 56 00 00 
32e44     77 57 00 00 
32e48     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
32e4c     79 59 00 00 
32e50     7A 5A 1D 14 
32e54     31 21 04 00 
32e58     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
32e5c     33 23 06 00 
32e60     34 24 07 00 
32e64     35 25 08 00 
32e68     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
32e6c     37 26 0A 00 
32e70     38 2A 0B 00 
32e74     39 28 0C 00 
32e78     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
32e7c     8D 8D 00 00 
32e80     9B 9B 00 00 
32e84     88 88 00 00 
32e88     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
32e8c     20 20 00 00 
32e90     2D 5F 00 00 
32e94     3D 2B 00 00 
32e98     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
32e9c     5D 7D 00 00 
32ea0     5C 7C 00 00 
32ea4     23 7E 00 00 
32ea8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
32eac     27 22 00 00 
32eb0     60 7E 03 00 
32eb4     2C 3C 00 00 
32eb8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
32ebc     2F 3F 00 00 
32ec0     B9 B9 00 00 
32ec4     BA 00 00 00 
32ec8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
32ecc     BC 00 00 00 
32ed0     BD 00 00 00 
32ed4     BE 00 00 00 
32ed8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
32edc     C0 00 00 00 
32ee0     C1 00 00 00 
32ee4     C2 00 00 00 
32ee8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
32eec     C4 00 00 00 
32ef0     C5 00 00 00 
32ef4     C6 00 00 00 
32ef8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
32efc     C8 00 00 00 
32f00     C9 00 00 00 
32f04     CA 00 00 00 
32f08     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
32f0c     7F 7F 00 00 
32f10     CC 00 00 00 
32f14     CD 00 00 00 
32f18     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
32f1c     CF 00 00 00 
32f20     D0 00 00 00 
32f24     D1 00 00 00 
32f28     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
32f2c     2F 2F 00 00 
32f30     2A 2A 00 00 
32f34     2D 2D 00 00 
32f38     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
32f3c     8D 8D 00 00 
32f40     31 31 00 00 
32f44     32 32 00 00 
32f48     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
32f4c     34 34 00 00 
32f50     35 35 00 00 
32f54     36 36 00 00 
32f58     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
32f5c     38 38 00 00 
32f60     39 39 00 00 
32f64     30 30 00 00 
32f68     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
32f6c     5C 7C 00 00 
32f70     00 00 00 00 
32f74     00 00 00 00 
32f78     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
32f7c     00 00 00 00 
      ...             
32fd4     00 00 00 00 
32fd8     00 00 00 00 | 	byte	$00[96]
32fdc     2B 00 A6 F2 
32fe0     24 A7 09 80 
32fe4     5B 88 4D 89 
32fe8     80 88 A5 88 | atari_spl file "atari.spl"
32fec     6D 88 B8 88 
32ff0     80 88 CB 88 
32ff4     92 88 A5 88 
32ff8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
32ffc     A5 88 CA 88 
33000     A6 88 DD 88 
33004     B8 88 AB 89 
33008     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
3300c     C8 AD C6 F1 
33010     91 06 B6 FF 
33014     13 00 4A 00 
33018     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3301c     5D 00 5E 00 
33020     5D 00 5E 00 
33024     5E 00 5D 00 
33028     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3302c     38 00 83 00 
33030     25 00 83 00 
33034     C3 FE D1 04 
33038     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3303c     48 88 38 85 
33040     41 8A CB 88 
33044     28 89 B8 88 
33048     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3304c     15 89 03 89 
33050     02 89 15 89 
33054     16 89 15 89 
33058     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3305c     15 89 3A 89 
33060     72 89 E3 89 
33064     52 83 AD 97 
33068     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3306c     0C 02 B6 FF 
33070     E1 00 A8 00 
33074     F3 00 A8 00 
33078     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3307c     CE 00 CD 00 
33080     CD 00 BA 00 
33084     E1 00 BB 00 
33088     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3308c     DF 00 C9 FF 
33090     E6 01 B6 06 
33094     EE DD 8D 98 
33098     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
3309c     97 89 73 89 
330a0     3B 89 60 89 
330a4     60 89 60 89 
330a8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
330ac     73 89 72 89 
330b0     85 89 73 89 
330b4     AA 89 60 89 
330b8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
330bc     E8 8A 18 86 
330c0     92 88 A5 C2 
330c4     E0 00 C3 05 
330c8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
330cc     F2 00 64 01 
330d0     06 01 3E 01 
330d4     2B 01 2B 01 
330d8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
330dc     2B 01 2A 01 
330e0     2B 01 2B 01 
330e4     2B 01 18 01 
330e8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
330ec     39 07 61 F3 
330f0     C0 AF 37 85 
330f4     0F 88 8B 8A 
330f8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
330fc     AB 89 D0 89 
33100     AB 89 D0 89 
33104     D0 89 CF 89 
33108     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
3310c     D0 89 F5 89 
33110     BD 89 08 8A 
33114     CF 89 E8 8A 
33118     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3311c     53 B3 0D F8 
33120     F4 07 38 00 
33124     63 01 63 01 
33128     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3312c     88 01 88 01 
33130     76 01 88 01 
33134     88 01 89 01 
33138     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3313c     75 01 AE 01 
33140     76 01 88 01 
33144     4A 00 46 06 
33148     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3314c     08 8A 9A 86 
33150     33 8B 08 8A 
33154     2D 8A F5 89 
33158     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3315c     2D 8A 2D 8A 
33160     2E 8A 1B 8A 
33164     40 8A 2D 8A 
33168     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3316c     2E 8A 79 8A 
33170     66 8A C8 8B 
33174     72 82 2B 97 
33178     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3317c     1D 02 05 01 
33180     F8 01 C0 01 
33184     0B 02 C0 01 
33188     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3318c     F9 01 D3 01 
33190     F8 01 D3 01 
33194     F8 01 D2 01 
33198     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
3319c     E6 01 2B 01 
331a0     8E 02 5F 07 
331a4     F7 E2 ED 9C 
331a8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
331ac     E8 8A 78 8A 
331b0     78 8A 65 8A 
331b4     8B 8A 78 8A 
331b8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
331bc     8B 8A 9D 8A 
331c0     9D 8A 8B 8A 
331c4     C2 8A 78 8A 
331c8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
331cc     70 8C 18 86 
331d0     8B 8A 23 C9 
331d4     CB 03 C4 05 
331d8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
331dc     0B 02 7B 02 
331e0     1E 02 55 02 
331e4     30 02 43 02 
331e8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
331ec     43 02 44 02 
331f0     43 02 30 02 
331f4     68 02 31 02 
331f8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
331fc     07 08 3F F7 
33200     73 B2 13 85 
33204     15 89 ED 8B 
33208     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
3320c     B0 8A FB 8A 
33210     D5 8A FA 8A 
33214     E8 8A FB 8A 
33218     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3321c     E8 8A 21 8B 
33220     E7 8A 33 8B 
33224     E8 8A 26 8C 
33228     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3322c     8D B0 27 F6 
33230     9C 08 AD 01 
33234     7B 02 8D 02 
33238     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3323c     A1 02 A0 02 
33240     A1 02 A0 02 
33244     A0 02 A0 02 
33248     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3324c     7B 02 D8 02 
33250     7B 02 C6 02 
33254     3E 01 C3 05 
33258     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3325c     00 8C 2A 86 
33260     E0 8C FA 8A 
33264     6A 8B FB 8A 
33268     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3326c     45 8B 45 8B 
33270     45 8B 6B 8B 
33274     46 8B 59 8B 
33278     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3327c     6B 8B 6B 8B 
33280     6B 8B 6B 8B 
33284     7D 8B 7D 8B 
33288     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3328c     90 8B 91 8B 
33290     90 8B 90 8B 
33294     A3 8B A3 8B 
33298     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3329c     B5 8B B6 8B 
332a0     B5 8B B5 8B 
332a4     B6 8B C8 8B 
332a8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
332ac     C8 8B DA 8B 
332b0     DB 8B DB 8B 
332b4     DB 8B DC 8B 
332b8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
332bc     EE 8B EE 8B 
332c0     00 8C 01 8C 
332c4     00 8C 01 8C 
332c8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
332cc     12 8C 13 8C 
332d0     13 8C 26 8C 
332d4     26 8C 26 8C 
332d8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
332dc     38 8C 38 8C 
332e0     38 8C 38 8C 
332e4     4B 8C 4B 8C 
332e8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
332ec     5E 8C 5E 8C 
332f0     5E 8C 5E 8C 
332f4     70 8C 70 8C 
332f8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
332fc     70 8C 83 8C 
33300     83 8C 83 8C 
33304     83 8C 96 8C 
33308     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
3330c     95 8C A9 8C 
33310     A9 8C A8 8C 
33314     A8 8C A8 8C 
33318     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3331c     BB 8C BB 8C 
33320     BB 8C CE 8C 
33324     CE 8C CE 8C 
33328     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3332c     E0 8C E1 8C 
33330     E1 8C E0 8C 
33334     F4 8C F2 8C 
33338     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3333c     05 8D 05 8D 
33340     06 8D 06 8D 
33344     19 8D 19 8D 
33348     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3334c     18 8D 2B 8D 
33350     2B 8D 2B 8D 
33354     2A 8D 3E 8D 
33358     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3335c     3E 8D 51 8D 
33360     50 8D 50 8D 
33364     50 8D 51 8D 
33368     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3336c     63 8D 64 8D 
33370     76 8D 75 8D 
33374     75 8D 76 8D 
33378     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3337c     88 8D 88 8D 
33380     89 8D 9B 8D 
33384     9A 8D 9B 8D 
33388     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3338c     AD 8D AE 8D 
33390     AD 8D AE 8D 
33394     C1 8D C1 8D 
33398     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3339c     D3 8D D3 8D 
333a0     D3 8D D3 8D 
333a4     D3 8D E6 8D 
333a8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
333ac     E6 8D E6 8D 
333b0     F9 8D F9 8D 
333b4     F9 8D F8 8D 
333b8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
333bc     0B 8E 0B 8E 
333c0     1D 8E 1D 8E 
333c4     1E 8E 1E 8E 
333c8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
333cc     31 8E 31 8E 
333d0     31 8E 42 8E 
333d4     43 8E 43 8E 
333d8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
333dc     56 8E 56 8E 
333e0     55 8E 56 8E 
333e4     68 8E 69 8E 
333e8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
333ec     69 8E 7B 8E 
333f0     7C 8E 7B 8E 
333f4     7B 8E 8D 8E 
333f8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
333fc     8D 8E A1 8E 
33400     A0 8E A1 8E 
33404     A1 8E A0 8E 
33408     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3340c     B3 8E B3 8E 
33410     C6 8E C5 8E 
33414     C6 8E C6 8E 
33418     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3341c     D8 8E D9 8E 
33420     D8 8E EC 8E 
33424     EB 8E EC 8E 
33428     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3342c     FE 8E FE 8E 
33430     FE 8E FE 8E 
33434     10 8F 10 8F 
33438     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3343c     11 8F 23 8F 
33440     24 8F 23 8F 
33444     24 8F 37 8F 
33448     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3344c     36 8F 36 8F 
33450     48 8F 49 8F 
33454     49 8F 49 8F 
33458     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3345c     5B 8F 5C 8F 
33460     5B 8F 6E 8F 
33464     6E 8F 6E 8F 
33468     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3346c     81 8F 81 8F 
33470     81 8F 81 8F 
33474     93 8F 93 8F 
33478     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3347c     93 8F A6 8F 
33480     A6 8F A6 8F 
33484     A6 8F B9 8F 
33488     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3348c     B9 8F B9 8F 
33490     CC 8F CB 8F 
33494     CB 8F CC 8F 
33498     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3349c     DF 8F DE 8F 
334a0     DE 8F F1 8F 
334a4     F1 8F F1 8F 
334a8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
334ac     03 90 04 90 
334b0     04 90 04 90 
334b4     16 90 17 90 
334b8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
334bc     29 90 28 90 
334c0     29 90 28 90 
334c4     29 90 3C 90 
334c8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
334cc     3C 90 4F 90 
334d0     4E 90 4E 90 
334d4     4E 90 4E 90 
334d8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
334dc     61 90 61 90 
334e0     73 90 74 90 
334e4     74 90 74 90 
334e8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
334ec     87 90 86 90 
334f0     87 90 86 90 
334f4     99 90 99 90 
334f8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
334fc     AB 90 AB 90 
33500     AC 90 AB 90 
33504     AB 90 BF 90 
33508     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3350c     BE 90 D1 90 
33510     D0 90 D1 90 
33514     D1 90 D1 90 
33518     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3351c     E3 90 E4 90 
33520     F6 90 F6 90 
33524     F6 90 F6 90 
33528     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3352c     09 91 0A 91 
33530     0A 91 1C 91 
33534     1C 91 1C 91 
33538     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3353c     2F 91 2E 91 
33540     2F 91 2F 91 
33544     2E 91 41 91 
33548     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3354c     41 91 53 91 
33550     54 91 54 91 
33554     53 91 54 91 
33558     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3355c     67 91 67 91 
33560     79 91 7A 91 
33564     79 91 78 91 
33568     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3356c     8C 91 8B 91 
33570     8C 91 8C 91 
33574     9E 91 9E 91 
33578     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3357c     B1 91 B1 91 
33580     B2 91 B1 91 
33584     B1 91 C4 91 
33588     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3358c     C4 91 D6 91 
33590     D7 91 D7 91 
33594     D7 91 D6 91 
33598     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3359c     EA 91 EA 91 
335a0     EA 91 FC 91 
335a4     FC 91 FB 91 
335a8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
335ac     0E 92 0F 92 
335b0     0F 92 0E 92 
335b4     21 92 21 92 
335b8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
335bc     21 92 34 92 
335c0     33 92 34 92 
335c4     34 92 47 92 
335c8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
335cc     46 92 47 92 
335d0     59 92 59 92 
335d4     59 92 59 92 
335d8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
335dc     6C 92 6C 92 
335e0     6B 92 7E 92 
335e4     7E 92 7E 92 
335e8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
335ec     92 92 91 92 
335f0     91 92 90 92 
335f4     91 92 A4 92 
335f8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
335fc     A3 92 B6 92 
33600     B6 92 B7 92 
33604     B7 92 B6 92 
33608     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3360c     CA 92 C9 92 
33610     CA 92 DC 92 
33614     DC 92 DC 92 
33618     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3361c     EF 92 EF 92 
33620     EF 92 EF 92 
33624     01 93 01 93 
33628     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3362c     15 93 14 93 
33630     14 93 14 93 
33634     14 93 27 93 
33638     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3363c     27 93 39 93 
33640     3A 93 39 93 
33644     39 93 39 93 
33648     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3364c     4B 93 4C 93 
33650     5F 93 5F 93 
33654     5F 93 5E 93 
33658     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3365c     5F 93 84 93 
33660     4C 93 96 93 
33664     5F 93 AE 94 
33668     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3366c     7B C1 00 00 
33670     00 00 00 00 
33674     00 00 00 00 
33678     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3367c     00 00 00 00 | 	byte	$00, $00, $00, $00
33680     7A D7 00 80 
33684     87 8A 48 8F 
33688     EC 8C 76 8D 
3368c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
33690     3C 8D 82 8D 
33694     42 8D 88 8D 
33698     8C 8D 8E 8D 
3369c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
336a0     97 8D DE 8D 
336a4     E1 8D F1 8E 
336a8     D8 8C A3 83 
336ac     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
336b0     65 71 C9 65 
336b4     FC 64 C4 65 
336b8     C1 65 BF 65 
336bc     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
336c0     B6 65 B4 65 
336c4     B2 65 AE 65 
336c8     AC 65 ED 65 
336cc     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
336d0     5E 65 25 66 
336d4     FA 62 23 6B 
336d8     B5 6C 61 0A 
336dc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
336e0     5D 90 BE 8D 
336e4     47 8E C3 8D 
336e8     09 8E C9 8D 
336ec     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
336f0     15 8E 19 8E 
336f4     1B 8E 62 8E 
336f8     64 8E 68 8E 
336fc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
33700     B5 8E 4C 90 
33704     FA 84 3C 9D 
33708     98 13 79 6D 
3370c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
33710     D9 66 50 66 
33714     D4 66 4B 66 
33718     8C 66 46 66 
3371c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
33720     81 66 3A 66 
33724     7C 66 36 66 
33728     76 66 30 66 
3372c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
33730     6B 66 88 72 
33734     BF 37 E7 B7 
33738     75 83 8B 8E 
3373c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
33740     94 8E 96 8E 
33744     DD 8E 9C 8E 
33748     E2 8E A2 8E 
3374c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
33750     EE 8E AE 8E 
33754     38 8F B5 8E 
33758     3F 8F FD 8E 
3375c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
33760     A5 87 1E E3 
33764     6D 5D FA 71 
33768     41 64 25 67 
3376c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
33770     D9 66 1A 67 
33774     18 67 15 67 
33778     12 67 0F 67 
3377c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
33780     07 67 C0 66 
33784     01 67 BC 66 
33788     B8 66 DE 64 
3378c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
33790     43 E5 1F 8B 
33794     14 8A F1 90 
33798     1C 8F 63 8F 
3379c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
337a0     29 8F 6E 8F 
337a4     72 8F 75 8F 
337a8     34 8F BE 8F 
337ac     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
337b0     84 8F 87 8F 
337b4     CC 8F 56 90 
337b8     67 91 49 80 
337bc     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
337c0     46 77 A6 66 
337c4     E8 66 B0 67 
337c8     AD 67 ED 67 
337cc     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
337d0     A2 67 E3 67 
337d4     9D 67 9A 67 
337d8     98 67 94 67 
337dc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
337e0     49 67 CD 67 
337e4     28 65 5F 6E 
337e8     82 67 3A 01 
337ec     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
337f0     C2 91 A9 8F 
337f4     EF 8F AE 8F 
337f8     F4 8F B5 8F 
337fc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
33800     01 90 03 90 
33804     07 90 09 90 
33808     0C 90 53 90 
3380c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
33810     18 90 44 93 
33814     85 84 D6 9D 
33818     87 1F 2F 75 
3381c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
33820     C4 68 F6 67 
33824     BE 68 F1 67 
33828     76 68 2E 68 
3382c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
33830     27 68 24 68 
33834     64 68 1E 68 
33838     5F 68 19 68 
3383c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
33840     DC 68 56 72 
33844     7E 36 C2 B8 
33848     D7 84 73 90 
3384c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
33850     7B 90 7F 90 
33854     82 90 84 90 
33858     CB 90 8B 90 
3385c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
33860     D7 90 96 90 
33864     20 91 59 90 
33868     25 91 A2 90 
3386c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
33870     D0 89 40 EE 
33874     12 64 C4 71 
33878     29 66 0C 69 
3387c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
33880     C0 68 02 69 
33884     FE 68 FB 68 
33888     F9 68 F6 68 
3388c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
33890     EE 68 A8 68 
33894     2C 69 5F 68 
33898     E2 68 81 66 
3389c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
338a0     1E EB A6 8A 
338a4     73 8B 5E 93 
338a8     7B 90 48 91 
338ac     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
338b0     0D 91 11 91 
338b4     14 91 16 91 
338b8     5C 91 1C 91 
338bc     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
338c0     68 91 AF 91 
338c4     2A 91 B5 91 
338c8     75 91 1A 94 
338cc     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
338d0     70 0E CB 6C 
338d4     5D 6E C4 67 
338d8     99 69 54 69 
338dc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
338e0     D2 69 49 69 
338e4     89 69 86 69 
338e8     40 69 C4 69 
338ec     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
338f0     35 69 76 69 
338f4     58 67 EB 6D 
338f8     E9 6D 89 0F 
338fc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
33900     33 94 94 91 
33904     D9 91 56 91 
33908     E0 91 9F 91 
3390c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
33910     EC 91 EE 91 
33914     F1 91 F4 91 
33918     F7 91 3D 92 
3391c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
33920     46 92 21 94 
33924     11 89 A4 9D 
33928     FD 0E 8F 6C 
3392c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
33930     28 6A E1 69 
33934     65 6A 1F 6A 
33938     5F 6A 1A 6A 
3393c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
33940     54 6A 0F 6A 
33944     4F 6A 09 6A 
33948     06 6A 03 6A 
3394c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
33950     23 68 69 77 
33954     3A 4D 38 CA 
33958     38 86 4E 91 
3395c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
33960     64 92 24 92 
33964     6A 92 2A 92 
33968     70 92 30 92 
3396c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
33970     7B 92 7E 92 
33974     C5 92 84 92 
33978     CB 92 8A 92 
3397c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
33980     4D 8D F9 E2 
33984     97 59 FE 74 
33988     DB 68 6D 6A 
3398c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
33990     A8 6A A5 6A 
33994     A3 6A 9F 6A 
33998     9D 6A 9B 6A 
3399c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
339a0     D6 6A 8F 6A 
339a4     CF 6A 46 6A 
339a8     CA 6A E1 67 
339ac     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
339b0     D3 F7 15 92 
339b4     90 8C BF 94 
339b8     A6 92 EB 92 
339bc     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
339c0     B1 92 F7 92 
339c4     FA 92 FD 92 
339c8     00 93 02 93 
339cc     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
339d0     4F 93 52 93 
339d4     54 93 22 94 
339d8     5A 93 8F 88 
339dc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
339e0     1C 77 07 6C 
339e4     E8 69 7A 6B 
339e8     34 6B 75 6B 
339ec     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
339f0     29 6B 26 6B 
339f4     24 6B 21 6B 
339f8     1D 6B 5E 6B 
339fc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
33a00     12 6B 52 6B 
33a04     34 69 34 6E 
33a08     BA 73 A4 24 
33a0c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
33a10     7A 94 B3 93 
33a14     72 93 31 93 
33a18     78 93 7A 93 
33a1c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
33a20     83 93 86 93 
33a24     89 93 D0 93 
33a28     D2 93 D5 93 
33a2c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
33a30     DD 93 40 96 
33a34     30 8B 99 9C 
33a38     52 10 94 71 
33a3c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
33a40     46 6C 79 6B 
33a44     40 6C B7 6B 
33a48     F7 6B B1 6B 
33a4c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
33a50     EC 6B A5 6B 
33a54     A2 6B 9F 6B 
33a58     9D 6B 9A 6B 
33a5c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
33a60     C8 6A E4 76 
33a64     20 4B F9 CE 
33a68     2E 8A 1A 92 
33a6c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
33a70     FB 93 BA 93 
33a74     01 94 03 94 
33a78     4A 94 09 94 
33a7c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
33a80     55 94 14 94 
33a84     9E 94 1A 94 
33a88     61 94 20 94 
33a8c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
33a90     3E 87 E5 CD 
33a94     5F 50 6C 78 
33a98     B5 6A 04 6C 
33a9c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
33aa0     83 6C 7F 6C 
33aa4     7C 6C 36 6C 
33aa8     76 6C 74 6C 
33aac     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
33ab0     6B 6C 25 6C 
33ab4     66 6C 1F 6C 
33ab8     1D 6C 41 6A 
33abc     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
33ac0     BA FA FC 94 
33ac4     5B 8D 97 96 
33ac8     3B 94 C5 94 
33acc     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
33ad0     89 94 8C 94 
33ad4     8F 94 92 94 
33ad8     94 94 DB 94 
33adc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
33ae0     E4 94 E7 94 
33ae4     2D 95 74 95 
33ae8     C8 96 15 89 
33aec     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
33af0     CB 75 31 6F 
33af4     7E 6B 10 6D 
33af8     C9 6C 0A 6D 
33afc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
33b00     BD 6C FF 6C 
33b04     FB 6C F9 6C 
33b08     B2 6C F3 6C 
33b0c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
33b10     A7 6C E8 6C 
33b14     0D 6B 85 6F 
33b18     C7 74 10 28 
33b1c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
33b20     96 96 47 95 
33b24     06 95 0A 95 
33b28     0C 95 0F 95 
33b2c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
33b30     17 95 5E 95 
33b34     61 95 63 95 
33b38     22 95 AC 95 
33b3c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
33b40     72 95 17 98 
33b44     59 8E 01 96 
33b48     CF FC 5A 68 
33b4c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
33b50     96 6D 50 6D 
33b54     D5 6D 4A 6D 
33b58     8C 6D 89 6D 
33b5c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
33b60     80 6D 3A 6D 
33b64     7A 6D 77 6D 
33b68     75 6D 71 6D 
33b6c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
33b70     18 6C BC 78 
33b74     9A 4F 7E CF 
33b78     1F 89 F1 93 
33b7c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
33b80     D2 95 4E 95 
33b84     D7 95 53 95 
33b88     DD 95 E0 95 
33b8c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
33b90     A5 95 EB 95 
33b94     EE 95 F0 95 
33b98     37 96 B3 95 
33b9c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
33ba0     1A 98 D5 8D 
33ba4     C5 9F CD 0F 
33ba8     0F 71 F3 73 
33bac     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
33bb0     D9 6D 5E 6E 
33bb4     D3 6D 58 6E 
33bb8     12 6E 0F 6E 
33bbc     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
33bc0     49 6E BF 6D 
33bc4     87 6E 76 6D 
33bc8     81 6E 11 6B 
33bcc     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
33bd0     3F 09 44 95 
33bd4     E5 8D 3F 99 
33bd8     D4 95 A2 96 
33bdc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
33be0     23 96 69 96 
33be4     6B 96 6E 96 
33be8     71 96 74 96 
33bec     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
33bf0     BF 96 3C 96 
33bf4     C6 96 C8 96 
33bf8     A3 98 51 8D 
33bfc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
33c00     CF 75 29 73 
33c04     90 6C EC 6E 
33c08     62 6E E7 6E 
33c0c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
33c10     9A 6E 98 6E 
33c14     95 6E 91 6E 
33c18     8E 6E CF 6E 
33c1c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
33c20     40 6E C3 6E 
33c24     E8 6C 45 6F 
33c28     A5 7B C9 35 
33c2c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
33c30     2D 98 23 97 
33c34     E1 96 A0 96 
33c38     A4 96 EA 96 
33c3c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
33c40     AF 96 F4 96 
33c44     F8 96 3E 97 
33c48     FD 96 43 97 
33c4c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
33c50     08 97 6B 99 
33c54     D6 92 88 91 
33c58     D8 EE 84 66 
33c5c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
33c60     2E 6F E7 6E 
33c64     6C 6F 24 6F 
33c68     21 6F 1F 6F 
33c6c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
33c70     17 6F 13 6F 
33c74     54 6F 0E 6F 
33c78     0B 6F 4B 6F 
33c7c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
33c80     27 6D 1C 7B 
33c84     19 59 9F DB 
33c88     66 8E BC 94 
33c8c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
33c90     67 97 26 97 
33c94     6D 97 2B 97 
33c98     72 97 32 97 
33c9c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
33ca0     C1 97 7F 97 
33ca4     C6 97 85 97 
33ca8     CB 97 CE 97 
33cac     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
33cb0     EC 8A C4 C6 
33cb4     68 4C F4 7D 
33cb8     63 6E E8 6E 
33cbc     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
33cc0     ED 6F A7 6F 
33cc4     E7 6F A0 6F 
33cc8     E1 6F 9B 6F 
33ccc     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
33cd0     D5 6F 8F 6F 
33cd4     CE 6F 45 6F 
33cd8     86 6F 68 6D 
33cdc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
33ce0     C0 13 AD A2 
33ce4     A7 8E 79 99 
33ce8     E6 97 E8 97 
33cec     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
33cf0     F1 97 F3 97 
33cf4     F6 97 F9 97 
33cf8     FB 97 FE 97 
33cfc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
33d00     4A 98 0A 98 
33d04     93 98 0F 98 
33d08     7F 9B BF 8C 
33d0c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
33d10     91 7B 62 73 
33d14     1A 6E B9 70 
33d18     EB 6F B3 70 
33d1c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
33d20     25 70 20 70 
33d24     1E 70 1B 70 
33d28     18 70 15 70 
33d2c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
33d30     0D 70 09 70 
33d34     07 70 03 70 
33d38     01 70 FD 6F 
33d3c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
33d40     F6 6F F2 6F 
33d44     EF 6F EC 6F 
33d48     2C 70 E6 6F 
33d4c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
33d50     DD 6F 97 6F 
33d54     D7 6F 84 6E 
33d58     8F 6F 3F 7D 
33d5c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
33d5e     FF FF FF FF 
33d62     FF FF       | atarist_spl file "atarist.spl" '512
33d64     00 00 00 00 
33d68     00 00 00 00 
33d6c     00 00       | 	byte	$00[10]
33d6e     17 7F F2 7F 
33d72     B2 7F 72 7F 
33d76     33 7F F4 7E 
33d7a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
33d7e     36 7E F5 7D 
33d82     E9 51 F2 0D 
33d86     8E 00 F3 FD 
33d8a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
33d8e     57 FD 58 FD 
33d92     5B FD 5C FD 
33d96     5C FD 60 7D 
33d9a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
33d9e     D6 7C 98 7C 
33da2     59 7C 1A 7C 
33da6     DC 7B 9E 7B 
33daa     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
33dae     F3 05 00 FD 
33db2     41 FB EA FA 
33db6     D9 FA DB FA 
33dba     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
33dbe     E4 FA 9B 36 
33dc2     F8 7A C0 7A 
33dc6     84 7A 45 7A 
33dca     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
33dce     8E 79 51 79 
33dd2     15 79 D7 78 
33dd6     3C 1F EB FF 
33dda     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
33dde     6D F8 65 F8 
33de2     68 F8 6D F8 
33de6     70 F8 74 F8 
33dea     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
33dee     AB 60 79 60 
33df2     4B 60 1A 60 
33df6     E9 5F B9 5F 
33dfa     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
33dfe     FB 59 B2 0B 
33e02     92 FA 3A F7 
33e06     96 F6 79 F6 
33e0a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
33e0e     82 F6 86 F6 
33e12     8C F6 DB 5D 
33e16     F1 5E C1 5E 
33e1a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
33e1e     34 5E 04 5E 
33e22     D6 5D A6 5D 
33e26     78 5D D4 3E 
33e2a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
33e2e     27 F5 BA F4 
33e32     AB F4 AD F4 
33e36     B2 F4 B8 F4 
33e3a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
33e3e     26 5D 2B 5D 
33e42     FC 5C CD 5C 
33e46     9F 5C 70 5C 
33e4a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
33e4e     E5 5B B8 5B 
33e52     DB 24 A7 FC 
33e56     D1 F4 4D F3 
33e5a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
33e5e     04 F3 0B F3 
33e62     11 F3 16 F3 
33e66     DE 18 98 5B 
33e6a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
33e6e     4E 4A 29 48 
33e72     A0 47 6A 47 
33e76     43 47 20 47 
33e7a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
33e7e     E2 F6 98 F2 
33e82     C5 F1 A3 F1 
33e86     A3 F1 A8 F1 
33e8a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
33e8e     BF F1 00 3D 
33e92     EF 46 CD 46 
33e96     AA 46 86 46 
33e9a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
33e9e     1C 46 F9 45 
33ea2     D7 45 EE 43 
33ea6     DE 02 E8 F3 
33eaa     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
33eae     61 F0 65 F0 
33eb2     6D F0 74 F0 
33eb6     7C F0 84 F0 
33eba     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
33ebe     8E 45 6D 45 
33ec2     49 45 27 45 
33ec6     05 45 E1 44 
33eca     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
33ece     F1 2F A9 FB 
33ed2     8B F1 9B EF 
33ed6     40 EF 36 EF 
33eda     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
33ede     4D EF 56 EF 
33ee2     5E EF 7B 44 
33ee6     8C 44 69 44 
33eea     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
33eee     03 44 E1 43 
33ef2     C0 43 F5 37 
33ef6     69 33 0F 11 
33efa     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
33efe     66 EE 37 EE 
33f02     38 EE 40 EE 
33f06     48 EE 51 EE 
33f0a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
33f0e     7D 32 6A 32 
33f12     51 32 37 32 
33f16     1F 32 05 32 
33f1a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
33f1e     B9 31 A1 31 
33f22     F1 04 F4 F1 
33f26     50 EE A0 ED 
33f2a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
33f2e     93 ED 9A ED 
33f32     A4 ED AD ED 
33f36     F4 27 C1 31 
33f3a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
33f3e     78 31 5F 31 
33f42     46 31 2E 31 
33f46     15 31 FC 30 
33f4a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
33f4e     C4 EF 4A ED 
33f52     DC EC CB EC 
33f56     D2 EC DA EC 
33f5a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
33f5e     F9 EC 64 2F 
33f62     0A 31 F1 30 
33f66     D9 30 C0 30 
33f6a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
33f6e     78 30 5F 30 
33f72     46 30 38 23 
33f76     A6 F6 19 EE 
33f7a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
33f7e     20 EC 28 EC 
33f82     32 EC 3C EC 
33f86     47 EC 51 EC 
33f8a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
33f8e     A3 22 93 22 
33f92     7F 22 6E 22 
33f96     5D 22 4C 22 
33f9a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
33f9e     77 09 76 F1 
33fa2     CC EC F0 EB 
33fa6     CD EB CE EB 
33faa     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
33fae     ED EB F5 EB 
33fb2     3E F6 6B 22 
33fb6     5F 22 4E 22 
33fba     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
33fbe     1B 22 0B 22 
33fc2     FA 21 E9 21 
33fc6     D8 21 4D FF 
33fca     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
33fce     92 EB 7B EB 
33fd2     82 EB 8C EB 
33fd6     97 EB A1 EB 
33fda     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
33fde     15 22 04 22 
33fe2     F3 21 E3 21 
33fe6     D2 21 C0 21 
33fea     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
33fee     8E 21 7D 21 
33ff2     9A F8 A4 ED 
33ff6     8E EB 2F EB 
33ffa     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
33ffe     37 EB 42 EB 
34002     4C EB 57 EB 
34006     B2 17 22 19 
3400a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3400e     FD 18 EF 18 
34012     E3 18 D6 18 
34016     CA 18 BD 18 
3401a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3401e     60 EC 35 EB 
34022     01 EB 01 EB 
34026     0C EB 16 EB 
3402a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3402e     34 EB D0 18 
34032     00 19 F4 18 
34036     E8 18 DA 18 
3403a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3403e     B6 18 A9 18 
34042     9D 18 91 05 
34046     F0 EF CA EB 
3404a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3404e     E8 EA F2 EA 
34052     FE EA 07 EB 
34056     12 EB C2 EF 
3405a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3405e     D9 18 CD 18 
34062     C0 18 B3 18 
34066     A7 18 9B 18 
3406a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3406e     B8 FC 30 EE 
34072     61 EB DC EA 
34076     CD EA D2 EA 
3407a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3407e     F3 EA FE EA 
34082     D2 09 D1 18 
34086     C3 18 17 18 
3408a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3408e     66 11 52 11 
34092     49 11 41 11 
34096     38 11 E0 F4 
3409a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3409e     C9 EA C5 EA 
340a2     CF EA DB EA 
340a6     E6 EA EF EA 
340aa     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
340ae     89 11 80 11 
340b2     78 11 6E 11 
340b6     67 11 5D 11 
340ba     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
340be     43 11 32 0D 
340c2     9C F1 07 EC 
340c6     F8 EA CD EA 
340ca     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
340ce     E4 EA ED EA 
340d2     F8 EA 02 EB 
340d6     55 11 91 11 
340da     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
340de     75 11 6E 11 
340e2     64 11 5E 11 
340e6     54 11 4A 11 
340ea     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
340ee     A8 EB F1 EA 
340f2     D9 EA DC EA 
340f6     E8 EA F1 EA 
340fa     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
340fe     A6 EB 9E 11 
34102     A0 11 96 11 
34106     8D 11 85 11 
3410a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3410e     6A 11 CA 0D 
34112     36 0B 57 F8 
34116     6C ED 57 EB 
3411a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3411e     F4 EA FF EA 
34122     09 EB 15 EB 
34126     1E EB 1A FD 
3412a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3412e     ED 0A E8 0A 
34132     E2 0A DC 0A 
34136     D6 0A D1 0A 
3413a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3413e     F8 F3 BC EC 
34142     57 EB 1E EB 
34146     18 EB 24 EB 
3414a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3414e     42 EB 4D EB 
34152     08 09 20 0B 
34156     1A 0B 14 0B 
3415a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3415e     04 0B FE 0A 
34162     F9 0A F2 0A 
34166     84 08 3A F1 
3416a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3416e     42 EB 42 EB 
34172     4E EB 57 EB 
34176     62 EB 6B EB 
3417a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3417e     48 0B 43 0B 
34182     3C 0B 36 0B 
34186     31 0B 2C 0B 
3418a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3418e     1B 0B 5C 00 
34192     6A EF 1B EC 
34196     81 EB 6A EB 
3419a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3419e     85 EB 8E EB 
341a2     99 EB A3 EB 
341a6     DD 05 E5 05 
341aa     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
341ae     DB 05 D8 05 
341b2     D5 05 D1 05 
341b6     D0 05 CB 05 
341ba     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
341be     0C EC BB EB 
341c2     B3 EB BB EB 
341c6     C5 EB D0 EB 
341ca     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
341ce     E4 F7 2C 06 
341d2     28 06 24 06 
341d6     22 06 1F 06 
341da     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
341de     16 06 14 06 
341e2     0F 06 D0 F3 
341e6     65 ED 2D EC 
341ea     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
341ee     01 EC 0A EC 
341f2     14 EC 1E EC 
341f6     29 EC FB 03 
341fa     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
341fe     63 06 60 06 
34202     5E 06 59 06 
34206     58 06 54 06 
3420a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3420e     69 F1 21 ED 
34212     55 EC 33 EC 
34216     36 EC 40 EC 
3421a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3421e     5C EC 68 EC 
34222     92 02 D9 02 
34226     D7 02 D7 02 
3422a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3422e     D1 02 D1 02 
34232     CE 02 CD 02 
34236     5D FC 80 EF 
3423a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3423e     83 EC 8A EC 
34242     93 EC 9C EC 
34246     A5 EC B1 EC 
3424a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3424e     2B 03 2A 03 
34252     29 03 26 03 
34256     25 03 24 03 
3425a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3425e     1F 03 70 F7 
34262     D0 EE 27 ED 
34266     DB EC D4 EC 
3426a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3426e     F0 EC FA EC 
34272     02 ED F9 F4 
34276     7B 03 7C 03 
3427a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3427e     75 03 73 03 
34282     72 03 70 03 
34286     6D 03 6C 03 
3428a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3428e     54 ED 22 ED 
34292     22 ED 2C ED 
34296     35 ED 3F ED 
3429a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3429e     14 01 C3 03 
342a2     C1 03 C0 03 
342a6     5F 01 A5 00 
342aa     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
342ae     7B 00 7C 00 
342b2     20 00 85 F1 
342b6     2A EE 89 ED 
342ba     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
342be     80 ED 87 ED 
342c2     90 ED 9A ED 
342c6     A3 ED 73 00 
342ca     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
342ce     D0 00 D0 00 
342d2     D0 00 D0 00 
342d6     D0 00 CF 00 
342da     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
342de     80 F0 3D EE 
342e2     D5 ED C7 ED 
342e6     CD ED D6 ED 
342ea     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
342ee     F2 ED FA ED 
342f2     1D 01 29 01 
342f6     27 01 27 01 
342fa     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
342fe     25 01 26 01 
34302     26 01 23 01 
34306     D0 F7 EC EF 
3430a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3430e     1C EE 24 EE 
34312     2D EE 37 EE 
34316     40 EE 47 EE 
3431a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3431e     7D 01 7B 01 
34322     7A 01 7A 01 
34326     79 01 78 01 
3432a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3432e     84 FE DE F3 
34332     6C EF 93 EE 
34336     72 EE 72 EE 
3433a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3433e     8B EE 95 EE 
34342     9E EE 15 FC 
34346     67 FE 67 FE 
3434a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3434e     6B FE 6B FE 
34352     6D FE 6D FE 
34356     6D FE 6F FE 
3435a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3435e     DF EE CC EE 
34362     CF EE D9 EE 
34366     E1 EE EA EE 
3436a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3436e     5A FE C4 FE 
34372     C3 FE C5 FE 
34376     C6 FE C6 FE 
3437a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3437e     C8 FE C7 FE 
34382     DA FB 85 F1 
34386     8D EF 31 EF 
3438a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3438e     34 EF 3E EF 
34392     46 EF 4F EF 
34396     57 EF 0D FF 
3439a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3439e     1F FF 1F FF 
343a2     21 FF 21 FF 
343a6     21 FF 21 FF 
343aa     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
343ae     15 F1 BE EF 
343b2     84 EF 7E EF 
343b6     88 EF 8F EF 
343ba     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
343be     A9 EF 06 F2 
343c2     A6 FC AB FC 
343c6     AD FC AE FC 
343ca     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
343ce     B2 FC B4 FC 
343d2     B6 FC B7 FC 
343d6     8B F4 BD F0 
343da     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
343de     E4 EF EE EF 
343e2     F6 EF FD EF 
343e6     04 F0 0E F0 
343ea     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
343ee     0B FD 0D FD 
343f2     0F FD 11 FD 
343f6     11 FD 13 FD 
343fa     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
343fe     17 FD 64 F3 
34402     CD F0 52 F0 
34406     41 F0 45 F0 
3440a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3440e     5B F0 64 F0 
34412     6D F0 FB FC 
34416     65 FD 68 FD 
3441a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3441e     6C FD 6D FD 
34422     6F FD 70 FD 
34426     72 FD B3 FB 
3442a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3442e     A4 F0 99 F0 
34432     A0 F0 A8 F0 
34436     AE F0 B9 F0 
3443a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3443e     CB FB DD FB 
34442     DE FB E0 FB 
34446     E3 FB E3 FB 
3444a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3444e     E9 FB EC FB 
34452     62 F7 27 F2 
34456     2A F1 FF F0 
3445a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3445e     0C F1 13 F1 
34462     1B F1 23 F1 
34466     33 F2 3C FC 
3446a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3446e     42 FC 45 FC 
34472     47 FC 48 FC 
34476     4A FC 4C FC 
3447a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3447e     20 F2 77 F1 
34482     5C F1 5F F1 
34486     64 F1 6C F1 
3448a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3448e     83 F1 DC F8 
34492     9A FC 9A FC 
34496     9B FC 9E FC 
3449a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3449e     A3 FC A4 FC 
344a2     A6 FC A9 FC 
344a6     90 F4 33 F2 
344aa     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
344ae     BA F1 BF F1 
344b2     C7 F1 CE F1 
344b6     D6 F1 DC F1 
344ba     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
344be     F3 FC F5 FC 
344c2     FE FB 79 FB 
344c6     62 FB 5F FB 
344ca     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
344ce     6F FA AF F3 
344d2     53 F2 12 F2 
344d6     0F F2 15 F2 
344da     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
344de     2A F2 32 F2 
344e2     38 F2 9A FB 
344e6     AF FB B1 FB 
344ea     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
344ee     B7 FB B8 FB 
344f2     BA FB BC FB 
344f6     C1 FB 3B F8 
344fa     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
344fe     6E F2 6C F2 
34502     74 F2 7A F2 
34506     81 F2 87 F2 
3450a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3450e     06 FC 09 FC 
34512     0C FC 0E FC 
34516     0F FC 12 FC 
3451a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3451e     17 FC 1A FC 
34522     B2 F6 7B F3 
34526     DD F2 C5 F2 
3452a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3452e     D4 F2 DB F2 
34532     E0 F2 E8 F2 
34536     28 F8 60 FC 
3453a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3453e     64 FC 66 FC 
34542     68 FC 6A FC 
34546     6D FC 52 FC 
3454a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3454e     78 F3 24 F3 
34552     1A F3 1E F3 
34556     24 F3 2A F3 
3455a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3455e     3D F3 80 FA 
34562     0C FB 0F FB 
34566     10 FB 14 FB 
3456a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3456e     1B FB 1D FB 
34572     1F FB 92 FA 
34576     DE F4 AE F3 
3457a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3457e     79 F3 7E F3 
34582     84 F3 8C F3 
34586     92 F3 97 F3 
3458a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3458e     67 FB 69 FB 
34592     6B FB 6F FB 
34596     71 FB 72 FB 
3459a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3459e     E3 F8 BA F4 
345a2     EE F3 CC F3 
345a6     CA F3 CF F3 
345aa     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
345ae     E2 F3 E8 F3 
345b2     ED F3 B7 FB 
345b6     BC FB BE FB 
345ba     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
345be     C4 FB C6 FB 
345c2     C8 FB C9 FB 
345c6     CC FB 8F F7 
345ca     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
345ce     1E F4 1E F4 
345d2     24 F4 2A F4 
345d6     30 F4 38 F4 
345da     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
345de     AD FA B1 FA 
345e2     B4 FA B6 FA 
345e6     BA FA BB FA 
345ea     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
345ee     C2 FA C6 FA 
345f2     55 F6 C6 F4 
345f6     7D F4 72 F4 
345fa     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
345fe     83 F4 89 F4 
34602     8F F4 94 F4 
34606     66 FA 03 FB 
3460a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3460e     0A FB 0E FB 
34612     10 FB 11 FB 
34616     16 FB 18 FB 
3461a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3461e     F9 F4 CA F4 
34622     C5 F4 CB F4 
34626     D1 F4 D7 F4 
3462a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3462e     E8 F4 3F FB 
34632     56 FB 58 FB 
34636     5A FB 5E FB 
3463a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3463e     64 FB 64 FB 
34642     69 FB 99 F9 
34646     E9 F5 33 F5 
3464a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3464e     1D F5 22 F5 
34652     27 F5 2E F5 
34656     32 F5 37 F5 
3465a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3465e     BC FA BC FA 
34662     C1 FA C2 FA 
34666     C4 FA C8 FA 
3466a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3466e     F9 F7 DB F5 
34672     78 F5 69 F5 
34676     6A F5 70 F5 
3467a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3467e     7F F5 85 F5 
34682     6E F7 06 FB 
34686     0A FB 0B FB 
3468a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3468e     14 FB 15 FB 
34692     18 FB 1B FB 
34696     1D FB 70 F7 
3469a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3469e     B6 F5 BB F5 
346a2     C0 F5 C6 F5 
346a6     CA F5 CF F5 
346aa     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
346ae     54 FB 56 FB 
346b2     5A FB 5B FB 
346b6     5E FB 5F FB 
346ba     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
346be     67 FB 52 FB 
346c2     29 F7 33 F6 
346c6     06 F6 02 F6 
346ca     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
346ce     10 F6 16 F6 
346d2     1A F6 1F F6 
346d6     81 FB 9F FB 
346da     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
346de     51 FB F2 FA 
346e2     E3 FA E3 FA 
346e6     E5 FA E9 FA 
346ea     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
346ee     64 F6 4D F6 
346f2     4D F6 53 F6 
346f6     57 F6 5C F6 
346fa     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
346fe     6A F6 19 FB 
34702     1E FB 22 FB 
34706     23 FB 24 FB 
3470a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3470e     2C FB 2E FB 
34712     32 FB F0 F8 
34716     01 F7 A5 F6 
3471a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3471e     9F F6 A3 F6 
34722     A6 F6 AC F6 
34726     B0 F6 EB F7 
3472a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3472e     68 FB 6C FB 
34732     6E FB 71 FB 
34736     72 FB 74 FB 
3473a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3473e     71 F8 21 F7 
34742     E5 F6 DD F6 
34746     E1 F6 E6 F6 
3474a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3474e     F5 F6 F7 F6 
34752     F7 FA AB FB 
34756     AD FB AF FB 
3475a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3475e     B6 FB B9 FB 
34762     BB FB BC FB 
34766     21 FB 07 F8 
3476a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3476e     22 F7 26 F7 
34772     2B F7 2E F7 
34776     34 F7 38 F7 
3477a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3477e     13 FB 16 FB 
34782     17 FB 1B FB 
34786     1E FB 20 FB 
3478a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3478e     26 FB 77 FA 
34792     F3 F7 7C F7 
34796     67 F7 6A F7 
3479a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3479e     74 F7 7A F7 
347a2     7E F7 82 F7 
347a6     53 FB 5A FB 
347aa     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
347ae     5F FB 63 FB 
347b2     65 FB 67 FB 
347b6     69 FB 6A FB 
347ba     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
347be     B5 F7 A9 F7 
347c2     AD F7 B0 F7 
347c6     B5 F7 B8 F7 
347ca     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
347ce     6E F8 99 FB 
347d2     9C FB 9D FB 
347d6     9F FB A4 FB 
347da     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
347de     A9 FB AB FB 
347e2     AD FB 46 F9 
347e6     26 F8 F0 F7 
347ea     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
347ee     F4 F7 F8 F7 
347f2     FB F7 FF F7 
347f6     03 F8 65 FA 
347fa     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
347fe     2B FB 2F FB 
34802     30 FB 32 FB 
34806     34 FB 38 FB 
3480a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3480e     E9 F8 4A F8 
34812     2E F8 2C F8 
34816     2F F8 36 F8 
3481a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3481e     41 F8 44 F8 
34822     4A FB 67 FB 
34826     68 FB 6B FB 
3482a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3482e     73 FB 74 FB 
34832     78 FB 7A FB 
34836     14 FB E7 F8 
3483a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3483e     6D F8 70 F8 
34842     73 F8 78 F8 
34846     7C F8 80 F8 
3484a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3484e     A6 FB A7 FB 
34852     A9 FB AC FB 
34856     AF FB B1 FB 
3485a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3485e     B7 FB 73 FA 
34862     F8 F8 B4 F8 
34866     A9 F8 AB F8 
3486a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3486e     B4 F8 B8 F8 
34872     BB F8 FA F8 
34876     64 FB 65 FB 
3487a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3487e     6D FB 6F FB 
34882     70 FB 74 FB 
34886     77 FB 77 FB 
3488a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3488e     E9 F8 E4 F8 
34892     E8 F8 EB F8 
34896     EE F8 F2 F8 
3489a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3489e     B5 FA 9F FB 
348a2     A1 FB A4 FB 
348a6     A5 FB A9 FB 
348aa     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
348ae     AE FB B1 FB 
348b2     B2 FB C7 F9 
348b6     39 F9 22 F9 
348ba     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
348be     26 F9 2A F9 
348c2     2E F9 32 F9 
348c6     33 F9 BA FB 
348ca     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
348ce     DE FB E1 FB 
348d2     E2 FB E4 FB 
348d6     E5 FB E7 FB 
348da     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
348de     C5 F9 67 F9 
348e2     57 F9 56 F9 
348e6     5B F9 5F F9 
348ea     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
348ee     68 F9 6C F9 
348f2     0B FC 11 FC 
348f6     14 FC 15 FC 
348fa     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
348fe     B5 FB B5 FB 
34902     B6 FB B8 FB 
34906     E9 FA C8 F9 
3490a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3490e     90 F9 94 F9 
34912     95 F9 99 F9 
34916     9D F9 9F F9 
3491a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3491e     DE FB DF FB 
34922     E2 FB E4 FB 
34926     E6 FB E8 FB 
3492a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3492e     EF FB AC FA 
34932     E9 F9 C7 F9 
34936     C3 F9 C8 F9 
3493a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3493e     D0 F9 D4 F9 
34942     D6 F9 0E FB 
34946     11 FC 13 FC 
3494a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3494e     19 FC 1B FC 
34952     1D FC 1E FC 
34956     21 FC 22 FC 
3495a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3495e     F7 F9 F7 F9 
34962     FB F9 FE F9 
34966     00 FA 03 FA 
3496a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3496e     1B FC 45 FC 
34972     46 FC 48 FC 
34976     4A FC 4B FC 
3497a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3497e     52 FC 54 FC 
34982     F3 FB 82 FA 
34986     35 FA 28 FA 
3498a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3498e     31 FA 32 FA 
34992     37 FA 37 FA 
34996     3C FA 00 FC 
3499a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3499e     09 FC 0B FC 
349a2     0F FC 12 FC 
349a6     12 FC 15 FC 
349aa     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
349ae     8D FA 60 FA 
349b2     5B FA 5C FA 
349b6     60 FA 61 FA 
349ba     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
349be     6C FA 6D FA 
349c2     37 FC 3A FC 
349c6     3B FC 3D FC 
349ca     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
349ce     43 FC 44 FC 
349d2     45 FC 47 FC 
349d6     51 FB AB FA 
349da     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
349de     8E FA 91 FA 
349e2     93 FA 95 FA 
349e6     98 FA 9B FA 
349ea     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
349ee     68 FC 6A FC 
349f2     6C FC 6E FC 
349f6     70 FC 72 FC 
349fa     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
349fe     76 FC 3B FB 
34a02     D0 FA BB FA 
34a06     B9 FA BD FA 
34a0a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
34a0e     C4 FA C6 FA 
34a12     CA FA 13 FC 
34a16     3A FC 3A FC 
34a1a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
34a1e     41 FC 43 FC 
34a22     44 FC 47 FC 
34a26     48 FC 3C FC 
34a2a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
34a2e     E6 FA E8 FA 
34a32     EB FA EE FA 
34a36     F0 FA F2 FA 
34a3a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
34a3e     61 FC 66 FC 
34a42     68 FC 6B FC 
34a46     6C FC 6E FC 
34a4a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
34a4e     73 FC 75 FC 
34a52     13 FC 3F FB 
34a56     17 FB 12 FB 
34a5a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
34a5e     1A FB 1D FB 
34a62     1F FB 20 FB 
34a66     23 FB 92 FC 
34a6a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
34a6e     96 FC 97 FC 
34a72     9A FC 9C FC 
34a76     9E FC 9F FC 
34a7a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
34a7e     5A FB 41 FB 
34a82     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
34a86     73 32 00 04 
34a8a     00 00 10 00 
34a8e     00 00 00 00 
34a92     00 00 00 00 | atari2 file "atari2.s2"
34a96     43 87 43 87 
34a9a     43 87 44 87 
34a9e     43 87 44 87 
34aa2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34aa6     43 87 43 87 
34aaa     43 87 44 87 
34aae     43 87 43 87 
34ab2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34ab6     44 87 43 87 
34aba     44 87 43 87 
34abe     43 87 43 87 
34ac2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34ac6     43 87 43 87 
34aca     44 87 43 87 
34ace     44 87 44 87 
34ad2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
34ad6     43 87 43 87 
34ada     44 87 43 87 
34ade     43 87 42 87 
34ae2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
34ae6     43 87 43 87 
34aea     43 87 43 87 
34aee     44 87 43 87 
34af2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
34af6     44 87 44 87 
34afa     43 87 44 87 
34afe     43 87 44 87 
34b02     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
34b06     44 87 43 87 
34b0a     44 87 44 87 
34b0e     43 87 43 87 
34b12     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34b16     43 87 44 87 
34b1a     44 87 43 87 
34b1e     43 87 44 87 
34b22     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34b26     43 87 43 87 
34b2a     43 87 43 87 
34b2e     43 87 43 87 
34b32     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
34b36     42 87 43 87 
34b3a     44 87 42 87 
34b3e     43 87 43 87 
34b42     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
34b46     43 87 44 87 
34b4a     44 87 43 87 
34b4e     43 87 43 87 
34b52     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34b56     43 87 5C 87 
34b5a     EE 86 AC 87 
34b5e     4C 7C A3 78 
34b62     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
34b66     BC 78 BB 78 
34b6a     BD 78 BC 78 
34b6e     BB 78 BD 78 
34b72     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
34b76     BB 78 BB 78 
34b7a     BC 78 BC 78 
34b7e     BC 78 BB 78 
34b82     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34b86     BC 78 BC 78 
34b8a     BC 78 BC 78 
34b8e     BC 78 BC 78 
34b92     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34b96     BB 78 BC 78 
34b9a     A0 78 4C 7C 
34b9e     11 7A 29 89 
34ba2     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
34ba6     44 87 43 87 
34baa     44 87 43 87 
34bae     43 87 42 87 
34bb2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
34bb6     43 87 43 87 
34bba     44 87 ED 85 
34bbe     71 85 52 79 
34bc2     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
34bc6     BC 78 BC 78 
34bca     BC 78 BC 78 
34bce     BC 78 BC 78 
34bd2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34bd6     BC 78 BC 78 
34bda     BC 78 A0 78 
34bde     CF 7A B9 81 
34be2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
34be6     44 87 43 87 
34bea     43 87 44 87 
34bee     43 87 44 87 
34bf2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34bf6     43 87 43 87 
34bfa     43 87 43 87 
34bfe     44 87 43 87 
34c02     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
34c06     43 87 43 87 
34c0a     44 87 43 87 
34c0e     44 87 43 87 
34c12     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34c16     44 87 43 87 
34c1a     43 87 43 87 
34c1e     5A 87 39 81 
34c22     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
34c26     A5 78 BC 78 
34c2a     BB 78 BC 78 
34c2e     BB 78 BC 78 
34c32     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
34c36     BC 78 BC 78 
34c3a     BC 78 BC 78 
34c3e     BC 78 8F 79 
34c42     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
34c46     09 85 47 87 
34c4a     43 87 43 87 
34c4e     42 87 42 87 
34c52     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
34c56     43 87 43 87 
34c5a     43 87 43 87 
34c5e     43 87 44 87 
34c62     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34c66     43 87 43 87 
34c6a     44 87 43 87 
34c6e     42 87 43 87 
34c72     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
34c76     44 87 43 87 
34c7a     43 87 43 87 
34c7e     44 87 44 87 
34c82     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
34c86     94 78 55 7A 
34c8a     B9 78 BC 78 
34c8e     BC 78 BC 78 
34c92     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34c96     BC 78 BB 78 
34c9a     BC 78 BC 78 
34c9e     BC 78 BC 78 
34ca2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34ca6     BB 78 BC 78 
34caa     BC 78 BC 78 
34cae     BB 78 BC 78 
34cb2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34cb6     BC 78 BC 78 
34cba     BD 78 BC 78 
34cbe     BC 78 BB 78 
34cc2     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
34cc6     94 78 B3 84 
34cca     36 84 4A 87 
34cce     43 87 43 87 
34cd2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
34cd6     43 87 44 87 
34cda     43 87 43 87 
34cde     43 87 43 87 
34ce2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34ce6     43 87 44 87 
34cea     43 87 44 87 
34cee     43 87 43 87 
34cf2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34cf6     43 87 43 87 
34cfa     43 87 45 87 
34cfe     43 87 43 87 
34d02     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
34d06     43 87 44 87 
34d0a     44 87 44 87 
34d0e     43 87 43 87 
34d12     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34d16     43 87 42 87 
34d1a     43 87 43 87 
34d1e     44 87 43 87 
34d22     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34d26     54 87 3C 82 
34d2a     36 83 52 79 
34d2e     C6 78 BC 78 
34d32     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
34d36     BB 78 BB 78 
34d3a     BC 78 BC 78 
34d3e     BC 78 BC 78 
34d42     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34d46     BD 78 ED 78 
34d4a     1B 79 F4 83 
34d4e     4D 83 4E 87 
34d52     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
34d56     44 87 43 87 
34d5a     42 87 44 87 
34d5e     43 87 42 87 
34d62     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
34d66     43 87 54 87 
34d6a     26 82 B3 84 
34d6e     D6 77 BB 78 
34d72     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
34d76     BC 78 BB 78 
34d7a     BB 78 BB 78 
34d7e     BB 78 BB 78 
34d82     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
34d86     BC 78 BC 78 
34d8a     26 79 18 75 
34d8e     36 83 1F 84 
34d92     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
34d96     43 87 43 87 
34d9a     43 87 43 87 
34d9e     43 87 44 87 
34da2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34da6     43 87 44 87 
34daa     44 87 43 87 
34dae     43 87 43 87 
34db2     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
34db6     43 87 43 87 
34dba     43 87 43 87 
34dbe     44 87 44 87 
34dc2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
34dc6     44 87 43 87 
34dca     43 87 43 87 
34dce     43 87 44 87 
34dd2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34dd6     44 87 44 87 
34dda     44 87 43 87 
34dde     44 87 43 87 
34de2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34de6     43 87 43 87 
34dea     43 87 44 87 
34dee     44 87 43 87 
34df2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34df6     43 87 43 87 
34dfa     43 87 43 87 
34dfe     43 87 44 87 
34e02     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34e06     43 87 44 87 
34e0a     43 87 44 87 
34e0e     19 87 7D 86 
34e12     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
34e16     B1 78 BC 78 
34e1a     BC 78 BC 78 
34e1e     BC 78 BC 78 
34e22     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34e26     BC 78 BC 78 
34e2a     BD 78 BC 78 
34e2e     B7 78 3B 7B 
34e32     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
34e36     96 86 44 87 
34e3a     43 87 43 87 
34e3e     43 87 43 87 
34e42     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
34e46     44 87 44 87 
34e4a     43 87 44 87 
34e4e     43 87 44 87 
34e52     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
34e56     43 87 44 87 
34e5a     43 87 44 87 
34e5e     43 87 44 87 
34e62     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34e66     43 87 44 87 
34e6a     43 87 43 87 
34e6e     44 87 43 87 
34e72     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34e76     44 87 44 87 
34e7a     43 87 43 87 
34e7e     43 87 44 87 
34e82     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34e86     43 87 43 87 
34e8a     43 87 43 87 
34e8e     44 87 44 87 
34e92     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
34e96     36 83 CF 7A 
34e9a     AB 78 BB 78 
34e9e     BC 78 BC 78 
34ea2     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
34ea6     BB 78 BC 78 
34eaa     BC 78 BC 78 
34eae     BC 78 BC 78 
34eb2     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34eb6     BC 78 BC 78 
34eba     BC 78 BB 78 
34ebe     BC 78 BC 78 
34ec2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34ec6     BB 78 BC 78 
34eca     BB 78 BC 78 
34ece     BC 78 BD 78 
34ed2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
34ed6     BC 78 BC 78 
34eda     BC 78 BC 78 
34ede     BC 78 BD 78 
34ee2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
34ee6     BC 78 BB 78 
34eea     BC 78 BB 78 
34eee     BB 78 BC 78 
34ef2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
34ef6     BC 78 BC 78 
34efa     BC 78 BC 78 
34efe     BC 78 BB 78 
34f02     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
34f06     BC 78 BC 78 
34f0a     BC 78 BD 78 
34f0e     BB 78 BC 78 
34f12     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
34f16     BC 78 BC 78 
34f1a     BC 78 BB 78 
34f1e     BC 78 BB 78 
34f22     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
34f26     BB 78 BC 78 
34f2a     BC 78 BC 78 
34f2e     BC 78 BB 78 
34f32     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34f36     BC 78 BC 78 
34f3a     BC 78 BB 78 
34f3e     BC 78 BB 78 
34f42     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34f46     BC 78 BC 78 
34f4a     BC 78 BC 78 
34f4e     BB 78 BC 78 
34f52     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34f56     BC 78 9F 78 
34f5a     52 79 B3 84 
34f5e     2F 86 60 87 
34f62     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
34f66     44 87 43 87 
34f6a     43 87 43 87 
34f6e     43 87 43 87 
34f72     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34f76     43 87 43 87 
34f7a     43 87 44 87 
34f7e     43 87 43 87 
34f82     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34f86     43 87 43 87 
34f8a     43 87 43 87 
34f8e     43 87 44 87 
34f92     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34f96     44 87 44 87 
34f9a     5E 87 BC 80 
34f9e     FB 80 94 78 
34fa2     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
34fa6     BD 78 BC 78 
34faa     BB 78 BC 78 
34fae     BB 78 BB 78 
34fb2     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
34fb6     BC 78 BB 78 
34fba     BB 78 6B 79 
34fbe     D6 77 AC 87 
34fc2     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
34fc6     43 87 44 87 
34fca     43 87 43 87 
34fce     44 87 43 87 
34fd2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34fd6     43 87 44 87 
34fda     43 87 5C 87 
34fde     E7 80 00 80 
34fe2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
34fe6     BC 78 BD 78 
34fea     BC 78 BC 78 
34fee     BC 78 BB 78 
34ff2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34ff6     BC 78 BC 78 
34ffa     BB 78 BC 78 
34ffe     BB 78 BC 78 
35002     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35006     BB 78 BC 78 
3500a     BC 78 BC 78 
3500e     BC 78 BC 78 
35012     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35016     BC 78 BC 78 
3501a     BC 78 BC 78 
3501e     A0 78 8D 7B 
35022     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
35026     60 87 43 87 
3502a     44 87 44 87 
3502e     43 87 43 87 
35032     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
35036     44 87 43 87 
3503a     43 87 43 87 
3503e     44 87 73 86 
35042     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
35046     51 7B B6 78 
3504a     BC 78 BD 78 
3504e     BC 78 BC 78 
35052     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35056     BB 78 BC 78 
3505a     BD 78 BB 78 
3505e     BC 78 BB 78 
35062     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35066     BC 78 BC 78 
3506a     BC 78 BC 78 
3506e     BB 78 BC 78 
35072     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35076     BC 78 BB 78 
3507a     BB 78 BC 78 
3507e     BC 78 BB 78 
35082     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35086     22 8C AF 84 
3508a     48 87 43 87 
3508e     44 87 43 87 
35092     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35096     43 87 42 87 
3509a     43 87 43 87 
3509e     44 87 43 87 
350a2     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
350a6     43 87 43 87 
350aa     44 87 44 87 
350ae     43 87 43 87 
350b2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
350b6     43 87 43 87 
350ba     43 87 43 87 
350be     44 87 43 87 
350c2     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
350c6     9F 8B D6 77 
350ca     16 7C B3 78 
350ce     BC 78 BB 78 
350d2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
350d6     BB 78 BC 78 
350da     BB 78 BC 78 
350de     BC 78 BC 78 
350e2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
350e6     BC 78 BB 78 
350ea     BB 78 BC 78 
350ee     BB 78 BC 78 
350f2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
350f6     BB 78 BB 78 
350fa     BC 78 BC 78 
350fe     BC 78 BB 78 
35102     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35106     BC 78 BC 78 
3510a     BC 78 BD 78 
3510e     BB 78 BC 78 
35112     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35116     BC 78 BC 78 
3511a     BC 78 BB 78 
3511e     BC 78 BC 78 
35122     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35126     A8 78 54 7E 
3512a     F4 83 17 82 
3512e     50 87 43 87 
35132     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35136     44 87 43 87 
3513a     44 87 43 87 
3513e     43 87 44 87 
35142     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35146     43 87 28 87 
3514a     20 85 CF 7A 
3514e     70 7D AD 78 
35152     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35156     BB 78 BC 78 
3515a     BC 78 BC 78 
3515e     BB 78 BB 78 
35162     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35166     BB 78 B2 78 
3516a     9A 7C CF 7A 
3516e     4A 87 0D 87 
35172     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35176     43 87 44 87 
3517a     43 87 44 87 
3517e     43 87 43 87 
35182     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35186     44 87 43 87 
3518a     28 87 51 85 
3518e     11 7A 1E 7D 
35192     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35196     BC 78 BB 78 
3519a     BC 78 BC 78 
3519e     BC 78 BC 78 
351a2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
351a6     BB 78 BC 78 
351aa     BB 78 BC 78 
351ae     BC 78 BC 78 
351b2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
351b6     BB 78 BC 78 
351ba     BC 78 BC 78 
351be     BD 78 BB 78 
351c2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
351c6     BC 78 BB 78 
351ca     BC 78 BC 78 
351ce     BC 78 BB 78 
351d2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
351d6     BC 78 BC 78 
351da     BC 78 BC 78 
351de     BB 78 BC 78 
351e2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
351e6     BC 78 BD 78 
351ea     BC 78 BC 78 
351ee     BC 78 BB 78 
351f2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
351f6     BC 78 BB 78 
351fa     BB 78 BC 78 
351fe     BC 78 BB 78 
35202     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35206     BB 78 BB 78 
3520a     BB 78 BC 78 
3520e     B6 78 48 7D 
35212     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35216     56 87 43 87 
3521a     42 87 44 87 
3521e     44 87 43 87 
35222     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35226     43 87 44 87 
3522a     43 87 44 87 
3522e     4C 87 7E 83 
35232     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35236     F7 78 BC 78 
3523a     BC 78 BB 78 
3523e     BB 78 BC 78 
35242     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35246     BC 78 BB 78 
3524a     BC 78 BC 78 
3524e     BB 78 BC 78 
35252     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35256     BB 78 BC 78 
3525a     BC 78 BC 78 
3525e     BC 78 BB 78 
35262     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35266     BC 78 BC 78 
3526a     BC 78 BC 78 
3526e     BC 78 BB 78 
35272     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35276     BC 78 BB 78 
3527a     BB 78 BC 78 
3527e     BC 78 BB 78 
35282     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35286     BC 78 BC 78 
3528a     BB 78 BC 78 
3528e     BC 78 BC 78 
35292     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35296     73 32 00 04 
3529a     00 00 10 00 
3529e     00 00 00 00 
352a2     00 00 00 00 | atari12 file "atari12.s2"
352a6     00 6D 00 6D 
352aa     00 6D 00 6D 
352ae     00 6D 00 6D 
352b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
352b6     00 6D 00 6D 
352ba     00 6D 00 6D 
352be     00 6D 00 6D 
352c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
352c6     00 6D 00 6D 
352ca     00 6D 00 6D 
352ce     00 6D 00 6D 
352d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
352d6     00 6D 00 6D 
352da     00 6D 00 6D 
352de     00 6D 00 6D 
352e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
352e6     00 6D 00 6D 
352ea     00 6D 00 6D 
352ee     00 6D 00 6D 
352f2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
352f6     00 6C 00 6C 
352fa     00 6C 00 6C 
352fe     00 6C 00 6C 
35302     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35306     00 6C 00 6C 
3530a     00 6C 00 6C 
3530e     00 6C 00 6C 
35312     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35316     00 6C 00 6C 
3531a     00 6C 00 6C 
3531e     00 6C 00 6C 
35322     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35326     00 6C 00 6C 
3532a     00 6C 00 6C 
3532e     00 6C 00 6C 
35332     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35336     00 6C 00 6C 
3533a     00 6C 00 6C 
3533e     00 6C 00 6C 
35342     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35346     00 6C 00 6C 
3534a     00 6C 00 6C 
3534e     00 6C 00 6C 
35352     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35356     00 6C 00 6C 
3535a     00 6C 00 6C 
3535e     00 6C 00 6C 
35362     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35366     00 6C 00 6C 
3536a     00 6C 00 6C 
3536e     00 6C 00 6C 
35372     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35376     00 6C 00 6C 
3537a     00 6C 00 6C 
3537e     00 6C 00 6C 
35382     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35386     00 6C 00 6C 
3538a     00 6C 00 6C 
3538e     00 6C 00 6C 
35392     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35396     00 6C 00 6C 
3539a     00 6C 00 6C 
3539e     00 6C 00 6C 
353a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
353a6     00 6C 00 6B 
353aa     00 6B 00 6B 
353ae     00 6B 00 6B 
353b2     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
353b6     00 6B 00 6B 
353ba     00 6B 00 6B 
353be     00 6B 00 6B 
353c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
353c6     00 6B 00 6B 
353ca     00 6B 00 6B 
353ce     00 6B 00 6B 
353d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
353d6     00 6B 00 6B 
353da     00 6B 00 6B 
353de     00 6B 00 6B 
353e2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
353e6     00 6B 00 6B 
353ea     00 6B 00 6B 
353ee     00 6B 00 6B 
353f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
353f6     00 6B 00 6B 
353fa     00 6B 00 6B 
353fe     00 6B 00 6B 
35402     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35406     00 6B 00 6B 
3540a     00 6B 00 6B 
3540e     00 6B 00 6B 
35412     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35416     00 6B 00 6B 
3541a     00 6B 00 6B 
3541e     00 6B 00 6B 
35422     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35426     00 6B 00 6B 
3542a     00 6B 00 6B 
3542e     00 6B 00 6B 
35432     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35436     00 6B 00 6B 
3543a     00 6B 00 6B 
3543e     00 6A 00 9D 
35442     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35446     00 9E 00 9E 
3544a     00 9E 00 9E 
3544e     00 9E 00 9E 
35452     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35456     00 9E 00 9E 
3545a     00 9E 00 9E 
3545e     00 9E 00 9E 
35462     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35466     00 9E 00 9E 
3546a     00 9E 00 9E 
3546e     00 9E 00 9E 
35472     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35476     00 9E 00 9E 
3547a     00 9E 00 9E 
3547e     00 9E 00 9E 
35482     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35486     00 9E 00 9E 
3548a     00 9E 00 9E 
3548e     00 9E 00 9E 
35492     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35496     00 9E 00 9E 
3549a     00 9E 00 9E 
3549e     00 9E 00 9E 
354a2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
354a6     00 9E 00 9E 
354aa     00 9E 00 9E 
354ae     00 9E 00 9E 
354b2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
354b6     00 9E 00 9E 
354ba     00 9E 00 9E 
354be     00 9E 00 9E 
354c2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
354c6     00 9E 00 9E 
354ca     00 9E 00 9E 
354ce     00 9E 00 9E 
354d2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
354d6     00 9F 00 9F 
354da     00 9F 00 9F 
354de     00 9F 00 9F 
354e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
354e6     00 9F 00 9F 
354ea     00 9F 00 9F 
354ee     00 9F 00 9F 
354f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
354f6     00 9F 00 9F 
354fa     00 9F 00 9F 
354fe     00 9F 00 9F 
35502     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35506     00 9F 00 9F 
3550a     00 9F 00 9F 
3550e     00 9F 00 9F 
35512     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35516     00 9F 00 9F 
3551a     00 9F 00 9F 
3551e     00 9F 00 9F 
35522     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35526     00 9F 00 9F 
3552a     00 9F 00 9F 
3552e     00 9F 00 9F 
35532     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35536     00 9F 00 9F 
3553a     00 9F 00 9F 
3553e     00 9F 00 9F 
35542     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35546     00 9F 00 9F 
3554a     00 9F 00 9F 
3554e     00 9F 00 9F 
35552     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35556     00 9F 00 9F 
3555a     00 9F 00 9F 
3555e     00 9F 00 9F 
35562     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35566     00 9F 00 9F 
3556a     00 9F 00 9F 
3556e     00 9F 00 9F 
35572     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35576     00 9F 00 9F 
3557a     00 9F 00 9F 
3557e     00 9F 00 9F 
35582     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35586     00 9F 00 9F 
3558a     00 9F 00 9F 
3558e     00 9F 00 9F 
35592     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35596     00 9F 00 9F 
3559a     00 9F 00 A0 
3559e     00 A0 00 A0 
355a2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
355a6     00 A0 00 A0 
355aa     00 A0 00 A0 
355ae     00 A0 00 A0 
355b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
355b6     00 A0 00 A0 
355ba     00 A0 00 A0 
355be     00 A0 00 A0 
355c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
355c6     00 A0 00 A0 
355ca     00 A0 00 A0 
355ce     00 A0 00 A0 
355d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
355d6     00 A0 00 A0 
355da     00 A0 00 A0 
355de     00 A0 00 A0 
355e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
355e6     00 A0 00 A0 
355ea     00 A0 00 A0 
355ee     00 A0 00 A0 
355f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
355f6     00 A0 00 A0 
355fa     00 A0 00 A0 
355fe     00 A0 00 A0 
35602     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35606     00 A0 00 A0 
3560a     00 A0 00 A0 
3560e     00 A0 00 A0 
35612     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35616     00 A0 00 A0 
3561a     00 A0 00 A0 
3561e     00 A0 00 A0 
35622     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35626     00 A0 00 A0 
3562a     00 A0 00 A0 
3562e     00 A0 00 A0 
35632     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35636     00 A0 00 A0 
3563a     00 A0 00 A0 
3563e     00 A0 00 A0 
35642     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35646     00 A0 00 A0 
3564a     00 A0 00 A0 
3564e     00 A0 00 A0 
35652     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35656     00 A0 00 A0 
3565a     00 A0 00 A0 
3565e     00 A0 00 A0 
35662     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
35666     00 6D 00 6D 
3566a     00 6D 00 6D 
3566e     00 6D 00 6D 
35672     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35676     00 6D 00 6D 
3567a     00 6D 00 6D 
3567e     00 6D 00 6D 
35682     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35686     00 6D 00 6D 
3568a     00 6D 00 6D 
3568e     00 6D 00 6D 
35692     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35696     00 6D 00 6D 
3569a     00 6D 00 6D 
3569e     00 6D 00 6D 
356a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
356a6     00 6D 00 6D 
356aa     00 6D 00 6D 
356ae     00 6D 00 6D 
356b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
356b6     00 6D 00 6D 
356ba     00 6D 00 6D 
356be     00 6D 00 6D 
356c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
356c6     00 6D 00 6D 
356ca     00 6D 00 6D 
356ce     00 6D 00 6D 
356d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
356d6     00 6D 00 6D 
356da     00 6D 00 6D 
356de     00 6D 00 6D 
356e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
356e6     00 6D 00 6D 
356ea     00 A0 00 A0 
356ee     00 A0 00 A0 
356f2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
356f6     00 A0 00 A0 
356fa     00 A0 00 A0 
356fe     00 A0 00 A0 
35702     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35706     00 A0 00 A0 
3570a     00 A0 00 A0 
3570e     00 A0 00 A0 
35712     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35716     00 A0 00 A0 
3571a     00 A0 00 A0 
3571e     00 A0 00 A0 
35722     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35726     00 A0 00 A0 
3572a     00 A0 00 A0 
3572e     00 A0 00 A0 
35732     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35736     00 A0 00 A0 
3573a     00 A0 00 A0 
3573e     00 A0 00 A0 
35742     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35746     00 A0 00 A0 
3574a     00 A0 00 A0 
3574e     00 A0 00 A0 
35752     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35756     00 A0 00 A0 
3575a     00 A0 00 A0 
3575e     00 A0 00 A0 
35762     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35766     00 A0 00 A0 
3576a     00 A0 00 A0 
3576e     00 A0 00 A0 
35772     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
35776     00 6D 00 6D 
3577a     00 6D 00 6D 
3577e     00 6D 00 6D 
35782     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35786     00 6D 00 6D 
3578a     00 6D 00 6D 
3578e     00 6D 00 6D 
35792     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35796     00 6D 00 6D 
3579a     00 6D 00 6D 
3579e     00 6D 00 6D 
357a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
357a6     00 6D 00 6D 
357aa     00 6D 00 6D 
357ae     00 6D 00 6D 
357b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
357b6     00 6D 00 6D 
357ba     00 6D 00 6D 
357be     00 6D 00 6D 
357c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
357c6     00 6D 00 6D 
357ca     00 6D 00 6D 
357ce     00 6D 00 6D 
357d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
357d6     00 6D 00 6D 
357da     00 6D 00 6D 
357de     00 6D 00 6D 
357e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
357e6     00 6D 00 6D 
357ea     00 6D 00 6D 
357ee     00 6D 00 6D 
357f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
357f6     00 6D 00 6D 
357fa     00 6C 00 A0 
357fe     00 9F 00 A0 
35802     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
35806     00 A0 00 A0 
3580a     00 A0 00 A0 
3580e     00 A0 00 A0 
35812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35816     00 A0 00 A0 
3581a     00 A0 00 A0 
3581e     00 A0 00 A0 
35822     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35826     00 A0 00 A0 
3582a     00 A0 00 A0 
3582e     00 A0 00 A0 
35832     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35836     00 A0 00 A0 
3583a     00 A0 00 A0 
3583e     00 A0 00 A0 
35842     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35846     00 A0 00 A0 
3584a     00 A0 00 A0 
3584e     00 A0 00 A0 
35852     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35856     00 A0 00 A0 
3585a     00 A0 00 A0 
3585e     00 A0 00 A0 
35862     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35866     00 A0 00 A0 
3586a     00 A0 00 A0 
3586e     00 A0 00 A0 
35872     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35876     00 A0 00 A0 
3587a     00 A0 00 A0 
3587e     00 A0 00 A0 
35882     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35886     00 A0 00 A0 
3588a     00 A0 00 A0 
3588e     00 A0 00 A0 
35892     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35896     00 A0 00 A0 
3589a     00 A0 00 A0 
3589e     00 A0 00 A0 
358a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358a6     00 A0 00 A0 
358aa     00 A0 00 A0 
358ae     00 A0 00 A0 
358b2     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
358b6     00 A1 00 A1 
358ba     00 A1 00 A1 
358be     00 A1 00 A1 
358c2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
358c6     00 A1 00 A1 
358ca     00 A1 00 A1 
358ce     00 A1 00 A1 
358d2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
358d6     00 A1 00 A1 
358da     00 A1 00 A1 
358de     00 A1 00 A1 
358e2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
358e6     00 A1 00 A1 
358ea     00 A1 00 A1 
358ee     00 A1 00 A1 
358f2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
358f6     00 A1 00 A1 
358fa     00 A1 00 A1 
358fe     00 A1 00 A1 
35902     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35906     00 A1 00 A1 
3590a     00 A1 00 A1 
3590e     00 6E 00 6E 
35912     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35916     00 6E 00 6E 
3591a     00 6E 00 6E 
3591e     00 6E 00 6E 
35922     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35926     00 6E 00 6E 
3592a     00 6E 00 6E 
3592e     00 6E 00 6E 
35932     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35936     00 6E 00 6E 
3593a     00 6E 00 6E 
3593e     00 6E 00 6E 
35942     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35946     00 6E 00 6D 
3594a     00 6D 00 6D 
3594e     00 6D 00 6D 
35952     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35956     00 6D 00 6D 
3595a     00 6D 00 6D 
3595e     00 6D 00 6D 
35962     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35966     00 6D 00 6D 
3596a     00 6D 00 6D 
3596e     00 6D 00 6D 
35972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35976     00 6D 00 6D 
3597a     00 6D 00 6D 
3597e     00 6D 00 6D 
35982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35986     00 6D 00 6D 
3598a     00 6D 00 6D 
3598e     00 6D 00 6D 
35992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35996     00 6D 00 6D 
3599a     00 6D 00 6D 
3599e     00 6D 00 6D 
359a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359a6     00 6D 00 6D 
359aa     00 6D 00 6D 
359ae     00 6D 00 6D 
359b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359b6     00 6D 00 6D 
359ba     00 6D 00 6D 
359be     00 6D 00 6D 
359c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359c6     00 6D 00 6D 
359ca     00 6D 00 6D 
359ce     00 6D 00 6D 
359d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359d6     00 6D 00 6D 
359da     00 6D 00 6D 
359de     00 6D 00 6D 
359e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359e6     00 6D 00 6D 
359ea     00 6D 00 6D 
359ee     00 6D 00 6D 
359f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359f6     00 6D 00 6D 
359fa     00 6C 00 6C 
359fe     00 6C 00 6C 
35a02     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a06     00 6C 00 6C 
35a0a     00 6C 00 6C 
35a0e     00 6C 00 6C 
35a12     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a16     00 6C 00 6C 
35a1a     00 6C 00 6C 
35a1e     00 9D 00 9F 
35a22     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
35a26     00 9F 00 9F 
35a2a     00 9F 00 9F 
35a2e     00 A0 00 A0 
35a32     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a36     00 A0 00 A0 
35a3a     00 A0 00 A0 
35a3e     00 A0 00 A0 
35a42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a46     00 A0 00 A0 
35a4a     00 A0 00 A0 
35a4e     00 A0 00 A0 
35a52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a56     00 A0 00 A0 
35a5a     00 A0 00 A0 
35a5e     00 A0 00 A0 
35a62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a66     00 A0 00 A0 
35a6a     00 A0 00 A0 
35a6e     00 A0 00 A0 
35a72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a76     00 A0 00 A0 
35a7a     00 A0 00 A0 
35a7e     00 A0 00 A0 
35a82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a86     00 A0 00 A0 
35a8a     00 A0 00 A0 
35a8e     00 A0 00 A0 
35a92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a96     00 A0 00 A0 
35a9a     00 A0 00 A0 
35a9e     00 A0 00 A0 
35aa2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35aa6     01 00 00 00 
35aaa     00 00 00 00 
35aae     00 00 00 00 
35ab2     00 00 00 00 | mouse  file "mouse2.def"
35ab6     00 00 00 00 
35aba     00 00 00 00 
35abe     00 00 00 00 
35ac2     00 00 00 00 | 	byte	$00[16]
35ac6     01 01 00 00 
35aca     00 00 00 00 
35ace     00 00 00 00 
35ad2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ad6     00 00 00 00 
35ada     00 00 00 00 
35ade     00 00 00 00 
35ae2     00 00 00 00 | 	byte	$00[16]
35ae6     01 0D 01 00 
35aea     00 00 00 00 
35aee     00 00 00 00 
35af2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35af6     00 00 00 00 
35afa     00 00 00 00 
35afe     00 00 00 00 
35b02     00 00 00 00 | 	byte	$00[16]
35b06     01 0D 0D 01 
35b0a     00 00 00 00 
35b0e     00 00 00 00 
35b12     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b16     00 00 00 00 
35b1a     00 00 00 00 
35b1e     00 00 00 00 
35b22     00 00 00 00 | 	byte	$00[16]
35b26     01 0D 0D 0D 
35b2a     01 00 00 00 
35b2e     00 00 00 00 
35b32     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b36     00 00 00 00 
35b3a     00 00 00 00 
35b3e     00 00 00 00 
35b42     00 00 00 00 | 	byte	$00[16]
35b46     01 0D 0D 0D 
35b4a     0D 01 00 00 
35b4e     00 00 00 00 
35b52     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b56     00 00 00 00 
35b5a     00 00 00 00 
35b5e     00 00 00 00 
35b62     00 00 00 00 | 	byte	$00[16]
35b66     01 0D 0D 0D 
35b6a     0D 0D 01 00 
35b6e     00 00 00 00 
35b72     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b76     00 00 00 00 
35b7a     00 00 00 00 
35b7e     00 00 00 00 
35b82     00 00 00 00 | 	byte	$00[16]
35b86     01 0D 0D 0D 
35b8a     0D 0D 0D 01 
35b8e     00 00 00 00 
35b92     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
35b96     00 00 00 00 
35b9a     00 00 00 00 
35b9e     00 00 00 00 
35ba2     00 00 00 00 | 	byte	$00[16]
35ba6     01 0D 0D 0D 
35baa     0D 0D 0D 0C 
35bae     01 00 00 00 
35bb2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
35bb6     00 00 00 00 
35bba     00 00 00 00 
35bbe     00 00 00 00 
35bc2     00 00 00 00 | 	byte	$00[16]
35bc6     01 0D 0D 0D 
35bca     0D 0D 0D 0D 
35bce     0C 01 00 00 
35bd2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
35bd6     00 00 00 00 
35bda     00 00 00 00 
35bde     00 00 00 00 
35be2     00 00 00 00 | 	byte	$00[16]
35be6     01 0D 0D 0D 
35bea     0D 0D 0D 0D 
35bee     0D 0C 01 00 
35bf2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
35bf6     00 00 00 00 
35bfa     00 00 00 00 
35bfe     00 00 00 00 
35c02     00 00 00 00 | 	byte	$00[16]
35c06     01 0D 0D 0D 
35c0a     0D 0D 0D 0D 
35c0e     0D 0D 0B 01 
35c12     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
35c16     00 00 00 00 
35c1a     00 00 00 00 
35c1e     00 00 00 00 
35c22     00 00 00 00 | 	byte	$00[16]
35c26     01 0D 0D 0D 
35c2a     0C 0D 0D 03 
35c2e     01 01 01 01 
35c32     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
35c36     00 00 00 00 
35c3a     00 00 00 00 
35c3e     00 00 00 00 
35c42     00 00 00 00 | 	byte	$00[16]
35c46     01 0D 0D 0C 
35c4a     01 09 0D 03 
35c4e     00 00 00 00 
35c52     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
35c56     00 00 00 00 
35c5a     00 00 00 00 
35c5e     00 00 00 00 
35c62     00 00 00 00 | 	byte	$00[16]
35c66     01 0D 0C 01 
35c6a     00 01 0D 0B 
35c6e     01 00 00 00 
35c72     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
35c76     00 00 00 00 
35c7a     00 00 00 00 
35c7e     00 00 00 00 
35c82     00 00 00 00 | 	byte	$00[16]
35c86     01 0C 01 00 
35c8a     00 01 0A 0D 
35c8e     01 00 00 00 
35c92     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
35c96     00 00 00 00 
35c9a     00 00 00 00 
35c9e     00 00 00 00 
35ca2     00 00 00 00 | 	byte	$00[16]
35ca6     01 01 00 00 
35caa     00 00 01 0D 
35cae     0B 01 00 00 
35cb2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
35cb6     00 00 00 00 
35cba     00 00 00 00 
35cbe     00 00 00 00 
35cc2     00 00 00 00 
35cc6     00 00 00 00 
35cca     00 00       | 	byte	$00[22]
35ccc     01 0B 0D 01 
35cd0     00 00 00 00 
35cd4     00 00 00 00 
35cd8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35cdc     00 00 00 00 
35ce0     00 00 00 00 
35ce4     00 00 00 00 
35ce8     00 00 00 00 
35cec     00          | 	byte	$00[17]
35ced     01 01 00 00 
35cf1     00 00 00 00 
35cf5     00 00 00 00 
35cf9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35cfd     00 00 00 00 
      ...             
35ea1     00 00 00 00 
35ea5     00          | 	byte	$00[425]
35ea6                 | 
35ea6     00 00       |              	org
35ea8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
35eac 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
35eb0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
35eb4 003             | 
35eb4 003 00 30 04 F6 |                 mov     psramaddr,#0
35eb8 004             | 
35eb8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
35ebc 005 20 00 00 FF 
35ec0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
35ec4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
35ec8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
35ecc 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
35ed0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
35ed4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
35ed8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
35edc 00d             | 
35edc 00d 20 00 00 FF 
35ee0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
35ee4 00f E0 03 00 FF 
35ee8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
35eec 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
35ef0 012             | 
35ef0 012             |                 
35ef0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
35ef4 013             |     
35ef4 013 01 2C 60 FD |                 cogid 	t11				' get id
35ef8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
35efc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
35f00 016             | 
35f00 016 00 00 00 00 | t11 		long 	0
35f04 017 00 FF 07 00 | mailbox 	long 	$7FF00
35f08 018 00 00 00 00 | psramaddr 	long 	0
35f0c 019 00 00 00 00 | pslockval	long 	0
35f10 01a 00 00 00 00 | cmd             long    0
35f14 01b 00 00 00 00 | buf1            long    0
35f18 01c 00 40 00 00 | buf2            long    16384
35f1c 01d 20 5F 03 00 | 	long	@@@_dat_ + 12612
35f20 01e 50 32 20 52 
35f24 01f 65 74 72 6F 
35f28 020 6D 61 63 68 
35f2c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
35f30 022 42 41 53 49 
35f34 023 43 20 76 65 
35f38 024 72 73 69 6F 
35f3c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
35f40 026 34 39 20 62 
35f44 027 65 74 61 20 
35f48 028 33 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $33, $00, $00, $00
35f4c 029             | 	alignl
35f4c 029             | _hg010b_spin2_dat_
35f4c 029             | 
35f4c 029 00 00 00 00 
35f50 02a 00 00 00 00 
35f54 02b 00 00 00 00 
35f58 02c 00 00 00 00 
35f5c 02d 00 00 00    | vga_font       file "vgafont.def"
35f5f 02d 7E 81 A5 81 
35f63 02e 81 BD 99 81 
35f67 02f 81 7E 00 00 
35f6b 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
35f6f 031 7E FF DB FF 
35f73 032 FF C3 E7 FF 
35f77 033 FF 7E 00 00 
35f7b 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
35f7f 035 00 36 7F 7F 
35f83 036 7F 7F 3E 1C 
35f87 037 08 00 00 00 
35f8b 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
35f8f 039 00 08 1C 3E 
35f93 03a 7F 3E 1C 08 
35f97 03b 00 00 00 00 
35f9b 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
35f9f 03d 18 3C 3C E7 
35fa3 03e E7 E7 18 18 
35fa7 03f 3C 00 00 00 
35fab 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
35faf 041 18 3C 7E FF 
35fb3 042 FF 7E 18 18 
35fb7 043 3C 00 00 00 
35fbb 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
35fbf 045 00 00 00 18 
35fc3 046 3C 3C 18 00 
35fc7 047 00 00 00 00 
35fcb 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
35fcf 049 FF FF FF E7 
35fd3 04a C3 C3 E7 FF 
35fd7 04b FF FF FF FF 
35fdb 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
35fdf 04d 00 00 3C 66 
35fe3 04e 42 42 66 3C 
35fe7 04f 00 00 00 00 
35feb 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
35fef 051 FF FF C3 99 
35ff3 052 BD BD 99 C3 
35ff7 053 FF FF FF FF 
35ffb 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
35fff 055 78 70 58 4C 
36003 056 1E 33 33 33 
36007 057 33 1E 00 00 
3600b 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3600f 059 3C 66 66 66 
36013 05a 66 3C 18 7E 
36017 05b 18 18 00 00 
3601b 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3601f 05d FC CC FC 0C 
36023 05e 0C 0C 0C 0E 
36027 05f 0F 07 00 00 
3602b 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3602f 061 FE C6 FE C6 
36033 062 C6 C6 C6 E6 
36037 063 E7 67 03 00 
3603b 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3603f 065 18 18 DB 3C 
36043 066 E7 3C DB 18 
36047 067 18 00 00 00 
3604b 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3604f 069 03 07 0F 1F 
36053 06a 7F 1F 0F 07 
36057 06b 03 01 00 00 
3605b 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3605f 06d 60 70 78 7C 
36063 06e 7F 7C 78 70 
36067 06f 60 40 00 00 
3606b 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3606f 071 18 3C 7E 18 
36073 072 18 18 7E 3C 
36077 073 18 00 00 00 
3607b 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3607f 075 66 66 66 66 
36083 076 66 66 66    | 	byte	$66[7]
36086 077 00 66 66 00 
3608a 078 00 00 00 00 
3608e 079 00 FE DB DB 
36092 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36096 07b D8 D8 D8 00 
3609a 07c 00 00 00 3E 
3609e 07d 63 06 1C 36 
360a2 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
360a6 07f 30 63 3E 00 
360aa 080 00 00 00 00 
360ae 081 00 00 00 00 
360b2 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
360b6 083 7F 7F 7F 00 
360ba 084 00 00 00 00 
360be 085 00 18 3C 7E 
360c2 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
360c6 087 3C 18 7E 00 
360ca 088 00 00 00 00 
360ce 089 00 18 3C 7E 
360d2 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
360d6 08b 18 18 18 00 
360da 08c 00 00 00 00 
360de 08d 00 18 18 18 
360e2 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
360e6 08f 7E 3C 18 00 
360ea 090 00 00 00 00 
360ee 091 00 00 00 18 
360f2 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
360f6 093 00 00 00 00 
360fa 094 00 00 00 00 
360fe 095 00 00 00    | 	byte	$00[11]
36101 096 0C 06 7F 06 
36105 097 0C 00 00 00 
36109 098 00 00 00 00 
3610d 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36111 09a 00 03 03 03 
36115 09b 7F 00 00 00 
36119 09c 00 00 00 00 
3611d 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36121 09e 14 36 7F 36 
36125 09f 14 00 00 00 
36129 0a0 00 00 00 00 
3612d 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36131 0a2 1C 1C 3E 3E 
36135 0a3 7F 7F 00 00 
36139 0a4 00 00 00 00 
3613d 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36141 0a6 7F 3E 3E 1C 
36145 0a7 1C 08 00 00 
36149 0a8 00 00 00 00 
3614d 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36151 0aa 00 00 00 00 
36155 0ab 00 00 00 00 
36159 0ac 00 00 00 00 
3615d 0ad 00 00       | 	byte	$00[14]
3615f 0ad 18 3C 3C 3C 
36163 0ae 18 18 18 00 
36167 0af 18 18 00 00 
3616b 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3616f 0b1 66 24 00 00 
36173 0b2 00 00 00 00 
36177 0b3 00 00 00 00 
3617b 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3617f 0b5 00 36 36 7F 
36183 0b6 36 36 36 7F 
36187 0b7 36 36 00 00 
3618b 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3618f 0b9 3E 63 43 03 
36193 0ba 3E 60 60 61 
36197 0bb 63 3E 18 18 
3619b 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3619f 0bd 00 00 43 63 
361a3 0be 30 18 0C 06 
361a7 0bf 63 61 00 00 
361ab 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
361af 0c1 1C 36 36 1C 
361b3 0c2 6E 3B 33 33 
361b7 0c3 33 6E 00 00 
361bb 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
361bf 0c5 0C 0C 0C 06 
361c3 0c6 00 00 00 00 
361c7 0c7 00 00 00 00 
361cb 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361cf 0c9 30 18 0C 0C 
361d3 0ca 0C 0C 0C 0C 
361d7 0cb 18 30 00 00 
361db 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
361df 0cd 0C 18 30 30 
361e3 0ce 30 30 30 30 
361e7 0cf 18 0C 00 00 
361eb 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
361ef 0d1 00 00 00 66 
361f3 0d2 3C FF 3C 66 
361f7 0d3 00 00 00 00 
361fb 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
361ff 0d5 00 00 00 18 
36203 0d6 18 7E 18 18 
36207 0d7 00 00 00 00 
3620b 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3620f 0d9 00 00 00 00 
36213 0da 00 00 00 00 | 	byte	$00[8]
36217 0db 18 18 18 0C 
3621b 0dc 00 00 00 00 
3621f 0dd 00 00 00 00 
36223 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36227 0df 00 00 00 00 
3622b 0e0 00 00 00 00 
3622f 0e1 00 00 00 00 
36233 0e2 00 00 00 00 | 	byte	$00[16]
36237 0e3 18 18 00 00 
3623b 0e4 00 00 00 00 
3623f 0e5 00 00 40 60 
36243 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36247 0e7 03 01 00 00 
3624b 0e8 00 00 00 00 
3624f 0e9 1C 36 63 63 
36253 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36257 0eb 36 1C 00 00 
3625b 0ec 00 00 00 00 
3625f 0ed 18 1C 1E 18 
36263 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36267 0ef 18 7E 00 00 
3626b 0f0 00 00 00 00 
3626f 0f1 3E 63 60 30 
36273 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36277 0f3 63 7F 00 00 
3627b 0f4 00 00 00 00 
3627f 0f5 3E 63 60 60 
36283 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36287 0f7 63 3E 00 00 
3628b 0f8 00 00 00 00 
3628f 0f9 30 38 3C 36 
36293 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36297 0fb 30 78 00 00 
3629b 0fc 00 00 00 00 
3629f 0fd 7F 03 03 03 
362a3 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
362a7 0ff 63 3E 00 00 
362ab 100 00 00 00 00 
362af 101 1C 06 03 03 
362b3 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
362b7 103 63 3E 00 00 
362bb 104 00 00 00 00 
362bf 105 7F 63 60 60 
362c3 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
362c7 107 0C 0C 00 00 
362cb 108 00 00 00 00 
362cf 109 3E 63 63 63 
362d3 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
362d7 10b 63 3E 00 00 
362db 10c 00 00 00 00 
362df 10d 3E 63 63 63 
362e3 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
362e7 10f 30 1E 00 00 
362eb 110 00 00 00 00 
362ef 111 00 00 00 18 
362f3 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
362f7 113 18 18 00 00 
362fb 114 00 00 00 00 
362ff 115 00 00 00 18 
36303 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36307 117 18 18 0C 00 
3630b 118 00 00 00 00 
3630f 119 00 60 30 18 
36313 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36317 11b 30 60 00 00 
3631b 11c 00 00 00 00 
3631f 11d 00 00 00 7E 
36323 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36327 11f 00 00 00 00 
3632b 120 00 00 00 00 
3632f 121 00          | 	byte	$00[9]
36330 122 06 0C 18 30 
36334 123 60 30 18 0C 
36338 124 06 00 00 00 
3633c 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36340 126 63 63 30 18 
36344 127 18 18 00 18 
36348 128 18 00 00 00 
3634c 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36350 12a 3E 63 63 7B 
36354 12b 7B 7B 3B 03 
36358 12c 3E 00 00 00 
3635c 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36360 12e 1C 36 63 63 
36364 12f 7F 63 63 63 
36368 130 63 00 00 00 
3636c 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36370 132 66 66 66 3E 
36374 133 66 66 66 66 
36378 134 3F 00 00 00 
3637c 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36380 136 66 43 03 03 
36384 137 03 03 43 66 
36388 138 3C 00 00 00 
3638c 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36390 13a 36 66 66 66 
36394 13b 66 66 66 36 
36398 13c 1F 00 00 00 
3639c 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
363a0 13e 66 46 16 1E 
363a4 13f 16 06 46 66 
363a8 140 7F 00 00 00 
363ac 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
363b0 142 66 46 16 1E 
363b4 143 16 06 06 06 
363b8 144 0F 00 00 00 
363bc 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
363c0 146 66 43 03 03 
363c4 147 7B 63 63 66 
363c8 148 5C 00 00 00 
363cc 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
363d0 14a 63 63 63 7F 
363d4 14b 63 63 63 63 
363d8 14c 63 00 00 00 
363dc 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
363e0 14e 18 18 18 18 
363e4 14f 18 18 18 18 | 	byte	$18[8]
363e8 150 3C 00 00 00 
363ec 151 00 00 00 78 
363f0 152 30 30 30 30 
363f4 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
363f8 154 1E 00 00 00 
363fc 155 00 00 00 67 
36400 156 66 66 36 1E 
36404 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36408 158 67 00 00 00 
3640c 159 00 00 00 0F 
36410 15a 06 06 06 06 
36414 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36418 15c 7F 00 00 00 
3641c 15d 00 00 00 63 
36420 15e 77 7F 7F 6B 
36424 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36428 160 63 00 00 00 
3642c 161 00 00 00 63 
36430 162 67 6F 7F 7B 
36434 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36438 164 63 00 00 00 
3643c 165 00 00 00 3E 
36440 166 63 63 63 63 
36444 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36448 168 3E 00 00 00 
3644c 169 00 00 00 3F 
36450 16a 66 66 66 3E 
36454 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36458 16c 0F 00 00 00 
3645c 16d 00 00 00 3E 
36460 16e 63 63 63 63 
36464 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36468 170 3E 30 70 00 
3646c 171 00 00 00 3F 
36470 172 66 66 66 3E 
36474 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36478 174 67 00 00 00 
3647c 175 00 00 00 3E 
36480 176 63 63 06 1C 
36484 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36488 178 3E 00 00 00 
3648c 179 00 00 00 7E 
36490 17a 7E 5A 18 18 
36494 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36498 17c 3C 00 00 00 
3649c 17d 00 00 00 63 
364a0 17e 63 63 63 63 
364a4 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
364a8 180 3E 00 00 00 
364ac 181 00 00 00 63 
364b0 182 63 63 63 63 
364b4 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
364b8 184 08 00 00 00 
364bc 185 00 00 00 63 
364c0 186 63 63 63 6B 
364c4 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
364c8 188 36 00 00 00 
364cc 189 00 00 00 63 
364d0 18a 63 36 3E 1C 
364d4 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
364d8 18c 63 00 00 00 
364dc 18d 00 00 00 66 
364e0 18e 66 66 66 3C 
364e4 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
364e8 190 3C 00 00 00 
364ec 191 00 00 00 7F 
364f0 192 63 61 30 18 
364f4 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
364f8 194 7F 00 00 00 
364fc 195 00 00 00 3C 
36500 196 0C 0C 0C 0C 
36504 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
36508 198 3C 00 00 00 
3650c 199 00 00 00 00 
36510 19a 01 03 07 0E 
36514 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
36518 19c 40 00 00 00 
3651c 19d 00 00 00 3C 
36520 19e 30 30 30 30 
36524 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
36528 1a0 3C 00 00 00 
3652c 1a1 1C 36 00 00 
36530 1a2 00 00 00 00 
36534 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36538 1a4 00 00 00 00 
3653c 1a5 00 00 00 00 
36540 1a6 00 00 00 00 
36544 1a7 00 00 00 00 
36548 1a8 00          | 	byte	$00[17]
36549 1a8 FF 00 00 0C 
3654d 1a9 18 00 00 00 
36551 1aa 00 00 00 00 
36555 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36559 1ac 00 00 00 00 
3655d 1ad 00 00 00 00 
36561 1ae 00          | 	byte	$00[9]
36562 1ae 1E 30 3E 33 
36566 1af 33 33 6E 00 
3656a 1b0 00 00 00 00 
3656e 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
36572 1b2 1E 36 66 66 
36576 1b3 66 66 3E 00 
3657a 1b4 00 00 00 00 
3657e 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36582 1b6 3E 63 03 03 
36586 1b7 03 63 3E 00 
3658a 1b8 00 00 00 00 
3658e 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
36592 1ba 3C 36 33 33 
36596 1bb 33 33 6E 00 
3659a 1bc 00 00 00 00 
3659e 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
365a2 1be 3E 63 7F 03 
365a6 1bf 03 63 3E 00 
365aa 1c0 00 00 00 00 
365ae 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
365b2 1c2 0C 1E 0C 0C 
365b6 1c3 0C 0C 1E 00 
365ba 1c4 00 00 00 00 
365be 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
365c2 1c6 6E 33 33 33 
365c6 1c7 33 33 3E 30 
365ca 1c8 33 1E 00 00 
365ce 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
365d2 1ca 36 6E 66 66 
365d6 1cb 66 66 67 00 
365da 1cc 00 00 00 00 
365de 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
365e2 1ce 1C 18 18 18 
365e6 1cf 18 18 3C 00 
365ea 1d0 00 00 00 00 
365ee 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
365f2 1d2 70 60 60 60 
365f6 1d3 60 60 60 66 
365fa 1d4 66 3C 00 00 
365fe 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
36602 1d6 66 36 1E 1E 
36606 1d7 36 66 67 00 
3660a 1d8 00 00 00 00 
3660e 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
36612 1da 18 18 18 18 
36616 1db 18 18       | 	byte	$18[6]
36618 1dc 3C 00 00 00 
3661c 1dd 00 00 00 00 
36620 1de 00 00 37 7F 
36624 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
36628 1e0 63 00 00 00 
3662c 1e1 00 00 00 00 
36630 1e2 00 00 3B 66 
36634 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36638 1e4 66 00 00 00 
3663c 1e5 00 00 00 00 
36640 1e6 00 00 3E 63 
36644 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36648 1e8 3E 00 00 00 
3664c 1e9 00 00 00 00 
36650 1ea 00 00 3B 66 
36654 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36658 1ec 3E 06 06 0F 
3665c 1ed 00 00 00 00 
36660 1ee 00 00 6E 33 
36664 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
36668 1f0 3E 30 30 78 
3666c 1f1 00 00 00 00 
36670 1f2 00 00 3B 6E 
36674 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
36678 1f4 0F 00 00 00 
3667c 1f5 00 00 00 00 
36680 1f6 00 00 3E 63 
36684 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
36688 1f8 3E 00 00 00 
3668c 1f9 00 00 00 08 
36690 1fa 0C 0C 3F 0C 
36694 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36698 1fc 38 00 00 00 
3669c 1fd 00 00 00 00 
366a0 1fe 00 00 33 33 
366a4 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
366a8 200 6E 00 00 00 
366ac 201 00 00 00 00 
366b0 202 00 00 63 63 
366b4 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
366b8 204 1C 00 00 00 
366bc 205 00 00 00 00 
366c0 206 00 00 63 63 
366c4 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
366c8 208 36 00 00 00 
366cc 209 00 00 00 00 
366d0 20a 00 00 63 36 
366d4 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
366d8 20c 63 00 00 00 
366dc 20d 00 00 00 00 
366e0 20e 00 00 63 63 
366e4 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
366e8 210 7E 60 30 1F 
366ec 211 00 00 00 00 
366f0 212 00 00 7F 33 
366f4 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
366f8 214 7F 00 00 00 
366fc 215 00 00 00 70 
36700 216 18 18 18 0E 
36704 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
36708 218 70 00 00 00 
3670c 219 00 00 00 18 
36710 21a 18 18 18 18 
36714 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
36718 21c 18 00 00 00 
3671c 21d 00 00 00 0E 
36720 21e 18 18 18 70 
36724 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
36728 220 0E 00 00 00 
3672c 221 6E 3B 00 00 
36730 222 00 00 00 00 
36734 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36738 224 00 00 00 00 
3673c 225 00 00 00 00 
36740 226 00 00       | 	byte	$00[10]
36742 226 08 1C 36 63 
36746 227 63 63 7F 00 
3674a 228 00 00 00 00 
3674e 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
36752 22a 03 03 03 03 
36756 22b 43 66 3C 18 
3675a 22c 30 1E 00 00 
3675e 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
36762 22e 33 33 33 33 
36766 22f 33 33       | 	byte	$33[6]
36768 230 6E 00 00 00 
3676c 231 00 00 60 30 
36770 232 18 00 3E 63 
36774 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
36778 234 3E 00 00 00 
3677c 235 00 00 08 1C 
36780 236 36 00 1E 30 
36784 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
36788 238 6E 00 00 00 
3678c 239 00 00 00 00 
36790 23a 33 00 1E 30 
36794 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
36798 23c 6E 00 00 00 
3679c 23d 00 00 1C 36 
367a0 23e 1C 00 33 33 
367a4 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
367a8 240 6E 00 00 00 
367ac 241 00 00 60 30 
367b0 242 18 00 3E 63 
367b4 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
367b8 244 3E 00 00 00 
367bc 245 00 00 00 00 
367c0 246 00 00 3E 63 
367c4 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
367c8 248 3E 18 30 1E 
367cc 249 00 00 00 1C 
367d0 24a 58 78 38 18 
367d4 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
367d8 24c 3C 00 00 00 
367dc 24d 00 00 00 00 
367e0 24e 63 00 3E 63 
367e4 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
367e8 250 3E 00 00 00 
367ec 251 66 33 00 3E 
367f0 252 63 63 63 63 
367f4 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
367f8 254 3E 00 00 00 
367fc 255 00 00 CC 66 
36800 256 33 00 3E 63 
36804 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
36808 258 3E 00 00 00 
3680c 259 00 00 18 3C 
36810 25a 66 00 1C 18 
36814 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
36818 25c 3C 00 00 00 
3681c 25d 30 18 00 7F 
36820 25e 63 61 30 18 
36824 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36828 260 7F 00 00 00 
3682c 261 00 63 00 08 
36830 262 1C 36 63 63 
36834 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
36838 264 63 00 00 00 
3683c 265 30 18 00 3C 
36840 266 66 43 03 03 
36844 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
36848 268 3C 00 00 00 
3684c 269 30 18 00 7F 
36850 26a 66 46 16 1E 
36854 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
36858 26c 7F 00 00 00 
3685c 26d 0C 06 00 0F 
36860 26e 06 06 06 06 
36864 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36868 270 7F 00 00 00 
3686c 271 30 18 00 1C 
36870 272 18 18 18 18 
36874 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
36878 274 3C 00 00 00 
3687c 275 00 00 08 1C 
36880 276 36 00 3E 63 
36884 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
36888 278 3E 00 00 00 
3688c 279 00 00 00 00 
36890 27a 63 00 3E 63 
36894 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
36898 27c 3E 00 00 00 
3689c 27d 00 00 00 6F 
368a0 27e 46 26 06 06 
368a4 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
368a8 280 7F 00 00 00 
368ac 281 00 00 00 6E 
368b0 282 4C 2C 0C 0C 
368b4 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
368b8 284 1E 00 00 00 
368bc 285 30 18 00 3E 
368c0 286 63 63 06 1C 
368c4 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
368c8 288 3E 00 00 00 
368cc 289 00 00 60 30 
368d0 28a 18 00 3E 63 
368d4 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
368d8 28c 3E 00 00 00 
368dc 28d 00 63 00 3E 
368e0 28e 63 63 63 63 
368e4 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
368e8 290 3E 00 00 00 
368ec 291 00 63 00 63 
368f0 292 63 63 63 63 
368f4 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
368f8 294 3E 00 00 00 
368fc 295 6C 38 00 7E 
36900 296 7E 5A 18 18 
36904 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36908 298 3C 00 00 00 
3690c 299 00 00 60 48 
36910 29a 2C 0C 3F 0C 
36914 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36918 29c 38 00 00 00 
3691c 29d 00 00 00 0F 
36920 29e 26 36 1E 0E 
36924 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
36928 2a0 7F 00 00 00 
3692c 2a1 00 00 00 00 
36930 2a2 00 63 36 1C 
36934 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
36938 2a4 00 00 00 00 
3693c 2a5 00 00       | 	byte	$00[6]
3693e 2a5 36 1C 08 00 
36942 2a6 3E 63 03 03 
36946 2a7 03 63 3E 00 
3694a 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3694e 2a9 30 18 0C 00 
36952 2aa 1E 30 3E 33 
36956 2ab 33 33 6E 00 
3695a 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3695e 2ad 60 30 18 00 
36962 2ae 1C 18 18 18 
36966 2af 18 18 3C 00 
3696a 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3696e 2b1 60 30 18 00 
36972 2b2 3E 63 63 63 
36976 2b3 63 63 3E 00 
3697a 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3697e 2b5 30 18 0C 00 
36982 2b6 33 33 33 33 
36986 2b7 33 33 6E 00 
3698a 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3698e 2b9 00 08 1C 36 
36992 2ba 63 63 7F 63 
36996 2bb 63 63 63 18 
3699a 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3699e 2bd 00 00 00 00 
369a2 2be 1E 30 3E 33 
369a6 2bf 33 33 6E 18 
369aa 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
369ae 2c1 00 7F 63 61 
369b2 2c2 30 18 0C 06 
369b6 2c3 43 63 7F 00 
369ba 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
369be 2c5 36 1C 08 00 
369c2 2c6 7F 33 18 0C 
369c6 2c7 06 63 7F 00 
369ca 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
369ce 2c9 00 7F 66 46 
369d2 2ca 16 1E 16 06 
369d6 2cb 46 66 7F 18 
369da 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
369de 2cd 00 00 00 00 
369e2 2ce 3E 63 7F 03 
369e6 2cf 03 63 3E 18 
369ea 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
369ee 2d1 00 3C 66 03 
369f2 2d2 1F 03 0F 03 
369f6 2d3 03 66 3C 00 
369fa 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
369fe 2d5 60 30 18 00 
36a02 2d6 7F 33 18 0C 
36a06 2d7 06 63 7F 00 
36a0a 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
36a0e 2d9 00 3C 66 43 
36a12 2da 03 03 03 03 
36a16 2db 43 66 3C 00 
36a1a 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
36a1e 2dd 00 00 00 00 
36a22 2de 3E 63 06 1C 
36a26 2df 30 63 3E 18 
36a2a 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
36a2e 2e1 00 00 00 00 
36a32 2e2 00 00       | 	byte	$00[6]
36a34 2e3 6C 36 1B 36 
36a38 2e4 6C 00 00 00 
36a3c 2e5 00 00 00 00 
36a40 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a44 2e7 1B 36 6C 36 
36a48 2e8 1B 00 00 00 
36a4c 2e9 88 22 88 22 
36a50 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
36a54 2eb 88 22 88 22 
36a58 2ec 88 22 88 22 
36a5c 2ed AA 55 AA 55 
36a60 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
36a64 2ef AA 55 AA 55 
36a68 2f0 AA 55 AA 55 
36a6c 2f1 BB EE BB EE 
36a70 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
36a74 2f3 BB EE BB EE 
36a78 2f4 BB EE BB EE 
36a7c 2f5 18 18 18 18 
36a80 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
36a84 2f7 18 18 18 18 
36a88 2f8 18 18 18 18 
36a8c 2f9 18 18 18 18 
36a90 2fa 18 18 18    | 	byte	$18[15]
36a93 2fa 1F 18 18 18 
36a97 2fb 18 18 18 18 
36a9b 2fc 18 30 18 00 
36a9f 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
36aa3 2fe 63 7F 63 63 
36aa7 2ff 63 63 00 00 
36aab 300 00 1C 36 00 
36aaf 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
36ab3 302 63 7F 63 63 
36ab7 303 63 63 00 00 
36abb 304 00 36 1C 00 
36abf 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
36ac3 306 1E 16 06 46 
36ac7 307 66 7F 00 00 
36acb 308 00 00 00 00 
36acf 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
36ad3 30a 1C 30 60 63 
36ad7 30b 63 3E 18 30 
36adb 30c 1E 6C 6C 6C 
36adf 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
36ae3 30e 6F 6C 6C 6C 
36ae7 30f 6C 6C 6C 6C 
36aeb 310 6C 6C 6C 6C 
36aef 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36af3 312 6C 6C 6C 6C 
36af7 313 6C 6C 6C 6C 
36afb 314 6C          | 	byte	$6c[9]
36afc 315 00 00 00 00 
36b00 316 00          | 	byte	$00[5]
36b01 316 7F 60 6F 6C 
36b05 317 6C 6C 6C 6C 
36b09 318 6C 6C 6C 6C 
36b0d 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36b11 31a 6F 60 7F 00 
36b15 31b 00 00 00 00 
36b19 31c 00 00 00 18 
36b1d 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
36b21 31e 61 30 18 0C 
36b25 31f 06 43 63 7F 
36b29 320 00 00 00 00 
36b2d 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
36b31 322 00 7F 33 18 
36b35 323 0C 06 63 7F 
36b39 324 00 00 00 00 
36b3d 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
36b41 326 00 00 1F 18 
36b45 327 18 18 18 18 
36b49 328 18 18 18 18 
36b4d 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36b51 32a 18 18 F8 00 
36b55 32b 00 00 00 00 
36b59 32c 00 00 00 18 
36b5d 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
36b61 32e 18 18 FF 00 
36b65 32f 00 00 00 00 
36b69 330 00 00 00 00 
36b6d 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b71 332 00 00 FF 18 
36b75 333 18 18 18 18 
36b79 334 18 18 18 18 
36b7d 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36b81 336 18 18 F8 18 
36b85 337 18 18 18 18 
36b89 338 18 18 18 00 
36b8d 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36b91 33a 00 00 FF 00 
36b95 33b 00 00 00 00 
36b99 33c 00 00 00 18 
36b9d 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
36ba1 33e 18 18 FF 18 
36ba5 33f 18 18 18 18 
36ba9 340 18 18 18 63 
36bad 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
36bb1 342 36 63 63 7F 
36bb5 343 63 63 63 63 
36bb9 344 00 00 00 00 
36bbd 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
36bc1 346 00 1E 30 3E 
36bc5 347 33 33 33 6E 
36bc9 348 00 00 00 6C 
36bcd 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
36bd1 34a EC 0C FC 00 
36bd5 34b 00 00 00 00 
36bd9 34c 00 00 00 00 
36bdd 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36be1 34e FC 0C EC 6C 
36be5 34f 6C 6C 6C 6C 
36be9 350 6C 6C 6C 6C 
36bed 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36bf1 352 EF 00 FF 00 
36bf5 353 00 00 00 00 
36bf9 354 00 00 00 00 
36bfd 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36c01 356 FF 00 EF 6C 
36c05 357 6C 6C 6C 6C 
36c09 358 6C 6C 6C 6C 
36c0d 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36c11 35a EC 0C EC 6C 
36c15 35b 6C 6C 6C 6C 
36c19 35c 6C 6C 6C 00 
36c1d 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
36c21 35e FF 00 FF 00 
36c25 35f 00 00 00 00 
36c29 360 00 00 00 6C 
36c2d 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
36c31 362 EF 00 EF 6C 
36c35 363 6C 6C 6C 6C 
36c39 364 6C 6C 6C 00 
36c3d 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
36c41 366 63 3E 63 63 
36c45 367 63 63 3E 63 
36c49 368 00 00 00 00 
36c4d 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
36c51 36a 30 3C 36 33 
36c55 36b 33 33 33 6E 
36c59 36c 00 00 00 00 
36c5d 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
36c61 36e 66 66 6F 66 
36c65 36f 66 66 36 1F 
36c69 370 00 00 00 36 
36c6d 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
36c71 372 66 66 66 66 
36c75 373 66 66       | 	byte	$66[6]
36c77 373 36 1F 00 00 
36c7b 374 00 00 63 00 
36c7f 375 7F 66 46 16 
36c83 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
36c87 377 66 7F 00 00 
36c8b 378 00 6C 38 00 
36c8f 379 38 30 30 3C 
36c93 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
36c97 37b 33 6E 00 00 
36c9b 37c 00 36 1C 00 
36c9f 37d 63 67 6F 7F 
36ca3 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
36ca7 37f 63 63 00 00 
36cab 380 00 30 18 00 
36caf 381 3C 18 18 18 
36cb3 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
36cb7 383 18 3C 00 00 
36cbb 384 00 3C 66 00 
36cbf 385 3C 18 18 18 
36cc3 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
36cc7 387 18 3C 00 00 
36ccb 388 00 00 00 36 
36ccf 389 1C 08 00 3E 
36cd3 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
36cd7 38b 63 3E 00 00 
36cdb 38c 00 18 18 18 
36cdf 38d 18 18 18 18 
36ce3 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
36ce7 38f 00 00 00 00 
36ceb 390 00 00 00 00 
36cef 391 00 00 00 00 | 	byte	$00[12]
36cf3 392 F8 18 18 18 
36cf7 393 18 18 18 18 
36cfb 394 18 FF FF FF 
36cff 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
36d03 396 FF FF FF FF 
36d07 397 FF FF FF FF 
36d0b 398 FF          | 	byte	$ff[9]
36d0c 399 00 00 00 00 
36d10 39a 00 00 00    | 	byte	$00[7]
36d13 39a FF FF FF FF 
36d17 39b FF FF FF FF 
36d1b 39c FF          | 	byte	$ff[9]
36d1c 39d 00 00 00 7E 
36d20 39e 7E 5A 18 18 
36d24 39f 18 18 18 18 
36d28 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
36d2c 3a1 1C 36 1C 63 
36d30 3a2 63 63 63 63 
36d34 3a3 63 63 63 63 
36d38 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36d3c 3a5 FF FF FF FF 
36d40 3a6 FF FF FF    | 	byte	$ff[7]
36d43 3a6 00 00 00 00 
36d47 3a7 00 00 00 00 
36d4b 3a8 00          | 	byte	$00[9]
36d4c 3a9 30 18 00 3E 
36d50 3aa 63 63 63 63 
36d54 3ab 63 63 63 63 
36d58 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36d5c 3ad 00 00 00 1E 
36d60 3ae 33 33 33 1B 
36d64 3af 33 63 63 63 
36d68 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
36d6c 3b1 1C 36 00 3E 
36d70 3b2 63 63 63 63 
36d74 3b3 63 63 63 63 
36d78 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36d7c 3b5 30 18 00 63 
36d80 3b6 67 6F 7F 7B 
36d84 3b7 73 63 63 63 
36d88 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
36d8c 3b9 00 00 60 30 
36d90 3ba 18 00 3B 66 
36d94 3bb 66 66 66 66 
36d98 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
36d9c 3bd 00 00 36 1C 
36da0 3be 08 00 3B 66 
36da4 3bf 66 66 66 66 
36da8 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
36dac 3c1 36 1C 00 3E 
36db0 3c2 63 63 06 1C 
36db4 3c3 30 60 63 63 
36db8 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
36dbc 3c5 00 00 36 1C 
36dc0 3c6 08 00 3E 63 
36dc4 3c7 06 1C 30 63 
36dc8 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
36dcc 3c9 30 18 00 3F 
36dd0 3ca 66 66 66 3E 
36dd4 3cb 36 66 66 66 
36dd8 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
36ddc 3cd 30 18 00 63 
36de0 3ce 63 63 63 63 
36de4 3cf 63 63 63 63 
36de8 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36dec 3d1 00 00 60 30 
36df0 3d2 18 00 3B 6E 
36df4 3d3 66 06 06 06 
36df8 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
36dfc 3d5 66 33 00 63 
36e00 3d6 63 63 63 63 
36e04 3d7 63 63 63 63 
36e08 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36e0c 3d9 00 00 60 30 
36e10 3da 18 00 63 63 
36e14 3db 63 63 63 63 
36e18 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
36e1c 3dd 30 18 00 66 
36e20 3de 66 66 66 3C 
36e24 3df 18 18 18 18 
36e28 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
36e2c 3e1 00 00 00 08 
36e30 3e2 0C 0C 3F 0C 
36e34 3e3 0C 0C 0C 6C 
36e38 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
36e3c 3e5 30 18 00 00 
36e40 3e6 00 00 00 00 
36e44 3e7 00 00 00 00 
36e48 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e4c 3e9 00 00 00 00 
36e50 3ea 00 00 00 00 | 	byte	$00[8]
36e54 3eb 7F 00 00 00 
36e58 3ec 00 00 00 00 
36e5c 3ed 66 33 00 00 
36e60 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
36e64 3ef 00 00 00 00 
36e68 3f0 00 00 00 00 
36e6c 3f1 00 00 00 00 
36e70 3f2 00 00 00 00 
36e74 3f3 00 00 00 00 
36e78 3f4 00          | 	byte	$00[21]
36e79 3f4 0C 06 3C 36 
36e7d 3f5 1C 00 00 00 
36e81 3f6 00 00 00 00 
36e85 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e89 3f8 00 00 00 63 
36e8d 3f9 3E 00 00 00 
36e91 3fa 00 00 00 00 
36e95 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e99 3fc 00 00 00 00 
36e9d 3fd 3E 63 06 1C 
36ea1 3fe 36 63 63 36 
36ea5 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
36ea9 400 00 00 00 00 
36ead 401 00 00 00 00 | 	byte	$00[8]
36eb1 402 18 00 7E 00 
36eb5 403 18 00 00 00 
36eb9 404 00 00 00 00 
36ebd 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ec1 406 00 00 00 00 
36ec5 407 00 00 00 00 | 	byte	$00[8]
36ec9 408 18 30 1E 00 
36ecd 409 00 00 1C 36 
36ed1 40a 36 1C 00 00 
36ed5 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
36ed9 40c 00 00 00 00 
36edd 40d 63 00 00 00 
36ee1 40e 00 00 00 00 
36ee5 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ee9 410 00 00 00 18 
36eed 411 18 00 00 00 
36ef1 412 00 00 00 00 
36ef5 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ef9 414 00 00 00 00 
36efd 415 00          | 	byte	$00[5]
36efe 415 CC 66 33 00 
36f02 416 33 33 33 33 
36f06 417 33 33 6E 00 
36f0a 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
36f0e 419 00 3F 66 66 
36f12 41a 66 3E 36 66 
36f16 41b 66 66 6F 00 
36f1a 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
36f1e 41d 36 1C 08 00 
36f22 41e 3B 6E 66 06 
36f26 41f 06 06 0F 00 
36f2a 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
36f2e 421 00 00 00 7E 
36f32 422 7E 7E 7E 7E 
36f36 423 7E 7E 00 00 
36f3a 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
36f3e 425 00 00 00 00 
36f42 426 00 00 00 00 
36f46 427 00 00 00 00 
36f4a 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f4c 429 00 00 00 00 
      ...             
36f7c 435 00 00 00 00 
36f80 436 00 00 00    | st_font        file "st4font.def"
36f83 436 FF FF 00 00 
36f87 437 00 00 00 00 
36f8b 438 00 18 18 18 
36f8f 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36f93 43a 18 18 18 18 
36f97 43b 18 18 18 18 
36f9b 43c 18          | 	byte	$18[9]
36f9c 43d 00 00 00 00 
36fa0 43e 00 00 00    | 	byte	$00[7]
36fa3 43e FF FF 18 18 
36fa7 43f 18 18 18 18 
36fab 440 18 18 18 18 
36faf 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36fb3 442 FF FF 00 00 
36fb7 443 00 00 00 00 
36fbb 444 00 18 18 18 
36fbf 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36fc3 446 1F 1F 18 18 
36fc7 447 18 18 18 18 
36fcb 448 18 18 18 18 
36fcf 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36fd3 44a F8 F8 18 18 
36fd7 44b 18 18 18 18 
36fdb 44c 18 00 00 00 
36fdf 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36fe3 44e 1F 1F 18 18 
36fe7 44f 18 18 18 18 
36feb 450 18 00 00 00 
36fef 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36ff3 452 F8 F8 18 18 
36ff7 453 18 18 18 18 
36ffb 454 18 18 18 18 
36fff 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37003 456 1F 1F 00 00 
37007 457 00 00 00 00 
3700b 458 00 18 18 18 
3700f 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37013 45a F8 F8 00 00 
37017 45b 00 00 00 00 
3701b 45c 00 18 18 18 
3701f 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37023 45e FF FF 18 18 
37027 45f 18 18 18 18 
3702b 460 18 00 00 18 
3702f 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
37033 462 66 7E 7E 66 
37037 463 66 66 66 30 
3703b 464 18 00 00 7E 
3703f 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
37043 466 3E 06 06 06 
37047 467 06 7E 7E 18 
3704b 468 0C 30 18 3C 
3704f 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
37053 46a 06 06 06 66 
37057 46b 66 7E 3C 00 
3705b 46c 00 30 18 66 
3705f 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
37063 46e 7E 7E 76 76 
37067 46f 66 66 66 00 
3706b 470 00 30 18 7C 
3706f 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
37073 472 1C 38 70 60 
37077 473 60 7E 3E 00 
3707b 474 00 30 18 7E 
3707f 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37083 476 18 0C 0C 06 
37087 477 06 7E 7E 00 
3708b 478 00 18 18 00 
3708f 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37093 47a 18 18 0C 0C 
37097 47b 06 7E 7E 00 
3709b 47c 00 30 18 3C 
3709f 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
370a3 47e 66 66 66 66 
370a7 47f 66          | 	byte	$66[5]
370a8 480 7E 3C 00 00 
370ac 481 00 00 06 06 
370b0 482 06 06 16 1E 
370b4 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
370b8 484 7E 7E 00 00 
370bc 485 00 00 00 00 
370c0 486 00 3C 7C 60 
370c4 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
370c8 488 7E 7C 30 18 
370cc 489 00 00 00 00 
370d0 48a 00 3C 7E 66 
370d4 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
370d8 48c 7E 7C 18 0C 
370dc 48d 00 00 30 18 
370e0 48e 00 3C 3E 06 
370e4 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
370e8 490 7E 7C 00 00 
370ec 491 00 00 30 18 
370f0 492 00 3E 7E 66 
370f4 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
370f8 494 66 66 00 00 
370fc 495 00 00 30 18 
37100 496 00 7C 7E 06 
37104 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37108 498 7E 3E 00 00 
3710c 499 00 00 30 18 
37110 49a 00 7E 7E 30 
37114 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37118 49c 7E 7E 00 00 
3711c 49d 00 00 18 18 
37120 49e 00 7E 7E 30 
37124 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37128 4a0 7E 7E 00 00 
3712c 4a1 00 00 30 18 
37130 4a2 00 3C 7E 66 
37134 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37138 4a4 7E 3C 00 00 
3713c 4a5 00 00 1C 1C 
37140 4a6 18 18 38 3C 
37144 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37148 4a8 3C 3C 00 00 
3714c 4a9 00 00 00 00 
37150 4aa 00 00 00 00 
37154 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37158 4ac 00 00 00 00 
3715c 4ad 00 00       | 	byte	$00[6]
3715e 4ad 18 18 18 18 
37162 4ae 18 18 18 18 | 	byte	$18[8]
37166 4af 00 00 18 18 
3716a 4b0 00 00 00 00 
3716e 4b1 66 66 66 66 
37172 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37176 4b3 00 00 00 00 
3717a 4b4 00 00 00 00 
3717e 4b5 00          | 	byte	$00[9]
3717f 4b5 66 66 FF FF 
37183 4b6 66 66 FF FF 
37187 4b7 66 66 00 00 
3718b 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3718f 4b9 7C 7E 06 06 
37193 4ba 3E 7C 60 60 
37197 4bb 7E 3E 18 18 
3719b 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3719f 4bd 66 30 30 18 
371a3 4be 18 0C 0C 66 
371a7 4bf 66 00 00 00 
371ab 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
371af 4c1 66 66 3C 1C 
371b3 4c2 1C FC FE 66 
371b7 4c3 66 FE FC 00 
371bb 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
371bf 4c5 18 18 18 18 
371c3 4c6 00 00 00 00 
371c7 4c7 00 00 00 00 
371cb 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
371cf 4c9 18 1C 0C 0C 
371d3 4ca 0C 0C 0C 0C 
371d7 4cb 1C 18 30 00 
371db 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
371df 4cd 18 38 30 30 
371e3 4ce 30 30 30 30 
371e7 4cf 38 18 0C 00 
371eb 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
371ef 4d1 66 66 3C 3C 
371f3 4d2 FF FF 3C 3C 
371f7 4d3 66 66 00 00 
371fb 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
371ff 4d5 00 18 18 18 
37203 4d6 7E 7E 18 18 
37207 4d7 18 00 00 00 
3720b 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3720f 4d9 00 00 00 00 
37213 4da 00 00       | 	byte	$00[6]
37215 4db 18 18 18 18 
37219 4dc 18          | 	byte	$18[5]
3721a 4dc 0C 04 00 00 
3721e 4dd 00 00 00 00 
37222 4de 7E 7E 00 00 
37226 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3722a 4e0 00 00 00 00 
3722e 4e1 00 00 00 00 
37232 4e2 00 00 00 00 
37236 4e3 00          | 	byte	$00[13]
37237 4e3 18 18 18 00 
3723b 4e4 00 00 00 60 
3723f 4e5 60 60 30 30 
37243 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37247 4e7 06 06 06 00 
3724b 4e8 00 00 00 3C 
3724f 4e9 7E 66 66 66 
37253 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37257 4eb 66 7E 3C 00 
3725b 4ec 00 00 00 18 
3725f 4ed 18 1C 1C 18 
37263 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37267 4ef 18 7E 7E 00 
3726b 4f0 00 00 00 3C 
3726f 4f1 7E 66 66 30 
37273 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37277 4f3 0C 7E 7E 00 
3727b 4f4 00 00 00 7E 
3727f 4f5 7E 30 30 18 
37283 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37287 4f7 66 7E 3C 00 
3728b 4f8 00 00 00 30 
3728f 4f9 30 38 38 3C 
37293 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37297 4fb 7E 30 30 00 
3729b 4fc 00 00 00 7E 
3729f 4fd 7E 06 06 3E 
372a3 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
372a7 4ff 66 7E 3C 00 
372ab 500 00 00 00 38 
372af 501 3C 0E 06 06 
372b3 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
372b7 503 66 7E 3C 00 
372bb 504 00 00 00 7E 
372bf 505 7E 60 60 30 
372c3 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
372c7 507 0C 0C 0C 00 
372cb 508 00 00 00 3C 
372cf 509 7E 66 66 3C 
372d3 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
372d7 50b 66 7E 3C 00 
372db 50c 00 00 00 3C 
372df 50d 7E 66 66 7E 
372e3 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
372e7 50f 70 3C 1C 00 
372eb 510 00 00 00 00 
372ef 511 00 00 18 18 
372f3 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
372f7 513 18 18 18 00 
372fb 514 00 00 00 00 
372ff 515 00 00 18 18 
37303 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37307 517 18 18 18 0C 
3730b 518 04 00 00 00 
3730f 519 70 38 1C 0E 
37313 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37317 51b 70 00 00 00 
3731b 51c 00 00 00 00 
3731f 51d 00 00 7E 7E 
37323 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37327 51f 00 00 00 00 
3732b 520 00 00 00 00 | 	byte	$00[8]
3732f 521 0E 1C 38 70 
37333 522 E0 70 38 1C 
37337 523 0E 00 00 00 
3733b 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3733f 525 7E 66 66 30 
37343 526 30 18 18 18 
37347 527 00 18 18 00 
3734b 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3734f 529 7E 66 66 66 
37353 52a 66 36 06 66 
37357 52b 66 7E 3C 00 
3735b 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3735f 52d 3C 7E 66 66 
37363 52e 66 7E 7E 66 
37367 52f 66 66 66 00 
3736b 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3736f 531 7E 66 66 7E 
37373 532 3E 66 66 66 
37377 533 66 7E 3E 00 
3737b 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3737f 535 7E 66 66 06 
37383 536 06 06 06 66 
37387 537 66 7E 3C 00 
3738b 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3738f 539 7E 66 66 66 
37393 53a 66 66 66 66 
37397 53b 66 7E 3E 00 
3739b 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3739f 53d 7E 06 06 3E 
373a3 53e 3E 06 06 06 
373a7 53f 06 7E 7E 00 
373ab 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
373af 541 7E 06 06 3E 
373b3 542 3E 06 06 06 
373b7 543 06 06 06 00 
373bb 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
373bf 545 7E 06 06 76 
373c3 546 76 66 66 66 
373c7 547 66 7E 3C 00 
373cb 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
373cf 549 66 66 66 7E 
373d3 54a 7E 66 66 66 
373d7 54b 66 66 66 00 
373db 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
373df 54d 7E 18 18 18 
373e3 54e 18 18 18 18 
373e7 54f 18 7E 7E 00 
373eb 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
373ef 551 60 60 60 60 
373f3 552 60 60 60    | 	byte	$60[7]
373f6 553 66 66 7E 3C 
373fa 554 00 00 00 00 
373fe 555 66 66 36 36 
37402 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37406 557 66 66 C6 C6 
3740a 558 00 00 00 00 
3740e 559 06 06 06 06 
37412 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37416 55b 06 06 7E 7E 
3741a 55c 00 00 00 00 
3741e 55d C6 C6 EE EE 
37422 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37426 55f C6 C6 C6 C6 
3742a 560 00 00 00 00 
3742e 561 66 66 66 6E 
37432 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37436 563 76 66 66 66 
3743a 564 00 00 00 00 
3743e 565 3C 7E 66 66 
37442 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37446 567 66 66 7E 3C 
3744a 568 00 00 00 00 
3744e 569 3E 7E 66 66 
37452 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37456 56b 06 06 06 06 
3745a 56c 00 00 00 00 
3745e 56d 3C 7E 66 66 
37462 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37466 56f 66 56 3E 6C 
3746a 570 00 00 00 00 
3746e 571 3E 7E 66 66 
37472 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37476 573 66 66 C6 C6 
3747a 574 00 00 00 00 
3747e 575 7C 7E 06 06 
37482 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37486 577 60 60 7E 3E 
3748a 578 00 00 00 00 
3748e 579 7E 7E 18 18 
37492 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37496 57b 18 18 18 18 
3749a 57c 00 00 00 00 
3749e 57d 66 66 66 66 
374a2 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
374a6 57f 66 66 7E 3C 
374aa 580 00 00 00 00 
374ae 581 66 66 66 66 
374b2 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
374b6 583 3C 3C 18 18 
374ba 584 00 00 00 00 
374be 585 C6 C6 C6 C6 
374c2 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
374c6 587 FE EE C6 82 
374ca 588 00 00 00 00 
374ce 589 66 66 66 3C 
374d2 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
374d6 58b 3C 66 66 66 
374da 58c 00 00 00 00 
374de 58d 66 66 66 66 
374e2 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
374e6 58f 18 18 18 18 
374ea 590 00 00 00 00 
374ee 591 7E 7E 30 30 
374f2 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
374f6 593 06 06 7E 7E 
374fa 594 00 00 00 00 
374fe 595 3C 3C 0C 0C 
37502 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
37506 597 0C 0C 3C 3C 
3750a 598 00 00 00 00 
3750e 599 06 06 0C 0C 
37512 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
37516 59b 60 60 C0 C0 
3751a 59c 00 00 00 00 
3751e 59d 3C 3C 30 30 
37522 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
37526 59f 30 30 3C 3C 
3752a 5a0 00 00 00 00 
3752e 5a1 18 18 3C 3C 
37532 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
37536 5a3 00 00 00 00 
3753a 5a4 00 00 00 00 
3753e 5a5 00 00 00 00 
37542 5a6 00 00 00 00 
37546 5a7 00 00       | 	byte	$00[18]
37548 5a8 FE FE 00 00 
3754c 5a9 00 00 0C 0C 
37550 5aa 18 18 00 00 
37554 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37558 5ac 00 00 00 00 
3755c 5ad 00 00 00 00 
37560 5ae 00          | 	byte	$00[9]
37561 5ae 3C 7C 60 7C 
37565 5af 7E 66 66 7E 
37569 5b0 7C 00 00 00 
3756d 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
37571 5b2 3E 7E 66 66 
37575 5b3 66 66 66 7E 
37579 5b4 3E 00 00 00 
3757d 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37581 5b6 3C 3E 06 06 
37585 5b7 06 06 06 7E 
37589 5b8 7C 00 00 00 
3758d 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37591 5ba 7C 7E 66 66 
37595 5bb 66 66 66 7E 
37599 5bc 7C 00 00 00 
3759d 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
375a1 5be 3C 7E 66 66 
375a5 5bf 7E 06 06 7E 
375a9 5c0 7C 00 00 00 
375ad 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
375b1 5c2 18 7E 7E 18 
375b5 5c3 18 18 18 18 
375b9 5c4 18 00 00 00 
375bd 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
375c1 5c6 7C 7E 66 66 
375c5 5c7 66 66 7E 7C 
375c9 5c8 60 7E 3E 00 
375cd 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
375d1 5ca 3E 7E 66 66 
375d5 5cb 66 66 66 66 
375d9 5cc 66 00 00 00 
375dd 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
375e1 5ce 1C 1C 18 18 
375e5 5cf 18 18 18 3C 
375e9 5d0 3C 00 00 00 
375ed 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
375f1 5d2 30 30 30 30 
375f5 5d3 30 30 30 30 
375f9 5d4 30          | 	byte	$30[9]
375fa 5d4 3E 1E 00 00 
375fe 5d5 06 06 06 36 
37602 5d6 36 1E 1E 1E 
37606 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3760a 5d8 00 00 00 00 
3760e 5d9 1C 1C 18 18 
37612 5da 18 18 18 18 
37616 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3761a 5dc 00 00 00 00 
3761e 5dd 00 00 00    | 	byte	$00[7]
37621 5de 6C FE FE D6 
37625 5df D6 C6 C6 C6 
37629 5e0 C6 00 00 00 
3762d 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
37631 5e2 3E 7E 66 66 
37635 5e3 66 66 66 66 
37639 5e4 66 00 00 00 
3763d 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
37641 5e6 3C 7E 66 66 
37645 5e7 66 66 66 7E 
37649 5e8 3C 00 00 00 
3764d 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
37651 5ea 3E 7E 66 66 
37655 5eb 66 66 66 7E 
37659 5ec 3E 06 06 00 
3765d 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
37661 5ee 7C 7E 66 66 
37665 5ef 66 66 66 7E 
37669 5f0 7C 60 60 00 
3766d 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
37671 5f2 3E 7E 66 06 
37675 5f3 06 06 06 06 
37679 5f4 06 00 00 00 
3767d 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
37681 5f6 7C 7E 06 0E 
37685 5f7 3C 70 60 7E 
37689 5f8 3E 00 00 00 
3768d 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
37691 5fa 7E 7E 18 18 
37695 5fb 18 18 18 78 
37699 5fc 70 00 00 00 
3769d 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
376a1 5fe 66 66 66 66 
376a5 5ff 66 66 66    | 	byte	$66[7]
376a8 600 7E 7C 00 00 
376ac 601 00 00 00 00 
376b0 602 00 66 66 66 
376b4 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
376b8 604 18 18 00 00 
376bc 605 00 00 00 00 
376c0 606 00 C6 C6 D6 
376c4 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
376c8 608 C6 82 00 00 
376cc 609 00 00 00 00 
376d0 60a 00 66 66 3C 
376d4 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
376d8 60c 66 66 00 00 
376dc 60d 00 00 00 00 
376e0 60e 00 66 66 66 
376e4 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
376e8 610 7C 60 7E 3E 
376ec 611 00 00 00 00 
376f0 612 00 7E 7E 30 
376f4 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
376f8 614 7E 7E 00 00 
376fc 615 00 00 30 18 
37700 616 18 18 18 0C 
37704 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
37708 618 18 30 00 00 
3770c 619 00 00 18 18 
37710 61a 18 18 18 18 
37714 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37718 61c 18 18 00 00 
3771c 61d 00 00 0C 18 
37720 61e 18 18 18 30 
37724 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
37728 620 18 0C 00 00 
3772c 621 00 00 6C 7E 
37730 622 36 00 00 00 
37734 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
37738 624 00 00 00 00 
3773c 625 00 00 00 00 
37740 626 00          | 	byte	$00[9]
37741 626 18 18 18 18 
37745 627 18 18 00 00 
37749 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3774c 629 00 6C FE FE 
37750 62a 7C 38 10 00 
37754 62b 18 18 18 F8 
37758 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3775c 62d C0 C0 C0 C0 
37760 62e C0 C0 C0 C0 | 	byte	$c0[8]
37764 62f 18 18 18 1F 
37768 630 1F 00 00 00 
3776c 631 18 18 18 1F 
37770 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
37774 633 00 00 00 1F 
37778 634 1F 18 18 18 
3777c 635 C0 E0 70 38 
37780 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
37784 637 03 07 0E 1C 
37788 638 38 70 E0 C0 
3778c 639 80 C0 E0 F0 
37790 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
37794 63b 00 00 00 00 
37798 63c F0 F0 F0 F0 
3779c 63d 01 03 07 0F 
377a0 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
377a4 63f F0 F0 F0 F0 
377a8 640 00 00 00 00 
377ac 641 0F 0F 0F 0F 
377b0 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
377b4 643 FF FF 00 00 
377b8 644 00 00 00 00 
377bc 645 00 00 00 00 
377c0 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
377c4 647 00 00 00 00 
377c8 648 0F 0F 0F 0F 
377cc 649 00 38 38 EE 
377d0 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
377d4 64b 00 00 00 F8 
377d8 64c F8 18 18 18 
377dc 64d 00 00 00 FF 
377e0 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
377e4 64f 18 18 18 FF 
377e8 650 FF 18 18 18 
377ec 651 00 00 3C 7E 
377f0 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
377f4 653 00 00 00 00 
377f8 654 FF FF FF FF 
377fc 655 03 03 03 03 
37800 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
37804 657 00 00 00 FF 
37808 658 FF 18 18 18 
3780c 659 18 18 18 FF 
37810 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
37814 65b 0F 0F 0F 0F 
37818 65c 0F 0F 0F 0F | 	byte	$0f[8]
3781c 65d 18 18 18 F8 
37820 65e F8 00 00 00 
37824 65f 1E 06 1E 06 
37828 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3782c 661 00 18 3C 7E 
37830 662 18 18 18 00 
37834 663 00 18 18 18 
37838 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3783c 665 00 18 0C 7E 
37840 666 0C 18 00 00 
37844 667 00 18 30 7E 
37848 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3784c 669 00 00 00 00 
37850 66a 00 00 00 00 
37854 66b 00          | 	byte	$00[9]
37855 66b 18 18 18 18 
37859 66c 00 18 00 00 
3785d 66d 66 66 66 00 
37861 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
37865 66f 66 FF 66 66 
37869 670 FF 66 00 18 
3786d 671 7C 06 3C 60 
37871 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
37875 673 66 36 18 0C 
37879 674 66 62 00 38 
3787d 675 6C 38 1C F6 
37881 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
37885 677 18 18 18 00 
37889 678 00 00 00 00 
3788d 679 70 38 18 18 
37891 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
37895 67b 0E 1C 18 18 
37899 67c 1C 0E 00 00 
3789d 67d 66 3C FF 3C 
378a1 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
378a5 67f 18 18 7E 18 
378a9 680 18 00 00 00 
378ad 681 00 00 00 00 
378b1 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
378b5 683 00 00 7E 00 
378b9 684 00 00 00 00 
378bd 685 00 00 00 00 
378c1 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
378c5 687 60 30 18 0C 
378c9 688 06 02 00 00 
378cd 689 3C 66 76 6E 
378d1 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
378d5 68b 18 1C 18 18 
378d9 68c 18 7E 00 00 
378dd 68d 3C 66 30 18 
378e1 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
378e5 68f 7E 30 18 30 
378e9 690 66 3C 00 00 
378ed 691 30 38 3C 36 
378f1 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
378f5 693 7E 06 3E 60 
378f9 694 66 3C 00 00 
378fd 695 3C 06 3E 66 
37901 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
37905 697 7E 60 30 18 
37909 698 0C 0C 00 00 
3790d 699 3C 66 3C 66 
37911 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
37915 69b 3C 66 7C 60 
37919 69c 30 1C 00 00 
3791d 69d 00 18 18 00 
37921 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
37925 69f 00 18 18 00 
37929 6a0 18 18 0C 60 
3792d 6a1 30 18 0C 18 
37931 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
37935 6a3 00 7E 00 00 
37939 6a4 7E 00 00 06 
3793d 6a5 0C 18 30 18 
37941 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
37945 6a7 3C 66 30 18 
37949 6a8 00 18 00 00 
3794d 6a9 3C 66 76 76 
37951 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
37955 6ab 18 3C 66 66 
37959 6ac 7E 66 00 00 
3795d 6ad 3E 66 3E 66 
37961 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
37965 6af 3C 66 06 06 
37969 6b0 66 3C 00 00 
3796d 6b1 1E 36 66 66 
37971 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
37975 6b3 7E 06 3E 06 
37979 6b4 06 7E 00 00 
3797d 6b5 7E 06 3E 06 
37981 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
37985 6b7 7C 06 06 76 
37989 6b8 66 7C 00 00 
3798d 6b9 66 66 7E 66 
37991 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
37995 6bb 7E 18 18 18 
37999 6bc 18 7E 00 00 
3799d 6bd 60 60 60 60 
379a1 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
379a5 6bf 66 36 1E 1E 
379a9 6c0 36 66 00 00 
379ad 6c1 06 06 06 06 
379b1 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
379b5 6c3 C6 EE FE D6 
379b9 6c4 C6 C6 00 00 
379bd 6c5 66 6E 7E 7E 
379c1 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
379c5 6c7 3C 66 66 66 
379c9 6c8 66 3C 00 00 
379cd 6c9 3E 66 66 3E 
379d1 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
379d5 6cb 3C 66 66 66 
379d9 6cc 36 6C 00 00 
379dd 6cd 3E 66 66 3E 
379e1 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
379e5 6cf 3C 06 3C 60 
379e9 6d0 60 3C 00 00 
379ed 6d1 7E 18 18 18 
379f1 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
379f5 6d3 66 66 66 66 
379f9 6d4 66          | 	byte	$66[5]
379fa 6d4 7E 00 00 66 
379fe 6d5 66 66 66 3C 
37a02 6d6 18 00 00 C6 
37a06 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
37a0a 6d8 C6 00 00 66 
37a0e 6d9 66 3C 3C 66 
37a12 6da 66 00 00 66 
37a16 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
37a1a 6dc 18 00 00 7E 
37a1e 6dd 30 18 0C 06 
37a22 6de 7E 00 00 78 
37a26 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
37a2a 6e0 78 00 00 02 
37a2e 6e1 06 0C 18 30 
37a32 6e2 60 00 00 1E 
37a36 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
37a3a 6e4 1E 00 00 10 
37a3e 6e5 38 6C C6 00 
37a42 6e6 00 00 00 00 
37a46 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
37a4a 6e8 FF 00 00 18 
37a4e 6e9 3C 7E 7E 3C 
37a52 6ea 18 00 00 00 
37a56 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
37a5a 6ec 7C 00 00 06 
37a5e 6ed 06 3E 66 66 
37a62 6ee 3E 00 00 00 
37a66 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
37a6a 6f0 3C 00 00 60 
37a6e 6f1 60 7C 66 66 
37a72 6f2 7C 00 00 00 
37a76 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
37a7a 6f4 3C 00 00 70 
37a7e 6f5 18 7C 18 18 
37a82 6f6 18 00 00 00 
37a86 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
37a8a 6f8 60 3E 00 06 
37a8e 6f9 06 3E 66 66 
37a92 6fa 66 00 00 18 
37a96 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
37a9a 6fc 3C 00 00 60 
37a9e 6fd 00 60 60 60 
37aa2 6fe 60 3C 00 06 
37aa6 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
37aaa 700 66 00 00 1C 
37aae 701 18 18 18 18 
37ab2 702 3C 00 00 00 
37ab6 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
37aba 704 C6 00 00 00 
37abe 705 3E 66 66 66 
37ac2 706 66 00 00 00 
37ac6 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
37aca 708 3C 00 00 00 
37ace 709 3E 66 66 3E 
37ad2 70a 06 06 00 00 
37ad6 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
37ada 70c 60 60 00 00 
37ade 70d 3E 66 06 06 
37ae2 70e 06 00 00 00 
37ae6 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
37aea 710 3E 00 00 18 
37aee 711 7E 18 18 18 
37af2 712 70 00 00 00 
37af6 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
37afa 714 7C 00 00 00 
37afe 715 66 66 66 3C 
37b02 716 18 00 00 00 
37b06 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
37b0a 718 6C 00 00 00 
37b0e 719 66 3C 18 3C 
37b12 71a 66 00 00 00 
37b16 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
37b1a 71c 30 1E 00 00 
37b1e 71d 7E 30 18 0C 
37b22 71e 7E 00 00 18 
37b26 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
37b2a 720 3C 00 18 18 
37b2e 721 18 18 18 18 
37b32 722 18 18 00 7E 
37b36 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
37b3a 724 60 00 10 18 
37b3e 725 1C 1E 1C 18 
37b42 726 10 00 08 18 
37b46 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
37b4a 728 08 00       | 	byte	$08, $00
37b4c 729 00 6C FE FE 
37b50 72a 7C 38 10 00 
37b54 72b 18 18 18 F8 
37b58 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
37b5c 72d C0 C0 C0 C0 
37b60 72e C0 C0 C0 C0 | 	byte	$c0[8]
37b64 72f 18 18 18 1F 
37b68 730 1F 00 00 00 
37b6c 731 18 18 18 1F 
37b70 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
37b74 733 00 00 00 1F 
37b78 734 1F 18 18 18 
37b7c 735 C0 E0 70 38 
37b80 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
37b84 737 03 07 0E 1C 
37b88 738 38 70 E0 C0 
37b8c 739 80 C0 E0 F0 
37b90 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
37b94 73b 00 00 00 00 
37b98 73c F0 F0 F0 F0 
37b9c 73d 01 03 07 0F 
37ba0 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
37ba4 73f F0 F0 F0 F0 
37ba8 740 00 00 00 00 
37bac 741 0F 0F 0F 0F 
37bb0 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
37bb4 743 FF FF 00 00 
37bb8 744 00 00 00 00 
37bbc 745 00 00 00 00 
37bc0 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
37bc4 747 00 00 00 00 
37bc8 748 0F 0F 0F 0F 
37bcc 749 00 38 38 EE 
37bd0 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
37bd4 74b 00 00 00 F8 
37bd8 74c F8 18 18 18 
37bdc 74d 00 00 00 FF 
37be0 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
37be4 74f 18 18 18 FF 
37be8 750 FF 18 18 18 
37bec 751 00 00 3C 7E 
37bf0 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
37bf4 753 00 00 00 00 
37bf8 754 FF FF FF FF 
37bfc 755 03 03 03 03 
37c00 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
37c04 757 00 00 00 FF 
37c08 758 FF 18 18 18 
37c0c 759 18 18 18 FF 
37c10 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
37c14 75b 0F 0F 0F 0F 
37c18 75c 0F 0F 0F 0F | 	byte	$0f[8]
37c1c 75d 18 18 18 F8 
37c20 75e F8 00 00 00 
37c24 75f 1E 06 1E 06 
37c28 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
37c2c 761 00 18 3C 7E 
37c30 762 18 18 18 00 
37c34 763 00 18 18 18 
37c38 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
37c3c 765 00 18 0C 7E 
37c40 766 0C 18 00 00 
37c44 767 00 18 30 7E 
37c48 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
37c4c 769 00 00 00 00 
37c50 76a 00 00 00 00 
37c54 76b 00          | 	byte	$00[9]
37c55 76b 18 18 18 18 
37c59 76c 00 18 00 00 
37c5d 76d 66 66 66 00 
37c61 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
37c65 76f 66 FF 66 66 
37c69 770 FF 66 00 18 
37c6d 771 7C 06 3C 60 
37c71 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
37c75 773 66 36 18 0C 
37c79 774 66 62 00 38 
37c7d 775 6C 38 1C F6 
37c81 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
37c85 777 18 18 18 00 
37c89 778 00 00 00 00 
37c8d 779 70 38 18 18 
37c91 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
37c95 77b 0E 1C 18 18 
37c99 77c 1C 0E 00 00 
37c9d 77d 66 3C FF 3C 
37ca1 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
37ca5 77f 18 18 7E 18 
37ca9 780 18 00 00 00 
37cad 781 00 00 00 00 
37cb1 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
37cb5 783 00 00 7E 00 
37cb9 784 00 00 00 00 
37cbd 785 00 00 00 00 
37cc1 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
37cc5 787 60 30 18 0C 
37cc9 788 06 02 00 00 
37ccd 789 3C 66 76 6E 
37cd1 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
37cd5 78b 18 1C 18 18 
37cd9 78c 18 7E 00 00 
37cdd 78d 3C 66 30 18 
37ce1 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
37ce5 78f 7E 30 18 30 
37ce9 790 66 3C 00 00 
37ced 791 30 38 3C 36 
37cf1 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
37cf5 793 7E 06 3E 60 
37cf9 794 66 3C 00 00 
37cfd 795 3C 06 3E 66 
37d01 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
37d05 797 7E 60 30 18 
37d09 798 0C 0C 00 00 
37d0d 799 3C 66 3C 66 
37d11 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
37d15 79b 3C 66 7C 60 
37d19 79c 30 1C 00 00 
37d1d 79d 00 18 18 00 
37d21 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
37d25 79f 00 18 18 00 
37d29 7a0 18 18 0C 60 
37d2d 7a1 30 18 0C 18 
37d31 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
37d35 7a3 00 7E 00 00 
37d39 7a4 7E 00 00 06 
37d3d 7a5 0C 18 30 18 
37d41 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
37d45 7a7 3C 66 30 18 
37d49 7a8 00 18 00 00 
37d4d 7a9 3C 66 76 76 
37d51 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
37d55 7ab 18 3C 66 66 
37d59 7ac 7E 66 00 00 
37d5d 7ad 3E 66 3E 66 
37d61 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
37d65 7af 3C 66 06 06 
37d69 7b0 66 3C 00 00 
37d6d 7b1 1E 36 66 66 
37d71 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
37d75 7b3 7E 06 3E 06 
37d79 7b4 06 7E 00 00 
37d7d 7b5 7E 06 3E 06 
37d81 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
37d85 7b7 7C 06 06 76 
37d89 7b8 66 7C 00 00 
37d8d 7b9 66 66 7E 66 
37d91 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
37d95 7bb 7E 18 18 18 
37d99 7bc 18 7E 00 00 
37d9d 7bd 60 60 60 60 
37da1 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
37da5 7bf 66 36 1E 1E 
37da9 7c0 36 66 00 00 
37dad 7c1 06 06 06 06 
37db1 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
37db5 7c3 C6 EE FE D6 
37db9 7c4 C6 C6 00 00 
37dbd 7c5 66 6E 7E 7E 
37dc1 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
37dc5 7c7 3C 66 66 66 
37dc9 7c8 66 3C 00 00 
37dcd 7c9 3E 66 66 3E 
37dd1 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
37dd5 7cb 3C 66 66 66 
37dd9 7cc 36 6C 00 00 
37ddd 7cd 3E 66 66 3E 
37de1 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
37de5 7cf 3C 06 3C 60 
37de9 7d0 60 3C 00 00 
37ded 7d1 7E 18 18 18 
37df1 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
37df5 7d3 66 66 66 66 
37df9 7d4 66          | 	byte	$66[5]
37dfa 7d4 7E 00 00 66 
37dfe 7d5 66 66 66 3C 
37e02 7d6 18 00 00 C6 
37e06 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
37e0a 7d8 C6 00 00 66 
37e0e 7d9 66 3C 3C 66 
37e12 7da 66 00 00 66 
37e16 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
37e1a 7dc 18 00 00 7E 
37e1e 7dd 30 18 0C 06 
37e22 7de 7E 00 00 78 
37e26 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
37e2a 7e0 78 00 00 02 
37e2e 7e1 06 0C 18 30 
37e32 7e2 60 00 00 1E 
37e36 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
37e3a 7e4 1E 00 00 10 
37e3e 7e5 38 6C C6 00 
37e42 7e6 00 00 00 00 
37e46 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e4a 7e8 FF 00 00 18 
37e4e 7e9 3C 7E 7E 3C 
37e52 7ea 18 00 00 00 
37e56 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
37e5a 7ec 7C 00 00 06 
37e5e 7ed 06 3E 66 66 
37e62 7ee 3E 00 00 00 
37e66 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
37e6a 7f0 3C 00 00 60 
37e6e 7f1 60 7C 66 66 
37e72 7f2 7C 00 00 00 
37e76 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
37e7a 7f4 3C 00 00 70 
37e7e 7f5 18 7C 18 18 
37e82 7f6 18 00 00 00 
37e86 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
37e8a 7f8 60 3E 00 06 
37e8e 7f9 06 3E 66 66 
37e92 7fa 66 00 00 18 
37e96 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
37e9a 7fc 3C 00 00 60 
37e9e 7fd 00 60 60 60 
37ea2 7fe 60 3C 00 06 
37ea6 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
37eaa 800 66 00 00 1C 
37eae 801 18 18 18 18 
37eb2 802 3C 00 00 00 
37eb6 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
37eba 804 C6 00 00 00 
37ebe 805 3E 66 66 66 
37ec2 806 66 00 00 00 
37ec6 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
37eca 808 3C 00 00 00 
37ece 809 3E 66 66 3E 
37ed2 80a 06 06 00 00 
37ed6 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
37eda 80c 60 60 00 00 
37ede 80d 3E 66 06 06 
37ee2 80e 06 00 00 00 
37ee6 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
37eea 810 3E 00 00 18 
37eee 811 7E 18 18 18 
37ef2 812 70 00 00 00 
37ef6 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
37efa 814 7C 00 00 00 
37efe 815 66 66 66 3C 
37f02 816 18 00 00 00 
37f06 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
37f0a 818 6C 00 00 00 
37f0e 819 66 3C 18 3C 
37f12 81a 66 00 00 00 
37f16 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
37f1a 81c 30 1E 00 00 
37f1e 81d 7E 30 18 0C 
37f22 81e 7E 00 00 18 
37f26 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
37f2a 820 3C 00 18 18 
37f2e 821 18 18 18 18 
37f32 822 18 18 00 7E 
37f36 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
37f3a 824 60 00 10 18 
37f3e 825 1C 1E 1C 18 
37f42 826 10 00 08 18 
37f46 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
37f4a 828 08 00       | 	byte	$08, $00
37f4c 829 00 00 00 00 
      ...             
38158 8ac 00 00 00 00 
3815c 8ad 00 00       | amiga_font     file "amigafont.def"
3815e 8ad 18 18 18 18 
38162 8ae 18 18       | 	byte	$18[6]
38164 8af 00 18 18 00 
38168 8b0 00 00 00 00 
3816c 8b1 00 00 66 66 
38170 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38174 8b3 00 00 00 00 
38178 8b4 00 00 00 00 
3817c 8b5 00 00       | 	byte	$00[10]
3817e 8b5 36 36 7F 36 
38182 8b6 36 36 7F 36 
38186 8b7 36 00 00 00 
3818a 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3818e 8b9 18 7C 06 06 
38192 8ba 3C 60 60 3E 
38196 8bb 18 00 00 00 
3819a 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3819e 8bd 00 00 C6 69 
381a2 8be 36 18 6C 96 
381a6 8bf 63 00 00 00 
381aa 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
381ae 8c1 1C 36 36 1E 
381b2 8c2 6E 3B 33 73 
381b6 8c3 DE 00 00 00 
381ba 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
381be 8c5 18 18 0C 00 
381c2 8c6 00 00 00 00 
381c6 8c7 00 00 00 00 
381ca 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
381ce 8c9 30 18 0C 0C 
381d2 8ca 0C 0C 0C 18 
381d6 8cb 30 00 00 00 
381da 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
381de 8cd 0C 18 30 30 
381e2 8ce 30 30 30 18 
381e6 8cf 0C 00 00 00 
381ea 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
381ee 8d1 00 66 66 3C 
381f2 8d2 FF 3C 66 66 
381f6 8d3 00 00 00 00 
381fa 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
381fe 8d5 00 18 18 18 
38202 8d6 7E 18 18 18 
38206 8d7 00 00 00 00 
3820a 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3820e 8d9 00 00 00 00 
38212 8da 00 00 00    | 	byte	$00[7]
38215 8db 18 18 0C 00 
38219 8dc 00 00 00 00 
3821d 8dd 00 00 00 00 
38221 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38225 8df 00 00 00 00 
38229 8e0 00 00 00 00 
3822d 8e1 00 00 00 00 
38231 8e2 00 00 00 00 | 	byte	$00[16]
38235 8e3 18 18 00 00 
38239 8e4 00 00 00 00 
3823d 8e5 00 00 C0 60 
38241 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38245 8e7 03 00 00 00 
38249 8e8 00 00 00 00 
3824d 8e9 00 3C 66 66 
38251 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38255 8eb 66 3C 00 00 
38259 8ec 00 00 00 00 
3825d 8ed 00 18 1C 1E 
38261 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38265 8ef 18 18 00 00 
38269 8f0 00 00 00 00 
3826d 8f1 00 3C 66 60 
38271 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38275 8f3 06 7E 00 00 
38279 8f4 00 00 00 00 
3827d 8f5 00 3C 66 60 
38281 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38285 8f7 66 3C 00 00 
38289 8f8 00 00 00 00 
3828d 8f9 00 30 38 3C 
38291 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38295 8fb 30 30 00 00 
38299 8fc 00 00 00 00 
3829d 8fd 00 7E 06 06 
382a1 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
382a5 8ff 66 3C 00 00 
382a9 900 00 00 00 00 
382ad 901 00 38 0C 06 
382b1 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
382b5 903 66 3C 00 00 
382b9 904 00 00 00 00 
382bd 905 00 7E 60 60 
382c1 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
382c5 907 18 18 00 00 
382c9 908 00 00 00 00 
382cd 909 00 3C 66 66 
382d1 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
382d5 90b 66 3C 00 00 
382d9 90c 00 00 00 00 
382dd 90d 00 3C 66 66 
382e1 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
382e5 90f 30 1C 00 00 
382e9 910 00 00 00 00 
382ed 911 00 00 00 18 
382f1 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
382f5 913 18 00 00 00 
382f9 914 00 00 00 00 
382fd 915 00 00 00 18 
38301 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38305 917 18 18 0C 00 
38309 918 00 00 00 00 
3830d 919 00 00 00 60 
38311 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38315 91b 00 00 00 00 
38319 91c 00 00 00 00 
3831d 91d 00 00 00 00 | 	byte	$00[12]
38321 91e 7E 00 7E 00 
38325 91f 00 00 00 00 
38329 920 00 00 00 00 
3832d 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38331 922 18 60 18 06 
38335 923 00 00 00 00 
38339 924 00 00 00 00 
3833d 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38341 926 60 30 18 00 
38345 927 18 18 00 00 
38349 928 00 00 00 00 
3834d 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38351 92a 7B 6B 7B 03 
38355 92b 03 1E 00 00 
38359 92c 00 00 00 00 
3835d 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38361 92e 63 7F 63 63 
38365 92f 63 63 00 00 
38369 930 00 00 00 00 
3836d 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38371 932 66 3E 66 66 
38375 933 66 3E 00 00 
38379 934 00 00 00 00 
3837d 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38381 936 06 06 06 06 
38385 937 0C 78 00 00 
38389 938 00 00 00 00 
3838d 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38391 93a 63 63 63 63 
38395 93b 33 1F 00 00 
38399 93c 00 00 00 00 
3839d 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
383a1 93e 06 1E 06 06 
383a5 93f 06 7E 00 00 
383a9 940 00 00 00 00 
383ad 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
383b1 942 06 1E 06 06 
383b5 943 06 06 00 00 
383b9 944 00 00 00 00 
383bd 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
383c1 946 06 76 66 66 
383c5 947 66 7C 00 00 
383c9 948 00 00 00 00 
383cd 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
383d1 94a 63 7F 63 63 
383d5 94b 63 63 00 00 
383d9 94c 00 00 00 00 
383dd 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
383e1 94e 18 18 18 18 
383e5 94f 18          | 	byte	$18[5]
383e6 94f 3C 00 00 00 
383ea 950 00 00 00 00 
383ee 951 60 60 60 60 
383f2 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
383f6 953 3E 00 00 00 
383fa 954 00 00 00 00 
383fe 955 C3 63 33 1B 
38402 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38406 957 C3 00 00 00 
3840a 958 00 00 00 00 
3840e 959 03 03 03 03 
38412 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38416 95b 7F 00 00 00 
3841a 95c 00 00 00 00 
3841e 95d 63 77 7F 6B 
38422 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38426 95f 63 00 00 00 
3842a 960 00 00 00 00 
3842e 961 63 67 6F 7B 
38432 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38436 963 63 00 00 00 
3843a 964 00 00 00 00 
3843e 965 3E 63 63 63 
38442 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38446 967 3E 00 00 00 
3844a 968 00 00 00 00 
3844e 969 3E 66 66 66 
38452 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38456 96b 06 00 00 00 
3845a 96c 00 00 00 00 
3845e 96d 3E 63 63 63 
38462 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38466 96f FE 00 00 00 
3846a 970 00 00 00 00 
3846e 971 1F 33 33 33 
38472 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38476 973 63 00 00 00 
3847a 974 00 00 00 00 
3847e 975 3C 66 06 0C 
38482 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38486 977 3C 00 00 00 
3848a 978 00 00 00 00 
3848e 979 7E 18 18 18 
38492 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38496 97b 18 00 00 00 
3849a 97c 00 00 00 00 
3849e 97d 63 63 63 63 
384a2 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
384a6 97f 3E 00 00 00 
384aa 980 00 00 00 00 
384ae 981 63 63 63 63 
384b2 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
384b6 983 08 00 00 00 
384ba 984 00 00 00 00 
384be 985 C3 C3 C3 C3 
384c2 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
384c6 987 C3 00 00 00 
384ca 988 00 00 00 00 
384ce 989 C3 C3 66 3C 
384d2 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
384d6 98b C3 00 00 00 
384da 98c 00 00 00 00 
384de 98d C3 C3 66 3C 
384e2 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
384e6 98f 18 00 00 00 
384ea 990 00 00 00 00 
384ee 991 7F 60 60 30 
384f2 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
384f6 993 7F 00 00 00 
384fa 994 00 00 00 00 
384fe 995 3C 0C 0C 0C 
38502 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38506 997 3C 00 00 00 
3850a 998 00 00 00 00 
3850e 999 00 03 06 0C 
38512 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
38516 99b 00 00 00 00 
3851a 99c 00 00 00 00 | 	byte	$00[8]
3851e 99d 3C 30 30 30 
38522 99e 30 30 30 30 
38526 99f 3C 00 00 00 
3852a 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3852e 9a1 08 1C 36 63 
38532 9a2 00 00 00 00 
38536 9a3 00 00 00 00 
3853a 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3853e 9a5 00 00 00 00 
38542 9a6 00 00 00 00 
38546 9a7 00          | 	byte	$00[9]
38547 9a7 7F 00 00 00 
3854b 9a8 00 00 00 18 
3854f 9a9 18 30 00 00 
38553 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
38557 9ab 00 00 00 00 
3855b 9ac 00 00 00 00 
3855f 9ad 00 00       | 	byte	$00[10]
38561 9ae 3C 60 7C 66 
38565 9af 66 7C 00 00 
38569 9b0 00 00 00 00 
3856d 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
38571 9b2 3E 66 66 66 
38575 9b3 66 3E 00 00 
38579 9b4 00 00 00 00 
3857d 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38581 9b6 3C 06 06 06 
38585 9b7 06 3C 00 00 
38589 9b8 00 00 00 00 
3858d 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
38591 9ba 7C 66 66 66 
38595 9bb 66 7C 00 00 
38599 9bc 00 00 00 00 
3859d 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
385a1 9be 3C 66 7E 06 
385a5 9bf 06 3C 00 00 
385a9 9c0 00 00 00 00 
385ad 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
385b1 9c2 3E 0C 0C 0C 
385b5 9c3 0C 0C 00 00 
385b9 9c4 00 00 00 00 
385bd 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
385c1 9c6 7C 66 66 66 
385c5 9c7 7C 60 60 3C 
385c9 9c8 00 00 00 00 
385cd 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
385d1 9ca 3E 66 66 66 
385d5 9cb 66 66 00 00 
385d9 9cc 00 00 00 00 
385dd 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
385e1 9ce 18 18 18 18 
385e5 9cf 18          | 	byte	$18[5]
385e6 9cf 30 00 00 00 
385ea 9d0 00 00 00 00 
385ee 9d1 00 30 00 30 
385f2 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
385f6 9d3 30 30 1E 00 
385fa 9d4 00 00 00 00 
385fe 9d5 03 03 03 33 
38602 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
38606 9d7 63 00 00 00 
3860a 9d8 00 00 00 00 
3860e 9d9 18 18 18 18 
38612 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38616 9db 30 00 00 00 
3861a 9dc 00 00 00 00 
3861e 9dd 00 00 00 37 
38622 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
38626 9df 63 00 00 00 
3862a 9e0 00 00 00 00 
3862e 9e1 00 00 00 3E 
38632 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
38636 9e3 66 00 00 00 
3863a 9e4 00 00 00 00 
3863e 9e5 00 00 00 3C 
38642 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
38646 9e7 3C 00 00 00 
3864a 9e8 00 00 00 00 
3864e 9e9 00 00 00 3E 
38652 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
38656 9eb 06 06 06 00 
3865a 9ec 00 00 00 00 
3865e 9ed 00 00 00 7C 
38662 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
38666 9ef 60 60 60 00 
3866a 9f0 00 00 00 00 
3866e 9f1 00 00 00 3E 
38672 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
38676 9f3 06 00 00 00 
3867a 9f4 00 00 00 00 
3867e 9f5 00 00 00 3C 
38682 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
38686 9f7 3E 00 00 00 
3868a 9f8 00 00 00 00 
3868e 9f9 00 0C 0C 3E 
38692 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
38696 9fb 38 00 00 00 
3869a 9fc 00 00 00 00 
3869e 9fd 00 00 00 66 
386a2 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
386a6 9ff 7C 00 00 00 
386aa a00 00 00 00 00 
386ae a01 00 00 00 66 
386b2 a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
386b6 a03 18 00 00 00 
386ba a04 00 00 00 00 
386be a05 00 00 00 63 
386c2 a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
386c6 a07 36 00 00 00 
386ca a08 00 00 00 00 
386ce a09 00 00 00 63 
386d2 a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
386d6 a0b 63 00 00 00 
386da a0c 00 00 00 00 
386de a0d 00 00 00 66 
386e2 a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
386e6 a0f 18 0C 06 00 
386ea a10 00 00 00 00 
386ee a11 00 00 00 7E 
386f2 a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
386f6 a13 7E 00 00 00 
386fa a14 00 00 00 00 
386fe a15 70 18 18 18 
38702 a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
38706 a17 70 00 00 00 
3870a a18 00 00 00 00 
3870e a19 18 18 18 18 
38712 a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38716 a1b 18 00 00 00 
3871a a1c 00 00 00 00 
3871e a1d 0E 18 18 18 
38722 a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
38726 a1f 0E 00 00 00 
3872a a20 00 00 00 00 
3872e a21 46 5D 31 00 
38732 a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
38736 a23 00 00 00 00 
3873a a24 00 00 00 00 | 	byte	$00[8]
3873e a25 C0 F0 3C 0F 
38742 a26 C3 F0 3C 0F 
38746 a27 03 00 00 00 
3874a a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3874e a29 18 18 00 18 
38752 a2a 18 18 18 18 
38756 a2b 18 00 00 00 
3875a a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3875e a2d 18 18 7E 1B 
38762 a2e 1B 7E 18 18 
38766 a2f 00 00 00 00 
3876a a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3876e a31 78 CC 0C 0C 
38772 a32 1E 0C 0C 06 
38776 a33 7F 00 00 00 
3877a a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3877e a35 66 3C 66 66 
38782 a36 3C 66 00 00 
38786 a37 00 00 00 00 
3878a a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3878e a39 C3 C3 66 3C 
38792 a3a 18 7E 18 18 
38796 a3b 18 00 00 00 
3879a a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3879e a3d 18 18 18 18 
387a2 a3e 00 18 18 18 
387a6 a3f 18 00 00 00 
387aa a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
387ae a41 3C 06 06 3C 
387b2 a42 66 66 66 3C 
387b6 a43 60 60 3C 00 
387ba a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
387be a45 66 66 00 00 
387c2 a46 00 00 00 00 
387c6 a47 00 00 00 00 
387ca a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387ce a49 7E 81 B9 85 
387d2 a4a 85 B9 81 7E 
387d6 a4b 00 00 00 00 
387da a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
387de a4d 3C 33 33 7E 
387e2 a4e 00 7F 00 00 
387e6 a4f 00 00 00 00 
387ea a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387ee a51 00 00 CC 66 
387f2 a52 33 66 CC 00 
387f6 a53 00 00 00 00 
387fa a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
387fe a55 7E 60 60 00 
38802 a56 00 00 00 00 
38806 a57 00 00 00 00 
3880a a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3880e a59 7E 81 9D A5 
38812 a5a 9D A5 81 7E 
38816 a5b 00 00 00 00 
3881a a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3881e a5d 7E 00 00 00 
38822 a5e 00 00 00 00 
38826 a5f 00 00 00 00 
3882a a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3882e a61 3C 66 66 3C 
38832 a62 00 00 00 00 
38836 a63 00 00 00 00 
3883a a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3883e a65 18 18 18 7E 
38842 a66 18 18 18 00 
38846 a67 7E 00 00 00 
3884a a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3884e a69 1E 30 30 18 
38852 a6a 0C 06 3E 00 
38856 a6b 00 00 00 00 
3885a a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3885e a6d 1E 30 30 1C 
38862 a6e 30 30 1E 00 
38866 a6f 00 00 00 00 
3886a a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3886e a71 30 18 0C 06 
38872 a72 00 00 00 00 
38876 a73 00 00 00 00 
3887a a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3887e a75 00 00 00 66 
38882 a76 66 66 66 66 
38886 a77 FE 06 06 00 
3888a a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3888e a79 7C 5E 5E 5E 
38892 a7a 5C 50 50 50 
38896 a7b 50 50 00 00 
3889a a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3889e a7d 00 00 00 18 
388a2 a7e 18 00 00 00 
388a6 a7f 00 00 00 00 
388aa a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
388ae a81 00 00 00 00 
388b2 a82 00 00 00 00 
388b6 a83 00          | 	byte	$00[9]
388b7 a83 30 18 00 00 
388bb a84 00 00 00 18 
388bf a85 1C 18 18 18 
388c3 a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
388c7 a87 00 00 00 00 
388cb a88 00 00 00    | 	byte	$00[7]
388ce a89 3C 66 66 3C 
388d2 a8a 00 7E 00 00 
388d6 a8b 00 00 00 00 
388da a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
388de a8d 00 00 33 66 
388e2 a8e CC 66 33 00 
388e6 a8f 00 00 00 00 
388ea a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
388ee a91 02 63 32 1A 
388f2 a92 4E 66 F3 40 
388f6 a93 40 00 00 00 
388fa a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
388fe a95 04 C6 64 34 
38902 a96 7C 8C 46 23 
38906 a97 F0 00 00 00 
3890a a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3890e a99 03 C4 66 34 
38912 a9a 5B 6C F6 43 
38916 a9b 40 00 00 00 
3891a a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3891e a9d 18 18 00 18 
38922 a9e 0C 06 06 66 
38926 a9f 3C 00 00 00 
3892a aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3892e aa1 06 0C 3E 63 
38932 aa2 63 7F 63 63 
38936 aa3 63 00 00 00 
3893a aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3893e aa5 30 18 3E 63 
38942 aa6 63 7F 63 63 
38946 aa7 63 00 00 00 
3894a aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3894e aa9 0C 33 3E 63 
38952 aaa 63 63 7F 63 
38956 aab 63 00 00 00 
3895a aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3895e aad 4E 39 3E 63 
38962 aae 63 7F 63 63 
38966 aaf 63 00 00 00 
3896a ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3896e ab1 63 00 3E 63 
38972 ab2 63 7F 63 63 
38976 ab3 63 00 00 00 
3897a ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3897e ab5 1C 22 1C 36 
38982 ab6 63 63 7F 63 
38986 ab7 63 00 00 00 
3898a ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3898e ab9 F8 3C 3C 36 
38992 aba F6 3F 33 33 
38996 abb F3 00 00 00 
3899a abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3899e abd 78 0C 06 06 
389a2 abe 06 06 06 0C 
389a6 abf 78 30 18 00 
389aa ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
389ae ac1 0C 18 7E 06 
389b2 ac2 06 3E 06 06 
389b6 ac3 7E 00 00 00 
389ba ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
389be ac5 30 18 7E 06 
389c2 ac6 06 3E 06 06 
389c6 ac7 7E 00 00 00 
389ca ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
389ce ac9 18 66 7E 06 
389d2 aca 06 3E 06 06 
389d6 acb 7E 00 00 00 
389da acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
389de acd 66 00 7E 06 
389e2 ace 06 3E 06 06 
389e6 acf 7E 00 00 00 
389ea ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
389ee ad1 0C 18 3C 18 
389f2 ad2 18 18 18 18 
389f6 ad3 3C 00 00 00 
389fa ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
389fe ad5 30 18 3C 18 
38a02 ad6 18 18 18 18 
38a06 ad7 3C 00 00 00 
38a0a ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38a0e ad9 18 66 3C 18 
38a12 ada 18 18 18 18 
38a16 adb 3C 00 00 00 
38a1a adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38a1e add 66 00 3C 18 
38a22 ade 18 18 18 18 
38a26 adf 3C 00 00 00 
38a2a ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38a2e ae1 1E 36 66 66 
38a32 ae2 6F 66 66 36 
38a36 ae3 1E 00 00 00 
38a3a ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
38a3e ae5 8E 73 67 6F 
38a42 ae6 7B 73 63 63 
38a46 ae7 63 00 00 00 
38a4a ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
38a4e ae9 06 0C 3E 63 
38a52 aea 63 63 63 63 
38a56 aeb 3E 00 00 00 
38a5a aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38a5e aed 30 18 3E 63 
38a62 aee 63 63 63 63 
38a66 aef 3E 00 00 00 
38a6a af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38a6e af1 0C 33 3E 63 
38a72 af2 63 63 63 63 
38a76 af3 3E 00 00 00 
38a7a af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38a7e af5 8E 71 3E 63 
38a82 af6 63 63 63 63 
38a86 af7 3E 00 00 00 
38a8a af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38a8e af9 63 00 3E 63 
38a92 afa 63 63 63 63 
38a96 afb 3E 00 00 00 
38a9a afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38a9e afd 00 00 63 36 
38aa2 afe 1C 1C 36 63 
38aa6 aff 00 00 00 00 
38aaa b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
38aae b01 BE 63 73 7B 
38ab2 b02 6B 6F 67 63 
38ab6 b03 3F 00 00 00 
38aba b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
38abe b05 0C 18 63 63 
38ac2 b06 63 63 63 63 
38ac6 b07 3E 00 00 00 
38aca b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38ace b09 18 0C 63 63 
38ad2 b0a 63 63 63 63 
38ad6 b0b 3E 00 00 00 
38ada b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38ade b0d 08 36 63 63 
38ae2 b0e 63 63 63 63 
38ae6 b0f 3E 00 00 00 
38aea b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38aee b11 63 00 63 63 
38af2 b12 63 63 63 63 
38af6 b13 3E 00 00 00 
38afa b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
38afe b15 30 18 C3 66 
38b02 b16 3C 18 18 18 
38b06 b17 18 00 00 00 
38b0a b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38b0e b19 03 03 3F 63 
38b12 b1a 63 3F 03 03 
38b16 b1b 03 00 00 00 
38b1a b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
38b1e b1d 3C 66 66 66 
38b22 b1e 36 66 66 66 
38b26 b1f 36 06 06 00 
38b2a b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
38b2e b21 06 0C 00 3C 
38b32 b22 60 7C 66 66 
38b36 b23 7C 00 00 00 
38b3a b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38b3e b25 60 30 00 3C 
38b42 b26 60 7C 66 66 
38b46 b27 7C 00 00 00 
38b4a b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38b4e b29 18 66 00 3C 
38b52 b2a 60 7C 66 66 
38b56 b2b 7C 00 00 00 
38b5a b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38b5e b2d 8E 71 00 3C 
38b62 b2e 60 7C 66 66 
38b66 b2f 7C 00 00 00 
38b6a b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38b6e b31 00 66 00 3C 
38b72 b32 60 7C 66 66 
38b76 b33 7C 00 00 00 
38b7a b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38b7e b35 18 24 18 3C 
38b82 b36 60 7C 66 66 
38b86 b37 7C 00 00 00 
38b8a b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38b8e b39 00 00 00 7E 
38b92 b3a D8 FE 1B 1B 
38b96 b3b EE 00 00 00 
38b9a b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
38b9e b3d 00 00 00 3C 
38ba2 b3e 06 06 06 06 
38ba6 b3f 3C 18 0C 00 
38baa b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
38bae b41 06 0C 00 3C 
38bb2 b42 66 7E 06 06 
38bb6 b43 3C 00 00 00 
38bba b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
38bbe b45 60 30 00 3C 
38bc2 b46 66 7E 06 06 
38bc6 b47 3C 00 00 00 
38bca b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
38bce b49 18 66 00 3C 
38bd2 b4a 66 7E 06 06 
38bd6 b4b 3C 00 00 00 
38bda b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
38bde b4d 00 66 00 3C 
38be2 b4e 66 7E 06 06 
38be6 b4f 3C 00 00 00 
38bea b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
38bee b51 0C 18 00 18 
38bf2 b52 18 18 18 18 
38bf6 b53 30 00 00 00 
38bfa b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
38bfe b55 18 0C 00 0C 
38c02 b56 0C 0C 0C 0C 
38c06 b57 18 00 00 00 
38c0a b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
38c0e b59 18 66 00 18 
38c12 b5a 18 18 18 18 
38c16 b5b 30 00 00 00 
38c1a b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
38c1e b5d 00 66 00 18 
38c22 b5e 18 18 18 18 
38c26 b5f 30 00 00 00 
38c2a b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
38c2e b61 03 06 3F 18 
38c32 b62 3C 66 66 66 
38c36 b63 3C 00 00 00 
38c3a b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
38c3e b65 8E 71 00 3E 
38c42 b66 66 66 66 66 
38c46 b67 66 00 00 00 
38c4a b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
38c4e b69 06 0C 00 3C 
38c52 b6a 66 66 66 66 
38c56 b6b 3C 00 00 00 
38c5a b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
38c5e b6d 60 30 00 3C 
38c62 b6e 66 66 66 66 
38c66 b6f 3C 00 00 00 
38c6a b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
38c6e b71 18 66 00 3C 
38c72 b72 66 66 66 66 
38c76 b73 3C 00 00 00 
38c7a b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
38c7e b75 8E 71 00 3C 
38c82 b76 66 66 66 66 
38c86 b77 3C 00 00 00 
38c8a b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
38c8e b79 00 66 00 3C 
38c92 b7a 66 66 66 66 
38c96 b7b 3C 00 00 00 
38c9a b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
38c9e b7d 00 18 18 00 
38ca2 b7e 7E 00 18 18 
38ca6 b7f 00 00 00 00 
38caa b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38cae b81 00 00 00 7E 
38cb2 b82 73 7B 6F 67 
38cb6 b83 3F 00 00 00 
38cba b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
38cbe b85 0C 18 00 66 
38cc2 b86 66 66 66 66 
38cc6 b87 7C 00 00 00 
38cca b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38cce b89 30 18 00 66 
38cd2 b8a 66 66 66 66 
38cd6 b8b 7C 00 00 00 
38cda b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38cde b8d 18 66 00 66 
38ce2 b8e 66 66 66 66 
38ce6 b8f 7C 00 00 00 
38cea b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38cee b91 00 66 00 66 
38cf2 b92 66 66 66 66 
38cf6 b93 7C 00 00 00 
38cfa b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
38cfe b95 30 18 00 66 
38d02 b96 66 66 66 3C 
38d06 b97 18 0C 06 00 
38d0a b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
38d0e b99 06 06 06 3E 
38d12 b9a 66 66 66 3E 
38d16 b9b 06 06 06 00 
38d1a b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
38d1e b9d 00 66 00 66 
38d22 b9e 66 66 66 3C 
38d26 b9f 18 0C 06 00 
38d2a ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
38d2e ba1 00 7E 66 66 
38d32 ba2 66 66 66 66 
38d36 ba3 66 7E 00 00 
38d3a ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
38d3e ba5 00 00 00 00 
      ...             
38f46 c27 00 00 00 00 
38f4a c28 00 00       | 	byte	$00[526]
38f4c c29 00 00 00 00 
38f50 c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
38f51 c2a 80 00 00 00 
38f55 c2b 00 80 00 00 
38f59 c2c 80 80 00 00 
38f5d c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
38f61 c2e 80 00 80 00 
38f65 c2f 00 40 80 00 
38f69 c30 AA AA AA 00 
38f6d c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
38f71 c32 FF 00 00 00 
38f75 c33 00 FF 00 00 
38f79 c34 FF FF 00 00 
38f7d c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
38f81 c36 FF 00 FF 00 
38f85 c37 00 FF FF 00 
38f89 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
38f8c c39 00 00 00 00 
38f90 c3a 00          | ataripalette   file "ataripalettep2.def"
38f91 c3a 11 11 11 00 
38f95 c3b 22 22 22 00 
38f99 c3c 33 33 33 00 
38f9d c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
38fa1 c3e 55 55 55 00 
38fa5 c3f 66 66 66 00 
38fa9 c40 77 77 77 00 
38fad c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
38fb1 c42 99 99 99 00 
38fb5 c43 AA AA AA 00 
38fb9 c44 BB BB BB 00 
38fbd c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
38fc1 c46 DD DD DD 00 
38fc5 c47 EE EE EE 00 
38fc9 c48 FF FF FF 00 
38fcd c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
38fd1 c4a 00 14 40 00 
38fd5 c4b 00 1E 60 00 
38fd9 c4c 00 28 80 00 
38fdd c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
38fe1 c4e 00 3C BF 00 
38fe5 c4f 00 46 DF 00 
38fe9 c50 00 50 FF 00 
38fed c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
38ff1 c52 39 77 FF 00 
38ff5 c53 55 8A FF 00 
38ff9 c54 71 9E FF 00 
38ffd c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39001 c56 AA C5 FF 00 
39005 c57 C6 D8 FF 00 
39009 c58 E3 EC FF 00 
3900d c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39011 c5a 00 00 40 00 
39015 c5b 00 00 60 00 
39019 c5c 00 00 80 00 
3901d c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39021 c5e 00 00 BF 00 
39025 c5f 00 00 DF 00 
39029 c60 00 00 FF 00 
3902d c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39031 c62 39 39 FF 00 
39035 c63 55 55 FF 00 
39039 c64 71 71 FF 00 
3903d c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39041 c66 AA AA FF 00 
39045 c67 C6 C6 FF 00 
39049 c68 E3 E3 FF 00 
3904d c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39051 c6a 20 00 40 00 
39055 c6b 30 00 60 00 
39059 c6c 40 00 80 00 
3905d c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39061 c6e 60 00 BF 00 
39065 c6f 70 00 DF 00 
39069 c70 80 00 FF 00 
3906d c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39071 c72 9C 39 FF 00 
39075 c73 AA 55 FF 00 
39079 c74 B8 71 FF 00 
3907d c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39081 c76 D5 AA FF 00 
39085 c77 E3 C6 FF 00 
39089 c78 F1 E3 FF 00 
3908d c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39091 c7a 40 00 40 00 
39095 c7b 60 00 60 00 
39099 c7c 80 00 80 00 
3909d c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
390a1 c7e BF 00 BF 00 
390a5 c7f DF 00 DF 00 
390a9 c80 FF 00 FF 00 
390ad c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
390b1 c82 FF 39 FF 00 
390b5 c83 FF 55 FF 00 
390b9 c84 FF 71 FF 00 
390bd c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
390c1 c86 FF AA FF 00 
390c5 c87 FF C6 FF 00 
390c9 c88 FF E3 FF 00 
390cd c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
390d1 c8a 40 00 20 00 
390d5 c8b 60 00 30 00 
390d9 c8c 80 00 40 00 
390dd c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
390e1 c8e BF 00 60 00 
390e5 c8f DF 00 70 00 
390e9 c90 FF 00 80 00 
390ed c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
390f1 c92 FF 39 9C 00 
390f5 c93 FF 55 AA 00 
390f9 c94 FF 71 B8 00 
390fd c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39101 c96 FF AA D5 00 
39105 c97 FF C6 E3 00 
39109 c98 FF E3 F1 00 
3910d c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39111 c9a 40 00 00 00 
39115 c9b 60 00 00 00 
39119 c9c 80 00 00 00 
3911d c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39121 c9e BF 00 00 00 
39125 c9f DF 00 00 00 
39129 ca0 FF 00 00 00 
3912d ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39131 ca2 FF 39 39 00 
39135 ca3 FF 55 55 00 
39139 ca4 FF 71 71 00 
3913d ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39141 ca6 FF AA AA 00 
39145 ca7 FF C6 C6 00 
39149 ca8 FF E3 E3 00 
3914d ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39151 caa 40 10 00 00 
39155 cab 60 18 00 00 
39159 cac 80 20 00 00 
3915d cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39161 cae BF 30 00 00 
39165 caf DF 38 00 00 
39169 cb0 FF 40 00 00 
3916d cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39171 cb2 FF 6A 39 00 
39175 cb3 FF 80 55 00 
39179 cb4 FF 95 71 00 
3917d cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39181 cb6 FF BF AA 00 
39185 cb7 FF D5 C6 00 
39189 cb8 FF EA E3 00 
3918d cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39191 cba 40 20 00 00 
39195 cbb 60 30 00 00 
39199 cbc 80 40 00 00 
3919d cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
391a1 cbe BF 60 00 00 
391a5 cbf DF 70 00 00 
391a9 cc0 FF 80 00 00 
391ad cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
391b1 cc2 FF 9C 39 00 
391b5 cc3 FF AA 55 00 
391b9 cc4 FF B8 71 00 
391bd cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
391c1 cc6 FF D5 AA 00 
391c5 cc7 FF E3 C6 00 
391c9 cc8 FF F1 E3 00 
391cd cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
391d1 cca 40 30 00 00 
391d5 ccb 60 48 00 00 
391d9 ccc 80 60 00 00 
391dd ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
391e1 cce BF 90 00 00 
391e5 ccf DF A8 00 00 
391e9 cd0 FF C0 00 00 
391ed cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
391f1 cd2 FF CE 39 00 
391f5 cd3 FF D5 55 00 
391f9 cd4 FF DC 71 00 
391fd cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39201 cd6 FF EA AA 00 
39205 cd7 FF F1 C6 00 
39209 cd8 FF F8 E3 00 
3920d cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39211 cda 30 40 00 00 
39215 cdb 48 60 00 00 
39219 cdc 60 80 00 00 
3921d cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39221 cde 90 BF 00 00 
39225 cdf A8 DF 00 00 
39229 ce0 C0 FF 00 00 
3922d ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39231 ce2 CE FF 39 00 
39235 ce3 D5 FF 55 00 
39239 ce4 DC FF 71 00 
3923d ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39241 ce6 EA FF AA 00 
39245 ce7 F1 FF C6 00 
39249 ce8 F8 FF E3 00 
3924d ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39251 cea 00 40 00 00 
39255 ceb 00 60 00 00 
39259 cec 00 80 00 00 
3925d ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39261 cee 00 BF 00 00 
39265 cef 00 DF 00 00 
39269 cf0 00 FF 00 00 
3926d cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39271 cf2 39 FF 39 00 
39275 cf3 55 FF 55 00 
39279 cf4 71 FF 71 00 
3927d cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39281 cf6 AA FF AA 00 
39285 cf7 C6 FF C6 00 
39289 cf8 E3 FF E3 00 
3928d cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39291 cfa 00 40 14 00 
39295 cfb 00 60 1E 00 
39299 cfc 00 80 28 00 
3929d cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
392a1 cfe 00 BF 3C 00 
392a5 cff 00 DF 46 00 
392a9 d00 00 FF 50 00 
392ad d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
392b1 d02 39 FF 77 00 
392b5 d03 55 FF 8A 00 
392b9 d04 71 FF 9E 00 
392bd d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
392c1 d06 AA FF C5 00 
392c5 d07 C6 FF D8 00 
392c9 d08 E3 FF EC 00 
392cd d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
392d1 d0a 00 40 28 00 
392d5 d0b 00 60 3C 00 
392d9 d0c 00 80 50 00 
392dd d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
392e1 d0e 00 BF 78 00 
392e5 d0f 00 DF 8C 00 
392e9 d10 00 FF A0 00 
392ed d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
392f1 d12 39 FF B5 00 
392f5 d13 55 FF C0 00 
392f9 d14 71 FF CA 00 
392fd d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39301 d16 AA FF DF 00 
39305 d17 C6 FF EA 00 
39309 d18 E3 FF F4 00 
3930d d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39311 d1a 00 40 40 00 
39315 d1b 00 60 60 00 
39319 d1c 00 80 80 00 
3931d d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39321 d1e 00 BF BF 00 
39325 d1f 00 DF DF 00 
39329 d20 00 FF FF 00 
3932d d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39331 d22 39 FF FF 00 
39335 d23 55 FF FF 00 
39339 d24 71 FF FF 00 
3933d d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39341 d26 AA FF FF 00 
39345 d27 C6 FF FF 00 
39349 d28 E3 FF FF 00 
3934d d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39351 d2a 00 28 40 00 
39355 d2b 00 3C 60 00 
39359 d2c 00 50 80 00 
3935d d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39361 d2e 00 78 BF 00 
39365 d2f 00 8C DF 00 
39369 d30 00 A0 FF 00 
3936d d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39371 d32 39 B5 FF 00 
39375 d33 55 C0 FF 00 
39379 d34 71 CA FF 00 
3937d d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39381 d36 AA DF FF 00 
39385 d37 C6 EA FF 00 
39389 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3938c d39 00 00 00 00 
39390 d3a 00          | ataripalette2  file "ataripalettep2.def"
39391 d3a 11 11 11 00 
39395 d3b 22 22 22 00 
39399 d3c 33 33 33 00 
3939d d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
393a1 d3e 55 55 55 00 
393a5 d3f 66 66 66 00 
393a9 d40 77 77 77 00 
393ad d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
393b1 d42 99 99 99 00 
393b5 d43 AA AA AA 00 
393b9 d44 BB BB BB 00 
393bd d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
393c1 d46 DD DD DD 00 
393c5 d47 EE EE EE 00 
393c9 d48 FF FF FF 00 
393cd d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
393d1 d4a 00 14 40 00 
393d5 d4b 00 1E 60 00 
393d9 d4c 00 28 80 00 
393dd d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
393e1 d4e 00 3C BF 00 
393e5 d4f 00 46 DF 00 
393e9 d50 00 50 FF 00 
393ed d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
393f1 d52 39 77 FF 00 
393f5 d53 55 8A FF 00 
393f9 d54 71 9E FF 00 
393fd d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39401 d56 AA C5 FF 00 
39405 d57 C6 D8 FF 00 
39409 d58 E3 EC FF 00 
3940d d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39411 d5a 00 00 40 00 
39415 d5b 00 00 60 00 
39419 d5c 00 00 80 00 
3941d d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39421 d5e 00 00 BF 00 
39425 d5f 00 00 DF 00 
39429 d60 00 00 FF 00 
3942d d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39431 d62 39 39 FF 00 
39435 d63 55 55 FF 00 
39439 d64 71 71 FF 00 
3943d d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39441 d66 AA AA FF 00 
39445 d67 C6 C6 FF 00 
39449 d68 E3 E3 FF 00 
3944d d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39451 d6a 20 00 40 00 
39455 d6b 30 00 60 00 
39459 d6c 40 00 80 00 
3945d d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39461 d6e 60 00 BF 00 
39465 d6f 70 00 DF 00 
39469 d70 80 00 FF 00 
3946d d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39471 d72 9C 39 FF 00 
39475 d73 AA 55 FF 00 
39479 d74 B8 71 FF 00 
3947d d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39481 d76 D5 AA FF 00 
39485 d77 E3 C6 FF 00 
39489 d78 F1 E3 FF 00 
3948d d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39491 d7a 40 00 40 00 
39495 d7b 60 00 60 00 
39499 d7c 80 00 80 00 
3949d d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
394a1 d7e BF 00 BF 00 
394a5 d7f DF 00 DF 00 
394a9 d80 FF 00 FF 00 
394ad d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
394b1 d82 FF 39 FF 00 
394b5 d83 FF 55 FF 00 
394b9 d84 FF 71 FF 00 
394bd d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
394c1 d86 FF AA FF 00 
394c5 d87 FF C6 FF 00 
394c9 d88 FF E3 FF 00 
394cd d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
394d1 d8a 40 00 20 00 
394d5 d8b 60 00 30 00 
394d9 d8c 80 00 40 00 
394dd d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
394e1 d8e BF 00 60 00 
394e5 d8f DF 00 70 00 
394e9 d90 FF 00 80 00 
394ed d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
394f1 d92 FF 39 9C 00 
394f5 d93 FF 55 AA 00 
394f9 d94 FF 71 B8 00 
394fd d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39501 d96 FF AA D5 00 
39505 d97 FF C6 E3 00 
39509 d98 FF E3 F1 00 
3950d d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39511 d9a 40 00 00 00 
39515 d9b 60 00 00 00 
39519 d9c 80 00 00 00 
3951d d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39521 d9e BF 00 00 00 
39525 d9f DF 00 00 00 
39529 da0 FF 00 00 00 
3952d da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39531 da2 FF 39 39 00 
39535 da3 FF 55 55 00 
39539 da4 FF 71 71 00 
3953d da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39541 da6 FF AA AA 00 
39545 da7 FF C6 C6 00 
39549 da8 FF E3 E3 00 
3954d da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39551 daa 40 10 00 00 
39555 dab 60 18 00 00 
39559 dac 80 20 00 00 
3955d dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39561 dae BF 30 00 00 
39565 daf DF 38 00 00 
39569 db0 FF 40 00 00 
3956d db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39571 db2 FF 6A 39 00 
39575 db3 FF 80 55 00 
39579 db4 FF 95 71 00 
3957d db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39581 db6 FF BF AA 00 
39585 db7 FF D5 C6 00 
39589 db8 FF EA E3 00 
3958d db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39591 dba 40 20 00 00 
39595 dbb 60 30 00 00 
39599 dbc 80 40 00 00 
3959d dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
395a1 dbe BF 60 00 00 
395a5 dbf DF 70 00 00 
395a9 dc0 FF 80 00 00 
395ad dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
395b1 dc2 FF 9C 39 00 
395b5 dc3 FF AA 55 00 
395b9 dc4 FF B8 71 00 
395bd dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
395c1 dc6 FF D5 AA 00 
395c5 dc7 FF E3 C6 00 
395c9 dc8 FF F1 E3 00 
395cd dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
395d1 dca 40 30 00 00 
395d5 dcb 60 48 00 00 
395d9 dcc 80 60 00 00 
395dd dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
395e1 dce BF 90 00 00 
395e5 dcf DF A8 00 00 
395e9 dd0 FF C0 00 00 
395ed dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
395f1 dd2 FF CE 39 00 
395f5 dd3 FF D5 55 00 
395f9 dd4 FF DC 71 00 
395fd dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39601 dd6 FF EA AA 00 
39605 dd7 FF F1 C6 00 
39609 dd8 FF F8 E3 00 
3960d dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39611 dda 30 40 00 00 
39615 ddb 48 60 00 00 
39619 ddc 60 80 00 00 
3961d ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39621 dde 90 BF 00 00 
39625 ddf A8 DF 00 00 
39629 de0 C0 FF 00 00 
3962d de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39631 de2 CE FF 39 00 
39635 de3 D5 FF 55 00 
39639 de4 DC FF 71 00 
3963d de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39641 de6 EA FF AA 00 
39645 de7 F1 FF C6 00 
39649 de8 F8 FF E3 00 
3964d de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39651 dea 00 40 00 00 
39655 deb 00 60 00 00 
39659 dec 00 80 00 00 
3965d ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39661 dee 00 BF 00 00 
39665 def 00 DF 00 00 
39669 df0 00 FF 00 00 
3966d df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39671 df2 39 FF 39 00 
39675 df3 55 FF 55 00 
39679 df4 71 FF 71 00 
3967d df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39681 df6 AA FF AA 00 
39685 df7 C6 FF C6 00 
39689 df8 E3 FF E3 00 
3968d df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39691 dfa 00 40 14 00 
39695 dfb 00 60 1E 00 
39699 dfc 00 80 28 00 
3969d dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
396a1 dfe 00 BF 3C 00 
396a5 dff 00 DF 46 00 
396a9 e00 00 FF 50 00 
396ad e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
396b1 e02 39 FF 77 00 
396b5 e03 55 FF 8A 00 
396b9 e04 71 FF 9E 00 
396bd e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
396c1 e06 AA FF C5 00 
396c5 e07 C6 FF D8 00 
396c9 e08 E3 FF EC 00 
396cd e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
396d1 e0a 00 40 28 00 
396d5 e0b 00 60 3C 00 
396d9 e0c 00 80 50 00 
396dd e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
396e1 e0e 00 BF 78 00 
396e5 e0f 00 DF 8C 00 
396e9 e10 00 FF A0 00 
396ed e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
396f1 e12 39 FF B5 00 
396f5 e13 55 FF C0 00 
396f9 e14 71 FF CA 00 
396fd e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39701 e16 AA FF DF 00 
39705 e17 C6 FF EA 00 
39709 e18 E3 FF F4 00 
3970d e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39711 e1a 00 40 40 00 
39715 e1b 00 60 60 00 
39719 e1c 00 80 80 00 
3971d e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39721 e1e 00 BF BF 00 
39725 e1f 00 DF DF 00 
39729 e20 00 FF FF 00 
3972d e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39731 e22 39 FF FF 00 
39735 e23 55 FF FF 00 
39739 e24 71 FF FF 00 
3973d e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39741 e26 AA FF FF 00 
39745 e27 C6 FF FF 00 
39749 e28 E3 FF FF 00 
3974d e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39751 e2a 00 28 40 00 
39755 e2b 00 3C 60 00 
39759 e2c 00 50 80 00 
3975d e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39761 e2e 00 78 BF 00 
39765 e2f 00 8C DF 00 
39769 e30 00 A0 FF 00 
3976d e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39771 e32 39 B5 FF 00 
39775 e33 55 C0 FF 00 
39779 e34 71 CA FF 00 
3977d e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39781 e36 AA DF FF 00 
39785 e37 C6 EA FF 00 
39789 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3978c e39             | 
3978c e39             | '**********************************************************************************
3978c e39             | '
3978c e39             | '        Timings and colors definitions
3978c e39             | '
3978c e39             | '**********************************************************************************
3978c e39             | 
3978c e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3978c e39 08 00 00 00 
39790 e3a 3C 00 00 00 
39794 e3b 08 00 00 00 
39798 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3979c e3d 07 00 00 00 
397a0 e3e 04 00 00 00 
397a4 e3f 01 00 00 00 
397a8 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
397ac e41 58 02 00 00 
397b0 e42 20 9E 4B 14 
397b4 e43 FB A8 9E 01 
397b8 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
397bc e45 00 00 00 00 
397c0 e46 C0 00 00 00 
397c4 e47 00 00 00 00 
397c8 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
397cc e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
397cc e49 00 75 C7 97 
397d0 e4a 27 47 F6 0A 
397d4 e4b 05 79 CB 9B 
397d8 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
397dc e4d             | 
397dc e4d             | ''--------  Initialization  ----------------------------------------------------------------
397dc e4d             | 
397dc e4d 28 0C 64 FD | hdmi            setq    #6
397e0 e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
397e4 e4f 28 10 64 FD |                 setq    #8
397e8 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
397ec e51             | 
397ec e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
397f0 e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
397f4 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
397f8 e54 D6 C6 01 F1 |                 add     t1,hbase
397fc e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
39800 e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
39804 e57 7B 0B 80 5F 
39808 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3980c e59 66 66 86 FF 
39810 e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
39814 e5b             | '
39814 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
39818 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3981c e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
39820 e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
39824 e5f             | 
39824 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
39828 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3982c e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
39830 e62             | 
39830 e62             | ''--------  frame rendering main loop  ---------------------------------------------------
39830 e62             | 
39830 e62 28 06 64 FD | p101            setq 	#3
39834 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
39838 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3983c e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
39840 e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
39844 e67 00 A0 05 F6 |                 mov     dlinum, #0
39848 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3984c e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
39850 e6a             | 
39850 e6a             | 
39850 e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
39854 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
39858 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3985c e6d             |                 
3985c e6d             | 
3985c e6d             | 
3985c e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3985c e6d             |   
3985c e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
39860 e6e 29 FE 65 3D |          if_nc  setq2   #255
39864 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
39868 e70             | 
39868 e70             | '' -----   up porch (before the picture)
39868 e70             | 
39868 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3986c e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
39870 e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
39874 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
39878 e74             |  
39878 e74             |    
39878 e74             |  
39878 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3987c e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
39880 e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
39884 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39888 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3988c e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
39890 e7a             | 
39890 e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39894 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
39898 e7c 48 00 B0 FD | 		call    #dli
3989c e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
398a0 e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
398a4 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
398a8 e80             |                 	
398a8 e80             |                 
398a8 e80             | 
398a8 e80             |  
398a8 e80             | '' ------- the main screen drawing starts here
398a8 e80             | 
398a8 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
398ac e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
398b0 e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
398b4 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
398b8 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
398bc e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
398c0 e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
398c4 e87             |               
398c4 e87             | 
398c4 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
398c8 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
398cc e89             | 
398cc e89             | ' ---------------- All visible lines displayed now, start vblank  
398cc e89             | 
398cc e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
398d0 e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
398d4 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
398d8 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
398dc e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
398e0 e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
398e4 e8f             | 
398e4 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
398e4 e8f             | 
398e4 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
398e4 e8f             | 
398e4 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
398e8 e90             | 
398e8 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
398ec e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
398f0 e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
398f4 e93             | 
398f4 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
398f8 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
398fc e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
39900 e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
39904 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
39908 e98             | 
39908 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3990c e99 DD C6 41 F8 |                 getnib  t1,dl,#0
39910 e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
39914 e9b 70 00 90 AD |     if_z        jmp     #preload
39918 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3991c e9d 94 00 90 AD |     if_z        jmp     #preload2
39920 e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
39924 e9f 0C 00 90 AD |     if_z        jmp     #p390
39928 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3992c ea1 28 00 90 AD |     if_z        jmp     #p391  
39930 ea2             | 
39930 ea2 2D 00 64 FD | p308            ret
39934 ea3             |    
39934 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
39938 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3993c ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
39940 ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
39944 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
39948 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3994c ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
39950 eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
39954 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
39958 eac             |  
39958 eac             | '' --------  Reload palette. To do 
39958 eac             | 
39958 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3995c ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
39960 eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
39964 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
39968 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3996c eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
39970 eb2 70 FF 9F FD |         	jmp     #dli                
39974 eb3             |       
39974 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
39974 eb3             | 
39974 eb3             | 
39974 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
39974 eb3             | 
39974 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
39978 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3997c eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39980 eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
39984 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
39988 eb8             |         
39988 eb8             | '' -------------- Preload a line from PSRAM        
39988 eb8             |         
39988 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3998c eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
39990 eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
39994 ebb DE B4 01 F6 |                 mov     buf1,buf1c
39998 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3999c ebd             | 
3999c ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
399a0 ebe 32 B7 01 F6 |                 mov     buf2,a1024
399a4 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
399a8 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
399ac ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
399b0 ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
399b4 ec3             |  
399b4 ec3             |  
399b4 ec3             | preload2      '  incmod  dlinum,#3
399b4 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
399b8 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
399bc ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
399c0 ec6 28 02 64 FD |                 setq	#1
399c4 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
399c8 ec8             |                 
399c8 ec8             | 
399c8 ec8             | '' -------------- Draw sprites
399c8 ec8             | 
399c8 ec8 CF 5C 02 F6 | sprite          mov t8,frames
399cc ec9 10 5C 0E F5 | 		and t8,#16 wz
399d0 eca 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
399d4 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
399d8 ecc             | 		
399d8 ecc             | 
399d8 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
399dc ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
399e0 ece EF 56 96 F9 |                 alts    t5,#sprite1xy
399e4 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
399e8 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
399ec ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
399f0 ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
399f4 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
399f8 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
399fc ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
39a00 ed6 01 52 86 F1 |                 sub     sprite_h,#1
39a04 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
39a08 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
39a0c ed9             | 
39a0c ed9             | 
39a0c ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
39a10 eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
39a14 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
39a18 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
39a1c edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
39a20 ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
39a24 edf 00 5E 06 F6 |                 mov 	t9,#0
39a28 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
39a2c ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
39a30 ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
39a34 ee3             |      
39a34 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
39a38 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
39a3c ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
39a40 ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
39a44 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
39a48 ee8             |                 
39a48 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
39a4c ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
39a50 eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
39a54 eeb             |   		
39a54 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
39a58 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
39a5c eed             | 
39a5c eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
39a60 eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
39a64 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
39a68 ef0             |  
39a68 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
39a6c ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
39a70 ef2 10 00 90 CD |      if_c 	jmp     #p899		
39a74 ef3             | 	
39a74 ef3             | 	
39a74 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
39a78 ef4 28 CD 01 F1 | 		add	t4,sprite_w
39a7c ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
39a80 ef6             | 
39a80 ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
39a84 ef7             | 
39a84 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
39a88 ef8 01 58 86 F1 | 	 	sub     t6,#1
39a8c ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
39a90 efa             | 
39a90 efa 28 58 62 FD |                 setq   	t6
39a94 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
39a98 efc 28 5D 02 F6 |                 mov t8,sprite_w
39a9c efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
39aa0 efe 24 00 90 AD |         if_z    jmp #p898
39aa4 eff             |          
39aa4 eff             |         
39aa4 eff 70 5F 06 F6 |                 mov  t9,#368
39aa8 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
39aac f01             | 
39aac f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
39ab0 f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
39ab4 f03 FF FF 7F FF 
39ab8 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
39abc f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
39ac0 f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
39ac4 f07 2D 01 00 F5 |                 and 0-0, t7
39ac8 f08             |                
39ac8 f08             | 
39ac8 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
39acc f09 E5 E0 7A FA |                 wmlong 368,t3				
39ad0 f0a             |                 
39ad0 f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
39ad4 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
39ad8 f0c 2D 00 64 FD |                 ret
39adc f0d             | 	
39adc f0d             | 	
39adc f0d             |                
39adc f0d             |  
39adc f0d             | '' -------------- Graphics line ------------------------------------------------------------
39adc f0d             |  
39adc f0d             | 
39adc f0d             | '' consts and vars
39adc f0d             | 
39adc f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
39ae0 f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
39ae4 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
39ae8 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
39aec f11             | 
39aec f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
39af0 f12             | 
39af0 f12             | '------ these longs will be set by setmode function
39af0 f12             | 
39af0 f12 00 00 00 00 | m_bs            long    0        'blanks before sync
39af4 f13 00 00 00 00 | m_sn            long    0        'sync
39af8 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
39afc f15 00 00 00 00 | m_vi            long    0        'visible pixels #
39b00 f16             | 'm_border        long    0        'left/right borders
39b00 f16 00 00 00 00 | i_upporch       long    0        'up porch lines
39b04 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
39b08 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
39b0c f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
39b10 f1a 00 00 00 00 | i_totalvis      long    0
39b14 f1b             | 
39b14 f1b             | '-------------------------------------
39b14 f1b             |  
39b14 f1b 00 00 00 00 | linenum         long    0
39b18 f1c 00 00 00 00 | frames          long    0
39b1c f1d 00 00 00 00 | dlinum long 0
39b20 f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
39b24 f1f             | 
39b24 f1f 00 00 00 00 | vblankptr       long    0
39b28 f20 00 00 00 00 | modeptr         long    0
39b2c f21 00 00 00 00 | paletteptr      long    0
39b30 f22 00 00 00 00 | dlptr           long    0
39b34 f23 01 00 00 00 | hbase           long    1
39b38 f24 00 00 00 00 | mailbox         long    0
39b3c f25 00 00 00 00 | spriteptr          long 0
39b40 f26             | 
39b40 f26 00 00 00 00 | cmd             long    0
39b44 f27 00 EC 07 00 | buf1            long    $80000-1024-4096
39b48 f28 00 04 00 00 | buf2            long    1024
39b4c f29 01 00 00 00 | dlptr2          long    1
39b50 f2a 01 00 00 00 | dl              long    1
39b54 f2b             | 
39b54 f2b 00 00 00 00 | buf1c long 0
39b58 f2c 00 EC 07 00 | buf1d            long    $80000-1024-4096
39b5c f2d 01 00 00 00 | framebuf2       long    1
39b60 f2e 01 00 00 00 | hsync0          long    1
39b64 f2f 01 00 00 00 | hsync1          long    1
39b68 f30             | 
39b68 f30 01 00 00 00 | t1              long    1
39b6c f31 00 00 00 00 | t2 long 0
39b70 f32 00 00 00 00 | t3 long 0
39b74 f33 00 00 00 00 | t4 long 0
39b78 f34             | 
39b78 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
39b7c f35 00 00 00 00 | rcnt2           long    0
39b80 f36 00 00 00 00 | rcnt2a          long    0
39b84 f37 00 00 00 00 | roffset         long    0
39b88 f38 00 00 00 00 | rdl             long    0  'dl repeat line
39b8c f39 00 00 00 00 | dlc             long    0  'dl command
39b90 f3a             | 
39b90 f3a FF FF FF FF | affffffff       long    $ffffffff
39b94 f3b 00 00 00 00 | sprite1pointer long 0
39b98 f3c 00 00 00 00 | sprite1xy      long 0
39b9c f3d 00 00 00 00 | sprite1wh      long 0
39ba0 f3e 00 00 00 00 | sprite2pointer long 0
39ba4 f3f 00 00 00 00 | sprite2xy      long 0
39ba8 f40 00 00 00 00 | sprite2wh      long 0
39bac f41 00 00 00 00 | sprite3pointer long 0
39bb0 f42 00 00 00 00 | sprite3xy      long 0
39bb4 f43 00 00 00 00 | sprite3wh      long 0
39bb8 f44 00 00 00 00 | sprite4pointer long 0
39bbc f45 00 00 00 00 | sprite4xy      long 0
39bc0 f46 00 00 00 00 | sprite4wh      long 0
39bc4 f47 00 00 00 00 | sprite5pointer long 0
39bc8 f48 00 00 00 00 | sprite5xy      long 0
39bcc f49 00 00 00 00 | sprite5wh      long 0
39bd0 f4a 00 00 00 00 | sprite6pointer long 0
39bd4 f4b 00 00 00 00 | sprite6xy      long 0
39bd8 f4c 00 00 00 00 | sprite6wh      long 0
39bdc f4d 00 00 00 00 | sprite7pointer long 0
39be0 f4e 00 00 00 00 | sprite7xy      long 0
39be4 f4f 00 00 00 00 | sprite7wh      long 0
39be8 f50 00 00 00 00 | sprite8pointer long 0
39bec f51 00 00 00 00 | sprite8xy      long 0
39bf0 f52 00 00 00 00 | sprite8wh      long 0
39bf4 f53 00 00 00 00 | sprite9pointer long 0
39bf8 f54 00 00 00 00 | sprite9xy      long 0
39bfc f55 00 00 00 00 | sprite9wh      long 0
39c00 f56 00 00 00 00 | sprite10pointer long 0
39c04 f57 00 00 00 00 | sprite10xy      long 0
39c08 f58 00 00 00 00 | sprite10wh      long 0
39c0c f59 00 00 00 00 | sprite11pointer long 0
39c10 f5a 00 00 00 00 | sprite11xy      long 0
39c14 f5b 00 00 00 00 | sprite11wh      long 0
39c18 f5c 00 00 00 00 | sprite12pointer long 0
39c1c f5d 00 00 00 00 | sprite12xy      long 0
39c20 f5e 00 00 00 00 | sprite12wh      long 0
39c24 f5f 00 00 00 00 | sprite13pointer long 0
39c28 f60 00 00 00 00 | sprite13xy      long 0
39c2c f61 00 00 00 00 | sprite13wh      long 0
39c30 f62 00 00 00 00 | sprite14pointer long 0
39c34 f63 00 00 00 00 | sprite14xy      long 0
39c38 f64 00 00 00 00 | sprite14wh      long 0
39c3c f65 00 00 00 00 | sprite15pointer long 0
39c40 f66 00 00 00 00 | sprite15xy      long 0
39c44 f67 00 00 00 00 | sprite15wh      long 0
39c48 f68 00 00 00 00 | sprite16pointer long 0
39c4c f69 00 00 00 00 | sprite16xy      long 0
39c50 f6a 00 00 00 00 | sprite16wh      long 0
39c54 f6b 00 00 00 00 | sprite17pointer long 0
39c58 f6c 00 00 00 00 | sprite17xy      long 0
39c5c f6d 00 00 00 00 | sprite17wh      long 0
39c60 f6e 00 00 00 00 | sprite18pointer long 0
39c64 f6f 00 00 00 00 | sprite18xy      long 0
39c68 f70 00 00 00 00 | sprite18wh      long 0
39c6c f71 00 00 00 00 | spritenum long 0
39c70 f72             | 
39c70 f72 00 00 00 00 | spriteline long 0
39c74 f73 84 03 00 00 | sprite_x long 900
39c78 f74 00 00 00 00 | sprite_y long 0
39c7c f75 10 00 00 00 | sprite_w long 16
39c80 f76 40 00 00 00 | sprite_h long 64
39c84 f77 00 00 00 00 | l2 long 0
39c88 f78 00 00 00 00 | t5 long 0
39c8c f79 00 00 00 00 | t6 long 0
39c90 f7a 00 00 00 00 | t7 long 0
39c94 f7b 00 00 00 00 | t8 long 0
39c98 f7c 00 00 00 00 | t9 long 0
39c9c f7d 00 00 00 00 | preloadaddr long 0
39ca0 f7e 00 00 00 00 | preloadlineaddr long 0
39ca4 f7f 00 04 00 00 | a1024 long 1024
39ca8 f80             | 
39ca8 f80 E0 03 00 00 | aa long 992
39cac f81 FF 03 00 00 | a1023 long 1023
39cb0 f82 00 10 00 00 | a4096 long 4096
39cb4 f83             |  fit 368
39cb4 f83             |  fit 368
39cb4 f83             | _psram_spin2_dat_
39cb4 f83 00 00 00 00 
      ...             
39dac fc1 00 00 00 00 
39db0 fc2 00 00 00 00 |     listdata long 0[8*8]
39db4 fc3             |             orgh
39db4                 | 
39db4                 | ' driver state
39db4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
39db8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
39dbc                 | 
39dbc                 | ' delay profile
39dbc     07 00 00 00 
39dc0     00 CF 7B 05 
39dc4     80 D1 F0 08 
39dc8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
39dcc     80 C4 60 0F 
39dd0     80 39 7A 12 
39dd4     40 2D D9 13 
39dd8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
39ddc                 | 
39ddc                 | ' data to be passed to driver when starting it
39ddc                 | startupData
39ddc     00 00 00 00 |     long    0           ' current frequency
39de0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
39de4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
39de8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
39dec     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
39df0     FC 9D 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
39df4     7C 9E 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
39df8     9C 9E 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
39dfc                 | 
39dfc                 | ' data for memory
39dfc                 | deviceData
39dfc                 |     ' 16 bank parameters follow (16MB per bank)
39dfc     00 00 00 00 
      ...             
39e34     00 00 00 00 
39e38     00 00 00 00 |     long    0[16]                               ' banks 0-15
39e3c                 |     ' 16 banks of pin parameters follow
39e3c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
39e40     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
39e44     FF FF FF FF 
      ...             
39e74     FF FF FF FF 
39e78     FF FF FF FF |     long    -1[14]                              ' banks 2-15
39e7c                 | 
39e7c                 | ' data for COG polling
39e7c                 | qosData 
39e7c     00 00 FF FF 
39e80     00 00 FF FF 
39e84     00 00 FF FF 
39e88     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
39e8c     00 00 FF FF 
39e90     00 00 FF FF 
39e94     00 00 FF FF 
39e98     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
39e9c                 |     
39e9c                 | ' mailbox storage
39e9c                 | 
39e9c                 | mailboxes
39e9c     00 00 00 00 
      ...             
39ef4     00 00 00 00 
39ef8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
39efc                 | 	alignl
39efc                 | _psram16drv_spin2_dat_
39efc                 |                             orgh
39efc     00 00 00 00 
      ...             
39f14     00 00 00 00 
39f18     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
39f1c                 | 
39f1c                 | driver_start
39f1c                 |                             org
39f1c 000             | '..................................................................................................
39f1c 000             | ' Memory layout for COG RAM once operational:
39f1c 000             | '
39f1c 000             | '  COG RAM address      Usage
39f1c 000             | '  ---------------      ----
39f1c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
39f1c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
39f1c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
39f1c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
39f1c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
39f1c 000             | '  ~$198-$1F3           State and register variables
39f1c 000             | '
39f1c 000             | ' Also during driver COG startup:
39f1c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
39f1c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
39f1c 000             | '..................................................................................................
39f1c 000             |                             
39f1c 000             | ' Mailbox storage after vector initialization
39f1c 000             | 
39f1c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
39f20 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
39f24 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
39f28 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
39f2c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
39f30 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
39f34 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
39f38 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
39f3c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
39f40 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
39f44 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
39f48 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
39f4c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
39f50 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
39f54 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
39f58 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
39f5c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
39f60 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
39f64 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
39f68 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
39f6c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
39f70 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
39f74 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
39f78 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
39f7c 018             | 
39f7c 018             | ' Mailbox parameter addresses per COG once patched
39f7c 018             |                             
39f7c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
39f80 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
39f84 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
39f88 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
39f8c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
39f90 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
39f94 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
39f98 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
39f9c 020             | 
39f9c 020             | '..................................................................................................
39f9c 020             | ' Per COG request and state setup and service branching
39f9c 020             |         
39f9c 020             | cog0                 
39f9c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
39fa0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
39fa4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
39fa8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
39fac 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39fb0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39fb4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
39fb8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
39fbc 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
39fc0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39fc4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
39fc8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
39fcc 02c             | cog1                        
39fcc 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
39fd0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
39fd4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
39fd8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
39fdc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39fe0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39fe4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
39fe8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
39fec 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
39ff0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39ff4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
39ff8 037 33 CA 63 FD |                             execf   request-0               'jump to service
39ffc 038             | cog2                         
39ffc 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a000 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a004 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a008 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a00c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a010 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a014 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a018 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a01c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a020 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a024 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a028 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a02c 044             | cog3                        
3a02c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a030 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a034 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a038 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a03c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a040 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a044 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a048 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a04c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a050 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a054 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a058 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3a05c 050             | cog4                        
3a05c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a060 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a064 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3a068 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a06c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a070 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a074 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3a078 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3a07c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3a080 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a084 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a088 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3a08c 05c             | cog5                        
3a08c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3a090 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3a094 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3a098 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3a09c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a0a0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a0a4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3a0a8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3a0ac 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3a0b0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a0b4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a0b8 067 33 CA 63 FD |                             execf   request-0               'jump to service
3a0bc 068             | cog6                        
3a0bc 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3a0c0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3a0c4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3a0c8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3a0cc 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a0d0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a0d4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3a0d8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3a0dc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3a0e0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a0e4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a0e8 073 33 CA 63 FD |                             execf   request-0               'jump to service
3a0ec 074             | cog7                        
3a0ec 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3a0f0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3a0f4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3a0f8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3a0fc 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a100 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a104 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3a108 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3a10c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3a110 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a114 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a118 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3a11c 080             | 
3a11c 080             |                             fit     128
3a11c 080             |                             fit     128
3a11c 080             | pad                         long    0[128-$]                'align init code to $80
3a11c 080             | 
3a11c 080             | '..................................................................................................
3a11c 080             | 
3a11c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3a11c 080             | 
3a11c 080             | init                        
3a11c 080             |                             ' get driver scratch long address in hub
3a11c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3a120 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3a124 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3a128 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3a12c 084             |                     
3a12c 084             |                             ' read in the additional LUT RAM code
3a12c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3a130 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3a134 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3a138 087             | 
3a138 087             |                             ' read the startup parameters
3a138 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3a13c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3a140 089             | 
3a140 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3a140 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3a144 08a             | 
3a144 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3a148 08b 01 00 00 5F 
3a14c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3a150 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3a154 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3a158 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3a15c 090             | 
3a15c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3a15c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3a160 091 01 00 00 FF 
3a164 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3a168 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3a16c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3a170 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3a174 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3a178 097 08 DE 47 F5 |                             or      a, #8
3a17c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3a180 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3a184 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3a188 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3a18c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3a190 09d 01 DE 07 F1 |                             add     a, #1
3a194 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3a198 09f             |  
3a198 09f             |                             ' setup device control pin states
3a198 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3a19c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3a1a0 0a1 01 00 00 FF 
3a1a4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3a1a8 0a3             | 
3a1a8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3a1ac 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3a1b0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3a1b4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3a1b8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3a1bc 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3a1c0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3a1c4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3a1c8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3a1cc 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3a1d0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3a1d4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3a1d8 0af             | pinloop
3a1d8 0af             |                             ' generate minimum CE high time before access
3a1d8 0af A1 07 00 FF 
3a1dc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3a1e0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3a1e4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3a1e8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3a1ec 0b4 1F DE 63 FD |                             waitx   a                       'delay
3a1f0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3a1f4 0b6             | 
3a1f4 0b6             |                             ' setup the COG mailboxes and addresses 
3a1f4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3a1f8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3a1fc 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3a200 0b9             | 
3a200 0b9 28 2E 64 FD |                             setq    #24-1
3a204 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3a208 0bb             | 
3a208 0bb             |                             ' setup the polling loop for active COGs 
3a208 0bb 01 C2 63 FD |                             cogid   id
3a20c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3a210 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3a214 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3a218 0bf 0A F0 07 F6 |                             mov     ptra, #10
3a21c 0c0 E1 F1 03 FA |                             mul     ptra, id
3a220 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3a224 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3a228 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3a22c 0c4 03 C2 07 FA |                             mul     id, #3
3a230 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3a234 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3a238 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3a23c 0c8 D8 01 B0 FD |                             call    #reloadcogs
3a240 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3a244 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3a248 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3a248 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3a24c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3a250 0cd 08 04 DC FC |                             rep     #2, #8
3a254 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3a258 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3a25c 0d0             | 
3a25c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3a25c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3a25c 0d0 01 C2 63 FD |                             cogid   id
3a260 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3a264 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3a268 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3a26c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3a270 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3a274 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3a278 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3a27c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3a280 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3a284 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a288 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3a28c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3a290 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3a294 0de A5 E5 03 F1 |                             add     d, const512
3a298 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a29c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3a2a0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3a2a4 0e2             |                             
3a2a4 0e2             |                             ' setup register values for control vector loop setup after we return
3a2a4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3a2a8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3a2ac 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3a2b0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3a2b4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3a2b8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3a2bc 0e8 D0 C3 8F F9 |                             altd    id, #id0
3a2c0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3a2c4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3a2c8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3a2cc 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3a2d0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3a2d4 0ee             |  
3a2d4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3a2d8 0ef 07 CA 07 F5 |                             and     request, #7
3a2dc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3a2e0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3a2e4 0f2             | 
3a2e4 0f2             |                             fit     $100                    'ensure all init code fits this space
3a2e4 0f2             |                             fit     $100                    'ensure all init code fits this space
3a2e4 0f2             | 
3a2e4 0f2 00 00 00 00 
      ...             
3a314 0fe 00 00 00 00 
3a318 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3a31c 100             | 
3a31c 100             | '..................................................................................................
3a31c 100             | ' Error result handling and COG notification of request completion
3a31c 100             | 
3a31c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3a320 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3a324 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3a328 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3a32c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3a330 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3a334 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3a338 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3a33c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3a340 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3a344 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3a348 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3a34c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3a350 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3a354 10e             | ' Poller re-starts here after a COG is serviced
3a354 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3a358 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3a35c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3a360 111             | ' Main dynamic polling loop repeats until a request arrives
3a360 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3a364 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3a368 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3a36c 114             | 
3a36c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3a370 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3a374 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3a378 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3a37c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3a380 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3a384 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3a388 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3a38c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3a390 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3a394 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3a398 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3a39c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3a3a0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3a3a4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3a3a8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3a3ac 124             | 
3a3ac 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3a3b0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3a3b4 126             |  
3a3b4 126             | '..................................................................................................
3a3b4 126             | ' List handler                               
3a3b4 126             | 
3a3b4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3a3b8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3a3bc 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3a3c0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3a3c4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3a3c8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3a3cc 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3a3d0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3a3d4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3a3d8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3a3dc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3a3e0 131 33 00 60 FD |                             execf   0-0                     'process the request 
3a3e4 132             | 
3a3e4 132             | '..................................................................................................
3a3e4 132             | ' Restoring per COG state and resuming where we left off
3a3e4 132             | 
3a3e4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3a3e8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3a3ec 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3a3f0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3a3f4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3a3f8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3a3fc 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3a400 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3a404 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3a408 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3a40c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3a410 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3a414 13e             |                    
3a414 13e             | '..................................................................................................
3a414 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3a414 13e             | 
3a414 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3a418 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3a41c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3a420 141 D0 DF B7 F9 |                             setd    a, #id0
3a424 142 D8 DF BF F9 |                             sets    a, #addr1
3a428 143 FE FF FF FF 
3a42c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3a430 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3a434 146 3F DE A7 F9 |                             alti    a, #%111_111 
3a438 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3a43c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3a440 149 01 E2 63 FD |                             cogid   c
3a444 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3a448 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3a44c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3a450 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3a454 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3a458 14f 00 E0 03 F6 |                             mov     b, 0-0
3a45c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3a460 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3a464 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3a468 153 0C 00 90 AD |             if_z            jmp     #excluded               
3a46c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3a470 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3a474 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3a478 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3a47c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3a480 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3a484 15a             | 
3a484 15a             | 'determine priority cogs and build instructions for the polling sequence
3a484 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3a488 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3a48c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3a490 15d             | 
3a490 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3a494 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3a498 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3a49c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3a4a0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3a4a4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3a4a8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3a4ac 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3a4b0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3a4b4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3a4b8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3a4bc 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3a4c0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3a4c4 16a             | endprioloop
3a4c4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3a4c8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3a4cc 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3a4d0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3a4d4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3a4d8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3a4dc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3a4e0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3a4e4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3a4e8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3a4ec 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3a4f0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3a4f4 176             | 
3a4f4 176             | ' populate the round robin COG polling instructions
3a4f4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3a4f8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3a4fc 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3a500 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3a504 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3a508 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3a50c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3a510 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3a514 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3a518 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3a51c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3a520 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3a524 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3a528 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3a52c 184             | '..................................................................................................
3a52c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3a52c 184             | 
3a52c 184             | set_latency                                                 '            (a) set latency
3a52c 184             | get_latency                                                 '            (b) get latency
3a52c 184             | set_burst                                                   '            (c) set burst size of bank
3a52c 184             | get_burst                                                   '            (d) get burst size of bank
3a52c 184             |                                                             '            (e) dump state
3a52c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3a530 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3a534 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3a538 187             |                                                             ' | | | | e  account for following AUGS
3a538 187 04 00 00 FF 
3a53c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3a540 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3a544 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3a548 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3a54c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3a550 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3a554 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3a558 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3a55c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3a560 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3a564 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3a568 193             | 
3a568 193             | '..................................................................................................
3a568 193             | ' Misc EXECF code
3a568 193             | 
3a568 193 33 72 63 FD | start_read_exec             execf   newburstr
3a56c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3a570 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3a574 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3a578 197             | 
3a578 197             | '..................................................................................................
3a578 197             | ' Variables
3a578 197             | 
3a578 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3a57c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3a580 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3a584 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3a588 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3a58c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3a590 19d             | 
3a590 19d 00 00 00 80 | xfreq1          long    $80000000
3a594 19e 00 00 00 40 | xfreq2          long    $40000000
3a598 19f 03 00 00 00 | delay           long    3
3a59c 1a0             | 
3a59c 1a0             | lutcodeaddr                 
3a59c 1a0             | startupparams
3a59c 1a0             | excludedcogs                                    'careful: shared register use!
3a59c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3a5a0 1a1 00 00 00 00 | flags           long    0
3a5a4 1a2             | mask                                            'careful: shared register use!
3a5a4 1a2 00 00 00 00 | resetmaskA      long    0
3a5a8 1a3             | limit                                           'careful: shared register use!
3a5a8 1a3 00 00 00 00 | resetmaskB      long    0
3a5ac 1a4 00 00 00 00 | datapins        long    0
3a5b0 1a5             | const512                                        'careful: shared register use!
3a5b0 1a5 00 00 00 00 | devicelist      long    0
3a5b4 1a6 00 00 00 00 | coglist         long    0
3a5b8 1a7 00 00 00 00 | mbox            long    0 
3a5bc 1a8             | 
3a5bc 1a8             | clkpin                                          'shared with code patched during init
3a5bc 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3a5c0 1a9             | cspin                                           'shared with code patched during init
3a5c0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3a5c4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3a5c8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3a5cc 1ac 01 00 00 00 | clkdelay        long    1
3a5d0 1ad 00 00 00 00 | regdatabus      long    0
3a5d4 1ae             | 
3a5d4 1ae 10 00 00 00 | deviceaddr      long    $10
3a5d8 1af             | rrcounter
3a5d8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3a5dc 1b0             | 
3a5dc 1b0             | ' jump addresses for the per COG handlers
3a5dc 1b0 20 00 00 00 | cog0_handler    long    cog0
3a5e0 1b1 2C 00 00 00 | cog1_handler    long    cog1
3a5e4 1b2 38 00 00 00 | cog2_handler    long    cog2
3a5e8 1b3 44 00 00 00 | cog3_handler    long    cog3
3a5ec 1b4 50 00 00 00 | cog4_handler    long    cog4
3a5f0 1b5 5C 00 00 00 | cog5_handler    long    cog5
3a5f4 1b6 68 00 00 00 | cog6_handler    long    cog6
3a5f8 1b7 74 00 00 00 | cog7_handler    long    cog7
3a5fc 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3a600 1b9             | 
3a600 1b9             | ' EXECF sequences
3a600 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3a604 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3a608 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3a60c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3a610 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3a614 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3a618 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3a61c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3a61c 1c0             | 
3a61c 1c0             | 
3a61c 1c0             | ' SKIPF sequences
3a61c 1c0             | skiptable
3a61c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3a620 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3a624 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3a628 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3a62c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3a630 1c5 00 00 00 00 | pattern2        long    0
3a634 1c6 00 00 00 00 | pattern3        long    0
3a638 1c7 77 02 00 00 | singlelong      long    %1001110111  
3a63c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3a640 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3a644 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3a648 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3a64c 1cc             | 
3a64c 1cc             | ' LUT RAM address values
3a64c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3a650 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3a654 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3a658 1cf F6 02 00 00 | noread          long    noread_lut
3a65c 1d0             | 
3a65c 1d0 00 00 00 00 | id0             long    0
3a660 1d1 01 00 00 00 | id1             long    1
3a664 1d2 02 00 00 00 | id2             long    2
3a668 1d3 03 00 00 00 | id3             long    3
3a66c 1d4 04 00 00 00 | id4             long    4
3a670 1d5 05 00 00 00 | id5             long    5
3a674 1d6 06 00 00 00 | id6             long    6
3a678 1d7 07 00 00 00 | id7             long    7
3a67c 1d8             | 
3a67c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3a67c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3a67c 1d8 00 00 00 00 | addr1           long    0
3a680 1d9 00 00 00 00 | hubdata         long    0
3a684 1da 00 00 00 00 | count           long    0
3a688 1db 00 00 00 00 | addr2           long    0
3a68c 1dc 00 00 00 00 | total           long    0
3a690 1dd 00 00 00 00 | offset1         long    0
3a694 1de 00 00 00 00 | offset2         long    0
3a698 1df 00 00 00 00 | link            long    0
3a69c 1e0             | 
3a69c 1e0             | burstwrite                                      'note shared register use during init
3a69c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3a6a0 1e1 00 00 00 00 | id              long    0
3a6a4 1e2             | 
3a6a4 1e2 00 00 00 00 | header          long    0
3a6a8 1e3 00 00 00 00 | trailer         long    0
3a6ac 1e4 00 00 00 00 | cmdaddr         long    0
3a6b0 1e5 00 00 00 00 | request         long    0
3a6b4 1e6 00 00 00 00 | rrlimit         long    0
3a6b8 1e7 00 00 00 00 | pinconfig       long    0
3a6bc 1e8 00 00 00 00 | clks            long    0
3a6c0 1e9 00 00 00 00 | resume          long    0
3a6c4 1ea 00 00 00 00 | orighubsize     long    0
3a6c8 1eb 00 00 00 00 | wrclks          long    0
3a6cc 1ec             | 
3a6cc 1ec 00 00 00 00 | pattern         long    0
3a6d0 1ed 00 00 00 00 | hubscratch      long    0
3a6d4 1ee 00 10 00 00 | val4k           long    4096
3a6d8 1ef             | 
3a6d8 1ef             | ' temporary general purpose regs
3a6d8 1ef 00 00 00 00 | a               long    0
3a6dc 1f0 00 00 00 00 | b               long    0
3a6e0 1f1 00 00 00 00 | c               long    0
3a6e4 1f2 00 00 00 00 | d               long    0
3a6e8 1f3             | 
3a6e8 1f3             |                 fit     502
3a6e8 1f3             |                 fit     502
3a6e8 1f3             | 
3a6e8 1f3             | '..................................................................................................
3a6e8 1f3             | 
3a6e8 1f3             |             orgh
3a6e8                 | 
3a6e8                 | lut_code
3a6e8                 | 'HW init code up to 80 longs
3a6e8                 | 
3a6e8                 | '..................................................................................................
3a6e8                 | ' Memory layout for LUT RAM once operational:
3a6e8                 | '
3a6e8                 | '  LUT RAM address      Usage
3a6e8                 | '  ---------------      ----
3a6e8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3a6e8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3a6e8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3a6e8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3a6e8                 | '
3a6e8                 | ' Also during driver COG startup:
3a6e8                 | ' $230-$24F is used for HW init setup
3a6e8                 | ' $250-$26F is used as temporary vector storage 
3a6e8                 | '..................................................................................................
3a6e8                 | 
3a6e8                 |                 org $230    
3a6e8 230             | 
3a6e8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3a6e8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3a6ec 231 24 16 60 FD |                             pollxfi
3a6f0 232 FF AA 2A FF 
3a6f4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3a6f8 234 28 00 B0 FD |                             call    #sendqspi
3a6fc 235 07 F8 07 FF 
3a700 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3a704 237 28 00 B0 FD |                             call    #sendspi
3a708 238 F8 07 78 FF 
3a70c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3a710 23a 1C 00 B0 FD |                             call    #sendspi
3a714 23b 7F 78 78 FF 
3a718 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3a71c 23d 10 00 B0 FD |                             call    #sendspi 
3a720 23e 2D 00 64 FD |                             ret
3a724 23f             | 
3a724 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3a728 240 32 0C 64 FD |                             skipf   #%110
3a72c 241 9C EF 03 F6 |                             mov     pb, xsendimm
3a730 242             | 
3a730 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3a734 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3a738 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3a73c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3a740 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3a744 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3a748 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3a74c 249 50 48 63 FD |                             fltl    datapins                'float data bus
3a750 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3a754 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3a758 24c             | 
3a758 24c 00 00 00 00 
3a75c 24d 00 00 00 00 
3a760 24e 00 00 00 00 
3a764 24f 00 00 00 00 |                 long    0[$270-32-$]
3a768 250             |     
3a768 250             |                 fit     $270-32  ' keep room for 32 vector longs
3a768 250             |                 fit     $270-32  ' keep room for 32 vector longs
3a768 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3a768 250             | rw_vect ' PSRAM jump vectors
3a768 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3a76c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3a770 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3a774 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3a778 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3a77c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3a780 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3a784 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3a788 258             | ro_vect ' R/O PSRAM jump vectors
3a788 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3a78c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3a790 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3a794 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3a798 25c 00 01 00 00 |                 long    unsupported
3a79c 25d 00 01 00 00 |                 long    unsupported
3a7a0 25e 00 01 00 00 |                 long    unsupported
3a7a4 25f 00 01 00 00 |                 long    unsupported
3a7a8 260             | ctrl_vect ' Control jump vectors
3a7a8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3a7ac 261 00 01 00 00 |                 long    unsupported
3a7b0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3a7b4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3a7b8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3a7bc 265 00 01 00 00 |                 long    unsupported
3a7c0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3a7c4 267 3E 01 00 00 |                 long    reconfig 
3a7c8 268             | no_vect ' Invalid bank jump vectors
3a7c8 268 01 01 00 00 |                 long    invalidbank
3a7cc 269 01 01 00 00 |                 long    invalidbank
3a7d0 26a 01 01 00 00 |                 long    invalidbank
3a7d4 26b 01 01 00 00 |                 long    invalidbank
3a7d8 26c 01 01 00 00 |                 long    invalidbank
3a7dc 26d 01 01 00 00 |                 long    invalidbank
3a7e0 26e 01 01 00 00 |                 long    invalidbank
3a7e4 26f 01 01 00 00 |                 long    invalidbank
3a7e8 270             | 
3a7e8 270             |                 fit     $270
3a7e8 270             |                 fit     $270
3a7e8 270             | '..................................................................................................
3a7e8 270             | ' PSRAM READS
3a7e8 270             |                                                             ' a b c d e f
3a7e8 270             |                                                             ' B W L B R L  (a) byte read
3a7e8 270             |                                                             ' Y O O U E O  (b) word read
3a7e8 270             |                                                             ' T R N R S C  (c) long read
3a7e8 270             |                                                             ' E D G S U K  (d) new burst read
3a7e8 270             |                                                             '       T M E  (e) resumed sub-burst
3a7e8 270             |                                                             '         E D  (f) locked sub-burst
3a7e8 270             | 
3a7e8 270             | 
3a7e8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3a7ec 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3a7f0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3a7f4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3a7f8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3a7fc 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3a800 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3a804 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3a808 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3a80c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3a810 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3a814 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3a818 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3a81c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3a820 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3a824 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3a828 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3a82c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3a830 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3a834 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3a838 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3a83c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3a840 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3a844 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3a848 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3a84c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3a850 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3a854 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3a858 28c             | 
3a858 28c             |                             ' fall through to read bursts
3a858 28c             |                         
3a858 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3a858 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3a85c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3a860 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3a864 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3a868 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3a86c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3a870 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3a874 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3a878 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3a87c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3a880 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3a884 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3a888 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3a88c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3a890 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3a894 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3a898 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3a89c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3a8a0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3a8a4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3a8a8 2a0 E8 D1 03 F1 |                             add     clks, clks
3a8ac 2a1             | readcommon
3a8ac 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3a8b0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3a8b4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3a8b8 2a4             | 
3a8b8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3a8bc 2a5 69 C8 63 FD |                             rev     cmdaddr
3a8c0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3a8c4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3a8c8 2a8             | 
3a8c8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3a8cc 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3a8d0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3a8d0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3a8d4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3a8d8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3a8dc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3a8e0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3a8e0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3a8e4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3a8e8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3a8ec 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3a8f0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3a8f4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3a8f8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3a8f8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3a8fc 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3a900 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3a904 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3a908 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3a90c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3a910 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3a914 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3a918 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3a91c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3a920 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3a924 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3a928 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3a92c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3a930 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3a930 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3a934 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3a938 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3a93c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3a940 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3a944 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3a948 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3a94c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3a950 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3a954 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3a958 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3a95c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3a960 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3a964 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3a968 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3a96c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3a970 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3a974 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3a978 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3a97c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3a980 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3a984 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3a988 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3a98c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3a990 2da 10 03 90 FD |                             jmp     #writecommon
3a994 2db             | 
3a994 2db             | '..................................................................................................
3a994 2db             | ' Burst continuation testing
3a994 2db             | 
3a994 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3a998 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3a99c 2dd             | continue_read_lut          
3a99c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3a9a0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3a9a4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3a9a8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3a9ac 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3a9b0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3a9b4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3a9b8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3a9bc 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3a9c0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3a9c4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3a9c8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3a9cc 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3a9d0 2ea             | 
3a9d0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3a9d4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3a9d8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3a9dc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3a9e0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3a9e4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3a9e8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3a9ec 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3a9f0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3a9f4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3a9f8 2f4 2A 1C 66 0D |             _ret_           push    #poller
3a9fc 2f5             | 
3a9fc 2f5             | 
3a9fc 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3aa00 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3aa00 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3aa04 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3aa08 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3aa0c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3aa10 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3aa14 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3aa18 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3aa1c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3aa20 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3aa24 2ff             | '..................................................................................................
3aa24 2ff             | ' Completion of requests
3aa24 2ff             | 
3aa24 2ff             | complete_rw_lut             
3aa24 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3aa28 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3aa2c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3aa30 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3aa34 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3aa38 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3aa3c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3aa40 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3aa44 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3aa48 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3aa4c 309 32 62 64 AD |             if_z            skipf   #%110001
3aa50 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3aa54 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3aa58 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3aa5c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3aa60 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3aa64 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3aa68 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3aa6c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3aa70 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3aa74 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3aa78 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3aa7c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3aa80 316             |                                                             ' skipcase (a) gfx copy to/from hub
3aa80 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3aa80 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3aa80 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3aa84 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3aa88 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3aa8c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3aa90 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3aa94 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3aa98 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3aa9c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3aaa0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3aaa4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3aaa8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3aaac 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3aab0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3aab4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3aab8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3aabc 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3aac0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3aac4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3aac8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3aacc 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3aad0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3aad4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3aad8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3aadc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3aae0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3aae4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3aae8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3aaec 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3aaf0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3aaf4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3aaf8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3aafc 335 DF B7 03 A6 |             if_z            mov     addr2, link
3ab00 336 34 FF 9F AD |             if_z            jmp     #checknext
3ab04 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3ab08 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3ab0c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3ab10 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3ab14 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3ab18 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3ab1c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3ab20 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3ab24 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3ab28 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3ab2c 341             | 
3ab2c 341             | '..................................................................................................
3ab2c 341             | ' PSRAM WRITES
3ab2c 341             |                                                             '  a b c d e f g h
3ab2c 341             | 
3ab2c 341             |                                                             '  B W L F B R L L (a) byte write(s)
3ab2c 341             |                                                             '  Y O O I U E O O (b) word write(s)
3ab2c 341             |                                                             '  T R N L R S C C (c) long write(s)
3ab2c 341             |                                                             '  E D G L S U K K (d) resumed fill
3ab2c 341             |                                                             '          T M E E (e) new burst write
3ab2c 341             |                                                             '            E D D (f) resumed burst
3ab2c 341             |                                                             '              F B (g) locked fill
3ab2c 341             |                                                             '              I U (h) locked burst write
3ab2c 341             |                                                             '              L R 
3ab2c 341             |                                                             '              L S 
3ab2c 341             |                                                             '                T 
3ab2c 341             | 
3ab2c 341             | w_single                   
3ab2c 341             | w_fill_cont           
3ab2c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3ab30 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3ab34 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3ab38 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3ab3c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3ab40 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3ab44 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3ab48 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3ab4c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3ab50 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3ab54 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3ab58 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3ab5c 34d             |                ' disable call to r_resume_burst for single longs when z=0
3ab5c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3ab60 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3ab64 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3ab68 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3ab6c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3ab70 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3ab74 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3ab78 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3ab7c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3ab80 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3ab84 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3ab88 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3ab8c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3ab90 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3ab94 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3ab98 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3ab9c 35d             |         
3ab9c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3ab9c 35d             |             '
3ab9c 35d             |             '  At least one of these 3 optional components will be sent
3ab9c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3ab9c 35d             |             '     body - N x full longs of data
3ab9c 35d             |             '     trailer - last partial long of data
3ab9c 35d             |             '
3ab9c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3ab9c 35d             |             '
3ab9c 35d             |             'Case    Type                           Sends
3ab9c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3ab9c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3ab9c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3ab9c 35d             |             ' 4)     Multiple long fill             body only
3ab9c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3ab9c 35d             | 
3ab9c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3ab9c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3aba0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3aba4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3aba8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3abac 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3abb0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3abb4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3abb8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3abbc 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3abc0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3abc4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3abc8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3abcc 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3abd0 36a             |                             
3abd0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3abd4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3abd8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3abdc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3abe0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3abe4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3abe8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3abec 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3abf0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3abf4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3abf8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3abfc 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3ac00 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3ac04 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3ac08 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3ac0c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3ac10 37a             | 
3ac10 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3ac14 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3ac18 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3ac1c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3ac20 37e             |                  
3ac20 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3ac24 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3ac28 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3ac2c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3ac30 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3ac34 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3ac38 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3ac3c 385             | 
3ac3c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3ac40 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3ac44 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3ac48 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3ac4c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3ac50 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3ac54 38b             | 
3ac54 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3ac54 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3ac58 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3ac5c 38d 2A B0 63 FD |                             push    addr1                   'save address
3ac60 38e             | 
3ac60 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3ac60 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3ac64 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3ac68 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3ac6c 391             |             
3ac6c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3ac70 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3ac74 393 2B B0 63 FD |                             pop     addr1                   'restore address
3ac78 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3ac7c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3ac80 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3ac84 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3ac88 398             | 
3ac88 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3ac8c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3ac90 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3ac94 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3ac98 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3ac9c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3aca0 39e             | 
3aca0 39e             |                             'trailer is done
3aca0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3aca4 39f             | 
3aca4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3aca8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3acac 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3acb0 3a2             | 
3acb0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3acb4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3acb8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3acbc 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3acc0 3a6             |                             
3acc0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3acc4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3acc8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3accc 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3acd0 3aa             |                                                          
3acd0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3acd4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3acd8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3acdc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3ace0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3ace4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3ace8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3acec 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3acf0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3acf4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3acf8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3acfc 3b5             |  
3acfc 3b5 59 52 63 FD |                             drvh    cspin
3ad00 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3ad04 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3ad08 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3ad0c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3ad10 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3ad14 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3ad18 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3ad1c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3ad20 3be EA E5 03 F6 |                             mov     d, orighubsize
3ad24 3bf EF E5 63 F0 |                             shl     d, a
3ad28 3c0 F2 E3 83 F1 |                             sub     c, d
3ad2c 3c1 DD E3 03 F1 |                             add     c, offset1
3ad30 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3ad34 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3ad38 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3ad3c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3ad40 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3ad44 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3ad48 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3ad4c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3ad50 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3ad54 3cb BB D3 03 F6 |                             mov     resume, restorefill
3ad58 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3ad5c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3ad60 3ce 6C FC BF CD |             if_c            call    #yield
3ad64 3cf 2D 00 64 FD |                             ret
3ad68 3d0             |                            
3ad68 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3ad68 3d0             |                       '     rczl    pa                      'rotate left into address offset
3ad68 3d0             |                       '     rczl    c wcz                   'restore count and flags
3ad68 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3ad6c 3d1 02 EC 67 F0 |                             shl     pa, #2
3ad70 3d2 28 06 64 AD |             if_z            setq    #3
3ad74 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3ad78 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3ad7c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3ad80 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3ad84 3d7             | 
3ad84 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3ad88 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3ad8c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3ad90 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3ad94 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3ad98 3dc             |         
3ad98 3dc             | 
3ad98 3dc             | '..................................................................................................
3ad98 3dc             | 
3ad98 3dc             |                 fit 1024-32
3ad98 3dc             |                 fit 1024-32
3ad98 3dc 00 00 00 00 
3ad9c 3dd 00 00 00 00 
3ada0 3de 00 00 00 00 
3ada4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3ada8 3e0             |                 org 1024-32
3ada8 000             | 
3ada8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3ada8 000 00 00 00 00 |                 long $0000
3adac 001 11 11 00 00 |                 long $1111
3adb0 002 22 22 00 00 |                 long $2222
3adb4 003 33 33 00 00 |                 long $3333
3adb8 004 44 44 00 00 |                 long $4444
3adbc 005 55 55 00 00 |                 long $5555
3adc0 006 66 66 00 00 |                 long $6666
3adc4 007 77 77 00 00 |                 long $7777
3adc8 008 88 88 00 00 |                 long $8888
3adcc 009 99 99 00 00 |                 long $9999
3add0 00a AA AA 00 00 |                 long $aaaa
3add4 00b BB BB 00 00 |                 long $bbbb
3add8 00c CC CC 00 00 |                 long $cccc
3addc 00d DD DD 00 00 |                 long $dddd
3ade0 00e EE EE 00 00 |                 long $eeee
3ade4 00f FF FF 00 00 |                 long $ffff
3ade8 010             | 
3ade8 010             | 'masks
3ade8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3adec 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3adf0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3adf4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3adf8 014             | 
3adf8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3adfc 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3ae00 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3ae04 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3ae08 018             | 
3ae08 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3ae0c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3ae10 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3ae14 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3ae18 01c             | 
3ae18 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3ae1c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3ae20 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3ae24 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3ae28 020             | 
3ae28 020             |         fit 1024
3ae28 020             |         fit 1024
3ae28 020             | 
3ae28 020             | '--------------------------------------------------------------------------------------------------
3ae28 020             |         orgh
3ae28                 | 
3ae28                 | gfxexpansion
3ae28                 |                             'simple line drawing graphics expansion of memory driver
3ae28                 |                             'jmp     #donerepeats                'just return for now
3ae28                 | 
3ae28     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3ae2c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3ae30     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3ae34     DD E1 03 F6 |                             mov     b, offset1              'get error term
3ae38     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3ae3c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3ae40     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3ae44     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3ae48     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3ae4c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3ae50     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3ae54     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3ae58     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3ae5c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3ae60     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3ae64     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3ae68     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3ae6c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3ae70     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3ae74     DC E5 33 F9 |                             getword d, total, #0            'get line width
3ae78     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3ae7c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3ae80     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3ae84     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3ae88     C3 03 80 FD |                             jmp     #readmask               'continue filling
3ae8c                 | 	alignl
3ae8c                 | _usbnew_spin2_dat_
3ae8c                 |                 org     $000
3ae8c 000             | 
3ae8c 000             | usb_host_start
3ae8c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3ae90 001             | 
3ae90 001 03 00 00 FF 
3ae94 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3ae98 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3ae9c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3aea0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3aea4 006 29 72 63 FD |                 setq2   htmp
3aea8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3aeac 008             | 
3aeac 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3aeb0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3aeb4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3aeb8 00b             | 
3aeb8 00b             | '------------------------------------------------------------------------------
3aeb8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3aeb8 00b             | ' special because the receiving function must not respond with either STALL or
3aeb8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3aeb8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3aeb8 00b             | ' corrupt packet, it must ignore the transaction
3aeb8 00b             | '------------------------------------------------------------------------------
3aeb8 00b             | ' On entry:
3aeb8 00b             | '   PTRA - start address of the SETUP data struct.
3aeb8 00b             | ' On exit:
3aeb8 00b             | '   retval - PID_ACK on success, otherwise error code.
3aeb8 00b             | '------------------------------------------------------------------------------
3aeb8 00b             | txn_setup
3aeb8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3aebc 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3aec0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3aec4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3aec8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3aecc 010             | .setup
3aecc 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3aed0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3aed4 012 2D 00 64 AD |         if_z    ret
3aed8 013 7C 0B B0 FD |                 call    #retry_wait
3aedc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3aee0 015 2D 00 64 AD |         if_z    ret
3aee4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3aee8 017 E0 FF 9F FD |                 jmp     #.setup
3aeec 018             | 
3aeec 018             | '------------------------------------------------------------------------------
3aeec 018             | ' IN/INTERRUPT transaction.
3aeec 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3aeec 018             | '------------------------------------------------------------------------------
3aeec 018             | ' On entry:
3aeec 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3aeec 018             | '     CRC(b19..23).
3aeec 018             | ' On exit:
3aeec 018             | '------------------------------------------------------------------------------
3aeec 018             | txn_in
3aeec 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3aef0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3aef4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3aef8 01b             | 
3aef8 01b             |                 ' Fall through to urx_packet
3aef8 01b             | 
3aef8 01b             | '------------------------------------------------------------------------------
3aef8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3aef8 01b             | ' received are handshakes and IN DATAx.
3aef8 01b             | '------------------------------------------------------------------------------
3aef8 01b             | ' On entry:
3aef8 01b             | ' On exit:
3aef8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3aef8 01b             | '     returned.
3aef8 01b             | '------------------------------------------------------------------------------
3aef8 01b             | urx_packet
3aef8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3aefc 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3af00 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3af04 01e 1A 94 63 FD |                 getct   hct2
3af08 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3af0c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3af10 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3af14 022             | .wait_sop
3af14 022 22 A7 8A FA |                 rdpin   urx, dm
3af18 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3af1c 024 08 00 90 CD |         if_c    jmp     #.get_pid
3af20 025 FC 25 CC FB |                 jnct2   #.wait_sop
3af24 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3af28 027             | .get_pid
3af28 027 28 02 B0 FD |                 call    #urx_next
3af2c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3af30 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3af34 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3af38 02b             | .chk_pid
3af38 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3af3c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3af40 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3af44 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3af48 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3af4c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3af50 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3af54 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3af58 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3af5c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3af60 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3af64 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3af68 037             | .ack_resend
3af68 037 22 A7 82 FA |                 rqpin   urx, dm
3af6c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3af70 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3af74 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3af78 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3af7c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3af80 03d             | .chk_eop
3af80 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3af84 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3af88 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3af8c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3af90 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3af94 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3af98 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3af9c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3afa0 045 2D 00 64 FD |                 ret
3afa4 046             | .idle
3afa4 046 22 A7 82 FA |                 rqpin   urx, dm
3afa8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3afac 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3afb0 049 2D 00 64 FD |                 ret
3afb4 04a             | 
3afb4 04a             | '------------------------------------------------------------------------------
3afb4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3afb4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3afb4 04a             | ' if one is required.
3afb4 04a             | '------------------------------------------------------------------------------
3afb4 04a             | ' On entry:
3afb4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3afb4 04a             | ' On exit:
3afb4 04a             | '------------------------------------------------------------------------------
3afb4 04a             | utx_token
3afb4 04a 22 A7 82 FA |                 rqpin   urx, dm
3afb8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3afbc 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3afc0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3afc4 04e 34 0D B0 CD |         if_c    call    #utx_pre
3afc8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3afcc 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3afd0 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3afd4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3afd8 053             | .next_byte
3afd8 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3afdc 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3afe0 055             | .wait
3afe0 055 40 46 72 FD |                 testp   dp                      wc
3afe4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3afe8 057 23 03 08 FC |                 akpin   dp
3afec 058 22 A5 22 FC |                 wypin   utx, dm
3aff0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3aff4 05a             | 
3aff4 05a             | '------------------------------------------------------------------------------
3aff4 05a             | ' SETUP/OUT/INTERRUPT transaction.
3aff4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3aff4 05a             | '------------------------------------------------------------------------------
3aff4 05a             | ' On entry:
3aff4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3aff4 05a             | '     CRC(b19..23).
3aff4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3aff4 05a             | '   pkt_data - count of DATAx payload bytes to send.
3aff4 05a             | ' On exit:
3aff4 05a             | '------------------------------------------------------------------------------
3aff4 05a             | txn_out
3aff4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3aff8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3affc 05c 00 00 C0 FF 
3b000 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b004 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b008 05f             | 
3b008 05f             |                 ' Fall through to utx_data
3b008 05f             | 
3b008 05f             | '------------------------------------------------------------------------------
3b008 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b008 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b008 05f             | ' success/fail is not determined until the status stage of the transaction,
3b008 05f             | ' this routine is only concerned about the current DATAx packet.
3b008 05f             | '------------------------------------------------------------------------------
3b008 05f             | ' On entry:
3b008 05f             | '   PTRA - hub start address of the data to read.
3b008 05f             | '   pkt_cnt - data payload size.
3b008 05f             | ' On exit:
3b008 05f             | '------------------------------------------------------------------------------
3b008 05f             | utx_data
3b008 05f 22 A7 82 FA |                 rqpin   urx, dm
3b00c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b010 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b014 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b018 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b01c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b020 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b024 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b028 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b02c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b030 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b034 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b038 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b03c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b040 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b044 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b048 06f             | .read_byte
3b048 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b04c 070 F0 00 B0 FD |                 call    #utx_byte
3b050 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b054 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b058 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b05c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b060 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b064 076             | .send_crc
3b064 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b068 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b06c 078 D0 00 B0 FD |                 call    #utx_byte
3b070 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3b074 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3b078 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3b07c 07c             | 
3b07c 07c             | '------------------------------------------------------------------------------
3b07c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3b07c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3b07c 07c             | ' expects that the packet includes at least the CRC word.
3b07c 07c             | '
3b07c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3b07c 07c             | ' was requested, which makes it difficult to determine where the data stops
3b07c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3b07c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3b07c 07c             | ' USB-16 expected residual value of 0xB001.
3b07c 07c             | '
3b07c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3b07c 07c             | ' so the caller can verify IN success before writing the data to its final
3b07c 07c             | ' destination.
3b07c 07c             | '------------------------------------------------------------------------------
3b07c 07c             | ' On entry:
3b07c 07c             | '   pkt_data - max byte count expected to be in the packet.
3b07c 07c             | '   newb_flg - signals new byte ready when toggled.
3b07c 07c             | ' On exit:
3b07c 07c             | '   pkt_cnt - actual number of bytes read.
3b07c 07c             | '------------------------------------------------------------------------------
3b07c 07c             | urx_data
3b07c 07c F7 77 03 F6 |                 mov     htmp2, pb
3b080 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3b084 07e 00 00 C0 FF 
3b088 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3b08c 080 BB EF 03 F6 |                 mov     pb, htmp2
3b090 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b094 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3b098 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3b09c 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3b0a0 085             | .wait_byte
3b0a0 085             | ' In-line rx for max speed
3b0a0 085 22 A7 82 FA |                 rqpin   urx, dm
3b0a4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b0a8 087 53 A5 02 F5 |                 and     utx, urx
3b0ac 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b0b0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b0b4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3b0b8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b0bc 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3b0c0 08d DC FF 9F FD |                 jmp     #.wait_byte
3b0c4 08e             | .get_byte
3b0c4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3b0c8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3b0cc 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3b0d0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3b0d4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b0d8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b0dc 094             | .end_crc
3b0dc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3b0e0 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3b0e4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3b0e8 097 2D 00 64 1D |         if_a    ret
3b0ec 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3b0ec 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3b0ec 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3b0ec 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3b0ec 098 22 A7 82 FA |                 rqpin   urx, dm
3b0f0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3b0f4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3b0f8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3b0f8 09b             | .chk_crc
3b0f8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3b0fc 09c 58 00 00 FF 
3b100 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3b104 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3b108 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b10c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b110 0a1 34 09 B0 FD |                 call    #poll_waitx
3b114 0a2             | 
3b114 0a2             |                 ' Fall through to utx_handshake
3b114 0a2             | 
3b114 0a2             | '------------------------------------------------------------------------------
3b114 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3b114 0a2             | ' the appropriate IP delay has been inserted.
3b114 0a2             | '------------------------------------------------------------------------------
3b114 0a2             | ' On entry:
3b114 0a2             | '   retval - handshake PID to send.
3b114 0a2             | ' On exit:
3b114 0a2             | '   retval unchanged.
3b114 0a2             | '------------------------------------------------------------------------------
3b114 0a2             | utx_handshake
3b114 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b118 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3b11c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b120 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3b124 0a6 5F A5 02 F6 |                 mov     utx, retval
3b128 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3b12c 0a8             | .idle
3b12c 0a8 22 A7 82 FA |                 rqpin   urx, dm
3b130 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b134 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3b138 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3b13c 0ac 08 09 90 FD |                 jmp     #poll_waitx
3b140 0ad             | 
3b140 0ad             | '------------------------------------------------------------------------------
3b140 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3b140 0ad             | '------------------------------------------------------------------------------
3b140 0ad             | ' On entry:
3b140 0ad             | '   utx - byte to transmit.
3b140 0ad             | ' On exit:
3b140 0ad             | '------------------------------------------------------------------------------
3b140 0ad             | utx_byte
3b140 0ad 40 46 72 FD |                 testp   dp                      wc
3b144 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3b148 0af 23 03 08 FC |                 akpin   dp
3b14c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3b150 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3b154 0b2             | 
3b154 0b2             | '------------------------------------------------------------------------------
3b154 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3b154 0b2             | '------------------------------------------------------------------------------
3b154 0b2             | ' On entry:
3b154 0b2             | ' On exit:
3b154 0b2             | '   retval - the byte read.
3b154 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3b154 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3b154 0b2             | '     received.
3b154 0b2             | '------------------------------------------------------------------------------
3b154 0b2             | urx_next
3b154 0b2 22 A7 8A FA |                 rdpin   urx, dm
3b158 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b15c 0b4 53 A5 02 F5 |                 and     utx, urx
3b160 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b164 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b168 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3b16c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3b170 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b174 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b178 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3b17c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3b180 0bd 2D 00 64 FD |                 ret
3b184 0be             | 
3b184 0be             | '------------------------------------------------------------------------------
3b184 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3b184 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3b184 0be             | ' length, and the PID is not included in the CRC calculation:
3b184 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3b184 0be             | '  CRC5  ENDP ADDRESS PID
3b184 0be             | ' %00000_1111_1111111_xxxxxxxx
3b184 0be             | '------------------------------------------------------------------------------
3b184 0be             | ' On entry:
3b184 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3b184 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3b184 0be             | ' On exit:
3b184 0be             | '   ep_addr_pid - CRC value appended to the packet.
3b184 0be             | '------------------------------------------------------------------------------
3b184 0be             | calc_crc5
3b184 0be FF 03 00 FF 
3b188 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3b18c 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3b190 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3b194 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3b198 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3b19c 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3b1a0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3b1a4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3b1a8 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3b1ac 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3b1b0 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3b1b4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b1b8 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3b1bc 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b1c0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3b1c4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3b1c8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3b1cc 0d0             | 
3b1cc 0d0             | '------------------------------------------------------------------------------
3b1cc 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3b1cc 0d0             | '------------------------------------------------------------------------------
3b1cc 0d0             | isr1_fsframe
3b1cc 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3b1d0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b1d4 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b1d8 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b1dc 0d4             | .wait
3b1dc 0d4 40 46 72 FD |                 testp   dp                      wc
3b1e0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b1e4 0d6 23 03 08 FC |                 akpin   dp
3b1e8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3b1ec 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3b1f0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3b1f4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3b1f8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3b1fc 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3b200 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3b204 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3b208 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3b20c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3b210 0e1 2C FF BF FD |                 call    #utx_byte
3b214 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3b218 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3b21c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3b220 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3b224 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3b228 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3b22c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3b230 0e9 5B A5 42 F5 |                 or      utx, icrc
3b234 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3b238 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3b23c 0ec 20 00 90 FD |                 jmp     #isr1_wait
3b240 0ed             | isr1_lsframe
3b240 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3b244 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b248 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b24c 0f0             | .wait
3b24c 0f0 40 46 72 FD |                 testp   dp                      wc
3b250 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b254 0f2 23 03 08 FC |                 akpin   dp
3b258 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3b25c 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3b260 0f5             | isr1_wait
3b260 0f5 22 A5 82 FA |                 rqpin   utx, dm
3b264 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3b268 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3b26c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3b270 0f9 03 00 00 FF 
3b274 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3b278 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3b27c 0fc F5 FF 3B FB |                 reti1
3b280 0fd             | 
3b280 0fd             | '------------------------------------------------------------------------------
3b280 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3b280 0fd             | ' transaction will complete before the next frame is triggered.
3b280 0fd             | '------------------------------------------------------------------------------
3b280 0fd             | ' On entry:
3b280 0fd             | ' On exit:
3b280 0fd             | '------------------------------------------------------------------------------
3b280 0fd             | wait_txn_ok
3b280 0fd 1A 76 63 FD |                 getct   htmp2
3b284 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3b288 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b28c 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3b290 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3b294 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3b298 103 2D 00 64 FD |                 ret
3b29c 104             | 
3b29c 104             | '------------------------------------------------------------------------------
3b29c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3b29c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3b29c 104             | ' and perform a reset sequence prior to device enumeration.
3b29c 104             | '------------------------------------------------------------------------------
3b29c 104             | dev_reset
3b29c 104 22 A7 82 FA |                 rqpin   urx, dm
3b2a0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3b2a4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3b2a8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3b2ac 108             | reset
3b2ac 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3b2b0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3b2b4 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3b2b8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3b2bc 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3b2c0 10d 1A 92 62 FD |                 getct   iframe_ct_base
3b2c4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b2c8 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b2cc 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3b2d0 111 24 72 07 F1 |                 add     htmp, #36
3b2d4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3b2d8 113             | .framewait
3b2d8 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3b2dc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3b2e0 115 2D 00 64 FD |                 ret
3b2e4 116             | 
3b2e4 116             | '------------------------------------------------------------------------------
3b2e4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3b2e4 116             | '------------------------------------------------------------------------------
3b2e4 116             | ' On entry:
3b2e4 116             | '   PTRA - source address.
3b2e4 116             | '   PB - destination address.
3b2e4 116             | '   hr0 - length of copy, in bytes.
3b2e4 116             | ' On exit:
3b2e4 116             | '------------------------------------------------------------------------------
3b2e4 116             | hmemcpy
3b2e4 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3b2e8 117 F7 73 43 FC |                 wrbyte  htmp, pb
3b2ec 118 01 EE 07 F1 |                 add     pb, #1
3b2f0 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3b2f4 11a             | 
3b2f4 11a             | '------------------------------------------------------------------------------
3b2f4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3b2f4 11a             | ' loop until the errant device is disconnected.
3b2f4 11a             | '------------------------------------------------------------------------------
3b2f4 11a             | ' On entry:
3b2f4 11a             | ' On exit:
3b2f4 11a             | '------------------------------------------------------------------------------
3b2f4 11a             | host_error
3b2f4 11a             |           if ERROR_LED >= 0
3b2f4 11a             |           end
3b2f4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3b2f8 11b             | 
3b2f8 11b             | '------------------------------------------------------------------------------
3b2f8 11b             | ' Get HID descriptor buffer for current port
3b2f8 11b             | '------------------------------------------------------------------------------
3b2f8 11b             | ' On entry:
3b2f8 11b             | ' On exit:
3b2f8 11b             | '   PB - HID descriptor buffer pointer
3b2f8 11b             | '------------------------------------------------------------------------------
3b2f8 11b             | get_hid_descr_buffer
3b2f8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3b2fc 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3b300 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3b304 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3b308 11f             | 
3b308 11f             | 
3b308 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3b30c 120             | 
3b30c 120             | ' USB commands and error codes
3b30c 120 00 00 00 00 | cmd_data        long    0
3b310 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3b314 122             | 
3b314 122             | ' Parameters block assigned at cog startup
3b314 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3b318 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3b31c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3b320 125             | if ACTIVITY_LED >= 0
3b320 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3b320 125             | end
3b320 125             | if ERROR_LED >= 0
3b320 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3b320 125             | end
3b320 125 00 00 00 00 | hid_descr_p     long    0
3b324 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3b324 126             | 'hkbd_report_p   long    0
3b324 126 00 00 00 00 | hub_descr_p     long    0
3b328 127 00 00 00 00 | urx_buff_p      long    0
3b32c 128 00 00 00 00 | dev_desc_buff_p long    0
3b330 129 00 00 00 00 | con_desc_buff_p long    0
3b334 12a 00 00 00 00 | cache_start_p   long    0
3b338 12b 00 00 00 00 | cache_end_p     long    0
3b33c 12c             | if EMUPAD_MAX_PLAYER > 0
3b33c 12c             | emupad_out_ptr  long    0
3b33c 12c             | end
3b33c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3b340 12d             | 
3b340 12d             | hdev_init_start
3b340 12d             | hdev_port       res     1
3b340 12d             | hdev_port       res     1
3b340 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3b340 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3b340 12d             | kbm_next_datax  res     1
3b340 12d             | kbm_next_datax  res     1
3b340 12d             | hub_intf_num    res     1
3b340 12d             | hub_intf_num    res     1
3b340 12d             | hub_next_datax  res     1
3b340 12d             | hub_next_datax  res     1
3b340 12d             | hub_status_chg  res     1
3b340 12d             | hub_status_chg  res     1
3b340 12d             | hub_port_status res     1
3b340 12d             | hub_port_status res     1
3b340 12d             | if HAVE_MOUSE
3b340 12d             | ms_intf_num     res     1
3b340 12d             | ms_intf_num     res     1
3b340 12d             | ms_in_max_pkt   res     1
3b340 12d             | ms_in_max_pkt   res     1
3b340 12d             | end
3b340 12d             | kb_intf_num     res     1
3b340 12d             | kb_intf_num     res     1
3b340 12d             | kb_interval     res     1
3b340 12d             | kb_interval     res     1
3b340 12d             | kb_in_max_pkt   res     1
3b340 12d             | kb_in_max_pkt   res     1
3b340 12d             | kb_max_index    res     1
3b340 12d             | kb_max_index    res     1
3b340 12d             | kb_led_states   res     1
3b340 12d             | kb_led_states   res     1
3b340 12d             | gp_intf_num     res     1
3b340 12d             | gp_intf_num     res     1
3b340 12d             | gp_interval     res     1
3b340 12d             | gp_interval     res     1
3b340 12d             | gp_max_index    res     1
3b340 12d             | gp_max_index    res     1
3b340 12d             | gp_descr_len    res     1+MAX_DEVICES
3b340 12d             | gp_descr_len    res     1+MAX_DEVICES
3b340 12d             | hdev_init_end
3b340 12d             | 
3b340 12d             | ' Initialized at cog startup:
3b340 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3b340 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3b340 12d             | iframe_ct_new   res     1
3b340 12d             | iframe_ct_new   res     1
3b340 12d             | iframe_ct_base  res     1
3b340 12d             | iframe_ct_base  res     1
3b340 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3b340 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3b340 12d             | 
3b340 12d             | ' This register block is reset to zero when a USB device connects
3b340 12d             | hreg_init_start
3b340 12d             | hstatus         res     1         ' Host status flags
3b340 12d             | hstatus         res     1         ' Host status flags
3b340 12d             | hctwait         res     1         ' Poll-based wait clocks
3b340 12d             | hctwait         res     1         ' Poll-based wait clocks
3b340 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3b340 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3b340 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3b340 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3b340 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3b340 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3b340 12d             | xfer_retry      res     1         ' Control transfer retry count
3b340 12d             | xfer_retry      res     1         ' Control transfer retry count
3b340 12d             | retry           res     1         ' Transaction retry count
3b340 12d             | retry           res     1         ' Transaction retry count
3b340 12d             | utx             res     1         ' Byte to transmit on USB
3b340 12d             | utx             res     1         ' Byte to transmit on USB
3b340 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3b340 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3b340 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3b340 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3b340 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3b340 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3b340 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3b340 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3b340 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3b340 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3b340 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3b340 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3b340 12d             | frame           res     1         ' USB 1ms frame counter value
3b340 12d             | frame           res     1         ' USB 1ms frame counter value
3b340 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3b340 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3b340 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3b340 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3b340 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3b340 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3b340 12d             | crc             res     1         ' Used for CRC16 calculation
3b340 12d             | crc             res     1         ' Used for CRC16 calculation
3b340 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3b340 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3b340 12d             | retval          res     1         ' Global success/fail return parameter
3b340 12d             | retval          res     1         ' Global success/fail return parameter
3b340 12d             | context_retval  res     1         ' Operation contextual return parameter
3b340 12d             | context_retval  res     1         ' Operation contextual return parameter
3b340 12d             | ' Device stuff
3b340 12d             | hdev_id         res     1+MAX_DEVICES
3b340 12d             | hdev_id         res     1+MAX_DEVICES
3b340 12d             | hdev_bcd        res     1
3b340 12d             | hdev_bcd        res     1
3b340 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3b340 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3b340 12d             | ' Keyboard/mouse stuff
3b340 12d             | hctrl_ep_addr   res     1
3b340 12d             | hctrl_ep_addr   res     1
3b340 12d             | hctrl_max_pkt   res     1
3b340 12d             | hctrl_max_pkt   res     1
3b340 12d             | hconfig_base    res     1
3b340 12d             | hconfig_base    res     1
3b340 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3b340 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3b340 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3b340 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3b340 12d             | hdev_class      res     1
3b340 12d             | hdev_class      res     1
3b340 12d             | hdev_subclass   res     1
3b340 12d             | hdev_subclass   res     1
3b340 12d             | hdev_protocol   res     1
3b340 12d             | hdev_protocol   res     1
3b340 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3b340 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3b340 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3b340 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3b340 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3b340 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3b340 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3b340 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3b340 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3b340 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3b340 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3b340 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3b340 12d             | if HAVE_MOUSE
3b340 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3b340 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3b340 12d             | end
3b340 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3b340 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3b340 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3b340 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3b340 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3b340 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3b340 12d             | hdev_out_addr   res     1
3b340 12d             | hdev_out_addr   res     1
3b340 12d             | 
3b340 12d             | if EMUPAD_MAX_PLAYER > 0
3b340 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3b340 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3b340 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3b340 12d             | end
3b340 12d             | 
3b340 12d             | hreg_init_end
3b340 12d             | 
3b340 12d             | hidr_start
3b340 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3b340 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3b340 12d             | hidr_flags      res     1
3b340 12d             | hidr_flags      res     1
3b340 12d             | hidr_axis       res     4
3b340 12d             | hidr_axis       res     4
3b340 12d             | hidr_buttons    res     1
3b340 12d             | hidr_buttons    res     1
3b340 12d             | hidr_hats       res     1
3b340 12d             | hidr_hats       res     1
3b340 12d             | '' Above are actually useful values, 6 longs
3b340 12d             | hidr_type       res     1
3b340 12d             | hidr_type       res     1
3b340 12d             | hidr_id         res     1
3b340 12d             | hidr_id         res     1
3b340 12d             | hidr_offset     res     1
3b340 12d             | hidr_offset     res     1
3b340 12d             | hidr_usage_idx  res     1
3b340 12d             | hidr_usage_idx  res     1
3b340 12d             | ' below need to be push/pop'd
3b340 12d             | hidr_state      res     1
3b340 12d             | hidr_state      res     1
3b340 12d             | hidr_size       res     1
3b340 12d             | hidr_size       res     1
3b340 12d             | hidr_count      res     1
3b340 12d             | hidr_count      res     1
3b340 12d             | hidr_lminmax    res     1
3b340 12d             | hidr_lminmax    res     1
3b340 12d             | hidr_pminmax    res     1
3b340 12d             | hidr_pminmax    res     1
3b340 12d             | hidr_end
3b340 12d             | 
3b340 12d             | ' Variables dependent on the system freqency
3b340 12d             | _var_64_lower_  res     1
3b340 12d             | _var_64_lower_  res     1
3b340 12d             | _var_64_upper_  res     1
3b340 12d             | _var_64_upper_  res     1
3b340 12d             | _12Mbps_        res     1
3b340 12d             | _12Mbps_        res     1
3b340 12d             | _1_5Mbps_       res     1
3b340 12d             | _1_5Mbps_       res     1
3b340 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3b340 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3b340 12d             | _1us_           res     1         ' 1us
3b340 12d             | _1us_           res     1         ' 1us
3b340 12d             | _10us_          res     1         ' 10us
3b340 12d             | _10us_          res     1         ' 10us
3b340 12d             | _33us_          res     1         ' 33us
3b340 12d             | _33us_          res     1         ' 33us
3b340 12d             | _txn_err_       res     1         ' 250us
3b340 12d             | _txn_err_       res     1         ' 250us
3b340 12d             | _500us_         res     1         ' 500us
3b340 12d             | _500us_         res     1         ' 500us
3b340 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3b340 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3b340 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3b340 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3b340 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3b340 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3b340 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3b340 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3b340 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3b340 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3b340 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3b340 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3b340 12d             | _preamble_wait_ res     1
3b340 12d             | _preamble_wait_ res     1
3b340 12d             | _1ms_           res     1         ' 1ms
3b340 12d             | _1ms_           res     1         ' 1ms
3b340 12d             | _2ms_           res     1         ' 2ms
3b340 12d             | _2ms_           res     1         ' 2ms
3b340 12d             | _suspend_wait_  res     1         ' 3ms
3b340 12d             | _suspend_wait_  res     1         ' 3ms
3b340 12d             | _4ms_           res     1         ' 4ms
3b340 12d             | _4ms_           res     1         ' 4ms
3b340 12d             | _xfer_wait_     res     1         ' 5ms
3b340 12d             | _xfer_wait_     res     1         ' 5ms
3b340 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3b340 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3b340 12d             | _reset_hold_    res     1         ' 15ms
3b340 12d             | _reset_hold_    res     1         ' 15ms
3b340 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3b340 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3b340 12d             | _21ms_          res     1         ' 21ms
3b340 12d             | _21ms_          res     1         ' 21ms
3b340 12d             | _100ms_         res     1         ' 100ms
3b340 12d             | _100ms_         res     1         ' 100ms
3b340 12d             | _500ms_         res     1         ' 500ms
3b340 12d             | _500ms_         res     1         ' 500ms
3b340 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3b340 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3b340 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3b340 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3b340 12d             | '------------------------------------------------------------------------------
3b340 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3b340 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3b340 12d             | _usb_d_ls_nco_  res     1
3b340 12d             | _usb_d_ls_nco_  res     1
3b340 12d             | _usb_h_fs_nco_  res     1
3b340 12d             | _usb_h_fs_nco_  res     1
3b340 12d             | _usb_d_fs_nco_  res     1
3b340 12d             | _usb_d_fs_nco_  res     1
3b340 12d             | '------------------------------------------------------------------------------
3b340 12d             | ' Scratch registers
3b340 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3b340 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3b340 12d             | htmp1           res     1
3b340 12d             | htmp1           res     1
3b340 12d             | htmp2           res     1
3b340 12d             | htmp2           res     1
3b340 12d             | htmp3           res     1
3b340 12d             | htmp3           res     1
3b340 12d             | hrep            res     1         ' Repeat count
3b340 12d             | hrep            res     1         ' Repeat count
3b340 12d             | hsave0          res     1         ' Subroutine parameter saves
3b340 12d             | hsave0          res     1         ' Subroutine parameter saves
3b340 12d             | hsave1          res     1
3b340 12d             | hsave1          res     1
3b340 12d             | hsave2          res     1
3b340 12d             | hsave2          res     1
3b340 12d             | isrtmp1         res     1
3b340 12d             | isrtmp1         res     1
3b340 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3b340 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3b340 12d             | hr0             res     1         ' Multi-purpose registers
3b340 12d             | hr0             res     1         ' Multi-purpose registers
3b340 12d             | hr1             res     1
3b340 12d             | hr1             res     1
3b340 12d             | hr2             res     1
3b340 12d             | hr2             res     1
3b340 12d             | hr3             res     1
3b340 12d             | hr3             res     1
3b340 12d             | hpar1           res     1         ' Routine entry/exit parameters
3b340 12d             | hpar1           res     1         ' Routine entry/exit parameters
3b340 12d             | hpar2           res     1
3b340 12d             | hpar2           res     1
3b340 12d             | hpar3           res     1
3b340 12d             | hpar3           res     1
3b340 12d             | hct2            res     1         ' Function response bus turn-around timer
3b340 12d             | hct2            res     1         ' Function response bus turn-around timer
3b340 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3b340 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3b340 12d             | mod_cnt         res     1         ' Used in idle loops
3b340 12d             | mod_cnt         res     1         ' Used in idle loops
3b340 12d             | 
3b340 12d             |                 fit     $1F0
3b340 12d             |                 fit     $1F0
3b340 12d             |                 org     $200
3b340 200             | hlut_start
3b340 200             | 
3b340 200             | '------------------------------------------------------------------------------
3b340 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3b340 200             | ' settings to startup defaults.
3b340 200             | '------------------------------------------------------------------------------
3b340 200             | ' On entry:
3b340 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3b340 200             | '------------------------------------------------------------------------------
3b340 200             | set_speed_full
3b340 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3b344 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3b348 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3b34c 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3b350 204             | '                ret                             wcz     ' Restore caller flags on exit
3b350 204             | 
3b350 204             | '------------------------------------------------------------------------------
3b350 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3b350 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3b350 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3b350 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3b350 204             | ' putting the smart pins into reset.
3b350 204             | '------------------------------------------------------------------------------
3b350 204             | ' On entry:
3b350 204             | ' On exit: CZ flags restored to caller states
3b350 204             | '------------------------------------------------------------------------------
3b350 204             | set_speed_low
3b350 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3b354 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3b358 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3b35c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3b360 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3b364 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3b368 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3b36c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3b370 20c             | 
3b370 20c             | '------------------------------------------------------------------------------
3b370 20c             | ' Perform configuration stuff required when a device intitially connects.
3b370 20c             | '------------------------------------------------------------------------------
3b370 20c             | ' On entry:
3b370 20c             | ' On exit:
3b370 20c             | '------------------------------------------------------------------------------
3b370 20c             | on_connect
3b370 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3b374 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3b378 20e             | .retry
3b378 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b37c 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3b380 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3b384 211 00 08 00 FF 
3b388 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3b38c 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3b390 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b394 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3b398 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3b39c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3b3a0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b3a4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3b3a8 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3b3ac 21b 4C 03 B0 FD |                 call    #poll_waitx
3b3b0 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3b3b4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3b3b8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3b3bc 21f B8 FF 9F FD |                 jmp     #.retry
3b3c0 220             | .get_dev_desc
3b3c0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3b3c4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3b3c8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3b3cc 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3b3d0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3b3d4 225 88 FB BF FD |                 call    #reset
3b3d8 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3b3dc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b3e0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3b3e4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3b3e8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b3ec 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3b3f0 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3b3f4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3b3f8 22e 04 00 00 FF 
3b3fc 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3b400 230 34 FA BF FD |                 call    #calc_crc5
3b404 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3b408 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b40c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3b410 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3b414 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3b418 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3b41c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b420 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3b424 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3b428 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3b42c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3b430 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3b434 23d C4 02 B0 FD |                 call    #poll_waitx
3b438 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3b43c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b440 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3b444 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3b448 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3b44c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b450 244 2D 00 64 5D |         if_nz   ret
3b454 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3b458 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3b45c 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3b460 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3b464 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3b468 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3b46c 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3b470 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3b474 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3b478 24e 2C FB 9F CD |         if_b    jmp     #host_error
3b47c 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3b480 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b484 251 2D EC 63 FD |                 call    pa
3b488 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3b48c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b490 254 2C EC 63 FD |                 jmp     pa
3b494 255             | 
3b494 255             | '------------------------------------------------------------------------------
3b494 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3b494 255             | ' Status reporting is always in the function-to-host direction.
3b494 255             | '------------------------------------------------------------------------------
3b494 255             | ' On entry:
3b494 255             | '   PTRA - start address of the SETUP data in hub.
3b494 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3b494 255             | '     stage.
3b494 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3b494 255             | ' On exit:
3b494 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3b494 255             | '     contains the count of data stage bytes actually received, which must
3b494 255             | '     always be <= the count requested.
3b494 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3b494 255             | '     more specific USB operation error code.
3b494 255             | '------------------------------------------------------------------------------
3b494 255             | control_read
3b494 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3b498 256 F8 91 03 F6 |                 mov     hpar2, ptra
3b49c 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3b4a0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3b4a4 259             | .xfer_start
3b4a4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3b4a8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3b4ac 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b4b0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3b4b4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3b4b8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3b4bc 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3b4c0 260 61 00 00 FF 
3b4c4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3b4c8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3b4cc 263             | .data
3b4cc 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3b4d0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3b4d4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3b4d8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3b4dc 267             | .nak_retry
3b4dc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3b4e0 268             | .in_retry
3b4e0 268 BC F6 BF FD |                 call    #txn_in
3b4e4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3b4e8 26a 28 00 90 AD |         if_z    jmp     #.commit
3b4ec 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b4f0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3b4f4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b4f8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3b4fc 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3b500 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3b504 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3b508 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b50c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3b510 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3b514 275             | .commit
3b514 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3b518 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3b51c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3b520 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3b524 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3b528 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3b52c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3b530 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3b534 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3b538 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3b53c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3b540 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3b544 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3b548 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3b54c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3b550 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3b554 285             | .pre_status
3b554 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3b558 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3b55c 287 00 B0 06 F6 |                 mov     pkt_data, #0
3b560 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3b564 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3b568 28a 61 00 00 FF 
3b56c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3b570 28c             | .out_retry
3b570 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3b574 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b578 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3b57c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b580 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3b584 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b588 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3b58c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3b590 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b594 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3b598 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3b59c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3b59c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3b59c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3b59c 297             | .xfer_retry
3b59c 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3b5a0 298 58 01 B0 FD |                 call    #poll_waitx
3b5a4 299 8C F9 BF FD |                 call    #wait_txn_ok
3b5a8 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3b5ac 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3b5b0 29c C9 EF 03 F6 |                 mov     pb, hpar3
3b5b4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3b5b8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3b5bc 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3b5c0 2a0             | 
3b5c0 2a0             | '------------------------------------------------------------------------------
3b5c0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3b5c0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3b5c0 2a0             | ' the SETUP data struct is filled with the required values.
3b5c0 2a0             | '------------------------------------------------------------------------------
3b5c0 2a0             | ' On entry:
3b5c0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3b5c0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3b5c0 2a0             | '     stage.
3b5c0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3b5c0 2a0             | ' On exit:
3b5c0 2a0             | '   retval - used to convey the success/failure of each stage.
3b5c0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3b5c0 2a0             | '     more specific USB operation error code.
3b5c0 2a0             | '------------------------------------------------------------------------------
3b5c0 2a0             | control_write
3b5c0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3b5c4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3b5c8 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3b5cc 2a3             | 
3b5cc 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3b5d0 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3b5d4 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3b5d8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3b5dc 2a7             | .xfer_start
3b5dc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3b5e0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3b5e4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3b5e8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b5ec 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3b5f0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3b5f4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3b5f8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3b5fc 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3b600 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3b604 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3b608 2b2             | .data
3b608 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3b60c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3b610 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3b614 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3b618 2b6             | .out_retry
3b618 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3b61c 2b7 88 F6 BF FD |                 call    #txn_out
3b620 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b624 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3b628 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b62c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3b630 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3b634 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3b638 2be             | .commit
3b638 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3b63c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3b640 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3b644 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3b648 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3b64c 2c3             | pre_status_in
3b64c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3b650 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3b654 2c5             | .status_retry
3b654 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3b658 2c6 44 F5 BF FD |                 call    #txn_in
3b65c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3b660 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3b664 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3b668 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3b66c 2cb 2D 00 64 AD |         if_z    ret
3b670 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3b674 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b678 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3b67c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3b67c 2cf             | 
3b67c 2cf             | '------------------------------------------------------------------------------
3b67c 2cf             | ' Execute an IN interrupt transaction.
3b67c 2cf             | '------------------------------------------------------------------------------
3b67c 2cf             | ' On entry:
3b67c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3b67c 2cf             | '   hpar2 - Address of the IN data buffer
3b67c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3b67c 2cf             | ' On exit:
3b67c 2cf             | '   retval - the result of the operation.
3b67c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3b67c 2cf             | '------------------------------------------------------------------------------
3b67c 2cf             | do_int_in
3b67c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3b680 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3b684 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3b688 2d2             | 
3b688 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3b68c 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3b690 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3b694 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3b698 2d6             | .retry
3b698 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3b69c 2d7 00 F5 BF FD |                 call    #txn_in
3b6a0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3b6a4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3b6a8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3b6ac 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3b6b0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3b6b4 2dd 54 00 B0 FD |                 call    #retry_wait
3b6b8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b6bc 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3b6c0 2e0 D4 FF 9F FD |                 jmp     #.retry
3b6c4 2e1             | .commit
3b6c4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3b6c8 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3b6cc 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3b6d0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3b6d4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3b6d8 2e6             | .post_ret
3b6d8 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3b6dc 2e7             | 
3b6dc 2e7             | 
3b6dc 2e7             | '------------------------------------------------------------------------------
3b6dc 2e7             | ' Resets the downstream hub port to FS
3b6dc 2e7             | '------------------------------------------------------------------------------
3b6dc 2e7             | dwnstream_reset
3b6dc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3b6e0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3b6e4 2e9             | 
3b6e4 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3b6e8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3b6ec 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b6f0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3b6f4 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3b6f8 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3b6fc 2ef             | 
3b6fc 2ef             | '------------------------------------------------------------------------------
3b6fc 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3b6fc 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3b6fc 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3b6fc 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3b6fc 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3b6fc 2ef             | '------------------------------------------------------------------------------
3b6fc 2ef             | ' On entry:
3b6fc 2ef             | '   hctwait - wait interval in sysclocks.
3b6fc 2ef             | ' On exit:
3b6fc 2ef             | '------------------------------------------------------------------------------
3b6fc 2ef             | poll_waitx
3b6fc 2ef 1A 94 63 FD |                 getct   hct2
3b700 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3b704 2f1             | .wait
3b704 2f1 FF 25 CC FB |                 jnct2   #.wait
3b708 2f2 2D 00 64 FD |                 ret
3b70c 2f3             | 
3b70c 2f3             | '------------------------------------------------------------------------------
3b70c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3b70c 2f3             | '------------------------------------------------------------------------------
3b70c 2f3             | ' On entry:
3b70c 2f3             | '   retval - transaction response PID or error code.
3b70c 2f3             | ' On exit:
3b70c 2f3             | '------------------------------------------------------------------------------
3b70c 2f3             | retry_wait
3b70c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b710 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3b714 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3b718 2f6 14 00 90 AD |         if_z    jmp     #.nak
3b71c 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3b720 2f8 D8 FF BF FD |                 call    #poll_waitx
3b724 2f9             | .dec
3b724 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3b728 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3b72c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3b730 2fc             | .nak
3b730 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3b734 2fd C4 FF BF FD |                 call    #poll_waitx
3b738 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3b73c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3b740 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3b744 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3b748 302 2D 00 64 FD |                 ret
3b74c 303             | 
3b74c 303             | host_reset
3b74c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3b750 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3b754 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3b754 305 BD 01 05 FF 
3b758 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3b75c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3b760 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3b764 309             | ' Check to see if the system clock has been changed.
3b764 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3b768 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3b76c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3b770 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3b774 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3b778 30e 40 46 62 FD |                 dirl    dp
3b77c 30f             | 
3b77c 30f 28 02 64 FD |                 setq    #1
3b780 310 80 00 80 FF 
3b784 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3b788 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3b78c 313             | .enable
3b78c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3b790 314 41 46 62 FD |                 dirh    dp
3b794 315 1F 38 63 FD |                 waitx   _1us_
3b798 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3b79c 317             | 
3b79c 317             |                 ' Handle Port protection enable and startup delay
3b79c 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3b7a0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3b7a4 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3b7a8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3b7ac 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3b7b0 31c             | 
3b7b0 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3b7b0 31c             | 
3b7b0 31c             | discon_entry
3b7b0 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3b7b4 31d             | 
3b7b4 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3b7b8 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3b7bc 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3b7c0 320 00 00 04 F6 |                 mov     0-0, #0
3b7c4 321             | .regloop
3b7c4 321             |               
3b7c4 321             |         if HAVE_HIDPAD
3b7c4 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3b7c8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b7cc 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3b7d0 324 F7 01 68 FC |                 wrlong  #0,pb
3b7d4 325             |         end
3b7d4 325             |         if EMUPAD_MAX_PLAYER > 0
3b7d4 325             |         end
3b7d4 325             | 
3b7d4 325             |                 ' Fall through to disconnected loop
3b7d4 325             | 
3b7d4 325             | '-----------------------------------------------------------------------------------------------------------------
3b7d4 325             | ' Device connect handling (Section 7.1.7.3).
3b7d4 325             | '-----------------------------------------------------------------------------------------------------------------
3b7d4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3b7d4 325             | ' device to connect (Section 7.1.7.3).
3b7d4 325             | '-----------------------------------------------------------------------------------------------------------------
3b7d4 325             | disconnected
3b7d4 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3b7d8 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3b7dc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3b7e0 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3b7e4 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3b7e8 32a             |         if ACTIVITY_LED >= 0
3b7e8 32a             |         end
3b7e8 32a 22 A7 82 FA |                 rqpin   urx, dm
3b7ec 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3b7f0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3b7f4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3b7f8 32e             | .se1_test
3b7f8 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3b7fc 32f FC FE BF FD |                 call    #poll_waitx
3b800 330 22 A7 82 FA |                 rqpin   urx, dm
3b804 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3b808 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3b80c 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3b810 334             | .se1            'SE1 is a fatal error condition
3b810 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3b814 335 E4 FE BF FD |                 call    #poll_waitx
3b818 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3b81c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3b820 338             | .connect_test                                           ' Test lines until stable J/K state seen
3b820 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3b824 339 22 A7 82 FA |                 rqpin   urx, dm
3b828 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3b82c 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3b830 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3b834 33d             | connected
3b834 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3b838 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3b83c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3b840 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3b844 341             | .set_pulse
3b844 341 1A 66 63 FD |                 getct   _pulse_time_
3b848 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3b84c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3b84c 343             | ' of 1ms and make a correction, if necessary.
3b84c 343             | '                mov     htmp, _1ms_
3b84c 343             | '                subs    htmp, iframe_delta
3b84c 343             | '                adds    _frame1ms_clks_, htmp
3b84c 343             | '                debug(udec(_frame1ms_clks_))
3b84c 343             | 
3b84c 343             |                 ' Fall through to idle/processing loop
3b84c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3b850 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3b854 345             | 
3b854 345             | hidle
3b854 345 22 A7 82 FA |                 rqpin   urx, dm
3b858 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3b85c 347 98 00 90 CD |         if_c    jmp     #.se0_test
3b860 348 24 06 70 FD |                 pollct3                         wc
3b864 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3b868 34a 1A 96 63 FD |                 getct   hct3
3b86c 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3b870 34c             | 
3b870 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3b874 34d 00 72 E3 F8 |                 getbyte htmp
3b878 34e             | 
3b878 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3b87c 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3b880 350 40 00 90 AD |         if_z    jmp     #.poll
3b884 351             | 
3b884 351             |         if _HAVE_GAMEPAD
3b884 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3b888 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3b88c 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3b890 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3b894 355 2C 00 90 AD |         if_z    jmp     #.poll
3b898 356             |         end
3b898 356             | 
3b898 356             |         if HAVE_MOUSE
3b898 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3b89c 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3b8a0 358 20 00 90 AD |         if_z    jmp     #.poll
3b8a4 359             |         end
3b8a4 359             | 
3b8a4 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3b8a8 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3b8ac 35b 14 00 90 AD |         if_z    jmp     #.poll
3b8b0 35c             | 
3b8b0 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3b8b4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3b8b8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3b8bc 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3b8c0 360             |         if HAVE_MOUSE
3b8c0 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3b8c4 361             |         else
3b8c4 361             |         end
3b8c4 361             | 
3b8c4 361             | .poll
3b8c4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b8c8 362 2D EC 63 FD |                 call    pa
3b8cc 363             | .skip_poll
3b8cc 363             | 
3b8cc 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3b8d0 364             | 
3b8d0 364             | .nopoll
3b8d0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3b8d4 365 44 00 90 AD |         if_z    jmp     #hsuspend
3b8d8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3b8dc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3b8e0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3b8e4 369 1A 86 63 FD |                 getct   hr0
3b8e8 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3b8ec 36b             |         if ACTIVITY_LED >= 0
3b8ec 36b             |         end
3b8ec 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3b8f0 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3b8f4 36d 5C FF 9F FD |                 jmp     #hidle
3b8f8 36e             | ' Check for extended SE0 state on the bus
3b8f8 36e             | .se0_test
3b8f8 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3b8fc 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3b900 370 22 A7 82 FA |                 rqpin   urx, dm
3b904 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3b908 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3b90c 373 24 F6 BF FD |                 call    #wait_txn_ok
3b910 374 00 00 80 FF 
3b914 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3b918 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3b918 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3b91c 377             | 
3b91c 377             | hsuspend
3b91c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3b920 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3b924 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3b928 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3b92c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3b930 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3b934 37d             | 
3b934 37d             |                 ' Fall through to resume wait loop
3b934 37d             | 
3b934 37d             | hwait_resume
3b934 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3b938 37e 02 88 47 F0 |                 shr     hr1, #2
3b93c 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3b940 380             |         if ACTIVITY_LED >= 0
3b940 380             |         end
3b940 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3b944 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3b948 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3b94c 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3b950 384 18 00 90 AD |         if_z    jmp     #.resume
3b954 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3b958 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b95c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3b960 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b964 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3b968 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3b96c 38b             | .resume
3b96c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3b970 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3b974 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3b978 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3b97c 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3b980 390 1F 72 63 FD |                 waitx   htmp
3b984 391 22 07 28 FC |                 wypin   #OUT_J, dm
3b988 392 01 72 47 F0 |                 shr     htmp, #1
3b98c 393 1F 72 63 FD |                 waitx   htmp
3b990 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3b994 395 1A 92 62 FD |                 getct   iframe_ct_base
3b998 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b99c 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b9a0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3b9a4 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3b9a8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3b9ac 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3b9b0 39c             | 
3b9b0 39c             | '------------------------------------------------------------------------------
3b9b0 39c             | ' Send preamble to enable low-speed HUB ports
3b9b0 39c             | '------------------------------------------------------------------------------
3b9b0 39c             | ' On entry:
3b9b0 39c             | ' On exit:
3b9b0 39c             | '   USB baud rate set to low-speed
3b9b0 39c             | '------------------------------------------------------------------------------
3b9b0 39c             | utx_pre
3b9b0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3b9b4 39d 40 46 62 FD |                 dirl    dp
3b9b8 39e 28 02 64 FD |                 setq    #1
3b9bc 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3b9c0 3a0 58 44 62 FD |                 drvl    dm
3b9c4 3a1 59 46 62 FD |                 drvh    dp
3b9c8 3a2             | 
3b9c8 3a2 1E 00 00 FF 
3b9cc 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3b9d0 3a4             | 
3b9d0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3b9d4 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3b9d8 3a6 28 02 64 3D |         if_nc   setq    #1
3b9dc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3b9e0 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3b9e4 3a9             | .l1
3b9e4 3a9             | 
3b9e4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3b9e8 3aa 40 46 62 FD |                 dirl    dp
3b9ec 3ab 28 02 64 FD |                 setq    #1
3b9f0 3ac 80 00 80 FF 
3b9f4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3b9f8 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3b9fc 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ba00 3b0 41 46 62 FD |                 dirh    dp
3ba04 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ba08 3b2             | 
3ba08 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ba0c 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ba10 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ba14 3b5             | 
3ba14 3b5             | hlut_end
3ba14 3b5             |                 fit     $400
3ba14 3b5             |                 fit     $400
3ba14 3b5             |                 orgh
3ba14                 | if OVERLAP_MEMORY
3ba14                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ba14                 | end
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | ' Routines called from cog space.
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | 
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | ' USB host cog initialization.
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | usb_host_init
3ba14                 |                 ' Initialize buffer pointers
3ba14                 |         if OVERLAP_MEMORY
3ba14                 |         else
3ba14     4C 15 B0 FE |                 loc     pb, #hid_descr
3ba18                 |         end
3ba18     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3ba1c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3ba1c                 |                 {
3ba1c                 |                 }
3ba1c                 |         
3ba1c                 |                 {
3ba1c                 |                 }
3ba1c                 |                 'loc     pb,#hkbd_report
3ba1c                 |                 'mov     hkbd_report_p,pb
3ba1c                 | 
3ba1c     44 1D B0 FE |                 loc     pb, #hub_descr
3ba20     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3ba24     59 1D B0 FE |                 loc     pb, #urx_buff
3ba28     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3ba2c     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3ba30     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3ba34     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3ba38     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3ba3c     24 15 B0 FE |                 loc     pb, #usb_cache_start
3ba40     F7 55 02 F6 |                 mov     cache_start_p, pb
3ba44     25 1D B0 FE |                 loc     pb, #usb_cache_end
3ba48     F7 57 02 F6 |                 mov     cache_end_p, pb
3ba4c                 | 
3ba4c                 |         if ERROR_LED >= 0
3ba4c                 |         end
3ba4c                 | 
3ba4c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3ba4c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3ba4c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3ba4c                 | ' Configure and enable the Serial Host USB port.
3ba4c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3ba50                 | 
3ba50                 | '------------------------------------------------------------------------------
3ba50                 | ' Timing calculations happen before any interrupt(s) are enabled.
3ba50                 | '------------------------------------------------------------------------------
3ba50                 | ' On entry:
3ba50                 | '   htmp - current CLKFREQ value.
3ba50                 | '------------------------------------------------------------------------------
3ba50                 | hinit_usb_timings
3ba50                 | '                getct   htmp2
3ba50     B9 59 02 F6 |                 mov     save_sysclk, htmp
3ba54     8D 5B 80 FF 
3ba58     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3ba5c     18 32 63 FD |                 getqx   _12Mbps_
3ba60     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3ba64     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3ba68     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3ba6c     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3ba70     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3ba74     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3ba78     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3ba7c     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3ba80     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3ba84     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3ba88     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3ba8c     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3ba90     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3ba94     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3ba98     80 00 00 FF 
3ba9c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3baa0     18 2E 63 FD |                 getqx   _var_64_lower_
3baa4     19 30 63 FD |                 getqy   _var_64_upper_
3baa8     28 2E 63 FD |                 setq    _var_64_lower_
3baac     65 CD 1D FF 
3bab0     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3bab4     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3bab8     01 00 00 FF 
3babc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3bac0     18 2E 63 FD |                 getqx   _var_64_lower_
3bac4     19 30 63 FD |                 getqy   _var_64_upper_
3bac8     28 2E 63 FD |                 setq    _var_64_lower_
3bacc     A1 07 00 FF 
3bad0     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3bad4     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3bad8     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3badc     09 38 57 F0 |                 shr     _1us_, #9               wc
3bae0     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3bae4     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3bae8     18 3A 63 FD |                 getqx   _10us_
3baec     09 3A 57 F0 |                 shr     _10us_, #9              wc
3baf0     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3baf4     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3baf8     18 3C 63 FD |                 getqx   _33us_
3bafc     09 3C 57 F0 |                 shr     _33us_, #9              wc
3bb00     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3bb04     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3bb08     18 3E 63 FD |                 getqx   _txn_err_
3bb0c     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3bb10     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3bb14     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3bb18     18 40 63 FD |                 getqx   _500us_
3bb1c     09 40 57 F0 |                 shr     _500us_, #9             wc
3bb20     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3bb24     01 00 00 FF 
3bb28     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3bb2c     18 42 63 FD |                 getqx   _txn_ok_ls_
3bb30     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3bb34     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3bb38     01 00 00 FF 
3bb3c     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3bb40     18 44 63 FD |                 getqx   _txn_ok_fs_
3bb44     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3bb48     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3bb4c     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3bb50     05 00 00 FF 
3bb54     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3bb58     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3bb5c     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3bb60     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3bb64     1C 00 00 FF 
3bb68     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3bb6c     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3bb70     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3bb74     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3bb78     00 00 00 FF 
3bb7c     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3bb80     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3bb84     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3bb88     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3bb8c     04 00 00 FF 
3bb90     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3bb94     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3bb98     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3bb9c     8D 5B 00 FF 
3bba0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3bba4     18 4E 63 FD |                 getqx   _preamble_wait_
3bba8     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3bbac     01 00 00 FF 
3bbb0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3bbb4     18 2E 63 FD |                 getqx   _var_64_lower_
3bbb8     19 30 63 FD |                 getqy   _var_64_upper_
3bbbc     28 2E 63 FD |                 setq    _var_64_lower_
3bbc0     01 00 00 FF 
3bbc4     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3bbc8     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3bbcc     09 50 57 F0 |                 shr     _1ms_, #9               wc
3bbd0     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3bbd4     FF FF 7F FF 
3bbd8     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3bbdc     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3bbe0     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3bbe4     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3bbe8     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3bbec     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3bbf0     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3bbf4     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3bbf8     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3bbfc     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3bc00     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3bc04     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3bc08     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3bc0c     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3bc10     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3bc14     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3bc18     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3bc1c     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3bc20     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3bc24     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3bc28     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3bc2c     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3bc30     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3bc34     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3bc38     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3bc3c     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3bc40     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3bc44                 | '        _ret_   mov     _1sec_, save_sysclk
3bc44                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3bc44                 | '                ret
3bc44                 | {
3bc44                 | }
3bc44                 | 
3bc44                 | '------------------------------------------------------------------------------
3bc44                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3bc44                 | ' one. If it is, start the task progression that will configure the device for
3bc44                 | ' use.
3bc44                 | '------------------------------------------------------------------------------
3bc44                 | ' On entry:
3bc44                 | '   hconfig_base - start address of the cached config descriptor chain.
3bc44                 | ' On exit:
3bc44                 | '------------------------------------------------------------------------------
3bc44                 | hparse_con_desc
3bc44     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3bc48     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3bc4c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3bc50     4E 72 FF F9 |                 movbyts htmp,#%%1032
3bc54     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3bc58                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3bc58                 | 
3bc58     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3bc5c     6E ED 03 F1 |                 add     pa, hconfig_base
3bc60     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3bc64                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3bc64                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3bc64                 | ' that defines a keyboard and/or mouse.
3bc64     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3bc68                 | .next_intf
3bc68     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3bc6c     B8 01 90 3D |         if_ae   jmp     #hset_config
3bc70     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3bc74     75 F3 03 F1 |                 add     ptrb, hnext_desc
3bc78     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3bc7c     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3bc80     0C 00 90 AD |         if_z    jmp     #.intf
3bc84     80 73 C7 FA |                 rdbyte  htmp, ptrb
3bc88     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3bc8c     D8 FF 9F FD |                 jmp     #.next_intf
3bc90                 | .intf
3bc90     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3bc94     00 92 07 F6 |                 mov     hpar3, #0
3bc98     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3bc9c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3bca0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3bca4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3bca8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3bca8                 | 
3bca8                 | .endp
3bca8     80 73 C7 FA |                 rdbyte  htmp, ptrb
3bcac     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3bcb0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3bcb4     78 00 90 3D |         if_ae   jmp     #.get_device
3bcb8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3bcbc     75 F3 03 F1 |                 add     ptrb, hnext_desc
3bcc0     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3bcc4     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3bcc8     64 00 90 AD |         if_z    jmp     #.get_device
3bccc     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3bcd0     04 00 90 AD |         if_z    jmp     #.get_ep
3bcd4     D0 FF 9F FD |                 jmp     #.endp
3bcd8                 | .get_ep
3bcd8     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3bcdc     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3bce0     0F 88 67 F0 |                 shl     hr1, #8 + 7
3bce4     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3bce8     3F 00 00 FF 
3bcec     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3bcf0     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3bcf4     00 90 0F F2 |                 cmp     hpar2, #0               wz
3bcf8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3bcfc     00 92 0F F2 |                 cmp     hpar3, #0               wz
3bd00     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3bd04     A0 FF 9F FD |                 jmp     #.endp
3bd08                 | .in_ep
3bd08     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3bd0c     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3bd10                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3bd10     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3bd14     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3bd18     8C FF 9F FD |                 jmp     #.endp
3bd1c                 | .out_ep
3bd1c     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3bd20     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3bd24                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3bd24     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3bd28     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3bd2c     78 FF 9F FD |                 jmp     #.endp
3bd30                 | 
3bd30                 | .get_device
3bd30     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3bd34     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3bd38     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3bd3c     64 00 90 AD |         if_z    jmp     #.gamepad
3bd40     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3bd44     A8 00 90 AD |         if_z    jmp     #.hub
3bd48     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3bd4c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3bd50     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3bd54     4C 00 90 AD |         if_z    jmp     #.gamepad
3bd58     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3bd5c     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3bd60                 | .keyboard
3bd60     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3bd64                 |         if HAVE_MOUSE
3bd64     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3bd68                 |         else
3bd68                 |         end
3bd68     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3bd6c     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3bd70     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3bd74     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3bd78     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3bd7c     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3bd80                 |                 'debug(udec(kb_intf_num))
3bd80                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3bd80     E4 FE 9F FD |                 jmp     #.next_intf
3bd84                 | if HAVE_MOUSE
3bd84                 | .mouse
3bd84     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3bd88     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3bd8c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3bd90     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3bd94     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3bd98                 |                 'getbyte ms_interval, hr2, #3
3bd98     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3bd9c     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3bda0                 |                 'debug(udec(kb_intf_num))
3bda0                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3bda0     C4 FE 9F FD |                 jmp     #.next_intf
3bda4                 | end
3bda4                 | .gamepad
3bda4     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3bda8     C8 73 63 F5 |                 xor     htmp, hpar2
3bdac     3F 00 00 FF 
3bdb0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3bdb4     B0 FE 9F AD |         if_z    jmp     #.next_intf
3bdb8                 |         if HAVE_MOUSE
3bdb8     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3bdbc     C8 73 63 F5 |                 xor     htmp, hpar2
3bdc0     3F 00 00 FF 
3bdc4     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3bdc8     9C FE 9F AD |         if_z    jmp     #.next_intf
3bdcc                 |         end
3bdcc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3bdd0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3bdd4     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3bdd8                 | 
3bdd8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3bddc     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3bde0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3bde4     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3bde8     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3bdec                 |                 'debug(udec(gp_intf_num))
3bdec                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3bdec     78 FE 9F FD |                 jmp     #.next_intf
3bdf0                 | .hub
3bdf0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3bdf4     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3bdf8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3bdfc     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3be00     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3be04     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3be08     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3be0c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3be10     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3be14     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3be18     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3be1c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3be20     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3be24                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3be24     40 FE 9F FD |                 jmp     #.next_intf
3be28                 | 
3be28                 | '------------------------------------------------------------------------------
3be28                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3be28                 | ' it according to its function, or functions. In the case of this boot protocol
3be28                 | ' keyboard/mouse class driver:
3be28                 | ' - SetConfiguration(config_num)
3be28                 | ' - SetProtocol(boot)
3be28                 | ' - SetIdle(indefinite)
3be28                 | ' - Enter the device interrupt IN polling task stage.
3be28                 | '------------------------------------------------------------------------------
3be28                 | ' On entry:
3be28                 | ' On exit:
3be28                 | '------------------------------------------------------------------------------
3be28                 | hset_config
3be28                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3be28                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3be28     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3be2c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3be30     00 00 0C F2 |                 cmp     0-0, #0                 wz
3be34     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3be38                 |         if HAVE_MOUSE
3be38     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3be3c                 |         end
3be3c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3be40     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3be44                 | .set_config
3be44     74 0E D0 FE |                 loc     ptra, #set_config
3be48     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3be4c     6E ED 03 F1 |                 add     pa, hconfig_base
3be50     F6 8F C3 FA |                 rdbyte  hpar1, pa
3be54                 |                 debug("SetConfiguration: ",udec_(hpar1))
3be54     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3be58     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3be5c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3be60     A0 02 A0 FD |                 call    #control_write
3be64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3be68     2D 00 64 5D |         if_nz   ret
3be6c                 | .kbd_config
3be6c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3be70     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3be74                 | 
3be74     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3be78     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3be7c     3F 00 00 FF 
3be80     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3be84     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3be88                 | 
3be88     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3be8c     3C 0E D0 FE |                 loc     ptra, #set_protocol
3be90     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3be94     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3be98     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3be9c     A0 02 A0 FD |                 call    #control_write
3bea0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bea4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3bea8     F8 02 90 5D |         if_nz   jmp     #.notify_client
3beac     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3beb0     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3beb4     44 03 B0 FD |                 call    #hset_idle
3beb8                 |                 'cmp     retval, #PID_ACK        wz
3beb8                 |         'if_nz   mov     hkbd_ep_addr, #0
3beb8                 |         'if_nz   jmp     #.notify_client
3beb8     A9 99 02 F6 |                 mov     hctwait, _2ms_
3bebc     EF 02 A0 FD |                 call    #poll_waitx
3bec0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3bec4                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3bec4                 |         end
3bec4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3bec8     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3becc     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3bed0     40 03 B0 FD |                 call    #hset_kbdled_report
3bed4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bed8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3bedc     C4 02 90 5D |         if_nz   jmp     #.notify_client
3bee0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3bee4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3bee8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3beec     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3bef0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3bef4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3bef8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3befc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3bf00     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3bf04     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3bf08     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3bf0c                 |         if !!HAVE_MOUSE
3bf0c                 |         end
3bf0c                 | 
3bf0c                 | .mouse_config
3bf0c                 | if HAVE_MOUSE
3bf0c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3bf10     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3bf14     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3bf18     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3bf1c     3F 00 00 FF 
3bf20     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3bf24     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3bf28                 | 
3bf28                 |                 debug("mouse passed addr check")
3bf28                 | 
3bf28     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3bf2c     00 00 80 FF 
3bf30     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3bf34     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3bf38     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3bf3c     55 02 A0 FD |                 call    #control_read
3bf40     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf44     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3bf48     58 02 90 5D |         if_nz   jmp     #.notify_client
3bf4c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3bf50     56 01 00 F6 |                 mov     0-0, total_data
3bf54     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3bf58                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3bf58                 | 
3bf58     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3bf5c     6C 0D D0 FE |                 loc     ptra, #set_protocol
3bf60     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3bf64     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3bf68     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3bf6c     A0 02 A0 FD |                 call    #control_write
3bf70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf74     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3bf78     28 02 90 5D |         if_nz   jmp     #.notify_client
3bf7c                 |                 debug("mouse passed SetProtocol")
3bf7c     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3bf80     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3bf84     74 02 B0 FD |                 call    #hset_idle
3bf88                 |                 'cmp     retval, #PID_ACK        wz
3bf88                 |         'if_nz   mov     hmouse_ep_addr, #0
3bf88                 |         'if_nz   jmp     #.notify_client
3bf88                 |                 debug("mouse passed SetIdle")
3bf88     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3bf8c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3bf90     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3bf94     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3bf98     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3bf9c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3bfa0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3bfa4     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3bfa8     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3bfac     3F 00 00 FF 
3bfb0     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3bfb4     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3bfb8     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3bfbc     E4 01 90 FD |                 jmp     #.notify_client
3bfc0                 | end
3bfc0                 | .gamepad_config
3bfc0                 | if _HAVE_GAMEPAD
3bfc0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3bfc4     00 00 0C F2 |                 cmp     0-0, #0                 wz
3bfc8     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3bfcc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3bfd0     00 72 03 F6 |                 mov     htmp, 0-0
3bfd4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3bfd8     3F 00 00 FF 
3bfdc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3bfe0     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3bfe4                 | 
3bfe4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3bfe8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3bfec     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3bff0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3bff4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3bff8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3bffc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c000     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c004     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c008     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c00c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c010     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c014     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c018     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c01c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c020                 | 
3c020                 |                 if EMUPAD_MAX_PLAYER > 0
3c020                 |                 
3c020                 | .rule_loop           
3c020                 |                 end
3c020                 | 
3c020     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c024     5C 00 90 AD |         if_e    jmp     #.xinput
3c028     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c02c     00 72 03 F6 |                 mov     htmp,0-0
3c030     01 A6 02 FF 
3c034     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c038     8C 00 90 AD |         if_e    jmp     #.ps3
3c03c                 | 
3c03c     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c040     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c044     00 00 80 5F 
3c048     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c04c     03 00 80 AF 
3c050     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c054     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c058     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c05c     55 02 A0 FD |                 call    #control_read
3c060     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c064     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c068     00 00 04 56 |         if_nz   mov     0-0, #0
3c06c     34 01 90 5D |         if_nz   jmp     #.notify_client
3c070     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c074     56 01 00 F6 |                 mov     0-0, total_data
3c078     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c07c                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3c07c                 | 
3c07c     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3c080     20 01 90 FD |                 jmp     #.notify_client
3c084                 | .xinput
3c084     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3c088     2D EF 03 F6 |                 mov     pb,hdev_port
3c08c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3c090     03 EE 27 F3 |                 fle     pb,#3
3c094     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3c098     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3c09c                 | 
3c09c     03 B0 06 F6 |                 mov     pkt_data, #3
3c0a0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3c0a4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3c0a8                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3c0a8     5A 00 A0 FD |                 call    #txn_out
3c0ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3c0b0                 | 
3c0b0     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3c0b4     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3c0b8     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3c0bc                 |                 debug("8bitdo weird fix... ",uhex(retval))
3c0bc     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3c0c0                 | 
3c0c0                 | 
3c0c0     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3c0c4     DC 00 90 FD |                 jmp     #.notify_client
3c0c8                 | .ps3
3c0c8     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3c0cc     2D EF 03 F6 |                 mov     pb,hdev_port
3c0d0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3c0d4     04 EE 27 F3 |                 fle     pb,#4
3c0d8     F7 EF C3 F9 |                 decod   pb
3c0dc     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3c0e0                 | 
3c0e0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c0e4     F4 0B D0 FE |                 loc     ptra, #set_report
3c0e8     01 00 80 FF 
3c0ec     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3c0f0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c0f4     03 61 5C FC |                 wrword  #48, ptra[wLength]
3c0f8     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3c0fc     A0 02 A0 FD |                 call    #control_write
3c100                 | 
3c100     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c104     D4 0B D0 FE |                 loc     ptra, #set_report
3c108     01 00 80 FF 
3c10c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3c110     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c114     03 09 5C FC |                 wrword  #4, ptra[wLength]
3c118     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3c11c     A0 02 A0 FD |                 call    #control_write
3c120     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3c124     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c128     00 00 04 56 |         if_nz   mov     0-0, #0
3c12c     74 00 90 5D |         if_nz   jmp     #.notify_client
3c130                 | 
3c130     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3c134     6C 00 90 FD |                 jmp     #.notify_client
3c138                 | end
3c138                 | 
3c138                 | .hub_config
3c138     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c13c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3c140     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3c144     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c148     3F 00 00 FF 
3c14c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c150     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3c154                 | 
3c154     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3c158     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3c15c     26 EF 03 F6 |                 mov     pb, hub_descr_p
3c160     55 02 A0 FD |                 call    #control_read
3c164     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c168     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3c16c     34 00 90 5D |         if_nz   jmp     #.notify_client
3c170                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3c170                 | 
3c170     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3c174     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3c178     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3c17c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3c17c                 | .pwr_loop
3c17c     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3c180     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3c184     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3c188     A0 02 A0 FD |                 call    #control_write
3c18c     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3c190                 | 
3c190     B2 99 02 F6 |                 mov     hctwait, _500ms_
3c194     B1 99 02 F1 |                 add     hctwait, _100ms_
3c198     EF 02 A0 FD |                 call    #poll_waitx
3c19c                 | 
3c19c     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3c1a0     00 00 90 FD |                 jmp     #.notify_client
3c1a4                 | 
3c1a4                 | .notify_client
3c1a4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3c1a8     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3c1ac                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3c1ac                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3c1ac     2D 00 64 FD |                 ret
3c1b0                 | 
3c1b0                 | '------------------------------------------------------------------------------
3c1b0                 | ' Initialize the keyboard/mouse data area to start-up values.
3c1b0                 | '------------------------------------------------------------------------------
3c1b0                 | ' On entry:
3c1b0                 | ' On exit:
3c1b0                 | '------------------------------------------------------------------------------
3c1b0                 | init_kbdm_data
3c1b0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3c1b4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3c1b8                 | 
3c1b8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3c1bc     2B ED 03 F6 |                 mov     pa, cache_end_p
3c1c0                 | .loop
3c1c0     61 01 4C FC |                 wrbyte  #0, ptra++
3c1c4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3c1c8     F4 FF 9F CD |         if_b    jmp     #.loop
3c1cc                 |         
3c1cc                 |         if EMUPAD_MAX_PLAYER > 0
3c1cc                 |         end
3c1cc                 | 
3c1cc                 | 
3c1cc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3c1d0                 | .regloop
3c1d0     00 EC 8F F9 |                 altd    pa
3c1d4     00 00 04 F6 |                 mov     0-0, #0
3c1d8     01 EC 07 F1 |                 add     pa, #1
3c1dc     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3c1e0     EC FF 9F 5D |         if_nz   jmp     #.regloop
3c1e4                 | 
3c1e4     E1 E1 61 FF 
3c1e8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3c1ec     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3c1f0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3c1f4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3c1f8                 | 
3c1f8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3c1fc                 | 
3c1fc                 | '------------------------------------------------------------------------------
3c1fc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3c1fc                 | ' function.
3c1fc                 | '------------------------------------------------------------------------------
3c1fc                 | ' On entry:
3c1fc                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3c1fc                 | '   hpar2 - index number of the target interface.
3c1fc                 | ' On exit:
3c1fc                 | '------------------------------------------------------------------------------
3c1fc                 | hset_idle
3c1fc     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c200     EF 02 A0 FD |                 call    #poll_waitx
3c204     CC 0A D0 FE |                 loc     ptra, #set_idle
3c208     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3c20c     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3c210     A0 02 80 FD |                 jmp     #control_write
3c214                 | 
3c214                 | '------------------------------------------------------------------------------
3c214                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3c214                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3c214                 | '------------------------------------------------------------------------------
3c214                 | ' On entry:
3c214                 | '   ep_addr_pid - device address and enpoint for the request.
3c214                 | ' On exit:
3c214                 | '   retval - transaction result.
3c214                 | '------------------------------------------------------------------------------
3c214                 | hset_kbdled_report
3c214     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c218     C0 0A D0 FE |                 loc     ptra, #set_report
3c21c     01 00 80 FF 
3c220     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3c224     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c228     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3c22c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c230     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3c234     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3c238                 | 
3c238                 | '------------------------------------------------------------------------------
3c238                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3c238                 | '------------------------------------------------------------------------------
3c238                 | ' On entry:
3c238                 | ' On exit:
3c238                 | '------------------------------------------------------------------------------
3c238                 | hget_kbd_in_report
3c238     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c23c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3c240     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3c244     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3c248     CF 02 A0 FD |                 call    #do_int_in
3c24c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c250     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c254                 | 
3c254     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c258     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c25c                 | 
3c25c     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3c260     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c264     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3c268     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3c26c                 | 
3c26c     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3c270     18 00 B0 FD |                 call    #hkbd_compare
3c274                 |         if EMUPAD_MAX_PLAYER > 0
3c274                 |         end
3c274                 | 
3c274                 | .led_check
3c274     3B 73 03 F6 |                 mov     htmp, kb_led_states
3c278     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3c27c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3c280     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3c284     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3c288     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3c28c                 | 
3c28c                 | '------------------------------------------------------------------------------
3c28c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3c28c                 | '------------------------------------------------------------------------------
3c28c                 | hkbd_compare
3c28c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c290     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3c294     61 75 07 FB |                 rdlong  htmp1, ptra++
3c298     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3c29c     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3c2a0     61 75 07 FB |                 rdlong  htmp1, ptra++
3c2a4     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3c2a8     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3c2ac     2D 00 64 AD |         if_z    ret
3c2b0                 | 
3c2b0     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3c2b4                 | 
3c2b4                 |                 ' Handle modifiers
3c2b4     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3c2b8     00 89 C7 FA |                 rdbyte  hr1, ptra
3c2bc     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3c2c0     63 88 63 FD |                 mergew  hr1
3c2c4     08 EC 07 F6 |                 mov     pa,#8
3c2c8                 | .modloop
3c2c8     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3c2cc     E8 8E 07 F6 |                 mov     hpar1,#$E8
3c2d0     F6 8F 83 F1 |                 sub     hpar1,pa
3c2d4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3c2d8     FB ED 6F FB |                 djnz    pa,#.modloop
3c2dc                 | 
3c2dc     6F E0 75 FD | .release        modc    _set    wc
3c2e0                 |                 'alts    hdev_port, #hid_report_p
3c2e0                 |                 'mov     ptra, hid_report_p
3c2e0     02 F0 07 F1 |                 add     ptra, #2
3c2e4     06 EC 07 F6 |                 mov     pa, #6
3c2e8     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3c2ec     20 00 90 AD |         if_z    jmp     #.rl3
3c2f0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3c2f4     02 F2 07 F1 |                 add     ptrb, #2
3c2f8     06 EE 07 F6 |                 mov     pb, #6
3c2fc     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3c300     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3c304     08 00 90 AD |         if_z    jmp     #.rl3
3c308     FC EF 6F FB |                 djnz    pb, #.rl2
3c30c     68 00 B0 FD |                 call    #hkbd_translate
3c310     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3c314                 | 
3c314     00 92 07 F6 |                 mov     hpar3, #0
3c318     1F 92 27 F4 |                 bith    hpar3, #31
3c31c                 | 
3c31c     6F 00 74 FD | .press          modc    _clr    wc
3c320     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c324     02 F0 07 F1 |                 add     ptra, #2
3c328     06 EC 07 F6 |                 mov     pa, #6
3c32c     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3c330     20 00 90 AD |         if_z    jmp     #.pl3
3c334     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3c338     02 F2 07 F1 |                 add     ptrb, #2
3c33c     06 EE 07 F6 |                 mov     pb, #6
3c340     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3c344     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3c348     08 00 90 AD |         if_z    jmp     #.pl3
3c34c     FC EF 6F FB |                 djnz    pb, #.pl2
3c350     24 00 B0 FD |                 call    #hkbd_translate
3c354     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3c358                 | 
3c358     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3c35c     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3c360     28 02 64 FD |                 setq #1
3c364     61 75 07 FB |                 rdlong  htmp1, ptra++
3c368     28 02 64 FD |                 setq #1
3c36c     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3c370     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3c374                 | 
3c374     2D 00 64 FD |                 ret
3c378                 | 
3c378                 | '------------------------------------------------------------------------------
3c378                 | ' Translate keyboard scancode to ASCII
3c378                 | '------------------------------------------------------------------------------
3c378                 | ' On entry:
3c378                 | '   hpar1 - scancode
3c378                 | '   hpar2 - key modifiers state
3c378                 | '       c - pressed (0) or released (1) flag
3c378                 | ' On exit:
3c378                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3c378                 | '               30..17 = unused
3c378                 | '                   18 = scroll-lock state 
3c378                 | '                   17 = caps-lock state
3c378                 | '                   16 = num-lock state 
3c378                 | '                15..8 = key modifiers state
3c378                 | '                 7..0 = scancode
3c378                 | '------------------------------------------------------------------------------
3c378                 | hkbd_translate
3c378     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3c37c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3c380     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3c384     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3c388     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3c38c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3c390                 | 
3c390                 |         if EMUPAD_MAX_PLAYER > 0
3c390                 | 
3c390                 |         if EMUPAD_BT0_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT1_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT2_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT3_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT4_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT5_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT6_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT7_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT8_BIT >= 0
3c390                 |         end
3c390                 |         if EMUPAD_BT9_BIT >= 0
3c390                 |         end
3c390                 | 
3c390                 |         end
3c390     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3c394     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3c398     1F 8E 47 F4 |                 bitc    hpar1, #31
3c39c                 |         if KEYQUEUE_SIZE > 0
3c39c     C0 09 B0 FE |                 loc pb,#keyq_head
3c3a0     F7 73 E3 FA |                 rdword htmp,pb
3c3a4     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3c3a8     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3c3ac     B9 77 03 F6 |                 mov htmp2,htmp
3c3b0     04 76 07 FA |                 mul htmp2,#4
3c3b4     F7 77 03 F1 |                 add htmp2,pb
3c3b8     02 76 07 F1 |                 add htmp2,#2
3c3bc     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3c3c0     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3c3c4     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3c3c8     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3c3cc                 |         end
3c3cc     2D 00 7C FD |                 ret wcz
3c3d0                 | 
3c3d0                 | if HAVE_MOUSE
3c3d0                 | '------------------------------------------------------------------------------
3c3d0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3c3d0                 | '------------------------------------------------------------------------------
3c3d0                 | ' On entry:
3c3d0                 | ' On exit:
3c3d0                 | '------------------------------------------------------------------------------
3c3d0                 | hget_mouse_in_report
3c3d0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c3d4     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3c3d8     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3c3dc     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3c3e0     CF 02 A0 FD |                 call    #do_int_in
3c3e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c3e8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c3ec                 | 
3c3ec     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c3f0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c3f4                 | 
3c3f4     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3c3f8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c3fc     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3c400     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3c404                 | 
3c404                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3c404                 | 
3c404                 |         if MOUSE_FULL_PROTOCOL
3c404     C8 00 B0 FD |                 call #hid_decode
3c408                 |         else
3c408                 |         end
3c408                 | 
3c408     48 09 90 FE |                 loc     pa, #mouse_limits
3c40c     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3c410                 | 
3c410                 |                 ' load xacc,yacc,zacc
3c410     28 04 64 FD |                 setq    #3-1
3c414     80 89 07 FB |                 rdlong  hr1,ptrb
3c418                 |                 ' load limits and outptr
3c418     28 04 64 FD |                 setq    #3-1
3c41c     F6 75 03 FB |                 rdlong  htmp1,pa
3c420                 | 
3c420                 |         if MOUSE_FULL_PROTOCOL
3c420     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3c424                 |         else
3c424                 |                 { ' Currently not used
3c424                 |                 '}
3c424                 |         end
3c424                 | 
3c424                 |         if MOUSE_FULL_PROTOCOL
3c424     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3c428     0F 72 67 F7 |                 signx   htmp, #15
3c42c                 |         else
3c42c                 |         end
3c42c     B9 89 03 F1 |                 add     hr1,htmp
3c430     00 74 0F F2 |                 cmp     htmp1,#0 wz
3c434     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3c438     00 88 47 53 |         if_ne   fges    hr1,#0
3c43c                 | 
3c43c                 |         if MOUSE_FULL_PROTOCOL
3c43c     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3c440     0F 72 67 F7 |                 signx   htmp, #15
3c444                 |         else
3c444                 |         end
3c444     B9 8B 03 F1 |                 add     hr2,htmp
3c448     00 76 0F F2 |                 cmp     htmp2,#0 wz
3c44c     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3c450     00 8A 47 53 |         if_ne   fges    hr2,#0
3c454                 |                 
3c454                 |         if MOUSE_FULL_PROTOCOL
3c454     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3c458     0F 72 67 F7 |                 signx   htmp, #15
3c45c     B9 8D 03 F1 |                 add     hr3, htmp
3c460                 |         else    
3c460                 |         end
3c460                 | 
3c460     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3c464     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3c468                 | 
3c468                 |                 ' write back accumulators
3c468     28 04 64 FD |                 setq    #3-1
3c46c     80 89 67 FC |                 wrlong  hr1,ptrb
3c470                 |                 ' if outptr set, write X/Y words
3c470     00 78 0F F2 |                 cmp htmp3,#0                    wz
3c474     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3c478     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3c47c     2D 00 64 FD |                 ret
3c480                 | end
3c480                 | 
3c480                 | '------------------------------------------------------------------------------
3c480                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3c480                 | '------------------------------------------------------------------------------
3c480                 | ' On entry:
3c480                 | ' On exit:
3c480                 | '------------------------------------------------------------------------------
3c480                 | if _HAVE_GAMEPAD
3c480                 | hget_gp_in_report
3c480     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c484     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c488                 | 
3c488     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3c48c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3c490     00 92 E3 F8 |                 getbyte hpar3
3c494     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3c498     CF 02 A0 FD |                 call    #do_int_in
3c49c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c4a0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c4a4                 | 
3c4a4     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c4a8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c4ac                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3c4ac                 | 
3c4ac     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3c4b0     00 72 E3 F8 |                 getbyte htmp                            ' |
3c4b4     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c4b8     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3c4bc     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3c4c0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3c4c4     B9 01 C0 F8 |                 setbyte htmp                            ' |
3c4c8                 | 
3c4c8                 | ' Note: the following code compares the current and previous reports
3c4c8                 | ' and process the data if there are changes to ease the debug output.
3c4c8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3c4c8                 | ' gpPreReport buffer.
3c4c8                 | 
3c4c8                 |                 ' ----- start of block to remove
3c4c8                 |                 {
3c4c8                 |                 }
3c4c8                 |                 ' ----- end of block to remove
3c4c8     14 05 90 FE |                 loc pa,#hpad_translate
3c4cc     2A EC 63 FD |                 push pa
3c4d0                 | 
3c4d0                 |                 ' FALL THROUGH !!!!
3c4d0                 | end
3c4d0                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3c4d0                 | '------------------------------------------------------------------------------
3c4d0                 | ' Decode controller report
3c4d0                 | '------------------------------------------------------------------------------
3c4d0                 | hid_decode
3c4d0                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3c4d0     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3c4d4     00 04 00 FF 
3c4d8     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3c4dc                 | 
3c4dc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3c4e0                 | 
3c4e0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c4e4     00 1C E3 F8 |                 getbyte hidr_type
3c4e8                 |         if _HAVE_GAMEPAD
3c4e8     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3c4ec     08 03 90 AD |         if_z    jmp     #hpad_xinput
3c4f0     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3c4f4     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3c4f8                 |         end
3c4f8     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3c4fc     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3c500     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3c504                 |                 
3c504                 | 
3c504                 | '------------------------------------------------------------------------------
3c504                 | ' Handle HID controller (or mouse now
3c504                 | ' On entry:
3c504                 | '   ptrb - controller report
3c504                 | '------------------------------------------------------------------------------
3c504                 | hpad_hid
3c504     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c508     F7 F1 03 F6 |                 mov     ptra, pb
3c50c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3c510     00 EC 03 F6 |                 mov     pa, 0-0
3c514                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3c514     19 2A 3B FF 
3c518     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3c51c                 | 
3c51c                 | .next
3c51c     00 EC 5F F2 |                 cmps    pa, #0      wcz
3c520     2D 00 7C ED |         if_be   ret     wcz
3c524                 | 
3c524     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3c528     01 EC 87 F1 |                 sub     pa, #1
3c52c     00 90 07 F6 |                 mov     hpar2, #0
3c530                 | 
3c530     C7 73 03 F6 |                 mov     htmp, hpar1
3c534     03 72 07 F5 |                 and     htmp, #$03
3c538     01 72 0F F2 |                 cmp     htmp, #1    wz
3c53c     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3c540     07 90 67 A7 |         if_z    signx   hpar2,#7
3c544     01 EC 87 A1 |         if_z    sub     pa, #1
3c548     02 72 0F F2 |                 cmp     htmp, #2    wz
3c54c     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3c550     0F 90 67 A7 |         if_z    signx   hpar2,#15
3c554     02 EC 87 A1 |         if_z    sub     pa, #2
3c558     03 72 0F F2 |                 cmp     htmp, #3    wz
3c55c     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3c560     04 EC 87 A1 |         if_z    sub     pa, #4
3c564                 | 
3c564     FC 8E 07 F5 |                 and     hpar1, #$FC
3c568                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3c568                 | 
3c568     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3c56c     18 01 90 AD |         if_z    jmp     #.report_id
3c570     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3c574     30 01 90 AD |         if_z    jmp     #.usage_page
3c578     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3c57c     38 01 90 AD |         if_z    jmp     #.usage
3c580     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3c584     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3c588     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3c58c     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3c590     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3c594     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3c598     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3c59c     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3c5a0     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3c5a4     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3c5a8     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3c5ac     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3c5b0     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3c5b4     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3c5b8     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3c5bc     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3c5c0     58 FF 9F 5D |         if_nz   jmp     #.next
3c5c4                 | 
3c5c4     D5 25 A7 FB |                 tjf     hidr_state,#.next
3c5c8                 | 
3c5c8     03 90 07 F5 |                 and     hpar2, #$03
3c5cc     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3c5d0     18 00 90 5D |         if_nz   jmp     #.skip
3c5d4                 | 
3c5d4     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3c5d8     20 00 90 AD |         if_z    jmp     #.axes
3c5dc     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3c5e0     5C 00 90 AD |         if_z    jmp     #.hats
3c5e4     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3c5e8     70 00 90 AD |         if_z    jmp     #.buttons
3c5ec                 | .skip
3c5ec     93 73 03 F6 |                 mov     htmp, hidr_size
3c5f0     94 73 03 FA |                 mul     htmp, hidr_count
3c5f4     B9 21 03 F1 |                 add     hidr_offset, htmp
3c5f8     20 FF 9F FD |                 jmp     #.next
3c5fc                 | .axes
3c5fc                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3c5fc     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3c600     94 89 03 F6 |                 mov     hr1, hidr_count
3c604                 | .l1
3c604     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3c608     93 91 03 F6 |                 mov     hpar2, hidr_size
3c60c     28 01 B0 FD |                 call    #hpad_getbits
3c610     88 01 B0 FD |                 call    #hpad_normalize
3c614     08 86 1F F2 |                 cmp     hr0, #8         wcz
3c618     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3c61c     00 8A 43 C8 |         if_b    getnib  hr2
3c620     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3c624     5F 01 20 C9 |         if_b    setword retval
3c628     01 86 07 C1 |         if_b    add     hr0, #1
3c62c     93 21 03 F1 |                 add     hidr_offset, hidr_size
3c630     F4 89 6F FB |                 djnz    hr1, #.l1
3c634                 | 
3c634     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3c638     01 24 07 F6 |                 mov     hidr_state, #1
3c63c     DC FE 9F FD |                 jmp     #.next
3c640                 | .hats
3c640                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3c640     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3c644     93 91 03 F6 |                 mov     hpar2, hidr_size
3c648     EC 00 B0 FD |                 call    #hpad_getbits
3c64c     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3c650     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3c654     01 24 07 F6 |                 mov     hidr_state, #1
3c658     90 FF 9F FD |                 jmp     #.skip
3c65c                 | .buttons
3c65c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3c65c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3c660     93 91 03 F6 |                 mov     hpar2, hidr_size
3c664     94 91 03 FA |                 mul     hpar2, hidr_count
3c668     CC 00 B0 FD |                 call    #hpad_getbits
3c66c     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3c670     B9 BF 62 F0 |                 shl     retval, htmp
3c674     5F 19 43 F5 |                 or      hidr_buttons, retval
3c678     94 73 03 F1 |                 add     htmp, hidr_count
3c67c     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3c680     01 24 07 F6 |                 mov     hidr_state, #1
3c684     64 FF 9F FD |                 jmp     #.skip
3c688                 | .report_id
3c688     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3c68c     2D 00 7C 5D |         if_nz   ret     wcz
3c690     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3c694                 |                 'debug(".report_id",udec(htmp,hpar2))
3c694     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3c698     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3c69c     01 24 67 56 |         if_nz   neg     hidr_state,#1
3c6a0     01 F2 87 51 |         if_nz   sub     ptrb,#1
3c6a4     74 FE 9F FD |                 jmp     #.next
3c6a8                 | .usage_page
3c6a8     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3c6ac     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3c6b0     04 24 07 A6 |         if_z    mov     hidr_state, #4
3c6b4     64 FE 9F FD |                 jmp     #.next
3c6b8                 | .usage
3c6b8     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3c6bc     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3c6c0     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3c6c4     01 24 07 A6 |         if_z    mov     hidr_state, #1
3c6c8     50 FE 9F AD |         if_z    jmp     #.next
3c6cc     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3c6d0     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3c6d4     01 24 07 A6 |         if_z    mov     hidr_state, #1
3c6d8     40 FE 9F AD |         if_z    jmp     #.next
3c6dc     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3c6e0     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3c6e4     10 00 90 3D |         if_nc   jmp     #.usage_axis
3c6e8     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3c6ec     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3c6f0     03 24 07 A6 |         if_z    mov     hidr_state, #3
3c6f4     24 FE 9F FD |                 jmp     #.next
3c6f8                 | .usage_axis
3c6f8     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3c6fc     1C FE 9F CD |         if_b    jmp     #.next
3c700     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3c704     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3c708     C8 01 00 F8 |                 setnib  hpar2
3c70c                 | 
3c70c     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3c710     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3c714                 | 
3c714     01 22 07 F1 |                 add     hidr_usage_idx, #1
3c718     02 24 07 F6 |                 mov     hidr_state, #2
3c71c     FC FD 9F FD |                 jmp     #.next
3c720                 | .pushpop
3c720                 |                 ' Entering with C set if PUSH  
3c720     4C 0F B0 FE |                 loc     pb, #hid_stack
3c724     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3c728     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3c72c     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3c730     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3c734     E4 FD 9F FD |                 jmp     #.next
3c738                 | 
3c738                 | '------------------------------------------------------------------------------
3c738                 | ' Read bits from report data buffer
3c738                 | '------------------------------------------------------------------------------
3c738                 | ' On entry:
3c738                 | '   PTRB - report buffer
3c738                 | '   hpar1 - start bit
3c738                 | '   hpar2 - number of bits
3c738                 | ' On exit:
3c738                 | '   retval - bits
3c738                 | '------------------------------------------------------------------------------
3c738                 | hpad_getbits
3c738     C7 73 03 F6 |                 mov     htmp, hpar1
3c73c     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3c740     F9 73 03 F1 |                 add     htmp, ptrb
3c744     B9 BF 02 FB |                 rdlong  retval, htmp
3c748                 | 
3c748     C7 75 03 F6 |                 mov     htmp1, hpar1
3c74c     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3c750     BA BF 42 F0 |                 shr     retval, htmp1
3c754                 | 
3c754     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3c758     10 00 90 1D |         if_a    jmp     #.l1
3c75c                 | 
3c75c     C8 91 C3 F9 |                 decod   hpar2
3c760     01 90 87 F1 |                 sub     hpar2, #1
3c764     C8 BF 02 F5 |                 and     retval, hpar2
3c768     2D 00 64 FD |                 ret
3c76c                 | .l1
3c76c     FF 7F 00 FF 
3c770     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3c774     03 72 07 F1 |                 add     htmp, #3
3c778     B9 77 03 FB |                 rdlong  htmp2, htmp
3c77c     18 90 87 F1 |                 sub     hpar2, #24
3c780     C8 91 C3 F9 |                 decod   hpar2
3c784     01 90 87 F1 |                 sub     hpar2, #1
3c788     BA 77 43 F0 |                 shr     htmp2, htmp1
3c78c     C8 77 03 F5 |                 and     htmp2, hpar2
3c790     18 76 67 F0 |                 shl     htmp2, #24
3c794     BB BF 42 F5 |                 or      retval, htmp2
3c798     2D 00 64 FD |                 ret
3c79c                 | 
3c79c                 | '------------------------------------------------------------------------------
3c79c                 | ' Normalize value to signed word (-32768 / 32767)
3c79c                 | '------------------------------------------------------------------------------
3c79c                 | ' On entry:
3c79c                 | '   retval - value to normalize
3c79c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3c79c                 | '   - or -
3c79c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3c79c                 | '   hidr_size - value bits length
3c79c                 | ' On exit:
3c79c                 | '   retval - normalized value
3c79c                 | '------------------------------------------------------------------------------
3c79c                 | hpad_normalize
3c79c     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3c7a0     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3c7a4     2D 00 64 AD |         if_z    ret
3c7a8     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3c7ac     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3c7b0     0F 74 77 F7 |                 signx   htmp1, #15      wc
3c7b4     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3c7b8     00 BE 66 C7 |         if_c    signx   retval, #0-0
3c7bc                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3c7bc     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3c7c0     2D 00 64 AD |         if_z    ret
3c7c4     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3c7c8     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3c7cc     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3c7d0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3c7d4     B9 73 53 F6 |                 abs     htmp            wc
3c7d8     1F BE 0E F4 |                 testb   retval, #31     wz
3c7dc     5F BF 42 F6 |                 abs     retval
3c7e0     B9 BF 12 FD |                 qdiv    retval, htmp
3c7e4     18 BE 62 FD |                 getqx   retval
3c7e8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3c7ec     C0 FF 7F FF 
3c7f0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3c7f4     2D 00 64 FD |                 ret
3c7f8                 | end
3c7f8                 | 
3c7f8                 | if _HAVE_GAMEPAD
3c7f8                 | '------------------------------------------------------------------------------
3c7f8                 | ' Handle XInput controller
3c7f8                 | ' On entry:
3c7f8                 | '   ptrb - controller report
3c7f8                 | '------------------------------------------------------------------------------
3c7f8                 | '   Default implementation translates the report to a pseudo-defacto hid
3c7f8                 | '   standard and jumps to hpad_translate for actions.
3c7f8                 | '   Implementors may take specific actions for this kind of controller.
3c7f8                 | '------------------------------------------------------------------------------
3c7f8                 | hpad_xinput
3c7f8     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3c7fc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3c800     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3c804     14 72 0F F2 |                 cmp     htmp, #$14      wz
3c808     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3c80c                 | 
3c80c                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3c80c                 | 
3c80c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3c810     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3c814                 | 
3c814     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3c818     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3c81c     5F BF 22 F6 |                 not     retval
3c820     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3c824     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3c828     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3c82c     5F BF 22 F6 |                 not     retval
3c830     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3c834                 | 
3c834     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3c838     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3c83c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3c840     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3c844     54 FF BF FD |                 call    #hpad_normalize
3c848     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3c84c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3c850     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3c854     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3c858     40 FF BF FD |                 call    #hpad_normalize
3c85c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3c860                 | 
3c860     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3c864     81 BF E6 FA |                 rdword  retval, ptrb[1]
3c868     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3c86c     00 18 47 F4 |                 bitc    hidr_buttons, #0
3c870     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3c874     01 18 47 F4 |                 bitc    hidr_buttons, #1
3c878     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3c87c     02 18 47 F4 |                 bitc    hidr_buttons, #2
3c880     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3c884     03 18 47 F4 |                 bitc    hidr_buttons, #3
3c888     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3c88c     04 18 47 F4 |                 bitc    hidr_buttons, #4
3c890     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3c894     05 18 47 F4 |                 bitc    hidr_buttons, #5
3c898     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3c89c     08 18 47 F4 |                 bitc    hidr_buttons, #8
3c8a0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3c8a4     09 18 47 F4 |                 bitc    hidr_buttons, #9
3c8a8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3c8ac     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3c8b0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3c8b4     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3c8b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3c8bc     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3c8c0                 | 
3c8c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3c8c4     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3c8c8     7A BB 7A FF 
3c8cc     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3c8d0     F9 FF 7F FF 
3c8d4     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3c8d8     BA 73 5F F9 |                 altgn   htmp, #htmp1
3c8dc     00 72 43 F8 |                 getnib  htmp
3c8e0     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3c8e4                 | 
3c8e4                 | '------------------------------------------------------------------------------
3c8e4                 | ' Handle PS3 controller
3c8e4                 | ' On entry:
3c8e4                 | '   ptrb - controller report
3c8e4                 | '------------------------------------------------------------------------------
3c8e4                 | '   Default implementation translates the report to a pseudo-defacto hid
3c8e4                 | '   standard and jumps to hpad_translate for actions.
3c8e4                 | '   Implementors may take specific actions for this kind of controller.
3c8e4                 | '------------------------------------------------------------------------------
3c8e4                 | hpad_ps3
3c8e4     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3c8e8     01 72 0F F2 |                 cmp     htmp, #$01      wz
3c8ec     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3c8f0                 | 
3c8f0                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3c8f0                 | 
3c8f0     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3c8f4     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3c8f8                 | 
3c8f8     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3c8fc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3c900     98 FE BF FD |                 call    #hpad_normalize
3c904     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3c908     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3c90c     8C FE BF FD |                 call    #hpad_normalize
3c910     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3c914     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3c918     80 FE BF FD |                 call    #hpad_normalize
3c91c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3c920     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3c924     74 FE BF FD |                 call    #hpad_normalize
3c928     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3c92c     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3c930     68 FE BF FD |                 call    #hpad_normalize
3c934     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3c938     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3c93c     5C FE BF FD |                 call    #hpad_normalize
3c940     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3c944                 | 
3c944     08 8E 07 F6 |                 mov     hpar1, #8
3c948     13 90 07 F6 |                 mov     hpar2, #19
3c94c     E8 FD BF FD |                 call    #hpad_getbits
3c950                 | 
3c950     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3c954     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3c958     00 18 47 F4 |                 bitc    hidr_buttons, #0
3c95c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3c960     01 18 47 F4 |                 bitc    hidr_buttons, #1
3c964     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3c968     02 18 47 F4 |                 bitc    hidr_buttons, #2
3c96c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3c970     03 18 47 F4 |                 bitc    hidr_buttons, #3
3c974     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3c978     04 18 47 F4 |                 bitc    hidr_buttons, #4
3c97c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3c980     05 18 47 F4 |                 bitc    hidr_buttons, #5
3c984     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3c988     06 18 47 F4 |                 bitc    hidr_buttons, #6
3c98c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3c990     07 18 47 F4 |                 bitc    hidr_buttons, #7
3c994     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3c998     08 18 47 F4 |                 bitc    hidr_buttons, #8
3c99c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3c9a0     09 18 47 F4 |                 bitc    hidr_buttons, #9
3c9a4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3c9a8     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3c9ac     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3c9b0     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3c9b4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3c9b8     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3c9bc                 | 
3c9bc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3c9c0     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3c9c4     09 FA 79 FF 
3c9c8     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3c9cc     FF FA 7F FF 
3c9d0     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3c9d4     BA 73 5F F9 |                 altgn   htmp, #htmp1
3c9d8     00 72 43 F8 |                 getnib  htmp
3c9dc     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3c9e0                 | 
3c9e0                 | 
3c9e0                 | '------------------------------------------------------------------------------
3c9e0                 | ' Perform controller actions
3c9e0                 | ' On entry:
3c9e0                 | '    hidr_id        report id
3c9e0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3c9e0                 | '                      X = hidr_axis+0, #0
3c9e0                 | '                      Y = hidr_axis+0, #1
3c9e0                 | '                      Z = hidr_axis+1, #0
3c9e0                 | '                     RX = hidr_axis+1, #1
3c9e0                 | '                     RY = hidr_axis+2, #0
3c9e0                 | '                     RZ = hidr_axis+2, #1
3c9e0                 | '                     Sl = hidr_axis+3, #0
3c9e0                 | '                     Wh = hidr_axis+3, #1
3c9e0                 | '    hidr_buttons   buttons state (bits 0 to 31)
3c9e0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3c9e0                 | '
3c9e0                 | '                     -------3 -------2 -------1 -------0 byte
3c9e0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3c9e0                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3c9e0                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3c9e0                 | '                              |||||||| ||||++++--------- n. axes
3c9e0                 | '                              |||||||| ++++------------- n. hats
3c9e0                 | '                              ++++++++------------------ valid axes
3c9e0                 | '------------------------------------------------------------------------------
3c9e0                 | hpad_translate
3c9e0                 | 
3c9e0                 | 
3c9e0                 |         if HAVE_HIDPAD
3c9e0     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3c9e4     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3c9e8     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3c9ec     01 72 E7 F2 |                 cmpsub  htmp,#1
3c9f0     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3c9f4     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3c9f8     2D 00 7C 3D |         if_ae   ret     wcz
3c9fc     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3ca00     B9 F3 03 F1 |                 add     ptrb,htmp
3ca04     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ca08     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3ca0c     28 0E 64 FD |                 setq    #8-1
3ca10     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3ca14                 |         end
3ca14                 | 
3ca14                 | 
3ca14                 |         if EMUPAD_MAX_PLAYER > 0
3ca14                 | .emupad_no_hat
3ca14                 |         if EMUPAD_BT0_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT1_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT2_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT3_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT4_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT5_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT6_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT7_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT8_BIT >= 0
3ca14                 |         end
3ca14                 |         if EMUPAD_BT9_BIT >= 0
3ca14                 |         end
3ca14                 | .emupad_slot_over
3ca14                 |         end
3ca14                 | 
3ca14                 |         if 0
3ca14                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3ca14                 | 
3ca14                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3ca14                 | 
3ca14                 |         end
3ca14     2D 00 64 FD |                 ret
3ca18                 | end
3ca18                 | 
3ca18                 | if EMUPAD_MAX_PLAYER > 0
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | ' Clear EmuPad state
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | emupad_reset
3ca18                 | 
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | ' Get EmuPad Player number for current device (into retval)
3ca18                 | ' Z flag is also set if current device is valid
3ca18                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | emupad_getnum
3ca18                 | .loop
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | emupad_discon
3ca18                 | .loop         
3ca18                 |         
3ca18                 |         ' FALL THROUGH!!!
3ca18                 | 
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | ' Update EmuPad reports (all of them...)
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | emupad_write_reports
3ca18                 | .devloop
3ca18                 | 
3ca18                 | end
3ca18                 | 
3ca18                 | 
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | ' On entry:
3ca18                 | ' On exit:
3ca18                 | '------------------------------------------------------------------------------
3ca18                 | hget_hub_status
3ca18     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3ca1c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3ca20     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3ca24     01 92 2F F9 |                 setword hpar3, #1, #1
3ca28     CF 02 A0 FD |                 call    #do_int_in
3ca2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca30     0C 00 90 AD |         if_z    jmp     #.data
3ca34     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3ca38     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3ca3c     2D 00 64 FD |                 ret
3ca40                 | .data
3ca40     00 92 0F F2 |                 cmp     hpar3, #0               wz
3ca44     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ca48                 | 
3ca48     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3ca4c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3ca50     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3ca54     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3ca58                 |                 debug(ubin_long(hub_status_chg))
3ca58                 | 
3ca58     01 5A 06 F6 |                 mov     hdev_port, #1
3ca5c                 | .loop
3ca5c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3ca60     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3ca64     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3ca68     F0 FF 9F 3D |         if_nc   jmp     #.loop
3ca6c     2D 00 64 FD |                 ret
3ca70                 | 
3ca70                 | hub_port_handler
3ca70     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3ca74     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ca78     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ca7c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ca80     55 02 A0 FD |                 call    #control_read
3ca84     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ca88                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ca88                 | 
3ca88     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3ca8c     50 01 90 5D |         if_x0   jmp     #.other
3ca90     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3ca94     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3ca98     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ca9c     A0 02 A0 FD |                 call    #control_write
3caa0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3caa4     7C 01 90 5D |         if_x0   jmp     #.disconnect
3caa8     B1 99 02 F6 |                 mov     hctwait, _100ms_
3caac     EF 02 A0 FD |                 call    #poll_waitx
3cab0                 | 
3cab0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3cab4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3cab8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cabc     A0 02 A0 FD |                 call    #control_write
3cac0                 | 
3cac0     02 78 07 F6 |                 mov     htmp3, #2
3cac4                 | .wait_reset
3cac4     AD 99 02 F6 |                 mov     hctwait, _8ms_
3cac8     EF 02 A0 FD |                 call    #poll_waitx
3cacc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cad0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cad4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cad8     55 02 A0 FD |                 call    #control_read
3cadc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3cae0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3cae4     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3cae8                 | 
3cae8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3caec     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3caf0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3caf4     A0 02 A0 FD |                 call    #control_write
3caf8                 | 
3caf8     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3cafc                 | .wait_recover
3cafc     A8 99 02 F6 |                 mov     hctwait, _1ms_
3cb00     EF 02 A0 FD |                 call    #poll_waitx
3cb04     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3cb08                 | 
3cb08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3cb0c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3cb10     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3cb14                 | 
3cb14     00 08 00 FF 
3cb18     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3cb1c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3cb20     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3cb24     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3cb28     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3cb2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb30     48 01 90 5D |         if_nz   jmp     #.done
3cb34                 | .get_dev_desc
3cb34     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3cb38     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3cb3c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3cb40     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3cb44     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3cb48     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3cb4c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3cb50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb54     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3cb58     AD 99 02 F6 |                 mov     hctwait, _8ms_
3cb5c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3cb60     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3cb64     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3cb68     BE 00 A0 FD |                 call    #calc_crc5
3cb6c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3cb70     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3cb74     F7 AD C2 FA |                 rdbyte  total_data, pb
3cb78     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3cb7c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3cb80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb84     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3cb88     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3cb8c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3cb90                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3cb90     A0 99 02 F6 |                 mov     hctwait, _500us_
3cb94     EF 02 A0 FD |                 call    #poll_waitx
3cb98     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3cb9c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3cba0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3cba4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3cba8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cbac     CC 00 90 5D |         if_nz   jmp     #.done
3cbb0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3cbb4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3cbb8     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3cbbc     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3cbc0     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3cbc4     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3cbc8     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3cbcc     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3cbd0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3cbd4     A4 00 90 CD |         if_b    jmp     #.done
3cbd8     68 F0 BF FD |                 call    #hparse_con_desc
3cbdc     9C 00 90 FD |                 jmp     #.done
3cbe0                 | 
3cbe0                 | .other
3cbe0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3cbe4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3cbe8     28 00 90 AD |         if_x1   jmp     #.reset_feature
3cbec     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3cbf0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3cbf4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3cbf8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3cbfc     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3cc00     10 00 90 AD |         if_x1   jmp     #.reset_feature
3cc04     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3cc08     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3cc0c     04 00 90 AD |         if_x1   jmp     #.reset_feature
3cc10     68 00 90 FD |                 jmp     #.done
3cc14                 | .reset_feature
3cc14     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3cc18     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cc1c     A0 02 A0 FD |                 call    #control_write
3cc20     58 00 90 FD |                 jmp     #.done
3cc24                 | .disconnect
3cc24                 | 
3cc24     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3cc28     00 72 E3 F8 |                 getbyte htmp
3cc2c     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3cc30     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3cc34     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3cc38     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3cc3c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3cc40     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3cc44                 |         if EMUPAD_MAX_PLAYER > 0
3cc44                 |         end
3cc44                 |         if HAVE_MOUSE
3cc44     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3cc48     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3cc4c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3cc50                 |         end
3cc50                 |         if HAVE_HIDPAD
3cc50     30 0A F0 FE |                 loc ptrb,#hidpad_report
3cc54     2D 73 03 F6 |                 mov htmp,hdev_port
3cc58     01 72 E7 F2 |                 cmpsub htmp,#1
3cc5c     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3cc60     B9 F3 03 F1 |                 add ptrb,htmp
3cc64     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3cc68     80 01 6C FC |                 wrlong #0,ptrb
3cc6c                 |         end
3cc6c                 | 
3cc6c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3cc70     00 00 C4 F8 |                 setbyte #0
3cc74     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3cc78     00 00 04 F6 |                 mov     0-0, #0
3cc7c                 | 
3cc7c                 | .done
3cc7c     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3cc80     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3cc84     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3cc88     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3cc8c     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3cc90     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3cc94                 | 
3cc94     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cc98     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cc9c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cca0     55 02 A0 FD |                 call    #control_read
3cca4     00 69 06 FB |                 rdlong  hub_port_status, ptra
3cca8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3cca8     2D 00 64 FD |                 ret
3ccac                 | 
3ccac                 | '------------------------------------------------------------------------------
3ccac                 | ' Partially populated SETUP packets
3ccac                 | '------------------------------------------------------------------------------
3ccac     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ccad     06          |                 byte    REQ_GET_DESC
3ccae     00 01       |                 word    TYPE_DEVICE << 8
3ccb0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ccb2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ccb4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ccb5     06          |                 byte    REQ_GET_DESC
3ccb6     00 02       |                 word    TYPE_CONFIG << 8
3ccb8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ccba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ccbc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ccbd     09          |                 byte    REQ_SET_CONFIG
3ccbe     00 00       |                 word    0       ' Configuration value
3ccc0     00 00       |                 word    0       ' Zero
3ccc2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3ccc4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ccc5     05          |                 byte    REQ_SET_ADDR
3ccc6     00 00       |                 word    0       ' Zero
3ccc8     00 00       |                 word    0       ' Zero
3ccca     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3cccc                 | '------------------------------------------------------------------------------
3cccc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3cccc                 | ' wValue field dictates which protocol should be used.
3cccc                 | '
3cccc                 | ' When initialized, all devices default to report protocol. However the host
3cccc                 | ' should not make any assumptions about the device state and should set the
3cccc                 | ' desired protocol whenever initializing a device.
3cccc                 | '------------------------------------------------------------------------------
3cccc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3cccd     0B          |                 byte    HID_SET_PROTO
3ccce     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3ccd0                 |                                                 ' (HID 1.11 Section 7.2.6).
3ccd0     00 00       |                 word    0               ' Interface index number.
3ccd2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3ccd4                 | '------------------------------------------------------------------------------
3ccd4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ccd5     0A          |                 byte    HID_SET_IDLE
3ccd6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3ccd8                 |                                         ' reporting until a change is detected in the report data
3ccd8                 | 
3ccd8                 |                                         ' (HID 1.11 Section 7.2.4).
3ccd8     00 00       |                 word    0       ' Interface index number.
3ccda     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3ccdc     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ccdd     09          |                 byte    HID_SET_REPORT
3ccde     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3cce0                 |                                         ' (HID 1.11 Section 7.2.2).
3cce0     00 00       |                 word    0       ' Interface index number.
3cce2     00 00       |                 word    0       ' Size of the report, in bytes.
3cce4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3cce5     06          |                 byte    REQ_GET_DESC
3cce6     00 22       |                 word    TYPE_REPORT << 8
3cce8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ccea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ccec                 | '------------------------------------------------------------------------------
3ccec     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3cced     06          |                 byte    REQ_GET_DESC
3ccee     00 29       |                 word    TYPE_HUB << 8
3ccf0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ccf2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ccf4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ccf5     03          |                 byte    REQ_SET_FEATURE
3ccf6     00 00       |                 word    0       ' port power
3ccf8     01 00       |                 word    1       ' Port index number (1+)
3ccfa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ccfc     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ccfd     01          |                 byte    REQ_CLEAR_FEATURE
3ccfe     00 00       |                 word    0       ' port power
3cd00     01 00       |                 word    1       ' Port index number (1+)
3cd02     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cd04     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3cd05     00          |                 byte    REQ_GET_STATUS
3cd06     00 00       |                 word    0
3cd08     01 00       |                 word    1       ' Port index number (1+)
3cd0a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3cd0c                 | '------------------------------------------------------------------------------
3cd0c                 | if _HAVE_GAMEPAD
3cd0c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3cd10                 | ps3_command_buff
3cd10     00 00 00 00 
3cd14     00          |                 byte    $00, $00, $00, $00, $00
3cd15     00 00 00 00 
3cd19     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3cd1a     FF 27 10 00 
3cd1e     32          |                 byte    $FF, $27, $10, $00, $32
3cd1f     FF 27 10 00 
3cd23     32          |                 byte    $FF, $27, $10, $00, $32
3cd24     FF 27 10 00 
3cd28     32          |                 byte    $FF, $27, $10, $00, $32
3cd29     FF 27 10 00 
3cd2d     32          |                 byte    $FF, $27, $10, $00, $32
3cd2e     00 00 00 00 
3cd32     00          |                 byte    $00, $00, $00, $00, $00
3cd33     00 00 00 00 
3cd37     00          |                 byte    $00, $00, $00, $00, $00
3cd38     00 00 00 00 
3cd3c     00          |                 byte    $00, $00, $00, $00, $00
3cd3d     00 00 00    |                 byte    $00, $00, $00
3cd40                 | '------------------------------------------------------------------------------
3cd40     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3cd43                 |                                         ' 0x01 All blinking
3cd43                 |                                         ' 0x02 1 flashes, then on
3cd43                 |                                         ' 0x03 2 flashes, then on
3cd43                 |                                         ' 0x04 3 flashes, then on
3cd43                 |                                         ' 0x05 4 flashes, then on
3cd43                 |                                         ' 0x06 1 on
3cd43                 |                                         ' 0x07 2 on
3cd43                 |                                         ' 0x08 3 on
3cd43                 |                                         ' 0x09 4 on
3cd43                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3cd43                 |                                         ' 0x0B Blinking*
3cd43                 |                                         ' 0x0C Slow blinking*
3cd43                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3cd43     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3cd46     00          |                 byte    $00             ' Left rumble
3cd47     00          |                 byte    $00             ' Right rumble
3cd48     00 00 00    |                 byte    $00, $00, $00
3cd4b                 | 
3cd4b                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3cd4b                 |                 '' of certain wired 8bitdo gamepads.
3cd4b     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3cd4c     06          |                 byte    REQ_GET_DESC
3cd4d     04 03       |                 word    TYPE_STRING << 8 + 4
3cd4f     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3cd51     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3cd53     00          | end
3cd54                 | alignl
3cd54                 | 
3cd54                 | if HAVE_MOUSE
3cd54     00 00 00 00 
3cd58     00 00 00 00 | mouse_limits long 0[2]
3cd5c     00 00 00 00 | mouse_outptr long 0
3cd60                 | end
3cd60                 | 
3cd60                 | if KEYQUEUE_SIZE > 0
3cd60     00          | keyq_head byte 0
3cd61     00          | keyq_tail byte 0
3cd62     00 00 00 00 
      ...             
3cf5e     00 00 00 00 
3cf62     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3cf64                 | alignl
3cf64                 | end
3cf64                 | 
3cf64                 | if EMUPAD_MAX_PLAYER > 0
3cf64                 | emupad_rule_buffer
3cf64                 | if EMUPAD_BUILTIN_RULES
3cf64                 | file "padmap_builtin.dat"
3cf64                 | end
3cf64                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3cf64                 | '' Default rule directly follows!
3cf64                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3cf64                 | end
3cf64                 | 
3cf64                 | '------------------------------------------------------------------------------
3cf64                 | ' The USB data cache area gets zero-filled at every device disconnect
3cf64                 | '------------------------------------------------------------------------------
3cf64                 | usb_cache_start
3cf64                 | 
3cf64                 | ' HID descriptor and report buffers
3cf64                 | if !!OVERLAP_MEMORY
3cf64     00 00 00 00 
      ...             
3d65c     00 00 00 00 
3d660     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3d664                 | end
3d664     00 00 00 00 
3d668     00 00 00 00 | hkbd_report     byte    0[8]
3d66c     00 00 00 00 | hkbd_led_rep    byte    0
3d670                 | alignl
3d670                 | 
3d670     00 00 00 00 
3d674     00 00 00 00 
3d678     00 00 00 00 
3d67c     00 00 00 00 
3d680     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3d684                 | 
3d684                 | if HAVE_HIDPAD
3d684     00 00 00 00 
      ...             
3d75c     00 00 00 00 
3d760     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3d764                 | end
3d764                 | 
3d764                 | ' HUB descriptor
3d764     00          | hub_descr       byte    0   ' bDescLength
3d765     00          |                 byte    0   ' bDescriptorType
3d766     00          |                 byte    0   ' bNbrPorts
3d767     00 00       |                 word    0   ' wHubCharacteristics
3d769     00          |                 byte    0   ' bPwrOn2PwrGood
3d76a     00          |                 byte    0   ' bHubContrCurrent
3d76b     00          |                 byte    0   ' DeviceRemoveable
3d76c     00          |                 byte    0   ' PortPwrCtrlMask
3d76d                 | 
3d76d                 | usb_cache_end
3d76d                 | 
3d76d                 | if HAVE_MOUSE
3d76d     00 00 00 00 | mouse_xacc      long 0
3d771     00 00 00 00 | mouse_yacc      long 0
3d775     00 00 00 00 | mouse_zacc      long 0
3d779     00          | mouse_bstate    byte 0
3d77a     00          | mouse_lpending  byte 0
3d77b     00          | mouse_rpending  byte 0
3d77c     00          | mouse_mpending  byte 0
3d77d     00          | mouse_lock      byte 0
3d77e     00 00 00    |                 byte 0[3] ' padding
3d781                 | end
3d781                 | 
3d781     00 00 00 00 
      ...             
3d7f9     00 00 00 00 
3d7fd     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3d801     00 00 00 00 
3d805     00 00 00 00 
3d809     00 00 00 00 
3d80d     00 00 00 00 
3d811     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3d813     00 00 00 00 
      ...             
3d90b     00 00 00 00 
3d90f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3d913                 | 
3d913     00          | driver_cog      byte    0                       ' Current driver cog + 1
3d914                 | 	alignl
3d914                 | _audio096_spin2_dat_
3d914                 | 
3d914                 | audio       org     0
3d914                 | 
3d914     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3d918     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3d91c     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3d920                 |  
3d920     01 EC 63 FD |             cogid   pa                   ' compute cogid
3d924     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3d928     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3d92c     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3d930                 | 
3d930     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3d934     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3d938     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3d93c     0F 24 06 FC |             wrpin   dac2,#right
3d940     0F 00 1E FC |             wxpin   #256,#right    
3d944     41 9C 64 FD |             dirh    #left addpins 1
3d948     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3d94c     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3d950     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3d954                 |             
3d954                 | '---------------------------------------------------------------------------------        
3d954                 | '----------------- The main loop -------------------------------------------------
3d954                 | '---------------------------------------------------------------------------------
3d954                 | 
3d954     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3d958     10 00 90 CD |       if_c  jmp     #loop1
3d95c                 |   
3d95c     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3d960     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3d964     D5 00 80 F1 |             sub     0-0,a40000000
3d968     FD 01 6E FB |             djnz    cn,#p402
3d96c                 |     
3d96c     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3d970     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3d974     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3d978     01 00 06 C6 |     if_c    mov     cn,#1
3d97c     DA 02 3A F3 |             fle     ct,time3 wcz
3d980     02 00 06 C6 |     if_c    mov     cn,#2     
3d984     DB 02 3A F3 |             fle     ct,time4 wcz
3d988     03 00 06 C6 |     if_c    mov     cn,#3
3d98c     DC 02 3A F3 |             fle     ct,time5 wcz
3d990     04 00 06 C6 |     if_c    mov     cn,#4
3d994     DD 02 3A F3 |             fle     ct,time6 wcz
3d998     05 00 06 C6 |     if_c    mov     cn,#5
3d99c     DE 02 3A F3 |             fle     ct,time7 wcz
3d9a0     06 00 06 C6 |     if_c    mov     cn,#6
3d9a4     DF 02 3A F3 |             fle     ct,time8 wcz
3d9a8     07 00 06 C6 |     if_c    mov     cn,#7
3d9ac                 | 
3d9ac                 | 
3d9ac                 | '----------------------------------------------------------------------------------
3d9ac                 | '------------- Compute channel samples --------------------------------------------
3d9ac                 | '----------------------------------------------------------------------------------
3d9ac                 | 
3d9ac                 | 
3d9ac     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3d9b0     06 C0 65 F0 |             shl     channeladd,#6
3d9b4     E0 F0 03 F1 |             add     ptra,channeladd
3d9b8                 | 
3d9b8     28 16 64 FD |             setq    #11                        	' read parameters
3d9bc     00 D7 05 FB |             rdlong  pointer0,ptra
3d9c0                 |     	    
3d9c0     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3d9c4     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3d9c8     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3d9cc     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3d9d0     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3d9d4     00 C4 0D F2 |             cmp     qq,#0 wz                         
3d9d8     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3d9dc     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3d9e0                 |             
3d9e0     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3d9e4     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3d9e8     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3d9ec                 | 
3d9ec     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3d9f0     EC 08 3A F9 |             getword oldrs,sample0,#1
3d9f4     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3d9f8     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3d9fc     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3da00     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3da04                 | 
3da04     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3da08     00 04 02 F6 |             mov     dt0,0-0    
3da0c     D7 04 82 F1 |             sub     dt0,time0
3da10                 |             
3da10     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3da14     FB 00 00 F1 |             add     0-0,afreq0  	
3da18                 |             
3da18                 | '---- envelopes
3da18                 |             
3da18     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3da1c     20 00 00 AF 
3da20     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3da24     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3da28                 | 
3da28     FB 48 02 F6 |             mov     envs1,afreq0
3da2c     F5 48 02 FA |             mul     envs1,envspd0
3da30     24 E7 01 F1 |             add     envph0,envs1 
3da34                 | 
3da34     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3da38     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3da3c     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3da40     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3da44     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3da48     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3da4c     00 46 06 36 |     if_ge   mov     envlo,#0
3da50     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3da54     16 E6 65 30 |     if_ge   shl     envph0,#22
3da58                 | 
3da58     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3da5c     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3da60     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3da64     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3da68     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3da6c     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3da70     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3da74     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3da78     23 49 02 FA |             mul     envs1,envlo
3da7c     25 49 02 F1 |             add     envs1,envs2
3da80     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3da84                 |             
3da84     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3da88     1B C6 61 AD |     if_z    getrnd  spl
3da8c     58 00 90 AD |     if_z    jmp     #p406
3da90                 |  
3da90     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3da94     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3da98     08 D6 45 F0 |             shr     pointer0,#8
3da9c                 |          
3da9c     1F DA 0D F4 |             testb   sstart0,#31 wz            
3daa0     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3daa4     1C DA 0D F4 |             testb   sstart0,#28 wz            
3daa8     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3daac                 |         
3daac     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3dab0     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3dab4     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3dab8                 |             
3dab8     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3dabc     ED C4 01 F1 |             add     qq,sstart0            
3dac0                 | 
3dac0     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3dac4     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3dac8     1C 01 B0 1D |     if_gt   call    #cache_read
3dacc                 |          
3dacc     1F DA 0D F4 |             testb   sstart0,#31 wz 
3dad0     08 C6 65 50 |     if_nz   shl     spl,#8
3dad4     08 D6 65 50 |     if_nz   shl     pointer0,#8
3dad8     07 D6 65 A0 |     if_z    shl     pointer0,#7
3dadc     1C DA 0D F4 |             testb   sstart0,#28 wz            
3dae0     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3dae4     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3dae8                 | 
3dae8                 | 
3dae8     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3daec     00 C6 01 F6 |             mov     spl,0-0
3daf0     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3daf4     00 C6 01 F6 |             mov     spl,0-0
3daf8                 | 
3daf8     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3dafc     00 0A 02 F6 |             mov     ls0,0-0
3db00     20 00 00 FF 
3db04     00 C4 05 F6 |             mov     qq,##16384
3db08     FE C4 81 F1 |             sub     qq,apan0
3db0c     E2 C6 31 FA |             scas    spl,qq
3db10     00 0C 02 F6 |             mov     rs0, 0-0
3db14                 | 
3db14     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3db18     06 11 02 F1 |             add     rs,rs0
3db1c     03 0F 82 F1 |             sub     ls,oldls
3db20     05 0F 02 F1 |             add     ls,ls0
3db24                 |    
3db24     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3db28     05 D9 21 F9 |             setword sample0,ls0,#0
3db2c                 |             
3db2c     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3db30     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3db34     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3db38                 |   '  if_z    mov     sample0,#0
3db38     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3db3c     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3db40     04 00 00 AF 
3db44     00 B0 05 A1 |     if_z    add     time1,##2048
3db48     D8 B2 01 A6 |     if_z    mov     time2,time1
3db4c     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3db50                 | 
3db50     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3db54     00 D7 65 FC |             wrlong  pointer0,ptra
3db58     08 E7 65 FC |             wrlong  envph0,ptra[8]
3db5c     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3db60                 |                       
3db60     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3db64     FF C3 25 A7 |     if_z    decmod  front, #511          
3db68                 |          
3db68     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3db6c     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3db70     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3db74     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3db78                 | 	    
3db78                 | 		    
3db78     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3db7c     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3db80     04 15 02 F6 |             mov     newsample, oldrs       
3db84                 | 
3db84     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3db88     02 AF 01 F1 |             add     time0,dt0    
3db8c                 |                                      
3db8c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3db90     D8 FD 9F AD |     if_z    jmp     #loop1
3db94     02 C5 01 F6 |             mov     qq,dt0
3db98                 | 
3db98                 |     
3db98                 |             
3db98     01 4E 36 F0 | p301        rol     dropper,#1 wc
3db9c     40 00 90 3D |     if_nc   jmp     #p399
3dba0     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3dba4     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3dba8     F4 FF 9F AD |     if_e    jmp     #p398   
3dbac                 | 		
3dbac     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3dbb0     20 00 90 AD |     if_z    jmp     #p302	   
3dbb4                 |   
3dbb4     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3dbb8     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3dbbc     02 1E 66 C0 |     if_c    shl     scptr2,#2
3dbc0     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3dbc4     60 1E 66 FC |             wrlong  scptr2,#$60
3dbc8     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3dbcc     01 00 00 CF 
3dbd0     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3dbd4                 | 			    
3dbd4     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3dbd8     00 00 00 FF 
3dbdc     FF C3 05 F7 |             incmod  front, ##511
3dbe0     ED C5 6D FB | p399        djnz    qq,#p301
3dbe4                 |             
3dbe4     6C FD 9F FD |             jmp     #loop            'loop
3dbe8                 | 
3dbe8                 | '----------------------------------------------------------------------------------
3dbe8                 | '------------- This is the end of the main loop -----------------------------------
3dbe8                 | '----------------------------------------------------------------------------------
3dbe8                 | 
3dbe8                 | '----------------------------------------------------------------------------------
3dbe8                 | '------------- PSRAM cache ----------- --------------------------------------------
3dbe8                 | '----------------------------------------------------------------------------------
3dbe8                 | 
3dbe8                 | ' There are 8 cache pointers for 8 channels
3dbe8                 | ' if 24 higher bits of address=cache, then get a word from the cache
3dbe8                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3dbe8                 | 
3dbe8                 | 
3dbe8     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3dbec                 |             
3dbec     E2 40 02 F6 | 	    mov     addrhi,qq		
3dbf0     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3dbf4     14 01 96 F9 | 	    alts    cn,#cache1            
3dbf8     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3dbfc     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3dc00                 | 	
3dc00     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3dc04     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3dc08     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3dc0c     08 38 66 F0 | 	    shl     cmd,#8
3dc10     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3dc14     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3dc18     08 3A 66 F0 |             shl     hubaddr,#8                  '
3dc1c     13 3B 02 F1 |             add     hubaddr,hubptr 
3dc20     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3dc24     28 04 64 FD |             setq    #2                          ' write 3 longs
3dc28     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3dc2c     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3dc30     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3dc34                 |             
3dc34                 | 	
3dc34     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3dc38     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3dc3c     13 C5 01 F1 | 	    add     qq,hubptr
3dc40     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3dc44     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3dc48                 |           
3dc48                 | 
3dc48                 | '--------------------------------------------------------------------------
3dc48                 | '------ Interrupt service -------------------------------------------------
3dc48                 | '------ Output the sample, get the next one if exists ---------------------
3dc48                 | '--------------------------------------------------------------------------
3dc48                 | 
3dc48     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3dc4c     0F D0 25 FC |             wypin   rsample,#right       '4
3dc50     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3dc54     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3dc58     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3dc5c     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3dc60     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3dc64                 |     
3dc64     F5 FF 3B FB |             reti1                        '17/19 
3dc68                 |           
3dc68                 | '---------------------------------------------------------------------------
3dc68                 | '-------- End of interrupt -------------------------------------------------
3dc68                 | '---------------------------------------------------------------------------    
3dc68                 | 
3dc68                 | 
3dc68                 | '---------------------------------------------------------------------------
3dc68                 | '------- Variables ---------------------------------------------------------
3dc68                 | '---------------------------------------------------------------------------
3dc68                 | 
3dc68                 | ' constants
3dc68                 | 
3dc68     00 00 00 40 | a40000000   long $40000000
3dc6c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3dc70                 | 
3dc70                 | ' Time variables
3dc70                 | 
3dc70     00 00 00 00 | time0       long 0    ' Global sample computing time
3dc74     01 00 00 00 | time1       long 1    ' Local channels time
3dc78     02 00 00 00 | time2       long 2
3dc7c     03 00 00 00 | time3       long 3
3dc80     04 00 00 00 | time4       long 4
3dc84     05 00 00 00 | time5       long 5
3dc88     06 00 00 00 | time6       long 6
3dc8c     07 00 00 00 | time7       long 7
3dc90     08 00 00 00 | time8       long 8
3dc94                 | 
3dc94     00 00 00 00 | channeladd long 0
3dc98                 | 
3dc98     00 00 00 00 | front       long 0
3dc9c                 | 
3dc9c                 | ' temporary variables 
3dc9c     00 00 00 00 | qq          long 0
3dca0     00 00 00 00 | spl         long 0
3dca4     00 00 00 00 | zero        long 0
3dca8     00 00 00 00 | mailbox     long 0
3dcac     00 00 00 00 | mailbox2 long 0
3dcb0                 | 
3dcb0                 | ' Interrupt ISR variables
3dcb0                 | 
3dcb0     00 00 00 00 | lsample     long 0
3dcb4     00 00 00 00 | rsample     long 0
3dcb8     00 00 00 00 | lsnext      long 0
3dcbc     00 00 00 00 | rsnext      long 0 
3dcc0                 | 
3dcc0                 | ' channel parameter block
3dcc0                 | 
3dcc0     00 00 00 00 | pointer0    long 0     
3dcc4     00 00 00 00 | sample0     long 0
3dcc8     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3dccc     00 00 00 00 | lstart0     long 0
3dcd0     00 00 00 00 | lend0       long 0
3dcd4     00 00 00 00 | volpan0     long 0
3dcd8     00 00 00 00 | freqskip0   long 0
3dcdc     00 00 00 00 | command0    long 0
3dce0     00 00 00 00 | envph0	    long 0
3dce4     00 00 00 00 | envptr0	    long 0
3dce8     00 00 00 00 | envspd0	    long 0
3dcec     00 00 00 00 | envlen0	    long 0
3dcf0     00 00 00 00 | res5	    long 0
3dcf4     00 00 00 00 | res6	    long 0
3dcf8     00 00 00 00 | res7	    long 0
3dcfc     00 00 00 00 | res8	    long 0
3dd00                 | 
3dd00     00 00 00 00 | afreq0      long 0
3dd04     00 00 00 00 | askip0      long 0
3dd08     00 00 00 00 | avol0       long 0
3dd0c     00 00 00 00 | apan0       long 0
3dd10                 | 
3dd10     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3dd14     00 00 00 00 | cn          long 0
3dd18     00 00 00 00 | ct          long 0
3dd1c     00 00 00 00 | dt0         long 0
3dd20                 | 
3dd20                 | ' Samples
3dd20     00 00 00 00 | oldls       long 0
3dd24     00 00 00 00 | oldrs       long 0
3dd28                 | 
3dd28     00 00 00 00 | ls0         long 0
3dd2c     00 00 00 00 | rs0         long 0
3dd30                 | 
3dd30     00 00 00 00 | ls          long 0    
3dd34     00 00 00 00 | rs          long 0
3dd38                 | 
3dd38     00 00 00 00 | oldsample   long 0
3dd3c     00 00 00 00 | newsample   long 0
3dd40                 | 
3dd40     00 00 00 00 | nrsample    long 0
3dd44     00 00 00 00 | nlsample    long 0
3dd48                 | 
3dd48     00 00 00 00 | scbase long 0
3dd4c     00 00 00 00 | scptr long 0
3dd50     00 00 00 00 | scptr2 long 0
3dd54     00 00 00 00 | scope long 0
3dd58                 | 
3dd58     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3dd5c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3dd60                 | 
3dd60     00 18 07 00 | hubptr      long $71800
3dd64     00 00 00 00 | cache1      long 0
3dd68     00 00 00 00 | cache2      long 0
3dd6c     00 00 00 00 | cache3      long 0
3dd70     00 00 00 00 | cache4      long 0
3dd74     00 00 00 00 | cache5      long 0
3dd78     00 00 00 00 | cache6      long 0
3dd7c     00 00 00 00 | cache7      long 0
3dd80     00 00 00 00 | cache8      long 0
3dd84                 | 
3dd84                 | 
3dd84     00 00 00 00 | cmd         long 0
3dd88     00 00 00 00 | hubaddr     long 0
3dd8c     00 01 00 00 | count       long 256
3dd90     00 00 00 00 | addrlo long 0
3dd94     00 00 00 00 | addrhi long 0
3dd98     00 00 00 00 | pointer00 long 0
3dd9c     00 00 00 00 | envhi long 0
3dda0     00 00 00 00 | envlo long 0
3dda4     00 00 00 00 | envs1 long 0
3dda8     00 00 00 00 | envs2 long 0
3ddac     00 00 00 00 | noise0 long 0
3ddb0     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3ddb4     00 00 00 00 
3ddb8     00 00 00 00 | null  			long 	0,0           ' for channel reset
3ddbc                 | 	alignl
3ddbc                 | __system__dat_
3ddbc     00 00 00 00 
3ddc0     00 00 00 00 | 	byte	$00[8]
3ddc4     03 00 00 00 
3ddc8     00 00 00 00 
3ddcc     00 00 00 00 
3ddd0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ddd4     00 00 00 00 
      ...             
3e060     00 00 00 00 
3e064     00 00 00 00 | 	byte	$00[660]
3e068     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3e06c     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3e070     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3e074     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3e078     00 00 00 00 
      ...             
3e094     00 00 00 00 
3e098     00 00 00 00 | 	byte	$00[36]
3e09c     04 E1 03 00 | 	long	@@@__system__dat_ + 840
3e0a0     07 E1 03 00 | 	long	@@@__system__dat_ + 843
3e0a4     28 E1 03 00 | 	long	@@@__system__dat_ + 876
3e0a8     41 E1 03 00 | 	long	@@@__system__dat_ + 901
3e0ac     5C E1 03 00 | 	long	@@@__system__dat_ + 928
3e0b0     76 E1 03 00 | 	long	@@@__system__dat_ + 954
3e0b4     86 E1 03 00 | 	long	@@@__system__dat_ + 970
3e0b8     98 E1 03 00 | 	long	@@@__system__dat_ + 988
3e0bc     AA E1 03 00 | 	long	@@@__system__dat_ + 1006
3e0c0     BC E1 03 00 | 	long	@@@__system__dat_ + 1024
3e0c4     C8 E1 03 00 | 	long	@@@__system__dat_ + 1036
3e0c8     D9 E1 03 00 | 	long	@@@__system__dat_ + 1053
3e0cc     ED E1 03 00 | 	long	@@@__system__dat_ + 1073
3e0d0     F7 E1 03 00 | 	long	@@@__system__dat_ + 1083
3e0d4     07 E2 03 00 | 	long	@@@__system__dat_ + 1099
3e0d8     16 E2 03 00 | 	long	@@@__system__dat_ + 1114
3e0dc     2C E2 03 00 | 	long	@@@__system__dat_ + 1136
3e0e0     45 E2 03 00 | 	long	@@@__system__dat_ + 1161
3e0e4     59 E2 03 00 | 	long	@@@__system__dat_ + 1181
3e0e8     67 E2 03 00 | 	long	@@@__system__dat_ + 1195
3e0ec     7B E2 03 00 | 	long	@@@__system__dat_ + 1215
3e0f0     87 E2 03 00 | 	long	@@@__system__dat_ + 1227
3e0f4     99 E2 03 00 | 	long	@@@__system__dat_ + 1245
3e0f8     B1 E2 03 00 | 	long	@@@__system__dat_ + 1269
3e0fc     C3 E2 03 00 | 	long	@@@__system__dat_ + 1287
3e100     D6 E2 03 00 | 	long	@@@__system__dat_ + 1306
3e104     4F 4B 00 4E 
3e108     75 6D 65 72 
3e10c     69 63 61 6C 
3e110     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e114     75 6D 65 6E 
3e118     74 20 6F 75 
3e11c     74 20 6F 66 
3e120     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3e124     61 69 6E 00 
3e128     52 65 73 75 
3e12c     6C 74 20 6E 
3e130     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3e134     65 70 72 65 
3e138     73 65 6E 74 
3e13c     61 62 6C 65 
3e140     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3e144     65 67 61 6C 
3e148     20 6D 75 6C 
3e14c     74 69 62 79 
3e150     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3e154     65 71 75 65 
3e158     6E 63 65 00 
3e15c     4E 6F 20 73 
3e160     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3e164     66 69 6C 65 
3e168     20 6F 72 20 
3e16c     64 69 72 65 
3e170     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e174     79 00 42 61 
3e178     64 20 66 69 
3e17c     6C 65 20 6E 
3e180     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3e184     72 00 50 65 
3e188     72 6D 69 73 
3e18c     73 69 6F 6E 
3e190     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3e194     69 65 64 00 
3e198     4E 6F 74 20 
3e19c     65 6E 6F 75 
3e1a0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3e1a4     65 6D 6F 72 
3e1a8     79 00 54 65 
3e1ac     6D 70 6F 72 
3e1b0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3e1b4     66 61 69 6C 
3e1b8     75 72 65 00 
3e1bc     46 69 6C 65 
3e1c0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3e1c4     73 74 73 00 
3e1c8     49 6E 76 61 
3e1cc     6C 69 64 20 
3e1d0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3e1d4     6D 65 6E 74 
3e1d8     00 54 6F 6F 
3e1dc     20 6D 61 6E 
3e1e0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3e1e4     65 6E 20 66 
3e1e8     69 6C 65 73 
3e1ec     00 49 2F 4F 
3e1f0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3e1f4     6F 72 00 4E 
3e1f8     6F 74 20 61 
3e1fc     20 64 69 72 
3e200     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3e204     72 79 00 49 
3e208     73 20 61 20 
3e20c     64 69 72 65 
3e210     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e214     79 00 52 65 
3e218     61 64 20 6F 
3e21c     6E 6C 79 20 
3e220     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3e224     20 73 79 73 
3e228     74 65 6D 00 
3e22c     46 75 6E 63 
3e230     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3e234     20 6E 6F 74 
3e238     20 69 6D 70 
3e23c     6C 65 6D 65 
3e240     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3e244     00 44 69 72 
3e248     65 63 74 6F 
3e24c     72 79 20 6E 
3e250     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3e254     6D 70 74 79 
3e258     00 4E 61 6D 
3e25c     65 20 74 6F 
3e260     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3e264     6E 67 00 44 
3e268     65 76 69 63 
3e26c     65 20 6E 6F 
3e270     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3e274     65 6B 61 62 
3e278     6C 65 00 42 
3e27c     61 64 20 61 
3e280     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3e284     73 73 00 42 
3e288     72 6F 6B 65 
3e28c     6E 20 63 6F 
3e290     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3e294     74 69 6F 6E 
3e298     00 44 65 76 
3e29c     69 63 65 20 
3e2a0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3e2a4     65 73 6F 75 
3e2a8     72 63 65 20 
3e2ac     62 75 73 79 
3e2b0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3e2b4     73 73 20 64 
3e2b8     65 76 69 63 
3e2bc     65 20 6C 69 
3e2c0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3e2c4     6F 20 73 70 
3e2c8     61 63 65 20 
3e2cc     6F 6E 20 64 
3e2d0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3e2d4     65 00 55 6E 
3e2d8     6B 6E 6F 77 
3e2dc     6E 20 65 72 
3e2e0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3e2e4     00 00 00 00 
3e2e8     00 00 00 00 
3e2ec     00 00 00 00 | 	byte	$00[12]
3e2f0     01 80 00 00 
3e2f4     00 00 00 00 
3e2f8     00 00 00 00 
3e2fc     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e300     00 00 00 00 | 	byte	$00, $00, $00, $00
3e304     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e308     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e30c     00 00 00 00 | 	byte	$00, $00, $00, $00
3e310     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e314     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e318     00 00 00 00 
3e31c     00 00 00 00 | 	byte	$00[8]
3e320     01 00 00 00 
3e324     02 80 00 00 
3e328     00 00 00 00 
3e32c     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e330     00 00 00 00 
3e334     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e338     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e33c     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e340     00 00 00 00 | 	byte	$00, $00, $00, $00
3e344     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e348     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e34c     00 00 00 00 
3e350     00 00 00 00 | 	byte	$00[8]
3e354     01 00 00 00 
3e358     02 80 00 00 
3e35c     00 00 00 00 
3e360     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e364     00 00 00 00 
3e368     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e36c     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e370     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e374     00 00 00 00 | 	byte	$00, $00, $00, $00
3e378     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e37c     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e380     00 00 00 00 
      ...             
3e4f0     00 00 00 00 
3e4f4     00 00 00 00 | 	byte	$00[376]
3e4f8     FC E4 03 00 | 	long	@@@__system__dat_ + 1856
3e4fc     00 00 00 00 
3e500     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e504                 | 	alignl
3e504                 | _fatfs_cc_dat_
3e504     C7 00 FC 00 
3e508     E9 00 E2 00 
3e50c     E4 00 E0 00 
3e510     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3e514     EA 00 EB 00 
3e518     E8 00 EF 00 
3e51c     EE 00 EC 00 
3e520     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3e524     C9 00 E6 00 
3e528     C6 00 F4 00 
3e52c     F6 00 F2 00 
3e530     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3e534     FF 00 D6 00 
3e538     DC 00 F8 00 
3e53c     A3 00 D8 00 
3e540     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3e544     E1 00 ED 00 
3e548     F3 00 FA 00 
3e54c     F1 00 D1 00 
3e550     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3e554     BF 00 AE 00 
3e558     AC 00 BD 00 
3e55c     BC 00 A1 00 
3e560     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3e564     91 25 92 25 
3e568     93 25 02 25 
3e56c     24 25 C1 00 
3e570     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3e574     A9 00 63 25 
3e578     51 25 57 25 
3e57c     5D 25 A2 00 
3e580     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3e584     14 25 34 25 
3e588     2C 25 1C 25 
3e58c     00 25 3C 25 
3e590     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3e594     5A 25 54 25 
3e598     69 25 66 25 
3e59c     60 25 50 25 
3e5a0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3e5a4     F0 00 D0 00 
3e5a8     CA 00 CB 00 
3e5ac     C8 00 31 01 
3e5b0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3e5b4     CF 00 18 25 
3e5b8     0C 25 88 25 
3e5bc     84 25 A6 00 
3e5c0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3e5c4     D3 00 DF 00 
3e5c8     D4 00 D2 00 
3e5cc     F5 00 D5 00 
3e5d0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3e5d4     DE 00 DA 00 
3e5d8     DB 00 D9 00 
3e5dc     FD 00 DD 00 
3e5e0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3e5e4     AD 00 B1 00 
3e5e8     17 20 BE 00 
3e5ec     B6 00 A7 00 
3e5f0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3e5f4     B0 00 A8 00 
3e5f8     B7 00 B9 00 
3e5fc     B3 00 B2 00 
3e600     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3e604     61 00 1A 03 
3e608     E0 00 17 03 
3e60c     F8 00 07 03 
3e610     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3e614     78 01 00 01 
3e618     30 01 32 01 
3e61c     06 01 39 01 
3e620     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3e624     2E 01 79 01 
3e628     06 01 80 01 
3e62c     4D 00 43 02 
3e630     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3e634     82 01 84 01 
3e638     84 01 86 01 
3e63c     87 01 87 01 
3e640     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3e644     8B 01 8B 01 
3e648     8D 01 8E 01 
3e64c     8F 01 90 01 
3e650     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3e654     93 01 94 01 
3e658     F6 01 96 01 
3e65c     97 01 98 01 
3e660     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3e664     9B 01 9C 01 
3e668     9D 01 20 02 
3e66c     9F 01 A0 01 
3e670     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3e674     A2 01 A4 01 
3e678     A4 01 A6 01 
3e67c     A7 01 A7 01 
3e680     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3e684     AB 01 AC 01 
3e688     AC 01 AE 01 
3e68c     AF 01 AF 01 
3e690     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3e694     B3 01 B3 01 
3e698     B5 01 B5 01 
3e69c     B7 01 B8 01 
3e6a0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3e6a4     BB 01 BC 01 
3e6a8     BC 01 BE 01 
3e6ac     F7 01 C0 01 
3e6b0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3e6b4     C3 01 C4 01 
3e6b8     C5 01 C4 01 
3e6bc     C7 01 C8 01 
3e6c0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3e6c4     CB 01 CA 01 
3e6c8     CD 01 10 01 
3e6cc     DD 01 01 00 
3e6d0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3e6d4     12 01 F3 01 
3e6d8     03 00 F1 01 
3e6dc     F4 01 F4 01 
3e6e0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3e6e4     22 02 12 01 
3e6e8     3A 02 09 00 
3e6ec     65 2C 3B 02 
3e6f0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3e6f4     66 2C 3F 02 
3e6f8     40 02 41 02 
3e6fc     41 02 46 02 
3e700     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3e704     40 00 81 01 
3e708     86 01 55 02 
3e70c     89 01 8A 01 
3e710     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3e714     5A 02 90 01 
3e718     5C 02 5D 02 
3e71c     5E 02 5F 02 
3e720     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3e724     62 02 94 01 
3e728     64 02 65 02 
3e72c     66 02 67 02 
3e730     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3e734     6A 02 62 2C 
3e738     6C 02 6D 02 
3e73c     6E 02 9C 01 
3e740     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3e744     9D 01 73 02 
3e748     74 02 9F 01 
3e74c     76 02 77 02 
3e750     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3e754     7A 02 7B 02 
3e758     7C 02 64 2C 
3e75c     7E 02 7F 02 
3e760     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3e764     82 02 A9 01 
3e768     84 02 85 02 
3e76c     86 02 87 02 
3e770     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3e774     B1 01 B2 01 
3e778     45 02 8D 02 
3e77c     8E 02 8F 02 
3e780     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3e784     B7 01 7B 03 
3e788     03 00 FD 03 
3e78c     FE 03 FF 03 
3e790     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3e794     86 03 88 03 
3e798     89 03 8A 03 
3e79c     B1 03 11 03 
3e7a0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3e7a4     A3 03 A3 03 
3e7a8     C4 03 08 03 
3e7ac     CC 03 03 00 
3e7b0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3e7b4     8F 03 D8 03 
3e7b8     18 01 F2 03 
3e7bc     0A 00 F9 03 
3e7c0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3e7c4     F5 03 F6 03 
3e7c8     F7 03 F7 03 
3e7cc     F9 03 FA 03 
3e7d0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3e7d4     20 03 50 04 
3e7d8     10 07 60 04 
3e7dc     22 01 8A 04 
3e7e0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3e7e4     0E 01 CF 04 
3e7e8     01 00 C0 04 
3e7ec     D0 04 44 01 
3e7f0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3e7f4     00 00 7D 1D 
3e7f8     01 00 63 2C 
3e7fc     00 1E 96 01 
3e800     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3e804     00 1F 08 06 
3e808     10 1F 06 06 
3e80c     20 1F 08 06 
3e810     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3e814     40 1F 06 06 
3e818     51 1F 07 00 
3e81c     59 1F 52 1F 
3e820     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3e824     5D 1F 56 1F 
3e828     5F 1F 60 1F 
3e82c     08 06 70 1F 
3e830     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3e834     BB 1F C8 1F 
3e838     C9 1F CA 1F 
3e83c     CB 1F DA 1F 
3e840     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3e844     F9 1F EA 1F 
3e848     EB 1F FA 1F 
3e84c     FB 1F 80 1F 
3e850     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3e854     08 06 A0 1F 
3e858     08 06 B0 1F 
3e85c     04 00 B8 1F 
3e860     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3e864     BC 1F CC 1F 
3e868     01 00 C3 1F 
3e86c     D0 1F 02 06 
3e870     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3e874     E5 1F 01 00 
3e878     EC 1F F3 1F 
3e87c     01 00 FC 1F 
3e880     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3e884     32 21 70 21 
3e888     10 02 84 21 
3e88c     01 00 83 21 
3e890     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3e894     30 2C 2F 04 
3e898     60 2C 02 01 
3e89c     67 2C 06 01 
3e8a0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3e8a4     80 2C 64 01 
3e8a8     00 2D 26 08 
3e8ac     41 FF 1A 03 
3e8b0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3e8b4     05 07 09 0E 
3e8b8     10 12 14 16 
3e8bc     18 1C 1E 43 
3e8c0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3e8c4     41 41 43 45 
3e8c8     45 45 49 49 
3e8cc     49 41 41 45 
3e8d0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3e8d4     4F 55 55 59 
3e8d8     4F 55 4F 9C 
3e8dc     4F 9E 9F 41 
3e8e0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3e8e4     A5 A6 A7 A8 
3e8e8     A9 AA AB AC 
3e8ec     AD AE AF B0 
3e8f0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3e8f4     41 41 41 B8 
3e8f8     B9 BA BB BC 
3e8fc     BD BE BF C0 
3e900     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3e904     C5 41 41 C8 
3e908     C9 CA CB CC 
3e90c     CD CE CF D1 
3e910     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3e914     49 49 49 49 
3e918     D9 DA DB DC 
3e91c     DD 49 DF 4F 
3e920     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3e924     4F E6 E8 E8 
3e928     55 55 55 59 
3e92c     59 EE EF F0 
3e930     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3e934     F5 F6 F7 F8 
3e938     F9 FA FB FC 
3e93c     FD FE FF 00 
3e940     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3e944     00 00 00 00 
3e948     FF FF FF FF 
3e94c     1F 00 00 00 
3e950     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3e954     1F 00 00 00 
3e958     1E 00 00 00 
3e95c     1F 00 00 00 
3e960     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3e964     1F 00 00 00 
3e968     1F 00 00 00 
3e96c     1E 00 00 00 
3e970     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3e974     1E 00 00 00 
3e978     1F 00 00 00 
3e97c     00 00 00 00 
3e980     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3e984     3B 00 00 00 
3e988     5A 00 00 00 
3e98c     78 00 00 00 
3e990     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3e994     B5 00 00 00 
3e998     D4 00 00 00 
3e99c     F3 00 00 00 
3e9a0     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3e9a4     30 01 00 00 
3e9a8     4E 01 00 00 
3e9ac     6D 01 00 00 
3e9b0     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3e9b4     00 00 00 00 
      ...             
3e9d0     00 00 00 00 
3e9d4     00 00 00 00 | 	byte	$00[36]
3e9d8     F6 E9 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3e9dc     FA E9 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3e9e0     00 00 00 00 
3e9e4     00 00 00 00 
3e9e8     00 00 00 00 
3e9ec     00 00 00 00 
3e9f0     00 00       | 	byte	$00[18]
3e9f2     3F 3F 3F 00 
3e9f6     55 43 54 00 
3e9fa     55 43 54 00 
3e9fe     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3ea02     00 00 00 00 
3ea06     00 00 00    | 	byte	$00[7]
3ea09     CA 9A 3B 00 
3ea0d     00 00 00 01 
3ea11     01 01 01 01 
3ea15     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ea19     91 11 11 11 
3ea1d     11 01 01 01 
3ea21     01 01 01 01 
3ea25     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ea29     01 01 01 01 
3ea2d     01 01 01    | 	byte	$01[7]
3ea30     90 20 20 20 
3ea34     20 20 20 20 
3ea38     20 20 20 20 
3ea3c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3ea40     42 42 42 42 
3ea44     42 42 42 42 
3ea48     42 42       | 	byte	$42[10]
3ea4a     20 20 20 20 
3ea4e     20 20 20    | 	byte	$20[7]
3ea51     44 44 44 44 
3ea55     44 44       | 	byte	$44[6]
3ea57     04 04 04 04 
3ea5b     04 04 04 04 
3ea5f     04 04 04 04 
3ea63     04 04 04 04 
3ea67     04 04 04 04 | 	byte	$04[20]
3ea6b     20 20 20 20 
3ea6f     20 20       | 	byte	$20[6]
3ea71     48 48 48 48 
3ea75     48 48       | 	byte	$48[6]
3ea77     08 08 08 08 
3ea7b     08 08 08 08 
3ea7f     08 08 08 08 
3ea83     08 08 08 08 
3ea87     08 08 08 08 | 	byte	$08[20]
3ea8b     20 20 20 20 
3ea8f     01 00 00 00 
3ea93     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3ea94                 | __methodtable__
3ea94     10 60 01 00 | 	long	@_do_no_command
3ea98     48 ED 01 00 | 	long	@_do_plus
3ea9c     DC E1 01 00 | 	long	@_do_minus
3eaa0     8C EC 01 00 | 	long	@_do_or
3eaa4     94 E6 01 00 | 	long	@_do_mul
3eaa8     5C D2 01 00 | 	long	@_do_fdiv
3eaac     8C CC 01 00 | 	long	@_do_and
3eab0     48 CD 01 00 | 	long	@_do_div
3eab4     14 E5 01 00 | 	long	@_do_mod
3eab8     14 F2 01 00 | 	long	@_do_shl
3eabc     D0 F2 01 00 | 	long	@_do_shr
3eac0     C4 F0 01 00 | 	long	@_do_power
3eac4     58 C4 01 00 | 	long	@_do_getvar
3eac8     CC 8B 01 00 | 	long	@_do_push
3eacc     E4 BF 01 00 | 	long	@_do_assign
3ead0     BC F5 00 00 | 	long	@_do_cls
3ead4     F0 59 01 00 | 	long	@_do_new
3ead8     70 84 01 00 | 	long	@_do_plot
3eadc     30 18 01 00 | 	long	@_do_draw
3eae0     78 86 01 00 | 	long	@_do_print
3eae4     A4 F3 00 00 | 	long	@_do_circle
3eae8     38 1A 01 00 | 	long	@_do_fcircle
3eaec     C8 E1 00 00 | 	long	@_do_box
3eaf0     48 26 01 00 | 	long	@_do_frame
3eaf4     08 F8 00 00 | 	long	@_do_color
3eaf8     D8 23 01 00 | 	long	@_do_for
3eafc     54 5C 01 00 | 	long	@_do_next
3eb00     60 48 01 00 | 	long	@_do_list
3eb04     2C A3 01 00 | 	long	@_do_run
3eb08     64 19 01 00 | 	long	@_do_error
3eb0c     7C 32 01 00 | 	long	@_do_fast_goto
3eb10     6C 33 01 00 | 	long	@_do_find_goto
3eb14     34 35 01 00 | 	long	@_do_slow_goto
3eb18     30 60 01 00 | 	long	@_do_nothing
3eb1c     50 A7 01 00 | 	long	@_do_save
3eb20     B8 4A 01 00 | 	long	@_do_load
3eb24     8C 78 01 00 | 	long	@_do_pinwrite
3eb28     78 BD 01 00 | 	long	@_do_waitms
3eb2c     58 BE 01 00 | 	long	@_do_waitvbl
3eb30     9C 37 01 00 | 	long	@_do_if
3eb34     FC 18 01 00 | 	long	@_do_else
3eb38     C8 CE 01 00 | 	long	@_do_eq
3eb3c     AC D3 01 00 | 	long	@_do_ge
3eb40     D4 DA 01 00 | 	long	@_do_le
3eb44     38 D7 01 00 | 	long	@_do_gt
3eb48     68 DE 01 00 | 	long	@_do_lt
3eb4c     F8 E8 01 00 | 	long	@_do_ne
3eb50     A8 A0 01 00 | 	long	@_do_rnd
3eb54     A4 E3 00 00 | 	long	@_do_brun
3eb58     A4 DD 00 00 | 	long	@_do_beep
3eb5c     40 11 01 00 | 	long	@_do_dir
3eb60     08 75 01 00 | 	long	@_do_paper
3eb64     4C 3B 01 00 | 	long	@_do_ink
3eb68     5C 23 01 00 | 	long	@_do_font
3eb6c     70 54 01 00 | 	long	@_do_mode
3eb70     AC 58 01 00 | 	long	@_do_mouse
3eb74     14 31 01 00 | 	long	@_do_gettime
3eb78     28 FD 00 00 | 	long	@_do_cursor
3eb7c     14 F5 00 00 | 	long	@_do_click
3eb80     68 59 01 00 | 	long	@_do_mousex
3eb84     AC 59 01 00 | 	long	@_do_mousey
3eb88     E0 58 01 00 | 	long	@_do_mousek
3eb8c     24 59 01 00 | 	long	@_do_mousew
3eb90     1C B2 01 00 | 	long	@_do_sin
3eb94     08 B5 01 00 | 	long	@_do_stick
3eb98     08 B8 01 00 | 	long	@_do_strig
3eb9c     60 B3 01 00 | 	long	@_do_sprite
3eba0     AC 0C 01 00 | 	long	@_do_defsprite
3eba4     DC 2E 01 00 | 	long	@_do_getpixel
3eba8     54 BD 01 00 | 	long	@_do_waitclock
3ebac     68 E4 01 00 | 	long	@_do_negative
3ebb0     A0 90 01 00 | 	long	@_do_rdpin
3ebb4     B8 A2 01 00 | 	long	@_do_rqpin
3ebb8     C0 76 01 00 | 	long	@_do_pinread
3ebbc     64 BE 01 00 | 	long	@_do_wrpin
3ebc0     E4 BE 01 00 | 	long	@_do_wxpin
3ebc4     64 BF 01 00 | 	long	@_do_wypin
3ebc8     00 76 01 00 | 	long	@_do_pinfloat
3ebcc     80 76 01 00 | 	long	@_do_pinlo
3ebd0     40 76 01 00 | 	long	@_do_pinhi
3ebd4     44 77 01 00 | 	long	@_do_pinstart
3ebd8     4C 78 01 00 | 	long	@_do_pintoggle
3ebdc     F0 85 01 00 | 	long	@_do_position
3ebe0     18 FC 00 00 | 	long	@_do_cos
3ebe4     84 B9 01 00 | 	long	@_do_tan
3ebe8     A0 DC 00 00 | 	long	@_do_atn
3ebec     74 DB 00 00 | 	long	@_do_asin
3ebf0     FC D8 00 00 | 	long	@_do_acos
3ebf4     28 B4 01 00 | 	long	@_do_sqr
3ebf8     EC 1B 01 00 | 	long	@_do_fill
3ebfc     D0 05 01 00 | 	long	@_do_defsnd
3ec00     28 FE 00 00 | 	long	@_do_defenv
3ec04     78 90 01 00 | 	long	@_do_rad
3ec08     08 0F 01 00 | 	long	@_do_deg
3ec0c     CC 3B 01 00 | 	long	@_do_int
3ec10     54 79 01 00 | 	long	@_do_play
3ec14     D4 AC 01 00 | 	long	@_do_setdelay
3ec18     74 AD 01 00 | 	long	@_do_setenv
3ec1c     14 AE 01 00 | 	long	@_do_setlen
3ec20     B4 AE 01 00 | 	long	@_do_setpan
3ec24     F4 AF 01 00 | 	long	@_do_setvol
3ec28     94 B0 01 00 | 	long	@_do_setwave
3ec2c     54 AF 01 00 | 	long	@_do_setsustain
3ec30     60 9D 01 00 | 	long	@_do_release
3ec34     14 2D 01 00 | 	long	@_do_getenvsustain
3ec38     20 85 01 00 | 	long	@_do_poke
3ec3c     98 17 01 00 | 	long	@_do_dpoke
3ec40     58 50 01 00 | 	long	@_do_lpoke
3ec44     90 75 01 00 | 	long	@_do_peek
3ec48     28 17 01 00 | 	long	@_do_dpeek
3ec4c     E8 4F 01 00 | 	long	@_do_lpeek
3ec50     E0 27 01 00 | 	long	@_do_fre
3ec54     0C 2E 01 00 | 	long	@_do_getnotevalue
3ec58     04 C9 01 00 | 	long	@_do_getaddr
3ec5c     80 38 01 00 | 	long	@_do_inkey
3ec60     7C D8 00 00 | 	long	@_do_abs
3ec64     78 36 01 00 | 	long	@_do_hex
3ec68     A4 E0 00 00 | 	long	@_do_bin
3ec6c     B0 BA 01 00 | 	long	@_do_val
3ec70     C4 F2 00 00 | 	long	@_do_chr
3ec74     28 DA 00 00 | 	long	@_do_asc
3ec78     94 45 01 00 | 	long	@_do_left
3ec7c     3C 9F 01 00 | 	long	@_do_right
3ec80     78 51 01 00 | 	long	@_do_mid
3ec84     00 47 01 00 | 	long	@_do_len
3ec88     64 31 01 00 | 	long	@_do_gosub
3ec8c     90 9E 01 00 | 	long	@_do_return
3ec90     20 19 01 00 | 	long	@_do_end
3ec94     B8 85 01 00 | 	long	@_do_pop
3ec98     A8 4E 01 00 | 	long	@_do_log
3ec9c     28 F1 00 00 | 	long	@_do_changevol
3eca0     E8 F1 00 00 | 	long	@_do_changewav
3eca4     54 F0 00 00 | 	long	@_do_changepan
3eca8     80 EC 00 00 | 	long	@_do_changefreq
3ecac     34 B1 01 00 | 	long	@_do_shutup
3ecb0     64 A2 01 00 | 	long	@_do_round
3ecb4     54 19 01 00 | 	long	@_do_enter
3ecb8     F4 60 01 00 | 	long	@_do_open
3ecbc     40 F5 00 00 | 	long	@_do_close
3ecc0     44 28 01 00 | 	long	@_do_get
3ecc4     E8 8C 01 00 | 	long	@_do_put
3ecc8     DC E5 00 00 | 	long	@_do_cd
3eccc     30 0F 01 00 | 	long	@_do_delete
3ecd0     14 53 01 00 | 	long	@_do_mkdir
3ecd4     F8 DE 00 00 | 	long	@_do_blit
3ecd8     AC 27 01 00 | 	long	@_do_framebuf
3ecdc     34 60 01 00 | 	long	@_do_on
3ece0     18 B3 01 00 | 	long	@_do_skip
3ece4     88 3C 01 00 | 	long	@_do_input
3ece8     08 93 01 00 | 	long	@_do_read
3ecec     D4 9D 01 00 | 	long	@_do_restore
3ecf0     6C 6E 01 00 | 	long	@_do_padx
3ecf4     A0 70 01 00 | 	long	@_do_pady
3ecf8     D4 72 01 00 | 	long	@_do_padz
3ecfc     68 63 01 00 | 	long	@_do_padrx
3ed00     9C 65 01 00 | 	long	@_do_padry
3ed04     D0 67 01 00 | 	long	@_do_padrz
3ed08     38 6C 01 00 | 	long	@_do_padw
3ed0c     04 6A 01 00 | 	long	@_do_pads
3ed10     40 F8 00 00 | 	long	@_do_copy
3ed14     FC F5 00 00 | 	long	@_do_coginit
3ed18     C8 F7 00 00 | 	long	@_do_cogstop
3ed1c     F0 50 01 00 | 	long	@_do_memlo
3ed20     34 51 01 00 | 	long	@_do_memtop
3ed24     E0 AA 01 00 | 	long	@_do_setcolor
3ed28     1C 2C 01 00 | 	long	@_do_getcolor
3ed2c     5C FD 00 00 | 	long	@_do_defchar
3ed30     0C 9E 01 00 | 	long	@_do_restorepalette
3ed34     A0 1F 01 00 | 	long	@_do_findfirst
3ed38     A0 22 01 00 | 	long	@_do_findnext
3ed3c     40 AA 01 00 | 	long	@_do_setamode
3ed40     08 30 01 00 | 	long	@_do_getrealfreq
3ed44     84 B6 01 00 | 	long	@_do_str
3ed48     F8 3B 02 00 | 	long	@_hg010b_spin2_putchar
3ed4c     48 1A 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3ed50     8C 1A 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3ed54     D4 1A 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3ed58     78 19 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3ed5c     E8 19 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3ed60     30 19 03 00 | 	long	@__system____strs_cl_pfunc_
3ed64     B0 95 02 00 | 	long	@__system____root_opendir
3ed68     4C 96 02 00 | 	long	@__system____root_closedir
3ed6c     C8 95 02 00 | 	long	@__system____root_readdir
3ed70     54 96 02 00 | 	long	@__system____root_stat
3ed74     40 8E 02 00 | 	long	@__system____default_putc
3ed78     14 8D 02 00 | 	long	@__system____default_getc
3ed7c     EC 8E 02 00 | 	long	@__system____default_flush
3ed80     8C 0C 03 00 | 	long	@_fatfs_cc_v_close
3ed84     BC 0F 03 00 | 	long	@_fatfs_cc_v_read
3ed88     48 10 03 00 | 	long	@_fatfs_cc_v_write
3ed8c     C0 10 03 00 | 	long	@_fatfs_cc_v_lseek
3ed90     58 11 03 00 | 	long	@_fatfs_cc_v_ioctl
3ed94     84 12 03 00 | 	long	@_fatfs_cc_v_flush
3ed98     AC 11 03 00 | 	long	@_fatfs_cc_v_open
3ed9c     F8 0B 03 00 | 	long	@_fatfs_cc_v_creat
3eda0     C8 0C 03 00 | 	long	@_fatfs_cc_v_opendir
3eda4     3C 0D 03 00 | 	long	@_fatfs_cc_v_closedir
3eda8     7C 0D 03 00 | 	long	@_fatfs_cc_v_readdir
3edac     90 0E 03 00 | 	long	@_fatfs_cc_v_stat
3edb0     6C 11 03 00 | 	long	@_fatfs_cc_v_mkdir
3edb4     8C 11 03 00 | 	long	@_fatfs_cc_v_rmdir
3edb8     7C 11 03 00 | 	long	@_fatfs_cc_v_remove
3edbc     9C 11 03 00 | 	long	@_fatfs_cc_v_rename
3edc0     40 14 03 00 | 	long	@_fatfs_cc_v_init
3edc4     48 14 03 00 | 	long	@_fatfs_cc_v_deinit
3edc8     94 B2 02 00 | 	long	@_sdmm_cc_v_read
3edcc     A0 B2 02 00 | 	long	@_sdmm_cc_v_write
3edd0     74 B3 02 00 | 	long	@_sdmm_cc_v_close
3edd4     AC B2 02 00 | 	long	@_sdmm_cc_v_ioctl
3edd8     6C B3 02 00 | 	long	@_sdmm_cc_v_flush
3eddc     D0 B2 02 00 | 	long	@_sdmm_cc_v_lseek
3ede0     FC B3 02 00 | 	long	@_sdmm_cc_v_putc
3ede4     48 B4 02 00 | 	long	@_sdmm_cc_v_getc
3ede8     A0 51 02 00 | 	long	@__system___tx
3edec     E0 51 02 00 | 	long	@__system___rx
3edf0     74 A0 02 00 | 	long	@__system___rxtxioctl_0788
3edf4     CC A0 02 00 | 	long	@__system____dummy_flush_0789
3edf8                 | __heap_base
3edf8     00 00 00 00 
      ...             
564f8     00 00 00 00 
564fc     00 00 00 00 | 	long	0[24002]
56500                 | objmem
56500     00 00 00 00 
      ...             
60a70     00 00 00 00 
60a74     00 00 00 00 | 	long	0[10590]
60a78                 | stackspace
60a78     00 00 00 00 | 	long	0[1]
60a7c 100             | 	org	COG_BSS_START
60a7c 100             | _var01
60a7c 100             | 	res	1
60a7c 101             | _var02
60a7c 101             | 	res	1
60a7c 102             | _var03
60a7c 102             | 	res	1
60a7c 103             | _var04
60a7c 103             | 	res	1
60a7c 104             | _var05
60a7c 104             | 	res	1
60a7c 105             | _var06
60a7c 105             | 	res	1
60a7c 106             | _var07
60a7c 106             | 	res	1
60a7c 107             | _var08
60a7c 107             | 	res	1
60a7c 108             | _var09
60a7c 108             | 	res	1
60a7c 109             | arg01
60a7c 109             | 	res	1
60a7c 10a             | arg02
60a7c 10a             | 	res	1
60a7c 10b             | arg03
60a7c 10b             | 	res	1
60a7c 10c             | arg04
60a7c 10c             | 	res	1
60a7c 10d             | arg05
60a7c 10d             | 	res	1
60a7c 10e             | arg06
60a7c 10e             | 	res	1
60a7c 10f             | arg07
60a7c 10f             | 	res	1
60a7c 110             | arg08
60a7c 110             | 	res	1
60a7c 111             | arg09
60a7c 111             | 	res	1
60a7c 112             | arg10
60a7c 112             | 	res	1
60a7c 113             | local01
60a7c 113             | 	res	1
60a7c 114             | local02
60a7c 114             | 	res	1
60a7c 115             | local03
60a7c 115             | 	res	1
60a7c 116             | local04
60a7c 116             | 	res	1
60a7c 117             | local05
60a7c 117             | 	res	1
60a7c 118             | local06
60a7c 118             | 	res	1
60a7c 119             | local07
60a7c 119             | 	res	1
60a7c 11a             | local08
60a7c 11a             | 	res	1
60a7c 11b             | local09
60a7c 11b             | 	res	1
60a7c 11c             | local10
60a7c 11c             | 	res	1
60a7c 11d             | local11
60a7c 11d             | 	res	1
60a7c 11e             | local12
60a7c 11e             | 	res	1
60a7c 11f             | local13
60a7c 11f             | 	res	1
60a7c 120             | local14
60a7c 120             | 	res	1
60a7c 121             | local15
60a7c 121             | 	res	1
60a7c 122             | local16
60a7c 122             | 	res	1
60a7c 123             | local17
60a7c 123             | 	res	1
60a7c 124             | local18
60a7c 124             | 	res	1
60a7c 125             | local19
60a7c 125             | 	res	1
60a7c 126             | local20
60a7c 126             | 	res	1
60a7c 127             | local21
60a7c 127             | 	res	1
60a7c 128             | local22
60a7c 128             | 	res	1
60a7c 129             | local23
60a7c 129             | 	res	1
60a7c 12a             | local24
60a7c 12a             | 	res	1
60a7c 12b             | local25
60a7c 12b             | 	res	1
60a7c 12c             | local26
60a7c 12c             | 	res	1
60a7c 12d             | local27
60a7c 12d             | 	res	1
60a7c 12e             | local28
60a7c 12e             | 	res	1
60a7c 12f             | local29
60a7c 12f             | 	res	1
60a7c 130             | local30
60a7c 130             | 	res	1
60a7c 131             | local31
60a7c 131             | 	res	1
60a7c 132             | local32
60a7c 132             | 	res	1
60a7c 133             | local33
60a7c 133             | 	res	1
60a7c 134             | local34
60a7c 134             | 	res	1
60a7c 135             | local35
60a7c 135             | 	res	1
60a7c 136             | local36
60a7c 136             | 	res	1
60a7c 137             | local37
60a7c 137             | 	res	1
60a7c 138             | local38
60a7c 138             | 	res	1
60a7c 139             | local39
60a7c 139             | 	res	1
60a7c 13a             | local40
60a7c 13a             | 	res	1
60a7c 13b             | local41
60a7c 13b             | 	res	1
60a7c 13c             | local42
60a7c 13c             | 	res	1
60a7c 13d             | local43
60a7c 13d             | 	res	1
60a7c 13e             | local44
60a7c 13e             | 	res	1
60a7c 13f             | local45
60a7c 13f             | 	res	1
60a7c 140             | local46
60a7c 140             | 	res	1
60a7c 141             | local47
60a7c 141             | 	res	1
60a7c 142             | local48
60a7c 142             | 	res	1
60a7c 143             | local49
60a7c 143             | 	res	1
60a7c 144             | local50
60a7c 144             | 	res	1
60a7c 145             | local51
60a7c 145             | 	res	1
60a7c 146             | local52
60a7c 146             | 	res	1
60a7c 147             | muldiva_
60a7c 147             | 	res	1
60a7c 148             | muldivb_
60a7c 148             | 	res	1
60a7c 149             | 	fit	480
60a7c 149             | 
