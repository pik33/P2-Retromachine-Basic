con
	_clkfreq = 20000000
	_clkmode = 16779595
' 
' 
' left= 14
	left = 14
' right=15
	right = 15
' 
' c4=262
	c4 = 262
' d4=294
	d4 = 294
' e4=330
	e4 = 330
' f4=349
	f4 = 349
' g4=392
	g4 = 392
' a4=440
	a4 = 440
' h4=494
	h4 = 494
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 20000000
	long	0 ' clock mode: will default to $100094b
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16779592
	waitx	##200000
	mov	pa, ##16779595
	hubset	pa
	wrlong	pa, #24
	wrlong	##20000000, #20
	jmp	#skip_clock_set_
	orgf	192
skip_clock_set_
	call	#_start
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    mov	fcache_tmpb_,ptrb
    pop	ptrb
    altd	pa,ret_instr_
    mov	 0-0, ret_instr_
    setq	pa
    rdlong	$0, ptrb++
    push	ptrb
    mov ptrb,fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    _ret_ cmp inb,#0
fcache_tmpb_
    long 0
fcache_load_ptr_
    long FCACHE_LOAD_
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

objptr
	long	@objmem
ptr__dat__
	long	@_dat_
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	1
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' '--------------------------------------------------------------
' '---------- Init the variables, start the cog. ----------------
' '--------------------------------------------------------------
' 
' pub start(mbox,scope,cache) :cog,base | iii
_start
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
' 
' ' mbox: PSRAM mailbox or 0 if no PSRAM
' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
' 
' mailboxaddr:=mbox 
	wrlong	local01, objptr
' scope_ptr:=scope
	add	objptr, #4
	wrlong	arg02, objptr
' cache_ptr:=cache
	add	objptr, #4
	wrlong	arg03, objptr
' base:=@channel0[0]
	add	objptr, #4
	mov	local02, objptr
' 
' repeat iii from 0 to 15
	mov	local03, #0
	sub	objptr, #12
	callpa	#(@LR__0002-@LR__0001)>>2,fcache_load_ptr_
LR__0001
'   long[base+64*iii]:=0
	mov	local01, local02
	mov	result2, local03
	shl	result2, #6
	add	local01, result2
	wrlong	#0, local01
'   long[base+64*iii+4]:=0  		
	mov	local01, local02
	mov	result2, local03
	shl	result2, #6
	add	local01, result2
	add	local01, #4
	wrlong	#0, local01
'   long[base+64*iii+8]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #8
	wrlong	#0, local04
'   long[base+64*iii+12]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #12
	wrlong	#0, local04
'   long[base+64*iii+16]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #16
	wrlong	#0, local04
'   long[base+64*iii+20]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #20
	wrlong	#0, local04
'   long[base+64*iii+24]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #24
	wrlong	#0, local04
'   long[base+64*iii+28]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #28
	wrlong	#0, local04
'   word[base+64*iii+32]:=8192
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #32
	wrword	##8192, local04
'   word[base+64*iii+34]:=8192
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #34
	wrword	##8192, local04
'   long[base+64*iii+36]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #36
	wrlong	#0, local04
'   long[base+64*iii+40]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #40
	wrlong	#0, local04
'   long[base+64*iii+44]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #44
	wrlong	#0, local04
'   long[base+64*iii+48]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #48
	wrlong	#0, local04
'   long[base+64*iii+52]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #52
	wrlong	#0, local04
'   freqs[iii]:=440000
	mov	local04, local03
	shl	local04, #2
	add	objptr, ##1036
	add	local04, objptr
	wrlong	##440000, local04
'   delays[iii]:=0
	mov	local04, local03
	shl	local04, #1
	add	objptr, #64
	add	local04, objptr
	wrword	#0, local04
'   volumes[iii]:=4096
	mov	local04, local03
	shl	local04, #1
	add	objptr, #32
	add	local04, objptr
	wrword	##4096, local04
'   waveforms[iii]:=0
	mov	local04, local03
	shl	local04, #2
	add	objptr, #32
	add	local04, objptr
	wrlong	#0, local04
'   envelopes[iii]:=0
	mov	local04, local03
	shl	local04, #2
	add	objptr, #64
	add	local04, objptr
	wrlong	#0, local04
'   lengths[iii]:=1000
	mov	local04, local03
	shl	local04, #1
	add	objptr, #64
	add	local04, objptr
	wrword	##1000, local04
'   pans[iii]:=8192
	mov	local04, local03
	shl	local04, #1
	add	objptr, #32
	add	local04, objptr
	wrword	##8192, local04
'   sustains[iii]:=255
	mov	local04, local03
	shl	local04, #1
	add	objptr, #32
	add	local04, objptr
	wrword	#255, local04
	add	local03, #1
	cmps	local03, #16 wc
	sub	objptr, ##1356
 if_b	jmp	#LR__0001
LR__0002
'   
' cog:=coginit(16,@audio,@mailboxaddr)
	mov	arg02, ptr__dat__
	mov	arg03, objptr
	mov	local04, #16
	setq	arg03
	coginit	local04, arg02 wc
 if_b	neg	local04, #1
' waitms(10)
	mov	arg01, #10
	call	#__system___waitms
' return cog,base
	mov	result2, local02
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_start_ret
	ret
hubexit
	jmp	#cogexit

__system___waitms
	mov	_var01, arg01
	getct	_var02
	rdlong	_var03, #20
	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
LR__0010
	cmps	_var01, ##1000 wc
 if_b	jmp	#LR__0012
	add	_var02, _var03
	mov	arg01, _var02
	addct1	arg01, #0
	waitct1
	sub	_var01, ##1000
	jmp	#LR__0010
LR__0011
LR__0012
	cmps	_var01, #1 wc
 if_b	jmp	#LR__0013
	qmul	_var01, _var03
	mov	arg03, ##1000
	getqy	result1
	getqx	arg01
	setq	result1
	qdiv	arg01, arg03
	getqx	arg01
	addct1	arg01, _var02
	waitct1
LR__0013
__system___waitms_ret
	ret
	alignl
_dat_
'-' 
'-' audio       	org     0
'-' 
'-'             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
	byte	$61, $69, $05, $fb
'-'             	rdlong  scbase, ptra++       	' get start address of scope buffer
	byte	$61, $a1, $05, $fb
'-'             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
	byte	$61, $ad, $05, $fb
'-' 
'-'             	cogid   pa                   	' compute cogid
	byte	$01, $ec, $63, $fd
'-'             	mul     pa, #12              	' and mailbox spacing
	byte	$0c, $ec, $07, $fa
'-'             	add     mailbox2, pa         	' add offset to find this COG's mailbox
	byte	$f6, $69, $01, $f1
'-'             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
	byte	$b4, $66, $01, $f6
'-' 
'-'             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
	byte	$0e, $aa, $05, $fc
'-'             	wxpin   sr44100,#left      	' 30*256
	byte	$0e, $ae, $15, $fc
'-'             	wrpin   dac2,#right
	byte	$0f, $aa, $05, $fc
'-'             	wxpin   sr44100,#right    
	byte	$0f, $ae, $15, $fc
'-'             	dirh    #left addpins 1
	byte	$41, $9c, $64, $fd
'-'             	setse1  #%001<<6 + left      	' Set the event - DAC empty
	byte	$20, $9c, $64, $fd
'-'  
'-'             
'-' '---------------------------------------------------------------------------------        
'-' '----------------- The main loop -------------------------------------------------
'-' '---------------------------------------------------------------------------------
'-' 
'-' loop       	mov 	    cn,#15 '7
	byte	$0f, $98, $05, $f6
'-'               					'  waitx ##33000000 		'for debug
'-'             
'-' '----------------------------------------------------------------------------------
'-' '------------- Get parameters and execute commands if any -------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' 
'-' p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
	byte	$cc, $60, $01, $f6
'-'             	shl     channeladd,#6
	byte	$06, $60, $65, $f0
'-'             	add     ptra,channeladd
	byte	$b0, $f0, $03, $f1
'-' 
'-'             	setq    #13                       	' read parameters
	byte	$28, $1a, $64, $fd
'-'             	rdlong  pointer0,ptra
	byte	$00, $6f, $05, $fb
'-' p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
	byte	$1f, $82, $1d, $f4
'-'     	if_nc   jmp     #p404                     	' if not set, proceed
	byte	$2c, $00, $90, $3d
'-'             	mov     qq,command0             	' get the new rate
	byte	$c1, $62, $01, $f6
'-'             	wxpin   qq,#left addpins 1        	' and program the pins
	byte	$4e, $62, $15, $fc
'-'             	getbyte qq,qq,#0 		      	' check if the rate is n*256
	byte	$b1, $62, $e1, $f8
'-'             	cmp     qq,#0 wz                         
	byte	$00, $62, $0d, $f2
'-'     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
	byte	$4e, $aa, $05, $ac
'-'     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
	byte	$4e, $a8, $05, $5c
'-'                 
'-'                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
	byte	$1e, $78, $1d, $f4
'-'     	if_z    mov     pointer0, #0  
	byte	$00, $6e, $05, $a6
'-'     	if_z    mov     pointer0h, #0  
	byte	$00, $70, $05, $a6
'-'     	if_z    mov     envph0, #0  
	byte	$00, $76, $05, $a6
'-'     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
	byte	$05, $79, $65, $ac
'-'     	
'-' p404        	mov     qq,sstart0		     	' check if start>$80000
	byte	$bc, $62, $01, $f6
'-' 		and 	qq,##$7FFFFFF 
	byte	$ff, $ff, $03, $ff, $ff, $63, $05, $f5
'-'                 cmp 	qq,##$80000 wcz
	byte	$00, $04, $00, $ff, $00, $62, $1d, $f2
'-'     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
	byte	$b4, $66, $01, $36
'-'     	if_lt   mov     mailbox,#0                	' if not, use HUB 
	byte	$00, $66, $05, $c6
'-' 
'-' p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
	byte	$bf, $94, $39, $f9
'-'     	    	getword avol0,volpan0,#0
	byte	$bf, $92, $31, $f9
'-'     	    	
'-' '----------------------------------------------------------------------------------
'-' '------------- Compute the envelope, if exists ------------------------------------
'-' '----------------------------------------------------------------------------------
'-'             
'-'             	cmp     envptr0,#0 wcz     		' read the pointer
	byte	$00, $84, $1d, $f2
'-'     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
	byte	$20, $00, $00, $af, $00, $e0, $05, $a6
'-'     	if_z    jmp     #p410				' and run away	
	byte	$54, $00, $90, $ad
'-' 
'-'            	add     envph0,envspd0			' envelope PA update
	byte	$c3, $76, $01, $f1
'-'            	           
'-'       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
	byte	$bb, $dc, $01, $f6
'-' 		shr     envhi,#6			' leave 10 bits in hi
	byte	$06, $dc, $45, $f0
'-' 	   	getword envlo,envhi,#0              	' and 16 bit in lo
	byte	$ee, $de, $31, $f9
'-' 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
	byte	$10, $dc, $45, $f0
'-' 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
	byte	$c4, $dc, $19, $f2
'-' 	    											'debug(udec(envhi,envlen0))
'-'     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
	byte	$c4, $dc, $01, $36
'-'     	if_ge   mov     envlo,#0
	byte	$00, $de, $05, $36
'-'     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
	byte	$c4, $76, $01, $36
'-'     	if_ge   shl     envph0,#22
	byte	$16, $76, $65, $30
'-' 
'-'             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
	byte	$ee, $e0, $01, $f6
'-'             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
	byte	$01, $e0, $65, $f0
'-'             	add 	envs1,envptr0                   ' and add it to the pointer
	byte	$c2, $e0, $01, $f1
'-'             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
	byte	$f0, $e0, $01, $fb
'-'             	getword envs2,envs1,#1			' then separate them		
	byte	$f0, $e2, $39, $f9
'-'            	getword envs1,envs1,#0
	byte	$f0, $e0, $31, $f9
'-'             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
	byte	$ef, $e2, $01, $fa
'-'             	not     envlo
	byte	$ef, $de, $21, $f6
'-'             	mul     envs1,envlo
	byte	$ef, $e0, $01, $fa
'-'             	add     envs1,envs2
	byte	$f1, $e0, $01, $f1
'-'             	shr     envs1,#18			' we need only 14 bits for scas
	byte	$12, $e0, $45, $f0
'-'               
'-' '----------------------------------------------------------------------------------
'-' '------------- Generate the noise if bit 27 of the pointer is set -----------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' p410        	testb   sstart0, #27 wz
	byte	$1b, $78, $0d, $f4
'-'     	if_z    getrnd  spl
	byte	$1b, $64, $61, $ad
'-'     	if_z    jmp     #p406
	byte	$9c, $00, $90, $ad
'-'     	
'-' '----------------------------------------------------------------------------------
'-' '------------- Get the sample -----------------------------------------------------
'-' '----------------------------------------------------------------------------------    	
'-'  
'-' 		mov	oldptrh,pointer0h
	byte	$b8, $96, $01, $f6
'-'            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
	byte	$c0, $90, $f9, $f8
'-'            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
	byte	$08, $80, $65, $f0
'-'            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
	byte	$c0, $6e, $19, $f1
'-'            	addx	pointer0h,afreq0  
	byte	$c8, $70, $21, $f1
'-' 		cmp	pointer0h,oldptrh wcz
	byte	$cb, $70, $19, $f2
'-' 	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
	byte	$50, $00, $90, $ad
'-'      	
'-'             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
	byte	$1f, $78, $0d, $f4
'-'      	if_z    shl     pointer0h,#1        
	byte	$01, $70, $65, $a0
'-'             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
	byte	$1c, $78, $0d, $f4
'-'      	if_z    shl     pointer0h,#1        
	byte	$01, $70, $65, $a0
'-' 												
'-'             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
	byte	$be, $70, $19, $f2
'-'    	if_ge   sub     pointer0h,lend0       
	byte	$be, $70, $81, $31
'-'         if_ge   add     pointer0h,lstart0
	byte	$bd, $70, $01, $31
'-'             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
	byte	$be, $70, $19, $f2
'-'         if_ge   mov	pointer0h,lend0	
	byte	$be, $70, $01, $36
'-'  
'-'              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
	byte	$b8, $62, $01, $f6
'-'            	add     qq,sstart0            
	byte	$bc, $62, $01, $f1
'-'            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
	byte	$ff, $67, $5d, $f2
'-'     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
	byte	$b1, $64, $e1, $ea
'-'     	if_gt   call    #cache_read
	byte	$f8, $00, $b0, $1d
'-'                 testb   sstart0,#31 wz 
	byte	$1f, $78, $0d, $f4
'-'     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
	byte	$08, $64, $65, $50
'-'         if_z    shr     pointer0h,#1
	byte	$01, $70, $45, $a0
'-'                 testb   sstart0,#28 wz            
	byte	$1c, $78, $0d, $f4
'-'     	if_z    shr     pointer0h,#1    
	byte	$01, $70, $45, $a0
'-'                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
	byte	$b2, $74, $41, $f9
'-'                   
'-' p411	      	getword spl,rawspl0,#1
	byte	$ba, $64, $39, $f9
'-' 		getword oldspl,rawspl0,#1		' then separate them		
	byte	$ba, $8e, $39, $f9
'-' 		mov	envlo,pointer0
	byte	$b7, $de, $01, $f6
'-' 		shr 	envlo,#18
	byte	$12, $de, $45, $f0
'-' 	
'-'             	scas    oldspl,envlo                   	' and do linear interpolation
	byte	$ef, $8e, $31, $fa
'-'             	mov 	oldspl,0-0
	byte	$00, $8e, $01, $f6
'-'             	not     envlo
	byte	$ef, $de, $21, $f6
'-'           	and     envlo,##$3FFF
	byte	$1f, $00, $00, $ff, $ff, $df, $05, $f5
'-'            	scas    spl,envlo
	byte	$ef, $64, $31, $fa
'-'             	mov     spl,0-0
	byte	$00, $64, $01, $f6
'-'                 add     spl, oldspl
	byte	$c7, $64, $01, $f1
'-' 	 
'-' p406        	scas    spl, envs1
	byte	$f0, $64, $31, $fa
'-'             	mov     spl,0-0
	byte	$00, $64, $01, $f6
'-'             	scas    spl,avol0                 	' apply volume
	byte	$c9, $64, $31, $fa
'-'             	mov     spl,0-0
	byte	$00, $64, $01, $f6
'-'  
'-'             	scas    spl,apan0                 	' apply pan
	byte	$ca, $64, $31, $fa
'-'             	mov     ls0,0-0
	byte	$00, $9a, $01, $f6
'-'             	mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $62, $05, $f6
'-'             	sub     qq,apan0
	byte	$ca, $62, $81, $f1
'-'             	scas    spl,qq
	byte	$b1, $64, $31, $fa
'-'             	mov     rs0, 0-0
	byte	$00, $9c, $01, $f6
'-'       
'-'                 setword sample0,rs0,#1           	' pack samples into long
	byte	$ce, $72, $29, $f9
'-'                 setword sample0,ls0,#0
	byte	$cd, $72, $21, $f9
'-'                 
'-'                 add  lsample,ls0
	byte	$cd, $6a, $01, $f1
'-'                 add  rsample,rs0
	byte	$ce, $6c, $01, $f1
'-'              
'-'             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
	byte	$1e, $78, $1d, $f4
'-'     	if_z    mov     pointer0, #0  
	byte	$00, $6e, $05, $a6
'-'     	if_z    mov     pointer0h, #0  
	byte	$00, $70, $05, $a6
'-'     	if_z    mov     envph0, #0  
	byte	$00, $76, $05, $a6
'-'     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
	byte	$05, $79, $65, $ac
'-'             
'-' p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
	byte	$28, $08, $64, $fd
'-' 	       	wrlong  pointer0,ptra
	byte	$00, $6f, $65, $fc
'-'             	sub     ptra, channeladd         	' reset the pointer to channel parameters
	byte	$b0, $f0, $83, $f1
'-' 
'-'             	djnf    cn, #p401
	byte	$8a, $99, $7d, $fb
'-' 
'-'             	bitnot rsample, #15
	byte	$0f, $6c, $e5, $f4
'-'             	bitnot lsample, #15
	byte	$0f, $6a, $e5, $f4
'-'   							'           	getct ct2  	'debug
'-'   							'          	sub ct2,ct1
'-'   							'          	debug(udec(ct2))
'-'             	waitse1
	byte	$24, $28, $60, $fd
'-'           
'-'            	wypin   lsample, #left              
	byte	$0e, $6a, $25, $fc
'-'                 wypin   rsample, #right        
	byte	$0f, $6c, $25, $fc
'-' 
'-' 		setword oldsample, lsample,#0		' for oscilloscope
	byte	$b5, $9e, $21, $f9
'-' 		setword oldsample, rsample,#1
	byte	$b6, $9e, $29, $f9
'-' 		
'-'             	mov rsample, #0
	byte	$00, $6c, $05, $f6
'-'             	mov lsample, #0
	byte	$00, $6a, $05, $f6
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- Oscilloscope  -----------------------------------------------------
'-' '----------------------------------------------------------------------------------   
'-' 		
'-' 	    	cmp     scbase,#0 wz
	byte	$00, $a0, $0d, $f2
'-'     	if_z    jmp #p302	   
	byte	$20, $00, $90, $ad
'-'  
'-'             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
	byte	$01, $a6, $15, $f7
'-'     	if_c    mov scptr2,scptr
	byte	$d1, $a4, $01, $c6
'-'     	if_c    shl scptr2,#2
	byte	$02, $a4, $65, $c0
'-'     	if_c    add scptr2,scbase     
	byte	$d0, $a4, $01, $c1
'-'             	wrlong scptr2,#$60
	byte	$60, $a4, $65, $fc
'-'     	if_c    wrlong oldsample,scptr2
	byte	$d2, $9e, $61, $cc
'-'     	if_c    incmod scptr,##639
	byte	$01, $00, $00, $cf, $7f, $a2, $05, $c7
'-'             
'-'  p302           jmp     #loop            'loop
	byte	$d4, $fd, $9f, $fd
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- This is the end of the main loop -----------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- PSRAM cache ----------- --------------------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' ' There are 16 cache pointers for 16 channels
'-' ' if 24 higher bits of address=cache, then get a word from the cache
'-' ' else load the cache from PSRAM, update the pointer, then read a sample
'-' 
'-' 
'-' cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
	byte	$b1, $d6, $e1, $f8
'-'             
'-' 	   	mov     addrhi,qq		
	byte	$b1, $d8, $01, $f6
'-' 	    	shr     addrhi,#8		        ' get 24 upper bits
	byte	$08, $d8, $45, $f0
'-' 	    	alts    cn,#cache1            
	byte	$d8, $98, $95, $f9
'-' 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
	byte	$00, $d8, $09, $f2
'-'     	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
	byte	$34, $00, $90, $ad
'-' 	
'-' p702	    	altd    cn,#cache1			' cache miss. 
	byte	$d8, $98, $8d, $f9
'-' 	    	mov     0-0,addrhi                  	' update the pointer
	byte	$ec, $00, $00, $f6
'-' 	    	mov     cmd,addrhi			' prepare the mailbox
	byte	$ec, $d0, $01, $f6
'-' 	    	shl     cmd,#8
	byte	$08, $d0, $65, $f0
'-'             	setnib  cmd, #%1011, #7             	' read burst from the external memory
	byte	$0b, $d0, $3d, $f8
'-'             	mov     hubaddr,cn                  	' to the channel cache
	byte	$cc, $d2, $01, $f6
'-'             	shl     hubaddr,#8                  	'
	byte	$08, $d2, $65, $f0
'-'             	add     hubaddr,hubptr 
	byte	$d6, $d2, $01, $f1
'-'             	mov     count,#256                  	' 256 bytes
	byte	$00, $d5, $05, $f6
'-'             	setq    #2                          	' write 3 longs
	byte	$28, $04, $64, $fd
'-'             	wrlong  cmd, mailbox                	' run it
	byte	$b3, $d0, $61, $fc
'-' poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
	byte	$b3, $d0, $01, $fb
'-'             	tjs     cmd, #poll1                 	' retry until valid 
	byte	$fe, $d1, $b5, $fb
'-'             
'-' 	
'-' p701	    	mov     qq,cn				' cache hit
	byte	$cc, $62, $01, $f6
'-' 	    	shl     qq,#8				' compute the cache start
	byte	$08, $62, $65, $f0
'-' 	    	add     qq,hubptr
	byte	$d6, $62, $01, $f1
'-' 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
	byte	$eb, $62, $01, $f1
'-'     	_ret_   rdword  spl,qq                      	' read a long from the cache
	byte	$b1, $64, $e1, $0a
'-'           
'-'   
'-' 
'-' 
'-' '---------------------------------------------------------------------------
'-' '------- Variables ---------------------------------------------------------
'-' '---------------------------------------------------------------------------
'-' 
'-' ' constants
'-' 
'-' channeladd 	long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' temporary variables 
'-' 
'-' qq          	long 0
	byte	$00, $00, $00, $00
'-' spl         	long 0
	byte	$00, $00, $00, $00
'-' mailbox     	long 0
	byte	$00, $00, $00, $00
'-' mailbox2    	long 0
	byte	$00, $00, $00, $00
'-' lsample     	long 0
	byte	$00, $00, $00, $00
'-' rsample     	long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' channel parameter block
'-' 
'-' pointer0    	long 0   
	byte	$00, $00, $00, $00
'-' pointer0h   	long 0  
	byte	$00, $00, $00, $00
'-' sample0     	long 0
	byte	$00, $00, $00, $00
'-' rawspl0	    	long 0
	byte	$00, $00, $00, $00
'-' envph0	    	long 0
	byte	$00, $00, $00, $00
'-' sstart0     	long 0     ' start pointer and type at bit 31
	byte	$00, $00, $00, $00
'-' lstart0     	long 0
	byte	$00, $00, $00, $00
'-' lend0       	long 0
	byte	$00, $00, $00, $00
'-' volpan0     	long 0
	byte	$00, $00, $00, $00
'-' freqskip0   	long 0
	byte	$00, $00, $00, $00
'-' command0    	long 0
	byte	$00, $00, $00, $00
'-' envptr0	    	long 0
	byte	$00, $00, $00, $00
'-' envspd0	    	long 0
	byte	$00, $00, $00, $00
'-' envlen0	    	long 0
	byte	$00, $00, $00, $00
'-' res5	    	long 0
	byte	$00, $00, $00, $00
'-' res6	    	long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldspl		long 0
	byte	$00, $00, $00, $00
'-' afreq0      	long 0
	byte	$00, $00, $00, $00
'-' 
'-' avol0       	long 0
	byte	$00, $00, $00, $00
'-' apan0       	long 0
	byte	$00, $00, $00, $00
'-' oldptrh	    	long 0
	byte	$00, $00, $00, $00
'-' cn          	long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Samples
'-' 
'-' ls0         	long 0
	byte	$00, $00, $00, $00
'-' rs0         	long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldsample   	long 0
	byte	$00, $00, $00, $00
'-' 
'-' scbase 		long 0
	byte	$00, $00, $00, $00
'-' scptr 		long 0
	byte	$00, $00, $00, $00
'-' scptr2		long 0
	byte	$00, $00, $00, $00
'-' scope 		long 0
	byte	$00, $00, $00, $00
'-' 
'-' dac         	long %10111_00000000_01_00010_0     	'random dither
	byte	$44, $00, $17, $00
'-' dac2        	long %10111_00000000_01_00011_0     	'pwm
	byte	$46, $00, $17, $00
'-' 
'-' hubptr      	long $71800
	byte	$00, $18, $07, $00
'-' sr44100     	long 30*256
	byte	$00, $1e, $00, $00
'-' 
'-' cache1      	long 0
	byte	$00, $00, $00, $00
'-' cache2      	long 0
	byte	$00, $00, $00, $00
'-' cache3      	long 0
	byte	$00, $00, $00, $00
'-' cache4      	long 0
	byte	$00, $00, $00, $00
'-' cache5      	long 0
	byte	$00, $00, $00, $00
'-' cache6      	long 0
	byte	$00, $00, $00, $00
'-' cache7      	long 0
	byte	$00, $00, $00, $00
'-' cache8      	long 0
	byte	$00, $00, $00, $00
'-' cache9      	long 0
	byte	$00, $00, $00, $00
'-' cachea      	long 0
	byte	$00, $00, $00, $00
'-' cacheb      	long 0
	byte	$00, $00, $00, $00
'-' cachec      	long 0
	byte	$00, $00, $00, $00
'-' cached      	long 0
	byte	$00, $00, $00, $00
'-' cachee      	long 0
	byte	$00, $00, $00, $00
'-' cachef      	long 0
	byte	$00, $00, $00, $00
'-' cache0      	long 0
	byte	$00, $00, $00, $00
'-' 
'-' cmd         	long 0
	byte	$00, $00, $00, $00
'-' hubaddr    	long 0
	byte	$00, $00, $00, $00
'-' count       	long 256
	byte	$00, $01, $00, $00
'-' 
'-' addrlo 		long 0
	byte	$00, $00, $00, $00
'-' addrhi 		long 0
	byte	$00, $00, $00, $00
'-' pointer00 	long 0
	byte	$00, $00, $00, $00
'-' envhi 		long 0
	byte	$00, $00, $00, $00
'-' envlo 		long 0
	byte	$00, $00, $00, $00
'-' envs1 		long 0
	byte	$00, $00, $00, $00
'-' envs2 		long 0
	byte	$00, $00, $00, $00
'-' noise0 		long 0
	byte	$00, $00, $00, $00
'-' 
'-' 'ct1 		long 0
'-' 'ct2 		long 0
'-' 
'-' 		fit 256		'todo: maybe the better interpolation. Or all params in cog
'-' 		fit 256		'todo: maybe the better interpolation. Or all params in cog
'-' null  			long 	0,0           ' for channel reset
	byte	$00, $00, $00, $00, $00, $00, $00, $00
objmem
	long	0[347]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
	fit	480
