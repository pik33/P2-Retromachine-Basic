00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic021.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 21
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 04 1A A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 40 D0 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 88 CE 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 48 B8 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 88 BD 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 68 C1 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 EC 47 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 A8 C8 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 FC 5B 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 AC 83 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 64 81 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 3C 93 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F8 5C 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     F8 46 B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     D0 46 B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     A8 46 B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     B8 3C B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     08 3D B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     F8 3C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     5C 3C B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     1F 01 00 FF 
00ab4     9E 2A 06 F6 | 	mov	local07, ##@LR__4077
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     A4 65 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     DC 64 B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     1F 01 00 FF 
00af8     9F 1E 06 F6 | 	mov	local01, ##@LR__4078
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     1F 01 00 FF 
00b68     A0 16 06 F6 | 	mov	arg03, ##@LR__4079
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     C8 65 B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     A4 60 B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     48 64 B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     80 63 B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     D8 5F B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     04 64 B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     3C 63 B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     1F 01 00 FF 
00ca4     A2 1E 06 F6 | 	mov	local01, ##@LR__4080
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     1F 01 00 FF 
00cf4     A3 14 06 F6 | 	mov	arg02, ##@LR__4081
00cf8     6C 3F B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     1F 01 00 FF 
00d50     A4 14 06 F6 | 	mov	arg02, ##@LR__4082
00d54     10 3F B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     1F 01 00 FF 
00da8     A5 14 06 F6 | 	mov	arg02, ##@LR__4083
00dac     B8 3E B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     1F 01 00 FF 
00e00     A6 14 06 F6 | 	mov	arg02, ##@LR__4084
00e04     60 3E B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     10 5F B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     04 5E B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     1F 01 00 FF 
00f80     A7 14 06 F6 | 	mov	arg02, ##@LR__4085
00f84     E0 3C B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     64 5D B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     1F 01 00 FF 
01020     A8 14 06 F6 | 	mov	arg02, ##@LR__4086
01024     40 3C B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     1F 01 00 FF 
01088     A9 14 06 F6 | 	mov	arg02, ##@LR__4087
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     D0 3B B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     94 3B B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     1F 01 00 FF 
011b4     AB 14 06 F6 | 	mov	arg02, ##@LR__4088
011b8     AC 3A B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     1F 01 00 FF 
011e0     AD 14 06 F6 | 	mov	arg02, ##@LR__4089
011e4     80 3A B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     B0 5A B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     1F 01 00 FF 
01230     AF 14 06 F6 | 	mov	arg02, ##@LR__4090
01234     30 3A B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     E0 59 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     1F 01 00 FF 
01278     B1 14 06 F6 | 	mov	arg02, ##@LR__4091
0127c     E8 39 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     C8 59 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     7C 39 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     1F 01 00 FF 
01428     B3 14 06 F6 | 	mov	arg02, ##@LR__4092
0142c     38 38 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     1F 01 00 FF 
01450     B5 14 06 F6 | 	mov	arg02, ##@LR__4093
01454     10 38 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     1F 01 00 FF 
01478     B7 14 06 F6 | 	mov	arg02, ##@LR__4094
0147c     E8 37 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     1F 01 00 FF 
014a0     B9 2E 06 F6 | 	mov	local09, ##@LR__4095
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     BC 37 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     1F 01 00 FF 
014cc     BB 36 06 F6 | 	mov	local13, ##@LR__4096
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     8C 37 B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     1F 01 00 FF 
014fc     BD 36 06 F6 | 	mov	local13, ##@LR__4097
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     60 37 B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     1F 01 00 FF 
01528     BF 46 06 F6 | 	mov	local21, ##@LR__4098
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     34 37 B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     1F 01 00 FF 
01554     C1 48 06 F6 | 	mov	local22, ##@LR__4099
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     04 37 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     1F 01 00 FF 
01584     C3 48 06 F6 | 	mov	local22, ##@LR__4100
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     D8 36 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     1F 01 00 FF 
015b0     C5 40 06 F6 | 	mov	local18, ##@LR__4101
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     A8 36 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     1F 01 00 FF 
015e0     C7 40 06 F6 | 	mov	local18, ##@LR__4102
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     7C 36 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     1F 01 00 FF 
0160c     C9 4C 06 F6 | 	mov	local24, ##@LR__4103
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     4C 36 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     1F 01 00 FF 
0163c     CB 4E 06 F6 | 	mov	local25, ##@LR__4104
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     1C 36 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     1F 01 00 FF 
0166c     CD 50 06 F6 | 	mov	local26, ##@LR__4105
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     EC 35 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     DC 35 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     C4 58 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     FC 57 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     24 53 B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     1F 01 00 FF 
01934     CF 14 06 F6 | 	mov	arg02, ##@LR__4106
01938     2C 33 B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     68 53 B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     1F 01 00 FF 
01978     D1 14 06 F6 | 	mov	arg02, ##@LR__4107
0197c     E8 32 B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     40 55 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     1F 01 00 FF 
01b7c     9A 15 06 F6 | 	mov	arg02, ##@LR__4164
01b80     E4 30 B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     B0 18 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     54 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     74 1C B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     94 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     E0 4D B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     58 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     1F 01 00 FF 
02020     D3 2A 06 F6 | 	mov	local07, ##@LR__4108
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     1F 01 00 FF 
0204c     D4 14 06 F6 | 	mov	arg02, ##@LR__4109
02050     14 2C B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     1F 01 00 FF 
02074     D9 14 06 F6 | 	mov	arg02, ##@LR__4110
02078     EC 2B B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     1F 01 00 FF 
0209c     DE 14 06 F6 | 	mov	arg02, ##@LR__4111
020a0     C4 2B B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     1F 01 00 FF 
02114     E3 28 06 F6 | 	mov	local06, ##@LR__4112
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     48 2B B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     1F 01 00 FF 
02140     E9 28 06 F6 | 	mov	local06, ##@LR__4113
02144     14 15 02 F6 | 	mov	arg02, local06
02148     1C 2B B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     1F 01 00 FF 
0216c     F0 2A 06 F6 | 	mov	local07, ##@LR__4114
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     EC 2A B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     1F 01 00 FF 
021dc     F6 14 06 F6 | 	mov	arg02, ##@LR__4115
021e0     84 2A B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     1F 01 00 FF 
021f0     F9 1E 06 F6 | 	mov	local01, ##@LR__4116
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     1F 01 00 FF 
0222c     FB 28 06 F6 | 	mov	local06, ##@LR__4117
02230     14 15 02 F6 | 	mov	arg02, local06
02234     30 2A B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     1F 01 00 FF 
02244     FF 1E 06 F6 | 	mov	local01, ##@LR__4118
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     34 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     28 5A B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     00 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     74 29 B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     E0 F3 B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     1F 01 00 FF 
02388     01 15 06 F6 | 	mov	arg02, ##@LR__4119
0238c     D8 28 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     88 28 B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     F4 F2 B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     1F 01 00 FF 
02474     02 15 06 F6 | 	mov	arg02, ##@LR__4120
02478     EC 27 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     7C 28 B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     1F 01 00 FF 
0253c     03 15 06 F6 | 	mov	arg02, ##@LR__4121
02540     24 27 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     B4 27 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     1F 01 00 FF 
02604     04 15 06 F6 | 	mov	arg02, ##@LR__4122
02608     5C 26 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     18 27 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     28 7B B1 FD | 	call	#__system___getiolock_0349
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     6C 25 B1 FD | 	call	#__system___lockmem
026d4     1F 01 00 FF 
026d8     05 15 06 F6 | 	mov	arg02, ##@LR__4123
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     4C 32 B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     E4 31 B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     F4 7A B1 FD | 	call	#__system___getiolock_0349
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     B8 25 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     50 5E B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     14 F0 B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     1F 01 00 FF 
02750     34 15 06 F6 | 	mov	arg02, ##@LR__4124
02754     10 25 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     1F 01 00 FF 
02788     35 13 06 F6 | 	mov	arg01, ##@LR__4125
0278c                 | ' 
0278c                 | ' write(text)
0278c     8C 14 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     E8 15 B1 FD | 	call	#_hg010b_spin2_crlf
02794     1F 01 00 FF 
02798     36 13 06 F6 | 	mov	arg01, ##@LR__4126
0279c                 | ' 
0279c                 | ' write(text)
0279c     7C 14 B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     D8 15 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     1F 01 00 FF 
027c0     3C 15 06 F6 | 	mov	arg02, ##@LR__4127
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     9C 24 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     1F 01 00 FF 
027d8     3E 15 06 F6 | 	mov	arg02, ##@LR__4128
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     84 24 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     1F 01 00 FF 
027f0     40 15 06 F6 | 	mov	arg02, ##@LR__4129
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     6C 24 B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     1F 01 00 FF 
02808     43 15 06 F6 | 	mov	arg02, ##@LR__4130
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     54 24 B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     1F 01 00 FF 
02820     47 15 06 F6 | 	mov	arg02, ##@LR__4131
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     3C 24 B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     1F 01 00 FF 
02838     49 15 06 F6 | 	mov	arg02, ##@LR__4132
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     24 24 B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     1F 01 00 FF 
02850     4B 15 06 F6 | 	mov	arg02, ##@LR__4133
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     0C 24 B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     1F 01 00 FF 
02868     4F 15 06 F6 | 	mov	arg02, ##@LR__4134
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     F4 23 B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     1F 01 00 FF 
02880     53 15 06 F6 | 	mov	arg02, ##@LR__4135
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     DC 23 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     1F 01 00 FF 
02898     57 15 06 F6 | 	mov	arg02, ##@LR__4136
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     C4 23 B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     1F 01 00 FF 
028b0     5B 15 06 F6 | 	mov	arg02, ##@LR__4137
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     AC 23 B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     1F 01 00 FF 
028c8     5F 15 06 F6 | 	mov	arg02, ##@LR__4138
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     94 23 B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     1F 01 00 FF 
028e0     61 15 06 F6 | 	mov	arg02, ##@LR__4139
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     7C 23 B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     1F 01 00 FF 
028f8     65 15 06 F6 | 	mov	arg02, ##@LR__4140
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     64 23 B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     1F 01 00 FF 
02910     67 15 06 F6 | 	mov	arg02, ##@LR__4141
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     4C 23 B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     1F 01 00 FF 
02928     69 15 06 F6 | 	mov	arg02, ##@LR__4142
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     34 23 B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     1F 01 00 FF 
02940     6C 15 06 F6 | 	mov	arg02, ##@LR__4143
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     1C 23 B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     1F 01 00 FF 
02958     6F 15 06 F6 | 	mov	arg02, ##@LR__4144
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     04 23 B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     1F 01 00 FF 
02970     71 15 06 F6 | 	mov	arg02, ##@LR__4145
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     EC 22 B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     1F 01 00 FF 
02988     73 15 06 F6 | 	mov	arg02, ##@LR__4146
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     D4 22 B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     1F 01 00 FF 
029a0     76 15 06 F6 | 	mov	arg02, ##@LR__4147
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     BC 22 B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     1F 01 00 FF 
029b8     79 15 06 F6 | 	mov	arg02, ##@LR__4148
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     A4 22 B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     1F 01 00 FF 
02aa0     7C 15 06 F6 | 	mov	arg02, ##@LR__4149
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     BC 21 B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     1F 01 00 FF 
02ab8     7E 15 06 F6 | 	mov	arg02, ##@LR__4150
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     A4 21 B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     1F 01 00 FF 
02ad0     80 15 06 F6 | 	mov	arg02, ##@LR__4151
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     8C 21 B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     1F 01 00 FF 
02ae8     82 15 06 F6 | 	mov	arg02, ##@LR__4152
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     74 21 B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     1F 01 00 FF 
02b00     84 15 06 F6 | 	mov	arg02, ##@LR__4153
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     5C 21 B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     1F 01 00 FF 
02b18     86 15 06 F6 | 	mov	arg02, ##@LR__4154
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     44 21 B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     1F 01 00 FF 
02b30     88 15 06 F6 | 	mov	arg02, ##@LR__4155
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     2C 21 B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     1F 01 00 FF 
02b48     8A 15 06 F6 | 	mov	arg02, ##@LR__4156
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     14 21 B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     1F 01 00 FF 
02b60     8C 15 06 F6 | 	mov	arg02, ##@LR__4157
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     FC 20 B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     1F 01 00 FF 
02b78     8E 15 06 F6 | 	mov	arg02, ##@LR__4158
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     E4 20 B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     1F 01 00 FF 
02b90     90 15 06 F6 | 	mov	arg02, ##@LR__4159
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     CC 20 B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     1F 01 00 FF 
02ba8     92 15 06 F6 | 	mov	arg02, ##@LR__4160
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     B4 20 B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     1F 01 00 FF 
02bc0     94 15 06 F6 | 	mov	arg02, ##@LR__4161
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     9C 20 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     1F 01 00 FF 
02bd8     96 15 06 F6 | 	mov	arg02, ##@LR__4162
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     84 20 B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     1F 01 00 FF 
02bf0     98 15 06 F6 | 	mov	arg02, ##@LR__4163
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     6C 20 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     1F 01 00 FF 
02ca0     9C 15 06 F6 | 	mov	arg02, ##@LR__4165
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     BC 1F B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     AC 03 90 AD |  if_e	jmp	#LR__0180
02cb4     1F 01 00 FF 
02cb8     A0 15 06 F6 | 	mov	arg02, ##@LR__4166
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     A4 1F B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     9C 03 90 AD |  if_e	jmp	#LR__0181
02ccc     1F 01 00 FF 
02cd0     A4 15 06 F6 | 	mov	arg02, ##@LR__4167
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     8C 1F B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     8C 03 90 AD |  if_e	jmp	#LR__0182
02ce4     1F 01 00 FF 
02ce8     A9 15 06 F6 | 	mov	arg02, ##@LR__4168
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     74 1F B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     7C 03 90 AD |  if_e	jmp	#LR__0183
02cfc     1F 01 00 FF 
02d00     AE 15 06 F6 | 	mov	arg02, ##@LR__4169
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     5C 1F B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     6C 03 90 AD |  if_e	jmp	#LR__0184
02d14     1F 01 00 FF 
02d18     B4 15 06 F6 | 	mov	arg02, ##@LR__4170
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     44 1F B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     5C 03 90 AD |  if_e	jmp	#LR__0185
02d2c     1F 01 00 FF 
02d30     BB 15 06 F6 | 	mov	arg02, ##@LR__4171
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     2C 1F B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     4C 03 90 AD |  if_e	jmp	#LR__0186
02d44     1F 01 00 FF 
02d48     C3 15 06 F6 | 	mov	arg02, ##@LR__4172
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     14 1F B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     3C 03 90 AD |  if_e	jmp	#LR__0187
02d5c     1F 01 00 FF 
02d60     C7 15 06 F6 | 	mov	arg02, ##@LR__4173
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     FC 1E B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     2C 03 90 AD |  if_e	jmp	#LR__0188
02d74     1F 01 00 FF 
02d78     CD 15 06 F6 | 	mov	arg02, ##@LR__4174
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     E4 1E B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     1C 03 90 AD |  if_e	jmp	#LR__0189
02d8c     1F 01 00 FF 
02d90     D3 15 06 F6 | 	mov	arg02, ##@LR__4175
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     CC 1E B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     0C 03 90 AD |  if_e	jmp	#LR__0190
02da4     1F 01 00 FF 
02da8     D9 15 06 F6 | 	mov	arg02, ##@LR__4176
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     B4 1E B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     FC 02 90 AD |  if_e	jmp	#LR__0191
02dbc     1F 01 00 FF 
02dc0     DE 15 06 F6 | 	mov	arg02, ##@LR__4177
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     9C 1E B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     EC 02 90 AD |  if_e	jmp	#LR__0192
02dd4     1F 01 00 FF 
02dd8     E2 15 06 F6 | 	mov	arg02, ##@LR__4178
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     84 1E B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     DC 02 90 AD |  if_e	jmp	#LR__0193
02dec     1F 01 00 FF 
02df0     E7 15 06 F6 | 	mov	arg02, ##@LR__4179
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     6C 1E B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     CC 02 90 AD |  if_e	jmp	#LR__0194
02e04     1F 01 00 FF 
02e08     ED 15 06 F6 | 	mov	arg02, ##@LR__4180
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     54 1E B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     BC 02 90 AD |  if_e	jmp	#LR__0195
02e1c     1F 01 00 FF 
02e20     F2 15 06 F6 | 	mov	arg02, ##@LR__4181
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     3C 1E B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     AC 02 90 AD |  if_e	jmp	#LR__0196
02e34     1F 01 00 FF 
02e38     F7 15 06 F6 | 	mov	arg02, ##@LR__4182
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     24 1E B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     9C 02 90 AD |  if_e	jmp	#LR__0197
02e4c     1F 01 00 FF 
02e50     FC 15 06 F6 | 	mov	arg02, ##@LR__4183
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     0C 1E B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     8C 02 90 AD |  if_e	jmp	#LR__0198
02e64     20 01 00 FF 
02e68     05 14 06 F6 | 	mov	arg02, ##@LR__4184
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     F4 1D B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     7C 02 90 AD |  if_e	jmp	#LR__0199
02e7c     20 01 00 FF 
02e80     0C 14 06 F6 | 	mov	arg02, ##@LR__4185
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     DC 1D B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     6C 02 90 AD |  if_e	jmp	#LR__0200
02e94     20 01 00 FF 
02e98     14 14 06 F6 | 	mov	arg02, ##@LR__4186
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     C4 1D B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     5C 02 90 AD |  if_e	jmp	#LR__0201
02eac     20 01 00 FF 
02eb0     17 14 06 F6 | 	mov	arg02, ##@LR__4187
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     AC 1D B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     4C 02 90 AD |  if_e	jmp	#LR__0202
02ec4     20 01 00 FF 
02ec8     1C 14 06 F6 | 	mov	arg02, ##@LR__4188
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     94 1D B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     3C 02 90 AD |  if_e	jmp	#LR__0203
02edc     20 01 00 FF 
02ee0     21 14 06 F6 | 	mov	arg02, ##@LR__4189
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     7C 1D B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     2C 02 90 AD |  if_e	jmp	#LR__0204
02ef4     20 01 00 FF 
02ef8     26 14 06 F6 | 	mov	arg02, ##@LR__4190
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     64 1D B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     1C 02 90 AD |  if_e	jmp	#LR__0205
02f0c     20 01 00 FF 
02f10     2A 14 06 F6 | 	mov	arg02, ##@LR__4191
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     4C 1D B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     0C 02 90 AD |  if_e	jmp	#LR__0206
02f24     20 01 00 FF 
02f28     2E 14 06 F6 | 	mov	arg02, ##@LR__4192
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     34 1D B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     FC 01 90 AD |  if_e	jmp	#LR__0207
02f3c     20 01 00 FF 
02f40     33 14 06 F6 | 	mov	arg02, ##@LR__4193
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     1C 1D B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     EC 01 90 AD |  if_e	jmp	#LR__0208
02f54     20 01 00 FF 
02f58     39 14 06 F6 | 	mov	arg02, ##@LR__4194
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     04 1D B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     DC 01 90 AD |  if_e	jmp	#LR__0209
02f6c     20 01 00 FF 
02f70     3D 14 06 F6 | 	mov	arg02, ##@LR__4195
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     EC 1C B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     CC 01 90 AD |  if_e	jmp	#LR__0210
02f84     20 01 00 FF 
02f88     42 14 06 F6 | 	mov	arg02, ##@LR__4196
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     D4 1C B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     BC 01 90 AD |  if_e	jmp	#LR__0211
02f9c     20 01 00 FF 
02fa0     47 14 06 F6 | 	mov	arg02, ##@LR__4197
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     BC 1C B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     AC 01 90 AD |  if_e	jmp	#LR__0212
02fb4     20 01 00 FF 
02fb8     4D 14 06 F6 | 	mov	arg02, ##@LR__4198
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     A4 1C B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     9C 01 90 AD |  if_e	jmp	#LR__0213
02fcc     20 01 00 FF 
02fd0     54 14 06 F6 | 	mov	arg02, ##@LR__4199
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     8C 1C B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     8C 01 90 AD |  if_e	jmp	#LR__0214
02fe4     20 01 00 FF 
02fe8     5A 14 06 F6 | 	mov	arg02, ##@LR__4200
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     74 1C B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     7C 01 90 AD |  if_e	jmp	#LR__0215
02ffc     20 01 00 FF 
03000     64 14 06 F6 | 	mov	arg02, ##@LR__4201
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     5C 1C B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     6C 01 90 AD |  if_e	jmp	#LR__0216
03014     20 01 00 FF 
03018     6B 14 06 F6 | 	mov	arg02, ##@LR__4202
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     44 1C B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     5C 01 90 AD |  if_e	jmp	#LR__0217
0302c     20 01 00 FF 
03030     75 14 06 F6 | 	mov	arg02, ##@LR__4203
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     2C 1C B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     4C 01 90 AD |  if_e	jmp	#LR__0218
03044     20 01 00 FF 
03048     7A 14 06 F6 | 	mov	arg02, ##@LR__4204
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     14 1C B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     3C 01 90 AD |  if_e	jmp	#LR__0219
0305c     40 01 90 FD | 	jmp	#LR__0220
03060                 | LR__0180
03060     40 FA 05 F6 | 	mov	result1, #64
03064     3C 01 90 FD | 	jmp	#LR__0221
03068                 | LR__0181
03068     41 FA 05 F6 | 	mov	result1, #65
0306c     34 01 90 FD | 	jmp	#LR__0221
03070                 | LR__0182
03070     42 FA 05 F6 | 	mov	result1, #66
03074     2C 01 90 FD | 	jmp	#LR__0221
03078                 | LR__0183
03078     43 FA 05 F6 | 	mov	result1, #67
0307c     24 01 90 FD | 	jmp	#LR__0221
03080                 | LR__0184
03080     44 FA 05 F6 | 	mov	result1, #68
03084     1C 01 90 FD | 	jmp	#LR__0221
03088                 | LR__0185
03088     45 FA 05 F6 | 	mov	result1, #69
0308c     14 01 90 FD | 	jmp	#LR__0221
03090                 | LR__0186
03090     46 FA 05 F6 | 	mov	result1, #70
03094     0C 01 90 FD | 	jmp	#LR__0221
03098                 | LR__0187
03098     47 FA 05 F6 | 	mov	result1, #71
0309c     04 01 90 FD | 	jmp	#LR__0221
030a0                 | LR__0188
030a0     48 FA 05 F6 | 	mov	result1, #72
030a4     FC 00 90 FD | 	jmp	#LR__0221
030a8                 | LR__0189
030a8     49 FA 05 F6 | 	mov	result1, #73
030ac     F4 00 90 FD | 	jmp	#LR__0221
030b0                 | LR__0190
030b0     44 FA 05 F6 | 	mov	result1, #68
030b4     EC 00 90 FD | 	jmp	#LR__0221
030b8                 | LR__0191
030b8     4C FA 05 F6 | 	mov	result1, #76
030bc     E4 00 90 FD | 	jmp	#LR__0221
030c0                 | LR__0192
030c0     4D FA 05 F6 | 	mov	result1, #77
030c4     DC 00 90 FD | 	jmp	#LR__0221
030c8                 | LR__0193
030c8     4E FA 05 F6 | 	mov	result1, #78
030cc     D4 00 90 FD | 	jmp	#LR__0221
030d0                 | LR__0194
030d0     50 FA 05 F6 | 	mov	result1, #80
030d4     CC 00 90 FD | 	jmp	#LR__0221
030d8                 | LR__0195
030d8     51 FA 05 F6 | 	mov	result1, #81
030dc     C4 00 90 FD | 	jmp	#LR__0221
030e0                 | LR__0196
030e0     52 FA 05 F6 | 	mov	result1, #82
030e4     BC 00 90 FD | 	jmp	#LR__0221
030e8                 | LR__0197
030e8     59 FA 05 F6 | 	mov	result1, #89
030ec     B4 00 90 FD | 	jmp	#LR__0221
030f0                 | LR__0198
030f0     55 FA 05 F6 | 	mov	result1, #85
030f4     AC 00 90 FD | 	jmp	#LR__0221
030f8                 | LR__0199
030f8     56 FA 05 F6 | 	mov	result1, #86
030fc     A4 00 90 FD | 	jmp	#LR__0221
03100                 | LR__0200
03100     57 FA 05 F6 | 	mov	result1, #87
03104     9C 00 90 FD | 	jmp	#LR__0221
03108                 | LR__0201
03108     58 FA 05 F6 | 	mov	result1, #88
0310c     94 00 90 FD | 	jmp	#LR__0221
03110                 | LR__0202
03110     5A FA 05 F6 | 	mov	result1, #90
03114     8C 00 90 FD | 	jmp	#LR__0221
03118                 | LR__0203
03118     5B FA 05 F6 | 	mov	result1, #91
0311c     84 00 90 FD | 	jmp	#LR__0221
03120                 | LR__0204
03120     5C FA 05 F6 | 	mov	result1, #92
03124     7C 00 90 FD | 	jmp	#LR__0221
03128                 | LR__0205
03128     5D FA 05 F6 | 	mov	result1, #93
0312c     74 00 90 FD | 	jmp	#LR__0221
03130                 | LR__0206
03130     4A FA 05 F6 | 	mov	result1, #74
03134     6C 00 90 FD | 	jmp	#LR__0221
03138                 | LR__0207
03138     4B FA 05 F6 | 	mov	result1, #75
0313c     64 00 90 FD | 	jmp	#LR__0221
03140                 | LR__0208
03140     5E FA 05 F6 | 	mov	result1, #94
03144     5C 00 90 FD | 	jmp	#LR__0221
03148                 | LR__0209
03148     5F FA 05 F6 | 	mov	result1, #95
0314c     54 00 90 FD | 	jmp	#LR__0221
03150                 | LR__0210
03150     60 FA 05 F6 | 	mov	result1, #96
03154     4C 00 90 FD | 	jmp	#LR__0221
03158                 | LR__0211
03158     61 FA 05 F6 | 	mov	result1, #97
0315c     44 00 90 FD | 	jmp	#LR__0221
03160                 | LR__0212
03160     63 FA 05 F6 | 	mov	result1, #99
03164     3C 00 90 FD | 	jmp	#LR__0221
03168                 | LR__0213
03168     68 FA 05 F6 | 	mov	result1, #104
0316c     34 00 90 FD | 	jmp	#LR__0221
03170                 | LR__0214
03170     69 FA 05 F6 | 	mov	result1, #105
03174     2C 00 90 FD | 	jmp	#LR__0221
03178                 | LR__0215
03178     6C FA 05 F6 | 	mov	result1, #108
0317c     24 00 90 FD | 	jmp	#LR__0221
03180                 | LR__0216
03180     6D FA 05 F6 | 	mov	result1, #109
03184     1C 00 90 FD | 	jmp	#LR__0221
03188                 | LR__0217
03188     70 FA 05 F6 | 	mov	result1, #112
0318c     14 00 90 FD | 	jmp	#LR__0221
03190                 | LR__0218
03190     71 FA 05 F6 | 	mov	result1, #113
03194     0C 00 90 FD | 	jmp	#LR__0221
03198                 | LR__0219
03198     72 FA 05 F6 | 	mov	result1, #114
0319c     04 00 90 FD | 	jmp	#LR__0221
031a0                 | LR__0220
031a0     00 FA 05 F6 | 	mov	result1, #0
031a4                 | LR__0221
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _iscommand_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' function isfunction(s as string) as ubyte
031b0                 | _isfunction
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     20 01 00 FF 
031c0     7E 14 06 F6 | 	mov	arg02, ##@LR__4205
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     9C 1A B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     DC 00 90 AD |  if_e	jmp	#LR__0230
031d4     20 01 00 FF 
031d8     82 14 06 F6 | 	mov	arg02, ##@LR__4206
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     84 1A B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     CC 00 90 AD |  if_e	jmp	#LR__0231
031ec     20 01 00 FF 
031f0     89 14 06 F6 | 	mov	arg02, ##@LR__4207
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     6C 1A B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     BC 00 90 AD |  if_e	jmp	#LR__0232
03204     20 01 00 FF 
03208     90 14 06 F6 | 	mov	arg02, ##@LR__4208
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     54 1A B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     AC 00 90 AD |  if_e	jmp	#LR__0233
0321c     20 01 00 FF 
03220     97 14 06 F6 | 	mov	arg02, ##@LR__4209
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     3C 1A B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     9C 00 90 AD |  if_e	jmp	#LR__0234
03234     20 01 00 FF 
03238     9E 14 06 F6 | 	mov	arg02, ##@LR__4210
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     24 1A B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     8C 00 90 AD |  if_e	jmp	#LR__0235
0324c     20 01 00 FF 
03250     A6 14 06 F6 | 	mov	arg02, ##@LR__4211
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     0C 1A B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     7C 00 90 AD |  if_e	jmp	#LR__0236
03264     20 01 00 FF 
03268     AA 14 06 F6 | 	mov	arg02, ##@LR__4212
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     F4 19 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     6C 00 90 AD |  if_e	jmp	#LR__0237
0327c     20 01 00 FF 
03280     B0 14 06 F6 | 	mov	arg02, ##@LR__4213
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     DC 19 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     5C 00 90 AD |  if_e	jmp	#LR__0238
03294     20 01 00 FF 
03298     B6 14 06 F6 | 	mov	arg02, ##@LR__4214
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     C4 19 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     4C 00 90 AD |  if_e	jmp	#LR__0239
032ac     50 00 90 FD | 	jmp	#LR__0240
032b0                 | LR__0230
032b0     54 FA 05 F6 | 	mov	result1, #84
032b4     4C 00 90 FD | 	jmp	#LR__0241
032b8                 | LR__0231
032b8     64 FA 05 F6 | 	mov	result1, #100
032bc     44 00 90 FD | 	jmp	#LR__0241
032c0                 | LR__0232
032c0     65 FA 05 F6 | 	mov	result1, #101
032c4     3C 00 90 FD | 	jmp	#LR__0241
032c8                 | LR__0233
032c8     66 FA 05 F6 | 	mov	result1, #102
032cc     34 00 90 FD | 	jmp	#LR__0241
032d0                 | LR__0234
032d0     67 FA 05 F6 | 	mov	result1, #103
032d4     2C 00 90 FD | 	jmp	#LR__0241
032d8                 | LR__0235
032d8     62 FA 05 F6 | 	mov	result1, #98
032dc     24 00 90 FD | 	jmp	#LR__0241
032e0                 | LR__0236
032e0     6B FA 05 F6 | 	mov	result1, #107
032e4     1C 00 90 FD | 	jmp	#LR__0241
032e8                 | LR__0237
032e8     6A FA 05 F6 | 	mov	result1, #106
032ec     14 00 90 FD | 	jmp	#LR__0241
032f0                 | LR__0238
032f0     6E FA 05 F6 | 	mov	result1, #110
032f4     0C 00 90 FD | 	jmp	#LR__0241
032f8                 | LR__0239
032f8     6F FA 05 F6 | 	mov	result1, #111
032fc     04 00 90 FD | 	jmp	#LR__0241
03300                 | LR__0240
03300     00 FA 05 F6 | 	mov	result1, #0
03304                 | LR__0241
03304     A7 F0 03 F6 | 	mov	ptra, fp
03308     B2 00 A0 FD | 	call	#popregs_
0330c                 | _isfunction_ret
0330c     2D 00 64 FD | 	ret
03310                 | 
03310                 | ' 
03310                 | ' function isname(s as string) as boolean
03310                 | _isname
03310     0D 4A 05 F6 | 	mov	COUNT_, #13
03314     A8 00 A0 FD | 	call	#pushregs_
03318     09 1F 02 F6 | 	mov	local01, arg01
0331c     09 21 02 F6 | 	mov	local02, arg01
03320     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03324                 | LR__0250
03324     10 FB C9 FA | 	rdbyte	result1, local02 wz
03328     01 20 06 51 |  if_ne	add	local02, #1
0332c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03330                 | LR__0251
03330     09 21 82 F1 | 	sub	local02, arg01
03334     10 FB 01 F6 | 	mov	result1, local02
03338     FD 22 0A F6 | 	mov	local03, result1 wz
0333c     00 FA 05 A6 |  if_e	mov	result1, #0
03340     34 02 90 AD |  if_e	jmp	#LR__0263
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     01 14 06 F6 | 	mov	arg02, #1
0334c     01 16 06 F6 | 	mov	arg03, #1
03350     14 3A B1 FD | 	call	#__system__Mid_S
03354     FD 24 02 F6 | 	mov	local04, result1
03358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03358     20 01 00 FF 
0335c     BF 14 06 F6 | 	mov	arg02, ##@LR__4215
03360     12 13 02 F6 | 	mov	arg01, local04
03364     00 19 B1 FD | 	call	#__system___string_cmp
03368     00 FA 55 F2 | 	cmps	result1, #0 wc
0336c     18 00 90 CD |  if_b	jmp	#LR__0252
03370     20 01 00 FF 
03374     C1 14 06 F6 | 	mov	arg02, ##@LR__4216
03378     12 13 02 F6 | 	mov	arg01, local04
0337c     E8 18 B1 FD | 	call	#__system___string_cmp
03380     01 FA 55 F2 | 	cmps	result1, #1 wc
03384     1C 00 90 CD |  if_b	jmp	#LR__0253
03388                 | LR__0252
03388     20 01 00 FF 
0338c     C3 14 06 F6 | 	mov	arg02, ##@LR__4217
03390     12 13 02 F6 | 	mov	arg01, local04
03394     D0 18 B1 FD | 	call	#__system___string_cmp
03398     00 FA 0D F2 | 	cmp	result1, #0 wz
0339c     00 FA 05 56 |  if_ne	mov	result1, #0
033a0     D4 01 90 5D |  if_ne	jmp	#LR__0263
033a4                 | LR__0253
033a4                 | ' if l>2 then 
033a4     03 22 56 F2 | 	cmps	local03, #3 wc
033a8     C8 01 90 CD |  if_b	jmp	#LR__0262
033ac                 | '   for i=2 to l
033ac     02 26 06 F6 | 	mov	local05, #2
033b0     11 29 02 F6 | 	mov	local06, local03
033b4     01 28 06 F1 | 	add	local06, #1
033b8                 | LR__0254
033b8     14 27 52 F2 | 	cmps	local05, local06 wc
033bc     B4 01 90 3D |  if_ae	jmp	#LR__0261
033c0     0F 13 02 F6 | 	mov	arg01, local01
033c4     13 15 02 F6 | 	mov	arg02, local05
033c8     01 16 06 F6 | 	mov	arg03, #1
033cc     98 39 B1 FD | 	call	#__system__Mid_S
033d0     FD 24 02 F6 | 	mov	local04, result1
033d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
033d4     11 27 52 F2 | 	cmps	local05, local03 wc
033d8     9C 00 90 3D |  if_ae	jmp	#LR__0257
033dc     20 01 00 FF 
033e0     C5 14 06 F6 | 	mov	arg02, ##@LR__4218
033e4     12 13 02 F6 | 	mov	arg01, local04
033e8     7C 18 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 55 F2 | 	cmps	result1, #0 wc
033f0     18 00 90 CD |  if_b	jmp	#LR__0255
033f4     20 01 00 FF 
033f8     C7 14 06 F6 | 	mov	arg02, ##@LR__4219
033fc     12 13 02 F6 | 	mov	arg01, local04
03400     64 18 B1 FD | 	call	#__system___string_cmp
03404     01 FA 55 F2 | 	cmps	result1, #1 wc
03408     6C 00 90 CD |  if_b	jmp	#LR__0257
0340c                 | LR__0255
0340c     20 01 00 FF 
03410     C9 14 06 F6 | 	mov	arg02, ##@LR__4220
03414     12 13 02 F6 | 	mov	arg01, local04
03418     4C 18 B1 FD | 	call	#__system___string_cmp
0341c     00 FA 55 F2 | 	cmps	result1, #0 wc
03420     18 00 90 CD |  if_b	jmp	#LR__0256
03424     20 01 00 FF 
03428     CB 14 06 F6 | 	mov	arg02, ##@LR__4221
0342c     12 13 02 F6 | 	mov	arg01, local04
03430     34 18 B1 FD | 	call	#__system___string_cmp
03434     01 FA 55 F2 | 	cmps	result1, #1 wc
03438     3C 00 90 CD |  if_b	jmp	#LR__0257
0343c                 | LR__0256
0343c     20 01 00 FF 
03440     CD 2A 06 F6 | 	mov	local07, ##@LR__4222
03444     12 13 02 F6 | 	mov	arg01, local04
03448     15 15 02 F6 | 	mov	arg02, local07
0344c     18 18 B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     20 00 90 AD |  if_e	jmp	#LR__0257
03458     20 01 00 FF 
0345c     CF 2C 06 F6 | 	mov	local08, ##@LR__4223
03460     12 13 02 F6 | 	mov	arg01, local04
03464     16 15 02 F6 | 	mov	arg02, local08
03468     FC 17 B1 FD | 	call	#__system___string_cmp
0346c     FD 2E 0A F6 | 	mov	local09, result1 wz
03470     00 FA 05 56 |  if_ne	mov	result1, #0
03474     00 01 90 5D |  if_ne	jmp	#LR__0263
03478                 | LR__0257
03478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03478     11 27 0A F2 | 	cmp	local05, local03 wz
0347c     EC 00 90 5D |  if_ne	jmp	#LR__0260
03480     20 01 00 FF 
03484     D1 30 06 F6 | 	mov	local10, ##@LR__4224
03488     12 13 02 F6 | 	mov	arg01, local04
0348c     18 15 02 F6 | 	mov	arg02, local10
03490     D4 17 B1 FD | 	call	#__system___string_cmp
03494     FD 32 02 F6 | 	mov	local11, result1
03498     00 32 56 F2 | 	cmps	local11, #0 wc
0349c     1C 00 90 CD |  if_b	jmp	#LR__0258
034a0     20 01 00 FF 
034a4     D3 14 06 F6 | 	mov	arg02, ##@LR__4225
034a8     12 13 02 F6 | 	mov	arg01, local04
034ac     B8 17 B1 FD | 	call	#__system___string_cmp
034b0     FD 30 02 F6 | 	mov	local10, result1
034b4     01 30 56 F2 | 	cmps	local10, #1 wc
034b8     B0 00 90 CD |  if_b	jmp	#LR__0260
034bc                 | LR__0258
034bc     20 01 00 FF 
034c0     D5 14 06 F6 | 	mov	arg02, ##@LR__4226
034c4     12 13 02 F6 | 	mov	arg01, local04
034c8     9C 17 B1 FD | 	call	#__system___string_cmp
034cc     00 FA 55 F2 | 	cmps	result1, #0 wc
034d0     1C 00 90 CD |  if_b	jmp	#LR__0259
034d4     20 01 00 FF 
034d8     D7 2E 06 F6 | 	mov	local09, ##@LR__4227
034dc     12 13 02 F6 | 	mov	arg01, local04
034e0     17 15 02 F6 | 	mov	arg02, local09
034e4     80 17 B1 FD | 	call	#__system___string_cmp
034e8     01 FA 55 F2 | 	cmps	result1, #1 wc
034ec     7C 00 90 CD |  if_b	jmp	#LR__0260
034f0                 | LR__0259
034f0     20 01 00 FF 
034f4     D9 2E 06 F6 | 	mov	local09, ##@LR__4228
034f8     12 13 02 F6 | 	mov	arg01, local04
034fc     17 15 02 F6 | 	mov	arg02, local09
03500     64 17 B1 FD | 	call	#__system___string_cmp
03504     00 FA 4D F2 | 	cmps	result1, #0 wz
03508     60 00 90 AD |  if_e	jmp	#LR__0260
0350c     20 01 00 FF 
03510     DB 2C 06 F6 | 	mov	local08, ##@LR__4229
03514     12 13 02 F6 | 	mov	arg01, local04
03518     16 15 02 F6 | 	mov	arg02, local08
0351c     48 17 B1 FD | 	call	#__system___string_cmp
03520     FD 2E 0A F6 | 	mov	local09, result1 wz
03524     44 00 90 AD |  if_e	jmp	#LR__0260
03528     20 01 00 FF 
0352c     DD 34 06 F6 | 	mov	local12, ##@LR__4230
03530     1A 2D 02 F6 | 	mov	local08, local12
03534     12 13 02 F6 | 	mov	arg01, local04
03538     16 15 02 F6 | 	mov	arg02, local08
0353c     28 17 B1 FD | 	call	#__system___string_cmp
03540     FD 2A 0A F6 | 	mov	local07, result1 wz
03544     24 00 90 AD |  if_e	jmp	#LR__0260
03548     20 01 00 FF 
0354c     DF 36 06 F6 | 	mov	local13, ##@LR__4231
03550     1B 35 02 F6 | 	mov	local12, local13
03554     12 13 02 F6 | 	mov	arg01, local04
03558     1A 15 02 F6 | 	mov	arg02, local12
0355c     08 17 B1 FD | 	call	#__system___string_cmp
03560     FD 2C 0A F6 | 	mov	local08, result1 wz
03564     00 FA 05 56 |  if_ne	mov	result1, #0
03568     0C 00 90 5D |  if_ne	jmp	#LR__0263
0356c                 | LR__0260
0356c     01 26 06 F1 | 	add	local05, #1
03570     44 FE 9F FD | 	jmp	#LR__0254
03574                 | LR__0261
03574                 | LR__0262
03574                 | ' return true
03574     01 FA 65 F6 | 	neg	result1, #1
03578                 | LR__0263
03578     A7 F0 03 F6 | 	mov	ptra, fp
0357c     B2 00 A0 FD | 	call	#popregs_
03580                 | _isname_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' function isnum(s as string) as boolean
03584                 | _isnum
03584     0D 4A 05 F6 | 	mov	COUNT_, #13
03588     A8 00 A0 FD | 	call	#pushregs_
0358c     09 1F 02 F6 | 	mov	local01, arg01
03590     00 20 06 F6 | 	mov	local02, #0
03594     00 22 06 F6 | 	mov	local03, #0
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     09 25 02 F6 | 	mov	local04, arg01
035a0     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
035a4                 | LR__0270
035a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
035a8     01 24 06 51 |  if_ne	add	local04, #1
035ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
035b0                 | LR__0271
035b0     09 25 82 F1 | 	sub	local04, arg01
035b4     12 FB 01 F6 | 	mov	result1, local04
035b8     FD 26 0A F6 | 	mov	local05, result1 wz
035bc     00 FA 05 A6 |  if_e	mov	result1, #0
035c0     8C 02 90 AD |  if_e	jmp	#LR__0282
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     01 14 06 F6 | 	mov	arg02, #1
035cc     01 16 06 F6 | 	mov	arg03, #1
035d0     94 37 B1 FD | 	call	#__system__Mid_S
035d4     FD 28 02 F6 | 	mov	local06, result1
035d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
035d8     20 01 00 FF 
035dc     E1 14 06 F6 | 	mov	arg02, ##@LR__4232
035e0     14 13 02 F6 | 	mov	arg01, local06
035e4     80 16 B1 FD | 	call	#__system___string_cmp
035e8     00 FA 55 F2 | 	cmps	result1, #0 wc
035ec     18 00 90 CD |  if_b	jmp	#LR__0272
035f0     20 01 00 FF 
035f4     E3 14 06 F6 | 	mov	arg02, ##@LR__4233
035f8     14 13 02 F6 | 	mov	arg01, local06
035fc     68 16 B1 FD | 	call	#__system___string_cmp
03600     01 FA 55 F2 | 	cmps	result1, #1 wc
03604     78 00 90 CD |  if_b	jmp	#LR__0273
03608                 | LR__0272
03608     20 01 00 FF 
0360c     E5 14 06 F6 | 	mov	arg02, ##@LR__4234
03610     14 13 02 F6 | 	mov	arg01, local06
03614     50 16 B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     60 00 90 AD |  if_e	jmp	#LR__0273
03620     20 01 00 FF 
03624     E7 2A 06 F6 | 	mov	local07, ##@LR__4235
03628     14 13 02 F6 | 	mov	arg01, local06
0362c     15 15 02 F6 | 	mov	arg02, local07
03630     34 16 B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     44 00 90 AD |  if_e	jmp	#LR__0273
0363c     20 01 00 FF 
03640     E9 2C 06 F6 | 	mov	local08, ##@LR__4236
03644     16 2B 02 F6 | 	mov	local07, local08
03648     14 13 02 F6 | 	mov	arg01, local06
0364c     15 15 02 F6 | 	mov	arg02, local07
03650     14 16 B1 FD | 	call	#__system___string_cmp
03654     00 FA 4D F2 | 	cmps	result1, #0 wz
03658     24 00 90 AD |  if_e	jmp	#LR__0273
0365c     20 01 00 FF 
03660     EB 2E 06 F6 | 	mov	local09, ##@LR__4237
03664     17 2D 02 F6 | 	mov	local08, local09
03668     14 13 02 F6 | 	mov	arg01, local06
0366c     16 15 02 F6 | 	mov	arg02, local08
03670     F4 15 B1 FD | 	call	#__system___string_cmp
03674     FD 2A 0A F6 | 	mov	local07, result1 wz
03678     00 FA 05 56 |  if_ne	mov	result1, #0
0367c     D0 01 90 5D |  if_ne	jmp	#LR__0282
03680                 | LR__0273
03680                 | ' if m$="." then ds=1
03680     20 01 00 FF 
03684     ED 14 06 F6 | 	mov	arg02, ##@LR__4238
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     D8 15 B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     01 20 06 A6 |  if_e	mov	local02, #1
03698                 | ' if l>1 then 
03698     02 26 56 F2 | 	cmps	local05, #2 wc
0369c     AC 01 90 CD |  if_b	jmp	#LR__0281
036a0                 | '   for i=2 to l
036a0     02 30 06 F6 | 	mov	local10, #2
036a4     13 33 02 F6 | 	mov	local11, local05
036a8     01 32 06 F1 | 	add	local11, #1
036ac                 | LR__0274
036ac     19 31 52 F2 | 	cmps	local10, local11 wc
036b0     98 01 90 3D |  if_ae	jmp	#LR__0280
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     18 15 02 F6 | 	mov	arg02, local10
036bc     01 16 06 F6 | 	mov	arg03, #1
036c0     A4 36 B1 FD | 	call	#__system__Mid_S
036c4     FD 28 02 F6 | 	mov	local06, result1
036c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
036c8     20 01 00 FF 
036cc     EF 14 06 F6 | 	mov	arg02, ##@LR__4239
036d0     14 13 02 F6 | 	mov	arg01, local06
036d4     90 15 B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0275
036e0     20 01 00 FF 
036e4     F1 14 06 F6 | 	mov	arg02, ##@LR__4240
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     78 15 B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     98 00 90 CD |  if_b	jmp	#LR__0276
036f8                 | LR__0275
036f8     20 01 00 FF 
036fc     F3 14 06 F6 | 	mov	arg02, ##@LR__4241
03700     14 13 02 F6 | 	mov	arg01, local06
03704     60 15 B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     80 00 90 AD |  if_e	jmp	#LR__0276
03710     20 01 00 FF 
03714     F5 2A 06 F6 | 	mov	local07, ##@LR__4242
03718     14 13 02 F6 | 	mov	arg01, local06
0371c     15 15 02 F6 | 	mov	arg02, local07
03720     44 15 B1 FD | 	call	#__system___string_cmp
03724     00 FA 4D F2 | 	cmps	result1, #0 wz
03728     64 00 90 AD |  if_e	jmp	#LR__0276
0372c     20 01 00 FF 
03730     F7 2C 06 F6 | 	mov	local08, ##@LR__4243
03734     16 2B 02 F6 | 	mov	local07, local08
03738     14 13 02 F6 | 	mov	arg01, local06
0373c     15 15 02 F6 | 	mov	arg02, local07
03740     24 15 B1 FD | 	call	#__system___string_cmp
03744     FD 34 0A F6 | 	mov	local12, result1 wz
03748     44 00 90 AD |  if_e	jmp	#LR__0276
0374c     20 01 00 FF 
03750     F9 2E 06 F6 | 	mov	local09, ##@LR__4244
03754     17 2D 02 F6 | 	mov	local08, local09
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     16 15 02 F6 | 	mov	arg02, local08
03760     04 15 B1 FD | 	call	#__system___string_cmp
03764     FD 2A 0A F6 | 	mov	local07, result1 wz
03768     24 00 90 AD |  if_e	jmp	#LR__0276
0376c     20 01 00 FF 
03770     FB 36 06 F6 | 	mov	local13, ##@LR__4245
03774     1B 2F 02 F6 | 	mov	local09, local13
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     17 15 02 F6 | 	mov	arg02, local09
03780     E4 14 B1 FD | 	call	#__system___string_cmp
03784     FD 2C 0A F6 | 	mov	local08, result1 wz
03788     00 FA 05 56 |  if_ne	mov	result1, #0
0378c     C0 00 90 5D |  if_ne	jmp	#LR__0282
03790                 | LR__0276
03790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03790     20 01 00 FF 
03794     FD 14 06 F6 | 	mov	arg02, ##@LR__4246
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     C8 14 B1 FD | 	call	#__system___string_cmp
037a0     00 FA 0D F2 | 	cmp	result1, #0 wz
037a4     38 00 90 5D |  if_ne	jmp	#LR__0277
037a8     18 15 02 F6 | 	mov	arg02, local10
037ac     01 14 86 F1 | 	sub	arg02, #1
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 16 06 F6 | 	mov	arg03, #1
037b8     AC 35 B1 FD | 	call	#__system__Mid_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     40 37 B1 FD | 	call	#__system__LCase_S
037c4     FD 12 02 F6 | 	mov	arg01, result1
037c8     20 01 00 FF 
037cc     FF 14 06 F6 | 	mov	arg02, ##@LR__4247
037d0     94 14 B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     70 00 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0277
037e0                 | '     if m$="." then ds+=1: if ds>1 then return false
037e0     20 01 00 FF 
037e4     01 15 06 F6 | 	mov	arg02, ##@LR__4248
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     78 14 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A1 |  if_e	add	local02, #1
037f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
037fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03804     20 01 00 FF 
03808     03 15 06 F6 | 	mov	arg02, ##@LR__4249
0380c     14 13 02 F6 | 	mov	arg01, local06
03810     54 14 B1 FD | 	call	#__system___string_cmp
03814     00 FA 4D F2 | 	cmps	result1, #0 wz
03818     18 00 90 AD |  if_e	jmp	#LR__0278
0381c     20 01 00 FF 
03820     05 15 06 F6 | 	mov	arg02, ##@LR__4250
03824     14 13 02 F6 | 	mov	arg01, local06
03828     3C 14 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 4D F2 | 	cmps	result1, #0 wz
03830     10 00 90 5D |  if_ne	jmp	#LR__0279
03834                 | LR__0278
03834     01 22 06 F1 | 	add	local03, #1
03838     02 22 56 F2 | 	cmps	local03, #2 wc
0383c     00 FA 05 36 |  if_ae	mov	result1, #0
03840     0C 00 90 3D |  if_ae	jmp	#LR__0282
03844                 | LR__0279
03844     01 30 06 F1 | 	add	local10, #1
03848     60 FE 9F FD | 	jmp	#LR__0274
0384c                 | LR__0280
0384c                 | LR__0281
0384c                 | ' return true
0384c     01 FA 65 F6 | 	neg	result1, #1
03850                 | LR__0282
03850     A7 F0 03 F6 | 	mov	ptra, fp
03854     B2 00 A0 FD | 	call	#popregs_
03858                 | _isnum_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | '   
0385c                 | ' function isint(s as string) as boolean
0385c                 | _isint
0385c     05 4A 05 F6 | 	mov	COUNT_, #5
03860     A8 00 A0 FD | 	call	#pushregs_
03864     09 1F 02 F6 | 	mov	local01, arg01
03868     09 21 02 F6 | 	mov	local02, arg01
0386c     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
03870                 | LR__0290
03870     10 FB C9 FA | 	rdbyte	result1, local02 wz
03874     01 20 06 51 |  if_ne	add	local02, #1
03878     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
0387c                 | LR__0291
0387c     09 21 82 F1 | 	sub	local02, arg01
03880     10 FB 01 F6 | 	mov	result1, local02
03884     FD 20 0A F6 | 	mov	local02, result1 wz
03888     00 FA 05 A6 |  if_e	mov	result1, #0
0388c     18 01 90 AD |  if_e	jmp	#LR__0299
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     01 14 06 F6 | 	mov	arg02, #1
03898     01 16 06 F6 | 	mov	arg03, #1
0389c     C8 34 B1 FD | 	call	#__system__Mid_S
038a0     FD 22 02 F6 | 	mov	local03, result1
038a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038a4     20 01 00 FF 
038a8     07 15 06 F6 | 	mov	arg02, ##@LR__4251
038ac     11 13 02 F6 | 	mov	arg01, local03
038b0     B4 13 B1 FD | 	call	#__system___string_cmp
038b4     00 FA 55 F2 | 	cmps	result1, #0 wc
038b8     18 00 90 CD |  if_b	jmp	#LR__0292
038bc     20 01 00 FF 
038c0     09 15 06 F6 | 	mov	arg02, ##@LR__4252
038c4     11 13 02 F6 | 	mov	arg01, local03
038c8     9C 13 B1 FD | 	call	#__system___string_cmp
038cc     01 FA 55 F2 | 	cmps	result1, #1 wc
038d0     4C 00 90 CD |  if_b	jmp	#LR__0293
038d4                 | LR__0292
038d4     20 01 00 FF 
038d8     0B 15 06 F6 | 	mov	arg02, ##@LR__4253
038dc     11 13 02 F6 | 	mov	arg01, local03
038e0     84 13 B1 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     34 00 90 AD |  if_e	jmp	#LR__0293
038ec     20 01 00 FF 
038f0     0D 15 06 F6 | 	mov	arg02, ##@LR__4254
038f4     11 13 02 F6 | 	mov	arg01, local03
038f8     6C 13 B1 FD | 	call	#__system___string_cmp
038fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03900     1C 00 90 AD |  if_e	jmp	#LR__0293
03904     20 01 00 FF 
03908     0F 15 06 F6 | 	mov	arg02, ##@LR__4255
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     54 13 B1 FD | 	call	#__system___string_cmp
03914     00 FA 0D F2 | 	cmp	result1, #0 wz
03918     00 FA 05 56 |  if_ne	mov	result1, #0
0391c     88 00 90 5D |  if_ne	jmp	#LR__0299
03920                 | LR__0293
03920                 | ' 
03920                 | ' if l>1 then 
03920     02 20 56 F2 | 	cmps	local02, #2 wc
03924     7C 00 90 CD |  if_b	jmp	#LR__0298
03928                 | '   for i=2 to l
03928     02 24 06 F6 | 	mov	local04, #2
0392c     10 27 02 F6 | 	mov	local05, local02
03930     01 26 06 F1 | 	add	local05, #1
03934                 | LR__0294
03934     13 25 52 F2 | 	cmps	local04, local05 wc
03938     68 00 90 3D |  if_ae	jmp	#LR__0297
0393c     0F 13 02 F6 | 	mov	arg01, local01
03940     12 15 02 F6 | 	mov	arg02, local04
03944     01 16 06 F6 | 	mov	arg03, #1
03948     1C 34 B1 FD | 	call	#__system__Mid_S
0394c     FD 22 02 F6 | 	mov	local03, result1
03950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03950     20 01 00 FF 
03954     11 15 06 F6 | 	mov	arg02, ##@LR__4256
03958     11 13 02 F6 | 	mov	arg01, local03
0395c     08 13 B1 FD | 	call	#__system___string_cmp
03960     00 FA 55 F2 | 	cmps	result1, #0 wc
03964     18 00 90 CD |  if_b	jmp	#LR__0295
03968     20 01 00 FF 
0396c     13 15 06 F6 | 	mov	arg02, ##@LR__4257
03970     11 13 02 F6 | 	mov	arg01, local03
03974     F0 12 B1 FD | 	call	#__system___string_cmp
03978     01 FA 55 F2 | 	cmps	result1, #1 wc
0397c     1C 00 90 CD |  if_b	jmp	#LR__0296
03980                 | LR__0295
03980     20 01 00 FF 
03984     15 15 06 F6 | 	mov	arg02, ##@LR__4258
03988     11 13 02 F6 | 	mov	arg01, local03
0398c     D8 12 B1 FD | 	call	#__system___string_cmp
03990     00 FA 0D F2 | 	cmp	result1, #0 wz
03994     00 FA 05 56 |  if_ne	mov	result1, #0
03998     0C 00 90 5D |  if_ne	jmp	#LR__0299
0399c                 | LR__0296
0399c     01 24 06 F1 | 	add	local04, #1
039a0     90 FF 9F FD | 	jmp	#LR__0294
039a4                 | LR__0297
039a4                 | LR__0298
039a4                 | ' return true
039a4     01 FA 65 F6 | 	neg	result1, #1
039a8                 | LR__0299
039a8     A7 F0 03 F6 | 	mov	ptra, fp
039ac     B2 00 A0 FD | 	call	#popregs_
039b0                 | _isint_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | ' 
039b4                 | ' function isdec(s as string) as boolean
039b4                 | _isdec
039b4     05 4A 05 F6 | 	mov	COUNT_, #5
039b8     A8 00 A0 FD | 	call	#pushregs_
039bc     09 1F 02 F6 | 	mov	local01, arg01
039c0     09 21 02 F6 | 	mov	local02, arg01
039c4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
039c8                 | LR__0300
039c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
039cc     01 20 06 51 |  if_ne	add	local02, #1
039d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
039d4                 | LR__0301
039d4     09 21 82 F1 | 	sub	local02, arg01
039d8     10 FB 01 F6 | 	mov	result1, local02
039dc     FD 20 0A F6 | 	mov	local02, result1 wz
039e0     00 FA 05 A6 |  if_e	mov	result1, #0
039e4     80 00 90 AD |  if_e	jmp	#LR__0306
039e8                 | ' for i=1 to l
039e8     01 22 06 F6 | 	mov	local03, #1
039ec     10 25 02 F6 | 	mov	local04, local02
039f0     01 24 06 F1 | 	add	local04, #1
039f4                 | LR__0302
039f4     12 23 52 F2 | 	cmps	local03, local04 wc
039f8     68 00 90 3D |  if_ae	jmp	#LR__0305
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     11 15 02 F6 | 	mov	arg02, local03
03a04     01 16 06 F6 | 	mov	arg03, #1
03a08     5C 33 B1 FD | 	call	#__system__Mid_S
03a0c     FD 26 02 F6 | 	mov	local05, result1
03a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a10     20 01 00 FF 
03a14     17 15 06 F6 | 	mov	arg02, ##@LR__4259
03a18     13 13 02 F6 | 	mov	arg01, local05
03a1c     48 12 B1 FD | 	call	#__system___string_cmp
03a20     00 FA 55 F2 | 	cmps	result1, #0 wc
03a24     18 00 90 CD |  if_b	jmp	#LR__0303
03a28     20 01 00 FF 
03a2c     19 15 06 F6 | 	mov	arg02, ##@LR__4260
03a30     13 13 02 F6 | 	mov	arg01, local05
03a34     30 12 B1 FD | 	call	#__system___string_cmp
03a38     01 FA 55 F2 | 	cmps	result1, #1 wc
03a3c     1C 00 90 CD |  if_b	jmp	#LR__0304
03a40                 | LR__0303
03a40     20 01 00 FF 
03a44     1B 15 06 F6 | 	mov	arg02, ##@LR__4261
03a48     13 13 02 F6 | 	mov	arg01, local05
03a4c     18 12 B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     00 FA 05 56 |  if_ne	mov	result1, #0
03a58     0C 00 90 5D |  if_ne	jmp	#LR__0306
03a5c                 | LR__0304
03a5c     01 22 06 F1 | 	add	local03, #1
03a60     90 FF 9F FD | 	jmp	#LR__0302
03a64                 | LR__0305
03a64                 | ' return true
03a64     01 FA 65 F6 | 	neg	result1, #1
03a68                 | LR__0306
03a68     A7 F0 03 F6 | 	mov	ptra, fp
03a6c     B2 00 A0 FD | 	call	#popregs_
03a70                 | _isdec_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' function isstring(s as string) as boolean
03a74                 | _isstring
03a74     01 4A 05 F6 | 	mov	COUNT_, #1
03a78     A8 00 A0 FD | 	call	#pushregs_
03a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03a7c     09 1F 02 F6 | 	mov	local01, arg01
03a80     01 14 06 F6 | 	mov	arg02, #1
03a84     C8 31 B1 FD | 	call	#__system__Left_S
03a88     FD 12 02 F6 | 	mov	arg01, result1
03a8c     20 01 00 FF 
03a90     1D 15 06 F6 | 	mov	arg02, ##@LR__4262
03a94     D0 11 B1 FD | 	call	#__system___string_cmp
03a98     00 FA 4D F2 | 	cmps	result1, #0 wz
03a9c     28 00 90 5D |  if_ne	jmp	#LR__0310
03aa0     0F 13 02 F6 | 	mov	arg01, local01
03aa4     01 14 06 F6 | 	mov	arg02, #1
03aa8     2C 32 B1 FD | 	call	#__system__Right_S
03aac     FD 12 02 F6 | 	mov	arg01, result1
03ab0     20 01 00 FF 
03ab4     1F 15 06 F6 | 	mov	arg02, ##@LR__4263
03ab8     AC 11 B1 FD | 	call	#__system___string_cmp
03abc     00 FA 4D F2 | 	cmps	result1, #0 wz
03ac0     01 FA 65 A6 |  if_e	neg	result1, #1
03ac4     04 00 90 AD |  if_e	jmp	#LR__0311
03ac8                 | LR__0310
03ac8     00 FA 05 F6 | 	mov	result1, #0
03acc                 | LR__0311
03acc     A7 F0 03 F6 | 	mov	ptra, fp
03ad0     B2 00 A0 FD | 	call	#popregs_
03ad4                 | _isstring_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | ' 
03ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '----- delete a line from a program
03ad8                 | ' 
03ad8                 | ' function deleteline(aline as ulong) as integer
03ad8                 | _deleteline
03ad8     03 4A 05 F6 | 	mov	COUNT_, #3
03adc     A8 00 A0 FD | 	call	#pushregs_
03ae0     2C F0 07 F1 | 	add	ptra, #44
03ae4     04 4E 05 F1 | 	add	fp, #4
03ae8     A7 12 62 FC | 	wrlong	arg01, fp
03aec     41 00 00 FF 
03af0     48 E4 05 F1 | 	add	objptr, ##33352
03af4     F2 1E 02 FB | 	rdlong	local01, objptr
03af8     0C 4E 05 F1 | 	add	fp, #12
03afc     A7 1E 62 FC | 	wrlong	local01, fp
03b00     10 4E 85 F1 | 	sub	fp, #16
03b04                 | ' 
03b04                 | ' 
03b04                 | ' searchptr=programstart
03b04                 | ' 
03b04                 | ' do
03b04     35 00 00 FF 
03b08     88 E5 85 F1 | 	sub	objptr, ##27528
03b0c                 | LR__0320
03b0c     14 4E 05 F1 | 	add	fp, #20
03b10     A7 12 02 F6 | 	mov	arg01, fp
03b14     04 4E 85 F1 | 	sub	fp, #4
03b18     A7 14 02 FB | 	rdlong	arg02, fp
03b1c     10 4E 85 F1 | 	sub	fp, #16
03b20     18 16 06 F6 | 	mov	arg03, #24
03b24     2C 06 B1 FD | 	call	#_psram_spin2_read1
03b28     10 4E 05 F1 | 	add	fp, #16
03b2c     A7 1E 02 FB | 	rdlong	local01, fp
03b30     08 4E 85 F1 | 	sub	fp, #8
03b34     A7 1E 62 FC | 	wrlong	local01, fp
03b38     20 4E 05 F1 | 	add	fp, #32
03b3c     A7 1E 02 FB | 	rdlong	local01, fp
03b40     18 4E 85 F1 | 	sub	fp, #24
03b44     A7 1E 62 FC | 	wrlong	local01, fp
03b48     04 4E 05 F1 | 	add	fp, #4
03b4c     A7 1E 02 FB | 	rdlong	local01, fp
03b50     10 4E 85 F1 | 	sub	fp, #16
03b54     A7 16 02 FB | 	rdlong	arg03, fp
03b58     04 4E 85 F1 | 	sub	fp, #4
03b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03b60     28 4E 05 C1 |  if_b	add	fp, #40
03b64     A7 20 02 CB |  if_b	rdlong	local02, fp
03b68     28 4E 85 C1 |  if_b	sub	fp, #40
03b6c     FF FF 3F CF 
03b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03b78     0B 00 00 FF 
03b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
03b80                 | ' 
03b80                 | ' 
03b80                 | ' if header(0)<>aline then return -1
03b80     14 4E 05 F1 | 	add	fp, #20
03b84     A7 1E 02 FB | 	rdlong	local01, fp
03b88     10 4E 85 F1 | 	sub	fp, #16
03b8c     A7 22 02 FB | 	rdlong	local03, fp
03b90     04 4E 85 F1 | 	sub	fp, #4
03b94     11 1F 0A F2 | 	cmp	local01, local03 wz
03b98     01 FA 65 56 |  if_ne	neg	result1, #1
03b9c     4C 03 90 5D |  if_ne	jmp	#LR__0326
03ba0     08 4E 05 F1 | 	add	fp, #8
03ba4     A7 12 02 FB | 	rdlong	arg01, fp
03ba8     08 4E 85 F1 | 	sub	fp, #8
03bac     01 14 66 F6 | 	neg	arg02, #1
03bb0     01 16 06 F6 | 	mov	arg03, #1
03bb4     00 18 06 F6 | 	mov	arg04, #0
03bb8     0B 00 00 FF 
03bbc     C0 E4 05 F1 | 	add	objptr, ##5824
03bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
03bc0     04 1A 06 F6 | 	mov	arg05, #4
03bc4     C4 06 B1 FD | 	call	#_psram_spin2_fill
03bc8     0B 00 00 FF 
03bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
03bd0                 | ' 
03bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03bd0                 | ' 
03bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03bd0     28 4E 05 F1 | 	add	fp, #40
03bd4     A7 1E 02 FB | 	rdlong	local01, fp
03bd8     28 4E 85 F1 | 	sub	fp, #40
03bdc     FF FF 3F FF 
03be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03be4     24 4E 05 A1 |  if_e	add	fp, #36
03be8     A7 22 02 AB |  if_e	rdlong	local03, fp
03bec     24 4E 85 A1 |  if_e	sub	fp, #36
03bf0     FF FF 7F AF 
03bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03bf8     90 00 90 5D |  if_ne	jmp	#LR__0321
03bfc     41 00 00 FF 
03c00     48 E4 05 F1 | 	add	objptr, ##33352
03c04     F2 00 68 FC | 	wrlong	#0, objptr
03c08     07 00 00 FF 
03c0c     28 E4 85 F1 | 	sub	objptr, ##3624
03c10     F2 00 68 FC | 	wrlong	#0, objptr
03c14     07 00 00 FF 
03c18     2C E4 05 F1 | 	add	objptr, ##3628
03c1c     F2 00 68 FC | 	wrlong	#0, objptr
03c20     04 E4 05 F1 | 	add	objptr, #4
03c24     FF FF FF FF 
03c28     F2 FE 6B FC | 	wrlong	##-1, objptr
03c2c     00 12 06 F6 | 	mov	arg01, #0
03c30     10 E4 85 F1 | 	sub	objptr, #16
03c34     F2 00 68 FC | 	wrlong	#0, objptr
03c38     01 14 66 F6 | 	neg	arg02, #1
03c3c     01 16 06 F6 | 	mov	arg03, #1
03c40     00 18 06 F6 | 	mov	arg04, #0
03c44     35 00 00 FF 
03c48     80 E5 85 F1 | 	sub	objptr, ##27520
03c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c4c     04 1A 06 F6 | 	mov	arg05, #4
03c50     38 06 B1 FD | 	call	#_psram_spin2_fill
03c54     10 12 06 F6 | 	mov	arg01, #16
03c58     01 14 66 F6 | 	neg	arg02, #1
03c5c     01 16 06 F6 | 	mov	arg03, #1
03c60     00 18 06 F6 | 	mov	arg04, #0
03c64                 | '     return fill(addr, pattern, count, listPtr, 4)
03c64     04 1A 06 F6 | 	mov	arg05, #4
03c68     20 06 B1 FD | 	call	#_psram_spin2_fill
03c6c     14 12 06 F6 | 	mov	arg01, #20
03c70     1E 14 CE F9 | 	bmask	arg02, #30
03c74     01 16 06 F6 | 	mov	arg03, #1
03c78     00 18 06 F6 | 	mov	arg04, #0
03c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c7c     04 1A 06 F6 | 	mov	arg05, #4
03c80     08 06 B1 FD | 	call	#_psram_spin2_fill
03c84     0B 00 00 FF 
03c88     C0 E4 85 F1 | 	sub	objptr, ##5824
03c8c                 | LR__0321
03c8c                 | ' 
03c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03c8c     28 4E 05 F1 | 	add	fp, #40
03c90     A7 1E 02 FB | 	rdlong	local01, fp
03c94     28 4E 85 F1 | 	sub	fp, #40
03c98     FF FF 3F FF 
03c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ca0     88 00 90 5D |  if_ne	jmp	#LR__0322
03ca4     24 4E 05 F1 | 	add	fp, #36
03ca8     A7 22 02 FB | 	rdlong	local03, fp
03cac     24 4E 85 F1 | 	sub	fp, #36
03cb0     FF FF 7F FF 
03cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03cb8     70 00 90 AD |  if_e	jmp	#LR__0322
03cbc     24 4E 05 F1 | 	add	fp, #36
03cc0     A7 12 02 FB | 	rdlong	arg01, fp
03cc4     24 4E 85 F1 | 	sub	fp, #36
03cc8     14 12 06 F1 | 	add	arg01, #20
03ccc     1E 14 CE F9 | 	bmask	arg02, #30
03cd0     01 16 06 F6 | 	mov	arg03, #1
03cd4     00 18 06 F6 | 	mov	arg04, #0
03cd8     0B 00 00 FF 
03cdc     C0 E4 05 F1 | 	add	objptr, ##5824
03ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ce0     04 1A 06 F6 | 	mov	arg05, #4
03ce4     A4 05 B1 FD | 	call	#_psram_spin2_fill
03ce8     24 4E 05 F1 | 	add	fp, #36
03cec     A7 1E 02 FB | 	rdlong	local01, fp
03cf0     35 00 00 FF 
03cf4     90 E5 05 F1 | 	add	objptr, ##27536
03cf8     F2 1E 62 FC | 	wrlong	local01, objptr
03cfc     41 00 00 FF 
03d00     50 E4 85 F1 | 	sub	objptr, ##33360
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     24 4E 85 F1 | 	sub	fp, #36
03d0c     F8 DB B0 FD | 	call	#_pslpeek
03d10     41 00 00 FF 
03d14     4C E4 05 F1 | 	add	objptr, ##33356
03d18     F2 FA 61 FC | 	wrlong	result1, objptr
03d1c     41 00 00 FF 
03d20     4C E4 85 F1 | 	sub	objptr, ##33356
03d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d24                 | '   lastline=pslpeek(header(4))
03d24                 | '   return 0
03d24     00 FA 05 F6 | 	mov	result1, #0
03d28     C0 01 90 FD | 	jmp	#LR__0326
03d2c                 | LR__0322
03d2c                 | ' 
03d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d2c     28 4E 05 F1 | 	add	fp, #40
03d30     A7 1E 02 FB | 	rdlong	local01, fp
03d34     28 4E 85 F1 | 	sub	fp, #40
03d38     FF FF 3F FF 
03d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d40     6C 00 90 AD |  if_e	jmp	#LR__0323
03d44     24 4E 05 F1 | 	add	fp, #36
03d48     A7 22 02 FB | 	rdlong	local03, fp
03d4c     24 4E 85 F1 | 	sub	fp, #36
03d50     FF FF 7F FF 
03d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d58     54 00 90 5D |  if_ne	jmp	#LR__0323
03d5c     28 4E 05 F1 | 	add	fp, #40
03d60     A7 12 02 FB | 	rdlong	arg01, fp
03d64     28 4E 85 F1 | 	sub	fp, #40
03d68     10 12 06 F1 | 	add	arg01, #16
03d6c     01 14 66 F6 | 	neg	arg02, #1
03d70     01 16 06 F6 | 	mov	arg03, #1
03d74     00 18 06 F6 | 	mov	arg04, #0
03d78     0B 00 00 FF 
03d7c     C0 E4 05 F1 | 	add	objptr, ##5824
03d80                 | '     return fill(addr, pattern, count, listPtr, 4)
03d80     04 1A 06 F6 | 	mov	arg05, #4
03d84     04 05 B1 FD | 	call	#_psram_spin2_fill
03d88     28 4E 05 F1 | 	add	fp, #40
03d8c     A7 1E 02 FB | 	rdlong	local01, fp
03d90     28 4E 85 F1 | 	sub	fp, #40
03d94     35 00 00 FF 
03d98     88 E5 05 F1 | 	add	objptr, ##27528
03d9c     F2 1E 62 FC | 	wrlong	local01, objptr
03da0     41 00 00 FF 
03da4     48 E4 85 F1 | 	sub	objptr, ##33352
03da8                 | ' '   print "deleted first line"
03da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03da8                 | '   return 0
03da8     00 FA 05 F6 | 	mov	result1, #0
03dac     3C 01 90 FD | 	jmp	#LR__0326
03db0                 | LR__0323
03db0                 | ' 
03db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03db0     28 4E 05 F1 | 	add	fp, #40
03db4     A7 1E 02 FB | 	rdlong	local01, fp
03db8     28 4E 85 F1 | 	sub	fp, #40
03dbc     FF FF 3F FF 
03dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03dc4     24 4E 05 51 |  if_ne	add	fp, #36
03dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
03dcc     24 4E 85 51 |  if_ne	sub	fp, #36
03dd0     FF FF 7F 5F 
03dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03dd8     68 00 90 AD |  if_e	jmp	#LR__0324
03ddc     28 4E 05 F1 | 	add	fp, #40
03de0     A7 12 02 FB | 	rdlong	arg01, fp
03de4     10 12 06 F1 | 	add	arg01, #16
03de8     04 4E 85 F1 | 	sub	fp, #4
03dec     A7 14 02 FB | 	rdlong	arg02, fp
03df0     24 4E 85 F1 | 	sub	fp, #36
03df4     01 16 06 F6 | 	mov	arg03, #1
03df8     00 18 06 F6 | 	mov	arg04, #0
03dfc     0B 00 00 FF 
03e00     C0 E4 05 F1 | 	add	objptr, ##5824
03e04                 | '     return fill(addr, pattern, count, listPtr, 4)
03e04     04 1A 06 F6 | 	mov	arg05, #4
03e08     80 04 B1 FD | 	call	#_psram_spin2_fill
03e0c     24 4E 05 F1 | 	add	fp, #36
03e10     A7 12 02 FB | 	rdlong	arg01, fp
03e14     14 12 06 F1 | 	add	arg01, #20
03e18     04 4E 05 F1 | 	add	fp, #4
03e1c     A7 14 02 FB | 	rdlong	arg02, fp
03e20     28 4E 85 F1 | 	sub	fp, #40
03e24     01 16 06 F6 | 	mov	arg03, #1
03e28     00 18 06 F6 | 	mov	arg04, #0
03e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e2c     04 1A 06 F6 | 	mov	arg05, #4
03e30     58 04 B1 FD | 	call	#_psram_spin2_fill
03e34     0B 00 00 FF 
03e38     C0 E4 85 F1 | 	sub	objptr, ##5824
03e3c                 | '    pslpoke(header(5)+16,header(4))  
03e3c                 | '    pslpoke(header(4)+20, header(5))
03e3c                 | '    return 0
03e3c     00 FA 05 F6 | 	mov	result1, #0
03e40     A8 00 90 FD | 	jmp	#LR__0326
03e44                 | LR__0324
03e44     10 4E 05 F1 | 	add	fp, #16
03e48     A7 1E 02 FB | 	rdlong	local01, fp
03e4c     08 4E 85 F1 | 	sub	fp, #8
03e50     A7 1E 62 FC | 	wrlong	local01, fp
03e54     41 00 00 FF 
03e58     48 E4 05 F1 | 	add	objptr, ##33352
03e5c     F2 1E 02 FB | 	rdlong	local01, objptr
03e60     08 4E 05 F1 | 	add	fp, #8
03e64     A7 1E 62 FC | 	wrlong	local01, fp
03e68     10 4E 85 F1 | 	sub	fp, #16
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03e6c                 | ' 
03e6c                 | ' lineptr2=searchptr
03e6c                 | ' searchptr=programstart
03e6c                 | ' 
03e6c                 | ' do
03e6c     35 00 00 FF 
03e70     88 E5 85 F1 | 	sub	objptr, ##27528
03e74                 | LR__0325
03e74     14 4E 05 F1 | 	add	fp, #20
03e78     A7 12 02 F6 | 	mov	arg01, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     A7 14 02 FB | 	rdlong	arg02, fp
03e84     10 4E 85 F1 | 	sub	fp, #16
03e88     18 16 06 F6 | 	mov	arg03, #24
03e8c     C4 02 B1 FD | 	call	#_psram_spin2_read1
03e90     10 4E 05 F1 | 	add	fp, #16
03e94     A7 1E 02 FB | 	rdlong	local01, fp
03e98     08 4E 85 F1 | 	sub	fp, #8
03e9c     A7 1E 62 FC | 	wrlong	local01, fp
03ea0     20 4E 05 F1 | 	add	fp, #32
03ea4     A7 1E 02 FB | 	rdlong	local01, fp
03ea8     18 4E 85 F1 | 	sub	fp, #24
03eac     A7 1E 62 FC | 	wrlong	local01, fp
03eb0     04 4E 05 F1 | 	add	fp, #4
03eb4     A7 1E 02 FB | 	rdlong	local01, fp
03eb8     10 4E 85 F1 | 	sub	fp, #16
03ebc     A7 22 02 FB | 	rdlong	local03, fp
03ec0     04 4E 85 F1 | 	sub	fp, #4
03ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
03ec8     28 4E 05 C1 |  if_b	add	fp, #40
03ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
03ed0     28 4E 85 C1 |  if_b	sub	fp, #40
03ed4     FF FF 3F CF 
03ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03ee0     0B 00 00 FF 
03ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
03ee8     00 FA 05 F6 | 	mov	result1, #0
03eec                 | LR__0326
03eec     A7 F0 03 F6 | 	mov	ptra, fp
03ef0     B2 00 A0 FD | 	call	#popregs_
03ef4                 | _deleteline_ret
03ef4     2D 00 64 FD | 	ret
03ef8                 | 
03ef8                 | ' 
03ef8                 | ' sub save_line
03ef8                 | _save_line
03ef8     03 4A 05 F6 | 	mov	COUNT_, #3
03efc     A8 00 A0 FD | 	call	#pushregs_
03f00     41 00 00 FF 
03f04     40 E4 05 F1 | 	add	objptr, ##33344
03f08     F2 16 02 FB | 	rdlong	arg03, objptr
03f0c     01 16 06 F1 | 	add	arg03, #1
03f10     05 00 00 FF 
03f14     18 E4 85 F1 | 	sub	objptr, ##2584
03f18     F2 14 02 FB | 	rdlong	arg02, objptr
03f1c     0B 15 02 FD | 	qmul	arg02, arg03
03f20     0E 00 00 FF 
03f24     44 E4 85 F1 | 	sub	objptr, ##7236
03f28     F2 12 02 FB | 	rdlong	arg01, objptr
03f2c     2D 00 00 FF 
03f30     E4 E5 85 F1 | 	sub	objptr, ##23524
03f34     09 1F 02 F6 | 	mov	local01, arg01
03f38     18 20 62 FD | 	getqx	local02
03f3c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03f40                 | LR__0330
03f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
03f44     01 1E 06 51 |  if_ne	add	local01, #1
03f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03f4c                 | LR__0331
03f4c     09 1F 82 F1 | 	sub	local01, arg01
03f50     03 1E CE F7 | 	test	local01, #3 wz
03f54     02 1E 46 50 |  if_ne	shr	local01, #2
03f58     01 1E 06 51 |  if_ne	add	local01, #1
03f5c     02 1E 66 50 |  if_ne	shl	local01, #2
03f60     10 23 02 F6 | 	mov	local03, local02
03f64     0F 23 02 F1 | 	add	local03, local01
03f68     3A 00 00 FF 
03f6c     20 E4 05 F1 | 	add	objptr, ##29728
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     10 17 02 F1 | 	add	arg03, local02
03f78     04 00 00 FF 
03f7c     28 E4 05 F1 | 	add	objptr, ##2088
03f80     F2 16 62 FC | 	wrlong	arg03, objptr
03f84     04 E4 05 F1 | 	add	objptr, #4
03f88     F2 1E 62 FC | 	wrlong	local01, objptr
03f8c     0C E4 85 F1 | 	sub	objptr, #12
03f90     F2 12 02 F6 | 	mov	arg01, objptr
03f94     04 00 00 FF 
03f98     20 E4 85 F1 | 	sub	objptr, ##2080
03f9c     F2 14 02 FB | 	rdlong	arg02, objptr
03fa0     10 17 02 F6 | 	mov	arg03, local02
03fa4     2E 00 00 FF 
03fa8     60 E5 85 F1 | 	sub	objptr, ##23904
03fac     40 02 B1 FD | 	call	#_psram_spin2_write
03fb0     22 00 00 FF 
03fb4     24 E5 05 F1 | 	add	objptr, ##17700
03fb8     F2 12 02 FB | 	rdlong	arg01, objptr
03fbc     0C 00 00 FF 
03fc0     3C E4 05 F1 | 	add	objptr, ##6204
03fc4     F2 14 02 FB | 	rdlong	arg02, objptr
03fc8     10 15 02 F1 | 	add	arg02, local02
03fcc     0F 17 02 F6 | 	mov	arg03, local01
03fd0     2E 00 00 FF 
03fd4     60 E5 85 F1 | 	sub	objptr, ##23904
03fd8     14 02 B1 FD | 	call	#_psram_spin2_write
03fdc     2E 00 00 FF 
03fe0     60 E5 05 F1 | 	add	objptr, ##23904
03fe4     F2 1E 02 FB | 	rdlong	local01, objptr
03fe8     11 1F 02 F1 | 	add	local01, local03
03fec     F2 1E 62 FC | 	wrlong	local01, objptr
03ff0     3A 00 00 FF 
03ff4     20 E4 85 F1 | 	sub	objptr, ##29728
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _save_line_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' function insertline(aline as ulong) as integer
04004                 | _insertline
04004     02 4A 05 F6 | 	mov	COUNT_, #2
04008     A8 00 A0 FD | 	call	#pushregs_
0400c     28 F0 07 F1 | 	add	ptra, #40
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 12 62 FC | 	wrlong	arg01, fp
04018     41 00 00 FF 
0401c     48 E4 05 F1 | 	add	objptr, ##33352
04020     F2 1E 02 FB | 	rdlong	local01, objptr
04024     04 4E 05 F1 | 	add	fp, #4
04028     A7 1E 62 FC | 	wrlong	local01, fp
0402c     08 4E 85 F1 | 	sub	fp, #8
04030                 | ' 
04030                 | ' do
04030     35 00 00 FF 
04034     88 E5 85 F1 | 	sub	objptr, ##27528
04038                 | LR__0340
04038     10 4E 05 F1 | 	add	fp, #16
0403c     A7 12 02 F6 | 	mov	arg01, fp
04040     08 4E 85 F1 | 	sub	fp, #8
04044     A7 14 02 FB | 	rdlong	arg02, fp
04048     08 4E 85 F1 | 	sub	fp, #8
0404c     18 16 06 F6 | 	mov	arg03, #24
04050     00 01 B1 FD | 	call	#_psram_spin2_read1
04054     08 4E 05 F1 | 	add	fp, #8
04058     A7 1E 02 FB | 	rdlong	local01, fp
0405c     04 4E 05 F1 | 	add	fp, #4
04060     A7 1E 62 FC | 	wrlong	local01, fp
04064     18 4E 05 F1 | 	add	fp, #24
04068     A7 1E 02 FB | 	rdlong	local01, fp
0406c     1C 4E 85 F1 | 	sub	fp, #28
04070     A7 1E 62 FC | 	wrlong	local01, fp
04074     08 4E 05 F1 | 	add	fp, #8
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     0C 4E 85 F1 | 	sub	fp, #12
04080     A7 16 02 FB | 	rdlong	arg03, fp
04084     04 4E 85 F1 | 	sub	fp, #4
04088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0408c     24 4E 05 C1 |  if_b	add	fp, #36
04090     A7 20 02 CB |  if_b	rdlong	local02, fp
04094     24 4E 85 C1 |  if_b	sub	fp, #36
04098     FF FF 3F CF 
0409c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
040a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
040a4     0B 00 00 FF 
040a8     C0 E4 85 F1 | 	sub	objptr, ##5824
040ac                 | ' 
040ac                 | ' if header(0)=aline then return -1 ' delete it first
040ac     10 4E 05 F1 | 	add	fp, #16
040b0     A7 1E 02 FB | 	rdlong	local01, fp
040b4     0C 4E 85 F1 | 	sub	fp, #12
040b8     A7 20 02 FB | 	rdlong	local02, fp
040bc     04 4E 85 F1 | 	sub	fp, #4
040c0     10 1F 0A F2 | 	cmp	local01, local02 wz
040c4     01 FA 65 A6 |  if_e	neg	result1, #1
040c8     74 01 90 AD |  if_e	jmp	#LR__0343
040cc                 | ' if header(0)<aline then return -2 ' end of program reached
040cc     10 4E 05 F1 | 	add	fp, #16
040d0     A7 1E 02 FB | 	rdlong	local01, fp
040d4     0C 4E 85 F1 | 	sub	fp, #12
040d8     A7 16 02 FB | 	rdlong	arg03, fp
040dc     04 4E 85 F1 | 	sub	fp, #4
040e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040e4     02 FA 65 C6 |  if_b	neg	result1, #2
040e8     54 01 90 CD |  if_b	jmp	#LR__0343
040ec                 | ' 
040ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
040ec     20 4E 05 F1 | 	add	fp, #32
040f0     A7 1E 02 FB | 	rdlong	local01, fp
040f4     20 4E 85 F1 | 	sub	fp, #32
040f8     FF FF 7F FF 
040fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04100     84 00 90 5D |  if_ne	jmp	#LR__0341
04104     3A 00 00 FF 
04108     20 E4 05 F1 | 	add	objptr, ##29728
0410c     F2 1E 02 FB | 	rdlong	local01, objptr
04110     07 00 00 FF 
04114     28 E4 05 F1 | 	add	objptr, ##3624
04118     F2 1E 62 FC | 	wrlong	local01, objptr
0411c     0C 4E 05 F1 | 	add	fp, #12
04120     A7 12 02 FB | 	rdlong	arg01, fp
04124     0C 4E 85 F1 | 	sub	fp, #12
04128     10 12 06 F1 | 	add	arg01, #16
0412c     07 00 00 FF 
04130     28 E4 85 F1 | 	sub	objptr, ##3624
04134     F2 14 02 FB | 	rdlong	arg02, objptr
04138     01 16 06 F6 | 	mov	arg03, #1
0413c     00 18 06 F6 | 	mov	arg04, #0
04140     2E 00 00 FF 
04144     60 E5 85 F1 | 	sub	objptr, ##23904
04148                 | '     return fill(addr, pattern, count, listPtr, 4)
04148     04 1A 06 F6 | 	mov	arg05, #4
0414c     3C 01 B1 FD | 	call	#_psram_spin2_fill
04150     32 00 00 FF 
04154     90 E5 05 F1 | 	add	objptr, ##26000
04158     FF FF FF FF 
0415c     F2 FE 6B FC | 	wrlong	##-1, objptr
04160     0C 4E 05 F1 | 	add	fp, #12
04164     A7 1E 02 FB | 	rdlong	local01, fp
04168     0C 4E 85 F1 | 	sub	fp, #12
0416c     04 E4 05 F1 | 	add	objptr, #4
04170     F2 1E 62 FC | 	wrlong	local01, objptr
04174     3E 00 00 FF 
04178     54 E4 85 F1 | 	sub	objptr, ##31828
0417c     78 FD BF FD | 	call	#_save_line
04180                 | '   programstart=programptr
04180                 | '   pslpoke(lineptr2+16,programptr)
04180                 | '   ucompiledline(4)=$FFFF_FFFF
04180                 | '   ucompiledline(5)=lineptr2
04180                 | '   save_line
04180                 | '   return 0
04180     00 FA 05 F6 | 	mov	result1, #0
04184     B8 00 90 FD | 	jmp	#LR__0343
04188                 | LR__0341
04188                 | ' 
04188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04188     20 4E 05 F1 | 	add	fp, #32
0418c     A7 1E 02 FB | 	rdlong	local01, fp
04190     20 4E 85 F1 | 	sub	fp, #32
04194     FF FF 7F FF 
04198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0419c     9C 00 90 AD |  if_e	jmp	#LR__0342
041a0     20 4E 05 F1 | 	add	fp, #32
041a4     A7 1E 02 FB | 	rdlong	local01, fp
041a8     3E 00 00 FF 
041ac     50 E4 05 F1 | 	add	objptr, ##31824
041b0     F2 1E 62 FC | 	wrlong	local01, objptr
041b4     14 4E 85 F1 | 	sub	fp, #20
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 E4 05 F1 | 	add	objptr, #4
041c0     F2 1E 62 FC | 	wrlong	local01, objptr
041c4     A7 12 02 FB | 	rdlong	arg01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     10 12 06 F1 | 	add	arg01, #16
041d0     04 00 00 FF 
041d4     34 E4 85 F1 | 	sub	objptr, ##2100
041d8     F2 14 02 FB | 	rdlong	arg02, objptr
041dc     01 16 06 F6 | 	mov	arg03, #1
041e0     00 18 06 F6 | 	mov	arg04, #0
041e4     2E 00 00 FF 
041e8     60 E5 85 F1 | 	sub	objptr, ##23904
041ec                 | '     return fill(addr, pattern, count, listPtr, 4)
041ec     04 1A 06 F6 | 	mov	arg05, #4
041f0     98 00 B1 FD | 	call	#_psram_spin2_fill
041f4     20 4E 05 F1 | 	add	fp, #32
041f8     A7 12 02 FB | 	rdlong	arg01, fp
041fc     20 4E 85 F1 | 	sub	fp, #32
04200     14 12 06 F1 | 	add	arg01, #20
04204     2E 00 00 FF 
04208     60 E5 05 F1 | 	add	objptr, ##23904
0420c     F2 14 02 FB | 	rdlong	arg02, objptr
04210     01 16 06 F6 | 	mov	arg03, #1
04214     00 18 06 F6 | 	mov	arg04, #0
04218     2E 00 00 FF 
0421c     60 E5 85 F1 | 	sub	objptr, ##23904
04220                 | '     return fill(addr, pattern, count, listPtr, 4)
04220     04 1A 06 F6 | 	mov	arg05, #4
04224     64 00 B1 FD | 	call	#_psram_spin2_fill
04228     0B 00 00 FF 
0422c     C0 E4 85 F1 | 	sub	objptr, ##5824
04230     C4 FC BF FD | 	call	#_save_line
04234                 | '   ucompiledline(4)=header(4)
04234                 | '   ucompiledline(5)=lineptr2
04234                 | '   pslpoke(lineptr2+16,programptr)
04234                 | '   pslpoke(header(4)+20,programptr)
04234                 | '   save_line
04234                 | '   return 0
04234     00 FA 05 F6 | 	mov	result1, #0
04238     04 00 90 FD | 	jmp	#LR__0343
0423c                 | LR__0342
0423c     00 FA 05 F6 | 	mov	result1, #0
04240                 | LR__0343
04240     A7 F0 03 F6 | 	mov	ptra, fp
04244     B2 00 A0 FD | 	call	#popregs_
04248                 | _insertline_ret
04248     2D 00 64 FD | 	ret
0424c                 | 
0424c                 | ' 
0424c                 | ' sub add_line_at_end(aline) 
0424c                 | _add_line_at_end
0424c     41 00 00 FF 
04250     4C E4 05 F1 | 	add	objptr, ##33356
04254     F2 12 62 FC | 	wrlong	arg01, objptr
04258     04 E4 05 F1 | 	add	objptr, #4
0425c     F2 14 02 FB | 	rdlong	arg02, objptr
04260     03 00 00 FF 
04264     00 E4 85 F1 | 	sub	objptr, ##1536
04268     F2 14 62 FC | 	wrlong	arg02, objptr
0426c     03 00 00 FF 
04270     00 E4 05 F1 | 	add	objptr, ##1536
04274     F2 12 02 FB | 	rdlong	arg01, objptr
04278     14 12 06 F1 | 	add	arg01, #20
0427c     07 00 00 FF 
04280     30 E4 85 F1 | 	sub	objptr, ##3632
04284     F2 14 02 FB | 	rdlong	arg02, objptr
04288     01 16 06 F6 | 	mov	arg03, #1
0428c     00 18 06 F6 | 	mov	arg04, #0
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298                 | '     return fill(addr, pattern, count, listPtr, 4)
04298     04 1A 06 F6 | 	mov	arg05, #4
0429c     EC FF B0 FD | 	call	#_psram_spin2_fill
042a0     2E 00 00 FF 
042a4     60 E5 05 F1 | 	add	objptr, ##23904
042a8     F2 14 02 FB | 	rdlong	arg02, objptr
042ac     07 00 00 FF 
042b0     30 E4 05 F1 | 	add	objptr, ##3632
042b4     F2 14 62 FC | 	wrlong	arg02, objptr
042b8     02 00 00 FF 
042bc     FC E5 85 F1 | 	sub	objptr, ##1532
042c0     FF FF BF FF 
042c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
042c8                 | ' 
042c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
042c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
042c8     04 00 00 FF 
042cc     34 E4 85 F1 | 	sub	objptr, ##2100
042d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
042d4     3A 00 00 FF 
042d8     20 E4 85 F1 | 	sub	objptr, ##29728
042dc     3E 00 00 AF 
042e0     50 E4 05 A1 |  if_e	add	objptr, ##31824
042e4     FF FF FF AF 
042e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
042ec     3E 00 00 AF 
042f0     50 E4 85 A1 |  if_e	sub	objptr, ##31824
042f4     00 FC BF FD | 	call	#_save_line
042f8     3A 00 00 FF 
042fc     20 E4 05 F1 | 	add	objptr, ##29728
04300     F2 12 02 FB | 	rdlong	arg01, objptr
04304     01 14 66 F6 | 	neg	arg02, #1
04308     01 16 06 F6 | 	mov	arg03, #1
0430c     00 18 06 F6 | 	mov	arg04, #0
04310     2E 00 00 FF 
04314     60 E5 85 F1 | 	sub	objptr, ##23904
04318                 | '     return fill(addr, pattern, count, listPtr, 4)
04318     04 1A 06 F6 | 	mov	arg05, #4
0431c     6C FF B0 FD | 	call	#_psram_spin2_fill
04320     0B 00 00 FF 
04324     C0 E4 85 F1 | 	sub	objptr, ##5824
04328                 | _add_line_at_end_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | ' 
0432c                 | ' function compile_immediate(linetype as ulong) as integer
0432c                 | _compile_immediate
0432c     09 4A 05 F6 | 	mov	COUNT_, #9
04330     A8 00 A0 FD | 	call	#pushregs_
04334                 | _compile_immediate_enter
04334     09 25 0A F6 | 	mov	local04, arg01 wz
04338     00 26 06 F6 | 	mov	local05, #0
0433c     00 28 06 F6 | 	mov	local06, #0
04340                 | ' 
04340                 | ' ' linetype=cont+1, linetype=0 immediate
04340                 | ' '  : 1: this is the first part of the line that will continue
04340                 | ' ' 2 - this is the continuation of the line
04340                 | ' ' 3 - this is the last continued line
04340                 | ' ' 4 - this is the one and only part
04340                 | ' 
04340                 | ' err=0
04340                 | ' cmd=0
04340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04340     2C 00 90 5D |  if_ne	jmp	#LR__0350
04344     2B 00 00 FF 
04348     D4 E5 05 F1 | 	add	objptr, ##22484
0434c     F2 28 02 FB | 	rdlong	local06, objptr
04350     02 00 00 FF 
04354     34 E4 05 F1 | 	add	objptr, ##1076
04358     F2 02 68 FC | 	wrlong	#1, objptr
0435c     13 00 00 FF 
04360     38 E4 05 F1 | 	add	objptr, ##9784
04364     F2 00 68 FC | 	wrlong	#0, objptr
04368     41 00 00 FF 
0436c     40 E4 85 F1 | 	sub	objptr, ##33344
04370                 | LR__0350
04370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04370     02 24 0E F2 | 	cmp	local04, #2 wz
04374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04378     2B 00 00 AF 
0437c     D4 E5 05 A1 |  if_e	add	objptr, ##22484
04380     F2 28 02 AB |  if_e	rdlong	local06, objptr
04384     02 00 00 AF 
04388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0438c     F2 02 68 AC |  if_e	wrlong	#1, objptr
04390     2E 00 00 AF 
04394     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04398     04 24 0E F2 | 	cmp	local04, #4 wz
0439c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
043a0     2C 00 90 5D |  if_ne	jmp	#LR__0351
043a4     2B 00 00 FF 
043a8     DC E5 05 F1 | 	add	objptr, ##22492
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 00 00 FF 
043b4     2C E4 05 F1 | 	add	objptr, ##1068
043b8     F2 04 68 FC | 	wrlong	#2, objptr
043bc     13 00 00 FF 
043c0     38 E4 05 F1 | 	add	objptr, ##9784
043c4     F2 04 68 FC | 	wrlong	#2, objptr
043c8     41 00 00 FF 
043cc     40 E4 85 F1 | 	sub	objptr, ##33344
043d0                 | LR__0351
043d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
043d0     05 24 0E F2 | 	cmp	local04, #5 wz
043d4     40 00 90 5D |  if_ne	jmp	#LR__0352
043d8     2E 00 00 FF 
043dc     08 E4 05 F1 | 	add	objptr, ##23560
043e0     F2 2A 02 FB | 	rdlong	local07, objptr
043e4     15 29 02 F6 | 	mov	local06, local07
043e8     03 28 66 F0 | 	shl	local06, #3
043ec     02 00 00 FF 
043f0     38 E4 85 F1 | 	sub	objptr, ##1080
043f4     F2 28 02 F1 | 	add	local06, objptr
043f8     04 28 06 F1 | 	add	local06, #4
043fc     14 29 02 FB | 	rdlong	local06, local06
04400     01 2A 06 F1 | 	add	local07, #1
04404     02 00 00 FF 
04408     38 E4 05 F1 | 	add	objptr, ##1080
0440c     F2 2A 62 FC | 	wrlong	local07, objptr
04410     2E 00 00 FF 
04414     08 E4 85 F1 | 	sub	objptr, ##23560
04418                 | LR__0352
04418     00 2C 06 F6 | 	mov	local08, #0
0441c                 | ' vars=0
0441c                 | ' 'print  "In compile_immediate cmd=:", cmd
0441c                 | ' 451 select case cmd
0441c     40 28 0E F2 | 	cmp	local06, #64 wz
04420     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04424     78 02 90 AD |  if_e	jmp	#LR__0388
04428     4C 28 0E F2 | 	cmp	local06, #76 wz
0442c     24 01 90 AD |  if_e	jmp	#LR__0353
04430     4D 28 0E F2 | 	cmp	local06, #77 wz
04434     68 02 90 AD |  if_e	jmp	#LR__0388
04438     42 28 0E F2 | 	cmp	local06, #66 wz
0443c     20 01 90 AD |  if_e	jmp	#LR__0354
04440     43 28 0E F2 | 	cmp	local06, #67 wz
04444     24 01 90 AD |  if_e	jmp	#LR__0355
04448     45 28 0E F2 | 	cmp	local06, #69 wz
0444c     28 01 90 AD |  if_e	jmp	#LR__0356
04450     46 28 0E F2 | 	cmp	local06, #70 wz
04454     2C 01 90 AD |  if_e	jmp	#LR__0357
04458     47 28 0E F2 | 	cmp	local06, #71 wz
0445c     30 01 90 AD |  if_e	jmp	#LR__0358
04460     48 28 0E F2 | 	cmp	local06, #72 wz
04464     34 01 90 AD |  if_e	jmp	#LR__0359
04468     49 28 0E F2 | 	cmp	local06, #73 wz
0446c     38 01 90 AD |  if_e	jmp	#LR__0360
04470     44 28 0E F2 | 	cmp	local06, #68 wz
04474     3C 01 90 AD |  if_e	jmp	#LR__0361
04478     4E 28 0E F2 | 	cmp	local06, #78 wz
0447c     40 01 90 AD |  if_e	jmp	#LR__0362
04480     50 28 0E F2 | 	cmp	local06, #80 wz
04484     54 01 90 AD |  if_e	jmp	#LR__0364
04488     51 28 0E F2 | 	cmp	local06, #81 wz
0448c     54 01 90 AD |  if_e	jmp	#LR__0365
04490     52 28 0E F2 | 	cmp	local06, #82 wz
04494     54 01 90 AD |  if_e	jmp	#LR__0366
04498     59 28 0E F2 | 	cmp	local06, #89 wz
0449c     54 01 90 AD |  if_e	jmp	#LR__0367
044a0     55 28 0E F2 | 	cmp	local06, #85 wz
044a4     54 01 90 AD |  if_e	jmp	#LR__0368
044a8     56 28 0E F2 | 	cmp	local06, #86 wz
044ac     54 01 90 AD |  if_e	jmp	#LR__0369
044b0     57 28 0E F2 | 	cmp	local06, #87 wz
044b4     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
044b8     E4 01 90 AD |  if_e	jmp	#LR__0388
044bc     58 28 0E F2 | 	cmp	local06, #88 wz
044c0     48 01 90 AD |  if_e	jmp	#LR__0370
044c4     4A 28 0E F2 | 	cmp	local06, #74 wz
044c8     48 01 90 AD |  if_e	jmp	#LR__0371
044cc     4B 28 0E F2 | 	cmp	local06, #75 wz
044d0     48 01 90 AD |  if_e	jmp	#LR__0372
044d4     5A 28 0E F2 | 	cmp	local06, #90 wz
044d8     48 01 90 AD |  if_e	jmp	#LR__0373
044dc     5C 28 0E F2 | 	cmp	local06, #92 wz
044e0     48 01 90 AD |  if_e	jmp	#LR__0374
044e4     5D 28 0E F2 | 	cmp	local06, #93 wz
044e8     B4 01 90 AD |  if_e	jmp	#LR__0388
044ec     5E 28 0E F2 | 	cmp	local06, #94 wz
044f0     44 01 90 AD |  if_e	jmp	#LR__0375
044f4     5F 28 0E F2 | 	cmp	local06, #95 wz
044f8     44 01 90 AD |  if_e	jmp	#LR__0376
044fc     60 28 0E F2 | 	cmp	local06, #96 wz
04500     44 01 90 AD |  if_e	jmp	#LR__0377
04504     61 28 0E F2 | 	cmp	local06, #97 wz
04508     44 01 90 AD |  if_e	jmp	#LR__0378
0450c     63 28 0E F2 | 	cmp	local06, #99 wz
04510     44 01 90 AD |  if_e	jmp	#LR__0379
04514     68 28 0E F2 | 	cmp	local06, #104 wz
04518     44 01 90 AD |  if_e	jmp	#LR__0380
0451c     69 28 0E F2 | 	cmp	local06, #105 wz
04520     44 01 90 AD |  if_e	jmp	#LR__0381
04524     6D 28 0E F2 | 	cmp	local06, #109 wz
04528     44 01 90 AD |  if_e	jmp	#LR__0382
0452c     6C 28 0E F2 | 	cmp	local06, #108 wz
04530     44 01 90 AD |  if_e	jmp	#LR__0383
04534     71 28 0E F2 | 	cmp	local06, #113 wz
04538     44 01 90 AD |  if_e	jmp	#LR__0384
0453c     72 28 0E F2 | 	cmp	local06, #114 wz
04540     44 01 90 AD |  if_e	jmp	#LR__0385
04544     01 00 00 FF 
04548     04 28 0E F2 | 	cmp	local06, ##516 wz
0454c     40 01 90 AD |  if_e	jmp	#LR__0386
04550     44 01 90 FD | 	jmp	#LR__0387
04554                 | LR__0353
04554     48 0F B0 FD | 	call	#_compile_fun_varp
04558     FD 2C 02 F6 | 	mov	local08, result1
0455c     40 01 90 FD | 	jmp	#LR__0388
04560                 | LR__0354
04560     5C 0B B0 FD | 	call	#_compile_fun_2p
04564     FD 26 02 F6 | 	mov	local05, result1
04568     34 01 90 FD | 	jmp	#LR__0388
0456c                 | LR__0355
0456c     50 0B B0 FD | 	call	#_compile_fun_2p
04570     FD 26 02 F6 | 	mov	local05, result1
04574     28 01 90 FD | 	jmp	#LR__0388
04578                 | LR__0356
04578     B8 0B B0 FD | 	call	#_compile_fun_3p
0457c     FD 26 02 F6 | 	mov	local05, result1
04580     1C 01 90 FD | 	jmp	#LR__0388
04584                 | LR__0357
04584     AC 0B B0 FD | 	call	#_compile_fun_3p
04588     FD 26 02 F6 | 	mov	local05, result1
0458c     10 01 90 FD | 	jmp	#LR__0388
04590                 | LR__0358
04590     6C 0C B0 FD | 	call	#_compile_fun_4p
04594     FD 26 02 F6 | 	mov	local05, result1
04598     04 01 90 FD | 	jmp	#LR__0388
0459c                 | LR__0359
0459c     60 0C B0 FD | 	call	#_compile_fun_4p
045a0     FD 26 02 F6 | 	mov	local05, result1
045a4     F8 00 90 FD | 	jmp	#LR__0388
045a8                 | LR__0360
045a8     38 2D B0 FD | 	call	#_expr
045ac                 | ' 
045ac                 | ' 
045ac                 | ' expr()
045ac                 | ' return 0
045ac     00 26 06 F6 | 	mov	local05, #0
045b0     EC 00 90 FD | 	jmp	#LR__0388
045b4                 | LR__0361
045b4     14 10 B0 FD | 	call	#_compile_print
045b8     FD 26 02 F6 | 	mov	local05, result1
045bc     9C 01 90 FD | 	jmp	#LR__0389
045c0                 | LR__0362
045c0     01 24 16 F2 | 	cmp	local04, #1 wc
045c4     08 00 90 CD |  if_b	jmp	#LR__0363
045c8     B8 29 B0 FD | 	call	#_compile_goto
045cc     8C 01 90 FD | 	jmp	#LR__0389
045d0                 | LR__0363
045d0     19 12 06 F6 | 	mov	arg01, #25
045d4     74 D1 B0 FD | 	call	#_printerror
045d8     80 01 90 FD | 	jmp	#LR__0389
045dc                 | LR__0364
045dc     04 2D B0 FD | 	call	#_expr
045e0                 | ' 
045e0                 | ' 
045e0                 | ' expr()
045e0                 | ' return 0
045e0     BC 00 90 FD | 	jmp	#LR__0388
045e4                 | LR__0365
045e4     FC 2C B0 FD | 	call	#_expr
045e8                 | ' 
045e8                 | ' 
045e8                 | ' expr()
045e8                 | ' return 0
045e8     B4 00 90 FD | 	jmp	#LR__0388
045ec                 | LR__0366
045ec     F4 2C B0 FD | 	call	#_expr
045f0                 | ' 
045f0                 | ' 
045f0                 | ' expr()
045f0                 | ' return 0
045f0     AC 00 90 FD | 	jmp	#LR__0388
045f4                 | LR__0367
045f4     EC 2C B0 FD | 	call	#_expr
045f8                 | ' 
045f8                 | ' 
045f8                 | ' expr()
045f8                 | ' return 0
045f8     A4 00 90 FD | 	jmp	#LR__0388
045fc                 | LR__0368
045fc     4C 0F B0 FD | 	call	#_compile_int_fun_2p
04600     9C 00 90 FD | 	jmp	#LR__0388
04604                 | LR__0369
04604     D0 09 B0 FD | 	call	#_compile_converttoint
04608                 | ' return err
04608     94 00 90 FD | 	jmp	#LR__0388
0460c                 | LR__0370
0460c     94 16 B0 FD | 	call	#_compile_if
04610     48 01 90 FD | 	jmp	#LR__0389
04614                 | LR__0371
04614     D0 1F B0 FD | 	call	#_compile_for
04618     40 01 90 FD | 	jmp	#LR__0389
0461c                 | LR__0372
0461c     B4 27 B0 FD | 	call	#_compile_next
04620     38 01 90 FD | 	jmp	#LR__0389
04624                 | LR__0373
04624     BC 17 B0 FD | 	call	#_compile_else
04628     30 01 90 FD | 	jmp	#LR__0389
0462c                 | LR__0374
0462c     90 0A B0 FD | 	call	#_compile_fun_2p
04630     FD 26 02 F6 | 	mov	local05, result1
04634     68 00 90 FD | 	jmp	#LR__0388
04638                 | LR__0375
04638     A8 2C B0 FD | 	call	#_expr
0463c                 | ' 
0463c                 | ' 
0463c                 | ' expr()
0463c                 | ' return 0
0463c     60 00 90 FD | 	jmp	#LR__0388
04640                 | LR__0376
04640     A0 2C B0 FD | 	call	#_expr
04644                 | ' 
04644                 | ' 
04644                 | ' expr()
04644                 | ' return 0
04644     58 00 90 FD | 	jmp	#LR__0388
04648                 | LR__0377
04648     98 2C B0 FD | 	call	#_expr
0464c                 | ' 
0464c                 | ' 
0464c                 | ' expr()
0464c                 | ' return 0
0464c     50 00 90 FD | 	jmp	#LR__0388
04650                 | LR__0378
04650     90 2C B0 FD | 	call	#_expr
04654                 | ' 
04654                 | ' 
04654                 | ' expr()
04654                 | ' return 0
04654     48 00 90 FD | 	jmp	#LR__0388
04658                 | LR__0379
04658     88 2C B0 FD | 	call	#_expr
0465c                 | ' 
0465c                 | ' 
0465c                 | ' expr()
0465c                 | ' return 0
0465c     40 00 90 FD | 	jmp	#LR__0388
04660                 | LR__0380
04660     80 2C B0 FD | 	call	#_expr
04664                 | ' 
04664                 | ' 
04664                 | ' expr()
04664                 | ' return 0
04664     38 00 90 FD | 	jmp	#LR__0388
04668                 | LR__0381
04668     78 2C B0 FD | 	call	#_expr
0466c                 | ' 
0466c                 | ' 
0466c                 | ' expr()
0466c                 | ' return 0
0466c     30 00 90 FD | 	jmp	#LR__0388
04670                 | LR__0382
04670     C0 0A B0 FD | 	call	#_compile_fun_3p
04674     28 00 90 FD | 	jmp	#LR__0388
04678                 | LR__0383
04678     A8 0C B0 FD | 	call	#_compile_fun_5p
0467c     20 00 90 FD | 	jmp	#LR__0388
04680                 | LR__0384
04680     7C 0B B0 FD | 	call	#_compile_fun_4p
04684     18 00 90 FD | 	jmp	#LR__0388
04688                 | LR__0385
04688     80 18 B0 FD | 	call	#_compile_dim
0468c     CC 00 90 FD | 	jmp	#LR__0389
04690                 | LR__0386
04690     20 01 B0 FD | 	call	#_compile_array_assign
04694     C4 00 90 FD | 	jmp	#LR__0389
04698                 | LR__0387
04698     80 08 B0 FD | 	call	#_compile_unknown
0469c     BC 00 90 FD | 	jmp	#LR__0389
046a0                 | LR__0388
046a0     14 23 02 F6 | 	mov	local03, local06
046a4     16 1F 02 F6 | 	mov	local01, local08
046a8     0F 2B 02 F6 | 	mov	local07, local01
046ac     10 2F 02 F6 | 	mov	local09, local02
046b0     11 1F 02 F6 | 	mov	local01, local03
046b4     41 00 00 FF 
046b8     40 E4 05 F1 | 	add	objptr, ##33344
046bc     F2 2C 02 FB | 	rdlong	local08, objptr
046c0     16 29 02 F6 | 	mov	local06, local08
046c4     01 28 66 F0 | 	shl	local06, #1
046c8     16 29 02 F1 | 	add	local06, local08
046cc     02 28 66 F0 | 	shl	local06, #2
046d0     03 00 00 FF 
046d4     00 E4 85 F1 | 	sub	objptr, ##1536
046d8     F2 28 02 F1 | 	add	local06, objptr
046dc     14 2B 62 FC | 	wrlong	local07, local06
046e0     03 00 00 FF 
046e4     00 E4 05 F1 | 	add	objptr, ##1536
046e8     F2 2C 02 FB | 	rdlong	local08, objptr
046ec     16 2B 02 F6 | 	mov	local07, local08
046f0     01 2A 66 F0 | 	shl	local07, #1
046f4     16 2B 02 F1 | 	add	local07, local08
046f8     02 2A 66 F0 | 	shl	local07, #2
046fc     03 00 00 FF 
04700     00 E4 85 F1 | 	sub	objptr, ##1536
04704     F2 2A 02 F1 | 	add	local07, objptr
04708     04 2A 06 F1 | 	add	local07, #4
0470c     15 2F 62 FC | 	wrlong	local09, local07
04710     03 00 00 FF 
04714     00 E4 05 F1 | 	add	objptr, ##1536
04718     F2 2E 02 FB | 	rdlong	local09, objptr
0471c     17 2D 02 F6 | 	mov	local08, local09
04720     01 2C 66 F0 | 	shl	local08, #1
04724     17 2D 02 F1 | 	add	local08, local09
04728     02 2C 66 F0 | 	shl	local08, #2
0472c     03 00 00 FF 
04730     00 E4 85 F1 | 	sub	objptr, ##1536
04734     F2 2C 02 F1 | 	add	local08, objptr
04738     08 2C 06 F1 | 	add	local08, #8
0473c     16 1F 62 FC | 	wrlong	local01, local08
04740     03 00 00 FF 
04744     00 E4 05 F1 | 	add	objptr, ##1536
04748     F2 2A 02 FB | 	rdlong	local07, objptr
0474c     01 2A 06 F1 | 	add	local07, #1
04750     F2 2A 62 FC | 	wrlong	local07, objptr
04754     41 00 00 FF 
04758     40 E4 85 F1 | 	sub	objptr, ##33344
0475c                 | LR__0389
0475c                 | ' 
0475c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0475c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0475c     00 24 0E F2 | 	cmp	local04, #0 wz
04760     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04764     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04768     38 00 90 5D |  if_ne	jmp	#LR__0390
0476c     41 00 00 FF 
04770     40 E4 05 F1 | 	add	objptr, ##33344
04774     F2 2E 02 FB | 	rdlong	local09, objptr
04778     17 1F 02 F6 | 	mov	local01, local09
0477c     01 1E 66 F0 | 	shl	local01, #1
04780     17 1F 02 F1 | 	add	local01, local09
04784     02 1E 66 F0 | 	shl	local01, #2
04788     03 00 00 FF 
0478c     00 E4 85 F1 | 	sub	objptr, ##1536
04790     F2 1E 02 F1 | 	add	local01, objptr
04794     08 1E 06 F1 | 	add	local01, #8
04798     0F FD 6B FC | 	wrlong	#510, local01
0479c     3E 00 00 FF 
047a0     40 E4 85 F1 | 	sub	objptr, ##31808
047a4                 | LR__0390
047a4                 | ' 
047a4                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
047a4                 | ' return err
047a4     13 FB 01 F6 | 	mov	result1, local05
047a8     A7 F0 03 F6 | 	mov	ptra, fp
047ac     B2 00 A0 FD | 	call	#popregs_
047b0                 | _compile_immediate_ret
047b0     2D 00 64 FD | 	ret
047b4                 | 
047b4                 | ' 
047b4                 | ' sub compile_array_assign
047b4                 | _compile_array_assign
047b4     0A 4A 05 F6 | 	mov	COUNT_, #10
047b8     A8 00 A0 FD | 	call	#pushregs_
047bc     00 24 06 F6 | 	mov	local04, #0
047c0     2E 00 00 FF 
047c4     08 E4 05 F1 | 	add	objptr, ##23560
047c8     F2 26 02 FB | 	rdlong	local05, objptr
047cc     13 FB 01 F6 | 	mov	result1, local05
047d0     01 FA 85 F1 | 	sub	result1, #1
047d4     03 FA 65 F0 | 	shl	result1, #3
047d8     02 00 00 FF 
047dc     38 E4 85 F1 | 	sub	objptr, ##1080
047e0     F2 FA 01 F1 | 	add	result1, objptr
047e4     FD 28 02 FB | 	rdlong	local06, result1
047e8                 | ' numpar=0
047e8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
047e8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
047e8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
047e8                 | ' if lparts(ct).token=token_lpar then
047e8     03 26 66 F0 | 	shl	local05, #3
047ec     F2 26 02 F1 | 	add	local05, objptr
047f0     04 26 06 F1 | 	add	local05, #4
047f4     13 27 02 FB | 	rdlong	local05, local05
047f8     15 26 0E F2 | 	cmp	local05, #21 wz
047fc     2B 00 00 FF 
04800     D0 E5 85 F1 | 	sub	objptr, ##22480
04804     D4 01 90 5D |  if_ne	jmp	#LR__0404
04808     2E 00 00 FF 
0480c     08 E4 05 F1 | 	add	objptr, ##23560
04810     F2 2A 02 FB | 	rdlong	local07, objptr
04814     01 2A 06 F1 | 	add	local07, #1
04818     F2 2A 62 FC | 	wrlong	local07, objptr
0481c     2E 00 00 FF 
04820     08 E4 85 F1 | 	sub	objptr, ##23560
04824                 | '   ct+=1 											' omit this lpar, this is for expr list
04824                 | '   do
04824                 | LR__0400
04824     BC 2A B0 FD | 	call	#_expr
04828     2E 00 00 FF 
0482c     08 E4 05 F1 | 	add	objptr, ##23560
04830     F2 26 02 FB | 	rdlong	local05, objptr
04834     01 26 06 F1 | 	add	local05, #1
04838     F2 26 62 FC | 	wrlong	local05, objptr
0483c     01 24 06 F1 | 	add	local04, #1
04840     01 26 86 F1 | 	sub	local05, #1
04844     03 26 66 F0 | 	shl	local05, #3
04848     02 00 00 FF 
0484c     38 E4 85 F1 | 	sub	objptr, ##1080
04850     F2 26 02 F1 | 	add	local05, objptr
04854     04 26 06 F1 | 	add	local05, #4
04858     13 2B 02 FB | 	rdlong	local07, local05
0485c     14 2A 0E F2 | 	cmp	local07, #20 wz
04860     2B 00 00 FF 
04864     D0 E5 85 F1 | 	sub	objptr, ##22480
04868     34 00 90 AD |  if_e	jmp	#LR__0401
0486c     2E 00 00 FF 
04870     08 E4 05 F1 | 	add	objptr, ##23560
04874     F2 2A 02 FB | 	rdlong	local07, objptr
04878     03 2A 66 F0 | 	shl	local07, #3
0487c     02 00 00 FF 
04880     38 E4 85 F1 | 	sub	objptr, ##1080
04884     F2 2A 02 F1 | 	add	local07, objptr
04888     04 2A 06 F1 | 	add	local07, #4
0488c     15 2B 02 FB | 	rdlong	local07, local07
04890     FE 2B 0E F2 | 	cmp	local07, #510 wz
04894     2B 00 00 FF 
04898     D0 E5 85 F1 | 	sub	objptr, ##22480
0489c     84 FF 9F 5D |  if_ne	jmp	#LR__0400
048a0                 | LR__0401
048a0     2E 00 00 FF 
048a4     08 E4 05 F1 | 	add	objptr, ##23560
048a8     F2 2A 02 FB | 	rdlong	local07, objptr
048ac     01 2A 06 F1 | 	add	local07, #1
048b0     F2 2A 62 FC | 	wrlong	local07, objptr
048b4     2E 00 00 FF 
048b8     08 E4 85 F1 | 	sub	objptr, ##23560
048bc     24 2A B0 FD | 	call	#_expr
048c0     01 2C 66 F6 | 	neg	local08, #1
048c4     00 2E 06 F6 | 	mov	local09, #0
048c8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
048c8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
048c8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
048c8                 | ' ct+=1 : expr()
048c8                 | ' ' now find the vae
048c8                 | ' 
048c8                 | ' j=-1 : i=0 : do : 
048c8                 | LR__0402
048c8                 | '   if variables(i).name=varname$ then j=i: exit loop
048c8     17 27 02 F6 | 	mov	local05, local09
048cc     04 26 66 F0 | 	shl	local05, #4
048d0     0B 00 00 FF 
048d4     CC E5 05 F1 | 	add	objptr, ##6092
048d8     F2 26 02 F1 | 	add	local05, objptr
048dc     13 13 02 FB | 	rdlong	arg01, local05
048e0     14 15 02 F6 | 	mov	arg02, local06
048e4     0B 00 00 FF 
048e8     CC E5 85 F1 | 	sub	objptr, ##6092
048ec     78 03 B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     17 2D 02 A6 |  if_e	mov	local08, local09
048f8     20 00 90 AD |  if_e	jmp	#LR__0403
048fc     01 2E 06 F1 | 	add	local09, #1
04900     2B 00 00 FF 
04904     CC E5 05 F1 | 	add	objptr, ##22476
04908     F2 2A 02 FB | 	rdlong	local07, objptr
0490c     2B 00 00 FF 
04910     CC E5 85 F1 | 	sub	objptr, ##22476
04914     15 2F 5A F2 | 	cmps	local09, local07 wcz
04918     AC FF 9F ED |  if_be	jmp	#LR__0402
0491c                 | LR__0403
0491c     16 1F 02 F6 | 	mov	local01, local08
04920     12 21 02 F6 | 	mov	local02, local04
04924     17 22 06 F6 | 	mov	local03, #23
04928     0F 2B 02 F6 | 	mov	local07, local01
0492c     10 31 02 F6 | 	mov	local10, local02
04930     11 2D 02 F6 | 	mov	local08, local03
04934     41 00 00 FF 
04938     40 E4 05 F1 | 	add	objptr, ##33344
0493c     F2 1E 02 FB | 	rdlong	local01, objptr
04940     0F 2F 02 F6 | 	mov	local09, local01
04944     01 2E 66 F0 | 	shl	local09, #1
04948     0F 2F 02 F1 | 	add	local09, local01
0494c     02 2E 66 F0 | 	shl	local09, #2
04950     03 00 00 FF 
04954     00 E4 85 F1 | 	sub	objptr, ##1536
04958     F2 2E 02 F1 | 	add	local09, objptr
0495c     17 2B 62 FC | 	wrlong	local07, local09
04960     03 00 00 FF 
04964     00 E4 05 F1 | 	add	objptr, ##1536
04968     F2 1E 02 FB | 	rdlong	local01, objptr
0496c     0F 2F 02 F6 | 	mov	local09, local01
04970     01 2E 66 F0 | 	shl	local09, #1
04974     0F 2F 02 F1 | 	add	local09, local01
04978     02 2E 66 F0 | 	shl	local09, #2
0497c     03 00 00 FF 
04980     00 E4 85 F1 | 	sub	objptr, ##1536
04984     F2 2E 02 F1 | 	add	local09, objptr
04988     04 2E 06 F1 | 	add	local09, #4
0498c     17 31 62 FC | 	wrlong	local10, local09
04990     03 00 00 FF 
04994     00 E4 05 F1 | 	add	objptr, ##1536
04998     F2 30 02 FB | 	rdlong	local10, objptr
0499c     18 1F 02 F6 | 	mov	local01, local10
049a0     01 1E 66 F0 | 	shl	local01, #1
049a4     18 1F 02 F1 | 	add	local01, local10
049a8     02 1E 66 F0 | 	shl	local01, #2
049ac     03 00 00 FF 
049b0     00 E4 85 F1 | 	sub	objptr, ##1536
049b4     F2 1E 02 F1 | 	add	local01, objptr
049b8     08 1E 06 F1 | 	add	local01, #8
049bc     0F 2D 62 FC | 	wrlong	local08, local01
049c0     03 00 00 FF 
049c4     00 E4 05 F1 | 	add	objptr, ##1536
049c8     F2 2A 02 FB | 	rdlong	local07, objptr
049cc     01 2A 06 F1 | 	add	local07, #1
049d0     F2 2A 62 FC | 	wrlong	local07, objptr
049d4     41 00 00 FF 
049d8     40 E4 85 F1 | 	sub	objptr, ##33344
049dc                 | LR__0404
049dc     A7 F0 03 F6 | 	mov	ptra, fp
049e0     B2 00 A0 FD | 	call	#popregs_
049e4                 | _compile_array_assign_ret
049e4     2D 00 64 FD | 	ret
049e8                 | 
049e8                 | ' 
049e8                 | ' 
049e8                 | ' sub compile_immediate_assign(linetype as ulong)
049e8                 | _compile_immediate_assign
049e8     09 4A 05 F6 | 	mov	COUNT_, #9
049ec     A8 00 A0 FD | 	call	#pushregs_
049f0     09 25 0A F6 | 	mov	local04, arg01 wz
049f4     FF 22 06 F6 | 	mov	local03, #255
049f8     01 26 66 F6 | 	neg	local05, #1
049fc                 | ' 
049fc                 | ' t1.result_type=result_error : t1.result.uresult=0
049fc                 | ' i=-1: j=-1
049fc                 | ' 
049fc                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
049fc     2C 00 90 5D |  if_ne	jmp	#LR__0410
04a00     2B 00 00 FF 
04a04     D0 E5 05 F1 | 	add	objptr, ##22480
04a08     F2 28 02 FB | 	rdlong	local06, objptr
04a0c     02 00 00 FF 
04a10     38 E4 05 F1 | 	add	objptr, ##1080
04a14     F2 04 68 FC | 	wrlong	#2, objptr
04a18     13 00 00 FF 
04a1c     38 E4 05 F1 | 	add	objptr, ##9784
04a20     F2 00 68 FC | 	wrlong	#0, objptr
04a24     41 00 00 FF 
04a28     40 E4 85 F1 | 	sub	objptr, ##33344
04a2c                 | LR__0410
04a2c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04a2c     02 24 0E F2 | 	cmp	local04, #2 wz
04a30     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04a34     2B 00 00 AF 
04a38     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04a3c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04a40     02 00 00 AF 
04a44     38 E4 05 A1 |  if_e	add	objptr, ##1080
04a48     F2 04 68 AC |  if_e	wrlong	#2, objptr
04a4c     2E 00 00 AF 
04a50     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04a54                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04a54     04 24 0E F2 | 	cmp	local04, #4 wz
04a58     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04a5c     2C 00 90 5D |  if_ne	jmp	#LR__0411
04a60     2B 00 00 FF 
04a64     D8 E5 05 F1 | 	add	objptr, ##22488
04a68     F2 28 02 FB | 	rdlong	local06, objptr
04a6c     02 00 00 FF 
04a70     30 E4 05 F1 | 	add	objptr, ##1072
04a74     F2 06 68 FC | 	wrlong	#3, objptr
04a78     13 00 00 FF 
04a7c     38 E4 05 F1 | 	add	objptr, ##9784
04a80     F2 04 68 FC | 	wrlong	#2, objptr
04a84     41 00 00 FF 
04a88     40 E4 85 F1 | 	sub	objptr, ##33344
04a8c                 | LR__0411
04a8c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04a8c     05 24 0E F2 | 	cmp	local04, #5 wz
04a90     3C 00 90 5D |  if_ne	jmp	#LR__0412
04a94     2E 00 00 FF 
04a98     08 E4 05 F1 | 	add	objptr, ##23560
04a9c     F2 FA 01 FB | 	rdlong	result1, objptr
04aa0     FD 28 02 F6 | 	mov	local06, result1
04aa4     03 28 66 F0 | 	shl	local06, #3
04aa8     02 00 00 FF 
04aac     38 E4 85 F1 | 	sub	objptr, ##1080
04ab0     F2 28 02 F1 | 	add	local06, objptr
04ab4     14 29 02 FB | 	rdlong	local06, local06
04ab8     02 FA 05 F1 | 	add	result1, #2
04abc     02 00 00 FF 
04ac0     38 E4 05 F1 | 	add	objptr, ##1080
04ac4     F2 FA 61 FC | 	wrlong	result1, objptr
04ac8     2E 00 00 FF 
04acc     08 E4 85 F1 | 	sub	objptr, ##23560
04ad0                 | LR__0412
04ad0     14 13 02 F6 | 	mov	arg01, local06
04ad4     01 14 06 F6 | 	mov	arg02, #1
04ad8     FC 21 B1 FD | 	call	#__system__Right_S
04adc     04 28 B0 FD | 	call	#_expr
04ae0                 | '  
04ae0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04ae0                 | ' 
04ae0                 | ' suffix2$=right$(varname2$,1)
04ae0                 | ' expr()
04ae0                 | ' 
04ae0                 | ' 
04ae0                 | ' if varnum>0 then
04ae0     2B 00 00 FF 
04ae4     CC E5 05 F1 | 	add	objptr, ##22476
04ae8     F2 2A 02 FB | 	rdlong	local07, objptr
04aec     2B 00 00 FF 
04af0     CC E5 85 F1 | 	sub	objptr, ##22476
04af4     01 2A 56 F2 | 	cmps	local07, #1 wc
04af8     58 00 90 CD |  if_b	jmp	#LR__0415
04afc                 | '   for i=0 to varnum-1
04afc     00 2C 06 F6 | 	mov	local08, #0
04b00     2B 00 00 FF 
04b04     CC E5 05 F1 | 	add	objptr, ##22476
04b08     F2 2E 02 FB | 	rdlong	local09, objptr
04b0c     2B 00 00 FF 
04b10     CC E5 85 F1 | 	sub	objptr, ##22476
04b14                 | LR__0413
04b14     17 2D 52 F2 | 	cmps	local08, local09 wc
04b18     38 00 90 3D |  if_ae	jmp	#LR__0414
04b1c                 | '     if variables(i).name=varname2$ then j=i : exit
04b1c     16 2B 02 F6 | 	mov	local07, local08
04b20     04 2A 66 F0 | 	shl	local07, #4
04b24     0B 00 00 FF 
04b28     CC E5 05 F1 | 	add	objptr, ##6092
04b2c     F2 2A 02 F1 | 	add	local07, objptr
04b30     15 13 02 FB | 	rdlong	arg01, local07
04b34     14 15 02 F6 | 	mov	arg02, local06
04b38     0B 00 00 FF 
04b3c     CC E5 85 F1 | 	sub	objptr, ##6092
04b40     24 01 B1 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     16 27 02 A6 |  if_e	mov	local05, local08
04b4c     01 2C 06 51 |  if_ne	add	local08, #1
04b50     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
04b54                 | LR__0414
04b54                 | LR__0415
04b54                 | ' if  j=-1 andalso varnum<maxvars then   
04b54     FF FF 7F FF 
04b58     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04b5c     60 00 90 5D |  if_ne	jmp	#LR__0416
04b60     2B 00 00 FF 
04b64     CC E5 05 F1 | 	add	objptr, ##22476
04b68     F2 2A 02 FB | 	rdlong	local07, objptr
04b6c     2B 00 00 FF 
04b70     CC E5 85 F1 | 	sub	objptr, ##22476
04b74     01 00 00 FF 
04b78     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04b7c     40 00 90 3D |  if_ae	jmp	#LR__0416
04b80     2B 00 00 FF 
04b84     CC E5 05 F1 | 	add	objptr, ##22476
04b88     F2 2E 02 FB | 	rdlong	local09, objptr
04b8c     04 2E 66 F0 | 	shl	local09, #4
04b90     20 00 00 FF 
04b94     00 E4 85 F1 | 	sub	objptr, ##16384
04b98     F2 2E 02 F1 | 	add	local09, objptr
04b9c     17 29 62 FC | 	wrlong	local06, local09
04ba0     20 00 00 FF 
04ba4     00 E4 05 F1 | 	add	objptr, ##16384
04ba8     F2 2A 02 FB | 	rdlong	local07, objptr
04bac     15 27 02 F6 | 	mov	local05, local07
04bb0     01 2A 06 F1 | 	add	local07, #1
04bb4     F2 2A 62 FC | 	wrlong	local07, objptr
04bb8     2B 00 00 FF 
04bbc     CC E5 85 F1 | 	sub	objptr, ##22476
04bc0                 | LR__0416
04bc0     13 1F 02 F6 | 	mov	local01, local05
04bc4     17 22 06 F6 | 	mov	local03, #23
04bc8     0F 2B 02 F6 | 	mov	local07, local01
04bcc     10 2F 02 F6 | 	mov	local09, local02
04bd0     11 1F 02 F6 | 	mov	local01, local03
04bd4     41 00 00 FF 
04bd8     40 E4 05 F1 | 	add	objptr, ##33344
04bdc     F2 2C 02 FB | 	rdlong	local08, objptr
04be0     16 29 02 F6 | 	mov	local06, local08
04be4     01 28 66 F0 | 	shl	local06, #1
04be8     16 29 02 F1 | 	add	local06, local08
04bec     02 28 66 F0 | 	shl	local06, #2
04bf0     03 00 00 FF 
04bf4     00 E4 85 F1 | 	sub	objptr, ##1536
04bf8     F2 28 02 F1 | 	add	local06, objptr
04bfc     14 2B 62 FC | 	wrlong	local07, local06
04c00     03 00 00 FF 
04c04     00 E4 05 F1 | 	add	objptr, ##1536
04c08     F2 2C 02 FB | 	rdlong	local08, objptr
04c0c     16 2B 02 F6 | 	mov	local07, local08
04c10     01 2A 66 F0 | 	shl	local07, #1
04c14     16 2B 02 F1 | 	add	local07, local08
04c18     02 2A 66 F0 | 	shl	local07, #2
04c1c     03 00 00 FF 
04c20     00 E4 85 F1 | 	sub	objptr, ##1536
04c24     F2 2A 02 F1 | 	add	local07, objptr
04c28     04 2A 06 F1 | 	add	local07, #4
04c2c     15 2F 62 FC | 	wrlong	local09, local07
04c30     03 00 00 FF 
04c34     00 E4 05 F1 | 	add	objptr, ##1536
04c38     F2 2E 02 FB | 	rdlong	local09, objptr
04c3c     17 2D 02 F6 | 	mov	local08, local09
04c40     01 2C 66 F0 | 	shl	local08, #1
04c44     17 2D 02 F1 | 	add	local08, local09
04c48     02 2C 66 F0 | 	shl	local08, #2
04c4c     03 00 00 FF 
04c50     00 E4 85 F1 | 	sub	objptr, ##1536
04c54     F2 2C 02 F1 | 	add	local08, objptr
04c58     08 2C 06 F1 | 	add	local08, #8
04c5c     16 1F 62 FC | 	wrlong	local01, local08
04c60     03 00 00 FF 
04c64     00 E4 05 F1 | 	add	objptr, ##1536
04c68     F2 2A 02 FB | 	rdlong	local07, objptr
04c6c     01 2A 06 F1 | 	add	local07, #1
04c70     F2 2A 62 FC | 	wrlong	local07, objptr
04c74     41 00 00 FF 
04c78     40 E4 85 F1 | 	sub	objptr, ##33344
04c7c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04c7c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04c7c     00 24 0E F2 | 	cmp	local04, #0 wz
04c80     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04c84     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04c88     38 00 90 5D |  if_ne	jmp	#LR__0417
04c8c     41 00 00 FF 
04c90     40 E4 05 F1 | 	add	objptr, ##33344
04c94     F2 1E 02 FB | 	rdlong	local01, objptr
04c98     0F 2F 02 F6 | 	mov	local09, local01
04c9c     01 2E 66 F0 | 	shl	local09, #1
04ca0     0F 2F 02 F1 | 	add	local09, local01
04ca4     02 2E 66 F0 | 	shl	local09, #2
04ca8     03 00 00 FF 
04cac     00 E4 85 F1 | 	sub	objptr, ##1536
04cb0     F2 2E 02 F1 | 	add	local09, objptr
04cb4     08 2E 06 F1 | 	add	local09, #8
04cb8     17 FD 6B FC | 	wrlong	#510, local09
04cbc     3E 00 00 FF 
04cc0     40 E4 85 F1 | 	sub	objptr, ##31808
04cc4                 | LR__0417
04cc4     A7 F0 03 F6 | 	mov	ptra, fp
04cc8     B2 00 A0 FD | 	call	#popregs_
04ccc                 | _compile_immediate_assign_ret
04ccc     2D 00 64 FD | 	ret
04cd0                 | 
04cd0                 | ' 
04cd0                 | ' ' ------------------ compile the line that is calling a command 
04cd0                 | ' 
04cd0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04cd0                 | _compile
04cd0     04 4A 05 F6 | 	mov	COUNT_, #4
04cd4     A8 00 A0 FD | 	call	#pushregs_
04cd8     09 1F 0A F6 | 	mov	local01, arg01 wz
04cdc     0A 21 02 F6 | 	mov	local02, arg02
04ce0     0B 23 02 F6 | 	mov	local03, arg03
04ce4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04ce4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04ce4                 | '  
04ce4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04ce4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04ce4     0C 00 90 5D |  if_ne	jmp	#LR__0420
04ce8     00 12 06 F6 | 	mov	arg01, #0
04cec     3C F6 BF FD | 	call	#_compile_immediate
04cf0     A0 00 90 FD | 	jmp	#LR__0427
04cf4                 | LR__0420
04cf4     3E 00 00 FF 
04cf8     40 E4 05 F1 | 	add	objptr, ##31808
04cfc     F2 1E 62 FC | 	wrlong	local01, objptr
04d00     04 E4 05 F1 | 	add	objptr, #4
04d04     F2 20 62 FC | 	wrlong	local02, objptr
04d08     3E 00 00 FF 
04d0c     44 E4 85 F1 | 	sub	objptr, ##31812
04d10     11 13 02 F6 | 	mov	arg01, local03
04d14     01 12 06 F1 | 	add	arg01, #1
04d18     10 F6 BF FD | 	call	#_compile_immediate
04d1c     FD 24 0A F6 | 	mov	local04, result1 wz
04d20                 | ' 
04d20                 | ' ucompiledline(0)=alinemajor
04d20                 | ' ucompiledline(1)=alineminor
04d20                 | ' 
04d20                 | ' 
04d20                 | ' ' cont: 0: this is the first part of the line that will continue
04d20                 | ' ' 1 - this is the continuation of the line
04d20                 | ' ' 2 - this is the last continued line
04d20                 | ' ' 3 - this is the ome and only part
04d20                 | ' 
04d20                 | ' 
04d20                 | ' err=compile_immediate(cont+1) 
04d20                 | ' if err=0 then
04d20     6C 00 90 5D |  if_ne	jmp	#LR__0426
04d24                 | '   if cont=3 orelse cont=2 then 
04d24     03 22 0E F2 | 	cmp	local03, #3 wz
04d28     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04d2c     60 00 90 5D |  if_ne	jmp	#LR__0425
04d30                 | '     if alinemajor >lastline then 
04d30     41 00 00 FF 
04d34     4C E4 05 F1 | 	add	objptr, ##33356
04d38     F2 16 02 FB | 	rdlong	arg03, objptr
04d3c     41 00 00 FF 
04d40     4C E4 85 F1 | 	sub	objptr, ##33356
04d44     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04d48     0C 00 90 ED |  if_be	jmp	#LR__0421
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     F8 F4 BF FD | 	call	#_add_line_at_end
04d54     38 00 90 FD | 	jmp	#LR__0424
04d58                 | LR__0421
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     78 ED BF FD | 	call	#_deleteline
04d60                 | '       deleteline(alinemajor)  
04d60                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04d60     41 00 00 FF 
04d64     4C E4 05 F1 | 	add	objptr, ##33356
04d68     F2 16 02 FB | 	rdlong	arg03, objptr
04d6c     41 00 00 FF 
04d70     4C E4 85 F1 | 	sub	objptr, ##33356
04d74     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04d78     0C 00 90 ED |  if_be	jmp	#LR__0422
04d7c     0F 13 02 F6 | 	mov	arg01, local01
04d80     C8 F4 BF FD | 	call	#_add_line_at_end
04d84     08 00 90 FD | 	jmp	#LR__0423
04d88                 | LR__0422
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     74 F2 BF FD | 	call	#_insertline
04d90                 | LR__0423
04d90                 | LR__0424
04d90                 | LR__0425
04d90                 | LR__0426
04d90                 | ' return err
04d90     12 FB 01 F6 | 	mov	result1, local04
04d94                 | LR__0427
04d94     A7 F0 03 F6 | 	mov	ptra, fp
04d98     B2 00 A0 FD | 	call	#popregs_
04d9c                 | _compile_ret
04d9c     2D 00 64 FD | 	ret
04da0                 | 
04da0                 | ' 
04da0                 | ' ' ------------------ compile the line that is assigning to a variable
04da0                 | ' 
04da0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04da0                 | _compile_assign
04da0     03 4A 05 F6 | 	mov	COUNT_, #3
04da4     A8 00 A0 FD | 	call	#pushregs_
04da8     09 1F 0A F6 | 	mov	local01, arg01 wz
04dac     0A 21 02 F6 | 	mov	local02, arg02
04db0     0B 23 02 F6 | 	mov	local03, arg03
04db4                 | ' 
04db4                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04db4                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04db4     0C 00 90 5D |  if_ne	jmp	#LR__0430
04db8     00 12 06 F6 | 	mov	arg01, #0
04dbc     28 FC BF FD | 	call	#_compile_immediate_assign
04dc0     94 00 90 FD | 	jmp	#LR__0436
04dc4                 | LR__0430
04dc4     3E 00 00 FF 
04dc8     40 E4 05 F1 | 	add	objptr, ##31808
04dcc     F2 1E 62 FC | 	wrlong	local01, objptr
04dd0     04 E4 05 F1 | 	add	objptr, #4
04dd4     F2 20 62 FC | 	wrlong	local02, objptr
04dd8     3E 00 00 FF 
04ddc     44 E4 85 F1 | 	sub	objptr, ##31812
04de0     11 13 02 F6 | 	mov	arg01, local03
04de4     01 12 06 F1 | 	add	arg01, #1
04de8     FC FB BF FD | 	call	#_compile_immediate_assign
04dec                 | ' 
04dec                 | ' ucompiledline(0)=alinemajor
04dec                 | ' ucompiledline(1)=alineminor
04dec                 | ' 
04dec                 | ' compile_immediate_assign(cont+1) 
04dec                 | ' 
04dec                 | ' if cont=3 orelse cont=2 then 
04dec     03 22 0E F2 | 	cmp	local03, #3 wz
04df0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04df4     60 00 90 5D |  if_ne	jmp	#LR__0435
04df8                 | '   if alinemajor >lastline then 
04df8     41 00 00 FF 
04dfc     4C E4 05 F1 | 	add	objptr, ##33356
04e00     F2 16 02 FB | 	rdlong	arg03, objptr
04e04     41 00 00 FF 
04e08     4C E4 85 F1 | 	sub	objptr, ##33356
04e0c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04e10     0C 00 90 ED |  if_be	jmp	#LR__0431
04e14     0F 13 02 F6 | 	mov	arg01, local01
04e18     30 F4 BF FD | 	call	#_add_line_at_end
04e1c     38 00 90 FD | 	jmp	#LR__0434
04e20                 | LR__0431
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     B0 EC BF FD | 	call	#_deleteline
04e28                 | '     deleteline(alinemajor)  
04e28                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
04e28     41 00 00 FF 
04e2c     4C E4 05 F1 | 	add	objptr, ##33356
04e30     F2 16 02 FB | 	rdlong	arg03, objptr
04e34     41 00 00 FF 
04e38     4C E4 85 F1 | 	sub	objptr, ##33356
04e3c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04e40     0C 00 90 ED |  if_be	jmp	#LR__0432
04e44     0F 13 02 F6 | 	mov	arg01, local01
04e48     00 F4 BF FD | 	call	#_add_line_at_end
04e4c     08 00 90 FD | 	jmp	#LR__0433
04e50                 | LR__0432
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     AC F1 BF FD | 	call	#_insertline
04e58                 | LR__0433
04e58                 | LR__0434
04e58                 | LR__0435
04e58                 | LR__0436
04e58     A7 F0 03 F6 | 	mov	ptra, fp
04e5c     B2 00 A0 FD | 	call	#popregs_
04e60                 | _compile_assign_ret
04e60     2D 00 64 FD | 	ret
04e64                 | 
04e64                 | ' 
04e64                 | ' sub compile_error(errno)
04e64                 | _compile_error
04e64     FF 04 06 F6 | 	mov	_var03, #255
04e68     01 07 02 F6 | 	mov	_var04, _var02
04e6c     02 09 02 F6 | 	mov	_var05, _var03
04e70     41 00 00 FF 
04e74     40 E4 05 F1 | 	add	objptr, ##33344
04e78     F2 0A 02 FB | 	rdlong	_var06, objptr
04e7c     05 0D 02 F6 | 	mov	_var07, _var06
04e80     01 0C 66 F0 | 	shl	_var07, #1
04e84     05 0D 02 F1 | 	add	_var07, _var06
04e88     02 0C 66 F0 | 	shl	_var07, #2
04e8c     03 00 00 FF 
04e90     00 E4 85 F1 | 	sub	objptr, ##1536
04e94     F2 0C 02 F1 | 	add	_var07, objptr
04e98     06 13 62 FC | 	wrlong	arg01, _var07
04e9c     03 00 00 FF 
04ea0     00 E4 05 F1 | 	add	objptr, ##1536
04ea4     F2 0C 02 FB | 	rdlong	_var07, objptr
04ea8     06 0B 02 F6 | 	mov	_var06, _var07
04eac     01 0A 66 F0 | 	shl	_var06, #1
04eb0     06 0B 02 F1 | 	add	_var06, _var07
04eb4     02 0A 66 F0 | 	shl	_var06, #2
04eb8     03 00 00 FF 
04ebc     00 E4 85 F1 | 	sub	objptr, ##1536
04ec0     F2 0A 02 F1 | 	add	_var06, objptr
04ec4     04 0A 06 F1 | 	add	_var06, #4
04ec8     05 07 62 FC | 	wrlong	_var04, _var06
04ecc     03 00 00 FF 
04ed0     00 E4 05 F1 | 	add	objptr, ##1536
04ed4     F2 0C 02 FB | 	rdlong	_var07, objptr
04ed8     06 0B 02 F6 | 	mov	_var06, _var07
04edc     01 0A 66 F0 | 	shl	_var06, #1
04ee0     06 0B 02 F1 | 	add	_var06, _var07
04ee4     02 0A 66 F0 | 	shl	_var06, #2
04ee8     03 00 00 FF 
04eec     00 E4 85 F1 | 	sub	objptr, ##1536
04ef0     F2 0A 02 F1 | 	add	_var06, objptr
04ef4     08 0A 06 F1 | 	add	_var06, #8
04ef8     05 09 62 FC | 	wrlong	_var05, _var06
04efc     03 00 00 FF 
04f00     00 E4 05 F1 | 	add	objptr, ##1536
04f04     F2 12 02 FB | 	rdlong	arg01, objptr
04f08     01 12 06 F1 | 	add	arg01, #1
04f0c     F2 12 62 FC | 	wrlong	arg01, objptr
04f10     41 00 00 FF 
04f14     40 E4 85 F1 | 	sub	objptr, ##33344
04f18                 | _compile_error_ret
04f18     2D 00 64 FD | 	ret
04f1c                 | 
04f1c                 | ' 
04f1c                 | ' 
04f1c                 | ' sub compile_unknown() 
04f1c                 | _compile_unknown
04f1c     FF 04 06 F6 | 	mov	_var03, #255
04f20     17 00 06 F6 | 	mov	_var01, #23
04f24     01 07 02 F6 | 	mov	_var04, _var02
04f28     02 01 02 F6 | 	mov	_var01, _var03
04f2c     41 00 00 FF 
04f30     40 E4 05 F1 | 	add	objptr, ##33344
04f34     F2 08 02 FB | 	rdlong	_var05, objptr
04f38     04 0B 02 F6 | 	mov	_var06, _var05
04f3c     01 0A 66 F0 | 	shl	_var06, #1
04f40     04 0B 02 F1 | 	add	_var06, _var05
04f44     02 0A 66 F0 | 	shl	_var06, #2
04f48     03 00 00 FF 
04f4c     00 E4 85 F1 | 	sub	objptr, ##1536
04f50     F2 0A 02 F1 | 	add	_var06, objptr
04f54     05 2F 68 FC | 	wrlong	#23, _var06
04f58     03 00 00 FF 
04f5c     00 E4 05 F1 | 	add	objptr, ##1536
04f60     F2 0A 02 FB | 	rdlong	_var06, objptr
04f64     05 09 02 F6 | 	mov	_var05, _var06
04f68     01 08 66 F0 | 	shl	_var05, #1
04f6c     05 09 02 F1 | 	add	_var05, _var06
04f70     02 08 66 F0 | 	shl	_var05, #2
04f74     03 00 00 FF 
04f78     00 E4 85 F1 | 	sub	objptr, ##1536
04f7c     F2 08 02 F1 | 	add	_var05, objptr
04f80     04 08 06 F1 | 	add	_var05, #4
04f84     04 07 62 FC | 	wrlong	_var04, _var05
04f88     03 00 00 FF 
04f8c     00 E4 05 F1 | 	add	objptr, ##1536
04f90     F2 0A 02 FB | 	rdlong	_var06, objptr
04f94     05 09 02 F6 | 	mov	_var05, _var06
04f98     01 08 66 F0 | 	shl	_var05, #1
04f9c     05 09 02 F1 | 	add	_var05, _var06
04fa0     02 08 66 F0 | 	shl	_var05, #2
04fa4     03 00 00 FF 
04fa8     00 E4 85 F1 | 	sub	objptr, ##1536
04fac     F2 08 02 F1 | 	add	_var05, objptr
04fb0     08 08 06 F1 | 	add	_var05, #8
04fb4     04 01 62 FC | 	wrlong	_var01, _var05
04fb8     03 00 00 FF 
04fbc     00 E4 05 F1 | 	add	objptr, ##1536
04fc0     F2 0A 02 FB | 	rdlong	_var06, objptr
04fc4     01 0A 06 F1 | 	add	_var06, #1
04fc8     F2 0A 62 FC | 	wrlong	_var06, objptr
04fcc     41 00 00 FF 
04fd0     40 E4 85 F1 | 	sub	objptr, ##33344
04fd4                 | _compile_unknown_ret
04fd4     2D 00 64 FD | 	ret
04fd8                 | 
04fd8                 | ' 
04fd8                 | ' function compile_converttoint() as integer
04fd8                 | _compile_converttoint
04fd8     06 4A 05 F6 | 	mov	COUNT_, #6
04fdc     A8 00 A0 FD | 	call	#pushregs_
04fe0     00 1E 06 F6 | 	mov	local01, #0
04fe4     FC 22 B0 FD | 	call	#_expr
04fe8     FD 24 0A F6 | 	mov	local04, result1 wz
04fec                 | ' err=0
04fec                 | ' t1.result.uresult=0
04fec                 | ' err=expr()
04fec                 | ' if err=0 then
04fec     C0 00 90 5D |  if_ne	jmp	#LR__0440
04ff0     16 22 06 F6 | 	mov	local03, #22
04ff4     0F 27 02 F6 | 	mov	local05, local01
04ff8     10 29 02 F6 | 	mov	local06, local02
04ffc     11 25 02 F6 | 	mov	local04, local03
05000     41 00 00 FF 
05004     40 E4 05 F1 | 	add	objptr, ##33344
05008     F2 1E 02 FB | 	rdlong	local01, objptr
0500c     0F FB 01 F6 | 	mov	result1, local01
05010     01 FA 65 F0 | 	shl	result1, #1
05014     0F FB 01 F1 | 	add	result1, local01
05018     02 FA 65 F0 | 	shl	result1, #2
0501c     03 00 00 FF 
05020     00 E4 85 F1 | 	sub	objptr, ##1536
05024     F2 FA 01 F1 | 	add	result1, objptr
05028     FD 26 62 FC | 	wrlong	local05, result1
0502c     03 00 00 FF 
05030     00 E4 05 F1 | 	add	objptr, ##1536
05034     F2 26 02 FB | 	rdlong	local05, objptr
05038     13 1F 02 F6 | 	mov	local01, local05
0503c     01 1E 66 F0 | 	shl	local01, #1
05040     13 1F 02 F1 | 	add	local01, local05
05044     02 1E 66 F0 | 	shl	local01, #2
05048     03 00 00 FF 
0504c     00 E4 85 F1 | 	sub	objptr, ##1536
05050     F2 1E 02 F1 | 	add	local01, objptr
05054     04 1E 06 F1 | 	add	local01, #4
05058     0F 29 62 FC | 	wrlong	local06, local01
0505c     03 00 00 FF 
05060     00 E4 05 F1 | 	add	objptr, ##1536
05064     F2 28 02 FB | 	rdlong	local06, objptr
05068     14 27 02 F6 | 	mov	local05, local06
0506c     01 26 66 F0 | 	shl	local05, #1
05070     14 27 02 F1 | 	add	local05, local06
05074     02 26 66 F0 | 	shl	local05, #2
05078     03 00 00 FF 
0507c     00 E4 85 F1 | 	sub	objptr, ##1536
05080     F2 26 02 F1 | 	add	local05, objptr
05084     08 26 06 F1 | 	add	local05, #8
05088     13 25 62 FC | 	wrlong	local04, local05
0508c     03 00 00 FF 
05090     00 E4 05 F1 | 	add	objptr, ##1536
05094     F2 26 02 FB | 	rdlong	local05, objptr
05098     01 26 06 F1 | 	add	local05, #1
0509c     F2 26 62 FC | 	wrlong	local05, objptr
050a0     41 00 00 FF 
050a4     40 E4 85 F1 | 	sub	objptr, ##33344
050a8                 | '   t1.result_type=fun_converttoint
050a8                 | '   compiledline(lineptr)=t1: lineptr+=1 
050a8                 | '   return 0
050a8     00 FA 05 F6 | 	mov	result1, #0
050ac     04 00 90 FD | 	jmp	#LR__0441
050b0                 | LR__0440
050b0                 | '   return err
050b0     12 FB 01 F6 | 	mov	result1, local04
050b4                 | LR__0441
050b4     A7 F0 03 F6 | 	mov	ptra, fp
050b8     B2 00 A0 FD | 	call	#popregs_
050bc                 | _compile_converttoint_ret
050bc     2D 00 64 FD | 	ret
050c0                 | 
050c0                 | ' 
050c0                 | ' 
050c0                 | ' function compile_fun_2p() as ulong
050c0                 | _compile_fun_2p
050c0     01 4A 05 F6 | 	mov	COUNT_, #1
050c4     A8 00 A0 FD | 	call	#pushregs_
050c8     18 22 B0 FD | 	call	#_expr
050cc                 | ' 
050cc                 | ' expr()
050cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050cc     2E 00 00 FF 
050d0     08 E4 05 F1 | 	add	objptr, ##23560
050d4     F2 1E 02 FB | 	rdlong	local01, objptr
050d8     03 1E 66 F0 | 	shl	local01, #3
050dc     02 00 00 FF 
050e0     38 E4 85 F1 | 	sub	objptr, ##1080
050e4     F2 1E 02 F1 | 	add	local01, objptr
050e8     04 1E 06 F1 | 	add	local01, #4
050ec     0F 1F 02 FB | 	rdlong	local01, local01
050f0     11 1E 0E F2 | 	cmp	local01, #17 wz
050f4     2B 00 00 FF 
050f8     D0 E5 85 F1 | 	sub	objptr, ##22480
050fc     15 FA 05 56 |  if_ne	mov	result1, #21
05100     24 00 90 5D |  if_ne	jmp	#LR__0450
05104     2E 00 00 FF 
05108     08 E4 05 F1 | 	add	objptr, ##23560
0510c     F2 1E 02 FB | 	rdlong	local01, objptr
05110     01 1E 06 F1 | 	add	local01, #1
05114     F2 1E 62 FC | 	wrlong	local01, objptr
05118     2E 00 00 FF 
0511c     08 E4 85 F1 | 	sub	objptr, ##23560
05120     C0 21 B0 FD | 	call	#_expr
05124     00 FA 05 F6 | 	mov	result1, #0
05128                 | LR__0450
05128     A7 F0 03 F6 | 	mov	ptra, fp
0512c     B2 00 A0 FD | 	call	#popregs_
05130                 | _compile_fun_2p_ret
05130     2D 00 64 FD | 	ret
05134                 | 
05134                 | ' 
05134                 | ' function compile_fun_3p() as ulong
05134                 | _compile_fun_3p
05134     01 4A 05 F6 | 	mov	COUNT_, #1
05138     A8 00 A0 FD | 	call	#pushregs_
0513c     A4 21 B0 FD | 	call	#_expr
05140                 | ' 
05140                 | ' expr()
05140                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05140     2E 00 00 FF 
05144     08 E4 05 F1 | 	add	objptr, ##23560
05148     F2 1E 02 FB | 	rdlong	local01, objptr
0514c     03 1E 66 F0 | 	shl	local01, #3
05150     02 00 00 FF 
05154     38 E4 85 F1 | 	sub	objptr, ##1080
05158     F2 1E 02 F1 | 	add	local01, objptr
0515c     04 1E 06 F1 | 	add	local01, #4
05160     0F 1F 02 FB | 	rdlong	local01, local01
05164     11 1E 0E F2 | 	cmp	local01, #17 wz
05168     2B 00 00 FF 
0516c     D0 E5 85 F1 | 	sub	objptr, ##22480
05170     15 FA 05 56 |  if_ne	mov	result1, #21
05174     7C 00 90 5D |  if_ne	jmp	#LR__0460
05178     2E 00 00 FF 
0517c     08 E4 05 F1 | 	add	objptr, ##23560
05180     F2 1E 02 FB | 	rdlong	local01, objptr
05184     01 1E 06 F1 | 	add	local01, #1
05188     F2 1E 62 FC | 	wrlong	local01, objptr
0518c     2E 00 00 FF 
05190     08 E4 85 F1 | 	sub	objptr, ##23560
05194     4C 21 B0 FD | 	call	#_expr
05198                 | ' expr()
05198                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05198     2E 00 00 FF 
0519c     08 E4 05 F1 | 	add	objptr, ##23560
051a0     F2 1E 02 FB | 	rdlong	local01, objptr
051a4     03 1E 66 F0 | 	shl	local01, #3
051a8     02 00 00 FF 
051ac     38 E4 85 F1 | 	sub	objptr, ##1080
051b0     F2 1E 02 F1 | 	add	local01, objptr
051b4     04 1E 06 F1 | 	add	local01, #4
051b8     0F 1F 02 FB | 	rdlong	local01, local01
051bc     11 1E 0E F2 | 	cmp	local01, #17 wz
051c0     2B 00 00 FF 
051c4     D0 E5 85 F1 | 	sub	objptr, ##22480
051c8     15 FA 05 56 |  if_ne	mov	result1, #21
051cc     24 00 90 5D |  if_ne	jmp	#LR__0460
051d0     2E 00 00 FF 
051d4     08 E4 05 F1 | 	add	objptr, ##23560
051d8     F2 1E 02 FB | 	rdlong	local01, objptr
051dc     01 1E 06 F1 | 	add	local01, #1
051e0     F2 1E 62 FC | 	wrlong	local01, objptr
051e4     2E 00 00 FF 
051e8     08 E4 85 F1 | 	sub	objptr, ##23560
051ec     F4 20 B0 FD | 	call	#_expr
051f0     00 FA 05 F6 | 	mov	result1, #0
051f4                 | LR__0460
051f4     A7 F0 03 F6 | 	mov	ptra, fp
051f8     B2 00 A0 FD | 	call	#popregs_
051fc                 | _compile_fun_3p_ret
051fc     2D 00 64 FD | 	ret
05200                 | 
05200                 | ' 
05200                 | ' function compile_fun_4p() as ulong
05200                 | _compile_fun_4p
05200     01 4A 05 F6 | 	mov	COUNT_, #1
05204     A8 00 A0 FD | 	call	#pushregs_
05208     D8 20 B0 FD | 	call	#_expr
0520c                 | ' 
0520c                 | ' expr()
0520c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0520c     2E 00 00 FF 
05210     08 E4 05 F1 | 	add	objptr, ##23560
05214     F2 1E 02 FB | 	rdlong	local01, objptr
05218     03 1E 66 F0 | 	shl	local01, #3
0521c     02 00 00 FF 
05220     38 E4 85 F1 | 	sub	objptr, ##1080
05224     F2 1E 02 F1 | 	add	local01, objptr
05228     04 1E 06 F1 | 	add	local01, #4
0522c     0F 1F 02 FB | 	rdlong	local01, local01
05230     11 1E 0E F2 | 	cmp	local01, #17 wz
05234     2B 00 00 FF 
05238     D0 E5 85 F1 | 	sub	objptr, ##22480
0523c     15 FA 05 56 |  if_ne	mov	result1, #21
05240     D4 00 90 5D |  if_ne	jmp	#LR__0470
05244     2E 00 00 FF 
05248     08 E4 05 F1 | 	add	objptr, ##23560
0524c     F2 1E 02 FB | 	rdlong	local01, objptr
05250     01 1E 06 F1 | 	add	local01, #1
05254     F2 1E 62 FC | 	wrlong	local01, objptr
05258     2E 00 00 FF 
0525c     08 E4 85 F1 | 	sub	objptr, ##23560
05260     80 20 B0 FD | 	call	#_expr
05264                 | ' expr()
05264                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05264     2E 00 00 FF 
05268     08 E4 05 F1 | 	add	objptr, ##23560
0526c     F2 1E 02 FB | 	rdlong	local01, objptr
05270     03 1E 66 F0 | 	shl	local01, #3
05274     02 00 00 FF 
05278     38 E4 85 F1 | 	sub	objptr, ##1080
0527c     F2 1E 02 F1 | 	add	local01, objptr
05280     04 1E 06 F1 | 	add	local01, #4
05284     0F 1F 02 FB | 	rdlong	local01, local01
05288     11 1E 0E F2 | 	cmp	local01, #17 wz
0528c     2B 00 00 FF 
05290     D0 E5 85 F1 | 	sub	objptr, ##22480
05294     15 FA 05 56 |  if_ne	mov	result1, #21
05298     7C 00 90 5D |  if_ne	jmp	#LR__0470
0529c     2E 00 00 FF 
052a0     08 E4 05 F1 | 	add	objptr, ##23560
052a4     F2 1E 02 FB | 	rdlong	local01, objptr
052a8     01 1E 06 F1 | 	add	local01, #1
052ac     F2 1E 62 FC | 	wrlong	local01, objptr
052b0     2E 00 00 FF 
052b4     08 E4 85 F1 | 	sub	objptr, ##23560
052b8     28 20 B0 FD | 	call	#_expr
052bc                 | ' expr()
052bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052bc     2E 00 00 FF 
052c0     08 E4 05 F1 | 	add	objptr, ##23560
052c4     F2 1E 02 FB | 	rdlong	local01, objptr
052c8     03 1E 66 F0 | 	shl	local01, #3
052cc     02 00 00 FF 
052d0     38 E4 85 F1 | 	sub	objptr, ##1080
052d4     F2 1E 02 F1 | 	add	local01, objptr
052d8     04 1E 06 F1 | 	add	local01, #4
052dc     0F 1F 02 FB | 	rdlong	local01, local01
052e0     11 1E 0E F2 | 	cmp	local01, #17 wz
052e4     2B 00 00 FF 
052e8     D0 E5 85 F1 | 	sub	objptr, ##22480
052ec     15 FA 05 56 |  if_ne	mov	result1, #21
052f0     24 00 90 5D |  if_ne	jmp	#LR__0470
052f4     2E 00 00 FF 
052f8     08 E4 05 F1 | 	add	objptr, ##23560
052fc     F2 1E 02 FB | 	rdlong	local01, objptr
05300     01 1E 06 F1 | 	add	local01, #1
05304     F2 1E 62 FC | 	wrlong	local01, objptr
05308     2E 00 00 FF 
0530c     08 E4 85 F1 | 	sub	objptr, ##23560
05310     D0 1F B0 FD | 	call	#_expr
05314     00 FA 05 F6 | 	mov	result1, #0
05318                 | LR__0470
05318     A7 F0 03 F6 | 	mov	ptra, fp
0531c     B2 00 A0 FD | 	call	#popregs_
05320                 | _compile_fun_4p_ret
05320     2D 00 64 FD | 	ret
05324                 | 
05324                 | ' 
05324                 | ' 
05324                 | ' function compile_fun_5p() as ulong
05324                 | _compile_fun_5p
05324     01 4A 05 F6 | 	mov	COUNT_, #1
05328     A8 00 A0 FD | 	call	#pushregs_
0532c     B4 1F B0 FD | 	call	#_expr
05330                 | ' 
05330                 | ' expr()
05330                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05330     2E 00 00 FF 
05334     08 E4 05 F1 | 	add	objptr, ##23560
05338     F2 1E 02 FB | 	rdlong	local01, objptr
0533c     03 1E 66 F0 | 	shl	local01, #3
05340     02 00 00 FF 
05344     38 E4 85 F1 | 	sub	objptr, ##1080
05348     F2 1E 02 F1 | 	add	local01, objptr
0534c     04 1E 06 F1 | 	add	local01, #4
05350     0F 1F 02 FB | 	rdlong	local01, local01
05354     11 1E 0E F2 | 	cmp	local01, #17 wz
05358     2B 00 00 FF 
0535c     D0 E5 85 F1 | 	sub	objptr, ##22480
05360     15 FA 05 56 |  if_ne	mov	result1, #21
05364     2C 01 90 5D |  if_ne	jmp	#LR__0480
05368     2E 00 00 FF 
0536c     08 E4 05 F1 | 	add	objptr, ##23560
05370     F2 1E 02 FB | 	rdlong	local01, objptr
05374     01 1E 06 F1 | 	add	local01, #1
05378     F2 1E 62 FC | 	wrlong	local01, objptr
0537c     2E 00 00 FF 
05380     08 E4 85 F1 | 	sub	objptr, ##23560
05384     5C 1F B0 FD | 	call	#_expr
05388                 | ' expr()
05388                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05388     2E 00 00 FF 
0538c     08 E4 05 F1 | 	add	objptr, ##23560
05390     F2 1E 02 FB | 	rdlong	local01, objptr
05394     03 1E 66 F0 | 	shl	local01, #3
05398     02 00 00 FF 
0539c     38 E4 85 F1 | 	sub	objptr, ##1080
053a0     F2 1E 02 F1 | 	add	local01, objptr
053a4     04 1E 06 F1 | 	add	local01, #4
053a8     0F 1F 02 FB | 	rdlong	local01, local01
053ac     11 1E 0E F2 | 	cmp	local01, #17 wz
053b0     2B 00 00 FF 
053b4     D0 E5 85 F1 | 	sub	objptr, ##22480
053b8     15 FA 05 56 |  if_ne	mov	result1, #21
053bc     D4 00 90 5D |  if_ne	jmp	#LR__0480
053c0     2E 00 00 FF 
053c4     08 E4 05 F1 | 	add	objptr, ##23560
053c8     F2 1E 02 FB | 	rdlong	local01, objptr
053cc     01 1E 06 F1 | 	add	local01, #1
053d0     F2 1E 62 FC | 	wrlong	local01, objptr
053d4     2E 00 00 FF 
053d8     08 E4 85 F1 | 	sub	objptr, ##23560
053dc     04 1F B0 FD | 	call	#_expr
053e0                 | ' expr()
053e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
053e0     2E 00 00 FF 
053e4     08 E4 05 F1 | 	add	objptr, ##23560
053e8     F2 1E 02 FB | 	rdlong	local01, objptr
053ec     03 1E 66 F0 | 	shl	local01, #3
053f0     02 00 00 FF 
053f4     38 E4 85 F1 | 	sub	objptr, ##1080
053f8     F2 1E 02 F1 | 	add	local01, objptr
053fc     04 1E 06 F1 | 	add	local01, #4
05400     0F 1F 02 FB | 	rdlong	local01, local01
05404     11 1E 0E F2 | 	cmp	local01, #17 wz
05408     2B 00 00 FF 
0540c     D0 E5 85 F1 | 	sub	objptr, ##22480
05410     15 FA 05 56 |  if_ne	mov	result1, #21
05414     7C 00 90 5D |  if_ne	jmp	#LR__0480
05418     2E 00 00 FF 
0541c     08 E4 05 F1 | 	add	objptr, ##23560
05420     F2 1E 02 FB | 	rdlong	local01, objptr
05424     01 1E 06 F1 | 	add	local01, #1
05428     F2 1E 62 FC | 	wrlong	local01, objptr
0542c     2E 00 00 FF 
05430     08 E4 85 F1 | 	sub	objptr, ##23560
05434     AC 1E B0 FD | 	call	#_expr
05438                 | ' expr()
05438                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05438     2E 00 00 FF 
0543c     08 E4 05 F1 | 	add	objptr, ##23560
05440     F2 1E 02 FB | 	rdlong	local01, objptr
05444     03 1E 66 F0 | 	shl	local01, #3
05448     02 00 00 FF 
0544c     38 E4 85 F1 | 	sub	objptr, ##1080
05450     F2 1E 02 F1 | 	add	local01, objptr
05454     04 1E 06 F1 | 	add	local01, #4
05458     0F 1F 02 FB | 	rdlong	local01, local01
0545c     11 1E 0E F2 | 	cmp	local01, #17 wz
05460     2B 00 00 FF 
05464     D0 E5 85 F1 | 	sub	objptr, ##22480
05468     15 FA 05 56 |  if_ne	mov	result1, #21
0546c     24 00 90 5D |  if_ne	jmp	#LR__0480
05470     2E 00 00 FF 
05474     08 E4 05 F1 | 	add	objptr, ##23560
05478     F2 1E 02 FB | 	rdlong	local01, objptr
0547c     01 1E 06 F1 | 	add	local01, #1
05480     F2 1E 62 FC | 	wrlong	local01, objptr
05484     2E 00 00 FF 
05488     08 E4 85 F1 | 	sub	objptr, ##23560
0548c     54 1E B0 FD | 	call	#_expr
05490     00 FA 05 F6 | 	mov	result1, #0
05494                 | LR__0480
05494     A7 F0 03 F6 | 	mov	ptra, fp
05498     B2 00 A0 FD | 	call	#popregs_
0549c                 | _compile_fun_5p_ret
0549c     2D 00 64 FD | 	ret
054a0                 | 
054a0                 | ' 
054a0                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
054a0                 | _compile_fun_varp
054a0     02 4A 05 F6 | 	mov	COUNT_, #2
054a4     A8 00 A0 FD | 	call	#pushregs_
054a8     00 1E 06 F6 | 	mov	local01, #0
054ac                 | ' i=0
054ac                 | ' if lparts(ct).token<>token_end then
054ac     2E 00 00 FF 
054b0     08 E4 05 F1 | 	add	objptr, ##23560
054b4     F2 20 02 FB | 	rdlong	local02, objptr
054b8     03 20 66 F0 | 	shl	local02, #3
054bc     02 00 00 FF 
054c0     38 E4 85 F1 | 	sub	objptr, ##1080
054c4     F2 20 02 F1 | 	add	local02, objptr
054c8     04 20 06 F1 | 	add	local02, #4
054cc     10 21 02 FB | 	rdlong	local02, local02
054d0     FE 21 0E F2 | 	cmp	local02, #510 wz
054d4     2B 00 00 FF 
054d8     D0 E5 85 F1 | 	sub	objptr, ##22480
054dc     5C 00 90 AD |  if_e	jmp	#LR__0492
054e0                 | '   do
054e0                 | LR__0490
054e0     00 1E B0 FD | 	call	#_expr
054e4     01 1E 06 F1 | 	add	local01, #1
054e8                 | '   expr()
054e8                 | '    i+=1
054e8                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
054e8     2E 00 00 FF 
054ec     08 E4 05 F1 | 	add	objptr, ##23560
054f0     F2 20 02 FB | 	rdlong	local02, objptr
054f4     03 20 66 F0 | 	shl	local02, #3
054f8     02 00 00 FF 
054fc     38 E4 85 F1 | 	sub	objptr, ##1080
05500     F2 20 02 F1 | 	add	local02, objptr
05504     04 20 06 F1 | 	add	local02, #4
05508     10 21 02 FB | 	rdlong	local02, local02
0550c     11 20 0E F2 | 	cmp	local02, #17 wz
05510     2B 00 00 FF 
05514     D0 E5 85 F1 | 	sub	objptr, ##22480
05518     20 00 90 5D |  if_ne	jmp	#LR__0491
0551c     2E 00 00 FF 
05520     08 E4 05 F1 | 	add	objptr, ##23560
05524     F2 20 02 FB | 	rdlong	local02, objptr
05528     01 20 06 F1 | 	add	local02, #1
0552c     F2 20 62 FC | 	wrlong	local02, objptr
05530     2E 00 00 FF 
05534     08 E4 85 F1 | 	sub	objptr, ##23560
05538     A4 FF 9F FD | 	jmp	#LR__0490
0553c                 | LR__0491
0553c                 | LR__0492
0553c                 | ' return i
0553c     0F FB 01 F6 | 	mov	result1, local01
05540     A7 F0 03 F6 | 	mov	ptra, fp
05544     B2 00 A0 FD | 	call	#popregs_
05548                 | _compile_fun_varp_ret
05548     2D 00 64 FD | 	ret
0554c                 | 
0554c                 | ' 
0554c                 | ' 
0554c                 | ' function compile_int_fun_2p() as ulong
0554c                 | _compile_int_fun_2p
0554c     01 4A 05 F6 | 	mov	COUNT_, #1
05550     A8 00 A0 FD | 	call	#pushregs_
05554     80 FA BF FD | 	call	#_compile_converttoint
05558     FD 1E 02 F6 | 	mov	local01, result1
0555c                 | ' err=compile_converttoint() : if err>0 then return err
0555c     01 1E 56 F2 | 	cmps	local01, #1 wc
05560     0F FB 01 36 |  if_ae	mov	result1, local01
05564     58 00 90 3D |  if_ae	jmp	#LR__0500
05568                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05568     2E 00 00 FF 
0556c     08 E4 05 F1 | 	add	objptr, ##23560
05570     F2 1E 02 FB | 	rdlong	local01, objptr
05574     03 1E 66 F0 | 	shl	local01, #3
05578     02 00 00 FF 
0557c     38 E4 85 F1 | 	sub	objptr, ##1080
05580     F2 1E 02 F1 | 	add	local01, objptr
05584     04 1E 06 F1 | 	add	local01, #4
05588     0F 1F 02 FB | 	rdlong	local01, local01
0558c     11 1E 0E F2 | 	cmp	local01, #17 wz
05590     2B 00 00 FF 
05594     D0 E5 85 F1 | 	sub	objptr, ##22480
05598     15 FA 05 56 |  if_ne	mov	result1, #21
0559c     20 00 90 5D |  if_ne	jmp	#LR__0500
055a0     2E 00 00 FF 
055a4     08 E4 05 F1 | 	add	objptr, ##23560
055a8     F2 1E 02 FB | 	rdlong	local01, objptr
055ac     01 1E 06 F1 | 	add	local01, #1
055b0     F2 1E 62 FC | 	wrlong	local01, objptr
055b4     2E 00 00 FF 
055b8     08 E4 85 F1 | 	sub	objptr, ##23560
055bc     18 FA BF FD | 	call	#_compile_converttoint
055c0                 | ' err=compile_converttoint() 
055c0                 | ' return err
055c0                 | LR__0500
055c0     A7 F0 03 F6 | 	mov	ptra, fp
055c4     B2 00 A0 FD | 	call	#popregs_
055c8                 | _compile_int_fun_2p_ret
055c8     2D 00 64 FD | 	ret
055cc                 | 
055cc                 | ' 
055cc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
055cc                 | _compile_print
055cc     0B 4A 05 F6 | 	mov	COUNT_, #11
055d0     A8 00 A0 FD | 	call	#pushregs_
055d4     00 1E 06 F6 | 	mov	local01, #0
055d8     1D 22 06 F6 | 	mov	local03, #29
055dc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
055dc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
055dc     2E 00 00 FF 
055e0     08 E4 05 F1 | 	add	objptr, ##23560
055e4     F2 24 02 FB | 	rdlong	local04, objptr
055e8     03 24 66 F0 | 	shl	local04, #3
055ec     02 00 00 FF 
055f0     38 E4 85 F1 | 	sub	objptr, ##1080
055f4     F2 24 02 F1 | 	add	local04, objptr
055f8     04 24 06 F1 | 	add	local04, #4
055fc     12 25 02 FB | 	rdlong	local04, local04
05600     FE 25 0E F2 | 	cmp	local04, #510 wz
05604     2B 00 00 FF 
05608     D0 E5 85 F1 | 	sub	objptr, ##22480
0560c     68 01 90 5D |  if_ne	jmp	#LR__0510
05610     20 22 06 F6 | 	mov	local03, #32
05614     0F 27 02 F6 | 	mov	local05, local01
05618     10 29 02 F6 | 	mov	local06, local02
0561c     11 2B 02 F6 | 	mov	local07, local03
05620     41 00 00 FF 
05624     40 E4 05 F1 | 	add	objptr, ##33344
05628     F2 2C 02 FB | 	rdlong	local08, objptr
0562c     16 2F 02 F6 | 	mov	local09, local08
05630     01 2E 66 F0 | 	shl	local09, #1
05634     16 2F 02 F1 | 	add	local09, local08
05638     02 2E 66 F0 | 	shl	local09, #2
0563c     03 00 00 FF 
05640     00 E4 85 F1 | 	sub	objptr, ##1536
05644     F2 2E 02 F1 | 	add	local09, objptr
05648     17 27 62 FC | 	wrlong	local05, local09
0564c     03 00 00 FF 
05650     00 E4 05 F1 | 	add	objptr, ##1536
05654     F2 26 02 FB | 	rdlong	local05, objptr
05658     13 31 02 F6 | 	mov	local10, local05
0565c     01 30 66 F0 | 	shl	local10, #1
05660     13 31 02 F1 | 	add	local10, local05
05664     02 30 66 F0 | 	shl	local10, #2
05668     03 00 00 FF 
0566c     00 E4 85 F1 | 	sub	objptr, ##1536
05670     F2 30 02 F1 | 	add	local10, objptr
05674     04 30 06 F1 | 	add	local10, #4
05678     18 29 62 FC | 	wrlong	local06, local10
0567c     03 00 00 FF 
05680     00 E4 05 F1 | 	add	objptr, ##1536
05684     F2 26 02 FB | 	rdlong	local05, objptr
05688     13 33 02 F6 | 	mov	local11, local05
0568c     01 32 66 F0 | 	shl	local11, #1
05690     13 33 02 F1 | 	add	local11, local05
05694     02 32 66 F0 | 	shl	local11, #2
05698     03 00 00 FF 
0569c     00 E4 85 F1 | 	sub	objptr, ##1536
056a0     F2 32 02 F1 | 	add	local11, objptr
056a4     08 32 06 F1 | 	add	local11, #8
056a8     19 2B 62 FC | 	wrlong	local07, local11
056ac     03 00 00 FF 
056b0     00 E4 05 F1 | 	add	objptr, ##1536
056b4     F2 26 02 FB | 	rdlong	local05, objptr
056b8     01 26 06 F1 | 	add	local05, #1
056bc     F2 26 62 FC | 	wrlong	local05, objptr
056c0     44 22 06 F6 | 	mov	local03, #68
056c4     0F 27 02 F6 | 	mov	local05, local01
056c8     10 29 02 F6 | 	mov	local06, local02
056cc     11 2B 02 F6 | 	mov	local07, local03
056d0     F2 2C 02 FB | 	rdlong	local08, objptr
056d4     16 2F 02 F6 | 	mov	local09, local08
056d8     01 2E 66 F0 | 	shl	local09, #1
056dc     16 2F 02 F1 | 	add	local09, local08
056e0     02 2E 66 F0 | 	shl	local09, #2
056e4     03 00 00 FF 
056e8     00 E4 85 F1 | 	sub	objptr, ##1536
056ec     F2 2E 02 F1 | 	add	local09, objptr
056f0     17 27 62 FC | 	wrlong	local05, local09
056f4     03 00 00 FF 
056f8     00 E4 05 F1 | 	add	objptr, ##1536
056fc     F2 32 02 FB | 	rdlong	local11, objptr
05700     19 31 02 F6 | 	mov	local10, local11
05704     01 30 66 F0 | 	shl	local10, #1
05708     19 31 02 F1 | 	add	local10, local11
0570c     02 30 66 F0 | 	shl	local10, #2
05710     03 00 00 FF 
05714     00 E4 85 F1 | 	sub	objptr, ##1536
05718     F2 30 02 F1 | 	add	local10, objptr
0571c     04 30 06 F1 | 	add	local10, #4
05720     18 29 62 FC | 	wrlong	local06, local10
05724     03 00 00 FF 
05728     00 E4 05 F1 | 	add	objptr, ##1536
0572c     F2 30 02 FB | 	rdlong	local10, objptr
05730     18 33 02 F6 | 	mov	local11, local10
05734     01 32 66 F0 | 	shl	local11, #1
05738     18 33 02 F1 | 	add	local11, local10
0573c     02 32 66 F0 | 	shl	local11, #2
05740     03 00 00 FF 
05744     00 E4 85 F1 | 	sub	objptr, ##1536
05748     F2 32 02 F1 | 	add	local11, objptr
0574c     08 32 06 F1 | 	add	local11, #8
05750     19 2B 62 FC | 	wrlong	local07, local11
05754     03 00 00 FF 
05758     00 E4 05 F1 | 	add	objptr, ##1536
0575c     F2 26 02 FB | 	rdlong	local05, objptr
05760     01 26 06 F1 | 	add	local05, #1
05764     F2 26 62 FC | 	wrlong	local05, objptr
05768     41 00 00 FF 
0576c     40 E4 85 F1 | 	sub	objptr, ##33344
05770     00 FA 05 F6 | 	mov	result1, #0
05774     20 05 90 FD | 	jmp	#LR__0517
05778                 | LR__0510
05778                 | ' do
05778                 | LR__0511
05778     68 1B B0 FD | 	call	#_expr
0577c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0577c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0577c     2E 00 00 FF 
05780     08 E4 05 F1 | 	add	objptr, ##23560
05784     F2 24 02 FB | 	rdlong	local04, objptr
05788     03 24 66 F0 | 	shl	local04, #3
0578c     02 00 00 FF 
05790     38 E4 85 F1 | 	sub	objptr, ##1080
05794     F2 24 02 F1 | 	add	local04, objptr
05798     04 24 06 F1 | 	add	local04, #4
0579c     12 2D 02 FB | 	rdlong	local08, local04
057a0     11 2C 0E F2 | 	cmp	local08, #17 wz
057a4     2B 00 00 FF 
057a8     D0 E5 85 F1 | 	sub	objptr, ##22480
057ac     60 01 90 5D |  if_ne	jmp	#LR__0512
057b0     21 22 06 F6 | 	mov	local03, #33
057b4     0F 27 02 F6 | 	mov	local05, local01
057b8     10 29 02 F6 | 	mov	local06, local02
057bc     11 2B 02 F6 | 	mov	local07, local03
057c0     41 00 00 FF 
057c4     40 E4 05 F1 | 	add	objptr, ##33344
057c8     F2 2C 02 FB | 	rdlong	local08, objptr
057cc     16 2F 02 F6 | 	mov	local09, local08
057d0     01 2E 66 F0 | 	shl	local09, #1
057d4     16 2F 02 F1 | 	add	local09, local08
057d8     02 2E 66 F0 | 	shl	local09, #2
057dc     03 00 00 FF 
057e0     00 E4 85 F1 | 	sub	objptr, ##1536
057e4     F2 2E 02 F1 | 	add	local09, objptr
057e8     17 27 62 FC | 	wrlong	local05, local09
057ec     03 00 00 FF 
057f0     00 E4 05 F1 | 	add	objptr, ##1536
057f4     F2 32 02 FB | 	rdlong	local11, objptr
057f8     19 31 02 F6 | 	mov	local10, local11
057fc     01 30 66 F0 | 	shl	local10, #1
05800     19 31 02 F1 | 	add	local10, local11
05804     02 30 66 F0 | 	shl	local10, #2
05808     03 00 00 FF 
0580c     00 E4 85 F1 | 	sub	objptr, ##1536
05810     F2 30 02 F1 | 	add	local10, objptr
05814     04 30 06 F1 | 	add	local10, #4
05818     18 29 62 FC | 	wrlong	local06, local10
0581c     03 00 00 FF 
05820     00 E4 05 F1 | 	add	objptr, ##1536
05824     F2 26 02 FB | 	rdlong	local05, objptr
05828     13 33 02 F6 | 	mov	local11, local05
0582c     01 32 66 F0 | 	shl	local11, #1
05830     13 33 02 F1 | 	add	local11, local05
05834     02 32 66 F0 | 	shl	local11, #2
05838     03 00 00 FF 
0583c     00 E4 85 F1 | 	sub	objptr, ##1536
05840     F2 32 02 F1 | 	add	local11, objptr
05844     08 32 06 F1 | 	add	local11, #8
05848     19 2B 62 FC | 	wrlong	local07, local11
0584c     03 00 00 FF 
05850     00 E4 05 F1 | 	add	objptr, ##1536
05854     F2 26 02 FB | 	rdlong	local05, objptr
05858     01 26 06 F1 | 	add	local05, #1
0585c     F2 26 62 FC | 	wrlong	local05, objptr
05860     44 22 06 F6 | 	mov	local03, #68
05864     0F 27 02 F6 | 	mov	local05, local01
05868     10 29 02 F6 | 	mov	local06, local02
0586c     11 2B 02 F6 | 	mov	local07, local03
05870     F2 2C 02 FB | 	rdlong	local08, objptr
05874     16 2F 02 F6 | 	mov	local09, local08
05878     01 2E 66 F0 | 	shl	local09, #1
0587c     16 2F 02 F1 | 	add	local09, local08
05880     02 2E 66 F0 | 	shl	local09, #2
05884     03 00 00 FF 
05888     00 E4 85 F1 | 	sub	objptr, ##1536
0588c     F2 2E 02 F1 | 	add	local09, objptr
05890     17 27 62 FC | 	wrlong	local05, local09
05894     03 00 00 FF 
05898     00 E4 05 F1 | 	add	objptr, ##1536
0589c     F2 32 02 FB | 	rdlong	local11, objptr
058a0     19 31 02 F6 | 	mov	local10, local11
058a4     01 30 66 F0 | 	shl	local10, #1
058a8     19 31 02 F1 | 	add	local10, local11
058ac     02 30 66 F0 | 	shl	local10, #2
058b0     03 00 00 FF 
058b4     00 E4 85 F1 | 	sub	objptr, ##1536
058b8     F2 30 02 F1 | 	add	local10, objptr
058bc     04 30 06 F1 | 	add	local10, #4
058c0     18 29 62 FC | 	wrlong	local06, local10
058c4     03 00 00 FF 
058c8     00 E4 05 F1 | 	add	objptr, ##1536
058cc     F2 30 02 FB | 	rdlong	local10, objptr
058d0     18 33 02 F6 | 	mov	local11, local10
058d4     01 32 66 F0 | 	shl	local11, #1
058d8     18 33 02 F1 | 	add	local11, local10
058dc     02 32 66 F0 | 	shl	local11, #2
058e0     03 00 00 FF 
058e4     00 E4 85 F1 | 	sub	objptr, ##1536
058e8     F2 32 02 F1 | 	add	local11, objptr
058ec     08 32 06 F1 | 	add	local11, #8
058f0     19 2B 62 FC | 	wrlong	local07, local11
058f4     03 00 00 FF 
058f8     00 E4 05 F1 | 	add	objptr, ##1536
058fc     F2 26 02 FB | 	rdlong	local05, objptr
05900     01 26 06 F1 | 	add	local05, #1
05904     F2 26 62 FC | 	wrlong	local05, objptr
05908     41 00 00 FF 
0590c     40 E4 85 F1 | 	sub	objptr, ##33344
05910                 | LR__0512
05910                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05910     2E 00 00 FF 
05914     08 E4 05 F1 | 	add	objptr, ##23560
05918     F2 24 02 FB | 	rdlong	local04, objptr
0591c     03 24 66 F0 | 	shl	local04, #3
05920     02 00 00 FF 
05924     38 E4 85 F1 | 	sub	objptr, ##1080
05928     F2 24 02 F1 | 	add	local04, objptr
0592c     04 24 06 F1 | 	add	local04, #4
05930     12 2D 02 FB | 	rdlong	local08, local04
05934     12 2C 0E F2 | 	cmp	local08, #18 wz
05938     2B 00 00 FF 
0593c     D0 E5 85 F1 | 	sub	objptr, ##22480
05940     60 01 90 5D |  if_ne	jmp	#LR__0513
05944     22 22 06 F6 | 	mov	local03, #34
05948     0F 27 02 F6 | 	mov	local05, local01
0594c     10 29 02 F6 | 	mov	local06, local02
05950     11 2B 02 F6 | 	mov	local07, local03
05954     41 00 00 FF 
05958     40 E4 05 F1 | 	add	objptr, ##33344
0595c     F2 2C 02 FB | 	rdlong	local08, objptr
05960     16 2F 02 F6 | 	mov	local09, local08
05964     01 2E 66 F0 | 	shl	local09, #1
05968     16 2F 02 F1 | 	add	local09, local08
0596c     02 2E 66 F0 | 	shl	local09, #2
05970     03 00 00 FF 
05974     00 E4 85 F1 | 	sub	objptr, ##1536
05978     F2 2E 02 F1 | 	add	local09, objptr
0597c     17 27 62 FC | 	wrlong	local05, local09
05980     03 00 00 FF 
05984     00 E4 05 F1 | 	add	objptr, ##1536
05988     F2 32 02 FB | 	rdlong	local11, objptr
0598c     19 31 02 F6 | 	mov	local10, local11
05990     01 30 66 F0 | 	shl	local10, #1
05994     19 31 02 F1 | 	add	local10, local11
05998     02 30 66 F0 | 	shl	local10, #2
0599c     03 00 00 FF 
059a0     00 E4 85 F1 | 	sub	objptr, ##1536
059a4     F2 30 02 F1 | 	add	local10, objptr
059a8     04 30 06 F1 | 	add	local10, #4
059ac     18 29 62 FC | 	wrlong	local06, local10
059b0     03 00 00 FF 
059b4     00 E4 05 F1 | 	add	objptr, ##1536
059b8     F2 26 02 FB | 	rdlong	local05, objptr
059bc     13 33 02 F6 | 	mov	local11, local05
059c0     01 32 66 F0 | 	shl	local11, #1
059c4     13 33 02 F1 | 	add	local11, local05
059c8     02 32 66 F0 | 	shl	local11, #2
059cc     03 00 00 FF 
059d0     00 E4 85 F1 | 	sub	objptr, ##1536
059d4     F2 32 02 F1 | 	add	local11, objptr
059d8     08 32 06 F1 | 	add	local11, #8
059dc     19 2B 62 FC | 	wrlong	local07, local11
059e0     03 00 00 FF 
059e4     00 E4 05 F1 | 	add	objptr, ##1536
059e8     F2 26 02 FB | 	rdlong	local05, objptr
059ec     01 26 06 F1 | 	add	local05, #1
059f0     F2 26 62 FC | 	wrlong	local05, objptr
059f4     44 22 06 F6 | 	mov	local03, #68
059f8     0F 27 02 F6 | 	mov	local05, local01
059fc     10 29 02 F6 | 	mov	local06, local02
05a00     11 2B 02 F6 | 	mov	local07, local03
05a04     F2 2C 02 FB | 	rdlong	local08, objptr
05a08     16 2F 02 F6 | 	mov	local09, local08
05a0c     01 2E 66 F0 | 	shl	local09, #1
05a10     16 2F 02 F1 | 	add	local09, local08
05a14     02 2E 66 F0 | 	shl	local09, #2
05a18     03 00 00 FF 
05a1c     00 E4 85 F1 | 	sub	objptr, ##1536
05a20     F2 2E 02 F1 | 	add	local09, objptr
05a24     17 27 62 FC | 	wrlong	local05, local09
05a28     03 00 00 FF 
05a2c     00 E4 05 F1 | 	add	objptr, ##1536
05a30     F2 32 02 FB | 	rdlong	local11, objptr
05a34     19 31 02 F6 | 	mov	local10, local11
05a38     01 30 66 F0 | 	shl	local10, #1
05a3c     19 31 02 F1 | 	add	local10, local11
05a40     02 30 66 F0 | 	shl	local10, #2
05a44     03 00 00 FF 
05a48     00 E4 85 F1 | 	sub	objptr, ##1536
05a4c     F2 30 02 F1 | 	add	local10, objptr
05a50     04 30 06 F1 | 	add	local10, #4
05a54     18 29 62 FC | 	wrlong	local06, local10
05a58     03 00 00 FF 
05a5c     00 E4 05 F1 | 	add	objptr, ##1536
05a60     F2 30 02 FB | 	rdlong	local10, objptr
05a64     18 33 02 F6 | 	mov	local11, local10
05a68     01 32 66 F0 | 	shl	local11, #1
05a6c     18 33 02 F1 | 	add	local11, local10
05a70     02 32 66 F0 | 	shl	local11, #2
05a74     03 00 00 FF 
05a78     00 E4 85 F1 | 	sub	objptr, ##1536
05a7c     F2 32 02 F1 | 	add	local11, objptr
05a80     08 32 06 F1 | 	add	local11, #8
05a84     19 2B 62 FC | 	wrlong	local07, local11
05a88     03 00 00 FF 
05a8c     00 E4 05 F1 | 	add	objptr, ##1536
05a90     F2 26 02 FB | 	rdlong	local05, objptr
05a94     01 26 06 F1 | 	add	local05, #1
05a98     F2 26 62 FC | 	wrlong	local05, objptr
05a9c     41 00 00 FF 
05aa0     40 E4 85 F1 | 	sub	objptr, ##33344
05aa4                 | LR__0513
05aa4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05aa4     2E 00 00 FF 
05aa8     08 E4 05 F1 | 	add	objptr, ##23560
05aac     F2 24 02 FB | 	rdlong	local04, objptr
05ab0     03 24 66 F0 | 	shl	local04, #3
05ab4     02 00 00 FF 
05ab8     38 E4 85 F1 | 	sub	objptr, ##1080
05abc     F2 24 02 F1 | 	add	local04, objptr
05ac0     04 24 06 F1 | 	add	local04, #4
05ac4     12 2D 02 FB | 	rdlong	local08, local04
05ac8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05acc     2B 00 00 FF 
05ad0     D0 E5 85 F1 | 	sub	objptr, ##22480
05ad4     B8 00 90 5D |  if_ne	jmp	#LR__0514
05ad8     44 22 06 F6 | 	mov	local03, #68
05adc     0F 27 02 F6 | 	mov	local05, local01
05ae0     10 29 02 F6 | 	mov	local06, local02
05ae4     11 2B 02 F6 | 	mov	local07, local03
05ae8     41 00 00 FF 
05aec     40 E4 05 F1 | 	add	objptr, ##33344
05af0     F2 2C 02 FB | 	rdlong	local08, objptr
05af4     16 2F 02 F6 | 	mov	local09, local08
05af8     01 2E 66 F0 | 	shl	local09, #1
05afc     16 2F 02 F1 | 	add	local09, local08
05b00     02 2E 66 F0 | 	shl	local09, #2
05b04     03 00 00 FF 
05b08     00 E4 85 F1 | 	sub	objptr, ##1536
05b0c     F2 2E 02 F1 | 	add	local09, objptr
05b10     17 27 62 FC | 	wrlong	local05, local09
05b14     03 00 00 FF 
05b18     00 E4 05 F1 | 	add	objptr, ##1536
05b1c     F2 32 02 FB | 	rdlong	local11, objptr
05b20     19 31 02 F6 | 	mov	local10, local11
05b24     01 30 66 F0 | 	shl	local10, #1
05b28     19 31 02 F1 | 	add	local10, local11
05b2c     02 30 66 F0 | 	shl	local10, #2
05b30     03 00 00 FF 
05b34     00 E4 85 F1 | 	sub	objptr, ##1536
05b38     F2 30 02 F1 | 	add	local10, objptr
05b3c     04 30 06 F1 | 	add	local10, #4
05b40     18 29 62 FC | 	wrlong	local06, local10
05b44     03 00 00 FF 
05b48     00 E4 05 F1 | 	add	objptr, ##1536
05b4c     F2 30 02 FB | 	rdlong	local10, objptr
05b50     18 33 02 F6 | 	mov	local11, local10
05b54     01 32 66 F0 | 	shl	local11, #1
05b58     18 33 02 F1 | 	add	local11, local10
05b5c     02 32 66 F0 | 	shl	local11, #2
05b60     03 00 00 FF 
05b64     00 E4 85 F1 | 	sub	objptr, ##1536
05b68     F2 32 02 F1 | 	add	local11, objptr
05b6c     08 32 06 F1 | 	add	local11, #8
05b70     19 2B 62 FC | 	wrlong	local07, local11
05b74     03 00 00 FF 
05b78     00 E4 05 F1 | 	add	objptr, ##1536
05b7c     F2 26 02 FB | 	rdlong	local05, objptr
05b80     01 26 06 F1 | 	add	local05, #1
05b84     F2 26 62 FC | 	wrlong	local05, objptr
05b88     41 00 00 FF 
05b8c     40 E4 85 F1 | 	sub	objptr, ##33344
05b90                 | LR__0514
05b90                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05b90     2E 00 00 FF 
05b94     08 E4 05 F1 | 	add	objptr, ##23560
05b98     F2 24 02 FB | 	rdlong	local04, objptr
05b9c     03 24 66 F0 | 	shl	local04, #3
05ba0     02 00 00 FF 
05ba4     38 E4 85 F1 | 	sub	objptr, ##1080
05ba8     F2 24 02 F1 | 	add	local04, objptr
05bac     04 24 06 F1 | 	add	local04, #4
05bb0     12 2D 02 FB | 	rdlong	local08, local04
05bb4     11 2C 0E F2 | 	cmp	local08, #17 wz
05bb8     2B 00 00 FF 
05bbc     D0 E5 85 F1 | 	sub	objptr, ##22480
05bc0     6C 00 90 AD |  if_e	jmp	#LR__0515
05bc4     2E 00 00 FF 
05bc8     08 E4 05 F1 | 	add	objptr, ##23560
05bcc     F2 2C 02 FB | 	rdlong	local08, objptr
05bd0     03 2C 66 F0 | 	shl	local08, #3
05bd4     02 00 00 FF 
05bd8     38 E4 85 F1 | 	sub	objptr, ##1080
05bdc     F2 2C 02 F1 | 	add	local08, objptr
05be0     04 2C 06 F1 | 	add	local08, #4
05be4     16 2D 02 FB | 	rdlong	local08, local08
05be8     12 2C 0E F2 | 	cmp	local08, #18 wz
05bec     2B 00 00 FF 
05bf0     D0 E5 85 F1 | 	sub	objptr, ##22480
05bf4     38 00 90 AD |  if_e	jmp	#LR__0515
05bf8     2E 00 00 FF 
05bfc     08 E4 05 F1 | 	add	objptr, ##23560
05c00     F2 32 02 FB | 	rdlong	local11, objptr
05c04     03 32 66 F0 | 	shl	local11, #3
05c08     02 00 00 FF 
05c0c     38 E4 85 F1 | 	sub	objptr, ##1080
05c10     F2 32 02 F1 | 	add	local11, objptr
05c14     04 32 06 F1 | 	add	local11, #4
05c18     19 33 02 FB | 	rdlong	local11, local11
05c1c     FE 33 0E F2 | 	cmp	local11, #510 wz
05c20     2B 00 00 FF 
05c24     D0 E5 85 F1 | 	sub	objptr, ##22480
05c28     16 FA 05 56 |  if_ne	mov	result1, #22
05c2c     68 00 90 5D |  if_ne	jmp	#LR__0517
05c30                 | LR__0515
05c30     2E 00 00 FF 
05c34     08 E4 05 F1 | 	add	objptr, ##23560
05c38     F2 24 02 FB | 	rdlong	local04, objptr
05c3c     01 24 06 F1 | 	add	local04, #1
05c40     F2 24 62 FC | 	wrlong	local04, objptr
05c44     03 24 66 F0 | 	shl	local04, #3
05c48     02 00 00 FF 
05c4c     38 E4 85 F1 | 	sub	objptr, ##1080
05c50     F2 24 02 F1 | 	add	local04, objptr
05c54     04 24 06 F1 | 	add	local04, #4
05c58     12 2D 02 FB | 	rdlong	local08, local04
05c5c     FE 2D 0E F2 | 	cmp	local08, #510 wz
05c60     2B 00 00 FF 
05c64     D0 E5 85 F1 | 	sub	objptr, ##22480
05c68     28 00 90 AD |  if_e	jmp	#LR__0516
05c6c     2E 00 00 FF 
05c70     08 E4 05 F1 | 	add	objptr, ##23560
05c74     F2 32 02 FB | 	rdlong	local11, objptr
05c78     0E 00 00 FF 
05c7c     1C E4 05 F1 | 	add	objptr, ##7196
05c80     F2 30 02 FB | 	rdlong	local10, objptr
05c84     3C 00 00 FF 
05c88     24 E4 85 F1 | 	sub	objptr, ##30756
05c8c     18 33 52 F2 | 	cmps	local11, local10 wc
05c90     E4 FA 9F CD |  if_b	jmp	#LR__0511
05c94                 | LR__0516
05c94                 | ' return 0
05c94     00 FA 05 F6 | 	mov	result1, #0
05c98                 | LR__0517
05c98     A7 F0 03 F6 | 	mov	ptra, fp
05c9c     B2 00 A0 FD | 	call	#popregs_
05ca0                 | _compile_print_ret
05ca0     2D 00 64 FD | 	ret
05ca4                 | 
05ca4                 | ' 
05ca4                 | ' function compile_if() as ulong  
05ca4                 | _compile_if
05ca4     05 4A 05 F6 | 	mov	COUNT_, #5
05ca8     A8 00 A0 FD | 	call	#pushregs_
05cac                 | _compile_if_enter
05cac     28 F3 BF FD | 	call	#_compile_converttoint
05cb0                 | ' return err
05cb0     2E 00 00 FF 
05cb4     08 E4 05 F1 | 	add	objptr, ##23560
05cb8     F2 FA 01 FB | 	rdlong	result1, objptr
05cbc     01 FA 05 F1 | 	add	result1, #1
05cc0     F2 FA 61 FC | 	wrlong	result1, objptr
05cc4     58 22 06 F6 | 	mov	local03, #88
05cc8     0F 25 02 F6 | 	mov	local04, local01
05ccc     10 27 02 F6 | 	mov	local05, local02
05cd0     11 1F 02 F6 | 	mov	local01, local03
05cd4     13 00 00 FF 
05cd8     38 E4 05 F1 | 	add	objptr, ##9784
05cdc     F2 12 02 FB | 	rdlong	arg01, objptr
05ce0     09 FB 01 F6 | 	mov	result1, arg01
05ce4     01 FA 65 F0 | 	shl	result1, #1
05ce8     09 FB 01 F1 | 	add	result1, arg01
05cec     02 FA 65 F0 | 	shl	result1, #2
05cf0     03 00 00 FF 
05cf4     00 E4 85 F1 | 	sub	objptr, ##1536
05cf8     F2 FA 01 F1 | 	add	result1, objptr
05cfc     FD 24 62 FC | 	wrlong	local04, result1
05d00     03 00 00 FF 
05d04     00 E4 05 F1 | 	add	objptr, ##1536
05d08     F2 12 02 FB | 	rdlong	arg01, objptr
05d0c     09 25 02 F6 | 	mov	local04, arg01
05d10     01 24 66 F0 | 	shl	local04, #1
05d14     09 25 02 F1 | 	add	local04, arg01
05d18     02 24 66 F0 | 	shl	local04, #2
05d1c     03 00 00 FF 
05d20     00 E4 85 F1 | 	sub	objptr, ##1536
05d24     F2 24 02 F1 | 	add	local04, objptr
05d28     04 24 06 F1 | 	add	local04, #4
05d2c     12 27 62 FC | 	wrlong	local05, local04
05d30     03 00 00 FF 
05d34     00 E4 05 F1 | 	add	objptr, ##1536
05d38     F2 24 02 FB | 	rdlong	local04, objptr
05d3c     12 27 02 F6 | 	mov	local05, local04
05d40     01 26 66 F0 | 	shl	local05, #1
05d44     12 27 02 F1 | 	add	local05, local04
05d48     02 26 66 F0 | 	shl	local05, #2
05d4c     03 00 00 FF 
05d50     00 E4 85 F1 | 	sub	objptr, ##1536
05d54     F2 26 02 F1 | 	add	local05, objptr
05d58     08 26 06 F1 | 	add	local05, #8
05d5c     13 1F 62 FC | 	wrlong	local01, local05
05d60     03 00 00 FF 
05d64     00 E4 05 F1 | 	add	objptr, ##1536
05d68     F2 24 02 FB | 	rdlong	local04, objptr
05d6c     01 24 06 F1 | 	add	local04, #1
05d70     F2 24 62 FC | 	wrlong	local04, objptr
05d74                 | ' 
05d74                 | ' 'print "In compile_if"
05d74                 | ' compile_int_fun_1p()
05d74                 | ' cmd=lparts(ct).token : ct+=1
05d74                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05d74                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05d74                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05d74     13 00 00 FF 
05d78     38 E4 85 F1 | 	sub	objptr, ##9784
05d7c     F2 26 02 FB | 	rdlong	local05, objptr
05d80     01 26 06 F1 | 	add	local05, #1
05d84     03 26 66 F0 | 	shl	local05, #3
05d88     02 00 00 FF 
05d8c     38 E4 85 F1 | 	sub	objptr, ##1080
05d90     F2 26 02 F1 | 	add	local05, objptr
05d94     13 13 02 FB | 	rdlong	arg01, local05
05d98     2B 00 00 FF 
05d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
05da0                 | ' 
05da0                 | ' select case s
05da0     1F 01 00 FF 
05da4     9A 15 06 F6 | 	mov	arg02, ##@LR__4164
05da8     BC EE B0 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     1B FA 05 A6 |  if_e	mov	result1, #27
05db4     00 FA 05 56 |  if_ne	mov	result1, #0
05db8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dbc     0C 00 90 AD |  if_e	jmp	#LR__0520
05dc0     05 12 06 F6 | 	mov	arg01, #5
05dc4     20 EC BF FD | 	call	#_compile_immediate_assign
05dc8     08 00 90 FD | 	jmp	#LR__0521
05dcc                 | LR__0520
05dcc     05 12 06 F6 | 	mov	arg01, #5
05dd0     58 E5 BF FD | 	call	#_compile_immediate
05dd4                 | LR__0521
05dd4                 | ' 
05dd4                 | ' 
05dd4                 | ' return 0
05dd4     00 FA 05 F6 | 	mov	result1, #0
05dd8     A7 F0 03 F6 | 	mov	ptra, fp
05ddc     B2 00 A0 FD | 	call	#popregs_
05de0                 | _compile_if_ret
05de0     2D 00 64 FD | 	ret
05de4                 | 
05de4                 | ' 
05de4                 | ' function compile_else() as ulong  
05de4                 | _compile_else
05de4     05 4A 05 F6 | 	mov	COUNT_, #5
05de8     A8 00 A0 FD | 	call	#pushregs_
05dec                 | _compile_else_enter
05dec     5A 22 06 F6 | 	mov	local03, #90
05df0     0F 25 02 F6 | 	mov	local04, local01
05df4     10 27 02 F6 | 	mov	local05, local02
05df8     11 1F 02 F6 | 	mov	local01, local03
05dfc     41 00 00 FF 
05e00     40 E4 05 F1 | 	add	objptr, ##33344
05e04     F2 12 02 FB | 	rdlong	arg01, objptr
05e08     09 FB 01 F6 | 	mov	result1, arg01
05e0c     01 FA 65 F0 | 	shl	result1, #1
05e10     09 FB 01 F1 | 	add	result1, arg01
05e14     02 FA 65 F0 | 	shl	result1, #2
05e18     03 00 00 FF 
05e1c     00 E4 85 F1 | 	sub	objptr, ##1536
05e20     F2 FA 01 F1 | 	add	result1, objptr
05e24     FD 24 62 FC | 	wrlong	local04, result1
05e28     03 00 00 FF 
05e2c     00 E4 05 F1 | 	add	objptr, ##1536
05e30     F2 FA 01 FB | 	rdlong	result1, objptr
05e34     FD 24 02 F6 | 	mov	local04, result1
05e38     01 24 66 F0 | 	shl	local04, #1
05e3c     FD 24 02 F1 | 	add	local04, result1
05e40     02 24 66 F0 | 	shl	local04, #2
05e44     03 00 00 FF 
05e48     00 E4 85 F1 | 	sub	objptr, ##1536
05e4c     F2 24 02 F1 | 	add	local04, objptr
05e50     04 24 06 F1 | 	add	local04, #4
05e54     12 27 62 FC | 	wrlong	local05, local04
05e58     03 00 00 FF 
05e5c     00 E4 05 F1 | 	add	objptr, ##1536
05e60     F2 24 02 FB | 	rdlong	local04, objptr
05e64     12 27 02 F6 | 	mov	local05, local04
05e68     01 26 66 F0 | 	shl	local05, #1
05e6c     12 27 02 F1 | 	add	local05, local04
05e70     02 26 66 F0 | 	shl	local05, #2
05e74     03 00 00 FF 
05e78     00 E4 85 F1 | 	sub	objptr, ##1536
05e7c     F2 26 02 F1 | 	add	local05, objptr
05e80     08 26 06 F1 | 	add	local05, #8
05e84     13 1F 62 FC | 	wrlong	local01, local05
05e88     03 00 00 FF 
05e8c     00 E4 05 F1 | 	add	objptr, ##1536
05e90     F2 24 02 FB | 	rdlong	local04, objptr
05e94     01 24 06 F1 | 	add	local04, #1
05e98     F2 24 62 FC | 	wrlong	local04, objptr
05e9c                 | ' 
05e9c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
05e9c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05e9c     13 00 00 FF 
05ea0     38 E4 85 F1 | 	sub	objptr, ##9784
05ea4     F2 26 02 FB | 	rdlong	local05, objptr
05ea8     01 26 06 F1 | 	add	local05, #1
05eac     03 26 66 F0 | 	shl	local05, #3
05eb0     02 00 00 FF 
05eb4     38 E4 85 F1 | 	sub	objptr, ##1080
05eb8     F2 26 02 F1 | 	add	local05, objptr
05ebc     13 13 02 FB | 	rdlong	arg01, local05
05ec0     2B 00 00 FF 
05ec4     D0 E5 85 F1 | 	sub	objptr, ##22480
05ec8                 | ' 
05ec8                 | ' select case s
05ec8     1F 01 00 FF 
05ecc     9A 15 06 F6 | 	mov	arg02, ##@LR__4164
05ed0     94 ED B0 FD | 	call	#__system___string_cmp
05ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed8     1B FA 05 A6 |  if_e	mov	result1, #27
05edc     00 FA 05 56 |  if_ne	mov	result1, #0
05ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee4     0C 00 90 AD |  if_e	jmp	#LR__0530
05ee8     05 12 06 F6 | 	mov	arg01, #5
05eec     F8 EA BF FD | 	call	#_compile_immediate_assign
05ef0     08 00 90 FD | 	jmp	#LR__0531
05ef4                 | LR__0530
05ef4     05 12 06 F6 | 	mov	arg01, #5
05ef8     30 E4 BF FD | 	call	#_compile_immediate
05efc                 | LR__0531
05efc                 | ' 
05efc                 | ' 
05efc                 | ' return 0
05efc     00 FA 05 F6 | 	mov	result1, #0
05f00     A7 F0 03 F6 | 	mov	ptra, fp
05f04     B2 00 A0 FD | 	call	#popregs_
05f08                 | _compile_else_ret
05f08     2D 00 64 FD | 	ret
05f0c                 | 
05f0c                 | ' 
05f0c                 | ' 
05f0c                 | ' function compile_dim() as ulong  
05f0c                 | _compile_dim
05f0c     11 4A 05 F6 | 	mov	COUNT_, #17
05f10     A8 00 A0 FD | 	call	#pushregs_
05f14     01 1E 06 F6 | 	mov	local01, #1
05f18     01 20 06 F6 | 	mov	local02, #1
05f1c     01 22 06 F6 | 	mov	local03, #1
05f20                 | ' 
05f20                 | ' dims(0)=1: dims(1)=1: dims(2)=1
05f20                 | ' 
05f20                 | ' if isname(lparts(ct).part$) then 
05f20     2E 00 00 FF 
05f24     08 E4 05 F1 | 	add	objptr, ##23560
05f28     F2 14 02 FB | 	rdlong	arg02, objptr
05f2c     03 14 66 F0 | 	shl	arg02, #3
05f30     02 00 00 FF 
05f34     38 E4 85 F1 | 	sub	objptr, ##1080
05f38     F2 14 02 F1 | 	add	arg02, objptr
05f3c     0A 13 02 FB | 	rdlong	arg01, arg02
05f40     2B 00 00 FF 
05f44     D0 E5 85 F1 | 	sub	objptr, ##22480
05f48     C4 D3 BF FD | 	call	#_isname
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     30 05 90 AD |  if_e	jmp	#LR__0564
05f54     2E 00 00 FF 
05f58     08 E4 05 F1 | 	add	objptr, ##23560
05f5c     F2 24 02 FB | 	rdlong	local04, objptr
05f60     03 24 66 F0 | 	shl	local04, #3
05f64     02 00 00 FF 
05f68     38 E4 85 F1 | 	sub	objptr, ##1080
05f6c     F2 24 02 F1 | 	add	local04, objptr
05f70     12 27 02 FB | 	rdlong	local05, local04
05f74     01 28 66 F6 | 	neg	local06, #1
05f78                 | '   varname2$=lparts(ct).part$ 
05f78                 | '   j=-1
05f78                 | '   if varnum>0 then
05f78     04 E4 85 F1 | 	sub	objptr, #4
05f7c     F2 2A 02 FB | 	rdlong	local07, objptr
05f80     2B 00 00 FF 
05f84     CC E5 85 F1 | 	sub	objptr, ##22476
05f88     01 2A 56 F2 | 	cmps	local07, #1 wc
05f8c     58 00 90 CD |  if_b	jmp	#LR__0542
05f90                 | '  '   print "in dim, varnum=";varnum
05f90                 | '     for i=0 to varnum-1
05f90     00 2C 06 F6 | 	mov	local08, #0
05f94     2B 00 00 FF 
05f98     CC E5 05 F1 | 	add	objptr, ##22476
05f9c     F2 2E 02 FB | 	rdlong	local09, objptr
05fa0     2B 00 00 FF 
05fa4     CC E5 85 F1 | 	sub	objptr, ##22476
05fa8                 | LR__0540
05fa8     17 2D 52 F2 | 	cmps	local08, local09 wc
05fac     38 00 90 3D |  if_ae	jmp	#LR__0541
05fb0                 | '       if variables(i).name=varname2$ then j=i : exit
05fb0     16 25 02 F6 | 	mov	local04, local08
05fb4     04 24 66 F0 | 	shl	local04, #4
05fb8     0B 00 00 FF 
05fbc     CC E5 05 F1 | 	add	objptr, ##6092
05fc0     F2 24 02 F1 | 	add	local04, objptr
05fc4     12 13 02 FB | 	rdlong	arg01, local04
05fc8     13 15 02 F6 | 	mov	arg02, local05
05fcc     0B 00 00 FF 
05fd0     CC E5 85 F1 | 	sub	objptr, ##6092
05fd4     90 EC B0 FD | 	call	#__system___string_cmp
05fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fdc     16 29 02 A6 |  if_e	mov	local06, local08
05fe0     01 2C 06 51 |  if_ne	add	local08, #1
05fe4     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
05fe8                 | LR__0541
05fe8                 | LR__0542
05fe8                 | '   if j<>-1 then printerror (42) : return 42
05fe8     FF FF 7F FF 
05fec     FF 29 0E F2 | 	cmp	local06, ##-1 wz
05ff0     10 00 90 AD |  if_e	jmp	#LR__0543
05ff4     2A 12 06 F6 | 	mov	arg01, #42
05ff8     50 B7 B0 FD | 	call	#_printerror
05ffc     2A FA 05 F6 | 	mov	result1, #42
06000     D8 05 90 FD | 	jmp	#LR__0566
06004                 | LR__0543
06004                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06004     2E 00 00 FF 
06008     08 E4 05 F1 | 	add	objptr, ##23560
0600c     F2 14 02 FB | 	rdlong	arg02, objptr
06010     01 14 06 F1 | 	add	arg02, #1
06014     03 14 66 F0 | 	shl	arg02, #3
06018     02 00 00 FF 
0601c     38 E4 85 F1 | 	sub	objptr, ##1080
06020     F2 14 02 F1 | 	add	arg02, objptr
06024     0A 13 02 FB | 	rdlong	arg01, arg02
06028     20 01 00 FF 
0602c     21 15 06 F6 | 	mov	arg02, ##@LR__4264
06030     2B 00 00 FF 
06034     D0 E5 85 F1 | 	sub	objptr, ##22480
06038     2C EC B0 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     50 00 90 AD |  if_e	jmp	#LR__0544
06044     2E 00 00 FF 
06048     08 E4 05 F1 | 	add	objptr, ##23560
0604c     F2 2E 02 FB | 	rdlong	local09, objptr
06050     01 2E 06 F1 | 	add	local09, #1
06054     03 2E 66 F0 | 	shl	local09, #3
06058     02 00 00 FF 
0605c     38 E4 85 F1 | 	sub	objptr, ##1080
06060     F2 2E 02 F1 | 	add	local09, objptr
06064     17 13 02 FB | 	rdlong	arg01, local09
06068     20 01 00 FF 
0606c     23 15 06 F6 | 	mov	arg02, ##@LR__4265
06070     2B 00 00 FF 
06074     D0 E5 85 F1 | 	sub	objptr, ##22480
06078     EC EB B0 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     10 00 90 AD |  if_e	jmp	#LR__0544
06084     2B 12 06 F6 | 	mov	arg01, #43
06088     C0 B6 B0 FD | 	call	#_printerror
0608c     2B FA 05 F6 | 	mov	result1, #43
06090     48 05 90 FD | 	jmp	#LR__0566
06094                 | LR__0544
06094                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06094     2E 00 00 FF 
06098     08 E4 05 F1 | 	add	objptr, ##23560
0609c     F2 14 02 FB | 	rdlong	arg02, objptr
060a0     01 14 06 F1 | 	add	arg02, #1
060a4     03 14 66 F0 | 	shl	arg02, #3
060a8     02 00 00 FF 
060ac     38 E4 85 F1 | 	sub	objptr, ##1080
060b0     F2 14 02 F1 | 	add	arg02, objptr
060b4     0A 13 02 FB | 	rdlong	arg01, arg02
060b8     20 01 00 FF 
060bc     26 15 06 F6 | 	mov	arg02, ##@LR__4266
060c0     2B 00 00 FF 
060c4     D0 E5 85 F1 | 	sub	objptr, ##22480
060c8     9C EB B0 FD | 	call	#__system___string_cmp
060cc     00 FA 0D F2 | 	cmp	result1, #0 wz
060d0     2E 00 00 AF 
060d4     08 E4 05 A1 |  if_e	add	objptr, ##23560
060d8     F2 30 02 AB |  if_e	rdlong	local10, objptr
060dc     2E 00 00 AF 
060e0     08 E4 85 A1 |  if_e	sub	objptr, ##23560
060e4     01 30 06 A1 |  if_e	add	local10, #1
060e8     7C 01 90 AD |  if_e	jmp	#LR__0550
060ec     2E 00 00 FF 
060f0     08 E4 05 F1 | 	add	objptr, ##23560
060f4     F2 30 02 FB | 	rdlong	local10, objptr
060f8     2E 00 00 FF 
060fc     08 E4 85 F1 | 	sub	objptr, ##23560
06100     02 30 06 F1 | 	add	local10, #2
06104     00 32 06 F6 | 	mov	local11, #0
06108                 | '   l=ct+2 : m=0 : do
06108                 | LR__0545
06108                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06108                 | '     if isdec(lparts(l).part$) then 
06108     18 25 02 F6 | 	mov	local04, local10
0610c     03 24 66 F0 | 	shl	local04, #3
06110     2B 00 00 FF 
06114     D0 E5 05 F1 | 	add	objptr, ##22480
06118     F2 24 02 F1 | 	add	local04, objptr
0611c     12 13 02 FB | 	rdlong	arg01, local04
06120     2B 00 00 FF 
06124     D0 E5 85 F1 | 	sub	objptr, ##22480
06128     88 D8 BF FD | 	call	#_isdec
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     44 00 90 AD |  if_e	jmp	#LR__0546
06134     19 35 02 F6 | 	mov	local12, local11
06138     0F 35 06 F1 | 	add	local12, #local01
0613c     18 2F 02 F6 | 	mov	local09, local10
06140     03 2E 66 F0 | 	shl	local09, #3
06144     2B 00 00 FF 
06148     D0 E5 05 F1 | 	add	objptr, ##22480
0614c     F2 2E 02 F1 | 	add	local09, objptr
06150     17 13 02 FB | 	rdlong	arg01, local09
06154     00 14 06 F6 | 	mov	arg02, #0
06158     2B 00 00 FF 
0615c     D0 E5 85 F1 | 	sub	objptr, ##22480
06160     68 1B B1 FD | 	call	#__system____builtin_atoi
06164     FD 36 02 F6 | 	mov	local13, result1
06168                 | 	'.live	local13
06168                 | 	'.live	local12
06168     00 34 8E F9 | 	altd	local12, #0
0616c     1B 35 02 F6 | 	mov	local12, local13
06170     01 32 06 F1 | 	add	local11, #1
06174     10 00 90 FD | 	jmp	#LR__0547
06178                 | LR__0546
06178     11 12 06 F6 | 	mov	arg01, #17
0617c     CC B5 B0 FD | 	call	#_printerror
06180                 | '       printerror (17)  : return(17)
06180     11 FA 05 F6 | 	mov	result1, #17
06184     54 04 90 FD | 	jmp	#LR__0566
06188                 | LR__0547
06188                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06188     18 25 02 F6 | 	mov	local04, local10
0618c     01 24 06 F1 | 	add	local04, #1
06190     03 24 66 F0 | 	shl	local04, #3
06194     2B 00 00 FF 
06198     D0 E5 05 F1 | 	add	objptr, ##22480
0619c     F2 24 02 F1 | 	add	local04, objptr
061a0     12 13 02 FB | 	rdlong	arg01, local04
061a4     20 01 00 FF 
061a8     29 15 06 F6 | 	mov	arg02, ##@LR__4267
061ac     2B 00 00 FF 
061b0     D0 E5 85 F1 | 	sub	objptr, ##22480
061b4     B0 EA B0 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     48 00 90 AD |  if_e	jmp	#LR__0548
061c0     18 37 02 F6 | 	mov	local13, local10
061c4     01 36 06 F1 | 	add	local13, #1
061c8     03 36 66 F0 | 	shl	local13, #3
061cc     2B 00 00 FF 
061d0     D0 E5 05 F1 | 	add	objptr, ##22480
061d4     F2 36 02 F1 | 	add	local13, objptr
061d8     1B 13 02 FB | 	rdlong	arg01, local13
061dc     20 01 00 FF 
061e0     2B 15 06 F6 | 	mov	arg02, ##@LR__4268
061e4     2B 00 00 FF 
061e8     D0 E5 85 F1 | 	sub	objptr, ##22480
061ec     78 EA B0 FD | 	call	#__system___string_cmp
061f0     00 FA 0D F2 | 	cmp	result1, #0 wz
061f4     10 00 90 AD |  if_e	jmp	#LR__0548
061f8     2C 12 06 F6 | 	mov	arg01, #44
061fc     4C B5 B0 FD | 	call	#_printerror
06200     2C FA 05 F6 | 	mov	result1, #44
06204     D4 03 90 FD | 	jmp	#LR__0566
06208                 | LR__0548
06208     02 30 06 F1 | 	add	local10, #2
0620c     18 25 02 F6 | 	mov	local04, local10
06210     01 24 86 F1 | 	sub	local04, #1
06214     03 24 66 F0 | 	shl	local04, #3
06218     2B 00 00 FF 
0621c     D0 E5 05 F1 | 	add	objptr, ##22480
06220     F2 24 02 F1 | 	add	local04, objptr
06224     12 13 02 FB | 	rdlong	arg01, local04
06228     20 01 00 FF 
0622c     2D 15 06 F6 | 	mov	arg02, ##@LR__4269
06230     2B 00 00 FF 
06234     D0 E5 85 F1 | 	sub	objptr, ##22480
06238     2C EA B0 FD | 	call	#__system___string_cmp
0623c     00 FA 0D F2 | 	cmp	result1, #0 wz
06240     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06244     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
06248                 | '   if m>3 then printerror(45): return(45)
06248     04 32 56 F2 | 	cmps	local11, #4 wc
0624c     10 00 90 CD |  if_b	jmp	#LR__0549
06250     2D 12 06 F6 | 	mov	arg01, #45
06254     F4 B4 B0 FD | 	call	#_printerror
06258     2D FA 05 F6 | 	mov	result1, #45
0625c     7C 03 90 FD | 	jmp	#LR__0566
06260                 | LR__0549
06260     00 39 06 F6 | 	mov	local14, #256
06264     0C 3A 06 F6 | 	mov	local15, #12
06268                 | LR__0550
06268                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06268                 | '   arraytype=array_no_type : esize=12
06268                 | ' 1350 
06268                 | '   if lparts(l).part$="as" then
06268     18 25 02 F6 | 	mov	local04, local10
0626c     03 24 66 F0 | 	shl	local04, #3
06270     2B 00 00 FF 
06274     D0 E5 05 F1 | 	add	objptr, ##22480
06278     F2 24 02 F1 | 	add	local04, objptr
0627c     12 13 02 FB | 	rdlong	arg01, local04
06280     20 01 00 FF 
06284     2F 15 06 F6 | 	mov	arg02, ##@LR__4270
06288     2B 00 00 FF 
0628c     D0 E5 85 F1 | 	sub	objptr, ##22480
06290     D4 E9 B0 FD | 	call	#__system___string_cmp
06294     00 FA 0D F2 | 	cmp	result1, #0 wz
06298     F8 01 90 5D |  if_ne	jmp	#LR__0565
0629c                 | '     select case lparts(l+1).part$
0629c     18 35 02 F6 | 	mov	local12, local10
062a0     01 34 06 F1 | 	add	local12, #1
062a4     03 34 66 F0 | 	shl	local12, #3
062a8     2B 00 00 FF 
062ac     D0 E5 05 F1 | 	add	objptr, ##22480
062b0     F2 34 02 F1 | 	add	local12, objptr
062b4     1A 3D 02 FB | 	rdlong	local16, local12
062b8     20 01 00 FF 
062bc     32 15 06 F6 | 	mov	arg02, ##@LR__4271
062c0     1E 13 02 F6 | 	mov	arg01, local16
062c4     2B 00 00 FF 
062c8     D0 E5 85 F1 | 	sub	objptr, ##22480
062cc     98 E9 B0 FD | 	call	#__system___string_cmp
062d0     00 FA 0D F2 | 	cmp	result1, #0 wz
062d4     0C 01 90 AD |  if_e	jmp	#LR__0551
062d8     20 01 00 FF 
062dc     37 15 06 F6 | 	mov	arg02, ##@LR__4272
062e0     1E 13 02 F6 | 	mov	arg01, local16
062e4     80 E9 B0 FD | 	call	#__system___string_cmp
062e8     00 FA 0D F2 | 	cmp	result1, #0 wz
062ec     00 01 90 AD |  if_e	jmp	#LR__0552
062f0     20 01 00 FF 
062f4     3D 15 06 F6 | 	mov	arg02, ##@LR__4273
062f8     1E 13 02 F6 | 	mov	arg01, local16
062fc     68 E9 B0 FD | 	call	#__system___string_cmp
06300     00 FA 0D F2 | 	cmp	result1, #0 wz
06304     F4 00 90 AD |  if_e	jmp	#LR__0553
06308     20 01 00 FF 
0630c     43 15 06 F6 | 	mov	arg02, ##@LR__4274
06310     1E 13 02 F6 | 	mov	arg01, local16
06314     50 E9 B0 FD | 	call	#__system___string_cmp
06318     00 FA 0D F2 | 	cmp	result1, #0 wz
0631c     E8 00 90 AD |  if_e	jmp	#LR__0554
06320     20 01 00 FF 
06324     4A 15 06 F6 | 	mov	arg02, ##@LR__4275
06328     1E 13 02 F6 | 	mov	arg01, local16
0632c     38 E9 B0 FD | 	call	#__system___string_cmp
06330     00 FA 0D F2 | 	cmp	result1, #0 wz
06334     DC 00 90 AD |  if_e	jmp	#LR__0555
06338     20 01 00 FF 
0633c     4F 15 06 F6 | 	mov	arg02, ##@LR__4276
06340     1E 13 02 F6 | 	mov	arg01, local16
06344     20 E9 B0 FD | 	call	#__system___string_cmp
06348     00 FA 0D F2 | 	cmp	result1, #0 wz
0634c     D0 00 90 AD |  if_e	jmp	#LR__0556
06350     20 01 00 FF 
06354     57 15 06 F6 | 	mov	arg02, ##@LR__4277
06358     1E 13 02 F6 | 	mov	arg01, local16
0635c     08 E9 B0 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     C4 00 90 AD |  if_e	jmp	#LR__0557
06368     20 01 00 FF 
0636c     5D 15 06 F6 | 	mov	arg02, ##@LR__4278
06370     1E 13 02 F6 | 	mov	arg01, local16
06374     F0 E8 B0 FD | 	call	#__system___string_cmp
06378     00 FA 0D F2 | 	cmp	result1, #0 wz
0637c     B8 00 90 AD |  if_e	jmp	#LR__0558
06380     20 01 00 FF 
06384     63 15 06 F6 | 	mov	arg02, ##@LR__4279
06388     1E 13 02 F6 | 	mov	arg01, local16
0638c     D8 E8 B0 FD | 	call	#__system___string_cmp
06390     00 FA 0D F2 | 	cmp	result1, #0 wz
06394     AC 00 90 AD |  if_e	jmp	#LR__0559
06398     20 01 00 FF 
0639c     6A 15 06 F6 | 	mov	arg02, ##@LR__4280
063a0     1E 13 02 F6 | 	mov	arg01, local16
063a4     C0 E8 B0 FD | 	call	#__system___string_cmp
063a8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ac     A0 00 90 AD |  if_e	jmp	#LR__0560
063b0     20 01 00 FF 
063b4     71 15 06 F6 | 	mov	arg02, ##@LR__4281
063b8     1E 13 02 F6 | 	mov	arg01, local16
063bc     A8 E8 B0 FD | 	call	#__system___string_cmp
063c0     00 FA 0D F2 | 	cmp	result1, #0 wz
063c4     94 00 90 AD |  if_e	jmp	#LR__0561
063c8     20 01 00 FF 
063cc     78 15 06 F6 | 	mov	arg02, ##@LR__4282
063d0     1E 13 02 F6 | 	mov	arg01, local16
063d4     90 E8 B0 FD | 	call	#__system___string_cmp
063d8     00 FA 0D F2 | 	cmp	result1, #0 wz
063dc     88 00 90 AD |  if_e	jmp	#LR__0562
063e0     90 00 90 FD | 	jmp	#LR__0563
063e4                 | LR__0551
063e4     01 39 06 F6 | 	mov	local14, #257
063e8     01 3A 06 F6 | 	mov	local15, #1
063ec     A4 00 90 FD | 	jmp	#LR__0565
063f0                 | LR__0552
063f0     02 39 06 F6 | 	mov	local14, #258
063f4     01 3A 06 F6 | 	mov	local15, #1
063f8     98 00 90 FD | 	jmp	#LR__0565
063fc                 | LR__0553
063fc     03 39 06 F6 | 	mov	local14, #259
06400     02 3A 06 F6 | 	mov	local15, #2
06404     8C 00 90 FD | 	jmp	#LR__0565
06408                 | LR__0554
06408     04 39 06 F6 | 	mov	local14, #260
0640c     02 3A 06 F6 | 	mov	local15, #2
06410     80 00 90 FD | 	jmp	#LR__0565
06414                 | LR__0555
06414     05 39 06 F6 | 	mov	local14, #261
06418     04 3A 06 F6 | 	mov	local15, #4
0641c     74 00 90 FD | 	jmp	#LR__0565
06420                 | LR__0556
06420     05 39 06 F6 | 	mov	local14, #261
06424     04 3A 06 F6 | 	mov	local15, #4
06428     68 00 90 FD | 	jmp	#LR__0565
0642c                 | LR__0557
0642c     06 39 06 F6 | 	mov	local14, #262
06430     04 3A 06 F6 | 	mov	local15, #4
06434     5C 00 90 FD | 	jmp	#LR__0565
06438                 | LR__0558
06438     07 39 06 F6 | 	mov	local14, #263
0643c     08 3A 06 F6 | 	mov	local15, #8
06440     50 00 90 FD | 	jmp	#LR__0565
06444                 | LR__0559
06444     08 39 06 F6 | 	mov	local14, #264
06448     08 3A 06 F6 | 	mov	local15, #8
0644c     44 00 90 FD | 	jmp	#LR__0565
06450                 | LR__0560
06450     09 39 06 F6 | 	mov	local14, #265
06454     04 3A 06 F6 | 	mov	local15, #4
06458     38 00 90 FD | 	jmp	#LR__0565
0645c                 | LR__0561
0645c     0A 39 06 F6 | 	mov	local14, #266
06460     08 3A 06 F6 | 	mov	local15, #8
06464     2C 00 90 FD | 	jmp	#LR__0565
06468                 | LR__0562
06468     0B 39 06 F6 | 	mov	local14, #267
0646c     04 3A 06 F6 | 	mov	local15, #4
06470     20 00 90 FD | 	jmp	#LR__0565
06474                 | LR__0563
06474     2F 12 06 F6 | 	mov	arg01, #47
06478     D0 B2 B0 FD | 	call	#_printerror
0647c     2F FA 05 F6 | 	mov	result1, #47
06480     58 01 90 FD | 	jmp	#LR__0566
06484                 | LR__0564
06484     2E 12 06 F6 | 	mov	arg01, #46
06488     C0 B2 B0 FD | 	call	#_printerror
0648c                 | '   printerror(46): return 46
0648c     2E FA 05 F6 | 	mov	result1, #46
06490     48 01 90 FD | 	jmp	#LR__0566
06494                 | LR__0565
06494     0F 3B 02 FD | 	qmul	local15, local01
06498     18 2A 62 FD | 	getqx	local07
0649c     10 2B 02 FD | 	qmul	local07, local02
064a0     18 3C 62 FD | 	getqx	local16
064a4     11 3D 02 FD | 	qmul	local16, local03
064a8     52 00 00 FF 
064ac     3C E4 05 F1 | 	add	objptr, ##42044
064b0     F2 3E 02 FB | 	rdlong	local17, objptr
064b4     1C 15 02 F6 | 	mov	arg02, local14
064b8     01 16 06 F6 | 	mov	arg03, #1
064bc     00 18 06 F6 | 	mov	arg04, #0
064c0                 | '     return fill(addr, pattern, count, listPtr, 4)
064c0     04 1A 06 F6 | 	mov	arg05, #4
064c4     18 3C 62 FD | 	getqx	local16
064c8     1E 3F 82 F1 | 	sub	local17, local16
064cc     10 3E 86 F1 | 	sub	local17, #16
064d0     F2 3E 62 FC | 	wrlong	local17, objptr
064d4     1F 13 02 F6 | 	mov	arg01, local17
064d8     46 00 00 FF 
064dc     7C E5 85 F1 | 	sub	objptr, ##36220
064e0     A8 DD B0 FD | 	call	#_psram_spin2_fill
064e4     1F 13 02 F6 | 	mov	arg01, local17
064e8     02 12 06 F1 | 	add	arg01, #2
064ec     1D 15 02 F6 | 	mov	arg02, local15
064f0     01 16 06 F6 | 	mov	arg03, #1
064f4     00 18 06 F6 | 	mov	arg04, #0
064f8                 | '     return fill(addr, pattern, count, listPtr, 1)
064f8     01 1A 06 F6 | 	mov	arg05, #1
064fc     8C DD B0 FD | 	call	#_psram_spin2_fill
06500     1F 13 02 F6 | 	mov	arg01, local17
06504     04 12 06 F1 | 	add	arg01, #4
06508     0F 15 02 F6 | 	mov	arg02, local01
0650c     01 16 06 F6 | 	mov	arg03, #1
06510     00 18 06 F6 | 	mov	arg04, #0
06514                 | '     return fill(addr, pattern, count, listPtr, 4)
06514     04 1A 06 F6 | 	mov	arg05, #4
06518     70 DD B0 FD | 	call	#_psram_spin2_fill
0651c     1F 13 02 F6 | 	mov	arg01, local17
06520     08 12 06 F1 | 	add	arg01, #8
06524     10 15 02 F6 | 	mov	arg02, local02
06528     01 16 06 F6 | 	mov	arg03, #1
0652c     00 18 06 F6 | 	mov	arg04, #0
06530                 | '     return fill(addr, pattern, count, listPtr, 4)
06530     04 1A 06 F6 | 	mov	arg05, #4
06534     54 DD B0 FD | 	call	#_psram_spin2_fill
06538     1F 13 02 F6 | 	mov	arg01, local17
0653c     0C 12 06 F1 | 	add	arg01, #12
06540     11 15 02 F6 | 	mov	arg02, local03
06544     01 16 06 F6 | 	mov	arg03, #1
06548     00 18 06 F6 | 	mov	arg04, #0
0654c                 | '     return fill(addr, pattern, count, listPtr, 4)
0654c     04 1A 06 F6 | 	mov	arg05, #4
06550     38 DD B0 FD | 	call	#_psram_spin2_fill
06554     20 00 00 FF 
06558     0C E5 05 F1 | 	add	objptr, ##16652
0655c     F2 24 02 FB | 	rdlong	local04, objptr
06560     04 24 66 F0 | 	shl	local04, #4
06564     20 00 00 FF 
06568     00 E4 85 F1 | 	sub	objptr, ##16384
0656c     F2 24 02 F1 | 	add	local04, objptr
06570     12 27 62 FC | 	wrlong	local05, local04
06574     20 00 00 FF 
06578     00 E4 05 F1 | 	add	objptr, ##16384
0657c     F2 24 02 FB | 	rdlong	local04, objptr
06580     04 24 66 F0 | 	shl	local04, #4
06584     20 00 00 FF 
06588     00 E4 85 F1 | 	sub	objptr, ##16384
0658c     F2 24 02 F1 | 	add	local04, objptr
06590     04 24 06 F1 | 	add	local04, #4
06594     12 3F 62 FC | 	wrlong	local17, local04
06598     20 00 00 FF 
0659c     00 E4 05 F1 | 	add	objptr, ##16384
065a0     F2 24 02 FB | 	rdlong	local04, objptr
065a4     04 24 66 F0 | 	shl	local04, #4
065a8     20 00 00 FF 
065ac     00 E4 85 F1 | 	sub	objptr, ##16384
065b0     F2 24 02 F1 | 	add	local04, objptr
065b4     0C 24 06 F1 | 	add	local04, #12
065b8     12 39 62 FC | 	wrlong	local14, local04
065bc     20 00 00 FF 
065c0     00 E4 05 F1 | 	add	objptr, ##16384
065c4     F2 2A 02 FB | 	rdlong	local07, objptr
065c8     01 2A 06 F1 | 	add	local07, #1
065cc     F2 2A 62 FC | 	wrlong	local07, objptr
065d0     2B 00 00 FF 
065d4     CC E5 85 F1 | 	sub	objptr, ##22476
065d8                 | ' 'print dims(0),dims(1),dims(2),arraytype
065d8                 | ' 
065d8                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
065d8                 | ' arrayptr=memtop-arraysize-16
065d8                 | ' memtop=arrayptr
065d8                 | ' 
065d8                 | ' pslpoke arrayptr,arraytype
065d8                 | ' pspoke arrayptr+2,esize
065d8                 | ' pslpoke arrayptr+4,dims(0)
065d8                 | ' pslpoke arrayptr+8,dims(1)
065d8                 | ' pslpoke arrayptr+12,dims(2)
065d8                 | ' 
065d8                 | ' variables(varnum).name=varname2$
065d8                 | ' variables(varnum).value.uresult=arrayptr
065d8                 | ' variables(varnum).vartype=arraytype
065d8                 | ' varnum+=1
065d8                 | ' 
065d8                 | ' return 0
065d8     00 FA 05 F6 | 	mov	result1, #0
065dc                 | LR__0566
065dc     A7 F0 03 F6 | 	mov	ptra, fp
065e0     B2 00 A0 FD | 	call	#popregs_
065e4                 | _compile_dim_ret
065e4     2D 00 64 FD | 	ret
065e8                 | 
065e8                 | ' 
065e8                 | ' 
065e8                 | ' function compile_for() as ulong  
065e8                 | _compile_for
065e8     07 4A 05 F6 | 	mov	COUNT_, #7
065ec     A8 00 A0 FD | 	call	#pushregs_
065f0                 | ' 
065f0                 | ' 
065f0                 | ' 
065f0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
065f0     2E 00 00 FF 
065f4     08 E4 05 F1 | 	add	objptr, ##23560
065f8     F2 14 02 FB | 	rdlong	arg02, objptr
065fc     01 14 06 F1 | 	add	arg02, #1
06600     03 14 66 F0 | 	shl	arg02, #3
06604     02 00 00 FF 
06608     38 E4 85 F1 | 	sub	objptr, ##1080
0660c     F2 14 02 F1 | 	add	arg02, objptr
06610     0A 13 02 FB | 	rdlong	arg01, arg02
06614     2B 00 00 FF 
06618     D0 E5 85 F1 | 	sub	objptr, ##22480
0661c                 | ' 
0661c                 | ' select case s
0661c     1F 01 00 FF 
06620     9A 15 06 F6 | 	mov	arg02, ##@LR__4164
06624     40 E6 B0 FD | 	call	#__system___string_cmp
06628     00 FA 0D F2 | 	cmp	result1, #0 wz
0662c     1B FA 05 A6 |  if_e	mov	result1, #27
06630     00 FA 05 56 |  if_ne	mov	result1, #0
06634     00 FA 0D F2 | 	cmp	result1, #0 wz
06638     0C 00 90 AD |  if_e	jmp	#LR__0570
0663c     05 12 06 F6 | 	mov	arg01, #5
06640     A4 E3 BF FD | 	call	#_compile_immediate_assign
06644     10 00 90 FD | 	jmp	#LR__0571
06648                 | LR__0570
06648     20 12 06 F6 | 	mov	arg01, #32
0664c     14 E8 BF FD | 	call	#_compile_error
06650     20 FA 05 F6 | 	mov	result1, #32
06654     AC 02 90 FD | 	jmp	#LR__0576
06658                 | LR__0571
06658     41 00 00 FF 
0665c     40 E4 05 F1 | 	add	objptr, ##33344
06660     F2 12 02 FB | 	rdlong	arg01, objptr
06664     09 25 02 F6 | 	mov	local04, arg01
06668     01 24 86 F1 | 	sub	local04, #1
0666c     12 15 02 F6 | 	mov	arg02, local04
06670     01 14 66 F0 | 	shl	arg02, #1
06674     12 15 02 F1 | 	add	arg02, local04
06678     02 14 66 F0 | 	shl	arg02, #2
0667c     03 00 00 FF 
06680     00 E4 85 F1 | 	sub	objptr, ##1536
06684     F2 14 02 F1 | 	add	arg02, objptr
06688     0A 1F 02 FB | 	rdlong	local01, arg02
0668c     04 14 06 F1 | 	add	arg02, #4
06690     0A 27 02 FB | 	rdlong	local05, arg02
06694     01 12 86 F1 | 	sub	arg01, #1
06698     09 29 02 F6 | 	mov	local06, arg01
0669c     01 28 66 F0 | 	shl	local06, #1
066a0     09 29 02 F1 | 	add	local06, arg01
066a4     02 28 66 F0 | 	shl	local06, #2
066a8     F2 28 02 F1 | 	add	local06, objptr
066ac     08 28 06 F1 | 	add	local06, #8
066b0     14 13 02 FB | 	rdlong	arg01, local06
066b4     13 21 02 F6 | 	mov	local02, local05
066b8     09 23 02 F6 | 	mov	local03, arg01
066bc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
066bc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
066bc     17 22 0E F2 | 	cmp	local03, #23 wz
066c0     3E 00 00 FF 
066c4     40 E4 85 F1 | 	sub	objptr, ##31808
066c8     10 00 90 AD |  if_e	jmp	#LR__0572
066cc     22 12 06 F6 | 	mov	arg01, #34
066d0     90 E7 BF FD | 	call	#_compile_error
066d4     22 FA 05 F6 | 	mov	result1, #34
066d8     28 02 90 FD | 	jmp	#LR__0576
066dc                 | LR__0572
066dc     0F 2B 02 F6 | 	mov	local07, local01
066e0                 | ' varnum=t1.result.uresult
066e0                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
066e0     2E 00 00 FF 
066e4     08 E4 05 F1 | 	add	objptr, ##23560
066e8     F2 24 02 FB | 	rdlong	local04, objptr
066ec     03 24 66 F0 | 	shl	local04, #3
066f0     02 00 00 FF 
066f4     38 E4 85 F1 | 	sub	objptr, ##1080
066f8     F2 24 02 F1 | 	add	local04, objptr
066fc     12 13 02 FB | 	rdlong	arg01, local04
06700     20 01 00 FF 
06704     7F 15 06 F6 | 	mov	arg02, ##@LR__4283
06708     2B 00 00 FF 
0670c     D0 E5 85 F1 | 	sub	objptr, ##22480
06710     54 E5 B0 FD | 	call	#__system___string_cmp
06714     00 FA 0D F2 | 	cmp	result1, #0 wz
06718     10 00 90 AD |  if_e	jmp	#LR__0573
0671c     21 12 06 F6 | 	mov	arg01, #33
06720     40 E7 BF FD | 	call	#_compile_error
06724     21 FA 05 F6 | 	mov	result1, #33
06728     D8 01 90 FD | 	jmp	#LR__0576
0672c                 | LR__0573
0672c     2E 00 00 FF 
06730     08 E4 05 F1 | 	add	objptr, ##23560
06734     F2 28 02 FB | 	rdlong	local06, objptr
06738     01 28 06 F1 | 	add	local06, #1
0673c     F2 28 62 FC | 	wrlong	local06, objptr
06740     2E 00 00 FF 
06744     08 E4 85 F1 | 	sub	objptr, ##23560
06748     98 0B B0 FD | 	call	#_expr
0674c                 | ' ct+=1
0674c                 | ' expr()  ' there is "to" value pushed on the stack
0674c                 | ' if lparts(ct).part$="step" then 
0674c     2E 00 00 FF 
06750     08 E4 05 F1 | 	add	objptr, ##23560
06754     F2 24 02 FB | 	rdlong	local04, objptr
06758     03 24 66 F0 | 	shl	local04, #3
0675c     02 00 00 FF 
06760     38 E4 85 F1 | 	sub	objptr, ##1080
06764     F2 24 02 F1 | 	add	local04, objptr
06768     12 13 02 FB | 	rdlong	arg01, local04
0676c     20 01 00 FF 
06770     82 15 06 F6 | 	mov	arg02, ##@LR__4284
06774     2B 00 00 FF 
06778     D0 E5 85 F1 | 	sub	objptr, ##22480
0677c     E8 E4 B0 FD | 	call	#__system___string_cmp
06780     00 FA 0D F2 | 	cmp	result1, #0 wz
06784     24 00 90 5D |  if_ne	jmp	#LR__0574
06788     2E 00 00 FF 
0678c     08 E4 05 F1 | 	add	objptr, ##23560
06790     F2 28 02 FB | 	rdlong	local06, objptr
06794     01 28 06 F1 | 	add	local06, #1
06798     F2 28 62 FC | 	wrlong	local06, objptr
0679c     2E 00 00 FF 
067a0     08 E4 85 F1 | 	sub	objptr, ##23560
067a4     3C 0B B0 FD | 	call	#_expr
067a8     78 00 90 FD | 	jmp	#LR__0575
067ac                 | LR__0574
067ac     41 00 00 FF 
067b0     40 E4 05 F1 | 	add	objptr, ##33344
067b4     F2 28 02 FB | 	rdlong	local06, objptr
067b8     14 27 02 F6 | 	mov	local05, local06
067bc     01 26 66 F0 | 	shl	local05, #1
067c0     14 27 02 F1 | 	add	local05, local06
067c4     02 26 66 F0 | 	shl	local05, #2
067c8     03 00 00 FF 
067cc     00 E4 85 F1 | 	sub	objptr, ##1536
067d0     F2 26 02 F1 | 	add	local05, objptr
067d4     08 26 06 F1 | 	add	local05, #8
067d8     13 39 68 FC | 	wrlong	#28, local05
067dc     03 00 00 FF 
067e0     00 E4 05 F1 | 	add	objptr, ##1536
067e4     F2 28 02 FB | 	rdlong	local06, objptr
067e8     14 27 02 F6 | 	mov	local05, local06
067ec     01 26 66 F0 | 	shl	local05, #1
067f0     14 27 02 F1 | 	add	local05, local06
067f4     02 26 66 F0 | 	shl	local05, #2
067f8     03 00 00 FF 
067fc     00 E4 85 F1 | 	sub	objptr, ##1536
06800     F2 26 02 F1 | 	add	local05, objptr
06804     13 03 68 FC | 	wrlong	#1, local05
06808     03 00 00 FF 
0680c     00 E4 05 F1 | 	add	objptr, ##1536
06810     F2 28 02 FB | 	rdlong	local06, objptr
06814     01 28 06 F1 | 	add	local06, #1
06818     F2 28 62 FC | 	wrlong	local06, objptr
0681c     41 00 00 FF 
06820     40 E4 85 F1 | 	sub	objptr, ##33344
06824                 | LR__0575
06824     41 00 00 FF 
06828     40 E4 05 F1 | 	add	objptr, ##33344
0682c     F2 28 02 FB | 	rdlong	local06, objptr
06830     14 27 02 F6 | 	mov	local05, local06
06834     01 26 66 F0 | 	shl	local05, #1
06838     14 27 02 F1 | 	add	local05, local06
0683c     02 26 66 F0 | 	shl	local05, #2
06840     03 00 00 FF 
06844     00 E4 85 F1 | 	sub	objptr, ##1536
06848     F2 26 02 F1 | 	add	local05, objptr
0684c     08 26 06 F1 | 	add	local05, #8
06850     13 39 68 FC | 	wrlong	#28, local05
06854     03 00 00 FF 
06858     00 E4 05 F1 | 	add	objptr, ##1536
0685c     F2 28 02 FB | 	rdlong	local06, objptr
06860     14 27 02 F6 | 	mov	local05, local06
06864     01 26 66 F0 | 	shl	local05, #1
06868     14 27 02 F1 | 	add	local05, local06
0686c     02 26 66 F0 | 	shl	local05, #2
06870     03 00 00 FF 
06874     00 E4 85 F1 | 	sub	objptr, ##1536
06878     F2 26 02 F1 | 	add	local05, objptr
0687c     13 2B 62 FC | 	wrlong	local07, local05
06880     03 00 00 FF 
06884     00 E4 05 F1 | 	add	objptr, ##1536
06888     F2 2A 02 FB | 	rdlong	local07, objptr
0688c     01 2A 06 F1 | 	add	local07, #1
06890     F2 2A 62 FC | 	wrlong	local07, objptr
06894     15 29 02 F6 | 	mov	local06, local07
06898     01 28 66 F0 | 	shl	local06, #1
0689c     15 29 02 F1 | 	add	local06, local07
068a0     02 28 66 F0 | 	shl	local06, #2
068a4     03 00 00 FF 
068a8     00 E4 85 F1 | 	sub	objptr, ##1536
068ac     F2 28 02 F1 | 	add	local06, objptr
068b0     08 28 06 F1 | 	add	local06, #8
068b4     14 95 68 FC | 	wrlong	#74, local06
068b8     03 00 00 FF 
068bc     00 E4 05 F1 | 	add	objptr, ##1536
068c0     F2 2A 02 FB | 	rdlong	local07, objptr
068c4     15 29 02 F6 | 	mov	local06, local07
068c8     01 28 66 F0 | 	shl	local06, #1
068cc     15 29 02 F1 | 	add	local06, local07
068d0     02 28 66 F0 | 	shl	local06, #2
068d4     03 00 00 FF 
068d8     00 E4 85 F1 | 	sub	objptr, ##1536
068dc     F2 28 02 F1 | 	add	local06, objptr
068e0     14 01 68 FC | 	wrlong	#0, local06
068e4     03 00 00 FF 
068e8     00 E4 05 F1 | 	add	objptr, ##1536
068ec     F2 2A 02 FB | 	rdlong	local07, objptr
068f0     01 2A 06 F1 | 	add	local07, #1
068f4     F2 2A 62 FC | 	wrlong	local07, objptr
068f8     41 00 00 FF 
068fc     40 E4 85 F1 | 	sub	objptr, ##33344
06900                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06900                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06900                 | ' 
06900                 | ' 
06900                 | ' return 0
06900     00 FA 05 F6 | 	mov	result1, #0
06904                 | LR__0576
06904     A7 F0 03 F6 | 	mov	ptra, fp
06908     B2 00 A0 FD | 	call	#popregs_
0690c                 | _compile_for_ret
0690c     2D 00 64 FD | 	ret
06910                 | 
06910                 | ' 
06910                 | ' 
06910                 | ' sub do_for()
06910                 | _do_for
06910     05 4A 05 F6 | 	mov	COUNT_, #5
06914     A8 00 A0 FD | 	call	#pushregs_
06918     50 00 00 FF 
0691c     9C E5 05 F1 | 	add	objptr, ##41372
06920     F2 24 02 FB | 	rdlong	local04, objptr
06924     01 24 06 F1 | 	add	local04, #1
06928     F2 24 62 FC | 	wrlong	local04, objptr
0692c     50 00 00 FF 
06930     9C E5 85 F1 | 	sub	objptr, ##41372
06934     48 1D B0 FD | 	call	#_pop
06938     FD 1E 02 F6 | 	mov	local01, result1
0693c     FE 20 02 F6 | 	mov	local02, result2
06940     FF 22 02 F6 | 	mov	local03, result3
06944     50 00 00 FF 
06948     9C E5 05 F1 | 	add	objptr, ##41372
0694c     F2 24 02 FB | 	rdlong	local04, objptr
06950     12 27 02 F6 | 	mov	local05, local04
06954     02 26 66 F0 | 	shl	local05, #2
06958     12 27 02 F1 | 	add	local05, local04
0695c     02 26 66 F0 | 	shl	local05, #2
06960     07 00 00 FF 
06964     40 E5 85 F1 | 	sub	objptr, ##3904
06968     F2 26 02 F1 | 	add	local05, objptr
0696c     08 26 06 F1 | 	add	local05, #8
06970     13 1F 62 FC | 	wrlong	local01, local05
06974     49 00 00 FF 
06978     5C E4 85 F1 | 	sub	objptr, ##37468
0697c     00 1D B0 FD | 	call	#_pop
06980     FD 1E 02 F6 | 	mov	local01, result1
06984     FE 20 02 F6 | 	mov	local02, result2
06988     FF 22 02 F6 | 	mov	local03, result3
0698c     50 00 00 FF 
06990     9C E5 05 F1 | 	add	objptr, ##41372
06994     F2 24 02 FB | 	rdlong	local04, objptr
06998     12 27 02 F6 | 	mov	local05, local04
0699c     02 26 66 F0 | 	shl	local05, #2
069a0     12 27 02 F1 | 	add	local05, local04
069a4     02 26 66 F0 | 	shl	local05, #2
069a8     07 00 00 FF 
069ac     40 E5 85 F1 | 	sub	objptr, ##3904
069b0     F2 26 02 F1 | 	add	local05, objptr
069b4     0C 26 06 F1 | 	add	local05, #12
069b8     13 1F 62 FC | 	wrlong	local01, local05
069bc     49 00 00 FF 
069c0     5C E4 85 F1 | 	sub	objptr, ##37468
069c4     B8 1C B0 FD | 	call	#_pop
069c8     FD 1E 02 F6 | 	mov	local01, result1
069cc     FE 20 02 F6 | 	mov	local02, result2
069d0     FF 22 02 F6 | 	mov	local03, result3
069d4     50 00 00 FF 
069d8     9C E5 05 F1 | 	add	objptr, ##41372
069dc     F2 24 02 FB | 	rdlong	local04, objptr
069e0     12 27 02 F6 | 	mov	local05, local04
069e4     02 26 66 F0 | 	shl	local05, #2
069e8     12 27 02 F1 | 	add	local05, local04
069ec     02 26 66 F0 | 	shl	local05, #2
069f0     07 00 00 FF 
069f4     40 E5 85 F1 | 	sub	objptr, ##3904
069f8     F2 26 02 F1 | 	add	local05, objptr
069fc     10 26 06 F1 | 	add	local05, #16
06a00     13 1F 62 FC | 	wrlong	local01, local05
06a04                 | ' fortop+=1
06a04                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06a04                 | ' 'if i> maxfor then printerror(36) : return
06a04                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06a04                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06a04                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06a04                 | ' if compiledline(lineptr_e).result_type=token_end then
06a04     08 00 00 FF 
06a08     18 E4 85 F1 | 	sub	objptr, ##4120
06a0c     F2 1E 02 FB | 	rdlong	local01, objptr
06a10     0F 27 02 F6 | 	mov	local05, local01
06a14     01 26 66 F0 | 	shl	local05, #1
06a18     0F 27 02 F1 | 	add	local05, local01
06a1c     02 26 66 F0 | 	shl	local05, #2
06a20     03 00 00 FF 
06a24     04 E4 85 F1 | 	sub	objptr, ##1540
06a28     F2 26 02 F1 | 	add	local05, objptr
06a2c     08 26 06 F1 | 	add	local05, #8
06a30     13 27 02 FB | 	rdlong	local05, local05
06a34     FE 27 0E F2 | 	cmp	local05, #510 wz
06a38     3E 00 00 FF 
06a3c     40 E4 85 F1 | 	sub	objptr, ##31808
06a40     70 00 90 5D |  if_ne	jmp	#LR__0580
06a44     50 00 00 FF 
06a48     9C E5 05 F1 | 	add	objptr, ##41372
06a4c     F2 1E 02 FB | 	rdlong	local01, objptr
06a50     0F 27 02 F6 | 	mov	local05, local01
06a54     02 26 66 F0 | 	shl	local05, #2
06a58     0F 27 02 F1 | 	add	local05, local01
06a5c     02 26 66 F0 | 	shl	local05, #2
06a60     07 00 00 FF 
06a64     40 E5 85 F1 | 	sub	objptr, ##3904
06a68     F2 26 02 F1 | 	add	local05, objptr
06a6c     07 00 00 FF 
06a70     18 E5 05 F1 | 	add	objptr, ##3864
06a74     F2 1E 02 FB | 	rdlong	local01, objptr
06a78     13 1F 62 FC | 	wrlong	local01, local05
06a7c     28 E4 05 F1 | 	add	objptr, #40
06a80     F2 1E 02 FB | 	rdlong	local01, objptr
06a84     0F 27 02 F6 | 	mov	local05, local01
06a88     02 26 66 F0 | 	shl	local05, #2
06a8c     0F 27 02 F1 | 	add	local05, local01
06a90     02 26 66 F0 | 	shl	local05, #2
06a94     07 00 00 FF 
06a98     40 E5 85 F1 | 	sub	objptr, ##3904
06a9c     F2 26 02 F1 | 	add	local05, objptr
06aa0     04 26 06 F1 | 	add	local05, #4
06aa4     13 01 68 FC | 	wrlong	#0, local05
06aa8     49 00 00 FF 
06aac     5C E4 85 F1 | 	sub	objptr, ##37468
06ab0     7C 00 90 FD | 	jmp	#LR__0581
06ab4                 | LR__0580
06ab4     50 00 00 FF 
06ab8     9C E5 05 F1 | 	add	objptr, ##41372
06abc     F2 1E 02 FB | 	rdlong	local01, objptr
06ac0     0F 27 02 F6 | 	mov	local05, local01
06ac4     02 26 66 F0 | 	shl	local05, #2
06ac8     0F 27 02 F1 | 	add	local05, local01
06acc     02 26 66 F0 | 	shl	local05, #2
06ad0     07 00 00 FF 
06ad4     40 E5 85 F1 | 	sub	objptr, ##3904
06ad8     F2 26 02 F1 | 	add	local05, objptr
06adc     07 00 00 FF 
06ae0     20 E5 05 F1 | 	add	objptr, ##3872
06ae4     F2 1E 02 FB | 	rdlong	local01, objptr
06ae8     13 1F 62 FC | 	wrlong	local01, local05
06aec     20 E4 05 F1 | 	add	objptr, #32
06af0     F2 1E 02 FB | 	rdlong	local01, objptr
06af4     0F 27 02 F6 | 	mov	local05, local01
06af8     02 26 66 F0 | 	shl	local05, #2
06afc     0F 27 02 F1 | 	add	local05, local01
06b00     02 26 66 F0 | 	shl	local05, #2
06b04     07 00 00 FF 
06b08     40 E5 85 F1 | 	sub	objptr, ##3904
06b0c     F2 26 02 F1 | 	add	local05, objptr
06b10     08 00 00 FF 
06b14     18 E4 85 F1 | 	sub	objptr, ##4120
06b18     F2 1E 02 FB | 	rdlong	local01, objptr
06b1c     41 00 00 FF 
06b20     44 E4 85 F1 | 	sub	objptr, ##33348
06b24     01 1E 06 F1 | 	add	local01, #1
06b28     04 26 06 F1 | 	add	local05, #4
06b2c     13 1F 62 FC | 	wrlong	local01, local05
06b30                 | LR__0581
06b30     A7 F0 03 F6 | 	mov	ptra, fp
06b34     B2 00 A0 FD | 	call	#popregs_
06b38                 | _do_for_ret
06b38     2D 00 64 FD | 	ret
06b3c                 | 
06b3c                 | ' 
06b3c                 | ' ' now do_next todo
06b3c                 | ' 
06b3c                 | ' sub do_next()
06b3c                 | _do_next
06b3c     04 4A 05 F6 | 	mov	COUNT_, #4
06b40     A8 00 A0 FD | 	call	#pushregs_
06b44     38 1B B0 FD | 	call	#_pop
06b48     FD 1E 02 F6 | 	mov	local01, result1
06b4c     FE 20 02 F6 | 	mov	local02, result2
06b50     FF 22 02 F6 | 	mov	local03, result3
06b54                 | ' 
06b54                 | ' t1=pop() :varnum=t1.result.uresult
06b54                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06b54     50 00 00 FF 
06b58     9C E5 05 F1 | 	add	objptr, ##41372
06b5c     F2 12 02 FB | 	rdlong	arg01, objptr
06b60     09 25 02 F6 | 	mov	local04, arg01
06b64     02 24 66 F0 | 	shl	local04, #2
06b68     09 25 02 F1 | 	add	local04, arg01
06b6c     02 24 66 F0 | 	shl	local04, #2
06b70     07 00 00 FF 
06b74     40 E5 85 F1 | 	sub	objptr, ##3904
06b78     F2 24 02 F1 | 	add	local04, objptr
06b7c     08 24 06 F1 | 	add	local04, #8
06b80     12 25 02 FB | 	rdlong	local04, local04
06b84     0F 25 0A F2 | 	cmp	local04, local01 wz
06b88     49 00 00 FF 
06b8c     5C E4 85 F1 | 	sub	objptr, ##37468
06b90     0C 00 90 AD |  if_e	jmp	#LR__0590
06b94     25 12 06 F6 | 	mov	arg01, #37
06b98     B0 AB B0 FD | 	call	#_printerror
06b9c     28 02 90 FD | 	jmp	#LR__0594
06ba0                 | LR__0590
06ba0     50 00 00 FF 
06ba4     9C E5 05 F1 | 	add	objptr, ##41372
06ba8     F2 12 02 FB | 	rdlong	arg01, objptr
06bac     09 25 02 F6 | 	mov	local04, arg01
06bb0     02 24 66 F0 | 	shl	local04, #2
06bb4     09 25 02 F1 | 	add	local04, arg01
06bb8     02 24 66 F0 | 	shl	local04, #2
06bbc     07 00 00 FF 
06bc0     40 E5 85 F1 | 	sub	objptr, ##3904
06bc4     F2 24 02 F1 | 	add	local04, objptr
06bc8     0C 24 06 F1 | 	add	local04, #12
06bcc     12 25 02 FB | 	rdlong	local04, local04
06bd0     0F 13 02 F6 | 	mov	arg01, local01
06bd4     04 12 66 F0 | 	shl	arg01, #4
06bd8     3D 00 00 FF 
06bdc     90 E4 85 F1 | 	sub	objptr, ##31376
06be0     F2 12 02 F1 | 	add	arg01, objptr
06be4     0F FF 01 F6 | 	mov	result3, local01
06be8     04 FE 65 F0 | 	shl	result3, #4
06bec     F2 FE 01 F1 | 	add	result3, objptr
06bf0     04 FE 05 F1 | 	add	result3, #4
06bf4     FF FE 01 FB | 	rdlong	result3, result3
06bf8     12 FF 01 F1 | 	add	result3, local04
06bfc     04 12 06 F1 | 	add	arg01, #4
06c00     09 FF 61 FC | 	wrlong	result3, arg01
06c04                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06c04                 | ' if fortable(fortop).stepval>0 then
06c04     44 00 00 FF 
06c08     D0 E5 05 F1 | 	add	objptr, ##35280
06c0c     F2 12 02 FB | 	rdlong	arg01, objptr
06c10     09 25 02 F6 | 	mov	local04, arg01
06c14     02 24 66 F0 | 	shl	local04, #2
06c18     09 25 02 F1 | 	add	local04, arg01
06c1c     02 24 66 F0 | 	shl	local04, #2
06c20     07 00 00 FF 
06c24     40 E5 85 F1 | 	sub	objptr, ##3904
06c28     F2 24 02 F1 | 	add	local04, objptr
06c2c     0C 24 06 F1 | 	add	local04, #12
06c30     12 25 02 FB | 	rdlong	local04, local04
06c34     01 24 56 F2 | 	cmps	local04, #1 wc
06c38     49 00 00 FF 
06c3c     5C E4 85 F1 | 	sub	objptr, ##37468
06c40     78 00 90 CD |  if_b	jmp	#LR__0591
06c44                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06c44     04 1E 66 F0 | 	shl	local01, #4
06c48     0B 00 00 FF 
06c4c     CC E5 05 F1 | 	add	objptr, ##6092
06c50     F2 1E 02 F1 | 	add	local01, objptr
06c54     44 00 00 FF 
06c58     D0 E5 05 F1 | 	add	objptr, ##35280
06c5c     F2 24 02 FB | 	rdlong	local04, objptr
06c60     12 13 02 F6 | 	mov	arg01, local04
06c64     02 12 66 F0 | 	shl	arg01, #2
06c68     12 13 02 F1 | 	add	arg01, local04
06c6c     02 12 66 F0 | 	shl	arg01, #2
06c70     07 00 00 FF 
06c74     40 E5 85 F1 | 	sub	objptr, ##3904
06c78     F2 12 02 F1 | 	add	arg01, objptr
06c7c     04 1E 06 F1 | 	add	local01, #4
06c80     0F 25 02 FB | 	rdlong	local04, local01
06c84     10 12 06 F1 | 	add	arg01, #16
06c88     09 13 02 FB | 	rdlong	arg01, arg01
06c8c     09 25 5A F2 | 	cmps	local04, arg01 wcz
06c90     49 00 00 FF 
06c94     5C E4 85 F1 | 	sub	objptr, ##37468
06c98     9C 00 90 ED |  if_be	jmp	#LR__0593
06c9c     50 00 00 FF 
06ca0     9C E5 05 F1 | 	add	objptr, ##41372
06ca4     F2 24 02 FB | 	rdlong	local04, objptr
06ca8     01 24 86 F1 | 	sub	local04, #1
06cac     F2 24 62 FC | 	wrlong	local04, objptr
06cb0     50 00 00 FF 
06cb4     9C E5 85 F1 | 	sub	objptr, ##41372
06cb8     0C 01 90 FD | 	jmp	#LR__0594
06cbc                 | LR__0591
06cbc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
06cbc     0F 13 02 F6 | 	mov	arg01, local01
06cc0     04 12 66 F0 | 	shl	arg01, #4
06cc4     0B 00 00 FF 
06cc8     CC E5 05 F1 | 	add	objptr, ##6092
06ccc     F2 12 02 F1 | 	add	arg01, objptr
06cd0     44 00 00 FF 
06cd4     D0 E5 05 F1 | 	add	objptr, ##35280
06cd8     F2 24 02 FB | 	rdlong	local04, objptr
06cdc     12 1F 02 F6 | 	mov	local01, local04
06ce0     02 1E 66 F0 | 	shl	local01, #2
06ce4     12 1F 02 F1 | 	add	local01, local04
06ce8     02 1E 66 F0 | 	shl	local01, #2
06cec     07 00 00 FF 
06cf0     40 E5 85 F1 | 	sub	objptr, ##3904
06cf4     F2 1E 02 F1 | 	add	local01, objptr
06cf8     04 12 06 F1 | 	add	arg01, #4
06cfc     09 13 02 FB | 	rdlong	arg01, arg01
06d00     10 1E 06 F1 | 	add	local01, #16
06d04     0F 1F 02 FB | 	rdlong	local01, local01
06d08     0F 13 52 F2 | 	cmps	arg01, local01 wc
06d0c     49 00 00 FF 
06d10     5C E4 85 F1 | 	sub	objptr, ##37468
06d14     20 00 90 3D |  if_ae	jmp	#LR__0592
06d18     50 00 00 FF 
06d1c     9C E5 05 F1 | 	add	objptr, ##41372
06d20     F2 24 02 FB | 	rdlong	local04, objptr
06d24     01 24 86 F1 | 	sub	local04, #1
06d28     F2 24 62 FC | 	wrlong	local04, objptr
06d2c     50 00 00 FF 
06d30     9C E5 85 F1 | 	sub	objptr, ##41372
06d34     90 00 90 FD | 	jmp	#LR__0594
06d38                 | LR__0592
06d38                 | LR__0593
06d38     50 00 00 FF 
06d3c     9C E5 05 F1 | 	add	objptr, ##41372
06d40     F2 1E 02 FB | 	rdlong	local01, objptr
06d44     0F 25 02 F6 | 	mov	local04, local01
06d48     02 24 66 F0 | 	shl	local04, #2
06d4c     0F 25 02 F1 | 	add	local04, local01
06d50     02 24 66 F0 | 	shl	local04, #2
06d54     07 00 00 FF 
06d58     40 E5 85 F1 | 	sub	objptr, ##3904
06d5c     F2 24 02 F1 | 	add	local04, objptr
06d60     12 25 02 FB | 	rdlong	local04, local04
06d64     07 00 00 FF 
06d68     18 E5 05 F1 | 	add	objptr, ##3864
06d6c     F2 24 62 FC | 	wrlong	local04, objptr
06d70     28 E4 05 F1 | 	add	objptr, #40
06d74     F2 1E 02 FB | 	rdlong	local01, objptr
06d78     0F 25 02 F6 | 	mov	local04, local01
06d7c     02 24 66 F0 | 	shl	local04, #2
06d80     0F 25 02 F1 | 	add	local04, local01
06d84     02 24 66 F0 | 	shl	local04, #2
06d88     07 00 00 FF 
06d8c     40 E5 85 F1 | 	sub	objptr, ##3904
06d90     F2 24 02 F1 | 	add	local04, objptr
06d94     04 24 06 F1 | 	add	local04, #4
06d98     12 25 02 FB | 	rdlong	local04, local04
06d9c     07 00 00 FF 
06da0     1C E5 05 F1 | 	add	objptr, ##3868
06da4     F2 24 62 FC | 	wrlong	local04, objptr
06da8     0F 00 00 FF 
06dac     38 E5 85 F1 | 	sub	objptr, ##7992
06db0     F2 24 02 FB | 	rdlong	local04, objptr
06db4     01 24 86 F1 | 	sub	local04, #1
06db8     04 E4 05 F1 | 	add	objptr, #4
06dbc     F2 24 62 FC | 	wrlong	local04, objptr
06dc0     41 00 00 FF 
06dc4     44 E4 85 F1 | 	sub	objptr, ##33348
06dc8                 | LR__0594
06dc8     A7 F0 03 F6 | 	mov	ptra, fp
06dcc     B2 00 A0 FD | 	call	#popregs_
06dd0                 | _do_next_ret
06dd0     2D 00 64 FD | 	ret
06dd4                 | 
06dd4                 | ' 
06dd4                 | ' 
06dd4                 | ' function compile_next() as ulong
06dd4                 | _compile_next
06dd4     04 4A 05 F6 | 	mov	COUNT_, #4
06dd8     A8 00 A0 FD | 	call	#pushregs_
06ddc     2E 00 00 FF 
06de0     08 E4 05 F1 | 	add	objptr, ##23560
06de4     F2 12 02 FB | 	rdlong	arg01, objptr
06de8     03 12 66 F0 | 	shl	arg01, #3
06dec     02 00 00 FF 
06df0     38 E4 85 F1 | 	sub	objptr, ##1080
06df4     F2 12 02 F1 | 	add	arg01, objptr
06df8     09 1F 02 FB | 	rdlong	local01, arg01
06dfc                 | ' 
06dfc                 | ' varname$=lparts(ct).part$ 
06dfc                 | ' 'suffix$=right$(varname$,1)
06dfc                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
06dfc                 | ' if varnum=0 then compile_error(35)  : return 35
06dfc     04 E4 85 F1 | 	sub	objptr, #4
06e00     F2 14 0A FB | 	rdlong	arg02, objptr wz
06e04     2B 00 00 FF 
06e08     CC E5 85 F1 | 	sub	objptr, ##22476
06e0c     10 00 90 5D |  if_ne	jmp	#LR__0600
06e10     23 12 06 F6 | 	mov	arg01, #35
06e14     4C E0 BF FD | 	call	#_compile_error
06e18     23 FA 05 F6 | 	mov	result1, #35
06e1c     58 01 90 FD | 	jmp	#LR__0604
06e20                 | LR__0600
06e20     01 20 66 F6 | 	neg	local02, #1
06e24                 | ' j=-1
06e24                 | ' for i=0 to varnum-1
06e24     00 22 06 F6 | 	mov	local03, #0
06e28     2B 00 00 FF 
06e2c     CC E5 05 F1 | 	add	objptr, ##22476
06e30     F2 24 02 FB | 	rdlong	local04, objptr
06e34     2B 00 00 FF 
06e38     CC E5 85 F1 | 	sub	objptr, ##22476
06e3c                 | LR__0601
06e3c     12 23 12 F2 | 	cmp	local03, local04 wc
06e40     38 00 90 3D |  if_ae	jmp	#LR__0602
06e44                 | '   if variables(i).name=varname$ then j=i : exit
06e44     11 15 02 F6 | 	mov	arg02, local03
06e48     04 14 66 F0 | 	shl	arg02, #4
06e4c     0B 00 00 FF 
06e50     CC E5 05 F1 | 	add	objptr, ##6092
06e54     F2 14 02 F1 | 	add	arg02, objptr
06e58     0A 13 02 FB | 	rdlong	arg01, arg02
06e5c     0F 15 02 F6 | 	mov	arg02, local01
06e60     0B 00 00 FF 
06e64     CC E5 85 F1 | 	sub	objptr, ##6092
06e68     FC DD B0 FD | 	call	#__system___string_cmp
06e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e70     11 21 02 A6 |  if_e	mov	local02, local03
06e74     01 22 06 51 |  if_ne	add	local03, #1
06e78     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
06e7c                 | LR__0602
06e7c                 | ' if j=-1 then compile_error(35) : return 35
06e7c     FF FF 7F FF 
06e80     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06e84     10 00 90 5D |  if_ne	jmp	#LR__0603
06e88     23 12 06 F6 | 	mov	arg01, #35
06e8c     D4 DF BF FD | 	call	#_compile_error
06e90     23 FA 05 F6 | 	mov	result1, #35
06e94     E0 00 90 FD | 	jmp	#LR__0604
06e98                 | LR__0603
06e98     41 00 00 FF 
06e9c     40 E4 05 F1 | 	add	objptr, ##33344
06ea0     F2 24 02 FB | 	rdlong	local04, objptr
06ea4     12 23 02 F6 | 	mov	local03, local04
06ea8     01 22 66 F0 | 	shl	local03, #1
06eac     12 23 02 F1 | 	add	local03, local04
06eb0     02 22 66 F0 | 	shl	local03, #2
06eb4     03 00 00 FF 
06eb8     00 E4 85 F1 | 	sub	objptr, ##1536
06ebc     F2 22 02 F1 | 	add	local03, objptr
06ec0     08 22 06 F1 | 	add	local03, #8
06ec4     11 39 68 FC | 	wrlong	#28, local03
06ec8     03 00 00 FF 
06ecc     00 E4 05 F1 | 	add	objptr, ##1536
06ed0     F2 24 02 FB | 	rdlong	local04, objptr
06ed4     12 23 02 F6 | 	mov	local03, local04
06ed8     01 22 66 F0 | 	shl	local03, #1
06edc     12 23 02 F1 | 	add	local03, local04
06ee0     02 22 66 F0 | 	shl	local03, #2
06ee4     03 00 00 FF 
06ee8     00 E4 85 F1 | 	sub	objptr, ##1536
06eec     F2 22 02 F1 | 	add	local03, objptr
06ef0     11 21 62 FC | 	wrlong	local02, local03
06ef4     03 00 00 FF 
06ef8     00 E4 05 F1 | 	add	objptr, ##1536
06efc     F2 24 02 FB | 	rdlong	local04, objptr
06f00     01 24 06 F1 | 	add	local04, #1
06f04     F2 24 62 FC | 	wrlong	local04, objptr
06f08     12 23 02 F6 | 	mov	local03, local04
06f0c     01 22 66 F0 | 	shl	local03, #1
06f10     12 23 02 F1 | 	add	local03, local04
06f14     02 22 66 F0 | 	shl	local03, #2
06f18     03 00 00 FF 
06f1c     00 E4 85 F1 | 	sub	objptr, ##1536
06f20     F2 22 02 F1 | 	add	local03, objptr
06f24     08 22 06 F1 | 	add	local03, #8
06f28     11 97 68 FC | 	wrlong	#75, local03
06f2c     03 00 00 FF 
06f30     00 E4 05 F1 | 	add	objptr, ##1536
06f34     F2 24 02 FB | 	rdlong	local04, objptr
06f38     12 23 02 F6 | 	mov	local03, local04
06f3c     01 22 66 F0 | 	shl	local03, #1
06f40     12 23 02 F1 | 	add	local03, local04
06f44     02 22 66 F0 | 	shl	local03, #2
06f48     03 00 00 FF 
06f4c     00 E4 85 F1 | 	sub	objptr, ##1536
06f50     F2 22 02 F1 | 	add	local03, objptr
06f54     11 01 68 FC | 	wrlong	#0, local03
06f58     03 00 00 FF 
06f5c     00 E4 05 F1 | 	add	objptr, ##1536
06f60     F2 24 02 FB | 	rdlong	local04, objptr
06f64     01 24 06 F1 | 	add	local04, #1
06f68     F2 24 62 FC | 	wrlong	local04, objptr
06f6c     41 00 00 FF 
06f70     40 E4 85 F1 | 	sub	objptr, ##33344
06f74                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
06f74                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
06f74                 | ' return 0
06f74     00 FA 05 F6 | 	mov	result1, #0
06f78                 | LR__0604
06f78     A7 F0 03 F6 | 	mov	ptra, fp
06f7c     B2 00 A0 FD | 	call	#popregs_
06f80                 | _compile_next_ret
06f80     2D 00 64 FD | 	ret
06f84                 | 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
06f84                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
06f84                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' function compile_goto( ) as ulong
06f84                 | _compile_goto
06f84     03 4A 05 F6 | 	mov	COUNT_, #3
06f88     A8 00 A0 FD | 	call	#pushregs_
06f8c     28 F0 07 F1 | 	add	ptra, #40
06f90                 | ' 
06f90                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
06f90     2E 00 00 FF 
06f94     08 E4 05 F1 | 	add	objptr, ##23560
06f98     F2 16 02 FB | 	rdlong	arg03, objptr
06f9c     03 16 66 F0 | 	shl	arg03, #3
06fa0     02 00 00 FF 
06fa4     38 E4 85 F1 | 	sub	objptr, ##1080
06fa8     F2 16 02 F1 | 	add	arg03, objptr
06fac     04 16 06 F1 | 	add	arg03, #4
06fb0     0B 17 02 FB | 	rdlong	arg03, arg03
06fb4     01 00 00 FF 
06fb8     00 16 0E F2 | 	cmp	arg03, ##512 wz
06fbc     2B 00 00 FF 
06fc0     D0 E5 85 F1 | 	sub	objptr, ##22480
06fc4     CC 02 90 5D |  if_ne	jmp	#LR__0615
06fc8     2E 00 00 FF 
06fcc     08 E4 05 F1 | 	add	objptr, ##23560
06fd0     F2 16 02 FB | 	rdlong	arg03, objptr
06fd4     01 16 06 F1 | 	add	arg03, #1
06fd8     03 16 66 F0 | 	shl	arg03, #3
06fdc     02 00 00 FF 
06fe0     38 E4 85 F1 | 	sub	objptr, ##1080
06fe4     F2 16 02 F1 | 	add	arg03, objptr
06fe8     04 16 06 F1 | 	add	arg03, #4
06fec     0B 17 02 FB | 	rdlong	arg03, arg03
06ff0     FE 17 0E F2 | 	cmp	arg03, #510 wz
06ff4     2B 00 00 FF 
06ff8     D0 E5 85 F1 | 	sub	objptr, ##22480
06ffc     94 02 90 5D |  if_ne	jmp	#LR__0615
07000     2E 00 00 FF 
07004     08 E4 05 F1 | 	add	objptr, ##23560
07008     F2 16 02 FB | 	rdlong	arg03, objptr
0700c     03 16 66 F0 | 	shl	arg03, #3
07010     02 00 00 FF 
07014     38 E4 85 F1 | 	sub	objptr, ##1080
07018     F2 16 02 F1 | 	add	arg03, objptr
0701c     0B 13 02 FB | 	rdlong	arg01, arg03
07020     00 14 06 F6 | 	mov	arg02, #0
07024     2B 00 00 FF 
07028     D0 E5 85 F1 | 	sub	objptr, ##22480
0702c     9C 0C B1 FD | 	call	#__system____builtin_atoi
07030     04 4E 05 F1 | 	add	fp, #4
07034     A7 FA 61 FC | 	wrlong	result1, fp
07038     41 00 00 FF 
0703c     40 E4 05 F1 | 	add	objptr, ##33344
07040     F2 1E 02 FB | 	rdlong	local01, objptr
07044     0F 21 02 F6 | 	mov	local02, local01
07048     01 20 66 F0 | 	shl	local02, #1
0704c     0F 21 02 F1 | 	add	local02, local01
07050     02 20 66 F0 | 	shl	local02, #2
07054     03 00 00 FF 
07058     00 E4 85 F1 | 	sub	objptr, ##1536
0705c     F2 20 02 F1 | 	add	local02, objptr
07060     08 20 06 F1 | 	add	local02, #8
07064     10 9D 68 FC | 	wrlong	#78, local02
07068     03 00 00 FF 
0706c     08 E4 05 F1 | 	add	objptr, ##1544
07070     F2 22 02 FB | 	rdlong	local03, objptr
07074     41 00 00 FF 
07078     48 E4 85 F1 | 	sub	objptr, ##33352
0707c     04 4E 05 F1 | 	add	fp, #4
07080     A7 22 62 FC | 	wrlong	local03, fp
07084     08 4E 85 F1 | 	sub	fp, #8
07088                 | ' 
07088                 | '   gotoline=val%(lparts(ct).part$) 
07088                 | '   compiledline(lineptr).result_type=token_fast_goto
07088                 | ' ' now find a pointer to goto
07088                 | '   gotoptr=programstart
07088                 | '   do
07088                 | LR__0610
07088     10 4E 05 F1 | 	add	fp, #16
0708c     A7 12 02 F6 | 	mov	arg01, fp
07090     08 4E 85 F1 | 	sub	fp, #8
07094     A7 14 02 FB | 	rdlong	arg02, fp
07098     08 4E 85 F1 | 	sub	fp, #8
0709c     18 16 06 F6 | 	mov	arg03, #24
070a0     0B 00 00 FF 
070a4     C0 E4 05 F1 | 	add	objptr, ##5824
070a8     A8 D0 B0 FD | 	call	#_psram_spin2_read1
070ac     0B 00 00 FF 
070b0     C0 E4 85 F1 | 	sub	objptr, ##5824
070b4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
070b4                 | '     if gotoheader(0)<>$FFFFFFFF then
070b4     10 4E 05 F1 | 	add	fp, #16
070b8     A7 22 02 FB | 	rdlong	local03, fp
070bc     10 4E 85 F1 | 	sub	fp, #16
070c0     FF FF 7F FF 
070c4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
070c8     24 00 90 AD |  if_e	jmp	#LR__0611
070cc     08 4E 05 F1 | 	add	fp, #8
070d0     A7 22 02 FB | 	rdlong	local03, fp
070d4     04 4E 05 F1 | 	add	fp, #4
070d8     A7 22 62 FC | 	wrlong	local03, fp
070dc     18 4E 05 F1 | 	add	fp, #24
070e0     A7 22 02 FB | 	rdlong	local03, fp
070e4     1C 4E 85 F1 | 	sub	fp, #28
070e8     A7 22 62 FC | 	wrlong	local03, fp
070ec     08 4E 85 F1 | 	sub	fp, #8
070f0                 | LR__0611
070f0     24 4E 05 F1 | 	add	fp, #36
070f4     A7 22 02 FB | 	rdlong	local03, fp
070f8     24 4E 85 F1 | 	sub	fp, #36
070fc     FF FF 3F FF 
07100     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
07104     10 4E 05 51 |  if_ne	add	fp, #16
07108     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0710c     10 4E 85 51 |  if_ne	sub	fp, #16
07110     FF FF 7F 5F 
07114     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07118     1C 00 90 AD |  if_e	jmp	#LR__0612
0711c     10 4E 05 F1 | 	add	fp, #16
07120     A7 22 02 FB | 	rdlong	local03, fp
07124     0C 4E 85 F1 | 	sub	fp, #12
07128     A7 20 02 FB | 	rdlong	local02, fp
0712c     04 4E 85 F1 | 	sub	fp, #4
07130     10 23 0A F2 | 	cmp	local03, local02 wz
07134     50 FF 9F 5D |  if_ne	jmp	#LR__0610
07138                 | LR__0612
07138                 | '   if gotoheader(0)=gotoline then
07138     10 4E 05 F1 | 	add	fp, #16
0713c     A7 22 02 FB | 	rdlong	local03, fp
07140     0C 4E 85 F1 | 	sub	fp, #12
07144     A7 1E 02 FB | 	rdlong	local01, fp
07148     04 4E 85 F1 | 	sub	fp, #4
0714c     0F 23 0A F2 | 	cmp	local03, local01 wz
07150     7C 00 90 5D |  if_ne	jmp	#LR__0613
07154     41 00 00 FF 
07158     40 E4 05 F1 | 	add	objptr, ##33344
0715c     F2 1E 02 FB | 	rdlong	local01, objptr
07160     0F 21 02 F6 | 	mov	local02, local01
07164     01 20 66 F0 | 	shl	local02, #1
07168     0F 21 02 F1 | 	add	local02, local01
0716c     02 20 66 F0 | 	shl	local02, #2
07170     03 00 00 FF 
07174     00 E4 85 F1 | 	sub	objptr, ##1536
07178     F2 20 02 F1 | 	add	local02, objptr
0717c     0C 4E 05 F1 | 	add	fp, #12
07180     A7 22 02 FB | 	rdlong	local03, fp
07184     10 23 62 FC | 	wrlong	local03, local02
07188     03 00 00 FF 
0718c     00 E4 05 F1 | 	add	objptr, ##1536
07190     F2 1E 02 FB | 	rdlong	local01, objptr
07194     0F 21 02 F6 | 	mov	local02, local01
07198     01 20 66 F0 | 	shl	local02, #1
0719c     0F 21 02 F1 | 	add	local02, local01
071a0     02 20 66 F0 | 	shl	local02, #2
071a4     03 00 00 FF 
071a8     00 E4 85 F1 | 	sub	objptr, ##1536
071ac     F2 20 02 F1 | 	add	local02, objptr
071b0     08 4E 85 F1 | 	sub	fp, #8
071b4     A7 22 02 FB | 	rdlong	local03, fp
071b8     04 4E 85 F1 | 	sub	fp, #4
071bc     04 20 06 F1 | 	add	local02, #4
071c0     10 23 62 FC | 	wrlong	local03, local02
071c4     3E 00 00 FF 
071c8     40 E4 85 F1 | 	sub	objptr, ##31808
071cc     A4 00 90 FD | 	jmp	#LR__0614
071d0                 | LR__0613
071d0     41 00 00 FF 
071d4     40 E4 05 F1 | 	add	objptr, ##33344
071d8     F2 1E 02 FB | 	rdlong	local01, objptr
071dc     0F 21 02 F6 | 	mov	local02, local01
071e0     01 20 66 F0 | 	shl	local02, #1
071e4     0F 21 02 F1 | 	add	local02, local01
071e8     02 20 66 F0 | 	shl	local02, #2
071ec     03 00 00 FF 
071f0     00 E4 85 F1 | 	sub	objptr, ##1536
071f4     F2 20 02 F1 | 	add	local02, objptr
071f8     00 00 C0 FF 
071fc     10 01 68 FC | 	wrlong	##-2147483648, local02
07200     03 00 00 FF 
07204     00 E4 05 F1 | 	add	objptr, ##1536
07208     F2 1E 02 FB | 	rdlong	local01, objptr
0720c     0F 21 02 F6 | 	mov	local02, local01
07210     01 20 66 F0 | 	shl	local02, #1
07214     0F 21 02 F1 | 	add	local02, local01
07218     02 20 66 F0 | 	shl	local02, #2
0721c     03 00 00 FF 
07220     00 E4 85 F1 | 	sub	objptr, ##1536
07224     F2 20 02 F1 | 	add	local02, objptr
07228     04 4E 05 F1 | 	add	fp, #4
0722c     A7 22 02 FB | 	rdlong	local03, fp
07230     04 4E 85 F1 | 	sub	fp, #4
07234     04 20 06 F1 | 	add	local02, #4
07238     10 23 62 FC | 	wrlong	local03, local02
0723c     03 00 00 FF 
07240     00 E4 05 F1 | 	add	objptr, ##1536
07244     F2 1E 02 FB | 	rdlong	local01, objptr
07248     0F 21 02 F6 | 	mov	local02, local01
0724c     01 20 66 F0 | 	shl	local02, #1
07250     0F 21 02 F1 | 	add	local02, local01
07254     02 20 66 F0 | 	shl	local02, #2
07258     03 00 00 FF 
0725c     00 E4 85 F1 | 	sub	objptr, ##1536
07260     F2 20 02 F1 | 	add	local02, objptr
07264     08 20 06 F1 | 	add	local02, #8
07268     10 A7 68 FC | 	wrlong	#83, local02
0726c     3E 00 00 FF 
07270     40 E4 85 F1 | 	sub	objptr, ##31808
07274                 | LR__0614
07274     41 00 00 FF 
07278     40 E4 05 F1 | 	add	objptr, ##33344
0727c     F2 22 02 FB | 	rdlong	local03, objptr
07280     01 22 06 F1 | 	add	local03, #1
07284     F2 22 62 FC | 	wrlong	local03, objptr
07288     41 00 00 FF 
0728c     40 E4 85 F1 | 	sub	objptr, ##33344
07290     40 00 90 FD | 	jmp	#LR__0616
07294                 | LR__0615
07294                 | '    print "We have a slow goto, todo  "
07294     00 12 06 F6 | 	mov	arg01, #0
07298     58 2F B1 FD | 	call	#__system___getiolock_0349
0729c     FD 12 02 F6 | 	mov	arg01, result1
072a0     9C D9 B0 FD | 	call	#__system___lockmem
072a4     20 01 00 FF 
072a8     87 15 06 F6 | 	mov	arg02, ##@LR__4285
072ac     00 12 06 F6 | 	mov	arg01, #0
072b0     00 16 06 F6 | 	mov	arg03, #0
072b4     7C E6 B0 FD | 	call	#__system___basic_print_string
072b8     00 12 06 F6 | 	mov	arg01, #0
072bc     0A 14 06 F6 | 	mov	arg02, #10
072c0     00 16 06 F6 | 	mov	arg03, #0
072c4     14 E6 B0 FD | 	call	#__system___basic_print_char
072c8     00 12 06 F6 | 	mov	arg01, #0
072cc     24 2F B1 FD | 	call	#__system___getiolock_0349
072d0     FD 00 68 FC | 	wrlong	#0, result1
072d4                 | LR__0616
072d4                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
072d4                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
072d4                 | ' return 0
072d4     00 FA 05 F6 | 	mov	result1, #0
072d8     A7 F0 03 F6 | 	mov	ptra, fp
072dc     B2 00 A0 FD | 	call	#popregs_
072e0                 | _compile_goto_ret
072e0     2D 00 64 FD | 	ret
072e4                 | 
072e4                 | ' 
072e4                 | ' 
072e4                 | ' 
072e4                 | ' 
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' 
072e4                 | ' 
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' 
072e4                 | ' 
072e4                 | ' function expr() as integer 
072e4                 | _expr
072e4     07 4A 05 F6 | 	mov	COUNT_, #7
072e8     A8 00 A0 FD | 	call	#pushregs_
072ec                 | _expr_enter
072ec     2E 00 00 FF 
072f0     08 E4 05 F1 | 	add	objptr, ##23560
072f4     F2 24 02 FB | 	rdlong	local04, objptr
072f8     03 24 66 F0 | 	shl	local04, #3
072fc     02 00 00 FF 
07300     38 E4 85 F1 | 	sub	objptr, ##1080
07304     F2 24 02 F1 | 	add	local04, objptr
07308     04 24 06 F1 | 	add	local04, #4
0730c     12 27 02 FB | 	rdlong	local05, local04
07310                 | ' 
07310                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
07310     FE 27 0E F2 | 	cmp	local05, #510 wz
07314     2B 00 00 FF 
07318     D0 E5 85 F1 | 	sub	objptr, ##22480
0731c     C4 00 90 5D |  if_ne	jmp	#LR__0620
07320     1D 1E 06 F6 | 	mov	local01, #29
07324     FF 22 06 F6 | 	mov	local03, #255
07328     0F 29 02 F6 | 	mov	local06, local01
0732c     10 2B 02 F6 | 	mov	local07, local02
07330     11 1F 02 F6 | 	mov	local01, local03
07334     41 00 00 FF 
07338     40 E4 05 F1 | 	add	objptr, ##33344
0733c     F2 26 02 FB | 	rdlong	local05, objptr
07340     13 25 02 F6 | 	mov	local04, local05
07344     01 24 66 F0 | 	shl	local04, #1
07348     13 25 02 F1 | 	add	local04, local05
0734c     02 24 66 F0 | 	shl	local04, #2
07350     03 00 00 FF 
07354     00 E4 85 F1 | 	sub	objptr, ##1536
07358     F2 24 02 F1 | 	add	local04, objptr
0735c     12 29 62 FC | 	wrlong	local06, local04
07360     03 00 00 FF 
07364     00 E4 05 F1 | 	add	objptr, ##1536
07368     F2 28 02 FB | 	rdlong	local06, objptr
0736c     14 27 02 F6 | 	mov	local05, local06
07370     01 26 66 F0 | 	shl	local05, #1
07374     14 27 02 F1 | 	add	local05, local06
07378     02 26 66 F0 | 	shl	local05, #2
0737c     03 00 00 FF 
07380     00 E4 85 F1 | 	sub	objptr, ##1536
07384     F2 26 02 F1 | 	add	local05, objptr
07388     04 26 06 F1 | 	add	local05, #4
0738c     13 2B 62 FC | 	wrlong	local07, local05
07390     03 00 00 FF 
07394     00 E4 05 F1 | 	add	objptr, ##1536
07398     F2 2A 02 FB | 	rdlong	local07, objptr
0739c     15 29 02 F6 | 	mov	local06, local07
073a0     01 28 66 F0 | 	shl	local06, #1
073a4     15 29 02 F1 | 	add	local06, local07
073a8     02 28 66 F0 | 	shl	local06, #2
073ac     03 00 00 FF 
073b0     00 E4 85 F1 | 	sub	objptr, ##1536
073b4     F2 28 02 F1 | 	add	local06, objptr
073b8     08 28 06 F1 | 	add	local06, #8
073bc     14 1F 62 FC | 	wrlong	local01, local06
073c0     03 00 00 FF 
073c4     00 E4 05 F1 | 	add	objptr, ##1536
073c8     F2 28 02 FB | 	rdlong	local06, objptr
073cc     01 28 06 F1 | 	add	local06, #1
073d0     F2 28 62 FC | 	wrlong	local06, objptr
073d4     41 00 00 FF 
073d8     40 E4 85 F1 | 	sub	objptr, ##33344
073dc     1D FA 05 F6 | 	mov	result1, #29
073e0     54 01 90 FD | 	jmp	#LR__0623
073e4                 | LR__0620
073e4     00 1E 06 F6 | 	mov	local01, #0
073e8     58 01 B0 FD | 	call	#_addsub
073ec     2E 00 00 FF 
073f0     08 E4 05 F1 | 	add	objptr, ##23560
073f4     F2 24 02 FB | 	rdlong	local04, objptr
073f8     03 24 66 F0 | 	shl	local04, #3
073fc     02 00 00 FF 
07400     38 E4 85 F1 | 	sub	objptr, ##1080
07404     F2 24 02 F1 | 	add	local04, objptr
07408     04 24 06 F1 | 	add	local04, #4
0740c     12 27 02 FB | 	rdlong	local05, local04
07410                 | ' t3.result.uresult=0
07410                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07410                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07410                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
07410     2B 00 00 FF 
07414     D0 E5 85 F1 | 	sub	objptr, ##22480
07418                 | LR__0621
07418     1B 26 0E F2 | 	cmp	local05, #27 wz
0741c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07420     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
07424     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07428     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0742c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07430     00 01 90 5D |  if_ne	jmp	#LR__0622
07434     2E 00 00 FF 
07438     08 E4 05 F1 | 	add	objptr, ##23560
0743c     F2 28 02 FB | 	rdlong	local06, objptr
07440     01 28 06 F1 | 	add	local06, #1
07444     F2 28 62 FC | 	wrlong	local06, objptr
07448     2E 00 00 FF 
0744c     08 E4 85 F1 | 	sub	objptr, ##23560
07450     F0 00 B0 FD | 	call	#_addsub
07454     13 23 02 F6 | 	mov	local03, local05
07458     0F 29 02 F6 | 	mov	local06, local01
0745c     10 2B 02 F6 | 	mov	local07, local02
07460     11 27 02 F6 | 	mov	local05, local03
07464     41 00 00 FF 
07468     40 E4 05 F1 | 	add	objptr, ##33344
0746c     F2 24 02 FB | 	rdlong	local04, objptr
07470     12 FB 01 F6 | 	mov	result1, local04
07474     01 FA 65 F0 | 	shl	result1, #1
07478     12 FB 01 F1 | 	add	result1, local04
0747c     02 FA 65 F0 | 	shl	result1, #2
07480     03 00 00 FF 
07484     00 E4 85 F1 | 	sub	objptr, ##1536
07488     F2 FA 01 F1 | 	add	result1, objptr
0748c     FD 28 62 FC | 	wrlong	local06, result1
07490     03 00 00 FF 
07494     00 E4 05 F1 | 	add	objptr, ##1536
07498     F2 28 02 FB | 	rdlong	local06, objptr
0749c     14 25 02 F6 | 	mov	local04, local06
074a0     01 24 66 F0 | 	shl	local04, #1
074a4     14 25 02 F1 | 	add	local04, local06
074a8     02 24 66 F0 | 	shl	local04, #2
074ac     03 00 00 FF 
074b0     00 E4 85 F1 | 	sub	objptr, ##1536
074b4     F2 24 02 F1 | 	add	local04, objptr
074b8     04 24 06 F1 | 	add	local04, #4
074bc     12 2B 62 FC | 	wrlong	local07, local04
074c0     03 00 00 FF 
074c4     00 E4 05 F1 | 	add	objptr, ##1536
074c8     F2 2A 02 FB | 	rdlong	local07, objptr
074cc     15 29 02 F6 | 	mov	local06, local07
074d0     01 28 66 F0 | 	shl	local06, #1
074d4     15 29 02 F1 | 	add	local06, local07
074d8     02 28 66 F0 | 	shl	local06, #2
074dc     03 00 00 FF 
074e0     00 E4 85 F1 | 	sub	objptr, ##1536
074e4     F2 28 02 F1 | 	add	local06, objptr
074e8     08 28 06 F1 | 	add	local06, #8
074ec     14 27 62 FC | 	wrlong	local05, local06
074f0     03 00 00 FF 
074f4     00 E4 05 F1 | 	add	objptr, ##1536
074f8     F2 28 02 FB | 	rdlong	local06, objptr
074fc     01 28 06 F1 | 	add	local06, #1
07500     F2 28 62 FC | 	wrlong	local06, objptr
07504     13 00 00 FF 
07508     38 E4 85 F1 | 	sub	objptr, ##9784
0750c     F2 24 02 FB | 	rdlong	local04, objptr
07510     03 24 66 F0 | 	shl	local04, #3
07514     02 00 00 FF 
07518     38 E4 85 F1 | 	sub	objptr, ##1080
0751c     F2 24 02 F1 | 	add	local04, objptr
07520     04 24 06 F1 | 	add	local04, #4
07524     12 27 02 FB | 	rdlong	local05, local04
07528     2B 00 00 FF 
0752c     D0 E5 85 F1 | 	sub	objptr, ##22480
07530     E4 FE 9F FD | 	jmp	#LR__0621
07534                 | LR__0622
07534                 | ' return 0  
07534     00 FA 05 F6 | 	mov	result1, #0
07538                 | LR__0623
07538     A7 F0 03 F6 | 	mov	ptra, fp
0753c     B2 00 A0 FD | 	call	#popregs_
07540                 | _expr_ret
07540     2D 00 64 FD | 	ret
07544                 | 
07544                 | ' 
07544                 | ' 
07544                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07544                 | ' 
07544                 | ' function addsub() as integer 
07544                 | _addsub
07544     07 4A 05 F6 | 	mov	COUNT_, #7
07548     A8 00 A0 FD | 	call	#pushregs_
0754c                 | _addsub_enter
0754c     00 1E 06 F6 | 	mov	local01, #0
07550     50 01 B0 FD | 	call	#_muldiv
07554     2E 00 00 FF 
07558     08 E4 05 F1 | 	add	objptr, ##23560
0755c     F2 24 02 FB | 	rdlong	local04, objptr
07560     03 24 66 F0 | 	shl	local04, #3
07564     02 00 00 FF 
07568     38 E4 85 F1 | 	sub	objptr, ##1080
0756c     F2 24 02 F1 | 	add	local04, objptr
07570     04 24 06 F1 | 	add	local04, #4
07574     12 27 02 FB | 	rdlong	local05, local04
07578                 | ' t3.result.uresult=0
07578                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07578                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07578                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07578     2B 00 00 FF 
0757c     D0 E5 85 F1 | 	sub	objptr, ##22480
07580                 | LR__0630
07580     01 26 0E F2 | 	cmp	local05, #1 wz
07584     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07588     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0758c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07590     00 01 90 5D |  if_ne	jmp	#LR__0631
07594     2E 00 00 FF 
07598     08 E4 05 F1 | 	add	objptr, ##23560
0759c     F2 24 02 FB | 	rdlong	local04, objptr
075a0     01 24 06 F1 | 	add	local04, #1
075a4     F2 24 62 FC | 	wrlong	local04, objptr
075a8     2E 00 00 FF 
075ac     08 E4 85 F1 | 	sub	objptr, ##23560
075b0     F0 00 B0 FD | 	call	#_muldiv
075b4     13 23 02 F6 | 	mov	local03, local05
075b8     0F 29 02 F6 | 	mov	local06, local01
075bc     10 2B 02 F6 | 	mov	local07, local02
075c0     11 27 02 F6 | 	mov	local05, local03
075c4     41 00 00 FF 
075c8     40 E4 05 F1 | 	add	objptr, ##33344
075cc     F2 24 02 FB | 	rdlong	local04, objptr
075d0     12 FB 01 F6 | 	mov	result1, local04
075d4     01 FA 65 F0 | 	shl	result1, #1
075d8     12 FB 01 F1 | 	add	result1, local04
075dc     02 FA 65 F0 | 	shl	result1, #2
075e0     03 00 00 FF 
075e4     00 E4 85 F1 | 	sub	objptr, ##1536
075e8     F2 FA 01 F1 | 	add	result1, objptr
075ec     FD 28 62 FC | 	wrlong	local06, result1
075f0     03 00 00 FF 
075f4     00 E4 05 F1 | 	add	objptr, ##1536
075f8     F2 28 02 FB | 	rdlong	local06, objptr
075fc     14 25 02 F6 | 	mov	local04, local06
07600     01 24 66 F0 | 	shl	local04, #1
07604     14 25 02 F1 | 	add	local04, local06
07608     02 24 66 F0 | 	shl	local04, #2
0760c     03 00 00 FF 
07610     00 E4 85 F1 | 	sub	objptr, ##1536
07614     F2 24 02 F1 | 	add	local04, objptr
07618     04 24 06 F1 | 	add	local04, #4
0761c     12 2B 62 FC | 	wrlong	local07, local04
07620     03 00 00 FF 
07624     00 E4 05 F1 | 	add	objptr, ##1536
07628     F2 2A 02 FB | 	rdlong	local07, objptr
0762c     15 29 02 F6 | 	mov	local06, local07
07630     01 28 66 F0 | 	shl	local06, #1
07634     15 29 02 F1 | 	add	local06, local07
07638     02 28 66 F0 | 	shl	local06, #2
0763c     03 00 00 FF 
07640     00 E4 85 F1 | 	sub	objptr, ##1536
07644     F2 28 02 F1 | 	add	local06, objptr
07648     08 28 06 F1 | 	add	local06, #8
0764c     14 27 62 FC | 	wrlong	local05, local06
07650     03 00 00 FF 
07654     00 E4 05 F1 | 	add	objptr, ##1536
07658     F2 28 02 FB | 	rdlong	local06, objptr
0765c     01 28 06 F1 | 	add	local06, #1
07660     F2 28 62 FC | 	wrlong	local06, objptr
07664     13 00 00 FF 
07668     38 E4 85 F1 | 	sub	objptr, ##9784
0766c     F2 24 02 FB | 	rdlong	local04, objptr
07670     03 24 66 F0 | 	shl	local04, #3
07674     02 00 00 FF 
07678     38 E4 85 F1 | 	sub	objptr, ##1080
0767c     F2 24 02 F1 | 	add	local04, objptr
07680     04 24 06 F1 | 	add	local04, #4
07684     12 27 02 FB | 	rdlong	local05, local04
07688     2B 00 00 FF 
0768c     D0 E5 85 F1 | 	sub	objptr, ##22480
07690     EC FE 9F FD | 	jmp	#LR__0630
07694                 | LR__0631
07694                 | '   return 0
07694     00 FA 05 F6 | 	mov	result1, #0
07698     A7 F0 03 F6 | 	mov	ptra, fp
0769c     B2 00 A0 FD | 	call	#popregs_
076a0                 | _addsub_ret
076a0     2D 00 64 FD | 	ret
076a4                 | 
076a4                 | ' 
076a4                 | ' sub muldiv()
076a4                 | _muldiv
076a4     08 4A 05 F6 | 	mov	COUNT_, #8
076a8     A8 00 A0 FD | 	call	#pushregs_
076ac                 | _muldiv_enter
076ac     00 1E 06 F6 | 	mov	local01, #0
076b0     58 01 B0 FD | 	call	#_getvalue
076b4     2E 00 00 FF 
076b8     08 E4 05 F1 | 	add	objptr, ##23560
076bc     F2 24 02 FB | 	rdlong	local04, objptr
076c0     03 24 66 F0 | 	shl	local04, #3
076c4     02 00 00 FF 
076c8     38 E4 85 F1 | 	sub	objptr, ##1080
076cc     F2 24 02 F1 | 	add	local04, objptr
076d0     04 24 06 F1 | 	add	local04, #4
076d4     12 27 02 FB | 	rdlong	local05, local04
076d8                 | ' t3.result.uresult=0
076d8                 | ' getvalue()    
076d8                 | ' op = lparts(ct).token
076d8                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
076d8     2B 00 00 FF 
076dc     D0 E5 85 F1 | 	sub	objptr, ##22480
076e0                 | LR__0640
076e0     05 26 0E F2 | 	cmp	local05, #5 wz
076e4     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
076e8     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
076ec     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
076f0     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
076f4     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
076f8     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
076fc     00 01 90 5D |  if_ne	jmp	#LR__0641
07700     2E 00 00 FF 
07704     08 E4 05 F1 | 	add	objptr, ##23560
07708     F2 24 02 FB | 	rdlong	local04, objptr
0770c     01 24 06 F1 | 	add	local04, #1
07710     F2 24 62 FC | 	wrlong	local04, objptr
07714     2E 00 00 FF 
07718     08 E4 85 F1 | 	sub	objptr, ##23560
0771c     EC 00 B0 FD | 	call	#_getvalue
07720     13 23 02 F6 | 	mov	local03, local05
07724     0F 29 02 F6 | 	mov	local06, local01
07728     10 2B 02 F6 | 	mov	local07, local02
0772c     11 27 02 F6 | 	mov	local05, local03
07730     41 00 00 FF 
07734     40 E4 05 F1 | 	add	objptr, ##33344
07738     F2 24 02 FB | 	rdlong	local04, objptr
0773c     12 2D 02 F6 | 	mov	local08, local04
07740     01 2C 66 F0 | 	shl	local08, #1
07744     12 2D 02 F1 | 	add	local08, local04
07748     02 2C 66 F0 | 	shl	local08, #2
0774c     03 00 00 FF 
07750     00 E4 85 F1 | 	sub	objptr, ##1536
07754     F2 2C 02 F1 | 	add	local08, objptr
07758     16 29 62 FC | 	wrlong	local06, local08
0775c     03 00 00 FF 
07760     00 E4 05 F1 | 	add	objptr, ##1536
07764     F2 2C 02 FB | 	rdlong	local08, objptr
07768     16 29 02 F6 | 	mov	local06, local08
0776c     01 28 66 F0 | 	shl	local06, #1
07770     16 29 02 F1 | 	add	local06, local08
07774     02 28 66 F0 | 	shl	local06, #2
07778     03 00 00 FF 
0777c     00 E4 85 F1 | 	sub	objptr, ##1536
07780     F2 28 02 F1 | 	add	local06, objptr
07784     04 28 06 F1 | 	add	local06, #4
07788     14 2B 62 FC | 	wrlong	local07, local06
0778c     03 00 00 FF 
07790     00 E4 05 F1 | 	add	objptr, ##1536
07794     F2 2C 02 FB | 	rdlong	local08, objptr
07798     16 2B 02 F6 | 	mov	local07, local08
0779c     01 2A 66 F0 | 	shl	local07, #1
077a0     16 2B 02 F1 | 	add	local07, local08
077a4     02 2A 66 F0 | 	shl	local07, #2
077a8     03 00 00 FF 
077ac     00 E4 85 F1 | 	sub	objptr, ##1536
077b0     F2 2A 02 F1 | 	add	local07, objptr
077b4     08 2A 06 F1 | 	add	local07, #8
077b8     15 27 62 FC | 	wrlong	local05, local07
077bc     03 00 00 FF 
077c0     00 E4 05 F1 | 	add	objptr, ##1536
077c4     F2 28 02 FB | 	rdlong	local06, objptr
077c8     01 28 06 F1 | 	add	local06, #1
077cc     F2 28 62 FC | 	wrlong	local06, objptr
077d0     13 00 00 FF 
077d4     38 E4 85 F1 | 	sub	objptr, ##9784
077d8     F2 24 02 FB | 	rdlong	local04, objptr
077dc     03 24 66 F0 | 	shl	local04, #3
077e0     02 00 00 FF 
077e4     38 E4 85 F1 | 	sub	objptr, ##1080
077e8     F2 24 02 F1 | 	add	local04, objptr
077ec     04 24 06 F1 | 	add	local04, #4
077f0     12 27 02 FB | 	rdlong	local05, local04
077f4     2B 00 00 FF 
077f8     D0 E5 85 F1 | 	sub	objptr, ##22480
077fc     E0 FE 9F FD | 	jmp	#LR__0640
07800                 | LR__0641
07800     A7 F0 03 F6 | 	mov	ptra, fp
07804     B2 00 A0 FD | 	call	#popregs_
07808                 | _muldiv_ret
07808     2D 00 64 FD | 	ret
0780c                 | 
0780c                 | ' 
0780c                 | ' sub getvalue() 
0780c                 | _getvalue
0780c     08 4A 05 F6 | 	mov	COUNT_, #8
07810     A8 00 A0 FD | 	call	#pushregs_
07814                 | _getvalue_enter
07814     01 24 06 F6 | 	mov	local04, #1
07818     00 1E 06 F6 | 	mov	local01, #0
0781c     1D 22 06 F6 | 	mov	local03, #29
07820     2E 00 00 FF 
07824     08 E4 05 F1 | 	add	objptr, ##23560
07828     F2 FA 01 FB | 	rdlong	result1, objptr
0782c     03 FA 65 F0 | 	shl	result1, #3
07830     02 00 00 FF 
07834     38 E4 85 F1 | 	sub	objptr, ##1080
07838     F2 FA 01 F1 | 	add	result1, objptr
0783c     04 FA 05 F1 | 	add	result1, #4
07840     FD 26 02 FB | 	rdlong	local05, result1
07844                 | ' m=1
07844                 | ' t1.result.uresult=0: t1.result_type=result_uint
07844                 | ' op=lparts(ct).token
07844                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07844     02 26 0E F2 | 	cmp	local05, #2 wz
07848     2B 00 00 FF 
0784c     D0 E5 85 F1 | 	sub	objptr, ##22480
07850     38 00 90 5D |  if_ne	jmp	#LR__0650
07854     01 24 66 F6 | 	neg	local04, #1
07858     2E 00 00 FF 
0785c     08 E4 05 F1 | 	add	objptr, ##23560
07860     F2 26 02 FB | 	rdlong	local05, objptr
07864     01 26 06 F1 | 	add	local05, #1
07868     F2 26 62 FC | 	wrlong	local05, objptr
0786c     03 26 66 F0 | 	shl	local05, #3
07870     02 00 00 FF 
07874     38 E4 85 F1 | 	sub	objptr, ##1080
07878     F2 26 02 F1 | 	add	local05, objptr
0787c     04 26 06 F1 | 	add	local05, #4
07880     13 27 02 FB | 	rdlong	local05, local05
07884     2B 00 00 FF 
07888     D0 E5 85 F1 | 	sub	objptr, ##22480
0788c                 | LR__0650
0788c                 | ' select case op
0788c     01 00 00 FF 
07890     00 26 0E F2 | 	cmp	local05, ##512 wz
07894     3C 00 90 AD |  if_e	jmp	#LR__0651
07898     01 00 00 FF 
0789c     01 26 0E F2 | 	cmp	local05, ##513 wz
078a0     88 01 90 AD |  if_e	jmp	#LR__0654
078a4     01 00 00 FF 
078a8     02 26 0E F2 | 	cmp	local05, ##514 wz
078ac     84 02 90 AD |  if_e	jmp	#LR__0655
078b0     01 00 00 FF 
078b4     03 26 0E F2 | 	cmp	local05, ##515 wz
078b8     E8 03 90 AD |  if_e	jmp	#LR__0658
078bc     01 00 00 FF 
078c0     04 26 0E F2 | 	cmp	local05, ##516 wz
078c4     CC 04 90 AD |  if_e	jmp	#LR__0659
078c8     15 26 0E F2 | 	cmp	local05, #21 wz
078cc     EC 04 90 AD |  if_e	jmp	#LR__0660
078d0     5C 05 90 FD | 	jmp	#LR__0661
078d4                 | LR__0651
078d4                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
078d4     01 24 0E F2 | 	cmp	local04, #1 wz
078d8     3C 00 90 5D |  if_ne	jmp	#LR__0652
078dc     2E 00 00 FF 
078e0     08 E4 05 F1 | 	add	objptr, ##23560
078e4     F2 26 02 FB | 	rdlong	local05, objptr
078e8     03 26 66 F0 | 	shl	local05, #3
078ec     02 00 00 FF 
078f0     38 E4 85 F1 | 	sub	objptr, ##1080
078f4     F2 26 02 F1 | 	add	local05, objptr
078f8     13 13 02 FB | 	rdlong	arg01, local05
078fc     00 14 06 F6 | 	mov	arg02, #0
07900     2B 00 00 FF 
07904     D0 E5 85 F1 | 	sub	objptr, ##22480
07908     C0 03 B1 FD | 	call	#__system____builtin_atoi
0790c     FD 24 02 FD | 	qmul	local04, result1
07910     18 1E 62 FD | 	getqx	local01
07914     1D 22 06 F6 | 	mov	local03, #29
07918                 | LR__0652
07918                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07918     FF FF 7F FF 
0791c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07920     3C 00 90 5D |  if_ne	jmp	#LR__0653
07924     2E 00 00 FF 
07928     08 E4 05 F1 | 	add	objptr, ##23560
0792c     F2 26 02 FB | 	rdlong	local05, objptr
07930     03 26 66 F0 | 	shl	local05, #3
07934     02 00 00 FF 
07938     38 E4 85 F1 | 	sub	objptr, ##1080
0793c     F2 26 02 F1 | 	add	local05, objptr
07940     13 13 02 FB | 	rdlong	arg01, local05
07944     00 14 06 F6 | 	mov	arg02, #0
07948     2B 00 00 FF 
0794c     D0 E5 85 F1 | 	sub	objptr, ##22480
07950     78 03 B1 FD | 	call	#__system____builtin_atoi
07954     FD 24 02 FD | 	qmul	local04, result1
07958     18 1E 62 FD | 	getqx	local01
0795c     1C 22 06 F6 | 	mov	local03, #28
07960                 | LR__0653
07960     0F 29 02 F6 | 	mov	local06, local01
07964     10 2B 02 F6 | 	mov	local07, local02
07968     11 27 02 F6 | 	mov	local05, local03
0796c     41 00 00 FF 
07970     40 E4 05 F1 | 	add	objptr, ##33344
07974     F2 1E 02 FB | 	rdlong	local01, objptr
07978     0F 25 02 F6 | 	mov	local04, local01
0797c     01 24 66 F0 | 	shl	local04, #1
07980     0F 25 02 F1 | 	add	local04, local01
07984     02 24 66 F0 | 	shl	local04, #2
07988     03 00 00 FF 
0798c     00 E4 85 F1 | 	sub	objptr, ##1536
07990     F2 24 02 F1 | 	add	local04, objptr
07994     12 29 62 FC | 	wrlong	local06, local04
07998     03 00 00 FF 
0799c     00 E4 05 F1 | 	add	objptr, ##1536
079a0     F2 28 02 FB | 	rdlong	local06, objptr
079a4     14 1F 02 F6 | 	mov	local01, local06
079a8     01 1E 66 F0 | 	shl	local01, #1
079ac     14 1F 02 F1 | 	add	local01, local06
079b0     02 1E 66 F0 | 	shl	local01, #2
079b4     03 00 00 FF 
079b8     00 E4 85 F1 | 	sub	objptr, ##1536
079bc     F2 1E 02 F1 | 	add	local01, objptr
079c0     04 1E 06 F1 | 	add	local01, #4
079c4     0F 2B 62 FC | 	wrlong	local07, local01
079c8     03 00 00 FF 
079cc     00 E4 05 F1 | 	add	objptr, ##1536
079d0     F2 2A 02 FB | 	rdlong	local07, objptr
079d4     15 29 02 F6 | 	mov	local06, local07
079d8     01 28 66 F0 | 	shl	local06, #1
079dc     15 29 02 F1 | 	add	local06, local07
079e0     02 28 66 F0 | 	shl	local06, #2
079e4     03 00 00 FF 
079e8     00 E4 85 F1 | 	sub	objptr, ##1536
079ec     F2 28 02 F1 | 	add	local06, objptr
079f0     08 28 06 F1 | 	add	local06, #8
079f4     14 27 62 FC | 	wrlong	local05, local06
079f8     03 00 00 FF 
079fc     00 E4 05 F1 | 	add	objptr, ##1536
07a00     F2 28 02 FB | 	rdlong	local06, objptr
07a04     01 28 06 F1 | 	add	local06, #1
07a08     F2 28 62 FC | 	wrlong	local06, objptr
07a0c     13 00 00 FF 
07a10     38 E4 85 F1 | 	sub	objptr, ##9784
07a14     F2 28 02 FB | 	rdlong	local06, objptr
07a18     01 28 06 F1 | 	add	local06, #1
07a1c     F2 28 62 FC | 	wrlong	local06, objptr
07a20     2E 00 00 FF 
07a24     08 E4 85 F1 | 	sub	objptr, ##23560
07a28     28 04 90 FD | 	jmp	#LR__0662
07a2c                 | LR__0654
07a2c     2E 00 00 FF 
07a30     08 E4 05 F1 | 	add	objptr, ##23560
07a34     F2 28 02 FB | 	rdlong	local06, objptr
07a38     03 28 66 F0 | 	shl	local06, #3
07a3c     02 00 00 FF 
07a40     38 E4 85 F1 | 	sub	objptr, ##1080
07a44     F2 28 02 F1 | 	add	local06, objptr
07a48     14 13 02 FB | 	rdlong	arg01, local06
07a4c     00 14 06 F6 | 	mov	arg02, #0
07a50     2B 00 00 FF 
07a54     D0 E5 85 F1 | 	sub	objptr, ##22480
07a58     70 02 B1 FD | 	call	#__system____builtin_atoi
07a5c     FD 24 02 FD | 	qmul	local04, result1
07a60     41 00 00 FF 
07a64     40 E4 05 F1 | 	add	objptr, ##33344
07a68     F2 28 02 FB | 	rdlong	local06, objptr
07a6c     14 2D 02 F6 | 	mov	local08, local06
07a70     01 2C 66 F0 | 	shl	local08, #1
07a74     14 2D 02 F1 | 	add	local08, local06
07a78     02 2C 66 F0 | 	shl	local08, #2
07a7c     03 00 00 FF 
07a80     00 E4 85 F1 | 	sub	objptr, ##1536
07a84     F2 2C 02 F1 | 	add	local08, objptr
07a88     03 00 00 FF 
07a8c     00 E4 05 F1 | 	add	objptr, ##1536
07a90     18 1E 62 FD | 	getqx	local01
07a94     1C 22 06 F6 | 	mov	local03, #28
07a98     0F 29 02 F6 | 	mov	local06, local01
07a9c     10 2B 02 F6 | 	mov	local07, local02
07aa0     16 29 62 FC | 	wrlong	local06, local08
07aa4     11 2D 02 F6 | 	mov	local08, local03
07aa8     F2 28 02 FB | 	rdlong	local06, objptr
07aac     14 27 02 F6 | 	mov	local05, local06
07ab0     01 26 66 F0 | 	shl	local05, #1
07ab4     14 27 02 F1 | 	add	local05, local06
07ab8     02 26 66 F0 | 	shl	local05, #2
07abc     03 00 00 FF 
07ac0     00 E4 85 F1 | 	sub	objptr, ##1536
07ac4     F2 26 02 F1 | 	add	local05, objptr
07ac8     04 26 06 F1 | 	add	local05, #4
07acc     13 2B 62 FC | 	wrlong	local07, local05
07ad0     03 00 00 FF 
07ad4     00 E4 05 F1 | 	add	objptr, ##1536
07ad8     F2 2A 02 FB | 	rdlong	local07, objptr
07adc     15 29 02 F6 | 	mov	local06, local07
07ae0     01 28 66 F0 | 	shl	local06, #1
07ae4     15 29 02 F1 | 	add	local06, local07
07ae8     02 28 66 F0 | 	shl	local06, #2
07aec     03 00 00 FF 
07af0     00 E4 85 F1 | 	sub	objptr, ##1536
07af4     F2 28 02 F1 | 	add	local06, objptr
07af8     08 28 06 F1 | 	add	local06, #8
07afc     14 2D 62 FC | 	wrlong	local08, local06
07b00     03 00 00 FF 
07b04     00 E4 05 F1 | 	add	objptr, ##1536
07b08     F2 28 02 FB | 	rdlong	local06, objptr
07b0c     01 28 06 F1 | 	add	local06, #1
07b10     F2 28 62 FC | 	wrlong	local06, objptr
07b14     13 00 00 FF 
07b18     38 E4 85 F1 | 	sub	objptr, ##9784
07b1c     F2 28 02 FB | 	rdlong	local06, objptr
07b20     01 28 06 F1 | 	add	local06, #1
07b24     F2 28 62 FC | 	wrlong	local06, objptr
07b28     2E 00 00 FF 
07b2c     08 E4 85 F1 | 	sub	objptr, ##23560
07b30     20 03 90 FD | 	jmp	#LR__0662
07b34                 | LR__0655
07b34                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07b34     01 24 0E F2 | 	cmp	local04, #1 wz
07b38     48 00 90 5D |  if_ne	jmp	#LR__0656
07b3c     00 C0 1F FF 
07b40     00 28 06 F6 | 	mov	local06, ##1065353216
07b44     2E 00 00 FF 
07b48     08 E4 05 F1 | 	add	objptr, ##23560
07b4c     F2 2C 02 FB | 	rdlong	local08, objptr
07b50     03 2C 66 F0 | 	shl	local08, #3
07b54     02 00 00 FF 
07b58     38 E4 85 F1 | 	sub	objptr, ##1080
07b5c     F2 2C 02 F1 | 	add	local08, objptr
07b60     16 13 02 FB | 	rdlong	arg01, local08
07b64     2B 00 00 FF 
07b68     D0 E5 85 F1 | 	sub	objptr, ##22480
07b6c     CC 02 B1 FD | 	call	#__system____builtin_atof
07b70     FD 14 02 F6 | 	mov	arg02, result1
07b74     14 13 02 F6 | 	mov	arg01, local06
07b78     D8 FA B0 FD | 	call	#__system___float_mul
07b7c     FD 1E 02 F6 | 	mov	local01, result1
07b80     1E 22 06 F6 | 	mov	local03, #30
07b84                 | LR__0656
07b84                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07b84     FF FF 7F FF 
07b88     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b8c     48 00 90 5D |  if_ne	jmp	#LR__0657
07b90     00 C0 5F FF 
07b94     00 28 06 F6 | 	mov	local06, ##-1082130432
07b98     2E 00 00 FF 
07b9c     08 E4 05 F1 | 	add	objptr, ##23560
07ba0     F2 2C 02 FB | 	rdlong	local08, objptr
07ba4     03 2C 66 F0 | 	shl	local08, #3
07ba8     02 00 00 FF 
07bac     38 E4 85 F1 | 	sub	objptr, ##1080
07bb0     F2 2C 02 F1 | 	add	local08, objptr
07bb4     16 13 02 FB | 	rdlong	arg01, local08
07bb8     2B 00 00 FF 
07bbc     D0 E5 85 F1 | 	sub	objptr, ##22480
07bc0     78 02 B1 FD | 	call	#__system____builtin_atof
07bc4     FD 14 02 F6 | 	mov	arg02, result1
07bc8     14 13 02 F6 | 	mov	arg01, local06
07bcc     84 FA B0 FD | 	call	#__system___float_mul
07bd0     FD 1E 02 F6 | 	mov	local01, result1
07bd4     1E 22 06 F6 | 	mov	local03, #30
07bd8                 | LR__0657
07bd8     0F 29 02 F6 | 	mov	local06, local01
07bdc     10 2B 02 F6 | 	mov	local07, local02
07be0     11 27 02 F6 | 	mov	local05, local03
07be4     41 00 00 FF 
07be8     40 E4 05 F1 | 	add	objptr, ##33344
07bec     F2 1E 02 FB | 	rdlong	local01, objptr
07bf0     0F 2D 02 F6 | 	mov	local08, local01
07bf4     01 2C 66 F0 | 	shl	local08, #1
07bf8     0F 2D 02 F1 | 	add	local08, local01
07bfc     02 2C 66 F0 | 	shl	local08, #2
07c00     03 00 00 FF 
07c04     00 E4 85 F1 | 	sub	objptr, ##1536
07c08     F2 2C 02 F1 | 	add	local08, objptr
07c0c     16 29 62 FC | 	wrlong	local06, local08
07c10     03 00 00 FF 
07c14     00 E4 05 F1 | 	add	objptr, ##1536
07c18     F2 2C 02 FB | 	rdlong	local08, objptr
07c1c     16 29 02 F6 | 	mov	local06, local08
07c20     01 28 66 F0 | 	shl	local06, #1
07c24     16 29 02 F1 | 	add	local06, local08
07c28     02 28 66 F0 | 	shl	local06, #2
07c2c     03 00 00 FF 
07c30     00 E4 85 F1 | 	sub	objptr, ##1536
07c34     F2 28 02 F1 | 	add	local06, objptr
07c38     04 28 06 F1 | 	add	local06, #4
07c3c     14 2B 62 FC | 	wrlong	local07, local06
07c40     03 00 00 FF 
07c44     00 E4 05 F1 | 	add	objptr, ##1536
07c48     F2 2C 02 FB | 	rdlong	local08, objptr
07c4c     16 2B 02 F6 | 	mov	local07, local08
07c50     01 2A 66 F0 | 	shl	local07, #1
07c54     16 2B 02 F1 | 	add	local07, local08
07c58     02 2A 66 F0 | 	shl	local07, #2
07c5c     03 00 00 FF 
07c60     00 E4 85 F1 | 	sub	objptr, ##1536
07c64     F2 2A 02 F1 | 	add	local07, objptr
07c68     08 2A 06 F1 | 	add	local07, #8
07c6c     15 27 62 FC | 	wrlong	local05, local07
07c70     03 00 00 FF 
07c74     00 E4 05 F1 | 	add	objptr, ##1536
07c78     F2 28 02 FB | 	rdlong	local06, objptr
07c7c     01 28 06 F1 | 	add	local06, #1
07c80     F2 28 62 FC | 	wrlong	local06, objptr
07c84     13 00 00 FF 
07c88     38 E4 85 F1 | 	sub	objptr, ##9784
07c8c     F2 28 02 FB | 	rdlong	local06, objptr
07c90     01 28 06 F1 | 	add	local06, #1
07c94     F2 28 62 FC | 	wrlong	local06, objptr
07c98     2E 00 00 FF 
07c9c     08 E4 85 F1 | 	sub	objptr, ##23560
07ca0     B0 01 90 FD | 	jmp	#LR__0662
07ca4                 | LR__0658
07ca4     2E 00 00 FF 
07ca8     08 E4 05 F1 | 	add	objptr, ##23560
07cac     F2 28 02 FB | 	rdlong	local06, objptr
07cb0     03 28 66 F0 | 	shl	local06, #3
07cb4     02 00 00 FF 
07cb8     38 E4 85 F1 | 	sub	objptr, ##1080
07cbc     F2 28 02 F1 | 	add	local06, objptr
07cc0     14 1F 02 FB | 	rdlong	local01, local06
07cc4     1F 22 06 F6 | 	mov	local03, #31
07cc8     0F 29 02 F6 | 	mov	local06, local01
07ccc     10 2B 02 F6 | 	mov	local07, local02
07cd0     11 27 02 F6 | 	mov	local05, local03
07cd4     15 00 00 FF 
07cd8     70 E4 05 F1 | 	add	objptr, ##10864
07cdc     F2 1E 02 FB | 	rdlong	local01, objptr
07ce0     0F 2D 02 F6 | 	mov	local08, local01
07ce4     01 2C 66 F0 | 	shl	local08, #1
07ce8     0F 2D 02 F1 | 	add	local08, local01
07cec     02 2C 66 F0 | 	shl	local08, #2
07cf0     03 00 00 FF 
07cf4     00 E4 85 F1 | 	sub	objptr, ##1536
07cf8     F2 2C 02 F1 | 	add	local08, objptr
07cfc     16 29 62 FC | 	wrlong	local06, local08
07d00     03 00 00 FF 
07d04     00 E4 05 F1 | 	add	objptr, ##1536
07d08     F2 2C 02 FB | 	rdlong	local08, objptr
07d0c     16 29 02 F6 | 	mov	local06, local08
07d10     01 28 66 F0 | 	shl	local06, #1
07d14     16 29 02 F1 | 	add	local06, local08
07d18     02 28 66 F0 | 	shl	local06, #2
07d1c     03 00 00 FF 
07d20     00 E4 85 F1 | 	sub	objptr, ##1536
07d24     F2 28 02 F1 | 	add	local06, objptr
07d28     04 28 06 F1 | 	add	local06, #4
07d2c     14 2B 62 FC | 	wrlong	local07, local06
07d30     03 00 00 FF 
07d34     00 E4 05 F1 | 	add	objptr, ##1536
07d38     F2 2C 02 FB | 	rdlong	local08, objptr
07d3c     16 2B 02 F6 | 	mov	local07, local08
07d40     01 2A 66 F0 | 	shl	local07, #1
07d44     16 2B 02 F1 | 	add	local07, local08
07d48     02 2A 66 F0 | 	shl	local07, #2
07d4c     03 00 00 FF 
07d50     00 E4 85 F1 | 	sub	objptr, ##1536
07d54     F2 2A 02 F1 | 	add	local07, objptr
07d58     08 2A 06 F1 | 	add	local07, #8
07d5c     15 27 62 FC | 	wrlong	local05, local07
07d60     03 00 00 FF 
07d64     00 E4 05 F1 | 	add	objptr, ##1536
07d68     F2 28 02 FB | 	rdlong	local06, objptr
07d6c     01 28 06 F1 | 	add	local06, #1
07d70     F2 28 62 FC | 	wrlong	local06, objptr
07d74     13 00 00 FF 
07d78     38 E4 85 F1 | 	sub	objptr, ##9784
07d7c     F2 28 02 FB | 	rdlong	local06, objptr
07d80     01 28 06 F1 | 	add	local06, #1
07d84     F2 28 62 FC | 	wrlong	local06, objptr
07d88     2E 00 00 FF 
07d8c     08 E4 85 F1 | 	sub	objptr, ##23560
07d90     C0 00 90 FD | 	jmp	#LR__0662
07d94                 | LR__0659
07d94     12 13 02 F6 | 	mov	arg01, local04
07d98     B8 03 B0 FD | 	call	#_getvar
07d9c     2E 00 00 FF 
07da0     08 E4 05 F1 | 	add	objptr, ##23560
07da4     F2 28 02 FB | 	rdlong	local06, objptr
07da8     01 28 06 F1 | 	add	local06, #1
07dac     F2 28 62 FC | 	wrlong	local06, objptr
07db0     2E 00 00 FF 
07db4     08 E4 85 F1 | 	sub	objptr, ##23560
07db8     98 00 90 FD | 	jmp	#LR__0662
07dbc                 | LR__0660
07dbc     2E 00 00 FF 
07dc0     08 E4 05 F1 | 	add	objptr, ##23560
07dc4     F2 28 02 FB | 	rdlong	local06, objptr
07dc8     01 28 06 F1 | 	add	local06, #1
07dcc     F2 28 62 FC | 	wrlong	local06, objptr
07dd0     2E 00 00 FF 
07dd4     08 E4 85 F1 | 	sub	objptr, ##23560
07dd8     08 F5 BF FD | 	call	#_expr
07ddc                 | '     ct+=1
07ddc                 | '     expr() 
07ddc                 | '     if lparts(ct).token=token_rpar then ct+=1
07ddc     2E 00 00 FF 
07de0     08 E4 05 F1 | 	add	objptr, ##23560
07de4     F2 2C 02 FB | 	rdlong	local08, objptr
07de8     03 2C 66 F0 | 	shl	local08, #3
07dec     02 00 00 FF 
07df0     38 E4 85 F1 | 	sub	objptr, ##1080
07df4     F2 2C 02 F1 | 	add	local08, objptr
07df8     04 2C 06 F1 | 	add	local08, #4
07dfc     16 2D 02 FB | 	rdlong	local08, local08
07e00     14 2C 0E F2 | 	cmp	local08, #20 wz
07e04     2B 00 00 FF 
07e08     D0 E5 85 F1 | 	sub	objptr, ##22480
07e0c     44 00 90 5D |  if_ne	jmp	#LR__0662
07e10     2E 00 00 FF 
07e14     08 E4 05 F1 | 	add	objptr, ##23560
07e18     F2 28 02 FB | 	rdlong	local06, objptr
07e1c     01 28 06 F1 | 	add	local06, #1
07e20     F2 28 62 FC | 	wrlong	local06, objptr
07e24     2E 00 00 FF 
07e28     08 E4 85 F1 | 	sub	objptr, ##23560
07e2c     24 00 90 FD | 	jmp	#LR__0662
07e30                 | LR__0661
07e30     12 13 02 F6 | 	mov	arg01, local04
07e34     28 00 B0 FD | 	call	#_getfun
07e38     2E 00 00 FF 
07e3c     08 E4 05 F1 | 	add	objptr, ##23560
07e40     F2 28 02 FB | 	rdlong	local06, objptr
07e44     01 28 06 F1 | 	add	local06, #1
07e48     F2 28 62 FC | 	wrlong	local06, objptr
07e4c     2E 00 00 FF 
07e50     08 E4 85 F1 | 	sub	objptr, ##23560
07e54                 | LR__0662
07e54     A7 F0 03 F6 | 	mov	ptra, fp
07e58     B2 00 A0 FD | 	call	#popregs_
07e5c                 | _getvalue_ret
07e5c     2D 00 64 FD | 	ret
07e60                 | 
07e60                 | ' 
07e60                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
07e60                 | _getfun
07e60     0A 4A 05 F6 | 	mov	COUNT_, #10
07e64     A8 00 A0 FD | 	call	#pushregs_
07e68                 | _getfun_enter
07e68     09 25 02 F6 | 	mov	local04, arg01
07e6c     2E 00 00 FF 
07e70     08 E4 05 F1 | 	add	objptr, ##23560
07e74     F2 26 02 FB | 	rdlong	local05, objptr
07e78     13 29 02 F6 | 	mov	local06, local05
07e7c     00 2A 06 F6 | 	mov	local07, #0
07e80                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
07e80                 | ' oldct=ct
07e80                 | ' numpar=0
07e80                 | '   
07e80                 | ' if lparts(ct+1).token=token_lpar then
07e80     01 26 06 F1 | 	add	local05, #1
07e84     03 26 66 F0 | 	shl	local05, #3
07e88     02 00 00 FF 
07e8c     38 E4 85 F1 | 	sub	objptr, ##1080
07e90     F2 26 02 F1 | 	add	local05, objptr
07e94     04 26 06 F1 | 	add	local05, #4
07e98     13 27 02 FB | 	rdlong	local05, local05
07e9c     15 26 0E F2 | 	cmp	local05, #21 wz
07ea0     2B 00 00 FF 
07ea4     D0 E5 85 F1 | 	sub	objptr, ##22480
07ea8     08 01 90 5D |  if_ne	jmp	#LR__0674
07eac     2E 00 00 FF 
07eb0     08 E4 05 F1 | 	add	objptr, ##23560
07eb4     F2 2C 02 FB | 	rdlong	local08, objptr
07eb8     01 2C 06 F1 | 	add	local08, #1
07ebc     F2 2C 62 FC | 	wrlong	local08, objptr
07ec0     2E 00 00 FF 
07ec4     08 E4 85 F1 | 	sub	objptr, ##23560
07ec8                 | '   ct+=1 											' omit this lpar, this is for expr list
07ec8                 | '   do
07ec8                 | LR__0670
07ec8     2E 00 00 FF 
07ecc     08 E4 05 F1 | 	add	objptr, ##23560
07ed0     F2 26 02 FB | 	rdlong	local05, objptr
07ed4     01 26 06 F1 | 	add	local05, #1
07ed8     F2 26 62 FC | 	wrlong	local05, objptr
07edc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
07edc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
07edc     03 26 66 F0 | 	shl	local05, #3
07ee0     02 00 00 FF 
07ee4     38 E4 85 F1 | 	sub	objptr, ##1080
07ee8     F2 26 02 F1 | 	add	local05, objptr
07eec     04 26 06 F1 | 	add	local05, #4
07ef0     13 2D 02 FB | 	rdlong	local08, local05
07ef4     15 2C 0E F2 | 	cmp	local08, #21 wz
07ef8     2B 00 00 FF 
07efc     D0 E5 85 F1 | 	sub	objptr, ##22480
07f00     40 00 90 5D |  if_ne	jmp	#LR__0671
07f04     2E 00 00 FF 
07f08     08 E4 05 F1 | 	add	objptr, ##23560
07f0c     F2 2C 02 FB | 	rdlong	local08, objptr
07f10     01 2C 06 F1 | 	add	local08, #1
07f14     F2 2C 62 FC | 	wrlong	local08, objptr
07f18     2E 00 00 FF 
07f1c     08 E4 85 F1 | 	sub	objptr, ##23560
07f20     C0 F3 BF FD | 	call	#_expr
07f24     2E 00 00 FF 
07f28     08 E4 05 F1 | 	add	objptr, ##23560
07f2c     F2 2C 02 FB | 	rdlong	local08, objptr
07f30     01 2C 06 F1 | 	add	local08, #1
07f34     F2 2C 62 FC | 	wrlong	local08, objptr
07f38     2E 00 00 FF 
07f3c     08 E4 85 F1 | 	sub	objptr, ##23560
07f40     04 00 90 FD | 	jmp	#LR__0672
07f44                 | LR__0671
07f44     9C F3 BF FD | 	call	#_expr
07f48                 | LR__0672
07f48     01 2A 06 F1 | 	add	local07, #1
07f4c     2E 00 00 FF 
07f50     08 E4 05 F1 | 	add	objptr, ##23560
07f54     F2 26 02 FB | 	rdlong	local05, objptr
07f58     03 26 66 F0 | 	shl	local05, #3
07f5c     02 00 00 FF 
07f60     38 E4 85 F1 | 	sub	objptr, ##1080
07f64     F2 26 02 F1 | 	add	local05, objptr
07f68     04 26 06 F1 | 	add	local05, #4
07f6c     13 2D 02 FB | 	rdlong	local08, local05
07f70     14 2C 0E F2 | 	cmp	local08, #20 wz
07f74     2B 00 00 FF 
07f78     D0 E5 85 F1 | 	sub	objptr, ##22480
07f7c     34 00 90 AD |  if_e	jmp	#LR__0673
07f80     2E 00 00 FF 
07f84     08 E4 05 F1 | 	add	objptr, ##23560
07f88     F2 2C 02 FB | 	rdlong	local08, objptr
07f8c     03 2C 66 F0 | 	shl	local08, #3
07f90     02 00 00 FF 
07f94     38 E4 85 F1 | 	sub	objptr, ##1080
07f98     F2 2C 02 F1 | 	add	local08, objptr
07f9c     04 2C 06 F1 | 	add	local08, #4
07fa0     16 2D 02 FB | 	rdlong	local08, local08
07fa4     FE 2D 0E F2 | 	cmp	local08, #510 wz
07fa8     2B 00 00 FF 
07fac     D0 E5 85 F1 | 	sub	objptr, ##22480
07fb0     14 FF 9F 5D |  if_ne	jmp	#LR__0670
07fb4                 | LR__0673
07fb4                 | LR__0674
07fb4     15 1F 02 F6 | 	mov	local01, local07
07fb8     03 28 66 F0 | 	shl	local06, #3
07fbc     2B 00 00 FF 
07fc0     D0 E5 05 F1 | 	add	objptr, ##22480
07fc4     F2 28 02 F1 | 	add	local06, objptr
07fc8     04 28 06 F1 | 	add	local06, #4
07fcc     14 23 02 FB | 	rdlong	local03, local06
07fd0     0F 2D 02 F6 | 	mov	local08, local01
07fd4     10 2B 02 F6 | 	mov	local07, local02
07fd8     11 29 02 F6 | 	mov	local06, local03
07fdc     15 00 00 FF 
07fe0     70 E4 05 F1 | 	add	objptr, ##10864
07fe4     F2 26 02 FB | 	rdlong	local05, objptr
07fe8     13 13 02 F6 | 	mov	arg01, local05
07fec     01 12 66 F0 | 	shl	arg01, #1
07ff0     13 13 02 F1 | 	add	arg01, local05
07ff4     02 12 66 F0 | 	shl	arg01, #2
07ff8     03 00 00 FF 
07ffc     00 E4 85 F1 | 	sub	objptr, ##1536
08000     F2 12 02 F1 | 	add	arg01, objptr
08004     09 2D 62 FC | 	wrlong	local08, arg01
08008     03 00 00 FF 
0800c     00 E4 05 F1 | 	add	objptr, ##1536
08010     F2 2C 02 FB | 	rdlong	local08, objptr
08014     16 2F 02 F6 | 	mov	local09, local08
08018     01 2E 66 F0 | 	shl	local09, #1
0801c     16 2F 02 F1 | 	add	local09, local08
08020     02 2E 66 F0 | 	shl	local09, #2
08024     03 00 00 FF 
08028     00 E4 85 F1 | 	sub	objptr, ##1536
0802c     F2 2E 02 F1 | 	add	local09, objptr
08030     04 2E 06 F1 | 	add	local09, #4
08034     17 2B 62 FC | 	wrlong	local07, local09
08038     03 00 00 FF 
0803c     00 E4 05 F1 | 	add	objptr, ##1536
08040     F2 2C 02 FB | 	rdlong	local08, objptr
08044     16 31 02 F6 | 	mov	local10, local08
08048     01 30 66 F0 | 	shl	local10, #1
0804c     16 31 02 F1 | 	add	local10, local08
08050     02 30 66 F0 | 	shl	local10, #2
08054     03 00 00 FF 
08058     00 E4 85 F1 | 	sub	objptr, ##1536
0805c     F2 30 02 F1 | 	add	local10, objptr
08060     08 30 06 F1 | 	add	local10, #8
08064     18 29 62 FC | 	wrlong	local06, local10
08068     03 00 00 FF 
0806c     00 E4 05 F1 | 	add	objptr, ##1536
08070     F2 2C 02 FB | 	rdlong	local08, objptr
08074     01 2C 06 F1 | 	add	local08, #1
08078     F2 2C 62 FC | 	wrlong	local08, objptr
0807c     41 00 00 FF 
08080     40 E4 85 F1 | 	sub	objptr, ##33344
08084                 | ' 
08084                 | ' t2.result.uresult=numpar
08084                 | ' 
08084                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08084                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08084                 | ' 
08084                 | '   
08084                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08084     FF FF 7F FF 
08088     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0808c     B8 00 90 5D |  if_ne	jmp	#LR__0675
08090     15 22 06 F6 | 	mov	local03, #21
08094     0F 2D 02 F6 | 	mov	local08, local01
08098     10 2B 02 F6 | 	mov	local07, local02
0809c     11 29 02 F6 | 	mov	local06, local03
080a0     41 00 00 FF 
080a4     40 E4 05 F1 | 	add	objptr, ##33344
080a8     F2 26 02 FB | 	rdlong	local05, objptr
080ac     13 13 02 F6 | 	mov	arg01, local05
080b0     01 12 66 F0 | 	shl	arg01, #1
080b4     13 13 02 F1 | 	add	arg01, local05
080b8     02 12 66 F0 | 	shl	arg01, #2
080bc     03 00 00 FF 
080c0     00 E4 85 F1 | 	sub	objptr, ##1536
080c4     F2 12 02 F1 | 	add	arg01, objptr
080c8     09 2D 62 FC | 	wrlong	local08, arg01
080cc     03 00 00 FF 
080d0     00 E4 05 F1 | 	add	objptr, ##1536
080d4     F2 30 02 FB | 	rdlong	local10, objptr
080d8     18 2F 02 F6 | 	mov	local09, local10
080dc     01 2E 66 F0 | 	shl	local09, #1
080e0     18 2F 02 F1 | 	add	local09, local10
080e4     02 2E 66 F0 | 	shl	local09, #2
080e8     03 00 00 FF 
080ec     00 E4 85 F1 | 	sub	objptr, ##1536
080f0     F2 2E 02 F1 | 	add	local09, objptr
080f4     04 2E 06 F1 | 	add	local09, #4
080f8     17 2B 62 FC | 	wrlong	local07, local09
080fc     03 00 00 FF 
08100     00 E4 05 F1 | 	add	objptr, ##1536
08104     F2 2E 02 FB | 	rdlong	local09, objptr
08108     17 31 02 F6 | 	mov	local10, local09
0810c     01 30 66 F0 | 	shl	local10, #1
08110     17 31 02 F1 | 	add	local10, local09
08114     02 30 66 F0 | 	shl	local10, #2
08118     03 00 00 FF 
0811c     00 E4 85 F1 | 	sub	objptr, ##1536
08120     F2 30 02 F1 | 	add	local10, objptr
08124     08 30 06 F1 | 	add	local10, #8
08128     18 29 62 FC | 	wrlong	local06, local10
0812c     03 00 00 FF 
08130     00 E4 05 F1 | 	add	objptr, ##1536
08134     F2 2C 02 FB | 	rdlong	local08, objptr
08138     01 2C 06 F1 | 	add	local08, #1
0813c     F2 2C 62 FC | 	wrlong	local08, objptr
08140     41 00 00 FF 
08144     40 E4 85 F1 | 	sub	objptr, ##33344
08148                 | LR__0675
08148     A7 F0 03 F6 | 	mov	ptra, fp
0814c     B2 00 A0 FD | 	call	#popregs_
08150                 | _getfun_ret
08150     2D 00 64 FD | 	ret
08154                 | 
08154                 | '   
08154                 | '   
08154                 | ' sub getvar(m as integer) 
08154                 | _getvar
08154     0A 4A 05 F6 | 	mov	COUNT_, #10
08158     A8 00 A0 FD | 	call	#pushregs_
0815c                 | _getvar_enter
0815c     09 25 02 F6 | 	mov	local04, arg01
08160     2E 00 00 FF 
08164     08 E4 05 F1 | 	add	objptr, ##23560
08168     F2 14 02 FB | 	rdlong	arg02, objptr
0816c     03 14 66 F0 | 	shl	arg02, #3
08170     02 00 00 FF 
08174     38 E4 85 F1 | 	sub	objptr, ##1080
08178     F2 14 02 F1 | 	add	arg02, objptr
0817c     0A 27 02 FB | 	rdlong	local05, arg02
08180     13 13 02 F6 | 	mov	arg01, local05
08184     01 14 06 F6 | 	mov	arg02, #1
08188     2B 00 00 FF 
0818c     D0 E5 85 F1 | 	sub	objptr, ##22480
08190     44 EB B0 FD | 	call	#__system__Right_S
08194     FD 28 02 F6 | 	mov	local06, result1
08198     01 2A 66 F6 | 	neg	local07, #1
0819c                 | ' 
0819c                 | ' varname$=lparts(ct).part$
0819c                 | ' suffix$=right$(varname$,1)
0819c                 | ' j=-1
0819c                 | ' 
0819c                 | ' for i=0 to varnum-1
0819c     00 2C 06 F6 | 	mov	local08, #0
081a0     2B 00 00 FF 
081a4     CC E5 05 F1 | 	add	objptr, ##22476
081a8     F2 2E 02 FB | 	rdlong	local09, objptr
081ac     2B 00 00 FF 
081b0     CC E5 85 F1 | 	sub	objptr, ##22476
081b4                 | LR__0680
081b4     17 2D 52 F2 | 	cmps	local08, local09 wc
081b8     38 00 90 3D |  if_ae	jmp	#LR__0681
081bc                 | '   if variables(i).name=varname$ then j=i : exit
081bc     16 15 02 F6 | 	mov	arg02, local08
081c0     04 14 66 F0 | 	shl	arg02, #4
081c4     0B 00 00 FF 
081c8     CC E5 05 F1 | 	add	objptr, ##6092
081cc     F2 14 02 F1 | 	add	arg02, objptr
081d0     0A 13 02 FB | 	rdlong	arg01, arg02
081d4     13 15 02 F6 | 	mov	arg02, local05
081d8     0B 00 00 FF 
081dc     CC E5 85 F1 | 	sub	objptr, ##6092
081e0     84 CA B0 FD | 	call	#__system___string_cmp
081e4     00 FA 0D F2 | 	cmp	result1, #0 wz
081e8     16 2B 02 A6 |  if_e	mov	local07, local08
081ec     01 2C 06 51 |  if_ne	add	local08, #1
081f0     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
081f4                 | LR__0681
081f4                 | ' if  j=-1 andalso varnum<maxvars then   
081f4     FF FF 7F FF 
081f8     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
081fc     A8 00 90 5D |  if_ne	jmp	#LR__0682
08200     2B 00 00 FF 
08204     CC E5 05 F1 | 	add	objptr, ##22476
08208     F2 2E 02 FB | 	rdlong	local09, objptr
0820c     2B 00 00 FF 
08210     CC E5 85 F1 | 	sub	objptr, ##22476
08214     01 00 00 FF 
08218     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
0821c     88 00 90 3D |  if_ae	jmp	#LR__0682
08220     2B 00 00 FF 
08224     CC E5 05 F1 | 	add	objptr, ##22476
08228     F2 2E 02 FB | 	rdlong	local09, objptr
0822c     04 2E 66 F0 | 	shl	local09, #4
08230     20 00 00 FF 
08234     00 E4 85 F1 | 	sub	objptr, ##16384
08238     F2 2E 02 F1 | 	add	local09, objptr
0823c     17 27 62 FC | 	wrlong	local05, local09
08240     20 00 00 FF 
08244     00 E4 05 F1 | 	add	objptr, ##16384
08248     F2 2E 02 FB | 	rdlong	local09, objptr
0824c     04 2E 66 F0 | 	shl	local09, #4
08250     20 00 00 FF 
08254     00 E4 85 F1 | 	sub	objptr, ##16384
08258     F2 2E 02 F1 | 	add	local09, objptr
0825c     04 2E 06 F1 | 	add	local09, #4
08260     17 01 68 FC | 	wrlong	#0, local09
08264     20 00 00 FF 
08268     00 E4 05 F1 | 	add	objptr, ##16384
0826c     F2 2E 02 FB | 	rdlong	local09, objptr
08270     04 2E 66 F0 | 	shl	local09, #4
08274     20 00 00 FF 
08278     00 E4 85 F1 | 	sub	objptr, ##16384
0827c     F2 2E 02 F1 | 	add	local09, objptr
08280     0C 2E 06 F1 | 	add	local09, #12
08284     17 39 68 FC | 	wrlong	#28, local09
08288     20 00 00 FF 
0828c     00 E4 05 F1 | 	add	objptr, ##16384
08290     F2 2E 02 FB | 	rdlong	local09, objptr
08294     17 2B 02 F6 | 	mov	local07, local09
08298     01 2E 06 F1 | 	add	local09, #1
0829c     F2 2E 62 FC | 	wrlong	local09, objptr
082a0     2B 00 00 FF 
082a4     CC E5 85 F1 | 	sub	objptr, ##22476
082a8                 | LR__0682
082a8     00 2E 06 F6 | 	mov	local09, #0
082ac                 | ' numpar=0
082ac                 | ' ' check if it is an array
082ac                 | ' 
082ac                 | ' if lparts(ct+1).token=token_lpar then
082ac     2E 00 00 FF 
082b0     08 E4 05 F1 | 	add	objptr, ##23560
082b4     F2 2C 02 FB | 	rdlong	local08, objptr
082b8     01 2C 06 F1 | 	add	local08, #1
082bc     03 2C 66 F0 | 	shl	local08, #3
082c0     02 00 00 FF 
082c4     38 E4 85 F1 | 	sub	objptr, ##1080
082c8     F2 2C 02 F1 | 	add	local08, objptr
082cc     04 2C 06 F1 | 	add	local08, #4
082d0     16 2D 02 FB | 	rdlong	local08, local08
082d4     15 2C 0E F2 | 	cmp	local08, #21 wz
082d8     2B 00 00 FF 
082dc     D0 E5 85 F1 | 	sub	objptr, ##22480
082e0     08 01 90 5D |  if_ne	jmp	#LR__0687
082e4     2E 00 00 FF 
082e8     08 E4 05 F1 | 	add	objptr, ##23560
082ec     F2 30 02 FB | 	rdlong	local10, objptr
082f0     01 30 06 F1 | 	add	local10, #1
082f4     F2 30 62 FC | 	wrlong	local10, objptr
082f8     2E 00 00 FF 
082fc     08 E4 85 F1 | 	sub	objptr, ##23560
08300                 | '   ct+=1 											' omit this lpar, this is for expr list
08300                 | '   do
08300                 | LR__0683
08300     2E 00 00 FF 
08304     08 E4 05 F1 | 	add	objptr, ##23560
08308     F2 2C 02 FB | 	rdlong	local08, objptr
0830c     01 2C 06 F1 | 	add	local08, #1
08310     F2 2C 62 FC | 	wrlong	local08, objptr
08314                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08314                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08314     03 2C 66 F0 | 	shl	local08, #3
08318     02 00 00 FF 
0831c     38 E4 85 F1 | 	sub	objptr, ##1080
08320     F2 2C 02 F1 | 	add	local08, objptr
08324     04 2C 06 F1 | 	add	local08, #4
08328     16 31 02 FB | 	rdlong	local10, local08
0832c     15 30 0E F2 | 	cmp	local10, #21 wz
08330     2B 00 00 FF 
08334     D0 E5 85 F1 | 	sub	objptr, ##22480
08338     40 00 90 5D |  if_ne	jmp	#LR__0684
0833c     2E 00 00 FF 
08340     08 E4 05 F1 | 	add	objptr, ##23560
08344     F2 30 02 FB | 	rdlong	local10, objptr
08348     01 30 06 F1 | 	add	local10, #1
0834c     F2 30 62 FC | 	wrlong	local10, objptr
08350     2E 00 00 FF 
08354     08 E4 85 F1 | 	sub	objptr, ##23560
08358     88 EF BF FD | 	call	#_expr
0835c     2E 00 00 FF 
08360     08 E4 05 F1 | 	add	objptr, ##23560
08364     F2 30 02 FB | 	rdlong	local10, objptr
08368     01 30 06 F1 | 	add	local10, #1
0836c     F2 30 62 FC | 	wrlong	local10, objptr
08370     2E 00 00 FF 
08374     08 E4 85 F1 | 	sub	objptr, ##23560
08378     04 00 90 FD | 	jmp	#LR__0685
0837c                 | LR__0684
0837c     64 EF BF FD | 	call	#_expr
08380                 | LR__0685
08380     01 2E 06 F1 | 	add	local09, #1
08384     2E 00 00 FF 
08388     08 E4 05 F1 | 	add	objptr, ##23560
0838c     F2 2C 02 FB | 	rdlong	local08, objptr
08390     03 2C 66 F0 | 	shl	local08, #3
08394     02 00 00 FF 
08398     38 E4 85 F1 | 	sub	objptr, ##1080
0839c     F2 2C 02 F1 | 	add	local08, objptr
083a0     04 2C 06 F1 | 	add	local08, #4
083a4     16 31 02 FB | 	rdlong	local10, local08
083a8     14 30 0E F2 | 	cmp	local10, #20 wz
083ac     2B 00 00 FF 
083b0     D0 E5 85 F1 | 	sub	objptr, ##22480
083b4     34 00 90 AD |  if_e	jmp	#LR__0686
083b8     2E 00 00 FF 
083bc     08 E4 05 F1 | 	add	objptr, ##23560
083c0     F2 30 02 FB | 	rdlong	local10, objptr
083c4     03 30 66 F0 | 	shl	local10, #3
083c8     02 00 00 FF 
083cc     38 E4 85 F1 | 	sub	objptr, ##1080
083d0     F2 30 02 F1 | 	add	local10, objptr
083d4     04 30 06 F1 | 	add	local10, #4
083d8     18 31 02 FB | 	rdlong	local10, local10
083dc     FE 31 0E F2 | 	cmp	local10, #510 wz
083e0     2B 00 00 FF 
083e4     D0 E5 85 F1 | 	sub	objptr, ##22480
083e8     14 FF 9F 5D |  if_ne	jmp	#LR__0683
083ec                 | LR__0686
083ec                 | LR__0687
083ec     17 21 02 F6 | 	mov	local02, local09
083f0     11 22 06 F6 | 	mov	local03, #17
083f4     15 1F 02 F6 | 	mov	local01, local07
083f8     0F 31 02 F6 | 	mov	local10, local01
083fc     10 2F 02 F6 | 	mov	local09, local02
08400     11 2D 02 F6 | 	mov	local08, local03
08404     41 00 00 FF 
08408     40 E4 05 F1 | 	add	objptr, ##33344
0840c     F2 2A 02 FB | 	rdlong	local07, objptr
08410     15 29 02 F6 | 	mov	local06, local07
08414     01 28 66 F0 | 	shl	local06, #1
08418     15 29 02 F1 | 	add	local06, local07
0841c     02 28 66 F0 | 	shl	local06, #2
08420     03 00 00 FF 
08424     00 E4 85 F1 | 	sub	objptr, ##1536
08428     F2 28 02 F1 | 	add	local06, objptr
0842c     14 31 62 FC | 	wrlong	local10, local06
08430     03 00 00 FF 
08434     00 E4 05 F1 | 	add	objptr, ##1536
08438     F2 30 02 FB | 	rdlong	local10, objptr
0843c     18 27 02 F6 | 	mov	local05, local10
08440     01 26 66 F0 | 	shl	local05, #1
08444     18 27 02 F1 | 	add	local05, local10
08448     02 26 66 F0 | 	shl	local05, #2
0844c     03 00 00 FF 
08450     00 E4 85 F1 | 	sub	objptr, ##1536
08454     F2 26 02 F1 | 	add	local05, objptr
08458     04 26 06 F1 | 	add	local05, #4
0845c     13 2F 62 FC | 	wrlong	local09, local05
08460     03 00 00 FF 
08464     00 E4 05 F1 | 	add	objptr, ##1536
08468     F2 30 02 FB | 	rdlong	local10, objptr
0846c     18 FB 01 F6 | 	mov	result1, local10
08470     01 FA 65 F0 | 	shl	result1, #1
08474     18 FB 01 F1 | 	add	result1, local10
08478     02 FA 65 F0 | 	shl	result1, #2
0847c     03 00 00 FF 
08480     00 E4 85 F1 | 	sub	objptr, ##1536
08484     F2 FA 01 F1 | 	add	result1, objptr
08488     08 FA 05 F1 | 	add	result1, #8
0848c     FD 2C 62 FC | 	wrlong	local08, result1
08490     03 00 00 FF 
08494     00 E4 05 F1 | 	add	objptr, ##1536
08498     F2 30 02 FB | 	rdlong	local10, objptr
0849c     01 30 06 F1 | 	add	local10, #1
084a0     F2 30 62 FC | 	wrlong	local10, objptr
084a4     41 00 00 FF 
084a8     40 E4 85 F1 | 	sub	objptr, ##33344
084ac                 | ' 
084ac                 | ' t2.result.twowords(1)=numpar
084ac                 | ' 
084ac                 | ' 
084ac                 | ' 
084ac                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
084ac                 | ' 
084ac                 | ' 
084ac                 | '  
084ac                 | ' 
084ac                 | ' 701 
084ac                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
084ac                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
084ac     FF FF 7F FF 
084b0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
084b4     B8 00 90 5D |  if_ne	jmp	#LR__0688
084b8     15 22 06 F6 | 	mov	local03, #21
084bc     0F 31 02 F6 | 	mov	local10, local01
084c0     10 2F 02 F6 | 	mov	local09, local02
084c4     11 2D 02 F6 | 	mov	local08, local03
084c8     41 00 00 FF 
084cc     40 E4 05 F1 | 	add	objptr, ##33344
084d0     F2 2A 02 FB | 	rdlong	local07, objptr
084d4     15 29 02 F6 | 	mov	local06, local07
084d8     01 28 66 F0 | 	shl	local06, #1
084dc     15 29 02 F1 | 	add	local06, local07
084e0     02 28 66 F0 | 	shl	local06, #2
084e4     03 00 00 FF 
084e8     00 E4 85 F1 | 	sub	objptr, ##1536
084ec     F2 28 02 F1 | 	add	local06, objptr
084f0     14 31 62 FC | 	wrlong	local10, local06
084f4     03 00 00 FF 
084f8     00 E4 05 F1 | 	add	objptr, ##1536
084fc     F2 1E 02 FB | 	rdlong	local01, objptr
08500     0F 27 02 F6 | 	mov	local05, local01
08504     01 26 66 F0 | 	shl	local05, #1
08508     0F 27 02 F1 | 	add	local05, local01
0850c     02 26 66 F0 | 	shl	local05, #2
08510     03 00 00 FF 
08514     00 E4 85 F1 | 	sub	objptr, ##1536
08518     F2 26 02 F1 | 	add	local05, objptr
0851c     04 26 06 F1 | 	add	local05, #4
08520     13 2F 62 FC | 	wrlong	local09, local05
08524     03 00 00 FF 
08528     00 E4 05 F1 | 	add	objptr, ##1536
0852c     F2 1E 02 FB | 	rdlong	local01, objptr
08530     0F FB 01 F6 | 	mov	result1, local01
08534     01 FA 65 F0 | 	shl	result1, #1
08538     0F FB 01 F1 | 	add	result1, local01
0853c     02 FA 65 F0 | 	shl	result1, #2
08540     03 00 00 FF 
08544     00 E4 85 F1 | 	sub	objptr, ##1536
08548     F2 FA 01 F1 | 	add	result1, objptr
0854c     08 FA 05 F1 | 	add	result1, #8
08550     FD 2C 62 FC | 	wrlong	local08, result1
08554     03 00 00 FF 
08558     00 E4 05 F1 | 	add	objptr, ##1536
0855c     F2 30 02 FB | 	rdlong	local10, objptr
08560     01 30 06 F1 | 	add	local10, #1
08564     F2 30 62 FC | 	wrlong	local10, objptr
08568     41 00 00 FF 
0856c     40 E4 85 F1 | 	sub	objptr, ##33344
08570                 | LR__0688
08570     A7 F0 03 F6 | 	mov	ptra, fp
08574     B2 00 A0 FD | 	call	#popregs_
08578                 | _getvar_ret
08578     2D 00 64 FD | 	ret
0857c                 | 
0857c                 | ' 
0857c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0857c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0857c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0857c                 | ' 
0857c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0857c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0857c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0857c                 | ' 
0857c                 | ' function execute_line (astart=0 as integer) as integer
0857c                 | _execute_line
0857c     04 4A 05 F6 | 	mov	COUNT_, #4
08580     A8 00 A0 FD | 	call	#pushregs_
08584     50 00 00 FF 
08588     78 E5 05 F1 | 	add	objptr, ##41336
0858c     F2 00 68 FC | 	wrlong	#0, objptr
08590                 | ' runptr2=0
08590                 | ' for lineptr_e=astart to lineptr-1
08590     0F 00 00 FF 
08594     34 E5 85 F1 | 	sub	objptr, ##7988
08598     F2 12 62 FC | 	wrlong	arg01, objptr
0859c     04 E4 85 F1 | 	sub	objptr, #4
085a0     F2 1E 02 FB | 	rdlong	local01, objptr
085a4     41 00 00 FF 
085a8     40 E4 85 F1 | 	sub	objptr, ##33344
085ac                 | LR__0690
085ac     41 00 00 FF 
085b0     44 E4 05 F1 | 	add	objptr, ##33348
085b4     F2 FA 01 FB | 	rdlong	result1, objptr
085b8     41 00 00 FF 
085bc     44 E4 85 F1 | 	sub	objptr, ##33348
085c0     0F FB 51 F2 | 	cmps	result1, local01 wc
085c4     98 00 90 3D |  if_ae	jmp	#LR__0691
085c8     41 00 00 FF 
085cc     44 E4 05 F1 | 	add	objptr, ##33348
085d0     F2 FA 01 FB | 	rdlong	result1, objptr
085d4     FD 20 02 F6 | 	mov	local02, result1
085d8     01 20 66 F0 | 	shl	local02, #1
085dc     FD 20 02 F1 | 	add	local02, result1
085e0     02 20 66 F0 | 	shl	local02, #2
085e4     03 00 00 FF 
085e8     04 E4 85 F1 | 	sub	objptr, ##1540
085ec     F2 20 02 F1 | 	add	local02, objptr
085f0     08 20 06 F1 | 	add	local02, #8
085f4     10 21 02 FB | 	rdlong	local02, local02
085f8     10 21 E2 F8 | 	getbyte	local02, local02, #0
085fc     02 20 66 F0 | 	shl	local02, #2
08600     04 00 00 FF 
08604     1C E4 85 F1 | 	sub	objptr, ##2076
08608     F2 20 02 F1 | 	add	local02, objptr
0860c     10 21 02 FB | 	rdlong	local02, local02
08610     10 23 02 F6 | 	mov	local03, local02
08614     13 20 46 F7 | 	zerox	local02, #19
08618     14 22 46 F0 | 	shr	local03, #20
0861c     02 22 66 F0 | 	shl	local03, #2
08620     ED 22 02 F1 | 	add	local03, __methods__
08624     11 23 02 FB | 	rdlong	local03, local03
08628     3A 00 00 FF 
0862c     24 E4 85 F1 | 	sub	objptr, ##29732
08630     F2 24 02 F6 | 	mov	local04, objptr
08634     10 E5 01 F6 | 	mov	objptr, local02
08638     2D 22 62 FD | 	call	local03
0863c     12 E5 01 F6 | 	mov	objptr, local04
08640     41 00 00 FF 
08644     44 E4 05 F1 | 	add	objptr, ##33348
08648     F2 24 02 FB | 	rdlong	local04, objptr
0864c     01 24 06 F1 | 	add	local04, #1
08650     F2 24 62 FC | 	wrlong	local04, objptr
08654     41 00 00 FF 
08658     44 E4 85 F1 | 	sub	objptr, ##33348
0865c     4C FF 9F FD | 	jmp	#LR__0690
08660                 | LR__0691
08660                 | ' return runptr2
08660     50 00 00 FF 
08664     78 E5 05 F1 | 	add	objptr, ##41336
08668     F2 FA 01 FB | 	rdlong	result1, objptr
0866c     50 00 00 FF 
08670     78 E5 85 F1 | 	sub	objptr, ##41336
08674     A7 F0 03 F6 | 	mov	ptra, fp
08678     B2 00 A0 FD | 	call	#popregs_
0867c                 | _execute_line_ret
0867c     2D 00 64 FD | 	ret
08680                 | 
08680                 | ' 
08680                 | ' 
08680                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08680                 | ' 
08680                 | ' function pop() as expr_result
08680                 | _pop
08680                 | ' 
08680                 | ' if stackpointer=0 then
08680     3A 00 00 FF 
08684     1C E4 05 F1 | 	add	objptr, ##29724
08688     F2 FA 09 FB | 	rdlong	result1, objptr wz
0868c     3A 00 00 FF 
08690     1C E4 85 F1 | 	sub	objptr, ##29724
08694     FF 04 06 A6 |  if_e	mov	_var03, #255
08698     18 00 06 A6 |  if_e	mov	_var01, #24
0869c     68 00 90 AD |  if_e	jmp	#LR__0700
086a0     3A 00 00 FF 
086a4     1C E4 05 F1 | 	add	objptr, ##29724
086a8     F2 FA 01 FB | 	rdlong	result1, objptr
086ac     01 FA 85 F1 | 	sub	result1, #1
086b0     F2 FA 61 FC | 	wrlong	result1, objptr
086b4     FD FE 01 F6 | 	mov	result3, result1
086b8     01 FE 65 F0 | 	shl	result3, #1
086bc     FD FE 01 F1 | 	add	result3, result1
086c0     02 FE 65 F0 | 	shl	result3, #2
086c4     0C 00 00 FF 
086c8     0C E4 85 F1 | 	sub	objptr, ##6156
086cc     F2 FE 01 F1 | 	add	result3, objptr
086d0     FF 00 02 FB | 	rdlong	_var01, result3
086d4     04 FE 05 F1 | 	add	result3, #4
086d8     FF FE 01 FB | 	rdlong	result3, result3
086dc     FD FC 01 F6 | 	mov	result2, result1
086e0     01 FC 65 F0 | 	shl	result2, #1
086e4     FD FC 01 F1 | 	add	result2, result1
086e8     02 FC 65 F0 | 	shl	result2, #2
086ec     F2 FC 01 F1 | 	add	result2, objptr
086f0     08 FC 05 F1 | 	add	result2, #8
086f4     FE FA 01 FB | 	rdlong	result1, result2
086f8     FF 02 02 F6 | 	mov	_var02, result3
086fc     FD 04 02 F6 | 	mov	_var03, result1
08700     2E 00 00 FF 
08704     10 E4 85 F1 | 	sub	objptr, ##23568
08708                 | LR__0700
08708                 | ' return t1
08708     01 FD 01 F6 | 	mov	result2, _var02
0870c     02 FF 01 F6 | 	mov	result3, _var03
08710     00 FB 01 F6 | 	mov	result1, _var01
08714                 | _pop_ret
08714     2D 00 64 FD | 	ret
08718                 | 
08718                 | ' 
08718                 | ' sub push(t1 as expr_result )
08718                 | _push
08718                 | ' 
08718                 | ' 'print "In push: "; t1.result_type
08718                 | ' 'print "In push: "; t1.result.uresult
08718                 | ' 
08718                 | ' if stackpointer<maxstack then 
08718     3A 00 00 FF 
0871c     1C E4 05 F1 | 	add	objptr, ##29724
08720     F2 00 02 FB | 	rdlong	_var01, objptr
08724     3A 00 00 FF 
08728     1C E4 85 F1 | 	sub	objptr, ##29724
0872c     01 00 00 FF 
08730     00 00 56 F2 | 	cmps	_var01, ##512 wc
08734     BC 00 90 3D |  if_ae	jmp	#LR__0710
08738     09 01 02 FB | 	rdlong	_var01, arg01
0873c     04 12 06 F1 | 	add	arg01, #4
08740     09 03 02 FB | 	rdlong	_var02, arg01
08744     04 12 06 F1 | 	add	arg01, #4
08748     09 13 02 FB | 	rdlong	arg01, arg01
0874c     3A 00 00 FF 
08750     1C E4 05 F1 | 	add	objptr, ##29724
08754     F2 04 02 FB | 	rdlong	_var03, objptr
08758     02 07 02 F6 | 	mov	_var04, _var03
0875c     01 06 66 F0 | 	shl	_var04, #1
08760     02 07 02 F1 | 	add	_var04, _var03
08764     02 06 66 F0 | 	shl	_var04, #2
08768     0C 00 00 FF 
0876c     0C E4 85 F1 | 	sub	objptr, ##6156
08770     F2 06 02 F1 | 	add	_var04, objptr
08774     03 01 62 FC | 	wrlong	_var01, _var04
08778     0C 00 00 FF 
0877c     0C E4 05 F1 | 	add	objptr, ##6156
08780     F2 06 02 FB | 	rdlong	_var04, objptr
08784     03 05 02 F6 | 	mov	_var03, _var04
08788     01 04 66 F0 | 	shl	_var03, #1
0878c     03 05 02 F1 | 	add	_var03, _var04
08790     02 04 66 F0 | 	shl	_var03, #2
08794     0C 00 00 FF 
08798     0C E4 85 F1 | 	sub	objptr, ##6156
0879c     F2 04 02 F1 | 	add	_var03, objptr
087a0     04 04 06 F1 | 	add	_var03, #4
087a4     02 03 62 FC | 	wrlong	_var02, _var03
087a8     0C 00 00 FF 
087ac     0C E4 05 F1 | 	add	objptr, ##6156
087b0     F2 06 02 FB | 	rdlong	_var04, objptr
087b4     03 05 02 F6 | 	mov	_var03, _var04
087b8     01 04 66 F0 | 	shl	_var03, #1
087bc     03 05 02 F1 | 	add	_var03, _var04
087c0     02 04 66 F0 | 	shl	_var03, #2
087c4     0C 00 00 FF 
087c8     0C E4 85 F1 | 	sub	objptr, ##6156
087cc     F2 04 02 F1 | 	add	_var03, objptr
087d0     08 04 06 F1 | 	add	_var03, #8
087d4     02 13 62 FC | 	wrlong	arg01, _var03
087d8     0C 00 00 FF 
087dc     0C E4 05 F1 | 	add	objptr, ##6156
087e0     F2 00 02 FB | 	rdlong	_var01, objptr
087e4     01 00 06 F1 | 	add	_var01, #1
087e8     F2 00 62 FC | 	wrlong	_var01, objptr
087ec     3A 00 00 FF 
087f0     1C E4 85 F1 | 	sub	objptr, ##29724
087f4                 | LR__0710
087f4                 | _push_ret
087f4     2D 00 64 FD | 	ret
087f8                 | 
087f8                 | ' 
087f8                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
087f8                 | ' 
087f8                 | ' sub do_push
087f8                 | _do_push
087f8                 | ' if stackpointer<maxstack then 
087f8     3A 00 00 FF 
087fc     1C E4 05 F1 | 	add	objptr, ##29724
08800     F2 00 02 FB | 	rdlong	_var01, objptr
08804     3A 00 00 FF 
08808     1C E4 85 F1 | 	sub	objptr, ##29724
0880c     01 00 00 FF 
08810     00 00 56 F2 | 	cmps	_var01, ##512 wc
08814     F8 00 90 3D |  if_ae	jmp	#LR__0720
08818     41 00 00 FF 
0881c     44 E4 05 F1 | 	add	objptr, ##33348
08820     F2 02 02 FB | 	rdlong	_var02, objptr
08824     01 05 02 F6 | 	mov	_var03, _var02
08828     01 04 66 F0 | 	shl	_var03, #1
0882c     01 05 02 F1 | 	add	_var03, _var02
08830     02 04 66 F0 | 	shl	_var03, #2
08834     03 00 00 FF 
08838     04 E4 85 F1 | 	sub	objptr, ##1540
0883c     F2 04 02 F1 | 	add	_var03, objptr
08840     02 01 02 FB | 	rdlong	_var01, _var03
08844     04 04 06 F1 | 	add	_var03, #4
08848     02 07 02 FB | 	rdlong	_var04, _var03
0884c     01 05 02 F6 | 	mov	_var03, _var02
08850     01 04 66 F0 | 	shl	_var03, #1
08854     01 05 02 F1 | 	add	_var03, _var02
08858     02 04 66 F0 | 	shl	_var03, #2
0885c     F2 04 02 F1 | 	add	_var03, objptr
08860     08 04 06 F1 | 	add	_var03, #8
08864     02 03 02 FB | 	rdlong	_var02, _var03
08868     04 00 00 FF 
0886c     24 E4 85 F1 | 	sub	objptr, ##2084
08870     F2 04 02 FB | 	rdlong	_var03, objptr
08874     02 09 02 F6 | 	mov	_var05, _var03
08878     01 08 66 F0 | 	shl	_var05, #1
0887c     02 09 02 F1 | 	add	_var05, _var03
08880     02 08 66 F0 | 	shl	_var05, #2
08884     0C 00 00 FF 
08888     0C E4 85 F1 | 	sub	objptr, ##6156
0888c     F2 08 02 F1 | 	add	_var05, objptr
08890     04 01 62 FC | 	wrlong	_var01, _var05
08894     0C 00 00 FF 
08898     0C E4 05 F1 | 	add	objptr, ##6156
0889c     F2 08 02 FB | 	rdlong	_var05, objptr
088a0     04 05 02 F6 | 	mov	_var03, _var05
088a4     01 04 66 F0 | 	shl	_var03, #1
088a8     04 05 02 F1 | 	add	_var03, _var05
088ac     02 04 66 F0 | 	shl	_var03, #2
088b0     0C 00 00 FF 
088b4     0C E4 85 F1 | 	sub	objptr, ##6156
088b8     F2 04 02 F1 | 	add	_var03, objptr
088bc     04 04 06 F1 | 	add	_var03, #4
088c0     02 07 62 FC | 	wrlong	_var04, _var03
088c4     0C 00 00 FF 
088c8     0C E4 05 F1 | 	add	objptr, ##6156
088cc     F2 08 02 FB | 	rdlong	_var05, objptr
088d0     04 07 02 F6 | 	mov	_var04, _var05
088d4     01 06 66 F0 | 	shl	_var04, #1
088d8     04 07 02 F1 | 	add	_var04, _var05
088dc     02 06 66 F0 | 	shl	_var04, #2
088e0     0C 00 00 FF 
088e4     0C E4 85 F1 | 	sub	objptr, ##6156
088e8     F2 06 02 F1 | 	add	_var04, objptr
088ec     08 06 06 F1 | 	add	_var04, #8
088f0     03 03 62 FC | 	wrlong	_var02, _var04
088f4     0C 00 00 FF 
088f8     0C E4 05 F1 | 	add	objptr, ##6156
088fc     F2 00 02 FB | 	rdlong	_var01, objptr
08900     01 00 06 F1 | 	add	_var01, #1
08904     F2 00 62 FC | 	wrlong	_var01, objptr
08908     3A 00 00 FF 
0890c     1C E4 85 F1 | 	sub	objptr, ##29724
08910                 | LR__0720
08910                 | _do_push_ret
08910     2D 00 64 FD | 	ret
08914                 | 
08914                 | ' 
08914                 | '   
08914                 | ' sub csave_block(address as ulong)
08914                 | _csave_block
08914     09 01 02 F6 | 	mov	_var01, arg01
08918                 | ' 
08918                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08918                 | ' ' we enter it at the state of playing 1 kHz header tone
08918                 | ' 
08918                 | ' for i=0 to 63 step 2
08918     00 02 06 F6 | 	mov	_var02, #0
0891c                 | LR__0730
0891c                 | '   do: loop until lpeek(base+32*7)>32768
0891c     2D 00 00 FF 
08920     D4 E5 05 F1 | 	add	objptr, ##23508
08924     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
08928                 | LR__0731
08928     F2 12 02 FB | 	rdlong	arg01, objptr
0892c     E0 12 06 F1 | 	add	arg01, #224
08930     09 FB 01 FB | 	rdlong	result1, arg01
08934     40 00 00 FF 
08938     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0893c     E8 FF 9F CD |  if_b	jmp	#LR__0731
08940                 | LR__0732
08940     00 13 02 F6 | 	mov	arg01, _var01
08944     01 05 02 F6 | 	mov	_var03, _var02
08948     02 04 66 F0 | 	shl	_var03, #2
0894c     02 13 02 F1 | 	add	arg01, _var03
08950     09 07 02 FB | 	rdlong	_var04, arg01
08954     24 00 00 FF 
08958     AC E4 05 F1 | 	add	objptr, ##18604
0895c     F2 06 62 FC | 	wrlong	_var04, objptr
08960     52 00 00 FF 
08964     80 E4 85 F1 | 	sub	objptr, ##42112
08968                 | '   q=lpeek(address+4*i)
08968                 | '      for bit=0 to 31
08968     00 08 06 F6 | 	mov	_var05, #0
0896c     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
08970                 | LR__0733
08970                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08970     52 00 00 FF 
08974     80 E4 05 F1 | 	add	objptr, ##42112
08978     F2 06 02 FB | 	rdlong	_var04, objptr
0897c     52 00 00 FF 
08980     80 E4 85 F1 | 	sub	objptr, ##42112
08984     04 05 C2 F9 | 	decod	_var03, _var05
08988     02 07 CA F7 | 	test	_var04, _var03 wz
0898c     60 00 90 AD |  if_e	jmp	#LR__0734
08990     04 05 02 F6 | 	mov	_var03, _var05
08994     02 04 66 F0 | 	shl	_var03, #2
08998     4E 00 00 FF 
0899c     70 E4 05 F1 | 	add	objptr, ##40048
089a0     F2 04 02 F1 | 	add	_var03, objptr
089a4     02 FF 48 FC | 	wrbyte	#127, _var03
089a8     04 05 02 F6 | 	mov	_var03, _var05
089ac     02 04 66 F0 | 	shl	_var03, #2
089b0     01 04 06 F1 | 	add	_var03, #1
089b4     F2 04 02 F1 | 	add	_var03, objptr
089b8     02 01 49 FC | 	wrbyte	#128, _var03
089bc     04 05 02 F6 | 	mov	_var03, _var05
089c0     02 04 66 F0 | 	shl	_var03, #2
089c4     02 04 06 F1 | 	add	_var03, #2
089c8     F2 04 02 F1 | 	add	_var03, objptr
089cc     02 FF 48 FC | 	wrbyte	#127, _var03
089d0     04 05 02 F6 | 	mov	_var03, _var05
089d4     02 04 66 F0 | 	shl	_var03, #2
089d8     03 04 06 F1 | 	add	_var03, #3
089dc     F2 04 02 F1 | 	add	_var03, objptr
089e0     02 01 49 FC | 	wrbyte	#128, _var03
089e4     4E 00 00 FF 
089e8     70 E4 85 F1 | 	sub	objptr, ##40048
089ec     5C 00 90 FD | 	jmp	#LR__0735
089f0                 | LR__0734
089f0     04 05 02 F6 | 	mov	_var03, _var05
089f4     02 04 66 F0 | 	shl	_var03, #2
089f8     4E 00 00 FF 
089fc     70 E4 05 F1 | 	add	objptr, ##40048
08a00     F2 04 02 F1 | 	add	_var03, objptr
08a04     02 01 49 FC | 	wrbyte	#128, _var03
08a08     04 05 02 F6 | 	mov	_var03, _var05
08a0c     02 04 66 F0 | 	shl	_var03, #2
08a10     01 04 06 F1 | 	add	_var03, #1
08a14     F2 04 02 F1 | 	add	_var03, objptr
08a18     02 01 49 FC | 	wrbyte	#128, _var03
08a1c     04 05 02 F6 | 	mov	_var03, _var05
08a20     02 04 66 F0 | 	shl	_var03, #2
08a24     02 04 06 F1 | 	add	_var03, #2
08a28     F2 04 02 F1 | 	add	_var03, objptr
08a2c     02 FF 48 FC | 	wrbyte	#127, _var03
08a30     04 05 02 F6 | 	mov	_var03, _var05
08a34     02 04 66 F0 | 	shl	_var03, #2
08a38     03 04 06 F1 | 	add	_var03, #3
08a3c     F2 04 02 F1 | 	add	_var03, objptr
08a40     02 FF 48 FC | 	wrbyte	#127, _var03
08a44     4E 00 00 FF 
08a48     70 E4 85 F1 | 	sub	objptr, ##40048
08a4c                 | LR__0735
08a4c     01 08 06 F1 | 	add	_var05, #1
08a50     20 08 56 F2 | 	cmps	_var05, #32 wc
08a54     18 FF 9F CD |  if_b	jmp	#LR__0733
08a58                 | '   do: loop until lpeek(base+32*7)<32768
08a58     2D 00 00 FF 
08a5c     D4 E5 05 F1 | 	add	objptr, ##23508
08a60                 | LR__0736
08a60     F2 12 02 FB | 	rdlong	arg01, objptr
08a64     E0 12 06 F1 | 	add	arg01, #224
08a68     09 FB 01 FB | 	rdlong	result1, arg01
08a6c     40 00 00 FF 
08a70     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08a74     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
08a78                 | LR__0737
08a78     00 13 02 F6 | 	mov	arg01, _var01
08a7c     04 12 06 F1 | 	add	arg01, #4
08a80     01 05 02 F6 | 	mov	_var03, _var02
08a84     02 04 66 F0 | 	shl	_var03, #2
08a88     02 13 02 F1 | 	add	arg01, _var03
08a8c     09 07 02 FB | 	rdlong	_var04, arg01
08a90     24 00 00 FF 
08a94     AC E4 05 F1 | 	add	objptr, ##18604
08a98     F2 06 62 FC | 	wrlong	_var04, objptr
08a9c     52 00 00 FF 
08aa0     80 E4 85 F1 | 	sub	objptr, ##42112
08aa4                 | '   q=lpeek(address+4+4*i)
08aa4                 | '      for bit=0 to 31
08aa4     00 08 06 F6 | 	mov	_var05, #0
08aa8     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
08aac                 | LR__0738
08aac                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08aac     52 00 00 FF 
08ab0     80 E4 05 F1 | 	add	objptr, ##42112
08ab4     F2 06 02 FB | 	rdlong	_var04, objptr
08ab8     52 00 00 FF 
08abc     80 E4 85 F1 | 	sub	objptr, ##42112
08ac0     04 05 C2 F9 | 	decod	_var03, _var05
08ac4     02 07 CA F7 | 	test	_var04, _var03 wz
08ac8     80 00 90 AD |  if_e	jmp	#LR__0739
08acc     04 0B 02 F6 | 	mov	_var06, _var05
08ad0     02 0A 66 F0 | 	shl	_var06, #2
08ad4     80 04 06 F6 | 	mov	_var03, #128
08ad8     05 05 02 F1 | 	add	_var03, _var06
08adc     4E 00 00 FF 
08ae0     70 E4 05 F1 | 	add	objptr, ##40048
08ae4     F2 04 02 F1 | 	add	_var03, objptr
08ae8     02 FF 48 FC | 	wrbyte	#127, _var03
08aec     04 0B 02 F6 | 	mov	_var06, _var05
08af0     02 0A 66 F0 | 	shl	_var06, #2
08af4     80 04 06 F6 | 	mov	_var03, #128
08af8     05 05 02 F1 | 	add	_var03, _var06
08afc     01 04 06 F1 | 	add	_var03, #1
08b00     F2 04 02 F1 | 	add	_var03, objptr
08b04     02 01 49 FC | 	wrbyte	#128, _var03
08b08     04 0B 02 F6 | 	mov	_var06, _var05
08b0c     02 0A 66 F0 | 	shl	_var06, #2
08b10     80 04 06 F6 | 	mov	_var03, #128
08b14     05 05 02 F1 | 	add	_var03, _var06
08b18     02 04 06 F1 | 	add	_var03, #2
08b1c     F2 04 02 F1 | 	add	_var03, objptr
08b20     02 FF 48 FC | 	wrbyte	#127, _var03
08b24     04 0B 02 F6 | 	mov	_var06, _var05
08b28     02 0A 66 F0 | 	shl	_var06, #2
08b2c     80 04 06 F6 | 	mov	_var03, #128
08b30     05 05 02 F1 | 	add	_var03, _var06
08b34     03 04 06 F1 | 	add	_var03, #3
08b38     F2 04 02 F1 | 	add	_var03, objptr
08b3c     02 01 49 FC | 	wrbyte	#128, _var03
08b40     4E 00 00 FF 
08b44     70 E4 85 F1 | 	sub	objptr, ##40048
08b48     7C 00 90 FD | 	jmp	#LR__0740
08b4c                 | LR__0739
08b4c     04 0B 02 F6 | 	mov	_var06, _var05
08b50     02 0A 66 F0 | 	shl	_var06, #2
08b54     80 04 06 F6 | 	mov	_var03, #128
08b58     05 05 02 F1 | 	add	_var03, _var06
08b5c     4E 00 00 FF 
08b60     70 E4 05 F1 | 	add	objptr, ##40048
08b64     F2 04 02 F1 | 	add	_var03, objptr
08b68     02 01 49 FC | 	wrbyte	#128, _var03
08b6c     04 0B 02 F6 | 	mov	_var06, _var05
08b70     02 0A 66 F0 | 	shl	_var06, #2
08b74     80 04 06 F6 | 	mov	_var03, #128
08b78     05 05 02 F1 | 	add	_var03, _var06
08b7c     01 04 06 F1 | 	add	_var03, #1
08b80     F2 04 02 F1 | 	add	_var03, objptr
08b84     02 01 49 FC | 	wrbyte	#128, _var03
08b88     04 0B 02 F6 | 	mov	_var06, _var05
08b8c     02 0A 66 F0 | 	shl	_var06, #2
08b90     80 04 06 F6 | 	mov	_var03, #128
08b94     05 05 02 F1 | 	add	_var03, _var06
08b98     02 04 06 F1 | 	add	_var03, #2
08b9c     F2 04 02 F1 | 	add	_var03, objptr
08ba0     02 FF 48 FC | 	wrbyte	#127, _var03
08ba4     04 0B 02 F6 | 	mov	_var06, _var05
08ba8     02 0A 66 F0 | 	shl	_var06, #2
08bac     80 04 06 F6 | 	mov	_var03, #128
08bb0     05 05 02 F1 | 	add	_var03, _var06
08bb4     03 04 06 F1 | 	add	_var03, #3
08bb8     F2 04 02 F1 | 	add	_var03, objptr
08bbc     02 FF 48 FC | 	wrbyte	#127, _var03
08bc0     4E 00 00 FF 
08bc4     70 E4 85 F1 | 	sub	objptr, ##40048
08bc8                 | LR__0740
08bc8     01 08 06 F1 | 	add	_var05, #1
08bcc     20 08 56 F2 | 	cmps	_var05, #32 wc
08bd0     D8 FE 9F CD |  if_b	jmp	#LR__0738
08bd4                 | LR__0741
08bd4     02 02 06 F1 | 	add	_var02, #2
08bd8     40 02 56 F2 | 	cmps	_var02, #64 wc
08bdc     3C FD 9F CD |  if_b	jmp	#LR__0730
08be0                 | ' do: loop until lpeek(base+32*7)>32768
08be0     2D 00 00 FF 
08be4     D4 E5 05 F1 | 	add	objptr, ##23508
08be8     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
08bec                 | LR__0742
08bec     F2 12 02 FB | 	rdlong	arg01, objptr
08bf0     E0 12 06 F1 | 	add	arg01, #224
08bf4     09 FB 01 FB | 	rdlong	result1, arg01
08bf8     40 00 00 FF 
08bfc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08c00     E8 FF 9F CD |  if_b	jmp	#LR__0742
08c04     2D 00 00 FF 
08c08     D4 E5 85 F1 | 	sub	objptr, ##23508
08c0c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08c0c     00 02 06 F6 | 	mov	_var02, #0
08c10                 | LR__0743
08c10     01 07 52 F6 | 	abs	_var04, _var02 wc
08c14     07 06 06 F5 | 	and	_var04, #7
08c18     03 07 82 F6 | 	negc	_var04, _var04
08c1c     04 06 56 F2 | 	cmps	_var04, #4 wc
08c20     20 00 90 3D |  if_ae	jmp	#LR__0744
08c24     01 0B 02 F6 | 	mov	_var06, _var02
08c28     4E 00 00 FF 
08c2c     70 E4 05 F1 | 	add	objptr, ##40048
08c30     F2 0A 02 F1 | 	add	_var06, objptr
08c34     05 FF 48 FC | 	wrbyte	#127, _var06
08c38     4E 00 00 FF 
08c3c     70 E4 85 F1 | 	sub	objptr, ##40048
08c40     1C 00 90 FD | 	jmp	#LR__0745
08c44                 | LR__0744
08c44     01 0B 02 F6 | 	mov	_var06, _var02
08c48     4E 00 00 FF 
08c4c     70 E4 05 F1 | 	add	objptr, ##40048
08c50     F2 0A 02 F1 | 	add	_var06, objptr
08c54     05 01 49 FC | 	wrbyte	#128, _var06
08c58     4E 00 00 FF 
08c5c     70 E4 85 F1 | 	sub	objptr, ##40048
08c60                 | LR__0745
08c60     01 02 06 F1 | 	add	_var02, #1
08c64     80 02 56 F2 | 	cmps	_var02, #128 wc
08c68     A4 FF 9F CD |  if_b	jmp	#LR__0743
08c6c                 | ' 
08c6c                 | ' do: loop until lpeek(base+32*7)<32768
08c6c     2D 00 00 FF 
08c70     D4 E5 05 F1 | 	add	objptr, ##23508
08c74                 | LR__0746
08c74     F2 12 02 FB | 	rdlong	arg01, objptr
08c78     E0 12 06 F1 | 	add	arg01, #224
08c7c     09 FB 01 FB | 	rdlong	result1, arg01
08c80     40 00 00 FF 
08c84     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08c88     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08c8c     2D 00 00 FF 
08c90     D4 E5 85 F1 | 	sub	objptr, ##23508
08c94                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08c94     80 02 06 F6 | 	mov	_var02, #128
08c98                 | LR__0747
08c98     01 07 52 F6 | 	abs	_var04, _var02 wc
08c9c     07 06 06 F5 | 	and	_var04, #7
08ca0     03 07 82 F6 | 	negc	_var04, _var04
08ca4     04 06 56 F2 | 	cmps	_var04, #4 wc
08ca8     20 00 90 3D |  if_ae	jmp	#LR__0748
08cac     01 0B 02 F6 | 	mov	_var06, _var02
08cb0     4E 00 00 FF 
08cb4     70 E4 05 F1 | 	add	objptr, ##40048
08cb8     F2 0A 02 F1 | 	add	_var06, objptr
08cbc     05 FF 48 FC | 	wrbyte	#127, _var06
08cc0     4E 00 00 FF 
08cc4     70 E4 85 F1 | 	sub	objptr, ##40048
08cc8     1C 00 90 FD | 	jmp	#LR__0749
08ccc                 | LR__0748
08ccc     01 0B 02 F6 | 	mov	_var06, _var02
08cd0     4E 00 00 FF 
08cd4     70 E4 05 F1 | 	add	objptr, ##40048
08cd8     F2 0A 02 F1 | 	add	_var06, objptr
08cdc     05 01 49 FC | 	wrbyte	#128, _var06
08ce0     4E 00 00 FF 
08ce4     70 E4 85 F1 | 	sub	objptr, ##40048
08ce8                 | LR__0749
08ce8     01 02 06 F1 | 	add	_var02, #1
08cec     00 03 16 F2 | 	cmp	_var02, #256 wc
08cf0     A4 FF 9F CD |  if_b	jmp	#LR__0747
08cf4                 | LR__0750
08cf4                 | _csave_block_ret
08cf4     2D 00 64 FD | 	ret
08cf8                 | 
08cf8                 | ' 
08cf8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08cf8                 | _csave_addtoblock
08cf8     04 4A 05 F6 | 	mov	COUNT_, #4
08cfc     A8 00 A0 FD | 	call	#pushregs_
08d00     09 1F 02 F6 | 	mov	local01, arg01
08d04                 | ' 
08d04                 | ' 
08d04                 | ' if force=0 then
08d04     07 14 4E F7 | 	zerox	arg02, #7 wz
08d08     78 00 90 5D |  if_ne	jmp	#LR__0760
08d0c     50 00 00 FF 
08d10     70 E5 05 F1 | 	add	objptr, ##41328
08d14     F2 14 02 FB | 	rdlong	arg02, objptr
08d18     02 00 00 FF 
08d1c     00 E4 85 F1 | 	sub	objptr, ##1024
08d20     F2 14 02 F1 | 	add	arg02, objptr
08d24     0A 1F 42 FC | 	wrbyte	local01, arg02
08d28     02 00 00 FF 
08d2c     00 E4 05 F1 | 	add	objptr, ##1024
08d30     F2 1E 02 FB | 	rdlong	local01, objptr
08d34     01 1E 06 F1 | 	add	local01, #1
08d38     F2 1E 62 FC | 	wrlong	local01, objptr
08d3c                 | '   block(blockptr)=d
08d3c                 | '   blockptr+=1
08d3c                 | '   if blockptr>=255 then
08d3c     50 00 00 FF 
08d40     70 E5 85 F1 | 	sub	objptr, ##41328
08d44     FF 1E 16 F2 | 	cmp	local01, #255 wc
08d48     E4 00 90 CD |  if_b	jmp	#LR__0764
08d4c     4E 00 00 FF 
08d50     70 E5 05 F1 | 	add	objptr, ##40304
08d54     F2 12 02 F6 | 	mov	arg01, objptr
08d58     4E 00 00 FF 
08d5c     70 E5 85 F1 | 	sub	objptr, ##40304
08d60     B0 FB BF FD | 	call	#_csave_block
08d64     50 00 00 FF 
08d68     70 E5 05 F1 | 	add	objptr, ##41328
08d6c     F2 00 68 FC | 	wrlong	#0, objptr
08d70     50 00 00 FF 
08d74     70 E5 85 F1 | 	sub	objptr, ##41328
08d78     2C 13 06 F6 | 	mov	arg01, #300
08d7c     B4 C1 B0 FD | 	call	#__system___waitms
08d80     AC 00 90 FD | 	jmp	#LR__0764
08d84                 | LR__0760
08d84     50 00 00 FF 
08d88     70 E5 05 F1 | 	add	objptr, ##41328
08d8c     F2 20 02 FB | 	rdlong	local02, objptr
08d90     02 00 00 FF 
08d94     00 E4 85 F1 | 	sub	objptr, ##1024
08d98     F2 20 02 F1 | 	add	local02, objptr
08d9c     10 1F 42 FC | 	wrbyte	local01, local02
08da0                 | '   block(blockptr)=d
08da0                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
08da0     02 00 00 FF 
08da4     00 E4 05 F1 | 	add	objptr, ##1024
08da8     F2 22 02 FB | 	rdlong	local03, objptr
08dac     50 00 00 FF 
08db0     70 E5 85 F1 | 	sub	objptr, ##41328
08db4     FF 22 16 F2 | 	cmp	local03, #255 wc
08db8     40 00 90 3D |  if_ae	jmp	#LR__0763
08dbc     50 00 00 FF 
08dc0     70 E5 05 F1 | 	add	objptr, ##41328
08dc4     F2 24 02 FB | 	rdlong	local04, objptr
08dc8     50 00 00 FF 
08dcc     70 E5 85 F1 | 	sub	objptr, ##41328
08dd0                 | LR__0761
08dd0     00 25 56 F2 | 	cmps	local04, #256 wc
08dd4     24 00 90 3D |  if_ae	jmp	#LR__0762
08dd8     12 21 02 F6 | 	mov	local02, local04
08ddc     4E 00 00 FF 
08de0     70 E5 05 F1 | 	add	objptr, ##40304
08de4     F2 20 02 F1 | 	add	local02, objptr
08de8     10 01 48 FC | 	wrbyte	#0, local02
08dec     01 24 06 F1 | 	add	local04, #1
08df0     4E 00 00 FF 
08df4     70 E5 85 F1 | 	sub	objptr, ##40304
08df8     D4 FF 9F FD | 	jmp	#LR__0761
08dfc                 | LR__0762
08dfc                 | LR__0763
08dfc     4E 00 00 FF 
08e00     70 E5 05 F1 | 	add	objptr, ##40304
08e04     F2 12 02 F6 | 	mov	arg01, objptr
08e08     4E 00 00 FF 
08e0c     70 E5 85 F1 | 	sub	objptr, ##40304
08e10     00 FB BF FD | 	call	#_csave_block
08e14     50 00 00 FF 
08e18     70 E5 05 F1 | 	add	objptr, ##41328
08e1c     F2 00 68 FC | 	wrlong	#0, objptr
08e20     50 00 00 FF 
08e24     70 E5 85 F1 | 	sub	objptr, ##41328
08e28     2C 13 06 F6 | 	mov	arg01, #300
08e2c     04 C1 B0 FD | 	call	#__system___waitms
08e30                 | LR__0764
08e30     A7 F0 03 F6 | 	mov	ptra, fp
08e34     B2 00 A0 FD | 	call	#popregs_
08e38                 | _csave_addtoblock_ret
08e38     2D 00 64 FD | 	ret
08e3c                 | 
08e3c                 | ' 
08e3c                 | ' sub test_csave
08e3c                 | _test_csave
08e3c     04 4A 05 F6 | 	mov	COUNT_, #4
08e40     A8 00 A0 FD | 	call	#pushregs_
08e44     C0 F0 07 F1 | 	add	ptra, #192
08e48                 | ' 'dim fileheader,savestart, saveptr as ulong
08e48                 | ' 
08e48                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
08e48     41 00 00 FF 
08e4c     48 E4 05 F1 | 	add	objptr, ##33352
08e50     F2 12 02 FB | 	rdlong	arg01, objptr
08e54     41 00 00 FF 
08e58     48 E4 85 F1 | 	sub	objptr, ##33352
08e5c     A8 8A B0 FD | 	call	#_pslpeek
08e60     FF FF 7F FF 
08e64     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08e68     0C 00 90 5D |  if_ne	jmp	#LR__0770
08e6c     1B 12 06 F6 | 	mov	arg01, #27
08e70     D8 88 B0 FD | 	call	#_printerror
08e74     0C 03 90 FD | 	jmp	#LR__0782
08e78                 | LR__0770
08e78     04 F8 BF FD | 	call	#_pop
08e7c     FF 1E 02 F6 | 	mov	local01, result3
08e80     90 4E 05 F1 | 	add	fp, #144
08e84     A7 FA 61 FC | 	wrlong	result1, fp
08e88     04 4E 05 F1 | 	add	fp, #4
08e8c     A7 FC 61 FC | 	wrlong	result2, fp
08e90     04 4E 05 F1 | 	add	fp, #4
08e94     A7 1E 62 FC | 	wrlong	local01, fp
08e98                 | ' t1=pop()
08e98                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
08e98     98 4E 85 F1 | 	sub	fp, #152
08e9c     1F 1E 0E F2 | 	cmp	local01, #31 wz
08ea0     20 01 00 5F 
08ea4     A3 1F 06 56 |  if_ne	mov	local01, ##@LR__4286
08ea8     8C 4E 05 51 |  if_ne	add	fp, #140
08eac     A7 1E 62 5C |  if_ne	wrlong	local01, fp
08eb0     8C 4E 85 51 |  if_ne	sub	fp, #140
08eb4     90 4E 05 A1 |  if_e	add	fp, #144
08eb8     A7 1E 02 AB |  if_e	rdlong	local01, fp
08ebc     04 4E 85 A1 |  if_e	sub	fp, #4
08ec0     A7 1E 62 AC |  if_e	wrlong	local01, fp
08ec4     8C 4E 85 A1 |  if_e	sub	fp, #140
08ec8                 | ' 
08ec8                 | ' ' prepare 1 kHz header wave
08ec8                 | ' 
08ec8                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08ec8     A7 00 68 FC | 	wrlong	#0, fp
08ecc     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
08ed0                 | LR__0771
08ed0     A7 1E 02 FB | 	rdlong	local01, fp
08ed4     0F 1F 52 F6 | 	abs	local01, local01 wc
08ed8     07 1E 06 F5 | 	and	local01, #7
08edc     0F 1F 82 F6 | 	negc	local01, local01
08ee0     04 1E 56 F2 | 	cmps	local01, #4 wc
08ee4     20 00 90 3D |  if_ae	jmp	#LR__0772
08ee8     A7 1E 02 FB | 	rdlong	local01, fp
08eec     4E 00 00 FF 
08ef0     70 E4 05 F1 | 	add	objptr, ##40048
08ef4     F2 1E 02 F1 | 	add	local01, objptr
08ef8     0F FF 48 FC | 	wrbyte	#127, local01
08efc     4E 00 00 FF 
08f00     70 E4 85 F1 | 	sub	objptr, ##40048
08f04     1C 00 90 FD | 	jmp	#LR__0773
08f08                 | LR__0772
08f08     A7 1E 02 FB | 	rdlong	local01, fp
08f0c     4E 00 00 FF 
08f10     70 E4 05 F1 | 	add	objptr, ##40048
08f14     F2 1E 02 F1 | 	add	local01, objptr
08f18     0F 01 49 FC | 	wrbyte	#128, local01
08f1c     4E 00 00 FF 
08f20     70 E4 85 F1 | 	sub	objptr, ##40048
08f24                 | LR__0773
08f24     A7 1E 02 FB | 	rdlong	local01, fp
08f28     01 1E 06 F1 | 	add	local01, #1
08f2c     A7 1E 62 FC | 	wrlong	local01, fp
08f30     00 1F 56 F2 | 	cmps	local01, #256 wc
08f34     98 FF 9F CD |  if_b	jmp	#LR__0771
08f38                 | LR__0774
08f38     4E 00 00 FF 
08f3c     70 E4 05 F1 | 	add	objptr, ##40048
08f40     F2 14 02 F6 | 	mov	arg02, objptr
08f44     07 12 06 F6 | 	mov	arg01, #7
08f48     0F 00 00 FF 
08f4c     40 17 06 F6 | 	mov	arg03, ##8000
08f50     0E 18 C6 F9 | 	decod	arg04, #14
08f54     00 1B 06 F6 | 	mov	arg05, #256
08f58     00 1C 06 F6 | 	mov	arg06, #0
08f5c     42 00 00 FF 
08f60     B0 E5 85 F1 | 	sub	objptr, ##34224
08f64     40 B9 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
08f68     0B 00 00 FF 
08f6c     C0 E4 85 F1 | 	sub	objptr, ##5824
08f70     05 00 00 FF 
08f74     B8 13 06 F6 | 	mov	arg01, ##3000
08f78     B8 BF B0 FD | 	call	#__system___waitms
08f7c     50 00 00 FF 
08f80     70 E5 05 F1 | 	add	objptr, ##41328
08f84     F2 00 68 FC | 	wrlong	#0, objptr
08f88     50 00 00 FF 
08f8c     70 E5 85 F1 | 	sub	objptr, ##41328
08f90     72 12 06 F6 | 	mov	arg01, #114
08f94     00 14 06 F6 | 	mov	arg02, #0
08f98     5C FD BF FD | 	call	#_csave_addtoblock
08f9c     62 12 06 F6 | 	mov	arg01, #98
08fa0     00 14 06 F6 | 	mov	arg02, #0
08fa4     50 FD BF FD | 	call	#_csave_addtoblock
08fa8     61 12 06 F6 | 	mov	arg01, #97
08fac     00 14 06 F6 | 	mov	arg02, #0
08fb0     44 FD BF FD | 	call	#_csave_addtoblock
08fb4     0D 12 06 F6 | 	mov	arg01, #13
08fb8     00 14 06 F6 | 	mov	arg02, #0
08fbc     38 FD BF FD | 	call	#_csave_addtoblock
08fc0                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
08fc0                 | ' waitms 3000 
08fc0                 | ' 
08fc0                 | ' blockptr=0
08fc0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
08fc0                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
08fc0     A7 02 68 FC | 	wrlong	#1, fp
08fc4     8C 4E 05 F1 | 	add	fp, #140
08fc8     A7 12 02 FB | 	rdlong	arg01, fp
08fcc     8C 4E 85 F1 | 	sub	fp, #140
08fd0     09 21 02 F6 | 	mov	local02, arg01
08fd4     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
08fd8                 | LR__0775
08fd8     10 FB C9 FA | 	rdbyte	result1, local02 wz
08fdc     01 20 06 51 |  if_ne	add	local02, #1
08fe0     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
08fe4                 | LR__0776
08fe4     09 21 82 F1 | 	sub	local02, arg01
08fe8     10 23 02 F6 | 	mov	local03, local02
08fec     01 22 06 F1 | 	add	local03, #1
08ff0                 | LR__0777
08ff0     A7 1E 02 FB | 	rdlong	local01, fp
08ff4     11 1F 52 F2 | 	cmps	local01, local03 wc
08ff8     34 00 90 3D |  if_ae	jmp	#LR__0778
08ffc     8C 4E 05 F1 | 	add	fp, #140
09000     A7 12 02 FB | 	rdlong	arg01, fp
09004     8C 4E 85 F1 | 	sub	fp, #140
09008     A7 14 02 FB | 	rdlong	arg02, fp
0900c     01 16 06 F6 | 	mov	arg03, #1
09010     54 DD B0 FD | 	call	#__system__Mid_S
09014     FD 12 C2 FA | 	rdbyte	arg01, result1
09018     00 14 06 F6 | 	mov	arg02, #0
0901c     D8 FC BF FD | 	call	#_csave_addtoblock
09020     A7 1E 02 FB | 	rdlong	local01, fp
09024     01 1E 06 F1 | 	add	local01, #1
09028     A7 1E 62 FC | 	wrlong	local01, fp
0902c     C0 FF 9F FD | 	jmp	#LR__0777
09030                 | LR__0778
09030     00 12 06 F6 | 	mov	arg01, #0
09034     00 14 06 F6 | 	mov	arg02, #0
09038     BC FC BF FD | 	call	#_csave_addtoblock
0903c     72 12 06 F6 | 	mov	arg01, #114
09040     00 14 06 F6 | 	mov	arg02, #0
09044     B0 FC BF FD | 	call	#_csave_addtoblock
09048     62 12 06 F6 | 	mov	arg01, #98
0904c     00 14 06 F6 | 	mov	arg02, #0
09050     A4 FC BF FD | 	call	#_csave_addtoblock
09054     73 12 06 F6 | 	mov	arg01, #115
09058     00 14 06 F6 | 	mov	arg02, #0
0905c     98 FC BF FD | 	call	#_csave_addtoblock
09060     0D 12 06 F6 | 	mov	arg01, #13
09064     00 14 06 F6 | 	mov	arg02, #0
09068     8C FC BF FD | 	call	#_csave_addtoblock
0906c     41 00 00 FF 
09070     48 E4 05 F1 | 	add	objptr, ##33352
09074     F2 1E 02 FB | 	rdlong	local01, objptr
09078     41 00 00 FF 
0907c     48 E4 85 F1 | 	sub	objptr, ##33352
09080     9C 4E 05 F1 | 	add	fp, #156
09084     A7 1E 62 FC | 	wrlong	local01, fp
09088     9C 4E 85 F1 | 	sub	fp, #156
0908c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0908c                 | ' 
0908c                 | ' saveptr=programstart
0908c                 | ' do
0908c                 | LR__0779
0908c     A0 4E 05 F1 | 	add	fp, #160
09090     A7 12 02 F6 | 	mov	arg01, fp
09094     04 4E 85 F1 | 	sub	fp, #4
09098     A7 14 02 FB | 	rdlong	arg02, fp
0909c     9C 4E 85 F1 | 	sub	fp, #156
090a0     18 16 06 F6 | 	mov	arg03, #24
090a4     0B 00 00 FF 
090a8     C0 E4 05 F1 | 	add	objptr, ##5824
090ac     A4 B0 B0 FD | 	call	#_psram_spin2_read1
090b0     0C 4E 05 F1 | 	add	fp, #12
090b4     A7 12 02 F6 | 	mov	arg01, fp
090b8     9C 4E 05 F1 | 	add	fp, #156
090bc     A7 14 02 FB | 	rdlong	arg02, fp
090c0     04 4E 05 F1 | 	add	fp, #4
090c4     A7 16 02 FB | 	rdlong	arg03, fp
090c8     AC 4E 85 F1 | 	sub	fp, #172
090cc     84 B0 B0 FD | 	call	#_psram_spin2_read1
090d0     0B 00 00 FF 
090d4     C0 E4 85 F1 | 	sub	objptr, ##5824
090d8     AC 4E 05 F1 | 	add	fp, #172
090dc     A7 12 02 FB | 	rdlong	arg01, fp
090e0     AC 4E 85 F1 | 	sub	fp, #172
090e4     00 14 06 F6 | 	mov	arg02, #0
090e8     0C FC BF FD | 	call	#_csave_addtoblock
090ec                 | '   psram.read1(varptr(header(0)),saveptr,24)
090ec                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
090ec                 | '   csave_addtoblock(header(3),0) ' that's always <255
090ec                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
090ec     A7 00 68 FC | 	wrlong	#0, fp
090f0     AC 4E 05 F1 | 	add	fp, #172
090f4     A7 24 02 FB | 	rdlong	local04, fp
090f8     AC 4E 85 F1 | 	sub	fp, #172
090fc                 | LR__0780
090fc     A7 1E 02 FB | 	rdlong	local01, fp
09100     12 1F 52 F2 | 	cmps	local01, local04 wc
09104     2C 00 90 3D |  if_ae	jmp	#LR__0781
09108     A7 22 02 FB | 	rdlong	local03, fp
0910c     0C 4E 05 F1 | 	add	fp, #12
09110     A7 22 02 F1 | 	add	local03, fp
09114     11 13 C2 FA | 	rdbyte	arg01, local03
09118     00 14 06 F6 | 	mov	arg02, #0
0911c     0C 4E 85 F1 | 	sub	fp, #12
09120     D4 FB BF FD | 	call	#_csave_addtoblock
09124     A7 22 02 FB | 	rdlong	local03, fp
09128     01 22 06 F1 | 	add	local03, #1
0912c     A7 22 62 FC | 	wrlong	local03, fp
09130     C8 FF 9F FD | 	jmp	#LR__0780
09134                 | LR__0781
09134     B4 4E 05 F1 | 	add	fp, #180
09138     A7 1E 02 FB | 	rdlong	local01, fp
0913c     18 4E 85 F1 | 	sub	fp, #24
09140     A7 1E 62 FC | 	wrlong	local01, fp
09144     18 4E 05 F1 | 	add	fp, #24
09148     A7 1E 02 FB | 	rdlong	local01, fp
0914c     B4 4E 85 F1 | 	sub	fp, #180
09150     FF FF 3F FF 
09154     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09158     30 FF 9F 5D |  if_ne	jmp	#LR__0779
0915c     00 12 06 F6 | 	mov	arg01, #0
09160     01 14 06 F6 | 	mov	arg02, #1
09164     90 FB BF FD | 	call	#_csave_addtoblock
09168     2D 00 00 FF 
0916c     D4 E5 05 F1 | 	add	objptr, ##23508
09170     F2 12 02 FB | 	rdlong	arg01, objptr
09174     2D 00 00 FF 
09178     D4 E5 85 F1 | 	sub	objptr, ##23508
0917c     F4 12 06 F1 | 	add	arg01, #244
09180     09 01 58 FC | 	wrword	#0, arg01
09184                 | LR__0782
09184     A7 F0 03 F6 | 	mov	ptra, fp
09188     B2 00 A0 FD | 	call	#popregs_
0918c                 | _test_csave_ret
0918c     2D 00 64 FD | 	ret
09190                 | 
09190                 | ' 
09190                 | ' ' ----------------- Save the program
09190                 | ' 
09190                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09190                 | _do_save
09190     02 4A 05 F6 | 	mov	COUNT_, #2
09194     A8 00 A0 FD | 	call	#pushregs_
09198     01 00 00 FF 
0919c     BC F0 07 F1 | 	add	ptra, ##700
091a0     01 00 00 FF 
091a4     10 4E 05 F1 | 	add	fp, ##528
091a8     B1 B0 86 FF 
091ac     A7 E4 68 FC | 	wrlong	##224486002, fp
091b0     01 00 00 FF 
091b4     10 4E 85 F1 | 	sub	fp, ##528
091b8     C4 F4 BF FD | 	call	#_pop
091bc     FF 16 02 F6 | 	mov	arg03, result3
091c0     A7 FA 61 FC | 	wrlong	result1, fp
091c4     04 4E 05 F1 | 	add	fp, #4
091c8     A7 FC 61 FC | 	wrlong	result2, fp
091cc     04 4E 05 F1 | 	add	fp, #4
091d0     A7 16 62 FC | 	wrlong	arg03, fp
091d4     08 4E 85 F1 | 	sub	fp, #8
091d8                 | ' 
091d8                 | ' fileheader=$0D616272' rba+ver'
091d8                 | ' 
091d8                 | ' t1=pop() 
091d8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
091d8     41 00 00 FF 
091dc     48 E4 05 F1 | 	add	objptr, ##33352
091e0     F2 12 02 FB | 	rdlong	arg01, objptr
091e4     41 00 00 FF 
091e8     48 E4 85 F1 | 	sub	objptr, ##33352
091ec     18 87 B0 FD | 	call	#_pslpeek
091f0     FF FF 7F FF 
091f4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
091f8     0C 00 90 5D |  if_ne	jmp	#LR__0790
091fc     1B 12 06 F6 | 	mov	arg01, #27
09200     48 85 B0 FD | 	call	#_printerror
09204     3C 02 90 FD | 	jmp	#LR__0795
09208                 | LR__0790
09208                 | ' if t1.result_type=result_string then
09208     08 4E 05 F1 | 	add	fp, #8
0920c     A7 1E 02 FB | 	rdlong	local01, fp
09210     08 4E 85 F1 | 	sub	fp, #8
09214     1F 1E 0E F2 | 	cmp	local01, #31 wz
09218     28 02 90 5D |  if_ne	jmp	#LR__0794
0921c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0921c     A7 12 02 FB | 	rdlong	arg01, fp
09220     20 01 00 FF 
09224     AE 15 06 F6 | 	mov	arg02, ##@LR__4287
09228     3C BA B0 FD | 	call	#__system___string_cmp
0922c     00 FA 0D F2 | 	cmp	result1, #0 wz
09230     20 01 00 AF 
09234     AF 1F 06 A6 |  if_e	mov	local01, ##@LR__4288
09238     A7 1E 62 AC |  if_e	wrlong	local01, fp
0923c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0923c     09 12 06 F6 | 	mov	arg01, #9
09240     E0 05 B1 FD | 	call	#__system__close
09244     09 1E 06 F6 | 	mov	local01, #9
09248     49 00 00 FF 
0924c     58 E4 05 F1 | 	add	objptr, ##37464
09250     F2 12 02 FB | 	rdlong	arg01, objptr
09254     49 00 00 FF 
09258     58 E4 85 F1 | 	sub	objptr, ##37464
0925c     20 01 00 FF 
09260     BA 15 06 F6 | 	mov	arg02, ##@LR__4289
09264     34 BA B0 FD | 	call	#__system___string_concat
09268     FD 12 02 F6 | 	mov	arg01, result1
0926c     A7 14 02 FB | 	rdlong	arg02, fp
09270     28 BA B0 FD | 	call	#__system___string_concat
09274     FD 14 02 F6 | 	mov	arg02, result1
09278     0F 13 02 F6 | 	mov	arg01, local01
0927c     0D 16 06 F6 | 	mov	arg03, #13
09280     C0 C5 B0 FD | 	call	#__system___basic_open_string
09284     01 00 00 FF 
09288     0C 4E 05 F1 | 	add	fp, ##524
0928c     A7 0A 68 FC | 	wrlong	#5, fp
09290     41 00 00 FF 
09294     48 E4 05 F1 | 	add	objptr, ##33352
09298     F2 1E 02 FB | 	rdlong	local01, objptr
0929c     41 00 00 FF 
092a0     48 E4 85 F1 | 	sub	objptr, ##33352
092a4     0C 4E 05 F1 | 	add	fp, #12
092a8     A7 1E 62 FC | 	wrlong	local01, fp
092ac     01 00 00 FF 
092b0     18 4E 85 F1 | 	sub	fp, ##536
092b4                 | ' '  put #9,1,fileheader,1
092b4                 | '   i=5
092b4                 | '   saveptr=programstart
092b4                 | '   do
092b4                 | LR__0791
092b4     01 00 00 FF 
092b8     1C 4E 05 F1 | 	add	fp, ##540
092bc     A7 12 02 F6 | 	mov	arg01, fp
092c0     04 4E 85 F1 | 	sub	fp, #4
092c4     A7 14 02 FB | 	rdlong	arg02, fp
092c8     01 00 00 FF 
092cc     18 4E 85 F1 | 	sub	fp, ##536
092d0     18 16 06 F6 | 	mov	arg03, #24
092d4     0B 00 00 FF 
092d8     C0 E4 05 F1 | 	add	objptr, ##5824
092dc     74 AE B0 FD | 	call	#_psram_spin2_read1
092e0     01 00 00 FF 
092e4     34 4E 05 F1 | 	add	fp, ##564
092e8     A7 12 02 F6 | 	mov	arg01, fp
092ec     10 4E 85 F1 | 	sub	fp, #16
092f0     A7 14 02 FB | 	rdlong	arg02, fp
092f4     04 4E 05 F1 | 	add	fp, #4
092f8     A7 16 02 FB | 	rdlong	arg03, fp
092fc     01 00 00 FF 
09300     28 4E 85 F1 | 	sub	fp, ##552
09304     4C AE B0 FD | 	call	#_psram_spin2_read1
09308     0B 00 00 FF 
0930c     C0 E4 85 F1 | 	sub	objptr, ##5824
09310     20 01 00 FF 
09314     BC 1F 06 F6 | 	mov	local01, ##@LR__4290
09318     01 00 00 FF 
0931c     B4 4E 05 F1 | 	add	fp, ##692
09320     A7 1E 62 FC | 	wrlong	local01, fp
09324                 | '     psram.read1(varptr(header(0)),saveptr,24)
09324                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
09324                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
09324     A8 4E 85 F1 | 	sub	fp, #168
09328     A7 02 68 FC | 	wrlong	#1, fp
0932c     1C 4E 05 F1 | 	add	fp, #28
09330     A7 20 02 FB | 	rdlong	local02, fp
09334     01 00 00 FF 
09338     28 4E 85 F1 | 	sub	fp, ##552
0933c     01 20 06 F1 | 	add	local02, #1
09340                 | LR__0792
09340     01 00 00 FF 
09344     0C 4E 05 F1 | 	add	fp, ##524
09348     A7 1E 02 FB | 	rdlong	local01, fp
0934c     01 00 00 FF 
09350     0C 4E 85 F1 | 	sub	fp, ##524
09354     10 1F 52 F2 | 	cmps	local01, local02 wc
09358     64 00 90 3D |  if_ae	jmp	#LR__0793
0935c     01 00 00 FF 
09360     B4 4E 05 F1 | 	add	fp, ##692
09364     A7 1E 02 FB | 	rdlong	local01, fp
09368     A8 4E 85 F1 | 	sub	fp, #168
0936c     A7 16 02 FB | 	rdlong	arg03, fp
09370     01 16 86 F1 | 	sub	arg03, #1
09374     28 4E 05 F1 | 	add	fp, #40
09378     A7 16 02 F1 | 	add	arg03, fp
0937c     0B 13 C2 FA | 	rdbyte	arg01, arg03
09380     01 00 00 FF 
09384     34 4E 85 F1 | 	sub	fp, ##564
09388     88 DA B0 FD | 	call	#__system__Chr_S
0938c     FD 14 02 F6 | 	mov	arg02, result1
09390     0F 13 02 F6 | 	mov	arg01, local01
09394     04 B9 B0 FD | 	call	#__system___string_concat
09398     01 00 00 FF 
0939c     B4 4E 05 F1 | 	add	fp, ##692
093a0     A7 FA 61 FC | 	wrlong	result1, fp
093a4     A8 4E 85 F1 | 	sub	fp, #168
093a8     A7 1E 02 FB | 	rdlong	local01, fp
093ac     01 1E 06 F1 | 	add	local01, #1
093b0     A7 1E 62 FC | 	wrlong	local01, fp
093b4     01 00 00 FF 
093b8     0C 4E 85 F1 | 	sub	fp, ##524
093bc     80 FF 9F FD | 	jmp	#LR__0792
093c0                 | LR__0793
093c0                 | '  '   put #9,i,header(3),1 : i+=4
093c0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
093c0                 | '      print #9, saveline$
093c0     09 12 06 F6 | 	mov	arg01, #9
093c4     2C 0E B1 FD | 	call	#__system___getiolock_0349
093c8     FD 12 02 F6 | 	mov	arg01, result1
093cc     70 B8 B0 FD | 	call	#__system___lockmem
093d0     01 00 00 FF 
093d4     B4 4E 05 F1 | 	add	fp, ##692
093d8     A7 14 02 FB | 	rdlong	arg02, fp
093dc     01 00 00 FF 
093e0     B4 4E 85 F1 | 	sub	fp, ##692
093e4     09 12 06 F6 | 	mov	arg01, #9
093e8     00 16 06 F6 | 	mov	arg03, #0
093ec     44 C5 B0 FD | 	call	#__system___basic_print_string
093f0     09 12 06 F6 | 	mov	arg01, #9
093f4     0A 14 06 F6 | 	mov	arg02, #10
093f8     00 16 06 F6 | 	mov	arg03, #0
093fc     DC C4 B0 FD | 	call	#__system___basic_print_char
09400     09 12 06 F6 | 	mov	arg01, #9
09404     EC 0D B1 FD | 	call	#__system___getiolock_0349
09408     FD 00 68 FC | 	wrlong	#0, result1
0940c     01 00 00 FF 
09410     30 4E 05 F1 | 	add	fp, ##560
09414     A7 1E 02 FB | 	rdlong	local01, fp
09418     18 4E 85 F1 | 	sub	fp, #24
0941c     A7 1E 62 FC | 	wrlong	local01, fp
09420     18 4E 05 F1 | 	add	fp, #24
09424     A7 1E 02 FB | 	rdlong	local01, fp
09428     01 00 00 FF 
0942c     30 4E 85 F1 | 	sub	fp, ##560
09430     FF FF 3F FF 
09434     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09438     78 FE 9F 5D |  if_ne	jmp	#LR__0791
0943c                 | '   close #9  
0943c     09 12 06 F6 | 	mov	arg01, #9
09440     E0 03 B1 FD | 	call	#__system__close
09444                 | LR__0794
09444                 | LR__0795
09444     A7 F0 03 F6 | 	mov	ptra, fp
09448     B2 00 A0 FD | 	call	#popregs_
0944c                 | _do_save_ret
0944c     2D 00 64 FD | 	ret
09450                 | 
09450                 | ' 
09450                 | ' '----------------- Load the program
09450                 | ' 'lo todo: errors while loading
09450                 | ' sub do_load
09450                 | _do_load
09450     01 4A 05 F6 | 	mov	COUNT_, #1
09454     A8 00 A0 FD | 	call	#pushregs_
09458     A4 F0 07 F1 | 	add	ptra, #164
0945c     A0 4E 05 F1 | 	add	fp, #160
09460     A7 12 02 F6 | 	mov	arg01, fp
09464     80 4E 85 F1 | 	sub	fp, #128
09468     A7 14 02 F6 | 	mov	arg02, fp
0946c     20 4E 85 F1 | 	sub	fp, #32
09470     09 15 62 FC | 	wrlong	arg02, arg01
09474     08 F2 BF FD | 	call	#_pop
09478     FF 1E 02 F6 | 	mov	local01, result3
0947c     A7 FA 61 FC | 	wrlong	result1, fp
09480     04 4E 05 F1 | 	add	fp, #4
09484     A7 FC 61 FC | 	wrlong	result2, fp
09488     04 4E 05 F1 | 	add	fp, #4
0948c     A7 1E 62 FC | 	wrlong	local01, fp
09490                 | ' 
09490                 | ' lpoke varptr(line2$),varptr(line2)
09490                 | ' t1=pop() 
09490                 | ' if t1.result_type=result_string then
09490     08 4E 85 F1 | 	sub	fp, #8
09494     1F 1E 0E F2 | 	cmp	local01, #31 wz
09498     40 03 90 5D |  if_ne	jmp	#LR__0806
0949c     18 09 B0 FD | 	call	#_do_new
094a0                 | '   do_new
094a0                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
094a0     A7 12 02 FB | 	rdlong	arg01, fp
094a4     20 01 00 FF 
094a8     BD 15 06 F6 | 	mov	arg02, ##@LR__4291
094ac     B8 B7 B0 FD | 	call	#__system___string_cmp
094b0     00 FA 0D F2 | 	cmp	result1, #0 wz
094b4     20 01 00 AF 
094b8     BE 1F 06 A6 |  if_e	mov	local01, ##@LR__4292
094bc     A7 1E 62 AC |  if_e	wrlong	local01, fp
094c0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
094c0     09 12 06 F6 | 	mov	arg01, #9
094c4     5C 03 B1 FD | 	call	#__system__close
094c8     09 1E 06 F6 | 	mov	local01, #9
094cc     49 00 00 FF 
094d0     58 E4 05 F1 | 	add	objptr, ##37464
094d4     F2 12 02 FB | 	rdlong	arg01, objptr
094d8     49 00 00 FF 
094dc     58 E4 85 F1 | 	sub	objptr, ##37464
094e0     20 01 00 FF 
094e4     C9 15 06 F6 | 	mov	arg02, ##@LR__4293
094e8     B0 B7 B0 FD | 	call	#__system___string_concat
094ec     FD 12 02 F6 | 	mov	arg01, result1
094f0     A7 14 02 FB | 	rdlong	arg02, fp
094f4     A4 B7 B0 FD | 	call	#__system___string_concat
094f8     FD 14 02 F6 | 	mov	arg02, result1
094fc     0F 13 02 F6 | 	mov	arg01, local01
09500     00 16 06 F6 | 	mov	arg03, #0
09504     3C C3 B0 FD | 	call	#__system___basic_open_string
09508     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0950c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
09510     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09514     10 4E 05 F1 | 	add	fp, #16
09518     A7 FA 61 FC | 	wrlong	result1, fp
0951c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0951c     10 4E 85 F1 | 	sub	fp, #16
09520     9C 00 90 AD |  if_e	jmp	#LR__0800
09524     00 12 06 F6 | 	mov	arg01, #0
09528     C8 0C B1 FD | 	call	#__system___getiolock_0349
0952c     FD 12 02 F6 | 	mov	arg01, result1
09530     0C B7 B0 FD | 	call	#__system___lockmem
09534     20 01 00 FF 
09538     CB 15 06 F6 | 	mov	arg02, ##@LR__4294
0953c     00 12 06 F6 | 	mov	arg01, #0
09540     00 16 06 F6 | 	mov	arg03, #0
09544     EC C3 B0 FD | 	call	#__system___basic_print_string
09548     10 4E 05 F1 | 	add	fp, #16
0954c     A7 14 02 FB | 	rdlong	arg02, fp
09550     10 4E 85 F1 | 	sub	fp, #16
09554     00 12 06 F6 | 	mov	arg01, #0
09558     00 16 06 F6 | 	mov	arg03, #0
0955c     0A 18 06 F6 | 	mov	arg04, #10
09560     14 C4 B0 FD | 	call	#__system___basic_print_integer
09564     20 01 00 FF 
09568     D9 15 06 F6 | 	mov	arg02, ##@LR__4295
0956c     00 12 06 F6 | 	mov	arg01, #0
09570     00 16 06 F6 | 	mov	arg03, #0
09574     BC C3 B0 FD | 	call	#__system___basic_print_string
09578     10 4E 05 F1 | 	add	fp, #16
0957c     A7 12 02 FB | 	rdlong	arg01, fp
09580     10 4E 85 F1 | 	sub	fp, #16
09584     B8 DC B0 FD | 	call	#__system___strerror
09588     FD 14 02 F6 | 	mov	arg02, result1
0958c     00 12 06 F6 | 	mov	arg01, #0
09590     00 16 06 F6 | 	mov	arg03, #0
09594     9C C3 B0 FD | 	call	#__system___basic_print_string
09598     00 12 06 F6 | 	mov	arg01, #0
0959c     0A 14 06 F6 | 	mov	arg02, #10
095a0     00 16 06 F6 | 	mov	arg03, #0
095a4     34 C3 B0 FD | 	call	#__system___basic_print_char
095a8     00 12 06 F6 | 	mov	arg01, #0
095ac     44 0C B1 FD | 	call	#__system___getiolock_0349
095b0     FD 00 68 FC | 	wrlong	#0, result1
095b4     09 12 06 F6 | 	mov	arg01, #9
095b8     68 02 B1 FD | 	call	#__system__close
095bc     24 02 90 FD | 	jmp	#LR__0808
095c0                 | LR__0800
095c0     0C 4E 05 F1 | 	add	fp, #12
095c4     A7 0A 68 FC | 	wrlong	#5, fp
095c8                 | '   i=5
095c8                 | '   get #9,1,header,1
095c8     0C 4E 05 F1 | 	add	fp, #12
095cc     A7 16 02 F6 | 	mov	arg03, fp
095d0     18 4E 85 F1 | 	sub	fp, #24
095d4     09 12 06 F6 | 	mov	arg01, #9
095d8     01 14 06 F6 | 	mov	arg02, #1
095dc     01 18 06 F6 | 	mov	arg04, #1
095e0     04 1A 06 F6 | 	mov	arg05, #4
095e4     5C C4 B0 FD | 	call	#__system___basic_get
095e8                 | '   
095e8                 | '   if header<>$0D616272 then 
095e8     18 4E 05 F1 | 	add	fp, #24
095ec     A7 1E 02 FB | 	rdlong	local01, fp
095f0     18 4E 85 F1 | 	sub	fp, #24
095f4     B1 B0 06 FF 
095f8     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
095fc     F0 00 90 AD |  if_e	jmp	#LR__0803
09600                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09600     09 12 06 F6 | 	mov	arg01, #9
09604     1C 02 B1 FD | 	call	#__system__close
09608     09 1E 06 F6 | 	mov	local01, #9
0960c     49 00 00 FF 
09610     58 E4 05 F1 | 	add	objptr, ##37464
09614     F2 12 02 FB | 	rdlong	arg01, objptr
09618     49 00 00 FF 
0961c     58 E4 85 F1 | 	sub	objptr, ##37464
09620     20 01 00 FF 
09624     DC 15 06 F6 | 	mov	arg02, ##@LR__4296
09628     70 B6 B0 FD | 	call	#__system___string_concat
0962c     FD 12 02 F6 | 	mov	arg01, result1
09630     A7 14 02 FB | 	rdlong	arg02, fp
09634     64 B6 B0 FD | 	call	#__system___string_concat
09638     FD 14 02 F6 | 	mov	arg02, result1
0963c     0F 13 02 F6 | 	mov	arg01, local01
09640     00 16 06 F6 | 	mov	arg03, #0
09644     FC C1 B0 FD | 	call	#__system___basic_open_string
09648                 | '     do
09648                 | LR__0801
09648     09 12 06 F6 | 	mov	arg01, #9
0964c     FC B7 B0 FD | 	call	#__system___basic_read_line
09650     2D 00 00 FF 
09654     E0 E5 05 F1 | 	add	objptr, ##23520
09658     F2 FA 61 FC | 	wrlong	result1, objptr
0965c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0965c     2D 00 00 FF 
09660     E0 E5 85 F1 | 	sub	objptr, ##23520
09664     FD 12 02 F6 | 	mov	arg01, result1
09668     01 14 06 F6 | 	mov	arg02, #1
0966c     E0 D5 B0 FD | 	call	#__system__Left_S
09670     FD 12 02 F6 | 	mov	arg01, result1
09674     20 01 00 FF 
09678     DE 15 06 F6 | 	mov	arg02, ##@LR__4297
0967c     E8 B5 B0 FD | 	call	#__system___string_cmp
09680     00 FA 55 F2 | 	cmps	result1, #0 wc
09684     34 00 90 CD |  if_b	jmp	#LR__0802
09688     2D 00 00 FF 
0968c     E0 E5 05 F1 | 	add	objptr, ##23520
09690     F2 12 02 FB | 	rdlong	arg01, objptr
09694     2D 00 00 FF 
09698     E0 E5 85 F1 | 	sub	objptr, ##23520
0969c     01 14 06 F6 | 	mov	arg02, #1
096a0     AC D5 B0 FD | 	call	#__system__Left_S
096a4     FD 12 02 F6 | 	mov	arg01, result1
096a8     20 01 00 FF 
096ac     E0 15 06 F6 | 	mov	arg02, ##@LR__4298
096b0     B4 B5 B0 FD | 	call	#__system___string_cmp
096b4     01 FA 55 F2 | 	cmps	result1, #1 wc
096b8     60 73 BF CD |  if_b	call	#_interpret
096bc                 | LR__0802
096bc     2D 00 00 FF 
096c0     E0 E5 05 F1 | 	add	objptr, ##23520
096c4     F2 12 02 FB | 	rdlong	arg01, objptr
096c8     2D 00 00 FF 
096cc     E0 E5 85 F1 | 	sub	objptr, ##23520
096d0     20 01 00 FF 
096d4     E2 15 06 F6 | 	mov	arg02, ##@LR__4299
096d8     8C B5 B0 FD | 	call	#__system___string_cmp
096dc     00 FA 0D F2 | 	cmp	result1, #0 wz
096e0     64 FF 9F 5D |  if_ne	jmp	#LR__0801
096e4                 | '     close #9
096e4     09 12 06 F6 | 	mov	arg01, #9
096e8     38 01 B1 FD | 	call	#__system__close
096ec     F4 00 90 FD | 	jmp	#LR__0807
096f0                 | LR__0803
096f0                 | '   'printerror(26) : close #9 : return
096f0                 | '     do
096f0                 | LR__0804
096f0                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
096f0     0C 4E 05 F1 | 	add	fp, #12
096f4     A7 14 02 FB | 	rdlong	arg02, fp
096f8     10 4E 05 F1 | 	add	fp, #16
096fc     A7 16 02 F6 | 	mov	arg03, fp
09700     1C 4E 85 F1 | 	sub	fp, #28
09704     09 12 06 F6 | 	mov	arg01, #9
09708     01 18 06 F6 | 	mov	arg04, #1
0970c     04 1A 06 F6 | 	mov	arg05, #4
09710     30 C3 B0 FD | 	call	#__system___basic_get
09714     14 4E 05 F1 | 	add	fp, #20
09718     A7 FA 61 FC | 	wrlong	result1, fp
0971c     08 4E 85 F1 | 	sub	fp, #8
09720     A7 1E 02 FB | 	rdlong	local01, fp
09724     04 1E 06 F1 | 	add	local01, #4
09728     A7 1E 62 FC | 	wrlong	local01, fp
0972c     10 4E 05 F1 | 	add	fp, #16
09730     A7 1E 02 FB | 	rdlong	local01, fp
09734     04 4E 05 F1 | 	add	fp, #4
09738     A7 1E 02 F1 | 	add	local01, fp
0973c     0F 01 48 FC | 	wrbyte	#0, local01
09740                 | '       if amount=1 then  
09740     0C 4E 85 F1 | 	sub	fp, #12
09744     A7 1E 02 FB | 	rdlong	local01, fp
09748     14 4E 85 F1 | 	sub	fp, #20
0974c     01 1E 0E F2 | 	cmp	local01, #1 wz
09750     68 00 90 5D |  if_ne	jmp	#LR__0805
09754                 | '         get #9,i,line2(0),linelength : i+=linelength
09754     0C 4E 05 F1 | 	add	fp, #12
09758     A7 14 02 FB | 	rdlong	arg02, fp
0975c     14 4E 05 F1 | 	add	fp, #20
09760     A7 16 02 F6 | 	mov	arg03, fp
09764     04 4E 85 F1 | 	sub	fp, #4
09768     A7 18 02 FB | 	rdlong	arg04, fp
0976c     1C 4E 85 F1 | 	sub	fp, #28
09770     09 12 06 F6 | 	mov	arg01, #9
09774     01 1A 06 F6 | 	mov	arg05, #1
09778     C8 C2 B0 FD | 	call	#__system___basic_get
0977c     0C 4E 05 F1 | 	add	fp, #12
09780     A7 1E 02 FB | 	rdlong	local01, fp
09784     10 4E 05 F1 | 	add	fp, #16
09788     A7 1A 02 FB | 	rdlong	arg05, fp
0978c     0D 1F 02 F1 | 	add	local01, arg05
09790     10 4E 85 F1 | 	sub	fp, #16
09794     A7 1E 62 FC | 	wrlong	local01, fp
09798     94 4E 05 F1 | 	add	fp, #148
0979c     A7 1E 02 FB | 	rdlong	local01, fp
097a0     A0 4E 85 F1 | 	sub	fp, #160
097a4     2D 00 00 FF 
097a8     E0 E5 05 F1 | 	add	objptr, ##23520
097ac     F2 1E 62 FC | 	wrlong	local01, objptr
097b0     2D 00 00 FF 
097b4     E0 E5 85 F1 | 	sub	objptr, ##23520
097b8     60 72 BF FD | 	call	#_interpret
097bc                 | LR__0805
097bc     14 4E 05 F1 | 	add	fp, #20
097c0     A7 1E 02 FB | 	rdlong	local01, fp
097c4     14 4E 85 F1 | 	sub	fp, #20
097c8     01 1E 56 F2 | 	cmps	local01, #1 wc
097cc     20 FF 9F 3D |  if_ae	jmp	#LR__0804
097d0                 | '     close #9 
097d0     09 12 06 F6 | 	mov	arg01, #9
097d4     4C 00 B1 FD | 	call	#__system__close
097d8     08 00 90 FD | 	jmp	#LR__0807
097dc                 | LR__0806
097dc     1E 12 06 F6 | 	mov	arg01, #30
097e0     68 7F B0 FD | 	call	#_printerror
097e4                 | LR__0807
097e4                 | LR__0808
097e4     A7 F0 03 F6 | 	mov	ptra, fp
097e8     B2 00 A0 FD | 	call	#popregs_
097ec                 | _do_load_ret
097ec     2D 00 64 FD | 	ret
097f0                 | 
097f0                 | ' 
097f0                 | ' '----------------- Run the program 
097f0                 | ' 
097f0                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
097f0                 | ' 
097f0                 | ' sub do_run
097f0                 | _do_run
097f0     01 4A 05 F6 | 	mov	COUNT_, #1
097f4     A8 00 A0 FD | 	call	#pushregs_
097f8     41 00 00 FF 
097fc     48 E4 05 F1 | 	add	objptr, ##33352
09800     F2 1C 02 FB | 	rdlong	arg06, objptr
09804     0F 00 00 FF 
09808     2C E5 05 F1 | 	add	objptr, ##7980
0980c     F2 1C 62 FC | 	wrlong	arg06, objptr
09810     04 E4 05 F1 | 	add	objptr, #4
09814     F2 00 68 FC | 	wrlong	#0, objptr
09818     04 E4 05 F1 | 	add	objptr, #4
0981c     FF FF FF FF 
09820     F2 FE 6B FC | 	wrlong	##-1, objptr
09824                 | ' if inrun>0 then 
09824     04 E4 05 F1 | 	add	objptr, #4
09828     F2 1C 02 FB | 	rdlong	arg06, objptr
0982c     50 00 00 FF 
09830     80 E5 85 F1 | 	sub	objptr, ##41344
09834     01 1C 16 F2 | 	cmp	arg06, #1 wc
09838     30 00 90 CD |  if_b	jmp	#LR__0810
0983c     50 00 00 FF 
09840     84 E5 05 F1 | 	add	objptr, ##41348
09844     F2 12 02 F6 | 	mov	arg01, objptr
09848     10 E4 85 F1 | 	sub	objptr, #16
0984c     F2 14 02 FB | 	rdlong	arg02, objptr
09850     18 16 06 F6 | 	mov	arg03, #24
09854     45 00 00 FF 
09858     B4 E4 85 F1 | 	sub	objptr, ##35508
0985c     F4 A8 B0 FD | 	call	#_psram_spin2_read1
09860     0B 00 00 FF 
09864     C0 E4 85 F1 | 	sub	objptr, ##5824
09868                 | '   psram.read1(varptr(runheader),runptr,24)  
09868                 | '   return
09868     A4 02 90 FD | 	jmp	#LR__0816
0986c                 | LR__0810
0986c     50 00 00 FF 
09870     80 E5 05 F1 | 	add	objptr, ##41344
09874     F2 02 68 FC | 	wrlong	#1, objptr
09878     04 E4 05 F1 | 	add	objptr, #4
0987c     F2 12 02 F6 | 	mov	arg01, objptr
09880     10 E4 85 F1 | 	sub	objptr, #16
09884     F2 14 02 FB | 	rdlong	arg02, objptr
09888     18 16 06 F6 | 	mov	arg03, #24
0988c     45 00 00 FF 
09890     B4 E4 85 F1 | 	sub	objptr, ##35508
09894     BC A8 B0 FD | 	call	#_psram_spin2_read1
09898                 | ' inrun=1
09898                 | ' psram.read1(varptr(runheader),runptr,24) 
09898                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09898     45 00 00 FF 
0989c     C4 E4 05 F1 | 	add	objptr, ##35524
098a0     F2 1E 02 FB | 	rdlong	local01, objptr
098a4     50 00 00 FF 
098a8     84 E5 85 F1 | 	sub	objptr, ##41348
098ac     FF FF 7F FF 
098b0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
098b4     50 00 00 AF 
098b8     80 E5 05 A1 |  if_e	add	objptr, ##41344
098bc     F2 00 68 AC |  if_e	wrlong	#0, objptr
098c0     50 00 00 AF 
098c4     80 E5 85 A1 |  if_e	sub	objptr, ##41344
098c8     44 02 90 AD |  if_e	jmp	#LR__0816
098cc                 | ' do 
098cc                 | LR__0811
098cc                 | '   if runptr<>oldrunptr then
098cc     50 00 00 FF 
098d0     74 E5 05 F1 | 	add	objptr, ##41332
098d4     F2 1E 02 FB | 	rdlong	local01, objptr
098d8     08 E4 05 F1 | 	add	objptr, #8
098dc     F2 1C 02 FB | 	rdlong	arg06, objptr
098e0     50 00 00 FF 
098e4     7C E5 85 F1 | 	sub	objptr, ##41340
098e8     0E 1F 0A F2 | 	cmp	local01, arg06 wz
098ec     CC 00 90 AD |  if_e	jmp	#LR__0812
098f0     50 00 00 FF 
098f4     84 E5 05 F1 | 	add	objptr, ##41348
098f8     F2 12 02 F6 | 	mov	arg01, objptr
098fc     10 E4 85 F1 | 	sub	objptr, #16
09900     F2 14 02 FB | 	rdlong	arg02, objptr
09904     18 16 06 F6 | 	mov	arg03, #24
09908     45 00 00 FF 
0990c     B4 E4 85 F1 | 	sub	objptr, ##35508
09910     40 A8 B0 FD | 	call	#_psram_spin2_read1
09914     32 00 00 FF 
09918     80 E5 05 F1 | 	add	objptr, ##25984
0991c     F2 12 02 F6 | 	mov	arg01, objptr
09920     12 00 00 FF 
09924     34 E5 05 F1 | 	add	objptr, ##9524
09928     F2 14 02 FB | 	rdlong	arg02, objptr
0992c     14 00 00 FF 
09930     4C E5 85 F1 | 	sub	objptr, ##10572
09934     F2 1E 02 FB | 	rdlong	local01, objptr
09938     01 1E 66 F0 | 	shl	local01, #1
0993c     0F 15 02 F1 | 	add	arg02, local01
09940     14 00 00 FF 
09944     64 E5 05 F1 | 	add	objptr, ##10596
09948     F2 16 02 FB | 	rdlong	arg03, objptr
0994c     18 E4 85 F1 | 	sub	objptr, #24
09950     F2 1E 02 FB | 	rdlong	local01, objptr
09954     0F 17 82 F1 | 	sub	arg03, local01
09958     45 00 00 FF 
0995c     B4 E4 85 F1 | 	sub	objptr, ##35508
09960     F0 A7 B0 FD | 	call	#_psram_spin2_read1
09964     45 00 00 FF 
09968     CC E4 05 F1 | 	add	objptr, ##35532
0996c     F2 1E 02 FB | 	rdlong	local01, objptr
09970     18 E4 85 F1 | 	sub	objptr, #24
09974     F2 1C 02 FB | 	rdlong	arg06, objptr
09978     0E 1F 82 F1 | 	sub	local01, arg06
0997c     14 00 00 FF 
09980     4C E5 85 F1 | 	sub	objptr, ##10572
09984     F2 1C 02 FB | 	rdlong	arg06, objptr
09988     0E 1F 12 FD | 	qdiv	local01, arg06
0998c     05 00 00 FF 
09990     18 E4 05 F1 | 	add	objptr, ##2584
09994     18 1E 62 FD | 	getqx	local01
09998     03 1E 86 F1 | 	sub	local01, #3
0999c     F2 1E 62 FC | 	wrlong	local01, objptr
099a0     0F 00 00 FF 
099a4     34 E5 05 F1 | 	add	objptr, ##7988
099a8     F2 1E 02 FB | 	rdlong	local01, objptr
099ac     08 E4 05 F1 | 	add	objptr, #8
099b0     F2 1E 62 FC | 	wrlong	local01, objptr
099b4     50 00 00 FF 
099b8     7C E5 85 F1 | 	sub	objptr, ##41340
099bc                 | LR__0812
099bc     50 00 00 FF 
099c0     98 E5 05 F1 | 	add	objptr, ##41368
099c4     F2 1E 02 FB | 	rdlong	local01, objptr
099c8     24 E4 85 F1 | 	sub	objptr, #36
099cc     F2 1E 62 FC | 	wrlong	local01, objptr
099d0     04 E4 05 F1 | 	add	objptr, #4
099d4     F2 12 02 FB | 	rdlong	arg01, objptr
099d8     50 00 00 FF 
099dc     78 E5 85 F1 | 	sub	objptr, ##41336
099e0     98 EB BF FD | 	call	#_execute_line
099e4     50 00 00 FF 
099e8     78 E5 05 F1 | 	add	objptr, ##41336
099ec     F2 FA 61 FC | 	wrlong	result1, objptr
099f0     04 E4 85 F1 | 	sub	objptr, #4
099f4     F2 1E 02 FB | 	rdlong	local01, objptr
099f8     50 00 00 FF 
099fc     74 E5 85 F1 | 	sub	objptr, ##41332
09a00     FF FF 3F FF 
09a04     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09a08     0C 00 90 AD |  if_e	jmp	#LR__0813
09a0c     D4 AA B0 FD | 	call	#_usbnew_spin2_get_key
09a10     06 FB 0D F2 | 	cmp	result1, #262 wz
09a14     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
09a18                 | LR__0813
09a18                 | ' if runheader(5)<>$7FFF_FFFF then 
09a18     50 00 00 FF 
09a1c     98 E5 05 F1 | 	add	objptr, ##41368
09a20     F2 1E 02 FB | 	rdlong	local01, objptr
09a24     50 00 00 FF 
09a28     98 E5 85 F1 | 	sub	objptr, ##41368
09a2c     FF FF 3F FF 
09a30     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09a34     C4 00 90 AD |  if_e	jmp	#LR__0815
09a38                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
09a38     50 00 00 FF 
09a3c     A4 E5 05 F1 | 	add	objptr, ##41380
09a40     F2 1E 02 FB | 	rdlong	local01, objptr
09a44     50 00 00 FF 
09a48     A4 E5 85 F1 | 	sub	objptr, ##41380
09a4c     01 1E 0E F2 | 	cmp	local01, #1 wz
09a50     44 00 90 5D |  if_ne	jmp	#LR__0814
09a54     01 00 00 FF 
09a58     00 EA 05 F1 | 	add	ptr__dat__, ##512
09a5c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
09a60     01 00 00 FF 
09a64     00 EA 85 F1 | 	sub	ptr__dat__, ##512
09a68     07 12 06 F6 | 	mov	arg01, #7
09a6c     56 00 00 FF 
09a70     44 16 06 F6 | 	mov	arg03, ##44100
09a74     0E 18 C6 F9 | 	decod	arg04, #14
09a78     03 00 00 FF 
09a7c     94 1A 06 F6 | 	mov	arg05, ##1684
09a80     01 1C 66 F6 | 	neg	arg06, #1
09a84     0B 00 00 FF 
09a88     C0 E4 05 F1 | 	add	objptr, ##5824
09a8c     7C AD B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09a90     0B 00 00 FF 
09a94     C0 E4 85 F1 | 	sub	objptr, ##5824
09a98                 | LR__0814
09a98                 | '   print "Stopped at line ";runheader(0)
09a98     00 12 06 F6 | 	mov	arg01, #0
09a9c     54 07 B1 FD | 	call	#__system___getiolock_0349
09aa0     FD 12 02 F6 | 	mov	arg01, result1
09aa4     98 B1 B0 FD | 	call	#__system___lockmem
09aa8     20 01 00 FF 
09aac     E3 15 06 F6 | 	mov	arg02, ##@LR__4300
09ab0     00 12 06 F6 | 	mov	arg01, #0
09ab4     00 16 06 F6 | 	mov	arg03, #0
09ab8     78 BE B0 FD | 	call	#__system___basic_print_string
09abc     50 00 00 FF 
09ac0     84 E5 05 F1 | 	add	objptr, ##41348
09ac4     F2 14 02 FB | 	rdlong	arg02, objptr
09ac8     50 00 00 FF 
09acc     84 E5 85 F1 | 	sub	objptr, ##41348
09ad0     00 12 06 F6 | 	mov	arg01, #0
09ad4     00 16 06 F6 | 	mov	arg03, #0
09ad8     0A 18 06 F6 | 	mov	arg04, #10
09adc     D8 BE B0 FD | 	call	#__system___basic_print_unsigned
09ae0     00 12 06 F6 | 	mov	arg01, #0
09ae4     0A 14 06 F6 | 	mov	arg02, #10
09ae8     00 16 06 F6 | 	mov	arg03, #0
09aec     EC BD B0 FD | 	call	#__system___basic_print_char
09af0     00 12 06 F6 | 	mov	arg01, #0
09af4     FC 06 B1 FD | 	call	#__system___getiolock_0349
09af8     FD 00 68 FC | 	wrlong	#0, result1
09afc                 | LR__0815
09afc     50 00 00 FF 
09b00     80 E5 05 F1 | 	add	objptr, ##41344
09b04     F2 00 68 FC | 	wrlong	#0, objptr
09b08     50 00 00 FF 
09b0c     80 E5 85 F1 | 	sub	objptr, ##41344
09b10                 | LR__0816
09b10     A7 F0 03 F6 | 	mov	ptra, fp
09b14     B2 00 A0 FD | 	call	#popregs_
09b18                 | _do_run_ret
09b18     2D 00 64 FD | 	ret
09b1c                 | 
09b1c                 | ' 
09b1c                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09b1c                 | ' 
09b1c                 | ' sub do_list
09b1c                 | _do_list
09b1c     02 4A 05 F6 | 	mov	COUNT_, #2
09b20     A8 00 A0 FD | 	call	#pushregs_
09b24     B8 F0 07 F1 | 	add	ptra, #184
09b28     04 4E 05 F1 | 	add	fp, #4
09b2c     A7 00 68 FC | 	wrlong	#0, fp
09b30     04 4E 05 F1 | 	add	fp, #4
09b34     FF FF BF FF 
09b38     A7 FE 6B FC | 	wrlong	##2147483647, fp
09b3c     08 4E 85 F1 | 	sub	fp, #8
09b40     41 00 00 FF 
09b44     44 E4 05 F1 | 	add	objptr, ##33348
09b48     F2 1E 02 FB | 	rdlong	local01, objptr
09b4c     0F 17 02 F6 | 	mov	arg03, local01
09b50     01 16 66 F0 | 	shl	arg03, #1
09b54     0F 17 02 F1 | 	add	arg03, local01
09b58     02 16 66 F0 | 	shl	arg03, #2
09b5c     03 00 00 FF 
09b60     04 E4 85 F1 | 	sub	objptr, ##1540
09b64     F2 16 02 F1 | 	add	arg03, objptr
09b68     0B 17 02 FB | 	rdlong	arg03, arg03
09b6c     A7 16 62 FC | 	wrlong	arg03, fp
09b70                 | ' 
09b70                 | ' startline=0 : endline=$7FFFFFFF
09b70                 | ' numpar=compiledline(lineptr_e).result.uresult
09b70                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
09b70     01 16 0E F2 | 	cmp	arg03, #1 wz
09b74     3E 00 00 FF 
09b78     40 E4 85 F1 | 	sub	objptr, ##31808
09b7c     3C 00 90 5D |  if_ne	jmp	#LR__0820
09b80     FC EA BF FD | 	call	#_pop
09b84     FF 1E 02 F6 | 	mov	local01, result3
09b88     0C 4E 05 F1 | 	add	fp, #12
09b8c     A7 FA 61 FC | 	wrlong	result1, fp
09b90     04 4E 05 F1 | 	add	fp, #4
09b94     A7 FC 61 FC | 	wrlong	result2, fp
09b98     04 4E 05 F1 | 	add	fp, #4
09b9c     A7 1E 62 FC | 	wrlong	local01, fp
09ba0     08 4E 85 F1 | 	sub	fp, #8
09ba4     A7 12 02 F6 | 	mov	arg01, fp
09ba8     0C 4E 85 F1 | 	sub	fp, #12
09bac     DC 41 B0 FD | 	call	#_converttoint
09bb0     04 4E 05 F1 | 	add	fp, #4
09bb4     A7 FA 61 FC | 	wrlong	result1, fp
09bb8     04 4E 85 F1 | 	sub	fp, #4
09bbc                 | LR__0820
09bbc                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09bbc     A7 16 02 FB | 	rdlong	arg03, fp
09bc0     02 16 0E F2 | 	cmp	arg03, #2 wz
09bc4     7C 00 90 5D |  if_ne	jmp	#LR__0821
09bc8     B4 EA BF FD | 	call	#_pop
09bcc     FF 1E 02 F6 | 	mov	local01, result3
09bd0     0C 4E 05 F1 | 	add	fp, #12
09bd4     A7 FA 61 FC | 	wrlong	result1, fp
09bd8     04 4E 05 F1 | 	add	fp, #4
09bdc     A7 FC 61 FC | 	wrlong	result2, fp
09be0     04 4E 05 F1 | 	add	fp, #4
09be4     A7 1E 62 FC | 	wrlong	local01, fp
09be8     08 4E 85 F1 | 	sub	fp, #8
09bec     A7 12 02 F6 | 	mov	arg01, fp
09bf0     0C 4E 85 F1 | 	sub	fp, #12
09bf4     94 41 B0 FD | 	call	#_converttoint
09bf8     FD 1E 02 F6 | 	mov	local01, result1
09bfc     08 4E 05 F1 | 	add	fp, #8
09c00     A7 1E 62 FC | 	wrlong	local01, fp
09c04     08 4E 85 F1 | 	sub	fp, #8
09c08     74 EA BF FD | 	call	#_pop
09c0c     FF 1E 02 F6 | 	mov	local01, result3
09c10     0C 4E 05 F1 | 	add	fp, #12
09c14     A7 FA 61 FC | 	wrlong	result1, fp
09c18     04 4E 05 F1 | 	add	fp, #4
09c1c     A7 FC 61 FC | 	wrlong	result2, fp
09c20     04 4E 05 F1 | 	add	fp, #4
09c24     A7 1E 62 FC | 	wrlong	local01, fp
09c28     08 4E 85 F1 | 	sub	fp, #8
09c2c     A7 12 02 F6 | 	mov	arg01, fp
09c30     0C 4E 85 F1 | 	sub	fp, #12
09c34     54 41 B0 FD | 	call	#_converttoint
09c38     04 4E 05 F1 | 	add	fp, #4
09c3c     A7 FA 61 FC | 	wrlong	result1, fp
09c40     04 4E 85 F1 | 	sub	fp, #4
09c44                 | LR__0821
09c44                 | ' 
09c44                 | ' 
09c44                 | ' print
09c44     00 12 06 F6 | 	mov	arg01, #0
09c48     A8 05 B1 FD | 	call	#__system___getiolock_0349
09c4c     FD 12 02 F6 | 	mov	arg01, result1
09c50     EC AF B0 FD | 	call	#__system___lockmem
09c54     00 12 06 F6 | 	mov	arg01, #0
09c58     0A 14 06 F6 | 	mov	arg02, #10
09c5c     00 16 06 F6 | 	mov	arg03, #0
09c60     78 BC B0 FD | 	call	#__system___basic_print_char
09c64     00 12 06 F6 | 	mov	arg01, #0
09c68     88 05 B1 FD | 	call	#__system___getiolock_0349
09c6c     FD 00 68 FC | 	wrlong	#0, result1
09c70     41 00 00 FF 
09c74     48 E4 05 F1 | 	add	objptr, ##33352
09c78     F2 20 02 FB | 	rdlong	local02, objptr
09c7c     11 00 00 FF 
09c80     54 E4 05 F1 | 	add	objptr, ##8788
09c84     F2 20 62 FC | 	wrlong	local02, objptr
09c88     52 00 00 FF 
09c8c     9C E4 85 F1 | 	sub	objptr, ##42140
09c90                 | ' do 
09c90                 | LR__0822
09c90     20 4E 05 F1 | 	add	fp, #32
09c94     A7 12 02 F6 | 	mov	arg01, fp
09c98     20 4E 85 F1 | 	sub	fp, #32
09c9c     52 00 00 FF 
09ca0     9C E4 05 F1 | 	add	objptr, ##42140
09ca4     F2 14 02 FB | 	rdlong	arg02, objptr
09ca8     18 16 06 F6 | 	mov	arg03, #24
09cac     46 00 00 FF 
09cb0     DC E5 85 F1 | 	sub	objptr, ##36316
09cb4     9C A4 B0 FD | 	call	#_psram_spin2_read1
09cb8     0B 00 00 FF 
09cbc     C0 E4 85 F1 | 	sub	objptr, ##5824
09cc0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
09cc0                 | '   if header(0)<> $FFFFFFFF then
09cc0     20 4E 05 F1 | 	add	fp, #32
09cc4     A7 20 02 FB | 	rdlong	local02, fp
09cc8     20 4E 85 F1 | 	sub	fp, #32
09ccc     FF FF 7F FF 
09cd0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09cd4     A8 00 90 AD |  if_e	jmp	#LR__0824
09cd8     38 4E 05 F1 | 	add	fp, #56
09cdc     3F 16 06 F6 | 	mov	arg03, #63
09ce0     28 16 62 FD | 	setq	arg03
09ce4     A7 00 68 FC | 	wrlong	#0, fp
09ce8     A7 12 02 F6 | 	mov	arg01, fp
09cec     10 4E 85 F1 | 	sub	fp, #16
09cf0     A7 14 02 FB | 	rdlong	arg02, fp
09cf4     04 4E 05 F1 | 	add	fp, #4
09cf8     A7 16 02 FB | 	rdlong	arg03, fp
09cfc     2C 4E 85 F1 | 	sub	fp, #44
09d00     0B 00 00 FF 
09d04     C0 E4 05 F1 | 	add	objptr, ##5824
09d08     48 A4 B0 FD | 	call	#_psram_spin2_read1
09d0c     0B 00 00 FF 
09d10     C0 E4 85 F1 | 	sub	objptr, ##5824
09d14                 | '     longfill(linebuf,0,64)
09d14                 | '     psram.read1(varptr(linebuf),header(2),header(3))
09d14                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
09d14     20 4E 05 F1 | 	add	fp, #32
09d18     A7 20 02 FB | 	rdlong	local02, fp
09d1c     1C 4E 85 F1 | 	sub	fp, #28
09d20     A7 1E 02 FB | 	rdlong	local01, fp
09d24     04 4E 85 F1 | 	sub	fp, #4
09d28     0F 21 52 F2 | 	cmps	local02, local01 wc
09d2c     30 00 90 CD |  if_b	jmp	#LR__0823
09d30     20 4E 05 F1 | 	add	fp, #32
09d34     A7 20 02 FB | 	rdlong	local02, fp
09d38     18 4E 85 F1 | 	sub	fp, #24
09d3c     A7 16 02 FB | 	rdlong	arg03, fp
09d40     08 4E 85 F1 | 	sub	fp, #8
09d44     0B 21 5A F2 | 	cmps	local02, arg03 wcz
09d48     14 00 90 1D |  if_a	jmp	#LR__0823
09d4c     38 4E 05 F1 | 	add	fp, #56
09d50     A7 12 02 F6 | 	mov	arg01, fp
09d54     38 4E 85 F1 | 	sub	fp, #56
09d58                 | ' 
09d58                 | ' write(text)
09d58     C0 9E B0 FD | 	call	#_hg010b_spin2_write
09d5c                 | ' crlf
09d5c     1C A0 B0 FD | 	call	#_hg010b_spin2_crlf
09d60                 | LR__0823
09d60     34 4E 05 F1 | 	add	fp, #52
09d64     A7 20 02 FB | 	rdlong	local02, fp
09d68     34 4E 85 F1 | 	sub	fp, #52
09d6c     52 00 00 FF 
09d70     9C E4 05 F1 | 	add	objptr, ##42140
09d74     F2 20 62 FC | 	wrlong	local02, objptr
09d78     52 00 00 FF 
09d7c     9C E4 85 F1 | 	sub	objptr, ##42140
09d80                 | LR__0824
09d80     34 4E 05 F1 | 	add	fp, #52
09d84     A7 20 02 FB | 	rdlong	local02, fp
09d88     34 4E 85 F1 | 	sub	fp, #52
09d8c     FF FF 3F FF 
09d90     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09d94     20 4E 05 51 |  if_ne	add	fp, #32
09d98     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09d9c     20 4E 85 51 |  if_ne	sub	fp, #32
09da0     FF FF 7F 5F 
09da4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09da8     E4 FE 9F 5D |  if_ne	jmp	#LR__0822
09dac     A7 F0 03 F6 | 	mov	ptra, fp
09db0     B2 00 A0 FD | 	call	#popregs_
09db4                 | _do_list_ret
09db4     2D 00 64 FD | 	ret
09db8                 | 
09db8                 | ' 
09db8                 | ' '---------------- Clear the program
09db8                 | ' 
09db8                 | ' sub do_new
09db8                 | _do_new
09db8     03 4A 05 F6 | 	mov	COUNT_, #3
09dbc     A8 00 A0 FD | 	call	#pushregs_
09dc0     00 12 06 F6 | 	mov	arg01, #0
09dc4     01 14 66 F6 | 	neg	arg02, #1
09dc8     01 16 06 F6 | 	mov	arg03, #1
09dcc     00 18 06 F6 | 	mov	arg04, #0
09dd0     0B 00 00 FF 
09dd4     C0 E4 05 F1 | 	add	objptr, ##5824
09dd8                 | '     return fill(addr, pattern, count, listPtr, 4)
09dd8     04 1A 06 F6 | 	mov	arg05, #4
09ddc     AC A4 B0 FD | 	call	#_psram_spin2_fill
09de0     20 00 00 FF 
09de4     0C E5 05 F1 | 	add	objptr, ##16652
09de8     F2 00 68 FC | 	wrlong	#0, objptr
09dec     15 00 00 FF 
09df0     7C E4 05 F1 | 	add	objptr, ##10876
09df4     F2 00 68 FC | 	wrlong	#0, objptr
09df8     0F 00 00 FF 
09dfc     2C E5 05 F1 | 	add	objptr, ##7980
09e00     F2 00 68 FC | 	wrlong	#0, objptr
09e04     04 E4 05 F1 | 	add	objptr, #4
09e08     F2 00 68 FC | 	wrlong	#0, objptr
09e0c     16 00 00 FF 
09e10     5C E5 85 F1 | 	sub	objptr, ##11612
09e14     F2 00 68 FC | 	wrlong	#0, objptr
09e18     07 00 00 FF 
09e1c     24 E4 05 F1 | 	add	objptr, ##3620
09e20     F2 00 68 FC | 	wrlong	#0, objptr
09e24     07 00 00 FF 
09e28     20 E4 85 F1 | 	sub	objptr, ##3616
09e2c     F2 00 68 FC | 	wrlong	#0, objptr
09e30     0F 00 00 FF 
09e34     34 E4 05 F1 | 	add	objptr, ##7732
09e38     F2 00 68 FC | 	wrlong	#0, objptr
09e3c     08 00 00 FF 
09e40     08 E4 85 F1 | 	sub	objptr, ##4104
09e44     F2 00 68 FC | 	wrlong	#0, objptr
09e48     04 E4 05 F1 | 	add	objptr, #4
09e4c     FF FF FF FF 
09e50     F2 FE 6B FC | 	wrlong	##-1, objptr
09e54     0F 00 00 FF 
09e58     4C E5 05 F1 | 	add	objptr, ##8012
09e5c     F2 00 68 FC | 	wrlong	#0, objptr
09e60                 | ' 
09e60                 | ' pslpoke(0,$FFFFFFFF)
09e60                 | ' varnum=0
09e60                 | ' programstart=0 :runptr=0 : runptr2=0
09e60                 | ' stackpointer=0
09e60                 | ' lineptr=0 
09e60                 | ' programptr=0 : stringptr=0
09e60                 | ' lastline=0 : lastlineptr=-1 :fortop=0
09e60                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
09e60     00 1E 06 F6 | 	mov	local01, #0
09e64     07 00 00 FF 
09e68     40 E5 85 F1 | 	sub	objptr, ##3904
09e6c     97 16 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
09e70                 | LR__0830
09e70     0F 21 02 F6 | 	mov	local02, local01
09e74     02 20 66 F0 | 	shl	local02, #2
09e78     0F 21 02 F1 | 	add	local02, local01
09e7c     02 20 66 F0 | 	shl	local02, #2
09e80     F2 20 02 F1 | 	add	local02, objptr
09e84     08 20 06 F1 | 	add	local02, #8
09e88     FF FF FF FF 
09e8c     10 FF 6B FC | 	wrlong	##-1, local02
09e90     01 1E 06 F1 | 	add	local01, #1
09e94     81 1E 56 F2 | 	cmps	local01, #129 wc
09e98     D4 FF 9F CD |  if_b	jmp	#LR__0830
09e9c                 | LR__0831
09e9c     49 00 00 FF 
09ea0     5C E4 85 F1 | 	sub	objptr, ##37468
09ea4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
09ea4     00 1E 06 F6 | 	mov	local01, #0
09ea8                 | LR__0832
09ea8     0F 21 02 F6 | 	mov	local02, local01
09eac     02 20 66 F0 | 	shl	local02, #2
09eb0     51 00 00 FF 
09eb4     F8 E5 05 F1 | 	add	objptr, ##41976
09eb8     F2 20 02 F1 | 	add	local02, objptr
09ebc     10 21 0A FB | 	rdlong	local02, local02 wz
09ec0     51 00 00 FF 
09ec4     F8 E5 85 F1 | 	sub	objptr, ##41976
09ec8     34 00 90 AD |  if_e	jmp	#LR__0833
09ecc     0F 13 02 F6 | 	mov	arg01, local01
09ed0     00 14 06 F6 | 	mov	arg02, #0
09ed4     00 16 06 F6 | 	mov	arg03, #0
09ed8     C0 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
09edc     0F 21 02 F6 | 	mov	local02, local01
09ee0     02 20 66 F0 | 	shl	local02, #2
09ee4     51 00 00 FF 
09ee8     F8 E5 05 F1 | 	add	objptr, ##41976
09eec     F2 20 02 F1 | 	add	local02, objptr
09ef0     10 13 02 FB | 	rdlong	arg01, local02
09ef4     51 00 00 FF 
09ef8     F8 E5 85 F1 | 	sub	objptr, ##41976
09efc     E4 E8 B0 FD | 	call	#__system___gc_free
09f00                 | LR__0833
09f00     F2 22 02 FB | 	rdlong	local03, objptr
09f04     52 00 00 FF 
09f08     3C E4 05 F1 | 	add	objptr, ##42044
09f0c     F2 22 62 FC | 	wrlong	local03, objptr
09f10     52 00 00 FF 
09f14     3C E4 85 F1 | 	sub	objptr, ##42044
09f18     11 12 06 F6 | 	mov	arg01, #17
09f1c     08 14 06 F6 | 	mov	arg02, #8
09f20     10 16 06 F6 | 	mov	arg03, #16
09f24     74 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
09f28     01 1E 06 F1 | 	add	local01, #1
09f2c     10 1E 56 F2 | 	cmps	local01, #16 wc
09f30     74 FF 9F CD |  if_b	jmp	#LR__0832
09f34     A7 F0 03 F6 | 	mov	ptra, fp
09f38     B2 00 A0 FD | 	call	#popregs_
09f3c                 | _do_new_ret
09f3c     2D 00 64 FD | 	ret
09f40                 | 
09f40                 | ' 
09f40                 | ' '----------------------- goto
09f40                 | ' sub do_fast_goto
09f40                 | _do_fast_goto
09f40     02 4A 05 F6 | 	mov	COUNT_, #2
09f44     A8 00 A0 FD | 	call	#pushregs_
09f48                 | _do_fast_goto_enter
09f48     41 00 00 FF 
09f4c     44 E4 05 F1 | 	add	objptr, ##33348
09f50     F2 12 02 FB | 	rdlong	arg01, objptr
09f54     09 1F 02 F6 | 	mov	local01, arg01
09f58     01 1E 66 F0 | 	shl	local01, #1
09f5c     09 1F 02 F1 | 	add	local01, arg01
09f60     02 1E 66 F0 | 	shl	local01, #2
09f64     03 00 00 FF 
09f68     04 E4 85 F1 | 	sub	objptr, ##1540
09f6c     F2 1E 02 F1 | 	add	local01, objptr
09f70     0F 21 02 FB | 	rdlong	local02, local01
09f74     10 13 02 F6 | 	mov	arg01, local02
09f78     3E 00 00 FF 
09f7c     40 E4 85 F1 | 	sub	objptr, ##31808
09f80     84 79 B0 FD | 	call	#_pslpeek
09f84     FD 12 02 F6 | 	mov	arg01, result1
09f88                 | ' 
09f88                 | ' testptr=compiledline(lineptr_e).result.uresult
09f88                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
09f88                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
09f88     41 00 00 FF 
09f8c     44 E4 05 F1 | 	add	objptr, ##33348
09f90     F2 FA 01 FB | 	rdlong	result1, objptr
09f94     FD 1E 02 F6 | 	mov	local01, result1
09f98     01 1E 66 F0 | 	shl	local01, #1
09f9c     FD 1E 02 F1 | 	add	local01, result1
09fa0     02 1E 66 F0 | 	shl	local01, #2
09fa4     03 00 00 FF 
09fa8     04 E4 85 F1 | 	sub	objptr, ##1540
09fac     F2 1E 02 F1 | 	add	local01, objptr
09fb0     04 1E 06 F1 | 	add	local01, #4
09fb4     0F 1F 02 FB | 	rdlong	local01, local01
09fb8     0F 13 0A F2 | 	cmp	arg01, local01 wz
09fbc     3E 00 00 FF 
09fc0     40 E4 85 F1 | 	sub	objptr, ##31808
09fc4     58 00 90 5D |  if_ne	jmp	#LR__0840
09fc8     50 00 00 FF 
09fcc     74 E5 05 F1 | 	add	objptr, ##41332
09fd0     F2 20 62 FC | 	wrlong	local02, objptr
09fd4     0F 00 00 FF 
09fd8     34 E5 85 F1 | 	sub	objptr, ##7988
09fdc     F2 20 02 FB | 	rdlong	local02, objptr
09fe0     01 20 86 F1 | 	sub	local02, #1
09fe4     04 E4 05 F1 | 	add	objptr, #4
09fe8     F2 20 62 FC | 	wrlong	local02, objptr
09fec                 | '   runptr=testptr
09fec                 | '   lineptr_e=lineptr-1
09fec                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
09fec     0F 00 00 FF 
09ff0     54 E5 05 F1 | 	add	objptr, ##8020
09ff4     F2 20 02 FB | 	rdlong	local02, objptr
09ff8     50 00 00 FF 
09ffc     98 E5 85 F1 | 	sub	objptr, ##41368
0a000     FF FF 3F FF 
0a004     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a008     50 00 00 AF 
0a00c     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a010     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a014     50 00 00 AF 
0a018     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a01c     04 00 90 FD | 	jmp	#LR__0841
0a020                 | LR__0840
0a020     0C 00 B0 FD | 	call	#_do_find_goto
0a024                 | LR__0841
0a024     A7 F0 03 F6 | 	mov	ptra, fp
0a028     B2 00 A0 FD | 	call	#popregs_
0a02c                 | _do_fast_goto_ret
0a02c     2D 00 64 FD | 	ret
0a030                 | 
0a030                 | ' 
0a030                 | ' 
0a030                 | ' 
0a030                 | ' 
0a030                 | ' sub do_find_goto
0a030                 | _do_find_goto
0a030     03 4A 05 F6 | 	mov	COUNT_, #3
0a034     A8 00 A0 FD | 	call	#pushregs_
0a038     24 F0 07 F1 | 	add	ptra, #36
0a03c                 | _do_find_goto_enter
0a03c     41 00 00 FF 
0a040     44 E4 05 F1 | 	add	objptr, ##33348
0a044     F2 1E 02 FB | 	rdlong	local01, objptr
0a048     0F 21 02 F6 | 	mov	local02, local01
0a04c     01 20 66 F0 | 	shl	local02, #1
0a050     0F 21 02 F1 | 	add	local02, local01
0a054     02 20 66 F0 | 	shl	local02, #2
0a058     03 00 00 FF 
0a05c     04 E4 85 F1 | 	sub	objptr, ##1540
0a060     F2 20 02 F1 | 	add	local02, objptr
0a064     04 20 06 F1 | 	add	local02, #4
0a068     10 21 02 FB | 	rdlong	local02, local02
0a06c     A7 20 62 FC | 	wrlong	local02, fp
0a070     03 00 00 FF 
0a074     08 E4 05 F1 | 	add	objptr, ##1544
0a078     F2 22 02 FB | 	rdlong	local03, objptr
0a07c     41 00 00 FF 
0a080     48 E4 85 F1 | 	sub	objptr, ##33352
0a084     04 4E 05 F1 | 	add	fp, #4
0a088     A7 22 62 FC | 	wrlong	local03, fp
0a08c     04 4E 85 F1 | 	sub	fp, #4
0a090                 | ' 
0a090                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a090                 | '  ' print "find goto"                                                                     'print gotoline 
0a090                 | ' gotoptr=programstart
0a090                 | ' do
0a090                 | LR__0850
0a090     0C 4E 05 F1 | 	add	fp, #12
0a094     A7 12 02 F6 | 	mov	arg01, fp
0a098     08 4E 85 F1 | 	sub	fp, #8
0a09c     A7 14 02 FB | 	rdlong	arg02, fp
0a0a0     04 4E 85 F1 | 	sub	fp, #4
0a0a4     18 16 06 F6 | 	mov	arg03, #24
0a0a8     0B 00 00 FF 
0a0ac     C0 E4 05 F1 | 	add	objptr, ##5824
0a0b0     A0 A0 B0 FD | 	call	#_psram_spin2_read1
0a0b4     0B 00 00 FF 
0a0b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a0bc                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a0bc                 | '   if gotoheader(0)<>$FFFFFFFF then
0a0bc     0C 4E 05 F1 | 	add	fp, #12
0a0c0     A7 22 02 FB | 	rdlong	local03, fp
0a0c4     0C 4E 85 F1 | 	sub	fp, #12
0a0c8     FF FF 7F FF 
0a0cc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a0d0     24 00 90 AD |  if_e	jmp	#LR__0851
0a0d4     04 4E 05 F1 | 	add	fp, #4
0a0d8     A7 22 02 FB | 	rdlong	local03, fp
0a0dc     04 4E 05 F1 | 	add	fp, #4
0a0e0     A7 22 62 FC | 	wrlong	local03, fp
0a0e4     18 4E 05 F1 | 	add	fp, #24
0a0e8     A7 22 02 FB | 	rdlong	local03, fp
0a0ec     1C 4E 85 F1 | 	sub	fp, #28
0a0f0     A7 22 62 FC | 	wrlong	local03, fp
0a0f4     04 4E 85 F1 | 	sub	fp, #4
0a0f8                 | LR__0851
0a0f8     20 4E 05 F1 | 	add	fp, #32
0a0fc     A7 22 02 FB | 	rdlong	local03, fp
0a100     20 4E 85 F1 | 	sub	fp, #32
0a104     FF FF 3F FF 
0a108     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a10c     0C 4E 05 51 |  if_ne	add	fp, #12
0a110     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a114     0C 4E 85 51 |  if_ne	sub	fp, #12
0a118     FF FF 7F 5F 
0a11c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a120     18 00 90 AD |  if_e	jmp	#LR__0852
0a124     0C 4E 05 F1 | 	add	fp, #12
0a128     A7 22 02 FB | 	rdlong	local03, fp
0a12c     0C 4E 85 F1 | 	sub	fp, #12
0a130     A7 20 02 FB | 	rdlong	local02, fp
0a134     10 23 0A F2 | 	cmp	local03, local02 wz
0a138     54 FF 9F 5D |  if_ne	jmp	#LR__0850
0a13c                 | LR__0852
0a13c                 | ' 
0a13c                 | ' if gotoheader(0)=gotoline then
0a13c     0C 4E 05 F1 | 	add	fp, #12
0a140     A7 22 02 FB | 	rdlong	local03, fp
0a144     0C 4E 85 F1 | 	sub	fp, #12
0a148     A7 1E 02 FB | 	rdlong	local01, fp
0a14c     0F 23 0A F2 | 	cmp	local03, local01 wz
0a150     D8 00 90 5D |  if_ne	jmp	#LR__0853
0a154     41 00 00 FF 
0a158     44 E4 05 F1 | 	add	objptr, ##33348
0a15c     F2 1E 02 FB | 	rdlong	local01, objptr
0a160     0F 21 02 F6 | 	mov	local02, local01
0a164     01 20 66 F0 | 	shl	local02, #1
0a168     0F 21 02 F1 | 	add	local02, local01
0a16c     02 20 66 F0 | 	shl	local02, #2
0a170     03 00 00 FF 
0a174     04 E4 85 F1 | 	sub	objptr, ##1540
0a178     F2 20 02 F1 | 	add	local02, objptr
0a17c     08 4E 05 F1 | 	add	fp, #8
0a180     A7 22 02 FB | 	rdlong	local03, fp
0a184     10 23 62 FC | 	wrlong	local03, local02
0a188     03 00 00 FF 
0a18c     04 E4 05 F1 | 	add	objptr, ##1540
0a190     F2 1E 02 FB | 	rdlong	local01, objptr
0a194     0F 21 02 F6 | 	mov	local02, local01
0a198     01 20 66 F0 | 	shl	local02, #1
0a19c     0F 21 02 F1 | 	add	local02, local01
0a1a0     02 20 66 F0 | 	shl	local02, #2
0a1a4     03 00 00 FF 
0a1a8     04 E4 85 F1 | 	sub	objptr, ##1540
0a1ac     F2 20 02 F1 | 	add	local02, objptr
0a1b0     08 20 06 F1 | 	add	local02, #8
0a1b4     10 9D 68 FC | 	wrlong	#78, local02
0a1b8     03 00 00 FF 
0a1bc     04 E4 05 F1 | 	add	objptr, ##1540
0a1c0     F2 20 02 FB | 	rdlong	local02, objptr
0a1c4     10 13 02 F6 | 	mov	arg01, local02
0a1c8     01 12 66 F0 | 	shl	arg01, #1
0a1cc     10 13 02 F1 | 	add	arg01, local02
0a1d0     02 12 66 F0 | 	shl	arg01, #2
0a1d4     03 00 00 FF 
0a1d8     04 E4 85 F1 | 	sub	objptr, ##1540
0a1dc     F2 12 02 F1 | 	add	arg01, objptr
0a1e0     12 00 00 FF 
0a1e4     3C E5 05 F1 | 	add	objptr, ##9532
0a1e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a1ec     02 22 06 F6 | 	mov	local03, #2
0a1f0     10 23 02 F1 | 	add	local03, local02
0a1f4     14 00 00 FF 
0a1f8     54 E5 85 F1 | 	sub	objptr, ##10580
0a1fc     F2 16 02 FB | 	rdlong	arg03, objptr
0a200     0B 23 02 FD | 	qmul	local03, arg03
0a204     08 4E 85 F1 | 	sub	fp, #8
0a208     30 00 00 FF 
0a20c     68 E5 85 F1 | 	sub	objptr, ##24936
0a210     18 22 62 FD | 	getqx	local03
0a214     11 15 02 F1 | 	add	arg02, local03
0a218     D4 9F B0 FD | 	call	#_psram_spin2_write
0a21c     0B 00 00 FF 
0a220     C0 E4 85 F1 | 	sub	objptr, ##5824
0a224     18 FD BF FD | 	call	#_do_fast_goto
0a228     08 00 90 FD | 	jmp	#LR__0854
0a22c                 | LR__0853
0a22c     26 12 06 F6 | 	mov	arg01, #38
0a230     18 75 B0 FD | 	call	#_printerror
0a234                 | LR__0854
0a234     A7 F0 03 F6 | 	mov	ptra, fp
0a238     B2 00 A0 FD | 	call	#popregs_
0a23c                 | _do_find_goto_ret
0a23c     2D 00 64 FD | 	ret
0a240                 | 
0a240                 | ' 
0a240                 | ' sub do_slow_goto
0a240                 | _do_slow_goto
0a240                 | _do_slow_goto_ret
0a240     2D 00 64 FD | 	ret
0a244                 | 
0a244                 | ' 
0a244                 | ' '----------------------- Error processing
0a244                 | ' 
0a244                 | ' sub do_error
0a244                 | _do_error
0a244     01 4A 05 F6 | 	mov	COUNT_, #1
0a248     A8 00 A0 FD | 	call	#pushregs_
0a24c     41 00 00 FF 
0a250     44 E4 05 F1 | 	add	objptr, ##33348
0a254     F2 18 02 FB | 	rdlong	arg04, objptr
0a258     0C 17 02 F6 | 	mov	arg03, arg04
0a25c     01 16 66 F0 | 	shl	arg03, #1
0a260     0C 17 02 F1 | 	add	arg03, arg04
0a264     02 16 66 F0 | 	shl	arg03, #2
0a268     03 00 00 FF 
0a26c     04 E4 85 F1 | 	sub	objptr, ##1540
0a270     F2 16 02 F1 | 	add	arg03, objptr
0a274     0B 1F 02 FB | 	rdlong	local01, arg03
0a278                 | ' r=compiledline(lineptr_e).result.uresult
0a278                 | ' print "Error ";r;": ";errors$(r)
0a278     00 12 06 F6 | 	mov	arg01, #0
0a27c     3E 00 00 FF 
0a280     40 E4 85 F1 | 	sub	objptr, ##31808
0a284     6C FF B0 FD | 	call	#__system___getiolock_0349
0a288     FD 12 02 F6 | 	mov	arg01, result1
0a28c     B0 A9 B0 FD | 	call	#__system___lockmem
0a290     20 01 00 FF 
0a294     F4 15 06 F6 | 	mov	arg02, ##@LR__4301
0a298     00 12 06 F6 | 	mov	arg01, #0
0a29c     00 16 06 F6 | 	mov	arg03, #0
0a2a0     90 B6 B0 FD | 	call	#__system___basic_print_string
0a2a4     00 12 06 F6 | 	mov	arg01, #0
0a2a8     0F 15 02 F6 | 	mov	arg02, local01
0a2ac     00 16 06 F6 | 	mov	arg03, #0
0a2b0     0A 18 06 F6 | 	mov	arg04, #10
0a2b4     00 B7 B0 FD | 	call	#__system___basic_print_unsigned
0a2b8     20 01 00 FF 
0a2bc     FB 15 06 F6 | 	mov	arg02, ##@LR__4302
0a2c0     00 12 06 F6 | 	mov	arg01, #0
0a2c4     00 16 06 F6 | 	mov	arg03, #0
0a2c8     68 B6 B0 FD | 	call	#__system___basic_print_string
0a2cc     02 1E 66 F0 | 	shl	local01, #2
0a2d0     3C 00 00 FF 
0a2d4     40 E4 05 F1 | 	add	objptr, ##30784
0a2d8     F2 1E 02 F1 | 	add	local01, objptr
0a2dc     0F 15 02 FB | 	rdlong	arg02, local01
0a2e0     00 12 06 F6 | 	mov	arg01, #0
0a2e4     00 16 06 F6 | 	mov	arg03, #0
0a2e8     3C 00 00 FF 
0a2ec     40 E4 85 F1 | 	sub	objptr, ##30784
0a2f0     40 B6 B0 FD | 	call	#__system___basic_print_string
0a2f4     00 12 06 F6 | 	mov	arg01, #0
0a2f8     0A 14 06 F6 | 	mov	arg02, #10
0a2fc     00 16 06 F6 | 	mov	arg03, #0
0a300     D8 B5 B0 FD | 	call	#__system___basic_print_char
0a304     00 12 06 F6 | 	mov	arg01, #0
0a308     E8 FE B0 FD | 	call	#__system___getiolock_0349
0a30c     FD 00 68 FC | 	wrlong	#0, result1
0a310     A7 F0 03 F6 | 	mov	ptra, fp
0a314     B2 00 A0 FD | 	call	#popregs_
0a318                 | _do_error_ret
0a318     2D 00 64 FD | 	ret
0a31c                 | 
0a31c                 | ' 
0a31c                 | ' 
0a31c                 | ' '------------------ Assigning to a variable  
0a31c                 | ' 
0a31c                 | ' 
0a31c                 | ' sub do_assign
0a31c                 | _do_assign
0a31c     04 4A 05 F6 | 	mov	COUNT_, #4
0a320     A8 00 A0 FD | 	call	#pushregs_
0a324     44 F0 07 F1 | 	add	ptra, #68
0a328     41 00 00 FF 
0a32c     44 E4 05 F1 | 	add	objptr, ##33348
0a330     F2 12 02 FB | 	rdlong	arg01, objptr
0a334     09 17 02 F6 | 	mov	arg03, arg01
0a338     01 16 66 F0 | 	shl	arg03, #1
0a33c     09 17 02 F1 | 	add	arg03, arg01
0a340     02 16 66 F0 | 	shl	arg03, #2
0a344     03 00 00 FF 
0a348     04 E4 85 F1 | 	sub	objptr, ##1540
0a34c     F2 16 02 F1 | 	add	arg03, objptr
0a350     0B 17 02 FB | 	rdlong	arg03, arg03
0a354     18 4E 05 F1 | 	add	fp, #24
0a358     A7 16 62 FC | 	wrlong	arg03, fp
0a35c                 | ' 
0a35c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a35c                 | ' 
0a35c                 | ' if variables(varnum).vartype<array_no_type then t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type : return
0a35c     18 4E 85 F1 | 	sub	fp, #24
0a360     04 16 66 F0 | 	shl	arg03, #4
0a364     32 00 00 FF 
0a368     74 E4 85 F1 | 	sub	objptr, ##25716
0a36c     F2 16 02 F1 | 	add	arg03, objptr
0a370     0C 16 06 F1 | 	add	arg03, #12
0a374     0B 13 02 FB | 	rdlong	arg01, arg03
0a378     00 13 16 F2 | 	cmp	arg01, #256 wc
0a37c     0B 00 00 FF 
0a380     CC E5 85 F1 | 	sub	objptr, ##6092
0a384     88 00 90 3D |  if_ae	jmp	#LR__0860
0a388     F4 E2 BF FD | 	call	#_pop
0a38c     A7 FA 61 FC | 	wrlong	result1, fp
0a390     04 4E 05 F1 | 	add	fp, #4
0a394     A7 FC 61 FC | 	wrlong	result2, fp
0a398     04 4E 05 F1 | 	add	fp, #4
0a39c     A7 FE 61 FC | 	wrlong	result3, fp
0a3a0     08 4E 85 F1 | 	sub	fp, #8
0a3a4     A7 12 02 FB | 	rdlong	arg01, fp
0a3a8     04 4E 05 F1 | 	add	fp, #4
0a3ac     A7 16 02 FB | 	rdlong	arg03, fp
0a3b0     14 4E 05 F1 | 	add	fp, #20
0a3b4     A7 14 02 FB | 	rdlong	arg02, fp
0a3b8     04 14 66 F0 | 	shl	arg02, #4
0a3bc     0B 00 00 FF 
0a3c0     CC E5 05 F1 | 	add	objptr, ##6092
0a3c4     F2 14 02 F1 | 	add	arg02, objptr
0a3c8     04 14 06 F1 | 	add	arg02, #4
0a3cc     0A 13 62 FC | 	wrlong	arg01, arg02
0a3d0     A7 12 02 FB | 	rdlong	arg01, fp
0a3d4     04 12 66 F0 | 	shl	arg01, #4
0a3d8     F2 12 02 F1 | 	add	arg01, objptr
0a3dc     08 12 06 F1 | 	add	arg01, #8
0a3e0     09 17 62 FC | 	wrlong	arg03, arg01
0a3e4     A7 12 02 FB | 	rdlong	arg01, fp
0a3e8     04 12 66 F0 | 	shl	arg01, #4
0a3ec     F2 12 02 F1 | 	add	arg01, objptr
0a3f0     10 4E 85 F1 | 	sub	fp, #16
0a3f4     A7 16 02 FB | 	rdlong	arg03, fp
0a3f8     08 4E 85 F1 | 	sub	fp, #8
0a3fc     0C 12 06 F1 | 	add	arg01, #12
0a400     09 17 62 FC | 	wrlong	arg03, arg01
0a404     0B 00 00 FF 
0a408     CC E5 85 F1 | 	sub	objptr, ##6092
0a40c     28 05 90 FD | 	jmp	#LR__0881
0a410                 | LR__0860
0a410                 | ' 
0a410                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a410     1C 4E 05 F1 | 	add	fp, #28
0a414     A7 00 68 FC | 	wrlong	#0, fp
0a418     97 16 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a41c                 | LR__0861
0a41c     A7 12 02 FB | 	rdlong	arg01, fp
0a420     02 12 66 F0 | 	shl	arg01, #2
0a424     18 4E 05 F1 | 	add	fp, #24
0a428     A7 12 02 F1 | 	add	arg01, fp
0a42c     09 01 68 FC | 	wrlong	#0, arg01
0a430     18 4E 85 F1 | 	sub	fp, #24
0a434     A7 12 02 FB | 	rdlong	arg01, fp
0a438     01 12 06 F1 | 	add	arg01, #1
0a43c     A7 12 62 FC | 	wrlong	arg01, fp
0a440     03 12 16 F2 | 	cmp	arg01, #3 wc
0a444     D4 FF 9F CD |  if_b	jmp	#LR__0861
0a448                 | LR__0862
0a448     41 00 00 FF 
0a44c     44 E4 05 F1 | 	add	objptr, ##33348
0a450     F2 12 02 FB | 	rdlong	arg01, objptr
0a454     09 15 02 F6 | 	mov	arg02, arg01
0a458     01 14 66 F0 | 	shl	arg02, #1
0a45c     09 15 02 F1 | 	add	arg02, arg01
0a460     02 14 66 F0 | 	shl	arg02, #2
0a464     03 00 00 FF 
0a468     04 E4 85 F1 | 	sub	objptr, ##1540
0a46c     F2 14 02 F1 | 	add	arg02, objptr
0a470     04 14 06 F1 | 	add	arg02, #4
0a474     0A 13 02 FB | 	rdlong	arg01, arg02
0a478     04 4E 05 F1 | 	add	fp, #4
0a47c     A7 12 62 FC | 	wrlong	arg01, fp
0a480     20 4E 85 F1 | 	sub	fp, #32
0a484     3E 00 00 FF 
0a488     40 E4 85 F1 | 	sub	objptr, ##31808
0a48c     F0 E1 BF FD | 	call	#_pop
0a490     FF 1E 02 F6 | 	mov	local01, result3
0a494     A7 FA 61 FC | 	wrlong	result1, fp
0a498     04 4E 05 F1 | 	add	fp, #4
0a49c     A7 FC 61 FC | 	wrlong	result2, fp
0a4a0     04 4E 05 F1 | 	add	fp, #4
0a4a4     A7 1E 62 FC | 	wrlong	local01, fp
0a4a8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0a4a8                 | ' t1=pop() ' var value
0a4a8                 | ' if numpar>0 then
0a4a8     18 4E 05 F1 | 	add	fp, #24
0a4ac     A7 20 02 FB | 	rdlong	local02, fp
0a4b0     20 4E 85 F1 | 	sub	fp, #32
0a4b4     01 20 16 F2 | 	cmp	local02, #1 wc
0a4b8     70 00 90 CD |  if_b	jmp	#LR__0865
0a4bc                 | '   for i=numpar to 1 step -1
0a4bc     20 4E 05 F1 | 	add	fp, #32
0a4c0     A7 22 0A FB | 	rdlong	local03, fp wz
0a4c4     04 4E 85 F1 | 	sub	fp, #4
0a4c8     A7 22 62 FC | 	wrlong	local03, fp
0a4cc     1C 4E 85 F1 | 	sub	fp, #28
0a4d0     58 00 90 AD |  if_e	jmp	#LR__0864
0a4d4                 | LR__0863
0a4d4     A8 E1 BF FD | 	call	#_pop
0a4d8     0C 4E 05 F1 | 	add	fp, #12
0a4dc     A7 FA 61 FC | 	wrlong	result1, fp
0a4e0     04 4E 05 F1 | 	add	fp, #4
0a4e4     A7 FC 61 FC | 	wrlong	result2, fp
0a4e8     04 4E 05 F1 | 	add	fp, #4
0a4ec     A7 FE 61 FC | 	wrlong	result3, fp
0a4f0     08 4E 05 F1 | 	add	fp, #8
0a4f4     A7 1E 02 FB | 	rdlong	local01, fp
0a4f8     01 1E 86 F1 | 	sub	local01, #1
0a4fc     02 1E 66 F0 | 	shl	local01, #2
0a500     18 4E 05 F1 | 	add	fp, #24
0a504     A7 1E 02 F1 | 	add	local01, fp
0a508     28 4E 85 F1 | 	sub	fp, #40
0a50c     A7 22 02 FB | 	rdlong	local03, fp
0a510     0F 23 62 FC | 	wrlong	local03, local01
0a514     10 4E 05 F1 | 	add	fp, #16
0a518     A7 22 02 FB | 	rdlong	local03, fp
0a51c     01 22 8E F1 | 	sub	local03, #1 wz
0a520     A7 22 62 FC | 	wrlong	local03, fp
0a524     1C 4E 85 F1 | 	sub	fp, #28
0a528     A8 FF 9F 5D |  if_ne	jmp	#LR__0863
0a52c                 | LR__0864
0a52c                 | LR__0865
0a52c     18 4E 05 F1 | 	add	fp, #24
0a530     A7 20 02 FB | 	rdlong	local02, fp
0a534     04 20 66 F0 | 	shl	local02, #4
0a538     0B 00 00 FF 
0a53c     CC E5 05 F1 | 	add	objptr, ##6092
0a540     F2 20 02 F1 | 	add	local02, objptr
0a544     04 20 06 F1 | 	add	local02, #4
0a548     10 13 02 FB | 	rdlong	arg01, local02
0a54c     0C 4E 05 F1 | 	add	fp, #12
0a550     A7 12 62 FC | 	wrlong	arg01, fp
0a554     24 4E 85 F1 | 	sub	fp, #36
0a558     0B 00 00 FF 
0a55c     CC E5 85 F1 | 	sub	objptr, ##6092
0a560     A4 73 B0 FD | 	call	#_pslpeek
0a564     FD 22 32 F9 | 	getword	local03, result1, #0
0a568     28 4E 05 F1 | 	add	fp, #40
0a56c     A7 22 62 FC | 	wrlong	local03, fp
0a570     04 4E 85 F1 | 	sub	fp, #4
0a574     A7 12 02 FB | 	rdlong	arg01, fp
0a578     24 4E 85 F1 | 	sub	fp, #36
0a57c     02 12 06 F1 | 	add	arg01, #2
0a580     2C 73 B0 FD | 	call	#_pspeek
0a584     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a588     2C 4E 05 F1 | 	add	fp, #44
0a58c     A7 FA 61 FC | 	wrlong	result1, fp
0a590     08 4E 85 F1 | 	sub	fp, #8
0a594     A7 12 02 FB | 	rdlong	arg01, fp
0a598     09 23 02 F6 | 	mov	local03, arg01
0a59c     10 22 06 F1 | 	add	local03, #16
0a5a0     24 4E 85 F1 | 	sub	fp, #36
0a5a4     04 12 06 F1 | 	add	arg01, #4
0a5a8     5C 73 B0 FD | 	call	#_pslpeek
0a5ac     38 4E 05 F1 | 	add	fp, #56
0a5b0     A7 1E 02 FB | 	rdlong	local01, fp
0a5b4     0F FB 01 FD | 	qmul	result1, local01
0a5b8     04 4E 85 F1 | 	sub	fp, #4
0a5bc     A7 1E 02 FB | 	rdlong	local01, fp
0a5c0     10 4E 85 F1 | 	sub	fp, #16
0a5c4     A7 12 02 FB | 	rdlong	arg01, fp
0a5c8     24 4E 85 F1 | 	sub	fp, #36
0a5cc     08 12 06 F1 | 	add	arg01, #8
0a5d0     18 20 62 FD | 	getqx	local02
0a5d4     10 1F 02 F1 | 	add	local01, local02
0a5d8     2C 73 B0 FD | 	call	#_pslpeek
0a5dc     FD 20 02 F6 | 	mov	local02, result1
0a5e0     24 4E 05 F1 | 	add	fp, #36
0a5e4     A7 12 02 FB | 	rdlong	arg01, fp
0a5e8     24 4E 85 F1 | 	sub	fp, #36
0a5ec     04 12 06 F1 | 	add	arg01, #4
0a5f0     14 73 B0 FD | 	call	#_pslpeek
0a5f4     FD 20 02 FD | 	qmul	local02, result1
0a5f8     3C 4E 05 F1 | 	add	fp, #60
0a5fc     A7 20 02 FB | 	rdlong	local02, fp
0a600     18 12 62 FD | 	getqx	arg01
0a604     10 13 02 FD | 	qmul	arg01, local02
0a608     10 4E 85 F1 | 	sub	fp, #16
0a60c     A7 20 02 FB | 	rdlong	local02, fp
0a610     18 12 62 FD | 	getqx	arg01
0a614     09 1F 02 F1 | 	add	local01, arg01
0a618     0F 21 02 FD | 	qmul	local02, local01
0a61c     04 4E 05 F1 | 	add	fp, #4
0a620                 | ' esize=pspeek(arrptr+2)
0a620                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0a620                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0a620                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0a620                 | ' 
0a620                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0a620                 | ' select case arrtype
0a620     18 20 62 FD | 	getqx	local02
0a624     10 23 02 F1 | 	add	local03, local02
0a628     A7 22 62 FC | 	wrlong	local03, fp
0a62c     08 4E 85 F1 | 	sub	fp, #8
0a630     A7 24 02 FB | 	rdlong	local04, fp
0a634     28 4E 85 F1 | 	sub	fp, #40
0a638     00 25 86 F1 | 	sub	local04, #256
0a63c     0C 24 26 F3 | 	fle	local04, #12
0a640     30 24 62 FD | 	jmprel	local04
0a644                 | LR__0866
0a644     30 00 90 FD | 	jmp	#LR__0867
0a648     58 00 90 FD | 	jmp	#LR__0868
0a64c     88 00 90 FD | 	jmp	#LR__0869
0a650     B8 00 90 FD | 	jmp	#LR__0870
0a654     10 01 90 FD | 	jmp	#LR__0871
0a658     68 01 90 FD | 	jmp	#LR__0872
0a65c     98 01 90 FD | 	jmp	#LR__0873
0a660     C8 01 90 FD | 	jmp	#LR__0874
0a664     F8 01 90 FD | 	jmp	#LR__0875
0a668     28 02 90 FD | 	jmp	#LR__0876
0a66c     58 02 90 FD | 	jmp	#LR__0877
0a670     88 02 90 FD | 	jmp	#LR__0878
0a674     B8 02 90 FD | 	jmp	#LR__0879
0a678                 | LR__0867
0a678     A7 12 02 F6 | 	mov	arg01, fp
0a67c     30 4E 05 F1 | 	add	fp, #48
0a680     A7 14 02 FB | 	rdlong	arg02, fp
0a684     30 4E 85 F1 | 	sub	fp, #48
0a688     0C 16 06 F6 | 	mov	arg03, #12
0a68c     0B 00 00 FF 
0a690     C0 E4 05 F1 | 	add	objptr, ##5824
0a694     58 9B B0 FD | 	call	#_psram_spin2_write
0a698     0B 00 00 FF 
0a69c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a6a0     94 02 90 FD | 	jmp	#LR__0880
0a6a4                 | LR__0868
0a6a4     30 4E 05 F1 | 	add	fp, #48
0a6a8     A7 12 02 FB | 	rdlong	arg01, fp
0a6ac     30 4E 85 F1 | 	sub	fp, #48
0a6b0     A7 14 02 FB | 	rdlong	arg02, fp
0a6b4     01 16 06 F6 | 	mov	arg03, #1
0a6b8     00 18 06 F6 | 	mov	arg04, #0
0a6bc     0B 00 00 FF 
0a6c0     C0 E4 05 F1 | 	add	objptr, ##5824
0a6c4                 | '     return fill(addr, pattern, count, listPtr, 1)
0a6c4     01 1A 06 F6 | 	mov	arg05, #1
0a6c8     C0 9B B0 FD | 	call	#_psram_spin2_fill
0a6cc     0B 00 00 FF 
0a6d0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a6d4     60 02 90 FD | 	jmp	#LR__0880
0a6d8                 | LR__0869
0a6d8     30 4E 05 F1 | 	add	fp, #48
0a6dc     A7 12 02 FB | 	rdlong	arg01, fp
0a6e0     30 4E 85 F1 | 	sub	fp, #48
0a6e4     A7 14 02 FB | 	rdlong	arg02, fp
0a6e8     01 16 06 F6 | 	mov	arg03, #1
0a6ec     00 18 06 F6 | 	mov	arg04, #0
0a6f0     0B 00 00 FF 
0a6f4     C0 E4 05 F1 | 	add	objptr, ##5824
0a6f8                 | '     return fill(addr, pattern, count, listPtr, 1)
0a6f8     01 1A 06 F6 | 	mov	arg05, #1
0a6fc     8C 9B B0 FD | 	call	#_psram_spin2_fill
0a700     0B 00 00 FF 
0a704     C0 E4 85 F1 | 	sub	objptr, ##5824
0a708     2C 02 90 FD | 	jmp	#LR__0880
0a70c                 | LR__0870
0a70c     30 4E 05 F1 | 	add	fp, #48
0a710     A7 12 02 FB | 	rdlong	arg01, fp
0a714     30 4E 85 F1 | 	sub	fp, #48
0a718     A7 14 02 FB | 	rdlong	arg02, fp
0a71c     01 16 06 F6 | 	mov	arg03, #1
0a720     00 18 06 F6 | 	mov	arg04, #0
0a724     0B 00 00 FF 
0a728     C0 E4 05 F1 | 	add	objptr, ##5824
0a72c                 | '     return fill(addr, pattern, count, listPtr, 1)
0a72c     01 1A 06 F6 | 	mov	arg05, #1
0a730     58 9B B0 FD | 	call	#_psram_spin2_fill
0a734     30 4E 05 F1 | 	add	fp, #48
0a738     A7 12 02 FB | 	rdlong	arg01, fp
0a73c     30 4E 85 F1 | 	sub	fp, #48
0a740     01 12 06 F1 | 	add	arg01, #1
0a744     A7 14 02 FB | 	rdlong	arg02, fp
0a748     08 14 46 F0 | 	shr	arg02, #8
0a74c     01 16 06 F6 | 	mov	arg03, #1
0a750     00 18 06 F6 | 	mov	arg04, #0
0a754                 | '     return fill(addr, pattern, count, listPtr, 1)
0a754     01 1A 06 F6 | 	mov	arg05, #1
0a758     30 9B B0 FD | 	call	#_psram_spin2_fill
0a75c     0B 00 00 FF 
0a760     C0 E4 85 F1 | 	sub	objptr, ##5824
0a764     D0 01 90 FD | 	jmp	#LR__0880
0a768                 | LR__0871
0a768     30 4E 05 F1 | 	add	fp, #48
0a76c     A7 12 02 FB | 	rdlong	arg01, fp
0a770     30 4E 85 F1 | 	sub	fp, #48
0a774     A7 14 02 FB | 	rdlong	arg02, fp
0a778     01 16 06 F6 | 	mov	arg03, #1
0a77c     00 18 06 F6 | 	mov	arg04, #0
0a780     0B 00 00 FF 
0a784     C0 E4 05 F1 | 	add	objptr, ##5824
0a788                 | '     return fill(addr, pattern, count, listPtr, 1)
0a788     01 1A 06 F6 | 	mov	arg05, #1
0a78c     FC 9A B0 FD | 	call	#_psram_spin2_fill
0a790     30 4E 05 F1 | 	add	fp, #48
0a794     A7 12 02 FB | 	rdlong	arg01, fp
0a798     30 4E 85 F1 | 	sub	fp, #48
0a79c     01 12 06 F1 | 	add	arg01, #1
0a7a0     A7 14 02 FB | 	rdlong	arg02, fp
0a7a4     08 14 46 F0 | 	shr	arg02, #8
0a7a8     01 16 06 F6 | 	mov	arg03, #1
0a7ac     00 18 06 F6 | 	mov	arg04, #0
0a7b0                 | '     return fill(addr, pattern, count, listPtr, 1)
0a7b0     01 1A 06 F6 | 	mov	arg05, #1
0a7b4     D4 9A B0 FD | 	call	#_psram_spin2_fill
0a7b8     0B 00 00 FF 
0a7bc     C0 E4 85 F1 | 	sub	objptr, ##5824
0a7c0     74 01 90 FD | 	jmp	#LR__0880
0a7c4                 | LR__0872
0a7c4     30 4E 05 F1 | 	add	fp, #48
0a7c8     A7 12 02 FB | 	rdlong	arg01, fp
0a7cc     30 4E 85 F1 | 	sub	fp, #48
0a7d0     A7 14 02 FB | 	rdlong	arg02, fp
0a7d4     01 16 06 F6 | 	mov	arg03, #1
0a7d8     00 18 06 F6 | 	mov	arg04, #0
0a7dc     0B 00 00 FF 
0a7e0     C0 E4 05 F1 | 	add	objptr, ##5824
0a7e4                 | '     return fill(addr, pattern, count, listPtr, 4)
0a7e4     04 1A 06 F6 | 	mov	arg05, #4
0a7e8     A0 9A B0 FD | 	call	#_psram_spin2_fill
0a7ec     0B 00 00 FF 
0a7f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a7f4     40 01 90 FD | 	jmp	#LR__0880
0a7f8                 | LR__0873
0a7f8     30 4E 05 F1 | 	add	fp, #48
0a7fc     A7 12 02 FB | 	rdlong	arg01, fp
0a800     30 4E 85 F1 | 	sub	fp, #48
0a804     A7 14 02 FB | 	rdlong	arg02, fp
0a808     01 16 06 F6 | 	mov	arg03, #1
0a80c     00 18 06 F6 | 	mov	arg04, #0
0a810     0B 00 00 FF 
0a814     C0 E4 05 F1 | 	add	objptr, ##5824
0a818                 | '     return fill(addr, pattern, count, listPtr, 4)
0a818     04 1A 06 F6 | 	mov	arg05, #4
0a81c     6C 9A B0 FD | 	call	#_psram_spin2_fill
0a820     0B 00 00 FF 
0a824     C0 E4 85 F1 | 	sub	objptr, ##5824
0a828     0C 01 90 FD | 	jmp	#LR__0880
0a82c                 | LR__0874
0a82c     30 4E 05 F1 | 	add	fp, #48
0a830     A7 12 02 FB | 	rdlong	arg01, fp
0a834     30 4E 85 F1 | 	sub	fp, #48
0a838     A7 14 02 FB | 	rdlong	arg02, fp
0a83c     01 16 06 F6 | 	mov	arg03, #1
0a840     00 18 06 F6 | 	mov	arg04, #0
0a844     0B 00 00 FF 
0a848     C0 E4 05 F1 | 	add	objptr, ##5824
0a84c                 | '     return fill(addr, pattern, count, listPtr, 4)
0a84c     04 1A 06 F6 | 	mov	arg05, #4
0a850     38 9A B0 FD | 	call	#_psram_spin2_fill
0a854     0B 00 00 FF 
0a858     C0 E4 85 F1 | 	sub	objptr, ##5824
0a85c     D8 00 90 FD | 	jmp	#LR__0880
0a860                 | LR__0875
0a860     30 4E 05 F1 | 	add	fp, #48
0a864     A7 12 02 FB | 	rdlong	arg01, fp
0a868     30 4E 85 F1 | 	sub	fp, #48
0a86c     A7 14 02 FB | 	rdlong	arg02, fp
0a870     01 16 06 F6 | 	mov	arg03, #1
0a874     00 18 06 F6 | 	mov	arg04, #0
0a878     0B 00 00 FF 
0a87c     C0 E4 05 F1 | 	add	objptr, ##5824
0a880                 | '     return fill(addr, pattern, count, listPtr, 4)
0a880     04 1A 06 F6 | 	mov	arg05, #4
0a884     04 9A B0 FD | 	call	#_psram_spin2_fill
0a888     0B 00 00 FF 
0a88c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a890     A4 00 90 FD | 	jmp	#LR__0880
0a894                 | LR__0876
0a894     30 4E 05 F1 | 	add	fp, #48
0a898     A7 12 02 FB | 	rdlong	arg01, fp
0a89c     30 4E 85 F1 | 	sub	fp, #48
0a8a0     A7 14 02 FB | 	rdlong	arg02, fp
0a8a4     01 16 06 F6 | 	mov	arg03, #1
0a8a8     00 18 06 F6 | 	mov	arg04, #0
0a8ac     0B 00 00 FF 
0a8b0     C0 E4 05 F1 | 	add	objptr, ##5824
0a8b4                 | '     return fill(addr, pattern, count, listPtr, 4)
0a8b4     04 1A 06 F6 | 	mov	arg05, #4
0a8b8     D0 99 B0 FD | 	call	#_psram_spin2_fill
0a8bc     0B 00 00 FF 
0a8c0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a8c4     70 00 90 FD | 	jmp	#LR__0880
0a8c8                 | LR__0877
0a8c8     30 4E 05 F1 | 	add	fp, #48
0a8cc     A7 12 02 FB | 	rdlong	arg01, fp
0a8d0     30 4E 85 F1 | 	sub	fp, #48
0a8d4     A7 14 02 FB | 	rdlong	arg02, fp
0a8d8     01 16 06 F6 | 	mov	arg03, #1
0a8dc     00 18 06 F6 | 	mov	arg04, #0
0a8e0     0B 00 00 FF 
0a8e4     C0 E4 05 F1 | 	add	objptr, ##5824
0a8e8                 | '     return fill(addr, pattern, count, listPtr, 4)
0a8e8     04 1A 06 F6 | 	mov	arg05, #4
0a8ec     9C 99 B0 FD | 	call	#_psram_spin2_fill
0a8f0     0B 00 00 FF 
0a8f4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a8f8     3C 00 90 FD | 	jmp	#LR__0880
0a8fc                 | LR__0878
0a8fc     30 4E 05 F1 | 	add	fp, #48
0a900     A7 12 02 FB | 	rdlong	arg01, fp
0a904     30 4E 85 F1 | 	sub	fp, #48
0a908     A7 14 02 FB | 	rdlong	arg02, fp
0a90c     01 16 06 F6 | 	mov	arg03, #1
0a910     00 18 06 F6 | 	mov	arg04, #0
0a914     0B 00 00 FF 
0a918     C0 E4 05 F1 | 	add	objptr, ##5824
0a91c                 | '     return fill(addr, pattern, count, listPtr, 4)
0a91c     04 1A 06 F6 | 	mov	arg05, #4
0a920     68 99 B0 FD | 	call	#_psram_spin2_fill
0a924     0B 00 00 FF 
0a928     C0 E4 85 F1 | 	sub	objptr, ##5824
0a92c     08 00 90 FD | 	jmp	#LR__0880
0a930                 | LR__0879
0a930     2F 12 06 F6 | 	mov	arg01, #47
0a934     14 6E B0 FD | 	call	#_printerror
0a938                 | LR__0880
0a938                 | LR__0881
0a938     A7 F0 03 F6 | 	mov	ptra, fp
0a93c     B2 00 A0 FD | 	call	#popregs_
0a940                 | _do_assign_ret
0a940     2D 00 64 FD | 	ret
0a944                 | 
0a944                 | ' 
0a944                 | ' 
0a944                 | ' ' --------------------- Read a variable and push to the stack
0a944                 | ' 
0a944                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0a944                 | ' 
0a944                 | ' sub do_getvar
0a944                 | _do_getvar
0a944     04 4A 05 F6 | 	mov	COUNT_, #4
0a948     A8 00 A0 FD | 	call	#pushregs_
0a94c     3C F0 07 F1 | 	add	ptra, #60
0a950                 | ' 
0a950                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0a950     41 00 00 FF 
0a954     44 E4 05 F1 | 	add	objptr, ##33348
0a958     F2 1E 02 FB | 	rdlong	local01, objptr
0a95c     0F 17 02 F6 | 	mov	arg03, local01
0a960     01 16 66 F0 | 	shl	arg03, #1
0a964     0F 17 02 F1 | 	add	arg03, local01
0a968     02 16 66 F0 | 	shl	arg03, #2
0a96c     03 00 00 FF 
0a970     04 E4 85 F1 | 	sub	objptr, ##1540
0a974     F2 16 02 F1 | 	add	arg03, objptr
0a978     04 16 06 F1 | 	add	arg03, #4
0a97c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0a980     3E 00 00 FF 
0a984     40 E4 85 F1 | 	sub	objptr, ##31808
0a988     C4 00 90 5D |  if_ne	jmp	#LR__0891
0a98c     41 00 00 FF 
0a990     44 E4 05 F1 | 	add	objptr, ##33348
0a994     F2 1E 02 FB | 	rdlong	local01, objptr
0a998     0F 13 02 F6 | 	mov	arg01, local01
0a99c     01 12 66 F0 | 	shl	arg01, #1
0a9a0     0F 13 02 F1 | 	add	arg01, local01
0a9a4     02 12 66 F0 | 	shl	arg01, #2
0a9a8     03 00 00 FF 
0a9ac     04 E4 85 F1 | 	sub	objptr, ##1540
0a9b0     F2 12 02 F1 | 	add	arg01, objptr
0a9b4     09 1F 02 FB | 	rdlong	local01, arg01
0a9b8     04 1E 66 F0 | 	shl	local01, #4
0a9bc     32 00 00 FF 
0a9c0     74 E4 85 F1 | 	sub	objptr, ##25716
0a9c4     F2 1E 02 F1 | 	add	local01, objptr
0a9c8     04 1E 06 F1 | 	add	local01, #4
0a9cc     0F 13 02 FB | 	rdlong	arg01, local01
0a9d0     04 1E 06 F1 | 	add	local01, #4
0a9d4     0F 1F 02 FB | 	rdlong	local01, local01
0a9d8     A7 12 62 FC | 	wrlong	arg01, fp
0a9dc     04 4E 05 F1 | 	add	fp, #4
0a9e0     A7 1E 62 FC | 	wrlong	local01, fp
0a9e4     35 00 00 FF 
0a9e8     78 E4 05 F1 | 	add	objptr, ##27256
0a9ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a9f0     0F 13 02 F6 | 	mov	arg01, local01
0a9f4     01 12 66 F0 | 	shl	arg01, #1
0a9f8     0F 13 02 F1 | 	add	arg01, local01
0a9fc     02 12 66 F0 | 	shl	arg01, #2
0aa00     03 00 00 FF 
0aa04     04 E4 85 F1 | 	sub	objptr, ##1540
0aa08     F2 12 02 F1 | 	add	arg01, objptr
0aa0c     09 1F 02 FB | 	rdlong	local01, arg01
0aa10     04 1E 66 F0 | 	shl	local01, #4
0aa14     32 00 00 FF 
0aa18     74 E4 85 F1 | 	sub	objptr, ##25716
0aa1c     F2 1E 02 F1 | 	add	local01, objptr
0aa20     0C 1E 06 F1 | 	add	local01, #12
0aa24     0F 1F 02 FB | 	rdlong	local01, local01
0aa28     04 4E 05 F1 | 	add	fp, #4
0aa2c     A7 1E 62 FC | 	wrlong	local01, fp
0aa30                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0aa30                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0aa30                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0aa30     08 4E 85 F1 | 	sub	fp, #8
0aa34     00 1F 16 F2 | 	cmp	local01, #256 wc
0aa38     0B 00 00 FF 
0aa3c     CC E5 85 F1 | 	sub	objptr, ##6092
0aa40     0C 00 90 3D |  if_ae	jmp	#LR__0890
0aa44     A7 12 02 F6 | 	mov	arg01, fp
0aa48     CC DC BF FD | 	call	#_push
0aa4c     44 04 90 FD | 	jmp	#LR__0909
0aa50                 | LR__0890
0aa50                 | LR__0891
0aa50     41 00 00 FF 
0aa54     44 E4 05 F1 | 	add	objptr, ##33348
0aa58     F2 16 02 FB | 	rdlong	arg03, objptr
0aa5c     0B 15 02 F6 | 	mov	arg02, arg03
0aa60     01 14 66 F0 | 	shl	arg02, #1
0aa64     0B 15 02 F1 | 	add	arg02, arg03
0aa68     02 14 66 F0 | 	shl	arg02, #2
0aa6c     03 00 00 FF 
0aa70     04 E4 85 F1 | 	sub	objptr, ##1540
0aa74     F2 14 02 F1 | 	add	arg02, objptr
0aa78     0A 17 02 FB | 	rdlong	arg03, arg02
0aa7c     04 16 66 F0 | 	shl	arg03, #4
0aa80     32 00 00 FF 
0aa84     74 E4 85 F1 | 	sub	objptr, ##25716
0aa88     F2 16 02 F1 | 	add	arg03, objptr
0aa8c     04 16 06 F1 | 	add	arg03, #4
0aa90     0B 13 02 FB | 	rdlong	arg01, arg03
0aa94     0C 4E 05 F1 | 	add	fp, #12
0aa98     A7 12 62 FC | 	wrlong	arg01, fp
0aa9c     0C 4E 85 F1 | 	sub	fp, #12
0aaa0     0B 00 00 FF 
0aaa4     CC E5 85 F1 | 	sub	objptr, ##6092
0aaa8     5C 6E B0 FD | 	call	#_pslpeek
0aaac     FD FA 31 F9 | 	getword	result1, result1, #0
0aab0     10 4E 05 F1 | 	add	fp, #16
0aab4     A7 FA 61 FC | 	wrlong	result1, fp
0aab8     41 00 00 FF 
0aabc     44 E4 05 F1 | 	add	objptr, ##33348
0aac0     F2 16 02 FB | 	rdlong	arg03, objptr
0aac4     0B 15 02 F6 | 	mov	arg02, arg03
0aac8     01 14 66 F0 | 	shl	arg02, #1
0aacc     0B 15 02 F1 | 	add	arg02, arg03
0aad0     02 14 66 F0 | 	shl	arg02, #2
0aad4     03 00 00 FF 
0aad8     04 E4 85 F1 | 	sub	objptr, ##1540
0aadc     F2 14 02 F1 | 	add	arg02, objptr
0aae0     04 14 06 F1 | 	add	arg02, #4
0aae4     0A 17 02 FB | 	rdlong	arg03, arg02
0aae8     04 4E 05 F1 | 	add	fp, #4
0aaec     A7 16 62 FC | 	wrlong	arg03, fp
0aaf0     08 4E 85 F1 | 	sub	fp, #8
0aaf4     A7 12 02 FB | 	rdlong	arg01, fp
0aaf8     0C 4E 85 F1 | 	sub	fp, #12
0aafc     02 12 06 F1 | 	add	arg01, #2
0ab00     3E 00 00 FF 
0ab04     40 E4 85 F1 | 	sub	objptr, ##31808
0ab08     A4 6D B0 FD | 	call	#_pspeek
0ab0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ab10     18 4E 05 F1 | 	add	fp, #24
0ab14     A7 FA 61 FC | 	wrlong	result1, fp
0ab18     0C 4E 85 F1 | 	sub	fp, #12
0ab1c     A7 12 02 FB | 	rdlong	arg01, fp
0ab20     0C 4E 85 F1 | 	sub	fp, #12
0ab24     04 12 06 F1 | 	add	arg01, #4
0ab28     DC 6D B0 FD | 	call	#_pslpeek
0ab2c     1C 4E 05 F1 | 	add	fp, #28
0ab30     A7 FA 61 FC | 	wrlong	result1, fp
0ab34     10 4E 85 F1 | 	sub	fp, #16
0ab38     A7 12 02 FB | 	rdlong	arg01, fp
0ab3c     0C 4E 85 F1 | 	sub	fp, #12
0ab40     08 12 06 F1 | 	add	arg01, #8
0ab44     C0 6D B0 FD | 	call	#_pslpeek
0ab48     20 4E 05 F1 | 	add	fp, #32
0ab4c     A7 FA 61 FC | 	wrlong	result1, fp
0ab50     14 4E 85 F1 | 	sub	fp, #20
0ab54     A7 12 02 FB | 	rdlong	arg01, fp
0ab58     0C 4E 85 F1 | 	sub	fp, #12
0ab5c     0C 12 06 F1 | 	add	arg01, #12
0ab60     A4 6D B0 FD | 	call	#_pslpeek
0ab64     24 4E 05 F1 | 	add	fp, #36
0ab68     A7 FA 61 FC | 	wrlong	result1, fp
0ab6c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ab6c                 | ' esize=pspeek(arrptr+2)
0ab6c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ab6c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ab6c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ab6c                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult' :print "in do_getvar popped i3=",i3 else i3=0 : print "in do_getvar no i3 popped"
0ab6c     10 4E 85 F1 | 	sub	fp, #16
0ab70     A7 16 02 FB | 	rdlong	arg03, fp
0ab74     14 4E 85 F1 | 	sub	fp, #20
0ab78     03 16 16 F2 | 	cmp	arg03, #3 wc
0ab7c     2C 00 90 CD |  if_b	jmp	#LR__0892
0ab80     FC DA BF FD | 	call	#_pop
0ab84     A7 FA 61 FC | 	wrlong	result1, fp
0ab88     04 4E 05 F1 | 	add	fp, #4
0ab8c     A7 FC 61 FC | 	wrlong	result2, fp
0ab90     04 4E 05 F1 | 	add	fp, #4
0ab94     A7 FE 61 FC | 	wrlong	result3, fp
0ab98     08 4E 85 F1 | 	sub	fp, #8
0ab9c     A7 16 02 FB | 	rdlong	arg03, fp
0aba0     30 4E 05 F1 | 	add	fp, #48
0aba4     A7 16 62 FC | 	wrlong	arg03, fp
0aba8     30 4E 85 F1 | 	sub	fp, #48
0abac                 | LR__0892
0abac                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult' :print "in do_getvar popped i2=",i2 else i2=0 : print "in do_getvar no i2 popped"
0abac     14 4E 05 F1 | 	add	fp, #20
0abb0     A7 16 02 FB | 	rdlong	arg03, fp
0abb4     14 4E 85 F1 | 	sub	fp, #20
0abb8     02 16 16 F2 | 	cmp	arg03, #2 wc
0abbc     2C 00 90 CD |  if_b	jmp	#LR__0893
0abc0     BC DA BF FD | 	call	#_pop
0abc4     A7 FA 61 FC | 	wrlong	result1, fp
0abc8     04 4E 05 F1 | 	add	fp, #4
0abcc     A7 FC 61 FC | 	wrlong	result2, fp
0abd0     04 4E 05 F1 | 	add	fp, #4
0abd4     A7 FE 61 FC | 	wrlong	result3, fp
0abd8     08 4E 85 F1 | 	sub	fp, #8
0abdc     A7 16 02 FB | 	rdlong	arg03, fp
0abe0     2C 4E 05 F1 | 	add	fp, #44
0abe4     A7 16 62 FC | 	wrlong	arg03, fp
0abe8     2C 4E 85 F1 | 	sub	fp, #44
0abec                 | LR__0893
0abec                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult ':print "in do_getvar popped i1=",i1 else i1=0 : print "in do_getvar no i1 popped"
0abec     14 4E 05 F1 | 	add	fp, #20
0abf0     A7 16 02 FB | 	rdlong	arg03, fp
0abf4     14 4E 85 F1 | 	sub	fp, #20
0abf8     01 16 16 F2 | 	cmp	arg03, #1 wc
0abfc     2C 00 90 CD |  if_b	jmp	#LR__0894
0ac00     7C DA BF FD | 	call	#_pop
0ac04     A7 FA 61 FC | 	wrlong	result1, fp
0ac08     04 4E 05 F1 | 	add	fp, #4
0ac0c     A7 FC 61 FC | 	wrlong	result2, fp
0ac10     04 4E 05 F1 | 	add	fp, #4
0ac14     A7 FE 61 FC | 	wrlong	result3, fp
0ac18     08 4E 85 F1 | 	sub	fp, #8
0ac1c     A7 16 02 FB | 	rdlong	arg03, fp
0ac20     28 4E 05 F1 | 	add	fp, #40
0ac24     A7 16 62 FC | 	wrlong	arg03, fp
0ac28     28 4E 85 F1 | 	sub	fp, #40
0ac2c                 | LR__0894
0ac2c     0C 4E 05 F1 | 	add	fp, #12
0ac30     A7 20 02 FB | 	rdlong	local02, fp
0ac34     1C 4E 05 F1 | 	add	fp, #28
0ac38     A7 22 02 FB | 	rdlong	local03, fp
0ac3c     04 4E 05 F1 | 	add	fp, #4
0ac40     A7 FE 01 FB | 	rdlong	result3, fp
0ac44     10 4E 85 F1 | 	sub	fp, #16
0ac48     A7 FC 01 FB | 	rdlong	result2, fp
0ac4c     FE FE 01 FD | 	qmul	result3, result2
0ac50     10 20 06 F1 | 	add	local02, #16
0ac54     14 4E 05 F1 | 	add	fp, #20
0ac58     A7 FE 01 FB | 	rdlong	result3, fp
0ac5c     18 FA 61 FD | 	getqx	result1
0ac60     FE FE 01 FD | 	qmul	result3, result2
0ac64     FD 22 02 F1 | 	add	local03, result1
0ac68     10 4E 85 F1 | 	sub	fp, #16
0ac6c     A7 FC 01 FB | 	rdlong	result2, fp
0ac70     18 FE 61 FD | 	getqx	result3
0ac74     FE FE 01 FD | 	qmul	result3, result2
0ac78     08 4E 85 F1 | 	sub	fp, #8
0ac7c     A7 FC 01 FB | 	rdlong	result2, fp
0ac80     18 FE 61 FD | 	getqx	result3
0ac84     FF 22 02 F1 | 	add	local03, result3
0ac88     FE 22 02 FD | 	qmul	local03, result2
0ac8c     1C 4E 05 F1 | 	add	fp, #28
0ac90                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ac90                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ac90                 | ' 
0ac90                 | ' select case vartype
0ac90     18 FE 61 FD | 	getqx	result3
0ac94     FF 20 02 F1 | 	add	local02, result3
0ac98     A7 20 62 FC | 	wrlong	local02, fp
0ac9c     24 4E 85 F1 | 	sub	fp, #36
0aca0     A7 24 02 FB | 	rdlong	local04, fp
0aca4     10 4E 85 F1 | 	sub	fp, #16
0aca8     00 25 86 F1 | 	sub	local04, #256
0acac     0C 24 26 F3 | 	fle	local04, #12
0acb0     30 24 62 FD | 	jmprel	local04
0acb4                 | LR__0895
0acb4     30 00 90 FD | 	jmp	#LR__0896
0acb8     58 00 90 FD | 	jmp	#LR__0897
0acbc     8C 00 90 FD | 	jmp	#LR__0898
0acc0     AC 00 90 FD | 	jmp	#LR__0899
0acc4     E8 00 90 FD | 	jmp	#LR__0900
0acc8     08 01 90 FD | 	jmp	#LR__0901
0accc     24 01 90 FD | 	jmp	#LR__0902
0acd0     40 01 90 FD | 	jmp	#LR__0903
0acd4     50 01 90 FD | 	jmp	#LR__0904
0acd8     60 01 90 FD | 	jmp	#LR__0905
0acdc     7C 01 90 FD | 	jmp	#LR__0906
0ace0     8C 01 90 FD | 	jmp	#LR__0907
0ace4     A4 01 90 FD | 	jmp	#LR__0908
0ace8                 | LR__0896
0ace8     A7 12 02 F6 | 	mov	arg01, fp
0acec     34 4E 05 F1 | 	add	fp, #52
0acf0     A7 14 02 FB | 	rdlong	arg02, fp
0acf4     34 4E 85 F1 | 	sub	fp, #52
0acf8     0C 16 06 F6 | 	mov	arg03, #12
0acfc     0B 00 00 FF 
0ad00     C0 E4 05 F1 | 	add	objptr, ##5824
0ad04     4C 94 B0 FD | 	call	#_psram_spin2_read1
0ad08     0B 00 00 FF 
0ad0c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad10     78 01 90 FD | 	jmp	#LR__0908
0ad14                 | LR__0897
0ad14     08 4E 05 F1 | 	add	fp, #8
0ad18     A7 38 68 FC | 	wrlong	#28, fp
0ad1c     2C 4E 05 F1 | 	add	fp, #44
0ad20     A7 12 02 FB | 	rdlong	arg01, fp
0ad24     34 4E 85 F1 | 	sub	fp, #52
0ad28     84 6B B0 FD | 	call	#_pspeek
0ad2c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ad30     A7 FA 61 FC | 	wrlong	result1, fp
0ad34     80 FA 15 F2 | 	cmp	result1, #128 wc
0ad38     00 1F 66 36 |  if_ae	neg	local01, #256
0ad3c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ad40     11 1F 42 35 |  if_ae	or	local01, local03
0ad44     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ad48     40 01 90 FD | 	jmp	#LR__0908
0ad4c                 | LR__0898
0ad4c     08 4E 05 F1 | 	add	fp, #8
0ad50     A7 3A 68 FC | 	wrlong	#29, fp
0ad54     2C 4E 05 F1 | 	add	fp, #44
0ad58     A7 12 02 FB | 	rdlong	arg01, fp
0ad5c     34 4E 85 F1 | 	sub	fp, #52
0ad60     4C 6B B0 FD | 	call	#_pspeek
0ad64     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ad68     A7 FA 61 FC | 	wrlong	result1, fp
0ad6c     1C 01 90 FD | 	jmp	#LR__0908
0ad70                 | LR__0899
0ad70     08 4E 05 F1 | 	add	fp, #8
0ad74     A7 38 68 FC | 	wrlong	#28, fp
0ad78     2C 4E 05 F1 | 	add	fp, #44
0ad7c     A7 12 02 FB | 	rdlong	arg01, fp
0ad80     34 4E 85 F1 | 	sub	fp, #52
0ad84     80 6B B0 FD | 	call	#_pslpeek
0ad88     FD FA 31 F9 | 	getword	result1, result1, #0
0ad8c     A7 FA 61 FC | 	wrlong	result1, fp
0ad90     40 00 00 FF 
0ad94     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0ad98     FF 7F 00 3F 
0ad9c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0ada0     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ada4     11 1F 42 35 |  if_ae	or	local01, local03
0ada8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0adac     DC 00 90 FD | 	jmp	#LR__0908
0adb0                 | LR__0900
0adb0     08 4E 05 F1 | 	add	fp, #8
0adb4     A7 3A 68 FC | 	wrlong	#29, fp
0adb8     2C 4E 05 F1 | 	add	fp, #44
0adbc     A7 12 02 FB | 	rdlong	arg01, fp
0adc0     34 4E 85 F1 | 	sub	fp, #52
0adc4     40 6B B0 FD | 	call	#_pslpeek
0adc8     FD FA 31 F9 | 	getword	result1, result1, #0
0adcc     A7 FA 61 FC | 	wrlong	result1, fp
0add0     B8 00 90 FD | 	jmp	#LR__0908
0add4                 | LR__0901
0add4     08 4E 05 F1 | 	add	fp, #8
0add8     A7 38 68 FC | 	wrlong	#28, fp
0addc     2C 4E 05 F1 | 	add	fp, #44
0ade0     A7 12 02 FB | 	rdlong	arg01, fp
0ade4     34 4E 85 F1 | 	sub	fp, #52
0ade8     1C 6B B0 FD | 	call	#_pslpeek
0adec     A7 FA 61 FC | 	wrlong	result1, fp
0adf0     98 00 90 FD | 	jmp	#LR__0908
0adf4                 | LR__0902
0adf4     08 4E 05 F1 | 	add	fp, #8
0adf8     A7 3A 68 FC | 	wrlong	#29, fp
0adfc     2C 4E 05 F1 | 	add	fp, #44
0ae00     A7 12 02 FB | 	rdlong	arg01, fp
0ae04     34 4E 85 F1 | 	sub	fp, #52
0ae08     FC 6A B0 FD | 	call	#_pslpeek
0ae0c     A7 FA 61 FC | 	wrlong	result1, fp
0ae10     78 00 90 FD | 	jmp	#LR__0908
0ae14                 | LR__0903
0ae14     08 4E 05 F1 | 	add	fp, #8
0ae18     A7 FE 69 FC | 	wrlong	#255, fp
0ae1c     08 4E 85 F1 | 	sub	fp, #8
0ae20     A7 60 68 FC | 	wrlong	#48, fp
0ae24     64 00 90 FD | 	jmp	#LR__0908
0ae28                 | LR__0904
0ae28     08 4E 05 F1 | 	add	fp, #8
0ae2c     A7 FE 69 FC | 	wrlong	#255, fp
0ae30     08 4E 85 F1 | 	sub	fp, #8
0ae34     A7 60 68 FC | 	wrlong	#48, fp
0ae38     50 00 90 FD | 	jmp	#LR__0908
0ae3c                 | LR__0905
0ae3c     08 4E 05 F1 | 	add	fp, #8
0ae40     A7 3C 68 FC | 	wrlong	#30, fp
0ae44     2C 4E 05 F1 | 	add	fp, #44
0ae48     A7 12 02 FB | 	rdlong	arg01, fp
0ae4c     34 4E 85 F1 | 	sub	fp, #52
0ae50     B4 6A B0 FD | 	call	#_pslpeek
0ae54     A7 FA 61 FC | 	wrlong	result1, fp
0ae58     30 00 90 FD | 	jmp	#LR__0908
0ae5c                 | LR__0906
0ae5c     08 4E 05 F1 | 	add	fp, #8
0ae60     A7 FE 69 FC | 	wrlong	#255, fp
0ae64     08 4E 85 F1 | 	sub	fp, #8
0ae68     A7 60 68 FC | 	wrlong	#48, fp
0ae6c     1C 00 90 FD | 	jmp	#LR__0908
0ae70                 | LR__0907
0ae70     08 4E 05 F1 | 	add	fp, #8
0ae74     A7 3E 68 FC | 	wrlong	#31, fp
0ae78     2C 4E 05 F1 | 	add	fp, #44
0ae7c     A7 12 02 FB | 	rdlong	arg01, fp
0ae80     34 4E 85 F1 | 	sub	fp, #52
0ae84     80 6A B0 FD | 	call	#_pslpeek
0ae88     A7 FA 61 FC | 	wrlong	result1, fp
0ae8c                 | LR__0908
0ae8c     A7 12 02 F6 | 	mov	arg01, fp
0ae90     84 D8 BF FD | 	call	#_push
0ae94                 | LR__0909
0ae94     A7 F0 03 F6 | 	mov	ptra, fp
0ae98     B2 00 A0 FD | 	call	#popregs_
0ae9c                 | _do_getvar_ret
0ae9c     2D 00 64 FD | 	ret
0aea0                 | 
0aea0                 | ' 
0aea0                 | ' '------------------------ Operators 
0aea0                 | ' 
0aea0                 | ' sub do_plus 
0aea0                 | _do_plus
0aea0     05 4A 05 F6 | 	mov	COUNT_, #5
0aea4     A8 00 A0 FD | 	call	#pushregs_
0aea8     18 F0 07 F1 | 	add	ptra, #24
0aeac     D0 D7 BF FD | 	call	#_pop
0aeb0     FD 1E 02 F6 | 	mov	local01, result1
0aeb4     FE 20 02 F6 | 	mov	local02, result2
0aeb8     FF 22 02 F6 | 	mov	local03, result3
0aebc     0C 4E 05 F1 | 	add	fp, #12
0aec0     A7 1E 62 FC | 	wrlong	local01, fp
0aec4     04 4E 05 F1 | 	add	fp, #4
0aec8     A7 20 62 FC | 	wrlong	local02, fp
0aecc     04 4E 05 F1 | 	add	fp, #4
0aed0     A7 22 62 FC | 	wrlong	local03, fp
0aed4     14 4E 85 F1 | 	sub	fp, #20
0aed8     A4 D7 BF FD | 	call	#_pop
0aedc     FF 22 02 F6 | 	mov	local03, result3
0aee0     A7 FA 61 FC | 	wrlong	result1, fp
0aee4     04 4E 05 F1 | 	add	fp, #4
0aee8     A7 FC 61 FC | 	wrlong	result2, fp
0aeec     04 4E 05 F1 | 	add	fp, #4
0aef0     A7 22 62 FC | 	wrlong	local03, fp
0aef4                 | ' 
0aef4                 | ' t2=pop()
0aef4                 | ' t1=pop()
0aef4                 | ' 
0aef4                 | ' 
0aef4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0aef4     08 4E 85 F1 | 	sub	fp, #8
0aef8     1D 22 0E F2 | 	cmp	local03, #29 wz
0aefc     14 4E 05 A1 |  if_e	add	fp, #20
0af00     A7 24 02 AB |  if_e	rdlong	local04, fp
0af04     14 4E 85 A1 |  if_e	sub	fp, #20
0af08     12 23 02 A6 |  if_e	mov	local03, local04
0af0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0af10     1C 00 90 5D |  if_ne	jmp	#LR__0910
0af14     A7 1E 02 FB | 	rdlong	local01, fp
0af18     0C 4E 05 F1 | 	add	fp, #12
0af1c     A7 20 02 FB | 	rdlong	local02, fp
0af20     0C 4E 85 F1 | 	sub	fp, #12
0af24     10 1F 02 F1 | 	add	local01, local02
0af28     A7 1E 62 FC | 	wrlong	local01, fp
0af2c     3C 03 90 FD | 	jmp	#LR__0922
0af30                 | LR__0910
0af30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0af30     08 4E 05 F1 | 	add	fp, #8
0af34     A7 1E 02 FB | 	rdlong	local01, fp
0af38     08 4E 85 F1 | 	sub	fp, #8
0af3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0af40     14 4E 05 A1 |  if_e	add	fp, #20
0af44     A7 24 02 AB |  if_e	rdlong	local04, fp
0af48     14 4E 85 A1 |  if_e	sub	fp, #20
0af4c     12 23 02 A6 |  if_e	mov	local03, local04
0af50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0af54     28 00 90 5D |  if_ne	jmp	#LR__0911
0af58     A7 1E 02 FB | 	rdlong	local01, fp
0af5c     0C 4E 05 F1 | 	add	fp, #12
0af60     A7 20 02 FB | 	rdlong	local02, fp
0af64     0C 4E 85 F1 | 	sub	fp, #12
0af68     10 1F 02 F1 | 	add	local01, local02
0af6c     A7 1E 62 FC | 	wrlong	local01, fp
0af70     08 4E 05 F1 | 	add	fp, #8
0af74     A7 38 68 FC | 	wrlong	#28, fp
0af78     08 4E 85 F1 | 	sub	fp, #8
0af7c     EC 02 90 FD | 	jmp	#LR__0922
0af80                 | LR__0911
0af80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0af80     08 4E 05 F1 | 	add	fp, #8
0af84     A7 1E 02 FB | 	rdlong	local01, fp
0af88     08 4E 85 F1 | 	sub	fp, #8
0af8c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0af90     14 4E 05 A1 |  if_e	add	fp, #20
0af94     A7 24 02 AB |  if_e	rdlong	local04, fp
0af98     14 4E 85 A1 |  if_e	sub	fp, #20
0af9c     12 23 02 A6 |  if_e	mov	local03, local04
0afa0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0afa4     30 00 90 5D |  if_ne	jmp	#LR__0912
0afa8     A7 12 02 FB | 	rdlong	arg01, fp
0afac     78 C3 B0 FD | 	call	#__system___float_fromuns
0afb0     FD 12 02 F6 | 	mov	arg01, result1
0afb4     0C 4E 05 F1 | 	add	fp, #12
0afb8     A7 14 02 FB | 	rdlong	arg02, fp
0afbc     0C 4E 85 F1 | 	sub	fp, #12
0afc0     98 C3 B0 FD | 	call	#__system___float_add
0afc4     A7 FA 61 FC | 	wrlong	result1, fp
0afc8     08 4E 05 F1 | 	add	fp, #8
0afcc     A7 3C 68 FC | 	wrlong	#30, fp
0afd0     08 4E 85 F1 | 	sub	fp, #8
0afd4     94 02 90 FD | 	jmp	#LR__0922
0afd8                 | LR__0912
0afd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0afd8     08 4E 05 F1 | 	add	fp, #8
0afdc     A7 1E 02 FB | 	rdlong	local01, fp
0afe0     08 4E 85 F1 | 	sub	fp, #8
0afe4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0afe8     14 4E 05 A1 |  if_e	add	fp, #20
0afec     A7 24 02 AB |  if_e	rdlong	local04, fp
0aff0     14 4E 85 A1 |  if_e	sub	fp, #20
0aff4     12 23 02 A6 |  if_e	mov	local03, local04
0aff8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0affc     1C 00 90 5D |  if_ne	jmp	#LR__0913
0b000     A7 1E 02 FB | 	rdlong	local01, fp
0b004     0C 4E 05 F1 | 	add	fp, #12
0b008     A7 20 02 FB | 	rdlong	local02, fp
0b00c     0C 4E 85 F1 | 	sub	fp, #12
0b010     10 1F 02 F1 | 	add	local01, local02
0b014     A7 1E 62 FC | 	wrlong	local01, fp
0b018     50 02 90 FD | 	jmp	#LR__0922
0b01c                 | LR__0913
0b01c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b01c     08 4E 05 F1 | 	add	fp, #8
0b020     A7 1E 02 FB | 	rdlong	local01, fp
0b024     08 4E 85 F1 | 	sub	fp, #8
0b028     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b02c     14 4E 05 A1 |  if_e	add	fp, #20
0b030     A7 24 02 AB |  if_e	rdlong	local04, fp
0b034     14 4E 85 A1 |  if_e	sub	fp, #20
0b038     12 23 02 A6 |  if_e	mov	local03, local04
0b03c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b040     1C 00 90 5D |  if_ne	jmp	#LR__0914
0b044     A7 1E 02 FB | 	rdlong	local01, fp
0b048     0C 4E 05 F1 | 	add	fp, #12
0b04c     A7 20 02 FB | 	rdlong	local02, fp
0b050     0C 4E 85 F1 | 	sub	fp, #12
0b054     10 1F 02 F1 | 	add	local01, local02
0b058     A7 1E 62 FC | 	wrlong	local01, fp
0b05c     0C 02 90 FD | 	jmp	#LR__0922
0b060                 | LR__0914
0b060                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b060     08 4E 05 F1 | 	add	fp, #8
0b064     A7 1E 02 FB | 	rdlong	local01, fp
0b068     08 4E 85 F1 | 	sub	fp, #8
0b06c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b070     14 4E 05 A1 |  if_e	add	fp, #20
0b074     A7 24 02 AB |  if_e	rdlong	local04, fp
0b078     14 4E 85 A1 |  if_e	sub	fp, #20
0b07c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b080     40 00 90 5D |  if_ne	jmp	#LR__0915
0b084     A7 12 02 FB | 	rdlong	arg01, fp
0b088     09 13 52 F6 | 	abs	arg01, arg01 wc
0b08c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b090     00 26 06 36 |  if_ae	mov	local05, #0
0b094     90 C2 B0 FD | 	call	#__system___float_fromuns
0b098     13 FB 61 F5 | 	xor	result1, local05
0b09c     FD 12 02 F6 | 	mov	arg01, result1
0b0a0     0C 4E 05 F1 | 	add	fp, #12
0b0a4     A7 14 02 FB | 	rdlong	arg02, fp
0b0a8     0C 4E 85 F1 | 	sub	fp, #12
0b0ac     AC C2 B0 FD | 	call	#__system___float_add
0b0b0     A7 FA 61 FC | 	wrlong	result1, fp
0b0b4     08 4E 05 F1 | 	add	fp, #8
0b0b8     A7 3C 68 FC | 	wrlong	#30, fp
0b0bc     08 4E 85 F1 | 	sub	fp, #8
0b0c0     A8 01 90 FD | 	jmp	#LR__0922
0b0c4                 | LR__0915
0b0c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b0c4     08 4E 05 F1 | 	add	fp, #8
0b0c8     A7 1E 02 FB | 	rdlong	local01, fp
0b0cc     08 4E 85 F1 | 	sub	fp, #8
0b0d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b0d4     14 4E 05 A1 |  if_e	add	fp, #20
0b0d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b0dc     14 4E 85 A1 |  if_e	sub	fp, #20
0b0e0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b0e4     28 00 90 5D |  if_ne	jmp	#LR__0916
0b0e8     A7 1E 02 FB | 	rdlong	local01, fp
0b0ec     0C 4E 05 F1 | 	add	fp, #12
0b0f0     A7 12 02 FB | 	rdlong	arg01, fp
0b0f4     0C 4E 85 F1 | 	sub	fp, #12
0b0f8     2C C2 B0 FD | 	call	#__system___float_fromuns
0b0fc     FD 14 02 F6 | 	mov	arg02, result1
0b100     0F 13 02 F6 | 	mov	arg01, local01
0b104     54 C2 B0 FD | 	call	#__system___float_add
0b108     A7 FA 61 FC | 	wrlong	result1, fp
0b10c     5C 01 90 FD | 	jmp	#LR__0922
0b110                 | LR__0916
0b110                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b110     08 4E 05 F1 | 	add	fp, #8
0b114     A7 1E 02 FB | 	rdlong	local01, fp
0b118     08 4E 85 F1 | 	sub	fp, #8
0b11c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b120     14 4E 05 A1 |  if_e	add	fp, #20
0b124     A7 22 02 AB |  if_e	rdlong	local03, fp
0b128     14 4E 85 A1 |  if_e	sub	fp, #20
0b12c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b130     38 00 90 5D |  if_ne	jmp	#LR__0917
0b134     A7 1E 02 FB | 	rdlong	local01, fp
0b138     0C 4E 05 F1 | 	add	fp, #12
0b13c     A7 12 02 FB | 	rdlong	arg01, fp
0b140     0C 4E 85 F1 | 	sub	fp, #12
0b144     09 13 52 F6 | 	abs	arg01, arg01 wc
0b148     1F 26 C6 C9 |  if_b	decod	local05, #31
0b14c     00 26 06 36 |  if_ae	mov	local05, #0
0b150     D4 C1 B0 FD | 	call	#__system___float_fromuns
0b154     13 FB 61 F5 | 	xor	result1, local05
0b158     FD 14 02 F6 | 	mov	arg02, result1
0b15c     0F 13 02 F6 | 	mov	arg01, local01
0b160     F8 C1 B0 FD | 	call	#__system___float_add
0b164     A7 FA 61 FC | 	wrlong	result1, fp
0b168     00 01 90 FD | 	jmp	#LR__0922
0b16c                 | LR__0917
0b16c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b16c     08 4E 05 F1 | 	add	fp, #8
0b170     A7 1E 02 FB | 	rdlong	local01, fp
0b174     08 4E 85 F1 | 	sub	fp, #8
0b178     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b17c     14 4E 05 A1 |  if_e	add	fp, #20
0b180     A7 22 02 AB |  if_e	rdlong	local03, fp
0b184     14 4E 85 A1 |  if_e	sub	fp, #20
0b188     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b18c     1C 00 90 5D |  if_ne	jmp	#LR__0918
0b190     A7 12 02 FB | 	rdlong	arg01, fp
0b194     0C 4E 05 F1 | 	add	fp, #12
0b198     A7 14 02 FB | 	rdlong	arg02, fp
0b19c     0C 4E 85 F1 | 	sub	fp, #12
0b1a0     B8 C1 B0 FD | 	call	#__system___float_add
0b1a4     A7 FA 61 FC | 	wrlong	result1, fp
0b1a8     C0 00 90 FD | 	jmp	#LR__0922
0b1ac                 | LR__0918
0b1ac                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b1ac     08 4E 05 F1 | 	add	fp, #8
0b1b0     A7 1E 02 FB | 	rdlong	local01, fp
0b1b4     08 4E 85 F1 | 	sub	fp, #8
0b1b8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b1bc     24 00 90 5D |  if_ne	jmp	#LR__0919
0b1c0     14 4E 05 F1 | 	add	fp, #20
0b1c4     A7 22 02 FB | 	rdlong	local03, fp
0b1c8     14 4E 85 F1 | 	sub	fp, #20
0b1cc     1F 22 0E F2 | 	cmp	local03, #31 wz
0b1d0     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b1d4     08 4E 05 51 |  if_ne	add	fp, #8
0b1d8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b1dc     08 4E 85 51 |  if_ne	sub	fp, #8
0b1e0     88 00 90 5D |  if_ne	jmp	#LR__0922
0b1e4                 | LR__0919
0b1e4                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b1e4     14 4E 05 F1 | 	add	fp, #20
0b1e8     A7 1E 02 FB | 	rdlong	local01, fp
0b1ec     14 4E 85 F1 | 	sub	fp, #20
0b1f0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b1f4     24 00 90 5D |  if_ne	jmp	#LR__0920
0b1f8     08 4E 05 F1 | 	add	fp, #8
0b1fc     A7 22 02 FB | 	rdlong	local03, fp
0b200     08 4E 85 F1 | 	sub	fp, #8
0b204     1F 22 0E F2 | 	cmp	local03, #31 wz
0b208     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b20c     08 4E 05 51 |  if_ne	add	fp, #8
0b210     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b214     08 4E 85 51 |  if_ne	sub	fp, #8
0b218     50 00 90 5D |  if_ne	jmp	#LR__0922
0b21c                 | LR__0920
0b21c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b21c     08 4E 05 F1 | 	add	fp, #8
0b220     A7 1E 02 FB | 	rdlong	local01, fp
0b224     08 4E 85 F1 | 	sub	fp, #8
0b228     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b22c     14 4E 05 A1 |  if_e	add	fp, #20
0b230     A7 22 02 AB |  if_e	rdlong	local03, fp
0b234     14 4E 85 A1 |  if_e	sub	fp, #20
0b238     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b23c     1C 00 90 5D |  if_ne	jmp	#LR__0921
0b240     A7 12 02 FB | 	rdlong	arg01, fp
0b244     0C 4E 05 F1 | 	add	fp, #12
0b248     A7 14 02 FB | 	rdlong	arg02, fp
0b24c     0C 4E 85 F1 | 	sub	fp, #12
0b250     48 9A B0 FD | 	call	#__system___string_concat
0b254     A7 FA 61 FC | 	wrlong	result1, fp
0b258     10 00 90 FD | 	jmp	#LR__0922
0b25c                 | LR__0921
0b25c     A7 08 68 FC | 	wrlong	#4, fp
0b260     08 4E 05 F1 | 	add	fp, #8
0b264     A7 FE 69 FC | 	wrlong	#255, fp
0b268     08 4E 85 F1 | 	sub	fp, #8
0b26c                 | LR__0922
0b26c     A7 12 02 F6 | 	mov	arg01, fp
0b270     A4 D4 BF FD | 	call	#_push
0b274     A7 F0 03 F6 | 	mov	ptra, fp
0b278     B2 00 A0 FD | 	call	#popregs_
0b27c                 | _do_plus_ret
0b27c     2D 00 64 FD | 	ret
0b280                 | 
0b280                 | ' 
0b280                 | ' sub do_minus
0b280                 | _do_minus
0b280     05 4A 05 F6 | 	mov	COUNT_, #5
0b284     A8 00 A0 FD | 	call	#pushregs_
0b288     18 F0 07 F1 | 	add	ptra, #24
0b28c     F0 D3 BF FD | 	call	#_pop
0b290     FD 1E 02 F6 | 	mov	local01, result1
0b294     FE 20 02 F6 | 	mov	local02, result2
0b298     FF 22 02 F6 | 	mov	local03, result3
0b29c     0C 4E 05 F1 | 	add	fp, #12
0b2a0     A7 1E 62 FC | 	wrlong	local01, fp
0b2a4     04 4E 05 F1 | 	add	fp, #4
0b2a8     A7 20 62 FC | 	wrlong	local02, fp
0b2ac     04 4E 05 F1 | 	add	fp, #4
0b2b0     A7 22 62 FC | 	wrlong	local03, fp
0b2b4     14 4E 85 F1 | 	sub	fp, #20
0b2b8     C4 D3 BF FD | 	call	#_pop
0b2bc     FF 22 02 F6 | 	mov	local03, result3
0b2c0     A7 FA 61 FC | 	wrlong	result1, fp
0b2c4     04 4E 05 F1 | 	add	fp, #4
0b2c8     A7 FC 61 FC | 	wrlong	result2, fp
0b2cc     04 4E 05 F1 | 	add	fp, #4
0b2d0     A7 22 62 FC | 	wrlong	local03, fp
0b2d4                 | ' 
0b2d4                 | ' t2=pop()
0b2d4                 | ' t1=pop()
0b2d4                 | ' 
0b2d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0b2d4     08 4E 85 F1 | 	sub	fp, #8
0b2d8     1D 22 0E F2 | 	cmp	local03, #29 wz
0b2dc     14 4E 05 A1 |  if_e	add	fp, #20
0b2e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b2e4     14 4E 85 A1 |  if_e	sub	fp, #20
0b2e8     12 23 02 A6 |  if_e	mov	local03, local04
0b2ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b2f0     5C 00 90 5D |  if_ne	jmp	#LR__0931
0b2f4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0b2f4     0C 4E 05 F1 | 	add	fp, #12
0b2f8     A7 1E 02 FB | 	rdlong	local01, fp
0b2fc     0C 4E 85 F1 | 	sub	fp, #12
0b300     A7 22 02 FB | 	rdlong	local03, fp
0b304     11 1F 12 F2 | 	cmp	local01, local03 wc
0b308     1C 00 90 3D |  if_ae	jmp	#LR__0930
0b30c     A7 1E 02 FB | 	rdlong	local01, fp
0b310     0C 4E 05 F1 | 	add	fp, #12
0b314     A7 20 02 FB | 	rdlong	local02, fp
0b318     0C 4E 85 F1 | 	sub	fp, #12
0b31c     10 1F 82 F1 | 	sub	local01, local02
0b320     A7 1E 62 FC | 	wrlong	local01, fp
0b324     F4 02 90 FD | 	jmp	#LR__0940
0b328                 | LR__0930
0b328     A7 1E 02 FB | 	rdlong	local01, fp
0b32c     0C 4E 05 F1 | 	add	fp, #12
0b330     A7 20 02 FB | 	rdlong	local02, fp
0b334     0C 4E 85 F1 | 	sub	fp, #12
0b338     10 1F 82 F1 | 	sub	local01, local02
0b33c     A7 1E 62 FC | 	wrlong	local01, fp
0b340     08 4E 05 F1 | 	add	fp, #8
0b344     A7 38 68 FC | 	wrlong	#28, fp
0b348     08 4E 85 F1 | 	sub	fp, #8
0b34c     CC 02 90 FD | 	jmp	#LR__0940
0b350                 | LR__0931
0b350                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0b350     08 4E 05 F1 | 	add	fp, #8
0b354     A7 1E 02 FB | 	rdlong	local01, fp
0b358     08 4E 85 F1 | 	sub	fp, #8
0b35c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b360     14 4E 05 A1 |  if_e	add	fp, #20
0b364     A7 24 02 AB |  if_e	rdlong	local04, fp
0b368     14 4E 85 A1 |  if_e	sub	fp, #20
0b36c     12 23 02 A6 |  if_e	mov	local03, local04
0b370     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b374     28 00 90 5D |  if_ne	jmp	#LR__0932
0b378     A7 1E 02 FB | 	rdlong	local01, fp
0b37c     0C 4E 05 F1 | 	add	fp, #12
0b380     A7 20 02 FB | 	rdlong	local02, fp
0b384     0C 4E 85 F1 | 	sub	fp, #12
0b388     10 1F 82 F1 | 	sub	local01, local02
0b38c     A7 1E 62 FC | 	wrlong	local01, fp
0b390     08 4E 05 F1 | 	add	fp, #8
0b394     A7 38 68 FC | 	wrlong	#28, fp
0b398     08 4E 85 F1 | 	sub	fp, #8
0b39c     7C 02 90 FD | 	jmp	#LR__0940
0b3a0                 | LR__0932
0b3a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b3a0     08 4E 05 F1 | 	add	fp, #8
0b3a4     A7 1E 02 FB | 	rdlong	local01, fp
0b3a8     08 4E 85 F1 | 	sub	fp, #8
0b3ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b3b0     14 4E 05 A1 |  if_e	add	fp, #20
0b3b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0b3b8     14 4E 85 A1 |  if_e	sub	fp, #20
0b3bc     12 23 02 A6 |  if_e	mov	local03, local04
0b3c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b3c4     34 00 90 5D |  if_ne	jmp	#LR__0933
0b3c8     A7 12 02 FB | 	rdlong	arg01, fp
0b3cc     58 BF B0 FD | 	call	#__system___float_fromuns
0b3d0     FD 12 02 F6 | 	mov	arg01, result1
0b3d4     0C 4E 05 F1 | 	add	fp, #12
0b3d8     A7 14 02 FB | 	rdlong	arg02, fp
0b3dc     0C 4E 85 F1 | 	sub	fp, #12
0b3e0     1F 14 E6 F4 | 	bitnot	arg02, #31
0b3e4     74 BF B0 FD | 	call	#__system___float_add
0b3e8     A7 FA 61 FC | 	wrlong	result1, fp
0b3ec     08 4E 05 F1 | 	add	fp, #8
0b3f0     A7 3C 68 FC | 	wrlong	#30, fp
0b3f4     08 4E 85 F1 | 	sub	fp, #8
0b3f8     20 02 90 FD | 	jmp	#LR__0940
0b3fc                 | LR__0933
0b3fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0b3fc     08 4E 05 F1 | 	add	fp, #8
0b400     A7 1E 02 FB | 	rdlong	local01, fp
0b404     08 4E 85 F1 | 	sub	fp, #8
0b408     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b40c     14 4E 05 A1 |  if_e	add	fp, #20
0b410     A7 24 02 AB |  if_e	rdlong	local04, fp
0b414     14 4E 85 A1 |  if_e	sub	fp, #20
0b418     12 23 02 A6 |  if_e	mov	local03, local04
0b41c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b420     1C 00 90 5D |  if_ne	jmp	#LR__0934
0b424     A7 1E 02 FB | 	rdlong	local01, fp
0b428     0C 4E 05 F1 | 	add	fp, #12
0b42c     A7 20 02 FB | 	rdlong	local02, fp
0b430     0C 4E 85 F1 | 	sub	fp, #12
0b434     10 1F 82 F1 | 	sub	local01, local02
0b438     A7 1E 62 FC | 	wrlong	local01, fp
0b43c     DC 01 90 FD | 	jmp	#LR__0940
0b440                 | LR__0934
0b440                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0b440     08 4E 05 F1 | 	add	fp, #8
0b444     A7 1E 02 FB | 	rdlong	local01, fp
0b448     08 4E 85 F1 | 	sub	fp, #8
0b44c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b450     14 4E 05 A1 |  if_e	add	fp, #20
0b454     A7 24 02 AB |  if_e	rdlong	local04, fp
0b458     14 4E 85 A1 |  if_e	sub	fp, #20
0b45c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0b460     1C 00 90 5D |  if_ne	jmp	#LR__0935
0b464     A7 1E 02 FB | 	rdlong	local01, fp
0b468     0C 4E 05 F1 | 	add	fp, #12
0b46c     A7 20 02 FB | 	rdlong	local02, fp
0b470     0C 4E 85 F1 | 	sub	fp, #12
0b474     10 1F 82 F1 | 	sub	local01, local02
0b478     A7 1E 62 FC | 	wrlong	local01, fp
0b47c     9C 01 90 FD | 	jmp	#LR__0940
0b480                 | LR__0935
0b480                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b480     08 4E 05 F1 | 	add	fp, #8
0b484     A7 1E 02 FB | 	rdlong	local01, fp
0b488     08 4E 85 F1 | 	sub	fp, #8
0b48c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b490     14 4E 05 A1 |  if_e	add	fp, #20
0b494     A7 22 02 AB |  if_e	rdlong	local03, fp
0b498     14 4E 85 A1 |  if_e	sub	fp, #20
0b49c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b4a0     44 00 90 5D |  if_ne	jmp	#LR__0936
0b4a4     A7 12 02 FB | 	rdlong	arg01, fp
0b4a8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b4ac     1F 26 C6 C9 |  if_b	decod	local05, #31
0b4b0     00 26 06 36 |  if_ae	mov	local05, #0
0b4b4     70 BE B0 FD | 	call	#__system___float_fromuns
0b4b8     13 FB 61 F5 | 	xor	result1, local05
0b4bc     FD 12 02 F6 | 	mov	arg01, result1
0b4c0     0C 4E 05 F1 | 	add	fp, #12
0b4c4     A7 14 02 FB | 	rdlong	arg02, fp
0b4c8     0C 4E 85 F1 | 	sub	fp, #12
0b4cc     1F 14 E6 F4 | 	bitnot	arg02, #31
0b4d0     88 BE B0 FD | 	call	#__system___float_add
0b4d4     A7 FA 61 FC | 	wrlong	result1, fp
0b4d8     08 4E 05 F1 | 	add	fp, #8
0b4dc     A7 3C 68 FC | 	wrlong	#30, fp
0b4e0     08 4E 85 F1 | 	sub	fp, #8
0b4e4     34 01 90 FD | 	jmp	#LR__0940
0b4e8                 | LR__0936
0b4e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0b4e8     08 4E 05 F1 | 	add	fp, #8
0b4ec     A7 1E 02 FB | 	rdlong	local01, fp
0b4f0     08 4E 85 F1 | 	sub	fp, #8
0b4f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b4f8     14 4E 05 A1 |  if_e	add	fp, #20
0b4fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0b500     14 4E 85 A1 |  if_e	sub	fp, #20
0b504     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b508     2C 00 90 5D |  if_ne	jmp	#LR__0937
0b50c     A7 1E 02 FB | 	rdlong	local01, fp
0b510     0C 4E 05 F1 | 	add	fp, #12
0b514     A7 12 02 FB | 	rdlong	arg01, fp
0b518     0C 4E 85 F1 | 	sub	fp, #12
0b51c     08 BE B0 FD | 	call	#__system___float_fromuns
0b520     FD 14 02 F6 | 	mov	arg02, result1
0b524     0F 13 02 F6 | 	mov	arg01, local01
0b528     1F 14 E6 F4 | 	bitnot	arg02, #31
0b52c     2C BE B0 FD | 	call	#__system___float_add
0b530     A7 FA 61 FC | 	wrlong	result1, fp
0b534     E4 00 90 FD | 	jmp	#LR__0940
0b538                 | LR__0937
0b538                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0b538     08 4E 05 F1 | 	add	fp, #8
0b53c     A7 1E 02 FB | 	rdlong	local01, fp
0b540     08 4E 85 F1 | 	sub	fp, #8
0b544     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b548     14 4E 05 A1 |  if_e	add	fp, #20
0b54c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b550     14 4E 85 A1 |  if_e	sub	fp, #20
0b554     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b558     3C 00 90 5D |  if_ne	jmp	#LR__0938
0b55c     A7 1E 02 FB | 	rdlong	local01, fp
0b560     0C 4E 05 F1 | 	add	fp, #12
0b564     A7 12 02 FB | 	rdlong	arg01, fp
0b568     0C 4E 85 F1 | 	sub	fp, #12
0b56c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b570     1F 26 C6 C9 |  if_b	decod	local05, #31
0b574     00 26 06 36 |  if_ae	mov	local05, #0
0b578     AC BD B0 FD | 	call	#__system___float_fromuns
0b57c     13 FB 61 F5 | 	xor	result1, local05
0b580     FD 14 02 F6 | 	mov	arg02, result1
0b584     0F 13 02 F6 | 	mov	arg01, local01
0b588     1F 14 E6 F4 | 	bitnot	arg02, #31
0b58c     CC BD B0 FD | 	call	#__system___float_add
0b590     A7 FA 61 FC | 	wrlong	result1, fp
0b594     84 00 90 FD | 	jmp	#LR__0940
0b598                 | LR__0938
0b598                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0b598     08 4E 05 F1 | 	add	fp, #8
0b59c     A7 1E 02 FB | 	rdlong	local01, fp
0b5a0     08 4E 85 F1 | 	sub	fp, #8
0b5a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b5a8     14 4E 05 A1 |  if_e	add	fp, #20
0b5ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0b5b0     14 4E 85 A1 |  if_e	sub	fp, #20
0b5b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b5b8     20 00 90 5D |  if_ne	jmp	#LR__0939
0b5bc     A7 12 02 FB | 	rdlong	arg01, fp
0b5c0     0C 4E 05 F1 | 	add	fp, #12
0b5c4     A7 14 02 FB | 	rdlong	arg02, fp
0b5c8     0C 4E 85 F1 | 	sub	fp, #12
0b5cc     1F 14 E6 F4 | 	bitnot	arg02, #31
0b5d0     88 BD B0 FD | 	call	#__system___float_add
0b5d4     A7 FA 61 FC | 	wrlong	result1, fp
0b5d8     40 00 90 FD | 	jmp	#LR__0940
0b5dc                 | LR__0939
0b5dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0b5dc     08 4E 05 F1 | 	add	fp, #8
0b5e0     A7 1E 02 FB | 	rdlong	local01, fp
0b5e4     08 4E 85 F1 | 	sub	fp, #8
0b5e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b5ec     14 4E 05 51 |  if_ne	add	fp, #20
0b5f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b5f4     14 4E 85 51 |  if_ne	sub	fp, #20
0b5f8     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0b5fc     A7 06 68 AC |  if_e	wrlong	#3, fp
0b600     08 4E 05 A1 |  if_e	add	fp, #8
0b604     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b608     08 4E 85 A1 |  if_e	sub	fp, #8
0b60c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0b610     08 4E 05 51 |  if_ne	add	fp, #8
0b614     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b618     08 4E 85 51 |  if_ne	sub	fp, #8
0b61c                 | LR__0940
0b61c     A7 12 02 F6 | 	mov	arg01, fp
0b620     F4 D0 BF FD | 	call	#_push
0b624     A7 F0 03 F6 | 	mov	ptra, fp
0b628     B2 00 A0 FD | 	call	#popregs_
0b62c                 | _do_minus_ret
0b62c     2D 00 64 FD | 	ret
0b630                 | 
0b630                 | ' 
0b630                 | ' sub do_and 
0b630                 | _do_and
0b630     03 4A 05 F6 | 	mov	COUNT_, #3
0b634     A8 00 A0 FD | 	call	#pushregs_
0b638     18 F0 07 F1 | 	add	ptra, #24
0b63c     40 D0 BF FD | 	call	#_pop
0b640     FD 12 02 F6 | 	mov	arg01, result1
0b644     FE 1E 02 F6 | 	mov	local01, result2
0b648     FF 20 02 F6 | 	mov	local02, result3
0b64c     0C 4E 05 F1 | 	add	fp, #12
0b650     A7 12 62 FC | 	wrlong	arg01, fp
0b654     04 4E 05 F1 | 	add	fp, #4
0b658     A7 1E 62 FC | 	wrlong	local01, fp
0b65c     04 4E 05 F1 | 	add	fp, #4
0b660     A7 20 62 FC | 	wrlong	local02, fp
0b664     14 4E 85 F1 | 	sub	fp, #20
0b668     14 D0 BF FD | 	call	#_pop
0b66c     FF 22 02 F6 | 	mov	local03, result3
0b670     A7 FA 61 FC | 	wrlong	result1, fp
0b674     04 4E 05 F1 | 	add	fp, #4
0b678     A7 FC 61 FC | 	wrlong	result2, fp
0b67c     04 4E 05 F1 | 	add	fp, #4
0b680     A7 22 62 FC | 	wrlong	local03, fp
0b684                 | ' 
0b684                 | ' t2=pop()
0b684                 | ' t1=pop()
0b684                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b684     08 4E 85 F1 | 	sub	fp, #8
0b688     1C 22 0E F2 | 	cmp	local03, #28 wz
0b68c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b690     A7 22 62 AC |  if_e	wrlong	local03, fp
0b694     08 4E 05 A1 |  if_e	add	fp, #8
0b698     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b69c     08 4E 85 A1 |  if_e	sub	fp, #8
0b6a0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b6a0     14 4E 05 F1 | 	add	fp, #20
0b6a4     A7 22 02 FB | 	rdlong	local03, fp
0b6a8     14 4E 85 F1 | 	sub	fp, #20
0b6ac     1C 22 0E F2 | 	cmp	local03, #28 wz
0b6b0     18 00 90 5D |  if_ne	jmp	#LR__0950
0b6b4     0C 4E 05 F1 | 	add	fp, #12
0b6b8     A7 22 02 FB | 	rdlong	local03, fp
0b6bc     A7 22 62 FC | 	wrlong	local03, fp
0b6c0     08 4E 05 F1 | 	add	fp, #8
0b6c4     A7 3A 68 FC | 	wrlong	#29, fp
0b6c8     14 4E 85 F1 | 	sub	fp, #20
0b6cc                 | LR__0950
0b6cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0b6cc     08 4E 05 F1 | 	add	fp, #8
0b6d0     A7 22 02 FB | 	rdlong	local03, fp
0b6d4     08 4E 85 F1 | 	sub	fp, #8
0b6d8     1F 22 0E F2 | 	cmp	local03, #31 wz
0b6dc     14 4E 05 51 |  if_ne	add	fp, #20
0b6e0     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b6e4     14 4E 85 51 |  if_ne	sub	fp, #20
0b6e8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b6ec     08 4E 05 51 |  if_ne	add	fp, #8
0b6f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b6f4     08 4E 85 51 |  if_ne	sub	fp, #8
0b6f8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b6fc     14 4E 05 51 |  if_ne	add	fp, #20
0b700     14 4E 85 51 |  if_ne	sub	fp, #20
0b704     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b708     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b70c     08 4E 05 A1 |  if_e	add	fp, #8
0b710     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b714     08 4E 85 A1 |  if_e	sub	fp, #8
0b718     18 00 90 AD |  if_e	jmp	#LR__0951
0b71c     A7 22 02 FB | 	rdlong	local03, fp
0b720     0C 4E 05 F1 | 	add	fp, #12
0b724     A7 1E 02 FB | 	rdlong	local01, fp
0b728     0C 4E 85 F1 | 	sub	fp, #12
0b72c     0F 23 02 F5 | 	and	local03, local01
0b730     A7 22 62 FC | 	wrlong	local03, fp
0b734                 | LR__0951
0b734     A7 12 02 F6 | 	mov	arg01, fp
0b738     DC CF BF FD | 	call	#_push
0b73c     A7 F0 03 F6 | 	mov	ptra, fp
0b740     B2 00 A0 FD | 	call	#popregs_
0b744                 | _do_and_ret
0b744     2D 00 64 FD | 	ret
0b748                 | 
0b748                 | ' 
0b748                 | ' sub do_or 
0b748                 | _do_or
0b748     03 4A 05 F6 | 	mov	COUNT_, #3
0b74c     A8 00 A0 FD | 	call	#pushregs_
0b750     18 F0 07 F1 | 	add	ptra, #24
0b754     28 CF BF FD | 	call	#_pop
0b758     FD 12 02 F6 | 	mov	arg01, result1
0b75c     FE 1E 02 F6 | 	mov	local01, result2
0b760     FF 20 02 F6 | 	mov	local02, result3
0b764     0C 4E 05 F1 | 	add	fp, #12
0b768     A7 12 62 FC | 	wrlong	arg01, fp
0b76c     04 4E 05 F1 | 	add	fp, #4
0b770     A7 1E 62 FC | 	wrlong	local01, fp
0b774     04 4E 05 F1 | 	add	fp, #4
0b778     A7 20 62 FC | 	wrlong	local02, fp
0b77c     14 4E 85 F1 | 	sub	fp, #20
0b780     FC CE BF FD | 	call	#_pop
0b784     FF 22 02 F6 | 	mov	local03, result3
0b788     A7 FA 61 FC | 	wrlong	result1, fp
0b78c     04 4E 05 F1 | 	add	fp, #4
0b790     A7 FC 61 FC | 	wrlong	result2, fp
0b794     04 4E 05 F1 | 	add	fp, #4
0b798     A7 22 62 FC | 	wrlong	local03, fp
0b79c                 | ' 
0b79c                 | ' t2=pop()
0b79c                 | ' t1=pop()
0b79c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b79c     08 4E 85 F1 | 	sub	fp, #8
0b7a0     1C 22 0E F2 | 	cmp	local03, #28 wz
0b7a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b7a8     A7 22 62 AC |  if_e	wrlong	local03, fp
0b7ac     08 4E 05 A1 |  if_e	add	fp, #8
0b7b0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b7b4     08 4E 85 A1 |  if_e	sub	fp, #8
0b7b8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b7b8     14 4E 05 F1 | 	add	fp, #20
0b7bc     A7 22 02 FB | 	rdlong	local03, fp
0b7c0     14 4E 85 F1 | 	sub	fp, #20
0b7c4     1C 22 0E F2 | 	cmp	local03, #28 wz
0b7c8     18 00 90 5D |  if_ne	jmp	#LR__0960
0b7cc     0C 4E 05 F1 | 	add	fp, #12
0b7d0     A7 22 02 FB | 	rdlong	local03, fp
0b7d4     A7 22 62 FC | 	wrlong	local03, fp
0b7d8     08 4E 05 F1 | 	add	fp, #8
0b7dc     A7 3A 68 FC | 	wrlong	#29, fp
0b7e0     14 4E 85 F1 | 	sub	fp, #20
0b7e4                 | LR__0960
0b7e4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0b7e4     08 4E 05 F1 | 	add	fp, #8
0b7e8     A7 22 02 FB | 	rdlong	local03, fp
0b7ec     08 4E 85 F1 | 	sub	fp, #8
0b7f0     1F 22 0E F2 | 	cmp	local03, #31 wz
0b7f4     14 4E 05 51 |  if_ne	add	fp, #20
0b7f8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b7fc     14 4E 85 51 |  if_ne	sub	fp, #20
0b800     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b804     08 4E 05 51 |  if_ne	add	fp, #8
0b808     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b80c     08 4E 85 51 |  if_ne	sub	fp, #8
0b810     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b814     14 4E 05 51 |  if_ne	add	fp, #20
0b818     14 4E 85 51 |  if_ne	sub	fp, #20
0b81c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b820     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b824     08 4E 05 A1 |  if_e	add	fp, #8
0b828     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b82c     08 4E 85 A1 |  if_e	sub	fp, #8
0b830     18 00 90 AD |  if_e	jmp	#LR__0961
0b834     A7 22 02 FB | 	rdlong	local03, fp
0b838     0C 4E 05 F1 | 	add	fp, #12
0b83c     A7 1E 02 FB | 	rdlong	local01, fp
0b840     0C 4E 85 F1 | 	sub	fp, #12
0b844     0F 23 42 F5 | 	or	local03, local01
0b848     A7 22 62 FC | 	wrlong	local03, fp
0b84c                 | LR__0961
0b84c     A7 12 02 F6 | 	mov	arg01, fp
0b850     C4 CE BF FD | 	call	#_push
0b854     A7 F0 03 F6 | 	mov	ptra, fp
0b858     B2 00 A0 FD | 	call	#popregs_
0b85c                 | _do_or_ret
0b85c     2D 00 64 FD | 	ret
0b860                 | 
0b860                 | ' 
0b860                 | ' sub do_mul
0b860                 | _do_mul
0b860     05 4A 05 F6 | 	mov	COUNT_, #5
0b864     A8 00 A0 FD | 	call	#pushregs_
0b868     18 F0 07 F1 | 	add	ptra, #24
0b86c     10 CE BF FD | 	call	#_pop
0b870     FD 1E 02 F6 | 	mov	local01, result1
0b874     FE 20 02 F6 | 	mov	local02, result2
0b878     FF 22 02 F6 | 	mov	local03, result3
0b87c     0C 4E 05 F1 | 	add	fp, #12
0b880     A7 1E 62 FC | 	wrlong	local01, fp
0b884     04 4E 05 F1 | 	add	fp, #4
0b888     A7 20 62 FC | 	wrlong	local02, fp
0b88c     04 4E 05 F1 | 	add	fp, #4
0b890     A7 22 62 FC | 	wrlong	local03, fp
0b894     14 4E 85 F1 | 	sub	fp, #20
0b898     E4 CD BF FD | 	call	#_pop
0b89c     FF 22 02 F6 | 	mov	local03, result3
0b8a0     A7 FA 61 FC | 	wrlong	result1, fp
0b8a4     04 4E 05 F1 | 	add	fp, #4
0b8a8     A7 FC 61 FC | 	wrlong	result2, fp
0b8ac     04 4E 05 F1 | 	add	fp, #4
0b8b0     A7 22 62 FC | 	wrlong	local03, fp
0b8b4                 | ' 
0b8b4                 | ' t2=pop()
0b8b4                 | ' t1=pop()
0b8b4                 | ' 
0b8b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0b8b4     08 4E 85 F1 | 	sub	fp, #8
0b8b8     1D 22 0E F2 | 	cmp	local03, #29 wz
0b8bc     14 4E 05 A1 |  if_e	add	fp, #20
0b8c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8c4     14 4E 85 A1 |  if_e	sub	fp, #20
0b8c8     12 23 02 A6 |  if_e	mov	local03, local04
0b8cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b8d0     20 00 90 5D |  if_ne	jmp	#LR__0970
0b8d4     A7 20 02 FB | 	rdlong	local02, fp
0b8d8     0C 4E 05 F1 | 	add	fp, #12
0b8dc     A7 22 02 FB | 	rdlong	local03, fp
0b8e0     11 21 02 FD | 	qmul	local02, local03
0b8e4     0C 4E 85 F1 | 	sub	fp, #12
0b8e8     18 1E 62 FD | 	getqx	local01
0b8ec     A7 1E 62 FC | 	wrlong	local01, fp
0b8f0     C4 02 90 FD | 	jmp	#LR__0979
0b8f4                 | LR__0970
0b8f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0b8f4     08 4E 05 F1 | 	add	fp, #8
0b8f8     A7 1E 02 FB | 	rdlong	local01, fp
0b8fc     08 4E 85 F1 | 	sub	fp, #8
0b900     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b904     14 4E 05 A1 |  if_e	add	fp, #20
0b908     A7 24 02 AB |  if_e	rdlong	local04, fp
0b90c     14 4E 85 A1 |  if_e	sub	fp, #20
0b910     12 23 02 A6 |  if_e	mov	local03, local04
0b914     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b918     2C 00 90 5D |  if_ne	jmp	#LR__0971
0b91c     A7 20 02 FB | 	rdlong	local02, fp
0b920     0C 4E 05 F1 | 	add	fp, #12
0b924     A7 22 02 FB | 	rdlong	local03, fp
0b928     11 21 02 FD | 	qmul	local02, local03
0b92c     0C 4E 85 F1 | 	sub	fp, #12
0b930     18 1E 62 FD | 	getqx	local01
0b934     A7 1E 62 FC | 	wrlong	local01, fp
0b938     08 4E 05 F1 | 	add	fp, #8
0b93c     A7 38 68 FC | 	wrlong	#28, fp
0b940     08 4E 85 F1 | 	sub	fp, #8
0b944     70 02 90 FD | 	jmp	#LR__0979
0b948                 | LR__0971
0b948                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0b948     08 4E 05 F1 | 	add	fp, #8
0b94c     A7 1E 02 FB | 	rdlong	local01, fp
0b950     08 4E 85 F1 | 	sub	fp, #8
0b954     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b958     14 4E 05 A1 |  if_e	add	fp, #20
0b95c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b960     14 4E 85 A1 |  if_e	sub	fp, #20
0b964     12 23 02 A6 |  if_e	mov	local03, local04
0b968     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b96c     30 00 90 5D |  if_ne	jmp	#LR__0972
0b970     A7 12 02 FB | 	rdlong	arg01, fp
0b974     B0 B9 B0 FD | 	call	#__system___float_fromuns
0b978     FD 12 02 F6 | 	mov	arg01, result1
0b97c     0C 4E 05 F1 | 	add	fp, #12
0b980     A7 14 02 FB | 	rdlong	arg02, fp
0b984     0C 4E 85 F1 | 	sub	fp, #12
0b988     C8 BC B0 FD | 	call	#__system___float_mul
0b98c     A7 FA 61 FC | 	wrlong	result1, fp
0b990     08 4E 05 F1 | 	add	fp, #8
0b994     A7 3C 68 FC | 	wrlong	#30, fp
0b998     08 4E 85 F1 | 	sub	fp, #8
0b99c     18 02 90 FD | 	jmp	#LR__0979
0b9a0                 | LR__0972
0b9a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0b9a0     08 4E 05 F1 | 	add	fp, #8
0b9a4     A7 1E 02 FB | 	rdlong	local01, fp
0b9a8     08 4E 85 F1 | 	sub	fp, #8
0b9ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b9b0     14 4E 05 A1 |  if_e	add	fp, #20
0b9b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0b9b8     14 4E 85 A1 |  if_e	sub	fp, #20
0b9bc     12 23 02 A6 |  if_e	mov	local03, local04
0b9c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b9c4     20 00 90 5D |  if_ne	jmp	#LR__0973
0b9c8     A7 20 02 FB | 	rdlong	local02, fp
0b9cc     0C 4E 05 F1 | 	add	fp, #12
0b9d0     A7 22 02 FB | 	rdlong	local03, fp
0b9d4     11 21 02 FD | 	qmul	local02, local03
0b9d8     0C 4E 85 F1 | 	sub	fp, #12
0b9dc     18 1E 62 FD | 	getqx	local01
0b9e0     A7 1E 62 FC | 	wrlong	local01, fp
0b9e4     D0 01 90 FD | 	jmp	#LR__0979
0b9e8                 | LR__0973
0b9e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0b9e8     08 4E 05 F1 | 	add	fp, #8
0b9ec     A7 1E 02 FB | 	rdlong	local01, fp
0b9f0     08 4E 85 F1 | 	sub	fp, #8
0b9f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b9f8     14 4E 05 A1 |  if_e	add	fp, #20
0b9fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba00     14 4E 85 A1 |  if_e	sub	fp, #20
0ba04     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0ba08     20 00 90 5D |  if_ne	jmp	#LR__0974
0ba0c     A7 20 02 FB | 	rdlong	local02, fp
0ba10     0C 4E 05 F1 | 	add	fp, #12
0ba14     A7 22 02 FB | 	rdlong	local03, fp
0ba18     11 21 02 FD | 	qmul	local02, local03
0ba1c     0C 4E 85 F1 | 	sub	fp, #12
0ba20     18 1E 62 FD | 	getqx	local01
0ba24     A7 1E 62 FC | 	wrlong	local01, fp
0ba28     8C 01 90 FD | 	jmp	#LR__0979
0ba2c                 | LR__0974
0ba2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0ba2c     08 4E 05 F1 | 	add	fp, #8
0ba30     A7 1E 02 FB | 	rdlong	local01, fp
0ba34     08 4E 85 F1 | 	sub	fp, #8
0ba38     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba3c     14 4E 05 A1 |  if_e	add	fp, #20
0ba40     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba44     14 4E 85 A1 |  if_e	sub	fp, #20
0ba48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ba4c     40 00 90 5D |  if_ne	jmp	#LR__0975
0ba50     A7 12 02 FB | 	rdlong	arg01, fp
0ba54     09 13 52 F6 | 	abs	arg01, arg01 wc
0ba58     1F 26 C6 C9 |  if_b	decod	local05, #31
0ba5c     00 26 06 36 |  if_ae	mov	local05, #0
0ba60     C4 B8 B0 FD | 	call	#__system___float_fromuns
0ba64     13 FB 61 F5 | 	xor	result1, local05
0ba68     FD 12 02 F6 | 	mov	arg01, result1
0ba6c     0C 4E 05 F1 | 	add	fp, #12
0ba70     A7 14 02 FB | 	rdlong	arg02, fp
0ba74     0C 4E 85 F1 | 	sub	fp, #12
0ba78     D8 BB B0 FD | 	call	#__system___float_mul
0ba7c     A7 FA 61 FC | 	wrlong	result1, fp
0ba80     08 4E 05 F1 | 	add	fp, #8
0ba84     A7 3C 68 FC | 	wrlong	#30, fp
0ba88     08 4E 85 F1 | 	sub	fp, #8
0ba8c     28 01 90 FD | 	jmp	#LR__0979
0ba90                 | LR__0975
0ba90                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0ba90     08 4E 05 F1 | 	add	fp, #8
0ba94     A7 1E 02 FB | 	rdlong	local01, fp
0ba98     08 4E 85 F1 | 	sub	fp, #8
0ba9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0baa0     14 4E 05 A1 |  if_e	add	fp, #20
0baa4     A7 22 02 AB |  if_e	rdlong	local03, fp
0baa8     14 4E 85 A1 |  if_e	sub	fp, #20
0baac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bab0     28 00 90 5D |  if_ne	jmp	#LR__0976
0bab4     A7 1E 02 FB | 	rdlong	local01, fp
0bab8     0C 4E 05 F1 | 	add	fp, #12
0babc     A7 12 02 FB | 	rdlong	arg01, fp
0bac0     0C 4E 85 F1 | 	sub	fp, #12
0bac4     60 B8 B0 FD | 	call	#__system___float_fromuns
0bac8     FD 14 02 F6 | 	mov	arg02, result1
0bacc     0F 13 02 F6 | 	mov	arg01, local01
0bad0     80 BB B0 FD | 	call	#__system___float_mul
0bad4     A7 FA 61 FC | 	wrlong	result1, fp
0bad8     DC 00 90 FD | 	jmp	#LR__0979
0badc                 | LR__0976
0badc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0badc     08 4E 05 F1 | 	add	fp, #8
0bae0     A7 1E 02 FB | 	rdlong	local01, fp
0bae4     08 4E 85 F1 | 	sub	fp, #8
0bae8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0baec     14 4E 05 A1 |  if_e	add	fp, #20
0baf0     A7 22 02 AB |  if_e	rdlong	local03, fp
0baf4     14 4E 85 A1 |  if_e	sub	fp, #20
0baf8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bafc     38 00 90 5D |  if_ne	jmp	#LR__0977
0bb00     A7 1E 02 FB | 	rdlong	local01, fp
0bb04     0C 4E 05 F1 | 	add	fp, #12
0bb08     A7 12 02 FB | 	rdlong	arg01, fp
0bb0c     0C 4E 85 F1 | 	sub	fp, #12
0bb10     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb14     1F 26 C6 C9 |  if_b	decod	local05, #31
0bb18     00 26 06 36 |  if_ae	mov	local05, #0
0bb1c     08 B8 B0 FD | 	call	#__system___float_fromuns
0bb20     13 FB 61 F5 | 	xor	result1, local05
0bb24     FD 14 02 F6 | 	mov	arg02, result1
0bb28     0F 13 02 F6 | 	mov	arg01, local01
0bb2c     24 BB B0 FD | 	call	#__system___float_mul
0bb30     A7 FA 61 FC | 	wrlong	result1, fp
0bb34     80 00 90 FD | 	jmp	#LR__0979
0bb38                 | LR__0977
0bb38                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0bb38     08 4E 05 F1 | 	add	fp, #8
0bb3c     A7 1E 02 FB | 	rdlong	local01, fp
0bb40     08 4E 85 F1 | 	sub	fp, #8
0bb44     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bb48     14 4E 05 A1 |  if_e	add	fp, #20
0bb4c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb50     14 4E 85 A1 |  if_e	sub	fp, #20
0bb54     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bb58     1C 00 90 5D |  if_ne	jmp	#LR__0978
0bb5c     A7 12 02 FB | 	rdlong	arg01, fp
0bb60     0C 4E 05 F1 | 	add	fp, #12
0bb64     A7 14 02 FB | 	rdlong	arg02, fp
0bb68     0C 4E 85 F1 | 	sub	fp, #12
0bb6c     E4 BA B0 FD | 	call	#__system___float_mul
0bb70     A7 FA 61 FC | 	wrlong	result1, fp
0bb74     40 00 90 FD | 	jmp	#LR__0979
0bb78                 | LR__0978
0bb78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0bb78     08 4E 05 F1 | 	add	fp, #8
0bb7c     A7 1E 02 FB | 	rdlong	local01, fp
0bb80     08 4E 85 F1 | 	sub	fp, #8
0bb84     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bb88     14 4E 05 51 |  if_ne	add	fp, #20
0bb8c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bb90     14 4E 85 51 |  if_ne	sub	fp, #20
0bb94     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0bb98     A7 10 68 AC |  if_e	wrlong	#8, fp
0bb9c     08 4E 05 A1 |  if_e	add	fp, #8
0bba0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bba4     08 4E 85 A1 |  if_e	sub	fp, #8
0bba8     A7 12 68 5C |  if_ne	wrlong	#9, fp
0bbac     08 4E 05 51 |  if_ne	add	fp, #8
0bbb0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bbb4     08 4E 85 51 |  if_ne	sub	fp, #8
0bbb8                 | LR__0979
0bbb8     A7 12 02 F6 | 	mov	arg01, fp
0bbbc     58 CB BF FD | 	call	#_push
0bbc0     A7 F0 03 F6 | 	mov	ptra, fp
0bbc4     B2 00 A0 FD | 	call	#popregs_
0bbc8                 | _do_mul_ret
0bbc8     2D 00 64 FD | 	ret
0bbcc                 | 
0bbcc                 | ' 
0bbcc                 | ' sub do_div 
0bbcc                 | _do_div
0bbcc     01 4A 05 F6 | 	mov	COUNT_, #1
0bbd0     A8 00 A0 FD | 	call	#pushregs_
0bbd4     18 F0 07 F1 | 	add	ptra, #24
0bbd8     A4 CA BF FD | 	call	#_pop
0bbdc     FD 60 02 F6 | 	mov	muldivb_, result1
0bbe0     FE 5E 02 F6 | 	mov	muldiva_, result2
0bbe4     FF 1E 02 F6 | 	mov	local01, result3
0bbe8     0C 4E 05 F1 | 	add	fp, #12
0bbec     A7 60 62 FC | 	wrlong	muldivb_, fp
0bbf0     04 4E 05 F1 | 	add	fp, #4
0bbf4     A7 5E 62 FC | 	wrlong	muldiva_, fp
0bbf8     04 4E 05 F1 | 	add	fp, #4
0bbfc     A7 1E 62 FC | 	wrlong	local01, fp
0bc00     14 4E 85 F1 | 	sub	fp, #20
0bc04     78 CA BF FD | 	call	#_pop
0bc08     A7 FA 61 FC | 	wrlong	result1, fp
0bc0c     04 4E 05 F1 | 	add	fp, #4
0bc10     A7 FC 61 FC | 	wrlong	result2, fp
0bc14     04 4E 05 F1 | 	add	fp, #4
0bc18     A7 FE 61 FC | 	wrlong	result3, fp
0bc1c                 | ' 
0bc1c                 | ' t2=pop()
0bc1c                 | ' t1=pop()
0bc1c                 | ' 
0bc1c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0bc1c     08 4E 85 F1 | 	sub	fp, #8
0bc20     1F FE 0D F2 | 	cmp	result3, #31 wz
0bc24     14 4E 05 51 |  if_ne	add	fp, #20
0bc28     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0bc2c     14 4E 85 51 |  if_ne	sub	fp, #20
0bc30     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0bc34     A7 14 68 AC |  if_e	wrlong	#10, fp
0bc38     08 4E 05 A1 |  if_e	add	fp, #8
0bc3c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bc40     08 4E 85 A1 |  if_e	sub	fp, #8
0bc44     90 01 90 AD |  if_e	jmp	#LR__0986
0bc48                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0bc48     08 4E 05 F1 | 	add	fp, #8
0bc4c     A7 60 02 FB | 	rdlong	muldivb_, fp
0bc50     08 4E 85 F1 | 	sub	fp, #8
0bc54     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0bc58     1C 00 90 5D |  if_ne	jmp	#LR__0980
0bc5c     08 4E 05 F1 | 	add	fp, #8
0bc60     A7 38 68 FC | 	wrlong	#28, fp
0bc64     08 4E 85 F1 | 	sub	fp, #8
0bc68     A7 12 02 FB | 	rdlong	arg01, fp
0bc6c     00 14 06 F6 | 	mov	arg02, #0
0bc70     A8 BE B0 FD | 	call	#__system___float_tointeger
0bc74     A7 FA 61 FC | 	wrlong	result1, fp
0bc78                 | LR__0980
0bc78                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0bc78     14 4E 05 F1 | 	add	fp, #20
0bc7c     A7 60 02 FB | 	rdlong	muldivb_, fp
0bc80     14 4E 85 F1 | 	sub	fp, #20
0bc84     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0bc88     28 00 90 5D |  if_ne	jmp	#LR__0981
0bc8c     14 4E 05 F1 | 	add	fp, #20
0bc90     A7 38 68 FC | 	wrlong	#28, fp
0bc94     08 4E 85 F1 | 	sub	fp, #8
0bc98     A7 12 02 FB | 	rdlong	arg01, fp
0bc9c     0C 4E 85 F1 | 	sub	fp, #12
0bca0     00 14 06 F6 | 	mov	arg02, #0
0bca4     74 BE B0 FD | 	call	#__system___float_tointeger
0bca8     0C 4E 05 F1 | 	add	fp, #12
0bcac     A7 FA 61 FC | 	wrlong	result1, fp
0bcb0     0C 4E 85 F1 | 	sub	fp, #12
0bcb4                 | LR__0981
0bcb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0bcb4     08 4E 05 F1 | 	add	fp, #8
0bcb8     A7 60 02 FB | 	rdlong	muldivb_, fp
0bcbc     08 4E 85 F1 | 	sub	fp, #8
0bcc0     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0bcc4     14 4E 05 A1 |  if_e	add	fp, #20
0bcc8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bccc     14 4E 85 A1 |  if_e	sub	fp, #20
0bcd0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0bcd4     20 00 90 5D |  if_ne	jmp	#LR__0982
0bcd8     0C 4E 05 F1 | 	add	fp, #12
0bcdc     A7 1E 02 FB | 	rdlong	local01, fp
0bce0     0C 4E 85 F1 | 	sub	fp, #12
0bce4     A7 60 02 FB | 	rdlong	muldivb_, fp
0bce8     0F 61 12 FD | 	qdiv	muldivb_, local01
0bcec     18 1E 62 FD | 	getqx	local01
0bcf0     A7 1E 62 FC | 	wrlong	local01, fp
0bcf4     E0 00 90 FD | 	jmp	#LR__0986
0bcf8                 | LR__0982
0bcf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0bcf8     08 4E 05 F1 | 	add	fp, #8
0bcfc     A7 60 02 FB | 	rdlong	muldivb_, fp
0bd00     08 4E 85 F1 | 	sub	fp, #8
0bd04     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0bd08     14 4E 05 A1 |  if_e	add	fp, #20
0bd0c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bd10     14 4E 85 A1 |  if_e	sub	fp, #20
0bd14     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0bd18     2C 00 90 5D |  if_ne	jmp	#LR__0983
0bd1c     0C 4E 05 F1 | 	add	fp, #12
0bd20     A7 1E 02 FB | 	rdlong	local01, fp
0bd24     0C 4E 85 F1 | 	sub	fp, #12
0bd28     A7 60 02 FB | 	rdlong	muldivb_, fp
0bd2c     0F 61 12 FD | 	qdiv	muldivb_, local01
0bd30     18 1E 62 FD | 	getqx	local01
0bd34     A7 1E 62 FC | 	wrlong	local01, fp
0bd38     08 4E 05 F1 | 	add	fp, #8
0bd3c     A7 38 68 FC | 	wrlong	#28, fp
0bd40     08 4E 85 F1 | 	sub	fp, #8
0bd44     90 00 90 FD | 	jmp	#LR__0986
0bd48                 | LR__0983
0bd48                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0bd48     08 4E 05 F1 | 	add	fp, #8
0bd4c     A7 60 02 FB | 	rdlong	muldivb_, fp
0bd50     08 4E 85 F1 | 	sub	fp, #8
0bd54     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0bd58     14 4E 05 A1 |  if_e	add	fp, #20
0bd5c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bd60     14 4E 85 A1 |  if_e	sub	fp, #20
0bd64     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0bd68     1C 00 90 5D |  if_ne	jmp	#LR__0984
0bd6c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0bd70     0C 4E 05 F1 | 	add	fp, #12
0bd74     A7 60 02 FB | 	rdlong	muldivb_, fp
0bd78     0C 4E 85 F1 | 	sub	fp, #12
0bd7c     BA 00 A0 FD | 	call	#divide_
0bd80     A7 60 62 FC | 	wrlong	muldivb_, fp
0bd84     50 00 90 FD | 	jmp	#LR__0986
0bd88                 | LR__0984
0bd88                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0bd88     08 4E 05 F1 | 	add	fp, #8
0bd8c     A7 60 02 FB | 	rdlong	muldivb_, fp
0bd90     08 4E 85 F1 | 	sub	fp, #8
0bd94     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0bd98     14 4E 05 A1 |  if_e	add	fp, #20
0bd9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bda0     14 4E 85 A1 |  if_e	sub	fp, #20
0bda4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0bda8     1C 00 90 5D |  if_ne	jmp	#LR__0985
0bdac     A7 5E 02 FB | 	rdlong	muldiva_, fp
0bdb0     0C 4E 05 F1 | 	add	fp, #12
0bdb4     A7 60 02 FB | 	rdlong	muldivb_, fp
0bdb8     0C 4E 85 F1 | 	sub	fp, #12
0bdbc     BA 00 A0 FD | 	call	#divide_
0bdc0     A7 60 62 FC | 	wrlong	muldivb_, fp
0bdc4     10 00 90 FD | 	jmp	#LR__0986
0bdc8                 | LR__0985
0bdc8     A7 16 68 FC | 	wrlong	#11, fp
0bdcc     08 4E 05 F1 | 	add	fp, #8
0bdd0     A7 FE 69 FC | 	wrlong	#255, fp
0bdd4     08 4E 85 F1 | 	sub	fp, #8
0bdd8                 | LR__0986
0bdd8     A7 12 02 F6 | 	mov	arg01, fp
0bddc     38 C9 BF FD | 	call	#_push
0bde0     A7 F0 03 F6 | 	mov	ptra, fp
0bde4     B2 00 A0 FD | 	call	#popregs_
0bde8                 | _do_div_ret
0bde8     2D 00 64 FD | 	ret
0bdec                 | 
0bdec                 | ' 
0bdec                 | ' sub do_fdiv 
0bdec                 | _do_fdiv
0bdec     02 4A 05 F6 | 	mov	COUNT_, #2
0bdf0     A8 00 A0 FD | 	call	#pushregs_
0bdf4     18 F0 07 F1 | 	add	ptra, #24
0bdf8     84 C8 BF FD | 	call	#_pop
0bdfc     FD 14 02 F6 | 	mov	arg02, result1
0be00     FE 12 02 F6 | 	mov	arg01, result2
0be04     FF 1E 02 F6 | 	mov	local01, result3
0be08     0C 4E 05 F1 | 	add	fp, #12
0be0c     A7 14 62 FC | 	wrlong	arg02, fp
0be10     04 4E 05 F1 | 	add	fp, #4
0be14     A7 12 62 FC | 	wrlong	arg01, fp
0be18     04 4E 05 F1 | 	add	fp, #4
0be1c     A7 1E 62 FC | 	wrlong	local01, fp
0be20     14 4E 85 F1 | 	sub	fp, #20
0be24     58 C8 BF FD | 	call	#_pop
0be28     A7 FA 61 FC | 	wrlong	result1, fp
0be2c     04 4E 05 F1 | 	add	fp, #4
0be30     A7 FC 61 FC | 	wrlong	result2, fp
0be34     04 4E 05 F1 | 	add	fp, #4
0be38     A7 FE 61 FC | 	wrlong	result3, fp
0be3c                 | ' 
0be3c                 | ' t2=pop()
0be3c                 | ' t1=pop()
0be3c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0be3c     08 4E 85 F1 | 	sub	fp, #8
0be40     1F FE 0D F2 | 	cmp	result3, #31 wz
0be44     14 4E 05 51 |  if_ne	add	fp, #20
0be48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0be4c     14 4E 85 51 |  if_ne	sub	fp, #20
0be50     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0be54     A7 14 68 AC |  if_e	wrlong	#10, fp
0be58     08 4E 05 A1 |  if_e	add	fp, #8
0be5c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0be60     08 4E 85 A1 |  if_e	sub	fp, #8
0be64     38 01 90 AD |  if_e	jmp	#LR__0995
0be68                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0be68     08 4E 05 F1 | 	add	fp, #8
0be6c     A7 14 02 FB | 	rdlong	arg02, fp
0be70     08 4E 85 F1 | 	sub	fp, #8
0be74     1C 14 0E F2 | 	cmp	arg02, #28 wz
0be78     28 00 90 5D |  if_ne	jmp	#LR__0990
0be7c     08 4E 05 F1 | 	add	fp, #8
0be80     A7 3C 68 FC | 	wrlong	#30, fp
0be84     08 4E 85 F1 | 	sub	fp, #8
0be88     A7 12 02 FB | 	rdlong	arg01, fp
0be8c     09 13 52 F6 | 	abs	arg01, arg01 wc
0be90     1F 20 C6 C9 |  if_b	decod	local02, #31
0be94     00 20 06 36 |  if_ae	mov	local02, #0
0be98     8C B4 B0 FD | 	call	#__system___float_fromuns
0be9c     10 FB 61 F5 | 	xor	result1, local02
0bea0     A7 FA 61 FC | 	wrlong	result1, fp
0bea4                 | LR__0990
0bea4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0bea4     08 4E 05 F1 | 	add	fp, #8
0bea8     A7 14 02 FB | 	rdlong	arg02, fp
0beac     08 4E 85 F1 | 	sub	fp, #8
0beb0     1D 14 0E F2 | 	cmp	arg02, #29 wz
0beb4     18 00 90 5D |  if_ne	jmp	#LR__0991
0beb8     08 4E 05 F1 | 	add	fp, #8
0bebc     A7 3C 68 FC | 	wrlong	#30, fp
0bec0     08 4E 85 F1 | 	sub	fp, #8
0bec4     A7 12 02 FB | 	rdlong	arg01, fp
0bec8     5C B4 B0 FD | 	call	#__system___float_fromuns
0becc     A7 FA 61 FC | 	wrlong	result1, fp
0bed0                 | LR__0991
0bed0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0bed0     14 4E 05 F1 | 	add	fp, #20
0bed4     A7 14 02 FB | 	rdlong	arg02, fp
0bed8     14 4E 85 F1 | 	sub	fp, #20
0bedc     1C 14 0E F2 | 	cmp	arg02, #28 wz
0bee0     34 00 90 5D |  if_ne	jmp	#LR__0992
0bee4     14 4E 05 F1 | 	add	fp, #20
0bee8     A7 3C 68 FC | 	wrlong	#30, fp
0beec     08 4E 85 F1 | 	sub	fp, #8
0bef0     A7 12 02 FB | 	rdlong	arg01, fp
0bef4     0C 4E 85 F1 | 	sub	fp, #12
0bef8     09 13 52 F6 | 	abs	arg01, arg01 wc
0befc     1F 20 C6 C9 |  if_b	decod	local02, #31
0bf00     00 20 06 36 |  if_ae	mov	local02, #0
0bf04     20 B4 B0 FD | 	call	#__system___float_fromuns
0bf08     10 FB 61 F5 | 	xor	result1, local02
0bf0c     0C 4E 05 F1 | 	add	fp, #12
0bf10     A7 FA 61 FC | 	wrlong	result1, fp
0bf14     0C 4E 85 F1 | 	sub	fp, #12
0bf18                 | LR__0992
0bf18                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0bf18     14 4E 05 F1 | 	add	fp, #20
0bf1c     A7 14 02 FB | 	rdlong	arg02, fp
0bf20     14 4E 85 F1 | 	sub	fp, #20
0bf24     1D 14 0E F2 | 	cmp	arg02, #29 wz
0bf28     24 00 90 5D |  if_ne	jmp	#LR__0993
0bf2c     14 4E 05 F1 | 	add	fp, #20
0bf30     A7 3C 68 FC | 	wrlong	#30, fp
0bf34     08 4E 85 F1 | 	sub	fp, #8
0bf38     A7 12 02 FB | 	rdlong	arg01, fp
0bf3c     0C 4E 85 F1 | 	sub	fp, #12
0bf40     E4 B3 B0 FD | 	call	#__system___float_fromuns
0bf44     0C 4E 05 F1 | 	add	fp, #12
0bf48     A7 FA 61 FC | 	wrlong	result1, fp
0bf4c     0C 4E 85 F1 | 	sub	fp, #12
0bf50                 | LR__0993
0bf50                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0bf50     08 4E 05 F1 | 	add	fp, #8
0bf54     A7 14 02 FB | 	rdlong	arg02, fp
0bf58     08 4E 85 F1 | 	sub	fp, #8
0bf5c     1E 14 0E F2 | 	cmp	arg02, #30 wz
0bf60     14 4E 05 A1 |  if_e	add	fp, #20
0bf64     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bf68     14 4E 85 A1 |  if_e	sub	fp, #20
0bf6c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0bf70     1C 00 90 5D |  if_ne	jmp	#LR__0994
0bf74     A7 12 02 FB | 	rdlong	arg01, fp
0bf78     0C 4E 05 F1 | 	add	fp, #12
0bf7c     A7 14 02 FB | 	rdlong	arg02, fp
0bf80     0C 4E 85 F1 | 	sub	fp, #12
0bf84     D0 B8 B0 FD | 	call	#__system___float_div
0bf88     A7 FA 61 FC | 	wrlong	result1, fp
0bf8c     10 00 90 FD | 	jmp	#LR__0995
0bf90                 | LR__0994
0bf90     A7 16 68 FC | 	wrlong	#11, fp
0bf94     08 4E 05 F1 | 	add	fp, #8
0bf98     A7 FE 69 FC | 	wrlong	#255, fp
0bf9c     08 4E 85 F1 | 	sub	fp, #8
0bfa0                 | LR__0995
0bfa0     A7 12 02 F6 | 	mov	arg01, fp
0bfa4     70 C7 BF FD | 	call	#_push
0bfa8     A7 F0 03 F6 | 	mov	ptra, fp
0bfac     B2 00 A0 FD | 	call	#popregs_
0bfb0                 | _do_fdiv_ret
0bfb0     2D 00 64 FD | 	ret
0bfb4                 | 
0bfb4                 | ' 
0bfb4                 | ' 
0bfb4                 | ' sub do_mod 
0bfb4                 | _do_mod
0bfb4     01 4A 05 F6 | 	mov	COUNT_, #1
0bfb8     A8 00 A0 FD | 	call	#pushregs_
0bfbc     18 F0 07 F1 | 	add	ptra, #24
0bfc0     BC C6 BF FD | 	call	#_pop
0bfc4     FD 60 02 F6 | 	mov	muldivb_, result1
0bfc8     FE 5E 02 F6 | 	mov	muldiva_, result2
0bfcc     FF 1E 02 F6 | 	mov	local01, result3
0bfd0     0C 4E 05 F1 | 	add	fp, #12
0bfd4     A7 60 62 FC | 	wrlong	muldivb_, fp
0bfd8     04 4E 05 F1 | 	add	fp, #4
0bfdc     A7 5E 62 FC | 	wrlong	muldiva_, fp
0bfe0     04 4E 05 F1 | 	add	fp, #4
0bfe4     A7 1E 62 FC | 	wrlong	local01, fp
0bfe8     14 4E 85 F1 | 	sub	fp, #20
0bfec     90 C6 BF FD | 	call	#_pop
0bff0     A7 FA 61 FC | 	wrlong	result1, fp
0bff4     04 4E 05 F1 | 	add	fp, #4
0bff8     A7 FC 61 FC | 	wrlong	result2, fp
0bffc     04 4E 05 F1 | 	add	fp, #4
0c000     A7 FE 61 FC | 	wrlong	result3, fp
0c004                 | ' 
0c004                 | ' t2=pop()
0c004                 | ' t1=pop()
0c004                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c004     08 4E 85 F1 | 	sub	fp, #8
0c008     1F FE 0D F2 | 	cmp	result3, #31 wz
0c00c     14 4E 05 51 |  if_ne	add	fp, #20
0c010     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c014     14 4E 85 51 |  if_ne	sub	fp, #20
0c018     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c01c     A7 14 68 AC |  if_e	wrlong	#10, fp
0c020     08 4E 05 A1 |  if_e	add	fp, #8
0c024     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c028     08 4E 85 A1 |  if_e	sub	fp, #8
0c02c     90 01 90 AD |  if_e	jmp	#LR__1006
0c030                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c030     08 4E 05 F1 | 	add	fp, #8
0c034     A7 60 02 FB | 	rdlong	muldivb_, fp
0c038     08 4E 85 F1 | 	sub	fp, #8
0c03c     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c040     1C 00 90 5D |  if_ne	jmp	#LR__1000
0c044     08 4E 05 F1 | 	add	fp, #8
0c048     A7 38 68 FC | 	wrlong	#28, fp
0c04c     08 4E 85 F1 | 	sub	fp, #8
0c050     A7 12 02 FB | 	rdlong	arg01, fp
0c054     00 14 06 F6 | 	mov	arg02, #0
0c058     C0 BA B0 FD | 	call	#__system___float_tointeger
0c05c     A7 FA 61 FC | 	wrlong	result1, fp
0c060                 | LR__1000
0c060                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c060     14 4E 05 F1 | 	add	fp, #20
0c064     A7 60 02 FB | 	rdlong	muldivb_, fp
0c068     14 4E 85 F1 | 	sub	fp, #20
0c06c     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c070     28 00 90 5D |  if_ne	jmp	#LR__1001
0c074     14 4E 05 F1 | 	add	fp, #20
0c078     A7 38 68 FC | 	wrlong	#28, fp
0c07c     08 4E 85 F1 | 	sub	fp, #8
0c080     A7 12 02 FB | 	rdlong	arg01, fp
0c084     0C 4E 85 F1 | 	sub	fp, #12
0c088     00 14 06 F6 | 	mov	arg02, #0
0c08c     8C BA B0 FD | 	call	#__system___float_tointeger
0c090     0C 4E 05 F1 | 	add	fp, #12
0c094     A7 FA 61 FC | 	wrlong	result1, fp
0c098     0C 4E 85 F1 | 	sub	fp, #12
0c09c                 | LR__1001
0c09c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c09c     08 4E 05 F1 | 	add	fp, #8
0c0a0     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0a4     08 4E 85 F1 | 	sub	fp, #8
0c0a8     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c0ac     14 4E 05 A1 |  if_e	add	fp, #20
0c0b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c0b4     14 4E 85 A1 |  if_e	sub	fp, #20
0c0b8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c0bc     20 00 90 5D |  if_ne	jmp	#LR__1002
0c0c0     0C 4E 05 F1 | 	add	fp, #12
0c0c4     A7 1E 02 FB | 	rdlong	local01, fp
0c0c8     0C 4E 85 F1 | 	sub	fp, #12
0c0cc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0d0     0F 61 12 FD | 	qdiv	muldivb_, local01
0c0d4     19 1E 62 FD | 	getqy	local01
0c0d8     A7 1E 62 FC | 	wrlong	local01, fp
0c0dc     E0 00 90 FD | 	jmp	#LR__1006
0c0e0                 | LR__1002
0c0e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c0e0     08 4E 05 F1 | 	add	fp, #8
0c0e4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0e8     08 4E 85 F1 | 	sub	fp, #8
0c0ec     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c0f0     14 4E 05 A1 |  if_e	add	fp, #20
0c0f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c0f8     14 4E 85 A1 |  if_e	sub	fp, #20
0c0fc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c100     2C 00 90 5D |  if_ne	jmp	#LR__1003
0c104     0C 4E 05 F1 | 	add	fp, #12
0c108     A7 1E 02 FB | 	rdlong	local01, fp
0c10c     0C 4E 85 F1 | 	sub	fp, #12
0c110     A7 60 02 FB | 	rdlong	muldivb_, fp
0c114     0F 61 12 FD | 	qdiv	muldivb_, local01
0c118     19 1E 62 FD | 	getqy	local01
0c11c     A7 1E 62 FC | 	wrlong	local01, fp
0c120     08 4E 05 F1 | 	add	fp, #8
0c124     A7 38 68 FC | 	wrlong	#28, fp
0c128     08 4E 85 F1 | 	sub	fp, #8
0c12c     90 00 90 FD | 	jmp	#LR__1006
0c130                 | LR__1003
0c130                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c130     08 4E 05 F1 | 	add	fp, #8
0c134     A7 60 02 FB | 	rdlong	muldivb_, fp
0c138     08 4E 85 F1 | 	sub	fp, #8
0c13c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c140     14 4E 05 A1 |  if_e	add	fp, #20
0c144     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c148     14 4E 85 A1 |  if_e	sub	fp, #20
0c14c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c150     1C 00 90 5D |  if_ne	jmp	#LR__1004
0c154     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c158     0C 4E 05 F1 | 	add	fp, #12
0c15c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c160     0C 4E 85 F1 | 	sub	fp, #12
0c164     BA 00 A0 FD | 	call	#divide_
0c168     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c16c     50 00 90 FD | 	jmp	#LR__1006
0c170                 | LR__1004
0c170                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c170     08 4E 05 F1 | 	add	fp, #8
0c174     A7 60 02 FB | 	rdlong	muldivb_, fp
0c178     08 4E 85 F1 | 	sub	fp, #8
0c17c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c180     14 4E 05 A1 |  if_e	add	fp, #20
0c184     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c188     14 4E 85 A1 |  if_e	sub	fp, #20
0c18c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c190     1C 00 90 5D |  if_ne	jmp	#LR__1005
0c194     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c198     0C 4E 05 F1 | 	add	fp, #12
0c19c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1a0     0C 4E 85 F1 | 	sub	fp, #12
0c1a4     BA 00 A0 FD | 	call	#divide_
0c1a8     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c1ac     10 00 90 FD | 	jmp	#LR__1006
0c1b0                 | LR__1005
0c1b0     A7 16 68 FC | 	wrlong	#11, fp
0c1b4     08 4E 05 F1 | 	add	fp, #8
0c1b8     A7 FE 69 FC | 	wrlong	#255, fp
0c1bc     08 4E 85 F1 | 	sub	fp, #8
0c1c0                 | LR__1006
0c1c0     A7 12 02 F6 | 	mov	arg01, fp
0c1c4     50 C5 BF FD | 	call	#_push
0c1c8     A7 F0 03 F6 | 	mov	ptra, fp
0c1cc     B2 00 A0 FD | 	call	#popregs_
0c1d0                 | _do_mod_ret
0c1d0     2D 00 64 FD | 	ret
0c1d4                 | 
0c1d4                 | ' 
0c1d4                 | ' sub do_shl 
0c1d4                 | _do_shl
0c1d4     03 4A 05 F6 | 	mov	COUNT_, #3
0c1d8     A8 00 A0 FD | 	call	#pushregs_
0c1dc     18 F0 07 F1 | 	add	ptra, #24
0c1e0     9C C4 BF FD | 	call	#_pop
0c1e4     FD 12 02 F6 | 	mov	arg01, result1
0c1e8     FE 1E 02 F6 | 	mov	local01, result2
0c1ec     FF 20 02 F6 | 	mov	local02, result3
0c1f0     0C 4E 05 F1 | 	add	fp, #12
0c1f4     A7 12 62 FC | 	wrlong	arg01, fp
0c1f8     04 4E 05 F1 | 	add	fp, #4
0c1fc     A7 1E 62 FC | 	wrlong	local01, fp
0c200     04 4E 05 F1 | 	add	fp, #4
0c204     A7 20 62 FC | 	wrlong	local02, fp
0c208     14 4E 85 F1 | 	sub	fp, #20
0c20c     70 C4 BF FD | 	call	#_pop
0c210     FF 22 02 F6 | 	mov	local03, result3
0c214     A7 FA 61 FC | 	wrlong	result1, fp
0c218     04 4E 05 F1 | 	add	fp, #4
0c21c     A7 FC 61 FC | 	wrlong	result2, fp
0c220     04 4E 05 F1 | 	add	fp, #4
0c224     A7 22 62 FC | 	wrlong	local03, fp
0c228                 | ' 
0c228                 | ' t2=pop()
0c228                 | ' t1=pop()
0c228                 | ' 
0c228                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c228     08 4E 85 F1 | 	sub	fp, #8
0c22c     1C 22 0E F2 | 	cmp	local03, #28 wz
0c230     A7 22 02 AB |  if_e	rdlong	local03, fp
0c234     A7 22 62 AC |  if_e	wrlong	local03, fp
0c238     08 4E 05 A1 |  if_e	add	fp, #8
0c23c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c240     08 4E 85 A1 |  if_e	sub	fp, #8
0c244                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c244     14 4E 05 F1 | 	add	fp, #20
0c248     A7 22 02 FB | 	rdlong	local03, fp
0c24c     14 4E 85 F1 | 	sub	fp, #20
0c250     1C 22 0E F2 | 	cmp	local03, #28 wz
0c254     18 00 90 5D |  if_ne	jmp	#LR__1010
0c258     0C 4E 05 F1 | 	add	fp, #12
0c25c     A7 22 02 FB | 	rdlong	local03, fp
0c260     A7 22 62 FC | 	wrlong	local03, fp
0c264     08 4E 05 F1 | 	add	fp, #8
0c268     A7 3A 68 FC | 	wrlong	#29, fp
0c26c     14 4E 85 F1 | 	sub	fp, #20
0c270                 | LR__1010
0c270                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c270     08 4E 05 F1 | 	add	fp, #8
0c274     A7 22 02 FB | 	rdlong	local03, fp
0c278     08 4E 85 F1 | 	sub	fp, #8
0c27c     1F 22 0E F2 | 	cmp	local03, #31 wz
0c280     14 4E 05 51 |  if_ne	add	fp, #20
0c284     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c288     14 4E 85 51 |  if_ne	sub	fp, #20
0c28c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c290     08 4E 05 51 |  if_ne	add	fp, #8
0c294     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c298     08 4E 85 51 |  if_ne	sub	fp, #8
0c29c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c2a0     14 4E 05 51 |  if_ne	add	fp, #20
0c2a4     14 4E 85 51 |  if_ne	sub	fp, #20
0c2a8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c2ac     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c2b0     08 4E 05 A1 |  if_e	add	fp, #8
0c2b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c2b8     08 4E 85 A1 |  if_e	sub	fp, #8
0c2bc     18 00 90 AD |  if_e	jmp	#LR__1011
0c2c0     A7 22 02 FB | 	rdlong	local03, fp
0c2c4     0C 4E 05 F1 | 	add	fp, #12
0c2c8     A7 1E 02 FB | 	rdlong	local01, fp
0c2cc     0C 4E 85 F1 | 	sub	fp, #12
0c2d0     0F 23 62 F0 | 	shl	local03, local01
0c2d4     A7 22 62 FC | 	wrlong	local03, fp
0c2d8                 | LR__1011
0c2d8     A7 12 02 F6 | 	mov	arg01, fp
0c2dc     38 C4 BF FD | 	call	#_push
0c2e0     A7 F0 03 F6 | 	mov	ptra, fp
0c2e4     B2 00 A0 FD | 	call	#popregs_
0c2e8                 | _do_shl_ret
0c2e8     2D 00 64 FD | 	ret
0c2ec                 | 
0c2ec                 | ' 
0c2ec                 | ' sub do_shr 
0c2ec                 | _do_shr
0c2ec     03 4A 05 F6 | 	mov	COUNT_, #3
0c2f0     A8 00 A0 FD | 	call	#pushregs_
0c2f4     18 F0 07 F1 | 	add	ptra, #24
0c2f8     84 C3 BF FD | 	call	#_pop
0c2fc     FD 12 02 F6 | 	mov	arg01, result1
0c300     FE 1E 02 F6 | 	mov	local01, result2
0c304     FF 20 02 F6 | 	mov	local02, result3
0c308     0C 4E 05 F1 | 	add	fp, #12
0c30c     A7 12 62 FC | 	wrlong	arg01, fp
0c310     04 4E 05 F1 | 	add	fp, #4
0c314     A7 1E 62 FC | 	wrlong	local01, fp
0c318     04 4E 05 F1 | 	add	fp, #4
0c31c     A7 20 62 FC | 	wrlong	local02, fp
0c320     14 4E 85 F1 | 	sub	fp, #20
0c324     58 C3 BF FD | 	call	#_pop
0c328     FF 22 02 F6 | 	mov	local03, result3
0c32c     A7 FA 61 FC | 	wrlong	result1, fp
0c330     04 4E 05 F1 | 	add	fp, #4
0c334     A7 FC 61 FC | 	wrlong	result2, fp
0c338     04 4E 05 F1 | 	add	fp, #4
0c33c     A7 22 62 FC | 	wrlong	local03, fp
0c340                 | ' t2=pop()
0c340                 | ' t1=pop()
0c340                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c340     08 4E 85 F1 | 	sub	fp, #8
0c344     1C 22 0E F2 | 	cmp	local03, #28 wz
0c348     A7 22 02 AB |  if_e	rdlong	local03, fp
0c34c     A7 22 62 AC |  if_e	wrlong	local03, fp
0c350     08 4E 05 A1 |  if_e	add	fp, #8
0c354     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c358     08 4E 85 A1 |  if_e	sub	fp, #8
0c35c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c35c     14 4E 05 F1 | 	add	fp, #20
0c360     A7 22 02 FB | 	rdlong	local03, fp
0c364     14 4E 85 F1 | 	sub	fp, #20
0c368     1C 22 0E F2 | 	cmp	local03, #28 wz
0c36c     18 00 90 5D |  if_ne	jmp	#LR__1020
0c370     0C 4E 05 F1 | 	add	fp, #12
0c374     A7 22 02 FB | 	rdlong	local03, fp
0c378     A7 22 62 FC | 	wrlong	local03, fp
0c37c     08 4E 05 F1 | 	add	fp, #8
0c380     A7 3A 68 FC | 	wrlong	#29, fp
0c384     14 4E 85 F1 | 	sub	fp, #20
0c388                 | LR__1020
0c388                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0c388     08 4E 05 F1 | 	add	fp, #8
0c38c     A7 22 02 FB | 	rdlong	local03, fp
0c390     08 4E 85 F1 | 	sub	fp, #8
0c394     1F 22 0E F2 | 	cmp	local03, #31 wz
0c398     14 4E 05 51 |  if_ne	add	fp, #20
0c39c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c3a0     14 4E 85 51 |  if_ne	sub	fp, #20
0c3a4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c3a8     08 4E 05 51 |  if_ne	add	fp, #8
0c3ac     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c3b0     08 4E 85 51 |  if_ne	sub	fp, #8
0c3b4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c3b8     14 4E 05 51 |  if_ne	add	fp, #20
0c3bc     14 4E 85 51 |  if_ne	sub	fp, #20
0c3c0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c3c4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c3c8     08 4E 05 A1 |  if_e	add	fp, #8
0c3cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c3d0     08 4E 85 A1 |  if_e	sub	fp, #8
0c3d4     18 00 90 AD |  if_e	jmp	#LR__1021
0c3d8     A7 22 02 FB | 	rdlong	local03, fp
0c3dc     0C 4E 05 F1 | 	add	fp, #12
0c3e0     A7 1E 02 FB | 	rdlong	local01, fp
0c3e4     0C 4E 85 F1 | 	sub	fp, #12
0c3e8     0F 23 42 F0 | 	shr	local03, local01
0c3ec     A7 22 62 FC | 	wrlong	local03, fp
0c3f0                 | LR__1021
0c3f0     A7 12 02 F6 | 	mov	arg01, fp
0c3f4     20 C3 BF FD | 	call	#_push
0c3f8     A7 F0 03 F6 | 	mov	ptra, fp
0c3fc     B2 00 A0 FD | 	call	#popregs_
0c400                 | _do_shr_ret
0c400     2D 00 64 FD | 	ret
0c404                 | 
0c404                 | ' 
0c404                 | ' sub do_power 
0c404                 | _do_power
0c404     02 4A 05 F6 | 	mov	COUNT_, #2
0c408     A8 00 A0 FD | 	call	#pushregs_
0c40c     18 F0 07 F1 | 	add	ptra, #24
0c410     6C C2 BF FD | 	call	#_pop
0c414     FD 14 02 F6 | 	mov	arg02, result1
0c418     FE 12 02 F6 | 	mov	arg01, result2
0c41c     FF 1E 02 F6 | 	mov	local01, result3
0c420     0C 4E 05 F1 | 	add	fp, #12
0c424     A7 14 62 FC | 	wrlong	arg02, fp
0c428     04 4E 05 F1 | 	add	fp, #4
0c42c     A7 12 62 FC | 	wrlong	arg01, fp
0c430     04 4E 05 F1 | 	add	fp, #4
0c434     A7 1E 62 FC | 	wrlong	local01, fp
0c438     14 4E 85 F1 | 	sub	fp, #20
0c43c     40 C2 BF FD | 	call	#_pop
0c440     A7 FA 61 FC | 	wrlong	result1, fp
0c444     04 4E 05 F1 | 	add	fp, #4
0c448     A7 FC 61 FC | 	wrlong	result2, fp
0c44c     04 4E 05 F1 | 	add	fp, #4
0c450     A7 FE 61 FC | 	wrlong	result3, fp
0c454                 | ' t2=pop()
0c454                 | ' t1=pop()
0c454                 | ' 
0c454                 | ' 
0c454                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0c454     08 4E 85 F1 | 	sub	fp, #8
0c458     1F FE 0D F2 | 	cmp	result3, #31 wz
0c45c     14 4E 05 51 |  if_ne	add	fp, #20
0c460     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c464     14 4E 85 51 |  if_ne	sub	fp, #20
0c468     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c46c     A7 18 68 AC |  if_e	wrlong	#12, fp
0c470     08 4E 05 A1 |  if_e	add	fp, #8
0c474     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c478     08 4E 85 A1 |  if_e	sub	fp, #8
0c47c     38 01 90 AD |  if_e	jmp	#LR__1035
0c480                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c480     08 4E 05 F1 | 	add	fp, #8
0c484     A7 14 02 FB | 	rdlong	arg02, fp
0c488     08 4E 85 F1 | 	sub	fp, #8
0c48c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c490     28 00 90 5D |  if_ne	jmp	#LR__1030
0c494     08 4E 05 F1 | 	add	fp, #8
0c498     A7 3C 68 FC | 	wrlong	#30, fp
0c49c     08 4E 85 F1 | 	sub	fp, #8
0c4a0     A7 12 02 FB | 	rdlong	arg01, fp
0c4a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c4a8     1F 20 C6 C9 |  if_b	decod	local02, #31
0c4ac     00 20 06 36 |  if_ae	mov	local02, #0
0c4b0     74 AE B0 FD | 	call	#__system___float_fromuns
0c4b4     10 FB 61 F5 | 	xor	result1, local02
0c4b8     A7 FA 61 FC | 	wrlong	result1, fp
0c4bc                 | LR__1030
0c4bc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0c4bc     08 4E 05 F1 | 	add	fp, #8
0c4c0     A7 14 02 FB | 	rdlong	arg02, fp
0c4c4     08 4E 85 F1 | 	sub	fp, #8
0c4c8     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c4cc     18 00 90 5D |  if_ne	jmp	#LR__1031
0c4d0     08 4E 05 F1 | 	add	fp, #8
0c4d4     A7 3C 68 FC | 	wrlong	#30, fp
0c4d8     08 4E 85 F1 | 	sub	fp, #8
0c4dc     A7 12 02 FB | 	rdlong	arg01, fp
0c4e0     44 AE B0 FD | 	call	#__system___float_fromuns
0c4e4     A7 FA 61 FC | 	wrlong	result1, fp
0c4e8                 | LR__1031
0c4e8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c4e8     14 4E 05 F1 | 	add	fp, #20
0c4ec     A7 14 02 FB | 	rdlong	arg02, fp
0c4f0     14 4E 85 F1 | 	sub	fp, #20
0c4f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c4f8     34 00 90 5D |  if_ne	jmp	#LR__1032
0c4fc     14 4E 05 F1 | 	add	fp, #20
0c500     A7 3C 68 FC | 	wrlong	#30, fp
0c504     08 4E 85 F1 | 	sub	fp, #8
0c508     A7 12 02 FB | 	rdlong	arg01, fp
0c50c     0C 4E 85 F1 | 	sub	fp, #12
0c510     09 13 52 F6 | 	abs	arg01, arg01 wc
0c514     1F 20 C6 C9 |  if_b	decod	local02, #31
0c518     00 20 06 36 |  if_ae	mov	local02, #0
0c51c     08 AE B0 FD | 	call	#__system___float_fromuns
0c520     10 FB 61 F5 | 	xor	result1, local02
0c524     0C 4E 05 F1 | 	add	fp, #12
0c528     A7 FA 61 FC | 	wrlong	result1, fp
0c52c     0C 4E 85 F1 | 	sub	fp, #12
0c530                 | LR__1032
0c530                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c530     14 4E 05 F1 | 	add	fp, #20
0c534     A7 14 02 FB | 	rdlong	arg02, fp
0c538     14 4E 85 F1 | 	sub	fp, #20
0c53c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c540     24 00 90 5D |  if_ne	jmp	#LR__1033
0c544     14 4E 05 F1 | 	add	fp, #20
0c548     A7 3C 68 FC | 	wrlong	#30, fp
0c54c     08 4E 85 F1 | 	sub	fp, #8
0c550     A7 12 02 FB | 	rdlong	arg01, fp
0c554     0C 4E 85 F1 | 	sub	fp, #12
0c558     CC AD B0 FD | 	call	#__system___float_fromuns
0c55c     0C 4E 05 F1 | 	add	fp, #12
0c560     A7 FA 61 FC | 	wrlong	result1, fp
0c564     0C 4E 85 F1 | 	sub	fp, #12
0c568                 | LR__1033
0c568                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0c568     08 4E 05 F1 | 	add	fp, #8
0c56c     A7 14 02 FB | 	rdlong	arg02, fp
0c570     08 4E 85 F1 | 	sub	fp, #8
0c574     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c578     14 4E 05 A1 |  if_e	add	fp, #20
0c57c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c580     14 4E 85 A1 |  if_e	sub	fp, #20
0c584     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c588     1C 00 90 5D |  if_ne	jmp	#LR__1034
0c58c     A7 12 02 FB | 	rdlong	arg01, fp
0c590     0C 4E 05 F1 | 	add	fp, #12
0c594     A7 14 02 FB | 	rdlong	arg02, fp
0c598     0C 4E 85 F1 | 	sub	fp, #12
0c59c     20 BD B0 FD | 	call	#__system____builtin_powf
0c5a0     A7 FA 61 FC | 	wrlong	result1, fp
0c5a4     10 00 90 FD | 	jmp	#LR__1035
0c5a8                 | LR__1034
0c5a8     A7 1A 68 FC | 	wrlong	#13, fp
0c5ac     08 4E 05 F1 | 	add	fp, #8
0c5b0     A7 FE 69 FC | 	wrlong	#255, fp
0c5b4     08 4E 85 F1 | 	sub	fp, #8
0c5b8                 | LR__1035
0c5b8     A7 12 02 F6 | 	mov	arg01, fp
0c5bc     58 C1 BF FD | 	call	#_push
0c5c0     A7 F0 03 F6 | 	mov	ptra, fp
0c5c4     B2 00 A0 FD | 	call	#popregs_
0c5c8                 | _do_power_ret
0c5c8     2D 00 64 FD | 	ret
0c5cc                 | 
0c5cc                 | ' 
0c5cc                 | ' 
0c5cc                 | ' sub do_eq
0c5cc                 | _do_eq
0c5cc     05 4A 05 F6 | 	mov	COUNT_, #5
0c5d0     A8 00 A0 FD | 	call	#pushregs_
0c5d4     18 F0 07 F1 | 	add	ptra, #24
0c5d8     A4 C0 BF FD | 	call	#_pop
0c5dc     FD 1E 02 F6 | 	mov	local01, result1
0c5e0     FE 20 02 F6 | 	mov	local02, result2
0c5e4     FF 22 02 F6 | 	mov	local03, result3
0c5e8     0C 4E 05 F1 | 	add	fp, #12
0c5ec     A7 1E 62 FC | 	wrlong	local01, fp
0c5f0     04 4E 05 F1 | 	add	fp, #4
0c5f4     A7 20 62 FC | 	wrlong	local02, fp
0c5f8     04 4E 05 F1 | 	add	fp, #4
0c5fc     A7 22 62 FC | 	wrlong	local03, fp
0c600     14 4E 85 F1 | 	sub	fp, #20
0c604     78 C0 BF FD | 	call	#_pop
0c608     FF 22 02 F6 | 	mov	local03, result3
0c60c     A7 FA 61 FC | 	wrlong	result1, fp
0c610     04 4E 05 F1 | 	add	fp, #4
0c614     A7 FC 61 FC | 	wrlong	result2, fp
0c618     04 4E 05 F1 | 	add	fp, #4
0c61c     A7 22 62 FC | 	wrlong	local03, fp
0c620                 | ' t2=pop()
0c620                 | ' t1=pop()
0c620                 | ' 
0c620                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0c620     08 4E 85 F1 | 	sub	fp, #8
0c624     1F 22 0E F2 | 	cmp	local03, #31 wz
0c628     14 4E 05 A1 |  if_e	add	fp, #20
0c62c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c630     14 4E 85 A1 |  if_e	sub	fp, #20
0c634     12 23 02 A6 |  if_e	mov	local03, local04
0c638     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c63c     28 00 90 5D |  if_ne	jmp	#LR__1040
0c640     00 1E 06 F6 | 	mov	local01, #0
0c644     A7 12 02 FB | 	rdlong	arg01, fp
0c648     0C 4E 05 F1 | 	add	fp, #12
0c64c     A7 14 02 FB | 	rdlong	arg02, fp
0c650     0C 4E 85 F1 | 	sub	fp, #12
0c654     10 86 B0 FD | 	call	#__system___string_cmp
0c658     00 FA 0D F2 | 	cmp	result1, #0 wz
0c65c     00 1E 26 A6 |  if_e	not	local01, #0
0c660     A7 1E 62 FC | 	wrlong	local01, fp
0c664     04 03 90 FD | 	jmp	#LR__1050
0c668                 | LR__1040
0c668                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0c668     08 4E 05 F1 | 	add	fp, #8
0c66c     A7 1E 02 FB | 	rdlong	local01, fp
0c670     08 4E 85 F1 | 	sub	fp, #8
0c674     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c678     14 4E 05 A1 |  if_e	add	fp, #20
0c67c     A7 24 02 AB |  if_e	rdlong	local04, fp
0c680     14 4E 85 A1 |  if_e	sub	fp, #20
0c684     12 23 02 A6 |  if_e	mov	local03, local04
0c688     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c68c     2C 00 90 5D |  if_ne	jmp	#LR__1041
0c690     00 1E 06 F6 | 	mov	local01, #0
0c694     A7 12 02 FB | 	rdlong	arg01, fp
0c698     0C 4E 05 F1 | 	add	fp, #12
0c69c     A7 14 02 FB | 	rdlong	arg02, fp
0c6a0     0C 4E 85 F1 | 	sub	fp, #12
0c6a4     01 16 06 F6 | 	mov	arg03, #1
0c6a8     DC B3 B0 FD | 	call	#__system___float_cmp
0c6ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6b0     00 1E 26 A6 |  if_e	not	local01, #0
0c6b4     A7 1E 62 FC | 	wrlong	local01, fp
0c6b8     B0 02 90 FD | 	jmp	#LR__1050
0c6bc                 | LR__1041
0c6bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0c6bc     08 4E 05 F1 | 	add	fp, #8
0c6c0     A7 1E 02 FB | 	rdlong	local01, fp
0c6c4     08 4E 85 F1 | 	sub	fp, #8
0c6c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c6cc     14 4E 05 A1 |  if_e	add	fp, #20
0c6d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c6d4     14 4E 85 A1 |  if_e	sub	fp, #20
0c6d8     12 23 02 A6 |  if_e	mov	local03, local04
0c6dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c6e0     48 00 90 5D |  if_ne	jmp	#LR__1042
0c6e4     00 1E 06 F6 | 	mov	local01, #0
0c6e8     A7 20 02 FB | 	rdlong	local02, fp
0c6ec     0C 4E 05 F1 | 	add	fp, #12
0c6f0     A7 12 02 FB | 	rdlong	arg01, fp
0c6f4     0C 4E 85 F1 | 	sub	fp, #12
0c6f8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c6fc     1F 26 C6 C9 |  if_b	decod	local05, #31
0c700     00 26 06 36 |  if_ae	mov	local05, #0
0c704     20 AC B0 FD | 	call	#__system___float_fromuns
0c708     13 FB 61 F5 | 	xor	result1, local05
0c70c     FD 14 02 F6 | 	mov	arg02, result1
0c710     10 13 02 F6 | 	mov	arg01, local02
0c714     01 16 06 F6 | 	mov	arg03, #1
0c718     6C B3 B0 FD | 	call	#__system___float_cmp
0c71c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c720     00 1E 26 A6 |  if_e	not	local01, #0
0c724     A7 1E 62 FC | 	wrlong	local01, fp
0c728     40 02 90 FD | 	jmp	#LR__1050
0c72c                 | LR__1042
0c72c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0c72c     08 4E 05 F1 | 	add	fp, #8
0c730     A7 1E 02 FB | 	rdlong	local01, fp
0c734     08 4E 85 F1 | 	sub	fp, #8
0c738     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c73c     14 4E 05 A1 |  if_e	add	fp, #20
0c740     A7 24 02 AB |  if_e	rdlong	local04, fp
0c744     14 4E 85 A1 |  if_e	sub	fp, #20
0c748     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c74c     38 00 90 5D |  if_ne	jmp	#LR__1043
0c750     00 1E 06 F6 | 	mov	local01, #0
0c754     A7 20 02 FB | 	rdlong	local02, fp
0c758     0C 4E 05 F1 | 	add	fp, #12
0c75c     A7 12 02 FB | 	rdlong	arg01, fp
0c760     0C 4E 85 F1 | 	sub	fp, #12
0c764     C0 AB B0 FD | 	call	#__system___float_fromuns
0c768     FD 14 02 F6 | 	mov	arg02, result1
0c76c     10 13 02 F6 | 	mov	arg01, local02
0c770     01 16 06 F6 | 	mov	arg03, #1
0c774     10 B3 B0 FD | 	call	#__system___float_cmp
0c778     00 FA 0D F2 | 	cmp	result1, #0 wz
0c77c     00 1E 26 A6 |  if_e	not	local01, #0
0c780     A7 1E 62 FC | 	wrlong	local01, fp
0c784     E4 01 90 FD | 	jmp	#LR__1050
0c788                 | LR__1043
0c788                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0c788     08 4E 05 F1 | 	add	fp, #8
0c78c     A7 1E 02 FB | 	rdlong	local01, fp
0c790     08 4E 85 F1 | 	sub	fp, #8
0c794     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c798     14 4E 05 A1 |  if_e	add	fp, #20
0c79c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c7a0     14 4E 85 A1 |  if_e	sub	fp, #20
0c7a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c7a8     44 00 90 5D |  if_ne	jmp	#LR__1044
0c7ac     00 1E 06 F6 | 	mov	local01, #0
0c7b0     A7 12 02 FB | 	rdlong	arg01, fp
0c7b4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c7b8     1F 26 C6 C9 |  if_b	decod	local05, #31
0c7bc     00 26 06 36 |  if_ae	mov	local05, #0
0c7c0     64 AB B0 FD | 	call	#__system___float_fromuns
0c7c4     13 FB 61 F5 | 	xor	result1, local05
0c7c8     FD 12 02 F6 | 	mov	arg01, result1
0c7cc     0C 4E 05 F1 | 	add	fp, #12
0c7d0     A7 14 02 FB | 	rdlong	arg02, fp
0c7d4     0C 4E 85 F1 | 	sub	fp, #12
0c7d8     01 16 06 F6 | 	mov	arg03, #1
0c7dc     A8 B2 B0 FD | 	call	#__system___float_cmp
0c7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7e4     00 1E 26 A6 |  if_e	not	local01, #0
0c7e8     A7 1E 62 FC | 	wrlong	local01, fp
0c7ec     7C 01 90 FD | 	jmp	#LR__1050
0c7f0                 | LR__1044
0c7f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0c7f0     08 4E 05 F1 | 	add	fp, #8
0c7f4     A7 1E 02 FB | 	rdlong	local01, fp
0c7f8     08 4E 85 F1 | 	sub	fp, #8
0c7fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c800     14 4E 05 A1 |  if_e	add	fp, #20
0c804     A7 22 02 AB |  if_e	rdlong	local03, fp
0c808     14 4E 85 A1 |  if_e	sub	fp, #20
0c80c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c810     24 00 90 5D |  if_ne	jmp	#LR__1045
0c814     00 1E 06 F6 | 	mov	local01, #0
0c818     A7 20 02 FB | 	rdlong	local02, fp
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 22 02 FB | 	rdlong	local03, fp
0c824     0C 4E 85 F1 | 	sub	fp, #12
0c828     11 21 0A F2 | 	cmp	local02, local03 wz
0c82c     01 1E 66 A6 |  if_e	neg	local01, #1
0c830     A7 1E 62 FC | 	wrlong	local01, fp
0c834     34 01 90 FD | 	jmp	#LR__1050
0c838                 | LR__1045
0c838                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0c838     08 4E 05 F1 | 	add	fp, #8
0c83c     A7 1E 02 FB | 	rdlong	local01, fp
0c840     08 4E 85 F1 | 	sub	fp, #8
0c844     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c848     14 4E 05 A1 |  if_e	add	fp, #20
0c84c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c850     14 4E 85 A1 |  if_e	sub	fp, #20
0c854     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c858     24 00 90 5D |  if_ne	jmp	#LR__1046
0c85c     00 1E 06 F6 | 	mov	local01, #0
0c860     A7 20 02 FB | 	rdlong	local02, fp
0c864     0C 4E 05 F1 | 	add	fp, #12
0c868     A7 22 02 FB | 	rdlong	local03, fp
0c86c     0C 4E 85 F1 | 	sub	fp, #12
0c870     11 21 0A F2 | 	cmp	local02, local03 wz
0c874     01 1E 66 A6 |  if_e	neg	local01, #1
0c878     A7 1E 62 FC | 	wrlong	local01, fp
0c87c     EC 00 90 FD | 	jmp	#LR__1050
0c880                 | LR__1046
0c880                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0c880     08 4E 05 F1 | 	add	fp, #8
0c884     A7 1E 02 FB | 	rdlong	local01, fp
0c888     08 4E 85 F1 | 	sub	fp, #8
0c88c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c890     14 4E 05 A1 |  if_e	add	fp, #20
0c894     A7 22 02 AB |  if_e	rdlong	local03, fp
0c898     14 4E 85 A1 |  if_e	sub	fp, #20
0c89c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c8a0     34 00 90 5D |  if_ne	jmp	#LR__1047
0c8a4     00 1E 06 F6 | 	mov	local01, #0
0c8a8     A7 12 02 FB | 	rdlong	arg01, fp
0c8ac     78 AA B0 FD | 	call	#__system___float_fromuns
0c8b0     FD 12 02 F6 | 	mov	arg01, result1
0c8b4     0C 4E 05 F1 | 	add	fp, #12
0c8b8     A7 14 02 FB | 	rdlong	arg02, fp
0c8bc     0C 4E 85 F1 | 	sub	fp, #12
0c8c0     01 16 06 F6 | 	mov	arg03, #1
0c8c4     C0 B1 B0 FD | 	call	#__system___float_cmp
0c8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8cc     00 1E 26 A6 |  if_e	not	local01, #0
0c8d0     A7 1E 62 FC | 	wrlong	local01, fp
0c8d4     94 00 90 FD | 	jmp	#LR__1050
0c8d8                 | LR__1047
0c8d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0c8d8     08 4E 05 F1 | 	add	fp, #8
0c8dc     A7 1E 02 FB | 	rdlong	local01, fp
0c8e0     08 4E 85 F1 | 	sub	fp, #8
0c8e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c8e8     14 4E 05 A1 |  if_e	add	fp, #20
0c8ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0c8f0     14 4E 85 A1 |  if_e	sub	fp, #20
0c8f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c8f8     24 00 90 5D |  if_ne	jmp	#LR__1048
0c8fc     00 1E 06 F6 | 	mov	local01, #0
0c900     A7 20 02 FB | 	rdlong	local02, fp
0c904     0C 4E 05 F1 | 	add	fp, #12
0c908     A7 22 02 FB | 	rdlong	local03, fp
0c90c     0C 4E 85 F1 | 	sub	fp, #12
0c910     11 21 0A F2 | 	cmp	local02, local03 wz
0c914     01 1E 66 A6 |  if_e	neg	local01, #1
0c918     A7 1E 62 FC | 	wrlong	local01, fp
0c91c     4C 00 90 FD | 	jmp	#LR__1050
0c920                 | LR__1048
0c920                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0c920     08 4E 05 F1 | 	add	fp, #8
0c924     A7 1E 02 FB | 	rdlong	local01, fp
0c928     08 4E 85 F1 | 	sub	fp, #8
0c92c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c930     14 4E 05 A1 |  if_e	add	fp, #20
0c934     A7 22 02 AB |  if_e	rdlong	local03, fp
0c938     14 4E 85 A1 |  if_e	sub	fp, #20
0c93c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c940     24 00 90 5D |  if_ne	jmp	#LR__1049
0c944     00 1E 06 F6 | 	mov	local01, #0
0c948     A7 20 02 FB | 	rdlong	local02, fp
0c94c     0C 4E 05 F1 | 	add	fp, #12
0c950     A7 22 02 FB | 	rdlong	local03, fp
0c954     0C 4E 85 F1 | 	sub	fp, #12
0c958     11 21 0A F2 | 	cmp	local02, local03 wz
0c95c     01 1E 66 A6 |  if_e	neg	local01, #1
0c960     A7 1E 62 FC | 	wrlong	local01, fp
0c964     04 00 90 FD | 	jmp	#LR__1050
0c968                 | LR__1049
0c968     A7 00 68 FC | 	wrlong	#0, fp
0c96c                 | LR__1050
0c96c     08 4E 05 F1 | 	add	fp, #8
0c970     A7 38 68 FC | 	wrlong	#28, fp
0c974     08 4E 85 F1 | 	sub	fp, #8
0c978     A7 12 02 F6 | 	mov	arg01, fp
0c97c     98 BD BF FD | 	call	#_push
0c980     A7 F0 03 F6 | 	mov	ptra, fp
0c984     B2 00 A0 FD | 	call	#popregs_
0c988                 | _do_eq_ret
0c988     2D 00 64 FD | 	ret
0c98c                 | 
0c98c                 | ' 
0c98c                 | ' sub do_gt
0c98c                 | _do_gt
0c98c     05 4A 05 F6 | 	mov	COUNT_, #5
0c990     A8 00 A0 FD | 	call	#pushregs_
0c994     18 F0 07 F1 | 	add	ptra, #24
0c998     E4 BC BF FD | 	call	#_pop
0c99c     FD 1E 02 F6 | 	mov	local01, result1
0c9a0     FE 20 02 F6 | 	mov	local02, result2
0c9a4     FF 22 02 F6 | 	mov	local03, result3
0c9a8     0C 4E 05 F1 | 	add	fp, #12
0c9ac     A7 1E 62 FC | 	wrlong	local01, fp
0c9b0     04 4E 05 F1 | 	add	fp, #4
0c9b4     A7 20 62 FC | 	wrlong	local02, fp
0c9b8     04 4E 05 F1 | 	add	fp, #4
0c9bc     A7 22 62 FC | 	wrlong	local03, fp
0c9c0     14 4E 85 F1 | 	sub	fp, #20
0c9c4     B8 BC BF FD | 	call	#_pop
0c9c8     FF 22 02 F6 | 	mov	local03, result3
0c9cc     A7 FA 61 FC | 	wrlong	result1, fp
0c9d0     04 4E 05 F1 | 	add	fp, #4
0c9d4     A7 FC 61 FC | 	wrlong	result2, fp
0c9d8     04 4E 05 F1 | 	add	fp, #4
0c9dc     A7 22 62 FC | 	wrlong	local03, fp
0c9e0                 | ' t2=pop()
0c9e0                 | ' t1=pop()
0c9e0                 | ' 
0c9e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0c9e0     08 4E 85 F1 | 	sub	fp, #8
0c9e4     1F 22 0E F2 | 	cmp	local03, #31 wz
0c9e8     14 4E 05 A1 |  if_e	add	fp, #20
0c9ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0c9f0     14 4E 85 A1 |  if_e	sub	fp, #20
0c9f4     12 23 02 A6 |  if_e	mov	local03, local04
0c9f8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c9fc     28 00 90 5D |  if_ne	jmp	#LR__1060
0ca00     00 1E 06 F6 | 	mov	local01, #0
0ca04     A7 12 02 FB | 	rdlong	arg01, fp
0ca08     0C 4E 05 F1 | 	add	fp, #12
0ca0c     A7 14 02 FB | 	rdlong	arg02, fp
0ca10     0C 4E 85 F1 | 	sub	fp, #12
0ca14     50 82 B0 FD | 	call	#__system___string_cmp
0ca18     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca1c     00 1E 26 36 |  if_ae	not	local01, #0
0ca20     A7 1E 62 FC | 	wrlong	local01, fp
0ca24     04 03 90 FD | 	jmp	#LR__1070
0ca28                 | LR__1060
0ca28                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0ca28     08 4E 05 F1 | 	add	fp, #8
0ca2c     A7 1E 02 FB | 	rdlong	local01, fp
0ca30     08 4E 85 F1 | 	sub	fp, #8
0ca34     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ca38     14 4E 05 A1 |  if_e	add	fp, #20
0ca3c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ca40     14 4E 85 A1 |  if_e	sub	fp, #20
0ca44     12 23 02 A6 |  if_e	mov	local03, local04
0ca48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ca4c     2C 00 90 5D |  if_ne	jmp	#LR__1061
0ca50     00 1E 06 F6 | 	mov	local01, #0
0ca54     A7 12 02 FB | 	rdlong	arg01, fp
0ca58     0C 4E 05 F1 | 	add	fp, #12
0ca5c     A7 14 02 FB | 	rdlong	arg02, fp
0ca60     0C 4E 85 F1 | 	sub	fp, #12
0ca64     01 16 66 F6 | 	neg	arg03, #1
0ca68     1C B0 B0 FD | 	call	#__system___float_cmp
0ca6c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca70     00 1E 26 36 |  if_ae	not	local01, #0
0ca74     A7 1E 62 FC | 	wrlong	local01, fp
0ca78     B0 02 90 FD | 	jmp	#LR__1070
0ca7c                 | LR__1061
0ca7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0ca7c     08 4E 05 F1 | 	add	fp, #8
0ca80     A7 1E 02 FB | 	rdlong	local01, fp
0ca84     08 4E 85 F1 | 	sub	fp, #8
0ca88     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ca8c     14 4E 05 A1 |  if_e	add	fp, #20
0ca90     A7 24 02 AB |  if_e	rdlong	local04, fp
0ca94     14 4E 85 A1 |  if_e	sub	fp, #20
0ca98     12 23 02 A6 |  if_e	mov	local03, local04
0ca9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0caa0     48 00 90 5D |  if_ne	jmp	#LR__1062
0caa4     00 1E 06 F6 | 	mov	local01, #0
0caa8     A7 20 02 FB | 	rdlong	local02, fp
0caac     0C 4E 05 F1 | 	add	fp, #12
0cab0     A7 12 02 FB | 	rdlong	arg01, fp
0cab4     0C 4E 85 F1 | 	sub	fp, #12
0cab8     09 13 52 F6 | 	abs	arg01, arg01 wc
0cabc     1F 26 C6 C9 |  if_b	decod	local05, #31
0cac0     00 26 06 36 |  if_ae	mov	local05, #0
0cac4     60 A8 B0 FD | 	call	#__system___float_fromuns
0cac8     13 FB 61 F5 | 	xor	result1, local05
0cacc     FD 14 02 F6 | 	mov	arg02, result1
0cad0     10 13 02 F6 | 	mov	arg01, local02
0cad4     01 16 66 F6 | 	neg	arg03, #1
0cad8     AC AF B0 FD | 	call	#__system___float_cmp
0cadc     01 FA 55 F2 | 	cmps	result1, #1 wc
0cae0     00 1E 26 36 |  if_ae	not	local01, #0
0cae4     A7 1E 62 FC | 	wrlong	local01, fp
0cae8     40 02 90 FD | 	jmp	#LR__1070
0caec                 | LR__1062
0caec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0caec     08 4E 05 F1 | 	add	fp, #8
0caf0     A7 1E 02 FB | 	rdlong	local01, fp
0caf4     08 4E 85 F1 | 	sub	fp, #8
0caf8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cafc     14 4E 05 A1 |  if_e	add	fp, #20
0cb00     A7 24 02 AB |  if_e	rdlong	local04, fp
0cb04     14 4E 85 A1 |  if_e	sub	fp, #20
0cb08     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cb0c     38 00 90 5D |  if_ne	jmp	#LR__1063
0cb10     00 1E 06 F6 | 	mov	local01, #0
0cb14     A7 20 02 FB | 	rdlong	local02, fp
0cb18     0C 4E 05 F1 | 	add	fp, #12
0cb1c     A7 12 02 FB | 	rdlong	arg01, fp
0cb20     0C 4E 85 F1 | 	sub	fp, #12
0cb24     00 A8 B0 FD | 	call	#__system___float_fromuns
0cb28     FD 14 02 F6 | 	mov	arg02, result1
0cb2c     10 13 02 F6 | 	mov	arg01, local02
0cb30     01 16 66 F6 | 	neg	arg03, #1
0cb34     50 AF B0 FD | 	call	#__system___float_cmp
0cb38     01 FA 55 F2 | 	cmps	result1, #1 wc
0cb3c     00 1E 26 36 |  if_ae	not	local01, #0
0cb40     A7 1E 62 FC | 	wrlong	local01, fp
0cb44     E4 01 90 FD | 	jmp	#LR__1070
0cb48                 | LR__1063
0cb48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0cb48     08 4E 05 F1 | 	add	fp, #8
0cb4c     A7 1E 02 FB | 	rdlong	local01, fp
0cb50     08 4E 85 F1 | 	sub	fp, #8
0cb54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cb58     14 4E 05 A1 |  if_e	add	fp, #20
0cb5c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cb60     14 4E 85 A1 |  if_e	sub	fp, #20
0cb64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cb68     44 00 90 5D |  if_ne	jmp	#LR__1064
0cb6c     00 1E 06 F6 | 	mov	local01, #0
0cb70     A7 12 02 FB | 	rdlong	arg01, fp
0cb74     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb78     1F 26 C6 C9 |  if_b	decod	local05, #31
0cb7c     00 26 06 36 |  if_ae	mov	local05, #0
0cb80     A4 A7 B0 FD | 	call	#__system___float_fromuns
0cb84     13 FB 61 F5 | 	xor	result1, local05
0cb88     FD 12 02 F6 | 	mov	arg01, result1
0cb8c     0C 4E 05 F1 | 	add	fp, #12
0cb90     A7 14 02 FB | 	rdlong	arg02, fp
0cb94     0C 4E 85 F1 | 	sub	fp, #12
0cb98     01 16 66 F6 | 	neg	arg03, #1
0cb9c     E8 AE B0 FD | 	call	#__system___float_cmp
0cba0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cba4     00 1E 26 36 |  if_ae	not	local01, #0
0cba8     A7 1E 62 FC | 	wrlong	local01, fp
0cbac     7C 01 90 FD | 	jmp	#LR__1070
0cbb0                 | LR__1064
0cbb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0cbb0     08 4E 05 F1 | 	add	fp, #8
0cbb4     A7 1E 02 FB | 	rdlong	local01, fp
0cbb8     08 4E 85 F1 | 	sub	fp, #8
0cbbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cbc0     14 4E 05 A1 |  if_e	add	fp, #20
0cbc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cbc8     14 4E 85 A1 |  if_e	sub	fp, #20
0cbcc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cbd0     24 00 90 5D |  if_ne	jmp	#LR__1065
0cbd4     00 1E 06 F6 | 	mov	local01, #0
0cbd8     A7 20 02 FB | 	rdlong	local02, fp
0cbdc     0C 4E 05 F1 | 	add	fp, #12
0cbe0     A7 22 02 FB | 	rdlong	local03, fp
0cbe4     0C 4E 85 F1 | 	sub	fp, #12
0cbe8     11 21 5A F2 | 	cmps	local02, local03 wcz
0cbec     01 1E 66 16 |  if_a	neg	local01, #1
0cbf0     A7 1E 62 FC | 	wrlong	local01, fp
0cbf4     34 01 90 FD | 	jmp	#LR__1070
0cbf8                 | LR__1065
0cbf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0cbf8     08 4E 05 F1 | 	add	fp, #8
0cbfc     A7 1E 02 FB | 	rdlong	local01, fp
0cc00     08 4E 85 F1 | 	sub	fp, #8
0cc04     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc08     14 4E 05 A1 |  if_e	add	fp, #20
0cc0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cc10     14 4E 85 A1 |  if_e	sub	fp, #20
0cc14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cc18     24 00 90 5D |  if_ne	jmp	#LR__1066
0cc1c     00 1E 06 F6 | 	mov	local01, #0
0cc20     A7 20 02 FB | 	rdlong	local02, fp
0cc24     0C 4E 05 F1 | 	add	fp, #12
0cc28     A7 22 02 FB | 	rdlong	local03, fp
0cc2c     0C 4E 85 F1 | 	sub	fp, #12
0cc30     11 21 5A F2 | 	cmps	local02, local03 wcz
0cc34     01 1E 66 16 |  if_a	neg	local01, #1
0cc38     A7 1E 62 FC | 	wrlong	local01, fp
0cc3c     EC 00 90 FD | 	jmp	#LR__1070
0cc40                 | LR__1066
0cc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0cc40     08 4E 05 F1 | 	add	fp, #8
0cc44     A7 1E 02 FB | 	rdlong	local01, fp
0cc48     08 4E 85 F1 | 	sub	fp, #8
0cc4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cc50     14 4E 05 A1 |  if_e	add	fp, #20
0cc54     A7 22 02 AB |  if_e	rdlong	local03, fp
0cc58     14 4E 85 A1 |  if_e	sub	fp, #20
0cc5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cc60     34 00 90 5D |  if_ne	jmp	#LR__1067
0cc64     00 1E 06 F6 | 	mov	local01, #0
0cc68     A7 12 02 FB | 	rdlong	arg01, fp
0cc6c     B8 A6 B0 FD | 	call	#__system___float_fromuns
0cc70     FD 12 02 F6 | 	mov	arg01, result1
0cc74     0C 4E 05 F1 | 	add	fp, #12
0cc78     A7 14 02 FB | 	rdlong	arg02, fp
0cc7c     0C 4E 85 F1 | 	sub	fp, #12
0cc80     01 16 66 F6 | 	neg	arg03, #1
0cc84     00 AE B0 FD | 	call	#__system___float_cmp
0cc88     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc8c     00 1E 26 36 |  if_ae	not	local01, #0
0cc90     A7 1E 62 FC | 	wrlong	local01, fp
0cc94     94 00 90 FD | 	jmp	#LR__1070
0cc98                 | LR__1067
0cc98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0cc98     08 4E 05 F1 | 	add	fp, #8
0cc9c     A7 1E 02 FB | 	rdlong	local01, fp
0cca0     08 4E 85 F1 | 	sub	fp, #8
0cca4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cca8     14 4E 05 A1 |  if_e	add	fp, #20
0ccac     A7 22 02 AB |  if_e	rdlong	local03, fp
0ccb0     14 4E 85 A1 |  if_e	sub	fp, #20
0ccb4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ccb8     24 00 90 5D |  if_ne	jmp	#LR__1068
0ccbc     00 1E 06 F6 | 	mov	local01, #0
0ccc0     A7 20 02 FB | 	rdlong	local02, fp
0ccc4     0C 4E 05 F1 | 	add	fp, #12
0ccc8     A7 22 02 FB | 	rdlong	local03, fp
0cccc     0C 4E 85 F1 | 	sub	fp, #12
0ccd0     11 21 5A F2 | 	cmps	local02, local03 wcz
0ccd4     01 1E 66 16 |  if_a	neg	local01, #1
0ccd8     A7 1E 62 FC | 	wrlong	local01, fp
0ccdc     4C 00 90 FD | 	jmp	#LR__1070
0cce0                 | LR__1068
0cce0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0cce0     08 4E 05 F1 | 	add	fp, #8
0cce4     A7 1E 02 FB | 	rdlong	local01, fp
0cce8     08 4E 85 F1 | 	sub	fp, #8
0ccec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ccf0     14 4E 05 A1 |  if_e	add	fp, #20
0ccf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ccf8     14 4E 85 A1 |  if_e	sub	fp, #20
0ccfc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cd00     24 00 90 5D |  if_ne	jmp	#LR__1069
0cd04     00 1E 06 F6 | 	mov	local01, #0
0cd08     A7 20 02 FB | 	rdlong	local02, fp
0cd0c     0C 4E 05 F1 | 	add	fp, #12
0cd10     A7 22 02 FB | 	rdlong	local03, fp
0cd14     0C 4E 85 F1 | 	sub	fp, #12
0cd18     11 21 1A F2 | 	cmp	local02, local03 wcz
0cd1c     01 1E 66 16 |  if_a	neg	local01, #1
0cd20     A7 1E 62 FC | 	wrlong	local01, fp
0cd24     04 00 90 FD | 	jmp	#LR__1070
0cd28                 | LR__1069
0cd28     A7 00 68 FC | 	wrlong	#0, fp
0cd2c                 | LR__1070
0cd2c     08 4E 05 F1 | 	add	fp, #8
0cd30     A7 38 68 FC | 	wrlong	#28, fp
0cd34     08 4E 85 F1 | 	sub	fp, #8
0cd38     A7 12 02 F6 | 	mov	arg01, fp
0cd3c     D8 B9 BF FD | 	call	#_push
0cd40     A7 F0 03 F6 | 	mov	ptra, fp
0cd44     B2 00 A0 FD | 	call	#popregs_
0cd48                 | _do_gt_ret
0cd48     2D 00 64 FD | 	ret
0cd4c                 | 
0cd4c                 | ' 
0cd4c                 | ' sub do_lt
0cd4c                 | _do_lt
0cd4c     05 4A 05 F6 | 	mov	COUNT_, #5
0cd50     A8 00 A0 FD | 	call	#pushregs_
0cd54     18 F0 07 F1 | 	add	ptra, #24
0cd58     24 B9 BF FD | 	call	#_pop
0cd5c     FD 1E 02 F6 | 	mov	local01, result1
0cd60     FE 20 02 F6 | 	mov	local02, result2
0cd64     FF 22 02 F6 | 	mov	local03, result3
0cd68     0C 4E 05 F1 | 	add	fp, #12
0cd6c     A7 1E 62 FC | 	wrlong	local01, fp
0cd70     04 4E 05 F1 | 	add	fp, #4
0cd74     A7 20 62 FC | 	wrlong	local02, fp
0cd78     04 4E 05 F1 | 	add	fp, #4
0cd7c     A7 22 62 FC | 	wrlong	local03, fp
0cd80     14 4E 85 F1 | 	sub	fp, #20
0cd84     F8 B8 BF FD | 	call	#_pop
0cd88     FF 22 02 F6 | 	mov	local03, result3
0cd8c     A7 FA 61 FC | 	wrlong	result1, fp
0cd90     04 4E 05 F1 | 	add	fp, #4
0cd94     A7 FC 61 FC | 	wrlong	result2, fp
0cd98     04 4E 05 F1 | 	add	fp, #4
0cd9c     A7 22 62 FC | 	wrlong	local03, fp
0cda0                 | ' t2=pop()
0cda0                 | ' t1=pop()
0cda0                 | ' 
0cda0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0cda0     08 4E 85 F1 | 	sub	fp, #8
0cda4     1F 22 0E F2 | 	cmp	local03, #31 wz
0cda8     14 4E 05 A1 |  if_e	add	fp, #20
0cdac     A7 24 02 AB |  if_e	rdlong	local04, fp
0cdb0     14 4E 85 A1 |  if_e	sub	fp, #20
0cdb4     12 23 02 A6 |  if_e	mov	local03, local04
0cdb8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cdbc     28 00 90 5D |  if_ne	jmp	#LR__1080
0cdc0     00 1E 06 F6 | 	mov	local01, #0
0cdc4     A7 12 02 FB | 	rdlong	arg01, fp
0cdc8     0C 4E 05 F1 | 	add	fp, #12
0cdcc     A7 14 02 FB | 	rdlong	arg02, fp
0cdd0     0C 4E 85 F1 | 	sub	fp, #12
0cdd4     90 7E B0 FD | 	call	#__system___string_cmp
0cdd8     00 FA 55 F2 | 	cmps	result1, #0 wc
0cddc     00 1E 26 C6 |  if_b	not	local01, #0
0cde0     A7 1E 62 FC | 	wrlong	local01, fp
0cde4     F4 02 90 FD | 	jmp	#LR__1090
0cde8                 | LR__1080
0cde8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0cde8     08 4E 05 F1 | 	add	fp, #8
0cdec     A7 1E 02 FB | 	rdlong	local01, fp
0cdf0     08 4E 85 F1 | 	sub	fp, #8
0cdf4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cdf8     14 4E 05 A1 |  if_e	add	fp, #20
0cdfc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ce00     14 4E 85 A1 |  if_e	sub	fp, #20
0ce04     12 23 02 A6 |  if_e	mov	local03, local04
0ce08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ce0c     2C 00 90 5D |  if_ne	jmp	#LR__1081
0ce10     00 1E 06 F6 | 	mov	local01, #0
0ce14     A7 12 02 FB | 	rdlong	arg01, fp
0ce18     0C 4E 05 F1 | 	add	fp, #12
0ce1c     A7 14 02 FB | 	rdlong	arg02, fp
0ce20     0C 4E 85 F1 | 	sub	fp, #12
0ce24     01 16 06 F6 | 	mov	arg03, #1
0ce28     5C AC B0 FD | 	call	#__system___float_cmp
0ce2c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce30     00 1E 26 C6 |  if_b	not	local01, #0
0ce34     A7 1E 62 FC | 	wrlong	local01, fp
0ce38     A0 02 90 FD | 	jmp	#LR__1090
0ce3c                 | LR__1081
0ce3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0ce3c     08 4E 05 F1 | 	add	fp, #8
0ce40     A7 1E 02 FB | 	rdlong	local01, fp
0ce44     08 4E 85 F1 | 	sub	fp, #8
0ce48     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ce4c     14 4E 05 A1 |  if_e	add	fp, #20
0ce50     A7 24 02 AB |  if_e	rdlong	local04, fp
0ce54     14 4E 85 A1 |  if_e	sub	fp, #20
0ce58     12 23 02 A6 |  if_e	mov	local03, local04
0ce5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ce60     48 00 90 5D |  if_ne	jmp	#LR__1082
0ce64     00 1E 06 F6 | 	mov	local01, #0
0ce68     A7 20 02 FB | 	rdlong	local02, fp
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 12 02 FB | 	rdlong	arg01, fp
0ce74     0C 4E 85 F1 | 	sub	fp, #12
0ce78     09 13 52 F6 | 	abs	arg01, arg01 wc
0ce7c     1F 26 C6 C9 |  if_b	decod	local05, #31
0ce80     00 26 06 36 |  if_ae	mov	local05, #0
0ce84     A0 A4 B0 FD | 	call	#__system___float_fromuns
0ce88     13 FB 61 F5 | 	xor	result1, local05
0ce8c     FD 14 02 F6 | 	mov	arg02, result1
0ce90     10 13 02 F6 | 	mov	arg01, local02
0ce94     01 16 06 F6 | 	mov	arg03, #1
0ce98     EC AB B0 FD | 	call	#__system___float_cmp
0ce9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cea0     00 1E 26 C6 |  if_b	not	local01, #0
0cea4     A7 1E 62 FC | 	wrlong	local01, fp
0cea8     30 02 90 FD | 	jmp	#LR__1090
0ceac                 | LR__1082
0ceac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0ceac     08 4E 05 F1 | 	add	fp, #8
0ceb0     A7 1E 02 FB | 	rdlong	local01, fp
0ceb4     08 4E 85 F1 | 	sub	fp, #8
0ceb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cebc     14 4E 05 A1 |  if_e	add	fp, #20
0cec0     A7 24 02 AB |  if_e	rdlong	local04, fp
0cec4     14 4E 85 A1 |  if_e	sub	fp, #20
0cec8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cecc     38 00 90 5D |  if_ne	jmp	#LR__1083
0ced0     00 1E 06 F6 | 	mov	local01, #0
0ced4     A7 20 02 FB | 	rdlong	local02, fp
0ced8     0C 4E 05 F1 | 	add	fp, #12
0cedc     A7 12 02 FB | 	rdlong	arg01, fp
0cee0     0C 4E 85 F1 | 	sub	fp, #12
0cee4     40 A4 B0 FD | 	call	#__system___float_fromuns
0cee8     FD 14 02 F6 | 	mov	arg02, result1
0ceec     10 13 02 F6 | 	mov	arg01, local02
0cef0     01 16 06 F6 | 	mov	arg03, #1
0cef4     90 AB B0 FD | 	call	#__system___float_cmp
0cef8     00 FA 55 F2 | 	cmps	result1, #0 wc
0cefc     00 1E 26 C6 |  if_b	not	local01, #0
0cf00     A7 1E 62 FC | 	wrlong	local01, fp
0cf04     D4 01 90 FD | 	jmp	#LR__1090
0cf08                 | LR__1083
0cf08                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0cf08     08 4E 05 F1 | 	add	fp, #8
0cf0c     A7 1E 02 FB | 	rdlong	local01, fp
0cf10     08 4E 85 F1 | 	sub	fp, #8
0cf14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cf18     14 4E 05 A1 |  if_e	add	fp, #20
0cf1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf20     14 4E 85 A1 |  if_e	sub	fp, #20
0cf24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cf28     44 00 90 5D |  if_ne	jmp	#LR__1084
0cf2c     00 1E 06 F6 | 	mov	local01, #0
0cf30     A7 12 02 FB | 	rdlong	arg01, fp
0cf34     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf38     1F 26 C6 C9 |  if_b	decod	local05, #31
0cf3c     00 26 06 36 |  if_ae	mov	local05, #0
0cf40     E4 A3 B0 FD | 	call	#__system___float_fromuns
0cf44     13 FB 61 F5 | 	xor	result1, local05
0cf48     FD 12 02 F6 | 	mov	arg01, result1
0cf4c     0C 4E 05 F1 | 	add	fp, #12
0cf50     A7 14 02 FB | 	rdlong	arg02, fp
0cf54     0C 4E 85 F1 | 	sub	fp, #12
0cf58     01 16 06 F6 | 	mov	arg03, #1
0cf5c     28 AB B0 FD | 	call	#__system___float_cmp
0cf60     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf64     00 1E 26 C6 |  if_b	not	local01, #0
0cf68     A7 1E 62 FC | 	wrlong	local01, fp
0cf6c     6C 01 90 FD | 	jmp	#LR__1090
0cf70                 | LR__1084
0cf70                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0cf70     08 4E 05 F1 | 	add	fp, #8
0cf74     A7 1E 02 FB | 	rdlong	local01, fp
0cf78     08 4E 85 F1 | 	sub	fp, #8
0cf7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cf80     14 4E 05 A1 |  if_e	add	fp, #20
0cf84     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf88     14 4E 85 A1 |  if_e	sub	fp, #20
0cf8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf90     20 00 90 5D |  if_ne	jmp	#LR__1085
0cf94     A7 20 02 FB | 	rdlong	local02, fp
0cf98     0C 4E 05 F1 | 	add	fp, #12
0cf9c     A7 22 02 FB | 	rdlong	local03, fp
0cfa0     0C 4E 85 F1 | 	sub	fp, #12
0cfa4     11 21 52 F2 | 	cmps	local02, local03 wc
0cfa8     0F 1F A2 F1 | 	subx	local01, local01
0cfac     A7 1E 62 FC | 	wrlong	local01, fp
0cfb0     28 01 90 FD | 	jmp	#LR__1090
0cfb4                 | LR__1085
0cfb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0cfb4     08 4E 05 F1 | 	add	fp, #8
0cfb8     A7 1E 02 FB | 	rdlong	local01, fp
0cfbc     08 4E 85 F1 | 	sub	fp, #8
0cfc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cfc4     14 4E 05 A1 |  if_e	add	fp, #20
0cfc8     A7 22 02 AB |  if_e	rdlong	local03, fp
0cfcc     14 4E 85 A1 |  if_e	sub	fp, #20
0cfd0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cfd4     20 00 90 5D |  if_ne	jmp	#LR__1086
0cfd8     A7 20 02 FB | 	rdlong	local02, fp
0cfdc     0C 4E 05 F1 | 	add	fp, #12
0cfe0     A7 22 02 FB | 	rdlong	local03, fp
0cfe4     0C 4E 85 F1 | 	sub	fp, #12
0cfe8     11 21 52 F2 | 	cmps	local02, local03 wc
0cfec     0F 1F A2 F1 | 	subx	local01, local01
0cff0     A7 1E 62 FC | 	wrlong	local01, fp
0cff4     E4 00 90 FD | 	jmp	#LR__1090
0cff8                 | LR__1086
0cff8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0cff8     08 4E 05 F1 | 	add	fp, #8
0cffc     A7 1E 02 FB | 	rdlong	local01, fp
0d000     08 4E 85 F1 | 	sub	fp, #8
0d004     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d008     14 4E 05 A1 |  if_e	add	fp, #20
0d00c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d010     14 4E 85 A1 |  if_e	sub	fp, #20
0d014     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d018     34 00 90 5D |  if_ne	jmp	#LR__1087
0d01c     00 1E 06 F6 | 	mov	local01, #0
0d020     A7 12 02 FB | 	rdlong	arg01, fp
0d024     00 A3 B0 FD | 	call	#__system___float_fromuns
0d028     FD 12 02 F6 | 	mov	arg01, result1
0d02c     0C 4E 05 F1 | 	add	fp, #12
0d030     A7 14 02 FB | 	rdlong	arg02, fp
0d034     0C 4E 85 F1 | 	sub	fp, #12
0d038     01 16 06 F6 | 	mov	arg03, #1
0d03c     48 AA B0 FD | 	call	#__system___float_cmp
0d040     00 FA 55 F2 | 	cmps	result1, #0 wc
0d044     00 1E 26 C6 |  if_b	not	local01, #0
0d048     A7 1E 62 FC | 	wrlong	local01, fp
0d04c     8C 00 90 FD | 	jmp	#LR__1090
0d050                 | LR__1087
0d050                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d050     08 4E 05 F1 | 	add	fp, #8
0d054     A7 1E 02 FB | 	rdlong	local01, fp
0d058     08 4E 85 F1 | 	sub	fp, #8
0d05c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d060     14 4E 05 A1 |  if_e	add	fp, #20
0d064     A7 22 02 AB |  if_e	rdlong	local03, fp
0d068     14 4E 85 A1 |  if_e	sub	fp, #20
0d06c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d070     20 00 90 5D |  if_ne	jmp	#LR__1088
0d074     A7 20 02 FB | 	rdlong	local02, fp
0d078     0C 4E 05 F1 | 	add	fp, #12
0d07c     A7 22 02 FB | 	rdlong	local03, fp
0d080     0C 4E 85 F1 | 	sub	fp, #12
0d084     11 21 52 F2 | 	cmps	local02, local03 wc
0d088     0F 1F A2 F1 | 	subx	local01, local01
0d08c     A7 1E 62 FC | 	wrlong	local01, fp
0d090     48 00 90 FD | 	jmp	#LR__1090
0d094                 | LR__1088
0d094                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d094     08 4E 05 F1 | 	add	fp, #8
0d098     A7 1E 02 FB | 	rdlong	local01, fp
0d09c     08 4E 85 F1 | 	sub	fp, #8
0d0a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d0a4     14 4E 05 A1 |  if_e	add	fp, #20
0d0a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d0ac     14 4E 85 A1 |  if_e	sub	fp, #20
0d0b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d0b4     20 00 90 5D |  if_ne	jmp	#LR__1089
0d0b8     A7 20 02 FB | 	rdlong	local02, fp
0d0bc     0C 4E 05 F1 | 	add	fp, #12
0d0c0     A7 22 02 FB | 	rdlong	local03, fp
0d0c4     0C 4E 85 F1 | 	sub	fp, #12
0d0c8     11 21 12 F2 | 	cmp	local02, local03 wc
0d0cc     0F 1F A2 F1 | 	subx	local01, local01
0d0d0     A7 1E 62 FC | 	wrlong	local01, fp
0d0d4     04 00 90 FD | 	jmp	#LR__1090
0d0d8                 | LR__1089
0d0d8     A7 00 68 FC | 	wrlong	#0, fp
0d0dc                 | LR__1090
0d0dc     08 4E 05 F1 | 	add	fp, #8
0d0e0     A7 38 68 FC | 	wrlong	#28, fp
0d0e4     08 4E 85 F1 | 	sub	fp, #8
0d0e8     A7 12 02 F6 | 	mov	arg01, fp
0d0ec     28 B6 BF FD | 	call	#_push
0d0f0     A7 F0 03 F6 | 	mov	ptra, fp
0d0f4     B2 00 A0 FD | 	call	#popregs_
0d0f8                 | _do_lt_ret
0d0f8     2D 00 64 FD | 	ret
0d0fc                 | 
0d0fc                 | ' 
0d0fc                 | ' sub do_ge
0d0fc                 | _do_ge
0d0fc     05 4A 05 F6 | 	mov	COUNT_, #5
0d100     A8 00 A0 FD | 	call	#pushregs_
0d104     18 F0 07 F1 | 	add	ptra, #24
0d108     74 B5 BF FD | 	call	#_pop
0d10c     FD 1E 02 F6 | 	mov	local01, result1
0d110     FE 20 02 F6 | 	mov	local02, result2
0d114     FF 22 02 F6 | 	mov	local03, result3
0d118     0C 4E 05 F1 | 	add	fp, #12
0d11c     A7 1E 62 FC | 	wrlong	local01, fp
0d120     04 4E 05 F1 | 	add	fp, #4
0d124     A7 20 62 FC | 	wrlong	local02, fp
0d128     04 4E 05 F1 | 	add	fp, #4
0d12c     A7 22 62 FC | 	wrlong	local03, fp
0d130     14 4E 85 F1 | 	sub	fp, #20
0d134     48 B5 BF FD | 	call	#_pop
0d138     FF 22 02 F6 | 	mov	local03, result3
0d13c     A7 FA 61 FC | 	wrlong	result1, fp
0d140     04 4E 05 F1 | 	add	fp, #4
0d144     A7 FC 61 FC | 	wrlong	result2, fp
0d148     04 4E 05 F1 | 	add	fp, #4
0d14c     A7 22 62 FC | 	wrlong	local03, fp
0d150                 | ' t2=pop()
0d150                 | ' t1=pop()
0d150                 | ' 
0d150                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d150     08 4E 85 F1 | 	sub	fp, #8
0d154     1F 22 0E F2 | 	cmp	local03, #31 wz
0d158     14 4E 05 A1 |  if_e	add	fp, #20
0d15c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d160     14 4E 85 A1 |  if_e	sub	fp, #20
0d164     12 23 02 A6 |  if_e	mov	local03, local04
0d168     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d16c     28 00 90 5D |  if_ne	jmp	#LR__1100
0d170     00 1E 06 F6 | 	mov	local01, #0
0d174     A7 12 02 FB | 	rdlong	arg01, fp
0d178     0C 4E 05 F1 | 	add	fp, #12
0d17c     A7 14 02 FB | 	rdlong	arg02, fp
0d180     0C 4E 85 F1 | 	sub	fp, #12
0d184     E0 7A B0 FD | 	call	#__system___string_cmp
0d188     00 FA 55 F2 | 	cmps	result1, #0 wc
0d18c     00 1E 26 36 |  if_ae	not	local01, #0
0d190     A7 1E 62 FC | 	wrlong	local01, fp
0d194     04 03 90 FD | 	jmp	#LR__1110
0d198                 | LR__1100
0d198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0d198     08 4E 05 F1 | 	add	fp, #8
0d19c     A7 1E 02 FB | 	rdlong	local01, fp
0d1a0     08 4E 85 F1 | 	sub	fp, #8
0d1a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d1a8     14 4E 05 A1 |  if_e	add	fp, #20
0d1ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0d1b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d1b4     12 23 02 A6 |  if_e	mov	local03, local04
0d1b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d1bc     2C 00 90 5D |  if_ne	jmp	#LR__1101
0d1c0     00 1E 06 F6 | 	mov	local01, #0
0d1c4     A7 12 02 FB | 	rdlong	arg01, fp
0d1c8     0C 4E 05 F1 | 	add	fp, #12
0d1cc     A7 14 02 FB | 	rdlong	arg02, fp
0d1d0     0C 4E 85 F1 | 	sub	fp, #12
0d1d4     01 16 66 F6 | 	neg	arg03, #1
0d1d8     AC A8 B0 FD | 	call	#__system___float_cmp
0d1dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1e0     00 1E 26 36 |  if_ae	not	local01, #0
0d1e4     A7 1E 62 FC | 	wrlong	local01, fp
0d1e8     B0 02 90 FD | 	jmp	#LR__1110
0d1ec                 | LR__1101
0d1ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0d1ec     08 4E 05 F1 | 	add	fp, #8
0d1f0     A7 1E 02 FB | 	rdlong	local01, fp
0d1f4     08 4E 85 F1 | 	sub	fp, #8
0d1f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d1fc     14 4E 05 A1 |  if_e	add	fp, #20
0d200     A7 24 02 AB |  if_e	rdlong	local04, fp
0d204     14 4E 85 A1 |  if_e	sub	fp, #20
0d208     12 23 02 A6 |  if_e	mov	local03, local04
0d20c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d210     48 00 90 5D |  if_ne	jmp	#LR__1102
0d214     00 1E 06 F6 | 	mov	local01, #0
0d218     A7 20 02 FB | 	rdlong	local02, fp
0d21c     0C 4E 05 F1 | 	add	fp, #12
0d220     A7 12 02 FB | 	rdlong	arg01, fp
0d224     0C 4E 85 F1 | 	sub	fp, #12
0d228     09 13 52 F6 | 	abs	arg01, arg01 wc
0d22c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d230     00 26 06 36 |  if_ae	mov	local05, #0
0d234     F0 A0 B0 FD | 	call	#__system___float_fromuns
0d238     13 FB 61 F5 | 	xor	result1, local05
0d23c     FD 14 02 F6 | 	mov	arg02, result1
0d240     10 13 02 F6 | 	mov	arg01, local02
0d244     01 16 66 F6 | 	neg	arg03, #1
0d248     3C A8 B0 FD | 	call	#__system___float_cmp
0d24c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d250     00 1E 26 36 |  if_ae	not	local01, #0
0d254     A7 1E 62 FC | 	wrlong	local01, fp
0d258     40 02 90 FD | 	jmp	#LR__1110
0d25c                 | LR__1102
0d25c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0d25c     08 4E 05 F1 | 	add	fp, #8
0d260     A7 1E 02 FB | 	rdlong	local01, fp
0d264     08 4E 85 F1 | 	sub	fp, #8
0d268     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d26c     14 4E 05 A1 |  if_e	add	fp, #20
0d270     A7 24 02 AB |  if_e	rdlong	local04, fp
0d274     14 4E 85 A1 |  if_e	sub	fp, #20
0d278     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d27c     38 00 90 5D |  if_ne	jmp	#LR__1103
0d280     00 1E 06 F6 | 	mov	local01, #0
0d284     A7 20 02 FB | 	rdlong	local02, fp
0d288     0C 4E 05 F1 | 	add	fp, #12
0d28c     A7 12 02 FB | 	rdlong	arg01, fp
0d290     0C 4E 85 F1 | 	sub	fp, #12
0d294     90 A0 B0 FD | 	call	#__system___float_fromuns
0d298     FD 14 02 F6 | 	mov	arg02, result1
0d29c     10 13 02 F6 | 	mov	arg01, local02
0d2a0     01 16 66 F6 | 	neg	arg03, #1
0d2a4     E0 A7 B0 FD | 	call	#__system___float_cmp
0d2a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2ac     00 1E 26 36 |  if_ae	not	local01, #0
0d2b0     A7 1E 62 FC | 	wrlong	local01, fp
0d2b4     E4 01 90 FD | 	jmp	#LR__1110
0d2b8                 | LR__1103
0d2b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0d2b8     08 4E 05 F1 | 	add	fp, #8
0d2bc     A7 1E 02 FB | 	rdlong	local01, fp
0d2c0     08 4E 85 F1 | 	sub	fp, #8
0d2c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d2c8     14 4E 05 A1 |  if_e	add	fp, #20
0d2cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d2d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d2d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d2d8     44 00 90 5D |  if_ne	jmp	#LR__1104
0d2dc     00 1E 06 F6 | 	mov	local01, #0
0d2e0     A7 12 02 FB | 	rdlong	arg01, fp
0d2e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d2e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d2ec     00 26 06 36 |  if_ae	mov	local05, #0
0d2f0     34 A0 B0 FD | 	call	#__system___float_fromuns
0d2f4     13 FB 61 F5 | 	xor	result1, local05
0d2f8     FD 12 02 F6 | 	mov	arg01, result1
0d2fc     0C 4E 05 F1 | 	add	fp, #12
0d300     A7 14 02 FB | 	rdlong	arg02, fp
0d304     0C 4E 85 F1 | 	sub	fp, #12
0d308     01 16 66 F6 | 	neg	arg03, #1
0d30c     78 A7 B0 FD | 	call	#__system___float_cmp
0d310     00 FA 55 F2 | 	cmps	result1, #0 wc
0d314     00 1E 26 36 |  if_ae	not	local01, #0
0d318     A7 1E 62 FC | 	wrlong	local01, fp
0d31c     7C 01 90 FD | 	jmp	#LR__1110
0d320                 | LR__1104
0d320                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0d320     08 4E 05 F1 | 	add	fp, #8
0d324     A7 1E 02 FB | 	rdlong	local01, fp
0d328     08 4E 85 F1 | 	sub	fp, #8
0d32c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d330     14 4E 05 A1 |  if_e	add	fp, #20
0d334     A7 22 02 AB |  if_e	rdlong	local03, fp
0d338     14 4E 85 A1 |  if_e	sub	fp, #20
0d33c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d340     24 00 90 5D |  if_ne	jmp	#LR__1105
0d344     00 1E 06 F6 | 	mov	local01, #0
0d348     A7 20 02 FB | 	rdlong	local02, fp
0d34c     0C 4E 05 F1 | 	add	fp, #12
0d350     A7 22 02 FB | 	rdlong	local03, fp
0d354     0C 4E 85 F1 | 	sub	fp, #12
0d358     11 21 52 F2 | 	cmps	local02, local03 wc
0d35c     01 1E 66 36 |  if_ae	neg	local01, #1
0d360     A7 1E 62 FC | 	wrlong	local01, fp
0d364     34 01 90 FD | 	jmp	#LR__1110
0d368                 | LR__1105
0d368                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0d368     08 4E 05 F1 | 	add	fp, #8
0d36c     A7 1E 02 FB | 	rdlong	local01, fp
0d370     08 4E 85 F1 | 	sub	fp, #8
0d374     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d378     14 4E 05 A1 |  if_e	add	fp, #20
0d37c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d380     14 4E 85 A1 |  if_e	sub	fp, #20
0d384     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d388     24 00 90 5D |  if_ne	jmp	#LR__1106
0d38c     00 1E 06 F6 | 	mov	local01, #0
0d390     A7 20 02 FB | 	rdlong	local02, fp
0d394     0C 4E 05 F1 | 	add	fp, #12
0d398     A7 22 02 FB | 	rdlong	local03, fp
0d39c     0C 4E 85 F1 | 	sub	fp, #12
0d3a0     11 21 52 F2 | 	cmps	local02, local03 wc
0d3a4     01 1E 66 36 |  if_ae	neg	local01, #1
0d3a8     A7 1E 62 FC | 	wrlong	local01, fp
0d3ac     EC 00 90 FD | 	jmp	#LR__1110
0d3b0                 | LR__1106
0d3b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0d3b0     08 4E 05 F1 | 	add	fp, #8
0d3b4     A7 1E 02 FB | 	rdlong	local01, fp
0d3b8     08 4E 85 F1 | 	sub	fp, #8
0d3bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d3c0     14 4E 05 A1 |  if_e	add	fp, #20
0d3c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d3c8     14 4E 85 A1 |  if_e	sub	fp, #20
0d3cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d3d0     34 00 90 5D |  if_ne	jmp	#LR__1107
0d3d4     00 1E 06 F6 | 	mov	local01, #0
0d3d8     A7 12 02 FB | 	rdlong	arg01, fp
0d3dc     48 9F B0 FD | 	call	#__system___float_fromuns
0d3e0     FD 12 02 F6 | 	mov	arg01, result1
0d3e4     0C 4E 05 F1 | 	add	fp, #12
0d3e8     A7 14 02 FB | 	rdlong	arg02, fp
0d3ec     0C 4E 85 F1 | 	sub	fp, #12
0d3f0     01 16 66 F6 | 	neg	arg03, #1
0d3f4     90 A6 B0 FD | 	call	#__system___float_cmp
0d3f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3fc     00 1E 26 36 |  if_ae	not	local01, #0
0d400     A7 1E 62 FC | 	wrlong	local01, fp
0d404     94 00 90 FD | 	jmp	#LR__1110
0d408                 | LR__1107
0d408                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0d408     08 4E 05 F1 | 	add	fp, #8
0d40c     A7 1E 02 FB | 	rdlong	local01, fp
0d410     08 4E 85 F1 | 	sub	fp, #8
0d414     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d418     14 4E 05 A1 |  if_e	add	fp, #20
0d41c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d420     14 4E 85 A1 |  if_e	sub	fp, #20
0d424     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d428     24 00 90 5D |  if_ne	jmp	#LR__1108
0d42c     00 1E 06 F6 | 	mov	local01, #0
0d430     A7 20 02 FB | 	rdlong	local02, fp
0d434     0C 4E 05 F1 | 	add	fp, #12
0d438     A7 22 02 FB | 	rdlong	local03, fp
0d43c     0C 4E 85 F1 | 	sub	fp, #12
0d440     11 21 52 F2 | 	cmps	local02, local03 wc
0d444     01 1E 66 36 |  if_ae	neg	local01, #1
0d448     A7 1E 62 FC | 	wrlong	local01, fp
0d44c     4C 00 90 FD | 	jmp	#LR__1110
0d450                 | LR__1108
0d450                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0d450     08 4E 05 F1 | 	add	fp, #8
0d454     A7 1E 02 FB | 	rdlong	local01, fp
0d458     08 4E 85 F1 | 	sub	fp, #8
0d45c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d460     14 4E 05 A1 |  if_e	add	fp, #20
0d464     A7 22 02 AB |  if_e	rdlong	local03, fp
0d468     14 4E 85 A1 |  if_e	sub	fp, #20
0d46c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d470     24 00 90 5D |  if_ne	jmp	#LR__1109
0d474     00 1E 06 F6 | 	mov	local01, #0
0d478     A7 20 02 FB | 	rdlong	local02, fp
0d47c     0C 4E 05 F1 | 	add	fp, #12
0d480     A7 22 02 FB | 	rdlong	local03, fp
0d484     0C 4E 85 F1 | 	sub	fp, #12
0d488     11 21 12 F2 | 	cmp	local02, local03 wc
0d48c     01 1E 66 36 |  if_ae	neg	local01, #1
0d490     A7 1E 62 FC | 	wrlong	local01, fp
0d494     04 00 90 FD | 	jmp	#LR__1110
0d498                 | LR__1109
0d498     A7 00 68 FC | 	wrlong	#0, fp
0d49c                 | LR__1110
0d49c     08 4E 05 F1 | 	add	fp, #8
0d4a0     A7 38 68 FC | 	wrlong	#28, fp
0d4a4     08 4E 85 F1 | 	sub	fp, #8
0d4a8     A7 12 02 F6 | 	mov	arg01, fp
0d4ac     68 B2 BF FD | 	call	#_push
0d4b0     A7 F0 03 F6 | 	mov	ptra, fp
0d4b4     B2 00 A0 FD | 	call	#popregs_
0d4b8                 | _do_ge_ret
0d4b8     2D 00 64 FD | 	ret
0d4bc                 | 
0d4bc                 | ' 
0d4bc                 | ' sub do_le
0d4bc                 | _do_le
0d4bc     05 4A 05 F6 | 	mov	COUNT_, #5
0d4c0     A8 00 A0 FD | 	call	#pushregs_
0d4c4     18 F0 07 F1 | 	add	ptra, #24
0d4c8     B4 B1 BF FD | 	call	#_pop
0d4cc     FD 1E 02 F6 | 	mov	local01, result1
0d4d0     FE 20 02 F6 | 	mov	local02, result2
0d4d4     FF 22 02 F6 | 	mov	local03, result3
0d4d8     0C 4E 05 F1 | 	add	fp, #12
0d4dc     A7 1E 62 FC | 	wrlong	local01, fp
0d4e0     04 4E 05 F1 | 	add	fp, #4
0d4e4     A7 20 62 FC | 	wrlong	local02, fp
0d4e8     04 4E 05 F1 | 	add	fp, #4
0d4ec     A7 22 62 FC | 	wrlong	local03, fp
0d4f0     14 4E 85 F1 | 	sub	fp, #20
0d4f4     88 B1 BF FD | 	call	#_pop
0d4f8     FF 22 02 F6 | 	mov	local03, result3
0d4fc     A7 FA 61 FC | 	wrlong	result1, fp
0d500     04 4E 05 F1 | 	add	fp, #4
0d504     A7 FC 61 FC | 	wrlong	result2, fp
0d508     04 4E 05 F1 | 	add	fp, #4
0d50c     A7 22 62 FC | 	wrlong	local03, fp
0d510                 | ' t2=pop()
0d510                 | ' t1=pop()
0d510                 | ' 
0d510                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0d510     08 4E 85 F1 | 	sub	fp, #8
0d514     1F 22 0E F2 | 	cmp	local03, #31 wz
0d518     14 4E 05 A1 |  if_e	add	fp, #20
0d51c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d520     14 4E 85 A1 |  if_e	sub	fp, #20
0d524     12 23 02 A6 |  if_e	mov	local03, local04
0d528     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d52c     28 00 90 5D |  if_ne	jmp	#LR__1120
0d530     00 1E 06 F6 | 	mov	local01, #0
0d534     A7 12 02 FB | 	rdlong	arg01, fp
0d538     0C 4E 05 F1 | 	add	fp, #12
0d53c     A7 14 02 FB | 	rdlong	arg02, fp
0d540     0C 4E 85 F1 | 	sub	fp, #12
0d544     20 77 B0 FD | 	call	#__system___string_cmp
0d548     01 FA 55 F2 | 	cmps	result1, #1 wc
0d54c     00 1E 26 C6 |  if_b	not	local01, #0
0d550     A7 1E 62 FC | 	wrlong	local01, fp
0d554     04 03 90 FD | 	jmp	#LR__1130
0d558                 | LR__1120
0d558                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0d558     08 4E 05 F1 | 	add	fp, #8
0d55c     A7 1E 02 FB | 	rdlong	local01, fp
0d560     08 4E 85 F1 | 	sub	fp, #8
0d564     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d568     14 4E 05 A1 |  if_e	add	fp, #20
0d56c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d570     14 4E 85 A1 |  if_e	sub	fp, #20
0d574     12 23 02 A6 |  if_e	mov	local03, local04
0d578     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d57c     2C 00 90 5D |  if_ne	jmp	#LR__1121
0d580     00 1E 06 F6 | 	mov	local01, #0
0d584     A7 12 02 FB | 	rdlong	arg01, fp
0d588     0C 4E 05 F1 | 	add	fp, #12
0d58c     A7 14 02 FB | 	rdlong	arg02, fp
0d590     0C 4E 85 F1 | 	sub	fp, #12
0d594     01 16 06 F6 | 	mov	arg03, #1
0d598     EC A4 B0 FD | 	call	#__system___float_cmp
0d59c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d5a0     00 1E 26 C6 |  if_b	not	local01, #0
0d5a4     A7 1E 62 FC | 	wrlong	local01, fp
0d5a8     B0 02 90 FD | 	jmp	#LR__1130
0d5ac                 | LR__1121
0d5ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0d5ac     08 4E 05 F1 | 	add	fp, #8
0d5b0     A7 1E 02 FB | 	rdlong	local01, fp
0d5b4     08 4E 85 F1 | 	sub	fp, #8
0d5b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d5bc     14 4E 05 A1 |  if_e	add	fp, #20
0d5c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d5c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d5c8     12 23 02 A6 |  if_e	mov	local03, local04
0d5cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d5d0     48 00 90 5D |  if_ne	jmp	#LR__1122
0d5d4     00 1E 06 F6 | 	mov	local01, #0
0d5d8     A7 20 02 FB | 	rdlong	local02, fp
0d5dc     0C 4E 05 F1 | 	add	fp, #12
0d5e0     A7 12 02 FB | 	rdlong	arg01, fp
0d5e4     0C 4E 85 F1 | 	sub	fp, #12
0d5e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5ec     1F 26 C6 C9 |  if_b	decod	local05, #31
0d5f0     00 26 06 36 |  if_ae	mov	local05, #0
0d5f4     30 9D B0 FD | 	call	#__system___float_fromuns
0d5f8     13 FB 61 F5 | 	xor	result1, local05
0d5fc     FD 14 02 F6 | 	mov	arg02, result1
0d600     10 13 02 F6 | 	mov	arg01, local02
0d604     01 16 06 F6 | 	mov	arg03, #1
0d608     7C A4 B0 FD | 	call	#__system___float_cmp
0d60c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d610     00 1E 26 C6 |  if_b	not	local01, #0
0d614     A7 1E 62 FC | 	wrlong	local01, fp
0d618     40 02 90 FD | 	jmp	#LR__1130
0d61c                 | LR__1122
0d61c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0d61c     08 4E 05 F1 | 	add	fp, #8
0d620     A7 1E 02 FB | 	rdlong	local01, fp
0d624     08 4E 85 F1 | 	sub	fp, #8
0d628     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d62c     14 4E 05 A1 |  if_e	add	fp, #20
0d630     A7 24 02 AB |  if_e	rdlong	local04, fp
0d634     14 4E 85 A1 |  if_e	sub	fp, #20
0d638     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d63c     38 00 90 5D |  if_ne	jmp	#LR__1123
0d640     00 1E 06 F6 | 	mov	local01, #0
0d644     A7 20 02 FB | 	rdlong	local02, fp
0d648     0C 4E 05 F1 | 	add	fp, #12
0d64c     A7 12 02 FB | 	rdlong	arg01, fp
0d650     0C 4E 85 F1 | 	sub	fp, #12
0d654     D0 9C B0 FD | 	call	#__system___float_fromuns
0d658     FD 14 02 F6 | 	mov	arg02, result1
0d65c     10 13 02 F6 | 	mov	arg01, local02
0d660     01 16 06 F6 | 	mov	arg03, #1
0d664     20 A4 B0 FD | 	call	#__system___float_cmp
0d668     01 FA 55 F2 | 	cmps	result1, #1 wc
0d66c     00 1E 26 C6 |  if_b	not	local01, #0
0d670     A7 1E 62 FC | 	wrlong	local01, fp
0d674     E4 01 90 FD | 	jmp	#LR__1130
0d678                 | LR__1123
0d678                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0d678     08 4E 05 F1 | 	add	fp, #8
0d67c     A7 1E 02 FB | 	rdlong	local01, fp
0d680     08 4E 85 F1 | 	sub	fp, #8
0d684     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d688     14 4E 05 A1 |  if_e	add	fp, #20
0d68c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d690     14 4E 85 A1 |  if_e	sub	fp, #20
0d694     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d698     44 00 90 5D |  if_ne	jmp	#LR__1124
0d69c     00 1E 06 F6 | 	mov	local01, #0
0d6a0     A7 12 02 FB | 	rdlong	arg01, fp
0d6a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6a8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d6ac     00 26 06 36 |  if_ae	mov	local05, #0
0d6b0     74 9C B0 FD | 	call	#__system___float_fromuns
0d6b4     13 FB 61 F5 | 	xor	result1, local05
0d6b8     FD 12 02 F6 | 	mov	arg01, result1
0d6bc     0C 4E 05 F1 | 	add	fp, #12
0d6c0     A7 14 02 FB | 	rdlong	arg02, fp
0d6c4     0C 4E 85 F1 | 	sub	fp, #12
0d6c8     01 16 06 F6 | 	mov	arg03, #1
0d6cc     B8 A3 B0 FD | 	call	#__system___float_cmp
0d6d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d6d4     00 1E 26 C6 |  if_b	not	local01, #0
0d6d8     A7 1E 62 FC | 	wrlong	local01, fp
0d6dc     7C 01 90 FD | 	jmp	#LR__1130
0d6e0                 | LR__1124
0d6e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0d6e0     08 4E 05 F1 | 	add	fp, #8
0d6e4     A7 1E 02 FB | 	rdlong	local01, fp
0d6e8     08 4E 85 F1 | 	sub	fp, #8
0d6ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d6f0     14 4E 05 A1 |  if_e	add	fp, #20
0d6f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6f8     14 4E 85 A1 |  if_e	sub	fp, #20
0d6fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d700     24 00 90 5D |  if_ne	jmp	#LR__1125
0d704     00 1E 06 F6 | 	mov	local01, #0
0d708     A7 20 02 FB | 	rdlong	local02, fp
0d70c     0C 4E 05 F1 | 	add	fp, #12
0d710     A7 22 02 FB | 	rdlong	local03, fp
0d714     0C 4E 85 F1 | 	sub	fp, #12
0d718     11 21 5A F2 | 	cmps	local02, local03 wcz
0d71c     01 1E 66 E6 |  if_be	neg	local01, #1
0d720     A7 1E 62 FC | 	wrlong	local01, fp
0d724     34 01 90 FD | 	jmp	#LR__1130
0d728                 | LR__1125
0d728                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0d728     08 4E 05 F1 | 	add	fp, #8
0d72c     A7 1E 02 FB | 	rdlong	local01, fp
0d730     08 4E 85 F1 | 	sub	fp, #8
0d734     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d738     14 4E 05 A1 |  if_e	add	fp, #20
0d73c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d740     14 4E 85 A1 |  if_e	sub	fp, #20
0d744     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d748     24 00 90 5D |  if_ne	jmp	#LR__1126
0d74c     00 1E 06 F6 | 	mov	local01, #0
0d750     A7 20 02 FB | 	rdlong	local02, fp
0d754     0C 4E 05 F1 | 	add	fp, #12
0d758     A7 22 02 FB | 	rdlong	local03, fp
0d75c     0C 4E 85 F1 | 	sub	fp, #12
0d760     11 21 5A F2 | 	cmps	local02, local03 wcz
0d764     01 1E 66 E6 |  if_be	neg	local01, #1
0d768     A7 1E 62 FC | 	wrlong	local01, fp
0d76c     EC 00 90 FD | 	jmp	#LR__1130
0d770                 | LR__1126
0d770                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0d770     08 4E 05 F1 | 	add	fp, #8
0d774     A7 1E 02 FB | 	rdlong	local01, fp
0d778     08 4E 85 F1 | 	sub	fp, #8
0d77c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d780     14 4E 05 A1 |  if_e	add	fp, #20
0d784     A7 22 02 AB |  if_e	rdlong	local03, fp
0d788     14 4E 85 A1 |  if_e	sub	fp, #20
0d78c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d790     34 00 90 5D |  if_ne	jmp	#LR__1127
0d794     00 1E 06 F6 | 	mov	local01, #0
0d798     A7 12 02 FB | 	rdlong	arg01, fp
0d79c     88 9B B0 FD | 	call	#__system___float_fromuns
0d7a0     FD 12 02 F6 | 	mov	arg01, result1
0d7a4     0C 4E 05 F1 | 	add	fp, #12
0d7a8     A7 14 02 FB | 	rdlong	arg02, fp
0d7ac     0C 4E 85 F1 | 	sub	fp, #12
0d7b0     01 16 06 F6 | 	mov	arg03, #1
0d7b4     D0 A2 B0 FD | 	call	#__system___float_cmp
0d7b8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d7bc     00 1E 26 C6 |  if_b	not	local01, #0
0d7c0     A7 1E 62 FC | 	wrlong	local01, fp
0d7c4     94 00 90 FD | 	jmp	#LR__1130
0d7c8                 | LR__1127
0d7c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0d7c8     08 4E 05 F1 | 	add	fp, #8
0d7cc     A7 1E 02 FB | 	rdlong	local01, fp
0d7d0     08 4E 85 F1 | 	sub	fp, #8
0d7d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d7d8     14 4E 05 A1 |  if_e	add	fp, #20
0d7dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d7e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d7e8     24 00 90 5D |  if_ne	jmp	#LR__1128
0d7ec     00 1E 06 F6 | 	mov	local01, #0
0d7f0     A7 20 02 FB | 	rdlong	local02, fp
0d7f4     0C 4E 05 F1 | 	add	fp, #12
0d7f8     A7 22 02 FB | 	rdlong	local03, fp
0d7fc     0C 4E 85 F1 | 	sub	fp, #12
0d800     11 21 5A F2 | 	cmps	local02, local03 wcz
0d804     01 1E 66 E6 |  if_be	neg	local01, #1
0d808     A7 1E 62 FC | 	wrlong	local01, fp
0d80c     4C 00 90 FD | 	jmp	#LR__1130
0d810                 | LR__1128
0d810                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0d810     08 4E 05 F1 | 	add	fp, #8
0d814     A7 1E 02 FB | 	rdlong	local01, fp
0d818     08 4E 85 F1 | 	sub	fp, #8
0d81c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d820     14 4E 05 A1 |  if_e	add	fp, #20
0d824     A7 22 02 AB |  if_e	rdlong	local03, fp
0d828     14 4E 85 A1 |  if_e	sub	fp, #20
0d82c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d830     24 00 90 5D |  if_ne	jmp	#LR__1129
0d834     00 1E 06 F6 | 	mov	local01, #0
0d838     A7 20 02 FB | 	rdlong	local02, fp
0d83c     0C 4E 05 F1 | 	add	fp, #12
0d840     A7 22 02 FB | 	rdlong	local03, fp
0d844     0C 4E 85 F1 | 	sub	fp, #12
0d848     11 21 1A F2 | 	cmp	local02, local03 wcz
0d84c     01 1E 66 E6 |  if_be	neg	local01, #1
0d850     A7 1E 62 FC | 	wrlong	local01, fp
0d854     04 00 90 FD | 	jmp	#LR__1130
0d858                 | LR__1129
0d858     A7 00 68 FC | 	wrlong	#0, fp
0d85c                 | LR__1130
0d85c     08 4E 05 F1 | 	add	fp, #8
0d860     A7 38 68 FC | 	wrlong	#28, fp
0d864     08 4E 85 F1 | 	sub	fp, #8
0d868     A7 12 02 F6 | 	mov	arg01, fp
0d86c     A8 AE BF FD | 	call	#_push
0d870     A7 F0 03 F6 | 	mov	ptra, fp
0d874     B2 00 A0 FD | 	call	#popregs_
0d878                 | _do_le_ret
0d878     2D 00 64 FD | 	ret
0d87c                 | 
0d87c                 | ' 
0d87c                 | ' 
0d87c                 | ' sub do_ne
0d87c                 | _do_ne
0d87c     05 4A 05 F6 | 	mov	COUNT_, #5
0d880     A8 00 A0 FD | 	call	#pushregs_
0d884     18 F0 07 F1 | 	add	ptra, #24
0d888     F4 AD BF FD | 	call	#_pop
0d88c     FD 1E 02 F6 | 	mov	local01, result1
0d890     FE 20 02 F6 | 	mov	local02, result2
0d894     FF 22 02 F6 | 	mov	local03, result3
0d898     0C 4E 05 F1 | 	add	fp, #12
0d89c     A7 1E 62 FC | 	wrlong	local01, fp
0d8a0     04 4E 05 F1 | 	add	fp, #4
0d8a4     A7 20 62 FC | 	wrlong	local02, fp
0d8a8     04 4E 05 F1 | 	add	fp, #4
0d8ac     A7 22 62 FC | 	wrlong	local03, fp
0d8b0     14 4E 85 F1 | 	sub	fp, #20
0d8b4     C8 AD BF FD | 	call	#_pop
0d8b8     FF 22 02 F6 | 	mov	local03, result3
0d8bc     A7 FA 61 FC | 	wrlong	result1, fp
0d8c0     04 4E 05 F1 | 	add	fp, #4
0d8c4     A7 FC 61 FC | 	wrlong	result2, fp
0d8c8     04 4E 05 F1 | 	add	fp, #4
0d8cc     A7 22 62 FC | 	wrlong	local03, fp
0d8d0                 | ' t2=pop()
0d8d0                 | ' t1=pop()
0d8d0                 | ' 
0d8d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0d8d0     08 4E 85 F1 | 	sub	fp, #8
0d8d4     1F 22 0E F2 | 	cmp	local03, #31 wz
0d8d8     14 4E 05 A1 |  if_e	add	fp, #20
0d8dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e4     12 23 02 A6 |  if_e	mov	local03, local04
0d8e8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d8ec     28 00 90 5D |  if_ne	jmp	#LR__1140
0d8f0     00 1E 06 F6 | 	mov	local01, #0
0d8f4     A7 12 02 FB | 	rdlong	arg01, fp
0d8f8     0C 4E 05 F1 | 	add	fp, #12
0d8fc     A7 14 02 FB | 	rdlong	arg02, fp
0d900     0C 4E 85 F1 | 	sub	fp, #12
0d904     60 73 B0 FD | 	call	#__system___string_cmp
0d908     00 FA 0D F2 | 	cmp	result1, #0 wz
0d90c     00 1E 26 56 |  if_ne	not	local01, #0
0d910     A7 1E 62 FC | 	wrlong	local01, fp
0d914     04 03 90 FD | 	jmp	#LR__1150
0d918                 | LR__1140
0d918                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0d918     08 4E 05 F1 | 	add	fp, #8
0d91c     A7 1E 02 FB | 	rdlong	local01, fp
0d920     08 4E 85 F1 | 	sub	fp, #8
0d924     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d928     14 4E 05 A1 |  if_e	add	fp, #20
0d92c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d930     14 4E 85 A1 |  if_e	sub	fp, #20
0d934     12 23 02 A6 |  if_e	mov	local03, local04
0d938     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d93c     2C 00 90 5D |  if_ne	jmp	#LR__1141
0d940     00 1E 06 F6 | 	mov	local01, #0
0d944     A7 12 02 FB | 	rdlong	arg01, fp
0d948     0C 4E 05 F1 | 	add	fp, #12
0d94c     A7 14 02 FB | 	rdlong	arg02, fp
0d950     0C 4E 85 F1 | 	sub	fp, #12
0d954     01 16 06 F6 | 	mov	arg03, #1
0d958     2C A1 B0 FD | 	call	#__system___float_cmp
0d95c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d960     00 1E 26 56 |  if_ne	not	local01, #0
0d964     A7 1E 62 FC | 	wrlong	local01, fp
0d968     B0 02 90 FD | 	jmp	#LR__1150
0d96c                 | LR__1141
0d96c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0d96c     08 4E 05 F1 | 	add	fp, #8
0d970     A7 1E 02 FB | 	rdlong	local01, fp
0d974     08 4E 85 F1 | 	sub	fp, #8
0d978     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d97c     14 4E 05 A1 |  if_e	add	fp, #20
0d980     A7 24 02 AB |  if_e	rdlong	local04, fp
0d984     14 4E 85 A1 |  if_e	sub	fp, #20
0d988     12 23 02 A6 |  if_e	mov	local03, local04
0d98c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d990     48 00 90 5D |  if_ne	jmp	#LR__1142
0d994     00 1E 06 F6 | 	mov	local01, #0
0d998     A7 20 02 FB | 	rdlong	local02, fp
0d99c     0C 4E 05 F1 | 	add	fp, #12
0d9a0     A7 12 02 FB | 	rdlong	arg01, fp
0d9a4     0C 4E 85 F1 | 	sub	fp, #12
0d9a8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9ac     1F 26 C6 C9 |  if_b	decod	local05, #31
0d9b0     00 26 06 36 |  if_ae	mov	local05, #0
0d9b4     70 99 B0 FD | 	call	#__system___float_fromuns
0d9b8     13 FB 61 F5 | 	xor	result1, local05
0d9bc     FD 14 02 F6 | 	mov	arg02, result1
0d9c0     10 13 02 F6 | 	mov	arg01, local02
0d9c4     01 16 06 F6 | 	mov	arg03, #1
0d9c8     BC A0 B0 FD | 	call	#__system___float_cmp
0d9cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0d9d0     00 1E 26 56 |  if_ne	not	local01, #0
0d9d4     A7 1E 62 FC | 	wrlong	local01, fp
0d9d8     40 02 90 FD | 	jmp	#LR__1150
0d9dc                 | LR__1142
0d9dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0d9dc     08 4E 05 F1 | 	add	fp, #8
0d9e0     A7 1E 02 FB | 	rdlong	local01, fp
0d9e4     08 4E 85 F1 | 	sub	fp, #8
0d9e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9ec     14 4E 05 A1 |  if_e	add	fp, #20
0d9f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9f4     14 4E 85 A1 |  if_e	sub	fp, #20
0d9f8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d9fc     38 00 90 5D |  if_ne	jmp	#LR__1143
0da00     00 1E 06 F6 | 	mov	local01, #0
0da04     A7 20 02 FB | 	rdlong	local02, fp
0da08     0C 4E 05 F1 | 	add	fp, #12
0da0c     A7 12 02 FB | 	rdlong	arg01, fp
0da10     0C 4E 85 F1 | 	sub	fp, #12
0da14     10 99 B0 FD | 	call	#__system___float_fromuns
0da18     FD 14 02 F6 | 	mov	arg02, result1
0da1c     10 13 02 F6 | 	mov	arg01, local02
0da20     01 16 06 F6 | 	mov	arg03, #1
0da24     60 A0 B0 FD | 	call	#__system___float_cmp
0da28     00 FA 0D F2 | 	cmp	result1, #0 wz
0da2c     00 1E 26 56 |  if_ne	not	local01, #0
0da30     A7 1E 62 FC | 	wrlong	local01, fp
0da34     E4 01 90 FD | 	jmp	#LR__1150
0da38                 | LR__1143
0da38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0da38     08 4E 05 F1 | 	add	fp, #8
0da3c     A7 1E 02 FB | 	rdlong	local01, fp
0da40     08 4E 85 F1 | 	sub	fp, #8
0da44     1C 1E 0E F2 | 	cmp	local01, #28 wz
0da48     14 4E 05 A1 |  if_e	add	fp, #20
0da4c     A7 22 02 AB |  if_e	rdlong	local03, fp
0da50     14 4E 85 A1 |  if_e	sub	fp, #20
0da54     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0da58     44 00 90 5D |  if_ne	jmp	#LR__1144
0da5c     00 1E 06 F6 | 	mov	local01, #0
0da60     A7 12 02 FB | 	rdlong	arg01, fp
0da64     09 13 52 F6 | 	abs	arg01, arg01 wc
0da68     1F 26 C6 C9 |  if_b	decod	local05, #31
0da6c     00 26 06 36 |  if_ae	mov	local05, #0
0da70     B4 98 B0 FD | 	call	#__system___float_fromuns
0da74     13 FB 61 F5 | 	xor	result1, local05
0da78     FD 12 02 F6 | 	mov	arg01, result1
0da7c     0C 4E 05 F1 | 	add	fp, #12
0da80     A7 14 02 FB | 	rdlong	arg02, fp
0da84     0C 4E 85 F1 | 	sub	fp, #12
0da88     01 16 06 F6 | 	mov	arg03, #1
0da8c     F8 9F B0 FD | 	call	#__system___float_cmp
0da90     00 FA 0D F2 | 	cmp	result1, #0 wz
0da94     00 1E 26 56 |  if_ne	not	local01, #0
0da98     A7 1E 62 FC | 	wrlong	local01, fp
0da9c     7C 01 90 FD | 	jmp	#LR__1150
0daa0                 | LR__1144
0daa0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0daa0     08 4E 05 F1 | 	add	fp, #8
0daa4     A7 1E 02 FB | 	rdlong	local01, fp
0daa8     08 4E 85 F1 | 	sub	fp, #8
0daac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dab0     14 4E 05 A1 |  if_e	add	fp, #20
0dab4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dab8     14 4E 85 A1 |  if_e	sub	fp, #20
0dabc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dac0     24 00 90 5D |  if_ne	jmp	#LR__1145
0dac4     00 1E 06 F6 | 	mov	local01, #0
0dac8     A7 20 02 FB | 	rdlong	local02, fp
0dacc     0C 4E 05 F1 | 	add	fp, #12
0dad0     A7 22 02 FB | 	rdlong	local03, fp
0dad4     0C 4E 85 F1 | 	sub	fp, #12
0dad8     11 21 0A F2 | 	cmp	local02, local03 wz
0dadc     01 1E 66 56 |  if_ne	neg	local01, #1
0dae0     A7 1E 62 FC | 	wrlong	local01, fp
0dae4     34 01 90 FD | 	jmp	#LR__1150
0dae8                 | LR__1145
0dae8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0dae8     08 4E 05 F1 | 	add	fp, #8
0daec     A7 1E 02 FB | 	rdlong	local01, fp
0daf0     08 4E 85 F1 | 	sub	fp, #8
0daf4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0daf8     14 4E 05 A1 |  if_e	add	fp, #20
0dafc     A7 22 02 AB |  if_e	rdlong	local03, fp
0db00     14 4E 85 A1 |  if_e	sub	fp, #20
0db04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0db08     24 00 90 5D |  if_ne	jmp	#LR__1146
0db0c     00 1E 06 F6 | 	mov	local01, #0
0db10     A7 20 02 FB | 	rdlong	local02, fp
0db14     0C 4E 05 F1 | 	add	fp, #12
0db18     A7 22 02 FB | 	rdlong	local03, fp
0db1c     0C 4E 85 F1 | 	sub	fp, #12
0db20     11 21 0A F2 | 	cmp	local02, local03 wz
0db24     01 1E 66 56 |  if_ne	neg	local01, #1
0db28     A7 1E 62 FC | 	wrlong	local01, fp
0db2c     EC 00 90 FD | 	jmp	#LR__1150
0db30                 | LR__1146
0db30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0db30     08 4E 05 F1 | 	add	fp, #8
0db34     A7 1E 02 FB | 	rdlong	local01, fp
0db38     08 4E 85 F1 | 	sub	fp, #8
0db3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0db40     14 4E 05 A1 |  if_e	add	fp, #20
0db44     A7 22 02 AB |  if_e	rdlong	local03, fp
0db48     14 4E 85 A1 |  if_e	sub	fp, #20
0db4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db50     34 00 90 5D |  if_ne	jmp	#LR__1147
0db54     00 1E 06 F6 | 	mov	local01, #0
0db58     A7 12 02 FB | 	rdlong	arg01, fp
0db5c     C8 97 B0 FD | 	call	#__system___float_fromuns
0db60     FD 12 02 F6 | 	mov	arg01, result1
0db64     0C 4E 05 F1 | 	add	fp, #12
0db68     A7 14 02 FB | 	rdlong	arg02, fp
0db6c     0C 4E 85 F1 | 	sub	fp, #12
0db70     01 16 06 F6 | 	mov	arg03, #1
0db74     10 9F B0 FD | 	call	#__system___float_cmp
0db78     00 FA 0D F2 | 	cmp	result1, #0 wz
0db7c     00 1E 26 56 |  if_ne	not	local01, #0
0db80     A7 1E 62 FC | 	wrlong	local01, fp
0db84     94 00 90 FD | 	jmp	#LR__1150
0db88                 | LR__1147
0db88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0db88     08 4E 05 F1 | 	add	fp, #8
0db8c     A7 1E 02 FB | 	rdlong	local01, fp
0db90     08 4E 85 F1 | 	sub	fp, #8
0db94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0db98     14 4E 05 A1 |  if_e	add	fp, #20
0db9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dba0     14 4E 85 A1 |  if_e	sub	fp, #20
0dba4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dba8     24 00 90 5D |  if_ne	jmp	#LR__1148
0dbac     00 1E 06 F6 | 	mov	local01, #0
0dbb0     A7 20 02 FB | 	rdlong	local02, fp
0dbb4     0C 4E 05 F1 | 	add	fp, #12
0dbb8     A7 22 02 FB | 	rdlong	local03, fp
0dbbc     0C 4E 85 F1 | 	sub	fp, #12
0dbc0     11 21 0A F2 | 	cmp	local02, local03 wz
0dbc4     01 1E 66 56 |  if_ne	neg	local01, #1
0dbc8     A7 1E 62 FC | 	wrlong	local01, fp
0dbcc     4C 00 90 FD | 	jmp	#LR__1150
0dbd0                 | LR__1148
0dbd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0dbd0     08 4E 05 F1 | 	add	fp, #8
0dbd4     A7 1E 02 FB | 	rdlong	local01, fp
0dbd8     08 4E 85 F1 | 	sub	fp, #8
0dbdc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dbe0     14 4E 05 A1 |  if_e	add	fp, #20
0dbe4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbe8     14 4E 85 A1 |  if_e	sub	fp, #20
0dbec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dbf0     24 00 90 5D |  if_ne	jmp	#LR__1149
0dbf4     00 1E 06 F6 | 	mov	local01, #0
0dbf8     A7 20 02 FB | 	rdlong	local02, fp
0dbfc     0C 4E 05 F1 | 	add	fp, #12
0dc00     A7 22 02 FB | 	rdlong	local03, fp
0dc04     0C 4E 85 F1 | 	sub	fp, #12
0dc08     11 21 0A F2 | 	cmp	local02, local03 wz
0dc0c     01 1E 66 56 |  if_ne	neg	local01, #1
0dc10     A7 1E 62 FC | 	wrlong	local01, fp
0dc14     04 00 90 FD | 	jmp	#LR__1150
0dc18                 | LR__1149
0dc18     A7 00 68 FC | 	wrlong	#0, fp
0dc1c                 | LR__1150
0dc1c     08 4E 05 F1 | 	add	fp, #8
0dc20     A7 38 68 FC | 	wrlong	#28, fp
0dc24     08 4E 85 F1 | 	sub	fp, #8
0dc28     A7 12 02 F6 | 	mov	arg01, fp
0dc2c     E8 AA BF FD | 	call	#_push
0dc30     A7 F0 03 F6 | 	mov	ptra, fp
0dc34     B2 00 A0 FD | 	call	#popregs_
0dc38                 | _do_ne_ret
0dc38     2D 00 64 FD | 	ret
0dc3c                 | 
0dc3c                 | ' 
0dc3c                 | ' 
0dc3c                 | ' 
0dc3c                 | ' ' -------------------   convert a variable on the top of stack to integer
0dc3c                 | ' 
0dc3c                 | ' sub do_converttoint
0dc3c                 | _do_converttoint
0dc3c     02 4A 05 F6 | 	mov	COUNT_, #2
0dc40     A8 00 A0 FD | 	call	#pushregs_
0dc44     18 F0 07 F1 | 	add	ptra, #24
0dc48     34 AA BF FD | 	call	#_pop
0dc4c     FE 1E 02 F6 | 	mov	local01, result2
0dc50     FF 20 02 F6 | 	mov	local02, result3
0dc54     A7 FA 61 FC | 	wrlong	result1, fp
0dc58     04 4E 05 F1 | 	add	fp, #4
0dc5c     A7 1E 62 FC | 	wrlong	local01, fp
0dc60     04 4E 05 F1 | 	add	fp, #4
0dc64     A7 20 62 FC | 	wrlong	local02, fp
0dc68                 | ' t1=pop() 
0dc68                 | ' select case t1.result_type
0dc68     08 4E 85 F1 | 	sub	fp, #8
0dc6c     1C 20 0E F2 | 	cmp	local02, #28 wz
0dc70     24 00 90 AD |  if_e	jmp	#LR__1160
0dc74     1D 20 0E F2 | 	cmp	local02, #29 wz
0dc78     38 00 90 AD |  if_e	jmp	#LR__1161
0dc7c     1E 20 0E F2 | 	cmp	local02, #30 wz
0dc80     4C 00 90 AD |  if_e	jmp	#LR__1162
0dc84     1F 20 0E F2 | 	cmp	local02, #31 wz
0dc88     68 00 90 AD |  if_e	jmp	#LR__1163
0dc8c     FF 20 0E F2 | 	cmp	local02, #255 wz
0dc90     8C 00 90 AD |  if_e	jmp	#LR__1164
0dc94     A8 00 90 FD | 	jmp	#LR__1165
0dc98                 | LR__1160
0dc98     A7 20 02 FB | 	rdlong	local02, fp
0dc9c     0C 4E 05 F1 | 	add	fp, #12
0dca0     A7 20 62 FC | 	wrlong	local02, fp
0dca4     04 4E 05 F1 | 	add	fp, #4
0dca8     A7 38 68 FC | 	wrlong	#28, fp
0dcac     10 4E 85 F1 | 	sub	fp, #16
0dcb0     A0 00 90 FD | 	jmp	#LR__1166
0dcb4                 | LR__1161
0dcb4     A7 20 02 FB | 	rdlong	local02, fp
0dcb8     0C 4E 05 F1 | 	add	fp, #12
0dcbc     A7 20 62 FC | 	wrlong	local02, fp
0dcc0     04 4E 05 F1 | 	add	fp, #4
0dcc4     A7 38 68 FC | 	wrlong	#28, fp
0dcc8     10 4E 85 F1 | 	sub	fp, #16
0dccc     84 00 90 FD | 	jmp	#LR__1166
0dcd0                 | LR__1162
0dcd0     A7 12 02 FB | 	rdlong	arg01, fp
0dcd4     01 14 06 F6 | 	mov	arg02, #1
0dcd8     40 9E B0 FD | 	call	#__system___float_tointeger
0dcdc     0C 4E 05 F1 | 	add	fp, #12
0dce0     A7 FA 61 FC | 	wrlong	result1, fp
0dce4     04 4E 05 F1 | 	add	fp, #4
0dce8     A7 38 68 FC | 	wrlong	#28, fp
0dcec     10 4E 85 F1 | 	sub	fp, #16
0dcf0     60 00 90 FD | 	jmp	#LR__1166
0dcf4                 | LR__1163
0dcf4     A7 12 02 FB | 	rdlong	arg01, fp
0dcf8     40 A1 B0 FD | 	call	#__system____builtin_atof
0dcfc     FD 12 02 F6 | 	mov	arg01, result1
0dd00     00 14 06 F6 | 	mov	arg02, #0
0dd04     14 9E B0 FD | 	call	#__system___float_tointeger
0dd08     0C 4E 05 F1 | 	add	fp, #12
0dd0c     A7 FA 61 FC | 	wrlong	result1, fp
0dd10     04 4E 05 F1 | 	add	fp, #4
0dd14     A7 38 68 FC | 	wrlong	#28, fp
0dd18     10 4E 85 F1 | 	sub	fp, #16
0dd1c     34 00 90 FD | 	jmp	#LR__1166
0dd20                 | LR__1164
0dd20     0C 4E 05 F1 | 	add	fp, #12
0dd24     A7 00 68 FC | 	wrlong	#0, fp
0dd28     0C 4E 85 F1 | 	sub	fp, #12
0dd2c     A7 20 02 FB | 	rdlong	local02, fp
0dd30     10 4E 05 F1 | 	add	fp, #16
0dd34     A7 20 62 FC | 	wrlong	local02, fp
0dd38     10 4E 85 F1 | 	sub	fp, #16
0dd3c     14 00 90 FD | 	jmp	#LR__1166
0dd40                 | LR__1165
0dd40     0C 4E 05 F1 | 	add	fp, #12
0dd44     A7 00 68 FC | 	wrlong	#0, fp
0dd48     04 4E 05 F1 | 	add	fp, #4
0dd4c     A7 02 68 FC | 	wrlong	#1, fp
0dd50     10 4E 85 F1 | 	sub	fp, #16
0dd54                 | LR__1166
0dd54     0C 4E 05 F1 | 	add	fp, #12
0dd58     A7 20 02 FB | 	rdlong	local02, fp
0dd5c     0C 4E 85 F1 | 	sub	fp, #12
0dd60     A7 20 62 FC | 	wrlong	local02, fp
0dd64     10 4E 05 F1 | 	add	fp, #16
0dd68     A7 20 02 FB | 	rdlong	local02, fp
0dd6c     08 4E 85 F1 | 	sub	fp, #8
0dd70     A7 20 62 FC | 	wrlong	local02, fp
0dd74     08 4E 85 F1 | 	sub	fp, #8
0dd78     A7 12 02 F6 | 	mov	arg01, fp
0dd7c     98 A9 BF FD | 	call	#_push
0dd80     A7 F0 03 F6 | 	mov	ptra, fp
0dd84     B2 00 A0 FD | 	call	#popregs_
0dd88                 | _do_converttoint_ret
0dd88     2D 00 64 FD | 	ret
0dd8c                 | 
0dd8c                 | ' 
0dd8c                 | ' function converttoint (t1 as expr_result) as integer
0dd8c                 | _converttoint
0dd8c     02 4A 05 F6 | 	mov	COUNT_, #2
0dd90     A8 00 A0 FD | 	call	#pushregs_
0dd94     09 1F 02 F6 | 	mov	local01, arg01
0dd98                 | ' 
0dd98                 | ' select case t1.result_type
0dd98     08 1E 06 F1 | 	add	local01, #8
0dd9c     0F 21 02 FB | 	rdlong	local02, local01
0dda0     08 1E 86 F1 | 	sub	local01, #8
0dda4     1C 20 86 F1 | 	sub	local02, #28
0dda8     04 20 26 F3 | 	fle	local02, #4
0ddac     30 20 62 FD | 	jmprel	local02
0ddb0                 | LR__1170
0ddb0     10 00 90 FD | 	jmp	#LR__1171
0ddb4     14 00 90 FD | 	jmp	#LR__1172
0ddb8     18 00 90 FD | 	jmp	#LR__1173
0ddbc     24 00 90 FD | 	jmp	#LR__1174
0ddc0     38 00 90 FD | 	jmp	#LR__1175
0ddc4                 | LR__1171
0ddc4     0F FB 01 FB | 	rdlong	result1, local01
0ddc8     34 00 90 FD | 	jmp	#LR__1176
0ddcc                 | LR__1172
0ddcc     0F FB 01 FB | 	rdlong	result1, local01
0ddd0     2C 00 90 FD | 	jmp	#LR__1176
0ddd4                 | LR__1173
0ddd4     0F 13 02 FB | 	rdlong	arg01, local01
0ddd8     01 14 06 F6 | 	mov	arg02, #1
0dddc     3C 9D B0 FD | 	call	#__system___float_tointeger
0dde0     1C 00 90 FD | 	jmp	#LR__1176
0dde4                 | LR__1174
0dde4     0F 13 02 FB | 	rdlong	arg01, local01
0dde8     50 A0 B0 FD | 	call	#__system____builtin_atof
0ddec     FD 12 02 F6 | 	mov	arg01, result1
0ddf0     00 14 06 F6 | 	mov	arg02, #0
0ddf4     24 9D B0 FD | 	call	#__system___float_tointeger
0ddf8     04 00 90 FD | 	jmp	#LR__1176
0ddfc                 | LR__1175
0ddfc     00 FA 05 F6 | 	mov	result1, #0
0de00                 | LR__1176
0de00     A7 F0 03 F6 | 	mov	ptra, fp
0de04     B2 00 A0 FD | 	call	#popregs_
0de08                 | _converttoint_ret
0de08     2D 00 64 FD | 	ret
0de0c                 | 
0de0c                 | ' 
0de0c                 | ' sub do_rnd
0de0c                 | _do_rnd
0de0c     01 4A 05 F6 | 	mov	COUNT_, #1
0de10     A8 00 A0 FD | 	call	#pushregs_
0de14     10 F0 07 F1 | 	add	ptra, #16
0de18     41 00 00 FF 
0de1c     44 E4 05 F1 | 	add	objptr, ##33348
0de20     F2 1E 02 FB | 	rdlong	local01, objptr
0de24     0F 17 02 F6 | 	mov	arg03, local01
0de28     01 16 66 F0 | 	shl	arg03, #1
0de2c     0F 17 02 F1 | 	add	arg03, local01
0de30     02 16 66 F0 | 	shl	arg03, #2
0de34     03 00 00 FF 
0de38     04 E4 85 F1 | 	sub	objptr, ##1540
0de3c     F2 16 02 F1 | 	add	arg03, objptr
0de40     0B 17 02 FB | 	rdlong	arg03, arg03
0de44     0C 4E 05 F1 | 	add	fp, #12
0de48     A7 16 62 FC | 	wrlong	arg03, fp
0de4c                 | ' 
0de4c                 | ' numpar=compiledline(lineptr_e).result.uresult
0de4c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0de4c     0C 4E 85 F1 | 	sub	fp, #12
0de50     02 16 16 F2 | 	cmp	arg03, #2 wc
0de54     3E 00 00 FF 
0de58     40 E4 85 F1 | 	sub	objptr, ##31808
0de5c     3C 00 90 CD |  if_b	jmp	#LR__1180
0de60     00 12 06 F6 | 	mov	arg01, #0
0de64     8C C3 B0 FD | 	call	#__system___getiolock_0349
0de68     FD 12 02 F6 | 	mov	arg01, result1
0de6c     D0 6D B0 FD | 	call	#__system___lockmem
0de70     20 01 00 FF 
0de74     FE 15 06 F6 | 	mov	arg02, ##@LR__4303
0de78     00 12 06 F6 | 	mov	arg01, #0
0de7c     00 16 06 F6 | 	mov	arg03, #0
0de80     B0 7A B0 FD | 	call	#__system___basic_print_string
0de84     00 12 06 F6 | 	mov	arg01, #0
0de88     68 C3 B0 FD | 	call	#__system___getiolock_0349
0de8c     FD 00 68 FC | 	wrlong	#0, result1
0de90     27 12 06 F6 | 	mov	arg01, #39
0de94     B4 38 B0 FD | 	call	#_printerror
0de98     2C 01 90 FD | 	jmp	#LR__1187
0de9c                 | LR__1180
0de9c                 | ' if numpar=0 then
0de9c     0C 4E 05 F1 | 	add	fp, #12
0dea0     A7 FE 09 FB | 	rdlong	result3, fp wz
0dea4     0C 4E 85 F1 | 	sub	fp, #12
0dea8     20 00 90 5D |  if_ne	jmp	#LR__1181
0deac     08 4E 05 F1 | 	add	fp, #8
0deb0     A7 3A 68 FC | 	wrlong	#29, fp
0deb4     08 4E 85 F1 | 	sub	fp, #8
0deb8     1B FA 61 FD | 	getrnd	result1
0debc     A7 FA 61 FC | 	wrlong	result1, fp
0dec0     A7 12 02 F6 | 	mov	arg01, fp
0dec4     50 A8 BF FD | 	call	#_push
0dec8     FC 00 90 FD | 	jmp	#LR__1186
0decc                 | LR__1181
0decc     B0 A7 BF FD | 	call	#_pop
0ded0     A7 FA 61 FC | 	wrlong	result1, fp
0ded4     04 4E 05 F1 | 	add	fp, #4
0ded8     A7 FC 61 FC | 	wrlong	result2, fp
0dedc     04 4E 05 F1 | 	add	fp, #4
0dee0     A7 FE 61 FC | 	wrlong	result3, fp
0dee4                 | '   t1=pop()
0dee4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0dee4     08 4E 85 F1 | 	sub	fp, #8
0dee8     1C FE 0D F2 | 	cmp	result3, #28 wz
0deec     08 4E 05 51 |  if_ne	add	fp, #8
0def0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0def4     08 4E 85 51 |  if_ne	sub	fp, #8
0def8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0defc     2C 00 90 5D |  if_ne	jmp	#LR__1182
0df00     1B FA 61 FD | 	getrnd	result1
0df04     A7 1E 02 FB | 	rdlong	local01, fp
0df08     0F FB 11 FD | 	qdiv	result1, local01
0df0c     A7 12 02 F6 | 	mov	arg01, fp
0df10     19 1E 62 FD | 	getqy	local01
0df14     A7 1E 62 FC | 	wrlong	local01, fp
0df18     08 4E 05 F1 | 	add	fp, #8
0df1c     A7 3A 68 FC | 	wrlong	#29, fp
0df20     08 4E 85 F1 | 	sub	fp, #8
0df24     F0 A7 BF FD | 	call	#_push
0df28     9C 00 90 FD | 	jmp	#LR__1185
0df2c                 | LR__1182
0df2c     08 4E 05 F1 | 	add	fp, #8
0df30     A7 1E 02 FB | 	rdlong	local01, fp
0df34     08 4E 85 F1 | 	sub	fp, #8
0df38     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df3c     48 00 90 5D |  if_ne	jmp	#LR__1183
0df40     A7 12 02 FB | 	rdlong	arg01, fp
0df44     00 C0 24 FF 
0df48     00 14 06 F6 | 	mov	arg02, ##1233125376
0df4c     08 99 B0 FD | 	call	#__system___float_div
0df50     FD 1E 02 F6 | 	mov	local01, result1
0df54     1B 12 62 FD | 	getrnd	arg01
0df58     74 13 06 F4 | 	bitl	arg01, #372
0df5c     C8 93 B0 FD | 	call	#__system___float_fromuns
0df60     FD 14 02 F6 | 	mov	arg02, result1
0df64     0F 13 02 F6 | 	mov	arg01, local01
0df68     E8 96 B0 FD | 	call	#__system___float_mul
0df6c     A7 FA 61 FC | 	wrlong	result1, fp
0df70     08 4E 05 F1 | 	add	fp, #8
0df74     A7 3C 68 FC | 	wrlong	#30, fp
0df78     08 4E 85 F1 | 	sub	fp, #8
0df7c     A7 12 02 F6 | 	mov	arg01, fp
0df80     94 A7 BF FD | 	call	#_push
0df84     40 00 90 FD | 	jmp	#LR__1184
0df88                 | LR__1183
0df88                 | '     print "rnd: "; : printerror(40) 
0df88     00 12 06 F6 | 	mov	arg01, #0
0df8c     64 C2 B0 FD | 	call	#__system___getiolock_0349
0df90     FD 12 02 F6 | 	mov	arg01, result1
0df94     A8 6C B0 FD | 	call	#__system___lockmem
0df98     21 01 00 FF 
0df9c     04 14 06 F6 | 	mov	arg02, ##@LR__4304
0dfa0     00 12 06 F6 | 	mov	arg01, #0
0dfa4     00 16 06 F6 | 	mov	arg03, #0
0dfa8     88 79 B0 FD | 	call	#__system___basic_print_string
0dfac     00 12 06 F6 | 	mov	arg01, #0
0dfb0     40 C2 B0 FD | 	call	#__system___getiolock_0349
0dfb4     FD 00 68 FC | 	wrlong	#0, result1
0dfb8     28 12 06 F6 | 	mov	arg01, #40
0dfbc     8C 37 B0 FD | 	call	#_printerror
0dfc0     A7 12 02 F6 | 	mov	arg01, fp
0dfc4     50 A7 BF FD | 	call	#_push
0dfc8                 | LR__1184
0dfc8                 | LR__1185
0dfc8                 | LR__1186
0dfc8                 | LR__1187
0dfc8     A7 F0 03 F6 | 	mov	ptra, fp
0dfcc     B2 00 A0 FD | 	call	#popregs_
0dfd0                 | _do_rnd_ret
0dfd0     2D 00 64 FD | 	ret
0dfd4                 | 
0dfd4                 | ' 
0dfd4                 | ' sub do_sin
0dfd4                 | _do_sin
0dfd4     03 4A 05 F6 | 	mov	COUNT_, #3
0dfd8     A8 00 A0 FD | 	call	#pushregs_
0dfdc     10 F0 07 F1 | 	add	ptra, #16
0dfe0     41 00 00 FF 
0dfe4     44 E4 05 F1 | 	add	objptr, ##33348
0dfe8     F2 1E 02 FB | 	rdlong	local01, objptr
0dfec     0F 17 02 F6 | 	mov	arg03, local01
0dff0     01 16 66 F0 | 	shl	arg03, #1
0dff4     0F 17 02 F1 | 	add	arg03, local01
0dff8     02 16 66 F0 | 	shl	arg03, #2
0dffc     03 00 00 FF 
0e000     04 E4 85 F1 | 	sub	objptr, ##1540
0e004     F2 16 02 F1 | 	add	arg03, objptr
0e008     0B 17 02 FB | 	rdlong	arg03, arg03
0e00c     0C 4E 05 F1 | 	add	fp, #12
0e010     A7 16 62 FC | 	wrlong	arg03, fp
0e014                 | ' 
0e014                 | ' numpar=compiledline(lineptr_e).result.uresult
0e014                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e014     0C 4E 85 F1 | 	sub	fp, #12
0e018     02 16 16 F2 | 	cmp	arg03, #2 wc
0e01c     3E 00 00 FF 
0e020     40 E4 85 F1 | 	sub	objptr, ##31808
0e024     0C 4E 05 C1 |  if_b	add	fp, #12
0e028     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e02c     0C 4E 85 C1 |  if_b	sub	fp, #12
0e030     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0e034     00 12 06 F6 | 	mov	arg01, #0
0e038     B8 C1 B0 FD | 	call	#__system___getiolock_0349
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     FC 6B B0 FD | 	call	#__system___lockmem
0e044     21 01 00 FF 
0e048     0A 14 06 F6 | 	mov	arg02, ##@LR__4305
0e04c     00 12 06 F6 | 	mov	arg01, #0
0e050     00 16 06 F6 | 	mov	arg03, #0
0e054     DC 78 B0 FD | 	call	#__system___basic_print_string
0e058     00 12 06 F6 | 	mov	arg01, #0
0e05c     94 C1 B0 FD | 	call	#__system___getiolock_0349
0e060     FD 00 68 FC | 	wrlong	#0, result1
0e064     27 12 06 F6 | 	mov	arg01, #39
0e068     E0 36 B0 FD | 	call	#_printerror
0e06c     40 01 90 FD | 	jmp	#LR__1195
0e070                 | LR__1190
0e070     0C A6 BF FD | 	call	#_pop
0e074     A7 FA 61 FC | 	wrlong	result1, fp
0e078     04 4E 05 F1 | 	add	fp, #4
0e07c     A7 FC 61 FC | 	wrlong	result2, fp
0e080     04 4E 05 F1 | 	add	fp, #4
0e084     A7 FE 61 FC | 	wrlong	result3, fp
0e088                 | ' t1=pop()
0e088                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e088     08 4E 85 F1 | 	sub	fp, #8
0e08c     1C FE 0D F2 | 	cmp	result3, #28 wz
0e090     08 4E 05 51 |  if_ne	add	fp, #8
0e094     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e098     08 4E 85 51 |  if_ne	sub	fp, #8
0e09c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e0a0     70 00 90 5D |  if_ne	jmp	#LR__1191
0e0a4     A7 1E 02 FB | 	rdlong	local01, fp
0e0a8     0F 1F 52 F6 | 	abs	local01, local01 wc
0e0ac     68 1F 16 FD | 	qdiv	local01, #360
0e0b0     87 24 20 FF 
0e0b4     DB 21 06 F6 | 	mov	local02, ##1078530011
0e0b8     19 1E 62 FD | 	getqy	local01
0e0bc     0F 13 82 F6 | 	negc	arg01, local01
0e0c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0c4     1F 22 C6 C9 |  if_b	decod	local03, #31
0e0c8     00 22 06 36 |  if_ae	mov	local03, #0
0e0cc     58 92 B0 FD | 	call	#__system___float_fromuns
0e0d0     11 FB 61 F5 | 	xor	result1, local03
0e0d4     FD 12 02 F6 | 	mov	arg01, result1
0e0d8     00 9A 21 FF 
0e0dc     00 14 06 F6 | 	mov	arg02, ##1127481344
0e0e0     74 97 B0 FD | 	call	#__system___float_div
0e0e4     FD 14 02 F6 | 	mov	arg02, result1
0e0e8     10 13 02 F6 | 	mov	arg01, local02
0e0ec     64 95 B0 FD | 	call	#__system___float_mul
0e0f0     FD 12 02 F6 | 	mov	arg01, result1
0e0f4     98 9E B0 FD | 	call	#__system____builtin_sinf
0e0f8     A7 FA 61 FC | 	wrlong	result1, fp
0e0fc     08 4E 05 F1 | 	add	fp, #8
0e100     A7 3C 68 FC | 	wrlong	#30, fp
0e104     08 4E 85 F1 | 	sub	fp, #8
0e108     A7 12 02 F6 | 	mov	arg01, fp
0e10c     08 A6 BF FD | 	call	#_push
0e110     9C 00 90 FD | 	jmp	#LR__1194
0e114                 | LR__1191
0e114     08 4E 05 F1 | 	add	fp, #8
0e118     A7 20 02 FB | 	rdlong	local02, fp
0e11c     08 4E 85 F1 | 	sub	fp, #8
0e120     1E 20 0E F2 | 	cmp	local02, #30 wz
0e124     48 00 90 5D |  if_ne	jmp	#LR__1192
0e128     87 24 20 FF 
0e12c     DB 21 06 F6 | 	mov	local02, ##1078530011
0e130     A7 12 02 FB | 	rdlong	arg01, fp
0e134     00 9A 21 FF 
0e138     00 14 06 F6 | 	mov	arg02, ##1127481344
0e13c     18 97 B0 FD | 	call	#__system___float_div
0e140     FD 14 02 F6 | 	mov	arg02, result1
0e144     10 13 02 F6 | 	mov	arg01, local02
0e148     08 95 B0 FD | 	call	#__system___float_mul
0e14c     FD 12 02 F6 | 	mov	arg01, result1
0e150     3C 9E B0 FD | 	call	#__system____builtin_sinf
0e154     A7 FA 61 FC | 	wrlong	result1, fp
0e158     08 4E 05 F1 | 	add	fp, #8
0e15c     A7 3C 68 FC | 	wrlong	#30, fp
0e160     08 4E 85 F1 | 	sub	fp, #8
0e164     A7 12 02 F6 | 	mov	arg01, fp
0e168     AC A5 BF FD | 	call	#_push
0e16c     40 00 90 FD | 	jmp	#LR__1193
0e170                 | LR__1192
0e170                 | '   print "sin: "; : printerror(40) 
0e170     00 12 06 F6 | 	mov	arg01, #0
0e174     7C C0 B0 FD | 	call	#__system___getiolock_0349
0e178     FD 12 02 F6 | 	mov	arg01, result1
0e17c     C0 6A B0 FD | 	call	#__system___lockmem
0e180     21 01 00 FF 
0e184     10 14 06 F6 | 	mov	arg02, ##@LR__4306
0e188     00 12 06 F6 | 	mov	arg01, #0
0e18c     00 16 06 F6 | 	mov	arg03, #0
0e190     A0 77 B0 FD | 	call	#__system___basic_print_string
0e194     00 12 06 F6 | 	mov	arg01, #0
0e198     58 C0 B0 FD | 	call	#__system___getiolock_0349
0e19c     FD 00 68 FC | 	wrlong	#0, result1
0e1a0     28 12 06 F6 | 	mov	arg01, #40
0e1a4     A4 35 B0 FD | 	call	#_printerror
0e1a8     A7 12 02 F6 | 	mov	arg01, fp
0e1ac     68 A5 BF FD | 	call	#_push
0e1b0                 | LR__1193
0e1b0                 | LR__1194
0e1b0                 | LR__1195
0e1b0     A7 F0 03 F6 | 	mov	ptra, fp
0e1b4     B2 00 A0 FD | 	call	#popregs_
0e1b8                 | _do_sin_ret
0e1b8     2D 00 64 FD | 	ret
0e1bc                 | 
0e1bc                 | ' 
0e1bc                 | ' sub do_stick
0e1bc                 | _do_stick
0e1bc     01 4A 05 F6 | 	mov	COUNT_, #1
0e1c0     A8 00 A0 FD | 	call	#pushregs_
0e1c4     10 F0 07 F1 | 	add	ptra, #16
0e1c8     41 00 00 FF 
0e1cc     44 E4 05 F1 | 	add	objptr, ##33348
0e1d0     F2 1E 02 FB | 	rdlong	local01, objptr
0e1d4     0F 17 02 F6 | 	mov	arg03, local01
0e1d8     01 16 66 F0 | 	shl	arg03, #1
0e1dc     0F 17 02 F1 | 	add	arg03, local01
0e1e0     02 16 66 F0 | 	shl	arg03, #2
0e1e4     03 00 00 FF 
0e1e8     04 E4 85 F1 | 	sub	objptr, ##1540
0e1ec     F2 16 02 F1 | 	add	arg03, objptr
0e1f0     0B 17 02 FB | 	rdlong	arg03, arg03
0e1f4     0C 4E 05 F1 | 	add	fp, #12
0e1f8     A7 16 62 FC | 	wrlong	arg03, fp
0e1fc                 | ' 
0e1fc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1fc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0e1fc     0C 4E 85 F1 | 	sub	fp, #12
0e200     02 16 16 F2 | 	cmp	arg03, #2 wc
0e204     3E 00 00 FF 
0e208     40 E4 85 F1 | 	sub	objptr, ##31808
0e20c     3C 00 90 CD |  if_b	jmp	#LR__1200
0e210     00 12 06 F6 | 	mov	arg01, #0
0e214     DC BF B0 FD | 	call	#__system___getiolock_0349
0e218     FD 12 02 F6 | 	mov	arg01, result1
0e21c     20 6A B0 FD | 	call	#__system___lockmem
0e220     21 01 00 FF 
0e224     16 14 06 F6 | 	mov	arg02, ##@LR__4307
0e228     00 12 06 F6 | 	mov	arg01, #0
0e22c     00 16 06 F6 | 	mov	arg03, #0
0e230     00 77 B0 FD | 	call	#__system___basic_print_string
0e234     00 12 06 F6 | 	mov	arg01, #0
0e238     B8 BF B0 FD | 	call	#__system___getiolock_0349
0e23c     FD 00 68 FC | 	wrlong	#0, result1
0e240     27 12 06 F6 | 	mov	arg01, #39
0e244     04 35 B0 FD | 	call	#_printerror
0e248     E8 00 90 FD | 	jmp	#LR__1204
0e24c                 | LR__1200
0e24c                 | ' 
0e24c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0e24c     0C 4E 05 F1 | 	add	fp, #12
0e250     A7 FE 09 FB | 	rdlong	result3, fp wz
0e254     0C 4E 85 F1 | 	sub	fp, #12
0e258     30 00 90 5D |  if_ne	jmp	#LR__1201
0e25c     51 00 00 FF 
0e260     C0 E5 05 F1 | 	add	objptr, ##41920
0e264     F2 1E 02 FB | 	rdlong	local01, objptr
0e268     51 00 00 FF 
0e26c     C0 E5 85 F1 | 	sub	objptr, ##41920
0e270     A7 1E 62 FC | 	wrlong	local01, fp
0e274     08 4E 05 F1 | 	add	fp, #8
0e278     A7 3A 68 FC | 	wrlong	#29, fp
0e27c     08 4E 85 F1 | 	sub	fp, #8
0e280     A7 12 02 F6 | 	mov	arg01, fp
0e284     90 A4 BF FD | 	call	#_push
0e288     A8 00 90 FD | 	jmp	#LR__1204
0e28c                 | LR__1201
0e28c     F0 A3 BF FD | 	call	#_pop
0e290     A7 FA 61 FC | 	wrlong	result1, fp
0e294     04 4E 05 F1 | 	add	fp, #4
0e298     A7 FC 61 FC | 	wrlong	result2, fp
0e29c     04 4E 05 F1 | 	add	fp, #4
0e2a0     A7 FE 61 FC | 	wrlong	result3, fp
0e2a4                 | ' 
0e2a4                 | ' t1=pop()
0e2a4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e2a4     08 4E 85 F1 | 	sub	fp, #8
0e2a8     1C FE 0D F2 | 	cmp	result3, #28 wz
0e2ac     08 4E 05 51 |  if_ne	add	fp, #8
0e2b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e2b4     08 4E 85 51 |  if_ne	sub	fp, #8
0e2b8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e2bc     6C 00 90 5D |  if_ne	jmp	#LR__1203
0e2c0     A7 1E 02 FB | 	rdlong	local01, fp
0e2c4     52 00 00 FF 
0e2c8     80 E4 05 F1 | 	add	objptr, ##42112
0e2cc     F2 1E 62 FC | 	wrlong	local01, objptr
0e2d0                 | '   q=t1.result.uresult
0e2d0                 | '   if q<7 then 
0e2d0     52 00 00 FF 
0e2d4     80 E4 85 F1 | 	sub	objptr, ##42112
0e2d8     07 1E 56 F2 | 	cmps	local01, #7 wc
0e2dc     40 00 90 3D |  if_ae	jmp	#LR__1202
0e2e0     52 00 00 FF 
0e2e4     80 E4 05 F1 | 	add	objptr, ##42112
0e2e8     F2 1E 02 FB | 	rdlong	local01, objptr
0e2ec     02 1E 66 F0 | 	shl	local01, #2
0e2f0     C0 E4 85 F1 | 	sub	objptr, #192
0e2f4     F2 1E 02 F1 | 	add	local01, objptr
0e2f8     0F 1F 02 FB | 	rdlong	local01, local01
0e2fc     A7 1E 62 FC | 	wrlong	local01, fp
0e300     08 4E 05 F1 | 	add	fp, #8
0e304     A7 3A 68 FC | 	wrlong	#29, fp
0e308     08 4E 85 F1 | 	sub	fp, #8
0e30c     A7 12 02 F6 | 	mov	arg01, fp
0e310     51 00 00 FF 
0e314     C0 E5 85 F1 | 	sub	objptr, ##41920
0e318     FC A3 BF FD | 	call	#_push
0e31c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0e31c     14 00 90 FD | 	jmp	#LR__1204
0e320                 | LR__1202
0e320     29 12 06 F6 | 	mov	arg01, #41
0e324     24 34 B0 FD | 	call	#_printerror
0e328                 | '      printerror(41) : return
0e328     08 00 90 FD | 	jmp	#LR__1204
0e32c                 | LR__1203
0e32c     29 12 06 F6 | 	mov	arg01, #41
0e330     18 34 B0 FD | 	call	#_printerror
0e334                 | LR__1204
0e334     A7 F0 03 F6 | 	mov	ptra, fp
0e338     B2 00 A0 FD | 	call	#popregs_
0e33c                 | _do_stick_ret
0e33c     2D 00 64 FD | 	ret
0e340                 | 
0e340                 | ' 
0e340                 | ' sub do_strig
0e340                 | _do_strig
0e340     01 4A 05 F6 | 	mov	COUNT_, #1
0e344     A8 00 A0 FD | 	call	#pushregs_
0e348     10 F0 07 F1 | 	add	ptra, #16
0e34c     41 00 00 FF 
0e350     44 E4 05 F1 | 	add	objptr, ##33348
0e354     F2 1E 02 FB | 	rdlong	local01, objptr
0e358     0F 17 02 F6 | 	mov	arg03, local01
0e35c     01 16 66 F0 | 	shl	arg03, #1
0e360     0F 17 02 F1 | 	add	arg03, local01
0e364     02 16 66 F0 | 	shl	arg03, #2
0e368     03 00 00 FF 
0e36c     04 E4 85 F1 | 	sub	objptr, ##1540
0e370     F2 16 02 F1 | 	add	arg03, objptr
0e374     0B 17 02 FB | 	rdlong	arg03, arg03
0e378     0C 4E 05 F1 | 	add	fp, #12
0e37c     A7 16 62 FC | 	wrlong	arg03, fp
0e380                 | ' 
0e380                 | ' numpar=compiledline(lineptr_e).result.uresult
0e380                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0e380     0C 4E 85 F1 | 	sub	fp, #12
0e384     02 16 16 F2 | 	cmp	arg03, #2 wc
0e388     3E 00 00 FF 
0e38c     40 E4 85 F1 | 	sub	objptr, ##31808
0e390     3C 00 90 CD |  if_b	jmp	#LR__1210
0e394     00 12 06 F6 | 	mov	arg01, #0
0e398     58 BE B0 FD | 	call	#__system___getiolock_0349
0e39c     FD 12 02 F6 | 	mov	arg01, result1
0e3a0     9C 68 B0 FD | 	call	#__system___lockmem
0e3a4     21 01 00 FF 
0e3a8     1E 14 06 F6 | 	mov	arg02, ##@LR__4308
0e3ac     00 12 06 F6 | 	mov	arg01, #0
0e3b0     00 16 06 F6 | 	mov	arg03, #0
0e3b4     7C 75 B0 FD | 	call	#__system___basic_print_string
0e3b8     00 12 06 F6 | 	mov	arg01, #0
0e3bc     34 BE B0 FD | 	call	#__system___getiolock_0349
0e3c0     FD 00 68 FC | 	wrlong	#0, result1
0e3c4     27 12 06 F6 | 	mov	arg01, #39
0e3c8     80 33 B0 FD | 	call	#_printerror
0e3cc     E8 00 90 FD | 	jmp	#LR__1214
0e3d0                 | LR__1210
0e3d0                 | ' 
0e3d0                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0e3d0     0C 4E 05 F1 | 	add	fp, #12
0e3d4     A7 FE 09 FB | 	rdlong	result3, fp wz
0e3d8     0C 4E 85 F1 | 	sub	fp, #12
0e3dc     30 00 90 5D |  if_ne	jmp	#LR__1211
0e3e0     51 00 00 FF 
0e3e4     DC E5 05 F1 | 	add	objptr, ##41948
0e3e8     F2 1E 02 FB | 	rdlong	local01, objptr
0e3ec     51 00 00 FF 
0e3f0     DC E5 85 F1 | 	sub	objptr, ##41948
0e3f4     A7 1E 62 FC | 	wrlong	local01, fp
0e3f8     08 4E 05 F1 | 	add	fp, #8
0e3fc     A7 3A 68 FC | 	wrlong	#29, fp
0e400     08 4E 85 F1 | 	sub	fp, #8
0e404     A7 12 02 F6 | 	mov	arg01, fp
0e408     0C A3 BF FD | 	call	#_push
0e40c     A8 00 90 FD | 	jmp	#LR__1214
0e410                 | LR__1211
0e410     6C A2 BF FD | 	call	#_pop
0e414     A7 FA 61 FC | 	wrlong	result1, fp
0e418     04 4E 05 F1 | 	add	fp, #4
0e41c     A7 FC 61 FC | 	wrlong	result2, fp
0e420     04 4E 05 F1 | 	add	fp, #4
0e424     A7 FE 61 FC | 	wrlong	result3, fp
0e428                 | ' 
0e428                 | ' t1=pop()
0e428                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e428     08 4E 85 F1 | 	sub	fp, #8
0e42c     1C FE 0D F2 | 	cmp	result3, #28 wz
0e430     08 4E 05 51 |  if_ne	add	fp, #8
0e434     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e438     08 4E 85 51 |  if_ne	sub	fp, #8
0e43c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e440     6C 00 90 5D |  if_ne	jmp	#LR__1213
0e444     A7 1E 02 FB | 	rdlong	local01, fp
0e448     52 00 00 FF 
0e44c     80 E4 05 F1 | 	add	objptr, ##42112
0e450     F2 1E 62 FC | 	wrlong	local01, objptr
0e454                 | '   q=t1.result.uresult
0e454                 | '   if q<7 then 
0e454     52 00 00 FF 
0e458     80 E4 85 F1 | 	sub	objptr, ##42112
0e45c     07 1E 56 F2 | 	cmps	local01, #7 wc
0e460     40 00 90 3D |  if_ae	jmp	#LR__1212
0e464     52 00 00 FF 
0e468     80 E4 05 F1 | 	add	objptr, ##42112
0e46c     F2 1E 02 FB | 	rdlong	local01, objptr
0e470     02 1E 66 F0 | 	shl	local01, #2
0e474     A4 E4 85 F1 | 	sub	objptr, #164
0e478     F2 1E 02 F1 | 	add	local01, objptr
0e47c     0F 1F 02 FB | 	rdlong	local01, local01
0e480     A7 1E 62 FC | 	wrlong	local01, fp
0e484     08 4E 05 F1 | 	add	fp, #8
0e488     A7 3A 68 FC | 	wrlong	#29, fp
0e48c     08 4E 85 F1 | 	sub	fp, #8
0e490     A7 12 02 F6 | 	mov	arg01, fp
0e494     51 00 00 FF 
0e498     DC E5 85 F1 | 	sub	objptr, ##41948
0e49c     78 A2 BF FD | 	call	#_push
0e4a0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0e4a0     14 00 90 FD | 	jmp	#LR__1214
0e4a4                 | LR__1212
0e4a4     29 12 06 F6 | 	mov	arg01, #41
0e4a8     A0 32 B0 FD | 	call	#_printerror
0e4ac                 | '      printerror(41) : return
0e4ac     08 00 90 FD | 	jmp	#LR__1214
0e4b0                 | LR__1213
0e4b0     29 12 06 F6 | 	mov	arg01, #41
0e4b4     94 32 B0 FD | 	call	#_printerror
0e4b8                 | LR__1214
0e4b8     A7 F0 03 F6 | 	mov	ptra, fp
0e4bc     B2 00 A0 FD | 	call	#popregs_
0e4c0                 | _do_strig_ret
0e4c0     2D 00 64 FD | 	ret
0e4c4                 | 
0e4c4                 | ' 
0e4c4                 | ' sub do_getpixel
0e4c4                 | _do_getpixel
0e4c4     00 4A 05 F6 | 	mov	COUNT_, #0
0e4c8     A8 00 A0 FD | 	call	#pushregs_
0e4cc     24 F0 07 F1 | 	add	ptra, #36
0e4d0     41 00 00 FF 
0e4d4     44 E4 05 F1 | 	add	objptr, ##33348
0e4d8     F2 16 02 FB | 	rdlong	arg03, objptr
0e4dc     0B 15 02 F6 | 	mov	arg02, arg03
0e4e0     01 14 66 F0 | 	shl	arg02, #1
0e4e4     0B 15 02 F1 | 	add	arg02, arg03
0e4e8     02 14 66 F0 | 	shl	arg02, #2
0e4ec     03 00 00 FF 
0e4f0     04 E4 85 F1 | 	sub	objptr, ##1540
0e4f4     F2 14 02 F1 | 	add	arg02, objptr
0e4f8     0A 17 02 FB | 	rdlong	arg03, arg02
0e4fc     18 4E 05 F1 | 	add	fp, #24
0e500     A7 16 62 FC | 	wrlong	arg03, fp
0e504                 | ' 
0e504                 | ' numpar=compiledline(lineptr_e).result.uresult
0e504                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0e504     18 4E 85 F1 | 	sub	fp, #24
0e508     02 16 0E F2 | 	cmp	arg03, #2 wz
0e50c     3E 00 00 FF 
0e510     40 E4 85 F1 | 	sub	objptr, ##31808
0e514     3C 00 90 AD |  if_e	jmp	#LR__1220
0e518     00 12 06 F6 | 	mov	arg01, #0
0e51c     D4 BC B0 FD | 	call	#__system___getiolock_0349
0e520     FD 12 02 F6 | 	mov	arg01, result1
0e524     18 67 B0 FD | 	call	#__system___lockmem
0e528     21 01 00 FF 
0e52c     26 14 06 F6 | 	mov	arg02, ##@LR__4309
0e530     00 12 06 F6 | 	mov	arg01, #0
0e534     00 16 06 F6 | 	mov	arg03, #0
0e538     F8 73 B0 FD | 	call	#__system___basic_print_string
0e53c     00 12 06 F6 | 	mov	arg01, #0
0e540     B0 BC B0 FD | 	call	#__system___getiolock_0349
0e544     FD 00 68 FC | 	wrlong	#0, result1
0e548     27 12 06 F6 | 	mov	arg01, #39
0e54c     FC 31 B0 FD | 	call	#_printerror
0e550     B4 00 90 FD | 	jmp	#LR__1221
0e554                 | LR__1220
0e554     28 A1 BF FD | 	call	#_pop
0e558     FD 16 02 F6 | 	mov	arg03, result1
0e55c     FE 14 02 F6 | 	mov	arg02, result2
0e560     FF 12 02 F6 | 	mov	arg01, result3
0e564     0C 4E 05 F1 | 	add	fp, #12
0e568     A7 16 62 FC | 	wrlong	arg03, fp
0e56c     04 4E 05 F1 | 	add	fp, #4
0e570     A7 14 62 FC | 	wrlong	arg02, fp
0e574     04 4E 05 F1 | 	add	fp, #4
0e578     A7 12 62 FC | 	wrlong	arg01, fp
0e57c     14 4E 85 F1 | 	sub	fp, #20
0e580     FC A0 BF FD | 	call	#_pop
0e584     FF 16 02 F6 | 	mov	arg03, result3
0e588     A7 FA 61 FC | 	wrlong	result1, fp
0e58c     04 4E 05 F1 | 	add	fp, #4
0e590     A7 FC 61 FC | 	wrlong	result2, fp
0e594     04 4E 05 F1 | 	add	fp, #4
0e598     A7 16 62 FC | 	wrlong	arg03, fp
0e59c     08 4E 85 F1 | 	sub	fp, #8
0e5a0     A7 12 02 F6 | 	mov	arg01, fp
0e5a4     E4 F7 BF FD | 	call	#_converttoint
0e5a8     1C 4E 05 F1 | 	add	fp, #28
0e5ac     A7 FA 61 FC | 	wrlong	result1, fp
0e5b0     10 4E 85 F1 | 	sub	fp, #16
0e5b4     A7 12 02 F6 | 	mov	arg01, fp
0e5b8     0C 4E 85 F1 | 	sub	fp, #12
0e5bc     CC F7 BF FD | 	call	#_converttoint
0e5c0     FD 16 02 F6 | 	mov	arg03, result1
0e5c4     20 4E 05 F1 | 	add	fp, #32
0e5c8     A7 16 62 FC | 	wrlong	arg03, fp
0e5cc     F2 12 02 FB | 	rdlong	arg01, objptr
0e5d0     04 4E 85 F1 | 	sub	fp, #4
0e5d4     A7 FE 01 FB | 	rdlong	result3, fp
0e5d8     FF 12 02 F1 | 	add	arg01, result3
0e5dc     1C 4E 85 F1 | 	sub	fp, #28
0e5e0     0A 16 66 F0 | 	shl	arg03, #10
0e5e4     0B 13 02 F1 | 	add	arg01, arg03
0e5e8     C4 32 B0 FD | 	call	#_pspeek
0e5ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e5f0     A7 FA 61 FC | 	wrlong	result1, fp
0e5f4     08 4E 05 F1 | 	add	fp, #8
0e5f8     A7 3A 68 FC | 	wrlong	#29, fp
0e5fc     08 4E 85 F1 | 	sub	fp, #8
0e600     A7 12 02 F6 | 	mov	arg01, fp
0e604     10 A1 BF FD | 	call	#_push
0e608                 | LR__1221
0e608     A7 F0 03 F6 | 	mov	ptra, fp
0e60c     B2 00 A0 FD | 	call	#popregs_
0e610                 | _do_getpixel_ret
0e610     2D 00 64 FD | 	ret
0e614                 | 
0e614                 | ' 
0e614                 | ' 
0e614                 | ' 
0e614                 | ' sub do_defsprite
0e614                 | _do_defsprite
0e614     07 4A 05 F6 | 	mov	COUNT_, #7
0e618     A8 00 A0 FD | 	call	#pushregs_
0e61c     5C F0 07 F1 | 	add	ptra, #92
0e620     5C A0 BF FD | 	call	#_pop
0e624     FD 16 02 F6 | 	mov	arg03, result1
0e628     FE 14 02 F6 | 	mov	arg02, result2
0e62c     FF 12 02 F6 | 	mov	arg01, result3
0e630     30 4E 05 F1 | 	add	fp, #48
0e634     A7 16 62 FC | 	wrlong	arg03, fp
0e638     04 4E 05 F1 | 	add	fp, #4
0e63c     A7 14 62 FC | 	wrlong	arg02, fp
0e640     04 4E 05 F1 | 	add	fp, #4
0e644     A7 12 62 FC | 	wrlong	arg01, fp
0e648     38 4E 85 F1 | 	sub	fp, #56
0e64c     30 A0 BF FD | 	call	#_pop
0e650     FD 16 02 F6 | 	mov	arg03, result1
0e654     FE 14 02 F6 | 	mov	arg02, result2
0e658     FF 12 02 F6 | 	mov	arg01, result3
0e65c     24 4E 05 F1 | 	add	fp, #36
0e660     A7 16 62 FC | 	wrlong	arg03, fp
0e664     04 4E 05 F1 | 	add	fp, #4
0e668     A7 14 62 FC | 	wrlong	arg02, fp
0e66c     04 4E 05 F1 | 	add	fp, #4
0e670     A7 12 62 FC | 	wrlong	arg01, fp
0e674     2C 4E 85 F1 | 	sub	fp, #44
0e678     04 A0 BF FD | 	call	#_pop
0e67c     FD 16 02 F6 | 	mov	arg03, result1
0e680     FE 14 02 F6 | 	mov	arg02, result2
0e684     FF 12 02 F6 | 	mov	arg01, result3
0e688     18 4E 05 F1 | 	add	fp, #24
0e68c     A7 16 62 FC | 	wrlong	arg03, fp
0e690     04 4E 05 F1 | 	add	fp, #4
0e694     A7 14 62 FC | 	wrlong	arg02, fp
0e698     04 4E 05 F1 | 	add	fp, #4
0e69c     A7 12 62 FC | 	wrlong	arg01, fp
0e6a0     20 4E 85 F1 | 	sub	fp, #32
0e6a4     D8 9F BF FD | 	call	#_pop
0e6a8     FD 16 02 F6 | 	mov	arg03, result1
0e6ac     FE 14 02 F6 | 	mov	arg02, result2
0e6b0     FF 12 02 F6 | 	mov	arg01, result3
0e6b4     0C 4E 05 F1 | 	add	fp, #12
0e6b8     A7 16 62 FC | 	wrlong	arg03, fp
0e6bc     04 4E 05 F1 | 	add	fp, #4
0e6c0     A7 14 62 FC | 	wrlong	arg02, fp
0e6c4     04 4E 05 F1 | 	add	fp, #4
0e6c8     A7 12 62 FC | 	wrlong	arg01, fp
0e6cc     14 4E 85 F1 | 	sub	fp, #20
0e6d0     AC 9F BF FD | 	call	#_pop
0e6d4     FF 16 02 F6 | 	mov	arg03, result3
0e6d8     A7 FA 61 FC | 	wrlong	result1, fp
0e6dc     04 4E 05 F1 | 	add	fp, #4
0e6e0     A7 FC 61 FC | 	wrlong	result2, fp
0e6e4     04 4E 05 F1 | 	add	fp, #4
0e6e8     A7 16 62 FC | 	wrlong	arg03, fp
0e6ec     08 4E 85 F1 | 	sub	fp, #8
0e6f0     A7 12 02 F6 | 	mov	arg01, fp
0e6f4     94 F6 BF FD | 	call	#_converttoint
0e6f8     3C 4E 05 F1 | 	add	fp, #60
0e6fc     A7 FA 61 FC | 	wrlong	result1, fp
0e700     30 4E 85 F1 | 	sub	fp, #48
0e704     A7 12 02 F6 | 	mov	arg01, fp
0e708     0C 4E 85 F1 | 	sub	fp, #12
0e70c     7C F6 BF FD | 	call	#_converttoint
0e710     40 4E 05 F1 | 	add	fp, #64
0e714     A7 FA 61 FC | 	wrlong	result1, fp
0e718     28 4E 85 F1 | 	sub	fp, #40
0e71c     A7 12 02 F6 | 	mov	arg01, fp
0e720     18 4E 85 F1 | 	sub	fp, #24
0e724     64 F6 BF FD | 	call	#_converttoint
0e728     44 4E 05 F1 | 	add	fp, #68
0e72c     A7 FA 61 FC | 	wrlong	result1, fp
0e730     20 4E 85 F1 | 	sub	fp, #32
0e734     A7 12 02 F6 | 	mov	arg01, fp
0e738     24 4E 85 F1 | 	sub	fp, #36
0e73c     4C F6 BF FD | 	call	#_converttoint
0e740     48 4E 05 F1 | 	add	fp, #72
0e744     A7 FA 61 FC | 	wrlong	result1, fp
0e748     18 4E 85 F1 | 	sub	fp, #24
0e74c     A7 12 02 F6 | 	mov	arg01, fp
0e750     30 4E 85 F1 | 	sub	fp, #48
0e754     34 F6 BF FD | 	call	#_converttoint
0e758     4C 4E 05 F1 | 	add	fp, #76
0e75c     A7 FA 61 FC | 	wrlong	result1, fp
0e760                 | ' 
0e760                 | ' t5=pop()
0e760                 | ' t4=pop()
0e760                 | ' t3=pop()
0e760                 | ' t2=pop()
0e760                 | ' t1=pop()
0e760                 | ' 
0e760                 | ' ' do convert, defsprite is not a racing command
0e760                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0e760                 | '  
0e760                 | ' ' todo: check parameters for linits
0e760                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0e760     10 4E 85 F1 | 	sub	fp, #16
0e764     A7 16 02 FB | 	rdlong	arg03, fp
0e768     3C 4E 85 F1 | 	sub	fp, #60
0e76c     02 16 66 F0 | 	shl	arg03, #2
0e770     51 00 00 FF 
0e774     F8 E5 05 F1 | 	add	objptr, ##41976
0e778     F2 16 02 F1 | 	add	arg03, objptr
0e77c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e780     51 00 00 FF 
0e784     F8 E5 85 F1 | 	sub	objptr, ##41976
0e788     2C 00 90 AD |  if_e	jmp	#LR__1230
0e78c     3C 4E 05 F1 | 	add	fp, #60
0e790     A7 16 02 FB | 	rdlong	arg03, fp
0e794     3C 4E 85 F1 | 	sub	fp, #60
0e798     02 16 66 F0 | 	shl	arg03, #2
0e79c     51 00 00 FF 
0e7a0     F8 E5 05 F1 | 	add	objptr, ##41976
0e7a4     F2 16 02 F1 | 	add	arg03, objptr
0e7a8     0B 13 02 FB | 	rdlong	arg01, arg03
0e7ac     51 00 00 FF 
0e7b0     F8 E5 85 F1 | 	sub	objptr, ##41976
0e7b4     2C A0 B0 FD | 	call	#__system___gc_free
0e7b8                 | LR__1230
0e7b8     3C 4E 05 F1 | 	add	fp, #60
0e7bc     A7 1E 02 FB | 	rdlong	local01, fp
0e7c0     0C 4E 05 F1 | 	add	fp, #12
0e7c4     A7 16 02 FB | 	rdlong	arg03, fp
0e7c8     04 4E 05 F1 | 	add	fp, #4
0e7cc     A7 14 02 FB | 	rdlong	arg02, fp
0e7d0     0A 17 02 FD | 	qmul	arg03, arg02
0e7d4     02 1E 66 F0 | 	shl	local01, #2
0e7d8     51 00 00 FF 
0e7dc     F8 E5 05 F1 | 	add	objptr, ##41976
0e7e0     F2 1E 02 F1 | 	add	local01, objptr
0e7e4     4C 4E 85 F1 | 	sub	fp, #76
0e7e8     51 00 00 FF 
0e7ec     F8 E5 85 F1 | 	sub	objptr, ##41976
0e7f0     18 12 62 FD | 	getqx	arg01
0e7f4     B0 9E B0 FD | 	call	#__system___gc_alloc_managed
0e7f8     0F FB 61 FC | 	wrlong	result1, local01
0e7fc                 | ' for y=a3 to a3+a5-1
0e7fc     44 4E 05 F1 | 	add	fp, #68
0e800     A7 20 02 FB | 	rdlong	local02, fp
0e804     0C 4E 05 F1 | 	add	fp, #12
0e808     A7 20 62 FC | 	wrlong	local02, fp
0e80c     0C 4E 85 F1 | 	sub	fp, #12
0e810     A7 22 02 FB | 	rdlong	local03, fp
0e814     08 4E 05 F1 | 	add	fp, #8
0e818     A7 24 02 FB | 	rdlong	local04, fp
0e81c     4C 4E 85 F1 | 	sub	fp, #76
0e820     12 23 02 F1 | 	add	local03, local04
0e824                 | LR__1231
0e824     50 4E 05 F1 | 	add	fp, #80
0e828     A7 20 02 FB | 	rdlong	local02, fp
0e82c     50 4E 85 F1 | 	sub	fp, #80
0e830     11 21 52 F2 | 	cmps	local02, local03 wc
0e834     10 01 90 3D |  if_ae	jmp	#LR__1234
0e838                 | '   for x=a2 to a4+a2-1
0e838     40 4E 05 F1 | 	add	fp, #64
0e83c     A7 1E 02 FB | 	rdlong	local01, fp
0e840     52 00 00 FF 
0e844     54 E4 05 F1 | 	add	objptr, ##42068
0e848     F2 1E 62 FC | 	wrlong	local01, objptr
0e84c     52 00 00 FF 
0e850     54 E4 85 F1 | 	sub	objptr, ##42068
0e854     08 4E 05 F1 | 	add	fp, #8
0e858     A7 26 02 FB | 	rdlong	local05, fp
0e85c     08 4E 85 F1 | 	sub	fp, #8
0e860     A7 28 02 FB | 	rdlong	local06, fp
0e864     40 4E 85 F1 | 	sub	fp, #64
0e868     14 27 02 F1 | 	add	local05, local06
0e86c                 | LR__1232
0e86c     52 00 00 FF 
0e870     54 E4 05 F1 | 	add	objptr, ##42068
0e874     F2 1E 02 FB | 	rdlong	local01, objptr
0e878     52 00 00 FF 
0e87c     54 E4 85 F1 | 	sub	objptr, ##42068
0e880     13 1F 52 F2 | 	cmps	local01, local05 wc
0e884     A8 00 90 3D |  if_ae	jmp	#LR__1233
0e888     3C 4E 05 F1 | 	add	fp, #60
0e88c     A7 28 02 FB | 	rdlong	local06, fp
0e890     04 4E 05 F1 | 	add	fp, #4
0e894     A7 24 02 FB | 	rdlong	local04, fp
0e898     10 4E 05 F1 | 	add	fp, #16
0e89c     A7 20 02 FB | 	rdlong	local02, fp
0e8a0     10 1F 02 F6 | 	mov	local01, local02
0e8a4     0C 4E 85 F1 | 	sub	fp, #12
0e8a8     A7 16 02 FB | 	rdlong	arg03, fp
0e8ac     0B 1F 82 F1 | 	sub	local01, arg03
0e8b0     04 4E 05 F1 | 	add	fp, #4
0e8b4     A7 16 02 FB | 	rdlong	arg03, fp
0e8b8     0B 1F 02 FD | 	qmul	local01, arg03
0e8bc     02 28 66 F0 | 	shl	local06, #2
0e8c0     51 00 00 FF 
0e8c4     F8 E5 05 F1 | 	add	objptr, ##41976
0e8c8     F2 28 02 F1 | 	add	local06, objptr
0e8cc     14 29 02 FB | 	rdlong	local06, local06
0e8d0     5C E4 05 F1 | 	add	objptr, #92
0e8d4     F2 1E 02 FB | 	rdlong	local01, objptr
0e8d8     52 00 00 FF 
0e8dc     54 E4 85 F1 | 	sub	objptr, ##42068
0e8e0     0F 2B 02 F6 | 	mov	local07, local01
0e8e4     12 2B 82 F1 | 	sub	local07, local04
0e8e8     F2 12 02 FB | 	rdlong	arg01, objptr
0e8ec     0F 13 02 F1 | 	add	arg01, local01
0e8f0     48 4E 85 F1 | 	sub	fp, #72
0e8f4     0A 20 66 F0 | 	shl	local02, #10
0e8f8     10 13 02 F1 | 	add	arg01, local02
0e8fc     18 24 62 FD | 	getqx	local04
0e900     12 2B 02 F1 | 	add	local07, local04
0e904     14 2B 02 F1 | 	add	local07, local06
0e908     A4 2F B0 FD | 	call	#_pspeek
0e90c     15 FB 41 FC | 	wrbyte	result1, local07
0e910     52 00 00 FF 
0e914     54 E4 05 F1 | 	add	objptr, ##42068
0e918     F2 2A 02 FB | 	rdlong	local07, objptr
0e91c     01 2A 06 F1 | 	add	local07, #1
0e920     F2 2A 62 FC | 	wrlong	local07, objptr
0e924     52 00 00 FF 
0e928     54 E4 85 F1 | 	sub	objptr, ##42068
0e92c     3C FF 9F FD | 	jmp	#LR__1232
0e930                 | LR__1233
0e930     50 4E 05 F1 | 	add	fp, #80
0e934     A7 2A 02 FB | 	rdlong	local07, fp
0e938     01 2A 06 F1 | 	add	local07, #1
0e93c     A7 2A 62 FC | 	wrlong	local07, fp
0e940     50 4E 85 F1 | 	sub	fp, #80
0e944     DC FE 9F FD | 	jmp	#LR__1231
0e948                 | LR__1234
0e948     3C 4E 05 F1 | 	add	fp, #60
0e94c     A7 2A 02 FB | 	rdlong	local07, fp
0e950     15 13 02 F6 | 	mov	arg01, local07
0e954     3C 4E 85 F1 | 	sub	fp, #60
0e958     02 2A 66 F0 | 	shl	local07, #2
0e95c     51 00 00 FF 
0e960     F8 E5 05 F1 | 	add	objptr, ##41976
0e964     F2 2A 02 F1 | 	add	local07, objptr
0e968     15 15 02 FB | 	rdlong	arg02, local07
0e96c     51 00 00 FF 
0e970     F8 E5 85 F1 | 	sub	objptr, ##41976
0e974     B0 42 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0e978     3C 4E 05 F1 | 	add	fp, #60
0e97c     A7 12 02 FB | 	rdlong	arg01, fp
0e980     0C 4E 05 F1 | 	add	fp, #12
0e984     A7 14 02 FB | 	rdlong	arg02, fp
0e988     04 4E 05 F1 | 	add	fp, #4
0e98c     A7 16 02 FB | 	rdlong	arg03, fp
0e990     4C 4E 85 F1 | 	sub	fp, #76
0e994     04 43 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e998     A7 F0 03 F6 | 	mov	ptra, fp
0e99c     B2 00 A0 FD | 	call	#popregs_
0e9a0                 | _do_defsprite_ret
0e9a0     2D 00 64 FD | 	ret
0e9a4                 | 
0e9a4                 | ' 
0e9a4                 | ' sub do_sprite
0e9a4                 | _do_sprite
0e9a4     00 4A 05 F6 | 	mov	COUNT_, #0
0e9a8     A8 00 A0 FD | 	call	#pushregs_
0e9ac     30 F0 07 F1 | 	add	ptra, #48
0e9b0     CC 9C BF FD | 	call	#_pop
0e9b4     FD 16 02 F6 | 	mov	arg03, result1
0e9b8     FE 14 02 F6 | 	mov	arg02, result2
0e9bc     FF 12 02 F6 | 	mov	arg01, result3
0e9c0     18 4E 05 F1 | 	add	fp, #24
0e9c4     A7 16 62 FC | 	wrlong	arg03, fp
0e9c8     04 4E 05 F1 | 	add	fp, #4
0e9cc     A7 14 62 FC | 	wrlong	arg02, fp
0e9d0     04 4E 05 F1 | 	add	fp, #4
0e9d4     A7 12 62 FC | 	wrlong	arg01, fp
0e9d8     20 4E 85 F1 | 	sub	fp, #32
0e9dc     A0 9C BF FD | 	call	#_pop
0e9e0     FD 16 02 F6 | 	mov	arg03, result1
0e9e4     FE 14 02 F6 | 	mov	arg02, result2
0e9e8     FF 12 02 F6 | 	mov	arg01, result3
0e9ec     0C 4E 05 F1 | 	add	fp, #12
0e9f0     A7 16 62 FC | 	wrlong	arg03, fp
0e9f4     04 4E 05 F1 | 	add	fp, #4
0e9f8     A7 14 62 FC | 	wrlong	arg02, fp
0e9fc     04 4E 05 F1 | 	add	fp, #4
0ea00     A7 12 62 FC | 	wrlong	arg01, fp
0ea04     14 4E 85 F1 | 	sub	fp, #20
0ea08     74 9C BF FD | 	call	#_pop
0ea0c     FF 16 02 F6 | 	mov	arg03, result3
0ea10     A7 FA 61 FC | 	wrlong	result1, fp
0ea14     04 4E 05 F1 | 	add	fp, #4
0ea18     A7 FC 61 FC | 	wrlong	result2, fp
0ea1c     04 4E 05 F1 | 	add	fp, #4
0ea20     A7 16 62 FC | 	wrlong	arg03, fp
0ea24     08 4E 85 F1 | 	sub	fp, #8
0ea28     A7 12 02 F6 | 	mov	arg01, fp
0ea2c     5C F3 BF FD | 	call	#_converttoint
0ea30     24 4E 05 F1 | 	add	fp, #36
0ea34     A7 FA 61 FC | 	wrlong	result1, fp
0ea38     18 4E 85 F1 | 	sub	fp, #24
0ea3c     A7 12 02 F6 | 	mov	arg01, fp
0ea40     0C 4E 85 F1 | 	sub	fp, #12
0ea44     44 F3 BF FD | 	call	#_converttoint
0ea48     28 4E 05 F1 | 	add	fp, #40
0ea4c     A7 FA 61 FC | 	wrlong	result1, fp
0ea50     10 4E 85 F1 | 	sub	fp, #16
0ea54     A7 12 02 F6 | 	mov	arg01, fp
0ea58     18 4E 85 F1 | 	sub	fp, #24
0ea5c     2C F3 BF FD | 	call	#_converttoint
0ea60     2C 4E 05 F1 | 	add	fp, #44
0ea64     A7 FA 61 FC | 	wrlong	result1, fp
0ea68     08 4E 85 F1 | 	sub	fp, #8
0ea6c     A7 12 02 FB | 	rdlong	arg01, fp
0ea70     04 4E 05 F1 | 	add	fp, #4
0ea74     A7 14 02 FB | 	rdlong	arg02, fp
0ea78     FD 16 02 F6 | 	mov	arg03, result1
0ea7c     28 4E 85 F1 | 	sub	fp, #40
0ea80     CC 41 B0 FD | 	call	#_hg010b_spin2_setspritepos
0ea84     A7 F0 03 F6 | 	mov	ptra, fp
0ea88     B2 00 A0 FD | 	call	#popregs_
0ea8c                 | _do_sprite_ret
0ea8c     2D 00 64 FD | 	ret
0ea90                 | 
0ea90                 | ' 
0ea90                 | ' sub do_mousex
0ea90                 | _do_mousex
0ea90     00 4A 05 F6 | 	mov	COUNT_, #0
0ea94     A8 00 A0 FD | 	call	#pushregs_
0ea98     0C F0 07 F1 | 	add	ptra, #12
0ea9c     08 4E 05 F1 | 	add	fp, #8
0eaa0     A7 3A 68 FC | 	wrlong	#29, fp
0eaa4     08 4E 85 F1 | 	sub	fp, #8
0eaa8     51 00 00 FF 
0eaac     B0 E5 05 F1 | 	add	objptr, ##41904
0eab0     F2 12 02 FB | 	rdlong	arg01, objptr
0eab4     51 00 00 FF 
0eab8     B0 E5 85 F1 | 	sub	objptr, ##41904
0eabc     A7 12 62 FC | 	wrlong	arg01, fp
0eac0     A7 12 02 F6 | 	mov	arg01, fp
0eac4     50 9C BF FD | 	call	#_push
0eac8     A7 F0 03 F6 | 	mov	ptra, fp
0eacc     B2 00 A0 FD | 	call	#popregs_
0ead0                 | _do_mousex_ret
0ead0     2D 00 64 FD | 	ret
0ead4                 | 
0ead4                 | ' 
0ead4                 | ' sub do_mousey
0ead4                 | _do_mousey
0ead4     00 4A 05 F6 | 	mov	COUNT_, #0
0ead8     A8 00 A0 FD | 	call	#pushregs_
0eadc     0C F0 07 F1 | 	add	ptra, #12
0eae0     08 4E 05 F1 | 	add	fp, #8
0eae4     A7 3A 68 FC | 	wrlong	#29, fp
0eae8     08 4E 85 F1 | 	sub	fp, #8
0eaec     51 00 00 FF 
0eaf0     B4 E5 05 F1 | 	add	objptr, ##41908
0eaf4     F2 12 02 FB | 	rdlong	arg01, objptr
0eaf8     51 00 00 FF 
0eafc     B4 E5 85 F1 | 	sub	objptr, ##41908
0eb00     A7 12 62 FC | 	wrlong	arg01, fp
0eb04     A7 12 02 F6 | 	mov	arg01, fp
0eb08     0C 9C BF FD | 	call	#_push
0eb0c     A7 F0 03 F6 | 	mov	ptra, fp
0eb10     B2 00 A0 FD | 	call	#popregs_
0eb14                 | _do_mousey_ret
0eb14     2D 00 64 FD | 	ret
0eb18                 | 
0eb18                 | ' 
0eb18                 | ' sub do_mousew
0eb18                 | _do_mousew
0eb18     00 4A 05 F6 | 	mov	COUNT_, #0
0eb1c     A8 00 A0 FD | 	call	#pushregs_
0eb20     0C F0 07 F1 | 	add	ptra, #12
0eb24     08 4E 05 F1 | 	add	fp, #8
0eb28     A7 38 68 FC | 	wrlong	#28, fp
0eb2c     08 4E 85 F1 | 	sub	fp, #8
0eb30     51 00 00 FF 
0eb34     BC E5 05 F1 | 	add	objptr, ##41916
0eb38     F2 12 02 FB | 	rdlong	arg01, objptr
0eb3c     51 00 00 FF 
0eb40     BC E5 85 F1 | 	sub	objptr, ##41916
0eb44     A7 12 62 FC | 	wrlong	arg01, fp
0eb48     A7 12 02 F6 | 	mov	arg01, fp
0eb4c     C8 9B BF FD | 	call	#_push
0eb50     A7 F0 03 F6 | 	mov	ptra, fp
0eb54     B2 00 A0 FD | 	call	#popregs_
0eb58                 | _do_mousew_ret
0eb58     2D 00 64 FD | 	ret
0eb5c                 | 
0eb5c                 | ' 
0eb5c                 | ' sub do_mousek
0eb5c                 | _do_mousek
0eb5c     00 4A 05 F6 | 	mov	COUNT_, #0
0eb60     A8 00 A0 FD | 	call	#pushregs_
0eb64     0C F0 07 F1 | 	add	ptra, #12
0eb68     08 4E 05 F1 | 	add	fp, #8
0eb6c     A7 3A 68 FC | 	wrlong	#29, fp
0eb70     08 4E 85 F1 | 	sub	fp, #8
0eb74     51 00 00 FF 
0eb78     B8 E5 05 F1 | 	add	objptr, ##41912
0eb7c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb80     51 00 00 FF 
0eb84     B8 E5 85 F1 | 	sub	objptr, ##41912
0eb88     A7 12 62 FC | 	wrlong	arg01, fp
0eb8c     A7 12 02 F6 | 	mov	arg01, fp
0eb90     84 9B BF FD | 	call	#_push
0eb94     A7 F0 03 F6 | 	mov	ptra, fp
0eb98     B2 00 A0 FD | 	call	#popregs_
0eb9c                 | _do_mousek_ret
0eb9c     2D 00 64 FD | 	ret
0eba0                 | 
0eba0                 | ' sub do_gettime
0eba0                 | _do_gettime
0eba0     02 4A 05 F6 | 	mov	COUNT_, #2
0eba4     A8 00 A0 FD | 	call	#pushregs_
0eba8     14 F0 07 F1 | 	add	ptra, #20
0ebac                 | ' 
0ebac                 | ' const asm 
0ebac     1A 1E 72 FD | 	getct	local01 wc
0ebb0     1A 20 62 FD | 	getct	local02
0ebb4                 | ' 
0ebb4                 | ' return hi1, lo1
0ebb4     10 FD 01 F6 | 	mov	result2, local02
0ebb8     A7 1E 62 FC | 	wrlong	local01, fp
0ebbc     04 4E 05 F1 | 	add	fp, #4
0ebc0     A7 FC 61 FC | 	wrlong	result2, fp
0ebc4     0C 4E 05 F1 | 	add	fp, #12
0ebc8     A7 3A 68 FC | 	wrlong	#29, fp
0ebcc     0C 4E 85 F1 | 	sub	fp, #12
0ebd0     A7 12 02 FB | 	rdlong	arg01, fp
0ebd4     04 4E 05 F1 | 	add	fp, #4
0ebd8     A7 12 62 FC | 	wrlong	arg01, fp
0ebdc     08 4E 85 F1 | 	sub	fp, #8
0ebe0     A7 12 02 FB | 	rdlong	arg01, fp
0ebe4     0C 4E 05 F1 | 	add	fp, #12
0ebe8     A7 12 62 FC | 	wrlong	arg01, fp
0ebec     04 4E 85 F1 | 	sub	fp, #4
0ebf0     A7 12 02 F6 | 	mov	arg01, fp
0ebf4     08 4E 85 F1 | 	sub	fp, #8
0ebf8     1C 9B BF FD | 	call	#_push
0ebfc     A7 F0 03 F6 | 	mov	ptra, fp
0ec00     B2 00 A0 FD | 	call	#popregs_
0ec04                 | _do_gettime_ret
0ec04     2D 00 64 FD | 	ret
0ec08                 | 
0ec08                 | '    
0ec08                 | ' 
0ec08                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0ec08                 | ' 
0ec08                 | ' '' ----------------------------- Clear the screen
0ec08                 | ' 
0ec08                 | ' sub do_cls
0ec08                 | _do_cls
0ec08     2E 00 00 FF 
0ec0c     00 E4 05 F1 | 	add	objptr, ##23552
0ec10     F2 12 02 FB | 	rdlong	arg01, objptr
0ec14     04 E4 85 F1 | 	sub	objptr, #4
0ec18     F2 14 02 FB | 	rdlong	arg02, objptr
0ec1c     2D 00 00 FF 
0ec20     FC E5 85 F1 | 	sub	objptr, ##23548
0ec24     38 4D B0 FD | 	call	#_hg010b_spin2_cls
0ec28     2E 00 00 FF 
0ec2c     00 E4 05 F1 | 	add	objptr, ##23552
0ec30     F2 14 02 FB | 	rdlong	arg02, objptr
0ec34     14 E4 85 F1 | 	sub	objptr, #20
0ec38     F2 14 62 FC | 	wrlong	arg02, objptr
0ec3c     2D 00 00 FF 
0ec40     EC E5 85 F1 | 	sub	objptr, ##23532
0ec44                 | ' cls(ink,paper): plot_color=ink: print
0ec44     00 12 06 F6 | 	mov	arg01, #0
0ec48     A8 B5 B0 FD | 	call	#__system___getiolock_0349
0ec4c     FD 12 02 F6 | 	mov	arg01, result1
0ec50     EC 5F B0 FD | 	call	#__system___lockmem
0ec54     00 12 06 F6 | 	mov	arg01, #0
0ec58     0A 14 06 F6 | 	mov	arg02, #10
0ec5c     00 16 06 F6 | 	mov	arg03, #0
0ec60     78 6C B0 FD | 	call	#__system___basic_print_char
0ec64     00 12 06 F6 | 	mov	arg01, #0
0ec68     88 B5 B0 FD | 	call	#__system___getiolock_0349
0ec6c     FD 00 68 FC | 	wrlong	#0, result1
0ec70                 | _do_cls_ret
0ec70     2D 00 64 FD | 	ret
0ec74                 | 
0ec74                 | ' 
0ec74                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0ec74                 | ' 
0ec74                 | ' sub do_color
0ec74                 | _do_color
0ec74     03 4A 05 F6 | 	mov	COUNT_, #3
0ec78     A8 00 A0 FD | 	call	#pushregs_
0ec7c     00 9A BF FD | 	call	#_pop
0ec80     FD 1E 02 F6 | 	mov	local01, result1
0ec84     FE 20 02 F6 | 	mov	local02, result2
0ec88     FF 22 02 F6 | 	mov	local03, result3
0ec8c     2D 00 00 FF 
0ec90     EC E5 05 F1 | 	add	objptr, ##23532
0ec94     F2 1E 62 FC | 	wrlong	local01, objptr
0ec98     2D 00 00 FF 
0ec9c     EC E5 85 F1 | 	sub	objptr, ##23532
0eca0     A7 F0 03 F6 | 	mov	ptra, fp
0eca4     B2 00 A0 FD | 	call	#popregs_
0eca8                 | _do_color_ret
0eca8     2D 00 64 FD | 	ret
0ecac                 | 
0ecac                 | ' 
0ecac                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0ecac                 | ' 
0ecac                 | ' sub do_plot
0ecac                 | _do_plot
0ecac     08 4A 05 F6 | 	mov	COUNT_, #8
0ecb0     A8 00 A0 FD | 	call	#pushregs_
0ecb4     C8 99 BF FD | 	call	#_pop
0ecb8     FD 1E 02 F6 | 	mov	local01, result1
0ecbc     FE 14 02 F6 | 	mov	arg02, result2
0ecc0     FF 16 02 F6 | 	mov	arg03, result3
0ecc4     0A 21 02 F6 | 	mov	local02, arg02
0ecc8     0B 23 02 F6 | 	mov	local03, arg03
0eccc     B0 99 BF FD | 	call	#_pop
0ecd0     FD 24 02 F6 | 	mov	local04, result1
0ecd4     FE 26 02 F6 | 	mov	local05, result2
0ecd8     FF 28 02 F6 | 	mov	local06, result3
0ecdc     12 2B 02 F6 | 	mov	local07, local04
0ece0     0F 2D 02 F6 | 	mov	local08, local01
0ece4                 | ' t2=pop() 					 
0ece4                 | ' t1=pop()
0ece4                 | ' 
0ece4                 | ' x=t1.result.iresult
0ece4                 | ' y=t2.result.iresult	
0ece4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0ece4     1C 28 0E F2 | 	cmp	local06, #28 wz
0ece8     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0ecec     44 00 90 5D |  if_ne	jmp	#LR__1240
0ecf0     1C 22 0E F2 | 	cmp	local03, #28 wz
0ecf4     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0ecf8     38 00 90 5D |  if_ne	jmp	#LR__1240
0ecfc     2D 00 00 FF 
0ed00     F0 E5 05 F1 | 	add	objptr, ##23536
0ed04     F2 2A 62 FC | 	wrlong	local07, objptr
0ed08     04 E4 05 F1 | 	add	objptr, #4
0ed0c     F2 2C 62 FC | 	wrlong	local08, objptr
0ed10     04 E4 85 F1 | 	sub	objptr, #4
0ed14     F2 12 02 FB | 	rdlong	arg01, objptr
0ed18     04 E4 85 F1 | 	sub	objptr, #4
0ed1c     F2 16 02 FB | 	rdlong	arg03, objptr
0ed20     2D 00 00 FF 
0ed24     EC E5 85 F1 | 	sub	objptr, ##23532
0ed28     16 15 02 F6 | 	mov	arg02, local08
0ed2c     B8 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0ed30     A4 00 90 FD | 	jmp	#LR__1245
0ed34                 | LR__1240
0ed34                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0ed34     1E 28 0E F2 | 	cmp	local06, #30 wz
0ed38     10 00 90 5D |  if_ne	jmp	#LR__1241
0ed3c     12 13 02 F6 | 	mov	arg01, local04
0ed40     01 14 06 F6 | 	mov	arg02, #1
0ed44     D4 8D B0 FD | 	call	#__system___float_tointeger
0ed48     FD 2A 02 F6 | 	mov	local07, result1
0ed4c                 | LR__1241
0ed4c                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0ed4c     1E 22 0E F2 | 	cmp	local03, #30 wz
0ed50     10 00 90 5D |  if_ne	jmp	#LR__1242
0ed54     0F 13 02 F6 | 	mov	arg01, local01
0ed58     01 14 06 F6 | 	mov	arg02, #1
0ed5c     BC 8D B0 FD | 	call	#__system___float_tointeger
0ed60     FD 2C 02 F6 | 	mov	local08, result1
0ed64                 | LR__1242
0ed64                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0ed64     1F 28 0E F2 | 	cmp	local06, #31 wz
0ed68     18 00 90 5D |  if_ne	jmp	#LR__1243
0ed6c     12 13 02 F6 | 	mov	arg01, local04
0ed70     C8 90 B0 FD | 	call	#__system____builtin_atof
0ed74     FD 12 02 F6 | 	mov	arg01, result1
0ed78     00 14 06 F6 | 	mov	arg02, #0
0ed7c     9C 8D B0 FD | 	call	#__system___float_tointeger
0ed80     FD 2A 02 F6 | 	mov	local07, result1
0ed84                 | LR__1243
0ed84                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0ed84     1F 22 0E F2 | 	cmp	local03, #31 wz
0ed88     18 00 90 5D |  if_ne	jmp	#LR__1244
0ed8c     0F 13 02 F6 | 	mov	arg01, local01
0ed90     A8 90 B0 FD | 	call	#__system____builtin_atof
0ed94     FD 12 02 F6 | 	mov	arg01, result1
0ed98     00 14 06 F6 | 	mov	arg02, #0
0ed9c     7C 8D B0 FD | 	call	#__system___float_tointeger
0eda0     FD 2C 02 F6 | 	mov	local08, result1
0eda4                 | LR__1244
0eda4     2D 00 00 FF 
0eda8     F0 E5 05 F1 | 	add	objptr, ##23536
0edac     F2 2A 62 FC | 	wrlong	local07, objptr
0edb0     04 E4 05 F1 | 	add	objptr, #4
0edb4     F2 2C 62 FC | 	wrlong	local08, objptr
0edb8     04 E4 85 F1 | 	sub	objptr, #4
0edbc     F2 12 02 FB | 	rdlong	arg01, objptr
0edc0     04 E4 85 F1 | 	sub	objptr, #4
0edc4     F2 16 02 FB | 	rdlong	arg03, objptr
0edc8     2D 00 00 FF 
0edcc     EC E5 85 F1 | 	sub	objptr, ##23532
0edd0     16 15 02 F6 | 	mov	arg02, local08
0edd4     10 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0edd8                 | LR__1245
0edd8     A7 F0 03 F6 | 	mov	ptra, fp
0eddc     B2 00 A0 FD | 	call	#popregs_
0ede0                 | _do_plot_ret
0ede0     2D 00 64 FD | 	ret
0ede4                 | 
0ede4                 | ' 
0ede4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0ede4                 | ' 
0ede4                 | ' sub do_draw
0ede4                 | _do_draw
0ede4     08 4A 05 F6 | 	mov	COUNT_, #8
0ede8     A8 00 A0 FD | 	call	#pushregs_
0edec     90 98 BF FD | 	call	#_pop
0edf0     FD 1E 02 F6 | 	mov	local01, result1
0edf4     FE 18 02 F6 | 	mov	arg04, result2
0edf8     FF 16 02 F6 | 	mov	arg03, result3
0edfc     0C 21 02 F6 | 	mov	local02, arg04
0ee00     0B 23 02 F6 | 	mov	local03, arg03
0ee04     78 98 BF FD | 	call	#_pop
0ee08     FD 24 02 F6 | 	mov	local04, result1
0ee0c     FE 26 02 F6 | 	mov	local05, result2
0ee10     FF 28 02 F6 | 	mov	local06, result3
0ee14     12 2B 02 F6 | 	mov	local07, local04
0ee18     0F 2D 02 F6 | 	mov	local08, local01
0ee1c                 | ' 
0ee1c                 | ' t2=pop()
0ee1c                 | ' t1=pop()
0ee1c                 | ' x=t1.result.iresult
0ee1c                 | ' y=t2.result.iresult
0ee1c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0ee1c     1C 28 0E F2 | 	cmp	local06, #28 wz
0ee20     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0ee24     5C 00 90 5D |  if_ne	jmp	#LR__1250
0ee28     1C 22 0E F2 | 	cmp	local03, #28 wz
0ee2c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0ee30     50 00 90 5D |  if_ne	jmp	#LR__1250
0ee34     2D 00 00 FF 
0ee38     F0 E5 05 F1 | 	add	objptr, ##23536
0ee3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee40     04 E4 05 F1 | 	add	objptr, #4
0ee44     F2 14 02 FB | 	rdlong	arg02, objptr
0ee48     08 E4 85 F1 | 	sub	objptr, #8
0ee4c     F2 1A 02 FB | 	rdlong	arg05, objptr
0ee50     2D 00 00 FF 
0ee54     EC E5 85 F1 | 	sub	objptr, ##23532
0ee58     15 17 02 F6 | 	mov	arg03, local07
0ee5c     16 19 02 F6 | 	mov	arg04, local08
0ee60     34 41 B0 FD | 	call	#_hg010b_spin2_draw
0ee64     2D 00 00 FF 
0ee68     F0 E5 05 F1 | 	add	objptr, ##23536
0ee6c     F2 2A 62 FC | 	wrlong	local07, objptr
0ee70     04 E4 05 F1 | 	add	objptr, #4
0ee74     F2 2C 62 FC | 	wrlong	local08, objptr
0ee78     2D 00 00 FF 
0ee7c     F4 E5 85 F1 | 	sub	objptr, ##23540
0ee80     BC 00 90 FD | 	jmp	#LR__1255
0ee84                 | LR__1250
0ee84                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0ee84     1E 28 0E F2 | 	cmp	local06, #30 wz
0ee88     10 00 90 5D |  if_ne	jmp	#LR__1251
0ee8c     12 13 02 F6 | 	mov	arg01, local04
0ee90     01 14 06 F6 | 	mov	arg02, #1
0ee94     84 8C B0 FD | 	call	#__system___float_tointeger
0ee98     FD 2A 02 F6 | 	mov	local07, result1
0ee9c                 | LR__1251
0ee9c                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0ee9c     1E 22 0E F2 | 	cmp	local03, #30 wz
0eea0     10 00 90 5D |  if_ne	jmp	#LR__1252
0eea4     0F 13 02 F6 | 	mov	arg01, local01
0eea8     01 14 06 F6 | 	mov	arg02, #1
0eeac     6C 8C B0 FD | 	call	#__system___float_tointeger
0eeb0     FD 2C 02 F6 | 	mov	local08, result1
0eeb4                 | LR__1252
0eeb4                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0eeb4     1F 28 0E F2 | 	cmp	local06, #31 wz
0eeb8     18 00 90 5D |  if_ne	jmp	#LR__1253
0eebc     12 13 02 F6 | 	mov	arg01, local04
0eec0     78 8F B0 FD | 	call	#__system____builtin_atof
0eec4     FD 12 02 F6 | 	mov	arg01, result1
0eec8     00 14 06 F6 | 	mov	arg02, #0
0eecc     4C 8C B0 FD | 	call	#__system___float_tointeger
0eed0     FD 2A 02 F6 | 	mov	local07, result1
0eed4                 | LR__1253
0eed4                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0eed4     1F 22 0E F2 | 	cmp	local03, #31 wz
0eed8     18 00 90 5D |  if_ne	jmp	#LR__1254
0eedc     0F 13 02 F6 | 	mov	arg01, local01
0eee0     58 8F B0 FD | 	call	#__system____builtin_atof
0eee4     FD 12 02 F6 | 	mov	arg01, result1
0eee8     00 14 06 F6 | 	mov	arg02, #0
0eeec     2C 8C B0 FD | 	call	#__system___float_tointeger
0eef0     FD 2C 02 F6 | 	mov	local08, result1
0eef4                 | LR__1254
0eef4     2D 00 00 FF 
0eef8     F0 E5 05 F1 | 	add	objptr, ##23536
0eefc     F2 12 02 FB | 	rdlong	arg01, objptr
0ef00     04 E4 05 F1 | 	add	objptr, #4
0ef04     F2 14 02 FB | 	rdlong	arg02, objptr
0ef08     08 E4 85 F1 | 	sub	objptr, #8
0ef0c     F2 1A 02 FB | 	rdlong	arg05, objptr
0ef10     2D 00 00 FF 
0ef14     EC E5 85 F1 | 	sub	objptr, ##23532
0ef18     15 17 02 F6 | 	mov	arg03, local07
0ef1c     16 19 02 F6 | 	mov	arg04, local08
0ef20     74 40 B0 FD | 	call	#_hg010b_spin2_draw
0ef24     2D 00 00 FF 
0ef28     F0 E5 05 F1 | 	add	objptr, ##23536
0ef2c     F2 2A 62 FC | 	wrlong	local07, objptr
0ef30     04 E4 05 F1 | 	add	objptr, #4
0ef34     F2 2C 62 FC | 	wrlong	local08, objptr
0ef38     2D 00 00 FF 
0ef3c     F4 E5 85 F1 | 	sub	objptr, ##23540
0ef40                 | LR__1255
0ef40     A7 F0 03 F6 | 	mov	ptra, fp
0ef44     B2 00 A0 FD | 	call	#popregs_
0ef48                 | _do_draw_ret
0ef48     2D 00 64 FD | 	ret
0ef4c                 | 
0ef4c                 | ' 
0ef4c                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0ef4c                 | ' 
0ef4c                 | ' sub do_fcircle
0ef4c                 | _do_fcircle
0ef4c     02 4A 05 F6 | 	mov	COUNT_, #2
0ef50     A8 00 A0 FD | 	call	#pushregs_
0ef54     24 F0 07 F1 | 	add	ptra, #36
0ef58     24 97 BF FD | 	call	#_pop
0ef5c     FD 18 02 F6 | 	mov	arg04, result1
0ef60     FE 16 02 F6 | 	mov	arg03, result2
0ef64     FF 14 02 F6 | 	mov	arg02, result3
0ef68     18 4E 05 F1 | 	add	fp, #24
0ef6c     A7 18 62 FC | 	wrlong	arg04, fp
0ef70     04 4E 05 F1 | 	add	fp, #4
0ef74     A7 16 62 FC | 	wrlong	arg03, fp
0ef78     04 4E 05 F1 | 	add	fp, #4
0ef7c     A7 14 62 FC | 	wrlong	arg02, fp
0ef80     20 4E 85 F1 | 	sub	fp, #32
0ef84     F8 96 BF FD | 	call	#_pop
0ef88     FD 18 02 F6 | 	mov	arg04, result1
0ef8c     FE 16 02 F6 | 	mov	arg03, result2
0ef90     FF 1E 02 F6 | 	mov	local01, result3
0ef94     0C 4E 05 F1 | 	add	fp, #12
0ef98     A7 18 62 FC | 	wrlong	arg04, fp
0ef9c     04 4E 05 F1 | 	add	fp, #4
0efa0     A7 16 62 FC | 	wrlong	arg03, fp
0efa4     04 4E 05 F1 | 	add	fp, #4
0efa8     A7 1E 62 FC | 	wrlong	local01, fp
0efac     14 4E 85 F1 | 	sub	fp, #20
0efb0     CC 96 BF FD | 	call	#_pop
0efb4     A7 FA 61 FC | 	wrlong	result1, fp
0efb8     04 4E 05 F1 | 	add	fp, #4
0efbc     A7 FC 61 FC | 	wrlong	result2, fp
0efc0     04 4E 05 F1 | 	add	fp, #4
0efc4     A7 FE 61 FC | 	wrlong	result3, fp
0efc8                 | ' 
0efc8                 | ' t3=pop()
0efc8                 | ' t2=pop()
0efc8                 | ' t1=pop()
0efc8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0efc8     FF 18 02 F6 | 	mov	arg04, result3
0efcc     08 4E 85 F1 | 	sub	fp, #8
0efd0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0efd4     08 4E 05 51 |  if_ne	add	fp, #8
0efd8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0efdc     08 4E 85 51 |  if_ne	sub	fp, #8
0efe0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0efe4     7C 00 90 5D |  if_ne	jmp	#LR__1260
0efe8     14 4E 05 F1 | 	add	fp, #20
0efec     A7 1E 02 FB | 	rdlong	local01, fp
0eff0     14 4E 85 F1 | 	sub	fp, #20
0eff4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0eff8     14 4E 05 51 |  if_ne	add	fp, #20
0effc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f000     14 4E 85 51 |  if_ne	sub	fp, #20
0f004     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f008     58 00 90 5D |  if_ne	jmp	#LR__1260
0f00c     20 4E 05 F1 | 	add	fp, #32
0f010     A7 1E 02 FB | 	rdlong	local01, fp
0f014     20 4E 85 F1 | 	sub	fp, #32
0f018     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f01c     20 4E 05 51 |  if_ne	add	fp, #32
0f020     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f024     20 4E 85 51 |  if_ne	sub	fp, #32
0f028     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f02c     34 00 90 5D |  if_ne	jmp	#LR__1260
0f030     A7 12 02 FB | 	rdlong	arg01, fp
0f034     0C 4E 05 F1 | 	add	fp, #12
0f038     A7 14 02 FB | 	rdlong	arg02, fp
0f03c     0C 4E 05 F1 | 	add	fp, #12
0f040     A7 16 02 FB | 	rdlong	arg03, fp
0f044     18 4E 85 F1 | 	sub	fp, #24
0f048     2D 00 00 FF 
0f04c     EC E5 05 F1 | 	add	objptr, ##23532
0f050     F2 18 02 FB | 	rdlong	arg04, objptr
0f054     2D 00 00 FF 
0f058     EC E5 85 F1 | 	sub	objptr, ##23532
0f05c     C8 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f060                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f060     54 00 90 FD | 	jmp	#LR__1261
0f064                 | LR__1260
0f064     A7 12 02 F6 | 	mov	arg01, fp
0f068     20 ED BF FD | 	call	#_converttoint
0f06c     FD 1E 02 F6 | 	mov	local01, result1
0f070     0C 4E 05 F1 | 	add	fp, #12
0f074     A7 12 02 F6 | 	mov	arg01, fp
0f078     0C 4E 85 F1 | 	sub	fp, #12
0f07c     0C ED BF FD | 	call	#_converttoint
0f080     FD 20 02 F6 | 	mov	local02, result1
0f084     18 4E 05 F1 | 	add	fp, #24
0f088     A7 12 02 F6 | 	mov	arg01, fp
0f08c     18 4E 85 F1 | 	sub	fp, #24
0f090     F8 EC BF FD | 	call	#_converttoint
0f094     FD 16 02 F6 | 	mov	arg03, result1
0f098     2D 00 00 FF 
0f09c     EC E5 05 F1 | 	add	objptr, ##23532
0f0a0     F2 18 02 FB | 	rdlong	arg04, objptr
0f0a4     2D 00 00 FF 
0f0a8     EC E5 85 F1 | 	sub	objptr, ##23532
0f0ac     0F 13 02 F6 | 	mov	arg01, local01
0f0b0     10 15 02 F6 | 	mov	arg02, local02
0f0b4     70 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f0b8                 | LR__1261
0f0b8     A7 F0 03 F6 | 	mov	ptra, fp
0f0bc     B2 00 A0 FD | 	call	#popregs_
0f0c0                 | _do_fcircle_ret
0f0c0     2D 00 64 FD | 	ret
0f0c4                 | 
0f0c4                 | ' 
0f0c4                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f0c4                 | ' 
0f0c4                 | ' sub do_circle
0f0c4                 | _do_circle
0f0c4     02 4A 05 F6 | 	mov	COUNT_, #2
0f0c8     A8 00 A0 FD | 	call	#pushregs_
0f0cc     24 F0 07 F1 | 	add	ptra, #36
0f0d0     AC 95 BF FD | 	call	#_pop
0f0d4     FD 18 02 F6 | 	mov	arg04, result1
0f0d8     FE 16 02 F6 | 	mov	arg03, result2
0f0dc     FF 14 02 F6 | 	mov	arg02, result3
0f0e0     18 4E 05 F1 | 	add	fp, #24
0f0e4     A7 18 62 FC | 	wrlong	arg04, fp
0f0e8     04 4E 05 F1 | 	add	fp, #4
0f0ec     A7 16 62 FC | 	wrlong	arg03, fp
0f0f0     04 4E 05 F1 | 	add	fp, #4
0f0f4     A7 14 62 FC | 	wrlong	arg02, fp
0f0f8     20 4E 85 F1 | 	sub	fp, #32
0f0fc     80 95 BF FD | 	call	#_pop
0f100     FD 18 02 F6 | 	mov	arg04, result1
0f104     FE 16 02 F6 | 	mov	arg03, result2
0f108     FF 1E 02 F6 | 	mov	local01, result3
0f10c     0C 4E 05 F1 | 	add	fp, #12
0f110     A7 18 62 FC | 	wrlong	arg04, fp
0f114     04 4E 05 F1 | 	add	fp, #4
0f118     A7 16 62 FC | 	wrlong	arg03, fp
0f11c     04 4E 05 F1 | 	add	fp, #4
0f120     A7 1E 62 FC | 	wrlong	local01, fp
0f124     14 4E 85 F1 | 	sub	fp, #20
0f128     54 95 BF FD | 	call	#_pop
0f12c     A7 FA 61 FC | 	wrlong	result1, fp
0f130     04 4E 05 F1 | 	add	fp, #4
0f134     A7 FC 61 FC | 	wrlong	result2, fp
0f138     04 4E 05 F1 | 	add	fp, #4
0f13c     A7 FE 61 FC | 	wrlong	result3, fp
0f140                 | ' 
0f140                 | ' t3=pop()
0f140                 | ' t2=pop()
0f140                 | ' t1=pop()
0f140                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f140     FF 18 02 F6 | 	mov	arg04, result3
0f144     08 4E 85 F1 | 	sub	fp, #8
0f148     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f14c     08 4E 05 51 |  if_ne	add	fp, #8
0f150     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f154     08 4E 85 51 |  if_ne	sub	fp, #8
0f158     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f15c     7C 00 90 5D |  if_ne	jmp	#LR__1270
0f160     14 4E 05 F1 | 	add	fp, #20
0f164     A7 1E 02 FB | 	rdlong	local01, fp
0f168     14 4E 85 F1 | 	sub	fp, #20
0f16c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f170     14 4E 05 51 |  if_ne	add	fp, #20
0f174     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f178     14 4E 85 51 |  if_ne	sub	fp, #20
0f17c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f180     58 00 90 5D |  if_ne	jmp	#LR__1270
0f184     20 4E 05 F1 | 	add	fp, #32
0f188     A7 1E 02 FB | 	rdlong	local01, fp
0f18c     20 4E 85 F1 | 	sub	fp, #32
0f190     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f194     20 4E 05 51 |  if_ne	add	fp, #32
0f198     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f19c     20 4E 85 51 |  if_ne	sub	fp, #32
0f1a0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f1a4     34 00 90 5D |  if_ne	jmp	#LR__1270
0f1a8     A7 12 02 FB | 	rdlong	arg01, fp
0f1ac     0C 4E 05 F1 | 	add	fp, #12
0f1b0     A7 14 02 FB | 	rdlong	arg02, fp
0f1b4     0C 4E 05 F1 | 	add	fp, #12
0f1b8     A7 16 02 FB | 	rdlong	arg03, fp
0f1bc     18 4E 85 F1 | 	sub	fp, #24
0f1c0     2D 00 00 FF 
0f1c4     EC E5 05 F1 | 	add	objptr, ##23532
0f1c8     F2 18 02 FB | 	rdlong	arg04, objptr
0f1cc     2D 00 00 FF 
0f1d0     EC E5 85 F1 | 	sub	objptr, ##23532
0f1d4     5C 43 B0 FD | 	call	#_hg010b_spin2_circle
0f1d8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f1d8     54 00 90 FD | 	jmp	#LR__1271
0f1dc                 | LR__1270
0f1dc     A7 12 02 F6 | 	mov	arg01, fp
0f1e0     A8 EB BF FD | 	call	#_converttoint
0f1e4     FD 1E 02 F6 | 	mov	local01, result1
0f1e8     0C 4E 05 F1 | 	add	fp, #12
0f1ec     A7 12 02 F6 | 	mov	arg01, fp
0f1f0     0C 4E 85 F1 | 	sub	fp, #12
0f1f4     94 EB BF FD | 	call	#_converttoint
0f1f8     FD 20 02 F6 | 	mov	local02, result1
0f1fc     18 4E 05 F1 | 	add	fp, #24
0f200     A7 12 02 F6 | 	mov	arg01, fp
0f204     18 4E 85 F1 | 	sub	fp, #24
0f208     80 EB BF FD | 	call	#_converttoint
0f20c     FD 16 02 F6 | 	mov	arg03, result1
0f210     2D 00 00 FF 
0f214     EC E5 05 F1 | 	add	objptr, ##23532
0f218     F2 18 02 FB | 	rdlong	arg04, objptr
0f21c     2D 00 00 FF 
0f220     EC E5 85 F1 | 	sub	objptr, ##23532
0f224     0F 13 02 F6 | 	mov	arg01, local01
0f228     10 15 02 F6 | 	mov	arg02, local02
0f22c     04 43 B0 FD | 	call	#_hg010b_spin2_circle
0f230                 | LR__1271
0f230     A7 F0 03 F6 | 	mov	ptra, fp
0f234     B2 00 A0 FD | 	call	#popregs_
0f238                 | _do_circle_ret
0f238     2D 00 64 FD | 	ret
0f23c                 | 
0f23c                 | ' 
0f23c                 | ' ' -------------------------- Draw a rectangle
0f23c                 | ' 
0f23c                 | ' sub do_box
0f23c                 | _do_box
0f23c     03 4A 05 F6 | 	mov	COUNT_, #3
0f240     A8 00 A0 FD | 	call	#pushregs_
0f244     30 F0 07 F1 | 	add	ptra, #48
0f248     34 94 BF FD | 	call	#_pop
0f24c     FD 1A 02 F6 | 	mov	arg05, result1
0f250     FE 18 02 F6 | 	mov	arg04, result2
0f254     FF 16 02 F6 | 	mov	arg03, result3
0f258     24 4E 05 F1 | 	add	fp, #36
0f25c     A7 1A 62 FC | 	wrlong	arg05, fp
0f260     04 4E 05 F1 | 	add	fp, #4
0f264     A7 18 62 FC | 	wrlong	arg04, fp
0f268     04 4E 05 F1 | 	add	fp, #4
0f26c     A7 16 62 FC | 	wrlong	arg03, fp
0f270     2C 4E 85 F1 | 	sub	fp, #44
0f274     08 94 BF FD | 	call	#_pop
0f278     FD 1A 02 F6 | 	mov	arg05, result1
0f27c     FE 18 02 F6 | 	mov	arg04, result2
0f280     FF 16 02 F6 | 	mov	arg03, result3
0f284     18 4E 05 F1 | 	add	fp, #24
0f288     A7 1A 62 FC | 	wrlong	arg05, fp
0f28c     04 4E 05 F1 | 	add	fp, #4
0f290     A7 18 62 FC | 	wrlong	arg04, fp
0f294     04 4E 05 F1 | 	add	fp, #4
0f298     A7 16 62 FC | 	wrlong	arg03, fp
0f29c     20 4E 85 F1 | 	sub	fp, #32
0f2a0     DC 93 BF FD | 	call	#_pop
0f2a4     FD 1A 02 F6 | 	mov	arg05, result1
0f2a8     FE 18 02 F6 | 	mov	arg04, result2
0f2ac     FF 1E 02 F6 | 	mov	local01, result3
0f2b0     0C 4E 05 F1 | 	add	fp, #12
0f2b4     A7 1A 62 FC | 	wrlong	arg05, fp
0f2b8     04 4E 05 F1 | 	add	fp, #4
0f2bc     A7 18 62 FC | 	wrlong	arg04, fp
0f2c0     04 4E 05 F1 | 	add	fp, #4
0f2c4     A7 1E 62 FC | 	wrlong	local01, fp
0f2c8     14 4E 85 F1 | 	sub	fp, #20
0f2cc     B0 93 BF FD | 	call	#_pop
0f2d0     A7 FA 61 FC | 	wrlong	result1, fp
0f2d4     04 4E 05 F1 | 	add	fp, #4
0f2d8     A7 FC 61 FC | 	wrlong	result2, fp
0f2dc     04 4E 05 F1 | 	add	fp, #4
0f2e0     A7 FE 61 FC | 	wrlong	result3, fp
0f2e4                 | ' 
0f2e4                 | ' t4=pop()
0f2e4                 | ' t3=pop()
0f2e4                 | ' t2=pop()
0f2e4                 | ' t1=pop()
0f2e4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f2e4     FF 1A 02 F6 | 	mov	arg05, result3
0f2e8     08 4E 85 F1 | 	sub	fp, #8
0f2ec     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f2f0     08 4E 05 51 |  if_ne	add	fp, #8
0f2f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f2f8     08 4E 85 51 |  if_ne	sub	fp, #8
0f2fc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f300     A8 00 90 5D |  if_ne	jmp	#LR__1280
0f304     14 4E 05 F1 | 	add	fp, #20
0f308     A7 1E 02 FB | 	rdlong	local01, fp
0f30c     14 4E 85 F1 | 	sub	fp, #20
0f310     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f314     14 4E 05 51 |  if_ne	add	fp, #20
0f318     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f31c     14 4E 85 51 |  if_ne	sub	fp, #20
0f320     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f324     84 00 90 5D |  if_ne	jmp	#LR__1280
0f328     20 4E 05 F1 | 	add	fp, #32
0f32c     A7 1E 02 FB | 	rdlong	local01, fp
0f330     20 4E 85 F1 | 	sub	fp, #32
0f334     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f338     20 4E 05 51 |  if_ne	add	fp, #32
0f33c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f340     20 4E 85 51 |  if_ne	sub	fp, #32
0f344     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f348     60 00 90 5D |  if_ne	jmp	#LR__1280
0f34c     2C 4E 05 F1 | 	add	fp, #44
0f350     A7 1E 02 FB | 	rdlong	local01, fp
0f354     2C 4E 85 F1 | 	sub	fp, #44
0f358     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f35c     2C 4E 05 51 |  if_ne	add	fp, #44
0f360     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f364     2C 4E 85 51 |  if_ne	sub	fp, #44
0f368     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f36c     3C 00 90 5D |  if_ne	jmp	#LR__1280
0f370     A7 12 02 FB | 	rdlong	arg01, fp
0f374     0C 4E 05 F1 | 	add	fp, #12
0f378     A7 14 02 FB | 	rdlong	arg02, fp
0f37c     0C 4E 05 F1 | 	add	fp, #12
0f380     A7 16 02 FB | 	rdlong	arg03, fp
0f384     0C 4E 05 F1 | 	add	fp, #12
0f388     A7 18 02 FB | 	rdlong	arg04, fp
0f38c     24 4E 85 F1 | 	sub	fp, #36
0f390     2D 00 00 FF 
0f394     EC E5 05 F1 | 	add	objptr, ##23532
0f398     F2 1A 02 FB | 	rdlong	arg05, objptr
0f39c     2D 00 00 FF 
0f3a0     EC E5 85 F1 | 	sub	objptr, ##23532
0f3a4     58 43 B0 FD | 	call	#_hg010b_spin2_box
0f3a8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f3a8     6C 00 90 FD | 	jmp	#LR__1281
0f3ac                 | LR__1280
0f3ac     A7 12 02 F6 | 	mov	arg01, fp
0f3b0     D8 E9 BF FD | 	call	#_converttoint
0f3b4     FD 20 02 F6 | 	mov	local02, result1
0f3b8     0C 4E 05 F1 | 	add	fp, #12
0f3bc     A7 12 02 F6 | 	mov	arg01, fp
0f3c0     0C 4E 85 F1 | 	sub	fp, #12
0f3c4     C4 E9 BF FD | 	call	#_converttoint
0f3c8     FD 22 02 F6 | 	mov	local03, result1
0f3cc     18 4E 05 F1 | 	add	fp, #24
0f3d0     A7 12 02 F6 | 	mov	arg01, fp
0f3d4     18 4E 85 F1 | 	sub	fp, #24
0f3d8     B0 E9 BF FD | 	call	#_converttoint
0f3dc     FD 1E 02 F6 | 	mov	local01, result1
0f3e0     24 4E 05 F1 | 	add	fp, #36
0f3e4     A7 12 02 F6 | 	mov	arg01, fp
0f3e8     24 4E 85 F1 | 	sub	fp, #36
0f3ec     9C E9 BF FD | 	call	#_converttoint
0f3f0     FD 18 02 F6 | 	mov	arg04, result1
0f3f4     2D 00 00 FF 
0f3f8     EC E5 05 F1 | 	add	objptr, ##23532
0f3fc     F2 1A 02 FB | 	rdlong	arg05, objptr
0f400     2D 00 00 FF 
0f404     EC E5 85 F1 | 	sub	objptr, ##23532
0f408     10 13 02 F6 | 	mov	arg01, local02
0f40c     11 15 02 F6 | 	mov	arg02, local03
0f410     0F 17 02 F6 | 	mov	arg03, local01
0f414     E8 42 B0 FD | 	call	#_hg010b_spin2_box
0f418                 | LR__1281
0f418     A7 F0 03 F6 | 	mov	ptra, fp
0f41c     B2 00 A0 FD | 	call	#popregs_
0f420                 | _do_box_ret
0f420     2D 00 64 FD | 	ret
0f424                 | 
0f424                 | ' 
0f424                 | ' sub do_fill
0f424                 | _do_fill
0f424     03 4A 05 F6 | 	mov	COUNT_, #3
0f428     A8 00 A0 FD | 	call	#pushregs_
0f42c     30 F0 07 F1 | 	add	ptra, #48
0f430     4C 92 BF FD | 	call	#_pop
0f434     FD 18 02 F6 | 	mov	arg04, result1
0f438     FE 16 02 F6 | 	mov	arg03, result2
0f43c     FF 14 02 F6 | 	mov	arg02, result3
0f440     24 4E 05 F1 | 	add	fp, #36
0f444     A7 18 62 FC | 	wrlong	arg04, fp
0f448     04 4E 05 F1 | 	add	fp, #4
0f44c     A7 16 62 FC | 	wrlong	arg03, fp
0f450     04 4E 05 F1 | 	add	fp, #4
0f454     A7 14 62 FC | 	wrlong	arg02, fp
0f458     2C 4E 85 F1 | 	sub	fp, #44
0f45c     20 92 BF FD | 	call	#_pop
0f460     FD 18 02 F6 | 	mov	arg04, result1
0f464     FE 16 02 F6 | 	mov	arg03, result2
0f468     FF 14 02 F6 | 	mov	arg02, result3
0f46c     18 4E 05 F1 | 	add	fp, #24
0f470     A7 18 62 FC | 	wrlong	arg04, fp
0f474     04 4E 05 F1 | 	add	fp, #4
0f478     A7 16 62 FC | 	wrlong	arg03, fp
0f47c     04 4E 05 F1 | 	add	fp, #4
0f480     A7 14 62 FC | 	wrlong	arg02, fp
0f484     20 4E 85 F1 | 	sub	fp, #32
0f488     F4 91 BF FD | 	call	#_pop
0f48c     FD 18 02 F6 | 	mov	arg04, result1
0f490     FE 16 02 F6 | 	mov	arg03, result2
0f494     FF 1E 02 F6 | 	mov	local01, result3
0f498     0C 4E 05 F1 | 	add	fp, #12
0f49c     A7 18 62 FC | 	wrlong	arg04, fp
0f4a0     04 4E 05 F1 | 	add	fp, #4
0f4a4     A7 16 62 FC | 	wrlong	arg03, fp
0f4a8     04 4E 05 F1 | 	add	fp, #4
0f4ac     A7 1E 62 FC | 	wrlong	local01, fp
0f4b0     14 4E 85 F1 | 	sub	fp, #20
0f4b4     C8 91 BF FD | 	call	#_pop
0f4b8     A7 FA 61 FC | 	wrlong	result1, fp
0f4bc     04 4E 05 F1 | 	add	fp, #4
0f4c0     A7 FC 61 FC | 	wrlong	result2, fp
0f4c4     04 4E 05 F1 | 	add	fp, #4
0f4c8     A7 FE 61 FC | 	wrlong	result3, fp
0f4cc                 | ' 
0f4cc                 | ' t4=pop()
0f4cc                 | ' t3=pop()
0f4cc                 | ' t2=pop()
0f4cc                 | ' t1=pop()
0f4cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f4cc     FF 18 02 F6 | 	mov	arg04, result3
0f4d0     08 4E 85 F1 | 	sub	fp, #8
0f4d4     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f4d8     08 4E 05 51 |  if_ne	add	fp, #8
0f4dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f4e0     08 4E 85 51 |  if_ne	sub	fp, #8
0f4e4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f4e8     94 00 90 5D |  if_ne	jmp	#LR__1290
0f4ec     14 4E 05 F1 | 	add	fp, #20
0f4f0     A7 1E 02 FB | 	rdlong	local01, fp
0f4f4     14 4E 85 F1 | 	sub	fp, #20
0f4f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4fc     14 4E 05 51 |  if_ne	add	fp, #20
0f500     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f504     14 4E 85 51 |  if_ne	sub	fp, #20
0f508     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f50c     70 00 90 5D |  if_ne	jmp	#LR__1290
0f510     20 4E 05 F1 | 	add	fp, #32
0f514     A7 1E 02 FB | 	rdlong	local01, fp
0f518     20 4E 85 F1 | 	sub	fp, #32
0f51c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f520     20 4E 05 51 |  if_ne	add	fp, #32
0f524     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f528     20 4E 85 51 |  if_ne	sub	fp, #32
0f52c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f530     4C 00 90 5D |  if_ne	jmp	#LR__1290
0f534     2C 4E 05 F1 | 	add	fp, #44
0f538     A7 1E 02 FB | 	rdlong	local01, fp
0f53c     2C 4E 85 F1 | 	sub	fp, #44
0f540     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f544     2C 4E 05 51 |  if_ne	add	fp, #44
0f548     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f54c     2C 4E 85 51 |  if_ne	sub	fp, #44
0f550     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f554     28 00 90 5D |  if_ne	jmp	#LR__1290
0f558     A7 12 02 FB | 	rdlong	arg01, fp
0f55c     0C 4E 05 F1 | 	add	fp, #12
0f560     A7 14 02 FB | 	rdlong	arg02, fp
0f564     0C 4E 05 F1 | 	add	fp, #12
0f568     A7 16 02 FB | 	rdlong	arg03, fp
0f56c     0C 4E 05 F1 | 	add	fp, #12
0f570     A7 18 02 FB | 	rdlong	arg04, fp
0f574     24 4E 85 F1 | 	sub	fp, #36
0f578     0C 3C B0 FD | 	call	#_hg010b_spin2_fill
0f57c                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0f57c     58 00 90 FD | 	jmp	#LR__1291
0f580                 | LR__1290
0f580     A7 12 02 F6 | 	mov	arg01, fp
0f584     04 E8 BF FD | 	call	#_converttoint
0f588     FD 20 02 F6 | 	mov	local02, result1
0f58c     0C 4E 05 F1 | 	add	fp, #12
0f590     A7 12 02 F6 | 	mov	arg01, fp
0f594     0C 4E 85 F1 | 	sub	fp, #12
0f598     F0 E7 BF FD | 	call	#_converttoint
0f59c     FD 22 02 F6 | 	mov	local03, result1
0f5a0     18 4E 05 F1 | 	add	fp, #24
0f5a4     A7 12 02 F6 | 	mov	arg01, fp
0f5a8     18 4E 85 F1 | 	sub	fp, #24
0f5ac     DC E7 BF FD | 	call	#_converttoint
0f5b0     FD 1E 02 F6 | 	mov	local01, result1
0f5b4     24 4E 05 F1 | 	add	fp, #36
0f5b8     A7 12 02 F6 | 	mov	arg01, fp
0f5bc     24 4E 85 F1 | 	sub	fp, #36
0f5c0     C8 E7 BF FD | 	call	#_converttoint
0f5c4     FD 18 02 F6 | 	mov	arg04, result1
0f5c8     10 13 02 F6 | 	mov	arg01, local02
0f5cc     11 15 02 F6 | 	mov	arg02, local03
0f5d0     0F 17 02 F6 | 	mov	arg03, local01
0f5d4     B0 3B B0 FD | 	call	#_hg010b_spin2_fill
0f5d8                 | LR__1291
0f5d8     A7 F0 03 F6 | 	mov	ptra, fp
0f5dc     B2 00 A0 FD | 	call	#popregs_
0f5e0                 | _do_fill_ret
0f5e0     2D 00 64 FD | 	ret
0f5e4                 | 
0f5e4                 | ' 
0f5e4                 | ' ' -------------------------- Draw a frane
0f5e4                 | ' 
0f5e4                 | ' sub do_frame
0f5e4                 | _do_frame
0f5e4     03 4A 05 F6 | 	mov	COUNT_, #3
0f5e8     A8 00 A0 FD | 	call	#pushregs_
0f5ec     30 F0 07 F1 | 	add	ptra, #48
0f5f0     8C 90 BF FD | 	call	#_pop
0f5f4     FD 1A 02 F6 | 	mov	arg05, result1
0f5f8     FE 18 02 F6 | 	mov	arg04, result2
0f5fc     FF 16 02 F6 | 	mov	arg03, result3
0f600     24 4E 05 F1 | 	add	fp, #36
0f604     A7 1A 62 FC | 	wrlong	arg05, fp
0f608     04 4E 05 F1 | 	add	fp, #4
0f60c     A7 18 62 FC | 	wrlong	arg04, fp
0f610     04 4E 05 F1 | 	add	fp, #4
0f614     A7 16 62 FC | 	wrlong	arg03, fp
0f618     2C 4E 85 F1 | 	sub	fp, #44
0f61c     60 90 BF FD | 	call	#_pop
0f620     FD 1A 02 F6 | 	mov	arg05, result1
0f624     FE 18 02 F6 | 	mov	arg04, result2
0f628     FF 16 02 F6 | 	mov	arg03, result3
0f62c     18 4E 05 F1 | 	add	fp, #24
0f630     A7 1A 62 FC | 	wrlong	arg05, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 18 62 FC | 	wrlong	arg04, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 16 62 FC | 	wrlong	arg03, fp
0f644     20 4E 85 F1 | 	sub	fp, #32
0f648     34 90 BF FD | 	call	#_pop
0f64c     FD 1A 02 F6 | 	mov	arg05, result1
0f650     FE 18 02 F6 | 	mov	arg04, result2
0f654     FF 1E 02 F6 | 	mov	local01, result3
0f658     0C 4E 05 F1 | 	add	fp, #12
0f65c     A7 1A 62 FC | 	wrlong	arg05, fp
0f660     04 4E 05 F1 | 	add	fp, #4
0f664     A7 18 62 FC | 	wrlong	arg04, fp
0f668     04 4E 05 F1 | 	add	fp, #4
0f66c     A7 1E 62 FC | 	wrlong	local01, fp
0f670     14 4E 85 F1 | 	sub	fp, #20
0f674     08 90 BF FD | 	call	#_pop
0f678     A7 FA 61 FC | 	wrlong	result1, fp
0f67c     04 4E 05 F1 | 	add	fp, #4
0f680     A7 FC 61 FC | 	wrlong	result2, fp
0f684     04 4E 05 F1 | 	add	fp, #4
0f688     A7 FE 61 FC | 	wrlong	result3, fp
0f68c                 | ' 
0f68c                 | ' t4=pop()
0f68c                 | ' t3=pop()
0f68c                 | ' t2=pop()
0f68c                 | ' t1=pop()
0f68c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f68c     FF 1A 02 F6 | 	mov	arg05, result3
0f690     08 4E 85 F1 | 	sub	fp, #8
0f694     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f698     08 4E 05 51 |  if_ne	add	fp, #8
0f69c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f6a0     08 4E 85 51 |  if_ne	sub	fp, #8
0f6a4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f6a8     A8 00 90 5D |  if_ne	jmp	#LR__1300
0f6ac     14 4E 05 F1 | 	add	fp, #20
0f6b0     A7 1E 02 FB | 	rdlong	local01, fp
0f6b4     14 4E 85 F1 | 	sub	fp, #20
0f6b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6bc     14 4E 05 51 |  if_ne	add	fp, #20
0f6c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f6c4     14 4E 85 51 |  if_ne	sub	fp, #20
0f6c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f6cc     84 00 90 5D |  if_ne	jmp	#LR__1300
0f6d0     20 4E 05 F1 | 	add	fp, #32
0f6d4     A7 1E 02 FB | 	rdlong	local01, fp
0f6d8     20 4E 85 F1 | 	sub	fp, #32
0f6dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6e0     20 4E 05 51 |  if_ne	add	fp, #32
0f6e4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f6e8     20 4E 85 51 |  if_ne	sub	fp, #32
0f6ec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f6f0     60 00 90 5D |  if_ne	jmp	#LR__1300
0f6f4     2C 4E 05 F1 | 	add	fp, #44
0f6f8     A7 1E 02 FB | 	rdlong	local01, fp
0f6fc     2C 4E 85 F1 | 	sub	fp, #44
0f700     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f704     2C 4E 05 51 |  if_ne	add	fp, #44
0f708     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f70c     2C 4E 85 51 |  if_ne	sub	fp, #44
0f710     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f714     3C 00 90 5D |  if_ne	jmp	#LR__1300
0f718     A7 12 02 FB | 	rdlong	arg01, fp
0f71c     0C 4E 05 F1 | 	add	fp, #12
0f720     A7 14 02 FB | 	rdlong	arg02, fp
0f724     0C 4E 05 F1 | 	add	fp, #12
0f728     A7 16 02 FB | 	rdlong	arg03, fp
0f72c     0C 4E 05 F1 | 	add	fp, #12
0f730     A7 18 02 FB | 	rdlong	arg04, fp
0f734     24 4E 85 F1 | 	sub	fp, #36
0f738     2D 00 00 FF 
0f73c     EC E5 05 F1 | 	add	objptr, ##23532
0f740     F2 1A 02 FB | 	rdlong	arg05, objptr
0f744     2D 00 00 FF 
0f748     EC E5 85 F1 | 	sub	objptr, ##23532
0f74c     30 3F B0 FD | 	call	#_hg010b_spin2_frame
0f750                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f750     6C 00 90 FD | 	jmp	#LR__1301
0f754                 | LR__1300
0f754     A7 12 02 F6 | 	mov	arg01, fp
0f758     30 E6 BF FD | 	call	#_converttoint
0f75c     FD 20 02 F6 | 	mov	local02, result1
0f760     0C 4E 05 F1 | 	add	fp, #12
0f764     A7 12 02 F6 | 	mov	arg01, fp
0f768     0C 4E 85 F1 | 	sub	fp, #12
0f76c     1C E6 BF FD | 	call	#_converttoint
0f770     FD 22 02 F6 | 	mov	local03, result1
0f774     18 4E 05 F1 | 	add	fp, #24
0f778     A7 12 02 F6 | 	mov	arg01, fp
0f77c     18 4E 85 F1 | 	sub	fp, #24
0f780     08 E6 BF FD | 	call	#_converttoint
0f784     FD 1E 02 F6 | 	mov	local01, result1
0f788     24 4E 05 F1 | 	add	fp, #36
0f78c     A7 12 02 F6 | 	mov	arg01, fp
0f790     24 4E 85 F1 | 	sub	fp, #36
0f794     F4 E5 BF FD | 	call	#_converttoint
0f798     FD 18 02 F6 | 	mov	arg04, result1
0f79c     2D 00 00 FF 
0f7a0     EC E5 05 F1 | 	add	objptr, ##23532
0f7a4     F2 1A 02 FB | 	rdlong	arg05, objptr
0f7a8     2D 00 00 FF 
0f7ac     EC E5 85 F1 | 	sub	objptr, ##23532
0f7b0     10 13 02 F6 | 	mov	arg01, local02
0f7b4     11 15 02 F6 | 	mov	arg02, local03
0f7b8     0F 17 02 F6 | 	mov	arg03, local01
0f7bc     C0 3E B0 FD | 	call	#_hg010b_spin2_frame
0f7c0                 | LR__1301
0f7c0     A7 F0 03 F6 | 	mov	ptra, fp
0f7c4     B2 00 A0 FD | 	call	#popregs_
0f7c8                 | _do_frame_ret
0f7c8     2D 00 64 FD | 	ret
0f7cc                 | 
0f7cc                 | ' 
0f7cc                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0f7cc                 | ' 
0f7cc                 | ' ' ------------------------- Print to the screem
0f7cc                 | ' 
0f7cc                 | ' sub do_print  
0f7cc                 | _do_print
0f7cc     0A 4A 05 F6 | 	mov	COUNT_, #10
0f7d0     A8 00 A0 FD | 	call	#pushregs_
0f7d4     00 24 06 F6 | 	mov	local04, #0
0f7d8     A4 8E BF FD | 	call	#_pop
0f7dc     FD 26 02 F6 | 	mov	local05, result1
0f7e0     FE 28 02 F6 | 	mov	local06, result2
0f7e4     FF 2A 02 F6 | 	mov	local07, result3
0f7e8     13 1F 02 F6 | 	mov	local01, local05
0f7ec     14 21 02 F6 | 	mov	local02, local06
0f7f0     15 23 02 F6 | 	mov	local03, local07
0f7f4                 | '  
0f7f4                 | ' r=0
0f7f4                 | ' t1=pop() 
0f7f4                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0f7f4     21 22 0E F2 | 	cmp	local03, #33 wz
0f7f8     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0f7fc     20 00 90 5D |  if_ne	jmp	#LR__1310
0f800     11 25 02 F6 | 	mov	local04, local03
0f804     78 8E BF FD | 	call	#_pop
0f808     FD 26 02 F6 | 	mov	local05, result1
0f80c     FE 28 02 F6 | 	mov	local06, result2
0f810     FF 2A 02 F6 | 	mov	local07, result3
0f814     13 1F 02 F6 | 	mov	local01, local05
0f818     14 21 02 F6 | 	mov	local02, local06
0f81c     15 23 02 F6 | 	mov	local03, local07
0f820                 | LR__1310
0f820                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0f820     20 22 0E F2 | 	cmp	local03, #32 wz
0f824     11 25 02 A6 |  if_e	mov	local04, local03
0f828                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0f828     FF 22 0E F2 | 	cmp	local03, #255 wz
0f82c     0C 00 90 5D |  if_ne	jmp	#LR__1311
0f830     0F 13 02 F6 | 	mov	arg01, local01
0f834     14 1F B0 FD | 	call	#_printerror
0f838     30 04 90 FD | 	jmp	#LR__1328
0f83c                 | LR__1311
0f83c                 | ' 
0f83c                 | ' if r=print_mod_comma  then
0f83c     21 24 0E F2 | 	cmp	local04, #33 wz
0f840     AC 01 90 5D |  if_ne	jmp	#LR__1316
0f844                 | '   if t1.result_type=result_int then print t1.result.iresult,
0f844     1C 22 0E F2 | 	cmp	local03, #28 wz
0f848     64 00 90 5D |  if_ne	jmp	#LR__1312
0f84c     00 12 06 F6 | 	mov	arg01, #0
0f850     A0 A9 B0 FD | 	call	#__system___getiolock_0349
0f854     FD 12 02 F6 | 	mov	arg01, result1
0f858     E4 53 B0 FD | 	call	#__system___lockmem
0f85c     00 28 06 F6 | 	mov	local06, #0
0f860     00 12 06 F6 | 	mov	arg01, #0
0f864     0F 15 02 F6 | 	mov	arg02, local01
0f868     00 16 06 F6 | 	mov	arg03, #0
0f86c     0A 18 06 F6 | 	mov	arg04, #10
0f870     04 61 B0 FD | 	call	#__system___basic_print_integer
0f874     FD 2A 02 F6 | 	mov	local07, result1
0f878     14 27 02 F6 | 	mov	local05, local06
0f87c     15 27 02 F1 | 	add	local05, local07
0f880     00 2C 06 F6 | 	mov	local08, #0
0f884     00 12 06 F6 | 	mov	arg01, #0
0f888     09 14 06 F6 | 	mov	arg02, #9
0f88c     00 16 06 F6 | 	mov	arg03, #0
0f890     48 60 B0 FD | 	call	#__system___basic_print_char
0f894     FD 2E 02 F6 | 	mov	local09, result1
0f898     FD 26 02 F1 | 	add	local05, result1
0f89c     00 12 06 F6 | 	mov	arg01, #0
0f8a0     50 A9 B0 FD | 	call	#__system___getiolock_0349
0f8a4     FD 00 68 FC | 	wrlong	#0, result1
0f8a8     00 FA 05 F6 | 	mov	result1, #0
0f8ac     00 30 06 F6 | 	mov	local10, #0
0f8b0                 | LR__1312
0f8b0                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0f8b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0f8b4     64 00 90 5D |  if_ne	jmp	#LR__1313
0f8b8     00 12 06 F6 | 	mov	arg01, #0
0f8bc     34 A9 B0 FD | 	call	#__system___getiolock_0349
0f8c0     FD 12 02 F6 | 	mov	arg01, result1
0f8c4     78 53 B0 FD | 	call	#__system___lockmem
0f8c8     00 28 06 F6 | 	mov	local06, #0
0f8cc     00 12 06 F6 | 	mov	arg01, #0
0f8d0     0F 15 02 F6 | 	mov	arg02, local01
0f8d4     00 16 06 F6 | 	mov	arg03, #0
0f8d8     0A 18 06 F6 | 	mov	arg04, #10
0f8dc     D8 60 B0 FD | 	call	#__system___basic_print_unsigned
0f8e0     FD 2A 02 F6 | 	mov	local07, result1
0f8e4     14 27 02 F6 | 	mov	local05, local06
0f8e8     15 27 02 F1 | 	add	local05, local07
0f8ec     00 2C 06 F6 | 	mov	local08, #0
0f8f0     00 12 06 F6 | 	mov	arg01, #0
0f8f4     09 14 06 F6 | 	mov	arg02, #9
0f8f8     00 16 06 F6 | 	mov	arg03, #0
0f8fc     DC 5F B0 FD | 	call	#__system___basic_print_char
0f900     FD 2E 02 F6 | 	mov	local09, result1
0f904     FD 26 02 F1 | 	add	local05, result1
0f908     00 12 06 F6 | 	mov	arg01, #0
0f90c     E4 A8 B0 FD | 	call	#__system___getiolock_0349
0f910     FD 00 68 FC | 	wrlong	#0, result1
0f914     00 FA 05 F6 | 	mov	result1, #0
0f918     00 30 06 F6 | 	mov	local10, #0
0f91c                 | LR__1313
0f91c                 | '   if t1.result_type=result_float then print t1.result.fresult,
0f91c     1E 22 0E F2 | 	cmp	local03, #30 wz
0f920     64 00 90 5D |  if_ne	jmp	#LR__1314
0f924     00 12 06 F6 | 	mov	arg01, #0
0f928     C8 A8 B0 FD | 	call	#__system___getiolock_0349
0f92c     FD 12 02 F6 | 	mov	arg01, result1
0f930     0C 53 B0 FD | 	call	#__system___lockmem
0f934     00 28 06 F6 | 	mov	local06, #0
0f938     00 12 06 F6 | 	mov	arg01, #0
0f93c     0F 15 02 F6 | 	mov	arg02, local01
0f940     00 16 06 F6 | 	mov	arg03, #0
0f944     23 18 06 F6 | 	mov	arg04, #35
0f948     20 83 B0 FD | 	call	#__system___basic_print_float
0f94c     FD 2A 02 F6 | 	mov	local07, result1
0f950     14 27 02 F6 | 	mov	local05, local06
0f954     15 27 02 F1 | 	add	local05, local07
0f958     00 2C 06 F6 | 	mov	local08, #0
0f95c     00 12 06 F6 | 	mov	arg01, #0
0f960     09 14 06 F6 | 	mov	arg02, #9
0f964     00 16 06 F6 | 	mov	arg03, #0
0f968     70 5F B0 FD | 	call	#__system___basic_print_char
0f96c     FD 2E 02 F6 | 	mov	local09, result1
0f970     FD 26 02 F1 | 	add	local05, result1
0f974     00 12 06 F6 | 	mov	arg01, #0
0f978     78 A8 B0 FD | 	call	#__system___getiolock_0349
0f97c     FD 00 68 FC | 	wrlong	#0, result1
0f980     00 FA 05 F6 | 	mov	result1, #0
0f984     00 30 06 F6 | 	mov	local10, #0
0f988                 | LR__1314
0f988                 | '   if t1.result_type=result_string then print t1.result.sresult,
0f988     1F 22 0E F2 | 	cmp	local03, #31 wz
0f98c     60 00 90 5D |  if_ne	jmp	#LR__1315
0f990     00 12 06 F6 | 	mov	arg01, #0
0f994     5C A8 B0 FD | 	call	#__system___getiolock_0349
0f998     FD 12 02 F6 | 	mov	arg01, result1
0f99c     A0 52 B0 FD | 	call	#__system___lockmem
0f9a0     00 28 06 F6 | 	mov	local06, #0
0f9a4     00 12 06 F6 | 	mov	arg01, #0
0f9a8     0F 15 02 F6 | 	mov	arg02, local01
0f9ac     00 16 06 F6 | 	mov	arg03, #0
0f9b0     80 5F B0 FD | 	call	#__system___basic_print_string
0f9b4     FD 2A 02 F6 | 	mov	local07, result1
0f9b8     14 27 02 F6 | 	mov	local05, local06
0f9bc     15 27 02 F1 | 	add	local05, local07
0f9c0     00 2C 06 F6 | 	mov	local08, #0
0f9c4     00 12 06 F6 | 	mov	arg01, #0
0f9c8     09 14 06 F6 | 	mov	arg02, #9
0f9cc     00 16 06 F6 | 	mov	arg03, #0
0f9d0     08 5F B0 FD | 	call	#__system___basic_print_char
0f9d4     FD 2E 02 F6 | 	mov	local09, result1
0f9d8     FD 26 02 F1 | 	add	local05, result1
0f9dc     00 12 06 F6 | 	mov	arg01, #0
0f9e0     10 A8 B0 FD | 	call	#__system___getiolock_0349
0f9e4     FD 00 68 FC | 	wrlong	#0, result1
0f9e8     00 FA 05 F6 | 	mov	result1, #0
0f9ec     00 30 06 F6 | 	mov	local10, #0
0f9f0                 | LR__1315
0f9f0                 | LR__1316
0f9f0                 | ' if r=print_mod_semicolon then 
0f9f0     22 24 0E F2 | 	cmp	local04, #34 wz
0f9f4     1C 01 90 5D |  if_ne	jmp	#LR__1321
0f9f8                 | '   if t1.result_type=result_int then print t1.result.iresult;
0f9f8     1C 22 0E F2 | 	cmp	local03, #28 wz
0f9fc     50 00 90 5D |  if_ne	jmp	#LR__1317
0fa00     00 12 06 F6 | 	mov	arg01, #0
0fa04     EC A7 B0 FD | 	call	#__system___getiolock_0349
0fa08     FD 12 02 F6 | 	mov	arg01, result1
0fa0c     30 52 B0 FD | 	call	#__system___lockmem
0fa10     00 28 06 F6 | 	mov	local06, #0
0fa14     00 30 06 F6 | 	mov	local10, #0
0fa18     0A 2C 06 F6 | 	mov	local08, #10
0fa1c     00 12 06 F6 | 	mov	arg01, #0
0fa20     0F 15 02 F6 | 	mov	arg02, local01
0fa24     00 16 06 F6 | 	mov	arg03, #0
0fa28     0A 18 06 F6 | 	mov	arg04, #10
0fa2c     48 5F B0 FD | 	call	#__system___basic_print_integer
0fa30     FD 2A 02 F6 | 	mov	local07, result1
0fa34     14 27 02 F6 | 	mov	local05, local06
0fa38     15 27 02 F1 | 	add	local05, local07
0fa3c     00 12 06 F6 | 	mov	arg01, #0
0fa40     B0 A7 B0 FD | 	call	#__system___getiolock_0349
0fa44     FD 00 68 FC | 	wrlong	#0, result1
0fa48     00 FA 05 F6 | 	mov	result1, #0
0fa4c     00 2E 06 F6 | 	mov	local09, #0
0fa50                 | LR__1317
0fa50                 | '   if t1.result_type=result_uint then print t1.result.uresult;
0fa50     1D 22 0E F2 | 	cmp	local03, #29 wz
0fa54     50 00 90 5D |  if_ne	jmp	#LR__1318
0fa58     00 12 06 F6 | 	mov	arg01, #0
0fa5c     94 A7 B0 FD | 	call	#__system___getiolock_0349
0fa60     FD 12 02 F6 | 	mov	arg01, result1
0fa64     D8 51 B0 FD | 	call	#__system___lockmem
0fa68     00 28 06 F6 | 	mov	local06, #0
0fa6c     00 30 06 F6 | 	mov	local10, #0
0fa70     0A 2C 06 F6 | 	mov	local08, #10
0fa74     00 12 06 F6 | 	mov	arg01, #0
0fa78     0F 15 02 F6 | 	mov	arg02, local01
0fa7c     00 16 06 F6 | 	mov	arg03, #0
0fa80     0A 18 06 F6 | 	mov	arg04, #10
0fa84     30 5F B0 FD | 	call	#__system___basic_print_unsigned
0fa88     FD 2A 02 F6 | 	mov	local07, result1
0fa8c     14 27 02 F6 | 	mov	local05, local06
0fa90     15 27 02 F1 | 	add	local05, local07
0fa94     00 12 06 F6 | 	mov	arg01, #0
0fa98     58 A7 B0 FD | 	call	#__system___getiolock_0349
0fa9c     FD 00 68 FC | 	wrlong	#0, result1
0faa0     00 FA 05 F6 | 	mov	result1, #0
0faa4     00 2E 06 F6 | 	mov	local09, #0
0faa8                 | LR__1318
0faa8                 | '   if t1.result_type=result_float then print t1.result.fresult;
0faa8     1E 22 0E F2 | 	cmp	local03, #30 wz
0faac     30 00 90 5D |  if_ne	jmp	#LR__1319
0fab0     00 12 06 F6 | 	mov	arg01, #0
0fab4     3C A7 B0 FD | 	call	#__system___getiolock_0349
0fab8     FD 12 02 F6 | 	mov	arg01, result1
0fabc     80 51 B0 FD | 	call	#__system___lockmem
0fac0     00 12 06 F6 | 	mov	arg01, #0
0fac4     0F 15 02 F6 | 	mov	arg02, local01
0fac8     00 16 06 F6 | 	mov	arg03, #0
0facc     23 18 06 F6 | 	mov	arg04, #35
0fad0     98 81 B0 FD | 	call	#__system___basic_print_float
0fad4     00 12 06 F6 | 	mov	arg01, #0
0fad8     18 A7 B0 FD | 	call	#__system___getiolock_0349
0fadc     FD 00 68 FC | 	wrlong	#0, result1
0fae0                 | LR__1319
0fae0                 | '   if t1.result_type=result_string then print t1.result.sresult;
0fae0     1F 22 0E F2 | 	cmp	local03, #31 wz
0fae4     2C 00 90 5D |  if_ne	jmp	#LR__1320
0fae8     00 12 06 F6 | 	mov	arg01, #0
0faec     04 A7 B0 FD | 	call	#__system___getiolock_0349
0faf0     FD 12 02 F6 | 	mov	arg01, result1
0faf4     48 51 B0 FD | 	call	#__system___lockmem
0faf8     00 12 06 F6 | 	mov	arg01, #0
0fafc     0F 15 02 F6 | 	mov	arg02, local01
0fb00     00 16 06 F6 | 	mov	arg03, #0
0fb04     2C 5E B0 FD | 	call	#__system___basic_print_string
0fb08     00 12 06 F6 | 	mov	arg01, #0
0fb0c     E4 A6 B0 FD | 	call	#__system___getiolock_0349
0fb10     FD 00 68 FC | 	wrlong	#0, result1
0fb14                 | LR__1320
0fb14                 | LR__1321
0fb14                 | ' if r=0 then 
0fb14     00 24 0E F2 | 	cmp	local04, #0 wz
0fb18     1C 01 90 5D |  if_ne	jmp	#LR__1326
0fb1c                 | '   if t1.result_type=result_int then print t1.result.iresult
0fb1c     1C 22 0E F2 | 	cmp	local03, #28 wz
0fb20     40 00 90 5D |  if_ne	jmp	#LR__1322
0fb24     00 12 06 F6 | 	mov	arg01, #0
0fb28     C8 A6 B0 FD | 	call	#__system___getiolock_0349
0fb2c     FD 12 02 F6 | 	mov	arg01, result1
0fb30     0C 51 B0 FD | 	call	#__system___lockmem
0fb34     00 12 06 F6 | 	mov	arg01, #0
0fb38     0F 15 02 F6 | 	mov	arg02, local01
0fb3c     00 16 06 F6 | 	mov	arg03, #0
0fb40     0A 18 06 F6 | 	mov	arg04, #10
0fb44     30 5E B0 FD | 	call	#__system___basic_print_integer
0fb48     00 12 06 F6 | 	mov	arg01, #0
0fb4c     0A 14 06 F6 | 	mov	arg02, #10
0fb50     00 16 06 F6 | 	mov	arg03, #0
0fb54     84 5D B0 FD | 	call	#__system___basic_print_char
0fb58     00 12 06 F6 | 	mov	arg01, #0
0fb5c     94 A6 B0 FD | 	call	#__system___getiolock_0349
0fb60     FD 00 68 FC | 	wrlong	#0, result1
0fb64                 | LR__1322
0fb64                 | '   if t1.result_type=result_uint then print t1.result.uresult
0fb64     1D 22 0E F2 | 	cmp	local03, #29 wz
0fb68     40 00 90 5D |  if_ne	jmp	#LR__1323
0fb6c     00 12 06 F6 | 	mov	arg01, #0
0fb70     80 A6 B0 FD | 	call	#__system___getiolock_0349
0fb74     FD 12 02 F6 | 	mov	arg01, result1
0fb78     C4 50 B0 FD | 	call	#__system___lockmem
0fb7c     00 12 06 F6 | 	mov	arg01, #0
0fb80     0F 15 02 F6 | 	mov	arg02, local01
0fb84     00 16 06 F6 | 	mov	arg03, #0
0fb88     0A 18 06 F6 | 	mov	arg04, #10
0fb8c     28 5E B0 FD | 	call	#__system___basic_print_unsigned
0fb90     00 12 06 F6 | 	mov	arg01, #0
0fb94     0A 14 06 F6 | 	mov	arg02, #10
0fb98     00 16 06 F6 | 	mov	arg03, #0
0fb9c     3C 5D B0 FD | 	call	#__system___basic_print_char
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     4C A6 B0 FD | 	call	#__system___getiolock_0349
0fba8     FD 00 68 FC | 	wrlong	#0, result1
0fbac                 | LR__1323
0fbac                 | '   if t1.result_type=result_float then print t1.result.fresult
0fbac     1E 22 0E F2 | 	cmp	local03, #30 wz
0fbb0     40 00 90 5D |  if_ne	jmp	#LR__1324
0fbb4     00 12 06 F6 | 	mov	arg01, #0
0fbb8     38 A6 B0 FD | 	call	#__system___getiolock_0349
0fbbc     FD 12 02 F6 | 	mov	arg01, result1
0fbc0     7C 50 B0 FD | 	call	#__system___lockmem
0fbc4     00 12 06 F6 | 	mov	arg01, #0
0fbc8     0F 15 02 F6 | 	mov	arg02, local01
0fbcc     00 16 06 F6 | 	mov	arg03, #0
0fbd0     23 18 06 F6 | 	mov	arg04, #35
0fbd4     94 80 B0 FD | 	call	#__system___basic_print_float
0fbd8     00 12 06 F6 | 	mov	arg01, #0
0fbdc     0A 14 06 F6 | 	mov	arg02, #10
0fbe0     00 16 06 F6 | 	mov	arg03, #0
0fbe4     F4 5C B0 FD | 	call	#__system___basic_print_char
0fbe8     00 12 06 F6 | 	mov	arg01, #0
0fbec     04 A6 B0 FD | 	call	#__system___getiolock_0349
0fbf0     FD 00 68 FC | 	wrlong	#0, result1
0fbf4                 | LR__1324
0fbf4                 | '   if t1.result_type=result_string then print t1.result.sresult
0fbf4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fbf8     3C 00 90 5D |  if_ne	jmp	#LR__1325
0fbfc     00 12 06 F6 | 	mov	arg01, #0
0fc00     F0 A5 B0 FD | 	call	#__system___getiolock_0349
0fc04     FD 12 02 F6 | 	mov	arg01, result1
0fc08     34 50 B0 FD | 	call	#__system___lockmem
0fc0c     00 12 06 F6 | 	mov	arg01, #0
0fc10     0F 15 02 F6 | 	mov	arg02, local01
0fc14     00 16 06 F6 | 	mov	arg03, #0
0fc18     18 5D B0 FD | 	call	#__system___basic_print_string
0fc1c     00 12 06 F6 | 	mov	arg01, #0
0fc20     0A 14 06 F6 | 	mov	arg02, #10
0fc24     00 16 06 F6 | 	mov	arg03, #0
0fc28     B0 5C B0 FD | 	call	#__system___basic_print_char
0fc2c     00 12 06 F6 | 	mov	arg01, #0
0fc30     C0 A5 B0 FD | 	call	#__system___getiolock_0349
0fc34     FD 00 68 FC | 	wrlong	#0, result1
0fc38                 | LR__1325
0fc38                 | LR__1326
0fc38                 | ' if r=print_mod_empty then print
0fc38     20 24 0E F2 | 	cmp	local04, #32 wz
0fc3c     2C 00 90 5D |  if_ne	jmp	#LR__1327
0fc40     00 12 06 F6 | 	mov	arg01, #0
0fc44     AC A5 B0 FD | 	call	#__system___getiolock_0349
0fc48     FD 12 02 F6 | 	mov	arg01, result1
0fc4c     F0 4F B0 FD | 	call	#__system___lockmem
0fc50     00 12 06 F6 | 	mov	arg01, #0
0fc54     0A 14 06 F6 | 	mov	arg02, #10
0fc58     00 16 06 F6 | 	mov	arg03, #0
0fc5c     7C 5C B0 FD | 	call	#__system___basic_print_char
0fc60     00 12 06 F6 | 	mov	arg01, #0
0fc64     8C A5 B0 FD | 	call	#__system___getiolock_0349
0fc68     FD 00 68 FC | 	wrlong	#0, result1
0fc6c                 | LR__1327
0fc6c                 | LR__1328
0fc6c     A7 F0 03 F6 | 	mov	ptra, fp
0fc70     B2 00 A0 FD | 	call	#popregs_
0fc74                 | _do_print_ret
0fc74     2D 00 64 FD | 	ret
0fc78                 | 
0fc78                 | ' 
0fc78                 | ' 
0fc78                 | ' sub do_paper
0fc78                 | _do_paper
0fc78     03 4A 05 F6 | 	mov	COUNT_, #3
0fc7c     A8 00 A0 FD | 	call	#pushregs_
0fc80     FC 89 BF FD | 	call	#_pop
0fc84     FD 1E 02 F6 | 	mov	local01, result1
0fc88     FE 20 02 F6 | 	mov	local02, result2
0fc8c     FF 22 02 F6 | 	mov	local03, result3
0fc90                 | ' t1=pop() 
0fc90                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0fc90     1E 22 0E F2 | 	cmp	local03, #30 wz
0fc94     10 00 90 5D |  if_ne	jmp	#LR__1330
0fc98     0F 13 02 F6 | 	mov	arg01, local01
0fc9c     00 14 06 F6 | 	mov	arg02, #0
0fca0     78 7E B0 FD | 	call	#__system___float_tointeger
0fca4     FD 1E 02 F6 | 	mov	local01, result1
0fca8                 | LR__1330
0fca8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0fca8     1F 22 0E F2 | 	cmp	local03, #31 wz
0fcac     18 00 90 5D |  if_ne	jmp	#LR__1331
0fcb0     0F 13 02 F6 | 	mov	arg01, local01
0fcb4     84 81 B0 FD | 	call	#__system____builtin_atof
0fcb8     FD 12 02 F6 | 	mov	arg01, result1
0fcbc     00 14 06 F6 | 	mov	arg02, #0
0fcc0     58 7E B0 FD | 	call	#__system___float_tointeger
0fcc4     FD 1E 02 F6 | 	mov	local01, result1
0fcc8                 | LR__1331
0fcc8     2D 00 00 FF 
0fccc     FC E5 05 F1 | 	add	objptr, ##23548
0fcd0     F2 1E 62 FC | 	wrlong	local01, objptr
0fcd4     04 E4 05 F1 | 	add	objptr, #4
0fcd8     F2 12 02 FB | 	rdlong	arg01, objptr
0fcdc                 | ' 
0fcdc                 | ' write_color:=ff
0fcdc     2D 00 00 FF 
0fce0     C3 E5 85 F1 | 	sub	objptr, ##23491
0fce4     F2 12 62 FC | 	wrlong	arg01, objptr
0fce8                 | ' write_background:=bb
0fce8     04 E4 05 F1 | 	add	objptr, #4
0fcec     F2 1E 62 FC | 	wrlong	local01, objptr
0fcf0     41 E4 85 F1 | 	sub	objptr, #65
0fcf4     A7 F0 03 F6 | 	mov	ptra, fp
0fcf8     B2 00 A0 FD | 	call	#popregs_
0fcfc                 | _do_paper_ret
0fcfc     2D 00 64 FD | 	ret
0fd00                 | 
0fd00                 | ' 
0fd00                 | ' sub do_ink
0fd00                 | _do_ink
0fd00     03 4A 05 F6 | 	mov	COUNT_, #3
0fd04     A8 00 A0 FD | 	call	#pushregs_
0fd08     74 89 BF FD | 	call	#_pop
0fd0c     FD 1E 02 F6 | 	mov	local01, result1
0fd10     FE 20 02 F6 | 	mov	local02, result2
0fd14     FF 22 02 F6 | 	mov	local03, result3
0fd18                 | ' t1=pop() 
0fd18                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0fd18     1E 22 0E F2 | 	cmp	local03, #30 wz
0fd1c     10 00 90 5D |  if_ne	jmp	#LR__1340
0fd20     0F 13 02 F6 | 	mov	arg01, local01
0fd24     00 14 06 F6 | 	mov	arg02, #0
0fd28     F0 7D B0 FD | 	call	#__system___float_tointeger
0fd2c     FD 1E 02 F6 | 	mov	local01, result1
0fd30                 | LR__1340
0fd30                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0fd30     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd34     18 00 90 5D |  if_ne	jmp	#LR__1341
0fd38     0F 13 02 F6 | 	mov	arg01, local01
0fd3c     FC 80 B0 FD | 	call	#__system____builtin_atof
0fd40     FD 12 02 F6 | 	mov	arg01, result1
0fd44     00 14 06 F6 | 	mov	arg02, #0
0fd48     D0 7D B0 FD | 	call	#__system___float_tointeger
0fd4c     FD 1E 02 F6 | 	mov	local01, result1
0fd50                 | LR__1341
0fd50     2E 00 00 FF 
0fd54     00 E4 05 F1 | 	add	objptr, ##23552
0fd58     F2 1E 62 FC | 	wrlong	local01, objptr
0fd5c     04 E4 85 F1 | 	sub	objptr, #4
0fd60     F2 14 02 FB | 	rdlong	arg02, objptr
0fd64                 | ' 
0fd64                 | ' write_color:=ff
0fd64     2D 00 00 FF 
0fd68     BF E5 85 F1 | 	sub	objptr, ##23487
0fd6c     F2 1E 62 FC | 	wrlong	local01, objptr
0fd70                 | ' write_background:=bb
0fd70     04 E4 05 F1 | 	add	objptr, #4
0fd74     F2 14 62 FC | 	wrlong	arg02, objptr
0fd78     2D 00 00 FF 
0fd7c     BF E5 05 F1 | 	add	objptr, ##23487
0fd80     F2 12 02 FB | 	rdlong	arg01, objptr
0fd84     2E 00 00 FF 
0fd88     00 E4 85 F1 | 	sub	objptr, ##23552
0fd8c     7C 2B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
0fd90     A7 F0 03 F6 | 	mov	ptra, fp
0fd94     B2 00 A0 FD | 	call	#popregs_
0fd98                 | _do_ink_ret
0fd98     2D 00 64 FD | 	ret
0fd9c                 | 
0fd9c                 | ' 
0fd9c                 | ' 
0fd9c                 | ' sub do_font
0fd9c                 | _do_font
0fd9c     03 4A 05 F6 | 	mov	COUNT_, #3
0fda0     A8 00 A0 FD | 	call	#pushregs_
0fda4     D8 88 BF FD | 	call	#_pop
0fda8     FD 1E 02 F6 | 	mov	local01, result1
0fdac     FE 20 02 F6 | 	mov	local02, result2
0fdb0     FF 22 02 F6 | 	mov	local03, result3
0fdb4                 | ' t1=pop() 
0fdb4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0fdb4     1E 22 0E F2 | 	cmp	local03, #30 wz
0fdb8     10 00 90 5D |  if_ne	jmp	#LR__1350
0fdbc     0F 13 02 F6 | 	mov	arg01, local01
0fdc0     00 14 06 F6 | 	mov	arg02, #0
0fdc4     54 7D B0 FD | 	call	#__system___float_tointeger
0fdc8     FD 1E 02 F6 | 	mov	local01, result1
0fdcc                 | LR__1350
0fdcc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0fdcc     1F 22 0E F2 | 	cmp	local03, #31 wz
0fdd0     18 00 90 5D |  if_ne	jmp	#LR__1351
0fdd4     0F 13 02 F6 | 	mov	arg01, local01
0fdd8     60 80 B0 FD | 	call	#__system____builtin_atof
0fddc     FD 12 02 F6 | 	mov	arg01, result1
0fde0     00 14 06 F6 | 	mov	arg02, #0
0fde4     34 7D B0 FD | 	call	#__system___float_tointeger
0fde8     FD 1E 02 F6 | 	mov	local01, result1
0fdec                 | LR__1351
0fdec     2E 00 00 FF 
0fdf0     04 E4 05 F1 | 	add	objptr, ##23556
0fdf4     F2 1E 62 FC | 	wrlong	local01, objptr
0fdf8     2E 00 00 FF 
0fdfc     04 E4 85 F1 | 	sub	objptr, ##23556
0fe00     02 1E 66 F0 | 	shl	local01, #2
0fe04     0F 13 02 F6 | 	mov	arg01, local01
0fe08     6C 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
0fe0c     A7 F0 03 F6 | 	mov	ptra, fp
0fe10     B2 00 A0 FD | 	call	#popregs_
0fe14                 | _do_font_ret
0fe14     2D 00 64 FD | 	ret
0fe18                 | 
0fe18                 | ' 
0fe18                 | ' sub do_mode
0fe18                 | _do_mode
0fe18     04 4A 05 F6 | 	mov	COUNT_, #4
0fe1c     A8 00 A0 FD | 	call	#pushregs_
0fe20     5C 88 BF FD | 	call	#_pop
0fe24     FD 1E 02 F6 | 	mov	local01, result1
0fe28     FE 20 02 F6 | 	mov	local02, result2
0fe2c     FF 22 02 F6 | 	mov	local03, result3
0fe30                 | ' t1=pop() 
0fe30                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0fe30     1E 22 0E F2 | 	cmp	local03, #30 wz
0fe34     10 00 90 5D |  if_ne	jmp	#LR__1360
0fe38     0F 13 02 F6 | 	mov	arg01, local01
0fe3c     00 14 06 F6 | 	mov	arg02, #0
0fe40     D8 7C B0 FD | 	call	#__system___float_tointeger
0fe44     FD 1E 02 F6 | 	mov	local01, result1
0fe48                 | LR__1360
0fe48                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0fe48     1F 22 0E F2 | 	cmp	local03, #31 wz
0fe4c     18 00 90 5D |  if_ne	jmp	#LR__1361
0fe50     0F 13 02 F6 | 	mov	arg01, local01
0fe54     E4 7F B0 FD | 	call	#__system____builtin_atof
0fe58     FD 12 02 F6 | 	mov	arg01, result1
0fe5c     00 14 06 F6 | 	mov	arg02, #0
0fe60     B8 7C B0 FD | 	call	#__system___float_tointeger
0fe64     FD 1E 02 F6 | 	mov	local01, result1
0fe68                 | LR__1361
0fe68                 | ' select case t1.result.iresult
0fe68     0F 25 02 F6 | 	mov	local04, local01
0fe6c     04 24 26 F3 | 	fle	local04, #4
0fe70     30 24 62 FD | 	jmprel	local04
0fe74                 | LR__1362
0fe74     10 00 90 FD | 	jmp	#LR__1363
0fe78     68 00 90 FD | 	jmp	#LR__1364
0fe7c     C0 00 90 FD | 	jmp	#LR__1365
0fe80     18 01 90 FD | 	jmp	#LR__1366
0fe84     6C 01 90 FD | 	jmp	#LR__1367
0fe88                 | LR__1363
0fe88     2E 00 00 FF 
0fe8c     04 E4 05 F1 | 	add	objptr, ##23556
0fe90     F2 02 68 FC | 	wrlong	#1, objptr
0fe94     04 E4 85 F1 | 	sub	objptr, #4
0fe98     F2 34 69 FC | 	wrlong	#154, objptr
0fe9c     04 E4 85 F1 | 	sub	objptr, #4
0fea0     F2 26 69 FC | 	wrlong	#147, objptr
0fea4     2D 00 00 FF 
0fea8     FC E5 85 F1 | 	sub	objptr, ##23548
0feac     04 12 06 F6 | 	mov	arg01, #4
0feb0     C4 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0feb4     2E 00 00 FF 
0feb8     00 E4 05 F1 | 	add	objptr, ##23552
0febc     F2 12 02 FB | 	rdlong	arg01, objptr
0fec0     04 E4 85 F1 | 	sub	objptr, #4
0fec4     F2 14 02 FB | 	rdlong	arg02, objptr
0fec8                 | ' 
0fec8                 | ' write_color:=ff
0fec8     2D 00 00 FF 
0fecc     BF E5 85 F1 | 	sub	objptr, ##23487
0fed0     F2 12 62 FC | 	wrlong	arg01, objptr
0fed4                 | ' write_background:=bb
0fed4     04 E4 05 F1 | 	add	objptr, #4
0fed8     F2 14 62 FC | 	wrlong	arg02, objptr
0fedc     41 E4 85 F1 | 	sub	objptr, #65
0fee0     10 01 90 FD | 	jmp	#LR__1367
0fee4                 | LR__1364
0fee4     2E 00 00 FF 
0fee8     04 E4 05 F1 | 	add	objptr, ##23556
0feec     F2 00 68 FC | 	wrlong	#0, objptr
0fef0     04 E4 85 F1 | 	sub	objptr, #4
0fef4     F2 2E 68 FC | 	wrlong	#23, objptr
0fef8     00 12 06 F6 | 	mov	arg01, #0
0fefc     04 E4 85 F1 | 	sub	objptr, #4
0ff00     F2 00 68 FC | 	wrlong	#0, objptr
0ff04     2D 00 00 FF 
0ff08     FC E5 85 F1 | 	sub	objptr, ##23548
0ff0c     68 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ff10     2E 00 00 FF 
0ff14     00 E4 05 F1 | 	add	objptr, ##23552
0ff18     F2 12 02 FB | 	rdlong	arg01, objptr
0ff1c     04 E4 85 F1 | 	sub	objptr, #4
0ff20     F2 14 02 FB | 	rdlong	arg02, objptr
0ff24                 | ' 
0ff24                 | ' write_color:=ff
0ff24     2D 00 00 FF 
0ff28     BF E5 85 F1 | 	sub	objptr, ##23487
0ff2c     F2 12 62 FC | 	wrlong	arg01, objptr
0ff30                 | ' write_background:=bb
0ff30     04 E4 05 F1 | 	add	objptr, #4
0ff34     F2 14 62 FC | 	wrlong	arg02, objptr
0ff38     41 E4 85 F1 | 	sub	objptr, #65
0ff3c     B4 00 90 FD | 	jmp	#LR__1367
0ff40                 | LR__1365
0ff40     2E 00 00 FF 
0ff44     04 E4 05 F1 | 	add	objptr, ##23556
0ff48     F2 00 68 FC | 	wrlong	#0, objptr
0ff4c     04 E4 85 F1 | 	sub	objptr, #4
0ff50     F2 6A 69 FC | 	wrlong	#181, objptr
0ff54     00 12 06 F6 | 	mov	arg01, #0
0ff58     04 E4 85 F1 | 	sub	objptr, #4
0ff5c     F2 00 68 FC | 	wrlong	#0, objptr
0ff60     2D 00 00 FF 
0ff64     FC E5 85 F1 | 	sub	objptr, ##23548
0ff68     0C 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ff6c     2E 00 00 FF 
0ff70     00 E4 05 F1 | 	add	objptr, ##23552
0ff74     F2 12 02 FB | 	rdlong	arg01, objptr
0ff78     04 E4 85 F1 | 	sub	objptr, #4
0ff7c     F2 14 02 FB | 	rdlong	arg02, objptr
0ff80                 | ' 
0ff80                 | ' write_color:=ff
0ff80     2D 00 00 FF 
0ff84     BF E5 85 F1 | 	sub	objptr, ##23487
0ff88     F2 12 62 FC | 	wrlong	arg01, objptr
0ff8c                 | ' write_background:=bb
0ff8c     04 E4 05 F1 | 	add	objptr, #4
0ff90     F2 14 62 FC | 	wrlong	arg02, objptr
0ff94     41 E4 85 F1 | 	sub	objptr, #65
0ff98     58 00 90 FD | 	jmp	#LR__1367
0ff9c                 | LR__1366
0ff9c     2E 00 00 FF 
0ffa0     04 E4 05 F1 | 	add	objptr, ##23556
0ffa4     F2 00 68 FC | 	wrlong	#0, objptr
0ffa8     04 E4 85 F1 | 	sub	objptr, #4
0ffac     F2 1E 68 FC | 	wrlong	#15, objptr
0ffb0     00 12 06 F6 | 	mov	arg01, #0
0ffb4     04 E4 85 F1 | 	sub	objptr, #4
0ffb8     F2 00 68 FC | 	wrlong	#0, objptr
0ffbc     2D 00 00 FF 
0ffc0     FC E5 85 F1 | 	sub	objptr, ##23548
0ffc4     B0 38 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0ffc8     2E 00 00 FF 
0ffcc     00 E4 05 F1 | 	add	objptr, ##23552
0ffd0     F2 12 02 FB | 	rdlong	arg01, objptr
0ffd4     04 E4 85 F1 | 	sub	objptr, #4
0ffd8     F2 14 02 FB | 	rdlong	arg02, objptr
0ffdc                 | ' 
0ffdc                 | ' write_color:=ff
0ffdc     2D 00 00 FF 
0ffe0     BF E5 85 F1 | 	sub	objptr, ##23487
0ffe4     F2 12 62 FC | 	wrlong	arg01, objptr
0ffe8                 | ' write_background:=bb
0ffe8     04 E4 05 F1 | 	add	objptr, #4
0ffec     F2 14 62 FC | 	wrlong	arg02, objptr
0fff0     41 E4 85 F1 | 	sub	objptr, #65
0fff4                 | LR__1367
0fff4     2E 00 00 FF 
0fff8     00 E4 05 F1 | 	add	objptr, ##23552
0fffc     F2 12 02 FB | 	rdlong	arg01, objptr
10000     04 E4 85 F1 | 	sub	objptr, #4
10004     F2 14 02 FB | 	rdlong	arg02, objptr
10008     2D 00 00 FF 
1000c     FC E5 85 F1 | 	sub	objptr, ##23548
10010     4C 39 B0 FD | 	call	#_hg010b_spin2_cls
10014     21 01 00 FF 
10018     31 12 06 F6 | 	mov	arg01, ##@LR__4310
1001c                 | ' 
1001c                 | ' write(text)
1001c     FC 3B B0 FD | 	call	#_hg010b_spin2_write
10020                 | ' crlf
10020     58 3D B0 FD | 	call	#_hg010b_spin2_crlf
10024     09 00 00 FF 
10028     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
1002c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
10030     09 00 00 FF 
10034     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
10038                 | ' 
10038                 | ' write(text)
10038     E0 3B B0 FD | 	call	#_hg010b_spin2_write
1003c                 | ' crlf
1003c     3C 3D B0 FD | 	call	#_hg010b_spin2_crlf
10040     50 00 00 FF 
10044     A0 E5 05 F1 | 	add	objptr, ##41376
10048     F2 12 02 FB | 	rdlong	arg01, objptr
1004c     50 00 00 FF 
10050     A0 E5 85 F1 | 	sub	objptr, ##41376
10054                 | ' 
10054                 | ' write(text)
10054     C4 3B B0 FD | 	call	#_hg010b_spin2_write
10058                 | ' crlf
10058     20 3D B0 FD | 	call	#_hg010b_spin2_crlf
1005c     A7 F0 03 F6 | 	mov	ptra, fp
10060     B2 00 A0 FD | 	call	#popregs_
10064                 | _do_mode_ret
10064     2D 00 64 FD | 	ret
10068                 | 
10068                 | ' 
10068                 | ' 
10068                 | ' 
10068                 | ' sub do_pinwrite
10068                 | _do_pinwrite
10068     14 86 BF FD | 	call	#_pop
1006c     FD 14 02 F6 | 	mov	arg02, result1
10070     0C 86 BF FD | 	call	#_pop
10074     FD 12 02 F6 | 	mov	arg01, result1
10078     78 4D B0 FD | 	call	#__system___pinwrite
1007c                 | _do_pinwrite_ret
1007c     2D 00 64 FD | 	ret
10080                 | 
10080                 | ' 
10080                 | ' sub do_waitms
10080                 | _do_waitms
10080     01 4A 05 F6 | 	mov	COUNT_, #1
10084     A8 00 A0 FD | 	call	#pushregs_
10088     18 F0 07 F1 | 	add	ptra, #24
1008c     F0 85 BF FD | 	call	#_pop
10090     A7 FA 61 FC | 	wrlong	result1, fp
10094     04 4E 05 F1 | 	add	fp, #4
10098     A7 FC 61 FC | 	wrlong	result2, fp
1009c     04 4E 05 F1 | 	add	fp, #4
100a0     A7 FE 61 FC | 	wrlong	result3, fp
100a4                 | ' 
100a4                 | ' t1=pop() 'value
100a4                 | ' 
100a4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
100a4     08 4E 85 F1 | 	sub	fp, #8
100a8     1C FE 0D F2 | 	cmp	result3, #28 wz
100ac     08 4E 05 51 |  if_ne	add	fp, #8
100b0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
100b4     08 4E 85 51 |  if_ne	sub	fp, #8
100b8     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
100bc     A7 12 02 AB |  if_e	rdlong	arg01, fp
100c0     0C 4E 05 A1 |  if_e	add	fp, #12
100c4     A7 12 62 AC |  if_e	wrlong	arg01, fp
100c8     0C 4E 85 A1 |  if_e	sub	fp, #12
100cc     14 00 90 AD |  if_e	jmp	#LR__1370
100d0     A7 12 02 F6 | 	mov	arg01, fp
100d4     B4 DC BF FD | 	call	#_converttoint
100d8     0C 4E 05 F1 | 	add	fp, #12
100dc     A7 FA 61 FC | 	wrlong	result1, fp
100e0     0C 4E 85 F1 | 	sub	fp, #12
100e4                 | LR__1370
100e4                 | ' if t<0 then return
100e4     0C 4E 05 F1 | 	add	fp, #12
100e8     A7 12 02 FB | 	rdlong	arg01, fp
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     00 12 56 F2 | 	cmps	arg01, #0 wc
100f4     B8 00 90 CD |  if_b	jmp	#LR__1375
100f8                 | ' if t < 5000 then 
100f8     0C 4E 05 F1 | 	add	fp, #12
100fc     A7 12 02 FB | 	rdlong	arg01, fp
10100     0C 4E 85 F1 | 	sub	fp, #12
10104     09 00 00 FF 
10108     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1010c     14 00 90 3D |  if_ae	jmp	#LR__1371
10110     0C 4E 05 F1 | 	add	fp, #12
10114     A7 12 02 FB | 	rdlong	arg01, fp
10118     0C 4E 85 F1 | 	sub	fp, #12
1011c     14 4E B0 FD | 	call	#__system___waitms
10120     8C 00 90 FD | 	jmp	#LR__1374
10124                 | LR__1371
10124     10 4E 05 F1 | 	add	fp, #16
10128     A7 02 68 FC | 	wrlong	#1, fp
1012c     04 4E 85 F1 | 	sub	fp, #4
10130     A7 12 02 FB | 	rdlong	arg01, fp
10134     09 13 52 F6 | 	abs	arg01, arg01 wc
10138     09 00 00 FF 
1013c     88 13 16 FD | 	qdiv	arg01, ##5000
10140                 | '   for i=1 to t/5000
10140     0C 4E 85 F1 | 	sub	fp, #12
10144     18 1E 62 FD | 	getqx	local01
10148     0F 1F 82 F6 | 	negc	local01, local01
1014c     01 1E 06 F1 | 	add	local01, #1
10150                 | LR__1372
10150     10 4E 05 F1 | 	add	fp, #16
10154     A7 12 02 FB | 	rdlong	arg01, fp
10158     10 4E 85 F1 | 	sub	fp, #16
1015c     0F 13 52 F2 | 	cmps	arg01, local01 wc
10160     28 00 90 3D |  if_ae	jmp	#LR__1373
10164     0C 4E 05 F1 | 	add	fp, #12
10168     A7 12 02 FB | 	rdlong	arg01, fp
1016c     0C 4E 85 F1 | 	sub	fp, #12
10170     C0 4D B0 FD | 	call	#__system___waitms
10174     10 4E 05 F1 | 	add	fp, #16
10178     A7 12 02 FB | 	rdlong	arg01, fp
1017c     01 12 06 F1 | 	add	arg01, #1
10180     A7 12 62 FC | 	wrlong	arg01, fp
10184     10 4E 85 F1 | 	sub	fp, #16
10188     C4 FF 9F FD | 	jmp	#LR__1372
1018c                 | LR__1373
1018c     0C 4E 05 F1 | 	add	fp, #12
10190     A7 1E 02 FB | 	rdlong	local01, fp
10194     0F 1F 52 F6 | 	abs	local01, local01 wc
10198     09 00 00 FF 
1019c     88 1F 16 FD | 	qdiv	local01, ##5000
101a0     0C 4E 85 F1 | 	sub	fp, #12
101a4     19 1E 62 FD | 	getqy	local01
101a8     0F 13 82 F6 | 	negc	arg01, local01
101ac     84 4D B0 FD | 	call	#__system___waitms
101b0                 | LR__1374
101b0                 | LR__1375
101b0     A7 F0 03 F6 | 	mov	ptra, fp
101b4     B2 00 A0 FD | 	call	#popregs_
101b8                 | _do_waitms_ret
101b8     2D 00 64 FD | 	ret
101bc                 | 
101bc                 | ' 
101bc                 | ' sub do_waitvbl
101bc                 | _do_waitvbl
101bc     01 12 06 F6 | 	mov	arg01, #1
101c0     2C 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
101c4                 | _do_waitvbl_ret
101c4     2D 00 64 FD | 	ret
101c8                 | 
101c8                 | ' 
101c8                 | ' sub do_waitclock
101c8                 | _do_waitclock
101c8     52 00 00 FF 
101cc     38 E4 05 F1 | 	add	objptr, ##42040
101d0     F2 00 02 FB | 	rdlong	_var01, objptr
101d4                 | ' c=hkcnt
101d4                 | ' do: loop until hkcnt<>c
101d4                 | LR__1380
101d4     F2 02 02 FB | 	rdlong	_var02, objptr
101d8     00 03 0A F2 | 	cmp	_var02, _var01 wz
101dc     F4 FF 9F AD |  if_e	jmp	#LR__1380
101e0     52 00 00 FF 
101e4     38 E4 85 F1 | 	sub	objptr, ##42040
101e8                 | _do_waitclock_ret
101e8     2D 00 64 FD | 	ret
101ec                 | 
101ec                 | ' 
101ec                 | ' sub do_dir
101ec                 | _do_dir
101ec     03 4A 05 F6 | 	mov	COUNT_, #3
101f0     A8 00 A0 FD | 	call	#pushregs_
101f4     21 01 00 FF 
101f8     32 12 06 F6 | 	mov	arg01, ##@LR__4311
101fc     CC 50 B0 FD | 	call	#__system___chdir
10200                 | ' chdir("/sd/bas")       ' set working directory
10200                 | ' print "Working directory: "; currentdir$ 
10200     00 12 06 F6 | 	mov	arg01, #0
10204     EC 9F B0 FD | 	call	#__system___getiolock_0349
10208     FD 12 02 F6 | 	mov	arg01, result1
1020c     30 4A B0 FD | 	call	#__system___lockmem
10210     21 01 00 FF 
10214     3A 14 06 F6 | 	mov	arg02, ##@LR__4312
10218     00 12 06 F6 | 	mov	arg01, #0
1021c     00 16 06 F6 | 	mov	arg03, #0
10220     10 57 B0 FD | 	call	#__system___basic_print_string
10224     49 00 00 FF 
10228     58 E4 05 F1 | 	add	objptr, ##37464
1022c     F2 14 02 FB | 	rdlong	arg02, objptr
10230     49 00 00 FF 
10234     58 E4 85 F1 | 	sub	objptr, ##37464
10238     00 12 06 F6 | 	mov	arg01, #0
1023c     00 16 06 F6 | 	mov	arg03, #0
10240     F0 56 B0 FD | 	call	#__system___basic_print_string
10244     00 12 06 F6 | 	mov	arg01, #0
10248     0A 14 06 F6 | 	mov	arg02, #10
1024c     00 16 06 F6 | 	mov	arg03, #0
10250     88 56 B0 FD | 	call	#__system___basic_print_char
10254     00 12 06 F6 | 	mov	arg01, #0
10258     98 9F B0 FD | 	call	#__system___getiolock_0349
1025c     FD 00 68 FC | 	wrlong	#0, result1
10260     21 01 00 FF 
10264     4E 12 06 F6 | 	mov	arg01, ##@LR__4313
10268     10 14 06 F6 | 	mov	arg02, #16
1026c     BC A0 B0 FD | 	call	#__system___basic_dir
10270     FD 1E 02 F6 | 	mov	local01, result1
10274                 | ' 
10274                 | ' filename=dir$("*", fbDirectory)
10274                 | ' while filename <> "" and filename <> nil
10274                 | LR__1390
10274     00 20 06 F6 | 	mov	local02, #0
10278     21 01 00 FF 
1027c     50 14 06 F6 | 	mov	arg02, ##@LR__4314
10280     0F 13 02 F6 | 	mov	arg01, local01
10284     E0 49 B0 FD | 	call	#__system___string_cmp
10288     00 FA 0D F2 | 	cmp	result1, #0 wz
1028c     00 20 26 56 |  if_ne	not	local02, #0
10290     00 22 06 F6 | 	mov	local03, #0
10294     0F 13 02 F6 | 	mov	arg01, local01
10298     00 14 06 F6 | 	mov	arg02, #0
1029c     C8 49 B0 FD | 	call	#__system___string_cmp
102a0     00 FA 0D F2 | 	cmp	result1, #0 wz
102a4     00 22 26 56 |  if_ne	not	local03, #0
102a8     11 21 CA F7 | 	test	local02, local03 wz
102ac     64 00 90 AD |  if_e	jmp	#LR__1391
102b0                 | '   print "[dir] ";filename
102b0     00 12 06 F6 | 	mov	arg01, #0
102b4     3C 9F B0 FD | 	call	#__system___getiolock_0349
102b8     FD 12 02 F6 | 	mov	arg01, result1
102bc     80 49 B0 FD | 	call	#__system___lockmem
102c0     21 01 00 FF 
102c4     51 14 06 F6 | 	mov	arg02, ##@LR__4315
102c8     00 12 06 F6 | 	mov	arg01, #0
102cc     00 16 06 F6 | 	mov	arg03, #0
102d0     60 56 B0 FD | 	call	#__system___basic_print_string
102d4     00 12 06 F6 | 	mov	arg01, #0
102d8     0F 15 02 F6 | 	mov	arg02, local01
102dc     00 16 06 F6 | 	mov	arg03, #0
102e0     50 56 B0 FD | 	call	#__system___basic_print_string
102e4     00 12 06 F6 | 	mov	arg01, #0
102e8     0A 14 06 F6 | 	mov	arg02, #10
102ec     00 16 06 F6 | 	mov	arg03, #0
102f0     E8 55 B0 FD | 	call	#__system___basic_print_char
102f4     00 12 06 F6 | 	mov	arg01, #0
102f8     F8 9E B0 FD | 	call	#__system___getiolock_0349
102fc     FD 00 68 FC | 	wrlong	#0, result1
10300     00 12 06 F6 | 	mov	arg01, #0
10304     00 14 06 F6 | 	mov	arg02, #0
10308     20 A0 B0 FD | 	call	#__system___basic_dir
1030c     FD 1E 02 F6 | 	mov	local01, result1
10310     60 FF 9F FD | 	jmp	#LR__1390
10314                 | LR__1391
10314     21 01 00 FF 
10318     58 12 06 F6 | 	mov	arg01, ##@LR__4316
1031c     21 14 06 F6 | 	mov	arg02, #33
10320     08 A0 B0 FD | 	call	#__system___basic_dir
10324     FD 1E 02 F6 | 	mov	local01, result1
10328                 | ' 
10328                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
10328                 | ' do while filename <> "" and filename <> nil
10328                 | LR__1392
10328     00 20 06 F6 | 	mov	local02, #0
1032c     21 01 00 FF 
10330     5A 14 06 F6 | 	mov	arg02, ##@LR__4317
10334     0F 13 02 F6 | 	mov	arg01, local01
10338     2C 49 B0 FD | 	call	#__system___string_cmp
1033c     00 FA 0D F2 | 	cmp	result1, #0 wz
10340     00 20 26 56 |  if_ne	not	local02, #0
10344     00 22 06 F6 | 	mov	local03, #0
10348     0F 13 02 F6 | 	mov	arg01, local01
1034c     00 14 06 F6 | 	mov	arg02, #0
10350     14 49 B0 FD | 	call	#__system___string_cmp
10354     00 FA 0D F2 | 	cmp	result1, #0 wz
10358     00 22 26 56 |  if_ne	not	local03, #0
1035c     11 21 CA F7 | 	test	local02, local03 wz
10360     54 01 90 AD |  if_e	jmp	#LR__1396
10364                 | '   print filename
10364     00 12 06 F6 | 	mov	arg01, #0
10368     88 9E B0 FD | 	call	#__system___getiolock_0349
1036c     FD 12 02 F6 | 	mov	arg01, result1
10370     CC 48 B0 FD | 	call	#__system___lockmem
10374     00 12 06 F6 | 	mov	arg01, #0
10378     0F 15 02 F6 | 	mov	arg02, local01
1037c     00 16 06 F6 | 	mov	arg03, #0
10380     B0 55 B0 FD | 	call	#__system___basic_print_string
10384     00 12 06 F6 | 	mov	arg01, #0
10388     0A 14 06 F6 | 	mov	arg02, #10
1038c     00 16 06 F6 | 	mov	arg03, #0
10390     48 55 B0 FD | 	call	#__system___basic_print_char
10394     00 12 06 F6 | 	mov	arg01, #0
10398     58 9E B0 FD | 	call	#__system___getiolock_0349
1039c     FD 00 68 FC | 	wrlong	#0, result1
103a0     00 12 06 F6 | 	mov	arg01, #0
103a4     00 14 06 F6 | 	mov	arg02, #0
103a8     80 9F B0 FD | 	call	#__system___basic_dir
103ac     FD 1E 02 F6 | 	mov	local01, result1
103b0                 | '   filename = dir$()      ' continue scan
103b0                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
103b0                 | ' return cursor_y
103b0     3A E4 05 F1 | 	add	objptr, #58
103b4     F2 FA C1 FA | 	rdbyte	result1, objptr
103b8     3A E4 85 F1 | 	sub	objptr, #58
103bc     22 FA 0D F2 | 	cmp	result1, #34 wz
103c0     64 FF 9F 5D |  if_ne	jmp	#LR__1392
103c4                 | '     print "-----more, press any key";
103c4     00 12 06 F6 | 	mov	arg01, #0
103c8     28 9E B0 FD | 	call	#__system___getiolock_0349
103cc     FD 12 02 F6 | 	mov	arg01, result1
103d0     6C 48 B0 FD | 	call	#__system___lockmem
103d4     21 01 00 FF 
103d8     5B 14 06 F6 | 	mov	arg02, ##@LR__4318
103dc     00 12 06 F6 | 	mov	arg01, #0
103e0     00 16 06 F6 | 	mov	arg03, #0
103e4     4C 55 B0 FD | 	call	#__system___basic_print_string
103e8     00 12 06 F6 | 	mov	arg01, #0
103ec     04 9E B0 FD | 	call	#__system___getiolock_0349
103f0     FD 00 68 FC | 	wrlong	#0, result1
103f4                 | '     do 
103f4                 | LR__1393
103f4     EC 40 B0 FD | 	call	#_usbnew_spin2_get_key
103f8     00 FA 0D F2 | 	cmp	result1, #0 wz
103fc     F4 FF 9F 5D |  if_ne	jmp	#LR__1393
10400                 | '     do
10400                 | LR__1394
10400     E0 40 B0 FD | 	call	#_usbnew_spin2_get_key
10404     00 FA 0D F2 | 	cmp	result1, #0 wz
10408     F4 FF 9F AD |  if_e	jmp	#LR__1394
1040c                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
1040c     50 00 00 FF 
10410     A4 E5 05 F1 | 	add	objptr, ##41380
10414     F2 20 02 FB | 	rdlong	local02, objptr
10418     50 00 00 FF 
1041c     A4 E5 85 F1 | 	sub	objptr, ##41380
10420     01 20 0E F2 | 	cmp	local02, #1 wz
10424     44 00 90 5D |  if_ne	jmp	#LR__1395
10428     01 00 00 FF 
1042c     00 EA 05 F1 | 	add	ptr__dat__, ##512
10430     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10434     01 00 00 FF 
10438     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1043c     07 12 06 F6 | 	mov	arg01, #7
10440     56 00 00 FF 
10444     44 16 06 F6 | 	mov	arg03, ##44100
10448     0E 18 C6 F9 | 	decod	arg04, #14
1044c     03 00 00 FF 
10450     94 1A 06 F6 | 	mov	arg05, ##1684
10454     01 1C 66 F6 | 	neg	arg06, #1
10458     0B 00 00 FF 
1045c     C0 E4 05 F1 | 	add	objptr, ##5824
10460     A8 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10464     0B 00 00 FF 
10468     C0 E4 85 F1 | 	sub	objptr, ##5824
1046c                 | LR__1395
1046c     00 12 06 F6 | 	mov	arg01, #0
10470     23 14 06 F6 | 	mov	arg02, #35
10474     40 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10478                 | '     position 0,35: print "                             ";: position 4,35  
10478     00 12 06 F6 | 	mov	arg01, #0
1047c     74 9D B0 FD | 	call	#__system___getiolock_0349
10480     FD 12 02 F6 | 	mov	arg01, result1
10484     B8 47 B0 FD | 	call	#__system___lockmem
10488     21 01 00 FF 
1048c     74 14 06 F6 | 	mov	arg02, ##@LR__4319
10490     00 12 06 F6 | 	mov	arg01, #0
10494     00 16 06 F6 | 	mov	arg03, #0
10498     98 54 B0 FD | 	call	#__system___basic_print_string
1049c     00 12 06 F6 | 	mov	arg01, #0
104a0     50 9D B0 FD | 	call	#__system___getiolock_0349
104a4     FD 00 68 FC | 	wrlong	#0, result1
104a8     04 12 06 F6 | 	mov	arg01, #4
104ac     23 14 06 F6 | 	mov	arg02, #35
104b0     04 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
104b4     70 FE 9F FD | 	jmp	#LR__1392
104b8                 | LR__1396
104b8     A7 F0 03 F6 | 	mov	ptra, fp
104bc     B2 00 A0 FD | 	call	#popregs_
104c0                 | _do_dir_ret
104c0     2D 00 64 FD | 	ret
104c4                 | 
104c4                 | ' 
104c4                 | ' sub do_if
104c4                 | _do_if
104c4     05 4A 05 F6 | 	mov	COUNT_, #5
104c8     A8 00 A0 FD | 	call	#pushregs_
104cc     B0 81 BF FD | 	call	#_pop
104d0     FD 1E 0A F6 | 	mov	local01, result1 wz
104d4     FE 20 02 F6 | 	mov	local02, result2
104d8     FF 22 02 F6 | 	mov	local03, result3
104dc                 | ' t1=pop()
104dc                 | ' ' if uresult=0, jump over else
104dc                 | ' if t1.result.uresult = 0 then 
104dc     BC 00 90 5D |  if_ne	jmp	#LR__1402
104e0                 | '   for i=lineptr_e to lineptr-1
104e0     41 00 00 FF 
104e4     44 E4 05 F1 | 	add	objptr, ##33348
104e8     F2 24 02 FB | 	rdlong	local04, objptr
104ec     04 E4 85 F1 | 	sub	objptr, #4
104f0     F2 26 02 FB | 	rdlong	local05, objptr
104f4     41 00 00 FF 
104f8     40 E4 85 F1 | 	sub	objptr, ##33344
104fc                 | LR__1400
104fc     13 25 52 F2 | 	cmps	local04, local05 wc
10500     78 00 90 3D |  if_ae	jmp	#LR__1401
10504     12 FF 01 F6 | 	mov	result3, local04
10508     01 FE 65 F0 | 	shl	result3, #1
1050c     12 FF 01 F1 | 	add	result3, local04
10510     02 FE 65 F0 | 	shl	result3, #2
10514     3E 00 00 FF 
10518     40 E4 05 F1 | 	add	objptr, ##31808
1051c     F2 FE 01 F1 | 	add	result3, objptr
10520     FF 1E 02 FB | 	rdlong	local01, result3
10524     04 FE 05 F1 | 	add	result3, #4
10528     FF FC 01 FB | 	rdlong	result2, result3
1052c     12 FF 01 F6 | 	mov	result3, local04
10530     01 FE 65 F0 | 	shl	result3, #1
10534     12 FF 01 F1 | 	add	result3, local04
10538     02 FE 65 F0 | 	shl	result3, #2
1053c     F2 FE 01 F1 | 	add	result3, objptr
10540     08 FE 05 F1 | 	add	result3, #8
10544     FF FE 01 FB | 	rdlong	result3, result3
10548     FE 20 02 F6 | 	mov	local02, result2
1054c     FF 22 02 F6 | 	mov	local03, result3
10550                 | '     t1=compiledline(i)
10550                 | '     if t1.result_type=token_else then lineptr_e=i : return
10550     5A 22 0E F2 | 	cmp	local03, #90 wz
10554     3E 00 00 FF 
10558     40 E4 85 F1 | 	sub	objptr, ##31808
1055c     41 00 00 AF 
10560     44 E4 05 A1 |  if_e	add	objptr, ##33348
10564     F2 24 62 AC |  if_e	wrlong	local04, objptr
10568     41 00 00 AF 
1056c     44 E4 85 A1 |  if_e	sub	objptr, ##33348
10570     28 00 90 AD |  if_e	jmp	#LR__1403
10574     01 24 06 F1 | 	add	local04, #1
10578     80 FF 9F FD | 	jmp	#LR__1400
1057c                 | LR__1401
1057c     41 00 00 FF 
10580     40 E4 05 F1 | 	add	objptr, ##33344
10584     F2 26 02 FB | 	rdlong	local05, objptr
10588     01 26 86 F1 | 	sub	local05, #1
1058c     04 E4 05 F1 | 	add	objptr, #4
10590     F2 26 62 FC | 	wrlong	local05, objptr
10594     41 00 00 FF 
10598     44 E4 85 F1 | 	sub	objptr, ##33348
1059c                 | LR__1402
1059c                 | LR__1403
1059c     A7 F0 03 F6 | 	mov	ptra, fp
105a0     B2 00 A0 FD | 	call	#popregs_
105a4                 | _do_if_ret
105a4     2D 00 64 FD | 	ret
105a8                 | 
105a8                 | ' 
105a8                 | ' sub do_else
105a8                 | _do_else
105a8     41 00 00 FF 
105ac     40 E4 05 F1 | 	add	objptr, ##33344
105b0     F2 00 02 FB | 	rdlong	_var01, objptr
105b4     01 00 86 F1 | 	sub	_var01, #1
105b8     04 E4 05 F1 | 	add	objptr, #4
105bc     F2 00 62 FC | 	wrlong	_var01, objptr
105c0     41 00 00 FF 
105c4     44 E4 85 F1 | 	sub	objptr, ##33348
105c8                 | _do_else_ret
105c8     2D 00 64 FD | 	ret
105cc                 | 
105cc                 | ' 
105cc                 | ' 
105cc                 | ' 
105cc                 | ' sub do_nothing
105cc                 | _do_nothing
105cc                 | _do_nothing_ret
105cc     2D 00 64 FD | 	ret
105d0                 | 
105d0                 | ' 
105d0                 | ' sub do_brun
105d0                 | _do_brun
105d0     08 4A 05 F6 | 	mov	COUNT_, #8
105d4     A8 00 A0 FD | 	call	#pushregs_
105d8     A4 80 BF FD | 	call	#_pop
105dc     FF 1A 02 F6 | 	mov	arg05, result3
105e0     FD 1E 02 F6 | 	mov	local01, result1
105e4     FE 20 02 F6 | 	mov	local02, result2
105e8     0D 23 02 F6 | 	mov	local03, arg05
105ec                 | ' 
105ec                 | ' t1=pop() 
105ec                 | ' if t1.result_type=result_string then
105ec     1F 22 0E F2 | 	cmp	local03, #31 wz
105f0     EC 01 90 5D |  if_ne	jmp	#LR__1413
105f4     0F 25 02 F6 | 	mov	local04, local01
105f8                 | '   filename=t1.result.sresult
105f8                 | '   if left$(filename,1)="/" then 
105f8     12 13 02 F6 | 	mov	arg01, local04
105fc     01 14 06 F6 | 	mov	arg02, #1
10600     4C 66 B0 FD | 	call	#__system__Left_S
10604     FD 12 02 F6 | 	mov	arg01, result1
10608     21 01 00 FF 
1060c     92 14 06 F6 | 	mov	arg02, ##@LR__4320
10610     54 46 B0 FD | 	call	#__system___string_cmp
10614     00 FA 0D F2 | 	cmp	result1, #0 wz
10618     12 27 02 A6 |  if_e	mov	local05, local04
1061c     14 00 90 AD |  if_e	jmp	#LR__1410
10620     21 01 00 FF 
10624     94 12 06 F6 | 	mov	arg01, ##@LR__4321
10628     12 15 02 F6 | 	mov	arg02, local04
1062c     6C 46 B0 FD | 	call	#__system___string_concat
10630     FD 26 02 F6 | 	mov	local05, result1
10634                 | LR__1410
10634                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
10634                 | '   open fullfilename for input as #9
10634     09 12 06 F6 | 	mov	arg01, #9
10638     13 15 02 F6 | 	mov	arg02, local05
1063c     00 16 06 F6 | 	mov	arg03, #0
10640     00 52 B0 FD | 	call	#__system___basic_open_string
10644     20 E8 05 F1 | 	add	ptr___system__dat__, #32
10648     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1064c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
10650     FD 28 0A F6 | 	mov	local06, result1 wz
10654                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
10654     8C 00 90 AD |  if_e	jmp	#LR__1411
10658     00 12 06 F6 | 	mov	arg01, #0
1065c     94 9B B0 FD | 	call	#__system___getiolock_0349
10660     FD 12 02 F6 | 	mov	arg01, result1
10664     D8 45 B0 FD | 	call	#__system___lockmem
10668     21 01 00 FF 
1066c     9D 14 06 F6 | 	mov	arg02, ##@LR__4322
10670     00 12 06 F6 | 	mov	arg01, #0
10674     00 16 06 F6 | 	mov	arg03, #0
10678     B8 52 B0 FD | 	call	#__system___basic_print_string
1067c     00 12 06 F6 | 	mov	arg01, #0
10680     14 15 02 F6 | 	mov	arg02, local06
10684     00 16 06 F6 | 	mov	arg03, #0
10688     0A 18 06 F6 | 	mov	arg04, #10
1068c     E8 52 B0 FD | 	call	#__system___basic_print_integer
10690     21 01 00 FF 
10694     AB 14 06 F6 | 	mov	arg02, ##@LR__4323
10698     00 12 06 F6 | 	mov	arg01, #0
1069c     00 16 06 F6 | 	mov	arg03, #0
106a0     90 52 B0 FD | 	call	#__system___basic_print_string
106a4     14 13 02 F6 | 	mov	arg01, local06
106a8     94 6B B0 FD | 	call	#__system___strerror
106ac     FD 14 02 F6 | 	mov	arg02, result1
106b0     00 12 06 F6 | 	mov	arg01, #0
106b4     00 16 06 F6 | 	mov	arg03, #0
106b8     78 52 B0 FD | 	call	#__system___basic_print_string
106bc     00 12 06 F6 | 	mov	arg01, #0
106c0     0A 14 06 F6 | 	mov	arg02, #10
106c4     00 16 06 F6 | 	mov	arg03, #0
106c8     10 52 B0 FD | 	call	#__system___basic_print_char
106cc     00 12 06 F6 | 	mov	arg01, #0
106d0     20 9B B0 FD | 	call	#__system___getiolock_0349
106d4     FD 00 68 FC | 	wrlong	#0, result1
106d8     09 12 06 F6 | 	mov	arg01, #9
106dc     44 91 B0 FD | 	call	#__system__close
106e0     FC 00 90 FD | 	jmp	#LR__1414
106e4                 | LR__1411
106e4     01 2A 06 F6 | 	mov	local07, #1
106e8     00 2C 06 F6 | 	mov	local08, #0
106ec                 | '   do
106ec                 | LR__1412
106ec                 | '     get #9,pos,block(0),1024,r : pos+=r	
106ec     4E 00 00 FF 
106f0     70 E5 05 F1 | 	add	objptr, ##40304
106f4     F2 16 02 F6 | 	mov	arg03, objptr
106f8     4E 00 00 FF 
106fc     70 E5 85 F1 | 	sub	objptr, ##40304
10700     09 12 06 F6 | 	mov	arg01, #9
10704     15 15 02 F6 | 	mov	arg02, local07
10708     0A 18 C6 F9 | 	decod	arg04, #10
1070c     01 1A 06 F6 | 	mov	arg05, #1
10710     30 53 B0 FD | 	call	#__system___basic_get
10714     FD 28 02 F6 | 	mov	local06, result1
10718     FD 2A 02 F1 | 	add	local07, result1
1071c     4E 00 00 FF 
10720     70 E5 05 F1 | 	add	objptr, ##40304
10724     F2 12 02 F6 | 	mov	arg01, objptr
10728     16 15 02 F6 | 	mov	arg02, local08
1072c     0A 16 C6 F9 | 	decod	arg03, #10
10730     43 00 00 FF 
10734     B0 E4 85 F1 | 	sub	objptr, ##34480
10738     B4 3A B0 FD | 	call	#_psram_spin2_write
1073c     0B 00 00 FF 
10740     C0 E4 85 F1 | 	sub	objptr, ##5824
10744     14 2D 02 F1 | 	add	local08, local06
10748     02 00 00 FF 
1074c     00 28 0E F2 | 	cmp	local06, ##1024 wz
10750     E0 03 00 AF 
10754     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
10758     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1412
1075c     2D 00 00 FF 
10760     C0 E5 05 F1 | 	add	objptr, ##23488
10764     F2 12 02 FB | 	rdlong	arg01, objptr
10768     03 12 62 FD | 	cogstop	arg01
1076c     04 E4 05 F1 | 	add	objptr, #4
10770     F2 12 02 FB | 	rdlong	arg01, objptr
10774     03 12 62 FD | 	cogstop	arg01
10778     04 E4 05 F1 | 	add	objptr, #4
1077c     F2 12 02 FB | 	rdlong	arg01, objptr
10780     03 12 62 FD | 	cogstop	arg01
10784     22 00 00 FF 
10788     E0 E5 05 F1 | 	add	objptr, ##17888
1078c     F2 12 02 FB | 	rdlong	arg01, objptr
10790     03 12 62 FD | 	cogstop	arg01
10794     09 00 00 FF 
10798     74 EB 05 F1 | 	add	ptr__dat__, ##4980
1079c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
107a0     09 00 00 FF 
107a4     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
107a8     22 00 00 FF 
107ac     D8 E5 85 F1 | 	sub	objptr, ##17880
107b0     1E 2C 06 F6 | 	mov	local08, #30
107b4     28 E4 61 FD | 	setq	objptr
107b8     0A 2D F2 FC | 	coginit	local08, arg02 wc
107bc     01 2C 66 C6 |  if_b	neg	local08, #1
107c0     24 00 00 FF 
107c4     DC E4 05 F1 | 	add	objptr, ##18652
107c8     F2 2C 62 FC | 	wrlong	local08, objptr
107cc     52 00 00 FF 
107d0     AC E4 85 F1 | 	sub	objptr, ##42156
107d4     00 12 06 F6 | 	mov	arg01, #0
107d8     01 12 62 FD | 	cogid	arg01
107dc     03 12 62 FD | 	cogstop	arg01
107e0                 | LR__1413
107e0                 | LR__1414
107e0     A7 F0 03 F6 | 	mov	ptra, fp
107e4     B2 00 A0 FD | 	call	#popregs_
107e8                 | _do_brun_ret
107e8     2D 00 64 FD | 	ret
107ec                 | 
107ec                 | ' 
107ec                 | ' 
107ec                 | ' sub do_mouse
107ec                 | _do_mouse
107ec     90 7E BF FD | 	call	#_pop
107f0     00 FA 4D F2 | 	cmps	result1, #0 wz
107f4                 | ' 
107f4                 | ' t1=pop()
107f4                 | ' 
107f4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
107f4     14 00 90 5D |  if_ne	jmp	#LR__1420
107f8     10 12 06 F6 | 	mov	arg01, #16
107fc     00 14 06 F6 | 	mov	arg02, #0
10800     00 16 06 F6 | 	mov	arg03, #0
10804     94 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10808     10 00 90 FD | 	jmp	#LR__1421
1080c                 | LR__1420
1080c     10 12 06 F6 | 	mov	arg01, #16
10810     20 14 06 F6 | 	mov	arg02, #32
10814     20 16 06 F6 | 	mov	arg03, #32
10818     80 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
1081c                 | LR__1421
1081c                 | _do_mouse_ret
1081c     2D 00 64 FD | 	ret
10820                 | 
10820                 | ' 
10820                 | ' sub do_cursor
10820                 | _do_cursor
10820     5C 7E BF FD | 	call	#_pop
10824     00 FA 4D F2 | 	cmps	result1, #0 wz
10828                 | ' 
10828                 | ' t1=pop()
10828                 | ' 
10828                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
10828     14 00 90 5D |  if_ne	jmp	#LR__1430
1082c     11 12 06 F6 | 	mov	arg01, #17
10830     00 14 06 F6 | 	mov	arg02, #0
10834     00 16 06 F6 | 	mov	arg03, #0
10838     60 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
1083c     10 00 90 FD | 	jmp	#LR__1431
10840                 | LR__1430
10840     11 12 06 F6 | 	mov	arg01, #17
10844     08 14 06 F6 | 	mov	arg02, #8
10848     10 16 06 F6 | 	mov	arg03, #16
1084c     4C 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10850                 | LR__1431
10850                 | _do_cursor_ret
10850     2D 00 64 FD | 	ret
10854                 | 
10854                 | ' 
10854                 | ' 
10854                 | ' sub do_click
10854                 | _do_click
10854     28 7E BF FD | 	call	#_pop
10858     00 FA 4D F2 | 	cmps	result1, #0 wz
1085c                 | ' 
1085c                 | ' t1=pop()
1085c                 | ' 
1085c                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1085c     50 00 00 AF 
10860     A4 E5 05 A1 |  if_e	add	objptr, ##41380
10864     F2 00 68 AC |  if_e	wrlong	#0, objptr
10868     50 00 00 FF 
1086c     A4 E5 C5 F3 | 	sumz	objptr, ##41380
10870     F2 02 68 5C |  if_ne	wrlong	#1, objptr
10874     50 00 00 5F 
10878     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
1087c                 | _do_click_ret
1087c     2D 00 64 FD | 	ret
10880                 | 
10880                 | ' 
10880                 | ' 
10880                 | ' sub do_beep
10880                 | _do_beep
10880     02 4A 05 F6 | 	mov	COUNT_, #2
10884     A8 00 A0 FD | 	call	#pushregs_
10888     20 F0 07 F1 | 	add	ptra, #32
1088c     F0 7D BF FD | 	call	#_pop
10890     FD 1E 02 F6 | 	mov	local01, result1
10894     FE 1C 02 F6 | 	mov	arg06, result2
10898     FF 20 02 F6 | 	mov	local02, result3
1089c     0C 4E 05 F1 | 	add	fp, #12
108a0     A7 1E 62 FC | 	wrlong	local01, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 1C 62 FC | 	wrlong	arg06, fp
108ac     04 4E 05 F1 | 	add	fp, #4
108b0     A7 20 62 FC | 	wrlong	local02, fp
108b4     14 4E 85 F1 | 	sub	fp, #20
108b8     C4 7D BF FD | 	call	#_pop
108bc     A7 FA 61 FC | 	wrlong	result1, fp
108c0     04 4E 05 F1 | 	add	fp, #4
108c4     A7 FC 61 FC | 	wrlong	result2, fp
108c8     04 4E 05 F1 | 	add	fp, #4
108cc     A7 FE 61 FC | 	wrlong	result3, fp
108d0                 | ' 
108d0                 | ' 
108d0                 | ' 
108d0                 | ' t2=pop()
108d0                 | ' t1=pop()
108d0                 | ' 
108d0                 | ' 
108d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
108d0     08 4E 85 F1 | 	sub	fp, #8
108d4     1C FE 0D F2 | 	cmp	result3, #28 wz
108d8     08 4E 05 51 |  if_ne	add	fp, #8
108dc     A7 20 02 5B |  if_ne	rdlong	local02, fp
108e0     08 4E 85 51 |  if_ne	sub	fp, #8
108e4     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
108e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
108ec     18 4E 05 A1 |  if_e	add	fp, #24
108f0     A7 1E 62 AC |  if_e	wrlong	local01, fp
108f4     18 4E 85 A1 |  if_e	sub	fp, #24
108f8     14 00 90 AD |  if_e	jmp	#LR__1440
108fc     A7 12 02 F6 | 	mov	arg01, fp
10900     88 D4 BF FD | 	call	#_converttoint
10904     18 4E 05 F1 | 	add	fp, #24
10908     A7 FA 61 FC | 	wrlong	result1, fp
1090c     18 4E 85 F1 | 	sub	fp, #24
10910                 | LR__1440
10910     1C 4E 05 F1 | 	add	fp, #28
10914     A7 FE 48 FC | 	wrbyte	#127, fp
10918     01 4E 05 F1 | 	add	fp, #1
1091c     A7 00 49 FC | 	wrbyte	#128, fp
10920     01 4E 85 F1 | 	sub	fp, #1
10924     A7 14 02 F6 | 	mov	arg02, fp
10928     04 4E 85 F1 | 	sub	fp, #4
1092c     A7 16 02 FB | 	rdlong	arg03, fp
10930     18 4E 85 F1 | 	sub	fp, #24
10934     01 16 66 F0 | 	shl	arg03, #1
10938     07 12 06 F6 | 	mov	arg01, #7
1093c     0E 18 C6 F9 | 	decod	arg04, #14
10940     02 1A 06 F6 | 	mov	arg05, #2
10944     00 1C 06 F6 | 	mov	arg06, #0
10948     0B 00 00 FF 
1094c     C0 E4 05 F1 | 	add	objptr, ##5824
10950     54 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
10954     0B 00 00 FF 
10958     C0 E4 85 F1 | 	sub	objptr, ##5824
1095c     0C 4E 05 F1 | 	add	fp, #12
10960     A7 12 02 F6 | 	mov	arg01, fp
10964     0C 4E 85 F1 | 	sub	fp, #12
10968     AC 7D BF FD | 	call	#_push
1096c     10 F7 BF FD | 	call	#_do_waitms
10970     07 12 06 F6 | 	mov	arg01, #7
10974     0B 00 00 FF 
10978     C0 E4 05 F1 | 	add	objptr, ##5824
1097c     DC 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
10980     0B 00 00 FF 
10984     C0 E4 85 F1 | 	sub	objptr, ##5824
10988     A7 F0 03 F6 | 	mov	ptra, fp
1098c     B2 00 A0 FD | 	call	#popregs_
10990                 | _do_beep_ret
10990     2D 00 64 FD | 	ret
10994                 | 
10994                 | ' 
10994                 | ' sub do_no_command
10994                 | _do_no_command
10994     17 12 06 F6 | 	mov	arg01, #23
10998     B0 0D B0 FD | 	call	#_printerror
1099c                 | _do_no_command_ret
1099c     2D 00 64 FD | 	ret
109a0                 | 
109a0                 | ' 
109a0                 | ' sub do_negative
109a0                 | _do_negative
109a0     02 4A 05 F6 | 	mov	COUNT_, #2
109a4     A8 00 A0 FD | 	call	#pushregs_
109a8     0C F0 07 F1 | 	add	ptra, #12
109ac     D0 7C BF FD | 	call	#_pop
109b0     FF 1E 02 F6 | 	mov	local01, result3
109b4     A7 FA 61 FC | 	wrlong	result1, fp
109b8     04 4E 05 F1 | 	add	fp, #4
109bc     A7 FC 61 FC | 	wrlong	result2, fp
109c0     04 4E 05 F1 | 	add	fp, #4
109c4     A7 1E 62 FC | 	wrlong	local01, fp
109c8                 | ' t1=pop()
109c8                 | ' if t1.result_type=result_int then 
109c8     08 4E 85 F1 | 	sub	fp, #8
109cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
109d0     A7 20 02 AB |  if_e	rdlong	local02, fp
109d4     10 1F 62 A6 |  if_e	neg	local01, local02
109d8     A7 1E 62 AC |  if_e	wrlong	local01, fp
109dc     5C 00 90 AD |  if_e	jmp	#LR__1452
109e0     08 4E 05 F1 | 	add	fp, #8
109e4     A7 1E 02 FB | 	rdlong	local01, fp
109e8     08 4E 85 F1 | 	sub	fp, #8
109ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
109f0     1C 00 90 5D |  if_ne	jmp	#LR__1450
109f4     A7 20 02 FB | 	rdlong	local02, fp
109f8     10 1F 62 F6 | 	neg	local01, local02
109fc     A7 1E 62 FC | 	wrlong	local01, fp
10a00     08 4E 05 F1 | 	add	fp, #8
10a04     A7 38 68 FC | 	wrlong	#28, fp
10a08     08 4E 85 F1 | 	sub	fp, #8
10a0c     2C 00 90 FD | 	jmp	#LR__1451
10a10                 | LR__1450
10a10     08 4E 05 F1 | 	add	fp, #8
10a14     A7 1E 02 FB | 	rdlong	local01, fp
10a18     08 4E 85 F1 | 	sub	fp, #8
10a1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10a20     A7 FA 01 AB |  if_e	rdlong	result1, fp
10a24     1F FA E5 A4 |  if_e	bitnot	result1, #31
10a28     A7 FA 61 AC |  if_e	wrlong	result1, fp
10a2c     08 4E 05 51 |  if_ne	add	fp, #8
10a30     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10a34     08 4E 85 51 |  if_ne	sub	fp, #8
10a38     A7 50 68 5C |  if_ne	wrlong	#40, fp
10a3c                 | LR__1451
10a3c                 | LR__1452
10a3c     A7 12 02 F6 | 	mov	arg01, fp
10a40     D4 7C BF FD | 	call	#_push
10a44     A7 F0 03 F6 | 	mov	ptra, fp
10a48     B2 00 A0 FD | 	call	#popregs_
10a4c                 | _do_negative_ret
10a4c     2D 00 64 FD | 	ret
10a50                 | 
10a50                 | ' 
10a50                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
10a50                 | ' 
10a50                 | ' ''----------------------------------------------------------------------------------------------------
10a50                 | ' ''------------------ Initialization procedures -------------------------------------------------------
10a50                 | ' ''----------------------------------------------------------------------------------------------------
10a50                 | ' 
10a50                 | ' ''--------------------------- Command function pointers
10a50                 | ' 
10a50                 | ' sub init_commands
10a50                 | _init_commands
10a50                 | ' 
10a50                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
10a50     00 00 06 F6 | 	mov	_var01, #0
10a54     97 16 48 FB | 	callpa	#(@LR__1461-@LR__1460)>>2,fcache_load_ptr_
10a58                 | LR__1460
10a58     00 FB 01 F6 | 	mov	result1, _var01
10a5c     02 FA 65 F0 | 	shl	result1, #2
10a60     3A 00 00 FF 
10a64     24 E4 05 F1 | 	add	objptr, ##29732
10a68     F2 FA 01 F1 | 	add	result1, objptr
10a6c     3A 00 00 FF 
10a70     24 E4 85 F1 | 	sub	objptr, ##29732
10a74     FD E4 61 FC | 	wrlong	objptr, result1
10a78     01 00 06 F1 | 	add	_var01, #1
10a7c     00 01 56 F2 | 	cmps	_var01, #256 wc
10a80     D4 FF 9F CD |  if_b	jmp	#LR__1460
10a84                 | LR__1461
10a84     F2 FA 01 F6 | 	mov	result1, objptr
10a88     14 FA 25 F4 | 	bith	result1, #20
10a8c     3A 00 00 FF 
10a90     28 E4 05 F1 | 	add	objptr, ##29736
10a94     F2 FA 61 FC | 	wrlong	result1, objptr
10a98     3A 00 00 FF 
10a9c     28 E4 85 F1 | 	sub	objptr, ##29736
10aa0     F2 FA 01 F6 | 	mov	result1, objptr
10aa4     15 FA 25 F4 | 	bith	result1, #21
10aa8     3A 00 00 FF 
10aac     2C E4 05 F1 | 	add	objptr, ##29740
10ab0     F2 FA 61 FC | 	wrlong	result1, objptr
10ab4     3A 00 00 FF 
10ab8     2C E4 85 F1 | 	sub	objptr, ##29740
10abc     F2 FA 01 F6 | 	mov	result1, objptr
10ac0     34 FA 25 F4 | 	bith	result1, #52
10ac4     3A 00 00 FF 
10ac8     30 E4 05 F1 | 	add	objptr, ##29744
10acc     F2 FA 61 FC | 	wrlong	result1, objptr
10ad0     3A 00 00 FF 
10ad4     30 E4 85 F1 | 	sub	objptr, ##29744
10ad8     F2 FA 01 F6 | 	mov	result1, objptr
10adc     16 FA 25 F4 | 	bith	result1, #22
10ae0     3A 00 00 FF 
10ae4     38 E4 05 F1 | 	add	objptr, ##29752
10ae8     F2 FA 61 FC | 	wrlong	result1, objptr
10aec     3A 00 00 FF 
10af0     38 E4 85 F1 | 	sub	objptr, ##29752
10af4     F2 FA 01 F6 | 	mov	result1, objptr
10af8     00 28 00 FF 
10afc     00 FA 45 F5 | 	or	result1, ##5242880
10b00     3A 00 00 FF 
10b04     3C E4 05 F1 | 	add	objptr, ##29756
10b08     F2 FA 61 FC | 	wrlong	result1, objptr
10b0c     3A 00 00 FF 
10b10     3C E4 85 F1 | 	sub	objptr, ##29756
10b14     F2 FA 01 F6 | 	mov	result1, objptr
10b18     35 FA 25 F4 | 	bith	result1, #53
10b1c     3A 00 00 FF 
10b20     40 E4 05 F1 | 	add	objptr, ##29760
10b24     F2 FA 61 FC | 	wrlong	result1, objptr
10b28     3A 00 00 FF 
10b2c     40 E4 85 F1 | 	sub	objptr, ##29760
10b30     F2 FA 01 F6 | 	mov	result1, objptr
10b34     54 FA 25 F4 | 	bith	result1, #84
10b38     3A 00 00 FF 
10b3c     44 E4 05 F1 | 	add	objptr, ##29764
10b40     F2 FA 61 FC | 	wrlong	result1, objptr
10b44     3A 00 00 FF 
10b48     44 E4 85 F1 | 	sub	objptr, ##29764
10b4c     F2 FA 01 F6 | 	mov	result1, objptr
10b50     17 FA 25 F4 | 	bith	result1, #23
10b54     3A 00 00 FF 
10b58     48 E4 05 F1 | 	add	objptr, ##29768
10b5c     F2 FA 61 FC | 	wrlong	result1, objptr
10b60     3A 00 00 FF 
10b64     48 E4 85 F1 | 	sub	objptr, ##29768
10b68     F2 FA 01 F6 | 	mov	result1, objptr
10b6c     00 48 00 FF 
10b70     00 FA 45 F5 | 	or	result1, ##9437184
10b74     3A 00 00 FF 
10b78     4C E4 05 F1 | 	add	objptr, ##29772
10b7c     F2 FA 61 FC | 	wrlong	result1, objptr
10b80     3A 00 00 FF 
10b84     4C E4 85 F1 | 	sub	objptr, ##29772
10b88     F2 FA 01 F6 | 	mov	result1, objptr
10b8c     00 50 00 FF 
10b90     00 FA 45 F5 | 	or	result1, ##10485760
10b94     3A 00 00 FF 
10b98     50 E4 05 F1 | 	add	objptr, ##29776
10b9c     F2 FA 61 FC | 	wrlong	result1, objptr
10ba0     3A 00 00 FF 
10ba4     50 E4 85 F1 | 	sub	objptr, ##29776
10ba8     F2 FA 01 F6 | 	mov	result1, objptr
10bac     00 58 00 FF 
10bb0     00 FA 45 F5 | 	or	result1, ##11534336
10bb4     3A 00 00 FF 
10bb8     54 E4 05 F1 | 	add	objptr, ##29780
10bbc     F2 FA 61 FC | 	wrlong	result1, objptr
10bc0     3A 00 00 FF 
10bc4     54 E4 85 F1 | 	sub	objptr, ##29780
10bc8     F2 FA 01 F6 | 	mov	result1, objptr
10bcc     36 FA 25 F4 | 	bith	result1, #54
10bd0     3A 00 00 FF 
10bd4     68 E4 05 F1 | 	add	objptr, ##29800
10bd8     F2 FA 61 FC | 	wrlong	result1, objptr
10bdc     3A 00 00 FF 
10be0     68 E4 85 F1 | 	sub	objptr, ##29800
10be4     F2 FA 01 F6 | 	mov	result1, objptr
10be8     00 68 00 FF 
10bec     00 FA 45 F5 | 	or	result1, ##13631488
10bf0     3A 00 00 FF 
10bf4     98 E4 05 F1 | 	add	objptr, ##29848
10bf8     F2 FA 61 FC | 	wrlong	result1, objptr
10bfc     3A 00 00 FF 
10c00     98 E4 85 F1 | 	sub	objptr, ##29848
10c04     F2 FA 01 F6 | 	mov	result1, objptr
10c08     00 68 00 FF 
10c0c     00 FA 45 F5 | 	or	result1, ##13631488
10c10     3A 00 00 FF 
10c14     94 E4 05 F1 | 	add	objptr, ##29844
10c18     F2 FA 61 FC | 	wrlong	result1, objptr
10c1c     3A 00 00 FF 
10c20     94 E4 85 F1 | 	sub	objptr, ##29844
10c24     F2 FA 01 F6 | 	mov	result1, objptr
10c28     00 68 00 FF 
10c2c     00 FA 45 F5 | 	or	result1, ##13631488
10c30     3A 00 00 FF 
10c34     9C E4 05 F1 | 	add	objptr, ##29852
10c38     F2 FA 61 FC | 	wrlong	result1, objptr
10c3c     3A 00 00 FF 
10c40     9C E4 85 F1 | 	sub	objptr, ##29852
10c44     F2 FA 01 F6 | 	mov	result1, objptr
10c48     00 68 00 FF 
10c4c     00 FA 45 F5 | 	or	result1, ##13631488
10c50     3A 00 00 FF 
10c54     A0 E4 05 F1 | 	add	objptr, ##29856
10c58     F2 FA 61 FC | 	wrlong	result1, objptr
10c5c     3A 00 00 FF 
10c60     A0 E4 85 F1 | 	sub	objptr, ##29856
10c64     F2 FA 01 F6 | 	mov	result1, objptr
10c68     55 FA 25 F4 | 	bith	result1, #85
10c6c     3A 00 00 FF 
10c70     80 E4 05 F1 | 	add	objptr, ##29824
10c74     F2 FA 61 FC | 	wrlong	result1, objptr
10c78     3A 00 00 FF 
10c7c     80 E4 85 F1 | 	sub	objptr, ##29824
10c80     F2 FA 01 F6 | 	mov	result1, objptr
10c84     00 68 00 FF 
10c88     00 FA 45 F5 | 	or	result1, ##13631488
10c8c     3A 00 00 FF 
10c90     A4 E4 05 F1 | 	add	objptr, ##29860
10c94     F2 FA 61 FC | 	wrlong	result1, objptr
10c98     3A 00 00 FF 
10c9c     A4 E4 85 F1 | 	sub	objptr, ##29860
10ca0     F2 FA 01 F6 | 	mov	result1, objptr
10ca4     00 68 00 FF 
10ca8     00 FA 45 F5 | 	or	result1, ##13631488
10cac     3A 00 00 FF 
10cb0     A8 E4 05 F1 | 	add	objptr, ##29864
10cb4     F2 FA 61 FC | 	wrlong	result1, objptr
10cb8     3A 00 00 FF 
10cbc     A8 E4 85 F1 | 	sub	objptr, ##29864
10cc0     F2 FA 01 F6 | 	mov	result1, objptr
10cc4     00 68 00 FF 
10cc8     00 FA 45 F5 | 	or	result1, ##13631488
10ccc     3A 00 00 FF 
10cd0     AC E4 05 F1 | 	add	objptr, ##29868
10cd4     F2 FA 61 FC | 	wrlong	result1, objptr
10cd8     3A 00 00 FF 
10cdc     AC E4 85 F1 | 	sub	objptr, ##29868
10ce0     F2 FA 01 F6 | 	mov	result1, objptr
10ce4     74 FA 25 F4 | 	bith	result1, #116
10ce8     3A 00 00 FF 
10cec     24 E5 05 F1 | 	add	objptr, ##29988
10cf0     F2 FA 61 FC | 	wrlong	result1, objptr
10cf4     3A 00 00 FF 
10cf8     24 E5 85 F1 | 	sub	objptr, ##29988
10cfc     F2 FA 01 F6 | 	mov	result1, objptr
10d00     18 FA 25 F4 | 	bith	result1, #24
10d04     3A 00 00 FF 
10d08     28 E5 05 F1 | 	add	objptr, ##29992
10d0c     F2 FA 61 FC | 	wrlong	result1, objptr
10d10     3A 00 00 FF 
10d14     28 E5 85 F1 | 	sub	objptr, ##29992
10d18     F2 FA 01 F6 | 	mov	result1, objptr
10d1c     00 88 00 FF 
10d20     00 FA 45 F5 | 	or	result1, ##17825792
10d24     3A 00 00 FF 
10d28     2C E5 05 F1 | 	add	objptr, ##29996
10d2c     F2 FA 61 FC | 	wrlong	result1, objptr
10d30     3A 00 00 FF 
10d34     2C E5 85 F1 | 	sub	objptr, ##29996
10d38     F2 FA 01 F6 | 	mov	result1, objptr
10d3c     00 90 00 FF 
10d40     00 FA 45 F5 | 	or	result1, ##18874368
10d44     3A 00 00 FF 
10d48     30 E5 05 F1 | 	add	objptr, ##30000
10d4c     F2 FA 61 FC | 	wrlong	result1, objptr
10d50     3A 00 00 FF 
10d54     30 E5 85 F1 | 	sub	objptr, ##30000
10d58     F2 FA 01 F6 | 	mov	result1, objptr
10d5c     00 98 00 FF 
10d60     00 FA 45 F5 | 	or	result1, ##19922944
10d64     3A 00 00 FF 
10d68     34 E5 05 F1 | 	add	objptr, ##30004
10d6c     F2 FA 61 FC | 	wrlong	result1, objptr
10d70     3A 00 00 FF 
10d74     34 E5 85 F1 | 	sub	objptr, ##30004
10d78     F2 FA 01 F6 | 	mov	result1, objptr
10d7c     00 A0 00 FF 
10d80     00 FA 45 F5 | 	or	result1, ##20971520
10d84     3A 00 00 FF 
10d88     38 E5 05 F1 | 	add	objptr, ##30008
10d8c     F2 FA 61 FC | 	wrlong	result1, objptr
10d90     3A 00 00 FF 
10d94     38 E5 85 F1 | 	sub	objptr, ##30008
10d98     F2 FA 01 F6 | 	mov	result1, objptr
10d9c     00 A8 00 FF 
10da0     00 FA 45 F5 | 	or	result1, ##22020096
10da4     3A 00 00 FF 
10da8     3C E5 05 F1 | 	add	objptr, ##30012
10dac     F2 FA 61 FC | 	wrlong	result1, objptr
10db0     3A 00 00 FF 
10db4     3C E5 85 F1 | 	sub	objptr, ##30012
10db8     F2 FA 01 F6 | 	mov	result1, objptr
10dbc     00 B0 00 FF 
10dc0     00 FA 45 F5 | 	or	result1, ##23068672
10dc4     3A 00 00 FF 
10dc8     40 E5 05 F1 | 	add	objptr, ##30016
10dcc     F2 FA 61 FC | 	wrlong	result1, objptr
10dd0     3A 00 00 FF 
10dd4     40 E5 85 F1 | 	sub	objptr, ##30016
10dd8     F2 FA 01 F6 | 	mov	result1, objptr
10ddc     00 B8 00 FF 
10de0     00 FA 45 F5 | 	or	result1, ##24117248
10de4     3A 00 00 FF 
10de8     44 E5 05 F1 | 	add	objptr, ##30020
10dec     F2 FA 61 FC | 	wrlong	result1, objptr
10df0     3A 00 00 FF 
10df4     44 E5 85 F1 | 	sub	objptr, ##30020
10df8     F2 FA 01 F6 | 	mov	result1, objptr
10dfc     37 FA 25 F4 | 	bith	result1, #55
10e00     3A 00 00 FF 
10e04     48 E5 05 F1 | 	add	objptr, ##30024
10e08     F2 FA 61 FC | 	wrlong	result1, objptr
10e0c     3A 00 00 FF 
10e10     48 E5 85 F1 | 	sub	objptr, ##30024
10e14     F2 FA 01 F6 | 	mov	result1, objptr
10e18     00 C8 00 FF 
10e1c     00 FA 45 F5 | 	or	result1, ##26214400
10e20     3A 00 00 FF 
10e24     4C E5 05 F1 | 	add	objptr, ##30028
10e28     F2 FA 61 FC | 	wrlong	result1, objptr
10e2c     3A 00 00 FF 
10e30     4C E5 85 F1 | 	sub	objptr, ##30028
10e34     F2 FA 01 F6 | 	mov	result1, objptr
10e38     00 D0 00 FF 
10e3c     00 FA 45 F5 | 	or	result1, ##27262976
10e40     3A 00 00 FF 
10e44     50 E5 05 F1 | 	add	objptr, ##30032
10e48     F2 FA 61 FC | 	wrlong	result1, objptr
10e4c     3A 00 00 FF 
10e50     50 E5 85 F1 | 	sub	objptr, ##30032
10e54     F2 FA 01 F6 | 	mov	result1, objptr
10e58     00 D8 00 FF 
10e5c     00 FA 45 F5 | 	or	result1, ##28311552
10e60     3A 00 00 FF 
10e64     54 E5 05 F1 | 	add	objptr, ##30036
10e68     F2 FA 61 FC | 	wrlong	result1, objptr
10e6c     3A 00 00 FF 
10e70     54 E5 85 F1 | 	sub	objptr, ##30036
10e74     F2 FA 01 F6 | 	mov	result1, objptr
10e78     56 FA 25 F4 | 	bith	result1, #86
10e7c     3A 00 00 FF 
10e80     58 E5 05 F1 | 	add	objptr, ##30040
10e84     F2 FA 61 FC | 	wrlong	result1, objptr
10e88     3A 00 00 FF 
10e8c     58 E5 85 F1 | 	sub	objptr, ##30040
10e90     F2 FA 01 F6 | 	mov	result1, objptr
10e94     00 E8 00 FF 
10e98     00 FA 45 F5 | 	or	result1, ##30408704
10e9c     3C 00 00 FF 
10ea0     20 E4 05 F1 | 	add	objptr, ##30752
10ea4     F2 FA 61 FC | 	wrlong	result1, objptr
10ea8     3C 00 00 FF 
10eac     20 E4 85 F1 | 	sub	objptr, ##30752
10eb0     F2 FA 01 F6 | 	mov	result1, objptr
10eb4     75 FA 25 F4 | 	bith	result1, #117
10eb8     3A 00 00 FF 
10ebc     5C E5 05 F1 | 	add	objptr, ##30044
10ec0     F2 FA 61 FC | 	wrlong	result1, objptr
10ec4     3A 00 00 FF 
10ec8     5C E5 85 F1 | 	sub	objptr, ##30044
10ecc     F2 FA 01 F6 | 	mov	result1, objptr
10ed0     94 FA 25 F4 | 	bith	result1, #148
10ed4     3A 00 00 FF 
10ed8     70 E5 05 F1 | 	add	objptr, ##30064
10edc     F2 FA 61 FC | 	wrlong	result1, objptr
10ee0     3A 00 00 FF 
10ee4     70 E5 85 F1 | 	sub	objptr, ##30064
10ee8     F2 FA 01 F6 | 	mov	result1, objptr
10eec     19 FA 25 F4 | 	bith	result1, #25
10ef0     3A 00 00 FF 
10ef4     60 E5 05 F1 | 	add	objptr, ##30048
10ef8     F2 FA 61 FC | 	wrlong	result1, objptr
10efc     3A 00 00 FF 
10f00     60 E5 85 F1 | 	sub	objptr, ##30048
10f04     F2 FA 01 F6 | 	mov	result1, objptr
10f08     00 08 01 FF 
10f0c     00 FA 45 F5 | 	or	result1, ##34603008
10f10     3A 00 00 FF 
10f14     7C E4 05 F1 | 	add	objptr, ##29820
10f18     F2 FA 61 FC | 	wrlong	result1, objptr
10f1c     3A 00 00 FF 
10f20     7C E4 85 F1 | 	sub	objptr, ##29820
10f24     F2 FA 01 F6 | 	mov	result1, objptr
10f28     00 10 01 FF 
10f2c     00 FA 45 F5 | 	or	result1, ##35651584
10f30     3A 00 00 FF 
10f34     64 E5 05 F1 | 	add	objptr, ##30052
10f38     F2 FA 61 FC | 	wrlong	result1, objptr
10f3c     3A 00 00 FF 
10f40     64 E5 85 F1 | 	sub	objptr, ##30052
10f44     F2 FA 01 F6 | 	mov	result1, objptr
10f48     00 18 01 FF 
10f4c     00 FA 45 F5 | 	or	result1, ##36700160
10f50     3A 00 00 FF 
10f54     68 E5 05 F1 | 	add	objptr, ##30056
10f58     F2 FA 61 FC | 	wrlong	result1, objptr
10f5c     3A 00 00 FF 
10f60     68 E5 85 F1 | 	sub	objptr, ##30056
10f64     F2 FA 01 F6 | 	mov	result1, objptr
10f68     00 20 01 FF 
10f6c     00 FA 45 F5 | 	or	result1, ##37748736
10f70     3A 00 00 FF 
10f74     6C E5 05 F1 | 	add	objptr, ##30060
10f78     F2 FA 61 FC | 	wrlong	result1, objptr
10f7c     3A 00 00 FF 
10f80     6C E5 85 F1 | 	sub	objptr, ##30060
10f84     F2 FA 01 F6 | 	mov	result1, objptr
10f88     00 28 01 FF 
10f8c     00 FA 45 F5 | 	or	result1, ##38797312
10f90     3A 00 00 FF 
10f94     78 E5 05 F1 | 	add	objptr, ##30072
10f98     F2 FA 61 FC | 	wrlong	result1, objptr
10f9c     3A 00 00 FF 
10fa0     78 E5 85 F1 | 	sub	objptr, ##30072
10fa4     F2 FA 01 F6 | 	mov	result1, objptr
10fa8     00 30 01 FF 
10fac     00 FA 45 F5 | 	or	result1, ##39845888
10fb0     3A 00 00 FF 
10fb4     7C E5 05 F1 | 	add	objptr, ##30076
10fb8     F2 FA 61 FC | 	wrlong	result1, objptr
10fbc     3A 00 00 FF 
10fc0     7C E5 85 F1 | 	sub	objptr, ##30076
10fc4     F2 FA 01 F6 | 	mov	result1, objptr
10fc8     00 38 01 FF 
10fcc     00 FA 45 F5 | 	or	result1, ##40894464
10fd0     3A 00 00 FF 
10fd4     80 E5 05 F1 | 	add	objptr, ##30080
10fd8     F2 FA 61 FC | 	wrlong	result1, objptr
10fdc     3A 00 00 FF 
10fe0     80 E5 85 F1 | 	sub	objptr, ##30080
10fe4     F2 FA 01 F6 | 	mov	result1, objptr
10fe8     00 40 01 FF 
10fec     00 FA 45 F5 | 	or	result1, ##41943040
10ff0     3A 00 00 FF 
10ff4     84 E5 05 F1 | 	add	objptr, ##30084
10ff8     F2 FA 61 FC | 	wrlong	result1, objptr
10ffc     3A 00 00 FF 
11000     84 E5 85 F1 | 	sub	objptr, ##30084
11004     F2 FA 01 F6 | 	mov	result1, objptr
11008     00 48 01 FF 
1100c     00 FA 45 F5 | 	or	result1, ##42991616
11010     3A 00 00 FF 
11014     8C E5 05 F1 | 	add	objptr, ##30092
11018     F2 FA 61 FC | 	wrlong	result1, objptr
1101c     3A 00 00 FF 
11020     8C E5 85 F1 | 	sub	objptr, ##30092
11024     F2 FA 01 F6 | 	mov	result1, objptr
11028     00 50 01 FF 
1102c     00 FA 45 F5 | 	or	result1, ##44040192
11030     3A 00 00 FF 
11034     90 E5 05 F1 | 	add	objptr, ##30096
11038     F2 FA 61 FC | 	wrlong	result1, objptr
1103c     3A 00 00 FF 
11040     90 E5 85 F1 | 	sub	objptr, ##30096
11044     F2 FA 01 F6 | 	mov	result1, objptr
11048     00 58 01 FF 
1104c     00 FA 45 F5 | 	or	result1, ##45088768
11050     3A 00 00 FF 
11054     90 E4 05 F1 | 	add	objptr, ##29840
11058     F2 FA 61 FC | 	wrlong	result1, objptr
1105c     3A 00 00 FF 
11060     90 E4 85 F1 | 	sub	objptr, ##29840
11064     F2 FA 01 F6 | 	mov	result1, objptr
11068     00 60 01 FF 
1106c     00 FA 45 F5 | 	or	result1, ##46137344
11070     3A 00 00 FF 
11074     C0 E4 05 F1 | 	add	objptr, ##29888
11078     F2 FA 61 FC | 	wrlong	result1, objptr
1107c     3A 00 00 FF 
11080     C0 E4 85 F1 | 	sub	objptr, ##29888
11084     F2 FA 01 F6 | 	mov	result1, objptr
11088     00 68 01 FF 
1108c     00 FA 45 F5 | 	or	result1, ##47185920
11090     3A 00 00 FF 
11094     BC E4 05 F1 | 	add	objptr, ##29884
11098     F2 FA 61 FC | 	wrlong	result1, objptr
1109c     3A 00 00 FF 
110a0     BC E4 85 F1 | 	sub	objptr, ##29884
110a4     F2 FA 01 F6 | 	mov	result1, objptr
110a8     00 70 01 FF 
110ac     00 FA 45 F5 | 	or	result1, ##48234496
110b0     3A 00 00 FF 
110b4     60 E4 05 F1 | 	add	objptr, ##29792
110b8     F2 FA 61 FC | 	wrlong	result1, objptr
110bc     3A 00 00 FF 
110c0     60 E4 85 F1 | 	sub	objptr, ##29792
110c4     F2 FA 01 F6 | 	mov	result1, objptr
110c8     00 78 01 FF 
110cc     00 FA 45 F5 | 	or	result1, ##49283072
110d0     3A 00 00 FF 
110d4     64 E4 05 F1 | 	add	objptr, ##29796
110d8     F2 FA 61 FC | 	wrlong	result1, objptr
110dc     3A 00 00 FF 
110e0     64 E4 85 F1 | 	sub	objptr, ##29796
110e4     F2 FA 01 F6 | 	mov	result1, objptr
110e8     38 FA 25 F4 | 	bith	result1, #56
110ec     3A 00 00 FF 
110f0     CC E4 05 F1 | 	add	objptr, ##29900
110f4     F2 FA 61 FC | 	wrlong	result1, objptr
110f8     3A 00 00 FF 
110fc     CC E4 85 F1 | 	sub	objptr, ##29900
11100     F2 FA 01 F6 | 	mov	result1, objptr
11104     00 88 01 FF 
11108     00 FA 45 F5 | 	or	result1, ##51380224
1110c     3A 00 00 FF 
11110     74 E5 05 F1 | 	add	objptr, ##30068
11114     F2 FA 61 FC | 	wrlong	result1, objptr
11118     3A 00 00 FF 
1111c     74 E5 85 F1 | 	sub	objptr, ##30068
11120     F2 FA 01 F6 | 	mov	result1, objptr
11124     00 90 01 FF 
11128     00 FA 45 F5 | 	or	result1, ##52428800
1112c     3A 00 00 FF 
11130     88 E5 05 F1 | 	add	objptr, ##30088
11134     F2 FA 61 FC | 	wrlong	result1, objptr
11138     3A 00 00 FF 
1113c     88 E5 85 F1 | 	sub	objptr, ##30088
11140     F2 FA 01 F6 | 	mov	result1, objptr
11144     00 98 01 FF 
11148     00 FA 45 F5 | 	or	result1, ##53477376
1114c     3A 00 00 FF 
11150     94 E5 05 F1 | 	add	objptr, ##30100
11154     F2 FA 61 FC | 	wrlong	result1, objptr
11158     3A 00 00 FF 
1115c     94 E5 85 F1 | 	sub	objptr, ##30100
11160     F2 FA 01 F6 | 	mov	result1, objptr
11164     00 A0 01 FF 
11168     00 FA 45 F5 | 	or	result1, ##54525952
1116c     3A 00 00 FF 
11170     98 E5 05 F1 | 	add	objptr, ##30104
11174     F2 FA 61 FC | 	wrlong	result1, objptr
11178     3A 00 00 FF 
1117c     98 E5 85 F1 | 	sub	objptr, ##30104
11180     F2 FA 01 F6 | 	mov	result1, objptr
11184     00 A8 01 FF 
11188     00 FA 45 F5 | 	or	result1, ##55574528
1118c     3A 00 00 FF 
11190     9C E5 05 F1 | 	add	objptr, ##30108
11194     F2 FA 61 FC | 	wrlong	result1, objptr
11198     3A 00 00 FF 
1119c     9C E5 85 F1 | 	sub	objptr, ##30108
111a0     F2 FA 01 F6 | 	mov	result1, objptr
111a4     00 B0 01 FF 
111a8     00 FA 45 F5 | 	or	result1, ##56623104
111ac     3A 00 00 FF 
111b0     A0 E5 05 F1 | 	add	objptr, ##30112
111b4     F2 FA 61 FC | 	wrlong	result1, objptr
111b8     3A 00 00 FF 
111bc     A0 E5 85 F1 | 	sub	objptr, ##30112
111c0     F2 FA 01 F6 | 	mov	result1, objptr
111c4     00 B8 01 FF 
111c8     00 FA 45 F5 | 	or	result1, ##57671680
111cc     3A 00 00 FF 
111d0     A4 E5 05 F1 | 	add	objptr, ##30116
111d4     F2 FA 61 FC | 	wrlong	result1, objptr
111d8     3A 00 00 FF 
111dc     A4 E5 85 F1 | 	sub	objptr, ##30116
111e0     F2 FA 01 F6 | 	mov	result1, objptr
111e4     57 FA 25 F4 | 	bith	result1, #87
111e8     3A 00 00 FF 
111ec     A8 E5 05 F1 | 	add	objptr, ##30120
111f0     F2 FA 61 FC | 	wrlong	result1, objptr
111f4     3A 00 00 FF 
111f8     A8 E5 85 F1 | 	sub	objptr, ##30120
111fc     F2 FA 01 F6 | 	mov	result1, objptr
11200     94 FA 25 F4 | 	bith	result1, #148
11204     3A 00 00 FF 
11208     70 E5 05 F1 | 	add	objptr, ##30064
1120c     F2 FA 61 FC | 	wrlong	result1, objptr
11210     3A 00 00 FF 
11214     70 E5 85 F1 | 	sub	objptr, ##30064
11218     F2 FA 01 F6 | 	mov	result1, objptr
1121c     00 C8 01 FF 
11220     00 FA 45 F5 | 	or	result1, ##59768832
11224     3A 00 00 FF 
11228     B0 E5 05 F1 | 	add	objptr, ##30128
1122c     F2 FA 61 FC | 	wrlong	result1, objptr
11230     3A 00 00 FF 
11234     B0 E5 85 F1 | 	sub	objptr, ##30128
11238     F2 FA 01 F6 | 	mov	result1, objptr
1123c     00 D0 01 FF 
11240     00 FA 45 F5 | 	or	result1, ##60817408
11244     3A 00 00 FF 
11248     AC E5 05 F1 | 	add	objptr, ##30124
1124c     F2 FA 61 FC | 	wrlong	result1, objptr
11250     3A 00 00 FF 
11254     AC E5 85 F1 | 	sub	objptr, ##30124
11258     F2 FA 01 F6 | 	mov	result1, objptr
1125c     00 D8 01 FF 
11260     00 FA 45 F5 | 	or	result1, ##61865984
11264     3A 00 00 FF 
11268     C4 E5 05 F1 | 	add	objptr, ##30148
1126c     F2 FA 61 FC | 	wrlong	result1, objptr
11270     3A 00 00 FF 
11274     C4 E5 85 F1 | 	sub	objptr, ##30148
11278     F2 FA 01 F6 | 	mov	result1, objptr
1127c     76 FA 25 F4 | 	bith	result1, #118
11280     3A 00 00 FF 
11284     C8 E5 05 F1 | 	add	objptr, ##30152
11288     F2 FA 61 FC | 	wrlong	result1, objptr
1128c     3A 00 00 FF 
11290     C8 E5 85 F1 | 	sub	objptr, ##30152
11294     F2 FA 01 F6 | 	mov	result1, objptr
11298     00 E8 01 FF 
1129c     00 FA 45 F5 | 	or	result1, ##63963136
112a0     3A 00 00 FF 
112a4     B4 E5 05 F1 | 	add	objptr, ##30132
112a8     F2 FA 61 FC | 	wrlong	result1, objptr
112ac     3A 00 00 FF 
112b0     B4 E5 85 F1 | 	sub	objptr, ##30132
112b4     F2 FA 01 F6 | 	mov	result1, objptr
112b8     95 FA 25 F4 | 	bith	result1, #149
112bc     3A 00 00 FF 
112c0     B8 E5 05 F1 | 	add	objptr, ##30136
112c4     F2 FA 61 FC | 	wrlong	result1, objptr
112c8     3A 00 00 FF 
112cc     B8 E5 85 F1 | 	sub	objptr, ##30136
112d0     F2 FA 01 F6 | 	mov	result1, objptr
112d4     B4 FA 25 F4 | 	bith	result1, #180
112d8     3A 00 00 FF 
112dc     BC E5 05 F1 | 	add	objptr, ##30140
112e0     F2 FA 61 FC | 	wrlong	result1, objptr
112e4     3A 00 00 FF 
112e8     BC E5 85 F1 | 	sub	objptr, ##30140
112ec     F2 FA 01 F6 | 	mov	result1, objptr
112f0     1A FA 25 F4 | 	bith	result1, #26
112f4     3A 00 00 FF 
112f8     C0 E5 05 F1 | 	add	objptr, ##30144
112fc     F2 FA 61 FC | 	wrlong	result1, objptr
11300     3A 00 00 FF 
11304     C0 E5 85 F1 | 	sub	objptr, ##30144
11308     F2 FA 01 F6 | 	mov	result1, objptr
1130c     00 08 02 FF 
11310     00 FA 45 F5 | 	or	result1, ##68157440
11314     3A 00 00 FF 
11318     D0 E5 05 F1 | 	add	objptr, ##30160
1131c     F2 FA 61 FC | 	wrlong	result1, objptr
11320     3A 00 00 FF 
11324     D0 E5 85 F1 | 	sub	objptr, ##30160
11328     F2 FA 01 F6 | 	mov	result1, objptr
1132c     00 10 02 FF 
11330     00 FA 45 F5 | 	or	result1, ##69206016
11334     3A 00 00 FF 
11338     CC E5 05 F1 | 	add	objptr, ##30156
1133c     F2 FA 61 FC | 	wrlong	result1, objptr
11340     3A 00 00 FF 
11344     CC E5 85 F1 | 	sub	objptr, ##30156
11348     F2 FA 01 F6 | 	mov	result1, objptr
1134c     00 18 02 FF 
11350     00 FA 45 F5 | 	or	result1, ##70254592
11354     3A 00 00 FF 
11358     DC E5 05 F1 | 	add	objptr, ##30172
1135c     F2 FA 61 FC | 	wrlong	result1, objptr
11360     3A 00 00 FF 
11364     DC E5 85 F1 | 	sub	objptr, ##30172
11368     F2 FA 01 F6 | 	mov	result1, objptr
1136c     00 20 02 FF 
11370     00 FA 45 F5 | 	or	result1, ##71303168
11374     3A 00 00 FF 
11378     D8 E5 05 F1 | 	add	objptr, ##30168
1137c     F2 FA 61 FC | 	wrlong	result1, objptr
11380     3A 00 00 FF 
11384     D8 E5 85 F1 | 	sub	objptr, ##30168
11388     F2 FA 01 F6 | 	mov	result1, objptr
1138c     00 28 02 FF 
11390     00 FA 45 F5 | 	or	result1, ##72351744
11394     3A 00 00 FF 
11398     D4 E5 05 F1 | 	add	objptr, ##30164
1139c     F2 FA 61 FC | 	wrlong	result1, objptr
113a0     3A 00 00 FF 
113a4     D4 E5 85 F1 | 	sub	objptr, ##30164
113a8     F2 FA 01 F6 | 	mov	result1, objptr
113ac     00 30 02 FF 
113b0     00 FA 45 F5 | 	or	result1, ##73400320
113b4     3A 00 00 FF 
113b8     E0 E5 05 F1 | 	add	objptr, ##30176
113bc     F2 FA 61 FC | 	wrlong	result1, objptr
113c0     3A 00 00 FF 
113c4     E0 E5 85 F1 | 	sub	objptr, ##30176
113c8     F2 FA 01 F6 | 	mov	result1, objptr
113cc     00 38 02 FF 
113d0     00 FA 45 F5 | 	or	result1, ##74448896
113d4     3A 00 00 FF 
113d8     E4 E5 05 F1 | 	add	objptr, ##30180
113dc     F2 FA 61 FC | 	wrlong	result1, objptr
113e0     3A 00 00 FF 
113e4     E4 E5 85 F1 | 	sub	objptr, ##30180
113e8     F2 FA 01 F6 | 	mov	result1, objptr
113ec     00 40 02 FF 
113f0     00 FA 45 F5 | 	or	result1, ##75497472
113f4     3A 00 00 FF 
113f8     78 E4 05 F1 | 	add	objptr, ##29816
113fc     F2 FA 61 FC | 	wrlong	result1, objptr
11400     3A 00 00 FF 
11404     78 E4 85 F1 | 	sub	objptr, ##29816
11408     F2 FA 01 F6 | 	mov	result1, objptr
1140c     00 48 02 FF 
11410     00 FA 45 F5 | 	or	result1, ##76546048
11414     3A 00 00 FF 
11418     E8 E5 05 F1 | 	add	objptr, ##30184
1141c     F2 FA 61 FC | 	wrlong	result1, objptr
11420     3A 00 00 FF 
11424     E8 E5 85 F1 | 	sub	objptr, ##30184
11428                 | _init_commands_ret
11428     2D 00 64 FD | 	ret
1142c                 | 
1142c                 | ' 
1142c                 | ' ''--------------------------------Error strings -------------------------------------
1142c                 | ' 
1142c                 | ' sub init_error_strings
1142c                 | _init_error_strings
1142c     21 01 00 FF 
11430     AE 00 06 F6 | 	mov	_var01, ##@LR__4324
11434     3C 00 00 FF 
11438     40 E4 05 F1 | 	add	objptr, ##30784
1143c     F2 00 62 FC | 	wrlong	_var01, objptr
11440     21 01 00 FF 
11444     AF 00 06 F6 | 	mov	_var01, ##@LR__4325
11448     04 E4 05 F1 | 	add	objptr, #4
1144c     F2 00 62 FC | 	wrlong	_var01, objptr
11450     21 01 00 FF 
11454     D4 00 06 F6 | 	mov	_var01, ##@LR__4326
11458     04 E4 05 F1 | 	add	objptr, #4
1145c     F2 00 62 FC | 	wrlong	_var01, objptr
11460     21 01 00 FF 
11464     F5 00 06 F6 | 	mov	_var01, ##@LR__4327
11468     04 E4 05 F1 | 	add	objptr, #4
1146c     F2 00 62 FC | 	wrlong	_var01, objptr
11470     21 01 00 FF 
11474     0F 01 06 F6 | 	mov	_var01, ##@LR__4328
11478     04 E4 05 F1 | 	add	objptr, #4
1147c     F2 00 62 FC | 	wrlong	_var01, objptr
11480     21 01 00 FF 
11484     2B 01 06 F6 | 	mov	_var01, ##@LR__4329
11488     04 E4 05 F1 | 	add	objptr, #4
1148c     F2 00 62 FC | 	wrlong	_var01, objptr
11490     21 01 00 FF 
11494     4D 01 06 F6 | 	mov	_var01, ##@LR__4330
11498     04 E4 05 F1 | 	add	objptr, #4
1149c     F2 00 62 FC | 	wrlong	_var01, objptr
114a0     21 01 00 FF 
114a4     7B 01 06 F6 | 	mov	_var01, ##@LR__4331
114a8     04 E4 05 F1 | 	add	objptr, #4
114ac     F2 00 62 FC | 	wrlong	_var01, objptr
114b0     21 01 00 FF 
114b4     A6 01 06 F6 | 	mov	_var01, ##@LR__4332
114b8     04 E4 05 F1 | 	add	objptr, #4
114bc     F2 00 62 FC | 	wrlong	_var01, objptr
114c0     21 01 00 FF 
114c4     BF 01 06 F6 | 	mov	_var01, ##@LR__4333
114c8     04 E4 05 F1 | 	add	objptr, #4
114cc     F2 00 62 FC | 	wrlong	_var01, objptr
114d0     21 01 00 FF 
114d4     E0 01 06 F6 | 	mov	_var01, ##@LR__4334
114d8     04 E4 05 F1 | 	add	objptr, #4
114dc     F2 00 62 FC | 	wrlong	_var01, objptr
114e0     21 01 00 FF 
114e4     F7 01 06 F6 | 	mov	_var01, ##@LR__4335
114e8     04 E4 05 F1 | 	add	objptr, #4
114ec     F2 00 62 FC | 	wrlong	_var01, objptr
114f0     22 01 00 FF 
114f4     15 00 06 F6 | 	mov	_var01, ##@LR__4336
114f8     04 E4 05 F1 | 	add	objptr, #4
114fc     F2 00 62 FC | 	wrlong	_var01, objptr
11500     22 01 00 FF 
11504     39 00 06 F6 | 	mov	_var01, ##@LR__4337
11508     04 E4 05 F1 | 	add	objptr, #4
1150c     F2 00 62 FC | 	wrlong	_var01, objptr
11510     22 01 00 FF 
11514     60 00 06 F6 | 	mov	_var01, ##@LR__4338
11518     04 E4 05 F1 | 	add	objptr, #4
1151c     F2 00 62 FC | 	wrlong	_var01, objptr
11520     22 01 00 FF 
11524     7C 00 06 F6 | 	mov	_var01, ##@LR__4339
11528     04 E4 05 F1 | 	add	objptr, #4
1152c     F2 00 62 FC | 	wrlong	_var01, objptr
11530     22 01 00 FF 
11534     8D 00 06 F6 | 	mov	_var01, ##@LR__4340
11538     04 E4 05 F1 | 	add	objptr, #4
1153c     F2 00 62 FC | 	wrlong	_var01, objptr
11540     22 01 00 FF 
11544     9D 00 06 F6 | 	mov	_var01, ##@LR__4341
11548     04 E4 05 F1 | 	add	objptr, #4
1154c     F2 00 62 FC | 	wrlong	_var01, objptr
11550     22 01 00 FF 
11554     B8 00 06 F6 | 	mov	_var01, ##@LR__4342
11558     04 E4 05 F1 | 	add	objptr, #4
1155c     F2 00 62 FC | 	wrlong	_var01, objptr
11560     22 01 00 FF 
11564     CA 00 06 F6 | 	mov	_var01, ##@LR__4343
11568     04 E4 05 F1 | 	add	objptr, #4
1156c     F2 00 62 FC | 	wrlong	_var01, objptr
11570     22 01 00 FF 
11574     E2 00 06 F6 | 	mov	_var01, ##@LR__4344
11578     04 E4 05 F1 | 	add	objptr, #4
1157c     F2 00 62 FC | 	wrlong	_var01, objptr
11580     22 01 00 FF 
11584     F6 00 06 F6 | 	mov	_var01, ##@LR__4345
11588     04 E4 05 F1 | 	add	objptr, #4
1158c     F2 00 62 FC | 	wrlong	_var01, objptr
11590     22 01 00 FF 
11594     06 01 06 F6 | 	mov	_var01, ##@LR__4346
11598     04 E4 05 F1 | 	add	objptr, #4
1159c     F2 00 62 FC | 	wrlong	_var01, objptr
115a0     22 01 00 FF 
115a4     23 01 06 F6 | 	mov	_var01, ##@LR__4347
115a8     04 E4 05 F1 | 	add	objptr, #4
115ac     F2 00 62 FC | 	wrlong	_var01, objptr
115b0     22 01 00 FF 
115b4     34 01 06 F6 | 	mov	_var01, ##@LR__4348
115b8     04 E4 05 F1 | 	add	objptr, #4
115bc     F2 00 62 FC | 	wrlong	_var01, objptr
115c0     22 01 00 FF 
115c4     45 01 06 F6 | 	mov	_var01, ##@LR__4349
115c8     04 E4 05 F1 | 	add	objptr, #4
115cc     F2 00 62 FC | 	wrlong	_var01, objptr
115d0     22 01 00 FF 
115d4     70 01 06 F6 | 	mov	_var01, ##@LR__4350
115d8     04 E4 05 F1 | 	add	objptr, #4
115dc     F2 00 62 FC | 	wrlong	_var01, objptr
115e0     22 01 00 FF 
115e4     8C 01 06 F6 | 	mov	_var01, ##@LR__4351
115e8     04 E4 05 F1 | 	add	objptr, #4
115ec     F2 00 62 FC | 	wrlong	_var01, objptr
115f0     22 01 00 FF 
115f4     A2 01 06 F6 | 	mov	_var01, ##@LR__4352
115f8     04 E4 05 F1 | 	add	objptr, #4
115fc     F2 00 62 FC | 	wrlong	_var01, objptr
11600     22 01 00 FF 
11604     AF 01 06 F6 | 	mov	_var01, ##@LR__4353
11608     04 E4 05 F1 | 	add	objptr, #4
1160c     F2 00 62 FC | 	wrlong	_var01, objptr
11610     22 01 00 FF 
11614     C1 01 06 F6 | 	mov	_var01, ##@LR__4354
11618     04 E4 05 F1 | 	add	objptr, #4
1161c     F2 00 62 FC | 	wrlong	_var01, objptr
11620     22 01 00 FF 
11624     D2 01 06 F6 | 	mov	_var01, ##@LR__4355
11628     04 E4 05 F1 | 	add	objptr, #4
1162c     F2 00 62 FC | 	wrlong	_var01, objptr
11630     22 01 00 FF 
11634     EE 01 06 F6 | 	mov	_var01, ##@LR__4356
11638     04 E4 05 F1 | 	add	objptr, #4
1163c     F2 00 62 FC | 	wrlong	_var01, objptr
11640     22 01 00 FF 
11644     FF 01 06 F6 | 	mov	_var01, ##@LR__4357
11648     04 E4 05 F1 | 	add	objptr, #4
1164c     F2 00 62 FC | 	wrlong	_var01, objptr
11650     23 01 00 FF 
11654     0E 00 06 F6 | 	mov	_var01, ##@LR__4358
11658     04 E4 05 F1 | 	add	objptr, #4
1165c     F2 00 62 FC | 	wrlong	_var01, objptr
11660     23 01 00 FF 
11664     29 00 06 F6 | 	mov	_var01, ##@LR__4359
11668     04 E4 05 F1 | 	add	objptr, #4
1166c     F2 00 62 FC | 	wrlong	_var01, objptr
11670     23 01 00 FF 
11674     5D 00 06 F6 | 	mov	_var01, ##@LR__4360
11678     04 E4 05 F1 | 	add	objptr, #4
1167c     F2 00 62 FC | 	wrlong	_var01, objptr
11680     23 01 00 FF 
11684     76 00 06 F6 | 	mov	_var01, ##@LR__4361
11688     04 E4 05 F1 | 	add	objptr, #4
1168c     F2 00 62 FC | 	wrlong	_var01, objptr
11690     23 01 00 FF 
11694     92 00 06 F6 | 	mov	_var01, ##@LR__4362
11698     04 E4 05 F1 | 	add	objptr, #4
1169c     F2 00 62 FC | 	wrlong	_var01, objptr
116a0     23 01 00 FF 
116a4     B0 00 06 F6 | 	mov	_var01, ##@LR__4363
116a8     04 E4 05 F1 | 	add	objptr, #4
116ac     F2 00 62 FC | 	wrlong	_var01, objptr
116b0     23 01 00 FF 
116b4     C9 00 06 F6 | 	mov	_var01, ##@LR__4364
116b8     04 E4 05 F1 | 	add	objptr, #4
116bc     F2 00 62 FC | 	wrlong	_var01, objptr
116c0     23 01 00 FF 
116c4     E8 00 06 F6 | 	mov	_var01, ##@LR__4365
116c8     04 E4 05 F1 | 	add	objptr, #4
116cc     F2 00 62 FC | 	wrlong	_var01, objptr
116d0     23 01 00 FF 
116d4     F7 00 06 F6 | 	mov	_var01, ##@LR__4366
116d8     04 E4 05 F1 | 	add	objptr, #4
116dc     F2 00 62 FC | 	wrlong	_var01, objptr
116e0     23 01 00 FF 
116e4     25 01 06 F6 | 	mov	_var01, ##@LR__4367
116e8     04 E4 05 F1 | 	add	objptr, #4
116ec     F2 00 62 FC | 	wrlong	_var01, objptr
116f0     23 01 00 FF 
116f4     33 01 06 F6 | 	mov	_var01, ##@LR__4368
116f8     04 E4 05 F1 | 	add	objptr, #4
116fc     F2 00 62 FC | 	wrlong	_var01, objptr
11700     23 01 00 FF 
11704     48 01 06 F6 | 	mov	_var01, ##@LR__4369
11708     04 E4 05 F1 | 	add	objptr, #4
1170c     F2 00 62 FC | 	wrlong	_var01, objptr
11710     23 01 00 FF 
11714     6C 01 06 F6 | 	mov	_var01, ##@LR__4370
11718     04 E4 05 F1 | 	add	objptr, #4
1171c     F2 00 62 FC | 	wrlong	_var01, objptr
11720     23 01 00 FF 
11724     83 01 06 F6 | 	mov	_var01, ##@LR__4371
11728     04 E4 05 F1 | 	add	objptr, #4
1172c     F2 00 62 FC | 	wrlong	_var01, objptr
11730     23 01 00 FF 
11734     96 01 06 F6 | 	mov	_var01, ##@LR__4372
11738     04 E4 05 F1 | 	add	objptr, #4
1173c     F2 00 62 FC | 	wrlong	_var01, objptr
11740     3C 00 00 FF 
11744     00 E5 85 F1 | 	sub	objptr, ##30976
11748                 | _init_error_strings_ret
11748     2D 00 64 FD | 	ret
1174c                 | 
1174c                 | '         
1174c                 | ' sub printerror(err as integer)
1174c                 | _printerror
1174c     01 4A 05 F6 | 	mov	COUNT_, #1
11750     A8 00 A0 FD | 	call	#pushregs_
11754     09 1F 02 F6 | 	mov	local01, arg01
11758     23 01 00 FF 
1175c     AD 13 06 F6 | 	mov	arg01, ##@LR__4373
11760     B8 24 B0 FD | 	call	#_hg010b_spin2_write
11764     0F 13 02 F6 | 	mov	arg01, local01
11768     B0 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1176c     FD 12 02 F6 | 	mov	arg01, result1
11770     A8 24 B0 FD | 	call	#_hg010b_spin2_write
11774     23 01 00 FF 
11778     B4 13 06 F6 | 	mov	arg01, ##@LR__4374
1177c     9C 24 B0 FD | 	call	#_hg010b_spin2_write
11780     02 1E 66 F0 | 	shl	local01, #2
11784     3C 00 00 FF 
11788     40 E4 05 F1 | 	add	objptr, ##30784
1178c     F2 1E 02 F1 | 	add	local01, objptr
11790     0F 13 02 FB | 	rdlong	arg01, local01
11794     3C 00 00 FF 
11798     40 E4 85 F1 | 	sub	objptr, ##30784
1179c                 | ' 
1179c                 | ' write(text)
1179c     7C 24 B0 FD | 	call	#_hg010b_spin2_write
117a0                 | ' crlf
117a0     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
117a4     A7 F0 03 F6 | 	mov	ptra, fp
117a8     B2 00 A0 FD | 	call	#popregs_
117ac                 | _printerror_ret
117ac     2D 00 64 FD | 	ret
117b0                 | 
117b0                 | ' 
117b0                 | ' '' ------------------------------- Hardware start/stop/initialization 
117b0                 | ' 
117b0                 | ' sub startpsram
117b0                 | _startpsram
117b0     00 12 06 F6 | 	mov	arg01, #0
117b4     0A 14 C6 F9 | 	decod	arg02, #10
117b8     0B 16 06 F6 | 	mov	arg03, #11
117bc     07 18 06 F6 | 	mov	arg04, #7
117c0     0B 00 00 FF 
117c4     C0 E4 05 F1 | 	add	objptr, ##5824
117c8     5C 27 B0 FD | 	call	#_psram_spin2_startx
117cc     22 00 00 FF 
117d0     0C E5 05 F1 | 	add	objptr, ##17676
117d4     F2 FA 61 FC | 	wrlong	result1, objptr
117d8                 | '     return $7FF00 + cog*12
117d8     0C E4 05 F1 | 	add	objptr, #12
117dc     FF 03 80 FF 
117e0     F2 00 6A FC | 	wrlong	##524032, objptr
117e4     2D 00 00 FF 
117e8     D8 E5 85 F1 | 	sub	objptr, ##23512
117ec                 | _startpsram_ret
117ec     2D 00 64 FD | 	ret
117f0                 | 
117f0                 | ' 
117f0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
117f0                 | _startvideo
117f0     01 4A 05 F6 | 	mov	COUNT_, #1
117f4     A8 00 A0 FD | 	call	#pushregs_
117f8     2D 00 00 FF 
117fc     D8 E5 05 F1 | 	add	objptr, ##23512
11800     F2 18 02 FB | 	rdlong	arg04, objptr
11804     2D 00 00 FF 
11808     D8 E5 85 F1 | 	sub	objptr, ##23512
1180c     0A 13 02 F6 | 	mov	arg01, arg02
11810     0C 15 02 F6 | 	mov	arg02, arg04
11814     18 0F B0 FD | 	call	#_hg010b_spin2_start
11818     2D 00 00 FF 
1181c     C4 E5 05 F1 | 	add	objptr, ##23492
11820     F2 FA 61 FC | 	wrlong	result1, objptr
11824                 | ' 
11824                 | ' videocog=v.start(pin,mbox)
11824                 | ' 
11824                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
11824     00 1E 06 F6 | 	mov	local01, #0
11828     22 00 00 FF 
1182c     04 E5 85 F1 | 	sub	objptr, ##17668
11830                 | LR__1470
11830     0F 13 02 F6 | 	mov	arg01, local01
11834     00 28 00 FF 
11838     00 14 06 F6 | 	mov	arg02, ##5242880
1183c     40 2B B0 FD | 	call	#_psram_spin2_setQos
11840     01 1E 06 F1 | 	add	local01, #1
11844     08 1E 56 F2 | 	cmps	local01, #8 wc
11848     E4 FF 9F CD |  if_b	jmp	#LR__1470
1184c     22 00 00 FF 
11850     04 E5 05 F1 | 	add	objptr, ##17668
11854     F2 12 02 FB | 	rdlong	arg01, objptr
11858     7A 00 02 FF 
1185c     00 14 06 F6 | 	mov	arg02, ##67171328
11860     22 00 00 FF 
11864     04 E5 85 F1 | 	sub	objptr, ##17668
11868     14 2B B0 FD | 	call	#_psram_spin2_setQos
1186c     0B 00 00 FF 
11870     C0 E4 85 F1 | 	sub	objptr, ##5824
11874                 | ' psram.setQoS(videocog, $0400f400) 
11874                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
11874     F2 14 02 F6 | 	mov	arg02, objptr
11878     00 50 02 FF 
1187c     00 14 46 F5 | 	or	arg02, ##77594624
11880     00 16 06 F6 | 	mov	arg03, #0
11884     00 18 06 F6 | 	mov	arg04, #0
11888     00 12 06 F6 | 	mov	arg01, #0
1188c     58 3E B0 FD | 	call	#__system___basic_open
11890                 | ' return videocog
11890     2D 00 00 FF 
11894     C4 E5 05 F1 | 	add	objptr, ##23492
11898     F2 FA 01 FB | 	rdlong	result1, objptr
1189c     2D 00 00 FF 
118a0     C4 E5 85 F1 | 	sub	objptr, ##23492
118a4     A7 F0 03 F6 | 	mov	ptra, fp
118a8     B2 00 A0 FD | 	call	#popregs_
118ac                 | _startvideo_ret
118ac     2D 00 64 FD | 	ret
118b0                 | 
118b0                 | ' 
118b0                 | ' function pspeek(adr as ulong) as ubyte
118b0                 | _pspeek
118b0     00 4A 05 F6 | 	mov	COUNT_, #0
118b4     A8 00 A0 FD | 	call	#pushregs_
118b8     0C F0 07 F1 | 	add	ptra, #12
118bc     04 4E 05 F1 | 	add	fp, #4
118c0     A7 12 62 FC | 	wrlong	arg01, fp
118c4     04 4E 05 F1 | 	add	fp, #4
118c8     A7 12 02 F6 | 	mov	arg01, fp
118cc     04 4E 85 F1 | 	sub	fp, #4
118d0     A7 14 02 FB | 	rdlong	arg02, fp
118d4     04 4E 85 F1 | 	sub	fp, #4
118d8     01 16 06 F6 | 	mov	arg03, #1
118dc     0B 00 00 FF 
118e0     C0 E4 05 F1 | 	add	objptr, ##5824
118e4     6C 28 B0 FD | 	call	#_psram_spin2_read1
118e8     0B 00 00 FF 
118ec     C0 E4 85 F1 | 	sub	objptr, ##5824
118f0                 | ' psram.read1(varptr(res),adr,1)
118f0                 | ' return res
118f0     08 4E 05 F1 | 	add	fp, #8
118f4     A7 FA C1 FA | 	rdbyte	result1, fp
118f8     08 4E 85 F1 | 	sub	fp, #8
118fc     A7 F0 03 F6 | 	mov	ptra, fp
11900     B2 00 A0 FD | 	call	#popregs_
11904                 | _pspeek_ret
11904     2D 00 64 FD | 	ret
11908                 | 
11908                 | ' 
11908                 | ' function pslpeek(adr as ulong) as ulong
11908                 | _pslpeek
11908     00 4A 05 F6 | 	mov	COUNT_, #0
1190c     A8 00 A0 FD | 	call	#pushregs_
11910     0C F0 07 F1 | 	add	ptra, #12
11914     04 4E 05 F1 | 	add	fp, #4
11918     A7 12 62 FC | 	wrlong	arg01, fp
1191c     04 4E 05 F1 | 	add	fp, #4
11920     A7 12 02 F6 | 	mov	arg01, fp
11924     04 4E 85 F1 | 	sub	fp, #4
11928     A7 14 02 FB | 	rdlong	arg02, fp
1192c     04 4E 85 F1 | 	sub	fp, #4
11930     04 16 06 F6 | 	mov	arg03, #4
11934     0B 00 00 FF 
11938     C0 E4 05 F1 | 	add	objptr, ##5824
1193c     14 28 B0 FD | 	call	#_psram_spin2_read1
11940     0B 00 00 FF 
11944     C0 E4 85 F1 | 	sub	objptr, ##5824
11948                 | ' psram.read1(varptr(res),adr,4)
11948                 | ' return res
11948     08 4E 05 F1 | 	add	fp, #8
1194c     A7 FA 01 FB | 	rdlong	result1, fp
11950     08 4E 85 F1 | 	sub	fp, #8
11954     A7 F0 03 F6 | 	mov	ptra, fp
11958     B2 00 A0 FD | 	call	#popregs_
1195c                 | _pslpeek_ret
1195c     2D 00 64 FD | 	ret
11960                 | 
11960                 | ' 
11960                 | ' '' ------------------------------- USB keyboard scan to char translator
11960                 | ' 
11960                 | ' function scantochar(key)
11960                 | _scantochar
11960                 | ' 
11960                 | ' select case (key shr 8) and 255
11960     09 01 02 F6 | 	mov	_var01, arg01
11964     08 00 C6 F0 | 	sar	_var01, #8
11968     FF 00 0E F5 | 	and	_var01, #255 wz
1196c     24 00 90 AD |  if_e	jmp	#LR__1480
11970     02 00 0E F2 | 	cmp	_var01, #2 wz
11974     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
11978     30 00 90 AD |  if_e	jmp	#LR__1481
1197c     40 00 0E F2 | 	cmp	_var01, #64 wz
11980     44 00 90 AD |  if_e	jmp	#LR__1482
11984     42 00 0E F2 | 	cmp	_var01, #66 wz
11988     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1198c     70 00 90 5D |  if_ne	jmp	#LR__1484
11990     50 00 90 FD | 	jmp	#LR__1483
11994                 | LR__1480
11994     09 FB 01 F6 | 	mov	result1, arg01
11998     7F FA 05 F5 | 	and	result1, #127
1199c     02 FA 65 F0 | 	shl	result1, #2
119a0     F5 FA 01 F1 | 	add	result1, ptr__dat__
119a4     FD FA C1 FA | 	rdbyte	result1, result1
119a8     54 00 90 FD | 	jmp	#_scantochar_ret
119ac                 | LR__1481
119ac     09 FB 01 F6 | 	mov	result1, arg01
119b0     7F FA 05 F5 | 	and	result1, #127
119b4     02 FA 65 F0 | 	shl	result1, #2
119b8     01 FA 05 F1 | 	add	result1, #1
119bc     F5 FA 01 F1 | 	add	result1, ptr__dat__
119c0     FD FA C1 FA | 	rdbyte	result1, result1
119c4     38 00 90 FD | 	jmp	#_scantochar_ret
119c8                 | LR__1482
119c8     09 FB 01 F6 | 	mov	result1, arg01
119cc     7F FA 05 F5 | 	and	result1, #127
119d0     02 FA 65 F0 | 	shl	result1, #2
119d4     02 FA 05 F1 | 	add	result1, #2
119d8     F5 FA 01 F1 | 	add	result1, ptr__dat__
119dc     FD FA C1 FA | 	rdbyte	result1, result1
119e0     1C 00 90 FD | 	jmp	#_scantochar_ret
119e4                 | LR__1483
119e4     09 FB 01 F6 | 	mov	result1, arg01
119e8     7F FA 05 F5 | 	and	result1, #127
119ec     02 FA 65 F0 | 	shl	result1, #2
119f0     03 FA 05 F1 | 	add	result1, #3
119f4     F5 FA 01 F1 | 	add	result1, ptr__dat__
119f8     FD FA C1 FA | 	rdbyte	result1, result1
119fc     00 00 90 FD | 	jmp	#_scantochar_ret
11a00                 | LR__1484
11a00                 | _scantochar_ret
11a00     2D 00 64 FD | 	ret
11a04                 | 
11a04                 | _program
11a04     0B 4A 05 F6 | 	mov	COUNT_, #11
11a08     A8 00 A0 FD | 	call	#pushregs_
11a0c     A0 FD BF FD | 	call	#_startpsram
11a10     40 12 06 F6 | 	mov	arg01, #64
11a14     00 14 06 F6 | 	mov	arg02, #0
11a18     00 16 06 F6 | 	mov	arg03, #0
11a1c     D0 FD BF FD | 	call	#_startvideo
11a20     00 12 06 F6 | 	mov	arg01, #0
11a24     00 14 06 F6 | 	mov	arg02, #0
11a28     00 16 06 F6 | 	mov	arg03, #0
11a2c     0B 00 00 FF 
11a30     C0 E4 05 F1 | 	add	objptr, ##5824
11a34     5C 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
11a38     FE 1C 02 F6 | 	mov	arg06, result2
11a3c     22 00 00 FF 
11a40     00 E5 05 F1 | 	add	objptr, ##17664
11a44     F2 FA 61 FC | 	wrlong	result1, objptr
11a48     14 E4 05 F1 | 	add	objptr, #20
11a4c     F2 1C 62 FC | 	wrlong	arg06, objptr
11a50     2D 00 00 FF 
11a54     D4 E5 85 F1 | 	sub	objptr, ##23508
11a58     32 12 06 F6 | 	mov	arg01, #50
11a5c     D4 34 B0 FD | 	call	#__system___waitms
11a60     2D 00 00 FF 
11a64     D4 E5 05 F1 | 	add	objptr, ##23508
11a68     F2 12 02 FB | 	rdlong	arg01, objptr
11a6c     2D 00 00 FF 
11a70     D4 E5 85 F1 | 	sub	objptr, ##23508
11a74     14 12 06 F1 | 	add	arg01, #20
11a78     20 00 80 FF 
11a7c     09 01 58 FC | 	wrword	##16384, arg01
11a80     04 2A B0 FD | 	call	#_usbnew_spin2_start
11a84     2D 00 00 FF 
11a88     C8 E5 05 F1 | 	add	objptr, ##23496
11a8c     F2 FA 61 FC | 	wrlong	result1, objptr
11a90                 | '   mouse_limits[0] := xlim
11a90     0F 00 00 FF 
11a94     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
11a98     01 00 80 FF 
11a9c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
11aa0                 | '   mouse_limits[1] := ylim
11aa0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
11aa4     01 00 80 FF 
11aa8     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
11aac     2D 00 00 FF 
11ab0     BB E4 85 F1 | 	sub	objptr, ##23227
11ab4     F2 12 02 F6 | 	mov	arg01, objptr
11ab8     0D E5 85 F1 | 	sub	objptr, #269
11abc     C4 12 06 F1 | 	add	arg01, #196
11ac0                 | '   mouse_outptr := ptr
11ac0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
11ac4     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
11ac8     0F 00 00 FF 
11acc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
11ad0     07 00 00 FF 
11ad4     72 EB 05 F1 | 	add	ptr__dat__, ##3954
11ad8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11adc     07 00 00 FF 
11ae0     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
11ae4     10 12 06 F6 | 	mov	arg01, #16
11ae8     3C 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
11aec     10 12 06 F6 | 	mov	arg01, #16
11af0     20 14 06 F6 | 	mov	arg02, #32
11af4     20 16 06 F6 | 	mov	arg03, #32
11af8     A0 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
11afc     09 12 C6 F9 | 	decod	arg01, #9
11b00     20 15 06 F6 | 	mov	arg02, #288
11b04     3C 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
11b08     F2 1C 02 F6 | 	mov	arg06, objptr
11b0c     50 00 00 FF 
11b10     AC E5 05 F1 | 	add	objptr, ##41388
11b14     F2 1A 02 F6 | 	mov	arg05, objptr
11b18     0D 1D 62 FC | 	wrlong	arg06, arg05
11b1c     04 1A 06 F1 | 	add	arg05, #4
11b20     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
11b24     EF 14 02 F6 | 	mov	arg02, entryptr__
11b28     F2 1E 02 F6 | 	mov	local01, objptr
11b2c     1E FA 05 F6 | 	mov	result1, #30
11b30     28 1E 62 FD | 	setq	local01
11b34     0A FB F1 FC | 	coginit	result1, arg02 wc
11b38     01 FA 65 C6 |  if_b	neg	result1, #1
11b3c     04 E4 85 F1 | 	sub	objptr, #4
11b40     F2 FA 61 FC | 	wrlong	result1, objptr
11b44     01 00 00 FF 
11b48     90 E4 05 F1 | 	add	objptr, ##656
11b4c     F2 00 68 FC | 	wrlong	#0, objptr
11b50     24 00 00 FF 
11b54     40 E4 85 F1 | 	sub	objptr, ##18496
11b58     F2 04 68 FC | 	wrlong	#2, objptr
11b5c     04 E4 05 F1 | 	add	objptr, #4
11b60     F2 26 69 FC | 	wrlong	#147, objptr
11b64     04 E4 05 F1 | 	add	objptr, #4
11b68     F2 34 69 FC | 	wrlong	#154, objptr
11b6c     04 E4 05 F1 | 	add	objptr, #4
11b70     F2 08 68 FC | 	wrlong	#4, objptr
11b74     04 E4 85 F1 | 	sub	objptr, #4
11b78     F2 1C 02 FB | 	rdlong	arg06, objptr
11b7c     14 E4 85 F1 | 	sub	objptr, #20
11b80     F2 1C 62 FC | 	wrlong	arg06, objptr
11b84     04 E4 05 F1 | 	add	objptr, #4
11b88     F2 00 68 FC | 	wrlong	#0, objptr
11b8c     04 E4 05 F1 | 	add	objptr, #4
11b90     F2 00 68 FC | 	wrlong	#0, objptr
11b94     22 00 00 FF 
11b98     B0 E5 05 F1 | 	add	objptr, ##17840
11b9c     F2 02 68 FC | 	wrlong	#1, objptr
11ba0     14 00 00 FF 
11ba4     7C E5 85 F1 | 	sub	objptr, ##10620
11ba8     F2 18 68 FC | 	wrlong	#12, objptr
11bac     3C 00 00 FF 
11bb0     28 E4 85 F1 | 	sub	objptr, ##30760
11bb4     98 EE BF FD | 	call	#_init_commands
11bb8     70 F8 BF FD | 	call	#_init_error_strings
11bbc     F8 81 BF FD | 	call	#_do_new
11bc0     2E 00 00 FF 
11bc4     00 E4 05 F1 | 	add	objptr, ##23552
11bc8     F2 12 02 FB | 	rdlong	arg01, objptr
11bcc     04 E4 85 F1 | 	sub	objptr, #4
11bd0     F2 14 02 FB | 	rdlong	arg02, objptr
11bd4     2D 00 00 FF 
11bd8     FC E5 85 F1 | 	sub	objptr, ##23548
11bdc     80 1D B0 FD | 	call	#_hg010b_spin2_cls
11be0     2E 00 00 FF 
11be4     04 E4 05 F1 | 	add	objptr, ##23556
11be8     F2 12 02 FB | 	rdlong	arg01, objptr
11bec     2E 00 00 FF 
11bf0     04 E4 85 F1 | 	sub	objptr, ##23556
11bf4     80 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
11bf8                 | ' 
11bf8                 | ' leading_spaces:=amount
11bf8     01 00 00 FF 
11bfc     B2 E4 05 F1 | 	add	objptr, ##690
11c00     F2 04 68 FC | 	wrlong	#2, objptr
11c04     01 00 00 FF 
11c08     B2 E4 85 F1 | 	sub	objptr, ##690
11c0c     23 01 00 FF 
11c10     B7 21 06 F6 | 	mov	local02, ##@LR__4375
11c14     3D 12 06 F6 | 	mov	arg01, #61
11c18     3C 14 06 F6 | 	mov	arg02, #60
11c1c     3B 16 06 F6 | 	mov	arg03, #59
11c20     3A 18 06 F6 | 	mov	arg04, #58
11c24     64 76 B0 FD | 	call	#__system___vfs_open_sdcardx
11c28     FD 14 02 F6 | 	mov	arg02, result1
11c2c     10 13 02 F6 | 	mov	arg01, local02
11c30     D8 33 B0 FD | 	call	#__system___mount
11c34     23 01 00 FF 
11c38     BB 13 06 F6 | 	mov	arg01, ##@LR__4376
11c3c     8C 36 B0 FD | 	call	#__system___chdir
11c40     23 01 00 FF 
11c44     C3 21 06 F6 | 	mov	local02, ##@LR__4377
11c48     49 00 00 FF 
11c4c     58 E4 05 F1 | 	add	objptr, ##37464
11c50     F2 20 62 FC | 	wrlong	local02, objptr
11c54     1B 00 00 FF 
11c58     60 E4 85 F1 | 	sub	objptr, ##13920
11c5c     F2 12 02 FB | 	rdlong	arg01, objptr
11c60     2D 00 00 FF 
11c64     F8 E5 85 F1 | 	sub	objptr, ##23544
11c68     01 12 66 F0 | 	shl	arg01, #1
11c6c     01 14 06 F6 | 	mov	arg02, #1
11c70     44 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
11c74                 | ' 
11c74                 | ' init_commands
11c74                 | ' init_error_strings
11c74                 | ' do_new
11c74                 | ' 
11c74                 | ' 
11c74                 | ' cls(ink, paper)
11c74                 | ' 'v.setfontfamily(4) 				' use ST Mono font
11c74                 | ' v.setfontfamily(font) 				' use ST Mono font
11c74                 | ' v.setleadingspaces(2)
11c74                 | ' mount "/sd", _vfs_open_sdcard()
11c74                 | ' chdir "/sd/bas"
11c74                 | ' 
11c74                 | ' currentdir$="/sd/bas"
11c74                 | ' 
11c74                 | ' position 2*editor_spaces,1 : print ver$
11c74     00 12 06 F6 | 	mov	arg01, #0
11c78     78 85 B0 FD | 	call	#__system___getiolock_0349
11c7c     FD 12 02 F6 | 	mov	arg01, result1
11c80     BC 2F B0 FD | 	call	#__system___lockmem
11c84     09 00 00 FF 
11c88     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
11c8c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
11c90     09 00 00 FF 
11c94     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
11c98     00 12 06 F6 | 	mov	arg01, #0
11c9c     00 16 06 F6 | 	mov	arg03, #0
11ca0     90 3C B0 FD | 	call	#__system___basic_print_string
11ca4     00 12 06 F6 | 	mov	arg01, #0
11ca8     0A 14 06 F6 | 	mov	arg02, #10
11cac     00 16 06 F6 | 	mov	arg03, #0
11cb0     28 3C B0 FD | 	call	#__system___basic_print_char
11cb4     00 12 06 F6 | 	mov	arg01, #0
11cb8     38 85 B0 FD | 	call	#__system___getiolock_0349
11cbc     FD 00 68 FC | 	wrlong	#0, result1
11cc0     F2 12 02 FB | 	rdlong	arg01, objptr
11cc4     00 14 06 F6 | 	mov	arg02, #0
11cc8     0A 16 06 F6 | 	mov	arg03, #10
11ccc     78 51 B0 FD | 	call	#__system__Number_S
11cd0     FD 12 02 F6 | 	mov	arg01, result1
11cd4     23 01 00 FF 
11cd8     CB 15 06 F6 | 	mov	arg02, ##@LR__4378
11cdc     BC 2F B0 FD | 	call	#__system___string_concat
11ce0     FD 20 02 F6 | 	mov	local02, result1
11ce4     50 00 00 FF 
11ce8     A0 E5 05 F1 | 	add	objptr, ##41376
11cec     F2 20 62 FC | 	wrlong	local02, objptr
11cf0     50 00 00 FF 
11cf4     A0 E5 85 F1 | 	sub	objptr, ##41376
11cf8                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
11cf8     00 12 06 F6 | 	mov	arg01, #0
11cfc     F4 84 B0 FD | 	call	#__system___getiolock_0349
11d00     FD 12 02 F6 | 	mov	arg01, result1
11d04     38 2F B0 FD | 	call	#__system___lockmem
11d08     50 00 00 FF 
11d0c     A0 E5 05 F1 | 	add	objptr, ##41376
11d10     F2 14 02 FB | 	rdlong	arg02, objptr
11d14     50 00 00 FF 
11d18     A0 E5 85 F1 | 	sub	objptr, ##41376
11d1c     00 12 06 F6 | 	mov	arg01, #0
11d20     00 16 06 F6 | 	mov	arg03, #0
11d24     0C 3C B0 FD | 	call	#__system___basic_print_string
11d28     00 12 06 F6 | 	mov	arg01, #0
11d2c     0A 14 06 F6 | 	mov	arg02, #10
11d30     00 16 06 F6 | 	mov	arg03, #0
11d34     A4 3B B0 FD | 	call	#__system___basic_print_char
11d38     00 12 06 F6 | 	mov	arg01, #0
11d3c     B4 84 B0 FD | 	call	#__system___getiolock_0349
11d40     FD 00 68 FC | 	wrlong	#0, result1
11d44     2D 00 00 FF 
11d48     F8 E5 05 F1 | 	add	objptr, ##23544
11d4c     F2 12 02 FB | 	rdlong	arg01, objptr
11d50     2D 00 00 FF 
11d54     F8 E5 85 F1 | 	sub	objptr, ##23544
11d58     01 12 66 F0 | 	shl	arg01, #1
11d5c     04 14 06 F6 | 	mov	arg02, #4
11d60     54 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
11d64                 | ' position 2*editor_spaces,4 : print "Ready"
11d64     00 12 06 F6 | 	mov	arg01, #0
11d68     88 84 B0 FD | 	call	#__system___getiolock_0349
11d6c     FD 12 02 F6 | 	mov	arg01, result1
11d70     CC 2E B0 FD | 	call	#__system___lockmem
11d74     23 01 00 FF 
11d78     DD 15 06 F6 | 	mov	arg02, ##@LR__4379
11d7c     00 12 06 F6 | 	mov	arg01, #0
11d80     00 16 06 F6 | 	mov	arg03, #0
11d84     AC 3B B0 FD | 	call	#__system___basic_print_string
11d88     FD 22 02 F6 | 	mov	local03, result1
11d8c     00 12 06 F6 | 	mov	arg01, #0
11d90     0A 14 06 F6 | 	mov	arg02, #10
11d94     00 16 06 F6 | 	mov	arg03, #0
11d98     40 3B B0 FD | 	call	#__system___basic_print_char
11d9c     01 24 06 F6 | 	mov	local04, #1
11da0     00 12 06 F6 | 	mov	arg01, #0
11da4     4C 84 B0 FD | 	call	#__system___getiolock_0349
11da8     FD 00 68 FC | 	wrlong	#0, result1
11dac     00 26 06 F6 | 	mov	local05, #0
11db0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
11db0                 | ' 
11db0                 | ' 
11db0                 | ' '-------------------------------------------------------------------------------------------------------- 
11db0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
11db0                 | ' '--------------------------------------------------------------------------------------------------------
11db0                 | ' 
11db0                 | ' do
11db0                 | LR__1490
11db0     01 12 06 F6 | 	mov	arg01, #1
11db4     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
11db8     28 27 B0 FD | 	call	#_usbnew_spin2_get_key
11dbc     3C 00 00 FF 
11dc0     38 E4 05 F1 | 	add	objptr, ##30776
11dc4     F2 FA 61 FC | 	wrlong	result1, objptr
11dc8                 | '   return hkbd_led_rep
11dc8     13 00 00 FF 
11dcc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
11dd0     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
11dd4     13 00 00 FF 
11dd8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
11ddc     16 00 00 FF 
11de0     08 E4 05 F1 | 	add	objptr, ##11272
11de4     F2 FA 61 FC | 	wrlong	result1, objptr
11de8                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
11de8     16 00 00 FF 
11dec     08 E4 85 F1 | 	sub	objptr, ##11272
11df0     F2 20 02 FB | 	rdlong	local02, objptr
11df4     3C 00 00 FF 
11df8     38 E4 85 F1 | 	sub	objptr, ##30776
11dfc     01 20 16 F2 | 	cmp	local02, #1 wc
11e00     BC 00 90 CD |  if_b	jmp	#LR__1491
11e04     3C 00 00 FF 
11e08     38 E4 05 F1 | 	add	objptr, ##30776
11e0c     F2 24 02 FB | 	rdlong	local04, objptr
11e10     3C 00 00 FF 
11e14     38 E4 85 F1 | 	sub	objptr, ##30776
11e18     12 23 02 F6 | 	mov	local03, local04
11e1c     04 22 16 F2 | 	cmp	local03, #4 wc
11e20     9C 00 90 3D |  if_ae	jmp	#LR__1491
11e24     50 00 00 FF 
11e28     A4 E5 05 F1 | 	add	objptr, ##41380
11e2c     F2 1E 02 FB | 	rdlong	local01, objptr
11e30     50 00 00 FF 
11e34     A4 E5 85 F1 | 	sub	objptr, ##41380
11e38     0F 27 02 F6 | 	mov	local05, local01
11e3c     01 26 0E F2 | 	cmp	local05, #1 wz
11e40     7C 00 90 5D |  if_ne	jmp	#LR__1491
11e44     04 00 00 FF 
11e48     94 EA 05 F1 | 	add	ptr__dat__, ##2196
11e4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11e50     04 00 00 FF 
11e54     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
11e58     56 00 00 FF 
11e5c     44 22 06 F6 | 	mov	local03, ##44100
11e60     0E 24 C6 F9 | 	decod	local04, #14
11e64     00 26 06 F6 | 	mov	local05, #0
11e68     03 00 00 FF 
11e6c     DE 1E 06 F6 | 	mov	local01, ##1758
11e70     07 12 06 F6 | 	mov	arg01, #7
11e74     56 00 00 FF 
11e78     44 16 06 F6 | 	mov	arg03, ##44100
11e7c     0E 18 C6 F9 | 	decod	arg04, #14
11e80     00 1A 06 F6 | 	mov	arg05, #0
11e84     03 00 00 FF 
11e88     DE 1C 06 F6 | 	mov	arg06, ##1758
11e8c     0B 00 00 FF 
11e90     C0 E4 05 F1 | 	add	objptr, ##5824
11e94     74 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
11e98     0B 00 00 FF 
11e9c     C0 E4 85 F1 | 	sub	objptr, ##5824
11ea0     0A 12 06 F6 | 	mov	arg01, #10
11ea4     8C 30 B0 FD | 	call	#__system___waitms
11ea8     07 12 06 F6 | 	mov	arg01, #7
11eac     0B 00 00 FF 
11eb0     C0 E4 05 F1 | 	add	objptr, ##5824
11eb4     A4 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11eb8     0B 00 00 FF 
11ebc     C0 E4 85 F1 | 	sub	objptr, ##5824
11ec0                 | LR__1491
11ec0                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
11ec0     3C 00 00 FF 
11ec4     38 E4 05 F1 | 	add	objptr, ##30776
11ec8     F2 20 02 FB | 	rdlong	local02, objptr
11ecc     3C 00 00 FF 
11ed0     38 E4 85 F1 | 	sub	objptr, ##30776
11ed4     04 20 16 F2 | 	cmp	local02, #4 wc
11ed8     80 00 90 CD |  if_b	jmp	#LR__1492
11edc     3C 00 00 FF 
11ee0     38 E4 05 F1 | 	add	objptr, ##30776
11ee4     F2 24 02 FB | 	rdlong	local04, objptr
11ee8     3C 00 00 FF 
11eec     38 E4 85 F1 | 	sub	objptr, ##30776
11ef0     12 23 02 F6 | 	mov	local03, local04
11ef4     00 00 40 FF 
11ef8     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
11efc     3C 00 00 CF 
11f00     38 E4 05 C1 |  if_b	add	objptr, ##30776
11f04     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11f08     3C 00 00 CF 
11f0c     38 E4 85 C1 |  if_b	sub	objptr, ##30776
11f10     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
11f14     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
11f18     40 00 90 3D |  if_ae	jmp	#LR__1492
11f1c     3C 00 00 FF 
11f20     38 E4 05 F1 | 	add	objptr, ##30776
11f24     F2 20 02 FB | 	rdlong	local02, objptr
11f28     04 E4 05 F1 | 	add	objptr, #4
11f2c     F2 20 62 FC | 	wrlong	local02, objptr
11f30     16 00 00 FF 
11f34     08 E4 05 F1 | 	add	objptr, ##11272
11f38     F2 02 68 FC | 	wrlong	#1, objptr
11f3c     16 00 00 FF 
11f40     08 E4 85 F1 | 	sub	objptr, ##11272
11f44     F2 20 02 FB | 	rdlong	local02, objptr
11f48     16 00 00 FF 
11f4c     0C E4 05 F1 | 	add	objptr, ##11276
11f50     F2 20 62 FC | 	wrlong	local02, objptr
11f54     52 00 00 FF 
11f58     48 E4 85 F1 | 	sub	objptr, ##42056
11f5c                 | LR__1492
11f5c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
11f5c     3C 00 00 FF 
11f60     38 E4 05 F1 | 	add	objptr, ##30776
11f64     F2 20 02 FB | 	rdlong	local02, objptr
11f68     3C 00 00 FF 
11f6c     38 E4 85 F1 | 	sub	objptr, ##30776
11f70     00 00 40 FF 
11f74     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
11f78     52 00 00 3F 
11f7c     4C E4 05 31 |  if_ae	add	objptr, ##42060
11f80     F2 00 68 3C |  if_ae	wrlong	#0, objptr
11f84     08 E4 85 31 |  if_ae	sub	objptr, #8
11f88     F2 00 68 3C |  if_ae	wrlong	#0, objptr
11f8c     52 00 00 3F 
11f90     44 E4 85 31 |  if_ae	sub	objptr, ##42052
11f94                 | ' if key=0 andalso rpt=1 then rptcnt+=1
11f94     3C 00 00 FF 
11f98     38 E4 05 F1 | 	add	objptr, ##30776
11f9c     F2 20 0A FB | 	rdlong	local02, objptr wz
11fa0     3C 00 00 FF 
11fa4     38 E4 85 F1 | 	sub	objptr, ##30776
11fa8     52 00 00 AF 
11fac     44 E4 05 A1 |  if_e	add	objptr, ##42052
11fb0     F2 24 02 AB |  if_e	rdlong	local04, objptr
11fb4     52 00 00 AF 
11fb8     44 E4 85 A1 |  if_e	sub	objptr, ##42052
11fbc     12 23 02 A6 |  if_e	mov	local03, local04
11fc0     01 22 0E A2 |  if_e	cmp	local03, #1 wz
11fc4     52 00 00 AF 
11fc8     4C E4 05 A1 |  if_e	add	objptr, ##42060
11fcc     F2 20 02 AB |  if_e	rdlong	local02, objptr
11fd0     01 20 06 A1 |  if_e	add	local02, #1
11fd4     F2 20 62 AC |  if_e	wrlong	local02, objptr
11fd8     52 00 00 AF 
11fdc     4C E4 85 A1 |  if_e	sub	objptr, ##42060
11fe0                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
11fe0     3C 00 00 FF 
11fe4     38 E4 05 F1 | 	add	objptr, ##30776
11fe8     F2 20 02 FB | 	rdlong	local02, objptr
11fec     3C 00 00 FF 
11ff0     38 E4 85 F1 | 	sub	objptr, ##30776
11ff4     00 00 40 FF 
11ff8     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
11ffc     44 00 90 3D |  if_ae	jmp	#LR__1494
12000     52 00 00 FF 
12004     4C E4 05 F1 | 	add	objptr, ##42060
12008     F2 20 02 FB | 	rdlong	local02, objptr
1200c     52 00 00 FF 
12010     4C E4 85 F1 | 	sub	objptr, ##42060
12014     19 20 0E F2 | 	cmp	local02, #25 wz
12018     28 00 90 5D |  if_ne	jmp	#LR__1493
1201c     3C 00 00 FF 
12020     3C E4 05 F1 | 	add	objptr, ##30780
12024     F2 20 02 FB | 	rdlong	local02, objptr
12028     16 00 00 FF 
1202c     0C E4 05 F1 | 	add	objptr, ##11276
12030     F2 20 62 FC | 	wrlong	local02, objptr
12034     04 E4 05 F1 | 	add	objptr, #4
12038     F2 2A 68 FC | 	wrlong	#21, objptr
1203c     52 00 00 FF 
12040     4C E4 85 F1 | 	sub	objptr, ##42060
12044                 | LR__1493
12044                 | LR__1494
12044                 | ' 
12044                 | ' 
12044                 | ' if key3<>0 then
12044     52 00 00 FF 
12048     48 E4 05 F1 | 	add	objptr, ##42056
1204c     F2 28 0A FB | 	rdlong	local06, objptr wz
12050     52 00 00 FF 
12054     48 E4 85 F1 | 	sub	objptr, ##42056
12058     54 FD 9F AD |  if_e	jmp	#LR__1490
1205c                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
1205c     50 00 00 FF 
12060     A4 E5 05 F1 | 	add	objptr, ##41380
12064     F2 20 02 FB | 	rdlong	local02, objptr
12068     50 00 00 FF 
1206c     A4 E5 85 F1 | 	sub	objptr, ##41380
12070     01 20 0E F2 | 	cmp	local02, #1 wz
12074     5C 00 90 5D |  if_ne	jmp	#LR__1495
12078     01 00 00 FF 
1207c     00 EA 05 F1 | 	add	ptr__dat__, ##512
12080     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12084     01 00 00 FF 
12088     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1208c     56 00 00 FF 
12090     44 22 06 F6 | 	mov	local03, ##44100
12094     0E 24 C6 F9 | 	decod	local04, #14
12098     03 00 00 FF 
1209c     94 26 06 F6 | 	mov	local05, ##1684
120a0     01 1E 66 F6 | 	neg	local01, #1
120a4     07 12 06 F6 | 	mov	arg01, #7
120a8     56 00 00 FF 
120ac     44 16 06 F6 | 	mov	arg03, ##44100
120b0     0E 18 C6 F9 | 	decod	arg04, #14
120b4     03 00 00 FF 
120b8     94 1A 06 F6 | 	mov	arg05, ##1684
120bc     01 1C 66 F6 | 	neg	arg06, #1
120c0     0B 00 00 FF 
120c4     C0 E4 05 F1 | 	add	objptr, ##5824
120c8     40 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
120cc     0B 00 00 FF 
120d0     C0 E4 85 F1 | 	sub	objptr, ##5824
120d4                 | LR__1495
120d4     52 00 00 FF 
120d8     48 E4 05 F1 | 	add	objptr, ##42056
120dc     F2 12 02 FB | 	rdlong	arg01, objptr
120e0     52 00 00 FF 
120e4     48 E4 85 F1 | 	sub	objptr, ##42056
120e8     74 F8 BF FD | 	call	#_scantochar
120ec     52 00 00 FF 
120f0     50 E4 05 F1 | 	add	objptr, ##42064
120f4     F2 FA 61 FC | 	wrlong	result1, objptr
120f8                 | '   if leds and 2 = 2 then 
120f8     10 E4 85 F1 | 	sub	objptr, #16
120fc     F2 20 0A FB | 	rdlong	local02, objptr wz
12100     52 00 00 FF 
12104     40 E4 85 F1 | 	sub	objptr, ##42048
12108     68 01 90 AD |  if_e	jmp	#LR__1503
1210c                 | '     if key4>96 andalso key4<123 then
1210c     52 00 00 FF 
12110     50 E4 05 F1 | 	add	objptr, ##42064
12114     F2 20 02 FB | 	rdlong	local02, objptr
12118     52 00 00 FF 
1211c     50 E4 85 F1 | 	sub	objptr, ##42064
12120     61 20 56 F2 | 	cmps	local02, #97 wc
12124     40 00 90 CD |  if_b	jmp	#LR__1496
12128     52 00 00 FF 
1212c     50 E4 05 F1 | 	add	objptr, ##42064
12130     F2 24 02 FB | 	rdlong	local04, objptr
12134     52 00 00 FF 
12138     50 E4 85 F1 | 	sub	objptr, ##42064
1213c     12 23 02 F6 | 	mov	local03, local04
12140     7B 22 56 F2 | 	cmps	local03, #123 wc
12144     20 00 90 3D |  if_ae	jmp	#LR__1496
12148     52 00 00 FF 
1214c     50 E4 05 F1 | 	add	objptr, ##42064
12150     F2 20 02 FB | 	rdlong	local02, objptr
12154     20 20 86 F1 | 	sub	local02, #32
12158     F2 20 62 FC | 	wrlong	local02, objptr
1215c     52 00 00 FF 
12160     50 E4 85 F1 | 	sub	objptr, ##42064
12164     0C 01 90 FD | 	jmp	#LR__1502
12168                 | LR__1496
12168     52 00 00 FF 
1216c     50 E4 05 F1 | 	add	objptr, ##42064
12170     F2 20 02 FB | 	rdlong	local02, objptr
12174     52 00 00 FF 
12178     50 E4 85 F1 | 	sub	objptr, ##42064
1217c     41 20 56 F2 | 	cmps	local02, #65 wc
12180     40 00 90 CD |  if_b	jmp	#LR__1497
12184     52 00 00 FF 
12188     50 E4 05 F1 | 	add	objptr, ##42064
1218c     F2 24 02 FB | 	rdlong	local04, objptr
12190     52 00 00 FF 
12194     50 E4 85 F1 | 	sub	objptr, ##42064
12198     12 23 02 F6 | 	mov	local03, local04
1219c     5B 22 56 F2 | 	cmps	local03, #91 wc
121a0     20 00 90 3D |  if_ae	jmp	#LR__1497
121a4     52 00 00 FF 
121a8     50 E4 05 F1 | 	add	objptr, ##42064
121ac     F2 20 02 FB | 	rdlong	local02, objptr
121b0     20 20 06 F1 | 	add	local02, #32
121b4     F2 20 62 FC | 	wrlong	local02, objptr
121b8     52 00 00 FF 
121bc     50 E4 85 F1 | 	sub	objptr, ##42064
121c0     B0 00 90 FD | 	jmp	#LR__1501
121c4                 | LR__1497
121c4     52 00 00 FF 
121c8     50 E4 05 F1 | 	add	objptr, ##42064
121cc     F2 20 02 FB | 	rdlong	local02, objptr
121d0     52 00 00 FF 
121d4     50 E4 85 F1 | 	sub	objptr, ##42064
121d8     17 20 56 F2 | 	cmps	local02, #23 wc
121dc     40 00 90 CD |  if_b	jmp	#LR__1498
121e0     52 00 00 FF 
121e4     50 E4 05 F1 | 	add	objptr, ##42064
121e8     F2 24 02 FB | 	rdlong	local04, objptr
121ec     52 00 00 FF 
121f0     50 E4 85 F1 | 	sub	objptr, ##42064
121f4     12 23 02 F6 | 	mov	local03, local04
121f8     20 22 56 F2 | 	cmps	local03, #32 wc
121fc     20 00 90 3D |  if_ae	jmp	#LR__1498
12200     52 00 00 FF 
12204     50 E4 05 F1 | 	add	objptr, ##42064
12208     F2 20 02 FB | 	rdlong	local02, objptr
1220c     09 20 86 F1 | 	sub	local02, #9
12210     F2 20 62 FC | 	wrlong	local02, objptr
12214     52 00 00 FF 
12218     50 E4 85 F1 | 	sub	objptr, ##42064
1221c     54 00 90 FD | 	jmp	#LR__1500
12220                 | LR__1498
12220     52 00 00 FF 
12224     50 E4 05 F1 | 	add	objptr, ##42064
12228     F2 20 02 FB | 	rdlong	local02, objptr
1222c     52 00 00 FF 
12230     50 E4 85 F1 | 	sub	objptr, ##42064
12234     0E 20 56 F2 | 	cmps	local02, #14 wc
12238     38 00 90 CD |  if_b	jmp	#LR__1499
1223c     52 00 00 FF 
12240     50 E4 05 F1 | 	add	objptr, ##42064
12244     F2 24 02 FB | 	rdlong	local04, objptr
12248     52 00 00 FF 
1224c     50 E4 85 F1 | 	sub	objptr, ##42064
12250     12 23 02 F6 | 	mov	local03, local04
12254     17 22 56 F2 | 	cmps	local03, #23 wc
12258     52 00 00 CF 
1225c     50 E4 05 C1 |  if_b	add	objptr, ##42064
12260     F2 20 02 CB |  if_b	rdlong	local02, objptr
12264     27 20 06 C1 |  if_b	add	local02, #39
12268     F2 20 62 CC |  if_b	wrlong	local02, objptr
1226c     52 00 00 CF 
12270     50 E4 85 C1 |  if_b	sub	objptr, ##42064
12274                 | LR__1499
12274                 | LR__1500
12274                 | LR__1501
12274                 | LR__1502
12274                 | LR__1503
12274                 | '  
12274                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
12274     52 00 00 FF 
12278     50 E4 05 F1 | 	add	objptr, ##42064
1227c     F2 20 02 FB | 	rdlong	local02, objptr
12280     52 00 00 FF 
12284     50 E4 85 F1 | 	sub	objptr, ##42064
12288     01 20 56 F2 | 	cmps	local02, #1 wc
1228c     90 00 90 CD |  if_b	jmp	#LR__1504
12290     52 00 00 FF 
12294     50 E4 05 F1 | 	add	objptr, ##42064
12298     F2 24 02 FB | 	rdlong	local04, objptr
1229c     52 00 00 FF 
122a0     50 E4 85 F1 | 	sub	objptr, ##42064
122a4     12 23 02 F6 | 	mov	local03, local04
122a8     7F 22 56 F2 | 	cmps	local03, #127 wc
122ac     38 E4 05 C1 |  if_b	add	objptr, #56
122b0     F2 1E E2 CA |  if_b	rdword	local01, objptr
122b4     38 E4 85 C1 |  if_b	sub	objptr, #56
122b8     0F 27 32 C9 |  if_b	getword	local05, local01, #0
122bc     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
122c0     5C 00 90 3D |  if_ae	jmp	#LR__1504
122c4     52 00 00 FF 
122c8     50 E4 05 F1 | 	add	objptr, ##42064
122cc     F2 12 02 FB | 	rdlong	arg01, objptr
122d0     52 00 00 FF 
122d4     50 E4 85 F1 | 	sub	objptr, ##42064
122d8     38 4B B0 FD | 	call	#__system__Chr_S
122dc     FD 2A 02 F6 | 	mov	local07, result1
122e0     2D 00 00 FF 
122e4     E0 E5 05 F1 | 	add	objptr, ##23520
122e8     F2 12 02 FB | 	rdlong	arg01, objptr
122ec     2D 00 00 FF 
122f0     E0 E5 85 F1 | 	sub	objptr, ##23520
122f4     15 15 02 F6 | 	mov	arg02, local07
122f8     A0 29 B0 FD | 	call	#__system___string_concat
122fc     2D 00 00 FF 
12300     E0 E5 05 F1 | 	add	objptr, ##23520
12304     F2 FA 61 FC | 	wrlong	result1, objptr
12308     24 00 00 FF 
1230c     70 E4 05 F1 | 	add	objptr, ##18544
12310     F2 12 02 FB | 	rdlong	arg01, objptr
12314     52 00 00 FF 
12318     50 E4 85 F1 | 	sub	objptr, ##42064
1231c     E0 16 B0 FD | 	call	#_hg010b_spin2_putchar
12320                 | LR__1504
12320                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
12320     52 00 00 FF 
12324     50 E4 05 F1 | 	add	objptr, ##42064
12328     F2 20 02 FB | 	rdlong	local02, objptr
1232c     52 00 00 FF 
12330     50 E4 85 F1 | 	sub	objptr, ##42064
12334     01 20 56 F2 | 	cmps	local02, #1 wc
12338     D0 00 90 CD |  if_b	jmp	#LR__1505
1233c     52 00 00 FF 
12340     50 E4 05 F1 | 	add	objptr, ##42064
12344     F2 24 02 FB | 	rdlong	local04, objptr
12348     52 00 00 FF 
1234c     50 E4 85 F1 | 	sub	objptr, ##42064
12350     12 23 02 F6 | 	mov	local03, local04
12354     7F 22 56 F2 | 	cmps	local03, #127 wc
12358     B0 00 90 3D |  if_ae	jmp	#LR__1505
1235c     38 E4 05 F1 | 	add	objptr, #56
12360     F2 1E E2 FA | 	rdword	local01, objptr
12364     38 E4 85 F1 | 	sub	objptr, #56
12368     0F 27 32 F9 | 	getword	local05, local01, #0
1236c     FE 26 0E F2 | 	cmp	local05, #254 wz
12370     50 00 00 AF 
12374     A4 E5 05 A1 |  if_e	add	objptr, ##41380
12378     F2 2C 02 AB |  if_e	rdlong	local08, objptr
1237c     50 00 00 AF 
12380     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
12384     16 2F 02 A6 |  if_e	mov	local09, local08
12388     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1238c     7C 00 90 5D |  if_ne	jmp	#LR__1505
12390     04 00 00 FF 
12394     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12398     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1239c     04 00 00 FF 
123a0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
123a4     56 00 00 FF 
123a8     44 22 06 F6 | 	mov	local03, ##44100
123ac     0E 24 C6 F9 | 	decod	local04, #14
123b0     00 26 06 F6 | 	mov	local05, #0
123b4     03 00 00 FF 
123b8     DE 1E 06 F6 | 	mov	local01, ##1758
123bc     07 12 06 F6 | 	mov	arg01, #7
123c0     56 00 00 FF 
123c4     44 16 06 F6 | 	mov	arg03, ##44100
123c8     0E 18 C6 F9 | 	decod	arg04, #14
123cc     00 1A 06 F6 | 	mov	arg05, #0
123d0     03 00 00 FF 
123d4     DE 1C 06 F6 | 	mov	arg06, ##1758
123d8     0B 00 00 FF 
123dc     C0 E4 05 F1 | 	add	objptr, ##5824
123e0     28 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
123e4     0B 00 00 FF 
123e8     C0 E4 85 F1 | 	sub	objptr, ##5824
123ec     2C 13 06 F6 | 	mov	arg01, #300
123f0     40 2B B0 FD | 	call	#__system___waitms
123f4     00 12 06 F6 | 	mov	arg01, #0
123f8     0B 00 00 FF 
123fc     C0 E4 05 F1 | 	add	objptr, ##5824
12400     58 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12404     0B 00 00 FF 
12408     C0 E4 85 F1 | 	sub	objptr, ##5824
1240c                 | LR__1505
1240c                 | '  
1240c                 | '   'tab
1240c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1240c     52 00 00 FF 
12410     48 E4 05 F1 | 	add	objptr, ##42056
12414     F2 20 02 FB | 	rdlong	local02, objptr
12418     52 00 00 FF 
1241c     48 E4 85 F1 | 	sub	objptr, ##42056
12420     10 21 E2 F8 | 	getbyte	local02, local02, #0
12424     2B 20 0E F2 | 	cmp	local02, #43 wz
12428     B4 00 90 5D |  if_ne	jmp	#LR__1506
1242c     38 E4 05 F1 | 	add	objptr, #56
12430     F2 24 E2 FA | 	rdword	local04, objptr
12434     38 E4 85 F1 | 	sub	objptr, #56
12438     12 23 32 F9 | 	getword	local03, local04, #0
1243c     F0 22 16 F2 | 	cmp	local03, #240 wc
12440     9C 00 90 CD |  if_b	jmp	#LR__1506
12444     50 00 00 FF 
12448     A4 E5 05 F1 | 	add	objptr, ##41380
1244c     F2 1E 02 FB | 	rdlong	local01, objptr
12450     50 00 00 FF 
12454     A4 E5 85 F1 | 	sub	objptr, ##41380
12458     0F 27 02 F6 | 	mov	local05, local01
1245c     01 26 0E F2 | 	cmp	local05, #1 wz
12460     7C 00 90 5D |  if_ne	jmp	#LR__1506
12464     04 00 00 FF 
12468     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1246c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12470     04 00 00 FF 
12474     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12478     56 00 00 FF 
1247c     44 22 06 F6 | 	mov	local03, ##44100
12480     0E 24 C6 F9 | 	decod	local04, #14
12484     00 26 06 F6 | 	mov	local05, #0
12488     03 00 00 FF 
1248c     DE 1E 06 F6 | 	mov	local01, ##1758
12490     00 12 06 F6 | 	mov	arg01, #0
12494     56 00 00 FF 
12498     44 16 06 F6 | 	mov	arg03, ##44100
1249c     0E 18 C6 F9 | 	decod	arg04, #14
124a0     00 1A 06 F6 | 	mov	arg05, #0
124a4     03 00 00 FF 
124a8     DE 1C 06 F6 | 	mov	arg06, ##1758
124ac     0B 00 00 FF 
124b0     C0 E4 05 F1 | 	add	objptr, ##5824
124b4     54 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
124b8     0B 00 00 FF 
124bc     C0 E4 85 F1 | 	sub	objptr, ##5824
124c0     2C 13 06 F6 | 	mov	arg01, #300
124c4     6C 2A B0 FD | 	call	#__system___waitms
124c8     00 12 06 F6 | 	mov	arg01, #0
124cc     0B 00 00 FF 
124d0     C0 E4 05 F1 | 	add	objptr, ##5824
124d4     84 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
124d8     0B 00 00 FF 
124dc     C0 E4 85 F1 | 	sub	objptr, ##5824
124e0                 | LR__1506
124e0                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
124e0     52 00 00 FF 
124e4     48 E4 05 F1 | 	add	objptr, ##42056
124e8     F2 20 02 FB | 	rdlong	local02, objptr
124ec     52 00 00 FF 
124f0     48 E4 85 F1 | 	sub	objptr, ##42056
124f4     10 21 E2 F8 | 	getbyte	local02, local02, #0
124f8     2B 20 0E F2 | 	cmp	local02, #43 wz
124fc     AC 00 90 5D |  if_ne	jmp	#LR__1509
12500     38 E4 05 F1 | 	add	objptr, #56
12504     F2 24 E2 FA | 	rdword	local04, objptr
12508     38 E4 85 F1 | 	sub	objptr, #56
1250c     12 23 32 F9 | 	getword	local03, local04, #0
12510     F0 22 16 F2 | 	cmp	local03, #240 wc
12514     94 00 90 3D |  if_ae	jmp	#LR__1509
12518     38 E4 05 F1 | 	add	objptr, #56
1251c     F2 20 E2 FA | 	rdword	local02, objptr
12520     10 23 52 F6 | 	abs	local03, local02 wc
12524     11 23 42 F8 | 	getnib	local03, local03, #0
12528     11 23 82 F6 | 	negc	local03, local03
1252c     11 25 52 F6 | 	abs	local04, local03 wc
12530     01 24 46 F0 | 	shr	local04, #1
12534     12 25 82 F6 | 	negc	local04, local04
12538     52 00 00 FF 
1253c     1C E4 05 F1 | 	add	objptr, ##42012
12540     F2 24 62 FC | 	wrlong	local04, objptr
12544     12 31 02 F6 | 	mov	local10, local04
12548     52 00 00 FF 
1254c     54 E4 85 F1 | 	sub	objptr, ##42068
12550                 | LR__1507
12550     08 30 56 F2 | 	cmps	local10, #8 wc
12554     54 00 90 3D |  if_ae	jmp	#LR__1508
12558     2D 00 00 FF 
1255c     E0 E5 05 F1 | 	add	objptr, ##23520
12560     F2 12 02 FB | 	rdlong	arg01, objptr
12564     2D 00 00 FF 
12568     E0 E5 85 F1 | 	sub	objptr, ##23520
1256c     23 01 00 FF 
12570     E3 25 06 F6 | 	mov	local04, ##@LR__4380
12574     12 15 02 F6 | 	mov	arg02, local04
12578     20 27 B0 FD | 	call	#__system___string_concat
1257c     2D 00 00 FF 
12580     E0 E5 05 F1 | 	add	objptr, ##23520
12584     F2 FA 61 FC | 	wrlong	result1, objptr
12588     2D 00 00 FF 
1258c     E0 E5 85 F1 | 	sub	objptr, ##23520
12590     23 01 00 FF 
12594     E5 13 06 F6 | 	mov	arg01, ##@LR__4381
12598     80 16 B0 FD | 	call	#_hg010b_spin2_write
1259c     18 23 02 F6 | 	mov	local03, local10
125a0     01 22 06 F1 | 	add	local03, #1
125a4     11 31 02 F6 | 	mov	local10, local03
125a8     A4 FF 9F FD | 	jmp	#LR__1507
125ac                 | LR__1508
125ac                 | LR__1509
125ac                 | '  
125ac                 | '   'backspace
125ac                 | '   if (key3 and 255) = 42 then 
125ac     52 00 00 FF 
125b0     48 E4 05 F1 | 	add	objptr, ##42056
125b4     F2 20 02 FB | 	rdlong	local02, objptr
125b8     52 00 00 FF 
125bc     48 E4 85 F1 | 	sub	objptr, ##42056
125c0     10 21 E2 F8 | 	getbyte	local02, local02, #0
125c4     2A 20 0E F2 | 	cmp	local02, #42 wz
125c8     D4 00 90 5D |  if_ne	jmp	#LR__1514
125cc                 | '       if v.cursor_x>4 then 
125cc     38 E4 05 F1 | 	add	objptr, #56
125d0     F2 20 E2 FA | 	rdword	local02, objptr
125d4     38 E4 85 F1 | 	sub	objptr, #56
125d8     05 20 16 F2 | 	cmp	local02, #5 wc
125dc     9C 00 90 CD |  if_b	jmp	#LR__1512
125e0     2D 00 00 FF 
125e4     E0 E5 05 F1 | 	add	objptr, ##23520
125e8     F2 26 02 FB | 	rdlong	local05, objptr
125ec     2D 00 00 FF 
125f0     E0 E5 85 F1 | 	sub	objptr, ##23520
125f4     13 13 02 F6 | 	mov	arg01, local05
125f8     09 33 02 F6 | 	mov	local11, arg01
125fc     97 06 48 FB | 	callpa	#(@LR__1511-@LR__1510)>>2,fcache_load_ptr_
12600                 | LR__1510
12600     19 FB C9 FA | 	rdbyte	result1, local11 wz
12604     01 32 06 51 |  if_ne	add	local11, #1
12608     F4 FF 9F 5D |  if_ne	jmp	#LR__1510
1260c                 | LR__1511
1260c     09 33 82 F1 | 	sub	local11, arg01
12610     19 15 02 F6 | 	mov	arg02, local11
12614     01 14 86 F1 | 	sub	arg02, #1
12618     13 13 02 F6 | 	mov	arg01, local05
1261c     30 46 B0 FD | 	call	#__system__Left_S
12620     2D 00 00 FF 
12624     E0 E5 05 F1 | 	add	objptr, ##23520
12628     F2 FA 61 FC | 	wrlong	result1, objptr
1262c     2D 00 00 FF 
12630     A8 E5 85 F1 | 	sub	objptr, ##23464
12634     F2 12 E2 FA | 	rdword	arg01, objptr
12638     02 12 86 F1 | 	sub	arg01, #2
1263c     02 E4 05 F1 | 	add	objptr, #2
12640     F2 14 C2 FA | 	rdbyte	arg02, objptr
12644     3A E4 85 F1 | 	sub	objptr, #58
12648     6C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1264c     20 12 06 F6 | 	mov	arg01, #32
12650     AC 13 B0 FD | 	call	#_hg010b_spin2_putchar
12654     38 E4 05 F1 | 	add	objptr, #56
12658     F2 12 E2 FA | 	rdword	arg01, objptr
1265c     02 12 86 F1 | 	sub	arg01, #2
12660     02 E4 05 F1 | 	add	objptr, #2
12664     F2 24 C2 FA | 	rdbyte	local04, objptr
12668     3A E4 85 F1 | 	sub	objptr, #58
1266c     12 23 E2 F8 | 	getbyte	local03, local04, #0
12670     11 15 02 F6 | 	mov	arg02, local03
12674     40 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12678     24 00 90 FD | 	jmp	#LR__1513
1267c                 | LR__1512
1267c     23 01 00 FF 
12680     E7 21 06 F6 | 	mov	local02, ##@LR__4382
12684     2D 00 00 FF 
12688     E0 E5 05 F1 | 	add	objptr, ##23520
1268c     F2 20 62 FC | 	wrlong	local02, objptr
12690     2D 00 00 FF 
12694     A8 E5 85 F1 | 	sub	objptr, ##23464
12698     F2 08 58 FC | 	wrword	#4, objptr
1269c     38 E4 85 F1 | 	sub	objptr, #56
126a0                 | LR__1513
126a0                 | LR__1514
126a0                 | '    
126a0                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
126a0                 | '  
126a0                 | '   if key4=key_enter then 
126a0     52 00 00 FF 
126a4     50 E4 05 F1 | 	add	objptr, ##42064
126a8     F2 28 02 FB | 	rdlong	local06, objptr
126ac     52 00 00 FF 
126b0     50 E4 85 F1 | 	sub	objptr, ##42064
126b4     8D 28 0E F2 | 	cmp	local06, #141 wz
126b8     50 00 90 5D |  if_ne	jmp	#LR__1515
126bc     BC 16 B0 FD | 	call	#_hg010b_spin2_crlf
126c0     58 E3 BE FD | 	call	#_interpret
126c4     23 01 00 FF 
126c8     E8 21 06 F6 | 	mov	local02, ##@LR__4383
126cc     2D 00 00 FF 
126d0     E0 E5 05 F1 | 	add	objptr, ##23520
126d4     F2 20 62 FC | 	wrlong	local02, objptr
126d8     1A FA 61 FD | 	getct	result1
126dc     24 00 00 FF 
126e0     78 E4 05 F1 | 	add	objptr, ##18552
126e4     F2 24 02 FB | 	rdlong	local04, objptr
126e8     12 23 02 F6 | 	mov	local03, local04
126ec     11 FB 81 F1 | 	sub	result1, local03
126f0     F2 FA 61 FC | 	wrlong	result1, objptr
126f4     14 E4 85 F1 | 	sub	objptr, #20
126f8     F2 00 68 FC | 	wrlong	#0, objptr
126fc     08 E4 05 F1 | 	add	objptr, #8
12700     F2 00 68 FC | 	wrlong	#0, objptr
12704     52 00 00 FF 
12708     4C E4 85 F1 | 	sub	objptr, ##42060
1270c                 | LR__1515
1270c     52 00 00 FF 
12710     48 E4 05 F1 | 	add	objptr, ##42056
12714     F2 00 68 FC | 	wrlong	#0, objptr
12718     52 00 00 FF 
1271c     48 E4 85 F1 | 	sub	objptr, ##42056
12720     8C F6 9F FD | 	jmp	#LR__1490
12724     A7 F0 03 F6 | 	mov	ptra, fp
12728     B2 00 A0 FD | 	call	#popregs_
1272c                 | _program_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | ' '' this is not a main program.
12730                 | ' 
12730                 | ' '****************************************************************************************************************
12730                 | ' '                                                                                                             	*
12730                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
12730                 | ' '                                                                                                            	*
12730                 | ' ' mode - mode #, see below											*
12730                 | ' ' base - HDMI base pin												*
12730                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
12730                 | ' '														*
12730                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
12730                 | ' '' set bit #15 for custom timings														*
12730                 | ' '' p - 1 - psram, 0 - hub											*
12730                 | ' '' t - 1 - graphics, 0 - text											*
12730                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
12730                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
12730                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
12730                 | ' '														*
12730                 | ' '****************************************************************************************************************
12730                 | ' 
12730                 | ' pub start(base,mb):result |i
12730                 | _hg010b_spin2_start
12730                 | ' 
12730                 | ' '--------------------------- initialize pointers and variables
12730                 | ' 
12730                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
12730     30 E4 05 F1 | 	add	objptr, #48
12734     F2 FA 01 F6 | 	mov	result1, objptr
12738     28 E4 85 F1 | 	sub	objptr, #40
1273c     F2 FA 61 FC | 	wrlong	result1, objptr
12740                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
12740                 | ' hdmibase:=base							' HDMI base pin, 8*n
12740     18 E4 05 F1 | 	add	objptr, #24
12744     F2 12 62 FC | 	wrlong	arg01, objptr
12748                 | ' mailbox_ptr:=mb		
12748     04 E4 05 F1 | 	add	objptr, #4
1274c     F2 14 62 FC | 	wrlong	arg02, objptr
12750                 | ' mailbox0:=mb				' PSRAM mailbox pointer
12750     C1 E5 05 F1 | 	add	objptr, #449
12754     F2 14 62 FC | 	wrlong	arg02, objptr
12758                 | ' sprite_ptr:=@spr1ptr
12758     D8 E4 85 F1 | 	sub	objptr, #216
1275c     F2 FA 01 F6 | 	mov	result1, objptr
12760     E5 E4 85 F1 | 	sub	objptr, #229
12764     F2 FA 61 FC | 	wrlong	result1, objptr
12768                 | ' 
12768                 | ' 		'
12768                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
12768     E5 E4 05 F1 | 	add	objptr, #229
1276c     F2 FA 01 FB | 	rdlong	result1, objptr
12770     D0 FA 05 F1 | 	add	result1, #208
12774     FD 10 58 FC | 	wrword	#8, result1
12778                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
12778     F2 16 02 FB | 	rdlong	arg03, objptr
1277c     D2 16 06 F1 | 	add	arg03, #210
12780     0B 21 58 FC | 	wrword	#16, arg03
12784                 | ' leading_spaces:=0				'
12784     A5 E5 05 F1 | 	add	objptr, #421
12788     F2 00 68 FC | 	wrlong	#0, objptr
1278c                 | ' 
1278c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1278c     99 E4 85 F1 | 	sub	objptr, #153
12790     00 00 A0 FF 
12794     F2 0E 68 FC | 	wrlong	##1073741831, objptr
12798                 | ' emptydl[1]:=0
12798     04 E4 05 F1 | 	add	objptr, #4
1279c     F2 00 68 FC | 	wrlong	#0, objptr
127a0                 | ' 
127a0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
127a0                 | ' 
127a0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
127a0     28 E5 85 F1 | 	sub	objptr, #296
127a4     F2 02 68 FC | 	wrlong	#1, objptr
127a8                 | ' if s_debug<>0
127a8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
127a8     20 00 80 FF 
127ac     F2 00 68 FC | 	wrlong	##16384, objptr
127b0     F5 E4 85 F1 | 	sub	objptr, #245
127b4                 | ' setmode()							' set the mode, see below
127b4     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
127b8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
127b8     45 E4 05 F1 | 	add	objptr, #69
127bc     F2 FA 01 F6 | 	mov	result1, objptr
127c0     35 E4 85 F1 | 	sub	objptr, #53
127c4     F2 FA 61 FC | 	wrlong	result1, objptr
127c8                 | ' cursor_ptr:=@cursor_x						
127c8     28 E4 05 F1 | 	add	objptr, #40
127cc     F2 16 02 F6 | 	mov	arg03, objptr
127d0     2C E4 85 F1 | 	sub	objptr, #44
127d4     F2 16 62 FC | 	wrlong	arg03, objptr
127d8                 | ' fontnum:=0  							' start with a PC type font 
127d8     55 E4 05 F1 | 	add	objptr, #85
127dc     F2 00 68 FC | 	wrlong	#0, objptr
127e0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
127e0     1C E4 05 F1 | 	add	objptr, #28
127e4     F2 12 02 F6 | 	mov	arg01, objptr
127e8     7D E4 85 F1 | 	sub	objptr, #125
127ec     10 00 00 FF 
127f0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
127f4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
127f8     10 00 00 FF 
127fc     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
12800     10 16 06 F6 | 	mov	arg03, #16
12804     58 23 B0 FD | 	call	#__system____builtin_memmove
12808                 | ' leading_spaces:=0
12808     01 00 00 FF 
1280c     B2 E4 05 F1 | 	add	objptr, ##690
12810     F2 00 68 FC | 	wrlong	#0, objptr
12814     01 00 00 FF 
12818     B2 E4 85 F1 | 	sub	objptr, ##690
1281c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1281c                 | ' 
1281c                 | ' initcursor(154)
1281c     9A 12 06 F6 | 	mov	arg01, #154
12820     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
12824                 | ' 
12824                 | ' '---------------------------- start the cog
12824                 | ' 
12824                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
12824     10 00 00 FF 
12828     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1282c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
12830     10 00 00 FF 
12834     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
12838     10 E4 05 F1 | 	add	objptr, #16
1283c     10 FA 05 F6 | 	mov	result1, #16
12840     28 E4 61 FD | 	setq	objptr
12844     0A FB F1 FC | 	coginit	result1, arg02 wc
12848     01 FA 65 C6 |  if_b	neg	result1, #1
1284c     1C E4 05 F1 | 	add	objptr, #28
12850     F2 FA 61 FC | 	wrlong	result1, objptr
12854     2C E4 85 F1 | 	sub	objptr, #44
12858                 | ' waitms(40)							' wait for stabilize
12858     28 12 06 F6 | 	mov	arg01, #40
1285c     D4 26 B0 FD | 	call	#__system___waitms
12860                 | ' return cog							' return the driver's cog #
12860     2C E4 05 F1 | 	add	objptr, #44
12864     F2 FA 01 FB | 	rdlong	result1, objptr
12868     2C E4 85 F1 | 	sub	objptr, #44
1286c                 | _hg010b_spin2_start_ret
1286c     2D 00 64 FD | 	ret
12870                 | 
12870                 | ' 
12870                 | ' 
12870                 | ' '**************************************************************************************************************** 
12870                 | ' '                                                                                                             	*
12870                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
12870                 | ' '  Mode number - see start() above or bits below								*
12870                 | ' '                                                                                                             	*
12870                 | ' '****************************************************************************************************************
12870                 | ' 
12870                 | ' '---------------------------- initialize a cursor (MSDOS type)
12870                 | ' pub initcursor(color) |i
12870                 | _hg010b_spin2_initcursor
12870     03 4A 05 F6 | 	mov	COUNT_, #3
12874     A8 00 A0 FD | 	call	#pushregs_
12878     09 1F 02 F6 | 	mov	local01, arg01
1287c                 | ' 
1287c                 | ' cursor_x:=0							' place the cursor at 0:0
1287c     38 E4 05 F1 | 	add	objptr, #56
12880     F2 00 58 FC | 	wrword	#0, objptr
12884                 | ' cursor_y:=0
12884     02 E4 05 F1 | 	add	objptr, #2
12888     F2 00 48 FC | 	wrbyte	#0, objptr
1288c                 | ' repeat i from 0 to 111
1288c     00 20 06 F6 | 	mov	local02, #0
12890     F8 E5 05 F1 | 	add	objptr, #504
12894     97 1A 48 FB | 	callpa	#(@LR__1522-@LR__1520)>>2,fcache_load_ptr_
12898                 | LR__1520
12898                 | '   cursor[i]:=0
12898     10 23 02 F6 | 	mov	local03, local02
1289c     F2 22 02 F1 | 	add	local03, objptr
128a0     11 01 48 FC | 	wrbyte	#0, local03
128a4     01 20 06 F1 | 	add	local02, #1
128a8     70 20 56 F2 | 	cmps	local02, #112 wc
128ac     E8 FF 9F CD |  if_b	jmp	#LR__1520
128b0                 | ' repeat i from 112 to 127
128b0     70 20 06 F6 | 	mov	local02, #112
128b4                 | LR__1521
128b4                 | '   cursor[i]:=color  
128b4     10 23 02 F6 | 	mov	local03, local02
128b8     F2 22 02 F1 | 	add	local03, objptr
128bc     11 1F 42 FC | 	wrbyte	local01, local03
128c0     01 20 06 F1 | 	add	local02, #1
128c4     80 20 16 F2 | 	cmp	local02, #128 wc
128c8     E8 FF 9F CD |  if_b	jmp	#LR__1521
128cc                 | LR__1522
128cc                 | ' 'repeat i from 0 to 127
128cc                 | ' '  if ((i/8)//2)
128cc                 | ' '    cursor[i]:=15
128cc                 | ' '  else
128cc                 | ' '    cursor[i]:=0
128cc                 | ' '  if i>=120    
128cc                 | ' '    cursor[i]:=40
128cc                 | ' setspriteptr(17,@cursor)
128cc     F2 14 02 F6 | 	mov	arg02, objptr
128d0     01 00 00 FF 
128d4     32 E4 85 F1 | 	sub	objptr, ##562
128d8     11 12 06 F6 | 	mov	arg01, #17
128dc     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
128e0                 | ' setspritesize(17,8,16)
128e0     11 12 06 F6 | 	mov	arg01, #17
128e4     08 14 06 F6 | 	mov	arg02, #8
128e8     10 16 06 F6 | 	mov	arg03, #16
128ec     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
128f0                 | ' setspritepos(17,0,0)
128f0     11 12 06 F6 | 	mov	arg01, #17
128f4     00 14 06 F6 | 	mov	arg02, #0
128f8     00 16 06 F6 | 	mov	arg03, #0
128fc     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
12900     A7 F0 03 F6 | 	mov	ptra, fp
12904     B2 00 A0 FD | 	call	#popregs_
12908                 | _hg010b_spin2_initcursor_ret
12908     2D 00 64 FD | 	ret
1290c                 | 
1290c                 | ' 
1290c                 | '  
1290c                 | ' pub setcursorcolor(color) |i
1290c                 | _hg010b_spin2_setcursorcolor
1290c                 | ' 
1290c                 | ' 
1290c                 | ' repeat i from 0 to 111
1290c     00 00 06 F6 | 	mov	_var01, #0
12910     01 00 00 FF 
12914     32 E4 05 F1 | 	add	objptr, ##562
12918     97 1A 48 FB | 	callpa	#(@LR__1532-@LR__1530)>>2,fcache_load_ptr_
1291c                 | LR__1530
1291c                 | '   cursor[i]:=0
1291c     00 03 02 F6 | 	mov	_var02, _var01
12920     F2 02 02 F1 | 	add	_var02, objptr
12924     01 01 48 FC | 	wrbyte	#0, _var02
12928     01 00 06 F1 | 	add	_var01, #1
1292c     70 00 56 F2 | 	cmps	_var01, #112 wc
12930     E8 FF 9F CD |  if_b	jmp	#LR__1530
12934                 | ' repeat i from 112 to 127
12934     70 00 06 F6 | 	mov	_var01, #112
12938                 | LR__1531
12938                 | '   cursor[i]:=color  
12938     00 03 02 F6 | 	mov	_var02, _var01
1293c     F2 02 02 F1 | 	add	_var02, objptr
12940     01 13 42 FC | 	wrbyte	arg01, _var02
12944     01 00 06 F1 | 	add	_var01, #1
12948     80 00 16 F2 | 	cmp	_var01, #128 wc
1294c     E8 FF 9F CD |  if_b	jmp	#LR__1531
12950                 | LR__1532
12950     01 00 00 FF 
12954     32 E4 85 F1 | 	sub	objptr, ##562
12958                 | _hg010b_spin2_setcursorcolor_ret
12958     2D 00 64 FD | 	ret
1295c                 | 
1295c                 | '  
1295c                 | ' 
1295c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1295c                 | _hg010b_spin2_setmode
1295c     02 4A 05 F6 | 	mov	COUNT_, #2
12960     A8 00 A0 FD | 	call	#pushregs_
12964                 | ' 
12964                 | ' 
12964                 | ' dl_ptr:=@emptydl[0]
12964     01 00 00 FF 
12968     19 E4 05 F1 | 	add	objptr, ##537
1296c     F2 60 02 F6 | 	mov	muldivb_, objptr
12970     FD E5 85 F1 | 	sub	objptr, #509
12974     F2 60 62 FC | 	wrlong	muldivb_, objptr
12978                 | ' 
12978                 | ' if cog>0 
12978     10 E4 05 F1 | 	add	objptr, #16
1297c     F2 60 02 FB | 	rdlong	muldivb_, objptr
12980     2C E4 85 F1 | 	sub	objptr, #44
12984     01 60 56 F2 | 	cmps	muldivb_, #1 wc
12988                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
12988     01 12 06 36 |  if_ae	mov	arg01, #1
1298c     60 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
12990                 | ' xres:=1024
12990     01 00 00 FF 
12994     22 E4 05 F1 | 	add	objptr, ##546
12998     02 00 80 FF 
1299c     F2 00 68 FC | 	wrlong	##1024, objptr
129a0                 | ' yres:=576  
129a0     04 E4 05 F1 | 	add	objptr, #4
129a4     01 00 80 FF 
129a8     F2 80 68 FC | 	wrlong	##576, objptr
129ac                 | ' ppl:=(timings[3])
129ac     10 00 00 FF 
129b0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
129b4     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
129b8     51 E5 85 F1 | 	sub	objptr, #337
129bc     F2 60 62 FC | 	wrlong	muldivb_, objptr
129c0                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
129c0     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
129c4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
129c8     01 1E 66 F0 | 	shl	local01, #1
129cc     80 E4 85 F1 | 	sub	objptr, #128
129d0     F2 1E 62 FC | 	wrlong	local01, objptr
129d4                 | ' cpl1:=cpl '' todo remove
129d4     04 E4 05 F1 | 	add	objptr, #4
129d8     F2 1E 62 FC | 	wrlong	local01, objptr
129dc                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
129dc     02 00 00 FF 
129e0     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
129e4     41 E4 85 F1 | 	sub	objptr, #65
129e8     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
129ec                 | ' repeat i from 0 to 3
129ec     00 20 06 F6 | 	mov	local02, #0
129f0     02 00 00 FF 
129f4     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
129f8     08 E4 05 F1 | 	add	objptr, #8
129fc     97 20 48 FB | 	callpa	#(@LR__1541-@LR__1540)>>2,fcache_load_ptr_
12a00                 | LR__1540
12a00                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
12a00     10 1F 02 F6 | 	mov	local01, local02
12a04     02 1E 66 F0 | 	shl	local01, #2
12a08     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
12a0c     F2 60 02 FB | 	rdlong	muldivb_, objptr
12a10     11 60 66 F0 | 	shl	muldivb_, #17
12a14     0F 1F 02 FB | 	rdlong	local01, local01
12a18     30 1F 02 F1 | 	add	local01, muldivb_
12a1c     80 40 38 FF 
12a20     00 1E 06 F1 | 	add	local01, ##1887502336
12a24     10 61 02 F6 | 	mov	muldivb_, local02
12a28     02 60 66 F0 | 	shl	muldivb_, #2
12a2c     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
12a30     30 1F 62 FC | 	wrlong	local01, muldivb_
12a34     01 20 06 F1 | 	add	local02, #1
12a38     04 20 56 F2 | 	cmps	local02, #4 wc
12a3c     C0 FF 9F CD |  if_b	jmp	#LR__1540
12a40                 | LR__1541
12a40     20 E4 85 F1 | 	sub	objptr, #32
12a44                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
12a44     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
12a48     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
12a4c     14 1E 66 FC | 	wrlong	local01, #20
12a50                 | ' hubset(timings[10])
12a50     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
12a54     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
12a58     10 00 00 FF 
12a5c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
12a60     00 12 62 FD | 	hubset	arg01
12a64                 | ' waitms(1)                                                   	' wait for stabilization
12a64     01 12 06 F6 | 	mov	arg01, #1
12a68     C8 24 B0 FD | 	call	#__system___waitms
12a6c     10 00 00 FF 
12a70     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
12a74     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
12a78     5D E4 05 F1 | 	add	objptr, #93
12a7c     F2 20 62 FC | 	wrlong	local02, objptr
12a80     10 1F 52 F6 | 	abs	local01, local02 wc
12a84     04 1E 46 F0 | 	shr	local01, #4
12a88     0F 1F 82 F6 | 	negc	local01, local01
12a8c     9C E4 05 F1 | 	add	objptr, #156
12a90     F2 1E 62 FC | 	wrlong	local01, objptr
12a94     A4 E4 85 F1 | 	sub	objptr, #164
12a98     F2 20 02 FB | 	rdlong	local02, objptr
12a9c     08 E4 05 F1 | 	add	objptr, #8
12aa0     F2 1E 02 FB | 	rdlong	local01, objptr
12aa4     0F 21 02 FD | 	qmul	local02, local01
12aa8                 | ' lines:=timings[11]
12aa8                 | ' t_lines:=lines/16
12aa8                 | ' buflen:=cpl*lines						' framebuffer length in longs
12aa8     29 E4 85 F1 | 	sub	objptr, #41
12aac                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
12aac     19 1E C6 F9 | 	decod	local01, #25
12ab0                 | ' mode_ptr:=@timings						' set pointers to timings
12ab0     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
12ab4                 | ' graphmode:=1024+512+192+48							' det global variable
12ab4                 | ' makedl(graphmode)							' make a DL for the mode
12ab4     03 00 00 FF 
12ab8     F0 12 06 F6 | 	mov	arg01, ##1776
12abc     18 20 62 FD | 	getqx	local02
12ac0     F2 20 62 FC | 	wrlong	local02, objptr
12ac4     34 E4 85 F1 | 	sub	objptr, #52
12ac8     02 20 66 F0 | 	shl	local02, #2
12acc     10 1F 82 F1 | 	sub	local01, local02
12ad0     F2 1E 62 FC | 	wrlong	local01, objptr
12ad4     14 E4 05 F1 | 	add	objptr, #20
12ad8     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
12adc     79 E4 05 F1 | 	add	objptr, #121
12ae0     03 00 80 FF 
12ae4     F2 E0 69 FC | 	wrlong	##1776, objptr
12ae8     8D E4 85 F1 | 	sub	objptr, #141
12aec     10 00 00 FF 
12af0     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
12af4     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
12af8                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
12af8     F2 1E 02 FB | 	rdlong	local01, objptr
12afc     D9 E4 05 F1 | 	add	objptr, #217
12b00     F2 1E 62 FC | 	wrlong	local01, objptr
12b04                 | ' s_font_ptr:=font_ptr
12b04     D5 E4 85 F1 | 	sub	objptr, #213
12b08     F2 1E 02 FB | 	rdlong	local01, objptr
12b0c     D9 E4 05 F1 | 	add	objptr, #217
12b10     F2 1E 62 FC | 	wrlong	local01, objptr
12b14                 | ' s_lines:=lines
12b14     80 E4 85 F1 | 	sub	objptr, #128
12b18     F2 1E 02 FB | 	rdlong	local01, objptr
12b1c     84 E4 05 F1 | 	add	objptr, #132
12b20     F2 1E 62 FC | 	wrlong	local01, objptr
12b24                 | ' s_buflen:=buflen
12b24     AD E4 85 F1 | 	sub	objptr, #173
12b28     F2 1E 02 FB | 	rdlong	local01, objptr
12b2c     B5 E4 05 F1 | 	add	objptr, #181
12b30     F2 1E 62 FC | 	wrlong	local01, objptr
12b34                 | ' s_cpl:=cpl
12b34     94 E4 85 F1 | 	sub	objptr, #148
12b38     F2 1E 02 FB | 	rdlong	local01, objptr
12b3c     90 E4 05 F1 | 	add	objptr, #144
12b40     F2 1E 62 FC | 	wrlong	local01, objptr
12b44                 | ' s_cpl1:=cpl
12b44     90 E4 85 F1 | 	sub	objptr, #144
12b48     F2 1E 02 FB | 	rdlong	local01, objptr
12b4c     98 E4 05 F1 | 	add	objptr, #152
12b50     F2 1E 62 FC | 	wrlong	local01, objptr
12b54                 | ' st_lines:=t_lines
12b54     0C E4 05 F1 | 	add	objptr, #12
12b58     F2 1E 02 FB | 	rdlong	local01, objptr
12b5c     04 E4 05 F1 | 	add	objptr, #4
12b60     F2 1E 62 FC | 	wrlong	local01, objptr
12b64                 | ' ppl:=ppl/xzoom  
12b64     28 E4 85 F1 | 	sub	objptr, #40
12b68     F2 5E 02 FB | 	rdlong	muldiva_, objptr
12b6c     2C E4 05 F1 | 	add	objptr, #44
12b70     F2 60 02 FB | 	rdlong	muldivb_, objptr
12b74     01 E5 85 F1 | 	sub	objptr, #257
12b78     BA 00 A0 FD | 	call	#divide_
12b7c     D5 E4 05 F1 | 	add	objptr, #213
12b80     F2 60 62 FC | 	wrlong	muldivb_, objptr
12b84                 | ' s_ppl:=ppl
12b84     1C E4 05 F1 | 	add	objptr, #28
12b88     F2 60 62 FC | 	wrlong	muldivb_, objptr
12b8c     F1 E4 85 F1 | 	sub	objptr, #241
12b90                 | ' waitms(20)							' wait 
12b90     14 12 06 F6 | 	mov	arg01, #20
12b94     9C 23 B0 FD | 	call	#__system___waitms
12b98     A7 F0 03 F6 | 	mov	ptra, fp
12b9c     B2 00 A0 FD | 	call	#popregs_
12ba0                 | _hg010b_spin2_setmode_ret
12ba0     2D 00 64 FD | 	ret
12ba4                 | 
12ba4                 | ' 
12ba4                 | ' 
12ba4                 | ' '****************************************************************************************************************
12ba4                 | ' '                                                                                                             	*
12ba4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
12ba4                 | ' '                                                                                                             	*
12ba4                 | ' '****************************************************************************************************************
12ba4                 | ' 
12ba4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
12ba4                 | _hg010b_spin2_makedl
12ba4                 | ' 
12ba4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
12ba4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
12ba4                 | ' repeat i from 0 to 11                                                           ' clear DL
12ba4     00 00 06 F6 | 	mov	_var01, #0
12ba8     E9 E5 05 F1 | 	add	objptr, #489
12bac     97 0E 48 FB | 	callpa	#(@LR__1551-@LR__1550)>>2,fcache_load_ptr_
12bb0                 | LR__1550
12bb0                 | '   displaylist[i]:=0 
12bb0     00 03 02 F6 | 	mov	_var02, _var01
12bb4     02 02 66 F0 | 	shl	_var02, #2
12bb8     F2 02 02 F1 | 	add	_var02, objptr
12bbc     01 01 68 FC | 	wrlong	#0, _var02
12bc0     01 00 06 F1 | 	add	_var01, #1
12bc4     0C 00 56 F2 | 	cmps	_var01, #12 wc
12bc8     E4 FF 9F CD |  if_b	jmp	#LR__1550
12bcc                 | LR__1551
12bcc                 | '                         ' 
12bcc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
12bcc     8C E5 85 F1 | 	sub	objptr, #396
12bd0     F2 02 02 FB | 	rdlong	_var02, objptr
12bd4     14 02 66 F0 | 	shl	_var02, #20
12bd8     01 02 06 F1 | 	add	_var02, #1
12bdc     04 E4 85 F1 | 	sub	objptr, #4
12be0     F2 00 02 FB | 	rdlong	_var01, objptr
12be4     02 00 66 F0 | 	shl	_var01, #2
12be8     04 00 66 F0 | 	shl	_var01, #4
12bec     00 03 02 F1 | 	add	_var02, _var01
12bf0     90 E5 05 F1 | 	add	objptr, #400
12bf4     F2 02 62 FC | 	wrlong	_var02, objptr
12bf8     E9 E5 85 F1 | 	sub	objptr, #489
12bfc                 | ' displaylist[1]:=buf_ptr<<4+%10  
12bfc     F2 02 02 FB | 	rdlong	_var02, objptr
12c00     04 02 66 F0 | 	shl	_var02, #4
12c04     02 02 06 F1 | 	add	_var02, #2
12c08     ED E5 05 F1 | 	add	objptr, #493
12c0c     F2 02 62 FC | 	wrlong	_var02, objptr
12c10                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
12c10     04 E4 85 F1 | 	sub	objptr, #4
12c14     F2 02 02 F6 | 	mov	_var02, objptr
12c18     CD E5 85 F1 | 	sub	objptr, #461
12c1c     F2 02 62 FC | 	wrlong	_var02, objptr
12c20     1C E4 85 F1 | 	sub	objptr, #28
12c24                 | _hg010b_spin2_makedl_ret
12c24     2D 00 64 FD | 	ret
12c28                 | 
12c28                 | ' 
12c28                 | ' 
12c28                 | ' '****************************************************************************************************************
12c28                 | ' '                                                                        					*
12c28                 | ' '  Graphic primitives                                                    					*
12c28                 | ' '                                                                        					*
12c28                 | ' '****************************************************************************************************************
12c28                 | ' 
12c28                 | ' pub setspriteptr(num,ptr)
12c28                 | _hg010b_spin2_setspriteptr
12c28                 | ' long[@spr1ptr+12*num]:=ptr
12c28     0D E5 05 F1 | 	add	objptr, #269
12c2c     F2 00 02 F6 | 	mov	_var01, objptr
12c30     09 03 02 F6 | 	mov	_var02, arg01
12c34     01 02 66 F0 | 	shl	_var02, #1
12c38     09 03 02 F1 | 	add	_var02, arg01
12c3c     02 02 66 F0 | 	shl	_var02, #2
12c40     01 01 02 F1 | 	add	_var01, _var02
12c44     00 15 62 FC | 	wrlong	arg02, _var01
12c48     0D E5 85 F1 | 	sub	objptr, #269
12c4c                 | _hg010b_spin2_setspriteptr_ret
12c4c     2D 00 64 FD | 	ret
12c50                 | 
12c50                 | ' 
12c50                 | ' pub setspritepos(num,x,y)
12c50                 | _hg010b_spin2_setspritepos
12c50                 | ' word[@spr1ptr+12*num+4]:=x
12c50     0D E5 05 F1 | 	add	objptr, #269
12c54     F2 00 02 F6 | 	mov	_var01, objptr
12c58     09 03 02 F6 | 	mov	_var02, arg01
12c5c     01 02 66 F0 | 	shl	_var02, #1
12c60     09 03 02 F1 | 	add	_var02, arg01
12c64     02 02 66 F0 | 	shl	_var02, #2
12c68     01 01 02 F1 | 	add	_var01, _var02
12c6c     04 00 06 F1 | 	add	_var01, #4
12c70     00 15 52 FC | 	wrword	arg02, _var01
12c74                 | ' word[@spr1ptr+12*num+6]:=y
12c74     F2 00 02 F6 | 	mov	_var01, objptr
12c78     09 03 02 F6 | 	mov	_var02, arg01
12c7c     01 02 66 F0 | 	shl	_var02, #1
12c80     09 03 02 F1 | 	add	_var02, arg01
12c84     02 02 66 F0 | 	shl	_var02, #2
12c88     01 01 02 F1 | 	add	_var01, _var02
12c8c     06 00 06 F1 | 	add	_var01, #6
12c90     00 17 52 FC | 	wrword	arg03, _var01
12c94     0D E5 85 F1 | 	sub	objptr, #269
12c98                 | _hg010b_spin2_setspritepos_ret
12c98     2D 00 64 FD | 	ret
12c9c                 | 
12c9c                 | ' 
12c9c                 | ' pub setspritesize(num,w,h)
12c9c                 | _hg010b_spin2_setspritesize
12c9c                 | ' word[@spr1ptr+12*num+8]:=w
12c9c     0D E5 05 F1 | 	add	objptr, #269
12ca0     F2 00 02 F6 | 	mov	_var01, objptr
12ca4     09 03 02 F6 | 	mov	_var02, arg01
12ca8     01 02 66 F0 | 	shl	_var02, #1
12cac     09 03 02 F1 | 	add	_var02, arg01
12cb0     02 02 66 F0 | 	shl	_var02, #2
12cb4     01 01 02 F1 | 	add	_var01, _var02
12cb8     08 00 06 F1 | 	add	_var01, #8
12cbc     00 15 52 FC | 	wrword	arg02, _var01
12cc0                 | ' word[@spr1ptr+12*num+10]:=h
12cc0     F2 00 02 F6 | 	mov	_var01, objptr
12cc4     09 03 02 F6 | 	mov	_var02, arg01
12cc8     01 02 66 F0 | 	shl	_var02, #1
12ccc     09 03 02 F1 | 	add	_var02, arg01
12cd0     02 02 66 F0 | 	shl	_var02, #2
12cd4     01 01 02 F1 | 	add	_var01, _var02
12cd8     0A 00 06 F1 | 	add	_var01, #10
12cdc     00 17 52 FC | 	wrword	arg03, _var01
12ce0     0D E5 85 F1 | 	sub	objptr, #269
12ce4                 | _hg010b_spin2_setspritesize_ret
12ce4     2D 00 64 FD | 	ret
12ce8                 | 
12ce8                 | ' 
12ce8                 | ' 
12ce8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
12ce8                 | ' 
12ce8                 | ' 
12ce8                 | ' pub putpixel(x,y,c)
12ce8                 | _hg010b_spin2_putpixel
12ce8     04 4A 05 F6 | 	mov	COUNT_, #4
12cec     A8 00 A0 FD | 	call	#pushregs_
12cf0     09 1F 02 F6 | 	mov	local01, arg01
12cf4                 | ' 
12cf4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
12cf4     00 20 06 F6 | 	mov	local02, #0
12cf8     00 1E 56 F2 | 	cmps	local01, #0 wc
12cfc     01 20 66 36 |  if_ae	neg	local02, #1
12d00     E5 E4 05 F1 | 	add	objptr, #229
12d04     F2 1A 02 FB | 	rdlong	arg05, objptr
12d08     02 1A 66 F0 | 	shl	arg05, #2
12d0c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
12d10     11 23 A2 F1 | 	subx	local03, local03
12d14     11 21 02 F5 | 	and	local02, local03
12d18     00 22 06 F6 | 	mov	local03, #0
12d1c     00 14 56 F2 | 	cmps	arg02, #0 wc
12d20     01 22 66 36 |  if_ae	neg	local03, #1
12d24     11 21 02 F5 | 	and	local02, local03
12d28     04 E4 85 F1 | 	sub	objptr, #4
12d2c     F2 22 02 FB | 	rdlong	local03, objptr
12d30     E1 E4 85 F1 | 	sub	objptr, #225
12d34     11 15 52 F2 | 	cmps	arg02, local03 wc
12d38     12 25 A2 F1 | 	subx	local04, local04
12d3c     12 21 CA F7 | 	test	local02, local04 wz
12d40     48 00 90 AD |  if_e	jmp	#LR__1560
12d44     D9 E4 05 F1 | 	add	objptr, #217
12d48     F2 12 02 FB | 	rdlong	arg01, objptr
12d4c     14 E4 05 F1 | 	add	objptr, #20
12d50     F2 24 02 FB | 	rdlong	local04, objptr
12d54     02 24 66 F0 | 	shl	local04, #2
12d58     0A 25 02 FD | 	qmul	local04, arg02
12d5c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
12d5c     0B 15 02 F6 | 	mov	arg02, arg03
12d60     01 16 06 F6 | 	mov	arg03, #1
12d64     00 18 06 F6 | 	mov	arg04, #0
12d68     01 1A 06 F6 | 	mov	arg05, #1
12d6c     0A 00 00 FF 
12d70     D3 E5 05 F1 | 	add	objptr, ##5587
12d74     18 24 62 FD | 	getqx	local04
12d78     0F 25 02 F1 | 	add	local04, local01
12d7c     12 13 02 F1 | 	add	arg01, local04
12d80     08 15 B0 FD | 	call	#_psram_spin2_fill
12d84     0B 00 00 FF 
12d88     C0 E4 85 F1 | 	sub	objptr, ##5824
12d8c                 | LR__1560
12d8c     A7 F0 03 F6 | 	mov	ptra, fp
12d90     B2 00 A0 FD | 	call	#popregs_
12d94                 | _hg010b_spin2_putpixel_ret
12d94     2D 00 64 FD | 	ret
12d98                 | 
12d98                 | ' 
12d98                 | ' pub putpixel2(x,y,c)
12d98                 | _hg010b_spin2_putpixel2
12d98     02 4A 05 F6 | 	mov	COUNT_, #2
12d9c     A8 00 A0 FD | 	call	#pushregs_
12da0     D9 E4 05 F1 | 	add	objptr, #217
12da4     F2 1E 02 FB | 	rdlong	local01, objptr
12da8     14 E4 05 F1 | 	add	objptr, #20
12dac     F2 1A 02 FB | 	rdlong	arg05, objptr
12db0     02 1A 66 F0 | 	shl	arg05, #2
12db4     0A 1B 02 FD | 	qmul	arg05, arg02
12db8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
12db8     0B 15 02 F6 | 	mov	arg02, arg03
12dbc     01 16 06 F6 | 	mov	arg03, #1
12dc0     00 18 06 F6 | 	mov	arg04, #0
12dc4     01 1A 06 F6 | 	mov	arg05, #1
12dc8     0A 00 00 FF 
12dcc     D3 E5 05 F1 | 	add	objptr, ##5587
12dd0     18 20 62 FD | 	getqx	local02
12dd4     09 21 02 F1 | 	add	local02, arg01
12dd8     10 1F 02 F1 | 	add	local01, local02
12ddc     0F 13 02 F6 | 	mov	arg01, local01
12de0     A8 14 B0 FD | 	call	#_psram_spin2_fill
12de4     0B 00 00 FF 
12de8     C0 E4 85 F1 | 	sub	objptr, ##5824
12dec     A7 F0 03 F6 | 	mov	ptra, fp
12df0     B2 00 A0 FD | 	call	#popregs_
12df4                 | _hg010b_spin2_putpixel2_ret
12df4     2D 00 64 FD | 	ret
12df8                 | 
12df8                 | ' 
12df8                 | ' pub getpixel2(x,y): c 
12df8                 | _hg010b_spin2_getpixel2
12df8     02 4A 05 F6 | 	mov	COUNT_, #2
12dfc     A8 00 A0 FD | 	call	#pushregs_
12e00     0C F0 07 F1 | 	add	ptra, #12
12e04     04 4E 05 F1 | 	add	fp, #4
12e08     A7 12 62 FC | 	wrlong	arg01, fp
12e0c     04 4E 05 F1 | 	add	fp, #4
12e10     A7 14 62 FC | 	wrlong	arg02, fp
12e14     08 4E 85 F1 | 	sub	fp, #8
12e18     A7 00 68 FC | 	wrlong	#0, fp
12e1c     A7 12 02 F6 | 	mov	arg01, fp
12e20     D9 E4 05 F1 | 	add	objptr, #217
12e24     F2 14 02 FB | 	rdlong	arg02, objptr
12e28     14 E4 05 F1 | 	add	objptr, #20
12e2c     F2 16 02 FB | 	rdlong	arg03, objptr
12e30     02 16 66 F0 | 	shl	arg03, #2
12e34     08 4E 05 F1 | 	add	fp, #8
12e38     A7 FA 01 FB | 	rdlong	result1, fp
12e3c     FD 16 02 FD | 	qmul	arg03, result1
12e40                 | ' 
12e40                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
12e40     04 4E 85 F1 | 	sub	fp, #4
12e44     A7 1E 02 FB | 	rdlong	local01, fp
12e48     04 4E 85 F1 | 	sub	fp, #4
12e4c     01 16 06 F6 | 	mov	arg03, #1
12e50     0A 00 00 FF 
12e54     D3 E5 05 F1 | 	add	objptr, ##5587
12e58     18 20 62 FD | 	getqx	local02
12e5c     0F 21 02 F1 | 	add	local02, local01
12e60     10 15 02 F1 | 	add	arg02, local02
12e64     EC 12 B0 FD | 	call	#_psram_spin2_read1
12e68     0B 00 00 FF 
12e6c     C0 E4 85 F1 | 	sub	objptr, ##5824
12e70                 | ' return c
12e70     A7 FA 01 FB | 	rdlong	result1, fp
12e74     A7 F0 03 F6 | 	mov	ptra, fp
12e78     B2 00 A0 FD | 	call	#popregs_
12e7c                 | _hg010b_spin2_getpixel2_ret
12e7c     2D 00 64 FD | 	ret
12e80                 | 
12e80                 | '   
12e80                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
12e80                 | ' 
12e80                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
12e80                 | _hg010b_spin2_fastline
12e80     02 4A 05 F6 | 	mov	COUNT_, #2
12e84     A8 00 A0 FD | 	call	#pushregs_
12e88     09 1F 02 F6 | 	mov	local01, arg01
12e8c     0A 21 02 F6 | 	mov	local02, arg02
12e90                 | ' 
12e90                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
12e90     00 16 56 F2 | 	cmps	arg03, #0 wc
12e94     F4 00 90 CD |  if_b	jmp	#LR__1570
12e98     01 00 00 FF 
12e9c     26 E4 05 F1 | 	add	objptr, ##550
12ea0     F2 1A 02 FB | 	rdlong	arg05, objptr
12ea4     01 00 00 FF 
12ea8     26 E4 85 F1 | 	sub	objptr, ##550
12eac     0D 17 52 F2 | 	cmps	arg03, arg05 wc
12eb0     D8 00 90 3D |  if_ae	jmp	#LR__1570
12eb4     00 1E 56 F2 | 	cmps	local01, #0 wc
12eb8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
12ebc     CC 00 90 CD |  if_b	jmp	#LR__1570
12ec0     01 00 00 FF 
12ec4     22 E4 05 F1 | 	add	objptr, ##546
12ec8     F2 1A 02 FB | 	rdlong	arg05, objptr
12ecc     01 00 00 FF 
12ed0     22 E4 85 F1 | 	sub	objptr, ##546
12ed4     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
12ed8     01 00 00 1F 
12edc     22 E4 05 11 |  if_a	add	objptr, ##546
12ee0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
12ee4     01 00 00 1F 
12ee8     22 E4 85 11 |  if_a	sub	objptr, ##546
12eec     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
12ef0                 | '   return
12ef0     98 00 90 1D |  if_a	jmp	#LR__1570
12ef4     10 1F 5A F2 | 	cmps	local01, local02 wcz
12ef8     0F 1B 02 16 |  if_a	mov	arg05, local01
12efc     10 1F 02 16 |  if_a	mov	local01, local02
12f00     0D 21 02 16 |  if_a	mov	local02, arg05
12f04     00 1E 56 F2 | 	cmps	local01, #0 wc
12f08     00 1E 06 C6 |  if_b	mov	local01, #0
12f0c     01 00 00 FF 
12f10     22 E4 05 F1 | 	add	objptr, ##546
12f14     F2 1A 02 FB | 	rdlong	arg05, objptr
12f18     01 00 00 FF 
12f1c     22 E4 85 F1 | 	sub	objptr, ##546
12f20     0D 21 52 F2 | 	cmps	local02, arg05 wc
12f24     01 00 00 3F 
12f28     22 E4 05 31 |  if_ae	add	objptr, ##546
12f2c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
12f30     01 00 00 3F 
12f34     22 E4 85 31 |  if_ae	sub	objptr, ##546
12f38     D9 E4 05 F1 | 	add	objptr, #217
12f3c     F2 12 02 FB | 	rdlong	arg01, objptr
12f40     14 E4 05 F1 | 	add	objptr, #20
12f44     F2 1A 02 FB | 	rdlong	arg05, objptr
12f48     02 1A 66 F0 | 	shl	arg05, #2
12f4c     0B 1B 02 FD | 	qmul	arg05, arg03
12f50                 | ' if x1>x2
12f50                 | '   x1,x2:=x2,x1
12f50                 | ' if x1<0 
12f50                 | '   x1:=0
12f50                 | ' if x2>=xres
12f50                 | '   x2:=xres-1  
12f50     01 20 86 31 |  if_ae	sub	local02, #1
12f54                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
12f54     01 16 06 F6 | 	mov	arg03, #1
12f58     10 17 02 F1 | 	add	arg03, local02
12f5c     0F 17 82 F1 | 	sub	arg03, local01
12f60     0C 15 02 F6 | 	mov	arg02, arg04
12f64     00 18 06 F6 | 	mov	arg04, #0
12f68     01 1A 06 F6 | 	mov	arg05, #1
12f6c     0A 00 00 FF 
12f70     D3 E5 05 F1 | 	add	objptr, ##5587
12f74     18 20 62 FD | 	getqx	local02
12f78     0F 21 02 F1 | 	add	local02, local01
12f7c     10 13 02 F1 | 	add	arg01, local02
12f80     08 13 B0 FD | 	call	#_psram_spin2_fill
12f84     0B 00 00 FF 
12f88     C0 E4 85 F1 | 	sub	objptr, ##5824
12f8c                 | LR__1570
12f8c     A7 F0 03 F6 | 	mov	ptra, fp
12f90     B2 00 A0 FD | 	call	#popregs_
12f94                 | _hg010b_spin2_fastline_ret
12f94     2D 00 64 FD | 	ret
12f98                 | 
12f98                 | ' 
12f98                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
12f98                 | _hg010b_spin2_draw
12f98     0E 4A 05 F6 | 	mov	COUNT_, #14
12f9c     A8 00 A0 FD | 	call	#pushregs_
12fa0     09 1F 02 F6 | 	mov	local01, arg01
12fa4     0A 21 02 F6 | 	mov	local02, arg02
12fa8     0B 23 02 F6 | 	mov	local03, arg03
12fac     0C 25 02 F6 | 	mov	local04, arg04
12fb0     0D 27 02 F6 | 	mov	local05, arg05
12fb4                 | ' 
12fb4                 | ' if (y1==y2)
12fb4     12 21 0A F2 | 	cmp	local02, local04 wz
12fb8     18 00 90 5D |  if_ne	jmp	#LR__1580
12fbc                 | '   fastline(x1,x2,y1,c)
12fbc     0F 13 02 F6 | 	mov	arg01, local01
12fc0     11 15 02 F6 | 	mov	arg02, local03
12fc4     10 17 02 F6 | 	mov	arg03, local02
12fc8     13 19 02 F6 | 	mov	arg04, local05
12fcc     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
12fd0     F8 00 90 FD | 	jmp	#LR__1586
12fd4                 | LR__1580
12fd4                 | ' else  
12fd4                 | '   x:=x1
12fd4     0F 29 02 F6 | 	mov	local06, local01
12fd8                 | '   y:=y1
12fd8     10 2B 02 F6 | 	mov	local07, local02
12fdc                 | ' 
12fdc                 | '   if (x1<x2) 
12fdc     11 1F 52 F2 | 	cmps	local01, local03 wc
12fe0                 | '     xi:=1
12fe0     01 2C 06 C6 |  if_b	mov	local08, #1
12fe4                 | '     dx:=x2-x1
12fe4     11 2F 02 C6 |  if_b	mov	local09, local03
12fe8     0F 2F 82 C1 |  if_b	sub	local09, local01
12fec                 | '   else
12fec                 | '     xi:=-1
12fec     01 2C 66 36 |  if_ae	neg	local08, #1
12ff0                 | '     dx:=x1-x2
12ff0     11 1F 82 31 |  if_ae	sub	local01, local03
12ff4     0F 2F 02 36 |  if_ae	mov	local09, local01
12ff8                 | '   
12ff8                 | '   if (y1<y2) 
12ff8     12 21 52 F2 | 	cmps	local02, local04 wc
12ffc                 | '     yi:=1
12ffc     01 30 06 C6 |  if_b	mov	local10, #1
13000                 | '     dy:=y2-y1
13000     12 33 02 C6 |  if_b	mov	local11, local04
13004     10 33 82 C1 |  if_b	sub	local11, local02
13008                 | '   else
13008                 | '     yi:=-1
13008     01 30 66 36 |  if_ae	neg	local10, #1
1300c                 | '     dy:=y1-y2
1300c     12 21 82 31 |  if_ae	sub	local02, local04
13010     10 33 02 36 |  if_ae	mov	local11, local02
13014                 | ' 
13014                 | '   putpixel(x,y,c)
13014     13 17 02 F6 | 	mov	arg03, local05
13018     14 13 02 F6 | 	mov	arg01, local06
1301c     15 15 02 F6 | 	mov	arg02, local07
13020     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13024                 | ' 
13024                 | '   if (dx>dy)
13024     19 2F 5A F2 | 	cmps	local09, local11 wcz
13028     50 00 90 ED |  if_be	jmp	#LR__1582
1302c                 | '     ai:=(dy-dx)*2
1302c     19 35 02 F6 | 	mov	local12, local11
13030     17 35 82 F1 | 	sub	local12, local09
13034     01 34 66 F0 | 	shl	local12, #1
13038                 | '     bi:=dy*2
13038     01 32 66 F0 | 	shl	local11, #1
1303c     19 37 02 F6 | 	mov	local13, local11
13040                 | '     d:= bi-dx
13040     1B 39 02 F6 | 	mov	local14, local13
13044     17 39 82 F1 | 	sub	local14, local09
13048                 | '     repeat while (x<>x2) 
13048                 | LR__1581
13048     11 29 0A F2 | 	cmp	local06, local03 wz
1304c     7C 00 90 AD |  if_e	jmp	#LR__1585
13050                 | '       if (d>=0) 
13050     00 38 56 F2 | 	cmps	local14, #0 wc
13054                 | '         x+=xi
13054     16 29 02 31 |  if_ae	add	local06, local08
13058                 | '         y+=yi
13058     18 2B 02 31 |  if_ae	add	local07, local10
1305c                 | '         d+=ai
1305c     1A 39 02 31 |  if_ae	add	local14, local12
13060                 | '       else
13060                 | '         d+=bi
13060     1B 39 02 C1 |  if_b	add	local14, local13
13064                 | '         x+=xi
13064     16 29 02 C1 |  if_b	add	local06, local08
13068                 | '       putpixel(x,y,c)
13068     14 13 02 F6 | 	mov	arg01, local06
1306c     15 15 02 F6 | 	mov	arg02, local07
13070     13 17 02 F6 | 	mov	arg03, local05
13074     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
13078     CC FF 9F FD | 	jmp	#LR__1581
1307c                 | LR__1582
1307c                 | '   else
1307c                 | '     ai:=(dx-dy)*2
1307c     17 35 02 F6 | 	mov	local12, local09
13080     19 35 82 F1 | 	sub	local12, local11
13084     01 34 66 F0 | 	shl	local12, #1
13088                 | '     bi:=dx*2
13088     01 2E 66 F0 | 	shl	local09, #1
1308c     17 37 02 F6 | 	mov	local13, local09
13090                 | '     d:=bi-dy
13090     1B 39 02 F6 | 	mov	local14, local13
13094     19 39 82 F1 | 	sub	local14, local11
13098                 | '     repeat while (y<>y2)
13098                 | LR__1583
13098     12 2B 0A F2 | 	cmp	local07, local04 wz
1309c     2C 00 90 AD |  if_e	jmp	#LR__1584
130a0                 | '       if (d>=0)
130a0     00 38 56 F2 | 	cmps	local14, #0 wc
130a4                 | '         x+=xi
130a4     16 29 02 31 |  if_ae	add	local06, local08
130a8                 | '         y+=yi
130a8     18 2B 02 31 |  if_ae	add	local07, local10
130ac                 | '         d+=ai
130ac     1A 39 02 31 |  if_ae	add	local14, local12
130b0                 | '       else
130b0                 | '         d+=bi
130b0     1B 39 02 C1 |  if_b	add	local14, local13
130b4                 | '         y+=yi
130b4     18 2B 02 C1 |  if_b	add	local07, local10
130b8                 | '       putpixel(x, y,c)
130b8     14 13 02 F6 | 	mov	arg01, local06
130bc     15 15 02 F6 | 	mov	arg02, local07
130c0     13 17 02 F6 | 	mov	arg03, local05
130c4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
130c8     CC FF 9F FD | 	jmp	#LR__1583
130cc                 | LR__1584
130cc                 | LR__1585
130cc                 | LR__1586
130cc     A7 F0 03 F6 | 	mov	ptra, fp
130d0     B2 00 A0 FD | 	call	#popregs_
130d4                 | _hg010b_spin2_draw_ret
130d4     2D 00 64 FD | 	ret
130d8                 | 
130d8                 | '  
130d8                 | ' pub fillpush(val) 
130d8                 | _hg010b_spin2_fillpush
130d8                 | ' fillstack[fillptr]:=val
130d8     0B 00 00 FF 
130dc     B6 E4 05 F1 | 	add	objptr, ##5814
130e0     F2 00 02 FB | 	rdlong	_var01, objptr
130e4     02 00 66 F0 | 	shl	_var01, #2
130e8     0A 00 00 FF 
130ec     00 E4 85 F1 | 	sub	objptr, ##5120
130f0     F2 00 02 F1 | 	add	_var01, objptr
130f4     00 13 62 FC | 	wrlong	arg01, _var01
130f8                 | ' fillptr+=1   
130f8     0A 00 00 FF 
130fc     00 E4 05 F1 | 	add	objptr, ##5120
13100     F2 00 02 FB | 	rdlong	_var01, objptr
13104     01 00 06 F1 | 	add	_var01, #1
13108     F2 00 62 FC | 	wrlong	_var01, objptr
1310c     0B 00 00 FF 
13110     B6 E4 85 F1 | 	sub	objptr, ##5814
13114                 | _hg010b_spin2_fillpush_ret
13114     2D 00 64 FD | 	ret
13118                 | 
13118                 | ' 
13118                 | '     
13118                 | ' pub fillpop() : val
13118                 | _hg010b_spin2_fillpop
13118                 | ' 
13118                 | ' fillptr-=1
13118     0B 00 00 FF 
1311c     B6 E4 05 F1 | 	add	objptr, ##5814
13120     F2 FA 01 FB | 	rdlong	result1, objptr
13124     01 FA 85 F1 | 	sub	result1, #1
13128     F2 FA 61 FC | 	wrlong	result1, objptr
1312c                 | ' if fillptr<0
1312c     0B 00 00 FF 
13130     B6 E4 85 F1 | 	sub	objptr, ##5814
13134     00 FA 55 F2 | 	cmps	result1, #0 wc
13138                 | '   fillptr:=0
13138     0B 00 00 CF 
1313c     B6 E4 05 C1 |  if_b	add	objptr, ##5814
13140     F2 00 68 CC |  if_b	wrlong	#0, objptr
13144     0B 00 00 CF 
13148     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1314c                 | '   val:=-12345
1314c     E7 FF 7F CF 
13150     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
13154     28 00 90 CD |  if_b	jmp	#LR__1590
13158                 | ' else 
13158                 | '   val:=fillstack[fillptr]
13158     0B 00 00 FF 
1315c     B6 E4 05 F1 | 	add	objptr, ##5814
13160     F2 00 02 FB | 	rdlong	_var01, objptr
13164     02 00 66 F0 | 	shl	_var01, #2
13168     0A 00 00 FF 
1316c     00 E4 85 F1 | 	sub	objptr, ##5120
13170     F2 00 02 F1 | 	add	_var01, objptr
13174     00 01 02 FB | 	rdlong	_var01, _var01
13178     01 00 00 FF 
1317c     B6 E4 85 F1 | 	sub	objptr, ##694
13180                 | LR__1590
13180                 | ' return val
13180     00 FB 01 F6 | 	mov	result1, _var01
13184                 | _hg010b_spin2_fillpop_ret
13184     2D 00 64 FD | 	ret
13188                 | 
13188                 | ' 
13188                 | '       
13188                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
13188                 | _hg010b_spin2_fill
13188     0B 4A 05 F6 | 	mov	COUNT_, #11
1318c     A8 00 A0 FD | 	call	#pushregs_
13190                 | ' 
13190                 | ' newcolor:=newcolor & 255
13190     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
13194                 | ' oldcolor:=oldcolor & 255
13194     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
13198                 | ' 
13198                 | ' if (oldcolor == newcolor) 
13198     0F 21 0A F2 | 	cmp	local02, local01 wz
1319c                 | '   return
1319c     7C 02 90 AD |  if_e	jmp	#LR__1609
131a0                 | ' 
131a0                 | ' fillptr:=0
131a0     0B 00 00 FF 
131a4     B6 E4 05 F1 | 	add	objptr, ##5814
131a8     F2 00 68 FC | 	wrlong	#0, objptr
131ac                 | ' fillmax:=0
131ac     04 E4 05 F1 | 	add	objptr, #4
131b0     F2 00 68 FC | 	wrlong	#0, objptr
131b4     0B 00 00 FF 
131b8     BA E4 85 F1 | 	sub	objptr, ##5818
131bc                 | ' fillpush(x)
131bc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
131c0                 | ' fillpush(y)
131c0     0A 13 02 F6 | 	mov	arg01, arg02
131c4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
131c8                 | ' y:=fillpop()
131c8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
131cc     FD 22 02 F6 | 	mov	local03, result1
131d0                 | ' x:=fillpop()
131d0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
131d4     FD 24 02 F6 | 	mov	local04, result1
131d8                 | ' pinhigh(38)
131d8     59 4C 64 FD | 	drvh	#38
131dc                 | ' repeat while (x>-1)       
131dc                 | LR__1600
131dc     00 24 56 F2 | 	cmps	local04, #0 wc
131e0     34 02 90 CD |  if_b	jmp	#LR__1608
131e4                 | '   pintoggle(39)
131e4     5F 4E 64 FD | 	drvnot	#39
131e8                 | '   x1 := x
131e8     12 27 02 F6 | 	mov	local05, local04
131ec                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
131ec                 | LR__1601
131ec     00 28 06 F6 | 	mov	local06, #0
131f0     00 2A 06 F6 | 	mov	local07, #0
131f4     00 26 56 F2 | 	cmps	local05, #0 wc
131f8     01 2A 66 36 |  if_ae	neg	local07, #1
131fc     00 2A 0E F2 | 	cmp	local07, #0 wz
13200     00 28 26 56 |  if_ne	not	local06, #0
13204     00 2C 06 F6 | 	mov	local08, #0
13208     00 2E 06 F6 | 	mov	local09, #0
1320c     11 15 02 F6 | 	mov	arg02, local03
13210     13 13 02 F6 | 	mov	arg01, local05
13214     E0 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13218     10 FB 09 F2 | 	cmp	result1, local02 wz
1321c     00 2E 26 A6 |  if_e	not	local09, #0
13220     00 2E 0E F2 | 	cmp	local09, #0 wz
13224     00 2C 26 56 |  if_ne	not	local08, #0
13228     16 29 CA F7 | 	test	local06, local08 wz
1322c                 | '     x1--
1322c     01 26 86 51 |  if_ne	sub	local05, #1
13230     B8 FF 9F 5D |  if_ne	jmp	#LR__1601
13234                 | '   x1++
13234     01 26 06 F1 | 	add	local05, #1
13238                 | '   spanabove := 0
13238     00 30 06 F6 | 	mov	local10, #0
1323c                 | '   spanbelow := 0
1323c     00 32 06 F6 | 	mov	local11, #0
13240                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
13240                 | LR__1602
13240     00 28 06 F6 | 	mov	local06, #0
13244     02 00 00 FF 
13248     00 26 56 F2 | 	cmps	local05, ##1024 wc
1324c     00 28 26 C6 |  if_b	not	local06, #0
13250     00 2C 06 F6 | 	mov	local08, #0
13254     00 2E 06 F6 | 	mov	local09, #0
13258     11 15 02 F6 | 	mov	arg02, local03
1325c     13 13 02 F6 | 	mov	arg01, local05
13260     94 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13264     10 FB 09 F2 | 	cmp	result1, local02 wz
13268     00 2E 26 A6 |  if_e	not	local09, #0
1326c     00 2E 0E F2 | 	cmp	local09, #0 wz
13270     00 2C 26 56 |  if_ne	not	local08, #0
13274     16 29 CA F7 | 	test	local06, local08 wz
13278     88 01 90 AD |  if_e	jmp	#LR__1607
1327c                 | '     putpixel2 (x1,y, newcolor & 255)
1327c     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
13280     13 13 02 F6 | 	mov	arg01, local05
13284     11 15 02 F6 | 	mov	arg02, local03
13288     0C FB BF FD | 	call	#_hg010b_spin2_putpixel2
1328c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1328c     00 28 06 F6 | 	mov	local06, #0
13290     00 2A 06 F6 | 	mov	local07, #0
13294     00 30 0E F2 | 	cmp	local10, #0 wz
13298     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1329c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
132a0     00 2A 0E F2 | 	cmp	local07, #0 wz
132a4     00 28 26 56 |  if_ne	not	local06, #0
132a8     00 2C 06 F6 | 	mov	local08, #0
132ac     00 2E 06 F6 | 	mov	local09, #0
132b0     11 15 02 F6 | 	mov	arg02, local03
132b4     01 14 86 F1 | 	sub	arg02, #1
132b8     13 13 02 F6 | 	mov	arg01, local05
132bc     38 FB BF FD | 	call	#_hg010b_spin2_getpixel2
132c0     10 FB 09 F2 | 	cmp	result1, local02 wz
132c4     00 2E 26 A6 |  if_e	not	local09, #0
132c8     00 2E 0E F2 | 	cmp	local09, #0 wz
132cc     00 2C 26 56 |  if_ne	not	local08, #0
132d0     16 29 CA F7 | 	test	local06, local08 wz
132d4     1C 00 90 AD |  if_e	jmp	#LR__1603
132d8                 | '       fillpush(x1)
132d8     13 13 02 F6 | 	mov	arg01, local05
132dc     F8 FD BF FD | 	call	#_hg010b_spin2_fillpush
132e0                 | '       fillpush(y-1)
132e0     11 13 02 F6 | 	mov	arg01, local03
132e4     01 12 86 F1 | 	sub	arg01, #1
132e8     EC FD BF FD | 	call	#_hg010b_spin2_fillpush
132ec                 | '       spanAbove := 1 
132ec     01 30 06 F6 | 	mov	local10, #1
132f0     4C 00 90 FD | 	jmp	#LR__1604
132f4                 | LR__1603
132f4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
132f4     00 28 06 F6 | 	mov	local06, #0
132f8     00 2A 06 F6 | 	mov	local07, #0
132fc     00 30 0E F2 | 	cmp	local10, #0 wz
13300     01 22 56 52 |  if_ne	cmps	local03, #1 wc
13304     01 2A 66 16 |  if_a	neg	local07, #1
13308     00 2A 0E F2 | 	cmp	local07, #0 wz
1330c     00 28 26 56 |  if_ne	not	local06, #0
13310     00 2C 06 F6 | 	mov	local08, #0
13314     00 2E 06 F6 | 	mov	local09, #0
13318     11 15 02 F6 | 	mov	arg02, local03
1331c     01 14 86 F1 | 	sub	arg02, #1
13320     13 13 02 F6 | 	mov	arg01, local05
13324     D0 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13328     10 FB 09 F2 | 	cmp	result1, local02 wz
1332c     00 2E 26 56 |  if_ne	not	local09, #0
13330     00 2E 0E F2 | 	cmp	local09, #0 wz
13334     00 2C 26 56 |  if_ne	not	local08, #0
13338     16 29 CA F7 | 	test	local06, local08 wz
1333c                 | '       spanAbove := 0 
1333c     00 30 06 56 |  if_ne	mov	local10, #0
13340                 | LR__1604
13340                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
13340     00 28 06 F6 | 	mov	local06, #0
13344     00 2A 06 F6 | 	mov	local07, #0
13348     00 32 0E F2 | 	cmp	local11, #0 wz
1334c     01 00 00 AF 
13350     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
13354     01 2A 66 86 |  if_c_and_z	neg	local07, #1
13358     00 2A 0E F2 | 	cmp	local07, #0 wz
1335c     00 28 26 56 |  if_ne	not	local06, #0
13360     00 2C 06 F6 | 	mov	local08, #0
13364     00 2E 06 F6 | 	mov	local09, #0
13368     11 15 02 F6 | 	mov	arg02, local03
1336c     01 14 06 F1 | 	add	arg02, #1
13370     13 13 02 F6 | 	mov	arg01, local05
13374     80 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13378     10 FB 09 F2 | 	cmp	result1, local02 wz
1337c     00 2E 26 A6 |  if_e	not	local09, #0
13380     00 2E 0E F2 | 	cmp	local09, #0 wz
13384     00 2C 26 56 |  if_ne	not	local08, #0
13388     16 29 CA F7 | 	test	local06, local08 wz
1338c     1C 00 90 AD |  if_e	jmp	#LR__1605
13390                 | '       fillpush(x1)
13390     13 13 02 F6 | 	mov	arg01, local05
13394     40 FD BF FD | 	call	#_hg010b_spin2_fillpush
13398                 | '       fillpush(y + 1)
13398     11 13 02 F6 | 	mov	arg01, local03
1339c     01 12 06 F1 | 	add	arg01, #1
133a0     34 FD BF FD | 	call	#_hg010b_spin2_fillpush
133a4                 | '       spanBelow := 1
133a4     01 32 06 F6 | 	mov	local11, #1
133a8     50 00 90 FD | 	jmp	#LR__1606
133ac                 | LR__1605
133ac                 | '     elseif((spanBelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
133ac     00 28 06 F6 | 	mov	local06, #0
133b0     00 2A 06 F6 | 	mov	local07, #0
133b4     00 32 0E F2 | 	cmp	local11, #0 wz
133b8     01 00 00 5F 
133bc     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
133c0     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
133c4     00 2A 0E F2 | 	cmp	local07, #0 wz
133c8     00 28 26 56 |  if_ne	not	local06, #0
133cc     00 2C 06 F6 | 	mov	local08, #0
133d0     00 2E 06 F6 | 	mov	local09, #0
133d4     11 15 02 F6 | 	mov	arg02, local03
133d8     01 14 06 F1 | 	add	arg02, #1
133dc     13 13 02 F6 | 	mov	arg01, local05
133e0     14 FA BF FD | 	call	#_hg010b_spin2_getpixel2
133e4     10 FB 09 F2 | 	cmp	result1, local02 wz
133e8     00 2E 26 56 |  if_ne	not	local09, #0
133ec     00 2E 0E F2 | 	cmp	local09, #0 wz
133f0     00 2C 26 56 |  if_ne	not	local08, #0
133f4     16 29 CA F7 | 	test	local06, local08 wz
133f8                 | '       spanBelow := 0
133f8     00 32 06 56 |  if_ne	mov	local11, #0
133fc                 | LR__1606
133fc                 | '     x1++
133fc     01 26 06 F1 | 	add	local05, #1
13400     3C FE 9F FD | 	jmp	#LR__1602
13404                 | LR__1607
13404                 | '   y:=fillpop()
13404     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
13408     FD 22 02 F6 | 	mov	local03, result1
1340c                 | '   x:=fillpop()
1340c     08 FD BF FD | 	call	#_hg010b_spin2_fillpop
13410     FD 24 02 F6 | 	mov	local04, result1
13414     C4 FD 9F FD | 	jmp	#LR__1600
13418                 | LR__1608
13418                 | ' pinlow(38)    
13418     58 4C 64 FD | 	drvl	#38
1341c                 | LR__1609
1341c     A7 F0 03 F6 | 	mov	ptra, fp
13420     B2 00 A0 FD | 	call	#popregs_
13424                 | _hg010b_spin2_fill_ret
13424     2D 00 64 FD | 	ret
13428                 | 
13428                 | ' 
13428                 | ' '-- A filled circle -----------------------------------------------------
13428                 | ' 
13428                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
13428                 | _hg010b_spin2_fcircle
13428     08 4A 05 F6 | 	mov	COUNT_, #8
1342c     A8 00 A0 FD | 	call	#pushregs_
13430     0B 1F 02 F6 | 	mov	local01, arg03
13434     FF FF 7F FF 
13438     FE 1F 06 FD | 	qmul	local01, ##-2
1343c     09 21 02 F6 | 	mov	local02, arg01
13440     0A 23 02 F6 | 	mov	local03, arg02
13444     0C 25 02 F6 | 	mov	local04, arg04
13448                 | ' 
13448                 | ' d:=5-4*r
13448     0F 19 02 F6 | 	mov	arg04, local01
1344c     02 18 66 F0 | 	shl	arg04, #2
13450     05 26 06 F6 | 	mov	local05, #5
13454     0C 27 82 F1 | 	sub	local05, arg04
13458                 | ' x:=0
13458     00 28 06 F6 | 	mov	local06, #0
1345c                 | ' y:=r
1345c                 | ' da:=(-2*r+5)*4
1345c                 | ' db:=3*4
1345c     0C 2A 06 F6 | 	mov	local07, #12
13460                 | ' repeat while (x<=y) 
13460     18 2C 62 FD | 	getqx	local08
13464     05 2C 06 F1 | 	add	local08, #5
13468     02 2C 66 F0 | 	shl	local08, #2
1346c                 | LR__1610
1346c     0F 29 5A F2 | 	cmps	local06, local01 wcz
13470     B4 00 90 1D |  if_a	jmp	#LR__1612
13474                 | '   fastline(x0-x,x0+x,y0-y,c)
13474     10 13 02 F6 | 	mov	arg01, local02
13478     14 13 82 F1 | 	sub	arg01, local06
1347c     10 15 02 F6 | 	mov	arg02, local02
13480     14 15 02 F1 | 	add	arg02, local06
13484     11 17 02 F6 | 	mov	arg03, local03
13488     0F 17 82 F1 | 	sub	arg03, local01
1348c     12 19 02 F6 | 	mov	arg04, local04
13490     EC F9 BF FD | 	call	#_hg010b_spin2_fastline
13494                 | '   fastline(x0-x,x0+x,y0+y,c)
13494     10 13 02 F6 | 	mov	arg01, local02
13498     14 13 82 F1 | 	sub	arg01, local06
1349c     10 15 02 F6 | 	mov	arg02, local02
134a0     14 15 02 F1 | 	add	arg02, local06
134a4     11 17 02 F6 | 	mov	arg03, local03
134a8     0F 17 02 F1 | 	add	arg03, local01
134ac     12 19 02 F6 | 	mov	arg04, local04
134b0     CC F9 BF FD | 	call	#_hg010b_spin2_fastline
134b4                 | '   fastline(x0-y,x0+y,y0-x,c)
134b4     10 13 02 F6 | 	mov	arg01, local02
134b8     0F 13 82 F1 | 	sub	arg01, local01
134bc     10 15 02 F6 | 	mov	arg02, local02
134c0     0F 15 02 F1 | 	add	arg02, local01
134c4     11 17 02 F6 | 	mov	arg03, local03
134c8     14 17 82 F1 | 	sub	arg03, local06
134cc     12 19 02 F6 | 	mov	arg04, local04
134d0     AC F9 BF FD | 	call	#_hg010b_spin2_fastline
134d4                 | '   fastline(x0-y,x0+y,y0+x,c)
134d4     10 13 02 F6 | 	mov	arg01, local02
134d8     0F 13 82 F1 | 	sub	arg01, local01
134dc     10 15 02 F6 | 	mov	arg02, local02
134e0     0F 15 02 F1 | 	add	arg02, local01
134e4     11 17 02 F6 | 	mov	arg03, local03
134e8     14 17 02 F1 | 	add	arg03, local06
134ec     12 19 02 F6 | 	mov	arg04, local04
134f0     8C F9 BF FD | 	call	#_hg010b_spin2_fastline
134f4                 | '   if d>0 
134f4     01 26 56 F2 | 	cmps	local05, #1 wc
134f8     18 00 90 CD |  if_b	jmp	#LR__1611
134fc                 | '     d+=da
134fc     16 27 02 F1 | 	add	local05, local08
13500                 | '     y-=1
13500     01 1E 86 F1 | 	sub	local01, #1
13504                 | '     x+=1
13504     01 28 06 F1 | 	add	local06, #1
13508                 | '     da+=4*4
13508     10 2C 06 F1 | 	add	local08, #16
1350c                 | '     db+=2*4
1350c     08 2A 06 F1 | 	add	local07, #8
13510     58 FF 9F FD | 	jmp	#LR__1610
13514                 | LR__1611
13514                 | '   else
13514                 | '     d+=db
13514     15 27 02 F1 | 	add	local05, local07
13518                 | '     x+=1
13518     01 28 06 F1 | 	add	local06, #1
1351c                 | '     da+=2*4
1351c     08 2C 06 F1 | 	add	local08, #8
13520                 | '     db+=2*4
13520     08 2A 06 F1 | 	add	local07, #8
13524     44 FF 9F FD | 	jmp	#LR__1610
13528                 | LR__1612
13528     A7 F0 03 F6 | 	mov	ptra, fp
1352c     B2 00 A0 FD | 	call	#popregs_
13530                 | _hg010b_spin2_fcircle_ret
13530     2D 00 64 FD | 	ret
13534                 | 
13534                 | '  
13534                 | ' '-- A circle ------------------------------------------------------------ 
13534                 | '  
13534                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
13534                 | _hg010b_spin2_circle
13534     08 4A 05 F6 | 	mov	COUNT_, #8
13538     A8 00 A0 FD | 	call	#pushregs_
1353c     0B 1F 02 F6 | 	mov	local01, arg03
13540     FF FF 7F FF 
13544     FE 1F 06 FD | 	qmul	local01, ##-2
13548     09 21 02 F6 | 	mov	local02, arg01
1354c     0A 23 02 F6 | 	mov	local03, arg02
13550     0C 25 02 F6 | 	mov	local04, arg04
13554                 | ' 
13554                 | '  
13554                 | ' d:=5-4*r
13554     0F 19 02 F6 | 	mov	arg04, local01
13558     02 18 66 F0 | 	shl	arg04, #2
1355c     05 26 06 F6 | 	mov	local05, #5
13560     0C 27 82 F1 | 	sub	local05, arg04
13564                 | ' x:=0
13564     00 28 06 F6 | 	mov	local06, #0
13568                 | ' y:=r
13568                 | ' da:=(-2*r+5)*4
13568                 | ' db:=3*4
13568     0C 2A 06 F6 | 	mov	local07, #12
1356c                 | ' repeat while (x<=y) 
1356c     18 2C 62 FD | 	getqx	local08
13570     05 2C 06 F1 | 	add	local08, #5
13574     02 2C 66 F0 | 	shl	local08, #2
13578                 | LR__1620
13578     0F 29 5A F2 | 	cmps	local06, local01 wcz
1357c     F4 00 90 1D |  if_a	jmp	#LR__1622
13580                 | '   putpixel(x0-x,y0-y,c)
13580     10 13 02 F6 | 	mov	arg01, local02
13584     14 13 82 F1 | 	sub	arg01, local06
13588     11 15 02 F6 | 	mov	arg02, local03
1358c     0F 15 82 F1 | 	sub	arg02, local01
13590     12 17 02 F6 | 	mov	arg03, local04
13594     50 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13598                 | '   putpixel(x0-x,y0+y,c)
13598     10 13 02 F6 | 	mov	arg01, local02
1359c     14 13 82 F1 | 	sub	arg01, local06
135a0     11 15 02 F6 | 	mov	arg02, local03
135a4     0F 15 02 F1 | 	add	arg02, local01
135a8     12 17 02 F6 | 	mov	arg03, local04
135ac     38 F7 BF FD | 	call	#_hg010b_spin2_putpixel
135b0                 | '   putpixel(x0+x,y0-y,c)
135b0     10 13 02 F6 | 	mov	arg01, local02
135b4     14 13 02 F1 | 	add	arg01, local06
135b8     11 15 02 F6 | 	mov	arg02, local03
135bc     0F 15 82 F1 | 	sub	arg02, local01
135c0     12 17 02 F6 | 	mov	arg03, local04
135c4     20 F7 BF FD | 	call	#_hg010b_spin2_putpixel
135c8                 | '   putpixel(x0+x,y0+y,c)
135c8     10 13 02 F6 | 	mov	arg01, local02
135cc     14 13 02 F1 | 	add	arg01, local06
135d0     11 15 02 F6 | 	mov	arg02, local03
135d4     0F 15 02 F1 | 	add	arg02, local01
135d8     12 17 02 F6 | 	mov	arg03, local04
135dc     08 F7 BF FD | 	call	#_hg010b_spin2_putpixel
135e0                 | '   putpixel(x0-y,y0-x,c)
135e0     10 13 02 F6 | 	mov	arg01, local02
135e4     0F 13 82 F1 | 	sub	arg01, local01
135e8     11 15 02 F6 | 	mov	arg02, local03
135ec     14 15 82 F1 | 	sub	arg02, local06
135f0     12 17 02 F6 | 	mov	arg03, local04
135f4     F0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
135f8                 | '   putpixel(x0-y,y0+x,c)
135f8     10 13 02 F6 | 	mov	arg01, local02
135fc     0F 13 82 F1 | 	sub	arg01, local01
13600     11 15 02 F6 | 	mov	arg02, local03
13604     14 15 02 F1 | 	add	arg02, local06
13608     12 17 02 F6 | 	mov	arg03, local04
1360c     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13610                 | '   putpixel(x0+y,y0-x,c)
13610     10 13 02 F6 | 	mov	arg01, local02
13614     0F 13 02 F1 | 	add	arg01, local01
13618     11 15 02 F6 | 	mov	arg02, local03
1361c     14 15 82 F1 | 	sub	arg02, local06
13620     12 17 02 F6 | 	mov	arg03, local04
13624     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13628                 | '   putpixel(x0+y,y0+x,c)
13628     10 13 02 F6 | 	mov	arg01, local02
1362c     0F 13 02 F1 | 	add	arg01, local01
13630     11 15 02 F6 | 	mov	arg02, local03
13634     14 15 02 F1 | 	add	arg02, local06
13638     12 17 02 F6 | 	mov	arg03, local04
1363c     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13640                 | '   if d>0 
13640     01 26 56 F2 | 	cmps	local05, #1 wc
13644     18 00 90 CD |  if_b	jmp	#LR__1621
13648                 | '     d+=da
13648     16 27 02 F1 | 	add	local05, local08
1364c                 | '     y-=1
1364c     01 1E 86 F1 | 	sub	local01, #1
13650                 | '     x+=1
13650     01 28 06 F1 | 	add	local06, #1
13654                 | '     da+=4*4
13654     10 2C 06 F1 | 	add	local08, #16
13658                 | '     db+=2*4
13658     08 2A 06 F1 | 	add	local07, #8
1365c     18 FF 9F FD | 	jmp	#LR__1620
13660                 | LR__1621
13660                 | '   else
13660                 | '     d+=db
13660     15 27 02 F1 | 	add	local05, local07
13664                 | '     x+=1
13664     01 28 06 F1 | 	add	local06, #1
13668                 | '     da+=2*4
13668     08 2C 06 F1 | 	add	local08, #8
1366c                 | '     db+=2*4
1366c     08 2A 06 F1 | 	add	local07, #8
13670     04 FF 9F FD | 	jmp	#LR__1620
13674                 | LR__1622
13674     A7 F0 03 F6 | 	mov	ptra, fp
13678     B2 00 A0 FD | 	call	#popregs_
1367c                 | _hg010b_spin2_circle_ret
1367c     2D 00 64 FD | 	ret
13680                 | 
13680                 | '     
13680                 | ' '-- A frame (an empty rectangle) ---------------------------------------
13680                 | ' 
13680                 | ' pub frame(x1,y1,x2,y2,c)
13680                 | _hg010b_spin2_frame
13680     05 4A 05 F6 | 	mov	COUNT_, #5
13684     A8 00 A0 FD | 	call	#pushregs_
13688     09 1F 02 F6 | 	mov	local01, arg01
1368c     0A 21 02 F6 | 	mov	local02, arg02
13690     0B 23 02 F6 | 	mov	local03, arg03
13694     0C 25 02 F6 | 	mov	local04, arg04
13698     0D 27 02 F6 | 	mov	local05, arg05
1369c                 | ' 
1369c                 | ' fastline(x1,x2,y1,c)
1369c     0F 13 02 F6 | 	mov	arg01, local01
136a0     11 15 02 F6 | 	mov	arg02, local03
136a4     10 17 02 F6 | 	mov	arg03, local02
136a8     13 19 02 F6 | 	mov	arg04, local05
136ac     D0 F7 BF FD | 	call	#_hg010b_spin2_fastline
136b0                 | ' fastline(x1,x2,y2,c)
136b0     0F 13 02 F6 | 	mov	arg01, local01
136b4     11 15 02 F6 | 	mov	arg02, local03
136b8     12 17 02 F6 | 	mov	arg03, local04
136bc     13 19 02 F6 | 	mov	arg04, local05
136c0     BC F7 BF FD | 	call	#_hg010b_spin2_fastline
136c4                 | ' line(x1,y1,x1,y2,c)
136c4     0F 13 02 F6 | 	mov	arg01, local01
136c8     10 15 02 F6 | 	mov	arg02, local02
136cc     0F 17 02 F6 | 	mov	arg03, local01
136d0     12 19 02 F6 | 	mov	arg04, local04
136d4     13 1B 02 F6 | 	mov	arg05, local05
136d8                 | ' draw(x1,y1,x2,y2,c)
136d8     BC F8 BF FD | 	call	#_hg010b_spin2_draw
136dc                 | ' line(x2,y1,x2,y2,c)
136dc     11 13 02 F6 | 	mov	arg01, local03
136e0     10 15 02 F6 | 	mov	arg02, local02
136e4     11 17 02 F6 | 	mov	arg03, local03
136e8     12 19 02 F6 | 	mov	arg04, local04
136ec     13 1B 02 F6 | 	mov	arg05, local05
136f0                 | ' draw(x1,y1,x2,y2,c)
136f0     A4 F8 BF FD | 	call	#_hg010b_spin2_draw
136f4     A7 F0 03 F6 | 	mov	ptra, fp
136f8     B2 00 A0 FD | 	call	#popregs_
136fc                 | _hg010b_spin2_frame_ret
136fc     2D 00 64 FD | 	ret
13700                 | 
13700                 | ' 
13700                 | ' '-- A box (a filled rectangle) ----------------------------------------
13700                 | ' 
13700                 | ' pub box(x1,y1,x2,y2,c) |yy
13700                 | _hg010b_spin2_box
13700     06 4A 05 F6 | 	mov	COUNT_, #6
13704     A8 00 A0 FD | 	call	#pushregs_
13708     09 1F 02 F6 | 	mov	local01, arg01
1370c     0A 21 02 F6 | 	mov	local02, arg02
13710     0B 23 02 F6 | 	mov	local03, arg03
13714     0C 25 02 F6 | 	mov	local04, arg04
13718     0D 27 02 F6 | 	mov	local05, arg05
1371c                 | ' 
1371c                 | ' repeat yy from y1 to y2
1371c     10 25 52 F2 | 	cmps	local04, local02 wc
13720     01 28 86 F6 | 	negc	local06, #1
13724     14 25 02 F1 | 	add	local04, local06
13728                 | LR__1630
13728                 | '   fastline(x1,x2,yy,c)
13728     0F 13 02 F6 | 	mov	arg01, local01
1372c     11 15 02 F6 | 	mov	arg02, local03
13730     13 19 02 F6 | 	mov	arg04, local05
13734     10 17 02 F6 | 	mov	arg03, local02
13738     44 F7 BF FD | 	call	#_hg010b_spin2_fastline
1373c     14 21 02 F1 | 	add	local02, local06
13740     12 21 0A F2 | 	cmp	local02, local04 wz
13744     E0 FF 9F 5D |  if_ne	jmp	#LR__1630
13748     A7 F0 03 F6 | 	mov	ptra, fp
1374c     B2 00 A0 FD | 	call	#popregs_
13750                 | _hg010b_spin2_box_ret
13750     2D 00 64 FD | 	ret
13754                 | 
13754                 | '       
13754                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
13754                 | _hg010b_spin2_putcharxycgf
13754                 | ' 
13754                 | '  
13754                 | ' repeat yy from 0 to 15
13754     00 00 06 F6 | 	mov	_var01, #0
13758     97 8C 48 FB | 	callpa	#(@LR__1642-@LR__1640)>>2,fcache_load_ptr_
1375c                 | LR__1640
1375c                 | ' 
1375c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1375c     91 E4 05 F1 | 	add	objptr, #145
13760     F2 02 02 FB | 	rdlong	_var02, objptr
13764     0A 02 66 F0 | 	shl	_var02, #10
13768     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1376c     01 05 02 F1 | 	add	_var03, _var02
13770     0B 03 02 F6 | 	mov	_var02, arg03
13774     04 02 66 F0 | 	shl	_var02, #4
13778     01 05 02 F1 | 	add	_var03, _var02
1377c     00 05 02 F1 | 	add	_var03, _var01
13780     02 05 C2 FA | 	rdbyte	_var03, _var03
13784                 | '   asm
13784     00 04 0E F4 | 	testb	_var03, #0 wz
13788     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1378c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
13790     01 04 0E F4 | 	testb	_var03, #1 wz
13794     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
13798     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1379c     02 04 0E F4 | 	testb	_var03, #2 wz
137a0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
137a4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
137a8     03 04 0E F4 | 	testb	_var03, #3 wz
137ac     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
137b0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
137b4     04 04 0E F4 | 	testb	_var03, #4 wz
137b8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
137bc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
137c0     05 04 0E F4 | 	testb	_var03, #5 wz
137c4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
137c8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
137cc     06 04 0E F4 | 	testb	_var03, #6 wz
137d0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
137d4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
137d8     07 04 0E F4 | 	testb	_var03, #7 wz
137dc     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
137e0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
137e4                 | '   
137e4                 | '   ccc[0]:=c1
137e4     99 E5 05 F1 | 	add	objptr, #409
137e8     F2 06 62 FC | 	wrlong	_var04, objptr
137ec                 | '   ccc[1]:=c2 
137ec     04 E4 05 F1 | 	add	objptr, #4
137f0     F2 08 62 FC | 	wrlong	_var05, objptr
137f4                 | '   long[mailbox0][2]:=8
137f4     49 E4 85 F1 | 	sub	objptr, #73
137f8     F2 04 02 FB | 	rdlong	_var03, objptr
137fc     08 04 06 F1 | 	add	_var03, #8
13800     02 11 68 FC | 	wrlong	#8, _var03
13804                 | '   long[mailbox0][1]:=@ccc
13804     45 E4 05 F1 | 	add	objptr, #69
13808     F2 04 02 F6 | 	mov	_var03, objptr
1380c     45 E4 85 F1 | 	sub	objptr, #69
13810     F2 02 02 FB | 	rdlong	_var02, objptr
13814     04 02 06 F1 | 	add	_var02, #4
13818     01 05 62 FC | 	wrlong	_var03, _var02
1381c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1381c     0C E5 85 F1 | 	sub	objptr, #268
13820     F2 04 02 FB | 	rdlong	_var03, objptr
13824     0A 03 02 F6 | 	mov	_var02, arg02
13828     00 03 02 F1 | 	add	_var02, _var01
1382c     0A 02 66 F0 | 	shl	_var02, #10
13830     09 0B 02 F6 | 	mov	_var06, arg01
13834     02 0A 66 F0 | 	shl	_var06, #2
13838     05 03 02 F1 | 	add	_var02, _var06
1383c     01 05 02 F1 | 	add	_var03, _var02
13840     00 00 78 FF 
13844     00 04 06 F1 | 	add	_var03, ##-268435456
13848     0C E5 05 F1 | 	add	objptr, #268
1384c     F2 0A 02 FB | 	rdlong	_var06, objptr
13850     05 05 62 FC | 	wrlong	_var03, _var06
13854                 | '   repeat
13854                 | LR__1641
13854     F2 04 02 FB | 	rdlong	_var03, objptr
13858     02 03 02 FB | 	rdlong	_var02, _var03
1385c     00 02 56 F2 | 	cmps	_var02, #0 wc
13860     F0 FF 9F CD |  if_b	jmp	#LR__1641
13864     E5 E5 85 F1 | 	sub	objptr, #485
13868     01 00 06 F1 | 	add	_var01, #1
1386c     10 00 56 F2 | 	cmps	_var01, #16 wc
13870     E8 FE 9F CD |  if_b	jmp	#LR__1640
13874                 | LR__1642
13874                 | _hg010b_spin2_putcharxycgf_ret
13874     2D 00 64 FD | 	ret
13878                 | 
13878                 | ' 
13878                 | ' 
13878                 | ' '**********************************************************************r***
13878                 | ' '                                                                        *
13878                 | ' ' Font related functions                                                 *
13878                 | ' '                                                                        *
13878                 | ' '*************************************************************************
13878                 | ' 
13878                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
13878                 | ' 
13878                 | ' pub setfontfamily(afontnum)
13878                 | _hg010b_spin2_setfontfamily
13878                 | ' 
13878                 | ' font_family:=afontnum
13878     91 E4 05 F1 | 	add	objptr, #145
1387c     F2 12 62 FC | 	wrlong	arg01, objptr
13880     91 E4 85 F1 | 	sub	objptr, #145
13884                 | ' 'if afontnum==8
13884                 | ' '  font_ptr:=@amiga_font
13884                 | ' 
13884                 | ' if afontnum==4
13884     04 12 0E F2 | 	cmp	arg01, #4 wz
13888                 | '   font_ptr:=@st_font
13888     08 00 00 AF 
1388c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
13890     04 E4 05 A1 |  if_e	add	objptr, #4
13894     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
13898     04 E4 85 A1 |  if_e	sub	objptr, #4
1389c     08 00 00 AF 
138a0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
138a4                 | ' if afontnum==0
138a4     00 12 0E F2 | 	cmp	arg01, #0 wz
138a8                 | '   font_ptr:=@vga_font
138a8     04 E4 05 A1 |  if_e	add	objptr, #4
138ac     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
138b0     04 E4 85 A1 |  if_e	sub	objptr, #4
138b4                 | _hg010b_spin2_setfontfamily_ret
138b4     2D 00 64 FD | 	ret
138b8                 | 
138b8                 | ' 
138b8                 | ' '*************************************************************************
138b8                 | ' '                                                                        *
138b8                 | ' '  Cursor functions                                                      *
138b8                 | ' '                                                                        *
138b8                 | ' '*************************************************************************
138b8                 | ' 
138b8                 | ' 
138b8                 | ' pub setcursorpos(x,y)
138b8                 | _hg010b_spin2_setcursorpos
138b8                 | ' 
138b8                 | ' ''---------- Set the (x,y) position of cursor
138b8                 | ' 
138b8                 | ' cursor_x:=x
138b8     38 E4 05 F1 | 	add	objptr, #56
138bc     F2 12 52 FC | 	wrword	arg01, objptr
138c0                 | ' cursor_y:=y
138c0     02 E4 05 F1 | 	add	objptr, #2
138c4     F2 14 42 FC | 	wrbyte	arg02, objptr
138c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
138c8     02 E4 85 F1 | 	sub	objptr, #2
138cc     F2 14 E2 FA | 	rdword	arg02, objptr
138d0     02 14 66 F0 | 	shl	arg02, #2
138d4     02 E4 05 F1 | 	add	objptr, #2
138d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
138dc     3A E4 85 F1 | 	sub	objptr, #58
138e0     04 16 66 F0 | 	shl	arg03, #4
138e4     11 12 06 F6 | 	mov	arg01, #17
138e8     64 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
138ec                 | _hg010b_spin2_setcursorpos_ret
138ec     2D 00 64 FD | 	ret
138f0                 | 
138f0                 | ' 
138f0                 | ' '*************************************************************************
138f0                 | ' '                                                                        *
138f0                 | ' '  VBlank functions                                                      *
138f0                 | ' '                                                                        *
138f0                 | ' '*************************************************************************
138f0                 | ' 
138f0                 | ' pub waitvbl(amount) | i
138f0                 | _hg010b_spin2_waitvbl
138f0     03 4A 05 F6 | 	mov	COUNT_, #3
138f4     A8 00 A0 FD | 	call	#pushregs_
138f8     09 1F 02 F6 | 	mov	local01, arg01
138fc                 | ' 
138fc                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
138fc                 | ' 
138fc                 | ' repeat i from 1 to amount
138fc     01 20 06 F6 | 	mov	local02, #1
13900     01 1E 56 F2 | 	cmps	local01, #1 wc
13904     01 22 86 F6 | 	negc	local03, #1
13908     11 1F 02 F1 | 	add	local01, local03
1390c                 | LR__1650
1390c                 | '   repeat until vblank==0
1390c                 | LR__1651
1390c     45 E4 05 F1 | 	add	objptr, #69
13910     F2 12 0A FB | 	rdlong	arg01, objptr wz
13914     45 E4 85 F1 | 	sub	objptr, #69
13918     0C 00 90 AD |  if_e	jmp	#LR__1652
1391c                 | '     waitus(100)
1391c     64 12 06 F6 | 	mov	arg01, #100
13920     7C 16 B0 FD | 	call	#__system___waitus
13924     E4 FF 9F FD | 	jmp	#LR__1651
13928                 | LR__1652
13928                 | '   repeat until vblank==1
13928                 | LR__1653
13928     45 E4 05 F1 | 	add	objptr, #69
1392c     F2 12 02 FB | 	rdlong	arg01, objptr
13930     45 E4 85 F1 | 	sub	objptr, #69
13934     01 12 0E F2 | 	cmp	arg01, #1 wz
13938     0C 00 90 AD |  if_e	jmp	#LR__1654
1393c                 | '     waitus(100)
1393c     64 12 06 F6 | 	mov	arg01, #100
13940     5C 16 B0 FD | 	call	#__system___waitus
13944     E0 FF 9F FD | 	jmp	#LR__1653
13948                 | LR__1654
13948     11 21 02 F1 | 	add	local02, local03
1394c     0F 21 0A F2 | 	cmp	local02, local01 wz
13950     B8 FF 9F 5D |  if_ne	jmp	#LR__1650
13954     A7 F0 03 F6 | 	mov	ptra, fp
13958     B2 00 A0 FD | 	call	#popregs_
1395c                 | _hg010b_spin2_waitvbl_ret
1395c     2D 00 64 FD | 	ret
13960                 | 
13960                 | ' 
13960                 | ' 
13960                 | ' pub cls(fc,bc)   :c,i
13960                 | _hg010b_spin2_cls
13960     02 4A 05 F6 | 	mov	COUNT_, #2
13964     A8 00 A0 FD | 	call	#pushregs_
13968     09 1F 02 F6 | 	mov	local01, arg01
1396c     0A 21 02 F6 | 	mov	local02, arg02
13970                 | ' 
13970                 | ' c:=bc
13970                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
13970     D9 E4 05 F1 | 	add	objptr, #217
13974     F2 12 02 FB | 	rdlong	arg01, objptr
13978     A5 E4 85 F1 | 	sub	objptr, #165
1397c     F2 16 02 FB | 	rdlong	arg03, objptr
13980     02 16 66 F0 | 	shl	arg03, #2
13984     10 15 02 F6 | 	mov	arg02, local02
13988     00 18 06 F6 | 	mov	arg04, #0
1398c     01 1A 06 F6 | 	mov	arg05, #1
13990     0B 00 00 FF 
13994     8C E4 05 F1 | 	add	objptr, ##5772
13998     F0 08 B0 FD | 	call	#_psram_spin2_fill
1399c                 | ' setwritecolors(fc,bc)
1399c                 | ' 
1399c                 | ' write_color:=ff
1399c     0B 00 00 FF 
139a0     83 E4 85 F1 | 	sub	objptr, ##5763
139a4     F2 1E 62 FC | 	wrlong	local01, objptr
139a8                 | ' write_background:=bb
139a8     04 E4 05 F1 | 	add	objptr, #4
139ac     F2 20 62 FC | 	wrlong	local02, objptr
139b0                 | ' cursor_x:=0
139b0     09 E4 85 F1 | 	sub	objptr, #9
139b4     F2 00 58 FC | 	wrword	#0, objptr
139b8                 | ' cursor_y:=0
139b8     02 E4 05 F1 | 	add	objptr, #2
139bc     F2 00 48 FC | 	wrbyte	#0, objptr
139c0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
139c0     02 E4 85 F1 | 	sub	objptr, #2
139c4     F2 14 E2 FA | 	rdword	arg02, objptr
139c8     02 14 66 F0 | 	shl	arg02, #2
139cc     02 E4 05 F1 | 	add	objptr, #2
139d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
139d4     3A E4 85 F1 | 	sub	objptr, #58
139d8     04 16 66 F0 | 	shl	arg03, #4
139dc     11 12 06 F6 | 	mov	arg01, #17
139e0     6C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
139e4                 | ' setcursorcolor(fc)
139e4     0F 13 02 F6 | 	mov	arg01, local01
139e8     20 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
139ec     10 FB 01 F6 | 	mov	result1, local02
139f0     00 FC 05 F6 | 	mov	result2, #0
139f4     A7 F0 03 F6 | 	mov	ptra, fp
139f8     B2 00 A0 FD | 	call	#popregs_
139fc                 | _hg010b_spin2_cls_ret
139fc     2D 00 64 FD | 	ret
13a00                 | 
13a00                 | ' 
13a00                 | ' ''---------- Output a char at the cursor position, move the cursor 
13a00                 | ' 
13a00                 | ' pub putchar(achar) | c,x,y,l,newcpl
13a00                 | _hg010b_spin2_putchar
13a00     01 4A 05 F6 | 	mov	COUNT_, #1
13a04     A8 00 A0 FD | 	call	#pushregs_
13a08     09 1F 02 F6 | 	mov	local01, arg01
13a0c                 | ' 
13a0c                 | ' if achar==10
13a0c     0A 1E 0E F2 | 	cmp	local01, #10 wz
13a10                 | '   crlf()
13a10     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
13a14                 | ' if achar==9
13a14     09 1E 0E F2 | 	cmp	local01, #9 wz
13a18     18 00 90 5D |  if_ne	jmp	#LR__1660
13a1c                 | '   cursor_x:=(cursor_x& %11110000)+16
13a1c     38 E4 05 F1 | 	add	objptr, #56
13a20     F2 16 E2 FA | 	rdword	arg03, objptr
13a24     F0 16 06 F5 | 	and	arg03, #240
13a28     10 16 06 F1 | 	add	arg03, #16
13a2c     F2 16 52 FC | 	wrword	arg03, objptr
13a30     38 E4 85 F1 | 	sub	objptr, #56
13a34                 | LR__1660
13a34                 | '   
13a34                 | ' if (achar<>9) && (achar<>10) 
13a34     09 1E 0E F2 | 	cmp	local01, #9 wz
13a38     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
13a3c     44 00 90 AD |  if_e	jmp	#LR__1661
13a40                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
13a40     38 E4 05 F1 | 	add	objptr, #56
13a44     F2 12 E2 FA | 	rdword	arg01, objptr
13a48     02 E4 05 F1 | 	add	objptr, #2
13a4c     F2 14 C2 FA | 	rdbyte	arg02, objptr
13a50     04 14 66 F0 | 	shl	arg02, #4
13a54     03 E4 05 F1 | 	add	objptr, #3
13a58     F2 18 02 FB | 	rdlong	arg04, objptr
13a5c     04 E4 05 F1 | 	add	objptr, #4
13a60     F2 1A 02 FB | 	rdlong	arg05, objptr
13a64     41 E4 85 F1 | 	sub	objptr, #65
13a68     0F 17 02 F6 | 	mov	arg03, local01
13a6c     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
13a70                 | '   cursor_x+=2
13a70     38 E4 05 F1 | 	add	objptr, #56
13a74     F2 1E E2 FA | 	rdword	local01, objptr
13a78     02 1E 06 F1 | 	add	local01, #2
13a7c     F2 1E 52 FC | 	wrword	local01, objptr
13a80     38 E4 85 F1 | 	sub	objptr, #56
13a84                 | LR__1661
13a84                 | ' 
13a84                 | ' if cursor_x>=256
13a84     38 E4 05 F1 | 	add	objptr, #56
13a88     F2 1E E2 FA | 	rdword	local01, objptr
13a8c     38 E4 85 F1 | 	sub	objptr, #56
13a90     00 1F 56 F2 | 	cmps	local01, #256 wc
13a94     64 00 90 CD |  if_b	jmp	#LR__1663
13a98                 | '   cursor_x:=0
13a98     38 E4 05 F1 | 	add	objptr, #56
13a9c     F2 00 58 FC | 	wrword	#0, objptr
13aa0                 | '   cursor_y+=1
13aa0     02 E4 05 F1 | 	add	objptr, #2
13aa4     F2 1E C2 FA | 	rdbyte	local01, objptr
13aa8     01 1E 06 F1 | 	add	local01, #1
13aac     F2 1E 42 FC | 	wrbyte	local01, objptr
13ab0                 | '   if cursor_y>st_lines-1
13ab0     C3 E4 05 F1 | 	add	objptr, #195
13ab4     F2 1E 02 FB | 	rdlong	local01, objptr
13ab8     01 1E 86 F1 | 	sub	local01, #1
13abc     C3 E4 85 F1 | 	sub	objptr, #195
13ac0     F2 16 C2 FA | 	rdbyte	arg03, objptr
13ac4     3A E4 85 F1 | 	sub	objptr, #58
13ac8     0F 17 5A F2 | 	cmps	arg03, local01 wcz
13acc     2C 00 90 ED |  if_be	jmp	#LR__1662
13ad0                 | '     scrollup()
13ad0     00 12 06 F6 | 	mov	arg01, #0
13ad4     01 00 00 FF 
13ad8     40 14 06 F6 | 	mov	arg02, ##576
13adc     10 16 06 F6 | 	mov	arg03, #16
13ae0     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
13ae4                 | '     cursor_y:=st_lines-1
13ae4     FD E4 05 F1 | 	add	objptr, #253
13ae8     F2 1E 02 FB | 	rdlong	local01, objptr
13aec     01 1E 86 F1 | 	sub	local01, #1
13af0     C3 E4 85 F1 | 	sub	objptr, #195
13af4     F2 1E 42 FC | 	wrbyte	local01, objptr
13af8     3A E4 85 F1 | 	sub	objptr, #58
13afc                 | LR__1662
13afc                 | LR__1663
13afc                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
13afc     38 E4 05 F1 | 	add	objptr, #56
13b00     F2 14 E2 FA | 	rdword	arg02, objptr
13b04     02 14 66 F0 | 	shl	arg02, #2
13b08     02 E4 05 F1 | 	add	objptr, #2
13b0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
13b10     3A E4 85 F1 | 	sub	objptr, #58
13b14     04 16 66 F0 | 	shl	arg03, #4
13b18     11 12 06 F6 | 	mov	arg01, #17
13b1c     30 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
13b20     A7 F0 03 F6 | 	mov	ptra, fp
13b24     B2 00 A0 FD | 	call	#popregs_
13b28                 | _hg010b_spin2_putchar_ret
13b28     2D 00 64 FD | 	ret
13b2c                 | 
13b2c                 | '     
13b2c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
13b2c                 | ' 
13b2c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
13b2c                 | _hg010b_spin2_putchar2
13b2c     01 4A 05 F6 | 	mov	COUNT_, #1
13b30     A8 00 A0 FD | 	call	#pushregs_
13b34                 | ' 
13b34                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
13b34     38 E4 05 F1 | 	add	objptr, #56
13b38     F2 1E E2 FA | 	rdword	local01, objptr
13b3c     02 E4 05 F1 | 	add	objptr, #2
13b40     F2 14 C2 FA | 	rdbyte	arg02, objptr
13b44     04 14 66 F0 | 	shl	arg02, #4
13b48     09 17 02 F6 | 	mov	arg03, arg01
13b4c     03 E4 05 F1 | 	add	objptr, #3
13b50     F2 18 02 FB | 	rdlong	arg04, objptr
13b54     04 E4 05 F1 | 	add	objptr, #4
13b58     F2 1A 02 FB | 	rdlong	arg05, objptr
13b5c     41 E4 85 F1 | 	sub	objptr, #65
13b60     0F 13 02 F6 | 	mov	arg01, local01
13b64     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
13b68                 | ' cursor_x+=2
13b68     38 E4 05 F1 | 	add	objptr, #56
13b6c     F2 1E E2 FA | 	rdword	local01, objptr
13b70     02 1E 06 F1 | 	add	local01, #2
13b74     F2 1E 52 FC | 	wrword	local01, objptr
13b78                 | ' if cursor_x>=256
13b78     F2 1E E2 FA | 	rdword	local01, objptr
13b7c     38 E4 85 F1 | 	sub	objptr, #56
13b80     00 1F 56 F2 | 	cmps	local01, #256 wc
13b84     64 00 90 CD |  if_b	jmp	#LR__1671
13b88                 | '   cursor_x:=0
13b88     38 E4 05 F1 | 	add	objptr, #56
13b8c     F2 00 58 FC | 	wrword	#0, objptr
13b90                 | '   cursor_y+=1
13b90     02 E4 05 F1 | 	add	objptr, #2
13b94     F2 1E C2 FA | 	rdbyte	local01, objptr
13b98     01 1E 06 F1 | 	add	local01, #1
13b9c     F2 1E 42 FC | 	wrbyte	local01, objptr
13ba0                 | '   if cursor_y>st_lines-1
13ba0     C3 E4 05 F1 | 	add	objptr, #195
13ba4     F2 1E 02 FB | 	rdlong	local01, objptr
13ba8     01 1E 86 F1 | 	sub	local01, #1
13bac     C3 E4 85 F1 | 	sub	objptr, #195
13bb0     F2 1A C2 FA | 	rdbyte	arg05, objptr
13bb4     3A E4 85 F1 | 	sub	objptr, #58
13bb8     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
13bbc     2C 00 90 ED |  if_be	jmp	#LR__1670
13bc0                 | '     scrollup()
13bc0     00 12 06 F6 | 	mov	arg01, #0
13bc4     01 00 00 FF 
13bc8     40 14 06 F6 | 	mov	arg02, ##576
13bcc     10 16 06 F6 | 	mov	arg03, #16
13bd0     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
13bd4                 | '     cursor_y:=st_lines-1
13bd4     FD E4 05 F1 | 	add	objptr, #253
13bd8     F2 1E 02 FB | 	rdlong	local01, objptr
13bdc     01 1E 86 F1 | 	sub	local01, #1
13be0     C3 E4 85 F1 | 	sub	objptr, #195
13be4     F2 1E 42 FC | 	wrbyte	local01, objptr
13be8     3A E4 85 F1 | 	sub	objptr, #58
13bec                 | LR__1670
13bec                 | LR__1671
13bec                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
13bec     38 E4 05 F1 | 	add	objptr, #56
13bf0     F2 14 E2 FA | 	rdword	arg02, objptr
13bf4     02 14 66 F0 | 	shl	arg02, #2
13bf8     02 E4 05 F1 | 	add	objptr, #2
13bfc     F2 16 C2 FA | 	rdbyte	arg03, objptr
13c00     3A E4 85 F1 | 	sub	objptr, #58
13c04     04 16 66 F0 | 	shl	arg03, #4
13c08     11 12 06 F6 | 	mov	arg01, #17
13c0c     40 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
13c10     A7 F0 03 F6 | 	mov	ptra, fp
13c14     B2 00 A0 FD | 	call	#popregs_
13c18                 | _hg010b_spin2_putchar2_ret
13c18     2D 00 64 FD | 	ret
13c1c                 | 
13c1c                 | ' ''--------- Output a string at the cursor position, move the cursor  
13c1c                 | ' 
13c1c                 | ' pub write(text) | iii,c,ncx,ncy
13c1c                 | _hg010b_spin2_write
13c1c     04 4A 05 F6 | 	mov	COUNT_, #4
13c20     A8 00 A0 FD | 	call	#pushregs_
13c24     09 1F 02 F6 | 	mov	local01, arg01
13c28                 | ' 
13c28                 | ' repeat iii from 0 to strsize(text)-1
13c28     00 20 06 F6 | 	mov	local02, #0
13c2c     0F 13 02 F6 | 	mov	arg01, local01
13c30     09 23 02 F6 | 	mov	local03, arg01
13c34     97 06 48 FB | 	callpa	#(@LR__1681-@LR__1680)>>2,fcache_load_ptr_
13c38                 | LR__1680
13c38     11 FB C9 FA | 	rdbyte	result1, local03 wz
13c3c     01 22 06 51 |  if_ne	add	local03, #1
13c40     F4 FF 9F 5D |  if_ne	jmp	#LR__1680
13c44                 | LR__1681
13c44     09 23 82 F1 | 	sub	local03, arg01
13c48     01 22 86 F1 | 	sub	local03, #1
13c4c     00 22 56 F2 | 	cmps	local03, #0 wc
13c50     01 24 86 F6 | 	negc	local04, #1
13c54     12 23 02 F1 | 	add	local03, local04
13c58                 | LR__1682
13c58                 | '   putchar2(byte[text+iii])
13c58     0F 13 02 F6 | 	mov	arg01, local01
13c5c     10 13 02 F1 | 	add	arg01, local02
13c60     09 13 C2 FA | 	rdbyte	arg01, arg01
13c64     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
13c68     12 21 02 F1 | 	add	local02, local04
13c6c     11 21 0A F2 | 	cmp	local02, local03 wz
13c70     E4 FF 9F 5D |  if_ne	jmp	#LR__1682
13c74     A7 F0 03 F6 | 	mov	ptra, fp
13c78     B2 00 A0 FD | 	call	#popregs_
13c7c                 | _hg010b_spin2_write_ret
13c7c     2D 00 64 FD | 	ret
13c80                 | 
13c80                 | ' 
13c80                 | ' ''-----------  Scroll the screen one line up
13c80                 | ' 
13c80                 | ' pub scrollup(start=0, end=576 , amount=16) | i
13c80                 | _hg010b_spin2_scrollup
13c80     01 4A 05 F6 | 	mov	COUNT_, #1
13c84     A8 00 A0 FD | 	call	#pushregs_
13c88                 | ' 	
13c88                 | ' repeat i from 0 to 559 
13c88     00 1E 06 F6 | 	mov	local01, #0
13c8c                 | LR__1690
13c8c     F5 E4 05 F1 | 	add	objptr, #245
13c90     F2 18 02 FB | 	rdlong	arg04, objptr
13c94     1C E4 85 F1 | 	sub	objptr, #28
13c98     F2 14 02 FB | 	rdlong	arg02, objptr
13c9c     0F 13 02 F6 | 	mov	arg01, local01
13ca0     10 12 06 F1 | 	add	arg01, #16
13ca4     02 12 66 F0 | 	shl	arg01, #2
13ca8     14 E4 05 F1 | 	add	objptr, #20
13cac     F2 16 02 FB | 	rdlong	arg03, objptr
13cb0     0B 13 02 FD | 	qmul	arg01, arg03
13cb4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
13cb4     F6 03 00 FF 
13cb8     00 12 06 F6 | 	mov	arg01, ##519168
13cbc     0C 13 82 F1 | 	sub	arg01, arg04
13cc0     02 16 66 F0 | 	shl	arg03, #2
13cc4     0A 00 00 FF 
13cc8     D3 E5 05 F1 | 	add	objptr, ##5587
13ccc     18 18 62 FD | 	getqx	arg04
13cd0     0C 15 02 F1 | 	add	arg02, arg04
13cd4     7C 04 B0 FD | 	call	#_psram_spin2_read1
13cd8     0A 00 00 FF 
13cdc     CB E5 85 F1 | 	sub	objptr, ##5579
13ce0     F2 18 02 FB | 	rdlong	arg04, objptr
13ce4     1C E4 85 F1 | 	sub	objptr, #28
13ce8     F2 14 02 FB | 	rdlong	arg02, objptr
13cec     0F 13 02 F6 | 	mov	arg01, local01
13cf0     02 12 66 F0 | 	shl	arg01, #2
13cf4     14 E4 05 F1 | 	add	objptr, #20
13cf8     F2 16 02 FB | 	rdlong	arg03, objptr
13cfc     0B 13 02 FD | 	qmul	arg01, arg03
13d00                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
13d00     F6 03 00 FF 
13d04     00 12 06 F6 | 	mov	arg01, ##519168
13d08     0C 13 82 F1 | 	sub	arg01, arg04
13d0c     02 16 66 F0 | 	shl	arg03, #2
13d10     0A 00 00 FF 
13d14     D3 E5 05 F1 | 	add	objptr, ##5587
13d18     18 18 62 FD | 	getqx	arg04
13d1c     0C 15 02 F1 | 	add	arg02, arg04
13d20     CC 04 B0 FD | 	call	#_psram_spin2_write
13d24     0B 00 00 FF 
13d28     C0 E4 85 F1 | 	sub	objptr, ##5824
13d2c     01 1E 06 F1 | 	add	local01, #1
13d30     01 00 00 FF 
13d34     30 1E 56 F2 | 	cmps	local01, ##560 wc
13d38     50 FF 9F CD |  if_b	jmp	#LR__1690
13d3c                 | ' 
13d3c                 | ' repeat i from 560 to 575
13d3c     01 00 00 FF 
13d40     30 1E 06 F6 | 	mov	local01, ##560
13d44                 | LR__1691
13d44                 | '    fastline(0,1023,i,write_background)   
13d44     41 E4 05 F1 | 	add	objptr, #65
13d48     F2 18 02 FB | 	rdlong	arg04, objptr
13d4c     41 E4 85 F1 | 	sub	objptr, #65
13d50     00 12 06 F6 | 	mov	arg01, #0
13d54     09 14 CE F9 | 	bmask	arg02, #9
13d58     0F 17 02 F6 | 	mov	arg03, local01
13d5c     20 F1 BF FD | 	call	#_hg010b_spin2_fastline
13d60     01 1E 06 F1 | 	add	local01, #1
13d64     01 00 00 FF 
13d68     40 1E 16 F2 | 	cmp	local01, ##576 wc
13d6c     D4 FF 9F CD |  if_b	jmp	#LR__1691
13d70     A7 F0 03 F6 | 	mov	ptra, fp
13d74     B2 00 A0 FD | 	call	#popregs_
13d78                 | _hg010b_spin2_scrollup_ret
13d78     2D 00 64 FD | 	ret
13d7c                 | 
13d7c                 | ' 
13d7c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
13d7c                 | ' 
13d7c                 | ' pub crlf()
13d7c                 | _hg010b_spin2_crlf
13d7c                 | ' 
13d7c                 | ' cursor_x:=leading_spaces*2
13d7c     01 00 00 FF 
13d80     B2 E4 05 F1 | 	add	objptr, ##690
13d84     F2 16 02 FB | 	rdlong	arg03, objptr
13d88     01 16 66 F0 | 	shl	arg03, #1
13d8c     01 00 00 FF 
13d90     7A E4 85 F1 | 	sub	objptr, ##634
13d94     F2 16 52 FC | 	wrword	arg03, objptr
13d98                 | ' cursor_y+=1
13d98     02 E4 05 F1 | 	add	objptr, #2
13d9c     F2 16 C2 FA | 	rdbyte	arg03, objptr
13da0     01 16 06 F1 | 	add	arg03, #1
13da4     F2 16 42 FC | 	wrbyte	arg03, objptr
13da8                 | ' if cursor_y>st_lines-1
13da8     C3 E4 05 F1 | 	add	objptr, #195
13dac     F2 16 02 FB | 	rdlong	arg03, objptr
13db0     01 16 86 F1 | 	sub	arg03, #1
13db4     C3 E4 85 F1 | 	sub	objptr, #195
13db8     F2 14 C2 FA | 	rdbyte	arg02, objptr
13dbc     3A E4 85 F1 | 	sub	objptr, #58
13dc0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
13dc4     2C 00 90 ED |  if_be	jmp	#LR__1700
13dc8                 | '   scrollup()
13dc8     00 12 06 F6 | 	mov	arg01, #0
13dcc     01 00 00 FF 
13dd0     40 14 06 F6 | 	mov	arg02, ##576
13dd4     10 16 06 F6 | 	mov	arg03, #16
13dd8     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
13ddc                 | '   cursor_y:=st_lines-1
13ddc     FD E4 05 F1 | 	add	objptr, #253
13de0     F2 16 02 FB | 	rdlong	arg03, objptr
13de4     01 16 86 F1 | 	sub	arg03, #1
13de8     C3 E4 85 F1 | 	sub	objptr, #195
13dec     F2 16 42 FC | 	wrbyte	arg03, objptr
13df0     3A E4 85 F1 | 	sub	objptr, #58
13df4                 | LR__1700
13df4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
13df4     38 E4 05 F1 | 	add	objptr, #56
13df8     F2 14 E2 FA | 	rdword	arg02, objptr
13dfc     02 14 66 F0 | 	shl	arg02, #2
13e00     02 E4 05 F1 | 	add	objptr, #2
13e04     F2 16 C2 FA | 	rdbyte	arg03, objptr
13e08     3A E4 85 F1 | 	sub	objptr, #58
13e0c     04 16 66 F0 | 	shl	arg03, #4
13e10     11 12 06 F6 | 	mov	arg01, #17
13e14     38 EE BF FD | 	call	#_hg010b_spin2_setspritepos
13e18                 | _hg010b_spin2_crlf_ret
13e18     2D 00 64 FD | 	ret
13e1c                 | 
13e1c                 | ' 
13e1c                 | ' 
13e1c                 | ' '*************************************************************************
13e1c                 | ' '                                                                        *
13e1c                 | ' '  Conversions                                                           *
13e1c                 | ' '                                                                        *
13e1c                 | ' '*************************************************************************
13e1c                 | ' 
13e1c                 | ' ''---------- Convert a integer to dec string, return a pointer
13e1c                 | ' 
13e1c                 | ' pub inttostr(i):result |q,pos,k,j
13e1c                 | _hg010b_spin2_inttostr
13e1c     03 4A 05 F6 | 	mov	COUNT_, #3
13e20     A8 00 A0 FD | 	call	#pushregs_
13e24     09 1F 0A F6 | 	mov	local01, arg01 wz
13e28                 | ' 
13e28                 | ' j:=i
13e28                 | ' pos:=10
13e28     0A 20 06 F6 | 	mov	local02, #10
13e2c                 | ' k:=0
13e2c     00 22 06 F6 | 	mov	local03, #0
13e30                 | ' 
13e30                 | ' if (j==0)
13e30     18 00 90 5D |  if_ne	jmp	#LR__1710
13e34                 | '   n_string[0]:=48
13e34     49 E4 05 F1 | 	add	objptr, #73
13e38     F2 60 48 FC | 	wrbyte	#48, objptr
13e3c                 | '   n_string[1]:=0
13e3c     01 E4 05 F1 | 	add	objptr, #1
13e40     F2 00 48 FC | 	wrbyte	#0, objptr
13e44     4A E4 85 F1 | 	sub	objptr, #74
13e48     C4 00 90 FD | 	jmp	#LR__1717
13e4c                 | LR__1710
13e4c                 | ' 
13e4c                 | ' else
13e4c                 | '   if (j<0)
13e4c     0F 1F 52 F6 | 	abs	local01, local01 wc
13e50                 | '     j:=0-j
13e50                 | '     k:=45
13e50     2D 22 06 C6 |  if_b	mov	local03, #45
13e54                 | ' 
13e54                 | '   n_string[11]:=0
13e54     54 E4 05 F1 | 	add	objptr, #84
13e58     F2 00 48 FC | 	wrbyte	#0, objptr
13e5c     54 E4 85 F1 | 	sub	objptr, #84
13e60     97 24 48 FB | 	callpa	#(@LR__1712-@LR__1711)>>2,fcache_load_ptr_
13e64                 | '   repeat while (pos>-1)
13e64                 | LR__1711
13e64     00 20 56 F2 | 	cmps	local02, #0 wc
13e68     40 00 90 CD |  if_b	jmp	#LR__1713
13e6c     0F FB 51 F6 | 	abs	result1, local01 wc
13e70     0A FA 15 FD | 	qdiv	result1, #10
13e74                 | '     q:=j//10
13e74     19 FA 61 FD | 	getqy	result1
13e78     FD FA 81 F6 | 	negc	result1, result1
13e7c     0F 1F 52 F6 | 	abs	local01, local01 wc
13e80     0A 1E 16 FD | 	qdiv	local01, #10
13e84                 | '     q:=48+q
13e84     30 FA 05 F1 | 	add	result1, #48
13e88                 | '     n_string[pos]:=q
13e88     10 1F 02 F6 | 	mov	local01, local02
13e8c     49 E4 05 F1 | 	add	objptr, #73
13e90     F2 1E 02 F1 | 	add	local01, objptr
13e94     0F FB 41 FC | 	wrbyte	result1, local01
13e98                 | '     j:=j/10
13e98     49 E4 85 F1 | 	sub	objptr, #73
13e9c                 | '     pos-=1
13e9c     01 20 86 F1 | 	sub	local02, #1
13ea0     18 1E 62 FD | 	getqx	local01
13ea4     0F 1F 82 F6 | 	negc	local01, local01
13ea8     B8 FF 9F FD | 	jmp	#LR__1711
13eac                 | LR__1712
13eac                 | LR__1713
13eac                 | '   repeat while n_string[0]==48
13eac                 | LR__1714
13eac     49 E4 05 F1 | 	add	objptr, #73
13eb0     F2 16 C2 FA | 	rdbyte	arg03, objptr
13eb4     49 E4 85 F1 | 	sub	objptr, #73
13eb8     30 16 0E F2 | 	cmp	arg03, #48 wz
13ebc     20 00 90 5D |  if_ne	jmp	#LR__1715
13ec0                 | '     bytemove(@n_string,@n_string+1,12)
13ec0     49 E4 05 F1 | 	add	objptr, #73
13ec4     F2 12 02 F6 | 	mov	arg01, objptr
13ec8     F2 14 02 F6 | 	mov	arg02, objptr
13ecc     49 E4 85 F1 | 	sub	objptr, #73
13ed0     01 14 06 F1 | 	add	arg02, #1
13ed4     0C 16 06 F6 | 	mov	arg03, #12
13ed8     84 0C B0 FD | 	call	#__system____builtin_memmove
13edc     CC FF 9F FD | 	jmp	#LR__1714
13ee0                 | LR__1715
13ee0                 | ' 
13ee0                 | '   if k==45
13ee0     2D 22 0E F2 | 	cmp	local03, #45 wz
13ee4     28 00 90 5D |  if_ne	jmp	#LR__1716
13ee8                 | '      bytemove(@n_string+1,@n_string,12)
13ee8     49 E4 05 F1 | 	add	objptr, #73
13eec     F2 12 02 F6 | 	mov	arg01, objptr
13ef0     01 12 06 F1 | 	add	arg01, #1
13ef4     F2 14 02 F6 | 	mov	arg02, objptr
13ef8     49 E4 85 F1 | 	sub	objptr, #73
13efc     0C 16 06 F6 | 	mov	arg03, #12
13f00     5C 0C B0 FD | 	call	#__system____builtin_memmove
13f04                 | '      n_string[0]:=k
13f04     49 E4 05 F1 | 	add	objptr, #73
13f08     F2 22 42 FC | 	wrbyte	local03, objptr
13f0c     49 E4 85 F1 | 	sub	objptr, #73
13f10                 | LR__1716
13f10                 | LR__1717
13f10                 | ' 
13f10                 | ' q:=@n_string
13f10     49 E4 05 F1 | 	add	objptr, #73
13f14     F2 FA 01 F6 | 	mov	result1, objptr
13f18     49 E4 85 F1 | 	sub	objptr, #73
13f1c                 | ' return q
13f1c     A7 F0 03 F6 | 	mov	ptra, fp
13f20     B2 00 A0 FD | 	call	#popregs_
13f24                 | _hg010b_spin2_inttostr_ret
13f24     2D 00 64 FD | 	ret
13f28                 | 
13f28                 | ' 
13f28                 | ' '..............................................................................
13f28                 | ' 
13f28                 | ' {{
13f28                 | ' }}
13f28                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
13f28                 | _psram_spin2_startx
13f28     04 4A 05 F6 | 	mov	COUNT_, #4
13f2c     A8 00 A0 FD | 	call	#pushregs_
13f30     09 1F 02 F6 | 	mov	local01, arg01
13f34     0B 21 02 F6 | 	mov	local02, arg03
13f38     0C 23 02 F6 | 	mov	local03, arg04
13f3c                 | '     stop() ' restart driver if required
13f3c     54 01 B0 FD | 	call	#_psram_spin2_stop
13f40     00 1E 0E F2 | 	cmp	local01, #0 wz
13f44     14 1E 06 AB |  if_e	rdlong	local01, #20
13f48     0F 15 52 F6 | 	abs	arg02, local01 wc
13f4c     A1 07 00 FF 
13f50     40 14 16 FD | 	qdiv	arg02, ##1000000
13f54                 | ' 
13f54                 | '     ' use current frequency if none specified
13f54                 | ' 
13f54                 | '     if freq == 0 
13f54                 | '         freq := clkfreq 
13f54                 | ' 
13f54                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
13f54                 | ' 
13f54                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
13f54                 | '     if burst < 0
13f54                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
13f54     18 14 62 FD | 	getqx	arg02
13f58     0A 19 82 F6 | 	negc	arg04, arg02
13f5c     03 18 66 F0 | 	shl	arg04, #3
13f60     84 18 86 F1 | 	sub	arg04, #132
13f64     04 18 46 F0 | 	shr	arg04, #4
13f68     04 18 66 F0 | 	shl	arg04, #4
13f6c     00 18 56 F2 | 	cmps	arg04, #0 wc
13f70     0E FA 65 C6 |  if_b	neg	result1, #14
13f74     10 01 90 CD |  if_b	jmp	#LR__1723
13f78                 | ' 
13f78                 | '     ' compute the input delay
13f78                 | ' 
13f78                 | '     if delay <= 0
13f78     01 20 56 F2 | 	cmps	local02, #1 wc
13f7c     10 00 90 3D |  if_ae	jmp	#LR__1720
13f80                 | '         delay := lookupDelay(freq)
13f80     0F 13 02 F6 | 	mov	arg01, local01
13f84     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
13f88     FD 20 02 F6 | 	mov	local02, result1
13f8c     04 00 90 FD | 	jmp	#LR__1721
13f90                 | LR__1720
13f90                 | '     else
13f90                 | '         delay <#= $f ' limit to 15
13f90     0F 20 66 F3 | 	fles	local02, #15
13f94                 | LR__1721
13f94                 | ' 
13f94                 | '     ' create our lock
13f94                 | ' 
13f94                 | '     driverlock := LOCKNEW()  
13f94     00 FA 05 F6 | 	mov	result1, #0
13f98     04 FA 61 FD | 	locknew	result1
13f9c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
13fa0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
13fa4                 | '     if driverlock == -1
13fa4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
13fa8     FF FF 7F FF 
13fac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
13fb0                 | '         return ERR_NO_LOCK
13fb0     1A FA 65 A6 |  if_e	neg	result1, #26
13fb4     D0 00 90 AD |  if_e	jmp	#LR__1723
13fb8                 | ' 
13fb8                 | '     ' patch in the proper data and HUB addresses to the startup structure
13fb8                 | ' 
13fb8                 | '     long[@startupData][0]:=clkfreq
13fb8     14 1E 06 FB | 	rdlong	local01, #20
13fbc     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
13fc0     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
13fc4                 | ' '    long[@startupData][1]:=$1000_0000
13fc4                 | '     long[@startupData][5]:=@deviceData
13fc4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
13fc8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
13fcc     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
13fd0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
13fd4     14 14 06 F1 | 	add	arg02, #20
13fd8     0A 1F 62 FC | 	wrlong	local01, arg02
13fdc                 | '     long[@startupData][6]:=@qosData
13fdc     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
13fe0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
13fe4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
13fe8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
13fec     18 14 06 F1 | 	add	arg02, #24
13ff0     0A 1F 62 FC | 	wrlong	local01, arg02
13ff4                 | '     long[@startupData][7]:=$7FF00
13ff4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
13ff8     1C 1E 06 F1 | 	add	local01, #28
13ffc     FF 03 80 FF 
14000     0F 01 6A FC | 	wrlong	##524032, local01
14004                 | ' 
14004                 | '     ' setup some default bank and QoS parameter values
14004                 | ' 
14004                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14004     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14008     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1400c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14010     10 18 66 F0 | 	shl	arg04, #16
14014     0C 20 66 F0 | 	shl	local02, #12
14018     10 19 42 F5 | 	or	arg04, local02
1401c     18 18 46 F5 | 	or	arg04, #24
14020     0C 15 02 F6 | 	mov	arg02, arg04
14024     02 16 06 F6 | 	mov	arg03, #2
14028     A0 00 A0 FD | 	call	#\builtin_longfill_
1402c                 | '     longfill(@qosData, $FFFF0000, 8)
1402c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14030     07 16 06 F6 | 	mov	arg03, #7
14034     28 16 62 FD | 	setq	arg03
14038     80 FF FF FF 
1403c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14040                 | ' 
14040                 | '     ' get the address of the PSRAM memory driver so we can start it
14040                 | ' 
14040                 | '     driverAddr:= driver.getDriverAddr()
14040                 | '     return @driver_start
14040     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14044     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
14048     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1404c                 | ' 
1404c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1404c                 | ' 
1404c                 | '     if desiredcog < 0
1404c     00 22 56 F2 | 	cmps	local03, #0 wc
14050                 | '         desiredcog := NEWCOG
14050     10 22 06 C6 |  if_b	mov	local03, #16
14054                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14054     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14058     11 25 02 F6 | 	mov	local04, local03
1405c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14060     0A 25 F2 FC | 	coginit	local04, arg02 wc
14064     01 24 66 C6 |  if_b	neg	local04, #1
14068     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1406c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14070                 | '     repeat until long[@startupData] == 0 
14070     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14074                 | LR__1722
14074     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
14078     F8 FF 9F 5D |  if_ne	jmp	#LR__1722
1407c                 | ' 
1407c                 | '     return drivercog
1407c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14080     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14084     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14088                 | LR__1723
14088     A7 F0 03 F6 | 	mov	ptra, fp
1408c     B2 00 A0 FD | 	call	#popregs_
14090                 | _psram_spin2_startx_ret
14090     2D 00 64 FD | 	ret
14094                 | 
14094                 | ' 
14094                 | ' '..............................................................................
14094                 | ' 
14094                 | ' {{
14094                 | ' }}
14094                 | ' PUB stop() : i
14094                 | _psram_spin2_stop
14094     00 00 06 F6 | 	mov	_var01, #0
14098                 | '     if drivercog <> -1
14098     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1409c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
140a0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
140a4     FF FF 7F FF 
140a8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
140ac     70 00 90 AD |  if_e	jmp	#LR__1733
140b0                 | '         cogstop(drivercog) ' a rather brutal stop
140b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
140b4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
140b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
140bc     03 12 62 FD | 	cogstop	arg01
140c0     97 26 48 FB | 	callpa	#(@LR__1732-@LR__1730)>>2,fcache_load_ptr_
140c4                 | '         repeat i from 0 to 7
140c4                 | LR__1730
140c4                 | '             if long[$7FF00][i*3] < 0
140c4     00 FB 01 F6 | 	mov	result1, _var01
140c8     01 FA 65 F0 | 	shl	result1, #1
140cc     00 FB 01 F1 | 	add	result1, _var01
140d0     02 FA 65 F0 | 	shl	result1, #2
140d4     FF 03 00 FF 
140d8     00 FB 05 F1 | 	add	result1, ##524032
140dc     FD FA 01 FB | 	rdlong	result1, result1
140e0     00 FA 55 F2 | 	cmps	result1, #0 wc
140e4     1C 00 90 3D |  if_ae	jmp	#LR__1731
140e8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
140e8     00 FB 01 F6 | 	mov	result1, _var01
140ec     01 FA 65 F0 | 	shl	result1, #1
140f0     00 FB 01 F1 | 	add	result1, _var01
140f4     02 FA 65 F0 | 	shl	result1, #2
140f8     FF 03 00 FF 
140fc     00 FB 05 F1 | 	add	result1, ##524032
14100     FD 20 68 FC | 	wrlong	#16, result1
14104                 | LR__1731
14104     01 00 06 F1 | 	add	_var01, #1
14108     08 00 56 F2 | 	cmps	_var01, #8 wc
1410c     B4 FF 9F CD |  if_b	jmp	#LR__1730
14110                 | LR__1732
14110                 | '         drivercog := -1
14110     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14114     FF FF FF FF 
14118     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1411c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14120                 | LR__1733
14120                 | '     if driverlock <> -1
14120     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14124     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14128     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1412c     FF FF 7F FF 
14130     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14134                 | '         LOCKRET(driverlock)
14134     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
14138     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1413c     05 12 62 5D |  if_ne	lockret	arg01
14140                 | '         driverlock := -1
14140     FF FF FF 5F 
14144     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
14148     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1414c     00 FB 01 F6 | 	mov	result1, _var01
14150                 | _psram_spin2_stop_ret
14150     2D 00 64 FD | 	ret
14154                 | 
14154                 | ' 
14154                 | ' '..............................................................................
14154                 | ' 
14154                 | ' {{
14154                 | ' }}
14154                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
14154                 | _psram_spin2_read1
14154                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14154                 | '     if drivercog == -1 ' driver must be running
14154     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14158     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1415c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14160     FF FF 7F FF 
14164     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14168                 | '         return ERR_INACTIVE
14168     0F FA 65 A6 |  if_e	neg	result1, #15
1416c     7C 00 90 AD |  if_e	jmp	#LR__1741
14170                 | '     if count == 0 ' don't even bother reading
14170     00 16 0E F2 | 	cmp	arg03, #0 wz
14174                 | '         return 0
14174     00 FA 05 A6 |  if_e	mov	result1, #0
14178     70 00 90 AD |  if_e	jmp	#LR__1741
1417c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1417c     00 FA 05 F6 | 	mov	result1, #0
14180     01 FA 61 FD | 	cogid	result1
14184     FD 00 02 F6 | 	mov	_var01, result1
14188     01 00 66 F0 | 	shl	_var01, #1
1418c     FD 00 02 F1 | 	add	_var01, result1
14190     02 00 66 F0 | 	shl	_var01, #2
14194     FF 03 00 FF 
14198     00 03 06 F6 | 	mov	_var02, ##524032
1419c     00 03 02 F1 | 	add	_var02, _var01
141a0                 | '     if long[mailbox] < 0
141a0     01 01 02 FB | 	rdlong	_var01, _var02
141a4     00 00 56 F2 | 	cmps	_var01, #0 wc
141a8                 | '         return ERR_MAILBOX_BUSY
141a8     1C FA 65 C6 |  if_b	neg	result1, #28
141ac     3C 00 90 CD |  if_b	jmp	#LR__1741
141b0                 | '     long[mailbox][2] := count
141b0     08 02 06 F1 | 	add	_var02, #8
141b4     01 17 62 FC | 	wrlong	arg03, _var02
141b8                 | '     long[mailbox][1] := dstHubAddr
141b8     04 02 86 F1 | 	sub	_var02, #4
141bc     01 13 62 FC | 	wrlong	arg01, _var02
141c0     04 02 86 F1 | 	sub	_var02, #4
141c4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
141c4     0A 05 02 F6 | 	mov	_var03, arg02
141c8     D9 04 06 F4 | 	bitl	_var03, #217
141cc     00 00 58 FF 
141d0     00 00 06 F6 | 	mov	_var01, ##-1342177280
141d4     02 01 02 F1 | 	add	_var01, _var03
141d8     01 01 62 FC | 	wrlong	_var01, _var02
141dc                 | '     repeat
141dc                 | LR__1740
141dc                 | '         result := long[mailbox]    
141dc     01 05 02 FB | 	rdlong	_var03, _var02
141e0     00 04 56 F2 | 	cmps	_var03, #0 wc
141e4     F4 FF 9F CD |  if_b	jmp	#LR__1740
141e8                 | '     while result < 0   
141e8                 | '     return -result                       'return success or error
141e8     02 FB 61 F6 | 	neg	result1, _var03
141ec                 | LR__1741
141ec                 | _psram_spin2_read1_ret
141ec     2D 00 64 FD | 	ret
141f0                 | 
141f0                 | ' 
141f0                 | ' '..............................................................................
141f0                 | ' 
141f0                 | ' {{
141f0                 | ' }}
141f0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
141f0                 | _psram_spin2_write
141f0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
141f0                 | '     if drivercog == -1 ' driver must be running
141f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
141f4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
141f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
141fc     FF FF 7F FF 
14200     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14204                 | '         return ERR_INACTIVE
14204     0F FA 65 A6 |  if_e	neg	result1, #15
14208     7C 00 90 AD |  if_e	jmp	#LR__1751
1420c                 | '     if count == 0 ' don't even bother writing
1420c     00 16 0E F2 | 	cmp	arg03, #0 wz
14210                 | '         return 0
14210     00 FA 05 A6 |  if_e	mov	result1, #0
14214     70 00 90 AD |  if_e	jmp	#LR__1751
14218                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14218     00 FA 05 F6 | 	mov	result1, #0
1421c     01 FA 61 FD | 	cogid	result1
14220     FD 00 02 F6 | 	mov	_var01, result1
14224     01 00 66 F0 | 	shl	_var01, #1
14228     FD 00 02 F1 | 	add	_var01, result1
1422c     02 00 66 F0 | 	shl	_var01, #2
14230     FF 03 00 FF 
14234     00 03 06 F6 | 	mov	_var02, ##524032
14238     00 03 02 F1 | 	add	_var02, _var01
1423c                 | '     if long[mailbox] < 0
1423c     01 01 02 FB | 	rdlong	_var01, _var02
14240     00 00 56 F2 | 	cmps	_var01, #0 wc
14244                 | '         return ERR_MAILBOX_BUSY
14244     1C FA 65 C6 |  if_b	neg	result1, #28
14248     3C 00 90 CD |  if_b	jmp	#LR__1751
1424c                 | '     long[mailbox][2] := count
1424c     08 02 06 F1 | 	add	_var02, #8
14250     01 17 62 FC | 	wrlong	arg03, _var02
14254                 | '     long[mailbox][1] := srcHubAddr
14254     04 02 86 F1 | 	sub	_var02, #4
14258     01 13 62 FC | 	wrlong	arg01, _var02
1425c     04 02 86 F1 | 	sub	_var02, #4
14260                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
14260     0A 05 02 F6 | 	mov	_var03, arg02
14264     D9 04 06 F4 | 	bitl	_var03, #217
14268     00 00 78 FF 
1426c     00 00 06 F6 | 	mov	_var01, ##-268435456
14270     02 01 02 F1 | 	add	_var01, _var03
14274     01 01 62 FC | 	wrlong	_var01, _var02
14278                 | '     repeat
14278                 | LR__1750
14278                 | '         result := long[mailbox]    
14278     01 05 02 FB | 	rdlong	_var03, _var02
1427c     00 04 56 F2 | 	cmps	_var03, #0 wc
14280     F4 FF 9F CD |  if_b	jmp	#LR__1750
14284                 | '     while result < 0   
14284                 | '     return -result                       'return success or error
14284     02 FB 61 F6 | 	neg	result1, _var03
14288                 | LR__1751
14288                 | _psram_spin2_write_ret
14288     2D 00 64 FD | 	ret
1428c                 | 
1428c                 | ' 
1428c                 | ' ' generalized fill
1428c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1428c                 | _psram_spin2_fill
1428c     09 01 02 F6 | 	mov	_var01, arg01
14290     0A 03 02 F6 | 	mov	_var02, arg02
14294     0B 05 02 F6 | 	mov	_var03, arg03
14298     0D 07 02 F6 | 	mov	_var04, arg05
1429c                 | '     case datasize 
1429c     01 06 86 F1 | 	sub	_var04, #1
142a0     04 06 26 F3 | 	fle	_var04, #4
142a4     30 06 62 FD | 	jmprel	_var04
142a8                 | LR__1760
142a8     10 00 90 FD | 	jmp	#LR__1761
142ac     18 00 90 FD | 	jmp	#LR__1762
142b0     2C 00 90 FD | 	jmp	#LR__1764
142b4     1C 00 90 FD | 	jmp	#LR__1763
142b8     24 00 90 FD | 	jmp	#LR__1764
142bc                 | LR__1761
142bc                 | '         1: req := driver.R_WRITEBYTE
142bc     00 00 60 FF 
142c0     00 08 06 F6 | 	mov	_var05, ##-1073741824
142c4     20 00 90 FD | 	jmp	#LR__1765
142c8                 | LR__1762
142c8                 | '         2: req := driver.R_WRITEWORD
142c8     00 00 68 FF 
142cc     00 08 06 F6 | 	mov	_var05, ##-805306368
142d0     14 00 90 FD | 	jmp	#LR__1765
142d4                 | LR__1763
142d4                 | '         4: req := driver.R_WRITELONG
142d4     00 00 70 FF 
142d8     00 08 06 F6 | 	mov	_var05, ##-536870912
142dc     08 00 90 FD | 	jmp	#LR__1765
142e0                 | LR__1764
142e0                 | '         other : return ERR_INVALID
142e0     06 FA 65 F6 | 	neg	result1, #6
142e4     94 00 90 FD | 	jmp	#LR__1767
142e8                 | LR__1765
142e8                 | '     if count == 0   ' nothing to do
142e8     00 04 0E F2 | 	cmp	_var03, #0 wz
142ec                 | '         return 0
142ec     00 FA 05 A6 |  if_e	mov	result1, #0
142f0     88 00 90 AD |  if_e	jmp	#LR__1767
142f4                 | '     if drivercog == -1
142f4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
142f8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
142fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14300     FF FF 7F FF 
14304     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
14308                 | '         return ERR_INACTIVE
14308     0F FA 65 A6 |  if_e	neg	result1, #15
1430c     6C 00 90 AD |  if_e	jmp	#LR__1767
14310                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
14310     00 FA 05 F6 | 	mov	result1, #0
14314     01 FA 61 FD | 	cogid	result1
14318     FD 06 02 F6 | 	mov	_var04, result1
1431c     01 06 66 F0 | 	shl	_var04, #1
14320     FD 06 02 F1 | 	add	_var04, result1
14324     02 06 66 F0 | 	shl	_var04, #2
14328     FF 03 00 FF 
1432c     00 0B 06 F6 | 	mov	_var06, ##524032
14330     03 0B 02 F1 | 	add	_var06, _var04
14334                 | '     if long[mailbox] < 0
14334     05 07 02 FB | 	rdlong	_var04, _var06
14338     00 06 56 F2 | 	cmps	_var04, #0 wc
1433c                 | '         return ERR_MAILBOX_BUSY
1433c     1C FA 65 C6 |  if_b	neg	result1, #28
14340     38 00 90 CD |  if_b	jmp	#LR__1767
14344                 | '     long[mailbox][2] := count
14344     08 0A 06 F1 | 	add	_var06, #8
14348     05 05 62 FC | 	wrlong	_var03, _var06
1434c                 | '     long[mailbox][1] := pattern
1434c     04 0A 86 F1 | 	sub	_var06, #4
14350     05 03 62 FC | 	wrlong	_var02, _var06
14354     04 0A 86 F1 | 	sub	_var06, #4
14358                 | '     long[mailbox] := req + (addr & $fffffff)
14358     04 0D 02 F6 | 	mov	_var07, _var05
1435c     00 0F 02 F6 | 	mov	_var08, _var01
14360     7C 0E 06 F4 | 	bitl	_var08, #124
14364     07 0D 02 F1 | 	add	_var07, _var08
14368     05 0D 62 FC | 	wrlong	_var07, _var06
1436c                 | '     repeat
1436c                 | LR__1766
1436c                 | '         r := long[mailbox]
1436c     05 0F 02 FB | 	rdlong	_var08, _var06
14370     00 0E 56 F2 | 	cmps	_var08, #0 wc
14374     F4 FF 9F CD |  if_b	jmp	#LR__1766
14378                 | '     while r < 0
14378                 | '     return -r                  ' return 0 for success or negated error code
14378     07 FB 61 F6 | 	neg	result1, _var08
1437c                 | LR__1767
1437c                 | _psram_spin2_fill_ret
1437c     2D 00 64 FD | 	ret
14380                 | 
14380                 | ' 
14380                 | ' '..............................................................................
14380                 | ' 
14380                 | ' {{
14380                 | ' }}
14380                 | ' PUB setQos(cog, qos) : result | mailbox
14380                 | _psram_spin2_setQos
14380     09 01 02 F6 | 	mov	_var01, arg01
14384                 | '     if drivercog == -1 ' driver must be running
14384     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14388     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1438c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14390     FF FF 7F FF 
14394     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14398                 | '         return ERR_INACTIVE
14398     0F FA 65 A6 |  if_e	neg	result1, #15
1439c     9C 00 90 AD |  if_e	jmp	#LR__1774
143a0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
143a0     00 00 56 F2 | 	cmps	_var01, #0 wc
143a4     08 00 90 CD |  if_b	jmp	#LR__1770
143a8     08 00 56 F2 | 	cmps	_var01, #8 wc
143ac     08 00 90 CD |  if_b	jmp	#LR__1771
143b0                 | LR__1770
143b0                 | '         return ERR_INVALID
143b0     06 FA 65 F6 | 	neg	result1, #6
143b4     84 00 90 FD | 	jmp	#LR__1774
143b8                 | LR__1771
143b8                 | '     long[@qosData][cog] := qos & !$1ff
143b8     FF 15 26 F5 | 	andn	arg02, #511
143bc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
143c0     02 00 66 F0 | 	shl	_var01, #2
143c4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
143c8     00 15 62 FC | 	wrlong	arg02, _var01
143cc                 | '     mailbox := $7FF00 + drivercog*12
143cc     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
143d0     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
143d4     02 07 02 F6 | 	mov	_var04, _var03
143d8     01 06 66 F0 | 	shl	_var04, #1
143dc     02 07 02 F1 | 	add	_var04, _var03
143e0     02 06 66 F0 | 	shl	_var04, #2
143e4     FF 03 00 FF 
143e8     00 09 06 F6 | 	mov	_var05, ##524032
143ec     03 09 02 F1 | 	add	_var05, _var04
143f0                 | '     repeat until LOCKTRY(driverlock)
143f0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
143f4                 | LR__1772
143f4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
143f8     06 12 72 FD | 	locktry	arg01 wc
143fc     F4 FF 9F 3D |  if_ae	jmp	#LR__1772
14400     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14404                 | '     long[mailbox] := driver.R_CONFIG + cogid()
14404     00 06 06 F6 | 	mov	_var04, #0
14408     01 06 62 FD | 	cogid	_var04
1440c     00 00 78 FF 
14410     00 02 06 F6 | 	mov	_var02, ##-268435456
14414     03 03 02 F1 | 	add	_var02, _var04
14418     04 03 62 FC | 	wrlong	_var02, _var05
1441c                 | '     repeat while long[mailbox] < 0
1441c                 | LR__1773
1441c     04 03 02 FB | 	rdlong	_var02, _var05
14420     00 02 56 F2 | 	cmps	_var02, #0 wc
14424     F4 FF 9F CD |  if_b	jmp	#LR__1773
14428                 | '     LOCKREL(driverlock)
14428     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1442c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14430     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14434     07 12 72 FD | 	lockrel	arg01 wc
14438     00 FA 05 F6 | 	mov	result1, #0
1443c                 | LR__1774
1443c                 | _psram_spin2_setQos_ret
1443c     2D 00 64 FD | 	ret
14440                 | 
14440                 | ' 
14440                 | ' '..............................................................................
14440                 | ' 
14440                 | ' {{
14440                 | ' }}
14440                 | ' PRI lookupDelay(freq) : delay | profile
14440                 | _psram_spin2_lookupDelay
14440                 | '     profile := @delayTable
14440     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
14444     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
14448                 | '     delay := long[profile][0]
14448     00 03 02 FB | 	rdlong	_var02, _var01
1444c                 | '     repeat while long[profile][1] 
1444c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
14450     97 16 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
14454                 | LR__1780
14454     04 00 06 F1 | 	add	_var01, #4
14458     00 FB 09 FB | 	rdlong	result1, _var01 wz
1445c     04 00 86 F1 | 	sub	_var01, #4
14460     1C 00 90 AD |  if_e	jmp	#LR__1782
14464                 | '         if freq +< long[profile][1] 
14464     04 00 06 F1 | 	add	_var01, #4
14468     00 FB 01 FB | 	rdlong	result1, _var01
1446c     04 00 86 F1 | 	sub	_var01, #4
14470     FD 12 12 F2 | 	cmp	arg01, result1 wc
14474                 | '             quit
14474                 | '         profile += 4
14474     04 00 06 31 |  if_ae	add	_var01, #4
14478                 | '         delay++
14478     01 02 06 31 |  if_ae	add	_var02, #1
1447c     D4 FF 9F 3D |  if_ae	jmp	#LR__1780
14480                 | LR__1781
14480                 | LR__1782
14480     01 FB 01 F6 | 	mov	result1, _var02
14484                 | _psram_spin2_lookupDelay_ret
14484     2D 00 64 FD | 	ret
14488                 | 
14488                 | ' 
14488                 | ' PUB start() : r
14488                 | _usbnew_spin2_start
14488     00 00 06 F6 | 	mov	_var01, #0
1448c                 | '   ifnot driver_cog
1448c     15 00 00 FF 
14490     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
14494     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
14498     15 00 00 FF 
1449c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
144a0     38 00 90 5D |  if_ne	jmp	#LR__1790
144a4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
144a4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
144a8     10 00 06 F6 | 	mov	_var01, #16
144ac     00 16 06 F6 | 	mov	arg03, #0
144b0     28 16 62 FD | 	setq	arg03
144b4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
144b8     01 00 66 C6 |  if_b	neg	_var01, #1
144bc                 | '     if r >= 0
144bc     00 00 56 F2 | 	cmps	_var01, #0 wc
144c0                 | '       driver_cog := r+1
144c0     00 03 02 36 |  if_ae	mov	_var02, _var01
144c4     01 02 06 31 |  if_ae	add	_var02, #1
144c8     15 00 00 3F 
144cc     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
144d0     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
144d4     15 00 00 3F 
144d8     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
144dc                 | LR__1790
144dc     00 FB 01 F6 | 	mov	result1, _var01
144e0                 | _usbnew_spin2_start_ret
144e0     2D 00 64 FD | 	ret
144e4                 | 
144e4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
144e4                 | ' 
144e4                 | ' '' Return key event from buffer if there is one
144e4                 | ' PUB get_key() : r | tail
144e4                 | _usbnew_spin2_get_key
144e4                 | '   tail := keyq_tail
144e4     0F 00 00 FF 
144e8     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
144ec     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
144f0                 | '   if keyq_head == tail
144f0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
144f4     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
144f8     0F 00 00 FF 
144fc     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
14500     00 03 0A F2 | 	cmp	_var02, _var01 wz
14504                 | '     return 0 ' No event
14504     00 FA 05 A6 |  if_e	mov	result1, #0
14508     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1450c                 | '   r := keyq_data[tail]
1450c     00 03 02 F6 | 	mov	_var02, _var01
14510     02 02 66 F0 | 	shl	_var02, #2
14514     0F 00 00 FF 
14518     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1451c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
14520     01 FB 01 FB | 	rdlong	result1, _var02
14524                 | '   if ++tail == KEYQUEUE_SIZE
14524     01 00 06 F1 | 	add	_var01, #1
14528     80 00 0E F2 | 	cmp	_var01, #128 wz
1452c                 | '     tail := 0
1452c     00 00 06 A6 |  if_e	mov	_var01, #0
14530                 | '   keyq_tail := tail
14530     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
14534     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
14538     0F 00 00 FF 
1453c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
14540                 | _usbnew_spin2_get_key_ret
14540     2D 00 64 FD | 	ret
14544                 | 
14544                 | ' 
14544                 | ' '' Emulate mouse movement
14544                 | ' PUB mouse_move(x,y)
14544                 | _usbnew_spin2_mouse_move
14544     02 4A 05 F6 | 	mov	COUNT_, #2
14548     A8 00 A0 FD | 	call	#pushregs_
1454c     09 1F 02 F6 | 	mov	local01, arg01
14550     0A 21 02 F6 | 	mov	local02, arg02
14554                 | '   mouse_lock := 1
14554     14 00 00 FF 
14558     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1455c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
14560     14 00 00 FF 
14564     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
14568                 | '   waitus(2) ' hope driver is now done
14568     02 12 06 F6 | 	mov	arg01, #2
1456c     30 0A B0 FD | 	call	#__system___waitus
14570                 | '   mouse_xacc := x
14570     14 00 00 FF 
14574     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
14578     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1457c                 | '   mouse_yacc := y
1457c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
14580     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
14584                 | '   if mouse_outptr
14584     04 00 00 FF 
14588     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1458c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
14590     0F 00 00 FF 
14594     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
14598     24 00 90 AD |  if_e	jmp	#LR__1800
1459c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1459c     10 20 66 F0 | 	shl	local02, #16
145a0     0F 1F 32 F9 | 	getword	local01, local01, #0
145a4     0F 21 42 F5 | 	or	local02, local01
145a8     0F 00 00 FF 
145ac     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
145b0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
145b4     0F 00 00 FF 
145b8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
145bc     0F 21 62 FC | 	wrlong	local02, local01
145c0                 | LR__1800
145c0                 | '   mouse_lock := 0
145c0     14 00 00 FF 
145c4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
145c8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
145cc     14 00 00 FF 
145d0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
145d4     A7 F0 03 F6 | 	mov	ptra, fp
145d8     B2 00 A0 FD | 	call	#popregs_
145dc                 | _usbnew_spin2_mouse_move_ret
145dc     2D 00 64 FD | 	ret
145e0                 | 
145e0                 | '     '' Set HAVE_HIDPAD to enable.
145e0                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
145e0                 | ' 
145e0                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
145e0                 | ' PUB hidpad_id(dev) : r
145e0                 | _usbnew_spin2_hidpad_id
145e0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
145e0     13 00 00 FF 
145e4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
145e8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
145ec     09 01 02 F6 | 	mov	_var01, arg01
145f0     03 00 66 F0 | 	shl	_var01, #3
145f4     09 01 82 F1 | 	sub	_var01, arg01
145f8     02 00 66 F0 | 	shl	_var01, #2
145fc     00 FB 01 F1 | 	add	result1, _var01
14600     FD FA 01 FB | 	rdlong	result1, result1
14604     13 00 00 FF 
14608     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1460c                 | _usbnew_spin2_hidpad_id_ret
1460c     2D 00 64 FD | 	ret
14610                 | 
14610                 | ' 
14610                 | ' '' Get all button states for a device
14610                 | ' PUB hidpad_buttons(dev) : r 
14610                 | _usbnew_spin2_hidpad_buttons
14610                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
14610     13 00 00 FF 
14614     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14618     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1461c     09 01 02 F6 | 	mov	_var01, arg01
14620     03 00 66 F0 | 	shl	_var01, #3
14624     09 01 82 F1 | 	sub	_var01, arg01
14628     02 00 66 F0 | 	shl	_var01, #2
1462c     00 FB 01 F1 | 	add	result1, _var01
14630     14 FA 05 F1 | 	add	result1, #20
14634     FD FA 01 FB | 	rdlong	result1, result1
14638     13 00 00 FF 
1463c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14640                 | _usbnew_spin2_hidpad_buttons_ret
14640     2D 00 64 FD | 	ret
14644                 | 
14644                 | ' 
14644                 | ' '' Get state of an axis (normalized between -32768 and 32767)
14644                 | ' PUB hidpad_axis(dev,axnum) : r
14644                 | _usbnew_spin2_hidpad_axis
14644                 | '   if axnum +>= 6
14644     06 14 16 F2 | 	cmp	arg02, #6 wc
14648                 | '     return 0
14648     00 FA 05 36 |  if_ae	mov	result1, #0
1464c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
14650                 | '   else 
14650                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
14650     13 00 00 FF 
14654     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
14658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1465c     09 01 02 F6 | 	mov	_var01, arg01
14660     03 00 66 F0 | 	shl	_var01, #3
14664     09 01 82 F1 | 	sub	_var01, arg01
14668     02 00 66 F0 | 	shl	_var01, #2
1466c     00 FB 01 F1 | 	add	result1, _var01
14670     04 00 06 F6 | 	mov	_var01, #4
14674     0A 01 02 F1 | 	add	_var01, arg02
14678     01 00 66 F0 | 	shl	_var01, #1
1467c     FD 00 02 F1 | 	add	_var01, result1
14680     00 FB E1 FA | 	rdword	result1, _var01
14684     0F FA 65 F7 | 	signx	result1, #15
14688     13 00 00 FF 
1468c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14690                 | _usbnew_spin2_hidpad_axis_ret
14690     2D 00 64 FD | 	ret
14694                 | 
14694                 | ' 
14694                 | ' 
14694                 | ' '--------------------------------------------------------------
14694                 | ' '---------- Init the variables, start the cog. ----------------
14694                 | ' '--------------------------------------------------------------
14694                 | ' 
14694                 | ' pub start(mbox,scope,cache) :cog,base | iii
14694                 | _Audio093b_8_sc_spin2_start
14694     04 4A 05 F6 | 	mov	COUNT_, #4
14698     A8 00 A0 FD | 	call	#pushregs_
1469c     09 1F 02 F6 | 	mov	local01, arg01
146a0                 | ' 
146a0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
146a0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
146a0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
146a0                 | ' 
146a0                 | ' mailboxaddr:=mbox 
146a0     F2 1E 62 FC | 	wrlong	local01, objptr
146a4                 | ' scope_ptr:=scope
146a4     04 E4 05 F1 | 	add	objptr, #4
146a8     F2 14 62 FC | 	wrlong	arg02, objptr
146ac                 | ' cache_ptr:=cache
146ac     04 E4 05 F1 | 	add	objptr, #4
146b0     F2 16 62 FC | 	wrlong	arg03, objptr
146b4                 | ' base:=@channel1[0]
146b4     04 E4 05 F1 | 	add	objptr, #4
146b8     F2 20 02 F6 | 	mov	local02, objptr
146bc                 | ' 
146bc                 | ' repeat iii from 0 to 7
146bc     00 22 06 F6 | 	mov	local03, #0
146c0     01 00 00 FF 
146c4     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
146c8     0C E4 85 F1 | 	sub	objptr, #12
146cc     97 80 48 FB | 	callpa	#(@LR__1811-@LR__1810)>>2,fcache_load_ptr_
146d0                 | LR__1810
146d0                 | '   long[base+32*iii]:=0
146d0     10 1F 02 F6 | 	mov	local01, local02
146d4     11 FD 01 F6 | 	mov	result2, local03
146d8     05 FC 65 F0 | 	shl	result2, #5
146dc     FE 1E 02 F1 | 	add	local01, result2
146e0     0F 01 68 FC | 	wrlong	#0, local01
146e4                 | '   long[base+32*iii+4]:=0
146e4     10 1F 02 F6 | 	mov	local01, local02
146e8     11 FD 01 F6 | 	mov	result2, local03
146ec     05 FC 65 F0 | 	shl	result2, #5
146f0     FE 1E 02 F1 | 	add	local01, result2
146f4     04 1E 06 F1 | 	add	local01, #4
146f8     0F 01 68 FC | 	wrlong	#0, local01
146fc                 | '   long[base+32*iii+12]:=0
146fc     10 25 02 F6 | 	mov	local04, local02
14700     11 1F 02 F6 | 	mov	local01, local03
14704     05 1E 66 F0 | 	shl	local01, #5
14708     0F 25 02 F1 | 	add	local04, local01
1470c     0C 24 06 F1 | 	add	local04, #12
14710     12 01 68 FC | 	wrlong	#0, local04
14714                 | '   long[base+32*iii+16]:=2 
14714     10 25 02 F6 | 	mov	local04, local02
14718     11 1F 02 F6 | 	mov	local01, local03
1471c     05 1E 66 F0 | 	shl	local01, #5
14720     0F 25 02 F1 | 	add	local04, local01
14724     10 24 06 F1 | 	add	local04, #16
14728     12 05 68 FC | 	wrlong	#2, local04
1472c                 | '   word[base+32*iii+20]:=0
1472c     10 25 02 F6 | 	mov	local04, local02
14730     11 1F 02 F6 | 	mov	local01, local03
14734     05 1E 66 F0 | 	shl	local01, #5
14738     0F 25 02 F1 | 	add	local04, local01
1473c     14 24 06 F1 | 	add	local04, #20
14740     12 01 58 FC | 	wrword	#0, local04
14744                 | '   word[base+32*iii+22]:=8192
14744     10 25 02 F6 | 	mov	local04, local02
14748     11 1F 02 F6 | 	mov	local01, local03
1474c     05 1E 66 F0 | 	shl	local01, #5
14750     0F 25 02 F1 | 	add	local04, local01
14754     16 24 06 F1 | 	add	local04, #22
14758     10 00 80 FF 
1475c     12 01 58 FC | 	wrword	##8192, local04
14760                 | '   word[base+32*iii+24]:=4000+2*iii
14760     11 25 02 F6 | 	mov	local04, local03
14764     01 24 66 F0 | 	shl	local04, #1
14768     07 00 00 FF 
1476c     A0 1F 06 F6 | 	mov	local01, ##4000
14770     12 1F 02 F1 | 	add	local01, local04
14774     10 25 02 F6 | 	mov	local04, local02
14778     11 FD 01 F6 | 	mov	result2, local03
1477c     05 FC 65 F0 | 	shl	result2, #5
14780     FE 24 02 F1 | 	add	local04, result2
14784     18 24 06 F1 | 	add	local04, #24
14788     12 1F 52 FC | 	wrword	local01, local04
1478c                 | '   word[base+32*iii+26]:=2
1478c     10 25 02 F6 | 	mov	local04, local02
14790     11 1F 02 F6 | 	mov	local01, local03
14794     05 1E 66 F0 | 	shl	local01, #5
14798     0F 25 02 F1 | 	add	local04, local01
1479c     1A 24 06 F1 | 	add	local04, #26
147a0     12 05 58 FC | 	wrword	#2, local04
147a4                 | '   long [base+32*iii+8]:=@null | $C0000000
147a4     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
147a8     3E 1E 26 F4 | 	bith	local01, #62
147ac     10 25 02 F6 | 	mov	local04, local02
147b0     11 17 02 F6 | 	mov	arg03, local03
147b4     05 16 66 F0 | 	shl	arg03, #5
147b8     0B 25 02 F1 | 	add	local04, arg03
147bc     08 24 06 F1 | 	add	local04, #8
147c0     12 1F 62 FC | 	wrlong	local01, local04
147c4     01 22 06 F1 | 	add	local03, #1
147c8     08 22 56 F2 | 	cmps	local03, #8 wc
147cc     00 FF 9F CD |  if_b	jmp	#LR__1810
147d0                 | LR__1811
147d0     01 00 00 FF 
147d4     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
147d8                 | '   
147d8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
147d8     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
147dc     F2 16 02 F6 | 	mov	arg03, objptr
147e0     10 24 06 F6 | 	mov	local04, #16
147e4     28 16 62 FD | 	setq	arg03
147e8     0A 25 F2 FC | 	coginit	local04, arg02 wc
147ec     01 24 66 C6 |  if_b	neg	local04, #1
147f0                 | ' waitms(100)
147f0     64 12 06 F6 | 	mov	arg01, #100
147f4     3C 07 B0 FD | 	call	#__system___waitms
147f8                 | ' return cog,base
147f8     10 FD 01 F6 | 	mov	result2, local02
147fc     12 FB 01 F6 | 	mov	result1, local04
14800     A7 F0 03 F6 | 	mov	ptra, fp
14804     B2 00 A0 FD | 	call	#popregs_
14808                 | _Audio093b_8_sc_spin2_start_ret
14808     2D 00 64 FD | 	ret
1480c                 | 
1480c                 | ' 
1480c                 | ' ' a simple play procedure to not poke everything. 
1480c                 | ' 
1480c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1480c                 | _Audio093b_8_sc_spin2_play
1480c     0C E4 05 F1 | 	add	objptr, #12
14810     F2 00 02 F6 | 	mov	_var01, objptr
14814     05 12 66 F0 | 	shl	arg01, #5
14818     09 01 02 F1 | 	add	_var01, arg01
1481c     00 00 60 FF 
14820     00 14 06 F1 | 	add	arg02, ##-1073741824
14824     00 13 02 F6 | 	mov	arg01, _var01
14828     08 12 06 F1 | 	add	arg01, #8
1482c     09 15 62 FC | 	wrlong	arg02, arg01
14830     00 15 02 F6 | 	mov	arg02, _var01
14834     0C 14 06 F1 | 	add	arg02, #12
14838     0A 1B 62 FC | 	wrlong	arg05, arg02
1483c     00 1C 56 F2 | 	cmps	arg06, #0 wc
14840     00 15 02 36 |  if_ae	mov	arg02, _var01
14844     10 14 06 31 |  if_ae	add	arg02, #16
14848     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
1484c     02 1A 06 C1 |  if_b	add	arg05, #2
14850     00 13 02 C6 |  if_b	mov	arg01, _var01
14854     10 12 06 C1 |  if_b	add	arg01, #16
14858     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1485c     0B 15 52 F6 | 	abs	arg02, arg03 wc
14860     0F 1B 80 FF 
14864     0A 3F 1A FD | 	qdiv	##3546911, arg02
14868                 | ' 
14868                 | ' base2:=@channel1[0]+32*channel
14868                 | ' long[base2+8]:=sample+$C0000000 
14868                 | ' long[base2+12]:= len
14868                 | ' if loop >=0 
14868                 | '   long[base2+16]:= loop
14868     0C E4 85 F1 | 	sub	objptr, #12
1486c                 | ' else
1486c                 | '   long[base2+16]:= len+2
1486c                 | ' word[base2+20]:=vol
1486c     00 15 02 F6 | 	mov	arg02, _var01
14870     14 14 06 F1 | 	add	arg02, #20
14874     0A 19 52 FC | 	wrword	arg04, arg02
14878                 | ' word[base2+24]:= 3546911/splfreq 
14878     00 13 02 F6 | 	mov	arg01, _var01
1487c     18 12 06 F1 | 	add	arg01, #24
14880                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
14880                 | ' long[base2+28]:=$40000000
14880     18 14 62 FD | 	getqx	arg02
14884     0A 15 82 F6 | 	negc	arg02, arg02
14888     09 15 52 FC | 	wrword	arg02, arg01
1488c     00 15 02 F6 | 	mov	arg02, _var01
14890     1A 14 06 F1 | 	add	arg02, #26
14894     0A 01 5A FC | 	wrword	#256, arg02
14898     1C 00 06 F1 | 	add	_var01, #28
1489c     00 00 A0 FF 
148a0     00 01 68 FC | 	wrlong	##1073741824, _var01
148a4                 | _Audio093b_8_sc_spin2_play_ret
148a4     2D 00 64 FD | 	ret
148a8                 | 
148a8                 | ' until (i >>8) >=len
148a8                 | ' 
148a8                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
148a8                 | _Audio093b_8_sc_spin2_play8
148a8                 | ' 
148a8                 | ' base2:=@channel1[0]+32*channel
148a8     0C E4 05 F1 | 	add	objptr, #12
148ac     F2 00 02 F6 | 	mov	_var01, objptr
148b0     05 12 66 F0 | 	shl	arg01, #5
148b4     09 01 02 F1 | 	add	_var01, arg01
148b8                 | ' long[base2]:=0
148b8     00 01 68 FC | 	wrlong	#0, _var01
148bc                 | ' long[base2+8]:=sample+$40000000 
148bc     00 00 20 FF 
148c0     00 14 06 F1 | 	add	arg02, ##1073741824
148c4     00 13 02 F6 | 	mov	arg01, _var01
148c8     08 12 06 F1 | 	add	arg01, #8
148cc     09 15 62 FC | 	wrlong	arg02, arg01
148d0                 | ' if loop>=0
148d0     00 1C 56 F2 | 	cmps	arg06, #0 wc
148d4     0C E4 85 F1 | 	sub	objptr, #12
148d8     1C 00 90 CD |  if_b	jmp	#LR__1820
148dc                 | '   long[base2+12]:=loop
148dc     00 15 02 F6 | 	mov	arg02, _var01
148e0     0C 14 06 F1 | 	add	arg02, #12
148e4     0A 1D 62 FC | 	wrlong	arg06, arg02
148e8                 | '   long[base2+16]:= len
148e8     00 1D 02 F6 | 	mov	arg06, _var01
148ec     10 1C 06 F1 | 	add	arg06, #16
148f0     0E 1B 62 FC | 	wrlong	arg05, arg06
148f4     1C 00 90 FD | 	jmp	#LR__1821
148f8                 | LR__1820
148f8                 | ' else
148f8                 | '   long[base2+12]:= len
148f8     00 1D 02 F6 | 	mov	arg06, _var01
148fc     0C 1C 06 F1 | 	add	arg06, #12
14900     0E 1B 62 FC | 	wrlong	arg05, arg06
14904                 | '   long[base2+16]:= len+1
14904     01 1A 06 F1 | 	add	arg05, #1
14908     00 13 02 F6 | 	mov	arg01, _var01
1490c     10 12 06 F1 | 	add	arg01, #16
14910     09 1B 62 FC | 	wrlong	arg05, arg01
14914                 | LR__1821
14914     0B 17 52 F6 | 	abs	arg03, arg03 wc
14918     0F 1B 80 FF 
1491c     0B 3F 1A FD | 	qdiv	##3546911, arg03
14920                 | ' word[base2+20]:=vol
14920     00 17 02 F6 | 	mov	arg03, _var01
14924     14 16 06 F1 | 	add	arg03, #20
14928     0B 19 52 FC | 	wrword	arg04, arg03
1492c                 | ' word[base2+24]:= 3546911/splfreq 
1492c     00 13 02 F6 | 	mov	arg01, _var01
14930     18 12 06 F1 | 	add	arg01, #24
14934                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
14934                 | ' long[base2+28]:=$40000000
14934     18 18 62 FD | 	getqx	arg04
14938     0C 19 82 F6 | 	negc	arg04, arg04
1493c     09 19 52 FC | 	wrword	arg04, arg01
14940     00 19 02 F6 | 	mov	arg04, _var01
14944     1A 18 06 F1 | 	add	arg04, #26
14948     0C 01 5A FC | 	wrword	#256, arg04
1494c     1C 00 06 F1 | 	add	_var01, #28
14950     00 00 A0 FF 
14954     00 01 68 FC | 	wrlong	##1073741824, _var01
14958                 | _Audio093b_8_sc_spin2_play8_ret
14958     2D 00 64 FD | 	ret
1495c                 | 
1495c                 | ' 
1495c                 | '     
1495c                 | ' pub stop(channel) 'silence it
1495c                 | _Audio093b_8_sc_spin2_stop
1495c                 | ' 
1495c                 | ' word[@channel1[0]+32*channel+20]:=0
1495c     0C E4 05 F1 | 	add	objptr, #12
14960     F2 00 02 F6 | 	mov	_var01, objptr
14964     05 12 66 F0 | 	shl	arg01, #5
14968     09 01 02 F1 | 	add	_var01, arg01
1496c     14 00 06 F1 | 	add	_var01, #20
14970     00 01 58 FC | 	wrword	#0, _var01
14974     0C E4 85 F1 | 	sub	objptr, #12
14978                 | _Audio093b_8_sc_spin2_stop_ret
14978     2D 00 64 FD | 	ret
1497c                 | hubexit
1497c     81 00 80 FD | 	jmp	#cogexit
14980                 | 
14980                 | __system___setbaud
14980     14 5E 06 FB | 	rdlong	muldiva_, #20
14984     09 61 02 F6 | 	mov	muldivb_, arg01
14988     BA 00 A0 FD | 	call	#divide_
1498c     97 06 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
14990                 | LR__1830
14990     3E FA 9D FA | 	rdpin	result1, #62 wc
14994     FE FC A1 F1 | 	subx	result2, result2
14998     F4 FF 9F CD |  if_b	jmp	#LR__1830
1499c                 | LR__1831
1499c     40 7C 64 FD | 	dirl	#62
149a0     40 7E 64 FD | 	dirl	#63
149a4     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
149a8     10 60 66 F0 | 	shl	muldivb_, #16
149ac     07 14 06 F6 | 	mov	arg02, #7
149b0     30 15 02 F1 | 	add	arg02, muldivb_
149b4     3E F8 0C FC | 	wrpin	#124, #62
149b8     3E 14 16 FC | 	wxpin	arg02, #62
149bc     3F 7C 0C FC | 	wrpin	#62, #63
149c0     14 14 06 F1 | 	add	arg02, #20
149c4     3F 14 16 FC | 	wxpin	arg02, #63
149c8     41 7C 64 FD | 	dirh	#62
149cc     41 7E 64 FD | 	dirh	#63
149d0                 | __system___setbaud_ret
149d0     2D 00 64 FD | 	ret
149d4                 | 
149d4                 | __system___txraw
149d4     01 4A 05 F6 | 	mov	COUNT_, #1
149d8     A8 00 A0 FD | 	call	#pushregs_
149dc     09 1F 02 F6 | 	mov	local01, arg01
149e0     97 06 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
149e4                 | LR__1840
149e4     3E FA 9D FA | 	rdpin	result1, #62 wc
149e8     FE FC A1 F1 | 	subx	result2, result2
149ec     F4 FF 9F CD |  if_b	jmp	#LR__1840
149f0                 | LR__1841
149f0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
149f4     C2 01 00 AF 
149f8     00 12 06 A6 |  if_e	mov	arg01, ##230400
149fc     80 FF BF AD |  if_e	call	#__system___setbaud
14a00     3E 1E 26 FC | 	wypin	local01, #62
14a04     01 FA 05 F6 | 	mov	result1, #1
14a08     A7 F0 03 F6 | 	mov	ptra, fp
14a0c     B2 00 A0 FD | 	call	#popregs_
14a10                 | __system___txraw_ret
14a10     2D 00 64 FD | 	ret
14a14                 | 
14a14                 | __system___rxraw
14a14     0D 4A 05 F6 | 	mov	COUNT_, #13
14a18     A8 00 A0 FD | 	call	#pushregs_
14a1c     09 1F 02 F6 | 	mov	local01, arg01
14a20     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
14a24     C2 01 00 AF 
14a28     00 12 06 A6 |  if_e	mov	arg01, ##230400
14a2c     50 FF BF AD |  if_e	call	#__system___setbaud
14a30     00 1E 0E F2 | 	cmp	local01, #0 wz
14a34     20 00 90 AD |  if_e	jmp	#LR__1850
14a38     14 22 06 FB | 	rdlong	local03, #20
14a3c     0A 22 46 F0 | 	shr	local03, #10
14a40     11 1F 02 FD | 	qmul	local01, local03
14a44     1A FA 61 FD | 	getct	result1
14a48     18 24 62 FD | 	getqx	local04
14a4c     12 FB 01 F1 | 	add	result1, local04
14a50     FD 26 02 F6 | 	mov	local05, result1
14a54     04 00 90 FD | 	jmp	#LR__1851
14a58                 | LR__1850
14a58     00 26 06 F6 | 	mov	local05, #0
14a5c                 | LR__1851
14a5c     01 28 66 F6 | 	neg	local06, #1
14a60     3F 2A 06 F6 | 	mov	local07, #63
14a64     00 2C 06 F6 | 	mov	local08, #0
14a68     04 E8 05 F1 | 	add	ptr___system__dat__, #4
14a6c     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
14a70     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
14a74                 | LR__1852
14a74     08 2E 16 F4 | 	testb	local09, #8 wc
14a78     09 2E 76 F4 | 	testbn	local09, #9 andc
14a7c     0A 2E 46 F0 | 	shr	local09, #10
14a80     01 2C 06 C6 |  if_b	mov	local08, #1
14a84     40 7E 6C 3D |  if_ae	testp	#63 wz
14a88     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
14a8c     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
14a90     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
14a94                 | LR__1853
14a94     00 20 06 F6 | 	mov	local02, #0
14a98     00 2C 0E F2 | 	cmp	local08, #0 wz
14a9c     01 20 66 56 |  if_ne	neg	local02, #1
14aa0     00 30 06 F6 | 	mov	local10, #0
14aa4     00 22 06 F6 | 	mov	local03, #0
14aa8     00 1E 0E F2 | 	cmp	local01, #0 wz
14aac     01 22 66 56 |  if_ne	neg	local03, #1
14ab0     00 24 06 F6 | 	mov	local04, #0
14ab4     00 32 06 F6 | 	mov	local11, #0
14ab8     1A FA 61 FD | 	getct	result1
14abc     FD 34 02 F6 | 	mov	local12, result1
14ac0     1A 37 02 F6 | 	mov	local13, local12
14ac4     13 37 82 F1 | 	sub	local13, local05
14ac8     00 36 56 F2 | 	cmps	local13, #0 wc
14acc     00 32 26 C6 |  if_b	not	local11, #0
14ad0     00 32 0E F2 | 	cmp	local11, #0 wz
14ad4     00 24 26 56 |  if_ne	not	local04, #0
14ad8     12 23 CA F7 | 	test	local03, local04 wz
14adc     00 30 26 56 |  if_ne	not	local10, #0
14ae0     18 21 4A F5 | 	or	local02, local10 wz
14ae4     8C FF 9F AD |  if_e	jmp	#LR__1852
14ae8     00 2C 0E F2 | 	cmp	local08, #0 wz
14aec     17 29 02 56 |  if_ne	mov	local06, local09
14af0     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
14af4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
14af8     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
14afc     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
14b00     14 FB 01 F6 | 	mov	result1, local06
14b04     A7 F0 03 F6 | 	mov	ptra, fp
14b08     B2 00 A0 FD | 	call	#popregs_
14b0c                 | __system___rxraw_ret
14b0c     2D 00 64 FD | 	ret
14b10                 | 
14b10                 | __system___getus
14b10     1A FC 71 FD | 	getct	result2 wc
14b14     1A 00 62 FD | 	getct	_var01
14b18     10 E8 05 F1 | 	add	ptr___system__dat__, #16
14b1c     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
14b20     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
14b24     20 00 90 5D |  if_ne	jmp	#LR__1860
14b28     14 02 06 FB | 	rdlong	_var02, #20
14b2c     A1 07 00 FF 
14b30     40 02 16 FD | 	qdiv	_var02, ##1000000
14b34     10 E8 05 F1 | 	add	ptr___system__dat__, #16
14b38     18 FA 61 FD | 	getqx	result1
14b3c     FD 02 02 F6 | 	mov	_var02, result1
14b40     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
14b44     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
14b48                 | LR__1860
14b48     01 FD 11 FD | 	qdiv	result2, _var02
14b4c     19 FC 61 FD | 	getqy	result2
14b50     28 FC 61 FD | 	setq	result2
14b54     01 01 12 FD | 	qdiv	_var01, _var02
14b58     18 FA 61 FD | 	getqx	result1
14b5c                 | __system___getus_ret
14b5c     2D 00 64 FD | 	ret
14b60                 | 
14b60                 | __system____builtin_memmove
14b60     09 01 02 F6 | 	mov	_var01, arg01
14b64     0A 13 52 F2 | 	cmps	arg01, arg02 wc
14b68     10 00 90 CD |  if_b	jmp	#LR__1870
14b6c     0A 03 02 F6 | 	mov	_var02, arg02
14b70     0B 03 02 F1 | 	add	_var02, arg03
14b74     01 13 52 F2 | 	cmps	arg01, _var02 wc
14b78     48 00 90 CD |  if_b	jmp	#LR__1876
14b7c                 | LR__1870
14b7c     0B 05 02 F6 | 	mov	_var03, arg03
14b80     02 04 4E F0 | 	shr	_var03, #2 wz
14b84     18 00 90 AD |  if_e	jmp	#LR__1875
14b88     97 0A 48 FB | 	callpa	#(@LR__1873-@LR__1871)>>2,fcache_load_ptr_
14b8c                 | LR__1871
14b8c     02 09 D8 FC | 	rep	@LR__1874, _var03
14b90                 | LR__1872
14b90     0A 05 02 FB | 	rdlong	_var03, arg02
14b94     09 05 62 FC | 	wrlong	_var03, arg01
14b98     04 12 06 F1 | 	add	arg01, #4
14b9c     04 14 06 F1 | 	add	arg02, #4
14ba0                 | LR__1873
14ba0                 | LR__1874
14ba0                 | LR__1875
14ba0     02 16 CE F7 | 	test	arg03, #2 wz
14ba4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
14ba8     09 03 52 5C |  if_ne	wrword	_var02, arg01
14bac     02 12 06 51 |  if_ne	add	arg01, #2
14bb0     02 14 06 51 |  if_ne	add	arg02, #2
14bb4     01 16 CE F7 | 	test	arg03, #1 wz
14bb8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
14bbc     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
14bc0     28 00 90 FD | 	jmp	#LR__1882
14bc4                 | LR__1876
14bc4     0B 13 02 F1 | 	add	arg01, arg03
14bc8     0B 15 02 F1 | 	add	arg02, arg03
14bcc     0B 07 0A F6 | 	mov	_var04, arg03 wz
14bd0     18 00 90 AD |  if_e	jmp	#LR__1881
14bd4     97 0A 48 FB | 	callpa	#(@LR__1879-@LR__1877)>>2,fcache_load_ptr_
14bd8                 | LR__1877
14bd8     03 09 D8 FC | 	rep	@LR__1880, _var04
14bdc                 | LR__1878
14bdc     01 12 86 F1 | 	sub	arg01, #1
14be0     01 14 86 F1 | 	sub	arg02, #1
14be4     0A 03 C2 FA | 	rdbyte	_var02, arg02
14be8     09 03 42 FC | 	wrbyte	_var02, arg01
14bec                 | LR__1879
14bec                 | LR__1880
14bec                 | LR__1881
14bec                 | LR__1882
14bec     00 FB 01 F6 | 	mov	result1, _var01
14bf0                 | __system____builtin_memmove_ret
14bf0     2D 00 64 FD | 	ret
14bf4                 | 
14bf4                 | __system____builtin_strcpy
14bf4     09 01 02 F6 | 	mov	_var01, arg01
14bf8     97 0A 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
14bfc                 | LR__1890
14bfc     0A FB C9 FA | 	rdbyte	result1, arg02 wz
14c00     09 FB 41 FC | 	wrbyte	result1, arg01
14c04     01 14 06 F1 | 	add	arg02, #1
14c08     01 12 06 F1 | 	add	arg01, #1
14c0c     EC FF 9F 5D |  if_ne	jmp	#LR__1890
14c10                 | LR__1891
14c10     00 FB 01 F6 | 	mov	result1, _var01
14c14                 | __system____builtin_strcpy_ret
14c14     2D 00 64 FD | 	ret
14c18                 | 
14c18                 | __system____topofstack
14c18     00 4A 05 F6 | 	mov	COUNT_, #0
14c1c     A8 00 A0 FD | 	call	#pushregs_
14c20     08 F0 07 F1 | 	add	ptra, #8
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 12 62 FC | 	wrlong	arg01, fp
14c2c     A7 FA 01 F6 | 	mov	result1, fp
14c30     04 4E 85 F1 | 	sub	fp, #4
14c34     A7 F0 03 F6 | 	mov	ptra, fp
14c38     B2 00 A0 FD | 	call	#popregs_
14c3c                 | __system____topofstack_ret
14c3c     2D 00 64 FD | 	ret
14c40                 | 
14c40                 | __system___lockmem
14c40     00 FA 05 F6 | 	mov	result1, #0
14c44     01 FA 61 FD | 	cogid	result1
14c48     00 FB 05 F1 | 	add	result1, #256
14c4c                 | LR__1900
14c4c     09 01 0A FB | 	rdlong	_var01, arg01 wz
14c50     09 FB 61 AC |  if_e	wrlong	result1, arg01
14c54     09 01 02 AB |  if_e	rdlong	_var01, arg01
14c58     09 01 02 AB |  if_e	rdlong	_var01, arg01
14c5c     FD 00 0A F2 | 	cmp	_var01, result1 wz
14c60     E8 FF 9F 5D |  if_ne	jmp	#LR__1900
14c64                 | __system___lockmem_ret
14c64     2D 00 64 FD | 	ret
14c68                 | 
14c68                 | __system___string_cmp
14c68     97 14 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
14c6c                 | LR__1910
14c6c     09 01 C2 FA | 	rdbyte	_var01, arg01
14c70     0A 03 C2 FA | 	rdbyte	_var02, arg02
14c74     00 05 02 F6 | 	mov	_var03, _var01
14c78     01 05 8A F1 | 	sub	_var03, _var02 wz
14c7c     01 12 06 F1 | 	add	arg01, #1
14c80     01 14 06 F1 | 	add	arg02, #1
14c84     0C 00 90 5D |  if_ne	jmp	#LR__1912
14c88     00 00 0E F2 | 	cmp	_var01, #0 wz
14c8c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
14c90     D8 FF 9F 5D |  if_ne	jmp	#LR__1910
14c94                 | LR__1911
14c94                 | LR__1912
14c94     02 FB 01 F6 | 	mov	result1, _var03
14c98                 | __system___string_cmp_ret
14c98     2D 00 64 FD | 	ret
14c9c                 | 
14c9c                 | __system___string_concat
14c9c     05 4A 05 F6 | 	mov	COUNT_, #5
14ca0     A8 00 A0 FD | 	call	#pushregs_
14ca4     09 1F 02 F6 | 	mov	local01, arg01
14ca8     0A 21 02 F6 | 	mov	local02, arg02
14cac     0F 13 02 F6 | 	mov	arg01, local01
14cb0     09 23 02 F6 | 	mov	local03, arg01
14cb4     97 06 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
14cb8                 | LR__1920
14cb8     11 FB C9 FA | 	rdbyte	result1, local03 wz
14cbc     01 22 06 51 |  if_ne	add	local03, #1
14cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__1920
14cc4                 | LR__1921
14cc4     09 23 82 F1 | 	sub	local03, arg01
14cc8     11 25 02 F6 | 	mov	local04, local03
14ccc     10 13 02 F6 | 	mov	arg01, local02
14cd0     09 23 02 F6 | 	mov	local03, arg01
14cd4     97 06 48 FB | 	callpa	#(@LR__1923-@LR__1922)>>2,fcache_load_ptr_
14cd8                 | LR__1922
14cd8     11 FB C9 FA | 	rdbyte	result1, local03 wz
14cdc     01 22 06 51 |  if_ne	add	local03, #1
14ce0     F4 FF 9F 5D |  if_ne	jmp	#LR__1922
14ce4                 | LR__1923
14ce4     09 23 82 F1 | 	sub	local03, arg01
14ce8     12 13 02 F6 | 	mov	arg01, local04
14cec     11 13 02 F1 | 	add	arg01, local03
14cf0     01 12 06 F1 | 	add	arg01, #1
14cf4     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
14cf8     FD 26 0A F6 | 	mov	local05, result1 wz
14cfc     28 00 90 AD |  if_e	jmp	#LR__1924
14d00     13 13 02 F6 | 	mov	arg01, local05
14d04     0F 15 02 F6 | 	mov	arg02, local01
14d08     12 17 02 F6 | 	mov	arg03, local04
14d0c     50 FE BF FD | 	call	#__system____builtin_memmove
14d10     13 13 02 F6 | 	mov	arg01, local05
14d14     12 13 02 F1 | 	add	arg01, local04
14d18     01 22 06 F1 | 	add	local03, #1
14d1c     10 15 02 F6 | 	mov	arg02, local02
14d20     11 17 02 F6 | 	mov	arg03, local03
14d24     38 FE BF FD | 	call	#__system____builtin_memmove
14d28                 | LR__1924
14d28     13 FB 01 F6 | 	mov	result1, local05
14d2c     A7 F0 03 F6 | 	mov	ptra, fp
14d30     B2 00 A0 FD | 	call	#popregs_
14d34                 | __system___string_concat_ret
14d34     2D 00 64 FD | 	ret
14d38                 | 
14d38                 | __system___tx
14d38     02 4A 05 F6 | 	mov	COUNT_, #2
14d3c     A8 00 A0 FD | 	call	#pushregs_
14d40     09 1F 02 F6 | 	mov	local01, arg01
14d44     0A 1E 0E F2 | 	cmp	local01, #10 wz
14d48     18 00 90 5D |  if_ne	jmp	#LR__1930
14d4c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
14d50     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
14d54     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
14d58     02 20 CE F7 | 	test	local02, #2 wz
14d5c     0D 12 06 56 |  if_ne	mov	arg01, #13
14d60     70 FC BF 5D |  if_ne	call	#__system___txraw
14d64                 | LR__1930
14d64     0F 13 02 F6 | 	mov	arg01, local01
14d68     68 FC BF FD | 	call	#__system___txraw
14d6c     A7 F0 03 F6 | 	mov	ptra, fp
14d70     B2 00 A0 FD | 	call	#popregs_
14d74                 | __system___tx_ret
14d74     2D 00 64 FD | 	ret
14d78                 | 
14d78                 | __system___rx
14d78     01 4A 05 F6 | 	mov	COUNT_, #1
14d7c     A8 00 A0 FD | 	call	#pushregs_
14d80                 | LR__1940
14d80     00 12 06 F6 | 	mov	arg01, #0
14d84     8C FC BF FD | 	call	#__system___rxraw
14d88     FD 1E 02 F6 | 	mov	local01, result1
14d8c     FF FF 7F FF 
14d90     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
14d94     E8 FF 9F AD |  if_e	jmp	#LR__1940
14d98     0D 1E 0E F2 | 	cmp	local01, #13 wz
14d9c     14 00 90 5D |  if_ne	jmp	#LR__1941
14da0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
14da4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14da8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
14dac     02 FA CD F7 | 	test	result1, #2 wz
14db0     0A 1E 06 56 |  if_ne	mov	local01, #10
14db4                 | LR__1941
14db4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
14db8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
14dbc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
14dc0     01 12 CE F7 | 	test	arg01, #1 wz
14dc4     1C 00 90 AD |  if_e	jmp	#LR__1944
14dc8     7F 1E 0E F2 | 	cmp	local01, #127 wz
14dcc     0C 00 90 5D |  if_ne	jmp	#LR__1942
14dd0     08 12 06 F6 | 	mov	arg01, #8
14dd4     60 FF BF FD | 	call	#__system___tx
14dd8     08 00 90 FD | 	jmp	#LR__1943
14ddc                 | LR__1942
14ddc     0F 13 02 F6 | 	mov	arg01, local01
14de0     54 FF BF FD | 	call	#__system___tx
14de4                 | LR__1943
14de4                 | LR__1944
14de4     0F FB 01 F6 | 	mov	result1, local01
14de8     A7 F0 03 F6 | 	mov	ptra, fp
14dec     B2 00 A0 FD | 	call	#popregs_
14df0                 | __system___rx_ret
14df0     2D 00 64 FD | 	ret
14df4                 | 
14df4                 | __system___pinwrite
14df4     09 01 02 F6 | 	mov	_var01, arg01
14df8     1F 00 06 F5 | 	and	_var01, #31
14dfc     20 12 CE F7 | 	test	arg01, #32 wz
14e00     06 12 46 F0 | 	shr	arg01, #6
14e04     09 13 CA F9 | 	bmask	arg01, arg01
14e08     00 13 62 F0 | 	shl	arg01, _var01
14e0c     00 15 62 F0 | 	shl	arg02, _var01
14e10     1C 00 90 AD |  if_e	jmp	#LR__1950
14e14     09 F7 43 F5 | 	or	dirb, arg01
14e18     FD 01 02 F6 | 	mov	_var01, outb
14e1c     09 01 22 F5 | 	andn	_var01, arg01
14e20     09 15 02 F5 | 	and	arg02, arg01
14e24     0A 01 42 F5 | 	or	_var01, arg02
14e28     00 FB 03 F6 | 	mov	outb, _var01
14e2c     18 00 90 FD | 	jmp	#LR__1951
14e30                 | LR__1950
14e30     09 F5 43 F5 | 	or	dira, arg01
14e34     FC 01 02 F6 | 	mov	_var01, outa
14e38     09 01 22 F5 | 	andn	_var01, arg01
14e3c     09 15 02 F5 | 	and	arg02, arg01
14e40     0A 01 42 F5 | 	or	_var01, arg02
14e44     00 F9 03 F6 | 	mov	outa, _var01
14e48                 | LR__1951
14e48                 | __system___pinwrite_ret
14e48     2D 00 64 FD | 	ret
14e4c                 | 
14e4c                 | __system___basic_read_line
14e4c     06 4A 05 F6 | 	mov	COUNT_, #6
14e50     A8 00 A0 FD | 	call	#pushregs_
14e54     09 1F 02 F6 | 	mov	local01, arg01
14e58     00 20 06 F6 | 	mov	local02, #0
14e5c     18 22 06 F6 | 	mov	local03, #24
14e60     00 24 06 F6 | 	mov	local04, #0
14e64     18 12 06 F6 | 	mov	arg01, #24
14e68     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
14e6c     FD 26 0A F6 | 	mov	local05, result1 wz
14e70     13 FB 01 A6 |  if_e	mov	result1, local05
14e74     B0 00 90 AD |  if_e	jmp	#LR__1963
14e78                 | LR__1960
14e78     0F 13 02 F6 | 	mov	arg01, local01
14e7c     78 0B B0 FD | 	call	#__system___basic_get_char
14e80     FD 28 02 F6 | 	mov	local06, result1
14e84     01 28 56 F2 | 	cmps	local06, #1 wc
14e88     8C 00 90 CD |  if_b	jmp	#LR__1962
14e8c     0A 28 0E F2 | 	cmp	local06, #10 wz
14e90     10 00 90 5D |  if_ne	jmp	#LR__1961
14e94     00 24 0E F2 | 	cmp	local04, #0 wz
14e98     01 20 56 52 |  if_ne	cmps	local02, #1 wc
14e9c     01 20 86 11 |  if_a	sub	local02, #1
14ea0     74 00 90 FD | 	jmp	#LR__1962
14ea4                 | LR__1961
14ea4     0D 28 0E F2 | 	cmp	local06, #13 wz
14ea8     01 24 06 A6 |  if_e	mov	local04, #1
14eac     00 24 06 56 |  if_ne	mov	local04, #0
14eb0     08 28 0E F2 | 	cmp	local06, #8 wz
14eb4     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
14eb8     01 20 56 A2 |  if_e	cmps	local02, #1 wc
14ebc     01 20 86 21 |  if_nc_and_z	sub	local02, #1
14ec0     B4 FF 9F AD |  if_e	jmp	#LR__1960
14ec4     13 17 02 F6 | 	mov	arg03, local05
14ec8     10 17 02 F1 | 	add	arg03, local02
14ecc     0B 29 42 FC | 	wrbyte	local06, arg03
14ed0     01 20 06 F1 | 	add	local02, #1
14ed4     11 21 0A F2 | 	cmp	local02, local03 wz
14ed8     9C FF 9F 5D |  if_ne	jmp	#LR__1960
14edc     11 13 02 F6 | 	mov	arg01, local03
14ee0     20 12 06 F1 | 	add	arg01, #32
14ee4     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
14ee8     FD 28 0A F6 | 	mov	local06, result1 wz
14eec     14 FB 01 A6 |  if_e	mov	result1, local06
14ef0     34 00 90 AD |  if_e	jmp	#LR__1963
14ef4     14 13 02 F6 | 	mov	arg01, local06
14ef8     13 15 02 F6 | 	mov	arg02, local05
14efc     11 17 02 F6 | 	mov	arg03, local03
14f00     5C FC BF FD | 	call	#__system____builtin_memmove
14f04     20 22 06 F1 | 	add	local03, #32
14f08     13 13 02 F6 | 	mov	arg01, local05
14f0c     D4 38 B0 FD | 	call	#__system___gc_free
14f10     14 27 02 F6 | 	mov	local05, local06
14f14     60 FF 9F FD | 	jmp	#LR__1960
14f18                 | LR__1962
14f18     13 29 02 F6 | 	mov	local06, local05
14f1c     10 29 02 F1 | 	add	local06, local02
14f20     14 01 48 FC | 	wrbyte	#0, local06
14f24     13 FB 01 F6 | 	mov	result1, local05
14f28                 | LR__1963
14f28     A7 F0 03 F6 | 	mov	ptra, fp
14f2c     B2 00 A0 FD | 	call	#popregs_
14f30                 | __system___basic_read_line_ret
14f30     2D 00 64 FD | 	ret
14f34                 | 
14f34                 | __system___waitms
14f34     09 01 02 F6 | 	mov	_var01, arg01
14f38     1A 02 62 FD | 	getct	_var02
14f3c     14 04 06 FB | 	rdlong	_var03, #20
14f40     97 14 48 FB | 	callpa	#(@LR__1971-@LR__1970)>>2,fcache_load_ptr_
14f44                 | LR__1970
14f44     01 00 00 FF 
14f48     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
14f4c     1C 00 90 CD |  if_b	jmp	#LR__1972
14f50     02 03 02 F1 | 	add	_var02, _var03
14f54     01 13 02 F6 | 	mov	arg01, _var02
14f58     00 12 66 FA | 	addct1	arg01, #0
14f5c     24 22 60 FD | 	waitct1
14f60     01 00 00 FF 
14f64     E8 01 86 F1 | 	sub	_var01, ##1000
14f68     D8 FF 9F FD | 	jmp	#LR__1970
14f6c                 | LR__1971
14f6c                 | LR__1972
14f6c     01 00 56 F2 | 	cmps	_var01, #1 wc
14f70     28 00 90 CD |  if_b	jmp	#LR__1973
14f74     02 01 02 FD | 	qmul	_var01, _var03
14f78     01 00 00 FF 
14f7c     E8 17 06 F6 | 	mov	arg03, ##1000
14f80     19 FA 61 FD | 	getqy	result1
14f84     18 12 62 FD | 	getqx	arg01
14f88     28 FA 61 FD | 	setq	result1
14f8c     0B 13 12 FD | 	qdiv	arg01, arg03
14f90     18 12 62 FD | 	getqx	arg01
14f94     01 13 62 FA | 	addct1	arg01, _var02
14f98     24 22 60 FD | 	waitct1
14f9c                 | LR__1973
14f9c                 | __system___waitms_ret
14f9c     2D 00 64 FD | 	ret
14fa0                 | 
14fa0                 | __system___waitus
14fa0     09 01 02 F6 | 	mov	_var01, arg01
14fa4     1A 02 62 FD | 	getct	_var02
14fa8     14 04 06 FB | 	rdlong	_var03, #20
14fac     97 14 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
14fb0                 | LR__1980
14fb0     A1 07 00 FF 
14fb4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
14fb8     1C 00 90 CD |  if_b	jmp	#LR__1982
14fbc     02 03 02 F1 | 	add	_var02, _var03
14fc0     01 13 02 F6 | 	mov	arg01, _var02
14fc4     00 12 66 FA | 	addct1	arg01, #0
14fc8     24 22 60 FD | 	waitct1
14fcc     A1 07 00 FF 
14fd0     40 00 86 F1 | 	sub	_var01, ##1000000
14fd4     D8 FF 9F FD | 	jmp	#LR__1980
14fd8                 | LR__1981
14fd8                 | LR__1982
14fd8     01 00 56 F2 | 	cmps	_var01, #1 wc
14fdc     28 00 90 CD |  if_b	jmp	#LR__1983
14fe0     02 01 02 FD | 	qmul	_var01, _var03
14fe4     A1 07 00 FF 
14fe8     40 16 06 F6 | 	mov	arg03, ##1000000
14fec     19 FA 61 FD | 	getqy	result1
14ff0     18 12 62 FD | 	getqx	arg01
14ff4     28 FA 61 FD | 	setq	result1
14ff8     0B 13 12 FD | 	qdiv	arg01, arg03
14ffc     18 FA 61 FD | 	getqx	result1
15000     FD 02 62 FA | 	addct1	_var02, result1
15004     24 22 60 FD | 	waitct1
15008                 | LR__1983
15008                 | __system___waitus_ret
15008     2D 00 64 FD | 	ret
1500c                 | 
1500c                 | __system___mount
1500c     0B 4A 05 F6 | 	mov	COUNT_, #11
15010     A8 00 A0 FD | 	call	#pushregs_
15014     09 1F 02 F6 | 	mov	local01, arg01
15018     0A 21 0A F6 | 	mov	local02, arg02 wz
1501c     01 22 66 F6 | 	neg	local03, #1
15020     01 FA 65 A6 |  if_e	neg	result1, #1
15024     98 02 90 AD |  if_e	jmp	#LR__2005
15028     0F FB C1 FA | 	rdbyte	result1, local01
1502c     2F FA 0D F2 | 	cmp	result1, #47 wz
15030     28 00 90 5D |  if_ne	jmp	#LR__1992
15034     0F 13 02 F6 | 	mov	arg01, local01
15038     09 25 02 F6 | 	mov	local04, arg01
1503c     97 06 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
15040                 | LR__1990
15040     12 FB C9 FA | 	rdbyte	result1, local04 wz
15044     01 24 06 51 |  if_ne	add	local04, #1
15048     F4 FF 9F 5D |  if_ne	jmp	#LR__1990
1504c                 | LR__1991
1504c     09 25 82 F1 | 	sub	local04, arg01
15050     12 FB 01 F6 | 	mov	result1, local04
15054     10 FA 55 F2 | 	cmps	result1, #16 wc
15058     14 00 90 CD |  if_b	jmp	#LR__1993
1505c                 | LR__1992
1505c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15060     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15064     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15068     01 FA 65 F6 | 	neg	result1, #1
1506c     50 02 90 FD | 	jmp	#LR__2005
15070                 | LR__1993
15070     00 26 06 F6 | 	mov	local05, #0
15074                 | LR__1994
15074     04 26 56 F2 | 	cmps	local05, #4 wc
15078     B0 00 90 3D |  if_ae	jmp	#LR__1999
1507c     13 13 02 F6 | 	mov	arg01, local05
15080     02 12 66 F0 | 	shl	arg01, #2
15084     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15088     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1508c     09 FB 09 FB | 	rdlong	result1, arg01 wz
15090     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15094     00 22 56 A2 |  if_e	cmps	local03, #0 wc
15098     13 23 02 86 |  if_c_and_z	mov	local03, local05
1509c     84 00 90 8D |  if_c_and_z	jmp	#LR__1998
150a0     13 13 02 F6 | 	mov	arg01, local05
150a4     02 12 66 F0 | 	shl	arg01, #2
150a8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
150ac     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
150b0     09 13 02 FB | 	rdlong	arg01, arg01
150b4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
150b8     09 25 02 F6 | 	mov	local04, arg01
150bc     97 06 48 FB | 	callpa	#(@LR__1996-@LR__1995)>>2,fcache_load_ptr_
150c0                 | LR__1995
150c0     12 FB C9 FA | 	rdbyte	result1, local04 wz
150c4     01 24 06 51 |  if_ne	add	local04, #1
150c8     F4 FF 9F 5D |  if_ne	jmp	#LR__1995
150cc                 | LR__1996
150cc     09 25 82 F1 | 	sub	local04, arg01
150d0     12 29 02 F6 | 	mov	local06, local04
150d4     14 13 02 F6 | 	mov	arg01, local06
150d8     0F 13 02 F1 | 	add	arg01, local01
150dc     09 FB C1 FA | 	rdbyte	result1, arg01
150e0     2F FA 0D F2 | 	cmp	result1, #47 wz
150e4     14 2B 02 56 |  if_ne	mov	local07, local06
150e8     0F 2B 02 51 |  if_ne	add	local07, local01
150ec     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
150f0     30 00 90 5D |  if_ne	jmp	#LR__1997
150f4     13 17 02 F6 | 	mov	arg03, local05
150f8     02 16 66 F0 | 	shl	arg03, #2
150fc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15100     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15104     0B 15 02 FB | 	rdlong	arg02, arg03
15108     0F 13 02 F6 | 	mov	arg01, local01
1510c     14 17 02 F6 | 	mov	arg03, local06
15110     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15114     D4 49 B0 FD | 	call	#__system__strncmp
15118     00 FA 0D F2 | 	cmp	result1, #0 wz
1511c     13 23 02 A6 |  if_e	mov	local03, local05
15120     08 00 90 AD |  if_e	jmp	#LR__1999
15124                 | LR__1997
15124                 | LR__1998
15124     01 26 06 F1 | 	add	local05, #1
15128     48 FF 9F FD | 	jmp	#LR__1994
1512c                 | LR__1999
1512c     FF FF 7F FF 
15130     FF 23 0E F2 | 	cmp	local03, ##-1 wz
15134     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
15138     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1513c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
15140     01 FA 65 A6 |  if_e	neg	result1, #1
15144     78 01 90 AD |  if_e	jmp	#LR__2005
15148     11 27 02 F6 | 	mov	local05, local03
1514c     13 2B 02 F6 | 	mov	local07, local05
15150     02 2A 66 F0 | 	shl	local07, #2
15154     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15158     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
1515c     15 29 0A FB | 	rdlong	local06, local07 wz
15160     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15164     58 00 90 AD |  if_e	jmp	#LR__2000
15168     4C 28 06 F1 | 	add	local06, #76
1516c     14 2B 0A FB | 	rdlong	local07, local06 wz
15170     4C 28 86 F1 | 	sub	local06, #76
15174     48 00 90 AD |  if_e	jmp	#LR__2000
15178     4C 28 06 F1 | 	add	local06, #76
1517c     14 2B 02 FB | 	rdlong	local07, local06
15180     15 23 02 F6 | 	mov	local03, local07
15184     13 2A 46 F7 | 	zerox	local07, #19
15188     14 22 46 F0 | 	shr	local03, #20
1518c     02 22 66 F0 | 	shl	local03, #2
15190     ED 22 02 F1 | 	add	local03, __methods__
15194     11 23 02 FB | 	rdlong	local03, local03
15198     13 29 02 F6 | 	mov	local06, local05
1519c     02 28 66 F0 | 	shl	local06, #2
151a0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
151a4     F4 28 02 F1 | 	add	local06, ptr___system__dat__
151a8     14 13 02 FB | 	rdlong	arg01, local06
151ac     F2 28 02 F6 | 	mov	local06, objptr
151b0     15 E5 01 F6 | 	mov	objptr, local07
151b4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
151b8     2D 22 62 FD | 	call	local03
151bc     14 E5 01 F6 | 	mov	objptr, local06
151c0                 | LR__2000
151c0     13 2D 02 F6 | 	mov	local08, local05
151c4     02 2C 66 F0 | 	shl	local08, #2
151c8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
151cc     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
151d0     16 21 62 FC | 	wrlong	local02, local08
151d4     00 20 0E F2 | 	cmp	local02, #0 wz
151d8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
151dc     18 00 90 5D |  if_ne	jmp	#LR__2001
151e0     02 26 66 F0 | 	shl	local05, #2
151e4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
151e8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
151ec     13 01 68 FC | 	wrlong	#0, local05
151f0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
151f4     C4 00 90 FD | 	jmp	#LR__2004
151f8                 | LR__2001
151f8     13 2F 02 F6 | 	mov	local09, local05
151fc     04 2E 66 F0 | 	shl	local09, #4
15200     24 E8 05 F1 | 	add	ptr___system__dat__, #36
15204     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
15208     17 13 02 F6 | 	mov	arg01, local09
1520c     0F 15 02 F6 | 	mov	arg02, local01
15210     10 16 06 F6 | 	mov	arg03, #16
15214     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
15218     24 48 B0 FD | 	call	#__system__strncpy
1521c     48 20 06 F1 | 	add	local02, #72
15220     10 2D 0A FB | 	rdlong	local08, local02 wz
15224     48 20 86 F1 | 	sub	local02, #72
15228     7C 00 90 AD |  if_e	jmp	#LR__2003
1522c     48 20 06 F1 | 	add	local02, #72
15230     10 2D 02 FB | 	rdlong	local08, local02
15234     16 31 02 F6 | 	mov	local10, local08
15238     13 2C 46 F7 | 	zerox	local08, #19
1523c     14 30 46 F0 | 	shr	local10, #20
15240     02 30 66 F0 | 	shl	local10, #2
15244     ED 30 02 F1 | 	add	local10, __methods__
15248     18 31 02 FB | 	rdlong	local10, local10
1524c     17 13 02 F6 | 	mov	arg01, local09
15250     F2 32 02 F6 | 	mov	local11, objptr
15254     16 E5 01 F6 | 	mov	objptr, local08
15258     2D 30 62 FD | 	call	local10
1525c     19 E5 01 F6 | 	mov	objptr, local11
15260     FD 12 0A F6 | 	mov	arg01, result1 wz
15264     40 00 90 AD |  if_e	jmp	#LR__2002
15268     13 2D 02 F6 | 	mov	local08, local05
1526c     02 2C 66 F0 | 	shl	local08, #2
15270     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15274     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15278     16 01 68 FC | 	wrlong	#0, local08
1527c     02 26 66 F0 | 	shl	local05, #2
15280     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15284     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15288     13 01 68 FC | 	wrlong	#0, local05
1528c     09 13 6A F6 | 	neg	arg01, arg01 wz
15290     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
15294     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
15298     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1529c     01 FA 65 56 |  if_ne	neg	result1, #1
152a0     00 FA 05 A6 |  if_e	mov	result1, #0
152a4     18 00 90 FD | 	jmp	#LR__2005
152a8                 | LR__2002
152a8                 | LR__2003
152a8     02 26 66 F0 | 	shl	local05, #2
152ac     64 E8 05 F1 | 	add	ptr___system__dat__, #100
152b0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
152b4     13 2F 62 FC | 	wrlong	local09, local05
152b8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
152bc                 | LR__2004
152bc     00 FA 05 F6 | 	mov	result1, #0
152c0                 | LR__2005
152c0     A7 F0 03 F6 | 	mov	ptra, fp
152c4     B2 00 A0 FD | 	call	#popregs_
152c8                 | __system___mount_ret
152c8     2D 00 64 FD | 	ret
152cc                 | 
152cc                 | __system___chdir
152cc     00 4A 05 F6 | 	mov	COUNT_, #0
152d0     A8 00 A0 FD | 	call	#pushregs_
152d4     40 F0 07 F1 | 	add	ptra, #64
152d8     04 4E 05 F1 | 	add	fp, #4
152dc     A7 12 62 FC | 	wrlong	arg01, fp
152e0     04 4E 05 F1 | 	add	fp, #4
152e4     A7 14 02 F6 | 	mov	arg02, fp
152e8     08 4E 85 F1 | 	sub	fp, #8
152ec     30 44 B0 FD | 	call	#__system__stat
152f0     3C 4E 05 F1 | 	add	fp, #60
152f4     A7 FA 61 FC | 	wrlong	result1, fp
152f8     3C 4E 85 F1 | 	sub	fp, #60
152fc     00 FA 0D F2 | 	cmp	result1, #0 wz
15300     3C 4E 05 51 |  if_ne	add	fp, #60
15304     A7 FA 01 5B |  if_ne	rdlong	result1, fp
15308     3C 4E 85 51 |  if_ne	sub	fp, #60
1530c     BC 00 90 5D |  if_ne	jmp	#LR__2012
15310     10 4E 05 F1 | 	add	fp, #16
15314     A7 12 02 FB | 	rdlong	arg01, fp
15318     10 4E 85 F1 | 	sub	fp, #16
1531c     78 00 00 FF 
15320     00 12 06 F5 | 	and	arg01, ##61440
15324     08 00 00 FF 
15328     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1532c     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
15330     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
15334     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
15338     01 FA 65 56 |  if_ne	neg	result1, #1
1533c     8C 00 90 5D |  if_ne	jmp	#LR__2012
15340     04 4E 05 F1 | 	add	fp, #4
15344     A7 16 02 FB | 	rdlong	arg03, fp
15348     04 4E 85 F1 | 	sub	fp, #4
1534c     0B 17 C2 FA | 	rdbyte	arg03, arg03
15350     2F 16 0E F2 | 	cmp	arg03, #47 wz
15354     24 00 90 5D |  if_ne	jmp	#LR__2010
15358     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1535c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15360     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15364     04 4E 05 F1 | 	add	fp, #4
15368     A7 14 02 FB | 	rdlong	arg02, fp
1536c     04 4E 85 F1 | 	sub	fp, #4
15370     00 17 06 F6 | 	mov	arg03, #256
15374     C8 46 B0 FD | 	call	#__system__strncpy
15378     4C 00 90 FD | 	jmp	#LR__2011
1537c                 | LR__2010
1537c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
15380     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15384     38 4E 05 F1 | 	add	fp, #56
15388     A7 12 62 FC | 	wrlong	arg01, fp
1538c     38 4E 85 F1 | 	sub	fp, #56
15390     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
15394     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15398     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1539c     00 17 06 F6 | 	mov	arg03, #256
153a0     9C 46 B0 FD | 	call	#__system__strncpy
153a4     38 4E 05 F1 | 	add	fp, #56
153a8     A7 12 02 FB | 	rdlong	arg01, fp
153ac     34 4E 85 F1 | 	sub	fp, #52
153b0     A7 14 02 FB | 	rdlong	arg02, fp
153b4     04 4E 85 F1 | 	sub	fp, #4
153b8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
153bc     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
153c0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
153c4     10 00 B0 FD | 	call	#__system____getvfsforfile
153c8                 | LR__2011
153c8     00 FA 05 F6 | 	mov	result1, #0
153cc                 | LR__2012
153cc     A7 F0 03 F6 | 	mov	ptra, fp
153d0     B2 00 A0 FD | 	call	#popregs_
153d4                 | __system___chdir_ret
153d4     2D 00 64 FD | 	ret
153d8                 | 
153d8                 | __system____getvfsforfile
153d8     0E 4A 05 F6 | 	mov	COUNT_, #14
153dc     A8 00 A0 FD | 	call	#pushregs_
153e0     09 1F 02 F6 | 	mov	local01, arg01
153e4     0A 21 02 F6 | 	mov	local02, arg02
153e8     0B 23 02 F6 | 	mov	local03, arg03
153ec     97 10 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
153f0                 | LR__2020
153f0     10 FB C1 FA | 	rdbyte	result1, local02
153f4     2F FA 0D F2 | 	cmp	result1, #47 wz
153f8     01 20 06 A1 |  if_e	add	local02, #1
153fc     10 25 C2 AA |  if_e	rdbyte	local04, local02
15400     01 20 86 A1 |  if_e	sub	local02, #1
15404     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
15408     01 20 06 A1 |  if_e	add	local02, #1
1540c     E0 FF 9F AD |  if_e	jmp	#LR__2020
15410                 | LR__2021
15410     10 25 C2 FA | 	rdbyte	local04, local02
15414     2F 24 0E F2 | 	cmp	local04, #47 wz
15418     14 00 90 5D |  if_ne	jmp	#LR__2022
1541c     0F 13 02 F6 | 	mov	arg01, local01
15420     10 15 02 F6 | 	mov	arg02, local02
15424     00 17 06 F6 | 	mov	arg03, #256
15428     14 46 B0 FD | 	call	#__system__strncpy
1542c     7C 00 90 FD | 	jmp	#LR__2024
15430                 | LR__2022
15430     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15434     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15438     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1543c     0F 13 02 F6 | 	mov	arg01, local01
15440     00 17 06 F6 | 	mov	arg03, #256
15444     F8 45 B0 FD | 	call	#__system__strncpy
15448     10 25 CA FA | 	rdbyte	local04, local02 wz
1544c     5C 00 90 AD |  if_e	jmp	#LR__2023
15450     10 25 C2 FA | 	rdbyte	local04, local02
15454     2E 24 0E F2 | 	cmp	local04, #46 wz
15458     01 20 06 A1 |  if_e	add	local02, #1
1545c     10 27 C2 AA |  if_e	rdbyte	local05, local02
15460     01 20 86 A1 |  if_e	sub	local02, #1
15464     13 29 02 A6 |  if_e	mov	local06, local05
15468     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1546c     3C 00 90 AD |  if_e	jmp	#LR__2023
15470     0F 27 C2 FA | 	rdbyte	local05, local01
15474     2F 26 0E F2 | 	cmp	local05, #47 wz
15478     01 1E 06 A1 |  if_e	add	local01, #1
1547c     0F 25 C2 AA |  if_e	rdbyte	local04, local01
15480     01 1E 86 A1 |  if_e	sub	local01, #1
15484     00 24 4E A2 |  if_e	cmps	local04, #0 wz
15488     1F 01 00 5F 
1548c     0C 14 06 56 |  if_ne	mov	arg02, ##@LR__4050
15490     0F 13 02 56 |  if_ne	mov	arg01, local01
15494     00 17 06 56 |  if_ne	mov	arg03, #256
15498     F0 45 B0 5D |  if_ne	call	#__system__strncat
1549c     0F 13 02 F6 | 	mov	arg01, local01
154a0     10 15 02 F6 | 	mov	arg02, local02
154a4     00 17 06 F6 | 	mov	arg03, #256
154a8     E0 45 B0 FD | 	call	#__system__strncat
154ac                 | LR__2023
154ac                 | LR__2024
154ac     0F 13 02 F6 | 	mov	arg01, local01
154b0     98 47 B0 FD | 	call	#__system___normalizeName
154b4     0F 25 CA FA | 	rdbyte	local04, local01 wz
154b8     1C 00 90 AD |  if_e	jmp	#LR__2025
154bc     0F 25 C2 FA | 	rdbyte	local04, local01
154c0     2F 24 0E F2 | 	cmp	local04, #47 wz
154c4     01 1E 06 A1 |  if_e	add	local01, #1
154c8     0F 29 C2 AA |  if_e	rdbyte	local06, local01
154cc     01 1E 86 A1 |  if_e	sub	local01, #1
154d0     00 28 4E A2 |  if_e	cmps	local06, #0 wz
154d4     18 00 90 5D |  if_ne	jmp	#LR__2026
154d8                 | LR__2025
154d8     01 00 00 FF 
154dc     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
154e0     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
154e4     01 00 00 FF 
154e8     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
154ec     EC 01 90 FD | 	jmp	#LR__2040
154f0                 | LR__2026
154f0     00 2A 06 F6 | 	mov	local07, #0
154f4                 | LR__2027
154f4     04 2A 56 F2 | 	cmps	local07, #4 wc
154f8     CC 01 90 3D |  if_ae	jmp	#LR__2039
154fc     15 29 02 F6 | 	mov	local06, local07
15500     02 28 66 F0 | 	shl	local06, #2
15504     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15508     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1550c     14 29 0A FB | 	rdlong	local06, local06 wz
15510     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15514     A8 01 90 AD |  if_e	jmp	#LR__2038
15518     15 25 02 F6 | 	mov	local04, local07
1551c     02 24 66 F0 | 	shl	local04, #2
15520     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15524     F4 24 02 F1 | 	add	local04, ptr___system__dat__
15528     12 13 02 FB | 	rdlong	arg01, local04
1552c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15530     09 2D 02 F6 | 	mov	local08, arg01
15534     97 06 48 FB | 	callpa	#(@LR__2029-@LR__2028)>>2,fcache_load_ptr_
15538                 | LR__2028
15538     16 FB C9 FA | 	rdbyte	result1, local08 wz
1553c     01 2C 06 51 |  if_ne	add	local08, #1
15540     F4 FF 9F 5D |  if_ne	jmp	#LR__2028
15544                 | LR__2029
15544     09 2D 82 F1 | 	sub	local08, arg01
15548     16 2F 02 F6 | 	mov	local09, local08
1554c     17 25 02 F6 | 	mov	local04, local09
15550     0F 25 02 F1 | 	add	local04, local01
15554     12 29 C2 FA | 	rdbyte	local06, local04
15558     2F 28 0E F2 | 	cmp	local06, #47 wz
1555c     17 31 02 56 |  if_ne	mov	local10, local09
15560     0F 31 02 51 |  if_ne	add	local10, local01
15564     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
15568     54 01 90 5D |  if_ne	jmp	#LR__2037
1556c     15 17 02 F6 | 	mov	arg03, local07
15570     02 16 66 F0 | 	shl	arg03, #2
15574     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15578     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
1557c     0B 15 02 FB | 	rdlong	arg02, arg03
15580     17 17 02 F6 | 	mov	arg03, local09
15584     0F 13 02 F6 | 	mov	arg01, local01
15588     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1558c     5C 45 B0 FD | 	call	#__system__strncmp
15590     00 FA 4D F2 | 	cmps	result1, #0 wz
15594     28 01 90 5D |  if_ne	jmp	#LR__2037
15598     15 33 02 F6 | 	mov	local11, local07
1559c     02 32 66 F0 | 	shl	local11, #2
155a0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
155a4     F4 32 02 F1 | 	add	local11, ptr___system__dat__
155a8     19 35 02 FB | 	rdlong	local12, local11
155ac     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
155b0     97 22 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
155b4                 | LR__2030
155b4     17 29 02 F6 | 	mov	local06, local09
155b8     01 28 06 F1 | 	add	local06, #1
155bc     0F 29 02 F1 | 	add	local06, local01
155c0     14 33 C2 FA | 	rdbyte	local11, local06
155c4     2E 32 0E F2 | 	cmp	local11, #46 wz
155c8     2C 00 90 5D |  if_ne	jmp	#LR__2032
155cc     17 33 02 F6 | 	mov	local11, local09
155d0     02 32 06 F1 | 	add	local11, #2
155d4     0F 33 02 F1 | 	add	local11, local01
155d8     19 31 C2 FA | 	rdbyte	local10, local11
155dc     2F 30 0E F2 | 	cmp	local10, #47 wz
155e0     17 37 02 56 |  if_ne	mov	local13, local09
155e4     02 36 06 51 |  if_ne	add	local13, #2
155e8     0F 37 02 51 |  if_ne	add	local13, local01
155ec     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
155f0     01 2E 06 A1 |  if_e	add	local09, #1
155f4     BC FF 9F AD |  if_e	jmp	#LR__2030
155f8                 | LR__2031
155f8                 | LR__2032
155f8     00 22 0E F2 | 	cmp	local03, #0 wz
155fc     11 13 02 56 |  if_ne	mov	arg01, local03
15600     0F 15 02 56 |  if_ne	mov	arg02, local01
15604     00 17 06 56 |  if_ne	mov	arg03, #256
15608     34 44 B0 5D |  if_ne	call	#__system__strncpy
1560c     0F 15 02 F6 | 	mov	arg02, local01
15610     17 15 02 F1 | 	add	arg02, local09
15614     01 14 06 F1 | 	add	arg02, #1
15618     0F 13 02 F6 | 	mov	arg01, local01
1561c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
15620     0F 13 02 F6 | 	mov	arg01, local01
15624     09 2D 02 F6 | 	mov	local08, arg01
15628     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
1562c                 | LR__2033
1562c     16 FB C9 FA | 	rdbyte	result1, local08 wz
15630     01 2C 06 51 |  if_ne	add	local08, #1
15634     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
15638                 | LR__2034
15638     09 2D 82 F1 | 	sub	local08, arg01
1563c     16 2F 02 F6 | 	mov	local09, local08
15640                 | LR__2035
15640     01 2E 56 F2 | 	cmps	local09, #1 wc
15644     70 00 90 CD |  if_b	jmp	#LR__2036
15648     17 25 02 F6 | 	mov	local04, local09
1564c     0F 25 02 F1 | 	add	local04, local01
15650     12 33 C2 FA | 	rdbyte	local11, local04
15654     2F 32 0E F2 | 	cmp	local11, #47 wz
15658     17 33 02 A6 |  if_e	mov	local11, local09
1565c     0F 33 02 A1 |  if_e	add	local11, local01
15660     19 01 48 AC |  if_e	wrbyte	#0, local11
15664     01 2E 86 A1 |  if_e	sub	local09, #1
15668     D4 FF 9F AD |  if_e	jmp	#LR__2035
1566c     17 25 02 F6 | 	mov	local04, local09
15670     0F 25 02 F1 | 	add	local04, local01
15674     12 33 C2 FA | 	rdbyte	local11, local04
15678     2E 32 0E F2 | 	cmp	local11, #46 wz
1567c     38 00 90 5D |  if_ne	jmp	#LR__2036
15680     02 2E 56 F2 | 	cmps	local09, #2 wc
15684     30 00 90 CD |  if_b	jmp	#LR__2036
15688     17 39 02 F6 | 	mov	local14, local09
1568c     01 38 86 F1 | 	sub	local14, #1
15690     0F 39 02 F1 | 	add	local14, local01
15694     1C 27 C2 FA | 	rdbyte	local05, local14
15698     2F 26 0E F2 | 	cmp	local05, #47 wz
1569c     18 00 90 5D |  if_ne	jmp	#LR__2036
156a0     17 25 02 F6 | 	mov	local04, local09
156a4     01 24 86 F1 | 	sub	local04, #1
156a8     0F 25 02 F1 | 	add	local04, local01
156ac     12 01 48 FC | 	wrbyte	#0, local04
156b0     02 2E 86 F1 | 	sub	local09, #2
156b4     88 FF 9F FD | 	jmp	#LR__2035
156b8                 | LR__2036
156b8     1A FB 01 F6 | 	mov	result1, local12
156bc     1C 00 90 FD | 	jmp	#LR__2040
156c0                 | LR__2037
156c0                 | LR__2038
156c0     01 2A 06 F1 | 	add	local07, #1
156c4     2C FE 9F FD | 	jmp	#LR__2027
156c8                 | LR__2039
156c8     03 00 00 FF 
156cc     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
156d0     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
156d4     03 00 00 FF 
156d8     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
156dc                 | LR__2040
156dc     A7 F0 03 F6 | 	mov	ptra, fp
156e0     B2 00 A0 FD | 	call	#popregs_
156e4                 | __system____getvfsforfile_ret
156e4     2D 00 64 FD | 	ret
156e8                 | 
156e8                 | __system___basic_open
156e8     05 4A 05 F6 | 	mov	COUNT_, #5
156ec     A8 00 A0 FD | 	call	#pushregs_
156f0     0A 1F 02 F6 | 	mov	local01, arg02
156f4     0B 21 02 F6 | 	mov	local02, arg03
156f8     0C 23 02 F6 | 	mov	local03, arg04
156fc     00 24 06 F6 | 	mov	local04, #0
15700     14 43 B0 FD | 	call	#__system____getftab
15704     FD 26 0A F6 | 	mov	local05, result1 wz
15708     18 00 90 5D |  if_ne	jmp	#LR__2050
1570c     EE 12 02 F6 | 	mov	arg01, abortchain
15710     0C 14 06 F6 | 	mov	arg02, #12
15714     01 16 06 F6 | 	mov	arg03, #1
15718     DA 00 A0 FD | 	call	#__longjmp
1571c     01 FA 65 F6 | 	neg	result1, #1
15720     14 01 90 FD | 	jmp	#LR__2059
15724                 | LR__2050
15724     08 26 06 F1 | 	add	local05, #8
15728     13 FB 09 FB | 	rdlong	result1, local05 wz
1572c     08 26 86 F1 | 	sub	local05, #8
15730     13 13 02 56 |  if_ne	mov	arg01, local05
15734     70 3A B0 5D |  if_ne	call	#__system___closeraw
15738     00 1E 0E F2 | 	cmp	local01, #0 wz
1573c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
15740     00 22 0E A2 |  if_e	cmp	local03, #0 wz
15744     3C 00 90 AD |  if_e	jmp	#LR__2052
15748     0C 12 06 F6 | 	mov	arg01, #12
1574c     58 2F B0 FD | 	call	#__system___gc_alloc_managed
15750     FD 24 0A F6 | 	mov	local04, result1 wz
15754     18 00 90 5D |  if_ne	jmp	#LR__2051
15758     EE 12 02 F6 | 	mov	arg01, abortchain
1575c     07 14 06 F6 | 	mov	arg02, #7
15760     01 16 06 F6 | 	mov	arg03, #1
15764     DA 00 A0 FD | 	call	#__longjmp
15768     01 FA 65 F6 | 	neg	result1, #1
1576c     C8 00 90 FD | 	jmp	#LR__2059
15770                 | LR__2051
15770     12 01 68 FC | 	wrlong	#0, local04
15774     04 24 06 F1 | 	add	local04, #4
15778     12 01 68 FC | 	wrlong	#0, local04
1577c     04 24 86 F1 | 	sub	local04, #4
15780     13 25 62 FC | 	wrlong	local04, local05
15784                 | LR__2052
15784     00 1E 0E F2 | 	cmp	local01, #0 wz
15788     20 00 90 AD |  if_e	jmp	#LR__2053
1578c     12 1F 62 FC | 	wrlong	local01, local04
15790     12 FB 01 F6 | 	mov	result1, local04
15794     00 58 02 FF 
15798     00 FA 45 F5 | 	or	result1, ##78643200
1579c     1C 26 06 F1 | 	add	local05, #28
157a0     13 FB 61 FC | 	wrlong	result1, local05
157a4     1C 26 86 F1 | 	sub	local05, #28
157a8     0C 00 90 FD | 	jmp	#LR__2054
157ac                 | LR__2053
157ac     1C 26 06 F1 | 	add	local05, #28
157b0     13 01 68 FC | 	wrlong	#0, local05
157b4     1C 26 86 F1 | 	sub	local05, #28
157b8                 | LR__2054
157b8     00 20 0E F2 | 	cmp	local02, #0 wz
157bc     28 00 90 AD |  if_e	jmp	#LR__2055
157c0     04 24 06 F1 | 	add	local04, #4
157c4     12 21 62 FC | 	wrlong	local02, local04
157c8     04 24 86 F1 | 	sub	local04, #4
157cc     12 FB 01 F6 | 	mov	result1, local04
157d0     00 60 02 FF 
157d4     00 FA 45 F5 | 	or	result1, ##79691776
157d8     20 26 06 F1 | 	add	local05, #32
157dc     13 FB 61 FC | 	wrlong	result1, local05
157e0     20 26 86 F1 | 	sub	local05, #32
157e4     0C 00 90 FD | 	jmp	#LR__2056
157e8                 | LR__2055
157e8     20 26 06 F1 | 	add	local05, #32
157ec     13 01 68 FC | 	wrlong	#0, local05
157f0     20 26 86 F1 | 	sub	local05, #32
157f4                 | LR__2056
157f4     00 22 0E F2 | 	cmp	local03, #0 wz
157f8     24 00 90 AD |  if_e	jmp	#LR__2057
157fc     08 24 06 F1 | 	add	local04, #8
15800     12 23 62 FC | 	wrlong	local03, local04
15804     08 24 86 F1 | 	sub	local04, #8
15808     00 68 02 FF 
1580c     00 24 46 F5 | 	or	local04, ##80740352
15810     24 26 06 F1 | 	add	local05, #36
15814     13 25 62 FC | 	wrlong	local04, local05
15818     24 26 86 F1 | 	sub	local05, #36
1581c     0C 00 90 FD | 	jmp	#LR__2058
15820                 | LR__2057
15820     24 26 06 F1 | 	add	local05, #36
15824     13 01 68 FC | 	wrlong	#0, local05
15828     24 26 86 F1 | 	sub	local05, #36
1582c                 | LR__2058
1582c     08 26 06 F1 | 	add	local05, #8
15830     13 0F 68 FC | 	wrlong	#7, local05
15834     00 FA 05 F6 | 	mov	result1, #0
15838                 | LR__2059
15838     A7 F0 03 F6 | 	mov	ptra, fp
1583c     B2 00 A0 FD | 	call	#popregs_
15840                 | __system___basic_open_ret
15840     2D 00 64 FD | 	ret
15844                 | 
15844                 | __system___basic_open_string
15844     04 4A 05 F6 | 	mov	COUNT_, #4
15848     A8 00 A0 FD | 	call	#pushregs_
1584c     0A 1F 02 F6 | 	mov	local01, arg02
15850     0B 21 02 F6 | 	mov	local02, arg03
15854     C0 41 B0 FD | 	call	#__system____getftab
15858     FD 22 0A F6 | 	mov	local03, result1 wz
1585c     18 00 90 5D |  if_ne	jmp	#LR__2060
15860     EE 12 02 F6 | 	mov	arg01, abortchain
15864     0C 14 06 F6 | 	mov	arg02, #12
15868     01 16 06 F6 | 	mov	arg03, #1
1586c     DA 00 A0 FD | 	call	#__longjmp
15870     01 FA 65 F6 | 	neg	result1, #1
15874     58 00 90 FD | 	jmp	#LR__2062
15878                 | LR__2060
15878     08 22 06 F1 | 	add	local03, #8
1587c     11 19 0A FB | 	rdlong	arg04, local03 wz
15880     08 22 86 F1 | 	sub	local03, #8
15884     11 13 02 56 |  if_ne	mov	arg01, local03
15888     1C 39 B0 5D |  if_ne	call	#__system___closeraw
1588c     0F 15 02 F6 | 	mov	arg02, local01
15890     10 17 02 F6 | 	mov	arg03, local02
15894     11 13 02 F6 | 	mov	arg01, local03
15898     B6 19 06 F6 | 	mov	arg04, #438
1589c     04 36 B0 FD | 	call	#__system___openraw
158a0     FD 24 02 F6 | 	mov	local04, result1
158a4     00 24 56 F2 | 	cmps	local04, #0 wc
158a8     20 00 90 3D |  if_ae	jmp	#LR__2061
158ac     20 E8 05 F1 | 	add	ptr___system__dat__, #32
158b0     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
158b4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
158b8     EE 12 02 F6 | 	mov	arg01, abortchain
158bc     01 16 06 F6 | 	mov	arg03, #1
158c0     DA 00 A0 FD | 	call	#__longjmp
158c4     01 FA 65 F6 | 	neg	result1, #1
158c8     04 00 90 FD | 	jmp	#LR__2062
158cc                 | LR__2061
158cc     12 FB 01 F6 | 	mov	result1, local04
158d0                 | LR__2062
158d0     A7 F0 03 F6 | 	mov	ptra, fp
158d4     B2 00 A0 FD | 	call	#popregs_
158d8                 | __system___basic_open_string_ret
158d8     2D 00 64 FD | 	ret
158dc                 | 
158dc                 | __system___basic_print_char
158dc     03 4A 05 F6 | 	mov	COUNT_, #3
158e0     A8 00 A0 FD | 	call	#pushregs_
158e4     0A 1F 02 F6 | 	mov	local01, arg02
158e8     80 48 B0 FD | 	call	#__system___gettxfunc
158ec     FD 20 0A F6 | 	mov	local02, result1 wz
158f0     00 FA 05 A6 |  if_e	mov	result1, #0
158f4     30 00 90 AD |  if_e	jmp	#LR__2070
158f8     10 23 02 F6 | 	mov	local03, local02
158fc     13 20 46 F7 | 	zerox	local02, #19
15900     14 22 46 F0 | 	shr	local03, #20
15904     02 22 66 F0 | 	shl	local03, #2
15908     ED 22 02 F1 | 	add	local03, __methods__
1590c     11 23 02 FB | 	rdlong	local03, local03
15910     0F 13 02 F6 | 	mov	arg01, local01
15914     F2 1E 02 F6 | 	mov	local01, objptr
15918     10 E5 01 F6 | 	mov	objptr, local02
1591c     2D 22 62 FD | 	call	local03
15920     0F E5 01 F6 | 	mov	objptr, local01
15924     01 FA 05 F6 | 	mov	result1, #1
15928                 | LR__2070
15928     A7 F0 03 F6 | 	mov	ptra, fp
1592c     B2 00 A0 FD | 	call	#popregs_
15930                 | __system___basic_print_char_ret
15930     2D 00 64 FD | 	ret
15934                 | 
15934                 | __system___basic_print_string
15934     03 4A 05 F6 | 	mov	COUNT_, #3
15938     A8 00 A0 FD | 	call	#pushregs_
1593c     0A 1F 02 F6 | 	mov	local01, arg02
15940     0B 21 02 F6 | 	mov	local02, arg03
15944     24 48 B0 FD | 	call	#__system___gettxfunc
15948     FD 22 0A F6 | 	mov	local03, result1 wz
1594c     00 FA 05 A6 |  if_e	mov	result1, #0
15950     18 00 90 AD |  if_e	jmp	#LR__2080
15954     00 1E 0E F2 | 	cmp	local01, #0 wz
15958     00 FA 05 A6 |  if_e	mov	result1, #0
1595c     11 13 02 56 |  if_ne	mov	arg01, local03
15960     10 15 02 56 |  if_ne	mov	arg02, local02
15964     0F 17 02 56 |  if_ne	mov	arg03, local01
15968     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
1596c                 | LR__2080
1596c     A7 F0 03 F6 | 	mov	ptra, fp
15970     B2 00 A0 FD | 	call	#popregs_
15974                 | __system___basic_print_string_ret
15974     2D 00 64 FD | 	ret
15978                 | 
15978                 | __system___basic_print_integer
15978     04 4A 05 F6 | 	mov	COUNT_, #4
1597c     A8 00 A0 FD | 	call	#pushregs_
15980     0A 1F 02 F6 | 	mov	local01, arg02
15984     0B 21 02 F6 | 	mov	local02, arg03
15988     0C 23 02 F6 | 	mov	local03, arg04
1598c     DC 47 B0 FD | 	call	#__system___gettxfunc
15990     FD 24 0A F6 | 	mov	local04, result1 wz
15994     00 FA 05 A6 |  if_e	mov	result1, #0
15998     12 13 02 56 |  if_ne	mov	arg01, local04
1599c     10 15 02 56 |  if_ne	mov	arg02, local02
159a0     0F 17 02 56 |  if_ne	mov	arg03, local01
159a4     11 19 02 56 |  if_ne	mov	arg04, local03
159a8     48 02 B0 5D |  if_ne	call	#__system___fmtnum
159ac     A7 F0 03 F6 | 	mov	ptra, fp
159b0     B2 00 A0 FD | 	call	#popregs_
159b4                 | __system___basic_print_integer_ret
159b4     2D 00 64 FD | 	ret
159b8                 | 
159b8                 | __system___basic_print_unsigned
159b8     03 4A 05 F6 | 	mov	COUNT_, #3
159bc     A8 00 A0 FD | 	call	#pushregs_
159c0     0A 1F 02 F6 | 	mov	local01, arg02
159c4     0B 21 02 F6 | 	mov	local02, arg03
159c8     0C 23 02 F6 | 	mov	local03, arg04
159cc     9C 47 B0 FD | 	call	#__system___gettxfunc
159d0     FD 12 0A F6 | 	mov	arg01, result1 wz
159d4     00 FA 05 A6 |  if_e	mov	result1, #0
159d8     3A 20 26 54 |  if_ne	bith	local02, #58
159dc     10 15 02 56 |  if_ne	mov	arg02, local02
159e0     0F 17 02 56 |  if_ne	mov	arg03, local01
159e4     11 19 02 56 |  if_ne	mov	arg04, local03
159e8     08 02 B0 5D |  if_ne	call	#__system___fmtnum
159ec     A7 F0 03 F6 | 	mov	ptra, fp
159f0     B2 00 A0 FD | 	call	#popregs_
159f4                 | __system___basic_print_unsigned_ret
159f4     2D 00 64 FD | 	ret
159f8                 | 
159f8                 | __system___basic_get_char
159f8     03 4A 05 F6 | 	mov	COUNT_, #3
159fc     A8 00 A0 FD | 	call	#pushregs_
15a00     AC 47 B0 FD | 	call	#__system___getrxfunc
15a04     FD 1E 0A F6 | 	mov	local01, result1 wz
15a08     01 FA 65 A6 |  if_e	neg	result1, #1
15a0c     28 00 90 AD |  if_e	jmp	#LR__2090
15a10     0F 21 02 F6 | 	mov	local02, local01
15a14     13 1E 46 F7 | 	zerox	local01, #19
15a18     14 20 46 F0 | 	shr	local02, #20
15a1c     02 20 66 F0 | 	shl	local02, #2
15a20     ED 20 02 F1 | 	add	local02, __methods__
15a24     10 21 02 FB | 	rdlong	local02, local02
15a28     F2 22 02 F6 | 	mov	local03, objptr
15a2c     0F E5 01 F6 | 	mov	objptr, local01
15a30     2D 20 62 FD | 	call	local02
15a34     11 E5 01 F6 | 	mov	objptr, local03
15a38                 | LR__2090
15a38     A7 F0 03 F6 | 	mov	ptra, fp
15a3c     B2 00 A0 FD | 	call	#popregs_
15a40                 | __system___basic_get_char_ret
15a40     2D 00 64 FD | 	ret
15a44                 | 
15a44                 | __system___basic_get
15a44     04 4A 05 F6 | 	mov	COUNT_, #4
15a48     A8 00 A0 FD | 	call	#pushregs_
15a4c     0D 1F 02 F6 | 	mov	local01, arg05
15a50     0F 19 02 FD | 	qmul	arg04, local01
15a54     09 21 02 F6 | 	mov	local02, arg01
15a58     0B 23 02 F6 | 	mov	local03, arg03
15a5c     00 14 0E F2 | 	cmp	arg02, #0 wz
15a60     01 14 86 51 |  if_ne	sub	arg02, #1
15a64     10 13 02 56 |  if_ne	mov	arg01, local02
15a68     00 16 06 56 |  if_ne	mov	arg03, #0
15a6c     18 24 62 FD | 	getqx	local04
15a70     EC 3D B0 5D |  if_ne	call	#__system__lseek
15a74     11 15 02 F6 | 	mov	arg02, local03
15a78     12 17 02 F6 | 	mov	arg03, local04
15a7c     10 13 02 F6 | 	mov	arg01, local02
15a80     64 3D B0 FD | 	call	#__system__read
15a84     FD 24 02 F6 | 	mov	local04, result1
15a88     01 24 56 F2 | 	cmps	local04, #1 wc
15a8c     10 00 90 CD |  if_b	jmp	#LR__2100
15a90     12 5F 02 F6 | 	mov	muldiva_, local04
15a94     0F 61 02 F6 | 	mov	muldivb_, local01
15a98     BA 00 A0 FD | 	call	#divide_
15a9c     30 25 02 F6 | 	mov	local04, muldivb_
15aa0                 | LR__2100
15aa0     12 FB 01 F6 | 	mov	result1, local04
15aa4     A7 F0 03 F6 | 	mov	ptra, fp
15aa8     B2 00 A0 FD | 	call	#popregs_
15aac                 | __system___basic_get_ret
15aac     2D 00 64 FD | 	ret
15ab0                 | 
15ab0                 | __system___fmtchar
15ab0     00 4A 05 F6 | 	mov	COUNT_, #0
15ab4     A8 00 A0 FD | 	call	#pushregs_
15ab8     10 F0 07 F1 | 	add	ptra, #16
15abc     04 4E 05 F1 | 	add	fp, #4
15ac0     A7 12 62 FC | 	wrlong	arg01, fp
15ac4     04 4E 05 F1 | 	add	fp, #4
15ac8     A7 14 62 FC | 	wrlong	arg02, fp
15acc     04 4E 05 F1 | 	add	fp, #4
15ad0     A7 16 62 FC | 	wrlong	arg03, fp
15ad4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
15ad8     A7 16 62 FC | 	wrlong	arg03, fp
15adc     08 4E 85 F1 | 	sub	fp, #8
15ae0     A7 12 02 FB | 	rdlong	arg01, fp
15ae4     04 4E 05 F1 | 	add	fp, #4
15ae8     A7 14 02 FB | 	rdlong	arg02, fp
15aec     04 4E 05 F1 | 	add	fp, #4
15af0     A7 16 02 F6 | 	mov	arg03, fp
15af4     0C 4E 85 F1 | 	sub	fp, #12
15af8     0C 00 B0 FD | 	call	#__system___fmtstr
15afc     A7 F0 03 F6 | 	mov	ptra, fp
15b00     B2 00 A0 FD | 	call	#popregs_
15b04                 | __system___fmtchar_ret
15b04     2D 00 64 FD | 	ret
15b08                 | 
15b08                 | __system___fmtstr
15b08     09 4A 05 F6 | 	mov	COUNT_, #9
15b0c     A8 00 A0 FD | 	call	#pushregs_
15b10     09 1F 02 F6 | 	mov	local01, arg01
15b14     0A 21 02 F6 | 	mov	local02, arg02
15b18     0B 23 02 F6 | 	mov	local03, arg03
15b1c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
15b20     11 13 02 F6 | 	mov	arg01, local03
15b24     09 25 02 F6 | 	mov	local04, arg01
15b28     97 06 48 FB | 	callpa	#(@LR__2111-@LR__2110)>>2,fcache_load_ptr_
15b2c                 | LR__2110
15b2c     12 FB C9 FA | 	rdbyte	result1, local04 wz
15b30     01 24 06 51 |  if_ne	add	local04, #1
15b34     F4 FF 9F 5D |  if_ne	jmp	#LR__2110
15b38                 | LR__2111
15b38     09 25 82 F1 | 	sub	local04, arg01
15b3c     00 18 0E F2 | 	cmp	arg04, #0 wz
15b40     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
15b44     10 15 02 F6 | 	mov	arg02, local02
15b48     12 17 02 F6 | 	mov	arg03, local04
15b4c     0F 13 02 F6 | 	mov	arg01, local01
15b50     02 18 06 F6 | 	mov	arg04, #2
15b54     B4 42 B0 FD | 	call	#__system___fmtpad
15b58     FD 26 02 F6 | 	mov	local05, result1
15b5c     00 26 56 F2 | 	cmps	local05, #0 wc
15b60     13 FB 01 C6 |  if_b	mov	result1, local05
15b64     80 00 90 CD |  if_b	jmp	#LR__2114
15b68     01 24 56 F2 | 	cmps	local04, #1 wc
15b6c     50 00 90 CD |  if_b	jmp	#LR__2113
15b70     12 29 02 F6 | 	mov	local06, local04
15b74                 | LR__2112
15b74     0F 2B 02 F6 | 	mov	local07, local01
15b78     0F 2D 02 F6 | 	mov	local08, local01
15b7c     13 2A 46 F7 | 	zerox	local07, #19
15b80     14 2C 46 F0 | 	shr	local08, #20
15b84     02 2C 66 F0 | 	shl	local08, #2
15b88     ED 2C 02 F1 | 	add	local08, __methods__
15b8c     16 2D 02 FB | 	rdlong	local08, local08
15b90     11 13 C2 FA | 	rdbyte	arg01, local03
15b94     F2 2E 02 F6 | 	mov	local09, objptr
15b98     15 E5 01 F6 | 	mov	objptr, local07
15b9c     01 22 06 F1 | 	add	local03, #1
15ba0     2D 2C 62 FD | 	call	local08
15ba4     17 E5 01 F6 | 	mov	objptr, local09
15ba8     FD 2E 02 F6 | 	mov	local09, result1
15bac     00 2E 56 F2 | 	cmps	local09, #0 wc
15bb0     17 FB 01 C6 |  if_b	mov	result1, local09
15bb4     30 00 90 CD |  if_b	jmp	#LR__2114
15bb8     17 27 02 F1 | 	add	local05, local09
15bbc     ED 29 6E FB | 	djnz	local06, #LR__2112
15bc0                 | LR__2113
15bc0     10 15 02 F6 | 	mov	arg02, local02
15bc4     12 17 02 F6 | 	mov	arg03, local04
15bc8     0F 13 02 F6 | 	mov	arg01, local01
15bcc     01 18 06 F6 | 	mov	arg04, #1
15bd0     38 42 B0 FD | 	call	#__system___fmtpad
15bd4     FD 2E 02 F6 | 	mov	local09, result1
15bd8     00 2E 56 F2 | 	cmps	local09, #0 wc
15bdc     17 FB 01 C6 |  if_b	mov	result1, local09
15be0     17 27 02 31 |  if_ae	add	local05, local09
15be4     13 FB 01 36 |  if_ae	mov	result1, local05
15be8                 | LR__2114
15be8     A7 F0 03 F6 | 	mov	ptra, fp
15bec     B2 00 A0 FD | 	call	#popregs_
15bf0                 | __system___fmtstr_ret
15bf0     2D 00 64 FD | 	ret
15bf4                 | 
15bf4                 | __system___fmtnum
15bf4     0B 4A 05 F6 | 	mov	COUNT_, #11
15bf8     A8 00 A0 FD | 	call	#pushregs_
15bfc     09 1F 02 F6 | 	mov	local01, arg01
15c00     0A 21 02 F6 | 	mov	local02, arg02
15c04     0B 23 02 F6 | 	mov	local03, arg03
15c08     0C 25 02 F6 | 	mov	local04, arg04
15c0c     F8 27 02 F6 | 	mov	local05, ptra
15c10     13 29 02 F6 | 	mov	local06, local05
15c14     00 2A 06 F6 | 	mov	local07, #0
15c18     10 2D 02 F6 | 	mov	local08, local02
15c1c     10 2C 46 F0 | 	shr	local08, #16
15c20     3F 2C 06 F5 | 	and	local08, #63
15c24     10 2F E2 F8 | 	getbyte	local09, local02, #0
15c28     10 31 02 F6 | 	mov	local10, local02
15c2c     1A 30 46 F0 | 	shr	local10, #26
15c30     03 30 06 F5 | 	and	local10, #3
15c34     18 33 02 F6 | 	mov	local11, local10
15c38     01 2C 56 F2 | 	cmps	local08, #1 wc
15c3c     44 F0 07 F1 | 	add	ptra, #68
15c40     01 2C 86 31 |  if_ae	sub	local08, #1
15c44     41 2E 56 F2 | 	cmps	local09, #65 wc
15c48     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
15c4c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
15c50     03 32 0E F2 | 	cmp	local11, #3 wz
15c54     00 32 06 A6 |  if_e	mov	local11, #0
15c58     00 22 56 52 |  if_ne	cmps	local03, #0 wc
15c5c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
15c60     11 23 62 46 |  if_c_and_nz	neg	local03, local03
15c64     00 32 0E F2 | 	cmp	local11, #0 wz
15c68     4C 00 90 AD |  if_e	jmp	#LR__2123
15c6c     01 2A 06 F6 | 	mov	local07, #1
15c70     17 2D 0A F2 | 	cmp	local08, local09 wz
15c74     18 00 90 5D |  if_ne	jmp	#LR__2121
15c78     05 2C 6E FB | 	djnz	local08, #LR__2120
15c7c     0F 13 02 F6 | 	mov	arg01, local01
15c80     10 15 02 F6 | 	mov	arg02, local02
15c84     23 16 06 F6 | 	mov	arg03, #35
15c88     24 FE BF FD | 	call	#__system___fmtchar
15c8c     88 00 90 FD | 	jmp	#LR__2127
15c90                 | LR__2120
15c90                 | LR__2121
15c90     02 32 0E F2 | 	cmp	local11, #2 wz
15c94     14 31 02 A6 |  if_e	mov	local10, local06
15c98     01 28 06 A1 |  if_e	add	local06, #1
15c9c     18 41 48 AC |  if_e	wrbyte	#32, local10
15ca0     14 00 90 AD |  if_e	jmp	#LR__2122
15ca4     04 32 0E F2 | 	cmp	local11, #4 wz
15ca8     14 5B 48 AC |  if_e	wrbyte	#45, local06
15cac     01 28 06 A1 |  if_e	add	local06, #1
15cb0     14 57 48 5C |  if_ne	wrbyte	#43, local06
15cb4     01 28 06 51 |  if_ne	add	local06, #1
15cb8                 | LR__2122
15cb8                 | LR__2123
15cb8     14 13 02 F6 | 	mov	arg01, local06
15cbc     11 15 02 F6 | 	mov	arg02, local03
15cc0     12 17 02 F6 | 	mov	arg03, local04
15cc4     16 19 02 F6 | 	mov	arg04, local08
15cc8     00 1A 06 F6 | 	mov	arg05, #0
15ccc     1D 20 2E F4 | 	testbn	local02, #29 wz
15cd0     01 1A 06 56 |  if_ne	mov	arg05, #1
15cd4     FC 41 B0 FD | 	call	#__system___uitoa
15cd8     FD 2A 02 F1 | 	add	local07, result1
15cdc     17 2B 5A F2 | 	cmps	local07, local09 wcz
15ce0     24 00 90 ED |  if_be	jmp	#LR__2126
15ce4     97 0E 48 FB | 	callpa	#(@LR__2125-@LR__2124)>>2,fcache_load_ptr_
15ce8                 | LR__2124
15ce8     17 31 02 F6 | 	mov	local10, local09
15cec     01 30 56 F2 | 	cmps	local10, #1 wc
15cf0     01 2E 86 F1 | 	sub	local09, #1
15cf4     14 31 02 36 |  if_ae	mov	local10, local06
15cf8     01 28 06 31 |  if_ae	add	local06, #1
15cfc     18 47 48 3C |  if_ae	wrbyte	#35, local10
15d00     E4 FF 9F 3D |  if_ae	jmp	#LR__2124
15d04                 | LR__2125
15d04     14 01 48 FC | 	wrbyte	#0, local06
15d08                 | LR__2126
15d08     0F 13 02 F6 | 	mov	arg01, local01
15d0c     10 15 02 F6 | 	mov	arg02, local02
15d10     13 17 02 F6 | 	mov	arg03, local05
15d14     F0 FD BF FD | 	call	#__system___fmtstr
15d18                 | LR__2127
15d18     A7 F0 03 F6 | 	mov	ptra, fp
15d1c     B2 00 A0 FD | 	call	#popregs_
15d20                 | __system___fmtnum_ret
15d20     2D 00 64 FD | 	ret
15d24                 | 
15d24                 | __system___fmtfloat
15d24     10 4A 05 F6 | 	mov	COUNT_, #16
15d28     A8 00 A0 FD | 	call	#pushregs_
15d2c     24 F1 07 F1 | 	add	ptra, #292
15d30     04 4E 05 F1 | 	add	fp, #4
15d34     A7 12 62 FC | 	wrlong	arg01, fp
15d38     04 4E 05 F1 | 	add	fp, #4
15d3c     A7 14 62 FC | 	wrlong	arg02, fp
15d40     04 4E 05 F1 | 	add	fp, #4
15d44     A7 16 62 FC | 	wrlong	arg03, fp
15d48     04 4E 05 F1 | 	add	fp, #4
15d4c     A7 18 62 FC | 	wrlong	arg04, fp
15d50     0C 4E 05 F1 | 	add	fp, #12
15d54     A7 14 68 FC | 	wrlong	#10, fp
15d58     08 4E 05 F1 | 	add	fp, #8
15d5c     A7 00 68 FC | 	wrlong	#0, fp
15d60     08 4E 05 F1 | 	add	fp, #8
15d64     A7 00 68 FC | 	wrlong	#0, fp
15d68     08 4E 05 F1 | 	add	fp, #8
15d6c     A7 00 68 FC | 	wrlong	#0, fp
15d70     04 4E 05 F1 | 	add	fp, #4
15d74     A7 04 68 FC | 	wrlong	#2, fp
15d78     04 4E 05 F1 | 	add	fp, #4
15d7c     A7 00 68 FC | 	wrlong	#0, fp
15d80     04 4E 05 F1 | 	add	fp, #4
15d84     A7 00 68 FC | 	wrlong	#0, fp
15d88     04 4E 05 F1 | 	add	fp, #4
15d8c     A7 00 68 FC | 	wrlong	#0, fp
15d90     04 4E 05 F1 | 	add	fp, #4
15d94     A7 00 68 FC | 	wrlong	#0, fp
15d98     18 4E 05 F1 | 	add	fp, #24
15d9c     A7 00 68 FC | 	wrlong	#0, fp
15da0     68 4E 05 F1 | 	add	fp, #104
15da4     A7 1E 02 F6 | 	mov	local01, fp
15da8     08 4E 85 F1 | 	sub	fp, #8
15dac     A7 1E 62 FC | 	wrlong	local01, fp
15db0     04 4E 05 F1 | 	add	fp, #4
15db4     A7 1E 62 FC | 	wrlong	local01, fp
15db8     BC 4E 85 F1 | 	sub	fp, #188
15dbc     A7 1E 02 FB | 	rdlong	local01, fp
15dc0     10 1E 46 F0 | 	shr	local01, #16
15dc4     3F 1E 06 F5 | 	and	local01, #63
15dc8     B0 4E 05 F1 | 	add	fp, #176
15dcc     A7 1E 62 FC | 	wrlong	local01, fp
15dd0     B0 4E 85 F1 | 	sub	fp, #176
15dd4     A7 1E 02 FB | 	rdlong	local01, fp
15dd8     1C 1E 46 F0 | 	shr	local01, #28
15ddc     01 1E 06 F5 | 	and	local01, #1
15de0     08 4F 05 F1 | 	add	fp, #264
15de4     A7 1E 62 FC | 	wrlong	local01, fp
15de8     58 4E 85 F1 | 	sub	fp, #88
15dec     A7 1E 0A FB | 	rdlong	local01, fp wz
15df0     B8 4E 85 F1 | 	sub	fp, #184
15df4     3C 00 90 5D |  if_ne	jmp	#LR__2131
15df8     10 4E 05 F1 | 	add	fp, #16
15dfc     A7 1E 02 FB | 	rdlong	local01, fp
15e00     10 4E 85 F1 | 	sub	fp, #16
15e04     61 1E 0E F2 | 	cmp	local01, #97 wz
15e08     18 00 90 5D |  if_ne	jmp	#LR__2130
15e0c     B8 4E 05 F1 | 	add	fp, #184
15e10     A7 1A 68 FC | 	wrlong	#13, fp
15e14     84 4E 85 F1 | 	sub	fp, #132
15e18     A7 02 68 FC | 	wrlong	#1, fp
15e1c     34 4E 85 F1 | 	sub	fp, #52
15e20     24 00 90 FD | 	jmp	#LR__2132
15e24                 | LR__2130
15e24     B8 4E 05 F1 | 	add	fp, #184
15e28     A7 0C 68 FC | 	wrlong	#6, fp
15e2c     B8 4E 85 F1 | 	sub	fp, #184
15e30     14 00 90 FD | 	jmp	#LR__2132
15e34                 | LR__2131
15e34     B8 4E 05 F1 | 	add	fp, #184
15e38     A7 1E 02 FB | 	rdlong	local01, fp
15e3c     01 1E 86 F1 | 	sub	local01, #1
15e40     A7 1E 62 FC | 	wrlong	local01, fp
15e44     B8 4E 85 F1 | 	sub	fp, #184
15e48                 | LR__2132
15e48     08 4E 05 F1 | 	add	fp, #8
15e4c     A7 1E 02 FB | 	rdlong	local01, fp
15e50     16 1E 46 F0 | 	shr	local01, #22
15e54     03 1E 06 F5 | 	and	local01, #3
15e58     04 4F 05 F1 | 	add	fp, #260
15e5c     A7 1E 62 FC | 	wrlong	local01, fp
15e60     04 4F 85 F1 | 	sub	fp, #260
15e64     A7 1E 02 FB | 	rdlong	local01, fp
15e68     1D 1E 46 F0 | 	shr	local01, #29
15e6c     01 1E 06 F5 | 	and	local01, #1
15e70     B4 4E 05 F1 | 	add	fp, #180
15e74     A7 1E 62 FC | 	wrlong	local01, fp
15e78     B4 4E 85 F1 | 	sub	fp, #180
15e7c     A7 1E 02 FB | 	rdlong	local01, fp
15e80     0F 1F EA F8 | 	getbyte	local01, local01, #1
15e84     60 4E 05 F1 | 	add	fp, #96
15e88     A7 1E 62 FC | 	wrlong	local01, fp
15e8c     60 4E 85 F1 | 	sub	fp, #96
15e90     A7 1E 02 FB | 	rdlong	local01, fp
15e94     0F 1F E2 F8 | 	getbyte	local01, local01, #0
15e98     64 4E 05 F1 | 	add	fp, #100
15e9c     A7 1E 62 FC | 	wrlong	local01, fp
15ea0     00 1E 06 F6 | 	mov	local01, #0
15ea4     5C 4E 85 F1 | 	sub	fp, #92
15ea8     A7 1A 02 FB | 	rdlong	arg05, fp
15eac     65 1A 0E F2 | 	cmp	arg05, #101 wz
15eb0     01 1E 06 A6 |  if_e	mov	local01, #1
15eb4     14 4E 05 F1 | 	add	fp, #20
15eb8     A7 1E 62 FC | 	wrlong	local01, fp
15ebc     98 4E 05 F1 | 	add	fp, #152
15ec0     A7 20 0A FB | 	rdlong	local02, fp wz
15ec4     45 1E 06 56 |  if_ne	mov	local01, #69
15ec8     65 1E 06 A6 |  if_e	mov	local01, #101
15ecc     8C 4E 85 F1 | 	sub	fp, #140
15ed0     A7 1E 62 FC | 	wrlong	local01, fp
15ed4     20 4E 85 F1 | 	sub	fp, #32
15ed8     A7 1E 02 FB | 	rdlong	local01, fp
15edc     10 4E 85 F1 | 	sub	fp, #16
15ee0     61 1E 0E F2 | 	cmp	local01, #97 wz
15ee4     4C 00 90 5D |  if_ne	jmp	#LR__2133
15ee8     24 4E 05 F1 | 	add	fp, #36
15eec     A7 02 68 FC | 	wrlong	#1, fp
15ef0     98 4E 05 F1 | 	add	fp, #152
15ef4     A7 20 0A FB | 	rdlong	local02, fp wz
15ef8     50 1E 06 56 |  if_ne	mov	local01, #80
15efc     70 1E 06 A6 |  if_e	mov	local01, #112
15f00     8C 4E 85 F1 | 	sub	fp, #140
15f04     A7 1E 62 FC | 	wrlong	local01, fp
15f08     14 4E 85 F1 | 	sub	fp, #20
15f0c     A7 04 68 FC | 	wrlong	#2, fp
15f10     1C 4E 05 F1 | 	add	fp, #28
15f14     A7 02 68 FC | 	wrlong	#1, fp
15f18     84 4E 05 F1 | 	add	fp, #132
15f1c     A7 20 0A FB | 	rdlong	local02, fp wz
15f20     58 1E 06 56 |  if_ne	mov	local01, #88
15f24     78 1E 06 A6 |  if_e	mov	local01, #120
15f28     7C 4E 85 F1 | 	sub	fp, #124
15f2c     A7 1E 62 FC | 	wrlong	local01, fp
15f30     40 4E 85 F1 | 	sub	fp, #64
15f34                 | LR__2133
15f34     10 4E 05 F1 | 	add	fp, #16
15f38     A7 1E 02 FB | 	rdlong	local01, fp
15f3c     10 4E 85 F1 | 	sub	fp, #16
15f40     23 1E 0E F2 | 	cmp	local01, #35 wz
15f44     3C 00 90 5D |  if_ne	jmp	#LR__2136
15f48     48 4E 05 F1 | 	add	fp, #72
15f4c     A7 02 68 FC | 	wrlong	#1, fp
15f50     C8 4E 05 F1 | 	add	fp, #200
15f54     A7 1E 0A FB | 	rdlong	local01, fp wz
15f58     10 4F 85 F1 | 	sub	fp, #272
15f5c     18 00 90 AD |  if_e	jmp	#LR__2134
15f60     10 4E 05 F1 | 	add	fp, #16
15f64     A7 CC 68 FC | 	wrlong	#102, fp
15f68     00 4F 05 F1 | 	add	fp, #256
15f6c     A7 00 68 FC | 	wrlong	#0, fp
15f70     10 4F 85 F1 | 	sub	fp, #272
15f74     0C 00 90 FD | 	jmp	#LR__2135
15f78                 | LR__2134
15f78     10 4F 05 F1 | 	add	fp, #272
15f7c     A7 02 68 FC | 	wrlong	#1, fp
15f80     10 4F 85 F1 | 	sub	fp, #272
15f84                 | LR__2135
15f84                 | LR__2136
15f84     08 4E 05 F1 | 	add	fp, #8
15f88     A7 1E 02 FB | 	rdlong	local01, fp
15f8c     1A 1E 46 F0 | 	shr	local01, #26
15f90     03 1E 06 F5 | 	and	local01, #3
15f94     5C 4E 05 F1 | 	add	fp, #92
15f98     A7 1E 62 FC | 	wrlong	local01, fp
15f9c     58 4E 85 F1 | 	sub	fp, #88
15fa0     A7 FA 01 FB | 	rdlong	result1, fp
15fa4     0C 4E 85 F1 | 	sub	fp, #12
15fa8     1F FA 4D F0 | 	shr	result1, #31 wz
15fac     20 00 90 AD |  if_e	jmp	#LR__2137
15fb0     2C 4E 05 F1 | 	add	fp, #44
15fb4     A7 5A 68 FC | 	wrlong	#45, fp
15fb8     20 4E 85 F1 | 	sub	fp, #32
15fbc     A7 FA 01 FB | 	rdlong	result1, fp
15fc0     1F FA E5 F4 | 	bitnot	result1, #31
15fc4     A7 FA 61 FC | 	wrlong	result1, fp
15fc8     0C 4E 85 F1 | 	sub	fp, #12
15fcc     3C 00 90 FD | 	jmp	#LR__2139
15fd0                 | LR__2137
15fd0     64 4E 05 F1 | 	add	fp, #100
15fd4     A7 1E 02 FB | 	rdlong	local01, fp
15fd8     64 4E 85 F1 | 	sub	fp, #100
15fdc     01 1E 0E F2 | 	cmp	local01, #1 wz
15fe0     2C 4E 05 A1 |  if_e	add	fp, #44
15fe4     A7 56 68 AC |  if_e	wrlong	#43, fp
15fe8     2C 4E 85 A1 |  if_e	sub	fp, #44
15fec     1C 00 90 AD |  if_e	jmp	#LR__2138
15ff0     64 4E 05 F1 | 	add	fp, #100
15ff4     A7 1E 02 FB | 	rdlong	local01, fp
15ff8     64 4E 85 F1 | 	sub	fp, #100
15ffc     02 1E 0E F2 | 	cmp	local01, #2 wz
16000     2C 4E 05 A1 |  if_e	add	fp, #44
16004     A7 40 68 AC |  if_e	wrlong	#32, fp
16008     2C 4E 85 A1 |  if_e	sub	fp, #44
1600c                 | LR__2138
1600c                 | LR__2139
1600c     08 4E 05 F1 | 	add	fp, #8
16010     A7 1E 02 FB | 	rdlong	local01, fp
16014     18 1E 46 F0 | 	shr	local01, #24
16018     03 1E 06 F5 | 	and	local01, #3
1601c     3C 4E 05 F1 | 	add	fp, #60
16020     A7 1E 62 FC | 	wrlong	local01, fp
16024     00 1E 06 F6 | 	mov	local01, #0
16028     18 4E 85 F1 | 	sub	fp, #24
1602c     A7 22 0A FB | 	rdlong	local03, fp wz
16030     2C 4E 85 F1 | 	sub	fp, #44
16034     18 00 90 5D |  if_ne	jmp	#LR__2140
16038     1C 4E 05 F1 | 	add	fp, #28
1603c     A7 24 02 FB | 	rdlong	local04, fp
16040     1C 4E 85 F1 | 	sub	fp, #28
16044     12 27 02 F6 | 	mov	local05, local04
16048     0A 26 0E F2 | 	cmp	local05, #10 wz
1604c     04 00 90 AD |  if_e	jmp	#LR__2141
16050                 | LR__2140
16050     01 1E 66 F5 | 	xor	local01, #1
16054                 | LR__2141
16054     3C 4E 05 F1 | 	add	fp, #60
16058     A7 1E 62 FC | 	wrlong	local01, fp
1605c     3C 4E 85 F1 | 	sub	fp, #60
16060     00 1E 0E F2 | 	cmp	local01, #0 wz
16064     0C 01 90 AD |  if_e	jmp	#LR__2143
16068     44 4E 05 F1 | 	add	fp, #68
1606c     A7 26 02 FB | 	rdlong	local05, fp
16070     44 4E 85 F1 | 	sub	fp, #68
16074     13 23 02 F6 | 	mov	local03, local05
16078     02 22 0E F2 | 	cmp	local03, #2 wz
1607c     F4 00 90 5D |  if_ne	jmp	#LR__2143
16080     0C 4F 05 F1 | 	add	fp, #268
16084     A7 28 02 FB | 	rdlong	local06, fp
16088     0C 4F 85 F1 | 	sub	fp, #268
1608c     14 25 02 F6 | 	mov	local04, local06
16090     02 24 0E F2 | 	cmp	local04, #2 wz
16094     DC 00 90 AD |  if_e	jmp	#LR__2143
16098     C0 4E 05 F1 | 	add	fp, #192
1609c     A7 12 02 FB | 	rdlong	arg01, fp
160a0     94 4E 85 F1 | 	sub	fp, #148
160a4     A7 14 02 FB | 	rdlong	arg02, fp
160a8     14 4E 05 F1 | 	add	fp, #20
160ac     A7 16 02 FB | 	rdlong	arg03, fp
160b0     40 4E 85 F1 | 	sub	fp, #64
160b4     84 40 B0 FD | 	call	#__system__emitsign_0309
160b8     14 4F 05 F1 | 	add	fp, #276
160bc     A7 FA 61 FC | 	wrlong	result1, fp
160c0     14 4F 85 F1 | 	sub	fp, #276
160c4     00 FA 55 F2 | 	cmps	result1, #0 wc
160c8     14 4F 05 C1 |  if_b	add	fp, #276
160cc     A7 FA 01 CB |  if_b	rdlong	result1, fp
160d0     14 4F 85 C1 |  if_b	sub	fp, #276
160d4     6C 0B 90 CD |  if_b	jmp	#LR__2193
160d8     C0 4E 05 F1 | 	add	fp, #192
160dc     A7 1E 02 FB | 	rdlong	local01, fp
160e0     54 4E 05 F1 | 	add	fp, #84
160e4     A7 26 02 FB | 	rdlong	local05, fp
160e8     13 23 02 F6 | 	mov	local03, local05
160ec     13 1F 02 F1 | 	add	local01, local05
160f0     54 4E 85 F1 | 	sub	fp, #84
160f4     A7 1E 62 FC | 	wrlong	local01, fp
160f8     58 4E 85 F1 | 	sub	fp, #88
160fc     A7 1E 0A FB | 	rdlong	local01, fp wz
16100     68 4E 85 F1 | 	sub	fp, #104
16104     60 00 90 AD |  if_e	jmp	#LR__2142
16108     68 4E 05 F1 | 	add	fp, #104
1610c     A7 1E 02 FB | 	rdlong	local01, fp
16110     AC 4E 05 F1 | 	add	fp, #172
16114     A7 22 02 FB | 	rdlong	local03, fp
16118     11 1F 82 F1 | 	sub	local01, local03
1611c     AC 4E 85 F1 | 	sub	fp, #172
16120     A7 1E 62 FC | 	wrlong	local01, fp
16124     68 4E 85 F1 | 	sub	fp, #104
16128     00 1E 56 F2 | 	cmps	local01, #0 wc
1612c     68 4E 05 C1 |  if_b	add	fp, #104
16130     A7 00 68 CC |  if_b	wrlong	#0, fp
16134     68 4E 85 C1 |  if_b	sub	fp, #104
16138     08 4E 05 F1 | 	add	fp, #8
1613c     A7 1E 02 FB | 	rdlong	local01, fp
16140     E8 1E 06 F4 | 	bitl	local01, #232
16144     A7 1E 62 FC | 	wrlong	local01, fp
16148     60 4E 05 F1 | 	add	fp, #96
1614c     A7 26 02 FB | 	rdlong	local05, fp
16150     13 23 02 F6 | 	mov	local03, local05
16154     08 22 66 F0 | 	shl	local03, #8
16158     11 1F 42 F5 | 	or	local01, local03
1615c     60 4E 85 F1 | 	sub	fp, #96
16160     A7 1E 62 FC | 	wrlong	local01, fp
16164     08 4E 85 F1 | 	sub	fp, #8
16168                 | LR__2142
16168     3C 4E 05 F1 | 	add	fp, #60
1616c     A7 00 68 FC | 	wrlong	#0, fp
16170     3C 4E 85 F1 | 	sub	fp, #60
16174                 | LR__2143
16174     0C 4E 05 F1 | 	add	fp, #12
16178     A7 12 02 FB | 	rdlong	arg01, fp
1617c     0C 4E 85 F1 | 	sub	fp, #12
16180     D0 1D B0 FD | 	call	#__system____builtin_ilogb
16184     FF FF 3F FF 
16188     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1618c     50 00 90 5D |  if_ne	jmp	#LR__2145
16190     2C 4E 05 F1 | 	add	fp, #44
16194     A7 1E 0A FB | 	rdlong	local01, fp wz
16198     2C 4E 85 F1 | 	sub	fp, #44
1619c     24 00 90 AD |  if_e	jmp	#LR__2144
161a0     C0 4E 05 F1 | 	add	fp, #192
161a4     A7 20 02 FB | 	rdlong	local02, fp
161a8     10 23 02 F6 | 	mov	local03, local02
161ac     01 22 06 F1 | 	add	local03, #1
161b0     A7 22 62 FC | 	wrlong	local03, fp
161b4     94 4E 85 F1 | 	sub	fp, #148
161b8     A7 24 02 FB | 	rdlong	local04, fp
161bc     2C 4E 85 F1 | 	sub	fp, #44
161c0     10 25 42 FC | 	wrbyte	local04, local02
161c4                 | LR__2144
161c4     C0 4E 05 F1 | 	add	fp, #192
161c8     A7 12 02 FB | 	rdlong	arg01, fp
161cc     C0 4E 85 F1 | 	sub	fp, #192
161d0     1F 01 00 FF 
161d4     0E 14 06 F6 | 	mov	arg02, ##@LR__4051
161d8     18 EA BF FD | 	call	#__system____builtin_strcpy
161dc     A4 08 90 FD | 	jmp	#LR__2181
161e0                 | LR__2145
161e0     0C 4E 05 F1 | 	add	fp, #12
161e4     A7 20 02 FB | 	rdlong	local02, fp
161e8     0C 4E 85 F1 | 	sub	fp, #12
161ec     10 13 02 F6 | 	mov	arg01, local02
161f0     60 1D B0 FD | 	call	#__system____builtin_ilogb
161f4     00 00 40 FF 
161f8     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
161fc     50 00 90 5D |  if_ne	jmp	#LR__2147
16200     2C 4E 05 F1 | 	add	fp, #44
16204     A7 1E 0A FB | 	rdlong	local01, fp wz
16208     2C 4E 85 F1 | 	sub	fp, #44
1620c     24 00 90 AD |  if_e	jmp	#LR__2146
16210     C0 4E 05 F1 | 	add	fp, #192
16214     A7 20 02 FB | 	rdlong	local02, fp
16218     10 23 02 F6 | 	mov	local03, local02
1621c     01 22 06 F1 | 	add	local03, #1
16220     A7 22 62 FC | 	wrlong	local03, fp
16224     94 4E 85 F1 | 	sub	fp, #148
16228     A7 24 02 FB | 	rdlong	local04, fp
1622c     2C 4E 85 F1 | 	sub	fp, #44
16230     10 25 42 FC | 	wrbyte	local04, local02
16234                 | LR__2146
16234     C0 4E 05 F1 | 	add	fp, #192
16238     A7 12 02 FB | 	rdlong	arg01, fp
1623c     C0 4E 85 F1 | 	sub	fp, #192
16240     1F 01 00 FF 
16244     12 14 06 F6 | 	mov	arg02, ##@LR__4052
16248     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1624c     34 08 90 FD | 	jmp	#LR__2181
16250                 | LR__2147
16250     10 4E 05 F1 | 	add	fp, #16
16254     A7 1E 02 FB | 	rdlong	local01, fp
16258     10 4E 85 F1 | 	sub	fp, #16
1625c     67 1E 0E F2 | 	cmp	local01, #103 wz
16260     10 4E 05 51 |  if_ne	add	fp, #16
16264     A7 22 02 5B |  if_ne	rdlong	local03, fp
16268     10 4E 85 51 |  if_ne	sub	fp, #16
1626c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
16270     94 01 90 5D |  if_ne	jmp	#LR__2152
16274     0C 4E 05 F1 | 	add	fp, #12
16278     A7 12 02 FB | 	rdlong	arg01, fp
1627c     08 4E 05 F1 | 	add	fp, #8
16280     A7 14 02 F6 | 	mov	arg02, fp
16284     0C 4E 05 F1 | 	add	fp, #12
16288     A7 16 02 F6 | 	mov	arg03, fp
1628c     98 4E 05 F1 | 	add	fp, #152
16290     A7 18 02 FB | 	rdlong	arg04, fp
16294     9C 4E 85 F1 | 	sub	fp, #156
16298     A7 1A 02 FB | 	rdlong	arg05, fp
1629c     1C 4E 85 F1 | 	sub	fp, #28
162a0     A4 3C B0 FD | 	call	#__system__disassemble_0307
162a4     10 4E 05 F1 | 	add	fp, #16
162a8     A7 1E 02 FB | 	rdlong	local01, fp
162ac     10 4E 85 F1 | 	sub	fp, #16
162b0     23 1E 0E F2 | 	cmp	local01, #35 wz
162b4     A0 00 90 5D |  if_ne	jmp	#LR__2149
162b8     20 4E 05 F1 | 	add	fp, #32
162bc     A7 1E 02 FB | 	rdlong	local01, fp
162c0     98 4E 05 F1 | 	add	fp, #152
162c4     A7 22 02 FB | 	rdlong	local03, fp
162c8     B8 4E 85 F1 | 	sub	fp, #184
162cc     11 1F 5A F2 | 	cmps	local01, local03 wcz
162d0     24 4E 05 11 |  if_a	add	fp, #36
162d4     A7 02 68 1C |  if_a	wrlong	#1, fp
162d8     24 4E 85 11 |  if_a	sub	fp, #36
162dc     A4 01 90 1D |  if_a	jmp	#LR__2155
162e0     20 4E 05 F1 | 	add	fp, #32
162e4     A7 1E 02 FB | 	rdlong	local01, fp
162e8     20 4E 85 F1 | 	sub	fp, #32
162ec     00 1E 56 F2 | 	cmps	local01, #0 wc
162f0     2C 00 90 3D |  if_ae	jmp	#LR__2148
162f4     B8 4E 05 F1 | 	add	fp, #184
162f8     A7 1E 02 FB | 	rdlong	local01, fp
162fc     0F 1F 62 F6 | 	neg	local01, local01
16300     98 4E 85 F1 | 	sub	fp, #152
16304     A7 22 02 FB | 	rdlong	local03, fp
16308     20 4E 85 F1 | 	sub	fp, #32
1630c     0F 23 5A F2 | 	cmps	local03, local01 wcz
16310     24 4E 05 E1 |  if_be	add	fp, #36
16314     A7 02 68 EC |  if_be	wrlong	#1, fp
16318     24 4E 85 E1 |  if_be	sub	fp, #36
1631c     64 01 90 FD | 	jmp	#LR__2155
16320                 | LR__2148
16320     20 4E 05 F1 | 	add	fp, #32
16324     A7 1E 02 FB | 	rdlong	local01, fp
16328     20 4E 85 F1 | 	sub	fp, #32
1632c     01 1E 56 F2 | 	cmps	local01, #1 wc
16330     50 01 90 CD |  if_b	jmp	#LR__2155
16334     B8 4E 05 F1 | 	add	fp, #184
16338     A7 1E 02 FB | 	rdlong	local01, fp
1633c     98 4E 85 F1 | 	sub	fp, #152
16340     A7 22 02 FB | 	rdlong	local03, fp
16344     11 1F 82 F1 | 	sub	local01, local03
16348     98 4E 05 F1 | 	add	fp, #152
1634c     A7 1E 62 FC | 	wrlong	local01, fp
16350     B8 4E 85 F1 | 	sub	fp, #184
16354     2C 01 90 FD | 	jmp	#LR__2155
16358                 | LR__2149
16358     00 1E 06 F6 | 	mov	local01, #0
1635c     08 4E 05 F1 | 	add	fp, #8
16360     A7 20 02 FB | 	rdlong	local02, fp
16364     1C 20 46 F0 | 	shr	local02, #28
16368     01 20 0E F5 | 	and	local02, #1 wz
1636c     01 1E 06 A6 |  if_e	mov	local01, #1
16370     2C 4E 05 F1 | 	add	fp, #44
16374     A7 1E 62 FC | 	wrlong	local01, fp
16378     14 4E 85 F1 | 	sub	fp, #20
1637c     A7 1E 02 FB | 	rdlong	local01, fp
16380     98 4E 05 F1 | 	add	fp, #152
16384     A7 22 02 FB | 	rdlong	local03, fp
16388     B8 4E 85 F1 | 	sub	fp, #184
1638c     11 1F 52 F2 | 	cmps	local01, local03 wc
16390     18 00 90 3D |  if_ae	jmp	#LR__2150
16394     20 4E 05 F1 | 	add	fp, #32
16398     A7 24 02 FB | 	rdlong	local04, fp
1639c     20 4E 85 F1 | 	sub	fp, #32
163a0     FF FF 7F FF 
163a4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
163a8     10 00 90 3D |  if_ae	jmp	#LR__2151
163ac                 | LR__2150
163ac     24 4E 05 F1 | 	add	fp, #36
163b0     A7 02 68 FC | 	wrlong	#1, fp
163b4     24 4E 85 F1 | 	sub	fp, #36
163b8     C8 00 90 FD | 	jmp	#LR__2155
163bc                 | LR__2151
163bc     B8 4E 05 F1 | 	add	fp, #184
163c0     A7 24 02 FB | 	rdlong	local04, fp
163c4     98 4E 85 F1 | 	sub	fp, #152
163c8     A7 22 02 FB | 	rdlong	local03, fp
163cc     11 25 82 F1 | 	sub	local04, local03
163d0     98 4E 05 F1 | 	add	fp, #152
163d4     A7 24 62 FC | 	wrlong	local04, fp
163d8     AC 4E 85 F1 | 	sub	fp, #172
163dc     A7 12 02 FB | 	rdlong	arg01, fp
163e0     08 4E 05 F1 | 	add	fp, #8
163e4     A7 14 02 F6 | 	mov	arg02, fp
163e8     0C 4E 05 F1 | 	add	fp, #12
163ec     A7 16 02 F6 | 	mov	arg03, fp
163f0     12 19 62 F6 | 	neg	arg04, local04
163f4     04 4E 85 F1 | 	sub	fp, #4
163f8     A7 1A 02 FB | 	rdlong	arg05, fp
163fc     1C 4E 85 F1 | 	sub	fp, #28
16400     44 3B B0 FD | 	call	#__system__disassemble_0307
16404     7C 00 90 FD | 	jmp	#LR__2155
16408                 | LR__2152
16408     24 4E 05 F1 | 	add	fp, #36
1640c     A7 1E 0A FB | 	rdlong	local01, fp wz
16410     24 4E 85 F1 | 	sub	fp, #36
16414     34 00 90 AD |  if_e	jmp	#LR__2153
16418     0C 4E 05 F1 | 	add	fp, #12
1641c     A7 12 02 FB | 	rdlong	arg01, fp
16420     08 4E 05 F1 | 	add	fp, #8
16424     A7 14 02 F6 | 	mov	arg02, fp
16428     0C 4E 05 F1 | 	add	fp, #12
1642c     A7 16 02 F6 | 	mov	arg03, fp
16430     98 4E 05 F1 | 	add	fp, #152
16434     A7 18 02 FB | 	rdlong	arg04, fp
16438     9C 4E 85 F1 | 	sub	fp, #156
1643c     A7 1A 02 FB | 	rdlong	arg05, fp
16440     1C 4E 85 F1 | 	sub	fp, #28
16444     00 3B B0 FD | 	call	#__system__disassemble_0307
16448     38 00 90 FD | 	jmp	#LR__2154
1644c                 | LR__2153
1644c     0C 4E 05 F1 | 	add	fp, #12
16450     A7 12 02 FB | 	rdlong	arg01, fp
16454     08 4E 05 F1 | 	add	fp, #8
16458     A7 14 02 F6 | 	mov	arg02, fp
1645c     0C 4E 05 F1 | 	add	fp, #12
16460     A7 16 02 F6 | 	mov	arg03, fp
16464     98 4E 05 F1 | 	add	fp, #152
16468     A7 24 02 FB | 	rdlong	local04, fp
1646c     01 24 06 F1 | 	add	local04, #1
16470     12 19 62 F6 | 	neg	arg04, local04
16474     9C 4E 85 F1 | 	sub	fp, #156
16478     A7 1A 02 FB | 	rdlong	arg05, fp
1647c     1C 4E 85 F1 | 	sub	fp, #28
16480     C4 3A B0 FD | 	call	#__system__disassemble_0307
16484                 | LR__2154
16484                 | LR__2155
16484     1C 4E 05 F1 | 	add	fp, #28
16488     A7 1E 02 FB | 	rdlong	local01, fp
1648c     1C 4E 85 F1 | 	sub	fp, #28
16490     02 1E 0E F2 | 	cmp	local01, #2 wz
16494     4C 00 90 5D |  if_ne	jmp	#LR__2158
16498     1C 4E 05 F1 | 	add	fp, #28
1649c     A7 20 68 FC | 	wrlong	#16, fp
164a0     1C 4E 85 F1 | 	sub	fp, #28
164a4                 | LR__2156
164a4     14 4E 05 F1 | 	add	fp, #20
164a8     A7 1E 0A FB | 	rdlong	local01, fp wz
164ac     14 4E 85 F1 | 	sub	fp, #20
164b0     30 00 90 AD |  if_e	jmp	#LR__2157
164b4     14 4E 05 F1 | 	add	fp, #20
164b8     A7 22 02 FB | 	rdlong	local03, fp
164bc     14 4E 85 F1 | 	sub	fp, #20
164c0     00 80 00 FF 
164c4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
164c8     18 00 90 3D |  if_ae	jmp	#LR__2157
164cc     14 4E 05 F1 | 	add	fp, #20
164d0     A7 1E 02 FB | 	rdlong	local01, fp
164d4     01 1E 66 F0 | 	shl	local01, #1
164d8     A7 1E 62 FC | 	wrlong	local01, fp
164dc     14 4E 85 F1 | 	sub	fp, #20
164e0     C0 FF 9F FD | 	jmp	#LR__2156
164e4                 | LR__2157
164e4                 | LR__2158
164e4     70 4E 05 F1 | 	add	fp, #112
164e8     A7 12 02 F6 | 	mov	arg01, fp
164ec     5C 4E 85 F1 | 	sub	fp, #92
164f0     A7 14 02 FB | 	rdlong	arg02, fp
164f4     08 4E 05 F1 | 	add	fp, #8
164f8     A7 16 02 FB | 	rdlong	arg03, fp
164fc     A0 4E 05 F1 | 	add	fp, #160
16500     A7 1A 02 FB | 	rdlong	arg05, fp
16504     BC 4E 85 F1 | 	sub	fp, #188
16508     01 18 06 F6 | 	mov	arg04, #1
1650c     C4 39 B0 FD | 	call	#__system___uitoa
16510     58 4E 05 F1 | 	add	fp, #88
16514     A7 FA 61 FC | 	wrlong	result1, fp
16518     38 4E 85 F1 | 	sub	fp, #56
1651c     A7 1E 02 FB | 	rdlong	local01, fp
16520     20 4E 85 F1 | 	sub	fp, #32
16524     00 1E 56 F2 | 	cmps	local01, #0 wc
16528     50 00 90 3D |  if_ae	jmp	#LR__2159
1652c     60 4E 05 F1 | 	add	fp, #96
16530     A7 5A 68 FC | 	wrlong	#45, fp
16534     50 4E 05 F1 | 	add	fp, #80
16538     A7 12 02 F6 | 	mov	arg01, fp
1653c     90 4E 85 F1 | 	sub	fp, #144
16540     A7 22 02 FB | 	rdlong	local03, fp
16544     11 15 62 F6 | 	neg	arg02, local03
16548     18 4E 05 F1 | 	add	fp, #24
1654c     A7 18 02 FB | 	rdlong	arg04, fp
16550     84 4E 05 F1 | 	add	fp, #132
16554     A7 28 02 FB | 	rdlong	local06, fp
16558     BC 4E 85 F1 | 	sub	fp, #188
1655c     14 25 02 F6 | 	mov	local04, local06
16560     0A 16 06 F6 | 	mov	arg03, #10
16564     12 1B 02 F6 | 	mov	arg05, local04
16568     68 39 B0 FD | 	call	#__system___uitoa
1656c     5C 4E 05 F1 | 	add	fp, #92
16570     A7 FA 61 FC | 	wrlong	result1, fp
16574     5C 4E 85 F1 | 	sub	fp, #92
16578     48 00 90 FD | 	jmp	#LR__2160
1657c                 | LR__2159
1657c     60 4E 05 F1 | 	add	fp, #96
16580     A7 56 68 FC | 	wrlong	#43, fp
16584     50 4E 05 F1 | 	add	fp, #80
16588     A7 12 02 F6 | 	mov	arg01, fp
1658c     90 4E 85 F1 | 	sub	fp, #144
16590     A7 14 02 FB | 	rdlong	arg02, fp
16594     18 4E 05 F1 | 	add	fp, #24
16598     A7 18 02 FB | 	rdlong	arg04, fp
1659c     84 4E 05 F1 | 	add	fp, #132
165a0     A7 28 02 FB | 	rdlong	local06, fp
165a4     BC 4E 85 F1 | 	sub	fp, #188
165a8     14 25 02 F6 | 	mov	local04, local06
165ac     0A 16 06 F6 | 	mov	arg03, #10
165b0     12 1B 02 F6 | 	mov	arg05, local04
165b4     1C 39 B0 FD | 	call	#__system___uitoa
165b8     5C 4E 05 F1 | 	add	fp, #92
165bc     A7 FA 61 FC | 	wrlong	result1, fp
165c0     5C 4E 85 F1 | 	sub	fp, #92
165c4                 | LR__2160
165c4     24 4E 05 F1 | 	add	fp, #36
165c8     A7 1E 0A FB | 	rdlong	local01, fp wz
165cc     24 4E 85 F1 | 	sub	fp, #36
165d0     2C 00 90 AD |  if_e	jmp	#LR__2161
165d4     50 4E 05 F1 | 	add	fp, #80
165d8     A7 00 68 FC | 	wrlong	#0, fp
165dc     04 4E 85 F1 | 	sub	fp, #4
165e0     A7 00 68 FC | 	wrlong	#0, fp
165e4     6C 4E 05 F1 | 	add	fp, #108
165e8     A7 1E 02 FB | 	rdlong	local01, fp
165ec     01 1E 06 F1 | 	add	local01, #1
165f0     64 4E 85 F1 | 	sub	fp, #100
165f4     A7 1E 62 FC | 	wrlong	local01, fp
165f8     54 4E 85 F1 | 	sub	fp, #84
165fc     88 00 90 FD | 	jmp	#LR__2164
16600                 | LR__2161
16600     20 4E 05 F1 | 	add	fp, #32
16604     A7 1E 02 FB | 	rdlong	local01, fp
16608     20 4E 85 F1 | 	sub	fp, #32
1660c     00 1E 56 F2 | 	cmps	local01, #0 wc
16610     40 00 90 3D |  if_ae	jmp	#LR__2162
16614     20 4E 05 F1 | 	add	fp, #32
16618     A7 20 02 FB | 	rdlong	local02, fp
1661c     30 4E 05 F1 | 	add	fp, #48
16620     A7 20 62 FC | 	wrlong	local02, fp
16624     04 4E 85 F1 | 	sub	fp, #4
16628     A7 20 62 FC | 	wrlong	local02, fp
1662c     2C 4E 85 F1 | 	sub	fp, #44
16630     A7 1E 02 FB | 	rdlong	local01, fp
16634     98 4E 05 F1 | 	add	fp, #152
16638     A7 22 02 FB | 	rdlong	local03, fp
1663c     11 1F 02 F1 | 	add	local01, local03
16640     01 1E 06 F1 | 	add	local01, #1
16644     64 4E 85 F1 | 	sub	fp, #100
16648     A7 1E 62 FC | 	wrlong	local01, fp
1664c     54 4E 85 F1 | 	sub	fp, #84
16650     34 00 90 FD | 	jmp	#LR__2163
16654                 | LR__2162
16654     4C 4E 05 F1 | 	add	fp, #76
16658     A7 00 68 FC | 	wrlong	#0, fp
1665c     2C 4E 85 F1 | 	sub	fp, #44
16660     A7 1E 02 FB | 	rdlong	local01, fp
16664     30 4E 05 F1 | 	add	fp, #48
16668     A7 1E 62 FC | 	wrlong	local01, fp
1666c     68 4E 05 F1 | 	add	fp, #104
16670     A7 22 02 FB | 	rdlong	local03, fp
16674     11 1F 02 F1 | 	add	local01, local03
16678     01 1E 06 F1 | 	add	local01, #1
1667c     64 4E 85 F1 | 	sub	fp, #100
16680     A7 1E 62 FC | 	wrlong	local01, fp
16684     54 4E 85 F1 | 	sub	fp, #84
16688                 | LR__2163
16688                 | LR__2164
16688     54 4E 05 F1 | 	add	fp, #84
1668c     A7 1E 02 FB | 	rdlong	local01, fp
16690     08 4E 85 F1 | 	sub	fp, #8
16694     A7 22 02 FB | 	rdlong	local03, fp
16698     11 1F 82 F1 | 	sub	local01, local03
1669c     01 1E 06 F1 | 	add	local01, #1
166a0     24 4E 85 F1 | 	sub	fp, #36
166a4     A7 1E 62 FC | 	wrlong	local01, fp
166a8     04 4E 05 F1 | 	add	fp, #4
166ac     A7 1E 0A FB | 	rdlong	local01, fp wz
166b0     2C 4E 85 F1 | 	sub	fp, #44
166b4     28 4E 05 51 |  if_ne	add	fp, #40
166b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
166bc     01 22 06 51 |  if_ne	add	local03, #1
166c0     A7 22 62 5C |  if_ne	wrlong	local03, fp
166c4     28 4E 85 51 |  if_ne	sub	fp, #40
166c8     1C 4E 05 F1 | 	add	fp, #28
166cc     A7 1E 02 FB | 	rdlong	local01, fp
166d0     1C 4E 85 F1 | 	sub	fp, #28
166d4     10 1E 0E F2 | 	cmp	local01, #16 wz
166d8     28 4E 05 A1 |  if_e	add	fp, #40
166dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
166e0     02 1E 06 A1 |  if_e	add	local01, #2
166e4     A7 1E 62 AC |  if_e	wrlong	local01, fp
166e8     28 4E 85 A1 |  if_e	sub	fp, #40
166ec     24 4E 05 F1 | 	add	fp, #36
166f0     A7 1E 0A FB | 	rdlong	local01, fp wz
166f4     24 4E 85 F1 | 	sub	fp, #36
166f8     28 00 90 AD |  if_e	jmp	#LR__2165
166fc     28 4E 05 F1 | 	add	fp, #40
16700     A7 1E 02 FB | 	rdlong	local01, fp
16704     02 22 06 F6 | 	mov	local03, #2
16708     34 4E 05 F1 | 	add	fp, #52
1670c     A7 26 02 FB | 	rdlong	local05, fp
16710     13 23 02 F1 | 	add	local03, local05
16714     11 1F 02 F1 | 	add	local01, local03
16718     34 4E 85 F1 | 	sub	fp, #52
1671c     A7 1E 62 FC | 	wrlong	local01, fp
16720     28 4E 85 F1 | 	sub	fp, #40
16724                 | LR__2165
16724     28 4E 05 F1 | 	add	fp, #40
16728     A7 1E 02 FB | 	rdlong	local01, fp
1672c     28 4E 85 F1 | 	sub	fp, #40
16730     41 1E 56 F2 | 	cmps	local01, #65 wc
16734     01 FA 65 36 |  if_ae	neg	result1, #1
16738     08 05 90 3D |  if_ae	jmp	#LR__2193
1673c     3C 4E 05 F1 | 	add	fp, #60
16740     A7 1E 0A FB | 	rdlong	local01, fp wz
16744     3C 4E 85 F1 | 	sub	fp, #60
16748     60 00 90 AD |  if_e	jmp	#LR__2166
1674c     C0 4E 05 F1 | 	add	fp, #192
16750     A7 12 02 FB | 	rdlong	arg01, fp
16754     94 4E 85 F1 | 	sub	fp, #148
16758     A7 14 02 FB | 	rdlong	arg02, fp
1675c     14 4E 05 F1 | 	add	fp, #20
16760     A7 16 02 FB | 	rdlong	arg03, fp
16764     40 4E 85 F1 | 	sub	fp, #64
16768     D0 39 B0 FD | 	call	#__system__emitsign_0309
1676c     18 4F 05 F1 | 	add	fp, #280
16770     A7 FA 61 FC | 	wrlong	result1, fp
16774     18 4F 85 F1 | 	sub	fp, #280
16778     00 FA 55 F2 | 	cmps	result1, #0 wc
1677c     18 4F 05 C1 |  if_b	add	fp, #280
16780     A7 FA 01 CB |  if_b	rdlong	result1, fp
16784     18 4F 85 C1 |  if_b	sub	fp, #280
16788     B8 04 90 CD |  if_b	jmp	#LR__2193
1678c     C0 4E 05 F1 | 	add	fp, #192
16790     A7 1E 02 FB | 	rdlong	local01, fp
16794     58 4E 05 F1 | 	add	fp, #88
16798     A7 22 02 FB | 	rdlong	local03, fp
1679c     11 1F 02 F1 | 	add	local01, local03
167a0     58 4E 85 F1 | 	sub	fp, #88
167a4     A7 1E 62 FC | 	wrlong	local01, fp
167a8     C0 4E 85 F1 | 	sub	fp, #192
167ac                 | LR__2166
167ac     4C 4E 05 F1 | 	add	fp, #76
167b0     A7 1E 02 FB | 	rdlong	local01, fp
167b4     34 4E 85 F1 | 	sub	fp, #52
167b8     A7 1E 62 FC | 	wrlong	local01, fp
167bc     18 4E 85 F1 | 	sub	fp, #24
167c0     97 9E 48 FB | 	callpa	#(@LR__2172-@LR__2167)>>2,fcache_load_ptr_
167c4                 | LR__2167
167c4     18 4E 05 F1 | 	add	fp, #24
167c8     A7 20 02 FB | 	rdlong	local02, fp
167cc     3C 4E 05 F1 | 	add	fp, #60
167d0     A7 26 02 FB | 	rdlong	local05, fp
167d4     54 4E 85 F1 | 	sub	fp, #84
167d8     13 21 52 F2 | 	cmps	local02, local05 wc
167dc     20 01 90 3D |  if_ae	jmp	#LR__2173
167e0     18 4E 05 F1 | 	add	fp, #24
167e4     A7 28 02 FB | 	rdlong	local06, fp
167e8     18 4E 85 F1 | 	sub	fp, #24
167ec     00 28 56 F2 | 	cmps	local06, #0 wc
167f0     58 00 90 CD |  if_b	jmp	#LR__2168
167f4     18 4E 05 F1 | 	add	fp, #24
167f8     A7 28 02 FB | 	rdlong	local06, fp
167fc     40 4E 05 F1 | 	add	fp, #64
16800     A7 2A 02 FB | 	rdlong	local07, fp
16804     58 4E 85 F1 | 	sub	fp, #88
16808     15 29 52 F2 | 	cmps	local06, local07 wc
1680c     3C 00 90 3D |  if_ae	jmp	#LR__2168
16810     C0 4E 05 F1 | 	add	fp, #192
16814     A7 2C 02 FB | 	rdlong	local08, fp
16818     16 2B 02 F6 | 	mov	local07, local08
1681c     01 2A 06 F1 | 	add	local07, #1
16820     A7 2A 62 FC | 	wrlong	local07, fp
16824     A8 4E 85 F1 | 	sub	fp, #168
16828     A7 2A 02 FB | 	rdlong	local07, fp
1682c     15 2F 02 F6 | 	mov	local09, local07
16830     58 4E 05 F1 | 	add	fp, #88
16834     A7 30 02 F6 | 	mov	local10, fp
16838     A7 2E 02 F1 | 	add	local09, fp
1683c     17 33 C2 FA | 	rdbyte	local11, local09
16840     16 33 42 FC | 	wrbyte	local11, local08
16844     70 4E 85 F1 | 	sub	fp, #112
16848     20 00 90 FD | 	jmp	#LR__2169
1684c                 | LR__2168
1684c     C0 4E 05 F1 | 	add	fp, #192
16850     A7 2C 02 FB | 	rdlong	local08, fp
16854     16 2F 02 F6 | 	mov	local09, local08
16858     01 2E 06 F1 | 	add	local09, #1
1685c     A7 2E 62 FC | 	wrlong	local09, fp
16860     C0 4E 85 F1 | 	sub	fp, #192
16864     30 2E 06 F6 | 	mov	local09, #48
16868     16 61 48 FC | 	wrbyte	#48, local08
1686c                 | LR__2169
1686c     18 4E 05 F1 | 	add	fp, #24
16870     A7 28 02 FB | 	rdlong	local06, fp
16874     38 4E 05 F1 | 	add	fp, #56
16878     A7 34 02 FB | 	rdlong	local12, fp
1687c     50 4E 85 F1 | 	sub	fp, #80
16880     1A 29 0A F2 | 	cmp	local06, local12 wz
16884     5C 00 90 5D |  if_ne	jmp	#LR__2171
16888     10 4F 05 F1 | 	add	fp, #272
1688c     A7 2A 02 FB | 	rdlong	local07, fp
16890     10 4F 85 F1 | 	sub	fp, #272
16894     15 2F 0A F6 | 	mov	local09, local07 wz
16898     28 00 90 5D |  if_ne	jmp	#LR__2170
1689c     54 4E 05 F1 | 	add	fp, #84
168a0     A7 32 02 FB | 	rdlong	local11, fp
168a4     19 31 02 F6 | 	mov	local10, local11
168a8     01 30 86 F1 | 	sub	local10, #1
168ac     3C 4E 85 F1 | 	sub	fp, #60
168b0     A7 36 02 FB | 	rdlong	local13, fp
168b4     18 4E 85 F1 | 	sub	fp, #24
168b8     1B 39 02 F6 | 	mov	local14, local13
168bc     18 39 52 F2 | 	cmps	local14, local10 wc
168c0     20 00 90 3D |  if_ae	jmp	#LR__2171
168c4                 | LR__2170
168c4     C0 4E 05 F1 | 	add	fp, #192
168c8     A7 2C 02 FB | 	rdlong	local08, fp
168cc     16 35 02 F6 | 	mov	local12, local08
168d0     01 34 06 F1 | 	add	local12, #1
168d4     A7 34 62 FC | 	wrlong	local12, fp
168d8     C0 4E 85 F1 | 	sub	fp, #192
168dc     2E 2E 06 F6 | 	mov	local09, #46
168e0     16 5D 48 FC | 	wrbyte	#46, local08
168e4                 | LR__2171
168e4     18 4E 05 F1 | 	add	fp, #24
168e8     A7 3A 02 FB | 	rdlong	local15, fp
168ec     1D 35 02 F6 | 	mov	local12, local15
168f0     01 34 06 F1 | 	add	local12, #1
168f4     A7 34 62 FC | 	wrlong	local12, fp
168f8     18 4E 85 F1 | 	sub	fp, #24
168fc     C4 FE 9F FD | 	jmp	#LR__2167
16900                 | LR__2172
16900                 | LR__2173
16900     34 4E 05 F1 | 	add	fp, #52
16904     A7 1E 0A FB | 	rdlong	local01, fp wz
16908     34 4E 85 F1 | 	sub	fp, #52
1690c     A0 00 90 AD |  if_e	jmp	#LR__2177
16910     C0 4E 05 F1 | 	add	fp, #192
16914     A7 1E 02 FB | 	rdlong	local01, fp
16918     01 1E 86 F1 | 	sub	local01, #1
1691c     A7 1E 62 FC | 	wrlong	local01, fp
16920     C0 4E 85 F1 | 	sub	fp, #192
16924     97 26 48 FB | 	callpa	#(@LR__2175-@LR__2174)>>2,fcache_load_ptr_
16928                 | LR__2174
16928     C0 4E 05 F1 | 	add	fp, #192
1692c     A7 1E 02 FB | 	rdlong	local01, fp
16930     04 4E 05 F1 | 	add	fp, #4
16934     A7 22 02 FB | 	rdlong	local03, fp
16938     C4 4E 85 F1 | 	sub	fp, #196
1693c     11 1F 5A F2 | 	cmps	local01, local03 wcz
16940     30 00 90 ED |  if_be	jmp	#LR__2176
16944     C0 4E 05 F1 | 	add	fp, #192
16948     A7 28 02 FB | 	rdlong	local06, fp
1694c     C0 4E 85 F1 | 	sub	fp, #192
16950     14 25 C2 FA | 	rdbyte	local04, local06
16954     30 24 0E F2 | 	cmp	local04, #48 wz
16958     18 00 90 5D |  if_ne	jmp	#LR__2176
1695c     C0 4E 05 F1 | 	add	fp, #192
16960     A7 1E 02 FB | 	rdlong	local01, fp
16964     01 1E 86 F1 | 	sub	local01, #1
16968     A7 1E 62 FC | 	wrlong	local01, fp
1696c     C0 4E 85 F1 | 	sub	fp, #192
16970     B4 FF 9F FD | 	jmp	#LR__2174
16974                 | LR__2175
16974                 | LR__2176
16974     C0 4E 05 F1 | 	add	fp, #192
16978     A7 20 02 FB | 	rdlong	local02, fp
1697c     C0 4E 85 F1 | 	sub	fp, #192
16980     10 1F C2 FA | 	rdbyte	local01, local02
16984     2E 1E 0E F2 | 	cmp	local01, #46 wz
16988     C0 4E 05 A1 |  if_e	add	fp, #192
1698c     A7 1E 02 AB |  if_e	rdlong	local01, fp
16990     01 1E 86 A1 |  if_e	sub	local01, #1
16994     A7 1E 62 AC |  if_e	wrlong	local01, fp
16998     C0 4E 85 A1 |  if_e	sub	fp, #192
1699c     C0 4E 05 F1 | 	add	fp, #192
169a0     A7 22 02 FB | 	rdlong	local03, fp
169a4     01 22 06 F1 | 	add	local03, #1
169a8     A7 22 62 FC | 	wrlong	local03, fp
169ac     C0 4E 85 F1 | 	sub	fp, #192
169b0                 | LR__2177
169b0     24 4E 05 F1 | 	add	fp, #36
169b4     A7 1E 0A FB | 	rdlong	local01, fp wz
169b8     24 4E 85 F1 | 	sub	fp, #36
169bc     B4 00 90 AD |  if_e	jmp	#LR__2180
169c0     C0 4E 05 F1 | 	add	fp, #192
169c4     A7 20 02 FB | 	rdlong	local02, fp
169c8     10 23 02 F6 | 	mov	local03, local02
169cc     01 22 06 F1 | 	add	local03, #1
169d0     A7 22 62 FC | 	wrlong	local03, fp
169d4     90 4E 85 F1 | 	sub	fp, #144
169d8     A7 24 02 FB | 	rdlong	local04, fp
169dc     10 25 42 FC | 	wrbyte	local04, local02
169e0     90 4E 05 F1 | 	add	fp, #144
169e4     A7 20 02 FB | 	rdlong	local02, fp
169e8     10 23 02 F6 | 	mov	local03, local02
169ec     01 22 06 F1 | 	add	local03, #1
169f0     A7 22 62 FC | 	wrlong	local03, fp
169f4     60 4E 85 F1 | 	sub	fp, #96
169f8     A7 24 02 FB | 	rdlong	local04, fp
169fc     10 25 42 FC | 	wrbyte	local04, local02
16a00     48 4E 85 F1 | 	sub	fp, #72
16a04     A7 00 68 FC | 	wrlong	#0, fp
16a08     18 4E 85 F1 | 	sub	fp, #24
16a0c                 | LR__2178
16a0c     18 4E 05 F1 | 	add	fp, #24
16a10     A7 20 02 FB | 	rdlong	local02, fp
16a14     44 4E 05 F1 | 	add	fp, #68
16a18     A7 26 02 FB | 	rdlong	local05, fp
16a1c     5C 4E 85 F1 | 	sub	fp, #92
16a20     13 21 52 F2 | 	cmps	local02, local05 wc
16a24     4C 00 90 3D |  if_ae	jmp	#LR__2179
16a28     C0 4E 05 F1 | 	add	fp, #192
16a2c     A7 2C 02 FB | 	rdlong	local08, fp
16a30     16 35 02 F6 | 	mov	local12, local08
16a34     01 34 06 F1 | 	add	local12, #1
16a38     A7 34 62 FC | 	wrlong	local12, fp
16a3c     A8 4E 85 F1 | 	sub	fp, #168
16a40     A7 2A 02 FB | 	rdlong	local07, fp
16a44     15 2F 02 F6 | 	mov	local09, local07
16a48     98 4E 05 F1 | 	add	fp, #152
16a4c     A7 30 02 F6 | 	mov	local10, fp
16a50     A7 2E 02 F1 | 	add	local09, fp
16a54     17 33 C2 FA | 	rdbyte	local11, local09
16a58     16 33 42 FC | 	wrbyte	local11, local08
16a5c     98 4E 85 F1 | 	sub	fp, #152
16a60     A7 34 02 FB | 	rdlong	local12, fp
16a64     01 34 06 F1 | 	add	local12, #1
16a68     A7 34 62 FC | 	wrlong	local12, fp
16a6c     18 4E 85 F1 | 	sub	fp, #24
16a70     98 FF 9F FD | 	jmp	#LR__2178
16a74                 | LR__2179
16a74                 | LR__2180
16a74     C0 4E 05 F1 | 	add	fp, #192
16a78     A7 1E 02 FB | 	rdlong	local01, fp
16a7c     C0 4E 85 F1 | 	sub	fp, #192
16a80     0F 01 48 FC | 	wrbyte	#0, local01
16a84                 | LR__2181
16a84     6C 4E 05 F1 | 	add	fp, #108
16a88     A7 1E 0A FB | 	rdlong	local01, fp wz
16a8c     6C 4E 85 F1 | 	sub	fp, #108
16a90     90 01 90 AD |  if_e	jmp	#LR__2192
16a94     48 4E 05 F1 | 	add	fp, #72
16a98     A7 22 0A FB | 	rdlong	local03, fp wz
16a9c     48 4E 85 F1 | 	sub	fp, #72
16aa0     80 01 90 AD |  if_e	jmp	#LR__2192
16aa4     C4 4E 05 F1 | 	add	fp, #196
16aa8     A7 12 02 FB | 	rdlong	arg01, fp
16aac     C4 4E 85 F1 | 	sub	fp, #196
16ab0     09 3D 02 F6 | 	mov	local16, arg01
16ab4     97 06 48 FB | 	callpa	#(@LR__2183-@LR__2182)>>2,fcache_load_ptr_
16ab8                 | LR__2182
16ab8     1E FB C9 FA | 	rdbyte	result1, local16 wz
16abc     01 3C 06 51 |  if_ne	add	local16, #1
16ac0     F4 FF 9F 5D |  if_ne	jmp	#LR__2182
16ac4                 | LR__2183
16ac4     09 3D 82 F1 | 	sub	local16, arg01
16ac8     1E 25 02 F6 | 	mov	local04, local16
16acc     6C 4E 05 F1 | 	add	fp, #108
16ad0     A7 28 02 FB | 	rdlong	local06, fp
16ad4     6C 4E 85 F1 | 	sub	fp, #108
16ad8     14 25 5A F2 | 	cmps	local04, local06 wcz
16adc     44 01 90 ED |  if_be	jmp	#LR__2192
16ae0     C4 4E 05 F1 | 	add	fp, #196
16ae4     A7 1E 02 FB | 	rdlong	local01, fp
16ae8     5C 4E 05 F1 | 	add	fp, #92
16aec     A7 1E 62 FC | 	wrlong	local01, fp
16af0     FC 4E 85 F1 | 	sub	fp, #252
16af4     A7 1E 0A FB | 	rdlong	local01, fp wz
16af8     24 4E 85 F1 | 	sub	fp, #36
16afc     20 00 90 AD |  if_e	jmp	#LR__2184
16b00     B8 4E 05 F1 | 	add	fp, #184
16b04     A7 00 68 FC | 	wrlong	#0, fp
16b08     4C 4E 85 F1 | 	sub	fp, #76
16b0c     A7 1E 02 FB | 	rdlong	local01, fp
16b10     B0 4E 05 F1 | 	add	fp, #176
16b14     A7 1E 62 FC | 	wrlong	local01, fp
16b18     1C 4F 85 F1 | 	sub	fp, #284
16b1c     24 00 90 FD | 	jmp	#LR__2185
16b20                 | LR__2184
16b20     6C 4E 05 F1 | 	add	fp, #108
16b24     A7 1E 02 FB | 	rdlong	local01, fp
16b28     01 1E 86 F1 | 	sub	local01, #1
16b2c     4C 4E 05 F1 | 	add	fp, #76
16b30     A7 22 02 FB | 	rdlong	local03, fp
16b34     11 1F 82 F1 | 	sub	local01, local03
16b38     64 4E 05 F1 | 	add	fp, #100
16b3c     A7 1E 62 FC | 	wrlong	local01, fp
16b40     1C 4F 85 F1 | 	sub	fp, #284
16b44                 | LR__2185
16b44     97 20 48 FB | 	callpa	#(@LR__2187-@LR__2186)>>2,fcache_load_ptr_
16b48                 | LR__2186
16b48     1C 4F 05 F1 | 	add	fp, #284
16b4c     A7 1E 0A FB | 	rdlong	local01, fp wz
16b50     1C 4F 85 F1 | 	sub	fp, #284
16b54     30 00 90 AD |  if_e	jmp	#LR__2188
16b58     20 4F 05 F1 | 	add	fp, #288
16b5c     A7 20 02 FB | 	rdlong	local02, fp
16b60     10 23 02 F6 | 	mov	local03, local02
16b64     01 22 06 F1 | 	add	local03, #1
16b68     A7 22 62 FC | 	wrlong	local03, fp
16b6c     10 55 48 FC | 	wrbyte	#42, local02
16b70     04 4E 85 F1 | 	sub	fp, #4
16b74     A7 1E 02 FB | 	rdlong	local01, fp
16b78     01 1E 86 F1 | 	sub	local01, #1
16b7c     A7 1E 62 FC | 	wrlong	local01, fp
16b80     1C 4F 85 F1 | 	sub	fp, #284
16b84     C0 FF 9F FD | 	jmp	#LR__2186
16b88                 | LR__2187
16b88                 | LR__2188
16b88     B8 4E 05 F1 | 	add	fp, #184
16b8c     A7 1E 0A FB | 	rdlong	local01, fp wz
16b90     B8 4E 85 F1 | 	sub	fp, #184
16b94     70 00 90 AD |  if_e	jmp	#LR__2191
16b98     20 4F 05 F1 | 	add	fp, #288
16b9c     A7 20 02 FB | 	rdlong	local02, fp
16ba0     10 23 02 F6 | 	mov	local03, local02
16ba4     01 22 06 F1 | 	add	local03, #1
16ba8     A7 22 62 FC | 	wrlong	local03, fp
16bac     10 5D 48 FC | 	wrbyte	#46, local02
16bb0     04 4E 85 F1 | 	sub	fp, #4
16bb4     A7 00 68 FC | 	wrlong	#0, fp
16bb8     1C 4F 85 F1 | 	sub	fp, #284
16bbc                 | LR__2189
16bbc     1C 4F 05 F1 | 	add	fp, #284
16bc0     A7 20 02 FB | 	rdlong	local02, fp
16bc4     64 4E 85 F1 | 	sub	fp, #100
16bc8     A7 26 02 FB | 	rdlong	local05, fp
16bcc     B8 4E 85 F1 | 	sub	fp, #184
16bd0     13 21 52 F2 | 	cmps	local02, local05 wc
16bd4     30 00 90 3D |  if_ae	jmp	#LR__2190
16bd8     20 4F 05 F1 | 	add	fp, #288
16bdc     A7 2C 02 FB | 	rdlong	local08, fp
16be0     16 35 02 F6 | 	mov	local12, local08
16be4     01 34 06 F1 | 	add	local12, #1
16be8     A7 34 62 FC | 	wrlong	local12, fp
16bec     16 55 48 FC | 	wrbyte	#42, local08
16bf0     04 4E 85 F1 | 	sub	fp, #4
16bf4     A7 34 02 FB | 	rdlong	local12, fp
16bf8     01 34 06 F1 | 	add	local12, #1
16bfc     A7 34 62 FC | 	wrlong	local12, fp
16c00     1C 4F 85 F1 | 	sub	fp, #284
16c04     B4 FF 9F FD | 	jmp	#LR__2189
16c08                 | LR__2190
16c08                 | LR__2191
16c08     20 4F 05 F1 | 	add	fp, #288
16c0c     A7 20 02 FB | 	rdlong	local02, fp
16c10     10 23 02 F6 | 	mov	local03, local02
16c14     01 22 06 F1 | 	add	local03, #1
16c18     A7 22 62 FC | 	wrlong	local03, fp
16c1c     20 4F 85 F1 | 	sub	fp, #288
16c20     10 01 48 FC | 	wrbyte	#0, local02
16c24                 | LR__2192
16c24     04 4E 05 F1 | 	add	fp, #4
16c28     A7 12 02 FB | 	rdlong	arg01, fp
16c2c     04 4E 05 F1 | 	add	fp, #4
16c30     A7 14 02 FB | 	rdlong	arg02, fp
16c34     BC 4E 05 F1 | 	add	fp, #188
16c38     A7 16 02 FB | 	rdlong	arg03, fp
16c3c     C4 4E 85 F1 | 	sub	fp, #196
16c40     C4 EE BF FD | 	call	#__system___fmtstr
16c44                 | LR__2193
16c44     A7 F0 03 F6 | 	mov	ptra, fp
16c48     B2 00 A0 FD | 	call	#popregs_
16c4c                 | __system___fmtfloat_ret
16c4c     2D 00 64 FD | 	ret
16c50                 | 
16c50                 | __system__Left_S
16c50     04 4A 05 F6 | 	mov	COUNT_, #4
16c54     A8 00 A0 FD | 	call	#pushregs_
16c58     09 1F 02 F6 | 	mov	local01, arg01
16c5c     0A 21 02 F6 | 	mov	local02, arg02
16c60     01 20 56 F2 | 	cmps	local02, #1 wc
16c64     1F 01 00 CF 
16c68     16 FA 05 C6 |  if_b	mov	result1, ##@LR__4053
16c6c     5C 00 90 CD |  if_b	jmp	#LR__2203
16c70     0F 13 02 F6 | 	mov	arg01, local01
16c74     09 23 02 F6 | 	mov	local03, arg01
16c78     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
16c7c                 | LR__2200
16c7c     11 FB C9 FA | 	rdbyte	result1, local03 wz
16c80     01 22 06 51 |  if_ne	add	local03, #1
16c84     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
16c88                 | LR__2201
16c88     09 23 82 F1 | 	sub	local03, arg01
16c8c     11 FB 01 F6 | 	mov	result1, local03
16c90     10 FB 59 F2 | 	cmps	result1, local02 wcz
16c94     0F FB 01 E6 |  if_be	mov	result1, local01
16c98     30 00 90 ED |  if_be	jmp	#LR__2203
16c9c     10 13 02 F6 | 	mov	arg01, local02
16ca0     02 12 06 F1 | 	add	arg01, #2
16ca4     00 1A B0 FD | 	call	#__system___gc_alloc_managed
16ca8     FD 24 0A F6 | 	mov	local04, result1 wz
16cac     18 00 90 AD |  if_e	jmp	#LR__2202
16cb0     12 13 02 F6 | 	mov	arg01, local04
16cb4     0F 15 02 F6 | 	mov	arg02, local01
16cb8     10 17 02 F6 | 	mov	arg03, local02
16cbc     A0 DE BF FD | 	call	#__system____builtin_memmove
16cc0     12 21 02 F1 | 	add	local02, local04
16cc4     10 01 48 FC | 	wrbyte	#0, local02
16cc8                 | LR__2202
16cc8     12 FB 01 F6 | 	mov	result1, local04
16ccc                 | LR__2203
16ccc     A7 F0 03 F6 | 	mov	ptra, fp
16cd0     B2 00 A0 FD | 	call	#popregs_
16cd4                 | __system__Left_S_ret
16cd4     2D 00 64 FD | 	ret
16cd8                 | 
16cd8                 | __system__Right_S
16cd8     05 4A 05 F6 | 	mov	COUNT_, #5
16cdc     A8 00 A0 FD | 	call	#pushregs_
16ce0     09 1F 02 F6 | 	mov	local01, arg01
16ce4     0A 21 02 F6 | 	mov	local02, arg02
16ce8     01 20 56 F2 | 	cmps	local02, #1 wc
16cec     1F 01 00 CF 
16cf0     17 FA 05 C6 |  if_b	mov	result1, ##@LR__4054
16cf4     64 00 90 CD |  if_b	jmp	#LR__2213
16cf8     0F 13 02 F6 | 	mov	arg01, local01
16cfc     09 23 02 F6 | 	mov	local03, arg01
16d00     97 06 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
16d04                 | LR__2210
16d04     11 FB C9 FA | 	rdbyte	result1, local03 wz
16d08     01 22 06 51 |  if_ne	add	local03, #1
16d0c     F4 FF 9F 5D |  if_ne	jmp	#LR__2210
16d10                 | LR__2211
16d10     09 23 82 F1 | 	sub	local03, arg01
16d14     11 FB 01 F6 | 	mov	result1, local03
16d18     FD 24 02 F6 | 	mov	local04, result1
16d1c     10 25 5A F2 | 	cmps	local04, local02 wcz
16d20     0F FB 01 E6 |  if_be	mov	result1, local01
16d24     34 00 90 ED |  if_be	jmp	#LR__2213
16d28     10 13 02 F6 | 	mov	arg01, local02
16d2c     02 12 06 F1 | 	add	arg01, #2
16d30     74 19 B0 FD | 	call	#__system___gc_alloc_managed
16d34     FD 26 0A F6 | 	mov	local05, result1 wz
16d38     1C 00 90 AD |  if_e	jmp	#LR__2212
16d3c     10 25 82 F1 | 	sub	local04, local02
16d40     0F 25 02 F1 | 	add	local04, local01
16d44     01 20 06 F1 | 	add	local02, #1
16d48     13 13 02 F6 | 	mov	arg01, local05
16d4c     12 15 02 F6 | 	mov	arg02, local04
16d50     10 17 02 F6 | 	mov	arg03, local02
16d54     08 DE BF FD | 	call	#__system____builtin_memmove
16d58                 | LR__2212
16d58     13 FB 01 F6 | 	mov	result1, local05
16d5c                 | LR__2213
16d5c     A7 F0 03 F6 | 	mov	ptra, fp
16d60     B2 00 A0 FD | 	call	#popregs_
16d64                 | __system__Right_S_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | __system__Mid_S
16d68     05 4A 05 F6 | 	mov	COUNT_, #5
16d6c     A8 00 A0 FD | 	call	#pushregs_
16d70     09 1F 02 F6 | 	mov	local01, arg01
16d74     0A 21 02 F6 | 	mov	local02, arg02
16d78     01 16 56 F2 | 	cmps	arg03, #1 wc
16d7c     1F 01 00 CF 
16d80     18 FA 05 C6 |  if_b	mov	result1, ##@LR__4055
16d84     80 00 90 CD |  if_b	jmp	#LR__2223
16d88     01 20 86 F1 | 	sub	local02, #1
16d8c     00 20 56 F3 | 	fges	local02, #0 wc
16d90     0F 13 02 F6 | 	mov	arg01, local01
16d94     09 23 02 F6 | 	mov	local03, arg01
16d98     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
16d9c                 | LR__2220
16d9c     11 FB C9 FA | 	rdbyte	result1, local03 wz
16da0     01 22 06 51 |  if_ne	add	local03, #1
16da4     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
16da8                 | LR__2221
16da8     09 23 82 F1 | 	sub	local03, arg01
16dac     11 FB 01 F6 | 	mov	result1, local03
16db0     FD 14 02 F6 | 	mov	arg02, result1
16db4     10 15 52 F2 | 	cmps	arg02, local02 wc
16db8     1F 01 00 CF 
16dbc     19 FA 05 C6 |  if_b	mov	result1, ##@LR__4056
16dc0     44 00 90 CD |  if_b	jmp	#LR__2223
16dc4     0A 25 02 F6 | 	mov	local04, arg02
16dc8     10 25 82 F1 | 	sub	local04, local02
16dcc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
16dd0     0B 25 02 16 |  if_a	mov	local04, arg03
16dd4     12 13 02 F6 | 	mov	arg01, local04
16dd8     02 12 06 F1 | 	add	arg01, #2
16ddc     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
16de0     FD 26 0A F6 | 	mov	local05, result1 wz
16de4     1C 00 90 AD |  if_e	jmp	#LR__2222
16de8     0F 21 02 F1 | 	add	local02, local01
16dec     13 13 02 F6 | 	mov	arg01, local05
16df0     10 15 02 F6 | 	mov	arg02, local02
16df4     12 17 02 F6 | 	mov	arg03, local04
16df8     64 DD BF FD | 	call	#__system____builtin_memmove
16dfc     13 25 02 F1 | 	add	local04, local05
16e00     12 01 48 FC | 	wrbyte	#0, local04
16e04                 | LR__2222
16e04     13 FB 01 F6 | 	mov	result1, local05
16e08                 | LR__2223
16e08     A7 F0 03 F6 | 	mov	ptra, fp
16e0c     B2 00 A0 FD | 	call	#popregs_
16e10                 | __system__Mid_S_ret
16e10     2D 00 64 FD | 	ret
16e14                 | 
16e14                 | __system__Chr_S
16e14     01 4A 05 F6 | 	mov	COUNT_, #1
16e18     A8 00 A0 FD | 	call	#pushregs_
16e1c     09 1F 02 F6 | 	mov	local01, arg01
16e20     03 12 06 F6 | 	mov	arg01, #3
16e24     80 18 B0 FD | 	call	#__system___gc_alloc_managed
16e28     00 FA 4D F2 | 	cmps	result1, #0 wz
16e2c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
16e30     01 FA 05 51 |  if_ne	add	result1, #1
16e34     FD 00 48 5C |  if_ne	wrbyte	#0, result1
16e38     01 FA 85 51 |  if_ne	sub	result1, #1
16e3c     A7 F0 03 F6 | 	mov	ptra, fp
16e40     B2 00 A0 FD | 	call	#popregs_
16e44                 | __system__Chr_S_ret
16e44     2D 00 64 FD | 	ret
16e48                 | 
16e48                 | __system__Number_S
16e48     08 4A 05 F6 | 	mov	COUNT_, #8
16e4c     A8 00 A0 FD | 	call	#pushregs_
16e50     09 1F 02 F6 | 	mov	local01, arg01
16e54     0A 21 0A F6 | 	mov	local02, arg02 wz
16e58     0B 23 02 F6 | 	mov	local03, arg03
16e5c     3C 00 90 5D |  if_ne	jmp	#LR__2232
16e60     01 20 06 F6 | 	mov	local02, #1
16e64     11 25 02 F6 | 	mov	local04, local03
16e68     01 26 06 F6 | 	mov	local05, #1
16e6c     97 16 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
16e70                 | LR__2230
16e70     00 28 06 F6 | 	mov	local06, #0
16e74     0F 25 1A F2 | 	cmp	local04, local01 wcz
16e78     01 28 66 E6 |  if_be	neg	local06, #1
16e7c     12 27 12 F2 | 	cmp	local05, local04 wc
16e80     15 2B A2 F1 | 	subx	local07, local07
16e84     15 29 CA F7 | 	test	local06, local07 wz
16e88     11 25 02 5D |  if_ne	qmul	local04, local03
16e8c     12 27 02 56 |  if_ne	mov	local05, local04
16e90     01 20 06 51 |  if_ne	add	local02, #1
16e94     18 24 62 5D |  if_ne	getqx	local04
16e98     D4 FF 9F 5D |  if_ne	jmp	#LR__2230
16e9c                 | LR__2231
16e9c                 | LR__2232
16e9c     20 20 36 F3 | 	fle	local02, #32 wc
16ea0     10 13 02 F6 | 	mov	arg01, local02
16ea4     02 12 06 F1 | 	add	arg01, #2
16ea8     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
16eac     FD 28 02 F6 | 	mov	local06, result1
16eb0     10 2B 02 F6 | 	mov	local07, local02
16eb4     14 2B 02 F1 | 	add	local07, local06
16eb8     15 01 48 FC | 	wrbyte	#0, local07
16ebc     97 1A 48 FB | 	callpa	#(@LR__2234-@LR__2233)>>2,fcache_load_ptr_
16ec0                 | LR__2233
16ec0     01 20 16 F2 | 	cmp	local02, #1 wc
16ec4     2C 00 90 CD |  if_b	jmp	#LR__2235
16ec8     11 1F 12 FD | 	qdiv	local01, local03
16ecc     01 20 86 F1 | 	sub	local02, #1
16ed0     10 2B 02 F6 | 	mov	local07, local02
16ed4     14 2B 02 F1 | 	add	local07, local06
16ed8     19 2C 62 FD | 	getqy	local08
16edc     0A 2C 16 F2 | 	cmp	local08, #10 wc
16ee0     30 2C 06 C1 |  if_b	add	local08, #48
16ee4     37 2C 06 31 |  if_ae	add	local08, #55
16ee8     15 2D 42 FC | 	wrbyte	local08, local07
16eec     18 1E 62 FD | 	getqx	local01
16ef0     CC FF 9F FD | 	jmp	#LR__2233
16ef4                 | LR__2234
16ef4                 | LR__2235
16ef4     14 FB 01 F6 | 	mov	result1, local06
16ef8     A7 F0 03 F6 | 	mov	ptra, fp
16efc     B2 00 A0 FD | 	call	#popregs_
16f00                 | __system__Number_S_ret
16f00     2D 00 64 FD | 	ret
16f04                 | 
16f04                 | __system__LCase_S
16f04     07 4A 05 F6 | 	mov	COUNT_, #7
16f08     A8 00 A0 FD | 	call	#pushregs_
16f0c     09 1F 02 F6 | 	mov	local01, arg01
16f10     09 21 02 F6 | 	mov	local02, arg01
16f14     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
16f18                 | LR__2240
16f18     10 FB C9 FA | 	rdbyte	result1, local02 wz
16f1c     01 20 06 51 |  if_ne	add	local02, #1
16f20     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
16f24                 | LR__2241
16f24     09 21 82 F1 | 	sub	local02, arg01
16f28     10 FB 01 F6 | 	mov	result1, local02
16f2c     FD 20 0A F6 | 	mov	local02, result1 wz
16f30     1F 01 00 AF 
16f34     1A FA 05 A6 |  if_e	mov	result1, ##@LR__4057
16f38     7C 00 90 AD |  if_e	jmp	#LR__2247
16f3c     10 13 02 F6 | 	mov	arg01, local02
16f40     02 12 06 F1 | 	add	arg01, #2
16f44     60 17 B0 FD | 	call	#__system___gc_alloc_managed
16f48     FD 22 0A F6 | 	mov	local03, result1 wz
16f4c     64 00 90 AD |  if_e	jmp	#LR__2246
16f50     01 24 66 F6 | 	neg	local04, #1
16f54     97 26 48 FB | 	callpa	#(@LR__2245-@LR__2242)>>2,fcache_load_ptr_
16f58                 | LR__2242
16f58     01 24 06 F1 | 	add	local04, #1
16f5c     12 27 02 F6 | 	mov	local05, local04
16f60     0F 27 02 F1 | 	add	local05, local01
16f64     13 29 C2 FA | 	rdbyte	local06, local05
16f68     41 28 56 F2 | 	cmps	local06, #65 wc
16f6c     18 00 90 CD |  if_b	jmp	#LR__2243
16f70     5B 28 56 F2 | 	cmps	local06, #91 wc
16f74     12 2B 02 C6 |  if_b	mov	local07, local04
16f78     11 2B 02 C1 |  if_b	add	local07, local03
16f7c     20 28 06 C1 |  if_b	add	local06, #32
16f80     15 29 42 CC |  if_b	wrbyte	local06, local07
16f84     0C 00 90 CD |  if_b	jmp	#LR__2244
16f88                 | LR__2243
16f88     12 2B 02 F6 | 	mov	local07, local04
16f8c     11 2B 02 F1 | 	add	local07, local03
16f90     15 29 42 FC | 	wrbyte	local06, local07
16f94                 | LR__2244
16f94     10 29 02 F6 | 	mov	local06, local02
16f98     01 28 86 F1 | 	sub	local06, #1
16f9c     14 25 0A F2 | 	cmp	local04, local06 wz
16fa0     B4 FF 9F 5D |  if_ne	jmp	#LR__2242
16fa4                 | LR__2245
16fa4     11 21 02 F1 | 	add	local02, local03
16fa8     10 01 48 FC | 	wrbyte	#0, local02
16fac     11 FB 01 F6 | 	mov	result1, local03
16fb0     04 00 90 FD | 	jmp	#LR__2247
16fb4                 | LR__2246
16fb4     11 FB 01 F6 | 	mov	result1, local03
16fb8                 | LR__2247
16fb8     A7 F0 03 F6 | 	mov	ptra, fp
16fbc     B2 00 A0 FD | 	call	#popregs_
16fc0                 | __system__LCase_S_ret
16fc0     2D 00 64 FD | 	ret
16fc4                 | 
16fc4                 | __system__LTrim_S
16fc4     05 4A 05 F6 | 	mov	COUNT_, #5
16fc8     A8 00 A0 FD | 	call	#pushregs_
16fcc     09 1F 02 F6 | 	mov	local01, arg01
16fd0     09 21 02 F6 | 	mov	local02, arg01
16fd4     97 06 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
16fd8                 | LR__2250
16fd8     10 FB C9 FA | 	rdbyte	result1, local02 wz
16fdc     01 20 06 51 |  if_ne	add	local02, #1
16fe0     F4 FF 9F 5D |  if_ne	jmp	#LR__2250
16fe4                 | LR__2251
16fe4     09 21 82 F1 | 	sub	local02, arg01
16fe8     10 FB 01 F6 | 	mov	result1, local02
16fec     FD 20 0A F6 | 	mov	local02, result1 wz
16ff0     1F 01 00 AF 
16ff4     1B FA 05 A6 |  if_e	mov	result1, ##@LR__4058
16ff8     7C 00 90 AD |  if_e	jmp	#LR__2256
16ffc     00 22 06 F6 | 	mov	local03, #0
17000     10 25 02 F6 | 	mov	local04, local02
17004                 | LR__2252
17004     12 23 52 F2 | 	cmps	local03, local04 wc
17008     68 00 90 3D |  if_ae	jmp	#LR__2255
1700c     11 17 02 F6 | 	mov	arg03, local03
17010     0F 17 02 F1 | 	add	arg03, local01
17014     0B 17 C2 FA | 	rdbyte	arg03, arg03
17018     20 16 0E F2 | 	cmp	arg03, #32 wz
1701c     4C 00 90 AD |  if_e	jmp	#LR__2254
17020     10 13 02 F6 | 	mov	arg01, local02
17024     11 13 82 F1 | 	sub	arg01, local03
17028     02 12 06 F1 | 	add	arg01, #2
1702c     78 16 B0 FD | 	call	#__system___gc_alloc_managed
17030     FD 26 0A F6 | 	mov	local05, result1 wz
17034     2C 00 90 AD |  if_e	jmp	#LR__2253
17038     11 15 02 F6 | 	mov	arg02, local03
1703c     0F 15 02 F1 | 	add	arg02, local01
17040     10 17 02 F6 | 	mov	arg03, local02
17044     11 17 82 F1 | 	sub	arg03, local03
17048     13 13 02 F6 | 	mov	arg01, local05
1704c     10 DB BF FD | 	call	#__system____builtin_memmove
17050     11 21 82 F1 | 	sub	local02, local03
17054     13 21 02 F1 | 	add	local02, local05
17058     10 01 48 FC | 	wrbyte	#0, local02
1705c     13 FB 01 F6 | 	mov	result1, local05
17060     14 00 90 FD | 	jmp	#LR__2256
17064                 | LR__2253
17064     13 FB 01 F6 | 	mov	result1, local05
17068     0C 00 90 FD | 	jmp	#LR__2256
1706c                 | LR__2254
1706c     01 22 06 F1 | 	add	local03, #1
17070     90 FF 9F FD | 	jmp	#LR__2252
17074                 | LR__2255
17074     0F FB 01 F6 | 	mov	result1, local01
17078                 | LR__2256
17078     A7 F0 03 F6 | 	mov	ptra, fp
1707c     B2 00 A0 FD | 	call	#popregs_
17080                 | __system__LTrim_S_ret
17080     2D 00 64 FD | 	ret
17084                 | 
17084                 | __system__RTrim_S
17084     04 4A 05 F6 | 	mov	COUNT_, #4
17088     A8 00 A0 FD | 	call	#pushregs_
1708c     09 1F 02 F6 | 	mov	local01, arg01
17090     09 21 02 F6 | 	mov	local02, arg01
17094     97 06 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
17098                 | LR__2260
17098     10 FB C9 FA | 	rdbyte	result1, local02 wz
1709c     01 20 06 51 |  if_ne	add	local02, #1
170a0     F4 FF 9F 5D |  if_ne	jmp	#LR__2260
170a4                 | LR__2261
170a4     09 21 82 F1 | 	sub	local02, arg01
170a8     10 FB 01 F6 | 	mov	result1, local02
170ac     FD 20 0A F6 | 	mov	local02, result1 wz
170b0     1F 01 00 AF 
170b4     1C FA 05 A6 |  if_e	mov	result1, ##@LR__4059
170b8     74 00 90 AD |  if_e	jmp	#LR__2265
170bc     10 23 02 F6 | 	mov	local03, local02
170c0     01 22 86 F1 | 	sub	local03, #1
170c4                 | LR__2262
170c4     11 15 02 F6 | 	mov	arg02, local03
170c8     0F 15 02 F1 | 	add	arg02, local01
170cc     0A 21 C2 FA | 	rdbyte	local02, arg02
170d0     20 20 0E F2 | 	cmp	local02, #32 wz
170d4     44 00 90 AD |  if_e	jmp	#LR__2264
170d8     11 13 02 F6 | 	mov	arg01, local03
170dc     02 12 06 F1 | 	add	arg01, #2
170e0     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
170e4     FD 24 0A F6 | 	mov	local04, result1 wz
170e8     28 00 90 AD |  if_e	jmp	#LR__2263
170ec     11 17 02 F6 | 	mov	arg03, local03
170f0     01 16 06 F1 | 	add	arg03, #1
170f4     12 13 02 F6 | 	mov	arg01, local04
170f8     0F 15 02 F6 | 	mov	arg02, local01
170fc     60 DA BF FD | 	call	#__system____builtin_memmove
17100     01 22 06 F1 | 	add	local03, #1
17104     12 23 02 F1 | 	add	local03, local04
17108     11 01 48 FC | 	wrbyte	#0, local03
1710c     12 FB 01 F6 | 	mov	result1, local04
17110     1C 00 90 FD | 	jmp	#LR__2265
17114                 | LR__2263
17114     12 FB 01 F6 | 	mov	result1, local04
17118     14 00 90 FD | 	jmp	#LR__2265
1711c                 | LR__2264
1711c     01 22 86 F1 | 	sub	local03, #1
17120     00 22 56 F2 | 	cmps	local03, #0 wc
17124     9C FF 9F 3D |  if_ae	jmp	#LR__2262
17128     1F 01 00 FF 
1712c     1D FA 05 F6 | 	mov	result1, ##@LR__4060
17130                 | LR__2265
17130     A7 F0 03 F6 | 	mov	ptra, fp
17134     B2 00 A0 FD | 	call	#popregs_
17138                 | __system__RTrim_S_ret
17138     2D 00 64 FD | 	ret
1713c                 | 
1713c                 | __system__Instr
1713c     07 4A 05 F6 | 	mov	COUNT_, #7
17140     A8 00 A0 FD | 	call	#pushregs_
17144     09 1F 02 F6 | 	mov	local01, arg01
17148     0A 21 02 F6 | 	mov	local02, arg02
1714c     0B 23 02 F6 | 	mov	local03, arg03
17150     11 13 02 F6 | 	mov	arg01, local03
17154     09 25 02 F6 | 	mov	local04, arg01
17158     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1715c                 | LR__2270
1715c     12 FB C9 FA | 	rdbyte	result1, local04 wz
17160     01 24 06 51 |  if_ne	add	local04, #1
17164     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
17168                 | LR__2271
17168     09 25 82 F1 | 	sub	local04, arg01
1716c     12 27 02 F6 | 	mov	local05, local04
17170     10 13 02 F6 | 	mov	arg01, local02
17174     09 25 02 F6 | 	mov	local04, arg01
17178     97 06 48 FB | 	callpa	#(@LR__2273-@LR__2272)>>2,fcache_load_ptr_
1717c                 | LR__2272
1717c     12 FB C9 FA | 	rdbyte	result1, local04 wz
17180     01 24 06 51 |  if_ne	add	local04, #1
17184     F4 FF 9F 5D |  if_ne	jmp	#LR__2272
17188                 | LR__2273
17188     09 25 82 F1 | 	sub	local04, arg01
1718c     12 FB 01 F6 | 	mov	result1, local04
17190     FD 18 0A F6 | 	mov	arg04, result1 wz
17194     00 FA 05 A6 |  if_e	mov	result1, #0
17198     98 00 90 AD |  if_e	jmp	#LR__2277
1719c     00 26 0E F2 | 	cmp	local05, #0 wz
171a0     00 FA 05 A6 |  if_e	mov	result1, #0
171a4     8C 00 90 AD |  if_e	jmp	#LR__2277
171a8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
171ac     00 FA 05 16 |  if_a	mov	result1, #0
171b0     80 00 90 1D |  if_a	jmp	#LR__2277
171b4     01 1E 56 F2 | 	cmps	local01, #1 wc
171b8     01 1E 06 C6 |  if_b	mov	local01, #1
171bc     11 29 C2 FA | 	rdbyte	local06, local03
171c0     01 26 0E F2 | 	cmp	local05, #1 wz
171c4     18 00 90 5D |  if_ne	jmp	#LR__2274
171c8     10 13 02 F6 | 	mov	arg01, local02
171cc     14 15 02 F6 | 	mov	arg02, local06
171d0     0F 17 02 F6 | 	mov	arg03, local01
171d4     00 18 06 F6 | 	mov	arg04, #0
171d8     68 30 B0 FD | 	call	#__system____ScanForChar
171dc     54 00 90 FD | 	jmp	#LR__2277
171e0                 | LR__2274
171e0     0F 2B 02 F6 | 	mov	local07, local01
171e4                 | LR__2275
171e4     10 13 02 F6 | 	mov	arg01, local02
171e8     14 15 02 F6 | 	mov	arg02, local06
171ec     15 17 02 F6 | 	mov	arg03, local07
171f0     00 18 06 F6 | 	mov	arg04, #0
171f4     4C 30 B0 FD | 	call	#__system____ScanForChar
171f8     FD 2A 0A F6 | 	mov	local07, result1 wz
171fc     30 00 90 AD |  if_e	jmp	#LR__2276
17200     13 17 02 F6 | 	mov	arg03, local05
17204     10 13 02 F6 | 	mov	arg01, local02
17208     15 15 02 F6 | 	mov	arg02, local07
1720c     58 FB BF FD | 	call	#__system__Mid_S
17210     FD 12 02 F6 | 	mov	arg01, result1
17214     11 15 02 F6 | 	mov	arg02, local03
17218     4C DA BF FD | 	call	#__system___string_cmp
1721c     00 FA 0D F2 | 	cmp	result1, #0 wz
17220     15 FB 01 A6 |  if_e	mov	result1, local07
17224     0C 00 90 AD |  if_e	jmp	#LR__2277
17228     13 2B 02 F1 | 	add	local07, local05
1722c     B4 FF 9F FD | 	jmp	#LR__2275
17230                 | LR__2276
17230     00 FA 05 F6 | 	mov	result1, #0
17234                 | LR__2277
17234     A7 F0 03 F6 | 	mov	ptra, fp
17238     B2 00 A0 FD | 	call	#popregs_
1723c                 | __system__Instr_ret
1723c     2D 00 64 FD | 	ret
17240                 | 
17240                 | __system___strerror
17240     00 12 56 F2 | 	cmps	arg01, #0 wc
17244     08 00 90 CD |  if_b	jmp	#LR__2280
17248     1A 12 56 F2 | 	cmps	arg01, #26 wc
1724c     04 00 90 CD |  if_b	jmp	#LR__2281
17250                 | LR__2280
17250     19 12 06 F6 | 	mov	arg01, #25
17254                 | LR__2281
17254     02 12 66 F0 | 	shl	arg01, #2
17258     01 00 00 FF 
1725c     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
17260     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17264     09 FB 01 FB | 	rdlong	result1, arg01
17268     01 00 00 FF 
1726c     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
17270                 | __system___strerror_ret
17270     2D 00 64 FD | 	ret
17274                 | 
17274                 | __system___int64_shl
17274     20 16 CE F7 | 	test	arg03, #32 wz
17278     09 15 02 56 |  if_ne	mov	arg02, arg01
1727c     00 12 06 56 |  if_ne	mov	arg01, #0
17280     1F 16 CE F7 | 	test	arg03, #31 wz
17284     18 00 90 AD |  if_e	jmp	#LR__2290
17288     0B 15 62 F0 | 	shl	arg02, arg03
1728c     09 FB 01 F6 | 	mov	result1, arg01
17290     0B FD 61 F6 | 	neg	result2, arg03
17294     FE FA 41 F0 | 	shr	result1, result2
17298     FD 14 42 F5 | 	or	arg02, result1
1729c     0B 13 62 F0 | 	shl	arg01, arg03
172a0                 | LR__2290
172a0     0A FD 01 F6 | 	mov	result2, arg02
172a4     09 FB 01 F6 | 	mov	result1, arg01
172a8                 | __system___int64_shl_ret
172a8     2D 00 64 FD | 	ret
172ac                 | 
172ac                 | __system___usepins
172ac     14 E8 05 F1 | 	add	ptr___system__dat__, #20
172b0     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
172b4     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
172b8     00 13 CA F7 | 	test	arg01, _var01 wz
172bc     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
172c0     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
172c4     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
172c8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
172cc     00 FA 05 56 |  if_ne	mov	result1, #0
172d0     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
172d4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
172d8     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
172dc     09 03 42 F5 | 	or	_var02, arg01
172e0     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
172e4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
172e8     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
172ec     0A 03 42 F5 | 	or	_var02, arg02
172f0     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
172f4     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
172f8     01 FA 65 F6 | 	neg	result1, #1
172fc                 | __system___usepins_ret
172fc     2D 00 64 FD | 	ret
17300                 | 
17300                 | __system___freepins
17300     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17304     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17308     09 01 22 F5 | 	andn	_var01, arg01
1730c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17310     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17314     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17318     0A 01 22 F5 | 	andn	_var01, arg02
1731c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17320     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17324                 | __system___freepins_ret
17324     2D 00 64 FD | 	ret
17328                 | 
17328                 | __system___float_fromuns
17328     09 17 0A F6 | 	mov	arg03, arg01 wz
1732c     0B FB 01 A6 |  if_e	mov	result1, arg03
17330     24 00 90 AD |  if_e	jmp	#LR__2300
17334     0B 15 92 F7 | 	encod	arg02, arg03 wc
17338     01 14 06 C1 |  if_b	add	arg02, #1
1733c     01 14 86 F1 | 	sub	arg02, #1
17340     1F 12 06 F6 | 	mov	arg01, #31
17344     0A 13 82 F1 | 	sub	arg01, arg02
17348     09 17 62 F0 | 	shl	arg03, arg01
1734c     02 16 46 F0 | 	shr	arg03, #2
17350     00 12 06 F6 | 	mov	arg01, #0
17354     74 08 B0 FD | 	call	#__system___float_Pack
17358                 | LR__2300
17358                 | __system___float_fromuns_ret
17358     2D 00 64 FD | 	ret
1735c                 | 
1735c                 | __system___float_add
1735c     0F 4A 05 F6 | 	mov	COUNT_, #15
17360     A8 00 A0 FD | 	call	#pushregs_
17364     09 1F 02 F6 | 	mov	local01, arg01
17368     0A 21 02 F6 | 	mov	local02, arg02
1736c     00 22 06 F6 | 	mov	local03, #0
17370     0F 25 02 F6 | 	mov	local04, local01
17374     12 27 02 F6 | 	mov	local05, local04
17378     16 26 46 F7 | 	zerox	local05, #22
1737c     12 29 02 F6 | 	mov	local06, local04
17380     01 28 66 F0 | 	shl	local06, #1
17384     18 28 46 F0 | 	shr	local06, #24
17388     1F 24 46 F0 | 	shr	local04, #31
1738c     10 13 02 F6 | 	mov	arg01, local02
17390     09 FB 01 F6 | 	mov	result1, arg01
17394     FD 2A 02 F6 | 	mov	local07, result1
17398     15 2D 02 F6 | 	mov	local08, local07
1739c     16 2C 46 F7 | 	zerox	local08, #22
173a0     15 2F 02 F6 | 	mov	local09, local07
173a4     01 2E 66 F0 | 	shl	local09, #1
173a8     18 2E 46 F0 | 	shr	local09, #24
173ac     17 31 02 F6 | 	mov	local10, local09
173b0     1F 2A 46 F0 | 	shr	local07, #31
173b4     00 32 06 F6 | 	mov	local11, #0
173b8     00 34 06 F6 | 	mov	local12, #0
173bc     18 29 12 F2 | 	cmp	local06, local10 wc
173c0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
173c4     2C 00 90 1D |  if_a	jmp	#LR__2310
173c8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
173cc     24 00 90 3D |  if_ae	jmp	#LR__2310
173d0     13 37 02 F6 | 	mov	local13, local05
173d4     16 27 02 F6 | 	mov	local05, local08
173d8     1B 2D 02 F6 | 	mov	local08, local13
173dc     14 37 02 F6 | 	mov	local13, local06
173e0     18 29 02 F6 | 	mov	local06, local10
173e4     1B 31 02 F6 | 	mov	local10, local13
173e8     12 37 02 F6 | 	mov	local13, local04
173ec     15 25 02 F6 | 	mov	local04, local07
173f0     1B 2B 02 F6 | 	mov	local07, local13
173f4                 | LR__2310
173f4     FF 28 0E F2 | 	cmp	local06, #255 wz
173f8     70 01 90 AD |  if_e	jmp	#LR__2325
173fc     00 28 0E F2 | 	cmp	local06, #0 wz
17400     AC 01 90 AD |  if_e	jmp	#LR__2327
17404     17 26 26 F4 | 	bith	local05, #23
17408                 | LR__2311
17408     00 30 0E F2 | 	cmp	local10, #0 wz
1740c     F0 01 90 AD |  if_e	jmp	#LR__2331
17410     17 2C 26 F4 | 	bith	local08, #23
17414                 | LR__2312
17414     7F 28 86 F1 | 	sub	local06, #127
17418     7F 30 86 F1 | 	sub	local10, #127
1741c     14 39 02 F6 | 	mov	local14, local06
17420     18 39 82 F1 | 	sub	local14, local10
17424     97 14 48 FB | 	callpa	#(@LR__2314-@LR__2313)>>2,fcache_load_ptr_
17428                 | LR__2313
17428     20 38 56 F2 | 	cmps	local14, #32 wc
1742c     20 00 90 CD |  if_b	jmp	#LR__2315
17430     16 2F 02 F6 | 	mov	local09, local08
17434     00 32 0E F2 | 	cmp	local11, #0 wz
17438     6F 32 62 FD | 	wrnz	local11
1743c     19 2F 42 F5 | 	or	local09, local11
17440     17 33 02 F6 | 	mov	local11, local09
17444     00 2C 06 F6 | 	mov	local08, #0
17448     20 38 86 F1 | 	sub	local14, #32
1744c     D8 FF 9F FD | 	jmp	#LR__2313
17450                 | LR__2314
17450                 | LR__2315
17450     00 38 0E F2 | 	cmp	local14, #0 wz
17454     38 00 90 AD |  if_e	jmp	#LR__2316
17458     16 37 02 F6 | 	mov	local13, local08
1745c     20 30 06 F6 | 	mov	local10, #32
17460     1C 31 82 F1 | 	sub	local10, local14
17464     18 37 62 F0 | 	shl	local13, local10
17468     19 31 02 F6 | 	mov	local10, local11
1746c     20 2E 06 F6 | 	mov	local09, #32
17470     1C 2F 82 F1 | 	sub	local09, local14
17474     17 31 6A F0 | 	shl	local10, local09 wz
17478     1C 33 42 F0 | 	shr	local11, local14
1747c     1C 2D 42 F0 | 	shr	local08, local14
17480     1B 33 42 F5 | 	or	local11, local13
17484     00 3A 06 F6 | 	mov	local15, #0
17488     01 3A 06 56 |  if_ne	mov	local15, #1
1748c     1D 33 42 F5 | 	or	local11, local15
17490                 | LR__2316
17490     12 3B 02 F6 | 	mov	local15, local04
17494     15 3B 62 F5 | 	xor	local15, local07
17498     01 3A CE F7 | 	test	local15, #1 wz
1749c     18 00 90 AD |  if_e	jmp	#LR__2317
174a0     16 2D 22 F6 | 	not	local08, local08
174a4     19 33 22 F6 | 	not	local11, local11
174a8     01 32 0E F1 | 	add	local11, #1 wz
174ac     00 3A 06 F6 | 	mov	local15, #0
174b0     01 3A 06 A6 |  if_e	mov	local15, #1
174b4     1D 2D 02 F1 | 	add	local08, local15
174b8                 | LR__2317
174b8     19 35 12 F1 | 	add	local12, local11 wc
174bc     16 27 22 F1 | 	addx	local05, local08
174c0     00 26 56 F2 | 	cmps	local05, #0 wc
174c4     1C 00 90 3D |  if_ae	jmp	#LR__2318
174c8     01 24 66 F5 | 	xor	local04, #1
174cc     13 27 22 F6 | 	not	local05, local05
174d0     1A 35 22 F6 | 	not	local12, local12
174d4     01 34 0E F1 | 	add	local12, #1 wz
174d8     00 3A 06 F6 | 	mov	local15, #0
174dc     01 3A 06 A6 |  if_e	mov	local15, #1
174e0     1D 27 02 F1 | 	add	local05, local15
174e4                 | LR__2318
174e4     00 80 00 FF 
174e8     00 26 16 F2 | 	cmp	local05, ##16777216 wc
174ec     28 00 90 CD |  if_b	jmp	#LR__2319
174f0     01 28 06 F1 | 	add	local06, #1
174f4     1A 39 02 F6 | 	mov	local14, local12
174f8     01 38 06 F5 | 	and	local14, #1
174fc     01 34 46 F0 | 	shr	local12, #1
17500     13 3B 02 F6 | 	mov	local15, local05
17504     1F 3A 66 F0 | 	shl	local15, #31
17508     1D 35 42 F5 | 	or	local12, local15
1750c     1C 35 42 F5 | 	or	local12, local14
17510     01 26 46 F0 | 	shr	local05, #1
17514     3C 00 90 FD | 	jmp	#LR__2324
17518                 | LR__2319
17518     00 40 00 FF 
1751c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17520     30 00 90 3D |  if_ae	jmp	#LR__2323
17524     00 26 0E F2 | 	cmp	local05, #0 wz
17528     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1752c     08 24 46 A5 |  if_e	or	local04, #8
17530     01 24 26 A5 |  if_e	andn	local04, #1
17534     1C 00 90 AD |  if_e	jmp	#LR__2322
17538                 | LR__2320
17538     00 40 00 FF 
1753c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17540     10 00 90 3D |  if_ae	jmp	#LR__2321
17544     1A 35 12 F1 | 	add	local12, local12 wc
17548     13 27 22 F1 | 	addx	local05, local05
1754c     01 28 86 F1 | 	sub	local06, #1
17550     E4 FF 9F FD | 	jmp	#LR__2320
17554                 | LR__2321
17554                 | LR__2322
17554                 | LR__2323
17554                 | LR__2324
17554     13 13 02 F6 | 	mov	arg01, local05
17558     1A 15 02 F6 | 	mov	arg02, local12
1755c     14 17 02 F6 | 	mov	arg03, local06
17560     12 19 02 F6 | 	mov	arg04, local04
17564     20 31 B0 FD | 	call	#__system__pack_0415
17568     DC 00 90 FD | 	jmp	#LR__2335
1756c                 | LR__2325
1756c     FF 30 0E F2 | 	cmp	local10, #255 wz
17570     10 00 90 5D |  if_ne	jmp	#LR__2326
17574     12 2B 0A F2 | 	cmp	local07, local04 wz
17578     00 F8 3F 5F 
1757c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17580     C4 00 90 5D |  if_ne	jmp	#LR__2335
17584                 | LR__2326
17584     00 26 0E F2 | 	cmp	local05, #0 wz
17588     00 F8 3F 5F 
1758c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17590     B4 00 90 5D |  if_ne	jmp	#LR__2335
17594     1A 15 02 F6 | 	mov	arg02, local12
17598     14 17 02 F6 | 	mov	arg03, local06
1759c     12 19 02 F6 | 	mov	arg04, local04
175a0     02 18 46 F5 | 	or	arg04, #2
175a4     13 13 02 F6 | 	mov	arg01, local05
175a8     DC 30 B0 FD | 	call	#__system__pack_0415
175ac     98 00 90 FD | 	jmp	#LR__2335
175b0                 | LR__2327
175b0     00 26 0E F2 | 	cmp	local05, #0 wz
175b4     28 00 90 AD |  if_e	jmp	#LR__2330
175b8     01 26 66 F0 | 	shl	local05, #1
175bc     97 0E 48 FB | 	callpa	#(@LR__2329-@LR__2328)>>2,fcache_load_ptr_
175c0                 | LR__2328
175c0     00 40 00 FF 
175c4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
175c8     14 3B 02 C6 |  if_b	mov	local15, local06
175cc     01 3A 86 C1 |  if_b	sub	local15, #1
175d0     1D 29 02 C6 |  if_b	mov	local06, local15
175d4     01 26 66 C0 |  if_b	shl	local05, #1
175d8     E4 FF 9F CD |  if_b	jmp	#LR__2328
175dc                 | LR__2329
175dc     28 FE 9F FD | 	jmp	#LR__2311
175e0                 | LR__2330
175e0     15 25 02 F5 | 	and	local04, local07
175e4     12 19 02 F6 | 	mov	arg04, local04
175e8     08 18 46 F5 | 	or	arg04, #8
175ec     00 12 06 F6 | 	mov	arg01, #0
175f0     00 14 06 F6 | 	mov	arg02, #0
175f4     00 16 06 F6 | 	mov	arg03, #0
175f8     8C 30 B0 FD | 	call	#__system__pack_0415
175fc     48 00 90 FD | 	jmp	#LR__2335
17600                 | LR__2331
17600     00 2C 0E F2 | 	cmp	local08, #0 wz
17604     28 00 90 AD |  if_e	jmp	#LR__2334
17608     01 2C 66 F0 | 	shl	local08, #1
1760c     97 0E 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
17610                 | LR__2332
17610     00 40 00 FF 
17614     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
17618     18 3B 02 C6 |  if_b	mov	local15, local10
1761c     01 3A 86 C1 |  if_b	sub	local15, #1
17620     1D 31 02 C6 |  if_b	mov	local10, local15
17624     01 2C 66 C0 |  if_b	shl	local08, #1
17628     E4 FF 9F CD |  if_b	jmp	#LR__2332
1762c                 | LR__2333
1762c     E4 FD 9F FD | 	jmp	#LR__2312
17630                 | LR__2334
17630     7F 28 86 F1 | 	sub	local06, #127
17634     13 13 02 F6 | 	mov	arg01, local05
17638     1A 15 02 F6 | 	mov	arg02, local12
1763c     14 17 02 F6 | 	mov	arg03, local06
17640     12 19 02 F6 | 	mov	arg04, local04
17644     40 30 B0 FD | 	call	#__system__pack_0415
17648                 | LR__2335
17648     A7 F0 03 F6 | 	mov	ptra, fp
1764c     B2 00 A0 FD | 	call	#popregs_
17650                 | __system___float_add_ret
17650     2D 00 64 FD | 	ret
17654                 | 
17654                 | __system___float_mul
17654     0B 4A 05 F6 | 	mov	COUNT_, #11
17658     A8 00 A0 FD | 	call	#pushregs_
1765c     09 1F 02 F6 | 	mov	local01, arg01
17660     0A 21 02 F6 | 	mov	local02, arg02
17664     0F 23 02 F6 | 	mov	local03, local01
17668     11 25 02 F6 | 	mov	local04, local03
1766c     16 24 46 F7 | 	zerox	local04, #22
17670     11 27 02 F6 | 	mov	local05, local03
17674     01 26 66 F0 | 	shl	local05, #1
17678     18 26 46 F0 | 	shr	local05, #24
1767c     1F 22 46 F0 | 	shr	local03, #31
17680     10 FB 01 F6 | 	mov	result1, local02
17684     FD 28 02 F6 | 	mov	local06, result1
17688     14 2B 02 F6 | 	mov	local07, local06
1768c     16 2A 46 F7 | 	zerox	local07, #22
17690     14 2D 02 F6 | 	mov	local08, local06
17694     01 2C 66 F0 | 	shl	local08, #1
17698     18 2C 46 F0 | 	shr	local08, #24
1769c     1F 28 46 F0 | 	shr	local06, #31
176a0     14 23 62 F5 | 	xor	local03, local06
176a4     FF 26 0E F2 | 	cmp	local05, #255 wz
176a8     90 00 90 AD |  if_e	jmp	#LR__2343
176ac     FF 2C 0E F2 | 	cmp	local08, #255 wz
176b0     D8 00 90 AD |  if_e	jmp	#LR__2345
176b4     00 26 0E F2 | 	cmp	local05, #0 wz
176b8     0C 01 90 AD |  if_e	jmp	#LR__2346
176bc     17 24 26 F4 | 	bith	local04, #23
176c0                 | LR__2340
176c0     00 2C 0E F2 | 	cmp	local08, #0 wz
176c4     44 01 90 AD |  if_e	jmp	#LR__2350
176c8     17 2A 26 F4 | 	bith	local07, #23
176cc                 | LR__2341
176cc     12 21 02 F6 | 	mov	local02, local04
176d0     04 20 66 F0 | 	shl	local02, #4
176d4     15 29 02 F6 | 	mov	local06, local07
176d8     05 28 66 F0 | 	shl	local06, #5
176dc     14 21 02 FD | 	qmul	local02, local06
176e0     16 27 02 F1 | 	add	local05, local08
176e4     FE 26 86 F1 | 	sub	local05, #254
176e8     13 2F 02 F6 | 	mov	local09, local05
176ec     04 24 66 F0 | 	shl	local04, #4
176f0     05 2A 66 F0 | 	shl	local07, #5
176f4     18 30 62 FD | 	getqx	local10
176f8     15 25 02 FD | 	qmul	local04, local07
176fc     19 32 62 FD | 	getqy	local11
17700     00 80 00 FF 
17704     00 32 16 F2 | 	cmp	local11, ##16777216 wc
17708     18 00 90 CD |  if_b	jmp	#LR__2342
1770c     01 2E 06 F1 | 	add	local09, #1
17710     01 30 46 F0 | 	shr	local10, #1
17714     19 2D 02 F6 | 	mov	local08, local11
17718     1F 2C 66 F0 | 	shl	local08, #31
1771c     16 31 42 F5 | 	or	local10, local08
17720     01 32 46 F0 | 	shr	local11, #1
17724                 | LR__2342
17724     19 13 02 F6 | 	mov	arg01, local11
17728     18 15 02 F6 | 	mov	arg02, local10
1772c     17 17 02 F6 | 	mov	arg03, local09
17730     11 19 02 F6 | 	mov	arg04, local03
17734     50 2F B0 FD | 	call	#__system__pack_0415
17738     10 01 90 FD | 	jmp	#LR__2354
1773c                 | LR__2343
1773c     00 24 0E F2 | 	cmp	local04, #0 wz
17740     0F FB 01 56 |  if_ne	mov	result1, local01
17744     04 01 90 5D |  if_ne	jmp	#LR__2354
17748     FF 2C 56 F2 | 	cmps	local08, #255 wc
1774c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
17750     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
17754     18 00 90 4D |  if_c_and_nz	jmp	#LR__2344
17758     00 F8 3F CF 
1775c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
17760     E8 00 90 CD |  if_b	jmp	#LR__2354
17764     00 2A 0E F2 | 	cmp	local07, #0 wz
17768     10 FB 01 56 |  if_ne	mov	result1, local02
1776c     DC 00 90 5D |  if_ne	jmp	#LR__2354
17770                 | LR__2344
17770     02 22 46 F5 | 	or	local03, #2
17774     00 12 06 F6 | 	mov	arg01, #0
17778     00 14 06 F6 | 	mov	arg02, #0
1777c     13 17 02 F6 | 	mov	arg03, local05
17780     11 19 02 F6 | 	mov	arg04, local03
17784     00 2F B0 FD | 	call	#__system__pack_0415
17788     C0 00 90 FD | 	jmp	#LR__2354
1778c                 | LR__2345
1778c     00 26 0E F2 | 	cmp	local05, #0 wz
17790     00 24 0E A2 |  if_e	cmp	local04, #0 wz
17794     00 F8 3F AF 
17798     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1779c     AC 00 90 AD |  if_e	jmp	#LR__2354
177a0     00 2A 0E F2 | 	cmp	local07, #0 wz
177a4     10 FB 01 56 |  if_ne	mov	result1, local02
177a8     A0 00 90 5D |  if_ne	jmp	#LR__2354
177ac     16 17 02 F6 | 	mov	arg03, local08
177b0     11 19 02 F6 | 	mov	arg04, local03
177b4     02 18 46 F5 | 	or	arg04, #2
177b8     00 12 06 F6 | 	mov	arg01, #0
177bc     00 14 06 F6 | 	mov	arg02, #0
177c0     C4 2E B0 FD | 	call	#__system__pack_0415
177c4     84 00 90 FD | 	jmp	#LR__2354
177c8                 | LR__2346
177c8     00 24 0E F2 | 	cmp	local04, #0 wz
177cc     20 00 90 AD |  if_e	jmp	#LR__2349
177d0     01 24 66 F0 | 	shl	local04, #1
177d4     97 0A 48 FB | 	callpa	#(@LR__2348-@LR__2347)>>2,fcache_load_ptr_
177d8                 | LR__2347
177d8     00 40 00 FF 
177dc     00 24 16 F2 | 	cmp	local04, ##8388608 wc
177e0     01 26 86 C1 |  if_b	sub	local05, #1
177e4     01 24 66 C0 |  if_b	shl	local04, #1
177e8     EC FF 9F CD |  if_b	jmp	#LR__2347
177ec                 | LR__2348
177ec     D0 FE 9F FD | 	jmp	#LR__2340
177f0                 | LR__2349
177f0     08 22 46 F5 | 	or	local03, #8
177f4     00 12 06 F6 | 	mov	arg01, #0
177f8     00 14 06 F6 | 	mov	arg02, #0
177fc     00 16 06 F6 | 	mov	arg03, #0
17800     11 19 02 F6 | 	mov	arg04, local03
17804     80 2E B0 FD | 	call	#__system__pack_0415
17808     40 00 90 FD | 	jmp	#LR__2354
1780c                 | LR__2350
1780c     00 2A 0E F2 | 	cmp	local07, #0 wz
17810     20 00 90 AD |  if_e	jmp	#LR__2353
17814     01 2A 66 F0 | 	shl	local07, #1
17818     97 0A 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1781c                 | LR__2351
1781c     00 40 00 FF 
17820     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
17824     01 2C 86 C1 |  if_b	sub	local08, #1
17828     01 2A 66 C0 |  if_b	shl	local07, #1
1782c     EC FF 9F CD |  if_b	jmp	#LR__2351
17830                 | LR__2352
17830     98 FE 9F FD | 	jmp	#LR__2341
17834                 | LR__2353
17834     08 22 46 F5 | 	or	local03, #8
17838     00 12 06 F6 | 	mov	arg01, #0
1783c     00 14 06 F6 | 	mov	arg02, #0
17840     00 16 06 F6 | 	mov	arg03, #0
17844     11 19 02 F6 | 	mov	arg04, local03
17848     3C 2E B0 FD | 	call	#__system__pack_0415
1784c                 | LR__2354
1784c     A7 F0 03 F6 | 	mov	ptra, fp
17850     B2 00 A0 FD | 	call	#popregs_
17854                 | __system___float_mul_ret
17854     2D 00 64 FD | 	ret
17858                 | 
17858                 | __system___float_div
17858     0E 4A 05 F6 | 	mov	COUNT_, #14
1785c     A8 00 A0 FD | 	call	#pushregs_
17860     09 23 02 F6 | 	mov	local03, arg01
17864     0A 25 02 F6 | 	mov	local04, arg02
17868     11 27 02 F6 | 	mov	local05, local03
1786c     13 29 02 F6 | 	mov	local06, local05
17870     16 28 46 F7 | 	zerox	local06, #22
17874     13 2B 02 F6 | 	mov	local07, local05
17878     01 2A 66 F0 | 	shl	local07, #1
1787c     18 2A 46 F0 | 	shr	local07, #24
17880     1F 26 46 F0 | 	shr	local05, #31
17884     12 FB 01 F6 | 	mov	result1, local04
17888     FD 2C 02 F6 | 	mov	local08, result1
1788c     16 2F 02 F6 | 	mov	local09, local08
17890     16 2E 46 F7 | 	zerox	local09, #22
17894     16 31 02 F6 | 	mov	local10, local08
17898     01 30 66 F0 | 	shl	local10, #1
1789c     18 30 46 F0 | 	shr	local10, #24
178a0     1F 2C 46 F0 | 	shr	local08, #31
178a4     16 27 62 F5 | 	xor	local05, local08
178a8     FF 2A 0E F2 | 	cmp	local07, #255 wz
178ac     D4 00 90 AD |  if_e	jmp	#LR__2365
178b0     FF 30 0E F2 | 	cmp	local10, #255 wz
178b4     04 01 90 AD |  if_e	jmp	#LR__2366
178b8     00 2A 0E F2 | 	cmp	local07, #0 wz
178bc     24 01 90 AD |  if_e	jmp	#LR__2367
178c0     17 28 26 F4 | 	bith	local06, #23
178c4                 | LR__2360
178c4     00 30 0E F2 | 	cmp	local10, #0 wz
178c8     70 01 90 AD |  if_e	jmp	#LR__2371
178cc     17 2E 26 F4 | 	bith	local09, #23
178d0                 | LR__2361
178d0     18 2B 82 F1 | 	sub	local07, local10
178d4     15 33 02 F6 | 	mov	local11, local07
178d8     14 13 02 F6 | 	mov	arg01, local06
178dc     02 12 46 F0 | 	shr	arg01, #2
178e0     1E 28 66 F0 | 	shl	local06, #30
178e4     14 15 02 F6 | 	mov	arg02, local06
178e8     17 17 02 F6 | 	mov	arg03, local09
178ec     28 12 62 FD | 	setq	arg01
178f0     0B 15 12 FD | 	qdiv	arg02, arg03
178f4     00 34 06 F6 | 	mov	local12, #0
178f8     18 1E 62 FD | 	getqx	local01
178fc     19 FC 61 FD | 	getqy	result2
17900     FE 20 02 F6 | 	mov	local02, result2
17904     0F 37 02 F6 | 	mov	local13, local01
17908     00 20 4E F2 | 	cmps	local02, #0 wz
1790c     1B 39 02 F6 | 	mov	local14, local13
17910     19 38 66 F0 | 	shl	local14, #25
17914     01 34 06 56 |  if_ne	mov	local12, #1
17918     1A 39 42 F5 | 	or	local14, local12
1791c     07 36 46 F0 | 	shr	local13, #7
17920     00 80 00 FF 
17924     00 36 16 F2 | 	cmp	local13, ##16777216 wc
17928     1C 00 90 CD |  if_b	jmp	#LR__2362
1792c     01 32 06 F1 | 	add	local11, #1
17930     01 38 46 F0 | 	shr	local14, #1
17934     1B 35 02 F6 | 	mov	local12, local13
17938     1F 34 66 F0 | 	shl	local12, #31
1793c     1A 39 42 F5 | 	or	local14, local12
17940     01 36 46 F0 | 	shr	local13, #1
17944     24 00 90 FD | 	jmp	#LR__2364
17948                 | LR__2362
17948     00 40 00 FF 
1794c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
17950     18 00 90 3D |  if_ae	jmp	#LR__2363
17954     01 32 86 F1 | 	sub	local11, #1
17958     01 36 66 F0 | 	shl	local13, #1
1795c     1C 35 02 F6 | 	mov	local12, local14
17960     1F 34 46 F0 | 	shr	local12, #31
17964     1A 37 42 F5 | 	or	local13, local12
17968     01 38 66 F0 | 	shl	local14, #1
1796c                 | LR__2363
1796c                 | LR__2364
1796c     1B 13 02 F6 | 	mov	arg01, local13
17970     1C 15 02 F6 | 	mov	arg02, local14
17974     19 17 02 F6 | 	mov	arg03, local11
17978     13 19 02 F6 | 	mov	arg04, local05
1797c     08 2D B0 FD | 	call	#__system__pack_0415
17980     F8 00 90 FD | 	jmp	#LR__2375
17984                 | LR__2365
17984     00 28 0E F2 | 	cmp	local06, #0 wz
17988     11 FB 01 56 |  if_ne	mov	result1, local03
1798c     EC 00 90 5D |  if_ne	jmp	#LR__2375
17990     FF 30 0E F2 | 	cmp	local10, #255 wz
17994     00 F8 3F AF 
17998     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1799c     DC 00 90 AD |  if_e	jmp	#LR__2375
179a0     02 26 46 F5 | 	or	local05, #2
179a4     00 12 06 F6 | 	mov	arg01, #0
179a8     00 14 06 F6 | 	mov	arg02, #0
179ac     15 17 02 F6 | 	mov	arg03, local07
179b0     13 19 02 F6 | 	mov	arg04, local05
179b4     D0 2C B0 FD | 	call	#__system__pack_0415
179b8     C0 00 90 FD | 	jmp	#LR__2375
179bc                 | LR__2366
179bc     00 2E 0E F2 | 	cmp	local09, #0 wz
179c0     12 FB 01 56 |  if_ne	mov	result1, local04
179c4     B4 00 90 5D |  if_ne	jmp	#LR__2375
179c8     13 19 02 F6 | 	mov	arg04, local05
179cc     08 18 46 F5 | 	or	arg04, #8
179d0     00 12 06 F6 | 	mov	arg01, #0
179d4     00 14 06 F6 | 	mov	arg02, #0
179d8     00 16 06 F6 | 	mov	arg03, #0
179dc     A8 2C B0 FD | 	call	#__system__pack_0415
179e0     98 00 90 FD | 	jmp	#LR__2375
179e4                 | LR__2367
179e4     00 28 0E F2 | 	cmp	local06, #0 wz
179e8     20 00 90 AD |  if_e	jmp	#LR__2370
179ec     01 28 66 F0 | 	shl	local06, #1
179f0     97 0A 48 FB | 	callpa	#(@LR__2369-@LR__2368)>>2,fcache_load_ptr_
179f4                 | LR__2368
179f4     00 40 00 FF 
179f8     00 28 16 F2 | 	cmp	local06, ##8388608 wc
179fc     01 2A 86 C1 |  if_b	sub	local07, #1
17a00     01 28 66 C0 |  if_b	shl	local06, #1
17a04     EC FF 9F CD |  if_b	jmp	#LR__2368
17a08                 | LR__2369
17a08     B8 FE 9F FD | 	jmp	#LR__2360
17a0c                 | LR__2370
17a0c     00 30 0E F2 | 	cmp	local10, #0 wz
17a10     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
17a14     00 F8 3F AF 
17a18     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
17a1c     5C 00 90 AD |  if_e	jmp	#LR__2375
17a20     13 19 02 F6 | 	mov	arg04, local05
17a24     08 18 46 F5 | 	or	arg04, #8
17a28     00 12 06 F6 | 	mov	arg01, #0
17a2c     00 14 06 F6 | 	mov	arg02, #0
17a30     00 16 06 F6 | 	mov	arg03, #0
17a34     50 2C B0 FD | 	call	#__system__pack_0415
17a38     40 00 90 FD | 	jmp	#LR__2375
17a3c                 | LR__2371
17a3c     00 2E 0E F2 | 	cmp	local09, #0 wz
17a40     20 00 90 AD |  if_e	jmp	#LR__2374
17a44     01 2E 66 F0 | 	shl	local09, #1
17a48     97 0A 48 FB | 	callpa	#(@LR__2373-@LR__2372)>>2,fcache_load_ptr_
17a4c                 | LR__2372
17a4c     00 40 00 FF 
17a50     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
17a54     01 30 86 C1 |  if_b	sub	local10, #1
17a58     01 2E 66 C0 |  if_b	shl	local09, #1
17a5c     EC FF 9F CD |  if_b	jmp	#LR__2372
17a60                 | LR__2373
17a60     6C FE 9F FD | 	jmp	#LR__2361
17a64                 | LR__2374
17a64     02 26 46 F5 | 	or	local05, #2
17a68     00 12 06 F6 | 	mov	arg01, #0
17a6c     00 14 06 F6 | 	mov	arg02, #0
17a70     00 16 06 F6 | 	mov	arg03, #0
17a74     13 19 02 F6 | 	mov	arg04, local05
17a78     0C 2C B0 FD | 	call	#__system__pack_0415
17a7c                 | LR__2375
17a7c     A7 F0 03 F6 | 	mov	ptra, fp
17a80     B2 00 A0 FD | 	call	#popregs_
17a84                 | __system___float_div_ret
17a84     2D 00 64 FD | 	ret
17a88                 | 
17a88                 | __system___float_cmp
17a88     00 C0 3F FF 
17a8c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
17a90     00 C0 3F CF 
17a94     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
17a98     0B FB 01 36 |  if_ae	mov	result1, arg03
17a9c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
17aa0     00 C0 7F FF 
17aa4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
17aa8     00 C0 7F CF 
17aac     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
17ab0     0B FB 01 36 |  if_ae	mov	result1, arg03
17ab4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
17ab8     00 12 56 F2 | 	cmps	arg01, #0 wc
17abc     2C 00 90 3D |  if_ae	jmp	#LR__2380
17ac0     00 14 56 F2 | 	cmps	arg02, #0 wc
17ac4     0A FB 01 C6 |  if_b	mov	result1, arg02
17ac8     09 FB 81 C1 |  if_b	sub	result1, arg01
17acc     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
17ad0     00 14 0E F2 | 	cmp	arg02, #0 wz
17ad4     00 00 40 AF 
17ad8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
17adc     00 FA 05 A6 |  if_e	mov	result1, #0
17ae0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
17ae4     01 FA 65 F6 | 	neg	result1, #1
17ae8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
17aec                 | LR__2380
17aec     00 14 56 F2 | 	cmps	arg02, #0 wc
17af0     1C 00 90 3D |  if_ae	jmp	#LR__2381
17af4     00 12 0E F2 | 	cmp	arg01, #0 wz
17af8     00 00 40 AF 
17afc     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
17b00     00 FA 05 A6 |  if_e	mov	result1, #0
17b04     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
17b08     01 FA 05 F6 | 	mov	result1, #1
17b0c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
17b10                 | LR__2381
17b10     0A 13 82 F1 | 	sub	arg01, arg02
17b14     09 FB 01 F6 | 	mov	result1, arg01
17b18                 | __system___float_cmp_ret
17b18     2D 00 64 FD | 	ret
17b1c                 | 
17b1c                 | __system___float_tointeger
17b1c     02 4A 05 F6 | 	mov	COUNT_, #2
17b20     A8 00 A0 FD | 	call	#pushregs_
17b24     50 00 B0 FD | 	call	#__system___float_Unpack
17b28     FF FF 7F FF 
17b2c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
17b30     34 00 90 CD |  if_b	jmp	#LR__2390
17b34     1F FC 55 F2 | 	cmps	result2, #31 wc
17b38     2C 00 90 3D |  if_ae	jmp	#LR__2390
17b3c     02 FE 65 F0 | 	shl	result3, #2
17b40     1E 1E 06 F6 | 	mov	local01, #30
17b44     FE 1E 82 F1 | 	sub	local01, result2
17b48     0F FF 41 F0 | 	shr	result3, local01
17b4c     FF 20 02 F6 | 	mov	local02, result3
17b50     0A 21 02 F1 | 	add	local02, arg02
17b54     01 20 46 F0 | 	shr	local02, #1
17b58     00 FA 0D F2 | 	cmp	result1, #0 wz
17b5c     10 21 62 56 |  if_ne	neg	local02, local02
17b60     10 FB 01 F6 | 	mov	result1, local02
17b64     04 00 90 FD | 	jmp	#LR__2391
17b68                 | LR__2390
17b68     00 FA 05 F6 | 	mov	result1, #0
17b6c                 | LR__2391
17b6c     A7 F0 03 F6 | 	mov	ptra, fp
17b70     B2 00 A0 FD | 	call	#popregs_
17b74                 | __system___float_tointeger_ret
17b74     2D 00 64 FD | 	ret
17b78                 | 
17b78                 | __system___float_Unpack
17b78     09 01 02 F6 | 	mov	_var01, arg01
17b7c     1F 00 46 F0 | 	shr	_var01, #31
17b80     09 03 02 F6 | 	mov	_var02, arg01
17b84     01 02 66 F0 | 	shl	_var02, #1
17b88     18 02 4E F0 | 	shr	_var02, #24 wz
17b8c     17 13 06 F4 | 	bitl	arg01, #279
17b90     06 12 66 50 |  if_ne	shl	arg01, #6
17b94     1D 12 26 54 |  if_ne	bith	arg01, #29
17b98     1C 00 90 5D |  if_ne	jmp	#LR__2400
17b9c     09 05 92 F7 | 	encod	_var03, arg01 wc
17ba0     01 04 06 C1 |  if_b	add	_var03, #1
17ba4     17 04 86 F1 | 	sub	_var03, #23
17ba8     02 03 02 F6 | 	mov	_var02, _var03
17bac     07 FC 05 F6 | 	mov	result2, #7
17bb0     02 FD 81 F1 | 	sub	result2, _var03
17bb4     FE 12 62 F0 | 	shl	arg01, result2
17bb8                 | LR__2400
17bb8     7F 02 86 F1 | 	sub	_var02, #127
17bbc     09 FF 01 F6 | 	mov	result3, arg01
17bc0     00 FB 01 F6 | 	mov	result1, _var01
17bc4     01 FD 01 F6 | 	mov	result2, _var02
17bc8                 | __system___float_Unpack_ret
17bc8     2D 00 64 FD | 	ret
17bcc                 | 
17bcc                 | __system___float_Pack
17bcc     00 00 06 F6 | 	mov	_var01, #0
17bd0     00 16 0E F2 | 	cmp	arg03, #0 wz
17bd4     8C 00 90 AD |  if_e	jmp	#LR__2411
17bd8     0B 03 92 F7 | 	encod	_var02, arg03 wc
17bdc     01 02 06 C1 |  if_b	add	_var02, #1
17be0     21 00 06 F6 | 	mov	_var01, #33
17be4     01 01 82 F1 | 	sub	_var01, _var02
17be8     00 17 62 F0 | 	shl	arg03, _var01
17bec     03 02 06 F6 | 	mov	_var02, #3
17bf0     00 03 82 F1 | 	sub	_var02, _var01
17bf4     01 15 02 F1 | 	add	arg02, _var02
17bf8     0A 05 02 F6 | 	mov	_var03, arg02
17bfc     00 17 06 F1 | 	add	arg03, #256
17c00     0B 03 02 F6 | 	mov	_var02, arg03
17c04     FF 02 2E F5 | 	andn	_var02, #255 wz
17c08     01 04 06 A1 |  if_e	add	_var03, #1
17c0c     7F 04 06 F1 | 	add	_var03, #127
17c10     FF FF 7F FF 
17c14     E9 05 46 F3 | 	fges	_var03, ##-23
17c18     FF 04 66 F3 | 	fles	_var03, #255
17c1c     01 04 56 F2 | 	cmps	_var03, #1 wc
17c20     1C 00 90 3D |  if_ae	jmp	#LR__2410
17c24     01 16 46 F0 | 	shr	arg03, #1
17c28     1F 02 C6 F9 | 	decod	_var02, #31
17c2c     0B 03 02 F1 | 	add	_var02, arg03
17c30     02 05 62 F6 | 	neg	_var03, _var03
17c34     02 03 42 F0 | 	shr	_var02, _var03
17c38     01 17 02 F6 | 	mov	arg03, _var02
17c3c     00 04 06 F6 | 	mov	_var03, #0
17c40                 | LR__2410
17c40     09 FB 01 F6 | 	mov	result1, arg01
17c44     1F FA 65 F0 | 	shl	result1, #31
17c48     02 03 02 F6 | 	mov	_var02, _var03
17c4c     17 02 66 F0 | 	shl	_var02, #23
17c50     01 FB 41 F5 | 	or	result1, _var02
17c54     0B 07 02 F6 | 	mov	_var04, arg03
17c58     09 06 46 F0 | 	shr	_var04, #9
17c5c     03 FB 41 F5 | 	or	result1, _var04
17c60     04 00 90 FD | 	jmp	#__system___float_Pack_ret
17c64                 | LR__2411
17c64     00 FB 01 F6 | 	mov	result1, _var01
17c68                 | __system___float_Pack_ret
17c68     2D 00 64 FD | 	ret
17c6c                 | 
17c6c                 | __system___basic_print_float
17c6c     05 4A 05 F6 | 	mov	COUNT_, #5
17c70     A8 00 A0 FD | 	call	#pushregs_
17c74     09 1F 02 F6 | 	mov	local01, arg01
17c78     0A 21 02 F6 | 	mov	local02, arg02
17c7c     0B 23 0A F6 | 	mov	local03, arg03 wz
17c80     0C 25 02 F6 | 	mov	local04, arg04
17c84     14 00 90 5D |  if_ne	jmp	#LR__2420
17c88     23 24 0E F2 | 	cmp	local04, #35 wz
17c8c     80 02 10 AF 
17c90     00 26 06 A6 |  if_e	mov	local05, ##537198592
17c94     1D 26 C6 59 |  if_ne	decod	local05, #29
17c98     13 23 02 F6 | 	mov	local03, local05
17c9c                 | LR__2420
17c9c     0F 13 02 F6 | 	mov	arg01, local01
17ca0     C8 24 B0 FD | 	call	#__system___gettxfunc
17ca4     FD 26 0A F6 | 	mov	local05, result1 wz
17ca8     00 FA 05 A6 |  if_e	mov	result1, #0
17cac     13 13 02 56 |  if_ne	mov	arg01, local05
17cb0     11 15 02 56 |  if_ne	mov	arg02, local03
17cb4     10 17 02 56 |  if_ne	mov	arg03, local02
17cb8     12 19 02 56 |  if_ne	mov	arg04, local04
17cbc     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
17cc0     A7 F0 03 F6 | 	mov	ptra, fp
17cc4     B2 00 A0 FD | 	call	#popregs_
17cc8                 | __system___basic_print_float_ret
17cc8     2D 00 64 FD | 	ret
17ccc                 | 
17ccc                 | __system____builtin_atoi
17ccc     07 4A 05 F6 | 	mov	COUNT_, #7
17cd0     A8 00 A0 FD | 	call	#pushregs_
17cd4                 | __system____builtin_atoi_enter
17cd4     09 1F 02 F6 | 	mov	local01, arg01
17cd8     0A 21 02 F6 | 	mov	local02, arg02
17cdc     00 22 06 F6 | 	mov	local03, #0
17ce0     00 24 06 F6 | 	mov	local04, #0
17ce4     00 26 06 F6 | 	mov	local05, #0
17ce8     97 08 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
17cec                 | LR__2430
17cec     0F 29 C2 FA | 	rdbyte	local06, local01
17cf0     20 28 0E F2 | 	cmp	local06, #32 wz
17cf4     01 1E 06 A1 |  if_e	add	local01, #1
17cf8     F0 FF 9F AD |  if_e	jmp	#LR__2430
17cfc                 | LR__2431
17cfc     0F 2B C2 FA | 	rdbyte	local07, local01
17d00                 | LR__2432
17d00     2D 2A 0E F2 | 	cmp	local07, #45 wz
17d04     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
17d08     18 00 90 5D |  if_ne	jmp	#LR__2433
17d0c     01 1E 06 F1 | 	add	local01, #1
17d10     2D 2A 0E F2 | 	cmp	local07, #45 wz
17d14     01 28 06 A6 |  if_e	mov	local06, #1
17d18     14 27 C2 A2 |  if_e	subr	local05, local06
17d1c     0F 2B C2 FA | 	rdbyte	local07, local01
17d20     DC FF 9F FD | 	jmp	#LR__2432
17d24                 | LR__2433
17d24     97 48 48 FB | 	callpa	#(@LR__2441-@LR__2434)>>2,fcache_load_ptr_
17d28                 | LR__2434
17d28                 | LR__2435
17d28     0F 2B C2 FA | 	rdbyte	local07, local01
17d2c     5F 2A 0E F2 | 	cmp	local07, #95 wz
17d30     01 1E 06 F1 | 	add	local01, #1
17d34     F0 FF 9F AD |  if_e	jmp	#LR__2435
17d38     30 2A 0E F2 | 	cmp	local07, #48 wz
17d3c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
17d40     00 24 06 A6 |  if_e	mov	local04, #0
17d44     60 00 90 AD |  if_e	jmp	#LR__2440
17d48     31 2A 56 F2 | 	cmps	local07, #49 wc
17d4c     18 00 90 CD |  if_b	jmp	#LR__2436
17d50     3A 2A 56 F2 | 	cmps	local07, #58 wc
17d54     15 25 02 C6 |  if_b	mov	local04, local07
17d58     30 24 86 C1 |  if_b	sub	local04, #48
17d5c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
17d60     0A 20 06 86 |  if_c_and_z	mov	local02, #10
17d64     40 00 90 CD |  if_b	jmp	#LR__2439
17d68                 | LR__2436
17d68     0B 20 56 F2 | 	cmps	local02, #11 wc
17d6c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
17d70     14 00 90 CD |  if_b	jmp	#LR__2437
17d74     67 2A 56 F2 | 	cmps	local07, #103 wc
17d78     61 2A 86 C1 |  if_b	sub	local07, #97
17d7c     0A 24 06 C6 |  if_b	mov	local04, #10
17d80     15 25 02 C1 |  if_b	add	local04, local07
17d84     20 00 90 CD |  if_b	jmp	#LR__2438
17d88                 | LR__2437
17d88     0B 20 56 F2 | 	cmps	local02, #11 wc
17d8c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
17d90     24 00 90 CD |  if_b	jmp	#LR__2442
17d94     47 2A 56 F2 | 	cmps	local07, #71 wc
17d98     41 2A 86 C1 |  if_b	sub	local07, #65
17d9c     0A 24 06 C6 |  if_b	mov	local04, #10
17da0     15 25 02 C1 |  if_b	add	local04, local07
17da4     10 00 90 3D |  if_ae	jmp	#LR__2442
17da8                 | LR__2438
17da8                 | LR__2439
17da8                 | LR__2440
17da8     11 21 02 FD | 	qmul	local02, local03
17dac     18 22 62 FD | 	getqx	local03
17db0     12 23 02 F1 | 	add	local03, local04
17db4     70 FF 9F FD | 	jmp	#LR__2434
17db8                 | LR__2441
17db8                 | LR__2442
17db8     00 20 0E F2 | 	cmp	local02, #0 wz
17dbc     64 00 90 5D |  if_ne	jmp	#LR__2448
17dc0     78 2A 0E F2 | 	cmp	local07, #120 wz
17dc4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
17dc8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
17dcc     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
17dd0     14 00 90 5D |  if_ne	jmp	#LR__2443
17dd4     0F 13 02 F6 | 	mov	arg01, local01
17dd8     10 14 06 F6 | 	mov	arg02, #16
17ddc     EC FE BF FD | 	call	#__system____builtin_atoi
17de0     FD 22 02 F6 | 	mov	local03, result1
17de4     3C 00 90 FD | 	jmp	#LR__2447
17de8                 | LR__2443
17de8     62 2A 0E F2 | 	cmp	local07, #98 wz
17dec     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
17df0     14 00 90 5D |  if_ne	jmp	#LR__2444
17df4     0F 13 02 F6 | 	mov	arg01, local01
17df8     02 14 06 F6 | 	mov	arg02, #2
17dfc     CC FE BF FD | 	call	#__system____builtin_atoi
17e00     FD 22 02 F6 | 	mov	local03, result1
17e04     1C 00 90 FD | 	jmp	#LR__2446
17e08                 | LR__2444
17e08     6F 2A 0E F2 | 	cmp	local07, #111 wz
17e0c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
17e10     10 00 90 5D |  if_ne	jmp	#LR__2445
17e14     0F 13 02 F6 | 	mov	arg01, local01
17e18     08 14 06 F6 | 	mov	arg02, #8
17e1c     AC FE BF FD | 	call	#__system____builtin_atoi
17e20     FD 22 02 F6 | 	mov	local03, result1
17e24                 | LR__2445
17e24                 | LR__2446
17e24                 | LR__2447
17e24                 | LR__2448
17e24     00 26 0E F2 | 	cmp	local05, #0 wz
17e28     11 23 62 56 |  if_ne	neg	local03, local03
17e2c     11 FB 01 F6 | 	mov	result1, local03
17e30     A7 F0 03 F6 | 	mov	ptra, fp
17e34     B2 00 A0 FD | 	call	#popregs_
17e38                 | __system____builtin_atoi_ret
17e38     2D 00 64 FD | 	ret
17e3c                 | 
17e3c                 | __system____builtin_atof
17e3c     07 4A 05 F6 | 	mov	COUNT_, #7
17e40     A8 00 A0 FD | 	call	#pushregs_
17e44     09 1F 02 F6 | 	mov	local01, arg01
17e48     00 20 06 F6 | 	mov	local02, #0
17e4c     00 22 06 F6 | 	mov	local03, #0
17e50     00 24 06 F6 | 	mov	local04, #0
17e54     00 26 06 F6 | 	mov	local05, #0
17e58     97 08 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
17e5c                 | LR__2450
17e5c     0F 17 C2 FA | 	rdbyte	arg03, local01
17e60     20 16 0E F2 | 	cmp	arg03, #32 wz
17e64     01 1E 06 A1 |  if_e	add	local01, #1
17e68     F0 FF 9F AD |  if_e	jmp	#LR__2450
17e6c                 | LR__2451
17e6c     0F 29 C2 FA | 	rdbyte	local06, local01
17e70                 | LR__2452
17e70     2B 28 0E F2 | 	cmp	local06, #43 wz
17e74     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
17e78     14 00 90 5D |  if_ne	jmp	#LR__2453
17e7c     2D 28 0E F2 | 	cmp	local06, #45 wz
17e80     1F 24 E6 A4 |  if_e	bitnot	local04, #31
17e84     01 1E 06 F1 | 	add	local01, #1
17e88     0F 29 C2 FA | 	rdbyte	local06, local01
17e8c     E0 FF 9F FD | 	jmp	#LR__2452
17e90                 | LR__2453
17e90                 | LR__2454
17e90     97 08 48 FB | 	callpa	#(@LR__2456-@LR__2455)>>2,fcache_load_ptr_
17e94                 | LR__2455
17e94     0F 29 C2 FA | 	rdbyte	local06, local01
17e98     5F 28 0E F2 | 	cmp	local06, #95 wz
17e9c     01 1E 06 F1 | 	add	local01, #1
17ea0     F0 FF 9F AD |  if_e	jmp	#LR__2455
17ea4                 | LR__2456
17ea4     00 28 0E F2 | 	cmp	local06, #0 wz
17ea8     5C 00 90 AD |  if_e	jmp	#LR__2458
17eac     30 28 56 F2 | 	cmps	local06, #48 wc
17eb0     44 00 90 CD |  if_b	jmp	#LR__2457
17eb4     3A 28 56 F2 | 	cmps	local06, #58 wc
17eb8     3C 00 90 3D |  if_ae	jmp	#LR__2457
17ebc     10 13 02 F6 | 	mov	arg01, local02
17ec0     00 90 20 FF 
17ec4     00 14 06 F6 | 	mov	arg02, ##1092616192
17ec8     88 F7 BF FD | 	call	#__system___float_mul
17ecc     FD 20 02 F6 | 	mov	local02, result1
17ed0     30 28 86 F1 | 	sub	local06, #48
17ed4     14 13 02 F6 | 	mov	arg01, local06
17ed8     4C F4 BF FD | 	call	#__system___float_fromuns
17edc     FD 14 02 F6 | 	mov	arg02, result1
17ee0     10 13 02 F6 | 	mov	arg01, local02
17ee4     74 F4 BF FD | 	call	#__system___float_add
17ee8     FD 20 02 F6 | 	mov	local02, result1
17eec     00 26 0E F2 | 	cmp	local05, #0 wz
17ef0     01 22 86 51 |  if_ne	sub	local03, #1
17ef4     98 FF 9F FD | 	jmp	#LR__2454
17ef8                 | LR__2457
17ef8     2E 28 0E F2 | 	cmp	local06, #46 wz
17efc     00 26 0E A2 |  if_e	cmp	local05, #0 wz
17f00     01 26 06 A6 |  if_e	mov	local05, #1
17f04     88 FF 9F AD |  if_e	jmp	#LR__2454
17f08                 | LR__2458
17f08     45 28 0E F2 | 	cmp	local06, #69 wz
17f0c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
17f10     18 00 90 5D |  if_ne	jmp	#LR__2459
17f14     0F 13 02 F6 | 	mov	arg01, local01
17f18     00 14 06 F6 | 	mov	arg02, #0
17f1c     AC FD BF FD | 	call	#__system____builtin_atoi
17f20     11 FB 01 F1 | 	add	result1, local03
17f24     FD 2A 02 F6 | 	mov	local07, result1
17f28     04 00 90 FD | 	jmp	#LR__2460
17f2c                 | LR__2459
17f2c     11 2B 02 F6 | 	mov	local07, local03
17f30                 | LR__2460
17f30     15 17 02 F6 | 	mov	arg03, local07
17f34     10 13 02 F6 | 	mov	arg01, local02
17f38     00 90 20 FF 
17f3c     00 14 06 F6 | 	mov	arg02, ##1092616192
17f40     44 04 B0 FD | 	call	#__system___float_pow_n
17f44     12 FB 61 F5 | 	xor	result1, local04
17f48     A7 F0 03 F6 | 	mov	ptra, fp
17f4c     B2 00 A0 FD | 	call	#popregs_
17f50                 | __system____builtin_atof_ret
17f50     2D 00 64 FD | 	ret
17f54                 | 
17f54                 | __system____builtin_ilogb
17f54     20 FC BF FD | 	call	#__system___float_Unpack
17f58     00 FE 0D F2 | 	cmp	result3, #0 wz
17f5c     00 00 40 AF 
17f60     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
17f64     24 00 90 AD |  if_e	jmp	#LR__2471
17f68     80 FC 0D F2 | 	cmp	result2, #128 wz
17f6c     18 00 90 5D |  if_ne	jmp	#LR__2470
17f70     00 00 10 FF 
17f74     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
17f78     1E FA CD A9 |  if_e	bmask	result1, #30
17f7c     0C 00 90 AD |  if_e	jmp	#LR__2471
17f80     1F FA C5 F9 | 	decod	result1, #31
17f84     04 00 90 FD | 	jmp	#LR__2471
17f88                 | LR__2470
17f88     FE FA 01 F6 | 	mov	result1, result2
17f8c                 | LR__2471
17f8c                 | __system____builtin_ilogb_ret
17f8c     2D 00 64 FD | 	ret
17f90                 | 
17f90                 | __system____builtin_sinf
17f90     03 4A 05 F6 | 	mov	COUNT_, #3
17f94     A8 00 A0 FD | 	call	#pushregs_
17f98     09 1F 02 F6 | 	mov	local01, arg01
17f9c     66 E6 1E FF 
17fa0     CD 14 06 F6 | 	mov	arg02, ##1036831949
17fa4     01 16 06 F6 | 	mov	arg03, #1
17fa8     DC FA BF FD | 	call	#__system___float_cmp
17fac     00 FA 55 F2 | 	cmps	result1, #0 wc
17fb0     5C 00 90 3D |  if_ae	jmp	#LR__2480
17fb4     0F 13 02 F6 | 	mov	arg01, local01
17fb8     66 E6 5E FF 
17fbc     CD 14 06 F6 | 	mov	arg02, ##-1110651699
17fc0     01 16 66 F6 | 	neg	arg03, #1
17fc4     C0 FA BF FD | 	call	#__system___float_cmp
17fc8     01 FA 55 F2 | 	cmps	result1, #1 wc
17fcc     40 00 90 CD |  if_b	jmp	#LR__2480
17fd0     0F 13 02 F6 | 	mov	arg01, local01
17fd4     0F 15 02 F6 | 	mov	arg02, local01
17fd8     78 F6 BF FD | 	call	#__system___float_mul
17fdc     FD 12 02 F6 | 	mov	arg01, result1
17fe0     0F 15 02 F6 | 	mov	arg02, local01
17fe4     6C F6 BF FD | 	call	#__system___float_mul
17fe8     FD 12 02 F6 | 	mov	arg01, result1
17fec     00 60 20 FF 
17ff0     00 14 06 F6 | 	mov	arg02, ##1086324736
17ff4     60 F8 BF FD | 	call	#__system___float_div
17ff8     FD 14 02 F6 | 	mov	arg02, result1
17ffc     0F 13 02 F6 | 	mov	arg01, local01
18000     1F 14 E6 F4 | 	bitnot	arg02, #31
18004     54 F3 BF FD | 	call	#__system___float_add
18008     FD 20 02 F6 | 	mov	local02, result1
1800c     54 00 90 FD | 	jmp	#LR__2481
18010                 | LR__2480
18010     0F 13 02 F6 | 	mov	arg01, local01
18014     7C 91 26 FF 
18018     83 15 06 F6 | 	mov	arg02, ##1294137731
1801c     34 F6 BF FD | 	call	#__system___float_mul
18020     FD 12 02 F6 | 	mov	arg01, result1
18024     00 14 06 F6 | 	mov	arg02, #0
18028     F0 FA BF FD | 	call	#__system___float_tointeger
1802c     02 FA 65 F0 | 	shl	result1, #2
18030     00 00 A0 FF 
18034     FD 00 48 FD | 	qrotate	##1073741824, result1
18038     19 12 62 FD | 	getqy	arg01
1803c     09 13 52 F6 | 	abs	arg01, arg01 wc
18040     1F 22 C6 C9 |  if_b	decod	local03, #31
18044     00 22 06 36 |  if_ae	mov	local03, #0
18048     DC F2 BF FD | 	call	#__system___float_fromuns
1804c     11 FB 61 F5 | 	xor	result1, local03
18050     FD 12 02 F6 | 	mov	arg01, result1
18054     00 40 27 FF 
18058     00 14 06 F6 | 	mov	arg02, ##1317011456
1805c     F8 F7 BF FD | 	call	#__system___float_div
18060     FD 20 02 F6 | 	mov	local02, result1
18064                 | LR__2481
18064     10 FB 01 F6 | 	mov	result1, local02
18068     A7 F0 03 F6 | 	mov	ptra, fp
1806c     B2 00 A0 FD | 	call	#popregs_
18070                 | __system____builtin_sinf_ret
18070     2D 00 64 FD | 	ret
18074                 | 
18074                 | __system____builtin_exp2f
18074     04 4A 05 F6 | 	mov	COUNT_, #4
18078     A8 00 A0 FD | 	call	#pushregs_
1807c     09 1F 02 F6 | 	mov	local01, arg01
18080     00 7F 21 FF 
18084     00 14 06 F6 | 	mov	arg02, ##1123942400
18088     01 16 66 F6 | 	neg	arg03, #1
1808c     F8 F9 BF FD | 	call	#__system___float_cmp
18090     00 FA 55 F2 | 	cmps	result1, #0 wc
18094     00 C0 3F 3F 
18098     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1809c     DC 00 90 3D |  if_ae	jmp	#LR__2491
180a0     0F 13 02 F6 | 	mov	arg01, local01
180a4     00 7F 61 FF 
180a8     00 14 06 F6 | 	mov	arg02, ##-1023541248
180ac     01 16 06 F6 | 	mov	arg03, #1
180b0     D4 F9 BF FD | 	call	#__system___float_cmp
180b4     00 FA 55 F2 | 	cmps	result1, #0 wc
180b8     00 FA 05 C6 |  if_b	mov	result1, #0
180bc     BC 00 90 CD |  if_b	jmp	#LR__2491
180c0     0F 13 02 F6 | 	mov	arg01, local01
180c4     00 14 06 F6 | 	mov	arg02, #0
180c8     50 FA BF FD | 	call	#__system___float_tointeger
180cc     FD 20 02 F6 | 	mov	local02, result1
180d0     10 13 52 F6 | 	abs	arg01, local02 wc
180d4     1F 22 C6 C9 |  if_b	decod	local03, #31
180d8     00 22 06 36 |  if_ae	mov	local03, #0
180dc     48 F2 BF FD | 	call	#__system___float_fromuns
180e0     11 FB 61 F5 | 	xor	result1, local03
180e4     FD 14 02 F6 | 	mov	arg02, result1
180e8     0F 13 02 F6 | 	mov	arg01, local01
180ec     1F 14 E6 F4 | 	bitnot	arg02, #31
180f0     68 F2 BF FD | 	call	#__system___float_add
180f4     FD 24 02 F6 | 	mov	local04, result1
180f8     12 13 02 F6 | 	mov	arg01, local04
180fc     00 14 06 F6 | 	mov	arg02, #0
18100     01 16 06 F6 | 	mov	arg03, #1
18104     80 F9 BF FD | 	call	#__system___float_cmp
18108     00 FA 55 F2 | 	cmps	result1, #0 wc
1810c     18 00 90 3D |  if_ae	jmp	#LR__2490
18110     12 13 02 F6 | 	mov	arg01, local04
18114     00 C0 1F FF 
18118     00 14 06 F6 | 	mov	arg02, ##1065353216
1811c     3C F2 BF FD | 	call	#__system___float_add
18120     FD 24 02 F6 | 	mov	local04, result1
18124     01 20 86 F1 | 	sub	local02, #1
18128                 | LR__2490
18128     7F 20 06 F1 | 	add	local02, #127
1812c     17 20 66 F0 | 	shl	local02, #23
18130     12 13 02 F6 | 	mov	arg01, local04
18134     00 80 26 FF 
18138     00 14 06 F6 | 	mov	arg02, ##1291845632
1813c     14 F5 BF FD | 	call	#__system___float_mul
18140     FD 12 02 F6 | 	mov	arg01, result1
18144     00 14 06 F6 | 	mov	arg02, #0
18148     D0 F9 BF FD | 	call	#__system___float_tointeger
1814c     FD 24 0A F6 | 	mov	local04, result1 wz
18150     10 FB 01 A6 |  if_e	mov	result1, local02
18154     24 00 90 AD |  if_e	jmp	#LR__2491
18158     3E 24 26 F4 | 	bith	local04, #62
1815c     0F 24 62 FD | 	qexp	local04
18160     10 13 02 F6 | 	mov	arg01, local02
18164     18 14 62 FD | 	getqx	arg02
18168     01 14 06 F1 | 	add	arg02, #1
1816c     01 14 46 F0 | 	shr	arg02, #1
18170     00 80 1F FF 
18174     00 14 06 F1 | 	add	arg02, ##1056964608
18178     D8 F4 BF FD | 	call	#__system___float_mul
1817c                 | LR__2491
1817c     A7 F0 03 F6 | 	mov	ptra, fp
18180     B2 00 A0 FD | 	call	#popregs_
18184                 | __system____builtin_exp2f_ret
18184     2D 00 64 FD | 	ret
18188                 | 
18188                 | __system____builtin_log2f
18188     06 4A 05 F6 | 	mov	COUNT_, #6
1818c     A8 00 A0 FD | 	call	#pushregs_
18190     09 1F 02 F6 | 	mov	local01, arg01
18194     09 21 0A F6 | 	mov	local02, arg01 wz
18198     00 00 40 5F 
1819c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
181a0     00 40 00 AF 
181a4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
181a8     08 01 90 AD |  if_e	jmp	#LR__2504
181ac     00 20 56 F2 | 	cmps	local02, #0 wc
181b0     00 E0 3F CF 
181b4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
181b8     F8 00 90 CD |  if_b	jmp	#LR__2504
181bc     0F 13 02 F6 | 	mov	arg01, local01
181c0     00 90 20 FF 
181c4     00 14 06 F6 | 	mov	arg02, ##1092616192
181c8     01 16 06 F6 | 	mov	arg03, #1
181cc     B8 F8 BF FD | 	call	#__system___float_cmp
181d0     00 FA 0D F2 | 	cmp	result1, #0 wz
181d4     4D 2A 20 AF 
181d8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
181dc     D4 00 90 AD |  if_e	jmp	#LR__2504
181e0     0F 13 02 F6 | 	mov	arg01, local01
181e4     FC 16 20 FF 
181e8     54 14 06 F6 | 	mov	arg02, ##1076754516
181ec     01 16 06 F6 | 	mov	arg03, #1
181f0     94 F8 BF FD | 	call	#__system___float_cmp
181f4     00 FA 0D F2 | 	cmp	result1, #0 wz
181f8     55 DC 1F AF 
181fc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
18200     B0 00 90 AD |  if_e	jmp	#LR__2504
18204     10 23 02 F6 | 	mov	local03, local02
18208     17 22 46 F0 | 	shr	local03, #23
1820c     11 23 E2 F8 | 	getbyte	local03, local03, #0
18210     17 21 06 F4 | 	bitl	local02, #279
18214     10 25 02 F6 | 	mov	local04, local02
18218     FF 22 0E F2 | 	cmp	local03, #255 wz
1821c     1C 00 90 5D |  if_ne	jmp	#LR__2500
18220     00 24 0E F2 | 	cmp	local04, #0 wz
18224     00 C0 3F 5F 
18228     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1822c     00 E0 3F AF 
18230     00 26 06 A6 |  if_e	mov	local05, ##2143289344
18234     13 FB 01 F6 | 	mov	result1, local05
18238     78 00 90 FD | 	jmp	#LR__2504
1823c                 | LR__2500
1823c     00 22 0E F2 | 	cmp	local03, #0 wz
18240     17 24 26 54 |  if_ne	bith	local04, #23
18244     7F 22 86 51 |  if_ne	sub	local03, #127
18248     28 00 90 5D |  if_ne	jmp	#LR__2503
1824c     00 24 0E F2 | 	cmp	local04, #0 wz
18250     00 40 00 AF 
18254     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18258     58 00 90 AD |  if_e	jmp	#LR__2504
1825c     7E 22 66 F6 | 	neg	local03, #126
18260     97 08 48 FB | 	callpa	#(@LR__2502-@LR__2501)>>2,fcache_load_ptr_
18264                 | LR__2501
18264     17 24 2E F4 | 	testbn	local04, #23 wz
18268     01 24 66 A0 |  if_e	shl	local04, #1
1826c     01 22 06 A1 |  if_e	add	local03, #1
18270     F0 FF 9F AD |  if_e	jmp	#LR__2501
18274                 | LR__2502
18274                 | LR__2503
18274     0E 24 62 FD | 	qlog	local04
18278     01 22 86 F1 | 	sub	local03, #1
1827c     11 13 52 F6 | 	abs	arg01, local03 wc
18280     1F 28 C6 C9 |  if_b	decod	local06, #31
18284     00 28 06 36 |  if_ae	mov	local06, #0
18288     18 26 62 FD | 	getqx	local05
1828c     9B 26 06 F4 | 	bitl	local05, #155
18290     08 26 06 F1 | 	add	local05, #8
18294     04 26 46 F0 | 	shr	local05, #4
18298     00 C0 1F FF 
1829c     00 26 06 F1 | 	add	local05, ##1065353216
182a0     84 F0 BF FD | 	call	#__system___float_fromuns
182a4     14 FB 61 F5 | 	xor	result1, local06
182a8     FD 14 02 F6 | 	mov	arg02, result1
182ac     13 13 02 F6 | 	mov	arg01, local05
182b0     A8 F0 BF FD | 	call	#__system___float_add
182b4                 | LR__2504
182b4     A7 F0 03 F6 | 	mov	ptra, fp
182b8     B2 00 A0 FD | 	call	#popregs_
182bc                 | __system____builtin_log2f_ret
182bc     2D 00 64 FD | 	ret
182c0                 | 
182c0                 | __system____builtin_powf
182c0     04 4A 05 F6 | 	mov	COUNT_, #4
182c4     A8 00 A0 FD | 	call	#pushregs_
182c8     09 1F 02 F6 | 	mov	local01, arg01
182cc     0A 21 02 F6 | 	mov	local02, arg02
182d0     10 13 02 F6 | 	mov	arg01, local02
182d4     00 14 06 F6 | 	mov	arg02, #0
182d8     40 F8 BF FD | 	call	#__system___float_tointeger
182dc     FD 22 02 F6 | 	mov	local03, result1
182e0     11 13 52 F6 | 	abs	arg01, local03 wc
182e4     1F 24 C6 C9 |  if_b	decod	local04, #31
182e8     00 24 06 36 |  if_ae	mov	local04, #0
182ec     38 F0 BF FD | 	call	#__system___float_fromuns
182f0     12 FB 61 F5 | 	xor	result1, local04
182f4     FD 12 02 F6 | 	mov	arg01, result1
182f8     10 15 02 F6 | 	mov	arg02, local02
182fc     01 16 06 F6 | 	mov	arg03, #1
18300     84 F7 BF FD | 	call	#__system___float_cmp
18304     00 FA 0D F2 | 	cmp	result1, #0 wz
18308     18 00 90 5D |  if_ne	jmp	#LR__2510
1830c     00 C0 1F FF 
18310     00 12 06 F6 | 	mov	arg01, ##1065353216
18314     0F 15 02 F6 | 	mov	arg02, local01
18318     11 17 02 F6 | 	mov	arg03, local03
1831c     68 00 B0 FD | 	call	#__system___float_pow_n
18320     58 00 90 FD | 	jmp	#LR__2511
18324                 | LR__2510
18324     0F 13 02 F6 | 	mov	arg01, local01
18328     00 14 06 F6 | 	mov	arg02, #0
1832c     01 16 06 F6 | 	mov	arg03, #1
18330     54 F7 BF FD | 	call	#__system___float_cmp
18334     00 FA 55 F2 | 	cmps	result1, #0 wc
18338     00 E0 3F CF 
1833c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18340     38 00 90 CD |  if_b	jmp	#LR__2511
18344     0F 13 02 F6 | 	mov	arg01, local01
18348     00 14 06 F6 | 	mov	arg02, #0
1834c     01 16 06 F6 | 	mov	arg03, #1
18350     34 F7 BF FD | 	call	#__system___float_cmp
18354     00 FA 0D F2 | 	cmp	result1, #0 wz
18358     00 FA 05 A6 |  if_e	mov	result1, #0
1835c     1C 00 90 AD |  if_e	jmp	#LR__2511
18360     0F 13 02 F6 | 	mov	arg01, local01
18364     20 FE BF FD | 	call	#__system____builtin_log2f
18368     FD 12 02 F6 | 	mov	arg01, result1
1836c     10 15 02 F6 | 	mov	arg02, local02
18370     E0 F2 BF FD | 	call	#__system___float_mul
18374     FD 12 02 F6 | 	mov	arg01, result1
18378     F8 FC BF FD | 	call	#__system____builtin_exp2f
1837c                 | LR__2511
1837c     A7 F0 03 F6 | 	mov	ptra, fp
18380     B2 00 A0 FD | 	call	#popregs_
18384                 | __system____builtin_powf_ret
18384     2D 00 64 FD | 	ret
18388                 | 
18388                 | __system___float_pow_n
18388     05 4A 05 F6 | 	mov	COUNT_, #5
1838c     A8 00 A0 FD | 	call	#pushregs_
18390     09 1F 02 F6 | 	mov	local01, arg01
18394     0A 21 02 F6 | 	mov	local02, arg02
18398     0B 23 02 F6 | 	mov	local03, arg03
1839c     00 22 56 F2 | 	cmps	local03, #0 wc
183a0     18 00 90 3D |  if_ae	jmp	#LR__2520
183a4     01 24 06 F6 | 	mov	local04, #1
183a8     11 23 62 F6 | 	neg	local03, local03
183ac     00 22 56 F2 | 	cmps	local03, #0 wc
183b0     00 FA 05 C6 |  if_b	mov	result1, #0
183b4     94 00 90 CD |  if_b	jmp	#LR__2528
183b8     04 00 90 FD | 	jmp	#LR__2521
183bc                 | LR__2520
183bc     00 24 06 F6 | 	mov	local04, #0
183c0                 | LR__2521
183c0     00 C0 1F FF 
183c4     00 26 06 F6 | 	mov	local05, ##1065353216
183c8                 | LR__2522
183c8     01 22 56 F2 | 	cmps	local03, #1 wc
183cc     30 00 90 CD |  if_b	jmp	#LR__2524
183d0     01 22 CE F7 | 	test	local03, #1 wz
183d4     10 00 90 AD |  if_e	jmp	#LR__2523
183d8     13 13 02 F6 | 	mov	arg01, local05
183dc     10 15 02 F6 | 	mov	arg02, local02
183e0     70 F2 BF FD | 	call	#__system___float_mul
183e4     FD 26 02 F6 | 	mov	local05, result1
183e8                 | LR__2523
183e8     01 22 C6 F0 | 	sar	local03, #1
183ec     10 13 02 F6 | 	mov	arg01, local02
183f0     10 15 02 F6 | 	mov	arg02, local02
183f4     5C F2 BF FD | 	call	#__system___float_mul
183f8     FD 20 02 F6 | 	mov	local02, result1
183fc     C8 FF 9F FD | 	jmp	#LR__2522
18400                 | LR__2524
18400     00 24 0E F2 | 	cmp	local04, #0 wz
18404     14 00 90 AD |  if_e	jmp	#LR__2525
18408     0F 13 02 F6 | 	mov	arg01, local01
1840c     13 15 02 F6 | 	mov	arg02, local05
18410     44 F4 BF FD | 	call	#__system___float_div
18414     FD 26 02 F6 | 	mov	local05, result1
18418     2C 00 90 FD | 	jmp	#LR__2527
1841c                 | LR__2525
1841c     0F 13 02 F6 | 	mov	arg01, local01
18420     00 C0 1F FF 
18424     00 14 06 F6 | 	mov	arg02, ##1065353216
18428     01 16 06 F6 | 	mov	arg03, #1
1842c     58 F6 BF FD | 	call	#__system___float_cmp
18430     00 FA 0D F2 | 	cmp	result1, #0 wz
18434     10 00 90 AD |  if_e	jmp	#LR__2526
18438     0F 13 02 F6 | 	mov	arg01, local01
1843c     13 15 02 F6 | 	mov	arg02, local05
18440     10 F2 BF FD | 	call	#__system___float_mul
18444     FD 26 02 F6 | 	mov	local05, result1
18448                 | LR__2526
18448                 | LR__2527
18448     13 FB 01 F6 | 	mov	result1, local05
1844c                 | LR__2528
1844c     A7 F0 03 F6 | 	mov	ptra, fp
18450     B2 00 A0 FD | 	call	#popregs_
18454                 | __system___float_pow_n_ret
18454     2D 00 64 FD | 	ret
18458                 | 
18458                 | __system___gc_ptrs
18458     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1845c     00 03 02 F6 | 	mov	_var02, _var01
18460     F3 01 00 FF 
18464     F8 03 06 F1 | 	add	_var02, ##255992
18468     00 FD 09 FB | 	rdlong	result2, _var01 wz
1846c     74 00 90 5D |  if_ne	jmp	#LR__2530
18470     01 FD 01 F6 | 	mov	result2, _var02
18474     00 FD 81 F1 | 	sub	result2, _var01
18478     00 03 58 FC | 	wrword	#1, _var01
1847c     00 FB 01 F6 | 	mov	result1, _var01
18480     02 FA 05 F1 | 	add	result1, #2
18484     36 00 80 FF 
18488     FD 20 59 FC | 	wrword	##27792, result1
1848c     00 FB 01 F6 | 	mov	result1, _var01
18490     04 FA 05 F1 | 	add	result1, #4
18494     FD 00 58 FC | 	wrword	#0, result1
18498     00 FB 01 F6 | 	mov	result1, _var01
1849c     06 FA 05 F1 | 	add	result1, #6
184a0     FD 02 58 FC | 	wrword	#1, result1
184a4     10 00 06 F1 | 	add	_var01, #16
184a8     FE FC 51 F6 | 	abs	result2, result2 wc
184ac     04 FC 45 F0 | 	shr	result2, #4
184b0     FE FC 81 F6 | 	negc	result2, result2
184b4     00 FD 51 FC | 	wrword	result2, _var01
184b8     00 FD 01 F6 | 	mov	result2, _var01
184bc     02 FC 05 F1 | 	add	result2, #2
184c0     36 00 80 FF 
184c4     FE 1E 59 FC | 	wrword	##27791, result2
184c8     00 FD 01 F6 | 	mov	result2, _var01
184cc     04 FC 05 F1 | 	add	result2, #4
184d0     FE 00 58 FC | 	wrword	#0, result2
184d4     00 FD 01 F6 | 	mov	result2, _var01
184d8     06 FC 05 F1 | 	add	result2, #6
184dc     FE 00 58 FC | 	wrword	#0, result2
184e0     10 00 86 F1 | 	sub	_var01, #16
184e4                 | LR__2530
184e4     00 FB 01 F6 | 	mov	result1, _var01
184e8     01 FD 01 F6 | 	mov	result2, _var02
184ec                 | __system___gc_ptrs_ret
184ec     2D 00 64 FD | 	ret
184f0                 | 
184f0                 | __system___gc_tryalloc
184f0     0B 4A 05 F6 | 	mov	COUNT_, #11
184f4     A8 00 A0 FD | 	call	#pushregs_
184f8     09 1F 02 F6 | 	mov	local01, arg01
184fc     0A 21 02 F6 | 	mov	local02, arg02
18500     54 FF BF FD | 	call	#__system___gc_ptrs
18504     FD 22 02 F6 | 	mov	local03, result1
18508     FE 24 02 F6 | 	mov	local04, result2
1850c     11 27 02 F6 | 	mov	local05, local03
18510     00 28 06 F6 | 	mov	local06, #0
18514     97 1E 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
18518                 | LR__2540
18518     13 2B 02 F6 | 	mov	local07, local05
1851c     06 26 06 F1 | 	add	local05, #6
18520     13 15 EA FA | 	rdword	arg02, local05 wz
18524     11 13 02 F6 | 	mov	arg01, local03
18528     00 FA 05 A6 |  if_e	mov	result1, #0
1852c     04 14 66 50 |  if_ne	shl	arg02, #4
18530     0A 13 02 51 |  if_ne	add	arg01, arg02
18534     09 FB 01 56 |  if_ne	mov	result1, arg01
18538     FD 26 0A F6 | 	mov	local05, result1 wz
1853c     13 29 E2 5A |  if_ne	rdword	local06, local05
18540     00 26 0E F2 | 	cmp	local05, #0 wz
18544     12 27 52 52 |  if_ne	cmps	local05, local04 wc
18548     08 00 90 1D |  if_a	jmp	#LR__2542
1854c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
18550     C4 FF 9F 1D |  if_a	jmp	#LR__2540
18554                 | LR__2541
18554                 | LR__2542
18554     00 26 0E F2 | 	cmp	local05, #0 wz
18558     13 FB 01 A6 |  if_e	mov	result1, local05
1855c     3C 01 90 AD |  if_e	jmp	#LR__2545
18560     13 FD 01 F6 | 	mov	result2, local05
18564     06 FC 05 F1 | 	add	result2, #6
18568     FE 2C E2 FA | 	rdword	local08, result2
1856c     14 1F 52 F2 | 	cmps	local01, local06 wc
18570     C0 00 90 3D |  if_ae	jmp	#LR__2544
18574     13 1F 52 FC | 	wrword	local01, local05
18578     13 13 02 F6 | 	mov	arg01, local05
1857c     0F 2D 02 F6 | 	mov	local08, local01
18580     04 2C 66 F0 | 	shl	local08, #4
18584     16 13 02 F1 | 	add	arg01, local08
18588     0F 29 82 F1 | 	sub	local06, local01
1858c     09 29 52 FC | 	wrword	local06, arg01
18590     09 2D 02 F6 | 	mov	local08, arg01
18594     02 2C 06 F1 | 	add	local08, #2
18598     36 00 80 FF 
1859c     16 1F 59 FC | 	wrword	##27791, local08
185a0     13 15 0A F6 | 	mov	arg02, local05 wz
185a4     00 FA 05 A6 |  if_e	mov	result1, #0
185a8     11 15 82 51 |  if_ne	sub	arg02, local03
185ac     04 14 46 50 |  if_ne	shr	arg02, #4
185b0     0A FB 01 56 |  if_ne	mov	result1, arg02
185b4     09 2D 02 F6 | 	mov	local08, arg01
185b8     04 2C 06 F1 | 	add	local08, #4
185bc     16 FB 51 FC | 	wrword	result1, local08
185c0     13 2D 02 F6 | 	mov	local08, local05
185c4     06 2C 06 F1 | 	add	local08, #6
185c8     09 15 02 F6 | 	mov	arg02, arg01
185cc     16 2D E2 FA | 	rdword	local08, local08
185d0     06 14 06 F1 | 	add	arg02, #6
185d4     0A 2D 52 FC | 	wrword	local08, arg02
185d8     09 2F 02 F6 | 	mov	local09, arg01
185dc     17 15 0A F6 | 	mov	arg02, local09 wz
185e0     00 FA 05 A6 |  if_e	mov	result1, #0
185e4     11 15 82 51 |  if_ne	sub	arg02, local03
185e8     04 14 46 50 |  if_ne	shr	arg02, #4
185ec     0A FB 01 56 |  if_ne	mov	result1, arg02
185f0     FD 2C 02 F6 | 	mov	local08, result1
185f4     09 31 EA FA | 	rdword	local10, arg01 wz
185f8     00 FA 05 A6 |  if_e	mov	result1, #0
185fc     04 30 66 50 |  if_ne	shl	local10, #4
18600     18 13 02 51 |  if_ne	add	arg01, local10
18604     09 FB 01 56 |  if_ne	mov	result1, arg01
18608     FD 32 0A F6 | 	mov	local11, result1 wz
1860c     24 00 90 AD |  if_e	jmp	#LR__2543
18610     12 33 52 F2 | 	cmps	local11, local04 wc
18614     1C 00 90 3D |  if_ae	jmp	#LR__2543
18618     17 15 0A F6 | 	mov	arg02, local09 wz
1861c     00 FA 05 A6 |  if_e	mov	result1, #0
18620     11 15 82 51 |  if_ne	sub	arg02, local03
18624     04 14 46 50 |  if_ne	shr	arg02, #4
18628     0A FB 01 56 |  if_ne	mov	result1, arg02
1862c     04 32 06 F1 | 	add	local11, #4
18630     19 FB 51 FC | 	wrword	result1, local11
18634                 | LR__2543
18634                 | LR__2544
18634     06 2A 06 F1 | 	add	local07, #6
18638     15 2D 52 FC | 	wrword	local08, local07
1863c     36 00 00 FF 
18640     80 2E 06 F6 | 	mov	local09, ##27776
18644     10 2F 42 F5 | 	or	local09, local02
18648     00 FA 05 F6 | 	mov	result1, #0
1864c     01 FA 61 FD | 	cogid	result1
18650     FD 2E 42 F5 | 	or	local09, result1
18654     13 33 02 F6 | 	mov	local11, local05
18658     02 32 06 F1 | 	add	local11, #2
1865c     19 2F 52 FC | 	wrword	local09, local11
18660     11 2F 02 F6 | 	mov	local09, local03
18664     08 2E 06 F1 | 	add	local09, #8
18668     13 33 02 F6 | 	mov	local11, local05
1866c     17 2F E2 FA | 	rdword	local09, local09
18670     06 32 06 F1 | 	add	local11, #6
18674     19 2F 52 FC | 	wrword	local09, local11
18678     13 15 0A F6 | 	mov	arg02, local05 wz
1867c     00 FA 05 A6 |  if_e	mov	result1, #0
18680     11 15 82 51 |  if_ne	sub	arg02, local03
18684     04 14 46 50 |  if_ne	shr	arg02, #4
18688     0A FB 01 56 |  if_ne	mov	result1, arg02
1868c     08 22 06 F1 | 	add	local03, #8
18690     11 FB 51 FC | 	wrword	result1, local03
18694     08 26 06 F1 | 	add	local05, #8
18698     13 FB 01 F6 | 	mov	result1, local05
1869c                 | LR__2545
1869c     A7 F0 03 F6 | 	mov	ptra, fp
186a0     B2 00 A0 FD | 	call	#popregs_
186a4                 | __system___gc_tryalloc_ret
186a4     2D 00 64 FD | 	ret
186a8                 | 
186a8                 | __system___gc_alloc_managed
186a8     01 4A 05 F6 | 	mov	COUNT_, #1
186ac     A8 00 A0 FD | 	call	#pushregs_
186b0     09 1F 02 F6 | 	mov	local01, arg01
186b4     00 14 06 F6 | 	mov	arg02, #0
186b8     1C 00 B0 FD | 	call	#__system___gc_doalloc
186bc     FD 14 0A F6 | 	mov	arg02, result1 wz
186c0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
186c4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
186c8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
186cc     A7 F0 03 F6 | 	mov	ptra, fp
186d0     B2 00 A0 FD | 	call	#popregs_
186d4                 | __system___gc_alloc_managed_ret
186d4     2D 00 64 FD | 	ret
186d8                 | 
186d8                 | __system___gc_doalloc
186d8     06 4A 05 F6 | 	mov	COUNT_, #6
186dc     A8 00 A0 FD | 	call	#pushregs_
186e0     09 1F 0A F6 | 	mov	local01, arg01 wz
186e4     0A 21 02 F6 | 	mov	local02, arg02
186e8     00 FA 05 A6 |  if_e	mov	result1, #0
186ec     8C 00 90 AD |  if_e	jmp	#LR__2557
186f0     17 1E 06 F1 | 	add	local01, #23
186f4     0F 1E 26 F5 | 	andn	local01, #15
186f8     04 1E 46 F0 | 	shr	local01, #4
186fc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18700     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18704     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18708     34 C5 BF FD | 	call	#__system___lockmem
1870c     0F 13 02 F6 | 	mov	arg01, local01
18710     10 15 02 F6 | 	mov	arg02, local02
18714     D8 FD BF FD | 	call	#__system___gc_tryalloc
18718     FD 22 0A F6 | 	mov	local03, result1 wz
1871c     14 00 90 5D |  if_ne	jmp	#LR__2550
18720     70 03 B0 FD | 	call	#__system___gc_docollect
18724     0F 13 02 F6 | 	mov	arg01, local01
18728     10 15 02 F6 | 	mov	arg02, local02
1872c     C0 FD BF FD | 	call	#__system___gc_tryalloc
18730     FD 22 02 F6 | 	mov	local03, result1
18734                 | LR__2550
18734     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18738     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1873c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18740     09 01 68 FC | 	wrlong	#0, arg01
18744     00 22 0E F2 | 	cmp	local03, #0 wz
18748     2C 00 90 AD |  if_e	jmp	#LR__2556
1874c     04 1E 66 F0 | 	shl	local01, #4
18750     08 1E 86 F1 | 	sub	local01, #8
18754     0F 25 52 F6 | 	abs	local04, local01 wc
18758     02 24 46 F0 | 	shr	local04, #2
1875c     12 27 8A F6 | 	negc	local05, local04 wz
18760     11 29 02 F6 | 	mov	local06, local03
18764     10 00 90 AD |  if_e	jmp	#LR__2555
18768     97 06 48 FB | 	callpa	#(@LR__2553-@LR__2551)>>2,fcache_load_ptr_
1876c                 | LR__2551
1876c     13 05 D8 FC | 	rep	@LR__2554, local05
18770                 | LR__2552
18770     14 01 68 FC | 	wrlong	#0, local06
18774     04 28 06 F1 | 	add	local06, #4
18778                 | LR__2553
18778                 | LR__2554
18778                 | LR__2555
18778                 | LR__2556
18778     11 FB 01 F6 | 	mov	result1, local03
1877c                 | LR__2557
1877c     A7 F0 03 F6 | 	mov	ptra, fp
18780     B2 00 A0 FD | 	call	#popregs_
18784                 | __system___gc_doalloc_ret
18784     2D 00 64 FD | 	ret
18788                 | 
18788                 | __system___gc_isvalidptr
18788     F8 16 06 F4 | 	bitl	arg03, #248
1878c     08 16 86 F1 | 	sub	arg03, #8
18790     09 17 52 F2 | 	cmps	arg03, arg01 wc
18794     08 00 90 CD |  if_b	jmp	#LR__2560
18798     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1879c     08 00 90 CD |  if_b	jmp	#LR__2561
187a0                 | LR__2560
187a0     00 FA 05 F6 | 	mov	result1, #0
187a4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
187a8                 | LR__2561
187a8     0B 01 02 F6 | 	mov	_var01, arg03
187ac     09 01 62 F5 | 	xor	_var01, arg01
187b0     0F 00 CE F7 | 	test	_var01, #15 wz
187b4     00 FA 05 56 |  if_ne	mov	result1, #0
187b8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
187bc     0B 01 02 F6 | 	mov	_var01, arg03
187c0     02 00 06 F1 | 	add	_var01, #2
187c4     00 01 E2 FA | 	rdword	_var01, _var01
187c8     7F 00 00 FF 
187cc     C0 01 06 F5 | 	and	_var01, ##65472
187d0     36 00 00 FF 
187d4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
187d8     00 FA 05 56 |  if_ne	mov	result1, #0
187dc     0B FB 01 A6 |  if_e	mov	result1, arg03
187e0                 | __system___gc_isvalidptr_ret
187e0     2D 00 64 FD | 	ret
187e4                 | 
187e4                 | __system___gc_free
187e4     09 17 02 F6 | 	mov	arg03, arg01
187e8     6C FC BF FD | 	call	#__system___gc_ptrs
187ec     FD 12 02 F6 | 	mov	arg01, result1
187f0     FE 14 02 F6 | 	mov	arg02, result2
187f4     90 FF BF FD | 	call	#__system___gc_isvalidptr
187f8     FD 14 0A F6 | 	mov	arg02, result1 wz
187fc     28 00 90 AD |  if_e	jmp	#LR__2570
18800     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18804     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18808     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1880c     30 C4 BF FD | 	call	#__system___lockmem
18810     0A 13 02 F6 | 	mov	arg01, arg02
18814     14 00 B0 FD | 	call	#__system___gc_dofree
18818     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1881c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18820     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18824     09 01 68 FC | 	wrlong	#0, arg01
18828                 | LR__2570
18828                 | __system___gc_free_ret
18828     2D 00 64 FD | 	ret
1882c                 | 
1882c                 | __system___gc_dofree
1882c     06 4A 05 F6 | 	mov	COUNT_, #6
18830     A8 00 A0 FD | 	call	#pushregs_
18834     09 1F 02 F6 | 	mov	local01, arg01
18838     1C FC BF FD | 	call	#__system___gc_ptrs
1883c     FD 20 02 F6 | 	mov	local02, result1
18840     FE 22 02 F6 | 	mov	local03, result2
18844     0F 15 02 F6 | 	mov	arg02, local01
18848     02 14 06 F1 | 	add	arg02, #2
1884c     36 00 80 FF 
18850     0A 1F 59 FC | 	wrword	##27791, arg02
18854     0F 25 02 F6 | 	mov	local04, local01
18858     0F 13 02 F6 | 	mov	arg01, local01
1885c     09 27 EA FA | 	rdword	local05, arg01 wz
18860     00 FA 05 A6 |  if_e	mov	result1, #0
18864     04 26 66 50 |  if_ne	shl	local05, #4
18868     13 13 02 51 |  if_ne	add	arg01, local05
1886c     09 FB 01 56 |  if_ne	mov	result1, arg01
18870     FD 28 02 F6 | 	mov	local06, result1
18874     97 24 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
18878                 | LR__2580
18878     04 24 06 F1 | 	add	local04, #4
1887c     12 15 EA FA | 	rdword	arg02, local04 wz
18880     10 13 02 F6 | 	mov	arg01, local02
18884     00 FA 05 A6 |  if_e	mov	result1, #0
18888     04 14 66 50 |  if_ne	shl	arg02, #4
1888c     0A 13 02 51 |  if_ne	add	arg01, arg02
18890     09 FB 01 56 |  if_ne	mov	result1, arg01
18894     FD 24 0A F6 | 	mov	local04, result1 wz
18898     24 00 90 AD |  if_e	jmp	#LR__2582
1889c     12 13 02 F6 | 	mov	arg01, local04
188a0     00 FA 05 F6 | 	mov	result1, #0
188a4     02 12 06 F1 | 	add	arg01, #2
188a8     09 13 E2 FA | 	rdword	arg01, arg01
188ac     36 00 00 FF 
188b0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
188b4     01 FA 65 A6 |  if_e	neg	result1, #1
188b8     00 FA 0D F2 | 	cmp	result1, #0 wz
188bc     B8 FF 9F AD |  if_e	jmp	#LR__2580
188c0                 | LR__2581
188c0                 | LR__2582
188c0     00 24 0E F2 | 	cmp	local04, #0 wz
188c4     10 25 02 A6 |  if_e	mov	local04, local02
188c8     12 15 02 F6 | 	mov	arg02, local04
188cc     06 14 06 F1 | 	add	arg02, #6
188d0     0F 13 02 F6 | 	mov	arg01, local01
188d4     0A 15 E2 FA | 	rdword	arg02, arg02
188d8     06 12 06 F1 | 	add	arg01, #6
188dc     09 15 52 FC | 	wrword	arg02, arg01
188e0     0F 15 0A F6 | 	mov	arg02, local01 wz
188e4     00 FA 05 A6 |  if_e	mov	result1, #0
188e8     10 15 82 51 |  if_ne	sub	arg02, local02
188ec     04 14 46 50 |  if_ne	shr	arg02, #4
188f0     0A FB 01 56 |  if_ne	mov	result1, arg02
188f4     12 15 02 F6 | 	mov	arg02, local04
188f8     06 14 06 F1 | 	add	arg02, #6
188fc     0A FB 51 FC | 	wrword	result1, arg02
18900     10 25 0A F2 | 	cmp	local04, local02 wz
18904     A4 00 90 AD |  if_e	jmp	#LR__2585
18908     12 13 02 F6 | 	mov	arg01, local04
1890c     09 27 EA FA | 	rdword	local05, arg01 wz
18910     00 FA 05 A6 |  if_e	mov	result1, #0
18914     04 26 66 50 |  if_ne	shl	local05, #4
18918     13 13 02 51 |  if_ne	add	arg01, local05
1891c     09 FB 01 56 |  if_ne	mov	result1, arg01
18920     0F FB 09 F2 | 	cmp	result1, local01 wz
18924     84 00 90 5D |  if_ne	jmp	#LR__2584
18928     12 29 E2 FA | 	rdword	local06, local04
1892c     0F 15 E2 FA | 	rdword	arg02, local01
18930     0A 29 02 F1 | 	add	local06, arg02
18934     12 29 52 FC | 	wrword	local06, local04
18938     0F 29 02 F6 | 	mov	local06, local01
1893c     02 28 06 F1 | 	add	local06, #2
18940     14 01 58 FC | 	wrword	#0, local06
18944     0F 13 02 F6 | 	mov	arg01, local01
18948     09 27 EA FA | 	rdword	local05, arg01 wz
1894c     00 FA 05 A6 |  if_e	mov	result1, #0
18950     04 26 66 50 |  if_ne	shl	local05, #4
18954     13 13 02 51 |  if_ne	add	arg01, local05
18958     09 FB 01 56 |  if_ne	mov	result1, arg01
1895c     FD 28 02 F6 | 	mov	local06, result1
18960     11 29 52 F2 | 	cmps	local06, local03 wc
18964     20 00 90 3D |  if_ae	jmp	#LR__2583
18968     12 15 0A F6 | 	mov	arg02, local04 wz
1896c     00 FA 05 A6 |  if_e	mov	result1, #0
18970     10 15 82 51 |  if_ne	sub	arg02, local02
18974     04 14 46 50 |  if_ne	shr	arg02, #4
18978     0A FB 01 56 |  if_ne	mov	result1, arg02
1897c     14 15 02 F6 | 	mov	arg02, local06
18980     04 14 06 F1 | 	add	arg02, #4
18984     0A FB 51 FC | 	wrword	result1, arg02
18988                 | LR__2583
18988     0F 15 02 F6 | 	mov	arg02, local01
1898c     06 14 06 F1 | 	add	arg02, #6
18990     12 FD 01 F6 | 	mov	result2, local04
18994     0A 15 E2 FA | 	rdword	arg02, arg02
18998     06 FC 05 F1 | 	add	result2, #6
1899c     FE 14 52 FC | 	wrword	arg02, result2
189a0     06 1E 06 F1 | 	add	local01, #6
189a4     0F 01 58 FC | 	wrword	#0, local01
189a8     12 1F 02 F6 | 	mov	local01, local04
189ac                 | LR__2584
189ac                 | LR__2585
189ac     0F 13 02 F6 | 	mov	arg01, local01
189b0     09 27 EA FA | 	rdword	local05, arg01 wz
189b4     00 FA 05 A6 |  if_e	mov	result1, #0
189b8     04 26 66 50 |  if_ne	shl	local05, #4
189bc     13 13 02 51 |  if_ne	add	arg01, local05
189c0     09 FB 01 56 |  if_ne	mov	result1, arg01
189c4     FD 14 0A F6 | 	mov	arg02, result1 wz
189c8     B8 00 90 AD |  if_e	jmp	#LR__2587
189cc     11 15 52 F2 | 	cmps	arg02, local03 wc
189d0     B0 00 90 3D |  if_ae	jmp	#LR__2587
189d4     0A 13 02 F6 | 	mov	arg01, arg02
189d8     00 FA 05 F6 | 	mov	result1, #0
189dc     02 12 06 F1 | 	add	arg01, #2
189e0     09 13 E2 FA | 	rdword	arg01, arg01
189e4     36 00 00 FF 
189e8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
189ec     01 FA 65 A6 |  if_e	neg	result1, #1
189f0     00 FA 0D F2 | 	cmp	result1, #0 wz
189f4     8C 00 90 AD |  if_e	jmp	#LR__2587
189f8     0F 25 02 F6 | 	mov	local04, local01
189fc     12 29 E2 FA | 	rdword	local06, local04
18a00     0A 13 02 F6 | 	mov	arg01, arg02
18a04     09 1F E2 FA | 	rdword	local01, arg01
18a08     0F 29 02 F1 | 	add	local06, local01
18a0c     12 29 52 FC | 	wrword	local06, local04
18a10     09 29 02 F6 | 	mov	local06, arg01
18a14     06 28 06 F1 | 	add	local06, #6
18a18     12 1F 02 F6 | 	mov	local01, local04
18a1c     14 29 E2 FA | 	rdword	local06, local06
18a20     06 1E 06 F1 | 	add	local01, #6
18a24     0F 29 52 FC | 	wrword	local06, local01
18a28     09 29 02 F6 | 	mov	local06, arg01
18a2c     02 28 06 F1 | 	add	local06, #2
18a30     14 55 59 FC | 	wrword	#170, local06
18a34     09 29 02 F6 | 	mov	local06, arg01
18a38     06 28 06 F1 | 	add	local06, #6
18a3c     14 01 58 FC | 	wrword	#0, local06
18a40     09 27 EA FA | 	rdword	local05, arg01 wz
18a44     00 FA 05 A6 |  if_e	mov	result1, #0
18a48     04 26 66 50 |  if_ne	shl	local05, #4
18a4c     13 13 02 51 |  if_ne	add	arg01, local05
18a50     09 FB 01 56 |  if_ne	mov	result1, arg01
18a54     FD 28 0A F6 | 	mov	local06, result1 wz
18a58     28 00 90 AD |  if_e	jmp	#LR__2586
18a5c     11 29 52 F2 | 	cmps	local06, local03 wc
18a60     20 00 90 3D |  if_ae	jmp	#LR__2586
18a64     12 15 0A F6 | 	mov	arg02, local04 wz
18a68     00 FA 05 A6 |  if_e	mov	result1, #0
18a6c     10 15 82 51 |  if_ne	sub	arg02, local02
18a70     04 14 46 50 |  if_ne	shr	arg02, #4
18a74     0A FB 01 56 |  if_ne	mov	result1, arg02
18a78     14 25 02 F6 | 	mov	local04, local06
18a7c     04 24 06 F1 | 	add	local04, #4
18a80     12 FB 51 FC | 	wrword	result1, local04
18a84                 | LR__2586
18a84                 | LR__2587
18a84     14 FB 01 F6 | 	mov	result1, local06
18a88     A7 F0 03 F6 | 	mov	ptra, fp
18a8c     B2 00 A0 FD | 	call	#popregs_
18a90                 | __system___gc_dofree_ret
18a90     2D 00 64 FD | 	ret
18a94                 | 
18a94                 | __system___gc_docollect
18a94     05 4A 05 F6 | 	mov	COUNT_, #5
18a98     A8 00 A0 FD | 	call	#pushregs_
18a9c     B8 F9 BF FD | 	call	#__system___gc_ptrs
18aa0     FE 1E 02 F6 | 	mov	local01, result2
18aa4     FD 20 02 F6 | 	mov	local02, result1
18aa8     10 13 02 F6 | 	mov	arg01, local02
18aac     09 23 EA FA | 	rdword	local03, arg01 wz
18ab0     00 FA 05 A6 |  if_e	mov	result1, #0
18ab4     04 22 66 50 |  if_ne	shl	local03, #4
18ab8     11 13 02 51 |  if_ne	add	arg01, local03
18abc     09 FB 01 56 |  if_ne	mov	result1, arg01
18ac0     FD 24 0A F6 | 	mov	local04, result1 wz
18ac4     00 FA 05 F6 | 	mov	result1, #0
18ac8     01 FA 61 FD | 	cogid	result1
18acc     FD 26 02 F6 | 	mov	local05, result1
18ad0     48 00 90 AD |  if_e	jmp	#LR__2592
18ad4     97 22 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
18ad8                 | LR__2590
18ad8     0F 25 52 F2 | 	cmps	local04, local01 wc
18adc     3C 00 90 3D |  if_ae	jmp	#LR__2592
18ae0     12 15 02 F6 | 	mov	arg02, local04
18ae4     02 14 06 F1 | 	add	arg02, #2
18ae8     0A 15 E2 FA | 	rdword	arg02, arg02
18aec     20 14 26 F5 | 	andn	arg02, #32
18af0     12 13 02 F6 | 	mov	arg01, local04
18af4     02 12 06 F1 | 	add	arg01, #2
18af8     09 15 52 FC | 	wrword	arg02, arg01
18afc     12 13 02 F6 | 	mov	arg01, local04
18b00     09 23 EA FA | 	rdword	local03, arg01 wz
18b04     00 FA 05 A6 |  if_e	mov	result1, #0
18b08     04 22 66 50 |  if_ne	shl	local03, #4
18b0c     11 13 02 51 |  if_ne	add	arg01, local03
18b10     09 FB 01 56 |  if_ne	mov	result1, arg01
18b14     FD 24 0A F6 | 	mov	local04, result1 wz
18b18     BC FF 9F 5D |  if_ne	jmp	#LR__2590
18b1c                 | LR__2591
18b1c                 | LR__2592
18b1c     00 22 06 F6 | 	mov	local03, #0
18b20     00 12 06 F6 | 	mov	arg01, #0
18b24     F0 C0 BF FD | 	call	#__system____topofstack
18b28     FD 14 02 F6 | 	mov	arg02, result1
18b2c     11 13 02 F6 | 	mov	arg01, local03
18b30     90 00 B0 FD | 	call	#__system___gc_markhub
18b34     1C 01 B0 FD | 	call	#__system___gc_markcog
18b38     10 13 02 F6 | 	mov	arg01, local02
18b3c     09 23 EA FA | 	rdword	local03, arg01 wz
18b40     00 FA 05 A6 |  if_e	mov	result1, #0
18b44     04 22 66 50 |  if_ne	shl	local03, #4
18b48     11 13 02 51 |  if_ne	add	arg01, local03
18b4c     09 FB 01 56 |  if_ne	mov	result1, arg01
18b50     FD 20 0A F6 | 	mov	local02, result1 wz
18b54     60 00 90 AD |  if_e	jmp	#LR__2596
18b58                 | LR__2593
18b58     10 25 02 F6 | 	mov	local04, local02
18b5c     12 13 02 F6 | 	mov	arg01, local04
18b60     09 23 EA FA | 	rdword	local03, arg01 wz
18b64     00 FA 05 A6 |  if_e	mov	result1, #0
18b68     04 22 66 50 |  if_ne	shl	local03, #4
18b6c     11 13 02 51 |  if_ne	add	arg01, local03
18b70     09 FB 01 56 |  if_ne	mov	result1, arg01
18b74     FD 20 02 F6 | 	mov	local02, result1
18b78     12 15 02 F6 | 	mov	arg02, local04
18b7c     02 14 06 F1 | 	add	arg02, #2
18b80     0A 15 E2 FA | 	rdword	arg02, arg02
18b84     20 14 CE F7 | 	test	arg02, #32 wz
18b88     10 14 CE A7 |  if_e	test	arg02, #16 wz
18b8c     1C 00 90 5D |  if_ne	jmp	#LR__2595
18b90     0A 15 42 F8 | 	getnib	arg02, arg02, #0
18b94     13 15 0A F2 | 	cmp	arg02, local05 wz
18b98     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
18b9c     0C 00 90 5D |  if_ne	jmp	#LR__2594
18ba0     12 13 02 F6 | 	mov	arg01, local04
18ba4     84 FC BF FD | 	call	#__system___gc_dofree
18ba8     FD 20 02 F6 | 	mov	local02, result1
18bac                 | LR__2594
18bac                 | LR__2595
18bac     00 20 0E F2 | 	cmp	local02, #0 wz
18bb0     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
18bb4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2593
18bb8                 | LR__2596
18bb8     A7 F0 03 F6 | 	mov	ptra, fp
18bbc     B2 00 A0 FD | 	call	#popregs_
18bc0                 | __system___gc_docollect_ret
18bc0     2D 00 64 FD | 	ret
18bc4                 | 
18bc4                 | __system___gc_markhub
18bc4     04 4A 05 F6 | 	mov	COUNT_, #4
18bc8     A8 00 A0 FD | 	call	#pushregs_
18bcc     09 1F 02 F6 | 	mov	local01, arg01
18bd0     0A 21 02 F6 | 	mov	local02, arg02
18bd4     80 F8 BF FD | 	call	#__system___gc_ptrs
18bd8     FD 22 02 F6 | 	mov	local03, result1
18bdc     FE 24 02 F6 | 	mov	local04, result2
18be0                 | LR__2600
18be0     10 1F 52 F2 | 	cmps	local01, local02 wc
18be4     60 00 90 3D |  if_ae	jmp	#LR__2601
18be8     0F 17 02 FB | 	rdlong	arg03, local01
18bec     04 1E 06 F1 | 	add	local01, #4
18bf0     12 15 02 F6 | 	mov	arg02, local04
18bf4     11 13 02 F6 | 	mov	arg01, local03
18bf8     8C FB BF FD | 	call	#__system___gc_isvalidptr
18bfc     FD 16 0A F6 | 	mov	arg03, result1 wz
18c00     DC FF 9F AD |  if_e	jmp	#LR__2600
18c04     0B 13 02 F6 | 	mov	arg01, arg03
18c08     00 FA 05 F6 | 	mov	result1, #0
18c0c     02 12 06 F1 | 	add	arg01, #2
18c10     09 13 E2 FA | 	rdword	arg01, arg01
18c14     36 00 00 FF 
18c18     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
18c1c     01 FA 65 A6 |  if_e	neg	result1, #1
18c20     00 FA 0D F2 | 	cmp	result1, #0 wz
18c24     B8 FF 9F 5D |  if_ne	jmp	#LR__2600
18c28     0B FD 01 F6 | 	mov	result2, arg03
18c2c     02 FC 05 F1 | 	add	result2, #2
18c30     FE FC E1 FA | 	rdword	result2, result2
18c34     0F FC 25 F5 | 	andn	result2, #15
18c38     2E FC 45 F5 | 	or	result2, #46
18c3c     02 16 06 F1 | 	add	arg03, #2
18c40     0B FD 51 FC | 	wrword	result2, arg03
18c44     98 FF 9F FD | 	jmp	#LR__2600
18c48                 | LR__2601
18c48     A7 F0 03 F6 | 	mov	ptra, fp
18c4c     B2 00 A0 FD | 	call	#popregs_
18c50                 | __system___gc_markhub_ret
18c50     2D 00 64 FD | 	ret
18c54                 | 
18c54                 | __system___gc_markcog
18c54     04 4A 05 F6 | 	mov	COUNT_, #4
18c58     A8 00 A0 FD | 	call	#pushregs_
18c5c     F8 F7 BF FD | 	call	#__system___gc_ptrs
18c60     FD 1E 02 F6 | 	mov	local01, result1
18c64     FE 20 02 F6 | 	mov	local02, result2
18c68     EF 23 06 F6 | 	mov	local03, #495
18c6c                 | LR__2610
18c6c                 | 	'.live	local03
18c6c     00 22 96 F9 | 	alts	local03, #0
18c70     11 25 02 F6 | 	mov	local04, local03
18c74     0F 13 02 F6 | 	mov	arg01, local01
18c78     10 15 02 F6 | 	mov	arg02, local02
18c7c     12 17 02 F6 | 	mov	arg03, local04
18c80     04 FB BF FD | 	call	#__system___gc_isvalidptr
18c84     00 FA 0D F2 | 	cmp	result1, #0 wz
18c88     18 00 90 AD |  if_e	jmp	#LR__2611
18c8c     FD 24 02 F6 | 	mov	local04, result1
18c90     02 24 06 F1 | 	add	local04, #2
18c94     12 25 E2 FA | 	rdword	local04, local04
18c98     20 24 46 F5 | 	or	local04, #32
18c9c     02 FA 05 F1 | 	add	result1, #2
18ca0     FD 24 52 FC | 	wrword	local04, result1
18ca4                 | LR__2611
18ca4     01 22 86 F1 | 	sub	local03, #1
18ca8     00 22 56 F2 | 	cmps	local03, #0 wc
18cac     BC FF 9F 3D |  if_ae	jmp	#LR__2610
18cb0     A7 F0 03 F6 | 	mov	ptra, fp
18cb4     B2 00 A0 FD | 	call	#popregs_
18cb8                 | __system___gc_markcog_ret
18cb8     2D 00 64 FD | 	ret
18cbc                 | 
18cbc                 | __system__opendir
18cbc     06 4A 05 F6 | 	mov	COUNT_, #6
18cc0     A8 00 A0 FD | 	call	#pushregs_
18cc4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
18cc8     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
18ccc     09 15 02 F6 | 	mov	arg02, arg01
18cd0     0F 13 02 F6 | 	mov	arg01, local01
18cd4     00 16 06 F6 | 	mov	arg03, #0
18cd8     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
18cdc     F8 C6 BF FD | 	call	#__system____getvfsforfile
18ce0     FD 20 0A F6 | 	mov	local02, result1 wz
18ce4     10 00 90 AD |  if_e	jmp	#LR__2620
18ce8     28 20 06 F1 | 	add	local02, #40
18cec     10 17 0A FB | 	rdlong	arg03, local02 wz
18cf0     28 20 86 F1 | 	sub	local02, #40
18cf4     14 00 90 5D |  if_ne	jmp	#LR__2621
18cf8                 | LR__2620
18cf8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18cfc     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
18d00     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18d04     00 FA 05 F6 | 	mov	result1, #0
18d08     90 00 90 FD | 	jmp	#LR__2623
18d0c                 | LR__2621
18d0c     5C 12 06 F6 | 	mov	arg01, #92
18d10     10 14 06 F6 | 	mov	arg02, #16
18d14     C0 F9 BF FD | 	call	#__system___gc_doalloc
18d18     FD 22 0A F6 | 	mov	local03, result1 wz
18d1c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18d20     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
18d24     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18d28     00 FA 05 A6 |  if_e	mov	result1, #0
18d2c     6C 00 90 AD |  if_e	jmp	#LR__2623
18d30     28 20 06 F1 | 	add	local02, #40
18d34     10 25 02 FB | 	rdlong	local04, local02
18d38     12 27 02 F6 | 	mov	local05, local04
18d3c     28 20 86 F1 | 	sub	local02, #40
18d40     13 26 46 F7 | 	zerox	local05, #19
18d44     14 24 46 F0 | 	shr	local04, #20
18d48     02 24 66 F0 | 	shl	local04, #2
18d4c     ED 24 02 F1 | 	add	local04, __methods__
18d50     12 25 02 FB | 	rdlong	local04, local04
18d54     11 13 02 F6 | 	mov	arg01, local03
18d58     0F 15 02 F6 | 	mov	arg02, local01
18d5c     F2 28 02 F6 | 	mov	local06, objptr
18d60     13 E5 01 F6 | 	mov	objptr, local05
18d64     2D 24 62 FD | 	call	local04
18d68     14 E5 01 F6 | 	mov	objptr, local06
18d6c     FD 16 0A F6 | 	mov	arg03, result1 wz
18d70     20 00 90 AD |  if_e	jmp	#LR__2622
18d74     00 16 4E F2 | 	cmps	arg03, #0 wz
18d78     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18d7c     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
18d80     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18d84     11 13 02 F6 | 	mov	arg01, local03
18d88     58 FA BF FD | 	call	#__system___gc_free
18d8c     00 FA 05 F6 | 	mov	result1, #0
18d90     08 00 90 FD | 	jmp	#LR__2623
18d94                 | LR__2622
18d94     11 21 62 FC | 	wrlong	local02, local03
18d98     11 FB 01 F6 | 	mov	result1, local03
18d9c                 | LR__2623
18d9c     A7 F0 03 F6 | 	mov	ptra, fp
18da0     B2 00 A0 FD | 	call	#popregs_
18da4                 | __system__opendir_ret
18da4     2D 00 64 FD | 	ret
18da8                 | 
18da8                 | __system__closedir
18da8     04 4A 05 F6 | 	mov	COUNT_, #4
18dac     A8 00 A0 FD | 	call	#pushregs_
18db0     09 1F 02 F6 | 	mov	local01, arg01
18db4     0F 13 02 FB | 	rdlong	arg01, local01
18db8     2C 12 06 F1 | 	add	arg01, #44
18dbc     09 21 02 FB | 	rdlong	local02, arg01
18dc0     10 23 02 F6 | 	mov	local03, local02
18dc4     13 22 46 F7 | 	zerox	local03, #19
18dc8     14 20 46 F0 | 	shr	local02, #20
18dcc     02 20 66 F0 | 	shl	local02, #2
18dd0     ED 20 02 F1 | 	add	local02, __methods__
18dd4     10 21 02 FB | 	rdlong	local02, local02
18dd8     0F 13 02 F6 | 	mov	arg01, local01
18ddc     F2 24 02 F6 | 	mov	local04, objptr
18de0     11 E5 01 F6 | 	mov	objptr, local03
18de4     2D 20 62 FD | 	call	local02
18de8     12 E5 01 F6 | 	mov	objptr, local04
18dec     FD 24 02 F6 | 	mov	local04, result1
18df0     0F 13 02 F6 | 	mov	arg01, local01
18df4     EC F9 BF FD | 	call	#__system___gc_free
18df8     00 24 4E F2 | 	cmps	local04, #0 wz
18dfc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18e00     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
18e04     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18e08     01 FA 65 56 |  if_ne	neg	result1, #1
18e0c     00 FA 05 A6 |  if_e	mov	result1, #0
18e10     A7 F0 03 F6 | 	mov	ptra, fp
18e14     B2 00 A0 FD | 	call	#popregs_
18e18                 | __system__closedir_ret
18e18     2D 00 64 FD | 	ret
18e1c                 | 
18e1c                 | __system__readdir
18e1c     04 4A 05 F6 | 	mov	COUNT_, #4
18e20     A8 00 A0 FD | 	call	#pushregs_
18e24     09 15 0A FB | 	rdlong	arg02, arg01 wz
18e28     08 12 06 F1 | 	add	arg01, #8
18e2c     09 1F 02 F6 | 	mov	local01, arg01
18e30     08 12 86 F1 | 	sub	arg01, #8
18e34     00 FA 05 A6 |  if_e	mov	result1, #0
18e38     5C 00 90 AD |  if_e	jmp	#LR__2631
18e3c     30 14 06 F1 | 	add	arg02, #48
18e40     0A 21 02 FB | 	rdlong	local02, arg02
18e44     10 23 02 F6 | 	mov	local03, local02
18e48     13 22 46 F7 | 	zerox	local03, #19
18e4c     14 20 46 F0 | 	shr	local02, #20
18e50     02 20 66 F0 | 	shl	local02, #2
18e54     ED 20 02 F1 | 	add	local02, __methods__
18e58     10 21 02 FB | 	rdlong	local02, local02
18e5c     0F 15 02 F6 | 	mov	arg02, local01
18e60     F2 24 02 F6 | 	mov	local04, objptr
18e64     11 E5 01 F6 | 	mov	objptr, local03
18e68     2D 20 62 FD | 	call	local02
18e6c     12 E5 01 F6 | 	mov	objptr, local04
18e70     00 FA 4D F2 | 	cmps	result1, #0 wz
18e74     1C 00 90 AD |  if_e	jmp	#LR__2630
18e78     01 FA 55 F2 | 	cmps	result1, #1 wc
18e7c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
18e80     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
18e84     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
18e88     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
18e8c     00 FA 05 F6 | 	mov	result1, #0
18e90     04 00 90 FD | 	jmp	#LR__2631
18e94                 | LR__2630
18e94     0F FB 01 F6 | 	mov	result1, local01
18e98                 | LR__2631
18e98     A7 F0 03 F6 | 	mov	ptra, fp
18e9c     B2 00 A0 FD | 	call	#popregs_
18ea0                 | __system__readdir_ret
18ea0     2D 00 64 FD | 	ret
18ea4                 | 
18ea4                 | __system___openraw
18ea4     15 4A 05 F6 | 	mov	COUNT_, #21
18ea8     A8 00 A0 FD | 	call	#pushregs_
18eac     09 1F 02 F6 | 	mov	local01, arg01
18eb0     0A 21 02 F6 | 	mov	local02, arg02
18eb4     0B 23 02 F6 | 	mov	local03, arg03
18eb8     0C 25 02 F6 | 	mov	local04, arg04
18ebc     04 26 06 F6 | 	mov	local05, #4
18ec0     0F 29 02 F6 | 	mov	local06, local01
18ec4     00 2A 06 F6 | 	mov	local07, #0
18ec8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
18ecc     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
18ed0     16 13 02 F6 | 	mov	arg01, local08
18ed4     10 15 02 F6 | 	mov	arg02, local02
18ed8     00 16 06 F6 | 	mov	arg03, #0
18edc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
18ee0     F4 C4 BF FD | 	call	#__system____getvfsforfile
18ee4     FD 2E 0A F6 | 	mov	local09, result1 wz
18ee8     10 00 90 AD |  if_e	jmp	#LR__2640
18eec     20 2E 06 F1 | 	add	local09, #32
18ef0     17 FB 09 FB | 	rdlong	result1, local09 wz
18ef4     20 2E 86 F1 | 	sub	local09, #32
18ef8     14 00 90 5D |  if_ne	jmp	#LR__2641
18efc                 | LR__2640
18efc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18f00     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
18f04     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18f08     01 FA 65 F6 | 	neg	result1, #1
18f0c     8C 02 90 FD | 	jmp	#LR__2654
18f10                 | LR__2641
18f10     14 13 02 F6 | 	mov	arg01, local06
18f14     00 14 06 F6 | 	mov	arg02, #0
18f18     34 16 06 F6 | 	mov	arg03, #52
18f1c     09 31 02 F6 | 	mov	local10, arg01
18f20     98 00 A0 FD | 	call	#\builtin_bytefill_
18f24     20 2E 06 F1 | 	add	local09, #32
18f28     17 33 02 FB | 	rdlong	local11, local09
18f2c     19 35 02 F6 | 	mov	local12, local11
18f30     19 37 02 F6 | 	mov	local13, local11
18f34     20 2E 86 F1 | 	sub	local09, #32
18f38     1B 39 02 F6 | 	mov	local14, local13
18f3c     13 34 46 F7 | 	zerox	local12, #19
18f40     14 38 46 F0 | 	shr	local14, #20
18f44     02 38 66 F0 | 	shl	local14, #2
18f48     ED 38 02 F1 | 	add	local14, __methods__
18f4c     1C 39 02 FB | 	rdlong	local14, local14
18f50     14 3B 02 F6 | 	mov	local15, local06
18f54     16 3D 02 F6 | 	mov	local16, local08
18f58     11 3F 02 F6 | 	mov	local17, local03
18f5c     1D 13 02 F6 | 	mov	arg01, local15
18f60     1E 15 02 F6 | 	mov	arg02, local16
18f64     1F 17 02 F6 | 	mov	arg03, local17
18f68     F2 40 02 F6 | 	mov	local18, objptr
18f6c     1A E5 01 F6 | 	mov	objptr, local12
18f70     2D 38 62 FD | 	call	local14
18f74     20 E5 01 F6 | 	mov	objptr, local18
18f78     FD 42 0A F6 | 	mov	local19, result1 wz
18f7c     04 22 CE 57 |  if_ne	test	local03, #4 wz
18f80     58 00 90 AD |  if_e	jmp	#LR__2642
18f84     24 2E 06 F1 | 	add	local09, #36
18f88     17 33 02 FB | 	rdlong	local11, local09
18f8c     19 35 02 F6 | 	mov	local12, local11
18f90     19 37 02 F6 | 	mov	local13, local11
18f94     24 2E 86 F1 | 	sub	local09, #36
18f98     1B 39 02 F6 | 	mov	local14, local13
18f9c     13 34 46 F7 | 	zerox	local12, #19
18fa0     14 38 46 F0 | 	shr	local14, #20
18fa4     02 38 66 F0 | 	shl	local14, #2
18fa8     ED 38 02 F1 | 	add	local14, __methods__
18fac     1C 39 02 FB | 	rdlong	local14, local14
18fb0     14 3B 02 F6 | 	mov	local15, local06
18fb4     16 3D 02 F6 | 	mov	local16, local08
18fb8     12 3F 02 F6 | 	mov	local17, local04
18fbc     1D 13 02 F6 | 	mov	arg01, local15
18fc0     1E 15 02 F6 | 	mov	arg02, local16
18fc4     1F 17 02 F6 | 	mov	arg03, local17
18fc8     F2 40 02 F6 | 	mov	local18, objptr
18fcc     1A E5 01 F6 | 	mov	objptr, local12
18fd0     2D 38 62 FD | 	call	local14
18fd4     20 E5 01 F6 | 	mov	objptr, local18
18fd8     FD 42 02 F6 | 	mov	local19, result1
18fdc                 | LR__2642
18fdc     00 42 0E F2 | 	cmp	local19, #0 wz
18fe0     8C 01 90 5D |  if_ne	jmp	#LR__2652
18fe4     11 45 02 F6 | 	mov	local20, local03
18fe8     03 44 0E F5 | 	and	local20, #3 wz
18fec     02 26 46 55 |  if_ne	or	local05, #2
18ff0     01 44 0E F2 | 	cmp	local20, #1 wz
18ff4     01 26 46 55 |  if_ne	or	local05, #1
18ff8     20 22 CE F7 | 	test	local03, #32 wz
18ffc     C0 26 46 55 |  if_ne	or	local05, #192
19000     08 28 06 F1 | 	add	local06, #8
19004     14 27 62 FC | 	wrlong	local05, local06
19008     0C 28 06 F1 | 	add	local06, #12
1900c     14 47 0A FB | 	rdlong	local21, local06 wz
19010     14 28 86 F1 | 	sub	local06, #20
19014     18 00 90 5D |  if_ne	jmp	#LR__2643
19018     04 2E 06 F1 | 	add	local09, #4
1901c     17 47 02 FB | 	rdlong	local21, local09
19020     04 2E 86 F1 | 	sub	local09, #4
19024     14 28 06 F1 | 	add	local06, #20
19028     14 47 62 FC | 	wrlong	local21, local06
1902c     14 28 86 F1 | 	sub	local06, #20
19030                 | LR__2643
19030     18 28 06 F1 | 	add	local06, #24
19034     14 47 0A FB | 	rdlong	local21, local06 wz
19038     18 28 86 F1 | 	sub	local06, #24
1903c     18 00 90 5D |  if_ne	jmp	#LR__2644
19040     08 2E 06 F1 | 	add	local09, #8
19044     17 47 02 FB | 	rdlong	local21, local09
19048     08 2E 86 F1 | 	sub	local09, #8
1904c     18 28 06 F1 | 	add	local06, #24
19050     14 47 62 FC | 	wrlong	local21, local06
19054     18 28 86 F1 | 	sub	local06, #24
19058                 | LR__2644
19058     24 28 06 F1 | 	add	local06, #36
1905c     14 47 0A FB | 	rdlong	local21, local06 wz
19060     24 28 86 F1 | 	sub	local06, #36
19064     17 47 02 AB |  if_e	rdlong	local21, local09
19068     24 28 06 A1 |  if_e	add	local06, #36
1906c     14 47 62 AC |  if_e	wrlong	local21, local06
19070     24 28 86 A1 |  if_e	sub	local06, #36
19074     28 28 06 F1 | 	add	local06, #40
19078     14 47 0A FB | 	rdlong	local21, local06 wz
1907c     28 28 86 F1 | 	sub	local06, #40
19080     18 00 90 5D |  if_ne	jmp	#LR__2645
19084     10 2E 06 F1 | 	add	local09, #16
19088     17 47 02 FB | 	rdlong	local21, local09
1908c     10 2E 86 F1 | 	sub	local09, #16
19090     28 28 06 F1 | 	add	local06, #40
19094     14 47 62 FC | 	wrlong	local21, local06
19098     28 28 86 F1 | 	sub	local06, #40
1909c                 | LR__2645
1909c     30 28 06 F1 | 	add	local06, #48
190a0     14 47 0A FB | 	rdlong	local21, local06 wz
190a4     30 28 86 F1 | 	sub	local06, #48
190a8     18 00 90 5D |  if_ne	jmp	#LR__2646
190ac     0C 2E 06 F1 | 	add	local09, #12
190b0     17 47 02 FB | 	rdlong	local21, local09
190b4     0C 2E 86 F1 | 	sub	local09, #12
190b8     30 28 06 F1 | 	add	local06, #48
190bc     14 47 62 FC | 	wrlong	local21, local06
190c0     30 28 86 F1 | 	sub	local06, #48
190c4                 | LR__2646
190c4     1C 28 06 F1 | 	add	local06, #28
190c8     14 47 0A FB | 	rdlong	local21, local06 wz
190cc     1C 28 86 F1 | 	sub	local06, #28
190d0     1C 00 90 5D |  if_ne	jmp	#LR__2647
190d4     01 2A 06 F6 | 	mov	local07, #1
190d8     F2 12 02 F6 | 	mov	arg01, objptr
190dc     00 A8 02 FF 
190e0     00 12 46 F5 | 	or	arg01, ##89128960
190e4     1C 28 06 F1 | 	add	local06, #28
190e8     14 13 62 FC | 	wrlong	arg01, local06
190ec     1C 28 86 F1 | 	sub	local06, #28
190f0                 | LR__2647
190f0     20 28 06 F1 | 	add	local06, #32
190f4     14 47 0A FB | 	rdlong	local21, local06 wz
190f8     20 28 86 F1 | 	sub	local06, #32
190fc     1C 00 90 5D |  if_ne	jmp	#LR__2648
19100     01 2A 06 F6 | 	mov	local07, #1
19104     F2 12 02 F6 | 	mov	arg01, objptr
19108     00 B0 02 FF 
1910c     00 12 46 F5 | 	or	arg01, ##90177536
19110     20 28 06 F1 | 	add	local06, #32
19114     14 13 62 FC | 	wrlong	arg01, local06
19118     20 28 86 F1 | 	sub	local06, #32
1911c                 | LR__2648
1911c     2C 28 06 F1 | 	add	local06, #44
19120     14 47 0A FB | 	rdlong	local21, local06 wz
19124     2C 28 86 F1 | 	sub	local06, #44
19128     44 00 90 5D |  if_ne	jmp	#LR__2651
1912c     14 2E 06 F1 | 	add	local09, #20
19130     17 47 0A FB | 	rdlong	local21, local09 wz
19134     14 2E 86 F1 | 	sub	local09, #20
19138     18 00 90 AD |  if_e	jmp	#LR__2649
1913c     14 2E 06 F1 | 	add	local09, #20
19140     17 47 02 FB | 	rdlong	local21, local09
19144     2C 28 06 F1 | 	add	local06, #44
19148     14 47 62 FC | 	wrlong	local21, local06
1914c     2C 28 86 F1 | 	sub	local06, #44
19150     1C 00 90 FD | 	jmp	#LR__2650
19154                 | LR__2649
19154     01 2A 06 F6 | 	mov	local07, #1
19158     F2 12 02 F6 | 	mov	arg01, objptr
1915c     00 B8 02 FF 
19160     00 12 46 F5 | 	or	arg01, ##91226112
19164     2C 28 06 F1 | 	add	local06, #44
19168     14 13 62 FC | 	wrlong	arg01, local06
1916c     2C 28 86 F1 | 	sub	local06, #44
19170                 | LR__2650
19170                 | LR__2651
19170                 | LR__2652
19170     00 2A 0E F2 | 	cmp	local07, #0 wz
19174     14 13 02 56 |  if_ne	mov	arg01, local06
19178     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1917c     00 42 0E F2 | 	cmp	local19, #0 wz
19180     00 12 06 A6 |  if_e	mov	arg01, #0
19184     10 00 90 5D |  if_ne	jmp	#LR__2653
19188     00 12 4E F2 | 	cmps	arg01, #0 wz
1918c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19190     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19194     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19198                 | LR__2653
19198     21 FB 01 F6 | 	mov	result1, local19
1919c                 | LR__2654
1919c     A7 F0 03 F6 | 	mov	ptra, fp
191a0     B2 00 A0 FD | 	call	#popregs_
191a4                 | __system___openraw_ret
191a4     2D 00 64 FD | 	ret
191a8                 | 
191a8                 | __system___closeraw
191a8     05 4A 05 F6 | 	mov	COUNT_, #5
191ac     A8 00 A0 FD | 	call	#pushregs_
191b0     09 1F 02 F6 | 	mov	local01, arg01
191b4     00 20 06 F6 | 	mov	local02, #0
191b8     08 1E 06 F1 | 	add	local01, #8
191bc     0F FB 09 FB | 	rdlong	result1, local01 wz
191c0     08 1E 86 F1 | 	sub	local01, #8
191c4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
191c8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
191cc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
191d0     01 FA 65 A6 |  if_e	neg	result1, #1
191d4     A8 00 90 AD |  if_e	jmp	#LR__2662
191d8     2C 1E 06 F1 | 	add	local01, #44
191dc     0F FB 09 FB | 	rdlong	result1, local01 wz
191e0     2C 1E 86 F1 | 	sub	local01, #44
191e4     38 00 90 AD |  if_e	jmp	#LR__2660
191e8     2C 1E 06 F1 | 	add	local01, #44
191ec     0F 23 02 FB | 	rdlong	local03, local01
191f0     11 25 02 F6 | 	mov	local04, local03
191f4     2C 1E 86 F1 | 	sub	local01, #44
191f8     13 24 46 F7 | 	zerox	local04, #19
191fc     14 22 46 F0 | 	shr	local03, #20
19200     02 22 66 F0 | 	shl	local03, #2
19204     ED 22 02 F1 | 	add	local03, __methods__
19208     11 23 02 FB | 	rdlong	local03, local03
1920c     0F 13 02 F6 | 	mov	arg01, local01
19210     F2 26 02 F6 | 	mov	local05, objptr
19214     12 E5 01 F6 | 	mov	objptr, local04
19218     2D 22 62 FD | 	call	local03
1921c     13 E5 01 F6 | 	mov	objptr, local05
19220                 | LR__2660
19220     24 1E 06 F1 | 	add	local01, #36
19224     0F 27 0A FB | 	rdlong	local05, local01 wz
19228     24 1E 86 F1 | 	sub	local01, #36
1922c     3C 00 90 AD |  if_e	jmp	#LR__2661
19230     24 1E 06 F1 | 	add	local01, #36
19234     0F 23 02 FB | 	rdlong	local03, local01
19238     11 25 02 F6 | 	mov	local04, local03
1923c     24 1E 86 F1 | 	sub	local01, #36
19240     13 24 46 F7 | 	zerox	local04, #19
19244     14 22 46 F0 | 	shr	local03, #20
19248     02 22 66 F0 | 	shl	local03, #2
1924c     ED 22 02 F1 | 	add	local03, __methods__
19250     11 23 02 FB | 	rdlong	local03, local03
19254     0F 13 02 F6 | 	mov	arg01, local01
19258     F2 26 02 F6 | 	mov	local05, objptr
1925c     12 E5 01 F6 | 	mov	objptr, local04
19260     2D 22 62 FD | 	call	local03
19264     13 E5 01 F6 | 	mov	objptr, local05
19268     FD 20 02 F6 | 	mov	local02, result1
1926c                 | LR__2661
1926c     0F 13 02 F6 | 	mov	arg01, local01
19270     00 14 06 F6 | 	mov	arg02, #0
19274     34 16 06 F6 | 	mov	arg03, #52
19278     98 00 A0 FD | 	call	#\builtin_bytefill_
1927c     10 FB 01 F6 | 	mov	result1, local02
19280                 | LR__2662
19280     A7 F0 03 F6 | 	mov	ptra, fp
19284     B2 00 A0 FD | 	call	#popregs_
19288                 | __system___closeraw_ret
19288     2D 00 64 FD | 	ret
1928c                 | 
1928c                 | __system___vfs_open_sdcardx
1928c     0B 4A 05 F6 | 	mov	COUNT_, #11
19290     A8 00 A0 FD | 	call	#pushregs_
19294     09 23 02 F6 | 	mov	local03, arg01
19298     0A 25 02 F6 | 	mov	local04, arg02
1929c     0B 27 02 F6 | 	mov	local05, arg03
192a0     0C 29 02 F6 | 	mov	local06, arg04
192a4     01 00 00 FF 
192a8     24 12 06 F6 | 	mov	arg01, ##548
192ac     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
192b0     FD 2A 02 F6 | 	mov	local07, result1
192b4     01 00 00 FF 
192b8     34 12 06 F6 | 	mov	arg01, ##564
192bc     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
192c0     FD 2C 02 F6 | 	mov	local08, result1
192c4     11 19 02 F6 | 	mov	arg04, local03
192c8     1F 18 C6 F0 | 	sar	arg04, #31
192cc     11 17 02 F6 | 	mov	arg03, local03
192d0     01 12 06 F6 | 	mov	arg01, #1
192d4     00 14 06 F6 | 	mov	arg02, #0
192d8     98 DF BF FD | 	call	#__system___int64_shl
192dc     FD 1E 02 F6 | 	mov	local01, result1
192e0     FE 2E 02 F6 | 	mov	local09, result2
192e4     12 19 02 F6 | 	mov	arg04, local04
192e8     1F 18 C6 F0 | 	sar	arg04, #31
192ec     12 17 02 F6 | 	mov	arg03, local04
192f0     01 12 06 F6 | 	mov	arg01, #1
192f4     00 14 06 F6 | 	mov	arg02, #0
192f8     78 DF BF FD | 	call	#__system___int64_shl
192fc     FD 1E 42 F5 | 	or	local01, result1
19300     FE 2E 42 F5 | 	or	local09, result2
19304     13 19 02 F6 | 	mov	arg04, local05
19308     1F 18 C6 F0 | 	sar	arg04, #31
1930c     13 17 02 F6 | 	mov	arg03, local05
19310     01 12 06 F6 | 	mov	arg01, #1
19314     00 14 06 F6 | 	mov	arg02, #0
19318     58 DF BF FD | 	call	#__system___int64_shl
1931c     FD 1E 42 F5 | 	or	local01, result1
19320     FE 2E 42 F5 | 	or	local09, result2
19324     14 19 02 F6 | 	mov	arg04, local06
19328     1F 18 C6 F0 | 	sar	arg04, #31
1932c     14 17 02 F6 | 	mov	arg03, local06
19330     01 12 06 F6 | 	mov	arg01, #1
19334     00 14 06 F6 | 	mov	arg02, #0
19338     38 DF BF FD | 	call	#__system___int64_shl
1933c     17 15 02 F6 | 	mov	arg02, local09
19340     FD 1E 42 F5 | 	or	local01, result1
19344     0A FD 41 F5 | 	or	result2, arg02
19348     FE 20 02 F6 | 	mov	local02, result2
1934c     0F 13 02 F6 | 	mov	arg01, local01
19350     10 15 02 F6 | 	mov	arg02, local02
19354     54 DF BF FD | 	call	#__system___usepins
19358     00 FA 0D F2 | 	cmp	result1, #0 wz
1935c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19360     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
19364     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19368     00 FA 05 A6 |  if_e	mov	result1, #0
1936c     B4 00 90 AD |  if_e	jmp	#LR__2672
19370     0F 31 02 F6 | 	mov	local10, local01
19374     10 2F 02 F6 | 	mov	local09, local02
19378     01 00 00 FF 
1937c     08 2A 06 F1 | 	add	local07, ##520
19380     15 31 62 FC | 	wrlong	local10, local07
19384     04 2A 06 F1 | 	add	local07, #4
19388     15 2F 62 FC | 	wrlong	local09, local07
1938c     01 00 00 FF 
19390     0C 2A 86 F1 | 	sub	local07, ##524
19394     14 1B 02 F6 | 	mov	arg05, local06
19398     00 12 06 F6 | 	mov	arg01, #0
1939c     11 15 02 F6 | 	mov	arg02, local03
193a0     12 17 02 F6 | 	mov	arg03, local04
193a4     13 19 02 F6 | 	mov	arg04, local05
193a8     F2 30 02 F6 | 	mov	local10, objptr
193ac     15 E5 01 F6 | 	mov	objptr, local07
193b0     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
193b4     18 E5 01 F6 | 	mov	objptr, local10
193b8     FD 32 0A F6 | 	mov	local11, result1 wz
193bc     24 00 90 5D |  if_ne	jmp	#LR__2670
193c0     1F 01 00 FF 
193c4     76 14 06 F6 | 	mov	arg02, ##@LR__4067
193c8     16 13 02 F6 | 	mov	arg01, local08
193cc     00 16 06 F6 | 	mov	arg03, #0
193d0     F2 32 02 F6 | 	mov	local11, objptr
193d4     15 E5 01 F6 | 	mov	objptr, local07
193d8     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
193dc     19 E5 01 F6 | 	mov	objptr, local11
193e0     FD 32 02 F6 | 	mov	local11, result1
193e4                 | LR__2670
193e4     00 32 0E F2 | 	cmp	local11, #0 wz
193e8     24 00 90 AD |  if_e	jmp	#LR__2671
193ec     0F 13 02 F6 | 	mov	arg01, local01
193f0     10 15 02 F6 | 	mov	arg02, local02
193f4     08 DF BF FD | 	call	#__system___freepins
193f8     19 13 6A F6 | 	neg	arg01, local11 wz
193fc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19400     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19404     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19408     00 FA 05 F6 | 	mov	result1, #0
1940c     14 00 90 FD | 	jmp	#LR__2672
19410                 | LR__2671
19410     15 13 02 F6 | 	mov	arg01, local07
19414     F2 32 02 F6 | 	mov	local11, objptr
19418     15 E5 01 F6 | 	mov	objptr, local07
1941c     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
19420     19 E5 01 F6 | 	mov	objptr, local11
19424                 | LR__2672
19424     A7 F0 03 F6 | 	mov	ptra, fp
19428     B2 00 A0 FD | 	call	#popregs_
1942c                 | __system___vfs_open_sdcardx_ret
1942c     2D 00 64 FD | 	ret
19430                 | 
19430                 | __system____default_getc
19430     03 4A 05 F6 | 	mov	COUNT_, #3
19434     A8 00 A0 FD | 	call	#pushregs_
19438     09 1F 02 F6 | 	mov	local01, arg01
1943c     0F 21 02 FB | 	rdlong	local02, local01
19440     08 20 06 F1 | 	add	local02, #8
19444     10 23 02 FB | 	rdlong	local03, local02
19448     02 22 CE F7 | 	test	local03, #2 wz
1944c     0F 13 02 56 |  if_ne	mov	arg01, local01
19450     00 01 B0 5D |  if_ne	call	#__system____default_flush
19454     10 23 02 FB | 	rdlong	local03, local02
19458     01 22 46 F5 | 	or	local03, #1
1945c     10 23 62 FC | 	wrlong	local03, local02
19460     08 20 86 F1 | 	sub	local02, #8
19464     10 23 0A FB | 	rdlong	local03, local02 wz
19468     0C 00 90 5D |  if_ne	jmp	#LR__2680
1946c     0F 13 02 F6 | 	mov	arg01, local01
19470     64 16 B0 FD | 	call	#__system____default_filbuf
19474     FD 22 02 F6 | 	mov	local03, result1
19478                 | LR__2680
19478     01 22 56 F2 | 	cmps	local03, #1 wc
1947c     01 FA 65 C6 |  if_b	neg	result1, #1
19480     1C 00 90 CD |  if_b	jmp	#LR__2681
19484     01 22 86 F1 | 	sub	local03, #1
19488     10 23 62 FC | 	wrlong	local03, local02
1948c     04 20 06 F1 | 	add	local02, #4
19490     10 23 02 FB | 	rdlong	local03, local02
19494     11 FB C1 FA | 	rdbyte	result1, local03
19498     01 22 06 F1 | 	add	local03, #1
1949c     10 23 62 FC | 	wrlong	local03, local02
194a0                 | LR__2681
194a0     A7 F0 03 F6 | 	mov	ptra, fp
194a4     B2 00 A0 FD | 	call	#popregs_
194a8                 | __system____default_getc_ret
194a8     2D 00 64 FD | 	ret
194ac                 | 
194ac                 | __system____default_putc
194ac     06 4A 05 F6 | 	mov	COUNT_, #6
194b0     A8 00 A0 FD | 	call	#pushregs_
194b4     09 1F 02 F6 | 	mov	local01, arg01
194b8     0A 21 02 F6 | 	mov	local02, arg02
194bc     10 23 02 FB | 	rdlong	local03, local02
194c0     08 22 06 F1 | 	add	local03, #8
194c4     11 FB 01 FB | 	rdlong	result1, local03
194c8     01 FA CD F7 | 	test	result1, #1 wz
194cc     10 13 02 56 |  if_ne	mov	arg01, local02
194d0     80 00 B0 5D |  if_ne	call	#__system____default_flush
194d4     11 25 02 FB | 	rdlong	local04, local03
194d8     02 24 46 F5 | 	or	local04, #2
194dc     11 25 62 FC | 	wrlong	local04, local03
194e0     08 22 86 F1 | 	sub	local03, #8
194e4     11 27 02 FB | 	rdlong	local05, local03
194e8     10 22 06 F1 | 	add	local03, #16
194ec     11 15 02 FB | 	rdlong	arg02, local03
194f0     10 22 86 F1 | 	sub	local03, #16
194f4     13 FB 01 F6 | 	mov	result1, local05
194f8     0A FB 01 F1 | 	add	result1, arg02
194fc     FD 1E 42 FC | 	wrbyte	local01, result1
19500     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19504     01 26 06 F1 | 	add	local05, #1
19508     11 27 62 FC | 	wrlong	local05, local03
1950c     06 20 06 F1 | 	add	local02, #6
19510     10 29 EA FA | 	rdword	local06, local02 wz
19514     06 20 86 F1 | 	sub	local02, #6
19518     0C 22 06 51 |  if_ne	add	local03, #12
1951c     11 25 02 5B |  if_ne	rdlong	local04, local03
19520     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
19524     0C 00 90 AD |  if_e	jmp	#LR__2690
19528     0A 1E 0E F2 | 	cmp	local01, #10 wz
1952c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
19530     10 00 90 5D |  if_ne	jmp	#LR__2691
19534                 | LR__2690
19534     10 13 02 F6 | 	mov	arg01, local02
19538     18 00 B0 FD | 	call	#__system____default_flush
1953c     00 FA 0D F2 | 	cmp	result1, #0 wz
19540     01 1E 66 56 |  if_ne	neg	local01, #1
19544                 | LR__2691
19544     0F FB 01 F6 | 	mov	result1, local01
19548     A7 F0 03 F6 | 	mov	ptra, fp
1954c     B2 00 A0 FD | 	call	#popregs_
19550                 | __system____default_putc_ret
19550     2D 00 64 FD | 	ret
19554                 | 
19554                 | __system____default_flush
19554     06 4A 05 F6 | 	mov	COUNT_, #6
19558     A8 00 A0 FD | 	call	#pushregs_
1955c     09 1F 02 F6 | 	mov	local01, arg01
19560     0F 21 02 FB | 	rdlong	local02, local01
19564     10 23 02 FB | 	rdlong	local03, local02
19568     08 20 06 F1 | 	add	local02, #8
1956c     10 FB 01 FB | 	rdlong	result1, local02
19570     08 20 86 F1 | 	sub	local02, #8
19574     02 FA CD F7 | 	test	result1, #2 wz
19578     D0 00 90 AD |  if_e	jmp	#LR__2702
1957c     01 22 56 F2 | 	cmps	local03, #1 wc
19580     20 01 90 CD |  if_b	jmp	#LR__2704
19584     08 1E 06 F1 | 	add	local01, #8
19588     0F FB 01 FB | 	rdlong	result1, local01
1958c     08 1E 86 F1 | 	sub	local01, #8
19590     40 FA CD F7 | 	test	result1, #64 wz
19594     68 00 90 AD |  if_e	jmp	#LR__2701
19598     08 1E 06 F1 | 	add	local01, #8
1959c     0F 17 02 FB | 	rdlong	arg03, local01
195a0     08 1E 86 F1 | 	sub	local01, #8
195a4     80 16 CE F7 | 	test	arg03, #128 wz
195a8     54 00 90 AD |  if_e	jmp	#LR__2700
195ac     30 1E 06 F1 | 	add	local01, #48
195b0     0F 25 02 FB | 	rdlong	local04, local01
195b4     12 27 02 F6 | 	mov	local05, local04
195b8     30 1E 86 F1 | 	sub	local01, #48
195bc     13 26 46 F7 | 	zerox	local05, #19
195c0     14 24 46 F0 | 	shr	local04, #20
195c4     02 24 66 F0 | 	shl	local04, #2
195c8     ED 24 02 F1 | 	add	local04, __methods__
195cc     12 25 02 FB | 	rdlong	local04, local04
195d0     0F 13 02 F6 | 	mov	arg01, local01
195d4     00 14 06 F6 | 	mov	arg02, #0
195d8     02 16 06 F6 | 	mov	arg03, #2
195dc     F2 28 02 F6 | 	mov	local06, objptr
195e0     13 E5 01 F6 | 	mov	objptr, local05
195e4     2D 24 62 FD | 	call	local04
195e8     14 E5 01 F6 | 	mov	objptr, local06
195ec     08 1E 06 F1 | 	add	local01, #8
195f0     0F 29 02 FB | 	rdlong	local06, local01
195f4     80 28 26 F5 | 	andn	local06, #128
195f8     0F 29 62 FC | 	wrlong	local06, local01
195fc     08 1E 86 F1 | 	sub	local01, #8
19600                 | LR__2700
19600                 | LR__2701
19600     18 1E 06 F1 | 	add	local01, #24
19604     0F 25 02 FB | 	rdlong	local04, local01
19608     12 27 02 F6 | 	mov	local05, local04
1960c     18 1E 86 F1 | 	sub	local01, #24
19610     13 26 46 F7 | 	zerox	local05, #19
19614     14 24 46 F0 | 	shr	local04, #20
19618     02 24 66 F0 | 	shl	local04, #2
1961c     ED 24 02 F1 | 	add	local04, __methods__
19620     12 25 02 FB | 	rdlong	local04, local04
19624     10 20 06 F1 | 	add	local02, #16
19628     10 15 02 FB | 	rdlong	arg02, local02
1962c     10 20 86 F1 | 	sub	local02, #16
19630     0F 13 02 F6 | 	mov	arg01, local01
19634     11 17 02 F6 | 	mov	arg03, local03
19638     F2 28 02 F6 | 	mov	local06, objptr
1963c     13 E5 01 F6 | 	mov	objptr, local05
19640     2D 24 62 FD | 	call	local04
19644     14 E5 01 F6 | 	mov	objptr, local06
19648     58 00 90 FD | 	jmp	#LR__2704
1964c                 | LR__2702
1964c     08 20 06 F1 | 	add	local02, #8
19650     10 29 02 FB | 	rdlong	local06, local02
19654     08 20 86 F1 | 	sub	local02, #8
19658     01 28 CE F7 | 	test	local06, #1 wz
1965c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
19660     40 00 90 AD |  if_e	jmp	#LR__2703
19664     30 1E 06 F1 | 	add	local01, #48
19668     0F 25 02 FB | 	rdlong	local04, local01
1966c     12 27 02 F6 | 	mov	local05, local04
19670     30 1E 86 F1 | 	sub	local01, #48
19674     13 26 46 F7 | 	zerox	local05, #19
19678     14 24 46 F0 | 	shr	local04, #20
1967c     02 24 66 F0 | 	shl	local04, #2
19680     ED 24 02 F1 | 	add	local04, __methods__
19684     12 25 02 FB | 	rdlong	local04, local04
19688     0F 13 02 F6 | 	mov	arg01, local01
1968c     11 15 62 F6 | 	neg	arg02, local03
19690     01 16 06 F6 | 	mov	arg03, #1
19694     F2 28 02 F6 | 	mov	local06, objptr
19698     13 E5 01 F6 | 	mov	objptr, local05
1969c     2D 24 62 FD | 	call	local04
196a0     14 E5 01 F6 | 	mov	objptr, local06
196a4                 | LR__2703
196a4                 | LR__2704
196a4     10 01 68 FC | 	wrlong	#0, local02
196a8     04 20 06 F1 | 	add	local02, #4
196ac     10 01 68 FC | 	wrlong	#0, local02
196b0     04 20 06 F1 | 	add	local02, #4
196b4     10 01 68 FC | 	wrlong	#0, local02
196b8     00 FA 05 F6 | 	mov	result1, #0
196bc     A7 F0 03 F6 | 	mov	ptra, fp
196c0     B2 00 A0 FD | 	call	#popregs_
196c4                 | __system____default_flush_ret
196c4     2D 00 64 FD | 	ret
196c8                 | 
196c8                 | __system____default_buffer_init
196c8     02 4A 05 F6 | 	mov	COUNT_, #2
196cc     A8 00 A0 FD | 	call	#pushregs_
196d0     09 1F 02 F6 | 	mov	local01, arg01
196d4     0F 21 02 FB | 	rdlong	local02, local01
196d8     0F 13 02 F6 | 	mov	arg01, local01
196dc     F8 02 B0 FD | 	call	#__system___isatty
196e0     00 FA 0D F2 | 	cmp	result1, #0 wz
196e4     06 1E 06 51 |  if_ne	add	local01, #6
196e8     0F 0B 58 5C |  if_ne	wrword	#5, local01
196ec     06 1E 06 A1 |  if_e	add	local01, #6
196f0     0F 0D 58 AC |  if_e	wrword	#6, local01
196f4     14 20 06 F1 | 	add	local02, #20
196f8     10 1F 02 F6 | 	mov	local01, local02
196fc     04 20 86 F1 | 	sub	local02, #4
19700     10 1F 62 FC | 	wrlong	local01, local02
19704     04 20 86 F1 | 	sub	local02, #4
19708     02 00 80 FF 
1970c     10 01 68 FC | 	wrlong	##1024, local02
19710     00 FA 05 F6 | 	mov	result1, #0
19714     A7 F0 03 F6 | 	mov	ptra, fp
19718     B2 00 A0 FD | 	call	#popregs_
1971c                 | __system____default_buffer_init_ret
1971c     2D 00 64 FD | 	ret
19720                 | 
19720                 | __system__stat
19720     04 4A 05 F6 | 	mov	COUNT_, #4
19724     A8 00 A0 FD | 	call	#pushregs_
19728     0A 1F 02 F6 | 	mov	local01, arg02
1972c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19730     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
19734     09 15 02 F6 | 	mov	arg02, arg01
19738     10 13 02 F6 | 	mov	arg01, local02
1973c     00 16 06 F6 | 	mov	arg03, #0
19740     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19744     90 BC BF FD | 	call	#__system____getvfsforfile
19748     FD 22 0A F6 | 	mov	local03, result1 wz
1974c     10 00 90 AD |  if_e	jmp	#LR__2710
19750     34 22 06 F1 | 	add	local03, #52
19754     11 17 0A FB | 	rdlong	arg03, local03 wz
19758     34 22 86 F1 | 	sub	local03, #52
1975c     14 00 90 5D |  if_ne	jmp	#LR__2711
19760                 | LR__2710
19760     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19764     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19768     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1976c     01 FA 65 F6 | 	neg	result1, #1
19770     68 00 90 FD | 	jmp	#LR__2712
19774                 | LR__2711
19774     0F 13 02 F6 | 	mov	arg01, local01
19778     00 14 06 F6 | 	mov	arg02, #0
1977c     30 16 06 F6 | 	mov	arg03, #48
19780     09 25 02 F6 | 	mov	local04, arg01
19784     98 00 A0 FD | 	call	#\builtin_bytefill_
19788     12 FB 01 F6 | 	mov	result1, local04
1978c     10 13 CA FA | 	rdbyte	arg01, local02 wz
19790     08 1E 06 A1 |  if_e	add	local01, #8
19794     08 00 80 AF 
19798     0F FF 6B AC |  if_e	wrlong	##4607, local01
1979c     00 FA 05 A6 |  if_e	mov	result1, #0
197a0     38 00 90 AD |  if_e	jmp	#LR__2712
197a4     34 22 06 F1 | 	add	local03, #52
197a8     11 23 02 FB | 	rdlong	local03, local03
197ac     11 25 02 F6 | 	mov	local04, local03
197b0     13 22 46 F7 | 	zerox	local03, #19
197b4     14 24 46 F0 | 	shr	local04, #20
197b8     02 24 66 F0 | 	shl	local04, #2
197bc     ED 24 02 F1 | 	add	local04, __methods__
197c0     12 25 02 FB | 	rdlong	local04, local04
197c4     10 13 02 F6 | 	mov	arg01, local02
197c8     0F 15 02 F6 | 	mov	arg02, local01
197cc     F2 20 02 F6 | 	mov	local02, objptr
197d0     11 E5 01 F6 | 	mov	objptr, local03
197d4     2D 24 62 FD | 	call	local04
197d8     10 E5 01 F6 | 	mov	objptr, local02
197dc                 | LR__2712
197dc     A7 F0 03 F6 | 	mov	ptra, fp
197e0     B2 00 A0 FD | 	call	#popregs_
197e4                 | __system__stat_ret
197e4     2D 00 64 FD | 	ret
197e8                 | 
197e8                 | __system__read
197e8     0A 12 16 F2 | 	cmp	arg01, #10 wc
197ec     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
197f0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
197f4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
197f8     01 FA 65 36 |  if_ae	neg	result1, #1
197fc     20 00 90 3D |  if_ae	jmp	#LR__2720
19800     34 12 06 FD | 	qmul	arg01, #52
19804     02 00 00 FF 
19808     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1980c     18 12 62 FD | 	getqx	arg01
19810     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19814     02 00 00 FF 
19818     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1981c     D0 0F B0 FD | 	call	#__system___vfsread
19820                 | LR__2720
19820                 | __system__read_ret
19820     2D 00 64 FD | 	ret
19824                 | 
19824                 | __system__close
19824     0A 12 16 F2 | 	cmp	arg01, #10 wc
19828     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1982c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19830     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19834     01 FA 65 36 |  if_ae	neg	result1, #1
19838     20 00 90 3D |  if_ae	jmp	#LR__2730
1983c     34 12 06 FD | 	qmul	arg01, #52
19840     02 00 00 FF 
19844     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19848     18 12 62 FD | 	getqx	arg01
1984c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19850     02 00 00 FF 
19854     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19858     4C F9 BF FD | 	call	#__system___closeraw
1985c                 | LR__2730
1985c                 | __system__close_ret
1985c     2D 00 64 FD | 	ret
19860                 | 
19860                 | __system__lseek
19860     06 4A 05 F6 | 	mov	COUNT_, #6
19864     A8 00 A0 FD | 	call	#pushregs_
19868     0A 12 16 F2 | 	cmp	arg01, #10 wc
1986c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19870     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19874     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19878     01 FA 65 36 |  if_ae	neg	result1, #1
1987c     C4 00 90 3D |  if_ae	jmp	#LR__2741
19880     34 12 06 FD | 	qmul	arg01, #52
19884     02 00 00 FF 
19888     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1988c     18 1E 62 FD | 	getqx	local01
19890     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
19894     30 1E 06 F1 | 	add	local01, #48
19898     0F 13 0A FB | 	rdlong	arg01, local01 wz
1989c     30 1E 86 F1 | 	sub	local01, #48
198a0     02 00 00 FF 
198a4     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
198a8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
198ac     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
198b0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
198b4     01 FA 65 A6 |  if_e	neg	result1, #1
198b8     88 00 90 AD |  if_e	jmp	#LR__2741
198bc     08 1E 06 F1 | 	add	local01, #8
198c0     0F 21 02 FB | 	rdlong	local02, local01
198c4     08 1E 86 F1 | 	sub	local01, #8
198c8     40 20 CE F7 | 	test	local02, #64 wz
198cc     08 1E 06 51 |  if_ne	add	local01, #8
198d0     0F 21 02 5B |  if_ne	rdlong	local02, local01
198d4     80 20 46 55 |  if_ne	or	local02, #128
198d8     0F 21 62 5C |  if_ne	wrlong	local02, local01
198dc     08 1E 86 51 |  if_ne	sub	local01, #8
198e0     30 1E 06 F1 | 	add	local01, #48
198e4     0F 23 02 FB | 	rdlong	local03, local01
198e8     11 25 02 F6 | 	mov	local04, local03
198ec     30 1E 86 F1 | 	sub	local01, #48
198f0     13 24 46 F7 | 	zerox	local04, #19
198f4     14 22 46 F0 | 	shr	local03, #20
198f8     02 22 66 F0 | 	shl	local03, #2
198fc     ED 22 02 F1 | 	add	local03, __methods__
19900     11 23 02 FB | 	rdlong	local03, local03
19904     0F 13 02 F6 | 	mov	arg01, local01
19908     F2 26 02 F6 | 	mov	local05, objptr
1990c     12 E5 01 F6 | 	mov	objptr, local04
19910     2D 22 62 FD | 	call	local03
19914     13 E5 01 F6 | 	mov	objptr, local05
19918     FD 28 02 F6 | 	mov	local06, result1
1991c     00 28 56 F2 | 	cmps	local06, #0 wc
19920     1C 00 90 3D |  if_ae	jmp	#LR__2740
19924     14 13 6A F6 | 	neg	arg01, local06 wz
19928     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1992c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19930     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19934     01 FA 65 56 |  if_ne	neg	result1, #1
19938     00 FA 05 A6 |  if_e	mov	result1, #0
1993c     04 00 90 FD | 	jmp	#LR__2741
19940                 | LR__2740
19940     14 FB 01 F6 | 	mov	result1, local06
19944                 | LR__2741
19944     A7 F0 03 F6 | 	mov	ptra, fp
19948     B2 00 A0 FD | 	call	#popregs_
1994c                 | __system__lseek_ret
1994c     2D 00 64 FD | 	ret
19950                 | 
19950                 | __system___ioctl
19950     03 4A 05 F6 | 	mov	COUNT_, #3
19954     A8 00 A0 FD | 	call	#pushregs_
19958     00 12 4E F2 | 	cmps	arg01, #0 wz
1995c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19960     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19964     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19968     01 FA 65 A6 |  if_e	neg	result1, #1
1996c     5C 00 90 AD |  if_e	jmp	#LR__2751
19970     28 12 06 F1 | 	add	arg01, #40
19974     09 1F 02 FB | 	rdlong	local01, arg01
19978     0F 21 02 F6 | 	mov	local02, local01
1997c     28 12 86 F1 | 	sub	arg01, #40
19980     13 20 46 F7 | 	zerox	local02, #19
19984     14 1E 46 F0 | 	shr	local01, #20
19988     02 1E 66 F0 | 	shl	local01, #2
1998c     ED 1E 02 F1 | 	add	local01, __methods__
19990     0F 1F 02 FB | 	rdlong	local01, local01
19994     F2 22 02 F6 | 	mov	local03, objptr
19998     10 E5 01 F6 | 	mov	objptr, local02
1999c     2D 1E 62 FD | 	call	local01
199a0     11 E5 01 F6 | 	mov	objptr, local03
199a4     FD 12 0A F6 | 	mov	arg01, result1 wz
199a8     1C 00 90 AD |  if_e	jmp	#LR__2750
199ac     00 12 4E F2 | 	cmps	arg01, #0 wz
199b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
199b4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
199b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
199bc     01 FA 65 56 |  if_ne	neg	result1, #1
199c0     00 FA 05 A6 |  if_e	mov	result1, #0
199c4     04 00 90 FD | 	jmp	#LR__2751
199c8                 | LR__2750
199c8     00 FA 05 F6 | 	mov	result1, #0
199cc                 | LR__2751
199cc     A7 F0 03 F6 | 	mov	ptra, fp
199d0     B2 00 A0 FD | 	call	#popregs_
199d4                 | __system___ioctl_ret
199d4     2D 00 64 FD | 	ret
199d8                 | 
199d8                 | __system___isatty
199d8     00 4A 05 F6 | 	mov	COUNT_, #0
199dc     A8 00 A0 FD | 	call	#pushregs_
199e0     0C F0 07 F1 | 	add	ptra, #12
199e4     04 4E 05 F1 | 	add	fp, #4
199e8     A7 12 62 FC | 	wrlong	arg01, fp
199ec     04 4E 05 F1 | 	add	fp, #4
199f0     A7 16 02 F6 | 	mov	arg03, fp
199f4     08 4E 85 F1 | 	sub	fp, #8
199f8     00 15 06 F6 | 	mov	arg02, #256
199fc     50 FF BF FD | 	call	#__system___ioctl
19a00     00 FA 0D F2 | 	cmp	result1, #0 wz
19a04     01 FA 05 A6 |  if_e	mov	result1, #1
19a08     00 FA 05 56 |  if_ne	mov	result1, #0
19a0c     A7 F0 03 F6 | 	mov	ptra, fp
19a10     B2 00 A0 FD | 	call	#popregs_
19a14                 | __system___isatty_ret
19a14     2D 00 64 FD | 	ret
19a18                 | 
19a18                 | __system____getftab
19a18     0A 12 16 F2 | 	cmp	arg01, #10 wc
19a1c     34 12 06 CD |  if_b	qmul	arg01, #52
19a20     00 FA 05 36 |  if_ae	mov	result1, #0
19a24     02 00 00 CF 
19a28     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
19a2c     18 FA 61 CD |  if_b	getqx	result1
19a30     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
19a34     02 00 00 CF 
19a38     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
19a3c                 | __system____getftab_ret
19a3c     2D 00 64 FD | 	ret
19a40                 | 
19a40                 | __system__strncpy
19a40     09 01 02 F6 | 	mov	_var01, arg01
19a44                 | LR__2760
19a44     01 16 86 F1 | 	sub	arg03, #1
19a48     00 16 56 F2 | 	cmps	arg03, #0 wc
19a4c     18 00 90 CD |  if_b	jmp	#LR__2761
19a50     0A FB C1 FA | 	rdbyte	result1, arg02
19a54     00 FB 41 FC | 	wrbyte	result1, _var01
19a58     01 14 06 F1 | 	add	arg02, #1
19a5c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
19a60     01 00 06 F1 | 	add	_var01, #1
19a64     DC FF 9F 5D |  if_ne	jmp	#LR__2760
19a68                 | LR__2761
19a68     97 0C 48 FB | 	callpa	#(@LR__2763-@LR__2762)>>2,fcache_load_ptr_
19a6c                 | LR__2762
19a6c     01 16 86 F1 | 	sub	arg03, #1
19a70     00 16 56 F2 | 	cmps	arg03, #0 wc
19a74     00 03 02 36 |  if_ae	mov	_var02, _var01
19a78     01 00 06 31 |  if_ae	add	_var01, #1
19a7c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
19a80     E8 FF 9F 3D |  if_ae	jmp	#LR__2762
19a84                 | LR__2763
19a84     09 FB 01 F6 | 	mov	result1, arg01
19a88                 | __system__strncpy_ret
19a88     2D 00 64 FD | 	ret
19a8c                 | 
19a8c                 | __system__strncat
19a8c     00 14 4E F2 | 	cmps	arg02, #0 wz
19a90     50 00 90 AD |  if_e	jmp	#LR__2774
19a94     01 16 16 F2 | 	cmp	arg03, #1 wc
19a98     48 00 90 CD |  if_b	jmp	#LR__2774
19a9c     09 01 02 F6 | 	mov	_var01, arg01
19aa0     97 1E 48 FB | 	callpa	#(@LR__2772-@LR__2770)>>2,fcache_load_ptr_
19aa4                 | LR__2770
19aa4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
19aa8     01 00 06 51 |  if_ne	add	_var01, #1
19aac     F4 FF 9F 5D |  if_ne	jmp	#LR__2770
19ab0     0B 03 02 F6 | 	mov	_var02, arg03
19ab4                 | LR__2771
19ab4     0A 05 C2 FA | 	rdbyte	_var03, arg02
19ab8     02 07 02 F6 | 	mov	_var04, _var03
19abc     07 06 4E F7 | 	zerox	_var04, #7 wz
19ac0     01 14 06 F1 | 	add	arg02, #1
19ac4     18 00 90 AD |  if_e	jmp	#LR__2773
19ac8     01 02 86 F1 | 	sub	_var02, #1
19acc     00 02 56 F2 | 	cmps	_var02, #0 wc
19ad0     00 07 02 36 |  if_ae	mov	_var04, _var01
19ad4     01 00 06 31 |  if_ae	add	_var01, #1
19ad8     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
19adc     D4 FF 9F 3D |  if_ae	jmp	#LR__2771
19ae0                 | LR__2772
19ae0                 | LR__2773
19ae0     00 01 48 FC | 	wrbyte	#0, _var01
19ae4                 | LR__2774
19ae4     09 FB 01 F6 | 	mov	result1, arg01
19ae8                 | __system__strncat_ret
19ae8     2D 00 64 FD | 	ret
19aec                 | 
19aec                 | __system__strncmp
19aec     09 01 0A F6 | 	mov	_var01, arg01 wz
19af0     14 00 90 5D |  if_ne	jmp	#LR__2780
19af4     00 14 0E F2 | 	cmp	arg02, #0 wz
19af8     01 02 66 56 |  if_ne	neg	_var02, #1
19afc     00 02 06 A6 |  if_e	mov	_var02, #0
19b00     01 FB 01 F6 | 	mov	result1, _var02
19b04     74 00 90 FD | 	jmp	#__system__strncmp_ret
19b08                 | LR__2780
19b08     00 14 0E F2 | 	cmp	arg02, #0 wz
19b0c     01 FA 05 A6 |  if_e	mov	result1, #1
19b10     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
19b14     0B 05 02 F6 | 	mov	_var03, arg03
19b18     97 16 48 FB | 	callpa	#(@LR__2782-@LR__2781)>>2,fcache_load_ptr_
19b1c                 | LR__2781
19b1c     00 07 C2 FA | 	rdbyte	_var04, _var01
19b20     0A 09 02 F6 | 	mov	_var05, arg02
19b24     04 0B C2 FA | 	rdbyte	_var06, _var05
19b28     01 04 86 F1 | 	sub	_var03, #1
19b2c     00 04 56 F2 | 	cmps	_var03, #0 wc
19b30     01 00 06 F1 | 	add	_var01, #1
19b34     01 14 06 F1 | 	add	arg02, #1
19b38     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
19b3c     08 00 90 2D |  if_nc_and_z	jmp	#LR__2783
19b40     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
19b44     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2781
19b48                 | LR__2782
19b48                 | LR__2783
19b48     00 04 56 F2 | 	cmps	_var03, #0 wc
19b4c     00 FA 05 C6 |  if_b	mov	result1, #0
19b50     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
19b54     05 07 0A F2 | 	cmp	_var04, _var06 wz
19b58     00 FA 05 A6 |  if_e	mov	result1, #0
19b5c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
19b60     00 06 0E F2 | 	cmp	_var04, #0 wz
19b64     01 FA 65 A6 |  if_e	neg	result1, #1
19b68     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
19b6c     00 0A 0E F2 | 	cmp	_var06, #0 wz
19b70     01 FA 05 A6 |  if_e	mov	result1, #1
19b74     03 FB 01 56 |  if_ne	mov	result1, _var04
19b78     05 FB 81 51 |  if_ne	sub	result1, _var06
19b7c                 | __system__strncmp_ret
19b7c     2D 00 64 FD | 	ret
19b80                 | 
19b80                 | __system____root_opendir
19b80     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19b84     04 12 06 F1 | 	add	arg01, #4
19b88     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
19b8c     00 FA 05 F6 | 	mov	result1, #0
19b90     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19b94                 | __system____root_opendir_ret
19b94     2D 00 64 FD | 	ret
19b98                 | 
19b98                 | __system____root_readdir
19b98     03 4A 05 F6 | 	mov	COUNT_, #3
19b9c     A8 00 A0 FD | 	call	#pushregs_
19ba0     09 1F 02 F6 | 	mov	local01, arg01
19ba4     0A 21 02 F6 | 	mov	local02, arg02
19ba8     04 1E 06 F1 | 	add	local01, #4
19bac     0F 23 02 FB | 	rdlong	local03, local01
19bb0     04 1E 86 F1 | 	sub	local01, #4
19bb4                 | LR__2790
19bb4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19bb8     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
19bbc     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19bc0     01 FA 65 A6 |  if_e	neg	result1, #1
19bc4     48 00 90 AD |  if_e	jmp	#LR__2791
19bc8     11 17 0A FB | 	rdlong	arg03, local03 wz
19bcc     04 22 06 A1 |  if_e	add	local03, #4
19bd0     E0 FF 9F AD |  if_e	jmp	#LR__2790
19bd4     11 15 02 FB | 	rdlong	arg02, local03
19bd8     01 14 06 F1 | 	add	arg02, #1
19bdc     10 13 02 F6 | 	mov	arg01, local02
19be0     40 16 06 F6 | 	mov	arg03, #64
19be4     58 FE BF FD | 	call	#__system__strncpy
19be8     50 20 06 F1 | 	add	local02, #80
19bec     10 03 48 FC | 	wrbyte	#1, local02
19bf0     08 20 86 F1 | 	sub	local02, #8
19bf4     10 01 68 FC | 	wrlong	#0, local02
19bf8     04 20 06 F1 | 	add	local02, #4
19bfc     10 01 68 FC | 	wrlong	#0, local02
19c00     04 22 06 F1 | 	add	local03, #4
19c04     04 1E 06 F1 | 	add	local01, #4
19c08     0F 23 62 FC | 	wrlong	local03, local01
19c0c     00 FA 05 F6 | 	mov	result1, #0
19c10                 | LR__2791
19c10     A7 F0 03 F6 | 	mov	ptra, fp
19c14     B2 00 A0 FD | 	call	#popregs_
19c18                 | __system____root_readdir_ret
19c18     2D 00 64 FD | 	ret
19c1c                 | 
19c1c                 | __system____root_closedir
19c1c     00 FA 05 F6 | 	mov	result1, #0
19c20                 | __system____root_closedir_ret
19c20     2D 00 64 FD | 	ret
19c24                 | 
19c24                 | __system____root_stat
19c24     0A 01 02 F6 | 	mov	_var01, arg02
19c28     00 13 02 F6 | 	mov	arg01, _var01
19c2c     00 14 06 F6 | 	mov	arg02, #0
19c30     30 16 06 F6 | 	mov	arg03, #48
19c34     98 00 A0 FD | 	call	#\builtin_bytefill_
19c38     08 00 06 F1 | 	add	_var01, #8
19c3c     08 00 80 FF 
19c40     00 FF 6B FC | 	wrlong	##4607, _var01
19c44     00 FA 05 F6 | 	mov	result1, #0
19c48                 | __system____root_stat_ret
19c48     2D 00 64 FD | 	ret
19c4c                 | 
19c4c                 | __system___normalizeName
19c4c     00 00 06 F6 | 	mov	_var01, #0
19c50     09 03 02 F6 | 	mov	_var02, arg01
19c54     01 05 02 F6 | 	mov	_var03, _var02
19c58                 | LR__2800
19c58     01 07 CA FA | 	rdbyte	_var04, _var02 wz
19c5c     5C 01 90 AD |  if_e	jmp	#LR__2819
19c60     00 00 0E F2 | 	cmp	_var01, #0 wz
19c64     02 07 02 56 |  if_ne	mov	_var04, _var03
19c68     01 04 06 51 |  if_ne	add	_var03, #1
19c6c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
19c70     00 00 06 56 |  if_ne	mov	_var01, #0
19c74     01 07 C2 FA | 	rdbyte	_var04, _var02
19c78     2E 06 0E F2 | 	cmp	_var04, #46 wz
19c7c     D8 00 90 5D |  if_ne	jmp	#LR__2812
19c80     01 02 06 F1 | 	add	_var02, #1
19c84     01 07 C2 FA | 	rdbyte	_var04, _var02
19c88     01 02 86 F1 | 	sub	_var02, #1
19c8c     2F 06 0E F2 | 	cmp	_var04, #47 wz
19c90     18 00 90 AD |  if_e	jmp	#LR__2801
19c94     01 02 06 F1 | 	add	_var02, #1
19c98     01 09 C2 FA | 	rdbyte	_var05, _var02
19c9c     01 02 86 F1 | 	sub	_var02, #1
19ca0     04 0B 02 F6 | 	mov	_var06, _var05
19ca4     07 0A 4E F7 | 	zerox	_var06, #7 wz
19ca8     10 00 90 5D |  if_ne	jmp	#LR__2802
19cac                 | LR__2801
19cac     01 0D 02 F6 | 	mov	_var07, _var02
19cb0     01 0C 06 F1 | 	add	_var07, #1
19cb4     06 03 02 F6 | 	mov	_var02, _var07
19cb8     E0 00 90 FD | 	jmp	#LR__2816
19cbc                 | LR__2802
19cbc     01 02 06 F1 | 	add	_var02, #1
19cc0     01 0D C2 FA | 	rdbyte	_var07, _var02
19cc4     01 02 86 F1 | 	sub	_var02, #1
19cc8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
19ccc     2E 06 0E F2 | 	cmp	_var04, #46 wz
19cd0     84 00 90 5D |  if_ne	jmp	#LR__2811
19cd4     02 02 06 F1 | 	add	_var02, #2
19cd8     01 0D C2 FA | 	rdbyte	_var07, _var02
19cdc     02 02 86 F1 | 	sub	_var02, #2
19ce0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
19ce4     2F 06 0E F2 | 	cmp	_var04, #47 wz
19ce8     18 00 90 AD |  if_e	jmp	#LR__2803
19cec     02 02 06 F1 | 	add	_var02, #2
19cf0     01 09 C2 FA | 	rdbyte	_var05, _var02
19cf4     02 02 86 F1 | 	sub	_var02, #2
19cf8     04 0B 02 F6 | 	mov	_var06, _var05
19cfc     07 0A 4E F7 | 	zerox	_var06, #7 wz
19d00     54 00 90 5D |  if_ne	jmp	#LR__2810
19d04                 | LR__2803
19d04     02 02 06 F1 | 	add	_var02, #2
19d08     09 05 5A F2 | 	cmps	_var03, arg01 wcz
19d0c     40 00 90 ED |  if_be	jmp	#LR__2809
19d10     02 0F 02 F6 | 	mov	_var08, _var03
19d14     01 0E 86 F1 | 	sub	_var08, #1
19d18                 | LR__2804
19d18     07 07 C2 FA | 	rdbyte	_var04, _var08
19d1c     2F 06 0E F2 | 	cmp	_var04, #47 wz
19d20     0C 00 90 5D |  if_ne	jmp	#LR__2805
19d24     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
19d28     01 0E 86 11 |  if_a	sub	_var08, #1
19d2c     E8 FF 9F 1D |  if_a	jmp	#LR__2804
19d30                 | LR__2805
19d30     97 0C 48 FB | 	callpa	#(@LR__2807-@LR__2806)>>2,fcache_load_ptr_
19d34                 | LR__2806
19d34     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
19d38     10 00 90 ED |  if_be	jmp	#LR__2808
19d3c     07 07 C2 FA | 	rdbyte	_var04, _var08
19d40     2F 06 0E F2 | 	cmp	_var04, #47 wz
19d44     01 0E 86 51 |  if_ne	sub	_var08, #1
19d48     E8 FF 9F 5D |  if_ne	jmp	#LR__2806
19d4c                 | LR__2807
19d4c                 | LR__2808
19d4c     07 05 02 F6 | 	mov	_var03, _var08
19d50                 | LR__2809
19d50     01 00 06 F6 | 	mov	_var01, #1
19d54     44 00 90 FD | 	jmp	#LR__2816
19d58                 | LR__2810
19d58                 | LR__2811
19d58                 | LR__2812
19d58     97 18 48 FB | 	callpa	#(@LR__2814-@LR__2813)>>2,fcache_load_ptr_
19d5c                 | LR__2813
19d5c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
19d60     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
19d64     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
19d68     20 00 90 AD |  if_e	jmp	#LR__2815
19d6c     01 0B 02 F6 | 	mov	_var06, _var02
19d70     01 09 02 F6 | 	mov	_var05, _var02
19d74     01 08 06 F1 | 	add	_var05, #1
19d78     05 11 C2 FA | 	rdbyte	_var09, _var06
19d7c     04 03 02 F6 | 	mov	_var02, _var05
19d80     02 11 42 FC | 	wrbyte	_var09, _var03
19d84     01 04 06 F1 | 	add	_var03, #1
19d88     D0 FF 9F FD | 	jmp	#LR__2813
19d8c                 | LR__2814
19d8c                 | LR__2815
19d8c     01 07 C2 FA | 	rdbyte	_var04, _var02
19d90     2F 06 0E F2 | 	cmp	_var04, #47 wz
19d94     C0 FE 9F 5D |  if_ne	jmp	#LR__2800
19d98     01 00 06 F6 | 	mov	_var01, #1
19d9c                 | LR__2816
19d9c     97 0C 48 FB | 	callpa	#(@LR__2818-@LR__2817)>>2,fcache_load_ptr_
19da0                 | LR__2817
19da0     01 07 C2 FA | 	rdbyte	_var04, _var02
19da4     2F 06 0E F2 | 	cmp	_var04, #47 wz
19da8     01 0D 02 A6 |  if_e	mov	_var07, _var02
19dac     01 0C 06 A1 |  if_e	add	_var07, #1
19db0     06 03 02 A6 |  if_e	mov	_var02, _var07
19db4     E8 FF 9F AD |  if_e	jmp	#LR__2817
19db8                 | LR__2818
19db8     9C FE 9F FD | 	jmp	#LR__2800
19dbc                 | LR__2819
19dbc     02 01 48 FC | 	wrbyte	#0, _var03
19dc0                 | __system___normalizeName_ret
19dc0     2D 00 64 FD | 	ret
19dc4                 | 
19dc4                 | __system___strrev
19dc4     09 01 CA FA | 	rdbyte	_var01, arg01 wz
19dc8     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
19dcc     09 03 02 F6 | 	mov	_var02, arg01
19dd0     97 1A 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
19dd4                 | LR__2820
19dd4     01 01 CA FA | 	rdbyte	_var01, _var02 wz
19dd8     01 02 06 51 |  if_ne	add	_var02, #1
19ddc     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
19de0     01 02 86 F1 | 	sub	_var02, #1
19de4                 | LR__2821
19de4     09 03 5A F2 | 	cmps	_var02, arg01 wcz
19de8     1C 00 90 ED |  if_be	jmp	#LR__2823
19dec     09 01 C2 FA | 	rdbyte	_var01, arg01
19df0     01 05 C2 FA | 	rdbyte	_var03, _var02
19df4     09 05 42 FC | 	wrbyte	_var03, arg01
19df8     01 01 42 FC | 	wrbyte	_var01, _var02
19dfc     01 12 06 F1 | 	add	arg01, #1
19e00     01 02 86 F1 | 	sub	_var02, #1
19e04     DC FF 9F FD | 	jmp	#LR__2821
19e08                 | LR__2822
19e08                 | LR__2823
19e08                 | __system___strrev_ret
19e08     2D 00 64 FD | 	ret
19e0c                 | 
19e0c                 | __system___fmtpad
19e0c     06 4A 05 F6 | 	mov	COUNT_, #6
19e10     A8 00 A0 FD | 	call	#pushregs_
19e14     09 1F 02 F6 | 	mov	local01, arg01
19e18     0A 21 02 F6 | 	mov	local02, arg02
19e1c     0B 23 02 F6 | 	mov	local03, arg03
19e20     10 13 EA F8 | 	getbyte	arg01, local02, #1
19e24     16 20 46 F0 | 	shr	local02, #22
19e28     03 20 0E F5 | 	and	local02, #3 wz
19e2c     00 24 06 F6 | 	mov	local04, #0
19e30     01 20 06 A6 |  if_e	mov	local02, #1
19e34     0C 21 CA F7 | 	test	local02, arg04 wz
19e38     00 FA 05 A6 |  if_e	mov	result1, #0
19e3c     88 00 90 AD |  if_e	jmp	#LR__2833
19e40     09 23 C2 F2 | 	subr	local03, arg01
19e44     01 22 56 F2 | 	cmps	local03, #1 wc
19e48     00 FA 05 C6 |  if_b	mov	result1, #0
19e4c     78 00 90 CD |  if_b	jmp	#LR__2833
19e50     03 20 0E F2 | 	cmp	local02, #3 wz
19e54     18 00 90 5D |  if_ne	jmp	#LR__2830
19e58     01 18 0E F2 | 	cmp	arg04, #1 wz
19e5c     6E 20 62 FD | 	wrz	local02
19e60     10 23 02 F1 | 	add	local03, local02
19e64     11 23 52 F6 | 	abs	local03, local03 wc
19e68     01 22 46 F0 | 	shr	local03, #1
19e6c     11 23 82 F6 | 	negc	local03, local03
19e70                 | LR__2830
19e70     01 22 56 F2 | 	cmps	local03, #1 wc
19e74     4C 00 90 CD |  if_b	jmp	#LR__2832
19e78     11 27 02 F6 | 	mov	local05, local03
19e7c                 | LR__2831
19e7c     0F 21 02 F6 | 	mov	local02, local01
19e80     0F 29 02 F6 | 	mov	local06, local01
19e84     13 20 46 F7 | 	zerox	local02, #19
19e88     14 28 46 F0 | 	shr	local06, #20
19e8c     02 28 66 F0 | 	shl	local06, #2
19e90     ED 28 02 F1 | 	add	local06, __methods__
19e94     14 29 02 FB | 	rdlong	local06, local06
19e98     20 12 06 F6 | 	mov	arg01, #32
19e9c     F2 22 02 F6 | 	mov	local03, objptr
19ea0     10 E5 01 F6 | 	mov	objptr, local02
19ea4     2D 28 62 FD | 	call	local06
19ea8     11 E5 01 F6 | 	mov	objptr, local03
19eac     FD 28 02 F6 | 	mov	local06, result1
19eb0     00 28 56 F2 | 	cmps	local06, #0 wc
19eb4     14 FB 01 C6 |  if_b	mov	result1, local06
19eb8     0C 00 90 CD |  if_b	jmp	#LR__2833
19ebc     14 25 02 F1 | 	add	local04, local06
19ec0     EE 27 6E FB | 	djnz	local05, #LR__2831
19ec4                 | LR__2832
19ec4     12 FB 01 F6 | 	mov	result1, local04
19ec8                 | LR__2833
19ec8     A7 F0 03 F6 | 	mov	ptra, fp
19ecc     B2 00 A0 FD | 	call	#popregs_
19ed0                 | __system___fmtpad_ret
19ed0     2D 00 64 FD | 	ret
19ed4                 | 
19ed4                 | __system___uitoa
19ed4     04 4A 05 F6 | 	mov	COUNT_, #4
19ed8     A8 00 A0 FD | 	call	#pushregs_
19edc     09 1F 02 F6 | 	mov	local01, arg01
19ee0     00 1A 4E F2 | 	cmps	arg05, #0 wz
19ee4     0F 1B 02 F6 | 	mov	arg05, local01
19ee8     00 20 06 F6 | 	mov	local02, #0
19eec     37 22 06 56 |  if_ne	mov	local03, #55
19ef0     57 22 06 A6 |  if_e	mov	local03, #87
19ef4                 | LR__2840
19ef4     0B 15 12 FD | 	qdiv	arg02, arg03
19ef8     19 24 62 FD | 	getqy	local04
19efc     0B 15 12 FD | 	qdiv	arg02, arg03
19f00     0A 24 16 F2 | 	cmp	local04, #10 wc
19f04     30 24 06 C1 |  if_b	add	local04, #48
19f08     11 25 02 31 |  if_ae	add	local04, local03
19f0c     0D 25 42 FC | 	wrbyte	local04, arg05
19f10     01 1A 06 F1 | 	add	arg05, #1
19f14     01 20 06 F1 | 	add	local02, #1
19f18     18 14 62 FD | 	getqx	arg02
19f1c     00 14 0E F2 | 	cmp	arg02, #0 wz
19f20     D0 FF 9F 5D |  if_ne	jmp	#LR__2840
19f24     0C 21 12 F2 | 	cmp	local02, arg04 wc
19f28     C8 FF 9F CD |  if_b	jmp	#LR__2840
19f2c     0D 01 48 FC | 	wrbyte	#0, arg05
19f30     0F 13 02 F6 | 	mov	arg01, local01
19f34     8C FE BF FD | 	call	#__system___strrev
19f38     10 FB 01 F6 | 	mov	result1, local02
19f3c     A7 F0 03 F6 | 	mov	ptra, fp
19f40     B2 00 A0 FD | 	call	#popregs_
19f44                 | __system___uitoa_ret
19f44     2D 00 64 FD | 	ret
19f48                 | 
19f48                 | __system__disassemble_0307
19f48     10 4A 05 F6 | 	mov	COUNT_, #16
19f4c     A8 00 A0 FD | 	call	#pushregs_
19f50     09 1F 02 F6 | 	mov	local01, arg01
19f54     0A 21 02 F6 | 	mov	local02, arg02
19f58     0B 23 02 F6 | 	mov	local03, arg03
19f5c     0C 25 02 F6 | 	mov	local04, arg04
19f60     0D 27 02 F6 | 	mov	local05, arg05
19f64     13 13 52 F6 | 	abs	arg01, local05 wc
19f68     1F 28 C6 C9 |  if_b	decod	local06, #31
19f6c     00 28 06 36 |  if_ae	mov	local06, #0
19f70     B4 D3 BF FD | 	call	#__system___float_fromuns
19f74     14 FB 61 F5 | 	xor	result1, local06
19f78     FD 2A 02 F6 | 	mov	local07, result1
19f7c     00 2C 06 F6 | 	mov	local08, #0
19f80     0F 13 02 F6 | 	mov	arg01, local01
19f84     00 14 06 F6 | 	mov	arg02, #0
19f88     01 16 06 F6 | 	mov	arg03, #1
19f8c     F8 DA BF FD | 	call	#__system___float_cmp
19f90     00 FA 0D F2 | 	cmp	result1, #0 wz
19f94     00 2E 06 A6 |  if_e	mov	local09, #0
19f98     10 01 68 AC |  if_e	wrlong	#0, local02
19f9c     11 2F 62 AC |  if_e	wrlong	local09, local03
19fa0     8C 01 90 AD |  if_e	jmp	#LR__2862
19fa4     0F 13 02 F6 | 	mov	arg01, local01
19fa8     A8 DF BF FD | 	call	#__system____builtin_ilogb
19fac     FD 30 02 F6 | 	mov	local10, result1
19fb0     0A 26 0E F2 | 	cmp	local05, #10 wz
19fb4     24 00 90 5D |  if_ne	jmp	#LR__2850
19fb8     18 2F 02 F6 | 	mov	local09, local10
19fbc     01 2E 66 F0 | 	shl	local09, #1
19fc0     18 2F 02 F1 | 	add	local09, local10
19fc4     17 31 52 F6 | 	abs	local10, local09 wc
19fc8     0A 30 16 FD | 	qdiv	local10, #10
19fcc     09 32 06 F6 | 	mov	local11, #9
19fd0     18 30 62 FD | 	getqx	local10
19fd4     18 31 82 F6 | 	negc	local10, local10
19fd8     04 00 90 FD | 	jmp	#LR__2851
19fdc                 | LR__2850
19fdc     18 32 06 F6 | 	mov	local11, #24
19fe0                 | LR__2851
19fe0                 | LR__2852
19fe0     08 2C 56 F2 | 	cmps	local08, #8 wc
19fe4     01 2C 06 F1 | 	add	local08, #1
19fe8     60 00 90 3D |  if_ae	jmp	#LR__2853
19fec     00 C0 1F FF 
19ff0     00 12 06 F6 | 	mov	arg01, ##1065353216
19ff4     15 15 02 F6 | 	mov	arg02, local07
19ff8     18 17 02 F6 | 	mov	arg03, local10
19ffc     88 E3 BF FD | 	call	#__system___float_pow_n
1a000     FD 14 02 F6 | 	mov	arg02, result1
1a004     0F 13 02 F6 | 	mov	arg01, local01
1a008     4C D8 BF FD | 	call	#__system___float_div
1a00c     FD 34 02 F6 | 	mov	local12, result1
1a010     1A 13 02 F6 | 	mov	arg01, local12
1a014     00 C0 1F FF 
1a018     00 14 06 F6 | 	mov	arg02, ##1065353216
1a01c     01 16 06 F6 | 	mov	arg03, #1
1a020     64 DA BF FD | 	call	#__system___float_cmp
1a024     00 FA 55 F2 | 	cmps	result1, #0 wc
1a028     01 30 86 C1 |  if_b	sub	local10, #1
1a02c     B0 FF 9F CD |  if_b	jmp	#LR__2852
1a030     15 15 02 F6 | 	mov	arg02, local07
1a034     1A 13 02 F6 | 	mov	arg01, local12
1a038     01 16 66 F6 | 	neg	arg03, #1
1a03c     48 DA BF FD | 	call	#__system___float_cmp
1a040     00 FA 55 F2 | 	cmps	result1, #0 wc
1a044     01 30 06 31 |  if_ae	add	local10, #1
1a048     94 FF 9F 3D |  if_ae	jmp	#LR__2852
1a04c                 | LR__2853
1a04c     1A 13 02 F6 | 	mov	arg01, local12
1a050     00 DF BF FD | 	call	#__system____builtin_ilogb
1a054     FD 36 02 F6 | 	mov	local13, result1
1a058     1A 39 02 F6 | 	mov	local14, local12
1a05c     17 39 06 F4 | 	bitl	local14, #279
1a060     17 38 26 F4 | 	bith	local14, #23
1a064     1B 39 62 F0 | 	shl	local14, local13
1a068     02 26 0E F2 | 	cmp	local05, #2 wz
1a06c     02 24 66 A0 |  if_e	shl	local04, #2
1a070     00 3A 06 F6 | 	mov	local15, #0
1a074     00 24 56 F2 | 	cmps	local04, #0 wc
1a078     10 00 90 3D |  if_ae	jmp	#LR__2854
1a07c     18 25 C2 F2 | 	subr	local04, local10
1a080     00 24 56 F2 | 	cmps	local04, #0 wc
1a084     A0 00 90 CD |  if_b	jmp	#LR__2861
1a088     04 00 90 FD | 	jmp	#LR__2855
1a08c                 | LR__2854
1a08c     01 24 06 F1 | 	add	local04, #1
1a090                 | LR__2855
1a090     19 25 7A F3 | 	fles	local04, local11 wcz
1a094     01 3C 06 F6 | 	mov	local16, #1
1a098     97 22 48 FB | 	callpa	#(@LR__2857-@LR__2856)>>2,fcache_load_ptr_
1a09c                 | LR__2856
1a09c     00 40 00 FF 
1a0a0     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1a0a4     38 00 90 3D |  if_ae	jmp	#LR__2858
1a0a8     01 24 56 F2 | 	cmps	local04, #1 wc
1a0ac     01 24 86 F1 | 	sub	local04, #1
1a0b0     2C 00 90 CD |  if_b	jmp	#LR__2858
1a0b4     13 3B 02 FD | 	qmul	local15, local05
1a0b8     1C 37 02 F6 | 	mov	local13, local14
1a0bc     17 36 46 F0 | 	shr	local13, #23
1a0c0     17 39 06 F4 | 	bitl	local14, #279
1a0c4     18 3A 62 FD | 	getqx	local15
1a0c8     13 3D 02 FD | 	qmul	local16, local05
1a0cc     18 3C 62 FD | 	getqx	local16
1a0d0     13 39 02 FD | 	qmul	local14, local05
1a0d4     1B 3B 02 F1 | 	add	local15, local13
1a0d8     18 38 62 FD | 	getqx	local14
1a0dc     BC FF 9F FD | 	jmp	#LR__2856
1a0e0                 | LR__2857
1a0e0                 | LR__2858
1a0e0     13 2F 02 F6 | 	mov	local09, local05
1a0e4     17 2E 66 F0 | 	shl	local09, #23
1a0e8     17 37 52 F6 | 	abs	local13, local09 wc
1a0ec     01 36 46 F0 | 	shr	local13, #1
1a0f0     1B 37 82 F6 | 	negc	local13, local13
1a0f4     1B 39 1A F2 | 	cmp	local14, local13 wcz
1a0f8     20 00 90 1D |  if_a	jmp	#LR__2859
1a0fc     17 26 66 F0 | 	shl	local05, #23
1a100     13 37 52 F6 | 	abs	local13, local05 wc
1a104     01 36 46 F0 | 	shr	local13, #1
1a108     1B 37 82 F6 | 	negc	local13, local13
1a10c     1B 39 0A F2 | 	cmp	local14, local13 wz
1a110     14 00 90 5D |  if_ne	jmp	#LR__2860
1a114     01 3A CE F7 | 	test	local15, #1 wz
1a118     0C 00 90 AD |  if_e	jmp	#LR__2860
1a11c                 | LR__2859
1a11c     01 3A 06 F1 | 	add	local15, #1
1a120     1E 3B 0A F2 | 	cmp	local15, local16 wz
1a124     01 30 06 A1 |  if_e	add	local10, #1
1a128                 | LR__2860
1a128                 | LR__2861
1a128     10 3B 62 FC | 	wrlong	local15, local02
1a12c     11 31 62 FC | 	wrlong	local10, local03
1a130                 | LR__2862
1a130     A7 F0 03 F6 | 	mov	ptra, fp
1a134     B2 00 A0 FD | 	call	#popregs_
1a138                 | __system__disassemble_0307_ret
1a138     2D 00 64 FD | 	ret
1a13c                 | 
1a13c                 | __system__emitsign_0309
1a13c     00 FA 05 F6 | 	mov	result1, #0
1a140     00 14 0E F2 | 	cmp	arg02, #0 wz
1a144     09 01 02 56 |  if_ne	mov	_var01, arg01
1a148     01 12 06 51 |  if_ne	add	arg01, #1
1a14c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1a150     01 FA 05 56 |  if_ne	mov	result1, #1
1a154     00 16 0E F2 | 	cmp	arg03, #0 wz
1a158     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1a15c     01 12 06 51 |  if_ne	add	arg01, #1
1a160     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1a164     02 FA 05 51 |  if_ne	add	result1, #2
1a168                 | __system__emitsign_0309_ret
1a168     2D 00 64 FD | 	ret
1a16c                 | 
1a16c                 | __system___gettxfunc
1a16c     01 4A 05 F6 | 	mov	COUNT_, #1
1a170     A8 00 A0 FD | 	call	#pushregs_
1a174     A0 F8 BF FD | 	call	#__system____getftab
1a178     FD 1E 0A F6 | 	mov	local01, result1 wz
1a17c     10 00 90 AD |  if_e	jmp	#LR__2870
1a180     08 1E 06 F1 | 	add	local01, #8
1a184     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a188     08 1E 86 F1 | 	sub	local01, #8
1a18c     08 00 90 5D |  if_ne	jmp	#LR__2871
1a190                 | LR__2870
1a190     00 FA 05 F6 | 	mov	result1, #0
1a194     0C 00 90 FD | 	jmp	#LR__2872
1a198                 | LR__2871
1a198     00 70 02 FF 
1a19c     00 1E 46 F5 | 	or	local01, ##81788928
1a1a0     0F FB 01 F6 | 	mov	result1, local01
1a1a4                 | LR__2872
1a1a4     A7 F0 03 F6 | 	mov	ptra, fp
1a1a8     B2 00 A0 FD | 	call	#popregs_
1a1ac                 | __system___gettxfunc_ret
1a1ac     2D 00 64 FD | 	ret
1a1b0                 | 
1a1b0                 | __system___getrxfunc
1a1b0     01 4A 05 F6 | 	mov	COUNT_, #1
1a1b4     A8 00 A0 FD | 	call	#pushregs_
1a1b8     5C F8 BF FD | 	call	#__system____getftab
1a1bc     FD 1E 0A F6 | 	mov	local01, result1 wz
1a1c0     10 00 90 AD |  if_e	jmp	#LR__2880
1a1c4     08 1E 06 F1 | 	add	local01, #8
1a1c8     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a1cc     08 1E 86 F1 | 	sub	local01, #8
1a1d0     08 00 90 5D |  if_ne	jmp	#LR__2881
1a1d4                 | LR__2880
1a1d4     00 FA 05 F6 | 	mov	result1, #0
1a1d8     0C 00 90 FD | 	jmp	#LR__2882
1a1dc                 | LR__2881
1a1dc     00 78 02 FF 
1a1e0     00 1E 46 F5 | 	or	local01, ##82837504
1a1e4     0F FB 01 F6 | 	mov	result1, local01
1a1e8                 | LR__2882
1a1e8     A7 F0 03 F6 | 	mov	ptra, fp
1a1ec     B2 00 A0 FD | 	call	#popregs_
1a1f0                 | __system___getrxfunc_ret
1a1f0     2D 00 64 FD | 	ret
1a1f4                 | 
1a1f4                 | __system___getiolock_0349
1a1f4     01 4A 05 F6 | 	mov	COUNT_, #1
1a1f8     A8 00 A0 FD | 	call	#pushregs_
1a1fc     18 F8 BF FD | 	call	#__system____getftab
1a200     FD 1E 0A F6 | 	mov	local01, result1 wz
1a204     10 00 90 AD |  if_e	jmp	#LR__2890
1a208     08 1E 06 F1 | 	add	local01, #8
1a20c     0F FB 09 FB | 	rdlong	result1, local01 wz
1a210     08 1E 86 F1 | 	sub	local01, #8
1a214     18 00 90 5D |  if_ne	jmp	#LR__2891
1a218                 | LR__2890
1a218     01 00 00 FF 
1a21c     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1a220     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1a224     01 00 00 FF 
1a228     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1a22c     08 00 90 FD | 	jmp	#LR__2892
1a230                 | LR__2891
1a230     0C 1E 06 F1 | 	add	local01, #12
1a234     0F FB 01 F6 | 	mov	result1, local01
1a238                 | LR__2892
1a238     A7 F0 03 F6 | 	mov	ptra, fp
1a23c     B2 00 A0 FD | 	call	#popregs_
1a240                 | __system___getiolock_0349_ret
1a240     2D 00 64 FD | 	ret
1a244                 | 
1a244                 | __system____ScanForChar
1a244     09 01 02 F6 | 	mov	_var01, arg01
1a248     09 03 02 F6 | 	mov	_var02, arg01
1a24c     97 06 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
1a250                 | LR__2900
1a250     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1a254     01 02 06 51 |  if_ne	add	_var02, #1
1a258     F4 FF 9F 5D |  if_ne	jmp	#LR__2900
1a25c                 | LR__2901
1a25c     09 03 82 F1 | 	sub	_var02, arg01
1a260     01 FB 01 F6 | 	mov	result1, _var02
1a264     FD 12 0A F6 | 	mov	arg01, result1 wz
1a268     00 FA 05 A6 |  if_e	mov	result1, #0
1a26c     B8 00 90 AD |  if_e	jmp	#LR__2908
1a270     0A 05 02 F6 | 	mov	_var03, arg02
1a274     07 04 4E F7 | 	zerox	_var03, #7 wz
1a278     00 FA 05 A6 |  if_e	mov	result1, #0
1a27c     A8 00 90 AD |  if_e	jmp	#LR__2908
1a280     01 16 16 F2 | 	cmp	arg03, #1 wc
1a284     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1a288     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1a28c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1a290     94 00 90 4D |  if_c_and_nz	jmp	#LR__2908
1a294     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1a298     10 00 90 ED |  if_be	jmp	#LR__2902
1a29c     00 18 0E F2 | 	cmp	arg04, #0 wz
1a2a0     00 FA 05 A6 |  if_e	mov	result1, #0
1a2a4     80 00 90 AD |  if_e	jmp	#LR__2908
1a2a8     09 17 02 F6 | 	mov	arg03, arg01
1a2ac                 | LR__2902
1a2ac     01 16 86 F1 | 	sub	arg03, #1
1a2b0     00 18 0E F2 | 	cmp	arg04, #0 wz
1a2b4     38 00 90 5D |  if_ne	jmp	#LR__2904
1a2b8     0B 07 02 F6 | 	mov	_var04, arg03
1a2bc     09 09 02 F6 | 	mov	_var05, arg01
1a2c0                 | LR__2903
1a2c0     04 07 12 F2 | 	cmp	_var04, _var05 wc
1a2c4     5C 00 90 3D |  if_ae	jmp	#LR__2907
1a2c8     03 05 02 F6 | 	mov	_var03, _var04
1a2cc     00 05 02 F1 | 	add	_var03, _var01
1a2d0     02 05 C2 FA | 	rdbyte	_var03, _var03
1a2d4     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1a2d8     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1a2dc     01 06 06 A1 |  if_e	add	_var04, #1
1a2e0     03 FB 01 A6 |  if_e	mov	result1, _var04
1a2e4     40 00 90 AD |  if_e	jmp	#LR__2908
1a2e8     01 06 06 F1 | 	add	_var04, #1
1a2ec     D0 FF 9F FD | 	jmp	#LR__2903
1a2f0                 | LR__2904
1a2f0     0B 07 02 F6 | 	mov	_var04, arg03
1a2f4                 | LR__2905
1a2f4     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1a2f8     28 00 90 1D |  if_a	jmp	#LR__2906
1a2fc     03 09 02 F6 | 	mov	_var05, _var04
1a300     00 09 02 F1 | 	add	_var05, _var01
1a304     04 05 C2 FA | 	rdbyte	_var03, _var05
1a308     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1a30c     04 05 0A F2 | 	cmp	_var03, _var05 wz
1a310     01 06 06 A1 |  if_e	add	_var04, #1
1a314     03 FB 01 A6 |  if_e	mov	result1, _var04
1a318     0C 00 90 AD |  if_e	jmp	#LR__2908
1a31c     01 06 86 F1 | 	sub	_var04, #1
1a320     D0 FF 9F FD | 	jmp	#LR__2905
1a324                 | LR__2906
1a324                 | LR__2907
1a324     00 FA 05 F6 | 	mov	result1, #0
1a328                 | LR__2908
1a328                 | __system____ScanForChar_ret
1a328     2D 00 64 FD | 	ret
1a32c                 | 
1a32c                 | __system___basic_dir
1a32c     05 4A 05 F6 | 	mov	COUNT_, #5
1a330     A8 00 A0 FD | 	call	#pushregs_
1a334     4C F0 07 F1 | 	add	ptra, #76
1a338     04 4E 05 F1 | 	add	fp, #4
1a33c     A7 12 62 FC | 	wrlong	arg01, fp
1a340     04 4E 05 F1 | 	add	fp, #4
1a344     A7 14 62 FC | 	wrlong	arg02, fp
1a348     04 4E 85 F1 | 	sub	fp, #4
1a34c     A7 14 0A FB | 	rdlong	arg02, fp wz
1a350     04 4E 85 F1 | 	sub	fp, #4
1a354     04 4E 05 51 |  if_ne	add	fp, #4
1a358     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a35c     04 4E 85 51 |  if_ne	sub	fp, #4
1a360     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1a364     70 00 90 AD |  if_e	jmp	#LR__2910
1a368     03 00 00 FF 
1a36c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a370     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a374     03 00 00 FF 
1a378     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a37c     03 00 00 5F 
1a380     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1a384     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1a388     03 00 00 5F 
1a38c     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1a390     14 EA BF 5D |  if_ne	call	#__system__closedir
1a394     1F 01 00 FF 
1a398     78 12 06 F6 | 	mov	arg01, ##@LR__4068
1a39c     1C E9 BF FD | 	call	#__system__opendir
1a3a0     03 00 00 FF 
1a3a4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a3a8     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1a3ac     08 4E 05 F1 | 	add	fp, #8
1a3b0     A7 20 02 FB | 	rdlong	local02, fp
1a3b4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1a3b8     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1a3bc     04 4E 85 F1 | 	sub	fp, #4
1a3c0     A7 20 02 FB | 	rdlong	local02, fp
1a3c4     04 4E 85 F1 | 	sub	fp, #4
1a3c8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1a3cc     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1a3d0     03 00 00 FF 
1a3d4     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1a3d8                 | LR__2910
1a3d8     03 00 00 FF 
1a3dc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a3e0     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a3e4     03 00 00 FF 
1a3e8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a3ec     1F 01 00 AF 
1a3f0     7A FA 05 A6 |  if_e	mov	result1, ##@LR__4069
1a3f4     84 02 90 AD |  if_e	jmp	#LR__2923
1a3f8                 | LR__2911
1a3f8     03 00 00 FF 
1a3fc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a400     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1a404     03 00 00 FF 
1a408     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a40c     0C EA BF FD | 	call	#__system__readdir
1a410     0C 4E 05 F1 | 	add	fp, #12
1a414     A7 FA 61 FC | 	wrlong	result1, fp
1a418     0C 4E 85 F1 | 	sub	fp, #12
1a41c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a420     38 00 90 5D |  if_ne	jmp	#LR__2912
1a424     03 00 00 FF 
1a428     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a42c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1a430     03 00 00 FF 
1a434     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a438     6C E9 BF FD | 	call	#__system__closedir
1a43c     03 00 00 FF 
1a440     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a444     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1a448     03 00 00 FF 
1a44c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a450     1F 01 00 FF 
1a454     7C FA 05 F6 | 	mov	result1, ##@LR__4070
1a458     20 02 90 FD | 	jmp	#LR__2923
1a45c                 | LR__2912
1a45c     0C 4E 05 F1 | 	add	fp, #12
1a460     A7 12 02 FB | 	rdlong	arg01, fp
1a464     0C 4E 85 F1 | 	sub	fp, #12
1a468     03 00 00 FF 
1a46c     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1a470     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1a474     03 00 00 FF 
1a478     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1a47c     48 07 B0 FD | 	call	#__system___pat_match
1a480     00 FA 0D F2 | 	cmp	result1, #0 wz
1a484     70 FF 9F AD |  if_e	jmp	#LR__2911
1a488     03 00 00 FF 
1a48c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1a490     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a494     03 00 00 FF 
1a498     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1a49c     78 01 90 AD |  if_e	jmp	#LR__2919
1a4a0     0C 4E 05 F1 | 	add	fp, #12
1a4a4     A7 12 02 FB | 	rdlong	arg01, fp
1a4a8     04 4E 05 F1 | 	add	fp, #4
1a4ac     A7 14 02 F6 | 	mov	arg02, fp
1a4b0     10 4E 85 F1 | 	sub	fp, #16
1a4b4     68 F2 BF FD | 	call	#__system__stat
1a4b8     40 4E 05 F1 | 	add	fp, #64
1a4bc     A7 FA 61 FC | 	wrlong	result1, fp
1a4c0     40 4E 85 F1 | 	sub	fp, #64
1a4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a4c8     1F 01 00 5F 
1a4cc     7E FA 05 56 |  if_ne	mov	result1, ##@LR__4071
1a4d0     A8 01 90 5D |  if_ne	jmp	#LR__2923
1a4d4     18 4E 05 F1 | 	add	fp, #24
1a4d8     A7 20 02 FB | 	rdlong	local02, fp
1a4dc     78 00 00 FF 
1a4e0     00 20 06 F5 | 	and	local02, ##61440
1a4e4     2C 4E 05 F1 | 	add	fp, #44
1a4e8     A7 20 62 FC | 	wrlong	local02, fp
1a4ec     38 4E 85 F1 | 	sub	fp, #56
1a4f0     A7 20 02 FB | 	rdlong	local02, fp
1a4f4     0C 4E 85 F1 | 	sub	fp, #12
1a4f8     10 21 C2 FA | 	rdbyte	local02, local02
1a4fc     2E 20 0E F2 | 	cmp	local02, #46 wz
1a500     08 4E 05 A1 |  if_e	add	fp, #8
1a504     A7 04 68 AC |  if_e	wrlong	#2, fp
1a508     08 4E C5 F3 | 	sumz	fp, #8
1a50c     A7 00 68 5C |  if_ne	wrlong	#0, fp
1a510     08 4E 85 51 |  if_ne	sub	fp, #8
1a514     44 4E 05 F1 | 	add	fp, #68
1a518     A7 20 02 FB | 	rdlong	local02, fp
1a51c     44 4E 85 F1 | 	sub	fp, #68
1a520     08 00 00 FF 
1a524     00 20 0E F2 | 	cmp	local02, ##4096 wz
1a528     18 00 90 5D |  if_ne	jmp	#LR__2913
1a52c     08 4E 05 F1 | 	add	fp, #8
1a530     A7 20 02 FB | 	rdlong	local02, fp
1a534     10 20 46 F5 | 	or	local02, #16
1a538     A7 20 62 FC | 	wrlong	local02, fp
1a53c     08 4E 85 F1 | 	sub	fp, #8
1a540     AC 00 90 FD | 	jmp	#LR__2918
1a544                 | LR__2913
1a544     44 4E 05 F1 | 	add	fp, #68
1a548     A7 20 02 FB | 	rdlong	local02, fp
1a54c     44 4E 85 F1 | 	sub	fp, #68
1a550     10 00 00 FF 
1a554     00 20 0E F2 | 	cmp	local02, ##8192 wz
1a558     44 4E 05 51 |  if_ne	add	fp, #68
1a55c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a560     44 4E 85 51 |  if_ne	sub	fp, #68
1a564     18 00 00 5F 
1a568     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1a56c     44 4E 05 51 |  if_ne	add	fp, #68
1a570     0F 23 02 56 |  if_ne	mov	local03, local01
1a574     44 4E 85 51 |  if_ne	sub	fp, #68
1a578     20 00 00 5F 
1a57c     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1a580     18 00 90 5D |  if_ne	jmp	#LR__2914
1a584     08 4E 05 F1 | 	add	fp, #8
1a588     A7 20 02 FB | 	rdlong	local02, fp
1a58c     04 20 46 F5 | 	or	local02, #4
1a590     A7 20 62 FC | 	wrlong	local02, fp
1a594     08 4E 85 F1 | 	sub	fp, #8
1a598     54 00 90 FD | 	jmp	#LR__2917
1a59c                 | LR__2914
1a59c     18 4E 05 F1 | 	add	fp, #24
1a5a0     A7 20 02 FB | 	rdlong	local02, fp
1a5a4     18 4E 85 F1 | 	sub	fp, #24
1a5a8     92 20 CE F7 | 	test	local02, #146 wz
1a5ac     18 00 90 5D |  if_ne	jmp	#LR__2915
1a5b0     08 4E 05 F1 | 	add	fp, #8
1a5b4     A7 20 02 FB | 	rdlong	local02, fp
1a5b8     01 20 46 F5 | 	or	local02, #1
1a5bc     A7 20 62 FC | 	wrlong	local02, fp
1a5c0     08 4E 85 F1 | 	sub	fp, #8
1a5c4     28 00 90 FD | 	jmp	#LR__2916
1a5c8                 | LR__2915
1a5c8     44 4E 05 F1 | 	add	fp, #68
1a5cc     A7 24 02 FB | 	rdlong	local04, fp
1a5d0     44 4E 85 F1 | 	sub	fp, #68
1a5d4     08 00 00 FF 
1a5d8     00 24 0E F2 | 	cmp	local04, ##4096 wz
1a5dc     08 4E 05 51 |  if_ne	add	fp, #8
1a5e0     A7 24 02 5B |  if_ne	rdlong	local04, fp
1a5e4     20 24 46 55 |  if_ne	or	local04, #32
1a5e8     A7 24 62 5C |  if_ne	wrlong	local04, fp
1a5ec     08 4E 85 51 |  if_ne	sub	fp, #8
1a5f0                 | LR__2916
1a5f0                 | LR__2917
1a5f0                 | LR__2918
1a5f0     08 4E 05 F1 | 	add	fp, #8
1a5f4     A7 24 02 FB | 	rdlong	local04, fp
1a5f8     08 4E 85 F1 | 	sub	fp, #8
1a5fc     03 00 00 FF 
1a600     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1a604     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1a608     03 00 00 FF 
1a60c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1a610     0F 25 CA F7 | 	test	local04, local01 wz
1a614     E0 FD 9F AD |  if_e	jmp	#LR__2911
1a618                 | LR__2919
1a618     0C 4E 05 F1 | 	add	fp, #12
1a61c     A7 12 02 FB | 	rdlong	arg01, fp
1a620     0C 4E 85 F1 | 	sub	fp, #12
1a624     09 27 02 F6 | 	mov	local05, arg01
1a628     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
1a62c                 | LR__2920
1a62c     13 FB C9 FA | 	rdbyte	result1, local05 wz
1a630     01 26 06 51 |  if_ne	add	local05, #1
1a634     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
1a638                 | LR__2921
1a638     13 13 C2 F2 | 	subr	arg01, local05
1a63c     01 12 06 F1 | 	add	arg01, #1
1a640     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1a644     48 4E 05 F1 | 	add	fp, #72
1a648     A7 FA 61 FC | 	wrlong	result1, fp
1a64c     48 4E 85 F1 | 	sub	fp, #72
1a650     00 FA 0D F2 | 	cmp	result1, #0 wz
1a654     18 00 90 AD |  if_e	jmp	#LR__2922
1a658     48 4E 05 F1 | 	add	fp, #72
1a65c     A7 12 02 FB | 	rdlong	arg01, fp
1a660     3C 4E 85 F1 | 	sub	fp, #60
1a664     A7 14 02 FB | 	rdlong	arg02, fp
1a668     0C 4E 85 F1 | 	sub	fp, #12
1a66c     84 A5 BF FD | 	call	#__system____builtin_strcpy
1a670                 | LR__2922
1a670     48 4E 05 F1 | 	add	fp, #72
1a674     A7 FA 01 FB | 	rdlong	result1, fp
1a678     48 4E 85 F1 | 	sub	fp, #72
1a67c                 | LR__2923
1a67c     A7 F0 03 F6 | 	mov	ptra, fp
1a680     B2 00 A0 FD | 	call	#popregs_
1a684                 | __system___basic_dir_ret
1a684     2D 00 64 FD | 	ret
1a688                 | 
1a688                 | __system__pack_0415
1a688     09 01 02 F6 | 	mov	_var01, arg01
1a68c     7F 16 06 F1 | 	add	arg03, #127
1a690     04 18 CE F7 | 	test	arg04, #4 wz
1a694     10 00 90 AD |  if_e	jmp	#LR__2930
1a698     00 00 0E F2 | 	cmp	_var01, #0 wz
1a69c     16 00 C6 A9 |  if_e	decod	_var01, #22
1a6a0     F7 00 26 F4 | 	bith	_var01, #247
1a6a4     B4 00 90 FD | 	jmp	#LR__2939
1a6a8                 | LR__2930
1a6a8     02 18 CE F7 | 	test	arg04, #2 wz
1a6ac     00 C0 3F 5F 
1a6b0     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1a6b4     00 14 06 56 |  if_ne	mov	arg02, #0
1a6b8     A0 00 90 5D |  if_ne	jmp	#LR__2938
1a6bc     08 18 CE F7 | 	test	arg04, #8 wz
1a6c0     00 00 06 56 |  if_ne	mov	_var01, #0
1a6c4     94 00 90 5D |  if_ne	jmp	#LR__2937
1a6c8     FF 16 56 F2 | 	cmps	arg03, #255 wc
1a6cc     00 C0 3F 3F 
1a6d0     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1a6d4     00 14 06 36 |  if_ae	mov	arg02, #0
1a6d8     80 00 90 3D |  if_ae	jmp	#LR__2936
1a6dc     01 16 56 F2 | 	cmps	arg03, #1 wc
1a6e0     6C 00 90 3D |  if_ae	jmp	#LR__2934
1a6e4     01 14 46 F0 | 	shr	arg02, #1
1a6e8     00 03 02 F6 | 	mov	_var02, _var01
1a6ec     01 02 06 F5 | 	and	_var02, #1
1a6f0     1F 02 66 F0 | 	shl	_var02, #31
1a6f4     01 15 42 F5 | 	or	arg02, _var02
1a6f8     01 00 46 F0 | 	shr	_var01, #1
1a6fc     97 1E 48 FB | 	callpa	#(@LR__2932-@LR__2931)>>2,fcache_load_ptr_
1a700                 | LR__2931
1a700     00 16 56 F2 | 	cmps	arg03, #0 wc
1a704     34 00 90 3D |  if_ae	jmp	#LR__2933
1a708     00 00 0E F2 | 	cmp	_var01, #0 wz
1a70c     2C 00 90 AD |  if_e	jmp	#LR__2933
1a710     0A 13 02 F6 | 	mov	arg01, arg02
1a714     01 12 06 F5 | 	and	arg01, #1
1a718     01 16 06 F1 | 	add	arg03, #1
1a71c     01 14 46 F0 | 	shr	arg02, #1
1a720     00 03 02 F6 | 	mov	_var02, _var01
1a724     01 02 06 F5 | 	and	_var02, #1
1a728     1F 02 66 F0 | 	shl	_var02, #31
1a72c     01 15 42 F5 | 	or	arg02, _var02
1a730     09 15 42 F5 | 	or	arg02, arg01
1a734     01 00 46 F0 | 	shr	_var01, #1
1a738     C4 FF 9F FD | 	jmp	#LR__2931
1a73c                 | LR__2932
1a73c                 | LR__2933
1a73c     00 16 56 F2 | 	cmps	arg03, #0 wc
1a740     18 00 90 3D |  if_ae	jmp	#LR__2935
1a744     00 14 0E F2 | 	cmp	arg02, #0 wz
1a748     6F 14 62 FD | 	wrnz	arg02
1a74c     0C 00 90 FD | 	jmp	#LR__2935
1a750                 | LR__2934
1a750     17 01 06 F4 | 	bitl	_var01, #279
1a754     17 16 66 F0 | 	shl	arg03, #23
1a758     0B 01 42 F5 | 	or	_var01, arg03
1a75c                 | LR__2935
1a75c                 | LR__2936
1a75c                 | LR__2937
1a75c                 | LR__2938
1a75c                 | LR__2939
1a75c     01 00 CE F7 | 	test	_var01, #1 wz
1a760     01 14 46 55 |  if_ne	or	arg02, #1
1a764     0A 17 02 F6 | 	mov	arg03, arg02
1a768     00 02 06 F6 | 	mov	_var02, #0
1a76c     FF FF 3F FF 
1a770     FF 15 06 F1 | 	add	arg02, ##2147483647
1a774     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1a778     01 02 06 C6 |  if_b	mov	_var02, #1
1a77c     01 01 02 F1 | 	add	_var01, _var02
1a780     01 18 CE F7 | 	test	arg04, #1 wz
1a784     1F 00 26 54 |  if_ne	bith	_var01, #31
1a788     00 FB 01 F6 | 	mov	result1, _var01
1a78c                 | __system__pack_0415_ret
1a78c     2D 00 64 FD | 	ret
1a790                 | 
1a790                 | __system___rxtxioctl_0504
1a790     00 15 0E F2 | 	cmp	arg02, #256 wz
1a794     0C 00 90 AD |  if_e	jmp	#LR__2940
1a798     01 15 0E F2 | 	cmp	arg02, #257 wz
1a79c     1C 00 90 AD |  if_e	jmp	#LR__2941
1a7a0     30 00 90 FD | 	jmp	#LR__2942
1a7a4                 | LR__2940
1a7a4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1a7a8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1a7ac     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1a7b0     0B FB 61 FC | 	wrlong	result1, arg03
1a7b4     00 FA 05 F6 | 	mov	result1, #0
1a7b8     28 00 90 FD | 	jmp	#LR__2943
1a7bc                 | LR__2941
1a7bc     0B 13 02 FB | 	rdlong	arg01, arg03
1a7c0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1a7c4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a7c8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1a7cc     00 FA 05 F6 | 	mov	result1, #0
1a7d0     10 00 90 FD | 	jmp	#LR__2943
1a7d4                 | LR__2942
1a7d4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a7d8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1a7dc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a7e0     01 FA 65 F6 | 	neg	result1, #1
1a7e4                 | LR__2943
1a7e4                 | __system___rxtxioctl_0504_ret
1a7e4     2D 00 64 FD | 	ret
1a7e8                 | 
1a7e8                 | __system____dummy_flush_0505
1a7e8     00 FA 05 F6 | 	mov	result1, #0
1a7ec                 | __system____dummy_flush_0505_ret
1a7ec     2D 00 64 FD | 	ret
1a7f0                 | 
1a7f0                 | __system___vfsread
1a7f0     03 4A 05 F6 | 	mov	COUNT_, #3
1a7f4     A8 00 A0 FD | 	call	#pushregs_
1a7f8     28 F0 07 F1 | 	add	ptra, #40
1a7fc     04 4E 05 F1 | 	add	fp, #4
1a800     A7 12 62 FC | 	wrlong	arg01, fp
1a804     04 4E 05 F1 | 	add	fp, #4
1a808     A7 14 62 FC | 	wrlong	arg02, fp
1a80c     04 4E 05 F1 | 	add	fp, #4
1a810     A7 16 62 FC | 	wrlong	arg03, fp
1a814     04 4E 85 F1 | 	sub	fp, #4
1a818     A7 FA 01 FB | 	rdlong	result1, fp
1a81c     14 4E 05 F1 | 	add	fp, #20
1a820     A7 FA 61 FC | 	wrlong	result1, fp
1a824     04 4E 05 F1 | 	add	fp, #4
1a828     A7 00 68 FC | 	wrlong	#0, fp
1a82c     1C 4E 85 F1 | 	sub	fp, #28
1a830     A7 12 02 FB | 	rdlong	arg01, fp
1a834     04 4E 85 F1 | 	sub	fp, #4
1a838     08 12 06 F1 | 	add	arg01, #8
1a83c     09 FB 01 FB | 	rdlong	result1, arg01
1a840     01 FA CD F7 | 	test	result1, #1 wz
1a844     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a848     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1a84c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a850     01 FA 65 A6 |  if_e	neg	result1, #1
1a854     74 02 90 AD |  if_e	jmp	#LR__2956
1a858     04 4E 05 F1 | 	add	fp, #4
1a85c     A7 12 02 FB | 	rdlong	arg01, fp
1a860     04 4E 85 F1 | 	sub	fp, #4
1a864     14 12 06 F1 | 	add	arg01, #20
1a868     09 FB 09 FB | 	rdlong	result1, arg01 wz
1a86c     B8 00 90 AD |  if_e	jmp	#LR__2951
1a870     04 4E 05 F1 | 	add	fp, #4
1a874     A7 12 02 FB | 	rdlong	arg01, fp
1a878     09 17 02 F6 | 	mov	arg03, arg01
1a87c     14 16 06 F1 | 	add	arg03, #20
1a880     0B 1F 02 FB | 	rdlong	local01, arg03
1a884     0F 21 02 F6 | 	mov	local02, local01
1a888     13 1E 46 F7 | 	zerox	local01, #19
1a88c     14 20 46 F0 | 	shr	local02, #20
1a890     02 20 66 F0 | 	shl	local02, #2
1a894     ED 20 02 F1 | 	add	local02, __methods__
1a898     10 21 02 FB | 	rdlong	local02, local02
1a89c     04 4E 05 F1 | 	add	fp, #4
1a8a0     A7 14 02 FB | 	rdlong	arg02, fp
1a8a4     04 4E 05 F1 | 	add	fp, #4
1a8a8     A7 16 02 FB | 	rdlong	arg03, fp
1a8ac     0C 4E 85 F1 | 	sub	fp, #12
1a8b0     F2 22 02 F6 | 	mov	local03, objptr
1a8b4     0F E5 01 F6 | 	mov	objptr, local01
1a8b8     2D 20 62 FD | 	call	local02
1a8bc     11 E5 01 F6 | 	mov	objptr, local03
1a8c0     10 4E 05 F1 | 	add	fp, #16
1a8c4     A7 FA 61 FC | 	wrlong	result1, fp
1a8c8     10 4E 85 F1 | 	sub	fp, #16
1a8cc     00 FA 55 F2 | 	cmps	result1, #0 wc
1a8d0     44 00 90 3D |  if_ae	jmp	#LR__2950
1a8d4     04 4E 05 F1 | 	add	fp, #4
1a8d8     A7 22 02 FB | 	rdlong	local03, fp
1a8dc     11 1F 02 F6 | 	mov	local01, local03
1a8e0     08 22 06 F1 | 	add	local03, #8
1a8e4     11 21 02 FB | 	rdlong	local02, local03
1a8e8     20 20 46 F5 | 	or	local02, #32
1a8ec     08 1E 06 F1 | 	add	local01, #8
1a8f0     0F 21 62 FC | 	wrlong	local02, local01
1a8f4     0C 4E 05 F1 | 	add	fp, #12
1a8f8     A7 12 0A FB | 	rdlong	arg01, fp wz
1a8fc     10 4E 85 F1 | 	sub	fp, #16
1a900     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a904     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a908     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a90c     01 FA 65 56 |  if_ne	neg	result1, #1
1a910     00 FA 05 A6 |  if_e	mov	result1, #0
1a914     B4 01 90 FD | 	jmp	#LR__2956
1a918                 | LR__2950
1a918     10 4E 05 F1 | 	add	fp, #16
1a91c     A7 FA 01 FB | 	rdlong	result1, fp
1a920     10 4E 85 F1 | 	sub	fp, #16
1a924     A4 01 90 FD | 	jmp	#LR__2956
1a928                 | LR__2951
1a928     04 4E 05 F1 | 	add	fp, #4
1a92c     A7 12 02 FB | 	rdlong	arg01, fp
1a930     20 12 06 F1 | 	add	arg01, #32
1a934     09 13 0A FB | 	rdlong	arg01, arg01 wz
1a938     14 4E 05 F1 | 	add	fp, #20
1a93c     A7 12 62 FC | 	wrlong	arg01, fp
1a940     18 4E 85 F1 | 	sub	fp, #24
1a944     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a948     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1a94c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a950     01 FA 65 A6 |  if_e	neg	result1, #1
1a954     74 01 90 AD |  if_e	jmp	#LR__2956
1a958     04 4E 05 F1 | 	add	fp, #4
1a95c     A7 22 02 FB | 	rdlong	local03, fp
1a960     04 4E 85 F1 | 	sub	fp, #4
1a964     28 22 06 F1 | 	add	local03, #40
1a968     11 21 0A FB | 	rdlong	local02, local03 wz
1a96c     7C 00 90 AD |  if_e	jmp	#LR__2953
1a970     04 4E 05 F1 | 	add	fp, #4
1a974     A7 12 02 FB | 	rdlong	arg01, fp
1a978     09 23 02 F6 | 	mov	local03, arg01
1a97c     28 22 06 F1 | 	add	local03, #40
1a980     11 1F 02 FB | 	rdlong	local01, local03
1a984     0F 21 02 F6 | 	mov	local02, local01
1a988     13 1E 46 F7 | 	zerox	local01, #19
1a98c     14 20 46 F0 | 	shr	local02, #20
1a990     02 20 66 F0 | 	shl	local02, #2
1a994     ED 20 02 F1 | 	add	local02, __methods__
1a998     10 21 02 FB | 	rdlong	local02, local02
1a99c     20 4E 05 F1 | 	add	fp, #32
1a9a0     A7 16 02 F6 | 	mov	arg03, fp
1a9a4     24 4E 85 F1 | 	sub	fp, #36
1a9a8     00 15 06 F6 | 	mov	arg02, #256
1a9ac     F2 22 02 F6 | 	mov	local03, objptr
1a9b0     0F E5 01 F6 | 	mov	objptr, local01
1a9b4     2D 20 62 FD | 	call	local02
1a9b8     11 E5 01 F6 | 	mov	objptr, local03
1a9bc     10 4E 05 F1 | 	add	fp, #16
1a9c0     A7 FA 61 FC | 	wrlong	result1, fp
1a9c4     00 FA 4D F2 | 	cmps	result1, #0 wz
1a9c8     10 4E 85 F1 | 	sub	fp, #16
1a9cc     1C 00 90 5D |  if_ne	jmp	#LR__2952
1a9d0     24 4E 05 F1 | 	add	fp, #36
1a9d4     A7 20 02 FB | 	rdlong	local02, fp
1a9d8     24 4E 85 F1 | 	sub	fp, #36
1a9dc     02 20 CE F7 | 	test	local02, #2 wz
1a9e0     20 4E 05 51 |  if_ne	add	fp, #32
1a9e4     A7 02 68 5C |  if_ne	wrlong	#1, fp
1a9e8     20 4E 85 51 |  if_ne	sub	fp, #32
1a9ec                 | LR__2952
1a9ec                 | LR__2953
1a9ec     10 4E 05 F1 | 	add	fp, #16
1a9f0     A7 00 68 FC | 	wrlong	#0, fp
1a9f4     10 4E 85 F1 | 	sub	fp, #16
1a9f8                 | LR__2954
1a9f8     0C 4E 05 F1 | 	add	fp, #12
1a9fc     A7 22 02 FB | 	rdlong	local03, fp
1aa00     0C 4E 85 F1 | 	sub	fp, #12
1aa04     01 22 16 F2 | 	cmp	local03, #1 wc
1aa08     B4 00 90 CD |  if_b	jmp	#LR__2955
1aa0c     18 4E 05 F1 | 	add	fp, #24
1aa10     A7 20 02 FB | 	rdlong	local02, fp
1aa14     10 23 02 F6 | 	mov	local03, local02
1aa18     13 22 46 F7 | 	zerox	local03, #19
1aa1c     14 20 46 F0 | 	shr	local02, #20
1aa20     02 20 66 F0 | 	shl	local02, #2
1aa24     ED 20 02 F1 | 	add	local02, __methods__
1aa28     10 21 02 FB | 	rdlong	local02, local02
1aa2c     14 4E 85 F1 | 	sub	fp, #20
1aa30     A7 12 02 FB | 	rdlong	arg01, fp
1aa34     04 4E 85 F1 | 	sub	fp, #4
1aa38     F2 1E 02 F6 | 	mov	local01, objptr
1aa3c     11 E5 01 F6 | 	mov	objptr, local03
1aa40     2D 20 62 FD | 	call	local02
1aa44     0F E5 01 F6 | 	mov	objptr, local01
1aa48     14 4E 05 F1 | 	add	fp, #20
1aa4c     A7 FA 61 FC | 	wrlong	result1, fp
1aa50     14 4E 85 F1 | 	sub	fp, #20
1aa54     00 FA 55 F2 | 	cmps	result1, #0 wc
1aa58     64 00 90 CD |  if_b	jmp	#LR__2955
1aa5c     1C 4E 05 F1 | 	add	fp, #28
1aa60     A7 22 02 FB | 	rdlong	local03, fp
1aa64     11 21 02 F6 | 	mov	local02, local03
1aa68     01 20 06 F1 | 	add	local02, #1
1aa6c     A7 20 62 FC | 	wrlong	local02, fp
1aa70     08 4E 85 F1 | 	sub	fp, #8
1aa74     A7 20 02 FB | 	rdlong	local02, fp
1aa78     11 21 42 FC | 	wrbyte	local02, local03
1aa7c     04 4E 85 F1 | 	sub	fp, #4
1aa80     A7 22 02 FB | 	rdlong	local03, fp
1aa84     01 22 06 F1 | 	add	local03, #1
1aa88     A7 22 62 FC | 	wrlong	local03, fp
1aa8c     04 4E 85 F1 | 	sub	fp, #4
1aa90     A7 22 02 FB | 	rdlong	local03, fp
1aa94     01 22 86 F1 | 	sub	local03, #1
1aa98     A7 22 62 FC | 	wrlong	local03, fp
1aa9c     14 4E 05 F1 | 	add	fp, #20
1aaa0     A7 22 0A FB | 	rdlong	local03, fp wz
1aaa4     20 4E 85 F1 | 	sub	fp, #32
1aaa8     4C FF 9F AD |  if_e	jmp	#LR__2954
1aaac     14 4E 05 F1 | 	add	fp, #20
1aab0     A7 20 02 FB | 	rdlong	local02, fp
1aab4     14 4E 85 F1 | 	sub	fp, #20
1aab8     0A 20 0E F2 | 	cmp	local02, #10 wz
1aabc     38 FF 9F 5D |  if_ne	jmp	#LR__2954
1aac0                 | LR__2955
1aac0     10 4E 05 F1 | 	add	fp, #16
1aac4     A7 FA 01 FB | 	rdlong	result1, fp
1aac8     10 4E 85 F1 | 	sub	fp, #16
1aacc                 | LR__2956
1aacc     A7 F0 03 F6 | 	mov	ptra, fp
1aad0     B2 00 A0 FD | 	call	#popregs_
1aad4                 | __system___vfsread_ret
1aad4     2D 00 64 FD | 	ret
1aad8                 | 
1aad8                 | __system____default_filbuf
1aad8     04 4A 05 F6 | 	mov	COUNT_, #4
1aadc     A8 00 A0 FD | 	call	#pushregs_
1aae0     09 1F 02 F6 | 	mov	local01, arg01
1aae4     0F 21 02 FB | 	rdlong	local02, local01
1aae8     0C 20 06 F1 | 	add	local02, #12
1aaec     10 FB 09 FB | 	rdlong	result1, local02 wz
1aaf0     0C 20 86 F1 | 	sub	local02, #12
1aaf4     20 00 90 5D |  if_ne	jmp	#LR__2960
1aaf8     14 20 06 F1 | 	add	local02, #20
1aafc     10 FB 01 F6 | 	mov	result1, local02
1ab00     04 20 86 F1 | 	sub	local02, #4
1ab04     10 FB 61 FC | 	wrlong	result1, local02
1ab08     04 20 86 F1 | 	sub	local02, #4
1ab0c     02 00 80 FF 
1ab10     10 01 68 FC | 	wrlong	##1024, local02
1ab14     0C 20 86 F1 | 	sub	local02, #12
1ab18                 | LR__2960
1ab18     14 1E 06 F1 | 	add	local01, #20
1ab1c     0F 23 02 FB | 	rdlong	local03, local01
1ab20     11 25 02 F6 | 	mov	local04, local03
1ab24     14 1E 86 F1 | 	sub	local01, #20
1ab28     13 24 46 F7 | 	zerox	local04, #19
1ab2c     14 22 46 F0 | 	shr	local03, #20
1ab30     02 22 66 F0 | 	shl	local03, #2
1ab34     ED 22 02 F1 | 	add	local03, __methods__
1ab38     11 23 02 FB | 	rdlong	local03, local03
1ab3c     10 20 06 F1 | 	add	local02, #16
1ab40     10 15 02 FB | 	rdlong	arg02, local02
1ab44     04 20 86 F1 | 	sub	local02, #4
1ab48     10 17 02 FB | 	rdlong	arg03, local02
1ab4c     0C 20 86 F1 | 	sub	local02, #12
1ab50     0F 13 02 F6 | 	mov	arg01, local01
1ab54     F2 1E 02 F6 | 	mov	local01, objptr
1ab58     12 E5 01 F6 | 	mov	objptr, local04
1ab5c     2D 22 62 FD | 	call	local03
1ab60     0F E5 01 F6 | 	mov	objptr, local01
1ab64     FD 24 02 F6 | 	mov	local04, result1
1ab68     00 24 56 F2 | 	cmps	local04, #0 wc
1ab6c     01 FA 65 C6 |  if_b	neg	result1, #1
1ab70     28 00 90 CD |  if_b	jmp	#LR__2961
1ab74     10 25 62 FC | 	wrlong	local04, local02
1ab78     10 20 06 F1 | 	add	local02, #16
1ab7c     10 23 02 FB | 	rdlong	local03, local02
1ab80     0C 20 86 F1 | 	sub	local02, #12
1ab84     10 23 62 FC | 	wrlong	local03, local02
1ab88     04 20 06 F1 | 	add	local02, #4
1ab8c     10 23 02 FB | 	rdlong	local03, local02
1ab90     01 22 46 F5 | 	or	local03, #1
1ab94     10 23 62 FC | 	wrlong	local03, local02
1ab98     12 FB 01 F6 | 	mov	result1, local04
1ab9c                 | LR__2961
1ab9c     A7 F0 03 F6 | 	mov	ptra, fp
1aba0     B2 00 A0 FD | 	call	#popregs_
1aba4                 | __system____default_filbuf_ret
1aba4     2D 00 64 FD | 	ret
1aba8                 | 
1aba8                 | __system__getlower_0890
1aba8     41 12 56 F2 | 	cmps	arg01, #65 wc
1abac     10 00 90 CD |  if_b	jmp	#LR__2970
1abb0     5B 12 56 F2 | 	cmps	arg01, #91 wc
1abb4     09 FB 01 C6 |  if_b	mov	result1, arg01
1abb8     20 FA 05 C1 |  if_b	add	result1, #32
1abbc     04 00 90 CD |  if_b	jmp	#__system__getlower_0890_ret
1abc0                 | LR__2970
1abc0     09 FB 01 F6 | 	mov	result1, arg01
1abc4                 | __system__getlower_0890_ret
1abc4     2D 00 64 FD | 	ret
1abc8                 | 
1abc8                 | __system___pat_match
1abc8     08 4A 05 F6 | 	mov	COUNT_, #8
1abcc     A8 00 A0 FD | 	call	#pushregs_
1abd0     09 1F 02 F6 | 	mov	local01, arg01
1abd4                 | LR__2980
1abd4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1abd8     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1abdc     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1abe0     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1abe4     2C 00 90 AD |  if_e	jmp	#LR__2981
1abe8     0A 13 C2 FA | 	rdbyte	arg01, arg02
1abec     B8 FF BF FD | 	call	#__system__getlower_0890
1abf0     FD 22 02 F6 | 	mov	local03, result1
1abf4     0F 13 C2 FA | 	rdbyte	arg01, local01
1abf8     AC FF BF FD | 	call	#__system__getlower_0890
1abfc     11 FB 09 F2 | 	cmp	result1, local03 wz
1ac00     00 FA 05 56 |  if_ne	mov	result1, #0
1ac04     FC 00 90 5D |  if_ne	jmp	#LR__2989
1ac08     01 1E 06 F1 | 	add	local01, #1
1ac0c     01 14 06 F1 | 	add	arg02, #1
1ac10     C0 FF 9F FD | 	jmp	#LR__2980
1ac14                 | LR__2981
1ac14     0A 23 C2 FA | 	rdbyte	local03, arg02
1ac18     2A 22 0E F2 | 	cmp	local03, #42 wz
1ac1c     D4 00 90 5D |  if_ne	jmp	#LR__2988
1ac20     01 14 06 F1 | 	add	arg02, #1
1ac24     0A 21 C2 FA | 	rdbyte	local02, arg02
1ac28     01 14 86 F1 | 	sub	arg02, #1
1ac2c     2E 20 0E F2 | 	cmp	local02, #46 wz
1ac30     28 00 90 5D |  if_ne	jmp	#LR__2982
1ac34     02 14 06 F1 | 	add	arg02, #2
1ac38     0A 21 C2 FA | 	rdbyte	local02, arg02
1ac3c     02 14 86 F1 | 	sub	arg02, #2
1ac40     2A 20 0E F2 | 	cmp	local02, #42 wz
1ac44     03 14 06 A1 |  if_e	add	arg02, #3
1ac48     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1ac4c     03 14 86 A1 |  if_e	sub	arg02, #3
1ac50     12 27 0A A6 |  if_e	mov	local05, local04 wz
1ac54     01 FA 05 A6 |  if_e	mov	result1, #1
1ac58     A8 00 90 AD |  if_e	jmp	#LR__2989
1ac5c                 | LR__2982
1ac5c     01 14 06 F1 | 	add	arg02, #1
1ac60     00 28 06 F6 | 	mov	local06, #0
1ac64     97 1E 48 FB | 	callpa	#(@LR__2985-@LR__2983)>>2,fcache_load_ptr_
1ac68                 | LR__2983
1ac68     14 2B 02 F6 | 	mov	local07, local06
1ac6c     0A 2B 02 F1 | 	add	local07, arg02
1ac70     15 2B CA FA | 	rdbyte	local07, local07 wz
1ac74     14 27 02 56 |  if_ne	mov	local05, local06
1ac78     01 26 06 51 |  if_ne	add	local05, #1
1ac7c     13 29 02 56 |  if_ne	mov	local06, local05
1ac80     E4 FF 9F 5D |  if_ne	jmp	#LR__2983
1ac84     00 2C 06 F6 | 	mov	local08, #0
1ac88                 | LR__2984
1ac88     16 2B 02 F6 | 	mov	local07, local08
1ac8c     0F 2B 02 F1 | 	add	local07, local01
1ac90     15 2B CA FA | 	rdbyte	local07, local07 wz
1ac94     16 27 02 56 |  if_ne	mov	local05, local08
1ac98     01 26 06 51 |  if_ne	add	local05, #1
1ac9c     13 2D 02 56 |  if_ne	mov	local08, local05
1aca0     E4 FF 9F 5D |  if_ne	jmp	#LR__2984
1aca4                 | LR__2985
1aca4     14 2D 52 F2 | 	cmps	local08, local06 wc
1aca8     00 FA 05 C6 |  if_b	mov	result1, #0
1acac     54 00 90 CD |  if_b	jmp	#LR__2989
1acb0     16 21 02 F6 | 	mov	local02, local08
1acb4     14 21 82 F1 | 	sub	local02, local06
1acb8     10 1F 02 F1 | 	add	local01, local02
1acbc                 | LR__2986
1acbc     01 28 56 F2 | 	cmps	local06, #1 wc
1acc0     30 00 90 CD |  if_b	jmp	#LR__2987
1acc4     0F 13 C2 FA | 	rdbyte	arg01, local01
1acc8     DC FE BF FD | 	call	#__system__getlower_0890
1accc     FD 2C 02 F6 | 	mov	local08, result1
1acd0     0A 13 C2 FA | 	rdbyte	arg01, arg02
1acd4     D0 FE BF FD | 	call	#__system__getlower_0890
1acd8     FD 2C 0A F2 | 	cmp	local08, result1 wz
1acdc     00 FA 05 56 |  if_ne	mov	result1, #0
1ace0     20 00 90 5D |  if_ne	jmp	#LR__2989
1ace4     01 1E 06 F1 | 	add	local01, #1
1ace8     01 14 06 F1 | 	add	arg02, #1
1acec     01 28 86 F1 | 	sub	local06, #1
1acf0     C8 FF 9F FD | 	jmp	#LR__2986
1acf4                 | LR__2987
1acf4                 | LR__2988
1acf4     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1acf8     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1acfc     01 FA 05 A6 |  if_e	mov	result1, #1
1ad00     00 FA 05 56 |  if_ne	mov	result1, #0
1ad04                 | LR__2989
1ad04     A7 F0 03 F6 | 	mov	ptra, fp
1ad08     B2 00 A0 FD | 	call	#popregs_
1ad0c                 | __system___pat_match_ret
1ad0c     2D 00 64 FD | 	ret
1ad10                 | 
1ad10                 | _fatfs_cc_ff_uni2oem
1ad10     00 00 06 F6 | 	mov	_var01, #0
1ad14     80 12 16 F2 | 	cmp	arg01, #128 wc
1ad18     09 01 02 C6 |  if_b	mov	_var01, arg01
1ad1c     58 00 90 CD |  if_b	jmp	#LR__2994
1ad20     80 00 00 FF 
1ad24     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1ad28     4C 00 90 3D |  if_ae	jmp	#LR__2993
1ad2c     0A FB 31 F9 | 	getword	result1, arg02, #0
1ad30     01 00 00 FF 
1ad34     52 FB 0D F2 | 	cmp	result1, ##850 wz
1ad38     3C 00 90 5D |  if_ne	jmp	#LR__2993
1ad3c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1ad3c     00 00 06 F6 | 	mov	_var01, #0
1ad40     97 14 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
1ad44                 | LR__2990
1ad44     00 FB 31 F9 | 	getword	result1, _var01, #0
1ad48     80 FA 15 F2 | 	cmp	result1, #128 wc
1ad4c     1C 00 90 3D |  if_ae	jmp	#LR__2992
1ad50     00 FB 31 F9 | 	getword	result1, _var01, #0
1ad54     01 FA 65 F0 | 	shl	result1, #1
1ad58     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1ad5c     FD FA E1 FA | 	rdword	result1, result1
1ad60     FD 12 0A F2 | 	cmp	arg01, result1 wz
1ad64     01 00 06 51 |  if_ne	add	_var01, #1
1ad68     D8 FF 9F 5D |  if_ne	jmp	#LR__2990
1ad6c                 | LR__2991
1ad6c                 | LR__2992
1ad6c     00 01 32 F9 | 	getword	_var01, _var01, #0
1ad70     80 00 06 F1 | 	add	_var01, #128
1ad74     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1ad78                 | LR__2993
1ad78                 | LR__2994
1ad78                 | ' 			c = (c + 0x80) & 0xFF;
1ad78                 | ' 		}
1ad78                 | ' 	}
1ad78                 | ' 
1ad78                 | ' 	return c;
1ad78     00 FB 01 F6 | 	mov	result1, _var01
1ad7c                 | _fatfs_cc_ff_uni2oem_ret
1ad7c     2D 00 64 FD | 	ret
1ad80                 | 
1ad80                 | _fatfs_cc_ff_oem2uni
1ad80     00 00 06 F6 | 	mov	_var01, #0
1ad84     09 FB 31 F9 | 	getword	result1, arg01, #0
1ad88     80 FA 15 F2 | 	cmp	result1, #128 wc
1ad8c     09 01 02 C6 |  if_b	mov	_var01, arg01
1ad90     2C 00 90 CD |  if_b	jmp	#LR__3001
1ad94     0A 15 32 F9 | 	getword	arg02, arg02, #0
1ad98     01 00 00 FF 
1ad9c     52 15 0E F2 | 	cmp	arg02, ##850 wz
1ada0     1C 00 90 5D |  if_ne	jmp	#LR__3000
1ada4     09 FB 31 F9 | 	getword	result1, arg01, #0
1ada8     00 FB 15 F2 | 	cmp	result1, #256 wc
1adac     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1adb0     80 12 86 C1 |  if_b	sub	arg01, #128
1adb4     01 12 66 C0 |  if_b	shl	arg01, #1
1adb8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1adbc     09 01 E2 CA |  if_b	rdword	_var01, arg01
1adc0                 | LR__3000
1adc0                 | LR__3001
1adc0                 | ' 		}
1adc0                 | ' 	}
1adc0                 | ' 
1adc0                 | ' 	return c;
1adc0     00 FB 01 F6 | 	mov	result1, _var01
1adc4                 | _fatfs_cc_ff_oem2uni_ret
1adc4     2D 00 64 FD | 	ret
1adc8                 | 
1adc8                 | _fatfs_cc_ff_wtoupper
1adc8     09 01 02 F6 | 	mov	_var01, arg01
1adcc     80 00 00 FF 
1add0     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1add4     60 01 90 3D |  if_ae	jmp	#LR__3023
1add8     00 03 02 F6 | 	mov	_var02, _var01
1addc     01 01 32 F9 | 	getword	_var01, _var02, #0
1ade0     08 00 00 FF 
1ade4     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1ade8     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1adec     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1adf0     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1adf4     01 00 00 3F 
1adf8     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1adfc     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1ae00     01 00 00 3F 
1ae04     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1ae08     02 07 02 F6 | 	mov	_var04, _var03
1ae0c                 | ' 		uc = (WORD)uni;
1ae0c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1ae0c                 | ' 		for (;;) {
1ae0c                 | LR__3010
1ae0c     03 09 E2 FA | 	rdword	_var05, _var04
1ae10     04 05 02 F6 | 	mov	_var03, _var05
1ae14     0F 04 4E F7 | 	zerox	_var03, #15 wz
1ae18     02 06 06 F1 | 	add	_var04, #2
1ae1c     14 01 90 AD |  if_e	jmp	#LR__3022
1ae20     01 05 32 F9 | 	getword	_var03, _var02, #0
1ae24     04 01 32 F9 | 	getword	_var01, _var05, #0
1ae28     00 05 12 F2 | 	cmp	_var03, _var01 wc
1ae2c     04 01 90 CD |  if_b	jmp	#LR__3022
1ae30     03 0B E2 FA | 	rdword	_var06, _var04
1ae34     05 0D 32 F9 | 	getword	_var07, _var06, #0
1ae38     08 0C 46 F0 | 	shr	_var07, #8
1ae3c     05 0B 32 F9 | 	getword	_var06, _var06, #0
1ae40     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1ae44     01 05 32 F9 | 	getword	_var03, _var02, #0
1ae48     04 0F 32 F9 | 	getword	_var08, _var05, #0
1ae4c     05 01 32 F9 | 	getword	_var01, _var06, #0
1ae50     00 0F 02 F1 | 	add	_var08, _var01
1ae54     07 05 52 F2 | 	cmps	_var03, _var08 wc
1ae58     02 06 06 F1 | 	add	_var04, #2
1ae5c     C4 00 90 3D |  if_ae	jmp	#LR__3021
1ae60                 | ' 				switch (cmd) {
1ae60     06 11 32 F9 | 	getword	_var09, _var07, #0
1ae64     09 10 26 F3 | 	fle	_var09, #9
1ae68     30 10 62 FD | 	jmprel	_var09
1ae6c                 | LR__3011
1ae6c     24 00 90 FD | 	jmp	#LR__3012
1ae70     3C 00 90 FD | 	jmp	#LR__3013
1ae74     54 00 90 FD | 	jmp	#LR__3014
1ae78     5C 00 90 FD | 	jmp	#LR__3015
1ae7c     64 00 90 FD | 	jmp	#LR__3016
1ae80     6C 00 90 FD | 	jmp	#LR__3017
1ae84     74 00 90 FD | 	jmp	#LR__3018
1ae88     7C 00 90 FD | 	jmp	#LR__3019
1ae8c     84 00 90 FD | 	jmp	#LR__3020
1ae90     A0 00 90 FD | 	jmp	#LR__3022
1ae94                 | LR__3012
1ae94     01 03 32 F9 | 	getword	_var02, _var02, #0
1ae98     04 09 32 F9 | 	getword	_var05, _var05, #0
1ae9c     04 03 82 F1 | 	sub	_var02, _var05
1aea0     01 02 66 F0 | 	shl	_var02, #1
1aea4     03 03 02 F1 | 	add	_var02, _var04
1aea8     01 03 E2 FA | 	rdword	_var02, _var02
1aeac     84 00 90 FD | 	jmp	#LR__3022
1aeb0                 | LR__3013
1aeb0     01 05 32 F9 | 	getword	_var03, _var02, #0
1aeb4     01 03 32 F9 | 	getword	_var02, _var02, #0
1aeb8     04 09 32 F9 | 	getword	_var05, _var05, #0
1aebc     04 03 82 F1 | 	sub	_var02, _var05
1aec0     01 02 06 F5 | 	and	_var02, #1
1aec4     02 03 C2 F2 | 	subr	_var02, _var03
1aec8     68 00 90 FD | 	jmp	#LR__3022
1aecc                 | LR__3014
1aecc     01 03 32 F9 | 	getword	_var02, _var02, #0
1aed0     10 02 86 F1 | 	sub	_var02, #16
1aed4     5C 00 90 FD | 	jmp	#LR__3022
1aed8                 | LR__3015
1aed8     01 03 32 F9 | 	getword	_var02, _var02, #0
1aedc     20 02 86 F1 | 	sub	_var02, #32
1aee0     50 00 90 FD | 	jmp	#LR__3022
1aee4                 | LR__3016
1aee4     01 03 32 F9 | 	getword	_var02, _var02, #0
1aee8     30 02 86 F1 | 	sub	_var02, #48
1aeec     44 00 90 FD | 	jmp	#LR__3022
1aef0                 | LR__3017
1aef0     01 03 32 F9 | 	getword	_var02, _var02, #0
1aef4     1A 02 86 F1 | 	sub	_var02, #26
1aef8     38 00 90 FD | 	jmp	#LR__3022
1aefc                 | LR__3018
1aefc     01 03 32 F9 | 	getword	_var02, _var02, #0
1af00     08 02 06 F1 | 	add	_var02, #8
1af04     2C 00 90 FD | 	jmp	#LR__3022
1af08                 | LR__3019
1af08     01 03 32 F9 | 	getword	_var02, _var02, #0
1af0c     50 02 86 F1 | 	sub	_var02, #80
1af10     20 00 90 FD | 	jmp	#LR__3022
1af14                 | LR__3020
1af14     01 03 32 F9 | 	getword	_var02, _var02, #0
1af18     0E 00 00 FF 
1af1c     60 02 86 F1 | 	sub	_var02, ##7264
1af20                 | ' 				}
1af20                 | ' 				break;
1af20     10 00 90 FD | 	jmp	#LR__3022
1af24                 | LR__3021
1af24     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1af28     02 0A 06 AA |  if_e	mul	_var06, #2
1af2c     05 07 02 A1 |  if_e	add	_var04, _var06
1af30     D8 FE 9F FD | 	jmp	#LR__3010
1af34                 | LR__3022
1af34     01 01 32 F9 | 	getword	_var01, _var02, #0
1af38                 | LR__3023
1af38                 | ' 		}
1af38                 | ' 		uni = uc;
1af38                 | ' 	}
1af38                 | ' 
1af38                 | ' 	return uni;
1af38     00 FB 01 F6 | 	mov	result1, _var01
1af3c                 | _fatfs_cc_ff_wtoupper_ret
1af3c     2D 00 64 FD | 	ret
1af40                 | 
1af40                 | _fatfs_cc_strncpy
1af40     09 01 02 F6 | 	mov	_var01, arg01
1af44     97 12 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
1af48                 | ' 
1af48                 | ' 	dscan = dst;
1af48                 | ' 	sscan = src;
1af48                 | ' 	count = n;
1af48                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1af48                 | LR__3030
1af48     01 16 86 F1 | 	sub	arg03, #1
1af4c     00 16 56 F2 | 	cmps	arg03, #0 wc
1af50     18 00 90 CD |  if_b	jmp	#LR__3032
1af54     0A FB C1 FA | 	rdbyte	result1, arg02
1af58     00 FB 41 FC | 	wrbyte	result1, _var01
1af5c     01 14 06 F1 | 	add	arg02, #1
1af60     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1af64                 | ' 		continue;
1af64     01 00 06 F1 | 	add	_var01, #1
1af68     DC FF 9F 5D |  if_ne	jmp	#LR__3030
1af6c                 | LR__3031
1af6c                 | LR__3032
1af6c     97 0C 48 FB | 	callpa	#(@LR__3034-@LR__3033)>>2,fcache_load_ptr_
1af70                 | ' 	while (--count >= 0)
1af70                 | LR__3033
1af70     01 16 86 F1 | 	sub	arg03, #1
1af74     00 16 56 F2 | 	cmps	arg03, #0 wc
1af78     00 03 02 36 |  if_ae	mov	_var02, _var01
1af7c     01 00 06 31 |  if_ae	add	_var01, #1
1af80     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1af84     E8 FF 9F 3D |  if_ae	jmp	#LR__3033
1af88                 | LR__3034
1af88                 | ' 		*dscan++ = '\0';
1af88                 | ' 	return(dst);
1af88     09 FB 01 F6 | 	mov	result1, arg01
1af8c                 | _fatfs_cc_strncpy_ret
1af8c     2D 00 64 FD | 	ret
1af90                 | 
1af90                 | _fatfs_cc_memcmp
1af90                 | ' 	for (n = size; n > 0; n--)
1af90     00 16 0E F2 | 	cmp	arg03, #0 wz
1af94     28 00 90 AD |  if_e	jmp	#LR__3041
1af98                 | LR__3040
1af98     09 01 C2 FA | 	rdbyte	_var01, arg01
1af9c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1afa0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1afa4     01 12 06 A1 |  if_e	add	arg01, #1
1afa8     01 14 06 A1 |  if_e	add	arg02, #1
1afac                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1afac     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1afb0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1afb4     01 FB 81 51 |  if_ne	sub	result1, _var02
1afb8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1afbc     F6 17 6E FB | 	djnz	arg03, #LR__3040
1afc0                 | LR__3041
1afc0                 | ' 
1afc0                 | ' 	return(0);
1afc0     00 FA 05 F6 | 	mov	result1, #0
1afc4                 | _fatfs_cc_memcmp_ret
1afc4     2D 00 64 FD | 	ret
1afc8                 | 
1afc8                 | _fatfs_cc_strncmp
1afc8     09 01 0A F6 | 	mov	_var01, arg01 wz
1afcc     14 00 90 5D |  if_ne	jmp	#LR__3050
1afd0                 | ' 		return scan2 ? -1 : 0;
1afd0     00 14 0E F2 | 	cmp	arg02, #0 wz
1afd4     01 02 66 56 |  if_ne	neg	_var02, #1
1afd8     00 02 06 A6 |  if_e	mov	_var02, #0
1afdc     01 FB 01 F6 | 	mov	result1, _var02
1afe0     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1afe4                 | LR__3050
1afe4     00 14 0E F2 | 	cmp	arg02, #0 wz
1afe8     01 FA 05 A6 |  if_e	mov	result1, #1
1afec     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1aff0     0B 05 02 F6 | 	mov	_var03, arg03
1aff4     97 16 48 FB | 	callpa	#(@LR__3052-@LR__3051)>>2,fcache_load_ptr_
1aff8                 | ' 	count = n;
1aff8                 | ' 	do {
1aff8                 | LR__3051
1aff8     00 07 C2 FA | 	rdbyte	_var04, _var01
1affc     0A 09 02 F6 | 	mov	_var05, arg02
1b000     04 0B C2 FA | 	rdbyte	_var06, _var05
1b004     01 04 86 F1 | 	sub	_var03, #1
1b008     00 04 56 F2 | 	cmps	_var03, #0 wc
1b00c     01 00 06 F1 | 	add	_var01, #1
1b010     01 14 06 F1 | 	add	arg02, #1
1b014     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1b018     08 00 90 2D |  if_nc_and_z	jmp	#LR__3053
1b01c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1b020     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3051
1b024                 | LR__3052
1b024                 | LR__3053
1b024     00 04 56 F2 | 	cmps	_var03, #0 wc
1b028                 | ' 		return(0);
1b028     00 FA 05 C6 |  if_b	mov	result1, #0
1b02c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1b030     05 07 0A F2 | 	cmp	_var04, _var06 wz
1b034                 | ' 		return(0);
1b034     00 FA 05 A6 |  if_e	mov	result1, #0
1b038     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b03c     00 06 0E F2 | 	cmp	_var04, #0 wz
1b040                 | ' 		return(-1);
1b040     01 FA 65 A6 |  if_e	neg	result1, #1
1b044     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b048     00 0A 0E F2 | 	cmp	_var06, #0 wz
1b04c                 | ' 		return(1);
1b04c     01 FA 05 A6 |  if_e	mov	result1, #1
1b050                 | ' 		return(c1 - c2);
1b050     03 FB 01 56 |  if_ne	mov	result1, _var04
1b054     05 FB 81 51 |  if_ne	sub	result1, _var06
1b058                 | _fatfs_cc_strncmp_ret
1b058     2D 00 64 FD | 	ret
1b05c                 | 
1b05c                 | _fatfs_cc_strchr
1b05c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1b05c                 | ' 	while ((c = *s++) != (char) charwanted)
1b05c                 | LR__3060
1b05c     09 01 02 F6 | 	mov	_var01, arg01
1b060     00 03 C2 FA | 	rdbyte	_var02, _var01
1b064     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1b068     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1b06c     03 05 0A F2 | 	cmp	_var03, _var04 wz
1b070     01 12 06 F1 | 	add	arg01, #1
1b074     14 00 90 AD |  if_e	jmp	#LR__3061
1b078     01 05 02 F6 | 	mov	_var03, _var02
1b07c     07 04 4E F7 | 	zerox	_var03, #7 wz
1b080     00 FA 05 A6 |  if_e	mov	result1, #0
1b084     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1b088     D0 FF 9F FD | 	jmp	#LR__3060
1b08c                 | LR__3061
1b08c                 | ' 	return((char *)--s);
1b08c     01 12 86 F1 | 	sub	arg01, #1
1b090     09 FB 01 F6 | 	mov	result1, arg01
1b094                 | _fatfs_cc_strchr_ret
1b094     2D 00 64 FD | 	ret
1b098                 | 
1b098                 | _fatfs_cc_disk_initialize
1b098     04 4A 05 F6 | 	mov	COUNT_, #4
1b09c     A8 00 A0 FD | 	call	#pushregs_
1b0a0     40 F0 07 F1 | 	add	ptra, #64
1b0a4     04 4E 05 F1 | 	add	fp, #4
1b0a8     A7 12 42 FC | 	wrbyte	arg01, fp
1b0ac     01 00 00 FF 
1b0b0     14 E4 05 F1 | 	add	objptr, ##532
1b0b4     F2 18 02 FB | 	rdlong	arg04, objptr
1b0b8     2C 4E 05 F1 | 	add	fp, #44
1b0bc     A7 18 62 FC | 	wrlong	arg04, fp
1b0c0     04 E4 85 F1 | 	sub	objptr, #4
1b0c4     F2 18 02 FB | 	rdlong	arg04, objptr
1b0c8     04 4E 05 F1 | 	add	fp, #4
1b0cc     A7 18 62 FC | 	wrlong	arg04, fp
1b0d0     08 E4 05 F1 | 	add	objptr, #8
1b0d4     F2 18 02 FB | 	rdlong	arg04, objptr
1b0d8     04 4E 05 F1 | 	add	fp, #4
1b0dc     A7 18 62 FC | 	wrlong	arg04, fp
1b0e0     04 E4 05 F1 | 	add	objptr, #4
1b0e4     F2 18 02 FB | 	rdlong	arg04, objptr
1b0e8     04 4E 05 F1 | 	add	fp, #4
1b0ec     A7 18 62 FC | 	wrlong	arg04, fp
1b0f0     04 E4 05 F1 | 	add	objptr, #4
1b0f4     F2 02 48 FC | 	wrbyte	#1, objptr
1b0f8     01 00 00 FF 
1b0fc     20 E4 85 F1 | 	sub	objptr, ##544
1b100     38 4E 85 F1 | 	sub	fp, #56
1b104     A7 18 CA FA | 	rdbyte	arg04, fp wz
1b108     04 4E 85 F1 | 	sub	fp, #4
1b10c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b10c                 | '             return RES_NOTRDY;
1b10c     03 FA 05 56 |  if_ne	mov	result1, #3
1b110     D8 05 90 5D |  if_ne	jmp	#LR__3088
1b114     13 00 00 FF 
1b118     10 13 06 F6 | 	mov	arg01, ##10000
1b11c     80 9E BF FD | 	call	#__system___waitus
1b120     30 4E 05 F1 | 	add	fp, #48
1b124     A7 12 02 FB | 	rdlong	arg01, fp
1b128     09 01 08 FC | 	wrpin	#0, arg01
1b12c     04 4E 05 F1 | 	add	fp, #4
1b130     A7 12 02 FB | 	rdlong	arg01, fp
1b134     09 01 08 FC | 	wrpin	#0, arg01
1b138     04 4E 05 F1 | 	add	fp, #4
1b13c     A7 12 02 FB | 	rdlong	arg01, fp
1b140     09 01 08 FC | 	wrpin	#0, arg01
1b144     04 4E 05 F1 | 	add	fp, #4
1b148     A7 12 02 FB | 	rdlong	arg01, fp
1b14c     09 00 80 FF 
1b150     09 01 08 FC | 	wrpin	##4608, arg01
1b154     0C 4E 85 F1 | 	sub	fp, #12
1b158     A7 12 02 FB | 	rdlong	arg01, fp
1b15c     59 12 62 FD | 	drvh	arg01
1b160     04 4E 05 F1 | 	add	fp, #4
1b164     A7 12 02 FB | 	rdlong	arg01, fp
1b168     59 12 62 FD | 	drvh	arg01
1b16c     04 4E 05 F1 | 	add	fp, #4
1b170     A7 12 02 FB | 	rdlong	arg01, fp
1b174     59 12 62 FD | 	drvh	arg01
1b178     04 4E 05 F1 | 	add	fp, #4
1b17c     A7 12 02 FB | 	rdlong	arg01, fp
1b180     59 12 62 FD | 	drvh	arg01
1b184     20 4E 85 F1 | 	sub	fp, #32
1b188     00 04 80 FF 
1b18c     A7 20 68 FC | 	wrlong	##524304, fp
1b190     04 4E 05 F1 | 	add	fp, #4
1b194     20 03 80 FF 
1b198     A7 90 68 FC | 	wrlong	##409672, fp
1b19c     14 4E 05 F1 | 	add	fp, #20
1b1a0     A7 1E 02 FB | 	rdlong	local01, fp
1b1a4     18 4E 85 F1 | 	sub	fp, #24
1b1a8     A7 16 02 FB | 	rdlong	arg03, fp
1b1ac     40 1E 62 FD | 	dirl	local01
1b1b0     A0 03 80 FF 
1b1b4     0F 91 08 FC | 	wrpin	##475208, local01
1b1b8     0F 17 12 FC | 	wxpin	arg03, local01
1b1bc     0F 01 28 FC | 	wypin	#0, local01
1b1c0     41 1E 62 FD | 	dirh	local01
1b1c4     1C 4E 05 F1 | 	add	fp, #28
1b1c8     A7 20 02 FB | 	rdlong	local02, fp
1b1cc     10 1F 82 F1 | 	sub	local01, local02
1b1d0     07 1E 06 F5 | 	and	local01, #7
1b1d4     18 1E 66 F0 | 	shl	local01, #24
1b1d8     78 14 06 F6 | 	mov	arg02, #120
1b1dc     0F 15 42 F5 | 	or	arg02, local01
1b1e0     14 4E 85 F1 | 	sub	fp, #20
1b1e4     A7 14 62 FC | 	wrlong	arg02, fp
1b1e8     14 4E 05 F1 | 	add	fp, #20
1b1ec     A7 12 02 FB | 	rdlong	arg01, fp
1b1f0     10 14 26 F4 | 	bith	arg02, #16
1b1f4     40 12 62 FD | 	dirl	arg01
1b1f8     09 15 02 FC | 	wrpin	arg02, arg01
1b1fc     09 3F 18 FC | 	wxpin	#31, arg01
1b200     FF FF FF FF 
1b204     09 FF 2B FC | 	wypin	##-1, arg01
1b208     41 12 62 FD | 	dirh	arg01
1b20c     04 4E 85 F1 | 	sub	fp, #4
1b210     A7 14 02 FB | 	rdlong	arg02, fp
1b214     08 4E 05 F1 | 	add	fp, #8
1b218     A7 22 02 FB | 	rdlong	local03, fp
1b21c     11 15 82 F1 | 	sub	arg02, local03
1b220     07 14 06 F5 | 	and	arg02, #7
1b224     18 14 66 F0 | 	shl	arg02, #24
1b228     14 4E 85 F1 | 	sub	fp, #20
1b22c     A7 14 62 FC | 	wrlong	arg02, fp
1b230     29 00 00 FF 
1b234     7A 14 46 F5 | 	or	arg02, ##21114
1b238     A7 14 62 FC | 	wrlong	arg02, fp
1b23c     14 4E 05 F1 | 	add	fp, #20
1b240     A7 12 02 FB | 	rdlong	arg01, fp
1b244     40 12 62 FD | 	dirl	arg01
1b248     09 15 02 FC | 	wrpin	arg02, arg01
1b24c     09 4F 18 FC | 	wxpin	#39, arg01
1b250     09 01 28 FC | 	wypin	#0, arg01
1b254     41 12 62 FD | 	dirh	arg01
1b258     28 4E 85 F1 | 	sub	fp, #40
1b25c     A7 12 02 F6 | 	mov	arg01, fp
1b260     14 4E 85 F1 | 	sub	fp, #20
1b264     0A 14 06 F6 | 	mov	arg02, #10
1b268     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0924
1b26c     00 12 06 F6 | 	mov	arg01, #0
1b270     00 14 06 F6 | 	mov	arg02, #0
1b274     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b278     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0934
1b27c     64 12 06 F6 | 	mov	arg01, #100
1b280     1C 9D BF FD | 	call	#__system___waitus
1b284     14 4E 05 F1 | 	add	fp, #20
1b288     A7 12 02 F6 | 	mov	arg01, fp
1b28c     14 4E 85 F1 | 	sub	fp, #20
1b290     0A 14 06 F6 | 	mov	arg02, #10
1b294     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0924
1b298     0C 4E 05 F1 | 	add	fp, #12
1b29c     A7 00 48 FC | 	wrbyte	#0, fp
1b2a0     0C 4E 85 F1 | 	sub	fp, #12
1b2a4     00 12 06 F6 | 	mov	arg01, #0
1b2a8     00 14 06 F6 | 	mov	arg02, #0
1b2ac     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b2b0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1b2b4     01 18 0E F2 | 	cmp	arg04, #1 wz
1b2b8     B8 03 90 5D |  if_ne	jmp	#LR__3087
1b2bc     08 12 06 F6 | 	mov	arg01, #8
1b2c0     AA 15 06 F6 | 	mov	arg02, #426
1b2c4     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b2c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b2cc     01 FA 0D F2 | 	cmp	result1, #1 wz
1b2d0     98 01 90 5D |  if_ne	jmp	#LR__3073
1b2d4     14 4E 05 F1 | 	add	fp, #20
1b2d8     A7 12 02 F6 | 	mov	arg01, fp
1b2dc     14 4E 85 F1 | 	sub	fp, #20
1b2e0     04 14 06 F6 | 	mov	arg02, #4
1b2e4     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0924
1b2e8     16 4E 05 F1 | 	add	fp, #22
1b2ec     A7 24 C2 FA | 	rdbyte	local04, fp
1b2f0     16 4E 85 F1 | 	sub	fp, #22
1b2f4     01 24 0E F2 | 	cmp	local04, #1 wz
1b2f8     17 4E 05 A1 |  if_e	add	fp, #23
1b2fc     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1b300     17 4E 85 A1 |  if_e	sub	fp, #23
1b304     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1b308     68 03 90 5D |  if_ne	jmp	#LR__3086
1b30c                 | ' 				for (tmr = 1000; tmr; tmr--) {
1b30c     18 4E 05 F1 | 	add	fp, #24
1b310     01 00 80 FF 
1b314     A7 D0 6B FC | 	wrlong	##1000, fp
1b318     18 4E 85 F1 | 	sub	fp, #24
1b31c                 | LR__3070
1b31c     18 4E 05 F1 | 	add	fp, #24
1b320     A7 1E 0A FB | 	rdlong	local01, fp wz
1b324     18 4E 85 F1 | 	sub	fp, #24
1b328     3C 00 90 AD |  if_e	jmp	#LR__3071
1b32c     A9 12 06 F6 | 	mov	arg01, #169
1b330     1E 14 C6 F9 | 	decod	arg02, #30
1b334     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b338     FD 24 02 F6 | 	mov	local04, result1
1b33c     07 24 4E F7 | 	zerox	local04, #7 wz
1b340     24 00 90 AD |  if_e	jmp	#LR__3071
1b344     01 00 00 FF 
1b348     E8 13 06 F6 | 	mov	arg01, ##1000
1b34c     50 9C BF FD | 	call	#__system___waitus
1b350     18 4E 05 F1 | 	add	fp, #24
1b354     A7 24 02 FB | 	rdlong	local04, fp
1b358     01 24 86 F1 | 	sub	local04, #1
1b35c     A7 24 62 FC | 	wrlong	local04, fp
1b360     18 4E 85 F1 | 	sub	fp, #24
1b364     B4 FF 9F FD | 	jmp	#LR__3070
1b368                 | LR__3071
1b368     18 4E 05 F1 | 	add	fp, #24
1b36c     A7 24 0A FB | 	rdlong	local04, fp wz
1b370     18 4E 85 F1 | 	sub	fp, #24
1b374     4C 00 90 AD |  if_e	jmp	#LR__3072
1b378     3A 12 06 F6 | 	mov	arg01, #58
1b37c     00 14 06 F6 | 	mov	arg02, #0
1b380     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b384     FD 22 02 F6 | 	mov	local03, result1
1b388     07 22 4E F7 | 	zerox	local03, #7 wz
1b38c     34 00 90 5D |  if_ne	jmp	#LR__3072
1b390     14 4E 05 F1 | 	add	fp, #20
1b394     A7 12 02 F6 | 	mov	arg01, fp
1b398     14 4E 85 F1 | 	sub	fp, #20
1b39c     04 14 06 F6 | 	mov	arg02, #4
1b3a0     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0924
1b3a4     14 4E 05 F1 | 	add	fp, #20
1b3a8     A7 1E C2 FA | 	rdbyte	local01, fp
1b3ac     40 1E CE F7 | 	test	local01, #64 wz
1b3b0     0C 24 06 56 |  if_ne	mov	local04, #12
1b3b4     04 24 06 A6 |  if_e	mov	local04, #4
1b3b8     08 4E 85 F1 | 	sub	fp, #8
1b3bc     A7 24 42 FC | 	wrbyte	local04, fp
1b3c0     0C 4E 85 F1 | 	sub	fp, #12
1b3c4                 | LR__3072
1b3c4     14 24 06 FB | 	rdlong	local04, #20
1b3c8     18 4E 05 F1 | 	add	fp, #24
1b3cc     A7 24 62 FC | 	wrlong	local04, fp
1b3d0     0C 4E 05 F1 | 	add	fp, #12
1b3d4     A7 24 02 FB | 	rdlong	local04, fp
1b3d8     1B 24 26 F4 | 	bith	local04, #27
1b3dc     A7 24 62 FC | 	wrlong	local04, fp
1b3e0     0C 4E 85 F1 | 	sub	fp, #12
1b3e4     A7 24 02 FB | 	rdlong	local04, fp
1b3e8     18 4E 85 F1 | 	sub	fp, #24
1b3ec     68 78 04 FF 
1b3f0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1b3f4     1C 4E 05 C1 |  if_b	add	fp, #28
1b3f8     00 01 80 CF 
1b3fc     A7 08 68 CC |  if_b	wrlong	##131076, fp
1b400     1C 4E 85 C1 |  if_b	sub	fp, #28
1b404     6C 02 90 CD |  if_b	jmp	#LR__3086
1b408     18 4E 05 F1 | 	add	fp, #24
1b40c     A7 24 02 FB | 	rdlong	local04, fp
1b410     18 4E 85 F1 | 	sub	fp, #24
1b414     E1 F5 05 FF 
1b418     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1b41c     1C 4E 05 C1 |  if_b	add	fp, #28
1b420     00 01 80 CF 
1b424     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1b428     1C 4E 85 C1 |  if_b	sub	fp, #28
1b42c     44 02 90 CD |  if_b	jmp	#LR__3086
1b430     18 4E 05 F1 | 	add	fp, #24
1b434     A7 24 02 FB | 	rdlong	local04, fp
1b438     18 4E 85 F1 | 	sub	fp, #24
1b43c     3B 58 08 FF 
1b440     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1b444     1C 4E 05 C1 |  if_b	add	fp, #28
1b448     00 01 80 CF 
1b44c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1b450     1C 4E 85 C1 |  if_b	sub	fp, #28
1b454     1C 02 90 CD |  if_b	jmp	#LR__3086
1b458     1C 4E 05 F1 | 	add	fp, #28
1b45c     80 01 80 FF 
1b460     A7 10 68 FC | 	wrlong	##196616, fp
1b464     1C 4E 85 F1 | 	sub	fp, #28
1b468     08 02 90 FD | 	jmp	#LR__3086
1b46c                 | LR__3073
1b46c     A9 12 06 F6 | 	mov	arg01, #169
1b470     00 14 06 F6 | 	mov	arg02, #0
1b474     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b478     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b47c     02 24 16 F2 | 	cmp	local04, #2 wc
1b480     18 00 90 3D |  if_ae	jmp	#LR__3074
1b484     0C 4E 05 F1 | 	add	fp, #12
1b488     A7 04 48 FC | 	wrbyte	#2, fp
1b48c     04 4E 05 F1 | 	add	fp, #4
1b490     A7 52 49 FC | 	wrbyte	#169, fp
1b494     10 4E 85 F1 | 	sub	fp, #16
1b498     14 00 90 FD | 	jmp	#LR__3075
1b49c                 | LR__3074
1b49c     0C 4E 05 F1 | 	add	fp, #12
1b4a0     A7 02 48 FC | 	wrbyte	#1, fp
1b4a4     04 4E 05 F1 | 	add	fp, #4
1b4a8     A7 02 48 FC | 	wrbyte	#1, fp
1b4ac     10 4E 85 F1 | 	sub	fp, #16
1b4b0                 | LR__3075
1b4b0                 | ' 				ty =  0x01 ; cmd =  (1) ;
1b4b0                 | ' 			}
1b4b0                 | ' 			for (tmr = 1000; tmr; tmr--) {
1b4b0     18 4E 05 F1 | 	add	fp, #24
1b4b4     01 00 80 FF 
1b4b8     A7 D0 6B FC | 	wrlong	##1000, fp
1b4bc     18 4E 85 F1 | 	sub	fp, #24
1b4c0                 | LR__3076
1b4c0     18 4E 05 F1 | 	add	fp, #24
1b4c4     A7 22 0A FB | 	rdlong	local03, fp wz
1b4c8     18 4E 85 F1 | 	sub	fp, #24
1b4cc     44 00 90 AD |  if_e	jmp	#LR__3077
1b4d0     10 4E 05 F1 | 	add	fp, #16
1b4d4     A7 12 C2 FA | 	rdbyte	arg01, fp
1b4d8     10 4E 85 F1 | 	sub	fp, #16
1b4dc     00 14 06 F6 | 	mov	arg02, #0
1b4e0     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b4e4     FD 24 02 F6 | 	mov	local04, result1
1b4e8     07 24 4E F7 | 	zerox	local04, #7 wz
1b4ec     24 00 90 AD |  if_e	jmp	#LR__3077
1b4f0     01 00 00 FF 
1b4f4     E8 13 06 F6 | 	mov	arg01, ##1000
1b4f8     A4 9A BF FD | 	call	#__system___waitus
1b4fc     18 4E 05 F1 | 	add	fp, #24
1b500     A7 24 02 FB | 	rdlong	local04, fp
1b504     01 24 86 F1 | 	sub	local04, #1
1b508     A7 24 62 FC | 	wrlong	local04, fp
1b50c     18 4E 85 F1 | 	sub	fp, #24
1b510     AC FF 9F FD | 	jmp	#LR__3076
1b514                 | LR__3077
1b514     18 4E 05 F1 | 	add	fp, #24
1b518     A7 24 0A FB | 	rdlong	local04, fp wz
1b51c     18 4E 85 F1 | 	sub	fp, #24
1b520     14 00 90 AD |  if_e	jmp	#LR__3078
1b524     10 12 06 F6 | 	mov	arg01, #16
1b528     09 14 C6 F9 | 	decod	arg02, #9
1b52c     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b530     07 FA 4D F7 | 	zerox	result1, #7 wz
1b534     0C 00 90 AD |  if_e	jmp	#LR__3079
1b538                 | LR__3078
1b538     0C 4E 05 F1 | 	add	fp, #12
1b53c     A7 00 48 FC | 	wrbyte	#0, fp
1b540     0C 4E 85 F1 | 	sub	fp, #12
1b544                 | LR__3079
1b544     14 24 06 FB | 	rdlong	local04, #20
1b548     18 4E 05 F1 | 	add	fp, #24
1b54c     A7 24 62 FC | 	wrlong	local04, fp
1b550     18 4E 85 F1 | 	sub	fp, #24
1b554     F0 FA 02 FF 
1b558     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1b55c     18 00 90 3D |  if_ae	jmp	#LR__3080
1b560     24 4E 05 F1 | 	add	fp, #36
1b564     A7 24 02 FB | 	rdlong	local04, fp
1b568     1B 24 26 F4 | 	bith	local04, #27
1b56c     A7 24 62 FC | 	wrlong	local04, fp
1b570     24 4E 85 F1 | 	sub	fp, #36
1b574     2C 00 90 FD | 	jmp	#LR__3081
1b578                 | LR__3080
1b578     18 4E 05 F1 | 	add	fp, #24
1b57c     A7 24 02 FB | 	rdlong	local04, fp
1b580     18 4E 85 F1 | 	sub	fp, #24
1b584     E1 F5 05 FF 
1b588     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1b58c     24 4E 05 C1 |  if_b	add	fp, #36
1b590     A7 24 02 CB |  if_b	rdlong	local04, fp
1b594     80 00 04 CF 
1b598     00 24 46 C5 |  if_b	or	local04, ##134283264
1b59c     A7 24 62 CC |  if_b	wrlong	local04, fp
1b5a0     24 4E 85 C1 |  if_b	sub	fp, #36
1b5a4                 | LR__3081
1b5a4     18 4E 05 F1 | 	add	fp, #24
1b5a8     A7 24 02 FB | 	rdlong	local04, fp
1b5ac     18 4E 85 F1 | 	sub	fp, #24
1b5b0     F0 FA 02 FF 
1b5b4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1b5b8     1C 4E 05 C1 |  if_b	add	fp, #28
1b5bc     00 01 80 CF 
1b5c0     A7 08 68 CC |  if_b	wrlong	##131076, fp
1b5c4     1C 4E 85 C1 |  if_b	sub	fp, #28
1b5c8     A8 00 90 CD |  if_b	jmp	#LR__3085
1b5cc     18 4E 05 F1 | 	add	fp, #24
1b5d0     A7 24 02 FB | 	rdlong	local04, fp
1b5d4     18 4E 85 F1 | 	sub	fp, #24
1b5d8     68 78 04 FF 
1b5dc     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1b5e0     1C 4E 05 C1 |  if_b	add	fp, #28
1b5e4     80 01 80 CF 
1b5e8     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1b5ec     1C 4E 85 C1 |  if_b	sub	fp, #28
1b5f0     80 00 90 CD |  if_b	jmp	#LR__3084
1b5f4     18 4E 05 F1 | 	add	fp, #24
1b5f8     A7 24 02 FB | 	rdlong	local04, fp
1b5fc     18 4E 85 F1 | 	sub	fp, #24
1b600     E1 F5 05 FF 
1b604     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1b608     1C 4E 05 C1 |  if_b	add	fp, #28
1b60c     00 02 80 CF 
1b610     A7 10 68 CC |  if_b	wrlong	##262152, fp
1b614     1C 4E 85 C1 |  if_b	sub	fp, #28
1b618     58 00 90 CD |  if_b	jmp	#LR__3083
1b61c     18 4E 05 F1 | 	add	fp, #24
1b620     A7 24 02 FB | 	rdlong	local04, fp
1b624     18 4E 85 F1 | 	sub	fp, #24
1b628     59 73 07 FF 
1b62c     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1b630     1C 4E 05 C1 |  if_b	add	fp, #28
1b634     80 02 80 CF 
1b638     A7 14 68 CC |  if_b	wrlong	##327690, fp
1b63c     1C 4E 85 C1 |  if_b	sub	fp, #28
1b640     30 00 90 CD |  if_b	jmp	#LR__3082
1b644     18 4E 05 F1 | 	add	fp, #24
1b648     A7 24 02 FB | 	rdlong	local04, fp
1b64c     18 4E 85 F1 | 	sub	fp, #24
1b650     D1 F0 08 FF 
1b654     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1b658     1C 4E 05 C1 |  if_b	add	fp, #28
1b65c     00 03 80 CF 
1b660     A7 18 68 CC |  if_b	wrlong	##393228, fp
1b664     1C 4E 85 F3 | 	sumc	fp, #28
1b668     80 03 80 3F 
1b66c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1b670     1C 4E 85 31 |  if_ae	sub	fp, #28
1b674                 | LR__3082
1b674                 | LR__3083
1b674                 | LR__3084
1b674                 | LR__3085
1b674                 | LR__3086
1b674                 | LR__3087
1b674     0C 4E 05 F1 | 	add	fp, #12
1b678     A7 24 C2 FA | 	rdbyte	local04, fp
1b67c     01 00 00 FF 
1b680     21 E4 05 F1 | 	add	objptr, ##545
1b684     F2 24 42 FC | 	wrbyte	local04, objptr
1b688     A7 1E CA FA | 	rdbyte	local01, fp wz
1b68c     00 24 06 56 |  if_ne	mov	local04, #0
1b690     01 24 06 A6 |  if_e	mov	local04, #1
1b694     20 4E 05 F1 | 	add	fp, #32
1b698     A7 24 42 FC | 	wrbyte	local04, fp
1b69c     A7 24 C2 FA | 	rdbyte	local04, fp
1b6a0     2C 4E 85 F1 | 	sub	fp, #44
1b6a4     01 E4 85 F1 | 	sub	objptr, #1
1b6a8     F2 24 42 FC | 	wrbyte	local04, objptr
1b6ac     01 00 00 FF 
1b6b0     20 E4 85 F1 | 	sub	objptr, ##544
1b6b4     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0934
1b6b8     34 4E 05 F1 | 	add	fp, #52
1b6bc     A7 12 02 FB | 	rdlong	arg01, fp
1b6c0     18 4E 85 F1 | 	sub	fp, #24
1b6c4     A7 14 02 FB | 	rdlong	arg02, fp
1b6c8     09 15 12 FC | 	wxpin	arg02, arg01
1b6cc     1C 4E 05 F1 | 	add	fp, #28
1b6d0     A7 12 02 FB | 	rdlong	arg01, fp
1b6d4     14 4E 85 F1 | 	sub	fp, #20
1b6d8     A7 14 02 FB | 	rdlong	arg02, fp
1b6dc     09 15 02 FC | 	wrpin	arg02, arg01
1b6e0                 | ' 
1b6e0                 | ' 		}
1b6e0                 | ' 	}
1b6e0                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b6e0                 | ' 	CardType = ty;
1b6e0                 | ' 	s = ty ? 0 :  0x01 ;
1b6e0                 | ' 	Stat = s;
1b6e0                 | ' 
1b6e0                 | ' 	deselect();
1b6e0                 | ' 
1b6e0                 | ' 
1b6e0                 | ' 	_wxpin( PIN_CLK, ck_div );
1b6e0                 | ' 	_wrpin( PIN_DI, spm_tx );
1b6e0                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b6e0                 | ' 	return s;
1b6e0     08 4E 05 F1 | 	add	fp, #8
1b6e4     A7 FA C1 FA | 	rdbyte	result1, fp
1b6e8     2C 4E 85 F1 | 	sub	fp, #44
1b6ec                 | LR__3088
1b6ec     A7 F0 03 F6 | 	mov	ptra, fp
1b6f0     B2 00 A0 FD | 	call	#popregs_
1b6f4                 | _fatfs_cc_disk_initialize_ret
1b6f4     2D 00 64 FD | 	ret
1b6f8                 | 
1b6f8                 | _fatfs_cc_disk_read
1b6f8     05 4A 05 F6 | 	mov	COUNT_, #5
1b6fc     A8 00 A0 FD | 	call	#pushregs_
1b700     0A 1F 02 F6 | 	mov	local01, arg02
1b704     0B 21 02 F6 | 	mov	local02, arg03
1b708     0C 23 02 F6 | 	mov	local03, arg04
1b70c     00 12 0E F2 | 	cmp	arg01, #0 wz
1b710     01 FA 05 56 |  if_ne	mov	result1, #1
1b714                 | ' 
1b714                 | ' 	return Stat;
1b714     01 00 00 AF 
1b718     20 E4 05 A1 |  if_e	add	objptr, ##544
1b71c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1b720     01 00 00 AF 
1b724     20 E4 85 A1 |  if_e	sub	objptr, ##544
1b728     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b72c     01 FA CD F7 | 	test	result1, #1 wz
1b730     03 FA 05 56 |  if_ne	mov	result1, #3
1b734     84 00 90 5D |  if_ne	jmp	#LR__3092
1b738     01 00 00 FF 
1b73c     21 E4 05 F1 | 	add	objptr, ##545
1b740     F2 24 C2 FA | 	rdbyte	local04, objptr
1b744     01 00 00 FF 
1b748     21 E4 85 F1 | 	sub	objptr, ##545
1b74c     08 24 CE F7 | 	test	local04, #8 wz
1b750     09 20 66 A0 |  if_e	shl	local02, #9
1b754     02 22 16 F2 | 	cmp	local03, #2 wc
1b758     12 24 06 36 |  if_ae	mov	local04, #18
1b75c     11 24 06 C6 |  if_b	mov	local04, #17
1b760     10 15 02 F6 | 	mov	arg02, local02
1b764     12 13 02 F6 | 	mov	arg01, local04
1b768     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b76c     FD 26 02 F6 | 	mov	local05, result1
1b770     07 26 4E F7 | 	zerox	local05, #7 wz
1b774     30 00 90 5D |  if_ne	jmp	#LR__3091
1b778                 | ' 		do {
1b778                 | LR__3090
1b778     0F 13 02 F6 | 	mov	arg01, local01
1b77c     09 14 C6 F9 | 	decod	arg02, #9
1b780     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0942
1b784     00 FA 0D F2 | 	cmp	result1, #0 wz
1b788     01 00 00 5F 
1b78c     00 1E 06 51 |  if_ne	add	local01, ##512
1b790     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3090
1b794     12 25 E2 F8 | 	getbyte	local04, local04, #0
1b798     12 24 0E F2 | 	cmp	local04, #18 wz
1b79c     0C 12 06 A6 |  if_e	mov	arg01, #12
1b7a0     00 14 06 A6 |  if_e	mov	arg02, #0
1b7a4     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0948
1b7a8                 | LR__3091
1b7a8     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0934
1b7ac                 | ' 	}
1b7ac                 | ' 	deselect();
1b7ac                 | ' 
1b7ac                 | ' 	return count ? RES_ERROR : RES_OK;
1b7ac     00 22 0E F2 | 	cmp	local03, #0 wz
1b7b0     01 26 06 56 |  if_ne	mov	local05, #1
1b7b4     00 26 06 A6 |  if_e	mov	local05, #0
1b7b8     13 FB 01 F6 | 	mov	result1, local05
1b7bc                 | LR__3092
1b7bc     A7 F0 03 F6 | 	mov	ptra, fp
1b7c0     B2 00 A0 FD | 	call	#popregs_
1b7c4                 | _fatfs_cc_disk_read_ret
1b7c4     2D 00 64 FD | 	ret
1b7c8                 | 
1b7c8                 | _fatfs_cc_disk_write
1b7c8     04 4A 05 F6 | 	mov	COUNT_, #4
1b7cc     A8 00 A0 FD | 	call	#pushregs_
1b7d0     0A 1F 02 F6 | 	mov	local01, arg02
1b7d4     0C 21 02 F6 | 	mov	local02, arg04
1b7d8     0B 23 02 F6 | 	mov	local03, arg03
1b7dc     00 12 0E F2 | 	cmp	arg01, #0 wz
1b7e0     01 FA 05 56 |  if_ne	mov	result1, #1
1b7e4                 | ' 
1b7e4                 | ' 	return Stat;
1b7e4     01 00 00 AF 
1b7e8     20 E4 05 A1 |  if_e	add	objptr, ##544
1b7ec     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1b7f0     01 00 00 AF 
1b7f4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1b7f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b7fc     01 FA CD F7 | 	test	result1, #1 wz
1b800     03 FA 05 56 |  if_ne	mov	result1, #3
1b804     D4 00 90 5D |  if_ne	jmp	#LR__3104
1b808     01 00 00 FF 
1b80c     21 E4 05 F1 | 	add	objptr, ##545
1b810     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b814     01 00 00 FF 
1b818     21 E4 85 F1 | 	sub	objptr, ##545
1b81c     08 16 CE F7 | 	test	arg03, #8 wz
1b820     09 22 66 A0 |  if_e	shl	local03, #9
1b824     01 20 0E F2 | 	cmp	local02, #1 wz
1b828     30 00 90 5D |  if_ne	jmp	#LR__3100
1b82c     18 12 06 F6 | 	mov	arg01, #24
1b830     11 15 02 F6 | 	mov	arg02, local03
1b834     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b838     FD 24 02 F6 | 	mov	local04, result1
1b83c     07 24 4E F7 | 	zerox	local04, #7 wz
1b840     84 00 90 5D |  if_ne	jmp	#LR__3103
1b844     0F 13 02 F6 | 	mov	arg01, local01
1b848     FE 14 06 F6 | 	mov	arg02, #254
1b84c     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0944
1b850     00 FA 0D F2 | 	cmp	result1, #0 wz
1b854     00 20 06 56 |  if_ne	mov	local02, #0
1b858     6C 00 90 FD | 	jmp	#LR__3103
1b85c                 | LR__3100
1b85c     01 00 00 FF 
1b860     21 E4 05 F1 | 	add	objptr, ##545
1b864     F2 24 C2 FA | 	rdbyte	local04, objptr
1b868     01 00 00 FF 
1b86c     21 E4 85 F1 | 	sub	objptr, ##545
1b870     06 24 CE F7 | 	test	local04, #6 wz
1b874     97 12 06 56 |  if_ne	mov	arg01, #151
1b878     10 15 02 56 |  if_ne	mov	arg02, local02
1b87c     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0948
1b880     11 15 02 F6 | 	mov	arg02, local03
1b884     19 12 06 F6 | 	mov	arg01, #25
1b888     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b88c     FD 24 02 F6 | 	mov	local04, result1
1b890     07 24 4E F7 | 	zerox	local04, #7 wz
1b894     30 00 90 5D |  if_ne	jmp	#LR__3102
1b898                 | ' 			do {
1b898                 | LR__3101
1b898     0F 13 02 F6 | 	mov	arg01, local01
1b89c     FC 14 06 F6 | 	mov	arg02, #252
1b8a0     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0944
1b8a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b8a8     01 00 00 5F 
1b8ac     00 1E 06 51 |  if_ne	add	local01, ##512
1b8b0     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3101
1b8b4     00 12 06 F6 | 	mov	arg01, #0
1b8b8     FD 14 06 F6 | 	mov	arg02, #253
1b8bc     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0944
1b8c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b8c4     01 20 06 A6 |  if_e	mov	local02, #1
1b8c8                 | LR__3102
1b8c8                 | LR__3103
1b8c8     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0934
1b8cc                 | ' 				count = 1;
1b8cc                 | ' 		}
1b8cc                 | ' 	}
1b8cc                 | ' 	deselect();
1b8cc                 | ' 
1b8cc                 | ' 	return count ? RES_ERROR : RES_OK;
1b8cc     00 20 0E F2 | 	cmp	local02, #0 wz
1b8d0     01 24 06 56 |  if_ne	mov	local04, #1
1b8d4     00 24 06 A6 |  if_e	mov	local04, #0
1b8d8     12 FB 01 F6 | 	mov	result1, local04
1b8dc                 | LR__3104
1b8dc     A7 F0 03 F6 | 	mov	ptra, fp
1b8e0     B2 00 A0 FD | 	call	#popregs_
1b8e4                 | _fatfs_cc_disk_write_ret
1b8e4     2D 00 64 FD | 	ret
1b8e8                 | 
1b8e8                 | _fatfs_cc_disk_ioctl
1b8e8     01 4A 05 F6 | 	mov	COUNT_, #1
1b8ec     A8 00 A0 FD | 	call	#pushregs_
1b8f0     30 F0 07 F1 | 	add	ptra, #48
1b8f4     04 4E 05 F1 | 	add	fp, #4
1b8f8     A7 12 42 FC | 	wrbyte	arg01, fp
1b8fc     04 4E 05 F1 | 	add	fp, #4
1b900     A7 14 42 FC | 	wrbyte	arg02, fp
1b904     04 4E 05 F1 | 	add	fp, #4
1b908     A7 16 62 FC | 	wrlong	arg03, fp
1b90c     08 4E 85 F1 | 	sub	fp, #8
1b910     A7 12 CA FA | 	rdbyte	arg01, fp wz
1b914     04 4E 85 F1 | 	sub	fp, #4
1b918     01 FA 05 56 |  if_ne	mov	result1, #1
1b91c                 | ' 
1b91c                 | ' 	return Stat;
1b91c     01 00 00 AF 
1b920     20 E4 05 A1 |  if_e	add	objptr, ##544
1b924     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1b928     01 00 00 AF 
1b92c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1b930     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b934     01 FA CD F7 | 	test	result1, #1 wz
1b938     03 FA 05 56 |  if_ne	mov	result1, #3
1b93c     E4 01 90 5D |  if_ne	jmp	#LR__3118
1b940     10 4E 05 F1 | 	add	fp, #16
1b944     A7 02 68 FC | 	wrlong	#1, fp
1b948                 | ' 
1b948                 | ' 	res = RES_ERROR;
1b948                 | ' 	switch (ctrl) {
1b948     08 4E 85 F1 | 	sub	fp, #8
1b94c     A7 1E C2 FA | 	rdbyte	local01, fp
1b950     08 4E 85 F1 | 	sub	fp, #8
1b954     04 1E 26 F3 | 	fle	local01, #4
1b958     30 1E 62 FD | 	jmprel	local01
1b95c                 | LR__3110
1b95c     10 00 90 FD | 	jmp	#LR__3111
1b960     24 00 90 FD | 	jmp	#LR__3112
1b964     A0 01 90 FD | 	jmp	#LR__3116
1b968     80 01 90 FD | 	jmp	#LR__3115
1b96c     98 01 90 FD | 	jmp	#LR__3116
1b970                 | LR__3111
1b970     B0 79 B0 FD | 	call	#_fatfs_cc_select_0938
1b974     00 FA 0D F2 | 	cmp	result1, #0 wz
1b978     10 4E 05 51 |  if_ne	add	fp, #16
1b97c     A7 00 68 5C |  if_ne	wrlong	#0, fp
1b980     10 4E 85 51 |  if_ne	sub	fp, #16
1b984                 | ' 			break;
1b984     8C 01 90 FD | 	jmp	#LR__3117
1b988                 | LR__3112
1b988     09 12 06 F6 | 	mov	arg01, #9
1b98c     00 14 06 F6 | 	mov	arg02, #0
1b990     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0948
1b994     FD 1E 02 F6 | 	mov	local01, result1
1b998     07 1E 4E F7 | 	zerox	local01, #7 wz
1b99c     74 01 90 5D |  if_ne	jmp	#LR__3117
1b9a0     18 4E 05 F1 | 	add	fp, #24
1b9a4     A7 12 02 F6 | 	mov	arg01, fp
1b9a8     18 4E 85 F1 | 	sub	fp, #24
1b9ac     10 14 06 F6 | 	mov	arg02, #16
1b9b0     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0942
1b9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b9b8     58 01 90 AD |  if_e	jmp	#LR__3117
1b9bc     18 4E 05 F1 | 	add	fp, #24
1b9c0     A7 1E C2 FA | 	rdbyte	local01, fp
1b9c4     18 4E 85 F1 | 	sub	fp, #24
1b9c8     06 1E 46 F0 | 	shr	local01, #6
1b9cc     01 1E 0E F2 | 	cmp	local01, #1 wz
1b9d0     5C 00 90 5D |  if_ne	jmp	#LR__3113
1b9d4     21 4E 05 F1 | 	add	fp, #33
1b9d8     A7 1E C2 FA | 	rdbyte	local01, fp
1b9dc     01 4E 85 F1 | 	sub	fp, #1
1b9e0     A7 FA C1 FA | 	rdbyte	result1, fp
1b9e4     FD FA 31 F9 | 	getword	result1, result1, #0
1b9e8     08 FA 65 F0 | 	shl	result1, #8
1b9ec     FD 1E 02 F1 | 	add	local01, result1
1b9f0     01 4E 85 F1 | 	sub	fp, #1
1b9f4     A7 FA C1 FA | 	rdbyte	result1, fp
1b9f8     3F FA 05 F5 | 	and	result1, #63
1b9fc     10 FA 65 F0 | 	shl	result1, #16
1ba00     FD 1E 02 F1 | 	add	local01, result1
1ba04     01 1E 06 F1 | 	add	local01, #1
1ba08     09 4E 05 F1 | 	add	fp, #9
1ba0c     A7 1E 62 FC | 	wrlong	local01, fp
1ba10     1C 4E 85 F1 | 	sub	fp, #28
1ba14     A7 1E 02 FB | 	rdlong	local01, fp
1ba18     1C 4E 05 F1 | 	add	fp, #28
1ba1c     A7 FA 01 FB | 	rdlong	result1, fp
1ba20     28 4E 85 F1 | 	sub	fp, #40
1ba24     0A FA 65 F0 | 	shl	result1, #10
1ba28     0F FB 61 FC | 	wrlong	result1, local01
1ba2c     AC 00 90 FD | 	jmp	#LR__3114
1ba30                 | LR__3113
1ba30     1D 4E 05 F1 | 	add	fp, #29
1ba34     A7 1E C2 FA | 	rdbyte	local01, fp
1ba38     0F 1F 42 F8 | 	getnib	local01, local01, #0
1ba3c     05 4E 05 F1 | 	add	fp, #5
1ba40     A7 FA C1 FA | 	rdbyte	result1, fp
1ba44     80 FA 05 F5 | 	and	result1, #128
1ba48     07 FA C5 F0 | 	sar	result1, #7
1ba4c     FD 1E 02 F1 | 	add	local01, result1
1ba50     01 4E 85 F1 | 	sub	fp, #1
1ba54     A7 FA C1 FA | 	rdbyte	result1, fp
1ba58     03 FA 05 F5 | 	and	result1, #3
1ba5c     01 FA 65 F0 | 	shl	result1, #1
1ba60     FD 1E 02 F1 | 	add	local01, result1
1ba64     02 1E 06 F1 | 	add	local01, #2
1ba68     0D 4E 85 F1 | 	sub	fp, #13
1ba6c     A7 1E 42 FC | 	wrbyte	local01, fp
1ba70     0C 4E 05 F1 | 	add	fp, #12
1ba74     A7 1E C2 FA | 	rdbyte	local01, fp
1ba78     06 1E 46 F0 | 	shr	local01, #6
1ba7c     01 4E 85 F1 | 	sub	fp, #1
1ba80     A7 FA C1 FA | 	rdbyte	result1, fp
1ba84     FD FA 31 F9 | 	getword	result1, result1, #0
1ba88     02 FA 65 F0 | 	shl	result1, #2
1ba8c     FD 1E 02 F1 | 	add	local01, result1
1ba90     01 4E 85 F1 | 	sub	fp, #1
1ba94     A7 FA C1 FA | 	rdbyte	result1, fp
1ba98     03 FA 05 F5 | 	and	result1, #3
1ba9c     FD FA 31 F9 | 	getword	result1, result1, #0
1baa0     0A FA 65 F0 | 	shl	result1, #10
1baa4     FD 1E 02 F1 | 	add	local01, result1
1baa8     01 1E 06 F1 | 	add	local01, #1
1baac     0A 4E 05 F1 | 	add	fp, #10
1bab0     A7 1E 62 FC | 	wrlong	local01, fp
1bab4     1C 4E 85 F1 | 	sub	fp, #28
1bab8     A7 1E 02 FB | 	rdlong	local01, fp
1babc     1C 4E 05 F1 | 	add	fp, #28
1bac0     A7 FA 01 FB | 	rdlong	result1, fp
1bac4     14 4E 85 F1 | 	sub	fp, #20
1bac8     A7 16 C2 FA | 	rdbyte	arg03, fp
1bacc     14 4E 85 F1 | 	sub	fp, #20
1bad0     09 16 86 F1 | 	sub	arg03, #9
1bad4     0B FB 61 F0 | 	shl	result1, arg03
1bad8     0F FB 61 FC | 	wrlong	result1, local01
1badc                 | LR__3114
1badc     10 4E 05 F1 | 	add	fp, #16
1bae0     A7 00 68 FC | 	wrlong	#0, fp
1bae4     10 4E 85 F1 | 	sub	fp, #16
1bae8                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1bae8                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1bae8                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1bae8                 | ' 				}
1bae8                 | ' 				res = RES_OK;
1bae8                 | ' 			}
1bae8                 | ' 			break;
1bae8     28 00 90 FD | 	jmp	#LR__3117
1baec                 | LR__3115
1baec     0C 4E 05 F1 | 	add	fp, #12
1baf0     A7 1E 02 FB | 	rdlong	local01, fp
1baf4     0F 01 69 FC | 	wrlong	#128, local01
1baf8     04 4E 05 F1 | 	add	fp, #4
1bafc     A7 00 68 FC | 	wrlong	#0, fp
1bb00     10 4E 85 F1 | 	sub	fp, #16
1bb04                 | ' 			*(DWORD*)buff = 128;
1bb04                 | ' 			res = RES_OK;
1bb04                 | ' 			break;
1bb04     0C 00 90 FD | 	jmp	#LR__3117
1bb08                 | LR__3116
1bb08     10 4E 05 F1 | 	add	fp, #16
1bb0c     A7 08 68 FC | 	wrlong	#4, fp
1bb10     10 4E 85 F1 | 	sub	fp, #16
1bb14                 | LR__3117
1bb14     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0934
1bb18                 | ' 			res = RES_PARERR;
1bb18                 | ' 	}
1bb18                 | ' 
1bb18                 | ' 	deselect();
1bb18                 | ' 
1bb18                 | ' 	return res;
1bb18     10 4E 05 F1 | 	add	fp, #16
1bb1c     A7 FA 01 FB | 	rdlong	result1, fp
1bb20     10 4E 85 F1 | 	sub	fp, #16
1bb24                 | LR__3118
1bb24     A7 F0 03 F6 | 	mov	ptra, fp
1bb28     B2 00 A0 FD | 	call	#popregs_
1bb2c                 | _fatfs_cc_disk_ioctl_ret
1bb2c     2D 00 64 FD | 	ret
1bb30                 | 
1bb30                 | _fatfs_cc_disk_setpins
1bb30     00 12 0E F2 | 	cmp	arg01, #0 wz
1bb34     01 FA 65 56 |  if_ne	neg	result1, #1
1bb38     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1bb3c     01 00 00 FF 
1bb40     10 E4 05 F1 | 	add	objptr, ##528
1bb44     F2 14 62 FC | 	wrlong	arg02, objptr
1bb48     04 E4 05 F1 | 	add	objptr, #4
1bb4c     F2 16 62 FC | 	wrlong	arg03, objptr
1bb50     04 E4 05 F1 | 	add	objptr, #4
1bb54     F2 18 62 FC | 	wrlong	arg04, objptr
1bb58     04 E4 05 F1 | 	add	objptr, #4
1bb5c     F2 1A 62 FC | 	wrlong	arg05, objptr
1bb60     01 00 00 FF 
1bb64     1C E4 85 F1 | 	sub	objptr, ##540
1bb68     00 FA 05 F6 | 	mov	result1, #0
1bb6c                 | _fatfs_cc_disk_setpins_ret
1bb6c     2D 00 64 FD | 	ret
1bb70                 | 
1bb70                 | _fatfs_cc_tchar2uni
1bb70     09 01 02 FB | 	rdlong	_var01, arg01
1bb74     00 03 02 F6 | 	mov	_var02, _var01
1bb78     01 00 06 F1 | 	add	_var01, #1
1bb7c     00 05 02 F6 | 	mov	_var03, _var01
1bb80     01 07 C2 FA | 	rdbyte	_var04, _var02
1bb84     80 06 CE F7 | 	test	_var04, #128 wz
1bb88     E8 00 90 AD |  if_e	jmp	#LR__3127
1bb8c     03 09 02 F6 | 	mov	_var05, _var04
1bb90     E0 08 06 F5 | 	and	_var05, #224
1bb94     C0 08 0E F2 | 	cmp	_var05, #192 wz
1bb98     1F 06 06 A5 |  if_e	and	_var04, #31
1bb9c     01 0A 06 A6 |  if_e	mov	_var06, #1
1bba0     34 00 90 AD |  if_e	jmp	#LR__3121
1bba4     03 09 02 F6 | 	mov	_var05, _var04
1bba8     F0 08 06 F5 | 	and	_var05, #240
1bbac     E0 08 0E F2 | 	cmp	_var05, #224 wz
1bbb0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1bbb4     02 0A 06 A6 |  if_e	mov	_var06, #2
1bbb8     1C 00 90 AD |  if_e	jmp	#LR__3120
1bbbc     03 09 02 F6 | 	mov	_var05, _var04
1bbc0     F8 08 06 F5 | 	and	_var05, #248
1bbc4     F0 08 0E F2 | 	cmp	_var05, #240 wz
1bbc8     07 06 06 A5 |  if_e	and	_var04, #7
1bbcc     03 0A 06 A6 |  if_e	mov	_var06, #3
1bbd0                 | ' 			return 0xFFFFFFFF;
1bbd0     01 FA 65 56 |  if_ne	neg	result1, #1
1bbd4     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1bbd8                 | LR__3120
1bbd8                 | LR__3121
1bbd8                 | ' 		}
1bbd8                 | ' 		do {
1bbd8                 | LR__3122
1bbd8     02 0D C2 FA | 	rdbyte	_var07, _var03
1bbdc     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1bbe0     C0 08 06 F5 | 	and	_var05, #192
1bbe4     80 08 0E F2 | 	cmp	_var05, #128 wz
1bbe8     01 04 06 F1 | 	add	_var03, #1
1bbec     01 FA 65 56 |  if_ne	neg	result1, #1
1bbf0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1bbf4     06 06 66 F0 | 	shl	_var04, #6
1bbf8     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1bbfc     3F 02 06 F5 | 	and	_var02, #63
1bc00     01 07 42 F5 | 	or	_var04, _var02
1bc04     F4 0B 6E FB | 	djnz	_var06, #LR__3122
1bc08     80 06 16 F2 | 	cmp	_var04, #128 wc
1bc0c     24 00 90 CD |  if_b	jmp	#LR__3124
1bc10     6C 00 00 FF 
1bc14     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1bc18     0C 00 90 CD |  if_b	jmp	#LR__3123
1bc1c     70 00 00 FF 
1bc20     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1bc24     0C 00 90 CD |  if_b	jmp	#LR__3124
1bc28                 | LR__3123
1bc28     80 08 00 FF 
1bc2c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1bc30     08 00 90 CD |  if_b	jmp	#LR__3125
1bc34                 | LR__3124
1bc34     01 FA 65 F6 | 	neg	result1, #1
1bc38     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1bc3c                 | LR__3125
1bc3c     80 00 00 FF 
1bc40     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1bc44     2C 00 90 CD |  if_b	jmp	#LR__3126
1bc48     03 03 02 F6 | 	mov	_var02, _var04
1bc4c     80 00 00 FF 
1bc50     00 02 86 F1 | 	sub	_var02, ##65536
1bc54     06 02 66 F0 | 	shl	_var02, #6
1bc58     80 FF 01 FF 
1bc5c     00 02 06 F5 | 	and	_var02, ##67043328
1bc60     6E 00 6C FF 
1bc64     00 08 06 F6 | 	mov	_var05, ##-671032320
1bc68     01 09 42 F5 | 	or	_var05, _var02
1bc6c     09 06 46 F7 | 	zerox	_var04, #9
1bc70     04 07 42 F5 | 	or	_var04, _var05
1bc74                 | LR__3126
1bc74                 | LR__3127
1bc74     09 05 62 FC | 	wrlong	_var03, arg01
1bc78                 | ' 	}
1bc78                 | ' #line 811 "ff.c"
1bc78                 | ' 	*str = p;
1bc78                 | ' 	return uc;
1bc78     03 FB 01 F6 | 	mov	result1, _var04
1bc7c                 | _fatfs_cc_tchar2uni_ret
1bc7c     2D 00 64 FD | 	ret
1bc80                 | 
1bc80                 | _fatfs_cc_put_utf
1bc80     80 12 16 F2 | 	cmp	arg01, #128 wc
1bc84     18 00 90 3D |  if_ae	jmp	#LR__3130
1bc88     01 16 16 F2 | 	cmp	arg03, #1 wc
1bc8c     00 FA 05 C6 |  if_b	mov	result1, #0
1bc90     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1bc94     0A 13 42 FC | 	wrbyte	arg01, arg02
1bc98                 | ' 		*buf = (TCHAR)chr;
1bc98                 | ' 		return 1;
1bc98     01 FA 05 F6 | 	mov	result1, #1
1bc9c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bca0                 | LR__3130
1bca0     04 00 00 FF 
1bca4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1bca8     40 00 90 3D |  if_ae	jmp	#LR__3131
1bcac     02 16 16 F2 | 	cmp	arg03, #2 wc
1bcb0     00 FA 05 C6 |  if_b	mov	result1, #0
1bcb4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1bcb8     09 FB 01 F6 | 	mov	result1, arg01
1bcbc     06 FA 45 F0 | 	shr	result1, #6
1bcc0     1F FA 05 F5 | 	and	result1, #31
1bcc4     C0 16 06 F6 | 	mov	arg03, #192
1bcc8     FD 16 42 F5 | 	or	arg03, result1
1bccc     0A 17 42 FC | 	wrbyte	arg03, arg02
1bcd0     01 14 06 F1 | 	add	arg02, #1
1bcd4     3F 12 06 F5 | 	and	arg01, #63
1bcd8     80 FA 05 F6 | 	mov	result1, #128
1bcdc     09 FB 41 F5 | 	or	result1, arg01
1bce0     0A FB 41 FC | 	wrbyte	result1, arg02
1bce4                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1bce4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1bce4                 | ' 		return 2;
1bce4     02 FA 05 F6 | 	mov	result1, #2
1bce8     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bcec                 | LR__3131
1bcec     80 00 00 FF 
1bcf0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1bcf4     70 00 90 3D |  if_ae	jmp	#LR__3134
1bcf8     03 16 16 F2 | 	cmp	arg03, #3 wc
1bcfc     18 00 90 CD |  if_b	jmp	#LR__3132
1bd00     6C 00 00 FF 
1bd04     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1bd08     14 00 90 CD |  if_b	jmp	#LR__3133
1bd0c     70 00 00 FF 
1bd10     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1bd14     08 00 90 3D |  if_ae	jmp	#LR__3133
1bd18                 | LR__3132
1bd18     00 FA 05 F6 | 	mov	result1, #0
1bd1c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bd20                 | LR__3133
1bd20     09 FB 59 F8 | 	getnib	result1, arg01, #3
1bd24     E0 16 06 F6 | 	mov	arg03, #224
1bd28     FD 16 42 F5 | 	or	arg03, result1
1bd2c     0A 17 42 FC | 	wrbyte	arg03, arg02
1bd30     01 14 06 F1 | 	add	arg02, #1
1bd34     09 FB 01 F6 | 	mov	result1, arg01
1bd38     06 FA 45 F0 | 	shr	result1, #6
1bd3c     3F FA 05 F5 | 	and	result1, #63
1bd40     80 16 06 F6 | 	mov	arg03, #128
1bd44     FD 16 42 F5 | 	or	arg03, result1
1bd48     0A 17 42 FC | 	wrbyte	arg03, arg02
1bd4c     01 14 06 F1 | 	add	arg02, #1
1bd50     3F 12 06 F5 | 	and	arg01, #63
1bd54     80 FA 05 F6 | 	mov	result1, #128
1bd58     09 FB 41 F5 | 	or	result1, arg01
1bd5c     0A FB 41 FC | 	wrbyte	result1, arg02
1bd60                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1bd60                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1bd60                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1bd60                 | ' 		return 3;
1bd60     03 FA 05 F6 | 	mov	result1, #3
1bd64     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bd68                 | LR__3134
1bd68     04 16 16 F2 | 	cmp	arg03, #4 wc
1bd6c     00 FA 05 C6 |  if_b	mov	result1, #0
1bd70     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1bd74     09 01 02 F6 | 	mov	_var01, arg01
1bd78     E0 01 06 F4 | 	bitl	_var01, #480
1bd7c     00 00 6C FF 
1bd80     00 00 86 F1 | 	sub	_var01, ##-671088640
1bd84     06 00 46 F0 | 	shr	_var01, #6
1bd88     09 13 32 F9 | 	getword	arg01, arg01, #0
1bd8c     6E 00 00 FF 
1bd90     00 12 86 F1 | 	sub	arg01, ##56320
1bd94     00 08 00 FF 
1bd98     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1bd9c     02 00 00 CF 
1bda0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1bda4     00 FA 05 36 |  if_ae	mov	result1, #0
1bda8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1bdac     09 01 42 F5 | 	or	_var01, arg01
1bdb0     80 00 00 FF 
1bdb4     00 00 06 F1 | 	add	_var01, ##65536
1bdb8     00 FB 01 F6 | 	mov	result1, _var01
1bdbc     12 FA 45 F0 | 	shr	result1, #18
1bdc0     07 FA 05 F5 | 	and	result1, #7
1bdc4     F0 16 06 F6 | 	mov	arg03, #240
1bdc8     FD 16 42 F5 | 	or	arg03, result1
1bdcc     0A 17 42 FC | 	wrbyte	arg03, arg02
1bdd0     01 14 06 F1 | 	add	arg02, #1
1bdd4     00 FB 01 F6 | 	mov	result1, _var01
1bdd8     0C FA 45 F0 | 	shr	result1, #12
1bddc     3F FA 05 F5 | 	and	result1, #63
1bde0     80 16 06 F6 | 	mov	arg03, #128
1bde4     FD 16 42 F5 | 	or	arg03, result1
1bde8     0A 17 42 FC | 	wrbyte	arg03, arg02
1bdec     01 14 06 F1 | 	add	arg02, #1
1bdf0     00 FB 01 F6 | 	mov	result1, _var01
1bdf4     06 FA 45 F0 | 	shr	result1, #6
1bdf8     3F FA 05 F5 | 	and	result1, #63
1bdfc     80 16 06 F6 | 	mov	arg03, #128
1be00     FD 16 42 F5 | 	or	arg03, result1
1be04     0A 17 42 FC | 	wrbyte	arg03, arg02
1be08     01 14 06 F1 | 	add	arg02, #1
1be0c     3F 00 06 F5 | 	and	_var01, #63
1be10     80 FA 05 F6 | 	mov	result1, #128
1be14     00 FB 41 F5 | 	or	result1, _var01
1be18     0A FB 41 FC | 	wrbyte	result1, arg02
1be1c                 | ' 	chr = (hc | chr) + 0x10000;
1be1c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1be1c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1be1c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1be1c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1be1c                 | ' 	return 4;
1be1c     04 FA 05 F6 | 	mov	result1, #4
1be20                 | _fatfs_cc_put_utf_ret
1be20     2D 00 64 FD | 	ret
1be24                 | 
1be24                 | _fatfs_cc_sync_window
1be24     02 4A 05 F6 | 	mov	COUNT_, #2
1be28     A8 00 A0 FD | 	call	#pushregs_
1be2c     09 1F 02 F6 | 	mov	local01, arg01
1be30     00 20 06 F6 | 	mov	local02, #0
1be34     03 1E 06 F1 | 	add	local01, #3
1be38     0F FB C9 FA | 	rdbyte	result1, local01 wz
1be3c     03 1E 86 F1 | 	sub	local01, #3
1be40     A4 00 90 AD |  if_e	jmp	#LR__3142
1be44     01 1E 06 F1 | 	add	local01, #1
1be48     0F 13 C2 FA | 	rdbyte	arg01, local01
1be4c     33 1E 06 F1 | 	add	local01, #51
1be50     0F 15 02 F6 | 	mov	arg02, local01
1be54     04 1E 86 F1 | 	sub	local01, #4
1be58     0F 17 02 FB | 	rdlong	arg03, local01
1be5c     30 1E 86 F1 | 	sub	local01, #48
1be60     01 18 06 F6 | 	mov	arg04, #1
1be64     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1be68     00 FA 0D F2 | 	cmp	result1, #0 wz
1be6c     74 00 90 5D |  if_ne	jmp	#LR__3140
1be70     03 1E 06 F1 | 	add	local01, #3
1be74     0F 01 48 FC | 	wrbyte	#0, local01
1be78     2D 1E 06 F1 | 	add	local01, #45
1be7c     0F FB 01 FB | 	rdlong	result1, local01
1be80     0C 1E 86 F1 | 	sub	local01, #12
1be84     0F 19 02 FB | 	rdlong	arg04, local01
1be88     0C FB 81 F1 | 	sub	result1, arg04
1be8c     08 1E 86 F1 | 	sub	local01, #8
1be90     0F 19 02 FB | 	rdlong	arg04, local01
1be94     1C 1E 86 F1 | 	sub	local01, #28
1be98     0C FB 11 F2 | 	cmp	result1, arg04 wc
1be9c     48 00 90 3D |  if_ae	jmp	#LR__3141
1bea0     02 1E 06 F1 | 	add	local01, #2
1bea4     0F 19 C2 FA | 	rdbyte	arg04, local01
1bea8     02 1E 86 F1 | 	sub	local01, #2
1beac     02 18 0E F2 | 	cmp	arg04, #2 wz
1beb0     34 00 90 5D |  if_ne	jmp	#LR__3141
1beb4     01 1E 06 F1 | 	add	local01, #1
1beb8     0F 13 C2 FA | 	rdbyte	arg01, local01
1bebc     33 1E 06 F1 | 	add	local01, #51
1bec0     0F 15 02 F6 | 	mov	arg02, local01
1bec4     04 1E 86 F1 | 	sub	local01, #4
1bec8     0F 17 02 FB | 	rdlong	arg03, local01
1becc     14 1E 86 F1 | 	sub	local01, #20
1bed0     0F 1F 02 FB | 	rdlong	local01, local01
1bed4     0F 17 02 F1 | 	add	arg03, local01
1bed8     01 18 06 F6 | 	mov	arg04, #1
1bedc     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1bee0     04 00 90 FD | 	jmp	#LR__3141
1bee4                 | LR__3140
1bee4     01 20 06 F6 | 	mov	local02, #1
1bee8                 | LR__3141
1bee8                 | LR__3142
1bee8                 | ' 			res = FR_DISK_ERR;
1bee8                 | ' 		}
1bee8                 | ' 	}
1bee8                 | ' 	return res;
1bee8     10 FB 01 F6 | 	mov	result1, local02
1beec     A7 F0 03 F6 | 	mov	ptra, fp
1bef0     B2 00 A0 FD | 	call	#popregs_
1bef4                 | _fatfs_cc_sync_window_ret
1bef4     2D 00 64 FD | 	ret
1bef8                 | 
1bef8                 | _fatfs_cc_move_window
1bef8     03 4A 05 F6 | 	mov	COUNT_, #3
1befc     A8 00 A0 FD | 	call	#pushregs_
1bf00     09 1F 02 F6 | 	mov	local01, arg01
1bf04     0A 21 02 F6 | 	mov	local02, arg02
1bf08     00 22 06 F6 | 	mov	local03, #0
1bf0c     30 1E 06 F1 | 	add	local01, #48
1bf10     0F 19 02 FB | 	rdlong	arg04, local01
1bf14     30 1E 86 F1 | 	sub	local01, #48
1bf18     0C 21 0A F2 | 	cmp	local02, arg04 wz
1bf1c     40 00 90 AD |  if_e	jmp	#LR__3151
1bf20     0F 13 02 F6 | 	mov	arg01, local01
1bf24     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1bf28     FD 22 0A F6 | 	mov	local03, result1 wz
1bf2c     30 00 90 5D |  if_ne	jmp	#LR__3150
1bf30     01 1E 06 F1 | 	add	local01, #1
1bf34     0F 13 C2 FA | 	rdbyte	arg01, local01
1bf38     33 1E 06 F1 | 	add	local01, #51
1bf3c     0F 15 02 F6 | 	mov	arg02, local01
1bf40     10 17 02 F6 | 	mov	arg03, local02
1bf44     01 18 06 F6 | 	mov	arg04, #1
1bf48     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1bf4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1bf50     01 20 66 56 |  if_ne	neg	local02, #1
1bf54     01 22 06 56 |  if_ne	mov	local03, #1
1bf58     04 1E 86 F1 | 	sub	local01, #4
1bf5c     0F 21 62 FC | 	wrlong	local02, local01
1bf60                 | LR__3150
1bf60                 | LR__3151
1bf60                 | ' 				sect = (LBA_t)0 - 1;
1bf60                 | ' 				res = FR_DISK_ERR;
1bf60                 | ' 			}
1bf60                 | ' 			fs->winsect = sect;
1bf60                 | ' 		}
1bf60                 | ' 	}
1bf60                 | ' 	return res;
1bf60     11 FB 01 F6 | 	mov	result1, local03
1bf64     A7 F0 03 F6 | 	mov	ptra, fp
1bf68     B2 00 A0 FD | 	call	#popregs_
1bf6c                 | _fatfs_cc_move_window_ret
1bf6c     2D 00 64 FD | 	ret
1bf70                 | 
1bf70                 | _fatfs_cc_sync_fs
1bf70     02 4A 05 F6 | 	mov	COUNT_, #2
1bf74     A8 00 A0 FD | 	call	#pushregs_
1bf78     09 1F 02 F6 | 	mov	local01, arg01
1bf7c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1bf80     FD 20 0A F6 | 	mov	local02, result1 wz
1bf84     D8 00 90 5D |  if_ne	jmp	#LR__3161
1bf88     0F 19 C2 FA | 	rdbyte	arg04, local01
1bf8c     03 18 0E F2 | 	cmp	arg04, #3 wz
1bf90     04 1E 06 A1 |  if_e	add	local01, #4
1bf94     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1bf98     04 1E 86 A1 |  if_e	sub	local01, #4
1bf9c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1bfa0     A0 00 90 5D |  if_ne	jmp	#LR__3160
1bfa4     34 1E 06 F1 | 	add	local01, #52
1bfa8     0F 13 02 F6 | 	mov	arg01, local01
1bfac     00 14 06 F6 | 	mov	arg02, #0
1bfb0     09 16 C6 F9 | 	decod	arg03, #9
1bfb4     98 00 A0 FD | 	call	#\builtin_bytefill_
1bfb8     0F 13 02 F6 | 	mov	arg01, local01
1bfbc     FE 13 06 F1 | 	add	arg01, #510
1bfc0     55 00 80 FF 
1bfc4     09 AB 58 FC | 	wrword	##43605, arg01
1bfc8     A9 B0 A0 FF 
1bfcc     0F A5 68 FC | 	wrlong	##1096897106, local01
1bfd0     0F 13 02 F6 | 	mov	arg01, local01
1bfd4     E4 13 06 F1 | 	add	arg01, #484
1bfd8     B9 A0 B0 FF 
1bfdc     09 E5 68 FC | 	wrlong	##1631679090, arg01
1bfe0     0F 13 02 F6 | 	mov	arg01, local01
1bfe4     E8 13 06 F1 | 	add	arg01, #488
1bfe8     20 1E 86 F1 | 	sub	local01, #32
1bfec     0F 15 02 FB | 	rdlong	arg02, local01
1bff0     09 15 62 FC | 	wrlong	arg02, arg01
1bff4     20 1E 06 F1 | 	add	local01, #32
1bff8     0F 13 02 F6 | 	mov	arg01, local01
1bffc     EC 13 06 F1 | 	add	arg01, #492
1c000     24 1E 86 F1 | 	sub	local01, #36
1c004     0F 15 02 FB | 	rdlong	arg02, local01
1c008     09 15 62 FC | 	wrlong	arg02, arg01
1c00c     10 1E 06 F1 | 	add	local01, #16
1c010     0F 17 02 FB | 	rdlong	arg03, local01
1c014     01 16 06 F1 | 	add	arg03, #1
1c018     10 1E 06 F1 | 	add	local01, #16
1c01c     0F 17 62 FC | 	wrlong	arg03, local01
1c020     2F 1E 86 F1 | 	sub	local01, #47
1c024     0F 13 C2 FA | 	rdbyte	arg01, local01
1c028     33 1E 06 F1 | 	add	local01, #51
1c02c     0F 15 02 F6 | 	mov	arg02, local01
1c030     01 18 06 F6 | 	mov	arg04, #1
1c034     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1c038     30 1E 86 F1 | 	sub	local01, #48
1c03c     0F 01 48 FC | 	wrbyte	#0, local01
1c040     04 1E 86 F1 | 	sub	local01, #4
1c044                 | LR__3160
1c044     01 1E 06 F1 | 	add	local01, #1
1c048     0F 13 C2 FA | 	rdbyte	arg01, local01
1c04c     00 14 06 F6 | 	mov	arg02, #0
1c050     00 16 06 F6 | 	mov	arg03, #0
1c054     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1c058     00 FA 0D F2 | 	cmp	result1, #0 wz
1c05c     01 20 06 56 |  if_ne	mov	local02, #1
1c060                 | LR__3161
1c060                 | ' 	}
1c060                 | ' 
1c060                 | ' 	return res;
1c060     10 FB 01 F6 | 	mov	result1, local02
1c064     A7 F0 03 F6 | 	mov	ptra, fp
1c068     B2 00 A0 FD | 	call	#popregs_
1c06c                 | _fatfs_cc_sync_fs_ret
1c06c     2D 00 64 FD | 	ret
1c070                 | 
1c070                 | _fatfs_cc_clst2sect
1c070     02 14 86 F1 | 	sub	arg02, #2
1c074     18 12 06 F1 | 	add	arg01, #24
1c078     09 01 02 FB | 	rdlong	_var01, arg01
1c07c     18 12 86 F1 | 	sub	arg01, #24
1c080     02 00 86 F1 | 	sub	_var01, #2
1c084     00 15 12 F2 | 	cmp	arg02, _var01 wc
1c088     00 FA 05 36 |  if_ae	mov	result1, #0
1c08c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1c090     0A 12 06 F1 | 	add	arg01, #10
1c094     09 01 E2 FA | 	rdword	_var01, arg01
1c098     0A 01 02 FD | 	qmul	_var01, arg02
1c09c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1c09c     22 12 06 F1 | 	add	arg01, #34
1c0a0     09 FB 01 FB | 	rdlong	result1, arg01
1c0a4     18 00 62 FD | 	getqx	_var01
1c0a8     00 FB 01 F1 | 	add	result1, _var01
1c0ac                 | _fatfs_cc_clst2sect_ret
1c0ac     2D 00 64 FD | 	ret
1c0b0                 | 
1c0b0                 | _fatfs_cc_get_fat
1c0b0     07 4A 05 F6 | 	mov	COUNT_, #7
1c0b4     A8 00 A0 FD | 	call	#pushregs_
1c0b8     0A 1F 02 F6 | 	mov	local01, arg02
1c0bc     09 21 02 FB | 	rdlong	local02, arg01
1c0c0     02 1E 16 F2 | 	cmp	local01, #2 wc
1c0c4     14 00 90 CD |  if_b	jmp	#LR__3170
1c0c8     18 20 06 F1 | 	add	local02, #24
1c0cc     10 23 02 FB | 	rdlong	local03, local02
1c0d0     18 20 86 F1 | 	sub	local02, #24
1c0d4     11 1F 12 F2 | 	cmp	local01, local03 wc
1c0d8     08 00 90 CD |  if_b	jmp	#LR__3171
1c0dc                 | LR__3170
1c0dc     01 24 06 F6 | 	mov	local04, #1
1c0e0     60 01 90 FD | 	jmp	#LR__3178
1c0e4                 | LR__3171
1c0e4     01 24 66 F6 | 	neg	local04, #1
1c0e8                 | ' 		val = 0xFFFFFFFF;
1c0e8                 | ' 
1c0e8                 | ' 		switch (fs->fs_type) {
1c0e8     10 27 C2 FA | 	rdbyte	local05, local02
1c0ec     01 26 86 F1 | 	sub	local05, #1
1c0f0     03 26 26 F3 | 	fle	local05, #3
1c0f4     30 26 62 FD | 	jmprel	local05
1c0f8                 | LR__3172
1c0f8     0C 00 90 FD | 	jmp	#LR__3173
1c0fc     B8 00 90 FD | 	jmp	#LR__3174
1c100     F8 00 90 FD | 	jmp	#LR__3175
1c104     38 01 90 FD | 	jmp	#LR__3176
1c108                 | LR__3173
1c108     0F 27 02 F6 | 	mov	local05, local01
1c10c     0F 13 02 F6 | 	mov	arg01, local01
1c110     01 12 46 F0 | 	shr	arg01, #1
1c114     09 27 02 F1 | 	add	local05, arg01
1c118     10 13 02 F6 | 	mov	arg01, local02
1c11c     13 29 02 F6 | 	mov	local06, local05
1c120     09 28 46 F0 | 	shr	local06, #9
1c124     24 20 06 F1 | 	add	local02, #36
1c128     10 15 02 FB | 	rdlong	arg02, local02
1c12c     24 20 86 F1 | 	sub	local02, #36
1c130     14 15 02 F1 | 	add	arg02, local06
1c134     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1c138     00 FA 0D F2 | 	cmp	result1, #0 wz
1c13c     04 01 90 5D |  if_ne	jmp	#LR__3177
1c140     13 29 02 F6 | 	mov	local06, local05
1c144     FF 29 06 F5 | 	and	local06, #511
1c148     34 20 06 F1 | 	add	local02, #52
1c14c     10 29 02 F1 | 	add	local06, local02
1c150     14 2B C2 FA | 	rdbyte	local07, local06
1c154     34 20 86 F1 | 	sub	local02, #52
1c158     10 13 02 F6 | 	mov	arg01, local02
1c15c     01 26 06 F1 | 	add	local05, #1
1c160     13 29 02 F6 | 	mov	local06, local05
1c164     09 28 46 F0 | 	shr	local06, #9
1c168     24 20 06 F1 | 	add	local02, #36
1c16c     10 15 02 FB | 	rdlong	arg02, local02
1c170     24 20 86 F1 | 	sub	local02, #36
1c174     14 15 02 F1 | 	add	arg02, local06
1c178     7C FD BF FD | 	call	#_fatfs_cc_move_window
1c17c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c180     C0 00 90 5D |  if_ne	jmp	#LR__3177
1c184     FF 27 06 F5 | 	and	local05, #511
1c188     34 20 06 F1 | 	add	local02, #52
1c18c     10 27 02 F1 | 	add	local05, local02
1c190     13 29 C2 FA | 	rdbyte	local06, local05
1c194     08 28 66 F0 | 	shl	local06, #8
1c198     14 2B 42 F5 | 	or	local07, local06
1c19c     01 1E CE F7 | 	test	local01, #1 wz
1c1a0     04 2A 46 50 |  if_ne	shr	local07, #4
1c1a4     15 23 02 56 |  if_ne	mov	local03, local07
1c1a8     0B 2A 46 A7 |  if_e	zerox	local07, #11
1c1ac     15 23 02 A6 |  if_e	mov	local03, local07
1c1b0     11 25 02 F6 | 	mov	local04, local03
1c1b4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1c1b4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1c1b4                 | ' 			break;
1c1b4     8C 00 90 FD | 	jmp	#LR__3177
1c1b8                 | LR__3174
1c1b8     10 13 02 F6 | 	mov	arg01, local02
1c1bc     0F 29 02 F6 | 	mov	local06, local01
1c1c0     08 28 46 F0 | 	shr	local06, #8
1c1c4     24 20 06 F1 | 	add	local02, #36
1c1c8     10 15 02 FB | 	rdlong	arg02, local02
1c1cc     24 20 86 F1 | 	sub	local02, #36
1c1d0     14 15 02 F1 | 	add	arg02, local06
1c1d4     20 FD BF FD | 	call	#_fatfs_cc_move_window
1c1d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c1dc     64 00 90 5D |  if_ne	jmp	#LR__3177
1c1e0     34 20 06 F1 | 	add	local02, #52
1c1e4     01 1E 66 F0 | 	shl	local01, #1
1c1e8     FF 1F 06 F5 | 	and	local01, #511
1c1ec     0F 21 02 F1 | 	add	local02, local01
1c1f0                 | ' {
1c1f0                 | ' 
1c1f0                 | ' 	return *((WORD*)ptr);
1c1f0     10 FB E1 FA | 	rdword	result1, local02
1c1f4     FD 24 32 F9 | 	getword	local04, result1, #0
1c1f8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1c1f8                 | ' 			break;
1c1f8     48 00 90 FD | 	jmp	#LR__3177
1c1fc                 | LR__3175
1c1fc     10 13 02 F6 | 	mov	arg01, local02
1c200     0F 29 02 F6 | 	mov	local06, local01
1c204     07 28 46 F0 | 	shr	local06, #7
1c208     24 20 06 F1 | 	add	local02, #36
1c20c     10 15 02 FB | 	rdlong	arg02, local02
1c210     24 20 86 F1 | 	sub	local02, #36
1c214     14 15 02 F1 | 	add	arg02, local06
1c218     DC FC BF FD | 	call	#_fatfs_cc_move_window
1c21c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c220     20 00 90 5D |  if_ne	jmp	#LR__3177
1c224     34 20 06 F1 | 	add	local02, #52
1c228     02 1E 66 F0 | 	shl	local01, #2
1c22c     FF 1F 06 F5 | 	and	local01, #511
1c230     0F 21 02 F1 | 	add	local02, local01
1c234                 | ' {
1c234                 | ' 
1c234                 | ' 	return *((DWORD*)ptr);
1c234     10 25 02 FB | 	rdlong	local04, local02
1c238     7C 24 06 F4 | 	bitl	local04, #124
1c23c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1c23c                 | ' 			break;
1c23c     04 00 90 FD | 	jmp	#LR__3177
1c240                 | LR__3176
1c240     01 24 06 F6 | 	mov	local04, #1
1c244                 | LR__3177
1c244                 | LR__3178
1c244                 | ' 			val = 1;
1c244                 | ' 		}
1c244                 | ' 	}
1c244                 | ' 
1c244                 | ' 	return val;
1c244     12 FB 01 F6 | 	mov	result1, local04
1c248     A7 F0 03 F6 | 	mov	ptra, fp
1c24c     B2 00 A0 FD | 	call	#popregs_
1c250                 | _fatfs_cc_get_fat_ret
1c250     2D 00 64 FD | 	ret
1c254                 | 
1c254                 | _fatfs_cc_put_fat
1c254     08 4A 05 F6 | 	mov	COUNT_, #8
1c258     A8 00 A0 FD | 	call	#pushregs_
1c25c     09 1F 02 F6 | 	mov	local01, arg01
1c260     0A 21 02 F6 | 	mov	local02, arg02
1c264     0B 23 02 F6 | 	mov	local03, arg03
1c268     02 24 06 F6 | 	mov	local04, #2
1c26c     02 20 16 F2 | 	cmp	local02, #2 wc
1c270     E0 01 90 CD |  if_b	jmp	#LR__3187
1c274     18 1E 06 F1 | 	add	local01, #24
1c278     0F 27 02 FB | 	rdlong	local05, local01
1c27c     18 1E 86 F1 | 	sub	local01, #24
1c280     13 21 12 F2 | 	cmp	local02, local05 wc
1c284     CC 01 90 3D |  if_ae	jmp	#LR__3187
1c288                 | ' 		switch (fs->fs_type) {
1c288     0F 29 C2 FA | 	rdbyte	local06, local01
1c28c     01 28 86 F1 | 	sub	local06, #1
1c290     03 28 26 F3 | 	fle	local06, #3
1c294     30 28 62 FD | 	jmprel	local06
1c298                 | LR__3180
1c298     0C 00 90 FD | 	jmp	#LR__3181
1c29c     F8 00 90 FD | 	jmp	#LR__3184
1c2a0     40 01 90 FD | 	jmp	#LR__3185
1c2a4     AC 01 90 FD | 	jmp	#LR__3186
1c2a8                 | LR__3181
1c2a8     10 2B 02 F6 | 	mov	local07, local02
1c2ac     10 27 02 F6 | 	mov	local05, local02
1c2b0     01 26 46 F0 | 	shr	local05, #1
1c2b4     13 2B 02 F1 | 	add	local07, local05
1c2b8     0F 13 02 F6 | 	mov	arg01, local01
1c2bc     15 29 02 F6 | 	mov	local06, local07
1c2c0     09 28 46 F0 | 	shr	local06, #9
1c2c4     24 1E 06 F1 | 	add	local01, #36
1c2c8     0F 15 02 FB | 	rdlong	arg02, local01
1c2cc     24 1E 86 F1 | 	sub	local01, #36
1c2d0     14 15 02 F1 | 	add	arg02, local06
1c2d4     20 FC BF FD | 	call	#_fatfs_cc_move_window
1c2d8     FD 24 0A F6 | 	mov	local04, result1 wz
1c2dc     74 01 90 5D |  if_ne	jmp	#LR__3186
1c2e0     34 1E 06 F1 | 	add	local01, #52
1c2e4     0F 2D 02 F6 | 	mov	local08, local01
1c2e8     15 27 02 F6 | 	mov	local05, local07
1c2ec     FF 27 06 F5 | 	and	local05, #511
1c2f0     13 2D 02 F1 | 	add	local08, local05
1c2f4     01 20 CE F7 | 	test	local02, #1 wz
1c2f8     34 1E 86 F1 | 	sub	local01, #52
1c2fc     01 2A 06 F1 | 	add	local07, #1
1c300     18 00 90 AD |  if_e	jmp	#LR__3182
1c304     16 27 C2 FA | 	rdbyte	local05, local08
1c308     13 27 42 F8 | 	getnib	local05, local05, #0
1c30c     11 29 E2 F8 | 	getbyte	local06, local03, #0
1c310     04 28 66 F0 | 	shl	local06, #4
1c314     14 27 42 F5 | 	or	local05, local06
1c318     04 00 90 FD | 	jmp	#LR__3183
1c31c                 | LR__3182
1c31c     11 27 02 F6 | 	mov	local05, local03
1c320                 | LR__3183
1c320     16 27 42 FC | 	wrbyte	local05, local08
1c324     03 1E 06 F1 | 	add	local01, #3
1c328     0F 03 48 FC | 	wrbyte	#1, local01
1c32c     03 1E 86 F1 | 	sub	local01, #3
1c330     0F 13 02 F6 | 	mov	arg01, local01
1c334     15 2D 02 F6 | 	mov	local08, local07
1c338     09 2C 46 F0 | 	shr	local08, #9
1c33c     24 1E 06 F1 | 	add	local01, #36
1c340     0F 15 02 FB | 	rdlong	arg02, local01
1c344     24 1E 86 F1 | 	sub	local01, #36
1c348     16 15 02 F1 | 	add	arg02, local08
1c34c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1c350     FD 24 0A F6 | 	mov	local04, result1 wz
1c354     FC 00 90 5D |  if_ne	jmp	#LR__3186
1c358     34 1E 06 F1 | 	add	local01, #52
1c35c     0F 2D 02 F6 | 	mov	local08, local01
1c360     FF 2B 06 F5 | 	and	local07, #511
1c364     15 2D 02 F1 | 	add	local08, local07
1c368     01 20 CE F7 | 	test	local02, #1 wz
1c36c     04 22 46 50 |  if_ne	shr	local03, #4
1c370     11 27 02 56 |  if_ne	mov	local05, local03
1c374     16 27 C2 AA |  if_e	rdbyte	local05, local08
1c378     F0 26 06 A5 |  if_e	and	local05, #240
1c37c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1c380     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1c384     11 27 42 A5 |  if_e	or	local05, local03
1c388     16 27 42 FC | 	wrbyte	local05, local08
1c38c     31 1E 86 F1 | 	sub	local01, #49
1c390     0F 03 48 FC | 	wrbyte	#1, local01
1c394                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1c394                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1c394                 | ' 			fs->wflag = 1;
1c394                 | ' 			break;
1c394     BC 00 90 FD | 	jmp	#LR__3186
1c398                 | LR__3184
1c398     0F 13 02 F6 | 	mov	arg01, local01
1c39c     10 2D 02 F6 | 	mov	local08, local02
1c3a0     08 2C 46 F0 | 	shr	local08, #8
1c3a4     24 1E 06 F1 | 	add	local01, #36
1c3a8     0F 15 02 FB | 	rdlong	arg02, local01
1c3ac     24 1E 86 F1 | 	sub	local01, #36
1c3b0     16 15 02 F1 | 	add	arg02, local08
1c3b4     40 FB BF FD | 	call	#_fatfs_cc_move_window
1c3b8     FD 24 0A F6 | 	mov	local04, result1 wz
1c3bc     94 00 90 5D |  if_ne	jmp	#LR__3186
1c3c0     34 1E 06 F1 | 	add	local01, #52
1c3c4     0F 13 02 F6 | 	mov	arg01, local01
1c3c8     01 20 66 F0 | 	shl	local02, #1
1c3cc     FF 21 06 F5 | 	and	local02, #511
1c3d0     10 13 02 F1 | 	add	arg01, local02
1c3d4     09 23 52 FC | 	wrword	local03, arg01
1c3d8     31 1E 86 F1 | 	sub	local01, #49
1c3dc     0F 03 48 FC | 	wrbyte	#1, local01
1c3e0                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1c3e0                 | ' 			fs->wflag = 1;
1c3e0                 | ' 			break;
1c3e0     70 00 90 FD | 	jmp	#LR__3186
1c3e4                 | LR__3185
1c3e4     0F 13 02 F6 | 	mov	arg01, local01
1c3e8     10 2D 02 F6 | 	mov	local08, local02
1c3ec     07 2C 46 F0 | 	shr	local08, #7
1c3f0     24 1E 06 F1 | 	add	local01, #36
1c3f4     0F 15 02 FB | 	rdlong	arg02, local01
1c3f8     24 1E 86 F1 | 	sub	local01, #36
1c3fc     16 15 02 F1 | 	add	arg02, local08
1c400     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1c404     FD 24 0A F6 | 	mov	local04, result1 wz
1c408     48 00 90 5D |  if_ne	jmp	#LR__3186
1c40c     7C 22 06 F4 | 	bitl	local03, #124
1c410     34 1E 06 F1 | 	add	local01, #52
1c414     10 2D 02 F6 | 	mov	local08, local02
1c418     02 2C 66 F0 | 	shl	local08, #2
1c41c     FF 2D 06 F5 | 	and	local08, #511
1c420     0F 13 02 F6 | 	mov	arg01, local01
1c424     16 13 02 F1 | 	add	arg01, local08
1c428                 | ' {
1c428                 | ' 
1c428                 | ' 	return *((DWORD*)ptr);
1c428     09 2D 02 FB | 	rdlong	local08, arg01
1c42c     00 00 78 FF 
1c430     00 2C 06 F5 | 	and	local08, ##-268435456
1c434     16 23 42 F5 | 	or	local03, local08
1c438     0F 13 02 F6 | 	mov	arg01, local01
1c43c     02 20 66 F0 | 	shl	local02, #2
1c440     FF 21 06 F5 | 	and	local02, #511
1c444     10 13 02 F1 | 	add	arg01, local02
1c448     09 23 62 FC | 	wrlong	local03, arg01
1c44c     31 1E 86 F1 | 	sub	local01, #49
1c450     0F 03 48 FC | 	wrbyte	#1, local01
1c454                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1c454                 | ' 			}
1c454                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1c454                 | ' 			fs->wflag = 1;
1c454                 | ' 			break;
1c454                 | LR__3186
1c454                 | LR__3187
1c454                 | ' 		}
1c454                 | ' 	}
1c454                 | ' 	return res;
1c454     12 FB 01 F6 | 	mov	result1, local04
1c458     A7 F0 03 F6 | 	mov	ptra, fp
1c45c     B2 00 A0 FD | 	call	#popregs_
1c460                 | _fatfs_cc_put_fat_ret
1c460     2D 00 64 FD | 	ret
1c464                 | 
1c464                 | _fatfs_cc_remove_chain
1c464     05 4A 05 F6 | 	mov	COUNT_, #5
1c468     A8 00 A0 FD | 	call	#pushregs_
1c46c     09 1F 02 F6 | 	mov	local01, arg01
1c470     0A 21 02 F6 | 	mov	local02, arg02
1c474     0B 23 02 F6 | 	mov	local03, arg03
1c478     0F 25 02 FB | 	rdlong	local04, local01
1c47c     02 20 16 F2 | 	cmp	local02, #2 wc
1c480     14 00 90 CD |  if_b	jmp	#LR__3190
1c484     18 24 06 F1 | 	add	local04, #24
1c488     12 FB 01 FB | 	rdlong	result1, local04
1c48c     18 24 86 F1 | 	sub	local04, #24
1c490     FD 20 12 F2 | 	cmp	local02, result1 wc
1c494     08 00 90 CD |  if_b	jmp	#LR__3191
1c498                 | LR__3190
1c498     02 FA 05 F6 | 	mov	result1, #2
1c49c     CC 00 90 FD | 	jmp	#LR__3196
1c4a0                 | LR__3191
1c4a0     00 22 0E F2 | 	cmp	local03, #0 wz
1c4a4     18 00 90 AD |  if_e	jmp	#LR__3192
1c4a8     11 15 02 F6 | 	mov	arg02, local03
1c4ac     12 13 02 F6 | 	mov	arg01, local04
1c4b0     01 16 66 F6 | 	neg	arg03, #1
1c4b4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1c4b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4bc     AC 00 90 5D |  if_ne	jmp	#LR__3196
1c4c0                 | LR__3192
1c4c0                 | ' 	}
1c4c0                 | ' 
1c4c0                 | ' 
1c4c0                 | ' 	do {
1c4c0                 | LR__3193
1c4c0     10 15 02 F6 | 	mov	arg02, local02
1c4c4     0F 13 02 F6 | 	mov	arg01, local01
1c4c8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1c4cc     FD 26 0A F6 | 	mov	local05, result1 wz
1c4d0     94 00 90 AD |  if_e	jmp	#LR__3195
1c4d4     01 26 0E F2 | 	cmp	local05, #1 wz
1c4d8     02 FA 05 A6 |  if_e	mov	result1, #2
1c4dc     8C 00 90 AD |  if_e	jmp	#LR__3196
1c4e0     FF FF 7F FF 
1c4e4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1c4e8     01 FA 05 A6 |  if_e	mov	result1, #1
1c4ec     7C 00 90 AD |  if_e	jmp	#LR__3196
1c4f0     10 15 02 F6 | 	mov	arg02, local02
1c4f4     12 13 02 F6 | 	mov	arg01, local04
1c4f8     00 16 06 F6 | 	mov	arg03, #0
1c4fc     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1c500     FD 22 0A F6 | 	mov	local03, result1 wz
1c504     11 FB 01 56 |  if_ne	mov	result1, local03
1c508     60 00 90 5D |  if_ne	jmp	#LR__3196
1c50c     18 24 06 F1 | 	add	local04, #24
1c510     12 23 02 FB | 	rdlong	local03, local04
1c514     02 22 86 F1 | 	sub	local03, #2
1c518     04 24 86 F1 | 	sub	local04, #4
1c51c     12 21 02 FB | 	rdlong	local02, local04
1c520     14 24 86 F1 | 	sub	local04, #20
1c524     11 21 12 F2 | 	cmp	local02, local03 wc
1c528     24 00 90 3D |  if_ae	jmp	#LR__3194
1c52c     14 24 06 F1 | 	add	local04, #20
1c530     12 23 02 FB | 	rdlong	local03, local04
1c534     01 22 06 F1 | 	add	local03, #1
1c538     12 23 62 FC | 	wrlong	local03, local04
1c53c     10 24 86 F1 | 	sub	local04, #16
1c540     12 23 C2 FA | 	rdbyte	local03, local04
1c544     01 22 46 F5 | 	or	local03, #1
1c548     12 23 42 FC | 	wrbyte	local03, local04
1c54c     04 24 86 F1 | 	sub	local04, #4
1c550                 | LR__3194
1c550     13 21 02 F6 | 	mov	local02, local05
1c554     18 24 06 F1 | 	add	local04, #24
1c558     12 27 02 FB | 	rdlong	local05, local04
1c55c     18 24 86 F1 | 	sub	local04, #24
1c560     13 21 12 F2 | 	cmp	local02, local05 wc
1c564     58 FF 9F CD |  if_b	jmp	#LR__3193
1c568                 | LR__3195
1c568                 | ' #line 1500 "ff.c"
1c568                 | ' 	return FR_OK;
1c568     00 FA 05 F6 | 	mov	result1, #0
1c56c                 | LR__3196
1c56c     A7 F0 03 F6 | 	mov	ptra, fp
1c570     B2 00 A0 FD | 	call	#popregs_
1c574                 | _fatfs_cc_remove_chain_ret
1c574     2D 00 64 FD | 	ret
1c578                 | 
1c578                 | _fatfs_cc_create_chain
1c578     09 4A 05 F6 | 	mov	COUNT_, #9
1c57c     A8 00 A0 FD | 	call	#pushregs_
1c580     09 1F 02 F6 | 	mov	local01, arg01
1c584     0A 21 0A F6 | 	mov	local02, arg02 wz
1c588     0F 23 02 FB | 	rdlong	local03, local01
1c58c     28 00 90 5D |  if_ne	jmp	#LR__3200
1c590     10 22 06 F1 | 	add	local03, #16
1c594     11 25 0A FB | 	rdlong	local04, local03 wz
1c598     10 22 86 F1 | 	sub	local03, #16
1c59c     18 22 06 51 |  if_ne	add	local03, #24
1c5a0     11 27 02 5B |  if_ne	rdlong	local05, local03
1c5a4     18 22 86 51 |  if_ne	sub	local03, #24
1c5a8     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1c5ac     50 00 90 4D |  if_c_and_nz	jmp	#LR__3201
1c5b0     01 24 06 F6 | 	mov	local04, #1
1c5b4     48 00 90 FD | 	jmp	#LR__3201
1c5b8                 | LR__3200
1c5b8     10 15 02 F6 | 	mov	arg02, local02
1c5bc     0F 13 02 F6 | 	mov	arg01, local01
1c5c0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1c5c4     FD 24 02 F6 | 	mov	local04, result1
1c5c8     02 24 16 F2 | 	cmp	local04, #2 wc
1c5cc     01 FA 05 C6 |  if_b	mov	result1, #1
1c5d0     BC 01 90 CD |  if_b	jmp	#LR__3211
1c5d4     FF FF 7F FF 
1c5d8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1c5dc     12 FB 01 A6 |  if_e	mov	result1, local04
1c5e0     AC 01 90 AD |  if_e	jmp	#LR__3211
1c5e4     18 22 06 F1 | 	add	local03, #24
1c5e8     11 27 02 FB | 	rdlong	local05, local03
1c5ec     18 22 86 F1 | 	sub	local03, #24
1c5f0     13 25 12 F2 | 	cmp	local04, local05 wc
1c5f4     12 FB 01 C6 |  if_b	mov	result1, local04
1c5f8     94 01 90 CD |  if_b	jmp	#LR__3211
1c5fc     10 25 02 F6 | 	mov	local04, local02
1c600                 | LR__3201
1c600     14 22 06 F1 | 	add	local03, #20
1c604     11 27 0A FB | 	rdlong	local05, local03 wz
1c608     14 22 86 F1 | 	sub	local03, #20
1c60c     00 FA 05 A6 |  if_e	mov	result1, #0
1c610     7C 01 90 AD |  if_e	jmp	#LR__3211
1c614     00 28 06 F6 | 	mov	local06, #0
1c618     10 25 0A F2 | 	cmp	local04, local02 wz
1c61c     74 00 90 5D |  if_ne	jmp	#LR__3204
1c620     12 29 02 F6 | 	mov	local06, local04
1c624     01 28 06 F1 | 	add	local06, #1
1c628     18 22 06 F1 | 	add	local03, #24
1c62c     11 27 02 FB | 	rdlong	local05, local03
1c630     18 22 86 F1 | 	sub	local03, #24
1c634     13 29 12 F2 | 	cmp	local06, local05 wc
1c638     02 28 06 36 |  if_ae	mov	local06, #2
1c63c     14 15 02 F6 | 	mov	arg02, local06
1c640     0F 13 02 F6 | 	mov	arg01, local01
1c644     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1c648     FD 26 02 F6 | 	mov	local05, result1
1c64c     01 26 0E F2 | 	cmp	local05, #1 wz
1c650     FF FF 7F 5F 
1c654     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1c658     13 FB 01 A6 |  if_e	mov	result1, local05
1c65c     30 01 90 AD |  if_e	jmp	#LR__3211
1c660     00 26 0E F2 | 	cmp	local05, #0 wz
1c664     2C 00 90 AD |  if_e	jmp	#LR__3203
1c668     10 22 06 F1 | 	add	local03, #16
1c66c     11 2B 02 FB | 	rdlong	local07, local03
1c670     10 22 86 F1 | 	sub	local03, #16
1c674     02 2A 16 F2 | 	cmp	local07, #2 wc
1c678     14 00 90 CD |  if_b	jmp	#LR__3202
1c67c     18 22 06 F1 | 	add	local03, #24
1c680     11 27 02 FB | 	rdlong	local05, local03
1c684     18 22 86 F1 | 	sub	local03, #24
1c688     13 2B 12 F2 | 	cmp	local07, local05 wc
1c68c     15 25 02 C6 |  if_b	mov	local04, local07
1c690                 | LR__3202
1c690     00 28 06 F6 | 	mov	local06, #0
1c694                 | LR__3203
1c694                 | LR__3204
1c694     00 28 0E F2 | 	cmp	local06, #0 wz
1c698     60 00 90 5D |  if_ne	jmp	#LR__3207
1c69c     12 29 02 F6 | 	mov	local06, local04
1c6a0                 | ' 			ncl = scl;
1c6a0                 | ' 			for (;;) {
1c6a0                 | LR__3205
1c6a0     01 28 06 F1 | 	add	local06, #1
1c6a4     18 22 06 F1 | 	add	local03, #24
1c6a8     11 27 02 FB | 	rdlong	local05, local03
1c6ac     18 22 86 F1 | 	sub	local03, #24
1c6b0     13 29 12 F2 | 	cmp	local06, local05 wc
1c6b4     02 28 06 36 |  if_ae	mov	local06, #2
1c6b8     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1c6bc     00 FA 05 16 |  if_a	mov	result1, #0
1c6c0     CC 00 90 1D |  if_a	jmp	#LR__3211
1c6c4     14 15 02 F6 | 	mov	arg02, local06
1c6c8     0F 13 02 F6 | 	mov	arg01, local01
1c6cc     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1c6d0     FD 2A 0A F6 | 	mov	local07, result1 wz
1c6d4     24 00 90 AD |  if_e	jmp	#LR__3206
1c6d8     01 2A 0E F2 | 	cmp	local07, #1 wz
1c6dc     FF FF 7F 5F 
1c6e0     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1c6e4     15 FB 01 A6 |  if_e	mov	result1, local07
1c6e8     A4 00 90 AD |  if_e	jmp	#LR__3211
1c6ec     12 29 0A F2 | 	cmp	local06, local04 wz
1c6f0     00 FA 05 A6 |  if_e	mov	result1, #0
1c6f4     98 00 90 AD |  if_e	jmp	#LR__3211
1c6f8     A4 FF 9F FD | 	jmp	#LR__3205
1c6fc                 | LR__3206
1c6fc                 | LR__3207
1c6fc     11 13 02 F6 | 	mov	arg01, local03
1c700     14 15 02 F6 | 	mov	arg02, local06
1c704     01 16 66 F6 | 	neg	arg03, #1
1c708     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1c70c     FD 2C 0A F6 | 	mov	local08, result1 wz
1c710     1C 00 90 5D |  if_ne	jmp	#LR__3208
1c714     00 20 0E F2 | 	cmp	local02, #0 wz
1c718     14 00 90 AD |  if_e	jmp	#LR__3208
1c71c     11 13 02 F6 | 	mov	arg01, local03
1c720     10 15 02 F6 | 	mov	arg02, local02
1c724     14 17 02 F6 | 	mov	arg03, local06
1c728     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1c72c     FD 2C 02 F6 | 	mov	local08, result1
1c730                 | LR__3208
1c730     00 2C 0E F2 | 	cmp	local08, #0 wz
1c734     4C 00 90 5D |  if_ne	jmp	#LR__3209
1c738     10 22 06 F1 | 	add	local03, #16
1c73c     11 29 62 FC | 	wrlong	local06, local03
1c740     08 22 06 F1 | 	add	local03, #8
1c744     11 27 02 FB | 	rdlong	local05, local03
1c748     02 26 86 F1 | 	sub	local05, #2
1c74c     04 22 86 F1 | 	sub	local03, #4
1c750     11 2F 02 FB | 	rdlong	local09, local03
1c754     14 22 86 F1 | 	sub	local03, #20
1c758     13 2F 1A F2 | 	cmp	local09, local05 wcz
1c75c     14 22 06 E1 |  if_be	add	local03, #20
1c760     11 2F 02 EB |  if_be	rdlong	local09, local03
1c764     01 2E 86 E1 |  if_be	sub	local09, #1
1c768     11 2F 62 EC |  if_be	wrlong	local09, local03
1c76c     14 22 86 E1 |  if_be	sub	local03, #20
1c770     04 22 06 F1 | 	add	local03, #4
1c774     11 27 C2 FA | 	rdbyte	local05, local03
1c778     01 26 46 F5 | 	or	local05, #1
1c77c     11 27 42 FC | 	wrbyte	local05, local03
1c780     08 00 90 FD | 	jmp	#LR__3210
1c784                 | LR__3209
1c784     01 2C 0E F2 | 	cmp	local08, #1 wz
1c788     01 28 C6 F6 | 	negz	local06, #1
1c78c                 | LR__3210
1c78c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1c78c                 | ' 	}
1c78c                 | ' 
1c78c                 | ' 	return ncl;
1c78c     14 FB 01 F6 | 	mov	result1, local06
1c790                 | LR__3211
1c790     A7 F0 03 F6 | 	mov	ptra, fp
1c794     B2 00 A0 FD | 	call	#popregs_
1c798                 | _fatfs_cc_create_chain_ret
1c798     2D 00 64 FD | 	ret
1c79c                 | 
1c79c                 | _fatfs_cc_dir_clear
1c79c     06 4A 05 F6 | 	mov	COUNT_, #6
1c7a0     A8 00 A0 FD | 	call	#pushregs_
1c7a4     09 1F 02 F6 | 	mov	local01, arg01
1c7a8     0A 21 02 F6 | 	mov	local02, arg02
1c7ac     0F 13 02 F6 | 	mov	arg01, local01
1c7b0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1c7b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7b8     01 FA 05 56 |  if_ne	mov	result1, #1
1c7bc     90 00 90 5D |  if_ne	jmp	#LR__3222
1c7c0     0F 13 02 F6 | 	mov	arg01, local01
1c7c4     10 15 02 F6 | 	mov	arg02, local02
1c7c8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1c7cc     FD 22 02 F6 | 	mov	local03, result1
1c7d0     30 1E 06 F1 | 	add	local01, #48
1c7d4     0F 23 62 FC | 	wrlong	local03, local01
1c7d8     04 1E 06 F1 | 	add	local01, #4
1c7dc     0F 13 02 F6 | 	mov	arg01, local01
1c7e0     00 14 06 F6 | 	mov	arg02, #0
1c7e4     09 16 C6 F9 | 	decod	arg03, #9
1c7e8     98 00 A0 FD | 	call	#\builtin_bytefill_
1c7ec     0F 25 02 F6 | 	mov	local04, local01
1c7f0                 | ' #line 1667 "ff.c"
1c7f0                 | ' 	{
1c7f0                 | ' 		ibuf = fs->win; szb = 1;
1c7f0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1c7f0     00 26 06 F6 | 	mov	local05, #0
1c7f4     34 1E 86 F1 | 	sub	local01, #52
1c7f8                 | LR__3220
1c7f8     0A 1E 06 F1 | 	add	local01, #10
1c7fc     0F 29 E2 FA | 	rdword	local06, local01
1c800     0A 1E 86 F1 | 	sub	local01, #10
1c804     14 27 12 F2 | 	cmp	local05, local06 wc
1c808     2C 00 90 3D |  if_ae	jmp	#LR__3221
1c80c     01 1E 06 F1 | 	add	local01, #1
1c810     0F 13 C2 FA | 	rdbyte	arg01, local01
1c814     01 1E 86 F1 | 	sub	local01, #1
1c818     12 15 02 F6 | 	mov	arg02, local04
1c81c     11 17 02 F6 | 	mov	arg03, local03
1c820     13 17 02 F1 | 	add	arg03, local05
1c824     01 18 06 F6 | 	mov	arg04, #1
1c828     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1c82c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c830     01 26 06 A1 |  if_e	add	local05, #1
1c834     C0 FF 9F AD |  if_e	jmp	#LR__3220
1c838                 | LR__3221
1c838                 | ' 	}
1c838                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1c838     0A 1E 06 F1 | 	add	local01, #10
1c83c     0F 25 E2 FA | 	rdword	local04, local01
1c840     12 27 0A F2 | 	cmp	local05, local04 wz
1c844     00 28 06 A6 |  if_e	mov	local06, #0
1c848     01 28 06 56 |  if_ne	mov	local06, #1
1c84c     14 FB 01 F6 | 	mov	result1, local06
1c850                 | LR__3222
1c850     A7 F0 03 F6 | 	mov	ptra, fp
1c854     B2 00 A0 FD | 	call	#popregs_
1c858                 | _fatfs_cc_dir_clear_ret
1c858     2D 00 64 FD | 	ret
1c85c                 | 
1c85c                 | _fatfs_cc_dir_sdi
1c85c     06 4A 05 F6 | 	mov	COUNT_, #6
1c860     A8 00 A0 FD | 	call	#pushregs_
1c864     09 1F 02 F6 | 	mov	local01, arg01
1c868     0A 21 02 F6 | 	mov	local02, arg02
1c86c     0F 23 02 FB | 	rdlong	local03, local01
1c870     00 10 00 FF 
1c874     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1c878     1F 20 CE C7 |  if_b	test	local02, #31 wz
1c87c                 | ' 		return FR_INT_ERR;
1c87c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1c880     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3236
1c884     10 1E 06 F1 | 	add	local01, #16
1c888     0F 21 62 FC | 	wrlong	local02, local01
1c88c     08 1E 86 F1 | 	sub	local01, #8
1c890     0F 25 0A FB | 	rdlong	local04, local01 wz
1c894     08 1E 86 F1 | 	sub	local01, #8
1c898     11 27 C2 AA |  if_e	rdbyte	local05, local03
1c89c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1c8a0     28 22 06 21 |  if_nc_and_z	add	local03, #40
1c8a4     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1c8a8     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1c8ac     00 24 0E F2 | 	cmp	local04, #0 wz
1c8b0     3C 00 90 5D |  if_ne	jmp	#LR__3230
1c8b4     10 27 02 F6 | 	mov	local05, local02
1c8b8     05 26 46 F0 | 	shr	local05, #5
1c8bc     08 22 06 F1 | 	add	local03, #8
1c8c0     11 15 E2 FA | 	rdword	arg02, local03
1c8c4     08 22 86 F1 | 	sub	local03, #8
1c8c8     0A 27 12 F2 | 	cmp	local05, arg02 wc
1c8cc     02 FA 05 36 |  if_ae	mov	result1, #2
1c8d0     E4 00 90 3D |  if_ae	jmp	#LR__3236
1c8d4     28 22 06 F1 | 	add	local03, #40
1c8d8     11 27 02 FB | 	rdlong	local05, local03
1c8dc     28 22 86 F1 | 	sub	local03, #40
1c8e0     18 1E 06 F1 | 	add	local01, #24
1c8e4     0F 27 62 FC | 	wrlong	local05, local01
1c8e8     18 1E 86 F1 | 	sub	local01, #24
1c8ec     7C 00 90 FD | 	jmp	#LR__3235
1c8f0                 | LR__3230
1c8f0     0A 22 06 F1 | 	add	local03, #10
1c8f4     11 29 E2 FA | 	rdword	local06, local03
1c8f8     0A 22 86 F1 | 	sub	local03, #10
1c8fc     09 28 66 F0 | 	shl	local06, #9
1c900                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1c900                 | ' 		while (ofs >= csz) {
1c900                 | LR__3231
1c900     14 21 12 F2 | 	cmp	local02, local06 wc
1c904     4C 00 90 CD |  if_b	jmp	#LR__3234
1c908     0F 13 02 F6 | 	mov	arg01, local01
1c90c     12 15 02 F6 | 	mov	arg02, local04
1c910     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1c914     FD 24 02 F6 | 	mov	local04, result1
1c918     FF FF 7F FF 
1c91c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1c920     01 FA 05 A6 |  if_e	mov	result1, #1
1c924     90 00 90 AD |  if_e	jmp	#LR__3236
1c928     02 24 16 F2 | 	cmp	local04, #2 wc
1c92c     14 00 90 CD |  if_b	jmp	#LR__3232
1c930     18 22 06 F1 | 	add	local03, #24
1c934     11 27 02 FB | 	rdlong	local05, local03
1c938     18 22 86 F1 | 	sub	local03, #24
1c93c     13 25 12 F2 | 	cmp	local04, local05 wc
1c940     08 00 90 CD |  if_b	jmp	#LR__3233
1c944                 | LR__3232
1c944     02 FA 05 F6 | 	mov	result1, #2
1c948     6C 00 90 FD | 	jmp	#LR__3236
1c94c                 | LR__3233
1c94c     14 21 82 F1 | 	sub	local02, local06
1c950     AC FF 9F FD | 	jmp	#LR__3231
1c954                 | LR__3234
1c954     11 13 02 F6 | 	mov	arg01, local03
1c958     12 15 02 F6 | 	mov	arg02, local04
1c95c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1c960     18 1E 06 F1 | 	add	local01, #24
1c964     0F FB 61 FC | 	wrlong	result1, local01
1c968     18 1E 86 F1 | 	sub	local01, #24
1c96c                 | LR__3235
1c96c     14 1E 06 F1 | 	add	local01, #20
1c970     0F 25 62 FC | 	wrlong	local04, local01
1c974     04 1E 06 F1 | 	add	local01, #4
1c978     0F 27 0A FB | 	rdlong	local05, local01 wz
1c97c     18 1E 86 F1 | 	sub	local01, #24
1c980     02 FA 05 A6 |  if_e	mov	result1, #2
1c984     30 00 90 AD |  if_e	jmp	#LR__3236
1c988     10 29 02 F6 | 	mov	local06, local02
1c98c     09 28 46 F0 | 	shr	local06, #9
1c990     18 1E 06 F1 | 	add	local01, #24
1c994     0F 27 02 FB | 	rdlong	local05, local01
1c998     14 27 02 F1 | 	add	local05, local06
1c99c     0F 27 62 FC | 	wrlong	local05, local01
1c9a0     34 22 06 F1 | 	add	local03, #52
1c9a4     FF 21 06 F5 | 	and	local02, #511
1c9a8     10 23 02 F1 | 	add	local03, local02
1c9ac     04 1E 06 F1 | 	add	local01, #4
1c9b0     0F 23 62 FC | 	wrlong	local03, local01
1c9b4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1c9b4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1c9b4                 | ' 
1c9b4                 | ' 	return FR_OK;
1c9b4     00 FA 05 F6 | 	mov	result1, #0
1c9b8                 | LR__3236
1c9b8     A7 F0 03 F6 | 	mov	ptra, fp
1c9bc     B2 00 A0 FD | 	call	#popregs_
1c9c0                 | _fatfs_cc_dir_sdi_ret
1c9c0     2D 00 64 FD | 	ret
1c9c4                 | 
1c9c4                 | _fatfs_cc_dir_next
1c9c4     05 4A 05 F6 | 	mov	COUNT_, #5
1c9c8     A8 00 A0 FD | 	call	#pushregs_
1c9cc     09 1F 02 F6 | 	mov	local01, arg01
1c9d0     0A 21 02 F6 | 	mov	local02, arg02
1c9d4     0F 23 02 FB | 	rdlong	local03, local01
1c9d8     10 1E 06 F1 | 	add	local01, #16
1c9dc     0F 25 02 FB | 	rdlong	local04, local01
1c9e0     10 1E 86 F1 | 	sub	local01, #16
1c9e4     20 24 06 F1 | 	add	local04, #32
1c9e8     00 10 00 FF 
1c9ec     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1c9f0     18 1E 06 31 |  if_ae	add	local01, #24
1c9f4     0F 01 68 3C |  if_ae	wrlong	#0, local01
1c9f8     18 1E 86 31 |  if_ae	sub	local01, #24
1c9fc     18 1E 06 F1 | 	add	local01, #24
1ca00     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ca04     18 1E 86 F1 | 	sub	local01, #24
1ca08     04 FA 05 A6 |  if_e	mov	result1, #4
1ca0c     64 01 90 AD |  if_e	jmp	#LR__3245
1ca10     FF 25 CE F7 | 	test	local04, #511 wz
1ca14     3C 01 90 5D |  if_ne	jmp	#LR__3244
1ca18     18 1E 06 F1 | 	add	local01, #24
1ca1c     0F 15 02 FB | 	rdlong	arg02, local01
1ca20     01 14 06 F1 | 	add	arg02, #1
1ca24     0F 15 62 FC | 	wrlong	arg02, local01
1ca28     04 1E 86 F1 | 	sub	local01, #4
1ca2c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ca30     14 1E 86 F1 | 	sub	local01, #20
1ca34     2C 00 90 5D |  if_ne	jmp	#LR__3240
1ca38     12 15 02 F6 | 	mov	arg02, local04
1ca3c     05 14 46 F0 | 	shr	arg02, #5
1ca40     08 22 06 F1 | 	add	local03, #8
1ca44     11 21 E2 FA | 	rdword	local02, local03
1ca48     08 22 86 F1 | 	sub	local03, #8
1ca4c     10 15 12 F2 | 	cmp	arg02, local02 wc
1ca50     18 1E 06 31 |  if_ae	add	local01, #24
1ca54     0F 01 68 3C |  if_ae	wrlong	#0, local01
1ca58                 | ' 				dp->sect = 0; return FR_NO_FILE;
1ca58     04 FA 05 36 |  if_ae	mov	result1, #4
1ca5c     14 01 90 3D |  if_ae	jmp	#LR__3245
1ca60     F0 00 90 FD | 	jmp	#LR__3243
1ca64                 | LR__3240
1ca64     12 13 02 F6 | 	mov	arg01, local04
1ca68     09 12 46 F0 | 	shr	arg01, #9
1ca6c     0A 22 06 F1 | 	add	local03, #10
1ca70     11 15 E2 FA | 	rdword	arg02, local03
1ca74     0A 22 86 F1 | 	sub	local03, #10
1ca78     01 14 86 F1 | 	sub	arg02, #1
1ca7c     0A 13 CA F7 | 	test	arg01, arg02 wz
1ca80     D0 00 90 5D |  if_ne	jmp	#LR__3242
1ca84     0F 13 02 F6 | 	mov	arg01, local01
1ca88     14 1E 06 F1 | 	add	local01, #20
1ca8c     0F 15 02 FB | 	rdlong	arg02, local01
1ca90     14 1E 86 F1 | 	sub	local01, #20
1ca94     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1ca98     FD 26 02 F6 | 	mov	local05, result1
1ca9c     02 26 16 F2 | 	cmp	local05, #2 wc
1caa0     02 FA 05 C6 |  if_b	mov	result1, #2
1caa4     CC 00 90 CD |  if_b	jmp	#LR__3245
1caa8     FF FF 7F FF 
1caac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1cab0     01 FA 05 A6 |  if_e	mov	result1, #1
1cab4     BC 00 90 AD |  if_e	jmp	#LR__3245
1cab8     18 22 06 F1 | 	add	local03, #24
1cabc     11 15 02 FB | 	rdlong	arg02, local03
1cac0     18 22 86 F1 | 	sub	local03, #24
1cac4     0A 27 12 F2 | 	cmp	local05, arg02 wc
1cac8     68 00 90 CD |  if_b	jmp	#LR__3241
1cacc     00 20 0E F2 | 	cmp	local02, #0 wz
1cad0     18 1E 06 A1 |  if_e	add	local01, #24
1cad4     0F 01 68 AC |  if_e	wrlong	#0, local01
1cad8                 | ' 						dp->sect = 0; return FR_NO_FILE;
1cad8     04 FA 05 A6 |  if_e	mov	result1, #4
1cadc     94 00 90 AD |  if_e	jmp	#LR__3245
1cae0     0F 13 02 F6 | 	mov	arg01, local01
1cae4     14 1E 06 F1 | 	add	local01, #20
1cae8     0F 15 02 FB | 	rdlong	arg02, local01
1caec     14 1E 86 F1 | 	sub	local01, #20
1caf0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1caf4     FD 26 0A F6 | 	mov	local05, result1 wz
1caf8     07 FA 05 A6 |  if_e	mov	result1, #7
1cafc     74 00 90 AD |  if_e	jmp	#LR__3245
1cb00     01 26 0E F2 | 	cmp	local05, #1 wz
1cb04     02 FA 05 A6 |  if_e	mov	result1, #2
1cb08     68 00 90 AD |  if_e	jmp	#LR__3245
1cb0c     FF FF 7F FF 
1cb10     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1cb14     01 FA 05 A6 |  if_e	mov	result1, #1
1cb18     58 00 90 AD |  if_e	jmp	#LR__3245
1cb1c     13 15 02 F6 | 	mov	arg02, local05
1cb20     11 13 02 F6 | 	mov	arg01, local03
1cb24     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1cb28     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb2c     01 FA 05 56 |  if_ne	mov	result1, #1
1cb30     40 00 90 5D |  if_ne	jmp	#LR__3245
1cb34                 | LR__3241
1cb34     14 1E 06 F1 | 	add	local01, #20
1cb38     0F 27 62 FC | 	wrlong	local05, local01
1cb3c     11 13 02 F6 | 	mov	arg01, local03
1cb40     13 15 02 F6 | 	mov	arg02, local05
1cb44     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1cb48     04 1E 06 F1 | 	add	local01, #4
1cb4c     0F FB 61 FC | 	wrlong	result1, local01
1cb50     18 1E 86 F1 | 	sub	local01, #24
1cb54                 | LR__3242
1cb54                 | LR__3243
1cb54                 | LR__3244
1cb54     10 1E 06 F1 | 	add	local01, #16
1cb58     0F 25 62 FC | 	wrlong	local04, local01
1cb5c     34 22 06 F1 | 	add	local03, #52
1cb60     FF 25 06 F5 | 	and	local04, #511
1cb64     12 23 02 F1 | 	add	local03, local04
1cb68     0C 1E 06 F1 | 	add	local01, #12
1cb6c     0F 23 62 FC | 	wrlong	local03, local01
1cb70                 | ' #line 1771 "ff.c"
1cb70                 | ' 				}
1cb70                 | ' 				dp->clust = clst;
1cb70                 | ' 				dp->sect = clst2sect(fs, clst);
1cb70                 | ' 			}
1cb70                 | ' 		}
1cb70                 | ' 	}
1cb70                 | ' 	dp->dptr = ofs;
1cb70                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1cb70                 | ' 
1cb70                 | ' 	return FR_OK;
1cb70     00 FA 05 F6 | 	mov	result1, #0
1cb74                 | LR__3245
1cb74     A7 F0 03 F6 | 	mov	ptra, fp
1cb78     B2 00 A0 FD | 	call	#popregs_
1cb7c                 | _fatfs_cc_dir_next_ret
1cb7c     2D 00 64 FD | 	ret
1cb80                 | 
1cb80                 | _fatfs_cc_dir_alloc
1cb80     08 4A 05 F6 | 	mov	COUNT_, #8
1cb84     A8 00 A0 FD | 	call	#pushregs_
1cb88     09 1F 02 F6 | 	mov	local01, arg01
1cb8c     0A 21 02 F6 | 	mov	local02, arg02
1cb90     0F 23 02 FB | 	rdlong	local03, local01
1cb94     0F 13 02 F6 | 	mov	arg01, local01
1cb98     00 14 06 F6 | 	mov	arg02, #0
1cb9c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1cba0     FD 24 0A F6 | 	mov	local04, result1 wz
1cba4     70 00 90 5D |  if_ne	jmp	#LR__3254
1cba8     00 26 06 F6 | 	mov	local05, #0
1cbac                 | ' 		n = 0;
1cbac                 | ' 		do {
1cbac                 | LR__3250
1cbac     18 1E 06 F1 | 	add	local01, #24
1cbb0     0F 15 02 FB | 	rdlong	arg02, local01
1cbb4     18 1E 86 F1 | 	sub	local01, #24
1cbb8     11 13 02 F6 | 	mov	arg01, local03
1cbbc     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1cbc0     FD 24 0A F6 | 	mov	local04, result1 wz
1cbc4     50 00 90 5D |  if_ne	jmp	#LR__3253
1cbc8     1C 1E 06 F1 | 	add	local01, #28
1cbcc     0F 29 02 FB | 	rdlong	local06, local01
1cbd0     1C 1E 86 F1 | 	sub	local01, #28
1cbd4     14 29 C2 FA | 	rdbyte	local06, local06
1cbd8     E5 28 0E F2 | 	cmp	local06, #229 wz
1cbdc     1C 1E 06 51 |  if_ne	add	local01, #28
1cbe0     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1cbe4     1C 1E 86 51 |  if_ne	sub	local01, #28
1cbe8     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1cbec     10 00 90 5D |  if_ne	jmp	#LR__3251
1cbf0     01 26 06 F1 | 	add	local05, #1
1cbf4     10 27 0A F2 | 	cmp	local05, local02 wz
1cbf8     1C 00 90 AD |  if_e	jmp	#LR__3253
1cbfc     04 00 90 FD | 	jmp	#LR__3252
1cc00                 | LR__3251
1cc00     00 26 06 F6 | 	mov	local05, #0
1cc04                 | LR__3252
1cc04     0F 13 02 F6 | 	mov	arg01, local01
1cc08     01 14 06 F6 | 	mov	arg02, #1
1cc0c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1cc10     FD 24 0A F6 | 	mov	local04, result1 wz
1cc14     94 FF 9F AD |  if_e	jmp	#LR__3250
1cc18                 | LR__3253
1cc18                 | LR__3254
1cc18     04 24 0E F2 | 	cmp	local04, #4 wz
1cc1c     07 24 06 A6 |  if_e	mov	local04, #7
1cc20                 | ' 	return res;
1cc20     12 FB 01 F6 | 	mov	result1, local04
1cc24     A7 F0 03 F6 | 	mov	ptra, fp
1cc28     B2 00 A0 FD | 	call	#popregs_
1cc2c                 | _fatfs_cc_dir_alloc_ret
1cc2c     2D 00 64 FD | 	ret
1cc30                 | 
1cc30                 | _fatfs_cc_ld_clust
1cc30     09 01 02 F6 | 	mov	_var01, arg01
1cc34     0A 13 02 F6 | 	mov	arg01, arg02
1cc38     1A 12 06 F1 | 	add	arg01, #26
1cc3c                 | ' {
1cc3c                 | ' 
1cc3c                 | ' 	return *((WORD*)ptr);
1cc3c     09 FB E1 FA | 	rdword	result1, arg01
1cc40     FD 12 32 F9 | 	getword	arg01, result1, #0
1cc44     00 01 C2 FA | 	rdbyte	_var01, _var01
1cc48     03 00 0E F2 | 	cmp	_var01, #3 wz
1cc4c     14 14 06 A1 |  if_e	add	arg02, #20
1cc50                 | ' {
1cc50                 | ' 
1cc50                 | ' 	return *((WORD*)ptr);
1cc50     0A FB E1 AA |  if_e	rdword	result1, arg02
1cc54     10 FA 65 A0 |  if_e	shl	result1, #16
1cc58     FD 12 42 A5 |  if_e	or	arg01, result1
1cc5c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1cc5c                 | ' 	}
1cc5c                 | ' 
1cc5c                 | ' 	return cl;
1cc5c     09 FB 01 F6 | 	mov	result1, arg01
1cc60                 | _fatfs_cc_ld_clust_ret
1cc60     2D 00 64 FD | 	ret
1cc64                 | 
1cc64                 | _fatfs_cc_st_clust
1cc64     09 01 02 F6 | 	mov	_var01, arg01
1cc68     0A 13 02 F6 | 	mov	arg01, arg02
1cc6c     1A 12 06 F1 | 	add	arg01, #26
1cc70     09 17 52 FC | 	wrword	arg03, arg01
1cc74     00 01 C2 FA | 	rdbyte	_var01, _var01
1cc78     03 00 0E F2 | 	cmp	_var01, #3 wz
1cc7c     14 14 06 A1 |  if_e	add	arg02, #20
1cc80     10 16 46 A0 |  if_e	shr	arg03, #16
1cc84     0A 17 52 AC |  if_e	wrword	arg03, arg02
1cc88                 | _fatfs_cc_st_clust_ret
1cc88     2D 00 64 FD | 	ret
1cc8c                 | 
1cc8c                 | _fatfs_cc_cmp_lfn
1cc8c     07 4A 05 F6 | 	mov	COUNT_, #7
1cc90     A8 00 A0 FD | 	call	#pushregs_
1cc94     09 1F 02 F6 | 	mov	local01, arg01
1cc98     0A 13 02 F6 | 	mov	arg01, arg02
1cc9c     1A 12 06 F1 | 	add	arg01, #26
1cca0                 | ' {
1cca0                 | ' 
1cca0                 | ' 	return *((WORD*)ptr);
1cca0     09 FB E9 FA | 	rdword	result1, arg01 wz
1cca4     00 FA 05 56 |  if_ne	mov	result1, #0
1cca8     E0 00 90 5D |  if_ne	jmp	#LR__3266
1ccac     0A 21 C2 FA | 	rdbyte	local02, arg02
1ccb0     3F 20 06 F5 | 	and	local02, #63
1ccb4     01 20 86 F1 | 	sub	local02, #1
1ccb8     0D 20 06 FD | 	qmul	local02, #13
1ccbc                 | ' 
1ccbc                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1ccbc                 | ' 
1ccbc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1ccbc     01 22 06 F6 | 	mov	local03, #1
1ccc0     00 24 06 F6 | 	mov	local04, #0
1ccc4     18 26 62 FD | 	getqx	local05
1ccc8                 | LR__3260
1ccc8     0D 24 16 F2 | 	cmp	local04, #13 wc
1cccc     9C 00 90 3D |  if_ae	jmp	#LR__3265
1ccd0     0A 13 02 F6 | 	mov	arg01, arg02
1ccd4     12 21 02 F6 | 	mov	local02, local04
1ccd8     01 00 00 FF 
1ccdc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1cce0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1cce4     10 21 C2 FA | 	rdbyte	local02, local02
1cce8     01 20 06 FA | 	mul	local02, #1
1ccec     10 13 02 F1 | 	add	arg01, local02
1ccf0     01 00 00 FF 
1ccf4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1ccf8                 | ' {
1ccf8                 | ' 
1ccf8                 | ' 	return *((WORD*)ptr);
1ccf8     09 FB E1 FA | 	rdword	result1, arg01
1ccfc     FD 28 02 F6 | 	mov	local06, result1
1cd00     11 21 02 F6 | 	mov	local02, local03
1cd04     0F 20 4E F7 | 	zerox	local02, #15 wz
1cd08     44 00 90 AD |  if_e	jmp	#LR__3263
1cd0c     00 27 16 F2 | 	cmp	local05, #256 wc
1cd10     2C 00 90 3D |  if_ae	jmp	#LR__3261
1cd14     14 13 32 F9 | 	getword	arg01, local06, #0
1cd18     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1cd1c     FD 20 02 F6 | 	mov	local02, result1
1cd20     13 23 02 F6 | 	mov	local03, local05
1cd24     01 22 66 F0 | 	shl	local03, #1
1cd28     0F 23 02 F1 | 	add	local03, local01
1cd2c     11 13 E2 FA | 	rdword	arg01, local03
1cd30     01 26 06 F1 | 	add	local05, #1
1cd34     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1cd38     FD 20 0A F2 | 	cmp	local02, result1 wz
1cd3c     08 00 90 AD |  if_e	jmp	#LR__3262
1cd40                 | LR__3261
1cd40                 | ' 				return 0;
1cd40     00 FA 05 F6 | 	mov	result1, #0
1cd44     44 00 90 FD | 	jmp	#LR__3266
1cd48                 | LR__3262
1cd48     14 23 02 F6 | 	mov	local03, local06
1cd4c     14 00 90 FD | 	jmp	#LR__3264
1cd50                 | LR__3263
1cd50     14 29 32 F9 | 	getword	local06, local06, #0
1cd54     7F 00 00 FF 
1cd58     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1cd5c     00 FA 05 56 |  if_ne	mov	result1, #0
1cd60     28 00 90 5D |  if_ne	jmp	#LR__3266
1cd64                 | LR__3264
1cd64     01 24 06 F1 | 	add	local04, #1
1cd68     5C FF 9F FD | 	jmp	#LR__3260
1cd6c                 | LR__3265
1cd6c     0A 21 C2 FA | 	rdbyte	local02, arg02
1cd70     40 20 CE F7 | 	test	local02, #64 wz
1cd74     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1cd78     01 26 66 50 |  if_ne	shl	local05, #1
1cd7c     0F 27 02 51 |  if_ne	add	local05, local01
1cd80     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1cd84     00 FA 05 56 |  if_ne	mov	result1, #0
1cd88                 | ' 
1cd88                 | ' 	return 1;
1cd88     01 FA 05 A6 |  if_e	mov	result1, #1
1cd8c                 | LR__3266
1cd8c     A7 F0 03 F6 | 	mov	ptra, fp
1cd90     B2 00 A0 FD | 	call	#popregs_
1cd94                 | _fatfs_cc_cmp_lfn_ret
1cd94     2D 00 64 FD | 	ret
1cd98                 | 
1cd98                 | _fatfs_cc_pick_lfn
1cd98     09 01 02 F6 | 	mov	_var01, arg01
1cd9c     0A 13 02 F6 | 	mov	arg01, arg02
1cda0     1A 12 06 F1 | 	add	arg01, #26
1cda4                 | ' {
1cda4                 | ' 
1cda4                 | ' 	return *((WORD*)ptr);
1cda4     09 FB E9 FA | 	rdword	result1, arg01 wz
1cda8     00 FA 05 56 |  if_ne	mov	result1, #0
1cdac     D4 00 90 5D |  if_ne	jmp	#LR__3275
1cdb0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1cdb4     40 02 26 F5 | 	andn	_var02, #64
1cdb8     01 02 86 F1 | 	sub	_var02, #1
1cdbc     0D 02 06 FD | 	qmul	_var02, #13
1cdc0                 | ' 
1cdc0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1cdc0                 | ' 
1cdc0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1cdc0     01 04 06 F6 | 	mov	_var03, #1
1cdc4     00 06 06 F6 | 	mov	_var04, #0
1cdc8     18 08 62 FD | 	getqx	_var05
1cdcc                 | LR__3270
1cdcc     0D 06 16 F2 | 	cmp	_var04, #13 wc
1cdd0     80 00 90 3D |  if_ae	jmp	#LR__3273
1cdd4     0A 13 02 F6 | 	mov	arg01, arg02
1cdd8     03 03 02 F6 | 	mov	_var02, _var04
1cddc     01 00 00 FF 
1cde0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1cde4     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1cde8     01 03 C2 FA | 	rdbyte	_var02, _var02
1cdec     01 02 06 FA | 	mul	_var02, #1
1cdf0     01 13 02 F1 | 	add	arg01, _var02
1cdf4     01 00 00 FF 
1cdf8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1cdfc                 | ' {
1cdfc                 | ' 
1cdfc                 | ' 	return *((WORD*)ptr);
1cdfc     09 FB E1 FA | 	rdword	result1, arg01
1ce00     FD 0A 02 F6 | 	mov	_var06, result1
1ce04     02 03 02 F6 | 	mov	_var02, _var03
1ce08     0F 02 4E F7 | 	zerox	_var02, #15 wz
1ce0c     28 00 90 AD |  if_e	jmp	#LR__3271
1ce10     00 09 16 F2 | 	cmp	_var05, #256 wc
1ce14     00 FA 05 36 |  if_ae	mov	result1, #0
1ce18     68 00 90 3D |  if_ae	jmp	#LR__3275
1ce1c     04 03 02 F6 | 	mov	_var02, _var05
1ce20     01 02 66 F0 | 	shl	_var02, #1
1ce24     00 03 02 F1 | 	add	_var02, _var01
1ce28     05 05 02 F6 | 	mov	_var03, _var06
1ce2c     01 05 52 FC | 	wrword	_var03, _var02
1ce30     01 08 06 F1 | 	add	_var05, #1
1ce34     14 00 90 FD | 	jmp	#LR__3272
1ce38                 | LR__3271
1ce38     05 0B 32 F9 | 	getword	_var06, _var06, #0
1ce3c     7F 00 00 FF 
1ce40     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1ce44     00 FA 05 56 |  if_ne	mov	result1, #0
1ce48     38 00 90 5D |  if_ne	jmp	#LR__3275
1ce4c                 | LR__3272
1ce4c     01 06 06 F1 | 	add	_var04, #1
1ce50     78 FF 9F FD | 	jmp	#LR__3270
1ce54                 | LR__3273
1ce54     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ce58     40 02 CE F7 | 	test	_var02, #64 wz
1ce5c     02 0D 02 56 |  if_ne	mov	_var07, _var03
1ce60     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1ce64     18 00 90 AD |  if_e	jmp	#LR__3274
1ce68     00 09 16 F2 | 	cmp	_var05, #256 wc
1ce6c     00 FA 05 36 |  if_ae	mov	result1, #0
1ce70     10 00 90 3D |  if_ae	jmp	#LR__3275
1ce74     01 08 66 F0 | 	shl	_var05, #1
1ce78     00 09 02 F1 | 	add	_var05, _var01
1ce7c     04 01 58 FC | 	wrword	#0, _var05
1ce80                 | LR__3274
1ce80                 | ' 		lfnbuf[i] = 0;
1ce80                 | ' 	}
1ce80                 | ' 
1ce80                 | ' 	return 1;
1ce80     01 FA 05 F6 | 	mov	result1, #1
1ce84                 | LR__3275
1ce84                 | _fatfs_cc_pick_lfn_ret
1ce84     2D 00 64 FD | 	ret
1ce88                 | 
1ce88                 | _fatfs_cc_put_lfn
1ce88     0D 14 06 F1 | 	add	arg02, #13
1ce8c     0A 19 42 FC | 	wrbyte	arg04, arg02
1ce90     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1ce94     01 18 86 F1 | 	sub	arg04, #1
1ce98     0D 18 06 FD | 	qmul	arg04, #13
1ce9c     09 01 02 F6 | 	mov	_var01, arg01
1cea0     02 14 86 F1 | 	sub	arg02, #2
1cea4     0A 1F 48 FC | 	wrbyte	#15, arg02
1cea8     01 14 06 F1 | 	add	arg02, #1
1ceac     0A 01 48 FC | 	wrbyte	#0, arg02
1ceb0     0C 14 86 F1 | 	sub	arg02, #12
1ceb4     0A 13 02 F6 | 	mov	arg01, arg02
1ceb8     1A 12 06 F1 | 	add	arg01, #26
1cebc     09 01 58 FC | 	wrword	#0, arg01
1cec0     00 02 06 F6 | 	mov	_var02, #0
1cec4     00 04 06 F6 | 	mov	_var03, #0
1cec8                 | ' 	BYTE* dir,
1cec8                 | ' 	BYTE ord,
1cec8                 | ' 	BYTE sum
1cec8                 | ' )
1cec8                 | ' {
1cec8                 | ' 	UINT i, s;
1cec8                 | ' 	WCHAR wc;
1cec8                 | ' 
1cec8                 | ' 
1cec8                 | ' 	dir[ 13 ] = sum;
1cec8                 | ' 	dir[ 11 ] =  0x0F ;
1cec8                 | ' 	dir[ 12 ] = 0;
1cec8                 | ' 	st_word(dir +  26 , 0);
1cec8                 | ' 
1cec8                 | ' 	i = (ord - 1) * 13;
1cec8                 | ' 	s = wc = 0;
1cec8                 | ' 	do {
1cec8     01 00 00 FF 
1cecc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1ced0     18 06 62 FD | 	getqx	_var04
1ced4     97 2A 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
1ced8                 | LR__3280
1ced8     01 19 32 F9 | 	getword	arg04, _var02, #0
1cedc     7F 00 00 FF 
1cee0     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1cee4     03 13 02 56 |  if_ne	mov	arg01, _var04
1cee8     01 06 06 51 |  if_ne	add	_var04, #1
1ceec     01 12 66 50 |  if_ne	shl	arg01, #1
1cef0     00 13 02 51 |  if_ne	add	arg01, _var01
1cef4     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1cef8     0A 13 02 F6 | 	mov	arg01, arg02
1cefc     02 19 02 F6 | 	mov	arg04, _var03
1cf00     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1cf04     0C 19 C2 FA | 	rdbyte	arg04, arg04
1cf08     01 18 06 FA | 	mul	arg04, #1
1cf0c     0C 13 02 F1 | 	add	arg01, arg04
1cf10     09 03 52 FC | 	wrword	_var02, arg01
1cf14     01 19 02 F6 | 	mov	arg04, _var02
1cf18     0F 18 4E F7 | 	zerox	arg04, #15 wz
1cf1c     0F 02 CE A9 |  if_e	bmask	_var02, #15
1cf20     01 04 06 F1 | 	add	_var03, #1
1cf24     0D 04 16 F2 | 	cmp	_var03, #13 wc
1cf28     AC FF 9F CD |  if_b	jmp	#LR__3280
1cf2c                 | LR__3281
1cf2c     01 00 00 FF 
1cf30     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1cf34     01 03 32 F9 | 	getword	_var02, _var02, #0
1cf38     7F 00 00 FF 
1cf3c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1cf40     01 06 66 50 |  if_ne	shl	_var04, #1
1cf44     00 07 02 51 |  if_ne	add	_var04, _var01
1cf48     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1cf4c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1cf50     40 16 46 A5 |  if_e	or	arg03, #64
1cf54     0A 17 42 FC | 	wrbyte	arg03, arg02
1cf58                 | _fatfs_cc_put_lfn_ret
1cf58     2D 00 64 FD | 	ret
1cf5c                 | 
1cf5c                 | _fatfs_cc_gen_numname
1cf5c     08 4A 05 F6 | 	mov	COUNT_, #8
1cf60     A8 00 A0 FD | 	call	#pushregs_
1cf64     2C F0 07 F1 | 	add	ptra, #44
1cf68     09 1F 02 F6 | 	mov	local01, arg01
1cf6c     0A 21 02 F6 | 	mov	local02, arg02
1cf70     0B 23 02 F6 | 	mov	local03, arg03
1cf74     0C 25 02 F6 | 	mov	local04, arg04
1cf78     0F 13 02 F6 | 	mov	arg01, local01
1cf7c     10 15 02 F6 | 	mov	arg02, local02
1cf80     0B 16 06 F6 | 	mov	arg03, #11
1cf84     D8 7B BF FD | 	call	#__system____builtin_memmove
1cf88     06 24 16 F2 | 	cmp	local04, #6 wc
1cf8c     48 00 90 CD |  if_b	jmp	#LR__3295
1cf90     12 27 02 F6 | 	mov	local05, local04
1cf94     97 1E 48 FB | 	callpa	#(@LR__3293-@LR__3290)>>2,fcache_load_ptr_
1cf98                 | ' 		sreg = seq;
1cf98                 | ' 		while (*lfn) {
1cf98                 | LR__3290
1cf98     11 29 EA FA | 	rdword	local06, local03 wz
1cf9c     34 00 90 AD |  if_e	jmp	#LR__3294
1cfa0     11 2B E2 FA | 	rdword	local07, local03
1cfa4                 | ' 			wc = *lfn++;
1cfa4                 | ' 			for (i = 0; i < 16; i++) {
1cfa4     02 22 06 F1 | 	add	local03, #2
1cfa8     10 12 DC FC | 	rep	@LR__3292, #16
1cfac                 | LR__3291
1cfac     01 26 66 F0 | 	shl	local05, #1
1cfb0     15 29 32 F9 | 	getword	local06, local07, #0
1cfb4     01 28 06 F5 | 	and	local06, #1
1cfb8     14 27 02 F1 | 	add	local05, local06
1cfbc     15 2B 32 F9 | 	getword	local07, local07, #0
1cfc0     01 2A 46 F0 | 	shr	local07, #1
1cfc4     10 26 2E F4 | 	testbn	local05, #16 wz
1cfc8     88 00 00 5F 
1cfcc     21 26 66 55 |  if_ne	xor	local05, ##69665
1cfd0                 | LR__3292
1cfd0     C4 FF 9F FD | 	jmp	#LR__3290
1cfd4                 | LR__3293
1cfd4                 | LR__3294
1cfd4     13 25 02 F6 | 	mov	local04, local05
1cfd8                 | LR__3295
1cfd8     07 2A 06 F6 | 	mov	local07, #7
1cfdc                 | ' 			}
1cfdc                 | ' 		}
1cfdc                 | ' 		seq = (UINT)sreg;
1cfdc                 | ' 	}
1cfdc                 | ' 
1cfdc                 | ' 
1cfdc                 | ' 	i = 7;
1cfdc                 | ' 	do {
1cfdc     10 4E 05 F1 | 	add	fp, #16
1cfe0     97 1A 48 FB | 	callpa	#(@LR__3297-@LR__3296)>>2,fcache_load_ptr_
1cfe4                 | LR__3296
1cfe4     12 27 42 F8 | 	getnib	local05, local04, #0
1cfe8     30 26 06 F1 | 	add	local05, #48
1cfec     04 24 46 F0 | 	shr	local04, #4
1cff0     13 29 E2 F8 | 	getbyte	local06, local05, #0
1cff4     3A 28 16 F2 | 	cmp	local06, #58 wc
1cff8     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1cffc     07 26 06 31 |  if_ae	add	local05, #7
1d000     15 29 02 F6 | 	mov	local06, local07
1d004     01 2A 8E F1 | 	sub	local07, #1 wz
1d008     A7 28 02 F1 | 	add	local06, fp
1d00c     14 27 42 FC | 	wrbyte	local05, local06
1d010     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1d014     CC FF 9F 5D |  if_ne	jmp	#LR__3296
1d018                 | LR__3297
1d018     15 29 02 F6 | 	mov	local06, local07
1d01c     A7 28 02 F1 | 	add	local06, fp
1d020     14 FD 48 FC | 	wrbyte	#126, local06
1d024                 | ' 	ns[i] = '~';
1d024                 | ' 
1d024                 | ' 
1d024                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1d024     00 26 06 F6 | 	mov	local05, #0
1d028     10 4E 85 F1 | 	sub	fp, #16
1d02c     97 2A 48 FB | 	callpa	#(@LR__3300-@LR__3298)>>2,fcache_load_ptr_
1d030                 | LR__3298
1d030     15 27 12 F2 | 	cmp	local05, local07 wc
1d034     4C 00 90 3D |  if_ae	jmp	#LR__3301
1d038     13 29 02 F6 | 	mov	local06, local05
1d03c     0F 29 02 F1 | 	add	local06, local01
1d040     14 29 C2 FA | 	rdbyte	local06, local06
1d044     20 28 0E F2 | 	cmp	local06, #32 wz
1d048     38 00 90 AD |  if_e	jmp	#LR__3301
1d04c     13 13 02 F6 | 	mov	arg01, local05
1d050     0F 13 02 F1 | 	add	arg01, local01
1d054     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1d058     00 FA 05 56 |  if_ne	mov	result1, #0
1d05c                 | ' 
1d05c                 | ' 	return 0;
1d05c     00 FA 05 A6 |  if_e	mov	result1, #0
1d060     00 FA 0D F2 | 	cmp	result1, #0 wz
1d064     14 00 90 AD |  if_e	jmp	#LR__3299
1d068     15 29 02 F6 | 	mov	local06, local07
1d06c     01 28 86 F1 | 	sub	local06, #1
1d070     14 27 0A F2 | 	cmp	local05, local06 wz
1d074     0C 00 90 AD |  if_e	jmp	#LR__3301
1d078     01 26 06 F1 | 	add	local05, #1
1d07c                 | LR__3299
1d07c     01 26 06 F1 | 	add	local05, #1
1d080     AC FF 9F FD | 	jmp	#LR__3298
1d084                 | LR__3300
1d084                 | LR__3301
1d084     97 20 48 FB | 	callpa	#(@LR__3305-@LR__3302)>>2,fcache_load_ptr_
1d088                 | ' 			j++;
1d088                 | ' 		}
1d088                 | ' 	}
1d088                 | ' 	do {
1d088                 | LR__3302
1d088     13 29 02 F6 | 	mov	local06, local05
1d08c     0F 29 02 F1 | 	add	local06, local01
1d090     08 2A 16 F2 | 	cmp	local07, #8 wc
1d094     01 26 06 F1 | 	add	local05, #1
1d098     1C 00 90 3D |  if_ae	jmp	#LR__3303
1d09c     15 25 02 F6 | 	mov	local04, local07
1d0a0     10 4E 05 F1 | 	add	fp, #16
1d0a4     A7 24 02 F1 | 	add	local04, fp
1d0a8     12 2D C2 FA | 	rdbyte	local08, local04
1d0ac     01 2A 06 F1 | 	add	local07, #1
1d0b0     10 4E 85 F1 | 	sub	fp, #16
1d0b4     04 00 90 FD | 	jmp	#LR__3304
1d0b8                 | LR__3303
1d0b8     20 2C 06 F6 | 	mov	local08, #32
1d0bc                 | LR__3304
1d0bc     14 2D 42 FC | 	wrbyte	local08, local06
1d0c0     08 26 16 F2 | 	cmp	local05, #8 wc
1d0c4     C0 FF 9F CD |  if_b	jmp	#LR__3302
1d0c8                 | LR__3305
1d0c8     A7 F0 03 F6 | 	mov	ptra, fp
1d0cc     B2 00 A0 FD | 	call	#popregs_
1d0d0                 | _fatfs_cc_gen_numname_ret
1d0d0     2D 00 64 FD | 	ret
1d0d4                 | 
1d0d4                 | _fatfs_cc_sum_sfn
1d0d4     00 00 06 F6 | 	mov	_var01, #0
1d0d8                 | ' )
1d0d8                 | ' {
1d0d8                 | ' 	BYTE sum = 0;
1d0d8                 | ' 	UINT n = 11;
1d0d8                 | ' 
1d0d8                 | ' 	do {
1d0d8     97 12 48 FB | 	callpa	#(@LR__3312-@LR__3310)>>2,fcache_load_ptr_
1d0dc                 | LR__3310
1d0dc     0B 10 DC FC | 	rep	@LR__3313, #11
1d0e0                 | LR__3311
1d0e0     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1d0e4     01 FA 45 F0 | 	shr	result1, #1
1d0e8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1d0ec     07 00 66 F0 | 	shl	_var01, #7
1d0f0     00 FB 01 F1 | 	add	result1, _var01
1d0f4     09 01 C2 FA | 	rdbyte	_var01, arg01
1d0f8     FD 00 02 F1 | 	add	_var01, result1
1d0fc     01 12 06 F1 | 	add	arg01, #1
1d100                 | LR__3312
1d100                 | LR__3313
1d100                 | ' 	return sum;
1d100     00 FB 01 F6 | 	mov	result1, _var01
1d104                 | _fatfs_cc_sum_sfn_ret
1d104     2D 00 64 FD | 	ret
1d108                 | 
1d108                 | _fatfs_cc_dir_read
1d108     0C 4A 05 F6 | 	mov	COUNT_, #12
1d10c     A8 00 A0 FD | 	call	#pushregs_
1d110     09 1F 02 F6 | 	mov	local01, arg01
1d114     0A 21 02 F6 | 	mov	local02, arg02
1d118     04 22 06 F6 | 	mov	local03, #4
1d11c     0F 25 02 FB | 	rdlong	local04, local01
1d120     FF 26 06 F6 | 	mov	local05, #255
1d124     FF 28 06 F6 | 	mov	local06, #255
1d128                 | ' )
1d128                 | ' {
1d128                 | ' 	FRESULT res = FR_NO_FILE;
1d128                 | ' 	FATFS *fs = dp->obj.fs;
1d128                 | ' 	BYTE attr, b;
1d128                 | ' 
1d128                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1d128                 | ' 
1d128                 | ' 
1d128                 | ' 	while (dp->sect) {
1d128                 | LR__3320
1d128     18 1E 06 F1 | 	add	local01, #24
1d12c     0F FB 09 FB | 	rdlong	result1, local01 wz
1d130     18 1E 86 F1 | 	sub	local01, #24
1d134     AC 01 90 AD |  if_e	jmp	#LR__3330
1d138     18 1E 06 F1 | 	add	local01, #24
1d13c     0F 15 02 FB | 	rdlong	arg02, local01
1d140     18 1E 86 F1 | 	sub	local01, #24
1d144     12 13 02 F6 | 	mov	arg01, local04
1d148     AC ED BF FD | 	call	#_fatfs_cc_move_window
1d14c     FD 22 0A F6 | 	mov	local03, result1 wz
1d150     90 01 90 5D |  if_ne	jmp	#LR__3330
1d154     1C 1E 06 F1 | 	add	local01, #28
1d158     0F FB 01 FB | 	rdlong	result1, local01
1d15c     1C 1E 86 F1 | 	sub	local01, #28
1d160     FD 2A C2 FA | 	rdbyte	local07, result1
1d164     15 FB 01 F6 | 	mov	result1, local07
1d168     07 FA 4D F7 | 	zerox	result1, #7 wz
1d16c     04 22 06 A6 |  if_e	mov	local03, #4
1d170                 | ' 			res = FR_NO_FILE; break;
1d170     70 01 90 AD |  if_e	jmp	#LR__3330
1d174     1C 1E 06 F1 | 	add	local01, #28
1d178     0F 2D 02 FB | 	rdlong	local08, local01
1d17c     0B 2C 06 F1 | 	add	local08, #11
1d180     16 2F C2 FA | 	rdbyte	local09, local08
1d184     3F 2E 06 F5 | 	and	local09, #63
1d188     16 1E 86 F1 | 	sub	local01, #22
1d18c     0F 2F 42 FC | 	wrbyte	local09, local01
1d190     06 1E 86 F1 | 	sub	local01, #6
1d194     15 FB E1 F8 | 	getbyte	result1, local07, #0
1d198     E5 FA 0D F2 | 	cmp	result1, #229 wz
1d19c     15 2D 02 56 |  if_ne	mov	local08, local07
1d1a0     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1d1a4     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1d1a8     1C 00 90 AD |  if_e	jmp	#LR__3321
1d1ac     00 30 06 F6 | 	mov	local10, #0
1d1b0     17 2D E2 F8 | 	getbyte	local08, local09, #0
1d1b4     20 2C 26 F5 | 	andn	local08, #32
1d1b8     08 2C 0E F2 | 	cmp	local08, #8 wz
1d1bc     01 30 06 A6 |  if_e	mov	local10, #1
1d1c0     10 31 0A F2 | 	cmp	local10, local02 wz
1d1c4     08 00 90 AD |  if_e	jmp	#LR__3322
1d1c8                 | LR__3321
1d1c8     FF 26 06 F6 | 	mov	local05, #255
1d1cc     00 01 90 FD | 	jmp	#LR__3329
1d1d0                 | LR__3322
1d1d0     17 2F E2 F8 | 	getbyte	local09, local09, #0
1d1d4     0F 2E 0E F2 | 	cmp	local09, #15 wz
1d1d8     B4 00 90 5D |  if_ne	jmp	#LR__3326
1d1dc     15 33 E2 F8 | 	getbyte	local11, local07, #0
1d1e0     40 32 CE F7 | 	test	local11, #64 wz
1d1e4     30 00 90 AD |  if_e	jmp	#LR__3323
1d1e8     1C 1E 06 F1 | 	add	local01, #28
1d1ec     0F 33 02 FB | 	rdlong	local11, local01
1d1f0     0D 32 06 F1 | 	add	local11, #13
1d1f4     19 29 C2 FA | 	rdbyte	local06, local11
1d1f8     15 2B E2 F8 | 	getbyte	local07, local07, #0
1d1fc     BF 2A 06 F5 | 	and	local07, #191
1d200     15 27 02 F6 | 	mov	local05, local07
1d204     0C 1E 86 F1 | 	sub	local01, #12
1d208     0F 33 02 FB | 	rdlong	local11, local01
1d20c     1C 1E 06 F1 | 	add	local01, #28
1d210     0F 33 62 FC | 	wrlong	local11, local01
1d214     2C 1E 86 F1 | 	sub	local01, #44
1d218                 | LR__3323
1d218     15 2D E2 F8 | 	getbyte	local08, local07, #0
1d21c     13 31 E2 F8 | 	getbyte	local10, local05, #0
1d220     18 2D 0A F2 | 	cmp	local08, local10 wz
1d224     5C 00 90 5D |  if_ne	jmp	#LR__3324
1d228     14 31 E2 F8 | 	getbyte	local10, local06, #0
1d22c     1C 1E 06 F1 | 	add	local01, #28
1d230     0F 2F 02 FB | 	rdlong	local09, local01
1d234     1C 1E 86 F1 | 	sub	local01, #28
1d238     0D 2E 06 F1 | 	add	local09, #13
1d23c     17 2D C2 FA | 	rdbyte	local08, local09
1d240     16 2F E2 F8 | 	getbyte	local09, local08, #0
1d244     17 31 0A F2 | 	cmp	local10, local09 wz
1d248     38 00 90 5D |  if_ne	jmp	#LR__3324
1d24c     0C 24 06 F1 | 	add	local04, #12
1d250     12 13 02 FB | 	rdlong	arg01, local04
1d254     0C 24 86 F1 | 	sub	local04, #12
1d258     1C 1E 06 F1 | 	add	local01, #28
1d25c     0F 35 02 FB | 	rdlong	local12, local01
1d260     1C 1E 86 F1 | 	sub	local01, #28
1d264     1A 15 02 F6 | 	mov	arg02, local12
1d268     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1d26c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d270     13 35 02 56 |  if_ne	mov	local12, local05
1d274     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1d278     01 34 86 51 |  if_ne	sub	local12, #1
1d27c     1A 33 02 56 |  if_ne	mov	local11, local12
1d280     04 00 90 5D |  if_ne	jmp	#LR__3325
1d284                 | LR__3324
1d284     FF 32 06 F6 | 	mov	local11, #255
1d288                 | LR__3325
1d288     19 27 02 F6 | 	mov	local05, local11
1d28c     40 00 90 FD | 	jmp	#LR__3328
1d290                 | LR__3326
1d290     13 33 02 F6 | 	mov	local11, local05
1d294     07 32 4E F7 | 	zerox	local11, #7 wz
1d298     20 00 90 5D |  if_ne	jmp	#LR__3327
1d29c     14 29 E2 F8 | 	getbyte	local06, local06, #0
1d2a0     1C 1E 06 F1 | 	add	local01, #28
1d2a4     0F 13 02 FB | 	rdlong	arg01, local01
1d2a8     1C 1E 86 F1 | 	sub	local01, #28
1d2ac     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1d2b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d2b4     FD 28 0A F2 | 	cmp	local06, result1 wz
1d2b8     28 00 90 AD |  if_e	jmp	#LR__3330
1d2bc                 | LR__3327
1d2bc     2C 1E 06 F1 | 	add	local01, #44
1d2c0     FF FF FF FF 
1d2c4     0F FF 6B FC | 	wrlong	##-1, local01
1d2c8     2C 1E 86 F1 | 	sub	local01, #44
1d2cc                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1d2cc                 | ' 					}
1d2cc                 | ' 					break;
1d2cc     14 00 90 FD | 	jmp	#LR__3330
1d2d0                 | LR__3328
1d2d0                 | LR__3329
1d2d0     0F 13 02 F6 | 	mov	arg01, local01
1d2d4     00 14 06 F6 | 	mov	arg02, #0
1d2d8     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1d2dc     FD 22 0A F6 | 	mov	local03, result1 wz
1d2e0     44 FE 9F AD |  if_e	jmp	#LR__3320
1d2e4                 | LR__3330
1d2e4     00 22 0E F2 | 	cmp	local03, #0 wz
1d2e8     18 1E 06 51 |  if_ne	add	local01, #24
1d2ec     0F 01 68 5C |  if_ne	wrlong	#0, local01
1d2f0                 | ' 	return res;
1d2f0     11 FB 01 F6 | 	mov	result1, local03
1d2f4     A7 F0 03 F6 | 	mov	ptra, fp
1d2f8     B2 00 A0 FD | 	call	#popregs_
1d2fc                 | _fatfs_cc_dir_read_ret
1d2fc     2D 00 64 FD | 	ret
1d300                 | 
1d300                 | _fatfs_cc_dir_find
1d300     0B 4A 05 F6 | 	mov	COUNT_, #11
1d304     A8 00 A0 FD | 	call	#pushregs_
1d308     09 1F 02 F6 | 	mov	local01, arg01
1d30c     0F 21 02 FB | 	rdlong	local02, local01
1d310     0F 13 02 F6 | 	mov	arg01, local01
1d314     00 14 06 F6 | 	mov	arg02, #0
1d318     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1d31c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d320     18 02 90 5D |  if_ne	jmp	#LR__3352
1d324     FF 22 06 F6 | 	mov	local03, #255
1d328     FF 24 06 F6 | 	mov	local04, #255
1d32c     2C 1E 06 F1 | 	add	local01, #44
1d330     FF FF FF FF 
1d334     0F FF 6B FC | 	wrlong	##-1, local01
1d338     2C 1E 86 F1 | 	sub	local01, #44
1d33c                 | ' #line 2404 "ff.c"
1d33c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1d33c                 | ' 
1d33c                 | ' 	do {
1d33c                 | LR__3340
1d33c     18 1E 06 F1 | 	add	local01, #24
1d340     0F 15 02 FB | 	rdlong	arg02, local01
1d344     18 1E 86 F1 | 	sub	local01, #24
1d348     10 13 02 F6 | 	mov	arg01, local02
1d34c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1d350     FD 26 0A F6 | 	mov	local05, result1 wz
1d354     E0 01 90 5D |  if_ne	jmp	#LR__3351
1d358     1C 1E 06 F1 | 	add	local01, #28
1d35c     0F 17 02 FB | 	rdlong	arg03, local01
1d360     1C 1E 86 F1 | 	sub	local01, #28
1d364     0B 29 C2 FA | 	rdbyte	local06, arg03
1d368     14 17 02 F6 | 	mov	arg03, local06
1d36c     07 16 4E F7 | 	zerox	arg03, #7 wz
1d370     04 26 06 A6 |  if_e	mov	local05, #4
1d374     C0 01 90 AD |  if_e	jmp	#LR__3351
1d378     1C 1E 06 F1 | 	add	local01, #28
1d37c     0F 2B 02 FB | 	rdlong	local07, local01
1d380     15 17 02 F6 | 	mov	arg03, local07
1d384     0B 16 06 F1 | 	add	arg03, #11
1d388     0B 2D C2 FA | 	rdbyte	local08, arg03
1d38c     3F 2C 06 F5 | 	and	local08, #63
1d390     16 1E 86 F1 | 	sub	local01, #22
1d394     0F 2D 42 FC | 	wrbyte	local08, local01
1d398     06 1E 86 F1 | 	sub	local01, #6
1d39c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1d3a0     E5 16 0E F2 | 	cmp	arg03, #229 wz
1d3a4     18 00 90 AD |  if_e	jmp	#LR__3341
1d3a8     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1d3ac     08 16 CE F7 | 	test	arg03, #8 wz
1d3b0     16 2B 02 56 |  if_ne	mov	local07, local08
1d3b4     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1d3b8     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1d3bc     18 00 90 AD |  if_e	jmp	#LR__3342
1d3c0                 | LR__3341
1d3c0     FF 24 06 F6 | 	mov	local04, #255
1d3c4     2C 1E 06 F1 | 	add	local01, #44
1d3c8     FF FF FF FF 
1d3cc     0F FF 6B FC | 	wrlong	##-1, local01
1d3d0     2C 1E 86 F1 | 	sub	local01, #44
1d3d4     4C 01 90 FD | 	jmp	#LR__3350
1d3d8                 | LR__3342
1d3d8     16 2D E2 F8 | 	getbyte	local08, local08, #0
1d3dc     0F 2C 0E F2 | 	cmp	local08, #15 wz
1d3e0     C8 00 90 5D |  if_ne	jmp	#LR__3346
1d3e4     2B 1E 06 F1 | 	add	local01, #43
1d3e8     0F 2D C2 FA | 	rdbyte	local08, local01
1d3ec     2B 1E 86 F1 | 	sub	local01, #43
1d3f0     40 2C CE F7 | 	test	local08, #64 wz
1d3f4     2C 01 90 5D |  if_ne	jmp	#LR__3349
1d3f8     14 2F E2 F8 | 	getbyte	local09, local06, #0
1d3fc     40 2E CE F7 | 	test	local09, #64 wz
1d400     30 00 90 AD |  if_e	jmp	#LR__3343
1d404     1C 1E 06 F1 | 	add	local01, #28
1d408     0F 2F 02 FB | 	rdlong	local09, local01
1d40c     0D 2E 06 F1 | 	add	local09, #13
1d410     17 23 C2 FA | 	rdbyte	local03, local09
1d414     14 29 E2 F8 | 	getbyte	local06, local06, #0
1d418     BF 28 06 F5 | 	and	local06, #191
1d41c     14 25 02 F6 | 	mov	local04, local06
1d420     0C 1E 86 F1 | 	sub	local01, #12
1d424     0F 2F 02 FB | 	rdlong	local09, local01
1d428     1C 1E 06 F1 | 	add	local01, #28
1d42c     0F 2F 62 FC | 	wrlong	local09, local01
1d430     2C 1E 86 F1 | 	sub	local01, #44
1d434                 | LR__3343
1d434     14 31 E2 F8 | 	getbyte	local10, local06, #0
1d438     12 2B E2 F8 | 	getbyte	local07, local04, #0
1d43c     15 31 0A F2 | 	cmp	local10, local07 wz
1d440     5C 00 90 5D |  if_ne	jmp	#LR__3344
1d444     11 2D E2 F8 | 	getbyte	local08, local03, #0
1d448     1C 1E 06 F1 | 	add	local01, #28
1d44c     0F 2B 02 FB | 	rdlong	local07, local01
1d450     1C 1E 86 F1 | 	sub	local01, #28
1d454     0D 2A 06 F1 | 	add	local07, #13
1d458     15 29 C2 FA | 	rdbyte	local06, local07
1d45c     14 2B E2 F8 | 	getbyte	local07, local06, #0
1d460     15 2D 0A F2 | 	cmp	local08, local07 wz
1d464     38 00 90 5D |  if_ne	jmp	#LR__3344
1d468     0C 20 06 F1 | 	add	local02, #12
1d46c     10 13 02 FB | 	rdlong	arg01, local02
1d470     0C 20 86 F1 | 	sub	local02, #12
1d474     1C 1E 06 F1 | 	add	local01, #28
1d478     0F 33 02 FB | 	rdlong	local11, local01
1d47c     1C 1E 86 F1 | 	sub	local01, #28
1d480     19 15 02 F6 | 	mov	arg02, local11
1d484     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1d488     00 FA 4D F2 | 	cmps	result1, #0 wz
1d48c     12 33 02 56 |  if_ne	mov	local11, local04
1d490     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1d494     01 32 86 51 |  if_ne	sub	local11, #1
1d498     19 2F 02 56 |  if_ne	mov	local09, local11
1d49c     04 00 90 5D |  if_ne	jmp	#LR__3345
1d4a0                 | LR__3344
1d4a0     FF 2E 06 F6 | 	mov	local09, #255
1d4a4                 | LR__3345
1d4a4     17 25 02 F6 | 	mov	local04, local09
1d4a8     78 00 90 FD | 	jmp	#LR__3349
1d4ac                 | LR__3346
1d4ac     12 2F 02 F6 | 	mov	local09, local04
1d4b0     07 2E 4E F7 | 	zerox	local09, #7 wz
1d4b4     20 00 90 5D |  if_ne	jmp	#LR__3347
1d4b8     11 31 E2 F8 | 	getbyte	local10, local03, #0
1d4bc     1C 1E 06 F1 | 	add	local01, #28
1d4c0     0F 13 02 FB | 	rdlong	arg01, local01
1d4c4     1C 1E 86 F1 | 	sub	local01, #28
1d4c8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1d4cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d4d0     FD 30 0A F2 | 	cmp	local10, result1 wz
1d4d4     60 00 90 AD |  if_e	jmp	#LR__3351
1d4d8                 | LR__3347
1d4d8     2B 1E 06 F1 | 	add	local01, #43
1d4dc     0F 2F C2 FA | 	rdbyte	local09, local01
1d4e0     2B 1E 86 F1 | 	sub	local01, #43
1d4e4     01 2E CE F7 | 	test	local09, #1 wz
1d4e8     24 00 90 5D |  if_ne	jmp	#LR__3348
1d4ec     1C 1E 06 F1 | 	add	local01, #28
1d4f0     0F 13 02 FB | 	rdlong	arg01, local01
1d4f4     04 1E 06 F1 | 	add	local01, #4
1d4f8     0F 15 02 F6 | 	mov	arg02, local01
1d4fc     20 1E 86 F1 | 	sub	local01, #32
1d500     0B 16 06 F6 | 	mov	arg03, #11
1d504     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1d508     00 FA 0D F2 | 	cmp	result1, #0 wz
1d50c     28 00 90 AD |  if_e	jmp	#LR__3351
1d510                 | LR__3348
1d510     FF 24 06 F6 | 	mov	local04, #255
1d514     2C 1E 06 F1 | 	add	local01, #44
1d518     FF FF FF FF 
1d51c     0F FF 6B FC | 	wrlong	##-1, local01
1d520     2C 1E 86 F1 | 	sub	local01, #44
1d524                 | LR__3349
1d524                 | LR__3350
1d524     0F 13 02 F6 | 	mov	arg01, local01
1d528     00 14 06 F6 | 	mov	arg02, #0
1d52c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1d530     FD 26 0A F6 | 	mov	local05, result1 wz
1d534     04 FE 9F AD |  if_e	jmp	#LR__3340
1d538                 | LR__3351
1d538                 | ' 
1d538                 | ' 	return res;
1d538     13 FB 01 F6 | 	mov	result1, local05
1d53c                 | LR__3352
1d53c     A7 F0 03 F6 | 	mov	ptra, fp
1d540     B2 00 A0 FD | 	call	#popregs_
1d544                 | _fatfs_cc_dir_find_ret
1d544     2D 00 64 FD | 	ret
1d548                 | 
1d548                 | _fatfs_cc_dir_register
1d548     0A 4A 05 F6 | 	mov	COUNT_, #10
1d54c     A8 00 A0 FD | 	call	#pushregs_
1d550     2C F0 07 F1 | 	add	ptra, #44
1d554     04 4E 05 F1 | 	add	fp, #4
1d558     A7 12 62 FC | 	wrlong	arg01, fp
1d55c     09 1F 02 FB | 	rdlong	local01, arg01
1d560     08 4E 05 F1 | 	add	fp, #8
1d564     A7 1E 62 FC | 	wrlong	local01, fp
1d568     08 4E 85 F1 | 	sub	fp, #8
1d56c     A7 20 02 FB | 	rdlong	local02, fp
1d570     04 4E 85 F1 | 	sub	fp, #4
1d574     2B 20 06 F1 | 	add	local02, #43
1d578     10 21 C2 FA | 	rdbyte	local02, local02
1d57c     A0 20 CE F7 | 	test	local02, #160 wz
1d580     06 FA 05 56 |  if_ne	mov	result1, #6
1d584     F8 03 90 5D |  if_ne	jmp	#LR__3375
1d588                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1d588     14 4E 05 F1 | 	add	fp, #20
1d58c     A7 00 68 FC | 	wrlong	#0, fp
1d590     14 4E 85 F1 | 	sub	fp, #20
1d594     97 28 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
1d598                 | LR__3360
1d598     0C 4E 05 F1 | 	add	fp, #12
1d59c     A7 20 02 FB | 	rdlong	local02, fp
1d5a0     0C 20 06 F1 | 	add	local02, #12
1d5a4     10 23 02 FB | 	rdlong	local03, local02
1d5a8     08 4E 05 F1 | 	add	fp, #8
1d5ac     A7 24 02 FB | 	rdlong	local04, fp
1d5b0     14 4E 85 F1 | 	sub	fp, #20
1d5b4     01 24 66 F0 | 	shl	local04, #1
1d5b8     11 25 02 F1 | 	add	local04, local03
1d5bc     12 21 EA FA | 	rdword	local02, local04 wz
1d5c0     24 00 90 AD |  if_e	jmp	#LR__3362
1d5c4     14 4E 05 F1 | 	add	fp, #20
1d5c8     A7 26 02 FB | 	rdlong	local05, fp
1d5cc     13 29 02 F6 | 	mov	local06, local05
1d5d0     13 2B 02 F6 | 	mov	local07, local05
1d5d4     15 2D 02 F6 | 	mov	local08, local07
1d5d8     01 2C 06 F1 | 	add	local08, #1
1d5dc     A7 2C 62 FC | 	wrlong	local08, fp
1d5e0     14 4E 85 F1 | 	sub	fp, #20
1d5e4     B0 FF 9F FD | 	jmp	#LR__3360
1d5e8                 | LR__3361
1d5e8                 | LR__3362
1d5e8     1C 4E 05 F1 | 	add	fp, #28
1d5ec     A7 12 02 F6 | 	mov	arg01, fp
1d5f0     18 4E 85 F1 | 	sub	fp, #24
1d5f4     A7 14 02 FB | 	rdlong	arg02, fp
1d5f8     04 4E 85 F1 | 	sub	fp, #4
1d5fc     20 14 06 F1 | 	add	arg02, #32
1d600     0C 16 06 F6 | 	mov	arg03, #12
1d604     58 75 BF FD | 	call	#__system____builtin_memmove
1d608     27 4E 05 F1 | 	add	fp, #39
1d60c     A7 2E C2 FA | 	rdbyte	local09, fp
1d610     27 4E 85 F1 | 	sub	fp, #39
1d614     01 2E CE F7 | 	test	local09, #1 wz
1d618     F4 00 90 AD |  if_e	jmp	#LR__3365
1d61c     04 4E 05 F1 | 	add	fp, #4
1d620     A7 30 02 FB | 	rdlong	local10, fp
1d624     2B 30 06 F1 | 	add	local10, #43
1d628     18 81 48 FC | 	wrbyte	#64, local10
1d62c                 | ' 		dp->fn[ 11 ] =  0x40 ;
1d62c                 | ' 		for (n = 1; n < 100; n++) {
1d62c     0C 4E 05 F1 | 	add	fp, #12
1d630     A7 02 68 FC | 	wrlong	#1, fp
1d634     10 4E 85 F1 | 	sub	fp, #16
1d638                 | LR__3363
1d638     10 4E 05 F1 | 	add	fp, #16
1d63c     A7 20 02 FB | 	rdlong	local02, fp
1d640     10 4E 85 F1 | 	sub	fp, #16
1d644     64 20 16 F2 | 	cmp	local02, #100 wc
1d648     70 00 90 3D |  if_ae	jmp	#LR__3364
1d64c     04 4E 05 F1 | 	add	fp, #4
1d650     A7 12 02 FB | 	rdlong	arg01, fp
1d654     20 12 06 F1 | 	add	arg01, #32
1d658     18 4E 05 F1 | 	add	fp, #24
1d65c     A7 14 02 F6 | 	mov	arg02, fp
1d660     10 4E 85 F1 | 	sub	fp, #16
1d664     A7 30 02 FB | 	rdlong	local10, fp
1d668     0C 30 06 F1 | 	add	local10, #12
1d66c     18 17 02 FB | 	rdlong	arg03, local10
1d670     04 4E 05 F1 | 	add	fp, #4
1d674     A7 18 02 FB | 	rdlong	arg04, fp
1d678     10 4E 85 F1 | 	sub	fp, #16
1d67c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1d680     04 4E 05 F1 | 	add	fp, #4
1d684     A7 12 02 FB | 	rdlong	arg01, fp
1d688     04 4E 85 F1 | 	sub	fp, #4
1d68c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1d690     08 4E 05 F1 | 	add	fp, #8
1d694     A7 FA 61 FC | 	wrlong	result1, fp
1d698     00 FA 4D F2 | 	cmps	result1, #0 wz
1d69c     08 4E 85 F1 | 	sub	fp, #8
1d6a0     18 00 90 5D |  if_ne	jmp	#LR__3364
1d6a4     10 4E 05 F1 | 	add	fp, #16
1d6a8     A7 30 02 FB | 	rdlong	local10, fp
1d6ac     01 30 06 F1 | 	add	local10, #1
1d6b0     A7 30 62 FC | 	wrlong	local10, fp
1d6b4     10 4E 85 F1 | 	sub	fp, #16
1d6b8     7C FF 9F FD | 	jmp	#LR__3363
1d6bc                 | LR__3364
1d6bc     10 4E 05 F1 | 	add	fp, #16
1d6c0     A7 30 02 FB | 	rdlong	local10, fp
1d6c4     10 4E 85 F1 | 	sub	fp, #16
1d6c8     64 30 0E F2 | 	cmp	local10, #100 wz
1d6cc     07 FA 05 A6 |  if_e	mov	result1, #7
1d6d0     AC 02 90 AD |  if_e	jmp	#LR__3375
1d6d4     08 4E 05 F1 | 	add	fp, #8
1d6d8     A7 30 02 FB | 	rdlong	local10, fp
1d6dc     08 4E 85 F1 | 	sub	fp, #8
1d6e0     04 30 0E F2 | 	cmp	local10, #4 wz
1d6e4     08 4E 05 51 |  if_ne	add	fp, #8
1d6e8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1d6ec     08 4E 85 51 |  if_ne	sub	fp, #8
1d6f0     8C 02 90 5D |  if_ne	jmp	#LR__3375
1d6f4     04 4E 05 F1 | 	add	fp, #4
1d6f8     A7 30 02 FB | 	rdlong	local10, fp
1d6fc     23 4E 05 F1 | 	add	fp, #35
1d700     A7 1E C2 FA | 	rdbyte	local01, fp
1d704     27 4E 85 F1 | 	sub	fp, #39
1d708     2B 30 06 F1 | 	add	local10, #43
1d70c     18 1F 42 FC | 	wrbyte	local01, local10
1d710                 | LR__3365
1d710     27 4E 05 F1 | 	add	fp, #39
1d714     A7 20 C2 FA | 	rdbyte	local02, fp
1d718     27 4E 85 F1 | 	sub	fp, #39
1d71c     02 20 CE F7 | 	test	local02, #2 wz
1d720     20 00 90 AD |  if_e	jmp	#LR__3366
1d724     14 4E 05 F1 | 	add	fp, #20
1d728     A7 30 02 FB | 	rdlong	local10, fp
1d72c     0C 30 06 F1 | 	add	local10, #12
1d730     0D 30 16 FD | 	qdiv	local10, #13
1d734     14 4E 85 F1 | 	sub	fp, #20
1d738     18 30 62 FD | 	getqx	local10
1d73c     01 30 06 F1 | 	add	local10, #1
1d740     04 00 90 FD | 	jmp	#LR__3367
1d744                 | LR__3366
1d744     01 30 06 F6 | 	mov	local10, #1
1d748                 | LR__3367
1d748     18 4E 05 F1 | 	add	fp, #24
1d74c     A7 30 62 FC | 	wrlong	local10, fp
1d750     14 4E 85 F1 | 	sub	fp, #20
1d754     A7 12 02 FB | 	rdlong	arg01, fp
1d758     18 15 02 F6 | 	mov	arg02, local10
1d75c     04 4E 85 F1 | 	sub	fp, #4
1d760     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1d764     08 4E 05 F1 | 	add	fp, #8
1d768     A7 FA 61 FC | 	wrlong	result1, fp
1d76c     08 4E 85 F1 | 	sub	fp, #8
1d770     00 FA 0D F2 | 	cmp	result1, #0 wz
1d774     38 01 90 5D |  if_ne	jmp	#LR__3372
1d778     18 4E 05 F1 | 	add	fp, #24
1d77c     A7 30 02 FB | 	rdlong	local10, fp
1d780     01 30 8E F1 | 	sub	local10, #1 wz
1d784     A7 30 62 FC | 	wrlong	local10, fp
1d788     18 4E 85 F1 | 	sub	fp, #24
1d78c     20 01 90 AD |  if_e	jmp	#LR__3372
1d790     04 4E 05 F1 | 	add	fp, #4
1d794     A7 30 02 FB | 	rdlong	local10, fp
1d798     18 13 02 F6 | 	mov	arg01, local10
1d79c     14 4E 05 F1 | 	add	fp, #20
1d7a0     A7 18 02 FB | 	rdlong	arg04, fp
1d7a4     18 4E 85 F1 | 	sub	fp, #24
1d7a8     05 18 66 F0 | 	shl	arg04, #5
1d7ac     10 30 06 F1 | 	add	local10, #16
1d7b0     18 15 02 FB | 	rdlong	arg02, local10
1d7b4     0C 15 82 F1 | 	sub	arg02, arg04
1d7b8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1d7bc     08 4E 05 F1 | 	add	fp, #8
1d7c0     A7 FA 61 FC | 	wrlong	result1, fp
1d7c4     08 4E 85 F1 | 	sub	fp, #8
1d7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d7cc     E0 00 90 5D |  if_ne	jmp	#LR__3371
1d7d0     04 4E 05 F1 | 	add	fp, #4
1d7d4     A7 12 02 FB | 	rdlong	arg01, fp
1d7d8     04 4E 85 F1 | 	sub	fp, #4
1d7dc     20 12 06 F1 | 	add	arg01, #32
1d7e0     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1d7e4     FD 30 02 F6 | 	mov	local10, result1
1d7e8     28 4E 05 F1 | 	add	fp, #40
1d7ec     A7 30 42 FC | 	wrbyte	local10, fp
1d7f0     28 4E 85 F1 | 	sub	fp, #40
1d7f4                 | ' 			sum = sum_sfn(dp->fn);
1d7f4                 | ' 			do {
1d7f4                 | LR__3368
1d7f4     0C 4E 05 F1 | 	add	fp, #12
1d7f8     A7 12 02 FB | 	rdlong	arg01, fp
1d7fc     08 4E 85 F1 | 	sub	fp, #8
1d800     A7 1E 02 FB | 	rdlong	local01, fp
1d804     04 4E 85 F1 | 	sub	fp, #4
1d808     18 1E 06 F1 | 	add	local01, #24
1d80c     0F 15 02 FB | 	rdlong	arg02, local01
1d810     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1d814     08 4E 05 F1 | 	add	fp, #8
1d818     A7 FA 61 FC | 	wrlong	result1, fp
1d81c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d820     08 4E 85 F1 | 	sub	fp, #8
1d824     88 00 90 5D |  if_ne	jmp	#LR__3370
1d828     0C 4E 05 F1 | 	add	fp, #12
1d82c     A7 20 02 FB | 	rdlong	local02, fp
1d830     0C 20 06 F1 | 	add	local02, #12
1d834     10 13 02 FB | 	rdlong	arg01, local02
1d838     08 4E 85 F1 | 	sub	fp, #8
1d83c     A7 1E 02 FB | 	rdlong	local01, fp
1d840     1C 1E 06 F1 | 	add	local01, #28
1d844     0F 15 02 FB | 	rdlong	arg02, local01
1d848     14 4E 05 F1 | 	add	fp, #20
1d84c     A7 16 02 FB | 	rdlong	arg03, fp
1d850     10 4E 05 F1 | 	add	fp, #16
1d854     A7 18 C2 FA | 	rdbyte	arg04, fp
1d858     28 4E 85 F1 | 	sub	fp, #40
1d85c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1d860     0C 4E 05 F1 | 	add	fp, #12
1d864     A7 30 02 FB | 	rdlong	local10, fp
1d868     03 30 06 F1 | 	add	local10, #3
1d86c     18 03 48 FC | 	wrbyte	#1, local10
1d870     08 4E 85 F1 | 	sub	fp, #8
1d874     A7 12 02 FB | 	rdlong	arg01, fp
1d878     04 4E 85 F1 | 	sub	fp, #4
1d87c     00 14 06 F6 | 	mov	arg02, #0
1d880     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1d884     08 4E 05 F1 | 	add	fp, #8
1d888     A7 FA 61 FC | 	wrlong	result1, fp
1d88c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d890     08 4E 85 F1 | 	sub	fp, #8
1d894     18 00 90 5D |  if_ne	jmp	#LR__3369
1d898     18 4E 05 F1 | 	add	fp, #24
1d89c     A7 30 02 FB | 	rdlong	local10, fp
1d8a0     01 30 8E F1 | 	sub	local10, #1 wz
1d8a4     A7 30 62 FC | 	wrlong	local10, fp
1d8a8     18 4E 85 F1 | 	sub	fp, #24
1d8ac     44 FF 9F 5D |  if_ne	jmp	#LR__3368
1d8b0                 | LR__3369
1d8b0                 | LR__3370
1d8b0                 | LR__3371
1d8b0                 | LR__3372
1d8b0     08 4E 05 F1 | 	add	fp, #8
1d8b4     A7 30 0A FB | 	rdlong	local10, fp wz
1d8b8     08 4E 85 F1 | 	sub	fp, #8
1d8bc     B4 00 90 5D |  if_ne	jmp	#LR__3374
1d8c0     0C 4E 05 F1 | 	add	fp, #12
1d8c4     A7 12 02 FB | 	rdlong	arg01, fp
1d8c8     08 4E 85 F1 | 	sub	fp, #8
1d8cc     A7 1E 02 FB | 	rdlong	local01, fp
1d8d0     04 4E 85 F1 | 	sub	fp, #4
1d8d4     18 1E 06 F1 | 	add	local01, #24
1d8d8     0F 15 02 FB | 	rdlong	arg02, local01
1d8dc     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1d8e0     08 4E 05 F1 | 	add	fp, #8
1d8e4     A7 FA 61 FC | 	wrlong	result1, fp
1d8e8     08 4E 85 F1 | 	sub	fp, #8
1d8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1d8f0     80 00 90 5D |  if_ne	jmp	#LR__3373
1d8f4     04 4E 05 F1 | 	add	fp, #4
1d8f8     A7 20 02 FB | 	rdlong	local02, fp
1d8fc     04 4E 85 F1 | 	sub	fp, #4
1d900     1C 20 06 F1 | 	add	local02, #28
1d904     10 13 02 FB | 	rdlong	arg01, local02
1d908     00 14 06 F6 | 	mov	arg02, #0
1d90c     20 16 06 F6 | 	mov	arg03, #32
1d910     98 00 A0 FD | 	call	#\builtin_bytefill_
1d914     04 4E 05 F1 | 	add	fp, #4
1d918     A7 14 02 FB | 	rdlong	arg02, fp
1d91c     0A 1F 02 F6 | 	mov	local01, arg02
1d920     1C 1E 06 F1 | 	add	local01, #28
1d924     0F 13 02 FB | 	rdlong	arg01, local01
1d928     04 4E 85 F1 | 	sub	fp, #4
1d92c     20 14 06 F1 | 	add	arg02, #32
1d930     0B 16 06 F6 | 	mov	arg03, #11
1d934     28 72 BF FD | 	call	#__system____builtin_memmove
1d938     04 4E 05 F1 | 	add	fp, #4
1d93c     A7 2E 02 FB | 	rdlong	local09, fp
1d940     17 31 02 F6 | 	mov	local10, local09
1d944     1C 30 06 F1 | 	add	local10, #28
1d948     18 1F 02 FB | 	rdlong	local01, local10
1d94c     2B 2E 06 F1 | 	add	local09, #43
1d950     17 31 C2 FA | 	rdbyte	local10, local09
1d954     18 30 06 F5 | 	and	local10, #24
1d958     0C 1E 06 F1 | 	add	local01, #12
1d95c     0F 31 42 FC | 	wrbyte	local10, local01
1d960     08 4E 05 F1 | 	add	fp, #8
1d964     A7 30 02 FB | 	rdlong	local10, fp
1d968     0C 4E 85 F1 | 	sub	fp, #12
1d96c     03 30 06 F1 | 	add	local10, #3
1d970     18 03 48 FC | 	wrbyte	#1, local10
1d974                 | LR__3373
1d974                 | LR__3374
1d974                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1d974                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1d974                 | ' 
1d974                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1d974                 | ' 
1d974                 | ' 			fs->wflag = 1;
1d974                 | ' 		}
1d974                 | ' 	}
1d974                 | ' 
1d974                 | ' 	return res;
1d974     08 4E 05 F1 | 	add	fp, #8
1d978     A7 FA 01 FB | 	rdlong	result1, fp
1d97c     08 4E 85 F1 | 	sub	fp, #8
1d980                 | LR__3375
1d980     A7 F0 03 F6 | 	mov	ptra, fp
1d984     B2 00 A0 FD | 	call	#popregs_
1d988                 | _fatfs_cc_dir_register_ret
1d988     2D 00 64 FD | 	ret
1d98c                 | 
1d98c                 | _fatfs_cc_dir_remove
1d98c     05 4A 05 F6 | 	mov	COUNT_, #5
1d990     A8 00 A0 FD | 	call	#pushregs_
1d994     09 1F 02 F6 | 	mov	local01, arg01
1d998     0F 21 02 FB | 	rdlong	local02, local01
1d99c     10 1E 06 F1 | 	add	local01, #16
1d9a0     0F 23 02 FB | 	rdlong	local03, local01
1d9a4     1C 1E 06 F1 | 	add	local01, #28
1d9a8     0F 15 02 FB | 	rdlong	arg02, local01
1d9ac     2C 1E 86 F1 | 	sub	local01, #44
1d9b0     FF FF 7F FF 
1d9b4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1d9b8     00 24 06 A6 |  if_e	mov	local04, #0
1d9bc     18 00 90 AD |  if_e	jmp	#LR__3380
1d9c0     0F 13 02 F6 | 	mov	arg01, local01
1d9c4     2C 1E 06 F1 | 	add	local01, #44
1d9c8     0F 15 02 FB | 	rdlong	arg02, local01
1d9cc     2C 1E 86 F1 | 	sub	local01, #44
1d9d0     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1d9d4     FD 24 02 F6 | 	mov	local04, result1
1d9d8                 | LR__3380
1d9d8     12 27 0A F6 | 	mov	local05, local04 wz
1d9dc     64 00 90 5D |  if_ne	jmp	#LR__3383
1d9e0                 | ' 		do {
1d9e0                 | LR__3381
1d9e0     18 1E 06 F1 | 	add	local01, #24
1d9e4     0F 15 02 FB | 	rdlong	arg02, local01
1d9e8     18 1E 86 F1 | 	sub	local01, #24
1d9ec     10 13 02 F6 | 	mov	arg01, local02
1d9f0     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1d9f4     FD 26 0A F6 | 	mov	local05, result1 wz
1d9f8     40 00 90 5D |  if_ne	jmp	#LR__3382
1d9fc     1C 1E 06 F1 | 	add	local01, #28
1da00     0F 25 02 FB | 	rdlong	local04, local01
1da04     12 CB 49 FC | 	wrbyte	#229, local04
1da08     03 20 06 F1 | 	add	local02, #3
1da0c     10 03 48 FC | 	wrbyte	#1, local02
1da10     03 20 86 F1 | 	sub	local02, #3
1da14     0C 1E 86 F1 | 	sub	local01, #12
1da18     0F 25 02 FB | 	rdlong	local04, local01
1da1c     10 1E 86 F1 | 	sub	local01, #16
1da20     11 25 12 F2 | 	cmp	local04, local03 wc
1da24     14 00 90 3D |  if_ae	jmp	#LR__3382
1da28     0F 13 02 F6 | 	mov	arg01, local01
1da2c     00 14 06 F6 | 	mov	arg02, #0
1da30     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1da34     FD 26 0A F6 | 	mov	local05, result1 wz
1da38     A4 FF 9F AD |  if_e	jmp	#LR__3381
1da3c                 | LR__3382
1da3c     04 26 0E F2 | 	cmp	local05, #4 wz
1da40     02 26 06 A6 |  if_e	mov	local05, #2
1da44                 | LR__3383
1da44                 | ' 	}
1da44                 | ' #line 2590 "ff.c"
1da44                 | ' 	return res;
1da44     13 FB 01 F6 | 	mov	result1, local05
1da48     A7 F0 03 F6 | 	mov	ptra, fp
1da4c     B2 00 A0 FD | 	call	#popregs_
1da50                 | _fatfs_cc_dir_remove_ret
1da50     2D 00 64 FD | 	ret
1da54                 | 
1da54                 | _fatfs_cc_get_fileinfo
1da54     0F 4A 05 F6 | 	mov	COUNT_, #15
1da58     A8 00 A0 FD | 	call	#pushregs_
1da5c     09 1F 02 F6 | 	mov	local01, arg01
1da60     0A 21 02 F6 | 	mov	local02, arg02
1da64     0F 23 02 FB | 	rdlong	local03, local01
1da68     1C 20 06 F1 | 	add	local02, #28
1da6c     10 01 48 FC | 	wrbyte	#0, local02
1da70     1C 20 86 F1 | 	sub	local02, #28
1da74     18 1E 06 F1 | 	add	local01, #24
1da78     0F 25 0A FB | 	rdlong	local04, local01 wz
1da7c     18 1E 86 F1 | 	sub	local01, #24
1da80     90 03 90 AD |  if_e	jmp	#LR__3404
1da84     2C 1E 06 F1 | 	add	local01, #44
1da88     0F 25 02 FB | 	rdlong	local04, local01
1da8c     2C 1E 86 F1 | 	sub	local01, #44
1da90     FF FF 7F FF 
1da94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1da98     D8 00 90 AD |  if_e	jmp	#LR__3393
1da9c     00 26 06 F6 | 	mov	local05, #0
1daa0     00 28 06 F6 | 	mov	local06, #0
1daa4     00 2A 06 F6 | 	mov	local07, #0
1daa8                 | ' 			si = di = 0;
1daa8                 | ' 			hs = 0;
1daa8                 | ' 			while (fs->lfnbuf[si] != 0) {
1daa8                 | LR__3390
1daa8     0C 22 06 F1 | 	add	local03, #12
1daac     11 25 02 FB | 	rdlong	local04, local03
1dab0     0C 22 86 F1 | 	sub	local03, #12
1dab4     14 2D 02 F6 | 	mov	local08, local06
1dab8     01 2C 66 F0 | 	shl	local08, #1
1dabc     12 2D 02 F1 | 	add	local08, local04
1dac0     16 25 EA FA | 	rdword	local04, local08 wz
1dac4     90 00 90 AD |  if_e	jmp	#LR__3392
1dac8     0C 22 06 F1 | 	add	local03, #12
1dacc     11 2F 02 FB | 	rdlong	local09, local03
1dad0     0C 22 86 F1 | 	sub	local03, #12
1dad4     14 31 02 F6 | 	mov	local10, local06
1dad8     01 30 66 F0 | 	shl	local10, #1
1dadc     17 31 02 F1 | 	add	local10, local09
1dae0     18 33 E2 FA | 	rdword	local11, local10
1dae4     15 25 02 F6 | 	mov	local04, local07
1dae8     0F 24 4E F7 | 	zerox	local04, #15 wz
1daec     01 28 06 F1 | 	add	local06, #1
1daf0     24 00 90 5D |  if_ne	jmp	#LR__3391
1daf4     19 35 32 F9 | 	getword	local12, local11, #0
1daf8     6C 00 00 FF 
1dafc     00 34 16 F2 | 	cmp	local12, ##55296 wc
1db00     14 00 90 CD |  if_b	jmp	#LR__3391
1db04     19 37 32 F9 | 	getword	local13, local11, #0
1db08     70 00 00 FF 
1db0c     00 36 16 F2 | 	cmp	local13, ##57344 wc
1db10     19 2B 02 C6 |  if_b	mov	local07, local11
1db14                 | ' 					hs = wc; continue;
1db14     90 FF 9F CD |  if_b	jmp	#LR__3390
1db18                 | LR__3391
1db18     15 13 32 F9 | 	getword	arg01, local07, #0
1db1c     10 12 66 F0 | 	shl	arg01, #16
1db20     19 33 32 F9 | 	getword	local11, local11, #0
1db24     19 13 42 F5 | 	or	arg01, local11
1db28     13 15 02 F6 | 	mov	arg02, local05
1db2c     1C 20 06 F1 | 	add	local02, #28
1db30     10 15 02 F1 | 	add	arg02, local02
1db34     FF 16 06 F6 | 	mov	arg03, #255
1db38     13 17 82 F1 | 	sub	arg03, local05
1db3c     1C 20 86 F1 | 	sub	local02, #28
1db40     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1db44     FD 38 0A F6 | 	mov	local14, result1 wz
1db48     00 26 06 A6 |  if_e	mov	local05, #0
1db4c     1C 27 02 51 |  if_ne	add	local05, local14
1db50     00 2A 06 56 |  if_ne	mov	local07, #0
1db54     50 FF 9F 5D |  if_ne	jmp	#LR__3390
1db58                 | LR__3392
1db58     15 25 02 F6 | 	mov	local04, local07
1db5c     0F 24 4E F7 | 	zerox	local04, #15 wz
1db60     00 26 06 56 |  if_ne	mov	local05, #0
1db64     1C 20 06 F1 | 	add	local02, #28
1db68     10 27 02 F1 | 	add	local05, local02
1db6c     13 01 48 FC | 	wrbyte	#0, local05
1db70     1C 20 86 F1 | 	sub	local02, #28
1db74                 | LR__3393
1db74     00 26 06 F6 | 	mov	local05, #0
1db78     00 28 06 F6 | 	mov	local06, #0
1db7c                 | ' 			fno->fname[di] = 0;
1db7c                 | ' 		}
1db7c                 | ' 	}
1db7c                 | ' 
1db7c                 | ' 	si = di = 0;
1db7c                 | ' 	while (si < 11) {
1db7c                 | LR__3394
1db7c     0B 28 16 F2 | 	cmp	local06, #11 wc
1db80     20 01 90 3D |  if_ae	jmp	#LR__3397
1db84     1C 1E 06 F1 | 	add	local01, #28
1db88     0F 2F 02 FB | 	rdlong	local09, local01
1db8c     1C 1E 86 F1 | 	sub	local01, #28
1db90     14 31 02 F6 | 	mov	local10, local06
1db94     17 31 02 F1 | 	add	local10, local09
1db98     18 33 C2 FA | 	rdbyte	local11, local10
1db9c     19 25 32 F9 | 	getword	local04, local11, #0
1dba0     20 24 0E F2 | 	cmp	local04, #32 wz
1dba4     01 28 06 F1 | 	add	local06, #1
1dba8     D0 FF 9F AD |  if_e	jmp	#LR__3394
1dbac     19 25 32 F9 | 	getword	local04, local11, #0
1dbb0     05 24 0E F2 | 	cmp	local04, #5 wz
1dbb4     E5 32 06 A6 |  if_e	mov	local11, #229
1dbb8     09 28 0E F2 | 	cmp	local06, #9 wz
1dbbc     20 00 90 5D |  if_ne	jmp	#LR__3395
1dbc0     0C 26 16 F2 | 	cmp	local05, #12 wc
1dbc4     18 00 90 3D |  if_ae	jmp	#LR__3395
1dbc8     13 37 02 F6 | 	mov	local13, local05
1dbcc     0C 20 06 F1 | 	add	local02, #12
1dbd0     10 37 02 F1 | 	add	local13, local02
1dbd4     1B 5D 48 FC | 	wrbyte	#46, local13
1dbd8     01 26 06 F1 | 	add	local05, #1
1dbdc     0C 20 86 F1 | 	sub	local02, #12
1dbe0                 | LR__3395
1dbe0     19 13 32 F9 | 	getword	arg01, local11, #0
1dbe4     07 12 4E F7 | 	zerox	arg01, #7 wz
1dbe8     00 FA 05 56 |  if_ne	mov	result1, #0
1dbec                 | ' 
1dbec                 | ' 	return 0;
1dbec     00 FA 05 A6 |  if_e	mov	result1, #0
1dbf0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbf4     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1dbf8     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1dbfc     50 00 90 AD |  if_e	jmp	#LR__3396
1dc00     1C 1E 06 F1 | 	add	local01, #28
1dc04     0F 31 02 FB | 	rdlong	local10, local01
1dc08     1C 1E 86 F1 | 	sub	local01, #28
1dc0c     14 2D 02 F6 | 	mov	local08, local06
1dc10     18 2D 02 F1 | 	add	local08, local10
1dc14     16 13 CA FA | 	rdbyte	arg01, local08 wz
1dc18     00 FA 05 56 |  if_ne	mov	result1, #0
1dc1c                 | ' 
1dc1c                 | ' 	return 0;
1dc1c     00 FA 05 A6 |  if_e	mov	result1, #0
1dc20     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc24     28 00 90 AD |  if_e	jmp	#LR__3396
1dc28     19 33 32 F9 | 	getword	local11, local11, #0
1dc2c     08 32 66 F0 | 	shl	local11, #8
1dc30     1C 1E 06 F1 | 	add	local01, #28
1dc34     0F 39 02 FB | 	rdlong	local14, local01
1dc38     1C 1E 86 F1 | 	sub	local01, #28
1dc3c     14 2F 02 F6 | 	mov	local09, local06
1dc40     1C 2F 02 F1 | 	add	local09, local14
1dc44     17 35 C2 FA | 	rdbyte	local12, local09
1dc48     1A 33 42 F5 | 	or	local11, local12
1dc4c     01 28 06 F1 | 	add	local06, #1
1dc50                 | LR__3396
1dc50     19 13 02 F6 | 	mov	arg01, local11
1dc54     01 00 00 FF 
1dc58     52 15 06 F6 | 	mov	arg02, ##850
1dc5c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1dc60     FD 32 02 F6 | 	mov	local11, result1
1dc64     19 25 02 F6 | 	mov	local04, local11
1dc68     0F 24 4E F7 | 	zerox	local04, #15 wz
1dc6c     00 26 06 A6 |  if_e	mov	local05, #0
1dc70     30 00 90 AD |  if_e	jmp	#LR__3397
1dc74     19 13 32 F9 | 	getword	arg01, local11, #0
1dc78     13 15 02 F6 | 	mov	arg02, local05
1dc7c     0C 20 06 F1 | 	add	local02, #12
1dc80     10 15 02 F1 | 	add	arg02, local02
1dc84     0C 16 06 F6 | 	mov	arg03, #12
1dc88     13 17 82 F1 | 	sub	arg03, local05
1dc8c     0C 20 86 F1 | 	sub	local02, #12
1dc90     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1dc94     FD 38 0A F6 | 	mov	local14, result1 wz
1dc98     00 26 06 A6 |  if_e	mov	local05, #0
1dc9c     1C 27 02 51 |  if_ne	add	local05, local14
1dca0     D8 FE 9F 5D |  if_ne	jmp	#LR__3394
1dca4                 | LR__3397
1dca4     13 25 02 F6 | 	mov	local04, local05
1dca8     0C 20 06 F1 | 	add	local02, #12
1dcac     10 25 02 F1 | 	add	local04, local02
1dcb0     12 01 48 FC | 	wrbyte	#0, local04
1dcb4     10 20 06 F1 | 	add	local02, #16
1dcb8     10 25 CA FA | 	rdbyte	local04, local02 wz
1dcbc     1C 20 86 F1 | 	sub	local02, #28
1dcc0     F8 00 90 5D |  if_ne	jmp	#LR__3403
1dcc4     00 26 0E F2 | 	cmp	local05, #0 wz
1dcc8     1C 00 90 5D |  if_ne	jmp	#LR__3398
1dccc     13 37 02 F6 | 	mov	local13, local05
1dcd0     1C 20 06 F1 | 	add	local02, #28
1dcd4     10 37 02 F1 | 	add	local13, local02
1dcd8     1B 7F 48 FC | 	wrbyte	#63, local13
1dcdc     01 26 06 F1 | 	add	local05, #1
1dce0     1C 20 86 F1 | 	sub	local02, #28
1dce4     A4 00 90 FD | 	jmp	#LR__3402
1dce8                 | LR__3398
1dce8                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1dce8     00 26 06 F6 | 	mov	local05, #0
1dcec     00 28 06 F6 | 	mov	local06, #0
1dcf0     08 3A 06 F6 | 	mov	local15, #8
1dcf4                 | LR__3399
1dcf4     14 25 02 F6 | 	mov	local04, local06
1dcf8     0C 20 06 F1 | 	add	local02, #12
1dcfc     10 25 02 F1 | 	add	local04, local02
1dd00     12 37 CA FA | 	rdbyte	local13, local04 wz
1dd04     0C 20 86 F1 | 	sub	local02, #12
1dd08     80 00 90 AD |  if_e	jmp	#LR__3401
1dd0c     14 2D 02 F6 | 	mov	local08, local06
1dd10     0C 20 06 F1 | 	add	local02, #12
1dd14     10 2D 02 F1 | 	add	local08, local02
1dd18     16 33 C2 FA | 	rdbyte	local11, local08
1dd1c     19 39 32 F9 | 	getword	local14, local11, #0
1dd20     2E 38 0E F2 | 	cmp	local14, #46 wz
1dd24     0C 20 86 F1 | 	sub	local02, #12
1dd28     10 3A 06 A6 |  if_e	mov	local15, #16
1dd2c     19 39 32 F9 | 	getword	local14, local11, #0
1dd30     41 38 16 F2 | 	cmp	local14, #65 wc
1dd34     30 00 90 CD |  if_b	jmp	#LR__3400
1dd38     19 2D 32 F9 | 	getword	local08, local11, #0
1dd3c     5B 2C 16 F2 | 	cmp	local08, #91 wc
1dd40     24 00 90 3D |  if_ae	jmp	#LR__3400
1dd44     1C 1E 06 F1 | 	add	local01, #28
1dd48     0F 2F 02 FB | 	rdlong	local09, local01
1dd4c     1C 1E 86 F1 | 	sub	local01, #28
1dd50     0C 2E 06 F1 | 	add	local09, #12
1dd54     17 31 C2 FA | 	rdbyte	local10, local09
1dd58     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1dd5c     1C 31 CA F7 | 	test	local10, local14 wz
1dd60     19 33 32 59 |  if_ne	getword	local11, local11, #0
1dd64     20 32 06 51 |  if_ne	add	local11, #32
1dd68                 | LR__3400
1dd68     13 39 02 F6 | 	mov	local14, local05
1dd6c     1C 20 06 F1 | 	add	local02, #28
1dd70     10 39 02 F1 | 	add	local14, local02
1dd74     19 33 32 F9 | 	getword	local11, local11, #0
1dd78     1C 33 42 FC | 	wrbyte	local11, local14
1dd7c     01 28 06 F1 | 	add	local06, #1
1dd80     01 26 06 F1 | 	add	local05, #1
1dd84     1C 20 86 F1 | 	sub	local02, #28
1dd88     68 FF 9F FD | 	jmp	#LR__3399
1dd8c                 | LR__3401
1dd8c                 | LR__3402
1dd8c     1C 20 06 F1 | 	add	local02, #28
1dd90     10 27 02 F1 | 	add	local05, local02
1dd94     13 01 48 FC | 	wrbyte	#0, local05
1dd98     1C 1E 06 F1 | 	add	local01, #28
1dd9c     0F 25 02 FB | 	rdlong	local04, local01
1dda0     1C 1E 86 F1 | 	sub	local01, #28
1dda4     0C 24 06 F1 | 	add	local04, #12
1dda8     12 37 CA FA | 	rdbyte	local13, local04 wz
1ddac     1C 20 86 F1 | 	sub	local02, #28
1ddb0     0C 20 06 A1 |  if_e	add	local02, #12
1ddb4     10 01 48 AC |  if_e	wrbyte	#0, local02
1ddb8     0C 20 86 A1 |  if_e	sub	local02, #12
1ddbc                 | LR__3403
1ddbc     1C 1E 06 F1 | 	add	local01, #28
1ddc0     0F 35 02 FB | 	rdlong	local12, local01
1ddc4     0B 34 06 F1 | 	add	local12, #11
1ddc8     1A 25 C2 FA | 	rdbyte	local04, local12
1ddcc     3F 24 06 F5 | 	and	local04, #63
1ddd0     08 20 06 F1 | 	add	local02, #8
1ddd4     10 25 42 FC | 	wrbyte	local04, local02
1ddd8     08 20 86 F1 | 	sub	local02, #8
1dddc     0F 13 02 FB | 	rdlong	arg01, local01
1dde0     1C 12 06 F1 | 	add	arg01, #28
1dde4                 | ' {
1dde4                 | ' 
1dde4                 | ' 	return *((DWORD*)ptr);
1dde4     09 FB 01 FB | 	rdlong	result1, arg01
1dde8     10 FB 61 FC | 	wrlong	result1, local02
1ddec     0F 13 02 FB | 	rdlong	arg01, local01
1ddf0     16 12 06 F1 | 	add	arg01, #22
1ddf4                 | ' {
1ddf4                 | ' 
1ddf4                 | ' 	return *((WORD*)ptr);
1ddf4     09 FB E1 FA | 	rdword	result1, arg01
1ddf8     06 20 06 F1 | 	add	local02, #6
1ddfc     10 FB 51 FC | 	wrword	result1, local02
1de00     0F 13 02 FB | 	rdlong	arg01, local01
1de04     18 12 06 F1 | 	add	arg01, #24
1de08                 | ' {
1de08                 | ' 
1de08                 | ' 	return *((WORD*)ptr);
1de08     09 FB E1 FA | 	rdword	result1, arg01
1de0c     02 20 86 F1 | 	sub	local02, #2
1de10     10 FB 51 FC | 	wrword	result1, local02
1de14                 | LR__3404
1de14     A7 F0 03 F6 | 	mov	ptra, fp
1de18     B2 00 A0 FD | 	call	#popregs_
1de1c                 | _fatfs_cc_get_fileinfo_ret
1de1c     2D 00 64 FD | 	ret
1de20                 | 
1de20                 | _fatfs_cc_create_name
1de20     0D 4A 05 F6 | 	mov	COUNT_, #13
1de24     A8 00 A0 FD | 	call	#pushregs_
1de28     34 F0 07 F1 | 	add	ptra, #52
1de2c     04 4E 05 F1 | 	add	fp, #4
1de30     A7 12 62 FC | 	wrlong	arg01, fp
1de34     04 4E 05 F1 | 	add	fp, #4
1de38     A7 14 62 FC | 	wrlong	arg02, fp
1de3c     0A FB 01 FB | 	rdlong	result1, arg02
1de40     28 4E 05 F1 | 	add	fp, #40
1de44     A7 FA 61 FC | 	wrlong	result1, fp
1de48     2C 4E 85 F1 | 	sub	fp, #44
1de4c     A7 FA 01 FB | 	rdlong	result1, fp
1de50     FD 1E 02 FB | 	rdlong	local01, result1
1de54     0C 1E 06 F1 | 	add	local01, #12
1de58     0F 21 02 FB | 	rdlong	local02, local01
1de5c     14 4E 05 F1 | 	add	fp, #20
1de60     A7 20 62 FC | 	wrlong	local02, fp
1de64     14 4E 05 F1 | 	add	fp, #20
1de68     A7 00 68 FC | 	wrlong	#0, fp
1de6c     2C 4E 85 F1 | 	sub	fp, #44
1de70                 | ' 
1de70                 | ' 
1de70                 | ' 
1de70                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1de70                 | ' 	for (;;) {
1de70                 | LR__3410
1de70     30 4E 05 F1 | 	add	fp, #48
1de74     A7 12 02 F6 | 	mov	arg01, fp
1de78     30 4E 85 F1 | 	sub	fp, #48
1de7c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1de80     1C 4E 05 F1 | 	add	fp, #28
1de84     A7 FA 61 FC | 	wrlong	result1, fp
1de88     1C 4E 85 F1 | 	sub	fp, #28
1de8c     FF FF 7F FF 
1de90     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1de94     06 FA 05 A6 |  if_e	mov	result1, #6
1de98     74 08 90 AD |  if_e	jmp	#LR__3450
1de9c     1C 4E 05 F1 | 	add	fp, #28
1dea0     A7 1E 02 FB | 	rdlong	local01, fp
1dea4     1C 4E 85 F1 | 	sub	fp, #28
1dea8     80 00 00 FF 
1deac     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1deb0     3C 00 90 CD |  if_b	jmp	#LR__3411
1deb4     18 4E 05 F1 | 	add	fp, #24
1deb8     A7 22 02 FB | 	rdlong	local03, fp
1debc     14 4E 05 F1 | 	add	fp, #20
1dec0     A7 1E 02 FB | 	rdlong	local01, fp
1dec4     0F 25 02 F6 | 	mov	local04, local01
1dec8     01 24 06 F1 | 	add	local04, #1
1decc     A7 24 62 FC | 	wrlong	local04, fp
1ded0     01 1E 66 F0 | 	shl	local01, #1
1ded4     11 1F 02 F1 | 	add	local01, local03
1ded8     10 4E 85 F1 | 	sub	fp, #16
1dedc     A7 26 02 FB | 	rdlong	local05, fp
1dee0     1C 4E 85 F1 | 	sub	fp, #28
1dee4     13 29 02 F6 | 	mov	local06, local05
1dee8     10 28 46 F0 | 	shr	local06, #16
1deec     0F 29 52 FC | 	wrword	local06, local01
1def0                 | LR__3411
1def0     1C 4E 05 F1 | 	add	fp, #28
1def4     A7 1E 02 FB | 	rdlong	local01, fp
1def8     08 4E 85 F1 | 	sub	fp, #8
1defc     A7 1E 52 FC | 	wrword	local01, fp
1df00     A7 1E E2 FA | 	rdword	local01, fp
1df04     14 4E 85 F1 | 	sub	fp, #20
1df08     20 1E 16 F2 | 	cmp	local01, #32 wc
1df0c     B0 00 90 CD |  if_b	jmp	#LR__3413
1df10     14 4E 05 F1 | 	add	fp, #20
1df14     A7 1E E2 FA | 	rdword	local01, fp
1df18     14 4E 85 F1 | 	sub	fp, #20
1df1c     2F 1E 0E F2 | 	cmp	local01, #47 wz
1df20     14 4E 05 51 |  if_ne	add	fp, #20
1df24     A7 24 E2 5A |  if_ne	rdword	local04, fp
1df28     14 4E 85 51 |  if_ne	sub	fp, #20
1df2c     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1df30     8C 00 90 AD |  if_e	jmp	#LR__3413
1df34     14 4E 05 F1 | 	add	fp, #20
1df38     A7 12 E2 FA | 	rdword	arg01, fp
1df3c     14 4E 85 F1 | 	sub	fp, #20
1df40     80 12 16 F2 | 	cmp	arg01, #128 wc
1df44     24 00 90 3D |  if_ae	jmp	#LR__3412
1df48     1F 01 00 FF 
1df4c     80 12 06 F6 | 	mov	arg01, ##@LR__4072
1df50     14 4E 05 F1 | 	add	fp, #20
1df54     A7 14 E2 FA | 	rdword	arg02, fp
1df58     14 4E 85 F1 | 	sub	fp, #20
1df5c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1df60     00 FA 0D F2 | 	cmp	result1, #0 wz
1df64     06 FA 05 56 |  if_ne	mov	result1, #6
1df68     A4 07 90 5D |  if_ne	jmp	#LR__3450
1df6c                 | LR__3412
1df6c     2C 4E 05 F1 | 	add	fp, #44
1df70     A7 28 02 FB | 	rdlong	local06, fp
1df74     2C 4E 85 F1 | 	sub	fp, #44
1df78     FF 28 16 F2 | 	cmp	local06, #255 wc
1df7c     06 FA 05 36 |  if_ae	mov	result1, #6
1df80     8C 07 90 3D |  if_ae	jmp	#LR__3450
1df84     18 4E 05 F1 | 	add	fp, #24
1df88     A7 22 02 FB | 	rdlong	local03, fp
1df8c     14 4E 05 F1 | 	add	fp, #20
1df90     A7 20 02 FB | 	rdlong	local02, fp
1df94     10 25 02 F6 | 	mov	local04, local02
1df98     01 24 06 F1 | 	add	local04, #1
1df9c     A7 24 62 FC | 	wrlong	local04, fp
1dfa0     10 1F 02 F6 | 	mov	local01, local02
1dfa4     01 1E 66 F0 | 	shl	local01, #1
1dfa8     11 1F 02 F1 | 	add	local01, local03
1dfac     18 4E 85 F1 | 	sub	fp, #24
1dfb0     A7 28 E2 FA | 	rdword	local06, fp
1dfb4     14 4E 85 F1 | 	sub	fp, #20
1dfb8     0F 29 52 FC | 	wrword	local06, local01
1dfbc     B0 FE 9F FD | 	jmp	#LR__3410
1dfc0                 | LR__3413
1dfc0     14 4E 05 F1 | 	add	fp, #20
1dfc4     A7 2A E2 FA | 	rdword	local07, fp
1dfc8     14 4E 85 F1 | 	sub	fp, #20
1dfcc     20 2A 16 F2 | 	cmp	local07, #32 wc
1dfd0     10 4E 05 C1 |  if_b	add	fp, #16
1dfd4     A7 08 48 CC |  if_b	wrbyte	#4, fp
1dfd8     10 4E 85 C1 |  if_b	sub	fp, #16
1dfdc     74 00 90 CD |  if_b	jmp	#LR__3418
1dfe0     97 24 48 FB | 	callpa	#(@LR__3416-@LR__3414)>>2,fcache_load_ptr_
1dfe4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1dfe4                 | LR__3414
1dfe4     30 4E 05 F1 | 	add	fp, #48
1dfe8     A7 24 02 FB | 	rdlong	local04, fp
1dfec     30 4E 85 F1 | 	sub	fp, #48
1dff0     12 2B C2 FA | 	rdbyte	local07, local04
1dff4     2F 2A 0E F2 | 	cmp	local07, #47 wz
1dff8     18 00 90 AD |  if_e	jmp	#LR__3415
1dffc     30 4E 05 F1 | 	add	fp, #48
1e000     A7 24 02 FB | 	rdlong	local04, fp
1e004     30 4E 85 F1 | 	sub	fp, #48
1e008     12 21 C2 FA | 	rdbyte	local02, local04
1e00c     5C 20 0E F2 | 	cmp	local02, #92 wz
1e010     18 00 90 5D |  if_ne	jmp	#LR__3417
1e014                 | LR__3415
1e014     30 4E 05 F1 | 	add	fp, #48
1e018     A7 1E 02 FB | 	rdlong	local01, fp
1e01c     01 1E 06 F1 | 	add	local01, #1
1e020     A7 1E 62 FC | 	wrlong	local01, fp
1e024     30 4E 85 F1 | 	sub	fp, #48
1e028     B8 FF 9F FD | 	jmp	#LR__3414
1e02c                 | LR__3416
1e02c                 | LR__3417
1e02c     10 4E 05 F1 | 	add	fp, #16
1e030     A7 00 48 FC | 	wrbyte	#0, fp
1e034     20 4E 05 F1 | 	add	fp, #32
1e038     A7 28 02 FB | 	rdlong	local06, fp
1e03c     30 4E 85 F1 | 	sub	fp, #48
1e040     14 2B C2 FA | 	rdbyte	local07, local06
1e044     20 2A 16 F2 | 	cmp	local07, #32 wc
1e048     10 4E 05 C1 |  if_b	add	fp, #16
1e04c     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e050     10 4E 85 C1 |  if_b	sub	fp, #16
1e054                 | LR__3418
1e054     08 4E 05 F1 | 	add	fp, #8
1e058     A7 2A 02 FB | 	rdlong	local07, fp
1e05c     28 4E 05 F1 | 	add	fp, #40
1e060     A7 1E 02 FB | 	rdlong	local01, fp
1e064     30 4E 85 F1 | 	sub	fp, #48
1e068     15 1F 62 FC | 	wrlong	local01, local07
1e06c     97 38 48 FB | 	callpa	#(@LR__3420-@LR__3419)>>2,fcache_load_ptr_
1e070                 | ' 	}
1e070                 | ' 	*path = p;
1e070                 | ' #line 2862 "ff.c"
1e070                 | ' 	while (di) {
1e070                 | LR__3419
1e070     2C 4E 05 F1 | 	add	fp, #44
1e074     A7 2A 0A FB | 	rdlong	local07, fp wz
1e078     2C 4E 85 F1 | 	sub	fp, #44
1e07c     60 00 90 AD |  if_e	jmp	#LR__3421
1e080     18 4E 05 F1 | 	add	fp, #24
1e084     A7 28 02 FB | 	rdlong	local06, fp
1e088     14 4E 05 F1 | 	add	fp, #20
1e08c     A7 24 02 FB | 	rdlong	local04, fp
1e090     01 24 86 F1 | 	sub	local04, #1
1e094     01 24 66 F0 | 	shl	local04, #1
1e098     14 25 02 F1 | 	add	local04, local06
1e09c     12 29 E2 FA | 	rdword	local06, local04
1e0a0     18 4E 85 F1 | 	sub	fp, #24
1e0a4     A7 28 52 FC | 	wrword	local06, fp
1e0a8     A7 2A E2 FA | 	rdword	local07, fp
1e0ac     14 4E 85 F1 | 	sub	fp, #20
1e0b0     20 2A 0E F2 | 	cmp	local07, #32 wz
1e0b4     14 4E 05 51 |  if_ne	add	fp, #20
1e0b8     A7 1E E2 5A |  if_ne	rdword	local01, fp
1e0bc     14 4E 85 51 |  if_ne	sub	fp, #20
1e0c0     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1e0c4     18 00 90 5D |  if_ne	jmp	#LR__3421
1e0c8     2C 4E 05 F1 | 	add	fp, #44
1e0cc     A7 1E 02 FB | 	rdlong	local01, fp
1e0d0     01 1E 86 F1 | 	sub	local01, #1
1e0d4     A7 1E 62 FC | 	wrlong	local01, fp
1e0d8     2C 4E 85 F1 | 	sub	fp, #44
1e0dc     90 FF 9F FD | 	jmp	#LR__3419
1e0e0                 | LR__3420
1e0e0                 | LR__3421
1e0e0     18 4E 05 F1 | 	add	fp, #24
1e0e4     A7 2C 02 FB | 	rdlong	local08, fp
1e0e8     14 4E 05 F1 | 	add	fp, #20
1e0ec     A7 24 02 FB | 	rdlong	local04, fp
1e0f0     01 24 66 F0 | 	shl	local04, #1
1e0f4     16 25 02 F1 | 	add	local04, local08
1e0f8     12 01 58 FC | 	wrword	#0, local04
1e0fc     A7 2A 0A FB | 	rdlong	local07, fp wz
1e100     2C 4E 85 F1 | 	sub	fp, #44
1e104     06 FA 05 A6 |  if_e	mov	result1, #6
1e108     04 06 90 AD |  if_e	jmp	#LR__3450
1e10c                 | ' 
1e10c                 | ' 
1e10c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1e10c     28 4E 05 F1 | 	add	fp, #40
1e110     A7 00 68 FC | 	wrlong	#0, fp
1e114     28 4E 85 F1 | 	sub	fp, #40
1e118     97 22 48 FB | 	callpa	#(@LR__3423-@LR__3422)>>2,fcache_load_ptr_
1e11c                 | LR__3422
1e11c     18 4E 05 F1 | 	add	fp, #24
1e120     A7 2E 02 FB | 	rdlong	local09, fp
1e124     10 4E 05 F1 | 	add	fp, #16
1e128     A7 30 02 FB | 	rdlong	local10, fp
1e12c     28 4E 85 F1 | 	sub	fp, #40
1e130     01 30 66 F0 | 	shl	local10, #1
1e134     17 31 02 F1 | 	add	local10, local09
1e138     18 33 E2 FA | 	rdword	local11, local10
1e13c     20 32 0E F2 | 	cmp	local11, #32 wz
1e140     1C 00 90 5D |  if_ne	jmp	#LR__3424
1e144     28 4E 05 F1 | 	add	fp, #40
1e148     A7 34 02 FB | 	rdlong	local12, fp
1e14c     1A 27 02 F6 | 	mov	local05, local12
1e150     01 26 06 F1 | 	add	local05, #1
1e154     A7 26 62 FC | 	wrlong	local05, fp
1e158     28 4E 85 F1 | 	sub	fp, #40
1e15c     BC FF 9F FD | 	jmp	#LR__3422
1e160                 | LR__3423
1e160                 | LR__3424
1e160     28 4E 05 F1 | 	add	fp, #40
1e164     A7 2A 02 FB | 	rdlong	local07, fp
1e168     28 4E 85 F1 | 	sub	fp, #40
1e16c     01 2A 16 F2 | 	cmp	local07, #1 wc
1e170     28 00 90 3D |  if_ae	jmp	#LR__3425
1e174     18 4E 05 F1 | 	add	fp, #24
1e178     A7 22 02 FB | 	rdlong	local03, fp
1e17c     10 4E 05 F1 | 	add	fp, #16
1e180     A7 2E 02 FB | 	rdlong	local09, fp
1e184     28 4E 85 F1 | 	sub	fp, #40
1e188     01 2E 66 F0 | 	shl	local09, #1
1e18c     11 2F 02 F1 | 	add	local09, local03
1e190     17 1F E2 FA | 	rdword	local01, local09
1e194     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e198     14 00 90 5D |  if_ne	jmp	#LR__3426
1e19c                 | LR__3425
1e19c     10 4E 05 F1 | 	add	fp, #16
1e1a0     A7 2A C2 FA | 	rdbyte	local07, fp
1e1a4     03 2A 46 F5 | 	or	local07, #3
1e1a8     A7 2A 42 FC | 	wrbyte	local07, fp
1e1ac     10 4E 85 F1 | 	sub	fp, #16
1e1b0                 | LR__3426
1e1b0     97 2C 48 FB | 	callpa	#(@LR__3428-@LR__3427)>>2,fcache_load_ptr_
1e1b4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1e1b4                 | LR__3427
1e1b4     2C 4E 05 F1 | 	add	fp, #44
1e1b8     A7 2A 02 FB | 	rdlong	local07, fp
1e1bc     2C 4E 85 F1 | 	sub	fp, #44
1e1c0     01 2A 16 F2 | 	cmp	local07, #1 wc
1e1c4     44 00 90 CD |  if_b	jmp	#LR__3429
1e1c8     18 4E 05 F1 | 	add	fp, #24
1e1cc     A7 28 02 FB | 	rdlong	local06, fp
1e1d0     14 4E 05 F1 | 	add	fp, #20
1e1d4     A7 22 02 FB | 	rdlong	local03, fp
1e1d8     2C 4E 85 F1 | 	sub	fp, #44
1e1dc     01 22 86 F1 | 	sub	local03, #1
1e1e0     01 22 66 F0 | 	shl	local03, #1
1e1e4     14 23 02 F1 | 	add	local03, local06
1e1e8     11 1F E2 FA | 	rdword	local01, local03
1e1ec     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e1f0     18 00 90 AD |  if_e	jmp	#LR__3429
1e1f4     2C 4E 05 F1 | 	add	fp, #44
1e1f8     A7 1E 02 FB | 	rdlong	local01, fp
1e1fc     01 1E 86 F1 | 	sub	local01, #1
1e200     A7 1E 62 FC | 	wrlong	local01, fp
1e204     2C 4E 85 F1 | 	sub	fp, #44
1e208     A8 FF 9F FD | 	jmp	#LR__3427
1e20c                 | LR__3428
1e20c                 | LR__3429
1e20c     04 4E 05 F1 | 	add	fp, #4
1e210     A7 12 02 FB | 	rdlong	arg01, fp
1e214     04 4E 85 F1 | 	sub	fp, #4
1e218     20 12 06 F1 | 	add	arg01, #32
1e21c     20 14 06 F6 | 	mov	arg02, #32
1e220     0B 16 06 F6 | 	mov	arg03, #11
1e224     09 37 02 F6 | 	mov	local13, arg01
1e228     98 00 A0 FD | 	call	#\builtin_bytefill_
1e22c     1B FB 01 F6 | 	mov	result1, local13
1e230     0C 4E 05 F1 | 	add	fp, #12
1e234     A7 00 48 FC | 	wrbyte	#0, fp
1e238     A7 2A C2 FA | 	rdbyte	local07, fp
1e23c     14 4E 05 F1 | 	add	fp, #20
1e240     A7 2A 62 FC | 	wrlong	local07, fp
1e244     04 4E 05 F1 | 	add	fp, #4
1e248     A7 10 68 FC | 	wrlong	#8, fp
1e24c     24 4E 85 F1 | 	sub	fp, #36
1e250                 | ' 
1e250                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1e250                 | ' 	i = b = 0; ni = 8;
1e250                 | ' 	for (;;) {
1e250                 | LR__3430
1e250     18 4E 05 F1 | 	add	fp, #24
1e254     A7 22 02 FB | 	rdlong	local03, fp
1e258     10 4E 05 F1 | 	add	fp, #16
1e25c     A7 2E 02 FB | 	rdlong	local09, fp
1e260     17 25 02 F6 | 	mov	local04, local09
1e264     01 24 06 F1 | 	add	local04, #1
1e268     A7 24 62 FC | 	wrlong	local04, fp
1e26c     01 2E 66 F0 | 	shl	local09, #1
1e270     11 2F 02 F1 | 	add	local09, local03
1e274     17 29 E2 FA | 	rdword	local06, local09
1e278     14 4E 85 F1 | 	sub	fp, #20
1e27c     A7 28 52 FC | 	wrword	local06, fp
1e280     A7 2A EA FA | 	rdword	local07, fp wz
1e284     14 4E 85 F1 | 	sub	fp, #20
1e288     74 03 90 AD |  if_e	jmp	#LR__3446
1e28c     14 4E 05 F1 | 	add	fp, #20
1e290     A7 2A E2 FA | 	rdword	local07, fp
1e294     14 4E 85 F1 | 	sub	fp, #20
1e298     20 2A 0E F2 | 	cmp	local07, #32 wz
1e29c     30 00 90 AD |  if_e	jmp	#LR__3431
1e2a0     14 4E 05 F1 | 	add	fp, #20
1e2a4     A7 1E E2 FA | 	rdword	local01, fp
1e2a8     14 4E 85 F1 | 	sub	fp, #20
1e2ac     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e2b0     34 00 90 5D |  if_ne	jmp	#LR__3432
1e2b4     28 4E 05 F1 | 	add	fp, #40
1e2b8     A7 24 02 FB | 	rdlong	local04, fp
1e2bc     04 4E 05 F1 | 	add	fp, #4
1e2c0     A7 30 02 FB | 	rdlong	local10, fp
1e2c4     2C 4E 85 F1 | 	sub	fp, #44
1e2c8     18 25 0A F2 | 	cmp	local04, local10 wz
1e2cc     18 00 90 AD |  if_e	jmp	#LR__3432
1e2d0                 | LR__3431
1e2d0     10 4E 05 F1 | 	add	fp, #16
1e2d4     A7 2A C2 FA | 	rdbyte	local07, fp
1e2d8     03 2A 46 F5 | 	or	local07, #3
1e2dc     A7 2A 42 FC | 	wrbyte	local07, fp
1e2e0     10 4E 85 F1 | 	sub	fp, #16
1e2e4                 | ' 			cf |=  0x01  |  0x02 ;
1e2e4                 | ' 			continue;
1e2e4     68 FF 9F FD | 	jmp	#LR__3430
1e2e8                 | LR__3432
1e2e8     20 4E 05 F1 | 	add	fp, #32
1e2ec     A7 2A 02 FB | 	rdlong	local07, fp
1e2f0     04 4E 05 F1 | 	add	fp, #4
1e2f4     A7 1E 02 FB | 	rdlong	local01, fp
1e2f8     24 4E 85 F1 | 	sub	fp, #36
1e2fc     0F 2B 12 F2 | 	cmp	local07, local01 wc
1e300     1C 00 90 3D |  if_ae	jmp	#LR__3433
1e304     28 4E 05 F1 | 	add	fp, #40
1e308     A7 2C 02 FB | 	rdlong	local08, fp
1e30c     04 4E 05 F1 | 	add	fp, #4
1e310     A7 30 02 FB | 	rdlong	local10, fp
1e314     2C 4E 85 F1 | 	sub	fp, #44
1e318     18 2D 0A F2 | 	cmp	local08, local10 wz
1e31c     B0 00 90 5D |  if_ne	jmp	#LR__3435
1e320                 | LR__3433
1e320     24 4E 05 F1 | 	add	fp, #36
1e324     A7 2A 02 FB | 	rdlong	local07, fp
1e328     24 4E 85 F1 | 	sub	fp, #36
1e32c     0B 2A 0E F2 | 	cmp	local07, #11 wz
1e330     18 00 90 5D |  if_ne	jmp	#LR__3434
1e334     10 4E 05 F1 | 	add	fp, #16
1e338     A7 2A C2 FA | 	rdbyte	local07, fp
1e33c     03 2A 46 F5 | 	or	local07, #3
1e340     A7 2A 42 FC | 	wrbyte	local07, fp
1e344     10 4E 85 F1 | 	sub	fp, #16
1e348                 | ' 				cf |=  0x01  |  0x02 ;
1e348                 | ' 				break;
1e348     B4 02 90 FD | 	jmp	#LR__3446
1e34c                 | LR__3434
1e34c     28 4E 05 F1 | 	add	fp, #40
1e350     A7 2A 02 FB | 	rdlong	local07, fp
1e354     04 4E 05 F1 | 	add	fp, #4
1e358     A7 1E 02 FB | 	rdlong	local01, fp
1e35c     2C 4E 85 F1 | 	sub	fp, #44
1e360     0F 2B 0A F2 | 	cmp	local07, local01 wz
1e364     10 4E 05 51 |  if_ne	add	fp, #16
1e368     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e36c     03 2A 46 55 |  if_ne	or	local07, #3
1e370     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e374     10 4E 85 51 |  if_ne	sub	fp, #16
1e378     28 4E 05 F1 | 	add	fp, #40
1e37c     A7 2A 02 FB | 	rdlong	local07, fp
1e380     04 4E 05 F1 | 	add	fp, #4
1e384     A7 20 02 FB | 	rdlong	local02, fp
1e388     2C 4E 85 F1 | 	sub	fp, #44
1e38c     10 2B 1A F2 | 	cmp	local07, local02 wcz
1e390     6C 02 90 1D |  if_a	jmp	#LR__3446
1e394     2C 4E 05 F1 | 	add	fp, #44
1e398     A7 2A 02 FB | 	rdlong	local07, fp
1e39c     04 4E 85 F1 | 	sub	fp, #4
1e3a0     A7 2A 62 FC | 	wrlong	local07, fp
1e3a4     08 4E 85 F1 | 	sub	fp, #8
1e3a8     A7 10 68 FC | 	wrlong	#8, fp
1e3ac     04 4E 05 F1 | 	add	fp, #4
1e3b0     A7 16 68 FC | 	wrlong	#11, fp
1e3b4     18 4E 85 F1 | 	sub	fp, #24
1e3b8     A7 32 C2 FA | 	rdbyte	local11, fp
1e3bc     19 2B E2 F8 | 	getbyte	local07, local11, #0
1e3c0     02 2A 66 F0 | 	shl	local07, #2
1e3c4     A7 2A 42 FC | 	wrbyte	local07, fp
1e3c8     0C 4E 85 F1 | 	sub	fp, #12
1e3cc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1e3cc                 | ' 			continue;
1e3cc     80 FE 9F FD | 	jmp	#LR__3430
1e3d0                 | LR__3435
1e3d0     14 4E 05 F1 | 	add	fp, #20
1e3d4     A7 2A E2 FA | 	rdword	local07, fp
1e3d8     14 4E 85 F1 | 	sub	fp, #20
1e3dc     80 2A 16 F2 | 	cmp	local07, #128 wc
1e3e0     6C 00 90 CD |  if_b	jmp	#LR__3437
1e3e4     10 4E 05 F1 | 	add	fp, #16
1e3e8     A7 2A C2 FA | 	rdbyte	local07, fp
1e3ec     02 2A 46 F5 | 	or	local07, #2
1e3f0     A7 2A 42 FC | 	wrbyte	local07, fp
1e3f4     04 4E 05 F1 | 	add	fp, #4
1e3f8     A7 12 E2 FA | 	rdword	arg01, fp
1e3fc     14 4E 85 F1 | 	sub	fp, #20
1e400     01 00 00 FF 
1e404     52 15 06 F6 | 	mov	arg02, ##850
1e408     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1e40c     14 4E 05 F1 | 	add	fp, #20
1e410     A7 FA 51 FC | 	wrword	result1, fp
1e414     A7 2A E2 FA | 	rdword	local07, fp
1e418     14 4E 85 F1 | 	sub	fp, #20
1e41c     80 2A CE F7 | 	test	local07, #128 wz
1e420     2C 00 90 AD |  if_e	jmp	#LR__3436
1e424     14 4E 05 F1 | 	add	fp, #20
1e428     A7 20 E2 FA | 	rdword	local02, fp
1e42c     7F 20 06 F5 | 	and	local02, #127
1e430     01 00 00 FF 
1e434     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1e438     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1e43c     10 2B C2 FA | 	rdbyte	local07, local02
1e440     A7 2A 52 FC | 	wrword	local07, fp
1e444     14 4E 85 F1 | 	sub	fp, #20
1e448     01 00 00 FF 
1e44c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1e450                 | LR__3436
1e450                 | LR__3437
1e450     14 4E 05 F1 | 	add	fp, #20
1e454     A7 2A E2 FA | 	rdword	local07, fp
1e458     14 4E 85 F1 | 	sub	fp, #20
1e45c     00 2B 16 F2 | 	cmp	local07, #256 wc
1e460     88 00 90 CD |  if_b	jmp	#LR__3439
1e464     24 4E 05 F1 | 	add	fp, #36
1e468     A7 2A 02 FB | 	rdlong	local07, fp
1e46c     01 2A 86 F1 | 	sub	local07, #1
1e470     04 4E 85 F1 | 	sub	fp, #4
1e474     A7 20 02 FB | 	rdlong	local02, fp
1e478     20 4E 85 F1 | 	sub	fp, #32
1e47c     15 21 12 F2 | 	cmp	local02, local07 wc
1e480     2C 00 90 CD |  if_b	jmp	#LR__3438
1e484     10 4E 05 F1 | 	add	fp, #16
1e488     A7 32 C2 FA | 	rdbyte	local11, fp
1e48c     19 2B E2 F8 | 	getbyte	local07, local11, #0
1e490     03 2A 46 F5 | 	or	local07, #3
1e494     A7 2A 42 FC | 	wrbyte	local07, fp
1e498     14 4E 05 F1 | 	add	fp, #20
1e49c     A7 2A 02 FB | 	rdlong	local07, fp
1e4a0     04 4E 85 F1 | 	sub	fp, #4
1e4a4     A7 2A 62 FC | 	wrlong	local07, fp
1e4a8     20 4E 85 F1 | 	sub	fp, #32
1e4ac                 | ' 				cf |=  0x01  |  0x02 ;
1e4ac                 | ' 				i = ni; continue;
1e4ac     A0 FD 9F FD | 	jmp	#LR__3430
1e4b0                 | LR__3438
1e4b0     04 4E 05 F1 | 	add	fp, #4
1e4b4     A7 2E 02 FB | 	rdlong	local09, fp
1e4b8     1C 4E 05 F1 | 	add	fp, #28
1e4bc     A7 30 02 FB | 	rdlong	local10, fp
1e4c0     18 25 02 F6 | 	mov	local04, local10
1e4c4     01 24 06 F1 | 	add	local04, #1
1e4c8     A7 24 62 FC | 	wrlong	local04, fp
1e4cc     20 2E 06 F1 | 	add	local09, #32
1e4d0     17 31 02 F1 | 	add	local10, local09
1e4d4     0C 4E 85 F1 | 	sub	fp, #12
1e4d8     A7 22 E2 FA | 	rdword	local03, fp
1e4dc     14 4E 85 F1 | 	sub	fp, #20
1e4e0     08 22 46 F0 | 	shr	local03, #8
1e4e4     18 23 42 FC | 	wrbyte	local03, local10
1e4e8     D4 00 90 FD | 	jmp	#LR__3445
1e4ec                 | LR__3439
1e4ec     14 4E 05 F1 | 	add	fp, #20
1e4f0     A7 2A EA FA | 	rdword	local07, fp wz
1e4f4     14 4E 85 F1 | 	sub	fp, #20
1e4f8     20 00 90 AD |  if_e	jmp	#LR__3440
1e4fc     1F 01 00 FF 
1e500     89 12 06 F6 | 	mov	arg01, ##@LR__4073
1e504     14 4E 05 F1 | 	add	fp, #20
1e508     A7 14 E2 FA | 	rdword	arg02, fp
1e50c     14 4E 85 F1 | 	sub	fp, #20
1e510     48 CB BF FD | 	call	#_fatfs_cc_strchr
1e514     00 FA 0D F2 | 	cmp	result1, #0 wz
1e518     20 00 90 AD |  if_e	jmp	#LR__3441
1e51c                 | LR__3440
1e51c     14 4E 05 F1 | 	add	fp, #20
1e520     A7 BE 58 FC | 	wrword	#95, fp
1e524     04 4E 85 F1 | 	sub	fp, #4
1e528     A7 2A C2 FA | 	rdbyte	local07, fp
1e52c     03 2A 46 F5 | 	or	local07, #3
1e530     A7 2A 42 FC | 	wrbyte	local07, fp
1e534     10 4E 85 F1 | 	sub	fp, #16
1e538     84 00 90 FD | 	jmp	#LR__3444
1e53c                 | LR__3441
1e53c     14 4E 05 F1 | 	add	fp, #20
1e540     A7 2A E2 FA | 	rdword	local07, fp
1e544     14 4E 85 F1 | 	sub	fp, #20
1e548     41 2A 16 F2 | 	cmp	local07, #65 wc
1e54c     24 00 90 CD |  if_b	jmp	#LR__3442
1e550     14 4E 05 F1 | 	add	fp, #20
1e554     A7 1E E2 FA | 	rdword	local01, fp
1e558     14 4E 85 F1 | 	sub	fp, #20
1e55c     5B 1E 16 F2 | 	cmp	local01, #91 wc
1e560     0C 4E 05 C1 |  if_b	add	fp, #12
1e564     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1e568     02 2A 46 C5 |  if_b	or	local07, #2
1e56c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1e570     0C 4E 85 C1 |  if_b	sub	fp, #12
1e574                 | LR__3442
1e574     14 4E 05 F1 | 	add	fp, #20
1e578     A7 2A E2 FA | 	rdword	local07, fp
1e57c     14 4E 85 F1 | 	sub	fp, #20
1e580     61 2A 16 F2 | 	cmp	local07, #97 wc
1e584     38 00 90 CD |  if_b	jmp	#LR__3443
1e588     14 4E 05 F1 | 	add	fp, #20
1e58c     A7 1E E2 FA | 	rdword	local01, fp
1e590     14 4E 85 F1 | 	sub	fp, #20
1e594     7B 1E 16 F2 | 	cmp	local01, #123 wc
1e598     24 00 90 3D |  if_ae	jmp	#LR__3443
1e59c     0C 4E 05 F1 | 	add	fp, #12
1e5a0     A7 2A C2 FA | 	rdbyte	local07, fp
1e5a4     01 2A 46 F5 | 	or	local07, #1
1e5a8     A7 2A 42 FC | 	wrbyte	local07, fp
1e5ac     08 4E 05 F1 | 	add	fp, #8
1e5b0     A7 2A E2 FA | 	rdword	local07, fp
1e5b4     20 2A 86 F1 | 	sub	local07, #32
1e5b8     A7 2A 52 FC | 	wrword	local07, fp
1e5bc     14 4E 85 F1 | 	sub	fp, #20
1e5c0                 | LR__3443
1e5c0                 | LR__3444
1e5c0                 | LR__3445
1e5c0     04 4E 05 F1 | 	add	fp, #4
1e5c4     A7 32 02 FB | 	rdlong	local11, fp
1e5c8     19 2F 02 F6 | 	mov	local09, local11
1e5cc     1C 4E 05 F1 | 	add	fp, #28
1e5d0     A7 20 02 FB | 	rdlong	local02, fp
1e5d4     10 25 02 F6 | 	mov	local04, local02
1e5d8     01 24 06 F1 | 	add	local04, #1
1e5dc     A7 24 62 FC | 	wrlong	local04, fp
1e5e0     10 31 02 F6 | 	mov	local10, local02
1e5e4     20 2E 06 F1 | 	add	local09, #32
1e5e8     17 31 02 F1 | 	add	local10, local09
1e5ec     0C 4E 85 F1 | 	sub	fp, #12
1e5f0     A7 22 E2 FA | 	rdword	local03, fp
1e5f4     14 4E 85 F1 | 	sub	fp, #20
1e5f8     18 23 42 FC | 	wrbyte	local03, local10
1e5fc     50 FC 9F FD | 	jmp	#LR__3430
1e600                 | LR__3446
1e600     04 4E 05 F1 | 	add	fp, #4
1e604     A7 32 02 FB | 	rdlong	local11, fp
1e608     04 4E 85 F1 | 	sub	fp, #4
1e60c     20 32 06 F1 | 	add	local11, #32
1e610     19 2B C2 FA | 	rdbyte	local07, local11
1e614     E5 2A 0E F2 | 	cmp	local07, #229 wz
1e618     04 4E 05 A1 |  if_e	add	fp, #4
1e61c     A7 2A 02 AB |  if_e	rdlong	local07, fp
1e620     04 4E 85 A1 |  if_e	sub	fp, #4
1e624     20 2A 06 A1 |  if_e	add	local07, #32
1e628     15 0B 48 AC |  if_e	wrbyte	#5, local07
1e62c     24 4E 05 F1 | 	add	fp, #36
1e630     A7 2A 02 FB | 	rdlong	local07, fp
1e634     24 4E 85 F1 | 	sub	fp, #36
1e638     08 2A 0E F2 | 	cmp	local07, #8 wz
1e63c     0C 4E 05 A1 |  if_e	add	fp, #12
1e640     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1e644     02 2A 66 A0 |  if_e	shl	local07, #2
1e648     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1e64c     0C 4E 85 A1 |  if_e	sub	fp, #12
1e650     0C 4E 05 F1 | 	add	fp, #12
1e654     A7 2A C2 FA | 	rdbyte	local07, fp
1e658     0C 4E 85 F1 | 	sub	fp, #12
1e65c     0C 2A 06 F5 | 	and	local07, #12
1e660     0C 2A 0E F2 | 	cmp	local07, #12 wz
1e664     18 00 90 AD |  if_e	jmp	#LR__3447
1e668     0C 4E 05 F1 | 	add	fp, #12
1e66c     A7 1E C2 FA | 	rdbyte	local01, fp
1e670     0C 4E 85 F1 | 	sub	fp, #12
1e674     03 1E 06 F5 | 	and	local01, #3
1e678     03 1E 0E F2 | 	cmp	local01, #3 wz
1e67c     14 00 90 5D |  if_ne	jmp	#LR__3448
1e680                 | LR__3447
1e680     10 4E 05 F1 | 	add	fp, #16
1e684     A7 2A C2 FA | 	rdbyte	local07, fp
1e688     02 2A 46 F5 | 	or	local07, #2
1e68c     A7 2A 42 FC | 	wrbyte	local07, fp
1e690     10 4E 85 F1 | 	sub	fp, #16
1e694                 | LR__3448
1e694     10 4E 05 F1 | 	add	fp, #16
1e698     A7 2A C2 FA | 	rdbyte	local07, fp
1e69c     10 4E 85 F1 | 	sub	fp, #16
1e6a0     02 2A CE F7 | 	test	local07, #2 wz
1e6a4     48 00 90 5D |  if_ne	jmp	#LR__3449
1e6a8     0C 4E 05 F1 | 	add	fp, #12
1e6ac     A7 2A C2 FA | 	rdbyte	local07, fp
1e6b0     0C 4E 85 F1 | 	sub	fp, #12
1e6b4     01 2A CE F7 | 	test	local07, #1 wz
1e6b8     10 4E 05 51 |  if_ne	add	fp, #16
1e6bc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e6c0     10 2A 46 55 |  if_ne	or	local07, #16
1e6c4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e6c8     10 4E 85 51 |  if_ne	sub	fp, #16
1e6cc     0C 4E 05 F1 | 	add	fp, #12
1e6d0     A7 2A C2 FA | 	rdbyte	local07, fp
1e6d4     0C 4E 85 F1 | 	sub	fp, #12
1e6d8     04 2A CE F7 | 	test	local07, #4 wz
1e6dc     10 4E 05 51 |  if_ne	add	fp, #16
1e6e0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e6e4     08 2A 46 55 |  if_ne	or	local07, #8
1e6e8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e6ec     10 4E 85 51 |  if_ne	sub	fp, #16
1e6f0                 | LR__3449
1e6f0     04 4E 05 F1 | 	add	fp, #4
1e6f4     A7 2A 02 FB | 	rdlong	local07, fp
1e6f8     0C 4E 05 F1 | 	add	fp, #12
1e6fc     A7 1E C2 FA | 	rdbyte	local01, fp
1e700     10 4E 85 F1 | 	sub	fp, #16
1e704     2B 2A 06 F1 | 	add	local07, #43
1e708     15 1F 42 FC | 	wrbyte	local01, local07
1e70c                 | ' 	}
1e70c                 | ' 
1e70c                 | ' 	dp->fn[ 11 ] = cf;
1e70c                 | ' 
1e70c                 | ' 	return FR_OK;
1e70c     00 FA 05 F6 | 	mov	result1, #0
1e710                 | LR__3450
1e710     A7 F0 03 F6 | 	mov	ptra, fp
1e714     B2 00 A0 FD | 	call	#popregs_
1e718                 | _fatfs_cc_create_name_ret
1e718     2D 00 64 FD | 	ret
1e71c                 | 
1e71c                 | _fatfs_cc_follow_path
1e71c     02 4A 05 F6 | 	mov	COUNT_, #2
1e720     A8 00 A0 FD | 	call	#pushregs_
1e724     18 F0 07 F1 | 	add	ptra, #24
1e728     04 4E 05 F1 | 	add	fp, #4
1e72c     A7 12 62 FC | 	wrlong	arg01, fp
1e730     04 4E 05 F1 | 	add	fp, #4
1e734     A7 14 62 FC | 	wrlong	arg02, fp
1e738     04 4E 85 F1 | 	sub	fp, #4
1e73c     A7 FA 01 FB | 	rdlong	result1, fp
1e740     FD 1E 02 FB | 	rdlong	local01, result1
1e744     10 4E 05 F1 | 	add	fp, #16
1e748     A7 1E 62 FC | 	wrlong	local01, fp
1e74c     14 4E 85 F1 | 	sub	fp, #20
1e750     97 24 48 FB | 	callpa	#(@LR__3462-@LR__3460)>>2,fcache_load_ptr_
1e754                 | ' )
1e754                 | ' {
1e754                 | ' 	FRESULT res;
1e754                 | ' 	BYTE ns;
1e754                 | ' 	FATFS *fs = dp->obj.fs;
1e754                 | ' #line 3034 "ff.c"
1e754                 | ' 	{
1e754                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1e754                 | LR__3460
1e754     08 4E 05 F1 | 	add	fp, #8
1e758     A7 1E 02 FB | 	rdlong	local01, fp
1e75c     08 4E 85 F1 | 	sub	fp, #8
1e760     0F 1F C2 FA | 	rdbyte	local01, local01
1e764     2F 1E 0E F2 | 	cmp	local01, #47 wz
1e768     18 00 90 AD |  if_e	jmp	#LR__3461
1e76c     08 4E 05 F1 | 	add	fp, #8
1e770     A7 1E 02 FB | 	rdlong	local01, fp
1e774     08 4E 85 F1 | 	sub	fp, #8
1e778     0F 1F C2 FA | 	rdbyte	local01, local01
1e77c     5C 1E 0E F2 | 	cmp	local01, #92 wz
1e780     18 00 90 5D |  if_ne	jmp	#LR__3463
1e784                 | LR__3461
1e784     08 4E 05 F1 | 	add	fp, #8
1e788     A7 1E 02 FB | 	rdlong	local01, fp
1e78c     01 1E 06 F1 | 	add	local01, #1
1e790     A7 1E 62 FC | 	wrlong	local01, fp
1e794     08 4E 85 F1 | 	sub	fp, #8
1e798     B8 FF 9F FD | 	jmp	#LR__3460
1e79c                 | LR__3462
1e79c                 | LR__3463
1e79c     04 4E 05 F1 | 	add	fp, #4
1e7a0     A7 1E 02 FB | 	rdlong	local01, fp
1e7a4     08 1E 06 F1 | 	add	local01, #8
1e7a8     0F 01 68 FC | 	wrlong	#0, local01
1e7ac     04 4E 05 F1 | 	add	fp, #4
1e7b0     A7 1E 02 FB | 	rdlong	local01, fp
1e7b4     08 4E 85 F1 | 	sub	fp, #8
1e7b8     0F 1F C2 FA | 	rdbyte	local01, local01
1e7bc     20 1E 16 F2 | 	cmp	local01, #32 wc
1e7c0     30 00 90 3D |  if_ae	jmp	#LR__3464
1e7c4     04 4E 05 F1 | 	add	fp, #4
1e7c8     A7 1E 02 FB | 	rdlong	local01, fp
1e7cc     2B 1E 06 F1 | 	add	local01, #43
1e7d0     0F 01 49 FC | 	wrbyte	#128, local01
1e7d4     A7 12 02 FB | 	rdlong	arg01, fp
1e7d8     04 4E 85 F1 | 	sub	fp, #4
1e7dc     00 14 06 F6 | 	mov	arg02, #0
1e7e0     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1e7e4     0C 4E 05 F1 | 	add	fp, #12
1e7e8     A7 FA 61 FC | 	wrlong	result1, fp
1e7ec     0C 4E 85 F1 | 	sub	fp, #12
1e7f0     1C 01 90 FD | 	jmp	#LR__3468
1e7f4                 | LR__3464
1e7f4                 | ' 		for (;;) {
1e7f4                 | LR__3465
1e7f4     04 4E 05 F1 | 	add	fp, #4
1e7f8     A7 12 02 FB | 	rdlong	arg01, fp
1e7fc     04 4E 05 F1 | 	add	fp, #4
1e800     A7 14 02 F6 | 	mov	arg02, fp
1e804     08 4E 85 F1 | 	sub	fp, #8
1e808     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1e80c     0C 4E 05 F1 | 	add	fp, #12
1e810     A7 FA 61 FC | 	wrlong	result1, fp
1e814     00 FA 4D F2 | 	cmps	result1, #0 wz
1e818     0C 4E 85 F1 | 	sub	fp, #12
1e81c     F0 00 90 5D |  if_ne	jmp	#LR__3467
1e820     04 4E 05 F1 | 	add	fp, #4
1e824     A7 12 02 FB | 	rdlong	arg01, fp
1e828     04 4E 85 F1 | 	sub	fp, #4
1e82c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1e830     0C 4E 05 F1 | 	add	fp, #12
1e834     A7 FA 61 FC | 	wrlong	result1, fp
1e838     08 4E 85 F1 | 	sub	fp, #8
1e83c     A7 1E 02 FB | 	rdlong	local01, fp
1e840     2B 1E 06 F1 | 	add	local01, #43
1e844     0F 1F C2 FA | 	rdbyte	local01, local01
1e848     0C 4E 05 F1 | 	add	fp, #12
1e84c     A7 1E 42 FC | 	wrbyte	local01, fp
1e850     04 4E 85 F1 | 	sub	fp, #4
1e854     A7 1E 0A FB | 	rdlong	local01, fp wz
1e858     0C 4E 85 F1 | 	sub	fp, #12
1e85c     34 00 90 AD |  if_e	jmp	#LR__3466
1e860     0C 4E 05 F1 | 	add	fp, #12
1e864     A7 1E 02 FB | 	rdlong	local01, fp
1e868     0C 4E 85 F1 | 	sub	fp, #12
1e86c     04 1E 0E F2 | 	cmp	local01, #4 wz
1e870     9C 00 90 5D |  if_ne	jmp	#LR__3467
1e874     10 4E 05 F1 | 	add	fp, #16
1e878     A7 1E C2 FA | 	rdbyte	local01, fp
1e87c     10 4E 85 F1 | 	sub	fp, #16
1e880     04 1E CE F7 | 	test	local01, #4 wz
1e884     0C 4E 05 A1 |  if_e	add	fp, #12
1e888     A7 0A 68 AC |  if_e	wrlong	#5, fp
1e88c     0C 4E 85 A1 |  if_e	sub	fp, #12
1e890                 | ' 					}
1e890                 | ' 				}
1e890                 | ' 				break;
1e890     7C 00 90 FD | 	jmp	#LR__3467
1e894                 | LR__3466
1e894     10 4E 05 F1 | 	add	fp, #16
1e898     A7 1E C2 FA | 	rdbyte	local01, fp
1e89c     10 4E 85 F1 | 	sub	fp, #16
1e8a0     04 1E CE F7 | 	test	local01, #4 wz
1e8a4     68 00 90 5D |  if_ne	jmp	#LR__3467
1e8a8     04 4E 05 F1 | 	add	fp, #4
1e8ac     A7 1E 02 FB | 	rdlong	local01, fp
1e8b0     04 4E 85 F1 | 	sub	fp, #4
1e8b4     06 1E 06 F1 | 	add	local01, #6
1e8b8     0F 1F C2 FA | 	rdbyte	local01, local01
1e8bc     10 1E CE F7 | 	test	local01, #16 wz
1e8c0     0C 4E 05 A1 |  if_e	add	fp, #12
1e8c4     A7 0A 68 AC |  if_e	wrlong	#5, fp
1e8c8     0C 4E 85 A1 |  if_e	sub	fp, #12
1e8cc                 | ' 				res = FR_NO_PATH; break;
1e8cc     40 00 90 AD |  if_e	jmp	#LR__3467
1e8d0     04 4E 05 F1 | 	add	fp, #4
1e8d4     A7 20 02 FB | 	rdlong	local02, fp
1e8d8     10 1F 02 F6 | 	mov	local01, local02
1e8dc     10 4E 05 F1 | 	add	fp, #16
1e8e0     A7 14 02 FB | 	rdlong	arg02, fp
1e8e4     0A 13 02 F6 | 	mov	arg01, arg02
1e8e8     34 14 06 F1 | 	add	arg02, #52
1e8ec     14 4E 85 F1 | 	sub	fp, #20
1e8f0     10 20 06 F1 | 	add	local02, #16
1e8f4     10 21 02 FB | 	rdlong	local02, local02
1e8f8     FF 21 06 F5 | 	and	local02, #511
1e8fc     10 15 02 F1 | 	add	arg02, local02
1e900     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1e904     08 1E 06 F1 | 	add	local01, #8
1e908     0F FB 61 FC | 	wrlong	result1, local01
1e90c     E4 FE 9F FD | 	jmp	#LR__3465
1e910                 | LR__3467
1e910                 | LR__3468
1e910                 | ' 			}
1e910                 | ' #line 3090 "ff.c"
1e910                 | ' 			{
1e910                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1e910                 | ' 			}
1e910                 | ' 		}
1e910                 | ' 	}
1e910                 | ' 
1e910                 | ' 	return res;
1e910     0C 4E 05 F1 | 	add	fp, #12
1e914     A7 FA 01 FB | 	rdlong	result1, fp
1e918     0C 4E 85 F1 | 	sub	fp, #12
1e91c     A7 F0 03 F6 | 	mov	ptra, fp
1e920     B2 00 A0 FD | 	call	#popregs_
1e924                 | _fatfs_cc_follow_path_ret
1e924     2D 00 64 FD | 	ret
1e928                 | 
1e928                 | _fatfs_cc_get_ldnumber
1e928     01 00 66 F6 | 	neg	_var01, #1
1e92c     09 03 0A FB | 	rdlong	_var02, arg01 wz
1e930     01 05 02 F6 | 	mov	_var03, _var02
1e934     01 FA 65 A6 |  if_e	neg	result1, #1
1e938     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1e93c     97 10 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
1e940                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1e940                 | LR__3470
1e940     02 07 C2 FA | 	rdbyte	_var04, _var03
1e944     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1e948     20 FA 15 F2 | 	cmp	result1, #32 wc
1e94c     01 04 06 F1 | 	add	_var03, #1
1e950     03 09 02 36 |  if_ae	mov	_var05, _var04
1e954     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1e958     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1e95c     E0 FF 9F 1D |  if_a	jmp	#LR__3470
1e960                 | LR__3471
1e960     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1e964     3A 06 0E F2 | 	cmp	_var04, #58 wz
1e968     40 00 90 5D |  if_ne	jmp	#LR__3473
1e96c     01 0A 06 F6 | 	mov	_var06, #1
1e970     01 09 C2 FA | 	rdbyte	_var05, _var02
1e974     30 08 16 F2 | 	cmp	_var05, #48 wc
1e978     1C 00 90 CD |  if_b	jmp	#LR__3472
1e97c     01 09 C2 FA | 	rdbyte	_var05, _var02
1e980     3A 08 16 F2 | 	cmp	_var05, #58 wc
1e984     01 0D 02 C6 |  if_b	mov	_var07, _var02
1e988     02 0C 06 C1 |  if_b	add	_var07, #2
1e98c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1e990     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1e994     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1e998                 | LR__3472
1e998     01 0A 56 F2 | 	cmps	_var06, #1 wc
1e99c     05 01 02 C6 |  if_b	mov	_var01, _var06
1e9a0     09 05 62 CC |  if_b	wrlong	_var03, arg01
1e9a4                 | ' 			vol = i;
1e9a4                 | ' 			*path = tt;
1e9a4                 | ' 		}
1e9a4                 | ' 		return vol;
1e9a4     00 FB 01 F6 | 	mov	result1, _var01
1e9a8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1e9ac                 | LR__3473
1e9ac                 | ' 	}
1e9ac                 | ' #line 3170 "ff.c"
1e9ac                 | ' 	vol = 0;
1e9ac                 | ' 
1e9ac                 | ' 	return vol;
1e9ac     00 FA 05 F6 | 	mov	result1, #0
1e9b0                 | _fatfs_cc_get_ldnumber_ret
1e9b0     2D 00 64 FD | 	ret
1e9b4                 | 
1e9b4                 | _fatfs_cc_check_fs
1e9b4     04 4A 05 F6 | 	mov	COUNT_, #4
1e9b8     A8 00 A0 FD | 	call	#pushregs_
1e9bc     09 1F 02 F6 | 	mov	local01, arg01
1e9c0     03 1E 06 F1 | 	add	local01, #3
1e9c4     0F 01 48 FC | 	wrbyte	#0, local01
1e9c8     2D 1E 06 F1 | 	add	local01, #45
1e9cc     FF FF FF FF 
1e9d0     0F FF 6B FC | 	wrlong	##-1, local01
1e9d4     30 1E 86 F1 | 	sub	local01, #48
1e9d8     0F 13 02 F6 | 	mov	arg01, local01
1e9dc     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1e9e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9e4     04 FA 05 56 |  if_ne	mov	result1, #4
1e9e8     94 01 90 5D |  if_ne	jmp	#LR__3484
1e9ec     34 1E 06 F1 | 	add	local01, #52
1e9f0     0F 13 02 F6 | 	mov	arg01, local01
1e9f4     FE 13 06 F1 | 	add	arg01, #510
1e9f8                 | ' {
1e9f8                 | ' 
1e9f8                 | ' 	return *((WORD*)ptr);
1e9f8     09 21 E2 FA | 	rdword	local02, arg01
1e9fc     0F 23 C2 FA | 	rdbyte	local03, local01
1ea00     34 1E 86 F1 | 	sub	local01, #52
1ea04     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ea08     EB 24 0E F2 | 	cmp	local04, #235 wz
1ea0c     11 17 02 56 |  if_ne	mov	arg03, local03
1ea10     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1ea14     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1ea18     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1ea1c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1ea20     44 01 90 5D |  if_ne	jmp	#LR__3483
1ea24     10 25 32 F9 | 	getword	local04, local02, #0
1ea28     55 00 00 FF 
1ea2c     55 24 0E F2 | 	cmp	local04, ##43605 wz
1ea30     2C 00 90 5D |  if_ne	jmp	#LR__3480
1ea34     34 1E 06 F1 | 	add	local01, #52
1ea38     0F 13 02 F6 | 	mov	arg01, local01
1ea3c     34 1E 86 F1 | 	sub	local01, #52
1ea40     52 12 06 F1 | 	add	arg01, #82
1ea44     1F 01 00 FF 
1ea48     90 14 06 F6 | 	mov	arg02, ##@LR__4074
1ea4c     08 16 06 F6 | 	mov	arg03, #8
1ea50     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1ea54     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea58                 | ' 			return 0;
1ea58     00 FA 05 A6 |  if_e	mov	result1, #0
1ea5c     20 01 90 AD |  if_e	jmp	#LR__3484
1ea60                 | LR__3480
1ea60     34 1E 06 F1 | 	add	local01, #52
1ea64     0F 13 02 F6 | 	mov	arg01, local01
1ea68     0B 12 06 F1 | 	add	arg01, #11
1ea6c                 | ' {
1ea6c                 | ' 
1ea6c                 | ' 	return *((WORD*)ptr);
1ea6c     09 FB E1 FA | 	rdword	result1, arg01
1ea70     0D 1E 06 F1 | 	add	local01, #13
1ea74     0F 23 C2 FA | 	rdbyte	local03, local01
1ea78     41 1E 86 F1 | 	sub	local01, #65
1ea7c     FD 24 32 F9 | 	getword	local04, result1, #0
1ea80     FD 14 32 F9 | 	getword	arg02, result1, #0
1ea84     01 14 86 F1 | 	sub	arg02, #1
1ea88     0A 25 CA F7 | 	test	local04, arg02 wz
1ea8c     D8 00 90 5D |  if_ne	jmp	#LR__3482
1ea90     FD 14 32 F9 | 	getword	arg02, result1, #0
1ea94     01 00 00 FF 
1ea98     00 14 16 F2 | 	cmp	arg02, ##512 wc
1ea9c     C8 00 90 CD |  if_b	jmp	#LR__3482
1eaa0     FD 14 32 F9 | 	getword	arg02, result1, #0
1eaa4     01 00 00 FF 
1eaa8     01 14 16 F2 | 	cmp	arg02, ##513 wc
1eaac     B8 00 90 3D |  if_ae	jmp	#LR__3482
1eab0     11 13 02 F6 | 	mov	arg01, local03
1eab4     07 12 4E F7 | 	zerox	arg01, #7 wz
1eab8     AC 00 90 AD |  if_e	jmp	#LR__3482
1eabc     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1eac0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1eac4     01 22 86 F1 | 	sub	local03, #1
1eac8     11 13 CA F7 | 	test	arg01, local03 wz
1eacc     98 00 90 5D |  if_ne	jmp	#LR__3482
1ead0     34 1E 06 F1 | 	add	local01, #52
1ead4     0F 13 02 F6 | 	mov	arg01, local01
1ead8     34 1E 86 F1 | 	sub	local01, #52
1eadc     0E 12 06 F1 | 	add	arg01, #14
1eae0                 | ' {
1eae0                 | ' 
1eae0                 | ' 	return *((WORD*)ptr);
1eae0     09 FB E9 FA | 	rdword	result1, arg01 wz
1eae4     80 00 90 AD |  if_e	jmp	#LR__3482
1eae8     44 1E 06 F1 | 	add	local01, #68
1eaec     0F 13 C2 FA | 	rdbyte	arg01, local01
1eaf0     44 1E 86 F1 | 	sub	local01, #68
1eaf4     01 12 86 F1 | 	sub	arg01, #1
1eaf8     02 12 16 F2 | 	cmp	arg01, #2 wc
1eafc     68 00 90 3D |  if_ae	jmp	#LR__3482
1eb00     34 1E 06 F1 | 	add	local01, #52
1eb04     0F 13 02 F6 | 	mov	arg01, local01
1eb08     34 1E 86 F1 | 	sub	local01, #52
1eb0c     11 12 06 F1 | 	add	arg01, #17
1eb10                 | ' {
1eb10                 | ' 
1eb10                 | ' 	return *((WORD*)ptr);
1eb10     09 FB E9 FA | 	rdword	result1, arg01 wz
1eb14     50 00 90 AD |  if_e	jmp	#LR__3482
1eb18     34 1E 06 F1 | 	add	local01, #52
1eb1c     0F 13 02 F6 | 	mov	arg01, local01
1eb20     34 1E 86 F1 | 	sub	local01, #52
1eb24     13 12 06 F1 | 	add	arg01, #19
1eb28                 | ' {
1eb28                 | ' 
1eb28                 | ' 	return *((WORD*)ptr);
1eb28     09 FB E1 FA | 	rdword	result1, arg01
1eb2c     FD 22 32 F9 | 	getword	local03, result1, #0
1eb30     80 22 16 F2 | 	cmp	local03, #128 wc
1eb34     20 00 90 3D |  if_ae	jmp	#LR__3481
1eb38     34 1E 06 F1 | 	add	local01, #52
1eb3c     0F 13 02 F6 | 	mov	arg01, local01
1eb40     34 1E 86 F1 | 	sub	local01, #52
1eb44     20 12 06 F1 | 	add	arg01, #32
1eb48                 | ' {
1eb48                 | ' 
1eb48                 | ' 	return *((DWORD*)ptr);
1eb48     09 FB 01 FB | 	rdlong	result1, arg01
1eb4c     80 00 00 FF 
1eb50     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1eb54     10 00 90 CD |  if_b	jmp	#LR__3482
1eb58                 | LR__3481
1eb58     4A 1E 06 F1 | 	add	local01, #74
1eb5c                 | ' {
1eb5c                 | ' 
1eb5c                 | ' 	return *((WORD*)ptr);
1eb5c     0F FB E9 FA | 	rdword	result1, local01 wz
1eb60                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1eb60                 | ' 			&& ld_word(fs->win +  14 ) != 0
1eb60                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1eb60                 | ' 			&& ld_word(fs->win +  17 ) != 0
1eb60                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1eb60                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1eb60                 | ' 				return 0;
1eb60     00 FA 05 56 |  if_ne	mov	result1, #0
1eb64     18 00 90 5D |  if_ne	jmp	#LR__3484
1eb68                 | LR__3482
1eb68                 | LR__3483
1eb68                 | ' 		}
1eb68                 | ' 	}
1eb68                 | ' 	return sign == 0xAA55 ? 2 : 3;
1eb68     10 23 32 F9 | 	getword	local03, local02, #0
1eb6c     55 00 00 FF 
1eb70     55 22 0E F2 | 	cmp	local03, ##43605 wz
1eb74     02 24 06 A6 |  if_e	mov	local04, #2
1eb78     03 24 06 56 |  if_ne	mov	local04, #3
1eb7c     12 FB 01 F6 | 	mov	result1, local04
1eb80                 | LR__3484
1eb80     A7 F0 03 F6 | 	mov	ptra, fp
1eb84     B2 00 A0 FD | 	call	#popregs_
1eb88                 | _fatfs_cc_check_fs_ret
1eb88     2D 00 64 FD | 	ret
1eb8c                 | 
1eb8c                 | _fatfs_cc_find_volume
1eb8c     05 4A 05 F6 | 	mov	COUNT_, #5
1eb90     A8 00 A0 FD | 	call	#pushregs_
1eb94     24 F0 07 F1 | 	add	ptra, #36
1eb98     09 1F 02 F6 | 	mov	local01, arg01
1eb9c     0A 21 02 F6 | 	mov	local02, arg02
1eba0     0F 13 02 F6 | 	mov	arg01, local01
1eba4     00 14 06 F6 | 	mov	arg02, #0
1eba8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1ebac     02 FA 0D F2 | 	cmp	result1, #2 wz
1ebb0     0C 00 90 AD |  if_e	jmp	#LR__3490
1ebb4     03 FA 15 F2 | 	cmp	result1, #3 wc
1ebb8     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1ebbc     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3498
1ebc0                 | LR__3490
1ebc0                 | ' 	for (i = 0; i < 4; i++) {
1ebc0     00 22 06 F6 | 	mov	local03, #0
1ebc4     97 26 48 FB | 	callpa	#(@LR__3492-@LR__3491)>>2,fcache_load_ptr_
1ebc8                 | LR__3491
1ebc8     04 22 16 F2 | 	cmp	local03, #4 wc
1ebcc     44 00 90 3D |  if_ae	jmp	#LR__3493
1ebd0     11 25 02 F6 | 	mov	local04, local03
1ebd4     02 24 66 F0 | 	shl	local04, #2
1ebd8     14 4E 05 F1 | 	add	fp, #20
1ebdc     A7 24 02 F1 | 	add	local04, fp
1ebe0     34 1E 06 F1 | 	add	local01, #52
1ebe4     0F 13 02 F6 | 	mov	arg01, local01
1ebe8     34 1E 86 F1 | 	sub	local01, #52
1ebec     BE 13 06 F1 | 	add	arg01, #446
1ebf0     11 15 02 F6 | 	mov	arg02, local03
1ebf4     04 14 66 F0 | 	shl	arg02, #4
1ebf8     0A 13 02 F1 | 	add	arg01, arg02
1ebfc     08 12 06 F1 | 	add	arg01, #8
1ec00                 | ' {
1ec00                 | ' 
1ec00                 | ' 	return *((DWORD*)ptr);
1ec00     09 FB 01 FB | 	rdlong	result1, arg01
1ec04     14 4E 85 F1 | 	sub	fp, #20
1ec08     12 FB 61 FC | 	wrlong	result1, local04
1ec0c     01 22 06 F1 | 	add	local03, #1
1ec10     B4 FF 9F FD | 	jmp	#LR__3491
1ec14                 | LR__3492
1ec14                 | LR__3493
1ec14     00 20 0E F2 | 	cmp	local02, #0 wz
1ec18     10 25 02 56 |  if_ne	mov	local04, local02
1ec1c     01 24 86 51 |  if_ne	sub	local04, #1
1ec20     00 24 06 A6 |  if_e	mov	local04, #0
1ec24     12 23 02 F6 | 	mov	local03, local04
1ec28                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1ec28                 | ' 	}
1ec28                 | ' 	i = part ? part - 1 : 0;
1ec28                 | ' 	do {
1ec28                 | LR__3494
1ec28     11 25 02 F6 | 	mov	local04, local03
1ec2c     02 24 66 F0 | 	shl	local04, #2
1ec30     14 4E 05 F1 | 	add	fp, #20
1ec34     A7 24 02 F1 | 	add	local04, fp
1ec38     12 25 0A FB | 	rdlong	local04, local04 wz
1ec3c     14 4E 85 F1 | 	sub	fp, #20
1ec40     28 00 90 AD |  if_e	jmp	#LR__3495
1ec44     11 25 02 F6 | 	mov	local04, local03
1ec48     02 24 66 F0 | 	shl	local04, #2
1ec4c     14 4E 05 F1 | 	add	fp, #20
1ec50     A7 24 02 F1 | 	add	local04, fp
1ec54     12 15 02 FB | 	rdlong	arg02, local04
1ec58     0F 13 02 F6 | 	mov	arg01, local01
1ec5c     14 4E 85 F1 | 	sub	fp, #20
1ec60     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1ec64     FD 24 02 F6 | 	mov	local04, result1
1ec68     04 00 90 FD | 	jmp	#LR__3496
1ec6c                 | LR__3495
1ec6c     03 24 06 F6 | 	mov	local04, #3
1ec70                 | LR__3496
1ec70     12 27 02 F6 | 	mov	local05, local04
1ec74     00 20 0E F2 | 	cmp	local02, #0 wz
1ec78     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1ec7c     0C 00 90 8D |  if_c_and_z	jmp	#LR__3497
1ec80     01 22 06 A1 |  if_e	add	local03, #1
1ec84     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1ec88     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3494
1ec8c                 | LR__3497
1ec8c                 | ' 	return fmt;
1ec8c     13 FB 01 F6 | 	mov	result1, local05
1ec90                 | LR__3498
1ec90     A7 F0 03 F6 | 	mov	ptra, fp
1ec94     B2 00 A0 FD | 	call	#popregs_
1ec98                 | _fatfs_cc_find_volume_ret
1ec98     2D 00 64 FD | 	ret
1ec9c                 | 
1ec9c                 | _fatfs_cc_mount_volume
1ec9c     0B 4A 05 F6 | 	mov	COUNT_, #11
1eca0     A8 00 A0 FD | 	call	#pushregs_
1eca4     0A 1F 02 F6 | 	mov	local01, arg02
1eca8     0B 21 02 F6 | 	mov	local02, arg03
1ecac     0F 01 68 FC | 	wrlong	#0, local01
1ecb0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1ecb4     FD 22 02 F6 | 	mov	local03, result1
1ecb8     00 22 56 F2 | 	cmps	local03, #0 wc
1ecbc     0B FA 05 C6 |  if_b	mov	result1, #11
1ecc0     3C 05 90 CD |  if_b	jmp	#LR__3510
1ecc4     11 17 02 F6 | 	mov	arg03, local03
1ecc8     02 16 66 F0 | 	shl	arg03, #2
1eccc     F2 16 02 F1 | 	add	arg03, objptr
1ecd0     0B 25 0A FB | 	rdlong	local04, arg03 wz
1ecd4     0C FA 05 A6 |  if_e	mov	result1, #12
1ecd8     24 05 90 AD |  if_e	jmp	#LR__3510
1ecdc     0F 25 62 FC | 	wrlong	local04, local01
1ece0     10 21 E2 F8 | 	getbyte	local02, local02, #0
1ece4     FE 20 06 F5 | 	and	local02, #254
1ece8     12 17 CA FA | 	rdbyte	arg03, local04 wz
1ecec     4C 00 90 AD |  if_e	jmp	#LR__3501
1ecf0     01 24 06 F1 | 	add	local04, #1
1ecf4     12 13 CA FA | 	rdbyte	arg01, local04 wz
1ecf8     01 24 86 F1 | 	sub	local04, #1
1ecfc     01 FA 05 56 |  if_ne	mov	result1, #1
1ed00                 | ' 
1ed00                 | ' 	return Stat;
1ed00     01 00 00 AF 
1ed04     20 E4 05 A1 |  if_e	add	objptr, ##544
1ed08     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1ed0c     01 00 00 AF 
1ed10     20 E4 85 A1 |  if_e	sub	objptr, ##544
1ed14     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1ed18     01 16 CE F7 | 	test	arg03, #1 wz
1ed1c     1C 00 90 5D |  if_ne	jmp	#LR__3500
1ed20     00 20 0E F2 | 	cmp	local02, #0 wz
1ed24     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1ed28     04 FA CD 57 |  if_ne	test	result1, #4 wz
1ed2c                 | ' 				return FR_WRITE_PROTECTED;
1ed2c     0A FA 05 56 |  if_ne	mov	result1, #10
1ed30     CC 04 90 5D |  if_ne	jmp	#LR__3510
1ed34                 | ' 			}
1ed34                 | ' 			return FR_OK;
1ed34     00 FA 05 F6 | 	mov	result1, #0
1ed38     C4 04 90 FD | 	jmp	#LR__3510
1ed3c                 | LR__3500
1ed3c                 | LR__3501
1ed3c     12 01 48 FC | 	wrbyte	#0, local04
1ed40     01 24 06 F1 | 	add	local04, #1
1ed44     12 23 42 FC | 	wrbyte	local03, local04
1ed48     12 13 C2 FA | 	rdbyte	arg01, local04
1ed4c     01 24 86 F1 | 	sub	local04, #1
1ed50     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1ed54     FD 16 02 F6 | 	mov	arg03, result1
1ed58     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1ed5c     01 26 CE F7 | 	test	local05, #1 wz
1ed60                 | ' 		return FR_NOT_READY;
1ed60     03 FA 05 56 |  if_ne	mov	result1, #3
1ed64     98 04 90 5D |  if_ne	jmp	#LR__3510
1ed68     00 20 0E F2 | 	cmp	local02, #0 wz
1ed6c     0B 27 02 56 |  if_ne	mov	local05, arg03
1ed70     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1ed74     04 26 CE 57 |  if_ne	test	local05, #4 wz
1ed78                 | ' 		return FR_WRITE_PROTECTED;
1ed78     0A FA 05 56 |  if_ne	mov	result1, #10
1ed7c     80 04 90 5D |  if_ne	jmp	#LR__3510
1ed80     12 13 02 F6 | 	mov	arg01, local04
1ed84     00 14 06 F6 | 	mov	arg02, #0
1ed88     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1ed8c     FD 12 02 F6 | 	mov	arg01, result1
1ed90     04 12 0E F2 | 	cmp	arg01, #4 wz
1ed94     01 FA 05 A6 |  if_e	mov	result1, #1
1ed98     64 04 90 AD |  if_e	jmp	#LR__3510
1ed9c     02 12 16 F2 | 	cmp	arg01, #2 wc
1eda0     0D FA 05 36 |  if_ae	mov	result1, #13
1eda4     58 04 90 3D |  if_ae	jmp	#LR__3510
1eda8     30 24 06 F1 | 	add	local04, #48
1edac     12 29 02 FB | 	rdlong	local06, local04
1edb0     04 24 06 F1 | 	add	local04, #4
1edb4     12 13 02 F6 | 	mov	arg01, local04
1edb8     34 24 86 F1 | 	sub	local04, #52
1edbc     0B 12 06 F1 | 	add	arg01, #11
1edc0                 | ' {
1edc0                 | ' 
1edc0                 | ' 	return *((WORD*)ptr);
1edc0     09 FB E1 FA | 	rdword	result1, arg01
1edc4     01 00 00 FF 
1edc8     00 FA 0D F2 | 	cmp	result1, ##512 wz
1edcc     0D FA 05 56 |  if_ne	mov	result1, #13
1edd0     2C 04 90 5D |  if_ne	jmp	#LR__3510
1edd4     34 24 06 F1 | 	add	local04, #52
1edd8     12 13 02 F6 | 	mov	arg01, local04
1eddc     34 24 86 F1 | 	sub	local04, #52
1ede0     16 12 06 F1 | 	add	arg01, #22
1ede4                 | ' {
1ede4                 | ' 
1ede4                 | ' 	return *((WORD*)ptr);
1ede4     09 FB E1 FA | 	rdword	result1, arg01
1ede8     FD 2A 0A F6 | 	mov	local07, result1 wz
1edec     18 00 90 5D |  if_ne	jmp	#LR__3502
1edf0     34 24 06 F1 | 	add	local04, #52
1edf4     12 13 02 F6 | 	mov	arg01, local04
1edf8     34 24 86 F1 | 	sub	local04, #52
1edfc     24 12 06 F1 | 	add	arg01, #36
1ee00                 | ' {
1ee00                 | ' 
1ee00                 | ' 	return *((DWORD*)ptr);
1ee00     09 FB 01 FB | 	rdlong	result1, arg01
1ee04     FD 2A 02 F6 | 	mov	local07, result1
1ee08                 | LR__3502
1ee08     1C 24 06 F1 | 	add	local04, #28
1ee0c     12 2B 62 FC | 	wrlong	local07, local04
1ee10     28 24 06 F1 | 	add	local04, #40
1ee14     12 27 C2 FA | 	rdbyte	local05, local04
1ee18     42 24 86 F1 | 	sub	local04, #66
1ee1c     12 27 42 FC | 	wrbyte	local05, local04
1ee20     12 27 C2 FA | 	rdbyte	local05, local04
1ee24     02 24 86 F1 | 	sub	local04, #2
1ee28     01 26 0E F2 | 	cmp	local05, #1 wz
1ee2c     02 24 06 51 |  if_ne	add	local04, #2
1ee30     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1ee34     02 24 86 51 |  if_ne	sub	local04, #2
1ee38     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1ee3c     0D FA 05 56 |  if_ne	mov	result1, #13
1ee40     BC 03 90 5D |  if_ne	jmp	#LR__3510
1ee44     02 24 06 F1 | 	add	local04, #2
1ee48     12 27 C2 FA | 	rdbyte	local05, local04
1ee4c     13 2B 02 FD | 	qmul	local07, local05
1ee50     3F 24 06 F1 | 	add	local04, #63
1ee54     12 27 C2 FA | 	rdbyte	local05, local04
1ee58     37 24 86 F1 | 	sub	local04, #55
1ee5c     12 27 52 FC | 	wrword	local05, local04
1ee60     12 27 EA FA | 	rdword	local05, local04 wz
1ee64     0A 24 86 F1 | 	sub	local04, #10
1ee68     18 2A 62 FD | 	getqx	local07
1ee6c     20 00 90 AD |  if_e	jmp	#LR__3503
1ee70     0A 24 06 F1 | 	add	local04, #10
1ee74     12 27 E2 FA | 	rdword	local05, local04
1ee78     13 23 32 F9 | 	getword	local03, local05, #0
1ee7c     0A 24 86 F1 | 	sub	local04, #10
1ee80     13 27 32 F9 | 	getword	local05, local05, #0
1ee84     01 26 86 F1 | 	sub	local05, #1
1ee88     13 23 CA F7 | 	test	local03, local05 wz
1ee8c     08 00 90 AD |  if_e	jmp	#LR__3504
1ee90                 | LR__3503
1ee90     0D FA 05 F6 | 	mov	result1, #13
1ee94     68 03 90 FD | 	jmp	#LR__3510
1ee98                 | LR__3504
1ee98     34 24 06 F1 | 	add	local04, #52
1ee9c     12 13 02 F6 | 	mov	arg01, local04
1eea0     11 12 06 F1 | 	add	arg01, #17
1eea4                 | ' {
1eea4                 | ' 
1eea4                 | ' 	return *((WORD*)ptr);
1eea4     09 FB E1 FA | 	rdword	result1, arg01
1eea8     2C 24 86 F1 | 	sub	local04, #44
1eeac     12 FB 51 FC | 	wrword	result1, local04
1eeb0     12 27 E2 FA | 	rdword	local05, local04
1eeb4     08 24 86 F1 | 	sub	local04, #8
1eeb8     13 13 52 F6 | 	abs	arg01, local05 wc
1eebc     09 13 42 F8 | 	getnib	arg01, arg01, #0
1eec0     09 13 8A F6 | 	negc	arg01, arg01 wz
1eec4     0D FA 05 56 |  if_ne	mov	result1, #13
1eec8     34 03 90 5D |  if_ne	jmp	#LR__3510
1eecc     34 24 06 F1 | 	add	local04, #52
1eed0     12 13 02 F6 | 	mov	arg01, local04
1eed4     34 24 86 F1 | 	sub	local04, #52
1eed8     13 12 06 F1 | 	add	arg01, #19
1eedc                 | ' {
1eedc                 | ' 
1eedc                 | ' 	return *((WORD*)ptr);
1eedc     09 FB E1 FA | 	rdword	result1, arg01
1eee0     FD 2C 0A F6 | 	mov	local08, result1 wz
1eee4     34 24 06 A1 |  if_e	add	local04, #52
1eee8     12 13 02 A6 |  if_e	mov	arg01, local04
1eeec     34 24 86 A1 |  if_e	sub	local04, #52
1eef0     20 12 06 A1 |  if_e	add	arg01, #32
1eef4                 | ' {
1eef4                 | ' 
1eef4                 | ' 	return *((DWORD*)ptr);
1eef4     09 2D 02 AB |  if_e	rdlong	local08, arg01
1eef8     34 24 06 F1 | 	add	local04, #52
1eefc     12 13 02 F6 | 	mov	arg01, local04
1ef00     34 24 86 F1 | 	sub	local04, #52
1ef04     0E 12 06 F1 | 	add	arg01, #14
1ef08                 | ' {
1ef08                 | ' 
1ef08                 | ' 	return *((WORD*)ptr);
1ef08     09 FB E1 FA | 	rdword	result1, arg01
1ef0c     FD 12 02 F6 | 	mov	arg01, result1
1ef10     09 27 02 F6 | 	mov	local05, arg01
1ef14     0F 26 4E F7 | 	zerox	local05, #15 wz
1ef18     0D FA 05 A6 |  if_e	mov	result1, #13
1ef1c     E0 02 90 AD |  if_e	jmp	#LR__3510
1ef20     09 2F 32 F9 | 	getword	local09, arg01, #0
1ef24     15 2F 02 F1 | 	add	local09, local07
1ef28     08 24 06 F1 | 	add	local04, #8
1ef2c     12 27 E2 FA | 	rdword	local05, local04
1ef30     08 24 86 F1 | 	sub	local04, #8
1ef34     13 27 52 F6 | 	abs	local05, local05 wc
1ef38     04 26 46 F0 | 	shr	local05, #4
1ef3c     13 2F 82 F3 | 	sumc	local09, local05
1ef40     17 2D 12 F2 | 	cmp	local08, local09 wc
1ef44     0D FA 05 C6 |  if_b	mov	result1, #13
1ef48     B4 02 90 CD |  if_b	jmp	#LR__3510
1ef4c     17 2D 82 F1 | 	sub	local08, local09
1ef50     0A 24 06 F1 | 	add	local04, #10
1ef54     12 27 E2 FA | 	rdword	local05, local04
1ef58     13 2D 12 FD | 	qdiv	local08, local05
1ef5c     0A 24 86 F1 | 	sub	local04, #10
1ef60     18 26 62 FD | 	getqx	local05
1ef64     00 26 0E F2 | 	cmp	local05, #0 wz
1ef68     0D FA 05 A6 |  if_e	mov	result1, #13
1ef6c     90 02 90 AD |  if_e	jmp	#LR__3510
1ef70     00 30 06 F6 | 	mov	local10, #0
1ef74     FF FF 07 FF 
1ef78     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1ef7c     03 30 06 C6 |  if_b	mov	local10, #3
1ef80     7F 00 00 FF 
1ef84     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1ef88     02 30 06 C6 |  if_b	mov	local10, #2
1ef8c     07 00 00 FF 
1ef90     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1ef94     01 30 06 C6 |  if_b	mov	local10, #1
1ef98     00 30 0E F2 | 	cmp	local10, #0 wz
1ef9c     0D FA 05 A6 |  if_e	mov	result1, #13
1efa0     5C 02 90 AD |  if_e	jmp	#LR__3510
1efa4     02 26 06 F1 | 	add	local05, #2
1efa8     18 24 06 F1 | 	add	local04, #24
1efac     12 27 62 FC | 	wrlong	local05, local04
1efb0     08 24 06 F1 | 	add	local04, #8
1efb4     12 29 62 FC | 	wrlong	local06, local04
1efb8     14 27 02 F6 | 	mov	local05, local06
1efbc     09 13 32 F9 | 	getword	arg01, arg01, #0
1efc0     09 27 02 F1 | 	add	local05, arg01
1efc4     04 24 06 F1 | 	add	local04, #4
1efc8     12 27 62 FC | 	wrlong	local05, local04
1efcc     14 27 02 F6 | 	mov	local05, local06
1efd0     17 27 02 F1 | 	add	local05, local09
1efd4     08 24 06 F1 | 	add	local04, #8
1efd8     12 27 62 FC | 	wrlong	local05, local04
1efdc     2C 24 86 F1 | 	sub	local04, #44
1efe0     03 30 0E F2 | 	cmp	local10, #3 wz
1efe4     5C 00 90 5D |  if_ne	jmp	#LR__3505
1efe8     34 24 06 F1 | 	add	local04, #52
1efec     12 13 02 F6 | 	mov	arg01, local04
1eff0     34 24 86 F1 | 	sub	local04, #52
1eff4     2A 12 06 F1 | 	add	arg01, #42
1eff8                 | ' {
1eff8                 | ' 
1eff8                 | ' 	return *((WORD*)ptr);
1eff8     09 FB E9 FA | 	rdword	result1, arg01 wz
1effc     0D FA 05 56 |  if_ne	mov	result1, #13
1f000     FC 01 90 5D |  if_ne	jmp	#LR__3510
1f004     08 24 06 F1 | 	add	local04, #8
1f008     12 27 EA FA | 	rdword	local05, local04 wz
1f00c     08 24 86 F1 | 	sub	local04, #8
1f010     0D FA 05 56 |  if_ne	mov	result1, #13
1f014     E8 01 90 5D |  if_ne	jmp	#LR__3510
1f018     34 24 06 F1 | 	add	local04, #52
1f01c     12 13 02 F6 | 	mov	arg01, local04
1f020     2C 12 06 F1 | 	add	arg01, #44
1f024                 | ' {
1f024                 | ' 
1f024                 | ' 	return *((DWORD*)ptr);
1f024     09 FB 01 FB | 	rdlong	result1, arg01
1f028     0C 24 86 F1 | 	sub	local04, #12
1f02c     12 FB 61 FC | 	wrlong	result1, local04
1f030     10 24 86 F1 | 	sub	local04, #16
1f034     12 33 02 FB | 	rdlong	local11, local04
1f038     18 24 86 F1 | 	sub	local04, #24
1f03c     02 32 66 F0 | 	shl	local11, #2
1f040     6C 00 90 FD | 	jmp	#LR__3507
1f044                 | LR__3505
1f044     08 24 06 F1 | 	add	local04, #8
1f048     12 27 EA FA | 	rdword	local05, local04 wz
1f04c     08 24 86 F1 | 	sub	local04, #8
1f050     0D FA 05 A6 |  if_e	mov	result1, #13
1f054     A8 01 90 AD |  if_e	jmp	#LR__3510
1f058     24 24 06 F1 | 	add	local04, #36
1f05c     12 27 02 FB | 	rdlong	local05, local04
1f060     15 27 02 F1 | 	add	local05, local07
1f064     04 24 06 F1 | 	add	local04, #4
1f068     12 27 62 FC | 	wrlong	local05, local04
1f06c     28 24 86 F1 | 	sub	local04, #40
1f070     02 30 0E F2 | 	cmp	local10, #2 wz
1f074     18 24 06 A1 |  if_e	add	local04, #24
1f078     12 27 02 AB |  if_e	rdlong	local05, local04
1f07c     18 24 86 A1 |  if_e	sub	local04, #24
1f080     01 26 66 A0 |  if_e	shl	local05, #1
1f084     24 00 90 AD |  if_e	jmp	#LR__3506
1f088     18 24 06 F1 | 	add	local04, #24
1f08c     12 33 02 FB | 	rdlong	local11, local04
1f090     19 27 02 F6 | 	mov	local05, local11
1f094     01 26 66 F0 | 	shl	local05, #1
1f098     19 27 02 F1 | 	add	local05, local11
1f09c     01 26 46 F0 | 	shr	local05, #1
1f0a0     18 24 86 F1 | 	sub	local04, #24
1f0a4     01 32 06 F5 | 	and	local11, #1
1f0a8     19 27 02 F1 | 	add	local05, local11
1f0ac                 | LR__3506
1f0ac     13 33 02 F6 | 	mov	local11, local05
1f0b0                 | LR__3507
1f0b0     FF 33 06 F1 | 	add	local11, #511
1f0b4     09 32 46 F0 | 	shr	local11, #9
1f0b8     1C 24 06 F1 | 	add	local04, #28
1f0bc     12 17 02 FB | 	rdlong	arg03, local04
1f0c0     1C 24 86 F1 | 	sub	local04, #28
1f0c4     19 17 12 F2 | 	cmp	arg03, local11 wc
1f0c8     0D FA 05 C6 |  if_b	mov	result1, #13
1f0cc     30 01 90 CD |  if_b	jmp	#LR__3510
1f0d0     14 24 06 F1 | 	add	local04, #20
1f0d4     FF FF FF FF 
1f0d8     12 FF 6B FC | 	wrlong	##-1, local04
1f0dc     04 24 86 F1 | 	sub	local04, #4
1f0e0     FF FF FF FF 
1f0e4     12 FF 6B FC | 	wrlong	##-1, local04
1f0e8     0C 24 86 F1 | 	sub	local04, #12
1f0ec     12 01 49 FC | 	wrbyte	#128, local04
1f0f0     04 24 86 F1 | 	sub	local04, #4
1f0f4     03 30 0E F2 | 	cmp	local10, #3 wz
1f0f8     D0 00 90 5D |  if_ne	jmp	#LR__3509
1f0fc     34 24 06 F1 | 	add	local04, #52
1f100     12 13 02 F6 | 	mov	arg01, local04
1f104     34 24 86 F1 | 	sub	local04, #52
1f108     30 12 06 F1 | 	add	arg01, #48
1f10c                 | ' {
1f10c                 | ' 
1f10c                 | ' 	return *((WORD*)ptr);
1f10c     09 FB E1 FA | 	rdword	result1, arg01
1f110     FD 26 32 F9 | 	getword	local05, result1, #0
1f114     01 26 0E F2 | 	cmp	local05, #1 wz
1f118     B0 00 90 5D |  if_ne	jmp	#LR__3509
1f11c     01 28 06 F1 | 	add	local06, #1
1f120     12 13 02 F6 | 	mov	arg01, local04
1f124     14 15 02 F6 | 	mov	arg02, local06
1f128     CC CD BF FD | 	call	#_fatfs_cc_move_window
1f12c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f130     98 00 90 5D |  if_ne	jmp	#LR__3509
1f134     04 24 06 F1 | 	add	local04, #4
1f138     12 01 48 FC | 	wrbyte	#0, local04
1f13c     30 24 06 F1 | 	add	local04, #48
1f140     12 13 02 F6 | 	mov	arg01, local04
1f144     34 24 86 F1 | 	sub	local04, #52
1f148     FE 13 06 F1 | 	add	arg01, #510
1f14c                 | ' {
1f14c                 | ' 
1f14c                 | ' 	return *((WORD*)ptr);
1f14c     09 FB E1 FA | 	rdword	result1, arg01
1f150     FD 26 32 F9 | 	getword	local05, result1, #0
1f154     55 00 00 FF 
1f158     55 26 0E F2 | 	cmp	local05, ##43605 wz
1f15c     34 24 06 A1 |  if_e	add	local04, #52
1f160     12 13 02 A6 |  if_e	mov	arg01, local04
1f164     34 24 86 A1 |  if_e	sub	local04, #52
1f168                 | ' {
1f168                 | ' 
1f168                 | ' 	return *((DWORD*)ptr);
1f168     09 FB 01 AB |  if_e	rdlong	result1, arg01
1f16c     A9 B0 20 AF 
1f170     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1f174     54 00 90 5D |  if_ne	jmp	#LR__3508
1f178     34 24 06 F1 | 	add	local04, #52
1f17c     12 13 02 F6 | 	mov	arg01, local04
1f180     34 24 86 F1 | 	sub	local04, #52
1f184     E4 13 06 F1 | 	add	arg01, #484
1f188                 | ' {
1f188                 | ' 
1f188                 | ' 	return *((DWORD*)ptr);
1f188     09 FB 01 FB | 	rdlong	result1, arg01
1f18c     B9 A0 30 FF 
1f190     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1f194     34 00 90 5D |  if_ne	jmp	#LR__3508
1f198     34 24 06 F1 | 	add	local04, #52
1f19c     12 13 02 F6 | 	mov	arg01, local04
1f1a0     E8 13 06 F1 | 	add	arg01, #488
1f1a4                 | ' {
1f1a4                 | ' 
1f1a4                 | ' 	return *((DWORD*)ptr);
1f1a4     09 FB 01 FB | 	rdlong	result1, arg01
1f1a8     20 24 86 F1 | 	sub	local04, #32
1f1ac     12 FB 61 FC | 	wrlong	result1, local04
1f1b0     20 24 06 F1 | 	add	local04, #32
1f1b4     12 13 02 F6 | 	mov	arg01, local04
1f1b8     EC 13 06 F1 | 	add	arg01, #492
1f1bc                 | ' {
1f1bc                 | ' 
1f1bc                 | ' 	return *((DWORD*)ptr);
1f1bc     09 FB 01 FB | 	rdlong	result1, arg01
1f1c0     24 24 86 F1 | 	sub	local04, #36
1f1c4     12 FB 61 FC | 	wrlong	result1, local04
1f1c8     10 24 86 F1 | 	sub	local04, #16
1f1cc                 | LR__3508
1f1cc                 | LR__3509
1f1cc     12 31 42 FC | 	wrbyte	local10, local04
1f1d0     04 E4 05 F1 | 	add	objptr, #4
1f1d4     F2 26 E2 FA | 	rdword	local05, objptr
1f1d8     01 26 06 F1 | 	add	local05, #1
1f1dc     F2 26 52 FC | 	wrword	local05, objptr
1f1e0     F2 32 E2 FA | 	rdword	local11, objptr
1f1e4     06 24 06 F1 | 	add	local04, #6
1f1e8     12 33 52 FC | 	wrword	local11, local04
1f1ec     04 E4 05 F1 | 	add	objptr, #4
1f1f0     06 24 06 F1 | 	add	local04, #6
1f1f4     12 E5 61 FC | 	wrlong	objptr, local04
1f1f8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1f1f8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1f1f8                 | ' 			{
1f1f8                 | ' 
1f1f8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1f1f8                 | ' 
1f1f8                 | ' 
1f1f8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1f1f8                 | ' 
1f1f8                 | ' 			}
1f1f8                 | ' 		}
1f1f8                 | ' 
1f1f8                 | ' 
1f1f8                 | ' 	}
1f1f8                 | ' 
1f1f8                 | ' 	fs->fs_type = (BYTE)fmt;
1f1f8                 | ' 	fs->id = ++Fsid;
1f1f8                 | ' 
1f1f8                 | ' 	fs->lfnbuf = LfnBuf;
1f1f8                 | ' #line 3567 "ff.c"
1f1f8                 | ' 	return FR_OK;
1f1f8     00 FA 05 F6 | 	mov	result1, #0
1f1fc     08 E4 85 F1 | 	sub	objptr, #8
1f200                 | LR__3510
1f200     A7 F0 03 F6 | 	mov	ptra, fp
1f204     B2 00 A0 FD | 	call	#popregs_
1f208                 | _fatfs_cc_mount_volume_ret
1f208     2D 00 64 FD | 	ret
1f20c                 | 
1f20c                 | _fatfs_cc_validate
1f20c     09 01 0A F6 | 	mov	_var01, arg01 wz
1f210     09 02 06 F6 | 	mov	_var02, #9
1f214     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1f218     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1f21c     50 00 90 AD |  if_e	jmp	#LR__3520
1f220     04 00 06 F1 | 	add	_var01, #4
1f224     00 07 E2 FA | 	rdword	_var04, _var01
1f228     04 00 86 F1 | 	sub	_var01, #4
1f22c     00 13 02 FB | 	rdlong	arg01, _var01
1f230     06 12 06 F1 | 	add	arg01, #6
1f234     09 FB E1 FA | 	rdword	result1, arg01
1f238     FD 06 0A F2 | 	cmp	_var04, result1 wz
1f23c     30 00 90 5D |  if_ne	jmp	#LR__3520
1f240     00 07 02 FB | 	rdlong	_var04, _var01
1f244     01 06 06 F1 | 	add	_var04, #1
1f248     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1f24c     01 FA 05 56 |  if_ne	mov	result1, #1
1f250                 | ' 
1f250                 | ' 	return Stat;
1f250     01 00 00 AF 
1f254     20 E4 05 A1 |  if_e	add	objptr, ##544
1f258     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f25c     01 00 00 AF 
1f260     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f264     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1f268     01 04 CE F7 | 	test	_var03, #1 wz
1f26c     00 02 06 A6 |  if_e	mov	_var02, #0
1f270                 | LR__3520
1f270     00 02 0E F2 | 	cmp	_var02, #0 wz
1f274     00 05 02 AB |  if_e	rdlong	_var03, _var01
1f278     00 04 06 56 |  if_ne	mov	_var03, #0
1f27c     0A 05 62 FC | 	wrlong	_var03, arg02
1f280                 | ' 			res = FR_OK;
1f280                 | ' 		}
1f280                 | ' 
1f280                 | ' 	}
1f280                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1f280                 | ' 	return res;
1f280     01 FB 01 F6 | 	mov	result1, _var02
1f284                 | _fatfs_cc_validate_ret
1f284     2D 00 64 FD | 	ret
1f288                 | 
1f288                 | _fatfs_cc_f_mount
1f288     01 4A 05 F6 | 	mov	COUNT_, #1
1f28c     A8 00 A0 FD | 	call	#pushregs_
1f290     20 F0 07 F1 | 	add	ptra, #32
1f294     04 4E 05 F1 | 	add	fp, #4
1f298     A7 12 62 FC | 	wrlong	arg01, fp
1f29c     04 4E 05 F1 | 	add	fp, #4
1f2a0     A7 14 62 FC | 	wrlong	arg02, fp
1f2a4     04 4E 05 F1 | 	add	fp, #4
1f2a8     A7 16 42 FC | 	wrbyte	arg03, fp
1f2ac     04 4E 85 F1 | 	sub	fp, #4
1f2b0     A7 16 02 FB | 	rdlong	arg03, fp
1f2b4     14 4E 05 F1 | 	add	fp, #20
1f2b8     A7 16 62 FC | 	wrlong	arg03, fp
1f2bc     A7 12 02 F6 | 	mov	arg01, fp
1f2c0     1C 4E 85 F1 | 	sub	fp, #28
1f2c4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1f2c8     14 4E 05 F1 | 	add	fp, #20
1f2cc     A7 FA 61 FC | 	wrlong	result1, fp
1f2d0     14 4E 85 F1 | 	sub	fp, #20
1f2d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1f2d8     0B FA 05 C6 |  if_b	mov	result1, #11
1f2dc     C0 00 90 CD |  if_b	jmp	#LR__3531
1f2e0     14 4E 05 F1 | 	add	fp, #20
1f2e4     A7 16 02 FB | 	rdlong	arg03, fp
1f2e8     02 16 66 F0 | 	shl	arg03, #2
1f2ec     F2 16 02 F1 | 	add	arg03, objptr
1f2f0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1f2f4     04 4E 85 F1 | 	sub	fp, #4
1f2f8     A7 16 62 FC | 	wrlong	arg03, fp
1f2fc     10 4E 85 F1 | 	sub	fp, #16
1f300     28 00 90 AD |  if_e	jmp	#LR__3530
1f304     10 4E 05 F1 | 	add	fp, #16
1f308     A7 16 02 FB | 	rdlong	arg03, fp
1f30c     10 4E 85 F1 | 	sub	fp, #16
1f310     01 16 06 F1 | 	add	arg03, #1
1f314     0B 13 C2 FA | 	rdbyte	arg01, arg03
1f318     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1f31c     10 4E 05 F1 | 	add	fp, #16
1f320     A7 16 02 FB | 	rdlong	arg03, fp
1f324     10 4E 85 F1 | 	sub	fp, #16
1f328     0B 01 48 FC | 	wrbyte	#0, arg03
1f32c                 | LR__3530
1f32c     04 4E 05 F1 | 	add	fp, #4
1f330     A7 1E 0A FB | 	rdlong	local01, fp wz
1f334     04 4E 85 F1 | 	sub	fp, #4
1f338     04 4E 05 51 |  if_ne	add	fp, #4
1f33c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1f340     04 4E 85 51 |  if_ne	sub	fp, #4
1f344     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1f348     14 4E 05 F1 | 	add	fp, #20
1f34c     A7 1E 02 FB | 	rdlong	local01, fp
1f350     02 1E 66 F0 | 	shl	local01, #2
1f354     F2 1E 02 F1 | 	add	local01, objptr
1f358     10 4E 85 F1 | 	sub	fp, #16
1f35c     A7 16 02 FB | 	rdlong	arg03, fp
1f360     0F 17 62 FC | 	wrlong	arg03, local01
1f364     08 4E 05 F1 | 	add	fp, #8
1f368     A7 1E CA FA | 	rdbyte	local01, fp wz
1f36c     0C 4E 85 F1 | 	sub	fp, #12
1f370     00 FA 05 A6 |  if_e	mov	result1, #0
1f374     28 00 90 AD |  if_e	jmp	#LR__3531
1f378     08 4E 05 F1 | 	add	fp, #8
1f37c     A7 12 02 F6 | 	mov	arg01, fp
1f380     04 4E 85 F1 | 	sub	fp, #4
1f384     A7 14 02 F6 | 	mov	arg02, fp
1f388     04 4E 85 F1 | 	sub	fp, #4
1f38c     00 16 06 F6 | 	mov	arg03, #0
1f390     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1f394     18 4E 05 F1 | 	add	fp, #24
1f398     A7 FA 61 FC | 	wrlong	result1, fp
1f39c                 | ' 
1f39c                 | ' 	res = mount_volume(&path, &fs, 0);
1f39c                 | ' 	return res ;
1f39c     18 4E 85 F1 | 	sub	fp, #24
1f3a0                 | LR__3531
1f3a0     A7 F0 03 F6 | 	mov	ptra, fp
1f3a4     B2 00 A0 FD | 	call	#popregs_
1f3a8                 | _fatfs_cc_f_mount_ret
1f3a8     2D 00 64 FD | 	ret
1f3ac                 | 
1f3ac                 | _fatfs_cc_f_open
1f3ac     02 4A 05 F6 | 	mov	COUNT_, #2
1f3b0     A8 00 A0 FD | 	call	#pushregs_
1f3b4     60 F0 07 F1 | 	add	ptra, #96
1f3b8     04 4E 05 F1 | 	add	fp, #4
1f3bc     A7 12 62 FC | 	wrlong	arg01, fp
1f3c0     04 4E 05 F1 | 	add	fp, #4
1f3c4     A7 14 62 FC | 	wrlong	arg02, fp
1f3c8     04 4E 05 F1 | 	add	fp, #4
1f3cc     A7 16 42 FC | 	wrbyte	arg03, fp
1f3d0     08 4E 85 F1 | 	sub	fp, #8
1f3d4     A7 18 0A FB | 	rdlong	arg04, fp wz
1f3d8     04 4E 85 F1 | 	sub	fp, #4
1f3dc     09 FA 05 A6 |  if_e	mov	result1, #9
1f3e0     98 06 90 AD |  if_e	jmp	#LR__3557
1f3e4     0C 4E 05 F1 | 	add	fp, #12
1f3e8     A7 18 C2 FA | 	rdbyte	arg04, fp
1f3ec     3F 18 06 F5 | 	and	arg04, #63
1f3f0     A7 18 42 FC | 	wrbyte	arg04, fp
1f3f4     04 4E 85 F1 | 	sub	fp, #4
1f3f8     A7 12 02 F6 | 	mov	arg01, fp
1f3fc     3C 4E 05 F1 | 	add	fp, #60
1f400     A7 14 02 F6 | 	mov	arg02, fp
1f404     38 4E 85 F1 | 	sub	fp, #56
1f408     A7 16 C2 FA | 	rdbyte	arg03, fp
1f40c     0C 4E 85 F1 | 	sub	fp, #12
1f410     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1f414     10 4E 05 F1 | 	add	fp, #16
1f418     A7 FA 61 FC | 	wrlong	result1, fp
1f41c     10 4E 85 F1 | 	sub	fp, #16
1f420     00 FA 0D F2 | 	cmp	result1, #0 wz
1f424     2C 06 90 5D |  if_ne	jmp	#LR__3556
1f428     44 4E 05 F1 | 	add	fp, #68
1f42c     A7 18 02 FB | 	rdlong	arg04, fp
1f430     30 4E 85 F1 | 	sub	fp, #48
1f434     A7 18 62 FC | 	wrlong	arg04, fp
1f438     A7 12 02 F6 | 	mov	arg01, fp
1f43c     0C 4E 85 F1 | 	sub	fp, #12
1f440     A7 1E 02 FB | 	rdlong	local01, fp
1f444     08 4E 85 F1 | 	sub	fp, #8
1f448     0F 15 02 F6 | 	mov	arg02, local01
1f44c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1f450     10 4E 05 F1 | 	add	fp, #16
1f454     A7 FA 61 FC | 	wrlong	result1, fp
1f458     10 4E 85 F1 | 	sub	fp, #16
1f45c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f460     1C 00 90 5D |  if_ne	jmp	#LR__3540
1f464     3F 4E 05 F1 | 	add	fp, #63
1f468     A7 18 C2 FA | 	rdbyte	arg04, fp
1f46c     3F 4E 85 F1 | 	sub	fp, #63
1f470     80 18 CE F7 | 	test	arg04, #128 wz
1f474     10 4E 05 51 |  if_ne	add	fp, #16
1f478     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1f47c     10 4E 85 51 |  if_ne	sub	fp, #16
1f480                 | LR__3540
1f480     0C 4E 05 F1 | 	add	fp, #12
1f484     A7 18 C2 FA | 	rdbyte	arg04, fp
1f488     0C 4E 85 F1 | 	sub	fp, #12
1f48c     1C 18 CE F7 | 	test	arg04, #28 wz
1f490     F0 01 90 AD |  if_e	jmp	#LR__3545
1f494     10 4E 05 F1 | 	add	fp, #16
1f498     A7 1E 0A FB | 	rdlong	local01, fp wz
1f49c     10 4E 85 F1 | 	sub	fp, #16
1f4a0     48 00 90 AD |  if_e	jmp	#LR__3542
1f4a4     10 4E 05 F1 | 	add	fp, #16
1f4a8     A7 18 02 FB | 	rdlong	arg04, fp
1f4ac     10 4E 85 F1 | 	sub	fp, #16
1f4b0     04 18 0E F2 | 	cmp	arg04, #4 wz
1f4b4     1C 00 90 5D |  if_ne	jmp	#LR__3541
1f4b8     14 4E 05 F1 | 	add	fp, #20
1f4bc     A7 12 02 F6 | 	mov	arg01, fp
1f4c0     14 4E 85 F1 | 	sub	fp, #20
1f4c4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
1f4c8     10 4E 05 F1 | 	add	fp, #16
1f4cc     A7 FA 61 FC | 	wrlong	result1, fp
1f4d0     10 4E 85 F1 | 	sub	fp, #16
1f4d4                 | LR__3541
1f4d4     0C 4E 05 F1 | 	add	fp, #12
1f4d8     A7 1E C2 FA | 	rdbyte	local01, fp
1f4dc     08 1E 46 F5 | 	or	local01, #8
1f4e0     A7 1E 42 FC | 	wrbyte	local01, fp
1f4e4     0C 4E 85 F1 | 	sub	fp, #12
1f4e8     3C 00 90 FD | 	jmp	#LR__3544
1f4ec                 | LR__3542
1f4ec     1A 4E 05 F1 | 	add	fp, #26
1f4f0     A7 1E C2 FA | 	rdbyte	local01, fp
1f4f4     1A 4E 85 F1 | 	sub	fp, #26
1f4f8     11 1E CE F7 | 	test	local01, #17 wz
1f4fc     10 4E 05 51 |  if_ne	add	fp, #16
1f500     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1f504     10 4E 85 51 |  if_ne	sub	fp, #16
1f508     1C 00 90 5D |  if_ne	jmp	#LR__3543
1f50c     0C 4E 05 F1 | 	add	fp, #12
1f510     A7 1E C2 FA | 	rdbyte	local01, fp
1f514     0C 4E 85 F1 | 	sub	fp, #12
1f518     04 1E CE F7 | 	test	local01, #4 wz
1f51c     10 4E 05 51 |  if_ne	add	fp, #16
1f520     A7 10 68 5C |  if_ne	wrlong	#8, fp
1f524     10 4E 85 51 |  if_ne	sub	fp, #16
1f528                 | LR__3543
1f528                 | LR__3544
1f528     10 4E 05 F1 | 	add	fp, #16
1f52c     A7 1E 0A FB | 	rdlong	local01, fp wz
1f530     10 4E 85 F1 | 	sub	fp, #16
1f534     A8 01 90 5D |  if_ne	jmp	#LR__3548
1f538     0C 4E 05 F1 | 	add	fp, #12
1f53c     A7 1E C2 FA | 	rdbyte	local01, fp
1f540     0C 4E 85 F1 | 	sub	fp, #12
1f544     08 1E CE F7 | 	test	local01, #8 wz
1f548     94 01 90 AD |  if_e	jmp	#LR__3548
1f54c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
1f550     54 4E 05 F1 | 	add	fp, #84
1f554     A7 FA 61 FC | 	wrlong	result1, fp
1f558     24 4E 85 F1 | 	sub	fp, #36
1f55c     A7 12 02 FB | 	rdlong	arg01, fp
1f560     0E 12 06 F1 | 	add	arg01, #14
1f564     09 FB 61 FC | 	wrlong	result1, arg01
1f568     A7 12 02 FB | 	rdlong	arg01, fp
1f56c     16 12 06 F1 | 	add	arg01, #22
1f570     24 4E 05 F1 | 	add	fp, #36
1f574     A7 14 02 FB | 	rdlong	arg02, fp
1f578     09 15 62 FC | 	wrlong	arg02, arg01
1f57c     10 4E 85 F1 | 	sub	fp, #16
1f580     A7 12 02 FB | 	rdlong	arg01, fp
1f584     14 4E 85 F1 | 	sub	fp, #20
1f588     A7 14 02 FB | 	rdlong	arg02, fp
1f58c     30 4E 85 F1 | 	sub	fp, #48
1f590     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
1f594     48 4E 05 F1 | 	add	fp, #72
1f598     A7 FA 61 FC | 	wrlong	result1, fp
1f59c     18 4E 85 F1 | 	sub	fp, #24
1f5a0     A7 1E 02 FB | 	rdlong	local01, fp
1f5a4     0B 1E 06 F1 | 	add	local01, #11
1f5a8     0F 41 48 FC | 	wrbyte	#32, local01
1f5ac     14 4E 05 F1 | 	add	fp, #20
1f5b0     A7 12 02 FB | 	rdlong	arg01, fp
1f5b4     14 4E 85 F1 | 	sub	fp, #20
1f5b8     A7 14 02 FB | 	rdlong	arg02, fp
1f5bc     30 4E 85 F1 | 	sub	fp, #48
1f5c0     00 16 06 F6 | 	mov	arg03, #0
1f5c4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
1f5c8     30 4E 05 F1 | 	add	fp, #48
1f5cc     A7 12 02 FB | 	rdlong	arg01, fp
1f5d0     1C 12 06 F1 | 	add	arg01, #28
1f5d4     09 01 68 FC | 	wrlong	#0, arg01
1f5d8     14 4E 05 F1 | 	add	fp, #20
1f5dc     A7 1E 02 FB | 	rdlong	local01, fp
1f5e0     03 1E 06 F1 | 	add	local01, #3
1f5e4     0F 03 48 FC | 	wrbyte	#1, local01
1f5e8     04 4E 05 F1 | 	add	fp, #4
1f5ec     A7 1E 0A FB | 	rdlong	local01, fp wz
1f5f0     48 4E 85 F1 | 	sub	fp, #72
1f5f4     E8 00 90 AD |  if_e	jmp	#LR__3548
1f5f8     44 4E 05 F1 | 	add	fp, #68
1f5fc     A7 1E 02 FB | 	rdlong	local01, fp
1f600     30 1E 06 F1 | 	add	local01, #48
1f604     0F 1F 02 FB | 	rdlong	local01, local01
1f608     14 4E 05 F1 | 	add	fp, #20
1f60c     A7 1E 62 FC | 	wrlong	local01, fp
1f610     44 4E 85 F1 | 	sub	fp, #68
1f614     A7 12 02 F6 | 	mov	arg01, fp
1f618     34 4E 05 F1 | 	add	fp, #52
1f61c     A7 14 02 FB | 	rdlong	arg02, fp
1f620     48 4E 85 F1 | 	sub	fp, #72
1f624     00 16 06 F6 | 	mov	arg03, #0
1f628     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
1f62c     10 4E 05 F1 | 	add	fp, #16
1f630     A7 FA 61 FC | 	wrlong	result1, fp
1f634     10 4E 85 F1 | 	sub	fp, #16
1f638     00 FA 0D F2 | 	cmp	result1, #0 wz
1f63c     A0 00 90 5D |  if_ne	jmp	#LR__3548
1f640     44 4E 05 F1 | 	add	fp, #68
1f644     A7 12 02 FB | 	rdlong	arg01, fp
1f648     14 4E 05 F1 | 	add	fp, #20
1f64c     A7 14 02 FB | 	rdlong	arg02, fp
1f650     58 4E 85 F1 | 	sub	fp, #88
1f654     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
1f658     10 4E 05 F1 | 	add	fp, #16
1f65c     A7 FA 61 FC | 	wrlong	result1, fp
1f660     34 4E 05 F1 | 	add	fp, #52
1f664     A7 18 02 FB | 	rdlong	arg04, fp
1f668     04 4E 05 F1 | 	add	fp, #4
1f66c     A7 1E 02 FB | 	rdlong	local01, fp
1f670     48 4E 85 F1 | 	sub	fp, #72
1f674     01 1E 86 F1 | 	sub	local01, #1
1f678     10 18 06 F1 | 	add	arg04, #16
1f67c     0C 1F 62 FC | 	wrlong	local01, arg04
1f680     5C 00 90 FD | 	jmp	#LR__3548
1f684                 | LR__3545
1f684     10 4E 05 F1 | 	add	fp, #16
1f688     A7 18 0A FB | 	rdlong	arg04, fp wz
1f68c     10 4E 85 F1 | 	sub	fp, #16
1f690     4C 00 90 5D |  if_ne	jmp	#LR__3547
1f694     1A 4E 05 F1 | 	add	fp, #26
1f698     A7 18 C2 FA | 	rdbyte	arg04, fp
1f69c     1A 4E 85 F1 | 	sub	fp, #26
1f6a0     10 18 CE F7 | 	test	arg04, #16 wz
1f6a4     10 4E 05 51 |  if_ne	add	fp, #16
1f6a8     A7 08 68 5C |  if_ne	wrlong	#4, fp
1f6ac     10 4E 85 51 |  if_ne	sub	fp, #16
1f6b0     2C 00 90 5D |  if_ne	jmp	#LR__3546
1f6b4     0C 4E 05 F1 | 	add	fp, #12
1f6b8     A7 18 C2 FA | 	rdbyte	arg04, fp
1f6bc     0C 4E 85 F1 | 	sub	fp, #12
1f6c0     02 18 CE F7 | 	test	arg04, #2 wz
1f6c4     1A 4E 05 51 |  if_ne	add	fp, #26
1f6c8     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
1f6cc     1A 4E 85 51 |  if_ne	sub	fp, #26
1f6d0     01 1E CE 57 |  if_ne	test	local01, #1 wz
1f6d4     10 4E 05 51 |  if_ne	add	fp, #16
1f6d8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1f6dc     10 4E 85 51 |  if_ne	sub	fp, #16
1f6e0                 | LR__3546
1f6e0                 | LR__3547
1f6e0                 | LR__3548
1f6e0     10 4E 05 F1 | 	add	fp, #16
1f6e4     A7 1E 0A FB | 	rdlong	local01, fp wz
1f6e8     10 4E 85 F1 | 	sub	fp, #16
1f6ec     60 00 90 5D |  if_ne	jmp	#LR__3549
1f6f0     0C 4E 05 F1 | 	add	fp, #12
1f6f4     A7 20 C2 FA | 	rdbyte	local02, fp
1f6f8     0C 4E 85 F1 | 	sub	fp, #12
1f6fc     08 20 CE F7 | 	test	local02, #8 wz
1f700     0C 4E 05 51 |  if_ne	add	fp, #12
1f704     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
1f708     40 20 46 55 |  if_ne	or	local02, #64
1f70c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
1f710     0C 4E 85 51 |  if_ne	sub	fp, #12
1f714     04 4E 05 F1 | 	add	fp, #4
1f718     A7 20 02 FB | 	rdlong	local02, fp
1f71c     40 4E 05 F1 | 	add	fp, #64
1f720     A7 1E 02 FB | 	rdlong	local01, fp
1f724     30 1E 06 F1 | 	add	local01, #48
1f728     0F 1F 02 FB | 	rdlong	local01, local01
1f72c     20 20 06 F1 | 	add	local02, #32
1f730     10 1F 62 FC | 	wrlong	local01, local02
1f734     40 4E 85 F1 | 	sub	fp, #64
1f738     A7 20 02 FB | 	rdlong	local02, fp
1f73c     2C 4E 05 F1 | 	add	fp, #44
1f740     A7 1E 02 FB | 	rdlong	local01, fp
1f744     30 4E 85 F1 | 	sub	fp, #48
1f748     24 20 06 F1 | 	add	local02, #36
1f74c     10 1F 62 FC | 	wrlong	local01, local02
1f750                 | LR__3549
1f750     10 4E 05 F1 | 	add	fp, #16
1f754     A7 20 0A FB | 	rdlong	local02, fp wz
1f758     10 4E 85 F1 | 	sub	fp, #16
1f75c     F4 02 90 5D |  if_ne	jmp	#LR__3555
1f760     04 4E 05 F1 | 	add	fp, #4
1f764     A7 20 02 FB | 	rdlong	local02, fp
1f768     40 4E 05 F1 | 	add	fp, #64
1f76c     A7 12 02 FB | 	rdlong	arg01, fp
1f770     14 4E 85 F1 | 	sub	fp, #20
1f774     A7 14 02 FB | 	rdlong	arg02, fp
1f778     30 4E 85 F1 | 	sub	fp, #48
1f77c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
1f780     08 20 06 F1 | 	add	local02, #8
1f784     10 FB 61 FC | 	wrlong	result1, local02
1f788     04 4E 05 F1 | 	add	fp, #4
1f78c     A7 20 02 FB | 	rdlong	local02, fp
1f790     2C 4E 05 F1 | 	add	fp, #44
1f794     A7 12 02 FB | 	rdlong	arg01, fp
1f798     1C 12 06 F1 | 	add	arg01, #28
1f79c                 | ' {
1f79c                 | ' 
1f79c                 | ' 	return *((DWORD*)ptr);
1f79c     09 FB 01 FB | 	rdlong	result1, arg01
1f7a0     0C 20 06 F1 | 	add	local02, #12
1f7a4     10 FB 61 FC | 	wrlong	result1, local02
1f7a8     2C 4E 85 F1 | 	sub	fp, #44
1f7ac     A7 20 02 FB | 	rdlong	local02, fp
1f7b0     40 4E 05 F1 | 	add	fp, #64
1f7b4     A7 1E 02 FB | 	rdlong	local01, fp
1f7b8     10 1F 62 FC | 	wrlong	local01, local02
1f7bc     40 4E 85 F1 | 	sub	fp, #64
1f7c0     A7 20 02 FB | 	rdlong	local02, fp
1f7c4     40 4E 05 F1 | 	add	fp, #64
1f7c8     A7 1E 02 FB | 	rdlong	local01, fp
1f7cc     06 1E 06 F1 | 	add	local01, #6
1f7d0     0F 1F E2 FA | 	rdword	local01, local01
1f7d4     04 20 06 F1 | 	add	local02, #4
1f7d8     10 1F 52 FC | 	wrword	local01, local02
1f7dc     40 4E 85 F1 | 	sub	fp, #64
1f7e0     A7 20 02 FB | 	rdlong	local02, fp
1f7e4     08 4E 05 F1 | 	add	fp, #8
1f7e8     A7 1E C2 FA | 	rdbyte	local01, fp
1f7ec     10 20 06 F1 | 	add	local02, #16
1f7f0     10 1F 42 FC | 	wrbyte	local01, local02
1f7f4     08 4E 85 F1 | 	sub	fp, #8
1f7f8     A7 20 02 FB | 	rdlong	local02, fp
1f7fc     11 20 06 F1 | 	add	local02, #17
1f800     10 01 48 FC | 	wrbyte	#0, local02
1f804     A7 20 02 FB | 	rdlong	local02, fp
1f808     1C 20 06 F1 | 	add	local02, #28
1f80c     10 01 68 FC | 	wrlong	#0, local02
1f810     A7 20 02 FB | 	rdlong	local02, fp
1f814     14 20 06 F1 | 	add	local02, #20
1f818     10 01 68 FC | 	wrlong	#0, local02
1f81c     A7 12 02 FB | 	rdlong	arg01, fp
1f820     04 4E 85 F1 | 	sub	fp, #4
1f824     28 12 06 F1 | 	add	arg01, #40
1f828     00 14 06 F6 | 	mov	arg02, #0
1f82c     09 16 C6 F9 | 	decod	arg03, #9
1f830     98 00 A0 FD | 	call	#\builtin_bytefill_
1f834     0C 4E 05 F1 | 	add	fp, #12
1f838     A7 20 C2 FA | 	rdbyte	local02, fp
1f83c     0C 4E 85 F1 | 	sub	fp, #12
1f840     20 20 CE F7 | 	test	local02, #32 wz
1f844     0C 02 90 AD |  if_e	jmp	#LR__3554
1f848     04 4E 05 F1 | 	add	fp, #4
1f84c     A7 1E 02 FB | 	rdlong	local01, fp
1f850     04 4E 85 F1 | 	sub	fp, #4
1f854     0C 1E 06 F1 | 	add	local01, #12
1f858     0F 21 02 FB | 	rdlong	local02, local01
1f85c     01 20 16 F2 | 	cmp	local02, #1 wc
1f860     F0 01 90 CD |  if_b	jmp	#LR__3554
1f864     04 4E 05 F1 | 	add	fp, #4
1f868     A7 1E 02 FB | 	rdlong	local01, fp
1f86c     0F 21 02 F6 | 	mov	local02, local01
1f870     0C 1E 06 F1 | 	add	local01, #12
1f874     0F 1F 02 FB | 	rdlong	local01, local01
1f878     14 20 06 F1 | 	add	local02, #20
1f87c     10 1F 62 FC | 	wrlong	local01, local02
1f880     40 4E 05 F1 | 	add	fp, #64
1f884     A7 20 02 FB | 	rdlong	local02, fp
1f888     0A 20 06 F1 | 	add	local02, #10
1f88c     10 21 E2 FA | 	rdword	local02, local02
1f890     09 20 66 F0 | 	shl	local02, #9
1f894     08 4E 05 F1 | 	add	fp, #8
1f898     A7 20 62 FC | 	wrlong	local02, fp
1f89c     48 4E 85 F1 | 	sub	fp, #72
1f8a0     A7 20 02 FB | 	rdlong	local02, fp
1f8a4     08 20 06 F1 | 	add	local02, #8
1f8a8     10 1F 02 FB | 	rdlong	local01, local02
1f8ac     4C 4E 05 F1 | 	add	fp, #76
1f8b0     A7 1E 62 FC | 	wrlong	local01, fp
1f8b4                 | ' 				fp->fptr = fp->obj.objsize;
1f8b4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1f8b4                 | ' 				clst = fp->obj.sclust;
1f8b4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1f8b4     4C 4E 85 F1 | 	sub	fp, #76
1f8b8     A7 20 02 FB | 	rdlong	local02, fp
1f8bc     0C 20 06 F1 | 	add	local02, #12
1f8c0     10 1F 02 FB | 	rdlong	local01, local02
1f8c4     58 4E 05 F1 | 	add	fp, #88
1f8c8     A7 1E 62 FC | 	wrlong	local01, fp
1f8cc     5C 4E 85 F1 | 	sub	fp, #92
1f8d0                 | LR__3550
1f8d0     10 4E 05 F1 | 	add	fp, #16
1f8d4     A7 20 0A FB | 	rdlong	local02, fp wz
1f8d8     10 4E 85 F1 | 	sub	fp, #16
1f8dc     94 00 90 5D |  if_ne	jmp	#LR__3551
1f8e0     5C 4E 05 F1 | 	add	fp, #92
1f8e4     A7 20 02 FB | 	rdlong	local02, fp
1f8e8     10 4E 85 F1 | 	sub	fp, #16
1f8ec     A7 1E 02 FB | 	rdlong	local01, fp
1f8f0     4C 4E 85 F1 | 	sub	fp, #76
1f8f4     0F 21 1A F2 | 	cmp	local02, local01 wcz
1f8f8     78 00 90 ED |  if_be	jmp	#LR__3551
1f8fc     04 4E 05 F1 | 	add	fp, #4
1f900     A7 12 02 FB | 	rdlong	arg01, fp
1f904     4C 4E 05 F1 | 	add	fp, #76
1f908     A7 14 02 FB | 	rdlong	arg02, fp
1f90c     50 4E 85 F1 | 	sub	fp, #80
1f910     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
1f914     50 4E 05 F1 | 	add	fp, #80
1f918     A7 FA 61 FC | 	wrlong	result1, fp
1f91c     50 4E 85 F1 | 	sub	fp, #80
1f920     02 FA 15 F2 | 	cmp	result1, #2 wc
1f924     10 4E 05 C1 |  if_b	add	fp, #16
1f928     A7 04 68 CC |  if_b	wrlong	#2, fp
1f92c     10 4E 85 C1 |  if_b	sub	fp, #16
1f930     50 4E 05 F1 | 	add	fp, #80
1f934     A7 20 02 FB | 	rdlong	local02, fp
1f938     50 4E 85 F1 | 	sub	fp, #80
1f93c     FF FF 7F FF 
1f940     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1f944     10 4E 05 A1 |  if_e	add	fp, #16
1f948     A7 02 68 AC |  if_e	wrlong	#1, fp
1f94c     10 4E 85 A1 |  if_e	sub	fp, #16
1f950     5C 4E 05 F1 | 	add	fp, #92
1f954     A7 20 02 FB | 	rdlong	local02, fp
1f958     10 4E 85 F1 | 	sub	fp, #16
1f95c     A7 1E 02 FB | 	rdlong	local01, fp
1f960     0F 21 82 F1 | 	sub	local02, local01
1f964     10 4E 05 F1 | 	add	fp, #16
1f968     A7 20 62 FC | 	wrlong	local02, fp
1f96c     5C 4E 85 F1 | 	sub	fp, #92
1f970     5C FF 9F FD | 	jmp	#LR__3550
1f974                 | LR__3551
1f974     04 4E 05 F1 | 	add	fp, #4
1f978     A7 20 02 FB | 	rdlong	local02, fp
1f97c     4C 4E 05 F1 | 	add	fp, #76
1f980     A7 1E 02 FB | 	rdlong	local01, fp
1f984     18 20 06 F1 | 	add	local02, #24
1f988     10 1F 62 FC | 	wrlong	local01, local02
1f98c     40 4E 85 F1 | 	sub	fp, #64
1f990     A7 20 0A FB | 	rdlong	local02, fp wz
1f994     10 4E 85 F1 | 	sub	fp, #16
1f998     B8 00 90 5D |  if_ne	jmp	#LR__3553
1f99c     5C 4E 05 F1 | 	add	fp, #92
1f9a0     A7 1E 02 FB | 	rdlong	local01, fp
1f9a4     5C 4E 85 F1 | 	sub	fp, #92
1f9a8     FF 1F CE F7 | 	test	local01, #511 wz
1f9ac     A4 00 90 AD |  if_e	jmp	#LR__3553
1f9b0     44 4E 05 F1 | 	add	fp, #68
1f9b4     A7 12 02 FB | 	rdlong	arg01, fp
1f9b8     0C 4E 05 F1 | 	add	fp, #12
1f9bc     A7 14 02 FB | 	rdlong	arg02, fp
1f9c0     50 4E 85 F1 | 	sub	fp, #80
1f9c4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
1f9c8     58 4E 05 F1 | 	add	fp, #88
1f9cc     A7 FA 61 FC | 	wrlong	result1, fp
1f9d0     00 FA 4D F2 | 	cmps	result1, #0 wz
1f9d4     58 4E 85 F1 | 	sub	fp, #88
1f9d8     10 4E 05 A1 |  if_e	add	fp, #16
1f9dc     A7 04 68 AC |  if_e	wrlong	#2, fp
1f9e0     10 4E 85 A1 |  if_e	sub	fp, #16
1f9e4     6C 00 90 AD |  if_e	jmp	#LR__3552
1f9e8     04 4E 05 F1 | 	add	fp, #4
1f9ec     A7 20 02 FB | 	rdlong	local02, fp
1f9f0     54 4E 05 F1 | 	add	fp, #84
1f9f4     A7 1E 02 FB | 	rdlong	local01, fp
1f9f8     04 4E 05 F1 | 	add	fp, #4
1f9fc     A7 18 02 FB | 	rdlong	arg04, fp
1fa00     09 18 46 F0 | 	shr	arg04, #9
1fa04     0C 1F 02 F1 | 	add	local01, arg04
1fa08     1C 20 06 F1 | 	add	local02, #28
1fa0c     10 1F 62 FC | 	wrlong	local01, local02
1fa10     18 4E 85 F1 | 	sub	fp, #24
1fa14     A7 20 02 FB | 	rdlong	local02, fp
1fa18     01 20 06 F1 | 	add	local02, #1
1fa1c     10 13 C2 FA | 	rdbyte	arg01, local02
1fa20     40 4E 85 F1 | 	sub	fp, #64
1fa24     A7 20 02 FB | 	rdlong	local02, fp
1fa28     10 15 02 F6 | 	mov	arg02, local02
1fa2c     28 14 06 F1 | 	add	arg02, #40
1fa30     04 4E 85 F1 | 	sub	fp, #4
1fa34     1C 20 06 F1 | 	add	local02, #28
1fa38     10 17 02 FB | 	rdlong	arg03, local02
1fa3c     01 18 06 F6 | 	mov	arg04, #1
1fa40     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
1fa44     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa48     10 4E 05 51 |  if_ne	add	fp, #16
1fa4c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1fa50     10 4E 85 51 |  if_ne	sub	fp, #16
1fa54                 | LR__3552
1fa54                 | LR__3553
1fa54                 | LR__3554
1fa54                 | LR__3555
1fa54                 | LR__3556
1fa54     10 4E 05 F1 | 	add	fp, #16
1fa58     A7 20 0A FB | 	rdlong	local02, fp wz
1fa5c     10 4E 85 F1 | 	sub	fp, #16
1fa60     04 4E 05 51 |  if_ne	add	fp, #4
1fa64     A7 20 02 5B |  if_ne	rdlong	local02, fp
1fa68     04 4E 85 51 |  if_ne	sub	fp, #4
1fa6c     10 01 68 5C |  if_ne	wrlong	#0, local02
1fa70                 | ' 
1fa70                 | ' 	return res ;
1fa70     10 4E 05 F1 | 	add	fp, #16
1fa74     A7 FA 01 FB | 	rdlong	result1, fp
1fa78     10 4E 85 F1 | 	sub	fp, #16
1fa7c                 | LR__3557
1fa7c     A7 F0 03 F6 | 	mov	ptra, fp
1fa80     B2 00 A0 FD | 	call	#popregs_
1fa84                 | _fatfs_cc_f_open_ret
1fa84     2D 00 64 FD | 	ret
1fa88                 | 
1fa88                 | _fatfs_cc_f_read
1fa88     0E 4A 05 F6 | 	mov	COUNT_, #14
1fa8c     A8 00 A0 FD | 	call	#pushregs_
1fa90     38 F0 07 F1 | 	add	ptra, #56
1fa94     04 4E 05 F1 | 	add	fp, #4
1fa98     A7 12 62 FC | 	wrlong	arg01, fp
1fa9c     04 4E 05 F1 | 	add	fp, #4
1faa0     A7 14 62 FC | 	wrlong	arg02, fp
1faa4     04 4E 05 F1 | 	add	fp, #4
1faa8     A7 16 62 FC | 	wrlong	arg03, fp
1faac     04 4E 05 F1 | 	add	fp, #4
1fab0     A7 18 62 FC | 	wrlong	arg04, fp
1fab4     08 4E 85 F1 | 	sub	fp, #8
1fab8     A7 FA 01 FB | 	rdlong	result1, fp
1fabc     2C 4E 05 F1 | 	add	fp, #44
1fac0     A7 FA 61 FC | 	wrlong	result1, fp
1fac4     24 4E 85 F1 | 	sub	fp, #36
1fac8     A7 FA 01 FB | 	rdlong	result1, fp
1facc     FD 00 68 FC | 	wrlong	#0, result1
1fad0     0C 4E 85 F1 | 	sub	fp, #12
1fad4     A7 12 02 FB | 	rdlong	arg01, fp
1fad8     14 4E 05 F1 | 	add	fp, #20
1fadc     A7 14 02 F6 | 	mov	arg02, fp
1fae0     18 4E 85 F1 | 	sub	fp, #24
1fae4     24 F7 BF FD | 	call	#_fatfs_cc_validate
1fae8     14 4E 05 F1 | 	add	fp, #20
1faec     A7 FA 61 FC | 	wrlong	result1, fp
1faf0     00 FA 4D F2 | 	cmps	result1, #0 wz
1faf4     14 4E 85 F1 | 	sub	fp, #20
1faf8     20 00 90 5D |  if_ne	jmp	#LR__3560
1fafc     04 4E 05 F1 | 	add	fp, #4
1fb00     A7 14 02 FB | 	rdlong	arg02, fp
1fb04     11 14 06 F1 | 	add	arg02, #17
1fb08     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
1fb0c     10 4E 05 F1 | 	add	fp, #16
1fb10     A7 14 62 FC | 	wrlong	arg02, fp
1fb14     14 4E 85 F1 | 	sub	fp, #20
1fb18     10 00 90 AD |  if_e	jmp	#LR__3561
1fb1c                 | LR__3560
1fb1c     14 4E 05 F1 | 	add	fp, #20
1fb20     A7 FA 01 FB | 	rdlong	result1, fp
1fb24     14 4E 85 F1 | 	sub	fp, #20
1fb28     EC 05 90 FD | 	jmp	#LR__3580
1fb2c                 | LR__3561
1fb2c     04 4E 05 F1 | 	add	fp, #4
1fb30     A7 18 02 FB | 	rdlong	arg04, fp
1fb34     04 4E 85 F1 | 	sub	fp, #4
1fb38     10 18 06 F1 | 	add	arg04, #16
1fb3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
1fb40     01 18 CE F7 | 	test	arg04, #1 wz
1fb44     07 FA 05 A6 |  if_e	mov	result1, #7
1fb48     CC 05 90 AD |  if_e	jmp	#LR__3580
1fb4c     04 4E 05 F1 | 	add	fp, #4
1fb50     A7 1E 02 FB | 	rdlong	local01, fp
1fb54     0F 21 02 F6 | 	mov	local02, local01
1fb58     0C 20 06 F1 | 	add	local02, #12
1fb5c     10 23 02 FB | 	rdlong	local03, local02
1fb60     14 1E 06 F1 | 	add	local01, #20
1fb64     0F 1F 02 FB | 	rdlong	local01, local01
1fb68     0F 23 82 F1 | 	sub	local03, local01
1fb6c     20 4E 05 F1 | 	add	fp, #32
1fb70     A7 22 62 FC | 	wrlong	local03, fp
1fb74     18 4E 85 F1 | 	sub	fp, #24
1fb78     A7 24 02 FB | 	rdlong	local04, fp
1fb7c     0C 4E 85 F1 | 	sub	fp, #12
1fb80     11 25 1A F2 | 	cmp	local04, local03 wcz
1fb84     24 4E 05 11 |  if_a	add	fp, #36
1fb88     A7 24 02 1B |  if_a	rdlong	local04, fp
1fb8c     18 4E 85 11 |  if_a	sub	fp, #24
1fb90     A7 24 62 1C |  if_a	wrlong	local04, fp
1fb94     0C 4E 85 11 |  if_a	sub	fp, #12
1fb98                 | ' 
1fb98                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
1fb98                 | LR__3562
1fb98     0C 4E 05 F1 | 	add	fp, #12
1fb9c     A7 20 02 FB | 	rdlong	local02, fp
1fba0     0C 4E 85 F1 | 	sub	fp, #12
1fba4     10 25 02 F6 | 	mov	local04, local02
1fba8     01 24 16 F2 | 	cmp	local04, #1 wc
1fbac     64 05 90 CD |  if_b	jmp	#LR__3579
1fbb0     04 4E 05 F1 | 	add	fp, #4
1fbb4     A7 22 02 FB | 	rdlong	local03, fp
1fbb8     04 4E 85 F1 | 	sub	fp, #4
1fbbc     14 22 06 F1 | 	add	local03, #20
1fbc0     11 23 02 FB | 	rdlong	local03, local03
1fbc4     FF 23 CE F7 | 	test	local03, #511 wz
1fbc8     3C 04 90 5D |  if_ne	jmp	#LR__3577
1fbcc     04 4E 05 F1 | 	add	fp, #4
1fbd0     A7 1E 02 FB | 	rdlong	local01, fp
1fbd4     14 1E 06 F1 | 	add	local01, #20
1fbd8     0F 23 02 FB | 	rdlong	local03, local01
1fbdc     09 22 46 F0 | 	shr	local03, #9
1fbe0     14 4E 05 F1 | 	add	fp, #20
1fbe4     A7 26 02 FB | 	rdlong	local05, fp
1fbe8     13 29 02 F6 | 	mov	local06, local05
1fbec     0A 28 06 F1 | 	add	local06, #10
1fbf0     14 2B E2 FA | 	rdword	local07, local06
1fbf4     0A 28 86 F1 | 	sub	local06, #10
1fbf8     15 2D 32 F9 | 	getword	local08, local07, #0
1fbfc     01 2C 86 F1 | 	sub	local08, #1
1fc00     16 23 0A F5 | 	and	local03, local08 wz
1fc04     18 4E 05 F1 | 	add	fp, #24
1fc08     A7 22 62 FC | 	wrlong	local03, fp
1fc0c     30 4E 85 F1 | 	sub	fp, #48
1fc10     E0 00 90 5D |  if_ne	jmp	#LR__3567
1fc14     04 4E 05 F1 | 	add	fp, #4
1fc18     A7 22 02 FB | 	rdlong	local03, fp
1fc1c     04 4E 85 F1 | 	sub	fp, #4
1fc20     14 22 06 F1 | 	add	local03, #20
1fc24     11 23 0A FB | 	rdlong	local03, local03 wz
1fc28     20 00 90 5D |  if_ne	jmp	#LR__3563
1fc2c     04 4E 05 F1 | 	add	fp, #4
1fc30     A7 22 02 FB | 	rdlong	local03, fp
1fc34     08 22 06 F1 | 	add	local03, #8
1fc38     11 23 02 FB | 	rdlong	local03, local03
1fc3c     18 4E 05 F1 | 	add	fp, #24
1fc40     A7 22 62 FC | 	wrlong	local03, fp
1fc44     1C 4E 85 F1 | 	sub	fp, #28
1fc48     28 00 90 FD | 	jmp	#LR__3564
1fc4c                 | LR__3563
1fc4c     04 4E 05 F1 | 	add	fp, #4
1fc50     A7 2C 02 FB | 	rdlong	local08, fp
1fc54     16 13 02 F6 | 	mov	arg01, local08
1fc58     04 4E 85 F1 | 	sub	fp, #4
1fc5c     18 2C 06 F1 | 	add	local08, #24
1fc60     16 15 02 FB | 	rdlong	arg02, local08
1fc64     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
1fc68     1C 4E 05 F1 | 	add	fp, #28
1fc6c     A7 FA 61 FC | 	wrlong	result1, fp
1fc70     1C 4E 85 F1 | 	sub	fp, #28
1fc74                 | LR__3564
1fc74     1C 4E 05 F1 | 	add	fp, #28
1fc78     A7 22 02 FB | 	rdlong	local03, fp
1fc7c     1C 4E 85 F1 | 	sub	fp, #28
1fc80     02 22 16 F2 | 	cmp	local03, #2 wc
1fc84     1C 00 90 3D |  if_ae	jmp	#LR__3565
1fc88     04 4E 05 F1 | 	add	fp, #4
1fc8c     A7 22 02 FB | 	rdlong	local03, fp
1fc90     04 4E 85 F1 | 	sub	fp, #4
1fc94     11 22 06 F1 | 	add	local03, #17
1fc98     11 05 48 FC | 	wrbyte	#2, local03
1fc9c     02 FA 05 F6 | 	mov	result1, #2
1fca0     74 04 90 FD | 	jmp	#LR__3580
1fca4                 | LR__3565
1fca4     1C 4E 05 F1 | 	add	fp, #28
1fca8     A7 22 02 FB | 	rdlong	local03, fp
1fcac     1C 4E 85 F1 | 	sub	fp, #28
1fcb0     FF FF 7F FF 
1fcb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1fcb8     1C 00 90 5D |  if_ne	jmp	#LR__3566
1fcbc     04 4E 05 F1 | 	add	fp, #4
1fcc0     A7 22 02 FB | 	rdlong	local03, fp
1fcc4     04 4E 85 F1 | 	sub	fp, #4
1fcc8     11 22 06 F1 | 	add	local03, #17
1fccc     11 03 48 FC | 	wrbyte	#1, local03
1fcd0     01 FA 05 F6 | 	mov	result1, #1
1fcd4     40 04 90 FD | 	jmp	#LR__3580
1fcd8                 | LR__3566
1fcd8     04 4E 05 F1 | 	add	fp, #4
1fcdc     A7 22 02 FB | 	rdlong	local03, fp
1fce0     18 4E 05 F1 | 	add	fp, #24
1fce4     A7 2C 02 FB | 	rdlong	local08, fp
1fce8     1C 4E 85 F1 | 	sub	fp, #28
1fcec     18 22 06 F1 | 	add	local03, #24
1fcf0     11 2D 62 FC | 	wrlong	local08, local03
1fcf4                 | LR__3567
1fcf4     18 4E 05 F1 | 	add	fp, #24
1fcf8     A7 12 02 FB | 	rdlong	arg01, fp
1fcfc     14 4E 85 F1 | 	sub	fp, #20
1fd00     A7 22 02 FB | 	rdlong	local03, fp
1fd04     04 4E 85 F1 | 	sub	fp, #4
1fd08     18 22 06 F1 | 	add	local03, #24
1fd0c     11 15 02 FB | 	rdlong	arg02, local03
1fd10     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
1fd14     20 4E 05 F1 | 	add	fp, #32
1fd18     A7 FA 61 FC | 	wrlong	result1, fp
1fd1c     20 4E 85 F1 | 	sub	fp, #32
1fd20     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd24     1C 00 90 5D |  if_ne	jmp	#LR__3568
1fd28     04 4E 05 F1 | 	add	fp, #4
1fd2c     A7 22 02 FB | 	rdlong	local03, fp
1fd30     04 4E 85 F1 | 	sub	fp, #4
1fd34     11 22 06 F1 | 	add	local03, #17
1fd38     11 05 48 FC | 	wrbyte	#2, local03
1fd3c     02 FA 05 F6 | 	mov	result1, #2
1fd40     D4 03 90 FD | 	jmp	#LR__3580
1fd44                 | LR__3568
1fd44     20 4E 05 F1 | 	add	fp, #32
1fd48     A7 22 02 FB | 	rdlong	local03, fp
1fd4c     10 4E 05 F1 | 	add	fp, #16
1fd50     A7 2C 02 FB | 	rdlong	local08, fp
1fd54     16 23 02 F1 | 	add	local03, local08
1fd58     10 4E 85 F1 | 	sub	fp, #16
1fd5c     A7 22 62 FC | 	wrlong	local03, fp
1fd60     14 4E 85 F1 | 	sub	fp, #20
1fd64     A7 22 02 FB | 	rdlong	local03, fp
1fd68     09 22 46 F0 | 	shr	local03, #9
1fd6c     20 4E 05 F1 | 	add	fp, #32
1fd70     A7 22 62 FC | 	wrlong	local03, fp
1fd74     2C 4E 85 F1 | 	sub	fp, #44
1fd78     01 22 16 F2 | 	cmp	local03, #1 wc
1fd7c     5C 01 90 CD |  if_b	jmp	#LR__3572
1fd80     30 4E 05 F1 | 	add	fp, #48
1fd84     A7 22 02 FB | 	rdlong	local03, fp
1fd88     04 4E 85 F1 | 	sub	fp, #4
1fd8c     A7 2C 02 FB | 	rdlong	local08, fp
1fd90     16 23 02 F1 | 	add	local03, local08
1fd94     14 4E 85 F1 | 	sub	fp, #20
1fd98     A7 2C 02 FB | 	rdlong	local08, fp
1fd9c     18 4E 85 F1 | 	sub	fp, #24
1fda0     0A 2C 06 F1 | 	add	local08, #10
1fda4     16 2D E2 FA | 	rdword	local08, local08
1fda8     16 23 1A F2 | 	cmp	local03, local08 wcz
1fdac     28 00 90 ED |  if_be	jmp	#LR__3569
1fdb0     18 4E 05 F1 | 	add	fp, #24
1fdb4     A7 1E 02 FB | 	rdlong	local01, fp
1fdb8     0A 1E 06 F1 | 	add	local01, #10
1fdbc     0F 23 E2 FA | 	rdword	local03, local01
1fdc0     18 4E 05 F1 | 	add	fp, #24
1fdc4     A7 2C 02 FB | 	rdlong	local08, fp
1fdc8     16 23 82 F1 | 	sub	local03, local08
1fdcc     04 4E 85 F1 | 	sub	fp, #4
1fdd0     A7 22 62 FC | 	wrlong	local03, fp
1fdd4     2C 4E 85 F1 | 	sub	fp, #44
1fdd8                 | LR__3569
1fdd8     18 4E 05 F1 | 	add	fp, #24
1fddc     A7 1E 02 FB | 	rdlong	local01, fp
1fde0     01 1E 06 F1 | 	add	local01, #1
1fde4     0F 13 C2 FA | 	rdbyte	arg01, local01
1fde8     1C 4E 05 F1 | 	add	fp, #28
1fdec     A7 14 02 FB | 	rdlong	arg02, fp
1fdf0     14 4E 85 F1 | 	sub	fp, #20
1fdf4     A7 16 02 FB | 	rdlong	arg03, fp
1fdf8     0C 4E 05 F1 | 	add	fp, #12
1fdfc     A7 18 02 FB | 	rdlong	arg04, fp
1fe00     2C 4E 85 F1 | 	sub	fp, #44
1fe04     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
1fe08     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe0c     1C 00 90 AD |  if_e	jmp	#LR__3570
1fe10     04 4E 05 F1 | 	add	fp, #4
1fe14     A7 22 02 FB | 	rdlong	local03, fp
1fe18     04 4E 85 F1 | 	sub	fp, #4
1fe1c     11 22 06 F1 | 	add	local03, #17
1fe20     11 03 48 FC | 	wrbyte	#1, local03
1fe24     01 FA 05 F6 | 	mov	result1, #1
1fe28     EC 02 90 FD | 	jmp	#LR__3580
1fe2c                 | LR__3570
1fe2c     04 4E 05 F1 | 	add	fp, #4
1fe30     A7 1E 02 FB | 	rdlong	local01, fp
1fe34     04 4E 85 F1 | 	sub	fp, #4
1fe38     10 1E 06 F1 | 	add	local01, #16
1fe3c     0F 23 C2 FA | 	rdbyte	local03, local01
1fe40     80 22 CE F7 | 	test	local03, #128 wz
1fe44     78 00 90 AD |  if_e	jmp	#LR__3571
1fe48     04 4E 05 F1 | 	add	fp, #4
1fe4c     A7 2C 02 FB | 	rdlong	local08, fp
1fe50     1C 2C 06 F1 | 	add	local08, #28
1fe54     16 2D 02 FB | 	rdlong	local08, local08
1fe58     1C 4E 05 F1 | 	add	fp, #28
1fe5c     A7 2E 02 FB | 	rdlong	local09, fp
1fe60     17 2D 82 F1 | 	sub	local08, local09
1fe64     0C 4E 05 F1 | 	add	fp, #12
1fe68     A7 30 02 FB | 	rdlong	local10, fp
1fe6c     2C 4E 85 F1 | 	sub	fp, #44
1fe70     18 33 02 F6 | 	mov	local11, local10
1fe74     19 2D 12 F2 | 	cmp	local08, local11 wc
1fe78     44 00 90 3D |  if_ae	jmp	#LR__3571
1fe7c     34 4E 05 F1 | 	add	fp, #52
1fe80     A7 12 02 FB | 	rdlong	arg01, fp
1fe84     30 4E 85 F1 | 	sub	fp, #48
1fe88     A7 14 02 FB | 	rdlong	arg02, fp
1fe8c     0A 33 02 F6 | 	mov	local11, arg02
1fe90     1C 32 06 F1 | 	add	local11, #28
1fe94     19 2F 02 FB | 	rdlong	local09, local11
1fe98     1C 4E 05 F1 | 	add	fp, #28
1fe9c     A7 26 02 FB | 	rdlong	local05, fp
1fea0     13 2F 82 F1 | 	sub	local09, local05
1fea4     09 2E 66 F0 | 	shl	local09, #9
1fea8     17 33 02 F6 | 	mov	local11, local09
1feac     17 13 02 F1 | 	add	arg01, local09
1feb0     20 4E 85 F1 | 	sub	fp, #32
1feb4     28 14 06 F1 | 	add	arg02, #40
1feb8     09 16 C6 F9 | 	decod	arg03, #9
1febc     A0 4C BF FD | 	call	#__system____builtin_memmove
1fec0                 | LR__3571
1fec0     2C 4E 05 F1 | 	add	fp, #44
1fec4     A7 22 02 FB | 	rdlong	local03, fp
1fec8     09 22 66 F0 | 	shl	local03, #9
1fecc     04 4E 85 F1 | 	sub	fp, #4
1fed0     A7 22 62 FC | 	wrlong	local03, fp
1fed4     28 4E 85 F1 | 	sub	fp, #40
1fed8                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
1fed8                 | ' 				}
1fed8                 | ' 
1fed8                 | ' 
1fed8                 | ' 				rcnt =  ((UINT) 512 )  * cc;
1fed8                 | ' 				continue;
1fed8     B4 01 90 FD | 	jmp	#LR__3578
1fedc                 | LR__3572
1fedc     04 4E 05 F1 | 	add	fp, #4
1fee0     A7 22 02 FB | 	rdlong	local03, fp
1fee4     1C 22 06 F1 | 	add	local03, #28
1fee8     11 23 02 FB | 	rdlong	local03, local03
1feec     1C 4E 05 F1 | 	add	fp, #28
1fef0     A7 1E 02 FB | 	rdlong	local01, fp
1fef4     20 4E 85 F1 | 	sub	fp, #32
1fef8     0F 23 0A F2 | 	cmp	local03, local01 wz
1fefc     EC 00 90 AD |  if_e	jmp	#LR__3576
1ff00     04 4E 05 F1 | 	add	fp, #4
1ff04     A7 1E 02 FB | 	rdlong	local01, fp
1ff08     04 4E 85 F1 | 	sub	fp, #4
1ff0c     10 1E 06 F1 | 	add	local01, #16
1ff10     0F 23 C2 FA | 	rdbyte	local03, local01
1ff14     80 22 CE F7 | 	test	local03, #128 wz
1ff18     7C 00 90 AD |  if_e	jmp	#LR__3574
1ff1c     18 4E 05 F1 | 	add	fp, #24
1ff20     A7 1E 02 FB | 	rdlong	local01, fp
1ff24     01 1E 06 F1 | 	add	local01, #1
1ff28     0F 13 C2 FA | 	rdbyte	arg01, local01
1ff2c     14 4E 85 F1 | 	sub	fp, #20
1ff30     A7 22 02 FB | 	rdlong	local03, fp
1ff34     11 15 02 F6 | 	mov	arg02, local03
1ff38     28 14 06 F1 | 	add	arg02, #40
1ff3c     04 4E 85 F1 | 	sub	fp, #4
1ff40     1C 22 06 F1 | 	add	local03, #28
1ff44     11 17 02 FB | 	rdlong	arg03, local03
1ff48     01 18 06 F6 | 	mov	arg04, #1
1ff4c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
1ff50     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff54     1C 00 90 AD |  if_e	jmp	#LR__3573
1ff58     04 4E 05 F1 | 	add	fp, #4
1ff5c     A7 22 02 FB | 	rdlong	local03, fp
1ff60     04 4E 85 F1 | 	sub	fp, #4
1ff64     11 22 06 F1 | 	add	local03, #17
1ff68     11 03 48 FC | 	wrbyte	#1, local03
1ff6c     01 FA 05 F6 | 	mov	result1, #1
1ff70     A4 01 90 FD | 	jmp	#LR__3580
1ff74                 | LR__3573
1ff74     04 4E 05 F1 | 	add	fp, #4
1ff78     A7 32 02 FB | 	rdlong	local11, fp
1ff7c     19 23 02 F6 | 	mov	local03, local11
1ff80     04 4E 85 F1 | 	sub	fp, #4
1ff84     10 32 06 F1 | 	add	local11, #16
1ff88     19 33 C2 FA | 	rdbyte	local11, local11
1ff8c     7F 32 06 F5 | 	and	local11, #127
1ff90     10 22 06 F1 | 	add	local03, #16
1ff94     11 33 42 FC | 	wrbyte	local11, local03
1ff98                 | LR__3574
1ff98     18 4E 05 F1 | 	add	fp, #24
1ff9c     A7 1E 02 FB | 	rdlong	local01, fp
1ffa0     01 1E 06 F1 | 	add	local01, #1
1ffa4     0F 13 C2 FA | 	rdbyte	arg01, local01
1ffa8     14 4E 85 F1 | 	sub	fp, #20
1ffac     A7 14 02 FB | 	rdlong	arg02, fp
1ffb0     28 14 06 F1 | 	add	arg02, #40
1ffb4     1C 4E 05 F1 | 	add	fp, #28
1ffb8     A7 16 02 FB | 	rdlong	arg03, fp
1ffbc     20 4E 85 F1 | 	sub	fp, #32
1ffc0     01 18 06 F6 | 	mov	arg04, #1
1ffc4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
1ffc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffcc     1C 00 90 AD |  if_e	jmp	#LR__3575
1ffd0     04 4E 05 F1 | 	add	fp, #4
1ffd4     A7 22 02 FB | 	rdlong	local03, fp
1ffd8     04 4E 85 F1 | 	sub	fp, #4
1ffdc     11 22 06 F1 | 	add	local03, #17
1ffe0     11 03 48 FC | 	wrbyte	#1, local03
1ffe4     01 FA 05 F6 | 	mov	result1, #1
1ffe8     2C 01 90 FD | 	jmp	#LR__3580
1ffec                 | LR__3575
1ffec                 | LR__3576
1ffec     04 4E 05 F1 | 	add	fp, #4
1fff0     A7 22 02 FB | 	rdlong	local03, fp
1fff4     1C 4E 05 F1 | 	add	fp, #28
1fff8     A7 32 02 FB | 	rdlong	local11, fp
1fffc     20 4E 85 F1 | 	sub	fp, #32
20000     1C 22 06 F1 | 	add	local03, #28
20004     11 33 62 FC | 	wrlong	local11, local03
20008                 | LR__3577
20008     04 4E 05 F1 | 	add	fp, #4
2000c     A7 1E 02 FB | 	rdlong	local01, fp
20010     14 1E 06 F1 | 	add	local01, #20
20014     0F 33 02 FB | 	rdlong	local11, local01
20018     FF 33 06 F5 | 	and	local11, #511
2001c     09 22 C6 F9 | 	decod	local03, #9
20020     19 23 82 F1 | 	sub	local03, local11
20024     24 4E 05 F1 | 	add	fp, #36
20028     A7 22 62 FC | 	wrlong	local03, fp
2002c     1C 4E 85 F1 | 	sub	fp, #28
20030     A7 32 02 FB | 	rdlong	local11, fp
20034     0C 4E 85 F1 | 	sub	fp, #12
20038     19 23 1A F2 | 	cmp	local03, local11 wcz
2003c     0C 4E 05 11 |  if_a	add	fp, #12
20040     A7 22 02 1B |  if_a	rdlong	local03, fp
20044     1C 4E 05 11 |  if_a	add	fp, #28
20048     A7 22 62 1C |  if_a	wrlong	local03, fp
2004c     28 4E 85 11 |  if_a	sub	fp, #40
20050     34 4E 05 F1 | 	add	fp, #52
20054     A7 12 02 FB | 	rdlong	arg01, fp
20058     30 4E 85 F1 | 	sub	fp, #48
2005c     A7 28 02 FB | 	rdlong	local06, fp
20060     14 15 02 F6 | 	mov	arg02, local06
20064     28 14 06 F1 | 	add	arg02, #40
20068     14 28 06 F1 | 	add	local06, #20
2006c     14 33 02 FB | 	rdlong	local11, local06
20070     19 2F 02 F6 | 	mov	local09, local11
20074     17 31 02 F6 | 	mov	local10, local09
20078     FF 31 06 F5 | 	and	local10, #511
2007c     18 15 02 F1 | 	add	arg02, local10
20080     24 4E 05 F1 | 	add	fp, #36
20084     A7 16 02 FB | 	rdlong	arg03, fp
20088     28 4E 85 F1 | 	sub	fp, #40
2008c     D0 4A BF FD | 	call	#__system____builtin_memmove
20090                 | LR__3578
20090     0C 4E 05 F1 | 	add	fp, #12
20094     A7 22 02 FB | 	rdlong	local03, fp
20098     1C 4E 05 F1 | 	add	fp, #28
2009c     A7 2C 02 FB | 	rdlong	local08, fp
200a0     16 23 82 F1 | 	sub	local03, local08
200a4     1C 4E 85 F1 | 	sub	fp, #28
200a8     A7 22 62 FC | 	wrlong	local03, fp
200ac     04 4E 05 F1 | 	add	fp, #4
200b0     A7 1E 02 FB | 	rdlong	local01, fp
200b4     0F 2B 02 FB | 	rdlong	local07, local01
200b8     18 4E 05 F1 | 	add	fp, #24
200bc     A7 2C 02 FB | 	rdlong	local08, fp
200c0     16 2B 02 F1 | 	add	local07, local08
200c4     0F 2B 62 FC | 	wrlong	local07, local01
200c8     0C 4E 05 F1 | 	add	fp, #12
200cc     A7 22 02 FB | 	rdlong	local03, fp
200d0     0C 4E 85 F1 | 	sub	fp, #12
200d4     A7 34 02 FB | 	rdlong	local12, fp
200d8     1A 23 02 F1 | 	add	local03, local12
200dc     0C 4E 05 F1 | 	add	fp, #12
200e0     A7 22 62 FC | 	wrlong	local03, fp
200e4     30 4E 85 F1 | 	sub	fp, #48
200e8     A7 36 02 FB | 	rdlong	local13, fp
200ec     1B 23 02 F6 | 	mov	local03, local13
200f0     14 36 06 F1 | 	add	local13, #20
200f4     1B 39 02 FB | 	rdlong	local14, local13
200f8     24 4E 05 F1 | 	add	fp, #36
200fc     A7 28 02 FB | 	rdlong	local06, fp
20100     28 4E 85 F1 | 	sub	fp, #40
20104     14 39 02 F1 | 	add	local14, local06
20108     14 22 06 F1 | 	add	local03, #20
2010c     11 39 62 FC | 	wrlong	local14, local03
20110     84 FA 9F FD | 	jmp	#LR__3562
20114                 | LR__3579
20114                 | ' 
20114                 | ' 
20114                 | ' 
20114                 | ' 
20114                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
20114                 | ' 
20114                 | ' 	}
20114                 | ' 
20114                 | ' 	return FR_OK ;
20114     00 FA 05 F6 | 	mov	result1, #0
20118                 | LR__3580
20118     A7 F0 03 F6 | 	mov	ptra, fp
2011c     B2 00 A0 FD | 	call	#popregs_
20120                 | _fatfs_cc_f_read_ret
20120     2D 00 64 FD | 	ret
20124                 | 
20124                 | _fatfs_cc_f_write
20124     15 4A 05 F6 | 	mov	COUNT_, #21
20128     A8 00 A0 FD | 	call	#pushregs_
2012c     34 F0 07 F1 | 	add	ptra, #52
20130     04 4E 05 F1 | 	add	fp, #4
20134     A7 12 62 FC | 	wrlong	arg01, fp
20138     04 4E 05 F1 | 	add	fp, #4
2013c     A7 14 62 FC | 	wrlong	arg02, fp
20140     04 4E 05 F1 | 	add	fp, #4
20144     A7 16 62 FC | 	wrlong	arg03, fp
20148     04 4E 05 F1 | 	add	fp, #4
2014c     A7 18 62 FC | 	wrlong	arg04, fp
20150     08 4E 85 F1 | 	sub	fp, #8
20154     A7 FA 01 FB | 	rdlong	result1, fp
20158     28 4E 05 F1 | 	add	fp, #40
2015c     A7 FA 61 FC | 	wrlong	result1, fp
20160     20 4E 85 F1 | 	sub	fp, #32
20164     A7 FA 01 FB | 	rdlong	result1, fp
20168     FD 00 68 FC | 	wrlong	#0, result1
2016c     0C 4E 85 F1 | 	sub	fp, #12
20170     A7 12 02 FB | 	rdlong	arg01, fp
20174     14 4E 05 F1 | 	add	fp, #20
20178     A7 14 02 F6 | 	mov	arg02, fp
2017c     18 4E 85 F1 | 	sub	fp, #24
20180     88 F0 BF FD | 	call	#_fatfs_cc_validate
20184     14 4E 05 F1 | 	add	fp, #20
20188     A7 FA 61 FC | 	wrlong	result1, fp
2018c     00 FA 4D F2 | 	cmps	result1, #0 wz
20190     14 4E 85 F1 | 	sub	fp, #20
20194     20 00 90 5D |  if_ne	jmp	#LR__3590
20198     04 4E 05 F1 | 	add	fp, #4
2019c     A7 14 02 FB | 	rdlong	arg02, fp
201a0     11 14 06 F1 | 	add	arg02, #17
201a4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
201a8     10 4E 05 F1 | 	add	fp, #16
201ac     A7 14 62 FC | 	wrlong	arg02, fp
201b0     14 4E 85 F1 | 	sub	fp, #20
201b4     10 00 90 AD |  if_e	jmp	#LR__3591
201b8                 | LR__3590
201b8     14 4E 05 F1 | 	add	fp, #20
201bc     A7 FA 01 FB | 	rdlong	result1, fp
201c0     14 4E 85 F1 | 	sub	fp, #20
201c4     44 07 90 FD | 	jmp	#LR__3613
201c8                 | LR__3591
201c8     04 4E 05 F1 | 	add	fp, #4
201cc     A7 14 02 FB | 	rdlong	arg02, fp
201d0     04 4E 85 F1 | 	sub	fp, #4
201d4     10 14 06 F1 | 	add	arg02, #16
201d8     0A 15 C2 FA | 	rdbyte	arg02, arg02
201dc     02 14 CE F7 | 	test	arg02, #2 wz
201e0     07 FA 05 A6 |  if_e	mov	result1, #7
201e4     24 07 90 AD |  if_e	jmp	#LR__3613
201e8     04 4E 05 F1 | 	add	fp, #4
201ec     A7 14 02 FB | 	rdlong	arg02, fp
201f0     0A 13 02 F6 | 	mov	arg01, arg02
201f4     14 12 06 F1 | 	add	arg01, #20
201f8     09 13 02 FB | 	rdlong	arg01, arg01
201fc     08 4E 05 F1 | 	add	fp, #8
20200     A7 FA 01 FB | 	rdlong	result1, fp
20204     FD 12 02 F1 | 	add	arg01, result1
20208     0C 4E 85 F1 | 	sub	fp, #12
2020c     14 14 06 F1 | 	add	arg02, #20
20210     0A FB 01 FB | 	rdlong	result1, arg02
20214     FD 12 12 F2 | 	cmp	arg01, result1 wc
20218     24 00 90 3D |  if_ae	jmp	#LR__3592
2021c     04 4E 05 F1 | 	add	fp, #4
20220     A7 14 02 FB | 	rdlong	arg02, fp
20224     01 FA 65 F6 | 	neg	result1, #1
20228     14 14 06 F1 | 	add	arg02, #20
2022c     0A 15 02 FB | 	rdlong	arg02, arg02
20230     0A FB 81 F1 | 	sub	result1, arg02
20234     08 4E 05 F1 | 	add	fp, #8
20238     A7 FA 61 FC | 	wrlong	result1, fp
2023c     0C 4E 85 F1 | 	sub	fp, #12
20240                 | LR__3592
20240                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20240                 | ' 	}
20240                 | ' 
20240                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20240                 | LR__3593
20240     0C 4E 05 F1 | 	add	fp, #12
20244     A7 FA 01 FB | 	rdlong	result1, fp
20248     0C 4E 85 F1 | 	sub	fp, #12
2024c     01 FA 15 F2 | 	cmp	result1, #1 wc
20250     90 06 90 CD |  if_b	jmp	#LR__3612
20254     04 4E 05 F1 | 	add	fp, #4
20258     A7 FA 01 FB | 	rdlong	result1, fp
2025c     04 4E 85 F1 | 	sub	fp, #4
20260     14 FA 05 F1 | 	add	result1, #20
20264     FD FA 01 FB | 	rdlong	result1, result1
20268     FF FB CD F7 | 	test	result1, #511 wz
2026c     D8 04 90 5D |  if_ne	jmp	#LR__3608
20270     04 4E 05 F1 | 	add	fp, #4
20274     A7 FA 01 FB | 	rdlong	result1, fp
20278     14 FA 05 F1 | 	add	result1, #20
2027c     FD FA 01 FB | 	rdlong	result1, result1
20280     09 FA 45 F0 | 	shr	result1, #9
20284     14 4E 05 F1 | 	add	fp, #20
20288     A7 14 02 FB | 	rdlong	arg02, fp
2028c     0A 14 06 F1 | 	add	arg02, #10
20290     0A 19 E2 FA | 	rdword	arg04, arg02
20294     0C 15 32 F9 | 	getword	arg02, arg04, #0
20298     01 14 86 F1 | 	sub	arg02, #1
2029c     0A FB 09 F5 | 	and	result1, arg02 wz
202a0     14 4E 05 F1 | 	add	fp, #20
202a4     A7 FA 61 FC | 	wrlong	result1, fp
202a8     2C 4E 85 F1 | 	sub	fp, #44
202ac     44 01 90 5D |  if_ne	jmp	#LR__3599
202b0     04 4E 05 F1 | 	add	fp, #4
202b4     A7 FA 01 FB | 	rdlong	result1, fp
202b8     04 4E 85 F1 | 	sub	fp, #4
202bc     14 FA 05 F1 | 	add	result1, #20
202c0     FD 14 0A FB | 	rdlong	arg02, result1 wz
202c4     44 00 90 5D |  if_ne	jmp	#LR__3594
202c8     04 4E 05 F1 | 	add	fp, #4
202cc     A7 14 02 FB | 	rdlong	arg02, fp
202d0     08 14 06 F1 | 	add	arg02, #8
202d4     0A 15 0A FB | 	rdlong	arg02, arg02 wz
202d8     18 4E 05 F1 | 	add	fp, #24
202dc     A7 14 62 FC | 	wrlong	arg02, fp
202e0     1C 4E 85 F1 | 	sub	fp, #28
202e4     4C 00 90 5D |  if_ne	jmp	#LR__3595
202e8     04 4E 05 F1 | 	add	fp, #4
202ec     A7 12 02 FB | 	rdlong	arg01, fp
202f0     04 4E 85 F1 | 	sub	fp, #4
202f4     00 14 06 F6 | 	mov	arg02, #0
202f8     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
202fc     1C 4E 05 F1 | 	add	fp, #28
20300     A7 FA 61 FC | 	wrlong	result1, fp
20304     1C 4E 85 F1 | 	sub	fp, #28
20308     28 00 90 FD | 	jmp	#LR__3595
2030c                 | LR__3594
2030c     04 4E 05 F1 | 	add	fp, #4
20310     A7 18 02 FB | 	rdlong	arg04, fp
20314     0C 13 02 F6 | 	mov	arg01, arg04
20318     04 4E 85 F1 | 	sub	fp, #4
2031c     18 18 06 F1 | 	add	arg04, #24
20320     0C 15 02 FB | 	rdlong	arg02, arg04
20324     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
20328     1C 4E 05 F1 | 	add	fp, #28
2032c     A7 FA 61 FC | 	wrlong	result1, fp
20330     1C 4E 85 F1 | 	sub	fp, #28
20334                 | LR__3595
20334     1C 4E 05 F1 | 	add	fp, #28
20338     A7 FA 09 FB | 	rdlong	result1, fp wz
2033c     1C 4E 85 F1 | 	sub	fp, #28
20340     A0 05 90 AD |  if_e	jmp	#LR__3612
20344     1C 4E 05 F1 | 	add	fp, #28
20348     A7 FA 01 FB | 	rdlong	result1, fp
2034c     1C 4E 85 F1 | 	sub	fp, #28
20350     01 FA 0D F2 | 	cmp	result1, #1 wz
20354     1C 00 90 5D |  if_ne	jmp	#LR__3596
20358     04 4E 05 F1 | 	add	fp, #4
2035c     A7 FA 01 FB | 	rdlong	result1, fp
20360     04 4E 85 F1 | 	sub	fp, #4
20364     11 FA 05 F1 | 	add	result1, #17
20368     FD 04 48 FC | 	wrbyte	#2, result1
2036c     02 FA 05 F6 | 	mov	result1, #2
20370     98 05 90 FD | 	jmp	#LR__3613
20374                 | LR__3596
20374     1C 4E 05 F1 | 	add	fp, #28
20378     A7 FA 01 FB | 	rdlong	result1, fp
2037c     1C 4E 85 F1 | 	sub	fp, #28
20380     FF FF 7F FF 
20384     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20388     1C 00 90 5D |  if_ne	jmp	#LR__3597
2038c     04 4E 05 F1 | 	add	fp, #4
20390     A7 FA 01 FB | 	rdlong	result1, fp
20394     04 4E 85 F1 | 	sub	fp, #4
20398     11 FA 05 F1 | 	add	result1, #17
2039c     FD 02 48 FC | 	wrbyte	#1, result1
203a0     01 FA 05 F6 | 	mov	result1, #1
203a4     64 05 90 FD | 	jmp	#LR__3613
203a8                 | LR__3597
203a8     04 4E 05 F1 | 	add	fp, #4
203ac     A7 FA 01 FB | 	rdlong	result1, fp
203b0     18 4E 05 F1 | 	add	fp, #24
203b4     A7 18 02 FB | 	rdlong	arg04, fp
203b8     18 FA 05 F1 | 	add	result1, #24
203bc     FD 18 62 FC | 	wrlong	arg04, result1
203c0     18 4E 85 F1 | 	sub	fp, #24
203c4     A7 FA 01 FB | 	rdlong	result1, fp
203c8     04 4E 85 F1 | 	sub	fp, #4
203cc     08 FA 05 F1 | 	add	result1, #8
203d0     FD FA 09 FB | 	rdlong	result1, result1 wz
203d4     1C 00 90 5D |  if_ne	jmp	#LR__3598
203d8     04 4E 05 F1 | 	add	fp, #4
203dc     A7 18 02 FB | 	rdlong	arg04, fp
203e0     18 4E 05 F1 | 	add	fp, #24
203e4     A7 FA 01 FB | 	rdlong	result1, fp
203e8     1C 4E 85 F1 | 	sub	fp, #28
203ec     08 18 06 F1 | 	add	arg04, #8
203f0     0C FB 61 FC | 	wrlong	result1, arg04
203f4                 | LR__3598
203f4                 | LR__3599
203f4     04 4E 05 F1 | 	add	fp, #4
203f8     A7 18 02 FB | 	rdlong	arg04, fp
203fc     04 4E 85 F1 | 	sub	fp, #4
20400     10 18 06 F1 | 	add	arg04, #16
20404     0C 19 C2 FA | 	rdbyte	arg04, arg04
20408     80 18 CE F7 | 	test	arg04, #128 wz
2040c     7C 00 90 AD |  if_e	jmp	#LR__3601
20410     18 4E 05 F1 | 	add	fp, #24
20414     A7 18 02 FB | 	rdlong	arg04, fp
20418     01 18 06 F1 | 	add	arg04, #1
2041c     0C 13 C2 FA | 	rdbyte	arg01, arg04
20420     14 4E 85 F1 | 	sub	fp, #20
20424     A7 18 02 FB | 	rdlong	arg04, fp
20428     0C 15 02 F6 | 	mov	arg02, arg04
2042c     28 14 06 F1 | 	add	arg02, #40
20430     04 4E 85 F1 | 	sub	fp, #4
20434     1C 18 06 F1 | 	add	arg04, #28
20438     0C 17 02 FB | 	rdlong	arg03, arg04
2043c     01 18 06 F6 | 	mov	arg04, #1
20440     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
20444     00 FA 0D F2 | 	cmp	result1, #0 wz
20448     1C 00 90 AD |  if_e	jmp	#LR__3600
2044c     04 4E 05 F1 | 	add	fp, #4
20450     A7 FA 01 FB | 	rdlong	result1, fp
20454     04 4E 85 F1 | 	sub	fp, #4
20458     11 FA 05 F1 | 	add	result1, #17
2045c     FD 02 48 FC | 	wrbyte	#1, result1
20460     01 FA 05 F6 | 	mov	result1, #1
20464     A4 04 90 FD | 	jmp	#LR__3613
20468                 | LR__3600
20468     04 4E 05 F1 | 	add	fp, #4
2046c     A7 18 02 FB | 	rdlong	arg04, fp
20470     0C FB 01 F6 | 	mov	result1, arg04
20474     04 4E 85 F1 | 	sub	fp, #4
20478     10 18 06 F1 | 	add	arg04, #16
2047c     0C 19 C2 FA | 	rdbyte	arg04, arg04
20480     7F 18 06 F5 | 	and	arg04, #127
20484     10 FA 05 F1 | 	add	result1, #16
20488     FD 18 42 FC | 	wrbyte	arg04, result1
2048c                 | LR__3601
2048c     18 4E 05 F1 | 	add	fp, #24
20490     A7 12 02 FB | 	rdlong	arg01, fp
20494     14 4E 85 F1 | 	sub	fp, #20
20498     A7 14 02 FB | 	rdlong	arg02, fp
2049c     04 4E 85 F1 | 	sub	fp, #4
204a0     18 14 06 F1 | 	add	arg02, #24
204a4     0A 15 02 FB | 	rdlong	arg02, arg02
204a8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
204ac     20 4E 05 F1 | 	add	fp, #32
204b0     A7 FA 61 FC | 	wrlong	result1, fp
204b4     20 4E 85 F1 | 	sub	fp, #32
204b8     00 FA 0D F2 | 	cmp	result1, #0 wz
204bc     1C 00 90 5D |  if_ne	jmp	#LR__3602
204c0     04 4E 05 F1 | 	add	fp, #4
204c4     A7 FA 01 FB | 	rdlong	result1, fp
204c8     04 4E 85 F1 | 	sub	fp, #4
204cc     11 FA 05 F1 | 	add	result1, #17
204d0     FD 04 48 FC | 	wrbyte	#2, result1
204d4     02 FA 05 F6 | 	mov	result1, #2
204d8     30 04 90 FD | 	jmp	#LR__3613
204dc                 | LR__3602
204dc     20 4E 05 F1 | 	add	fp, #32
204e0     A7 FA 01 FB | 	rdlong	result1, fp
204e4     0C 4E 05 F1 | 	add	fp, #12
204e8     A7 1E 02 FB | 	rdlong	local01, fp
204ec     0F FB 01 F1 | 	add	result1, local01
204f0     0C 4E 85 F1 | 	sub	fp, #12
204f4     A7 FA 61 FC | 	wrlong	result1, fp
204f8     14 4E 85 F1 | 	sub	fp, #20
204fc     A7 FA 01 FB | 	rdlong	result1, fp
20500     09 FA 45 F0 | 	shr	result1, #9
20504     1C 4E 05 F1 | 	add	fp, #28
20508     A7 FA 61 FC | 	wrlong	result1, fp
2050c     28 4E 85 F1 | 	sub	fp, #40
20510     01 FA 15 F2 | 	cmp	result1, #1 wc
20514     60 01 90 CD |  if_b	jmp	#LR__3606
20518     2C 4E 05 F1 | 	add	fp, #44
2051c     A7 FA 01 FB | 	rdlong	result1, fp
20520     04 4E 85 F1 | 	sub	fp, #4
20524     A7 18 02 FB | 	rdlong	arg04, fp
20528     0C FB 01 F1 | 	add	result1, arg04
2052c     10 4E 85 F1 | 	sub	fp, #16
20530     A7 18 02 FB | 	rdlong	arg04, fp
20534     18 4E 85 F1 | 	sub	fp, #24
20538     0A 18 06 F1 | 	add	arg04, #10
2053c     0C 19 E2 FA | 	rdword	arg04, arg04
20540     0C FB 19 F2 | 	cmp	result1, arg04 wcz
20544     28 00 90 ED |  if_be	jmp	#LR__3603
20548     18 4E 05 F1 | 	add	fp, #24
2054c     A7 FA 01 FB | 	rdlong	result1, fp
20550     0A FA 05 F1 | 	add	result1, #10
20554     FD FA E1 FA | 	rdword	result1, result1
20558     14 4E 05 F1 | 	add	fp, #20
2055c     A7 18 02 FB | 	rdlong	arg04, fp
20560     0C FB 81 F1 | 	sub	result1, arg04
20564     04 4E 85 F1 | 	sub	fp, #4
20568     A7 FA 61 FC | 	wrlong	result1, fp
2056c     28 4E 85 F1 | 	sub	fp, #40
20570                 | LR__3603
20570     18 4E 05 F1 | 	add	fp, #24
20574     A7 18 02 FB | 	rdlong	arg04, fp
20578     01 18 06 F1 | 	add	arg04, #1
2057c     0C 13 C2 FA | 	rdbyte	arg01, arg04
20580     18 4E 05 F1 | 	add	fp, #24
20584     A7 14 02 FB | 	rdlong	arg02, fp
20588     10 4E 85 F1 | 	sub	fp, #16
2058c     A7 16 02 FB | 	rdlong	arg03, fp
20590     08 4E 05 F1 | 	add	fp, #8
20594     A7 18 02 FB | 	rdlong	arg04, fp
20598     28 4E 85 F1 | 	sub	fp, #40
2059c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
205a0     00 FA 0D F2 | 	cmp	result1, #0 wz
205a4     1C 00 90 AD |  if_e	jmp	#LR__3604
205a8     04 4E 05 F1 | 	add	fp, #4
205ac     A7 1E 02 FB | 	rdlong	local01, fp
205b0     04 4E 85 F1 | 	sub	fp, #4
205b4     11 1E 06 F1 | 	add	local01, #17
205b8     0F 03 48 FC | 	wrbyte	#1, local01
205bc     01 FA 05 F6 | 	mov	result1, #1
205c0     48 03 90 FD | 	jmp	#LR__3613
205c4                 | LR__3604
205c4     04 4E 05 F1 | 	add	fp, #4
205c8     A7 FA 01 FB | 	rdlong	result1, fp
205cc     1C FA 05 F1 | 	add	result1, #28
205d0     FD FA 01 FB | 	rdlong	result1, result1
205d4     1C 4E 05 F1 | 	add	fp, #28
205d8     A7 20 02 FB | 	rdlong	local02, fp
205dc     10 FB 81 F1 | 	sub	result1, local02
205e0     08 4E 05 F1 | 	add	fp, #8
205e4     A7 18 02 FB | 	rdlong	arg04, fp
205e8     28 4E 85 F1 | 	sub	fp, #40
205ec     0C FB 11 F2 | 	cmp	result1, arg04 wc
205f0     68 00 90 3D |  if_ae	jmp	#LR__3605
205f4     04 4E 05 F1 | 	add	fp, #4
205f8     A7 12 02 FB | 	rdlong	arg01, fp
205fc     28 12 06 F1 | 	add	arg01, #40
20600     2C 4E 05 F1 | 	add	fp, #44
20604     A7 14 02 FB | 	rdlong	arg02, fp
20608     2C 4E 85 F1 | 	sub	fp, #44
2060c     A7 FA 01 FB | 	rdlong	result1, fp
20610     1C FA 05 F1 | 	add	result1, #28
20614     FD 22 02 FB | 	rdlong	local03, result1
20618     1C 4E 05 F1 | 	add	fp, #28
2061c     A7 18 02 FB | 	rdlong	arg04, fp
20620     20 4E 85 F1 | 	sub	fp, #32
20624     0C 23 82 F1 | 	sub	local03, arg04
20628     09 22 66 F0 | 	shl	local03, #9
2062c     11 15 02 F1 | 	add	arg02, local03
20630     09 16 C6 F9 | 	decod	arg03, #9
20634     28 45 BF FD | 	call	#__system____builtin_memmove
20638     04 4E 05 F1 | 	add	fp, #4
2063c     A7 18 02 FB | 	rdlong	arg04, fp
20640     0C FB 01 F6 | 	mov	result1, arg04
20644     04 4E 85 F1 | 	sub	fp, #4
20648     10 18 06 F1 | 	add	arg04, #16
2064c     0C 19 C2 FA | 	rdbyte	arg04, arg04
20650     7F 18 06 F5 | 	and	arg04, #127
20654     10 FA 05 F1 | 	add	result1, #16
20658     FD 18 42 FC | 	wrbyte	arg04, result1
2065c                 | LR__3605
2065c     28 4E 05 F1 | 	add	fp, #40
20660     A7 FA 01 FB | 	rdlong	result1, fp
20664     09 FA 65 F0 | 	shl	result1, #9
20668     04 4E 85 F1 | 	sub	fp, #4
2066c     A7 FA 61 FC | 	wrlong	result1, fp
20670     24 4E 85 F1 | 	sub	fp, #36
20674                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
20674                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
20674                 | ' 				}
20674                 | ' 
20674                 | ' 
20674                 | ' 				wcnt =  ((UINT) 512 )  * cc;
20674                 | ' 				continue;
20674     74 01 90 FD | 	jmp	#LR__3609
20678                 | LR__3606
20678     04 4E 05 F1 | 	add	fp, #4
2067c     A7 20 02 FB | 	rdlong	local02, fp
20680     1C 20 06 F1 | 	add	local02, #28
20684     10 FB 01 FB | 	rdlong	result1, local02
20688     1C 4E 05 F1 | 	add	fp, #28
2068c     A7 20 02 FB | 	rdlong	local02, fp
20690     20 4E 85 F1 | 	sub	fp, #32
20694     10 FB 09 F2 | 	cmp	result1, local02 wz
20698     90 00 90 AD |  if_e	jmp	#LR__3607
2069c     04 4E 05 F1 | 	add	fp, #4
206a0     A7 FA 01 FB | 	rdlong	result1, fp
206a4     FD 22 02 F6 | 	mov	local03, result1
206a8     04 4E 85 F1 | 	sub	fp, #4
206ac     14 22 06 F1 | 	add	local03, #20
206b0     11 23 02 FB | 	rdlong	local03, local03
206b4     0C FA 05 F1 | 	add	result1, #12
206b8     FD 24 02 FB | 	rdlong	local04, result1
206bc     12 27 02 F6 | 	mov	local05, local04
206c0     13 23 12 F2 | 	cmp	local03, local05 wc
206c4     64 00 90 3D |  if_ae	jmp	#LR__3607
206c8     18 4E 05 F1 | 	add	fp, #24
206cc     A7 18 02 FB | 	rdlong	arg04, fp
206d0     01 18 06 F1 | 	add	arg04, #1
206d4     0C 13 C2 FA | 	rdbyte	arg01, arg04
206d8     14 4E 85 F1 | 	sub	fp, #20
206dc     A7 28 02 FB | 	rdlong	local06, fp
206e0     28 28 06 F1 | 	add	local06, #40
206e4     14 2B 02 F6 | 	mov	local07, local06
206e8     1C 4E 05 F1 | 	add	fp, #28
206ec     A7 2C 02 FB | 	rdlong	local08, fp
206f0     20 4E 85 F1 | 	sub	fp, #32
206f4     01 2E 06 F6 | 	mov	local09, #1
206f8     15 15 02 F6 | 	mov	arg02, local07
206fc     16 17 02 F6 | 	mov	arg03, local08
20700     01 18 06 F6 | 	mov	arg04, #1
20704     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
20708     FD 30 0A F6 | 	mov	local10, result1 wz
2070c     1C 00 90 AD |  if_e	jmp	#LR__3607
20710     04 4E 05 F1 | 	add	fp, #4
20714     A7 30 02 FB | 	rdlong	local10, fp
20718     04 4E 85 F1 | 	sub	fp, #4
2071c     11 30 06 F1 | 	add	local10, #17
20720     18 03 48 FC | 	wrbyte	#1, local10
20724                 | ' 				fp->fptr < fp->obj.objsize &&
20724                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
20724                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
20724     01 FA 05 F6 | 	mov	result1, #1
20728     E0 01 90 FD | 	jmp	#LR__3613
2072c                 | LR__3607
2072c     04 4E 05 F1 | 	add	fp, #4
20730     A7 18 02 FB | 	rdlong	arg04, fp
20734     1C 4E 05 F1 | 	add	fp, #28
20738     A7 FA 01 FB | 	rdlong	result1, fp
2073c     20 4E 85 F1 | 	sub	fp, #32
20740     1C 18 06 F1 | 	add	arg04, #28
20744     0C FB 61 FC | 	wrlong	result1, arg04
20748                 | LR__3608
20748     04 4E 05 F1 | 	add	fp, #4
2074c     A7 FA 01 FB | 	rdlong	result1, fp
20750     14 FA 05 F1 | 	add	result1, #20
20754     FD FA 01 FB | 	rdlong	result1, result1
20758     FF FB 05 F5 | 	and	result1, #511
2075c     09 32 C6 F9 | 	decod	local11, #9
20760     FD 32 82 F1 | 	sub	local11, result1
20764     20 4E 05 F1 | 	add	fp, #32
20768     A7 32 62 FC | 	wrlong	local11, fp
2076c     18 4E 85 F1 | 	sub	fp, #24
20770     A7 FA 01 FB | 	rdlong	result1, fp
20774     0C 4E 85 F1 | 	sub	fp, #12
20778     FD 32 1A F2 | 	cmp	local11, result1 wcz
2077c     0C 4E 05 11 |  if_a	add	fp, #12
20780     A7 32 02 1B |  if_a	rdlong	local11, fp
20784     18 4E 05 11 |  if_a	add	fp, #24
20788     A7 32 62 1C |  if_a	wrlong	local11, fp
2078c     24 4E 85 11 |  if_a	sub	fp, #36
20790     04 4E 05 F1 | 	add	fp, #4
20794     A7 32 02 FB | 	rdlong	local11, fp
20798     19 13 02 F6 | 	mov	arg01, local11
2079c     28 12 06 F1 | 	add	arg01, #40
207a0     14 32 06 F1 | 	add	local11, #20
207a4     19 33 02 FB | 	rdlong	local11, local11
207a8     FF 33 06 F5 | 	and	local11, #511
207ac     19 13 02 F1 | 	add	arg01, local11
207b0     2C 4E 05 F1 | 	add	fp, #44
207b4     A7 14 02 FB | 	rdlong	arg02, fp
207b8     0C 4E 85 F1 | 	sub	fp, #12
207bc     A7 16 02 FB | 	rdlong	arg03, fp
207c0     24 4E 85 F1 | 	sub	fp, #36
207c4     98 43 BF FD | 	call	#__system____builtin_memmove
207c8     04 4E 05 F1 | 	add	fp, #4
207cc     A7 FA 01 FB | 	rdlong	result1, fp
207d0     FD 32 02 F6 | 	mov	local11, result1
207d4     04 4E 85 F1 | 	sub	fp, #4
207d8     10 FA 05 F1 | 	add	result1, #16
207dc     FD FA C1 FA | 	rdbyte	result1, result1
207e0     80 FA 45 F5 | 	or	result1, #128
207e4     10 32 06 F1 | 	add	local11, #16
207e8     19 FB 41 FC | 	wrbyte	result1, local11
207ec                 | LR__3609
207ec     0C 4E 05 F1 | 	add	fp, #12
207f0     A7 32 02 FB | 	rdlong	local11, fp
207f4     18 4E 05 F1 | 	add	fp, #24
207f8     A7 FA 01 FB | 	rdlong	result1, fp
207fc     FD 32 82 F1 | 	sub	local11, result1
20800     18 4E 85 F1 | 	sub	fp, #24
20804     A7 32 62 FC | 	wrlong	local11, fp
20808     04 4E 05 F1 | 	add	fp, #4
2080c     A7 34 02 FB | 	rdlong	local12, fp
20810     1A 33 02 FB | 	rdlong	local11, local12
20814     14 4E 05 F1 | 	add	fp, #20
20818     A7 36 02 FB | 	rdlong	local13, fp
2081c     1B 33 02 F1 | 	add	local11, local13
20820     1A 33 62 FC | 	wrlong	local11, local12
20824     0C 4E 05 F1 | 	add	fp, #12
20828     A7 32 02 FB | 	rdlong	local11, fp
2082c     0C 4E 85 F1 | 	sub	fp, #12
20830     A7 38 02 FB | 	rdlong	local14, fp
20834     1C 33 02 F1 | 	add	local11, local14
20838     0C 4E 05 F1 | 	add	fp, #12
2083c     A7 32 62 FC | 	wrlong	local11, fp
20840     2C 4E 85 F1 | 	sub	fp, #44
20844     A7 3A 02 FB | 	rdlong	local15, fp
20848     1D 33 02 F6 | 	mov	local11, local15
2084c     14 3A 06 F1 | 	add	local15, #20
20850     1D 3B 02 FB | 	rdlong	local15, local15
20854     20 4E 05 F1 | 	add	fp, #32
20858     A7 3C 02 FB | 	rdlong	local16, fp
2085c     1E 3B 02 F1 | 	add	local15, local16
20860     14 32 06 F1 | 	add	local11, #20
20864     19 3B 62 FC | 	wrlong	local15, local11
20868     20 4E 85 F1 | 	sub	fp, #32
2086c     A7 3E 02 FB | 	rdlong	local17, fp
20870     1F 33 02 F6 | 	mov	local11, local17
20874     1F 41 02 F6 | 	mov	local18, local17
20878     04 4E 85 F1 | 	sub	fp, #4
2087c     14 3E 06 F1 | 	add	local17, #20
20880     1F 43 02 FB | 	rdlong	local19, local17
20884     0C 40 06 F1 | 	add	local18, #12
20888     20 45 02 FB | 	rdlong	local20, local18
2088c     22 43 1A F2 | 	cmp	local19, local20 wcz
20890     24 00 90 ED |  if_be	jmp	#LR__3610
20894     04 4E 05 F1 | 	add	fp, #4
20898     A7 26 02 FB | 	rdlong	local05, fp
2089c     04 4E 85 F1 | 	sub	fp, #4
208a0     13 23 02 F6 | 	mov	local03, local05
208a4     14 22 06 F1 | 	add	local03, #20
208a8     11 25 02 FB | 	rdlong	local04, local03
208ac     14 22 86 F1 | 	sub	local03, #20
208b0     12 47 02 F6 | 	mov	local21, local04
208b4     20 00 90 FD | 	jmp	#LR__3611
208b8                 | LR__3610
208b8     04 4E 05 F1 | 	add	fp, #4
208bc     A7 2A 02 FB | 	rdlong	local07, fp
208c0     04 4E 85 F1 | 	sub	fp, #4
208c4     15 31 02 F6 | 	mov	local10, local07
208c8     0C 30 06 F1 | 	add	local10, #12
208cc     18 2D 02 FB | 	rdlong	local08, local10
208d0     0C 30 86 F1 | 	sub	local10, #12
208d4     16 47 02 F6 | 	mov	local21, local08
208d8                 | LR__3611
208d8     0C 32 06 F1 | 	add	local11, #12
208dc     19 47 62 FC | 	wrlong	local21, local11
208e0     5C F9 9F FD | 	jmp	#LR__3593
208e4                 | LR__3612
208e4     04 4E 05 F1 | 	add	fp, #4
208e8     A7 34 02 FB | 	rdlong	local12, fp
208ec     1A 1F 02 F6 | 	mov	local01, local12
208f0     04 4E 85 F1 | 	sub	fp, #4
208f4     10 34 06 F1 | 	add	local12, #16
208f8     1A 33 C2 FA | 	rdbyte	local11, local12
208fc     40 32 46 F5 | 	or	local11, #64
20900     10 1E 06 F1 | 	add	local01, #16
20904     0F 33 42 FC | 	wrbyte	local11, local01
20908                 | ' 
20908                 | ' 
20908                 | ' 
20908                 | ' 
20908                 | ' 
20908                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
20908                 | ' 		fp->flag |=  0x80 ;
20908                 | ' 
20908                 | ' 	}
20908                 | ' 
20908                 | ' 	fp->flag |=  0x40 ;
20908                 | ' 
20908                 | ' 	return FR_OK ;
20908     00 FA 05 F6 | 	mov	result1, #0
2090c                 | LR__3613
2090c     A7 F0 03 F6 | 	mov	ptra, fp
20910     B2 00 A0 FD | 	call	#popregs_
20914                 | _fatfs_cc_f_write_ret
20914     2D 00 64 FD | 	ret
20918                 | 
20918                 | _fatfs_cc_f_sync
20918     00 4A 05 F6 | 	mov	COUNT_, #0
2091c     A8 00 A0 FD | 	call	#pushregs_
20920     18 F0 07 F1 | 	add	ptra, #24
20924     04 4E 05 F1 | 	add	fp, #4
20928     A7 12 62 FC | 	wrlong	arg01, fp
2092c     08 4E 05 F1 | 	add	fp, #8
20930     A7 14 02 F6 | 	mov	arg02, fp
20934     0C 4E 85 F1 | 	sub	fp, #12
20938     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2093c     08 4E 05 F1 | 	add	fp, #8
20940     A7 FA 61 FC | 	wrlong	result1, fp
20944     08 4E 85 F1 | 	sub	fp, #8
20948     00 FA 0D F2 | 	cmp	result1, #0 wz
2094c     C0 01 90 5D |  if_ne	jmp	#LR__3623
20950     04 4E 05 F1 | 	add	fp, #4
20954     A7 18 02 FB | 	rdlong	arg04, fp
20958     04 4E 85 F1 | 	sub	fp, #4
2095c     10 18 06 F1 | 	add	arg04, #16
20960     0C 19 C2 FA | 	rdbyte	arg04, arg04
20964     40 18 CE F7 | 	test	arg04, #64 wz
20968     A4 01 90 AD |  if_e	jmp	#LR__3622
2096c     04 4E 05 F1 | 	add	fp, #4
20970     A7 18 02 FB | 	rdlong	arg04, fp
20974     04 4E 85 F1 | 	sub	fp, #4
20978     10 18 06 F1 | 	add	arg04, #16
2097c     0C 19 C2 FA | 	rdbyte	arg04, arg04
20980     80 18 CE F7 | 	test	arg04, #128 wz
20984     64 00 90 AD |  if_e	jmp	#LR__3620
20988     0C 4E 05 F1 | 	add	fp, #12
2098c     A7 18 02 FB | 	rdlong	arg04, fp
20990     01 18 06 F1 | 	add	arg04, #1
20994     0C 13 C2 FA | 	rdbyte	arg01, arg04
20998     08 4E 85 F1 | 	sub	fp, #8
2099c     A7 18 02 FB | 	rdlong	arg04, fp
209a0     0C 15 02 F6 | 	mov	arg02, arg04
209a4     28 14 06 F1 | 	add	arg02, #40
209a8     04 4E 85 F1 | 	sub	fp, #4
209ac     1C 18 06 F1 | 	add	arg04, #28
209b0     0C 17 02 FB | 	rdlong	arg03, arg04
209b4     01 18 06 F6 | 	mov	arg04, #1
209b8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
209bc     00 FA 0D F2 | 	cmp	result1, #0 wz
209c0     01 FA 05 56 |  if_ne	mov	result1, #1
209c4     54 01 90 5D |  if_ne	jmp	#LR__3624
209c8     04 4E 05 F1 | 	add	fp, #4
209cc     A7 18 02 FB | 	rdlong	arg04, fp
209d0     0C 17 02 F6 | 	mov	arg03, arg04
209d4     04 4E 85 F1 | 	sub	fp, #4
209d8     10 18 06 F1 | 	add	arg04, #16
209dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
209e0     7F 18 06 F5 | 	and	arg04, #127
209e4     10 16 06 F1 | 	add	arg03, #16
209e8     0B 19 42 FC | 	wrbyte	arg04, arg03
209ec                 | LR__3620
209ec     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
209f0     10 4E 05 F1 | 	add	fp, #16
209f4     A7 FA 61 FC | 	wrlong	result1, fp
209f8     04 4E 85 F1 | 	sub	fp, #4
209fc     A7 12 02 FB | 	rdlong	arg01, fp
20a00     08 4E 85 F1 | 	sub	fp, #8
20a04     A7 18 02 FB | 	rdlong	arg04, fp
20a08     04 4E 85 F1 | 	sub	fp, #4
20a0c     20 18 06 F1 | 	add	arg04, #32
20a10     0C 15 02 FB | 	rdlong	arg02, arg04
20a14     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
20a18     08 4E 05 F1 | 	add	fp, #8
20a1c     A7 FA 61 FC | 	wrlong	result1, fp
20a20     08 4E 85 F1 | 	sub	fp, #8
20a24     00 FA 0D F2 | 	cmp	result1, #0 wz
20a28     E4 00 90 5D |  if_ne	jmp	#LR__3621
20a2c     04 4E 05 F1 | 	add	fp, #4
20a30     A7 18 02 FB | 	rdlong	arg04, fp
20a34     24 18 06 F1 | 	add	arg04, #36
20a38     0C 19 02 FB | 	rdlong	arg04, arg04
20a3c     10 4E 05 F1 | 	add	fp, #16
20a40     A7 18 62 FC | 	wrlong	arg04, fp
20a44     0C 17 02 F6 | 	mov	arg03, arg04
20a48     0B 16 06 F1 | 	add	arg03, #11
20a4c     0B 17 C2 FA | 	rdbyte	arg03, arg03
20a50     20 16 46 F5 | 	or	arg03, #32
20a54     0B 18 06 F1 | 	add	arg04, #11
20a58     0C 17 42 FC | 	wrbyte	arg03, arg04
20a5c     10 4E 85 F1 | 	sub	fp, #16
20a60     A7 18 02 FB | 	rdlong	arg04, fp
20a64     0C 13 02 FB | 	rdlong	arg01, arg04
20a68     10 4E 05 F1 | 	add	fp, #16
20a6c     A7 14 02 FB | 	rdlong	arg02, fp
20a70     14 4E 85 F1 | 	sub	fp, #20
20a74     08 18 06 F1 | 	add	arg04, #8
20a78     0C 17 02 FB | 	rdlong	arg03, arg04
20a7c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
20a80     14 4E 05 F1 | 	add	fp, #20
20a84     A7 12 02 FB | 	rdlong	arg01, fp
20a88     1C 12 06 F1 | 	add	arg01, #28
20a8c     10 4E 85 F1 | 	sub	fp, #16
20a90     A7 18 02 FB | 	rdlong	arg04, fp
20a94     0C 18 06 F1 | 	add	arg04, #12
20a98     0C 15 02 FB | 	rdlong	arg02, arg04
20a9c     09 15 62 FC | 	wrlong	arg02, arg01
20aa0     10 4E 05 F1 | 	add	fp, #16
20aa4     A7 12 02 FB | 	rdlong	arg01, fp
20aa8     16 12 06 F1 | 	add	arg01, #22
20aac     04 4E 85 F1 | 	sub	fp, #4
20ab0     A7 14 02 FB | 	rdlong	arg02, fp
20ab4     09 15 62 FC | 	wrlong	arg02, arg01
20ab8     04 4E 05 F1 | 	add	fp, #4
20abc     A7 12 02 FB | 	rdlong	arg01, fp
20ac0     12 12 06 F1 | 	add	arg01, #18
20ac4     09 01 58 FC | 	wrword	#0, arg01
20ac8     08 4E 85 F1 | 	sub	fp, #8
20acc     A7 18 02 FB | 	rdlong	arg04, fp
20ad0     03 18 06 F1 | 	add	arg04, #3
20ad4     0C 03 48 FC | 	wrbyte	#1, arg04
20ad8     A7 12 02 FB | 	rdlong	arg01, fp
20adc     0C 4E 85 F1 | 	sub	fp, #12
20ae0     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
20ae4     08 4E 05 F1 | 	add	fp, #8
20ae8     A7 FA 61 FC | 	wrlong	result1, fp
20aec     04 4E 85 F1 | 	sub	fp, #4
20af0     A7 18 02 FB | 	rdlong	arg04, fp
20af4     0C 17 02 F6 | 	mov	arg03, arg04
20af8     04 4E 85 F1 | 	sub	fp, #4
20afc     10 18 06 F1 | 	add	arg04, #16
20b00     0C 19 C2 FA | 	rdbyte	arg04, arg04
20b04     BF 18 06 F5 | 	and	arg04, #191
20b08     10 16 06 F1 | 	add	arg03, #16
20b0c     0B 19 42 FC | 	wrbyte	arg04, arg03
20b10                 | LR__3621
20b10                 | LR__3622
20b10                 | LR__3623
20b10                 | ' 					dir = fp->dir_ptr;
20b10                 | ' 					dir[ 11 ] |=  0x20 ;
20b10                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
20b10                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
20b10                 | ' 					st_dword(dir +  22 , tm);
20b10                 | ' 					st_word(dir +  18 , 0);
20b10                 | ' 					fs->wflag = 1;
20b10                 | ' 					res = sync_fs(fs);
20b10                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
20b10                 | ' 				}
20b10                 | ' 			}
20b10                 | ' 		}
20b10                 | ' 	}
20b10                 | ' 
20b10                 | ' 	return res ;
20b10     08 4E 05 F1 | 	add	fp, #8
20b14     A7 FA 01 FB | 	rdlong	result1, fp
20b18     08 4E 85 F1 | 	sub	fp, #8
20b1c                 | LR__3624
20b1c     A7 F0 03 F6 | 	mov	ptra, fp
20b20     B2 00 A0 FD | 	call	#popregs_
20b24                 | _fatfs_cc_f_sync_ret
20b24     2D 00 64 FD | 	ret
20b28                 | 
20b28                 | _fatfs_cc_f_close
20b28     01 4A 05 F6 | 	mov	COUNT_, #1
20b2c     A8 00 A0 FD | 	call	#pushregs_
20b30     10 F0 07 F1 | 	add	ptra, #16
20b34     04 4E 05 F1 | 	add	fp, #4
20b38     A7 12 62 FC | 	wrlong	arg01, fp
20b3c     04 4E 85 F1 | 	sub	fp, #4
20b40     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
20b44     08 4E 05 F1 | 	add	fp, #8
20b48     A7 FA 61 FC | 	wrlong	result1, fp
20b4c     08 4E 85 F1 | 	sub	fp, #8
20b50     00 FA 0D F2 | 	cmp	result1, #0 wz
20b54     38 00 90 5D |  if_ne	jmp	#LR__3630
20b58     04 4E 05 F1 | 	add	fp, #4
20b5c     A7 12 02 FB | 	rdlong	arg01, fp
20b60     08 4E 05 F1 | 	add	fp, #8
20b64     A7 14 02 F6 | 	mov	arg02, fp
20b68     0C 4E 85 F1 | 	sub	fp, #12
20b6c     9C E6 BF FD | 	call	#_fatfs_cc_validate
20b70     08 4E 05 F1 | 	add	fp, #8
20b74     A7 FA 61 FC | 	wrlong	result1, fp
20b78     08 4E 85 F1 | 	sub	fp, #8
20b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
20b80     04 4E 05 A1 |  if_e	add	fp, #4
20b84     A7 1E 02 AB |  if_e	rdlong	local01, fp
20b88     04 4E 85 A1 |  if_e	sub	fp, #4
20b8c     0F 01 68 AC |  if_e	wrlong	#0, local01
20b90                 | LR__3630
20b90                 | ' 
20b90                 | ' 
20b90                 | ' 
20b90                 | ' 
20b90                 | ' 			fp->obj.fs = 0;
20b90                 | ' #line 4192 "ff.c"
20b90                 | ' 		}
20b90                 | ' 	}
20b90                 | ' 	return res;
20b90     08 4E 05 F1 | 	add	fp, #8
20b94     A7 FA 01 FB | 	rdlong	result1, fp
20b98     08 4E 85 F1 | 	sub	fp, #8
20b9c     A7 F0 03 F6 | 	mov	ptra, fp
20ba0     B2 00 A0 FD | 	call	#popregs_
20ba4                 | _fatfs_cc_f_close_ret
20ba4     2D 00 64 FD | 	ret
20ba8                 | 
20ba8                 | _fatfs_cc_f_lseek
20ba8     00 4A 05 F6 | 	mov	COUNT_, #0
20bac     A8 00 A0 FD | 	call	#pushregs_
20bb0     24 F0 07 F1 | 	add	ptra, #36
20bb4     04 4E 05 F1 | 	add	fp, #4
20bb8     A7 12 62 FC | 	wrlong	arg01, fp
20bbc     04 4E 05 F1 | 	add	fp, #4
20bc0     A7 14 62 FC | 	wrlong	arg02, fp
20bc4     04 4E 85 F1 | 	sub	fp, #4
20bc8     A7 12 02 FB | 	rdlong	arg01, fp
20bcc     0C 4E 05 F1 | 	add	fp, #12
20bd0     A7 14 02 F6 | 	mov	arg02, fp
20bd4     10 4E 85 F1 | 	sub	fp, #16
20bd8     30 E6 BF FD | 	call	#_fatfs_cc_validate
20bdc     0C 4E 05 F1 | 	add	fp, #12
20be0     A7 FA 61 FC | 	wrlong	result1, fp
20be4     0C 4E 85 F1 | 	sub	fp, #12
20be8     00 FA 0D F2 | 	cmp	result1, #0 wz
20bec     1C 00 90 5D |  if_ne	jmp	#LR__3640
20bf0     04 4E 05 F1 | 	add	fp, #4
20bf4     A7 18 02 FB | 	rdlong	arg04, fp
20bf8     11 18 06 F1 | 	add	arg04, #17
20bfc     0C 19 C2 FA | 	rdbyte	arg04, arg04
20c00     08 4E 05 F1 | 	add	fp, #8
20c04     A7 18 62 FC | 	wrlong	arg04, fp
20c08     0C 4E 85 F1 | 	sub	fp, #12
20c0c                 | LR__3640
20c0c     0C 4E 05 F1 | 	add	fp, #12
20c10     A7 18 0A FB | 	rdlong	arg04, fp wz
20c14     0C 4E 85 F1 | 	sub	fp, #12
20c18     0C 4E 05 51 |  if_ne	add	fp, #12
20c1c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20c20     0C 4E 85 51 |  if_ne	sub	fp, #12
20c24     40 06 90 5D |  if_ne	jmp	#LR__3663
20c28     04 4E 05 F1 | 	add	fp, #4
20c2c     A7 18 02 FB | 	rdlong	arg04, fp
20c30     04 4E 05 F1 | 	add	fp, #4
20c34     A7 16 02 FB | 	rdlong	arg03, fp
20c38     08 4E 85 F1 | 	sub	fp, #8
20c3c     0C 18 06 F1 | 	add	arg04, #12
20c40     0C 19 02 FB | 	rdlong	arg04, arg04
20c44     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
20c48     3C 00 90 ED |  if_be	jmp	#LR__3641
20c4c     04 4E 05 F1 | 	add	fp, #4
20c50     A7 16 02 FB | 	rdlong	arg03, fp
20c54     04 4E 85 F1 | 	sub	fp, #4
20c58     10 16 06 F1 | 	add	arg03, #16
20c5c     0B 17 C2 FA | 	rdbyte	arg03, arg03
20c60     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
20c64     02 16 CE F7 | 	test	arg03, #2 wz
20c68     1C 00 90 5D |  if_ne	jmp	#LR__3641
20c6c     04 4E 05 F1 | 	add	fp, #4
20c70     A7 16 02 FB | 	rdlong	arg03, fp
20c74     0C 16 06 F1 | 	add	arg03, #12
20c78     0B 17 02 FB | 	rdlong	arg03, arg03
20c7c     04 4E 05 F1 | 	add	fp, #4
20c80     A7 16 62 FC | 	wrlong	arg03, fp
20c84     08 4E 85 F1 | 	sub	fp, #8
20c88                 | LR__3641
20c88     04 4E 05 F1 | 	add	fp, #4
20c8c     A7 16 02 FB | 	rdlong	arg03, fp
20c90     14 16 06 F1 | 	add	arg03, #20
20c94     0B 17 02 FB | 	rdlong	arg03, arg03
20c98     1C 4E 05 F1 | 	add	fp, #28
20c9c     A7 16 62 FC | 	wrlong	arg03, fp
20ca0     1C 4E 85 F1 | 	sub	fp, #28
20ca4     A7 16 02 FB | 	rdlong	arg03, fp
20ca8     18 4E 05 F1 | 	add	fp, #24
20cac     A7 00 68 FC | 	wrlong	#0, fp
20cb0     14 16 06 F1 | 	add	arg03, #20
20cb4     0B 01 68 FC | 	wrlong	#0, arg03
20cb8     14 4E 85 F1 | 	sub	fp, #20
20cbc     A7 16 02 FB | 	rdlong	arg03, fp
20cc0     08 4E 85 F1 | 	sub	fp, #8
20cc4     01 16 16 F2 | 	cmp	arg03, #1 wc
20cc8     E4 03 90 CD |  if_b	jmp	#LR__3657
20ccc     10 4E 05 F1 | 	add	fp, #16
20cd0     A7 16 02 FB | 	rdlong	arg03, fp
20cd4     0A 16 06 F1 | 	add	arg03, #10
20cd8     0B 19 E2 FA | 	rdword	arg04, arg03
20cdc     09 18 66 F0 | 	shl	arg04, #9
20ce0     08 4E 05 F1 | 	add	fp, #8
20ce4     A7 18 62 FC | 	wrlong	arg04, fp
20ce8     08 4E 05 F1 | 	add	fp, #8
20cec     A7 18 02 FB | 	rdlong	arg04, fp
20cf0     20 4E 85 F1 | 	sub	fp, #32
20cf4     01 18 16 F2 | 	cmp	arg04, #1 wc
20cf8     AC 00 90 CD |  if_b	jmp	#LR__3642
20cfc     08 4E 05 F1 | 	add	fp, #8
20d00     A7 18 02 FB | 	rdlong	arg04, fp
20d04     01 18 86 F1 | 	sub	arg04, #1
20d08     10 4E 05 F1 | 	add	fp, #16
20d0c     A7 16 02 FB | 	rdlong	arg03, fp
20d10     0B 19 12 FD | 	qdiv	arg04, arg03
20d14     08 4E 05 F1 | 	add	fp, #8
20d18     A7 FA 01 FB | 	rdlong	result1, fp
20d1c     01 FA 85 F1 | 	sub	result1, #1
20d20     18 18 62 FD | 	getqx	arg04
20d24     0B FB 11 FD | 	qdiv	result1, arg03
20d28     20 4E 85 F1 | 	sub	fp, #32
20d2c     18 16 62 FD | 	getqx	arg03
20d30     0B 19 12 F2 | 	cmp	arg04, arg03 wc
20d34     70 00 90 CD |  if_b	jmp	#LR__3642
20d38     04 4E 05 F1 | 	add	fp, #4
20d3c     A7 16 02 FB | 	rdlong	arg03, fp
20d40     1C 4E 05 F1 | 	add	fp, #28
20d44     A7 FA 01 FB | 	rdlong	result1, fp
20d48     01 FA 85 F1 | 	sub	result1, #1
20d4c     08 4E 85 F1 | 	sub	fp, #8
20d50     A7 18 02 FB | 	rdlong	arg04, fp
20d54     01 18 86 F1 | 	sub	arg04, #1
20d58     0C FB 21 F5 | 	andn	result1, arg04
20d5c     14 16 06 F1 | 	add	arg03, #20
20d60     0B FB 61 FC | 	wrlong	result1, arg03
20d64     10 4E 85 F1 | 	sub	fp, #16
20d68     A7 16 02 FB | 	rdlong	arg03, fp
20d6c     04 4E 85 F1 | 	sub	fp, #4
20d70     A7 18 02 FB | 	rdlong	arg04, fp
20d74     14 18 06 F1 | 	add	arg04, #20
20d78     0C 19 02 FB | 	rdlong	arg04, arg04
20d7c     0C 17 82 F1 | 	sub	arg03, arg04
20d80     04 4E 05 F1 | 	add	fp, #4
20d84     A7 16 62 FC | 	wrlong	arg03, fp
20d88     04 4E 85 F1 | 	sub	fp, #4
20d8c     A7 16 02 FB | 	rdlong	arg03, fp
20d90     18 16 06 F1 | 	add	arg03, #24
20d94     0B 17 02 FB | 	rdlong	arg03, arg03
20d98     10 4E 05 F1 | 	add	fp, #16
20d9c     A7 16 62 FC | 	wrlong	arg03, fp
20da0     14 4E 85 F1 | 	sub	fp, #20
20da4     D0 00 90 FD | 	jmp	#LR__3646
20da8                 | LR__3642
20da8     04 4E 05 F1 | 	add	fp, #4
20dac     A7 16 02 FB | 	rdlong	arg03, fp
20db0     08 16 06 F1 | 	add	arg03, #8
20db4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
20db8     10 4E 05 F1 | 	add	fp, #16
20dbc     A7 16 62 FC | 	wrlong	arg03, fp
20dc0     14 4E 85 F1 | 	sub	fp, #20
20dc4     94 00 90 5D |  if_ne	jmp	#LR__3645
20dc8     04 4E 05 F1 | 	add	fp, #4
20dcc     A7 12 02 FB | 	rdlong	arg01, fp
20dd0     04 4E 85 F1 | 	sub	fp, #4
20dd4     00 14 06 F6 | 	mov	arg02, #0
20dd8     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
20ddc     14 4E 05 F1 | 	add	fp, #20
20de0     A7 FA 61 FC | 	wrlong	result1, fp
20de4     14 4E 85 F1 | 	sub	fp, #20
20de8     01 FA 0D F2 | 	cmp	result1, #1 wz
20dec     1C 00 90 5D |  if_ne	jmp	#LR__3643
20df0     04 4E 05 F1 | 	add	fp, #4
20df4     A7 16 02 FB | 	rdlong	arg03, fp
20df8     04 4E 85 F1 | 	sub	fp, #4
20dfc     11 16 06 F1 | 	add	arg03, #17
20e00     0B 05 48 FC | 	wrbyte	#2, arg03
20e04     02 FA 05 F6 | 	mov	result1, #2
20e08     5C 04 90 FD | 	jmp	#LR__3663
20e0c                 | LR__3643
20e0c     14 4E 05 F1 | 	add	fp, #20
20e10     A7 FA 01 FB | 	rdlong	result1, fp
20e14     14 4E 85 F1 | 	sub	fp, #20
20e18     FF FF 7F FF 
20e1c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20e20     1C 00 90 5D |  if_ne	jmp	#LR__3644
20e24     04 4E 05 F1 | 	add	fp, #4
20e28     A7 16 02 FB | 	rdlong	arg03, fp
20e2c     04 4E 85 F1 | 	sub	fp, #4
20e30     11 16 06 F1 | 	add	arg03, #17
20e34     0B 03 48 FC | 	wrbyte	#1, arg03
20e38     01 FA 05 F6 | 	mov	result1, #1
20e3c     28 04 90 FD | 	jmp	#LR__3663
20e40                 | LR__3644
20e40     04 4E 05 F1 | 	add	fp, #4
20e44     A7 16 02 FB | 	rdlong	arg03, fp
20e48     10 4E 05 F1 | 	add	fp, #16
20e4c     A7 18 02 FB | 	rdlong	arg04, fp
20e50     14 4E 85 F1 | 	sub	fp, #20
20e54     08 16 06 F1 | 	add	arg03, #8
20e58     0B 19 62 FC | 	wrlong	arg04, arg03
20e5c                 | LR__3645
20e5c     04 4E 05 F1 | 	add	fp, #4
20e60     A7 16 02 FB | 	rdlong	arg03, fp
20e64     10 4E 05 F1 | 	add	fp, #16
20e68     A7 18 02 FB | 	rdlong	arg04, fp
20e6c     14 4E 85 F1 | 	sub	fp, #20
20e70     18 16 06 F1 | 	add	arg03, #24
20e74     0B 19 62 FC | 	wrlong	arg04, arg03
20e78                 | LR__3646
20e78     14 4E 05 F1 | 	add	fp, #20
20e7c     A7 16 0A FB | 	rdlong	arg03, fp wz
20e80     14 4E 85 F1 | 	sub	fp, #20
20e84     28 02 90 AD |  if_e	jmp	#LR__3656
20e88                 | ' 				while (ofs > bcs) {
20e88                 | LR__3647
20e88     08 4E 05 F1 | 	add	fp, #8
20e8c     A7 18 02 FB | 	rdlong	arg04, fp
20e90     10 4E 05 F1 | 	add	fp, #16
20e94     A7 16 02 FB | 	rdlong	arg03, fp
20e98     18 4E 85 F1 | 	sub	fp, #24
20e9c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
20ea0     68 01 90 ED |  if_be	jmp	#LR__3653
20ea4     08 4E 05 F1 | 	add	fp, #8
20ea8     A7 18 02 FB | 	rdlong	arg04, fp
20eac     10 4E 05 F1 | 	add	fp, #16
20eb0     A7 16 02 FB | 	rdlong	arg03, fp
20eb4     0B 19 82 F1 | 	sub	arg04, arg03
20eb8     10 4E 85 F1 | 	sub	fp, #16
20ebc     A7 18 62 FC | 	wrlong	arg04, fp
20ec0     04 4E 85 F1 | 	sub	fp, #4
20ec4     A7 18 02 FB | 	rdlong	arg04, fp
20ec8     0C FB 01 F6 | 	mov	result1, arg04
20ecc     14 18 06 F1 | 	add	arg04, #20
20ed0     0C 19 02 FB | 	rdlong	arg04, arg04
20ed4     14 4E 05 F1 | 	add	fp, #20
20ed8     A7 16 02 FB | 	rdlong	arg03, fp
20edc     0B 19 02 F1 | 	add	arg04, arg03
20ee0     14 FA 05 F1 | 	add	result1, #20
20ee4     FD 18 62 FC | 	wrlong	arg04, result1
20ee8     14 4E 85 F1 | 	sub	fp, #20
20eec     A7 16 02 FB | 	rdlong	arg03, fp
20ef0     04 4E 85 F1 | 	sub	fp, #4
20ef4     10 16 06 F1 | 	add	arg03, #16
20ef8     0B 17 C2 FA | 	rdbyte	arg03, arg03
20efc     02 16 CE F7 | 	test	arg03, #2 wz
20f00     3C 00 90 AD |  if_e	jmp	#LR__3648
20f04     04 4E 05 F1 | 	add	fp, #4
20f08     A7 12 02 FB | 	rdlong	arg01, fp
20f0c     10 4E 05 F1 | 	add	fp, #16
20f10     A7 14 02 FB | 	rdlong	arg02, fp
20f14     14 4E 85 F1 | 	sub	fp, #20
20f18     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
20f1c     14 4E 05 F1 | 	add	fp, #20
20f20     A7 FA 61 FC | 	wrlong	result1, fp
20f24     00 FA 4D F2 | 	cmps	result1, #0 wz
20f28     14 4E 85 F1 | 	sub	fp, #20
20f2c     08 4E 05 A1 |  if_e	add	fp, #8
20f30     A7 00 68 AC |  if_e	wrlong	#0, fp
20f34     08 4E 85 A1 |  if_e	sub	fp, #8
20f38                 | ' 							ofs = 0; break;
20f38     D0 00 90 AD |  if_e	jmp	#LR__3653
20f3c     24 00 90 FD | 	jmp	#LR__3649
20f40                 | LR__3648
20f40     04 4E 05 F1 | 	add	fp, #4
20f44     A7 12 02 FB | 	rdlong	arg01, fp
20f48     10 4E 05 F1 | 	add	fp, #16
20f4c     A7 14 02 FB | 	rdlong	arg02, fp
20f50     14 4E 85 F1 | 	sub	fp, #20
20f54     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
20f58     14 4E 05 F1 | 	add	fp, #20
20f5c     A7 FA 61 FC | 	wrlong	result1, fp
20f60     14 4E 85 F1 | 	sub	fp, #20
20f64                 | LR__3649
20f64     14 4E 05 F1 | 	add	fp, #20
20f68     A7 16 02 FB | 	rdlong	arg03, fp
20f6c     14 4E 85 F1 | 	sub	fp, #20
20f70     FF FF 7F FF 
20f74     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
20f78     1C 00 90 5D |  if_ne	jmp	#LR__3650
20f7c     04 4E 05 F1 | 	add	fp, #4
20f80     A7 16 02 FB | 	rdlong	arg03, fp
20f84     04 4E 85 F1 | 	sub	fp, #4
20f88     11 16 06 F1 | 	add	arg03, #17
20f8c     0B 03 48 FC | 	wrbyte	#1, arg03
20f90     01 FA 05 F6 | 	mov	result1, #1
20f94     D0 02 90 FD | 	jmp	#LR__3663
20f98                 | LR__3650
20f98     14 4E 05 F1 | 	add	fp, #20
20f9c     A7 16 02 FB | 	rdlong	arg03, fp
20fa0     14 4E 85 F1 | 	sub	fp, #20
20fa4     02 16 16 F2 | 	cmp	arg03, #2 wc
20fa8     24 00 90 CD |  if_b	jmp	#LR__3651
20fac     10 4E 05 F1 | 	add	fp, #16
20fb0     A7 18 02 FB | 	rdlong	arg04, fp
20fb4     04 4E 05 F1 | 	add	fp, #4
20fb8     A7 16 02 FB | 	rdlong	arg03, fp
20fbc     14 4E 85 F1 | 	sub	fp, #20
20fc0     18 18 06 F1 | 	add	arg04, #24
20fc4     0C 19 02 FB | 	rdlong	arg04, arg04
20fc8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
20fcc     1C 00 90 CD |  if_b	jmp	#LR__3652
20fd0                 | LR__3651
20fd0     04 4E 05 F1 | 	add	fp, #4
20fd4     A7 16 02 FB | 	rdlong	arg03, fp
20fd8     04 4E 85 F1 | 	sub	fp, #4
20fdc     11 16 06 F1 | 	add	arg03, #17
20fe0     0B 05 48 FC | 	wrbyte	#2, arg03
20fe4     02 FA 05 F6 | 	mov	result1, #2
20fe8     7C 02 90 FD | 	jmp	#LR__3663
20fec                 | LR__3652
20fec     04 4E 05 F1 | 	add	fp, #4
20ff0     A7 18 02 FB | 	rdlong	arg04, fp
20ff4     10 4E 05 F1 | 	add	fp, #16
20ff8     A7 16 02 FB | 	rdlong	arg03, fp
20ffc     14 4E 85 F1 | 	sub	fp, #20
21000     18 18 06 F1 | 	add	arg04, #24
21004     0C 17 62 FC | 	wrlong	arg03, arg04
21008     7C FE 9F FD | 	jmp	#LR__3647
2100c                 | LR__3653
2100c     04 4E 05 F1 | 	add	fp, #4
21010     A7 16 02 FB | 	rdlong	arg03, fp
21014     0B 13 02 F6 | 	mov	arg01, arg03
21018     14 16 06 F1 | 	add	arg03, #20
2101c     0B 15 02 FB | 	rdlong	arg02, arg03
21020     04 4E 05 F1 | 	add	fp, #4
21024     A7 16 02 FB | 	rdlong	arg03, fp
21028     0B 15 02 F1 | 	add	arg02, arg03
2102c     14 12 06 F1 | 	add	arg01, #20
21030     09 15 62 FC | 	wrlong	arg02, arg01
21034     A7 16 02 FB | 	rdlong	arg03, fp
21038     08 4E 85 F1 | 	sub	fp, #8
2103c     FF 17 CE F7 | 	test	arg03, #511 wz
21040     6C 00 90 AD |  if_e	jmp	#LR__3655
21044     10 4E 05 F1 | 	add	fp, #16
21048     A7 12 02 FB | 	rdlong	arg01, fp
2104c     04 4E 05 F1 | 	add	fp, #4
21050     A7 14 02 FB | 	rdlong	arg02, fp
21054     14 4E 85 F1 | 	sub	fp, #20
21058     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2105c     1C 4E 05 F1 | 	add	fp, #28
21060     A7 FA 61 FC | 	wrlong	result1, fp
21064     1C 4E 85 F1 | 	sub	fp, #28
21068     00 FA 0D F2 | 	cmp	result1, #0 wz
2106c     1C 00 90 5D |  if_ne	jmp	#LR__3654
21070     04 4E 05 F1 | 	add	fp, #4
21074     A7 16 02 FB | 	rdlong	arg03, fp
21078     04 4E 85 F1 | 	sub	fp, #4
2107c     11 16 06 F1 | 	add	arg03, #17
21080     0B 05 48 FC | 	wrbyte	#2, arg03
21084     02 FA 05 F6 | 	mov	result1, #2
21088     DC 01 90 FD | 	jmp	#LR__3663
2108c                 | LR__3654
2108c     1C 4E 05 F1 | 	add	fp, #28
21090     A7 18 02 FB | 	rdlong	arg04, fp
21094     14 4E 85 F1 | 	sub	fp, #20
21098     A7 16 02 FB | 	rdlong	arg03, fp
2109c     09 16 46 F0 | 	shr	arg03, #9
210a0     0B 19 02 F1 | 	add	arg04, arg03
210a4     14 4E 05 F1 | 	add	fp, #20
210a8     A7 18 62 FC | 	wrlong	arg04, fp
210ac     1C 4E 85 F1 | 	sub	fp, #28
210b0                 | LR__3655
210b0                 | LR__3656
210b0                 | LR__3657
210b0     04 4E 05 F1 | 	add	fp, #4
210b4     A7 18 02 FB | 	rdlong	arg04, fp
210b8     0C 17 02 F6 | 	mov	arg03, arg04
210bc     04 4E 85 F1 | 	sub	fp, #4
210c0     14 16 06 F1 | 	add	arg03, #20
210c4     0B 17 02 FB | 	rdlong	arg03, arg03
210c8     0C 18 06 F1 | 	add	arg04, #12
210cc     0C 19 02 FB | 	rdlong	arg04, arg04
210d0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
210d4     3C 00 90 ED |  if_be	jmp	#LR__3658
210d8     04 4E 05 F1 | 	add	fp, #4
210dc     A7 18 02 FB | 	rdlong	arg04, fp
210e0     0C 17 02 F6 | 	mov	arg03, arg04
210e4     14 18 06 F1 | 	add	arg04, #20
210e8     0C 19 02 FB | 	rdlong	arg04, arg04
210ec     0C 16 06 F1 | 	add	arg03, #12
210f0     0B 19 62 FC | 	wrlong	arg04, arg03
210f4     A7 18 02 FB | 	rdlong	arg04, fp
210f8     0C 17 02 F6 | 	mov	arg03, arg04
210fc     04 4E 85 F1 | 	sub	fp, #4
21100     10 18 06 F1 | 	add	arg04, #16
21104     0C 19 C2 FA | 	rdbyte	arg04, arg04
21108     40 18 46 F5 | 	or	arg04, #64
2110c     10 16 06 F1 | 	add	arg03, #16
21110     0B 19 42 FC | 	wrbyte	arg04, arg03
21114                 | LR__3658
21114     04 4E 05 F1 | 	add	fp, #4
21118     A7 16 02 FB | 	rdlong	arg03, fp
2111c     04 4E 85 F1 | 	sub	fp, #4
21120     14 16 06 F1 | 	add	arg03, #20
21124     0B 17 02 FB | 	rdlong	arg03, arg03
21128     FF 17 CE F7 | 	test	arg03, #511 wz
2112c     2C 01 90 AD |  if_e	jmp	#LR__3662
21130     04 4E 05 F1 | 	add	fp, #4
21134     A7 18 02 FB | 	rdlong	arg04, fp
21138     18 4E 05 F1 | 	add	fp, #24
2113c     A7 16 02 FB | 	rdlong	arg03, fp
21140     1C 4E 85 F1 | 	sub	fp, #28
21144     1C 18 06 F1 | 	add	arg04, #28
21148     0C 19 02 FB | 	rdlong	arg04, arg04
2114c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
21150     08 01 90 AD |  if_e	jmp	#LR__3662
21154     04 4E 05 F1 | 	add	fp, #4
21158     A7 16 02 FB | 	rdlong	arg03, fp
2115c     04 4E 85 F1 | 	sub	fp, #4
21160     10 16 06 F1 | 	add	arg03, #16
21164     0B 17 C2 FA | 	rdbyte	arg03, arg03
21168     80 16 CE F7 | 	test	arg03, #128 wz
2116c     7C 00 90 AD |  if_e	jmp	#LR__3660
21170     10 4E 05 F1 | 	add	fp, #16
21174     A7 16 02 FB | 	rdlong	arg03, fp
21178     01 16 06 F1 | 	add	arg03, #1
2117c     0B 13 C2 FA | 	rdbyte	arg01, arg03
21180     0C 4E 85 F1 | 	sub	fp, #12
21184     A7 16 02 FB | 	rdlong	arg03, fp
21188     0B 15 02 F6 | 	mov	arg02, arg03
2118c     28 14 06 F1 | 	add	arg02, #40
21190     04 4E 85 F1 | 	sub	fp, #4
21194     1C 16 06 F1 | 	add	arg03, #28
21198     0B 17 02 FB | 	rdlong	arg03, arg03
2119c     01 18 06 F6 | 	mov	arg04, #1
211a0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
211a4     00 FA 0D F2 | 	cmp	result1, #0 wz
211a8     1C 00 90 AD |  if_e	jmp	#LR__3659
211ac     04 4E 05 F1 | 	add	fp, #4
211b0     A7 16 02 FB | 	rdlong	arg03, fp
211b4     04 4E 85 F1 | 	sub	fp, #4
211b8     11 16 06 F1 | 	add	arg03, #17
211bc     0B 03 48 FC | 	wrbyte	#1, arg03
211c0     01 FA 05 F6 | 	mov	result1, #1
211c4     A0 00 90 FD | 	jmp	#LR__3663
211c8                 | LR__3659
211c8     04 4E 05 F1 | 	add	fp, #4
211cc     A7 18 02 FB | 	rdlong	arg04, fp
211d0     0C 17 02 F6 | 	mov	arg03, arg04
211d4     04 4E 85 F1 | 	sub	fp, #4
211d8     10 18 06 F1 | 	add	arg04, #16
211dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
211e0     7F 18 06 F5 | 	and	arg04, #127
211e4     10 16 06 F1 | 	add	arg03, #16
211e8     0B 19 42 FC | 	wrbyte	arg04, arg03
211ec                 | LR__3660
211ec     10 4E 05 F1 | 	add	fp, #16
211f0     A7 16 02 FB | 	rdlong	arg03, fp
211f4     01 16 06 F1 | 	add	arg03, #1
211f8     0B 13 C2 FA | 	rdbyte	arg01, arg03
211fc     0C 4E 85 F1 | 	sub	fp, #12
21200     A7 14 02 FB | 	rdlong	arg02, fp
21204     28 14 06 F1 | 	add	arg02, #40
21208     18 4E 05 F1 | 	add	fp, #24
2120c     A7 16 02 FB | 	rdlong	arg03, fp
21210     1C 4E 85 F1 | 	sub	fp, #28
21214     01 18 06 F6 | 	mov	arg04, #1
21218     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2121c     00 FA 0D F2 | 	cmp	result1, #0 wz
21220     1C 00 90 AD |  if_e	jmp	#LR__3661
21224     04 4E 05 F1 | 	add	fp, #4
21228     A7 16 02 FB | 	rdlong	arg03, fp
2122c     04 4E 85 F1 | 	sub	fp, #4
21230     11 16 06 F1 | 	add	arg03, #17
21234     0B 03 48 FC | 	wrbyte	#1, arg03
21238     01 FA 05 F6 | 	mov	result1, #1
2123c     28 00 90 FD | 	jmp	#LR__3663
21240                 | LR__3661
21240     04 4E 05 F1 | 	add	fp, #4
21244     A7 18 02 FB | 	rdlong	arg04, fp
21248     18 4E 05 F1 | 	add	fp, #24
2124c     A7 16 02 FB | 	rdlong	arg03, fp
21250     1C 4E 85 F1 | 	sub	fp, #28
21254     1C 18 06 F1 | 	add	arg04, #28
21258     0C 17 62 FC | 	wrlong	arg03, arg04
2125c                 | LR__3662
2125c                 | ' 
2125c                 | ' 			fp->sect = nsect;
2125c                 | ' 		}
2125c                 | ' 	}
2125c                 | ' 
2125c                 | ' 	return res ;
2125c     0C 4E 05 F1 | 	add	fp, #12
21260     A7 FA 01 FB | 	rdlong	result1, fp
21264     0C 4E 85 F1 | 	sub	fp, #12
21268                 | LR__3663
21268     A7 F0 03 F6 | 	mov	ptra, fp
2126c     B2 00 A0 FD | 	call	#popregs_
21270                 | _fatfs_cc_f_lseek_ret
21270     2D 00 64 FD | 	ret
21274                 | 
21274                 | _fatfs_cc_f_opendir
21274     01 4A 05 F6 | 	mov	COUNT_, #1
21278     A8 00 A0 FD | 	call	#pushregs_
2127c     14 F0 07 F1 | 	add	ptra, #20
21280     04 4E 05 F1 | 	add	fp, #4
21284     A7 12 62 FC | 	wrlong	arg01, fp
21288     04 4E 05 F1 | 	add	fp, #4
2128c     A7 14 62 FC | 	wrlong	arg02, fp
21290     04 4E 85 F1 | 	sub	fp, #4
21294     A7 16 0A FB | 	rdlong	arg03, fp wz
21298     04 4E 85 F1 | 	sub	fp, #4
2129c     09 FA 05 A6 |  if_e	mov	result1, #9
212a0     78 01 90 AD |  if_e	jmp	#LR__3676
212a4     08 4E 05 F1 | 	add	fp, #8
212a8     A7 12 02 F6 | 	mov	arg01, fp
212ac     08 4E 05 F1 | 	add	fp, #8
212b0     A7 14 02 F6 | 	mov	arg02, fp
212b4     10 4E 85 F1 | 	sub	fp, #16
212b8     00 16 06 F6 | 	mov	arg03, #0
212bc     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
212c0     0C 4E 05 F1 | 	add	fp, #12
212c4     A7 FA 61 FC | 	wrlong	result1, fp
212c8     0C 4E 85 F1 | 	sub	fp, #12
212cc     00 FA 0D F2 | 	cmp	result1, #0 wz
212d0     20 01 90 5D |  if_ne	jmp	#LR__3675
212d4     04 4E 05 F1 | 	add	fp, #4
212d8     A7 16 02 FB | 	rdlong	arg03, fp
212dc     0C 4E 05 F1 | 	add	fp, #12
212e0     A7 FA 01 FB | 	rdlong	result1, fp
212e4     0B FB 61 FC | 	wrlong	result1, arg03
212e8     0C 4E 85 F1 | 	sub	fp, #12
212ec     A7 12 02 FB | 	rdlong	arg01, fp
212f0     04 4E 05 F1 | 	add	fp, #4
212f4     A7 14 02 FB | 	rdlong	arg02, fp
212f8     08 4E 85 F1 | 	sub	fp, #8
212fc     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
21300     0C 4E 05 F1 | 	add	fp, #12
21304     A7 FA 61 FC | 	wrlong	result1, fp
21308     0C 4E 85 F1 | 	sub	fp, #12
2130c     00 FA 0D F2 | 	cmp	result1, #0 wz
21310     C4 00 90 5D |  if_ne	jmp	#LR__3674
21314     04 4E 05 F1 | 	add	fp, #4
21318     A7 16 02 FB | 	rdlong	arg03, fp
2131c     04 4E 85 F1 | 	sub	fp, #4
21320     2B 16 06 F1 | 	add	arg03, #43
21324     0B 17 C2 FA | 	rdbyte	arg03, arg03
21328     80 16 CE F7 | 	test	arg03, #128 wz
2132c     58 00 90 5D |  if_ne	jmp	#LR__3672
21330     04 4E 05 F1 | 	add	fp, #4
21334     A7 16 02 FB | 	rdlong	arg03, fp
21338     04 4E 85 F1 | 	sub	fp, #4
2133c     06 16 06 F1 | 	add	arg03, #6
21340     0B 17 C2 FA | 	rdbyte	arg03, arg03
21344     10 16 CE F7 | 	test	arg03, #16 wz
21348     30 00 90 AD |  if_e	jmp	#LR__3670
2134c     04 4E 05 F1 | 	add	fp, #4
21350     A7 16 02 FB | 	rdlong	arg03, fp
21354     0B 1F 02 F6 | 	mov	local01, arg03
21358     0C 4E 05 F1 | 	add	fp, #12
2135c     A7 12 02 FB | 	rdlong	arg01, fp
21360     10 4E 85 F1 | 	sub	fp, #16
21364     1C 16 06 F1 | 	add	arg03, #28
21368     0B 15 02 FB | 	rdlong	arg02, arg03
2136c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
21370     08 1E 06 F1 | 	add	local01, #8
21374     0F FB 61 FC | 	wrlong	result1, local01
21378     0C 00 90 FD | 	jmp	#LR__3671
2137c                 | LR__3670
2137c     0C 4E 05 F1 | 	add	fp, #12
21380     A7 0A 68 FC | 	wrlong	#5, fp
21384     0C 4E 85 F1 | 	sub	fp, #12
21388                 | LR__3671
21388                 | LR__3672
21388     0C 4E 05 F1 | 	add	fp, #12
2138c     A7 1E 0A FB | 	rdlong	local01, fp wz
21390     0C 4E 85 F1 | 	sub	fp, #12
21394     40 00 90 5D |  if_ne	jmp	#LR__3673
21398     04 4E 05 F1 | 	add	fp, #4
2139c     A7 1E 02 FB | 	rdlong	local01, fp
213a0     0C 4E 05 F1 | 	add	fp, #12
213a4     A7 16 02 FB | 	rdlong	arg03, fp
213a8     06 16 06 F1 | 	add	arg03, #6
213ac     0B 17 E2 FA | 	rdword	arg03, arg03
213b0     04 1E 06 F1 | 	add	local01, #4
213b4     0F 17 52 FC | 	wrword	arg03, local01
213b8     0C 4E 85 F1 | 	sub	fp, #12
213bc     A7 12 02 FB | 	rdlong	arg01, fp
213c0     04 4E 85 F1 | 	sub	fp, #4
213c4     00 14 06 F6 | 	mov	arg02, #0
213c8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
213cc     0C 4E 05 F1 | 	add	fp, #12
213d0     A7 FA 61 FC | 	wrlong	result1, fp
213d4     0C 4E 85 F1 | 	sub	fp, #12
213d8                 | LR__3673
213d8                 | LR__3674
213d8     0C 4E 05 F1 | 	add	fp, #12
213dc     A7 1E 02 FB | 	rdlong	local01, fp
213e0     0C 4E 85 F1 | 	sub	fp, #12
213e4     04 1E 0E F2 | 	cmp	local01, #4 wz
213e8     0C 4E 05 A1 |  if_e	add	fp, #12
213ec     A7 0A 68 AC |  if_e	wrlong	#5, fp
213f0     0C 4E 85 A1 |  if_e	sub	fp, #12
213f4                 | LR__3675
213f4     0C 4E 05 F1 | 	add	fp, #12
213f8     A7 1E 0A FB | 	rdlong	local01, fp wz
213fc     0C 4E 85 F1 | 	sub	fp, #12
21400     04 4E 05 51 |  if_ne	add	fp, #4
21404     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21408     04 4E 85 51 |  if_ne	sub	fp, #4
2140c     0F 01 68 5C |  if_ne	wrlong	#0, local01
21410                 | ' 
21410                 | ' 	return res ;
21410     0C 4E 05 F1 | 	add	fp, #12
21414     A7 FA 01 FB | 	rdlong	result1, fp
21418     0C 4E 85 F1 | 	sub	fp, #12
2141c                 | LR__3676
2141c     A7 F0 03 F6 | 	mov	ptra, fp
21420     B2 00 A0 FD | 	call	#popregs_
21424                 | _fatfs_cc_f_opendir_ret
21424     2D 00 64 FD | 	ret
21428                 | 
21428                 | _fatfs_cc_f_closedir
21428     00 4A 05 F6 | 	mov	COUNT_, #0
2142c     A8 00 A0 FD | 	call	#pushregs_
21430     10 F0 07 F1 | 	add	ptra, #16
21434     04 4E 05 F1 | 	add	fp, #4
21438     A7 12 62 FC | 	wrlong	arg01, fp
2143c     08 4E 05 F1 | 	add	fp, #8
21440     A7 14 02 F6 | 	mov	arg02, fp
21444     0C 4E 85 F1 | 	sub	fp, #12
21448     C0 DD BF FD | 	call	#_fatfs_cc_validate
2144c     08 4E 05 F1 | 	add	fp, #8
21450     A7 FA 61 FC | 	wrlong	result1, fp
21454     08 4E 85 F1 | 	sub	fp, #8
21458     00 FA 0D F2 | 	cmp	result1, #0 wz
2145c     04 4E 05 A1 |  if_e	add	fp, #4
21460     A7 FA 01 AB |  if_e	rdlong	result1, fp
21464     04 4E 85 A1 |  if_e	sub	fp, #4
21468     FD 00 68 AC |  if_e	wrlong	#0, result1
2146c                 | ' 
2146c                 | ' 
2146c                 | ' 
2146c                 | ' 
2146c                 | ' 		dp->obj.fs = 0;
2146c                 | ' #line 4633 "ff.c"
2146c                 | ' 	}
2146c                 | ' 	return res;
2146c     08 4E 05 F1 | 	add	fp, #8
21470     A7 FA 01 FB | 	rdlong	result1, fp
21474     08 4E 85 F1 | 	sub	fp, #8
21478     A7 F0 03 F6 | 	mov	ptra, fp
2147c     B2 00 A0 FD | 	call	#popregs_
21480                 | _fatfs_cc_f_closedir_ret
21480     2D 00 64 FD | 	ret
21484                 | 
21484                 | _fatfs_cc_f_readdir
21484     00 4A 05 F6 | 	mov	COUNT_, #0
21488     A8 00 A0 FD | 	call	#pushregs_
2148c     14 F0 07 F1 | 	add	ptra, #20
21490     04 4E 05 F1 | 	add	fp, #4
21494     A7 12 62 FC | 	wrlong	arg01, fp
21498     04 4E 05 F1 | 	add	fp, #4
2149c     A7 14 62 FC | 	wrlong	arg02, fp
214a0     04 4E 85 F1 | 	sub	fp, #4
214a4     A7 12 02 FB | 	rdlong	arg01, fp
214a8     0C 4E 05 F1 | 	add	fp, #12
214ac     A7 14 02 F6 | 	mov	arg02, fp
214b0     10 4E 85 F1 | 	sub	fp, #16
214b4     54 DD BF FD | 	call	#_fatfs_cc_validate
214b8     0C 4E 05 F1 | 	add	fp, #12
214bc     A7 FA 61 FC | 	wrlong	result1, fp
214c0     0C 4E 85 F1 | 	sub	fp, #12
214c4     00 FA 0D F2 | 	cmp	result1, #0 wz
214c8     BC 00 90 5D |  if_ne	jmp	#LR__3683
214cc     08 4E 05 F1 | 	add	fp, #8
214d0     A7 FA 09 FB | 	rdlong	result1, fp wz
214d4     08 4E 85 F1 | 	sub	fp, #8
214d8     24 00 90 5D |  if_ne	jmp	#LR__3680
214dc     04 4E 05 F1 | 	add	fp, #4
214e0     A7 12 02 FB | 	rdlong	arg01, fp
214e4     04 4E 85 F1 | 	sub	fp, #4
214e8     00 14 06 F6 | 	mov	arg02, #0
214ec     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
214f0     0C 4E 05 F1 | 	add	fp, #12
214f4     A7 FA 61 FC | 	wrlong	result1, fp
214f8     0C 4E 85 F1 | 	sub	fp, #12
214fc     88 00 90 FD | 	jmp	#LR__3682
21500                 | LR__3680
21500     04 4E 05 F1 | 	add	fp, #4
21504     A7 12 02 FB | 	rdlong	arg01, fp
21508     04 4E 85 F1 | 	sub	fp, #4
2150c     00 14 06 F6 | 	mov	arg02, #0
21510     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
21514     0C 4E 05 F1 | 	add	fp, #12
21518     A7 FA 61 FC | 	wrlong	result1, fp
2151c     0C 4E 85 F1 | 	sub	fp, #12
21520     04 FA 0D F2 | 	cmp	result1, #4 wz
21524     0C 4E 05 A1 |  if_e	add	fp, #12
21528     A7 00 68 AC |  if_e	wrlong	#0, fp
2152c     0C 4E 85 A1 |  if_e	sub	fp, #12
21530     0C 4E 05 F1 | 	add	fp, #12
21534     A7 FA 09 FB | 	rdlong	result1, fp wz
21538     0C 4E 85 F1 | 	sub	fp, #12
2153c     48 00 90 5D |  if_ne	jmp	#LR__3681
21540     04 4E 05 F1 | 	add	fp, #4
21544     A7 12 02 FB | 	rdlong	arg01, fp
21548     04 4E 05 F1 | 	add	fp, #4
2154c     A7 14 02 FB | 	rdlong	arg02, fp
21550     08 4E 85 F1 | 	sub	fp, #8
21554     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
21558     04 4E 05 F1 | 	add	fp, #4
2155c     A7 12 02 FB | 	rdlong	arg01, fp
21560     04 4E 85 F1 | 	sub	fp, #4
21564     00 14 06 F6 | 	mov	arg02, #0
21568     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2156c     0C 4E 05 F1 | 	add	fp, #12
21570     A7 FA 61 FC | 	wrlong	result1, fp
21574     0C 4E 85 F1 | 	sub	fp, #12
21578     04 FA 0D F2 | 	cmp	result1, #4 wz
2157c     0C 4E 05 A1 |  if_e	add	fp, #12
21580     A7 00 68 AC |  if_e	wrlong	#0, fp
21584     0C 4E 85 A1 |  if_e	sub	fp, #12
21588                 | LR__3681
21588                 | LR__3682
21588                 | LR__3683
21588                 | ' 			}
21588                 | ' 			;
21588                 | ' 		}
21588                 | ' 	}
21588                 | ' 	return res ;
21588     0C 4E 05 F1 | 	add	fp, #12
2158c     A7 FA 01 FB | 	rdlong	result1, fp
21590     0C 4E 85 F1 | 	sub	fp, #12
21594     A7 F0 03 F6 | 	mov	ptra, fp
21598     B2 00 A0 FD | 	call	#popregs_
2159c                 | _fatfs_cc_f_readdir_ret
2159c     2D 00 64 FD | 	ret
215a0                 | 
215a0                 | _fatfs_cc_f_stat
215a0     00 4A 05 F6 | 	mov	COUNT_, #0
215a4     A8 00 A0 FD | 	call	#pushregs_
215a8     40 F0 07 F1 | 	add	ptra, #64
215ac     04 4E 05 F1 | 	add	fp, #4
215b0     A7 12 62 FC | 	wrlong	arg01, fp
215b4     04 4E 05 F1 | 	add	fp, #4
215b8     A7 14 62 FC | 	wrlong	arg02, fp
215bc     04 4E 85 F1 | 	sub	fp, #4
215c0     A7 12 02 F6 | 	mov	arg01, fp
215c4     0C 4E 05 F1 | 	add	fp, #12
215c8     A7 14 02 F6 | 	mov	arg02, fp
215cc     10 4E 85 F1 | 	sub	fp, #16
215d0     00 16 06 F6 | 	mov	arg03, #0
215d4     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
215d8     0C 4E 05 F1 | 	add	fp, #12
215dc     A7 FA 61 FC | 	wrlong	result1, fp
215e0     0C 4E 85 F1 | 	sub	fp, #12
215e4     00 FA 0D F2 | 	cmp	result1, #0 wz
215e8     74 00 90 5D |  if_ne	jmp	#LR__3693
215ec     10 4E 05 F1 | 	add	fp, #16
215f0     A7 12 02 F6 | 	mov	arg01, fp
215f4     0C 4E 85 F1 | 	sub	fp, #12
215f8     A7 14 02 FB | 	rdlong	arg02, fp
215fc     04 4E 85 F1 | 	sub	fp, #4
21600     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
21604     0C 4E 05 F1 | 	add	fp, #12
21608     A7 FA 61 FC | 	wrlong	result1, fp
2160c     0C 4E 85 F1 | 	sub	fp, #12
21610     00 FA 0D F2 | 	cmp	result1, #0 wz
21614     48 00 90 5D |  if_ne	jmp	#LR__3692
21618     3B 4E 05 F1 | 	add	fp, #59
2161c     A7 FA C1 FA | 	rdbyte	result1, fp
21620     3B 4E 85 F1 | 	sub	fp, #59
21624     80 FA CD F7 | 	test	result1, #128 wz
21628     0C 4E 05 51 |  if_ne	add	fp, #12
2162c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21630     0C 4E 85 51 |  if_ne	sub	fp, #12
21634     28 00 90 5D |  if_ne	jmp	#LR__3691
21638     08 4E 05 F1 | 	add	fp, #8
2163c     A7 FA 09 FB | 	rdlong	result1, fp wz
21640     08 4E 85 F1 | 	sub	fp, #8
21644     18 00 90 AD |  if_e	jmp	#LR__3690
21648     10 4E 05 F1 | 	add	fp, #16
2164c     A7 12 02 F6 | 	mov	arg01, fp
21650     08 4E 85 F1 | 	sub	fp, #8
21654     A7 14 02 FB | 	rdlong	arg02, fp
21658     08 4E 85 F1 | 	sub	fp, #8
2165c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
21660                 | LR__3690
21660                 | LR__3691
21660                 | LR__3692
21660                 | LR__3693
21660                 | ' 			}
21660                 | ' 		}
21660                 | ' 		;
21660                 | ' 	}
21660                 | ' 
21660                 | ' 	return res ;
21660     0C 4E 05 F1 | 	add	fp, #12
21664     A7 FA 01 FB | 	rdlong	result1, fp
21668     0C 4E 85 F1 | 	sub	fp, #12
2166c     A7 F0 03 F6 | 	mov	ptra, fp
21670     B2 00 A0 FD | 	call	#popregs_
21674                 | _fatfs_cc_f_stat_ret
21674     2D 00 64 FD | 	ret
21678                 | 
21678                 | _fatfs_cc_f_unlink
21678     00 4A 05 F6 | 	mov	COUNT_, #0
2167c     A8 00 A0 FD | 	call	#pushregs_
21680     74 F0 07 F1 | 	add	ptra, #116
21684     04 4E 05 F1 | 	add	fp, #4
21688     A7 12 62 FC | 	wrlong	arg01, fp
2168c     68 4E 05 F1 | 	add	fp, #104
21690     A7 00 68 FC | 	wrlong	#0, fp
21694     68 4E 85 F1 | 	sub	fp, #104
21698     A7 12 02 F6 | 	mov	arg01, fp
2169c     6C 4E 05 F1 | 	add	fp, #108
216a0     A7 14 02 F6 | 	mov	arg02, fp
216a4     70 4E 85 F1 | 	sub	fp, #112
216a8     02 16 06 F6 | 	mov	arg03, #2
216ac     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
216b0     08 4E 05 F1 | 	add	fp, #8
216b4     A7 FA 61 FC | 	wrlong	result1, fp
216b8     08 4E 85 F1 | 	sub	fp, #8
216bc     00 FA 0D F2 | 	cmp	result1, #0 wz
216c0     E4 01 90 5D |  if_ne	jmp	#LR__3708
216c4     70 4E 05 F1 | 	add	fp, #112
216c8     A7 16 02 FB | 	rdlong	arg03, fp
216cc     64 4E 85 F1 | 	sub	fp, #100
216d0     A7 16 62 FC | 	wrlong	arg03, fp
216d4     A7 12 02 F6 | 	mov	arg01, fp
216d8     08 4E 85 F1 | 	sub	fp, #8
216dc     A7 14 02 FB | 	rdlong	arg02, fp
216e0     04 4E 85 F1 | 	sub	fp, #4
216e4     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
216e8     08 4E 05 F1 | 	add	fp, #8
216ec     A7 FA 61 FC | 	wrlong	result1, fp
216f0     00 FA 4D F2 | 	cmps	result1, #0 wz
216f4     08 4E 85 F1 | 	sub	fp, #8
216f8     AC 01 90 5D |  if_ne	jmp	#LR__3707
216fc     37 4E 05 F1 | 	add	fp, #55
21700     A7 FA C1 FA | 	rdbyte	result1, fp
21704     37 4E 85 F1 | 	sub	fp, #55
21708     80 FA CD F7 | 	test	result1, #128 wz
2170c     08 4E 05 51 |  if_ne	add	fp, #8
21710     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21714     08 4E 85 51 |  if_ne	sub	fp, #8
21718     1C 00 90 5D |  if_ne	jmp	#LR__3700
2171c     12 4E 05 F1 | 	add	fp, #18
21720     A7 FA C1 FA | 	rdbyte	result1, fp
21724     12 4E 85 F1 | 	sub	fp, #18
21728     01 FA CD F7 | 	test	result1, #1 wz
2172c     08 4E 05 51 |  if_ne	add	fp, #8
21730     A7 0E 68 5C |  if_ne	wrlong	#7, fp
21734     08 4E 85 51 |  if_ne	sub	fp, #8
21738                 | LR__3700
21738     08 4E 05 F1 | 	add	fp, #8
2173c     A7 FA 09 FB | 	rdlong	result1, fp wz
21740     08 4E 85 F1 | 	sub	fp, #8
21744     C8 00 90 5D |  if_ne	jmp	#LR__3703
21748     70 4E 05 F1 | 	add	fp, #112
2174c     A7 12 02 FB | 	rdlong	arg01, fp
21750     48 4E 85 F1 | 	sub	fp, #72
21754     A7 14 02 FB | 	rdlong	arg02, fp
21758     28 4E 85 F1 | 	sub	fp, #40
2175c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
21760     6C 4E 05 F1 | 	add	fp, #108
21764     A7 FA 61 FC | 	wrlong	result1, fp
21768     5A 4E 85 F1 | 	sub	fp, #90
2176c     A7 FA C1 FA | 	rdbyte	result1, fp
21770     12 4E 85 F1 | 	sub	fp, #18
21774     10 FA CD F7 | 	test	result1, #16 wz
21778     94 00 90 AD |  if_e	jmp	#LR__3702
2177c     70 4E 05 F1 | 	add	fp, #112
21780     A7 FA 01 FB | 	rdlong	result1, fp
21784     34 4E 85 F1 | 	sub	fp, #52
21788     A7 FA 61 FC | 	wrlong	result1, fp
2178c     30 4E 05 F1 | 	add	fp, #48
21790     A7 16 02 FB | 	rdlong	arg03, fp
21794     28 4E 85 F1 | 	sub	fp, #40
21798     A7 16 62 FC | 	wrlong	arg03, fp
2179c     08 4E 85 F1 | 	sub	fp, #8
217a0     A7 12 02 F6 | 	mov	arg01, fp
217a4     3C 4E 85 F1 | 	sub	fp, #60
217a8     00 14 06 F6 | 	mov	arg02, #0
217ac     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
217b0     08 4E 05 F1 | 	add	fp, #8
217b4     A7 FA 61 FC | 	wrlong	result1, fp
217b8     08 4E 85 F1 | 	sub	fp, #8
217bc     00 FA 0D F2 | 	cmp	result1, #0 wz
217c0     4C 00 90 5D |  if_ne	jmp	#LR__3701
217c4     3C 4E 05 F1 | 	add	fp, #60
217c8     A7 12 02 F6 | 	mov	arg01, fp
217cc     3C 4E 85 F1 | 	sub	fp, #60
217d0     00 14 06 F6 | 	mov	arg02, #0
217d4     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
217d8     08 4E 05 F1 | 	add	fp, #8
217dc     A7 FA 61 FC | 	wrlong	result1, fp
217e0     00 FA 4D F2 | 	cmps	result1, #0 wz
217e4     08 4E 85 F1 | 	sub	fp, #8
217e8     08 4E 05 A1 |  if_e	add	fp, #8
217ec     A7 0E 68 AC |  if_e	wrlong	#7, fp
217f0     08 4E 85 A1 |  if_e	sub	fp, #8
217f4     08 4E 05 F1 | 	add	fp, #8
217f8     A7 FA 01 FB | 	rdlong	result1, fp
217fc     08 4E 85 F1 | 	sub	fp, #8
21800     04 FA 0D F2 | 	cmp	result1, #4 wz
21804     08 4E 05 A1 |  if_e	add	fp, #8
21808     A7 00 68 AC |  if_e	wrlong	#0, fp
2180c     08 4E 85 A1 |  if_e	sub	fp, #8
21810                 | LR__3701
21810                 | LR__3702
21810                 | LR__3703
21810     08 4E 05 F1 | 	add	fp, #8
21814     A7 FA 09 FB | 	rdlong	result1, fp wz
21818     08 4E 85 F1 | 	sub	fp, #8
2181c     88 00 90 5D |  if_ne	jmp	#LR__3706
21820     0C 4E 05 F1 | 	add	fp, #12
21824     A7 12 02 F6 | 	mov	arg01, fp
21828     0C 4E 85 F1 | 	sub	fp, #12
2182c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
21830     08 4E 05 F1 | 	add	fp, #8
21834     A7 FA 61 FC | 	wrlong	result1, fp
21838     08 4E 85 F1 | 	sub	fp, #8
2183c     00 FA 0D F2 | 	cmp	result1, #0 wz
21840     38 00 90 5D |  if_ne	jmp	#LR__3704
21844     6C 4E 05 F1 | 	add	fp, #108
21848     A7 FA 09 FB | 	rdlong	result1, fp wz
2184c     6C 4E 85 F1 | 	sub	fp, #108
21850     28 00 90 AD |  if_e	jmp	#LR__3704
21854     0C 4E 05 F1 | 	add	fp, #12
21858     A7 12 02 F6 | 	mov	arg01, fp
2185c     60 4E 05 F1 | 	add	fp, #96
21860     A7 14 02 FB | 	rdlong	arg02, fp
21864     6C 4E 85 F1 | 	sub	fp, #108
21868     00 16 06 F6 | 	mov	arg03, #0
2186c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
21870     08 4E 05 F1 | 	add	fp, #8
21874     A7 FA 61 FC | 	wrlong	result1, fp
21878     08 4E 85 F1 | 	sub	fp, #8
2187c                 | LR__3704
2187c     08 4E 05 F1 | 	add	fp, #8
21880     A7 FA 09 FB | 	rdlong	result1, fp wz
21884     08 4E 85 F1 | 	sub	fp, #8
21888     1C 00 90 5D |  if_ne	jmp	#LR__3705
2188c     70 4E 05 F1 | 	add	fp, #112
21890     A7 12 02 FB | 	rdlong	arg01, fp
21894     70 4E 85 F1 | 	sub	fp, #112
21898     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2189c     08 4E 05 F1 | 	add	fp, #8
218a0     A7 FA 61 FC | 	wrlong	result1, fp
218a4     08 4E 85 F1 | 	sub	fp, #8
218a8                 | LR__3705
218a8                 | LR__3706
218a8                 | LR__3707
218a8                 | LR__3708
218a8                 | ' 			}
218a8                 | ' 		}
218a8                 | ' 		;
218a8                 | ' 	}
218a8                 | ' 
218a8                 | ' 	return res ;
218a8     08 4E 05 F1 | 	add	fp, #8
218ac     A7 FA 01 FB | 	rdlong	result1, fp
218b0     08 4E 85 F1 | 	sub	fp, #8
218b4     A7 F0 03 F6 | 	mov	ptra, fp
218b8     B2 00 A0 FD | 	call	#popregs_
218bc                 | _fatfs_cc_f_unlink_ret
218bc     2D 00 64 FD | 	ret
218c0                 | 
218c0                 | _fatfs_cc_f_mkdir
218c0     00 4A 05 F6 | 	mov	COUNT_, #0
218c4     A8 00 A0 FD | 	call	#pushregs_
218c8     5C F0 07 F1 | 	add	ptra, #92
218cc     04 4E 05 F1 | 	add	fp, #4
218d0     A7 12 62 FC | 	wrlong	arg01, fp
218d4     A7 12 02 F6 | 	mov	arg01, fp
218d8     48 4E 05 F1 | 	add	fp, #72
218dc     A7 14 02 F6 | 	mov	arg02, fp
218e0     4C 4E 85 F1 | 	sub	fp, #76
218e4     02 16 06 F6 | 	mov	arg03, #2
218e8     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
218ec     08 4E 05 F1 | 	add	fp, #8
218f0     A7 FA 61 FC | 	wrlong	result1, fp
218f4     08 4E 85 F1 | 	sub	fp, #8
218f8     00 FA 0D F2 | 	cmp	result1, #0 wz
218fc     C4 02 90 5D |  if_ne	jmp	#LR__3715
21900     4C 4E 05 F1 | 	add	fp, #76
21904     A7 16 02 FB | 	rdlong	arg03, fp
21908     40 4E 85 F1 | 	sub	fp, #64
2190c     A7 16 62 FC | 	wrlong	arg03, fp
21910     A7 12 02 F6 | 	mov	arg01, fp
21914     08 4E 85 F1 | 	sub	fp, #8
21918     A7 14 02 FB | 	rdlong	arg02, fp
2191c     04 4E 85 F1 | 	sub	fp, #4
21920     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
21924     08 4E 05 F1 | 	add	fp, #8
21928     A7 FA 61 FC | 	wrlong	result1, fp
2192c     00 FA 4D F2 | 	cmps	result1, #0 wz
21930     08 4E 85 F1 | 	sub	fp, #8
21934     08 4E 05 A1 |  if_e	add	fp, #8
21938     A7 10 68 AC |  if_e	wrlong	#8, fp
2193c     08 4E 85 A1 |  if_e	sub	fp, #8
21940     08 4E 05 F1 | 	add	fp, #8
21944     A7 FA 01 FB | 	rdlong	result1, fp
21948     08 4E 85 F1 | 	sub	fp, #8
2194c     04 FA 0D F2 | 	cmp	result1, #4 wz
21950     70 02 90 5D |  if_ne	jmp	#LR__3714
21954     4C 4E 05 F1 | 	add	fp, #76
21958     A7 16 02 FB | 	rdlong	arg03, fp
2195c     10 4E 85 F1 | 	sub	fp, #16
21960     A7 16 62 FC | 	wrlong	arg03, fp
21964     A7 12 02 F6 | 	mov	arg01, fp
21968     3C 4E 85 F1 | 	sub	fp, #60
2196c     00 14 06 F6 | 	mov	arg02, #0
21970     04 AC BF FD | 	call	#_fatfs_cc_create_chain
21974     50 4E 05 F1 | 	add	fp, #80
21978     A7 FA 61 FC | 	wrlong	result1, fp
2197c     48 4E 85 F1 | 	sub	fp, #72
21980     A7 00 68 FC | 	wrlong	#0, fp
21984     48 4E 05 F1 | 	add	fp, #72
21988     A7 FA 09 FB | 	rdlong	result1, fp wz
2198c     50 4E 85 F1 | 	sub	fp, #80
21990     08 4E 05 A1 |  if_e	add	fp, #8
21994     A7 0E 68 AC |  if_e	wrlong	#7, fp
21998     08 4E 85 A1 |  if_e	sub	fp, #8
2199c     50 4E 05 F1 | 	add	fp, #80
219a0     A7 FA 01 FB | 	rdlong	result1, fp
219a4     50 4E 85 F1 | 	sub	fp, #80
219a8     01 FA 0D F2 | 	cmp	result1, #1 wz
219ac     08 4E 05 A1 |  if_e	add	fp, #8
219b0     A7 04 68 AC |  if_e	wrlong	#2, fp
219b4     08 4E 85 A1 |  if_e	sub	fp, #8
219b8     50 4E 05 F1 | 	add	fp, #80
219bc     A7 16 02 FB | 	rdlong	arg03, fp
219c0     50 4E 85 F1 | 	sub	fp, #80
219c4     FF FF 7F FF 
219c8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
219cc     08 4E 05 A1 |  if_e	add	fp, #8
219d0     A7 02 68 AC |  if_e	wrlong	#1, fp
219d4     08 4E 85 A1 |  if_e	sub	fp, #8
219d8     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
219dc     58 4E 05 F1 | 	add	fp, #88
219e0     A7 FA 61 FC | 	wrlong	result1, fp
219e4     50 4E 85 F1 | 	sub	fp, #80
219e8     A7 FA 09 FB | 	rdlong	result1, fp wz
219ec     08 4E 85 F1 | 	sub	fp, #8
219f0     1C 01 90 5D |  if_ne	jmp	#LR__3711
219f4     4C 4E 05 F1 | 	add	fp, #76
219f8     A7 12 02 FB | 	rdlong	arg01, fp
219fc     04 4E 05 F1 | 	add	fp, #4
21a00     A7 14 02 FB | 	rdlong	arg02, fp
21a04     50 4E 85 F1 | 	sub	fp, #80
21a08     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
21a0c     08 4E 05 F1 | 	add	fp, #8
21a10     A7 FA 61 FC | 	wrlong	result1, fp
21a14     00 FA 4D F2 | 	cmps	result1, #0 wz
21a18     08 4E 85 F1 | 	sub	fp, #8
21a1c     F0 00 90 5D |  if_ne	jmp	#LR__3710
21a20     4C 4E 05 F1 | 	add	fp, #76
21a24     A7 12 02 FB | 	rdlong	arg01, fp
21a28     4C 4E 85 F1 | 	sub	fp, #76
21a2c     34 12 06 F1 | 	add	arg01, #52
21a30     20 14 06 F6 | 	mov	arg02, #32
21a34     0B 16 06 F6 | 	mov	arg03, #11
21a38     98 00 A0 FD | 	call	#\builtin_bytefill_
21a3c     4C 4E 05 F1 | 	add	fp, #76
21a40     A7 FA 01 FB | 	rdlong	result1, fp
21a44     34 FA 05 F1 | 	add	result1, #52
21a48     FD 5C 48 FC | 	wrbyte	#46, result1
21a4c     A7 16 02 FB | 	rdlong	arg03, fp
21a50     3F 16 06 F1 | 	add	arg03, #63
21a54     0B 21 48 FC | 	wrbyte	#16, arg03
21a58     A7 12 02 FB | 	rdlong	arg01, fp
21a5c     4A 12 06 F1 | 	add	arg01, #74
21a60     0C 4E 05 F1 | 	add	fp, #12
21a64     A7 14 02 FB | 	rdlong	arg02, fp
21a68     09 15 62 FC | 	wrlong	arg02, arg01
21a6c     0C 4E 85 F1 | 	sub	fp, #12
21a70     A7 14 02 FB | 	rdlong	arg02, fp
21a74     0A 13 02 F6 | 	mov	arg01, arg02
21a78     34 14 06 F1 | 	add	arg02, #52
21a7c     04 4E 05 F1 | 	add	fp, #4
21a80     A7 16 02 FB | 	rdlong	arg03, fp
21a84     50 4E 85 F1 | 	sub	fp, #80
21a88     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
21a8c     4C 4E 05 F1 | 	add	fp, #76
21a90     A7 14 02 FB | 	rdlong	arg02, fp
21a94     0A 13 02 F6 | 	mov	arg01, arg02
21a98     54 12 06 F1 | 	add	arg01, #84
21a9c     4C 4E 85 F1 | 	sub	fp, #76
21aa0     34 14 06 F1 | 	add	arg02, #52
21aa4     20 16 06 F6 | 	mov	arg03, #32
21aa8     B4 30 BF FD | 	call	#__system____builtin_memmove
21aac     4C 4E 05 F1 | 	add	fp, #76
21ab0     A7 16 02 FB | 	rdlong	arg03, fp
21ab4     55 16 06 F1 | 	add	arg03, #85
21ab8     0B 5D 48 FC | 	wrbyte	#46, arg03
21abc     38 4E 85 F1 | 	sub	fp, #56
21ac0     A7 16 02 FB | 	rdlong	arg03, fp
21ac4     40 4E 05 F1 | 	add	fp, #64
21ac8     A7 16 62 FC | 	wrlong	arg03, fp
21acc     08 4E 85 F1 | 	sub	fp, #8
21ad0     A7 14 02 FB | 	rdlong	arg02, fp
21ad4     0A 13 02 F6 | 	mov	arg01, arg02
21ad8     54 14 06 F1 | 	add	arg02, #84
21adc     4C 4E 85 F1 | 	sub	fp, #76
21ae0     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
21ae4     4C 4E 05 F1 | 	add	fp, #76
21ae8     A7 16 02 FB | 	rdlong	arg03, fp
21aec     03 16 06 F1 | 	add	arg03, #3
21af0     0B 03 48 FC | 	wrbyte	#1, arg03
21af4     40 4E 85 F1 | 	sub	fp, #64
21af8     A7 12 02 F6 | 	mov	arg01, fp
21afc     0C 4E 85 F1 | 	sub	fp, #12
21b00     44 BA BF FD | 	call	#_fatfs_cc_dir_register
21b04     08 4E 05 F1 | 	add	fp, #8
21b08     A7 FA 61 FC | 	wrlong	result1, fp
21b0c     08 4E 85 F1 | 	sub	fp, #8
21b10                 | LR__3710
21b10                 | LR__3711
21b10     08 4E 05 F1 | 	add	fp, #8
21b14     A7 FA 09 FB | 	rdlong	result1, fp wz
21b18     08 4E 85 F1 | 	sub	fp, #8
21b1c     88 00 90 5D |  if_ne	jmp	#LR__3712
21b20     28 4E 05 F1 | 	add	fp, #40
21b24     A7 12 02 FB | 	rdlong	arg01, fp
21b28     16 12 06 F1 | 	add	arg01, #22
21b2c     30 4E 05 F1 | 	add	fp, #48
21b30     A7 14 02 FB | 	rdlong	arg02, fp
21b34     09 15 62 FC | 	wrlong	arg02, arg01
21b38     0C 4E 85 F1 | 	sub	fp, #12
21b3c     A7 12 02 FB | 	rdlong	arg01, fp
21b40     24 4E 85 F1 | 	sub	fp, #36
21b44     A7 14 02 FB | 	rdlong	arg02, fp
21b48     28 4E 05 F1 | 	add	fp, #40
21b4c     A7 16 02 FB | 	rdlong	arg03, fp
21b50     50 4E 85 F1 | 	sub	fp, #80
21b54     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
21b58     28 4E 05 F1 | 	add	fp, #40
21b5c     A7 FA 01 FB | 	rdlong	result1, fp
21b60     0B FA 05 F1 | 	add	result1, #11
21b64     FD 20 48 FC | 	wrbyte	#16, result1
21b68     24 4E 05 F1 | 	add	fp, #36
21b6c     A7 FA 01 FB | 	rdlong	result1, fp
21b70     03 FA 05 F1 | 	add	result1, #3
21b74     FD 02 48 FC | 	wrbyte	#1, result1
21b78     44 4E 85 F1 | 	sub	fp, #68
21b7c     A7 FA 09 FB | 	rdlong	result1, fp wz
21b80     08 4E 85 F1 | 	sub	fp, #8
21b84     3C 00 90 5D |  if_ne	jmp	#LR__3713
21b88     4C 4E 05 F1 | 	add	fp, #76
21b8c     A7 12 02 FB | 	rdlong	arg01, fp
21b90     4C 4E 85 F1 | 	sub	fp, #76
21b94     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
21b98     08 4E 05 F1 | 	add	fp, #8
21b9c     A7 FA 61 FC | 	wrlong	result1, fp
21ba0     08 4E 85 F1 | 	sub	fp, #8
21ba4     1C 00 90 FD | 	jmp	#LR__3713
21ba8                 | LR__3712
21ba8     3C 4E 05 F1 | 	add	fp, #60
21bac     A7 12 02 F6 | 	mov	arg01, fp
21bb0     14 4E 05 F1 | 	add	fp, #20
21bb4     A7 14 02 FB | 	rdlong	arg02, fp
21bb8     50 4E 85 F1 | 	sub	fp, #80
21bbc     00 16 06 F6 | 	mov	arg03, #0
21bc0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
21bc4                 | LR__3713
21bc4                 | LR__3714
21bc4                 | LR__3715
21bc4                 | ' 				remove_chain(&sobj, dcl, 0);
21bc4                 | ' 			}
21bc4                 | ' 		}
21bc4                 | ' 		;
21bc4                 | ' 	}
21bc4                 | ' 
21bc4                 | ' 	return res ;
21bc4     08 4E 05 F1 | 	add	fp, #8
21bc8     A7 FA 01 FB | 	rdlong	result1, fp
21bcc     08 4E 85 F1 | 	sub	fp, #8
21bd0     A7 F0 03 F6 | 	mov	ptra, fp
21bd4     B2 00 A0 FD | 	call	#popregs_
21bd8                 | _fatfs_cc_f_mkdir_ret
21bd8     2D 00 64 FD | 	ret
21bdc                 | 
21bdc                 | _fatfs_cc_f_rename
21bdc     01 4A 05 F6 | 	mov	COUNT_, #1
21be0     A8 00 A0 FD | 	call	#pushregs_
21be4     9C F0 07 F1 | 	add	ptra, #156
21be8     04 4E 05 F1 | 	add	fp, #4
21bec     A7 12 62 FC | 	wrlong	arg01, fp
21bf0     04 4E 05 F1 | 	add	fp, #4
21bf4     A7 14 62 FC | 	wrlong	arg02, fp
21bf8     A7 12 02 F6 | 	mov	arg01, fp
21bfc     08 4E 85 F1 | 	sub	fp, #8
21c00     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
21c04     04 4E 05 F1 | 	add	fp, #4
21c08     A7 12 02 F6 | 	mov	arg01, fp
21c0c     6C 4E 05 F1 | 	add	fp, #108
21c10     A7 14 02 F6 | 	mov	arg02, fp
21c14     70 4E 85 F1 | 	sub	fp, #112
21c18     02 16 06 F6 | 	mov	arg03, #2
21c1c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
21c20     0C 4E 05 F1 | 	add	fp, #12
21c24     A7 FA 61 FC | 	wrlong	result1, fp
21c28     0C 4E 85 F1 | 	sub	fp, #12
21c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
21c30     44 03 90 5D |  if_ne	jmp	#LR__3733
21c34     70 4E 05 F1 | 	add	fp, #112
21c38     A7 16 02 FB | 	rdlong	arg03, fp
21c3c     60 4E 85 F1 | 	sub	fp, #96
21c40     A7 16 62 FC | 	wrlong	arg03, fp
21c44     A7 12 02 F6 | 	mov	arg01, fp
21c48     0C 4E 85 F1 | 	sub	fp, #12
21c4c     A7 14 02 FB | 	rdlong	arg02, fp
21c50     04 4E 85 F1 | 	sub	fp, #4
21c54     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
21c58     0C 4E 05 F1 | 	add	fp, #12
21c5c     A7 FA 61 FC | 	wrlong	result1, fp
21c60     00 FA 4D F2 | 	cmps	result1, #0 wz
21c64     0C 4E 85 F1 | 	sub	fp, #12
21c68     1C 00 90 5D |  if_ne	jmp	#LR__3720
21c6c     3B 4E 05 F1 | 	add	fp, #59
21c70     A7 FA C1 FA | 	rdbyte	result1, fp
21c74     3B 4E 85 F1 | 	sub	fp, #59
21c78     A0 FA CD F7 | 	test	result1, #160 wz
21c7c     0C 4E 05 51 |  if_ne	add	fp, #12
21c80     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21c84     0C 4E 85 51 |  if_ne	sub	fp, #12
21c88                 | LR__3720
21c88     0C 4E 05 F1 | 	add	fp, #12
21c8c     A7 1E 0A FB | 	rdlong	local01, fp wz
21c90     0C 4E 85 F1 | 	sub	fp, #12
21c94     E0 02 90 5D |  if_ne	jmp	#LR__3732
21c98     74 4E 05 F1 | 	add	fp, #116
21c9c     A7 12 02 F6 | 	mov	arg01, fp
21ca0     48 4E 85 F1 | 	sub	fp, #72
21ca4     A7 14 02 FB | 	rdlong	arg02, fp
21ca8     2C 4E 85 F1 | 	sub	fp, #44
21cac     20 16 06 F6 | 	mov	arg03, #32
21cb0     AC 2E BF FD | 	call	#__system____builtin_memmove
21cb4     40 4E 05 F1 | 	add	fp, #64
21cb8     A7 12 02 F6 | 	mov	arg01, fp
21cbc     30 4E 85 F1 | 	sub	fp, #48
21cc0     A7 14 02 F6 | 	mov	arg02, fp
21cc4     10 4E 85 F1 | 	sub	fp, #16
21cc8     30 16 06 F6 | 	mov	arg03, #48
21ccc     90 2E BF FD | 	call	#__system____builtin_memmove
21cd0     40 4E 05 F1 | 	add	fp, #64
21cd4     A7 12 02 F6 | 	mov	arg01, fp
21cd8     38 4E 85 F1 | 	sub	fp, #56
21cdc     A7 14 02 FB | 	rdlong	arg02, fp
21ce0     08 4E 85 F1 | 	sub	fp, #8
21ce4     34 CA BF FD | 	call	#_fatfs_cc_follow_path
21ce8     0C 4E 05 F1 | 	add	fp, #12
21cec     A7 FA 61 FC | 	wrlong	result1, fp
21cf0     0C 4E 85 F1 | 	sub	fp, #12
21cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
21cf8     4C 00 90 5D |  if_ne	jmp	#LR__3723
21cfc     48 4E 05 F1 | 	add	fp, #72
21d00     A7 FA 01 FB | 	rdlong	result1, fp
21d04     30 4E 85 F1 | 	sub	fp, #48
21d08     A7 16 02 FB | 	rdlong	arg03, fp
21d0c     18 4E 85 F1 | 	sub	fp, #24
21d10     0B FB 09 F2 | 	cmp	result1, arg03 wz
21d14     20 00 90 5D |  if_ne	jmp	#LR__3721
21d18     50 4E 05 F1 | 	add	fp, #80
21d1c     A7 FA 01 FB | 	rdlong	result1, fp
21d20     30 4E 85 F1 | 	sub	fp, #48
21d24     A7 16 02 FB | 	rdlong	arg03, fp
21d28     20 4E 85 F1 | 	sub	fp, #32
21d2c     0B FB 09 F2 | 	cmp	result1, arg03 wz
21d30     04 1E 06 A6 |  if_e	mov	local01, #4
21d34     04 00 90 AD |  if_e	jmp	#LR__3722
21d38                 | LR__3721
21d38     08 1E 06 F6 | 	mov	local01, #8
21d3c                 | LR__3722
21d3c     0C 4E 05 F1 | 	add	fp, #12
21d40     A7 1E 62 FC | 	wrlong	local01, fp
21d44     0C 4E 85 F1 | 	sub	fp, #12
21d48                 | LR__3723
21d48     0C 4E 05 F1 | 	add	fp, #12
21d4c     A7 1E 02 FB | 	rdlong	local01, fp
21d50     0C 4E 85 F1 | 	sub	fp, #12
21d54     04 1E 0E F2 | 	cmp	local01, #4 wz
21d58     CC 01 90 5D |  if_ne	jmp	#LR__3729
21d5c     40 4E 05 F1 | 	add	fp, #64
21d60     A7 12 02 F6 | 	mov	arg01, fp
21d64     40 4E 85 F1 | 	sub	fp, #64
21d68     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
21d6c     0C 4E 05 F1 | 	add	fp, #12
21d70     A7 FA 61 FC | 	wrlong	result1, fp
21d74     0C 4E 85 F1 | 	sub	fp, #12
21d78     00 FA 0D F2 | 	cmp	result1, #0 wz
21d7c     A8 01 90 5D |  if_ne	jmp	#LR__3728
21d80     5C 4E 05 F1 | 	add	fp, #92
21d84     A7 12 02 FB | 	rdlong	arg01, fp
21d88     38 4E 05 F1 | 	add	fp, #56
21d8c     A7 12 62 FC | 	wrlong	arg01, fp
21d90     0D 12 06 F1 | 	add	arg01, #13
21d94     20 4E 85 F1 | 	sub	fp, #32
21d98     A7 14 02 F6 | 	mov	arg02, fp
21d9c     74 4E 85 F1 | 	sub	fp, #116
21da0     0D 14 06 F1 | 	add	arg02, #13
21da4     13 16 06 F6 | 	mov	arg03, #19
21da8     B4 2D BF FD | 	call	#__system____builtin_memmove
21dac     94 4E 05 F1 | 	add	fp, #148
21db0     A7 1E 02 FB | 	rdlong	local01, fp
21db4     15 4E 85 F1 | 	sub	fp, #21
21db8     A7 FA C1 FA | 	rdbyte	result1, fp
21dbc     0B 1E 06 F1 | 	add	local01, #11
21dc0     0F FB 41 FC | 	wrbyte	result1, local01
21dc4     15 4E 05 F1 | 	add	fp, #21
21dc8     A7 1E 02 FB | 	rdlong	local01, fp
21dcc     94 4E 85 F1 | 	sub	fp, #148
21dd0     0B 1E 06 F1 | 	add	local01, #11
21dd4     0F 1F C2 FA | 	rdbyte	local01, local01
21dd8     10 1E CE F7 | 	test	local01, #16 wz
21ddc     24 00 90 5D |  if_ne	jmp	#LR__3724
21de0     94 4E 05 F1 | 	add	fp, #148
21de4     A7 FA 01 FB | 	rdlong	result1, fp
21de8     FD 1E 02 F6 | 	mov	local01, result1
21dec     94 4E 85 F1 | 	sub	fp, #148
21df0     0B FA 05 F1 | 	add	result1, #11
21df4     FD FA C1 FA | 	rdbyte	result1, result1
21df8     20 FA 45 F5 | 	or	result1, #32
21dfc     0B 1E 06 F1 | 	add	local01, #11
21e00     0F FB 41 FC | 	wrbyte	result1, local01
21e04                 | LR__3724
21e04     70 4E 05 F1 | 	add	fp, #112
21e08     A7 1E 02 FB | 	rdlong	local01, fp
21e0c     03 1E 06 F1 | 	add	local01, #3
21e10     0F 03 48 FC | 	wrbyte	#1, local01
21e14     24 4E 05 F1 | 	add	fp, #36
21e18     A7 1E 02 FB | 	rdlong	local01, fp
21e1c     94 4E 85 F1 | 	sub	fp, #148
21e20     0B 1E 06 F1 | 	add	local01, #11
21e24     0F 1F C2 FA | 	rdbyte	local01, local01
21e28     10 1E CE F7 | 	test	local01, #16 wz
21e2c     F8 00 90 AD |  if_e	jmp	#LR__3727
21e30     18 4E 05 F1 | 	add	fp, #24
21e34     A7 16 02 FB | 	rdlong	arg03, fp
21e38     30 4E 05 F1 | 	add	fp, #48
21e3c     A7 1E 02 FB | 	rdlong	local01, fp
21e40     48 4E 85 F1 | 	sub	fp, #72
21e44     0F 17 0A F2 | 	cmp	arg03, local01 wz
21e48     DC 00 90 AD |  if_e	jmp	#LR__3727
21e4c     70 4E 05 F1 | 	add	fp, #112
21e50     A7 12 02 FB | 	rdlong	arg01, fp
21e54     09 1F 02 F6 | 	mov	local01, arg01
21e58     24 4E 05 F1 | 	add	fp, #36
21e5c     A7 14 02 FB | 	rdlong	arg02, fp
21e60     94 4E 85 F1 | 	sub	fp, #148
21e64     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
21e68     FD 14 02 F6 | 	mov	arg02, result1
21e6c     0F 13 02 F6 | 	mov	arg01, local01
21e70     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
21e74     98 4E 05 F1 | 	add	fp, #152
21e78     A7 FA 61 FC | 	wrlong	result1, fp
21e7c     00 FA 4D F2 | 	cmps	result1, #0 wz
21e80     98 4E 85 F1 | 	sub	fp, #152
21e84     0C 4E 05 A1 |  if_e	add	fp, #12
21e88     A7 04 68 AC |  if_e	wrlong	#2, fp
21e8c     0C 4E 85 A1 |  if_e	sub	fp, #12
21e90     94 00 90 AD |  if_e	jmp	#LR__3726
21e94     70 4E 05 F1 | 	add	fp, #112
21e98     A7 12 02 FB | 	rdlong	arg01, fp
21e9c     28 4E 05 F1 | 	add	fp, #40
21ea0     A7 14 02 FB | 	rdlong	arg02, fp
21ea4     98 4E 85 F1 | 	sub	fp, #152
21ea8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
21eac     0C 4E 05 F1 | 	add	fp, #12
21eb0     A7 FA 61 FC | 	wrlong	result1, fp
21eb4     64 4E 05 F1 | 	add	fp, #100
21eb8     A7 1E 02 FB | 	rdlong	local01, fp
21ebc     54 1E 06 F1 | 	add	local01, #84
21ec0     24 4E 05 F1 | 	add	fp, #36
21ec4     A7 1E 62 FC | 	wrlong	local01, fp
21ec8     88 4E 85 F1 | 	sub	fp, #136
21ecc     A7 1E 0A FB | 	rdlong	local01, fp wz
21ed0     0C 4E 85 F1 | 	sub	fp, #12
21ed4     50 00 90 5D |  if_ne	jmp	#LR__3725
21ed8     94 4E 05 F1 | 	add	fp, #148
21edc     A7 1E 02 FB | 	rdlong	local01, fp
21ee0     94 4E 85 F1 | 	sub	fp, #148
21ee4     01 1E 06 F1 | 	add	local01, #1
21ee8     0F 1F C2 FA | 	rdbyte	local01, local01
21eec     2E 1E 0E F2 | 	cmp	local01, #46 wz
21ef0     34 00 90 5D |  if_ne	jmp	#LR__3725
21ef4     70 4E 05 F1 | 	add	fp, #112
21ef8     A7 12 02 FB | 	rdlong	arg01, fp
21efc     24 4E 05 F1 | 	add	fp, #36
21f00     A7 14 02 FB | 	rdlong	arg02, fp
21f04     4C 4E 85 F1 | 	sub	fp, #76
21f08     A7 16 02 FB | 	rdlong	arg03, fp
21f0c     48 4E 85 F1 | 	sub	fp, #72
21f10     50 AD BF FD | 	call	#_fatfs_cc_st_clust
21f14     70 4E 05 F1 | 	add	fp, #112
21f18     A7 1E 02 FB | 	rdlong	local01, fp
21f1c     70 4E 85 F1 | 	sub	fp, #112
21f20     03 1E 06 F1 | 	add	local01, #3
21f24     0F 03 48 FC | 	wrbyte	#1, local01
21f28                 | LR__3725
21f28                 | LR__3726
21f28                 | LR__3727
21f28                 | LR__3728
21f28                 | LR__3729
21f28     0C 4E 05 F1 | 	add	fp, #12
21f2c     A7 1E 0A FB | 	rdlong	local01, fp wz
21f30     0C 4E 85 F1 | 	sub	fp, #12
21f34     40 00 90 5D |  if_ne	jmp	#LR__3731
21f38     10 4E 05 F1 | 	add	fp, #16
21f3c     A7 12 02 F6 | 	mov	arg01, fp
21f40     10 4E 85 F1 | 	sub	fp, #16
21f44     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
21f48     0C 4E 05 F1 | 	add	fp, #12
21f4c     A7 FA 61 FC | 	wrlong	result1, fp
21f50     0C 4E 85 F1 | 	sub	fp, #12
21f54     00 FA 0D F2 | 	cmp	result1, #0 wz
21f58     1C 00 90 5D |  if_ne	jmp	#LR__3730
21f5c     70 4E 05 F1 | 	add	fp, #112
21f60     A7 12 02 FB | 	rdlong	arg01, fp
21f64     70 4E 85 F1 | 	sub	fp, #112
21f68     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
21f6c     0C 4E 05 F1 | 	add	fp, #12
21f70     A7 FA 61 FC | 	wrlong	result1, fp
21f74     0C 4E 85 F1 | 	sub	fp, #12
21f78                 | LR__3730
21f78                 | LR__3731
21f78                 | LR__3732
21f78                 | LR__3733
21f78                 | ' 					res = sync_fs(fs);
21f78                 | ' 				}
21f78                 | ' 			}
21f78                 | ' 
21f78                 | ' 		}
21f78                 | ' 		;
21f78                 | ' 	}
21f78                 | ' 
21f78                 | ' 	return res ;
21f78     0C 4E 05 F1 | 	add	fp, #12
21f7c     A7 FA 01 FB | 	rdlong	result1, fp
21f80     0C 4E 85 F1 | 	sub	fp, #12
21f84     A7 F0 03 F6 | 	mov	ptra, fp
21f88     B2 00 A0 FD | 	call	#popregs_
21f8c                 | _fatfs_cc_f_rename_ret
21f8c     2D 00 64 FD | 	ret
21f90                 | 
21f90                 | _fatfs_cc_time
21f90     00 4A 05 F6 | 	mov	COUNT_, #0
21f94     A8 00 A0 FD | 	call	#pushregs_
21f98     14 F0 07 F1 | 	add	ptra, #20
21f9c     04 4E 05 F1 | 	add	fp, #4
21fa0     A7 12 62 FC | 	wrlong	arg01, fp
21fa4     04 4E 05 F1 | 	add	fp, #4
21fa8     A7 12 02 F6 | 	mov	arg01, fp
21fac     08 4E 85 F1 | 	sub	fp, #8
21fb0     00 14 06 F6 | 	mov	arg02, #0
21fb4     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
21fb8     08 4E 05 F1 | 	add	fp, #8
21fbc     A7 FA 01 FB | 	rdlong	result1, fp
21fc0     08 4E 05 F1 | 	add	fp, #8
21fc4     A7 FA 61 FC | 	wrlong	result1, fp
21fc8     0C 4E 85 F1 | 	sub	fp, #12
21fcc     A7 FA 09 FB | 	rdlong	result1, fp wz
21fd0     04 4E 85 F1 | 	sub	fp, #4
21fd4     18 00 90 AD |  if_e	jmp	#LR__3740
21fd8     04 4E 05 F1 | 	add	fp, #4
21fdc     A7 FA 01 FB | 	rdlong	result1, fp
21fe0     0C 4E 05 F1 | 	add	fp, #12
21fe4     A7 14 02 FB | 	rdlong	arg02, fp
21fe8     10 4E 85 F1 | 	sub	fp, #16
21fec     FD 14 62 FC | 	wrlong	arg02, result1
21ff0                 | LR__3740
21ff0                 | '         *tp = now;
21ff0                 | '     return now;
21ff0     10 4E 05 F1 | 	add	fp, #16
21ff4     A7 FA 01 FB | 	rdlong	result1, fp
21ff8     10 4E 85 F1 | 	sub	fp, #16
21ffc     A7 F0 03 F6 | 	mov	ptra, fp
22000     B2 00 A0 FD | 	call	#popregs_
22004                 | _fatfs_cc_time_ret
22004     2D 00 64 FD | 	ret
22008                 | 
22008                 | _fatfs_cc_mktime
22008     06 4A 05 F6 | 	mov	COUNT_, #6
2200c     A8 00 A0 FD | 	call	#pushregs_
22010     09 1F 02 F6 | 	mov	local01, arg01
22014     14 1E 06 F1 | 	add	local01, #20
22018     0F 13 02 FB | 	rdlong	arg01, local01
2201c     14 1E 86 F1 | 	sub	local01, #20
22020     46 12 56 F2 | 	cmps	arg01, #70 wc
22024                 | '                 return (time_t) -1;
22024     01 FA 65 C6 |  if_b	neg	result1, #1
22028     7C 01 90 CD |  if_b	jmp	#LR__3754
2202c     03 00 00 FF 
22030     6C 21 06 F6 | 	mov	local02, ##1900
22034     14 1E 06 F1 | 	add	local01, #20
22038     0F FB 01 FB | 	rdlong	result1, local01
2203c     FD 20 02 F1 | 	add	local02, result1
22040     08 1E 86 F1 | 	sub	local01, #8
22044     0F 23 02 FB | 	rdlong	local03, local01
22048     01 22 86 F1 | 	sub	local03, #1
2204c     04 1E 06 F1 | 	add	local01, #4
22050     0F 13 02 FB | 	rdlong	arg01, local01
22054     10 1E 86 F1 | 	sub	local01, #16
22058     02 12 66 F0 | 	shl	arg01, #2
2205c     02 00 00 FF 
22060     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22064     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22068     09 FB 01 FB | 	rdlong	result1, arg01
2206c     FD 22 02 F1 | 	add	local03, result1
22070     10 13 02 F6 | 	mov	arg01, local02
22074     02 00 00 FF 
22078     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2207c     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22080     00 FA 0D F2 | 	cmp	result1, #0 wz
22084     1C 00 90 AD |  if_e	jmp	#LR__3750
22088     00 24 06 F6 | 	mov	local04, #0
2208c     10 1E 06 F1 | 	add	local01, #16
22090     0F FB 01 FB | 	rdlong	result1, local01
22094     10 1E 86 F1 | 	sub	local01, #16
22098     02 FA 55 F2 | 	cmps	result1, #2 wc
2209c     01 24 06 36 |  if_ae	mov	local04, #1
220a0     04 00 90 FD | 	jmp	#LR__3751
220a4                 | LR__3750
220a4     00 24 06 F6 | 	mov	local04, #0
220a8                 | LR__3751
220a8     04 1E 06 F1 | 	add	local01, #4
220ac     0F FB 01 FB | 	rdlong	result1, local01
220b0     04 1E 86 F1 | 	sub	local01, #4
220b4     0F 27 02 FB | 	rdlong	local05, local01
220b8     08 1E 06 F1 | 	add	local01, #8
220bc     0F 13 02 FB | 	rdlong	arg01, local01
220c0     07 00 00 FF 
220c4     10 12 06 FD | 	qmul	arg01, ##3600
220c8     12 23 02 F1 | 	add	local03, local04
220cc     FD 24 02 F6 | 	mov	local04, result1
220d0     04 24 66 F0 | 	shl	local04, #4
220d4     FD 24 82 F1 | 	sub	local04, result1
220d8     02 24 66 F0 | 	shl	local04, #2
220dc     12 27 02 F1 | 	add	local05, local04
220e0     08 1E 86 F1 | 	sub	local01, #8
220e4     18 24 62 FD | 	getqx	local04
220e8     A8 00 00 FF 
220ec     80 23 06 FD | 	qmul	local03, ##86400
220f0     12 27 02 F1 | 	add	local05, local04
220f4     10 23 02 F6 | 	mov	local03, local02
220f8     03 00 00 FF 
220fc     B2 23 86 F1 | 	sub	local03, ##1970
22100     18 24 62 FD | 	getqx	local04
22104     99 F0 00 FF 
22108     80 23 06 FD | 	qmul	local03, ##31536000
2210c     12 27 02 F1 | 	add	local05, local04
22110     10 23 02 F6 | 	mov	local03, local02
22114     03 00 00 FF 
22118     B1 23 86 F1 | 	sub	local03, ##1969
2211c     11 29 52 F6 | 	abs	local06, local03 wc
22120     02 28 46 F0 | 	shr	local06, #2
22124     14 29 82 F6 | 	negc	local06, local06
22128     03 00 00 FF 
2212c     D1 21 56 F2 | 	cmps	local02, ##2001 wc
22130     18 24 62 FD | 	getqx	local04
22134     12 27 02 F1 | 	add	local05, local04
22138     18 00 90 CD |  if_b	jmp	#LR__3752
2213c     03 00 00 FF 
22140     D0 21 86 F1 | 	sub	local02, ##2000
22144     10 25 52 F6 | 	abs	local04, local02 wc
22148     64 24 16 FD | 	qdiv	local04, #100
2214c     18 24 62 FD | 	getqx	local04
22150     12 29 A2 F3 | 	sumnc	local06, local04
22154                 | LR__3752
22154     A8 00 00 FF 
22158     80 29 06 FD | 	qmul	local06, ##86400
2215c     18 28 62 FD | 	getqx	local06
22160     14 27 02 F1 | 	add	local05, local06
22164     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
22168     02 00 00 FF 
2216c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22170     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
22174     14 27 02 F1 | 	add	local05, local06
22178     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2217c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22180     02 00 00 FF 
22184     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22188     01 22 0E F2 | 	cmp	local03, #1 wz
2218c     14 00 90 5D |  if_ne	jmp	#LR__3753
22190     0F 13 02 F6 | 	mov	arg01, local01
22194     D8 19 B0 FD | 	call	#_fatfs_cc___indst
22198     00 FA 0D F2 | 	cmp	result1, #0 wz
2219c     07 00 00 5F 
221a0     10 26 86 51 |  if_ne	sub	local05, ##3600
221a4                 | LR__3753
221a4                 | '                 s -=  (3600L) ;
221a4                 | ' 
221a4                 | '         return s;
221a4     13 FB 01 F6 | 	mov	result1, local05
221a8                 | LR__3754
221a8     A7 F0 03 F6 | 	mov	ptra, fp
221ac     B2 00 A0 FD | 	call	#popregs_
221b0                 | _fatfs_cc_mktime_ret
221b0     2D 00 64 FD | 	ret
221b4                 | 
221b4                 | _fatfs_cc__gmtime_r
221b4     03 4A 05 F6 | 	mov	COUNT_, #3
221b8     A8 00 A0 FD | 	call	#pushregs_
221bc     09 1F 02 FB | 	rdlong	local01, arg01
221c0     A8 00 00 FF 
221c4     80 1F 16 FD | 	qdiv	local01, ##86400
221c8     18 FA 61 FD | 	getqx	result1
221cc     04 FA 05 F1 | 	add	result1, #4
221d0     07 FA 15 FD | 	qdiv	result1, #7
221d4     18 14 06 F1 | 	add	arg02, #24
221d8     D1 7F 27 FF 
221dc     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
221e0     D1 7F 27 3F 
221e4     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
221e8     03 00 00 3F 
221ec     DC 21 06 36 |  if_ae	mov	local02, ##2012
221f0     03 00 00 CF 
221f4     B2 21 06 C6 |  if_b	mov	local02, ##1970
221f8                 | ' 	  year = 1970;
221f8                 | ' 	}
221f8                 | ' 
221f8                 | ' 	for(;;) {
221f8     19 FA 61 FD | 	getqy	result1
221fc     0A FB 61 FC | 	wrlong	result1, arg02
22200     18 14 86 F1 | 	sub	arg02, #24
22204                 | LR__3760
22204     10 13 02 F6 | 	mov	arg01, local02
22208     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2220c     00 FA 0D F2 | 	cmp	result1, #0 wz
22210     42 F1 00 5F 
22214     00 23 06 56 |  if_ne	mov	local03, ##31622400
22218     99 F0 00 AF 
2221c     80 23 06 A6 |  if_e	mov	local03, ##31536000
22220     11 1F 12 F2 | 	cmp	local01, local03 wc
22224                 | ' 	    break;
22224     01 20 06 31 |  if_ae	add	local02, #1
22228     11 1F 82 31 |  if_ae	sub	local01, local03
2222c     D4 FF 9F 3D |  if_ae	jmp	#LR__3760
22230     A8 00 00 FF 
22234     80 1F 16 FD | 	qdiv	local01, ##86400
22238     10 23 02 F6 | 	mov	local03, local02
2223c     03 00 00 FF 
22240     6C 23 86 F1 | 	sub	local03, ##1900
22244     14 14 06 F1 | 	add	arg02, #20
22248     0A 23 62 FC | 	wrlong	local03, arg02
2224c     08 14 06 F1 | 	add	arg02, #8
22250     10 13 02 F6 | 	mov	arg01, local02
22254     18 20 62 FD | 	getqx	local02
22258     0A 21 62 FC | 	wrlong	local02, arg02
2225c     1C 14 86 F1 | 	sub	arg02, #28
22260     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22264     00 FA 0D F2 | 	cmp	result1, #0 wz
22268     1D 22 06 56 |  if_ne	mov	local03, #29
2226c     1C 22 06 A6 |  if_e	mov	local03, #28
22270     02 00 00 FF 
22274     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
22278     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2227c     02 00 00 FF 
22280     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22284                 | ' 
22284                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22284                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22284     00 12 06 F6 | 	mov	arg01, #0
22288     97 2A 48 FB | 	callpa	#(@LR__3762-@LR__3761)>>2,fcache_load_ptr_
2228c                 | LR__3761
2228c     09 23 02 F6 | 	mov	local03, arg01
22290     02 22 66 F0 | 	shl	local03, #2
22294     02 00 00 FF 
22298     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2229c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
222a0     11 23 02 FB | 	rdlong	local03, local03
222a4     11 21 52 F2 | 	cmps	local02, local03 wc
222a8     02 00 00 FF 
222ac     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
222b0     2C 00 90 CD |  if_b	jmp	#LR__3763
222b4     09 23 02 F6 | 	mov	local03, arg01
222b8     02 22 66 F0 | 	shl	local03, #2
222bc     02 00 00 FF 
222c0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
222c4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
222c8     11 23 02 FB | 	rdlong	local03, local03
222cc     11 21 82 F1 | 	sub	local02, local03
222d0     01 12 06 F1 | 	add	arg01, #1
222d4     02 00 00 FF 
222d8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
222dc     AC FF 9F FD | 	jmp	#LR__3761
222e0                 | LR__3762
222e0                 | LR__3763
222e0     A8 00 00 FF 
222e4     80 1F 16 FD | 	qdiv	local01, ##86400
222e8     10 14 06 F1 | 	add	arg02, #16
222ec     0A 13 62 FC | 	wrlong	arg01, arg02
222f0     01 20 06 F1 | 	add	local02, #1
222f4     04 14 86 F1 | 	sub	arg02, #4
222f8     0A 21 62 FC | 	wrlong	local02, arg02
222fc     19 1E 62 FD | 	getqy	local01
22300     07 00 00 FF 
22304     10 1E 16 FD | 	qdiv	local01, ##3600
22308     18 22 62 FD | 	getqx	local03
2230c     07 00 00 FF 
22310     10 1E 16 FD | 	qdiv	local01, ##3600
22314     04 14 86 F1 | 	sub	arg02, #4
22318     0A 23 62 FC | 	wrlong	local03, arg02
2231c     19 1E 62 FD | 	getqy	local01
22320     3C 1E 16 FD | 	qdiv	local01, #60
22324     18 22 62 FD | 	getqx	local03
22328     3C 1E 16 FD | 	qdiv	local01, #60
2232c     04 14 86 F1 | 	sub	arg02, #4
22330     0A 23 62 FC | 	wrlong	local03, arg02
22334     04 14 86 F1 | 	sub	arg02, #4
22338                 | '         stm->tm_isdst = 0;
22338                 | ' 
22338                 | ' ;
22338                 | '         return stm;
22338     0A FB 01 F6 | 	mov	result1, arg02
2233c     19 22 62 FD | 	getqy	local03
22340     0A 23 62 FC | 	wrlong	local03, arg02
22344     20 14 06 F1 | 	add	arg02, #32
22348     0A 01 68 FC | 	wrlong	#0, arg02
2234c     A7 F0 03 F6 | 	mov	ptra, fp
22350     B2 00 A0 FD | 	call	#popregs_
22354                 | _fatfs_cc__gmtime_r_ret
22354     2D 00 64 FD | 	ret
22358                 | 
22358                 | _fatfs_cc__tzset
22358     1F 01 00 FF 
2235c     99 12 06 F6 | 	mov	arg01, ##@LR__4075
22360     34 00 B0 FD | 	call	#_fatfs_cc_getenv
22364     FD 12 02 F6 | 	mov	arg01, result1
22368     02 00 00 FF 
2236c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
22370     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
22374     02 00 00 FF 
22378     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2237c     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
22380     02 00 00 FF 
22384     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22388     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2238c     02 00 00 FF 
22390     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
22394                 | _fatfs_cc__tzset_ret
22394     2D 00 64 FD | 	ret
22398                 | 
22398                 | _fatfs_cc_getenv
22398     06 4A 05 F6 | 	mov	COUNT_, #6
2239c     A8 00 A0 FD | 	call	#pushregs_
223a0     09 1F 02 F6 | 	mov	local01, arg01
223a4     09 21 02 F6 | 	mov	local02, arg01
223a8     97 06 48 FB | 	callpa	#(@LR__3771-@LR__3770)>>2,fcache_load_ptr_
223ac                 | LR__3770
223ac     10 FB C9 FA | 	rdbyte	result1, local02 wz
223b0     01 20 06 51 |  if_ne	add	local02, #1
223b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3770
223b8                 | LR__3771
223b8     09 21 82 F1 | 	sub	local02, arg01
223bc     10 FB 01 F6 | 	mov	result1, local02
223c0     02 00 00 FF 
223c4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
223c8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
223cc     02 00 00 FF 
223d0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
223d4                 | '             return 0;
223d4     00 FA 05 A6 |  if_e	mov	result1, #0
223d8     5C 00 90 AD |  if_e	jmp	#LR__3774
223dc                 | ' 
223dc                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
223dc     02 00 00 FF 
223e0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
223e4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
223e8     02 00 00 FF 
223ec     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
223f0                 | LR__3772
223f0     11 25 0A FB | 	rdlong	local04, local03 wz
223f4     3C 00 90 AD |  if_e	jmp	#LR__3773
223f8     12 13 02 F6 | 	mov	arg01, local04
223fc     0F 15 02 F6 | 	mov	arg02, local01
22400     10 17 02 F6 | 	mov	arg03, local02
22404     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
22408     00 FA 0D F2 | 	cmp	result1, #0 wz
2240c     10 27 02 A6 |  if_e	mov	local05, local02
22410     12 27 02 A1 |  if_e	add	local05, local04
22414     13 29 C2 AA |  if_e	rdbyte	local06, local05
22418     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2241c                 | ' 			return name+len+1;
2241c     10 25 02 A1 |  if_e	add	local04, local02
22420     01 24 06 A1 |  if_e	add	local04, #1
22424     12 FB 01 A6 |  if_e	mov	result1, local04
22428     0C 00 90 AD |  if_e	jmp	#LR__3774
2242c     04 22 06 F1 | 	add	local03, #4
22430     BC FF 9F FD | 	jmp	#LR__3772
22434                 | LR__3773
22434                 | ' 	}
22434                 | ' 	return 0;
22434     00 FA 05 F6 | 	mov	result1, #0
22438                 | LR__3774
22438     A7 F0 03 F6 | 	mov	ptra, fp
2243c     B2 00 A0 FD | 	call	#popregs_
22440                 | _fatfs_cc_getenv_ret
22440     2D 00 64 FD | 	ret
22444                 | 
22444                 | _fatfs_cc__get_fattime
22444     00 4A 05 F6 | 	mov	COUNT_, #0
22448     A8 00 A0 FD | 	call	#pushregs_
2244c     34 F0 07 F1 | 	add	ptra, #52
22450     00 12 06 F6 | 	mov	arg01, #0
22454     38 FB BF FD | 	call	#_fatfs_cc_time
22458     04 4E 05 F1 | 	add	fp, #4
2245c     A7 FA 61 FC | 	wrlong	result1, fp
22460     A7 12 02 F6 | 	mov	arg01, fp
22464     0C 4E 05 F1 | 	add	fp, #12
22468     A7 14 02 F6 | 	mov	arg02, fp
2246c     10 4E 85 F1 | 	sub	fp, #16
22470     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
22474     24 4E 05 F1 | 	add	fp, #36
22478     A7 14 02 FB | 	rdlong	arg02, fp
2247c     50 14 86 F1 | 	sub	arg02, #80
22480     09 14 66 F0 | 	shl	arg02, #9
22484     04 4E 85 F1 | 	sub	fp, #4
22488     A7 FA 01 FB | 	rdlong	result1, fp
2248c     01 FA 05 F1 | 	add	result1, #1
22490     05 FA 65 F0 | 	shl	result1, #5
22494     FD 14 42 F5 | 	or	arg02, result1
22498     04 4E 85 F1 | 	sub	fp, #4
2249c     A7 FA 01 FB | 	rdlong	result1, fp
224a0     FD 14 42 F5 | 	or	arg02, result1
224a4     14 4E 85 F1 | 	sub	fp, #20
224a8     A7 14 62 FC | 	wrlong	arg02, fp
224ac     10 4E 05 F1 | 	add	fp, #16
224b0     A7 14 02 FB | 	rdlong	arg02, fp
224b4     0B 14 66 F0 | 	shl	arg02, #11
224b8     04 4E 85 F1 | 	sub	fp, #4
224bc     A7 FA 01 FB | 	rdlong	result1, fp
224c0     05 FA 65 F0 | 	shl	result1, #5
224c4     FD 14 42 F5 | 	or	arg02, result1
224c8     04 4E 85 F1 | 	sub	fp, #4
224cc     A7 FA 01 FB | 	rdlong	result1, fp
224d0     FD 14 42 F5 | 	or	arg02, result1
224d4     04 4E 85 F1 | 	sub	fp, #4
224d8     A7 14 62 FC | 	wrlong	arg02, fp
224dc                 | ' 
224dc                 | '     now = time(0);
224dc                 | '     _gmtime_r (&now, &date);
224dc                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
224dc                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
224dc                 | '     return (ffdate << 16) | fftime;
224dc     04 4E 85 F1 | 	sub	fp, #4
224e0     A7 FA 01 FB | 	rdlong	result1, fp
224e4     10 FA 65 F0 | 	shl	result1, #16
224e8     08 4E 85 F1 | 	sub	fp, #8
224ec     0A FB 41 F5 | 	or	result1, arg02
224f0     A7 F0 03 F6 | 	mov	ptra, fp
224f4     B2 00 A0 FD | 	call	#popregs_
224f8                 | _fatfs_cc__get_fattime_ret
224f8     2D 00 64 FD | 	ret
224fc                 | 
224fc                 | _fatfs_cc_unixtime_0768
224fc     00 4A 05 F6 | 	mov	COUNT_, #0
22500     A8 00 A0 FD | 	call	#pushregs_
22504     34 F0 07 F1 | 	add	ptra, #52
22508     04 4E 05 F1 | 	add	fp, #4
2250c     A7 12 62 FC | 	wrlong	arg01, fp
22510     04 4E 05 F1 | 	add	fp, #4
22514     A7 14 62 FC | 	wrlong	arg02, fp
22518     04 4E 85 F1 | 	sub	fp, #4
2251c     A7 14 02 FB | 	rdlong	arg02, fp
22520     09 14 46 F0 | 	shr	arg02, #9
22524     7F 14 06 F5 | 	and	arg02, #127
22528     50 FA 05 F6 | 	mov	result1, #80
2252c     0A FB 01 F1 | 	add	result1, arg02
22530     20 4E 05 F1 | 	add	fp, #32
22534     A7 FA 61 FC | 	wrlong	result1, fp
22538     20 4E 85 F1 | 	sub	fp, #32
2253c     A7 FA 01 FB | 	rdlong	result1, fp
22540     05 FA 45 F0 | 	shr	result1, #5
22544     FD FA 41 F8 | 	getnib	result1, result1, #0
22548     01 FA 85 F1 | 	sub	result1, #1
2254c     1C 4E 05 F1 | 	add	fp, #28
22550     A7 FA 61 FC | 	wrlong	result1, fp
22554     1C 4E 85 F1 | 	sub	fp, #28
22558     A7 FA 01 FB | 	rdlong	result1, fp
2255c     1F FA 05 F5 | 	and	result1, #31
22560     18 4E 05 F1 | 	add	fp, #24
22564     A7 FA 61 FC | 	wrlong	result1, fp
22568     14 4E 85 F1 | 	sub	fp, #20
2256c     A7 FA 01 FB | 	rdlong	result1, fp
22570     0B FA 45 F0 | 	shr	result1, #11
22574     1F FA 05 F5 | 	and	result1, #31
22578     10 4E 05 F1 | 	add	fp, #16
2257c     A7 FA 61 FC | 	wrlong	result1, fp
22580     10 4E 85 F1 | 	sub	fp, #16
22584     A7 FA 01 FB | 	rdlong	result1, fp
22588     05 FA 45 F0 | 	shr	result1, #5
2258c     3F FA 05 F5 | 	and	result1, #63
22590     0C 4E 05 F1 | 	add	fp, #12
22594     A7 FA 61 FC | 	wrlong	result1, fp
22598     0C 4E 85 F1 | 	sub	fp, #12
2259c     A7 14 02 FB | 	rdlong	arg02, fp
225a0     1F 14 06 F5 | 	and	arg02, #31
225a4     01 14 66 F0 | 	shl	arg02, #1
225a8     08 4E 05 F1 | 	add	fp, #8
225ac     A7 14 62 FC | 	wrlong	arg02, fp
225b0     A7 12 02 F6 | 	mov	arg01, fp
225b4     10 4E 85 F1 | 	sub	fp, #16
225b8     4C FA BF FD | 	call	#_fatfs_cc_mktime
225bc     0C 4E 05 F1 | 	add	fp, #12
225c0     A7 FA 61 FC | 	wrlong	result1, fp
225c4                 | ' 
225c4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
225c4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
225c4                 | '     date.tm_mday = (dosdate & 0x1f);
225c4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
225c4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
225c4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
225c4                 | ' 
225c4                 | '     t = mktime(&date);
225c4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
225c4                 | '     return t;
225c4     0C 4E 85 F1 | 	sub	fp, #12
225c8     A7 F0 03 F6 | 	mov	ptra, fp
225cc     B2 00 A0 FD | 	call	#popregs_
225d0                 | _fatfs_cc_unixtime_0768_ret
225d0     2D 00 64 FD | 	ret
225d4                 | 
225d4                 | _fatfs_cc__set_dos_error_0770
225d4     09 01 02 F6 | 	mov	_var01, arg01
225d8                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
225d8                 | '     switch (derr) {
225d8     14 00 26 F3 | 	fle	_var01, #20
225dc     30 00 62 FD | 	jmprel	_var01
225e0                 | LR__3780
225e0     50 00 90 FD | 	jmp	#LR__3781
225e4     84 00 90 FD | 	jmp	#LR__3795
225e8     80 00 90 FD | 	jmp	#LR__3796
225ec     7C 00 90 FD | 	jmp	#LR__3797
225f0     48 00 90 FD | 	jmp	#LR__3782
225f4     44 00 90 FD | 	jmp	#LR__3783
225f8     40 00 90 FD | 	jmp	#LR__3784
225fc     44 00 90 FD | 	jmp	#LR__3785
22600     48 00 90 FD | 	jmp	#LR__3787
22604     54 00 90 FD | 	jmp	#LR__3790
22608     38 00 90 FD | 	jmp	#LR__3786
2260c     4C 00 90 FD | 	jmp	#LR__3791
22610     48 00 90 FD | 	jmp	#LR__3792
22614     44 00 90 FD | 	jmp	#LR__3793
22618     50 00 90 FD | 	jmp	#LR__3798
2261c     4C 00 90 FD | 	jmp	#LR__3798
22620     48 00 90 FD | 	jmp	#LR__3798
22624     2C 00 90 FD | 	jmp	#LR__3788
22628     38 00 90 FD | 	jmp	#LR__3794
2262c     2C 00 90 FD | 	jmp	#LR__3789
22630     38 00 90 FD | 	jmp	#LR__3798
22634                 | LR__3781
22634     00 02 06 F6 | 	mov	_var02, #0
22638                 | '         r = 0;
22638                 | '         break;
22638     34 00 90 FD | 	jmp	#LR__3799
2263c                 | LR__3782
2263c                 | LR__3783
2263c                 | LR__3784
2263c     04 02 06 F6 | 	mov	_var02, #4
22640                 | '         r =  4 ;
22640                 | '         break;
22640     2C 00 90 FD | 	jmp	#LR__3799
22644                 | LR__3785
22644                 | LR__3786
22644     06 02 06 F6 | 	mov	_var02, #6
22648                 | '         r =  6 ;
22648                 | '         break;
22648     24 00 90 FD | 	jmp	#LR__3799
2264c                 | LR__3787
2264c     09 02 06 F6 | 	mov	_var02, #9
22650                 | '         r =  9 ;
22650                 | '         break;
22650     1C 00 90 FD | 	jmp	#LR__3799
22654                 | LR__3788
22654     07 02 06 F6 | 	mov	_var02, #7
22658                 | '         r =  7 ;
22658                 | '         break;
22658     14 00 90 FD | 	jmp	#LR__3799
2265c                 | LR__3789
2265c                 | LR__3790
2265c                 | LR__3791
2265c                 | LR__3792
2265c                 | LR__3793
2265c     0A 02 06 F6 | 	mov	_var02, #10
22660                 | '         r =  10 ;
22660                 | '         break;
22660     0C 00 90 FD | 	jmp	#LR__3799
22664                 | LR__3794
22664     0B 02 06 F6 | 	mov	_var02, #11
22668                 | '         r =  11 ;
22668                 | '         break;
22668     04 00 90 FD | 	jmp	#LR__3799
2266c                 | LR__3795
2266c                 | LR__3796
2266c                 | LR__3797
2266c                 | LR__3798
2266c     0C 02 06 F6 | 	mov	_var02, #12
22670                 | '         r =  12 ;
22670                 | '         break;
22670                 | LR__3799
22670                 | '     }
22670                 | '     return _seterror(r);
22670     00 02 4E F2 | 	cmps	_var02, #0 wz
22674     20 E8 05 F1 | 	add	ptr___system__dat__, #32
22678     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2267c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
22680     01 FA 65 56 |  if_ne	neg	result1, #1
22684     00 FA 05 A6 |  if_e	mov	result1, #0
22688                 | _fatfs_cc__set_dos_error_0770_ret
22688     2D 00 64 FD | 	ret
2268c                 | 
2268c                 | _fatfs_cc_v_creat
2268c     04 4A 05 F6 | 	mov	COUNT_, #4
22690     A8 00 A0 FD | 	call	#pushregs_
22694     09 1F 02 F6 | 	mov	local01, arg01
22698     0A 21 02 F6 | 	mov	local02, arg02
2269c     03 00 00 FF 
226a0     3C 12 06 F6 | 	mov	arg01, ##1596
226a4                 | '     return _gc_alloc(size);
226a4     10 14 06 F6 | 	mov	arg02, #16
226a8     2C 60 BF FD | 	call	#__system___gc_doalloc
226ac     FD 22 0A F6 | 	mov	local03, result1 wz
226b0                 | '       return _seterror( 7 );
226b0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
226b4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
226b8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
226bc     01 FA 65 A6 |  if_e	neg	result1, #1
226c0     58 00 90 AD |  if_e	jmp	#LR__3801
226c4     11 13 02 F6 | 	mov	arg01, local03
226c8     00 14 06 F6 | 	mov	arg02, #0
226cc     03 00 00 FF 
226d0     3C 16 06 F6 | 	mov	arg03, ##1596
226d4     98 00 A0 FD | 	call	#\builtin_bytefill_
226d8     02 00 00 FF 
226dc     14 22 06 F1 | 	add	local03, ##1044
226e0     11 13 02 F6 | 	mov	arg01, local03
226e4     02 00 00 FF 
226e8     14 22 86 F1 | 	sub	local03, ##1044
226ec     10 15 02 F6 | 	mov	arg02, local02
226f0     07 16 06 F6 | 	mov	arg03, #7
226f4     B4 CC BF FD | 	call	#_fatfs_cc_f_open
226f8     FD 24 0A F6 | 	mov	local04, result1 wz
226fc     14 00 90 AD |  if_e	jmp	#LR__3800
22700     11 13 02 F6 | 	mov	arg01, local03
22704                 | '     return _gc_free(ptr);
22704     DC 60 BF FD | 	call	#__system___gc_free
22708                 | '     free(f);
22708                 | '     return _set_dos_error(r);
22708     12 13 02 F6 | 	mov	arg01, local04
2270c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22710     08 00 90 FD | 	jmp	#LR__3801
22714                 | LR__3800
22714     0F 23 62 FC | 	wrlong	local03, local01
22718                 | '   }
22718                 | '   fil->vfsdata = f;
22718                 | '   return 0;
22718     00 FA 05 F6 | 	mov	result1, #0
2271c                 | LR__3801
2271c     A7 F0 03 F6 | 	mov	ptra, fp
22720     B2 00 A0 FD | 	call	#popregs_
22724                 | _fatfs_cc_v_creat_ret
22724     2D 00 64 FD | 	ret
22728                 | 
22728                 | _fatfs_cc_v_close
22728     02 4A 05 F6 | 	mov	COUNT_, #2
2272c     A8 00 A0 FD | 	call	#pushregs_
22730     09 1F 02 FB | 	rdlong	local01, arg01
22734     02 00 00 FF 
22738     14 1E 06 F1 | 	add	local01, ##1044
2273c     0F 13 02 F6 | 	mov	arg01, local01
22740     02 00 00 FF 
22744     14 1E 86 F1 | 	sub	local01, ##1044
22748     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2274c     FD 20 02 F6 | 	mov	local02, result1
22750     0F 13 02 F6 | 	mov	arg01, local01
22754                 | '     return _gc_free(ptr);
22754     8C 60 BF FD | 	call	#__system___gc_free
22758                 | '     FAT_FIL *f = fil->vfsdata;
22758                 | '     r=f_close(&f->fil);
22758                 | '     free(f);
22758                 | '     return _set_dos_error(r);
22758     10 13 02 F6 | 	mov	arg01, local02
2275c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22760     A7 F0 03 F6 | 	mov	ptra, fp
22764     B2 00 A0 FD | 	call	#popregs_
22768                 | _fatfs_cc_v_close_ret
22768     2D 00 64 FD | 	ret
2276c                 | 
2276c                 | _fatfs_cc_v_opendir
2276c     04 4A 05 F6 | 	mov	COUNT_, #4
22770     A8 00 A0 FD | 	call	#pushregs_
22774     09 1F 02 F6 | 	mov	local01, arg01
22778     0A 21 02 F6 | 	mov	local02, arg02
2277c     30 12 06 F6 | 	mov	arg01, #48
22780                 | '     return _gc_alloc(size);
22780     10 14 06 F6 | 	mov	arg02, #16
22784     50 5F BF FD | 	call	#__system___gc_doalloc
22788     FD 22 0A F6 | 	mov	local03, result1 wz
2278c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
2278c                 | '       return _seterror( 7 );
2278c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22790     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22794     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22798     01 FA 65 A6 |  if_e	neg	result1, #1
2279c     34 00 90 AD |  if_e	jmp	#LR__3811
227a0     10 15 02 F6 | 	mov	arg02, local02
227a4     11 13 02 F6 | 	mov	arg01, local03
227a8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
227ac     FD 24 0A F6 | 	mov	local04, result1 wz
227b0     14 00 90 AD |  if_e	jmp	#LR__3810
227b4     11 13 02 F6 | 	mov	arg01, local03
227b8                 | '     return _gc_free(ptr);
227b8     28 60 BF FD | 	call	#__system___gc_free
227bc                 | '         free(f);
227bc                 | '         return _set_dos_error(r);
227bc     12 13 02 F6 | 	mov	arg01, local04
227c0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0770
227c4     0C 00 90 FD | 	jmp	#LR__3811
227c8                 | LR__3810
227c8     04 1E 06 F1 | 	add	local01, #4
227cc     0F 23 62 FC | 	wrlong	local03, local01
227d0                 | '     }
227d0                 | '     dir->vfsdata = f;
227d0                 | '     return 0;
227d0     00 FA 05 F6 | 	mov	result1, #0
227d4                 | LR__3811
227d4     A7 F0 03 F6 | 	mov	ptra, fp
227d8     B2 00 A0 FD | 	call	#popregs_
227dc                 | _fatfs_cc_v_opendir_ret
227dc     2D 00 64 FD | 	ret
227e0                 | 
227e0                 | _fatfs_cc_v_closedir
227e0     02 4A 05 F6 | 	mov	COUNT_, #2
227e4     A8 00 A0 FD | 	call	#pushregs_
227e8     04 12 06 F1 | 	add	arg01, #4
227ec     09 1F 02 FB | 	rdlong	local01, arg01
227f0     0F 13 02 F6 | 	mov	arg01, local01
227f4     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
227f8     FD 20 02 F6 | 	mov	local02, result1
227fc     0F 13 02 F6 | 	mov	arg01, local01
22800                 | '     return _gc_free(ptr);
22800     E0 5F BF FD | 	call	#__system___gc_free
22804     00 20 0E F2 | 	cmp	local02, #0 wz
22808     10 13 02 56 |  if_ne	mov	arg01, local02
2280c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0770
22810                 | '     return r;
22810     10 FB 01 F6 | 	mov	result1, local02
22814     A7 F0 03 F6 | 	mov	ptra, fp
22818     B2 00 A0 FD | 	call	#popregs_
2281c                 | _fatfs_cc_v_closedir_ret
2281c     2D 00 64 FD | 	ret
22820                 | 
22820                 | _fatfs_cc_v_readdir
22820     01 4A 05 F6 | 	mov	COUNT_, #1
22824     A8 00 A0 FD | 	call	#pushregs_
22828     2C F1 07 F1 | 	add	ptra, #300
2282c     04 4E 05 F1 | 	add	fp, #4
22830     A7 12 62 FC | 	wrlong	arg01, fp
22834     04 4E 05 F1 | 	add	fp, #4
22838     A7 14 62 FC | 	wrlong	arg02, fp
2283c     04 4E 85 F1 | 	sub	fp, #4
22840     A7 16 02 FB | 	rdlong	arg03, fp
22844     04 16 06 F1 | 	add	arg03, #4
22848     0B 13 02 FB | 	rdlong	arg01, arg03
2284c     08 4E 05 F1 | 	add	fp, #8
22850     A7 14 02 F6 | 	mov	arg02, fp
22854     0C 4E 85 F1 | 	sub	fp, #12
22858     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2285c     28 4F 05 F1 | 	add	fp, #296
22860     A7 FA 61 FC | 	wrlong	result1, fp
22864     28 4F 85 F1 | 	sub	fp, #296
22868     00 FA 0D F2 | 	cmp	result1, #0 wz
2286c     14 00 90 AD |  if_e	jmp	#LR__3820
22870                 | '         return _set_dos_error(r);
22870     28 4F 05 F1 | 	add	fp, #296
22874     A7 12 02 FB | 	rdlong	arg01, fp
22878     28 4F 85 F1 | 	sub	fp, #296
2287c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22880     C4 00 90 FD | 	jmp	#LR__3823
22884                 | LR__3820
22884     28 4E 05 F1 | 	add	fp, #40
22888     A7 16 CA FA | 	rdbyte	arg03, fp wz
2288c     28 4E 85 F1 | 	sub	fp, #40
22890                 | '         return -1;
22890     01 FA 65 A6 |  if_e	neg	result1, #1
22894     B0 00 90 AD |  if_e	jmp	#LR__3823
22898     08 4E 05 F1 | 	add	fp, #8
2289c     A7 12 02 FB | 	rdlong	arg01, fp
228a0     20 4E 05 F1 | 	add	fp, #32
228a4     A7 14 02 F6 | 	mov	arg02, fp
228a8     28 4E 85 F1 | 	sub	fp, #40
228ac     3F 16 06 F6 | 	mov	arg03, #63
228b0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
228b4     08 4E 05 F1 | 	add	fp, #8
228b8     A7 16 02 FB | 	rdlong	arg03, fp
228bc     3F 16 06 F1 | 	add	arg03, #63
228c0     0B 01 48 FC | 	wrbyte	#0, arg03
228c4     0C 4E 05 F1 | 	add	fp, #12
228c8     A7 16 C2 FA | 	rdbyte	arg03, fp
228cc     14 4E 85 F1 | 	sub	fp, #20
228d0     10 16 CE F7 | 	test	arg03, #16 wz
228d4     18 00 90 AD |  if_e	jmp	#LR__3821
228d8     08 4E 05 F1 | 	add	fp, #8
228dc     A7 16 02 FB | 	rdlong	arg03, fp
228e0     08 4E 85 F1 | 	sub	fp, #8
228e4     50 16 06 F1 | 	add	arg03, #80
228e8     0B 03 48 FC | 	wrbyte	#1, arg03
228ec     14 00 90 FD | 	jmp	#LR__3822
228f0                 | LR__3821
228f0     08 4E 05 F1 | 	add	fp, #8
228f4     A7 16 02 FB | 	rdlong	arg03, fp
228f8     08 4E 85 F1 | 	sub	fp, #8
228fc     50 16 06 F1 | 	add	arg03, #80
22900     0B 01 48 FC | 	wrbyte	#0, arg03
22904                 | LR__3822
22904     08 4E 05 F1 | 	add	fp, #8
22908     A7 16 02 FB | 	rdlong	arg03, fp
2290c     04 4E 05 F1 | 	add	fp, #4
22910     A7 14 02 FB | 	rdlong	arg02, fp
22914     48 16 06 F1 | 	add	arg03, #72
22918     0B 15 62 FC | 	wrlong	arg02, arg03
2291c     04 4E 85 F1 | 	sub	fp, #4
22920     A7 1E 02 FB | 	rdlong	local01, fp
22924     08 4E 05 F1 | 	add	fp, #8
22928     A7 12 E2 FA | 	rdword	arg01, fp
2292c     02 4E 05 F1 | 	add	fp, #2
22930     A7 14 E2 FA | 	rdword	arg02, fp
22934     12 4E 85 F1 | 	sub	fp, #18
22938     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0768
2293c     4C 1E 06 F1 | 	add	local01, #76
22940     0F FB 61 FC | 	wrlong	result1, local01
22944                 | '         ent->d_type =  (0) ;
22944                 | '     }
22944                 | '     ent->d_size = finfo.fsize;
22944                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
22944                 | '     return 0;
22944     00 FA 05 F6 | 	mov	result1, #0
22948                 | LR__3823
22948     A7 F0 03 F6 | 	mov	ptra, fp
2294c     B2 00 A0 FD | 	call	#popregs_
22950                 | _fatfs_cc_v_readdir_ret
22950     2D 00 64 FD | 	ret
22954                 | 
22954                 | _fatfs_cc_v_stat
22954     03 4A 05 F6 | 	mov	COUNT_, #3
22958     A8 00 A0 FD | 	call	#pushregs_
2295c     30 F1 07 F1 | 	add	ptra, #304
22960     04 4E 05 F1 | 	add	fp, #4
22964     A7 12 62 FC | 	wrlong	arg01, fp
22968     04 4E 05 F1 | 	add	fp, #4
2296c     A7 14 62 FC | 	wrlong	arg02, fp
22970     08 4E 85 F1 | 	sub	fp, #8
22974     0A 13 02 F6 | 	mov	arg01, arg02
22978     00 14 06 F6 | 	mov	arg02, #0
2297c     30 16 06 F6 | 	mov	arg03, #48
22980     98 00 A0 FD | 	call	#\builtin_bytefill_
22984     04 4E 05 F1 | 	add	fp, #4
22988     A7 FA 01 FB | 	rdlong	result1, fp
2298c     04 4E 85 F1 | 	sub	fp, #4
22990     FD FA C9 FA | 	rdbyte	result1, result1 wz
22994     2C 00 90 AD |  if_e	jmp	#LR__3830
22998     04 4E 05 F1 | 	add	fp, #4
2299c     A7 FA 01 FB | 	rdlong	result1, fp
229a0     04 4E 85 F1 | 	sub	fp, #4
229a4     FD FA C1 FA | 	rdbyte	result1, result1
229a8     2E FA 0D F2 | 	cmp	result1, #46 wz
229ac     04 4E 05 A1 |  if_e	add	fp, #4
229b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
229b4     04 4E 85 A1 |  if_e	sub	fp, #4
229b8     01 1E 06 A1 |  if_e	add	local01, #1
229bc     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
229c0     18 00 90 5D |  if_ne	jmp	#LR__3831
229c4                 | LR__3830
229c4     18 4E 05 F1 | 	add	fp, #24
229c8     A7 20 48 FC | 	wrbyte	#16, fp
229cc     0C 4E 85 F1 | 	sub	fp, #12
229d0     A7 00 68 FC | 	wrlong	#0, fp
229d4     0C 4E 85 F1 | 	sub	fp, #12
229d8     24 00 90 FD | 	jmp	#LR__3832
229dc                 | LR__3831
229dc     04 4E 05 F1 | 	add	fp, #4
229e0     A7 12 02 FB | 	rdlong	arg01, fp
229e4     0C 4E 05 F1 | 	add	fp, #12
229e8     A7 14 02 F6 | 	mov	arg02, fp
229ec     10 4E 85 F1 | 	sub	fp, #16
229f0     AC EB BF FD | 	call	#_fatfs_cc_f_stat
229f4     0C 4E 05 F1 | 	add	fp, #12
229f8     A7 FA 61 FC | 	wrlong	result1, fp
229fc     0C 4E 85 F1 | 	sub	fp, #12
22a00                 | LR__3832
22a00     0C 4E 05 F1 | 	add	fp, #12
22a04     A7 20 0A FB | 	rdlong	local02, fp wz
22a08     0C 4E 85 F1 | 	sub	fp, #12
22a0c     14 00 90 AD |  if_e	jmp	#LR__3833
22a10                 | '         return _set_dos_error(r);
22a10     0C 4E 05 F1 | 	add	fp, #12
22a14     A7 12 02 FB | 	rdlong	arg01, fp
22a18     0C 4E 85 F1 | 	sub	fp, #12
22a1c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22a20     14 01 90 FD | 	jmp	#LR__3834
22a24                 | LR__3833
22a24     2C 4F 05 F1 | 	add	fp, #300
22a28     A7 48 6A FC | 	wrlong	#292, fp
22a2c     14 4F 85 F1 | 	sub	fp, #276
22a30     A7 22 C2 FA | 	rdbyte	local03, fp
22a34     18 4E 85 F1 | 	sub	fp, #24
22a38     01 22 CE F7 | 	test	local03, #1 wz
22a3c     2C 4F 05 51 |  if_ne	add	fp, #300
22a40     A7 22 02 5B |  if_ne	rdlong	local03, fp
22a44     92 22 46 55 |  if_ne	or	local03, #146
22a48     A7 22 62 5C |  if_ne	wrlong	local03, fp
22a4c     2C 4F 85 51 |  if_ne	sub	fp, #300
22a50     18 4E 05 F1 | 	add	fp, #24
22a54     A7 22 C2 FA | 	rdbyte	local03, fp
22a58     18 4E 85 F1 | 	sub	fp, #24
22a5c     10 22 CE F7 | 	test	local03, #16 wz
22a60     2C 4F 05 51 |  if_ne	add	fp, #300
22a64     A7 22 02 5B |  if_ne	rdlong	local03, fp
22a68     08 00 00 5F 
22a6c     49 22 46 55 |  if_ne	or	local03, ##4169
22a70     A7 22 62 5C |  if_ne	wrlong	local03, fp
22a74     2C 4F 85 51 |  if_ne	sub	fp, #300
22a78     08 4E 05 F1 | 	add	fp, #8
22a7c     A7 22 02 FB | 	rdlong	local03, fp
22a80     24 4F 05 F1 | 	add	fp, #292
22a84     A7 20 02 FB | 	rdlong	local02, fp
22a88     08 22 06 F1 | 	add	local03, #8
22a8c     11 21 62 FC | 	wrlong	local02, local03
22a90     24 4F 85 F1 | 	sub	fp, #292
22a94     A7 22 02 FB | 	rdlong	local03, fp
22a98     0C 22 06 F1 | 	add	local03, #12
22a9c     11 03 68 FC | 	wrlong	#1, local03
22aa0     A7 22 02 FB | 	rdlong	local03, fp
22aa4     08 4E 05 F1 | 	add	fp, #8
22aa8     A7 20 02 FB | 	rdlong	local02, fp
22aac     18 22 06 F1 | 	add	local03, #24
22ab0     11 21 62 FC | 	wrlong	local02, local03
22ab4     08 4E 85 F1 | 	sub	fp, #8
22ab8     A7 22 02 FB | 	rdlong	local03, fp
22abc     1C 22 06 F1 | 	add	local03, #28
22ac0     01 00 80 FF 
22ac4     11 01 68 FC | 	wrlong	##512, local03
22ac8     A7 20 02 FB | 	rdlong	local02, fp
22acc     10 23 02 F6 | 	mov	local03, local02
22ad0     18 20 06 F1 | 	add	local02, #24
22ad4     10 21 02 FB | 	rdlong	local02, local02
22ad8     FF 21 06 F1 | 	add	local02, #511
22adc     10 21 52 F6 | 	abs	local02, local02 wc
22ae0     09 20 46 F0 | 	shr	local02, #9
22ae4     10 21 82 F6 | 	negc	local02, local02
22ae8     20 22 06 F1 | 	add	local03, #32
22aec     11 21 62 FC | 	wrlong	local02, local03
22af0     A7 20 02 FB | 	rdlong	local02, fp
22af4     10 23 02 F6 | 	mov	local03, local02
22af8     10 1F 02 F6 | 	mov	local01, local02
22afc     0C 4E 05 F1 | 	add	fp, #12
22b00     A7 12 E2 FA | 	rdword	arg01, fp
22b04     02 4E 05 F1 | 	add	fp, #2
22b08     A7 14 E2 FA | 	rdword	arg02, fp
22b0c     16 4E 85 F1 | 	sub	fp, #22
22b10     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0768
22b14     2C 1E 06 F1 | 	add	local01, #44
22b18     0F FB 61 FC | 	wrlong	result1, local01
22b1c     28 20 06 F1 | 	add	local02, #40
22b20     10 FB 61 FC | 	wrlong	result1, local02
22b24     24 22 06 F1 | 	add	local03, #36
22b28     11 FB 61 FC | 	wrlong	result1, local03
22b2c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
22b2c                 | '     }
22b2c                 | '     buf->st_mode = mode;
22b2c                 | '     buf->st_nlink = 1;
22b2c                 | '     buf->st_size = finfo.fsize;
22b2c                 | '     buf->st_blksize = 512;
22b2c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
22b2c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
22b2c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22b2c                 | '     return r;
22b2c     0C 4E 05 F1 | 	add	fp, #12
22b30     A7 FA 01 FB | 	rdlong	result1, fp
22b34     0C 4E 85 F1 | 	sub	fp, #12
22b38                 | LR__3834
22b38     A7 F0 03 F6 | 	mov	ptra, fp
22b3c     B2 00 A0 FD | 	call	#popregs_
22b40                 | _fatfs_cc_v_stat_ret
22b40     2D 00 64 FD | 	ret
22b44                 | 
22b44                 | _fatfs_cc_v_read
22b44     00 4A 05 F6 | 	mov	COUNT_, #0
22b48     A8 00 A0 FD | 	call	#pushregs_
22b4c     1C F0 07 F1 | 	add	ptra, #28
22b50     04 4E 05 F1 | 	add	fp, #4
22b54     A7 12 62 FC | 	wrlong	arg01, fp
22b58     04 4E 05 F1 | 	add	fp, #4
22b5c     A7 14 62 FC | 	wrlong	arg02, fp
22b60     04 4E 05 F1 | 	add	fp, #4
22b64     A7 16 62 FC | 	wrlong	arg03, fp
22b68     08 4E 85 F1 | 	sub	fp, #8
22b6c     A7 12 02 FB | 	rdlong	arg01, fp
22b70     09 13 0A FB | 	rdlong	arg01, arg01 wz
22b74     0C 4E 05 F1 | 	add	fp, #12
22b78     A7 12 62 FC | 	wrlong	arg01, fp
22b7c     10 4E 85 F1 | 	sub	fp, #16
22b80                 | '         return _seterror( 5 );
22b80     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22b84     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22b88     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22b8c     01 FA 65 A6 |  if_e	neg	result1, #1
22b90     B8 00 90 AD |  if_e	jmp	#LR__3842
22b94     10 4E 05 F1 | 	add	fp, #16
22b98     A7 12 02 FB | 	rdlong	arg01, fp
22b9c     02 00 00 FF 
22ba0     14 12 06 F1 | 	add	arg01, ##1044
22ba4     08 4E 85 F1 | 	sub	fp, #8
22ba8     A7 14 02 FB | 	rdlong	arg02, fp
22bac     04 4E 05 F1 | 	add	fp, #4
22bb0     A7 16 02 FB | 	rdlong	arg03, fp
22bb4     0C 4E 05 F1 | 	add	fp, #12
22bb8     A7 18 02 F6 | 	mov	arg04, fp
22bbc     18 4E 85 F1 | 	sub	fp, #24
22bc0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
22bc4     14 4E 05 F1 | 	add	fp, #20
22bc8     A7 FA 61 FC | 	wrlong	result1, fp
22bcc     14 4E 85 F1 | 	sub	fp, #20
22bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
22bd4     34 00 90 AD |  if_e	jmp	#LR__3840
22bd8     04 4E 05 F1 | 	add	fp, #4
22bdc     A7 18 02 FB | 	rdlong	arg04, fp
22be0     0C 17 02 F6 | 	mov	arg03, arg04
22be4     08 18 06 F1 | 	add	arg04, #8
22be8     0C 19 02 FB | 	rdlong	arg04, arg04
22bec     20 18 46 F5 | 	or	arg04, #32
22bf0     08 16 06 F1 | 	add	arg03, #8
22bf4     0B 19 62 FC | 	wrlong	arg04, arg03
22bf8                 | '         fil->state |=  (0x20) ;
22bf8                 | '         return _set_dos_error(r);
22bf8     10 4E 05 F1 | 	add	fp, #16
22bfc     A7 12 02 FB | 	rdlong	arg01, fp
22c00     14 4E 85 F1 | 	sub	fp, #20
22c04     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22c08     40 00 90 FD | 	jmp	#LR__3842
22c0c                 | LR__3840
22c0c     18 4E 05 F1 | 	add	fp, #24
22c10     A7 FA 09 FB | 	rdlong	result1, fp wz
22c14     18 4E 85 F1 | 	sub	fp, #24
22c18     24 00 90 5D |  if_ne	jmp	#LR__3841
22c1c     04 4E 05 F1 | 	add	fp, #4
22c20     A7 FA 01 FB | 	rdlong	result1, fp
22c24     FD 18 02 F6 | 	mov	arg04, result1
22c28     04 4E 85 F1 | 	sub	fp, #4
22c2c     08 FA 05 F1 | 	add	result1, #8
22c30     FD FA 01 FB | 	rdlong	result1, result1
22c34     10 FA 45 F5 | 	or	result1, #16
22c38     08 18 06 F1 | 	add	arg04, #8
22c3c     0C FB 61 FC | 	wrlong	result1, arg04
22c40                 | LR__3841
22c40                 | '         fil->state |=  (0x10) ;
22c40                 | '     }
22c40                 | '     return x;
22c40     18 4E 05 F1 | 	add	fp, #24
22c44     A7 FA 01 FB | 	rdlong	result1, fp
22c48     18 4E 85 F1 | 	sub	fp, #24
22c4c                 | LR__3842
22c4c     A7 F0 03 F6 | 	mov	ptra, fp
22c50     B2 00 A0 FD | 	call	#popregs_
22c54                 | _fatfs_cc_v_read_ret
22c54     2D 00 64 FD | 	ret
22c58                 | 
22c58                 | _fatfs_cc_v_write
22c58     00 4A 05 F6 | 	mov	COUNT_, #0
22c5c     A8 00 A0 FD | 	call	#pushregs_
22c60     1C F0 07 F1 | 	add	ptra, #28
22c64     04 4E 05 F1 | 	add	fp, #4
22c68     A7 12 62 FC | 	wrlong	arg01, fp
22c6c     04 4E 05 F1 | 	add	fp, #4
22c70     A7 14 62 FC | 	wrlong	arg02, fp
22c74     04 4E 05 F1 | 	add	fp, #4
22c78     A7 16 62 FC | 	wrlong	arg03, fp
22c7c     08 4E 85 F1 | 	sub	fp, #8
22c80     A7 12 02 FB | 	rdlong	arg01, fp
22c84     09 13 0A FB | 	rdlong	arg01, arg01 wz
22c88     0C 4E 05 F1 | 	add	fp, #12
22c8c     A7 12 62 FC | 	wrlong	arg01, fp
22c90     10 4E 85 F1 | 	sub	fp, #16
22c94                 | '         return _seterror( 5 );
22c94     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22c98     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22c9c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22ca0     01 FA 65 A6 |  if_e	neg	result1, #1
22ca4     84 00 90 AD |  if_e	jmp	#LR__3851
22ca8     10 4E 05 F1 | 	add	fp, #16
22cac     A7 12 02 FB | 	rdlong	arg01, fp
22cb0     02 00 00 FF 
22cb4     14 12 06 F1 | 	add	arg01, ##1044
22cb8     08 4E 85 F1 | 	sub	fp, #8
22cbc     A7 14 02 FB | 	rdlong	arg02, fp
22cc0     04 4E 05 F1 | 	add	fp, #4
22cc4     A7 16 02 FB | 	rdlong	arg03, fp
22cc8     0C 4E 05 F1 | 	add	fp, #12
22ccc     A7 18 02 F6 | 	mov	arg04, fp
22cd0     18 4E 85 F1 | 	sub	fp, #24
22cd4     4C D4 BF FD | 	call	#_fatfs_cc_f_write
22cd8     14 4E 05 F1 | 	add	fp, #20
22cdc     A7 FA 61 FC | 	wrlong	result1, fp
22ce0     14 4E 85 F1 | 	sub	fp, #20
22ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
22ce8     34 00 90 AD |  if_e	jmp	#LR__3850
22cec     04 4E 05 F1 | 	add	fp, #4
22cf0     A7 18 02 FB | 	rdlong	arg04, fp
22cf4     0C 17 02 F6 | 	mov	arg03, arg04
22cf8     08 18 06 F1 | 	add	arg04, #8
22cfc     0C 19 02 FB | 	rdlong	arg04, arg04
22d00     20 18 46 F5 | 	or	arg04, #32
22d04     08 16 06 F1 | 	add	arg03, #8
22d08     0B 19 62 FC | 	wrlong	arg04, arg03
22d0c                 | '         fil->state |=  (0x20) ;
22d0c                 | '         return _set_dos_error(r);
22d0c     10 4E 05 F1 | 	add	fp, #16
22d10     A7 12 02 FB | 	rdlong	arg01, fp
22d14     14 4E 85 F1 | 	sub	fp, #20
22d18     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22d1c     0C 00 90 FD | 	jmp	#LR__3851
22d20                 | LR__3850
22d20                 | '     }
22d20                 | '     return x;
22d20     18 4E 05 F1 | 	add	fp, #24
22d24     A7 FA 01 FB | 	rdlong	result1, fp
22d28     18 4E 85 F1 | 	sub	fp, #24
22d2c                 | LR__3851
22d2c     A7 F0 03 F6 | 	mov	ptra, fp
22d30     B2 00 A0 FD | 	call	#popregs_
22d34                 | _fatfs_cc_v_write_ret
22d34     2D 00 64 FD | 	ret
22d38                 | 
22d38                 | _fatfs_cc_v_lseek
22d38     04 4A 05 F6 | 	mov	COUNT_, #4
22d3c     A8 00 A0 FD | 	call	#pushregs_
22d40     0A 1F 02 F6 | 	mov	local01, arg02
22d44     0B 21 02 F6 | 	mov	local02, arg03
22d48     09 23 02 FB | 	rdlong	local03, arg01
22d4c     02 00 00 FF 
22d50     14 22 0E F1 | 	add	local03, ##1044 wz
22d54                 | '         return _seterror( 5 );
22d54     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22d58     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22d5c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22d60     01 FA 65 A6 |  if_e	neg	result1, #1
22d64     4C 00 90 AD |  if_e	jmp	#LR__3862
22d68     00 20 0E F2 | 	cmp	local02, #0 wz
22d6c     24 00 90 AD |  if_e	jmp	#LR__3860
22d70     01 20 0E F2 | 	cmp	local02, #1 wz
22d74     14 22 06 A1 |  if_e	add	local03, #20
22d78     11 25 02 AB |  if_e	rdlong	local04, local03
22d7c     14 22 86 A1 |  if_e	sub	local03, #20
22d80     12 1F 02 A1 |  if_e	add	local01, local04
22d84     0C 22 06 51 |  if_ne	add	local03, #12
22d88     11 25 02 5B |  if_ne	rdlong	local04, local03
22d8c     0C 22 86 51 |  if_ne	sub	local03, #12
22d90     12 1F 02 51 |  if_ne	add	local01, local04
22d94                 | LR__3860
22d94     0F 15 02 F6 | 	mov	arg02, local01
22d98     11 13 02 F6 | 	mov	arg01, local03
22d9c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
22da0     FD 12 0A F6 | 	mov	arg01, result1 wz
22da4     08 00 90 AD |  if_e	jmp	#LR__3861
22da8                 | '         return _set_dos_error(result);
22da8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22dac     04 00 90 FD | 	jmp	#LR__3862
22db0                 | LR__3861
22db0                 | '     }
22db0                 | '     return offset;
22db0     0F FB 01 F6 | 	mov	result1, local01
22db4                 | LR__3862
22db4     A7 F0 03 F6 | 	mov	ptra, fp
22db8     B2 00 A0 FD | 	call	#popregs_
22dbc                 | _fatfs_cc_v_lseek_ret
22dbc     2D 00 64 FD | 	ret
22dc0                 | 
22dc0                 | _fatfs_cc_v_ioctl
22dc0                 | ' {
22dc0                 | '     return _seterror( 10 );
22dc0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
22dc4     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
22dc8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
22dcc     01 FA 65 F6 | 	neg	result1, #1
22dd0                 | _fatfs_cc_v_ioctl_ret
22dd0     2D 00 64 FD | 	ret
22dd4                 | 
22dd4                 | _fatfs_cc_v_mkdir
22dd4     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
22dd8     FD 12 02 F6 | 	mov	arg01, result1
22ddc                 | ' 
22ddc                 | '     r = f_mkdir(name);
22ddc                 | '     return _set_dos_error(r);
22ddc     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22de0                 | _fatfs_cc_v_mkdir_ret
22de0     2D 00 64 FD | 	ret
22de4                 | 
22de4                 | _fatfs_cc_v_remove
22de4     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
22de8     FD 12 02 F6 | 	mov	arg01, result1
22dec                 | ' 
22dec                 | '     r = f_unlink(name);
22dec                 | '     return _set_dos_error(r);
22dec     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22df0                 | _fatfs_cc_v_remove_ret
22df0     2D 00 64 FD | 	ret
22df4                 | 
22df4                 | _fatfs_cc_v_rmdir
22df4     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
22df8     FD 12 02 F6 | 	mov	arg01, result1
22dfc                 | ' 
22dfc                 | '     r = f_unlink(name);
22dfc                 | '     return _set_dos_error(r);
22dfc     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22e00                 | _fatfs_cc_v_rmdir_ret
22e00     2D 00 64 FD | 	ret
22e04                 | 
22e04                 | _fatfs_cc_v_rename
22e04     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
22e08     FD 12 02 F6 | 	mov	arg01, result1
22e0c                 | '     return _set_dos_error(r);
22e0c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22e10                 | _fatfs_cc_v_rename_ret
22e10     2D 00 64 FD | 	ret
22e14                 | 
22e14                 | _fatfs_cc_v_open
22e14     07 4A 05 F6 | 	mov	COUNT_, #7
22e18     A8 00 A0 FD | 	call	#pushregs_
22e1c     09 1F 02 F6 | 	mov	local01, arg01
22e20     0A 21 02 F6 | 	mov	local02, arg02
22e24     0B 23 02 F6 | 	mov	local03, arg03
22e28     03 00 00 FF 
22e2c     3C 12 06 F6 | 	mov	arg01, ##1596
22e30                 | '     return _gc_alloc(size);
22e30     10 14 06 F6 | 	mov	arg02, #16
22e34     A0 58 BF FD | 	call	#__system___gc_doalloc
22e38     FD 24 0A F6 | 	mov	local04, result1 wz
22e3c                 | '       return _seterror( 7 );
22e3c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22e40     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22e44     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22e48     01 FA 65 A6 |  if_e	neg	result1, #1
22e4c     98 00 90 AD |  if_e	jmp	#LR__3876
22e50     12 13 02 F6 | 	mov	arg01, local04
22e54     00 14 06 F6 | 	mov	arg02, #0
22e58     03 00 00 FF 
22e5c     3C 16 06 F6 | 	mov	arg03, ##1596
22e60     98 00 A0 FD | 	call	#\builtin_bytefill_
22e64                 | '   switch (flags & 3) {
22e64     11 27 02 F6 | 	mov	local05, local03
22e68     03 26 0E F5 | 	and	local05, #3 wz
22e6c     0C 00 90 AD |  if_e	jmp	#LR__3870
22e70     01 26 0E F2 | 	cmp	local05, #1 wz
22e74     0C 00 90 AD |  if_e	jmp	#LR__3871
22e78     10 00 90 FD | 	jmp	#LR__3872
22e7c                 | LR__3870
22e7c     01 28 06 F6 | 	mov	local06, #1
22e80                 | '       fs_flags =  0x01 ;
22e80                 | '       break;
22e80     0C 00 90 FD | 	jmp	#LR__3873
22e84                 | LR__3871
22e84     02 28 06 F6 | 	mov	local06, #2
22e88                 | '       fs_flags =  0x02 ;
22e88                 | '       break;
22e88     04 00 90 FD | 	jmp	#LR__3873
22e8c                 | LR__3872
22e8c     03 28 06 F6 | 	mov	local06, #3
22e90                 | '       fs_flags =  0x01  |  0x02 ;
22e90                 | '       break;
22e90                 | LR__3873
22e90     08 22 CE F7 | 	test	local03, #8 wz
22e94     18 28 46 55 |  if_ne	or	local06, #24
22e98     08 00 90 5D |  if_ne	jmp	#LR__3874
22e9c     20 22 CE F7 | 	test	local03, #32 wz
22ea0     30 28 46 55 |  if_ne	or	local06, #48
22ea4                 | LR__3874
22ea4     02 00 00 FF 
22ea8     14 24 06 F1 | 	add	local04, ##1044
22eac     12 13 02 F6 | 	mov	arg01, local04
22eb0     02 00 00 FF 
22eb4     14 24 86 F1 | 	sub	local04, ##1044
22eb8     10 15 02 F6 | 	mov	arg02, local02
22ebc     14 17 02 F6 | 	mov	arg03, local06
22ec0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
22ec4     FD 2A 0A F6 | 	mov	local07, result1 wz
22ec8     14 00 90 AD |  if_e	jmp	#LR__3875
22ecc     12 13 02 F6 | 	mov	arg01, local04
22ed0                 | '     return _gc_free(ptr);
22ed0     10 59 BF FD | 	call	#__system___gc_free
22ed4                 | '     free(f);
22ed4                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22ed4                 | '     return _set_dos_error(r);
22ed4     15 13 02 F6 | 	mov	arg01, local07
22ed8     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22edc     08 00 90 FD | 	jmp	#LR__3876
22ee0                 | LR__3875
22ee0     0F 25 62 FC | 	wrlong	local04, local01
22ee4                 | '   }
22ee4                 | '   fil->vfsdata = f;
22ee4                 | '   return 0;
22ee4     00 FA 05 F6 | 	mov	result1, #0
22ee8                 | LR__3876
22ee8     A7 F0 03 F6 | 	mov	ptra, fp
22eec     B2 00 A0 FD | 	call	#popregs_
22ef0                 | _fatfs_cc_v_open_ret
22ef0     2D 00 64 FD | 	ret
22ef4                 | 
22ef4                 | _fatfs_cc_v_flush
22ef4     09 13 02 FB | 	rdlong	arg01, arg01
22ef8     02 00 00 FF 
22efc     14 12 0E F1 | 	add	arg01, ##1044 wz
22f00                 | '         return _seterror( 5 );
22f00     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22f04     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22f08     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22f0c     01 FA 65 A6 |  if_e	neg	result1, #1
22f10     0C 00 90 AD |  if_e	jmp	#LR__3880
22f14     00 DA BF FD | 	call	#_fatfs_cc_f_sync
22f18     FD 12 02 F6 | 	mov	arg01, result1
22f1c                 | '     }
22f1c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22f1c                 | '     result = f_sync(f);
22f1c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22f1c                 | '     return _set_dos_error(result);
22f1c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0770
22f20                 | LR__3880
22f20                 | _fatfs_cc_v_flush_ret
22f20     2D 00 64 FD | 	ret
22f24                 | 
22f24                 | _fatfs_cc_v_init
22f24                 | ' {
22f24                 | '     return 0;
22f24     00 FA 05 F6 | 	mov	result1, #0
22f28                 | _fatfs_cc_v_init_ret
22f28     2D 00 64 FD | 	ret
22f2c                 | 
22f2c                 | _fatfs_cc_v_deinit
22f2c     1F 01 00 FF 
22f30     9C 14 06 F6 | 	mov	arg02, ##@LR__4076
22f34     00 12 06 F6 | 	mov	arg01, #0
22f38     00 16 06 F6 | 	mov	arg03, #0
22f3c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
22f40     01 00 00 FF 
22f44     08 E4 05 F1 | 	add	objptr, ##520
22f48     F2 12 02 FB | 	rdlong	arg01, objptr
22f4c     04 E4 05 F1 | 	add	objptr, #4
22f50     F2 14 02 FB | 	rdlong	arg02, objptr
22f54     01 00 00 FF 
22f58     0C E4 85 F1 | 	sub	objptr, ##524
22f5c     A0 43 BF FD | 	call	#__system___freepins
22f60                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22f60                 | '     _freepins(f_pinmask);
22f60                 | '     return 0;
22f60     00 FA 05 F6 | 	mov	result1, #0
22f64                 | _fatfs_cc_v_deinit_ret
22f64     2D 00 64 FD | 	ret
22f68                 | 
22f68                 | _fatfs_cc_get_vfs
22f68     01 4A 05 F6 | 	mov	COUNT_, #1
22f6c     A8 00 A0 FD | 	call	#pushregs_
22f70     09 1F 02 F6 | 	mov	local01, arg01
22f74     50 12 06 F6 | 	mov	arg01, #80
22f78     2C 57 BF FD | 	call	#__system___gc_alloc_managed
22f7c     FD 12 02 F6 | 	mov	arg01, result1
22f80     F2 FA 01 F6 | 	mov	result1, objptr
22f84     00 C0 02 FF 
22f88     00 FA 45 F5 | 	or	result1, ##92274688
22f8c     09 FB 61 FC | 	wrlong	result1, arg01
22f90     F2 FA 01 F6 | 	mov	result1, objptr
22f94     00 C8 02 FF 
22f98     00 FA 45 F5 | 	or	result1, ##93323264
22f9c     04 12 06 F1 | 	add	arg01, #4
22fa0     09 FB 61 FC | 	wrlong	result1, arg01
22fa4     F2 FA 01 F6 | 	mov	result1, objptr
22fa8     00 D0 02 FF 
22fac     00 FA 45 F5 | 	or	result1, ##94371840
22fb0     04 12 06 F1 | 	add	arg01, #4
22fb4     09 FB 61 FC | 	wrlong	result1, arg01
22fb8     F2 FA 01 F6 | 	mov	result1, objptr
22fbc     00 D8 02 FF 
22fc0     00 FA 45 F5 | 	or	result1, ##95420416
22fc4     04 12 06 F1 | 	add	arg01, #4
22fc8     09 FB 61 FC | 	wrlong	result1, arg01
22fcc     F2 FA 01 F6 | 	mov	result1, objptr
22fd0     00 E0 02 FF 
22fd4     00 FA 45 F5 | 	or	result1, ##96468992
22fd8     04 12 06 F1 | 	add	arg01, #4
22fdc     09 FB 61 FC | 	wrlong	result1, arg01
22fe0     04 12 06 F1 | 	add	arg01, #4
22fe4     09 01 68 FC | 	wrlong	#0, arg01
22fe8     04 12 06 F1 | 	add	arg01, #4
22fec     09 1F 62 FC | 	wrlong	local01, arg01
22ff0     04 12 06 F1 | 	add	arg01, #4
22ff4     09 01 68 FC | 	wrlong	#0, arg01
22ff8     F2 FA 01 F6 | 	mov	result1, objptr
22ffc     00 E8 02 FF 
23000     00 FA 45 F5 | 	or	result1, ##97517568
23004     04 12 06 F1 | 	add	arg01, #4
23008     09 FB 61 FC | 	wrlong	result1, arg01
2300c     F2 FA 01 F6 | 	mov	result1, objptr
23010     00 F0 02 FF 
23014     00 FA 45 F5 | 	or	result1, ##98566144
23018     04 12 06 F1 | 	add	arg01, #4
2301c     09 FB 61 FC | 	wrlong	result1, arg01
23020     F2 FA 01 F6 | 	mov	result1, objptr
23024     00 F8 02 FF 
23028     00 FA 45 F5 | 	or	result1, ##99614720
2302c     04 12 06 F1 | 	add	arg01, #4
23030     09 FB 61 FC | 	wrlong	result1, arg01
23034     F2 FA 01 F6 | 	mov	result1, objptr
23038     39 FA 25 F4 | 	bith	result1, #57
2303c     04 12 06 F1 | 	add	arg01, #4
23040     09 FB 61 FC | 	wrlong	result1, arg01
23044     F2 FA 01 F6 | 	mov	result1, objptr
23048     00 08 03 FF 
2304c     00 FA 45 F5 | 	or	result1, ##101711872
23050     04 12 06 F1 | 	add	arg01, #4
23054     09 FB 61 FC | 	wrlong	result1, arg01
23058     F2 FA 01 F6 | 	mov	result1, objptr
2305c     00 10 03 FF 
23060     00 FA 45 F5 | 	or	result1, ##102760448
23064     04 12 06 F1 | 	add	arg01, #4
23068     09 FB 61 FC | 	wrlong	result1, arg01
2306c     F2 FA 01 F6 | 	mov	result1, objptr
23070     00 18 03 FF 
23074     00 FA 45 F5 | 	or	result1, ##103809024
23078     04 12 06 F1 | 	add	arg01, #4
2307c     09 FB 61 FC | 	wrlong	result1, arg01
23080     F2 FA 01 F6 | 	mov	result1, objptr
23084     00 20 03 FF 
23088     00 FA 45 F5 | 	or	result1, ##104857600
2308c     04 12 06 F1 | 	add	arg01, #4
23090     09 FB 61 FC | 	wrlong	result1, arg01
23094     F2 FA 01 F6 | 	mov	result1, objptr
23098     00 28 03 FF 
2309c     00 FA 45 F5 | 	or	result1, ##105906176
230a0     04 12 06 F1 | 	add	arg01, #4
230a4     09 FB 61 FC | 	wrlong	result1, arg01
230a8     F2 FA 01 F6 | 	mov	result1, objptr
230ac     00 30 03 FF 
230b0     00 FA 45 F5 | 	or	result1, ##106954752
230b4     04 12 06 F1 | 	add	arg01, #4
230b8     09 FB 61 FC | 	wrlong	result1, arg01
230bc     F2 FA 01 F6 | 	mov	result1, objptr
230c0     00 38 03 FF 
230c4     00 FA 45 F5 | 	or	result1, ##108003328
230c8     04 12 06 F1 | 	add	arg01, #4
230cc     09 FB 61 FC | 	wrlong	result1, arg01
230d0     F2 FA 01 F6 | 	mov	result1, objptr
230d4     00 40 03 FF 
230d8     00 FA 45 F5 | 	or	result1, ##109051904
230dc     04 12 06 F1 | 	add	arg01, #4
230e0     09 FB 61 FC | 	wrlong	result1, arg01
230e4     4C 12 86 F1 | 	sub	arg01, #76
230e8                 | ' 
230e8                 | '     v->close = &v_close;
230e8                 | '     v->read = &v_read;
230e8                 | '     v->write = &v_write;
230e8                 | '     v->lseek = &v_lseek;
230e8                 | '     v->ioctl = &v_ioctl;
230e8                 | '     v->flush = 0;
230e8                 | '     v->vfs_data = ptr;
230e8                 | '     v->reserved = 0;
230e8                 | ' 
230e8                 | '     v->open = &v_open;
230e8                 | '     v->creat = &v_creat;
230e8                 | '     v->opendir = &v_opendir;
230e8                 | '     v->closedir = &v_closedir;
230e8                 | '     v->readdir = &v_readdir;
230e8                 | '     v->stat = &v_stat;
230e8                 | ' 
230e8                 | '     v->mkdir = &v_mkdir;
230e8                 | '     v->rmdir = &v_rmdir;
230e8                 | ' 
230e8                 | '     v->remove = &v_remove;
230e8                 | '     v->rename = &v_rename;
230e8                 | ' 
230e8                 | '     v->init = &v_init;
230e8                 | '     v->deinit = &v_deinit;
230e8                 | ' 
230e8                 | '     return v;
230e8     09 FB 01 F6 | 	mov	result1, arg01
230ec     A7 F0 03 F6 | 	mov	ptra, fp
230f0     B2 00 A0 FD | 	call	#popregs_
230f4                 | _fatfs_cc_get_vfs_ret
230f4     2D 00 64 FD | 	ret
230f8                 | 
230f8                 | _fatfs_cc_xmit_mmc_0917
230f8     01 00 00 FF 
230fc     10 E4 05 F1 | 	add	objptr, ##528
23100     F2 00 02 FB | 	rdlong	_var01, objptr
23104     08 E4 05 F1 | 	add	objptr, #8
23108     F2 02 02 FB | 	rdlong	_var02, objptr
2310c     01 00 00 FF 
23110     18 E4 85 F1 | 	sub	objptr, ##536
23114     40 02 62 FD | 	dirl	_var02
23118     28 02 64 FD | 	setq	#1
2311c     09 05 02 FB | 	rdlong	_var03, arg01
23120     69 04 62 FD | 	rev	_var03
23124     1B 04 FE F9 | 	movbyts	_var03, #27
23128     01 05 22 FC | 	wypin	_var03, _var02
2312c     0A 05 02 F6 | 	mov	_var03, arg02
23130     02 14 4E F0 | 	shr	arg02, #2 wz
23134     03 04 66 F0 | 	shl	_var03, #3
23138     00 05 22 FC | 	wypin	_var03, _var01
2313c     41 02 62 FD | 	dirh	_var02
23140     08 12 06 F1 | 	add	arg01, #8
23144     69 06 62 FD | 	rev	_var04
23148     1B 06 FE F9 | 	movbyts	_var04, #27
2314c                 | LR__3890
2314c     01 07 22 5C |  if_ne	wypin	_var04, _var02
23150     09 07 02 5B |  if_ne	rdlong	_var04, arg01
23154     04 12 06 51 |  if_ne	add	arg01, #4
23158     69 06 62 5D |  if_ne	rev	_var04
2315c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
23160                 | LR__3891
23160     40 02 72 5D |  if_ne	testp	_var02 wc
23164     F8 FF 9F 1D |  if_a	jmp	#LR__3891
23168     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3890
2316c                 | LR__3892
2316c     40 00 72 FD | 	testp	_var01 wc
23170     F8 FF 9F 3D |  if_ae	jmp	#LR__3892
23174     40 02 62 FD | 	dirl	_var02
23178     FF FF FF FF 
2317c     01 FF 2B FC | 	wypin	##-1, _var02
23180     41 02 62 FD | 	dirh	_var02
23184                 | _fatfs_cc_xmit_mmc_0917_ret
23184     2D 00 64 FD | 	ret
23188                 | 
23188                 | _fatfs_cc_rcvr_mmc_0924
23188     01 00 00 FF 
2318c     10 E4 05 F1 | 	add	objptr, ##528
23190     F2 00 02 FB | 	rdlong	_var01, objptr
23194     0C E4 05 F1 | 	add	objptr, #12
23198     F2 02 02 FB | 	rdlong	_var02, objptr
2319c     01 00 00 FF 
231a0     1C E4 85 F1 | 	sub	objptr, ##540
231a4     01 03 08 FC | 	akpin	_var02
231a8     0A 05 0A F6 | 	mov	_var03, arg02 wz
231ac     02 04 4E F0 | 	shr	_var03, #2 wz
231b0     30 00 90 AD |  if_e	jmp	#LR__3902
231b4     02 07 02 F6 | 	mov	_var04, _var03
231b8     05 06 66 F0 | 	shl	_var04, #5
231bc     00 07 22 FC | 	wypin	_var04, _var01
231c0     01 7F 18 FC | 	wxpin	#63, _var02
231c4                 | LR__3900
231c4                 | LR__3901
231c4     40 02 72 FD | 	testp	_var02 wc
231c8     F8 FF 9F 3D |  if_ae	jmp	#LR__3901
231cc     01 07 8A FA | 	rdpin	_var04, _var02
231d0     69 06 62 FD | 	rev	_var04
231d4     1B 06 FE F9 | 	movbyts	_var04, #27
231d8     09 07 62 FC | 	wrlong	_var04, arg01
231dc     04 12 06 F1 | 	add	arg01, #4
231e0     F8 05 6E FB | 	djnz	_var03, #LR__3900
231e4                 | LR__3902
231e4     03 14 0E F5 | 	and	arg02, #3 wz
231e8     24 00 90 AD |  if_e	jmp	#LR__3905
231ec     01 4F 18 FC | 	wxpin	#39, _var02
231f0                 | LR__3903
231f0     00 11 28 FC | 	wypin	#8, _var01
231f4                 | LR__3904
231f4     40 02 72 FD | 	testp	_var02 wc
231f8     F8 FF 9F 3D |  if_ae	jmp	#LR__3904
231fc     01 07 8A FA | 	rdpin	_var04, _var02
23200     69 06 62 FD | 	rev	_var04
23204     09 07 42 FC | 	wrbyte	_var04, arg01
23208     01 12 06 F1 | 	add	arg01, #1
2320c     F8 15 6E FB | 	djnz	arg02, #LR__3903
23210                 | LR__3905
23210                 | _fatfs_cc_rcvr_mmc_0924_ret
23210     2D 00 64 FD | 	ret
23214                 | 
23214                 | _fatfs_cc_wait_ready_0928
23214     01 4A 05 F6 | 	mov	COUNT_, #1
23218     A8 00 A0 FD | 	call	#pushregs_
2321c     10 F0 07 F1 | 	add	ptra, #16
23220     1A FA 61 FD | 	getct	result1
23224     08 4E 05 F1 | 	add	fp, #8
23228     A7 FA 61 FC | 	wrlong	result1, fp
2322c     14 1E 06 FB | 	rdlong	local01, #20
23230     01 1E 46 F0 | 	shr	local01, #1
23234     04 4E 05 F1 | 	add	fp, #4
23238     A7 1E 62 FC | 	wrlong	local01, fp
2323c     0C 4E 85 F1 | 	sub	fp, #12
23240                 | ' {
23240                 | ' 	BYTE d;
23240                 | ' 	UINT tmr, tmout;
23240                 | ' 
23240                 | ' 	tmr = _cnt();
23240                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23240                 | ' 	for(;;) {
23240                 | LR__3910
23240     04 4E 05 F1 | 	add	fp, #4
23244     A7 12 02 F6 | 	mov	arg01, fp
23248     04 4E 85 F1 | 	sub	fp, #4
2324c     01 14 06 F6 | 	mov	arg02, #1
23250     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23254     04 4E 05 F1 | 	add	fp, #4
23258     A7 1E C2 FA | 	rdbyte	local01, fp
2325c     04 4E 85 F1 | 	sub	fp, #4
23260     FF 1E 0E F2 | 	cmp	local01, #255 wz
23264     01 FA 05 A6 |  if_e	mov	result1, #1
23268     28 00 90 AD |  if_e	jmp	#LR__3911
2326c     1A FA 61 FD | 	getct	result1
23270     08 4E 05 F1 | 	add	fp, #8
23274     A7 1E 02 FB | 	rdlong	local01, fp
23278     0F FB 81 F1 | 	sub	result1, local01
2327c     04 4E 05 F1 | 	add	fp, #4
23280     A7 1E 02 FB | 	rdlong	local01, fp
23284     0C 4E 85 F1 | 	sub	fp, #12
23288     0F FB 11 F2 | 	cmp	result1, local01 wc
2328c     00 FA 05 36 |  if_ae	mov	result1, #0
23290     AC FF 9F CD |  if_b	jmp	#LR__3910
23294                 | LR__3911
23294     A7 F0 03 F6 | 	mov	ptra, fp
23298     B2 00 A0 FD | 	call	#popregs_
2329c                 | _fatfs_cc_wait_ready_0928_ret
2329c     2D 00 64 FD | 	ret
232a0                 | 
232a0                 | _fatfs_cc_deselect_0934
232a0     00 4A 05 F6 | 	mov	COUNT_, #0
232a4     A8 00 A0 FD | 	call	#pushregs_
232a8     14 F0 07 F1 | 	add	ptra, #20
232ac     01 00 00 FF 
232b0     14 E4 05 F1 | 	add	objptr, ##532
232b4     F2 14 02 FB | 	rdlong	arg02, objptr
232b8     04 4E 05 F1 | 	add	fp, #4
232bc     A7 14 62 FC | 	wrlong	arg02, fp
232c0     04 E4 85 F1 | 	sub	objptr, #4
232c4     F2 14 02 FB | 	rdlong	arg02, objptr
232c8     04 4E 05 F1 | 	add	fp, #4
232cc     A7 14 62 FC | 	wrlong	arg02, fp
232d0     08 E4 05 F1 | 	add	objptr, #8
232d4     F2 14 02 FB | 	rdlong	arg02, objptr
232d8     04 4E 05 F1 | 	add	fp, #4
232dc     A7 14 62 FC | 	wrlong	arg02, fp
232e0     04 E4 05 F1 | 	add	objptr, #4
232e4     F2 14 02 FB | 	rdlong	arg02, objptr
232e8     01 00 00 FF 
232ec     1C E4 85 F1 | 	sub	objptr, ##540
232f0     04 4E 05 F1 | 	add	fp, #4
232f4     A7 14 62 FC | 	wrlong	arg02, fp
232f8     0C 4E 85 F1 | 	sub	fp, #12
232fc     A7 12 02 FB | 	rdlong	arg01, fp
23300     04 4E 85 F1 | 	sub	fp, #4
23304     59 12 62 FD | 	drvh	arg01
23308     1F 20 64 FD | 	waitx	#16
2330c     A7 12 02 F6 | 	mov	arg01, fp
23310     01 14 06 F6 | 	mov	arg02, #1
23314     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23318     A7 F0 03 F6 | 	mov	ptra, fp
2331c     B2 00 A0 FD | 	call	#popregs_
23320                 | _fatfs_cc_deselect_0934_ret
23320     2D 00 64 FD | 	ret
23324                 | 
23324                 | _fatfs_cc_select_0938
23324     00 4A 05 F6 | 	mov	COUNT_, #0
23328     A8 00 A0 FD | 	call	#pushregs_
2332c     10 F0 07 F1 | 	add	ptra, #16
23330     01 00 00 FF 
23334     14 E4 05 F1 | 	add	objptr, ##532
23338     F2 14 02 FB | 	rdlong	arg02, objptr
2333c     08 4E 05 F1 | 	add	fp, #8
23340     A7 14 62 FC | 	wrlong	arg02, fp
23344     08 E4 05 F1 | 	add	objptr, #8
23348     F2 12 02 FB | 	rdlong	arg01, objptr
2334c     01 00 00 FF 
23350     1C E4 85 F1 | 	sub	objptr, ##540
23354     04 4E 05 F1 | 	add	fp, #4
23358     A7 12 62 FC | 	wrlong	arg01, fp
2335c     50 12 62 FD | 	fltl	arg01
23360     04 4E 85 F1 | 	sub	fp, #4
23364     A7 12 02 FB | 	rdlong	arg01, fp
23368     58 12 62 FD | 	drvl	arg01
2336c     1F 20 64 FD | 	waitx	#16
23370     04 4E 05 F1 | 	add	fp, #4
23374     A7 12 02 FB | 	rdlong	arg01, fp
23378     41 12 62 FD | 	dirh	arg01
2337c     08 4E 85 F1 | 	sub	fp, #8
23380     A7 12 02 F6 | 	mov	arg01, fp
23384     04 4E 85 F1 | 	sub	fp, #4
23388     01 14 06 F6 | 	mov	arg02, #1
2338c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23390     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0928
23394     00 FA 0D F2 | 	cmp	result1, #0 wz
23398     01 FA 05 56 |  if_ne	mov	result1, #1
2339c     08 00 90 5D |  if_ne	jmp	#LR__3920
233a0     FC FE BF FD | 	call	#_fatfs_cc_deselect_0934
233a4                 | ' 
233a4                 | ' 	deselect();
233a4                 | ' 	return 0;
233a4     00 FA 05 F6 | 	mov	result1, #0
233a8                 | LR__3920
233a8     A7 F0 03 F6 | 	mov	ptra, fp
233ac     B2 00 A0 FD | 	call	#popregs_
233b0                 | _fatfs_cc_select_0938_ret
233b0     2D 00 64 FD | 	ret
233b4                 | 
233b4                 | _fatfs_cc_rcvr_datablock_0942
233b4     01 4A 05 F6 | 	mov	COUNT_, #1
233b8     A8 00 A0 FD | 	call	#pushregs_
233bc     18 F0 07 F1 | 	add	ptra, #24
233c0     04 4E 05 F1 | 	add	fp, #4
233c4     A7 12 62 FC | 	wrlong	arg01, fp
233c8     04 4E 05 F1 | 	add	fp, #4
233cc     A7 14 62 FC | 	wrlong	arg02, fp
233d0     1A FA 61 FD | 	getct	result1
233d4     08 4E 05 F1 | 	add	fp, #8
233d8     A7 FA 61 FC | 	wrlong	result1, fp
233dc     14 1E 06 FB | 	rdlong	local01, #20
233e0     03 1E 46 F0 | 	shr	local01, #3
233e4     04 4E 05 F1 | 	add	fp, #4
233e8     A7 1E 62 FC | 	wrlong	local01, fp
233ec     14 4E 85 F1 | 	sub	fp, #20
233f0                 | ' 	BYTE *buff,
233f0                 | ' 	UINT btr
233f0                 | ' )
233f0                 | ' {
233f0                 | ' 	BYTE d[2];
233f0                 | ' 	UINT tmr, tmout;
233f0                 | ' 
233f0                 | ' 	tmr = _cnt();
233f0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
233f0                 | ' 	for(;;) {
233f0                 | LR__3930
233f0     0C 4E 05 F1 | 	add	fp, #12
233f4     A7 12 02 F6 | 	mov	arg01, fp
233f8     0C 4E 85 F1 | 	sub	fp, #12
233fc     01 14 06 F6 | 	mov	arg02, #1
23400     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23404     0C 4E 05 F1 | 	add	fp, #12
23408     A7 1E C2 FA | 	rdbyte	local01, fp
2340c     0C 4E 85 F1 | 	sub	fp, #12
23410     FF 1E 0E F2 | 	cmp	local01, #255 wz
23414     28 00 90 5D |  if_ne	jmp	#LR__3931
23418     1A FA 61 FD | 	getct	result1
2341c     FD 1E 02 F6 | 	mov	local01, result1
23420     10 4E 05 F1 | 	add	fp, #16
23424     A7 14 02 FB | 	rdlong	arg02, fp
23428     0A 1F 82 F1 | 	sub	local01, arg02
2342c     04 4E 05 F1 | 	add	fp, #4
23430     A7 14 02 FB | 	rdlong	arg02, fp
23434     14 4E 85 F1 | 	sub	fp, #20
23438     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2343c     B0 FF 9F CD |  if_b	jmp	#LR__3930
23440                 | LR__3931
23440     0C 4E 05 F1 | 	add	fp, #12
23444     A7 1E C2 FA | 	rdbyte	local01, fp
23448     0C 4E 85 F1 | 	sub	fp, #12
2344c     FE 1E 0E F2 | 	cmp	local01, #254 wz
23450     00 FA 05 56 |  if_ne	mov	result1, #0
23454     30 00 90 5D |  if_ne	jmp	#LR__3932
23458     04 4E 05 F1 | 	add	fp, #4
2345c     A7 12 02 FB | 	rdlong	arg01, fp
23460     04 4E 05 F1 | 	add	fp, #4
23464     A7 14 02 FB | 	rdlong	arg02, fp
23468     08 4E 85 F1 | 	sub	fp, #8
2346c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23470     0C 4E 05 F1 | 	add	fp, #12
23474     A7 12 02 F6 | 	mov	arg01, fp
23478     0C 4E 85 F1 | 	sub	fp, #12
2347c     02 14 06 F6 | 	mov	arg02, #2
23480     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23484                 | ' 
23484                 | ' 	rcvr_mmc(buff, btr);
23484                 | ' 	rcvr_mmc(d, 2);
23484                 | ' 
23484                 | ' 	return 1;
23484     01 FA 05 F6 | 	mov	result1, #1
23488                 | LR__3932
23488     A7 F0 03 F6 | 	mov	ptra, fp
2348c     B2 00 A0 FD | 	call	#popregs_
23490                 | _fatfs_cc_rcvr_datablock_0942_ret
23490     2D 00 64 FD | 	ret
23494                 | 
23494                 | _fatfs_cc_xmit_datablock_0944
23494     00 4A 05 F6 | 	mov	COUNT_, #0
23498     A8 00 A0 FD | 	call	#pushregs_
2349c     10 F0 07 F1 | 	add	ptra, #16
234a0     04 4E 05 F1 | 	add	fp, #4
234a4     A7 12 62 FC | 	wrlong	arg01, fp
234a8     04 4E 05 F1 | 	add	fp, #4
234ac     A7 14 42 FC | 	wrbyte	arg02, fp
234b0     08 4E 85 F1 | 	sub	fp, #8
234b4     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0928
234b8     00 FA 0D F2 | 	cmp	result1, #0 wz
234bc     00 FA 05 A6 |  if_e	mov	result1, #0
234c0     90 00 90 AD |  if_e	jmp	#LR__3941
234c4     08 4E 05 F1 | 	add	fp, #8
234c8     A7 14 C2 FA | 	rdbyte	arg02, fp
234cc     04 4E 05 F1 | 	add	fp, #4
234d0     A7 14 42 FC | 	wrbyte	arg02, fp
234d4     A7 12 02 F6 | 	mov	arg01, fp
234d8     0C 4E 85 F1 | 	sub	fp, #12
234dc     01 14 06 F6 | 	mov	arg02, #1
234e0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0917
234e4     08 4E 05 F1 | 	add	fp, #8
234e8     A7 14 C2 FA | 	rdbyte	arg02, fp
234ec     08 4E 85 F1 | 	sub	fp, #8
234f0     FD 14 0E F2 | 	cmp	arg02, #253 wz
234f4     58 00 90 AD |  if_e	jmp	#LR__3940
234f8     04 4E 05 F1 | 	add	fp, #4
234fc     A7 12 02 FB | 	rdlong	arg01, fp
23500     04 4E 85 F1 | 	sub	fp, #4
23504     09 14 C6 F9 | 	decod	arg02, #9
23508     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0917
2350c     0C 4E 05 F1 | 	add	fp, #12
23510     A7 12 02 F6 | 	mov	arg01, fp
23514     0C 4E 85 F1 | 	sub	fp, #12
23518     02 14 06 F6 | 	mov	arg02, #2
2351c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23520     0C 4E 05 F1 | 	add	fp, #12
23524     A7 12 02 F6 | 	mov	arg01, fp
23528     0C 4E 85 F1 | 	sub	fp, #12
2352c     01 14 06 F6 | 	mov	arg02, #1
23530     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23534     0C 4E 05 F1 | 	add	fp, #12
23538     A7 14 C2 FA | 	rdbyte	arg02, fp
2353c     0C 4E 85 F1 | 	sub	fp, #12
23540     1F 14 06 F5 | 	and	arg02, #31
23544     05 14 0E F2 | 	cmp	arg02, #5 wz
23548                 | ' 			return 0;
23548     00 FA 05 56 |  if_ne	mov	result1, #0
2354c     04 00 90 5D |  if_ne	jmp	#LR__3941
23550                 | LR__3940
23550                 | ' 	}
23550                 | ' 
23550                 | ' 	return 1;
23550     01 FA 05 F6 | 	mov	result1, #1
23554                 | LR__3941
23554     A7 F0 03 F6 | 	mov	ptra, fp
23558     B2 00 A0 FD | 	call	#popregs_
2355c                 | _fatfs_cc_xmit_datablock_0944_ret
2355c     2D 00 64 FD | 	ret
23560                 | 
23560                 | _fatfs_cc_send_cmd_0948
23560     01 4A 05 F6 | 	mov	COUNT_, #1
23564     A8 00 A0 FD | 	call	#pushregs_
23568     1C F0 07 F1 | 	add	ptra, #28
2356c                 | _fatfs_cc_send_cmd_0948_enter
2356c     04 4E 05 F1 | 	add	fp, #4
23570     A7 12 42 FC | 	wrbyte	arg01, fp
23574     04 4E 05 F1 | 	add	fp, #4
23578     A7 14 62 FC | 	wrlong	arg02, fp
2357c     04 4E 85 F1 | 	sub	fp, #4
23580     A7 FA C1 FA | 	rdbyte	result1, fp
23584     04 4E 85 F1 | 	sub	fp, #4
23588     80 FA CD F7 | 	test	result1, #128 wz
2358c     44 00 90 AD |  if_e	jmp	#LR__3950
23590     04 4E 05 F1 | 	add	fp, #4
23594     A7 14 C2 FA | 	rdbyte	arg02, fp
23598     7F 14 06 F5 | 	and	arg02, #127
2359c     A7 14 42 FC | 	wrbyte	arg02, fp
235a0     04 4E 85 F1 | 	sub	fp, #4
235a4     37 12 06 F6 | 	mov	arg01, #55
235a8     00 14 06 F6 | 	mov	arg02, #0
235ac     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0948
235b0     0C 4E 05 F1 | 	add	fp, #12
235b4     A7 FA 41 FC | 	wrbyte	result1, fp
235b8     A7 14 C2 FA | 	rdbyte	arg02, fp
235bc     0C 4E 85 F1 | 	sub	fp, #12
235c0     02 14 16 F2 | 	cmp	arg02, #2 wc
235c4     0C 4E 05 31 |  if_ae	add	fp, #12
235c8     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
235cc     0C 4E 85 31 |  if_ae	sub	fp, #12
235d0     6C 01 90 3D |  if_ae	jmp	#LR__3954
235d4                 | LR__3950
235d4     04 4E 05 F1 | 	add	fp, #4
235d8     A7 14 C2 FA | 	rdbyte	arg02, fp
235dc     04 4E 85 F1 | 	sub	fp, #4
235e0     0C 14 0E F2 | 	cmp	arg02, #12 wz
235e4     14 00 90 AD |  if_e	jmp	#LR__3951
235e8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0934
235ec     34 FD BF FD | 	call	#_fatfs_cc_select_0938
235f0     00 FA 0D F2 | 	cmp	result1, #0 wz
235f4     FF FA 05 A6 |  if_e	mov	result1, #255
235f8     44 01 90 AD |  if_e	jmp	#LR__3954
235fc                 | LR__3951
235fc     04 4E 05 F1 | 	add	fp, #4
23600     A7 14 C2 FA | 	rdbyte	arg02, fp
23604     40 FA 05 F6 | 	mov	result1, #64
23608     0A FB 41 F5 | 	or	result1, arg02
2360c     10 4E 05 F1 | 	add	fp, #16
23610     A7 FA 41 FC | 	wrbyte	result1, fp
23614     0C 4E 85 F1 | 	sub	fp, #12
23618     A7 FA 01 FB | 	rdlong	result1, fp
2361c     18 FA 45 F0 | 	shr	result1, #24
23620     0D 4E 05 F1 | 	add	fp, #13
23624     A7 FA 41 FC | 	wrbyte	result1, fp
23628     0D 4E 85 F1 | 	sub	fp, #13
2362c     A7 FA 01 FB | 	rdlong	result1, fp
23630     10 FA 45 F0 | 	shr	result1, #16
23634     0E 4E 05 F1 | 	add	fp, #14
23638     A7 FA 41 FC | 	wrbyte	result1, fp
2363c     0E 4E 85 F1 | 	sub	fp, #14
23640     A7 FA 01 FB | 	rdlong	result1, fp
23644     08 FA 45 F0 | 	shr	result1, #8
23648     0F 4E 05 F1 | 	add	fp, #15
2364c     A7 FA 41 FC | 	wrbyte	result1, fp
23650     0F 4E 85 F1 | 	sub	fp, #15
23654     A7 FA 01 FB | 	rdlong	result1, fp
23658     10 4E 05 F1 | 	add	fp, #16
2365c     A7 FA 41 FC | 	wrbyte	result1, fp
23660     0C 4E 85 F1 | 	sub	fp, #12
23664     A7 02 48 FC | 	wrbyte	#1, fp
23668     08 4E 85 F1 | 	sub	fp, #8
2366c     A7 FA C9 FA | 	rdbyte	result1, fp wz
23670     04 4E 85 F1 | 	sub	fp, #4
23674     0C 4E 05 A1 |  if_e	add	fp, #12
23678     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2367c     0C 4E 85 A1 |  if_e	sub	fp, #12
23680     04 4E 05 F1 | 	add	fp, #4
23684     A7 FA C1 FA | 	rdbyte	result1, fp
23688     04 4E 85 F1 | 	sub	fp, #4
2368c     08 FA 0D F2 | 	cmp	result1, #8 wz
23690     0C 4E 05 A1 |  if_e	add	fp, #12
23694     A7 0E 49 AC |  if_e	wrbyte	#135, fp
23698     0C 4E 85 A1 |  if_e	sub	fp, #12
2369c     0C 4E 05 F1 | 	add	fp, #12
236a0     A7 14 C2 FA | 	rdbyte	arg02, fp
236a4     0D 4E 05 F1 | 	add	fp, #13
236a8     A7 14 42 FC | 	wrbyte	arg02, fp
236ac     05 4E 85 F1 | 	sub	fp, #5
236b0     A7 12 02 F6 | 	mov	arg01, fp
236b4     14 4E 85 F1 | 	sub	fp, #20
236b8     06 14 06 F6 | 	mov	arg02, #6
236bc     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0917
236c0     04 4E 05 F1 | 	add	fp, #4
236c4     A7 1E C2 FA | 	rdbyte	local01, fp
236c8     04 4E 85 F1 | 	sub	fp, #4
236cc     0C 1E 0E F2 | 	cmp	local01, #12 wz
236d0     10 4E 05 A1 |  if_e	add	fp, #16
236d4     A7 12 02 A6 |  if_e	mov	arg01, fp
236d8     10 4E 85 A1 |  if_e	sub	fp, #16
236dc     01 14 06 A6 |  if_e	mov	arg02, #1
236e0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0924
236e4     0C 4E 05 F1 | 	add	fp, #12
236e8     A7 14 48 FC | 	wrbyte	#10, fp
236ec     0C 4E 85 F1 | 	sub	fp, #12
236f0                 | ' 	n = 10;
236f0                 | ' 	do
236f0                 | LR__3952
236f0     10 4E 05 F1 | 	add	fp, #16
236f4     A7 12 02 F6 | 	mov	arg01, fp
236f8     10 4E 85 F1 | 	sub	fp, #16
236fc     01 14 06 F6 | 	mov	arg02, #1
23700     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0924
23704     10 4E 05 F1 | 	add	fp, #16
23708     A7 1E C2 FA | 	rdbyte	local01, fp
2370c     10 4E 85 F1 | 	sub	fp, #16
23710     80 1E CE F7 | 	test	local01, #128 wz
23714     1C 00 90 AD |  if_e	jmp	#LR__3953
23718     0C 4E 05 F1 | 	add	fp, #12
2371c     A7 1E C2 FA | 	rdbyte	local01, fp
23720     01 1E 86 F1 | 	sub	local01, #1
23724     A7 1E 42 FC | 	wrbyte	local01, fp
23728     A7 1E CA FA | 	rdbyte	local01, fp wz
2372c     0C 4E 85 F1 | 	sub	fp, #12
23730     BC FF 9F 5D |  if_ne	jmp	#LR__3952
23734                 | LR__3953
23734                 | ' 
23734                 | ' 	return d;
23734     10 4E 05 F1 | 	add	fp, #16
23738     A7 FA C1 FA | 	rdbyte	result1, fp
2373c     10 4E 85 F1 | 	sub	fp, #16
23740                 | LR__3954
23740     A7 F0 03 F6 | 	mov	ptra, fp
23744     B2 00 A0 FD | 	call	#popregs_
23748                 | _fatfs_cc_send_cmd_0948_ret
23748     2D 00 64 FD | 	ret
2374c                 | 
2374c                 | _fatfs_cc_disk_deinitialize
2374c     03 4A 05 F6 | 	mov	COUNT_, #3
23750     A8 00 A0 FD | 	call	#pushregs_
23754     00 12 4E F2 | 	cmps	arg01, #0 wz
23758     01 00 00 FF 
2375c     14 E4 05 F1 | 	add	objptr, ##532
23760     F2 12 02 FB | 	rdlong	arg01, objptr
23764     04 E4 85 F1 | 	sub	objptr, #4
23768     F2 1E 02 FB | 	rdlong	local01, objptr
2376c     08 E4 05 F1 | 	add	objptr, #8
23770     F2 20 02 FB | 	rdlong	local02, objptr
23774     04 E4 05 F1 | 	add	objptr, #4
23778     F2 22 02 FB | 	rdlong	local03, objptr
2377c     01 00 00 FF 
23780     1C E4 85 F1 | 	sub	objptr, ##540
23784                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
23784                 | '         return RES_NOTRDY;
23784     03 FA 05 56 |  if_ne	mov	result1, #3
23788     2C 00 90 5D |  if_ne	jmp	#LR__3960
2378c     50 12 62 FD | 	fltl	arg01
23790     09 01 08 FC | 	wrpin	#0, arg01
23794     50 1E 62 FD | 	fltl	local01
23798     0F 01 08 FC | 	wrpin	#0, local01
2379c     50 20 62 FD | 	fltl	local02
237a0     10 01 08 FC | 	wrpin	#0, local02
237a4     50 22 62 FD | 	fltl	local03
237a8     11 01 08 FC | 	wrpin	#0, local03
237ac     0A 12 06 F6 | 	mov	arg01, #10
237b0     80 17 BF FD | 	call	#__system___waitms
237b4                 | '     }
237b4                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
237b4                 | '     _pinclear(PIN_SS);
237b4                 | '     _pinclear(PIN_CLK);
237b4                 | '     _pinclear(PIN_DI);
237b4                 | '     _pinclear(PIN_DO);
237b4                 | ' 
237b4                 | '     _waitms(10);
237b4                 | ' 
237b4                 | '     return 0;
237b4     00 FA 05 F6 | 	mov	result1, #0
237b8                 | LR__3960
237b8     A7 F0 03 F6 | 	mov	ptra, fp
237bc     B2 00 A0 FD | 	call	#popregs_
237c0                 | _fatfs_cc_disk_deinitialize_ret
237c0     2D 00 64 FD | 	ret
237c4                 | 
237c4                 | _fatfs_cc_gettimeofday
237c4     04 4A 05 F6 | 	mov	COUNT_, #4
237c8     A8 00 A0 FD | 	call	#pushregs_
237cc     09 1F 02 F6 | 	mov	local01, arg01
237d0     3C 13 BF FD | 	call	#__system___getus
237d4     FD 12 02 F6 | 	mov	arg01, result1
237d8     02 00 00 FF 
237dc     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
237e0     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
237e4     09 FB 01 F6 | 	mov	result1, arg01
237e8     10 FB 81 F1 | 	sub	result1, local02
237ec     A1 07 00 FF 
237f0     40 FA 15 FD | 	qdiv	result1, ##1000000
237f4     02 00 00 FF 
237f8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
237fc     18 20 62 FD | 	getqx	local02
23800     A1 07 00 FF 
23804     40 FA 15 FD | 	qdiv	result1, ##1000000
23808     00 20 0E F2 | 	cmp	local02, #0 wz
2380c     19 22 62 FD | 	getqy	local03
23810     28 00 90 AD |  if_e	jmp	#LR__3970
23814     02 00 00 FF 
23818     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2381c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23820     10 25 02 F1 | 	add	local04, local02
23824     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
23828     11 13 82 F1 | 	sub	arg01, local03
2382c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
23830     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
23834     02 00 00 FF 
23838     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2383c                 | LR__3970
2383c     02 00 00 FF 
23840     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
23844     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23848     02 00 00 FF 
2384c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
23850     0F 25 62 FC | 	wrlong	local04, local01
23854     04 1E 06 F1 | 	add	local01, #4
23858     0F 23 62 FC | 	wrlong	local03, local01
2385c                 | '         lastsec += secs;
2385c                 | '         lastus = now - leftover;
2385c                 | '     }
2385c                 | '     tv->tv_sec = lastsec;
2385c                 | '     tv->tv_usec = leftover;
2385c                 | '     return 0;
2385c     00 FA 05 F6 | 	mov	result1, #0
23860     A7 F0 03 F6 | 	mov	ptra, fp
23864     B2 00 A0 FD | 	call	#popregs_
23868                 | _fatfs_cc_gettimeofday_ret
23868     2D 00 64 FD | 	ret
2386c                 | 
2386c                 | _fatfs_cc__is_leap_year
2386c     09 FB 51 F6 | 	abs	result1, arg01 wc
23870     03 FA 05 F5 | 	and	result1, #3
23874     FD FA 89 F6 | 	negc	result1, result1 wz
23878     38 00 90 5D |  if_ne	jmp	#LR__3981
2387c     09 FB 51 F6 | 	abs	result1, arg01 wc
23880     64 FA 15 FD | 	qdiv	result1, #100
23884     19 FA 61 FD | 	getqy	result1
23888     FD FA 89 F6 | 	negc	result1, result1 wz
2388c     1C 00 90 5D |  if_ne	jmp	#LR__3980
23890     09 FB 51 F6 | 	abs	result1, arg01 wc
23894     90 FB 15 FD | 	qdiv	result1, #400
23898                 | '       return (0 == y % 400);
23898     00 FA 05 F6 | 	mov	result1, #0
2389c     19 00 62 FD | 	getqy	_var01
238a0     00 01 8A F6 | 	negc	_var01, _var01 wz
238a4     01 FA 05 A6 |  if_e	mov	result1, #1
238a8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
238ac                 | LR__3980
238ac                 | '     return 1;
238ac     01 FA 05 F6 | 	mov	result1, #1
238b0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
238b4                 | LR__3981
238b4                 | '   }
238b4                 | '   return 0;
238b4     00 FA 05 F6 | 	mov	result1, #0
238b8                 | _fatfs_cc__is_leap_year_ret
238b8     2D 00 64 FD | 	ret
238bc                 | 
238bc                 | _fatfs_cc___tzoffset
238bc     09 01 0A F6 | 	mov	_var01, arg01 wz
238c0     FF FF FF FF 
238c4     0A FF 6B FC | 	wrlong	##-1, arg02
238c8     01 02 06 F6 | 	mov	_var02, #1
238cc     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
238d0                 | '                 return 0;
238d0     00 FA 05 A6 |  if_e	mov	result1, #0
238d4     94 02 90 AD |  if_e	jmp	#LR__4007
238d8     0A 01 68 FC | 	wrlong	#0, arg02
238dc     02 00 00 FF 
238e0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
238e4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
238e8                 | ' 
238e8                 | '        *hasdst = 0;
238e8                 | ' 
238e8                 | ' 	n = stdname;
238e8                 | '         while (*s && isalpha(*s)) {
238e8     02 00 00 FF 
238ec     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
238f0     97 28 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
238f4                 | LR__3990
238f4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
238f8     48 00 90 AD |  if_e	jmp	#LR__3992
238fc     00 13 C2 FA | 	rdbyte	arg01, _var01
23900                 | ' {
23900                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23900     80 12 36 F3 | 	fle	arg01, #128 wc
23904                 | '     return __ctype[c];
23904     02 00 00 FF 
23908     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2390c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23910     09 FB C1 FA | 	rdbyte	result1, arg01
23914     02 00 00 FF 
23918     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2391c     0C FA CD F7 | 	test	result1, #12 wz
23920     20 00 90 AD |  if_e	jmp	#LR__3992
23924     00 09 02 F6 | 	mov	_var05, _var01
23928     00 0B 02 F6 | 	mov	_var06, _var01
2392c     01 0A 06 F1 | 	add	_var06, #1
23930     04 0D C2 FA | 	rdbyte	_var07, _var05
23934     05 01 02 F6 | 	mov	_var01, _var06
23938     03 0D 42 FC | 	wrbyte	_var07, _var04
2393c     01 06 06 F1 | 	add	_var04, #1
23940     B0 FF 9F FD | 	jmp	#LR__3990
23944                 | LR__3991
23944                 | LR__3992
23944     03 01 48 FC | 	wrbyte	#0, _var04
23948     00 0E 06 F6 | 	mov	_var08, #0
2394c     00 05 C2 FA | 	rdbyte	_var03, _var01
23950     2D 04 0E F2 | 	cmp	_var03, #45 wz
23954     01 02 66 A6 |  if_e	neg	_var02, #1
23958     01 00 06 A1 |  if_e	add	_var01, #1
2395c     97 28 48 FB | 	callpa	#(@LR__3994-@LR__3993)>>2,fcache_load_ptr_
23960                 | '                 sgn = -1;
23960                 | '                 s++;
23960                 | '         }
23960                 | '         while (isdigit(*s)) {
23960                 | LR__3993
23960     00 13 C2 FA | 	rdbyte	arg01, _var01
23964                 | ' {
23964                 | '   return  (__ctype_get(c) & 0x02 ) ;
23964     80 12 36 F3 | 	fle	arg01, #128 wc
23968                 | '     return __ctype[c];
23968     02 00 00 FF 
2396c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23970     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23974     09 FB C1 FA | 	rdbyte	result1, arg01
23978     02 00 00 FF 
2397c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23980     02 FA CD F7 | 	test	result1, #2 wz
23984     28 00 90 AD |  if_e	jmp	#LR__3995
23988     07 05 02 F6 | 	mov	_var03, _var08
2398c     02 04 66 F0 | 	shl	_var03, #2
23990     07 05 02 F1 | 	add	_var03, _var08
23994     01 04 66 F0 | 	shl	_var03, #1
23998     00 09 C2 FA | 	rdbyte	_var05, _var01
2399c     30 08 86 F1 | 	sub	_var05, #48
239a0     04 05 02 F1 | 	add	_var03, _var05
239a4     02 0F 02 F6 | 	mov	_var08, _var03
239a8     01 00 06 F1 | 	add	_var01, #1
239ac     B0 FF 9F FD | 	jmp	#LR__3993
239b0                 | LR__3994
239b0                 | LR__3995
239b0     07 00 00 FF 
239b4     10 0E 06 FD | 	qmul	_var08, ##3600
239b8     00 05 C2 FA | 	rdbyte	_var03, _var01
239bc     3A 04 0E F2 | 	cmp	_var03, #58 wz
239c0     18 10 62 FD | 	getqx	_var09
239c4     70 00 90 5D |  if_ne	jmp	#LR__3999
239c8     00 0E 06 F6 | 	mov	_var08, #0
239cc     01 00 06 F1 | 	add	_var01, #1
239d0     97 28 48 FB | 	callpa	#(@LR__3997-@LR__3996)>>2,fcache_load_ptr_
239d4                 | '                 x = 0;
239d4                 | '                 s++;
239d4                 | '                 while (isdigit(*s)) {
239d4                 | LR__3996
239d4     00 13 C2 FA | 	rdbyte	arg01, _var01
239d8                 | ' {
239d8                 | '   return  (__ctype_get(c) & 0x02 ) ;
239d8     80 12 36 F3 | 	fle	arg01, #128 wc
239dc                 | '     return __ctype[c];
239dc     02 00 00 FF 
239e0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
239e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
239e8     09 FB C1 FA | 	rdbyte	result1, arg01
239ec     02 00 00 FF 
239f0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
239f4     02 FA CD F7 | 	test	result1, #2 wz
239f8     28 00 90 AD |  if_e	jmp	#LR__3998
239fc     07 05 02 F6 | 	mov	_var03, _var08
23a00     02 04 66 F0 | 	shl	_var03, #2
23a04     07 05 02 F1 | 	add	_var03, _var08
23a08     01 04 66 F0 | 	shl	_var03, #1
23a0c     00 09 C2 FA | 	rdbyte	_var05, _var01
23a10     30 08 86 F1 | 	sub	_var05, #48
23a14     04 05 02 F1 | 	add	_var03, _var05
23a18     02 0F 02 F6 | 	mov	_var08, _var03
23a1c     01 00 06 F1 | 	add	_var01, #1
23a20     B0 FF 9F FD | 	jmp	#LR__3996
23a24                 | LR__3997
23a24                 | LR__3998
23a24     07 0D 02 F6 | 	mov	_var07, _var08
23a28     04 0C 66 F0 | 	shl	_var07, #4
23a2c     07 0D 82 F1 | 	sub	_var07, _var08
23a30     02 0C 66 F0 | 	shl	_var07, #2
23a34     06 11 02 F1 | 	add	_var09, _var07
23a38                 | LR__3999
23a38     02 00 00 FF 
23a3c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
23a40     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
23a44     00 13 C2 FA | 	rdbyte	arg01, _var01
23a48                 | ' {
23a48                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23a48     80 12 36 F3 | 	fle	arg01, #128 wc
23a4c                 | '     return __ctype[c];
23a4c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
23a50     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23a54     09 FB C1 FA | 	rdbyte	result1, arg01
23a58     02 00 00 FF 
23a5c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23a60     0C FA CD F7 | 	test	result1, #12 wz
23a64     50 00 90 AD |  if_e	jmp	#LR__4002
23a68     0A 03 68 FC | 	wrlong	#1, arg02
23a6c                 | '                 *hasdst = 1;
23a6c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
23a6c                 | LR__4000
23a6c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
23a70     44 00 90 AD |  if_e	jmp	#LR__4001
23a74     00 13 C2 FA | 	rdbyte	arg01, _var01
23a78                 | ' {
23a78                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23a78     80 12 36 F3 | 	fle	arg01, #128 wc
23a7c                 | '     return __ctype[c];
23a7c     02 00 00 FF 
23a80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23a84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23a88     09 FB C1 FA | 	rdbyte	result1, arg01
23a8c     02 00 00 FF 
23a90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23a94     0C FA CD F7 | 	test	result1, #12 wz
23a98     1C 00 90 AD |  if_e	jmp	#LR__4001
23a9c     00 0B 02 F6 | 	mov	_var06, _var01
23aa0     01 0A 06 F1 | 	add	_var06, #1
23aa4     00 0D C2 FA | 	rdbyte	_var07, _var01
23aa8     05 01 02 F6 | 	mov	_var01, _var06
23aac     03 0D 42 FC | 	wrbyte	_var07, _var04
23ab0     01 06 06 F1 | 	add	_var04, #1
23ab4     B4 FF 9F FD | 	jmp	#LR__4000
23ab8                 | LR__4001
23ab8                 | LR__4002
23ab8     03 01 48 FC | 	wrbyte	#0, _var04
23abc     02 00 00 FF 
23ac0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23ac4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
23ac8     02 00 00 FF 
23acc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
23ad0     20 00 90 AD |  if_e	jmp	#LR__4003
23ad4     02 00 00 FF 
23ad8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23adc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23ae0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
23ae4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23ae8     02 00 00 FF 
23aec     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
23af0     1C 00 90 FD | 	jmp	#LR__4004
23af4                 | LR__4003
23af4     02 00 00 FF 
23af8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
23afc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23b00     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
23b04     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23b08     02 00 00 FF 
23b0c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
23b10                 | LR__4004
23b10     02 00 00 FF 
23b14     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
23b18     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
23b1c     02 00 00 FF 
23b20     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
23b24     20 00 90 AD |  if_e	jmp	#LR__4005
23b28     02 00 00 FF 
23b2c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
23b30     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23b34     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
23b38     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23b3c     02 00 00 FF 
23b40     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
23b44     1C 00 90 FD | 	jmp	#LR__4006
23b48                 | LR__4005
23b48     02 00 00 FF 
23b4c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23b50     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23b54     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
23b58     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23b5c     02 00 00 FF 
23b60     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
23b64                 | LR__4006
23b64     08 03 02 FD | 	qmul	_var02, _var09
23b68                 | ' 		_tzname[1] = stdname;
23b68                 | ' 
23b68                 | '         return sgn * off;
23b68     18 FA 61 FD | 	getqx	result1
23b6c                 | LR__4007
23b6c                 | _fatfs_cc___tzoffset_ret
23b6c     2D 00 64 FD | 	ret
23b70                 | 
23b70                 | _fatfs_cc___indst
23b70     10 12 06 F1 | 	add	arg01, #16
23b74     09 01 02 FB | 	rdlong	_var01, arg01
23b78     10 12 86 F1 | 	sub	arg01, #16
23b7c     02 00 0E F2 | 	cmp	_var01, #2 wz
23b80     30 00 90 5D |  if_ne	jmp	#LR__4010
23b84     07 00 06 F6 | 	mov	_var01, #7
23b88     18 12 06 F1 | 	add	arg01, #24
23b8c     09 03 02 FB | 	rdlong	_var02, arg01
23b90     01 01 02 F1 | 	add	_var01, _var02
23b94     0C 12 86 F1 | 	sub	arg01, #12
23b98     09 05 02 FB | 	rdlong	_var03, arg01
23b9c     02 01 82 F1 | 	sub	_var01, _var03
23ba0     00 00 56 F2 | 	cmps	_var01, #0 wc
23ba4                 | '                         return 1;
23ba4     01 FA 05 C6 |  if_b	mov	result1, #1
23ba8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
23bac                 | '                 return 0;
23bac     00 FA 05 F6 | 	mov	result1, #0
23bb0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
23bb4                 | LR__4010
23bb4     10 12 06 F1 | 	add	arg01, #16
23bb8     09 01 02 FB | 	rdlong	_var01, arg01
23bbc     10 12 86 F1 | 	sub	arg01, #16
23bc0     0A 00 0E F2 | 	cmp	_var01, #10 wz
23bc4     28 00 90 5D |  if_ne	jmp	#LR__4011
23bc8     18 12 06 F1 | 	add	arg01, #24
23bcc     09 01 02 FB | 	rdlong	_var01, arg01
23bd0     0C 12 86 F1 | 	sub	arg01, #12
23bd4     09 07 02 FB | 	rdlong	_var04, arg01
23bd8     03 01 82 F1 | 	sub	_var01, _var04
23bdc     00 00 56 F2 | 	cmps	_var01, #0 wc
23be0                 | '                         return 0;
23be0     00 FA 05 C6 |  if_b	mov	result1, #0
23be4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
23be8                 | '                 return 1;
23be8     01 FA 05 F6 | 	mov	result1, #1
23bec     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
23bf0                 | LR__4011
23bf0                 | '         }
23bf0                 | ' 
23bf0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
23bf0     00 00 06 F6 | 	mov	_var01, #0
23bf4     10 12 06 F1 | 	add	arg01, #16
23bf8     09 03 02 FB | 	rdlong	_var02, arg01
23bfc     10 12 86 F1 | 	sub	arg01, #16
23c00     03 02 56 F2 | 	cmps	_var02, #3 wc
23c04     10 00 90 CD |  if_b	jmp	#LR__4012
23c08     10 12 06 F1 | 	add	arg01, #16
23c0c     09 05 02 FB | 	rdlong	_var03, arg01
23c10     0A 04 56 F2 | 	cmps	_var03, #10 wc
23c14     01 00 06 C6 |  if_b	mov	_var01, #1
23c18                 | LR__4012
23c18     00 FB 01 F6 | 	mov	result1, _var01
23c1c                 | _fatfs_cc___indst_ret
23c1c     2D 00 64 FD | 	ret
23c20                 | 
23c20                 | ' 	
23c20                 | ' 	FUNCTION pfunc(c as integer) as integer
23c20                 | ___strs_cl_pfunc
23c20                 | ' 		if (i < 16) then
23c20     04 E4 05 F1 | 	add	objptr, #4
23c24     F2 FA 01 FB | 	rdlong	result1, objptr
23c28     04 E4 85 F1 | 	sub	objptr, #4
23c2c     10 FA 55 F2 | 	cmps	result1, #16 wc
23c30     2C 00 90 3D |  if_ae	jmp	#LR__4020
23c34     F2 FA 01 FB | 	rdlong	result1, objptr
23c38     04 E4 05 F1 | 	add	objptr, #4
23c3c     F2 00 02 FB | 	rdlong	_var01, objptr
23c40     FD 00 02 F1 | 	add	_var01, result1
23c44     00 13 42 FC | 	wrbyte	arg01, _var01
23c48     F2 FA 01 FB | 	rdlong	result1, objptr
23c4c     01 FA 05 F1 | 	add	result1, #1
23c50     F2 FA 61 FC | 	wrlong	result1, objptr
23c54     04 E4 85 F1 | 	sub	objptr, #4
23c58                 | ' 			p(i) = c
23c58                 | ' 			i = i+1
23c58                 | ' 			return 1
23c58     01 FA 05 F6 | 	mov	result1, #1
23c5c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
23c60                 | LR__4020
23c60                 | ' 			return -1
23c60     01 FA 65 F6 | 	neg	result1, #1
23c64                 | ___strs_cl_pfunc_ret
23c64     2D 00 64 FD | 	ret
23c68                 | 
23c68                 | __struct__s_vfs_file_t_putchar
23c68     04 4A 05 F6 | 	mov	COUNT_, #4
23c6c     A8 00 A0 FD | 	call	#pushregs_
23c70     1C E4 05 F1 | 	add	objptr, #28
23c74     F2 1E 0A FB | 	rdlong	local01, objptr wz
23c78     1C E4 85 F1 | 	sub	objptr, #28
23c7c     00 FA 05 A6 |  if_e	mov	result1, #0
23c80     48 00 90 AD |  if_e	jmp	#LR__4030
23c84     1C E4 05 F1 | 	add	objptr, #28
23c88     F2 20 02 FB | 	rdlong	local02, objptr
23c8c     10 23 02 F6 | 	mov	local03, local02
23c90     1C E4 85 F1 | 	sub	objptr, #28
23c94     13 22 46 F7 | 	zerox	local03, #19
23c98     14 20 46 F0 | 	shr	local02, #20
23c9c     02 20 66 F0 | 	shl	local02, #2
23ca0     ED 20 02 F1 | 	add	local02, __methods__
23ca4     10 21 02 FB | 	rdlong	local02, local02
23ca8     F2 14 02 F6 | 	mov	arg02, objptr
23cac     F2 24 02 F6 | 	mov	local04, objptr
23cb0     11 E5 01 F6 | 	mov	objptr, local03
23cb4     2D 20 62 FD | 	call	local02
23cb8     12 E5 01 F6 | 	mov	objptr, local04
23cbc                 | '     return (i < 0) ? 0 : 1;
23cbc     00 FA 55 F2 | 	cmps	result1, #0 wc
23cc0     00 1E 06 C6 |  if_b	mov	local01, #0
23cc4     01 1E 06 36 |  if_ae	mov	local01, #1
23cc8     0F FB 01 F6 | 	mov	result1, local01
23ccc                 | LR__4030
23ccc     A7 F0 03 F6 | 	mov	ptra, fp
23cd0     B2 00 A0 FD | 	call	#popregs_
23cd4                 | __struct__s_vfs_file_t_putchar_ret
23cd4     2D 00 64 FD | 	ret
23cd8                 | 
23cd8                 | __struct__s_vfs_file_t_getchar
23cd8     03 4A 05 F6 | 	mov	COUNT_, #3
23cdc     A8 00 A0 FD | 	call	#pushregs_
23ce0     20 E4 05 F1 | 	add	objptr, #32
23ce4     F2 12 0A FB | 	rdlong	arg01, objptr wz
23ce8     20 E4 85 F1 | 	sub	objptr, #32
23cec     01 FA 65 A6 |  if_e	neg	result1, #1
23cf0     38 00 90 AD |  if_e	jmp	#LR__4040
23cf4                 | '     return getcf(__this);
23cf4     20 E4 05 F1 | 	add	objptr, #32
23cf8     F2 1E 02 FB | 	rdlong	local01, objptr
23cfc     0F 21 02 F6 | 	mov	local02, local01
23d00     20 E4 85 F1 | 	sub	objptr, #32
23d04     13 20 46 F7 | 	zerox	local02, #19
23d08     14 1E 46 F0 | 	shr	local01, #20
23d0c     02 1E 66 F0 | 	shl	local01, #2
23d10     ED 1E 02 F1 | 	add	local01, __methods__
23d14     0F 1F 02 FB | 	rdlong	local01, local01
23d18     F2 12 02 F6 | 	mov	arg01, objptr
23d1c     F2 22 02 F6 | 	mov	local03, objptr
23d20     10 E5 01 F6 | 	mov	objptr, local02
23d24     2D 1E 62 FD | 	call	local01
23d28     11 E5 01 F6 | 	mov	objptr, local03
23d2c                 | LR__4040
23d2c     A7 F0 03 F6 | 	mov	ptra, fp
23d30     B2 00 A0 FD | 	call	#popregs_
23d34                 | __struct__s_vfs_file_t_getchar_ret
23d34     2D 00 64 FD | 	ret
23d38                 | 
23d38                 | __struct___bas_wrap_sender_tx
23d38     03 4A 05 F6 | 	mov	COUNT_, #3
23d3c     A8 00 A0 FD | 	call	#pushregs_
23d40     F2 1E 02 FB | 	rdlong	local01, objptr
23d44     0F 21 02 F6 | 	mov	local02, local01
23d48     13 1E 46 F7 | 	zerox	local01, #19
23d4c     14 20 46 F0 | 	shr	local02, #20
23d50     02 20 66 F0 | 	shl	local02, #2
23d54     ED 20 02 F1 | 	add	local02, __methods__
23d58     10 21 02 FB | 	rdlong	local02, local02
23d5c     F2 22 02 F6 | 	mov	local03, objptr
23d60     0F E5 01 F6 | 	mov	objptr, local01
23d64     2D 20 62 FD | 	call	local02
23d68     11 E5 01 F6 | 	mov	objptr, local03
23d6c     01 FA 05 F6 | 	mov	result1, #1
23d70     A7 F0 03 F6 | 	mov	ptra, fp
23d74     B2 00 A0 FD | 	call	#popregs_
23d78                 | __struct___bas_wrap_sender_tx_ret
23d78     2D 00 64 FD | 	ret
23d7c                 | 
23d7c                 | __struct___bas_wrap_sender_rx
23d7c     03 4A 05 F6 | 	mov	COUNT_, #3
23d80     A8 00 A0 FD | 	call	#pushregs_
23d84     04 E4 05 F1 | 	add	objptr, #4
23d88     F2 1E 02 FB | 	rdlong	local01, objptr
23d8c     0F 21 02 F6 | 	mov	local02, local01
23d90     04 E4 85 F1 | 	sub	objptr, #4
23d94     13 20 46 F7 | 	zerox	local02, #19
23d98     14 1E 46 F0 | 	shr	local01, #20
23d9c     02 1E 66 F0 | 	shl	local01, #2
23da0     ED 1E 02 F1 | 	add	local01, __methods__
23da4     0F 1F 02 FB | 	rdlong	local01, local01
23da8     F2 22 02 F6 | 	mov	local03, objptr
23dac     10 E5 01 F6 | 	mov	objptr, local02
23db0     2D 1E 62 FD | 	call	local01
23db4     11 E5 01 F6 | 	mov	objptr, local03
23db8     A7 F0 03 F6 | 	mov	ptra, fp
23dbc     B2 00 A0 FD | 	call	#popregs_
23dc0                 | __struct___bas_wrap_sender_rx_ret
23dc0     2D 00 64 FD | 	ret
23dc4                 | 
23dc4                 | __struct___bas_wrap_sender_close
23dc4     03 4A 05 F6 | 	mov	COUNT_, #3
23dc8     A8 00 A0 FD | 	call	#pushregs_
23dcc     08 E4 05 F1 | 	add	objptr, #8
23dd0     F2 1E 02 FB | 	rdlong	local01, objptr
23dd4     0F 21 02 F6 | 	mov	local02, local01
23dd8     08 E4 85 F1 | 	sub	objptr, #8
23ddc     13 20 46 F7 | 	zerox	local02, #19
23de0     14 1E 46 F0 | 	shr	local01, #20
23de4     02 1E 66 F0 | 	shl	local01, #2
23de8     ED 1E 02 F1 | 	add	local01, __methods__
23dec     0F 1F 02 FB | 	rdlong	local01, local01
23df0     F2 22 02 F6 | 	mov	local03, objptr
23df4     10 E5 01 F6 | 	mov	objptr, local02
23df8     2D 1E 62 FD | 	call	local01
23dfc     11 E5 01 F6 | 	mov	objptr, local03
23e00     A7 F0 03 F6 | 	mov	ptra, fp
23e04     B2 00 A0 FD | 	call	#popregs_
23e08                 | __struct___bas_wrap_sender_close_ret
23e08     2D 00 64 FD | 	ret
23e0c                 | 
23e0c                 | LR__4050
23e0c     2F          | 	byte	"/"
23e0d     00          | 	byte	0
23e0e                 | LR__4051
23e0e     69 6E 66    | 	byte	"inf"
23e11     00          | 	byte	0
23e12                 | LR__4052
23e12     6E 61 6E    | 	byte	"nan"
23e15     00          | 	byte	0
23e16                 | LR__4053
23e16                 | 	byte	
23e16     00          | 	byte	0
23e17                 | LR__4054
23e17                 | 	byte	
23e17     00          | 	byte	0
23e18                 | LR__4055
23e18                 | 	byte	
23e18     00          | 	byte	0
23e19                 | LR__4056
23e19                 | 	byte	
23e19     00          | 	byte	0
23e1a                 | LR__4057
23e1a                 | 	byte	
23e1a     00          | 	byte	0
23e1b                 | LR__4058
23e1b                 | 	byte	
23e1b     00          | 	byte	0
23e1c                 | LR__4059
23e1c                 | 	byte	
23e1c     00          | 	byte	0
23e1d                 | LR__4060
23e1d                 | 	byte	
23e1d     00          | 	byte	0
23e1e                 | LR__4061
23e1e     00          | 	byte	0
23e1f     00          | 	byte	0
23e20                 | LR__4062
23e20     00          | 	byte	0
23e21     00          | 	byte	0
23e22                 | LR__4063
23e22     00          | 	byte	0
23e23     00          | 	byte	0
23e24                 | LR__4064
23e24     20 21 21 21 
23e28     20 63 6F 72 
23e2c     72 75 70 74 
23e30     65 64 20 68 
23e34     65 61 70 3F 
23e38     3F 3F 20 21 
23e3c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
23e3f     00          | 	byte	0
23e40                 | LR__4065
23e40     20 21 21 21 
23e44     20 6F 75 74 
23e48     20 6F 66 20 
23e4c     68 65 61 70 
23e50     20 6D 65 6D 
23e54     6F 72 79 20 
23e58     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
23e5c     00          | 	byte	0
23e5d                 | LR__4066
23e5d     20 21 21 21 
23e61     20 63 6F 72 
23e65     72 75 70 74 
23e69     65 64 20 68 
23e6d     65 61 70 20 
23e71     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
23e75     00          | 	byte	0
23e76                 | LR__4067
23e76     00          | 	byte	0
23e77     00          | 	byte	0
23e78                 | LR__4068
23e78     2E          | 	byte	"."
23e79     00          | 	byte	0
23e7a                 | LR__4069
23e7a     00          | 	byte	0
23e7b     00          | 	byte	0
23e7c                 | LR__4070
23e7c     00          | 	byte	0
23e7d     00          | 	byte	0
23e7e                 | LR__4071
23e7e     00          | 	byte	0
23e7f     00          | 	byte	0
23e80                 | LR__4072
23e80     2A 3A 3C 3E 
23e84     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
23e88     00          | 	byte	0
23e89                 | LR__4073
23e89     2B 2C 3B 3D 
23e8d     5B 5D       | 	byte	"+,;=[]"
23e8f     00          | 	byte	0
23e90                 | LR__4074
23e90     46 41 54 33 
23e94     32 20 20 20 | 	byte	"FAT32   "
23e98     00          | 	byte	0
23e99                 | LR__4075
23e99     54 5A       | 	byte	"TZ"
23e9b     00          | 	byte	0
23e9c                 | LR__4076
23e9c     00          | 	byte	0
23e9d     00          | 	byte	0
23e9e                 | LR__4077
23e9e                 | 	byte	
23e9e     00          | 	byte	0
23e9f                 | LR__4078
23e9f                 | 	byte	
23e9f     00          | 	byte	0
23ea0                 | LR__4079
23ea0     3A          | 	byte	":"
23ea1     00          | 	byte	0
23ea2                 | LR__4080
23ea2                 | 	byte	
23ea2     00          | 	byte	0
23ea3                 | LR__4081
23ea3                 | 	byte	
23ea3     00          | 	byte	0
23ea4                 | LR__4082
23ea4                 | 	byte	
23ea4     00          | 	byte	0
23ea5                 | LR__4083
23ea5                 | 	byte	
23ea5     00          | 	byte	0
23ea6                 | LR__4084
23ea6                 | 	byte	
23ea6     00          | 	byte	0
23ea7                 | LR__4085
23ea7                 | 	byte	
23ea7     00          | 	byte	0
23ea8                 | LR__4086
23ea8                 | 	byte	
23ea8     00          | 	byte	0
23ea9                 | LR__4087
23ea9     22          | 	byte	34
23eaa     00          | 	byte	0
23eab                 | LR__4088
23eab     22          | 	byte	34
23eac     00          | 	byte	0
23ead                 | LR__4089
23ead     22          | 	byte	34
23eae     00          | 	byte	0
23eaf                 | LR__4090
23eaf     22          | 	byte	34
23eb0     00          | 	byte	0
23eb1                 | LR__4091
23eb1     22          | 	byte	34
23eb2     00          | 	byte	0
23eb3                 | LR__4092
23eb3     3E          | 	byte	">"
23eb4     00          | 	byte	0
23eb5                 | LR__4093
23eb5     3E          | 	byte	">"
23eb6     00          | 	byte	0
23eb7                 | LR__4094
23eb7     2B          | 	byte	"+"
23eb8     00          | 	byte	0
23eb9                 | LR__4095
23eb9     2D          | 	byte	"-"
23eba     00          | 	byte	0
23ebb                 | LR__4096
23ebb     2A          | 	byte	"*"
23ebc     00          | 	byte	0
23ebd                 | LR__4097
23ebd     2F          | 	byte	"/"
23ebe     00          | 	byte	0
23ebf                 | LR__4098
23ebf     5E          | 	byte	"^"
23ec0     00          | 	byte	0
23ec1                 | LR__4099
23ec1     3D          | 	byte	"="
23ec2     00          | 	byte	0
23ec3                 | LR__4100
23ec3     2B          | 	byte	"+"
23ec4     00          | 	byte	0
23ec5                 | LR__4101
23ec5     2B          | 	byte	"+"
23ec6     00          | 	byte	0
23ec7                 | LR__4102
23ec7     2D          | 	byte	"-"
23ec8     00          | 	byte	0
23ec9                 | LR__4103
23ec9     2D          | 	byte	"-"
23eca     00          | 	byte	0
23ecb                 | LR__4104
23ecb     3C          | 	byte	"<"
23ecc     00          | 	byte	0
23ecd                 | LR__4105
23ecd     3E          | 	byte	">"
23ece     00          | 	byte	0
23ecf                 | LR__4106
23ecf     22          | 	byte	34
23ed0     00          | 	byte	0
23ed1                 | LR__4107
23ed1     22          | 	byte	34
23ed2     00          | 	byte	0
23ed3                 | LR__4108
23ed3                 | 	byte	
23ed3     00          | 	byte	0
23ed4                 | LR__4109
23ed4     6C 6F 61 64 | 	byte	"load"
23ed8     00          | 	byte	0
23ed9                 | LR__4110
23ed9     73 61 76 65 | 	byte	"save"
23edd     00          | 	byte	0
23ede                 | LR__4111
23ede     62 72 75 6E | 	byte	"brun"
23ee2     00          | 	byte	0
23ee3                 | LR__4112
23ee3     6D 6F 75 73 
23ee7     65          | 	byte	"mouse"
23ee8     00          | 	byte	0
23ee9                 | LR__4113
23ee9     63 75 72 73 
23eed     6F 72       | 	byte	"cursor"
23eef     00          | 	byte	0
23ef0                 | LR__4114
23ef0     63 6C 69 63 
23ef4     6B          | 	byte	"click"
23ef5     00          | 	byte	0
23ef6                 | LR__4115
23ef6     6F 6E       | 	byte	"on"
23ef8     00          | 	byte	0
23ef9                 | LR__4116
23ef9     31          | 	byte	"1"
23efa     00          | 	byte	0
23efb                 | LR__4117
23efb     6F 66 66    | 	byte	"off"
23efe     00          | 	byte	0
23eff                 | LR__4118
23eff     30          | 	byte	"0"
23f00     00          | 	byte	0
23f01                 | LR__4119
23f01                 | 	byte	
23f01     00          | 	byte	0
23f02                 | LR__4120
23f02                 | 	byte	
23f02     00          | 	byte	0
23f03                 | LR__4121
23f03                 | 	byte	
23f03     00          | 	byte	0
23f04                 | LR__4122
23f04                 | 	byte	
23f04     00          | 	byte	0
23f05                 | LR__4123
23f05     20 55 73 65 
23f09     72 20 66 75 
23f0d     6E 63 74 69 
23f11     6F 6E 73 20 
23f15     61 6E 64 20 
23f19     61 72 72 61 
23f1d     79 73 20 6E 
23f21     6F 74 20 79 
23f25     65 74 20 69 
23f29     6D 70 6C 65 
23f2d     6D 65 6E 74 
23f31     65 64       | 	byte	" User functions and arrays not yet implemented"
23f33     00          | 	byte	0
23f34                 | LR__4124
23f34                 | 	byte	
23f34     00          | 	byte	0
23f35                 | LR__4125
23f35                 | 	byte	
23f35     00          | 	byte	0
23f36                 | LR__4126
23f36     52 65 61 64 
23f3a     79          | 	byte	"Ready"
23f3b     00          | 	byte	0
23f3c                 | LR__4127
23f3c     2B          | 	byte	"+"
23f3d     00          | 	byte	0
23f3e                 | LR__4128
23f3e     2D          | 	byte	"-"
23f3f     00          | 	byte	0
23f40                 | LR__4129
23f40     6F 72       | 	byte	"or"
23f42     00          | 	byte	0
23f43                 | LR__4130
23f43     78 6F 72    | 	byte	"xor"
23f46     00          | 	byte	0
23f47                 | LR__4131
23f47     2A          | 	byte	"*"
23f48     00          | 	byte	0
23f49                 | LR__4132
23f49     2F          | 	byte	"/"
23f4a     00          | 	byte	0
23f4b                 | LR__4133
23f4b     61 6E 64    | 	byte	"and"
23f4e     00          | 	byte	0
23f4f                 | LR__4134
23f4f     64 69 76    | 	byte	"div"
23f52     00          | 	byte	0
23f53                 | LR__4135
23f53     6D 6F 64    | 	byte	"mod"
23f56     00          | 	byte	0
23f57                 | LR__4136
23f57     73 68 6C    | 	byte	"shl"
23f5a     00          | 	byte	0
23f5b                 | LR__4137
23f5b     73 68 72    | 	byte	"shr"
23f5e     00          | 	byte	0
23f5f                 | LR__4138
23f5f     5E          | 	byte	"^"
23f60     00          | 	byte	0
23f61                 | LR__4139
23f61     6E 6F 74    | 	byte	"not"
23f64     00          | 	byte	0
23f65                 | LR__4140
23f65     40          | 	byte	"@"
23f66     00          | 	byte	0
23f67                 | LR__4141
23f67     3D          | 	byte	"="
23f68     00          | 	byte	0
23f69                 | LR__4142
23f69     3E 3D       | 	byte	">="
23f6b     00          | 	byte	0
23f6c                 | LR__4143
23f6c     3C 3D       | 	byte	"<="
23f6e     00          | 	byte	0
23f6f                 | LR__4144
23f6f     3C          | 	byte	"<"
23f70     00          | 	byte	0
23f71                 | LR__4145
23f71     3E          | 	byte	">"
23f72     00          | 	byte	0
23f73                 | LR__4146
23f73     3C 3E       | 	byte	"<>"
23f75     00          | 	byte	0
23f76                 | LR__4147
23f76     2B 2B       | 	byte	"++"
23f78     00          | 	byte	0
23f79                 | LR__4148
23f79     2D 2D       | 	byte	"--"
23f7b     00          | 	byte	0
23f7c                 | LR__4149
23f7c     2B          | 	byte	"+"
23f7d     00          | 	byte	0
23f7e                 | LR__4150
23f7e     2D          | 	byte	"-"
23f7f     00          | 	byte	0
23f80                 | LR__4151
23f80     3D          | 	byte	"="
23f81     00          | 	byte	0
23f82                 | LR__4152
23f82     2C          | 	byte	","
23f83     00          | 	byte	0
23f84                 | LR__4153
23f84     2A          | 	byte	"*"
23f85     00          | 	byte	0
23f86                 | LR__4154
23f86     2F          | 	byte	"/"
23f87     00          | 	byte	0
23f88                 | LR__4155
23f88     3B          | 	byte	";"
23f89     00          | 	byte	0
23f8a                 | LR__4156
23f8a     22          | 	byte	34
23f8b     00          | 	byte	0
23f8c                 | LR__4157
23f8c     5E          | 	byte	"^"
23f8d     00          | 	byte	0
23f8e                 | LR__4158
23f8e     29          | 	byte	")"
23f8f     00          | 	byte	0
23f90                 | LR__4159
23f90     28          | 	byte	"("
23f91     00          | 	byte	0
23f92                 | LR__4160
23f92     3A          | 	byte	":"
23f93     00          | 	byte	0
23f94                 | LR__4161
23f94     20          | 	byte	" "
23f95     00          | 	byte	0
23f96                 | LR__4162
23f96     3E          | 	byte	">"
23f97     00          | 	byte	0
23f98                 | LR__4163
23f98     3C          | 	byte	"<"
23f99     00          | 	byte	0
23f9a                 | LR__4164
23f9a     3D          | 	byte	"="
23f9b     00          | 	byte	0
23f9c                 | LR__4165
23f9c     63 6C 73    | 	byte	"cls"
23f9f     00          | 	byte	0
23fa0                 | LR__4166
23fa0     6E 65 77    | 	byte	"new"
23fa3     00          | 	byte	0
23fa4                 | LR__4167
23fa4     70 6C 6F 74 | 	byte	"plot"
23fa8     00          | 	byte	0
23fa9                 | LR__4168
23fa9     64 72 61 77 | 	byte	"draw"
23fad     00          | 	byte	0
23fae                 | LR__4169
23fae     70 72 69 6E 
23fb2     74          | 	byte	"print"
23fb3     00          | 	byte	0
23fb4                 | LR__4170
23fb4     63 69 72 63 
23fb8     6C 65       | 	byte	"circle"
23fba     00          | 	byte	0
23fbb                 | LR__4171
23fbb     66 63 69 72 
23fbf     63 6C 65    | 	byte	"fcircle"
23fc2     00          | 	byte	0
23fc3                 | LR__4172
23fc3     62 6F 78    | 	byte	"box"
23fc6     00          | 	byte	0
23fc7                 | LR__4173
23fc7     66 72 61 6D 
23fcb     65          | 	byte	"frame"
23fcc     00          | 	byte	0
23fcd                 | LR__4174
23fcd     63 6F 6C 6F 
23fd1     72          | 	byte	"color"
23fd2     00          | 	byte	0
23fd3                 | LR__4175
23fd3     70 72 69 6E 
23fd7     74          | 	byte	"print"
23fd8     00          | 	byte	0
23fd9                 | LR__4176
23fd9     6C 69 73 74 | 	byte	"list"
23fdd     00          | 	byte	0
23fde                 | LR__4177
23fde     72 75 6E    | 	byte	"run"
23fe1     00          | 	byte	0
23fe2                 | LR__4178
23fe2     67 6F 74 6F | 	byte	"goto"
23fe6     00          | 	byte	0
23fe7                 | LR__4179
23fe7     63 73 61 76 
23feb     65          | 	byte	"csave"
23fec     00          | 	byte	0
23fed                 | LR__4180
23fed     73 61 76 65 | 	byte	"save"
23ff1     00          | 	byte	0
23ff2                 | LR__4181
23ff2     6C 6F 61 64 | 	byte	"load"
23ff6     00          | 	byte	0
23ff7                 | LR__4182
23ff7     62 72 75 6E | 	byte	"brun"
23ffb     00          | 	byte	0
23ffc                 | LR__4183
23ffc     70 69 6E 77 
24000     72 69 74 65 | 	byte	"pinwrite"
24004     00          | 	byte	0
24005                 | LR__4184
24005     77 61 69 74 
24009     6D 73       | 	byte	"waitms"
2400b     00          | 	byte	0
2400c                 | LR__4185
2400c     77 61 69 74 
24010     76 62 6C    | 	byte	"waitvbl"
24013     00          | 	byte	0
24014                 | LR__4186
24014     69 66       | 	byte	"if"
24016     00          | 	byte	0
24017                 | LR__4187
24017     65 6C 73 65 | 	byte	"else"
2401b     00          | 	byte	0
2401c                 | LR__4188
2401c     74 68 65 6E | 	byte	"then"
24020     00          | 	byte	0
24021                 | LR__4189
24021     62 65 65 70 | 	byte	"beep"
24025     00          | 	byte	0
24026                 | LR__4190
24026     64 69 72    | 	byte	"dir"
24029     00          | 	byte	0
2402a                 | LR__4191
2402a     66 6F 72    | 	byte	"for"
2402d     00          | 	byte	0
2402e                 | LR__4192
2402e     6E 65 78 74 | 	byte	"next"
24032     00          | 	byte	0
24033                 | LR__4193
24033     70 61 70 65 
24037     72          | 	byte	"paper"
24038     00          | 	byte	0
24039                 | LR__4194
24039     69 6E 6B    | 	byte	"ink"
2403c     00          | 	byte	0
2403d                 | LR__4195
2403d     66 6F 6E 74 | 	byte	"font"
24041     00          | 	byte	0
24042                 | LR__4196
24042     6D 6F 64 65 | 	byte	"mode"
24046     00          | 	byte	0
24047                 | LR__4197
24047     6D 6F 75 73 
2404b     65          | 	byte	"mouse"
2404c     00          | 	byte	0
2404d                 | LR__4198
2404d     63 75 72 73 
24051     6F 72       | 	byte	"cursor"
24053     00          | 	byte	0
24054                 | LR__4199
24054     63 6C 69 63 
24058     6B          | 	byte	"click"
24059     00          | 	byte	0
2405a                 | LR__4200
2405a     64 65 66 73 
2405e     70 72 69 74 
24062     65          | 	byte	"defsprite"
24063     00          | 	byte	0
24064                 | LR__4201
24064     73 70 72 69 
24068     74 65       | 	byte	"sprite"
2406a     00          | 	byte	0
2406b                 | LR__4202
2406b     77 61 69 74 
2406f     63 6C 6F 63 
24073     6B          | 	byte	"waitclock"
24074     00          | 	byte	0
24075                 | LR__4203
24075     66 69 6C 6C | 	byte	"fill"
24079     00          | 	byte	0
2407a                 | LR__4204
2407a     64 69 6D    | 	byte	"dim"
2407d     00          | 	byte	0
2407e                 | LR__4205
2407e     72 6E 64    | 	byte	"rnd"
24081     00          | 	byte	0
24082                 | LR__4206
24082     6D 6F 75 73 
24086     65 78       | 	byte	"mousex"
24088     00          | 	byte	0
24089                 | LR__4207
24089     6D 6F 75 73 
2408d     65 79       | 	byte	"mousey"
2408f     00          | 	byte	0
24090                 | LR__4208
24090     6D 6F 75 73 
24094     65 6B       | 	byte	"mousek"
24096     00          | 	byte	0
24097                 | LR__4209
24097     6D 6F 75 73 
2409b     65 77       | 	byte	"mousew"
2409d     00          | 	byte	0
2409e                 | LR__4210
2409e     67 65 74 74 
240a2     69 6D 65    | 	byte	"gettime"
240a5     00          | 	byte	0
240a6                 | LR__4211
240a6     73 69 6E    | 	byte	"sin"
240a9     00          | 	byte	0
240aa                 | LR__4212
240aa     73 74 69 63 
240ae     6B          | 	byte	"stick"
240af     00          | 	byte	0
240b0                 | LR__4213
240b0     73 74 72 69 
240b4     67          | 	byte	"strig"
240b5     00          | 	byte	0
240b6                 | LR__4214
240b6     67 65 74 70 
240ba     69 78 65 6C | 	byte	"getpixel"
240be     00          | 	byte	0
240bf                 | LR__4215
240bf     61          | 	byte	"a"
240c0     00          | 	byte	0
240c1                 | LR__4216
240c1     7A          | 	byte	"z"
240c2     00          | 	byte	0
240c3                 | LR__4217
240c3     5F          | 	byte	"_"
240c4     00          | 	byte	0
240c5                 | LR__4218
240c5     61          | 	byte	"a"
240c6     00          | 	byte	0
240c7                 | LR__4219
240c7     7A          | 	byte	"z"
240c8     00          | 	byte	0
240c9                 | LR__4220
240c9     30          | 	byte	"0"
240ca     00          | 	byte	0
240cb                 | LR__4221
240cb     39          | 	byte	"9"
240cc     00          | 	byte	0
240cd                 | LR__4222
240cd     5F          | 	byte	"_"
240ce     00          | 	byte	0
240cf                 | LR__4223
240cf     2E          | 	byte	"."
240d0     00          | 	byte	0
240d1                 | LR__4224
240d1     61          | 	byte	"a"
240d2     00          | 	byte	0
240d3                 | LR__4225
240d3     7A          | 	byte	"z"
240d4     00          | 	byte	0
240d5                 | LR__4226
240d5     30          | 	byte	"0"
240d6     00          | 	byte	0
240d7                 | LR__4227
240d7     39          | 	byte	"9"
240d8     00          | 	byte	0
240d9                 | LR__4228
240d9     5F          | 	byte	"_"
240da     00          | 	byte	0
240db                 | LR__4229
240db     24          | 	byte	"$"
240dc     00          | 	byte	0
240dd                 | LR__4230
240dd     25          | 	byte	"%"
240de     00          | 	byte	0
240df                 | LR__4231
240df     21          | 	byte	"!"
240e0     00          | 	byte	0
240e1                 | LR__4232
240e1     30          | 	byte	"0"
240e2     00          | 	byte	0
240e3                 | LR__4233
240e3     39          | 	byte	"9"
240e4     00          | 	byte	0
240e5                 | LR__4234
240e5     2E          | 	byte	"."
240e6     00          | 	byte	0
240e7                 | LR__4235
240e7     24          | 	byte	"$"
240e8     00          | 	byte	0
240e9                 | LR__4236
240e9     25          | 	byte	"%"
240ea     00          | 	byte	0
240eb                 | LR__4237
240eb     2D          | 	byte	"-"
240ec     00          | 	byte	0
240ed                 | LR__4238
240ed     2E          | 	byte	"."
240ee     00          | 	byte	0
240ef                 | LR__4239
240ef     30          | 	byte	"0"
240f0     00          | 	byte	0
240f1                 | LR__4240
240f1     39          | 	byte	"9"
240f2     00          | 	byte	0
240f3                 | LR__4241
240f3     5F          | 	byte	"_"
240f4     00          | 	byte	0
240f5                 | LR__4242
240f5     2E          | 	byte	"."
240f6     00          | 	byte	0
240f7                 | LR__4243
240f7     45          | 	byte	"E"
240f8     00          | 	byte	0
240f9                 | LR__4244
240f9     65          | 	byte	"e"
240fa     00          | 	byte	0
240fb                 | LR__4245
240fb     2D          | 	byte	"-"
240fc     00          | 	byte	0
240fd                 | LR__4246
240fd     2D          | 	byte	"-"
240fe     00          | 	byte	0
240ff                 | LR__4247
240ff     65          | 	byte	"e"
24100     00          | 	byte	0
24101                 | LR__4248
24101     2E          | 	byte	"."
24102     00          | 	byte	0
24103                 | LR__4249
24103     45          | 	byte	"E"
24104     00          | 	byte	0
24105                 | LR__4250
24105     65          | 	byte	"e"
24106     00          | 	byte	0
24107                 | LR__4251
24107     30          | 	byte	"0"
24108     00          | 	byte	0
24109                 | LR__4252
24109     39          | 	byte	"9"
2410a     00          | 	byte	0
2410b                 | LR__4253
2410b     24          | 	byte	"$"
2410c     00          | 	byte	0
2410d                 | LR__4254
2410d     25          | 	byte	"%"
2410e     00          | 	byte	0
2410f                 | LR__4255
2410f     2D          | 	byte	"-"
24110     00          | 	byte	0
24111                 | LR__4256
24111     30          | 	byte	"0"
24112     00          | 	byte	0
24113                 | LR__4257
24113     39          | 	byte	"9"
24114     00          | 	byte	0
24115                 | LR__4258
24115     5F          | 	byte	"_"
24116     00          | 	byte	0
24117                 | LR__4259
24117     30          | 	byte	"0"
24118     00          | 	byte	0
24119                 | LR__4260
24119     39          | 	byte	"9"
2411a     00          | 	byte	0
2411b                 | LR__4261
2411b     5F          | 	byte	"_"
2411c     00          | 	byte	0
2411d                 | LR__4262
2411d     22          | 	byte	34
2411e     00          | 	byte	0
2411f                 | LR__4263
2411f     22          | 	byte	34
24120     00          | 	byte	0
24121                 | LR__4264
24121     28          | 	byte	"("
24122     00          | 	byte	0
24123                 | LR__4265
24123     61 73       | 	byte	"as"
24125     00          | 	byte	0
24126                 | LR__4266
24126     61 73       | 	byte	"as"
24128     00          | 	byte	0
24129                 | LR__4267
24129     2C          | 	byte	","
2412a     00          | 	byte	0
2412b                 | LR__4268
2412b     29          | 	byte	")"
2412c     00          | 	byte	0
2412d                 | LR__4269
2412d     29          | 	byte	")"
2412e     00          | 	byte	0
2412f                 | LR__4270
2412f     61 73       | 	byte	"as"
24131     00          | 	byte	0
24132                 | LR__4271
24132     62 79 74 65 | 	byte	"byte"
24136     00          | 	byte	0
24137                 | LR__4272
24137     75 62 79 74 
2413b     65          | 	byte	"ubyte"
2413c     00          | 	byte	0
2413d                 | LR__4273
2413d     73 68 6F 72 
24141     74          | 	byte	"short"
24142     00          | 	byte	0
24143                 | LR__4274
24143     75 73 68 6F 
24147     72 74       | 	byte	"ushort"
24149     00          | 	byte	0
2414a                 | LR__4275
2414a     6C 6F 6E 67 | 	byte	"long"
2414e     00          | 	byte	0
2414f                 | LR__4276
2414f     69 6E 74 65 
24153     67 65 72    | 	byte	"integer"
24156     00          | 	byte	0
24157                 | LR__4277
24157     75 6C 6F 6E 
2415b     67          | 	byte	"ulong"
2415c     00          | 	byte	0
2415d                 | LR__4278
2415d     69 6E 74 36 
24161     34          | 	byte	"int64"
24162     00          | 	byte	0
24163                 | LR__4279
24163     75 69 6E 74 
24167     36 34       | 	byte	"uint64"
24169     00          | 	byte	0
2416a                 | LR__4280
2416a     73 69 6E 67 
2416e     6C 65       | 	byte	"single"
24170     00          | 	byte	0
24171                 | LR__4281
24171     64 6F 75 62 
24175     6C 65       | 	byte	"double"
24177     00          | 	byte	0
24178                 | LR__4282
24178     73 74 72 69 
2417c     6E 67       | 	byte	"string"
2417e     00          | 	byte	0
2417f                 | LR__4283
2417f     74 6F       | 	byte	"to"
24181     00          | 	byte	0
24182                 | LR__4284
24182     73 74 65 70 | 	byte	"step"
24186     00          | 	byte	0
24187                 | LR__4285
24187     57 65 20 68 
2418b     61 76 65 20 
2418f     61 20 73 6C 
24193     6F 77 20 67 
24197     6F 74 6F 2C 
2419b     20 74 6F 64 
2419f     6F 20 20    | 	byte	"We have a slow goto, todo  "
241a2     00          | 	byte	0
241a3                 | LR__4286
241a3     6E 6F 6E 61 
241a7     6D 65 2E 62 
241ab     61 73       | 	byte	"noname.bas"
241ad     00          | 	byte	0
241ae                 | LR__4287
241ae                 | 	byte	
241ae     00          | 	byte	0
241af                 | LR__4288
241af     6E 6F 6E 61 
241b3     6D 65 2E 62 
241b7     61 73       | 	byte	"noname.bas"
241b9     00          | 	byte	0
241ba                 | LR__4289
241ba     2F          | 	byte	"/"
241bb     00          | 	byte	0
241bc                 | LR__4290
241bc                 | 	byte	
241bc     00          | 	byte	0
241bd                 | LR__4291
241bd                 | 	byte	
241bd     00          | 	byte	0
241be                 | LR__4292
241be     6E 6F 6E 61 
241c2     6D 65 2E 62 
241c6     61 73       | 	byte	"noname.bas"
241c8     00          | 	byte	0
241c9                 | LR__4293
241c9     2F          | 	byte	"/"
241ca     00          | 	byte	0
241cb                 | LR__4294
241cb     53 79 73 74 
241cf     65 6D 20 65 
241d3     72 72 6F 72 
241d7     20          | 	byte	"System error "
241d8     00          | 	byte	0
241d9                 | LR__4295
241d9     3A 20       | 	byte	": "
241db     00          | 	byte	0
241dc                 | LR__4296
241dc     2F          | 	byte	"/"
241dd     00          | 	byte	0
241de                 | LR__4297
241de     30          | 	byte	"0"
241df     00          | 	byte	0
241e0                 | LR__4298
241e0     39          | 	byte	"9"
241e1     00          | 	byte	0
241e2                 | LR__4299
241e2                 | 	byte	
241e2     00          | 	byte	0
241e3                 | LR__4300
241e3     53 74 6F 70 
241e7     70 65 64 20 
241eb     61 74 20 6C 
241ef     69 6E 65 20 | 	byte	"Stopped at line "
241f3     00          | 	byte	0
241f4                 | LR__4301
241f4     45 72 72 6F 
241f8     72 20       | 	byte	"Error "
241fa     00          | 	byte	0
241fb                 | LR__4302
241fb     3A 20       | 	byte	": "
241fd     00          | 	byte	0
241fe                 | LR__4303
241fe     72 6E 64 3A 
24202     20          | 	byte	"rnd: "
24203     00          | 	byte	0
24204                 | LR__4304
24204     72 6E 64 3A 
24208     20          | 	byte	"rnd: "
24209     00          | 	byte	0
2420a                 | LR__4305
2420a     73 69 6E 3A 
2420e     20          | 	byte	"sin: "
2420f     00          | 	byte	0
24210                 | LR__4306
24210     73 69 6E 3A 
24214     20          | 	byte	"sin: "
24215     00          | 	byte	0
24216                 | LR__4307
24216     73 74 69 63 
2421a     6B 3A 20    | 	byte	"stick: "
2421d     00          | 	byte	0
2421e                 | LR__4308
2421e     73 74 72 69 
24222     67 3A 20    | 	byte	"strig: "
24225     00          | 	byte	0
24226                 | LR__4309
24226     67 65 74 70 
2422a     69 78 65 6C 
2422e     3A 20       | 	byte	"getpixel: "
24230     00          | 	byte	0
24231                 | LR__4310
24231                 | 	byte	
24231     00          | 	byte	0
24232                 | LR__4311
24232     2F 73 64 2F 
24236     62 61 73    | 	byte	"/sd/bas"
24239     00          | 	byte	0
2423a                 | LR__4312
2423a     57 6F 72 6B 
2423e     69 6E 67 20 
24242     64 69 72 65 
24246     63 74 6F 72 
2424a     79 3A 20    | 	byte	"Working directory: "
2424d     00          | 	byte	0
2424e                 | LR__4313
2424e     2A          | 	byte	"*"
2424f     00          | 	byte	0
24250                 | LR__4314
24250                 | 	byte	
24250     00          | 	byte	0
24251                 | LR__4315
24251     5B 64 69 72 
24255     5D 20       | 	byte	"[dir] "
24257     00          | 	byte	0
24258                 | LR__4316
24258     2A          | 	byte	"*"
24259     00          | 	byte	0
2425a                 | LR__4317
2425a                 | 	byte	
2425a     00          | 	byte	0
2425b                 | LR__4318
2425b     2D 2D 2D 2D 
2425f     2D 6D 6F 72 
24263     65 2C 20 70 
24267     72 65 73 73 
2426b     20 61 6E 79 
2426f     20 6B 65 79 | 	byte	"-----more, press any key"
24273     00          | 	byte	0
24274                 | LR__4319
24274     20 20 20 20 
      ...             
2428c     20 20 20 20 
24290     20          | 	byte	"                             "
24291     00          | 	byte	0
24292                 | LR__4320
24292     2F          | 	byte	"/"
24293     00          | 	byte	0
24294                 | LR__4321
24294     2F 73 64 2F 
24298     62 69 6E 2F | 	byte	"/sd/bin/"
2429c     00          | 	byte	0
2429d                 | LR__4322
2429d     53 79 73 74 
242a1     65 6D 20 65 
242a5     72 72 6F 72 
242a9     20          | 	byte	"System error "
242aa     00          | 	byte	0
242ab                 | LR__4323
242ab     3A 20       | 	byte	": "
242ad     00          | 	byte	0
242ae                 | LR__4324
242ae                 | 	byte	
242ae     00          | 	byte	0
242af                 | LR__4325
242af     45 78 70 65 
242b3     63 74 65 64 
242b7     20 6E 75 6D 
242bb     62 65 72 2C 
242bf     20 67 6F 74 
242c3     20 73 6F 6D 
242c7     65 74 68 69 
242cb     6E 67 20 65 
242cf     6C 73 65 2E | 	byte	"Expected number, got something else."
242d3     00          | 	byte	0
242d4                 | LR__4326
242d4     43 61 6E 6E 
242d8     6F 74 20 61 
242dc     64 64 20 61 
242e0     20 6E 75 6D 
242e4     62 65 72 20 
242e8     74 6F 20 61 
242ec     20 73 74 72 
242f0     69 6E 67 2E | 	byte	"Cannot add a number to a string."
242f4     00          | 	byte	0
242f5                 | LR__4327
242f5     43 61 6E 6E 
242f9     6F 74 20 73 
242fd     75 62 73 74 
24301     72 61 63 74 
24305     20 73 74 72 
24309     69 6E 67 73 
2430d     2E          | 	byte	"Cannot substract strings."
2430e     00          | 	byte	0
2430f                 | LR__4328
2430f     55 6E 6B 6E 
24313     6F 77 6E 20 
24317     65 72 72 6F 
2431b     72 20 77 68 
2431f     69 6C 65 20 
24323     61 64 64 69 
24327     6E 67 2E    | 	byte	"Unknown error while adding."
2432a     00          | 	byte	0
2432b                 | LR__4329
2432b     55 6E 6B 6E 
2432f     6F 77 6E 20 
24333     65 72 72 6F 
24337     72 20 77 68 
2433b     69 6C 65 20 
2433f     73 75 62 73 
24343     74 72 61 63 
24347     74 69 6E 67 
2434b     2E          | 	byte	"Unknown error while substracting."
2434c     00          | 	byte	0
2434d                 | LR__4330
2434d     43 61 6E 6E 
24351     6F 74 20 64 
24355     6F 20 6C 6F 
24359     67 69 63 20 
2435d     6F 70 65 72 
24361     61 74 69 6F 
24365     6E 20 6F 6E 
24369     20 73 74 72 
2436d     69 6E 67 20 
24371     6F 72 20 66 
24375     6C 6F 61 74 
24379     2E          | 	byte	"Cannot do logic operation on string or float."
2437a     00          | 	byte	0
2437b                 | LR__4331
2437b     55 6E 6B 6E 
2437f     6F 77 6E 20 
24383     65 72 72 6F 
24387     72 20 77 68 
2438b     69 6C 65 20 
2438f     64 6F 69 6E 
24393     67 20 6C 6F 
24397     67 69 63 20 
2439b     6F 70 65 72 
2439f     61 74 69 6F 
243a3     6E 2E       | 	byte	"Unknown error while doing logic operation."
243a5     00          | 	byte	0
243a6                 | LR__4332
243a6     43 61 6E 6E 
243aa     6F 74 20 6D 
243ae     75 6C 74 69 
243b2     70 6C 79 20 
243b6     73 74 72 69 
243ba     6E 67 73 2E | 	byte	"Cannot multiply strings."
243be     00          | 	byte	0
243bf                 | LR__4333
243bf     55 6E 6B 6E 
243c3     6F 77 6E 20 
243c7     65 72 72 6F 
243cb     72 20 77 68 
243cf     69 6C 65 20 
243d3     6D 75 6C 74 
243d7     69 70 6C 79 
243db     69 6E 67 2E | 	byte	"Unknown error while multiplying."
243df     00          | 	byte	0
243e0                 | LR__4334
243e0     43 61 6E 6E 
243e4     6F 74 20 64 
243e8     69 76 69 64 
243ec     65 20 73 74 
243f0     72 69 6E 67 
243f4     73 2E       | 	byte	"Cannot divide strings."
243f6     00          | 	byte	0
243f7                 | LR__4335
243f7     55 6E 6B 6E 
243fb     6F 77 6E 20 
243ff     65 72 72 6F 
24403     72 20 77 68 
24407     69 6C 65 20 
2440b     64 69 76 69 
2440f     64 69 6E 67 
24413     2E          | 	byte	"Unknown error while dividing."
24414     00          | 	byte	0
24415                 | LR__4336
24415     43 61 6E 6E 
24419     6F 74 20 63 
2441d     6F 6D 70 75 
24421     74 65 20 61 
24425     20 70 6F 77 
24429     65 72 20 6F 
2442d     66 20 61 20 
24431     73 74 72 69 
24435     6E 67 2E    | 	byte	"Cannot compute a power of a string."
24438     00          | 	byte	0
24439                 | LR__4337
24439     55 6E 6B 6E 
2443d     6F 77 6E 20 
24441     65 72 72 6F 
24445     72 20 77 68 
24449     69 6C 65 20 
2444d     63 6F 6D 70 
24451     75 74 69 6E 
24455     67 20 61 20 
24459     70 6F 77 65 
2445d     72 2E       | 	byte	"Unknown error while computing a power."
2445f     00          | 	byte	0
24460                 | LR__4338
24460     52 69 67 68 
24464     74 20 70 61 
24468     72 65 6E 74 
2446c     68 65 73 69 
24470     73 20 65 78 
24474     70 65 63 74 
24478     65 64 2E    | 	byte	"Right parenthesis expected."
2447b     00          | 	byte	0
2447c                 | LR__4339
2447c     45 78 70 65 
24480     63 74 65 64 
24484     20 73 74 72 
24488     69 6E 67 2E | 	byte	"Expected string."
2448c     00          | 	byte	0
2448d                 | LR__4340
2448d     45 78 70 65 
24491     63 74 65 64 
24495     20 66 6C 6F 
24499     61 74 2E    | 	byte	"Expected float."
2449c     00          | 	byte	0
2449d                 | LR__4341
2449d     45 78 70 65 
244a1     63 74 65 64 
244a5     20 75 6E 73 
244a9     69 67 6E 65 
244ad     64 20 69 6E 
244b1     74 65 67 65 
244b5     72 2E       | 	byte	"Expected unsigned integer."
244b7     00          | 	byte	0
244b8                 | LR__4342
244b8     45 78 70 65 
244bc     63 74 65 64 
244c0     20 69 6E 74 
244c4     65 67 65 72 
244c8     2E          | 	byte	"Expected integer."
244c9     00          | 	byte	0
244ca                 | LR__4343
244ca     4E 6F 20 6D 
244ce     6F 72 65 20 
244d2     76 61 72 69 
244d6     61 62 6C 65 
244da     20 73 6C 6F 
244de     74 73 2E    | 	byte	"No more variable slots."
244e1     00          | 	byte	0
244e2                 | LR__4344
244e2     56 61 72 69 
244e6     61 62 6C 65 
244ea     20 6E 6F 74 
244ee     20 66 6F 75 
244f2     6E 64 2E    | 	byte	"Variable not found."
244f5     00          | 	byte	0
244f6                 | LR__4345
244f6     43 6F 6D 6D 
244fa     61 20 65 78 
244fe     70 65 63 74 
24502     65 64 2E    | 	byte	"Comma expected."
24505     00          | 	byte	0
24506                 | LR__4346
24506     43 6F 6D 6D 
2450a     61 20 6F 72 
2450e     20 73 65 6D 
24512     69 63 6F 6C 
24516     6F 6E 20 65 
2451a     78 70 65 63 
2451e     74 65 64 2E | 	byte	"Comma or semicolon expected."
24522     00          | 	byte	0
24523                 | LR__4347
24523     55 6E 6B 6E 
24527     6F 77 6E 20 
2452b     63 6F 6D 6D 
2452f     61 6E 64 2E | 	byte	"Unknown command."
24533     00          | 	byte	0
24534                 | LR__4348
24534     53 74 61 63 
24538     6B 20 75 6E 
2453c     64 65 72 66 
24540     6C 6F 77 2E | 	byte	"Stack underflow."
24544     00          | 	byte	0
24545                 | LR__4349
24545     43 61 6E 6E 
24549     6F 74 20 65 
2454d     78 65 63 75 
24551     74 65 20 67 
24555     6F 74 6F 20 
24559     69 6E 20 74 
2455d     68 65 20 69 
24561     6D 6D 65 64 
24565     69 61 74 65 
24569     20 6D 6F 64 
2456d     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2456f     00          | 	byte	0
24570                 | LR__4350
24570     43 61 6E 6E 
24574     6F 74 20 6C 
24578     6F 61 64 20 
2457c     66 72 6F 6D 
24580     20 74 68 69 
24584     73 20 66 69 
24588     6C 65 2E    | 	byte	"Cannot load from this file."
2458b     00          | 	byte	0
2458c                 | LR__4351
2458c     54 68 65 20 
24590     70 72 6F 67 
24594     72 61 6D 20 
24598     69 73 20 65 
2459c     6D 70 74 79 
245a0     2E          | 	byte	"The program is empty."
245a1     00          | 	byte	0
245a2                 | LR__4352
245a2     49 66 20 61 
245a6     66 74 65 72 
245aa     20 69 66 2E | 	byte	"If after if."
245ae     00          | 	byte	0
245af                 | LR__4353
245af     45 6D 70 74 
245b3     79 20 65 78 
245b7     70 72 65 73 
245bb     73 69 6F 6E 
245bf     2E          | 	byte	"Empty expression."
245c0     00          | 	byte	0
245c1                 | LR__4354
245c1     53 74 72 69 
245c5     6E 67 20 65 
245c9     78 70 65 63 
245cd     74 65 64 2E | 	byte	"String expected."
245d1     00          | 	byte	0
245d2                 | LR__4355
245d2     49 6E 74 65 
245d6     72 70 72 65 
245da     74 65 72 20 
245de     69 6E 74 65 
245e2     72 6E 61 6C 
245e6     20 65 72 72 
245ea     6F 72 2E    | 	byte	"Interpreter internal error."
245ed     00          | 	byte	0
245ee                 | LR__4356
245ee     45 78 70 65 
245f2     63 74 65 64 
245f6     20 61 73 73 
245fa     69 67 6E 2E | 	byte	"Expected assign."
245fe     00          | 	byte	0
245ff                 | LR__4357
245ff     45 78 70 65 
24603     63 74 65 64 
24607     20 27 74 6F 
2460b     27 2E       | 	byte	"Expected 'to'."
2460d     00          | 	byte	0
2460e                 | LR__4358
2460e     45 78 70 65 
24612     63 74 65 64 
24616     20 69 6E 74 
2461a     65 67 65 72 
2461e     20 76 61 72 
24622     69 61 62 6C 
24626     65 2E       | 	byte	"Expected integer variable."
24628     00          | 	byte	0
24629                 | LR__4359
24629     55 6E 69 6E 
2462d     69 74 69 61 
24631     6C 69 7A 65 
24635     64 20 76 61 
24639     72 69 61 62 
2463d     6C 65 20 69 
24641     6E 20 27 6E 
24645     65 78 74 27 
24649     2C 20 75 73 
2464d     65 20 27 66 
24651     6F 72 27 20 
24655     62 65 66 6F 
24659     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2465c     00          | 	byte	0
2465d                 | LR__4360
2465d     4E 6F 20 6D 
24661     6F 72 65 20 
24665     73 6C 6F 74 
24669     73 20 66 6F 
2466d     72 20 27 66 
24671     6F 72 27 2E | 	byte	"No more slots for 'for'."
24675     00          | 	byte	0
24676                 | LR__4361
24676     27 4E 65 78 
2467a     74 27 20 64 
2467e     6F 65 73 6E 
24682     27 74 20 6D 
24686     61 74 63 68 
2468a     20 27 66 6F 
2468e     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
24691     00          | 	byte	0
24692                 | LR__4362
24692     27 47 6F 74 
24696     6F 27 20 74 
2469a     61 72 67 65 
2469e     74 20 6C 69 
246a2     6E 65 20 6E 
246a6     6F 74 20 66 
246aa     6F 75 6E 64 
246ae     2E          | 	byte	"'Goto' target line not found."
246af     00          | 	byte	0
246b0                 | LR__4363
246b0     42 61 64 20 
246b4     6E 75 6D 62 
246b8     65 72 20 6F 
246bc     66 20 70 61 
246c0     72 61 6D 65 
246c4     74 65 72 73 | 	byte	"Bad number of parameters"
246c8     00          | 	byte	0
246c9                 | LR__4364
246c9     46 75 6E 63 
246cd     74 69 6F 6E 
246d1     20 75 6E 64 
246d5     65 66 69 6E 
246d9     65 64 20 66 
246dd     6F 72 20 73 
246e1     74 72 69 6E 
246e5     67 73       | 	byte	"Function undefined for strings"
246e7     00          | 	byte	0
246e8                 | LR__4365
246e8     42 61 64 20 
246ec     70 61 72 61 
246f0     6D 65 74 65 
246f4     72 2E       | 	byte	"Bad parameter."
246f6     00          | 	byte	0
246f7                 | LR__4366
246f7     43 61 6E 6E 
246fb     6F 74 20 64 
246ff     65 63 6C 61 
24703     72 65 20 61 
24707     6E 20 61 72 
2470b     72 61 79 3A 
2470f     20 74 68 65 
24713     20 76 61 72 
24717     69 61 62 6C 
2471b     65 20 65 78 
2471f     69 73 74 73 
24723     2E          | 	byte	"Cannot declare an array: the variable exists."
24724     00          | 	byte	0
24725                 | LR__4367
24725     45 78 70 65 
24729     63 74 65 64 
2472d     20 27 28 27 
24731     2E          | 	byte	"Expected '('."
24732     00          | 	byte	0
24733                 | LR__4368
24733     45 78 70 65 
24737     63 74 65 64 
2473b     20 27 29 27 
2473f     20 6F 72 20 
24743     27 2C 27 2E | 	byte	"Expected ')' or ','."
24747     00          | 	byte	0
24748                 | LR__4369
24748     4E 6F 20 6D 
2474c     6F 72 65 20 
24750     74 68 61 6E 
24754     20 33 20 64 
24758     69 6D 65 6E 
2475c     73 69 6F 6E 
24760     73 20 73 75 
24764     70 70 6F 72 
24768     74 65 64    | 	byte	"No more than 3 dimensions supported"
2476b     00          | 	byte	0
2476c                 | LR__4370
2476c     56 61 72 69 
24770     61 62 6C 65 
24774     20 6E 61 6D 
24778     65 20 65 78 
2477c     70 65 63 74 
24780     65 64       | 	byte	"Variable name expected"
24782     00          | 	byte	0
24783                 | LR__4371
24783     54 79 70 65 
24787     20 6E 61 6D 
2478b     65 20 65 78 
2478f     70 65 63 74 
24793     65 64       | 	byte	"Type name expected"
24795     00          | 	byte	0
24796                 | LR__4372
24796     54 79 70 65 
2479a     20 6E 6F 74 
2479e     20 73 75 70 
247a2     70 6F 72 74 
247a6     65 64 20 79 
247aa     65 74       | 	byte	"Type not supported yet"
247ac     00          | 	byte	0
247ad                 | LR__4373
247ad     45 72 72 6F 
247b1     72 20       | 	byte	"Error "
247b3     00          | 	byte	0
247b4                 | LR__4374
247b4     3A 20       | 	byte	": "
247b6     00          | 	byte	0
247b7                 | LR__4375
247b7     2F 73 64    | 	byte	"/sd"
247ba     00          | 	byte	0
247bb                 | LR__4376
247bb     2F 73 64 2F 
247bf     62 61 73    | 	byte	"/sd/bas"
247c2     00          | 	byte	0
247c3                 | LR__4377
247c3     2F 73 64 2F 
247c7     62 61 73    | 	byte	"/sd/bas"
247ca     00          | 	byte	0
247cb                 | LR__4378
247cb     20 42 41 53 
247cf     49 43 20 62 
247d3     79 74 65 73 
247d7     20 66 72 65 
247db     65          | 	byte	" BASIC bytes free"
247dc     00          | 	byte	0
247dd                 | LR__4379
247dd     52 65 61 64 
247e1     79          | 	byte	"Ready"
247e2     00          | 	byte	0
247e3                 | LR__4380
247e3     20          | 	byte	" "
247e4     00          | 	byte	0
247e5                 | LR__4381
247e5     20          | 	byte	" "
247e6     00          | 	byte	0
247e7                 | LR__4382
247e7                 | 	byte	
247e7     00          | 	byte	0
247e8                 | LR__4383
247e8                 | 	byte	
247e8     00          | 	byte	0
247e9     00 00 00    | 	alignl
247ec                 | _dat_
247ec     00 00 00 00 
247f0     00 00 00 00 
247f4     00 00 00 00 
247f8     00 00 00 00 | 	byte	$00[16]
247fc     61 41 17 0E 
24800     62 42 00 00 
24804     63 43 19 10 
24808     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2480c     65 45 18 0F 
24810     66 46 00 00 
24814     67 47 00 00 
24818     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2481c     69 49 00 00 
24820     6A 4A 00 00 
24824     6B 4B 00 00 
24828     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2482c     6D 4D 00 00 
24830     6E 4E 1A 11 
24834     6F 4F 1E 15 
24838     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2483c     71 51 00 00 
24840     72 52 00 00 
24844     73 53 1B 12 
24848     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2484c     75 55 00 00 
24850     76 56 00 00 
24854     77 57 00 00 
24858     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2485c     79 59 00 00 
24860     7A 5A 1D 14 
24864     31 21 04 00 
24868     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2486c     33 23 06 00 
24870     34 24 07 00 
24874     35 25 08 00 
24878     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2487c     37 26 0A 00 
24880     38 2A 0B 00 
24884     39 28 0C 00 
24888     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2488c     8D 8D 00 00 
24890     9B 9B 00 00 
24894     88 88 00 00 
24898     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2489c     20 20 00 00 
248a0     2D 5F 00 00 
248a4     3D 2B 00 00 
248a8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
248ac     5D 7D 00 00 
248b0     5C 7C 00 00 
248b4     23 7E 00 00 
248b8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
248bc     27 22 00 00 
248c0     60 7E 03 00 
248c4     2C 3C 00 00 
248c8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
248cc     2F 3F 00 00 
248d0     B9 B9 00 00 
248d4     BA 00 00 00 
248d8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
248dc     BC 00 00 00 
248e0     BD 00 00 00 
248e4     BE 00 00 00 
248e8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
248ec     C0 00 00 00 
248f0     C1 00 00 00 
248f4     C2 00 00 00 
248f8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
248fc     C4 00 00 00 
24900     C5 00 00 00 
24904     C6 00 00 00 
24908     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2490c     C8 00 00 00 
24910     C9 00 00 00 
24914     CA 00 00 00 
24918     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2491c     7F 7F 00 00 
24920     CC 00 00 00 
24924     CD 00 00 00 
24928     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2492c     CF 00 00 00 
24930     D0 00 00 00 
24934     D1 00 00 00 
24938     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2493c     2F 2F 00 00 
24940     2A 2A 00 00 
24944     2D 2D 00 00 
24948     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2494c     8D 8D 00 00 
24950     31 31 00 00 
24954     32 32 00 00 
24958     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2495c     34 34 00 00 
24960     35 35 00 00 
24964     36 36 00 00 
24968     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2496c     38 38 00 00 
24970     39 39 00 00 
24974     30 30 00 00 
24978     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2497c     5C 7C 00 00 
24980     00 00 00 00 
24984     00 00 00 00 
24988     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2498c     00 00 00 00 
      ...             
249e4     00 00 00 00 
249e8     00 00 00 00 | 	byte	$00[96]
249ec     2B 00 A6 F2 
249f0     24 A7 09 80 
249f4     5B 88 4D 89 
249f8     80 88 A5 88 | atari_spl file "atari.spl"
249fc     6D 88 B8 88 
24a00     80 88 CB 88 
24a04     92 88 A5 88 
24a08     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
24a0c     A5 88 CA 88 
24a10     A6 88 DD 88 
24a14     B8 88 AB 89 
24a18     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
24a1c     C8 AD C6 F1 
24a20     91 06 B6 FF 
24a24     13 00 4A 00 
24a28     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
24a2c     5D 00 5E 00 
24a30     5D 00 5E 00 
24a34     5E 00 5D 00 
24a38     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
24a3c     38 00 83 00 
24a40     25 00 83 00 
24a44     C3 FE D1 04 
24a48     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
24a4c     48 88 38 85 
24a50     41 8A CB 88 
24a54     28 89 B8 88 
24a58     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
24a5c     15 89 03 89 
24a60     02 89 15 89 
24a64     16 89 15 89 
24a68     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
24a6c     15 89 3A 89 
24a70     72 89 E3 89 
24a74     52 83 AD 97 
24a78     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
24a7c     0C 02 B6 FF 
24a80     E1 00 A8 00 
24a84     F3 00 A8 00 
24a88     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
24a8c     CE 00 CD 00 
24a90     CD 00 BA 00 
24a94     E1 00 BB 00 
24a98     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
24a9c     DF 00 C9 FF 
24aa0     E6 01 B6 06 
24aa4     EE DD 8D 98 
24aa8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
24aac     97 89 73 89 
24ab0     3B 89 60 89 
24ab4     60 89 60 89 
24ab8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
24abc     73 89 72 89 
24ac0     85 89 73 89 
24ac4     AA 89 60 89 
24ac8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
24acc     E8 8A 18 86 
24ad0     92 88 A5 C2 
24ad4     E0 00 C3 05 
24ad8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
24adc     F2 00 64 01 
24ae0     06 01 3E 01 
24ae4     2B 01 2B 01 
24ae8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
24aec     2B 01 2A 01 
24af0     2B 01 2B 01 
24af4     2B 01 18 01 
24af8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
24afc     39 07 61 F3 
24b00     C0 AF 37 85 
24b04     0F 88 8B 8A 
24b08     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
24b0c     AB 89 D0 89 
24b10     AB 89 D0 89 
24b14     D0 89 CF 89 
24b18     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
24b1c     D0 89 F5 89 
24b20     BD 89 08 8A 
24b24     CF 89 E8 8A 
24b28     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
24b2c     53 B3 0D F8 
24b30     F4 07 38 00 
24b34     63 01 63 01 
24b38     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
24b3c     88 01 88 01 
24b40     76 01 88 01 
24b44     88 01 89 01 
24b48     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
24b4c     75 01 AE 01 
24b50     76 01 88 01 
24b54     4A 00 46 06 
24b58     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
24b5c     08 8A 9A 86 
24b60     33 8B 08 8A 
24b64     2D 8A F5 89 
24b68     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
24b6c     2D 8A 2D 8A 
24b70     2E 8A 1B 8A 
24b74     40 8A 2D 8A 
24b78     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
24b7c     2E 8A 79 8A 
24b80     66 8A C8 8B 
24b84     72 82 2B 97 
24b88     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
24b8c     1D 02 05 01 
24b90     F8 01 C0 01 
24b94     0B 02 C0 01 
24b98     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
24b9c     F9 01 D3 01 
24ba0     F8 01 D3 01 
24ba4     F8 01 D2 01 
24ba8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
24bac     E6 01 2B 01 
24bb0     8E 02 5F 07 
24bb4     F7 E2 ED 9C 
24bb8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
24bbc     E8 8A 78 8A 
24bc0     78 8A 65 8A 
24bc4     8B 8A 78 8A 
24bc8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
24bcc     8B 8A 9D 8A 
24bd0     9D 8A 8B 8A 
24bd4     C2 8A 78 8A 
24bd8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
24bdc     70 8C 18 86 
24be0     8B 8A 23 C9 
24be4     CB 03 C4 05 
24be8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
24bec     0B 02 7B 02 
24bf0     1E 02 55 02 
24bf4     30 02 43 02 
24bf8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
24bfc     43 02 44 02 
24c00     43 02 30 02 
24c04     68 02 31 02 
24c08     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
24c0c     07 08 3F F7 
24c10     73 B2 13 85 
24c14     15 89 ED 8B 
24c18     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
24c1c     B0 8A FB 8A 
24c20     D5 8A FA 8A 
24c24     E8 8A FB 8A 
24c28     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
24c2c     E8 8A 21 8B 
24c30     E7 8A 33 8B 
24c34     E8 8A 26 8C 
24c38     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
24c3c     8D B0 27 F6 
24c40     9C 08 AD 01 
24c44     7B 02 8D 02 
24c48     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
24c4c     A1 02 A0 02 
24c50     A1 02 A0 02 
24c54     A0 02 A0 02 
24c58     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
24c5c     7B 02 D8 02 
24c60     7B 02 C6 02 
24c64     3E 01 C3 05 
24c68     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
24c6c     00 8C 2A 86 
24c70     E0 8C FA 8A 
24c74     6A 8B FB 8A 
24c78     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
24c7c     45 8B 45 8B 
24c80     45 8B 6B 8B 
24c84     46 8B 59 8B 
24c88     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
24c8c     6B 8B 6B 8B 
24c90     6B 8B 6B 8B 
24c94     7D 8B 7D 8B 
24c98     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
24c9c     90 8B 91 8B 
24ca0     90 8B 90 8B 
24ca4     A3 8B A3 8B 
24ca8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
24cac     B5 8B B6 8B 
24cb0     B5 8B B5 8B 
24cb4     B6 8B C8 8B 
24cb8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
24cbc     C8 8B DA 8B 
24cc0     DB 8B DB 8B 
24cc4     DB 8B DC 8B 
24cc8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
24ccc     EE 8B EE 8B 
24cd0     00 8C 01 8C 
24cd4     00 8C 01 8C 
24cd8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
24cdc     12 8C 13 8C 
24ce0     13 8C 26 8C 
24ce4     26 8C 26 8C 
24ce8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
24cec     38 8C 38 8C 
24cf0     38 8C 38 8C 
24cf4     4B 8C 4B 8C 
24cf8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
24cfc     5E 8C 5E 8C 
24d00     5E 8C 5E 8C 
24d04     70 8C 70 8C 
24d08     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
24d0c     70 8C 83 8C 
24d10     83 8C 83 8C 
24d14     83 8C 96 8C 
24d18     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
24d1c     95 8C A9 8C 
24d20     A9 8C A8 8C 
24d24     A8 8C A8 8C 
24d28     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
24d2c     BB 8C BB 8C 
24d30     BB 8C CE 8C 
24d34     CE 8C CE 8C 
24d38     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
24d3c     E0 8C E1 8C 
24d40     E1 8C E0 8C 
24d44     F4 8C F2 8C 
24d48     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
24d4c     05 8D 05 8D 
24d50     06 8D 06 8D 
24d54     19 8D 19 8D 
24d58     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
24d5c     18 8D 2B 8D 
24d60     2B 8D 2B 8D 
24d64     2A 8D 3E 8D 
24d68     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
24d6c     3E 8D 51 8D 
24d70     50 8D 50 8D 
24d74     50 8D 51 8D 
24d78     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
24d7c     63 8D 64 8D 
24d80     76 8D 75 8D 
24d84     75 8D 76 8D 
24d88     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
24d8c     88 8D 88 8D 
24d90     89 8D 9B 8D 
24d94     9A 8D 9B 8D 
24d98     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
24d9c     AD 8D AE 8D 
24da0     AD 8D AE 8D 
24da4     C1 8D C1 8D 
24da8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
24dac     D3 8D D3 8D 
24db0     D3 8D D3 8D 
24db4     D3 8D E6 8D 
24db8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
24dbc     E6 8D E6 8D 
24dc0     F9 8D F9 8D 
24dc4     F9 8D F8 8D 
24dc8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
24dcc     0B 8E 0B 8E 
24dd0     1D 8E 1D 8E 
24dd4     1E 8E 1E 8E 
24dd8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
24ddc     31 8E 31 8E 
24de0     31 8E 42 8E 
24de4     43 8E 43 8E 
24de8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
24dec     56 8E 56 8E 
24df0     55 8E 56 8E 
24df4     68 8E 69 8E 
24df8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
24dfc     69 8E 7B 8E 
24e00     7C 8E 7B 8E 
24e04     7B 8E 8D 8E 
24e08     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
24e0c     8D 8E A1 8E 
24e10     A0 8E A1 8E 
24e14     A1 8E A0 8E 
24e18     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
24e1c     B3 8E B3 8E 
24e20     C6 8E C5 8E 
24e24     C6 8E C6 8E 
24e28     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
24e2c     D8 8E D9 8E 
24e30     D8 8E EC 8E 
24e34     EB 8E EC 8E 
24e38     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
24e3c     FE 8E FE 8E 
24e40     FE 8E FE 8E 
24e44     10 8F 10 8F 
24e48     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
24e4c     11 8F 23 8F 
24e50     24 8F 23 8F 
24e54     24 8F 37 8F 
24e58     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
24e5c     36 8F 36 8F 
24e60     48 8F 49 8F 
24e64     49 8F 49 8F 
24e68     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
24e6c     5B 8F 5C 8F 
24e70     5B 8F 6E 8F 
24e74     6E 8F 6E 8F 
24e78     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
24e7c     81 8F 81 8F 
24e80     81 8F 81 8F 
24e84     93 8F 93 8F 
24e88     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
24e8c     93 8F A6 8F 
24e90     A6 8F A6 8F 
24e94     A6 8F B9 8F 
24e98     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
24e9c     B9 8F B9 8F 
24ea0     CC 8F CB 8F 
24ea4     CB 8F CC 8F 
24ea8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
24eac     DF 8F DE 8F 
24eb0     DE 8F F1 8F 
24eb4     F1 8F F1 8F 
24eb8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
24ebc     03 90 04 90 
24ec0     04 90 04 90 
24ec4     16 90 17 90 
24ec8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
24ecc     29 90 28 90 
24ed0     29 90 28 90 
24ed4     29 90 3C 90 
24ed8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
24edc     3C 90 4F 90 
24ee0     4E 90 4E 90 
24ee4     4E 90 4E 90 
24ee8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
24eec     61 90 61 90 
24ef0     73 90 74 90 
24ef4     74 90 74 90 
24ef8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
24efc     87 90 86 90 
24f00     87 90 86 90 
24f04     99 90 99 90 
24f08     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
24f0c     AB 90 AB 90 
24f10     AC 90 AB 90 
24f14     AB 90 BF 90 
24f18     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
24f1c     BE 90 D1 90 
24f20     D0 90 D1 90 
24f24     D1 90 D1 90 
24f28     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
24f2c     E3 90 E4 90 
24f30     F6 90 F6 90 
24f34     F6 90 F6 90 
24f38     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
24f3c     09 91 0A 91 
24f40     0A 91 1C 91 
24f44     1C 91 1C 91 
24f48     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
24f4c     2F 91 2E 91 
24f50     2F 91 2F 91 
24f54     2E 91 41 91 
24f58     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
24f5c     41 91 53 91 
24f60     54 91 54 91 
24f64     53 91 54 91 
24f68     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
24f6c     67 91 67 91 
24f70     79 91 7A 91 
24f74     79 91 78 91 
24f78     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
24f7c     8C 91 8B 91 
24f80     8C 91 8C 91 
24f84     9E 91 9E 91 
24f88     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
24f8c     B1 91 B1 91 
24f90     B2 91 B1 91 
24f94     B1 91 C4 91 
24f98     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
24f9c     C4 91 D6 91 
24fa0     D7 91 D7 91 
24fa4     D7 91 D6 91 
24fa8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
24fac     EA 91 EA 91 
24fb0     EA 91 FC 91 
24fb4     FC 91 FB 91 
24fb8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
24fbc     0E 92 0F 92 
24fc0     0F 92 0E 92 
24fc4     21 92 21 92 
24fc8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
24fcc     21 92 34 92 
24fd0     33 92 34 92 
24fd4     34 92 47 92 
24fd8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
24fdc     46 92 47 92 
24fe0     59 92 59 92 
24fe4     59 92 59 92 
24fe8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
24fec     6C 92 6C 92 
24ff0     6B 92 7E 92 
24ff4     7E 92 7E 92 
24ff8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
24ffc     92 92 91 92 
25000     91 92 90 92 
25004     91 92 A4 92 
25008     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2500c     A3 92 B6 92 
25010     B6 92 B7 92 
25014     B7 92 B6 92 
25018     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2501c     CA 92 C9 92 
25020     CA 92 DC 92 
25024     DC 92 DC 92 
25028     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2502c     EF 92 EF 92 
25030     EF 92 EF 92 
25034     01 93 01 93 
25038     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2503c     15 93 14 93 
25040     14 93 14 93 
25044     14 93 27 93 
25048     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2504c     27 93 39 93 
25050     3A 93 39 93 
25054     39 93 39 93 
25058     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2505c     4B 93 4C 93 
25060     5F 93 5F 93 
25064     5F 93 5E 93 
25068     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2506c     5F 93 84 93 
25070     4C 93 96 93 
25074     5F 93 AE 94 
25078     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2507c     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25080     7A D7 00 80 
25084     87 8A 48 8F 
25088     EC 8C 76 8D 
2508c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25090     3C 8D 82 8D 
25094     42 8D 88 8D 
25098     8C 8D 8E 8D 
2509c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
250a0     97 8D DE 8D 
250a4     E1 8D F1 8E 
250a8     D8 8C A3 83 
250ac     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
250b0     65 71 C9 65 
250b4     FC 64 C4 65 
250b8     C1 65 BF 65 
250bc     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
250c0     B6 65 B4 65 
250c4     B2 65 AE 65 
250c8     AC 65 ED 65 
250cc     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
250d0     5E 65 25 66 
250d4     FA 62 23 6B 
250d8     B5 6C 61 0A 
250dc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
250e0     5D 90 BE 8D 
250e4     47 8E C3 8D 
250e8     09 8E C9 8D 
250ec     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
250f0     15 8E 19 8E 
250f4     1B 8E 62 8E 
250f8     64 8E 68 8E 
250fc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
25100     B5 8E 4C 90 
25104     FA 84 3C 9D 
25108     98 13 79 6D 
2510c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
25110     D9 66 50 66 
25114     D4 66 4B 66 
25118     8C 66 46 66 
2511c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
25120     81 66 3A 66 
25124     7C 66 36 66 
25128     76 66 30 66 
2512c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
25130     6B 66 88 72 
25134     BF 37 E7 B7 
25138     75 83 8B 8E 
2513c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
25140     94 8E 96 8E 
25144     DD 8E 9C 8E 
25148     E2 8E A2 8E 
2514c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
25150     EE 8E AE 8E 
25154     38 8F B5 8E 
25158     3F 8F FD 8E 
2515c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
25160     A5 87 1E E3 
25164     6D 5D FA 71 
25168     41 64 25 67 
2516c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25170     D9 66 1A 67 
25174     18 67 15 67 
25178     12 67 0F 67 
2517c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25180     07 67 C0 66 
25184     01 67 BC 66 
25188     B8 66 DE 64 
2518c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25190     43 E5 1F 8B 
25194     14 8A F1 90 
25198     1C 8F 63 8F 
2519c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
251a0     29 8F 6E 8F 
251a4     72 8F 75 8F 
251a8     34 8F BE 8F 
251ac     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
251b0     84 8F 87 8F 
251b4     CC 8F 56 90 
251b8     67 91 49 80 
251bc     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
251c0     46 77 A6 66 
251c4     E8 66 B0 67 
251c8     AD 67 ED 67 
251cc     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
251d0     A2 67 E3 67 
251d4     9D 67 9A 67 
251d8     98 67 94 67 
251dc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
251e0     49 67 CD 67 
251e4     28 65 5F 6E 
251e8     82 67 3A 01 
251ec     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
251f0     C2 91 A9 8F 
251f4     EF 8F AE 8F 
251f8     F4 8F B5 8F 
251fc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
25200     01 90 03 90 
25204     07 90 09 90 
25208     0C 90 53 90 
2520c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
25210     18 90 44 93 
25214     85 84 D6 9D 
25218     87 1F 2F 75 
2521c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
25220     C4 68 F6 67 
25224     BE 68 F1 67 
25228     76 68 2E 68 
2522c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
25230     27 68 24 68 
25234     64 68 1E 68 
25238     5F 68 19 68 
2523c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
25240     DC 68 56 72 
25244     7E 36 C2 B8 
25248     D7 84 73 90 
2524c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
25250     7B 90 7F 90 
25254     82 90 84 90 
25258     CB 90 8B 90 
2525c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
25260     D7 90 96 90 
25264     20 91 59 90 
25268     25 91 A2 90 
2526c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25270     D0 89 40 EE 
25274     12 64 C4 71 
25278     29 66 0C 69 
2527c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25280     C0 68 02 69 
25284     FE 68 FB 68 
25288     F9 68 F6 68 
2528c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
25290     EE 68 A8 68 
25294     2C 69 5F 68 
25298     E2 68 81 66 
2529c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
252a0     1E EB A6 8A 
252a4     73 8B 5E 93 
252a8     7B 90 48 91 
252ac     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
252b0     0D 91 11 91 
252b4     14 91 16 91 
252b8     5C 91 1C 91 
252bc     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
252c0     68 91 AF 91 
252c4     2A 91 B5 91 
252c8     75 91 1A 94 
252cc     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
252d0     70 0E CB 6C 
252d4     5D 6E C4 67 
252d8     99 69 54 69 
252dc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
252e0     D2 69 49 69 
252e4     89 69 86 69 
252e8     40 69 C4 69 
252ec     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
252f0     35 69 76 69 
252f4     58 67 EB 6D 
252f8     E9 6D 89 0F 
252fc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
25300     33 94 94 91 
25304     D9 91 56 91 
25308     E0 91 9F 91 
2530c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
25310     EC 91 EE 91 
25314     F1 91 F4 91 
25318     F7 91 3D 92 
2531c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
25320     46 92 21 94 
25324     11 89 A4 9D 
25328     FD 0E 8F 6C 
2532c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
25330     28 6A E1 69 
25334     65 6A 1F 6A 
25338     5F 6A 1A 6A 
2533c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
25340     54 6A 0F 6A 
25344     4F 6A 09 6A 
25348     06 6A 03 6A 
2534c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
25350     23 68 69 77 
25354     3A 4D 38 CA 
25358     38 86 4E 91 
2535c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
25360     64 92 24 92 
25364     6A 92 2A 92 
25368     70 92 30 92 
2536c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
25370     7B 92 7E 92 
25374     C5 92 84 92 
25378     CB 92 8A 92 
2537c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
25380     4D 8D F9 E2 
25384     97 59 FE 74 
25388     DB 68 6D 6A 
2538c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
25390     A8 6A A5 6A 
25394     A3 6A 9F 6A 
25398     9D 6A 9B 6A 
2539c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
253a0     D6 6A 8F 6A 
253a4     CF 6A 46 6A 
253a8     CA 6A E1 67 
253ac     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
253b0     D3 F7 15 92 
253b4     90 8C BF 94 
253b8     A6 92 EB 92 
253bc     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
253c0     B1 92 F7 92 
253c4     FA 92 FD 92 
253c8     00 93 02 93 
253cc     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
253d0     4F 93 52 93 
253d4     54 93 22 94 
253d8     5A 93 8F 88 
253dc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
253e0     1C 77 07 6C 
253e4     E8 69 7A 6B 
253e8     34 6B 75 6B 
253ec     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
253f0     29 6B 26 6B 
253f4     24 6B 21 6B 
253f8     1D 6B 5E 6B 
253fc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
25400     12 6B 52 6B 
25404     34 69 34 6E 
25408     BA 73 A4 24 
2540c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
25410     7A 94 B3 93 
25414     72 93 31 93 
25418     78 93 7A 93 
2541c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
25420     83 93 86 93 
25424     89 93 D0 93 
25428     D2 93 D5 93 
2542c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
25430     DD 93 40 96 
25434     30 8B 99 9C 
25438     52 10 94 71 
2543c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
25440     46 6C 79 6B 
25444     40 6C B7 6B 
25448     F7 6B B1 6B 
2544c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
25450     EC 6B A5 6B 
25454     A2 6B 9F 6B 
25458     9D 6B 9A 6B 
2545c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
25460     C8 6A E4 76 
25464     20 4B F9 CE 
25468     2E 8A 1A 92 
2546c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
25470     FB 93 BA 93 
25474     01 94 03 94 
25478     4A 94 09 94 
2547c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
25480     55 94 14 94 
25484     9E 94 1A 94 
25488     61 94 20 94 
2548c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
25490     3E 87 E5 CD 
25494     5F 50 6C 78 
25498     B5 6A 04 6C 
2549c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
254a0     83 6C 7F 6C 
254a4     7C 6C 36 6C 
254a8     76 6C 74 6C 
254ac     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
254b0     6B 6C 25 6C 
254b4     66 6C 1F 6C 
254b8     1D 6C 41 6A 
254bc     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
254c0     BA FA FC 94 
254c4     5B 8D 97 96 
254c8     3B 94 C5 94 
254cc     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
254d0     89 94 8C 94 
254d4     8F 94 92 94 
254d8     94 94 DB 94 
254dc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
254e0     E4 94 E7 94 
254e4     2D 95 74 95 
254e8     C8 96 15 89 
254ec     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
254f0     CB 75 31 6F 
254f4     7E 6B 10 6D 
254f8     C9 6C 0A 6D 
254fc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
25500     BD 6C FF 6C 
25504     FB 6C F9 6C 
25508     B2 6C F3 6C 
2550c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
25510     A7 6C E8 6C 
25514     0D 6B 85 6F 
25518     C7 74 10 28 
2551c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
25520     96 96 47 95 
25524     06 95 0A 95 
25528     0C 95 0F 95 
2552c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
25530     17 95 5E 95 
25534     61 95 63 95 
25538     22 95 AC 95 
2553c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
25540     72 95 17 98 
25544     59 8E 01 96 
25548     CF FC 5A 68 
2554c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
25550     96 6D 50 6D 
25554     D5 6D 4A 6D 
25558     8C 6D 89 6D 
2555c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
25560     80 6D 3A 6D 
25564     7A 6D 77 6D 
25568     75 6D 71 6D 
2556c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
25570     18 6C BC 78 
25574     9A 4F 7E CF 
25578     1F 89 F1 93 
2557c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
25580     D2 95 4E 95 
25584     D7 95 53 95 
25588     DD 95 E0 95 
2558c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
25590     A5 95 EB 95 
25594     EE 95 F0 95 
25598     37 96 B3 95 
2559c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
255a0     1A 98 D5 8D 
255a4     C5 9F CD 0F 
255a8     0F 71 F3 73 
255ac     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
255b0     D9 6D 5E 6E 
255b4     D3 6D 58 6E 
255b8     12 6E 0F 6E 
255bc     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
255c0     49 6E BF 6D 
255c4     87 6E 76 6D 
255c8     81 6E 11 6B 
255cc     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
255d0     3F 09 44 95 
255d4     E5 8D 3F 99 
255d8     D4 95 A2 96 
255dc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
255e0     23 96 69 96 
255e4     6B 96 6E 96 
255e8     71 96 74 96 
255ec     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
255f0     BF 96 3C 96 
255f4     C6 96 C8 96 
255f8     A3 98 51 8D 
255fc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
25600     CF 75 29 73 
25604     90 6C EC 6E 
25608     62 6E E7 6E 
2560c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
25610     9A 6E 98 6E 
25614     95 6E 91 6E 
25618     8E 6E CF 6E 
2561c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
25620     40 6E C3 6E 
25624     E8 6C 45 6F 
25628     A5 7B C9 35 
2562c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
25630     2D 98 23 97 
25634     E1 96 A0 96 
25638     A4 96 EA 96 
2563c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
25640     AF 96 F4 96 
25644     F8 96 3E 97 
25648     FD 96 43 97 
2564c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
25650     08 97 6B 99 
25654     D6 92 88 91 
25658     D8 EE 84 66 
2565c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
25660     2E 6F E7 6E 
25664     6C 6F 24 6F 
25668     21 6F 1F 6F 
2566c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
25670     17 6F 13 6F 
25674     54 6F 0E 6F 
25678     0B 6F 4B 6F 
2567c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
25680     27 6D 1C 7B 
25684     19 59 9F DB 
25688     66 8E BC 94 
2568c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
25690     67 97 26 97 
25694     6D 97 2B 97 
25698     72 97 32 97 
2569c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
256a0     C1 97 7F 97 
256a4     C6 97 85 97 
256a8     CB 97 CE 97 
256ac     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
256b0     EC 8A C4 C6 
256b4     68 4C F4 7D 
256b8     63 6E E8 6E 
256bc     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
256c0     ED 6F A7 6F 
256c4     E7 6F A0 6F 
256c8     E1 6F 9B 6F 
256cc     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
256d0     D5 6F 8F 6F 
256d4     CE 6F 45 6F 
256d8     86 6F 68 6D 
256dc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
256e0     C0 13 AD A2 
256e4     A7 8E 79 99 
256e8     E6 97 E8 97 
256ec     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
256f0     F1 97 F3 97 
256f4     F6 97 F9 97 
256f8     FB 97 FE 97 
256fc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
25700     4A 98 0A 98 
25704     93 98 0F 98 
25708     7F 9B BF 8C 
2570c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
25710     91 7B 62 73 
25714     1A 6E B9 70 
25718     EB 6F B3 70 
2571c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
25720     25 70 20 70 
25724     1E 70 1B 70 
25728     18 70 15 70 
2572c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
25730     0D 70 09 70 
25734     07 70 03 70 
25738     01 70 FD 6F 
2573c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
25740     F6 6F F2 6F 
25744     EF 6F EC 6F 
25748     2C 70 E6 6F 
2574c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
25750     DD 6F 97 6F 
25754     D7 6F 84 6E 
25758     8F 6F 3F 7D 
2575c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2575e     01 00 00 00 
25762     00 00 00 00 
25766     00 00 00 00 
2576a     00 00 00 00 | mouse  file "mouse.def"
2576e     00 00 00 00 
25772     00 00 00 00 
25776     00 00 00 00 
2577a     00 00 00 00 | 	byte	$00[16]
2577e     01 01 00 00 
25782     00 00 00 00 
25786     00 00 00 00 
2578a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2578e     00 00 00 00 
25792     00 00 00 00 
25796     00 00 00 00 
2579a     00 00 00 00 | 	byte	$00[16]
2579e     01 0D 01 00 
257a2     00 00 00 00 
257a6     00 00 00 00 
257aa     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
257ae     00 00 00 00 
257b2     00 00 00 00 
257b6     00 00 00 00 
257ba     00 00 00 00 | 	byte	$00[16]
257be     01 0D 0D 01 
257c2     00 00 00 00 
257c6     00 00 00 00 
257ca     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
257ce     00 00 00 00 
257d2     00 00 00 00 
257d6     00 00 00 00 
257da     00 00 00 00 | 	byte	$00[16]
257de     01 0D 0D 0D 
257e2     01 00 00 00 
257e6     00 00 00 00 
257ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
257ee     00 00 00 00 
257f2     00 00 00 00 
257f6     00 00 00 00 
257fa     00 00 00 00 | 	byte	$00[16]
257fe     01 0D 0D 0D 
25802     0D 01 00 00 
25806     00 00 00 00 
2580a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2580e     00 00 00 00 
25812     00 00 00 00 
25816     00 00 00 00 
2581a     00 00 00 00 | 	byte	$00[16]
2581e     01 0D 0D 0D 
25822     0D 0D 01 00 
25826     00 00 00 00 
2582a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2582e     00 00 00 00 
25832     00 00 00 00 
25836     00 00 00 00 
2583a     00 00 00 00 | 	byte	$00[16]
2583e     01 0D 0D 0D 
25842     0D 0D 0D 01 
25846     00 00 00 00 
2584a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2584e     00 00 00 00 
25852     00 00 00 00 
25856     00 00 00 00 
2585a     00 00 00 00 | 	byte	$00[16]
2585e     01 0D 0D 0D 
25862     0D 0D 0D 0C 
25866     01 00 00 00 
2586a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2586e     00 00 00 00 
25872     00 00 00 00 
25876     00 00 00 00 
2587a     00 00 00 00 | 	byte	$00[16]
2587e     01 0D 0D 0D 
25882     0D 0D 0D 0D 
25886     0C 01 00 00 
2588a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2588e     00 00 00 00 
25892     00 00 00 00 
25896     00 00 00 00 
2589a     00 00 00 00 | 	byte	$00[16]
2589e     01 0D 0D 0D 
258a2     0D 0D 0D 0D 
258a6     0D 0C 01 00 
258aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
258ae     00 00 00 00 
258b2     00 00 00 00 
258b6     00 00 00 00 
258ba     00 00 00 00 | 	byte	$00[16]
258be     01 0D 0D 0D 
258c2     0D 0D 0D 0D 
258c6     0D 0D 0B 01 
258ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
258ce     00 00 00 00 
258d2     00 00 00 00 
258d6     00 00 00 00 
258da     00 00 00 00 | 	byte	$00[16]
258de     01 0D 0D 0D 
258e2     0C 0D 0D 03 
258e6     01 01 01 01 
258ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
258ee     00 00 00 00 
258f2     00 00 00 00 
258f6     00 00 00 00 
258fa     00 00 00 00 | 	byte	$00[16]
258fe     01 0D 0D 0C 
25902     01 09 0D 03 
25906     00 00 00 00 
2590a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2590e     00 00 00 00 
25912     00 00 00 00 
25916     00 00 00 00 
2591a     00 00 00 00 | 	byte	$00[16]
2591e     01 0D 0C 00 
25922     00 01 0D 0B 
25926     01 00 00 00 
2592a     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2592e     00 00 00 00 
25932     00 00 00 00 
25936     00 00 00 00 
2593a     00 00 00 00 | 	byte	$00[16]
2593e     01 0C 00 00 
25942     00 01 0A 0D 
25946     01 00 00 00 
2594a     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2594e     00 00 00 00 
25952     00 00 00 00 
25956     00 00 00 00 
2595a     00 00 00 00 | 	byte	$00[16]
2595e     01 00 00 00 
25962     00 00 01 0D 
25966     0B 01 00 00 
2596a     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2596e     00 00 00 00 
25972     00 00 00 00 
25976     00 00 00 00 
2597a     00 00 00 00 
2597e     00 00 00 00 
25982     00 00       | 	byte	$00[22]
25984     01 0B 0D 01 
25988     00 00 00 00 
2598c     00 00 00 00 
25990     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25994     00 00 00 00 
25998     00 00 00 00 
2599c     00 00 00 00 
259a0     00 00 00 00 
259a4     00          | 	byte	$00[17]
259a5     01 00 00 00 
259a9     00 00 00 00 
259ad     00 00 00 00 
259b1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
259b5     00 00 00 00 
      ...             
25b59     00 00 00 00 
25b5d     00          | 	byte	$00[425]
25b5e                 | 
25b5e     00 00       |              	org
25b60 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
25b64 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
25b68 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
25b6c 003             | 
25b6c 003 00 30 04 F6 |                 mov     psramaddr,#0
25b70 004             | 
25b70 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
25b74 005 20 00 00 FF 
25b78 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
25b7c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
25b80 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
25b84 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
25b88 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
25b8c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
25b90 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
25b94 00d             | 
25b94 00d 20 00 00 FF 
25b98 00e 00 30 04 F1 |                 add 	psramaddr,##16384
25b9c 00f E0 03 00 FF 
25ba0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
25ba4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
25ba8 012             | 
25ba8 012             |                 
25ba8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
25bac 013             |     
25bac 013 01 2C 60 FD |                 cogid 	t11				' get id
25bb0 014 00 00 EC FC |                 coginit #0,#0				' start the new program
25bb4 015 03 2C 60 FD |                 cogstop t11				' stop the loader
25bb8 016             | 
25bb8 016 00 00 00 00 | t11 		long 	0
25bbc 017 00 FF 07 00 | mailbox 	long 	$7FF00
25bc0 018 00 00 00 00 | psramaddr 	long 	0
25bc4 019 00 00 00 00 | pslockval	long 	0
25bc8 01a 00 00 00 00 | cmd             long    0
25bcc 01b 00 00 00 00 | buf1            long    0
25bd0 01c 00 40 00 00 | buf2            long    16384
25bd4 01d D8 5B 02 00 | 	long	@@@_dat_ + 5100
25bd8 01e 50 32 20 52 
25bdc 01f 65 74 72 6F 
25be0 020 6D 61 63 68 
25be4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
25be8 022 42 41 53 49 
25bec 023 43 20 76 65 
25bf0 024 72 73 69 6F 
25bf4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
25bf8 026 32 31 00 00 | 	byte	$32, $31, $00, $00
25bfc 027             | 	alignl
25bfc 027             | _hg010b_spin2_dat_
25bfc 027             | 
25bfc 027 00 00 00 00 
25c00 028 00 00 00 00 
25c04 029 00 00 00 00 
25c08 02a 00 00 00 00 
25c0c 02b 00 00 00    | vga_font       file "vgafont.def"
25c0f 02b 7E 81 A5 81 
25c13 02c 81 BD 99 81 
25c17 02d 81 7E 00 00 
25c1b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
25c1f 02f 7E FF DB FF 
25c23 030 FF C3 E7 FF 
25c27 031 FF 7E 00 00 
25c2b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
25c2f 033 00 36 7F 7F 
25c33 034 7F 7F 3E 1C 
25c37 035 08 00 00 00 
25c3b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
25c3f 037 00 08 1C 3E 
25c43 038 7F 3E 1C 08 
25c47 039 00 00 00 00 
25c4b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
25c4f 03b 18 3C 3C E7 
25c53 03c E7 E7 18 18 
25c57 03d 3C 00 00 00 
25c5b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
25c5f 03f 18 3C 7E FF 
25c63 040 FF 7E 18 18 
25c67 041 3C 00 00 00 
25c6b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
25c6f 043 00 00 00 18 
25c73 044 3C 3C 18 00 
25c77 045 00 00 00 00 
25c7b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
25c7f 047 FF FF FF E7 
25c83 048 C3 C3 E7 FF 
25c87 049 FF FF FF FF 
25c8b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
25c8f 04b 00 00 3C 66 
25c93 04c 42 42 66 3C 
25c97 04d 00 00 00 00 
25c9b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
25c9f 04f FF FF C3 99 
25ca3 050 BD BD 99 C3 
25ca7 051 FF FF FF FF 
25cab 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
25caf 053 78 70 58 4C 
25cb3 054 1E 33 33 33 
25cb7 055 33 1E 00 00 
25cbb 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
25cbf 057 3C 66 66 66 
25cc3 058 66 3C 18 7E 
25cc7 059 18 18 00 00 
25ccb 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
25ccf 05b FC CC FC 0C 
25cd3 05c 0C 0C 0C 0E 
25cd7 05d 0F 07 00 00 
25cdb 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
25cdf 05f FE C6 FE C6 
25ce3 060 C6 C6 C6 E6 
25ce7 061 E7 67 03 00 
25ceb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
25cef 063 18 18 DB 3C 
25cf3 064 E7 3C DB 18 
25cf7 065 18 00 00 00 
25cfb 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
25cff 067 03 07 0F 1F 
25d03 068 7F 1F 0F 07 
25d07 069 03 01 00 00 
25d0b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
25d0f 06b 60 70 78 7C 
25d13 06c 7F 7C 78 70 
25d17 06d 60 40 00 00 
25d1b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
25d1f 06f 18 3C 7E 18 
25d23 070 18 18 7E 3C 
25d27 071 18 00 00 00 
25d2b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
25d2f 073 66 66 66 66 
25d33 074 66 66 66    | 	byte	$66[7]
25d36 075 00 66 66 00 
25d3a 076 00 00 00 00 
25d3e 077 00 FE DB DB 
25d42 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
25d46 079 D8 D8 D8 00 
25d4a 07a 00 00 00 3E 
25d4e 07b 63 06 1C 36 
25d52 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
25d56 07d 30 63 3E 00 
25d5a 07e 00 00 00 00 
25d5e 07f 00 00 00 00 
25d62 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
25d66 081 7F 7F 7F 00 
25d6a 082 00 00 00 00 
25d6e 083 00 18 3C 7E 
25d72 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
25d76 085 3C 18 7E 00 
25d7a 086 00 00 00 00 
25d7e 087 00 18 3C 7E 
25d82 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
25d86 089 18 18 18 00 
25d8a 08a 00 00 00 00 
25d8e 08b 00 18 18 18 
25d92 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
25d96 08d 7E 3C 18 00 
25d9a 08e 00 00 00 00 
25d9e 08f 00 00 00 18 
25da2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
25da6 091 00 00 00 00 
25daa 092 00 00 00 00 
25dae 093 00 00 00    | 	byte	$00[11]
25db1 094 0C 06 7F 06 
25db5 095 0C 00 00 00 
25db9 096 00 00 00 00 
25dbd 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25dc1 098 00 03 03 03 
25dc5 099 7F 00 00 00 
25dc9 09a 00 00 00 00 
25dcd 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25dd1 09c 14 36 7F 36 
25dd5 09d 14 00 00 00 
25dd9 09e 00 00 00 00 
25ddd 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
25de1 0a0 1C 1C 3E 3E 
25de5 0a1 7F 7F 00 00 
25de9 0a2 00 00 00 00 
25ded 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
25df1 0a4 7F 3E 3E 1C 
25df5 0a5 1C 08 00 00 
25df9 0a6 00 00 00 00 
25dfd 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25e01 0a8 00 00 00 00 
25e05 0a9 00 00 00 00 
25e09 0aa 00 00 00 00 
25e0d 0ab 00 00       | 	byte	$00[14]
25e0f 0ab 18 3C 3C 3C 
25e13 0ac 18 18 18 00 
25e17 0ad 18 18 00 00 
25e1b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
25e1f 0af 66 24 00 00 
25e23 0b0 00 00 00 00 
25e27 0b1 00 00 00 00 
25e2b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25e2f 0b3 00 36 36 7F 
25e33 0b4 36 36 36 7F 
25e37 0b5 36 36 00 00 
25e3b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
25e3f 0b7 3E 63 43 03 
25e43 0b8 3E 60 60 61 
25e47 0b9 63 3E 18 18 
25e4b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
25e4f 0bb 00 00 43 63 
25e53 0bc 30 18 0C 06 
25e57 0bd 63 61 00 00 
25e5b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
25e5f 0bf 1C 36 36 1C 
25e63 0c0 6E 3B 33 33 
25e67 0c1 33 6E 00 00 
25e6b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
25e6f 0c3 0C 0C 0C 06 
25e73 0c4 00 00 00 00 
25e77 0c5 00 00 00 00 
25e7b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25e7f 0c7 30 18 0C 0C 
25e83 0c8 0C 0C 0C 0C 
25e87 0c9 18 30 00 00 
25e8b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
25e8f 0cb 0C 18 30 30 
25e93 0cc 30 30 30 30 
25e97 0cd 18 0C 00 00 
25e9b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
25e9f 0cf 00 00 00 66 
25ea3 0d0 3C FF 3C 66 
25ea7 0d1 00 00 00 00 
25eab 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
25eaf 0d3 00 00 00 18 
25eb3 0d4 18 7E 18 18 
25eb7 0d5 00 00 00 00 
25ebb 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
25ebf 0d7 00 00 00 00 
25ec3 0d8 00 00 00 00 | 	byte	$00[8]
25ec7 0d9 18 18 18 0C 
25ecb 0da 00 00 00 00 
25ecf 0db 00 00 00 00 
25ed3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
25ed7 0dd 00 00 00 00 
25edb 0de 00 00 00 00 
25edf 0df 00 00 00 00 
25ee3 0e0 00 00 00 00 | 	byte	$00[16]
25ee7 0e1 18 18 00 00 
25eeb 0e2 00 00 00 00 
25eef 0e3 00 00 40 60 
25ef3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
25ef7 0e5 03 01 00 00 
25efb 0e6 00 00 00 00 
25eff 0e7 1C 36 63 63 
25f03 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
25f07 0e9 36 1C 00 00 
25f0b 0ea 00 00 00 00 
25f0f 0eb 18 1C 1E 18 
25f13 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
25f17 0ed 18 7E 00 00 
25f1b 0ee 00 00 00 00 
25f1f 0ef 3E 63 60 30 
25f23 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
25f27 0f1 63 7F 00 00 
25f2b 0f2 00 00 00 00 
25f2f 0f3 3E 63 60 60 
25f33 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
25f37 0f5 63 3E 00 00 
25f3b 0f6 00 00 00 00 
25f3f 0f7 30 38 3C 36 
25f43 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
25f47 0f9 30 78 00 00 
25f4b 0fa 00 00 00 00 
25f4f 0fb 7F 03 03 03 
25f53 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
25f57 0fd 63 3E 00 00 
25f5b 0fe 00 00 00 00 
25f5f 0ff 1C 06 03 03 
25f63 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
25f67 101 63 3E 00 00 
25f6b 102 00 00 00 00 
25f6f 103 7F 63 60 60 
25f73 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
25f77 105 0C 0C 00 00 
25f7b 106 00 00 00 00 
25f7f 107 3E 63 63 63 
25f83 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
25f87 109 63 3E 00 00 
25f8b 10a 00 00 00 00 
25f8f 10b 3E 63 63 63 
25f93 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
25f97 10d 30 1E 00 00 
25f9b 10e 00 00 00 00 
25f9f 10f 00 00 00 18 
25fa3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
25fa7 111 18 18 00 00 
25fab 112 00 00 00 00 
25faf 113 00 00 00 18 
25fb3 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
25fb7 115 18 18 0C 00 
25fbb 116 00 00 00 00 
25fbf 117 00 60 30 18 
25fc3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
25fc7 119 30 60 00 00 
25fcb 11a 00 00 00 00 
25fcf 11b 00 00 00 7E 
25fd3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
25fd7 11d 00 00 00 00 
25fdb 11e 00 00 00 00 
25fdf 11f 00          | 	byte	$00[9]
25fe0 120 06 0C 18 30 
25fe4 121 60 30 18 0C 
25fe8 122 06 00 00 00 
25fec 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
25ff0 124 63 63 30 18 
25ff4 125 18 18 00 18 
25ff8 126 18 00 00 00 
25ffc 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
26000 128 3E 63 63 7B 
26004 129 7B 7B 3B 03 
26008 12a 3E 00 00 00 
2600c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
26010 12c 1C 36 63 63 
26014 12d 7F 63 63 63 
26018 12e 63 00 00 00 
2601c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
26020 130 66 66 66 3E 
26024 131 66 66 66 66 
26028 132 3F 00 00 00 
2602c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
26030 134 66 43 03 03 
26034 135 03 03 43 66 
26038 136 3C 00 00 00 
2603c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
26040 138 36 66 66 66 
26044 139 66 66 66 36 
26048 13a 1F 00 00 00 
2604c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
26050 13c 66 46 16 1E 
26054 13d 16 06 46 66 
26058 13e 7F 00 00 00 
2605c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
26060 140 66 46 16 1E 
26064 141 16 06 06 06 
26068 142 0F 00 00 00 
2606c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
26070 144 66 43 03 03 
26074 145 7B 63 63 66 
26078 146 5C 00 00 00 
2607c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
26080 148 63 63 63 7F 
26084 149 63 63 63 63 
26088 14a 63 00 00 00 
2608c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
26090 14c 18 18 18 18 
26094 14d 18 18 18 18 | 	byte	$18[8]
26098 14e 3C 00 00 00 
2609c 14f 00 00 00 78 
260a0 150 30 30 30 30 
260a4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
260a8 152 1E 00 00 00 
260ac 153 00 00 00 67 
260b0 154 66 66 36 1E 
260b4 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
260b8 156 67 00 00 00 
260bc 157 00 00 00 0F 
260c0 158 06 06 06 06 
260c4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
260c8 15a 7F 00 00 00 
260cc 15b 00 00 00 63 
260d0 15c 77 7F 7F 6B 
260d4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
260d8 15e 63 00 00 00 
260dc 15f 00 00 00 63 
260e0 160 67 6F 7F 7B 
260e4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
260e8 162 63 00 00 00 
260ec 163 00 00 00 3E 
260f0 164 63 63 63 63 
260f4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
260f8 166 3E 00 00 00 
260fc 167 00 00 00 3F 
26100 168 66 66 66 3E 
26104 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
26108 16a 0F 00 00 00 
2610c 16b 00 00 00 3E 
26110 16c 63 63 63 63 
26114 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
26118 16e 3E 30 70 00 
2611c 16f 00 00 00 3F 
26120 170 66 66 66 3E 
26124 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
26128 172 67 00 00 00 
2612c 173 00 00 00 3E 
26130 174 63 63 06 1C 
26134 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26138 176 3E 00 00 00 
2613c 177 00 00 00 7E 
26140 178 7E 5A 18 18 
26144 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
26148 17a 3C 00 00 00 
2614c 17b 00 00 00 63 
26150 17c 63 63 63 63 
26154 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
26158 17e 3E 00 00 00 
2615c 17f 00 00 00 63 
26160 180 63 63 63 63 
26164 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
26168 182 08 00 00 00 
2616c 183 00 00 00 63 
26170 184 63 63 63 6B 
26174 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
26178 186 36 00 00 00 
2617c 187 00 00 00 63 
26180 188 63 36 3E 1C 
26184 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
26188 18a 63 00 00 00 
2618c 18b 00 00 00 66 
26190 18c 66 66 66 3C 
26194 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
26198 18e 3C 00 00 00 
2619c 18f 00 00 00 7F 
261a0 190 63 61 30 18 
261a4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
261a8 192 7F 00 00 00 
261ac 193 00 00 00 3C 
261b0 194 0C 0C 0C 0C 
261b4 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
261b8 196 3C 00 00 00 
261bc 197 00 00 00 00 
261c0 198 01 03 07 0E 
261c4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
261c8 19a 40 00 00 00 
261cc 19b 00 00 00 3C 
261d0 19c 30 30 30 30 
261d4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
261d8 19e 3C 00 00 00 
261dc 19f 1C 36 00 00 
261e0 1a0 00 00 00 00 
261e4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
261e8 1a2 00 00 00 00 
261ec 1a3 00 00 00 00 
261f0 1a4 00 00 00 00 
261f4 1a5 00 00 00 00 
261f8 1a6 00          | 	byte	$00[17]
261f9 1a6 FF 00 00 0C 
261fd 1a7 18 00 00 00 
26201 1a8 00 00 00 00 
26205 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26209 1aa 00 00 00 00 
2620d 1ab 00 00 00 00 
26211 1ac 00          | 	byte	$00[9]
26212 1ac 1E 30 3E 33 
26216 1ad 33 33 6E 00 
2621a 1ae 00 00 00 00 
2621e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
26222 1b0 1E 36 66 66 
26226 1b1 66 66 3E 00 
2622a 1b2 00 00 00 00 
2622e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26232 1b4 3E 63 03 03 
26236 1b5 03 63 3E 00 
2623a 1b6 00 00 00 00 
2623e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
26242 1b8 3C 36 33 33 
26246 1b9 33 33 6E 00 
2624a 1ba 00 00 00 00 
2624e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26252 1bc 3E 63 7F 03 
26256 1bd 03 63 3E 00 
2625a 1be 00 00 00 00 
2625e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
26262 1c0 0C 1E 0C 0C 
26266 1c1 0C 0C 1E 00 
2626a 1c2 00 00 00 00 
2626e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26272 1c4 6E 33 33 33 
26276 1c5 33 33 3E 30 
2627a 1c6 33 1E 00 00 
2627e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
26282 1c8 36 6E 66 66 
26286 1c9 66 66 67 00 
2628a 1ca 00 00 00 00 
2628e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
26292 1cc 1C 18 18 18 
26296 1cd 18 18 3C 00 
2629a 1ce 00 00 00 00 
2629e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
262a2 1d0 70 60 60 60 
262a6 1d1 60 60 60 66 
262aa 1d2 66 3C 00 00 
262ae 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
262b2 1d4 66 36 1E 1E 
262b6 1d5 36 66 67 00 
262ba 1d6 00 00 00 00 
262be 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
262c2 1d8 18 18 18 18 
262c6 1d9 18 18       | 	byte	$18[6]
262c8 1da 3C 00 00 00 
262cc 1db 00 00 00 00 
262d0 1dc 00 00 37 7F 
262d4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
262d8 1de 63 00 00 00 
262dc 1df 00 00 00 00 
262e0 1e0 00 00 3B 66 
262e4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
262e8 1e2 66 00 00 00 
262ec 1e3 00 00 00 00 
262f0 1e4 00 00 3E 63 
262f4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
262f8 1e6 3E 00 00 00 
262fc 1e7 00 00 00 00 
26300 1e8 00 00 3B 66 
26304 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26308 1ea 3E 06 06 0F 
2630c 1eb 00 00 00 00 
26310 1ec 00 00 6E 33 
26314 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
26318 1ee 3E 30 30 78 
2631c 1ef 00 00 00 00 
26320 1f0 00 00 3B 6E 
26324 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
26328 1f2 0F 00 00 00 
2632c 1f3 00 00 00 00 
26330 1f4 00 00 3E 63 
26334 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
26338 1f6 3E 00 00 00 
2633c 1f7 00 00 00 08 
26340 1f8 0C 0C 3F 0C 
26344 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26348 1fa 38 00 00 00 
2634c 1fb 00 00 00 00 
26350 1fc 00 00 33 33 
26354 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
26358 1fe 6E 00 00 00 
2635c 1ff 00 00 00 00 
26360 200 00 00 63 63 
26364 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
26368 202 1C 00 00 00 
2636c 203 00 00 00 00 
26370 204 00 00 63 63 
26374 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
26378 206 36 00 00 00 
2637c 207 00 00 00 00 
26380 208 00 00 63 36 
26384 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
26388 20a 63 00 00 00 
2638c 20b 00 00 00 00 
26390 20c 00 00 63 63 
26394 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
26398 20e 7E 60 30 1F 
2639c 20f 00 00 00 00 
263a0 210 00 00 7F 33 
263a4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
263a8 212 7F 00 00 00 
263ac 213 00 00 00 70 
263b0 214 18 18 18 0E 
263b4 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
263b8 216 70 00 00 00 
263bc 217 00 00 00 18 
263c0 218 18 18 18 18 
263c4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
263c8 21a 18 00 00 00 
263cc 21b 00 00 00 0E 
263d0 21c 18 18 18 70 
263d4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
263d8 21e 0E 00 00 00 
263dc 21f 6E 3B 00 00 
263e0 220 00 00 00 00 
263e4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
263e8 222 00 00 00 00 
263ec 223 00 00 00 00 
263f0 224 00 00       | 	byte	$00[10]
263f2 224 08 1C 36 63 
263f6 225 63 63 7F 00 
263fa 226 00 00 00 00 
263fe 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
26402 228 03 03 03 03 
26406 229 43 66 3C 18 
2640a 22a 30 1E 00 00 
2640e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
26412 22c 33 33 33 33 
26416 22d 33 33       | 	byte	$33[6]
26418 22e 6E 00 00 00 
2641c 22f 00 00 60 30 
26420 230 18 00 3E 63 
26424 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
26428 232 3E 00 00 00 
2642c 233 00 00 08 1C 
26430 234 36 00 1E 30 
26434 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
26438 236 6E 00 00 00 
2643c 237 00 00 00 00 
26440 238 33 00 1E 30 
26444 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
26448 23a 6E 00 00 00 
2644c 23b 00 00 1C 36 
26450 23c 1C 00 33 33 
26454 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
26458 23e 6E 00 00 00 
2645c 23f 00 00 60 30 
26460 240 18 00 3E 63 
26464 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
26468 242 3E 00 00 00 
2646c 243 00 00 00 00 
26470 244 00 00 3E 63 
26474 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
26478 246 3E 18 30 1E 
2647c 247 00 00 00 1C 
26480 248 58 78 38 18 
26484 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
26488 24a 3C 00 00 00 
2648c 24b 00 00 00 00 
26490 24c 63 00 3E 63 
26494 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
26498 24e 3E 00 00 00 
2649c 24f 66 33 00 3E 
264a0 250 63 63 63 63 
264a4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
264a8 252 3E 00 00 00 
264ac 253 00 00 CC 66 
264b0 254 33 00 3E 63 
264b4 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
264b8 256 3E 00 00 00 
264bc 257 00 00 18 3C 
264c0 258 66 00 1C 18 
264c4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
264c8 25a 3C 00 00 00 
264cc 25b 30 18 00 7F 
264d0 25c 63 61 30 18 
264d4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
264d8 25e 7F 00 00 00 
264dc 25f 00 63 00 08 
264e0 260 1C 36 63 63 
264e4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
264e8 262 63 00 00 00 
264ec 263 30 18 00 3C 
264f0 264 66 43 03 03 
264f4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
264f8 266 3C 00 00 00 
264fc 267 30 18 00 7F 
26500 268 66 46 16 1E 
26504 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
26508 26a 7F 00 00 00 
2650c 26b 0C 06 00 0F 
26510 26c 06 06 06 06 
26514 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
26518 26e 7F 00 00 00 
2651c 26f 30 18 00 1C 
26520 270 18 18 18 18 
26524 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
26528 272 3C 00 00 00 
2652c 273 00 00 08 1C 
26530 274 36 00 3E 63 
26534 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
26538 276 3E 00 00 00 
2653c 277 00 00 00 00 
26540 278 63 00 3E 63 
26544 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
26548 27a 3E 00 00 00 
2654c 27b 00 00 00 6F 
26550 27c 46 26 06 06 
26554 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
26558 27e 7F 00 00 00 
2655c 27f 00 00 00 6E 
26560 280 4C 2C 0C 0C 
26564 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
26568 282 1E 00 00 00 
2656c 283 30 18 00 3E 
26570 284 63 63 06 1C 
26574 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26578 286 3E 00 00 00 
2657c 287 00 00 60 30 
26580 288 18 00 3E 63 
26584 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
26588 28a 3E 00 00 00 
2658c 28b 00 63 00 3E 
26590 28c 63 63 63 63 
26594 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26598 28e 3E 00 00 00 
2659c 28f 00 63 00 63 
265a0 290 63 63 63 63 
265a4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
265a8 292 3E 00 00 00 
265ac 293 6C 38 00 7E 
265b0 294 7E 5A 18 18 
265b4 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
265b8 296 3C 00 00 00 
265bc 297 00 00 60 48 
265c0 298 2C 0C 3F 0C 
265c4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
265c8 29a 38 00 00 00 
265cc 29b 00 00 00 0F 
265d0 29c 26 36 1E 0E 
265d4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
265d8 29e 7F 00 00 00 
265dc 29f 00 00 00 00 
265e0 2a0 00 63 36 1C 
265e4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
265e8 2a2 00 00 00 00 
265ec 2a3 00 00       | 	byte	$00[6]
265ee 2a3 36 1C 08 00 
265f2 2a4 3E 63 03 03 
265f6 2a5 03 63 3E 00 
265fa 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
265fe 2a7 30 18 0C 00 
26602 2a8 1E 30 3E 33 
26606 2a9 33 33 6E 00 
2660a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2660e 2ab 60 30 18 00 
26612 2ac 1C 18 18 18 
26616 2ad 18 18 3C 00 
2661a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2661e 2af 60 30 18 00 
26622 2b0 3E 63 63 63 
26626 2b1 63 63 3E 00 
2662a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2662e 2b3 30 18 0C 00 
26632 2b4 33 33 33 33 
26636 2b5 33 33 6E 00 
2663a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2663e 2b7 00 08 1C 36 
26642 2b8 63 63 7F 63 
26646 2b9 63 63 63 18 
2664a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2664e 2bb 00 00 00 00 
26652 2bc 1E 30 3E 33 
26656 2bd 33 33 6E 18 
2665a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2665e 2bf 00 7F 63 61 
26662 2c0 30 18 0C 06 
26666 2c1 43 63 7F 00 
2666a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2666e 2c3 36 1C 08 00 
26672 2c4 7F 33 18 0C 
26676 2c5 06 63 7F 00 
2667a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2667e 2c7 00 7F 66 46 
26682 2c8 16 1E 16 06 
26686 2c9 46 66 7F 18 
2668a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2668e 2cb 00 00 00 00 
26692 2cc 3E 63 7F 03 
26696 2cd 03 63 3E 18 
2669a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2669e 2cf 00 3C 66 03 
266a2 2d0 1F 03 0F 03 
266a6 2d1 03 66 3C 00 
266aa 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
266ae 2d3 60 30 18 00 
266b2 2d4 7F 33 18 0C 
266b6 2d5 06 63 7F 00 
266ba 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
266be 2d7 00 3C 66 43 
266c2 2d8 03 03 03 03 
266c6 2d9 43 66 3C 00 
266ca 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
266ce 2db 00 00 00 00 
266d2 2dc 3E 63 06 1C 
266d6 2dd 30 63 3E 18 
266da 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
266de 2df 00 00 00 00 
266e2 2e0 00 00       | 	byte	$00[6]
266e4 2e1 6C 36 1B 36 
266e8 2e2 6C 00 00 00 
266ec 2e3 00 00 00 00 
266f0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
266f4 2e5 1B 36 6C 36 
266f8 2e6 1B 00 00 00 
266fc 2e7 88 22 88 22 
26700 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
26704 2e9 88 22 88 22 
26708 2ea 88 22 88 22 
2670c 2eb AA 55 AA 55 
26710 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
26714 2ed AA 55 AA 55 
26718 2ee AA 55 AA 55 
2671c 2ef BB EE BB EE 
26720 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
26724 2f1 BB EE BB EE 
26728 2f2 BB EE BB EE 
2672c 2f3 18 18 18 18 
26730 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
26734 2f5 18 18 18 18 
26738 2f6 18 18 18 18 
2673c 2f7 18 18 18 18 
26740 2f8 18 18 18    | 	byte	$18[15]
26743 2f8 1F 18 18 18 
26747 2f9 18 18 18 18 
2674b 2fa 18 30 18 00 
2674f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
26753 2fc 63 7F 63 63 
26757 2fd 63 63 00 00 
2675b 2fe 00 1C 36 00 
2675f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
26763 300 63 7F 63 63 
26767 301 63 63 00 00 
2676b 302 00 36 1C 00 
2676f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
26773 304 1E 16 06 46 
26777 305 66 7F 00 00 
2677b 306 00 00 00 00 
2677f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
26783 308 1C 30 60 63 
26787 309 63 3E 18 30 
2678b 30a 1E 6C 6C 6C 
2678f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
26793 30c 6F 6C 6C 6C 
26797 30d 6C 6C 6C 6C 
2679b 30e 6C 6C 6C 6C 
2679f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
267a3 310 6C 6C 6C 6C 
267a7 311 6C 6C 6C 6C 
267ab 312 6C          | 	byte	$6c[9]
267ac 313 00 00 00 00 
267b0 314 00          | 	byte	$00[5]
267b1 314 7F 60 6F 6C 
267b5 315 6C 6C 6C 6C 
267b9 316 6C 6C 6C 6C 
267bd 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
267c1 318 6F 60 7F 00 
267c5 319 00 00 00 00 
267c9 31a 00 00 00 18 
267cd 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
267d1 31c 61 30 18 0C 
267d5 31d 06 43 63 7F 
267d9 31e 00 00 00 00 
267dd 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
267e1 320 00 7F 33 18 
267e5 321 0C 06 63 7F 
267e9 322 00 00 00 00 
267ed 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
267f1 324 00 00 1F 18 
267f5 325 18 18 18 18 
267f9 326 18 18 18 18 
267fd 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26801 328 18 18 F8 00 
26805 329 00 00 00 00 
26809 32a 00 00 00 18 
2680d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
26811 32c 18 18 FF 00 
26815 32d 00 00 00 00 
26819 32e 00 00 00 00 
2681d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26821 330 00 00 FF 18 
26825 331 18 18 18 18 
26829 332 18 18 18 18 
2682d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26831 334 18 18 F8 18 
26835 335 18 18 18 18 
26839 336 18 18 18 00 
2683d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
26841 338 00 00 FF 00 
26845 339 00 00 00 00 
26849 33a 00 00 00 18 
2684d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
26851 33c 18 18 FF 18 
26855 33d 18 18 18 18 
26859 33e 18 18 18 63 
2685d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
26861 340 36 63 63 7F 
26865 341 63 63 63 63 
26869 342 00 00 00 00 
2686d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
26871 344 00 1E 30 3E 
26875 345 33 33 33 6E 
26879 346 00 00 00 6C 
2687d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
26881 348 EC 0C FC 00 
26885 349 00 00 00 00 
26889 34a 00 00 00 00 
2688d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26891 34c FC 0C EC 6C 
26895 34d 6C 6C 6C 6C 
26899 34e 6C 6C 6C 6C 
2689d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
268a1 350 EF 00 FF 00 
268a5 351 00 00 00 00 
268a9 352 00 00 00 00 
268ad 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
268b1 354 FF 00 EF 6C 
268b5 355 6C 6C 6C 6C 
268b9 356 6C 6C 6C 6C 
268bd 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
268c1 358 EC 0C EC 6C 
268c5 359 6C 6C 6C 6C 
268c9 35a 6C 6C 6C 00 
268cd 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
268d1 35c FF 00 FF 00 
268d5 35d 00 00 00 00 
268d9 35e 00 00 00 6C 
268dd 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
268e1 360 EF 00 EF 6C 
268e5 361 6C 6C 6C 6C 
268e9 362 6C 6C 6C 00 
268ed 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
268f1 364 63 3E 63 63 
268f5 365 63 63 3E 63 
268f9 366 00 00 00 00 
268fd 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
26901 368 30 3C 36 33 
26905 369 33 33 33 6E 
26909 36a 00 00 00 00 
2690d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
26911 36c 66 66 6F 66 
26915 36d 66 66 36 1F 
26919 36e 00 00 00 36 
2691d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
26921 370 66 66 66 66 
26925 371 66 66       | 	byte	$66[6]
26927 371 36 1F 00 00 
2692b 372 00 00 63 00 
2692f 373 7F 66 46 16 
26933 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
26937 375 66 7F 00 00 
2693b 376 00 6C 38 00 
2693f 377 38 30 30 3C 
26943 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
26947 379 33 6E 00 00 
2694b 37a 00 36 1C 00 
2694f 37b 63 67 6F 7F 
26953 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
26957 37d 63 63 00 00 
2695b 37e 00 30 18 00 
2695f 37f 3C 18 18 18 
26963 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
26967 381 18 3C 00 00 
2696b 382 00 3C 66 00 
2696f 383 3C 18 18 18 
26973 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
26977 385 18 3C 00 00 
2697b 386 00 00 00 36 
2697f 387 1C 08 00 3E 
26983 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
26987 389 63 3E 00 00 
2698b 38a 00 18 18 18 
2698f 38b 18 18 18 18 
26993 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
26997 38d 00 00 00 00 
2699b 38e 00 00 00 00 
2699f 38f 00 00 00 00 | 	byte	$00[12]
269a3 390 F8 18 18 18 
269a7 391 18 18 18 18 
269ab 392 18 FF FF FF 
269af 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
269b3 394 FF FF FF FF 
269b7 395 FF FF FF FF 
269bb 396 FF          | 	byte	$ff[9]
269bc 397 00 00 00 00 
269c0 398 00 00 00    | 	byte	$00[7]
269c3 398 FF FF FF FF 
269c7 399 FF FF FF FF 
269cb 39a FF          | 	byte	$ff[9]
269cc 39b 00 00 00 7E 
269d0 39c 7E 5A 18 18 
269d4 39d 18 18 18 18 
269d8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
269dc 39f 1C 36 1C 63 
269e0 3a0 63 63 63 63 
269e4 3a1 63 63 63 63 
269e8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
269ec 3a3 FF FF FF FF 
269f0 3a4 FF FF FF    | 	byte	$ff[7]
269f3 3a4 00 00 00 00 
269f7 3a5 00 00 00 00 
269fb 3a6 00          | 	byte	$00[9]
269fc 3a7 30 18 00 3E 
26a00 3a8 63 63 63 63 
26a04 3a9 63 63 63 63 
26a08 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26a0c 3ab 00 00 00 1E 
26a10 3ac 33 33 33 1B 
26a14 3ad 33 63 63 63 
26a18 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
26a1c 3af 1C 36 00 3E 
26a20 3b0 63 63 63 63 
26a24 3b1 63 63 63 63 
26a28 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26a2c 3b3 30 18 00 63 
26a30 3b4 67 6F 7F 7B 
26a34 3b5 73 63 63 63 
26a38 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
26a3c 3b7 00 00 60 30 
26a40 3b8 18 00 3B 66 
26a44 3b9 66 66 66 66 
26a48 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
26a4c 3bb 00 00 36 1C 
26a50 3bc 08 00 3B 66 
26a54 3bd 66 66 66 66 
26a58 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
26a5c 3bf 36 1C 00 3E 
26a60 3c0 63 63 06 1C 
26a64 3c1 30 60 63 63 
26a68 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
26a6c 3c3 00 00 36 1C 
26a70 3c4 08 00 3E 63 
26a74 3c5 06 1C 30 63 
26a78 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
26a7c 3c7 30 18 00 3F 
26a80 3c8 66 66 66 3E 
26a84 3c9 36 66 66 66 
26a88 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
26a8c 3cb 30 18 00 63 
26a90 3cc 63 63 63 63 
26a94 3cd 63 63 63 63 
26a98 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26a9c 3cf 00 00 60 30 
26aa0 3d0 18 00 3B 6E 
26aa4 3d1 66 06 06 06 
26aa8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
26aac 3d3 66 33 00 63 
26ab0 3d4 63 63 63 63 
26ab4 3d5 63 63 63 63 
26ab8 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26abc 3d7 00 00 60 30 
26ac0 3d8 18 00 63 63 
26ac4 3d9 63 63 63 63 
26ac8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
26acc 3db 30 18 00 66 
26ad0 3dc 66 66 66 3C 
26ad4 3dd 18 18 18 18 
26ad8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
26adc 3df 00 00 00 08 
26ae0 3e0 0C 0C 3F 0C 
26ae4 3e1 0C 0C 0C 6C 
26ae8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
26aec 3e3 30 18 00 00 
26af0 3e4 00 00 00 00 
26af4 3e5 00 00 00 00 
26af8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26afc 3e7 00 00 00 00 
26b00 3e8 00 00 00 00 | 	byte	$00[8]
26b04 3e9 7F 00 00 00 
26b08 3ea 00 00 00 00 
26b0c 3eb 66 33 00 00 
26b10 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
26b14 3ed 00 00 00 00 
26b18 3ee 00 00 00 00 
26b1c 3ef 00 00 00 00 
26b20 3f0 00 00 00 00 
26b24 3f1 00 00 00 00 
26b28 3f2 00          | 	byte	$00[21]
26b29 3f2 0C 06 3C 36 
26b2d 3f3 1C 00 00 00 
26b31 3f4 00 00 00 00 
26b35 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b39 3f6 00 00 00 63 
26b3d 3f7 3E 00 00 00 
26b41 3f8 00 00 00 00 
26b45 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b49 3fa 00 00 00 00 
26b4d 3fb 3E 63 06 1C 
26b51 3fc 36 63 63 36 
26b55 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
26b59 3fe 00 00 00 00 
26b5d 3ff 00 00 00 00 | 	byte	$00[8]
26b61 400 18 00 7E 00 
26b65 401 18 00 00 00 
26b69 402 00 00 00 00 
26b6d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b71 404 00 00 00 00 
26b75 405 00 00 00 00 | 	byte	$00[8]
26b79 406 18 30 1E 00 
26b7d 407 00 00 1C 36 
26b81 408 36 1C 00 00 
26b85 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
26b89 40a 00 00 00 00 
26b8d 40b 63 00 00 00 
26b91 40c 00 00 00 00 
26b95 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b99 40e 00 00 00 18 
26b9d 40f 18 00 00 00 
26ba1 410 00 00 00 00 
26ba5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26ba9 412 00 00 00 00 
26bad 413 00          | 	byte	$00[5]
26bae 413 CC 66 33 00 
26bb2 414 33 33 33 33 
26bb6 415 33 33 6E 00 
26bba 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
26bbe 417 00 3F 66 66 
26bc2 418 66 3E 36 66 
26bc6 419 66 66 6F 00 
26bca 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
26bce 41b 36 1C 08 00 
26bd2 41c 3B 6E 66 06 
26bd6 41d 06 06 0F 00 
26bda 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
26bde 41f 00 00 00 7E 
26be2 420 7E 7E 7E 7E 
26be6 421 7E 7E 00 00 
26bea 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
26bee 423 00 00 00 00 
26bf2 424 00 00 00 00 
26bf6 425 00 00 00 00 
26bfa 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26bfc 427             | 'vga_font       file "vgafont.def"
26bfc 427 00 00 00 00 
      ...             
26c2c 433 00 00 00 00 
26c30 434 00 00 00    | st_font        file "st4font.def"
26c33 434 FF FF 00 00 
26c37 435 00 00 00 00 
26c3b 436 00 18 18 18 
26c3f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26c43 438 18 18 18 18 
26c47 439 18 18 18 18 
26c4b 43a 18          | 	byte	$18[9]
26c4c 43b 00 00 00 00 
26c50 43c 00 00 00    | 	byte	$00[7]
26c53 43c FF FF 18 18 
26c57 43d 18 18 18 18 
26c5b 43e 18 18 18 18 
26c5f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26c63 440 FF FF 00 00 
26c67 441 00 00 00 00 
26c6b 442 00 18 18 18 
26c6f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26c73 444 1F 1F 18 18 
26c77 445 18 18 18 18 
26c7b 446 18 18 18 18 
26c7f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26c83 448 F8 F8 18 18 
26c87 449 18 18 18 18 
26c8b 44a 18 00 00 00 
26c8f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26c93 44c 1F 1F 18 18 
26c97 44d 18 18 18 18 
26c9b 44e 18 00 00 00 
26c9f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26ca3 450 F8 F8 18 18 
26ca7 451 18 18 18 18 
26cab 452 18 18 18 18 
26caf 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26cb3 454 1F 1F 00 00 
26cb7 455 00 00 00 00 
26cbb 456 00 18 18 18 
26cbf 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26cc3 458 F8 F8 00 00 
26cc7 459 00 00 00 00 
26ccb 45a 00 18 18 18 
26ccf 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26cd3 45c FF FF 18 18 
26cd7 45d 18 18 18 18 
26cdb 45e 18 00 00 18 
26cdf 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
26ce3 460 66 7E 7E 66 
26ce7 461 66 66 66 30 
26ceb 462 18 00 00 7E 
26cef 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
26cf3 464 3E 06 06 06 
26cf7 465 06 7E 7E 18 
26cfb 466 0C 30 18 3C 
26cff 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
26d03 468 06 06 06 66 
26d07 469 66 7E 3C 00 
26d0b 46a 00 30 18 66 
26d0f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
26d13 46c 7E 7E 76 76 
26d17 46d 66 66 66 00 
26d1b 46e 00 30 18 7C 
26d1f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
26d23 470 1C 38 70 60 
26d27 471 60 7E 3E 00 
26d2b 472 00 30 18 7E 
26d2f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
26d33 474 18 0C 0C 06 
26d37 475 06 7E 7E 00 
26d3b 476 00 18 18 00 
26d3f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
26d43 478 18 18 0C 0C 
26d47 479 06 7E 7E 00 
26d4b 47a 00 30 18 3C 
26d4f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
26d53 47c 66 66 66 66 
26d57 47d 66          | 	byte	$66[5]
26d58 47e 7E 3C 00 00 
26d5c 47f 00 00 06 06 
26d60 480 06 06 16 1E 
26d64 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
26d68 482 7E 7E 00 00 
26d6c 483 00 00 00 00 
26d70 484 00 3C 7C 60 
26d74 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
26d78 486 7E 7C 30 18 
26d7c 487 00 00 00 00 
26d80 488 00 3C 7E 66 
26d84 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
26d88 48a 7E 7C 18 0C 
26d8c 48b 00 00 30 18 
26d90 48c 00 3C 3E 06 
26d94 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
26d98 48e 7E 7C 00 00 
26d9c 48f 00 00 30 18 
26da0 490 00 3E 7E 66 
26da4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
26da8 492 66 66 00 00 
26dac 493 00 00 30 18 
26db0 494 00 7C 7E 06 
26db4 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
26db8 496 7E 3E 00 00 
26dbc 497 00 00 30 18 
26dc0 498 00 7E 7E 30 
26dc4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
26dc8 49a 7E 7E 00 00 
26dcc 49b 00 00 18 18 
26dd0 49c 00 7E 7E 30 
26dd4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
26dd8 49e 7E 7E 00 00 
26ddc 49f 00 00 30 18 
26de0 4a0 00 3C 7E 66 
26de4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
26de8 4a2 7E 3C 00 00 
26dec 4a3 00 00 1C 1C 
26df0 4a4 18 18 38 3C 
26df4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
26df8 4a6 3C 3C 00 00 
26dfc 4a7 00 00 00 00 
26e00 4a8 00 00 00 00 
26e04 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e08 4aa 00 00 00 00 
26e0c 4ab 00 00       | 	byte	$00[6]
26e0e 4ab 18 18 18 18 
26e12 4ac 18 18 18 18 | 	byte	$18[8]
26e16 4ad 00 00 18 18 
26e1a 4ae 00 00 00 00 
26e1e 4af 66 66 66 66 
26e22 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
26e26 4b1 00 00 00 00 
26e2a 4b2 00 00 00 00 
26e2e 4b3 00          | 	byte	$00[9]
26e2f 4b3 66 66 FF FF 
26e33 4b4 66 66 FF FF 
26e37 4b5 66 66 00 00 
26e3b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
26e3f 4b7 7C 7E 06 06 
26e43 4b8 3E 7C 60 60 
26e47 4b9 7E 3E 18 18 
26e4b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
26e4f 4bb 66 30 30 18 
26e53 4bc 18 0C 0C 66 
26e57 4bd 66 00 00 00 
26e5b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
26e5f 4bf 66 66 3C 1C 
26e63 4c0 1C FC FE 66 
26e67 4c1 66 FE FC 00 
26e6b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
26e6f 4c3 18 18 18 18 
26e73 4c4 00 00 00 00 
26e77 4c5 00 00 00 00 
26e7b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
26e7f 4c7 18 1C 0C 0C 
26e83 4c8 0C 0C 0C 0C 
26e87 4c9 1C 18 30 00 
26e8b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
26e8f 4cb 18 38 30 30 
26e93 4cc 30 30 30 30 
26e97 4cd 38 18 0C 00 
26e9b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
26e9f 4cf 66 66 3C 3C 
26ea3 4d0 FF FF 3C 3C 
26ea7 4d1 66 66 00 00 
26eab 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
26eaf 4d3 00 18 18 18 
26eb3 4d4 7E 7E 18 18 
26eb7 4d5 18 00 00 00 
26ebb 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26ebf 4d7 00 00 00 00 
26ec3 4d8 00 00       | 	byte	$00[6]
26ec5 4d9 18 18 18 18 
26ec9 4da 18          | 	byte	$18[5]
26eca 4da 0C 04 00 00 
26ece 4db 00 00 00 00 
26ed2 4dc 7E 7E 00 00 
26ed6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
26eda 4de 00 00 00 00 
26ede 4df 00 00 00 00 
26ee2 4e0 00 00 00 00 
26ee6 4e1 00          | 	byte	$00[13]
26ee7 4e1 18 18 18 00 
26eeb 4e2 00 00 00 60 
26eef 4e3 60 60 30 30 
26ef3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
26ef7 4e5 06 06 06 00 
26efb 4e6 00 00 00 3C 
26eff 4e7 7E 66 66 66 
26f03 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
26f07 4e9 66 7E 3C 00 
26f0b 4ea 00 00 00 18 
26f0f 4eb 18 1C 1C 18 
26f13 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
26f17 4ed 18 7E 7E 00 
26f1b 4ee 00 00 00 3C 
26f1f 4ef 7E 66 66 30 
26f23 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
26f27 4f1 0C 7E 7E 00 
26f2b 4f2 00 00 00 7E 
26f2f 4f3 7E 30 30 18 
26f33 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
26f37 4f5 66 7E 3C 00 
26f3b 4f6 00 00 00 30 
26f3f 4f7 30 38 38 3C 
26f43 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
26f47 4f9 7E 30 30 00 
26f4b 4fa 00 00 00 7E 
26f4f 4fb 7E 06 06 3E 
26f53 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
26f57 4fd 66 7E 3C 00 
26f5b 4fe 00 00 00 38 
26f5f 4ff 3C 0E 06 06 
26f63 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
26f67 501 66 7E 3C 00 
26f6b 502 00 00 00 7E 
26f6f 503 7E 60 60 30 
26f73 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
26f77 505 0C 0C 0C 00 
26f7b 506 00 00 00 3C 
26f7f 507 7E 66 66 3C 
26f83 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
26f87 509 66 7E 3C 00 
26f8b 50a 00 00 00 3C 
26f8f 50b 7E 66 66 7E 
26f93 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
26f97 50d 70 3C 1C 00 
26f9b 50e 00 00 00 00 
26f9f 50f 00 00 18 18 
26fa3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
26fa7 511 18 18 18 00 
26fab 512 00 00 00 00 
26faf 513 00 00 18 18 
26fb3 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
26fb7 515 18 18 18 0C 
26fbb 516 04 00 00 00 
26fbf 517 70 38 1C 0E 
26fc3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
26fc7 519 70 00 00 00 
26fcb 51a 00 00 00 00 
26fcf 51b 00 00 7E 7E 
26fd3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
26fd7 51d 00 00 00 00 
26fdb 51e 00 00 00 00 | 	byte	$00[8]
26fdf 51f 0E 1C 38 70 
26fe3 520 E0 70 38 1C 
26fe7 521 0E 00 00 00 
26feb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
26fef 523 7E 66 66 30 
26ff3 524 30 18 18 18 
26ff7 525 00 18 18 00 
26ffb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
26fff 527 7E 66 66 66 
27003 528 66 36 06 66 
27007 529 66 7E 3C 00 
2700b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2700f 52b 3C 7E 66 66 
27013 52c 66 7E 7E 66 
27017 52d 66 66 66 00 
2701b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2701f 52f 7E 66 66 7E 
27023 530 3E 66 66 66 
27027 531 66 7E 3E 00 
2702b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2702f 533 7E 66 66 06 
27033 534 06 06 06 66 
27037 535 66 7E 3C 00 
2703b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2703f 537 7E 66 66 66 
27043 538 66 66 66 66 
27047 539 66 7E 3E 00 
2704b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2704f 53b 7E 06 06 3E 
27053 53c 3E 06 06 06 
27057 53d 06 7E 7E 00 
2705b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2705f 53f 7E 06 06 3E 
27063 540 3E 06 06 06 
27067 541 06 06 06 00 
2706b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2706f 543 7E 06 06 76 
27073 544 76 66 66 66 
27077 545 66 7E 3C 00 
2707b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2707f 547 66 66 66 7E 
27083 548 7E 66 66 66 
27087 549 66 66 66 00 
2708b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2708f 54b 7E 18 18 18 
27093 54c 18 18 18 18 
27097 54d 18 7E 7E 00 
2709b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2709f 54f 60 60 60 60 
270a3 550 60 60 60    | 	byte	$60[7]
270a6 551 66 66 7E 3C 
270aa 552 00 00 00 00 
270ae 553 66 66 36 36 
270b2 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
270b6 555 66 66 C6 C6 
270ba 556 00 00 00 00 
270be 557 06 06 06 06 
270c2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
270c6 559 06 06 7E 7E 
270ca 55a 00 00 00 00 
270ce 55b C6 C6 EE EE 
270d2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
270d6 55d C6 C6 C6 C6 
270da 55e 00 00 00 00 
270de 55f 66 66 66 6E 
270e2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
270e6 561 76 66 66 66 
270ea 562 00 00 00 00 
270ee 563 3C 7E 66 66 
270f2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
270f6 565 66 66 7E 3C 
270fa 566 00 00 00 00 
270fe 567 3E 7E 66 66 
27102 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
27106 569 06 06 06 06 
2710a 56a 00 00 00 00 
2710e 56b 3C 7E 66 66 
27112 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27116 56d 66 56 3E 6C 
2711a 56e 00 00 00 00 
2711e 56f 3E 7E 66 66 
27122 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
27126 571 66 66 C6 C6 
2712a 572 00 00 00 00 
2712e 573 7C 7E 06 06 
27132 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
27136 575 60 60 7E 3E 
2713a 576 00 00 00 00 
2713e 577 7E 7E 18 18 
27142 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
27146 579 18 18 18 18 
2714a 57a 00 00 00 00 
2714e 57b 66 66 66 66 
27152 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27156 57d 66 66 7E 3C 
2715a 57e 00 00 00 00 
2715e 57f 66 66 66 66 
27162 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27166 581 3C 3C 18 18 
2716a 582 00 00 00 00 
2716e 583 C6 C6 C6 C6 
27172 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
27176 585 FE EE C6 82 
2717a 586 00 00 00 00 
2717e 587 66 66 66 3C 
27182 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
27186 589 3C 66 66 66 
2718a 58a 00 00 00 00 
2718e 58b 66 66 66 66 
27192 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
27196 58d 18 18 18 18 
2719a 58e 00 00 00 00 
2719e 58f 7E 7E 30 30 
271a2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
271a6 591 06 06 7E 7E 
271aa 592 00 00 00 00 
271ae 593 3C 3C 0C 0C 
271b2 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
271b6 595 0C 0C 3C 3C 
271ba 596 00 00 00 00 
271be 597 06 06 0C 0C 
271c2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
271c6 599 60 60 C0 C0 
271ca 59a 00 00 00 00 
271ce 59b 3C 3C 30 30 
271d2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
271d6 59d 30 30 3C 3C 
271da 59e 00 00 00 00 
271de 59f 18 18 3C 3C 
271e2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
271e6 5a1 00 00 00 00 
271ea 5a2 00 00 00 00 
271ee 5a3 00 00 00 00 
271f2 5a4 00 00 00 00 
271f6 5a5 00 00       | 	byte	$00[18]
271f8 5a6 FE FE 00 00 
271fc 5a7 00 00 0C 0C 
27200 5a8 18 18 00 00 
27204 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
27208 5aa 00 00 00 00 
2720c 5ab 00 00 00 00 
27210 5ac 00          | 	byte	$00[9]
27211 5ac 3C 7C 60 7C 
27215 5ad 7E 66 66 7E 
27219 5ae 7C 00 00 00 
2721d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
27221 5b0 3E 7E 66 66 
27225 5b1 66 66 66 7E 
27229 5b2 3E 00 00 00 
2722d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
27231 5b4 3C 3E 06 06 
27235 5b5 06 06 06 7E 
27239 5b6 7C 00 00 00 
2723d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
27241 5b8 7C 7E 66 66 
27245 5b9 66 66 66 7E 
27249 5ba 7C 00 00 00 
2724d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
27251 5bc 3C 7E 66 66 
27255 5bd 7E 06 06 7E 
27259 5be 7C 00 00 00 
2725d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
27261 5c0 18 7E 7E 18 
27265 5c1 18 18 18 18 
27269 5c2 18 00 00 00 
2726d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27271 5c4 7C 7E 66 66 
27275 5c5 66 66 7E 7C 
27279 5c6 60 7E 3E 00 
2727d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
27281 5c8 3E 7E 66 66 
27285 5c9 66 66 66 66 
27289 5ca 66 00 00 00 
2728d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
27291 5cc 1C 1C 18 18 
27295 5cd 18 18 18 3C 
27299 5ce 3C 00 00 00 
2729d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
272a1 5d0 30 30 30 30 
272a5 5d1 30 30 30 30 
272a9 5d2 30          | 	byte	$30[9]
272aa 5d2 3E 1E 00 00 
272ae 5d3 06 06 06 36 
272b2 5d4 36 1E 1E 1E 
272b6 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
272ba 5d6 00 00 00 00 
272be 5d7 1C 1C 18 18 
272c2 5d8 18 18 18 18 
272c6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
272ca 5da 00 00 00 00 
272ce 5db 00 00 00    | 	byte	$00[7]
272d1 5dc 6C FE FE D6 
272d5 5dd D6 C6 C6 C6 
272d9 5de C6 00 00 00 
272dd 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
272e1 5e0 3E 7E 66 66 
272e5 5e1 66 66 66 66 
272e9 5e2 66 00 00 00 
272ed 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
272f1 5e4 3C 7E 66 66 
272f5 5e5 66 66 66 7E 
272f9 5e6 3C 00 00 00 
272fd 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
27301 5e8 3E 7E 66 66 
27305 5e9 66 66 66 7E 
27309 5ea 3E 06 06 00 
2730d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
27311 5ec 7C 7E 66 66 
27315 5ed 66 66 66 7E 
27319 5ee 7C 60 60 00 
2731d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
27321 5f0 3E 7E 66 06 
27325 5f1 06 06 06 06 
27329 5f2 06 00 00 00 
2732d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
27331 5f4 7C 7E 06 0E 
27335 5f5 3C 70 60 7E 
27339 5f6 3E 00 00 00 
2733d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
27341 5f8 7E 7E 18 18 
27345 5f9 18 18 18 78 
27349 5fa 70 00 00 00 
2734d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
27351 5fc 66 66 66 66 
27355 5fd 66 66 66    | 	byte	$66[7]
27358 5fe 7E 7C 00 00 
2735c 5ff 00 00 00 00 
27360 600 00 66 66 66 
27364 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
27368 602 18 18 00 00 
2736c 603 00 00 00 00 
27370 604 00 C6 C6 D6 
27374 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
27378 606 C6 82 00 00 
2737c 607 00 00 00 00 
27380 608 00 66 66 3C 
27384 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
27388 60a 66 66 00 00 
2738c 60b 00 00 00 00 
27390 60c 00 66 66 66 
27394 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
27398 60e 7C 60 7E 3E 
2739c 60f 00 00 00 00 
273a0 610 00 7E 7E 30 
273a4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
273a8 612 7E 7E 00 00 
273ac 613 00 00 30 18 
273b0 614 18 18 18 0C 
273b4 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
273b8 616 18 30 00 00 
273bc 617 00 00 18 18 
273c0 618 18 18 18 18 
273c4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
273c8 61a 18 18 00 00 
273cc 61b 00 00 0C 18 
273d0 61c 18 18 18 30 
273d4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
273d8 61e 18 0C 00 00 
273dc 61f 00 00 6C 7E 
273e0 620 36 00 00 00 
273e4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
273e8 622 00 00 00 00 
273ec 623 00 00 00 00 
273f0 624 00          | 	byte	$00[9]
273f1 624 18 18 18 18 
273f5 625 18 18 00 00 
273f9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
273fc 627             | 'amiga_font     file "amigafont.def"
273fc 627 00 6C FE FE 
27400 628 7C 38 10 00 
27404 629 18 18 18 F8 
27408 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2740c 62b C0 C0 C0 C0 
27410 62c C0 C0 C0 C0 | 	byte	$c0[8]
27414 62d 18 18 18 1F 
27418 62e 1F 00 00 00 
2741c 62f 18 18 18 1F 
27420 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
27424 631 00 00 00 1F 
27428 632 1F 18 18 18 
2742c 633 C0 E0 70 38 
27430 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
27434 635 03 07 0E 1C 
27438 636 38 70 E0 C0 
2743c 637 80 C0 E0 F0 
27440 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
27444 639 00 00 00 00 
27448 63a F0 F0 F0 F0 
2744c 63b 01 03 07 0F 
27450 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
27454 63d F0 F0 F0 F0 
27458 63e 00 00 00 00 
2745c 63f 0F 0F 0F 0F 
27460 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
27464 641 FF FF 00 00 
27468 642 00 00 00 00 
2746c 643 00 00 00 00 
27470 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
27474 645 00 00 00 00 
27478 646 0F 0F 0F 0F 
2747c 647 00 38 38 EE 
27480 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
27484 649 00 00 00 F8 
27488 64a F8 18 18 18 
2748c 64b 00 00 00 FF 
27490 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
27494 64d 18 18 18 FF 
27498 64e FF 18 18 18 
2749c 64f 00 00 3C 7E 
274a0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
274a4 651 00 00 00 00 
274a8 652 FF FF FF FF 
274ac 653 03 03 03 03 
274b0 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
274b4 655 00 00 00 FF 
274b8 656 FF 18 18 18 
274bc 657 18 18 18 FF 
274c0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
274c4 659 0F 0F 0F 0F 
274c8 65a 0F 0F 0F 0F | 	byte	$0f[8]
274cc 65b 18 18 18 F8 
274d0 65c F8 00 00 00 
274d4 65d 1E 06 1E 06 
274d8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
274dc 65f 00 18 3C 7E 
274e0 660 18 18 18 00 
274e4 661 00 18 18 18 
274e8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
274ec 663 00 18 0C 7E 
274f0 664 0C 18 00 00 
274f4 665 00 18 30 7E 
274f8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
274fc 667 00 00 00 00 
27500 668 00 00 00 00 
27504 669 00          | 	byte	$00[9]
27505 669 18 18 18 18 
27509 66a 00 18 00 00 
2750d 66b 66 66 66 00 
27511 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
27515 66d 66 FF 66 66 
27519 66e FF 66 00 18 
2751d 66f 7C 06 3C 60 
27521 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
27525 671 66 36 18 0C 
27529 672 66 62 00 38 
2752d 673 6C 38 1C F6 
27531 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
27535 675 18 18 18 00 
27539 676 00 00 00 00 
2753d 677 70 38 18 18 
27541 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
27545 679 0E 1C 18 18 
27549 67a 1C 0E 00 00 
2754d 67b 66 3C FF 3C 
27551 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
27555 67d 18 18 7E 18 
27559 67e 18 00 00 00 
2755d 67f 00 00 00 00 
27561 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
27565 681 00 00 7E 00 
27569 682 00 00 00 00 
2756d 683 00 00 00 00 
27571 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
27575 685 60 30 18 0C 
27579 686 06 02 00 00 
2757d 687 3C 66 76 6E 
27581 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
27585 689 18 1C 18 18 
27589 68a 18 7E 00 00 
2758d 68b 3C 66 30 18 
27591 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
27595 68d 7E 30 18 30 
27599 68e 66 3C 00 00 
2759d 68f 30 38 3C 36 
275a1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
275a5 691 7E 06 3E 60 
275a9 692 66 3C 00 00 
275ad 693 3C 06 3E 66 
275b1 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
275b5 695 7E 60 30 18 
275b9 696 0C 0C 00 00 
275bd 697 3C 66 3C 66 
275c1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
275c5 699 3C 66 7C 60 
275c9 69a 30 1C 00 00 
275cd 69b 00 18 18 00 
275d1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
275d5 69d 00 18 18 00 
275d9 69e 18 18 0C 60 
275dd 69f 30 18 0C 18 
275e1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
275e5 6a1 00 7E 00 00 
275e9 6a2 7E 00 00 06 
275ed 6a3 0C 18 30 18 
275f1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
275f5 6a5 3C 66 30 18 
275f9 6a6 00 18 00 00 
275fd 6a7 3C 66 76 76 
27601 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
27605 6a9 18 3C 66 66 
27609 6aa 7E 66 00 00 
2760d 6ab 3E 66 3E 66 
27611 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
27615 6ad 3C 66 06 06 
27619 6ae 66 3C 00 00 
2761d 6af 1E 36 66 66 
27621 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
27625 6b1 7E 06 3E 06 
27629 6b2 06 7E 00 00 
2762d 6b3 7E 06 3E 06 
27631 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
27635 6b5 7C 06 06 76 
27639 6b6 66 7C 00 00 
2763d 6b7 66 66 7E 66 
27641 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
27645 6b9 7E 18 18 18 
27649 6ba 18 7E 00 00 
2764d 6bb 60 60 60 60 
27651 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
27655 6bd 66 36 1E 1E 
27659 6be 36 66 00 00 
2765d 6bf 06 06 06 06 
27661 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
27665 6c1 C6 EE FE D6 
27669 6c2 C6 C6 00 00 
2766d 6c3 66 6E 7E 7E 
27671 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
27675 6c5 3C 66 66 66 
27679 6c6 66 3C 00 00 
2767d 6c7 3E 66 66 3E 
27681 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
27685 6c9 3C 66 66 66 
27689 6ca 36 6C 00 00 
2768d 6cb 3E 66 66 3E 
27691 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
27695 6cd 3C 06 3C 60 
27699 6ce 60 3C 00 00 
2769d 6cf 7E 18 18 18 
276a1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
276a5 6d1 66 66 66 66 
276a9 6d2 66          | 	byte	$66[5]
276aa 6d2 7E 00 00 66 
276ae 6d3 66 66 66 3C 
276b2 6d4 18 00 00 C6 
276b6 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
276ba 6d6 C6 00 00 66 
276be 6d7 66 3C 3C 66 
276c2 6d8 66 00 00 66 
276c6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
276ca 6da 18 00 00 7E 
276ce 6db 30 18 0C 06 
276d2 6dc 7E 00 00 78 
276d6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
276da 6de 78 00 00 02 
276de 6df 06 0C 18 30 
276e2 6e0 60 00 00 1E 
276e6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
276ea 6e2 1E 00 00 10 
276ee 6e3 38 6C C6 00 
276f2 6e4 00 00 00 00 
276f6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
276fa 6e6 FF 00 00 18 
276fe 6e7 3C 7E 7E 3C 
27702 6e8 18 00 00 00 
27706 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2770a 6ea 7C 00 00 06 
2770e 6eb 06 3E 66 66 
27712 6ec 3E 00 00 00 
27716 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2771a 6ee 3C 00 00 60 
2771e 6ef 60 7C 66 66 
27722 6f0 7C 00 00 00 
27726 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2772a 6f2 3C 00 00 70 
2772e 6f3 18 7C 18 18 
27732 6f4 18 00 00 00 
27736 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2773a 6f6 60 3E 00 06 
2773e 6f7 06 3E 66 66 
27742 6f8 66 00 00 18 
27746 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2774a 6fa 3C 00 00 60 
2774e 6fb 00 60 60 60 
27752 6fc 60 3C 00 06 
27756 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2775a 6fe 66 00 00 1C 
2775e 6ff 18 18 18 18 
27762 700 3C 00 00 00 
27766 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2776a 702 C6 00 00 00 
2776e 703 3E 66 66 66 
27772 704 66 00 00 00 
27776 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2777a 706 3C 00 00 00 
2777e 707 3E 66 66 3E 
27782 708 06 06 00 00 
27786 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2778a 70a 60 60 00 00 
2778e 70b 3E 66 06 06 
27792 70c 06 00 00 00 
27796 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2779a 70e 3E 00 00 18 
2779e 70f 7E 18 18 18 
277a2 710 70 00 00 00 
277a6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
277aa 712 7C 00 00 00 
277ae 713 66 66 66 3C 
277b2 714 18 00 00 00 
277b6 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
277ba 716 6C 00 00 00 
277be 717 66 3C 18 3C 
277c2 718 66 00 00 00 
277c6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
277ca 71a 30 1E 00 00 
277ce 71b 7E 30 18 0C 
277d2 71c 7E 00 00 18 
277d6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
277da 71e 3C 00 18 18 
277de 71f 18 18 18 18 
277e2 720 18 18 00 7E 
277e6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
277ea 722 60 00 10 18 
277ee 723 1C 1E 1C 18 
277f2 724 10 00 08 18 
277f6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
277fa 726 08 00       | 	byte	$08, $00
277fc 727 00 00 00 00 
27800 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
27801 728 80 00 00 00 
27805 729 00 80 00 00 
27809 72a 80 80 00 00 
2780d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
27811 72c 80 00 80 00 
27815 72d 00 40 80 00 
27819 72e AA AA AA 00 
2781d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
27821 730 FF 00 00 00 
27825 731 00 FF 00 00 
27829 732 FF FF 00 00 
2782d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
27831 734 FF 00 FF 00 
27835 735 00 FF FF 00 
27839 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2783c 737 00 00 00 00 
27840 738 00          | ataripalette   file "ataripalettep2.def"
27841 738 11 11 11 00 
27845 739 22 22 22 00 
27849 73a 33 33 33 00 
2784d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
27851 73c 55 55 55 00 
27855 73d 66 66 66 00 
27859 73e 77 77 77 00 
2785d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
27861 740 99 99 99 00 
27865 741 AA AA AA 00 
27869 742 BB BB BB 00 
2786d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
27871 744 DD DD DD 00 
27875 745 EE EE EE 00 
27879 746 FF FF FF 00 
2787d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
27881 748 00 14 40 00 
27885 749 00 1E 60 00 
27889 74a 00 28 80 00 
2788d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
27891 74c 00 3C BF 00 
27895 74d 00 46 DF 00 
27899 74e 00 50 FF 00 
2789d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
278a1 750 39 77 FF 00 
278a5 751 55 8A FF 00 
278a9 752 71 9E FF 00 
278ad 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
278b1 754 AA C5 FF 00 
278b5 755 C6 D8 FF 00 
278b9 756 E3 EC FF 00 
278bd 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
278c1 758 00 00 40 00 
278c5 759 00 00 60 00 
278c9 75a 00 00 80 00 
278cd 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
278d1 75c 00 00 BF 00 
278d5 75d 00 00 DF 00 
278d9 75e 00 00 FF 00 
278dd 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
278e1 760 39 39 FF 00 
278e5 761 55 55 FF 00 
278e9 762 71 71 FF 00 
278ed 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
278f1 764 AA AA FF 00 
278f5 765 C6 C6 FF 00 
278f9 766 E3 E3 FF 00 
278fd 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
27901 768 20 00 40 00 
27905 769 30 00 60 00 
27909 76a 40 00 80 00 
2790d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
27911 76c 60 00 BF 00 
27915 76d 70 00 DF 00 
27919 76e 80 00 FF 00 
2791d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
27921 770 9C 39 FF 00 
27925 771 AA 55 FF 00 
27929 772 B8 71 FF 00 
2792d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
27931 774 D5 AA FF 00 
27935 775 E3 C6 FF 00 
27939 776 F1 E3 FF 00 
2793d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
27941 778 40 00 40 00 
27945 779 60 00 60 00 
27949 77a 80 00 80 00 
2794d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
27951 77c BF 00 BF 00 
27955 77d DF 00 DF 00 
27959 77e FF 00 FF 00 
2795d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
27961 780 FF 39 FF 00 
27965 781 FF 55 FF 00 
27969 782 FF 71 FF 00 
2796d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
27971 784 FF AA FF 00 
27975 785 FF C6 FF 00 
27979 786 FF E3 FF 00 
2797d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
27981 788 40 00 20 00 
27985 789 60 00 30 00 
27989 78a 80 00 40 00 
2798d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
27991 78c BF 00 60 00 
27995 78d DF 00 70 00 
27999 78e FF 00 80 00 
2799d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
279a1 790 FF 39 9C 00 
279a5 791 FF 55 AA 00 
279a9 792 FF 71 B8 00 
279ad 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
279b1 794 FF AA D5 00 
279b5 795 FF C6 E3 00 
279b9 796 FF E3 F1 00 
279bd 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
279c1 798 40 00 00 00 
279c5 799 60 00 00 00 
279c9 79a 80 00 00 00 
279cd 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
279d1 79c BF 00 00 00 
279d5 79d DF 00 00 00 
279d9 79e FF 00 00 00 
279dd 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
279e1 7a0 FF 39 39 00 
279e5 7a1 FF 55 55 00 
279e9 7a2 FF 71 71 00 
279ed 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
279f1 7a4 FF AA AA 00 
279f5 7a5 FF C6 C6 00 
279f9 7a6 FF E3 E3 00 
279fd 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
27a01 7a8 40 10 00 00 
27a05 7a9 60 18 00 00 
27a09 7aa 80 20 00 00 
27a0d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
27a11 7ac BF 30 00 00 
27a15 7ad DF 38 00 00 
27a19 7ae FF 40 00 00 
27a1d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
27a21 7b0 FF 6A 39 00 
27a25 7b1 FF 80 55 00 
27a29 7b2 FF 95 71 00 
27a2d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
27a31 7b4 FF BF AA 00 
27a35 7b5 FF D5 C6 00 
27a39 7b6 FF EA E3 00 
27a3d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
27a41 7b8 40 20 00 00 
27a45 7b9 60 30 00 00 
27a49 7ba 80 40 00 00 
27a4d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
27a51 7bc BF 60 00 00 
27a55 7bd DF 70 00 00 
27a59 7be FF 80 00 00 
27a5d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
27a61 7c0 FF 9C 39 00 
27a65 7c1 FF AA 55 00 
27a69 7c2 FF B8 71 00 
27a6d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
27a71 7c4 FF D5 AA 00 
27a75 7c5 FF E3 C6 00 
27a79 7c6 FF F1 E3 00 
27a7d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
27a81 7c8 40 30 00 00 
27a85 7c9 60 48 00 00 
27a89 7ca 80 60 00 00 
27a8d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
27a91 7cc BF 90 00 00 
27a95 7cd DF A8 00 00 
27a99 7ce FF C0 00 00 
27a9d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
27aa1 7d0 FF CE 39 00 
27aa5 7d1 FF D5 55 00 
27aa9 7d2 FF DC 71 00 
27aad 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
27ab1 7d4 FF EA AA 00 
27ab5 7d5 FF F1 C6 00 
27ab9 7d6 FF F8 E3 00 
27abd 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
27ac1 7d8 30 40 00 00 
27ac5 7d9 48 60 00 00 
27ac9 7da 60 80 00 00 
27acd 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
27ad1 7dc 90 BF 00 00 
27ad5 7dd A8 DF 00 00 
27ad9 7de C0 FF 00 00 
27add 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
27ae1 7e0 CE FF 39 00 
27ae5 7e1 D5 FF 55 00 
27ae9 7e2 DC FF 71 00 
27aed 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
27af1 7e4 EA FF AA 00 
27af5 7e5 F1 FF C6 00 
27af9 7e6 F8 FF E3 00 
27afd 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
27b01 7e8 00 40 00 00 
27b05 7e9 00 60 00 00 
27b09 7ea 00 80 00 00 
27b0d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
27b11 7ec 00 BF 00 00 
27b15 7ed 00 DF 00 00 
27b19 7ee 00 FF 00 00 
27b1d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
27b21 7f0 39 FF 39 00 
27b25 7f1 55 FF 55 00 
27b29 7f2 71 FF 71 00 
27b2d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
27b31 7f4 AA FF AA 00 
27b35 7f5 C6 FF C6 00 
27b39 7f6 E3 FF E3 00 
27b3d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
27b41 7f8 00 40 14 00 
27b45 7f9 00 60 1E 00 
27b49 7fa 00 80 28 00 
27b4d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
27b51 7fc 00 BF 3C 00 
27b55 7fd 00 DF 46 00 
27b59 7fe 00 FF 50 00 
27b5d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
27b61 800 39 FF 77 00 
27b65 801 55 FF 8A 00 
27b69 802 71 FF 9E 00 
27b6d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
27b71 804 AA FF C5 00 
27b75 805 C6 FF D8 00 
27b79 806 E3 FF EC 00 
27b7d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
27b81 808 00 40 28 00 
27b85 809 00 60 3C 00 
27b89 80a 00 80 50 00 
27b8d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
27b91 80c 00 BF 78 00 
27b95 80d 00 DF 8C 00 
27b99 80e 00 FF A0 00 
27b9d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
27ba1 810 39 FF B5 00 
27ba5 811 55 FF C0 00 
27ba9 812 71 FF CA 00 
27bad 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
27bb1 814 AA FF DF 00 
27bb5 815 C6 FF EA 00 
27bb9 816 E3 FF F4 00 
27bbd 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
27bc1 818 00 40 40 00 
27bc5 819 00 60 60 00 
27bc9 81a 00 80 80 00 
27bcd 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
27bd1 81c 00 BF BF 00 
27bd5 81d 00 DF DF 00 
27bd9 81e 00 FF FF 00 
27bdd 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
27be1 820 39 FF FF 00 
27be5 821 55 FF FF 00 
27be9 822 71 FF FF 00 
27bed 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
27bf1 824 AA FF FF 00 
27bf5 825 C6 FF FF 00 
27bf9 826 E3 FF FF 00 
27bfd 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
27c01 828 00 28 40 00 
27c05 829 00 3C 60 00 
27c09 82a 00 50 80 00 
27c0d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
27c11 82c 00 78 BF 00 
27c15 82d 00 8C DF 00 
27c19 82e 00 A0 FF 00 
27c1d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
27c21 830 39 B5 FF 00 
27c25 831 55 C0 FF 00 
27c29 832 71 CA FF 00 
27c2d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
27c31 834 AA DF FF 00 
27c35 835 C6 EA FF 00 
27c39 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
27c3c 837             | 
27c3c 837             | '**********************************************************************************
27c3c 837             | '
27c3c 837             | '        Timings and colors definitions
27c3c 837             | '
27c3c 837             | '**********************************************************************************
27c3c 837             | 
27c3c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
27c3c 837 10 00 00 00 
27c40 838 50 00 00 00 
27c44 839 0C 00 00 00 
27c48 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
27c4c 83b 08 00 00 00 
27c50 83c 04 00 00 00 
27c54 83d 08 00 00 00 
27c58 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
27c5c 83f 40 02 00 00 
27c60 840 6A 8C 15 14 
27c64 841 FB 06 B7 01 
27c68 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
27c6c 843 00 00 00 00 
27c70 844 C0 00 00 00 
27c74 845 00 00 00 00 
27c78 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27c7c 847 00 75 C7 97 
27c80 848 27 47 F6 0A 
27c84 849 05 79 CB 9B 
27c88 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
27c8c 84b             | 
27c8c 84b             | ''--------  Initialization  ----------------------------------------------------------------
27c8c 84b             | 
27c8c 84b 28 0C 64 FD | hdmi            setq    #6
27c90 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
27c94 84d 28 10 64 FD |                 setq    #8
27c98 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
27c9c 84f             | 
27c9c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
27ca0 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
27ca4 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
27ca8 852 D6 C6 01 F1 |                 add     t1,hbase
27cac 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
27cb0 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
27cb4 855 7B 0B 80 5F 
27cb8 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
27cbc 857 66 66 86 FF 
27cc0 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
27cc4 859             | '
27cc4 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
27cc8 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
27ccc 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
27cd0 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
27cd4 85d             | 
27cd4 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
27cd8 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
27cdc 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
27ce0 860             | 
27ce0 860             | ''--------  frame rendering main loop  ---------------------------------------------------
27ce0 860             | 
27ce0 860 28 06 64 FD | p101            setq 	#3
27ce4 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
27ce8 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
27cec 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
27cf0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
27cf4 865 00 A0 05 F6 |                 mov     dlinum, #0
27cf8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
27cfc 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
27d00 868             | 
27d00 868             | 
27d00 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
27d04 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
27d08 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
27d0c 86b             |                 
27d0c 86b             | 
27d0c 86b             | 
27d0c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
27d0c 86b             |   
27d0c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
27d10 86c 29 FE 65 3D |          if_nc  setq2   #255
27d14 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
27d18 86e             | 
27d18 86e             | '' -----   up porch (before the picture)
27d18 86e             | 
27d18 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
27d1c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
27d20 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
27d24 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
27d28 872             |  
27d28 872             |    
27d28 872             |  
27d28 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
27d2c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
27d30 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
27d34 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
27d38 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
27d3c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
27d40 878             | 
27d40 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
27d44 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
27d48 87a 48 00 B0 FD | 		call    #dli
27d4c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
27d50 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
27d54 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
27d58 87e             |                 	
27d58 87e             |                 
27d58 87e             | 
27d58 87e             |  
27d58 87e             | '' ------- the main screen drawing starts here
27d58 87e             | 
27d58 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
27d5c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
27d60 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
27d64 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
27d68 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
27d6c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
27d70 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
27d74 885             |               
27d74 885             | 
27d74 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
27d78 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
27d7c 887             | 
27d7c 887             | ' ---------------- All visible lines displayed now, start vblank  
27d7c 887             | 
27d7c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
27d80 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
27d84 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
27d88 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
27d8c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
27d90 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
27d94 88d             | 
27d94 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
27d94 88d             | 
27d94 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
27d94 88d             | 
27d94 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
27d98 88e             | 
27d98 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
27d9c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
27da0 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
27da4 891             | 
27da4 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
27da8 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
27dac 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
27db0 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
27db4 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
27db8 896             | 
27db8 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
27dbc 897 DD C6 41 F8 |                 getnib  t1,dl,#0
27dc0 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
27dc4 899 70 00 90 AD |     if_z        jmp     #preload
27dc8 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
27dcc 89b 94 00 90 AD |     if_z        jmp     #preload2
27dd0 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
27dd4 89d 0C 00 90 AD |     if_z        jmp     #p390
27dd8 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
27ddc 89f 28 00 90 AD |     if_z        jmp     #p391  
27de0 8a0             | 
27de0 8a0 2D 00 64 FD | p308            ret
27de4 8a1             |    
27de4 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
27de8 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
27dec 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
27df0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
27df4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
27df8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
27dfc 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
27e00 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
27e04 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
27e08 8aa             |  
27e08 8aa             | '' --------  Reload palette. To do 
27e08 8aa             | 
27e08 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
27e0c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
27e10 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
27e14 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
27e18 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
27e1c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
27e20 8b0 70 FF 9F FD |         	jmp     #dli                
27e24 8b1             |       
27e24 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
27e24 8b1             | 
27e24 8b1             | 
27e24 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
27e24 8b1             | 
27e24 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
27e28 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
27e2c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
27e30 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
27e34 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
27e38 8b6             |         
27e38 8b6             | '' -------------- Preload a line from PSRAM        
27e38 8b6             |         
27e38 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
27e3c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
27e40 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
27e44 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
27e48 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
27e4c 8bb             | 
27e4c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
27e50 8bc 32 B7 01 F6 |                 mov     buf2,a1024
27e54 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
27e58 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
27e5c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
27e60 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
27e64 8c1             |  
27e64 8c1             |  
27e64 8c1             | preload2      '  incmod  dlinum,#3
27e64 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
27e68 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
27e6c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
27e70 8c4 28 02 64 FD |                 setq	#1
27e74 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
27e78 8c6             |                 
27e78 8c6             | 
27e78 8c6             | '' -------------- Draw sprites
27e78 8c6             | 
27e78 8c6 CF 5C 02 F6 | sprite          mov t8,frames
27e7c 8c7 10 5C 0E F5 | 		and t8,#16 wz
27e80 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
27e84 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
27e88 8ca             | 		
27e88 8ca             | 
27e88 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
27e8c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
27e90 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
27e94 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
27e98 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
27e9c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
27ea0 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
27ea4 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
27ea8 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
27eac 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
27eb0 8d4 01 52 86 F1 |                 sub     sprite_h,#1
27eb4 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
27eb8 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
27ebc 8d7             | 
27ebc 8d7             | 
27ebc 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
27ec0 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
27ec4 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
27ec8 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
27ecc 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
27ed0 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
27ed4 8dd 00 5E 06 F6 |                 mov 	t9,#0
27ed8 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
27edc 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
27ee0 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
27ee4 8e1             |      
27ee4 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
27ee8 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
27eec 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
27ef0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
27ef4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
27ef8 8e6             |                 
27ef8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
27efc 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
27f00 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
27f04 8e9             |   		
27f04 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
27f08 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
27f0c 8eb             | 
27f0c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
27f10 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
27f14 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
27f18 8ee             |  
27f18 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
27f1c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
27f20 8f0 10 00 90 CD |      if_c 	jmp     #p899		
27f24 8f1             | 	
27f24 8f1             | 	
27f24 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
27f28 8f2 28 CD 01 F1 | 		add	t4,sprite_w
27f2c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
27f30 8f4             | 
27f30 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
27f34 8f5             | 
27f34 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
27f38 8f6 01 58 86 F1 | 	 	sub     t6,#1
27f3c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
27f40 8f8             | 
27f40 8f8 28 58 62 FD |                 setq   	t6
27f44 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
27f48 8fa 28 5D 02 F6 |                 mov t8,sprite_w
27f4c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
27f50 8fc 24 00 90 AD |         if_z    jmp #p898
27f54 8fd             |          
27f54 8fd             |         
27f54 8fd 70 5F 06 F6 |                 mov  t9,#368
27f58 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
27f5c 8ff             | 
27f5c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
27f60 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
27f64 901 FF FF 7F FF 
27f68 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
27f6c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
27f70 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
27f74 905 2D 01 00 F5 |                 and 0-0, t7
27f78 906             |                
27f78 906             | 
27f78 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
27f7c 907 E5 E0 7A FA |                 wmlong 368,t3				
27f80 908             |                 
27f80 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
27f84 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
27f88 90a 2D 00 64 FD |                 ret
27f8c 90b             | 	
27f8c 90b             | 	
27f8c 90b             |                
27f8c 90b             |  
27f8c 90b             | '' -------------- Graphics line ------------------------------------------------------------
27f8c 90b             |  
27f8c 90b             | 
27f8c 90b             | '' consts and vars
27f8c 90b             | 
27f8c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
27f90 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
27f94 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
27f98 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
27f9c 90f             | 
27f9c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
27fa0 910             | 
27fa0 910             | '------ these longs will be set by setmode function
27fa0 910             | 
27fa0 910 00 00 00 00 | m_bs            long    0        'blanks before sync
27fa4 911 00 00 00 00 | m_sn            long    0        'sync
27fa8 912 00 00 00 00 | m_bv            long    0        'blanks before visible
27fac 913 00 00 00 00 | m_vi            long    0        'visible pixels #
27fb0 914             | 'm_border        long    0        'left/right borders
27fb0 914 00 00 00 00 | i_upporch       long    0        'up porch lines
27fb4 915 00 00 00 00 | i_vsync         long    0        'vsync lines
27fb8 916 00 00 00 00 | i_downporch     long    0        'down porch lines
27fbc 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
27fc0 918 00 00 00 00 | i_totalvis      long    0
27fc4 919             | 
27fc4 919             | '-------------------------------------
27fc4 919             |  
27fc4 919 00 00 00 00 | linenum         long    0
27fc8 91a 00 00 00 00 | frames          long    0
27fcc 91b 00 00 00 00 | dlinum long 0
27fd0 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
27fd4 91d             | 
27fd4 91d 00 00 00 00 | vblankptr       long    0
27fd8 91e 00 00 00 00 | modeptr         long    0
27fdc 91f 00 00 00 00 | paletteptr      long    0
27fe0 920 00 00 00 00 | dlptr           long    0
27fe4 921 01 00 00 00 | hbase           long    1
27fe8 922 00 00 00 00 | mailbox         long    0
27fec 923 00 00 00 00 | spriteptr          long 0
27ff0 924             | 
27ff0 924 00 00 00 00 | cmd             long    0
27ff4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
27ff8 926 00 04 00 00 | buf2            long    1024
27ffc 927 01 00 00 00 | dlptr2          long    1
28000 928 01 00 00 00 | dl              long    1
28004 929             | 
28004 929 00 00 00 00 | buf1c long 0
28008 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2800c 92b 01 00 00 00 | framebuf2       long    1
28010 92c 01 00 00 00 | hsync0          long    1
28014 92d 01 00 00 00 | hsync1          long    1
28018 92e             | 
28018 92e 01 00 00 00 | t1              long    1
2801c 92f 00 00 00 00 | t2 long 0
28020 930 00 00 00 00 | t3 long 0
28024 931 00 00 00 00 | t4 long 0
28028 932             | 
28028 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2802c 933 00 00 00 00 | rcnt2           long    0
28030 934 00 00 00 00 | rcnt2a          long    0
28034 935 00 00 00 00 | roffset         long    0
28038 936 00 00 00 00 | rdl             long    0  'dl repeat line
2803c 937 00 00 00 00 | dlc             long    0  'dl command
28040 938             | 
28040 938 FF FF FF FF | affffffff       long    $ffffffff
28044 939 00 00 00 00 | sprite1pointer long 0
28048 93a 00 00 00 00 | sprite1xy      long 0
2804c 93b 00 00 00 00 | sprite1wh      long 0
28050 93c 00 00 00 00 | sprite2pointer long 0
28054 93d 00 00 00 00 | sprite2xy      long 0
28058 93e 00 00 00 00 | sprite2wh      long 0
2805c 93f 00 00 00 00 | sprite3pointer long 0
28060 940 00 00 00 00 | sprite3xy      long 0
28064 941 00 00 00 00 | sprite3wh      long 0
28068 942 00 00 00 00 | sprite4pointer long 0
2806c 943 00 00 00 00 | sprite4xy      long 0
28070 944 00 00 00 00 | sprite4wh      long 0
28074 945 00 00 00 00 | sprite5pointer long 0
28078 946 00 00 00 00 | sprite5xy      long 0
2807c 947 00 00 00 00 | sprite5wh      long 0
28080 948 00 00 00 00 | sprite6pointer long 0
28084 949 00 00 00 00 | sprite6xy      long 0
28088 94a 00 00 00 00 | sprite6wh      long 0
2808c 94b 00 00 00 00 | sprite7pointer long 0
28090 94c 00 00 00 00 | sprite7xy      long 0
28094 94d 00 00 00 00 | sprite7wh      long 0
28098 94e 00 00 00 00 | sprite8pointer long 0
2809c 94f 00 00 00 00 | sprite8xy      long 0
280a0 950 00 00 00 00 | sprite8wh      long 0
280a4 951 00 00 00 00 | sprite9pointer long 0
280a8 952 00 00 00 00 | sprite9xy      long 0
280ac 953 00 00 00 00 | sprite9wh      long 0
280b0 954 00 00 00 00 | sprite10pointer long 0
280b4 955 00 00 00 00 | sprite10xy      long 0
280b8 956 00 00 00 00 | sprite10wh      long 0
280bc 957 00 00 00 00 | sprite11pointer long 0
280c0 958 00 00 00 00 | sprite11xy      long 0
280c4 959 00 00 00 00 | sprite11wh      long 0
280c8 95a 00 00 00 00 | sprite12pointer long 0
280cc 95b 00 00 00 00 | sprite12xy      long 0
280d0 95c 00 00 00 00 | sprite12wh      long 0
280d4 95d 00 00 00 00 | sprite13pointer long 0
280d8 95e 00 00 00 00 | sprite13xy      long 0
280dc 95f 00 00 00 00 | sprite13wh      long 0
280e0 960 00 00 00 00 | sprite14pointer long 0
280e4 961 00 00 00 00 | sprite14xy      long 0
280e8 962 00 00 00 00 | sprite14wh      long 0
280ec 963 00 00 00 00 | sprite15pointer long 0
280f0 964 00 00 00 00 | sprite15xy      long 0
280f4 965 00 00 00 00 | sprite15wh      long 0
280f8 966 00 00 00 00 | sprite16pointer long 0
280fc 967 00 00 00 00 | sprite16xy      long 0
28100 968 00 00 00 00 | sprite16wh      long 0
28104 969 00 00 00 00 | sprite17pointer long 0
28108 96a 00 00 00 00 | sprite17xy      long 0
2810c 96b 00 00 00 00 | sprite17wh      long 0
28110 96c 00 00 00 00 | sprite18pointer long 0
28114 96d 00 00 00 00 | sprite18xy      long 0
28118 96e 00 00 00 00 | sprite18wh      long 0
2811c 96f 00 00 00 00 | spritenum long 0
28120 970             | 
28120 970 00 00 00 00 | spriteline long 0
28124 971 84 03 00 00 | sprite_x long 900
28128 972 00 00 00 00 | sprite_y long 0
2812c 973 10 00 00 00 | sprite_w long 16
28130 974 40 00 00 00 | sprite_h long 64
28134 975 00 00 00 00 | l2 long 0
28138 976 00 00 00 00 | t5 long 0
2813c 977 00 00 00 00 | t6 long 0
28140 978 00 00 00 00 | t7 long 0
28144 979 00 00 00 00 | t8 long 0
28148 97a 00 00 00 00 | t9 long 0
2814c 97b 00 00 00 00 | preloadaddr long 0
28150 97c 00 00 00 00 | preloadlineaddr long 0
28154 97d 00 04 00 00 | a1024 long 1024
28158 97e             | 
28158 97e E0 03 00 00 | aa long 992
2815c 97f FF 03 00 00 | a1023 long 1023
28160 980 00 10 00 00 | a4096 long 4096
28164 981             |  fit 368
28164 981             | _psram_spin2_dat_
28164 981 00 00 00 00 
      ...             
2825c 9bf 00 00 00 00 
28260 9c0 00 00 00 00 |     listdata long 0[8*8]
28264 9c1             |             orgh
28264                 | 
28264                 | ' driver state
28264     FF FF FF FF | drivercog   long    -1  ' COG id of driver
28268     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2826c                 | 
2826c                 | ' delay profile
2826c     07 00 00 00 
28270     00 CF 7B 05 
28274     80 D1 F0 08 
28278     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2827c     80 C4 60 0F 
28280     80 39 7A 12 
28284     40 2D D9 13 
28288     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2828c                 | 
2828c                 | ' data to be passed to driver when starting it
2828c                 | startupData
2828c     00 00 00 00 |     long    0           ' current frequency
28290     00 00 00 00 |     long    FLAGS       ' optional flags for driver
28294     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
28298     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2829c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
282a0     AC 82 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
282a4     2C 83 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
282a8     4C 83 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
282ac                 | 
282ac                 | ' data for memory
282ac                 | deviceData
282ac                 |     ' 16 bank parameters follow (16MB per bank)
282ac     00 00 00 00 
      ...             
282e4     00 00 00 00 
282e8     00 00 00 00 |     long    0[16]                               ' banks 0-15
282ec                 |     ' 16 banks of pin parameters follow
282ec     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
282f0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
282f4     FF FF FF FF 
      ...             
28324     FF FF FF FF 
28328     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2832c                 | 
2832c                 | ' data for COG polling
2832c                 | qosData 
2832c     00 00 FF FF 
28330     00 00 FF FF 
28334     00 00 FF FF 
28338     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2833c     00 00 FF FF 
28340     00 00 FF FF 
28344     00 00 FF FF 
28348     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2834c                 |     
2834c                 | ' mailbox storage
2834c                 | 
2834c                 | mailboxes
2834c     00 00 00 00 
      ...             
283a4     00 00 00 00 
283a8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
283ac                 | 	alignl
283ac                 | _psram16drv_spin2_dat_
283ac                 |                             orgh
283ac     00 00 00 00 
      ...             
283c4     00 00 00 00 
283c8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
283cc                 | 
283cc                 | driver_start
283cc                 |                             org
283cc 000             | '..................................................................................................
283cc 000             | ' Memory layout for COG RAM once operational:
283cc 000             | '
283cc 000             | '  COG RAM address      Usage
283cc 000             | '  ---------------      ----
283cc 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
283cc 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
283cc 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
283cc 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
283cc 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
283cc 000             | '  ~$198-$1F3           State and register variables
283cc 000             | '
283cc 000             | ' Also during driver COG startup:
283cc 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
283cc 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
283cc 000             | '..................................................................................................
283cc 000             |                             
283cc 000             | ' Mailbox storage after vector initialization
283cc 000             | 
283cc 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
283d0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
283d4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
283d8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
283dc 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
283e0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
283e4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
283e8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
283ec 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
283f0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
283f4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
283f8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
283fc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
28400 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
28404 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
28408 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2840c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
28410 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
28414 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
28418 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2841c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
28420 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
28424 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
28428 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2842c 018             | 
2842c 018             | ' Mailbox parameter addresses per COG once patched
2842c 018             |                             
2842c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
28430 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
28434 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
28438 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2843c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
28440 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
28444 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
28448 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2844c 020             | 
2844c 020             | '..................................................................................................
2844c 020             | ' Per COG request and state setup and service branching
2844c 020             |         
2844c 020             | cog0                 
2844c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
28450 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
28454 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
28458 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2845c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28460 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28464 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
28468 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2846c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
28470 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28474 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28478 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2847c 02c             | cog1                        
2847c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
28480 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
28484 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
28488 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2848c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28490 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28494 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
28498 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2849c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
284a0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
284a4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
284a8 037 33 CA 63 FD |                             execf   request-0               'jump to service
284ac 038             | cog2                         
284ac 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
284b0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
284b4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
284b8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
284bc 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
284c0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
284c4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
284c8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
284cc 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
284d0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
284d4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
284d8 043 33 CA 63 FD |                             execf   request-0               'jump to service
284dc 044             | cog3                        
284dc 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
284e0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
284e4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
284e8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
284ec 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
284f0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
284f4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
284f8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
284fc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
28500 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28504 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28508 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2850c 050             | cog4                        
2850c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
28510 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
28514 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
28518 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2851c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28520 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28524 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
28528 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2852c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
28530 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28534 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28538 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2853c 05c             | cog5                        
2853c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
28540 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
28544 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
28548 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2854c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28550 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28554 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
28558 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2855c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
28560 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28564 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28568 067 33 CA 63 FD |                             execf   request-0               'jump to service
2856c 068             | cog6                        
2856c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
28570 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
28574 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
28578 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2857c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28580 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28584 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
28588 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2858c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
28590 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28594 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
28598 073 33 CA 63 FD |                             execf   request-0               'jump to service
2859c 074             | cog7                        
2859c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
285a0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
285a4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
285a8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
285ac 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
285b0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
285b4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
285b8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
285bc 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
285c0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
285c4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
285c8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
285cc 080             |                             fit     128
285cc 080             | 
285cc 080             |                             fit     128
285cc 080             | pad                         long    0[128-$]                'align init code to $80
285cc 080             | 
285cc 080             | '..................................................................................................
285cc 080             | 
285cc 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
285cc 080             | 
285cc 080             | init                        
285cc 080             |                             ' get driver scratch long address in hub
285cc 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
285d0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
285d4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
285d8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
285dc 084             |                     
285dc 084             |                             ' read in the additional LUT RAM code
285dc 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
285e0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
285e4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
285e8 087             | 
285e8 087             |                             ' read the startup parameters
285e8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
285ec 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
285f0 089             | 
285f0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
285f0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
285f4 08a             | 
285f4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
285f8 08b 01 00 00 5F 
285fc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
28600 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
28604 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
28608 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2860c 090             | 
2860c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2860c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
28610 091 01 00 00 FF 
28614 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
28618 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2861c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
28620 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
28624 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
28628 097 08 DE 47 F5 |                             or      a, #8
2862c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
28630 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
28634 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
28638 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2863c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
28640 09d 01 DE 07 F1 |                             add     a, #1
28644 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
28648 09f             |  
28648 09f             |                             ' setup device control pin states
28648 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2864c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
28650 0a1 01 00 00 FF 
28654 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
28658 0a3             | 
28658 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2865c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
28660 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
28664 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
28668 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2866c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
28670 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
28674 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
28678 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2867c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
28680 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
28684 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
28688 0af             | pinloop
28688 0af             |                             ' generate minimum CE high time before access
28688 0af A1 07 00 FF 
2868c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
28690 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
28694 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
28698 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2869c 0b4 1F DE 63 FD |                             waitx   a                       'delay
286a0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
286a4 0b6             | 
286a4 0b6             |                             ' setup the COG mailboxes and addresses 
286a4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
286a8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
286ac 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
286b0 0b9             | 
286b0 0b9 28 2E 64 FD |                             setq    #24-1
286b4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
286b8 0bb             | 
286b8 0bb             |                             ' setup the polling loop for active COGs 
286b8 0bb 01 C2 63 FD |                             cogid   id
286bc 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
286c0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
286c4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
286c8 0bf 0A F0 07 F6 |                             mov     ptra, #10
286cc 0c0 E1 F1 03 FA |                             mul     ptra, id
286d0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
286d4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
286d8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
286dc 0c4 03 C2 07 FA |                             mul     id, #3
286e0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
286e4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
286e8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
286ec 0c8 D8 01 B0 FD |                             call    #reloadcogs
286f0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
286f4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
286f8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
286f8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
286fc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
28700 0cd 08 04 DC FC |                             rep     #2, #8
28704 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
28708 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2870c 0d0             | 
2870c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2870c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2870c 0d0 01 C2 63 FD |                             cogid   id
28710 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
28714 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
28718 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2871c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
28720 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
28724 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
28728 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2872c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
28730 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
28734 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
28738 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2873c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
28740 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
28744 0de A5 E5 03 F1 |                             add     d, const512
28748 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2874c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
28750 0e1 00 00 00 F6 |                             mov     0-0, 0-0
28754 0e2             |                             
28754 0e2             |                             ' setup register values for control vector loop setup after we return
28754 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
28758 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2875c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
28760 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
28764 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
28768 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2876c 0e8 D0 C3 8F F9 |                             altd    id, #id0
28770 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
28774 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
28778 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2877c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
28780 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
28784 0ee             |  
28784 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
28788 0ef 07 CA 07 F5 |                             and     request, #7
2878c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
28790 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
28794 0f2             |                             fit     $100                    'ensure all init code fits this space
28794 0f2             | 
28794 0f2             |                             fit     $100                    'ensure all init code fits this space
28794 0f2             | 
28794 0f2 00 00 00 00 
      ...             
287c4 0fe 00 00 00 00 
287c8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
287cc 100             | 
287cc 100             | '..................................................................................................
287cc 100             | ' Error result handling and COG notification of request completion
287cc 100             | 
287cc 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
287d0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
287d4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
287d8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
287dc 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
287e0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
287e4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
287e8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
287ec 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
287f0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
287f4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
287f8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
287fc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
28800 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
28804 10e             | ' Poller re-starts here after a COG is serviced
28804 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
28808 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2880c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
28810 111             | ' Main dynamic polling loop repeats until a request arrives
28810 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
28814 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
28818 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2881c 114             | 
2881c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
28820 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
28824 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
28828 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2882c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
28830 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
28834 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
28838 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2883c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
28840 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
28844 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
28848 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2884c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
28850 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
28854 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
28858 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2885c 124             | 
2885c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
28860 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
28864 126             |  
28864 126             | '..................................................................................................
28864 126             | ' List handler                               
28864 126             | 
28864 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
28868 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2886c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
28870 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
28874 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
28878 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2887c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
28880 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
28884 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
28888 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2888c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
28890 131 33 00 60 FD |                             execf   0-0                     'process the request 
28894 132             | 
28894 132             | '..................................................................................................
28894 132             | ' Restoring per COG state and resuming where we left off
28894 132             | 
28894 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
28898 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2889c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
288a0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
288a4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
288a8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
288ac 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
288b0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
288b4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
288b8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
288bc 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
288c0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
288c4 13e             |                    
288c4 13e             | '..................................................................................................
288c4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
288c4 13e             | 
288c4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
288c8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
288cc 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
288d0 141 D0 DF B7 F9 |                             setd    a, #id0
288d4 142 D8 DF BF F9 |                             sets    a, #addr1
288d8 143 FE FF FF FF 
288dc 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
288e0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
288e4 146 3F DE A7 F9 |                             alti    a, #%111_111 
288e8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
288ec 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
288f0 149 01 E2 63 FD |                             cogid   c
288f4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
288f8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
288fc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
28900 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
28904 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
28908 14f 00 E0 03 F6 |                             mov     b, 0-0
2890c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
28910 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
28914 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
28918 153 0C 00 90 AD |             if_z            jmp     #excluded               
2891c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
28920 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
28924 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
28928 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2892c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
28930 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
28934 15a             | 
28934 15a             | 'determine priority cogs and build instructions for the polling sequence
28934 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
28938 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2893c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
28940 15d             | 
28940 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
28944 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
28948 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2894c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
28950 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
28954 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
28958 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2895c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
28960 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
28964 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
28968 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2896c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
28970 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
28974 16a             | endprioloop
28974 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
28978 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2897c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
28980 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
28984 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
28988 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2898c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
28990 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
28994 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
28998 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2899c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
289a0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
289a4 176             | 
289a4 176             | ' populate the round robin COG polling instructions
289a4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
289a8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
289ac 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
289b0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
289b4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
289b8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
289bc 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
289c0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
289c4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
289c8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
289cc 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
289d0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
289d4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
289d8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
289dc 184             | '..................................................................................................
289dc 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
289dc 184             | 
289dc 184             | set_latency                                                 '            (a) set latency
289dc 184             | get_latency                                                 '            (b) get latency
289dc 184             | set_burst                                                   '            (c) set burst size of bank
289dc 184             | get_burst                                                   '            (d) get burst size of bank
289dc 184             |                                                             '            (e) dump state
289dc 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
289e0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
289e4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
289e8 187             |                                                             ' | | | | e  account for following AUGS
289e8 187 04 00 00 FF 
289ec 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
289f0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
289f4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
289f8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
289fc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
28a00 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
28a04 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
28a08 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
28a0c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
28a10 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
28a14 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
28a18 193             | 
28a18 193             | '..................................................................................................
28a18 193             | ' Misc EXECF code
28a18 193             | 
28a18 193 33 72 63 FD | start_read_exec             execf   newburstr
28a1c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
28a20 195 33 78 63 FD | continue_read_exec          execf   lockedreads
28a24 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
28a28 197             | 
28a28 197             | '..................................................................................................
28a28 197             | ' Variables
28a28 197             | 
28a28 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
28a2c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
28a30 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
28a34 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
28a38 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
28a3c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
28a40 19d             | 
28a40 19d 00 00 00 80 | xfreq1          long    $80000000
28a44 19e 00 00 00 40 | xfreq2          long    $40000000
28a48 19f 03 00 00 00 | delay           long    3
28a4c 1a0             | 
28a4c 1a0             | lutcodeaddr                 
28a4c 1a0             | startupparams
28a4c 1a0             | excludedcogs                                    'careful: shared register use!
28a4c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
28a50 1a1 00 00 00 00 | flags           long    0
28a54 1a2             | mask                                            'careful: shared register use!
28a54 1a2 00 00 00 00 | resetmaskA      long    0
28a58 1a3             | limit                                           'careful: shared register use!
28a58 1a3 00 00 00 00 | resetmaskB      long    0
28a5c 1a4 00 00 00 00 | datapins        long    0
28a60 1a5             | const512                                        'careful: shared register use!
28a60 1a5 00 00 00 00 | devicelist      long    0
28a64 1a6 00 00 00 00 | coglist         long    0
28a68 1a7 00 00 00 00 | mbox            long    0 
28a6c 1a8             | 
28a6c 1a8             | clkpin                                          'shared with code patched during init
28a6c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
28a70 1a9             | cspin                                           'shared with code patched during init
28a70 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
28a74 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
28a78 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
28a7c 1ac 01 00 00 00 | clkdelay        long    1
28a80 1ad 00 00 00 00 | regdatabus      long    0
28a84 1ae             | 
28a84 1ae 10 00 00 00 | deviceaddr      long    $10
28a88 1af             | rrcounter
28a88 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
28a8c 1b0             | 
28a8c 1b0             | ' jump addresses for the per COG handlers
28a8c 1b0 20 00 00 00 | cog0_handler    long    cog0
28a90 1b1 2C 00 00 00 | cog1_handler    long    cog1
28a94 1b2 38 00 00 00 | cog2_handler    long    cog2
28a98 1b3 44 00 00 00 | cog3_handler    long    cog3
28a9c 1b4 50 00 00 00 | cog4_handler    long    cog4
28aa0 1b5 5C 00 00 00 | cog5_handler    long    cog5
28aa4 1b6 68 00 00 00 | cog6_handler    long    cog6
28aa8 1b7 74 00 00 00 | cog7_handler    long    cog7
28aac 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
28ab0 1b9             | 
28ab0 1b9             | ' EXECF sequences
28ab0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
28ab4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
28ab8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
28abc 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
28ac0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
28ac4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
28ac8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
28acc 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
28acc 1c0             | 
28acc 1c0             | 
28acc 1c0             | ' SKIPF sequences
28acc 1c0             | skiptable
28acc 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
28ad0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
28ad4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
28ad8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
28adc 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
28ae0 1c5 00 00 00 00 | pattern2        long    0
28ae4 1c6 00 00 00 00 | pattern3        long    0
28ae8 1c7 77 02 00 00 | singlelong      long    %1001110111  
28aec 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
28af0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
28af4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
28af8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
28afc 1cc             | 
28afc 1cc             | ' LUT RAM address values
28afc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
28b00 1cd DD 02 00 00 | continue_read   long    continue_read_lut
28b04 1ce DB 02 00 00 | continue_write  long    continue_write_lut
28b08 1cf F6 02 00 00 | noread          long    noread_lut
28b0c 1d0             | 
28b0c 1d0 00 00 00 00 | id0             long    0
28b10 1d1 01 00 00 00 | id1             long    1
28b14 1d2 02 00 00 00 | id2             long    2
28b18 1d3 03 00 00 00 | id3             long    3
28b1c 1d4 04 00 00 00 | id4             long    4
28b20 1d5 05 00 00 00 | id5             long    5
28b24 1d6 06 00 00 00 | id6             long    6
28b28 1d7 07 00 00 00 | id7             long    7
28b2c 1d8             | 
28b2c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
28b2c 1d8             | 'and COG updates and need to follow immediately after id0-id7
28b2c 1d8 00 00 00 00 | addr1           long    0
28b30 1d9 00 00 00 00 | hubdata         long    0
28b34 1da 00 00 00 00 | count           long    0
28b38 1db 00 00 00 00 | addr2           long    0
28b3c 1dc 00 00 00 00 | total           long    0
28b40 1dd 00 00 00 00 | offset1         long    0
28b44 1de 00 00 00 00 | offset2         long    0
28b48 1df 00 00 00 00 | link            long    0
28b4c 1e0             | 
28b4c 1e0             | burstwrite                                      'note shared register use during init
28b4c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
28b50 1e1 00 00 00 00 | id              long    0
28b54 1e2             | 
28b54 1e2 00 00 00 00 | header          long    0
28b58 1e3 00 00 00 00 | trailer         long    0
28b5c 1e4 00 00 00 00 | cmdaddr         long    0
28b60 1e5 00 00 00 00 | request         long    0
28b64 1e6 00 00 00 00 | rrlimit         long    0
28b68 1e7 00 00 00 00 | pinconfig       long    0
28b6c 1e8 00 00 00 00 | clks            long    0
28b70 1e9 00 00 00 00 | resume          long    0
28b74 1ea 00 00 00 00 | orighubsize     long    0
28b78 1eb 00 00 00 00 | wrclks          long    0
28b7c 1ec             | 
28b7c 1ec 00 00 00 00 | pattern         long    0
28b80 1ed 00 00 00 00 | hubscratch      long    0
28b84 1ee 00 10 00 00 | val4k           long    4096
28b88 1ef             | 
28b88 1ef             | ' temporary general purpose regs
28b88 1ef 00 00 00 00 | a               long    0
28b8c 1f0 00 00 00 00 | b               long    0
28b90 1f1 00 00 00 00 | c               long    0
28b94 1f2 00 00 00 00 | d               long    0
28b98 1f3             |                 fit     502
28b98 1f3             | 
28b98 1f3             |                 fit     502
28b98 1f3             | 
28b98 1f3             | '..................................................................................................
28b98 1f3             | 
28b98 1f3             |             orgh
28b98                 | 
28b98                 | lut_code
28b98                 | 'HW init code up to 80 longs
28b98                 | 
28b98                 | '..................................................................................................
28b98                 | ' Memory layout for LUT RAM once operational:
28b98                 | '
28b98                 | '  LUT RAM address      Usage
28b98                 | '  ---------------      ----
28b98                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
28b98                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
28b98                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
28b98                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
28b98                 | '
28b98                 | ' Also during driver COG startup:
28b98                 | ' $230-$24F is used for HW init setup
28b98                 | ' $250-$26F is used as temporary vector storage 
28b98                 | '..................................................................................................
28b98                 | 
28b98                 |                 org $230    
28b98 230             | 
28b98 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
28b98 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
28b9c 231 24 16 60 FD |                             pollxfi
28ba0 232 FF AA 2A FF 
28ba4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
28ba8 234 28 00 B0 FD |                             call    #sendqspi
28bac 235 07 F8 07 FF 
28bb0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
28bb4 237 28 00 B0 FD |                             call    #sendspi
28bb8 238 F8 07 78 FF 
28bbc 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
28bc0 23a 1C 00 B0 FD |                             call    #sendspi
28bc4 23b 7F 78 78 FF 
28bc8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
28bcc 23d 10 00 B0 FD |                             call    #sendspi 
28bd0 23e 2D 00 64 FD |                             ret
28bd4 23f             | 
28bd4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
28bd8 240 32 0C 64 FD |                             skipf   #%110
28bdc 241 9C EF 03 F6 |                             mov     pb, xsendimm
28be0 242             | 
28be0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
28be4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
28be8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
28bec 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
28bf0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
28bf4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
28bf8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
28bfc 249 50 48 63 FD |                             fltl    datapins                'float data bus
28c00 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
28c04 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
28c08 24c             | 
28c08 24c 00 00 00 00 
28c0c 24d 00 00 00 00 
28c10 24e 00 00 00 00 
28c14 24f 00 00 00 00 |                 long    0[$270-32-$]
28c18 250             |                 fit     $270-32  ' keep room for 32 vector longs
28c18 250             |     
28c18 250             |                 fit     $270-32  ' keep room for 32 vector longs
28c18 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
28c18 250             | rw_vect ' PSRAM jump vectors
28c18 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28c1c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28c20 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
28c24 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
28c28 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
28c2c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
28c30 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
28c34 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
28c38 258             | ro_vect ' R/O PSRAM jump vectors
28c38 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28c3c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28c40 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
28c44 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
28c48 25c 00 01 00 00 |                 long    unsupported
28c4c 25d 00 01 00 00 |                 long    unsupported
28c50 25e 00 01 00 00 |                 long    unsupported
28c54 25f 00 01 00 00 |                 long    unsupported
28c58 260             | ctrl_vect ' Control jump vectors
28c58 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
28c5c 261 00 01 00 00 |                 long    unsupported
28c60 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
28c64 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
28c68 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
28c6c 265 00 01 00 00 |                 long    unsupported
28c70 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
28c74 267 3E 01 00 00 |                 long    reconfig 
28c78 268             | no_vect ' Invalid bank jump vectors
28c78 268 01 01 00 00 |                 long    invalidbank
28c7c 269 01 01 00 00 |                 long    invalidbank
28c80 26a 01 01 00 00 |                 long    invalidbank
28c84 26b 01 01 00 00 |                 long    invalidbank
28c88 26c 01 01 00 00 |                 long    invalidbank
28c8c 26d 01 01 00 00 |                 long    invalidbank
28c90 26e 01 01 00 00 |                 long    invalidbank
28c94 26f 01 01 00 00 |                 long    invalidbank
28c98 270             |                 fit     $270
28c98 270             | 
28c98 270             |                 fit     $270
28c98 270             | '..................................................................................................
28c98 270             | ' PSRAM READS
28c98 270             |                                                             ' a b c d e f
28c98 270             |                                                             ' B W L B R L  (a) byte read
28c98 270             |                                                             ' Y O O U E O  (b) word read
28c98 270             |                                                             ' T R N R S C  (c) long read
28c98 270             |                                                             ' E D G S U K  (d) new burst read
28c98 270             |                                                             '       T M E  (e) resumed sub-burst
28c98 270             |                                                             '         E D  (f) locked sub-burst
28c98 270             | 
28c98 270             | 
28c98 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
28c9c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
28ca0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
28ca4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
28ca8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
28cac 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
28cb0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
28cb4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
28cb8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
28cbc 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
28cc0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
28cc4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
28cc8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
28ccc 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
28cd0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
28cd4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
28cd8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
28cdc 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
28ce0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
28ce4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
28ce8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
28cec 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
28cf0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
28cf4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
28cf8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
28cfc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
28d00 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
28d04 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
28d08 28c             | 
28d08 28c             |                             ' fall through to read bursts
28d08 28c             |                         
28d08 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
28d08 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
28d0c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
28d10 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
28d14 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
28d18 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
28d1c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
28d20 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
28d24 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
28d28 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
28d2c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
28d30 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
28d34 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
28d38 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
28d3c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
28d40 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
28d44 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
28d48 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
28d4c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
28d50 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
28d54 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
28d58 2a0 E8 D1 03 F1 |                             add     clks, clks
28d5c 2a1             | readcommon
28d5c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
28d60 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
28d64 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
28d68 2a4             | 
28d68 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
28d6c 2a5 69 C8 63 FD |                             rev     cmdaddr
28d70 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
28d74 2a7 61 C8 63 FD |                             mergeb  cmdaddr
28d78 2a8             | 
28d78 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
28d7c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
28d80 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
28d80 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
28d84 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
28d88 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
28d8c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
28d90 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
28d90 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
28d94 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
28d98 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
28d9c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
28da0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
28da4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
28da8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
28da8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
28dac 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
28db0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
28db4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
28db8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
28dbc 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
28dc0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
28dc4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
28dc8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
28dcc 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
28dd0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
28dd4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
28dd8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
28ddc 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
28de0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
28de0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
28de4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
28de8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
28dec 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
28df0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
28df4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
28df8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
28dfc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
28e00 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
28e04 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
28e08 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
28e0c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
28e10 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
28e14 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
28e18 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
28e1c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
28e20 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
28e24 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
28e28 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
28e2c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
28e30 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
28e34 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
28e38 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
28e3c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
28e40 2da 10 03 90 FD |                             jmp     #writecommon
28e44 2db             | 
28e44 2db             | '..................................................................................................
28e44 2db             | ' Burst continuation testing
28e44 2db             | 
28e44 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
28e48 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
28e4c 2dd             | continue_read_lut          
28e4c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
28e50 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
28e54 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
28e58 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
28e5c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
28e60 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
28e64 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
28e68 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
28e6c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
28e70 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
28e74 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
28e78 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
28e7c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
28e80 2ea             | 
28e80 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
28e84 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
28e88 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
28e8c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
28e90 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
28e94 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
28e98 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
28e9c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
28ea0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
28ea4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
28ea8 2f4 2A 1C 66 0D |             _ret_           push    #poller
28eac 2f5             | 
28eac 2f5             | 
28eac 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
28eb0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
28eb0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
28eb4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
28eb8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
28ebc 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
28ec0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
28ec4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
28ec8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
28ecc 2fd 2D 00 64 FD |                             ret                             ' | continue processing
28ed0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
28ed4 2ff             | '..................................................................................................
28ed4 2ff             | ' Completion of requests
28ed4 2ff             | 
28ed4 2ff             | complete_rw_lut             
28ed4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
28ed8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
28edc 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
28ee0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
28ee4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
28ee8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
28eec 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
28ef0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
28ef4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
28ef8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
28efc 309 32 62 64 AD |             if_z            skipf   #%110001
28f00 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
28f04 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
28f08 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
28f0c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
28f10 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
28f14 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
28f18 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
28f1c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
28f20 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
28f24 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
28f28 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
28f2c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
28f30 316             |                                                             ' skipcase (a) gfx copy to/from hub
28f30 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
28f30 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
28f30 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
28f34 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
28f38 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
28f3c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
28f40 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
28f44 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
28f48 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
28f4c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
28f50 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
28f54 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
28f58 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
28f5c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
28f60 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
28f64 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
28f68 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
28f6c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
28f70 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
28f74 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
28f78 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
28f7c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
28f80 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
28f84 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
28f88 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
28f8c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
28f90 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
28f94 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
28f98 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
28f9c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
28fa0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
28fa4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
28fa8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
28fac 335 DF B7 03 A6 |             if_z            mov     addr2, link
28fb0 336 34 FF 9F AD |             if_z            jmp     #checknext
28fb4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
28fb8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
28fbc 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
28fc0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
28fc4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
28fc8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
28fcc 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
28fd0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
28fd4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
28fd8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
28fdc 341             | 
28fdc 341             | '..................................................................................................
28fdc 341             | ' PSRAM WRITES
28fdc 341             |                                                             '  a b c d e f g h
28fdc 341             | 
28fdc 341             |                                                             '  B W L F B R L L (a) byte write(s)
28fdc 341             |                                                             '  Y O O I U E O O (b) word write(s)
28fdc 341             |                                                             '  T R N L R S C C (c) long write(s)
28fdc 341             |                                                             '  E D G L S U K K (d) resumed fill
28fdc 341             |                                                             '          T M E E (e) new burst write
28fdc 341             |                                                             '            E D D (f) resumed burst
28fdc 341             |                                                             '              F B (g) locked fill
28fdc 341             |                                                             '              I U (h) locked burst write
28fdc 341             |                                                             '              L R 
28fdc 341             |                                                             '              L S 
28fdc 341             |                                                             '                T 
28fdc 341             | 
28fdc 341             | w_single                   
28fdc 341             | w_fill_cont           
28fdc 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
28fe0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
28fe4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
28fe8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
28fec 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
28ff0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
28ff4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
28ff8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
28ffc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
29000 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
29004 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
29008 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2900c 34d             |                ' disable call to r_resume_burst for single longs when z=0
2900c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
29010 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
29014 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
29018 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2901c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
29020 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
29024 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
29028 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2902c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
29030 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
29034 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
29038 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2903c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
29040 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
29044 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
29048 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2904c 35d             |         
2904c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2904c 35d             |             '
2904c 35d             |             '  At least one of these 3 optional components will be sent
2904c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2904c 35d             |             '     body - N x full longs of data
2904c 35d             |             '     trailer - last partial long of data
2904c 35d             |             '
2904c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2904c 35d             |             '
2904c 35d             |             'Case    Type                           Sends
2904c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2904c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2904c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2904c 35d             |             ' 4)     Multiple long fill             body only
2904c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2904c 35d             | 
2904c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2904c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
29050 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29054 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
29058 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2905c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
29060 362 13 8C 07 F6 |                             mov     pattern3, #%10011
29064 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
29068 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2906c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
29070 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
29074 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
29078 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2907c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
29080 36a             |                             
29080 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29084 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
29088 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2908c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
29090 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
29094 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
29098 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2909c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
290a0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
290a4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
290a8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
290ac 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
290b0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
290b4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
290b8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
290bc 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
290c0 37a             | 
290c0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
290c4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
290c8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
290cc 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
290d0 37e             |                  
290d0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
290d4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
290d8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
290dc 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
290e0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
290e4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
290e8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
290ec 385             | 
290ec 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
290f0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
290f4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
290f8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
290fc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
29100 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
29104 38b             | 
29104 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
29104 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
29108 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2910c 38d 2A B0 63 FD |                             push    addr1                   'save address
29110 38e             | 
29110 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
29110 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
29114 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
29118 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2911c 391             |             
2911c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
29120 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
29124 393 2B B0 63 FD |                             pop     addr1                   'restore address
29128 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2912c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
29130 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
29134 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
29138 398             | 
29138 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2913c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
29140 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
29144 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
29148 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2914c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
29150 39e             | 
29150 39e             |                             'trailer is done
29150 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
29154 39f             | 
29154 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
29158 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2915c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
29160 3a2             | 
29160 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29164 3a3 69 C8 63 FD |                             rev     cmdaddr                 
29168 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2916c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
29170 3a6             |                             
29170 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
29174 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29178 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2917c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
29180 3aa             |                                                          
29180 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
29184 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
29188 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2918c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
29190 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
29194 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
29198 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2919c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
291a0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
291a4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
291a8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
291ac 3b5             |  
291ac 3b5 59 52 63 FD |                             drvh    cspin
291b0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
291b4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
291b8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
291bc 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
291c0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
291c4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
291c8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
291cc 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
291d0 3be EA E5 03 F6 |                             mov     d, orighubsize
291d4 3bf EF E5 63 F0 |                             shl     d, a
291d8 3c0 F2 E3 83 F1 |                             sub     c, d
291dc 3c1 DD E3 03 F1 |                             add     c, offset1
291e0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
291e4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
291e8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
291ec 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
291f0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
291f4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
291f8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
291fc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29200 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
29204 3cb BB D3 03 F6 |                             mov     resume, restorefill
29208 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2920c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
29210 3ce 6C FC BF CD |             if_c            call    #yield
29214 3cf 2D 00 64 FD |                             ret
29218 3d0             |                            
29218 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
29218 3d0             |                       '     rczl    pa                      'rotate left into address offset
29218 3d0             |                       '     rczl    c wcz                   'restore count and flags
29218 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2921c 3d1 02 EC 67 F0 |                             shl     pa, #2
29220 3d2 28 06 64 AD |             if_z            setq    #3
29224 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
29228 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2922c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
29230 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
29234 3d7             | 
29234 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
29238 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2923c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
29240 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
29244 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
29248 3dc             |                 fit 1024-32
29248 3dc             |         
29248 3dc             | 
29248 3dc             | '..................................................................................................
29248 3dc             | 
29248 3dc             |                 fit 1024-32
29248 3dc 00 00 00 00 
2924c 3dd 00 00 00 00 
29250 3de 00 00 00 00 
29254 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
29258 3e0             |                 org 1024-32
29258 000             | 
29258 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
29258 000 00 00 00 00 |                 long $0000
2925c 001 11 11 00 00 |                 long $1111
29260 002 22 22 00 00 |                 long $2222
29264 003 33 33 00 00 |                 long $3333
29268 004 44 44 00 00 |                 long $4444
2926c 005 55 55 00 00 |                 long $5555
29270 006 66 66 00 00 |                 long $6666
29274 007 77 77 00 00 |                 long $7777
29278 008 88 88 00 00 |                 long $8888
2927c 009 99 99 00 00 |                 long $9999
29280 00a AA AA 00 00 |                 long $aaaa
29284 00b BB BB 00 00 |                 long $bbbb
29288 00c CC CC 00 00 |                 long $cccc
2928c 00d DD DD 00 00 |                 long $dddd
29290 00e EE EE 00 00 |                 long $eeee
29294 00f FF FF 00 00 |                 long $ffff
29298 010             | 
29298 010             | 'masks
29298 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2929c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
292a0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
292a4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
292a8 014             | 
292a8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
292ac 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
292b0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
292b4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
292b8 018             | 
292b8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
292bc 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
292c0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
292c4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
292c8 01c             | 
292c8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
292cc 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
292d0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
292d4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
292d8 020             |         fit 1024
292d8 020             | 
292d8 020             |         fit 1024
292d8 020             | 
292d8 020             | '--------------------------------------------------------------------------------------------------
292d8 020             |         orgh
292d8                 | 
292d8                 | gfxexpansion
292d8                 |                             'simple line drawing graphics expansion of memory driver
292d8                 |                             'jmp     #donerepeats                'just return for now
292d8                 | 
292d8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
292dc     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
292e0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
292e4     DD E1 03 F6 |                             mov     b, offset1              'get error term
292e8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
292ec     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
292f0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
292f4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
292f8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
292fc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
29300     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
29304     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
29308     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2930c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
29310     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
29314     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
29318     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2931c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
29320     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
29324     DC E5 33 F9 |                             getword d, total, #0            'get line width
29328     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2932c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
29330     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
29334     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
29338     C3 03 80 FD |                             jmp     #readmask               'continue filling
2933c                 | 	alignl
2933c                 | _usbnew_spin2_dat_
2933c                 |                 org     $000
2933c 000             | 
2933c 000             | usb_host_start
2933c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
29340 001             | 
29340 001 03 00 00 FF 
29344 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
29348 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2934c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
29350 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
29354 006 29 70 63 FD |                 setq2   htmp
29358 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2935c 008             | 
2935c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
29360 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
29364 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
29368 00b             | 
29368 00b             | '------------------------------------------------------------------------------
29368 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
29368 00b             | ' special because the receiving function must not respond with either STALL or
29368 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
29368 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
29368 00b             | ' corrupt packet, it must ignore the transaction
29368 00b             | '------------------------------------------------------------------------------
29368 00b             | ' On entry:
29368 00b             | '   PTRA - start address of the SETUP data struct.
29368 00b             | ' On exit:
29368 00b             | '   retval - PID_ACK on success, otherwise error code.
29368 00b             | '------------------------------------------------------------------------------
29368 00b             | txn_setup
29368 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2936c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
29370 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
29374 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
29378 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2937c 010             | .setup
2937c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
29380 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29384 012 2D 00 64 AD |         if_z    ret
29388 013 7C 0B B0 FD |                 call    #retry_wait
2938c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29390 015 2D 00 64 AD |         if_z    ret
29394 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
29398 017 E0 FF 9F FD |                 jmp     #.setup
2939c 018             | 
2939c 018             | '------------------------------------------------------------------------------
2939c 018             | ' IN/INTERRUPT transaction.
2939c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2939c 018             | '------------------------------------------------------------------------------
2939c 018             | ' On entry:
2939c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2939c 018             | '     CRC(b19..23).
2939c 018             | ' On exit:
2939c 018             | '------------------------------------------------------------------------------
2939c 018             | txn_in
2939c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
293a0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
293a4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
293a8 01b             | 
293a8 01b             |                 ' Fall through to urx_packet
293a8 01b             | 
293a8 01b             | '------------------------------------------------------------------------------
293a8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
293a8 01b             | ' received are handshakes and IN DATAx.
293a8 01b             | '------------------------------------------------------------------------------
293a8 01b             | ' On entry:
293a8 01b             | ' On exit:
293a8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
293a8 01b             | '     returned.
293a8 01b             | '------------------------------------------------------------------------------
293a8 01b             | urx_packet
293a8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
293ac 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
293b0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
293b4 01e 1A 92 63 FD |                 getct   hct2
293b8 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
293bc 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
293c0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
293c4 022             | .wait_sop
293c4 022 22 A7 8A FA |                 rdpin   urx, dm
293c8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
293cc 024 08 00 90 CD |         if_c    jmp     #.get_pid
293d0 025 FC 25 CC FB |                 jnct2   #.wait_sop
293d4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
293d8 027             | .get_pid
293d8 027 28 02 B0 FD |                 call    #urx_next
293dc 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
293e0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
293e4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
293e8 02b             | .chk_pid
293e8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
293ec 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
293f0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
293f4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
293f8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
293fc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
29400 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
29404 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
29408 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2940c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
29410 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
29414 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
29418 037             | .ack_resend
29418 037 22 A7 82 FA |                 rqpin   urx, dm
2941c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29420 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
29424 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
29428 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2942c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
29430 03d             | .chk_eop
29430 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29434 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
29438 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2943c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
29440 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
29444 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
29448 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2944c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
29450 045 2D 00 64 FD |                 ret
29454 046             | .idle
29454 046 22 A7 82 FA |                 rqpin   urx, dm
29458 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2945c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
29460 049 2D 00 64 FD |                 ret
29464 04a             | 
29464 04a             | '------------------------------------------------------------------------------
29464 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
29464 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
29464 04a             | ' if one is required.
29464 04a             | '------------------------------------------------------------------------------
29464 04a             | ' On entry:
29464 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
29464 04a             | ' On exit:
29464 04a             | '------------------------------------------------------------------------------
29464 04a             | utx_token
29464 04a 22 A7 82 FA |                 rqpin   urx, dm
29468 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2946c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
29470 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29474 04e 34 0D B0 CD |         if_c    call    #utx_pre
29478 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2947c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
29480 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
29484 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
29488 053             | .next_byte
29488 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2948c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
29490 055             | .wait
29490 055 40 46 72 FD |                 testp   dp                      wc
29494 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
29498 057 23 03 08 FC |                 akpin   dp
2949c 058 22 A5 22 FC |                 wypin   utx, dm
294a0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
294a4 05a             | 
294a4 05a             | '------------------------------------------------------------------------------
294a4 05a             | ' SETUP/OUT/INTERRUPT transaction.
294a4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
294a4 05a             | '------------------------------------------------------------------------------
294a4 05a             | ' On entry:
294a4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
294a4 05a             | '     CRC(b19..23).
294a4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
294a4 05a             | '   pkt_data - count of DATAx payload bytes to send.
294a4 05a             | ' On exit:
294a4 05a             | '------------------------------------------------------------------------------
294a4 05a             | txn_out
294a4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
294a8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
294ac 05c 00 00 C0 FF 
294b0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
294b4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
294b8 05f             | 
294b8 05f             |                 ' Fall through to utx_data
294b8 05f             | 
294b8 05f             | '------------------------------------------------------------------------------
294b8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
294b8 05f             | ' calculated while the data byte is being shifted out. Since data stage
294b8 05f             | ' success/fail is not determined until the status stage of the transaction,
294b8 05f             | ' this routine is only concerned about the current DATAx packet.
294b8 05f             | '------------------------------------------------------------------------------
294b8 05f             | ' On entry:
294b8 05f             | '   PTRA - hub start address of the data to read.
294b8 05f             | '   pkt_cnt - data payload size.
294b8 05f             | ' On exit:
294b8 05f             | '------------------------------------------------------------------------------
294b8 05f             | utx_data
294b8 05f 22 A7 82 FA |                 rqpin   urx, dm
294bc 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
294c0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
294c4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
294c8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
294cc 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
294d0 065 D8 0C B0 CD |         if_c    call    #utx_pre
294d4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
294d8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
294dc 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
294e0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
294e4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
294e8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
294ec 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
294f0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
294f4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
294f8 06f             | .read_byte
294f8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
294fc 070 F0 00 B0 FD |                 call    #utx_byte
29500 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
29504 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
29508 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2950c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
29510 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
29514 076             | .send_crc
29514 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
29518 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2951c 078 D0 00 B0 FD |                 call    #utx_byte
29520 079 5D A5 EA F8 |                 getbyte utx, crc, #1
29524 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
29528 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2952c 07c             | 
2952c 07c             | '------------------------------------------------------------------------------
2952c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2952c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2952c 07c             | ' expects that the packet includes at least the CRC word.
2952c 07c             | '
2952c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2952c 07c             | ' was requested, which makes it difficult to determine where the data stops
2952c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2952c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2952c 07c             | ' USB-16 expected residual value of 0xB001.
2952c 07c             | '
2952c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2952c 07c             | ' so the caller can verify IN success before writing the data to its final
2952c 07c             | ' destination.
2952c 07c             | '------------------------------------------------------------------------------
2952c 07c             | ' On entry:
2952c 07c             | '   pkt_data - max byte count expected to be in the packet.
2952c 07c             | '   newb_flg - signals new byte ready when toggled.
2952c 07c             | ' On exit:
2952c 07c             | '   pkt_cnt - actual number of bytes read.
2952c 07c             | '------------------------------------------------------------------------------
2952c 07c             | urx_data
2952c 07c F7 75 03 F6 |                 mov     htmp2, pb
29530 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
29534 07e 00 00 C0 FF 
29538 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2953c 080 BA EF 03 F6 |                 mov     pb, htmp2
29540 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
29544 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
29548 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2954c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
29550 085             | .wait_byte
29550 085             | ' In-line rx for max speed
29550 085 22 A7 82 FA |                 rqpin   urx, dm
29554 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
29558 087 53 A5 02 F5 |                 and     utx, urx
2955c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29560 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29564 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
29568 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2956c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
29570 08d DC FF 9F FD |                 jmp     #.wait_byte
29574 08e             | .get_byte
29574 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
29578 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2957c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
29580 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
29584 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
29588 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2958c 094             | .end_crc
2958c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
29590 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
29594 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
29598 097 2D 00 64 1D |         if_a    ret
2959c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2959c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2959c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2959c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2959c 098 22 A7 82 FA |                 rqpin   urx, dm
295a0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
295a4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
295a8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
295a8 09b             | .chk_crc
295a8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
295ac 09c 58 00 00 FF 
295b0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
295b4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
295b8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
295bc 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
295c0 0a1 34 09 B0 FD |                 call    #poll_waitx
295c4 0a2             | 
295c4 0a2             |                 ' Fall through to utx_handshake
295c4 0a2             | 
295c4 0a2             | '------------------------------------------------------------------------------
295c4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
295c4 0a2             | ' the appropriate IP delay has been inserted.
295c4 0a2             | '------------------------------------------------------------------------------
295c4 0a2             | ' On entry:
295c4 0a2             | '   retval - handshake PID to send.
295c4 0a2             | ' On exit:
295c4 0a2             | '   retval unchanged.
295c4 0a2             | '------------------------------------------------------------------------------
295c4 0a2             | utx_handshake
295c4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
295c8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
295cc 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
295d0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
295d4 0a6 5F A5 02 F6 |                 mov     utx, retval
295d8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
295dc 0a8             | .idle
295dc 0a8 22 A7 82 FA |                 rqpin   urx, dm
295e0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
295e4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
295e8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
295ec 0ac 08 09 90 FD |                 jmp     #poll_waitx
295f0 0ad             | 
295f0 0ad             | '------------------------------------------------------------------------------
295f0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
295f0 0ad             | '------------------------------------------------------------------------------
295f0 0ad             | ' On entry:
295f0 0ad             | '   utx - byte to transmit.
295f0 0ad             | ' On exit:
295f0 0ad             | '------------------------------------------------------------------------------
295f0 0ad             | utx_byte
295f0 0ad 40 46 72 FD |                 testp   dp                      wc
295f4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
295f8 0af 23 03 08 FC |                 akpin   dp
295fc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
29600 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
29604 0b2             | 
29604 0b2             | '------------------------------------------------------------------------------
29604 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
29604 0b2             | '------------------------------------------------------------------------------
29604 0b2             | ' On entry:
29604 0b2             | ' On exit:
29604 0b2             | '   retval - the byte read.
29604 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
29604 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
29604 0b2             | '     received.
29604 0b2             | '------------------------------------------------------------------------------
29604 0b2             | urx_next
29604 0b2 22 A7 8A FA |                 rdpin   urx, dm
29608 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2960c 0b4 53 A5 02 F5 |                 and     utx, urx
29610 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29614 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29618 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2961c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
29620 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29624 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
29628 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2962c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
29630 0bd 2D 00 64 FD |                 ret
29634 0be             | 
29634 0be             | '------------------------------------------------------------------------------
29634 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
29634 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
29634 0be             | ' length, and the PID is not included in the CRC calculation:
29634 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
29634 0be             | '  CRC5  ENDP ADDRESS PID
29634 0be             | ' %00000_1111_1111111_xxxxxxxx
29634 0be             | '------------------------------------------------------------------------------
29634 0be             | ' On entry:
29634 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
29634 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
29634 0be             | ' On exit:
29634 0be             | '   ep_addr_pid - CRC value appended to the packet.
29634 0be             | '------------------------------------------------------------------------------
29634 0be             | calc_crc5
29634 0be FF 03 00 FF 
29638 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2963c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
29640 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
29644 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
29648 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2964c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
29650 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
29654 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
29658 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2965c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
29660 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
29664 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29668 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2966c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29670 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
29674 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
29678 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2967c 0d0             | 
2967c 0d0             | '------------------------------------------------------------------------------
2967c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2967c 0d0             | '------------------------------------------------------------------------------
2967c 0d0             | isr1_fsframe
2967c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
29680 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29684 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29688 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2968c 0d4             | .wait
2968c 0d4 40 46 72 FD |                 testp   dp                      wc
29690 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
29694 0d6 23 03 08 FC |                 akpin   dp
29698 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2969c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
296a0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
296a4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
296a8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
296ac 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
296b0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
296b4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
296b8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
296bc 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
296c0 0e1 2C FF BF FD |                 call    #utx_byte
296c4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
296c8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
296cc 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
296d0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
296d4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
296d8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
296dc 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
296e0 0e9 5B A5 42 F5 |                 or      utx, icrc
296e4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
296e8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
296ec 0ec 20 00 90 FD |                 jmp     #isr1_wait
296f0 0ed             | isr1_lsframe
296f0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
296f4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
296f8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
296fc 0f0             | .wait
296fc 0f0 40 46 72 FD |                 testp   dp                      wc
29700 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
29704 0f2 23 03 08 FC |                 akpin   dp
29708 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2970c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
29710 0f5             | isr1_wait
29710 0f5 22 A5 82 FA |                 rqpin   utx, dm
29714 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
29718 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2971c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
29720 0f9 03 00 00 FF 
29724 0fa FF B3 06 F5 |                 and     frame, ##$7ff
29728 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2972c 0fc F5 FF 3B FB |                 reti1
29730 0fd             | 
29730 0fd             | '------------------------------------------------------------------------------
29730 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
29730 0fd             | ' transaction will complete before the next frame is triggered.
29730 0fd             | '------------------------------------------------------------------------------
29730 0fd             | ' On entry:
29730 0fd             | ' On exit:
29730 0fd             | '------------------------------------------------------------------------------
29730 0fd             | wait_txn_ok
29730 0fd 1A 74 63 FD |                 getct   htmp2
29734 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
29738 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2973c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
29740 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
29744 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
29748 103 2D 00 64 FD |                 ret
2974c 104             | 
2974c 104             | '------------------------------------------------------------------------------
2974c 104             | ' A device connection was detected, or a bus reset was requested by the USB
2974c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2974c 104             | ' and perform a reset sequence prior to device enumeration.
2974c 104             | '------------------------------------------------------------------------------
2974c 104             | dev_reset
2974c 104 22 A7 82 FA |                 rqpin   urx, dm
29750 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
29754 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
29758 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2975c 108             | reset
2975c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
29760 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
29764 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
29768 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2976c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
29770 10d 1A 92 62 FD |                 getct   iframe_ct_base
29774 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29778 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2977c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
29780 111 24 70 07 F1 |                 add     htmp, #36
29784 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
29788 113             | .framewait
29788 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2978c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
29790 115 2D 00 64 FD |                 ret
29794 116             | 
29794 116             | '------------------------------------------------------------------------------
29794 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
29794 116             | '------------------------------------------------------------------------------
29794 116             | ' On entry:
29794 116             | '   PTRA - source address.
29794 116             | '   PB - destination address.
29794 116             | '   hr0 - length of copy, in bytes.
29794 116             | ' On exit:
29794 116             | '------------------------------------------------------------------------------
29794 116             | hmemcpy
29794 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
29798 117 F7 71 43 FC |                 wrbyte  htmp, pb
2979c 118 01 EE 07 F1 |                 add     pb, #1
297a0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
297a4 11a             | 
297a4 11a             | '------------------------------------------------------------------------------
297a4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
297a4 11a             | ' loop until the errant device is disconnected.
297a4 11a             | '------------------------------------------------------------------------------
297a4 11a             | ' On entry:
297a4 11a             | ' On exit:
297a4 11a             | '------------------------------------------------------------------------------
297a4 11a             | host_error
297a4 11a             |           if ERROR_LED >= 0
297a4 11a             |           end
297a4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
297a8 11b             | 
297a8 11b             | '------------------------------------------------------------------------------
297a8 11b             | ' Get HID descriptor buffer for current port
297a8 11b             | '------------------------------------------------------------------------------
297a8 11b             | ' On entry:
297a8 11b             | ' On exit:
297a8 11b             | '   PB - HID descriptor buffer pointer
297a8 11b             | '------------------------------------------------------------------------------
297a8 11b             | get_hid_descr_buffer
297a8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
297ac 11c 01 EE E7 F2 |                 cmpsub  pb, #1
297b0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
297b4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
297b8 11f             | 
297b8 11f             | 
297b8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
297bc 120             | 
297bc 120             | ' USB commands and error codes
297bc 120 00 00 00 00 | cmd_data        long    0
297c0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
297c4 122             | 
297c4 122             | ' Parameters block assigned at cog startup
297c4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
297c8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
297cc 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
297d0 125             | if ACTIVITY_LED >= 0
297d0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
297d0 125             | end
297d0 125             | if ERROR_LED >= 0
297d0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
297d0 125             | end
297d0 125 00 00 00 00 | hid_descr_p     long    0
297d4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
297d4 126             | 'hkbd_report_p   long    0
297d4 126 00 00 00 00 | hub_descr_p     long    0
297d8 127 00 00 00 00 | urx_buff_p      long    0
297dc 128 00 00 00 00 | dev_desc_buff_p long    0
297e0 129 00 00 00 00 | con_desc_buff_p long    0
297e4 12a 00 00 00 00 | cache_start_p   long    0
297e8 12b 00 00 00 00 | cache_end_p     long    0
297ec 12c             | if EMUPAD_MAX_PLAYER > 0
297ec 12c             | emupad_out_ptr  long    0
297ec 12c             | end
297ec 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
297f0 12d             | 
297f0 12d             | hdev_init_start
297f0 12d             | hdev_port       res     1
297f0 12d             | hdev_port       res     1
297f0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
297f0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
297f0 12d             | kbm_next_datax  res     1
297f0 12d             | kbm_next_datax  res     1
297f0 12d             | hub_intf_num    res     1
297f0 12d             | hub_intf_num    res     1
297f0 12d             | hub_next_datax  res     1
297f0 12d             | hub_next_datax  res     1
297f0 12d             | hub_status_chg  res     1
297f0 12d             | hub_status_chg  res     1
297f0 12d             | hub_port_status res     1
297f0 12d             | hub_port_status res     1
297f0 12d             | if HAVE_MOUSE
297f0 12d             | ms_intf_num     res     1
297f0 12d             | ms_intf_num     res     1
297f0 12d             | ms_in_max_pkt   res     1
297f0 12d             | ms_in_max_pkt   res     1
297f0 12d             | end
297f0 12d             | kb_intf_num     res     1
297f0 12d             | kb_intf_num     res     1
297f0 12d             | kb_interval     res     1
297f0 12d             | kb_interval     res     1
297f0 12d             | kb_in_max_pkt   res     1
297f0 12d             | kb_in_max_pkt   res     1
297f0 12d             | kb_max_index    res     1
297f0 12d             | kb_max_index    res     1
297f0 12d             | kb_led_states   res     1
297f0 12d             | kb_led_states   res     1
297f0 12d             | gp_intf_num     res     1
297f0 12d             | gp_intf_num     res     1
297f0 12d             | gp_interval     res     1
297f0 12d             | gp_interval     res     1
297f0 12d             | gp_max_index    res     1
297f0 12d             | gp_max_index    res     1
297f0 12d             | gp_descr_len    res     1+MAX_DEVICES
297f0 12d             | gp_descr_len    res     1+MAX_DEVICES
297f0 12d             | hdev_init_end
297f0 12d             | 
297f0 12d             | ' Initialized at cog startup:
297f0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
297f0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
297f0 12d             | iframe_ct_new   res     1
297f0 12d             | iframe_ct_new   res     1
297f0 12d             | iframe_ct_base  res     1
297f0 12d             | iframe_ct_base  res     1
297f0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
297f0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
297f0 12d             | 
297f0 12d             | ' This register block is reset to zero when a USB device connects
297f0 12d             | hreg_init_start
297f0 12d             | hstatus         res     1         ' Host status flags
297f0 12d             | hstatus         res     1         ' Host status flags
297f0 12d             | hctwait         res     1         ' Poll-based wait clocks
297f0 12d             | hctwait         res     1         ' Poll-based wait clocks
297f0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
297f0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
297f0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
297f0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
297f0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
297f0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
297f0 12d             | xfer_retry      res     1         ' Control transfer retry count
297f0 12d             | xfer_retry      res     1         ' Control transfer retry count
297f0 12d             | retry           res     1         ' Transaction retry count
297f0 12d             | retry           res     1         ' Transaction retry count
297f0 12d             | utx             res     1         ' Byte to transmit on USB
297f0 12d             | utx             res     1         ' Byte to transmit on USB
297f0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
297f0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
297f0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
297f0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
297f0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
297f0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
297f0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
297f0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
297f0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
297f0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
297f0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
297f0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
297f0 12d             | frame           res     1         ' USB 1ms frame counter value
297f0 12d             | frame           res     1         ' USB 1ms frame counter value
297f0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
297f0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
297f0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
297f0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
297f0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
297f0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
297f0 12d             | crc             res     1         ' Used for CRC16 calculation
297f0 12d             | crc             res     1         ' Used for CRC16 calculation
297f0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
297f0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
297f0 12d             | retval          res     1         ' Global success/fail return parameter
297f0 12d             | retval          res     1         ' Global success/fail return parameter
297f0 12d             | context_retval  res     1         ' Operation contextual return parameter
297f0 12d             | context_retval  res     1         ' Operation contextual return parameter
297f0 12d             | ' Device stuff
297f0 12d             | hdev_id         res     1+MAX_DEVICES
297f0 12d             | hdev_id         res     1+MAX_DEVICES
297f0 12d             | hdev_bcd        res     1
297f0 12d             | hdev_bcd        res     1
297f0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
297f0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
297f0 12d             | ' Keyboard/mouse stuff
297f0 12d             | hctrl_ep_addr   res     1
297f0 12d             | hctrl_ep_addr   res     1
297f0 12d             | hctrl_max_pkt   res     1
297f0 12d             | hctrl_max_pkt   res     1
297f0 12d             | hconfig_base    res     1
297f0 12d             | hconfig_base    res     1
297f0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
297f0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
297f0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
297f0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
297f0 12d             | hdev_class      res     1
297f0 12d             | hdev_class      res     1
297f0 12d             | hdev_subclass   res     1
297f0 12d             | hdev_subclass   res     1
297f0 12d             | hdev_protocol   res     1
297f0 12d             | hdev_protocol   res     1
297f0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
297f0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
297f0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
297f0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
297f0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
297f0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
297f0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
297f0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
297f0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
297f0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
297f0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
297f0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
297f0 12d             | if HAVE_MOUSE
297f0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
297f0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
297f0 12d             | end
297f0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
297f0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
297f0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
297f0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
297f0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
297f0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
297f0 12d             | hdev_out_addr   res     1
297f0 12d             | hdev_out_addr   res     1
297f0 12d             | 
297f0 12d             | if EMUPAD_MAX_PLAYER > 0
297f0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
297f0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
297f0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
297f0 12d             | end
297f0 12d             | 
297f0 12d             | hreg_init_end
297f0 12d             | 
297f0 12d             | hidr_start
297f0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
297f0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
297f0 12d             | hidr_flags      res     1
297f0 12d             | hidr_flags      res     1
297f0 12d             | hidr_axis       res     3
297f0 12d             | hidr_axis       res     3
297f0 12d             | hidr_buttons    res     1
297f0 12d             | hidr_buttons    res     1
297f0 12d             | hidr_hats       res     1
297f0 12d             | hidr_hats       res     1
297f0 12d             | '' Above are actually useful values, 6 longs
297f0 12d             | hidr_id         res     1
297f0 12d             | hidr_id         res     1
297f0 12d             | hidr_state      res     1
297f0 12d             | hidr_state      res     1
297f0 12d             | hidr_size       res     1
297f0 12d             | hidr_size       res     1
297f0 12d             | hidr_count      res     1
297f0 12d             | hidr_count      res     1
297f0 12d             | hidr_offset     res     1
297f0 12d             | hidr_offset     res     1
297f0 12d             | hidr_usage_idx  res     1
297f0 12d             | hidr_usage_idx  res     1
297f0 12d             | hidr_lminmax    res     1
297f0 12d             | hidr_lminmax    res     1
297f0 12d             | hidr_pminmax    res     1
297f0 12d             | hidr_pminmax    res     1
297f0 12d             | hidr_type       res     1
297f0 12d             | hidr_type       res     1
297f0 12d             | hidr_end
297f0 12d             | 
297f0 12d             | ' Variables dependent on the system freqency
297f0 12d             | _var_64_lower_  res     1
297f0 12d             | _var_64_lower_  res     1
297f0 12d             | _var_64_upper_  res     1
297f0 12d             | _var_64_upper_  res     1
297f0 12d             | _12Mbps_        res     1
297f0 12d             | _12Mbps_        res     1
297f0 12d             | _1_5Mbps_       res     1
297f0 12d             | _1_5Mbps_       res     1
297f0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
297f0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
297f0 12d             | _1us_           res     1         ' 1us
297f0 12d             | _1us_           res     1         ' 1us
297f0 12d             | _10us_          res     1         ' 10us
297f0 12d             | _10us_          res     1         ' 10us
297f0 12d             | _33us_          res     1         ' 33us
297f0 12d             | _33us_          res     1         ' 33us
297f0 12d             | _txn_err_       res     1         ' 250us
297f0 12d             | _txn_err_       res     1         ' 250us
297f0 12d             | _500us_         res     1         ' 500us
297f0 12d             | _500us_         res     1         ' 500us
297f0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
297f0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
297f0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
297f0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
297f0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
297f0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
297f0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
297f0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
297f0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
297f0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
297f0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
297f0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
297f0 12d             | _preamble_wait_ res     1
297f0 12d             | _preamble_wait_ res     1
297f0 12d             | _1ms_           res     1         ' 1ms
297f0 12d             | _1ms_           res     1         ' 1ms
297f0 12d             | _2ms_           res     1         ' 2ms
297f0 12d             | _2ms_           res     1         ' 2ms
297f0 12d             | _suspend_wait_  res     1         ' 3ms
297f0 12d             | _suspend_wait_  res     1         ' 3ms
297f0 12d             | _4ms_           res     1         ' 4ms
297f0 12d             | _4ms_           res     1         ' 4ms
297f0 12d             | _xfer_wait_     res     1         ' 5ms
297f0 12d             | _xfer_wait_     res     1         ' 5ms
297f0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
297f0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
297f0 12d             | _reset_hold_    res     1         ' 15ms
297f0 12d             | _reset_hold_    res     1         ' 15ms
297f0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
297f0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
297f0 12d             | _21ms_          res     1         ' 21ms
297f0 12d             | _21ms_          res     1         ' 21ms
297f0 12d             | _100ms_         res     1         ' 100ms
297f0 12d             | _100ms_         res     1         ' 100ms
297f0 12d             | _500ms_         res     1         ' 500ms
297f0 12d             | _500ms_         res     1         ' 500ms
297f0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
297f0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
297f0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
297f0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
297f0 12d             | '------------------------------------------------------------------------------
297f0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
297f0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
297f0 12d             | _usb_d_ls_nco_  res     1
297f0 12d             | _usb_d_ls_nco_  res     1
297f0 12d             | _usb_h_fs_nco_  res     1
297f0 12d             | _usb_h_fs_nco_  res     1
297f0 12d             | _usb_d_fs_nco_  res     1
297f0 12d             | _usb_d_fs_nco_  res     1
297f0 12d             | '------------------------------------------------------------------------------
297f0 12d             | ' Scratch registers
297f0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
297f0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
297f0 12d             | htmp1           res     1
297f0 12d             | htmp1           res     1
297f0 12d             | htmp2           res     1
297f0 12d             | htmp2           res     1
297f0 12d             | htmp3           res     1
297f0 12d             | htmp3           res     1
297f0 12d             | hrep            res     1         ' Repeat count
297f0 12d             | hrep            res     1         ' Repeat count
297f0 12d             | hsave0          res     1         ' Subroutine parameter saves
297f0 12d             | hsave0          res     1         ' Subroutine parameter saves
297f0 12d             | hsave1          res     1
297f0 12d             | hsave1          res     1
297f0 12d             | hsave2          res     1
297f0 12d             | hsave2          res     1
297f0 12d             | isrtmp1         res     1
297f0 12d             | isrtmp1         res     1
297f0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
297f0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
297f0 12d             | hr0             res     1         ' Multi-purpose registers
297f0 12d             | hr0             res     1         ' Multi-purpose registers
297f0 12d             | hr1             res     1
297f0 12d             | hr1             res     1
297f0 12d             | hr2             res     1
297f0 12d             | hr2             res     1
297f0 12d             | hr3             res     1
297f0 12d             | hr3             res     1
297f0 12d             | hpar1           res     1         ' Routine entry/exit parameters
297f0 12d             | hpar1           res     1         ' Routine entry/exit parameters
297f0 12d             | hpar2           res     1
297f0 12d             | hpar2           res     1
297f0 12d             | hpar3           res     1
297f0 12d             | hpar3           res     1
297f0 12d             | hct2            res     1         ' Function response bus turn-around timer
297f0 12d             | hct2            res     1         ' Function response bus turn-around timer
297f0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
297f0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
297f0 12d             | mod_cnt         res     1         ' Used in idle loops
297f0 12d             | mod_cnt         res     1         ' Used in idle loops
297f0 12d             |                 fit     $1F0
297f0 12d             |                 org     $200
297f0 200             | hlut_start
297f0 200             | 
297f0 200             | '------------------------------------------------------------------------------
297f0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
297f0 200             | ' settings to startup defaults.
297f0 200             | '------------------------------------------------------------------------------
297f0 200             | ' On entry:
297f0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
297f0 200             | '------------------------------------------------------------------------------
297f0 200             | set_speed_full
297f0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
297f4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
297f8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
297fc 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
29800 204             | '                ret                             wcz     ' Restore caller flags on exit
29800 204             | 
29800 204             | '------------------------------------------------------------------------------
29800 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
29800 204             | ' is a downstream hub connected (not yet implemented), the baud generator
29800 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
29800 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
29800 204             | ' putting the smart pins into reset.
29800 204             | '------------------------------------------------------------------------------
29800 204             | ' On entry:
29800 204             | ' On exit: CZ flags restored to caller states
29800 204             | '------------------------------------------------------------------------------
29800 204             | set_speed_low
29800 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
29804 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
29808 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2980c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
29810 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
29814 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
29818 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2981c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
29820 20c             | 
29820 20c             | '------------------------------------------------------------------------------
29820 20c             | ' Perform configuration stuff required when a device intitially connects.
29820 20c             | '------------------------------------------------------------------------------
29820 20c             | ' On entry:
29820 20c             | ' On exit:
29820 20c             | '------------------------------------------------------------------------------
29820 20c             | on_connect
29820 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
29824 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
29828 20e             | .retry
29828 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2982c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
29830 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
29834 211 00 08 00 FF 
29838 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2983c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
29840 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29844 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
29848 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2984c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
29850 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29854 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
29858 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2985c 21b 4C 03 B0 FD |                 call    #poll_waitx
29860 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
29864 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
29868 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2986c 21f B8 FF 9F FD |                 jmp     #.retry
29870 220             | .get_dev_desc
29870 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
29874 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
29878 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2987c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
29880 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
29884 225 88 FB BF FD |                 call    #reset
29888 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2988c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29890 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
29894 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
29898 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2989c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
298a0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
298a4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
298a8 22e 04 00 00 FF 
298ac 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
298b0 230 34 FA BF FD |                 call    #calc_crc5
298b4 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
298b8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
298bc 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
298c0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
298c4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
298c8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
298cc 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
298d0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
298d4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
298d8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
298dc 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
298e0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
298e4 23d C4 02 B0 FD |                 call    #poll_waitx
298e8 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
298ec 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
298f0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
298f4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
298f8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
298fc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29900 244 2D 00 64 5D |         if_nz   ret
29904 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
29908 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2990c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
29910 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
29914 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
29918 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2991c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
29920 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
29924 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
29928 24e 2C FB 9F CD |         if_b    jmp     #host_error
2992c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
29930 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
29934 251 2D EC 63 FD |                 call    pa
29938 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2993c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
29940 254 2C EC 63 FD |                 jmp     pa
29944 255             | 
29944 255             | '------------------------------------------------------------------------------
29944 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
29944 255             | ' Status reporting is always in the function-to-host direction.
29944 255             | '------------------------------------------------------------------------------
29944 255             | ' On entry:
29944 255             | '   PTRA - start address of the SETUP data in hub.
29944 255             | '   PB - start address of the buffer/struct to be written to during the IN data
29944 255             | '     stage.
29944 255             | '   ep_addr_pid - device address, endpoint and CRC5.
29944 255             | ' On exit:
29944 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
29944 255             | '     contains the count of data stage bytes actually received, which must
29944 255             | '     always be <= the count requested.
29944 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
29944 255             | '     more specific USB operation error code.
29944 255             | '------------------------------------------------------------------------------
29944 255             | control_read
29944 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
29948 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2994c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
29950 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
29954 259             | .xfer_start
29954 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
29958 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2995c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29960 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
29964 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
29968 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2996c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
29970 260 61 00 00 FF 
29974 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
29978 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2997c 263             | .data
2997c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
29980 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
29984 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
29988 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2998c 267             | .nak_retry
2998c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
29990 268             | .in_retry
29990 268 BC F6 BF FD |                 call    #txn_in
29994 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
29998 26a 28 00 90 AD |         if_z    jmp     #.commit
2999c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
299a0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
299a4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
299a8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
299ac 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
299b0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
299b4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
299b8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
299bc 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
299c0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
299c4 275             | .commit
299c4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
299c8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
299cc 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
299d0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
299d4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
299d8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
299dc 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
299e0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
299e4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
299e8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
299ec 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
299f0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
299f4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
299f8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
299fc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
29a00 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
29a04 285             | .pre_status
29a04 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
29a08 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
29a0c 287 00 B0 06 F6 |                 mov     pkt_data, #0
29a10 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
29a14 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
29a18 28a 61 00 00 FF 
29a1c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
29a20 28c             | .out_retry
29a20 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
29a24 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29a28 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
29a2c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
29a30 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
29a34 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
29a38 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
29a3c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
29a40 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29a44 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
29a48 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
29a4c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
29a4c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
29a4c 297             | ' ControlRead() transfer gets things unstuck most of the time...
29a4c 297             | .xfer_retry
29a4c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
29a50 298 58 01 B0 FD |                 call    #poll_waitx
29a54 299 8C F9 BF FD |                 call    #wait_txn_ok
29a58 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
29a5c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
29a60 29c C8 EF 03 F6 |                 mov     pb, hpar3
29a64 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
29a68 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
29a6c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
29a70 2a0             | 
29a70 2a0             | '------------------------------------------------------------------------------
29a70 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
29a70 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
29a70 2a0             | ' the SETUP data struct is filled with the required values.
29a70 2a0             | '------------------------------------------------------------------------------
29a70 2a0             | ' On entry:
29a70 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
29a70 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
29a70 2a0             | '     stage.
29a70 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
29a70 2a0             | ' On exit:
29a70 2a0             | '   retval - used to convey the success/failure of each stage.
29a70 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
29a70 2a0             | '     more specific USB operation error code.
29a70 2a0             | '------------------------------------------------------------------------------
29a70 2a0             | control_write
29a70 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
29a74 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
29a78 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
29a7c 2a3             | 
29a7c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
29a80 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
29a84 2a5 F7 91 03 F6 |                 mov     hpar3, pb
29a88 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
29a8c 2a7             | .xfer_start
29a8c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
29a90 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
29a94 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
29a98 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29a9c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
29aa0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
29aa4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
29aa8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
29aac 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
29ab0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
29ab4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
29ab8 2b2             | .data
29ab8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
29abc 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
29ac0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
29ac4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
29ac8 2b6             | .out_retry
29ac8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
29acc 2b7 88 F6 BF FD |                 call    #txn_out
29ad0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29ad4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
29ad8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
29adc 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
29ae0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
29ae4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
29ae8 2be             | .commit
29ae8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
29aec 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
29af0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
29af4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
29af8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
29afc 2c3             | pre_status_in
29afc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
29b00 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
29b04 2c5             | .status_retry
29b04 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
29b08 2c6 44 F5 BF FD |                 call    #txn_in
29b0c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
29b10 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
29b14 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
29b18 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
29b1c 2cb 2D 00 64 AD |         if_z    ret
29b20 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
29b24 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29b28 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
29b2c 2cf             | '               ret                                     ' Caller must handle transfer retirement
29b2c 2cf             | 
29b2c 2cf             | '------------------------------------------------------------------------------
29b2c 2cf             | ' Execute an IN interrupt transaction.
29b2c 2cf             | '------------------------------------------------------------------------------
29b2c 2cf             | ' On entry:
29b2c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
29b2c 2cf             | '   hpar2 - Address of the IN data buffer
29b2c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
29b2c 2cf             | ' On exit:
29b2c 2cf             | '   retval - the result of the operation.
29b2c 2cf             | '   hpar3 - the count of IN data bytes actually received.
29b2c 2cf             | '------------------------------------------------------------------------------
29b2c 2cf             | do_int_in
29b2c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
29b30 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
29b34 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
29b38 2d2             | 
29b38 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
29b3c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
29b40 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
29b44 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
29b48 2d6             | .retry
29b48 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
29b4c 2d7 00 F5 BF FD |                 call    #txn_in
29b50 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
29b54 2d9 1C 00 90 AD |         if_z    jmp     #.commit
29b58 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
29b5c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
29b60 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
29b64 2dd 54 00 B0 FD |                 call    #retry_wait
29b68 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29b6c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
29b70 2e0 D4 FF 9F FD |                 jmp     #.retry
29b74 2e1             | .commit
29b74 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
29b78 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
29b7c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
29b80 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
29b84 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
29b88 2e6             | .post_ret
29b88 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
29b8c 2e7             | 
29b8c 2e7             | 
29b8c 2e7             | '------------------------------------------------------------------------------
29b8c 2e7             | ' Resets the downstream hub port to FS
29b8c 2e7             | '------------------------------------------------------------------------------
29b8c 2e7             | dwnstream_reset
29b8c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
29b90 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
29b94 2e9             | 
29b94 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
29b98 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
29b9c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
29ba0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
29ba4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
29ba8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
29bac 2ef             | 
29bac 2ef             | '------------------------------------------------------------------------------
29bac 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
29bac 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
29bac 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
29bac 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
29bac 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
29bac 2ef             | '------------------------------------------------------------------------------
29bac 2ef             | ' On entry:
29bac 2ef             | '   hctwait - wait interval in sysclocks.
29bac 2ef             | ' On exit:
29bac 2ef             | '------------------------------------------------------------------------------
29bac 2ef             | poll_waitx
29bac 2ef 1A 92 63 FD |                 getct   hct2
29bb0 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
29bb4 2f1             | .wait
29bb4 2f1 FF 25 CC FB |                 jnct2   #.wait
29bb8 2f2 2D 00 64 FD |                 ret
29bbc 2f3             | 
29bbc 2f3             | '------------------------------------------------------------------------------
29bbc 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
29bbc 2f3             | '------------------------------------------------------------------------------
29bbc 2f3             | ' On entry:
29bbc 2f3             | '   retval - transaction response PID or error code.
29bbc 2f3             | ' On exit:
29bbc 2f3             | '------------------------------------------------------------------------------
29bbc 2f3             | retry_wait
29bbc 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
29bc0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
29bc4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
29bc8 2f6 14 00 90 AD |         if_z    jmp     #.nak
29bcc 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
29bd0 2f8 D8 FF BF FD |                 call    #poll_waitx
29bd4 2f9             | .dec
29bd4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
29bd8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
29bdc 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
29be0 2fc             | .nak
29be0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
29be4 2fd C4 FF BF FD |                 call    #poll_waitx
29be8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
29bec 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
29bf0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
29bf4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
29bf8 302 2D 00 64 FD |                 ret
29bfc 303             | 
29bfc 303             | host_reset
29bfc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
29c00 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
29c04 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
29c04 305 BD 01 05 FF 
29c08 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
29c0c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
29c10 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
29c14 309             | ' Check to see if the system clock has been changed.
29c14 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
29c18 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
29c1c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
29c20 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
29c24 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
29c28 30e 40 46 62 FD |                 dirl    dp
29c2c 30f             | 
29c2c 30f 28 02 64 FD |                 setq    #1
29c30 310 80 00 80 FF 
29c34 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
29c38 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
29c3c 313             | .enable
29c3c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
29c40 314 41 46 62 FD |                 dirh    dp
29c44 315 1F 36 63 FD |                 waitx   _1us_
29c48 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
29c4c 317             | 
29c4c 317             |                 ' Handle Port protection enable and startup delay
29c4c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
29c50 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
29c54 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
29c58 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
29c5c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
29c60 31c             | 
29c60 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
29c64 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
29c68 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
29c6c 31f 00 00 04 F6 |                 mov     0-0, #0
29c70 320             | .regloop
29c70 320             | 
29c70 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
29c70 320             | 
29c70 320             | discon_entry
29c70 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
29c74 321             | 
29c74 321             |               
29c74 321             |         if HAVE_HIDPAD
29c74 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
29c78 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
29c7c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
29c80 324 F7 01 68 FC |                 wrlong  #0,pb
29c84 325             |         end
29c84 325             |         if EMUPAD_MAX_PLAYER > 0
29c84 325             |         end
29c84 325             | 
29c84 325             |                 ' Fall through to disconnected loop
29c84 325             | 
29c84 325             | '-----------------------------------------------------------------------------------------------------------------
29c84 325             | ' Device connect handling (Section 7.1.7.3).
29c84 325             | '-----------------------------------------------------------------------------------------------------------------
29c84 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
29c84 325             | ' device to connect (Section 7.1.7.3).
29c84 325             | '-----------------------------------------------------------------------------------------------------------------
29c84 325             | disconnected
29c84 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
29c88 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
29c8c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
29c90 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
29c94 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
29c98 32a             |         if ACTIVITY_LED >= 0
29c98 32a             |         end
29c98 32a 22 A7 82 FA |                 rqpin   urx, dm
29c9c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
29ca0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
29ca4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
29ca8 32e             | .se1_test
29ca8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
29cac 32f FC FE BF FD |                 call    #poll_waitx
29cb0 330 22 A7 82 FA |                 rqpin   urx, dm
29cb4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
29cb8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
29cbc 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
29cc0 334             | .se1            'SE1 is a fatal error condition
29cc0 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
29cc4 335 E4 FE BF FD |                 call    #poll_waitx
29cc8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
29ccc 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
29cd0 338             | .connect_test                                           ' Test lines until stable J/K state seen
29cd0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
29cd4 339 22 A7 82 FA |                 rqpin   urx, dm
29cd8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
29cdc 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
29ce0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
29ce4 33d             | connected
29ce4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
29ce8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
29cec 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
29cf0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
29cf4 341             | .set_pulse
29cf4 341 1A 64 63 FD |                 getct   _pulse_time_
29cf8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
29cfc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
29cfc 343             | ' of 1ms and make a correction, if necessary.
29cfc 343             | '                mov     htmp, _1ms_
29cfc 343             | '                subs    htmp, iframe_delta
29cfc 343             | '                adds    _frame1ms_clks_, htmp
29cfc 343             | '                debug(udec(_frame1ms_clks_))
29cfc 343             | 
29cfc 343             |                 ' Fall through to idle/processing loop
29cfc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
29d00 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
29d04 345             | 
29d04 345             | hidle
29d04 345 22 A7 82 FA |                 rqpin   urx, dm
29d08 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
29d0c 347 98 00 90 CD |         if_c    jmp     #.se0_test
29d10 348 24 06 70 FD |                 pollct3                         wc
29d14 349 68 00 90 3D |         if_nc   jmp     #.nopoll
29d18 34a 1A 94 63 FD |                 getct   hct3
29d1c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
29d20 34c             | 
29d20 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
29d24 34d 00 70 E3 F8 |                 getbyte htmp
29d28 34e             | 
29d28 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
29d2c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
29d30 350 40 00 90 AD |         if_z    jmp     #.poll
29d34 351             | 
29d34 351             |         if _HAVE_GAMEPAD
29d34 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
29d38 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
29d3c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
29d40 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
29d44 355 2C 00 90 AD |         if_z    jmp     #.poll
29d48 356             |         end
29d48 356             | 
29d48 356             |         if HAVE_MOUSE
29d48 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
29d4c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
29d50 358 20 00 90 AD |         if_z    jmp     #.poll
29d54 359             |         end
29d54 359             | 
29d54 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
29d58 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
29d5c 35b 14 00 90 AD |         if_z    jmp     #.poll
29d60 35c             | 
29d60 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
29d64 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
29d68 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
29d6c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
29d70 360             |         if HAVE_MOUSE
29d70 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
29d74 361             |         else
29d74 361             |         end
29d74 361             | 
29d74 361             | .poll
29d74 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
29d78 362 2D EC 63 FD |                 call    pa
29d7c 363             | .skip_poll
29d7c 363             | 
29d7c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
29d80 364             | 
29d80 364             | .nopoll
29d80 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
29d84 365 44 00 90 AD |         if_z    jmp     #hsuspend
29d88 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
29d8c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
29d90 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
29d94 369 1A 84 63 FD |                 getct   hr0
29d98 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
29d9c 36b             |         if ACTIVITY_LED >= 0
29d9c 36b             |         end
29d9c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
29da0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
29da4 36d 5C FF 9F FD |                 jmp     #hidle
29da8 36e             | ' Check for extended SE0 state on the bus
29da8 36e             | .se0_test
29da8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
29dac 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
29db0 370 22 A7 82 FA |                 rqpin   urx, dm
29db4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
29db8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
29dbc 373 24 F6 BF FD |                 call    #wait_txn_ok
29dc0 374 00 00 80 FF 
29dc4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
29dc8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
29dc8 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
29dcc 377             | 
29dcc 377             | hsuspend
29dcc 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
29dd0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
29dd4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
29dd8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
29ddc 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
29de0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
29de4 37d             | 
29de4 37d             |                 ' Fall through to resume wait loop
29de4 37d             | 
29de4 37d             | hwait_resume
29de4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
29de8 37e 02 86 47 F0 |                 shr     hr1, #2
29dec 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
29df0 380             |         if ACTIVITY_LED >= 0
29df0 380             |         end
29df0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
29df4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
29df8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
29dfc 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
29e00 384 18 00 90 AD |         if_z    jmp     #.resume
29e04 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
29e08 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
29e0c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
29e10 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29e14 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
29e18 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
29e1c 38b             | .resume
29e1c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
29e20 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
29e24 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
29e28 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
29e2c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
29e30 390 1F 70 63 FD |                 waitx   htmp
29e34 391 22 07 28 FC |                 wypin   #OUT_J, dm
29e38 392 01 70 47 F0 |                 shr     htmp, #1
29e3c 393 1F 70 63 FD |                 waitx   htmp
29e40 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
29e44 395 1A 92 62 FD |                 getct   iframe_ct_base
29e48 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29e4c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29e50 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
29e54 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
29e58 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
29e5c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
29e60 39c             | 
29e60 39c             | '------------------------------------------------------------------------------
29e60 39c             | ' Send preamble to enable low-speed HUB ports
29e60 39c             | '------------------------------------------------------------------------------
29e60 39c             | ' On entry:
29e60 39c             | ' On exit:
29e60 39c             | '   USB baud rate set to low-speed
29e60 39c             | '------------------------------------------------------------------------------
29e60 39c             | utx_pre
29e60 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
29e64 39d 40 46 62 FD |                 dirl    dp
29e68 39e 28 02 64 FD |                 setq    #1
29e6c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
29e70 3a0 58 44 62 FD |                 drvl    dm
29e74 3a1 59 46 62 FD |                 drvh    dp
29e78 3a2             | 
29e78 3a2 1E 00 00 FF 
29e7c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
29e80 3a4             | 
29e80 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
29e84 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
29e88 3a6 28 02 64 3D |         if_nc   setq    #1
29e8c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
29e90 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
29e94 3a9             | .l1
29e94 3a9             | 
29e94 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
29e98 3aa 40 46 62 FD |                 dirl    dp
29e9c 3ab 28 02 64 FD |                 setq    #1
29ea0 3ac 80 00 80 FF 
29ea4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
29ea8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
29eac 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
29eb0 3b0 41 46 62 FD |                 dirh    dp
29eb4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
29eb8 3b2             | 
29eb8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
29ebc 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
29ec0 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
29ec4 3b5             | 
29ec4 3b5             | hlut_end
29ec4 3b5             |                 fit     $400
29ec4 3b5             |                 orgh
29ec4                 | if OVERLAP_MEMORY
29ec4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
29ec4                 | end
29ec4                 | '------------------------------------------------------------------------------
29ec4                 | ' Routines called from cog space.
29ec4                 | '------------------------------------------------------------------------------
29ec4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
29ec4                 | '------------------------------------------------------------------------------
29ec4                 | 
29ec4                 | '------------------------------------------------------------------------------
29ec4                 | ' USB host cog initialization.
29ec4                 | '------------------------------------------------------------------------------
29ec4                 | usb_host_init
29ec4                 |                 ' Initialize buffer pointers
29ec4                 |         if OVERLAP_MEMORY
29ec4                 |         else
29ec4     40 15 B0 FE |                 loc     pb, #hid_descr
29ec8                 |         end
29ec8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
29ecc                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
29ecc                 |                 {
29ecc                 |                 }
29ecc                 |         
29ecc                 |                 {
29ecc                 |                 }
29ecc                 |                 'loc     pb,#hkbd_report
29ecc                 |                 'mov     hkbd_report_p,pb
29ecc                 | 
29ecc     08 1D B0 FE |                 loc     pb, #hub_descr
29ed0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
29ed4     1D 1D B0 FE |                 loc     pb, #urx_buff
29ed8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
29edc     95 1D B0 FE |                 loc     pb, #dev_desc_buff
29ee0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
29ee4     9F 1D B0 FE |                 loc     pb, #con_desc_buff
29ee8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
29eec     18 15 B0 FE |                 loc     pb, #usb_cache_start
29ef0     F7 55 02 F6 |                 mov     cache_start_p, pb
29ef4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
29ef8     F7 57 02 F6 |                 mov     cache_end_p, pb
29efc                 | 
29efc                 |         if ERROR_LED >= 0
29efc                 |         end
29efc                 | 
29efc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
29efc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
29efc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
29efc                 | ' Configure and enable the Serial Host USB port.
29efc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
29f00                 | 
29f00                 | '------------------------------------------------------------------------------
29f00                 | ' Timing calculations happen before any interrupt(s) are enabled.
29f00                 | '------------------------------------------------------------------------------
29f00                 | ' On entry:
29f00                 | '   htmp - current CLKFREQ value.
29f00                 | '------------------------------------------------------------------------------
29f00                 | hinit_usb_timings
29f00                 | '                getct   htmp2
29f00     B8 59 02 F6 |                 mov     save_sysclk, htmp
29f04     8D 5B 80 FF 
29f08     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
29f0c     18 30 63 FD |                 getqx   _12Mbps_
29f10     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
29f14     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
29f18     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
29f1c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
29f20     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
29f24     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
29f28     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
29f2c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
29f30     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
29f34     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
29f38     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
29f3c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
29f40     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
29f44     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
29f48     80 00 00 FF 
29f4c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
29f50     18 2C 63 FD |                 getqx   _var_64_lower_
29f54     19 2E 63 FD |                 getqy   _var_64_upper_
29f58     28 2C 63 FD |                 setq    _var_64_lower_
29f5c     65 CD 1D FF 
29f60     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
29f64     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
29f68     01 00 00 FF 
29f6c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
29f70     18 2C 63 FD |                 getqx   _var_64_lower_
29f74     19 2E 63 FD |                 getqy   _var_64_upper_
29f78     28 2C 63 FD |                 setq    _var_64_lower_
29f7c     A1 07 00 FF 
29f80     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
29f84     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
29f88     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
29f8c     09 36 57 F0 |                 shr     _1us_, #9               wc
29f90     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
29f94     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
29f98     18 38 63 FD |                 getqx   _10us_
29f9c     09 38 57 F0 |                 shr     _10us_, #9              wc
29fa0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
29fa4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
29fa8     18 3A 63 FD |                 getqx   _33us_
29fac     09 3A 57 F0 |                 shr     _33us_, #9              wc
29fb0     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
29fb4     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
29fb8     18 3C 63 FD |                 getqx   _txn_err_
29fbc     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
29fc0     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
29fc4     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
29fc8     18 3E 63 FD |                 getqx   _500us_
29fcc     09 3E 57 F0 |                 shr     _500us_, #9             wc
29fd0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
29fd4     01 00 00 FF 
29fd8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
29fdc     18 40 63 FD |                 getqx   _txn_ok_ls_
29fe0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
29fe4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
29fe8     01 00 00 FF 
29fec     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
29ff0     18 42 63 FD |                 getqx   _txn_ok_fs_
29ff4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
29ff8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
29ffc     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2a000     05 00 00 FF 
2a004     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2a008     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2a00c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2a010     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2a014     1C 00 00 FF 
2a018     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2a01c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2a020     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2a024     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2a028     00 00 00 FF 
2a02c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2a030     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2a034     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2a038     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2a03c     04 00 00 FF 
2a040     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2a044     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2a048     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2a04c     8D 5B 00 FF 
2a050     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2a054     18 4C 63 FD |                 getqx   _preamble_wait_
2a058     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2a05c     01 00 00 FF 
2a060     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2a064     18 2C 63 FD |                 getqx   _var_64_lower_
2a068     19 2E 63 FD |                 getqy   _var_64_upper_
2a06c     28 2C 63 FD |                 setq    _var_64_lower_
2a070     01 00 00 FF 
2a074     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2a078     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2a07c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2a080     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2a084     FF FF 7F FF 
2a088     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2a08c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2a090     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2a094     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2a098     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2a09c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2a0a0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2a0a4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2a0a8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2a0ac     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2a0b0     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2a0b4     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2a0b8     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2a0bc     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2a0c0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2a0c4     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2a0c8     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2a0cc     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2a0d0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2a0d4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2a0d8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2a0dc     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2a0e0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2a0e4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2a0e8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2a0ec     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2a0f0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2a0f4                 | '        _ret_   mov     _1sec_, save_sysclk
2a0f4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2a0f4                 | '                ret
2a0f4                 | {
2a0f4                 | }
2a0f4                 | 
2a0f4                 | '------------------------------------------------------------------------------
2a0f4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2a0f4                 | ' one. If it is, start the task progression that will configure the device for
2a0f4                 | ' use.
2a0f4                 | '------------------------------------------------------------------------------
2a0f4                 | ' On entry:
2a0f4                 | '   hconfig_base - start address of the cached config descriptor chain.
2a0f4                 | ' On exit:
2a0f4                 | '------------------------------------------------------------------------------
2a0f4                 | hparse_con_desc
2a0f4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2a0f8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2a0fc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2a100     4E 70 FF F9 |                 movbyts htmp,#%%1032
2a104     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2a108                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2a108                 | 
2a108     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2a10c     6E ED 03 F1 |                 add     pa, hconfig_base
2a110     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2a114                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2a114                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2a114                 | ' that defines a keyboard and/or mouse.
2a114     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2a118                 | .next_intf
2a118     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2a11c     BC 01 90 3D |         if_ae   jmp     #hset_config
2a120     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2a124     75 F3 03 F1 |                 add     ptrb, hnext_desc
2a128     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2a12c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2a130     0C 00 90 AD |         if_z    jmp     #.intf
2a134     80 71 C7 FA |                 rdbyte  htmp, ptrb
2a138     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2a13c     D8 FF 9F FD |                 jmp     #.next_intf
2a140                 | .intf
2a140     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2a144     00 90 07 F6 |                 mov     hpar3, #0
2a148     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2a14c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2a150     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2a154     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2a158                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2a158                 | 
2a158                 | .endp
2a158     80 71 C7 FA |                 rdbyte  htmp, ptrb
2a15c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2a160     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2a164     78 00 90 3D |         if_ae   jmp     #.get_device
2a168     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2a16c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2a170     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2a174     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2a178     64 00 90 AD |         if_z    jmp     #.get_device
2a17c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2a180     04 00 90 AD |         if_z    jmp     #.get_ep
2a184     D0 FF 9F FD |                 jmp     #.endp
2a188                 | .get_ep
2a188     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2a18c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2a190     0F 86 67 F0 |                 shl     hr1, #8 + 7
2a194     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2a198     3F 00 00 FF 
2a19c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2a1a0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2a1a4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2a1a8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2a1ac     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a1b0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2a1b4     A0 FF 9F FD |                 jmp     #.endp
2a1b8                 | .in_ep
2a1b8     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2a1bc     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2a1c0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2a1c0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2a1c4     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2a1c8     8C FF 9F FD |                 jmp     #.endp
2a1cc                 | .out_ep
2a1cc     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2a1d0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2a1d4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2a1d4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2a1d8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2a1dc     78 FF 9F FD |                 jmp     #.endp
2a1e0                 | 
2a1e0                 | .get_device
2a1e0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2a1e4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2a1e8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2a1ec     68 00 90 AD |         if_z    jmp     #.gamepad
2a1f0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2a1f4     AC 00 90 AD |         if_z    jmp     #.hub
2a1f8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2a1fc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2a200     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2a204     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2a208     4C 00 90 AD |         if_z    jmp     #.gamepad
2a20c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2a210     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2a214                 | .keyboard
2a214     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2a218                 |         if HAVE_MOUSE
2a218     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2a21c                 |         else
2a21c                 |         end
2a21c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2a220     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2a224     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a228     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2a22c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2a230     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2a234                 |                 'debug(udec(kb_intf_num))
2a234                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2a234     E0 FE 9F FD |                 jmp     #.next_intf
2a238                 | if HAVE_MOUSE
2a238                 | .mouse
2a238     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2a23c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2a240     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2a244     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2a248     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a24c                 |                 'getbyte ms_interval, hr2, #3
2a24c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2a250     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2a254                 |                 'debug(udec(kb_intf_num))
2a254                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2a254     C0 FE 9F FD |                 jmp     #.next_intf
2a258                 | end
2a258                 | .gamepad
2a258     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2a25c     C7 71 63 F5 |                 xor     htmp, hpar2
2a260     3F 00 00 FF 
2a264     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a268     AC FE 9F AD |         if_z    jmp     #.next_intf
2a26c                 |         if HAVE_MOUSE
2a26c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2a270     C7 71 63 F5 |                 xor     htmp, hpar2
2a274     3F 00 00 FF 
2a278     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a27c     98 FE 9F AD |         if_z    jmp     #.next_intf
2a280                 |         end
2a280     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2a284     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2a288     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2a28c                 | 
2a28c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a290     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2a294     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a298     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2a29c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2a2a0                 |                 'debug(udec(gp_intf_num))
2a2a0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2a2a0     74 FE 9F FD |                 jmp     #.next_intf
2a2a4                 | .hub
2a2a4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2a2a8     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2a2ac     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2a2b0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2a2b4     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2a2b8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2a2bc     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2a2c0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2a2c4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2a2c8     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2a2cc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a2d0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2a2d4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2a2d8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2a2d8     3C FE 9F FD |                 jmp     #.next_intf
2a2dc                 | 
2a2dc                 | '------------------------------------------------------------------------------
2a2dc                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2a2dc                 | ' it according to its function, or functions. In the case of this boot protocol
2a2dc                 | ' keyboard/mouse class driver:
2a2dc                 | ' - SetConfiguration(config_num)
2a2dc                 | ' - SetProtocol(boot)
2a2dc                 | ' - SetIdle(indefinite)
2a2dc                 | ' - Enter the device interrupt IN polling task stage.
2a2dc                 | '------------------------------------------------------------------------------
2a2dc                 | ' On entry:
2a2dc                 | ' On exit:
2a2dc                 | '------------------------------------------------------------------------------
2a2dc                 | hset_config
2a2dc                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2a2dc                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2a2dc     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2a2e0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a2e4     00 00 0C F2 |                 cmp     0-0, #0                 wz
2a2e8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2a2ec                 |         if HAVE_MOUSE
2a2ec     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2a2f0                 |         end
2a2f0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2a2f4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2a2f8                 | .set_config
2a2f8     6C 0E D0 FE |                 loc     ptra, #set_config
2a2fc     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2a300     6E ED 03 F1 |                 add     pa, hconfig_base
2a304     F6 8D C3 FA |                 rdbyte  hpar1, pa
2a308     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2a30c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2a310     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2a314     A0 02 A0 FD |                 call    #control_write
2a318     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a31c     2D 00 64 5D |         if_nz   ret
2a320                 | .kbd_config
2a320     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2a324     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2a328                 | 
2a328     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2a32c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a330     3F 00 00 FF 
2a334     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a338     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2a33c                 | 
2a33c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2a340     34 0E D0 FE |                 loc     ptra, #set_protocol
2a344     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2a348     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a34c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2a350     A0 02 A0 FD |                 call    #control_write
2a354     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a358     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2a35c     E4 02 90 5D |         if_nz   jmp     #.notify_client
2a360     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2a364     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2a368     30 03 B0 FD |                 call    #hset_idle
2a36c                 |                 'cmp     retval, #PID_ACK        wz
2a36c                 |         'if_nz   mov     hkbd_ep_addr, #0
2a36c                 |         'if_nz   jmp     #.notify_client
2a36c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2a370     EF 02 A0 FD |                 call    #poll_waitx
2a374     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2a378     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2a37c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2a380     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2a384     2C 03 B0 FD |                 call    #hset_kbdled_report
2a388     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a38c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2a390     B0 02 90 5D |         if_nz   jmp     #.notify_client
2a394     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2a398     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a39c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a3a0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2a3a4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2a3a8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2a3ac     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2a3b0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2a3b4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2a3b8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2a3bc     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2a3c0                 |         if !!HAVE_MOUSE
2a3c0                 |         end
2a3c0                 | 
2a3c0                 | .mouse_config
2a3c0                 | if HAVE_MOUSE
2a3c0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2a3c4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2a3c8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2a3cc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a3d0     3F 00 00 FF 
2a3d4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a3d8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2a3dc                 | 
2a3dc                 |                 debug("mouse passed addr check")
2a3dc                 | 
2a3dc     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2a3e0     00 00 80 FF 
2a3e4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2a3e8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2a3ec     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a3f0     55 02 A0 FD |                 call    #control_read
2a3f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a3f8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2a3fc     44 02 90 5D |         if_nz   jmp     #.notify_client
2a400     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2a404     56 01 00 F6 |                 mov     0-0, total_data
2a408     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a40c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2a40c                 | 
2a40c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2a410     64 0D D0 FE |                 loc     ptra, #set_protocol
2a414     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2a418     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a41c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2a420     A0 02 A0 FD |                 call    #control_write
2a424     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a428     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2a42c     14 02 90 5D |         if_nz   jmp     #.notify_client
2a430                 |                 debug("mouse passed SetProtocol")
2a430     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2a434     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2a438     60 02 B0 FD |                 call    #hset_idle
2a43c                 |                 'cmp     retval, #PID_ACK        wz
2a43c                 |         'if_nz   mov     hmouse_ep_addr, #0
2a43c                 |         'if_nz   jmp     #.notify_client
2a43c                 |                 debug("mouse passed SetIdle")
2a43c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2a440     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a444     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a448     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2a44c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2a450     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2a454     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2a458     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2a45c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2a460     3F 00 00 FF 
2a464     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2a468     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2a46c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2a470     D0 01 90 FD |                 jmp     #.notify_client
2a474                 | end
2a474                 | .gamepad_config
2a474                 | if _HAVE_GAMEPAD
2a474     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a478     00 00 0C F2 |                 cmp     0-0, #0                 wz
2a47c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2a480     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2a484     00 70 03 F6 |                 mov     htmp, 0-0
2a488     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a48c     3F 00 00 FF 
2a490     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a494     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2a498                 | 
2a498     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2a49c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2a4a0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a4a4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a4a8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2a4ac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a4b0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2a4b4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2a4b8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2a4bc     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a4c0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a4c4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2a4c8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2a4cc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2a4d0                 | 
2a4d0                 |                 if EMUPAD_MAX_PLAYER > 0
2a4d0                 |                 
2a4d0                 | .rule_loop           
2a4d0                 |                 end
2a4d0                 | 
2a4d0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2a4d4     5C 00 90 AD |         if_e    jmp     #.xinput
2a4d8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2a4dc     00 70 03 F6 |                 mov     htmp,0-0
2a4e0     01 A6 02 FF 
2a4e4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2a4e8     7C 00 90 AD |         if_e    jmp     #.ps3
2a4ec                 | 
2a4ec     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2a4f0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2a4f4     00 00 80 5F 
2a4f8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2a4fc     03 00 80 AF 
2a500     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2a504     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2a508     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a50c     55 02 A0 FD |                 call    #control_read
2a510     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a514     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2a518     00 00 04 56 |         if_nz   mov     0-0, #0
2a51c     24 01 90 5D |         if_nz   jmp     #.notify_client
2a520     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2a524     56 01 00 F6 |                 mov     0-0, total_data
2a528     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a52c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2a52c                 | 
2a52c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2a530     10 01 90 FD |                 jmp     #.notify_client
2a534                 | .xinput
2a534     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2a538     2D EF 03 F6 |                 mov     pb,hdev_port
2a53c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2a540     03 EE 27 F3 |                 fle     pb,#3
2a544     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2a548     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2a54c                 | 
2a54c     03 B0 06 F6 |                 mov     pkt_data, #3
2a550     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2a554     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2a558     5A 00 A0 FD |                 call    #txn_out
2a55c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2a560                 | 
2a560     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2a564     DC 00 90 FD |                 jmp     #.notify_client
2a568                 | .ps3
2a568     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2a56c     2D EF 03 F6 |                 mov     pb,hdev_port
2a570     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2a574     04 EE 27 F3 |                 fle     pb,#4
2a578     F7 EF C3 F9 |                 decod   pb
2a57c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2a580                 | 
2a580     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2a584     00 0C D0 FE |                 loc     ptra, #set_report
2a588     01 00 80 FF 
2a58c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2a590     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a594     03 61 5C FC |                 wrword  #48, ptra[wLength]
2a598     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2a59c     A0 02 A0 FD |                 call    #control_write
2a5a0                 | 
2a5a0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2a5a4     E0 0B D0 FE |                 loc     ptra, #set_report
2a5a8     01 00 80 FF 
2a5ac     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2a5b0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a5b4     03 09 5C FC |                 wrword  #4, ptra[wLength]
2a5b8     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2a5bc     A0 02 A0 FD |                 call    #control_write
2a5c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2a5c4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2a5c8     00 00 04 56 |         if_nz   mov     0-0, #0
2a5cc     74 00 90 5D |         if_nz   jmp     #.notify_client
2a5d0                 | 
2a5d0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2a5d4     6C 00 90 FD |                 jmp     #.notify_client
2a5d8                 | end
2a5d8                 | 
2a5d8                 | .hub_config
2a5d8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2a5dc     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2a5e0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2a5e4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a5e8     3F 00 00 FF 
2a5ec     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a5f0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2a5f4                 | 
2a5f4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2a5f8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2a5fc     26 EF 03 F6 |                 mov     pb, hub_descr_p
2a600     55 02 A0 FD |                 call    #control_read
2a604     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a608     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2a60c     34 00 90 5D |         if_nz   jmp     #.notify_client
2a610                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2a610                 | 
2a610     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2a614     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2a618     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2a61c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2a61c                 | .pwr_loop
2a61c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2a620     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2a624     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2a628     A0 02 A0 FD |                 call    #control_write
2a62c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2a630                 | 
2a630     B1 99 02 F6 |                 mov     hctwait, _500ms_
2a634     B0 99 02 F1 |                 add     hctwait, _100ms_
2a638     EF 02 A0 FD |                 call    #poll_waitx
2a63c                 | 
2a63c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2a640     00 00 90 FD |                 jmp     #.notify_client
2a644                 | 
2a644                 | .notify_client
2a644     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2a648     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2a64c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2a64c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2a64c     2D 00 64 FD |                 ret
2a650                 | 
2a650                 | '------------------------------------------------------------------------------
2a650                 | ' Initialize the keyboard/mouse data area to start-up values.
2a650                 | '------------------------------------------------------------------------------
2a650                 | ' On entry:
2a650                 | ' On exit:
2a650                 | '------------------------------------------------------------------------------
2a650                 | init_kbdm_data
2a650     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2a654     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2a658                 | 
2a658     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2a65c     2B ED 03 F6 |                 mov     pa, cache_end_p
2a660                 | .loop
2a660     61 01 4C FC |                 wrbyte  #0, ptra++
2a664     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2a668     F4 FF 9F CD |         if_b    jmp     #.loop
2a66c                 |         
2a66c                 |         if EMUPAD_MAX_PLAYER > 0
2a66c                 |         end
2a66c                 | 
2a66c                 | 
2a66c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2a670                 | .regloop
2a670     00 EC 8F F9 |                 altd    pa
2a674     00 00 04 F6 |                 mov     0-0, #0
2a678     01 EC 07 F1 |                 add     pa, #1
2a67c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2a680     EC FF 9F 5D |         if_nz   jmp     #.regloop
2a684                 | 
2a684     E1 E1 61 FF 
2a688     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2a68c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2a690     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2a694     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2a698                 | 
2a698     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2a69c                 | 
2a69c                 | '------------------------------------------------------------------------------
2a69c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2a69c                 | ' function.
2a69c                 | '------------------------------------------------------------------------------
2a69c                 | ' On entry:
2a69c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2a69c                 | '   hpar2 - index number of the target interface.
2a69c                 | ' On exit:
2a69c                 | '------------------------------------------------------------------------------
2a69c                 | hset_idle
2a69c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2a6a0     EF 02 A0 FD |                 call    #poll_waitx
2a6a4     D8 0A D0 FE |                 loc     ptra, #set_idle
2a6a8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2a6ac     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2a6b0     A0 02 80 FD |                 jmp     #control_write
2a6b4                 | 
2a6b4                 | '------------------------------------------------------------------------------
2a6b4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2a6b4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2a6b4                 | '------------------------------------------------------------------------------
2a6b4                 | ' On entry:
2a6b4                 | '   ep_addr_pid - device address and enpoint for the request.
2a6b4                 | ' On exit:
2a6b4                 | '   retval - transaction result.
2a6b4                 | '------------------------------------------------------------------------------
2a6b4                 | hset_kbdled_report
2a6b4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2a6b8     CC 0A D0 FE |                 loc     ptra, #set_report
2a6bc     01 00 80 FF 
2a6c0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2a6c4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a6c8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2a6cc     27 EF 03 F6 |                 mov     pb, urx_buff_p
2a6d0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2a6d4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2a6d8                 | 
2a6d8                 | '------------------------------------------------------------------------------
2a6d8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2a6d8                 | '------------------------------------------------------------------------------
2a6d8                 | ' On entry:
2a6d8                 | ' On exit:
2a6d8                 | '------------------------------------------------------------------------------
2a6d8                 | hget_kbd_in_report
2a6d8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2a6dc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2a6e0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2a6e4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2a6e8     CF 02 A0 FD |                 call    #do_int_in
2a6ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a6f0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2a6f4                 | 
2a6f4     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a6f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2a6fc                 | 
2a6fc     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2a700     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2a704     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2a708     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2a70c                 | 
2a70c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2a710     18 00 B0 FD |                 call    #hkbd_compare
2a714                 |         if EMUPAD_MAX_PLAYER > 0
2a714                 |         end
2a714                 | 
2a714                 | .led_check
2a714     3B 71 03 F6 |                 mov     htmp, kb_led_states
2a718     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2a71c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2a720     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2a724     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2a728     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2a72c                 | 
2a72c                 | '------------------------------------------------------------------------------
2a72c                 | ' Compare current and previous keyboard data buffers for keypress changes.
2a72c                 | '------------------------------------------------------------------------------
2a72c                 | hkbd_compare
2a72c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2a730     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2a734     61 73 07 FB |                 rdlong  htmp1, ptra++
2a738     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2a73c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2a740     61 73 07 FB |                 rdlong  htmp1, ptra++
2a744     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2a748     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2a74c     2D 00 64 AD |         if_z    ret
2a750                 | 
2a750     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2a754                 | 
2a754                 |                 ' Handle modifiers
2a754     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2a758     00 87 C7 FA |                 rdbyte  hr1, ptra
2a75c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2a760     63 86 63 FD |                 mergew  hr1
2a764     08 EC 07 F6 |                 mov     pa,#8
2a768                 | .modloop
2a768     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2a76c     E8 8C 07 F6 |                 mov     hpar1,#$E8
2a770     F6 8D 83 F1 |                 sub     hpar1,pa
2a774     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2a778     FB ED 6F FB |                 djnz    pa,#.modloop
2a77c                 | 
2a77c     6F E0 75 FD | .release        modc    _set    wc
2a780                 |                 'alts    hdev_port, #hid_report_p
2a780                 |                 'mov     ptra, hid_report_p
2a780     02 F0 07 F1 |                 add     ptra, #2
2a784     06 EC 07 F6 |                 mov     pa, #6
2a788     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2a78c     20 00 90 AD |         if_z    jmp     #.rl3
2a790     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2a794     02 F2 07 F1 |                 add     ptrb, #2
2a798     06 EE 07 F6 |                 mov     pb, #6
2a79c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2a7a0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2a7a4     08 00 90 AD |         if_z    jmp     #.rl3
2a7a8     FC EF 6F FB |                 djnz    pb, #.rl2
2a7ac     68 00 B0 FD |                 call    #hkbd_translate
2a7b0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2a7b4                 | 
2a7b4     00 90 07 F6 |                 mov     hpar3, #0
2a7b8     1F 90 27 F4 |                 bith    hpar3, #31
2a7bc                 | 
2a7bc     6F 00 74 FD | .press          modc    _clr    wc
2a7c0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2a7c4     02 F0 07 F1 |                 add     ptra, #2
2a7c8     06 EC 07 F6 |                 mov     pa, #6
2a7cc     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2a7d0     20 00 90 AD |         if_z    jmp     #.pl3
2a7d4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2a7d8     02 F2 07 F1 |                 add     ptrb, #2
2a7dc     06 EE 07 F6 |                 mov     pb, #6
2a7e0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2a7e4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2a7e8     08 00 90 AD |         if_z    jmp     #.pl3
2a7ec     FC EF 6F FB |                 djnz    pb, #.pl2
2a7f0     24 00 B0 FD |                 call    #hkbd_translate
2a7f4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2a7f8                 | 
2a7f8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2a7fc     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2a800     28 02 64 FD |                 setq #1
2a804     61 73 07 FB |                 rdlong  htmp1, ptra++
2a808     28 02 64 FD |                 setq #1
2a80c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2a810     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2a814                 | 
2a814     2D 00 64 FD |                 ret
2a818                 | 
2a818                 | '------------------------------------------------------------------------------
2a818                 | ' Translate keyboard scancode to ASCII
2a818                 | '------------------------------------------------------------------------------
2a818                 | ' On entry:
2a818                 | '   hpar1 - scancode
2a818                 | '   hpar2 - key modifiers state
2a818                 | '       c - pressed (0) or released (1) flag
2a818                 | ' On exit:
2a818                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2a818                 | '               30..17 = unused
2a818                 | '                   18 = scroll-lock state 
2a818                 | '                   17 = caps-lock state
2a818                 | '                   16 = num-lock state 
2a818                 | '                15..8 = key modifiers state
2a818                 | '                 7..0 = scancode
2a818                 | '------------------------------------------------------------------------------
2a818                 | hkbd_translate
2a818     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2a81c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2a820     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2a824     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2a828     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2a82c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2a830                 | 
2a830                 |         if EMUPAD_MAX_PLAYER > 0
2a830                 | 
2a830                 |         if EMUPAD_BT0_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT1_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT2_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT3_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT4_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT5_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT6_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT7_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT8_BIT >= 0
2a830                 |         end
2a830                 |         if EMUPAD_BT9_BIT >= 0
2a830                 |         end
2a830                 | 
2a830                 |         end
2a830     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2a834     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2a838     1F 8C 47 F4 |                 bitc    hpar1, #31
2a83c                 |         if KEYQUEUE_SIZE > 0
2a83c     C4 09 B0 FE |                 loc pb,#keyq_head
2a840     F7 71 E3 FA |                 rdword htmp,pb
2a844     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2a848     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2a84c     B8 75 03 F6 |                 mov htmp2,htmp
2a850     04 74 07 FA |                 mul htmp2,#4
2a854     F7 75 03 F1 |                 add htmp2,pb
2a858     02 74 07 F1 |                 add htmp2,#2
2a85c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2a860     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2a864     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2a868     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2a86c                 |         end
2a86c     2D 00 7C FD |                 ret wcz
2a870                 | 
2a870                 | if HAVE_MOUSE
2a870                 | '------------------------------------------------------------------------------
2a870                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2a870                 | '------------------------------------------------------------------------------
2a870                 | ' On entry:
2a870                 | ' On exit:
2a870                 | '------------------------------------------------------------------------------
2a870                 | hget_mouse_in_report
2a870     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2a874     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2a878     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2a87c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2a880     CF 02 A0 FD |                 call    #do_int_in
2a884     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a888     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2a88c                 | 
2a88c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a890     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2a894                 | 
2a894     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2a898     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2a89c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2a8a0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2a8a4                 | 
2a8a4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2a8a8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2a8ac     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2a8b0     01 90 87 31 |         if_ae   sub     hpar3, #1
2a8b4                 | 
2a8b4     40 09 90 FE |                 loc     pa, #mouse_limits
2a8b8     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2a8bc                 | 
2a8bc                 |                 ' load xacc,yacc,zacc
2a8bc     28 04 64 FD |                 setq    #3-1
2a8c0     80 87 07 FB |                 rdlong  hr1,ptrb
2a8c4                 |                 ' load limits and outptr
2a8c4     28 04 64 FD |                 setq    #3-1
2a8c8     F6 73 03 FB |                 rdlong  htmp1,pa
2a8cc                 | 
2a8cc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2a8d0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2a8d4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2a8d8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2a8dc     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2a8e0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2a8e4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2a8e8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2a8ec                 |               
2a8ec                 | 
2a8ec     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2a8f0     07 70 67 F7 |                 signx   htmp, #7
2a8f4     B8 87 03 F1 |                 add     hr1,htmp
2a8f8     00 72 0F F2 |                 cmp     htmp1,#0 wz
2a8fc     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2a900     00 86 47 53 |         if_ne   fges    hr1,#0
2a904                 | 
2a904     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2a908     07 70 67 F7 |                 signx   htmp, #7
2a90c     B8 89 03 F1 |                 add     hr2,htmp
2a910     00 74 0F F2 |                 cmp     htmp2,#0 wz
2a914     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2a918     00 88 47 53 |         if_ne   fges    hr2,#0
2a91c                 |                 
2a91c                 | 
2a91c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2a920     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2a924     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2a928     B8 8B 03 A1 |         if_z    add     hr3,htmp
2a92c                 | 
2a92c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2a930     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2a934                 | 
2a934                 |                 ' write back accumulators
2a934     28 04 64 FD |                 setq    #3-1
2a938     80 87 67 FC |                 wrlong  hr1,ptrb
2a93c                 |                 ' if outptr set, write X/Y words
2a93c     00 76 0F F2 |                 cmp htmp3,#0                    wz
2a940     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2a944     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2a948     2D 00 64 FD |                 ret
2a94c                 | end
2a94c                 | 
2a94c                 | '------------------------------------------------------------------------------
2a94c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2a94c                 | '------------------------------------------------------------------------------
2a94c                 | ' On entry:
2a94c                 | ' On exit:
2a94c                 | '------------------------------------------------------------------------------
2a94c                 | if _HAVE_GAMEPAD
2a94c                 | hget_gp_in_report
2a94c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2a950     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2a954                 | 
2a954     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2a958     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2a95c     00 90 E3 F8 |                 getbyte hpar3
2a960     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2a964     CF 02 A0 FD |                 call    #do_int_in
2a968     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a96c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2a970                 | 
2a970     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a974     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2a978                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2a978                 | 
2a978     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2a97c     00 70 E3 F8 |                 getbyte htmp                            ' |
2a980     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2a984     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2a988     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2a98c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2a990     B8 01 C0 F8 |                 setbyte htmp                            ' |
2a994                 | 
2a994                 | ' Note: the following code compares the current and previous reports
2a994                 | ' and process the data if there are changes to ease the debug output.
2a994                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2a994                 | ' gpPreReport buffer.
2a994                 | 
2a994                 |                 ' ----- start of block to remove
2a994                 |                 {
2a994                 |                 }
2a994                 |                 ' ----- end of block to remove
2a994     F4 04 90 FE |                 loc pa,#hpad_translate
2a998     2A EC 63 FD |                 push pa
2a99c                 | 
2a99c                 |                 ' FALL THROUGH !!!!
2a99c                 | 
2a99c                 | '------------------------------------------------------------------------------
2a99c                 | ' Decode controller report
2a99c                 | '------------------------------------------------------------------------------
2a99c                 | hid_decode
2a99c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2a99c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2a9a0     00 04 00 FF 
2a9a4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2a9a8                 | 
2a9a8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2a9ac                 | 
2a9ac     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2a9b0     00 2A E3 F8 |                 getbyte hidr_type
2a9b4     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2a9b8     34 02 90 AD |         if_z    jmp     #hpad_xinput
2a9bc     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2a9c0     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2a9c4     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2a9c8     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2a9cc     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2a9d0                 |                 
2a9d0                 | 
2a9d0                 | '------------------------------------------------------------------------------
2a9d0                 | ' Handle HID controller (or mouse now
2a9d0                 | ' On entry:
2a9d0                 | '   ptrb - controller report
2a9d0                 | '------------------------------------------------------------------------------
2a9d0                 | hpad_hid
2a9d0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a9d4     F7 F1 03 F6 |                 mov     ptra, pb
2a9d8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2a9dc     00 EC 03 F6 |                 mov     pa, 0-0
2a9e0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2a9e0     19 2A 3B FF 
2a9e4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2a9e8                 | 
2a9e8                 | .next
2a9e8     00 EC 5F F2 |                 cmps    pa, #0      wcz
2a9ec     2D 00 7C ED |         if_be   ret     wcz
2a9f0                 | 
2a9f0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2a9f4     01 EC 87 F1 |                 sub     pa, #1
2a9f8     00 8E 07 F6 |                 mov     hpar2, #0
2a9fc                 | 
2a9fc     C6 71 03 F6 |                 mov     htmp, hpar1
2aa00     03 70 07 F5 |                 and     htmp, #$03
2aa04     01 70 0F F2 |                 cmp     htmp, #1    wz
2aa08     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2aa0c     07 8E 67 A7 |         if_z    signx   hpar2,#7
2aa10     01 EC 87 A1 |         if_z    sub     pa, #1
2aa14     02 70 0F F2 |                 cmp     htmp, #2    wz
2aa18     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2aa1c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2aa20     02 EC 87 A1 |         if_z    sub     pa, #2
2aa24     03 70 0F F2 |                 cmp     htmp, #3    wz
2aa28     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2aa2c     04 EC 87 A1 |         if_z    sub     pa, #4
2aa30                 | 
2aa30     FC 8C 07 F5 |                 and     hpar1, #$FC
2aa34                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2aa34                 | 
2aa34     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2aa38     0C 01 90 AD |         if_z    jmp     #.report_id
2aa3c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2aa40     24 01 90 AD |         if_z    jmp     #.usage_page
2aa44     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2aa48     2C 01 90 AD |         if_z    jmp     #.usage
2aa4c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2aa50     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2aa54     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2aa58     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2aa5c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2aa60     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2aa64     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2aa68     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2aa6c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2aa70     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2aa74     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2aa78     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2aa7c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2aa80     64 FF 9F 5D |         if_nz   jmp     #.next
2aa84                 | 
2aa84     D8 1D A7 FB |                 tjf     hidr_state,#.next
2aa88                 | 
2aa88     03 8E 07 F5 |                 and     hpar2, #$03
2aa8c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2aa90     18 00 90 5D |         if_nz   jmp     #.skip
2aa94                 | 
2aa94     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2aa98     20 00 90 AD |         if_z    jmp     #.axes
2aa9c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2aaa0     5C 00 90 AD |         if_z    jmp     #.hats
2aaa4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2aaa8     70 00 90 AD |         if_z    jmp     #.buttons
2aaac                 | .skip
2aaac     8F 71 03 F6 |                 mov     htmp, hidr_size
2aab0     90 71 03 FA |                 mul     htmp, hidr_count
2aab4     B8 23 03 F1 |                 add     hidr_offset, htmp
2aab8     2C FF 9F FD |                 jmp     #.next
2aabc                 | .axes
2aabc                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2aabc     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2aac0     90 87 03 F6 |                 mov     hr1, hidr_count
2aac4                 | .l1
2aac4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2aac8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2aacc     04 03 B0 FD |                 call    #hpad_getbits
2aad0     64 03 B0 FD |                 call    #hpad_normalize
2aad4     06 84 1F F2 |                 cmp     hr0, #6         wcz
2aad8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2aadc     00 88 43 C8 |         if_b    getnib  hr2
2aae0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2aae4     5F 01 20 C9 |         if_b    setword retval
2aae8     01 84 07 C1 |         if_b    add     hr0, #1
2aaec     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2aaf0     F4 87 6F FB |                 djnz    hr1, #.l1
2aaf4                 | 
2aaf4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2aaf8     01 1C 07 F6 |                 mov     hidr_state, #1
2aafc     E8 FE 9F FD |                 jmp     #.next
2ab00                 | .hats
2ab00                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2ab00     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ab04     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ab08     C8 02 B0 FD |                 call    #hpad_getbits
2ab0c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2ab10     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ab14     01 1C 07 F6 |                 mov     hidr_state, #1
2ab18     90 FF 9F FD |                 jmp     #.skip
2ab1c                 | .buttons
2ab1c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2ab1c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ab20     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ab24     90 8F 03 FA |                 mul     hpar2, hidr_count
2ab28     A8 02 B0 FD |                 call    #hpad_getbits
2ab2c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2ab30     B8 BF 62 F0 |                 shl     retval, htmp
2ab34     5F 17 43 F5 |                 or      hidr_buttons, retval
2ab38     90 71 03 F1 |                 add     htmp, hidr_count
2ab3c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2ab40     01 1C 07 F6 |                 mov     hidr_state, #1
2ab44     64 FF 9F FD |                 jmp     #.skip
2ab48                 | .report_id
2ab48     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2ab4c     2D 00 7C 5D |         if_nz   ret     wcz
2ab50     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2ab54     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2ab58     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2ab5c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2ab60     01 F2 87 51 |         if_nz   sub     ptrb,#1
2ab64     80 FE 9F FD |                 jmp     #.next
2ab68                 | .usage_page
2ab68     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2ab6c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2ab70     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2ab74     70 FE 9F FD |                 jmp     #.next
2ab78                 | .usage
2ab78     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2ab7c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2ab80     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2ab84     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ab88     5C FE 9F AD |         if_z    jmp     #.next
2ab8c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2ab90     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2ab94     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ab98     4C FE 9F AD |         if_z    jmp     #.next
2ab9c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2aba0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2aba4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2aba8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2abac     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2abb0     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2abb4     10 00 90 AD |         if_z    jmp     #.usage_axis
2abb8     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2abbc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2abc0     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2abc4     20 FE 9F FD |                 jmp     #.next
2abc8                 | .usage_axis
2abc8     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2abcc     18 FE 9F CD |         if_b    jmp     #.next
2abd0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2abd4     C7 01 00 F8 |                 setnib  hpar2
2abd8                 | 
2abd8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2abdc     C7 8F C3 F9 |                 decod   hpar2
2abe0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2abe4                 | 
2abe4     01 24 07 F1 |                 add     hidr_usage_idx, #1
2abe8     02 1C 07 F6 |                 mov     hidr_state, #2
2abec     F8 FD 9F FD |                 jmp     #.next
2abf0                 | 
2abf0                 | '------------------------------------------------------------------------------
2abf0                 | ' Handle XInput controller
2abf0                 | ' On entry:
2abf0                 | '   ptrb - controller report
2abf0                 | '------------------------------------------------------------------------------
2abf0                 | '   Default implementation translates the report to a pseudo-defacto hid
2abf0                 | '   standard and jumps to hpad_translate for actions.
2abf0                 | '   Implementors may take specific actions for this kind of controller.
2abf0                 | '------------------------------------------------------------------------------
2abf0                 | hpad_xinput
2abf0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2abf4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2abf8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2abfc     14 70 0F F2 |                 cmp     htmp, #$14      wz
2ac00     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2ac04                 | 
2ac04                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2ac04                 | 
2ac04     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2ac08     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2ac0c                 | 
2ac0c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2ac10     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2ac14     5F BF 22 F6 |                 not     retval
2ac18     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2ac1c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2ac20     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2ac24     5F BF 22 F6 |                 not     retval
2ac28     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2ac2c                 | 
2ac2c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2ac30     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2ac34     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2ac38     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2ac3c     F8 01 B0 FD |                 call    #hpad_normalize
2ac40     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2ac44     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2ac48     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2ac4c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2ac50     E4 01 B0 FD |                 call    #hpad_normalize
2ac54     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2ac58                 | 
2ac58     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2ac5c     81 BF E6 FA |                 rdword  retval, ptrb[1]
2ac60     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2ac64     00 16 47 F4 |                 bitc    hidr_buttons, #0
2ac68     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2ac6c     01 16 47 F4 |                 bitc    hidr_buttons, #1
2ac70     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2ac74     02 16 47 F4 |                 bitc    hidr_buttons, #2
2ac78     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2ac7c     03 16 47 F4 |                 bitc    hidr_buttons, #3
2ac80     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2ac84     04 16 47 F4 |                 bitc    hidr_buttons, #4
2ac88     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2ac8c     05 16 47 F4 |                 bitc    hidr_buttons, #5
2ac90     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2ac94     08 16 47 F4 |                 bitc    hidr_buttons, #8
2ac98     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2ac9c     09 16 47 F4 |                 bitc    hidr_buttons, #9
2aca0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2aca4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2aca8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2acac     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2acb0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2acb4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2acb8                 | 
2acb8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2acbc     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2acc0     7A BB 7A FF 
2acc4     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2acc8     F9 FF 7F FF 
2accc     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2acd0     B9 71 5F F9 |                 altgn   htmp, #htmp1
2acd4     00 70 43 F8 |                 getnib  htmp
2acd8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2acdc                 | 
2acdc     AC 01 90 FD |                 jmp     #hpad_translate
2ace0                 | 
2ace0                 | '------------------------------------------------------------------------------
2ace0                 | ' Handle PS3 controller
2ace0                 | ' On entry:
2ace0                 | '   ptrb - controller report
2ace0                 | '------------------------------------------------------------------------------
2ace0                 | '   Default implementation translates the report to a pseudo-defacto hid
2ace0                 | '   standard and jumps to hpad_translate for actions.
2ace0                 | '   Implementors may take specific actions for this kind of controller.
2ace0                 | '------------------------------------------------------------------------------
2ace0                 | hpad_ps3
2ace0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2ace4     01 70 0F F2 |                 cmp     htmp, #$01      wz
2ace8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2acec                 | 
2acec                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2acec                 | 
2acec     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2acf0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2acf4     40 01 B0 FD |                 call    #hpad_normalize
2acf8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2acfc     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2ad00     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2ad04     30 01 B0 FD |                 call    #hpad_normalize
2ad08     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2ad0c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2ad10     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2ad14     20 01 B0 FD |                 call    #hpad_normalize
2ad18     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2ad1c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2ad20     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2ad24     10 01 B0 FD |                 call    #hpad_normalize
2ad28     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2ad2c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2ad30     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2ad34                 | 
2ad34     08 8C 07 F6 |                 mov     hpar1, #8
2ad38     13 8E 07 F6 |                 mov     hpar2, #19
2ad3c     94 00 B0 FD |                 call    #hpad_getbits
2ad40                 | 
2ad40     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2ad44     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2ad48     00 16 47 F4 |                 bitc    hidr_buttons, #0
2ad4c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2ad50     01 16 47 F4 |                 bitc    hidr_buttons, #1
2ad54     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2ad58     02 16 47 F4 |                 bitc    hidr_buttons, #2
2ad5c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2ad60     03 16 47 F4 |                 bitc    hidr_buttons, #3
2ad64     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2ad68     04 16 47 F4 |                 bitc    hidr_buttons, #4
2ad6c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2ad70     05 16 47 F4 |                 bitc    hidr_buttons, #5
2ad74     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2ad78     06 16 47 F4 |                 bitc    hidr_buttons, #6
2ad7c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2ad80     07 16 47 F4 |                 bitc    hidr_buttons, #7
2ad84     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2ad88     08 16 47 F4 |                 bitc    hidr_buttons, #8
2ad8c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2ad90     09 16 47 F4 |                 bitc    hidr_buttons, #9
2ad94     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2ad98     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2ad9c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2ada0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2ada4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2ada8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2adac                 | 
2adac     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2adb0     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2adb4     09 FA 79 FF 
2adb8     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2adbc     FF FA 7F FF 
2adc0     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2adc4     B9 71 5F F9 |                 altgn   htmp, #htmp1
2adc8     00 70 43 F8 |                 getnib  htmp
2adcc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2add0                 | 
2add0     B8 00 90 FD |                 jmp     #hpad_translate
2add4                 | 
2add4                 | '------------------------------------------------------------------------------
2add4                 | ' Read bits from report data buffer
2add4                 | '------------------------------------------------------------------------------
2add4                 | ' On entry:
2add4                 | '   PTRB - report buffer
2add4                 | '   hpar1 - start bit
2add4                 | '   hpar2 - number of bits
2add4                 | ' On exit:
2add4                 | '   retval - bits
2add4                 | '------------------------------------------------------------------------------
2add4                 | hpad_getbits
2add4     C6 71 03 F6 |                 mov     htmp, hpar1
2add8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2addc     F9 71 03 F1 |                 add     htmp, ptrb
2ade0     B8 BF 02 FB |                 rdlong  retval, htmp
2ade4                 | 
2ade4     C6 73 03 F6 |                 mov     htmp1, hpar1
2ade8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2adec     B9 BF 42 F0 |                 shr     retval, htmp1
2adf0                 | 
2adf0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2adf4     10 00 90 1D |         if_a    jmp     #.l1
2adf8                 | 
2adf8     C7 8F C3 F9 |                 decod   hpar2
2adfc     01 8E 87 F1 |                 sub     hpar2, #1
2ae00     C7 BF 02 F5 |                 and     retval, hpar2
2ae04     2D 00 64 FD |                 ret
2ae08                 | .l1
2ae08     FF 7F 00 FF 
2ae0c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2ae10     03 70 07 F1 |                 add     htmp, #3
2ae14     B8 75 03 FB |                 rdlong  htmp2, htmp
2ae18     18 8E 87 F1 |                 sub     hpar2, #24
2ae1c     C7 8F C3 F9 |                 decod   hpar2
2ae20     01 8E 87 F1 |                 sub     hpar2, #1
2ae24     B9 75 43 F0 |                 shr     htmp2, htmp1
2ae28     C7 75 03 F5 |                 and     htmp2, hpar2
2ae2c     18 74 67 F0 |                 shl     htmp2, #24
2ae30     BA BF 42 F5 |                 or      retval, htmp2
2ae34     2D 00 64 FD |                 ret
2ae38                 | 
2ae38                 | '------------------------------------------------------------------------------
2ae38                 | ' Normalize value to signed word (-32768 / 32767)
2ae38                 | '------------------------------------------------------------------------------
2ae38                 | ' On entry:
2ae38                 | '   retval - value to normalize
2ae38                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2ae38                 | '   - or -
2ae38                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2ae38                 | '   hidr_size - value bits length
2ae38                 | ' On exit:
2ae38                 | '   retval - normalized value
2ae38                 | '------------------------------------------------------------------------------
2ae38                 | hpad_normalize
2ae38     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2ae3c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2ae40     2D 00 64 AD |         if_z    ret
2ae44     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2ae48     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2ae4c     0F 72 77 F7 |                 signx   htmp1, #15      wc
2ae50     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2ae54     00 BE 66 C7 |         if_c    signx   retval, #0-0
2ae58     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2ae5c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2ae60     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2ae64     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2ae68     B8 71 53 F6 |                 abs     htmp            wc
2ae6c     1F BE 0E F4 |                 testb   retval, #31     wz
2ae70     5F BF 42 F6 |                 abs     retval
2ae74     B8 BF 12 FD |                 qdiv    retval, htmp
2ae78     18 BE 62 FD |                 getqx   retval
2ae7c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2ae80     C0 FF 7F FF 
2ae84     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2ae88     2D 00 64 FD |                 ret
2ae8c                 | 
2ae8c                 | '------------------------------------------------------------------------------
2ae8c                 | ' Perform controller actions
2ae8c                 | ' On entry:
2ae8c                 | '    hidr_id        report id
2ae8c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2ae8c                 | '                      X = hidr_axis+0, #0
2ae8c                 | '                      Y = hidr_axis+0, #1
2ae8c                 | '                      Z = hidr_axis+1, #0
2ae8c                 | '                     RX = hidr_axis+1, #1
2ae8c                 | '                     RY = hidr_axis+2, #0
2ae8c                 | '                     RZ = hidr_axis+2, #1
2ae8c                 | '    hidr_buttons   buttons state (bits 0 to 31)
2ae8c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2ae8c                 | '
2ae8c                 | '                     -------3 -------2 -------1 -------0 byte
2ae8c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2ae8c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2ae8c                 | '                                zyx||| |||||||| ++++++++ n. buttons
2ae8c                 | '                                |||||| ||||++++--------- n. axes
2ae8c                 | '                                |||||| ++++------------- n. hats
2ae8c                 | '                                ++++++------------------ valid axes
2ae8c                 | '------------------------------------------------------------------------------
2ae8c                 | hpad_translate
2ae8c                 | 
2ae8c                 | 
2ae8c                 |         if HAVE_HIDPAD
2ae8c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2ae90     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2ae94     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2ae98     01 70 E7 F2 |                 cmpsub  htmp,#1
2ae9c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2aea0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2aea4     2D 00 7C 3D |         if_ae   ret     wcz
2aea8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2aeac     B8 F3 03 F1 |                 add     ptrb,htmp
2aeb0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2aeb4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2aeb8     28 0C 64 FD |                 setq    #7-1
2aebc     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2aec0                 |         end
2aec0                 | 
2aec0                 | 
2aec0                 |         if EMUPAD_MAX_PLAYER > 0
2aec0                 | .emupad_no_hat
2aec0                 |         if EMUPAD_BT0_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT1_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT2_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT3_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT4_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT5_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT6_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT7_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT8_BIT >= 0
2aec0                 |         end
2aec0                 |         if EMUPAD_BT9_BIT >= 0
2aec0                 |         end
2aec0                 | .emupad_slot_over
2aec0                 |         end
2aec0                 | 
2aec0                 |         if 0
2aec0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2aec0                 | 
2aec0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2aec0                 | 
2aec0                 |         end
2aec0     2D 00 64 FD |                 ret
2aec4                 | end
2aec4                 | 
2aec4                 | if EMUPAD_MAX_PLAYER > 0
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' Clear EmuPad state
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | emupad_reset
2aec4                 | 
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' Get EmuPad Player number for current device (into retval)
2aec4                 | ' Z flag is also set if current device is valid
2aec4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | emupad_getnum
2aec4                 | .loop
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | emupad_discon
2aec4                 | .loop         
2aec4                 |         
2aec4                 |         ' FALL THROUGH!!!
2aec4                 | 
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' Update EmuPad reports (all of them...)
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | emupad_write_reports
2aec4                 | .devloop
2aec4                 | 
2aec4                 | end
2aec4                 | 
2aec4                 | 
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' On entry:
2aec4                 | ' On exit:
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | hget_hub_status
2aec4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2aec8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2aecc     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2aed0     01 90 2F F9 |                 setword hpar3, #1, #1
2aed4     CF 02 A0 FD |                 call    #do_int_in
2aed8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aedc     0C 00 90 AD |         if_z    jmp     #.data
2aee0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2aee4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2aee8     2D 00 64 FD |                 ret
2aeec                 | .data
2aeec     00 90 0F F2 |                 cmp     hpar3, #0               wz
2aef0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2aef4                 | 
2aef4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2aef8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2aefc     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2af00     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2af04                 |                 debug(ubin_long(hub_status_chg))
2af04                 | 
2af04     01 5A 06 F6 |                 mov     hdev_port, #1
2af08                 | .loop
2af08     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2af0c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2af10     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2af14     F0 FF 9F 3D |         if_nc   jmp     #.loop
2af18     2D 00 64 FD |                 ret
2af1c                 | 
2af1c                 | hub_port_handler
2af1c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2af20     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2af24     27 EF 03 F6 |                 mov     pb, urx_buff_p
2af28     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2af2c     55 02 A0 FD |                 call    #control_read
2af30     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2af34                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2af34                 | 
2af34     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2af38     50 01 90 5D |         if_x0   jmp     #.other
2af3c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2af40     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2af44     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2af48     A0 02 A0 FD |                 call    #control_write
2af4c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2af50     7C 01 90 5D |         if_x0   jmp     #.disconnect
2af54     B0 99 02 F6 |                 mov     hctwait, _100ms_
2af58     EF 02 A0 FD |                 call    #poll_waitx
2af5c                 | 
2af5c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2af60     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2af64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2af68     A0 02 A0 FD |                 call    #control_write
2af6c                 | 
2af6c     02 76 07 F6 |                 mov     htmp3, #2
2af70                 | .wait_reset
2af70     AC 99 02 F6 |                 mov     hctwait, _8ms_
2af74     EF 02 A0 FD |                 call    #poll_waitx
2af78     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2af7c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2af80     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2af84     55 02 A0 FD |                 call    #control_read
2af88     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2af8c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2af90     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2af94                 | 
2af94     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2af98     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2af9c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2afa0     A0 02 A0 FD |                 call    #control_write
2afa4                 | 
2afa4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2afa8                 | .wait_recover
2afa8     A7 99 02 F6 |                 mov     hctwait, _1ms_
2afac     EF 02 A0 FD |                 call    #poll_waitx
2afb0     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2afb4                 | 
2afb4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2afb8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2afbc     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2afc0                 | 
2afc0     00 08 00 FF 
2afc4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2afc8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2afcc     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2afd0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2afd4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2afd8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2afdc     48 01 90 5D |         if_nz   jmp     #.done
2afe0                 | .get_dev_desc
2afe0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2afe4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2afe8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2afec     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2aff0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2aff4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2aff8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2affc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b000     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b004     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b008     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2b00c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2b010     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2b014     BE 00 A0 FD |                 call    #calc_crc5
2b018     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2b01c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2b020     F7 AD C2 FA |                 rdbyte  total_data, pb
2b024     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2b028     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2b02c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b030     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b034     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2b038     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2b03c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2b03c     9F 99 02 F6 |                 mov     hctwait, _500us_
2b040     EF 02 A0 FD |                 call    #poll_waitx
2b044     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2b048     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2b04c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2b050     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2b054     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b058     CC 00 90 5D |         if_nz   jmp     #.done
2b05c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2b060     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2b064     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2b068     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2b06c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2b070     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2b074     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2b078     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2b07c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2b080     A4 00 90 CD |         if_b    jmp     #.done
2b084     6C F0 BF FD |                 call    #hparse_con_desc
2b088     9C 00 90 FD |                 jmp     #.done
2b08c                 | 
2b08c                 | .other
2b08c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2b090     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2b094     28 00 90 AD |         if_x1   jmp     #.reset_feature
2b098     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2b09c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2b0a0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2b0a4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2b0a8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2b0ac     10 00 90 AD |         if_x1   jmp     #.reset_feature
2b0b0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2b0b4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2b0b8     04 00 90 AD |         if_x1   jmp     #.reset_feature
2b0bc     68 00 90 FD |                 jmp     #.done
2b0c0                 | .reset_feature
2b0c0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2b0c4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b0c8     A0 02 A0 FD |                 call    #control_write
2b0cc     58 00 90 FD |                 jmp     #.done
2b0d0                 | .disconnect
2b0d0                 | 
2b0d0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b0d4     00 70 E3 F8 |                 getbyte htmp
2b0d8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2b0dc     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2b0e0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2b0e4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2b0e8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2b0ec     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2b0f0                 |         if EMUPAD_MAX_PLAYER > 0
2b0f0                 |         end
2b0f0                 |         if HAVE_MOUSE
2b0f0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2b0f4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2b0f8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2b0fc                 |         end
2b0fc                 |         if HAVE_HIDPAD
2b0fc     14 0A F0 FE |                 loc ptrb,#hidpad_report
2b100     2D 71 03 F6 |                 mov htmp,hdev_port
2b104     01 70 E7 F2 |                 cmpsub htmp,#1
2b108     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2b10c     B8 F3 03 F1 |                 add ptrb,htmp
2b110     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2b114     80 01 6C FC |                 wrlong #0,ptrb
2b118                 |         end
2b118                 | 
2b118     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2b11c     00 00 C4 F8 |                 setbyte #0
2b120     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b124     00 00 04 F6 |                 mov     0-0, #0
2b128                 | 
2b128                 | .done
2b128     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2b12c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2b130     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2b134     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2b138     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2b13c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2b140                 | 
2b140     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b144     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b148     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b14c     55 02 A0 FD |                 call    #control_read
2b150     00 69 06 FB |                 rdlong  hub_port_status, ptra
2b154                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2b154     2D 00 64 FD |                 ret
2b158                 | 
2b158                 | '------------------------------------------------------------------------------
2b158                 | ' Partially populated SETUP packets
2b158                 | '------------------------------------------------------------------------------
2b158     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2b159     06          |                 byte    REQ_GET_DESC
2b15a     00 01       |                 word    TYPE_DEVICE << 8
2b15c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b15e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b160     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2b161     06          |                 byte    REQ_GET_DESC
2b162     00 02       |                 word    TYPE_CONFIG << 8
2b164     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b166     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b168     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2b169     09          |                 byte    REQ_SET_CONFIG
2b16a     00 00       |                 word    0       ' Configuration value
2b16c     00 00       |                 word    0       ' Zero
2b16e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2b170     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2b171     05          |                 byte    REQ_SET_ADDR
2b172     00 00       |                 word    0       ' Zero
2b174     00 00       |                 word    0       ' Zero
2b176     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2b178                 | '------------------------------------------------------------------------------
2b178                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2b178                 | ' wValue field dictates which protocol should be used.
2b178                 | '
2b178                 | ' When initialized, all devices default to report protocol. However the host
2b178                 | ' should not make any assumptions about the device state and should set the
2b178                 | ' desired protocol whenever initializing a device.
2b178                 | '------------------------------------------------------------------------------
2b178     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b179     0B          |                 byte    HID_SET_PROTO
2b17a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2b17c                 |                                                 ' (HID 1.11 Section 7.2.6).
2b17c     00 00       |                 word    0               ' Interface index number.
2b17e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2b180                 | '------------------------------------------------------------------------------
2b180     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b181     0A          |                 byte    HID_SET_IDLE
2b182     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2b184                 |                                         ' reporting until a change is detected in the report data
2b184                 | 
2b184                 |                                         ' (HID 1.11 Section 7.2.4).
2b184     00 00       |                 word    0       ' Interface index number.
2b186     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2b188     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b189     09          |                 byte    HID_SET_REPORT
2b18a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2b18c                 |                                         ' (HID 1.11 Section 7.2.2).
2b18c     00 00       |                 word    0       ' Interface index number.
2b18e     00 00       |                 word    0       ' Size of the report, in bytes.
2b190     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2b191     06          |                 byte    REQ_GET_DESC
2b192     00 22       |                 word    TYPE_REPORT << 8
2b194     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b196     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b198                 | '------------------------------------------------------------------------------
2b198     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2b199     06          |                 byte    REQ_GET_DESC
2b19a     00 29       |                 word    TYPE_HUB << 8
2b19c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b19e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b1a0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2b1a1     03          |                 byte    REQ_SET_FEATURE
2b1a2     00 00       |                 word    0       ' port power
2b1a4     01 00       |                 word    1       ' Port index number (1+)
2b1a6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b1a8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2b1a9     01          |                 byte    REQ_CLEAR_FEATURE
2b1aa     00 00       |                 word    0       ' port power
2b1ac     01 00       |                 word    1       ' Port index number (1+)
2b1ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b1b0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2b1b1     00          |                 byte    REQ_GET_STATUS
2b1b2     00 00       |                 word    0
2b1b4     01 00       |                 word    1       ' Port index number (1+)
2b1b6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2b1b8                 | '------------------------------------------------------------------------------
2b1b8                 | if _HAVE_GAMEPAD
2b1b8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2b1bc                 | ps3_command_buff
2b1bc     00 00 00 00 
2b1c0     00          |                 byte    $00, $00, $00, $00, $00
2b1c1     00 00 00 00 
2b1c5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2b1c6     FF 27 10 00 
2b1ca     32          |                 byte    $FF, $27, $10, $00, $32
2b1cb     FF 27 10 00 
2b1cf     32          |                 byte    $FF, $27, $10, $00, $32
2b1d0     FF 27 10 00 
2b1d4     32          |                 byte    $FF, $27, $10, $00, $32
2b1d5     FF 27 10 00 
2b1d9     32          |                 byte    $FF, $27, $10, $00, $32
2b1da     00 00 00 00 
2b1de     00          |                 byte    $00, $00, $00, $00, $00
2b1df     00 00 00 00 
2b1e3     00          |                 byte    $00, $00, $00, $00, $00
2b1e4     00 00 00 00 
2b1e8     00          |                 byte    $00, $00, $00, $00, $00
2b1e9     00 00 00    |                 byte    $00, $00, $00
2b1ec                 | '------------------------------------------------------------------------------
2b1ec     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2b1ef                 |                                         ' 0x01 All blinking
2b1ef                 |                                         ' 0x02 1 flashes, then on
2b1ef                 |                                         ' 0x03 2 flashes, then on
2b1ef                 |                                         ' 0x04 3 flashes, then on
2b1ef                 |                                         ' 0x05 4 flashes, then on
2b1ef                 |                                         ' 0x06 1 on
2b1ef                 |                                         ' 0x07 2 on
2b1ef                 |                                         ' 0x08 3 on
2b1ef                 |                                         ' 0x09 4 on
2b1ef                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2b1ef                 |                                         ' 0x0B Blinking*
2b1ef                 |                                         ' 0x0C Slow blinking*
2b1ef                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2b1ef     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2b1f2     00          |                 byte    $00             ' Left rumble
2b1f3     00          |                 byte    $00             ' Right rumble
2b1f4     00 00 00    |                 byte    $00, $00, $00
2b1f7     00          | end
2b1f8                 | alignl
2b1f8                 | 
2b1f8                 | if HAVE_MOUSE
2b1f8     00 00 00 00 
2b1fc     00 00 00 00 | mouse_limits long 0[2]
2b200     00 00 00 00 | mouse_outptr long 0
2b204                 | end
2b204                 | 
2b204                 | if KEYQUEUE_SIZE > 0
2b204     00          | keyq_head byte 0
2b205     00          | keyq_tail byte 0
2b206     00 00 00 00 
      ...             
2b402     00 00 00 00 
2b406     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2b408                 | alignl
2b408                 | end
2b408                 | 
2b408                 | if EMUPAD_MAX_PLAYER > 0
2b408                 | emupad_rule_buffer
2b408                 | if EMUPAD_BUILTIN_RULES
2b408                 | file "padmap_builtin.dat"
2b408                 | end
2b408                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2b408                 | '' Default rule directly follows!
2b408                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2b408                 | end
2b408                 | 
2b408                 | '------------------------------------------------------------------------------
2b408                 | ' The USB data cache area gets zero-filled at every device disconnect
2b408                 | '------------------------------------------------------------------------------
2b408                 | usb_cache_start
2b408                 | 
2b408                 | ' HID descriptor and report buffers
2b408                 | if !!OVERLAP_MEMORY
2b408     00 00 00 00 
      ...             
2bb00     00 00 00 00 
2bb04     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2bb08                 | end
2bb08     00 00 00 00 
2bb0c     00 00 00 00 | hkbd_report     byte    0[8]
2bb10     00 00 00 00 | hkbd_led_rep    byte    0
2bb14                 | alignl
2bb14                 | 
2bb14                 | if HAVE_HIDPAD
2bb14     00 00 00 00 
      ...             
2bbd0     00 00 00 00 
2bbd4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2bbd8                 | end
2bbd8                 | 
2bbd8                 | ' HUB descriptor
2bbd8     00          | hub_descr       byte    0   ' bDescLength
2bbd9     00          |                 byte    0   ' bDescriptorType
2bbda     00          |                 byte    0   ' bNbrPorts
2bbdb     00 00       |                 word    0   ' wHubCharacteristics
2bbdd     00          |                 byte    0   ' bPwrOn2PwrGood
2bbde     00          |                 byte    0   ' bHubContrCurrent
2bbdf     00          |                 byte    0   ' DeviceRemoveable
2bbe0     00          |                 byte    0   ' PortPwrCtrlMask
2bbe1                 | 
2bbe1                 | usb_cache_end
2bbe1                 | 
2bbe1                 | if HAVE_MOUSE
2bbe1     00 00 00 00 | mouse_xacc      long 0
2bbe5     00 00 00 00 | mouse_yacc      long 0
2bbe9     00 00 00 00 | mouse_zacc      long 0
2bbed     00          | mouse_bstate    byte 0
2bbee     00          | mouse_lpending  byte 0
2bbef     00          | mouse_rpending  byte 0
2bbf0     00          | mouse_mpending  byte 0
2bbf1     00          | mouse_lock      byte 0
2bbf2     00 00 00    |                 byte 0[3] ' padding
2bbf5                 | end
2bbf5                 | 
2bbf5     00 00 00 00 
      ...             
2bc6d     00 00 00 00 
2bc71     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2bc75     00 00 00 00 
2bc79     00 00 00 00 
2bc7d     00 00 00 00 
2bc81     00 00 00 00 
2bc85     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2bc87     00 00 00 00 
      ...             
2bd7f     00 00 00 00 
2bd83     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2bd87                 | 
2bd87     00          | driver_cog      byte    0                       ' Current driver cog + 1
2bd88                 | 	alignl
2bd88                 | _Audio093b_8_sc_spin2_dat_
2bd88                 | 
2bd88                 | audio       org     0
2bd88                 | 
2bd88     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2bd8c     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2bd90     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2bd94                 | 
2bd94     01 EC 63 FD |             cogid   pa                   ' compute cogid
2bd98     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2bd9c     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2bda0     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2bda4                 | 
2bda4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2bda8     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2bdac     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2bdb0     0F CA 05 FC |             wrpin   dac,#right
2bdb4     0F BE 1C FC |             wxpin   #95,#right    
2bdb8     41 9C 64 FD |             dirh    #left addpins 1
2bdbc     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2bdc0     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2bdc4     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2bdc8                 |             
2bdc8                 | '---------------------------------------------------------------------------------        
2bdc8                 | '----------------- The main loop -------------------------------------------------
2bdc8                 | '---------------------------------------------------------------------------------
2bdc8                 | 
2bdc8     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2bdcc     10 00 90 CD |       if_c  jmp     #loop1
2bdd0                 |   
2bdd0     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2bdd4     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2bdd8     B1 00 80 F1 |             sub     0-0,a40000000
2bddc     FD A9 6D FB |             djnz    cn,#p402
2bde0                 |     
2bde0     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2bde4     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2bde8     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2bdec     01 A8 05 C6 |     if_c    mov     cn,#1
2bdf0     B6 AA 39 F3 |             fle     ct,time3 wcz
2bdf4     02 A8 05 C6 |     if_c    mov     cn,#2     
2bdf8     B7 AA 39 F3 |             fle     ct,time4 wcz
2bdfc     03 A8 05 C6 |     if_c    mov     cn,#3
2be00     B8 AA 39 F3 |             fle     ct,time5 wcz
2be04     04 A8 05 C6 |     if_c    mov     cn,#4
2be08     B9 AA 39 F3 |             fle     ct,time6 wcz
2be0c     05 A8 05 C6 |     if_c    mov     cn,#5
2be10     BA AA 39 F3 |             fle     ct,time7 wcz
2be14     06 A8 05 C6 |     if_c    mov     cn,#6
2be18     BB AA 39 F3 |             fle     ct,time8 wcz
2be1c     07 A8 05 C6 |     if_c    mov     cn,#7
2be20                 | 
2be20                 | 
2be20                 | '----------------------------------------------------------------------------------
2be20                 | '------------- Compute channel samples --------------------------------------------
2be20                 | '----------------------------------------------------------------------------------
2be20                 | 
2be20                 | 
2be20     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2be24     05 78 65 F0 |             shl     channeladd,#5
2be28     BC F0 03 F1 |             add     ptra,channeladd
2be2c                 | 
2be2c     28 0E 64 FD |             setq    #7                        ' read parameters
2be30     00 8F 05 FB |             rdlong  pointer0,ptra
2be34                 | '            testb   command0,#29 wz
2be34                 | '    if_nz   jmp     #p408
2be34                 | '    	    getword envptr,command0,#0
2be34                 | '    	    getbyte envspeed,command0,#2
2be34                 | '    	    jmp     #p404                     'if envelope then no sample rate
2be34                 |     	    
2be34     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2be38     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2be3c     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2be40     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2be44     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2be48     00 7C 0D F2 |             cmp     qq,#0 wz                         
2be4c     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2be50     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2be54                 |             
2be54     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2be58     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2be5c     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2be60                 | 
2be60                 | 
2be60     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2be64     C8 B0 39 F9 |             getword oldrs,sample0,#1
2be68     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2be6c     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2be70     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2be74     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2be78                 | 
2be78     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2be7c     00 AC 01 F6 |             mov     dt0,0-0    
2be80     B3 AC 81 F1 |             sub     dt0,time0
2be84                 |             
2be84     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2be88     CF 00 00 F1 |             add     0-0,afreq0  	
2be8c                 | 
2be8c     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2be90     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2be94     08 8E 45 F0 |             shr     pointer0,#8
2be98                 |          
2be98     1F 92 0D F4 |             testb   sstart0,#31 wz            
2be9c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2bea0     1C 92 0D F4 |             testb   sstart0,#28 wz            
2bea4     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2bea8                 |             
2bea8     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2beac     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2beb0     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2beb4                 |             
2beb4     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2beb8     C9 7C 01 F1 |             add     qq,sstart0            
2bebc                 | 
2bebc                 | 
2bebc                 | 
2bebc     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2bec0     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2bec4     04 01 B0 1D |     if_gt   call    #cache_read
2bec8                 |          
2bec8                 |          
2bec8                 |  
2bec8                 |          
2bec8     1F 92 0D F4 |             testb   sstart0,#31 wz 
2becc     08 7E 65 50 |     if_nz   shl     spl,#8
2bed0     08 8E 65 50 |     if_nz   shl     pointer0,#8
2bed4     07 8E 65 A0 |     if_z    shl     pointer0,#7
2bed8     1C 92 0D F4 |             testb   sstart0,#28 wz            
2bedc     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2bee0     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2bee4                 |     
2bee4                 | 
2bee4     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2bee8     00 7E 01 F6 |             mov     spl,0-0
2beec                 |  
2beec     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2bef0     00 B2 01 F6 |             mov     ls0,0-0
2bef4     20 00 00 FF 
2bef8     00 7C 05 F6 |             mov     qq,##16384
2befc     D2 7C 81 F1 |             sub     qq,apan0
2bf00     BE 7E 31 FA |             scas    spl,qq
2bf04     00 B4 01 F6 |             mov     rs0, 0-0
2bf08                 | 
2bf08     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2bf0c     DA B8 01 F1 |             add     rs,rs0
2bf10     D7 B6 81 F1 |             sub     ls,oldls
2bf14     D9 B6 01 F1 |             add     ls,ls0
2bf18                 |    
2bf18     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2bf1c     D9 90 21 F9 |             setword sample0,ls0,#0
2bf20                 |             
2bf20     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2bf24     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2bf28     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2bf2c     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2bf30     04 00 00 AF 
2bf34     00 68 05 A1 |     if_z    add     time1,##2048
2bf38     B4 6A 01 A6 |     if_z    mov     time2,time1
2bf3c     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2bf40                 |             
2bf40     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2bf44     00 8F 65 FC |             wrlong  pointer0,ptra
2bf48     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2bf4c                 |                       
2bf4c     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2bf50     FF 7B 25 A7 |     if_z    decmod  front, #511          
2bf54                 |          
2bf54     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2bf58     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2bf5c     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2bf60     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2bf64                 | 	    
2bf64                 | 		    
2bf64     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2bf68     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2bf6c     D8 BC 01 F6 |             mov     newsample, oldrs       
2bf70                 | 
2bf70     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2bf74     D6 66 01 F1 |             add     time0,dt0    
2bf78                 |                                      
2bf78     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2bf7c     60 FE 9F AD |     if_z    jmp     #loop1
2bf80     D6 7C 01 F6 |             mov     qq,dt0
2bf84                 |   
2bf84     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2bf88     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2bf8c     F4 FF 9F AD |     if_e    jmp     #p301    
2bf90                 | 		
2bf90     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2bf94     20 00 90 AD |     if_z    jmp #p302	   
2bf98                 |  
2bf98                 |  
2bf98     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2bf9c     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2bfa0     02 C6 65 C0 |     if_c    shl scptr2,#2
2bfa4     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2bfa8     60 C6 65 FC |             wrlong scptr2,#$60
2bfac     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2bfb0     01 00 00 CF 
2bfb4     7F C4 05 C7 |     if_c    incmod scptr,##639
2bfb8                 | 			    
2bfb8     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2bfbc     00 00 00 FF 
2bfc0     FF 7B 05 F7 |             incmod  front, ##511
2bfc4     EF 7D 6D FB |             djnz    qq,#p301
2bfc8                 |             
2bfc8     FC FD 9F FD |             jmp     #loop            'loop
2bfcc                 | 
2bfcc                 | '----------------------------------------------------------------------------------
2bfcc                 | '------------- This is the end of the main loop -----------------------------------
2bfcc                 | '----------------------------------------------------------------------------------
2bfcc                 | 
2bfcc                 | '----------------------------------------------------------------------------------
2bfcc                 | '------------- PSRAM cache ----------- --------------------------------------------
2bfcc                 | '----------------------------------------------------------------------------------
2bfcc                 | 
2bfcc                 | ' There are 8 cache pointers for 8 channels
2bfcc                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2bfcc                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2bfcc                 | 
2bfcc                 | 
2bfcc     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2bfd0                 |             
2bfd0     BE E8 01 F6 | 	    mov     addrhi,qq		
2bfd4     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2bfd8     E8 A8 95 F9 | 	    alts    cn,#cache1            
2bfdc     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2bfe0     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2bfe4                 | 	
2bfe4     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2bfe8     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2bfec     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2bff0     08 E0 65 F0 | 	    shl     cmd,#8
2bff4     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2bff8     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2bffc     08 E2 65 F0 |             shl     hubaddr,#8                  '
2c000     E7 E2 01 F1 |             add     hubaddr,hubptr 
2c004     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2c008     28 04 64 FD |             setq    #2                          ' write 3 longs
2c00c     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2c010     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2c014     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2c018                 |             
2c018                 | 	
2c018     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2c01c     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2c020     E7 7C 01 F1 | 	    add     qq,hubptr
2c024     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2c028     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2c02c                 |           
2c02c                 | 
2c02c                 | '--------------------------------------------------------------------------
2c02c                 | '------ Interrupt service -------------------------------------------------
2c02c                 | '------ Output the sample, get the next one if exists ---------------------
2c02c                 | '--------------------------------------------------------------------------
2c02c                 | 
2c02c     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2c030     0F 88 25 FC |             wypin   rsample,#right       '4
2c034     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2c038     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2c03c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2c040     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2c044     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2c048                 |     
2c048     F5 FF 3B FB |             reti1                        '17/19 
2c04c                 |           
2c04c                 | '---------------------------------------------------------------------------
2c04c                 | '-------- End of interrupt -------------------------------------------------
2c04c                 | '---------------------------------------------------------------------------    
2c04c                 | 
2c04c                 | 
2c04c                 | '---------------------------------------------------------------------------
2c04c                 | '------- Variables ---------------------------------------------------------
2c04c                 | '---------------------------------------------------------------------------
2c04c                 | 
2c04c                 | ' constants
2c04c                 | 
2c04c     00 00 00 40 | a40000000   long $40000000
2c050     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2c054                 | 
2c054                 | ' Time variables
2c054                 | 
2c054     00 00 00 00 | time0       long 0    ' Global sample computing time
2c058     01 00 00 00 | time1       long 1    ' Local channels time
2c05c     02 00 00 00 | time2       long 2
2c060     03 00 00 00 | time3       long 3
2c064     04 00 00 00 | time4       long 4
2c068     05 00 00 00 | time5       long 5
2c06c     06 00 00 00 | time6       long 6
2c070     07 00 00 00 | time7       long 7
2c074     08 00 00 00 | time8       long 8
2c078                 | 
2c078     00 00 00 00 | channeladd long 0
2c07c                 | 
2c07c     00 00 00 00 | front       long 0
2c080                 | 
2c080                 | ' temporary variables 
2c080     00 00 00 00 | qq          long 0
2c084     00 00 00 00 | spl         long 0
2c088     00 00 00 00 | zero        long 0
2c08c     00 00 00 00 | mailbox     long 0
2c090     00 00 00 00 | mailbox2 long 0
2c094                 | 
2c094                 | ' Interrupt ISR variables
2c094                 | 
2c094     00 00 00 00 | lsample     long 0
2c098     00 00 00 00 | rsample     long 0
2c09c     00 00 00 00 | lsnext      long 0
2c0a0     00 00 00 00 | rsnext      long 0 
2c0a4                 | 
2c0a4                 | ' channel parameter block
2c0a4                 | 
2c0a4     00 00 00 00 | pointer0    long 0     
2c0a8     00 00 00 00 | sample0     long 0
2c0ac     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2c0b0     00 00 00 00 | lstart0     long 0
2c0b4     00 00 00 00 | lend0       long 0
2c0b8     00 00 00 00 | volpan0     long 0
2c0bc     00 00 00 00 | freqskip0   long 0
2c0c0     00 00 00 00 | command0    long 0
2c0c4                 | 
2c0c4     00 00 00 00 | afreq0      long 0
2c0c8     00 00 00 00 | askip0      long 0
2c0cc     00 00 00 00 | avol0       long 0
2c0d0     00 00 00 00 | apan0       long 0
2c0d4                 | 
2c0d4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2c0d8     00 00 00 00 | cn          long 0
2c0dc     00 00 00 00 | ct          long 0
2c0e0     00 00 00 00 | dt0         long 0
2c0e4                 | 
2c0e4                 | ' Samples
2c0e4     00 00 00 00 | oldls       long 0
2c0e8     00 00 00 00 | oldrs       long 0
2c0ec                 | 
2c0ec     00 00 00 00 | ls0         long 0
2c0f0     00 00 00 00 | rs0         long 0
2c0f4                 | 
2c0f4     00 00 00 00 | ls          long 0    
2c0f8     00 00 00 00 | rs          long 0
2c0fc                 | 
2c0fc     00 00 00 00 | oldsample   long 0
2c100     00 00 00 00 | newsample   long 0
2c104                 | 
2c104     00 00 00 00 | nrsample    long 0
2c108     00 00 00 00 | nlsample    long 0
2c10c                 | 
2c10c     00 00 00 00 | scbase long 0
2c110     00 00 00 00 | scptr long 0
2c114     00 00 00 00 | scptr2 long 0
2c118     00 00 00 00 | scope long 0
2c11c                 | 
2c11c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2c120     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2c124                 | 
2c124     00 18 07 00 | hubptr      long $71800
2c128     00 00 00 00 | cache1      long 0
2c12c     00 00 00 00 | cache2      long 0
2c130     00 00 00 00 | cache3      long 0
2c134     00 00 00 00 | cache4      long 0
2c138     00 00 00 00 | cache5      long 0
2c13c     00 00 00 00 | cache6      long 0
2c140     00 00 00 00 | cache7      long 0
2c144     00 00 00 00 | cache8      long 0
2c148                 | 
2c148                 | 
2c148     00 00 00 00 | cmd         long 0
2c14c     00 00 00 00 | hubaddr     long 0
2c150     00 01 00 00 | count       long 256
2c154     00 00 00 00 | addrlo long 0
2c158     00 00 00 00 | addrhi long 0
2c15c     00 00 00 00 | pointer00 long 0
2c160     00 00 00 00 
2c164     00 00 00 00 | null  			long 	0,0           ' for channel reset
2c168                 | 	alignl
2c168                 | __system__dat_
2c168     00 00 00 00 
2c16c     00 00 00 00 | 	byte	$00[8]
2c170     03 00 00 00 
2c174     00 00 00 00 
2c178     00 00 00 00 
2c17c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c180     00 00 00 00 
      ...             
2c40c     00 00 00 00 
2c410     00 00 00 00 | 	byte	$00[660]
2c414     00 00 10 05 | 	long	(81 {__system____root_opendir})<<20
2c418     00 00 20 05 | 	long	(82 {__system____root_closedir})<<20
2c41c     00 00 30 05 | 	long	(83 {__system____root_readdir})<<20
2c420     00 00 40 05 | 	long	(84 {__system____root_stat})<<20
2c424     00 00 00 00 
2c428     00 00 00 00 
2c42c     00 00 00 00 
2c430     00 00 00 00 
2c434     00 00 00 00 
2c438     00 00 00 00 
2c43c     00 00 00 00 | 	byte	$00[28]
2c440     A8 C4 02 00 | 	long	@@@__system__dat_ + 832
2c444     AB C4 02 00 | 	long	@@@__system__dat_ + 835
2c448     CC C4 02 00 | 	long	@@@__system__dat_ + 868
2c44c     E5 C4 02 00 | 	long	@@@__system__dat_ + 893
2c450     00 C5 02 00 | 	long	@@@__system__dat_ + 920
2c454     1A C5 02 00 | 	long	@@@__system__dat_ + 946
2c458     2A C5 02 00 | 	long	@@@__system__dat_ + 962
2c45c     3C C5 02 00 | 	long	@@@__system__dat_ + 980
2c460     4E C5 02 00 | 	long	@@@__system__dat_ + 998
2c464     60 C5 02 00 | 	long	@@@__system__dat_ + 1016
2c468     6C C5 02 00 | 	long	@@@__system__dat_ + 1028
2c46c     7D C5 02 00 | 	long	@@@__system__dat_ + 1045
2c470     91 C5 02 00 | 	long	@@@__system__dat_ + 1065
2c474     9B C5 02 00 | 	long	@@@__system__dat_ + 1075
2c478     AB C5 02 00 | 	long	@@@__system__dat_ + 1091
2c47c     BA C5 02 00 | 	long	@@@__system__dat_ + 1106
2c480     D0 C5 02 00 | 	long	@@@__system__dat_ + 1128
2c484     E9 C5 02 00 | 	long	@@@__system__dat_ + 1153
2c488     FD C5 02 00 | 	long	@@@__system__dat_ + 1173
2c48c     0B C6 02 00 | 	long	@@@__system__dat_ + 1187
2c490     1F C6 02 00 | 	long	@@@__system__dat_ + 1207
2c494     2B C6 02 00 | 	long	@@@__system__dat_ + 1219
2c498     3D C6 02 00 | 	long	@@@__system__dat_ + 1237
2c49c     55 C6 02 00 | 	long	@@@__system__dat_ + 1261
2c4a0     67 C6 02 00 | 	long	@@@__system__dat_ + 1279
2c4a4     7A C6 02 00 | 	long	@@@__system__dat_ + 1298
2c4a8     4F 4B 00 4E 
2c4ac     75 6D 65 72 
2c4b0     69 63 61 6C 
2c4b4     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2c4b8     75 6D 65 6E 
2c4bc     74 20 6F 75 
2c4c0     74 20 6F 66 
2c4c4     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2c4c8     61 69 6E 00 
2c4cc     52 65 73 75 
2c4d0     6C 74 20 6E 
2c4d4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2c4d8     65 70 72 65 
2c4dc     73 65 6E 74 
2c4e0     61 62 6C 65 
2c4e4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2c4e8     65 67 61 6C 
2c4ec     20 6D 75 6C 
2c4f0     74 69 62 79 
2c4f4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2c4f8     65 71 75 65 
2c4fc     6E 63 65 00 
2c500     4E 6F 20 73 
2c504     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2c508     66 69 6C 65 
2c50c     20 6F 72 20 
2c510     64 69 72 65 
2c514     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2c518     79 00 42 61 
2c51c     64 20 66 69 
2c520     6C 65 20 6E 
2c524     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2c528     72 00 50 65 
2c52c     72 6D 69 73 
2c530     73 69 6F 6E 
2c534     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2c538     69 65 64 00 
2c53c     4E 6F 74 20 
2c540     65 6E 6F 75 
2c544     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2c548     65 6D 6F 72 
2c54c     79 00 54 65 
2c550     6D 70 6F 72 
2c554     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2c558     66 61 69 6C 
2c55c     75 72 65 00 
2c560     46 69 6C 65 
2c564     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2c568     73 74 73 00 
2c56c     49 6E 76 61 
2c570     6C 69 64 20 
2c574     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2c578     6D 65 6E 74 
2c57c     00 54 6F 6F 
2c580     20 6D 61 6E 
2c584     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2c588     65 6E 20 66 
2c58c     69 6C 65 73 
2c590     00 49 2F 4F 
2c594     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2c598     6F 72 00 4E 
2c59c     6F 74 20 61 
2c5a0     20 64 69 72 
2c5a4     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2c5a8     72 79 00 49 
2c5ac     73 20 61 20 
2c5b0     64 69 72 65 
2c5b4     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2c5b8     79 00 52 65 
2c5bc     61 64 20 6F 
2c5c0     6E 6C 79 20 
2c5c4     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2c5c8     20 73 79 73 
2c5cc     74 65 6D 00 
2c5d0     46 75 6E 63 
2c5d4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2c5d8     20 6E 6F 74 
2c5dc     20 69 6D 70 
2c5e0     6C 65 6D 65 
2c5e4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2c5e8     00 44 69 72 
2c5ec     65 63 74 6F 
2c5f0     72 79 20 6E 
2c5f4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2c5f8     6D 70 74 79 
2c5fc     00 4E 61 6D 
2c600     65 20 74 6F 
2c604     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2c608     6E 67 00 44 
2c60c     65 76 69 63 
2c610     65 20 6E 6F 
2c614     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2c618     65 6B 61 62 
2c61c     6C 65 00 42 
2c620     61 64 20 61 
2c624     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2c628     73 73 00 42 
2c62c     72 6F 6B 65 
2c630     6E 20 63 6F 
2c634     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2c638     74 69 6F 6E 
2c63c     00 44 65 76 
2c640     69 63 65 20 
2c644     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2c648     65 73 6F 75 
2c64c     72 63 65 20 
2c650     62 75 73 79 
2c654     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2c658     73 73 20 64 
2c65c     65 76 69 63 
2c660     65 20 6C 69 
2c664     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2c668     6F 20 73 70 
2c66c     61 63 65 20 
2c670     6F 6E 20 64 
2c674     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2c678     65 00 55 6E 
2c67c     6B 6E 6F 77 
2c680     6E 20 65 72 
2c684     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2c688     00 00 00 00 
2c68c     00 00 00 00 | 	byte	$00[8]
2c690     05 00 00 00 
2c694     00 00 00 00 
2c698     00 00 00 00 
2c69c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c6a0     00 00 00 00 | 	byte	$00, $00, $00, $00
2c6a4     00 00 90 06 | 	long	(105 {__system___tx})<<20
2c6a8     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2c6ac     00 00 00 00 | 	byte	$00, $00, $00, $00
2c6b0     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0504})<<20
2c6b4     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0505})<<20
2c6b8     00 00 00 00 
2c6bc     00 00 00 00 | 	byte	$00[8]
2c6c0     01 00 00 00 
2c6c4     06 00 00 00 
2c6c8     00 00 00 00 
2c6cc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c6d0     00 00 00 00 
2c6d4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2c6d8     00 00 90 06 | 	long	(105 {__system___tx})<<20
2c6dc     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2c6e0     00 00 00 00 | 	byte	$00, $00, $00, $00
2c6e4     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0504})<<20
2c6e8     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0505})<<20
2c6ec     00 00 00 00 
2c6f0     00 00 00 00 | 	byte	$00[8]
2c6f4     01 00 00 00 
2c6f8     06 00 00 00 
2c6fc     00 00 00 00 
2c700     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c704     00 00 00 00 
2c708     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2c70c     00 00 90 06 | 	long	(105 {__system___tx})<<20
2c710     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2c714     00 00 00 00 | 	byte	$00, $00, $00, $00
2c718     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0504})<<20
2c71c     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0505})<<20
2c720     00 00 00 00 
      ...             
2c890     00 00 00 00 
2c894     00 00 00 00 | 	byte	$00[376]
2c898     9C C8 02 00 | 	long	@@@__system__dat_ + 1844
2c89c     00 00 00 00 
2c8a0     00 00 00 00 
2c8a4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c8a8                 | 	alignl
2c8a8                 | _fatfs_cc_dat_
2c8a8     C7 00 FC 00 
2c8ac     E9 00 E2 00 
2c8b0     E4 00 E0 00 
2c8b4     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2c8b8     EA 00 EB 00 
2c8bc     E8 00 EF 00 
2c8c0     EE 00 EC 00 
2c8c4     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2c8c8     C9 00 E6 00 
2c8cc     C6 00 F4 00 
2c8d0     F6 00 F2 00 
2c8d4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2c8d8     FF 00 D6 00 
2c8dc     DC 00 F8 00 
2c8e0     A3 00 D8 00 
2c8e4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2c8e8     E1 00 ED 00 
2c8ec     F3 00 FA 00 
2c8f0     F1 00 D1 00 
2c8f4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2c8f8     BF 00 AE 00 
2c8fc     AC 00 BD 00 
2c900     BC 00 A1 00 
2c904     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2c908     91 25 92 25 
2c90c     93 25 02 25 
2c910     24 25 C1 00 
2c914     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2c918     A9 00 63 25 
2c91c     51 25 57 25 
2c920     5D 25 A2 00 
2c924     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2c928     14 25 34 25 
2c92c     2C 25 1C 25 
2c930     00 25 3C 25 
2c934     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2c938     5A 25 54 25 
2c93c     69 25 66 25 
2c940     60 25 50 25 
2c944     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2c948     F0 00 D0 00 
2c94c     CA 00 CB 00 
2c950     C8 00 31 01 
2c954     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2c958     CF 00 18 25 
2c95c     0C 25 88 25 
2c960     84 25 A6 00 
2c964     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2c968     D3 00 DF 00 
2c96c     D4 00 D2 00 
2c970     F5 00 D5 00 
2c974     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2c978     DE 00 DA 00 
2c97c     DB 00 D9 00 
2c980     FD 00 DD 00 
2c984     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2c988     AD 00 B1 00 
2c98c     17 20 BE 00 
2c990     B6 00 A7 00 
2c994     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2c998     B0 00 A8 00 
2c99c     B7 00 B9 00 
2c9a0     B3 00 B2 00 
2c9a4     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2c9a8     61 00 1A 03 
2c9ac     E0 00 17 03 
2c9b0     F8 00 07 03 
2c9b4     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2c9b8     78 01 00 01 
2c9bc     30 01 32 01 
2c9c0     06 01 39 01 
2c9c4     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2c9c8     2E 01 79 01 
2c9cc     06 01 80 01 
2c9d0     4D 00 43 02 
2c9d4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2c9d8     82 01 84 01 
2c9dc     84 01 86 01 
2c9e0     87 01 87 01 
2c9e4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2c9e8     8B 01 8B 01 
2c9ec     8D 01 8E 01 
2c9f0     8F 01 90 01 
2c9f4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2c9f8     93 01 94 01 
2c9fc     F6 01 96 01 
2ca00     97 01 98 01 
2ca04     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2ca08     9B 01 9C 01 
2ca0c     9D 01 20 02 
2ca10     9F 01 A0 01 
2ca14     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2ca18     A2 01 A4 01 
2ca1c     A4 01 A6 01 
2ca20     A7 01 A7 01 
2ca24     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2ca28     AB 01 AC 01 
2ca2c     AC 01 AE 01 
2ca30     AF 01 AF 01 
2ca34     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2ca38     B3 01 B3 01 
2ca3c     B5 01 B5 01 
2ca40     B7 01 B8 01 
2ca44     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2ca48     BB 01 BC 01 
2ca4c     BC 01 BE 01 
2ca50     F7 01 C0 01 
2ca54     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2ca58     C3 01 C4 01 
2ca5c     C5 01 C4 01 
2ca60     C7 01 C8 01 
2ca64     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2ca68     CB 01 CA 01 
2ca6c     CD 01 10 01 
2ca70     DD 01 01 00 
2ca74     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2ca78     12 01 F3 01 
2ca7c     03 00 F1 01 
2ca80     F4 01 F4 01 
2ca84     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2ca88     22 02 12 01 
2ca8c     3A 02 09 00 
2ca90     65 2C 3B 02 
2ca94     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2ca98     66 2C 3F 02 
2ca9c     40 02 41 02 
2caa0     41 02 46 02 
2caa4     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2caa8     40 00 81 01 
2caac     86 01 55 02 
2cab0     89 01 8A 01 
2cab4     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2cab8     5A 02 90 01 
2cabc     5C 02 5D 02 
2cac0     5E 02 5F 02 
2cac4     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2cac8     62 02 94 01 
2cacc     64 02 65 02 
2cad0     66 02 67 02 
2cad4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2cad8     6A 02 62 2C 
2cadc     6C 02 6D 02 
2cae0     6E 02 9C 01 
2cae4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2cae8     9D 01 73 02 
2caec     74 02 9F 01 
2caf0     76 02 77 02 
2caf4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2caf8     7A 02 7B 02 
2cafc     7C 02 64 2C 
2cb00     7E 02 7F 02 
2cb04     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2cb08     82 02 A9 01 
2cb0c     84 02 85 02 
2cb10     86 02 87 02 
2cb14     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2cb18     B1 01 B2 01 
2cb1c     45 02 8D 02 
2cb20     8E 02 8F 02 
2cb24     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2cb28     B7 01 7B 03 
2cb2c     03 00 FD 03 
2cb30     FE 03 FF 03 
2cb34     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2cb38     86 03 88 03 
2cb3c     89 03 8A 03 
2cb40     B1 03 11 03 
2cb44     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2cb48     A3 03 A3 03 
2cb4c     C4 03 08 03 
2cb50     CC 03 03 00 
2cb54     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2cb58     8F 03 D8 03 
2cb5c     18 01 F2 03 
2cb60     0A 00 F9 03 
2cb64     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2cb68     F5 03 F6 03 
2cb6c     F7 03 F7 03 
2cb70     F9 03 FA 03 
2cb74     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2cb78     20 03 50 04 
2cb7c     10 07 60 04 
2cb80     22 01 8A 04 
2cb84     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2cb88     0E 01 CF 04 
2cb8c     01 00 C0 04 
2cb90     D0 04 44 01 
2cb94     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2cb98     00 00 7D 1D 
2cb9c     01 00 63 2C 
2cba0     00 1E 96 01 
2cba4     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2cba8     00 1F 08 06 
2cbac     10 1F 06 06 
2cbb0     20 1F 08 06 
2cbb4     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2cbb8     40 1F 06 06 
2cbbc     51 1F 07 00 
2cbc0     59 1F 52 1F 
2cbc4     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2cbc8     5D 1F 56 1F 
2cbcc     5F 1F 60 1F 
2cbd0     08 06 70 1F 
2cbd4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2cbd8     BB 1F C8 1F 
2cbdc     C9 1F CA 1F 
2cbe0     CB 1F DA 1F 
2cbe4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2cbe8     F9 1F EA 1F 
2cbec     EB 1F FA 1F 
2cbf0     FB 1F 80 1F 
2cbf4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2cbf8     08 06 A0 1F 
2cbfc     08 06 B0 1F 
2cc00     04 00 B8 1F 
2cc04     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2cc08     BC 1F CC 1F 
2cc0c     01 00 C3 1F 
2cc10     D0 1F 02 06 
2cc14     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2cc18     E5 1F 01 00 
2cc1c     EC 1F F3 1F 
2cc20     01 00 FC 1F 
2cc24     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2cc28     32 21 70 21 
2cc2c     10 02 84 21 
2cc30     01 00 83 21 
2cc34     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2cc38     30 2C 2F 04 
2cc3c     60 2C 02 01 
2cc40     67 2C 06 01 
2cc44     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2cc48     80 2C 64 01 
2cc4c     00 2D 26 08 
2cc50     41 FF 1A 03 
2cc54     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2cc58     05 07 09 0E 
2cc5c     10 12 14 16 
2cc60     18 1C 1E 43 
2cc64     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2cc68     41 41 43 45 
2cc6c     45 45 49 49 
2cc70     49 41 41 45 
2cc74     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2cc78     4F 55 55 59 
2cc7c     4F 55 4F 9C 
2cc80     4F 9E 9F 41 
2cc84     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2cc88     A5 A6 A7 A8 
2cc8c     A9 AA AB AC 
2cc90     AD AE AF B0 
2cc94     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2cc98     41 41 41 B8 
2cc9c     B9 BA BB BC 
2cca0     BD BE BF C0 
2cca4     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2cca8     C5 41 41 C8 
2ccac     C9 CA CB CC 
2ccb0     CD CE CF D1 
2ccb4     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2ccb8     49 49 49 49 
2ccbc     D9 DA DB DC 
2ccc0     DD 49 DF 4F 
2ccc4     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2ccc8     4F E6 E8 E8 
2cccc     55 55 55 59 
2ccd0     59 EE EF F0 
2ccd4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2ccd8     F5 F6 F7 F8 
2ccdc     F9 FA FB FC 
2cce0     FD FE FF 00 
2cce4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2cce8     00 00 00 00 | 	byte	$00, $00, $00, $00
2ccec     00 00 80 05 | 	long	(88 {_fatfs_cc_v_close})<<20
2ccf0     00 00 90 05 | 	long	(89 {_fatfs_cc_v_read})<<20
2ccf4     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_write})<<20
2ccf8     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_lseek})<<20
2ccfc     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_ioctl})<<20
2cd00     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_flush})<<20
2cd04     00 00 00 00 
2cd08     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2cd0c     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_open})<<20
2cd10     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_creat})<<20
2cd14     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_opendir})<<20
2cd18     00 00 00 06 | 	long	(96 {_fatfs_cc_v_closedir})<<20
2cd1c     00 00 10 06 | 	long	(97 {_fatfs_cc_v_readdir})<<20
2cd20     00 00 20 06 | 	long	(98 {_fatfs_cc_v_stat})<<20
2cd24     00 00 30 06 | 	long	(99 {_fatfs_cc_v_mkdir})<<20
2cd28     00 00 40 06 | 	long	(100 {_fatfs_cc_v_rmdir})<<20
2cd2c     00 00 50 06 | 	long	(101 {_fatfs_cc_v_remove})<<20
2cd30     00 00 60 06 | 	long	(102 {_fatfs_cc_v_rename})<<20
2cd34     00 00 70 06 | 	long	(103 {_fatfs_cc_v_init})<<20
2cd38     00 00 80 06 | 	long	(104 {_fatfs_cc_v_deinit})<<20
2cd3c     FF FF FF FF 
2cd40     1F 00 00 00 
2cd44     1C 00 00 00 
2cd48     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2cd4c     1E 00 00 00 
2cd50     1F 00 00 00 
2cd54     1E 00 00 00 
2cd58     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2cd5c     1F 00 00 00 
2cd60     1E 00 00 00 
2cd64     1F 00 00 00 
2cd68     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2cd6c     1F 00 00 00 
2cd70     00 00 00 00 
2cd74     1F 00 00 00 
2cd78     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2cd7c     5A 00 00 00 
2cd80     78 00 00 00 
2cd84     97 00 00 00 
2cd88     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2cd8c     D4 00 00 00 
2cd90     F3 00 00 00 
2cd94     11 01 00 00 
2cd98     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2cd9c     4E 01 00 00 
2cda0     6D 01 00 00 
2cda4     FF FF FF FF 
2cda8     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2cdac     00 00 00 00 
      ...             
2cdc4     00 00 00 00 
2cdc8     00 00 00 00 | 	byte	$00[32]
2cdcc     EA CD 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2cdd0     EE CD 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2cdd4     00 00 00 00 
2cdd8     00 00 00 00 
2cddc     00 00 00 00 
2cde0     00 00 00 00 
2cde4     00 00       | 	byte	$00[18]
2cde6     3F 3F 3F 00 
2cdea     55 43 54 00 
2cdee     55 43 54 00 
2cdf2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2cdf6     00 00 00 00 
2cdfa     00 00 00    | 	byte	$00[7]
2cdfd     CA 9A 3B 00 
2ce01     00 00 00 01 
2ce05     01 01 01 01 
2ce09     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2ce0d     91 11 11 11 
2ce11     11 01 01 01 
2ce15     01 01 01 01 
2ce19     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2ce1d     01 01 01 01 
2ce21     01 01 01    | 	byte	$01[7]
2ce24     90 20 20 20 
2ce28     20 20 20 20 
2ce2c     20 20 20 20 
2ce30     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2ce34     42 42 42 42 
2ce38     42 42 42 42 
2ce3c     42 42       | 	byte	$42[10]
2ce3e     20 20 20 20 
2ce42     20 20 20    | 	byte	$20[7]
2ce45     44 44 44 44 
2ce49     44 44       | 	byte	$44[6]
2ce4b     04 04 04 04 
2ce4f     04 04 04 04 
2ce53     04 04 04 04 
2ce57     04 04 04 04 
2ce5b     04 04 04 04 | 	byte	$04[20]
2ce5f     20 20 20 20 
2ce63     20 20       | 	byte	$20[6]
2ce65     48 48 48 48 
2ce69     48 48       | 	byte	$48[6]
2ce6b     08 08 08 08 
2ce6f     08 08 08 08 
2ce73     08 08 08 08 
2ce77     08 08 08 08 
2ce7b     08 08 08 08 | 	byte	$08[20]
2ce7f     20 20 20 20 
2ce83     01 00 00 00 
2ce87     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2ce88                 | __methodtable__
2ce88     94 09 01 00 | 	long	@_do_no_command
2ce8c     A0 AE 00 00 | 	long	@_do_plus
2ce90     80 B2 00 00 | 	long	@_do_minus
2ce94     48 B7 00 00 | 	long	@_do_or
2ce98     60 B8 00 00 | 	long	@_do_mul
2ce9c     EC BD 00 00 | 	long	@_do_fdiv
2cea0     30 B6 00 00 | 	long	@_do_and
2cea4     CC BB 00 00 | 	long	@_do_div
2cea8     B4 BF 00 00 | 	long	@_do_mod
2ceac     D4 C1 00 00 | 	long	@_do_shl
2ceb0     EC C2 00 00 | 	long	@_do_shr
2ceb4     04 C4 00 00 | 	long	@_do_power
2ceb8     44 A9 00 00 | 	long	@_do_getvar
2cebc     F8 87 00 00 | 	long	@_do_push
2cec0     1C A3 00 00 | 	long	@_do_assign
2cec4     08 EC 00 00 | 	long	@_do_cls
2cec8     B8 9D 00 00 | 	long	@_do_new
2cecc     AC EC 00 00 | 	long	@_do_plot
2ced0     E4 ED 00 00 | 	long	@_do_draw
2ced4     CC F7 00 00 | 	long	@_do_print
2ced8     C4 F0 00 00 | 	long	@_do_circle
2cedc     4C EF 00 00 | 	long	@_do_fcircle
2cee0     3C F2 00 00 | 	long	@_do_box
2cee4     E4 F5 00 00 | 	long	@_do_frame
2cee8     74 EC 00 00 | 	long	@_do_color
2ceec     10 69 00 00 | 	long	@_do_for
2cef0     3C 6B 00 00 | 	long	@_do_next
2cef4     1C 9B 00 00 | 	long	@_do_list
2cef8     F0 97 00 00 | 	long	@_do_run
2cefc     44 A2 00 00 | 	long	@_do_error
2cf00     40 9F 00 00 | 	long	@_do_fast_goto
2cf04     30 A0 00 00 | 	long	@_do_find_goto
2cf08     40 A2 00 00 | 	long	@_do_slow_goto
2cf0c     3C DC 00 00 | 	long	@_do_converttoint
2cf10     3C 8E 00 00 | 	long	@_test_csave
2cf14     90 91 00 00 | 	long	@_do_save
2cf18     50 94 00 00 | 	long	@_do_load
2cf1c     68 00 01 00 | 	long	@_do_pinwrite
2cf20     80 00 01 00 | 	long	@_do_waitms
2cf24     BC 01 01 00 | 	long	@_do_waitvbl
2cf28     C4 04 01 00 | 	long	@_do_if
2cf2c     A8 05 01 00 | 	long	@_do_else
2cf30     CC 05 01 00 | 	long	@_do_nothing
2cf34     CC C5 00 00 | 	long	@_do_eq
2cf38     FC D0 00 00 | 	long	@_do_ge
2cf3c     BC D4 00 00 | 	long	@_do_le
2cf40     8C C9 00 00 | 	long	@_do_gt
2cf44     4C CD 00 00 | 	long	@_do_lt
2cf48     7C D8 00 00 | 	long	@_do_ne
2cf4c     0C DE 00 00 | 	long	@_do_rnd
2cf50     D0 05 01 00 | 	long	@_do_brun
2cf54     80 08 01 00 | 	long	@_do_beep
2cf58     EC 01 01 00 | 	long	@_do_dir
2cf5c     78 FC 00 00 | 	long	@_do_paper
2cf60     00 FD 00 00 | 	long	@_do_ink
2cf64     9C FD 00 00 | 	long	@_do_font
2cf68     18 FE 00 00 | 	long	@_do_mode
2cf6c     EC 07 01 00 | 	long	@_do_mouse
2cf70     A0 EB 00 00 | 	long	@_do_gettime
2cf74     20 08 01 00 | 	long	@_do_cursor
2cf78     54 08 01 00 | 	long	@_do_click
2cf7c     90 EA 00 00 | 	long	@_do_mousex
2cf80     D4 EA 00 00 | 	long	@_do_mousey
2cf84     5C EB 00 00 | 	long	@_do_mousek
2cf88     18 EB 00 00 | 	long	@_do_mousew
2cf8c     D4 DF 00 00 | 	long	@_do_sin
2cf90     BC E1 00 00 | 	long	@_do_stick
2cf94     40 E3 00 00 | 	long	@_do_strig
2cf98     A4 E9 00 00 | 	long	@_do_sprite
2cf9c     14 E6 00 00 | 	long	@_do_defsprite
2cfa0     C4 E4 00 00 | 	long	@_do_getpixel
2cfa4     C8 01 01 00 | 	long	@_do_waitclock
2cfa8     A0 09 01 00 | 	long	@_do_negative
2cfac     24 F4 00 00 | 	long	@_do_fill
2cfb0     00 3A 01 00 | 	long	@_hg010b_spin2_putchar
2cfb4     38 3D 02 00 | 	long	@__struct___bas_wrap_sender_tx
2cfb8     7C 3D 02 00 | 	long	@__struct___bas_wrap_sender_rx
2cfbc     C4 3D 02 00 | 	long	@__struct___bas_wrap_sender_close
2cfc0     68 3C 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2cfc4     D8 3C 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2cfc8     20 3C 02 00 | 	long	@___strs_cl_pfunc
2cfcc     80 9B 01 00 | 	long	@__system____root_opendir
2cfd0     1C 9C 01 00 | 	long	@__system____root_closedir
2cfd4     98 9B 01 00 | 	long	@__system____root_readdir
2cfd8     24 9C 01 00 | 	long	@__system____root_stat
2cfdc     AC 94 01 00 | 	long	@__system____default_putc
2cfe0     30 94 01 00 | 	long	@__system____default_getc
2cfe4     54 95 01 00 | 	long	@__system____default_flush
2cfe8     28 27 02 00 | 	long	@_fatfs_cc_v_close
2cfec     44 2B 02 00 | 	long	@_fatfs_cc_v_read
2cff0     58 2C 02 00 | 	long	@_fatfs_cc_v_write
2cff4     38 2D 02 00 | 	long	@_fatfs_cc_v_lseek
2cff8     C0 2D 02 00 | 	long	@_fatfs_cc_v_ioctl
2cffc     14 2E 02 00 | 	long	@_fatfs_cc_v_open
2d000     8C 26 02 00 | 	long	@_fatfs_cc_v_creat
2d004     6C 27 02 00 | 	long	@_fatfs_cc_v_opendir
2d008     E0 27 02 00 | 	long	@_fatfs_cc_v_closedir
2d00c     20 28 02 00 | 	long	@_fatfs_cc_v_readdir
2d010     54 29 02 00 | 	long	@_fatfs_cc_v_stat
2d014     D4 2D 02 00 | 	long	@_fatfs_cc_v_mkdir
2d018     F4 2D 02 00 | 	long	@_fatfs_cc_v_rmdir
2d01c     E4 2D 02 00 | 	long	@_fatfs_cc_v_remove
2d020     04 2E 02 00 | 	long	@_fatfs_cc_v_rename
2d024     24 2F 02 00 | 	long	@_fatfs_cc_v_init
2d028     2C 2F 02 00 | 	long	@_fatfs_cc_v_deinit
2d02c     38 4D 01 00 | 	long	@__system___tx
2d030     78 4D 01 00 | 	long	@__system___rx
2d034     90 A7 01 00 | 	long	@__system___rxtxioctl_0504
2d038     E8 A7 01 00 | 	long	@__system____dummy_flush_0505
2d03c     F4 2E 02 00 | 	long	@_fatfs_cc_v_flush
2d040                 | __heap_base
2d040     00 00 00 00 
      ...             
6b840     00 00 00 00 
6b844     00 00 00 00 | 	long	0[64002]
6b848                 | objmem
6b848     00 00 00 00 
      ...             
75cf0     00 00 00 00 
75cf4     00 00 00 00 | 	long	0[10540]
75cf8                 | stackspace
75cf8     00 00 00 00 | 	long	0[1]
75cfc 100             | 	org	COG_BSS_START
75cfc 100             | _var01
75cfc 100             | 	res	1
75cfc 101             | _var02
75cfc 101             | 	res	1
75cfc 102             | _var03
75cfc 102             | 	res	1
75cfc 103             | _var04
75cfc 103             | 	res	1
75cfc 104             | _var05
75cfc 104             | 	res	1
75cfc 105             | _var06
75cfc 105             | 	res	1
75cfc 106             | _var07
75cfc 106             | 	res	1
75cfc 107             | _var08
75cfc 107             | 	res	1
75cfc 108             | _var09
75cfc 108             | 	res	1
75cfc 109             | arg01
75cfc 109             | 	res	1
75cfc 10a             | arg02
75cfc 10a             | 	res	1
75cfc 10b             | arg03
75cfc 10b             | 	res	1
75cfc 10c             | arg04
75cfc 10c             | 	res	1
75cfc 10d             | arg05
75cfc 10d             | 	res	1
75cfc 10e             | arg06
75cfc 10e             | 	res	1
75cfc 10f             | local01
75cfc 10f             | 	res	1
75cfc 110             | local02
75cfc 110             | 	res	1
75cfc 111             | local03
75cfc 111             | 	res	1
75cfc 112             | local04
75cfc 112             | 	res	1
75cfc 113             | local05
75cfc 113             | 	res	1
75cfc 114             | local06
75cfc 114             | 	res	1
75cfc 115             | local07
75cfc 115             | 	res	1
75cfc 116             | local08
75cfc 116             | 	res	1
75cfc 117             | local09
75cfc 117             | 	res	1
75cfc 118             | local10
75cfc 118             | 	res	1
75cfc 119             | local11
75cfc 119             | 	res	1
75cfc 11a             | local12
75cfc 11a             | 	res	1
75cfc 11b             | local13
75cfc 11b             | 	res	1
75cfc 11c             | local14
75cfc 11c             | 	res	1
75cfc 11d             | local15
75cfc 11d             | 	res	1
75cfc 11e             | local16
75cfc 11e             | 	res	1
75cfc 11f             | local17
75cfc 11f             | 	res	1
75cfc 120             | local18
75cfc 120             | 	res	1
75cfc 121             | local19
75cfc 121             | 	res	1
75cfc 122             | local20
75cfc 122             | 	res	1
75cfc 123             | local21
75cfc 123             | 	res	1
75cfc 124             | local22
75cfc 124             | 	res	1
75cfc 125             | local23
75cfc 125             | 	res	1
75cfc 126             | local24
75cfc 126             | 	res	1
75cfc 127             | local25
75cfc 127             | 	res	1
75cfc 128             | local26
75cfc 128             | 	res	1
75cfc 129             | local27
75cfc 129             | 	res	1
75cfc 12a             | local28
75cfc 12a             | 	res	1
75cfc 12b             | local29
75cfc 12b             | 	res	1
75cfc 12c             | local30
75cfc 12c             | 	res	1
75cfc 12d             | local31
75cfc 12d             | 	res	1
75cfc 12e             | local32
75cfc 12e             | 	res	1
75cfc 12f             | muldiva_
75cfc 12f             | 	res	1
75cfc 130             | muldivb_
75cfc 130             | 	res	1
75cfc 131             | 	fit	480
75cfc 131             | 
