' A GUS inspired interpolating audio driver for a P2
' v. 0.03 - 20241218
' MIT license
' Piotr Kardasz pik33@o2.pl with the help from P2 forum community :) 
' 16 channel version
'-------------------------------------------------------------------
con


left= 14
right=15

c4=262
d4=294
e4=330
f4=349
g4=392
a4=440
h4=494

var

{{
Channel registers:
long #0: the sample phase accumulator fractional part
long #1: the sample phase accumulator integer part
long #2: the current sample generated, 2 words, right:left
long #3: the raw sample value, 2 words: previous:current
long #4: envelope phase accumulator
long #5: the sample pointer.
         Set bit #31 to 0 if the sample is 8 bit, 1 for 16 bit. 
         Set bit #30 to 1 to start playing the sample from the beginning
         Set bit #28 to 1 to use interleaved samples (as in .wav file) with fractional skip enabled 
         Set bit #27 to 1 to generate noise instead of audio
long #6: sample loop start point
long #7: sample loop end point. 
         If the sample has to no loop and stop at the end, set loop start=end of sample, loop end=loop start +1 or 2 (for 16 bit)
long #8: volume and pan
         word #16: volume, 0..16384(=1). Values more than 16384 could cause clipping if sample is normalized
         word #17: pan. 16384: full left, 8192: center, 0: full right
long #9  frequency in 8:24 format; $01000000 = sample rate * 1.0
long #10 sample rate (the divider for clkfreq; for 338688000 7680 gives 44100 Hz) - bit 31 set=no change
long #11 envelope pointer. Points to the start of the envelope definition
long #12 envelope speed. $0040_0000 gives envelope speed=sample rate. 97392 gives 1 second for 1024 point envelope. 24348 = 5F1B - 1 second for 256 point envelope
long #13 envelope length
long #14..15 reserved, unused
}}

'
long mailboxaddr
long scope_ptr
long cache_ptr
long channel0[16]
long channel1[16]
long channel2[16]
long channel3[16]
long channel4[16]
long channel5[16]
long channel6[16]
long channel7[16]
long channel8[16]
long channel9[16]
long channela[16]
long channelb[16]
long channelc[16]
long channeld[16]
long channele[16]
long channelf[16]

long freqs[16]
word delays[16]
word volumes[16]
long waveforms[16]
long envelopes[16]
word lengths[16]
word pans[16]
word sustains[16]

'--------------------------------------------------------------
'---------- Init the variables, start the cog. ----------------
'--------------------------------------------------------------

pub start(mbox,scope,cache) :cog,base | iii

' mbox: PSRAM mailbox or 0 if no PSRAM
' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' cache: a pointer to 2 KB long HUB cache for PSRAM audio data

mailboxaddr:=mbox 
scope_ptr:=scope
cache_ptr:=cache
base:=@channel0[0]

repeat iii from 0 to 15
  long[base+64*iii]:=0
  long[base+64*iii+4]:=0  		
  long[base+64*iii+8]:=0
  long[base+64*iii+12]:=0
  long[base+64*iii+16]:=0
  long[base+64*iii+20]:=0
  long[base+64*iii+24]:=0
  long[base+64*iii+28]:=0
  word[base+64*iii+32]:=8192
  word[base+64*iii+34]:=8192
  long[base+64*iii+36]:=0
  long[base+64*iii+40]:=0
  long[base+64*iii+44]:=0
  long[base+64*iii+48]:=0
  long[base+64*iii+52]:=0
  freqs[iii]:=440000
  delays[iii]:=0
  volumes[iii]:=4096
  waveforms[iii]:=0
  envelopes[iii]:=0
  lengths[iii]:=1000
  pans[iii]:=8192
  sustains[iii]:=255
  
cog:=coginit(16,@audio,@mailboxaddr)
waitms(10)
return cog,base

pub play (channel, frequency=-1, delay=-1, volume=-1, waveform=-1, envelope=-1, length=-1, pan=-1, sustain=-1) | base2

if frequency==(-1)
  frequency:=freqs[channel]
else
  freqs[channel]:=frequency
  
if delay==(-1)
  delay:=delays[channel]
else
  delays[channel]:=delay
  
if volume==(-1)      
  volume:=volumes[channel]
else
  volumes[channel]:=volume
  
if waveform==(-1)
  waveform:=waveforms[channel]
else
  waveforms[channel]:=waveform
  
if envelope==(-1)
  envelope:=envelopes[channel]
else
  envelopes[channel]:=envelope
  
if length==(-1)
  length:=lengths[channel]
else
  lengths[channel]:=length
  
if pan==(-1)
  pan:=pans[channel]
else
  pans[channel]:=pan
 
if sustain==(-1)
  sustain:=sustains[channel]
else
  sustains[channel]:=sustain
                
length:=24347887/length  
debug(udec(sustain))
base2:=@channel0[0]+64*channel
long[base2+20]:=waveform+$C0000000 
long[base2+28]:= 2048
long[base2+24]:= 0
word[base2+32]:=volume
word[base2+32]:=pan
long[base2+36]:=((frequency*109)/1000)*3574 ' (frequency*389566)/1000  freq*3574*109/1000
long[base2+44]:=envelope
long[base2+48]:=length
long[base2+52]:=sustain
waitms(delay)

pub play1(channel,sample,splfreq,vol,len,loop=-1) |base2

base2:=@channel0[0]+64*channel
long[base2+20]:=sample+$C0000000 
long[base2+28]:= len
if loop >=0 
  long[base2+24]:= loop
else
  long[base2+24]:= len
word[base2+32]:=vol
long[base2+36]:= splfreq*389566

    
pub playtoend8(channel,sample,splfreq,vol,len) |base2,i

base2:=@channel1[0]+64*channel
long[base2]:=0
long[base2+8]:=sample+$40000000 
long[base2+12]:= len
long[base2+16]:= len+1
word[base2+20]:=vol
word[base2+24]:= 3546895/splfreq 
word[base2+26]:=256 ' todo: use skip to make accurate sample rate
'long[base2+28]:=$40000000
repeat 
  i:=long[base2]
until (i >>8) >=len
word[base2+20]:=0

pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i

base2:=@channel1[0]+64*channel
long[base2]:=0
long[base2+8]:=sample+$40000000 
if loop>=0
  long[base2+12]:=loop
  long[base2+16]:= len
else
  long[base2+12]:= len
  long[base2+16]:= len+1
word[base2+20]:=vol
word[base2+24]:= 3546895 /splfreq 
word[base2+26]:=256 ' todo: use skip to make accurate sample rate
'long[base2+28]:=$40000000

    

' a simple play procedure to not poke everything. 


pub setenv(channel,env,envlen) | base2

base2:=@channel1[0]+64*channel


pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2

base2:=@channel0[0]+64*channel
long[base2+20]:=sample+$C0000000 
long[base2+28]:= len
long[base2+24]:= loop
word[base2+32]:= vol
long[base2+36]:= splfreq*389566
waitms(delay)

pub beep(channel,sample,splfreq,vol,len,loop,delay) | base2

base2:=@channel0[0]+64*channel
long[base2+20]:=sample+$C0000000 
long[base2+28]:= len
long[base2+24]:= loop
word[base2+32]:= vol
long[base2+36]:= splfreq*761
waitms(delay)
pub stop(channel) | base2 'silence it

base2:=@channel0[0]+64*channel
word[base2+32]:=0





'--------------------------------------------------------------
'------ PASM driver code --------------------------------------
'-------------------------------------------------------------- 

dat

audio       	org     0

            	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
            	rdlong  scbase, ptra++       	' get start address of scope buffer
            	rdlong  hubptr, ptra++       	' get start address of PSRAM cache

            	cogid   pa                   	' compute cogid
            	mul     pa, #12              	' and mailbox spacing
            	add     mailbox2, pa         	' add offset to find this COG's mailbox
            	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram

            	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
            	wxpin   sr44100,#left      	' 30*256
            	wrpin   dac2,#right
            	wxpin   sr44100,#right    
            	dirh    #left addpins 1
            	setse1  #%001<<6 + left      	' Set the event - DAC empty
 
            
'---------------------------------------------------------------------------------        
'----------------- The main loop -------------------------------------------------
'---------------------------------------------------------------------------------

loop       	mov 	    cn,#15 '7
              					'   waitx ##3300000  		'for debug
            
'----------------------------------------------------------------------------------
'------------- Get parameters and execute commands if any -------------------------
'----------------------------------------------------------------------------------


p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
            	shl     channeladd,#6
            	add     ptra,channeladd

            	setq    #13                       	' read parameters
            	rdlong  pointer0,ptra
p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
    	if_nc   jmp     #p404                     	' if not set, proceed
            	mov     qq,command0             	' get the new rate
            	wxpin   qq,#left addpins 1        	' and program the pins
            	getbyte qq,qq,#0 		      	' check if the rate is n*256
            	cmp     qq,#0 wz                         
    	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
    	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
                
               	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
    	if_z    mov     pointer0, #0  
    	if_z    mov     pointer0h, #0  
    	if_z    mov     envph0, #0  
    	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
    	
p404        	mov     qq,sstart0		     	' check if start>$80000
		and 	qq,##$7FFFFFF 
                cmp 	qq,##$80000 wcz
    	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
    	if_lt   mov     mailbox,#0                	' if not, use HUB 

p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
    	    	getword avol0,volpan0,#0
    	    	
'----------------------------------------------------------------------------------
'------------- Compute the envelope, if exists ------------------------------------
'----------------------------------------------------------------------------------
            
            	cmp     envptr0,#0 wcz     		' read the pointer
    	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
    	if_z    jmp     #p410				' and run away	

           	add     envph0,envspd0			' envelope PA update
           	           
      	    	mov     envhi, envph0			' move phase acc to high part of env pointer
		shr     envhi,#6			' leave 10 bits in hi
	   	getword envlo,envhi,#0              	' and 16 bit in lo
	    	shr     envhi,#16			' move 10 bits of hi to the lower word
	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
	    											'debug(udec(envhi,envlen0))
    	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
    	if_ge   mov     envlo,#0
    	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
    	if_ge   shl     envph0,#22

            	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
            	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
            	add 	envs1,envptr0                   ' and add it to the pointer
            	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
            	getword envs2,envs1,#1			' then separate them		
           	getword envs1,envs1,#0
            	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
            	not     envlo
            	mul     envs1,envlo
            	add     envs1,envs2
            	shr     envs1,#18			' we need only 14 bits for scas
              
'----------------------------------------------------------------------------------
'------------- Generate the noise if bit 27 of the pointer is set -----------------
'----------------------------------------------------------------------------------

p410        	testb   sstart0, #27 wz
    	if_z    getrnd  spl
    	if_z    jmp     #p406
    	
'----------------------------------------------------------------------------------
'------------- Get the sample -----------------------------------------------------
'----------------------------------------------------------------------------------    	
 
		mov	oldptrh,pointer0h
           	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
           	shl	freqskip0,#8                	' and keep the fractional in freqskip0
           	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
           	addx	pointer0h,afreq0  
 		cmp	pointer0h,oldptrh wcz
 	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
     	
            	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
     	if_z    shl     pointer0h,#1        
            	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
     	if_z    shl     pointer0h,#1        
												
            	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
   	if_ge   sub     pointer0h,lend0       
        if_ge   add     pointer0h,lstart0
            	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
        if_ge   mov	pointer0h,lend0	
 
             	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
           	add     qq,sstart0            
           	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
    	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
    	if_gt   call    #cache_read
                testb   sstart0,#31 wz 
    	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
        if_z    shr     pointer0h,#1
                testb   sstart0,#28 wz            
    	if_z    shr     pointer0h,#1    
                rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
             
             

             
                  
p411	      	getword spl,rawspl0,#0
		getword oldspl,rawspl0,#1		' then separate them		

         '    debug(uhex(pointer0h,pointer0,spl,oldspl))


		mov	envlo,pointer0
		shr 	envlo,#18
	
            	scas    oldspl,envlo                   	' and do linear interpolation
            	mov 	oldspl,0-0
            	not     envlo
          	and     envlo,##$3FFF
           	scas    spl,envlo
            	mov     spl,0-0
                add     spl, oldspl
	 
p406        	scas    spl, envs1
            	mov     spl,0-0
            	scas    spl,avol0                 	' apply volume
            	mov     spl,0-0
 
            	scas    spl,apan0                 	' apply pan
            	mov     ls0,0-0
            	mov     qq,##16384
            	sub     qq,apan0
            	scas    spl,qq
            	mov     rs0, 0-0
      
                setword sample0,rs0,#1           	' pack samples into long
                setword sample0,ls0,#0
                
                add  lsample,ls0
                add  rsample,rs0
             
            	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
    	if_z    mov     pointer0, #0  
    	if_z    mov     pointer0h, #0  
    	if_z    mov     envph0, #0  
    	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
            
p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
	       	wrlong  pointer0,ptra
            	sub     ptra, channeladd         	' reset the pointer to channel parameters

            	djnf    cn, #p401

            	bitnot rsample, #15
            	bitnot lsample, #15
  							'           	getct ct2  	'debug
  							'          	sub ct2,ct1
  							'          	debug(udec(ct2))
            	waitse1
          
           	wypin   lsample, #left              
                wypin   rsample, #right        

		setword oldsample, lsample,#0		' for oscilloscope
		setword oldsample, rsample,#1
		
            	mov rsample, #0
            	mov lsample, #0

'----------------------------------------------------------------------------------
'------------- Oscilloscope  -----------------------------------------------------
'----------------------------------------------------------------------------------   
		
	    	cmp     scbase,#0 wz
    	if_z    jmp #p302	   
 
            	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
    	if_c    mov scptr2,scptr
    	if_c    shl scptr2,#2
    	if_c    add scptr2,scbase     
            	wrlong scptr2,#$60
    	if_c    wrlong oldsample,scptr2
    	if_c    incmod scptr,##639
            
 p302           jmp     #loop            'loop

'----------------------------------------------------------------------------------
'------------- This is the end of the main loop -----------------------------------
'----------------------------------------------------------------------------------

'----------------------------------------------------------------------------------
'------------- PSRAM cache ----------- --------------------------------------------
'----------------------------------------------------------------------------------

' There are 16 cache pointers for 16 channels
' if 24 higher bits of address=cache, then get a word from the cache
' else load the cache from PSRAM, update the pointer, then read a sample


cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
            
	   	mov     addrhi,qq		
	    	shr     addrhi,#8		        ' get 24 upper bits
	    	alts    cn,#cache1            
	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
    	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
	
p702	    	altd    cn,#cache1			' cache miss. 
	    	mov     0-0,addrhi                  	' update the pointer
	    	mov     cmd,addrhi			' prepare the mailbox
	    	shl     cmd,#8
            	setnib  cmd, #%1011, #7             	' read burst from the external memory
            	mov     hubaddr,cn                  	' to the channel cache
            	shl     hubaddr,#8                  	'
            	add     hubaddr,hubptr 
            	mov     count,#256                  	' 256 bytes
            	setq    #2                          	' write 3 longs
            	wrlong  cmd, mailbox                	' run it
poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
            	tjs     cmd, #poll1                 	' retry until valid 
            
	
p701	    	mov     qq,cn				' cache hit
	    	shl     qq,#8				' compute the cache start
	    	add     qq,hubptr
	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
    	_ret_   rdword  spl,qq                      	' read a long from the cache
          
  


'---------------------------------------------------------------------------
'------- Variables ---------------------------------------------------------
'---------------------------------------------------------------------------

' constants

channeladd 	long 0

' temporary variables 

qq          	long 0
spl         	long 0
mailbox     	long 0
mailbox2    	long 0
lsample     	long 0
rsample     	long 0

' channel parameter block

pointer0    	long 0   
pointer0h   	long 0  
sample0     	long 0
rawspl0	    	long 0
envph0	    	long 0
sstart0     	long 0     ' start pointer and type at bit 31
lstart0     	long 0
lend0       	long 0
volpan0     	long 0
freqskip0   	long 0
command0    	long 0
envptr0	    	long 0
envspd0	    	long 0
envlen0	    	long 0
res5	    	long 0
res6	    	long 0

oldspl		long 0
afreq0      	long 0

avol0       	long 0
apan0       	long 0
oldptrh	    	long 0
cn          	long 0

' Samples

ls0         	long 0
rs0         	long 0

oldsample   	long 0

scbase 		long 0
scptr 		long 0
scptr2		long 0
scope 		long 0

dac         	long %10111_00000000_01_00010_0     	'random dither
dac2        	long %10111_00000000_01_00011_0     	'pwm

hubptr      	long $71800
sr44100     	long 30*256

cache1      	long 0
cache2      	long 0
cache3      	long 0
cache4      	long 0
cache5      	long 0
cache6      	long 0
cache7      	long 0
cache8      	long 0
cache9      	long 0
cachea      	long 0
cacheb      	long 0
cachec      	long 0
cached      	long 0
cachee      	long 0
cachef      	long 0
cache0      	long 0

cmd         	long 0
hubaddr    	long 0
count       	long 256

addrlo 		long 0
addrhi 		long 0
pointer00 	long 0
envhi 		long 0
envlo 		long 0
envs1 		long 0
envs2 		long 0
noise0 		long 0

'ct1 		long 0
'ct2 		long 0

		fit 256		'todo: maybe the better interpolation. Or all params in cog
		
'-----------------------------------------------------------------------------------------
'------ PASM driver ends here ------------------------------------------------------------
'----------------------------------------------------------------------------------------- 
'
dat 
null  			long 	0,0           ' for channel reset
'sinewave 		file 	"sinus.s2"    ' for testing
